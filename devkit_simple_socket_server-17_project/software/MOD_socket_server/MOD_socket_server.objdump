
MOD_socket_server.elf:     file format elf32-littlenios2
MOD_socket_server.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000338

Program Header:
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x0005709c memsz 0x00060130 flags rwx
    LOAD off    0x00058000 vaddr 0x14430000 paddr 0x14430000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  14430000  14430000  00058000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  08000120  08000120  00000120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0004e4f0  08000338  08000338  00000338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006514  0804e828  0804e828  0004e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000235c  08054d40  08054d40  00054d40  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009094  0805709c  0805709c  0005709c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_ddr3_emif_0 00000000  08060130  08060130  00058000  2**0
                  CONTENTS
  7 .ext_flash_avl_mem 00000000  14430020  14430020  00058000  2**0
                  CONTENTS
  8 .descriptor_memory 00000000  18000000  18000000  00058000  2**0
                  CONTENTS
  9 .onchip_ram   00000000  18002800  18002800  00058000  2**0
                  CONTENTS
 10 .comment      0000002c  00000000  00000000  00058000  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001fd0  00000000  00000000  00058030  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0011feef  00000000  00000000  0005a000  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0002475b  00000000  00000000  00179eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00043d92  00000000  00000000  0019e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009840  00000000  00000000  001e23dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000dbc5  00000000  00000000  001ebc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000262d0  00000000  00000000  001f97e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000050  00000000  00000000  0021fab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002478  00000000  00000000  0021fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000006  00000000  00000000  0022db62  2**0
                  CONTENTS, READONLY
 21 .cpu          00000003  00000000  00000000  0022db68  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0022db6b  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0022db6c  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0022db6d  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0022db71  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0022db75  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   00000009  00000000  00000000  0022db79  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    00000009  00000000  00000000  0022db82  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   00000009  00000000  00000000  0022db8b  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 00000005  00000000  00000000  0022db94  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000039  00000000  00000000  0022db99  2**0
                  CONTENTS, READONLY
 32 .jdi          000047e1  00000000  00000000  0022dbd2  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     0012f331  00000000  00000000  002323b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
14430000 l    d  .entry	00000000 .entry
08000120 l    d  .exceptions	00000000 .exceptions
08000338 l    d  .text	00000000 .text
0804e828 l    d  .rodata	00000000 .rodata
08054d40 l    d  .rwdata	00000000 .rwdata
0805709c l    d  .bss	00000000 .bss
08060130 l    d  .mem_if_ddr3_emif_0	00000000 .mem_if_ddr3_emif_0
14430020 l    d  .ext_flash_avl_mem	00000000 .ext_flash_avl_mem
18000000 l    d  .descriptor_memory	00000000 .descriptor_memory
18002800 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MOD_socket_server_bsp//obj/HAL/src/crt0.o
0800037c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 DELHProtocol.c
080572b0 l     O .bss	0000039c Connections
0805709c l     O .bss	00000004 LEDCommand
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 iniche_init.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 simple_socket_server.c
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getchar.c
00000000 l    df *ABS*	00000000 impure.c
08054e88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
080045e0 l     F .text	00000248 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
080505a0 l     O .rodata	00000010 blanks.5157
08050590 l     O .rodata	00000010 zeroes.5158
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008a00 l     F .text	000000c0 __sbprintf
080505c0 l     O .rodata	00000010 blanks.5176
080505b0 l     O .rodata	00000010 zeroes.5177
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08008c80 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fileno.c
00000000 l    df *ABS*	00000000 findfp.c
0800a8e0 l     F .text	00000008 __fp_lock
0800a8f4 l     F .text	00000168 __sinit.part.0
0800aa5c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0805066c l     O .rodata	0000000c p05.3991
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
080507a0 l     O .rodata	00000010 blanks.5137
08050790 l     O .rodata	00000010 zeroes.5138
00000000 l    df *ABS*	00000000 vfprintf.c
0800ef88 l     F .text	000000f4 __sprint_r.part.0
080103b4 l     F .text	000000c0 __sbprintf
080507c0 l     O .rodata	00000010 blanks.5153
080507b0 l     O .rodata	00000010 zeroes.5154
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 refill.c
08010d20 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
0801110c l     F .text	0000004c _init_signal_r.part.0
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08014724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08014830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
08014910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
08014a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08056f5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
08056f60 l     O .rwdata	00000004 lockid
080570d4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
08056f64 l     O .rwdata	00000004 lockid
080570dc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
08016630 l     F .text	00000048 OS_InitMisc
08016678 l     F .text	0000006c OS_InitRdyList
080167ec l     F .text	000000e4 OS_InitTCBList
08016550 l     F .text	000000e0 OS_InitEventList
080166e4 l     F .text	00000084 OS_InitTaskIdle
08016768 l     F .text	00000084 OS_InitTaskStat
08016a60 l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
08018824 l     F .text	000000f4 OS_FlagTaskRdy
080185e0 l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801c984 l     F .text	00000034 alt_dev_reg
08055820 l     O .rwdata	0000003c i2c_ckm_c0
0805585c l     O .rwdata	0000003c i2c_ckm_c1
08055898 l     O .rwdata	0000003c i2c_ckm_id
080558d4 l     O .rwdata	0000003c i2c_rxm_ctrl
08055910 l     O .rwdata	0000003c i2c_rxm_id
0805594c l     O .rwdata	0000106c jtag_uart
080569b8 l     O .rwdata	000000dc ext_flash
08056aa0 l     O .rwdata	00000070 msgdma_rx
08056b10 l     O .rwdata	00000070 msgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0801cc58 l     F .text	00000110 optional_irq_callback
0801cdb8 l     F .text	000000a0 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801eb60 l     F .text	000002ac altera_avalon_jtag_uart_irq
0801ee0c l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801f60c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
08057136 l     O .bss	00000001 tse_system_count.5300
08057137 l     O .bss	00000001 is_init.5382
00000000 l    df *ABS*	00000000 altera_generic_quad_spi_controller.c
0802462c l     F .text	00000034 alt_flash_device_register
080250c4 l     F .text	0000008c alt_qspi_poll_for_write_in_progress
08025028 l     F .text	0000009c alt_qspi_validate_read_write_arguments
00000000 l    df *ABS*	00000000 altera_msgdma.c
08025150 l     F .text	0000003c alt_get_errno
0802518c l     F .text	00000094 alt_msgdma_write_standard_descriptor
08025220 l     F .text	0000012c alt_msgdma_write_extended_descriptor
0802534c l     F .text	00000188 alt_msgdma_irq
080254d4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
08025560 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
080256b4 l     F .text	00000344 alt_msgdma_descriptor_async_transfer
080259f8 l     F .text	00000410 alt_msgdma_descriptor_sync_transfer
080260d8 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
0802617c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
08057674 l     O .bss	0000003c closers
0805714c l     O .bss	00000004 nclosers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
08057000 l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
080576b0 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
0802e77c l     F .text	000000ac dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
00000000 l    df *ABS*	00000000 asm_cksum.o
080301a4 l       .text	00000000 done
08030034 l       .text	00000000 asm1
08030160 l       .text	00000000 loop0
0803005c l       .text	00000000 loop
0803017c l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
080571b8 l     O .bss	00000004 kbd_init.4473
080571b4 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
080571ec l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
08034424 l     F .text	0000008c sockargs
08033754 l     F .text	000001e0 t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
0803bf04 l     F .text	000000cc bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0803e7c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0803e94c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0803e978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0803ef08 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0803f034 l     F .text	0000003c alt_get_errno
0803f070 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0803f4d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0803fa18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
08057224 l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
08040328 l     F .text	0000014c check_interval_timers
08057230 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
08057234 l     O .bss	00000004 arp_timer
0805723c l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
08057084 l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
0805727c l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
0805708c l     O .rwdata	00000004 iCounter.5275
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
080576c8 l     O .bss	0000001e nearBuf.4902
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0804c9b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 icmp.c
08056f34 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0804e37c l     F .text	00000224 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintfr_1.c
080572a8 g     O .bss	00000004 alt_instruction_exception_handler
080271b8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
08003bc4 g     F .text	00000018 putchar
0805fc2c g     O .bss	00000014 soq
0800d27c g     F .text	00000070 _mprec_log10
08020808 g     F .text	000000cc alt_tse_get_mac_info
08056fb2 g     O .rwdata	00000002 OSTaskNameSize
0800d358 g     F .text	00000060 __any_on
08010b18 g     F .text	00000058 _isatty_r
08050678 g     O .rodata	00000028 __mprec_tinytens
08042024 g     F .text	0000070c ip_write_internal
08014b88 g     F .text	000000c0 alt_main
08003d70 g     F .text	0000008c strcpy
0802f944 g     F .text	000000ac pk_free
08003bdc g     F .text	000000cc _puts_r
0805fdd8 g     O .bss	00000100 alt_irq
08056dd4 g     O .rwdata	00000009 rtp_priority
08010c08 g     F .text	00000064 _lseek_r
0804db38 g     F .text	000002ec icmp_timex
080311e0 g     F .text	00000048 m_freem
0804c4b8 g     F .text	00000048 vgetc
080302ec g     F .text	00000020 clock_c
08057204 g     O .bss	00000004 tcp_optionbuf
08041b60 g     F .text	0000006c if_getbynum
08019068 g     F .text	000000cc OS_MemInit
080571a4 g     O .bss	00000004 dsc_rlyerrs
08057194 g     O .bss	00000004 dsc_releases
0802c890 g     F .text	0000006c TK_OSTaskQuery
08030014 g       .text	00000000 asm_cksum
080243c8 g     F .text	000000f0 marvell_cfg_rgmii
0801c920 g     F .text	00000064 OSTimeSet
0804c3c0 g     F .text	000000f8 vgetc_locked
08030ac4 g     F .text	00000020 post_task_setup
08045528 g     F .text	00000328 ipr_stats
0803d6b0 g     F .text	00000118 tcp_attach
08057010 g     O .rwdata	00000004 reqlist_len
08032538 g     F .text	00000078 tcp_tick
0802bbd0 g     F .text	0000007c print_ipad
0802c7b8 g     F .text	000000d8 tcp_wakeup
08013274 g     F .text	00000080 .hidden __eqdf2
080570a4 g     O .bss	00000004 last_flash_sector_offset
08057150 g     O .bss	00000004 igmp_timers_are_running
08002dc0 g     F .text	000000f0 led_bit_toggle
0803a9c8 g     F .text	0000012c tcp_pulloutofband
08025eb8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
08000710 g     F .text	00000090 allListeners
08021a1c g     F .text	000001d0 alt_tse_phy_print_profile
08015288 g     F .text	00000638 OSEventPendMulti
08060130 g       *ABS*	00000000 __alt_heap_start
0803fd8c g     F .text	00000024 OSTaskCreateHook
080045d8 g     F .text	00000008 strtok_r
0802f1f0 g     F .text	00000060 dhc_ifacedone
08024168 g     F .text	00000098 marvell_phy_cfg
080458a0 g     F .text	00000354 ip_rcv
0804c150 g     F .text	00000164 vfseek
08036ca4 g     F .text	00000108 soqremque
080113c0 g     F .text	00000060 _kill_r
080473c8 g     F .text	0000076c udpdemux
08028b64 g     F .text	000000dc tse_mac_close
08003b84 g     F .text	00000038 printf
08057250 g     O .bss	00000004 rt_mib
08056f8a g     O .rwdata	00000002 OSMboxEn
0802f118 g     F .text	00000058 dhc_state_init
0804e658 g     F .text	0000001c vsprintf
08015918 g     F .text	0000004c OSIntEnter
08010fc4 g     F .text	0000006c _wcrtomb_r
0801116c g     F .text	00000084 _signal_r
0800dc80 g     F .text	0000005c __sseek
0800abdc g     F .text	00000010 __sinit
0804668c g     F .text	0000010c in_delmulti
08010474 g     F .text	00000148 __swbuf_r
08024530 g     F .text	0000005c PEF7071_config
08057268 g     O .bss	00000004 so_evtmap_create
08056f9a g     O .rwdata	00000002 OSQEn
0804a814 g     F .text	00000088 in_pcballoc
0805702c g     O .rwdata	00000002 socket_defaults
08010b70 g     F .text	00000074 _setlocale_r
08040a40 g     F .text	00000454 send_arp
0800aa64 g     F .text	00000068 __sfmoreglue
0801d4f8 g     F .text	000000a8 alt_avalon_i2c_rx_read
0804b270 g     F .text	00000338 vfopen_locked
080570ac g     O .bss	00000004 SSSLEDCommandQ
08014f48 g     F .text	000000d4 __malloc_unlock
0805f054 g     O .bss	000000e0 eth_tse_if
0803fdf4 g     F .text	00000020 OSTaskStatHook
08040248 g     F .text	00000054 prep_modules
0802b138 g     F .text	000001dc bsd_i_sockoptlen
080570e4 g     O .bss	00000001 OSLockNesting
08024dc4 g     F .text	00000264 altera_qspi_controller_init
08057008 g     O .rwdata	00000004 xids
0801e708 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
08004458 g     F .text	00000018 strerror
08020a40 g     F .text	00000a78 getPHYSpeed
0804b7b0 g     F .text	00000044 vfclose
0805fccc g     O .bss	0000002c tcb
08056fd8 g     O .rwdata	00000002 OSDataSize
0803f668 g     F .text	00000034 alt_remap_cached
080570e5 g     O .bss	00000001 OSRunning
080418a8 g     F .text	000002b8 grat_arp
08002f5c g     F .text	0000005c get_ip_addr
0804a2a8 g     F .text	00000094 inet_pton
08041ca0 g     F .text	0000008c reg_type
0805f7d0 g     O .bss	000000f0 dhc_states
0802a0b4 g     F .text	00000170 igmp_fasttimo
0804b95c g     F .text	00000060 vunlink_flag_open_files
0802ef3c g     F .text	0000007c dhc_halt
0801d278 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08057188 g     O .bss	00000004 dsc_acks
0805fcf8 g     O .bss	000000e0 tcpstat
08044e58 g     F .text	0000033c ip_reasm_copy_queued_fragments_into_reassy_buffer
08031714 g     F .text	00000098 dtom
0803be08 g     F .text	000000fc tcp_setpersist
08033af4 g     F .text	00000188 t_getsockopt
0800c1f0 g     F .text	0000012c memmove
08001db0 g     F .text	000002e0 initItfcMap
08057198 g     O .bss	00000004 dsc_naks
08031b40 g     F .text	00000588 ip_output
0803fe40 g     F .text	00000020 OSInitHookBegin
0804de24 g     F .text	00000054 icmp_du
08057004 g     O .rwdata	00000004 num_net_tasks
0805728c g     O .bss	00000004 vfiles
08056fd0 g     O .rwdata	00000002 OSTmrSize
08049a64 g     F .text	000000f4 dhc_main_ipset
0800abc8 g     F .text	00000014 _cleanup
0804407c g     F .text	000002a8 ip_reasm_process_first_fragment
0801df5c g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
0800c31c g     F .text	000000a4 _Balloc
08004534 g     F .text	000000a4 __strtok_r
080032d0 g     F .text	0000002c get_board_mac_addr
08025e08 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
080570e8 g     O .bss	00000004 OSIdleCtr
080233dc g     F .text	000001c4 alt_tse_phy_set_adv_1000
08056fe8 g     O .rwdata	00000001 max_mac_system
08048a68 g     F .text	000005a0 ip_setmoptions
0801fc24 g     F .text	000008c4 alt_tse_system_add_sys
080132f4 g     F .text	000000f0 .hidden __gtdf2
08049dc4 g     F .text	0000002c md_fseek
0803fb4c g     F .text	00000024 altera_nios2_gen2_irq_init
0803fc1c g       .text	00000000 OSStartTsk
08016d88 g     F .text	000002e0 OS_TCBInit
08044324 g     F .text	00000088 ip_reassm
080010e4 g     F .text	000001d4 SI5345
0802efb8 g     F .text	00000160 dhc_reclaim
080600b8 g     O .bss	00000010 udp_mib
14430000 g     F .entry	00000000 __reset
08034290 g     F .text	000000d4 t_shutdown
0800b744 g     F .text	00000008 __localeconv_l
08033d58 g     F .text	0000013c t_recvfrom
08056fd6 g     O .rwdata	00000002 OSTmrWheelTblSize
080491e0 g     F .text	0000066c u_mctest_run
080467fc g     F .text	00000080 prep_ifaces
0805716c g     O .bss	00000001 to_netmain
0802f630 g     F .text	000000c0 pk_alloc
08056f76 g     O .rwdata	00000002 OSEventSize
08002a28 g     F .text	000002a8 alt_SSSErrorHandler
080570ec g     O .bss	00000001 OSPrioHighRdy
08010ab8 g     F .text	00000060 _fstat_r
08054d58 g     O .rwdata	00000130 tse_mac_device
0802c580 g     F .text	00000048 tk_nettick
0803fdb0 g     F .text	00000024 OSTaskDelHook
080570b4 g     O .bss	00000004 errno
0800db3c g     F .text	00000010 __srget
08037ec4 g     F .text	000000c8 in_pcbnotify
0800dbf8 g     F .text	00000008 __seofread
0803fbfc g       .text	00000000 OSStartHighRdy
0805f8c0 g     O .bss	00000014 lilfreeq
08002118 g     F .text	0000069c alt_uCOSIIErrorHandler
080468a4 g     F .text	0000002c evtmap_setup
0801b390 g     F .text	000001dc OSTaskCreateExt
08057170 g     O .bss	00000004 tcp_sleep_timeout
0803766c g     F .text	000001b8 sbdrop
08057264 g     O .bss	00000004 net_system_exit
080600c8 g     O .bss	00000068 icmp_mib
0800dea4 g     F .text	000010e4 ___svfiprintf_internal_r
0803c868 g     F .text	00000074 tcp_getseq
08046c78 g     F .text	000000b8 ip_raw_alloc
08023cb8 g     F .text	000004b0 alt_tse_phy_set_common_speed
08024920 g     F .text	00000210 alt_qspi_controller_write_block
08018108 g     F .text	00000064 OSFlagPendGetFlagsRdy
08056fb6 g     O .rwdata	00000002 OSTaskStatStkSize
0805f134 g     O .bss	00000010 pmac_groups
0802da50 g     F .text	0000098c dhc_request
08035388 g     F .text	00000758 soreceive
080171f8 g     F .text	00000324 OSFlagAccept
080196b8 g     F .text	000000bc OSQFlush
08019134 g     F .text	00000144 OSQAccept
080570cc g     O .bss	00000004 alt_argv
0805ef4c g       *ABS*	00000000 _gp
08045850 g     F .text	00000050 ip_reasm_send_icmp_timex
0803f904 g     F .text	00000114 usleep
0801e74c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0804b7f4 g     F .text	00000048 vfflush
0805fbd4 g     O .bss	00000040 resid_semaphore
0802ba88 g     F .text	00000148 hexdump
08043f64 g     F .text	00000090 ip_reasm_incr_mem_useage
0802a6c8 g     F .text	00000080 igmp_leavegroup
0801b1ec g     F .text	000001a4 OSTaskCreate
0801ad28 g     F .text	000004c4 OSTaskChangePrio
080570e0 g     O .bss	00000004 alt_heapsem
08014810 g     F .text	00000020 getpid
0803c6bc g     F .text	000000e8 tcp_close
08017068 g     F .text	00000190 OSDebugInit
0801b56c g     F .text	00000344 OSTaskDel
0804c8d8 g     F .text	0000005c vferror
0803f88c g     F .text	00000078 alt_uncached_malloc
0801d408 g     F .text	00000044 alt_avalon_i2c_is_busy
0801f73c g     F .text	00000060 tse_mac_initTransInfo2
080269a0 g     F .text	0000014c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
08047f6c g     F .text	000000bc udp_alloc
08056c3c g     O .rwdata	00000180 alt_fd_list
0805be30 g     O .bss	00000370 OSFlagTbl
080571f0 g     O .bss	00000008 mbstat
0800b638 g     F .text	0000007c _getc_r
0800b6b4 g     F .text	00000090 getc
08003bbc g     F .text	00000008 _putchar_r
0801d1ac g     F .text	000000cc alt_avalon_i2c_master_config_set
08016338 g     F .text	000000b0 OS_EventTaskRemove
080486dc g     F .text	00000130 igmpv2_chk_set_timer
0802c5c8 g     F .text	00000030 TK_OSTimeDly
0803eb24 g     F .text	00000090 alt_find_dev
08000e78 g     F .text	00000044 TrafficChanMessage
080037cc g     F .text	00000100 memcpy
0801f9cc g     F .text	00000054 tse_mac_setMIImode
080571a0 g     O .bss	00000004 dsc_rebind
0804065c g     F .text	0000007c task_stats
08032f08 g     F .text	00000050 DOMAIN_CHECK
080320c8 g     F .text	00000038 in_broadcast
08056fa0 g     O .rwdata	00000002 OSRdyTblSize
080003f4 g     F .text	000000a8 addChan
080214b8 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
08057288 g     O .bss	00000004 vfsystems
08047ebc g     F .text	000000b0 udp_socket
08057140 g     O .bss	00000004 MaxMtu
08037b84 g     F .text	00000150 sock_selscan
0800a8e8 g     F .text	0000000c _cleanup_r
0801454c g     F .text	000000bc .hidden __floatsidf
08043d4c g     F .text	000000c4 ip_reasm_match_frag_with_ire
08036e04 g     F .text	00000058 socantrcvmore
0801f79c g     F .text	000000c8 tse_mac_sTxWrite
08003b44 g     F .text	00000010 perror
0803efb8 g     F .text	0000007c alt_io_redirect
080133e4 g     F .text	000000f0 .hidden __ltdf2
080571cc g     O .bss	00000004 netq_intmask
0804a25c g     F .text	0000004c hextoa
0804e828 g       *ABS*	00000000 __DTOR_END__
08026eb4 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_extd_desc_list
080271f4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
08034090 g     F .text	00000200 t_send
0803e804 g     F .text	000000d0 alt_close
08027164 g     F .text	00000054 alt_msgdma_register_callback
0801dda0 g     F .text	000001bc alt_avalon_i2c_master_transmit
080571f8 g     O .bss	00000002 select_wait
08003ca8 g     F .text	00000010 puts
0802c114 g     F .text	00000044 std_out
0804ccf0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0805f164 g     O .bss	00000030 tse_iniche_dev_driver_data
0804c500 g     F .text	00000124 vfslookup_locked
08034c40 g     F .text	00000098 soaccept
0801501c g     F .text	00000124 OSEventNameGet
08056f84 g     O .rwdata	00000002 OSFlagMax
08003dfc g     F .text	0000065c _strerror_r
0805fc40 g     O .bss	0000003c tcpmib
080344b0 g     F .text	00000094 t_errno
080468d0 g     F .text	000000d8 ip_raw_open
0802e67c g     F .text	00000100 dhc_decline
0800d1d4 g     F .text	000000a8 __ratio
08015964 g     F .text	000000f4 OSIntExit
08057088 g     O .rwdata	00000004 ipRoutes
0804b90c g     F .text	00000050 vfeof
08010398 g     F .text	0000001c __vfiprintf_internal
0803cb38 g     F .text	00000060 tcp_canceltimers
0802d378 g     F .text	000001bc dhc_buildheader
08056fbe g     O .rwdata	00000002 OSTCBSize
080570ed g     O .bss	00000001 OSPrioCur
0801f074 g     F .text	000002c8 altera_avalon_jtag_uart_read
0804e084 g     F .text	00000010 malloc
08057284 g     O .bss	00000004 inpcb_cachemiss
08026608 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
08003b54 g     F .text	00000030 _printf_r
0804a41c g     F .text	000000c4 inet46_addr
08057280 g     O .bss	00000004 inpcb_cachehits
08011fdc g     F .text	00000064 .hidden __udivsi3
08056bf8 g     O .rwdata	0000000b tcp_outflags
0805f194 g     O .bss	00000290 tse
0801486c g     F .text	000000a4 isatty
080204e8 g     F .text	00000144 alt_tse_sys_enable_mdio_sharing
080111f0 g     F .text	000000c4 _raise_r
08056fa4 g     O .rwdata	00000002 OSStkWidth
0801062c g     F .text	00000064 __assert_func
0802761c g     F .text	0000007c msgdma_reset
080506c8 g     O .rodata	000000c8 __mprec_tens
0804b0e8 g     F .text	00000070 vf_alloc_and_link_vop
08056f98 g     O .rwdata	00000002 OSPtrSize
08057254 g     O .bss	00000004 ipr_curr_mem
08029da8 g     F .text	00000068 exit_hook
08057154 g     O .bss	00000004 igmp_cticks
0802078c g     F .text	0000007c alt_tse_get_mac_info_index
080571e0 g     O .bss	00000004 mheap_sem_ptr
0803ad30 g     F .text	00000048 ip4_tcpmss
08056f78 g     O .rwdata	00000002 OSEventTblSize
080005c4 g     F .text	000000b8 findExistingChan
0806003c g     O .bss	00000014 netlist
08035ae0 g     F .text	00000098 soshutdown
0803fb70 g       .text	00000000 OSCtxSw
080401d4 g     F .text	00000050 packet_check
0802e3dc g     F .text	000001ec dhc_setip
0805fc7c g     O .bss	00000014 mbufq
08034bf0 g     F .text	00000050 soabort
0801d018 g     F .text	00000098 alt_avalon_i2c_enable
080570c0 g     O .bss	00000004 __malloc_top_pad
080570f0 g     O .bss	00000004 OSTCBList
08011420 g     F .text	00000004 _getpid_r
0802fc3c g     F .text	00000100 qdel
0804003c g     F .text	00000160 station_state
08046dbc g     F .text	00000154 rt_lookup
08057210 g     O .bss	00000004 alt_fd_list_lock
08004848 g     F .text	0000001c strtoul
0801e634 g     F .text	0000006c alt_avalon_i2c_int_disable
0802a748 g     F .text	000002dc igmp_validate
08024d18 g     F .text	000000ac alt_qspi_controller_read
0800b74c g     F .text	0000000c _localeconv_r
08029b44 g     F .text	00000264 ip_startup
080283f0 g     F .text	00000198 tse_msgdmaRx_isr
0803320c g     F .text	00000250 t_accept
080368a4 g     F .text	00000098 soisdisconnecting
0800c768 g     F .text	00000054 __i2b
0800b03c g     F .text	000004bc __sfvwrite_r
080112b4 g     F .text	000000b8 __sigtramp_r
08029584 g     F .text	000003a4 pktdemux
0805c1a0 g     O .bss	00000c30 OSMemTbl
080570f4 g     O .bss	00000001 OSTickStepState
08021558 g     F .text	0000012c alt_tse_phy_wr_mdio_reg
080301dc g     F .text	00000088 kbhit
08033934 g     F .text	000001c0 t_setsockopt
0800db4c g     F .text	00000058 _sbrk_r
08056dbc g     O .rwdata	00000018 icmpdu_types
08021bec g     F .text	000006a8 alt_tse_mac_group_init
0804b9bc g     F .text	00000200 vunlink
08027698 g     F .text	00000a64 tse_mac_init
14000000 g       *ABS*	00000000 __alt_mem_ext_flash_avl_mem
08056f9c g     O .rwdata	00000002 OSQMax
0802b8e8 g     F .text	000000a4 ccksum
0804b158 g     F .text	000000c8 vf_alloc_buffer
08057278 g     O .bss	00000004 cachedRoute
08057014 g     O .rwdata	00000004 lilbufs
0805cdd0 g     O .bss	00000800 OSTaskStatStk
08049df0 g     F .text	00000024 md_ftell
0802b98c g     F .text	00000054 cksum
08018c8c g     F .text	000000f4 OSMemNameGet
08034818 g     F .text	00000110 sofree
08057148 g     O .bss	00000004 ifNumber
08056f7c g     O .rwdata	00000002 OSFlagEn
08010cbc g     F .text	00000064 _read_r
08056fc2 g     O .rwdata	00000002 OSTimeTickHookEn
0803e8d4 g     F .text	00000078 alt_dcache_flush
08018918 g     F .text	000000a4 OS_FlagUnlink
08019b80 g     F .text	00000174 OSQPost
08057054 g     O .rwdata	00000004 alt_max_fd
08016928 g     F .text	0000006c OS_MemCopy
0805701c g     O .rwdata	00000004 bigbufs
0801f8d4 g     F .text	00000070 tse_mac_aTxWrite
0803d7c8 g     F .text	000000cc tcp_disconnect
08016994 g     F .text	000000cc OS_Sched
08010758 g     F .text	000000f8 _fclose_r
08018b94 g     F .text	000000f8 OSMemGet
0801bba4 g     F .text	000001bc OSTaskNameSet
0800a854 g     F .text	00000028 fflush
080570bc g     O .bss	00000004 __malloc_max_sbrked_mem
080570f8 g     O .bss	00000004 OSCtxSwCtr
0805f748 g     O .bss	00000064 igmpstats
0803fe14 g     F .text	0000002c OSTimeTickHook
0802d97c g     F .text	000000d4 dhc_rx_offer
0802b314 g     F .text	00000108 bsd_getsockopt
08056f86 g     O .rwdata	00000002 OSFlagNameSize
080600a0 g     O .bss	00000018 ire_stats
0801e164 g     F .text	0000020c alt_avalon_i2c_master_receive
08002eb0 g     F .text	00000058 LEDManagementTask
0803d9f8 g     F .text	000001a0 udp_soinput
0802fb8c g     F .text	000000b0 putq
080163e8 g     F .text	000000fc OS_EventTaskRemoveMulti
08057168 g     O .bss	00000004 iniche_net_ready
0801209c g     F .text	00000978 .hidden __adddf3
080161f0 g     F .text	00000148 OS_EventTaskWaitMulti
0804c890 g     F .text	00000048 isvfile
08035c74 g     F .text	00000528 sosetopt
0802c428 g     F .text	000000e0 netmain
0803ad78 g     F .text	000000f8 tcp_mss
0800cf6c g     F .text	00000104 __b2d
08049efc g     F .text	000002fc parse_ipad
0804b0c8 g     F .text	00000020 get_vfopen_error
08026368 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
08056f9e g     O .rwdata	00000002 OSQSize
080119b4 g     F .text	00000534 .hidden __umoddi3
08014ab4 g     F .text	000000d4 lseek
0804029c g     F .text	0000008c inet_timer
0801a670 g     F .text	00000214 OSSemPend
08021754 g     F .text	000002c8 alt_tse_phy_add_profile_default
0801e6a0 g     F .text	00000068 alt_avalon_i2c_int_enable
08022e50 g     F .text	0000058c alt_tse_phy_get_cap
0800067c g     F .text	00000094 buildaddChan
08056f4c g     O .rwdata	00000004 _global_impure_ptr
0802bdd4 g     F .text	00000154 print_eth
0804b5a8 g     F .text	00000050 vfopen
0803f514 g     F .text	000000fc alt_read
0800d564 g     F .text	00000564 _realloc_r
080027b4 g     F .text	00000274 alt_NetworkErrorHandler
08056f88 g     O .rwdata	00000002 OSLowestPrio
08060130 g       *ABS*	00000000 __bss_end
0803ee20 g     F .text	000000e8 alt_iic_isr_register
080310dc g     F .text	00000104 m_free
0804e5a4 g     F .text	0000001c strtol_l
0803fea0 g     F .text	00000024 OSTCBInitHook
08028b24 g     F .text	00000040 tse_mac_stats
0802f6f0 g     F .text	00000254 pk_validate
08056fce g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0803f740 g     F .text	00000108 alt_tick
0804ae48 g     F .text	00000254 in_pcblookup
0802f2e4 g     F .text	000000c0 find_opt
08026fbc g     F .text	000001a8 alt_msgdma_init
08011424 g     F .text	00000590 .hidden __udivdi3
08030f54 g     F .text	00000188 m_getnbuf
0801e55c g     F .text	00000058 alt_avalon_i2c_int_status_get
0802fa10 g     F .text	000000c4 dump_buf_estats
08010a1c g     F .text	00000024 _fputwc_r
08022cc8 g     F .text	00000188 alt_tse_phy_check_link
0805724c g     O .bss	00000004 arpRepsOut
08056f70 g     O .rwdata	00000002 OSEventEn
080506a0 g     O .rodata	00000028 __mprec_bigtens
0800c51c g     F .text	00000138 __s2b
08056fca g     O .rwdata	00000002 OSTmrCfgNameSize
080110f4 g     F .text	00000018 abort
08014608 g     F .text	00000090 .hidden __floatunsidf
0803fec4 g     F .text	000000ec netmain_init
080242e4 g     F .text	000000e4 marvell_cfg_sgmii
08022b04 g     F .text	000001c4 alt_tse_phy_restart_an
0800cc8c g     F .text	00000058 __mcmp
0802726c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
08057184 g     O .bss	00000004 dsc_requests
0803c120 g     F .text	000003f4 tcp_respond
0803ddd0 g     F .text	000002d0 udp4_sockbind
080571d0 g     O .bss	00000004 old_mode
080012b8 g     F .text	00000300 ZEDF9T
0802a49c g     F .text	0000022c igmp_joingroup
080321f0 g     F .text	00000348 so_icmpdu
0800abfc g     F .text	00000014 __fp_lock_all
08057298 g     O .bss	00000004 vfs_dir_stale
0803edd4 g     F .text	0000004c alt_ic_irq_enabled
0805f144 g     O .bss	00000020 pphy_profiles
08045194 g     F .text	000000c8 ip_reasm_process_timer_tick
0804c934 g     F .text	00000058 vclearerr
0802b80c g     F .text	000000dc bsd_setsockopt
080316c0 g     F .text	00000054 mbuf_len
08018744 g     F .text	000000e0 OS_FlagInit
0803f69c g     F .text	000000a4 alt_alarm_stop
0804c66c g     F .text	000001cc strippath
0805700c g     O .rwdata	00000004 reqlist
0802c66c g     F .text	0000014c tcp_sleep
0804e5c0 g     F .text	0000001c strtol
0802cc90 g     F .text	000006e8 dhc_upcall
0803d894 g     F .text	000000c8 tcp_usrclosed
18000000 g       *ABS*	00000000 __alt_mem_descriptor_memory
080571bc g     O .bss	00000004 cticks_factor
0801ce58 g     F .text	00000054 alt_avalon_i2c_register_callback
08056fac g     O .rwdata	00000002 OSTaskIdleStkSize
0804a8f4 g     F .text	00000210 in_pcbbind
08057214 g     O .bss	00000004 alt_irq_active
0801ceac g     F .text	0000012c alt_avalon_i2c_init
0801a290 g     F .text	000000b4 OSSemAccept
08018e9c g     F .text	000000e0 OSMemPut
080189bc g     F .text	000001d8 OSMemCreate
080570fc g     O .bss	00000004 OSIdleCtrMax
080001fc g     F .exceptions	000000c8 alt_irq_handler
08056c14 g     O .rwdata	00000028 alt_dev_null
08025fa0 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
0805702e g     O .rwdata	00000001 tcprexmtthresh
08056fc0 g     O .rwdata	00000002 OSTicksPerSec
08041d2c g     F .text	00000094 if_killsocks
08042730 g     F .text	00000210 ip_write
08045bf4 g     F .text	000005a0 ip_rcv_phase2
08033710 g     F .text	00000044 t_getsockname
0803345c g     F .text	00000270 t_connect
08057028 g     O .rwdata	00000004 TCPTV_MSL
0805f8d4 g     O .bss	00000010 memestats
080229f8 g     F .text	0000010c alt_tse_phy_init
08030264 g     F .text	00000050 getch
08056eb4 g     O .rwdata	00000080 vfs_root_path
080336cc g     F .text	00000044 t_getpeername
08043ff4 g     F .text	00000088 ip_reasm_decr_mem_useage
08036f90 g     F .text	00000088 soreserve
0803fb70 g       .text	00000000 OSIntCtxSw
08030d08 g     F .text	00000034 npalloc
08026e04 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_std_desc_list
0800c654 g     F .text	00000064 __hi0bits
08057274 g     O .bss	00000004 ipraw_eps
0802f3a4 g     F .text	0000028c pk_init
08049bf4 g     F .text	00000158 md_fread
0802821c g     F .text	000001d4 tse_mac_raw_send
080144cc g     F .text	00000080 .hidden __fixdfsi
08000e34 g     F .text	00000044 ConfigChanMessage
0805fed8 g     O .bss	00000064 intimers
08037068 g     F .text	0000004c sbrelease
0803800c g     F .text	000000e4 ifd_clr
08037924 g     F .text	00000090 sbdroprecord
0802bf28 g     F .text	0000007c uslash
0803fa54 g     F .text	000000f8 alt_write
08057248 g     O .bss	00000004 arpRepsIn
0802cb24 g     F .text	00000088 dhc_get_srv_ipaddr
08040474 g     F .text	0000012c in_timerset
08057100 g     O .bss	00000004 OSTCBFreeList
0801a884 g     F .text	00000174 OSSemPendAbort
0803ae70 g     F .text	00000f98 tcp_output
08057220 g     O .bss	00000004 activehost
0805704c g     O .rwdata	00000008 alt_dev_list
0802c230 g     F .text	000001f8 parse_args
080571d4 g     O .bss	00000004 global_TCPwakeup_setIndx
08028e38 g     F .text	00000068 write
08030d3c g     F .text	00000040 npfree
0800d3b8 g     F .text	000000cc _putc_r
0801d834 g     F .text	0000004c alt_avalon_i2c_check_arblost
080410fc g     F .text	000002c0 arpReply
0802ba0c g     F .text	0000007c nextarg
08056fc4 g     O .rwdata	00000002 OSVersionNbr
08044900 g     F .text	00000500 ip_reasm_process_subsequent_fragments
08004470 g     F .text	00000018 strerror_l
08057094 g     O .rwdata	00000004 pton_error
08057178 g     O .bss	00000004 dsc_errors
0801e5f8 g     F .text	0000003c alt_avalon_i2c_int_clear
08057db8 g     O .bss	00002000 SSSInitialTaskStk
0805f424 g     O .bss	00000014 rcvdq
08037f8c g     F .text	00000080 tcp_notify
08014760 g     F .text	000000b0 fstat
08003620 g     F .text	00000024 fprintf
08034cd8 g     F .text	000000b8 soconnect
08046d74 g     F .text	00000048 ip_raw_maxalloc
0801494c g     F .text	0000012c kill
080133e4 g     F .text	000000f0 .hidden __ledf2
080244b8 g     F .text	00000078 DP83848C_link_status_read
0802d534 g     F .text	00000448 dhc_discover
08056fe0 g     O .rwdata	00000008 alt_avalon_i2c_list
08003328 g     F .text	00000084 SSSCreateOSDataStructs
0804adc4 g     F .text	00000084 in_setpeeraddr
08056f6c g     O .rwdata	00000004 OSEndiannessTest
080302b4 g     F .text	00000038 clock_init
0804b83c g     F .text	000000d0 vfgets
080407c0 g     F .text	00000180 et_send
0800c9ec g     F .text	00000118 __pow5mult
0800f094 g     F .text	00001304 ___vfiprintf_internal_r
08012040 g     F .text	0000005c .hidden __umodsi3
0804a1f8 g     F .text	00000064 inet_addr
08043ee0 g     F .text	00000084 ip_reasm_check_mem_useage
08035b78 g     F .text	000000fc sorflush
0804e5dc g     F .text	0000001c vprintf
0805f9e8 g     O .bss	000000fc global_tcb_ext
08042d70 g     F .text	00000400 ip_fragment_lc
0805f438 g     O .bss	00000300 netstatic
08032fd8 g     F .text	00000160 t_bind
08056f7e g     O .rwdata	00000002 OSFlagGrpSize
0802ff3c g     F .text	000000d8 udp_close
080263c0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
080308b8 g     F .text	000001c0 alt_iniche_init
08060130 g       *ABS*	00000000 end
080304cc g     F .text	00000084 UNLOCK_NET_RESOURCE
08033c7c g     F .text	000000dc t_recv
080273f0 g     F .text	0000022c prep_tse_mac
0804bbbc g     F .text	00000188 vfread
080294a0 g     F .text	000000e4 netclose
08003428 g     F .text	000001d0 SSSSimpleSocketServerTask
0804de98 g     F .text	0000000c _atoi_r
0801fa70 g     F .text	000001b4 alt_tse_phy_add_profile
08057038 g     O .rwdata	00000004 tcp_keepintvl
0801ea10 g     F .text	00000150 altera_avalon_jtag_uart_init
08016bf4 g     F .text	000000d0 OS_TaskStat
0805717c g     O .bss	00000004 dsc_discovers
080002c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0801cfd8 g     F .text	00000040 alt_avalon_i2c_open
08056bb0 g     O .rwdata	00000018 tcp_protosw
0804e828 g       *ABS*	00000000 __CTOR_LIST__
08057294 g     O .bss	00000004 vfopen_error
10000000 g       *ABS*	00000000 __alt_stack_pointer
0801d9b4 g     F .text	000000e8 alt_avalon_i2c_master_tx
08057208 g     O .bss	00000004 tcp_maxidle
080571a8 g     O .bss	00000004 firstudp
0801f688 g     F .text	00000084 alt_avalon_timer_sc_init
08014698 g     F .text	00000054 .hidden __clzsi2
0801f33c g     F .text	000002d0 altera_avalon_jtag_uart_write
0800abec g     F .text	00000004 __sfp_lock_acquire
0800c11c g     F .text	000000d4 memchr
080168d0 g     F .text	00000058 OS_MemClr
08006908 g     F .text	000020dc ___vfprintf_internal_r
0803fc40 g     F .text	0000014c OSTaskStkInit
08003cb8 g     F .text	00000054 _sprintf_r
0800ad40 g     F .text	000002fc _free_r
0804880c g     F .text	00000148 igmpv2_chk4_rtr_alert_opt
0803f27c g     F .text	0000022c alt_printf
0804fcc4 g     O .rodata	00000180 _ctype_b
08010be4 g     F .text	0000000c __locale_mb_cur_max
08034364 g     F .text	000000c0 t_socketclose
08015f60 g     F .text	00000188 OS_EventTaskRdy
0804e704 g     F .text	00000120 __call_exitprocs
0800dac8 g     F .text	00000074 __srget_r
08057104 g     O .bss	00000001 OSCPUUsage
0805f738 g     O .bss	00000010 nets
08030410 g     F .text	000000bc LOCK_NET_RESOURCE
0802e5c8 g     F .text	000000b4 dhc_resetip
0801cd68 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08028588 g     F .text	00000060 tse_msgdmaTx_isr
080289d8 g     F .text	0000014c tse_mac_rcv
08032f58 g     F .text	00000080 t_socket
08056f54 g     O .rwdata	00000004 __malloc_sbrk_base
08000338 g     F .text	00000048 _start
08040778 g     F .text	00000048 etainit
08057218 g     O .bss	00000004 _alt_tick_rate
08040224 g     F .text	00000024 mcastlist
08019774 g     F .text	00000298 OSQPend
0805f8e4 g     O .bss	000000f0 pktlog
08048408 g     F .text	00000114 igmpv2_process_report
08038164 g     F .text	00000074 ifd_isset
08024770 g     F .text	0000008c alt_qspi_controller_get_info
080472b4 g     F .text	00000114 del_route
08006900 g     F .text	00000008 _user_strerror
0801c478 g     F .text	00000108 OSTimeDly
0801e370 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0801e798 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08002f08 g     F .text	00000054 get_mac_addr
08034748 g     F .text	000000d0 solisten
0800cb04 g     F .text	00000188 __lshift
0805721c g     O .bss	00000004 _alt_nticks
08025e60 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
08021684 g     F .text	000000d0 alt_tse_phy_rd_mdio_reg
0801137c g     F .text	00000018 signal
08028dc8 g     F .text	00000070 read
0801c9f4 g     F .text	00000264 alt_sys_init
0803c7a4 g     F .text	0000004c tcp_quench
0800dce4 g     F .text	000001c0 __ssprint_r
0802bfa4 g     F .text	00000170 ns_printf
08041bcc g     F .text	000000d4 isbcast
08030550 g     F .text	00000240 TK_NEWTASK
08000c70 g     F .text	000001c4 ProvChanMessage
0804e674 g     F .text	00000090 __register_exitproc
08057105 g     O .bss	00000001 OSTaskCtr
080576e8 g     O .bss	000005dd buffer
08043e10 g     F .text	000000d0 ip_reasm_determine_type_of_frag
08057134 g     O .bss	00000001 phy_profile_count
0804e200 g     F .text	000000c4 strncmp
08020720 g     F .text	0000006c alt_tse_get_mac_group_index
0801dbd8 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0801c580 g     F .text	00000160 OSTimeDlyHMSM
080469a8 g     F .text	000000bc ip_raw_close
0800c7bc g     F .text	00000230 __multiply
08056e04 g     O .rwdata	000000b0 mdlist
0801ef18 g     F .text	00000068 altera_avalon_jtag_uart_close
08029fe4 g     F .text	000000d0 igmp_input
08042cb4 g     F .text	000000bc ip_raw_write
0804bd44 g     F .text	000003ac vfwrite_locked
0804e2c4 g     F .text	000000b8 strncpy
08057180 g     O .bss	00000004 dsc_offers
0805764c g     O .bss	00000028 __malloc_current_mallinfo
08056f72 g     O .rwdata	00000002 OSEventMax
0804a4e0 g     F .text	0000006c inet_setport
0800d070 g     F .text	00000164 __d2b
0801a9f8 g     F .text	0000011c OSSemPost
0803a840 g     F .text	00000188 tcp_dooptions
080570b0 g     O .bss	00000004 SSSLEDEventFlag
080367a0 g     F .text	00000104 soisconnected
08015ae8 g     F .text	000000e4 OSSchedUnlock
0804687c g     F .text	00000028 netexit
08002fb8 g     F .text	00000194 get_serial_number
08057164 g     O .bss	00000004 nettick_wakes
08021500 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
080571fc g     O .bss	00000001 tcpprintfs
080405a0 g     F .text	00000098 in_timerkill
080482f8 g     F .text	00000110 igmpv2_input
08057190 g     O .bss	00000004 dsc_declines
0801e8ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08004828 g     F .text	00000004 _strtoul_r
0802b9e0 g     F .text	0000002c do_trap
0804cc18 g     F .text	000000d8 alt_get_fd
0802b41c g     F .text	000000f0 bsd_ioctl
08057108 g     O .bss	00000004 OSMemFreeList
08015c34 g     F .text	000000b8 OSStatInit
0803198c g     F .text	000001b4 tcp_rcv
0802bd8c g     F .text	00000048 panic
0805729c g     O .bss	00000004 vfs_open_files
080299b8 g     F .text	0000018c ip2mac
0803e670 g     F .text	00000158 alt_busy_sleep
08018518 g     F .text	000000c8 OSFlagQuery
08037cd4 g     F .text	000001f0 sock_select
0804984c g     F .text	00000218 dhc_setup
0803bfd0 g     F .text	00000048 tcp_init
080571d8 g     O .bss	00000004 cticks
080007a0 g     F .text	00000174 ProcessRxPacket
0805716d g     O .bss	00000001 to_nettick
08056fa8 g     O .rwdata	00000002 OSTaskCreateExtEn
080105d4 g     F .text	00000058 _close_r
08028ea0 g     F .text	000004d0 Netinit
08030ae4 g     F .text	00000038 prep_armintcp
08046540 g     F .text	0000014c in_addmulti
08000ebc g     F .text	00000228 ProvisioningLEDCommand
0803c018 g     F .text	00000108 tcp_template
0802399c g     F .text	0000031c alt_tse_phy_get_common_speed
080317ac g     F .text	00000070 remque
08004520 g     F .text	00000014 strtok
0804e5f8 g     F .text	00000014 _vprintf_r
08038238 g     F .text	000003f0 tcp_reass
0804a680 g     F .text	00000194 tcp_cksum
0803e0a0 g     F .text	00000374 udp4_socksend
08026310 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
0804b5f8 g     F .text	000001b8 vfclose_locked
080380f0 g     F .text	00000074 ifd_set
0801d44c g     F .text	000000ac alt_avalon_i2c_rx_read_available
08003754 g     F .text	00000078 memcmp
08015f40 g     F .text	00000020 OS_Dummy
0801e96c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802f250 g     F .text	00000094 dhc_set_state
08057144 g     O .bss	00000004 NDEBUG
08060130 g       *ABS*	00000000 __alt_stack_base
080570a8 g     O .bss	00000004 last_flash_sector
0801e9bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08037018 g     F .text	00000050 sbreserve
08057135 g     O .bss	00000001 mac_group_count
08046a64 g     F .text	00000214 ip_raw_input
08003644 g     F .text	000000c4 _fwrite_r
08057018 g     O .rwdata	00000004 lilbufsiz
080381d8 g     F .text	00000060 ifd_get
08036f04 g     F .text	0000008c sbwakeup
08026418 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
08002090 g     F .text	00000088 FindItfcIndex
08008b24 g     F .text	0000015c __swsetup_r
080272a8 g     F .text	00000148 altera_eth_tse_init
0805d5d0 g     O .bss	000001e0 OSQTbl
0803aaf4 g     F .text	0000023c tcp_xmit_timer
08012a14 g     F .text	00000860 .hidden __divdf3
0800aacc g     F .text	000000fc __sfp
080031a0 g     F .text	00000130 generate_mac_addr
08041e98 g     F .text	0000018c ip_bldhead
0800d2ec g     F .text	0000006c __copybits
080370b4 g     F .text	000000a0 sbappend
080552ac g     O .rwdata	00000408 __malloc_av_
0800abf8 g     F .text	00000004 __sinit_lock_release
0805710c g     O .bss	00000004 OSTCBHighRdy
080134d4 g     F .text	00000670 .hidden __muldf3
08042940 g     F .text	00000374 ip_write2
0800dba4 g     F .text	00000054 __sread
08057080 g     O .rwdata	00000004 arp_ageout
08057110 g     O .bss	00000004 OSQFreeList
08022294 g     F .text	000003fc alt_tse_mac_get_phy
08041dc0 g     F .text	000000d8 ip_init
0804cb10 g     F .text	00000108 alt_find_file
08046d30 g     F .text	00000044 ip_raw_free
08024660 g     F .text	00000110 alt_qspi_controller_lock
08041000 g     F .text	000000fc make_arp_entry
0803e9b4 g     F .text	000000a8 alt_dev_llist_insert
08014e20 g     F .text	00000128 __malloc_lock
080035f8 g     F .text	00000028 _fprintf_r
08014c48 g     F .text	000000b8 sbrk
0803d99c g     F .text	0000005c udp_lookup
08004864 g     F .text	0000209c ___svfprintf_internal_r
0801d880 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
080015e4 g     F .text	0000045c ATECC608
0801d7e8 g     F .text	0000004c alt_avalon_i2c_check_nack
08015140 g     F .text	00000148 OSEventNameSet
0800a7f4 g     F .text	00000060 _fflush_r
080209b4 g     F .text	0000008c alt_tse_mac_set_duplex
080106a4 g     F .text	000000b4 _calloc_r
08030c28 g     F .text	000000e0 npfree_base
08057114 g     O .bss	00000001 OSRdyGrp
08049ba8 g     F .text	00000028 md_fopen
08056bc8 g     O .rwdata	00000018 udp_protosw
0805705c g     O .rwdata	00000008 alt_flash_dev_list
080280fc g     F .text	00000120 tse_msgdma_write_init
0804ad40 g     F .text	00000084 in_setsockaddr
0805709c g       *ABS*	00000000 __bss_start
08037154 g     F .text	000000d8 sbappendrecord
08060050 g     O .bss	00000050 ip_mib
080038cc g     F .text	000000f0 memset
08026f64 g     F .text	00000058 alt_msgdma_open
08034d90 g     F .text	00000098 sodisconnect
08002d40 g     F .text	00000080 main
0801d7b4 g     F .text	00000034 alt_avalon_i2c_master_target_set
080570d0 g     O .bss	00000004 alt_envp
080570b8 g     O .bss	00000004 __malloc_max_total_mem
080266f8 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
08031500 g     F .text	000001c0 m_adj
0801e90c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080105bc g     F .text	00000018 __swbuf
08049e14 g     F .text	000000c4 md_fgetc
0801e5b4 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08050930 g     O .rodata	00000100 OSUnMapTbl
080437b0 g     F .text	000002a4 ip_dump
0802c92c g     F .text	000001f8 tk_stats
08056ff4 g     O .rwdata	00000008 alt_iniche_dev_list
08059db8 g     O .bss	00000078 SSSLEDCommandQTbl
08056fa2 g     O .rwdata	00000002 OSSemEn
080571c0 g     O .bss	00000004 OS_TPS
080327d0 g     F .text	00000738 rawip_usrreq
0801816c g     F .text	000003ac OSFlagPost
0800dcdc g     F .text	00000008 __sclose
0804a3c0 g     F .text	0000005c print46_addr
10000000 g       *ABS*	00000000 __alt_heap_limit
08010850 g     F .text	00000010 fclose
080160e8 g     F .text	00000108 OS_EventTaskWait
0804e5a0 g     F .text	00000004 _strtol_r
08003744 g     F .text	00000010 getchar
0802bc4c g     F .text	00000140 print_uptime
08016cc4 g     F .text	000000c4 OS_TaskStatStkChk
0801b8b0 g     F .text	00000158 OSTaskDelReq
08008e7c g     F .text	00001750 _dtoa_r
08026aec g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
0800b93c g     F .text	000007e0 _malloc_r
08049ed8 g     F .text	00000024 md_unlink
0801f944 g     F .text	00000088 tse_mac_SwReset
080110c4 g     F .text	00000030 __ascii_wctomb
0804a89c g     F .text	00000058 in_pcbdetach
08057058 g     O .rwdata	00000004 alt_errno
08057090 g     O .rwdata	00000004 mdlist_size
08026550 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
08015bcc g     F .text	00000068 OSStart
08010860 g     F .text	00000020 _fiprintf_r
080491ac g     F .text	00000034 u_mctest_init
08011394 g     F .text	0000001c _init_signal
08014dc0 g     F .text	00000060 __env_unlock
08001c20 g     F .text	00000190 ProvisioningModuleRegisterCommand
0800b4f8 g     F .text	00000098 _fwalk
0801bd60 g     F .text	000001e0 OSTaskResume
08018f7c g     F .text	000000ec OSMemQuery
0804a54c g     F .text	00000134 convert_ip
08040e94 g     F .text	0000016c find_oldest_arp
08056fb4 g     O .rwdata	00000002 OSTaskStatEn
08057240 g     O .bss	00000004 arpReqsIn
0804b220 g     F .text	00000050 vf_free_buffer
08010c6c g     F .text	0000000c _mbtowc_r
0804c9ec g     F .text	00000124 alt_fcntl
08056f8e g     O .rwdata	00000002 OSMemMax
08019cf4 g     F .text	0000017c OSQPostFront
080301a8 g     F .text	00000034 dtrap
08057024 g     O .rwdata	00000004 kb_last
0800d484 g     F .text	000000e0 putc
08011ee8 g     F .text	00000080 .hidden __divsi3
0802066c g     F .text	00000048 alt_tse_mac_set_common_speed
08057115 g     O .bss	00000003 OSRdyTbl
08056f68 g     O .rwdata	00000002 OSDebugEn
08030b1c g     F .text	0000010c npalloc_base
08029e10 g     F .text	000000b4 ip_exit
0800ac24 g     F .text	0000011c _malloc_trim_r
0804e828 g       *ABS*	00000000 __CTOR_END__
08056f80 g     O .rwdata	00000002 OSFlagNodeSize
08057174 g     O .bss	00000004 dhc_conn
0803030c g     F .text	0000005c cticks_hook
08056fc8 g     O .rwdata	00000002 OSTmrCfgMax
0804019c g     F .text	00000038 sysuptime
08010f08 g     F .text	000000b8 strcmp
0800314c g     F .text	00000054 generate_and_store_mac_addr
0804525c g     F .text	000001a8 ip_reasm_delete_ire
08019278 g     F .text	000001b0 OSQCreate
08030368 g     F .text	00000060 irq_Mask
0801ba08 g     F .text	0000019c OSTaskNameGet
08057228 g     O .bss	00000004 nextppp
080571b0 g     O .bss	00000004 irq_level
08029370 g     F .text	00000130 fixup_subnet_mask
08019e70 g     F .text	00000218 OSQPostOpt
08015cec g     F .text	00000234 OSTimeTick
08043c20 g     F .text	0000012c ip_copypkt
0802f170 g     F .text	00000080 dhc_alldone
08056fb0 g     O .rwdata	00000002 OSTaskMax
0804e828 g       *ABS*	00000000 __DTOR_LIST__
0801a344 g     F .text	000000dc OSSemCreate
08057158 g     O .bss	00000004 igmp_all_hosts_group
08056fd4 g     O .rwdata	00000002 OSTmrWheelSize
08036e5c g     F .text	0000003c sbselqueue
08057160 g     O .bss	00000004 netmain_wakes
080413bc g     F .text	00000264 arprcv
0800482c g     F .text	0000001c strtoul_l
0802c5f8 g     F .text	00000074 TK_OSTaskResume
0802aa24 g     F .text	000003b4 igmp_print_stats
08013274 g     F .text	00000080 .hidden __nedf2
08030df0 g     F .text	00000090 pffindtype
08056faa g     O .rwdata	00000002 OSTaskDelEn
0805703c g     O .rwdata	00000004 tcp_sendspace
0804c2b4 g     F .text	0000010c vftell
0805f7ac g     O .bss	00000012 eth_prt_buf
0801ab14 g     F .text	00000114 OSSemQuery
08019428 g     F .text	00000290 OSQDel
08019a0c g     F .text	00000174 OSQPendAbort
0801c9b8 g     F .text	0000003c alt_irq_init
0802062c g     F .text	00000040 alt_tse_mac_get_common_speed
0805fc14 g     O .bss	00000018 app_semaphore
0803f610 g     F .text	00000058 alt_release_fd
08027230 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
08030844 g     F .text	00000074 post_app_sem
08029f44 g     F .text	000000a0 igmp_init
0804ded8 g     F .text	00000018 memalign
08003d0c g     F .text	00000064 sprintf
08050820 g     O .rodata	00000100 .hidden __clz_tab
0800049c g     F .text	000000b0 delChan
08001a40 g     F .text	000001e0 PCF8574
0805719c g     O .bss	00000004 dsc_renew
08000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif_0
08049d4c g     F .text	00000078 md_fwrite
080570c4 g     O .bss	00000004 _PathLocale
080571c4 g     O .bss	00000004 tcp_sleep_count
0803181c g     F .text	0000007c insque
0804de78 g     F .text	00000014 atexit
08057290 g     O .bss	00000004 vfsfiles
08008ac0 g     F .text	00000064 _write_r
0804e60c g     F .text	0000004c _vsprintf_r
08047b34 g     F .text	00000294 udp_send
08015a58 g     F .text	00000090 OSSchedLock
0802a224 g     F .text	00000278 igmp_send
08010bf0 g     F .text	00000018 setlocale
080264b8 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
0801751c g     F .text	00000110 OSFlagCreate
08059e30 g     O .bss	00002000 LEDManagementTaskStk
080303c8 g     F .text	00000048 irq_Unmask
08033138 g     F .text	000000d4 t_listen
0802458c g     F .text	000000a0 PEF7071_link_status_read
08056f50 g     O .rwdata	00000004 _impure_ptr
08054d40 g     O .rwdata	00000018 ssstask
080570c8 g     O .bss	00000004 alt_argc
0803cff8 g     F .text	000006b8 tcp_usrreq
0803db98 g     F .text	00000238 udp_usrreq
08030d7c g     F .text	00000034 ncpalloc
0800a5cc g     F .text	00000228 __sflush_r
0803eac0 g     F .text	00000064 _do_dtors
08056f7a g     O .rwdata	00000002 OSEventMultiEn
08057078 g     O .rwdata	00000004 pingdelay
0801d77c g     F .text	00000038 alt_avalon_i2c_master_target_get
080409c8 g     F .text	00000078 arp_send_pending
0801d68c g     F .text	000000f0 alt_avalon_i2c_send_address
08048090 g     F .text	00000268 igmpv1_input
08010d3c g     F .text	000001cc __srefill_r
08030a78 g     F .text	0000004c pre_task_setup
080571e4 g     O .bss	00000004 rcvdq_sem_ptr
0802b018 g     F .text	00000120 bsd_getsockname
08045404 g     F .text	00000124 ip_reasm_mark_compact_rfq
080032fc g     F .text	0000002c FindLastFlashSectorOffset
0801762c g     F .text	00000258 OSFlagDel
08057118 g     O .bss	00000004 OSEventFreeList
0802cc50 g     F .text	00000040 dhc_set_callback
08000120 g       .exceptions	00000000 alt_irq_entry
08057238 g     O .bss	00000004 arpcache
0804d864 g     F .text	000002d4 icmp_destun
08010c78 g     F .text	00000044 __ascii_mbtowc
08046798 g     F .text	00000064 lookup_mcast
0804c624 g     F .text	00000048 vfslookup
08046194 g     F .text	000003ac ip_demux
0800cf10 g     F .text	0000005c __ulp
080571c8 g     O .bss	00000004 tcp_wakeup_count
08017b08 g     F .text	00000600 OSFlagPend
08056fc6 g     O .rwdata	00000002 OSTmrEn
0800ac10 g     F .text	00000014 __fp_unlock_all
08030790 g     F .text	000000b4 wait_app_sem
0800054c g     F .text	00000078 findfdChan
08056ffc g     O .rwdata	00000004 ipmcfail_str
080571dc g     O .bss	00000004 memtrapsize
08031228 g     F .text	000002d8 m_copy
08057044 g     O .rwdata	00000008 alt_fs_list
0805fc90 g     O .bss	00000014 mfreeq
080247fc g     F .text	00000124 alt_qspi_controller_erase_block
08016acc g     F .text	00000074 OS_StrCopy
080346ec g     F .text	0000005c sobind
08056fdc g     O .rwdata	00000004 eth_tse_name
08049b58 g     F .text	00000050 init_memdev
080570a0 g     O .bss	00000001 to_ssstask
08031898 g     F .text	000000f4 nptcp_init
08056f90 g     O .rwdata	00000002 OSMemNameSize
0805fae4 g     O .bss	000000f0 global_TCPwakeup_set
0803fe60 g     F .text	00000020 OSInitHookEnd
0803693c g     F .text	000000c4 soisdisconnected
08040940 g     F .text	00000088 arp_free_pending
08056fbc g     O .rwdata	00000002 OSTCBPrioTblMax
0800b758 g     F .text	0000000c localeconv
08034928 g     F .text	000002c8 soclose
08000380 g     F .text	00000074 initChan
0805f9d4 g     O .bss	00000014 bigfreeq
0800b764 g     F .text	00000098 __swhatbuf_r
08056fb8 g     O .rwdata	00000002 OSTaskStatStkChkEn
08057074 g     O .rwdata	00000004 prompt
0801e848 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08057034 g     O .rwdata	00000004 tcp_keepidle
080237f4 g     F .text	000001a8 alt_tse_phy_set_adv_10
0803260c g     F .text	000001c4 rawip_soinput
0803ec70 g     F .text	00000050 alt_ic_isr_register
0801d0b0 g     F .text	0000004c alt_avalon_i2c_disable
0804c0f0 g     F .text	00000060 vfwrite
08056f8c g     O .rwdata	00000002 OSMemEn
08036bf8 g     F .text	000000ac soqinsque
0805726c g     O .bss	00000004 so_evtmap_delete
08003708 g     F .text	00000034 fwrite
08056f96 g     O .rwdata	00000002 OSMutexEn
08057258 g     O .bss	00000004 h_ireq
0805709c g       *ABS*	00000000 _edata
08043170 g     F .text	0000059c ip_fragment
08028c88 g     F .text	00000140 iniche_devices_init
0805fca4 g     O .bss	00000028 tcp_saveti
0802c158 g     F .text	000000d8 con_page
08060130 g       *ABS*	00000000 _end
0803619c g     F .text	00000548 sogetopt
080015b8 g     F .text	0000002c AD9648
0803ebb4 g     F .text	00000068 alt_flash_open_dev
0805711c g     O .bss	00000001 OSIntNesting
0800373c g     F .text	00000008 _getchar_r
08022690 g     F .text	00000240 alt_tse_mac_associate_phy
08056b80 g     O .rwdata	00000030 nettasks
0802f9f0 g     F .text	00000020 pk_get_max_intrsafe_buf_len
080108b8 g     F .text	00000164 __fputwc
08043a54 g     F .text	000001cc iproute
08032100 g     F .text	000000f0 np_stripoptions
08057270 g     O .bss	00000001 so_evtmap
0801ef80 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0801c6e0 g     F .text	000001e0 OSTimeDlyResume
080033ac g     F .text	0000007c SSSCreateTasks
08046f10 g     F .text	000003a4 add_route
080179b4 g     F .text	00000154 OSFlagNameSet
08029928 g     F .text	00000090 c_older
080375e8 g     F .text	00000084 sbflush
08049bd0 g     F .text	00000024 md_fclose
0802c8fc g     F .text	00000030 tk_yield
0801d0fc g     F .text	000000b0 alt_avalon_i2c_master_config_get
0801bf40 g     F .text	000001b8 OSTaskStkChk
0803ed48 g     F .text	0000008c alt_ic_irq_disable
08034e28 g     F .text	00000560 sosend
08056f92 g     O .rwdata	00000002 OSMemSize
0804370c g     F .text	000000a4 ip_mymach
0800dc00 g     F .text	00000080 __swrite
080571ac g     O .bss	00000004 cticks_initialized
0805707c g     O .rwdata	00000004 deflength
08056f58 g     O .rwdata	00000004 __malloc_trim_threshold
08033e94 g     F .text	000001fc t_sendto
080039bc g     F .text	00000188 _perror_r
08057120 g     O .bss	00000004 OSTCBCur
08034544 g     F .text	000001a8 socreate
0804dea4 g     F .text	00000034 exit
0805ff3c g     O .bss	00000100 arp_table
08010880 g     F .text	00000038 fiprintf
08010fc0 g     F .text	00000004 _vfiprintf_r
080572ac g     O .bss	00000004 icmpdu_hook
08056f94 g     O .rwdata	00000002 OSMemTblSize
0800b590 g     F .text	000000a8 _fwalk_reent
08026890 g     F .text	00000110 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
08040638 g     F .text	00000024 create_apptasks
08057030 g     O .rwdata	00000004 tcp_ttl
0800cce4 g     F .text	0000022c __mdiff
0803ec1c g     F .text	00000054 alt_flash_close_dev
08030db0 g     F .text	00000040 ncpfree
08011f68 g     F .text	00000074 .hidden __modsi3
0804def0 g     F .text	00000194 _memalign_r
0805713c g     O .bss	00000004 MaxLnh
0801fa20 g     F .text	00000050 tse_mac_setGMIImode
0804a33c g     F .text	00000084 inet_ntop
08048028 g     F .text	00000024 udp_maxalloc
08024200 g     F .text	000000e4 marvell_cfg_gmii
10000000 g       *ABS*	00000000 __alt_data_end
08000120 g     F .exceptions	00000000 alt_exception
0800abf0 g     F .text	00000004 __sfp_lock_release
080158c0 g     F .text	00000058 OSInit
08026030 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
080228d0 g     F .text	00000128 alt_tse_phy_cfg_pcs
0801c2e0 g     F .text	00000128 OSTaskQuery
0803ffb0 g     F .text	0000008c icmp_port_du
0805720c g     O .bss	00000004 tcp_iss
0801a1e8 g     F .text	000000a8 OS_QInit
0804de8c g     F .text	0000000c atoi
08057020 g     O .rwdata	00000004 bigbufsiz
08016b40 g     F .text	00000054 OS_StrLen
0801d30c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0803c7f0 g     F .text	00000078 tcp_putseq
08018d80 g     F .text	0000011c OSMemNameSet
0804fbc0 g     O .rodata	00000101 _ctype_
18002800 g       *ABS*	00000000 __alt_mem_onchip_ram
0803722c g     F .text	000001dc sbappendaddr
080572a0 g     O .bss	00000004 vfs_total_rw_space
0801d5a0 g     F .text	000000ec alt_avalon_i2c_cmd_write
08057cc8 g     O .bss	000000f0 ItfcTable
08014478 g     F .text	00000054 .hidden __unorddf2
08049008 g     F .text	00000120 ip_getmoptions
0800a87c g     F .text	00000064 fileno
08056fae g     O .rwdata	00000002 OSTaskProfileEn
08025f10 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
08047dc8 g     F .text	000000f4 udpswap
08057124 g     O .bss	00000004 OSTime
080571e8 g     O .bss	00000004 nextslow
0803c8dc g     F .text	0000025c tcp_slowtimo
0803c514 g     F .text	0000010c tcp_newtcpcb
08041620 g     F .text	0000017c send_via_arp
0802cbac g     F .text	000000a4 dhc_init
08044e00 g     F .text	00000058 ip_reasm_find_ire
0805d7b0 g     O .bss	00000800 OSTaskIdleStk
0804c838 g     F .text	00000058 isvfile_locked
080146ec g     F .text	00000038 _exit
0802b684 g     F .text	00000188 bsd_select
0803e53c g     F .text	00000134 alt_alarm_start
08017884 g     F .text	00000130 OSFlagNameGet
0804804c g     F .text	00000044 udp_free
0802fad4 g     F .text	000000b8 getq
0804c98c g     F .text	00000024 prep_vfs
0801c8c0 g     F .text	00000060 OSTimeGet
08057070 g     O .rwdata	00000004 name
08037824 g     F .text	00000100 sbdropend
0800b7fc g     F .text	00000140 __smakebuf_r
0804179c g     F .text	0000010c cb_arpent_tmo
08056fec g     O .rwdata	00000008 alt_msgdma_list
08004488 g     F .text	00000098 strlen
08048954 g     F .text	00000114 IPADDR_TO_NETP
0802b50c g     F .text	00000034 bsd_inet_ntoa
08011158 g     F .text	00000014 _init_signal_r
0803fdd4 g     F .text	00000020 OSTaskSwHook
0803f128 g     F .text	00000154 open
0802fd3c g     F .text	00000200 udp_open
0805dfb0 g     O .bss	00000b40 OSEventTbl
08036dac g     F .text	00000058 socantsendmore
080572a4 g     O .bss	00000004 vfs_total_dyna_files
080132f4 g     F .text	000000f0 .hidden __gedf2
0803f848 g     F .text	00000044 alt_uncached_free
0803f4a8 g     F .text	00000030 alt_putchar
0805eaf0 g     O .bss	00000510 OSTCBTbl
08057244 g     O .bss	00000004 arpReqsOut
0801ac28 g     F .text	00000100 OSSemSet
08057098 g     O .rwdata	00000004 http_root_path
0802e828 g     F .text	00000254 dhc_extract_opts
080443ac g     F .text	00000554 ip_reasm_compute_overlap
08010690 g     F .text	00000014 __assert
08024b30 g     F .text	000001e8 alt_qspi_controller_write
0800f07c g     F .text	00000018 __sprint_r
0801f864 g     F .text	00000070 tse_mac_aRxRead
0804e0a4 g     F .text	0000015c strchr
0805f7be g     O .bss	00000012 ipreturn
08057260 g     O .bss	00000004 port_prep
08056c04 g     O .rwdata	0000000d tcp_backoff
08036730 g     F .text	00000070 soisconnecting
08002cd0 g     F .text	00000070 SSSInitialTask
080288a0 g     F .text	00000138 allocate_rx_descriptor_chain
08057064 g     O .rwdata	00000004 alt_priority_mask
0804851c g     F .text	000001c0 igmpv2_process_query
080379b4 g     F .text	000001d0 t_select
0801a420 g     F .text	00000250 OSSemDel
0803e414 g     F .text	00000128 udp4_sockaddr
08057128 g     O .bss	00000004 OSFlagFreeList
0804ab04 g     F .text	000001e0 in_pcbconnect
08057200 g     O .bss	00000004 dropline
0805725c g     O .bss	00000004 ire_cticks
0803ecc0 g     F .text	00000088 alt_ic_irq_enable
08056f74 g     O .rwdata	00000002 OSEventNameSize
080089e4 g     F .text	0000001c __vfprintf_internal
0802c508 g     F .text	00000078 tk_netmain
0804ace4 g     F .text	0000005c in_pcbdisconnect
0805712c g     O .bss	00000001 OSStatRdy
0805f000 g     O .bss	00000054 OSTCBPrioTbl
080110b8 g     F .text	0000000c _wctomb_r
08014d00 g     F .text	000000c0 __env_lock
08056fba g     O .rwdata	00000002 OSTaskSwHookEn
08056de0 g     O .rwdata	00000024 mdio
080208d4 g     F .text	000000e0 alt_tse_mac_set_speed
0802add8 g     F .text	00000120 bsd_accept
08000914 g     F .text	0000035c DiscChanMessage
08057040 g     O .rwdata	00000004 tcp_recvspace
08013b44 g     F .text	00000934 .hidden __subdf3
0804e824 g     F .text	00000004 _vfprintf_r
0803d95c g     F .text	00000040 tcpinit
0805715c g     O .bss	00000004 igmp_all_rtrs_group
080325b0 g     F .text	0000005c rawip_lookup
080406d8 g     F .text	000000a0 fcntl
0800c6b8 g     F .text	000000b0 __lo0bits
08037408 g     F .text	000001e0 sbcompress
08057068 g     O .rwdata	00000008 alt_alarm_list
0803c620 g     F .text	0000009c tcp_drop
08056f82 g     O .rwdata	00000002 OSFlagWidth
0803ea5c g     F .text	00000064 _do_ctors
080113b0 g     F .text	00000010 __sigtramp
080235a0 g     F .text	00000254 alt_tse_phy_set_adv_100
0803cb98 g     F .text	00000460 tcp_timers
08029ec4 g     F .text	00000080 if_netnumber
08049128 g     F .text	00000084 ip_freemoptions
080366e4 g     F .text	0000004c sohasoutofband
08011030 g     F .text	00000088 wcrtomb
08038628 g     F .text	00002218 tcp_input
0802aef8 g     F .text	00000120 bsd_getpeername
0802b540 g     F .text	00000144 bsd_recvfrom
08028c40 g     F .text	00000048 close
0805718c g     O .bss	00000004 dsc_bpreplys
080570d8 g     O .bss	00000004 alt_envsem
08057130 g     O .bss	00000004 OSIdleCtrRun
080556b4 g     O .rwdata	0000016c __global_locale
0801e7fc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08015f20 g     F .text	00000020 OSVersion
08056fcc g     O .rwdata	00000002 OSTmrCfgWheelSize
0801c408 g     F .text	00000070 OS_TaskStkClr
0804b09c g     F .text	0000002c set_vfopen_error
0801da9c g     F .text	0000013c alt_avalon_i2c_master_rx
08056fa6 g     O .rwdata	00000002 OSTaskCreateEn
080285e8 g     F .text	000002b8 tse_msgdma_read_init
080206b4 g     F .text	0000006c alt_tse_get_system_index
08056be0 g     O .rwdata	00000018 rawip_protosw
08036e98 g     F .text	0000006c sbwait
080164e4 g     F .text	0000006c OS_EventWaitListInit
0802ea7c g     F .text	000004c0 dhc_second
0805722c g     O .bss	00000004 port_1s_callout
08010a40 g     F .text	00000078 fputwc
0801136c g     F .text	00000010 raise
0803fe80 g     F .text	00000020 OSTaskIdleHook
0804e094 g     F .text	00000010 free
0800abf4 g     F .text	00000004 __sinit_lock_acquire
08057138 g     O .bss	00000001 number_of_tse_mac
0800c3e4 g     F .text	00000138 __multadd
0801c0f8 g     F .text	000001e8 OSTaskSuspend
0800c3c0 g     F .text	00000024 _Bfree
0801f70c g     F .text	00000030 no_printf
08036a00 g     F .text	000001f8 sonewconn
0804cd88 g     F .text	00000adc icmprcv
08030e80 g     F .text	000000d4 pffindproto
08016b94 g     F .text	00000060 OS_TaskIdle
08056fd2 g     O .rwdata	00000002 OSTmrTblSize
0801a088 g     F .text	00000160 OSQQuery



Disassembly of section .exceptions:

08000120 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000120:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000124:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000128:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800012c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000130:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000134:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000138:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800013c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000140:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000144:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000148:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800014c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000150:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000154:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000158:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800015c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000160:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000164:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000168:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800016c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000170:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000174:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000178:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800017c:	10000326 	beq	r2,zero,800018c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000180:	20000226 	beq	r4,zero,800018c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000184:	80001fc0 	call	80001fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000188:	00000706 	br	80001a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800018c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000190:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000194:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000198:	80002c40 	call	80002c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800019c:	1000021e 	bne	r2,zero,80001a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80001a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80001a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80001a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80001ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80001b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80001b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80001b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80001bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80001c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80001c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80001c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80001cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80001d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80001d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80001d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80001dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80001e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80001e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80001e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80001ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80001f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80001f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80001f8:	ef80083a 	eret

080001fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80001fc:	defff904 	addi	sp,sp,-28
 8000200:	dfc00615 	stw	ra,24(sp)
 8000204:	df000515 	stw	fp,20(sp)
 8000208:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800020c:	80159180 	call	8015918 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000210:	0005313a 	rdctl	r2,ipending
 8000214:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000218:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800021c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000220:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000224:	00800044 	movi	r2,1
 8000228:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800022c:	e0ffff17 	ldw	r3,-4(fp)
 8000230:	e0bffe17 	ldw	r2,-8(fp)
 8000234:	1884703a 	and	r2,r3,r2
 8000238:	10001126 	beq	r2,zero,8000280 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800023c:	e0bffd17 	ldw	r2,-12(fp)
 8000240:	100690fa 	slli	r3,r2,3
 8000244:	008201b4 	movhi	r2,2054
 8000248:	1885883a 	add	r2,r3,r2
 800024c:	10ff7617 	ldw	r3,-552(r2)
 8000250:	e0bffd17 	ldw	r2,-12(fp)
 8000254:	100890fa 	slli	r4,r2,3
 8000258:	008201b4 	movhi	r2,2054
 800025c:	2085883a 	add	r2,r4,r2
 8000260:	10bf7717 	ldw	r2,-548(r2)
 8000264:	1009883a 	mov	r4,r2
 8000268:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800026c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000270:	0005313a 	rdctl	r2,ipending
 8000274:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000278:	e0bffb17 	ldw	r2,-20(fp)
 800027c:	00000706 	br	800029c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000280:	e0bffe17 	ldw	r2,-8(fp)
 8000284:	1085883a 	add	r2,r2,r2
 8000288:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800028c:	e0bffd17 	ldw	r2,-12(fp)
 8000290:	10800044 	addi	r2,r2,1
 8000294:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000298:	003fe406 	br	800022c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800029c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80002a0:	e0bfff17 	ldw	r2,-4(fp)
 80002a4:	103fde1e 	bne	r2,zero,8000220 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80002a8:	80159640 	call	8015964 <OSIntExit>
}
 80002ac:	0001883a 	nop
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	dfc00117 	ldw	ra,4(sp)
 80002b8:	df000017 	ldw	fp,0(sp)
 80002bc:	dec00204 	addi	sp,sp,8
 80002c0:	f800283a 	ret

080002c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80002c4:	defffb04 	addi	sp,sp,-20
 80002c8:	dfc00415 	stw	ra,16(sp)
 80002cc:	df000315 	stw	fp,12(sp)
 80002d0:	df000304 	addi	fp,sp,12
 80002d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80002d8:	000531fa 	rdctl	r2,exception
 80002dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80002e0:	e0bfff17 	ldw	r2,-4(fp)
 80002e4:	1004d0ba 	srli	r2,r2,2
 80002e8:	108007cc 	andi	r2,r2,31
 80002ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80002f0:	0005333a 	rdctl	r2,badaddr
 80002f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80002f8:	d0a0d717 	ldw	r2,-31908(gp)
 80002fc:	10000726 	beq	r2,zero,800031c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8000300:	d0a0d717 	ldw	r2,-31908(gp)
 8000304:	e0ffff17 	ldw	r3,-4(fp)
 8000308:	e1bffe17 	ldw	r6,-8(fp)
 800030c:	e17ffd17 	ldw	r5,-12(fp)
 8000310:	1809883a 	mov	r4,r3
 8000314:	103ee83a 	callr	r2
 8000318:	00000206 	br	8000324 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 800031c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000320:	0005883a 	mov	r2,zero
}
 8000324:	e037883a 	mov	sp,fp
 8000328:	dfc00117 	ldw	ra,4(sp)
 800032c:	df000017 	ldw	fp,0(sp)
 8000330:	dec00204 	addi	sp,sp,8
 8000334:	f800283a 	ret

Disassembly of section .text:

08000338 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000338:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
 800033c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000340:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000344:	00bffd16 	blt	zero,r2,800033c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000348:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 800034c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000350:	06820174 	movhi	gp,2053
    ori gp, gp, %lo(_gp)
 8000354:	d6bbd314 	ori	gp,gp,61260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000358:	00820174 	movhi	r2,2053
    ori r2, r2, %lo(__bss_start)
 800035c:	109c2714 	ori	r2,r2,28828

    movhi r3, %hi(__bss_end)
 8000360:	00c201b4 	movhi	r3,2054
    ori r3, r3, %lo(__bss_end)
 8000364:	18c04c14 	ori	r3,r3,304

    beq r2, r3, 1f
 8000368:	10c00326 	beq	r2,r3,8000378 <_start+0x40>

0:
    stw zero, (r2)
 800036c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000370:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000374:	10fffd36 	bltu	r2,r3,800036c <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000378:	8014b880 	call	8014b88 <alt_main>

0800037c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800037c:	003fff06 	br	800037c <alt_after_alt_main>

08000380 <initChan>:
 *
 * NOTE: fd = 0 could be stdin or stdout ?
 */

void initChan()
{
 8000380:	defffe04 	addi	sp,sp,-8
 8000384:	df000115 	stw	fp,4(sp)
 8000388:	df000104 	addi	fp,sp,4
	for (int i=0; i < MAXUDPCHAN; i++)
 800038c:	e03fff15 	stw	zero,-4(fp)
 8000390:	00000f06 	br	80003d0 <initChan+0x50>
	{
		Connections[i].fd = -1;
 8000394:	e0bfff17 	ldw	r2,-4(fp)
 8000398:	11000b24 	muli	r4,r2,44
 800039c:	00ffffc4 	movi	r3,-1
 80003a0:	00820174 	movhi	r2,2053
 80003a4:	2085883a 	add	r2,r4,r2
 80003a8:	10dcac15 	stw	r3,29360(r2)
		Connections[i].chantype = 'I';	// Inactive
 80003ac:	e0bfff17 	ldw	r2,-4(fp)
 80003b0:	11000b24 	muli	r4,r2,44
 80003b4:	00c01244 	movi	r3,73
 80003b8:	00820174 	movhi	r2,2053
 80003bc:	2085883a 	add	r2,r4,r2
 80003c0:	10dcad05 	stb	r3,29364(r2)
	for (int i=0; i < MAXUDPCHAN; i++)
 80003c4:	e0bfff17 	ldw	r2,-4(fp)
 80003c8:	10800044 	addi	r2,r2,1
 80003cc:	e0bfff15 	stw	r2,-4(fp)
 80003d0:	e0bfff17 	ldw	r2,-4(fp)
 80003d4:	10800550 	cmplti	r2,r2,21
 80003d8:	103fee1e 	bne	r2,zero,8000394 <initChan+0x14>
	}
};
 80003dc:	0001883a 	nop
 80003e0:	0001883a 	nop
 80003e4:	e037883a 	mov	sp,fp
 80003e8:	df000017 	ldw	fp,0(sp)
 80003ec:	dec00104 	addi	sp,sp,4
 80003f0:	f800283a 	ret

080003f4 <addChan>:

int addChan(struct UDPCHAN * Conn)
{
 80003f4:	defffc04 	addi	sp,sp,-16
 80003f8:	dfc00315 	stw	ra,12(sp)
 80003fc:	df000215 	stw	fp,8(sp)
 8000400:	df000204 	addi	fp,sp,8
 8000404:	e13ffe15 	stw	r4,-8(fp)
	if (Conn->fd < 0)
 8000408:	e0bffe17 	ldw	r2,-8(fp)
 800040c:	10800017 	ldw	r2,0(r2)
 8000410:	1000020e 	bge	r2,zero,800041c <addChan+0x28>
		return(-2);	// bad fd value to add.
 8000414:	00bfff84 	movi	r2,-2
 8000418:	00001b06 	br	8000488 <addChan+0x94>

	for (int i=0; i < MAXUDPCHAN; i++)
 800041c:	e03fff15 	stw	zero,-4(fp)
 8000420:	00001506 	br	8000478 <addChan+0x84>
	{
		if (Connections[i].fd == -1)
 8000424:	e0bfff17 	ldw	r2,-4(fp)
 8000428:	10c00b24 	muli	r3,r2,44
 800042c:	00820174 	movhi	r2,2053
 8000430:	1885883a 	add	r2,r3,r2
 8000434:	109cac17 	ldw	r2,29360(r2)
 8000438:	10bfffd8 	cmpnei	r2,r2,-1
 800043c:	10000b1e 	bne	r2,zero,800046c <addChan+0x78>
		{
			memcpy(&Connections[i], Conn, sizeof(struct UDPCHAN));
 8000440:	e0bfff17 	ldw	r2,-4(fp)
 8000444:	10c00b24 	muli	r3,r2,44
 8000448:	00820174 	movhi	r2,2053
 800044c:	109cac04 	addi	r2,r2,29360
 8000450:	1885883a 	add	r2,r3,r2
 8000454:	01800b04 	movi	r6,44
 8000458:	e17ffe17 	ldw	r5,-8(fp)
 800045c:	1009883a 	mov	r4,r2
 8000460:	80037cc0 	call	80037cc <memcpy>
			return(i);
 8000464:	e0bfff17 	ldw	r2,-4(fp)
 8000468:	00000706 	br	8000488 <addChan+0x94>
	for (int i=0; i < MAXUDPCHAN; i++)
 800046c:	e0bfff17 	ldw	r2,-4(fp)
 8000470:	10800044 	addi	r2,r2,1
 8000474:	e0bfff15 	stw	r2,-4(fp)
 8000478:	e0bfff17 	ldw	r2,-4(fp)
 800047c:	10800550 	cmplti	r2,r2,21
 8000480:	103fe81e 	bne	r2,zero,8000424 <addChan+0x30>
		}
	}

	return(-1);  // out of space in the table
 8000484:	00bfffc4 	movi	r2,-1
};
 8000488:	e037883a 	mov	sp,fp
 800048c:	dfc00117 	ldw	ra,4(sp)
 8000490:	df000017 	ldw	fp,0(sp)
 8000494:	dec00204 	addi	sp,sp,8
 8000498:	f800283a 	ret

0800049c <delChan>:

int delChan(struct UDPCHAN * Conn)
{
 800049c:	defffd04 	addi	sp,sp,-12
 80004a0:	df000215 	stw	fp,8(sp)
 80004a4:	df000204 	addi	fp,sp,8
 80004a8:	e13ffe15 	stw	r4,-8(fp)
	if (Conn->fd < 0)
 80004ac:	e0bffe17 	ldw	r2,-8(fp)
 80004b0:	10800017 	ldw	r2,0(r2)
 80004b4:	1000020e 	bge	r2,zero,80004c0 <delChan+0x24>
		return(-2);	// bad fd value to delete.
 80004b8:	00bfff84 	movi	r2,-2
 80004bc:	00001f06 	br	800053c <delChan+0xa0>

	for (int i=0; i < MAXUDPCHAN; i++)
 80004c0:	e03fff15 	stw	zero,-4(fp)
 80004c4:	00001906 	br	800052c <delChan+0x90>
	{
		if (Connections[i].fd == Conn->fd)
 80004c8:	e0bfff17 	ldw	r2,-4(fp)
 80004cc:	10c00b24 	muli	r3,r2,44
 80004d0:	00820174 	movhi	r2,2053
 80004d4:	1885883a 	add	r2,r3,r2
 80004d8:	10dcac17 	ldw	r3,29360(r2)
 80004dc:	e0bffe17 	ldw	r2,-8(fp)
 80004e0:	10800017 	ldw	r2,0(r2)
 80004e4:	18800e1e 	bne	r3,r2,8000520 <delChan+0x84>
		{
			Connections[i].fd = -1;
 80004e8:	e0bfff17 	ldw	r2,-4(fp)
 80004ec:	11000b24 	muli	r4,r2,44
 80004f0:	00ffffc4 	movi	r3,-1
 80004f4:	00820174 	movhi	r2,2053
 80004f8:	2085883a 	add	r2,r4,r2
 80004fc:	10dcac15 	stw	r3,29360(r2)
			Connections[i].chantype = 'I';
 8000500:	e0bfff17 	ldw	r2,-4(fp)
 8000504:	11000b24 	muli	r4,r2,44
 8000508:	00c01244 	movi	r3,73
 800050c:	00820174 	movhi	r2,2053
 8000510:	2085883a 	add	r2,r4,r2
 8000514:	10dcad05 	stb	r3,29364(r2)
			return(i);
 8000518:	e0bfff17 	ldw	r2,-4(fp)
 800051c:	00000706 	br	800053c <delChan+0xa0>
	for (int i=0; i < MAXUDPCHAN; i++)
 8000520:	e0bfff17 	ldw	r2,-4(fp)
 8000524:	10800044 	addi	r2,r2,1
 8000528:	e0bfff15 	stw	r2,-4(fp)
 800052c:	e0bfff17 	ldw	r2,-4(fp)
 8000530:	10800550 	cmplti	r2,r2,21
 8000534:	103fe41e 	bne	r2,zero,80004c8 <delChan+0x2c>
		}
	}

	return(-1);  // didn't find in the table
 8000538:	00bfffc4 	movi	r2,-1
};
 800053c:	e037883a 	mov	sp,fp
 8000540:	df000017 	ldw	fp,0(sp)
 8000544:	dec00104 	addi	sp,sp,4
 8000548:	f800283a 	ret

0800054c <findfdChan>:

int findfdChan(int fd)
{
 800054c:	defffd04 	addi	sp,sp,-12
 8000550:	df000215 	stw	fp,8(sp)
 8000554:	df000204 	addi	fp,sp,8
 8000558:	e13ffe15 	stw	r4,-8(fp)
	if (fd < 0)
 800055c:	e0bffe17 	ldw	r2,-8(fp)
 8000560:	1000020e 	bge	r2,zero,800056c <findfdChan+0x20>
		return(-2);	// bad fd value to search for.
 8000564:	00bfff84 	movi	r2,-2
 8000568:	00001206 	br	80005b4 <findfdChan+0x68>

	for (int i=0; i < MAXUDPCHAN; i++)
 800056c:	e03fff15 	stw	zero,-4(fp)
 8000570:	00000c06 	br	80005a4 <findfdChan+0x58>
	{

		if (Connections[i].fd == fd)
 8000574:	e0bfff17 	ldw	r2,-4(fp)
 8000578:	10c00b24 	muli	r3,r2,44
 800057c:	00820174 	movhi	r2,2053
 8000580:	1885883a 	add	r2,r3,r2
 8000584:	109cac17 	ldw	r2,29360(r2)
 8000588:	e0fffe17 	ldw	r3,-8(fp)
 800058c:	1880021e 	bne	r3,r2,8000598 <findfdChan+0x4c>
			return(i);  // index of the matching connection
 8000590:	e0bfff17 	ldw	r2,-4(fp)
 8000594:	00000706 	br	80005b4 <findfdChan+0x68>
	for (int i=0; i < MAXUDPCHAN; i++)
 8000598:	e0bfff17 	ldw	r2,-4(fp)
 800059c:	10800044 	addi	r2,r2,1
 80005a0:	e0bfff15 	stw	r2,-4(fp)
 80005a4:	e0bfff17 	ldw	r2,-4(fp)
 80005a8:	10800550 	cmplti	r2,r2,21
 80005ac:	103ff11e 	bne	r2,zero,8000574 <findfdChan+0x28>
	}

	return(-1);  // didn't find in the table
 80005b0:	00bfffc4 	movi	r2,-1
};
 80005b4:	e037883a 	mov	sp,fp
 80005b8:	df000017 	ldw	fp,0(sp)
 80005bc:	dec00104 	addi	sp,sp,4
 80005c0:	f800283a 	ret

080005c4 <findExistingChan>:

int findExistingChan(char chantype, struct sockaddr_in * client)
{
 80005c4:	defffb04 	addi	sp,sp,-20
 80005c8:	dfc00415 	stw	ra,16(sp)
 80005cc:	df000315 	stw	fp,12(sp)
 80005d0:	df000304 	addi	fp,sp,12
 80005d4:	2005883a 	mov	r2,r4
 80005d8:	e17ffd15 	stw	r5,-12(fp)
 80005dc:	e0bffe05 	stb	r2,-8(fp)
	// See if we already have a channel to the client IP

	for (int i=0; i < MAXUDPCHAN; i++)
 80005e0:	e03fff15 	stw	zero,-4(fp)
 80005e4:	00001c06 	br	8000658 <findExistingChan+0x94>
	{
		if ((Connections[i].chantype == chantype)      &&
 80005e8:	e0bfff17 	ldw	r2,-4(fp)
 80005ec:	10c00b24 	muli	r3,r2,44
 80005f0:	00820174 	movhi	r2,2053
 80005f4:	1885883a 	add	r2,r3,r2
 80005f8:	109cad03 	ldbu	r2,29364(r2)
 80005fc:	e0fffe07 	ldb	r3,-8(fp)
 8000600:	10803fcc 	andi	r2,r2,255
 8000604:	1080201c 	xori	r2,r2,128
 8000608:	10bfe004 	addi	r2,r2,-128
 800060c:	18800f1e 	bne	r3,r2,800064c <findExistingChan+0x88>
		   (memcmp(&(Connections[i].client_ip.sin_addr), &(client->sin_addr), sizeof(struct in_addr) ) == 0))
 8000610:	e0bfff17 	ldw	r2,-4(fp)
 8000614:	10800b24 	muli	r2,r2,44
 8000618:	10c00704 	addi	r3,r2,28
 800061c:	00820174 	movhi	r2,2053
 8000620:	109cac04 	addi	r2,r2,29360
 8000624:	1887883a 	add	r3,r3,r2
 8000628:	e0bffd17 	ldw	r2,-12(fp)
 800062c:	10800104 	addi	r2,r2,4
 8000630:	01800104 	movi	r6,4
 8000634:	100b883a 	mov	r5,r2
 8000638:	1809883a 	mov	r4,r3
 800063c:	80037540 	call	8003754 <memcmp>
		if ((Connections[i].chantype == chantype)      &&
 8000640:	1000021e 	bne	r2,zero,800064c <findExistingChan+0x88>
		{
			return(i);	// have existing channel
 8000644:	e0bfff17 	ldw	r2,-4(fp)
 8000648:	00000706 	br	8000668 <findExistingChan+0xa4>
	for (int i=0; i < MAXUDPCHAN; i++)
 800064c:	e0bfff17 	ldw	r2,-4(fp)
 8000650:	10800044 	addi	r2,r2,1
 8000654:	e0bfff15 	stw	r2,-4(fp)
 8000658:	e0bfff17 	ldw	r2,-4(fp)
 800065c:	10800550 	cmplti	r2,r2,21
 8000660:	103fe11e 	bne	r2,zero,80005e8 <findExistingChan+0x24>
		}
	}

	return(-1);		// didn't find in the table
 8000664:	00bfffc4 	movi	r2,-1

}
 8000668:	e037883a 	mov	sp,fp
 800066c:	dfc00117 	ldw	ra,4(sp)
 8000670:	df000017 	ldw	fp,0(sp)
 8000674:	dec00204 	addi	sp,sp,8
 8000678:	f800283a 	ret

0800067c <buildaddChan>:

int buildaddChan(int fd, char type, struct sockaddr_in * host, struct sockaddr_in * client)
{
 800067c:	deffef04 	addi	sp,sp,-68
 8000680:	dfc01015 	stw	ra,64(sp)
 8000684:	df000f15 	stw	fp,60(sp)
 8000688:	df000f04 	addi	fp,sp,60
 800068c:	e13ff415 	stw	r4,-48(fp)
 8000690:	2805883a 	mov	r2,r5
 8000694:	e1bff215 	stw	r6,-56(fp)
 8000698:	e1fff115 	stw	r7,-60(fp)
 800069c:	e0bff305 	stb	r2,-52(fp)
	struct UDPCHAN conn;

	if (fd < 0)
 80006a0:	e0bff417 	ldw	r2,-48(fp)
 80006a4:	1000020e 	bge	r2,zero,80006b0 <buildaddChan+0x34>
		return(-2);	// bad fd value
 80006a8:	00bfff84 	movi	r2,-2
 80006ac:	00001306 	br	80006fc <buildaddChan+0x80>

	conn.fd = fd;
 80006b0:	e0bff417 	ldw	r2,-48(fp)
 80006b4:	e0bff515 	stw	r2,-44(fp)
	conn.chantype = type;
 80006b8:	e0bff303 	ldbu	r2,-52(fp)
 80006bc:	e0bff605 	stb	r2,-40(fp)
	memcpy(&conn.host_ip, host, sizeof(struct sockaddr_in));
 80006c0:	e0bff504 	addi	r2,fp,-44
 80006c4:	10800204 	addi	r2,r2,8
 80006c8:	01800404 	movi	r6,16
 80006cc:	e17ff217 	ldw	r5,-56(fp)
 80006d0:	1009883a 	mov	r4,r2
 80006d4:	80037cc0 	call	80037cc <memcpy>
	memcpy(&conn.client_ip, client, sizeof(struct sockaddr_in));
 80006d8:	e0bff504 	addi	r2,fp,-44
 80006dc:	10800604 	addi	r2,r2,24
 80006e0:	01800404 	movi	r6,16
 80006e4:	e17ff117 	ldw	r5,-60(fp)
 80006e8:	1009883a 	mov	r4,r2
 80006ec:	80037cc0 	call	80037cc <memcpy>

	return addChan(&conn);
 80006f0:	e0bff504 	addi	r2,fp,-44
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	80003f40 	call	80003f4 <addChan>
};
 80006fc:	e037883a 	mov	sp,fp
 8000700:	dfc00117 	ldw	ra,4(sp)
 8000704:	df000017 	ldw	fp,0(sp)
 8000708:	dec00204 	addi	sp,sp,8
 800070c:	f800283a 	ret

08000710 <allListeners>:

int allListeners(int * theList)			// return array of active channels to listen for
{
 8000710:	defffc04 	addi	sp,sp,-16
 8000714:	df000315 	stw	fp,12(sp)
 8000718:	df000304 	addi	fp,sp,12
 800071c:	e13ffd15 	stw	r4,-12(fp)
	int count = 0;
 8000720:	e03fff15 	stw	zero,-4(fp)

	//memset(theList, -1, MAXUDPCHAN);	// clear the returned list

	for(int i=0; i<MAXUDPCHAN; i++)
 8000724:	e03ffe15 	stw	zero,-8(fp)
 8000728:	00001506 	br	8000780 <allListeners+0x70>
		if (Connections[i].fd > 0)		// valid fd
 800072c:	e0bffe17 	ldw	r2,-8(fp)
 8000730:	10c00b24 	muli	r3,r2,44
 8000734:	00820174 	movhi	r2,2053
 8000738:	1885883a 	add	r2,r3,r2
 800073c:	109cac17 	ldw	r2,29360(r2)
 8000740:	00800c0e 	bge	zero,r2,8000774 <allListeners+0x64>
			theList[count++] = Connections[i].fd;
 8000744:	e0bfff17 	ldw	r2,-4(fp)
 8000748:	10c00044 	addi	r3,r2,1
 800074c:	e0ffff15 	stw	r3,-4(fp)
 8000750:	100490ba 	slli	r2,r2,2
 8000754:	e0fffd17 	ldw	r3,-12(fp)
 8000758:	1887883a 	add	r3,r3,r2
 800075c:	e0bffe17 	ldw	r2,-8(fp)
 8000760:	11000b24 	muli	r4,r2,44
 8000764:	00820174 	movhi	r2,2053
 8000768:	2085883a 	add	r2,r4,r2
 800076c:	109cac17 	ldw	r2,29360(r2)
 8000770:	18800015 	stw	r2,0(r3)
	for(int i=0; i<MAXUDPCHAN; i++)
 8000774:	e0bffe17 	ldw	r2,-8(fp)
 8000778:	10800044 	addi	r2,r2,1
 800077c:	e0bffe15 	stw	r2,-8(fp)
 8000780:	e0bffe17 	ldw	r2,-8(fp)
 8000784:	10800550 	cmplti	r2,r2,21
 8000788:	103fe81e 	bne	r2,zero,800072c <allListeners+0x1c>

	return count;
 800078c:	e0bfff17 	ldw	r2,-4(fp)
};
 8000790:	e037883a 	mov	sp,fp
 8000794:	df000017 	ldw	fp,0(sp)
 8000798:	dec00104 	addi	sp,sp,4
 800079c:	f800283a 	ret

080007a0 <ProcessRxPacket>:
#define MAXLINE 1500
unsigned char buffer[MAXLINE+1];  // room to hold string terminating \0


int ProcessRxPacket(int index)
{
 80007a0:	defff504 	addi	sp,sp,-44
 80007a4:	dfc00a15 	stw	ra,40(sp)
 80007a8:	df000915 	stw	fp,36(sp)
 80007ac:	df000904 	addi	fp,sp,36
 80007b0:	e13ff915 	stw	r4,-28(fp)
    int                 len, bufflen;
    struct sockaddr_in  client_addr;

	// Discovery channel has to process the receive buffer itself

	if (Connections[index].chantype == 'D')  // Discovery
 80007b4:	e0bff917 	ldw	r2,-28(fp)
 80007b8:	10c00b24 	muli	r3,r2,44
 80007bc:	00820174 	movhi	r2,2053
 80007c0:	1885883a 	add	r2,r3,r2
 80007c4:	109cad03 	ldbu	r2,29364(r2)
 80007c8:	10803fcc 	andi	r2,r2,255
 80007cc:	1080201c 	xori	r2,r2,128
 80007d0:	10bfe004 	addi	r2,r2,-128
 80007d4:	10801118 	cmpnei	r2,r2,68
 80007d8:	1000031e 	bne	r2,zero,80007e8 <ProcessRxPacket+0x48>
		return DiscChanMessage(index);
 80007dc:	e13ff917 	ldw	r4,-28(fp)
 80007e0:	80009140 	call	8000914 <DiscChanMessage>
 80007e4:	00004606 	br	8000900 <ProcessRxPacket+0x160>

	// Get the received buffer
    memset(&client_addr, 0, sizeof(struct sockaddr_in));
 80007e8:	e0bffa04 	addi	r2,fp,-24
 80007ec:	01800404 	movi	r6,16
 80007f0:	000b883a 	mov	r5,zero
 80007f4:	1009883a 	mov	r4,r2
 80007f8:	80038cc0 	call	80038cc <memset>

    len = sizeof(struct sockaddr_in);
 80007fc:	00800404 	movi	r2,16
 8000800:	e0bffe15 	stw	r2,-8(fp)
	bufflen = recvfrom(Connections[index].fd, (char *)buffer, MAXLINE,
 8000804:	e0bff917 	ldw	r2,-28(fp)
 8000808:	10c00b24 	muli	r3,r2,44
 800080c:	00820174 	movhi	r2,2053
 8000810:	1885883a 	add	r2,r3,r2
 8000814:	10dcac17 	ldw	r3,29360(r2)
 8000818:	e0bffe04 	addi	r2,fp,-8
 800081c:	d8800115 	stw	r2,4(sp)
 8000820:	e0bffa04 	addi	r2,fp,-24
 8000824:	d8800015 	stw	r2,0(sp)
 8000828:	000f883a 	mov	r7,zero
 800082c:	01817704 	movi	r6,1500
 8000830:	01420174 	movhi	r5,2053
 8000834:	295dba04 	addi	r5,r5,30440
 8000838:	1809883a 	mov	r4,r3
 800083c:	802b5400 	call	802b540 <bsd_recvfrom>
 8000840:	e0bfff15 	stw	r2,-4(fp)
			/*MSG_WAITALL*/ 0, (struct sockaddr *) &client_addr, &len);
	buffer[bufflen] = '\0';
 8000844:	e0ffff17 	ldw	r3,-4(fp)
 8000848:	00820174 	movhi	r2,2053
 800084c:	1885883a 	add	r2,r3,r2
 8000850:	101dba05 	stb	zero,30440(r2)

	if (Connections[index].chantype == 'P')  // Provisioning
 8000854:	e0bff917 	ldw	r2,-28(fp)
 8000858:	10c00b24 	muli	r3,r2,44
 800085c:	00820174 	movhi	r2,2053
 8000860:	1885883a 	add	r2,r3,r2
 8000864:	109cad03 	ldbu	r2,29364(r2)
 8000868:	10803fcc 	andi	r2,r2,255
 800086c:	1080201c 	xori	r2,r2,128
 8000870:	10bfe004 	addi	r2,r2,-128
 8000874:	10801418 	cmpnei	r2,r2,80
 8000878:	1000041e 	bne	r2,zero,800088c <ProcessRxPacket+0xec>
		return ProvChanMessage(index, bufflen);
 800087c:	e17fff17 	ldw	r5,-4(fp)
 8000880:	e13ff917 	ldw	r4,-28(fp)
 8000884:	8000c700 	call	8000c70 <ProvChanMessage>
 8000888:	00001d06 	br	8000900 <ProcessRxPacket+0x160>

	if (Connections[index].chantype == 'C')  // Configuration
 800088c:	e0bff917 	ldw	r2,-28(fp)
 8000890:	10c00b24 	muli	r3,r2,44
 8000894:	00820174 	movhi	r2,2053
 8000898:	1885883a 	add	r2,r3,r2
 800089c:	109cad03 	ldbu	r2,29364(r2)
 80008a0:	10803fcc 	andi	r2,r2,255
 80008a4:	1080201c 	xori	r2,r2,128
 80008a8:	10bfe004 	addi	r2,r2,-128
 80008ac:	108010d8 	cmpnei	r2,r2,67
 80008b0:	1000041e 	bne	r2,zero,80008c4 <ProcessRxPacket+0x124>
		return ConfigChanMessage(index, bufflen);
 80008b4:	e17fff17 	ldw	r5,-4(fp)
 80008b8:	e13ff917 	ldw	r4,-28(fp)
 80008bc:	8000e340 	call	8000e34 <ConfigChanMessage>
 80008c0:	00000f06 	br	8000900 <ProcessRxPacket+0x160>

	if (Connections[index].chantype == 'T')  // Traffic (Data rx'd from Ethernet to be RF transmitted)
 80008c4:	e0bff917 	ldw	r2,-28(fp)
 80008c8:	10c00b24 	muli	r3,r2,44
 80008cc:	00820174 	movhi	r2,2053
 80008d0:	1885883a 	add	r2,r3,r2
 80008d4:	109cad03 	ldbu	r2,29364(r2)
 80008d8:	10803fcc 	andi	r2,r2,255
 80008dc:	1080201c 	xori	r2,r2,128
 80008e0:	10bfe004 	addi	r2,r2,-128
 80008e4:	10801518 	cmpnei	r2,r2,84
 80008e8:	1000041e 	bne	r2,zero,80008fc <ProcessRxPacket+0x15c>
		return TrafficChanMessage(index, bufflen);
 80008ec:	e17fff17 	ldw	r5,-4(fp)
 80008f0:	e13ff917 	ldw	r4,-28(fp)
 80008f4:	8000e780 	call	8000e78 <TrafficChanMessage>
 80008f8:	00000106 	br	8000900 <ProcessRxPacket+0x160>

	return -1;		// unknown or Idle chantype
 80008fc:	00bfffc4 	movi	r2,-1
};
 8000900:	e037883a 	mov	sp,fp
 8000904:	dfc00117 	ldw	ra,4(sp)
 8000908:	df000017 	ldw	fp,0(sp)
 800090c:	dec00204 	addi	sp,sp,8
 8000910:	f800283a 	ret

08000914 <DiscChanMessage>:


int DiscChanMessage(int index)
{
 8000914:	deffdd04 	addi	sp,sp,-140
 8000918:	dfc02215 	stw	ra,136(sp)
 800091c:	df002115 	stw	fp,132(sp)
 8000920:	df002104 	addi	fp,sp,132
 8000924:	e13fe115 	stw	r4,-124(fp)
     */

    int                 len, n, fd_prov_tx;
    struct sockaddr_in  client_addr, host_addr;

    memset(&client_addr, 0, sizeof(struct sockaddr_in));
 8000928:	e0bff604 	addi	r2,fp,-40
 800092c:	01800404 	movi	r6,16
 8000930:	000b883a 	mov	r5,zero
 8000934:	1009883a 	mov	r4,r2
 8000938:	80038cc0 	call	80038cc <memset>
    memset(&host_addr, 0, sizeof(struct sockaddr_in));
 800093c:	e0bff204 	addi	r2,fp,-56
 8000940:	01800404 	movi	r6,16
 8000944:	000b883a 	mov	r5,zero
 8000948:	1009883a 	mov	r4,r2
 800094c:	80038cc0 	call	80038cc <memset>

    /* Discovery reply format:
     * 0xEF 0xFE 0x02 (not sending data yet) 6-byte ourMACaddress code_ver
     * board_id (0x07 from TSDR)
     */
    uint8_t disc_resp[64] = { 0xfe, 0xef, 0x02, 0x00, 0x07, 0xed, 0x2a, 0x22, 0x16, 0x07 };
 8000950:	008000f4 	movhi	r2,3
 8000954:	10bbff84 	addi	r2,r2,-4098
 8000958:	e0bfe215 	stw	r2,-120(fp)
 800095c:	00888af4 	movhi	r2,8747
 8000960:	10bb41c4 	addi	r2,r2,-4857
 8000964:	e0bfe315 	stw	r2,-116(fp)
 8000968:	0081c584 	movi	r2,1814
 800096c:	e0bfe415 	stw	r2,-112(fp)
 8000970:	e03fe515 	stw	zero,-108(fp)
 8000974:	e03fe615 	stw	zero,-104(fp)
 8000978:	e03fe715 	stw	zero,-100(fp)
 800097c:	e03fe815 	stw	zero,-96(fp)
 8000980:	e03fe915 	stw	zero,-92(fp)
 8000984:	e03fea15 	stw	zero,-88(fp)
 8000988:	e03feb15 	stw	zero,-84(fp)
 800098c:	e03fec15 	stw	zero,-80(fp)
 8000990:	e03fed15 	stw	zero,-76(fp)
 8000994:	e03fee15 	stw	zero,-72(fp)
 8000998:	e03fef15 	stw	zero,-68(fp)
 800099c:	e03ff015 	stw	zero,-64(fp)
 80009a0:	e03ff115 	stw	zero,-60(fp)
    memset(&disc_resp[10], 0, 54);  // discovery reply is padded with zeros
 80009a4:	e0bfe204 	addi	r2,fp,-120
 80009a8:	10800284 	addi	r2,r2,10
 80009ac:	01800d84 	movi	r6,54
 80009b0:	000b883a 	mov	r5,zero
 80009b4:	1009883a 	mov	r4,r2
 80009b8:	80038cc0 	call	80038cc <memset>

    len = sizeof(struct sockaddr_in);
 80009bc:	00800404 	movi	r2,16
 80009c0:	e0bffa15 	stw	r2,-24(fp)
	n = recvfrom(Connections[index].fd, (char *)buffer, MAXLINE,
 80009c4:	e0bfe117 	ldw	r2,-124(fp)
 80009c8:	10c00b24 	muli	r3,r2,44
 80009cc:	00820174 	movhi	r2,2053
 80009d0:	1885883a 	add	r2,r3,r2
 80009d4:	10dcac17 	ldw	r3,29360(r2)
 80009d8:	e0bffa04 	addi	r2,fp,-24
 80009dc:	d8800115 	stw	r2,4(sp)
 80009e0:	e0bff604 	addi	r2,fp,-40
 80009e4:	d8800015 	stw	r2,0(sp)
 80009e8:	000f883a 	mov	r7,zero
 80009ec:	01817704 	movi	r6,1500
 80009f0:	01420174 	movhi	r5,2053
 80009f4:	295dba04 	addi	r5,r5,30440
 80009f8:	1809883a 	mov	r4,r3
 80009fc:	802b5400 	call	802b540 <bsd_recvfrom>
 8000a00:	e0bfff15 	stw	r2,-4(fp)
			/*MSG_WAITALL*/ 0, (struct sockaddr *) &client_addr, &len);
	buffer[n] = '\0';
 8000a04:	e0ffff17 	ldw	r3,-4(fp)
 8000a08:	00820174 	movhi	r2,2053
 8000a0c:	1885883a 	add	r2,r3,r2
 8000a10:	101dba05 	stb	zero,30440(r2)

    /* check for 0xef 0xfe 0x02 signifying discovery request */
	if ((buffer[0] == 0xef) && (buffer[1] == 0xfe) && (buffer[2] == 0x02))
 8000a14:	00820174 	movhi	r2,2053
 8000a18:	109dba03 	ldbu	r2,30440(r2)
 8000a1c:	10803fcc 	andi	r2,r2,255
 8000a20:	10803bd8 	cmpnei	r2,r2,239
 8000a24:	10003a1e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
 8000a28:	00820174 	movhi	r2,2053
 8000a2c:	109dba43 	ldbu	r2,30441(r2)
 8000a30:	10803fcc 	andi	r2,r2,255
 8000a34:	10803f98 	cmpnei	r2,r2,254
 8000a38:	1000351e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
 8000a3c:	00820174 	movhi	r2,2053
 8000a40:	109dba83 	ldbu	r2,30442(r2)
 8000a44:	10803fcc 	andi	r2,r2,255
 8000a48:	10800098 	cmpnei	r2,r2,2
 8000a4c:	1000301e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
	  printf("Valid OpenHPSDR Discovery request received\n");
 8000a50:	01020174 	movhi	r4,2053
 8000a54:	213a0a04 	addi	r4,r4,-6104
 8000a58:	8003ca80 	call	8003ca8 <puts>
	else
		return -1;	// unknown discovery message - throw away

	printf("From: %s   Port: %u\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
 8000a5c:	e13ff717 	ldw	r4,-36(fp)
 8000a60:	802b50c0 	call	802b50c <bsd_inet_ntoa>
 8000a64:	1009883a 	mov	r4,r2
 8000a68:	e0bff68b 	ldhu	r2,-38(fp)
 8000a6c:	10bfffcc 	andi	r2,r2,65535
 8000a70:	1004d23a 	srli	r2,r2,8
 8000a74:	10bfffcc 	andi	r2,r2,65535
 8000a78:	10c03fcc 	andi	r3,r2,255
 8000a7c:	e0bff68b 	ldhu	r2,-38(fp)
 8000a80:	10bfffcc 	andi	r2,r2,65535
 8000a84:	1004923a 	slli	r2,r2,8
 8000a88:	10bfffcc 	andi	r2,r2,65535
 8000a8c:	1884b03a 	or	r2,r3,r2
 8000a90:	100d883a 	mov	r6,r2
 8000a94:	200b883a 	mov	r5,r4
 8000a98:	01020174 	movhi	r4,2053
 8000a9c:	213a1504 	addi	r4,r4,-6060
 8000aa0:	8003b840 	call	8003b84 <printf>
	printf("Received buffer : 0x%2x 0x%2x 0x%2x 0x%2x\n", buffer[0], buffer[1], buffer[2], buffer[3]);
 8000aa4:	00820174 	movhi	r2,2053
 8000aa8:	109dba03 	ldbu	r2,30440(r2)
 8000aac:	10c03fcc 	andi	r3,r2,255
 8000ab0:	00820174 	movhi	r2,2053
 8000ab4:	109dba43 	ldbu	r2,30441(r2)
 8000ab8:	11003fcc 	andi	r4,r2,255
 8000abc:	00820174 	movhi	r2,2053
 8000ac0:	109dba83 	ldbu	r2,30442(r2)
 8000ac4:	11403fcc 	andi	r5,r2,255
 8000ac8:	00820174 	movhi	r2,2053
 8000acc:	109dbac3 	ldbu	r2,30443(r2)
 8000ad0:	10803fcc 	andi	r2,r2,255
 8000ad4:	d8800015 	stw	r2,0(sp)
 8000ad8:	280f883a 	mov	r7,r5
 8000adc:	200d883a 	mov	r6,r4
 8000ae0:	180b883a 	mov	r5,r3
 8000ae4:	01020174 	movhi	r4,2053
 8000ae8:	213a1b04 	addi	r4,r4,-6036
 8000aec:	8003b840 	call	8003b84 <printf>

    // See if we already have a Provisioning Channel open from this client

    int existingIndex = findExistingChan('P', &client_addr);
 8000af0:	e0bff604 	addi	r2,fp,-40
 8000af4:	100b883a 	mov	r5,r2
 8000af8:	01001404 	movi	r4,80
 8000afc:	80005c40 	call	80005c4 <findExistingChan>
 8000b00:	e0bffe15 	stw	r2,-8(fp)
    if (existingIndex >= 0)		// Have an existing provisioning channel - send a duplicate reply
 8000b04:	e0bffe17 	ldw	r2,-8(fp)
 8000b08:	1000030e 	bge	r2,zero,8000b18 <DiscChanMessage+0x204>
 8000b0c:	00001406 	br	8000b60 <DiscChanMessage+0x24c>
		return -1;	// unknown discovery message - throw away
 8000b10:	00bfffc4 	movi	r2,-1
 8000b14:	00005106 	br	8000c5c <DiscChanMessage+0x348>
    {
    	int result = sendto(Connections[existingIndex].fd, (void *)disc_resp, sizeof(disc_resp),
 8000b18:	e0bffe17 	ldw	r2,-8(fp)
 8000b1c:	10c00b24 	muli	r3,r2,44
 8000b20:	00820174 	movhi	r2,2053
 8000b24:	1885883a 	add	r2,r3,r2
 8000b28:	10dcac17 	ldw	r3,29360(r2)
 8000b2c:	e13fe204 	addi	r4,fp,-120
 8000b30:	00800404 	movi	r2,16
 8000b34:	d8800115 	stw	r2,4(sp)
 8000b38:	e0bff604 	addi	r2,fp,-40
 8000b3c:	d8800015 	stw	r2,0(sp)
 8000b40:	000f883a 	mov	r7,zero
 8000b44:	01801004 	movi	r6,64
 8000b48:	200b883a 	mov	r5,r4
 8000b4c:	1809883a 	mov	r4,r3
 8000b50:	8033e940 	call	8033e94 <t_sendto>
 8000b54:	e0bffb15 	stw	r2,-20(fp)
				/*MSG_CONFIRM*/ 0, (struct sockaddr *) &client_addr, sizeof(struct sockaddr_in));
    	return result;
 8000b58:	e0bffb17 	ldw	r2,-20(fp)
 8000b5c:	00003f06 	br	8000c5c <DiscChanMessage+0x348>
    }

    // Don't have an existing channel. Create a new Provisioning channel to send the discovery reply

    if ((fd_prov_tx = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 8000b60:	000d883a 	mov	r6,zero
 8000b64:	01400084 	movi	r5,2
 8000b68:	01000084 	movi	r4,2
 8000b6c:	8032f580 	call	8032f58 <t_socket>
 8000b70:	e0bffd15 	stw	r2,-12(fp)
 8000b74:	e0bffd17 	ldw	r2,-12(fp)
 8000b78:	1000040e 	bge	r2,zero,8000b8c <DiscChanMessage+0x278>
    {
      alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Provisioning Socket creation failed");
 8000b7c:	01420174 	movhi	r5,2053
 8000b80:	297a2604 	addi	r5,r5,-5992
 8000b84:	01003fc4 	movi	r4,255
 8000b88:	80027b40 	call	80027b4 <alt_NetworkErrorHandler>
    }

    // Use a new sending socket. sendto implicitly binds a new (random) receive port number

    sendto(fd_prov_tx, (void *)disc_resp, sizeof(disc_resp),
 8000b8c:	e0ffe204 	addi	r3,fp,-120
 8000b90:	00800404 	movi	r2,16
 8000b94:	d8800115 	stw	r2,4(sp)
 8000b98:	e0bff604 	addi	r2,fp,-40
 8000b9c:	d8800015 	stw	r2,0(sp)
 8000ba0:	000f883a 	mov	r7,zero
 8000ba4:	01801004 	movi	r6,64
 8000ba8:	180b883a 	mov	r5,r3
 8000bac:	e13ffd17 	ldw	r4,-12(fp)
 8000bb0:	8033e940 	call	8033e94 <t_sendto>
    		/*MSG_CONFIRM*/ 0, (struct sockaddr *) &client_addr, sizeof(struct sockaddr_in));

    len = sizeof(struct sockaddr_in);
 8000bb4:	00800404 	movi	r2,16
 8000bb8:	e0bffa15 	stw	r2,-24(fp)
    if (getsockname(fd_prov_tx, (struct sockaddr *)&host_addr, &len) == -1)
 8000bbc:	e0fffa04 	addi	r3,fp,-24
 8000bc0:	e0bff204 	addi	r2,fp,-56
 8000bc4:	180d883a 	mov	r6,r3
 8000bc8:	100b883a 	mov	r5,r2
 8000bcc:	e13ffd17 	ldw	r4,-12(fp)
 8000bd0:	802b0180 	call	802b018 <bsd_getsockname>
 8000bd4:	10bfffd8 	cmpnei	r2,r2,-1
 8000bd8:	1000051e 	bne	r2,zero,8000bf0 <DiscChanMessage+0x2dc>
    {
    	perror("getsockname() error\n");
 8000bdc:	01020174 	movhi	r4,2053
 8000be0:	213a3204 	addi	r4,r4,-5944
 8000be4:	8003b440 	call	8003b44 <perror>
    	return -1;	// Error
 8000be8:	00bfffc4 	movi	r2,-1
 8000bec:	00001b06 	br	8000c5c <DiscChanMessage+0x348>
    }
    else
    {
    	printf("Provisioning port number: %d\n", ntohs(host_addr.sin_port));
 8000bf0:	e0bff28b 	ldhu	r2,-54(fp)
 8000bf4:	10bfffcc 	andi	r2,r2,65535
 8000bf8:	1004d23a 	srli	r2,r2,8
 8000bfc:	10bfffcc 	andi	r2,r2,65535
 8000c00:	10c03fcc 	andi	r3,r2,255
 8000c04:	e0bff28b 	ldhu	r2,-54(fp)
 8000c08:	10bfffcc 	andi	r2,r2,65535
 8000c0c:	1004923a 	slli	r2,r2,8
 8000c10:	10bfffcc 	andi	r2,r2,65535
 8000c14:	1884b03a 	or	r2,r3,r2
 8000c18:	100b883a 	mov	r5,r2
 8000c1c:	01020174 	movhi	r4,2053
 8000c20:	213a3804 	addi	r4,r4,-5920
 8000c24:	8003b840 	call	8003b84 <printf>
    	int addresult = buildaddChan(fd_prov_tx, 'P', &host_addr, &client_addr);
 8000c28:	e0fff604 	addi	r3,fp,-40
 8000c2c:	e0bff204 	addi	r2,fp,-56
 8000c30:	180f883a 	mov	r7,r3
 8000c34:	100d883a 	mov	r6,r2
 8000c38:	01401404 	movi	r5,80
 8000c3c:	e13ffd17 	ldw	r4,-12(fp)
 8000c40:	800067c0 	call	800067c <buildaddChan>
 8000c44:	e0bffc15 	stw	r2,-16(fp)
    	printf("Result of adding new provisioning channel to table: %u\n", addresult);
 8000c48:	e17ffc17 	ldw	r5,-16(fp)
 8000c4c:	01020174 	movhi	r4,2053
 8000c50:	213a4004 	addi	r4,r4,-5888
 8000c54:	8003b840 	call	8003b84 <printf>
    	return addresult;   // return the result of adding the channel to the table
 8000c58:	e0bffc17 	ldw	r2,-16(fp)
    }
};
 8000c5c:	e037883a 	mov	sp,fp
 8000c60:	dfc00117 	ldw	ra,4(sp)
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00204 	addi	sp,sp,8
 8000c6c:	f800283a 	ret

08000c70 <ProvChanMessage>:

int ProvChanMessage(int index, int bufflen)
{
 8000c70:	deffe404 	addi	sp,sp,-112
 8000c74:	dfc01b15 	stw	ra,108(sp)
 8000c78:	df001a15 	stw	fp,104(sp)
 8000c7c:	dc001915 	stw	r16,100(sp)
 8000c80:	df001a04 	addi	fp,sp,104
 8000c84:	e13fe915 	stw	r4,-92(fp)
 8000c88:	e17fe815 	stw	r5,-96(fp)
	 */

	int result;
	char resultmessage[80];

	printf("Received Provisioning Channel Message: %s\n", buffer);
 8000c8c:	01420174 	movhi	r5,2053
 8000c90:	295dba04 	addi	r5,r5,30440
 8000c94:	01020174 	movhi	r4,2053
 8000c98:	213a4e04 	addi	r4,r4,-5832
 8000c9c:	8003b840 	call	8003b84 <printf>

	if (buffer[0] == 'Y' || buffer[0] == 'X')
 8000ca0:	00820174 	movhi	r2,2053
 8000ca4:	109dba03 	ldbu	r2,30440(r2)
 8000ca8:	10803fcc 	andi	r2,r2,255
 8000cac:	10801660 	cmpeqi	r2,r2,89
 8000cb0:	1000051e 	bne	r2,zero,8000cc8 <ProvChanMessage+0x58>
 8000cb4:	00820174 	movhi	r2,2053
 8000cb8:	109dba03 	ldbu	r2,30440(r2)
 8000cbc:	10803fcc 	andi	r2,r2,255
 8000cc0:	10801618 	cmpnei	r2,r2,88
 8000cc4:	1000041e 	bne	r2,zero,8000cd8 <ProvChanMessage+0x68>
		result = ProvisioningLEDCommand(index, bufflen);
 8000cc8:	e17fe817 	ldw	r5,-96(fp)
 8000ccc:	e13fe917 	ldw	r4,-92(fp)
 8000cd0:	8000ebc0 	call	8000ebc <ProvisioningLEDCommand>
 8000cd4:	e0bffe15 	stw	r2,-8(fp)


	if (buffer[0] == 'M')
 8000cd8:	00820174 	movhi	r2,2053
 8000cdc:	109dba03 	ldbu	r2,30440(r2)
 8000ce0:	10803fcc 	andi	r2,r2,255
 8000ce4:	10801358 	cmpnei	r2,r2,77
 8000ce8:	1000071e 	bne	r2,zero,8000d08 <ProvChanMessage+0x98>
		result = ProvisioningModuleRegisterCommand(index, buffer, resultmessage);
 8000cec:	e0bfea04 	addi	r2,fp,-88
 8000cf0:	100d883a 	mov	r6,r2
 8000cf4:	01420174 	movhi	r5,2053
 8000cf8:	295dba04 	addi	r5,r5,30440
 8000cfc:	e13fe917 	ldw	r4,-92(fp)
 8000d00:	8001c200 	call	8001c20 <ProvisioningModuleRegisterCommand>
 8000d04:	e0bffe15 	stw	r2,-8(fp)

	if (result < 0)
 8000d08:	e0bffe17 	ldw	r2,-8(fp)
 8000d0c:	1000150e 	bge	r2,zero,8000d64 <ProvChanMessage+0xf4>
	{
        sendto(Connections[index].fd, (void *)"NAK\n", 4, 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
 8000d10:	e0bfe917 	ldw	r2,-92(fp)
 8000d14:	10c00b24 	muli	r3,r2,44
 8000d18:	00820174 	movhi	r2,2053
 8000d1c:	1885883a 	add	r2,r3,r2
 8000d20:	111cac17 	ldw	r4,29360(r2)
 8000d24:	e0bfe917 	ldw	r2,-92(fp)
 8000d28:	10800b24 	muli	r2,r2,44
 8000d2c:	10c00604 	addi	r3,r2,24
 8000d30:	00820174 	movhi	r2,2053
 8000d34:	109cac04 	addi	r2,r2,29360
 8000d38:	1885883a 	add	r2,r3,r2
 8000d3c:	00c00404 	movi	r3,16
 8000d40:	d8c00115 	stw	r3,4(sp)
 8000d44:	d8800015 	stw	r2,0(sp)
 8000d48:	000f883a 	mov	r7,zero
 8000d4c:	01800104 	movi	r6,4
 8000d50:	01420174 	movhi	r5,2053
 8000d54:	297a5904 	addi	r5,r5,-5788
 8000d58:	8033e940 	call	8033e94 <t_sendto>
        return result;
 8000d5c:	e0bffe17 	ldw	r2,-8(fp)
 8000d60:	00002e06 	br	8000e1c <ProvChanMessage+0x1ac>
	}

    sendto(Connections[index].fd, (void *)"AK\n", 4, 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
 8000d64:	e0bfe917 	ldw	r2,-92(fp)
 8000d68:	10c00b24 	muli	r3,r2,44
 8000d6c:	00820174 	movhi	r2,2053
 8000d70:	1885883a 	add	r2,r3,r2
 8000d74:	111cac17 	ldw	r4,29360(r2)
 8000d78:	e0bfe917 	ldw	r2,-92(fp)
 8000d7c:	10800b24 	muli	r2,r2,44
 8000d80:	10c00604 	addi	r3,r2,24
 8000d84:	00820174 	movhi	r2,2053
 8000d88:	109cac04 	addi	r2,r2,29360
 8000d8c:	1885883a 	add	r2,r3,r2
 8000d90:	00c00404 	movi	r3,16
 8000d94:	d8c00115 	stw	r3,4(sp)
 8000d98:	d8800015 	stw	r2,0(sp)
 8000d9c:	000f883a 	mov	r7,zero
 8000da0:	01800104 	movi	r6,4
 8000da4:	01420174 	movhi	r5,2053
 8000da8:	297a5b04 	addi	r5,r5,-5780
 8000dac:	8033e940 	call	8033e94 <t_sendto>

    if (result > 0)
 8000db0:	e0bffe17 	ldw	r2,-8(fp)
 8000db4:	0080180e 	bge	zero,r2,8000e18 <ProvChanMessage+0x1a8>
        sendto(Connections[index].fd, (void *)resultmessage, strlen(resultmessage), 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
 8000db8:	e0bfe917 	ldw	r2,-92(fp)
 8000dbc:	10c00b24 	muli	r3,r2,44
 8000dc0:	00820174 	movhi	r2,2053
 8000dc4:	1885883a 	add	r2,r3,r2
 8000dc8:	141cac17 	ldw	r16,29360(r2)
 8000dcc:	e0bfea04 	addi	r2,fp,-88
 8000dd0:	1009883a 	mov	r4,r2
 8000dd4:	80044880 	call	8004488 <strlen>
 8000dd8:	100b883a 	mov	r5,r2
 8000ddc:	e0bfe917 	ldw	r2,-92(fp)
 8000de0:	10800b24 	muli	r2,r2,44
 8000de4:	10c00604 	addi	r3,r2,24
 8000de8:	00820174 	movhi	r2,2053
 8000dec:	109cac04 	addi	r2,r2,29360
 8000df0:	1885883a 	add	r2,r3,r2
 8000df4:	e13fea04 	addi	r4,fp,-88
 8000df8:	00c00404 	movi	r3,16
 8000dfc:	d8c00115 	stw	r3,4(sp)
 8000e00:	d8800015 	stw	r2,0(sp)
 8000e04:	000f883a 	mov	r7,zero
 8000e08:	280d883a 	mov	r6,r5
 8000e0c:	200b883a 	mov	r5,r4
 8000e10:	8009883a 	mov	r4,r16
 8000e14:	8033e940 	call	8033e94 <t_sendto>

	return result;
 8000e18:	e0bffe17 	ldw	r2,-8(fp)
};
 8000e1c:	e6ffff04 	addi	sp,fp,-4
 8000e20:	dfc00217 	ldw	ra,8(sp)
 8000e24:	df000117 	ldw	fp,4(sp)
 8000e28:	dc000017 	ldw	r16,0(sp)
 8000e2c:	dec00304 	addi	sp,sp,12
 8000e30:	f800283a 	ret

08000e34 <ConfigChanMessage>:

int ConfigChanMessage(int index, int bufflen)
{
 8000e34:	defffc04 	addi	sp,sp,-16
 8000e38:	dfc00315 	stw	ra,12(sp)
 8000e3c:	df000215 	stw	fp,8(sp)
 8000e40:	df000204 	addi	fp,sp,8
 8000e44:	e13fff15 	stw	r4,-4(fp)
 8000e48:	e17ffe15 	stw	r5,-8(fp)
    // Received Configuration Channel message

	printf("Received Configuration Channel Message: %s\n", buffer);
 8000e4c:	01420174 	movhi	r5,2053
 8000e50:	295dba04 	addi	r5,r5,30440
 8000e54:	01020174 	movhi	r4,2053
 8000e58:	213a5c04 	addi	r4,r4,-5776
 8000e5c:	8003b840 	call	8003b84 <printf>
	return -3;	// not yet implemented
 8000e60:	00bfff44 	movi	r2,-3
};
 8000e64:	e037883a 	mov	sp,fp
 8000e68:	dfc00117 	ldw	ra,4(sp)
 8000e6c:	df000017 	ldw	fp,0(sp)
 8000e70:	dec00204 	addi	sp,sp,8
 8000e74:	f800283a 	ret

08000e78 <TrafficChanMessage>:

int TrafficChanMessage(int index, int bufflen)
{
 8000e78:	defffc04 	addi	sp,sp,-16
 8000e7c:	dfc00315 	stw	ra,12(sp)
 8000e80:	df000215 	stw	fp,8(sp)
 8000e84:	df000204 	addi	fp,sp,8
 8000e88:	e13fff15 	stw	r4,-4(fp)
 8000e8c:	e17ffe15 	stw	r5,-8(fp)
    // Received Traffic (Data) Channel message

	printf("Received Traffic Channel Message: %s\n",buffer);
 8000e90:	01420174 	movhi	r5,2053
 8000e94:	295dba04 	addi	r5,r5,30440
 8000e98:	01020174 	movhi	r4,2053
 8000e9c:	213a6704 	addi	r4,r4,-5732
 8000ea0:	8003b840 	call	8003b84 <printf>
	return -3;	// not yet implemented
 8000ea4:	00bfff44 	movi	r2,-3
};
 8000ea8:	e037883a 	mov	sp,fp
 8000eac:	dfc00117 	ldw	ra,4(sp)
 8000eb0:	df000017 	ldw	fp,0(sp)
 8000eb4:	dec00204 	addi	sp,sp,8
 8000eb8:	f800283a 	ret

08000ebc <ProvisioningLEDCommand>:


int ProvisioningLEDCommand(int index, int bufflen)
{
 8000ebc:	defffc04 	addi	sp,sp,-16
 8000ec0:	dfc00315 	stw	ra,12(sp)
 8000ec4:	df000215 	stw	fp,8(sp)
 8000ec8:	df000204 	addi	fp,sp,8
 8000ecc:	e13fff15 	stw	r4,-4(fp)
 8000ed0:	e17ffe15 	stw	r5,-8(fp)
	if (buffer[0] == 'Y')	// Turn on LED0 - 3
 8000ed4:	00820174 	movhi	r2,2053
 8000ed8:	109dba03 	ldbu	r2,30440(r2)
 8000edc:	10803fcc 	andi	r2,r2,255
 8000ee0:	10801658 	cmpnei	r2,r2,89
 8000ee4:	10003a1e 	bne	r2,zero,8000fd0 <ProvisioningLEDCommand+0x114>
	{
		if (buffer[1] == '0')
 8000ee8:	00820174 	movhi	r2,2053
 8000eec:	109dba43 	ldbu	r2,30441(r2)
 8000ef0:	10803fcc 	andi	r2,r2,255
 8000ef4:	10800c18 	cmpnei	r2,r2,48
 8000ef8:	1000091e 	bne	r2,zero,8000f20 <ProvisioningLEDCommand+0x64>
		{
			LEDCommand = 0x01;
 8000efc:	00800044 	movi	r2,1
 8000f00:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000f04:	d0a05817 	ldw	r2,-32416(gp)
 8000f08:	d0e05417 	ldw	r3,-32432(gp)
 8000f0c:	180b883a 	mov	r5,r3
 8000f10:	1009883a 	mov	r4,r2
 8000f14:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8000f18:	0005883a 	mov	r2,zero
 8000f1c:	00006c06 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '1')
 8000f20:	00820174 	movhi	r2,2053
 8000f24:	109dba43 	ldbu	r2,30441(r2)
 8000f28:	10803fcc 	andi	r2,r2,255
 8000f2c:	10800c58 	cmpnei	r2,r2,49
 8000f30:	1000091e 	bne	r2,zero,8000f58 <ProvisioningLEDCommand+0x9c>
		{
			LEDCommand = 0x02;
 8000f34:	00800084 	movi	r2,2
 8000f38:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000f3c:	d0a05817 	ldw	r2,-32416(gp)
 8000f40:	d0e05417 	ldw	r3,-32432(gp)
 8000f44:	180b883a 	mov	r5,r3
 8000f48:	1009883a 	mov	r4,r2
 8000f4c:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8000f50:	0005883a 	mov	r2,zero
 8000f54:	00005e06 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '2')
 8000f58:	00820174 	movhi	r2,2053
 8000f5c:	109dba43 	ldbu	r2,30441(r2)
 8000f60:	10803fcc 	andi	r2,r2,255
 8000f64:	10800c98 	cmpnei	r2,r2,50
 8000f68:	1000091e 	bne	r2,zero,8000f90 <ProvisioningLEDCommand+0xd4>
		{
			LEDCommand = 0x04;
 8000f6c:	00800104 	movi	r2,4
 8000f70:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000f74:	d0a05817 	ldw	r2,-32416(gp)
 8000f78:	d0e05417 	ldw	r3,-32432(gp)
 8000f7c:	180b883a 	mov	r5,r3
 8000f80:	1009883a 	mov	r4,r2
 8000f84:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8000f88:	0005883a 	mov	r2,zero
 8000f8c:	00005006 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '3')
 8000f90:	00820174 	movhi	r2,2053
 8000f94:	109dba43 	ldbu	r2,30441(r2)
 8000f98:	10803fcc 	andi	r2,r2,255
 8000f9c:	10800cd8 	cmpnei	r2,r2,51
 8000fa0:	1000091e 	bne	r2,zero,8000fc8 <ProvisioningLEDCommand+0x10c>
		{
			LEDCommand = 0x08;
 8000fa4:	00800204 	movi	r2,8
 8000fa8:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000fac:	d0a05817 	ldw	r2,-32416(gp)
 8000fb0:	d0e05417 	ldw	r3,-32432(gp)
 8000fb4:	180b883a 	mov	r5,r3
 8000fb8:	1009883a 	mov	r4,r2
 8000fbc:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8000fc0:	0005883a 	mov	r2,zero
 8000fc4:	00004206 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		return -1;	// unknown LED number
 8000fc8:	00bfffc4 	movi	r2,-1
 8000fcc:	00004006 	br	80010d0 <ProvisioningLEDCommand+0x214>
	}

	if (buffer[0] == 'X')	// Turn off LED0 - 3
 8000fd0:	00820174 	movhi	r2,2053
 8000fd4:	109dba03 	ldbu	r2,30440(r2)
 8000fd8:	10803fcc 	andi	r2,r2,255
 8000fdc:	10801618 	cmpnei	r2,r2,88
 8000fe0:	10003a1e 	bne	r2,zero,80010cc <ProvisioningLEDCommand+0x210>
	{
		if (buffer[1] == '0')
 8000fe4:	00820174 	movhi	r2,2053
 8000fe8:	109dba43 	ldbu	r2,30441(r2)
 8000fec:	10803fcc 	andi	r2,r2,255
 8000ff0:	10800c18 	cmpnei	r2,r2,48
 8000ff4:	1000091e 	bne	r2,zero,800101c <ProvisioningLEDCommand+0x160>
		{
			LEDCommand = 0x10;
 8000ff8:	00800404 	movi	r2,16
 8000ffc:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8001000:	d0a05817 	ldw	r2,-32416(gp)
 8001004:	d0e05417 	ldw	r3,-32432(gp)
 8001008:	180b883a 	mov	r5,r3
 800100c:	1009883a 	mov	r4,r2
 8001010:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8001014:	0005883a 	mov	r2,zero
 8001018:	00002d06 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '1')
 800101c:	00820174 	movhi	r2,2053
 8001020:	109dba43 	ldbu	r2,30441(r2)
 8001024:	10803fcc 	andi	r2,r2,255
 8001028:	10800c58 	cmpnei	r2,r2,49
 800102c:	1000091e 	bne	r2,zero,8001054 <ProvisioningLEDCommand+0x198>
		{
			LEDCommand = 0x20;
 8001030:	00800804 	movi	r2,32
 8001034:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8001038:	d0a05817 	ldw	r2,-32416(gp)
 800103c:	d0e05417 	ldw	r3,-32432(gp)
 8001040:	180b883a 	mov	r5,r3
 8001044:	1009883a 	mov	r4,r2
 8001048:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 800104c:	0005883a 	mov	r2,zero
 8001050:	00001f06 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '2')
 8001054:	00820174 	movhi	r2,2053
 8001058:	109dba43 	ldbu	r2,30441(r2)
 800105c:	10803fcc 	andi	r2,r2,255
 8001060:	10800c98 	cmpnei	r2,r2,50
 8001064:	1000091e 	bne	r2,zero,800108c <ProvisioningLEDCommand+0x1d0>
		{
			LEDCommand = 0x40;
 8001068:	00801004 	movi	r2,64
 800106c:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8001070:	d0a05817 	ldw	r2,-32416(gp)
 8001074:	d0e05417 	ldw	r3,-32432(gp)
 8001078:	180b883a 	mov	r5,r3
 800107c:	1009883a 	mov	r4,r2
 8001080:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 8001084:	0005883a 	mov	r2,zero
 8001088:	00001106 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '3')
 800108c:	00820174 	movhi	r2,2053
 8001090:	109dba43 	ldbu	r2,30441(r2)
 8001094:	10803fcc 	andi	r2,r2,255
 8001098:	10800cd8 	cmpnei	r2,r2,51
 800109c:	1000091e 	bne	r2,zero,80010c4 <ProvisioningLEDCommand+0x208>
		{
			LEDCommand = 0x80;
 80010a0:	00802004 	movi	r2,128
 80010a4:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 80010a8:	d0a05817 	ldw	r2,-32416(gp)
 80010ac:	d0e05417 	ldw	r3,-32432(gp)
 80010b0:	180b883a 	mov	r5,r3
 80010b4:	1009883a 	mov	r4,r2
 80010b8:	8019b800 	call	8019b80 <OSQPost>
			return 0;
 80010bc:	0005883a 	mov	r2,zero
 80010c0:	00000306 	br	80010d0 <ProvisioningLEDCommand+0x214>
		}
		return -1;	// unknown LED number
 80010c4:	00bfffc4 	movi	r2,-1
 80010c8:	00000106 	br	80010d0 <ProvisioningLEDCommand+0x214>
	}
	return -2;		// How did we get here?
 80010cc:	00bfff84 	movi	r2,-2

};
 80010d0:	e037883a 	mov	sp,fp
 80010d4:	dfc00117 	ldw	ra,4(sp)
 80010d8:	df000017 	ldw	fp,0(sp)
 80010dc:	dec00204 	addi	sp,sp,8
 80010e0:	f800283a 	ret

080010e4 <SI5345>:

int SI5345(struct PARSEDCMD *cmds, char resultmessage[], int itfcindex) 		// Handler for ATECC 608A ID PROM
{
 80010e4:	defff504 	addi	sp,sp,-44
 80010e8:	dfc00a15 	stw	ra,40(sp)
 80010ec:	df000915 	stw	fp,36(sp)
 80010f0:	df000904 	addi	fp,sp,36
 80010f4:	e13ff915 	stw	r4,-28(fp)
 80010f8:	e17ff815 	stw	r5,-32(fp)
 80010fc:	e1bff715 	stw	r6,-36(fp)
	ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
//	ALT_AVALON_I2C_STATUS_CODE status;
	alt_32 status;						// Altera defines this as unsigned, but then uses it as signed

	i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 8001100:	e0bff717 	ldw	r2,-36(fp)
 8001104:	10800a24 	muli	r2,r2,40
 8001108:	10c00304 	addi	r3,r2,12
 800110c:	00820174 	movhi	r2,2053
 8001110:	109f3204 	addi	r2,r2,31944
 8001114:	1885883a 	add	r2,r3,r2
 8001118:	1009883a 	mov	r4,r2
 800111c:	801cfd80 	call	801cfd8 <alt_avalon_i2c_open>
 8001120:	e0bfff15 	stw	r2,-4(fp)

	if (NULL==i2c_dev)
 8001124:	e0bfff17 	ldw	r2,-4(fp)
 8001128:	10000c1e 	bne	r2,zero,800115c <SI5345+0x78>
	{
		printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 800112c:	e0bff717 	ldw	r2,-36(fp)
 8001130:	10800a24 	muli	r2,r2,40
 8001134:	10c00304 	addi	r3,r2,12
 8001138:	00820174 	movhi	r2,2053
 800113c:	109f3204 	addi	r2,r2,31944
 8001140:	1885883a 	add	r2,r3,r2
 8001144:	100b883a 	mov	r5,r2
 8001148:	01020174 	movhi	r4,2053
 800114c:	213a7104 	addi	r4,r4,-5692
 8001150:	8003b840 	call	8003b84 <printf>
		return -1;
 8001154:	00bfffc4 	movi	r2,-1
 8001158:	00005206 	br	80012a4 <SI5345+0x1c0>
	//  A1 is on pin 17 of the device (a corner pin).
	// Then slave address >> 1 is:
	//   if A1 high - 0x6B
	//   if A1 low - 0x69

	alt_u32 slave_addr = 0x69;  	  // Right shifted by one bit
 800115c:	00801a44 	movi	r2,105
 8001160:	e0bffe15 	stw	r2,-8(fp)

	alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 8001164:	e17ffe17 	ldw	r5,-8(fp)
 8001168:	e13fff17 	ldw	r4,-4(fp)
 800116c:	801d7b40 	call	801d7b4 <alt_avalon_i2c_master_target_set>

	// Need to set the I2C I/O voltage to 3.3v:  bank 0x09 register 0x43

	alt_u8 bank9[2] = {0x01, 0x09 };	// write 9 to bank 1 (selector)
 8001170:	00824044 	movi	r2,2305
 8001174:	e0bffc8d 	sth	r2,-14(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, bank9, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001178:	e0bffc84 	addi	r2,fp,-14
 800117c:	000f883a 	mov	r7,zero
 8001180:	01800084 	movi	r6,2
 8001184:	100b883a 	mov	r5,r2
 8001188:	e13fff17 	ldw	r4,-4(fp)
 800118c:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001190:	e0bffd15 	stw	r2,-12(fp)

	// write 0x01 to 9:43
	alt_u8 vccio[2] = { 0x43, 0x01 };	// set I2C vccio to 3.3v
 8001194:	008050c4 	movi	r2,323
 8001198:	e0bffc0d 	sth	r2,-16(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, vccio, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
 800119c:	e0bffc04 	addi	r2,fp,-16
 80011a0:	000f883a 	mov	r7,zero
 80011a4:	01800084 	movi	r6,2
 80011a8:	100b883a 	mov	r5,r2
 80011ac:	e13fff17 	ldw	r4,-4(fp)
 80011b0:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80011b4:	e0bffd15 	stw	r2,-12(fp)

	alt_u8 banksel[2] = {0x01, 0x00 };	// write 0 (as bank 0 for future reads) to bank 1 (bank selector)
 80011b8:	00800044 	movi	r2,1
 80011bc:	e0bffb8d 	sth	r2,-18(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, banksel, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
 80011c0:	e0bffb84 	addi	r2,fp,-18
 80011c4:	000f883a 	mov	r7,zero
 80011c8:	01800084 	movi	r6,2
 80011cc:	100b883a 	mov	r5,r2
 80011d0:	e13fff17 	ldw	r4,-4(fp)
 80011d4:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80011d8:	e0bffd15 	stw	r2,-12(fp)

	alt_u8 selMSBPN = {0x02 };	// bank 0 : MSB of the part number
 80011dc:	00800084 	movi	r2,2
 80011e0:	e0bffb45 	stb	r2,-19(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, &selMSBPN, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 80011e4:	e0bffb44 	addi	r2,fp,-19
 80011e8:	000f883a 	mov	r7,zero
 80011ec:	01800044 	movi	r6,1
 80011f0:	100b883a 	mov	r5,r2
 80011f4:	e13fff17 	ldw	r4,-4(fp)
 80011f8:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80011fc:	e0bffd15 	stw	r2,-12(fp)
	alt_u8 LSBPN;
	status = alt_avalon_i2c_master_rx(i2c_dev, &LSBPN, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001200:	e0bffb04 	addi	r2,fp,-20
 8001204:	000f883a 	mov	r7,zero
 8001208:	01800044 	movi	r6,1
 800120c:	100b883a 	mov	r5,r2
 8001210:	e13fff17 	ldw	r4,-4(fp)
 8001214:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001218:	e0bffd15 	stw	r2,-12(fp)

	alt_u8 selLSBPN = {0x03 };	// bank 0 : LSB of the part number
 800121c:	008000c4 	movi	r2,3
 8001220:	e0bffac5 	stb	r2,-21(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, &selLSBPN, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001224:	e0bffac4 	addi	r2,fp,-21
 8001228:	000f883a 	mov	r7,zero
 800122c:	01800044 	movi	r6,1
 8001230:	100b883a 	mov	r5,r2
 8001234:	e13fff17 	ldw	r4,-4(fp)
 8001238:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 800123c:	e0bffd15 	stw	r2,-12(fp)
	alt_u8 MSBPN;
	status = alt_avalon_i2c_master_rx(i2c_dev, &MSBPN, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001240:	e0bffa84 	addi	r2,fp,-22
 8001244:	000f883a 	mov	r7,zero
 8001248:	01800044 	movi	r6,1
 800124c:	100b883a 	mov	r5,r2
 8001250:	e13fff17 	ldw	r4,-4(fp)
 8001254:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001258:	e0bffd15 	stw	r2,-12(fp)

	// TODO
	// TODO - Now need to add code to write and read the Si5345 registers.
	// TODO

	if (status == 0)
 800125c:	e0bffd17 	ldw	r2,-12(fp)
 8001260:	10000b1e 	bne	r2,zero,8001290 <SI5345+0x1ac>
	{
		printf("Si5345 OK. Part number of device:  %02x%02x\n", MSBPN, LSBPN);
 8001264:	e0bffa83 	ldbu	r2,-22(fp)
 8001268:	10803fcc 	andi	r2,r2,255
 800126c:	e0fffb03 	ldbu	r3,-20(fp)
 8001270:	18c03fcc 	andi	r3,r3,255
 8001274:	180d883a 	mov	r6,r3
 8001278:	100b883a 	mov	r5,r2
 800127c:	01020174 	movhi	r4,2053
 8001280:	213a7904 	addi	r4,r4,-5660
 8001284:	8003b840 	call	8003b84 <printf>
		return 0;
 8001288:	0005883a 	mov	r2,zero
 800128c:	00000506 	br	80012a4 <SI5345+0x1c0>
	}
	else
	{
		printf("Si5345 i2C error. Error status code: %04ld\n", status);
 8001290:	e17ffd17 	ldw	r5,-12(fp)
 8001294:	01020174 	movhi	r4,2053
 8001298:	213a8504 	addi	r4,r4,-5612
 800129c:	8003b840 	call	8003b84 <printf>
		return status;
 80012a0:	e0bffd17 	ldw	r2,-12(fp)
	}

}
 80012a4:	e037883a 	mov	sp,fp
 80012a8:	dfc00117 	ldw	ra,4(sp)
 80012ac:	df000017 	ldw	fp,0(sp)
 80012b0:	dec00204 	addi	sp,sp,8
 80012b4:	f800283a 	ret

080012b8 <ZEDF9T>:
int ZEDF9T(struct PARSEDCMD *cmds, char resultmessage[], int itfcindex) 		// Handler for ZED-F9T GPS
{
 80012b8:	deffd404 	addi	sp,sp,-176
 80012bc:	dfc02b15 	stw	ra,172(sp)
 80012c0:	df002a15 	stw	fp,168(sp)
 80012c4:	df002a04 	addi	fp,sp,168
 80012c8:	e13fd915 	stw	r4,-156(fp)
 80012cc:	e17fd815 	stw	r5,-160(fp)
 80012d0:	e1bfd715 	stw	r6,-164(fp)
	ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
//	ALT_AVALON_I2C_STATUS_CODE status;
	alt_32 status;						// Altera defines this as unsigned, but then uses it as signed

	i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 80012d4:	e0bfd717 	ldw	r2,-164(fp)
 80012d8:	10800a24 	muli	r2,r2,40
 80012dc:	10c00304 	addi	r3,r2,12
 80012e0:	00820174 	movhi	r2,2053
 80012e4:	109f3204 	addi	r2,r2,31944
 80012e8:	1885883a 	add	r2,r3,r2
 80012ec:	1009883a 	mov	r4,r2
 80012f0:	801cfd80 	call	801cfd8 <alt_avalon_i2c_open>
 80012f4:	e0bffd15 	stw	r2,-12(fp)

	if (NULL==i2c_dev)
 80012f8:	e0bffd17 	ldw	r2,-12(fp)
 80012fc:	10000c1e 	bne	r2,zero,8001330 <ZEDF9T+0x78>
	{
		printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 8001300:	e0bfd717 	ldw	r2,-164(fp)
 8001304:	10800a24 	muli	r2,r2,40
 8001308:	10c00304 	addi	r3,r2,12
 800130c:	00820174 	movhi	r2,2053
 8001310:	109f3204 	addi	r2,r2,31944
 8001314:	1885883a 	add	r2,r3,r2
 8001318:	100b883a 	mov	r5,r2
 800131c:	01020174 	movhi	r4,2053
 8001320:	213a7104 	addi	r4,r4,-5692
 8001324:	8003b840 	call	8003b84 <printf>
		return -1;
 8001328:	00bfffc4 	movi	r2,-1
 800132c:	00009d06 	br	80015a4 <ZEDF9T+0x2ec>
	}

    // ZEDF9T slave address is 0x84. Then slave address >> 1 is:  0x42

	alt_u32 slave_addr = 0x42;  	  // Right shifted by one bit
 8001330:	00801084 	movi	r2,66
 8001334:	e0bffc15 	stw	r2,-16(fp)

	alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 8001338:	e17ffc17 	ldw	r5,-16(fp)
 800133c:	e13ffd17 	ldw	r4,-12(fp)
 8001340:	801d7b40 	call	801d7b4 <alt_avalon_i2c_master_target_set>
	// read and returns a value of 0xFF, then there is no message waiting. No valid message
	// can begin with the 0xFF byte.
	//
	// To select a register, write that register value to the device.  Nothing else is writable.

	alt_u8 regnum = 0xFD;
 8001344:	00bfff44 	movi	r2,-3
 8001348:	e0bff8c5 	stb	r2,-29(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, &regnum, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 800134c:	e0bff8c4 	addi	r2,fp,-29
 8001350:	000f883a 	mov	r7,zero
 8001354:	01800044 	movi	r6,1
 8001358:	100b883a 	mov	r5,r2
 800135c:	e13ffd17 	ldw	r4,-12(fp)
 8001360:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001364:	e0bffb15 	stw	r2,-20(fp)
	alt_u8 MScount;
	status = alt_avalon_i2c_master_rx(i2c_dev, &MScount, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001368:	e0bff884 	addi	r2,fp,-30
 800136c:	000f883a 	mov	r7,zero
 8001370:	01800044 	movi	r6,1
 8001374:	100b883a 	mov	r5,r2
 8001378:	e13ffd17 	ldw	r4,-12(fp)
 800137c:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001380:	e0bffb15 	stw	r2,-20(fp)

	regnum = 0xFE;
 8001384:	00bfff84 	movi	r2,-2
 8001388:	e0bff8c5 	stb	r2,-29(fp)
	status = alt_avalon_i2c_master_tx(i2c_dev, &regnum, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 800138c:	e0bff8c4 	addi	r2,fp,-29
 8001390:	000f883a 	mov	r7,zero
 8001394:	01800044 	movi	r6,1
 8001398:	100b883a 	mov	r5,r2
 800139c:	e13ffd17 	ldw	r4,-12(fp)
 80013a0:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80013a4:	e0bffb15 	stw	r2,-20(fp)
	alt_u8 LScount;
	status = alt_avalon_i2c_master_rx(i2c_dev, &LScount, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 80013a8:	e0bff844 	addi	r2,fp,-31
 80013ac:	000f883a 	mov	r7,zero
 80013b0:	01800044 	movi	r6,1
 80013b4:	100b883a 	mov	r5,r2
 80013b8:	e13ffd17 	ldw	r4,-12(fp)
 80013bc:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 80013c0:	e0bffb15 	stw	r2,-20(fp)

	if (status != 0)
 80013c4:	e0bffb17 	ldw	r2,-20(fp)
 80013c8:	10000626 	beq	r2,zero,80013e4 <ZEDF9T+0x12c>
	{
		printf("ZEDF9T I2C error, status = %04li\n", status);
 80013cc:	e17ffb17 	ldw	r5,-20(fp)
 80013d0:	01020174 	movhi	r4,2053
 80013d4:	213a9004 	addi	r4,r4,-5568
 80013d8:	8003b840 	call	8003b84 <printf>
		return -1;		// error - return DE_LH NAK
 80013dc:	00bfffc4 	movi	r2,-1
 80013e0:	00007006 	br	80015a4 <ZEDF9T+0x2ec>
	}

	int Count = 256 * MScount + LScount;
 80013e4:	e0bff883 	ldbu	r2,-30(fp)
 80013e8:	10803fcc 	andi	r2,r2,255
 80013ec:	1006923a 	slli	r3,r2,8
 80013f0:	e0bff843 	ldbu	r2,-31(fp)
 80013f4:	10803fcc 	andi	r2,r2,255
 80013f8:	1885883a 	add	r2,r3,r2
 80013fc:	e0bffa15 	stw	r2,-24(fp)

	if (Count == 0)		// No message awaiting, return count of zero and value of 0xff
 8001400:	e0bffa17 	ldw	r2,-24(fp)
 8001404:	10000c1e 	bne	r2,zero,8001438 <ZEDF9T+0x180>
	{
		sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x0000 0xff\n",	cmds->module, cmds->interface);
 8001408:	e0bfd917 	ldw	r2,-156(fp)
 800140c:	10c00617 	ldw	r3,24(r2)
 8001410:	e0bfd917 	ldw	r2,-156(fp)
 8001414:	10800717 	ldw	r2,28(r2)
 8001418:	100f883a 	mov	r7,r2
 800141c:	180d883a 	mov	r6,r3
 8001420:	01420174 	movhi	r5,2053
 8001424:	297a9904 	addi	r5,r5,-5532
 8001428:	e13fd817 	ldw	r4,-160(fp)
 800142c:	8003d0c0 	call	8003d0c <sprintf>
		return 1;
 8001430:	00800044 	movi	r2,1
 8001434:	00005b06 	br	80015a4 <ZEDF9T+0x2ec>
	}
	else				// Read the message for Count bytes, then return the message as hex.
	{

		regnum = 0xFF;	// select the message register
 8001438:	00bfffc4 	movi	r2,-1
 800143c:	e0bff8c5 	stb	r2,-29(fp)
		status = alt_avalon_i2c_master_tx(i2c_dev, &regnum, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001440:	e0bff8c4 	addi	r2,fp,-29
 8001444:	000f883a 	mov	r7,zero
 8001448:	01800044 	movi	r6,1
 800144c:	100b883a 	mov	r5,r2
 8001450:	e13ffd17 	ldw	r4,-12(fp)
 8001454:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001458:	e0bffb15 	stw	r2,-20(fp)

		//  If there is a message byte of 0xff, terminate the printout as it's probably a message boundary.

		alt_u8 msgbuf[120];
		int msglen;
		if (Count <= 78)		// for now format the line to 80 characters (accounting for trailing \n\0)
 800145c:	e0bffa17 	ldw	r2,-24(fp)
 8001460:	108013c8 	cmpgei	r2,r2,79
 8001464:	1000031e 	bne	r2,zero,8001474 <ZEDF9T+0x1bc>
			msglen = Count;
 8001468:	e0bffa17 	ldw	r2,-24(fp)
 800146c:	e0bfff15 	stw	r2,-4(fp)
 8001470:	00000206 	br	800147c <ZEDF9T+0x1c4>
		else
			msglen = 78;
 8001474:	00801384 	movi	r2,78
 8001478:	e0bfff15 	stw	r2,-4(fp)

		status = alt_avalon_i2c_master_rx(i2c_dev, msgbuf, msglen, ALT_AVALON_I2C_NO_INTERRUPTS);
 800147c:	e0ffff17 	ldw	r3,-4(fp)
 8001480:	e0bfda44 	addi	r2,fp,-151
 8001484:	000f883a 	mov	r7,zero
 8001488:	180d883a 	mov	r6,r3
 800148c:	100b883a 	mov	r5,r2
 8001490:	e13ffd17 	ldw	r4,-12(fp)
 8001494:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001498:	e0bffb15 	stw	r2,-20(fp)

		if (status != 0)
 800149c:	e0bffb17 	ldw	r2,-20(fp)
 80014a0:	10000626 	beq	r2,zero,80014bc <ZEDF9T+0x204>
		{
			printf("ZEDF9T I2C message read error, status = %04li\n", status);
 80014a4:	e17ffb17 	ldw	r5,-20(fp)
 80014a8:	01020174 	movhi	r4,2053
 80014ac:	213aa204 	addi	r4,r4,-5496
 80014b0:	8003b840 	call	8003b84 <printf>
			return -1;		// error - return DE_LH NAK
 80014b4:	00bfffc4 	movi	r2,-1
 80014b8:	00003a06 	br	80015a4 <ZEDF9T+0x2ec>
		}

		sprintf(resultmessage, "RR 0x%04lx 0x%04lx    %04x  ", cmds->module, cmds->interface, Count);
 80014bc:	e0bfd917 	ldw	r2,-156(fp)
 80014c0:	10c00617 	ldw	r3,24(r2)
 80014c4:	e0bfd917 	ldw	r2,-156(fp)
 80014c8:	11000717 	ldw	r4,28(r2)
 80014cc:	e0bffa17 	ldw	r2,-24(fp)
 80014d0:	d8800015 	stw	r2,0(sp)
 80014d4:	200f883a 	mov	r7,r4
 80014d8:	180d883a 	mov	r6,r3
 80014dc:	01420174 	movhi	r5,2053
 80014e0:	297aae04 	addi	r5,r5,-5448
 80014e4:	e13fd817 	ldw	r4,-160(fp)
 80014e8:	8003d0c0 	call	8003d0c <sprintf>

		// now append the message to the response
		int position = strlen(resultmessage);
 80014ec:	e13fd817 	ldw	r4,-160(fp)
 80014f0:	80044880 	call	8004488 <strlen>
 80014f4:	e0bff915 	stw	r2,-28(fp)

		int i;
		for (i=0; i<msglen; i++)
 80014f8:	e03ffe15 	stw	zero,-8(fp)
 80014fc:	00001406 	br	8001550 <ZEDF9T+0x298>
		{
			resultmessage[position+i] = msgbuf[i];		// hopefully the message is ASCII or something
 8001500:	e0bffe17 	ldw	r2,-8(fp)
 8001504:	e085883a 	add	r2,fp,r2
 8001508:	113fda43 	ldbu	r4,-151(r2)
 800150c:	e0fff917 	ldw	r3,-28(fp)
 8001510:	e0bffe17 	ldw	r2,-8(fp)
 8001514:	1885883a 	add	r2,r3,r2
 8001518:	1007883a 	mov	r3,r2
 800151c:	e0bfd817 	ldw	r2,-160(fp)
 8001520:	10c5883a 	add	r2,r2,r3
 8001524:	2007883a 	mov	r3,r4
 8001528:	10c00005 	stb	r3,0(r2)
			if (msgbuf[i] == 0xff)
 800152c:	e0bffe17 	ldw	r2,-8(fp)
 8001530:	e085883a 	add	r2,fp,r2
 8001534:	10bfda43 	ldbu	r2,-151(r2)
 8001538:	10803fcc 	andi	r2,r2,255
 800153c:	10803fd8 	cmpnei	r2,r2,255
 8001540:	10000726 	beq	r2,zero,8001560 <ZEDF9T+0x2a8>
		for (i=0; i<msglen; i++)
 8001544:	e0bffe17 	ldw	r2,-8(fp)
 8001548:	10800044 	addi	r2,r2,1
 800154c:	e0bffe15 	stw	r2,-8(fp)
 8001550:	e0fffe17 	ldw	r3,-8(fp)
 8001554:	e0bfff17 	ldw	r2,-4(fp)
 8001558:	18bfe916 	blt	r3,r2,8001500 <ZEDF9T+0x248>
 800155c:	00000106 	br	8001564 <ZEDF9T+0x2ac>
					break;
 8001560:	0001883a 	nop
		}
		resultmessage[position+i+1] = '\n';
 8001564:	e0fff917 	ldw	r3,-28(fp)
 8001568:	e0bffe17 	ldw	r2,-8(fp)
 800156c:	1885883a 	add	r2,r3,r2
 8001570:	10800044 	addi	r2,r2,1
 8001574:	e0ffd817 	ldw	r3,-160(fp)
 8001578:	1885883a 	add	r2,r3,r2
 800157c:	00c00284 	movi	r3,10
 8001580:	10c00005 	stb	r3,0(r2)
		resultmessage[position+i+2] = '\0';
 8001584:	e0fff917 	ldw	r3,-28(fp)
 8001588:	e0bffe17 	ldw	r2,-8(fp)
 800158c:	1885883a 	add	r2,r3,r2
 8001590:	10800084 	addi	r2,r2,2
 8001594:	e0ffd817 	ldw	r3,-160(fp)
 8001598:	1885883a 	add	r2,r3,r2
 800159c:	10000005 	stb	zero,0(r2)

		return 1;
 80015a0:	00800044 	movi	r2,1
	}

	return -1;	// error
}
 80015a4:	e037883a 	mov	sp,fp
 80015a8:	dfc00117 	ldw	ra,4(sp)
 80015ac:	df000017 	ldw	fp,0(sp)
 80015b0:	dec00204 	addi	sp,sp,8
 80015b4:	f800283a 	ret

080015b8 <AD9648>:
int AD9648(struct PARSEDCMD *cmds, char resultmessage[], int itfcindex) 		// Handler for ADC AD9648 SPI interface
{
 80015b8:	defffc04 	addi	sp,sp,-16
 80015bc:	df000315 	stw	fp,12(sp)
 80015c0:	df000304 	addi	fp,sp,12
 80015c4:	e13fff15 	stw	r4,-4(fp)
 80015c8:	e17ffe15 	stw	r5,-8(fp)
 80015cc:	e1bffd15 	stw	r6,-12(fp)
	return -3;	// unimplemented
 80015d0:	00bfff44 	movi	r2,-3
}
 80015d4:	e037883a 	mov	sp,fp
 80015d8:	df000017 	ldw	fp,0(sp)
 80015dc:	dec00104 	addi	sp,sp,4
 80015e0:	f800283a 	ret

080015e4 <ATECC608>:

int ATECC608(struct PARSEDCMD *cmds, char resultmessage[], int itfcindex)
{
 80015e4:	deffdc04 	addi	sp,sp,-144
 80015e8:	dfc02315 	stw	ra,140(sp)
 80015ec:	df002215 	stw	fp,136(sp)
 80015f0:	df002204 	addi	fp,sp,136
 80015f4:	e13fe915 	stw	r4,-92(fp)
 80015f8:	e17fe815 	stw	r5,-96(fp)
 80015fc:	e1bfe715 	stw	r6,-100(fp)

	ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
//	ALT_AVALON_I2C_STATUS_CODE status;
	alt_32 status;						// Altera defines this as unsigned, but then uses it as signed

	i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 8001600:	e0bfe717 	ldw	r2,-100(fp)
 8001604:	10800a24 	muli	r2,r2,40
 8001608:	10c00304 	addi	r3,r2,12
 800160c:	00820174 	movhi	r2,2053
 8001610:	109f3204 	addi	r2,r2,31944
 8001614:	1885883a 	add	r2,r3,r2
 8001618:	1009883a 	mov	r4,r2
 800161c:	801cfd80 	call	801cfd8 <alt_avalon_i2c_open>
 8001620:	e0bffb15 	stw	r2,-20(fp)

	if (NULL==i2c_dev)
 8001624:	e0bffb17 	ldw	r2,-20(fp)
 8001628:	10000c1e 	bne	r2,zero,800165c <ATECC608+0x78>
	{
		printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 800162c:	e0bfe717 	ldw	r2,-100(fp)
 8001630:	10800a24 	muli	r2,r2,40
 8001634:	10c00304 	addi	r3,r2,12
 8001638:	00820174 	movhi	r2,2053
 800163c:	109f3204 	addi	r2,r2,31944
 8001640:	1885883a 	add	r2,r3,r2
 8001644:	100b883a 	mov	r5,r2
 8001648:	01020174 	movhi	r4,2053
 800164c:	213a7104 	addi	r4,r4,-5692
 8001650:	8003b840 	call	8003b84 <printf>
		return -1;
 8001654:	00bfffc4 	movi	r2,-1
 8001658:	0000f406 	br	8001a2c <ATECC608+0x448>
	}

   // ATECC608 default slave address is 0xC0 (0xC1 is the corresponding read addr)
	alt_u32 slave_addr = 0x60;  	  // Right shifted by one bit
 800165c:	00801804 	movi	r2,96
 8001660:	e0bffa15 	stw	r2,-24(fp)

	alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 8001664:	e17ffa17 	ldw	r5,-24(fp)
 8001668:	e13ffb17 	ldw	r4,-20(fp)
 800166c:	801d7b40 	call	801d7b4 <alt_avalon_i2c_master_target_set>

	if (cmds->cmd[1] == 'R')
 8001670:	e0bfe917 	ldw	r2,-92(fp)
 8001674:	10800043 	ldbu	r2,1(r2)
 8001678:	10803fcc 	andi	r2,r2,255
 800167c:	1080201c 	xori	r2,r2,128
 8001680:	10bfe004 	addi	r2,r2,-128
 8001684:	10801498 	cmpnei	r2,r2,82
 8001688:	1000de1e 	bne	r2,zero,8001a04 <ATECC608+0x420>
	{

	// wakeup the device from sleep

	alt_u8 txdata = 0x00;
 800168c:	e03ff7c5 	stb	zero,-33(fp)
	alt_u32 count = 0x01;
 8001690:	00800044 	movi	r2,1
 8001694:	e0bff915 	stw	r2,-28(fp)
	alt_u8 wakestatus[4];


	status = alt_avalon_i2c_master_tx(i2c_dev, &txdata, count, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001698:	e0bff7c4 	addi	r2,fp,-33
 800169c:	000f883a 	mov	r7,zero
 80016a0:	e1bff917 	ldw	r6,-28(fp)
 80016a4:	100b883a 	mov	r5,r2
 80016a8:	e13ffb17 	ldw	r4,-20(fp)
 80016ac:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80016b0:	e0bfff15 	stw	r2,-4(fp)

	// we expect the call to fail, but wake up the ATECC device. Other errors are not OK.

	if (status == ALT_AVALON_I2C_NACK_ERR)
 80016b4:	e0bfff17 	ldw	r2,-4(fp)
 80016b8:	10bffed8 	cmpnei	r2,r2,-5
 80016bc:	1000041e 	bne	r2,zero,80016d0 <ATECC608+0xec>
	{
		printf("Received NACK error from ATECC608A upon wakeup. That's OK\n");
 80016c0:	01020174 	movhi	r4,2053
 80016c4:	213ab604 	addi	r4,r4,-5416
 80016c8:	8003ca80 	call	8003ca8 <puts>
 80016cc:	00000806 	br	80016f0 <ATECC608+0x10c>
	}
	else if (status != ALT_AVALON_I2C_SUCCESS)
 80016d0:	e0bfff17 	ldw	r2,-4(fp)
 80016d4:	10000626 	beq	r2,zero,80016f0 <ATECC608+0x10c>
	{
		printf("i2c_master_tx: ATECC608A wake-up attempt error = %ld\n", status);
 80016d8:	e17fff17 	ldw	r5,-4(fp)
 80016dc:	01020174 	movhi	r4,2053
 80016e0:	213ac504 	addi	r4,r4,-5356
 80016e4:	8003b840 	call	8003b84 <printf>
		return -1; //FAIL
 80016e8:	00bfffc4 	movi	r2,-1
 80016ec:	0000cf06 	br	8001a2c <ATECC608+0x448>
	}

	// Read the status code from the device. After wakeup it should be 0x11 (608 data sheet page 57).
	// The response should be 4 bytes: count, packet, 2-bytes CRC

	status = alt_avalon_i2c_master_rx(i2c_dev, wakestatus, 4, ALT_AVALON_I2C_NO_INTERRUPTS);
 80016f0:	e0bff6c4 	addi	r2,fp,-37
 80016f4:	000f883a 	mov	r7,zero
 80016f8:	01800104 	movi	r6,4
 80016fc:	100b883a 	mov	r5,r2
 8001700:	e13ffb17 	ldw	r4,-20(fp)
 8001704:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001708:	e0bfff15 	stw	r2,-4(fp)

	if (wakestatus[1] != 0x11)
 800170c:	e0bff703 	ldbu	r2,-36(fp)
 8001710:	10803fcc 	andi	r2,r2,255
 8001714:	10800460 	cmpeqi	r2,r2,17
 8001718:	1000051e 	bne	r2,zero,8001730 <ATECC608+0x14c>
	{
		printf("ATECC608 did not correctly wake up\n");
 800171c:	01020174 	movhi	r4,2053
 8001720:	213ad304 	addi	r4,r4,-5300
 8001724:	8003ca80 	call	8003ca8 <puts>
		return -1;
 8001728:	00bfffc4 	movi	r2,-1
 800172c:	0000bf06 	br	8001a2c <ATECC608+0x448>
	// Each requires writing a command + CRC to the device in the correct zone. Each enables
	// a 4-byte read. All 3 {command+CRC} have been computed externally and are declared
	// as constants in this code.

	alt_u8 first[8], second[8], third[8];  // serial number responses
	alt_u32 rxcount = 8;		// each response is 7 bytes: count 4 digits CRC CRC. Leave room for one extra
 8001730:	00800204 	movi	r2,8
 8001734:	e0bff815 	stw	r2,-32(fp)

	alt_u8 cmd1[8] = { 0x03, 0x07, 0x02, 0x00, 0x00, 0x00, 0x1E, 0x2D } ;  // first four bytes of ID
 8001738:	008000c4 	movi	r2,3
 800173c:	e0bfeec5 	stb	r2,-69(fp)
 8001740:	008001c4 	movi	r2,7
 8001744:	e0bfef05 	stb	r2,-68(fp)
 8001748:	00800084 	movi	r2,2
 800174c:	e0bfef45 	stb	r2,-67(fp)
 8001750:	e03fef85 	stb	zero,-66(fp)
 8001754:	e03fefc5 	stb	zero,-65(fp)
 8001758:	e03ff005 	stb	zero,-64(fp)
 800175c:	00800784 	movi	r2,30
 8001760:	e0bff045 	stb	r2,-63(fp)
 8001764:	00800b44 	movi	r2,45
 8001768:	e0bff085 	stb	r2,-62(fp)
	alt_u8 cmd2[8] = { 0x03, 0x07, 0x02, 0x00, 0x02, 0x00, 0x18, 0xAD } ;  // second four bytes of ID
 800176c:	008000c4 	movi	r2,3
 8001770:	e0bfecc5 	stb	r2,-77(fp)
 8001774:	008001c4 	movi	r2,7
 8001778:	e0bfed05 	stb	r2,-76(fp)
 800177c:	00800084 	movi	r2,2
 8001780:	e0bfed45 	stb	r2,-75(fp)
 8001784:	e03fed85 	stb	zero,-74(fp)
 8001788:	00800084 	movi	r2,2
 800178c:	e0bfedc5 	stb	r2,-73(fp)
 8001790:	e03fee05 	stb	zero,-72(fp)
 8001794:	00800604 	movi	r2,24
 8001798:	e0bfee45 	stb	r2,-71(fp)
 800179c:	00bfeb44 	movi	r2,-83
 80017a0:	e0bfee85 	stb	r2,-70(fp)
	alt_u8 cmd3[8] = { 0x03, 0x07, 0x02, 0x00, 0x03, 0x00, 0x11, 0x2D } ;  // last byte of ID + 3 don't care bytes
 80017a4:	008000c4 	movi	r2,3
 80017a8:	e0bfeac5 	stb	r2,-85(fp)
 80017ac:	008001c4 	movi	r2,7
 80017b0:	e0bfeb05 	stb	r2,-84(fp)
 80017b4:	00800084 	movi	r2,2
 80017b8:	e0bfeb45 	stb	r2,-83(fp)
 80017bc:	e03feb85 	stb	zero,-82(fp)
 80017c0:	008000c4 	movi	r2,3
 80017c4:	e0bfebc5 	stb	r2,-81(fp)
 80017c8:	e03fec05 	stb	zero,-80(fp)
 80017cc:	00800444 	movi	r2,17
 80017d0:	e0bfec45 	stb	r2,-79(fp)
 80017d4:	00800b44 	movi	r2,45
 80017d8:	e0bfec85 	stb	r2,-78(fp)

	// If the corresponding read is all ones, then the device was not ready and the
	// read needs to be retried.

	// Read the first four bytes of the serial number
	status = alt_avalon_i2c_master_tx(i2c_dev, cmd1, 8, ALT_AVALON_I2C_NO_INTERRUPTS);
 80017dc:	e0bfeec4 	addi	r2,fp,-69
 80017e0:	000f883a 	mov	r7,zero
 80017e4:	01800204 	movi	r6,8
 80017e8:	100b883a 	mov	r5,r2
 80017ec:	e13ffb17 	ldw	r4,-20(fp)
 80017f0:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80017f4:	e0bfff15 	stw	r2,-4(fp)


	for (int i=0; i<10; i++)
 80017f8:	e03ffe15 	stw	zero,-8(fp)
 80017fc:	00000c06 	br	8001830 <ATECC608+0x24c>
	{
		status = alt_avalon_i2c_master_rx(i2c_dev, first, rxcount, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001800:	e0bff4c4 	addi	r2,fp,-45
 8001804:	000f883a 	mov	r7,zero
 8001808:	e1bff817 	ldw	r6,-32(fp)
 800180c:	100b883a 	mov	r5,r2
 8001810:	e13ffb17 	ldw	r4,-20(fp)
 8001814:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001818:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0)	// Successful read
 800181c:	e0bfff17 	ldw	r2,-4(fp)
 8001820:	10000726 	beq	r2,zero,8001840 <ATECC608+0x25c>
	for (int i=0; i<10; i++)
 8001824:	e0bffe17 	ldw	r2,-8(fp)
 8001828:	10800044 	addi	r2,r2,1
 800182c:	e0bffe15 	stw	r2,-8(fp)
 8001830:	e0bffe17 	ldw	r2,-8(fp)
 8001834:	10800290 	cmplti	r2,r2,10
 8001838:	103ff11e 	bne	r2,zero,8001800 <ATECC608+0x21c>
 800183c:	00000106 	br	8001844 <ATECC608+0x260>
			break;
 8001840:	0001883a 	nop
		if (status == ALT_AVALON_I2C_NACK_ERR)	// device busy, try again
			continue;
	}
	if (status < 0)
 8001844:	e0bfff17 	ldw	r2,-4(fp)
 8001848:	1000050e 	bge	r2,zero,8001860 <ATECC608+0x27c>
	{
		printf("Failed to read ATECC608 - first 4 bytes of S/N.\n");
 800184c:	01020174 	movhi	r4,2053
 8001850:	213adc04 	addi	r4,r4,-5264
 8001854:	8003ca80 	call	8003ca8 <puts>
		return -1;
 8001858:	00bfffc4 	movi	r2,-1
 800185c:	00007306 	br	8001a2c <ATECC608+0x448>
	}


	// Read the second four bytes of the serial number
	status = alt_avalon_i2c_master_tx(i2c_dev, cmd2, 8, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001860:	e0bfecc4 	addi	r2,fp,-77
 8001864:	000f883a 	mov	r7,zero
 8001868:	01800204 	movi	r6,8
 800186c:	100b883a 	mov	r5,r2
 8001870:	e13ffb17 	ldw	r4,-20(fp)
 8001874:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001878:	e0bfff15 	stw	r2,-4(fp)

	for (int i=0; i<10; i++)
 800187c:	e03ffd15 	stw	zero,-12(fp)
 8001880:	00000c06 	br	80018b4 <ATECC608+0x2d0>
	{
		status = alt_avalon_i2c_master_rx(i2c_dev, second, rxcount, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001884:	e0bff2c4 	addi	r2,fp,-53
 8001888:	000f883a 	mov	r7,zero
 800188c:	e1bff817 	ldw	r6,-32(fp)
 8001890:	100b883a 	mov	r5,r2
 8001894:	e13ffb17 	ldw	r4,-20(fp)
 8001898:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 800189c:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0)	// Successful read
 80018a0:	e0bfff17 	ldw	r2,-4(fp)
 80018a4:	10000726 	beq	r2,zero,80018c4 <ATECC608+0x2e0>
	for (int i=0; i<10; i++)
 80018a8:	e0bffd17 	ldw	r2,-12(fp)
 80018ac:	10800044 	addi	r2,r2,1
 80018b0:	e0bffd15 	stw	r2,-12(fp)
 80018b4:	e0bffd17 	ldw	r2,-12(fp)
 80018b8:	10800290 	cmplti	r2,r2,10
 80018bc:	103ff11e 	bne	r2,zero,8001884 <ATECC608+0x2a0>
 80018c0:	00000106 	br	80018c8 <ATECC608+0x2e4>
			break;
 80018c4:	0001883a 	nop
		if (status == ALT_AVALON_I2C_NACK_ERR)	// device busy, try again
			continue;
	}
	if (status < 0)
 80018c8:	e0bfff17 	ldw	r2,-4(fp)
 80018cc:	1000050e 	bge	r2,zero,80018e4 <ATECC608+0x300>
	{
		printf("Failed to read ATECC608 - second 4 bytes of S/N.\n");
 80018d0:	01020174 	movhi	r4,2053
 80018d4:	213ae804 	addi	r4,r4,-5216
 80018d8:	8003ca80 	call	8003ca8 <puts>
		return -1;
 80018dc:	00bfffc4 	movi	r2,-1
 80018e0:	00005206 	br	8001a2c <ATECC608+0x448>
	}


	// Read the third four bytes of the serial number
	status = alt_avalon_i2c_master_tx(i2c_dev, cmd3, 8, ALT_AVALON_I2C_NO_INTERRUPTS);
 80018e4:	e0bfeac4 	addi	r2,fp,-85
 80018e8:	000f883a 	mov	r7,zero
 80018ec:	01800204 	movi	r6,8
 80018f0:	100b883a 	mov	r5,r2
 80018f4:	e13ffb17 	ldw	r4,-20(fp)
 80018f8:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 80018fc:	e0bfff15 	stw	r2,-4(fp)

	for (int i=0; i<10; i++)
 8001900:	e03ffc15 	stw	zero,-16(fp)
 8001904:	00000c06 	br	8001938 <ATECC608+0x354>
	{
		status = alt_avalon_i2c_master_rx(i2c_dev, third, rxcount, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001908:	e0bff0c4 	addi	r2,fp,-61
 800190c:	000f883a 	mov	r7,zero
 8001910:	e1bff817 	ldw	r6,-32(fp)
 8001914:	100b883a 	mov	r5,r2
 8001918:	e13ffb17 	ldw	r4,-20(fp)
 800191c:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001920:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0)	// Successful read
 8001924:	e0bfff17 	ldw	r2,-4(fp)
 8001928:	10000726 	beq	r2,zero,8001948 <ATECC608+0x364>
	for (int i=0; i<10; i++)
 800192c:	e0bffc17 	ldw	r2,-16(fp)
 8001930:	10800044 	addi	r2,r2,1
 8001934:	e0bffc15 	stw	r2,-16(fp)
 8001938:	e0bffc17 	ldw	r2,-16(fp)
 800193c:	10800290 	cmplti	r2,r2,10
 8001940:	103ff11e 	bne	r2,zero,8001908 <ATECC608+0x324>
 8001944:	00000106 	br	800194c <ATECC608+0x368>
			break;
 8001948:	0001883a 	nop
		if (status == ALT_AVALON_I2C_NACK_ERR)	// device busy, try again
			continue;
	}
	if (status < 0)
 800194c:	e0bfff17 	ldw	r2,-4(fp)
 8001950:	1000050e 	bge	r2,zero,8001968 <ATECC608+0x384>
	{
		printf("Failed to read ATECC608 - third four bytes of S/N.\n");
 8001954:	01020174 	movhi	r4,2053
 8001958:	213af504 	addi	r4,r4,-5164
 800195c:	8003ca80 	call	8003ca8 <puts>
		return -1;
 8001960:	00bfffc4 	movi	r2,-1
 8001964:	00003106 	br	8001a2c <ATECC608+0x448>
	}

	// The response to each request is 7 bytes: count(=7) 4 bytes of data crc-16 0xff(=no data to read since count was only 7)
	// The last one, the data is formatted: one byte of S/N, 3 bytes of other unrelated data

	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 8001968:	e0bfe917 	ldw	r2,-92(fp)
 800196c:	12c00617 	ldw	r11,24(r2)
 8001970:	e0bfe917 	ldw	r2,-92(fp)
 8001974:	13000717 	ldw	r12,28(r2)
			cmds->module, cmds->interface,
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 8001978:	e0bff503 	ldbu	r2,-44(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 800197c:	10803fcc 	andi	r2,r2,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 8001980:	e0fff543 	ldbu	r3,-43(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 8001984:	18c03fcc 	andi	r3,r3,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 8001988:	e13ff583 	ldbu	r4,-42(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 800198c:	21003fcc 	andi	r4,r4,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 8001990:	e17ff5c3 	ldbu	r5,-41(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 8001994:	29403fcc 	andi	r5,r5,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 8001998:	e1bff303 	ldbu	r6,-52(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 800199c:	31803fcc 	andi	r6,r6,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 80019a0:	e1fff343 	ldbu	r7,-51(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 80019a4:	39c03fcc 	andi	r7,r7,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 80019a8:	e23ff383 	ldbu	r8,-50(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 80019ac:	42003fcc 	andi	r8,r8,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 80019b0:	e27ff3c3 	ldbu	r9,-49(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 80019b4:	4a403fcc 	andi	r9,r9,255
			first[1], first[2], first[3], first[4], second[1], second[2], second[3], second[4], third[1]);
 80019b8:	e2bff103 	ldbu	r10,-60(fp)
	sprintf(resultmessage, "RR 0x%04lx 0x%04lx    0x%02x%02x %02x%02x %02x%02x %02x%02x %02x\n",
 80019bc:	52803fcc 	andi	r10,r10,255
 80019c0:	da800815 	stw	r10,32(sp)
 80019c4:	da400715 	stw	r9,28(sp)
 80019c8:	da000615 	stw	r8,24(sp)
 80019cc:	d9c00515 	stw	r7,20(sp)
 80019d0:	d9800415 	stw	r6,16(sp)
 80019d4:	d9400315 	stw	r5,12(sp)
 80019d8:	d9000215 	stw	r4,8(sp)
 80019dc:	d8c00115 	stw	r3,4(sp)
 80019e0:	d8800015 	stw	r2,0(sp)
 80019e4:	600f883a 	mov	r7,r12
 80019e8:	580d883a 	mov	r6,r11
 80019ec:	01420174 	movhi	r5,2053
 80019f0:	297b0204 	addi	r5,r5,-5112
 80019f4:	e13fe817 	ldw	r4,-96(fp)
 80019f8:	8003d0c0 	call	8003d0c <sprintf>


	return 1;		// OK and return the read response string (RR ....)
 80019fc:	00800044 	movi	r2,1
 8001a00:	00000a06 	br	8001a2c <ATECC608+0x448>
	}
	if (cmds->cmd[1] == 'W')
 8001a04:	e0bfe917 	ldw	r2,-92(fp)
 8001a08:	10800043 	ldbu	r2,1(r2)
 8001a0c:	10803fcc 	andi	r2,r2,255
 8001a10:	1080201c 	xori	r2,r2,128
 8001a14:	10bfe004 	addi	r2,r2,-128
 8001a18:	108015d8 	cmpnei	r2,r2,87
 8001a1c:	1000021e 	bne	r2,zero,8001a28 <ATECC608+0x444>
	{

		return -3;	// unimplemented - nothing to write to ID Prom
 8001a20:	00bfff44 	movi	r2,-3
 8001a24:	00000106 	br	8001a2c <ATECC608+0x448>
	}

	return -1;		// unknown command
 8001a28:	00bfffc4 	movi	r2,-1
}
 8001a2c:	e037883a 	mov	sp,fp
 8001a30:	dfc00117 	ldw	ra,4(sp)
 8001a34:	df000017 	ldw	fp,0(sp)
 8001a38:	dec00204 	addi	sp,sp,8
 8001a3c:	f800283a 	ret

08001a40 <PCF8574>:


int PCF8574(struct PARSEDCMD *cmds, char resultmessage[], int itfcindex)
{
 8001a40:	defff504 	addi	sp,sp,-44
 8001a44:	dfc00a15 	stw	ra,40(sp)
 8001a48:	df000915 	stw	fp,36(sp)
 8001a4c:	df000904 	addi	fp,sp,36
 8001a50:	e13ffa15 	stw	r4,-24(fp)
 8001a54:	e17ff915 	stw	r5,-28(fp)
 8001a58:	e1bff815 	stw	r6,-32(fp)

	ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
//	ALT_AVALON_I2C_STATUS_CODE status;
	alt_32 status;

	i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 8001a5c:	e0bff817 	ldw	r2,-32(fp)
 8001a60:	10800a24 	muli	r2,r2,40
 8001a64:	10c00304 	addi	r3,r2,12
 8001a68:	00820174 	movhi	r2,2053
 8001a6c:	109f3204 	addi	r2,r2,31944
 8001a70:	1885883a 	add	r2,r3,r2
 8001a74:	1009883a 	mov	r4,r2
 8001a78:	801cfd80 	call	801cfd8 <alt_avalon_i2c_open>
 8001a7c:	e0bffe15 	stw	r2,-8(fp)

	if (NULL==i2c_dev)
 8001a80:	e0bffe17 	ldw	r2,-8(fp)
 8001a84:	10000c1e 	bne	r2,zero,8001ab8 <PCF8574+0x78>
	{
		printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 8001a88:	e0bff817 	ldw	r2,-32(fp)
 8001a8c:	10800a24 	muli	r2,r2,40
 8001a90:	10c00304 	addi	r3,r2,12
 8001a94:	00820174 	movhi	r2,2053
 8001a98:	109f3204 	addi	r2,r2,31944
 8001a9c:	1885883a 	add	r2,r3,r2
 8001aa0:	100b883a 	mov	r5,r2
 8001aa4:	01020174 	movhi	r4,2053
 8001aa8:	213a7104 	addi	r4,r4,-5692
 8001aac:	8003b840 	call	8003b84 <printf>
		return -1;
 8001ab0:	00bfffc4 	movi	r2,-1
 8001ab4:	00005506 	br	8001c0c <PCF8574+0x1cc>
	}

	// PCF8574 Write address is 0x70, 0x71 is the corresponding read addr.
	alt_u32 slave_addr = 0x38;  	  // PCF8574 address - the i2c driver left shifts then appends 0 for
 8001ab8:	00800e04 	movi	r2,56
 8001abc:	e0bffd15 	stw	r2,-12(fp)
									  // write or 1 for read translating this to 0x70 for write, 0x71 for read
	alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 8001ac0:	e17ffd17 	ldw	r5,-12(fp)
 8001ac4:	e13ffe17 	ldw	r4,-8(fp)
 8001ac8:	801d7b40 	call	801d7b4 <alt_avalon_i2c_master_target_set>


	if (cmds->cmd[1] == 'W')
 8001acc:	e0bffa17 	ldw	r2,-24(fp)
 8001ad0:	10800043 	ldbu	r2,1(r2)
 8001ad4:	10803fcc 	andi	r2,r2,255
 8001ad8:	1080201c 	xori	r2,r2,128
 8001adc:	10bfe004 	addi	r2,r2,-128
 8001ae0:	108015d8 	cmpnei	r2,r2,87
 8001ae4:	1000231e 	bne	r2,zero,8001b74 <PCF8574+0x134>
	{
		alt_u8 txdata = cmds->data;
 8001ae8:	e0bffa17 	ldw	r2,-24(fp)
 8001aec:	10800917 	ldw	r2,36(r2)
 8001af0:	e0bffbc5 	stb	r2,-17(fp)
		alt_u32 count = 0x01;				// num bytes to send
 8001af4:	00800044 	movi	r2,1
 8001af8:	e0bffc15 	stw	r2,-16(fp)
		// Receive Module. All data are ACTIVE LOW.
		// Bit7 = Red LED   		Bit6 = Green LED  		Bit5 = Ch2 20dB Atten  	Bit4 = Ch2 10 dB Atten
		// Bit3 = Ch2 Noise Enable 	Bit2 = Ch1 20 dB Atten  Bit1 = Ch1 10 dB Atten  Bit0 = Ch1 Noise Enable


		status = alt_avalon_i2c_master_tx(i2c_dev, &txdata, count, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001afc:	e0bffbc4 	addi	r2,fp,-17
 8001b00:	000f883a 	mov	r7,zero
 8001b04:	e1bffc17 	ldw	r6,-16(fp)
 8001b08:	100b883a 	mov	r5,r2
 8001b0c:	e13ffe17 	ldw	r4,-8(fp)
 8001b10:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001b14:	e0bfff15 	stw	r2,-4(fp)

		if (status == ALT_AVALON_I2C_NACK_ERR)		// retry the write
 8001b18:	e0bfff17 	ldw	r2,-4(fp)
 8001b1c:	10bffed8 	cmpnei	r2,r2,-5
 8001b20:	10000a1e 	bne	r2,zero,8001b4c <PCF8574+0x10c>
		{
			printf("Received NACK error from I2C device. Retry once\n");
 8001b24:	01020174 	movhi	r4,2053
 8001b28:	213b1304 	addi	r4,r4,-5044
 8001b2c:	8003ca80 	call	8003ca8 <puts>
			status = alt_avalon_i2c_master_tx(i2c_dev, &txdata, count, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001b30:	e0bffbc4 	addi	r2,fp,-17
 8001b34:	000f883a 	mov	r7,zero
 8001b38:	e1bffc17 	ldw	r6,-16(fp)
 8001b3c:	100b883a 	mov	r5,r2
 8001b40:	e13ffe17 	ldw	r4,-8(fp)
 8001b44:	801d9b40 	call	801d9b4 <alt_avalon_i2c_master_tx>
 8001b48:	e0bfff15 	stw	r2,-4(fp)
		}


		if (status != ALT_AVALON_I2C_SUCCESS)
 8001b4c:	e0bfff17 	ldw	r2,-4(fp)
 8001b50:	10000626 	beq	r2,zero,8001b6c <PCF8574+0x12c>
		{
			printf("i2c_master_tx: error = %ld\n", status);
 8001b54:	e17fff17 	ldw	r5,-4(fp)
 8001b58:	01020174 	movhi	r4,2053
 8001b5c:	213b1f04 	addi	r4,r4,-4996
 8001b60:	8003b840 	call	8003b84 <printf>
			return -1; //FAIL
 8001b64:	00bfffc4 	movi	r2,-1
 8001b68:	00002806 	br	8001c0c <PCF8574+0x1cc>
		}

		return 0;		// OK
 8001b6c:	0005883a 	mov	r2,zero
 8001b70:	00002606 	br	8001c0c <PCF8574+0x1cc>


	}
	if (cmds->cmd[1] == 'R')
 8001b74:	e0bffa17 	ldw	r2,-24(fp)
 8001b78:	10800043 	ldbu	r2,1(r2)
 8001b7c:	10803fcc 	andi	r2,r2,255
 8001b80:	1080201c 	xori	r2,r2,128
 8001b84:	10bfe004 	addi	r2,r2,-128
 8001b88:	10801498 	cmpnei	r2,r2,82
 8001b8c:	10001e1e 	bne	r2,zero,8001c08 <PCF8574+0x1c8>
	{
		alt_u8 rxdata;

		// retrieve one byte of data from the de3vice

		status = alt_avalon_i2c_master_rx(i2c_dev, &rxdata, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001b90:	e0bffb84 	addi	r2,fp,-18
 8001b94:	000f883a 	mov	r7,zero
 8001b98:	01800044 	movi	r6,1
 8001b9c:	100b883a 	mov	r5,r2
 8001ba0:	e13ffe17 	ldw	r4,-8(fp)
 8001ba4:	801da9c0 	call	801da9c <alt_avalon_i2c_master_rx>
 8001ba8:	e0bfff15 	stw	r2,-4(fp)

		if (status < 0)
 8001bac:	e0bfff17 	ldw	r2,-4(fp)
 8001bb0:	1000060e 	bge	r2,zero,8001bcc <PCF8574+0x18c>
		{
			printf("Received error from I2C device:   %ld\n", status);
 8001bb4:	e17fff17 	ldw	r5,-4(fp)
 8001bb8:	01020174 	movhi	r4,2053
 8001bbc:	213b2604 	addi	r4,r4,-4968
 8001bc0:	8003b840 	call	8003b84 <printf>
			return -1;
 8001bc4:	00bfffc4 	movi	r2,-1
 8001bc8:	00001006 	br	8001c0c <PCF8574+0x1cc>
		}
		sprintf(resultmessage, "RR 0x%04lx 0x%04lx   0x%02x\n", cmds->module, cmds->interface, rxdata);
 8001bcc:	e0bffa17 	ldw	r2,-24(fp)
 8001bd0:	10c00617 	ldw	r3,24(r2)
 8001bd4:	e0bffa17 	ldw	r2,-24(fp)
 8001bd8:	11000717 	ldw	r4,28(r2)
 8001bdc:	e0bffb83 	ldbu	r2,-18(fp)
 8001be0:	10803fcc 	andi	r2,r2,255
 8001be4:	d8800015 	stw	r2,0(sp)
 8001be8:	200f883a 	mov	r7,r4
 8001bec:	180d883a 	mov	r6,r3
 8001bf0:	01420174 	movhi	r5,2053
 8001bf4:	297b3004 	addi	r5,r5,-4928
 8001bf8:	e13ff917 	ldw	r4,-28(fp)
 8001bfc:	8003d0c0 	call	8003d0c <sprintf>
		return 1;
 8001c00:	00800044 	movi	r2,1
 8001c04:	00000106 	br	8001c0c <PCF8574+0x1cc>
	}

	return -1;		// unknown command type
 8001c08:	00bfffc4 	movi	r2,-1
}
 8001c0c:	e037883a 	mov	sp,fp
 8001c10:	dfc00117 	ldw	ra,4(sp)
 8001c14:	df000017 	ldw	fp,0(sp)
 8001c18:	dec00204 	addi	sp,sp,8
 8001c1c:	f800283a 	ret

08001c20 <ProvisioningModuleRegisterCommand>:


int ProvisioningModuleRegisterCommand(int index, unsigned char buffer [], char resultmessage[])
{
 8001c20:	deffe504 	addi	sp,sp,-108
 8001c24:	dfc01a15 	stw	ra,104(sp)
 8001c28:	df001915 	stw	fp,100(sp)
 8001c2c:	df001904 	addi	fp,sp,100
 8001c30:	e13fe915 	stw	r4,-92(fp)
 8001c34:	e17fe815 	stw	r5,-96(fp)
 8001c38:	e1bfe715 	stw	r6,-100(fp)
	// Module Read:  MR 0xssss 0xiiii 0xaaaa
	// Module Write: MW 0xssss 0xiiii 0xaaaa 0xZZZZ

	struct PARSEDCMD provcmd;		// hold the parsed provisioning command

	char * cmd = strtok((char *)buffer, " ");
 8001c3c:	01420174 	movhi	r5,2053
 8001c40:	297b3804 	addi	r5,r5,-4896
 8001c44:	e13fe817 	ldw	r4,-96(fp)
 8001c48:	80045200 	call	8004520 <strtok>
 8001c4c:	e0bffe15 	stw	r2,-8(fp)
	char * module = strtok(NULL, " ");
 8001c50:	01420174 	movhi	r5,2053
 8001c54:	297b3804 	addi	r5,r5,-4896
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	80045200 	call	8004520 <strtok>
 8001c60:	e0bffd15 	stw	r2,-12(fp)
	char * slot = strtok(NULL, " ");
 8001c64:	01420174 	movhi	r5,2053
 8001c68:	297b3804 	addi	r5,r5,-4896
 8001c6c:	0009883a 	mov	r4,zero
 8001c70:	80045200 	call	8004520 <strtok>
 8001c74:	e0bffc15 	stw	r2,-16(fp)
	char * regaddr = strtok(NULL, " ");
 8001c78:	01420174 	movhi	r5,2053
 8001c7c:	297b3804 	addi	r5,r5,-4896
 8001c80:	0009883a 	mov	r4,zero
 8001c84:	80045200 	call	8004520 <strtok>
 8001c88:	e0bffb15 	stw	r2,-20(fp)
	char * regdata = strtok(NULL, " ");
 8001c8c:	01420174 	movhi	r5,2053
 8001c90:	297b3804 	addi	r5,r5,-4896
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	80045200 	call	8004520 <strtok>
 8001c9c:	e0bffa15 	stw	r2,-24(fp)

	unsigned long moduleint, itfcint, regaddrint, regdataint;

	char * ptr;		// dummy used to make strtoul work

	moduleint = strtoul(module, &ptr, 0);
 8001ca0:	e0bfea04 	addi	r2,fp,-88
 8001ca4:	000d883a 	mov	r6,zero
 8001ca8:	100b883a 	mov	r5,r2
 8001cac:	e13ffd17 	ldw	r4,-12(fp)
 8001cb0:	80048480 	call	8004848 <strtoul>
 8001cb4:	e0bff915 	stw	r2,-28(fp)
	itfcint = strtoul(slot, &ptr, 0);
 8001cb8:	e0bfea04 	addi	r2,fp,-88
 8001cbc:	000d883a 	mov	r6,zero
 8001cc0:	100b883a 	mov	r5,r2
 8001cc4:	e13ffc17 	ldw	r4,-16(fp)
 8001cc8:	80048480 	call	8004848 <strtoul>
 8001ccc:	e0bff815 	stw	r2,-32(fp)
	regaddrint = strtoul(regaddr, &ptr, 0);
 8001cd0:	e0bfea04 	addi	r2,fp,-88
 8001cd4:	000d883a 	mov	r6,zero
 8001cd8:	100b883a 	mov	r5,r2
 8001cdc:	e13ffb17 	ldw	r4,-20(fp)
 8001ce0:	80048480 	call	8004848 <strtoul>
 8001ce4:	e0bff715 	stw	r2,-36(fp)
	if (regdata != NULL)
 8001ce8:	e0bffa17 	ldw	r2,-24(fp)
 8001cec:	10000726 	beq	r2,zero,8001d0c <ProvisioningModuleRegisterCommand+0xec>
		regdataint = strtoul(regdata, &ptr, 0);
 8001cf0:	e0bfea04 	addi	r2,fp,-88
 8001cf4:	000d883a 	mov	r6,zero
 8001cf8:	100b883a 	mov	r5,r2
 8001cfc:	e13ffa17 	ldw	r4,-24(fp)
 8001d00:	80048480 	call	8004848 <strtoul>
 8001d04:	e0bfff15 	stw	r2,-4(fp)
 8001d08:	00000106 	br	8001d10 <ProvisioningModuleRegisterCommand+0xf0>
	else
		regdataint = 0;
 8001d0c:	e03fff15 	stw	zero,-4(fp)

	// copy parsed command into struct
	strcpy(provcmd.cmd, cmd);
 8001d10:	e0bfeb04 	addi	r2,fp,-84
 8001d14:	e17ffe17 	ldw	r5,-8(fp)
 8001d18:	1009883a 	mov	r4,r2
 8001d1c:	8003d700 	call	8003d70 <strcpy>
	provcmd.module = moduleint;
 8001d20:	e0bff917 	ldw	r2,-28(fp)
 8001d24:	e0bff115 	stw	r2,-60(fp)
	provcmd.interface = itfcint;
 8001d28:	e0bff817 	ldw	r2,-32(fp)
 8001d2c:	e0bff215 	stw	r2,-56(fp)
	provcmd.data = regdataint;
 8001d30:	e0bfff17 	ldw	r2,-4(fp)
 8001d34:	e0bff415 	stw	r2,-48(fp)
	provcmd.address = regaddrint;
 8001d38:	e0bff717 	ldw	r2,-36(fp)
 8001d3c:	e0bff315 	stw	r2,-52(fp)


	int itfcindex = FindItfcIndex(moduleint, itfcint);	// Find index of requested interface in map
 8001d40:	e0bff917 	ldw	r2,-28(fp)
 8001d44:	e0fff817 	ldw	r3,-32(fp)
 8001d48:	180b883a 	mov	r5,r3
 8001d4c:	1009883a 	mov	r4,r2
 8001d50:	80020900 	call	8002090 <FindItfcIndex>
 8001d54:	e0bff615 	stw	r2,-40(fp)

	if (itfcindex == -1)	// Not found
 8001d58:	e0bff617 	ldw	r2,-40(fp)
 8001d5c:	10bfffd8 	cmpnei	r2,r2,-1
 8001d60:	1000021e 	bne	r2,zero,8001d6c <ProvisioningModuleRegisterCommand+0x14c>
		return -1;		// Unknown Module / Slot combination.  Send NAK.
 8001d64:	00bfffc4 	movi	r2,-1
 8001d68:	00000c06 	br	8001d9c <ProvisioningModuleRegisterCommand+0x17c>
	// Call the proper device handler. The handler returns:
	//		status < 0 for error, send NAK
	//		status == 0 for success, send AK
	//      status == +1 send AK then send response message defined by the handler back to the Local Host.

	int result = (*ItfcTable[itfcindex].handler)(&provcmd, resultmessage, itfcindex);
 8001d6c:	e0bff617 	ldw	r2,-40(fp)
 8001d70:	10c00a24 	muli	r3,r2,40
 8001d74:	00820174 	movhi	r2,2053
 8001d78:	1885883a 	add	r2,r3,r2
 8001d7c:	109f3b17 	ldw	r2,31980(r2)
 8001d80:	e0ffeb04 	addi	r3,fp,-84
 8001d84:	e1bff617 	ldw	r6,-40(fp)
 8001d88:	e17fe717 	ldw	r5,-100(fp)
 8001d8c:	1809883a 	mov	r4,r3
 8001d90:	103ee83a 	callr	r2
 8001d94:	e0bff515 	stw	r2,-44(fp)

	return result;
 8001d98:	e0bff517 	ldw	r2,-44(fp)
};
 8001d9c:	e037883a 	mov	sp,fp
 8001da0:	dfc00117 	ldw	ra,4(sp)
 8001da4:	df000017 	ldw	fp,0(sp)
 8001da8:	dec00204 	addi	sp,sp,8
 8001dac:	f800283a 	ret

08001db0 <initItfcMap>:
 *
 */

// Initialize the Interface Map Table.
void initItfcMap()
{
 8001db0:	deffff04 	addi	sp,sp,-4
 8001db4:	df000015 	stw	fp,0(sp)
 8001db8:	d839883a 	mov	fp,sp
	ItfcTable[0].module = 0;	// CKM_C0
 8001dbc:	00820174 	movhi	r2,2053
 8001dc0:	101f3215 	stw	zero,31944(r2)
	ItfcTable[0].interface = 0;
 8001dc4:	00820174 	movhi	r2,2053
 8001dc8:	101f3315 	stw	zero,31948(r2)
	ItfcTable[0].base = I2C_CKM_C0_BASE;
 8001dcc:	00860034 	movhi	r2,6144
 8001dd0:	108f6004 	addi	r2,r2,15744
 8001dd4:	00c20174 	movhi	r3,2053
 8001dd8:	189f3415 	stw	r2,31952(r3)
	strcpy(&ItfcTable[0].name[0], I2C_CKM_C0_NAME);
 8001ddc:	009d9974 	movhi	r2,30309
 8001de0:	10990bc4 	addi	r2,r2,25647
 8001de4:	00c20174 	movhi	r3,2053
 8001de8:	189f3515 	stw	r2,31956(r3)
 8001dec:	0098ccb4 	movhi	r2,25394
 8001df0:	109a4bc4 	addi	r2,r2,26927
 8001df4:	00c20174 	movhi	r3,2053
 8001df8:	189f3615 	stw	r2,31960(r3)
 8001dfc:	009b5af4 	movhi	r2,28011
 8001e00:	1098d7c4 	addi	r2,r2,25439
 8001e04:	00c20174 	movhi	r3,2053
 8001e08:	189f3715 	stw	r2,31964(r3)
 8001e0c:	00800c34 	movhi	r2,48
 8001e10:	1098d7c4 	addi	r2,r2,25439
 8001e14:	00c20174 	movhi	r3,2053
 8001e18:	189f3815 	stw	r2,31968(r3)
	ItfcTable[0].handler = SI5345;
 8001e1c:	00820034 	movhi	r2,2048
 8001e20:	10843904 	addi	r2,r2,4324
 8001e24:	00c20174 	movhi	r3,2053
 8001e28:	189f3b15 	stw	r2,31980(r3)

	ItfcTable[1].module = 0;	// CKM_C0
 8001e2c:	00820174 	movhi	r2,2053
 8001e30:	101f3c15 	stw	zero,31984(r2)
	ItfcTable[1].interface = 1;
 8001e34:	00c00044 	movi	r3,1
 8001e38:	00820174 	movhi	r2,2053
 8001e3c:	10df3d15 	stw	r3,31988(r2)
	ItfcTable[1].base = I2C_CKM_C0_BASE;
 8001e40:	00860034 	movhi	r2,6144
 8001e44:	108f6004 	addi	r2,r2,15744
 8001e48:	00c20174 	movhi	r3,2053
 8001e4c:	189f3e15 	stw	r2,31992(r3)
	strcpy(&ItfcTable[1].name[0], I2C_CKM_C0_NAME);
 8001e50:	009d9974 	movhi	r2,30309
 8001e54:	10990bc4 	addi	r2,r2,25647
 8001e58:	00c20174 	movhi	r3,2053
 8001e5c:	189f3f15 	stw	r2,31996(r3)
 8001e60:	0098ccb4 	movhi	r2,25394
 8001e64:	109a4bc4 	addi	r2,r2,26927
 8001e68:	00c20174 	movhi	r3,2053
 8001e6c:	189f4015 	stw	r2,32000(r3)
 8001e70:	009b5af4 	movhi	r2,28011
 8001e74:	1098d7c4 	addi	r2,r2,25439
 8001e78:	00c20174 	movhi	r3,2053
 8001e7c:	189f4115 	stw	r2,32004(r3)
 8001e80:	00800c34 	movhi	r2,48
 8001e84:	1098d7c4 	addi	r2,r2,25439
 8001e88:	00c20174 	movhi	r3,2053
 8001e8c:	189f4215 	stw	r2,32008(r3)
	ItfcTable[1].handler = ZEDF9T;
 8001e90:	00820034 	movhi	r2,2048
 8001e94:	1084ae04 	addi	r2,r2,4792
 8001e98:	00c20174 	movhi	r3,2053
 8001e9c:	189f4515 	stw	r2,32020(r3)
//	ItfcTable[1].interface = 1;
//	ItfcTable[1].base = I2C_CKM_C1_BASE;
//	strcpy(&ItfcTable[1].name[0], I2C_CKM_C1_NAME);
//	ItfcTable[1].handler = 2;

	ItfcTable[2].module = 0;	// CKM_ID
 8001ea0:	00820174 	movhi	r2,2053
 8001ea4:	101f4615 	stw	zero,32024(r2)
	ItfcTable[2].interface = 2;
 8001ea8:	00c00084 	movi	r3,2
 8001eac:	00820174 	movhi	r2,2053
 8001eb0:	10df4715 	stw	r3,32028(r2)
	ItfcTable[2].base = I2C_CKM_ID_BASE;
 8001eb4:	00860034 	movhi	r2,6144
 8001eb8:	108f7004 	addi	r2,r2,15808
 8001ebc:	00c20174 	movhi	r3,2053
 8001ec0:	189f4815 	stw	r2,32032(r3)
	strcpy(&ItfcTable[2].name[0], I2C_CKM_ID_NAME);
 8001ec4:	009d9974 	movhi	r2,30309
 8001ec8:	10990bc4 	addi	r2,r2,25647
 8001ecc:	00c20174 	movhi	r3,2053
 8001ed0:	189f4915 	stw	r2,32036(r3)
 8001ed4:	0098ccb4 	movhi	r2,25394
 8001ed8:	109a4bc4 	addi	r2,r2,26927
 8001edc:	00c20174 	movhi	r3,2053
 8001ee0:	189f4a15 	stw	r2,32040(r3)
 8001ee4:	009b5af4 	movhi	r2,28011
 8001ee8:	1098d7c4 	addi	r2,r2,25439
 8001eec:	00c20174 	movhi	r3,2053
 8001ef0:	189f4b15 	stw	r2,32044(r3)
 8001ef4:	00801934 	movhi	r2,100
 8001ef8:	109a57c4 	addi	r2,r2,26975
 8001efc:	00c20174 	movhi	r3,2053
 8001f00:	189f4c15 	stw	r2,32048(r3)
	ItfcTable[2].handler = ATECC608;
 8001f04:	00820034 	movhi	r2,2048
 8001f08:	10857904 	addi	r2,r2,5604
 8001f0c:	00c20174 	movhi	r3,2053
 8001f10:	189f4f15 	stw	r2,32060(r3)

	ItfcTable[3].module = 1;	// RXM_CTRL
 8001f14:	00c00044 	movi	r3,1
 8001f18:	00820174 	movhi	r2,2053
 8001f1c:	10df5015 	stw	r3,32064(r2)
	ItfcTable[3].interface = 0;
 8001f20:	00820174 	movhi	r2,2053
 8001f24:	101f5115 	stw	zero,32068(r2)
	ItfcTable[3].base = I2C_RXM_CTRL_BASE;
 8001f28:	00860034 	movhi	r2,6144
 8001f2c:	108f8004 	addi	r2,r2,15872
 8001f30:	00c20174 	movhi	r3,2053
 8001f34:	189f5215 	stw	r2,32072(r3)
	strcpy(&ItfcTable[3].name[0], I2C_RXM_CTRL_NAME);
 8001f38:	009d9974 	movhi	r2,30309
 8001f3c:	10990bc4 	addi	r2,r2,25647
 8001f40:	00c20174 	movhi	r3,2053
 8001f44:	189f5315 	stw	r2,32076(r3)
 8001f48:	0098ccb4 	movhi	r2,25394
 8001f4c:	109a4bc4 	addi	r2,r2,26927
 8001f50:	00c20174 	movhi	r3,2053
 8001f54:	189f5415 	stw	r2,32080(r3)
 8001f58:	009b5e34 	movhi	r2,28024
 8001f5c:	109c97c4 	addi	r2,r2,29279
 8001f60:	00c20174 	movhi	r3,2053
 8001f64:	189f5515 	stw	r2,32084(r3)
 8001f68:	009c9d34 	movhi	r2,29300
 8001f6c:	1098d7c4 	addi	r2,r2,25439
 8001f70:	00c20174 	movhi	r3,2053
 8001f74:	189f5615 	stw	r2,32088(r3)
 8001f78:	00c01b04 	movi	r3,108
 8001f7c:	00820174 	movhi	r2,2053
 8001f80:	10df570d 	sth	r3,32092(r2)
	ItfcTable[3].handler = PCF8574;
 8001f84:	00820034 	movhi	r2,2048
 8001f88:	10869004 	addi	r2,r2,6720
 8001f8c:	00c20174 	movhi	r3,2053
 8001f90:	189f5915 	stw	r2,32100(r3)

	ItfcTable[4].module = 1;	// RXM_ID
 8001f94:	00c00044 	movi	r3,1
 8001f98:	00820174 	movhi	r2,2053
 8001f9c:	10df5a15 	stw	r3,32104(r2)
	ItfcTable[4].interface = 1;
 8001fa0:	00c00044 	movi	r3,1
 8001fa4:	00820174 	movhi	r2,2053
 8001fa8:	10df5b15 	stw	r3,32108(r2)
	ItfcTable[4].base = I2C_RXM_ID_BASE;
 8001fac:	00860034 	movhi	r2,6144
 8001fb0:	108f9004 	addi	r2,r2,15936
 8001fb4:	00c20174 	movhi	r3,2053
 8001fb8:	189f5c15 	stw	r2,32112(r3)
	strcpy(&ItfcTable[4].name[0], I2C_RXM_ID_NAME);
 8001fbc:	009d9974 	movhi	r2,30309
 8001fc0:	10990bc4 	addi	r2,r2,25647
 8001fc4:	00c20174 	movhi	r3,2053
 8001fc8:	189f5d15 	stw	r2,32116(r3)
 8001fcc:	0098ccb4 	movhi	r2,25394
 8001fd0:	109a4bc4 	addi	r2,r2,26927
 8001fd4:	00c20174 	movhi	r3,2053
 8001fd8:	189f5e15 	stw	r2,32120(r3)
 8001fdc:	009b5e34 	movhi	r2,28024
 8001fe0:	109c97c4 	addi	r2,r2,29279
 8001fe4:	00c20174 	movhi	r3,2053
 8001fe8:	189f5f15 	stw	r2,32124(r3)
 8001fec:	00801934 	movhi	r2,100
 8001ff0:	109a57c4 	addi	r2,r2,26975
 8001ff4:	00c20174 	movhi	r3,2053
 8001ff8:	189f6015 	stw	r2,32128(r3)
	ItfcTable[4].handler = ATECC608;
 8001ffc:	00820034 	movhi	r2,2048
 8002000:	10857904 	addi	r2,r2,5604
 8002004:	00c20174 	movhi	r3,2053
 8002008:	189f6315 	stw	r2,32140(r3)

	ItfcTable[5].module = 1;	// RXM_SPI_ADC
 800200c:	00c00044 	movi	r3,1
 8002010:	00820174 	movhi	r2,2053
 8002014:	10df6415 	stw	r3,32144(r2)
	ItfcTable[5].interface = 2;
 8002018:	00c00084 	movi	r3,2
 800201c:	00820174 	movhi	r2,2053
 8002020:	10df6515 	stw	r3,32148(r2)
	ItfcTable[5].base = SPI_RXM_BASE;
 8002024:	00860034 	movhi	r2,6144
 8002028:	108fb804 	addi	r2,r2,16096
 800202c:	00c20174 	movhi	r3,2053
 8002030:	189f6615 	stw	r2,32152(r3)
	strcpy(&ItfcTable[5].name[0], SPI_RXM_NAME);
 8002034:	009d9974 	movhi	r2,30309
 8002038:	10990bc4 	addi	r2,r2,25647
 800203c:	00c20174 	movhi	r3,2053
 8002040:	189f6715 	stw	r2,32156(r3)
 8002044:	009a5c34 	movhi	r2,26992
 8002048:	109ccbc4 	addi	r2,r2,29487
 800204c:	00c20174 	movhi	r3,2053
 8002050:	189f6815 	stw	r2,32160(r3)
 8002054:	009b5e34 	movhi	r2,28024
 8002058:	109c97c4 	addi	r2,r2,29279
 800205c:	00c20174 	movhi	r3,2053
 8002060:	189f6915 	stw	r2,32164(r3)
 8002064:	00820174 	movhi	r2,2053
 8002068:	101f6a05 	stb	zero,32168(r2)
	ItfcTable[5].handler = AD9648;
 800206c:	00820034 	movhi	r2,2048
 8002070:	10856e04 	addi	r2,r2,5560
 8002074:	00c20174 	movhi	r3,2053
 8002078:	189f6d15 	stw	r2,32180(r3)
};
 800207c:	0001883a 	nop
 8002080:	e037883a 	mov	sp,fp
 8002084:	df000017 	ldw	fp,0(sp)
 8002088:	dec00104 	addi	sp,sp,4
 800208c:	f800283a 	ret

08002090 <FindItfcIndex>:

// Find the index of the Module / Interface in the Interface Map table
int FindItfcIndex(int module, int itfcnum)
{
 8002090:	defffc04 	addi	sp,sp,-16
 8002094:	df000315 	stw	fp,12(sp)
 8002098:	df000304 	addi	fp,sp,12
 800209c:	e13ffe15 	stw	r4,-8(fp)
 80020a0:	e17ffd15 	stw	r5,-12(fp)
	for (int i=0; i< MAXITFC; i++)		if ((module == ItfcTable[i].module) && (itfcnum == ItfcTable[i].interface))
 80020a4:	e03fff15 	stw	zero,-4(fp)
 80020a8:	00001306 	br	80020f8 <FindItfcIndex+0x68>
 80020ac:	e0bfff17 	ldw	r2,-4(fp)
 80020b0:	10c00a24 	muli	r3,r2,40
 80020b4:	00820174 	movhi	r2,2053
 80020b8:	1885883a 	add	r2,r3,r2
 80020bc:	10df3217 	ldw	r3,31944(r2)
 80020c0:	e0bffe17 	ldw	r2,-8(fp)
 80020c4:	1880091e 	bne	r3,r2,80020ec <FindItfcIndex+0x5c>
 80020c8:	e0bfff17 	ldw	r2,-4(fp)
 80020cc:	10c00a24 	muli	r3,r2,40
 80020d0:	00820174 	movhi	r2,2053
 80020d4:	1885883a 	add	r2,r3,r2
 80020d8:	10df3317 	ldw	r3,31948(r2)
 80020dc:	e0bffd17 	ldw	r2,-12(fp)
 80020e0:	1880021e 	bne	r3,r2,80020ec <FindItfcIndex+0x5c>
			return i;
 80020e4:	e0bfff17 	ldw	r2,-4(fp)
 80020e8:	00000706 	br	8002108 <FindItfcIndex+0x78>
	for (int i=0; i< MAXITFC; i++)		if ((module == ItfcTable[i].module) && (itfcnum == ItfcTable[i].interface))
 80020ec:	e0bfff17 	ldw	r2,-4(fp)
 80020f0:	10800044 	addi	r2,r2,1
 80020f4:	e0bfff15 	stw	r2,-4(fp)
 80020f8:	e0bfff17 	ldw	r2,-4(fp)
 80020fc:	10800190 	cmplti	r2,r2,6
 8002100:	103fea1e 	bne	r2,zero,80020ac <FindItfcIndex+0x1c>

	return -1;	// Didn't find it in the table
 8002104:	00bfffc4 	movi	r2,-1
};
 8002108:	e037883a 	mov	sp,fp
 800210c:	df000017 	ldw	fp,0(sp)
 8002110:	dec00104 	addi	sp,sp,4
 8002114:	f800283a 	ret

08002118 <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 8002118:	defffb04 	addi	sp,sp,-20
 800211c:	dfc00415 	stw	ra,16(sp)
 8002120:	df000315 	stw	fp,12(sp)
 8002124:	df000304 	addi	fp,sp,12
 8002128:	2005883a 	mov	r2,r4
 800212c:	e17ffd15 	stw	r5,-12(fp)
 8002130:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
 8002134:	e0bffe03 	ldbu	r2,-8(fp)
 8002138:	10019826 	beq	r2,zero,800279c <alt_uCOSIIErrorHandler+0x684>
   {
      return;
   }
   
   fault_level = SYSTEM;  
 800213c:	00800084 	movi	r2,2
 8002140:	e0bfff15 	stw	r2,-4(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 8002144:	8015a580 	call	8015a58 <OSSchedLock>
      
   switch (error_code)
 8002148:	e0bffe03 	ldbu	r2,-8(fp)
 800214c:	10c01948 	cmpgei	r3,r2,101
 8002150:	18006d1e 	bne	r3,zero,8002308 <alt_uCOSIIErrorHandler+0x1f0>
 8002154:	0081120e 	bge	zero,r2,80025a0 <alt_uCOSIIErrorHandler+0x488>
 8002158:	10c01968 	cmpgeui	r3,r2,101
 800215c:	1801101e 	bne	r3,zero,80025a0 <alt_uCOSIIErrorHandler+0x488>
 8002160:	100690ba 	slli	r3,r2,2
 8002164:	00820034 	movhi	r2,2048
 8002168:	1885883a 	add	r2,r3,r2
 800216c:	10885d17 	ldw	r2,8564(r2)
 8002170:	1000683a 	jmp	r2
 8002174:	080025a0 	cmpeqi	zero,at,150
 8002178:	080023e0 	cmpeqi	zero,at,143
 800217c:	08002484 	addi	zero,at,146
 8002180:	08002430 	cmpltui	zero,at,144
 8002184:	0800240c 	andi	zero,at,144
 8002188:	080025a0 	cmpeqi	zero,at,150
 800218c:	080025a0 	cmpeqi	zero,at,150
 8002190:	080025a0 	cmpeqi	zero,at,150
 8002194:	080025a0 	cmpeqi	zero,at,150
 8002198:	080025a0 	cmpeqi	zero,at,150
 800219c:	0800245c 	xori	zero,at,145
 80021a0:	080025a0 	cmpeqi	zero,at,150
 80021a4:	080025a0 	cmpeqi	zero,at,150
 80021a8:	080025a0 	cmpeqi	zero,at,150
 80021ac:	080025a0 	cmpeqi	zero,at,150
 80021b0:	080025a0 	cmpeqi	zero,at,150
 80021b4:	080025a0 	cmpeqi	zero,at,150
 80021b8:	080025a0 	cmpeqi	zero,at,150
 80021bc:	080025a0 	cmpeqi	zero,at,150
 80021c0:	080025a0 	cmpeqi	zero,at,150
 80021c4:	080023b8 	rdprs	zero,at,142
 80021c8:	080025a0 	cmpeqi	zero,at,150
 80021cc:	080025a0 	cmpeqi	zero,at,150
 80021d0:	080025a0 	cmpeqi	zero,at,150
 80021d4:	080025a0 	cmpeqi	zero,at,150
 80021d8:	080025a0 	cmpeqi	zero,at,150
 80021dc:	080025a0 	cmpeqi	zero,at,150
 80021e0:	080025a0 	cmpeqi	zero,at,150
 80021e4:	080025a0 	cmpeqi	zero,at,150
 80021e8:	080025a0 	cmpeqi	zero,at,150
 80021ec:	08002518 	cmpnei	zero,at,148
 80021f0:	080025a0 	cmpeqi	zero,at,150
 80021f4:	080025a0 	cmpeqi	zero,at,150
 80021f8:	080025a0 	cmpeqi	zero,at,150
 80021fc:	080025a0 	cmpeqi	zero,at,150
 8002200:	080025a0 	cmpeqi	zero,at,150
 8002204:	080025a0 	cmpeqi	zero,at,150
 8002208:	080025a0 	cmpeqi	zero,at,150
 800220c:	080025a0 	cmpeqi	zero,at,150
 8002210:	080025a0 	cmpeqi	zero,at,150
 8002214:	08002314 	ori	zero,at,140
 8002218:	080025a0 	cmpeqi	zero,at,150
 800221c:	08002338 	rdprs	zero,at,140
 8002220:	080025a0 	cmpeqi	zero,at,150
 8002224:	080025a0 	cmpeqi	zero,at,150
 8002228:	080025a0 	cmpeqi	zero,at,150
 800222c:	080025a0 	cmpeqi	zero,at,150
 8002230:	080025a0 	cmpeqi	zero,at,150
 8002234:	080025a0 	cmpeqi	zero,at,150
 8002238:	080025a0 	cmpeqi	zero,at,150
 800223c:	080025a0 	cmpeqi	zero,at,150
 8002240:	080025a0 	cmpeqi	zero,at,150
 8002244:	080025a0 	cmpeqi	zero,at,150
 8002248:	080025a0 	cmpeqi	zero,at,150
 800224c:	080025a0 	cmpeqi	zero,at,150
 8002250:	080025a0 	cmpeqi	zero,at,150
 8002254:	080025a0 	cmpeqi	zero,at,150
 8002258:	080025a0 	cmpeqi	zero,at,150
 800225c:	080025a0 	cmpeqi	zero,at,150
 8002260:	080025a0 	cmpeqi	zero,at,150
 8002264:	080025a0 	cmpeqi	zero,at,150
 8002268:	080024cc 	andi	zero,at,147
 800226c:	080024a8 	cmpgeui	zero,at,146
 8002270:	080025a0 	cmpeqi	zero,at,150
 8002274:	080024f4 	orhi	zero,at,147
 8002278:	080025a0 	cmpeqi	zero,at,150
 800227c:	08002378 	rdprs	zero,at,141
 8002280:	080025a0 	cmpeqi	zero,at,150
 8002284:	080025a0 	cmpeqi	zero,at,150
 8002288:	080025a0 	cmpeqi	zero,at,150
 800228c:	080025a0 	cmpeqi	zero,at,150
 8002290:	080025a0 	cmpeqi	zero,at,150
 8002294:	080025a0 	cmpeqi	zero,at,150
 8002298:	080025a0 	cmpeqi	zero,at,150
 800229c:	080025a0 	cmpeqi	zero,at,150
 80022a0:	080025a0 	cmpeqi	zero,at,150
 80022a4:	080025a0 	cmpeqi	zero,at,150
 80022a8:	080025a0 	cmpeqi	zero,at,150
 80022ac:	080025a0 	cmpeqi	zero,at,150
 80022b0:	080025a0 	cmpeqi	zero,at,150
 80022b4:	080025a0 	cmpeqi	zero,at,150
 80022b8:	080025a0 	cmpeqi	zero,at,150
 80022bc:	080025a0 	cmpeqi	zero,at,150
 80022c0:	080025a0 	cmpeqi	zero,at,150
 80022c4:	080025a0 	cmpeqi	zero,at,150
 80022c8:	080025a0 	cmpeqi	zero,at,150
 80022cc:	080025a0 	cmpeqi	zero,at,150
 80022d0:	080025a0 	cmpeqi	zero,at,150
 80022d4:	080025a0 	cmpeqi	zero,at,150
 80022d8:	080025a0 	cmpeqi	zero,at,150
 80022dc:	080025a0 	cmpeqi	zero,at,150
 80022e0:	080025a0 	cmpeqi	zero,at,150
 80022e4:	080025a0 	cmpeqi	zero,at,150
 80022e8:	080025a0 	cmpeqi	zero,at,150
 80022ec:	080025a0 	cmpeqi	zero,at,150
 80022f0:	080025a0 	cmpeqi	zero,at,150
 80022f4:	080025a0 	cmpeqi	zero,at,150
 80022f8:	080025a0 	cmpeqi	zero,at,150
 80022fc:	080025a0 	cmpeqi	zero,at,150
 8002300:	080025a0 	cmpeqi	zero,at,150
 8002304:	08002540 	call	800254 <OSCtxSw_SWITCH_PC+0x800214>
 8002308:	10803fe0 	cmpeqi	r2,r2,255
 800230c:	1000971e 	bne	r2,zero,800256c <alt_uCOSIIErrorHandler+0x454>
 8002310:	0000a306 	br	80025a0 <alt_uCOSIIErrorHandler+0x488>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
 8002314:	d0a00117 	ldw	r2,-32764(gp)
 8002318:	10800317 	ldw	r2,12(r2)
 800231c:	100f883a 	mov	r7,r2
 8002320:	01800c44 	movi	r6,49
 8002324:	01400044 	movi	r5,1
 8002328:	01020174 	movhi	r4,2053
 800232c:	213b3904 	addi	r4,r4,-4892
 8002330:	80037080 	call	8003708 <fwrite>
         break;
 8002334:	0000b106 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
 8002338:	d0a00117 	ldw	r2,-32764(gp)
 800233c:	10800317 	ldw	r2,12(r2)
 8002340:	100f883a 	mov	r7,r2
 8002344:	01800c44 	movi	r6,49
 8002348:	01400044 	movi	r5,1
 800234c:	01020174 	movhi	r4,2053
 8002350:	213b4604 	addi	r4,r4,-4840
 8002354:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
 8002358:	d0a00117 	ldw	r2,-32764(gp)
 800235c:	10800317 	ldw	r2,12(r2)
 8002360:	01800504 	movi	r6,20
 8002364:	01420174 	movhi	r5,2053
 8002368:	297b5304 	addi	r5,r5,-4788
 800236c:	1009883a 	mov	r4,r2
 8002370:	80036200 	call	8003620 <fprintf>
            OS_LOWEST_PRIO);
         break;
 8002374:	0000a106 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
 8002378:	d0a00117 	ldw	r2,-32764(gp)
 800237c:	10800317 	ldw	r2,12(r2)
 8002380:	100f883a 	mov	r7,r2
 8002384:	01800a04 	movi	r6,40
 8002388:	01400044 	movi	r5,1
 800238c:	01020174 	movhi	r4,2053
 8002390:	213b6004 	addi	r4,r4,-4736
 8002394:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
 8002398:	d0a00117 	ldw	r2,-32764(gp)
 800239c:	10800317 	ldw	r2,12(r2)
 80023a0:	01800284 	movi	r6,10
 80023a4:	01420174 	movhi	r5,2053
 80023a8:	297b6b04 	addi	r5,r5,-4692
 80023ac:	1009883a 	mov	r4,r2
 80023b0:	80036200 	call	8003620 <fprintf>
         break;
 80023b4:	00009106 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_MBOX_FULL:
         fault_level = NONE;
 80023b8:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
 80023bc:	d0a00117 	ldw	r2,-32764(gp)
 80023c0:	10800317 	ldw	r2,12(r2)
 80023c4:	100f883a 	mov	r7,r2
 80023c8:	01800c84 	movi	r6,50
 80023cc:	01400044 	movi	r5,1
 80023d0:	01020174 	movhi	r4,2053
 80023d4:	213b7404 	addi	r4,r4,-4656
 80023d8:	80037080 	call	8003708 <fwrite>
         break;
 80023dc:	00008706 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
 80023e0:	00800044 	movi	r2,1
 80023e4:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, 
 80023e8:	d0a00117 	ldw	r2,-32764(gp)
 80023ec:	10800317 	ldw	r2,12(r2)
 80023f0:	100f883a 	mov	r7,r2
 80023f4:	01801244 	movi	r6,73
 80023f8:	01400044 	movi	r5,1
 80023fc:	01020174 	movhi	r4,2053
 8002400:	213b8104 	addi	r4,r4,-4604
 8002404:	80037080 	call	8003708 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
 8002408:	00007c06 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
 800240c:	d0a00117 	ldw	r2,-32764(gp)
 8002410:	10800317 	ldw	r2,12(r2)
 8002414:	100f883a 	mov	r7,r2
 8002418:	01800c44 	movi	r6,49
 800241c:	01400044 	movi	r5,1
 8002420:	01020174 	movhi	r4,2053
 8002424:	213b9404 	addi	r4,r4,-4528
 8002428:	80037080 	call	8003708 <fwrite>
         break;
 800242c:	00007306 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
 8002430:	00800044 	movi	r2,1
 8002434:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
 8002438:	d0a00117 	ldw	r2,-32764(gp)
 800243c:	10800317 	ldw	r2,12(r2)
 8002440:	100f883a 	mov	r7,r2
 8002444:	01800a44 	movi	r6,41
 8002448:	01400044 	movi	r5,1
 800244c:	01020174 	movhi	r4,2053
 8002450:	213ba104 	addi	r4,r4,-4476
 8002454:	80037080 	call	8003708 <fwrite>
         break;
 8002458:	00006806 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TIMEOUT:
         fault_level = NONE;
 800245c:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Resource not received in specified time\n");
 8002460:	d0a00117 	ldw	r2,-32764(gp)
 8002464:	10800317 	ldw	r2,12(r2)
 8002468:	100f883a 	mov	r7,r2
 800246c:	01800a04 	movi	r6,40
 8002470:	01400044 	movi	r5,1
 8002474:	01020174 	movhi	r4,2053
 8002478:	213bac04 	addi	r4,r4,-4432
 800247c:	80037080 	call	8003708 <fwrite>
         break;
 8002480:	00005e06 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
 8002484:	d0a00117 	ldw	r2,-32764(gp)
 8002488:	10800317 	ldw	r2,12(r2)
 800248c:	100f883a 	mov	r7,r2
 8002490:	01800b04 	movi	r6,44
 8002494:	01400044 	movi	r5,1
 8002498:	01020174 	movhi	r4,2053
 800249c:	213bb704 	addi	r4,r4,-4388
 80024a0:	80037080 	call	8003708 <fwrite>
         break;
 80024a4:	00005506 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
 80024a8:	d0a00117 	ldw	r2,-32764(gp)
 80024ac:	10800317 	ldw	r2,12(r2)
 80024b0:	100f883a 	mov	r7,r2
 80024b4:	01800884 	movi	r6,34
 80024b8:	01400044 	movi	r5,1
 80024bc:	01020174 	movhi	r4,2053
 80024c0:	213bc304 	addi	r4,r4,-4340
 80024c4:	80037080 	call	8003708 <fwrite>
         break;
 80024c8:	00004c06 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
 80024cc:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
 80024d0:	d0a00117 	ldw	r2,-32764(gp)
 80024d4:	10800317 	ldw	r2,12(r2)
 80024d8:	100f883a 	mov	r7,r2
 80024dc:	01800bc4 	movi	r6,47
 80024e0:	01400044 	movi	r5,1
 80024e4:	01020174 	movhi	r4,2053
 80024e8:	213bcc04 	addi	r4,r4,-4304
 80024ec:	80037080 	call	8003708 <fwrite>
         break;
 80024f0:	00004206 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
 80024f4:	d0a00117 	ldw	r2,-32764(gp)
 80024f8:	10800317 	ldw	r2,12(r2)
 80024fc:	100f883a 	mov	r7,r2
 8002500:	018009c4 	movi	r6,39
 8002504:	01400044 	movi	r5,1
 8002508:	01020174 	movhi	r4,2053
 800250c:	213bd804 	addi	r4,r4,-4256
 8002510:	80037080 	call	8003708 <fwrite>
         break;
 8002514:	00003906 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_Q_FULL:
         fault_level = NONE;
 8002518:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
 800251c:	d0a00117 	ldw	r2,-32764(gp)
 8002520:	10800317 	ldw	r2,12(r2)
 8002524:	100f883a 	mov	r7,r2
 8002528:	01800a84 	movi	r6,42
 800252c:	01400044 	movi	r5,1
 8002530:	01020174 	movhi	r4,2053
 8002534:	213be204 	addi	r4,r4,-4216
 8002538:	80037080 	call	8003708 <fwrite>
         break;
 800253c:	00002f06 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
 8002540:	00800044 	movi	r2,1
 8002544:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
 8002548:	d0a00117 	ldw	r2,-32764(gp)
 800254c:	10800317 	ldw	r2,12(r2)
 8002550:	100f883a 	mov	r7,r2
 8002554:	01800c04 	movi	r6,48
 8002558:	01400044 	movi	r5,1
 800255c:	01020174 	movhi	r4,2053
 8002560:	213bed04 	addi	r4,r4,-4172
 8002564:	80037080 	call	8003708 <fwrite>
         break;
 8002568:	00002406 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 800256c:	00800084 	movi	r2,2
 8002570:	e0bfff15 	stw	r2,-4(fp)
         printf(
 8002574:	01020174 	movhi	r4,2053
 8002578:	213bfa04 	addi	r4,r4,-4120
 800257c:	8003b840 	call	8003b84 <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
 8002580:	d0a00117 	ldw	r2,-32764(gp)
 8002584:	10800317 	ldw	r2,12(r2)
 8002588:	e1bffd17 	ldw	r6,-12(fp)
 800258c:	01420174 	movhi	r5,2053
 8002590:	297c0a04 	addi	r5,r5,-4056
 8002594:	1009883a 	mov	r4,r2
 8002598:	80036200 	call	8003620 <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
 800259c:	00001706 	br	80025fc <alt_uCOSIIErrorHandler+0x4e4>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
 80025a0:	01020174 	movhi	r4,2053
 80025a4:	213c1504 	addi	r4,r4,-4012
 80025a8:	8003ca80 	call	8003ca8 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
 80025ac:	d0a00117 	ldw	r2,-32764(gp)
 80025b0:	10800317 	ldw	r2,12(r2)
 80025b4:	100f883a 	mov	r7,r2
 80025b8:	01800404 	movi	r6,16
 80025bc:	01400044 	movi	r5,1
 80025c0:	01020174 	movhi	r4,2053
 80025c4:	213c2304 	addi	r4,r4,-3956
 80025c8:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
 80025cc:	d0a00117 	ldw	r2,-32764(gp)
 80025d0:	10800317 	ldw	r2,12(r2)
 80025d4:	e0fffe03 	ldbu	r3,-8(fp)
 80025d8:	180d883a 	mov	r6,r3
 80025dc:	01420174 	movhi	r5,2053
 80025e0:	297c2804 	addi	r5,r5,-3936
 80025e4:	1009883a 	mov	r4,r2
 80025e8:	80036200 	call	8003620 <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
 80025ec:	01020174 	movhi	r4,2053
 80025f0:	213c2d04 	addi	r4,r4,-3916
 80025f4:	8003b440 	call	8003b44 <perror>
         break;
 80025f8:	0001883a 	nop

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
 80025fc:	e0bfff17 	ldw	r2,-4(fp)
 8002600:	108000a0 	cmpeqi	r2,r2,2
 8002604:	1000231e 	bne	r2,zero,8002694 <alt_uCOSIIErrorHandler+0x57c>
 8002608:	e0bfff17 	ldw	r2,-4(fp)
 800260c:	108000e8 	cmpgeui	r2,r2,3
 8002610:	1000561e 	bne	r2,zero,800276c <alt_uCOSIIErrorHandler+0x654>
 8002614:	e0bfff17 	ldw	r2,-4(fp)
 8002618:	10003a26 	beq	r2,zero,8002704 <alt_uCOSIIErrorHandler+0x5ec>
 800261c:	e0bfff17 	ldw	r2,-4(fp)
 8002620:	10800058 	cmpnei	r2,r2,1
 8002624:	1000511e 	bne	r2,zero,800276c <alt_uCOSIIErrorHandler+0x654>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
 8002628:	01020174 	movhi	r4,2053
 800262c:	213c3b04 	addi	r4,r4,-3860
 8002630:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
 8002634:	d0a00117 	ldw	r2,-32764(gp)
 8002638:	10800317 	ldw	r2,12(r2)
 800263c:	100f883a 	mov	r7,r2
 8002640:	01800904 	movi	r6,36
 8002644:	01400044 	movi	r5,1
 8002648:	01020174 	movhi	r4,2053
 800264c:	213c4804 	addi	r4,r4,-3808
 8002650:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
 8002654:	d0a00117 	ldw	r2,-32764(gp)
 8002658:	10800317 	ldw	r2,12(r2)
 800265c:	100f883a 	mov	r7,r2
 8002660:	01800a04 	movi	r6,40
 8002664:	01400044 	movi	r5,1
 8002668:	01020174 	movhi	r4,2053
 800266c:	213c5204 	addi	r4,r4,-3768
 8002670:	80037080 	call	8003708 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 8002674:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 8002678:	01003fc4 	movi	r4,255
 800267c:	801b56c0 	call	801b56c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 8002680:	e0bffe03 	ldbu	r2,-8(fp)
 8002684:	000b883a 	mov	r5,zero
 8002688:	1009883a 	mov	r4,r2
 800268c:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
         break;
 8002690:	00004106 	br	8002798 <alt_uCOSIIErrorHandler+0x680>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8002694:	01020174 	movhi	r4,2053
 8002698:	213c5d04 	addi	r4,r4,-3724
 800269c:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
 80026a0:	d0a00117 	ldw	r2,-32764(gp)
 80026a4:	10800317 	ldw	r2,12(r2)
 80026a8:	100f883a 	mov	r7,r2
 80026ac:	01800984 	movi	r6,38
 80026b0:	01400044 	movi	r5,1
 80026b4:	01020174 	movhi	r4,2053
 80026b8:	213c6b04 	addi	r4,r4,-3668
 80026bc:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
 80026c0:	d0a00117 	ldw	r2,-32764(gp)
 80026c4:	10800317 	ldw	r2,12(r2)
 80026c8:	100f883a 	mov	r7,r2
 80026cc:	01800bc4 	movi	r6,47
 80026d0:	01400044 	movi	r5,1
 80026d4:	01020174 	movhi	r4,2053
 80026d8:	213c7504 	addi	r4,r4,-3628
 80026dc:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
 80026e0:	d0a00117 	ldw	r2,-32764(gp)
 80026e4:	10800317 	ldw	r2,12(r2)
 80026e8:	100f883a 	mov	r7,r2
 80026ec:	01800cc4 	movi	r6,51
 80026f0:	01400044 	movi	r5,1
 80026f4:	01020174 	movhi	r4,2053
 80026f8:	213c8104 	addi	r4,r4,-3580
 80026fc:	80037080 	call	8003708 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
 8002700:	003fff06 	br	8002700 <alt_uCOSIIErrorHandler+0x5e8>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
 8002704:	d0a00117 	ldw	r2,-32764(gp)
 8002708:	10800317 	ldw	r2,12(r2)
 800270c:	100f883a 	mov	r7,r2
 8002710:	01800904 	movi	r6,36
 8002714:	01400044 	movi	r5,1
 8002718:	01020174 	movhi	r4,2053
 800271c:	213c8e04 	addi	r4,r4,-3528
 8002720:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
 8002724:	d0a00117 	ldw	r2,-32764(gp)
 8002728:	10800317 	ldw	r2,12(r2)
 800272c:	100f883a 	mov	r7,r2
 8002730:	01800c84 	movi	r6,50
 8002734:	01400044 	movi	r5,1
 8002738:	01020174 	movhi	r4,2053
 800273c:	213c9804 	addi	r4,r4,-3488
 8002740:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, 
 8002744:	d0a00117 	ldw	r2,-32764(gp)
 8002748:	10800317 	ldw	r2,12(r2)
 800274c:	100f883a 	mov	r7,r2
 8002750:	01800f84 	movi	r6,62
 8002754:	01400044 	movi	r5,1
 8002758:	01020174 	movhi	r4,2053
 800275c:	213ca504 	addi	r4,r4,-3436
 8002760:	80037080 	call	8003708 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
 8002764:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         return;   
 8002768:	00000d06 	br	80027a0 <alt_uCOSIIErrorHandler+0x688>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
 800276c:	01020174 	movhi	r4,2053
 8002770:	213cb504 	addi	r4,r4,-3372
 8002774:	8003ca80 	call	8003ca8 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
 8002778:	d0a00117 	ldw	r2,-32764(gp)
 800277c:	10800317 	ldw	r2,12(r2)
 8002780:	100f883a 	mov	r7,r2
 8002784:	01800ac4 	movi	r6,43
 8002788:	01400044 	movi	r5,1
 800278c:	01020174 	movhi	r4,2053
 8002790:	213cc304 	addi	r4,r4,-3316
 8002794:	80037080 	call	8003708 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 8002798:	003fff06 	br	8002798 <alt_uCOSIIErrorHandler+0x680>
      return;
 800279c:	0001883a 	nop
}
 80027a0:	e037883a 	mov	sp,fp
 80027a4:	dfc00117 	ldw	ra,4(sp)
 80027a8:	df000017 	ldw	fp,0(sp)
 80027ac:	dec00204 	addi	sp,sp,8
 80027b0:	f800283a 	ret

080027b4 <alt_NetworkErrorHandler>:

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 80027b4:	defffb04 	addi	sp,sp,-20
 80027b8:	dfc00415 	stw	ra,16(sp)
 80027bc:	df000315 	stw	fp,12(sp)
 80027c0:	df000304 	addi	fp,sp,12
 80027c4:	2005883a 	mov	r2,r4
 80027c8:	e17ffd15 	stw	r5,-12(fp)
 80027cc:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
 80027d0:	e0bffe03 	ldbu	r2,-8(fp)
 80027d4:	10008e26 	beq	r2,zero,8002a10 <alt_NetworkErrorHandler+0x25c>
   {
      return;
   }

   fault_level = SYSTEM;   
 80027d8:	00800084 	movi	r2,2
 80027dc:	e0bfff15 	stw	r2,-4(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
 80027e0:	8015a580 	call	8015a58 <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
 80027e4:	e0bffe03 	ldbu	r2,-8(fp)
 80027e8:	10803fd8 	cmpnei	r2,r2,255
 80027ec:	1000101e 	bne	r2,zero,8002830 <alt_NetworkErrorHandler+0x7c>
   {
      fault_level = SYSTEM;
 80027f0:	00800084 	movi	r2,2
 80027f4:	e0bfff15 	stw	r2,-4(fp)
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
 80027f8:	01020174 	movhi	r4,2053
 80027fc:	213cce04 	addi	r4,r4,-3272
 8002800:	8003b840 	call	8003b84 <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
 8002804:	d0a00117 	ldw	r2,-32764(gp)
 8002808:	10800317 	ldw	r2,12(r2)
 800280c:	e1bffd17 	ldw	r6,-12(fp)
 8002810:	01420174 	movhi	r5,2053
 8002814:	297cdd04 	addi	r5,r5,-3212
 8002818:	1009883a 	mov	r4,r2
 800281c:	80036200 	call	8003620 <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
 8002820:	01020174 	movhi	r4,2053
 8002824:	213ce104 	addi	r4,r4,-3196
 8002828:	8003b440 	call	8003b44 <perror>
 800282c:	00001006 	br	8002870 <alt_NetworkErrorHandler+0xbc>
   }
   else 
   {
      fault_level = TASK;
 8002830:	00800044 	movi	r2,1
 8002834:	e0bfff15 	stw	r2,-4(fp)
      printf("\n[Network]: See STDERR.\n");    
 8002838:	01020174 	movhi	r4,2053
 800283c:	213ce704 	addi	r4,r4,-3172
 8002840:	8003ca80 	call	8003ca8 <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
 8002844:	d0a00117 	ldw	r2,-32764(gp)
 8002848:	10800317 	ldw	r2,12(r2)
 800284c:	e0fffe03 	ldbu	r3,-8(fp)
 8002850:	180d883a 	mov	r6,r3
 8002854:	01420174 	movhi	r5,2053
 8002858:	297ced04 	addi	r5,r5,-3148
 800285c:	1009883a 	mov	r4,r2
 8002860:	80036200 	call	8003620 <fprintf>
      perror("\n[Network]:  ERRNO: ");
 8002864:	01020174 	movhi	r4,2053
 8002868:	213ce104 	addi	r4,r4,-3196
 800286c:	8003b440 	call	8003b44 <perror>
   }

   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
 8002870:	e0bfff17 	ldw	r2,-4(fp)
 8002874:	108000a0 	cmpeqi	r2,r2,2
 8002878:	1000231e 	bne	r2,zero,8002908 <alt_NetworkErrorHandler+0x154>
 800287c:	e0bfff17 	ldw	r2,-4(fp)
 8002880:	108000e8 	cmpgeui	r2,r2,3
 8002884:	1000561e 	bne	r2,zero,80029e0 <alt_NetworkErrorHandler+0x22c>
 8002888:	e0bfff17 	ldw	r2,-4(fp)
 800288c:	10003a26 	beq	r2,zero,8002978 <alt_NetworkErrorHandler+0x1c4>
 8002890:	e0bfff17 	ldw	r2,-4(fp)
 8002894:	10800058 	cmpnei	r2,r2,1
 8002898:	1000511e 	bne	r2,zero,80029e0 <alt_NetworkErrorHandler+0x22c>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
 800289c:	01020174 	movhi	r4,2053
 80028a0:	213cf404 	addi	r4,r4,-3120
 80028a4:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
 80028a8:	d0a00117 	ldw	r2,-32764(gp)
 80028ac:	10800317 	ldw	r2,12(r2)
 80028b0:	100f883a 	mov	r7,r2
 80028b4:	018007c4 	movi	r6,31
 80028b8:	01400044 	movi	r5,1
 80028bc:	01020174 	movhi	r4,2053
 80028c0:	213d0004 	addi	r4,r4,-3072
 80028c4:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
 80028c8:	d0a00117 	ldw	r2,-32764(gp)
 80028cc:	10800317 	ldw	r2,12(r2)
 80028d0:	100f883a 	mov	r7,r2
 80028d4:	018008c4 	movi	r6,35
 80028d8:	01400044 	movi	r5,1
 80028dc:	01020174 	movhi	r4,2053
 80028e0:	213d0804 	addi	r4,r4,-3040
 80028e4:	80037080 	call	8003708 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 80028e8:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 80028ec:	01003fc4 	movi	r4,255
 80028f0:	801b56c0 	call	801b56c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 80028f4:	e0bffe03 	ldbu	r2,-8(fp)
 80028f8:	000b883a 	mov	r5,zero
 80028fc:	1009883a 	mov	r4,r2
 8002900:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
         break;
 8002904:	00004106 	br	8002a0c <alt_NetworkErrorHandler+0x258>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8002908:	01020174 	movhi	r4,2053
 800290c:	213d1104 	addi	r4,r4,-3004
 8002910:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
 8002914:	d0a00117 	ldw	r2,-32764(gp)
 8002918:	10800317 	ldw	r2,12(r2)
 800291c:	100f883a 	mov	r7,r2
 8002920:	01800884 	movi	r6,34
 8002924:	01400044 	movi	r5,1
 8002928:	01020174 	movhi	r4,2053
 800292c:	213d1d04 	addi	r4,r4,-2956
 8002930:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
 8002934:	d0a00117 	ldw	r2,-32764(gp)
 8002938:	10800317 	ldw	r2,12(r2)
 800293c:	100f883a 	mov	r7,r2
 8002940:	01800a84 	movi	r6,42
 8002944:	01400044 	movi	r5,1
 8002948:	01020174 	movhi	r4,2053
 800294c:	213d2604 	addi	r4,r4,-2920
 8002950:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
 8002954:	d0a00117 	ldw	r2,-32764(gp)
 8002958:	10800317 	ldw	r2,12(r2)
 800295c:	100f883a 	mov	r7,r2
 8002960:	01800b84 	movi	r6,46
 8002964:	01400044 	movi	r5,1
 8002968:	01020174 	movhi	r4,2053
 800296c:	213d3104 	addi	r4,r4,-2876
 8002970:	80037080 	call	8003708 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 8002974:	003fff06 	br	8002974 <alt_NetworkErrorHandler+0x1c0>
         break;
      case NONE:
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is NONE.");
 8002978:	d0a00117 	ldw	r2,-32764(gp)
 800297c:	10800317 	ldw	r2,12(r2)
 8002980:	100f883a 	mov	r7,r2
 8002984:	01800804 	movi	r6,32
 8002988:	01400044 	movi	r5,1
 800298c:	01020174 	movhi	r4,2053
 8002990:	213d3d04 	addi	r4,r4,-2828
 8002994:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[Network]: Informational "
 8002998:	d0a00117 	ldw	r2,-32764(gp)
 800299c:	10800317 	ldw	r2,12(r2)
 80029a0:	100f883a 	mov	r7,r2
 80029a4:	01800d84 	movi	r6,54
 80029a8:	01400044 	movi	r5,1
 80029ac:	01020174 	movhi	r4,2053
 80029b0:	213d4604 	addi	r4,r4,-2792
 80029b4:	80037080 	call	8003708 <fwrite>
                         "error only, control returned");
         fprintf(stderr, 
 80029b8:	d0a00117 	ldw	r2,-32764(gp)
 80029bc:	10800317 	ldw	r2,12(r2)
 80029c0:	100f883a 	mov	r7,r2
 80029c4:	01800e44 	movi	r6,57
 80029c8:	01400044 	movi	r5,1
 80029cc:	01020174 	movhi	r4,2053
 80029d0:	213d5404 	addi	r4,r4,-2736
 80029d4:	80037080 	call	8003708 <fwrite>
            "to task to complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 80029d8:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         return;
 80029dc:	00000d06 	br	8002a14 <alt_NetworkErrorHandler+0x260>
         break;         
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
 80029e0:	01020174 	movhi	r4,2053
 80029e4:	213d6304 	addi	r4,r4,-2676
 80029e8:	8003ca80 	call	8003ca8 <puts>
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
 80029ec:	d0a00117 	ldw	r2,-32764(gp)
 80029f0:	10800317 	ldw	r2,12(r2)
 80029f4:	100f883a 	mov	r7,r2
 80029f8:	01800984 	movi	r6,38
 80029fc:	01400044 	movi	r5,1
 8002a00:	01020174 	movhi	r4,2053
 8002a04:	213d7004 	addi	r4,r4,-2624
 8002a08:	80037080 	call	8003708 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 8002a0c:	003fff06 	br	8002a0c <alt_NetworkErrorHandler+0x258>
      return;
 8002a10:	0001883a 	nop
}
 8002a14:	e037883a 	mov	sp,fp
 8002a18:	dfc00117 	ldw	ra,4(sp)
 8002a1c:	df000017 	ldw	fp,0(sp)
 8002a20:	dec00204 	addi	sp,sp,8
 8002a24:	f800283a 	ret

08002a28 <alt_SSSErrorHandler>:
   
   
void alt_SSSErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
 8002a28:	defffb04 	addi	sp,sp,-20
 8002a2c:	dfc00415 	stw	ra,16(sp)
 8002a30:	df000315 	stw	fp,12(sp)
 8002a34:	df000304 	addi	fp,sp,12
 8002a38:	2005883a 	mov	r2,r4
 8002a3c:	e17ffd15 	stw	r5,-12(fp)
 8002a40:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
 8002a44:	e0bffe03 	ldbu	r2,-8(fp)
 8002a48:	10009b26 	beq	r2,zero,8002cb8 <alt_SSSErrorHandler+0x290>
   {
      return;
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
 8002a4c:	e0bffe03 	ldbu	r2,-8(fp)
 8002a50:	1000021e 	bne	r2,zero,8002a5c <alt_SSSErrorHandler+0x34>
 8002a54:	0005883a 	mov	r2,zero
 8002a58:	00000106 	br	8002a60 <alt_SSSErrorHandler+0x38>
 8002a5c:	00800084 	movi	r2,2
 8002a60:	e0bfff15 	stw	r2,-4(fp)
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 8002a64:	8015a580 	call	8015a58 <OSSchedLock>
   switch (error_code)
 8002a68:	e0bffe03 	ldbu	r2,-8(fp)
 8002a6c:	10c007a0 	cmpeqi	r3,r2,30
 8002a70:	18000f1e 	bne	r3,zero,8002ab0 <alt_SSSErrorHandler+0x88>
 8002a74:	10803fd8 	cmpnei	r2,r2,255
 8002a78:	1000171e 	bne	r2,zero,8002ad8 <alt_SSSErrorHandler+0xb0>
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 8002a7c:	00800084 	movi	r2,2
 8002a80:	e0bfff15 	stw	r2,-4(fp)
         printf("\n[SSS]: See STDERR for expanded diagnosis translation.");    
 8002a84:	01020174 	movhi	r4,2053
 8002a88:	213d7a04 	addi	r4,r4,-2584
 8002a8c:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[SSS]: %s", (char *)expanded_diagnosis_ptr);
 8002a90:	d0a00117 	ldw	r2,-32764(gp)
 8002a94:	10800317 	ldw	r2,12(r2)
 8002a98:	e1bffd17 	ldw	r6,-12(fp)
 8002a9c:	01420174 	movhi	r5,2053
 8002aa0:	297d8804 	addi	r5,r5,-2528
 8002aa4:	1009883a 	mov	r4,r2
 8002aa8:	80036200 	call	8003620 <fprintf>
         break;
 8002aac:	00001a06 	br	8002b18 <alt_SSSErrorHandler+0xf0>
         
      case OS_Q_FULL:
         fault_level = NONE;
 8002ab0:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr,"\n[SSS]: Attempted to post to a full message queue.");
 8002ab4:	d0a00117 	ldw	r2,-32764(gp)
 8002ab8:	10800317 	ldw	r2,12(r2)
 8002abc:	100f883a 	mov	r7,r2
 8002ac0:	01800c84 	movi	r6,50
 8002ac4:	01400044 	movi	r5,1
 8002ac8:	01020174 	movhi	r4,2053
 8002acc:	213d8b04 	addi	r4,r4,-2516
 8002ad0:	80037080 	call	8003708 <fwrite>
         break;
 8002ad4:	00001006 	br	8002b18 <alt_SSSErrorHandler+0xf0>
      
      default:
         fault_level = SYSTEM;
 8002ad8:	00800084 	movi	r2,2
 8002adc:	e0bfff15 	stw	r2,-4(fp)
         printf("\n[SSS]: See STDERR.\n");    
 8002ae0:	01020174 	movhi	r4,2053
 8002ae4:	213d9804 	addi	r4,r4,-2464
 8002ae8:	8003ca80 	call	8003ca8 <puts>
         fprintf(stderr, "\n[SSS]: Error_code %d!", error_code);        
 8002aec:	d0a00117 	ldw	r2,-32764(gp)
 8002af0:	10800317 	ldw	r2,12(r2)
 8002af4:	e0fffe03 	ldbu	r3,-8(fp)
 8002af8:	180d883a 	mov	r6,r3
 8002afc:	01420174 	movhi	r5,2053
 8002b00:	297d9d04 	addi	r5,r5,-2444
 8002b04:	1009883a 	mov	r4,r2
 8002b08:	80036200 	call	8003620 <fprintf>
         perror("\n[SSS]:  ERRNO: ");
 8002b0c:	01020174 	movhi	r4,2053
 8002b10:	213da304 	addi	r4,r4,-2420
 8002b14:	8003b440 	call	8003b44 <perror>
   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */     
   switch (fault_level) 
 8002b18:	e0bfff17 	ldw	r2,-4(fp)
 8002b1c:	108000a0 	cmpeqi	r2,r2,2
 8002b20:	1000231e 	bne	r2,zero,8002bb0 <alt_SSSErrorHandler+0x188>
 8002b24:	e0bfff17 	ldw	r2,-4(fp)
 8002b28:	108000e8 	cmpgeui	r2,r2,3
 8002b2c:	1000561e 	bne	r2,zero,8002c88 <alt_SSSErrorHandler+0x260>
 8002b30:	e0bfff17 	ldw	r2,-4(fp)
 8002b34:	10003a26 	beq	r2,zero,8002c20 <alt_SSSErrorHandler+0x1f8>
 8002b38:	e0bfff17 	ldw	r2,-4(fp)
 8002b3c:	10800058 	cmpnei	r2,r2,1
 8002b40:	1000511e 	bne	r2,zero,8002c88 <alt_SSSErrorHandler+0x260>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is TASK).");
 8002b44:	01020174 	movhi	r4,2053
 8002b48:	213da804 	addi	r4,r4,-2400
 8002b4c:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is TASK");
 8002b50:	d0a00117 	ldw	r2,-32764(gp)
 8002b54:	10800317 	ldw	r2,12(r2)
 8002b58:	100f883a 	mov	r7,r2
 8002b5c:	018006c4 	movi	r6,27
 8002b60:	01400044 	movi	r5,1
 8002b64:	01020174 	movhi	r4,2053
 8002b68:	213db304 	addi	r4,r4,-2356
 8002b6c:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[SSS]: Task is being deleted.\n");
 8002b70:	d0a00117 	ldw	r2,-32764(gp)
 8002b74:	10800317 	ldw	r2,12(r2)
 8002b78:	100f883a 	mov	r7,r2
 8002b7c:	018007c4 	movi	r6,31
 8002b80:	01400044 	movi	r5,1
 8002b84:	01020174 	movhi	r4,2053
 8002b88:	213dba04 	addi	r4,r4,-2328
 8002b8c:	80037080 	call	8003708 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 8002b90:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 8002b94:	01003fc4 	movi	r4,255
 8002b98:	801b56c0 	call	801b56c <OSTaskDel>
         /* Invoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 8002b9c:	e0bffe03 	ldbu	r2,-8(fp)
 8002ba0:	000b883a 	mov	r5,zero
 8002ba4:	1009883a 	mov	r4,r2
 8002ba8:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
         break;
 8002bac:	00004106 	br	8002cb4 <alt_SSSErrorHandler+0x28c>
      case SYSTEM:
          /* Total System Failure, Restart Required */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8002bb0:	01020174 	movhi	r4,2053
 8002bb4:	213dc204 	addi	r4,r4,-2296
 8002bb8:	8003b840 	call	8003b84 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is SYSTEM.");
 8002bbc:	d0a00117 	ldw	r2,-32764(gp)
 8002bc0:	10800317 	ldw	r2,12(r2)
 8002bc4:	100f883a 	mov	r7,r2
 8002bc8:	01800784 	movi	r6,30
 8002bcc:	01400044 	movi	r5,1
 8002bd0:	01020174 	movhi	r4,2053
 8002bd4:	213dcd04 	addi	r4,r4,-2252
 8002bd8:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[SSS]: FATAL Error, Restart required.");
 8002bdc:	d0a00117 	ldw	r2,-32764(gp)
 8002be0:	10800317 	ldw	r2,12(r2)
 8002be4:	100f883a 	mov	r7,r2
 8002be8:	01800984 	movi	r6,38
 8002bec:	01400044 	movi	r5,1
 8002bf0:	01020174 	movhi	r4,2053
 8002bf4:	213dd504 	addi	r4,r4,-2220
 8002bf8:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, "\n[SSS]: Locking scheduler - endless loop.\n");
 8002bfc:	d0a00117 	ldw	r2,-32764(gp)
 8002c00:	10800317 	ldw	r2,12(r2)
 8002c04:	100f883a 	mov	r7,r2
 8002c08:	01800a84 	movi	r6,42
 8002c0c:	01400044 	movi	r5,1
 8002c10:	01020174 	movhi	r4,2053
 8002c14:	213ddf04 	addi	r4,r4,-2180
 8002c18:	80037080 	call	8003708 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 8002c1c:	003fff06 	br	8002c1c <alt_SSSErrorHandler+0x1f4>
         break;
      case NONE:
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is NONE.");
 8002c20:	d0a00117 	ldw	r2,-32764(gp)
 8002c24:	10800317 	ldw	r2,12(r2)
 8002c28:	100f883a 	mov	r7,r2
 8002c2c:	018006c4 	movi	r6,27
 8002c30:	01400044 	movi	r5,1
 8002c34:	01020174 	movhi	r4,2053
 8002c38:	213dea04 	addi	r4,r4,-2136
 8002c3c:	80037080 	call	8003708 <fwrite>
         fprintf(stderr, 
 8002c40:	d0a00117 	ldw	r2,-32764(gp)
 8002c44:	10800317 	ldw	r2,12(r2)
 8002c48:	100f883a 	mov	r7,r2
 8002c4c:	01800f44 	movi	r6,61
 8002c50:	01400044 	movi	r5,1
 8002c54:	01020174 	movhi	r4,2053
 8002c58:	213df104 	addi	r4,r4,-2108
 8002c5c:	80037080 	call	8003708 <fwrite>
            "\n[SSS] Informational error only, control returned to task to ");
         fprintf(stderr,
 8002c60:	d0a00117 	ldw	r2,-32764(gp)
 8002c64:	10800317 	ldw	r2,12(r2)
 8002c68:	100f883a 	mov	r7,r2
 8002c6c:	01800b84 	movi	r6,46
 8002c70:	01400044 	movi	r5,1
 8002c74:	01020174 	movhi	r4,2053
 8002c78:	213e0104 	addi	r4,r4,-2044
 8002c7c:	80037080 	call	8003708 <fwrite>
            "complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 8002c80:	8015ae80 	call	8015ae8 <OSSchedUnlock>
         return;         
 8002c84:	00000d06 	br	8002cbc <alt_SSSErrorHandler+0x294>
         break;
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
 8002c88:	01020174 	movhi	r4,2053
 8002c8c:	213e0d04 	addi	r4,r4,-1996
 8002c90:	8003ca80 	call	8003ca8 <puts>
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
 8002c94:	d0a00117 	ldw	r2,-32764(gp)
 8002c98:	10800317 	ldw	r2,12(r2)
 8002c9c:	100f883a 	mov	r7,r2
 8002ca0:	01800844 	movi	r6,33
 8002ca4:	01400044 	movi	r5,1
 8002ca8:	01020174 	movhi	r4,2053
 8002cac:	213e1904 	addi	r4,r4,-1948
 8002cb0:	80037080 	call	8003708 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 8002cb4:	003fff06 	br	8002cb4 <alt_SSSErrorHandler+0x28c>
      return;
 8002cb8:	0001883a 	nop
}
 8002cbc:	e037883a 	mov	sp,fp
 8002cc0:	dfc00117 	ldw	ra,4(sp)
 8002cc4:	df000017 	ldw	fp,0(sp)
 8002cc8:	dec00204 	addi	sp,sp,8
 8002ccc:	f800283a 	ret

08002cd0 <SSSInitialTask>:
/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
 8002cd0:	defffc04 	addi	sp,sp,-16
 8002cd4:	dfc00315 	stw	ra,12(sp)
 8002cd8:	df000215 	stw	fp,8(sp)
 8002cdc:	df000204 	addi	fp,sp,8
 8002ce0:	e13ffe15 	stw	r4,-8(fp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
 8002ce4:	80308b80 	call	80308b8 <alt_iniche_init>
  netmain(); 
 8002ce8:	802c4280 	call	802c428 <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 8002cec:	00000206 	br	8002cf8 <SSSInitialTask+0x28>
    TK_SLEEP(1);
 8002cf0:	01000084 	movi	r4,2
 8002cf4:	801c4780 	call	801c478 <OSTimeDly>
  while (!iniche_net_ready)
 8002cf8:	d0a08717 	ldw	r2,-32228(gp)
 8002cfc:	103ffc26 	beq	r2,zero,8002cf0 <SSSInitialTask+0x20>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");
 8002d00:	01020174 	movhi	r4,2053
 8002d04:	213e2804 	addi	r4,r4,-1888
 8002d08:	8003ca80 	call	8003ca8 <puts>

  /* Create the main simple socket server task. */
  TK_NEWTASK(&ssstask);
 8002d0c:	01020174 	movhi	r4,2053
 8002d10:	21135004 	addi	r4,r4,19776
 8002d14:	80305500 	call	8030550 <TK_NEWTASK>
  
  /*create os data structures */
  SSSCreateOSDataStructs(); 
 8002d18:	80033280 	call	8003328 <SSSCreateOSDataStructs>

  /* create the other tasks */
  SSSCreateTasks();
 8002d1c:	80033ac0 	call	80033ac <SSSCreateTasks>

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
 8002d20:	01003fc4 	movi	r4,255
 8002d24:	801b56c0 	call	801b56c <OSTaskDel>
 8002d28:	e0bfffc5 	stb	r2,-1(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
 8002d2c:	e0bfffc3 	ldbu	r2,-1(fp)
 8002d30:	000b883a 	mov	r5,zero
 8002d34:	1009883a 	mov	r4,r2
 8002d38:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
  
  while (1); /* Correct Program Flow should never get here */
 8002d3c:	003fff06 	br	8002d3c <SSSInitialTask+0x6c>

08002d40 <main>:

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
 8002d40:	defff504 	addi	sp,sp,-44
 8002d44:	dfc00a15 	stw	ra,40(sp)
 8002d48:	df000915 	stw	fp,36(sp)
 8002d4c:	df000904 	addi	fp,sp,36
 8002d50:	e13ffe15 	stw	r4,-8(fp)
 8002d54:	e17ffd15 	stw	r5,-12(fp)
 8002d58:	e1bffc15 	stw	r6,-16(fp)
  
  INT8U error_code;

  /* Clear the RTOS timer */
  OSTimeSet(0);
 8002d5c:	0009883a 	mov	r4,zero
 8002d60:	801c9200 	call	801c920 <OSTimeSet>

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(SSSInitialTask,
 8002d64:	d8000415 	stw	zero,16(sp)
 8002d68:	d8000315 	stw	zero,12(sp)
 8002d6c:	00820004 	movi	r2,2048
 8002d70:	d8800215 	stw	r2,8(sp)
 8002d74:	00820174 	movhi	r2,2053
 8002d78:	109f6e04 	addi	r2,r2,32184
 8002d7c:	d8800115 	stw	r2,4(sp)
 8002d80:	00800144 	movi	r2,5
 8002d84:	d8800015 	stw	r2,0(sp)
 8002d88:	01c00144 	movi	r7,5
 8002d8c:	018201b4 	movhi	r6,2054
 8002d90:	31a76e04 	addi	r6,r6,-25160
 8002d94:	000b883a 	mov	r5,zero
 8002d98:	01020034 	movhi	r4,2048
 8002d9c:	210b3404 	addi	r4,r4,11472
 8002da0:	801b3900 	call	801b390 <OSTaskCreateExt>
 8002da4:	e0bfffc5 	stb	r2,-1(fp)
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
 8002da8:	e0bfffc3 	ldbu	r2,-1(fp)
 8002dac:	000b883a 	mov	r5,zero
 8002db0:	1009883a 	mov	r4,r2
 8002db4:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
 8002db8:	8015bcc0 	call	8015bcc <OSStart>

  
  while(1); /* Correct Program Flow never gets here. */
 8002dbc:	003fff06 	br	8002dbc <main+0x7c>

08002dc0 <led_bit_toggle>:
 * bit 0, 1, 2, 3 - clear LED0, 1, 2, or 3
 * bit 4, 5, 6, 7 - set   LED0, 1, 2, or 3
 */
 
void led_bit_toggle(OS_FLAGS bit)
{
 8002dc0:	defffc04 	addi	sp,sp,-16
 8002dc4:	dfc00315 	stw	ra,12(sp)
 8002dc8:	df000215 	stw	fp,8(sp)
 8002dcc:	df000204 	addi	fp,sp,8
 8002dd0:	2005883a 	mov	r2,r4
 8002dd4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAGS  led_4_val;
    INT8U error_code;
    
    led_4_val = OSFlagQuery(SSSLEDEventFlag, &error_code);
 8002dd8:	d0a05917 	ldw	r2,-32412(gp)
 8002ddc:	e0ffff44 	addi	r3,fp,-3
 8002de0:	180b883a 	mov	r5,r3
 8002de4:	1009883a 	mov	r4,r2
 8002de8:	80185180 	call	8018518 <OSFlagQuery>
 8002dec:	e0bfff8d 	sth	r2,-2(fp)
    alt_uCOSIIErrorHandler(error_code, 0);
 8002df0:	e0bfff43 	ldbu	r2,-3(fp)
 8002df4:	10803fcc 	andi	r2,r2,255
 8002df8:	000b883a 	mov	r5,zero
 8002dfc:	1009883a 	mov	r4,r2
 8002e00:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>

    if ( bit < 16 )
 8002e04:	e0bffe0b 	ldhu	r2,-8(fp)
 8002e08:	10800428 	cmpgeui	r2,r2,16
 8002e0c:	10000f1e 	bne	r2,zero,8002e4c <led_bit_toggle+0x8c>
    {
        led_4_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_CLR, &error_code);
 8002e10:	d0a05917 	ldw	r2,-32412(gp)
 8002e14:	e0fffe0b 	ldhu	r3,-8(fp)
 8002e18:	e13fff44 	addi	r4,fp,-3
 8002e1c:	200f883a 	mov	r7,r4
 8002e20:	000d883a 	mov	r6,zero
 8002e24:	180b883a 	mov	r5,r3
 8002e28:	1009883a 	mov	r4,r2
 8002e2c:	801816c0 	call	801816c <OSFlagPost>
 8002e30:	e0bfff8d 	sth	r2,-2(fp)
        alt_uCOSIIErrorHandler(error_code, 0);
 8002e34:	e0bfff43 	ldbu	r2,-3(fp)
 8002e38:	10803fcc 	andi	r2,r2,255
 8002e3c:	000b883a 	mov	r5,zero
 8002e40:	1009883a 	mov	r4,r2
 8002e44:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
 8002e48:	00001006 	br	8002e8c <led_bit_toggle+0xcc>
    }
    else
    {
        // shift the set bits into positions 0, 1, 2, or 3
        led_4_val = OSFlagPost(SSSLEDEventFlag, bit >> 4, OS_FLAG_SET, &error_code);
 8002e4c:	d0e05917 	ldw	r3,-32412(gp)
 8002e50:	e0bffe0b 	ldhu	r2,-8(fp)
 8002e54:	1004d13a 	srli	r2,r2,4
 8002e58:	10bfffcc 	andi	r2,r2,65535
 8002e5c:	e13fff44 	addi	r4,fp,-3
 8002e60:	200f883a 	mov	r7,r4
 8002e64:	01800044 	movi	r6,1
 8002e68:	100b883a 	mov	r5,r2
 8002e6c:	1809883a 	mov	r4,r3
 8002e70:	801816c0 	call	801816c <OSFlagPost>
 8002e74:	e0bfff8d 	sth	r2,-2(fp)
        alt_uCOSIIErrorHandler(error_code, 0);
 8002e78:	e0bfff43 	ldbu	r2,-3(fp)
 8002e7c:	10803fcc 	andi	r2,r2,255
 8002e80:	000b883a 	mov	r5,zero
 8002e84:	1009883a 	mov	r4,r2
 8002e88:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
    }

    #ifdef LED_PIO_BASE
       IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led_4_val);
 8002e8c:	e0ffff8b 	ldhu	r3,-2(fp)
 8002e90:	00860034 	movhi	r2,6144
 8002e94:	10cff835 	stwio	r3,16352(r2)
       //printf("Value for LED_PIO_BASE set to %d.\n", (INT8U)led_4_val);
    #endif
      
    return;
 8002e98:	0001883a 	nop
    //    {
    //       led_4_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_SET, &error_code);
    //       alt_uCOSIIErrorHandler(error_code, 0);
    //    }

}
 8002e9c:	e037883a 	mov	sp,fp
 8002ea0:	dfc00117 	ldw	ra,4(sp)
 8002ea4:	df000017 	ldw	fp,0(sp)
 8002ea8:	dec00204 	addi	sp,sp,8
 8002eac:	f800283a 	ret

08002eb0 <LEDManagementTask>:
 * The task will read the SSSLedCommandQ for an
 * in-coming message command from the SSSSimpleSocketServerTask.
 */

void LEDManagementTask()
{
 8002eb0:	defffc04 	addi	sp,sp,-16
 8002eb4:	dfc00315 	stw	ra,12(sp)
 8002eb8:	df000215 	stw	fp,8(sp)
 8002ebc:	df000204 	addi	fp,sp,8
  INT32U led_command;
  INT8U error_code;

  while(1)
  {
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
 8002ec0:	d0a05817 	ldw	r2,-32416(gp)
 8002ec4:	e0fffec4 	addi	r3,fp,-5
 8002ec8:	180d883a 	mov	r6,r3
 8002ecc:	000b883a 	mov	r5,zero
 8002ed0:	1009883a 	mov	r4,r2
 8002ed4:	80197740 	call	8019774 <OSQPend>
 8002ed8:	e0bfff15 	stw	r2,-4(fp)

    alt_uCOSIIErrorHandler(error_code, 0);
 8002edc:	e0bffec3 	ldbu	r2,-5(fp)
 8002ee0:	10803fcc 	andi	r2,r2,255
 8002ee4:	000b883a 	mov	r5,zero
 8002ee8:	1009883a 	mov	r4,r2
 8002eec:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>

    led_bit_toggle(led_command & 0xff);
 8002ef0:	e0bfff17 	ldw	r2,-4(fp)
 8002ef4:	10bfffcc 	andi	r2,r2,65535
 8002ef8:	10803fcc 	andi	r2,r2,255
 8002efc:	1009883a 	mov	r4,r2
 8002f00:	8002dc00 	call	8002dc0 <led_bit_toggle>
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
 8002f04:	003fee06 	br	8002ec0 <LEDManagementTask+0x10>

08002f08 <get_mac_addr>:
* Read the MAC address in a board specific way. Prompt user to enter serial 
* number to generate MAC address if failed to read from flash.
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
 8002f08:	defffb04 	addi	sp,sp,-20
 8002f0c:	dfc00415 	stw	ra,16(sp)
 8002f10:	df000315 	stw	fp,12(sp)
 8002f14:	df000304 	addi	fp,sp,12
 8002f18:	e13ffe15 	stw	r4,-8(fp)
 8002f1c:	e17ffd15 	stw	r5,-12(fp)
    error_t error = 0;
 8002f20:	e03fff15 	stw	zero,-4(fp)
    
    error = get_board_mac_addr(mac_addr);
 8002f24:	e13ffd17 	ldw	r4,-12(fp)
 8002f28:	80032d00 	call	80032d0 <get_board_mac_addr>
 8002f2c:	e0bfff15 	stw	r2,-4(fp)
    
    if(error)
 8002f30:	e0bfff17 	ldw	r2,-4(fp)
 8002f34:	10000326 	beq	r2,zero,8002f44 <get_mac_addr+0x3c>
    {
        /* Failed read MAC address from flash, prompt user to enter serial 
           number to generate MAC address. */
        error = generate_mac_addr(mac_addr);
 8002f38:	e13ffd17 	ldw	r4,-12(fp)
 8002f3c:	80031a00 	call	80031a0 <generate_mac_addr>
 8002f40:	e0bfff15 	stw	r2,-4(fp)
    }
    return error;
 8002f44:	e0bfff17 	ldw	r2,-4(fp)
}
 8002f48:	e037883a 	mov	sp,fp
 8002f4c:	dfc00117 	ldw	ra,4(sp)
 8002f50:	df000017 	ldw	fp,0(sp)
 8002f54:	dec00204 	addi	sp,sp,8
 8002f58:	f800283a 	ret

08002f5c <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
 8002f5c:	defffb04 	addi	sp,sp,-20
 8002f60:	df000415 	stw	fp,16(sp)
 8002f64:	df000404 	addi	fp,sp,16
 8002f68:	e13fff15 	stw	r4,-4(fp)
 8002f6c:	e17ffe15 	stw	r5,-8(fp)
 8002f70:	e1bffd15 	stw	r6,-12(fp)
 8002f74:	e1fffc15 	stw	r7,-16(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
 8002f78:	e0bffe17 	ldw	r2,-8(fp)
 8002f7c:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
 8002f80:	e0bffc17 	ldw	r2,-16(fp)
 8002f84:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
 8002f88:	e0fffd17 	ldw	r3,-12(fp)
 8002f8c:	00804034 	movhi	r2,256
 8002f90:	10bfffc4 	addi	r2,r2,-1
 8002f94:	18800015 	stw	r2,0(r3)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 8002f98:	e0800117 	ldw	r2,4(fp)
 8002f9c:	00c00044 	movi	r3,1
 8002fa0:	10c00015 	stw	r3,0(r2)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
 8002fa4:	00800044 	movi	r2,1
}
 8002fa8:	e037883a 	mov	sp,fp
 8002fac:	df000017 	ldw	fp,0(sp)
 8002fb0:	dec00104 	addi	sp,sp,4
 8002fb4:	f800283a 	ret

08002fb8 <get_serial_number>:
*
* Prompt user to enter 9-digit serial number. 
*
*/
alt_u32 get_serial_number (void)
{
 8002fb8:	defff904 	addi	sp,sp,-28
 8002fbc:	dfc00615 	stw	ra,24(sp)
 8002fc0:	df000515 	stw	fp,20(sp)
 8002fc4:	df000504 	addi	fp,sp,20
    alt_u32 ser_num = 0;
 8002fc8:	e03fff15 	stw	zero,-4(fp)
    char serial_number[9];
    int i = 0;
 8002fcc:	e03ffe15 	stw	zero,-8(fp)
    
    while(!ser_num)
 8002fd0:	00005606 	br	800312c <get_serial_number+0x174>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
 8002fd4:	01020174 	movhi	r4,2053
 8002fd8:	213e3104 	addi	r4,r4,-1852
 8002fdc:	8003ca80 	call	8003ca8 <puts>
        printf("label under your Nios dev. board. The first 3 digits of the \n");
 8002fe0:	01020174 	movhi	r4,2053
 8002fe4:	213e4104 	addi	r4,r4,-1788
 8002fe8:	8003ca80 	call	8003ca8 <puts>
        printf("label are ASJ and the serial number follows this.\n -->");
 8002fec:	01020174 	movhi	r4,2053
 8002ff0:	213e5104 	addi	r4,r4,-1724
 8002ff4:	8003b840 	call	8003b84 <printf>
        
        for(i=0; i<9; i++)
 8002ff8:	e03ffe15 	stw	zero,-8(fp)
 8002ffc:	00001d06 	br	8003074 <get_serial_number+0xbc>
        {
            serial_number[i] = getchar();
 8003000:	80037440 	call	8003744 <getchar>
 8003004:	1007883a 	mov	r3,r2
 8003008:	e0bffe17 	ldw	r2,-8(fp)
 800300c:	e085883a 	add	r2,fp,r2
 8003010:	10fffbc5 	stb	r3,-17(r2)
            putchar(serial_number[i]);
 8003014:	e0bffe17 	ldw	r2,-8(fp)
 8003018:	e085883a 	add	r2,fp,r2
 800301c:	10bffbc3 	ldbu	r2,-17(r2)
 8003020:	10803fcc 	andi	r2,r2,255
 8003024:	1080201c 	xori	r2,r2,128
 8003028:	10bfe004 	addi	r2,r2,-128
 800302c:	1009883a 	mov	r4,r2
 8003030:	8003bc40 	call	8003bc4 <putchar>
            
            /* Handle backspaces.  How civilized. */
            if ((serial_number[i] == 0x08) && (i >= 0)) 
 8003034:	e0bffe17 	ldw	r2,-8(fp)
 8003038:	e085883a 	add	r2,fp,r2
 800303c:	10bffbc3 	ldbu	r2,-17(r2)
 8003040:	10803fcc 	andi	r2,r2,255
 8003044:	1080201c 	xori	r2,r2,128
 8003048:	10bfe004 	addi	r2,r2,-128
 800304c:	10800218 	cmpnei	r2,r2,8
 8003050:	1000051e 	bne	r2,zero,8003068 <get_serial_number+0xb0>
 8003054:	e0bffe17 	ldw	r2,-8(fp)
 8003058:	10000316 	blt	r2,zero,8003068 <get_serial_number+0xb0>
            {
                i--;
 800305c:	e0bffe17 	ldw	r2,-8(fp)
 8003060:	10bfffc4 	addi	r2,r2,-1
 8003064:	e0bffe15 	stw	r2,-8(fp)
        for(i=0; i<9; i++)
 8003068:	e0bffe17 	ldw	r2,-8(fp)
 800306c:	10800044 	addi	r2,r2,1
 8003070:	e0bffe15 	stw	r2,-8(fp)
 8003074:	e0bffe17 	ldw	r2,-8(fp)
 8003078:	10800250 	cmplti	r2,r2,9
 800307c:	103fe01e 	bne	r2,zero,8003000 <get_serial_number+0x48>
            }
        }
        printf("\n");
 8003080:	01000284 	movi	r4,10
 8003084:	8003bc40 	call	8003bc4 <putchar>
                
        for(i=0; i<9; i++)
 8003088:	e03ffe15 	stw	zero,-8(fp)
 800308c:	00002406 	br	8003120 <get_serial_number+0x168>
        {
            if (isdigit(serial_number[i]))
 8003090:	e0bffe17 	ldw	r2,-8(fp)
 8003094:	e085883a 	add	r2,fp,r2
 8003098:	10bffbc3 	ldbu	r2,-17(r2)
 800309c:	10803fcc 	andi	r2,r2,255
 80030a0:	1080201c 	xori	r2,r2,128
 80030a4:	10bfe004 	addi	r2,r2,-128
 80030a8:	10c00044 	addi	r3,r2,1
 80030ac:	00820174 	movhi	r2,2053
 80030b0:	10bef004 	addi	r2,r2,-1088
 80030b4:	1885883a 	add	r2,r3,r2
 80030b8:	10800003 	ldbu	r2,0(r2)
 80030bc:	10803fcc 	andi	r2,r2,255
 80030c0:	1080010c 	andi	r2,r2,4
 80030c4:	10000e26 	beq	r2,zero,8003100 <get_serial_number+0x148>
            {
                ser_num *= 10;
 80030c8:	e0bfff17 	ldw	r2,-4(fp)
 80030cc:	108002a4 	muli	r2,r2,10
 80030d0:	e0bfff15 	stw	r2,-4(fp)
                ser_num += serial_number[i] - '0';
 80030d4:	e0bffe17 	ldw	r2,-8(fp)
 80030d8:	e085883a 	add	r2,fp,r2
 80030dc:	10bffbc3 	ldbu	r2,-17(r2)
 80030e0:	10c03fcc 	andi	r3,r2,255
 80030e4:	18c0201c 	xori	r3,r3,128
 80030e8:	18ffe004 	addi	r3,r3,-128
 80030ec:	e0bfff17 	ldw	r2,-4(fp)
 80030f0:	1885883a 	add	r2,r3,r2
 80030f4:	10bff404 	addi	r2,r2,-48
 80030f8:	e0bfff15 	stw	r2,-4(fp)
 80030fc:	00000506 	br	8003114 <get_serial_number+0x15c>
            }
            else
            {
                ser_num = 0;
 8003100:	e03fff15 	stw	zero,-4(fp)
                printf("Serial number only contains decimal digits and is non-zero\n");
 8003104:	01020174 	movhi	r4,2053
 8003108:	213e5f04 	addi	r4,r4,-1668
 800310c:	8003ca80 	call	8003ca8 <puts>
                break;
 8003110:	00000606 	br	800312c <get_serial_number+0x174>
        for(i=0; i<9; i++)
 8003114:	e0bffe17 	ldw	r2,-8(fp)
 8003118:	10800044 	addi	r2,r2,1
 800311c:	e0bffe15 	stw	r2,-8(fp)
 8003120:	e0bffe17 	ldw	r2,-8(fp)
 8003124:	10800250 	cmplti	r2,r2,9
 8003128:	103fd91e 	bne	r2,zero,8003090 <get_serial_number+0xd8>
    while(!ser_num)
 800312c:	e0bfff17 	ldw	r2,-4(fp)
 8003130:	103fa826 	beq	r2,zero,8002fd4 <get_serial_number+0x1c>
            }
        }
    }
    
    return ser_num;
 8003134:	e0bfff17 	ldw	r2,-4(fp)
}
 8003138:	e037883a 	mov	sp,fp
 800313c:	dfc00117 	ldw	ra,4(sp)
 8003140:	df000017 	ldw	fp,0(sp)
 8003144:	dec00204 	addi	sp,sp,8
 8003148:	f800283a 	ret

0800314c <generate_and_store_mac_addr>:
 * sections. These fail-safe static settings are compatible with previous
 * Nios Ethernet designs, and allow the "factory-safe" design to behave 
 * as expected if the last flash sector is erased.
 */
error_t generate_and_store_mac_addr()
{
 800314c:	defffc04 	addi	sp,sp,-16
 8003150:	dfc00315 	stw	ra,12(sp)
 8003154:	df000215 	stw	fp,8(sp)
 8003158:	df000204 	addi	fp,sp,8
    error_t error = -1;
 800315c:	00bfffc4 	movi	r2,-1
 8003160:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 ser_num = 0;
 8003164:	e03ffe15 	stw	zero,-8(fp)
#ifdef EXT_FLASH_NAME
    char flash_content[32]; 
    alt_flash_fd* flash_handle;
#endif
    
    printf("Can't read the MAC address from your board.\n");
 8003168:	01020174 	movhi	r4,2053
 800316c:	213e6e04 	addi	r4,r4,-1608
 8003170:	8003ca80 	call	8003ca8 <puts>
    printf("A MAC address and static network settings will be assigned.\n");
 8003174:	01020174 	movhi	r4,2053
 8003178:	213e7904 	addi	r4,r4,-1564
 800317c:	8003ca80 	call	8003ca8 <puts>
    
    ser_num = get_serial_number();
 8003180:	8002fb80 	call	8002fb8 <get_serial_number>
 8003184:	e0bffe15 	stw	r2,-8(fp)
            error = 0;
        }
#endif          
    }

    return error;    
 8003188:	e0bfff17 	ldw	r2,-4(fp)
}
 800318c:	e037883a 	mov	sp,fp
 8003190:	dfc00117 	ldw	ra,4(sp)
 8003194:	df000017 	ldw	fp,0(sp)
 8003198:	dec00204 	addi	sp,sp,8
 800319c:	f800283a 	ret

080031a0 <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
 80031a0:	defff804 	addi	sp,sp,-32
 80031a4:	dfc00715 	stw	ra,28(sp)
 80031a8:	df000615 	stw	fp,24(sp)
 80031ac:	df000604 	addi	fp,sp,24
 80031b0:	e13ffd15 	stw	r4,-12(fp)
    error_t error = -1;
 80031b4:	00bfffc4 	movi	r2,-1
 80031b8:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 ser_num = 0;
 80031bc:	e03ffe15 	stw	zero,-8(fp)
/* TCM 10-12-2021
 * The code below MODIFIED to not ask about serial number. Always return
 * specific (known good) MAC Address
 *   */

    printf("\nCan't read the MAC address from your board. We will assign you\n");
 80031c0:	01020174 	movhi	r4,2053
 80031c4:	213e8804 	addi	r4,r4,-1504
 80031c8:	8003ca80 	call	8003ca8 <puts>
    printf("a MAC address.\n\n");
 80031cc:	01020174 	movhi	r4,2053
 80031d0:	213e9804 	addi	r4,r4,-1440
 80031d4:	8003ca80 	call	8003ca8 <puts>
    
/*    ser_num = get_serial_number(); */
    ser_num = 1;
 80031d8:	00800044 	movi	r2,1
 80031dc:	e0bffe15 	stw	r2,-8(fp)
  
    if (ser_num)
 80031e0:	e0bffe17 	ldw	r2,-8(fp)
 80031e4:	10003426 	beq	r2,zero,80032b8 <generate_mac_addr+0x118>
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
 80031e8:	e0bffd17 	ldw	r2,-12(fp)
 80031ec:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x7;
 80031f0:	e0bffd17 	ldw	r2,-12(fp)
 80031f4:	10800044 	addi	r2,r2,1
 80031f8:	00c001c4 	movi	r3,7
 80031fc:	10c00005 	stb	r3,0(r2)
        mac_addr[2] = 0xed;
 8003200:	e0bffd17 	ldw	r2,-12(fp)
 8003204:	10800084 	addi	r2,r2,2
 8003208:	00fffb44 	movi	r3,-19
 800320c:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
*/

		/* TCM - Force a valid MAC address */
        mac_addr[3] = 0x2A;
 8003210:	e0bffd17 	ldw	r2,-12(fp)
 8003214:	108000c4 	addi	r2,r2,3
 8003218:	00c00a84 	movi	r3,42
 800321c:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = 0x22;
 8003220:	e0bffd17 	ldw	r2,-12(fp)
 8003224:	10800104 	addi	r2,r2,4
 8003228:	00c00884 	movi	r3,34
 800322c:	10c00005 	stb	r3,0(r2)
        mac_addr[5] = 0x16;
 8003230:	e0bffd17 	ldw	r2,-12(fp)
 8003234:	10800144 	addi	r2,r2,5
 8003238:	00c00584 	movi	r3,22
 800323c:	10c00005 	stb	r3,0(r2)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
 8003240:	e0bffd17 	ldw	r2,-12(fp)
 8003244:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003248:	11403fcc 	andi	r5,r2,255
            mac_addr[1],
 800324c:	e0bffd17 	ldw	r2,-12(fp)
 8003250:	10800044 	addi	r2,r2,1
 8003254:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003258:	11803fcc 	andi	r6,r2,255
            mac_addr[2],
 800325c:	e0bffd17 	ldw	r2,-12(fp)
 8003260:	10800084 	addi	r2,r2,2
 8003264:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003268:	11c03fcc 	andi	r7,r2,255
            mac_addr[3],
 800326c:	e0bffd17 	ldw	r2,-12(fp)
 8003270:	108000c4 	addi	r2,r2,3
 8003274:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003278:	10803fcc 	andi	r2,r2,255
            mac_addr[4],
 800327c:	e0fffd17 	ldw	r3,-12(fp)
 8003280:	18c00104 	addi	r3,r3,4
 8003284:	18c00003 	ldbu	r3,0(r3)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003288:	18c03fcc 	andi	r3,r3,255
            mac_addr[5]);
 800328c:	e13ffd17 	ldw	r4,-12(fp)
 8003290:	21000144 	addi	r4,r4,5
 8003294:	21000003 	ldbu	r4,0(r4)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8003298:	21003fcc 	andi	r4,r4,255
 800329c:	d9000215 	stw	r4,8(sp)
 80032a0:	d8c00115 	stw	r3,4(sp)
 80032a4:	d8800015 	stw	r2,0(sp)
 80032a8:	01020174 	movhi	r4,2053
 80032ac:	213e9c04 	addi	r4,r4,-1424
 80032b0:	8003b840 	call	8003b84 <printf>
        
        error = 0;
 80032b4:	e03fff15 	stw	zero,-4(fp)
    }
  
    return error;    
 80032b8:	e0bfff17 	ldw	r2,-4(fp)
}
 80032bc:	e037883a 	mov	sp,fp
 80032c0:	dfc00117 	ldw	ra,4(sp)
 80032c4:	df000017 	ldw	fp,0(sp)
 80032c8:	dec00204 	addi	sp,sp,8
 80032cc:	f800283a 	ret

080032d0 <get_board_mac_addr>:
*
* Read the MAC address in a board specific way
*
*/
error_t get_board_mac_addr(unsigned char mac_addr[6])
{
 80032d0:	defffd04 	addi	sp,sp,-12
 80032d4:	df000215 	stw	fp,8(sp)
 80032d8:	df000204 	addi	fp,sp,8
 80032dc:	e13ffe15 	stw	r4,-8(fp)
    error_t error = -1;
 80032e0:	00bfffc4 	movi	r2,-1
 80032e4:	e0bfff15 	stw	r2,-4(fp)
            mac_addr[5]);
    
    }
#endif
    
    return error;
 80032e8:	e0bfff17 	ldw	r2,-4(fp)
}
 80032ec:	e037883a 	mov	sp,fp
 80032f0:	df000017 	ldw	fp,0(sp)
 80032f4:	dec00104 	addi	sp,sp,4
 80032f8:	f800283a 	ret

080032fc <FindLastFlashSectorOffset>:
 * in pLastFlashSectorOffset.
 */

int FindLastFlashSectorOffset(
    alt_u32                     *pLastFlashSectorOffset)
{
 80032fc:	defffd04 	addi	sp,sp,-12
 8003300:	df000215 	stw	fp,8(sp)
 8003304:	df000204 	addi	fp,sp,8
 8003308:	e13ffe15 	stw	r4,-8(fp)
    int                         error = -1;
 800330c:	00bfffc4 	movi	r2,-1
 8003310:	e0bfff15 	stw	r2,-4(fp)
    /* Return results. */
    if (!error)
        *pLastFlashSectorOffset = lastFlashSectorOffset;
#endif

    return (error);
 8003314:	e0bfff17 	ldw	r2,-4(fp)
}
 8003318:	e037883a 	mov	sp,fp
 800331c:	df000017 	ldw	fp,0(sp)
 8003320:	dec00104 	addi	sp,sp,4
 8003324:	f800283a 	ret

08003328 <SSSCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
 8003328:	defffd04 	addi	sp,sp,-12
 800332c:	dfc00215 	stw	ra,8(sp)
 8003330:	df000115 	stw	fp,4(sp)
 8003334:	df000104 	addi	fp,sp,4
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
 8003338:	01400784 	movi	r5,30
 800333c:	010201b4 	movhi	r4,2054
 8003340:	21276e04 	addi	r4,r4,-25160
 8003344:	80192780 	call	8019278 <OSQCreate>
 8003348:	d0a05815 	stw	r2,-32416(gp)
  if (!SSSLEDCommandQ)
 800334c:	d0a05817 	ldw	r2,-32416(gp)
 8003350:	1000041e 	bne	r2,zero,8003364 <SSSCreateOSDataStructs+0x3c>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 8003354:	01420174 	movhi	r5,2053
 8003358:	297eab04 	addi	r5,r5,-1364
 800335c:	01003fc4 	movi	r4,255
 8003360:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
 8003364:	e0bfffc4 	addi	r2,fp,-1
 8003368:	100b883a 	mov	r5,r2
 800336c:	0009883a 	mov	r4,zero
 8003370:	801751c0 	call	801751c <OSFlagCreate>
 8003374:	d0a05915 	stw	r2,-32412(gp)
  if (!SSSLEDEventFlag)
 8003378:	d0a05917 	ldw	r2,-32412(gp)
 800337c:	1000051e 	bne	r2,zero,8003394 <SSSCreateOSDataStructs+0x6c>
  {
     alt_uCOSIIErrorHandler(error_code, 0);
 8003380:	e0bfffc3 	ldbu	r2,-1(fp)
 8003384:	10803fcc 	andi	r2,r2,255
 8003388:	000b883a 	mov	r5,zero
 800338c:	1009883a 	mov	r4,r2
 8003390:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>
  }
}
 8003394:	0001883a 	nop
 8003398:	e037883a 	mov	sp,fp
 800339c:	dfc00117 	ldw	ra,4(sp)
 80033a0:	df000017 	ldw	fp,0(sp)
 80033a4:	dec00204 	addi	sp,sp,8
 80033a8:	f800283a 	ret

080033ac <SSSCreateTasks>:
/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */
 
void SSSCreateTasks(void)
{
 80033ac:	defff804 	addi	sp,sp,-32
 80033b0:	dfc00715 	stw	ra,28(sp)
 80033b4:	df000615 	stw	fp,24(sp)
 80033b8:	df000604 	addi	fp,sp,24
   INT8U error_code;
  
   error_code = OSTaskCreateExt(LEDManagementTask,
 80033bc:	d8000415 	stw	zero,16(sp)
 80033c0:	d8000315 	stw	zero,12(sp)
 80033c4:	00820004 	movi	r2,2048
 80033c8:	d8800215 	stw	r2,8(sp)
 80033cc:	008201b4 	movhi	r2,2054
 80033d0:	10a78c04 	addi	r2,r2,-25040
 80033d4:	d8800115 	stw	r2,4(sp)
 80033d8:	008001c4 	movi	r2,7
 80033dc:	d8800015 	stw	r2,0(sp)
 80033e0:	01c001c4 	movi	r7,7
 80033e4:	018201b4 	movhi	r6,2054
 80033e8:	31af8b04 	addi	r6,r6,-16852
 80033ec:	000b883a 	mov	r5,zero
 80033f0:	01020034 	movhi	r4,2048
 80033f4:	210bac04 	addi	r4,r4,11952
 80033f8:	801b3900 	call	801b390 <OSTaskCreateExt>
 80033fc:	e0bfffc5 	stb	r2,-1(fp)
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
 8003400:	e0bfffc3 	ldbu	r2,-1(fp)
 8003404:	000b883a 	mov	r5,zero
 8003408:	1009883a 	mov	r4,r2
 800340c:	80021180 	call	8002118 <alt_uCOSIIErrorHandler>

}
 8003410:	0001883a 	nop
 8003414:	e037883a 	mov	sp,fp
 8003418:	dfc00117 	ldw	ra,4(sp)
 800341c:	df000017 	ldw	fp,0(sp)
 8003420:	dec00204 	addi	sp,sp,8
 8003424:	f800283a 	ret

08003428 <SSSSimpleSocketServerTask>:
 * OpenHPSDR discovery socket on port 1024. It listens for any received packet
 * on any established socket and dispatches it accordingly.
 *
 */
void SSSSimpleSocketServerTask()
{
 8003428:	deff9904 	addi	sp,sp,-412
 800342c:	dfc06615 	stw	ra,408(sp)
 8003430:	df006515 	stw	fp,404(sp)
 8003434:	df006504 	addi	fp,sp,404
  int fd_disc_recv;		// file descriptor (fd) of the receive discovery socket
  struct sockaddr_in addrhost, nilclient;
  fd_set readfds;

  memset(&addrhost, 0, sizeof(struct sockaddr_in));
 8003438:	e0bff604 	addi	r2,fp,-40
 800343c:	01800404 	movi	r6,16
 8003440:	000b883a 	mov	r5,zero
 8003444:	1009883a 	mov	r4,r2
 8003448:	80038cc0 	call	80038cc <memset>
  memset(&nilclient, 0, sizeof(struct sockaddr_in));		// discovery request doesn't use client address / port
 800344c:	e0bff204 	addi	r2,fp,-56
 8003450:	01800404 	movi	r6,16
 8003454:	000b883a 	mov	r5,zero
 8003458:	1009883a 	mov	r4,r2
 800345c:	80038cc0 	call	80038cc <memset>
  
  initChan();		// Clear table of UDP Channels.
 8003460:	80003800 	call	8000380 <initChan>
  initItfcMap();		// Build the Interface Map table.
 8003464:	8001db00 	call	8001db0 <initItfcMap>
   * protocol and address families respectively. However, there is usually only
   * 1 address per protocol family. Thus PF_INET and AF_INET can be interchanged.
   * In the case of NicheStack, only the use of AF_INET is supported.
   * PF_INET is not supported in NicheStack.
   */ 
  if ((fd_disc_recv = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 8003468:	000d883a 	mov	r6,zero
 800346c:	01400084 	movi	r5,2
 8003470:	01000084 	movi	r4,2
 8003474:	8032f580 	call	8032f58 <t_socket>
 8003478:	e0bffd15 	stw	r2,-12(fp)
 800347c:	e0bffd17 	ldw	r2,-12(fp)
 8003480:	1000040e 	bge	r2,zero,8003494 <SSSSimpleSocketServerTask+0x6c>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Discovery Socket creation failed");
 8003484:	01420174 	movhi	r5,2053
 8003488:	297eb404 	addi	r5,r5,-1328
 800348c:	01003fc4 	movi	r4,255
 8003490:	80027b40 	call	80027b4 <alt_NetworkErrorHandler>
   * port and incoming address. In this case we're binding to SSS_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addrhost.sin_family = AF_INET;
 8003494:	00800084 	movi	r2,2
 8003498:	e0bff60d 	sth	r2,-40(fp)
  addrhost.sin_port = htons(1024);
 800349c:	00800104 	movi	r2,4
 80034a0:	e0bff68d 	sth	r2,-38(fp)
  addrhost.sin_addr.s_addr = INADDR_ANY;	//  any interface on our host
 80034a4:	e03ff715 	stw	zero,-36(fp)
  
  if ((bind(fd_disc_recv, (struct sockaddr *)&addrhost, sizeof(addrhost))) < 0)
 80034a8:	e0bff604 	addi	r2,fp,-40
 80034ac:	01800404 	movi	r6,16
 80034b0:	100b883a 	mov	r5,r2
 80034b4:	e13ffd17 	ldw	r4,-12(fp)
 80034b8:	8032fd80 	call	8032fd8 <t_bind>
 80034bc:	1000040e 	bge	r2,zero,80034d0 <SSSSimpleSocketServerTask+0xa8>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Discovery Bind failed");
 80034c0:	01420174 	movhi	r5,2053
 80034c4:	297ec004 	addi	r5,r5,-1280
 80034c8:	01003fc4 	movi	r4,255
 80034cc:	80027b40 	call	80027b4 <alt_NetworkErrorHandler>
  }

  int addresult = buildaddChan(fd_disc_recv, 'D', &addrhost, &nilclient);	// add discovery channel to table
 80034d0:	e0fff204 	addi	r3,fp,-56
 80034d4:	e0bff604 	addi	r2,fp,-40
 80034d8:	180f883a 	mov	r7,r3
 80034dc:	100d883a 	mov	r6,r2
 80034e0:	01401104 	movi	r5,68
 80034e4:	e13ffd17 	ldw	r4,-12(fp)
 80034e8:	800067c0 	call	800067c <buildaddChan>
 80034ec:	e0bffc15 	stw	r2,-16(fp)
  if (addresult < 0)
 80034f0:	e0bffc17 	ldw	r2,-16(fp)
 80034f4:	1000030e 	bge	r2,zero,8003504 <SSSSimpleSocketServerTask+0xdc>
  {
    printf("[FATAL] Could not add Discovery Channel.  We're probably dead.\n");
 80034f8:	01020174 	movhi	r4,2053
 80034fc:	213ec904 	addi	r4,r4,-1244
 8003500:	8003ca80 	call	8003ca8 <puts>
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
 8003504:	e03fb115 	stw	zero,-316(fp)

    int activelist[MAXUDPCHAN];							// list of active channels to retrieve
    int listenercount = allListeners(&activelist[0]);	// count of active channels retrieved
 8003508:	e0bf9c04 	addi	r2,fp,-400
 800350c:	1009883a 	mov	r4,r2
 8003510:	80007100 	call	8000710 <allListeners>
 8003514:	e0bffb15 	stw	r2,-20(fp)
    for(int i=0; i<listenercount; i++)
 8003518:	e03fff15 	stw	zero,-4(fp)
 800351c:	00000b06 	br	800354c <SSSSimpleSocketServerTask+0x124>
    	FD_SET(activelist[i], &readfds);	// add all active channels to select
 8003520:	e0bfff17 	ldw	r2,-4(fp)
 8003524:	100490ba 	slli	r2,r2,2
 8003528:	e085883a 	add	r2,fp,r2
 800352c:	10bf9c17 	ldw	r2,-400(r2)
 8003530:	e0ffb104 	addi	r3,fp,-316
 8003534:	180b883a 	mov	r5,r3
 8003538:	1009883a 	mov	r4,r2
 800353c:	80380f00 	call	80380f0 <ifd_set>
    for(int i=0; i<listenercount; i++)
 8003540:	e0bfff17 	ldw	r2,-4(fp)
 8003544:	10800044 	addi	r2,r2,1
 8003548:	e0bfff15 	stw	r2,-4(fp)
 800354c:	e0ffff17 	ldw	r3,-4(fp)
 8003550:	e0bffb17 	ldw	r2,-20(fp)
 8003554:	18bff216 	blt	r3,r2,8003520 <SSSSimpleSocketServerTask+0xf8>

    select(MAXUDPCHAN, &readfds, NULL, NULL, NULL);
 8003558:	e0bfb104 	addi	r2,fp,-316
 800355c:	d8000015 	stw	zero,0(sp)
 8003560:	000f883a 	mov	r7,zero
 8003564:	000d883a 	mov	r6,zero
 8003568:	100b883a 	mov	r5,r2
 800356c:	01000544 	movi	r4,21
 8003570:	802b6840 	call	802b684 <bsd_select>

    for(int i=0; i<listenercount; i++)
 8003574:	e03ffe15 	stw	zero,-8(fp)
 8003578:	00001b06 	br	80035e8 <SSSSimpleSocketServerTask+0x1c0>
    {
    	if (FD_ISSET(activelist[i], &readfds))		// if we got a packet for the listener
 800357c:	e0bffe17 	ldw	r2,-8(fp)
 8003580:	100490ba 	slli	r2,r2,2
 8003584:	e085883a 	add	r2,fp,r2
 8003588:	10bf9c17 	ldw	r2,-400(r2)
 800358c:	e0ffb104 	addi	r3,fp,-316
 8003590:	180b883a 	mov	r5,r3
 8003594:	1009883a 	mov	r4,r2
 8003598:	80381640 	call	8038164 <ifd_isset>
 800359c:	10000f26 	beq	r2,zero,80035dc <SSSSimpleSocketServerTask+0x1b4>
    	{
    		int index = findfdChan(activelist[i]);
 80035a0:	e0bffe17 	ldw	r2,-8(fp)
 80035a4:	100490ba 	slli	r2,r2,2
 80035a8:	e085883a 	add	r2,fp,r2
 80035ac:	10bf9c17 	ldw	r2,-400(r2)
 80035b0:	1009883a 	mov	r4,r2
 80035b4:	800054c0 	call	800054c <findfdChan>
 80035b8:	e0bffa15 	stw	r2,-24(fp)
    		if (index >= 0)
 80035bc:	e0bffa17 	ldw	r2,-24(fp)
 80035c0:	10000316 	blt	r2,zero,80035d0 <SSSSimpleSocketServerTask+0x1a8>
    			ProcessRxPacket(index);				// process the received packet, say which channel it's on
 80035c4:	e13ffa17 	ldw	r4,-24(fp)
 80035c8:	80007a00 	call	80007a0 <ProcessRxPacket>
 80035cc:	00000306 	br	80035dc <SSSSimpleSocketServerTask+0x1b4>
    		else
    			printf("ERROR: Received a Packet but no connection found.\n");
 80035d0:	01020174 	movhi	r4,2053
 80035d4:	213ed904 	addi	r4,r4,-1180
 80035d8:	8003ca80 	call	8003ca8 <puts>
    for(int i=0; i<listenercount; i++)
 80035dc:	e0bffe17 	ldw	r2,-8(fp)
 80035e0:	10800044 	addi	r2,r2,1
 80035e4:	e0bffe15 	stw	r2,-8(fp)
 80035e8:	e0fffe17 	ldw	r3,-8(fp)
 80035ec:	e0bffb17 	ldw	r2,-20(fp)
 80035f0:	18bfe216 	blt	r3,r2,800357c <SSSSimpleSocketServerTask+0x154>
  {
 80035f4:	003fc306 	br	8003504 <SSSSimpleSocketServerTask+0xdc>

080035f8 <_fprintf_r>:
 80035f8:	defffe04 	addi	sp,sp,-8
 80035fc:	2809883a 	mov	r4,r5
 8003600:	300b883a 	mov	r5,r6
 8003604:	dfc00015 	stw	ra,0(sp)
 8003608:	d9c00115 	stw	r7,4(sp)
 800360c:	d9800104 	addi	r6,sp,4
 8003610:	80089e40 	call	80089e4 <__vfprintf_internal>
 8003614:	dfc00017 	ldw	ra,0(sp)
 8003618:	dec00204 	addi	sp,sp,8
 800361c:	f800283a 	ret

08003620 <fprintf>:
 8003620:	defffd04 	addi	sp,sp,-12
 8003624:	dfc00015 	stw	ra,0(sp)
 8003628:	d9800115 	stw	r6,4(sp)
 800362c:	d9c00215 	stw	r7,8(sp)
 8003630:	d9800104 	addi	r6,sp,4
 8003634:	80089e40 	call	80089e4 <__vfprintf_internal>
 8003638:	dfc00017 	ldw	ra,0(sp)
 800363c:	dec00304 	addi	sp,sp,12
 8003640:	f800283a 	ret

08003644 <_fwrite_r>:
 8003644:	defff604 	addi	sp,sp,-40
 8003648:	dcc00815 	stw	r19,32(sp)
 800364c:	39a7383a 	mul	r19,r7,r6
 8003650:	00800044 	movi	r2,1
 8003654:	dc800715 	stw	r18,28(sp)
 8003658:	dc400615 	stw	r17,24(sp)
 800365c:	dc000515 	stw	r16,20(sp)
 8003660:	d9400015 	stw	r5,0(sp)
 8003664:	dfc00915 	stw	ra,36(sp)
 8003668:	dcc00115 	stw	r19,4(sp)
 800366c:	dcc00415 	stw	r19,16(sp)
 8003670:	dec00215 	stw	sp,8(sp)
 8003674:	d8800315 	stw	r2,12(sp)
 8003678:	d9400a17 	ldw	r5,40(sp)
 800367c:	3025883a 	mov	r18,r6
 8003680:	3821883a 	mov	r16,r7
 8003684:	2023883a 	mov	r17,r4
 8003688:	20000226 	beq	r4,zero,8003694 <_fwrite_r+0x50>
 800368c:	20800e17 	ldw	r2,56(r4)
 8003690:	10001826 	beq	r2,zero,80036f4 <_fwrite_r+0xb0>
 8003694:	2880030b 	ldhu	r2,12(r5)
 8003698:	10c8000c 	andi	r3,r2,8192
 800369c:	1800061e 	bne	r3,zero,80036b8 <_fwrite_r+0x74>
 80036a0:	28c01917 	ldw	r3,100(r5)
 80036a4:	0137ffc4 	movi	r4,-8193
 80036a8:	10880014 	ori	r2,r2,8192
 80036ac:	1906703a 	and	r3,r3,r4
 80036b0:	2880030d 	sth	r2,12(r5)
 80036b4:	28c01915 	stw	r3,100(r5)
 80036b8:	d9800204 	addi	r6,sp,8
 80036bc:	8809883a 	mov	r4,r17
 80036c0:	800b03c0 	call	800b03c <__sfvwrite_r>
 80036c4:	10000e26 	beq	r2,zero,8003700 <_fwrite_r+0xbc>
 80036c8:	d9000417 	ldw	r4,16(sp)
 80036cc:	900b883a 	mov	r5,r18
 80036d0:	9909c83a 	sub	r4,r19,r4
 80036d4:	8011fdc0 	call	8011fdc <__udivsi3>
 80036d8:	dfc00917 	ldw	ra,36(sp)
 80036dc:	dcc00817 	ldw	r19,32(sp)
 80036e0:	dc800717 	ldw	r18,28(sp)
 80036e4:	dc400617 	ldw	r17,24(sp)
 80036e8:	dc000517 	ldw	r16,20(sp)
 80036ec:	dec00a04 	addi	sp,sp,40
 80036f0:	f800283a 	ret
 80036f4:	800abdc0 	call	800abdc <__sinit>
 80036f8:	d9400a17 	ldw	r5,40(sp)
 80036fc:	003fe506 	br	8003694 <_fwrite_r+0x50>
 8003700:	8005883a 	mov	r2,r16
 8003704:	003ff406 	br	80036d8 <_fwrite_r+0x94>

08003708 <fwrite>:
 8003708:	00c20174 	movhi	r3,2053
 800370c:	2005883a 	mov	r2,r4
 8003710:	191bd417 	ldw	r4,28496(r3)
 8003714:	defffe04 	addi	sp,sp,-8
 8003718:	d9c00015 	stw	r7,0(sp)
 800371c:	300f883a 	mov	r7,r6
 8003720:	280d883a 	mov	r6,r5
 8003724:	100b883a 	mov	r5,r2
 8003728:	dfc00115 	stw	ra,4(sp)
 800372c:	80036440 	call	8003644 <_fwrite_r>
 8003730:	dfc00117 	ldw	ra,4(sp)
 8003734:	dec00204 	addi	sp,sp,8
 8003738:	f800283a 	ret

0800373c <_getchar_r>:
 800373c:	21400117 	ldw	r5,4(r4)
 8003740:	800b6381 	jmpi	800b638 <_getc_r>

08003744 <getchar>:
 8003744:	00820174 	movhi	r2,2053
 8003748:	111bd417 	ldw	r4,28496(r2)
 800374c:	21400117 	ldw	r5,4(r4)
 8003750:	800b6381 	jmpi	800b638 <_getc_r>

08003754 <memcmp>:
 8003754:	30800130 	cmpltui	r2,r6,4
 8003758:	10000b1e 	bne	r2,zero,8003788 <memcmp+0x34>
 800375c:	2144b03a 	or	r2,r4,r5
 8003760:	108000cc 	andi	r2,r2,3
 8003764:	1000171e 	bne	r2,zero,80037c4 <memcmp+0x70>
 8003768:	20c00017 	ldw	r3,0(r4)
 800376c:	28800017 	ldw	r2,0(r5)
 8003770:	1880141e 	bne	r3,r2,80037c4 <memcmp+0x70>
 8003774:	31bfff04 	addi	r6,r6,-4
 8003778:	30800128 	cmpgeui	r2,r6,4
 800377c:	21000104 	addi	r4,r4,4
 8003780:	29400104 	addi	r5,r5,4
 8003784:	103ff81e 	bne	r2,zero,8003768 <memcmp+0x14>
 8003788:	30bfffc4 	addi	r2,r6,-1
 800378c:	30000b26 	beq	r6,zero,80037bc <memcmp+0x68>
 8003790:	11800044 	addi	r6,r2,1
 8003794:	298d883a 	add	r6,r5,r6
 8003798:	00000106 	br	80037a0 <memcmp+0x4c>
 800379c:	29800726 	beq	r5,r6,80037bc <memcmp+0x68>
 80037a0:	20800003 	ldbu	r2,0(r4)
 80037a4:	28c00003 	ldbu	r3,0(r5)
 80037a8:	21000044 	addi	r4,r4,1
 80037ac:	29400044 	addi	r5,r5,1
 80037b0:	10fffa26 	beq	r2,r3,800379c <memcmp+0x48>
 80037b4:	10c5c83a 	sub	r2,r2,r3
 80037b8:	f800283a 	ret
 80037bc:	0005883a 	mov	r2,zero
 80037c0:	f800283a 	ret
 80037c4:	30bfffc4 	addi	r2,r6,-1
 80037c8:	003ff106 	br	8003790 <memcmp+0x3c>

080037cc <memcpy>:
 80037cc:	30c00430 	cmpltui	r3,r6,16
 80037d0:	2005883a 	mov	r2,r4
 80037d4:	18002d1e 	bne	r3,zero,800388c <memcpy+0xc0>
 80037d8:	2906b03a 	or	r3,r5,r4
 80037dc:	18c000cc 	andi	r3,r3,3
 80037e0:	1800351e 	bne	r3,zero,80038b8 <memcpy+0xec>
 80037e4:	32fffc04 	addi	r11,r6,-16
 80037e8:	5816d13a 	srli	r11,r11,4
 80037ec:	280f883a 	mov	r7,r5
 80037f0:	2007883a 	mov	r3,r4
 80037f4:	5ac00044 	addi	r11,r11,1
 80037f8:	5816913a 	slli	r11,r11,4
 80037fc:	22d5883a 	add	r10,r4,r11
 8003800:	39000117 	ldw	r4,4(r7)
 8003804:	3a400017 	ldw	r9,0(r7)
 8003808:	3a000217 	ldw	r8,8(r7)
 800380c:	19000115 	stw	r4,4(r3)
 8003810:	39000317 	ldw	r4,12(r7)
 8003814:	1a400015 	stw	r9,0(r3)
 8003818:	1a000215 	stw	r8,8(r3)
 800381c:	19000315 	stw	r4,12(r3)
 8003820:	18c00404 	addi	r3,r3,16
 8003824:	39c00404 	addi	r7,r7,16
 8003828:	50fff51e 	bne	r10,r3,8003800 <memcpy+0x34>
 800382c:	3100030c 	andi	r4,r6,12
 8003830:	2acb883a 	add	r5,r5,r11
 8003834:	320003cc 	andi	r8,r6,15
 8003838:	20002226 	beq	r4,zero,80038c4 <memcpy+0xf8>
 800383c:	280f883a 	mov	r7,r5
 8003840:	1813883a 	mov	r9,r3
 8003844:	39c00104 	addi	r7,r7,4
 8003848:	3abfff17 	ldw	r10,-4(r7)
 800384c:	41c9c83a 	sub	r4,r8,r7
 8003850:	2909883a 	add	r4,r5,r4
 8003854:	4a800015 	stw	r10,0(r9)
 8003858:	21000128 	cmpgeui	r4,r4,4
 800385c:	4a400104 	addi	r9,r9,4
 8003860:	203ff81e 	bne	r4,zero,8003844 <memcpy+0x78>
 8003864:	413fff04 	addi	r4,r8,-4
 8003868:	2008d0ba 	srli	r4,r4,2
 800386c:	318000cc 	andi	r6,r6,3
 8003870:	31ffffc4 	addi	r7,r6,-1
 8003874:	21000044 	addi	r4,r4,1
 8003878:	200890ba 	slli	r4,r4,2
 800387c:	1907883a 	add	r3,r3,r4
 8003880:	290b883a 	add	r5,r5,r4
 8003884:	3000041e 	bne	r6,zero,8003898 <memcpy+0xcc>
 8003888:	f800283a 	ret
 800388c:	2007883a 	mov	r3,r4
 8003890:	31ffffc4 	addi	r7,r6,-1
 8003894:	303ffc26 	beq	r6,zero,8003888 <memcpy+0xbc>
 8003898:	39c00044 	addi	r7,r7,1
 800389c:	19cf883a 	add	r7,r3,r7
 80038a0:	29800003 	ldbu	r6,0(r5)
 80038a4:	18c00044 	addi	r3,r3,1
 80038a8:	29400044 	addi	r5,r5,1
 80038ac:	19bfffc5 	stb	r6,-1(r3)
 80038b0:	38fffb1e 	bne	r7,r3,80038a0 <memcpy+0xd4>
 80038b4:	f800283a 	ret
 80038b8:	31ffffc4 	addi	r7,r6,-1
 80038bc:	2007883a 	mov	r3,r4
 80038c0:	003ff506 	br	8003898 <memcpy+0xcc>
 80038c4:	400d883a 	mov	r6,r8
 80038c8:	003ff106 	br	8003890 <memcpy+0xc4>

080038cc <memset>:
 80038cc:	20c000cc 	andi	r3,r4,3
 80038d0:	2005883a 	mov	r2,r4
 80038d4:	18003626 	beq	r3,zero,80039b0 <memset+0xe4>
 80038d8:	31ffffc4 	addi	r7,r6,-1
 80038dc:	30003326 	beq	r6,zero,80039ac <memset+0xe0>
 80038e0:	2811883a 	mov	r8,r5
 80038e4:	2007883a 	mov	r3,r4
 80038e8:	00000306 	br	80038f8 <memset+0x2c>
 80038ec:	39ffffc4 	addi	r7,r7,-1
 80038f0:	39bfffe0 	cmpeqi	r6,r7,-1
 80038f4:	30002d1e 	bne	r6,zero,80039ac <memset+0xe0>
 80038f8:	18c00044 	addi	r3,r3,1
 80038fc:	198000cc 	andi	r6,r3,3
 8003900:	1a3fffc5 	stb	r8,-1(r3)
 8003904:	303ff91e 	bne	r6,zero,80038ec <memset+0x20>
 8003908:	39000130 	cmpltui	r4,r7,4
 800390c:	2000221e 	bne	r4,zero,8003998 <memset+0xcc>
 8003910:	29003fcc 	andi	r4,r5,255
 8003914:	200c923a 	slli	r6,r4,8
 8003918:	3a000430 	cmpltui	r8,r7,16
 800391c:	3108b03a 	or	r4,r6,r4
 8003920:	200c943a 	slli	r6,r4,16
 8003924:	310cb03a 	or	r6,r6,r4
 8003928:	40000e1e 	bne	r8,zero,8003964 <memset+0x98>
 800392c:	393ffc04 	addi	r4,r7,-16
 8003930:	2008d13a 	srli	r4,r4,4
 8003934:	21000044 	addi	r4,r4,1
 8003938:	2008913a 	slli	r4,r4,4
 800393c:	1909883a 	add	r4,r3,r4
 8003940:	19800015 	stw	r6,0(r3)
 8003944:	19800115 	stw	r6,4(r3)
 8003948:	19800215 	stw	r6,8(r3)
 800394c:	19800315 	stw	r6,12(r3)
 8003950:	18c00404 	addi	r3,r3,16
 8003954:	20fffa1e 	bne	r4,r3,8003940 <memset+0x74>
 8003958:	3900030c 	andi	r4,r7,12
 800395c:	39c003cc 	andi	r7,r7,15
 8003960:	20000d26 	beq	r4,zero,8003998 <memset+0xcc>
 8003964:	1811883a 	mov	r8,r3
 8003968:	42000104 	addi	r8,r8,4
 800396c:	3a09c83a 	sub	r4,r7,r8
 8003970:	1909883a 	add	r4,r3,r4
 8003974:	21000128 	cmpgeui	r4,r4,4
 8003978:	41bfff15 	stw	r6,-4(r8)
 800397c:	203ffa1e 	bne	r4,zero,8003968 <memset+0x9c>
 8003980:	393fff04 	addi	r4,r7,-4
 8003984:	2008d0ba 	srli	r4,r4,2
 8003988:	39c000cc 	andi	r7,r7,3
 800398c:	21000044 	addi	r4,r4,1
 8003990:	200890ba 	slli	r4,r4,2
 8003994:	1907883a 	add	r3,r3,r4
 8003998:	38000426 	beq	r7,zero,80039ac <memset+0xe0>
 800399c:	19cf883a 	add	r7,r3,r7
 80039a0:	18c00044 	addi	r3,r3,1
 80039a4:	197fffc5 	stb	r5,-1(r3)
 80039a8:	38fffd1e 	bne	r7,r3,80039a0 <memset+0xd4>
 80039ac:	f800283a 	ret
 80039b0:	2007883a 	mov	r3,r4
 80039b4:	300f883a 	mov	r7,r6
 80039b8:	003fd306 	br	8003908 <memset+0x3c>

080039bc <_perror_r>:
 80039bc:	defffa04 	addi	sp,sp,-24
 80039c0:	dcc00415 	stw	r19,16(sp)
 80039c4:	dc400215 	stw	r17,8(sp)
 80039c8:	dc000115 	stw	r16,4(sp)
 80039cc:	dfc00515 	stw	ra,20(sp)
 80039d0:	dc800315 	stw	r18,12(sp)
 80039d4:	24c00317 	ldw	r19,12(r4)
 80039d8:	2023883a 	mov	r17,r4
 80039dc:	2821883a 	mov	r16,r5
 80039e0:	20000226 	beq	r4,zero,80039ec <_perror_r+0x30>
 80039e4:	20800e17 	ldw	r2,56(r4)
 80039e8:	10005426 	beq	r2,zero,8003b3c <_perror_r+0x180>
 80039ec:	980b883a 	mov	r5,r19
 80039f0:	8809883a 	mov	r4,r17
 80039f4:	800a7f40 	call	800a7f4 <_fflush_r>
 80039f8:	80000226 	beq	r16,zero,8003a04 <_perror_r+0x48>
 80039fc:	80800007 	ldb	r2,0(r16)
 8003a00:	10002f1e 	bne	r2,zero,8003ac0 <_perror_r+0x104>
 8003a04:	89400017 	ldw	r5,0(r17)
 8003a08:	d80f883a 	mov	r7,sp
 8003a0c:	01800044 	movi	r6,1
 8003a10:	8809883a 	mov	r4,r17
 8003a14:	8003dfc0 	call	8003dfc <_strerror_r>
 8003a18:	1025883a 	mov	r18,r2
 8003a1c:	10001026 	beq	r2,zero,8003a60 <_perror_r+0xa4>
 8003a20:	1009883a 	mov	r4,r2
 8003a24:	80044880 	call	8004488 <strlen>
 8003a28:	1021883a 	mov	r16,r2
 8003a2c:	1000031e 	bne	r2,zero,8003a3c <_perror_r+0x80>
 8003a30:	00000b06 	br	8003a60 <_perror_r+0xa4>
 8003a34:	90a5883a 	add	r18,r18,r2
 8003a38:	80000926 	beq	r16,zero,8003a60 <_perror_r+0xa4>
 8003a3c:	9809883a 	mov	r4,r19
 8003a40:	800a87c0 	call	800a87c <fileno>
 8003a44:	800f883a 	mov	r7,r16
 8003a48:	900d883a 	mov	r6,r18
 8003a4c:	100b883a 	mov	r5,r2
 8003a50:	8809883a 	mov	r4,r17
 8003a54:	8008ac00 	call	8008ac0 <_write_r>
 8003a58:	80a1c83a 	sub	r16,r16,r2
 8003a5c:	103ff50e 	bge	r2,zero,8003a34 <_perror_r+0x78>
 8003a60:	04820174 	movhi	r18,2053
 8003a64:	04000044 	movi	r16,1
 8003a68:	94bf9204 	addi	r18,r18,-440
 8003a6c:	9809883a 	mov	r4,r19
 8003a70:	800a87c0 	call	800a87c <fileno>
 8003a74:	800f883a 	mov	r7,r16
 8003a78:	900d883a 	mov	r6,r18
 8003a7c:	100b883a 	mov	r5,r2
 8003a80:	8809883a 	mov	r4,r17
 8003a84:	8008ac00 	call	8008ac0 <_write_r>
 8003a88:	80a1c83a 	sub	r16,r16,r2
 8003a8c:	10000216 	blt	r2,zero,8003a98 <_perror_r+0xdc>
 8003a90:	90a5883a 	add	r18,r18,r2
 8003a94:	803ff51e 	bne	r16,zero,8003a6c <_perror_r+0xb0>
 8003a98:	9880030b 	ldhu	r2,12(r19)
 8003a9c:	10bbffcc 	andi	r2,r2,61439
 8003aa0:	9880030d 	sth	r2,12(r19)
 8003aa4:	dfc00517 	ldw	ra,20(sp)
 8003aa8:	dcc00417 	ldw	r19,16(sp)
 8003aac:	dc800317 	ldw	r18,12(sp)
 8003ab0:	dc400217 	ldw	r17,8(sp)
 8003ab4:	dc000117 	ldw	r16,4(sp)
 8003ab8:	dec00604 	addi	sp,sp,24
 8003abc:	f800283a 	ret
 8003ac0:	8009883a 	mov	r4,r16
 8003ac4:	80044880 	call	8004488 <strlen>
 8003ac8:	1025883a 	mov	r18,r2
 8003acc:	1000031e 	bne	r2,zero,8003adc <_perror_r+0x120>
 8003ad0:	00000b06 	br	8003b00 <_perror_r+0x144>
 8003ad4:	80a1883a 	add	r16,r16,r2
 8003ad8:	90000926 	beq	r18,zero,8003b00 <_perror_r+0x144>
 8003adc:	9809883a 	mov	r4,r19
 8003ae0:	800a87c0 	call	800a87c <fileno>
 8003ae4:	900f883a 	mov	r7,r18
 8003ae8:	800d883a 	mov	r6,r16
 8003aec:	100b883a 	mov	r5,r2
 8003af0:	8809883a 	mov	r4,r17
 8003af4:	8008ac00 	call	8008ac0 <_write_r>
 8003af8:	90a5c83a 	sub	r18,r18,r2
 8003afc:	103ff50e 	bge	r2,zero,8003ad4 <_perror_r+0x118>
 8003b00:	04820174 	movhi	r18,2053
 8003b04:	04000084 	movi	r16,2
 8003b08:	94bf9104 	addi	r18,r18,-444
 8003b0c:	9809883a 	mov	r4,r19
 8003b10:	800a87c0 	call	800a87c <fileno>
 8003b14:	800f883a 	mov	r7,r16
 8003b18:	900d883a 	mov	r6,r18
 8003b1c:	100b883a 	mov	r5,r2
 8003b20:	8809883a 	mov	r4,r17
 8003b24:	8008ac00 	call	8008ac0 <_write_r>
 8003b28:	80a1c83a 	sub	r16,r16,r2
 8003b2c:	103fb516 	blt	r2,zero,8003a04 <_perror_r+0x48>
 8003b30:	90a5883a 	add	r18,r18,r2
 8003b34:	803ff51e 	bne	r16,zero,8003b0c <_perror_r+0x150>
 8003b38:	003fb206 	br	8003a04 <_perror_r+0x48>
 8003b3c:	800abdc0 	call	800abdc <__sinit>
 8003b40:	003faa06 	br	80039ec <_perror_r+0x30>

08003b44 <perror>:
 8003b44:	00820174 	movhi	r2,2053
 8003b48:	200b883a 	mov	r5,r4
 8003b4c:	111bd417 	ldw	r4,28496(r2)
 8003b50:	80039bc1 	jmpi	80039bc <_perror_r>

08003b54 <_printf_r>:
 8003b54:	defffd04 	addi	sp,sp,-12
 8003b58:	2805883a 	mov	r2,r5
 8003b5c:	dfc00015 	stw	ra,0(sp)
 8003b60:	d9800115 	stw	r6,4(sp)
 8003b64:	d9c00215 	stw	r7,8(sp)
 8003b68:	21400217 	ldw	r5,8(r4)
 8003b6c:	d9c00104 	addi	r7,sp,4
 8003b70:	100d883a 	mov	r6,r2
 8003b74:	80069080 	call	8006908 <___vfprintf_internal_r>
 8003b78:	dfc00017 	ldw	ra,0(sp)
 8003b7c:	dec00304 	addi	sp,sp,12
 8003b80:	f800283a 	ret

08003b84 <printf>:
 8003b84:	defffc04 	addi	sp,sp,-16
 8003b88:	dfc00015 	stw	ra,0(sp)
 8003b8c:	d9400115 	stw	r5,4(sp)
 8003b90:	d9800215 	stw	r6,8(sp)
 8003b94:	d9c00315 	stw	r7,12(sp)
 8003b98:	00820174 	movhi	r2,2053
 8003b9c:	109bd417 	ldw	r2,28496(r2)
 8003ba0:	200b883a 	mov	r5,r4
 8003ba4:	d9800104 	addi	r6,sp,4
 8003ba8:	11000217 	ldw	r4,8(r2)
 8003bac:	80089e40 	call	80089e4 <__vfprintf_internal>
 8003bb0:	dfc00017 	ldw	ra,0(sp)
 8003bb4:	dec00404 	addi	sp,sp,16
 8003bb8:	f800283a 	ret

08003bbc <_putchar_r>:
 8003bbc:	21800217 	ldw	r6,8(r4)
 8003bc0:	800d3b81 	jmpi	800d3b8 <_putc_r>

08003bc4 <putchar>:
 8003bc4:	00820174 	movhi	r2,2053
 8003bc8:	109bd417 	ldw	r2,28496(r2)
 8003bcc:	200b883a 	mov	r5,r4
 8003bd0:	11800217 	ldw	r6,8(r2)
 8003bd4:	1009883a 	mov	r4,r2
 8003bd8:	800d3b81 	jmpi	800d3b8 <_putc_r>

08003bdc <_puts_r>:
 8003bdc:	defff504 	addi	sp,sp,-44
 8003be0:	dc000815 	stw	r16,32(sp)
 8003be4:	2021883a 	mov	r16,r4
 8003be8:	2809883a 	mov	r4,r5
 8003bec:	dc400915 	stw	r17,36(sp)
 8003bf0:	dfc00a15 	stw	ra,40(sp)
 8003bf4:	2823883a 	mov	r17,r5
 8003bf8:	80044880 	call	8004488 <strlen>
 8003bfc:	11000044 	addi	r4,r2,1
 8003c00:	d8800515 	stw	r2,20(sp)
 8003c04:	00800044 	movi	r2,1
 8003c08:	00c20174 	movhi	r3,2053
 8003c0c:	d8800715 	stw	r2,28(sp)
 8003c10:	d8800404 	addi	r2,sp,16
 8003c14:	18ff9204 	addi	r3,r3,-440
 8003c18:	d8800115 	stw	r2,4(sp)
 8003c1c:	00800084 	movi	r2,2
 8003c20:	dc400415 	stw	r17,16(sp)
 8003c24:	d8c00615 	stw	r3,24(sp)
 8003c28:	d9000315 	stw	r4,12(sp)
 8003c2c:	d8800215 	stw	r2,8(sp)
 8003c30:	81400217 	ldw	r5,8(r16)
 8003c34:	80000226 	beq	r16,zero,8003c40 <_puts_r+0x64>
 8003c38:	80800e17 	ldw	r2,56(r16)
 8003c3c:	10001326 	beq	r2,zero,8003c8c <_puts_r+0xb0>
 8003c40:	2880030b 	ldhu	r2,12(r5)
 8003c44:	10c8000c 	andi	r3,r2,8192
 8003c48:	1800061e 	bne	r3,zero,8003c64 <_puts_r+0x88>
 8003c4c:	28c01917 	ldw	r3,100(r5)
 8003c50:	0137ffc4 	movi	r4,-8193
 8003c54:	10880014 	ori	r2,r2,8192
 8003c58:	1906703a 	and	r3,r3,r4
 8003c5c:	2880030d 	sth	r2,12(r5)
 8003c60:	28c01915 	stw	r3,100(r5)
 8003c64:	d9800104 	addi	r6,sp,4
 8003c68:	8009883a 	mov	r4,r16
 8003c6c:	800b03c0 	call	800b03c <__sfvwrite_r>
 8003c70:	10000b1e 	bne	r2,zero,8003ca0 <_puts_r+0xc4>
 8003c74:	00800284 	movi	r2,10
 8003c78:	dfc00a17 	ldw	ra,40(sp)
 8003c7c:	dc400917 	ldw	r17,36(sp)
 8003c80:	dc000817 	ldw	r16,32(sp)
 8003c84:	dec00b04 	addi	sp,sp,44
 8003c88:	f800283a 	ret
 8003c8c:	8009883a 	mov	r4,r16
 8003c90:	d9400015 	stw	r5,0(sp)
 8003c94:	800abdc0 	call	800abdc <__sinit>
 8003c98:	d9400017 	ldw	r5,0(sp)
 8003c9c:	003fe806 	br	8003c40 <_puts_r+0x64>
 8003ca0:	00bfffc4 	movi	r2,-1
 8003ca4:	003ff406 	br	8003c78 <_puts_r+0x9c>

08003ca8 <puts>:
 8003ca8:	00820174 	movhi	r2,2053
 8003cac:	200b883a 	mov	r5,r4
 8003cb0:	111bd417 	ldw	r4,28496(r2)
 8003cb4:	8003bdc1 	jmpi	8003bdc <_puts_r>

08003cb8 <_sprintf_r>:
 8003cb8:	deffe404 	addi	sp,sp,-112
 8003cbc:	2807883a 	mov	r3,r5
 8003cc0:	dfc01a15 	stw	ra,104(sp)
 8003cc4:	d9c01b15 	stw	r7,108(sp)
 8003cc8:	00a00034 	movhi	r2,32768
 8003ccc:	023ffff4 	movhi	r8,65535
 8003cd0:	10bfffc4 	addi	r2,r2,-1
 8003cd4:	42008204 	addi	r8,r8,520
 8003cd8:	d9c01b04 	addi	r7,sp,108
 8003cdc:	d80b883a 	mov	r5,sp
 8003ce0:	d8c00015 	stw	r3,0(sp)
 8003ce4:	d8c00415 	stw	r3,16(sp)
 8003ce8:	d8800515 	stw	r2,20(sp)
 8003cec:	d8800215 	stw	r2,8(sp)
 8003cf0:	da000315 	stw	r8,12(sp)
 8003cf4:	80048640 	call	8004864 <___svfprintf_internal_r>
 8003cf8:	d8c00017 	ldw	r3,0(sp)
 8003cfc:	18000005 	stb	zero,0(r3)
 8003d00:	dfc01a17 	ldw	ra,104(sp)
 8003d04:	dec01c04 	addi	sp,sp,112
 8003d08:	f800283a 	ret

08003d0c <sprintf>:
 8003d0c:	deffe304 	addi	sp,sp,-116
 8003d10:	2007883a 	mov	r3,r4
 8003d14:	dfc01a15 	stw	ra,104(sp)
 8003d18:	d9801b15 	stw	r6,108(sp)
 8003d1c:	d9c01c15 	stw	r7,112(sp)
 8003d20:	00820174 	movhi	r2,2053
 8003d24:	111bd417 	ldw	r4,28496(r2)
 8003d28:	023ffff4 	movhi	r8,65535
 8003d2c:	00a00034 	movhi	r2,32768
 8003d30:	10bfffc4 	addi	r2,r2,-1
 8003d34:	42008204 	addi	r8,r8,520
 8003d38:	280d883a 	mov	r6,r5
 8003d3c:	d9c01b04 	addi	r7,sp,108
 8003d40:	d80b883a 	mov	r5,sp
 8003d44:	d8c00015 	stw	r3,0(sp)
 8003d48:	d8c00415 	stw	r3,16(sp)
 8003d4c:	d8800515 	stw	r2,20(sp)
 8003d50:	d8800215 	stw	r2,8(sp)
 8003d54:	da000315 	stw	r8,12(sp)
 8003d58:	80048640 	call	8004864 <___svfprintf_internal_r>
 8003d5c:	d8c00017 	ldw	r3,0(sp)
 8003d60:	18000005 	stb	zero,0(r3)
 8003d64:	dfc01a17 	ldw	ra,104(sp)
 8003d68:	dec01d04 	addi	sp,sp,116
 8003d6c:	f800283a 	ret

08003d70 <strcpy>:
 8003d70:	2906b03a 	or	r3,r5,r4
 8003d74:	18c000cc 	andi	r3,r3,3
 8003d78:	2005883a 	mov	r2,r4
 8003d7c:	1800151e 	bne	r3,zero,8003dd4 <strcpy+0x64>
 8003d80:	29c00017 	ldw	r7,0(r5)
 8003d84:	02bfbff4 	movhi	r10,65279
 8003d88:	52bfbfc4 	addi	r10,r10,-257
 8003d8c:	3a87883a 	add	r3,r7,r10
 8003d90:	01c8303a 	nor	r4,zero,r7
 8003d94:	02602074 	movhi	r9,32897
 8003d98:	1906703a 	and	r3,r3,r4
 8003d9c:	4a602004 	addi	r9,r9,-32640
 8003da0:	1a46703a 	and	r3,r3,r9
 8003da4:	18000b1e 	bne	r3,zero,8003dd4 <strcpy+0x64>
 8003da8:	1007883a 	mov	r3,r2
 8003dac:	19c00015 	stw	r7,0(r3)
 8003db0:	29c00117 	ldw	r7,4(r5)
 8003db4:	29400104 	addi	r5,r5,4
 8003db8:	18c00104 	addi	r3,r3,4
 8003dbc:	3a8d883a 	add	r6,r7,r10
 8003dc0:	01d0303a 	nor	r8,zero,r7
 8003dc4:	320c703a 	and	r6,r6,r8
 8003dc8:	324c703a 	and	r6,r6,r9
 8003dcc:	303ff726 	beq	r6,zero,8003dac <strcpy+0x3c>
 8003dd0:	00000106 	br	8003dd8 <strcpy+0x68>
 8003dd4:	1007883a 	mov	r3,r2
 8003dd8:	29800003 	ldbu	r6,0(r5)
 8003ddc:	18c00044 	addi	r3,r3,1
 8003de0:	29400044 	addi	r5,r5,1
 8003de4:	31c03fcc 	andi	r7,r6,255
 8003de8:	39c0201c 	xori	r7,r7,128
 8003dec:	39ffe004 	addi	r7,r7,-128
 8003df0:	19bfffc5 	stb	r6,-1(r3)
 8003df4:	383ff81e 	bne	r7,zero,8003dd8 <strcpy+0x68>
 8003df8:	f800283a 	ret

08003dfc <_strerror_r>:
 8003dfc:	28c023e8 	cmpgeui	r3,r5,143
 8003e00:	2805883a 	mov	r2,r5
 8003e04:	300b883a 	mov	r5,r6
 8003e08:	1800941e 	bne	r3,zero,800405c <_strerror_r+0x260>
 8003e0c:	101090ba 	slli	r8,r2,2
 8003e10:	00c20034 	movhi	r3,2048
 8003e14:	40c7883a 	add	r3,r8,r3
 8003e18:	18cf8817 	ldw	r3,15904(r3)
 8003e1c:	1800683a 	jmp	r3
 8003e20:	0800442c 	andhi	zero,at,272
 8003e24:	08004438 	rdprs	zero,at,272
 8003e28:	08004420 	cmpeqi	zero,at,272
 8003e2c:	08004414 	ori	zero,at,272
 8003e30:	08004408 	cmpgei	zero,at,272
 8003e34:	080043fc 	xorhi	zero,at,271
 8003e38:	080043f0 	cmpltui	zero,at,271
 8003e3c:	080043e4 	muli	zero,at,271
 8003e40:	080043d8 	cmpnei	zero,at,271
 8003e44:	080043cc 	andi	zero,at,271
 8003e48:	080043c0 	call	80043c <OSCtxSw_SWITCH_PC+0x8003fc>
 8003e4c:	080043b4 	orhi	zero,at,270
 8003e50:	080043a8 	cmpgeui	zero,at,270
 8003e54:	0800439c 	xori	zero,at,270
 8003e58:	08004390 	cmplti	zero,at,270
 8003e5c:	0800405c 	xori	zero,at,257
 8003e60:	08004384 	addi	zero,at,270
 8003e64:	08004378 	rdprs	zero,at,269
 8003e68:	0800436c 	andhi	zero,at,269
 8003e6c:	08004360 	cmpeqi	zero,at,269
 8003e70:	08004354 	ori	zero,at,269
 8003e74:	08004348 	cmpgei	zero,at,269
 8003e78:	0800433c 	xorhi	zero,at,268
 8003e7c:	08004330 	cmpltui	zero,at,268
 8003e80:	08004324 	muli	zero,at,268
 8003e84:	08004318 	cmpnei	zero,at,268
 8003e88:	0800430c 	andi	zero,at,268
 8003e8c:	08004300 	call	800430 <OSCtxSw_SWITCH_PC+0x8003f0>
 8003e90:	080042f4 	orhi	zero,at,267
 8003e94:	080042e8 	cmpgeui	zero,at,267
 8003e98:	080042dc 	xori	zero,at,267
 8003e9c:	080042d0 	cmplti	zero,at,267
 8003ea0:	080042c4 	addi	zero,at,267
 8003ea4:	080042b8 	rdprs	zero,at,266
 8003ea8:	080042ac 	andhi	zero,at,266
 8003eac:	080042a0 	cmpeqi	zero,at,266
 8003eb0:	08004294 	ori	zero,at,266
 8003eb4:	0800405c 	xori	zero,at,257
 8003eb8:	0800405c 	xori	zero,at,257
 8003ebc:	0800405c 	xori	zero,at,257
 8003ec0:	0800405c 	xori	zero,at,257
 8003ec4:	0800405c 	xori	zero,at,257
 8003ec8:	0800405c 	xori	zero,at,257
 8003ecc:	0800405c 	xori	zero,at,257
 8003ed0:	0800405c 	xori	zero,at,257
 8003ed4:	08004288 	cmpgei	zero,at,266
 8003ed8:	0800427c 	xorhi	zero,at,265
 8003edc:	0800405c 	xori	zero,at,257
 8003ee0:	0800405c 	xori	zero,at,257
 8003ee4:	0800405c 	xori	zero,at,257
 8003ee8:	0800405c 	xori	zero,at,257
 8003eec:	0800405c 	xori	zero,at,257
 8003ef0:	0800405c 	xori	zero,at,257
 8003ef4:	0800405c 	xori	zero,at,257
 8003ef8:	0800405c 	xori	zero,at,257
 8003efc:	0800405c 	xori	zero,at,257
 8003f00:	0800405c 	xori	zero,at,257
 8003f04:	0800405c 	xori	zero,at,257
 8003f08:	0800405c 	xori	zero,at,257
 8003f0c:	0800405c 	xori	zero,at,257
 8003f10:	08004270 	cmpltui	zero,at,265
 8003f14:	08004264 	muli	zero,at,265
 8003f18:	08004258 	cmpnei	zero,at,265
 8003f1c:	0800424c 	andi	zero,at,265
 8003f20:	0800405c 	xori	zero,at,257
 8003f24:	0800405c 	xori	zero,at,257
 8003f28:	0800405c 	xori	zero,at,257
 8003f2c:	08004240 	call	800424 <OSCtxSw_SWITCH_PC+0x8003e4>
 8003f30:	0800405c 	xori	zero,at,257
 8003f34:	0800405c 	xori	zero,at,257
 8003f38:	0800405c 	xori	zero,at,257
 8003f3c:	08004234 	orhi	zero,at,264
 8003f40:	0800405c 	xori	zero,at,257
 8003f44:	0800405c 	xori	zero,at,257
 8003f48:	08004228 	cmpgeui	zero,at,264
 8003f4c:	0800405c 	xori	zero,at,257
 8003f50:	0800405c 	xori	zero,at,257
 8003f54:	0800421c 	xori	zero,at,264
 8003f58:	0800405c 	xori	zero,at,257
 8003f5c:	0800405c 	xori	zero,at,257
 8003f60:	0800405c 	xori	zero,at,257
 8003f64:	0800405c 	xori	zero,at,257
 8003f68:	0800405c 	xori	zero,at,257
 8003f6c:	0800405c 	xori	zero,at,257
 8003f70:	0800405c 	xori	zero,at,257
 8003f74:	0800405c 	xori	zero,at,257
 8003f78:	0800405c 	xori	zero,at,257
 8003f7c:	0800405c 	xori	zero,at,257
 8003f80:	08004210 	cmplti	zero,at,264
 8003f84:	0800405c 	xori	zero,at,257
 8003f88:	08004204 	addi	zero,at,264
 8003f8c:	080041f8 	rdprs	zero,at,263
 8003f90:	080041ec 	andhi	zero,at,263
 8003f94:	0800405c 	xori	zero,at,257
 8003f98:	0800405c 	xori	zero,at,257
 8003f9c:	080041e0 	cmpeqi	zero,at,263
 8003fa0:	0800405c 	xori	zero,at,257
 8003fa4:	0800405c 	xori	zero,at,257
 8003fa8:	0800405c 	xori	zero,at,257
 8003fac:	0800405c 	xori	zero,at,257
 8003fb0:	0800405c 	xori	zero,at,257
 8003fb4:	0800405c 	xori	zero,at,257
 8003fb8:	0800405c 	xori	zero,at,257
 8003fbc:	0800405c 	xori	zero,at,257
 8003fc0:	080041d4 	ori	zero,at,263
 8003fc4:	080041c8 	cmpgei	zero,at,263
 8003fc8:	080041bc 	xorhi	zero,at,262
 8003fcc:	080041b0 	cmpltui	zero,at,262
 8003fd0:	080041a4 	muli	zero,at,262
 8003fd4:	08004198 	cmpnei	zero,at,262
 8003fd8:	0800405c 	xori	zero,at,257
 8003fdc:	0800418c 	andi	zero,at,262
 8003fe0:	08004180 	call	800418 <OSCtxSw_SWITCH_PC+0x8003d8>
 8003fe4:	08004174 	orhi	zero,at,261
 8003fe8:	08004168 	cmpgeui	zero,at,261
 8003fec:	0800415c 	xori	zero,at,261
 8003ff0:	08004150 	cmplti	zero,at,261
 8003ff4:	08004144 	addi	zero,at,261
 8003ff8:	08004138 	rdprs	zero,at,260
 8003ffc:	0800412c 	andhi	zero,at,260
 8004000:	080040f0 	cmpltui	zero,at,259
 8004004:	080040e4 	muli	zero,at,259
 8004008:	080040d8 	cmpnei	zero,at,259
 800400c:	080040cc 	andi	zero,at,259
 8004010:	0800405c 	xori	zero,at,257
 8004014:	080040c0 	call	80040c <OSCtxSw_SWITCH_PC+0x8003cc>
 8004018:	080040b4 	orhi	zero,at,258
 800401c:	080040a8 	cmpgeui	zero,at,258
 8004020:	0800409c 	xori	zero,at,258
 8004024:	0800405c 	xori	zero,at,257
 8004028:	0800405c 	xori	zero,at,257
 800402c:	0800405c 	xori	zero,at,257
 8004030:	0800405c 	xori	zero,at,257
 8004034:	0800405c 	xori	zero,at,257
 8004038:	08004120 	cmpeqi	zero,at,260
 800403c:	0800405c 	xori	zero,at,257
 8004040:	0800405c 	xori	zero,at,257
 8004044:	0800405c 	xori	zero,at,257
 8004048:	08004114 	ori	zero,at,260
 800404c:	08004108 	cmpgei	zero,at,260
 8004050:	080040fc 	xorhi	zero,at,259
 8004054:	08004090 	cmplti	zero,at,258
 8004058:	08004084 	addi	zero,at,258
 800405c:	deffff04 	addi	sp,sp,-4
 8004060:	dfc00015 	stw	ra,0(sp)
 8004064:	3800fa26 	beq	r7,zero,8004450 <_strerror_r+0x654>
 8004068:	380d883a 	mov	r6,r7
 800406c:	1009883a 	mov	r4,r2
 8004070:	80069000 	call	8006900 <_user_strerror>
 8004074:	1000f326 	beq	r2,zero,8004444 <_strerror_r+0x648>
 8004078:	dfc00017 	ldw	ra,0(sp)
 800407c:	dec00104 	addi	sp,sp,4
 8004080:	f800283a 	ret
 8004084:	00820174 	movhi	r2,2053
 8004088:	10812e04 	addi	r2,r2,1208
 800408c:	f800283a 	ret
 8004090:	00820174 	movhi	r2,2053
 8004094:	10812804 	addi	r2,r2,1184
 8004098:	f800283a 	ret
 800409c:	00820174 	movhi	r2,2053
 80040a0:	10811604 	addi	r2,r2,1112
 80040a4:	f800283a 	ret
 80040a8:	00820174 	movhi	r2,2053
 80040ac:	10811c04 	addi	r2,r2,1136
 80040b0:	f800283a 	ret
 80040b4:	00820174 	movhi	r2,2053
 80040b8:	10801704 	addi	r2,r2,92
 80040bc:	f800283a 	ret
 80040c0:	00820174 	movhi	r2,2053
 80040c4:	10810704 	addi	r2,r2,1052
 80040c8:	f800283a 	ret
 80040cc:	00820174 	movhi	r2,2053
 80040d0:	1080a404 	addi	r2,r2,656
 80040d4:	f800283a 	ret
 80040d8:	00820174 	movhi	r2,2053
 80040dc:	10814604 	addi	r2,r2,1304
 80040e0:	f800283a 	ret
 80040e4:	00820174 	movhi	r2,2053
 80040e8:	10bfc904 	addi	r2,r2,-220
 80040ec:	f800283a 	ret
 80040f0:	00820174 	movhi	r2,2053
 80040f4:	10bfbb04 	addi	r2,r2,-276
 80040f8:	f800283a 	ret
 80040fc:	00820174 	movhi	r2,2053
 8004100:	10812304 	addi	r2,r2,1164
 8004104:	f800283a 	ret
 8004108:	00820174 	movhi	r2,2053
 800410c:	10813c04 	addi	r2,r2,1264
 8004110:	f800283a 	ret
 8004114:	00820174 	movhi	r2,2053
 8004118:	10807a04 	addi	r2,r2,488
 800411c:	f800283a 	ret
 8004120:	00820174 	movhi	r2,2053
 8004124:	10804804 	addi	r2,r2,288
 8004128:	f800283a 	ret
 800412c:	00820174 	movhi	r2,2053
 8004130:	10bffd04 	addi	r2,r2,-12
 8004134:	f800283a 	ret
 8004138:	00820174 	movhi	r2,2053
 800413c:	10803d04 	addi	r2,r2,244
 8004140:	f800283a 	ret
 8004144:	00820174 	movhi	r2,2053
 8004148:	10bff904 	addi	r2,r2,-28
 800414c:	f800283a 	ret
 8004150:	00820174 	movhi	r2,2053
 8004154:	10814b04 	addi	r2,r2,1324
 8004158:	f800283a 	ret
 800415c:	00820174 	movhi	r2,2053
 8004160:	10800e04 	addi	r2,r2,56
 8004164:	f800283a 	ret
 8004168:	00820174 	movhi	r2,2053
 800416c:	10808304 	addi	r2,r2,524
 8004170:	f800283a 	ret
 8004174:	00820174 	movhi	r2,2053
 8004178:	10810d04 	addi	r2,r2,1076
 800417c:	f800283a 	ret
 8004180:	00820174 	movhi	r2,2053
 8004184:	10810104 	addi	r2,r2,1028
 8004188:	f800283a 	ret
 800418c:	00820174 	movhi	r2,2053
 8004190:	1080f504 	addi	r2,r2,980
 8004194:	f800283a 	ret
 8004198:	00820174 	movhi	r2,2053
 800419c:	1080ef04 	addi	r2,r2,956
 80041a0:	f800283a 	ret
 80041a4:	00820174 	movhi	r2,2053
 80041a8:	1080e704 	addi	r2,r2,924
 80041ac:	f800283a 	ret
 80041b0:	00820174 	movhi	r2,2053
 80041b4:	1080df04 	addi	r2,r2,892
 80041b8:	f800283a 	ret
 80041bc:	00820174 	movhi	r2,2053
 80041c0:	1080d304 	addi	r2,r2,844
 80041c4:	f800283a 	ret
 80041c8:	00820174 	movhi	r2,2053
 80041cc:	1080ca04 	addi	r2,r2,808
 80041d0:	f800283a 	ret
 80041d4:	00820174 	movhi	r2,2053
 80041d8:	1080fa04 	addi	r2,r2,1000
 80041dc:	f800283a 	ret
 80041e0:	00820174 	movhi	r2,2053
 80041e4:	10813304 	addi	r2,r2,1228
 80041e8:	f800283a 	ret
 80041ec:	00820174 	movhi	r2,2053
 80041f0:	1080c404 	addi	r2,r2,784
 80041f4:	f800283a 	ret
 80041f8:	00820174 	movhi	r2,2053
 80041fc:	1080bd04 	addi	r2,r2,756
 8004200:	f800283a 	ret
 8004204:	00820174 	movhi	r2,2053
 8004208:	1080b804 	addi	r2,r2,736
 800420c:	f800283a 	ret
 8004210:	00820174 	movhi	r2,2053
 8004214:	1080b104 	addi	r2,r2,708
 8004218:	f800283a 	ret
 800421c:	00820174 	movhi	r2,2053
 8004220:	1080ae04 	addi	r2,r2,696
 8004224:	f800283a 	ret
 8004228:	00820174 	movhi	r2,2053
 800422c:	1080a904 	addi	r2,r2,676
 8004230:	f800283a 	ret
 8004234:	00820174 	movhi	r2,2053
 8004238:	1080a004 	addi	r2,r2,640
 800423c:	f800283a 	ret
 8004240:	00820174 	movhi	r2,2053
 8004244:	10809a04 	addi	r2,r2,616
 8004248:	f800283a 	ret
 800424c:	00820174 	movhi	r2,2053
 8004250:	10809504 	addi	r2,r2,596
 8004254:	f800283a 	ret
 8004258:	00820174 	movhi	r2,2053
 800425c:	10808f04 	addi	r2,r2,572
 8004260:	f800283a 	ret
 8004264:	00820174 	movhi	r2,2053
 8004268:	1080d104 	addi	r2,r2,836
 800426c:	f800283a 	ret
 8004270:	00820174 	movhi	r2,2053
 8004274:	10808b04 	addi	r2,r2,556
 8004278:	f800283a 	ret
 800427c:	00820174 	movhi	r2,2053
 8004280:	10808904 	addi	r2,r2,548
 8004284:	f800283a 	ret
 8004288:	00820174 	movhi	r2,2053
 800428c:	10808004 	addi	r2,r2,512
 8004290:	f800283a 	ret
 8004294:	00820174 	movhi	r2,2053
 8004298:	10807504 	addi	r2,r2,468
 800429c:	f800283a 	ret
 80042a0:	00820174 	movhi	r2,2053
 80042a4:	10806e04 	addi	r2,r2,440
 80042a8:	f800283a 	ret
 80042ac:	00820174 	movhi	r2,2053
 80042b0:	10806904 	addi	r2,r2,420
 80042b4:	f800283a 	ret
 80042b8:	00820174 	movhi	r2,2053
 80042bc:	10805d04 	addi	r2,r2,372
 80042c0:	f800283a 	ret
 80042c4:	00820174 	movhi	r2,2053
 80042c8:	10805a04 	addi	r2,r2,360
 80042cc:	f800283a 	ret
 80042d0:	00820174 	movhi	r2,2053
 80042d4:	10805604 	addi	r2,r2,344
 80042d8:	f800283a 	ret
 80042dc:	00820174 	movhi	r2,2053
 80042e0:	10805004 	addi	r2,r2,320
 80042e4:	f800283a 	ret
 80042e8:	00820174 	movhi	r2,2053
 80042ec:	10804c04 	addi	r2,r2,304
 80042f0:	f800283a 	ret
 80042f4:	00820174 	movhi	r2,2053
 80042f8:	10804204 	addi	r2,r2,264
 80042fc:	f800283a 	ret
 8004300:	00820174 	movhi	r2,2053
 8004304:	10803904 	addi	r2,r2,228
 8004308:	f800283a 	ret
 800430c:	00820174 	movhi	r2,2053
 8004310:	10803504 	addi	r2,r2,212
 8004314:	f800283a 	ret
 8004318:	00820174 	movhi	r2,2053
 800431c:	10802f04 	addi	r2,r2,188
 8004320:	f800283a 	ret
 8004324:	00820174 	movhi	r2,2053
 8004328:	10802704 	addi	r2,r2,156
 800432c:	f800283a 	ret
 8004330:	00820174 	movhi	r2,2053
 8004334:	10801f04 	addi	r2,r2,124
 8004338:	f800283a 	ret
 800433c:	00820174 	movhi	r2,2053
 8004340:	10800904 	addi	r2,r2,36
 8004344:	f800283a 	ret
 8004348:	00820174 	movhi	r2,2053
 800434c:	10800504 	addi	r2,r2,20
 8004350:	f800283a 	ret
 8004354:	00820174 	movhi	r2,2053
 8004358:	10bff504 	addi	r2,r2,-44
 800435c:	f800283a 	ret
 8004360:	00820174 	movhi	r2,2053
 8004364:	10bff104 	addi	r2,r2,-60
 8004368:	f800283a 	ret
 800436c:	00820174 	movhi	r2,2053
 8004370:	10bfec04 	addi	r2,r2,-80
 8004374:	f800283a 	ret
 8004378:	00820174 	movhi	r2,2053
 800437c:	10bfe904 	addi	r2,r2,-92
 8004380:	f800283a 	ret
 8004384:	00820174 	movhi	r2,2053
 8004388:	10bfe304 	addi	r2,r2,-116
 800438c:	f800283a 	ret
 8004390:	00820174 	movhi	r2,2053
 8004394:	10bfe004 	addi	r2,r2,-128
 8004398:	f800283a 	ret
 800439c:	00820174 	movhi	r2,2053
 80043a0:	10bfdb04 	addi	r2,r2,-148
 80043a4:	f800283a 	ret
 80043a8:	00820174 	movhi	r2,2053
 80043ac:	10bfd604 	addi	r2,r2,-168
 80043b0:	f800283a 	ret
 80043b4:	00820174 	movhi	r2,2053
 80043b8:	10bfd104 	addi	r2,r2,-188
 80043bc:	f800283a 	ret
 80043c0:	00820174 	movhi	r2,2053
 80043c4:	10bfc604 	addi	r2,r2,-232
 80043c8:	f800283a 	ret
 80043cc:	00820174 	movhi	r2,2053
 80043d0:	10bfc204 	addi	r2,r2,-248
 80043d4:	f800283a 	ret
 80043d8:	00820174 	movhi	r2,2053
 80043dc:	10bfb604 	addi	r2,r2,-296
 80043e0:	f800283a 	ret
 80043e4:	00820174 	movhi	r2,2053
 80043e8:	10bfb104 	addi	r2,r2,-316
 80043ec:	f800283a 	ret
 80043f0:	00820174 	movhi	r2,2053
 80043f4:	10bfaa04 	addi	r2,r2,-344
 80043f8:	f800283a 	ret
 80043fc:	00820174 	movhi	r2,2053
 8004400:	10bfa704 	addi	r2,r2,-356
 8004404:	f800283a 	ret
 8004408:	00820174 	movhi	r2,2053
 800440c:	10bfa104 	addi	r2,r2,-380
 8004410:	f800283a 	ret
 8004414:	00820174 	movhi	r2,2053
 8004418:	10bf9d04 	addi	r2,r2,-396
 800441c:	f800283a 	ret
 8004420:	00820174 	movhi	r2,2053
 8004424:	10bf9604 	addi	r2,r2,-424
 8004428:	f800283a 	ret
 800442c:	00820174 	movhi	r2,2053
 8004430:	10815104 	addi	r2,r2,1348
 8004434:	f800283a 	ret
 8004438:	00820174 	movhi	r2,2053
 800443c:	10bf9304 	addi	r2,r2,-436
 8004440:	f800283a 	ret
 8004444:	00820174 	movhi	r2,2053
 8004448:	1081f704 	addi	r2,r2,2012
 800444c:	003f0a06 	br	8004078 <_strerror_r+0x27c>
 8004450:	200f883a 	mov	r7,r4
 8004454:	003f0406 	br	8004068 <_strerror_r+0x26c>

08004458 <strerror>:
 8004458:	00820174 	movhi	r2,2053
 800445c:	200b883a 	mov	r5,r4
 8004460:	111bd417 	ldw	r4,28496(r2)
 8004464:	000f883a 	mov	r7,zero
 8004468:	000d883a 	mov	r6,zero
 800446c:	8003dfc1 	jmpi	8003dfc <_strerror_r>

08004470 <strerror_l>:
 8004470:	00820174 	movhi	r2,2053
 8004474:	200b883a 	mov	r5,r4
 8004478:	111bd417 	ldw	r4,28496(r2)
 800447c:	000f883a 	mov	r7,zero
 8004480:	000d883a 	mov	r6,zero
 8004484:	8003dfc1 	jmpi	8003dfc <_strerror_r>

08004488 <strlen>:
 8004488:	208000cc 	andi	r2,r4,3
 800448c:	10000926 	beq	r2,zero,80044b4 <strlen+0x2c>
 8004490:	2005883a 	mov	r2,r4
 8004494:	00000306 	br	80044a4 <strlen+0x1c>
 8004498:	10800044 	addi	r2,r2,1
 800449c:	10c000cc 	andi	r3,r2,3
 80044a0:	18000526 	beq	r3,zero,80044b8 <strlen+0x30>
 80044a4:	10c00007 	ldb	r3,0(r2)
 80044a8:	183ffb1e 	bne	r3,zero,8004498 <strlen+0x10>
 80044ac:	1105c83a 	sub	r2,r2,r4
 80044b0:	f800283a 	ret
 80044b4:	2005883a 	mov	r2,r4
 80044b8:	11400017 	ldw	r5,0(r2)
 80044bc:	01ffbff4 	movhi	r7,65279
 80044c0:	39ffbfc4 	addi	r7,r7,-257
 80044c4:	29c7883a 	add	r3,r5,r7
 80044c8:	01a02074 	movhi	r6,32897
 80044cc:	014a303a 	nor	r5,zero,r5
 80044d0:	1946703a 	and	r3,r3,r5
 80044d4:	31a02004 	addi	r6,r6,-32640
 80044d8:	1986703a 	and	r3,r3,r6
 80044dc:	1800071e 	bne	r3,zero,80044fc <strlen+0x74>
 80044e0:	11400117 	ldw	r5,4(r2)
 80044e4:	10800104 	addi	r2,r2,4
 80044e8:	29c7883a 	add	r3,r5,r7
 80044ec:	014a303a 	nor	r5,zero,r5
 80044f0:	1946703a 	and	r3,r3,r5
 80044f4:	1986703a 	and	r3,r3,r6
 80044f8:	183ff926 	beq	r3,zero,80044e0 <strlen+0x58>
 80044fc:	10c00007 	ldb	r3,0(r2)
 8004500:	183fea26 	beq	r3,zero,80044ac <strlen+0x24>
 8004504:	10c00047 	ldb	r3,1(r2)
 8004508:	10800044 	addi	r2,r2,1
 800450c:	183fe726 	beq	r3,zero,80044ac <strlen+0x24>
 8004510:	10c00047 	ldb	r3,1(r2)
 8004514:	10800044 	addi	r2,r2,1
 8004518:	183ffa1e 	bne	r3,zero,8004504 <strlen+0x7c>
 800451c:	003fe306 	br	80044ac <strlen+0x24>

08004520 <strtok>:
 8004520:	00820174 	movhi	r2,2053
 8004524:	119bd417 	ldw	r6,28496(r2)
 8004528:	01c00044 	movi	r7,1
 800452c:	31801704 	addi	r6,r6,92
 8004530:	80045341 	jmpi	8004534 <__strtok_r>

08004534 <__strtok_r>:
 8004534:	20001d26 	beq	r4,zero,80045ac <__strtok_r+0x78>
 8004538:	22400007 	ldb	r9,0(r4)
 800453c:	20800044 	addi	r2,r4,1
 8004540:	2807883a 	mov	r3,r5
 8004544:	00000106 	br	800454c <__strtok_r+0x18>
 8004548:	4a001126 	beq	r9,r8,8004590 <__strtok_r+0x5c>
 800454c:	1a000007 	ldb	r8,0(r3)
 8004550:	18c00044 	addi	r3,r3,1
 8004554:	403ffc1e 	bne	r8,zero,8004548 <__strtok_r+0x14>
 8004558:	48001826 	beq	r9,zero,80045bc <__strtok_r+0x88>
 800455c:	12000007 	ldb	r8,0(r2)
 8004560:	2807883a 	mov	r3,r5
 8004564:	10800044 	addi	r2,r2,1
 8004568:	00000106 	br	8004570 <__strtok_r+0x3c>
 800456c:	383ffb26 	beq	r7,zero,800455c <__strtok_r+0x28>
 8004570:	19c00007 	ldb	r7,0(r3)
 8004574:	18c00044 	addi	r3,r3,1
 8004578:	41fffc1e 	bne	r8,r7,800456c <__strtok_r+0x38>
 800457c:	40000726 	beq	r8,zero,800459c <__strtok_r+0x68>
 8004580:	103fffc5 	stb	zero,-1(r2)
 8004584:	30800015 	stw	r2,0(r6)
 8004588:	2005883a 	mov	r2,r4
 800458c:	f800283a 	ret
 8004590:	38000d26 	beq	r7,zero,80045c8 <__strtok_r+0x94>
 8004594:	1009883a 	mov	r4,r2
 8004598:	003fe706 	br	8004538 <__strtok_r+0x4>
 800459c:	0005883a 	mov	r2,zero
 80045a0:	30800015 	stw	r2,0(r6)
 80045a4:	2005883a 	mov	r2,r4
 80045a8:	f800283a 	ret
 80045ac:	31000017 	ldw	r4,0(r6)
 80045b0:	203fe11e 	bne	r4,zero,8004538 <__strtok_r+0x4>
 80045b4:	0005883a 	mov	r2,zero
 80045b8:	f800283a 	ret
 80045bc:	30000015 	stw	zero,0(r6)
 80045c0:	0005883a 	mov	r2,zero
 80045c4:	f800283a 	ret
 80045c8:	30800015 	stw	r2,0(r6)
 80045cc:	20000005 	stb	zero,0(r4)
 80045d0:	2005883a 	mov	r2,r4
 80045d4:	f800283a 	ret

080045d8 <strtok_r>:
 80045d8:	01c00044 	movi	r7,1
 80045dc:	80045341 	jmpi	8004534 <__strtok_r>

080045e0 <_strtoul_l.isra.0>:
 80045e0:	defff704 	addi	sp,sp,-36
 80045e4:	dd400515 	stw	r21,20(sp)
 80045e8:	dd000415 	stw	r20,16(sp)
 80045ec:	dcc00315 	stw	r19,12(sp)
 80045f0:	dc800215 	stw	r18,8(sp)
 80045f4:	dc000015 	stw	r16,0(sp)
 80045f8:	dfc00815 	stw	ra,32(sp)
 80045fc:	ddc00715 	stw	r23,28(sp)
 8004600:	dd800615 	stw	r22,24(sp)
 8004604:	dc400115 	stw	r17,4(sp)
 8004608:	2827883a 	mov	r19,r5
 800460c:	202b883a 	mov	r21,r4
 8004610:	3029883a 	mov	r20,r6
 8004614:	3825883a 	mov	r18,r7
 8004618:	2821883a 	mov	r16,r5
 800461c:	80c00003 	ldbu	r3,0(r16)
 8004620:	00820174 	movhi	r2,2053
 8004624:	8009883a 	mov	r4,r16
 8004628:	1885883a 	add	r2,r3,r2
 800462c:	10bef043 	ldbu	r2,-1087(r2)
 8004630:	84000044 	addi	r16,r16,1
 8004634:	1080020c 	andi	r2,r2,8
 8004638:	103ff81e 	bne	r2,zero,800461c <_strtoul_l.isra.0+0x3c>
 800463c:	18800b58 	cmpnei	r2,r3,45
 8004640:	10004e26 	beq	r2,zero,800477c <_strtoul_l.isra.0+0x19c>
 8004644:	18800ae0 	cmpeqi	r2,r3,43
 8004648:	1000211e 	bne	r2,zero,80046d0 <_strtoul_l.isra.0+0xf0>
 800464c:	1823883a 	mov	r17,r3
 8004650:	002f883a 	mov	r23,zero
 8004654:	90002226 	beq	r18,zero,80046e0 <_strtoul_l.isra.0+0x100>
 8004658:	90800420 	cmpeqi	r2,r18,16
 800465c:	10004b1e 	bne	r2,zero,800478c <_strtoul_l.isra.0+0x1ac>
 8004660:	900b883a 	mov	r5,r18
 8004664:	013fffc4 	movi	r4,-1
 8004668:	8011fdc0 	call	8011fdc <__udivsi3>
 800466c:	900b883a 	mov	r5,r18
 8004670:	013fffc4 	movi	r4,-1
 8004674:	102d883a 	mov	r22,r2
 8004678:	80120400 	call	8012040 <__umodsi3>
 800467c:	9009883a 	mov	r4,r18
 8004680:	100b883a 	mov	r5,r2
 8004684:	0011883a 	mov	r8,zero
 8004688:	0005883a 	mov	r2,zero
 800468c:	88fff404 	addi	r3,r17,-48
 8004690:	1a4002a8 	cmpgeui	r9,r3,10
 8004694:	48000426 	beq	r9,zero,80046a8 <_strtoul_l.isra.0+0xc8>
 8004698:	88ffefc4 	addi	r3,r17,-65
 800469c:	18c006a8 	cmpgeui	r3,r3,26
 80046a0:	18001a1e 	bne	r3,zero,800470c <_strtoul_l.isra.0+0x12c>
 80046a4:	88fff244 	addi	r3,r17,-55
 80046a8:	1c801d0e 	bge	r3,r18,8004720 <_strtoul_l.isra.0+0x140>
 80046ac:	40001516 	blt	r8,zero,8004704 <_strtoul_l.isra.0+0x124>
 80046b0:	b0801436 	bltu	r22,r2,8004704 <_strtoul_l.isra.0+0x124>
 80046b4:	15801226 	beq	r2,r22,8004700 <_strtoul_l.isra.0+0x120>
 80046b8:	2085383a 	mul	r2,r4,r2
 80046bc:	02000044 	movi	r8,1
 80046c0:	1885883a 	add	r2,r3,r2
 80046c4:	84000044 	addi	r16,r16,1
 80046c8:	847fffc3 	ldbu	r17,-1(r16)
 80046cc:	003fef06 	br	800468c <_strtoul_l.isra.0+0xac>
 80046d0:	84400003 	ldbu	r17,0(r16)
 80046d4:	002f883a 	mov	r23,zero
 80046d8:	24000084 	addi	r16,r4,2
 80046dc:	903fde1e 	bne	r18,zero,8004658 <_strtoul_l.isra.0+0x78>
 80046e0:	88800c20 	cmpeqi	r2,r17,48
 80046e4:	1000371e 	bne	r2,zero,80047c4 <_strtoul_l.isra.0+0x1e4>
 80046e8:	058666b4 	movhi	r22,6554
 80046ec:	01400144 	movi	r5,5
 80046f0:	b5a66644 	addi	r22,r22,-26215
 80046f4:	01000284 	movi	r4,10
 80046f8:	04800284 	movi	r18,10
 80046fc:	003fe106 	br	8004684 <_strtoul_l.isra.0+0xa4>
 8004700:	28ffed0e 	bge	r5,r3,80046b8 <_strtoul_l.isra.0+0xd8>
 8004704:	023fffc4 	movi	r8,-1
 8004708:	003fee06 	br	80046c4 <_strtoul_l.isra.0+0xe4>
 800470c:	88ffe7c4 	addi	r3,r17,-97
 8004710:	18c006a8 	cmpgeui	r3,r3,26
 8004714:	1800021e 	bne	r3,zero,8004720 <_strtoul_l.isra.0+0x140>
 8004718:	88ffea44 	addi	r3,r17,-87
 800471c:	1cbfe316 	blt	r3,r18,80046ac <_strtoul_l.isra.0+0xcc>
 8004720:	40001016 	blt	r8,zero,8004764 <_strtoul_l.isra.0+0x184>
 8004724:	b8000126 	beq	r23,zero,800472c <_strtoul_l.isra.0+0x14c>
 8004728:	0085c83a 	sub	r2,zero,r2
 800472c:	a0000226 	beq	r20,zero,8004738 <_strtoul_l.isra.0+0x158>
 8004730:	4000101e 	bne	r8,zero,8004774 <_strtoul_l.isra.0+0x194>
 8004734:	a4c00015 	stw	r19,0(r20)
 8004738:	dfc00817 	ldw	ra,32(sp)
 800473c:	ddc00717 	ldw	r23,28(sp)
 8004740:	dd800617 	ldw	r22,24(sp)
 8004744:	dd400517 	ldw	r21,20(sp)
 8004748:	dd000417 	ldw	r20,16(sp)
 800474c:	dcc00317 	ldw	r19,12(sp)
 8004750:	dc800217 	ldw	r18,8(sp)
 8004754:	dc400117 	ldw	r17,4(sp)
 8004758:	dc000017 	ldw	r16,0(sp)
 800475c:	dec00904 	addi	sp,sp,36
 8004760:	f800283a 	ret
 8004764:	00800884 	movi	r2,34
 8004768:	a8800015 	stw	r2,0(r21)
 800476c:	00bfffc4 	movi	r2,-1
 8004770:	a03ff126 	beq	r20,zero,8004738 <_strtoul_l.isra.0+0x158>
 8004774:	84ffffc4 	addi	r19,r16,-1
 8004778:	003fee06 	br	8004734 <_strtoul_l.isra.0+0x154>
 800477c:	84400003 	ldbu	r17,0(r16)
 8004780:	05c00044 	movi	r23,1
 8004784:	24000084 	addi	r16,r4,2
 8004788:	003fb206 	br	8004654 <_strtoul_l.isra.0+0x74>
 800478c:	88800c18 	cmpnei	r2,r17,48
 8004790:	1000201e 	bne	r2,zero,8004814 <_strtoul_l.isra.0+0x234>
 8004794:	80800003 	ldbu	r2,0(r16)
 8004798:	108037cc 	andi	r2,r2,223
 800479c:	10801620 	cmpeqi	r2,r2,88
 80047a0:	10001226 	beq	r2,zero,80047ec <_strtoul_l.isra.0+0x20c>
 80047a4:	05840034 	movhi	r22,4096
 80047a8:	84400043 	ldbu	r17,1(r16)
 80047ac:	014003c4 	movi	r5,15
 80047b0:	84000084 	addi	r16,r16,2
 80047b4:	b5bfffc4 	addi	r22,r22,-1
 80047b8:	01000404 	movi	r4,16
 80047bc:	04800404 	movi	r18,16
 80047c0:	003fb006 	br	8004684 <_strtoul_l.isra.0+0xa4>
 80047c4:	80800003 	ldbu	r2,0(r16)
 80047c8:	108037cc 	andi	r2,r2,223
 80047cc:	10801618 	cmpnei	r2,r2,88
 80047d0:	103ff426 	beq	r2,zero,80047a4 <_strtoul_l.isra.0+0x1c4>
 80047d4:	05880034 	movhi	r22,8192
 80047d8:	014001c4 	movi	r5,7
 80047dc:	b5bfffc4 	addi	r22,r22,-1
 80047e0:	01000204 	movi	r4,8
 80047e4:	04800204 	movi	r18,8
 80047e8:	003fa606 	br	8004684 <_strtoul_l.isra.0+0xa4>
 80047ec:	01400404 	movi	r5,16
 80047f0:	013fffc4 	movi	r4,-1
 80047f4:	8011fdc0 	call	8011fdc <__udivsi3>
 80047f8:	01400404 	movi	r5,16
 80047fc:	013fffc4 	movi	r4,-1
 8004800:	102d883a 	mov	r22,r2
 8004804:	80120400 	call	8012040 <__umodsi3>
 8004808:	01000404 	movi	r4,16
 800480c:	100b883a 	mov	r5,r2
 8004810:	003f9c06 	br	8004684 <_strtoul_l.isra.0+0xa4>
 8004814:	05840034 	movhi	r22,4096
 8004818:	014003c4 	movi	r5,15
 800481c:	b5bfffc4 	addi	r22,r22,-1
 8004820:	01000404 	movi	r4,16
 8004824:	003f9706 	br	8004684 <_strtoul_l.isra.0+0xa4>

08004828 <_strtoul_r>:
 8004828:	80045e01 	jmpi	80045e0 <_strtoul_l.isra.0>

0800482c <strtoul_l>:
 800482c:	00c20174 	movhi	r3,2053
 8004830:	2005883a 	mov	r2,r4
 8004834:	191bd417 	ldw	r4,28496(r3)
 8004838:	300f883a 	mov	r7,r6
 800483c:	280d883a 	mov	r6,r5
 8004840:	100b883a 	mov	r5,r2
 8004844:	80045e01 	jmpi	80045e0 <_strtoul_l.isra.0>

08004848 <strtoul>:
 8004848:	00c20174 	movhi	r3,2053
 800484c:	2005883a 	mov	r2,r4
 8004850:	191bd417 	ldw	r4,28496(r3)
 8004854:	300f883a 	mov	r7,r6
 8004858:	280d883a 	mov	r6,r5
 800485c:	100b883a 	mov	r5,r2
 8004860:	80045e01 	jmpi	80045e0 <_strtoul_l.isra.0>

08004864 <___svfprintf_internal_r>:
 8004864:	deffbf04 	addi	sp,sp,-260
 8004868:	dfc04015 	stw	ra,256(sp)
 800486c:	dd803d15 	stw	r22,244(sp)
 8004870:	dcc03a15 	stw	r19,232(sp)
 8004874:	dc803915 	stw	r18,228(sp)
 8004878:	2027883a 	mov	r19,r4
 800487c:	2825883a 	mov	r18,r5
 8004880:	302d883a 	mov	r22,r6
 8004884:	d9c00615 	stw	r7,24(sp)
 8004888:	df003f15 	stw	fp,252(sp)
 800488c:	ddc03e15 	stw	r23,248(sp)
 8004890:	dd403c15 	stw	r21,240(sp)
 8004894:	dd003b15 	stw	r20,236(sp)
 8004898:	dc403815 	stw	r17,224(sp)
 800489c:	dc003715 	stw	r16,220(sp)
 80048a0:	800b74c0 	call	800b74c <_localeconv_r>
 80048a4:	10800017 	ldw	r2,0(r2)
 80048a8:	1009883a 	mov	r4,r2
 80048ac:	d8800d15 	stw	r2,52(sp)
 80048b0:	80044880 	call	8004488 <strlen>
 80048b4:	90c0030b 	ldhu	r3,12(r18)
 80048b8:	d8800c15 	stw	r2,48(sp)
 80048bc:	18c0200c 	andi	r3,r3,128
 80048c0:	18000226 	beq	r3,zero,80048cc <___svfprintf_internal_r+0x68>
 80048c4:	90800417 	ldw	r2,16(r18)
 80048c8:	10055c26 	beq	r2,zero,8005e3c <___svfprintf_internal_r+0x15d8>
 80048cc:	d8802704 	addi	r2,sp,156
 80048d0:	b02f883a 	mov	r23,r22
 80048d4:	d8801a15 	stw	r2,104(sp)
 80048d8:	d8001c15 	stw	zero,112(sp)
 80048dc:	d8001b15 	stw	zero,108(sp)
 80048e0:	d8000815 	stw	zero,32(sp)
 80048e4:	d8000915 	stw	zero,36(sp)
 80048e8:	d8000a15 	stw	zero,40(sp)
 80048ec:	d8000b15 	stw	zero,44(sp)
 80048f0:	d8001015 	stw	zero,64(sp)
 80048f4:	d8000515 	stw	zero,20(sp)
 80048f8:	102d883a 	mov	r22,r2
 80048fc:	b8800007 	ldb	r2,0(r23)
 8004900:	1000d526 	beq	r2,zero,8004c58 <___svfprintf_internal_r+0x3f4>
 8004904:	b821883a 	mov	r16,r23
 8004908:	00000306 	br	8004918 <___svfprintf_internal_r+0xb4>
 800490c:	80800047 	ldb	r2,1(r16)
 8004910:	84000044 	addi	r16,r16,1
 8004914:	10010626 	beq	r2,zero,8004d30 <___svfprintf_internal_r+0x4cc>
 8004918:	10800958 	cmpnei	r2,r2,37
 800491c:	103ffb1e 	bne	r2,zero,800490c <___svfprintf_internal_r+0xa8>
 8004920:	85e3c83a 	sub	r17,r16,r23
 8004924:	85c1041e 	bne	r16,r23,8004d38 <___svfprintf_internal_r+0x4d4>
 8004928:	80800003 	ldbu	r2,0(r16)
 800492c:	10803fcc 	andi	r2,r2,255
 8004930:	1080201c 	xori	r2,r2,128
 8004934:	10bfe004 	addi	r2,r2,-128
 8004938:	1000c726 	beq	r2,zero,8004c58 <___svfprintf_internal_r+0x3f4>
 800493c:	82c00047 	ldb	r11,1(r16)
 8004940:	85c00044 	addi	r23,r16,1
 8004944:	d8001345 	stb	zero,77(sp)
 8004948:	0009883a 	mov	r4,zero
 800494c:	000b883a 	mov	r5,zero
 8004950:	023fffc4 	movi	r8,-1
 8004954:	0021883a 	mov	r16,zero
 8004958:	0019883a 	mov	r12,zero
 800495c:	bdc00044 	addi	r23,r23,1
 8004960:	5839883a 	mov	fp,r11
 8004964:	e0bff804 	addi	r2,fp,-32
 8004968:	10c01668 	cmpgeui	r3,r2,89
 800496c:	18006a1e 	bne	r3,zero,8004b18 <___svfprintf_internal_r+0x2b4>
 8004970:	100490ba 	slli	r2,r2,2
 8004974:	00c20034 	movhi	r3,2048
 8004978:	10c7883a 	add	r3,r2,r3
 800497c:	18926117 	ldw	r2,18820(r3)
 8004980:	1000683a 	jmp	r2
 8004984:	08005264 	muli	zero,at,329
 8004988:	08004b18 	cmpnei	zero,at,300
 800498c:	08004b18 	cmpnei	zero,at,300
 8004990:	08005258 	cmpnei	zero,at,329
 8004994:	08004b18 	cmpnei	zero,at,300
 8004998:	08004b18 	cmpnei	zero,at,300
 800499c:	08004b18 	cmpnei	zero,at,300
 80049a0:	08004b18 	cmpnei	zero,at,300
 80049a4:	08004b18 	cmpnei	zero,at,300
 80049a8:	08004b18 	cmpnei	zero,at,300
 80049ac:	08005230 	cmpltui	zero,at,328
 80049b0:	08005220 	cmpeqi	zero,at,328
 80049b4:	08004b18 	cmpnei	zero,at,300
 80049b8:	08005208 	cmpgei	zero,at,328
 80049bc:	080051c4 	addi	zero,at,327
 80049c0:	08004b18 	cmpnei	zero,at,300
 80049c4:	080051b8 	rdprs	zero,at,326
 80049c8:	08004ae8 	cmpgeui	zero,at,299
 80049cc:	08004ae8 	cmpgeui	zero,at,299
 80049d0:	08004ae8 	cmpgeui	zero,at,299
 80049d4:	08004ae8 	cmpgeui	zero,at,299
 80049d8:	08004ae8 	cmpgeui	zero,at,299
 80049dc:	08004ae8 	cmpgeui	zero,at,299
 80049e0:	08004ae8 	cmpgeui	zero,at,299
 80049e4:	08004ae8 	cmpgeui	zero,at,299
 80049e8:	08004ae8 	cmpgeui	zero,at,299
 80049ec:	08004b18 	cmpnei	zero,at,300
 80049f0:	08004b18 	cmpnei	zero,at,300
 80049f4:	08004b18 	cmpnei	zero,at,300
 80049f8:	08004b18 	cmpnei	zero,at,300
 80049fc:	08004b18 	cmpnei	zero,at,300
 8004a00:	08004b18 	cmpnei	zero,at,300
 8004a04:	08004b18 	cmpnei	zero,at,300
 8004a08:	08004b18 	cmpnei	zero,at,300
 8004a0c:	08004b18 	cmpnei	zero,at,300
 8004a10:	08004b18 	cmpnei	zero,at,300
 8004a14:	080050ac 	andhi	zero,at,322
 8004a18:	08004d94 	ori	zero,at,310
 8004a1c:	08004b18 	cmpnei	zero,at,300
 8004a20:	08004d94 	ori	zero,at,310
 8004a24:	08004b18 	cmpnei	zero,at,300
 8004a28:	08004b18 	cmpnei	zero,at,300
 8004a2c:	08004b18 	cmpnei	zero,at,300
 8004a30:	08004b18 	cmpnei	zero,at,300
 8004a34:	080050a0 	cmpeqi	zero,at,322
 8004a38:	08004b18 	cmpnei	zero,at,300
 8004a3c:	08004b18 	cmpnei	zero,at,300
 8004a40:	08004cc8 	cmpgei	zero,at,307
 8004a44:	08004b18 	cmpnei	zero,at,300
 8004a48:	08004b18 	cmpnei	zero,at,300
 8004a4c:	08004b18 	cmpnei	zero,at,300
 8004a50:	08004b18 	cmpnei	zero,at,300
 8004a54:	08004b18 	cmpnei	zero,at,300
 8004a58:	08004ca0 	cmpeqi	zero,at,306
 8004a5c:	08004b18 	cmpnei	zero,at,300
 8004a60:	08004b18 	cmpnei	zero,at,300
 8004a64:	08005358 	cmpnei	zero,at,333
 8004a68:	08004b18 	cmpnei	zero,at,300
 8004a6c:	08004b18 	cmpnei	zero,at,300
 8004a70:	08004b18 	cmpnei	zero,at,300
 8004a74:	08004b18 	cmpnei	zero,at,300
 8004a78:	08004b18 	cmpnei	zero,at,300
 8004a7c:	08004b18 	cmpnei	zero,at,300
 8004a80:	08004b18 	cmpnei	zero,at,300
 8004a84:	08004b18 	cmpnei	zero,at,300
 8004a88:	08004b18 	cmpnei	zero,at,300
 8004a8c:	08004b18 	cmpnei	zero,at,300
 8004a90:	08005330 	cmpltui	zero,at,332
 8004a94:	08004f98 	cmpnei	zero,at,318
 8004a98:	08004d94 	ori	zero,at,310
 8004a9c:	08004d94 	ori	zero,at,310
 8004aa0:	08004d94 	ori	zero,at,310
 8004aa4:	08004ff8 	rdprs	zero,at,319
 8004aa8:	08004f98 	cmpnei	zero,at,318
 8004aac:	08004b18 	cmpnei	zero,at,300
 8004ab0:	08004b18 	cmpnei	zero,at,300
 8004ab4:	0800508c 	andi	zero,at,322
 8004ab8:	08004b18 	cmpnei	zero,at,300
 8004abc:	08005050 	cmplti	zero,at,321
 8004ac0:	08004ccc 	andi	zero,at,307
 8004ac4:	08005010 	cmplti	zero,at,320
 8004ac8:	08005004 	addi	zero,at,320
 8004acc:	08004b18 	cmpnei	zero,at,300
 8004ad0:	080052d8 	cmpnei	zero,at,331
 8004ad4:	08004b18 	cmpnei	zero,at,300
 8004ad8:	08004ca4 	muli	zero,at,306
 8004adc:	08004b18 	cmpnei	zero,at,300
 8004ae0:	08004b18 	cmpnei	zero,at,300
 8004ae4:	08005290 	cmplti	zero,at,330
 8004ae8:	0021883a 	mov	r16,zero
 8004aec:	e0bff404 	addi	r2,fp,-48
 8004af0:	bf000007 	ldb	fp,0(r23)
 8004af4:	840002a4 	muli	r16,r16,10
 8004af8:	bdc00044 	addi	r23,r23,1
 8004afc:	1421883a 	add	r16,r2,r16
 8004b00:	e0bff404 	addi	r2,fp,-48
 8004b04:	10c002b0 	cmpltui	r3,r2,10
 8004b08:	183ff91e 	bne	r3,zero,8004af0 <___svfprintf_internal_r+0x28c>
 8004b0c:	e0bff804 	addi	r2,fp,-32
 8004b10:	10c01668 	cmpgeui	r3,r2,89
 8004b14:	183f9626 	beq	r3,zero,8004970 <___svfprintf_internal_r+0x10c>
 8004b18:	21003fcc 	andi	r4,r4,255
 8004b1c:	2006981e 	bne	r4,zero,8006580 <___svfprintf_internal_r+0x1d1c>
 8004b20:	e0004d26 	beq	fp,zero,8004c58 <___svfprintf_internal_r+0x3f4>
 8004b24:	df001d05 	stb	fp,116(sp)
 8004b28:	d8001345 	stb	zero,77(sp)
 8004b2c:	05000044 	movi	r20,1
 8004b30:	05400044 	movi	r21,1
 8004b34:	dc401d04 	addi	r17,sp,116
 8004b38:	db000415 	stw	r12,16(sp)
 8004b3c:	0011883a 	mov	r8,zero
 8004b40:	d8000715 	stw	zero,28(sp)
 8004b44:	d8800417 	ldw	r2,16(sp)
 8004b48:	1380008c 	andi	r14,r2,2
 8004b4c:	70000126 	beq	r14,zero,8004b54 <___svfprintf_internal_r+0x2f0>
 8004b50:	a5000084 	addi	r20,r20,2
 8004b54:	d8800417 	ldw	r2,16(sp)
 8004b58:	d8c01c17 	ldw	r3,112(sp)
 8004b5c:	1340210c 	andi	r13,r2,132
 8004b60:	6800021e 	bne	r13,zero,8004b6c <___svfprintf_internal_r+0x308>
 8004b64:	850fc83a 	sub	r7,r16,r20
 8004b68:	01c32d16 	blt	zero,r7,8005820 <___svfprintf_internal_r+0xfbc>
 8004b6c:	d8801347 	ldb	r2,77(sp)
 8004b70:	10000c26 	beq	r2,zero,8004ba4 <___svfprintf_internal_r+0x340>
 8004b74:	d8801b17 	ldw	r2,108(sp)
 8004b78:	d9001344 	addi	r4,sp,77
 8004b7c:	18c00044 	addi	r3,r3,1
 8004b80:	10800044 	addi	r2,r2,1
 8004b84:	b1000015 	stw	r4,0(r22)
 8004b88:	01000044 	movi	r4,1
 8004b8c:	d8801b15 	stw	r2,108(sp)
 8004b90:	b1000115 	stw	r4,4(r22)
 8004b94:	d8c01c15 	stw	r3,112(sp)
 8004b98:	10800208 	cmpgei	r2,r2,8
 8004b9c:	1003611e 	bne	r2,zero,8005924 <___svfprintf_internal_r+0x10c0>
 8004ba0:	b5800204 	addi	r22,r22,8
 8004ba4:	70000c26 	beq	r14,zero,8004bd8 <___svfprintf_internal_r+0x374>
 8004ba8:	d8801b17 	ldw	r2,108(sp)
 8004bac:	d9001384 	addi	r4,sp,78
 8004bb0:	18c00084 	addi	r3,r3,2
 8004bb4:	10800044 	addi	r2,r2,1
 8004bb8:	b1000015 	stw	r4,0(r22)
 8004bbc:	01000084 	movi	r4,2
 8004bc0:	d8801b15 	stw	r2,108(sp)
 8004bc4:	b1000115 	stw	r4,4(r22)
 8004bc8:	d8c01c15 	stw	r3,112(sp)
 8004bcc:	10800208 	cmpgei	r2,r2,8
 8004bd0:	1003621e 	bne	r2,zero,800595c <___svfprintf_internal_r+0x10f8>
 8004bd4:	b5800204 	addi	r22,r22,8
 8004bd8:	6b402018 	cmpnei	r13,r13,128
 8004bdc:	68023926 	beq	r13,zero,80054c4 <___svfprintf_internal_r+0xc60>
 8004be0:	4551c83a 	sub	r8,r8,r21
 8004be4:	02027116 	blt	zero,r8,80055ac <___svfprintf_internal_r+0xd48>
 8004be8:	d8800417 	ldw	r2,16(sp)
 8004bec:	1080400c 	andi	r2,r2,256
 8004bf0:	1001eb1e 	bne	r2,zero,80053a0 <___svfprintf_internal_r+0xb3c>
 8004bf4:	d8801b17 	ldw	r2,108(sp)
 8004bf8:	1d47883a 	add	r3,r3,r21
 8004bfc:	b4400015 	stw	r17,0(r22)
 8004c00:	10800044 	addi	r2,r2,1
 8004c04:	b5400115 	stw	r21,4(r22)
 8004c08:	d8801b15 	stw	r2,108(sp)
 8004c0c:	d8c01c15 	stw	r3,112(sp)
 8004c10:	10800208 	cmpgei	r2,r2,8
 8004c14:	1002ee1e 	bne	r2,zero,80057d0 <___svfprintf_internal_r+0xf6c>
 8004c18:	b5800204 	addi	r22,r22,8
 8004c1c:	d8800417 	ldw	r2,16(sp)
 8004c20:	1440010c 	andi	r17,r2,4
 8004c24:	88000226 	beq	r17,zero,8004c30 <___svfprintf_internal_r+0x3cc>
 8004c28:	8523c83a 	sub	r17,r16,r20
 8004c2c:	0440ab16 	blt	zero,r17,8004edc <___svfprintf_internal_r+0x678>
 8004c30:	8500010e 	bge	r16,r20,8004c38 <___svfprintf_internal_r+0x3d4>
 8004c34:	a021883a 	mov	r16,r20
 8004c38:	d8800517 	ldw	r2,20(sp)
 8004c3c:	1405883a 	add	r2,r2,r16
 8004c40:	d8800515 	stw	r2,20(sp)
 8004c44:	1802a01e 	bne	r3,zero,80056c8 <___svfprintf_internal_r+0xe64>
 8004c48:	b8800007 	ldb	r2,0(r23)
 8004c4c:	d8001b15 	stw	zero,108(sp)
 8004c50:	dd802704 	addi	r22,sp,156
 8004c54:	103f2b1e 	bne	r2,zero,8004904 <___svfprintf_internal_r+0xa0>
 8004c58:	d8801c17 	ldw	r2,112(sp)
 8004c5c:	10064a1e 	bne	r2,zero,8006588 <___svfprintf_internal_r+0x1d24>
 8004c60:	9080030b 	ldhu	r2,12(r18)
 8004c64:	1080100c 	andi	r2,r2,64
 8004c68:	1006eb1e 	bne	r2,zero,8006818 <___svfprintf_internal_r+0x1fb4>
 8004c6c:	d8800517 	ldw	r2,20(sp)
 8004c70:	dfc04017 	ldw	ra,256(sp)
 8004c74:	df003f17 	ldw	fp,252(sp)
 8004c78:	ddc03e17 	ldw	r23,248(sp)
 8004c7c:	dd803d17 	ldw	r22,244(sp)
 8004c80:	dd403c17 	ldw	r21,240(sp)
 8004c84:	dd003b17 	ldw	r20,236(sp)
 8004c88:	dcc03a17 	ldw	r19,232(sp)
 8004c8c:	dc803917 	ldw	r18,228(sp)
 8004c90:	dc403817 	ldw	r17,224(sp)
 8004c94:	dc003717 	ldw	r16,220(sp)
 8004c98:	dec04104 	addi	sp,sp,260
 8004c9c:	f800283a 	ret
 8004ca0:	63000414 	ori	r12,r12,16
 8004ca4:	6080080c 	andi	r2,r12,32
 8004ca8:	10008026 	beq	r2,zero,8004eac <___svfprintf_internal_r+0x648>
 8004cac:	d8c00617 	ldw	r3,24(sp)
 8004cb0:	00800044 	movi	r2,1
 8004cb4:	1d000017 	ldw	r20,0(r3)
 8004cb8:	1d400117 	ldw	r21,4(r3)
 8004cbc:	18c00204 	addi	r3,r3,8
 8004cc0:	d8c00615 	stw	r3,24(sp)
 8004cc4:	00000906 	br	8004cec <___svfprintf_internal_r+0x488>
 8004cc8:	63000414 	ori	r12,r12,16
 8004ccc:	6080080c 	andi	r2,r12,32
 8004cd0:	10006a26 	beq	r2,zero,8004e7c <___svfprintf_internal_r+0x618>
 8004cd4:	d8c00617 	ldw	r3,24(sp)
 8004cd8:	0005883a 	mov	r2,zero
 8004cdc:	1d000017 	ldw	r20,0(r3)
 8004ce0:	1d400117 	ldw	r21,4(r3)
 8004ce4:	18c00204 	addi	r3,r3,8
 8004ce8:	d8c00615 	stw	r3,24(sp)
 8004cec:	d8001345 	stb	zero,77(sp)
 8004cf0:	40ffffe0 	cmpeqi	r3,r8,-1
 8004cf4:	001b883a 	mov	r13,zero
 8004cf8:	1801071e 	bne	r3,zero,8005118 <___svfprintf_internal_r+0x8b4>
 8004cfc:	047fdfc4 	movi	r17,-129
 8004d00:	6448703a 	and	r4,r12,r17
 8004d04:	a546b03a 	or	r3,r20,r21
 8004d08:	d9000415 	stw	r4,16(sp)
 8004d0c:	1802b81e 	bne	r3,zero,80057f0 <___svfprintf_internal_r+0xf8c>
 8004d10:	4002571e 	bne	r8,zero,8005670 <___svfprintf_internal_r+0xe0c>
 8004d14:	1000b41e 	bne	r2,zero,8004fe8 <___svfprintf_internal_r+0x784>
 8004d18:	6540004c 	andi	r21,r12,1
 8004d1c:	a803bb26 	beq	r21,zero,8005c0c <___svfprintf_internal_r+0x13a8>
 8004d20:	00800c04 	movi	r2,48
 8004d24:	d88026c5 	stb	r2,155(sp)
 8004d28:	dc4026c4 	addi	r17,sp,155
 8004d2c:	00011806 	br	8005190 <___svfprintf_internal_r+0x92c>
 8004d30:	85e3c83a 	sub	r17,r16,r23
 8004d34:	85ffc826 	beq	r16,r23,8004c58 <___svfprintf_internal_r+0x3f4>
 8004d38:	d8c01c17 	ldw	r3,112(sp)
 8004d3c:	d8801b17 	ldw	r2,108(sp)
 8004d40:	b5c00015 	stw	r23,0(r22)
 8004d44:	1c47883a 	add	r3,r3,r17
 8004d48:	10800044 	addi	r2,r2,1
 8004d4c:	d8801b15 	stw	r2,108(sp)
 8004d50:	b4400115 	stw	r17,4(r22)
 8004d54:	d8c01c15 	stw	r3,112(sp)
 8004d58:	10800208 	cmpgei	r2,r2,8
 8004d5c:	1000061e 	bne	r2,zero,8004d78 <___svfprintf_internal_r+0x514>
 8004d60:	b5800204 	addi	r22,r22,8
 8004d64:	d8c00517 	ldw	r3,20(sp)
 8004d68:	80800003 	ldbu	r2,0(r16)
 8004d6c:	1c47883a 	add	r3,r3,r17
 8004d70:	d8c00515 	stw	r3,20(sp)
 8004d74:	003eed06 	br	800492c <___svfprintf_internal_r+0xc8>
 8004d78:	d9801a04 	addi	r6,sp,104
 8004d7c:	900b883a 	mov	r5,r18
 8004d80:	9809883a 	mov	r4,r19
 8004d84:	800dce40 	call	800dce4 <__ssprint_r>
 8004d88:	103fb51e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8004d8c:	dd802704 	addi	r22,sp,156
 8004d90:	003ff406 	br	8004d64 <___svfprintf_internal_r+0x500>
 8004d94:	21003fcc 	andi	r4,r4,255
 8004d98:	2006611e 	bne	r4,zero,8006720 <___svfprintf_internal_r+0x1ebc>
 8004d9c:	d8c00617 	ldw	r3,24(sp)
 8004da0:	6080020c 	andi	r2,r12,8
 8004da4:	19000204 	addi	r4,r3,8
 8004da8:	d9000e15 	stw	r4,56(sp)
 8004dac:	1003a326 	beq	r2,zero,8005c3c <___svfprintf_internal_r+0x13d8>
 8004db0:	18800017 	ldw	r2,0(r3)
 8004db4:	d8800915 	stw	r2,36(sp)
 8004db8:	18800117 	ldw	r2,4(r3)
 8004dbc:	d8800a15 	stw	r2,40(sp)
 8004dc0:	dd400a17 	ldw	r21,40(sp)
 8004dc4:	dd000917 	ldw	r20,36(sp)
 8004dc8:	00a00034 	movhi	r2,32768
 8004dcc:	10bfffc4 	addi	r2,r2,-1
 8004dd0:	a8a2703a 	and	r17,r21,r2
 8004dd4:	01dffc34 	movhi	r7,32752
 8004dd8:	01bfffc4 	movi	r6,-1
 8004ddc:	39ffffc4 	addi	r7,r7,-1
 8004de0:	a009883a 	mov	r4,r20
 8004de4:	880b883a 	mov	r5,r17
 8004de8:	da000615 	stw	r8,24(sp)
 8004dec:	db000415 	stw	r12,16(sp)
 8004df0:	80144780 	call	8014478 <__unorddf2>
 8004df4:	db000417 	ldw	r12,16(sp)
 8004df8:	da000617 	ldw	r8,24(sp)
 8004dfc:	10045f1e 	bne	r2,zero,8005f7c <___svfprintf_internal_r+0x1718>
 8004e00:	01dffc34 	movhi	r7,32752
 8004e04:	01bfffc4 	movi	r6,-1
 8004e08:	39ffffc4 	addi	r7,r7,-1
 8004e0c:	a009883a 	mov	r4,r20
 8004e10:	880b883a 	mov	r5,r17
 8004e14:	80133e40 	call	80133e4 <__ledf2>
 8004e18:	db000417 	ldw	r12,16(sp)
 8004e1c:	da000617 	ldw	r8,24(sp)
 8004e20:	0084560e 	bge	zero,r2,8005f7c <___svfprintf_internal_r+0x1718>
 8004e24:	000d883a 	mov	r6,zero
 8004e28:	000f883a 	mov	r7,zero
 8004e2c:	a009883a 	mov	r4,r20
 8004e30:	a80b883a 	mov	r5,r21
 8004e34:	80133e40 	call	80133e4 <__ledf2>
 8004e38:	db000417 	ldw	r12,16(sp)
 8004e3c:	1005b216 	blt	r2,zero,8006508 <___svfprintf_internal_r+0x1ca4>
 8004e40:	db401343 	ldbu	r13,77(sp)
 8004e44:	e0801210 	cmplti	r2,fp,72
 8004e48:	10055d1e 	bne	r2,zero,80063c0 <___svfprintf_internal_r+0x1b5c>
 8004e4c:	04420174 	movhi	r17,2053
 8004e50:	8c415404 	addi	r17,r17,1360
 8004e54:	00bfdfc4 	movi	r2,-129
 8004e58:	6084703a 	and	r2,r12,r2
 8004e5c:	d8800415 	stw	r2,16(sp)
 8004e60:	d8800e17 	ldw	r2,56(sp)
 8004e64:	050000c4 	movi	r20,3
 8004e68:	054000c4 	movi	r21,3
 8004e6c:	d8800615 	stw	r2,24(sp)
 8004e70:	0011883a 	mov	r8,zero
 8004e74:	d8000715 	stw	zero,28(sp)
 8004e78:	0000c906 	br	80051a0 <___svfprintf_internal_r+0x93c>
 8004e7c:	d9000617 	ldw	r4,24(sp)
 8004e80:	6080040c 	andi	r2,r12,16
 8004e84:	20c00104 	addi	r3,r4,4
 8004e88:	1003671e 	bne	r2,zero,8005c28 <___svfprintf_internal_r+0x13c4>
 8004e8c:	6080100c 	andi	r2,r12,64
 8004e90:	10054526 	beq	r2,zero,80063a8 <___svfprintf_internal_r+0x1b44>
 8004e94:	d8800617 	ldw	r2,24(sp)
 8004e98:	002b883a 	mov	r21,zero
 8004e9c:	d8c00615 	stw	r3,24(sp)
 8004ea0:	1500000b 	ldhu	r20,0(r2)
 8004ea4:	0005883a 	mov	r2,zero
 8004ea8:	003f9006 	br	8004cec <___svfprintf_internal_r+0x488>
 8004eac:	d9000617 	ldw	r4,24(sp)
 8004eb0:	6080040c 	andi	r2,r12,16
 8004eb4:	20c00104 	addi	r3,r4,4
 8004eb8:	1003561e 	bne	r2,zero,8005c14 <___svfprintf_internal_r+0x13b0>
 8004ebc:	6080100c 	andi	r2,r12,64
 8004ec0:	1004f326 	beq	r2,zero,8006290 <___svfprintf_internal_r+0x1a2c>
 8004ec4:	d8800617 	ldw	r2,24(sp)
 8004ec8:	002b883a 	mov	r21,zero
 8004ecc:	d8c00615 	stw	r3,24(sp)
 8004ed0:	1500000b 	ldhu	r20,0(r2)
 8004ed4:	00800044 	movi	r2,1
 8004ed8:	003f8406 	br	8004cec <___svfprintf_internal_r+0x488>
 8004edc:	03020174 	movhi	r12,2053
 8004ee0:	89000450 	cmplti	r4,r17,17
 8004ee4:	d8801b17 	ldw	r2,108(sp)
 8004ee8:	63016804 	addi	r12,r12,1440
 8004eec:	20001b1e 	bne	r4,zero,8004f5c <___svfprintf_internal_r+0x6f8>
 8004ef0:	05400404 	movi	r21,16
 8004ef4:	6039883a 	mov	fp,r12
 8004ef8:	00000406 	br	8004f0c <___svfprintf_internal_r+0x6a8>
 8004efc:	8c7ffc04 	addi	r17,r17,-16
 8004f00:	89000448 	cmpgei	r4,r17,17
 8004f04:	b5800204 	addi	r22,r22,8
 8004f08:	20001326 	beq	r4,zero,8004f58 <___svfprintf_internal_r+0x6f4>
 8004f0c:	10800044 	addi	r2,r2,1
 8004f10:	18c00404 	addi	r3,r3,16
 8004f14:	b7000015 	stw	fp,0(r22)
 8004f18:	b5400115 	stw	r21,4(r22)
 8004f1c:	d8c01c15 	stw	r3,112(sp)
 8004f20:	d8801b15 	stw	r2,108(sp)
 8004f24:	11000208 	cmpgei	r4,r2,8
 8004f28:	203ff426 	beq	r4,zero,8004efc <___svfprintf_internal_r+0x698>
 8004f2c:	d9801a04 	addi	r6,sp,104
 8004f30:	900b883a 	mov	r5,r18
 8004f34:	9809883a 	mov	r4,r19
 8004f38:	800dce40 	call	800dce4 <__ssprint_r>
 8004f3c:	103f481e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8004f40:	8c7ffc04 	addi	r17,r17,-16
 8004f44:	89000448 	cmpgei	r4,r17,17
 8004f48:	d8c01c17 	ldw	r3,112(sp)
 8004f4c:	d8801b17 	ldw	r2,108(sp)
 8004f50:	dd802704 	addi	r22,sp,156
 8004f54:	203fed1e 	bne	r4,zero,8004f0c <___svfprintf_internal_r+0x6a8>
 8004f58:	e019883a 	mov	r12,fp
 8004f5c:	10800044 	addi	r2,r2,1
 8004f60:	1c47883a 	add	r3,r3,r17
 8004f64:	d8801b15 	stw	r2,108(sp)
 8004f68:	b3000015 	stw	r12,0(r22)
 8004f6c:	b4400115 	stw	r17,4(r22)
 8004f70:	d8c01c15 	stw	r3,112(sp)
 8004f74:	10800210 	cmplti	r2,r2,8
 8004f78:	103f2d1e 	bne	r2,zero,8004c30 <___svfprintf_internal_r+0x3cc>
 8004f7c:	d9801a04 	addi	r6,sp,104
 8004f80:	900b883a 	mov	r5,r18
 8004f84:	9809883a 	mov	r4,r19
 8004f88:	800dce40 	call	800dce4 <__ssprint_r>
 8004f8c:	103f341e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8004f90:	d8c01c17 	ldw	r3,112(sp)
 8004f94:	003f2606 	br	8004c30 <___svfprintf_internal_r+0x3cc>
 8004f98:	21003fcc 	andi	r4,r4,255
 8004f9c:	2005ea1e 	bne	r4,zero,8006748 <___svfprintf_internal_r+0x1ee4>
 8004fa0:	6080080c 	andi	r2,r12,32
 8004fa4:	10004626 	beq	r2,zero,80050c0 <___svfprintf_internal_r+0x85c>
 8004fa8:	d8c00617 	ldw	r3,24(sp)
 8004fac:	18800117 	ldw	r2,4(r3)
 8004fb0:	1d000017 	ldw	r20,0(r3)
 8004fb4:	18c00204 	addi	r3,r3,8
 8004fb8:	d8c00615 	stw	r3,24(sp)
 8004fbc:	102b883a 	mov	r21,r2
 8004fc0:	10004b16 	blt	r2,zero,80050f0 <___svfprintf_internal_r+0x88c>
 8004fc4:	40bfffd8 	cmpnei	r2,r8,-1
 8004fc8:	10043f26 	beq	r2,zero,80060c8 <___svfprintf_internal_r+0x1864>
 8004fcc:	047fdfc4 	movi	r17,-129
 8004fd0:	6446703a 	and	r3,r12,r17
 8004fd4:	a544b03a 	or	r2,r20,r21
 8004fd8:	d8c00415 	stw	r3,16(sp)
 8004fdc:	db401343 	ldbu	r13,77(sp)
 8004fe0:	1003411e 	bne	r2,zero,8005ce8 <___svfprintf_internal_r+0x1484>
 8004fe4:	4005801e 	bne	r8,zero,80065e8 <___svfprintf_internal_r+0x1d84>
 8004fe8:	0011883a 	mov	r8,zero
 8004fec:	002b883a 	mov	r21,zero
 8004ff0:	dc402704 	addi	r17,sp,156
 8004ff4:	00006606 	br	8005190 <___svfprintf_internal_r+0x92c>
 8004ff8:	bac00007 	ldb	r11,0(r23)
 8004ffc:	63001014 	ori	r12,r12,64
 8005000:	003e5606 	br	800495c <___svfprintf_internal_r+0xf8>
 8005004:	bac00007 	ldb	r11,0(r23)
 8005008:	63000814 	ori	r12,r12,32
 800500c:	003e5306 	br	800495c <___svfprintf_internal_r+0xf8>
 8005010:	d8c00617 	ldw	r3,24(sp)
 8005014:	00800c04 	movi	r2,48
 8005018:	d8801385 	stb	r2,78(sp)
 800501c:	00801e04 	movi	r2,120
 8005020:	01020174 	movhi	r4,2053
 8005024:	d88013c5 	stb	r2,79(sp)
 8005028:	18800104 	addi	r2,r3,4
 800502c:	d8800615 	stw	r2,24(sp)
 8005030:	20815c04 	addi	r2,r4,1392
 8005034:	d8800b15 	stw	r2,44(sp)
 8005038:	1d000017 	ldw	r20,0(r3)
 800503c:	002b883a 	mov	r21,zero
 8005040:	63000094 	ori	r12,r12,2
 8005044:	00800084 	movi	r2,2
 8005048:	07001e04 	movi	fp,120
 800504c:	003f2706 	br	8004cec <___svfprintf_internal_r+0x488>
 8005050:	21003fcc 	andi	r4,r4,255
 8005054:	2005b41e 	bne	r4,zero,8006728 <___svfprintf_internal_r+0x1ec4>
 8005058:	d9000617 	ldw	r4,24(sp)
 800505c:	6080080c 	andi	r2,r12,32
 8005060:	20c00017 	ldw	r3,0(r4)
 8005064:	21000104 	addi	r4,r4,4
 8005068:	d9000615 	stw	r4,24(sp)
 800506c:	1002f91e 	bne	r2,zero,8005c54 <___svfprintf_internal_r+0x13f0>
 8005070:	6080040c 	andi	r2,r12,16
 8005074:	10037a1e 	bne	r2,zero,8005e60 <___svfprintf_internal_r+0x15fc>
 8005078:	6300100c 	andi	r12,r12,64
 800507c:	60037826 	beq	r12,zero,8005e60 <___svfprintf_internal_r+0x15fc>
 8005080:	d8800517 	ldw	r2,20(sp)
 8005084:	1880000d 	sth	r2,0(r3)
 8005088:	003e1c06 	br	80048fc <___svfprintf_internal_r+0x98>
 800508c:	bac00007 	ldb	r11,0(r23)
 8005090:	58801b18 	cmpnei	r2,r11,108
 8005094:	10042d26 	beq	r2,zero,800614c <___svfprintf_internal_r+0x18e8>
 8005098:	63000414 	ori	r12,r12,16
 800509c:	003e2f06 	br	800495c <___svfprintf_internal_r+0xf8>
 80050a0:	bac00007 	ldb	r11,0(r23)
 80050a4:	63000214 	ori	r12,r12,8
 80050a8:	003e2c06 	br	800495c <___svfprintf_internal_r+0xf8>
 80050ac:	21003fcc 	andi	r4,r4,255
 80050b0:	2005a31e 	bne	r4,zero,8006740 <___svfprintf_internal_r+0x1edc>
 80050b4:	63000414 	ori	r12,r12,16
 80050b8:	6080080c 	andi	r2,r12,32
 80050bc:	103fba1e 	bne	r2,zero,8004fa8 <___svfprintf_internal_r+0x744>
 80050c0:	d9000617 	ldw	r4,24(sp)
 80050c4:	6080040c 	andi	r2,r12,16
 80050c8:	20c00104 	addi	r3,r4,4
 80050cc:	1002f01e 	bne	r2,zero,8005c90 <___svfprintf_internal_r+0x142c>
 80050d0:	6080100c 	andi	r2,r12,64
 80050d4:	10046826 	beq	r2,zero,8006278 <___svfprintf_internal_r+0x1a14>
 80050d8:	d8800617 	ldw	r2,24(sp)
 80050dc:	d8c00615 	stw	r3,24(sp)
 80050e0:	1500000f 	ldh	r20,0(r2)
 80050e4:	a02bd7fa 	srai	r21,r20,31
 80050e8:	a805883a 	mov	r2,r21
 80050ec:	103fb50e 	bge	r2,zero,8004fc4 <___svfprintf_internal_r+0x760>
 80050f0:	a004c03a 	cmpne	r2,r20,zero
 80050f4:	056bc83a 	sub	r21,zero,r21
 80050f8:	a8abc83a 	sub	r21,r21,r2
 80050fc:	00800b44 	movi	r2,45
 8005100:	d8801345 	stb	r2,77(sp)
 8005104:	40ffffe0 	cmpeqi	r3,r8,-1
 8005108:	0529c83a 	sub	r20,zero,r20
 800510c:	03400b44 	movi	r13,45
 8005110:	00800044 	movi	r2,1
 8005114:	183ef926 	beq	r3,zero,8004cfc <___svfprintf_internal_r+0x498>
 8005118:	10c00060 	cmpeqi	r3,r2,1
 800511c:	1801b71e 	bne	r3,zero,80057fc <___svfprintf_internal_r+0xf98>
 8005120:	108000a0 	cmpeqi	r2,r2,2
 8005124:	1001571e 	bne	r2,zero,8005684 <___svfprintf_internal_r+0xe20>
 8005128:	dc402704 	addi	r17,sp,156
 800512c:	a004d0fa 	srli	r2,r20,3
 8005130:	a806977a 	slli	r3,r21,29
 8005134:	a82ad0fa 	srli	r21,r21,3
 8005138:	a50001cc 	andi	r20,r20,7
 800513c:	a1000c04 	addi	r4,r20,48
 8005140:	18a8b03a 	or	r20,r3,r2
 8005144:	893fffc5 	stb	r4,-1(r17)
 8005148:	a544b03a 	or	r2,r20,r21
 800514c:	880b883a 	mov	r5,r17
 8005150:	8c7fffc4 	addi	r17,r17,-1
 8005154:	103ff51e 	bne	r2,zero,800512c <___svfprintf_internal_r+0x8c8>
 8005158:	6080004c 	andi	r2,r12,1
 800515c:	10015626 	beq	r2,zero,80056b8 <___svfprintf_internal_r+0xe54>
 8005160:	21003fcc 	andi	r4,r4,255
 8005164:	2100201c 	xori	r4,r4,128
 8005168:	213fe004 	addi	r4,r4,-128
 800516c:	20800c18 	cmpnei	r2,r4,48
 8005170:	10015126 	beq	r2,zero,80056b8 <___svfprintf_internal_r+0xe54>
 8005174:	00800c04 	movi	r2,48
 8005178:	297fff84 	addi	r5,r5,-2
 800517c:	88bfffc5 	stb	r2,-1(r17)
 8005180:	d8802704 	addi	r2,sp,156
 8005184:	116bc83a 	sub	r21,r2,r5
 8005188:	db000415 	stw	r12,16(sp)
 800518c:	2823883a 	mov	r17,r5
 8005190:	4029883a 	mov	r20,r8
 8005194:	4540010e 	bge	r8,r21,800519c <___svfprintf_internal_r+0x938>
 8005198:	a829883a 	mov	r20,r21
 800519c:	d8000715 	stw	zero,28(sp)
 80051a0:	6b403fcc 	andi	r13,r13,255
 80051a4:	6b40201c 	xori	r13,r13,128
 80051a8:	6b7fe004 	addi	r13,r13,-128
 80051ac:	683e6526 	beq	r13,zero,8004b44 <___svfprintf_internal_r+0x2e0>
 80051b0:	a5000044 	addi	r20,r20,1
 80051b4:	003e6306 	br	8004b44 <___svfprintf_internal_r+0x2e0>
 80051b8:	bac00007 	ldb	r11,0(r23)
 80051bc:	63002014 	ori	r12,r12,128
 80051c0:	003de606 	br	800495c <___svfprintf_internal_r+0xf8>
 80051c4:	bf000007 	ldb	fp,0(r23)
 80051c8:	b8c00044 	addi	r3,r23,1
 80051cc:	e0800aa0 	cmpeqi	r2,fp,42
 80051d0:	1005b71e 	bne	r2,zero,80068b0 <___svfprintf_internal_r+0x204c>
 80051d4:	e0bff404 	addi	r2,fp,-48
 80051d8:	118002b0 	cmpltui	r6,r2,10
 80051dc:	182f883a 	mov	r23,r3
 80051e0:	0011883a 	mov	r8,zero
 80051e4:	303ddf26 	beq	r6,zero,8004964 <___svfprintf_internal_r+0x100>
 80051e8:	bf000007 	ldb	fp,0(r23)
 80051ec:	420002a4 	muli	r8,r8,10
 80051f0:	bdc00044 	addi	r23,r23,1
 80051f4:	4091883a 	add	r8,r8,r2
 80051f8:	e0bff404 	addi	r2,fp,-48
 80051fc:	10c002b0 	cmpltui	r3,r2,10
 8005200:	183ff91e 	bne	r3,zero,80051e8 <___svfprintf_internal_r+0x984>
 8005204:	003dd706 	br	8004964 <___svfprintf_internal_r+0x100>
 8005208:	bf000003 	ldbu	fp,0(r23)
 800520c:	e2c03fcc 	andi	r11,fp,255
 8005210:	5ac0201c 	xori	r11,r11,128
 8005214:	63000114 	ori	r12,r12,4
 8005218:	5affe004 	addi	r11,r11,-128
 800521c:	003dcf06 	br	800495c <___svfprintf_internal_r+0xf8>
 8005220:	bac00007 	ldb	r11,0(r23)
 8005224:	01000044 	movi	r4,1
 8005228:	01400ac4 	movi	r5,43
 800522c:	003dcb06 	br	800495c <___svfprintf_internal_r+0xf8>
 8005230:	d8800617 	ldw	r2,24(sp)
 8005234:	bf000003 	ldbu	fp,0(r23)
 8005238:	14000017 	ldw	r16,0(r2)
 800523c:	10800104 	addi	r2,r2,4
 8005240:	80029816 	blt	r16,zero,8005ca4 <___svfprintf_internal_r+0x1440>
 8005244:	d8800615 	stw	r2,24(sp)
 8005248:	e2c03fcc 	andi	r11,fp,255
 800524c:	5ac0201c 	xori	r11,r11,128
 8005250:	5affe004 	addi	r11,r11,-128
 8005254:	003dc106 	br	800495c <___svfprintf_internal_r+0xf8>
 8005258:	bac00007 	ldb	r11,0(r23)
 800525c:	63000054 	ori	r12,r12,1
 8005260:	003dbe06 	br	800495c <___svfprintf_internal_r+0xf8>
 8005264:	28803fcc 	andi	r2,r5,255
 8005268:	1080201c 	xori	r2,r2,128
 800526c:	10bfe004 	addi	r2,r2,-128
 8005270:	bf000003 	ldbu	fp,0(r23)
 8005274:	103ff41e 	bne	r2,zero,8005248 <___svfprintf_internal_r+0x9e4>
 8005278:	e2c03fcc 	andi	r11,fp,255
 800527c:	5ac0201c 	xori	r11,r11,128
 8005280:	01000044 	movi	r4,1
 8005284:	01400804 	movi	r5,32
 8005288:	5affe004 	addi	r11,r11,-128
 800528c:	003db306 	br	800495c <___svfprintf_internal_r+0xf8>
 8005290:	21003fcc 	andi	r4,r4,255
 8005294:	2005281e 	bne	r4,zero,8006738 <___svfprintf_internal_r+0x1ed4>
 8005298:	00820174 	movhi	r2,2053
 800529c:	10815c04 	addi	r2,r2,1392
 80052a0:	d8800b15 	stw	r2,44(sp)
 80052a4:	6080080c 	andi	r2,r12,32
 80052a8:	10003226 	beq	r2,zero,8005374 <___svfprintf_internal_r+0xb10>
 80052ac:	d8800617 	ldw	r2,24(sp)
 80052b0:	15000017 	ldw	r20,0(r2)
 80052b4:	15400117 	ldw	r21,4(r2)
 80052b8:	10800204 	addi	r2,r2,8
 80052bc:	d8800615 	stw	r2,24(sp)
 80052c0:	6080004c 	andi	r2,r12,1
 80052c4:	10000226 	beq	r2,zero,80052d0 <___svfprintf_internal_r+0xa6c>
 80052c8:	a544b03a 	or	r2,r20,r21
 80052cc:	1002661e 	bne	r2,zero,8005c68 <___svfprintf_internal_r+0x1404>
 80052d0:	00800084 	movi	r2,2
 80052d4:	003e8506 	br	8004cec <___svfprintf_internal_r+0x488>
 80052d8:	d8800617 	ldw	r2,24(sp)
 80052dc:	d8001345 	stb	zero,77(sp)
 80052e0:	14400017 	ldw	r17,0(r2)
 80052e4:	10c00104 	addi	r3,r2,4
 80052e8:	88039f26 	beq	r17,zero,8006168 <___svfprintf_internal_r+0x1904>
 80052ec:	40bfffe0 	cmpeqi	r2,r8,-1
 80052f0:	1002ac1e 	bne	r2,zero,8005da4 <___svfprintf_internal_r+0x1540>
 80052f4:	400d883a 	mov	r6,r8
 80052f8:	000b883a 	mov	r5,zero
 80052fc:	8809883a 	mov	r4,r17
 8005300:	d8c00715 	stw	r3,28(sp)
 8005304:	db000615 	stw	r12,24(sp)
 8005308:	da000415 	stw	r8,16(sp)
 800530c:	800c11c0 	call	800c11c <memchr>
 8005310:	da000417 	ldw	r8,16(sp)
 8005314:	db000617 	ldw	r12,24(sp)
 8005318:	d8c00717 	ldw	r3,28(sp)
 800531c:	1004f026 	beq	r2,zero,80066e0 <___svfprintf_internal_r+0x1e7c>
 8005320:	146bc83a 	sub	r21,r2,r17
 8005324:	a829883a 	mov	r20,r21
 8005328:	d8c00615 	stw	r3,24(sp)
 800532c:	003e0206 	br	8004b38 <___svfprintf_internal_r+0x2d4>
 8005330:	d8c00617 	ldw	r3,24(sp)
 8005334:	d8001345 	stb	zero,77(sp)
 8005338:	05000044 	movi	r20,1
 800533c:	18800017 	ldw	r2,0(r3)
 8005340:	18c00104 	addi	r3,r3,4
 8005344:	d8c00615 	stw	r3,24(sp)
 8005348:	d8801d05 	stb	r2,116(sp)
 800534c:	05400044 	movi	r21,1
 8005350:	dc401d04 	addi	r17,sp,116
 8005354:	003df806 	br	8004b38 <___svfprintf_internal_r+0x2d4>
 8005358:	21003fcc 	andi	r4,r4,255
 800535c:	2004f41e 	bne	r4,zero,8006730 <___svfprintf_internal_r+0x1ecc>
 8005360:	00820174 	movhi	r2,2053
 8005364:	10815704 	addi	r2,r2,1372
 8005368:	d8800b15 	stw	r2,44(sp)
 800536c:	6080080c 	andi	r2,r12,32
 8005370:	103fce1e 	bne	r2,zero,80052ac <___svfprintf_internal_r+0xa48>
 8005374:	d9000617 	ldw	r4,24(sp)
 8005378:	6080040c 	andi	r2,r12,16
 800537c:	20c00104 	addi	r3,r4,4
 8005380:	10023f1e 	bne	r2,zero,8005c80 <___svfprintf_internal_r+0x141c>
 8005384:	6080100c 	andi	r2,r12,64
 8005388:	10040226 	beq	r2,zero,8006394 <___svfprintf_internal_r+0x1b30>
 800538c:	d8800617 	ldw	r2,24(sp)
 8005390:	002b883a 	mov	r21,zero
 8005394:	d8c00615 	stw	r3,24(sp)
 8005398:	1500000b 	ldhu	r20,0(r2)
 800539c:	003fc806 	br	80052c0 <___svfprintf_internal_r+0xa5c>
 80053a0:	e2c01990 	cmplti	r11,fp,102
 80053a4:	5800ce1e 	bne	r11,zero,80056e0 <___svfprintf_internal_r+0xe7c>
 80053a8:	d9000917 	ldw	r4,36(sp)
 80053ac:	d9400a17 	ldw	r5,40(sp)
 80053b0:	000d883a 	mov	r6,zero
 80053b4:	000f883a 	mov	r7,zero
 80053b8:	d8c00e15 	stw	r3,56(sp)
 80053bc:	80132740 	call	8013274 <__eqdf2>
 80053c0:	d8c00e17 	ldw	r3,56(sp)
 80053c4:	1001711e 	bne	r2,zero,800598c <___svfprintf_internal_r+0x1128>
 80053c8:	d8801b17 	ldw	r2,108(sp)
 80053cc:	01020174 	movhi	r4,2053
 80053d0:	21016304 	addi	r4,r4,1420
 80053d4:	10800044 	addi	r2,r2,1
 80053d8:	18c00044 	addi	r3,r3,1
 80053dc:	b1000015 	stw	r4,0(r22)
 80053e0:	01000044 	movi	r4,1
 80053e4:	d8801b15 	stw	r2,108(sp)
 80053e8:	b1000115 	stw	r4,4(r22)
 80053ec:	d8c01c15 	stw	r3,112(sp)
 80053f0:	10800208 	cmpgei	r2,r2,8
 80053f4:	10033b1e 	bne	r2,zero,80060e4 <___svfprintf_internal_r+0x1880>
 80053f8:	b5800204 	addi	r22,r22,8
 80053fc:	d8801417 	ldw	r2,80(sp)
 8005400:	d9000817 	ldw	r4,32(sp)
 8005404:	11000316 	blt	r2,r4,8005414 <___svfprintf_internal_r+0xbb0>
 8005408:	d8800417 	ldw	r2,16(sp)
 800540c:	1080004c 	andi	r2,r2,1
 8005410:	103e0226 	beq	r2,zero,8004c1c <___svfprintf_internal_r+0x3b8>
 8005414:	d8800d17 	ldw	r2,52(sp)
 8005418:	d9000c17 	ldw	r4,48(sp)
 800541c:	b0800015 	stw	r2,0(r22)
 8005420:	d8801b17 	ldw	r2,108(sp)
 8005424:	1907883a 	add	r3,r3,r4
 8005428:	b1000115 	stw	r4,4(r22)
 800542c:	10800044 	addi	r2,r2,1
 8005430:	d8801b15 	stw	r2,108(sp)
 8005434:	d8c01c15 	stw	r3,112(sp)
 8005438:	10800208 	cmpgei	r2,r2,8
 800543c:	10033b1e 	bne	r2,zero,800612c <___svfprintf_internal_r+0x18c8>
 8005440:	b5800204 	addi	r22,r22,8
 8005444:	d8800817 	ldw	r2,32(sp)
 8005448:	157fffc4 	addi	r21,r2,-1
 800544c:	057df30e 	bge	zero,r21,8004c1c <___svfprintf_internal_r+0x3b8>
 8005450:	01c20174 	movhi	r7,2053
 8005454:	a9000450 	cmplti	r4,r21,17
 8005458:	d8801b17 	ldw	r2,108(sp)
 800545c:	39c16404 	addi	r7,r7,1424
 8005460:	20031c1e 	bne	r4,zero,80060d4 <___svfprintf_internal_r+0x1870>
 8005464:	07000404 	movi	fp,16
 8005468:	3823883a 	mov	r17,r7
 800546c:	00000406 	br	8005480 <___svfprintf_internal_r+0xc1c>
 8005470:	b5800204 	addi	r22,r22,8
 8005474:	ad7ffc04 	addi	r21,r21,-16
 8005478:	a9000448 	cmpgei	r4,r21,17
 800547c:	20031426 	beq	r4,zero,80060d0 <___svfprintf_internal_r+0x186c>
 8005480:	10800044 	addi	r2,r2,1
 8005484:	18c00404 	addi	r3,r3,16
 8005488:	b4400015 	stw	r17,0(r22)
 800548c:	b7000115 	stw	fp,4(r22)
 8005490:	d8c01c15 	stw	r3,112(sp)
 8005494:	d8801b15 	stw	r2,108(sp)
 8005498:	11000208 	cmpgei	r4,r2,8
 800549c:	203ff426 	beq	r4,zero,8005470 <___svfprintf_internal_r+0xc0c>
 80054a0:	d9801a04 	addi	r6,sp,104
 80054a4:	900b883a 	mov	r5,r18
 80054a8:	9809883a 	mov	r4,r19
 80054ac:	800dce40 	call	800dce4 <__ssprint_r>
 80054b0:	103deb1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80054b4:	d8c01c17 	ldw	r3,112(sp)
 80054b8:	d8801b17 	ldw	r2,108(sp)
 80054bc:	dd802704 	addi	r22,sp,156
 80054c0:	003fec06 	br	8005474 <___svfprintf_internal_r+0xc10>
 80054c4:	8519c83a 	sub	r12,r16,r20
 80054c8:	033dc50e 	bge	zero,r12,8004be0 <___svfprintf_internal_r+0x37c>
 80054cc:	01c20174 	movhi	r7,2053
 80054d0:	61000450 	cmplti	r4,r12,17
 80054d4:	d8801b17 	ldw	r2,108(sp)
 80054d8:	39c16404 	addi	r7,r7,1424
 80054dc:	2000281e 	bne	r4,zero,8005580 <___svfprintf_internal_r+0xd1c>
 80054e0:	dc400e15 	stw	r17,56(sp)
 80054e4:	dc000f15 	stw	r16,60(sp)
 80054e8:	b009883a 	mov	r4,r22
 80054ec:	03400404 	movi	r13,16
 80054f0:	a02d883a 	mov	r22,r20
 80054f4:	6021883a 	mov	r16,r12
 80054f8:	4029883a 	mov	r20,r8
 80054fc:	3823883a 	mov	r17,r7
 8005500:	00000406 	br	8005514 <___svfprintf_internal_r+0xcb0>
 8005504:	843ffc04 	addi	r16,r16,-16
 8005508:	81400448 	cmpgei	r5,r16,17
 800550c:	21000204 	addi	r4,r4,8
 8005510:	28001426 	beq	r5,zero,8005564 <___svfprintf_internal_r+0xd00>
 8005514:	10800044 	addi	r2,r2,1
 8005518:	18c00404 	addi	r3,r3,16
 800551c:	24400015 	stw	r17,0(r4)
 8005520:	23400115 	stw	r13,4(r4)
 8005524:	d8c01c15 	stw	r3,112(sp)
 8005528:	d8801b15 	stw	r2,108(sp)
 800552c:	11400208 	cmpgei	r5,r2,8
 8005530:	283ff426 	beq	r5,zero,8005504 <___svfprintf_internal_r+0xca0>
 8005534:	d9801a04 	addi	r6,sp,104
 8005538:	900b883a 	mov	r5,r18
 800553c:	9809883a 	mov	r4,r19
 8005540:	800dce40 	call	800dce4 <__ssprint_r>
 8005544:	103dc61e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005548:	843ffc04 	addi	r16,r16,-16
 800554c:	81400448 	cmpgei	r5,r16,17
 8005550:	d8c01c17 	ldw	r3,112(sp)
 8005554:	d8801b17 	ldw	r2,108(sp)
 8005558:	d9002704 	addi	r4,sp,156
 800555c:	03400404 	movi	r13,16
 8005560:	283fec1e 	bne	r5,zero,8005514 <___svfprintf_internal_r+0xcb0>
 8005564:	8019883a 	mov	r12,r16
 8005568:	880f883a 	mov	r7,r17
 800556c:	dc000f17 	ldw	r16,60(sp)
 8005570:	dc400e17 	ldw	r17,56(sp)
 8005574:	a011883a 	mov	r8,r20
 8005578:	b029883a 	mov	r20,r22
 800557c:	202d883a 	mov	r22,r4
 8005580:	10800044 	addi	r2,r2,1
 8005584:	1b07883a 	add	r3,r3,r12
 8005588:	d8801b15 	stw	r2,108(sp)
 800558c:	b1c00015 	stw	r7,0(r22)
 8005590:	b3000115 	stw	r12,4(r22)
 8005594:	d8c01c15 	stw	r3,112(sp)
 8005598:	10800208 	cmpgei	r2,r2,8
 800559c:	1002d91e 	bne	r2,zero,8006104 <___svfprintf_internal_r+0x18a0>
 80055a0:	4551c83a 	sub	r8,r8,r21
 80055a4:	b5800204 	addi	r22,r22,8
 80055a8:	023d8f0e 	bge	zero,r8,8004be8 <___svfprintf_internal_r+0x384>
 80055ac:	01c20174 	movhi	r7,2053
 80055b0:	41000450 	cmplti	r4,r8,17
 80055b4:	d8801b17 	ldw	r2,108(sp)
 80055b8:	39c16404 	addi	r7,r7,1424
 80055bc:	2000221e 	bne	r4,zero,8005648 <___svfprintf_internal_r+0xde4>
 80055c0:	dc400e15 	stw	r17,56(sp)
 80055c4:	dc000f15 	stw	r16,60(sp)
 80055c8:	03000404 	movi	r12,16
 80055cc:	4021883a 	mov	r16,r8
 80055d0:	3823883a 	mov	r17,r7
 80055d4:	00000406 	br	80055e8 <___svfprintf_internal_r+0xd84>
 80055d8:	843ffc04 	addi	r16,r16,-16
 80055dc:	81000448 	cmpgei	r4,r16,17
 80055e0:	b5800204 	addi	r22,r22,8
 80055e4:	20001426 	beq	r4,zero,8005638 <___svfprintf_internal_r+0xdd4>
 80055e8:	10800044 	addi	r2,r2,1
 80055ec:	18c00404 	addi	r3,r3,16
 80055f0:	b4400015 	stw	r17,0(r22)
 80055f4:	b3000115 	stw	r12,4(r22)
 80055f8:	d8c01c15 	stw	r3,112(sp)
 80055fc:	d8801b15 	stw	r2,108(sp)
 8005600:	11000208 	cmpgei	r4,r2,8
 8005604:	203ff426 	beq	r4,zero,80055d8 <___svfprintf_internal_r+0xd74>
 8005608:	d9801a04 	addi	r6,sp,104
 800560c:	900b883a 	mov	r5,r18
 8005610:	9809883a 	mov	r4,r19
 8005614:	800dce40 	call	800dce4 <__ssprint_r>
 8005618:	103d911e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 800561c:	843ffc04 	addi	r16,r16,-16
 8005620:	81000448 	cmpgei	r4,r16,17
 8005624:	d8c01c17 	ldw	r3,112(sp)
 8005628:	d8801b17 	ldw	r2,108(sp)
 800562c:	dd802704 	addi	r22,sp,156
 8005630:	03000404 	movi	r12,16
 8005634:	203fec1e 	bne	r4,zero,80055e8 <___svfprintf_internal_r+0xd84>
 8005638:	8011883a 	mov	r8,r16
 800563c:	880f883a 	mov	r7,r17
 8005640:	dc000f17 	ldw	r16,60(sp)
 8005644:	dc400e17 	ldw	r17,56(sp)
 8005648:	10800044 	addi	r2,r2,1
 800564c:	1a07883a 	add	r3,r3,r8
 8005650:	d8801b15 	stw	r2,108(sp)
 8005654:	b1c00015 	stw	r7,0(r22)
 8005658:	b2000115 	stw	r8,4(r22)
 800565c:	d8c01c15 	stw	r3,112(sp)
 8005660:	10800208 	cmpgei	r2,r2,8
 8005664:	10014f1e 	bne	r2,zero,8005ba4 <___svfprintf_internal_r+0x1340>
 8005668:	b5800204 	addi	r22,r22,8
 800566c:	003d5e06 	br	8004be8 <___svfprintf_internal_r+0x384>
 8005670:	10c00060 	cmpeqi	r3,r2,1
 8005674:	1803dc1e 	bne	r3,zero,80065e8 <___svfprintf_internal_r+0x1d84>
 8005678:	108000a0 	cmpeqi	r2,r2,2
 800567c:	db000417 	ldw	r12,16(sp)
 8005680:	103ea926 	beq	r2,zero,8005128 <___svfprintf_internal_r+0x8c4>
 8005684:	d9000b17 	ldw	r4,44(sp)
 8005688:	dc402704 	addi	r17,sp,156
 800568c:	a08003cc 	andi	r2,r20,15
 8005690:	a806973a 	slli	r3,r21,28
 8005694:	a028d13a 	srli	r20,r20,4
 8005698:	2085883a 	add	r2,r4,r2
 800569c:	10800003 	ldbu	r2,0(r2)
 80056a0:	a82ad13a 	srli	r21,r21,4
 80056a4:	1d28b03a 	or	r20,r3,r20
 80056a8:	88bfffc5 	stb	r2,-1(r17)
 80056ac:	a544b03a 	or	r2,r20,r21
 80056b0:	8c7fffc4 	addi	r17,r17,-1
 80056b4:	103ff51e 	bne	r2,zero,800568c <___svfprintf_internal_r+0xe28>
 80056b8:	d8802704 	addi	r2,sp,156
 80056bc:	146bc83a 	sub	r21,r2,r17
 80056c0:	db000415 	stw	r12,16(sp)
 80056c4:	003eb206 	br	8005190 <___svfprintf_internal_r+0x92c>
 80056c8:	d9801a04 	addi	r6,sp,104
 80056cc:	900b883a 	mov	r5,r18
 80056d0:	9809883a 	mov	r4,r19
 80056d4:	800dce40 	call	800dce4 <__ssprint_r>
 80056d8:	103d5b26 	beq	r2,zero,8004c48 <___svfprintf_internal_r+0x3e4>
 80056dc:	003d6006 	br	8004c60 <___svfprintf_internal_r+0x3fc>
 80056e0:	d8800817 	ldw	r2,32(sp)
 80056e4:	da001b17 	ldw	r8,108(sp)
 80056e8:	18c00044 	addi	r3,r3,1
 80056ec:	10800088 	cmpgei	r2,r2,2
 80056f0:	45400044 	addi	r21,r8,1
 80056f4:	b7000204 	addi	fp,r22,8
 80056f8:	1000fd26 	beq	r2,zero,8005af0 <___svfprintf_internal_r+0x128c>
 80056fc:	00800044 	movi	r2,1
 8005700:	b0800115 	stw	r2,4(r22)
 8005704:	b4400015 	stw	r17,0(r22)
 8005708:	d8c01c15 	stw	r3,112(sp)
 800570c:	dd401b15 	stw	r21,108(sp)
 8005710:	a8800210 	cmplti	r2,r21,8
 8005714:	10012b26 	beq	r2,zero,8005bc4 <___svfprintf_internal_r+0x1360>
 8005718:	d8800c17 	ldw	r2,48(sp)
 800571c:	d9000d17 	ldw	r4,52(sp)
 8005720:	ad400044 	addi	r21,r21,1
 8005724:	1887883a 	add	r3,r3,r2
 8005728:	e0800115 	stw	r2,4(fp)
 800572c:	e1000015 	stw	r4,0(fp)
 8005730:	d8c01c15 	stw	r3,112(sp)
 8005734:	dd401b15 	stw	r21,108(sp)
 8005738:	a8800208 	cmpgei	r2,r21,8
 800573c:	10012a1e 	bne	r2,zero,8005be8 <___svfprintf_internal_r+0x1384>
 8005740:	e7000204 	addi	fp,fp,8
 8005744:	d9000917 	ldw	r4,36(sp)
 8005748:	d9400a17 	ldw	r5,40(sp)
 800574c:	aa000044 	addi	r8,r21,1
 8005750:	000d883a 	mov	r6,zero
 8005754:	000f883a 	mov	r7,zero
 8005758:	d8c00e15 	stw	r3,56(sp)
 800575c:	da000715 	stw	r8,28(sp)
 8005760:	80132740 	call	8013274 <__eqdf2>
 8005764:	d8c00817 	ldw	r3,32(sp)
 8005768:	da000717 	ldw	r8,28(sp)
 800576c:	e5800204 	addi	r22,fp,8
 8005770:	1affffc4 	addi	r11,r3,-1
 8005774:	d8c00e17 	ldw	r3,56(sp)
 8005778:	1000ea26 	beq	r2,zero,8005b24 <___svfprintf_internal_r+0x12c0>
 800577c:	8a400044 	addi	r9,r17,1
 8005780:	1ac7883a 	add	r3,r3,r11
 8005784:	da001b15 	stw	r8,108(sp)
 8005788:	e2400015 	stw	r9,0(fp)
 800578c:	e2c00115 	stw	r11,4(fp)
 8005790:	d8c01c15 	stw	r3,112(sp)
 8005794:	42000208 	cmpgei	r8,r8,8
 8005798:	4001b41e 	bne	r8,zero,8005e6c <___svfprintf_internal_r+0x1608>
 800579c:	e0800404 	addi	r2,fp,16
 80057a0:	aa000084 	addi	r8,r21,2
 80057a4:	b039883a 	mov	fp,r22
 80057a8:	102d883a 	mov	r22,r2
 80057ac:	d9001017 	ldw	r4,64(sp)
 80057b0:	d8801644 	addi	r2,sp,89
 80057b4:	da001b15 	stw	r8,108(sp)
 80057b8:	20c7883a 	add	r3,r4,r3
 80057bc:	e0800015 	stw	r2,0(fp)
 80057c0:	e1000115 	stw	r4,4(fp)
 80057c4:	d8c01c15 	stw	r3,112(sp)
 80057c8:	42000210 	cmplti	r8,r8,8
 80057cc:	403d131e 	bne	r8,zero,8004c1c <___svfprintf_internal_r+0x3b8>
 80057d0:	d9801a04 	addi	r6,sp,104
 80057d4:	900b883a 	mov	r5,r18
 80057d8:	9809883a 	mov	r4,r19
 80057dc:	800dce40 	call	800dce4 <__ssprint_r>
 80057e0:	103d1f1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80057e4:	d8c01c17 	ldw	r3,112(sp)
 80057e8:	dd802704 	addi	r22,sp,156
 80057ec:	003d0b06 	br	8004c1c <___svfprintf_internal_r+0x3b8>
 80057f0:	10c00060 	cmpeqi	r3,r2,1
 80057f4:	db000417 	ldw	r12,16(sp)
 80057f8:	183e4926 	beq	r3,zero,8005120 <___svfprintf_internal_r+0x8bc>
 80057fc:	a8013c1e 	bne	r21,zero,8005cf0 <___svfprintf_internal_r+0x148c>
 8005800:	a08002a8 	cmpgeui	r2,r20,10
 8005804:	10013a1e 	bne	r2,zero,8005cf0 <___svfprintf_internal_r+0x148c>
 8005808:	a5000c04 	addi	r20,r20,48
 800580c:	dd0026c5 	stb	r20,155(sp)
 8005810:	db000415 	stw	r12,16(sp)
 8005814:	05400044 	movi	r21,1
 8005818:	dc4026c4 	addi	r17,sp,155
 800581c:	003e5c06 	br	8005190 <___svfprintf_internal_r+0x92c>
 8005820:	03020174 	movhi	r12,2053
 8005824:	39000450 	cmplti	r4,r7,17
 8005828:	d8801b17 	ldw	r2,108(sp)
 800582c:	63016804 	addi	r12,r12,1440
 8005830:	2000321e 	bne	r4,zero,80058fc <___svfprintf_internal_r+0x1098>
 8005834:	dc401115 	stw	r17,68(sp)
 8005838:	b009883a 	mov	r4,r22
 800583c:	9023883a 	mov	r17,r18
 8005840:	a82d883a 	mov	r22,r21
 8005844:	ddc01215 	stw	r23,72(sp)
 8005848:	03c00404 	movi	r15,16
 800584c:	a02f883a 	mov	r23,r20
 8005850:	db800e15 	stw	r14,56(sp)
 8005854:	8029883a 	mov	r20,r16
 8005858:	db400f15 	stw	r13,60(sp)
 800585c:	402b883a 	mov	r21,r8
 8005860:	3821883a 	mov	r16,r7
 8005864:	6025883a 	mov	r18,r12
 8005868:	00000406 	br	800587c <___svfprintf_internal_r+0x1018>
 800586c:	843ffc04 	addi	r16,r16,-16
 8005870:	81800448 	cmpgei	r6,r16,17
 8005874:	21000204 	addi	r4,r4,8
 8005878:	30001426 	beq	r6,zero,80058cc <___svfprintf_internal_r+0x1068>
 800587c:	10800044 	addi	r2,r2,1
 8005880:	18c00404 	addi	r3,r3,16
 8005884:	24800015 	stw	r18,0(r4)
 8005888:	23c00115 	stw	r15,4(r4)
 800588c:	d8c01c15 	stw	r3,112(sp)
 8005890:	d8801b15 	stw	r2,108(sp)
 8005894:	11800208 	cmpgei	r6,r2,8
 8005898:	303ff426 	beq	r6,zero,800586c <___svfprintf_internal_r+0x1008>
 800589c:	d9801a04 	addi	r6,sp,104
 80058a0:	880b883a 	mov	r5,r17
 80058a4:	9809883a 	mov	r4,r19
 80058a8:	800dce40 	call	800dce4 <__ssprint_r>
 80058ac:	1001b11e 	bne	r2,zero,8005f74 <___svfprintf_internal_r+0x1710>
 80058b0:	843ffc04 	addi	r16,r16,-16
 80058b4:	81800448 	cmpgei	r6,r16,17
 80058b8:	d8c01c17 	ldw	r3,112(sp)
 80058bc:	d8801b17 	ldw	r2,108(sp)
 80058c0:	d9002704 	addi	r4,sp,156
 80058c4:	03c00404 	movi	r15,16
 80058c8:	303fec1e 	bne	r6,zero,800587c <___svfprintf_internal_r+0x1018>
 80058cc:	800f883a 	mov	r7,r16
 80058d0:	9019883a 	mov	r12,r18
 80058d4:	a021883a 	mov	r16,r20
 80058d8:	8825883a 	mov	r18,r17
 80058dc:	b829883a 	mov	r20,r23
 80058e0:	db800e17 	ldw	r14,56(sp)
 80058e4:	db400f17 	ldw	r13,60(sp)
 80058e8:	ddc01217 	ldw	r23,72(sp)
 80058ec:	dc401117 	ldw	r17,68(sp)
 80058f0:	a811883a 	mov	r8,r21
 80058f4:	b02b883a 	mov	r21,r22
 80058f8:	202d883a 	mov	r22,r4
 80058fc:	10800044 	addi	r2,r2,1
 8005900:	19c7883a 	add	r3,r3,r7
 8005904:	d8801b15 	stw	r2,108(sp)
 8005908:	b3000015 	stw	r12,0(r22)
 800590c:	b1c00115 	stw	r7,4(r22)
 8005910:	d8c01c15 	stw	r3,112(sp)
 8005914:	10800208 	cmpgei	r2,r2,8
 8005918:	10015f1e 	bne	r2,zero,8005e98 <___svfprintf_internal_r+0x1634>
 800591c:	b5800204 	addi	r22,r22,8
 8005920:	003c9206 	br	8004b6c <___svfprintf_internal_r+0x308>
 8005924:	d9801a04 	addi	r6,sp,104
 8005928:	900b883a 	mov	r5,r18
 800592c:	9809883a 	mov	r4,r19
 8005930:	da001115 	stw	r8,68(sp)
 8005934:	db400f15 	stw	r13,60(sp)
 8005938:	db800e15 	stw	r14,56(sp)
 800593c:	800dce40 	call	800dce4 <__ssprint_r>
 8005940:	103cc71e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005944:	d8c01c17 	ldw	r3,112(sp)
 8005948:	da001117 	ldw	r8,68(sp)
 800594c:	db400f17 	ldw	r13,60(sp)
 8005950:	db800e17 	ldw	r14,56(sp)
 8005954:	dd802704 	addi	r22,sp,156
 8005958:	003c9206 	br	8004ba4 <___svfprintf_internal_r+0x340>
 800595c:	d9801a04 	addi	r6,sp,104
 8005960:	900b883a 	mov	r5,r18
 8005964:	9809883a 	mov	r4,r19
 8005968:	da000f15 	stw	r8,60(sp)
 800596c:	db400e15 	stw	r13,56(sp)
 8005970:	800dce40 	call	800dce4 <__ssprint_r>
 8005974:	103cba1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005978:	d8c01c17 	ldw	r3,112(sp)
 800597c:	da000f17 	ldw	r8,60(sp)
 8005980:	db400e17 	ldw	r13,56(sp)
 8005984:	dd802704 	addi	r22,sp,156
 8005988:	003c9306 	br	8004bd8 <___svfprintf_internal_r+0x374>
 800598c:	d9401417 	ldw	r5,80(sp)
 8005990:	01414f0e 	bge	zero,r5,8005ed0 <___svfprintf_internal_r+0x166c>
 8005994:	d8800717 	ldw	r2,28(sp)
 8005998:	d9000817 	ldw	r4,32(sp)
 800599c:	102b883a 	mov	r21,r2
 80059a0:	2080c316 	blt	r4,r2,8005cb0 <___svfprintf_internal_r+0x144c>
 80059a4:	05400a0e 	bge	zero,r21,80059d0 <___svfprintf_internal_r+0x116c>
 80059a8:	d8801b17 	ldw	r2,108(sp)
 80059ac:	1d47883a 	add	r3,r3,r21
 80059b0:	b4400015 	stw	r17,0(r22)
 80059b4:	10800044 	addi	r2,r2,1
 80059b8:	d8801b15 	stw	r2,108(sp)
 80059bc:	b5400115 	stw	r21,4(r22)
 80059c0:	d8c01c15 	stw	r3,112(sp)
 80059c4:	10800208 	cmpgei	r2,r2,8
 80059c8:	10032f1e 	bne	r2,zero,8006688 <___svfprintf_internal_r+0x1e24>
 80059cc:	b5800204 	addi	r22,r22,8
 80059d0:	a800ef16 	blt	r21,zero,8005d90 <___svfprintf_internal_r+0x152c>
 80059d4:	d8800717 	ldw	r2,28(sp)
 80059d8:	156bc83a 	sub	r21,r2,r21
 80059dc:	0540f916 	blt	zero,r21,8005dc4 <___svfprintf_internal_r+0x1560>
 80059e0:	dd401417 	ldw	r21,80(sp)
 80059e4:	d8800817 	ldw	r2,32(sp)
 80059e8:	a880b40e 	bge	r21,r2,8005cbc <___svfprintf_internal_r+0x1458>
 80059ec:	d8800d17 	ldw	r2,52(sp)
 80059f0:	d9000c17 	ldw	r4,48(sp)
 80059f4:	b0800015 	stw	r2,0(r22)
 80059f8:	d8801b17 	ldw	r2,108(sp)
 80059fc:	1907883a 	add	r3,r3,r4
 8005a00:	b1000115 	stw	r4,4(r22)
 8005a04:	10800044 	addi	r2,r2,1
 8005a08:	d8801b15 	stw	r2,108(sp)
 8005a0c:	d8c01c15 	stw	r3,112(sp)
 8005a10:	10800208 	cmpgei	r2,r2,8
 8005a14:	1002cd1e 	bne	r2,zero,800654c <___svfprintf_internal_r+0x1ce8>
 8005a18:	b5800204 	addi	r22,r22,8
 8005a1c:	d9000817 	ldw	r4,32(sp)
 8005a20:	d9400717 	ldw	r5,28(sp)
 8005a24:	2545c83a 	sub	r2,r4,r21
 8005a28:	2149c83a 	sub	r4,r4,r5
 8005a2c:	102b883a 	mov	r21,r2
 8005a30:	2080010e 	bge	r4,r2,8005a38 <___svfprintf_internal_r+0x11d4>
 8005a34:	202b883a 	mov	r21,r4
 8005a38:	05400c0e 	bge	zero,r21,8005a6c <___svfprintf_internal_r+0x1208>
 8005a3c:	d9000717 	ldw	r4,28(sp)
 8005a40:	1d47883a 	add	r3,r3,r21
 8005a44:	b5400115 	stw	r21,4(r22)
 8005a48:	8913883a 	add	r9,r17,r4
 8005a4c:	d9001b17 	ldw	r4,108(sp)
 8005a50:	b2400015 	stw	r9,0(r22)
 8005a54:	d8c01c15 	stw	r3,112(sp)
 8005a58:	21000044 	addi	r4,r4,1
 8005a5c:	d9001b15 	stw	r4,108(sp)
 8005a60:	21000208 	cmpgei	r4,r4,8
 8005a64:	2003111e 	bne	r4,zero,80066ac <___svfprintf_internal_r+0x1e48>
 8005a68:	b5800204 	addi	r22,r22,8
 8005a6c:	a800010e 	bge	r21,zero,8005a74 <___svfprintf_internal_r+0x1210>
 8005a70:	002b883a 	mov	r21,zero
 8005a74:	156bc83a 	sub	r21,r2,r21
 8005a78:	057c680e 	bge	zero,r21,8004c1c <___svfprintf_internal_r+0x3b8>
 8005a7c:	01c20174 	movhi	r7,2053
 8005a80:	a9000450 	cmplti	r4,r21,17
 8005a84:	d8801b17 	ldw	r2,108(sp)
 8005a88:	39c16404 	addi	r7,r7,1424
 8005a8c:	2001911e 	bne	r4,zero,80060d4 <___svfprintf_internal_r+0x1870>
 8005a90:	07000404 	movi	fp,16
 8005a94:	3823883a 	mov	r17,r7
 8005a98:	00000406 	br	8005aac <___svfprintf_internal_r+0x1248>
 8005a9c:	b5800204 	addi	r22,r22,8
 8005aa0:	ad7ffc04 	addi	r21,r21,-16
 8005aa4:	a9000448 	cmpgei	r4,r21,17
 8005aa8:	20018926 	beq	r4,zero,80060d0 <___svfprintf_internal_r+0x186c>
 8005aac:	10800044 	addi	r2,r2,1
 8005ab0:	18c00404 	addi	r3,r3,16
 8005ab4:	b4400015 	stw	r17,0(r22)
 8005ab8:	b7000115 	stw	fp,4(r22)
 8005abc:	d8c01c15 	stw	r3,112(sp)
 8005ac0:	d8801b15 	stw	r2,108(sp)
 8005ac4:	11000208 	cmpgei	r4,r2,8
 8005ac8:	203ff426 	beq	r4,zero,8005a9c <___svfprintf_internal_r+0x1238>
 8005acc:	d9801a04 	addi	r6,sp,104
 8005ad0:	900b883a 	mov	r5,r18
 8005ad4:	9809883a 	mov	r4,r19
 8005ad8:	800dce40 	call	800dce4 <__ssprint_r>
 8005adc:	103c601e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005ae0:	d8c01c17 	ldw	r3,112(sp)
 8005ae4:	d8801b17 	ldw	r2,108(sp)
 8005ae8:	dd802704 	addi	r22,sp,156
 8005aec:	003fec06 	br	8005aa0 <___svfprintf_internal_r+0x123c>
 8005af0:	d8800417 	ldw	r2,16(sp)
 8005af4:	1080004c 	andi	r2,r2,1
 8005af8:	103f001e 	bne	r2,zero,80056fc <___svfprintf_internal_r+0xe98>
 8005afc:	00800044 	movi	r2,1
 8005b00:	dd401b15 	stw	r21,108(sp)
 8005b04:	b4400015 	stw	r17,0(r22)
 8005b08:	b0800115 	stw	r2,4(r22)
 8005b0c:	d8c01c15 	stw	r3,112(sp)
 8005b10:	ad400208 	cmpgei	r21,r21,8
 8005b14:	a800d51e 	bne	r21,zero,8005e6c <___svfprintf_internal_r+0x1608>
 8005b18:	42000084 	addi	r8,r8,2
 8005b1c:	b5800404 	addi	r22,r22,16
 8005b20:	003f2206 	br	80057ac <___svfprintf_internal_r+0xf48>
 8005b24:	02ff210e 	bge	zero,r11,80057ac <___svfprintf_internal_r+0xf48>
 8005b28:	58800450 	cmplti	r2,r11,17
 8005b2c:	01c20174 	movhi	r7,2053
 8005b30:	10035c1e 	bne	r2,zero,80068a4 <___svfprintf_internal_r+0x2040>
 8005b34:	39c16404 	addi	r7,r7,1424
 8005b38:	dc000715 	stw	r16,28(sp)
 8005b3c:	05800404 	movi	r22,16
 8005b40:	5823883a 	mov	r17,r11
 8005b44:	3821883a 	mov	r16,r7
 8005b48:	402b883a 	mov	r21,r8
 8005b4c:	00000506 	br	8005b64 <___svfprintf_internal_r+0x1300>
 8005b50:	e7000204 	addi	fp,fp,8
 8005b54:	8c7ffc04 	addi	r17,r17,-16
 8005b58:	88800448 	cmpgei	r2,r17,17
 8005b5c:	1001b626 	beq	r2,zero,8006238 <___svfprintf_internal_r+0x19d4>
 8005b60:	ad400044 	addi	r21,r21,1
 8005b64:	18c00404 	addi	r3,r3,16
 8005b68:	e4000015 	stw	r16,0(fp)
 8005b6c:	e5800115 	stw	r22,4(fp)
 8005b70:	d8c01c15 	stw	r3,112(sp)
 8005b74:	dd401b15 	stw	r21,108(sp)
 8005b78:	a8800208 	cmpgei	r2,r21,8
 8005b7c:	103ff426 	beq	r2,zero,8005b50 <___svfprintf_internal_r+0x12ec>
 8005b80:	d9801a04 	addi	r6,sp,104
 8005b84:	900b883a 	mov	r5,r18
 8005b88:	9809883a 	mov	r4,r19
 8005b8c:	800dce40 	call	800dce4 <__ssprint_r>
 8005b90:	103c331e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005b94:	dd401b17 	ldw	r21,108(sp)
 8005b98:	d8c01c17 	ldw	r3,112(sp)
 8005b9c:	df002704 	addi	fp,sp,156
 8005ba0:	003fec06 	br	8005b54 <___svfprintf_internal_r+0x12f0>
 8005ba4:	d9801a04 	addi	r6,sp,104
 8005ba8:	900b883a 	mov	r5,r18
 8005bac:	9809883a 	mov	r4,r19
 8005bb0:	800dce40 	call	800dce4 <__ssprint_r>
 8005bb4:	103c2a1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005bb8:	d8c01c17 	ldw	r3,112(sp)
 8005bbc:	dd802704 	addi	r22,sp,156
 8005bc0:	003c0906 	br	8004be8 <___svfprintf_internal_r+0x384>
 8005bc4:	d9801a04 	addi	r6,sp,104
 8005bc8:	900b883a 	mov	r5,r18
 8005bcc:	9809883a 	mov	r4,r19
 8005bd0:	800dce40 	call	800dce4 <__ssprint_r>
 8005bd4:	103c221e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005bd8:	d8c01c17 	ldw	r3,112(sp)
 8005bdc:	dd401b17 	ldw	r21,108(sp)
 8005be0:	df002704 	addi	fp,sp,156
 8005be4:	003ecc06 	br	8005718 <___svfprintf_internal_r+0xeb4>
 8005be8:	d9801a04 	addi	r6,sp,104
 8005bec:	900b883a 	mov	r5,r18
 8005bf0:	9809883a 	mov	r4,r19
 8005bf4:	800dce40 	call	800dce4 <__ssprint_r>
 8005bf8:	103c191e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005bfc:	d8c01c17 	ldw	r3,112(sp)
 8005c00:	dd401b17 	ldw	r21,108(sp)
 8005c04:	df002704 	addi	fp,sp,156
 8005c08:	003ece06 	br	8005744 <___svfprintf_internal_r+0xee0>
 8005c0c:	dc402704 	addi	r17,sp,156
 8005c10:	003d5f06 	br	8005190 <___svfprintf_internal_r+0x92c>
 8005c14:	25000017 	ldw	r20,0(r4)
 8005c18:	002b883a 	mov	r21,zero
 8005c1c:	d8c00615 	stw	r3,24(sp)
 8005c20:	00800044 	movi	r2,1
 8005c24:	003c3106 	br	8004cec <___svfprintf_internal_r+0x488>
 8005c28:	25000017 	ldw	r20,0(r4)
 8005c2c:	002b883a 	mov	r21,zero
 8005c30:	d8c00615 	stw	r3,24(sp)
 8005c34:	0005883a 	mov	r2,zero
 8005c38:	003c2c06 	br	8004cec <___svfprintf_internal_r+0x488>
 8005c3c:	d8800617 	ldw	r2,24(sp)
 8005c40:	10c00017 	ldw	r3,0(r2)
 8005c44:	10800117 	ldw	r2,4(r2)
 8005c48:	d8c00915 	stw	r3,36(sp)
 8005c4c:	d8800a15 	stw	r2,40(sp)
 8005c50:	003c5b06 	br	8004dc0 <___svfprintf_internal_r+0x55c>
 8005c54:	d9000517 	ldw	r4,20(sp)
 8005c58:	2005d7fa 	srai	r2,r4,31
 8005c5c:	19000015 	stw	r4,0(r3)
 8005c60:	18800115 	stw	r2,4(r3)
 8005c64:	003b2506 	br	80048fc <___svfprintf_internal_r+0x98>
 8005c68:	00800c04 	movi	r2,48
 8005c6c:	d8801385 	stb	r2,78(sp)
 8005c70:	df0013c5 	stb	fp,79(sp)
 8005c74:	63000094 	ori	r12,r12,2
 8005c78:	00800084 	movi	r2,2
 8005c7c:	003c1b06 	br	8004cec <___svfprintf_internal_r+0x488>
 8005c80:	25000017 	ldw	r20,0(r4)
 8005c84:	002b883a 	mov	r21,zero
 8005c88:	d8c00615 	stw	r3,24(sp)
 8005c8c:	003d8c06 	br	80052c0 <___svfprintf_internal_r+0xa5c>
 8005c90:	25000017 	ldw	r20,0(r4)
 8005c94:	d8c00615 	stw	r3,24(sp)
 8005c98:	a02bd7fa 	srai	r21,r20,31
 8005c9c:	a805883a 	mov	r2,r21
 8005ca0:	003cc706 	br	8004fc0 <___svfprintf_internal_r+0x75c>
 8005ca4:	0421c83a 	sub	r16,zero,r16
 8005ca8:	d8800615 	stw	r2,24(sp)
 8005cac:	003d5706 	br	800520c <___svfprintf_internal_r+0x9a8>
 8005cb0:	202b883a 	mov	r21,r4
 8005cb4:	057f3c16 	blt	zero,r21,80059a8 <___svfprintf_internal_r+0x1144>
 8005cb8:	003f4506 	br	80059d0 <___svfprintf_internal_r+0x116c>
 8005cbc:	d8800417 	ldw	r2,16(sp)
 8005cc0:	1080004c 	andi	r2,r2,1
 8005cc4:	103f491e 	bne	r2,zero,80059ec <___svfprintf_internal_r+0x1188>
 8005cc8:	d9000817 	ldw	r4,32(sp)
 8005ccc:	d9400717 	ldw	r5,28(sp)
 8005cd0:	2545c83a 	sub	r2,r4,r21
 8005cd4:	2179c83a 	sub	fp,r4,r5
 8005cd8:	102b883a 	mov	r21,r2
 8005cdc:	e0bf630e 	bge	fp,r2,8005a6c <___svfprintf_internal_r+0x1208>
 8005ce0:	e02b883a 	mov	r21,fp
 8005ce4:	003f6106 	br	8005a6c <___svfprintf_internal_r+0x1208>
 8005ce8:	db000417 	ldw	r12,16(sp)
 8005cec:	a83ec426 	beq	r21,zero,8005800 <___svfprintf_internal_r+0xf9c>
 8005cf0:	dc402704 	addi	r17,sp,156
 8005cf4:	a805883a 	mov	r2,r21
 8005cf8:	dc000715 	stw	r16,28(sp)
 8005cfc:	902b883a 	mov	r21,r18
 8005d00:	8821883a 	mov	r16,r17
 8005d04:	db000415 	stw	r12,16(sp)
 8005d08:	a023883a 	mov	r17,r20
 8005d0c:	da000e15 	stw	r8,56(sp)
 8005d10:	9829883a 	mov	r20,r19
 8005d14:	1025883a 	mov	r18,r2
 8005d18:	6827883a 	mov	r19,r13
 8005d1c:	8809883a 	mov	r4,r17
 8005d20:	900b883a 	mov	r5,r18
 8005d24:	01800284 	movi	r6,10
 8005d28:	000f883a 	mov	r7,zero
 8005d2c:	80119b40 	call	80119b4 <__umoddi3>
 8005d30:	10800c04 	addi	r2,r2,48
 8005d34:	8809883a 	mov	r4,r17
 8005d38:	900b883a 	mov	r5,r18
 8005d3c:	01800284 	movi	r6,10
 8005d40:	000f883a 	mov	r7,zero
 8005d44:	80bfffc5 	stb	r2,-1(r16)
 8005d48:	80114240 	call	8011424 <__udivdi3>
 8005d4c:	900d883a 	mov	r6,r18
 8005d50:	880f883a 	mov	r7,r17
 8005d54:	843fffc4 	addi	r16,r16,-1
 8005d58:	1023883a 	mov	r17,r2
 8005d5c:	1825883a 	mov	r18,r3
 8005d60:	303fee1e 	bne	r6,zero,8005d1c <___svfprintf_internal_r+0x14b8>
 8005d64:	39c002a8 	cmpgeui	r7,r7,10
 8005d68:	383fec1e 	bne	r7,zero,8005d1c <___svfprintf_internal_r+0x14b8>
 8005d6c:	8023883a 	mov	r17,r16
 8005d70:	d8802704 	addi	r2,sp,156
 8005d74:	981b883a 	mov	r13,r19
 8005d78:	a825883a 	mov	r18,r21
 8005d7c:	dc000717 	ldw	r16,28(sp)
 8005d80:	da000e17 	ldw	r8,56(sp)
 8005d84:	a027883a 	mov	r19,r20
 8005d88:	146bc83a 	sub	r21,r2,r17
 8005d8c:	003d0006 	br	8005190 <___svfprintf_internal_r+0x92c>
 8005d90:	d8800717 	ldw	r2,28(sp)
 8005d94:	002b883a 	mov	r21,zero
 8005d98:	156bc83a 	sub	r21,r2,r21
 8005d9c:	057f100e 	bge	zero,r21,80059e0 <___svfprintf_internal_r+0x117c>
 8005da0:	00000806 	br	8005dc4 <___svfprintf_internal_r+0x1560>
 8005da4:	8809883a 	mov	r4,r17
 8005da8:	db000415 	stw	r12,16(sp)
 8005dac:	d8c00615 	stw	r3,24(sp)
 8005db0:	80044880 	call	8004488 <strlen>
 8005db4:	db000417 	ldw	r12,16(sp)
 8005db8:	102b883a 	mov	r21,r2
 8005dbc:	1029883a 	mov	r20,r2
 8005dc0:	003b5d06 	br	8004b38 <___svfprintf_internal_r+0x2d4>
 8005dc4:	01c20174 	movhi	r7,2053
 8005dc8:	a9000450 	cmplti	r4,r21,17
 8005dcc:	d8801b17 	ldw	r2,108(sp)
 8005dd0:	39c16404 	addi	r7,r7,1424
 8005dd4:	2001c21e 	bne	r4,zero,80064e0 <___svfprintf_internal_r+0x1c7c>
 8005dd8:	dc000e15 	stw	r16,56(sp)
 8005ddc:	07000404 	movi	fp,16
 8005de0:	3821883a 	mov	r16,r7
 8005de4:	00000406 	br	8005df8 <___svfprintf_internal_r+0x1594>
 8005de8:	b5800204 	addi	r22,r22,8
 8005dec:	ad7ffc04 	addi	r21,r21,-16
 8005df0:	a9000448 	cmpgei	r4,r21,17
 8005df4:	2001b826 	beq	r4,zero,80064d8 <___svfprintf_internal_r+0x1c74>
 8005df8:	10800044 	addi	r2,r2,1
 8005dfc:	18c00404 	addi	r3,r3,16
 8005e00:	b4000015 	stw	r16,0(r22)
 8005e04:	b7000115 	stw	fp,4(r22)
 8005e08:	d8c01c15 	stw	r3,112(sp)
 8005e0c:	d8801b15 	stw	r2,108(sp)
 8005e10:	11000208 	cmpgei	r4,r2,8
 8005e14:	203ff426 	beq	r4,zero,8005de8 <___svfprintf_internal_r+0x1584>
 8005e18:	d9801a04 	addi	r6,sp,104
 8005e1c:	900b883a 	mov	r5,r18
 8005e20:	9809883a 	mov	r4,r19
 8005e24:	800dce40 	call	800dce4 <__ssprint_r>
 8005e28:	103b8d1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005e2c:	d8c01c17 	ldw	r3,112(sp)
 8005e30:	d8801b17 	ldw	r2,108(sp)
 8005e34:	dd802704 	addi	r22,sp,156
 8005e38:	003fec06 	br	8005dec <___svfprintf_internal_r+0x1588>
 8005e3c:	01401004 	movi	r5,64
 8005e40:	9809883a 	mov	r4,r19
 8005e44:	800b93c0 	call	800b93c <_malloc_r>
 8005e48:	90800015 	stw	r2,0(r18)
 8005e4c:	90800415 	stw	r2,16(r18)
 8005e50:	1002a626 	beq	r2,zero,80068ec <___svfprintf_internal_r+0x2088>
 8005e54:	00801004 	movi	r2,64
 8005e58:	90800515 	stw	r2,20(r18)
 8005e5c:	003a9b06 	br	80048cc <___svfprintf_internal_r+0x68>
 8005e60:	d8800517 	ldw	r2,20(sp)
 8005e64:	18800015 	stw	r2,0(r3)
 8005e68:	003aa406 	br	80048fc <___svfprintf_internal_r+0x98>
 8005e6c:	d9801a04 	addi	r6,sp,104
 8005e70:	900b883a 	mov	r5,r18
 8005e74:	9809883a 	mov	r4,r19
 8005e78:	800dce40 	call	800dce4 <__ssprint_r>
 8005e7c:	103b781e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005e80:	da001b17 	ldw	r8,108(sp)
 8005e84:	d8c01c17 	ldw	r3,112(sp)
 8005e88:	dd802904 	addi	r22,sp,164
 8005e8c:	42000044 	addi	r8,r8,1
 8005e90:	df002704 	addi	fp,sp,156
 8005e94:	003e4506 	br	80057ac <___svfprintf_internal_r+0xf48>
 8005e98:	d9801a04 	addi	r6,sp,104
 8005e9c:	900b883a 	mov	r5,r18
 8005ea0:	9809883a 	mov	r4,r19
 8005ea4:	da001115 	stw	r8,68(sp)
 8005ea8:	db400f15 	stw	r13,60(sp)
 8005eac:	db800e15 	stw	r14,56(sp)
 8005eb0:	800dce40 	call	800dce4 <__ssprint_r>
 8005eb4:	103b6a1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8005eb8:	d8c01c17 	ldw	r3,112(sp)
 8005ebc:	da001117 	ldw	r8,68(sp)
 8005ec0:	db400f17 	ldw	r13,60(sp)
 8005ec4:	db800e17 	ldw	r14,56(sp)
 8005ec8:	dd802704 	addi	r22,sp,156
 8005ecc:	003b2706 	br	8004b6c <___svfprintf_internal_r+0x308>
 8005ed0:	d8801b17 	ldw	r2,108(sp)
 8005ed4:	01020174 	movhi	r4,2053
 8005ed8:	21016304 	addi	r4,r4,1420
 8005edc:	10800044 	addi	r2,r2,1
 8005ee0:	18c00044 	addi	r3,r3,1
 8005ee4:	b1000015 	stw	r4,0(r22)
 8005ee8:	01000044 	movi	r4,1
 8005eec:	d8801b15 	stw	r2,108(sp)
 8005ef0:	b1000115 	stw	r4,4(r22)
 8005ef4:	d8c01c15 	stw	r3,112(sp)
 8005ef8:	10800208 	cmpgei	r2,r2,8
 8005efc:	10018a1e 	bne	r2,zero,8006528 <___svfprintf_internal_r+0x1cc4>
 8005f00:	b5800204 	addi	r22,r22,8
 8005f04:	2800a01e 	bne	r5,zero,8006188 <___svfprintf_internal_r+0x1924>
 8005f08:	d8800417 	ldw	r2,16(sp)
 8005f0c:	d9000817 	ldw	r4,32(sp)
 8005f10:	1080004c 	andi	r2,r2,1
 8005f14:	1104b03a 	or	r2,r2,r4
 8005f18:	103b4026 	beq	r2,zero,8004c1c <___svfprintf_internal_r+0x3b8>
 8005f1c:	d8800d17 	ldw	r2,52(sp)
 8005f20:	d9000c17 	ldw	r4,48(sp)
 8005f24:	b0800015 	stw	r2,0(r22)
 8005f28:	d8801b17 	ldw	r2,108(sp)
 8005f2c:	20c7883a 	add	r3,r4,r3
 8005f30:	b1000115 	stw	r4,4(r22)
 8005f34:	10800044 	addi	r2,r2,1
 8005f38:	d8c01c15 	stw	r3,112(sp)
 8005f3c:	d8801b15 	stw	r2,108(sp)
 8005f40:	11000208 	cmpgei	r4,r2,8
 8005f44:	2001951e 	bne	r4,zero,800659c <___svfprintf_internal_r+0x1d38>
 8005f48:	b5800204 	addi	r22,r22,8
 8005f4c:	d9000817 	ldw	r4,32(sp)
 8005f50:	10800044 	addi	r2,r2,1
 8005f54:	d8801b15 	stw	r2,108(sp)
 8005f58:	20c7883a 	add	r3,r4,r3
 8005f5c:	b4400015 	stw	r17,0(r22)
 8005f60:	b1000115 	stw	r4,4(r22)
 8005f64:	d8c01c15 	stw	r3,112(sp)
 8005f68:	10800208 	cmpgei	r2,r2,8
 8005f6c:	103b2a26 	beq	r2,zero,8004c18 <___svfprintf_internal_r+0x3b4>
 8005f70:	003e1706 	br	80057d0 <___svfprintf_internal_r+0xf6c>
 8005f74:	8825883a 	mov	r18,r17
 8005f78:	003b3906 	br	8004c60 <___svfprintf_internal_r+0x3fc>
 8005f7c:	d9000917 	ldw	r4,36(sp)
 8005f80:	d9400a17 	ldw	r5,40(sp)
 8005f84:	da000615 	stw	r8,24(sp)
 8005f88:	200d883a 	mov	r6,r4
 8005f8c:	280f883a 	mov	r7,r5
 8005f90:	db000415 	stw	r12,16(sp)
 8005f94:	80144780 	call	8014478 <__unorddf2>
 8005f98:	db000417 	ldw	r12,16(sp)
 8005f9c:	da000617 	ldw	r8,24(sp)
 8005fa0:	1002271e 	bne	r2,zero,8006840 <___svfprintf_internal_r+0x1fdc>
 8005fa4:	057ff7c4 	movi	r21,-33
 8005fa8:	40bfffe0 	cmpeqi	r2,r8,-1
 8005fac:	e56a703a 	and	r21,fp,r21
 8005fb0:	1001c91e 	bne	r2,zero,80066d8 <___svfprintf_internal_r+0x1e74>
 8005fb4:	a88011d8 	cmpnei	r2,r21,71
 8005fb8:	10004026 	beq	r2,zero,80060bc <___svfprintf_internal_r+0x1858>
 8005fbc:	60804014 	ori	r2,r12,256
 8005fc0:	d8800415 	stw	r2,16(sp)
 8005fc4:	d8800a17 	ldw	r2,40(sp)
 8005fc8:	10015316 	blt	r2,zero,8006518 <___svfprintf_internal_r+0x1cb4>
 8005fcc:	dd000a17 	ldw	r20,40(sp)
 8005fd0:	d8000605 	stb	zero,24(sp)
 8005fd4:	e08019a0 	cmpeqi	r2,fp,102
 8005fd8:	d8800f15 	stw	r2,60(sp)
 8005fdc:	1000b21e 	bne	r2,zero,80062a8 <___svfprintf_internal_r+0x1a44>
 8005fe0:	e08011a0 	cmpeqi	r2,fp,70
 8005fe4:	1000b01e 	bne	r2,zero,80062a8 <___svfprintf_internal_r+0x1a44>
 8005fe8:	a8801158 	cmpnei	r2,r21,69
 8005fec:	10018526 	beq	r2,zero,8006604 <___svfprintf_internal_r+0x1da0>
 8005ff0:	d8801804 	addi	r2,sp,96
 8005ff4:	d8800315 	stw	r2,12(sp)
 8005ff8:	d9400917 	ldw	r5,36(sp)
 8005ffc:	d8801504 	addi	r2,sp,84
 8006000:	d8800215 	stw	r2,8(sp)
 8006004:	d8801404 	addi	r2,sp,80
 8006008:	da000015 	stw	r8,0(sp)
 800600c:	9809883a 	mov	r4,r19
 8006010:	d8800115 	stw	r2,4(sp)
 8006014:	01c00084 	movi	r7,2
 8006018:	a00d883a 	mov	r6,r20
 800601c:	db000815 	stw	r12,32(sp)
 8006020:	da000715 	stw	r8,28(sp)
 8006024:	8008e7c0 	call	8008e7c <_dtoa_r>
 8006028:	da000717 	ldw	r8,28(sp)
 800602c:	e10019d8 	cmpnei	r4,fp,103
 8006030:	db000817 	ldw	r12,32(sp)
 8006034:	1023883a 	mov	r17,r2
 8006038:	4007883a 	mov	r3,r8
 800603c:	2001851e 	bne	r4,zero,8006654 <___svfprintf_internal_r+0x1df0>
 8006040:	6080004c 	andi	r2,r12,1
 8006044:	1001851e 	bne	r2,zero,800665c <___svfprintf_internal_r+0x1df8>
 8006048:	d8801417 	ldw	r2,80(sp)
 800604c:	ad4011e0 	cmpeqi	r21,r21,71
 8006050:	d8800715 	stw	r2,28(sp)
 8006054:	d8801817 	ldw	r2,96(sp)
 8006058:	1445c83a 	sub	r2,r2,r17
 800605c:	d8800815 	stw	r2,32(sp)
 8006060:	a800db26 	beq	r21,zero,80063d0 <___svfprintf_internal_r+0x1b6c>
 8006064:	d8c00717 	ldw	r3,28(sp)
 8006068:	18bfff50 	cmplti	r2,r3,-3
 800606c:	1000d71e 	bne	r2,zero,80063cc <___svfprintf_internal_r+0x1b68>
 8006070:	40c0d616 	blt	r8,r3,80063cc <___svfprintf_internal_r+0x1b68>
 8006074:	d8800717 	ldw	r2,28(sp)
 8006078:	d8c00817 	ldw	r3,32(sp)
 800607c:	10c19c16 	blt	r2,r3,80066f0 <___svfprintf_internal_r+0x1e8c>
 8006080:	6300004c 	andi	r12,r12,1
 8006084:	6001dd1e 	bne	r12,zero,80067fc <___svfprintf_internal_r+0x1f98>
 8006088:	1029883a 	mov	r20,r2
 800608c:	1000010e 	bge	r2,zero,8006094 <___svfprintf_internal_r+0x1830>
 8006090:	0029883a 	mov	r20,zero
 8006094:	dd400717 	ldw	r21,28(sp)
 8006098:	070019c4 	movi	fp,103
 800609c:	d8800607 	ldb	r2,24(sp)
 80060a0:	10017426 	beq	r2,zero,8006674 <___svfprintf_internal_r+0x1e10>
 80060a4:	00800b44 	movi	r2,45
 80060a8:	d8801345 	stb	r2,77(sp)
 80060ac:	d8800e17 	ldw	r2,56(sp)
 80060b0:	0011883a 	mov	r8,zero
 80060b4:	d8800615 	stw	r2,24(sp)
 80060b8:	003c3d06 	br	80051b0 <___svfprintf_internal_r+0x94c>
 80060bc:	403fbf1e 	bne	r8,zero,8005fbc <___svfprintf_internal_r+0x1758>
 80060c0:	02000044 	movi	r8,1
 80060c4:	003fbd06 	br	8005fbc <___svfprintf_internal_r+0x1758>
 80060c8:	db401343 	ldbu	r13,77(sp)
 80060cc:	003dcb06 	br	80057fc <___svfprintf_internal_r+0xf98>
 80060d0:	880f883a 	mov	r7,r17
 80060d4:	10800044 	addi	r2,r2,1
 80060d8:	1d47883a 	add	r3,r3,r21
 80060dc:	b1c00015 	stw	r7,0(r22)
 80060e0:	003ac806 	br	8004c04 <___svfprintf_internal_r+0x3a0>
 80060e4:	d9801a04 	addi	r6,sp,104
 80060e8:	900b883a 	mov	r5,r18
 80060ec:	9809883a 	mov	r4,r19
 80060f0:	800dce40 	call	800dce4 <__ssprint_r>
 80060f4:	103ada1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80060f8:	d8c01c17 	ldw	r3,112(sp)
 80060fc:	dd802704 	addi	r22,sp,156
 8006100:	003cbe06 	br	80053fc <___svfprintf_internal_r+0xb98>
 8006104:	d9801a04 	addi	r6,sp,104
 8006108:	900b883a 	mov	r5,r18
 800610c:	9809883a 	mov	r4,r19
 8006110:	da000e15 	stw	r8,56(sp)
 8006114:	800dce40 	call	800dce4 <__ssprint_r>
 8006118:	103ad11e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 800611c:	d8c01c17 	ldw	r3,112(sp)
 8006120:	da000e17 	ldw	r8,56(sp)
 8006124:	dd802704 	addi	r22,sp,156
 8006128:	003aad06 	br	8004be0 <___svfprintf_internal_r+0x37c>
 800612c:	d9801a04 	addi	r6,sp,104
 8006130:	900b883a 	mov	r5,r18
 8006134:	9809883a 	mov	r4,r19
 8006138:	800dce40 	call	800dce4 <__ssprint_r>
 800613c:	103ac81e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8006140:	d8c01c17 	ldw	r3,112(sp)
 8006144:	dd802704 	addi	r22,sp,156
 8006148:	003cbe06 	br	8005444 <___svfprintf_internal_r+0xbe0>
 800614c:	bf000043 	ldbu	fp,1(r23)
 8006150:	63000814 	ori	r12,r12,32
 8006154:	bdc00044 	addi	r23,r23,1
 8006158:	e2c03fcc 	andi	r11,fp,255
 800615c:	5ac0201c 	xori	r11,r11,128
 8006160:	5affe004 	addi	r11,r11,-128
 8006164:	0039fd06 	br	800495c <___svfprintf_internal_r+0xf8>
 8006168:	408001f0 	cmpltui	r2,r8,7
 800616c:	402b883a 	mov	r21,r8
 8006170:	10010126 	beq	r2,zero,8006578 <___svfprintf_internal_r+0x1d14>
 8006174:	04420174 	movhi	r17,2053
 8006178:	a829883a 	mov	r20,r21
 800617c:	d8c00615 	stw	r3,24(sp)
 8006180:	8c416104 	addi	r17,r17,1412
 8006184:	003a6c06 	br	8004b38 <___svfprintf_internal_r+0x2d4>
 8006188:	d8800d17 	ldw	r2,52(sp)
 800618c:	d9000c17 	ldw	r4,48(sp)
 8006190:	b0800015 	stw	r2,0(r22)
 8006194:	d8801b17 	ldw	r2,108(sp)
 8006198:	20c7883a 	add	r3,r4,r3
 800619c:	b1000115 	stw	r4,4(r22)
 80061a0:	10800044 	addi	r2,r2,1
 80061a4:	d8c01c15 	stw	r3,112(sp)
 80061a8:	d8801b15 	stw	r2,108(sp)
 80061ac:	11000208 	cmpgei	r4,r2,8
 80061b0:	2000fa1e 	bne	r4,zero,800659c <___svfprintf_internal_r+0x1d38>
 80061b4:	b5800204 	addi	r22,r22,8
 80061b8:	283f640e 	bge	r5,zero,8005f4c <___svfprintf_internal_r+0x16e8>
 80061bc:	01c20174 	movhi	r7,2053
 80061c0:	293ffc08 	cmpgei	r4,r5,-16
 80061c4:	39c16404 	addi	r7,r7,1424
 80061c8:	0179c83a 	sub	fp,zero,r5
 80061cc:	2001631e 	bne	r4,zero,800675c <___svfprintf_internal_r+0x1ef8>
 80061d0:	dc000715 	stw	r16,28(sp)
 80061d4:	05400404 	movi	r21,16
 80061d8:	9021883a 	mov	r16,r18
 80061dc:	3825883a 	mov	r18,r7
 80061e0:	00000406 	br	80061f4 <___svfprintf_internal_r+0x1990>
 80061e4:	b5800204 	addi	r22,r22,8
 80061e8:	e73ffc04 	addi	fp,fp,-16
 80061ec:	e1800448 	cmpgei	r6,fp,17
 80061f0:	30015726 	beq	r6,zero,8006750 <___svfprintf_internal_r+0x1eec>
 80061f4:	10800044 	addi	r2,r2,1
 80061f8:	18c00404 	addi	r3,r3,16
 80061fc:	b4800015 	stw	r18,0(r22)
 8006200:	b5400115 	stw	r21,4(r22)
 8006204:	d8c01c15 	stw	r3,112(sp)
 8006208:	d8801b15 	stw	r2,108(sp)
 800620c:	11800208 	cmpgei	r6,r2,8
 8006210:	303ff426 	beq	r6,zero,80061e4 <___svfprintf_internal_r+0x1980>
 8006214:	d9801a04 	addi	r6,sp,104
 8006218:	800b883a 	mov	r5,r16
 800621c:	9809883a 	mov	r4,r19
 8006220:	800dce40 	call	800dce4 <__ssprint_r>
 8006224:	1001961e 	bne	r2,zero,8006880 <___svfprintf_internal_r+0x201c>
 8006228:	d8c01c17 	ldw	r3,112(sp)
 800622c:	d8801b17 	ldw	r2,108(sp)
 8006230:	dd802704 	addi	r22,sp,156
 8006234:	003fec06 	br	80061e8 <___svfprintf_internal_r+0x1984>
 8006238:	800f883a 	mov	r7,r16
 800623c:	dc000717 	ldw	r16,28(sp)
 8006240:	8817883a 	mov	r11,r17
 8006244:	aa000044 	addi	r8,r21,1
 8006248:	e0800204 	addi	r2,fp,8
 800624c:	1ac7883a 	add	r3,r3,r11
 8006250:	e1c00015 	stw	r7,0(fp)
 8006254:	e2c00115 	stw	r11,4(fp)
 8006258:	d8c01c15 	stw	r3,112(sp)
 800625c:	da001b15 	stw	r8,108(sp)
 8006260:	41000208 	cmpgei	r4,r8,8
 8006264:	203f011e 	bne	r4,zero,8005e6c <___svfprintf_internal_r+0x1608>
 8006268:	42000044 	addi	r8,r8,1
 800626c:	15800204 	addi	r22,r2,8
 8006270:	1039883a 	mov	fp,r2
 8006274:	003d4d06 	br	80057ac <___svfprintf_internal_r+0xf48>
 8006278:	d8800617 	ldw	r2,24(sp)
 800627c:	d8c00615 	stw	r3,24(sp)
 8006280:	15000017 	ldw	r20,0(r2)
 8006284:	a02bd7fa 	srai	r21,r20,31
 8006288:	a805883a 	mov	r2,r21
 800628c:	003b4c06 	br	8004fc0 <___svfprintf_internal_r+0x75c>
 8006290:	d8800617 	ldw	r2,24(sp)
 8006294:	002b883a 	mov	r21,zero
 8006298:	d8c00615 	stw	r3,24(sp)
 800629c:	15000017 	ldw	r20,0(r2)
 80062a0:	00800044 	movi	r2,1
 80062a4:	003a9106 	br	8004cec <___svfprintf_internal_r+0x488>
 80062a8:	d8801804 	addi	r2,sp,96
 80062ac:	d8800315 	stw	r2,12(sp)
 80062b0:	d9400917 	ldw	r5,36(sp)
 80062b4:	d8801504 	addi	r2,sp,84
 80062b8:	d8800215 	stw	r2,8(sp)
 80062bc:	d8801404 	addi	r2,sp,80
 80062c0:	da000015 	stw	r8,0(sp)
 80062c4:	d8800115 	stw	r2,4(sp)
 80062c8:	01c000c4 	movi	r7,3
 80062cc:	a00d883a 	mov	r6,r20
 80062d0:	9809883a 	mov	r4,r19
 80062d4:	db000815 	stw	r12,32(sp)
 80062d8:	da000715 	stw	r8,28(sp)
 80062dc:	8008e7c0 	call	8008e7c <_dtoa_r>
 80062e0:	da000717 	ldw	r8,28(sp)
 80062e4:	1023883a 	mov	r17,r2
 80062e8:	db000817 	ldw	r12,32(sp)
 80062ec:	1207883a 	add	r3,r2,r8
 80062f0:	88800007 	ldb	r2,0(r17)
 80062f4:	10800c20 	cmpeqi	r2,r2,48
 80062f8:	1001291e 	bne	r2,zero,80067a0 <___svfprintf_internal_r+0x1f3c>
 80062fc:	d8801417 	ldw	r2,80(sp)
 8006300:	1893883a 	add	r9,r3,r2
 8006304:	d9000917 	ldw	r4,36(sp)
 8006308:	000d883a 	mov	r6,zero
 800630c:	000f883a 	mov	r7,zero
 8006310:	a00b883a 	mov	r5,r20
 8006314:	da401115 	stw	r9,68(sp)
 8006318:	da000815 	stw	r8,32(sp)
 800631c:	db000715 	stw	r12,28(sp)
 8006320:	80132740 	call	8013274 <__eqdf2>
 8006324:	db000717 	ldw	r12,28(sp)
 8006328:	da000817 	ldw	r8,32(sp)
 800632c:	da401117 	ldw	r9,68(sp)
 8006330:	10008f26 	beq	r2,zero,8006570 <___svfprintf_internal_r+0x1d0c>
 8006334:	d8801817 	ldw	r2,96(sp)
 8006338:	1240062e 	bgeu	r2,r9,8006354 <___svfprintf_internal_r+0x1af0>
 800633c:	01000c04 	movi	r4,48
 8006340:	10c00044 	addi	r3,r2,1
 8006344:	d8c01815 	stw	r3,96(sp)
 8006348:	11000005 	stb	r4,0(r2)
 800634c:	d8801817 	ldw	r2,96(sp)
 8006350:	127ffb36 	bltu	r2,r9,8006340 <___svfprintf_internal_r+0x1adc>
 8006354:	d8c01417 	ldw	r3,80(sp)
 8006358:	1445c83a 	sub	r2,r2,r17
 800635c:	ad4011d8 	cmpnei	r21,r21,71
 8006360:	d8c00715 	stw	r3,28(sp)
 8006364:	d8800815 	stw	r2,32(sp)
 8006368:	a83f3e26 	beq	r21,zero,8006064 <___svfprintf_internal_r+0x1800>
 800636c:	d8800f17 	ldw	r2,60(sp)
 8006370:	10001726 	beq	r2,zero,80063d0 <___svfprintf_internal_r+0x1b6c>
 8006374:	d8c00717 	ldw	r3,28(sp)
 8006378:	6080004c 	andi	r2,r12,1
 800637c:	1204b03a 	or	r2,r2,r8
 8006380:	00c0b80e 	bge	zero,r3,8006664 <___svfprintf_internal_r+0x1e00>
 8006384:	1001361e 	bne	r2,zero,8006860 <___svfprintf_internal_r+0x1ffc>
 8006388:	dd400717 	ldw	r21,28(sp)
 800638c:	a829883a 	mov	r20,r21
 8006390:	003f4206 	br	800609c <___svfprintf_internal_r+0x1838>
 8006394:	d8800617 	ldw	r2,24(sp)
 8006398:	002b883a 	mov	r21,zero
 800639c:	d8c00615 	stw	r3,24(sp)
 80063a0:	15000017 	ldw	r20,0(r2)
 80063a4:	003bc606 	br	80052c0 <___svfprintf_internal_r+0xa5c>
 80063a8:	d8800617 	ldw	r2,24(sp)
 80063ac:	002b883a 	mov	r21,zero
 80063b0:	d8c00615 	stw	r3,24(sp)
 80063b4:	15000017 	ldw	r20,0(r2)
 80063b8:	0005883a 	mov	r2,zero
 80063bc:	003a4b06 	br	8004cec <___svfprintf_internal_r+0x488>
 80063c0:	04420174 	movhi	r17,2053
 80063c4:	8c415304 	addi	r17,r17,1356
 80063c8:	003aa206 	br	8004e54 <___svfprintf_internal_r+0x5f0>
 80063cc:	e73fff84 	addi	fp,fp,-2
 80063d0:	d8800717 	ldw	r2,28(sp)
 80063d4:	df001645 	stb	fp,89(sp)
 80063d8:	157fffc4 	addi	r21,r2,-1
 80063dc:	dd401415 	stw	r21,80(sp)
 80063e0:	a8008316 	blt	r21,zero,80065f0 <___svfprintf_internal_r+0x1d8c>
 80063e4:	00800ac4 	movi	r2,43
 80063e8:	d8801685 	stb	r2,90(sp)
 80063ec:	a8800290 	cmplti	r2,r21,10
 80063f0:	1000fb1e 	bne	r2,zero,80067e0 <___svfprintf_internal_r+0x1f7c>
 80063f4:	d98019c4 	addi	r6,sp,103
 80063f8:	9029883a 	mov	r20,r18
 80063fc:	dc400715 	stw	r17,28(sp)
 8006400:	8025883a 	mov	r18,r16
 8006404:	db000f15 	stw	r12,60(sp)
 8006408:	3021883a 	mov	r16,r6
 800640c:	a809883a 	mov	r4,r21
 8006410:	01400284 	movi	r5,10
 8006414:	8011f680 	call	8011f68 <__modsi3>
 8006418:	10800c04 	addi	r2,r2,48
 800641c:	a809883a 	mov	r4,r21
 8006420:	80bfffc5 	stb	r2,-1(r16)
 8006424:	01400284 	movi	r5,10
 8006428:	8011ee80 	call	8011ee8 <__divsi3>
 800642c:	a9001908 	cmpgei	r4,r21,100
 8006430:	8023883a 	mov	r17,r16
 8006434:	102b883a 	mov	r21,r2
 8006438:	843fffc4 	addi	r16,r16,-1
 800643c:	203ff31e 	bne	r4,zero,800640c <___svfprintf_internal_r+0x1ba8>
 8006440:	800d883a 	mov	r6,r16
 8006444:	11000c04 	addi	r4,r2,48
 8006448:	9021883a 	mov	r16,r18
 800644c:	a025883a 	mov	r18,r20
 8006450:	8829883a 	mov	r20,r17
 8006454:	a0bfff84 	addi	r2,r20,-2
 8006458:	313fffc5 	stb	r4,-1(r6)
 800645c:	d8c019c4 	addi	r3,sp,103
 8006460:	db000f17 	ldw	r12,60(sp)
 8006464:	dc400717 	ldw	r17,28(sp)
 8006468:	10c11d2e 	bgeu	r2,r3,80068e0 <___svfprintf_internal_r+0x207c>
 800646c:	d8c016c4 	addi	r3,sp,91
 8006470:	00000106 	br	8006478 <___svfprintf_internal_r+0x1c14>
 8006474:	11000003 	ldbu	r4,0(r2)
 8006478:	19000005 	stb	r4,0(r3)
 800647c:	10800044 	addi	r2,r2,1
 8006480:	d90019c4 	addi	r4,sp,103
 8006484:	18c00044 	addi	r3,r3,1
 8006488:	113ffa1e 	bne	r2,r4,8006474 <___svfprintf_internal_r+0x1c10>
 800648c:	d8801a44 	addi	r2,sp,105
 8006490:	d8c016c4 	addi	r3,sp,91
 8006494:	1505c83a 	sub	r2,r2,r20
 8006498:	1885883a 	add	r2,r3,r2
 800649c:	d8c01644 	addi	r3,sp,89
 80064a0:	10c5c83a 	sub	r2,r2,r3
 80064a4:	d8801015 	stw	r2,64(sp)
 80064a8:	d8c00817 	ldw	r3,32(sp)
 80064ac:	d9001017 	ldw	r4,64(sp)
 80064b0:	18800088 	cmpgei	r2,r3,2
 80064b4:	20eb883a 	add	r21,r4,r3
 80064b8:	1000da26 	beq	r2,zero,8006824 <___svfprintf_internal_r+0x1fc0>
 80064bc:	d8800c17 	ldw	r2,48(sp)
 80064c0:	a8ab883a 	add	r21,r21,r2
 80064c4:	a829883a 	mov	r20,r21
 80064c8:	a800010e 	bge	r21,zero,80064d0 <___svfprintf_internal_r+0x1c6c>
 80064cc:	0029883a 	mov	r20,zero
 80064d0:	d8000715 	stw	zero,28(sp)
 80064d4:	003ef106 	br	800609c <___svfprintf_internal_r+0x1838>
 80064d8:	800f883a 	mov	r7,r16
 80064dc:	dc000e17 	ldw	r16,56(sp)
 80064e0:	10800044 	addi	r2,r2,1
 80064e4:	1d47883a 	add	r3,r3,r21
 80064e8:	d8801b15 	stw	r2,108(sp)
 80064ec:	b1c00015 	stw	r7,0(r22)
 80064f0:	b5400115 	stw	r21,4(r22)
 80064f4:	d8c01c15 	stw	r3,112(sp)
 80064f8:	10800208 	cmpgei	r2,r2,8
 80064fc:	1000321e 	bne	r2,zero,80065c8 <___svfprintf_internal_r+0x1d64>
 8006500:	b5800204 	addi	r22,r22,8
 8006504:	003d3606 	br	80059e0 <___svfprintf_internal_r+0x117c>
 8006508:	00800b44 	movi	r2,45
 800650c:	d8801345 	stb	r2,77(sp)
 8006510:	03400b44 	movi	r13,45
 8006514:	003a4b06 	br	8004e44 <___svfprintf_internal_r+0x5e0>
 8006518:	1520003c 	xorhi	r20,r2,32768
 800651c:	00800b44 	movi	r2,45
 8006520:	d8800605 	stb	r2,24(sp)
 8006524:	003eab06 	br	8005fd4 <___svfprintf_internal_r+0x1770>
 8006528:	d9801a04 	addi	r6,sp,104
 800652c:	900b883a 	mov	r5,r18
 8006530:	9809883a 	mov	r4,r19
 8006534:	800dce40 	call	800dce4 <__ssprint_r>
 8006538:	1039c91e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 800653c:	d9401417 	ldw	r5,80(sp)
 8006540:	d8c01c17 	ldw	r3,112(sp)
 8006544:	dd802704 	addi	r22,sp,156
 8006548:	003e6e06 	br	8005f04 <___svfprintf_internal_r+0x16a0>
 800654c:	d9801a04 	addi	r6,sp,104
 8006550:	900b883a 	mov	r5,r18
 8006554:	9809883a 	mov	r4,r19
 8006558:	800dce40 	call	800dce4 <__ssprint_r>
 800655c:	1039c01e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8006560:	dd401417 	ldw	r21,80(sp)
 8006564:	d8c01c17 	ldw	r3,112(sp)
 8006568:	dd802704 	addi	r22,sp,156
 800656c:	003d2b06 	br	8005a1c <___svfprintf_internal_r+0x11b8>
 8006570:	4805883a 	mov	r2,r9
 8006574:	003f7706 	br	8006354 <___svfprintf_internal_r+0x1af0>
 8006578:	05400184 	movi	r21,6
 800657c:	003efd06 	br	8006174 <___svfprintf_internal_r+0x1910>
 8006580:	d9401345 	stb	r5,77(sp)
 8006584:	00396606 	br	8004b20 <___svfprintf_internal_r+0x2bc>
 8006588:	d9801a04 	addi	r6,sp,104
 800658c:	900b883a 	mov	r5,r18
 8006590:	9809883a 	mov	r4,r19
 8006594:	800dce40 	call	800dce4 <__ssprint_r>
 8006598:	0039b106 	br	8004c60 <___svfprintf_internal_r+0x3fc>
 800659c:	d9801a04 	addi	r6,sp,104
 80065a0:	900b883a 	mov	r5,r18
 80065a4:	9809883a 	mov	r4,r19
 80065a8:	800dce40 	call	800dce4 <__ssprint_r>
 80065ac:	1039ac1e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80065b0:	d9401417 	ldw	r5,80(sp)
 80065b4:	d8c01c17 	ldw	r3,112(sp)
 80065b8:	d8801b17 	ldw	r2,108(sp)
 80065bc:	dd802704 	addi	r22,sp,156
 80065c0:	283e620e 	bge	r5,zero,8005f4c <___svfprintf_internal_r+0x16e8>
 80065c4:	003efd06 	br	80061bc <___svfprintf_internal_r+0x1958>
 80065c8:	d9801a04 	addi	r6,sp,104
 80065cc:	900b883a 	mov	r5,r18
 80065d0:	9809883a 	mov	r4,r19
 80065d4:	800dce40 	call	800dce4 <__ssprint_r>
 80065d8:	1039a11e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80065dc:	d8c01c17 	ldw	r3,112(sp)
 80065e0:	dd802704 	addi	r22,sp,156
 80065e4:	003cfe06 	br	80059e0 <___svfprintf_internal_r+0x117c>
 80065e8:	db000417 	ldw	r12,16(sp)
 80065ec:	003c8606 	br	8005808 <___svfprintf_internal_r+0xfa4>
 80065f0:	05400044 	movi	r21,1
 80065f4:	a8abc83a 	sub	r21,r21,r2
 80065f8:	00800b44 	movi	r2,45
 80065fc:	d8801685 	stb	r2,90(sp)
 8006600:	003f7a06 	br	80063ec <___svfprintf_internal_r+0x1b88>
 8006604:	d8801804 	addi	r2,sp,96
 8006608:	d8800315 	stw	r2,12(sp)
 800660c:	d9400917 	ldw	r5,36(sp)
 8006610:	d8801504 	addi	r2,sp,84
 8006614:	40c00044 	addi	r3,r8,1
 8006618:	d8800215 	stw	r2,8(sp)
 800661c:	d8801404 	addi	r2,sp,80
 8006620:	d8c00015 	stw	r3,0(sp)
 8006624:	d8800115 	stw	r2,4(sp)
 8006628:	01c00084 	movi	r7,2
 800662c:	a00d883a 	mov	r6,r20
 8006630:	9809883a 	mov	r4,r19
 8006634:	db001115 	stw	r12,68(sp)
 8006638:	da000815 	stw	r8,32(sp)
 800663c:	d8c00715 	stw	r3,28(sp)
 8006640:	8008e7c0 	call	8008e7c <_dtoa_r>
 8006644:	d8c00717 	ldw	r3,28(sp)
 8006648:	da000817 	ldw	r8,32(sp)
 800664c:	db001117 	ldw	r12,68(sp)
 8006650:	1023883a 	mov	r17,r2
 8006654:	e08011d8 	cmpnei	r2,fp,71
 8006658:	103e7926 	beq	r2,zero,8006040 <___svfprintf_internal_r+0x17dc>
 800665c:	88d3883a 	add	r9,r17,r3
 8006660:	003f2806 	br	8006304 <___svfprintf_internal_r+0x1aa0>
 8006664:	1000821e 	bne	r2,zero,8006870 <___svfprintf_internal_r+0x200c>
 8006668:	05000044 	movi	r20,1
 800666c:	05400044 	movi	r21,1
 8006670:	003e8a06 	br	800609c <___svfprintf_internal_r+0x1838>
 8006674:	d8800e17 	ldw	r2,56(sp)
 8006678:	db401343 	ldbu	r13,77(sp)
 800667c:	0011883a 	mov	r8,zero
 8006680:	d8800615 	stw	r2,24(sp)
 8006684:	003ac606 	br	80051a0 <___svfprintf_internal_r+0x93c>
 8006688:	d9801a04 	addi	r6,sp,104
 800668c:	900b883a 	mov	r5,r18
 8006690:	9809883a 	mov	r4,r19
 8006694:	800dce40 	call	800dce4 <__ssprint_r>
 8006698:	1039711e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 800669c:	d8c01c17 	ldw	r3,112(sp)
 80066a0:	dd802704 	addi	r22,sp,156
 80066a4:	a83ccb0e 	bge	r21,zero,80059d4 <___svfprintf_internal_r+0x1170>
 80066a8:	003db906 	br	8005d90 <___svfprintf_internal_r+0x152c>
 80066ac:	d9801a04 	addi	r6,sp,104
 80066b0:	900b883a 	mov	r5,r18
 80066b4:	9809883a 	mov	r4,r19
 80066b8:	800dce40 	call	800dce4 <__ssprint_r>
 80066bc:	1039681e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 80066c0:	d8801417 	ldw	r2,80(sp)
 80066c4:	d9000817 	ldw	r4,32(sp)
 80066c8:	d8c01c17 	ldw	r3,112(sp)
 80066cc:	dd802704 	addi	r22,sp,156
 80066d0:	2085c83a 	sub	r2,r4,r2
 80066d4:	003ce506 	br	8005a6c <___svfprintf_internal_r+0x1208>
 80066d8:	02000184 	movi	r8,6
 80066dc:	003e3706 	br	8005fbc <___svfprintf_internal_r+0x1758>
 80066e0:	4029883a 	mov	r20,r8
 80066e4:	d8c00615 	stw	r3,24(sp)
 80066e8:	402b883a 	mov	r21,r8
 80066ec:	00391206 	br	8004b38 <___svfprintf_internal_r+0x2d4>
 80066f0:	d8800817 	ldw	r2,32(sp)
 80066f4:	d8c00c17 	ldw	r3,48(sp)
 80066f8:	10eb883a 	add	r21,r2,r3
 80066fc:	d8800717 	ldw	r2,28(sp)
 8006700:	00800316 	blt	zero,r2,8006710 <___svfprintf_internal_r+0x1eac>
 8006704:	d8800717 	ldw	r2,28(sp)
 8006708:	a8abc83a 	sub	r21,r21,r2
 800670c:	ad400044 	addi	r21,r21,1
 8006710:	a829883a 	mov	r20,r21
 8006714:	a8003e16 	blt	r21,zero,8006810 <___svfprintf_internal_r+0x1fac>
 8006718:	070019c4 	movi	fp,103
 800671c:	003e5f06 	br	800609c <___svfprintf_internal_r+0x1838>
 8006720:	d9401345 	stb	r5,77(sp)
 8006724:	00399d06 	br	8004d9c <___svfprintf_internal_r+0x538>
 8006728:	d9401345 	stb	r5,77(sp)
 800672c:	003a4a06 	br	8005058 <___svfprintf_internal_r+0x7f4>
 8006730:	d9401345 	stb	r5,77(sp)
 8006734:	003b0a06 	br	8005360 <___svfprintf_internal_r+0xafc>
 8006738:	d9401345 	stb	r5,77(sp)
 800673c:	003ad606 	br	8005298 <___svfprintf_internal_r+0xa34>
 8006740:	d9401345 	stb	r5,77(sp)
 8006744:	003a5b06 	br	80050b4 <___svfprintf_internal_r+0x850>
 8006748:	d9401345 	stb	r5,77(sp)
 800674c:	003a1406 	br	8004fa0 <___svfprintf_internal_r+0x73c>
 8006750:	900f883a 	mov	r7,r18
 8006754:	8025883a 	mov	r18,r16
 8006758:	dc000717 	ldw	r16,28(sp)
 800675c:	10800044 	addi	r2,r2,1
 8006760:	1f07883a 	add	r3,r3,fp
 8006764:	b1c00015 	stw	r7,0(r22)
 8006768:	b7000115 	stw	fp,4(r22)
 800676c:	d8c01c15 	stw	r3,112(sp)
 8006770:	d8801b15 	stw	r2,108(sp)
 8006774:	11000208 	cmpgei	r4,r2,8
 8006778:	203df326 	beq	r4,zero,8005f48 <___svfprintf_internal_r+0x16e4>
 800677c:	d9801a04 	addi	r6,sp,104
 8006780:	900b883a 	mov	r5,r18
 8006784:	9809883a 	mov	r4,r19
 8006788:	800dce40 	call	800dce4 <__ssprint_r>
 800678c:	1039341e 	bne	r2,zero,8004c60 <___svfprintf_internal_r+0x3fc>
 8006790:	d8c01c17 	ldw	r3,112(sp)
 8006794:	d8801b17 	ldw	r2,108(sp)
 8006798:	dd802704 	addi	r22,sp,156
 800679c:	003deb06 	br	8005f4c <___svfprintf_internal_r+0x16e8>
 80067a0:	d9000917 	ldw	r4,36(sp)
 80067a4:	000d883a 	mov	r6,zero
 80067a8:	000f883a 	mov	r7,zero
 80067ac:	a00b883a 	mov	r5,r20
 80067b0:	d8c01115 	stw	r3,68(sp)
 80067b4:	da000815 	stw	r8,32(sp)
 80067b8:	db000715 	stw	r12,28(sp)
 80067bc:	80132740 	call	8013274 <__eqdf2>
 80067c0:	db000717 	ldw	r12,28(sp)
 80067c4:	da000817 	ldw	r8,32(sp)
 80067c8:	d8c01117 	ldw	r3,68(sp)
 80067cc:	103ecb26 	beq	r2,zero,80062fc <___svfprintf_internal_r+0x1a98>
 80067d0:	00800044 	movi	r2,1
 80067d4:	1205c83a 	sub	r2,r2,r8
 80067d8:	d8801415 	stw	r2,80(sp)
 80067dc:	003ec806 	br	8006300 <___svfprintf_internal_r+0x1a9c>
 80067e0:	00800c04 	movi	r2,48
 80067e4:	ad400c04 	addi	r21,r21,48
 80067e8:	d88016c5 	stb	r2,91(sp)
 80067ec:	00800104 	movi	r2,4
 80067f0:	dd401705 	stb	r21,92(sp)
 80067f4:	d8801015 	stw	r2,64(sp)
 80067f8:	003f2b06 	br	80064a8 <___svfprintf_internal_r+0x1c44>
 80067fc:	d8800717 	ldw	r2,28(sp)
 8006800:	d8c00c17 	ldw	r3,48(sp)
 8006804:	10eb883a 	add	r21,r2,r3
 8006808:	a829883a 	mov	r20,r21
 800680c:	a83fc20e 	bge	r21,zero,8006718 <___svfprintf_internal_r+0x1eb4>
 8006810:	0029883a 	mov	r20,zero
 8006814:	003fc006 	br	8006718 <___svfprintf_internal_r+0x1eb4>
 8006818:	00bfffc4 	movi	r2,-1
 800681c:	d8800515 	stw	r2,20(sp)
 8006820:	00391206 	br	8004c6c <___svfprintf_internal_r+0x408>
 8006824:	6080004c 	andi	r2,r12,1
 8006828:	d8800715 	stw	r2,28(sp)
 800682c:	103f231e 	bne	r2,zero,80064bc <___svfprintf_internal_r+0x1c58>
 8006830:	a829883a 	mov	r20,r21
 8006834:	a83e190e 	bge	r21,zero,800609c <___svfprintf_internal_r+0x1838>
 8006838:	0029883a 	mov	r20,zero
 800683c:	003e1706 	br	800609c <___svfprintf_internal_r+0x1838>
 8006840:	d8800a17 	ldw	r2,40(sp)
 8006844:	10001316 	blt	r2,zero,8006894 <___svfprintf_internal_r+0x2030>
 8006848:	db401343 	ldbu	r13,77(sp)
 800684c:	e0801210 	cmplti	r2,fp,72
 8006850:	10000d1e 	bne	r2,zero,8006888 <___svfprintf_internal_r+0x2024>
 8006854:	04420174 	movhi	r17,2053
 8006858:	8c415604 	addi	r17,r17,1368
 800685c:	00397d06 	br	8004e54 <___svfprintf_internal_r+0x5f0>
 8006860:	d8800c17 	ldw	r2,48(sp)
 8006864:	18ab883a 	add	r21,r3,r2
 8006868:	aa2b883a 	add	r21,r21,r8
 800686c:	003ff006 	br	8006830 <___svfprintf_internal_r+0x1fcc>
 8006870:	d8800c17 	ldw	r2,48(sp)
 8006874:	15400044 	addi	r21,r2,1
 8006878:	aa2b883a 	add	r21,r21,r8
 800687c:	003fec06 	br	8006830 <___svfprintf_internal_r+0x1fcc>
 8006880:	8025883a 	mov	r18,r16
 8006884:	0038f606 	br	8004c60 <___svfprintf_internal_r+0x3fc>
 8006888:	04420174 	movhi	r17,2053
 800688c:	8c415504 	addi	r17,r17,1364
 8006890:	00397006 	br	8004e54 <___svfprintf_internal_r+0x5f0>
 8006894:	00800b44 	movi	r2,45
 8006898:	d8801345 	stb	r2,77(sp)
 800689c:	03400b44 	movi	r13,45
 80068a0:	003fea06 	br	800684c <___svfprintf_internal_r+0x1fe8>
 80068a4:	b005883a 	mov	r2,r22
 80068a8:	39c16404 	addi	r7,r7,1424
 80068ac:	003e6706 	br	800624c <___svfprintf_internal_r+0x19e8>
 80068b0:	d8800617 	ldw	r2,24(sp)
 80068b4:	12000017 	ldw	r8,0(r2)
 80068b8:	10800104 	addi	r2,r2,4
 80068bc:	4000010e 	bge	r8,zero,80068c4 <___svfprintf_internal_r+0x2060>
 80068c0:	023fffc4 	movi	r8,-1
 80068c4:	bf000043 	ldbu	fp,1(r23)
 80068c8:	d8800615 	stw	r2,24(sp)
 80068cc:	182f883a 	mov	r23,r3
 80068d0:	e2c03fcc 	andi	r11,fp,255
 80068d4:	5ac0201c 	xori	r11,r11,128
 80068d8:	5affe004 	addi	r11,r11,-128
 80068dc:	00381f06 	br	800495c <___svfprintf_internal_r+0xf8>
 80068e0:	00800084 	movi	r2,2
 80068e4:	d8801015 	stw	r2,64(sp)
 80068e8:	003eef06 	br	80064a8 <___svfprintf_internal_r+0x1c44>
 80068ec:	00800304 	movi	r2,12
 80068f0:	98800015 	stw	r2,0(r19)
 80068f4:	00bfffc4 	movi	r2,-1
 80068f8:	d8800515 	stw	r2,20(sp)
 80068fc:	0038db06 	br	8004c6c <___svfprintf_internal_r+0x408>

08006900 <_user_strerror>:
 8006900:	0005883a 	mov	r2,zero
 8006904:	f800283a 	ret

08006908 <___vfprintf_internal_r>:
 8006908:	deffbf04 	addi	sp,sp,-260
 800690c:	dfc04015 	stw	ra,256(sp)
 8006910:	dd803d15 	stw	r22,244(sp)
 8006914:	dcc03a15 	stw	r19,232(sp)
 8006918:	dc803915 	stw	r18,228(sp)
 800691c:	2027883a 	mov	r19,r4
 8006920:	2825883a 	mov	r18,r5
 8006924:	302d883a 	mov	r22,r6
 8006928:	d9c00615 	stw	r7,24(sp)
 800692c:	df003f15 	stw	fp,252(sp)
 8006930:	ddc03e15 	stw	r23,248(sp)
 8006934:	dd403c15 	stw	r21,240(sp)
 8006938:	dd003b15 	stw	r20,236(sp)
 800693c:	dc403815 	stw	r17,224(sp)
 8006940:	dc003715 	stw	r16,220(sp)
 8006944:	800b74c0 	call	800b74c <_localeconv_r>
 8006948:	10800017 	ldw	r2,0(r2)
 800694c:	1009883a 	mov	r4,r2
 8006950:	d8800d15 	stw	r2,52(sp)
 8006954:	80044880 	call	8004488 <strlen>
 8006958:	d8800b15 	stw	r2,44(sp)
 800695c:	98000226 	beq	r19,zero,8006968 <___vfprintf_internal_r+0x60>
 8006960:	98800e17 	ldw	r2,56(r19)
 8006964:	1001d526 	beq	r2,zero,80070bc <___vfprintf_internal_r+0x7b4>
 8006968:	9080030b 	ldhu	r2,12(r18)
 800696c:	10c8000c 	andi	r3,r2,8192
 8006970:	1800061e 	bne	r3,zero,800698c <___vfprintf_internal_r+0x84>
 8006974:	90c01917 	ldw	r3,100(r18)
 8006978:	0137ffc4 	movi	r4,-8193
 800697c:	10880014 	ori	r2,r2,8192
 8006980:	1906703a 	and	r3,r3,r4
 8006984:	9080030d 	sth	r2,12(r18)
 8006988:	90c01915 	stw	r3,100(r18)
 800698c:	10c0020c 	andi	r3,r2,8
 8006990:	1800fa26 	beq	r3,zero,8006d7c <___vfprintf_internal_r+0x474>
 8006994:	90c00417 	ldw	r3,16(r18)
 8006998:	1800f826 	beq	r3,zero,8006d7c <___vfprintf_internal_r+0x474>
 800699c:	1080068c 	andi	r2,r2,26
 80069a0:	10800298 	cmpnei	r2,r2,10
 80069a4:	1000fd26 	beq	r2,zero,8006d9c <___vfprintf_internal_r+0x494>
 80069a8:	d8802704 	addi	r2,sp,156
 80069ac:	b02f883a 	mov	r23,r22
 80069b0:	d8801a15 	stw	r2,104(sp)
 80069b4:	d8001c15 	stw	zero,112(sp)
 80069b8:	d8001b15 	stw	zero,108(sp)
 80069bc:	d8000815 	stw	zero,32(sp)
 80069c0:	d8000915 	stw	zero,36(sp)
 80069c4:	d8000a15 	stw	zero,40(sp)
 80069c8:	d8000c15 	stw	zero,48(sp)
 80069cc:	d8001015 	stw	zero,64(sp)
 80069d0:	d8000515 	stw	zero,20(sp)
 80069d4:	102d883a 	mov	r22,r2
 80069d8:	b8800007 	ldb	r2,0(r23)
 80069dc:	1000d526 	beq	r2,zero,8006d34 <___vfprintf_internal_r+0x42c>
 80069e0:	b821883a 	mov	r16,r23
 80069e4:	00000306 	br	80069f4 <___vfprintf_internal_r+0xec>
 80069e8:	80800047 	ldb	r2,1(r16)
 80069ec:	84000044 	addi	r16,r16,1
 80069f0:	10011726 	beq	r2,zero,8006e50 <___vfprintf_internal_r+0x548>
 80069f4:	10800958 	cmpnei	r2,r2,37
 80069f8:	103ffb1e 	bne	r2,zero,80069e8 <___vfprintf_internal_r+0xe0>
 80069fc:	85e3c83a 	sub	r17,r16,r23
 8006a00:	85c1151e 	bne	r16,r23,8006e58 <___vfprintf_internal_r+0x550>
 8006a04:	80800003 	ldbu	r2,0(r16)
 8006a08:	10803fcc 	andi	r2,r2,255
 8006a0c:	1080201c 	xori	r2,r2,128
 8006a10:	10bfe004 	addi	r2,r2,-128
 8006a14:	1000c726 	beq	r2,zero,8006d34 <___vfprintf_internal_r+0x42c>
 8006a18:	82c00047 	ldb	r11,1(r16)
 8006a1c:	85c00044 	addi	r23,r16,1
 8006a20:	d8001345 	stb	zero,77(sp)
 8006a24:	0009883a 	mov	r4,zero
 8006a28:	000b883a 	mov	r5,zero
 8006a2c:	023fffc4 	movi	r8,-1
 8006a30:	0021883a 	mov	r16,zero
 8006a34:	0019883a 	mov	r12,zero
 8006a38:	bdc00044 	addi	r23,r23,1
 8006a3c:	5839883a 	mov	fp,r11
 8006a40:	e0bff804 	addi	r2,fp,-32
 8006a44:	10c01668 	cmpgeui	r3,r2,89
 8006a48:	18006a1e 	bne	r3,zero,8006bf4 <___vfprintf_internal_r+0x2ec>
 8006a4c:	100490ba 	slli	r2,r2,2
 8006a50:	00c20034 	movhi	r3,2048
 8006a54:	10c7883a 	add	r3,r2,r3
 8006a58:	189a9817 	ldw	r2,27232(r3)
 8006a5c:	1000683a 	jmp	r2
 8006a60:	0800743c 	xorhi	zero,at,464
 8006a64:	08006bf4 	orhi	zero,at,431
 8006a68:	08006bf4 	orhi	zero,at,431
 8006a6c:	08007430 	cmpltui	zero,at,464
 8006a70:	08006bf4 	orhi	zero,at,431
 8006a74:	08006bf4 	orhi	zero,at,431
 8006a78:	08006bf4 	orhi	zero,at,431
 8006a7c:	08006bf4 	orhi	zero,at,431
 8006a80:	08006bf4 	orhi	zero,at,431
 8006a84:	08006bf4 	orhi	zero,at,431
 8006a88:	08007408 	cmpgei	zero,at,464
 8006a8c:	080073f8 	rdprs	zero,at,463
 8006a90:	08006bf4 	orhi	zero,at,431
 8006a94:	080073e0 	cmpeqi	zero,at,463
 8006a98:	0800739c 	xori	zero,at,462
 8006a9c:	08006bf4 	orhi	zero,at,431
 8006aa0:	08007390 	cmplti	zero,at,462
 8006aa4:	08006bc4 	addi	zero,at,431
 8006aa8:	08006bc4 	addi	zero,at,431
 8006aac:	08006bc4 	addi	zero,at,431
 8006ab0:	08006bc4 	addi	zero,at,431
 8006ab4:	08006bc4 	addi	zero,at,431
 8006ab8:	08006bc4 	addi	zero,at,431
 8006abc:	08006bc4 	addi	zero,at,431
 8006ac0:	08006bc4 	addi	zero,at,431
 8006ac4:	08006bc4 	addi	zero,at,431
 8006ac8:	08006bf4 	orhi	zero,at,431
 8006acc:	08006bf4 	orhi	zero,at,431
 8006ad0:	08006bf4 	orhi	zero,at,431
 8006ad4:	08006bf4 	orhi	zero,at,431
 8006ad8:	08006bf4 	orhi	zero,at,431
 8006adc:	08006bf4 	orhi	zero,at,431
 8006ae0:	08006bf4 	orhi	zero,at,431
 8006ae4:	08006bf4 	orhi	zero,at,431
 8006ae8:	08006bf4 	orhi	zero,at,431
 8006aec:	08006bf4 	orhi	zero,at,431
 8006af0:	08007284 	addi	zero,at,458
 8006af4:	08006eb4 	orhi	zero,at,442
 8006af8:	08006bf4 	orhi	zero,at,431
 8006afc:	08006eb4 	orhi	zero,at,442
 8006b00:	08006bf4 	orhi	zero,at,431
 8006b04:	08006bf4 	orhi	zero,at,431
 8006b08:	08006bf4 	orhi	zero,at,431
 8006b0c:	08006bf4 	orhi	zero,at,431
 8006b10:	08007468 	cmpgeui	zero,at,465
 8006b14:	08006bf4 	orhi	zero,at,431
 8006b18:	08006bf4 	orhi	zero,at,431
 8006b1c:	08006de8 	cmpgeui	zero,at,439
 8006b20:	08006bf4 	orhi	zero,at,431
 8006b24:	08006bf4 	orhi	zero,at,431
 8006b28:	08006bf4 	orhi	zero,at,431
 8006b2c:	08006bf4 	orhi	zero,at,431
 8006b30:	08006bf4 	orhi	zero,at,431
 8006b34:	08006dc0 	call	8006dc <OSCtxSw_SWITCH_PC+0x80069c>
 8006b38:	08006bf4 	orhi	zero,at,431
 8006b3c:	08006bf4 	orhi	zero,at,431
 8006b40:	0800749c 	xori	zero,at,466
 8006b44:	08006bf4 	orhi	zero,at,431
 8006b48:	08006bf4 	orhi	zero,at,431
 8006b4c:	08006bf4 	orhi	zero,at,431
 8006b50:	08006bf4 	orhi	zero,at,431
 8006b54:	08006bf4 	orhi	zero,at,431
 8006b58:	08006bf4 	orhi	zero,at,431
 8006b5c:	08006bf4 	orhi	zero,at,431
 8006b60:	08006bf4 	orhi	zero,at,431
 8006b64:	08006bf4 	orhi	zero,at,431
 8006b68:	08006bf4 	orhi	zero,at,431
 8006b6c:	08007474 	orhi	zero,at,465
 8006b70:	080070c8 	cmpgei	zero,at,451
 8006b74:	08006eb4 	orhi	zero,at,442
 8006b78:	08006eb4 	orhi	zero,at,442
 8006b7c:	08006eb4 	orhi	zero,at,442
 8006b80:	0800713c 	xorhi	zero,at,452
 8006b84:	080070c8 	cmpgei	zero,at,451
 8006b88:	08006bf4 	orhi	zero,at,431
 8006b8c:	08006bf4 	orhi	zero,at,431
 8006b90:	08007270 	cmpltui	zero,at,457
 8006b94:	08006bf4 	orhi	zero,at,431
 8006b98:	08007234 	orhi	zero,at,456
 8006b9c:	08006dec 	andhi	zero,at,439
 8006ba0:	080071f4 	orhi	zero,at,455
 8006ba4:	080071e8 	cmpgeui	zero,at,455
 8006ba8:	08006bf4 	orhi	zero,at,431
 8006bac:	08007190 	cmplti	zero,at,454
 8006bb0:	08006bf4 	orhi	zero,at,431
 8006bb4:	08006dc4 	addi	zero,at,439
 8006bb8:	08006bf4 	orhi	zero,at,431
 8006bbc:	08006bf4 	orhi	zero,at,431
 8006bc0:	08007148 	cmpgei	zero,at,453
 8006bc4:	0021883a 	mov	r16,zero
 8006bc8:	e0bff404 	addi	r2,fp,-48
 8006bcc:	bf000007 	ldb	fp,0(r23)
 8006bd0:	840002a4 	muli	r16,r16,10
 8006bd4:	bdc00044 	addi	r23,r23,1
 8006bd8:	1421883a 	add	r16,r2,r16
 8006bdc:	e0bff404 	addi	r2,fp,-48
 8006be0:	10c002b0 	cmpltui	r3,r2,10
 8006be4:	183ff91e 	bne	r3,zero,8006bcc <___vfprintf_internal_r+0x2c4>
 8006be8:	e0bff804 	addi	r2,fp,-32
 8006bec:	10c01668 	cmpgeui	r3,r2,89
 8006bf0:	183f9626 	beq	r3,zero,8006a4c <___vfprintf_internal_r+0x144>
 8006bf4:	21003fcc 	andi	r4,r4,255
 8006bf8:	20068d1e 	bne	r4,zero,8008630 <___vfprintf_internal_r+0x1d28>
 8006bfc:	e0004d26 	beq	fp,zero,8006d34 <___vfprintf_internal_r+0x42c>
 8006c00:	df001d05 	stb	fp,116(sp)
 8006c04:	d8001345 	stb	zero,77(sp)
 8006c08:	05000044 	movi	r20,1
 8006c0c:	05400044 	movi	r21,1
 8006c10:	dc401d04 	addi	r17,sp,116
 8006c14:	db000415 	stw	r12,16(sp)
 8006c18:	0011883a 	mov	r8,zero
 8006c1c:	d8000715 	stw	zero,28(sp)
 8006c20:	d8800417 	ldw	r2,16(sp)
 8006c24:	1380008c 	andi	r14,r2,2
 8006c28:	70000126 	beq	r14,zero,8006c30 <___vfprintf_internal_r+0x328>
 8006c2c:	a5000084 	addi	r20,r20,2
 8006c30:	d8800417 	ldw	r2,16(sp)
 8006c34:	d8c01c17 	ldw	r3,112(sp)
 8006c38:	1340210c 	andi	r13,r2,132
 8006c3c:	6800021e 	bne	r13,zero,8006c48 <___vfprintf_internal_r+0x340>
 8006c40:	850fc83a 	sub	r7,r16,r20
 8006c44:	01c35e16 	blt	zero,r7,80079c0 <___vfprintf_internal_r+0x10b8>
 8006c48:	d8801347 	ldb	r2,77(sp)
 8006c4c:	10000c26 	beq	r2,zero,8006c80 <___vfprintf_internal_r+0x378>
 8006c50:	d8801b17 	ldw	r2,108(sp)
 8006c54:	d9001344 	addi	r4,sp,77
 8006c58:	18c00044 	addi	r3,r3,1
 8006c5c:	10800044 	addi	r2,r2,1
 8006c60:	b1000015 	stw	r4,0(r22)
 8006c64:	01000044 	movi	r4,1
 8006c68:	d8801b15 	stw	r2,108(sp)
 8006c6c:	b1000115 	stw	r4,4(r22)
 8006c70:	d8c01c15 	stw	r3,112(sp)
 8006c74:	10800208 	cmpgei	r2,r2,8
 8006c78:	10039e1e 	bne	r2,zero,8007af4 <___vfprintf_internal_r+0x11ec>
 8006c7c:	b5800204 	addi	r22,r22,8
 8006c80:	70000c26 	beq	r14,zero,8006cb4 <___vfprintf_internal_r+0x3ac>
 8006c84:	d8801b17 	ldw	r2,108(sp)
 8006c88:	d9001384 	addi	r4,sp,78
 8006c8c:	18c00084 	addi	r3,r3,2
 8006c90:	10800044 	addi	r2,r2,1
 8006c94:	b1000015 	stw	r4,0(r22)
 8006c98:	01000084 	movi	r4,2
 8006c9c:	d8801b15 	stw	r2,108(sp)
 8006ca0:	b1000115 	stw	r4,4(r22)
 8006ca4:	d8c01c15 	stw	r3,112(sp)
 8006ca8:	10800208 	cmpgei	r2,r2,8
 8006cac:	1003851e 	bne	r2,zero,8007ac4 <___vfprintf_internal_r+0x11bc>
 8006cb0:	b5800204 	addi	r22,r22,8
 8006cb4:	6b402018 	cmpnei	r13,r13,128
 8006cb8:	68025026 	beq	r13,zero,80075fc <___vfprintf_internal_r+0xcf4>
 8006cbc:	4551c83a 	sub	r8,r8,r21
 8006cc0:	02028816 	blt	zero,r8,80076e4 <___vfprintf_internal_r+0xddc>
 8006cc4:	d8800417 	ldw	r2,16(sp)
 8006cc8:	1080400c 	andi	r2,r2,256
 8006ccc:	1002051e 	bne	r2,zero,80074e4 <___vfprintf_internal_r+0xbdc>
 8006cd0:	d8801b17 	ldw	r2,108(sp)
 8006cd4:	1d47883a 	add	r3,r3,r21
 8006cd8:	b4400015 	stw	r17,0(r22)
 8006cdc:	10800044 	addi	r2,r2,1
 8006ce0:	b5400115 	stw	r21,4(r22)
 8006ce4:	d8801b15 	stw	r2,108(sp)
 8006ce8:	d8c01c15 	stw	r3,112(sp)
 8006cec:	10800208 	cmpgei	r2,r2,8
 8006cf0:	1002ec1e 	bne	r2,zero,80078a4 <___vfprintf_internal_r+0xf9c>
 8006cf4:	b5800204 	addi	r22,r22,8
 8006cf8:	d8800417 	ldw	r2,16(sp)
 8006cfc:	1440010c 	andi	r17,r2,4
 8006d00:	88000226 	beq	r17,zero,8006d0c <___vfprintf_internal_r+0x404>
 8006d04:	8523c83a 	sub	r17,r16,r20
 8006d08:	0440bd16 	blt	zero,r17,8007000 <___vfprintf_internal_r+0x6f8>
 8006d0c:	8500010e 	bge	r16,r20,8006d14 <___vfprintf_internal_r+0x40c>
 8006d10:	a021883a 	mov	r16,r20
 8006d14:	d8800517 	ldw	r2,20(sp)
 8006d18:	1405883a 	add	r2,r2,r16
 8006d1c:	d8800515 	stw	r2,20(sp)
 8006d20:	1802b71e 	bne	r3,zero,8007800 <___vfprintf_internal_r+0xef8>
 8006d24:	b8800007 	ldb	r2,0(r23)
 8006d28:	d8001b15 	stw	zero,108(sp)
 8006d2c:	dd802704 	addi	r22,sp,156
 8006d30:	103f2b1e 	bne	r2,zero,80069e0 <___vfprintf_internal_r+0xd8>
 8006d34:	d8801c17 	ldw	r2,112(sp)
 8006d38:	1006381e 	bne	r2,zero,800861c <___vfprintf_internal_r+0x1d14>
 8006d3c:	9080030b 	ldhu	r2,12(r18)
 8006d40:	1080100c 	andi	r2,r2,64
 8006d44:	1006c71e 	bne	r2,zero,8008864 <___vfprintf_internal_r+0x1f5c>
 8006d48:	d8800517 	ldw	r2,20(sp)
 8006d4c:	dfc04017 	ldw	ra,256(sp)
 8006d50:	df003f17 	ldw	fp,252(sp)
 8006d54:	ddc03e17 	ldw	r23,248(sp)
 8006d58:	dd803d17 	ldw	r22,244(sp)
 8006d5c:	dd403c17 	ldw	r21,240(sp)
 8006d60:	dd003b17 	ldw	r20,236(sp)
 8006d64:	dcc03a17 	ldw	r19,232(sp)
 8006d68:	dc803917 	ldw	r18,228(sp)
 8006d6c:	dc403817 	ldw	r17,224(sp)
 8006d70:	dc003717 	ldw	r16,220(sp)
 8006d74:	dec04104 	addi	sp,sp,260
 8006d78:	f800283a 	ret
 8006d7c:	900b883a 	mov	r5,r18
 8006d80:	9809883a 	mov	r4,r19
 8006d84:	8008b240 	call	8008b24 <__swsetup_r>
 8006d88:	1006b61e 	bne	r2,zero,8008864 <___vfprintf_internal_r+0x1f5c>
 8006d8c:	9080030b 	ldhu	r2,12(r18)
 8006d90:	1080068c 	andi	r2,r2,26
 8006d94:	10800298 	cmpnei	r2,r2,10
 8006d98:	103f031e 	bne	r2,zero,80069a8 <___vfprintf_internal_r+0xa0>
 8006d9c:	9080038f 	ldh	r2,14(r18)
 8006da0:	103f0116 	blt	r2,zero,80069a8 <___vfprintf_internal_r+0xa0>
 8006da4:	d9c00617 	ldw	r7,24(sp)
 8006da8:	b00d883a 	mov	r6,r22
 8006dac:	900b883a 	mov	r5,r18
 8006db0:	9809883a 	mov	r4,r19
 8006db4:	8008a000 	call	8008a00 <__sbprintf>
 8006db8:	d8800515 	stw	r2,20(sp)
 8006dbc:	003fe206 	br	8006d48 <___vfprintf_internal_r+0x440>
 8006dc0:	63000414 	ori	r12,r12,16
 8006dc4:	6080080c 	andi	r2,r12,32
 8006dc8:	10008126 	beq	r2,zero,8006fd0 <___vfprintf_internal_r+0x6c8>
 8006dcc:	d8c00617 	ldw	r3,24(sp)
 8006dd0:	00800044 	movi	r2,1
 8006dd4:	1d000017 	ldw	r20,0(r3)
 8006dd8:	1d400117 	ldw	r21,4(r3)
 8006ddc:	18c00204 	addi	r3,r3,8
 8006de0:	d8c00615 	stw	r3,24(sp)
 8006de4:	00000906 	br	8006e0c <___vfprintf_internal_r+0x504>
 8006de8:	63000414 	ori	r12,r12,16
 8006dec:	6080080c 	andi	r2,r12,32
 8006df0:	10006b26 	beq	r2,zero,8006fa0 <___vfprintf_internal_r+0x698>
 8006df4:	d8c00617 	ldw	r3,24(sp)
 8006df8:	0005883a 	mov	r2,zero
 8006dfc:	1d000017 	ldw	r20,0(r3)
 8006e00:	1d400117 	ldw	r21,4(r3)
 8006e04:	18c00204 	addi	r3,r3,8
 8006e08:	d8c00615 	stw	r3,24(sp)
 8006e0c:	d8001345 	stb	zero,77(sp)
 8006e10:	40ffffe0 	cmpeqi	r3,r8,-1
 8006e14:	001b883a 	mov	r13,zero
 8006e18:	1801351e 	bne	r3,zero,80072f0 <___vfprintf_internal_r+0x9e8>
 8006e1c:	047fdfc4 	movi	r17,-129
 8006e20:	6448703a 	and	r4,r12,r17
 8006e24:	a546b03a 	or	r3,r20,r21
 8006e28:	d9000415 	stw	r4,16(sp)
 8006e2c:	1802e21e 	bne	r3,zero,80079b8 <___vfprintf_internal_r+0x10b0>
 8006e30:	40025d1e 	bne	r8,zero,80077a8 <___vfprintf_internal_r+0xea0>
 8006e34:	1003a41e 	bne	r2,zero,8007cc8 <___vfprintf_internal_r+0x13c0>
 8006e38:	6540004c 	andi	r21,r12,1
 8006e3c:	a803d226 	beq	r21,zero,8007d88 <___vfprintf_internal_r+0x1480>
 8006e40:	00800c04 	movi	r2,48
 8006e44:	d88026c5 	stb	r2,155(sp)
 8006e48:	dc4026c4 	addi	r17,sp,155
 8006e4c:	00014606 	br	8007368 <___vfprintf_internal_r+0xa60>
 8006e50:	85e3c83a 	sub	r17,r16,r23
 8006e54:	85ffb726 	beq	r16,r23,8006d34 <___vfprintf_internal_r+0x42c>
 8006e58:	d8c01c17 	ldw	r3,112(sp)
 8006e5c:	d8801b17 	ldw	r2,108(sp)
 8006e60:	b5c00015 	stw	r23,0(r22)
 8006e64:	1c47883a 	add	r3,r3,r17
 8006e68:	10800044 	addi	r2,r2,1
 8006e6c:	d8801b15 	stw	r2,108(sp)
 8006e70:	b4400115 	stw	r17,4(r22)
 8006e74:	d8c01c15 	stw	r3,112(sp)
 8006e78:	10800208 	cmpgei	r2,r2,8
 8006e7c:	1000061e 	bne	r2,zero,8006e98 <___vfprintf_internal_r+0x590>
 8006e80:	b5800204 	addi	r22,r22,8
 8006e84:	d8c00517 	ldw	r3,20(sp)
 8006e88:	80800003 	ldbu	r2,0(r16)
 8006e8c:	1c47883a 	add	r3,r3,r17
 8006e90:	d8c00515 	stw	r3,20(sp)
 8006e94:	003edc06 	br	8006a08 <___vfprintf_internal_r+0x100>
 8006e98:	d9801a04 	addi	r6,sp,104
 8006e9c:	900b883a 	mov	r5,r18
 8006ea0:	9809883a 	mov	r4,r19
 8006ea4:	800f07c0 	call	800f07c <__sprint_r>
 8006ea8:	103fa41e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8006eac:	dd802704 	addi	r22,sp,156
 8006eb0:	003ff406 	br	8006e84 <___vfprintf_internal_r+0x57c>
 8006eb4:	21003fcc 	andi	r4,r4,255
 8006eb8:	2006681e 	bne	r4,zero,800885c <___vfprintf_internal_r+0x1f54>
 8006ebc:	d8c00617 	ldw	r3,24(sp)
 8006ec0:	6080020c 	andi	r2,r12,8
 8006ec4:	19000204 	addi	r4,r3,8
 8006ec8:	d9000e15 	stw	r4,56(sp)
 8006ecc:	1003ce1e 	bne	r2,zero,8007e08 <___vfprintf_internal_r+0x1500>
 8006ed0:	d8800617 	ldw	r2,24(sp)
 8006ed4:	10c00017 	ldw	r3,0(r2)
 8006ed8:	10800117 	ldw	r2,4(r2)
 8006edc:	d8c00915 	stw	r3,36(sp)
 8006ee0:	d8800a15 	stw	r2,40(sp)
 8006ee4:	dd400a17 	ldw	r21,40(sp)
 8006ee8:	dd000917 	ldw	r20,36(sp)
 8006eec:	00a00034 	movhi	r2,32768
 8006ef0:	10bfffc4 	addi	r2,r2,-1
 8006ef4:	a8a2703a 	and	r17,r21,r2
 8006ef8:	01dffc34 	movhi	r7,32752
 8006efc:	01bfffc4 	movi	r6,-1
 8006f00:	39ffffc4 	addi	r7,r7,-1
 8006f04:	a009883a 	mov	r4,r20
 8006f08:	880b883a 	mov	r5,r17
 8006f0c:	da000615 	stw	r8,24(sp)
 8006f10:	db000415 	stw	r12,16(sp)
 8006f14:	80144780 	call	8014478 <__unorddf2>
 8006f18:	db000417 	ldw	r12,16(sp)
 8006f1c:	da000617 	ldw	r8,24(sp)
 8006f20:	10046e1e 	bne	r2,zero,80080dc <___vfprintf_internal_r+0x17d4>
 8006f24:	01dffc34 	movhi	r7,32752
 8006f28:	01bfffc4 	movi	r6,-1
 8006f2c:	39ffffc4 	addi	r7,r7,-1
 8006f30:	a009883a 	mov	r4,r20
 8006f34:	880b883a 	mov	r5,r17
 8006f38:	80133e40 	call	80133e4 <__ledf2>
 8006f3c:	db000417 	ldw	r12,16(sp)
 8006f40:	da000617 	ldw	r8,24(sp)
 8006f44:	0084650e 	bge	zero,r2,80080dc <___vfprintf_internal_r+0x17d4>
 8006f48:	000d883a 	mov	r6,zero
 8006f4c:	000f883a 	mov	r7,zero
 8006f50:	a009883a 	mov	r4,r20
 8006f54:	a80b883a 	mov	r5,r21
 8006f58:	80133e40 	call	80133e4 <__ledf2>
 8006f5c:	db000417 	ldw	r12,16(sp)
 8006f60:	10059b16 	blt	r2,zero,80085d0 <___vfprintf_internal_r+0x1cc8>
 8006f64:	db401343 	ldbu	r13,77(sp)
 8006f68:	e0801210 	cmplti	r2,fp,72
 8006f6c:	1005721e 	bne	r2,zero,8008538 <___vfprintf_internal_r+0x1c30>
 8006f70:	04420174 	movhi	r17,2053
 8006f74:	8c415404 	addi	r17,r17,1360
 8006f78:	00bfdfc4 	movi	r2,-129
 8006f7c:	6084703a 	and	r2,r12,r2
 8006f80:	d8800415 	stw	r2,16(sp)
 8006f84:	d8800e17 	ldw	r2,56(sp)
 8006f88:	050000c4 	movi	r20,3
 8006f8c:	054000c4 	movi	r21,3
 8006f90:	d8800615 	stw	r2,24(sp)
 8006f94:	0011883a 	mov	r8,zero
 8006f98:	d8000715 	stw	zero,28(sp)
 8006f9c:	0000f606 	br	8007378 <___vfprintf_internal_r+0xa70>
 8006fa0:	d9000617 	ldw	r4,24(sp)
 8006fa4:	6080040c 	andi	r2,r12,16
 8006fa8:	20c00104 	addi	r3,r4,4
 8006fac:	1003871e 	bne	r2,zero,8007dcc <___vfprintf_internal_r+0x14c4>
 8006fb0:	6080100c 	andi	r2,r12,64
 8006fb4:	10056926 	beq	r2,zero,800855c <___vfprintf_internal_r+0x1c54>
 8006fb8:	d8800617 	ldw	r2,24(sp)
 8006fbc:	002b883a 	mov	r21,zero
 8006fc0:	d8c00615 	stw	r3,24(sp)
 8006fc4:	1500000b 	ldhu	r20,0(r2)
 8006fc8:	0005883a 	mov	r2,zero
 8006fcc:	003f8f06 	br	8006e0c <___vfprintf_internal_r+0x504>
 8006fd0:	d9000617 	ldw	r4,24(sp)
 8006fd4:	6080040c 	andi	r2,r12,16
 8006fd8:	20c00104 	addi	r3,r4,4
 8006fdc:	1003801e 	bne	r2,zero,8007de0 <___vfprintf_internal_r+0x14d8>
 8006fe0:	6080100c 	andi	r2,r12,64
 8006fe4:	10056326 	beq	r2,zero,8008574 <___vfprintf_internal_r+0x1c6c>
 8006fe8:	d8800617 	ldw	r2,24(sp)
 8006fec:	002b883a 	mov	r21,zero
 8006ff0:	d8c00615 	stw	r3,24(sp)
 8006ff4:	1500000b 	ldhu	r20,0(r2)
 8006ff8:	00800044 	movi	r2,1
 8006ffc:	003f8306 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007000:	03020174 	movhi	r12,2053
 8007004:	89000450 	cmplti	r4,r17,17
 8007008:	d8801b17 	ldw	r2,108(sp)
 800700c:	63017004 	addi	r12,r12,1472
 8007010:	20001b1e 	bne	r4,zero,8007080 <___vfprintf_internal_r+0x778>
 8007014:	05400404 	movi	r21,16
 8007018:	6039883a 	mov	fp,r12
 800701c:	00000406 	br	8007030 <___vfprintf_internal_r+0x728>
 8007020:	8c7ffc04 	addi	r17,r17,-16
 8007024:	89000448 	cmpgei	r4,r17,17
 8007028:	b5800204 	addi	r22,r22,8
 800702c:	20001326 	beq	r4,zero,800707c <___vfprintf_internal_r+0x774>
 8007030:	10800044 	addi	r2,r2,1
 8007034:	18c00404 	addi	r3,r3,16
 8007038:	b7000015 	stw	fp,0(r22)
 800703c:	b5400115 	stw	r21,4(r22)
 8007040:	d8c01c15 	stw	r3,112(sp)
 8007044:	d8801b15 	stw	r2,108(sp)
 8007048:	11000208 	cmpgei	r4,r2,8
 800704c:	203ff426 	beq	r4,zero,8007020 <___vfprintf_internal_r+0x718>
 8007050:	d9801a04 	addi	r6,sp,104
 8007054:	900b883a 	mov	r5,r18
 8007058:	9809883a 	mov	r4,r19
 800705c:	800f07c0 	call	800f07c <__sprint_r>
 8007060:	103f361e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007064:	8c7ffc04 	addi	r17,r17,-16
 8007068:	89000448 	cmpgei	r4,r17,17
 800706c:	d8c01c17 	ldw	r3,112(sp)
 8007070:	d8801b17 	ldw	r2,108(sp)
 8007074:	dd802704 	addi	r22,sp,156
 8007078:	203fed1e 	bne	r4,zero,8007030 <___vfprintf_internal_r+0x728>
 800707c:	e019883a 	mov	r12,fp
 8007080:	10800044 	addi	r2,r2,1
 8007084:	1c47883a 	add	r3,r3,r17
 8007088:	d8801b15 	stw	r2,108(sp)
 800708c:	b3000015 	stw	r12,0(r22)
 8007090:	b4400115 	stw	r17,4(r22)
 8007094:	d8c01c15 	stw	r3,112(sp)
 8007098:	10800210 	cmplti	r2,r2,8
 800709c:	103f1b1e 	bne	r2,zero,8006d0c <___vfprintf_internal_r+0x404>
 80070a0:	d9801a04 	addi	r6,sp,104
 80070a4:	900b883a 	mov	r5,r18
 80070a8:	9809883a 	mov	r4,r19
 80070ac:	800f07c0 	call	800f07c <__sprint_r>
 80070b0:	103f221e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80070b4:	d8c01c17 	ldw	r3,112(sp)
 80070b8:	003f1406 	br	8006d0c <___vfprintf_internal_r+0x404>
 80070bc:	9809883a 	mov	r4,r19
 80070c0:	800abdc0 	call	800abdc <__sinit>
 80070c4:	003e2806 	br	8006968 <___vfprintf_internal_r+0x60>
 80070c8:	21003fcc 	andi	r4,r4,255
 80070cc:	2005d91e 	bne	r4,zero,8008834 <___vfprintf_internal_r+0x1f2c>
 80070d0:	6080080c 	andi	r2,r12,32
 80070d4:	10007026 	beq	r2,zero,8007298 <___vfprintf_internal_r+0x990>
 80070d8:	d8c00617 	ldw	r3,24(sp)
 80070dc:	18800117 	ldw	r2,4(r3)
 80070e0:	1d000017 	ldw	r20,0(r3)
 80070e4:	18c00204 	addi	r3,r3,8
 80070e8:	d8c00615 	stw	r3,24(sp)
 80070ec:	102b883a 	mov	r21,r2
 80070f0:	10007516 	blt	r2,zero,80072c8 <___vfprintf_internal_r+0x9c0>
 80070f4:	40bfffd8 	cmpnei	r2,r8,-1
 80070f8:	10034826 	beq	r2,zero,8007e1c <___vfprintf_internal_r+0x1514>
 80070fc:	047fdfc4 	movi	r17,-129
 8007100:	6446703a 	and	r3,r12,r17
 8007104:	a544b03a 	or	r2,r20,r21
 8007108:	d8c00415 	stw	r3,16(sp)
 800710c:	db401343 	ldbu	r13,77(sp)
 8007110:	1002ec26 	beq	r2,zero,8007cc4 <___vfprintf_internal_r+0x13bc>
 8007114:	db000417 	ldw	r12,16(sp)
 8007118:	a803421e 	bne	r21,zero,8007e24 <___vfprintf_internal_r+0x151c>
 800711c:	a08002a8 	cmpgeui	r2,r20,10
 8007120:	1003401e 	bne	r2,zero,8007e24 <___vfprintf_internal_r+0x151c>
 8007124:	a5000c04 	addi	r20,r20,48
 8007128:	dd0026c5 	stb	r20,155(sp)
 800712c:	db000415 	stw	r12,16(sp)
 8007130:	05400044 	movi	r21,1
 8007134:	dc4026c4 	addi	r17,sp,155
 8007138:	00008b06 	br	8007368 <___vfprintf_internal_r+0xa60>
 800713c:	bac00007 	ldb	r11,0(r23)
 8007140:	63001014 	ori	r12,r12,64
 8007144:	003e3c06 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007148:	21003fcc 	andi	r4,r4,255
 800714c:	2005bf1e 	bne	r4,zero,800884c <___vfprintf_internal_r+0x1f44>
 8007150:	00820174 	movhi	r2,2053
 8007154:	10815c04 	addi	r2,r2,1392
 8007158:	d8800c15 	stw	r2,48(sp)
 800715c:	6080080c 	andi	r2,r12,32
 8007160:	1000d526 	beq	r2,zero,80074b8 <___vfprintf_internal_r+0xbb0>
 8007164:	d8800617 	ldw	r2,24(sp)
 8007168:	15000017 	ldw	r20,0(r2)
 800716c:	15400117 	ldw	r21,4(r2)
 8007170:	10800204 	addi	r2,r2,8
 8007174:	d8800615 	stw	r2,24(sp)
 8007178:	6080004c 	andi	r2,r12,1
 800717c:	10000226 	beq	r2,zero,8007188 <___vfprintf_internal_r+0x880>
 8007180:	a544b03a 	or	r2,r20,r21
 8007184:	1003071e 	bne	r2,zero,8007da4 <___vfprintf_internal_r+0x149c>
 8007188:	00800084 	movi	r2,2
 800718c:	003f1f06 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007190:	d8800617 	ldw	r2,24(sp)
 8007194:	d8001345 	stb	zero,77(sp)
 8007198:	14400017 	ldw	r17,0(r2)
 800719c:	10c00104 	addi	r3,r2,4
 80071a0:	88037526 	beq	r17,zero,8007f78 <___vfprintf_internal_r+0x1670>
 80071a4:	40bfffe0 	cmpeqi	r2,r8,-1
 80071a8:	1004641e 	bne	r2,zero,800833c <___vfprintf_internal_r+0x1a34>
 80071ac:	400d883a 	mov	r6,r8
 80071b0:	000b883a 	mov	r5,zero
 80071b4:	8809883a 	mov	r4,r17
 80071b8:	d8c00715 	stw	r3,28(sp)
 80071bc:	db000615 	stw	r12,24(sp)
 80071c0:	da000415 	stw	r8,16(sp)
 80071c4:	800c11c0 	call	800c11c <memchr>
 80071c8:	da000417 	ldw	r8,16(sp)
 80071cc:	db000617 	ldw	r12,24(sp)
 80071d0:	d8c00717 	ldw	r3,28(sp)
 80071d4:	10058726 	beq	r2,zero,80087f4 <___vfprintf_internal_r+0x1eec>
 80071d8:	146bc83a 	sub	r21,r2,r17
 80071dc:	a829883a 	mov	r20,r21
 80071e0:	d8c00615 	stw	r3,24(sp)
 80071e4:	003e8b06 	br	8006c14 <___vfprintf_internal_r+0x30c>
 80071e8:	bac00007 	ldb	r11,0(r23)
 80071ec:	63000814 	ori	r12,r12,32
 80071f0:	003e1106 	br	8006a38 <___vfprintf_internal_r+0x130>
 80071f4:	d8c00617 	ldw	r3,24(sp)
 80071f8:	00800c04 	movi	r2,48
 80071fc:	d8801385 	stb	r2,78(sp)
 8007200:	00801e04 	movi	r2,120
 8007204:	01020174 	movhi	r4,2053
 8007208:	d88013c5 	stb	r2,79(sp)
 800720c:	18800104 	addi	r2,r3,4
 8007210:	d8800615 	stw	r2,24(sp)
 8007214:	20815c04 	addi	r2,r4,1392
 8007218:	d8800c15 	stw	r2,48(sp)
 800721c:	1d000017 	ldw	r20,0(r3)
 8007220:	002b883a 	mov	r21,zero
 8007224:	63000094 	ori	r12,r12,2
 8007228:	00800084 	movi	r2,2
 800722c:	07001e04 	movi	fp,120
 8007230:	003ef606 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007234:	21003fcc 	andi	r4,r4,255
 8007238:	2005861e 	bne	r4,zero,8008854 <___vfprintf_internal_r+0x1f4c>
 800723c:	d9000617 	ldw	r4,24(sp)
 8007240:	6080080c 	andi	r2,r12,32
 8007244:	20c00017 	ldw	r3,0(r4)
 8007248:	21000104 	addi	r4,r4,4
 800724c:	d9000615 	stw	r4,24(sp)
 8007250:	1002cf1e 	bne	r2,zero,8007d90 <___vfprintf_internal_r+0x1488>
 8007254:	6080040c 	andi	r2,r12,16
 8007258:	10036d1e 	bne	r2,zero,8008010 <___vfprintf_internal_r+0x1708>
 800725c:	6300100c 	andi	r12,r12,64
 8007260:	60036b26 	beq	r12,zero,8008010 <___vfprintf_internal_r+0x1708>
 8007264:	d8800517 	ldw	r2,20(sp)
 8007268:	1880000d 	sth	r2,0(r3)
 800726c:	003dda06 	br	80069d8 <___vfprintf_internal_r+0xd0>
 8007270:	bac00007 	ldb	r11,0(r23)
 8007274:	58801b18 	cmpnei	r2,r11,108
 8007278:	10032e26 	beq	r2,zero,8007f34 <___vfprintf_internal_r+0x162c>
 800727c:	63000414 	ori	r12,r12,16
 8007280:	003ded06 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007284:	21003fcc 	andi	r4,r4,255
 8007288:	20056e1e 	bne	r4,zero,8008844 <___vfprintf_internal_r+0x1f3c>
 800728c:	63000414 	ori	r12,r12,16
 8007290:	6080080c 	andi	r2,r12,32
 8007294:	103f901e 	bne	r2,zero,80070d8 <___vfprintf_internal_r+0x7d0>
 8007298:	d9000617 	ldw	r4,24(sp)
 800729c:	6080040c 	andi	r2,r12,16
 80072a0:	20c00104 	addi	r3,r4,4
 80072a4:	1002d31e 	bne	r2,zero,8007df4 <___vfprintf_internal_r+0x14ec>
 80072a8:	6080100c 	andi	r2,r12,64
 80072ac:	1004a526 	beq	r2,zero,8008544 <___vfprintf_internal_r+0x1c3c>
 80072b0:	d8800617 	ldw	r2,24(sp)
 80072b4:	d8c00615 	stw	r3,24(sp)
 80072b8:	1500000f 	ldh	r20,0(r2)
 80072bc:	a02bd7fa 	srai	r21,r20,31
 80072c0:	a805883a 	mov	r2,r21
 80072c4:	103f8b0e 	bge	r2,zero,80070f4 <___vfprintf_internal_r+0x7ec>
 80072c8:	a004c03a 	cmpne	r2,r20,zero
 80072cc:	056bc83a 	sub	r21,zero,r21
 80072d0:	a8abc83a 	sub	r21,r21,r2
 80072d4:	00800b44 	movi	r2,45
 80072d8:	d8801345 	stb	r2,77(sp)
 80072dc:	40ffffe0 	cmpeqi	r3,r8,-1
 80072e0:	0529c83a 	sub	r20,zero,r20
 80072e4:	03400b44 	movi	r13,45
 80072e8:	00800044 	movi	r2,1
 80072ec:	183ecb26 	beq	r3,zero,8006e1c <___vfprintf_internal_r+0x514>
 80072f0:	10c00060 	cmpeqi	r3,r2,1
 80072f4:	183f881e 	bne	r3,zero,8007118 <___vfprintf_internal_r+0x810>
 80072f8:	108000a0 	cmpeqi	r2,r2,2
 80072fc:	10012f1e 	bne	r2,zero,80077bc <___vfprintf_internal_r+0xeb4>
 8007300:	dc402704 	addi	r17,sp,156
 8007304:	a004d0fa 	srli	r2,r20,3
 8007308:	a806977a 	slli	r3,r21,29
 800730c:	a82ad0fa 	srli	r21,r21,3
 8007310:	a50001cc 	andi	r20,r20,7
 8007314:	a1000c04 	addi	r4,r20,48
 8007318:	18a8b03a 	or	r20,r3,r2
 800731c:	893fffc5 	stb	r4,-1(r17)
 8007320:	a544b03a 	or	r2,r20,r21
 8007324:	880b883a 	mov	r5,r17
 8007328:	8c7fffc4 	addi	r17,r17,-1
 800732c:	103ff51e 	bne	r2,zero,8007304 <___vfprintf_internal_r+0x9fc>
 8007330:	6080004c 	andi	r2,r12,1
 8007334:	10012e26 	beq	r2,zero,80077f0 <___vfprintf_internal_r+0xee8>
 8007338:	21003fcc 	andi	r4,r4,255
 800733c:	2100201c 	xori	r4,r4,128
 8007340:	213fe004 	addi	r4,r4,-128
 8007344:	20800c18 	cmpnei	r2,r4,48
 8007348:	10012926 	beq	r2,zero,80077f0 <___vfprintf_internal_r+0xee8>
 800734c:	00800c04 	movi	r2,48
 8007350:	297fff84 	addi	r5,r5,-2
 8007354:	88bfffc5 	stb	r2,-1(r17)
 8007358:	d8802704 	addi	r2,sp,156
 800735c:	116bc83a 	sub	r21,r2,r5
 8007360:	db000415 	stw	r12,16(sp)
 8007364:	2823883a 	mov	r17,r5
 8007368:	4029883a 	mov	r20,r8
 800736c:	4540010e 	bge	r8,r21,8007374 <___vfprintf_internal_r+0xa6c>
 8007370:	a829883a 	mov	r20,r21
 8007374:	d8000715 	stw	zero,28(sp)
 8007378:	6b403fcc 	andi	r13,r13,255
 800737c:	6b40201c 	xori	r13,r13,128
 8007380:	6b7fe004 	addi	r13,r13,-128
 8007384:	683e2626 	beq	r13,zero,8006c20 <___vfprintf_internal_r+0x318>
 8007388:	a5000044 	addi	r20,r20,1
 800738c:	003e2406 	br	8006c20 <___vfprintf_internal_r+0x318>
 8007390:	bac00007 	ldb	r11,0(r23)
 8007394:	63002014 	ori	r12,r12,128
 8007398:	003da706 	br	8006a38 <___vfprintf_internal_r+0x130>
 800739c:	bf000007 	ldb	fp,0(r23)
 80073a0:	b8c00044 	addi	r3,r23,1
 80073a4:	e0800aa0 	cmpeqi	r2,fp,42
 80073a8:	1005821e 	bne	r2,zero,80089b4 <___vfprintf_internal_r+0x20ac>
 80073ac:	e0bff404 	addi	r2,fp,-48
 80073b0:	118002b0 	cmpltui	r6,r2,10
 80073b4:	182f883a 	mov	r23,r3
 80073b8:	0011883a 	mov	r8,zero
 80073bc:	303da026 	beq	r6,zero,8006a40 <___vfprintf_internal_r+0x138>
 80073c0:	bf000007 	ldb	fp,0(r23)
 80073c4:	420002a4 	muli	r8,r8,10
 80073c8:	bdc00044 	addi	r23,r23,1
 80073cc:	4091883a 	add	r8,r8,r2
 80073d0:	e0bff404 	addi	r2,fp,-48
 80073d4:	10c002b0 	cmpltui	r3,r2,10
 80073d8:	183ff91e 	bne	r3,zero,80073c0 <___vfprintf_internal_r+0xab8>
 80073dc:	003d9806 	br	8006a40 <___vfprintf_internal_r+0x138>
 80073e0:	bf000003 	ldbu	fp,0(r23)
 80073e4:	e2c03fcc 	andi	r11,fp,255
 80073e8:	5ac0201c 	xori	r11,r11,128
 80073ec:	63000114 	ori	r12,r12,4
 80073f0:	5affe004 	addi	r11,r11,-128
 80073f4:	003d9006 	br	8006a38 <___vfprintf_internal_r+0x130>
 80073f8:	bac00007 	ldb	r11,0(r23)
 80073fc:	01000044 	movi	r4,1
 8007400:	01400ac4 	movi	r5,43
 8007404:	003d8c06 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007408:	d8800617 	ldw	r2,24(sp)
 800740c:	bf000003 	ldbu	fp,0(r23)
 8007410:	14000017 	ldw	r16,0(r2)
 8007414:	10800104 	addi	r2,r2,4
 8007418:	8002aa16 	blt	r16,zero,8007ec4 <___vfprintf_internal_r+0x15bc>
 800741c:	d8800615 	stw	r2,24(sp)
 8007420:	e2c03fcc 	andi	r11,fp,255
 8007424:	5ac0201c 	xori	r11,r11,128
 8007428:	5affe004 	addi	r11,r11,-128
 800742c:	003d8206 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007430:	bac00007 	ldb	r11,0(r23)
 8007434:	63000054 	ori	r12,r12,1
 8007438:	003d7f06 	br	8006a38 <___vfprintf_internal_r+0x130>
 800743c:	28803fcc 	andi	r2,r5,255
 8007440:	1080201c 	xori	r2,r2,128
 8007444:	10bfe004 	addi	r2,r2,-128
 8007448:	bf000003 	ldbu	fp,0(r23)
 800744c:	103ff41e 	bne	r2,zero,8007420 <___vfprintf_internal_r+0xb18>
 8007450:	e2c03fcc 	andi	r11,fp,255
 8007454:	5ac0201c 	xori	r11,r11,128
 8007458:	01000044 	movi	r4,1
 800745c:	01400804 	movi	r5,32
 8007460:	5affe004 	addi	r11,r11,-128
 8007464:	003d7406 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007468:	bac00007 	ldb	r11,0(r23)
 800746c:	63000214 	ori	r12,r12,8
 8007470:	003d7106 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007474:	d8c00617 	ldw	r3,24(sp)
 8007478:	d8001345 	stb	zero,77(sp)
 800747c:	05000044 	movi	r20,1
 8007480:	18800017 	ldw	r2,0(r3)
 8007484:	18c00104 	addi	r3,r3,4
 8007488:	d8c00615 	stw	r3,24(sp)
 800748c:	d8801d05 	stb	r2,116(sp)
 8007490:	05400044 	movi	r21,1
 8007494:	dc401d04 	addi	r17,sp,116
 8007498:	003dde06 	br	8006c14 <___vfprintf_internal_r+0x30c>
 800749c:	21003fcc 	andi	r4,r4,255
 80074a0:	2004e61e 	bne	r4,zero,800883c <___vfprintf_internal_r+0x1f34>
 80074a4:	00820174 	movhi	r2,2053
 80074a8:	10815704 	addi	r2,r2,1372
 80074ac:	d8800c15 	stw	r2,48(sp)
 80074b0:	6080080c 	andi	r2,r12,32
 80074b4:	103f2b1e 	bne	r2,zero,8007164 <___vfprintf_internal_r+0x85c>
 80074b8:	d9000617 	ldw	r4,24(sp)
 80074bc:	6080040c 	andi	r2,r12,16
 80074c0:	20c00104 	addi	r3,r4,4
 80074c4:	10023d1e 	bne	r2,zero,8007dbc <___vfprintf_internal_r+0x14b4>
 80074c8:	6080100c 	andi	r2,r12,64
 80074cc:	10042f26 	beq	r2,zero,800858c <___vfprintf_internal_r+0x1c84>
 80074d0:	d8800617 	ldw	r2,24(sp)
 80074d4:	002b883a 	mov	r21,zero
 80074d8:	d8c00615 	stw	r3,24(sp)
 80074dc:	1500000b 	ldhu	r20,0(r2)
 80074e0:	003f2506 	br	8007178 <___vfprintf_internal_r+0x870>
 80074e4:	e2c01990 	cmplti	r11,fp,102
 80074e8:	5800f61e 	bne	r11,zero,80078c4 <___vfprintf_internal_r+0xfbc>
 80074ec:	d9000917 	ldw	r4,36(sp)
 80074f0:	d9400a17 	ldw	r5,40(sp)
 80074f4:	000d883a 	mov	r6,zero
 80074f8:	000f883a 	mov	r7,zero
 80074fc:	d8c00e15 	stw	r3,56(sp)
 8007500:	80132740 	call	8013274 <__eqdf2>
 8007504:	d8c00e17 	ldw	r3,56(sp)
 8007508:	1001881e 	bne	r2,zero,8007b2c <___vfprintf_internal_r+0x1224>
 800750c:	d8801b17 	ldw	r2,108(sp)
 8007510:	01020174 	movhi	r4,2053
 8007514:	21016304 	addi	r4,r4,1420
 8007518:	10800044 	addi	r2,r2,1
 800751c:	18c00044 	addi	r3,r3,1
 8007520:	b1000015 	stw	r4,0(r22)
 8007524:	01000044 	movi	r4,1
 8007528:	d8801b15 	stw	r2,108(sp)
 800752c:	b1000115 	stw	r4,4(r22)
 8007530:	d8c01c15 	stw	r3,112(sp)
 8007534:	10800208 	cmpgei	r2,r2,8
 8007538:	10036e1e 	bne	r2,zero,80082f4 <___vfprintf_internal_r+0x19ec>
 800753c:	b5800204 	addi	r22,r22,8
 8007540:	d8801417 	ldw	r2,80(sp)
 8007544:	d9000817 	ldw	r4,32(sp)
 8007548:	11020b0e 	bge	r2,r4,8007d78 <___vfprintf_internal_r+0x1470>
 800754c:	d8800d17 	ldw	r2,52(sp)
 8007550:	d9000b17 	ldw	r4,44(sp)
 8007554:	b0800015 	stw	r2,0(r22)
 8007558:	d8801b17 	ldw	r2,108(sp)
 800755c:	1907883a 	add	r3,r3,r4
 8007560:	b1000115 	stw	r4,4(r22)
 8007564:	10800044 	addi	r2,r2,1
 8007568:	d8801b15 	stw	r2,108(sp)
 800756c:	d8c01c15 	stw	r3,112(sp)
 8007570:	10800208 	cmpgei	r2,r2,8
 8007574:	1002761e 	bne	r2,zero,8007f50 <___vfprintf_internal_r+0x1648>
 8007578:	b5800204 	addi	r22,r22,8
 800757c:	d8800817 	ldw	r2,32(sp)
 8007580:	157fffc4 	addi	r21,r2,-1
 8007584:	057ddc0e 	bge	zero,r21,8006cf8 <___vfprintf_internal_r+0x3f0>
 8007588:	01c20174 	movhi	r7,2053
 800758c:	a9000450 	cmplti	r4,r21,17
 8007590:	d8801b17 	ldw	r2,108(sp)
 8007594:	39c16c04 	addi	r7,r7,1456
 8007598:	2003521e 	bne	r4,zero,80082e4 <___vfprintf_internal_r+0x19dc>
 800759c:	07000404 	movi	fp,16
 80075a0:	3823883a 	mov	r17,r7
 80075a4:	00000406 	br	80075b8 <___vfprintf_internal_r+0xcb0>
 80075a8:	b5800204 	addi	r22,r22,8
 80075ac:	ad7ffc04 	addi	r21,r21,-16
 80075b0:	a9000448 	cmpgei	r4,r21,17
 80075b4:	20034a26 	beq	r4,zero,80082e0 <___vfprintf_internal_r+0x19d8>
 80075b8:	10800044 	addi	r2,r2,1
 80075bc:	18c00404 	addi	r3,r3,16
 80075c0:	b4400015 	stw	r17,0(r22)
 80075c4:	b7000115 	stw	fp,4(r22)
 80075c8:	d8c01c15 	stw	r3,112(sp)
 80075cc:	d8801b15 	stw	r2,108(sp)
 80075d0:	11000208 	cmpgei	r4,r2,8
 80075d4:	203ff426 	beq	r4,zero,80075a8 <___vfprintf_internal_r+0xca0>
 80075d8:	d9801a04 	addi	r6,sp,104
 80075dc:	900b883a 	mov	r5,r18
 80075e0:	9809883a 	mov	r4,r19
 80075e4:	800f07c0 	call	800f07c <__sprint_r>
 80075e8:	103dd41e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80075ec:	d8c01c17 	ldw	r3,112(sp)
 80075f0:	d8801b17 	ldw	r2,108(sp)
 80075f4:	dd802704 	addi	r22,sp,156
 80075f8:	003fec06 	br	80075ac <___vfprintf_internal_r+0xca4>
 80075fc:	8519c83a 	sub	r12,r16,r20
 8007600:	033dae0e 	bge	zero,r12,8006cbc <___vfprintf_internal_r+0x3b4>
 8007604:	01c20174 	movhi	r7,2053
 8007608:	61000450 	cmplti	r4,r12,17
 800760c:	d8801b17 	ldw	r2,108(sp)
 8007610:	39c16c04 	addi	r7,r7,1456
 8007614:	2000281e 	bne	r4,zero,80076b8 <___vfprintf_internal_r+0xdb0>
 8007618:	dc400e15 	stw	r17,56(sp)
 800761c:	dc000f15 	stw	r16,60(sp)
 8007620:	b009883a 	mov	r4,r22
 8007624:	03400404 	movi	r13,16
 8007628:	a02d883a 	mov	r22,r20
 800762c:	6021883a 	mov	r16,r12
 8007630:	4029883a 	mov	r20,r8
 8007634:	3823883a 	mov	r17,r7
 8007638:	00000406 	br	800764c <___vfprintf_internal_r+0xd44>
 800763c:	843ffc04 	addi	r16,r16,-16
 8007640:	81400448 	cmpgei	r5,r16,17
 8007644:	21000204 	addi	r4,r4,8
 8007648:	28001426 	beq	r5,zero,800769c <___vfprintf_internal_r+0xd94>
 800764c:	10800044 	addi	r2,r2,1
 8007650:	18c00404 	addi	r3,r3,16
 8007654:	24400015 	stw	r17,0(r4)
 8007658:	23400115 	stw	r13,4(r4)
 800765c:	d8c01c15 	stw	r3,112(sp)
 8007660:	d8801b15 	stw	r2,108(sp)
 8007664:	11400208 	cmpgei	r5,r2,8
 8007668:	283ff426 	beq	r5,zero,800763c <___vfprintf_internal_r+0xd34>
 800766c:	d9801a04 	addi	r6,sp,104
 8007670:	900b883a 	mov	r5,r18
 8007674:	9809883a 	mov	r4,r19
 8007678:	800f07c0 	call	800f07c <__sprint_r>
 800767c:	103daf1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007680:	843ffc04 	addi	r16,r16,-16
 8007684:	81400448 	cmpgei	r5,r16,17
 8007688:	d8c01c17 	ldw	r3,112(sp)
 800768c:	d8801b17 	ldw	r2,108(sp)
 8007690:	d9002704 	addi	r4,sp,156
 8007694:	03400404 	movi	r13,16
 8007698:	283fec1e 	bne	r5,zero,800764c <___vfprintf_internal_r+0xd44>
 800769c:	8019883a 	mov	r12,r16
 80076a0:	880f883a 	mov	r7,r17
 80076a4:	dc000f17 	ldw	r16,60(sp)
 80076a8:	dc400e17 	ldw	r17,56(sp)
 80076ac:	a011883a 	mov	r8,r20
 80076b0:	b029883a 	mov	r20,r22
 80076b4:	202d883a 	mov	r22,r4
 80076b8:	10800044 	addi	r2,r2,1
 80076bc:	1b07883a 	add	r3,r3,r12
 80076c0:	d8801b15 	stw	r2,108(sp)
 80076c4:	b1c00015 	stw	r7,0(r22)
 80076c8:	b3000115 	stw	r12,4(r22)
 80076cc:	d8c01c15 	stw	r3,112(sp)
 80076d0:	10800208 	cmpgei	r2,r2,8
 80076d4:	10030f1e 	bne	r2,zero,8008314 <___vfprintf_internal_r+0x1a0c>
 80076d8:	4551c83a 	sub	r8,r8,r21
 80076dc:	b5800204 	addi	r22,r22,8
 80076e0:	023d780e 	bge	zero,r8,8006cc4 <___vfprintf_internal_r+0x3bc>
 80076e4:	01c20174 	movhi	r7,2053
 80076e8:	41000450 	cmplti	r4,r8,17
 80076ec:	d8801b17 	ldw	r2,108(sp)
 80076f0:	39c16c04 	addi	r7,r7,1456
 80076f4:	2000221e 	bne	r4,zero,8007780 <___vfprintf_internal_r+0xe78>
 80076f8:	dc400e15 	stw	r17,56(sp)
 80076fc:	dc000f15 	stw	r16,60(sp)
 8007700:	03000404 	movi	r12,16
 8007704:	4021883a 	mov	r16,r8
 8007708:	3823883a 	mov	r17,r7
 800770c:	00000406 	br	8007720 <___vfprintf_internal_r+0xe18>
 8007710:	843ffc04 	addi	r16,r16,-16
 8007714:	81000448 	cmpgei	r4,r16,17
 8007718:	b5800204 	addi	r22,r22,8
 800771c:	20001426 	beq	r4,zero,8007770 <___vfprintf_internal_r+0xe68>
 8007720:	10800044 	addi	r2,r2,1
 8007724:	18c00404 	addi	r3,r3,16
 8007728:	b4400015 	stw	r17,0(r22)
 800772c:	b3000115 	stw	r12,4(r22)
 8007730:	d8c01c15 	stw	r3,112(sp)
 8007734:	d8801b15 	stw	r2,108(sp)
 8007738:	11000208 	cmpgei	r4,r2,8
 800773c:	203ff426 	beq	r4,zero,8007710 <___vfprintf_internal_r+0xe08>
 8007740:	d9801a04 	addi	r6,sp,104
 8007744:	900b883a 	mov	r5,r18
 8007748:	9809883a 	mov	r4,r19
 800774c:	800f07c0 	call	800f07c <__sprint_r>
 8007750:	103d7a1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007754:	843ffc04 	addi	r16,r16,-16
 8007758:	81000448 	cmpgei	r4,r16,17
 800775c:	d8c01c17 	ldw	r3,112(sp)
 8007760:	d8801b17 	ldw	r2,108(sp)
 8007764:	dd802704 	addi	r22,sp,156
 8007768:	03000404 	movi	r12,16
 800776c:	203fec1e 	bne	r4,zero,8007720 <___vfprintf_internal_r+0xe18>
 8007770:	8011883a 	mov	r8,r16
 8007774:	880f883a 	mov	r7,r17
 8007778:	dc000f17 	ldw	r16,60(sp)
 800777c:	dc400e17 	ldw	r17,56(sp)
 8007780:	10800044 	addi	r2,r2,1
 8007784:	1a07883a 	add	r3,r3,r8
 8007788:	d8801b15 	stw	r2,108(sp)
 800778c:	b1c00015 	stw	r7,0(r22)
 8007790:	b2000115 	stw	r8,4(r22)
 8007794:	d8c01c15 	stw	r3,112(sp)
 8007798:	10800208 	cmpgei	r2,r2,8
 800779c:	10016e1e 	bne	r2,zero,8007d58 <___vfprintf_internal_r+0x1450>
 80077a0:	b5800204 	addi	r22,r22,8
 80077a4:	003d4706 	br	8006cc4 <___vfprintf_internal_r+0x3bc>
 80077a8:	10c00060 	cmpeqi	r3,r2,1
 80077ac:	1803c81e 	bne	r3,zero,80086d0 <___vfprintf_internal_r+0x1dc8>
 80077b0:	108000a0 	cmpeqi	r2,r2,2
 80077b4:	db000417 	ldw	r12,16(sp)
 80077b8:	103ed126 	beq	r2,zero,8007300 <___vfprintf_internal_r+0x9f8>
 80077bc:	d9000c17 	ldw	r4,48(sp)
 80077c0:	dc402704 	addi	r17,sp,156
 80077c4:	a08003cc 	andi	r2,r20,15
 80077c8:	a806973a 	slli	r3,r21,28
 80077cc:	a028d13a 	srli	r20,r20,4
 80077d0:	2085883a 	add	r2,r4,r2
 80077d4:	10800003 	ldbu	r2,0(r2)
 80077d8:	a82ad13a 	srli	r21,r21,4
 80077dc:	1d28b03a 	or	r20,r3,r20
 80077e0:	88bfffc5 	stb	r2,-1(r17)
 80077e4:	a544b03a 	or	r2,r20,r21
 80077e8:	8c7fffc4 	addi	r17,r17,-1
 80077ec:	103ff51e 	bne	r2,zero,80077c4 <___vfprintf_internal_r+0xebc>
 80077f0:	d8802704 	addi	r2,sp,156
 80077f4:	146bc83a 	sub	r21,r2,r17
 80077f8:	db000415 	stw	r12,16(sp)
 80077fc:	003eda06 	br	8007368 <___vfprintf_internal_r+0xa60>
 8007800:	d9801a04 	addi	r6,sp,104
 8007804:	900b883a 	mov	r5,r18
 8007808:	9809883a 	mov	r4,r19
 800780c:	800f07c0 	call	800f07c <__sprint_r>
 8007810:	103d4426 	beq	r2,zero,8006d24 <___vfprintf_internal_r+0x41c>
 8007814:	003d4906 	br	8006d3c <___vfprintf_internal_r+0x434>
 8007818:	d9801a04 	addi	r6,sp,104
 800781c:	900b883a 	mov	r5,r18
 8007820:	9809883a 	mov	r4,r19
 8007824:	800f07c0 	call	800f07c <__sprint_r>
 8007828:	103d441e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 800782c:	d9401417 	ldw	r5,80(sp)
 8007830:	d8c01c17 	ldw	r3,112(sp)
 8007834:	dd802704 	addi	r22,sp,156
 8007838:	2802c81e 	bne	r5,zero,800835c <___vfprintf_internal_r+0x1a54>
 800783c:	d8800417 	ldw	r2,16(sp)
 8007840:	d9000817 	ldw	r4,32(sp)
 8007844:	1080004c 	andi	r2,r2,1
 8007848:	1104b03a 	or	r2,r2,r4
 800784c:	103d2a26 	beq	r2,zero,8006cf8 <___vfprintf_internal_r+0x3f0>
 8007850:	d8800d17 	ldw	r2,52(sp)
 8007854:	d9000b17 	ldw	r4,44(sp)
 8007858:	b0800015 	stw	r2,0(r22)
 800785c:	d8801b17 	ldw	r2,108(sp)
 8007860:	20c7883a 	add	r3,r4,r3
 8007864:	b1000115 	stw	r4,4(r22)
 8007868:	10800044 	addi	r2,r2,1
 800786c:	d8c01c15 	stw	r3,112(sp)
 8007870:	d8801b15 	stw	r2,108(sp)
 8007874:	11000208 	cmpgei	r4,r2,8
 8007878:	2003821e 	bne	r4,zero,8008684 <___vfprintf_internal_r+0x1d7c>
 800787c:	b5800204 	addi	r22,r22,8
 8007880:	d9000817 	ldw	r4,32(sp)
 8007884:	10800044 	addi	r2,r2,1
 8007888:	d8801b15 	stw	r2,108(sp)
 800788c:	20c7883a 	add	r3,r4,r3
 8007890:	b4400015 	stw	r17,0(r22)
 8007894:	b1000115 	stw	r4,4(r22)
 8007898:	d8c01c15 	stw	r3,112(sp)
 800789c:	10800208 	cmpgei	r2,r2,8
 80078a0:	103d1426 	beq	r2,zero,8006cf4 <___vfprintf_internal_r+0x3ec>
 80078a4:	d9801a04 	addi	r6,sp,104
 80078a8:	900b883a 	mov	r5,r18
 80078ac:	9809883a 	mov	r4,r19
 80078b0:	800f07c0 	call	800f07c <__sprint_r>
 80078b4:	103d211e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80078b8:	d8c01c17 	ldw	r3,112(sp)
 80078bc:	dd802704 	addi	r22,sp,156
 80078c0:	003d0d06 	br	8006cf8 <___vfprintf_internal_r+0x3f0>
 80078c4:	d8800817 	ldw	r2,32(sp)
 80078c8:	da001b17 	ldw	r8,108(sp)
 80078cc:	18c00044 	addi	r3,r3,1
 80078d0:	10800088 	cmpgei	r2,r2,2
 80078d4:	45400044 	addi	r21,r8,1
 80078d8:	b7000204 	addi	fp,r22,8
 80078dc:	1000ec26 	beq	r2,zero,8007c90 <___vfprintf_internal_r+0x1388>
 80078e0:	00800044 	movi	r2,1
 80078e4:	b0800115 	stw	r2,4(r22)
 80078e8:	b4400015 	stw	r17,0(r22)
 80078ec:	d8c01c15 	stw	r3,112(sp)
 80078f0:	dd401b15 	stw	r21,108(sp)
 80078f4:	a8800210 	cmplti	r2,r21,8
 80078f8:	1001d126 	beq	r2,zero,8008040 <___vfprintf_internal_r+0x1738>
 80078fc:	d8800b17 	ldw	r2,44(sp)
 8007900:	d9000d17 	ldw	r4,52(sp)
 8007904:	ad400044 	addi	r21,r21,1
 8007908:	1887883a 	add	r3,r3,r2
 800790c:	e0800115 	stw	r2,4(fp)
 8007910:	e1000015 	stw	r4,0(fp)
 8007914:	d8c01c15 	stw	r3,112(sp)
 8007918:	dd401b15 	stw	r21,108(sp)
 800791c:	a8800208 	cmpgei	r2,r21,8
 8007920:	1001be1e 	bne	r2,zero,800801c <___vfprintf_internal_r+0x1714>
 8007924:	e7000204 	addi	fp,fp,8
 8007928:	d9000917 	ldw	r4,36(sp)
 800792c:	d9400a17 	ldw	r5,40(sp)
 8007930:	aa000044 	addi	r8,r21,1
 8007934:	000d883a 	mov	r6,zero
 8007938:	000f883a 	mov	r7,zero
 800793c:	d8c00e15 	stw	r3,56(sp)
 8007940:	da000715 	stw	r8,28(sp)
 8007944:	80132740 	call	8013274 <__eqdf2>
 8007948:	d8c00817 	ldw	r3,32(sp)
 800794c:	da000717 	ldw	r8,28(sp)
 8007950:	e5800204 	addi	r22,fp,8
 8007954:	1affffc4 	addi	r11,r3,-1
 8007958:	d8c00e17 	ldw	r3,56(sp)
 800795c:	1000de26 	beq	r2,zero,8007cd8 <___vfprintf_internal_r+0x13d0>
 8007960:	8a400044 	addi	r9,r17,1
 8007964:	1ac7883a 	add	r3,r3,r11
 8007968:	da001b15 	stw	r8,108(sp)
 800796c:	e2400015 	stw	r9,0(fp)
 8007970:	e2c00115 	stw	r11,4(fp)
 8007974:	d8c01c15 	stw	r3,112(sp)
 8007978:	42000208 	cmpgei	r8,r8,8
 800797c:	4001621e 	bne	r8,zero,8007f08 <___vfprintf_internal_r+0x1600>
 8007980:	e0800404 	addi	r2,fp,16
 8007984:	aa000084 	addi	r8,r21,2
 8007988:	b039883a 	mov	fp,r22
 800798c:	102d883a 	mov	r22,r2
 8007990:	d9001017 	ldw	r4,64(sp)
 8007994:	d8801644 	addi	r2,sp,89
 8007998:	da001b15 	stw	r8,108(sp)
 800799c:	20c7883a 	add	r3,r4,r3
 80079a0:	e0800015 	stw	r2,0(fp)
 80079a4:	e1000115 	stw	r4,4(fp)
 80079a8:	d8c01c15 	stw	r3,112(sp)
 80079ac:	42000210 	cmplti	r8,r8,8
 80079b0:	403cd11e 	bne	r8,zero,8006cf8 <___vfprintf_internal_r+0x3f0>
 80079b4:	003fbb06 	br	80078a4 <___vfprintf_internal_r+0xf9c>
 80079b8:	db000417 	ldw	r12,16(sp)
 80079bc:	003e4c06 	br	80072f0 <___vfprintf_internal_r+0x9e8>
 80079c0:	03020174 	movhi	r12,2053
 80079c4:	39000450 	cmplti	r4,r7,17
 80079c8:	d8801b17 	ldw	r2,108(sp)
 80079cc:	63017004 	addi	r12,r12,1472
 80079d0:	2000321e 	bne	r4,zero,8007a9c <___vfprintf_internal_r+0x1194>
 80079d4:	dc401115 	stw	r17,68(sp)
 80079d8:	b009883a 	mov	r4,r22
 80079dc:	9023883a 	mov	r17,r18
 80079e0:	a82d883a 	mov	r22,r21
 80079e4:	ddc01215 	stw	r23,72(sp)
 80079e8:	03c00404 	movi	r15,16
 80079ec:	a02f883a 	mov	r23,r20
 80079f0:	db800e15 	stw	r14,56(sp)
 80079f4:	8029883a 	mov	r20,r16
 80079f8:	db400f15 	stw	r13,60(sp)
 80079fc:	402b883a 	mov	r21,r8
 8007a00:	3821883a 	mov	r16,r7
 8007a04:	6025883a 	mov	r18,r12
 8007a08:	00000406 	br	8007a1c <___vfprintf_internal_r+0x1114>
 8007a0c:	843ffc04 	addi	r16,r16,-16
 8007a10:	81800448 	cmpgei	r6,r16,17
 8007a14:	21000204 	addi	r4,r4,8
 8007a18:	30001426 	beq	r6,zero,8007a6c <___vfprintf_internal_r+0x1164>
 8007a1c:	10800044 	addi	r2,r2,1
 8007a20:	18c00404 	addi	r3,r3,16
 8007a24:	24800015 	stw	r18,0(r4)
 8007a28:	23c00115 	stw	r15,4(r4)
 8007a2c:	d8c01c15 	stw	r3,112(sp)
 8007a30:	d8801b15 	stw	r2,108(sp)
 8007a34:	11800208 	cmpgei	r6,r2,8
 8007a38:	303ff426 	beq	r6,zero,8007a0c <___vfprintf_internal_r+0x1104>
 8007a3c:	d9801a04 	addi	r6,sp,104
 8007a40:	880b883a 	mov	r5,r17
 8007a44:	9809883a 	mov	r4,r19
 8007a48:	800f07c0 	call	800f07c <__sprint_r>
 8007a4c:	1001a11e 	bne	r2,zero,80080d4 <___vfprintf_internal_r+0x17cc>
 8007a50:	843ffc04 	addi	r16,r16,-16
 8007a54:	81800448 	cmpgei	r6,r16,17
 8007a58:	d8c01c17 	ldw	r3,112(sp)
 8007a5c:	d8801b17 	ldw	r2,108(sp)
 8007a60:	d9002704 	addi	r4,sp,156
 8007a64:	03c00404 	movi	r15,16
 8007a68:	303fec1e 	bne	r6,zero,8007a1c <___vfprintf_internal_r+0x1114>
 8007a6c:	800f883a 	mov	r7,r16
 8007a70:	9019883a 	mov	r12,r18
 8007a74:	a021883a 	mov	r16,r20
 8007a78:	8825883a 	mov	r18,r17
 8007a7c:	b829883a 	mov	r20,r23
 8007a80:	db800e17 	ldw	r14,56(sp)
 8007a84:	db400f17 	ldw	r13,60(sp)
 8007a88:	ddc01217 	ldw	r23,72(sp)
 8007a8c:	dc401117 	ldw	r17,68(sp)
 8007a90:	a811883a 	mov	r8,r21
 8007a94:	b02b883a 	mov	r21,r22
 8007a98:	202d883a 	mov	r22,r4
 8007a9c:	10800044 	addi	r2,r2,1
 8007aa0:	19c7883a 	add	r3,r3,r7
 8007aa4:	d8801b15 	stw	r2,108(sp)
 8007aa8:	b3000015 	stw	r12,0(r22)
 8007aac:	b1c00115 	stw	r7,4(r22)
 8007ab0:	d8c01c15 	stw	r3,112(sp)
 8007ab4:	10800208 	cmpgei	r2,r2,8
 8007ab8:	1001781e 	bne	r2,zero,800809c <___vfprintf_internal_r+0x1794>
 8007abc:	b5800204 	addi	r22,r22,8
 8007ac0:	003c6106 	br	8006c48 <___vfprintf_internal_r+0x340>
 8007ac4:	d9801a04 	addi	r6,sp,104
 8007ac8:	900b883a 	mov	r5,r18
 8007acc:	9809883a 	mov	r4,r19
 8007ad0:	da000f15 	stw	r8,60(sp)
 8007ad4:	db400e15 	stw	r13,56(sp)
 8007ad8:	800f07c0 	call	800f07c <__sprint_r>
 8007adc:	103c971e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007ae0:	d8c01c17 	ldw	r3,112(sp)
 8007ae4:	da000f17 	ldw	r8,60(sp)
 8007ae8:	db400e17 	ldw	r13,56(sp)
 8007aec:	dd802704 	addi	r22,sp,156
 8007af0:	003c7006 	br	8006cb4 <___vfprintf_internal_r+0x3ac>
 8007af4:	d9801a04 	addi	r6,sp,104
 8007af8:	900b883a 	mov	r5,r18
 8007afc:	9809883a 	mov	r4,r19
 8007b00:	da001115 	stw	r8,68(sp)
 8007b04:	db400f15 	stw	r13,60(sp)
 8007b08:	db800e15 	stw	r14,56(sp)
 8007b0c:	800f07c0 	call	800f07c <__sprint_r>
 8007b10:	103c8a1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007b14:	d8c01c17 	ldw	r3,112(sp)
 8007b18:	da001117 	ldw	r8,68(sp)
 8007b1c:	db400f17 	ldw	r13,60(sp)
 8007b20:	db800e17 	ldw	r14,56(sp)
 8007b24:	dd802704 	addi	r22,sp,156
 8007b28:	003c5506 	br	8006c80 <___vfprintf_internal_r+0x378>
 8007b2c:	d9401417 	ldw	r5,80(sp)
 8007b30:	01414c0e 	bge	zero,r5,8008064 <___vfprintf_internal_r+0x175c>
 8007b34:	d8800717 	ldw	r2,28(sp)
 8007b38:	d9000817 	ldw	r4,32(sp)
 8007b3c:	102b883a 	mov	r21,r2
 8007b40:	2080e316 	blt	r4,r2,8007ed0 <___vfprintf_internal_r+0x15c8>
 8007b44:	05400a0e 	bge	zero,r21,8007b70 <___vfprintf_internal_r+0x1268>
 8007b48:	d8801b17 	ldw	r2,108(sp)
 8007b4c:	1d47883a 	add	r3,r3,r21
 8007b50:	b4400015 	stw	r17,0(r22)
 8007b54:	10800044 	addi	r2,r2,1
 8007b58:	d8801b15 	stw	r2,108(sp)
 8007b5c:	b5400115 	stw	r21,4(r22)
 8007b60:	d8c01c15 	stw	r3,112(sp)
 8007b64:	10800208 	cmpgei	r2,r2,8
 8007b68:	10030c1e 	bne	r2,zero,800879c <___vfprintf_internal_r+0x1e94>
 8007b6c:	b5800204 	addi	r22,r22,8
 8007b70:	a800ff16 	blt	r21,zero,8007f70 <___vfprintf_internal_r+0x1668>
 8007b74:	d8800717 	ldw	r2,28(sp)
 8007b78:	156bc83a 	sub	r21,r2,r21
 8007b7c:	05410616 	blt	zero,r21,8007f98 <___vfprintf_internal_r+0x1690>
 8007b80:	dd401417 	ldw	r21,80(sp)
 8007b84:	d8800817 	ldw	r2,32(sp)
 8007b88:	a880d40e 	bge	r21,r2,8007edc <___vfprintf_internal_r+0x15d4>
 8007b8c:	d8800d17 	ldw	r2,52(sp)
 8007b90:	d9000b17 	ldw	r4,44(sp)
 8007b94:	b0800015 	stw	r2,0(r22)
 8007b98:	d8801b17 	ldw	r2,108(sp)
 8007b9c:	1907883a 	add	r3,r3,r4
 8007ba0:	b1000115 	stw	r4,4(r22)
 8007ba4:	10800044 	addi	r2,r2,1
 8007ba8:	d8801b15 	stw	r2,108(sp)
 8007bac:	d8c01c15 	stw	r3,112(sp)
 8007bb0:	10800208 	cmpgei	r2,r2,8
 8007bb4:	10028e1e 	bne	r2,zero,80085f0 <___vfprintf_internal_r+0x1ce8>
 8007bb8:	b5800204 	addi	r22,r22,8
 8007bbc:	d9000817 	ldw	r4,32(sp)
 8007bc0:	d9400717 	ldw	r5,28(sp)
 8007bc4:	2545c83a 	sub	r2,r4,r21
 8007bc8:	2149c83a 	sub	r4,r4,r5
 8007bcc:	102b883a 	mov	r21,r2
 8007bd0:	2080010e 	bge	r4,r2,8007bd8 <___vfprintf_internal_r+0x12d0>
 8007bd4:	202b883a 	mov	r21,r4
 8007bd8:	05400c0e 	bge	zero,r21,8007c0c <___vfprintf_internal_r+0x1304>
 8007bdc:	d9000717 	ldw	r4,28(sp)
 8007be0:	1d47883a 	add	r3,r3,r21
 8007be4:	b5400115 	stw	r21,4(r22)
 8007be8:	8913883a 	add	r9,r17,r4
 8007bec:	d9001b17 	ldw	r4,108(sp)
 8007bf0:	b2400015 	stw	r9,0(r22)
 8007bf4:	d8c01c15 	stw	r3,112(sp)
 8007bf8:	21000044 	addi	r4,r4,1
 8007bfc:	d9001b15 	stw	r4,108(sp)
 8007c00:	21000208 	cmpgei	r4,r4,8
 8007c04:	2002f01e 	bne	r4,zero,80087c8 <___vfprintf_internal_r+0x1ec0>
 8007c08:	b5800204 	addi	r22,r22,8
 8007c0c:	a800010e 	bge	r21,zero,8007c14 <___vfprintf_internal_r+0x130c>
 8007c10:	002b883a 	mov	r21,zero
 8007c14:	156bc83a 	sub	r21,r2,r21
 8007c18:	057c370e 	bge	zero,r21,8006cf8 <___vfprintf_internal_r+0x3f0>
 8007c1c:	01c20174 	movhi	r7,2053
 8007c20:	a9000450 	cmplti	r4,r21,17
 8007c24:	d8801b17 	ldw	r2,108(sp)
 8007c28:	39c16c04 	addi	r7,r7,1456
 8007c2c:	2001ad1e 	bne	r4,zero,80082e4 <___vfprintf_internal_r+0x19dc>
 8007c30:	07000404 	movi	fp,16
 8007c34:	3823883a 	mov	r17,r7
 8007c38:	00000406 	br	8007c4c <___vfprintf_internal_r+0x1344>
 8007c3c:	b5800204 	addi	r22,r22,8
 8007c40:	ad7ffc04 	addi	r21,r21,-16
 8007c44:	a9000448 	cmpgei	r4,r21,17
 8007c48:	2001a526 	beq	r4,zero,80082e0 <___vfprintf_internal_r+0x19d8>
 8007c4c:	10800044 	addi	r2,r2,1
 8007c50:	18c00404 	addi	r3,r3,16
 8007c54:	b4400015 	stw	r17,0(r22)
 8007c58:	b7000115 	stw	fp,4(r22)
 8007c5c:	d8c01c15 	stw	r3,112(sp)
 8007c60:	d8801b15 	stw	r2,108(sp)
 8007c64:	11000208 	cmpgei	r4,r2,8
 8007c68:	203ff426 	beq	r4,zero,8007c3c <___vfprintf_internal_r+0x1334>
 8007c6c:	d9801a04 	addi	r6,sp,104
 8007c70:	900b883a 	mov	r5,r18
 8007c74:	9809883a 	mov	r4,r19
 8007c78:	800f07c0 	call	800f07c <__sprint_r>
 8007c7c:	103c2f1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007c80:	d8c01c17 	ldw	r3,112(sp)
 8007c84:	d8801b17 	ldw	r2,108(sp)
 8007c88:	dd802704 	addi	r22,sp,156
 8007c8c:	003fec06 	br	8007c40 <___vfprintf_internal_r+0x1338>
 8007c90:	d8800417 	ldw	r2,16(sp)
 8007c94:	1080004c 	andi	r2,r2,1
 8007c98:	103f111e 	bne	r2,zero,80078e0 <___vfprintf_internal_r+0xfd8>
 8007c9c:	00800044 	movi	r2,1
 8007ca0:	dd401b15 	stw	r21,108(sp)
 8007ca4:	b4400015 	stw	r17,0(r22)
 8007ca8:	b0800115 	stw	r2,4(r22)
 8007cac:	d8c01c15 	stw	r3,112(sp)
 8007cb0:	ad400208 	cmpgei	r21,r21,8
 8007cb4:	a800941e 	bne	r21,zero,8007f08 <___vfprintf_internal_r+0x1600>
 8007cb8:	42000084 	addi	r8,r8,2
 8007cbc:	b5800404 	addi	r22,r22,16
 8007cc0:	003f3306 	br	8007990 <___vfprintf_internal_r+0x1088>
 8007cc4:	4002821e 	bne	r8,zero,80086d0 <___vfprintf_internal_r+0x1dc8>
 8007cc8:	0011883a 	mov	r8,zero
 8007ccc:	002b883a 	mov	r21,zero
 8007cd0:	dc402704 	addi	r17,sp,156
 8007cd4:	003da406 	br	8007368 <___vfprintf_internal_r+0xa60>
 8007cd8:	02ff2d0e 	bge	zero,r11,8007990 <___vfprintf_internal_r+0x1088>
 8007cdc:	58800450 	cmplti	r2,r11,17
 8007ce0:	01c20174 	movhi	r7,2053
 8007ce4:	1003261e 	bne	r2,zero,8008980 <___vfprintf_internal_r+0x2078>
 8007ce8:	39c16c04 	addi	r7,r7,1456
 8007cec:	dc000715 	stw	r16,28(sp)
 8007cf0:	05800404 	movi	r22,16
 8007cf4:	5823883a 	mov	r17,r11
 8007cf8:	3821883a 	mov	r16,r7
 8007cfc:	402b883a 	mov	r21,r8
 8007d00:	00000506 	br	8007d18 <___vfprintf_internal_r+0x1410>
 8007d04:	e7000204 	addi	fp,fp,8
 8007d08:	8c7ffc04 	addi	r17,r17,-16
 8007d0c:	88800448 	cmpgei	r2,r17,17
 8007d10:	1001be26 	beq	r2,zero,800840c <___vfprintf_internal_r+0x1b04>
 8007d14:	ad400044 	addi	r21,r21,1
 8007d18:	18c00404 	addi	r3,r3,16
 8007d1c:	e4000015 	stw	r16,0(fp)
 8007d20:	e5800115 	stw	r22,4(fp)
 8007d24:	d8c01c15 	stw	r3,112(sp)
 8007d28:	dd401b15 	stw	r21,108(sp)
 8007d2c:	a8800208 	cmpgei	r2,r21,8
 8007d30:	103ff426 	beq	r2,zero,8007d04 <___vfprintf_internal_r+0x13fc>
 8007d34:	d9801a04 	addi	r6,sp,104
 8007d38:	900b883a 	mov	r5,r18
 8007d3c:	9809883a 	mov	r4,r19
 8007d40:	800f07c0 	call	800f07c <__sprint_r>
 8007d44:	103bfd1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007d48:	dd401b17 	ldw	r21,108(sp)
 8007d4c:	d8c01c17 	ldw	r3,112(sp)
 8007d50:	df002704 	addi	fp,sp,156
 8007d54:	003fec06 	br	8007d08 <___vfprintf_internal_r+0x1400>
 8007d58:	d9801a04 	addi	r6,sp,104
 8007d5c:	900b883a 	mov	r5,r18
 8007d60:	9809883a 	mov	r4,r19
 8007d64:	800f07c0 	call	800f07c <__sprint_r>
 8007d68:	103bf41e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007d6c:	d8c01c17 	ldw	r3,112(sp)
 8007d70:	dd802704 	addi	r22,sp,156
 8007d74:	003bd306 	br	8006cc4 <___vfprintf_internal_r+0x3bc>
 8007d78:	d8800417 	ldw	r2,16(sp)
 8007d7c:	1080004c 	andi	r2,r2,1
 8007d80:	103bdd26 	beq	r2,zero,8006cf8 <___vfprintf_internal_r+0x3f0>
 8007d84:	003df106 	br	800754c <___vfprintf_internal_r+0xc44>
 8007d88:	dc402704 	addi	r17,sp,156
 8007d8c:	003d7606 	br	8007368 <___vfprintf_internal_r+0xa60>
 8007d90:	d9000517 	ldw	r4,20(sp)
 8007d94:	2005d7fa 	srai	r2,r4,31
 8007d98:	19000015 	stw	r4,0(r3)
 8007d9c:	18800115 	stw	r2,4(r3)
 8007da0:	003b0d06 	br	80069d8 <___vfprintf_internal_r+0xd0>
 8007da4:	00800c04 	movi	r2,48
 8007da8:	d8801385 	stb	r2,78(sp)
 8007dac:	df0013c5 	stb	fp,79(sp)
 8007db0:	63000094 	ori	r12,r12,2
 8007db4:	00800084 	movi	r2,2
 8007db8:	003c1406 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007dbc:	25000017 	ldw	r20,0(r4)
 8007dc0:	002b883a 	mov	r21,zero
 8007dc4:	d8c00615 	stw	r3,24(sp)
 8007dc8:	003ceb06 	br	8007178 <___vfprintf_internal_r+0x870>
 8007dcc:	25000017 	ldw	r20,0(r4)
 8007dd0:	002b883a 	mov	r21,zero
 8007dd4:	d8c00615 	stw	r3,24(sp)
 8007dd8:	0005883a 	mov	r2,zero
 8007ddc:	003c0b06 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007de0:	25000017 	ldw	r20,0(r4)
 8007de4:	002b883a 	mov	r21,zero
 8007de8:	d8c00615 	stw	r3,24(sp)
 8007dec:	00800044 	movi	r2,1
 8007df0:	003c0606 	br	8006e0c <___vfprintf_internal_r+0x504>
 8007df4:	25000017 	ldw	r20,0(r4)
 8007df8:	d8c00615 	stw	r3,24(sp)
 8007dfc:	a02bd7fa 	srai	r21,r20,31
 8007e00:	a805883a 	mov	r2,r21
 8007e04:	003cba06 	br	80070f0 <___vfprintf_internal_r+0x7e8>
 8007e08:	18800017 	ldw	r2,0(r3)
 8007e0c:	d8800915 	stw	r2,36(sp)
 8007e10:	18800117 	ldw	r2,4(r3)
 8007e14:	d8800a15 	stw	r2,40(sp)
 8007e18:	003c3206 	br	8006ee4 <___vfprintf_internal_r+0x5dc>
 8007e1c:	db401343 	ldbu	r13,77(sp)
 8007e20:	a83cbe26 	beq	r21,zero,800711c <___vfprintf_internal_r+0x814>
 8007e24:	dc402704 	addi	r17,sp,156
 8007e28:	a805883a 	mov	r2,r21
 8007e2c:	dc000715 	stw	r16,28(sp)
 8007e30:	902b883a 	mov	r21,r18
 8007e34:	8821883a 	mov	r16,r17
 8007e38:	db000415 	stw	r12,16(sp)
 8007e3c:	a023883a 	mov	r17,r20
 8007e40:	da000e15 	stw	r8,56(sp)
 8007e44:	9829883a 	mov	r20,r19
 8007e48:	1025883a 	mov	r18,r2
 8007e4c:	6827883a 	mov	r19,r13
 8007e50:	8809883a 	mov	r4,r17
 8007e54:	900b883a 	mov	r5,r18
 8007e58:	01800284 	movi	r6,10
 8007e5c:	000f883a 	mov	r7,zero
 8007e60:	80119b40 	call	80119b4 <__umoddi3>
 8007e64:	10800c04 	addi	r2,r2,48
 8007e68:	8809883a 	mov	r4,r17
 8007e6c:	900b883a 	mov	r5,r18
 8007e70:	01800284 	movi	r6,10
 8007e74:	000f883a 	mov	r7,zero
 8007e78:	80bfffc5 	stb	r2,-1(r16)
 8007e7c:	80114240 	call	8011424 <__udivdi3>
 8007e80:	900d883a 	mov	r6,r18
 8007e84:	880f883a 	mov	r7,r17
 8007e88:	843fffc4 	addi	r16,r16,-1
 8007e8c:	1023883a 	mov	r17,r2
 8007e90:	1825883a 	mov	r18,r3
 8007e94:	303fee1e 	bne	r6,zero,8007e50 <___vfprintf_internal_r+0x1548>
 8007e98:	39c002a8 	cmpgeui	r7,r7,10
 8007e9c:	383fec1e 	bne	r7,zero,8007e50 <___vfprintf_internal_r+0x1548>
 8007ea0:	8023883a 	mov	r17,r16
 8007ea4:	d8802704 	addi	r2,sp,156
 8007ea8:	981b883a 	mov	r13,r19
 8007eac:	a825883a 	mov	r18,r21
 8007eb0:	dc000717 	ldw	r16,28(sp)
 8007eb4:	da000e17 	ldw	r8,56(sp)
 8007eb8:	a027883a 	mov	r19,r20
 8007ebc:	146bc83a 	sub	r21,r2,r17
 8007ec0:	003d2906 	br	8007368 <___vfprintf_internal_r+0xa60>
 8007ec4:	0421c83a 	sub	r16,zero,r16
 8007ec8:	d8800615 	stw	r2,24(sp)
 8007ecc:	003d4506 	br	80073e4 <___vfprintf_internal_r+0xadc>
 8007ed0:	202b883a 	mov	r21,r4
 8007ed4:	057f1c16 	blt	zero,r21,8007b48 <___vfprintf_internal_r+0x1240>
 8007ed8:	003f2506 	br	8007b70 <___vfprintf_internal_r+0x1268>
 8007edc:	d8800417 	ldw	r2,16(sp)
 8007ee0:	1080004c 	andi	r2,r2,1
 8007ee4:	103f291e 	bne	r2,zero,8007b8c <___vfprintf_internal_r+0x1284>
 8007ee8:	d9000817 	ldw	r4,32(sp)
 8007eec:	d9400717 	ldw	r5,28(sp)
 8007ef0:	2545c83a 	sub	r2,r4,r21
 8007ef4:	2179c83a 	sub	fp,r4,r5
 8007ef8:	102b883a 	mov	r21,r2
 8007efc:	e0bf430e 	bge	fp,r2,8007c0c <___vfprintf_internal_r+0x1304>
 8007f00:	e02b883a 	mov	r21,fp
 8007f04:	003f4106 	br	8007c0c <___vfprintf_internal_r+0x1304>
 8007f08:	d9801a04 	addi	r6,sp,104
 8007f0c:	900b883a 	mov	r5,r18
 8007f10:	9809883a 	mov	r4,r19
 8007f14:	800f07c0 	call	800f07c <__sprint_r>
 8007f18:	103b881e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007f1c:	da001b17 	ldw	r8,108(sp)
 8007f20:	d8c01c17 	ldw	r3,112(sp)
 8007f24:	dd802904 	addi	r22,sp,164
 8007f28:	42000044 	addi	r8,r8,1
 8007f2c:	df002704 	addi	fp,sp,156
 8007f30:	003e9706 	br	8007990 <___vfprintf_internal_r+0x1088>
 8007f34:	bf000043 	ldbu	fp,1(r23)
 8007f38:	63000814 	ori	r12,r12,32
 8007f3c:	bdc00044 	addi	r23,r23,1
 8007f40:	e2c03fcc 	andi	r11,fp,255
 8007f44:	5ac0201c 	xori	r11,r11,128
 8007f48:	5affe004 	addi	r11,r11,-128
 8007f4c:	003aba06 	br	8006a38 <___vfprintf_internal_r+0x130>
 8007f50:	d9801a04 	addi	r6,sp,104
 8007f54:	900b883a 	mov	r5,r18
 8007f58:	9809883a 	mov	r4,r19
 8007f5c:	800f07c0 	call	800f07c <__sprint_r>
 8007f60:	103b761e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8007f64:	d8c01c17 	ldw	r3,112(sp)
 8007f68:	dd802704 	addi	r22,sp,156
 8007f6c:	003d8306 	br	800757c <___vfprintf_internal_r+0xc74>
 8007f70:	002b883a 	mov	r21,zero
 8007f74:	003eff06 	br	8007b74 <___vfprintf_internal_r+0x126c>
 8007f78:	408001f0 	cmpltui	r2,r8,7
 8007f7c:	402b883a 	mov	r21,r8
 8007f80:	1001a426 	beq	r2,zero,8008614 <___vfprintf_internal_r+0x1d0c>
 8007f84:	04420174 	movhi	r17,2053
 8007f88:	a829883a 	mov	r20,r21
 8007f8c:	d8c00615 	stw	r3,24(sp)
 8007f90:	8c416104 	addi	r17,r17,1412
 8007f94:	003b1f06 	br	8006c14 <___vfprintf_internal_r+0x30c>
 8007f98:	01c20174 	movhi	r7,2053
 8007f9c:	a9000450 	cmplti	r4,r21,17
 8007fa0:	d8801b17 	ldw	r2,108(sp)
 8007fa4:	39c16c04 	addi	r7,r7,1456
 8007fa8:	20017f1e 	bne	r4,zero,80085a8 <___vfprintf_internal_r+0x1ca0>
 8007fac:	dc000e15 	stw	r16,56(sp)
 8007fb0:	07000404 	movi	fp,16
 8007fb4:	3821883a 	mov	r16,r7
 8007fb8:	00000406 	br	8007fcc <___vfprintf_internal_r+0x16c4>
 8007fbc:	b5800204 	addi	r22,r22,8
 8007fc0:	ad7ffc04 	addi	r21,r21,-16
 8007fc4:	a9000448 	cmpgei	r4,r21,17
 8007fc8:	20017526 	beq	r4,zero,80085a0 <___vfprintf_internal_r+0x1c98>
 8007fcc:	10800044 	addi	r2,r2,1
 8007fd0:	18c00404 	addi	r3,r3,16
 8007fd4:	b4000015 	stw	r16,0(r22)
 8007fd8:	b7000115 	stw	fp,4(r22)
 8007fdc:	d8c01c15 	stw	r3,112(sp)
 8007fe0:	d8801b15 	stw	r2,108(sp)
 8007fe4:	11000208 	cmpgei	r4,r2,8
 8007fe8:	203ff426 	beq	r4,zero,8007fbc <___vfprintf_internal_r+0x16b4>
 8007fec:	d9801a04 	addi	r6,sp,104
 8007ff0:	900b883a 	mov	r5,r18
 8007ff4:	9809883a 	mov	r4,r19
 8007ff8:	800f07c0 	call	800f07c <__sprint_r>
 8007ffc:	103b4f1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008000:	d8c01c17 	ldw	r3,112(sp)
 8008004:	d8801b17 	ldw	r2,108(sp)
 8008008:	dd802704 	addi	r22,sp,156
 800800c:	003fec06 	br	8007fc0 <___vfprintf_internal_r+0x16b8>
 8008010:	d8800517 	ldw	r2,20(sp)
 8008014:	18800015 	stw	r2,0(r3)
 8008018:	003a6f06 	br	80069d8 <___vfprintf_internal_r+0xd0>
 800801c:	d9801a04 	addi	r6,sp,104
 8008020:	900b883a 	mov	r5,r18
 8008024:	9809883a 	mov	r4,r19
 8008028:	800f07c0 	call	800f07c <__sprint_r>
 800802c:	103b431e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008030:	d8c01c17 	ldw	r3,112(sp)
 8008034:	dd401b17 	ldw	r21,108(sp)
 8008038:	df002704 	addi	fp,sp,156
 800803c:	003e3a06 	br	8007928 <___vfprintf_internal_r+0x1020>
 8008040:	d9801a04 	addi	r6,sp,104
 8008044:	900b883a 	mov	r5,r18
 8008048:	9809883a 	mov	r4,r19
 800804c:	800f07c0 	call	800f07c <__sprint_r>
 8008050:	103b3a1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008054:	d8c01c17 	ldw	r3,112(sp)
 8008058:	dd401b17 	ldw	r21,108(sp)
 800805c:	df002704 	addi	fp,sp,156
 8008060:	003e2606 	br	80078fc <___vfprintf_internal_r+0xff4>
 8008064:	d8801b17 	ldw	r2,108(sp)
 8008068:	01020174 	movhi	r4,2053
 800806c:	21016304 	addi	r4,r4,1420
 8008070:	10800044 	addi	r2,r2,1
 8008074:	18c00044 	addi	r3,r3,1
 8008078:	b1000015 	stw	r4,0(r22)
 800807c:	01000044 	movi	r4,1
 8008080:	d8801b15 	stw	r2,108(sp)
 8008084:	b1000115 	stw	r4,4(r22)
 8008088:	d8c01c15 	stw	r3,112(sp)
 800808c:	10800208 	cmpgei	r2,r2,8
 8008090:	103de11e 	bne	r2,zero,8007818 <___vfprintf_internal_r+0xf10>
 8008094:	b5800204 	addi	r22,r22,8
 8008098:	003de706 	br	8007838 <___vfprintf_internal_r+0xf30>
 800809c:	d9801a04 	addi	r6,sp,104
 80080a0:	900b883a 	mov	r5,r18
 80080a4:	9809883a 	mov	r4,r19
 80080a8:	da001115 	stw	r8,68(sp)
 80080ac:	db400f15 	stw	r13,60(sp)
 80080b0:	db800e15 	stw	r14,56(sp)
 80080b4:	800f07c0 	call	800f07c <__sprint_r>
 80080b8:	103b201e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80080bc:	d8c01c17 	ldw	r3,112(sp)
 80080c0:	da001117 	ldw	r8,68(sp)
 80080c4:	db400f17 	ldw	r13,60(sp)
 80080c8:	db800e17 	ldw	r14,56(sp)
 80080cc:	dd802704 	addi	r22,sp,156
 80080d0:	003add06 	br	8006c48 <___vfprintf_internal_r+0x340>
 80080d4:	8825883a 	mov	r18,r17
 80080d8:	003b1806 	br	8006d3c <___vfprintf_internal_r+0x434>
 80080dc:	d9000917 	ldw	r4,36(sp)
 80080e0:	d9400a17 	ldw	r5,40(sp)
 80080e4:	da000615 	stw	r8,24(sp)
 80080e8:	200d883a 	mov	r6,r4
 80080ec:	280f883a 	mov	r7,r5
 80080f0:	db000415 	stw	r12,16(sp)
 80080f4:	80144780 	call	8014478 <__unorddf2>
 80080f8:	db000417 	ldw	r12,16(sp)
 80080fc:	da000617 	ldw	r8,24(sp)
 8008100:	1002091e 	bne	r2,zero,8008928 <___vfprintf_internal_r+0x2020>
 8008104:	057ff7c4 	movi	r21,-33
 8008108:	40bfffe0 	cmpeqi	r2,r8,-1
 800810c:	e56a703a 	and	r21,fp,r21
 8008110:	1001ab1e 	bne	r2,zero,80087c0 <___vfprintf_internal_r+0x1eb8>
 8008114:	a88011d8 	cmpnei	r2,r21,71
 8008118:	10015726 	beq	r2,zero,8008678 <___vfprintf_internal_r+0x1d70>
 800811c:	60804014 	ori	r2,r12,256
 8008120:	d8800415 	stw	r2,16(sp)
 8008124:	d8800a17 	ldw	r2,40(sp)
 8008128:	10012d16 	blt	r2,zero,80085e0 <___vfprintf_internal_r+0x1cd8>
 800812c:	dd000a17 	ldw	r20,40(sp)
 8008130:	d8000605 	stb	zero,24(sp)
 8008134:	e08019a0 	cmpeqi	r2,fp,102
 8008138:	d8800f15 	stw	r2,60(sp)
 800813c:	1000c31e 	bne	r2,zero,800844c <___vfprintf_internal_r+0x1b44>
 8008140:	e08011a0 	cmpeqi	r2,fp,70
 8008144:	1000c11e 	bne	r2,zero,800844c <___vfprintf_internal_r+0x1b44>
 8008148:	a8801158 	cmpnei	r2,r21,69
 800814c:	10016226 	beq	r2,zero,80086d8 <___vfprintf_internal_r+0x1dd0>
 8008150:	d8801804 	addi	r2,sp,96
 8008154:	d8800315 	stw	r2,12(sp)
 8008158:	d9400917 	ldw	r5,36(sp)
 800815c:	d8801504 	addi	r2,sp,84
 8008160:	d8800215 	stw	r2,8(sp)
 8008164:	d8801404 	addi	r2,sp,80
 8008168:	da000015 	stw	r8,0(sp)
 800816c:	9809883a 	mov	r4,r19
 8008170:	d8800115 	stw	r2,4(sp)
 8008174:	01c00084 	movi	r7,2
 8008178:	a00d883a 	mov	r6,r20
 800817c:	db000815 	stw	r12,32(sp)
 8008180:	da000715 	stw	r8,28(sp)
 8008184:	8008e7c0 	call	8008e7c <_dtoa_r>
 8008188:	da000717 	ldw	r8,28(sp)
 800818c:	e10019d8 	cmpnei	r4,fp,103
 8008190:	db000817 	ldw	r12,32(sp)
 8008194:	1023883a 	mov	r17,r2
 8008198:	4007883a 	mov	r3,r8
 800819c:	2001621e 	bne	r4,zero,8008728 <___vfprintf_internal_r+0x1e20>
 80081a0:	6080004c 	andi	r2,r12,1
 80081a4:	1001621e 	bne	r2,zero,8008730 <___vfprintf_internal_r+0x1e28>
 80081a8:	d8801417 	ldw	r2,80(sp)
 80081ac:	ad4011e0 	cmpeqi	r21,r21,71
 80081b0:	d8800715 	stw	r2,28(sp)
 80081b4:	d8801817 	ldw	r2,96(sp)
 80081b8:	1445c83a 	sub	r2,r2,r17
 80081bc:	d8800815 	stw	r2,32(sp)
 80081c0:	a8000526 	beq	r21,zero,80081d8 <___vfprintf_internal_r+0x18d0>
 80081c4:	d8c00717 	ldw	r3,28(sp)
 80081c8:	18bfff50 	cmplti	r2,r3,-3
 80081cc:	1000011e 	bne	r2,zero,80081d4 <___vfprintf_internal_r+0x18cc>
 80081d0:	40c1670e 	bge	r8,r3,8008770 <___vfprintf_internal_r+0x1e68>
 80081d4:	e73fff84 	addi	fp,fp,-2
 80081d8:	d8800717 	ldw	r2,28(sp)
 80081dc:	df001645 	stb	fp,89(sp)
 80081e0:	157fffc4 	addi	r21,r2,-1
 80081e4:	dd401415 	stw	r21,80(sp)
 80081e8:	a801c316 	blt	r21,zero,80088f8 <___vfprintf_internal_r+0x1ff0>
 80081ec:	00800ac4 	movi	r2,43
 80081f0:	d8801685 	stb	r2,90(sp)
 80081f4:	a8800290 	cmplti	r2,r21,10
 80081f8:	1001b81e 	bne	r2,zero,80088dc <___vfprintf_internal_r+0x1fd4>
 80081fc:	d98019c4 	addi	r6,sp,103
 8008200:	9029883a 	mov	r20,r18
 8008204:	dc400715 	stw	r17,28(sp)
 8008208:	8025883a 	mov	r18,r16
 800820c:	db000f15 	stw	r12,60(sp)
 8008210:	3021883a 	mov	r16,r6
 8008214:	a809883a 	mov	r4,r21
 8008218:	01400284 	movi	r5,10
 800821c:	8011f680 	call	8011f68 <__modsi3>
 8008220:	10800c04 	addi	r2,r2,48
 8008224:	a809883a 	mov	r4,r21
 8008228:	80bfffc5 	stb	r2,-1(r16)
 800822c:	01400284 	movi	r5,10
 8008230:	8011ee80 	call	8011ee8 <__divsi3>
 8008234:	a9001908 	cmpgei	r4,r21,100
 8008238:	8023883a 	mov	r17,r16
 800823c:	102b883a 	mov	r21,r2
 8008240:	843fffc4 	addi	r16,r16,-1
 8008244:	203ff31e 	bne	r4,zero,8008214 <___vfprintf_internal_r+0x190c>
 8008248:	800d883a 	mov	r6,r16
 800824c:	11000c04 	addi	r4,r2,48
 8008250:	9021883a 	mov	r16,r18
 8008254:	a025883a 	mov	r18,r20
 8008258:	8829883a 	mov	r20,r17
 800825c:	a0bfff84 	addi	r2,r20,-2
 8008260:	313fffc5 	stb	r4,-1(r6)
 8008264:	d8c019c4 	addi	r3,sp,103
 8008268:	db000f17 	ldw	r12,60(sp)
 800826c:	dc400717 	ldw	r17,28(sp)
 8008270:	10c1cd2e 	bgeu	r2,r3,80089a8 <___vfprintf_internal_r+0x20a0>
 8008274:	d8c016c4 	addi	r3,sp,91
 8008278:	00000106 	br	8008280 <___vfprintf_internal_r+0x1978>
 800827c:	11000003 	ldbu	r4,0(r2)
 8008280:	19000005 	stb	r4,0(r3)
 8008284:	10800044 	addi	r2,r2,1
 8008288:	d90019c4 	addi	r4,sp,103
 800828c:	18c00044 	addi	r3,r3,1
 8008290:	113ffa1e 	bne	r2,r4,800827c <___vfprintf_internal_r+0x1974>
 8008294:	d8801a44 	addi	r2,sp,105
 8008298:	d8c016c4 	addi	r3,sp,91
 800829c:	1505c83a 	sub	r2,r2,r20
 80082a0:	1885883a 	add	r2,r3,r2
 80082a4:	d8c01644 	addi	r3,sp,89
 80082a8:	10c5c83a 	sub	r2,r2,r3
 80082ac:	d8801015 	stw	r2,64(sp)
 80082b0:	d8c00817 	ldw	r3,32(sp)
 80082b4:	d9001017 	ldw	r4,64(sp)
 80082b8:	18800088 	cmpgei	r2,r3,2
 80082bc:	20eb883a 	add	r21,r4,r3
 80082c0:	10019226 	beq	r2,zero,800890c <___vfprintf_internal_r+0x2004>
 80082c4:	d8800b17 	ldw	r2,44(sp)
 80082c8:	a8ab883a 	add	r21,r21,r2
 80082cc:	a829883a 	mov	r20,r21
 80082d0:	a800010e 	bge	r21,zero,80082d8 <___vfprintf_internal_r+0x19d0>
 80082d4:	0029883a 	mov	r20,zero
 80082d8:	d8000715 	stw	zero,28(sp)
 80082dc:	00008e06 	br	8008518 <___vfprintf_internal_r+0x1c10>
 80082e0:	880f883a 	mov	r7,r17
 80082e4:	10800044 	addi	r2,r2,1
 80082e8:	1d47883a 	add	r3,r3,r21
 80082ec:	b1c00015 	stw	r7,0(r22)
 80082f0:	003a7b06 	br	8006ce0 <___vfprintf_internal_r+0x3d8>
 80082f4:	d9801a04 	addi	r6,sp,104
 80082f8:	900b883a 	mov	r5,r18
 80082fc:	9809883a 	mov	r4,r19
 8008300:	800f07c0 	call	800f07c <__sprint_r>
 8008304:	103a8d1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008308:	d8c01c17 	ldw	r3,112(sp)
 800830c:	dd802704 	addi	r22,sp,156
 8008310:	003c8b06 	br	8007540 <___vfprintf_internal_r+0xc38>
 8008314:	d9801a04 	addi	r6,sp,104
 8008318:	900b883a 	mov	r5,r18
 800831c:	9809883a 	mov	r4,r19
 8008320:	da000e15 	stw	r8,56(sp)
 8008324:	800f07c0 	call	800f07c <__sprint_r>
 8008328:	103a841e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 800832c:	d8c01c17 	ldw	r3,112(sp)
 8008330:	da000e17 	ldw	r8,56(sp)
 8008334:	dd802704 	addi	r22,sp,156
 8008338:	003a6006 	br	8006cbc <___vfprintf_internal_r+0x3b4>
 800833c:	8809883a 	mov	r4,r17
 8008340:	db000415 	stw	r12,16(sp)
 8008344:	d8c00615 	stw	r3,24(sp)
 8008348:	80044880 	call	8004488 <strlen>
 800834c:	db000417 	ldw	r12,16(sp)
 8008350:	102b883a 	mov	r21,r2
 8008354:	1029883a 	mov	r20,r2
 8008358:	003a2e06 	br	8006c14 <___vfprintf_internal_r+0x30c>
 800835c:	d8800d17 	ldw	r2,52(sp)
 8008360:	d9000b17 	ldw	r4,44(sp)
 8008364:	b0800015 	stw	r2,0(r22)
 8008368:	d8801b17 	ldw	r2,108(sp)
 800836c:	20c7883a 	add	r3,r4,r3
 8008370:	b1000115 	stw	r4,4(r22)
 8008374:	10800044 	addi	r2,r2,1
 8008378:	d8c01c15 	stw	r3,112(sp)
 800837c:	d8801b15 	stw	r2,108(sp)
 8008380:	11000208 	cmpgei	r4,r2,8
 8008384:	2000bf1e 	bne	r4,zero,8008684 <___vfprintf_internal_r+0x1d7c>
 8008388:	b5800204 	addi	r22,r22,8
 800838c:	283d3c0e 	bge	r5,zero,8007880 <___vfprintf_internal_r+0xf78>
 8008390:	01c20174 	movhi	r7,2053
 8008394:	293ffc08 	cmpgei	r4,r5,-16
 8008398:	39c16c04 	addi	r7,r7,1456
 800839c:	0179c83a 	sub	fp,zero,r5
 80083a0:	2001361e 	bne	r4,zero,800887c <___vfprintf_internal_r+0x1f74>
 80083a4:	dc000715 	stw	r16,28(sp)
 80083a8:	05400404 	movi	r21,16
 80083ac:	9021883a 	mov	r16,r18
 80083b0:	3825883a 	mov	r18,r7
 80083b4:	00000406 	br	80083c8 <___vfprintf_internal_r+0x1ac0>
 80083b8:	b5800204 	addi	r22,r22,8
 80083bc:	e73ffc04 	addi	fp,fp,-16
 80083c0:	e1800448 	cmpgei	r6,fp,17
 80083c4:	30012a26 	beq	r6,zero,8008870 <___vfprintf_internal_r+0x1f68>
 80083c8:	10800044 	addi	r2,r2,1
 80083cc:	18c00404 	addi	r3,r3,16
 80083d0:	b4800015 	stw	r18,0(r22)
 80083d4:	b5400115 	stw	r21,4(r22)
 80083d8:	d8c01c15 	stw	r3,112(sp)
 80083dc:	d8801b15 	stw	r2,108(sp)
 80083e0:	11800208 	cmpgei	r6,r2,8
 80083e4:	303ff426 	beq	r6,zero,80083b8 <___vfprintf_internal_r+0x1ab0>
 80083e8:	d9801a04 	addi	r6,sp,104
 80083ec:	800b883a 	mov	r5,r16
 80083f0:	9809883a 	mov	r4,r19
 80083f4:	800f07c0 	call	800f07c <__sprint_r>
 80083f8:	10015f1e 	bne	r2,zero,8008978 <___vfprintf_internal_r+0x2070>
 80083fc:	d8c01c17 	ldw	r3,112(sp)
 8008400:	d8801b17 	ldw	r2,108(sp)
 8008404:	dd802704 	addi	r22,sp,156
 8008408:	003fec06 	br	80083bc <___vfprintf_internal_r+0x1ab4>
 800840c:	800f883a 	mov	r7,r16
 8008410:	dc000717 	ldw	r16,28(sp)
 8008414:	8817883a 	mov	r11,r17
 8008418:	aa000044 	addi	r8,r21,1
 800841c:	e0800204 	addi	r2,fp,8
 8008420:	1ac7883a 	add	r3,r3,r11
 8008424:	e1c00015 	stw	r7,0(fp)
 8008428:	e2c00115 	stw	r11,4(fp)
 800842c:	d8c01c15 	stw	r3,112(sp)
 8008430:	da001b15 	stw	r8,108(sp)
 8008434:	41000208 	cmpgei	r4,r8,8
 8008438:	203eb31e 	bne	r4,zero,8007f08 <___vfprintf_internal_r+0x1600>
 800843c:	42000044 	addi	r8,r8,1
 8008440:	15800204 	addi	r22,r2,8
 8008444:	1039883a 	mov	fp,r2
 8008448:	003d5106 	br	8007990 <___vfprintf_internal_r+0x1088>
 800844c:	d8801804 	addi	r2,sp,96
 8008450:	d8800315 	stw	r2,12(sp)
 8008454:	d9400917 	ldw	r5,36(sp)
 8008458:	d8801504 	addi	r2,sp,84
 800845c:	d8800215 	stw	r2,8(sp)
 8008460:	d8801404 	addi	r2,sp,80
 8008464:	da000015 	stw	r8,0(sp)
 8008468:	d8800115 	stw	r2,4(sp)
 800846c:	01c000c4 	movi	r7,3
 8008470:	a00d883a 	mov	r6,r20
 8008474:	9809883a 	mov	r4,r19
 8008478:	db000815 	stw	r12,32(sp)
 800847c:	da000715 	stw	r8,28(sp)
 8008480:	8008e7c0 	call	8008e7c <_dtoa_r>
 8008484:	da000717 	ldw	r8,28(sp)
 8008488:	1023883a 	mov	r17,r2
 800848c:	db000817 	ldw	r12,32(sp)
 8008490:	1207883a 	add	r3,r2,r8
 8008494:	88800007 	ldb	r2,0(r17)
 8008498:	10800c20 	cmpeqi	r2,r2,48
 800849c:	1000661e 	bne	r2,zero,8008638 <___vfprintf_internal_r+0x1d30>
 80084a0:	d8801417 	ldw	r2,80(sp)
 80084a4:	1893883a 	add	r9,r3,r2
 80084a8:	d9000917 	ldw	r4,36(sp)
 80084ac:	000d883a 	mov	r6,zero
 80084b0:	000f883a 	mov	r7,zero
 80084b4:	a00b883a 	mov	r5,r20
 80084b8:	da401115 	stw	r9,68(sp)
 80084bc:	da000815 	stw	r8,32(sp)
 80084c0:	db000715 	stw	r12,28(sp)
 80084c4:	80132740 	call	8013274 <__eqdf2>
 80084c8:	db000717 	ldw	r12,28(sp)
 80084cc:	da000817 	ldw	r8,32(sp)
 80084d0:	da401117 	ldw	r9,68(sp)
 80084d4:	1000981e 	bne	r2,zero,8008738 <___vfprintf_internal_r+0x1e30>
 80084d8:	4805883a 	mov	r2,r9
 80084dc:	d8c01417 	ldw	r3,80(sp)
 80084e0:	1445c83a 	sub	r2,r2,r17
 80084e4:	ad4011d8 	cmpnei	r21,r21,71
 80084e8:	d8c00715 	stw	r3,28(sp)
 80084ec:	d8800815 	stw	r2,32(sp)
 80084f0:	a83f3426 	beq	r21,zero,80081c4 <___vfprintf_internal_r+0x18bc>
 80084f4:	d8800f17 	ldw	r2,60(sp)
 80084f8:	103f3726 	beq	r2,zero,80081d8 <___vfprintf_internal_r+0x18d0>
 80084fc:	d8c00717 	ldw	r3,28(sp)
 8008500:	6080004c 	andi	r2,r12,1
 8008504:	1204b03a 	or	r2,r2,r8
 8008508:	00c1130e 	bge	zero,r3,8008958 <___vfprintf_internal_r+0x2050>
 800850c:	10010e1e 	bne	r2,zero,8008948 <___vfprintf_internal_r+0x2040>
 8008510:	dd400717 	ldw	r21,28(sp)
 8008514:	a829883a 	mov	r20,r21
 8008518:	d8800607 	ldb	r2,24(sp)
 800851c:	10008f26 	beq	r2,zero,800875c <___vfprintf_internal_r+0x1e54>
 8008520:	00800b44 	movi	r2,45
 8008524:	d8801345 	stb	r2,77(sp)
 8008528:	d8800e17 	ldw	r2,56(sp)
 800852c:	0011883a 	mov	r8,zero
 8008530:	d8800615 	stw	r2,24(sp)
 8008534:	003b9406 	br	8007388 <___vfprintf_internal_r+0xa80>
 8008538:	04420174 	movhi	r17,2053
 800853c:	8c415304 	addi	r17,r17,1356
 8008540:	003a8d06 	br	8006f78 <___vfprintf_internal_r+0x670>
 8008544:	d8800617 	ldw	r2,24(sp)
 8008548:	d8c00615 	stw	r3,24(sp)
 800854c:	15000017 	ldw	r20,0(r2)
 8008550:	a02bd7fa 	srai	r21,r20,31
 8008554:	a805883a 	mov	r2,r21
 8008558:	003ae506 	br	80070f0 <___vfprintf_internal_r+0x7e8>
 800855c:	d8800617 	ldw	r2,24(sp)
 8008560:	002b883a 	mov	r21,zero
 8008564:	d8c00615 	stw	r3,24(sp)
 8008568:	15000017 	ldw	r20,0(r2)
 800856c:	0005883a 	mov	r2,zero
 8008570:	003a2606 	br	8006e0c <___vfprintf_internal_r+0x504>
 8008574:	d8800617 	ldw	r2,24(sp)
 8008578:	002b883a 	mov	r21,zero
 800857c:	d8c00615 	stw	r3,24(sp)
 8008580:	15000017 	ldw	r20,0(r2)
 8008584:	00800044 	movi	r2,1
 8008588:	003a2006 	br	8006e0c <___vfprintf_internal_r+0x504>
 800858c:	d8800617 	ldw	r2,24(sp)
 8008590:	002b883a 	mov	r21,zero
 8008594:	d8c00615 	stw	r3,24(sp)
 8008598:	15000017 	ldw	r20,0(r2)
 800859c:	003af606 	br	8007178 <___vfprintf_internal_r+0x870>
 80085a0:	800f883a 	mov	r7,r16
 80085a4:	dc000e17 	ldw	r16,56(sp)
 80085a8:	10800044 	addi	r2,r2,1
 80085ac:	1d47883a 	add	r3,r3,r21
 80085b0:	d8801b15 	stw	r2,108(sp)
 80085b4:	b1c00015 	stw	r7,0(r22)
 80085b8:	b5400115 	stw	r21,4(r22)
 80085bc:	d8c01c15 	stw	r3,112(sp)
 80085c0:	10800208 	cmpgei	r2,r2,8
 80085c4:	10003a1e 	bne	r2,zero,80086b0 <___vfprintf_internal_r+0x1da8>
 80085c8:	b5800204 	addi	r22,r22,8
 80085cc:	003d6c06 	br	8007b80 <___vfprintf_internal_r+0x1278>
 80085d0:	00800b44 	movi	r2,45
 80085d4:	d8801345 	stb	r2,77(sp)
 80085d8:	03400b44 	movi	r13,45
 80085dc:	003a6206 	br	8006f68 <___vfprintf_internal_r+0x660>
 80085e0:	1520003c 	xorhi	r20,r2,32768
 80085e4:	00800b44 	movi	r2,45
 80085e8:	d8800605 	stb	r2,24(sp)
 80085ec:	003ed106 	br	8008134 <___vfprintf_internal_r+0x182c>
 80085f0:	d9801a04 	addi	r6,sp,104
 80085f4:	900b883a 	mov	r5,r18
 80085f8:	9809883a 	mov	r4,r19
 80085fc:	800f07c0 	call	800f07c <__sprint_r>
 8008600:	1039ce1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008604:	dd401417 	ldw	r21,80(sp)
 8008608:	d8c01c17 	ldw	r3,112(sp)
 800860c:	dd802704 	addi	r22,sp,156
 8008610:	003d6a06 	br	8007bbc <___vfprintf_internal_r+0x12b4>
 8008614:	05400184 	movi	r21,6
 8008618:	003e5a06 	br	8007f84 <___vfprintf_internal_r+0x167c>
 800861c:	d9801a04 	addi	r6,sp,104
 8008620:	900b883a 	mov	r5,r18
 8008624:	9809883a 	mov	r4,r19
 8008628:	800f07c0 	call	800f07c <__sprint_r>
 800862c:	0039c306 	br	8006d3c <___vfprintf_internal_r+0x434>
 8008630:	d9401345 	stb	r5,77(sp)
 8008634:	00397106 	br	8006bfc <___vfprintf_internal_r+0x2f4>
 8008638:	d9000917 	ldw	r4,36(sp)
 800863c:	000d883a 	mov	r6,zero
 8008640:	000f883a 	mov	r7,zero
 8008644:	a00b883a 	mov	r5,r20
 8008648:	d8c01115 	stw	r3,68(sp)
 800864c:	da000815 	stw	r8,32(sp)
 8008650:	db000715 	stw	r12,28(sp)
 8008654:	80132740 	call	8013274 <__eqdf2>
 8008658:	db000717 	ldw	r12,28(sp)
 800865c:	da000817 	ldw	r8,32(sp)
 8008660:	d8c01117 	ldw	r3,68(sp)
 8008664:	103f8e26 	beq	r2,zero,80084a0 <___vfprintf_internal_r+0x1b98>
 8008668:	00800044 	movi	r2,1
 800866c:	1205c83a 	sub	r2,r2,r8
 8008670:	d8801415 	stw	r2,80(sp)
 8008674:	003f8b06 	br	80084a4 <___vfprintf_internal_r+0x1b9c>
 8008678:	403ea81e 	bne	r8,zero,800811c <___vfprintf_internal_r+0x1814>
 800867c:	02000044 	movi	r8,1
 8008680:	003ea606 	br	800811c <___vfprintf_internal_r+0x1814>
 8008684:	d9801a04 	addi	r6,sp,104
 8008688:	900b883a 	mov	r5,r18
 800868c:	9809883a 	mov	r4,r19
 8008690:	800f07c0 	call	800f07c <__sprint_r>
 8008694:	1039a91e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 8008698:	d9401417 	ldw	r5,80(sp)
 800869c:	d8c01c17 	ldw	r3,112(sp)
 80086a0:	d8801b17 	ldw	r2,108(sp)
 80086a4:	dd802704 	addi	r22,sp,156
 80086a8:	283c750e 	bge	r5,zero,8007880 <___vfprintf_internal_r+0xf78>
 80086ac:	003f3806 	br	8008390 <___vfprintf_internal_r+0x1a88>
 80086b0:	d9801a04 	addi	r6,sp,104
 80086b4:	900b883a 	mov	r5,r18
 80086b8:	9809883a 	mov	r4,r19
 80086bc:	800f07c0 	call	800f07c <__sprint_r>
 80086c0:	10399e1e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80086c4:	d8c01c17 	ldw	r3,112(sp)
 80086c8:	dd802704 	addi	r22,sp,156
 80086cc:	003d2c06 	br	8007b80 <___vfprintf_internal_r+0x1278>
 80086d0:	db000417 	ldw	r12,16(sp)
 80086d4:	003a9306 	br	8007124 <___vfprintf_internal_r+0x81c>
 80086d8:	d8801804 	addi	r2,sp,96
 80086dc:	d8800315 	stw	r2,12(sp)
 80086e0:	d9400917 	ldw	r5,36(sp)
 80086e4:	d8801504 	addi	r2,sp,84
 80086e8:	40c00044 	addi	r3,r8,1
 80086ec:	d8800215 	stw	r2,8(sp)
 80086f0:	d8801404 	addi	r2,sp,80
 80086f4:	d8c00015 	stw	r3,0(sp)
 80086f8:	d8800115 	stw	r2,4(sp)
 80086fc:	01c00084 	movi	r7,2
 8008700:	a00d883a 	mov	r6,r20
 8008704:	9809883a 	mov	r4,r19
 8008708:	db001115 	stw	r12,68(sp)
 800870c:	da000815 	stw	r8,32(sp)
 8008710:	d8c00715 	stw	r3,28(sp)
 8008714:	8008e7c0 	call	8008e7c <_dtoa_r>
 8008718:	d8c00717 	ldw	r3,28(sp)
 800871c:	da000817 	ldw	r8,32(sp)
 8008720:	db001117 	ldw	r12,68(sp)
 8008724:	1023883a 	mov	r17,r2
 8008728:	e08011d8 	cmpnei	r2,fp,71
 800872c:	103e9c26 	beq	r2,zero,80081a0 <___vfprintf_internal_r+0x1898>
 8008730:	88d3883a 	add	r9,r17,r3
 8008734:	003f5c06 	br	80084a8 <___vfprintf_internal_r+0x1ba0>
 8008738:	d8801817 	ldw	r2,96(sp)
 800873c:	127f672e 	bgeu	r2,r9,80084dc <___vfprintf_internal_r+0x1bd4>
 8008740:	01000c04 	movi	r4,48
 8008744:	10c00044 	addi	r3,r2,1
 8008748:	d8c01815 	stw	r3,96(sp)
 800874c:	11000005 	stb	r4,0(r2)
 8008750:	d8801817 	ldw	r2,96(sp)
 8008754:	127ffb36 	bltu	r2,r9,8008744 <___vfprintf_internal_r+0x1e3c>
 8008758:	003f6006 	br	80084dc <___vfprintf_internal_r+0x1bd4>
 800875c:	d8800e17 	ldw	r2,56(sp)
 8008760:	db401343 	ldbu	r13,77(sp)
 8008764:	0011883a 	mov	r8,zero
 8008768:	d8800615 	stw	r2,24(sp)
 800876c:	003b0206 	br	8007378 <___vfprintf_internal_r+0xa70>
 8008770:	d8800717 	ldw	r2,28(sp)
 8008774:	d8c00817 	ldw	r3,32(sp)
 8008778:	10c02216 	blt	r2,r3,8008804 <___vfprintf_internal_r+0x1efc>
 800877c:	6300004c 	andi	r12,r12,1
 8008780:	60004f1e 	bne	r12,zero,80088c0 <___vfprintf_internal_r+0x1fb8>
 8008784:	1029883a 	mov	r20,r2
 8008788:	1000010e 	bge	r2,zero,8008790 <___vfprintf_internal_r+0x1e88>
 800878c:	0029883a 	mov	r20,zero
 8008790:	dd400717 	ldw	r21,28(sp)
 8008794:	070019c4 	movi	fp,103
 8008798:	003f5f06 	br	8008518 <___vfprintf_internal_r+0x1c10>
 800879c:	d9801a04 	addi	r6,sp,104
 80087a0:	900b883a 	mov	r5,r18
 80087a4:	9809883a 	mov	r4,r19
 80087a8:	800f07c0 	call	800f07c <__sprint_r>
 80087ac:	1039631e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80087b0:	d8c01c17 	ldw	r3,112(sp)
 80087b4:	dd802704 	addi	r22,sp,156
 80087b8:	a83cee0e 	bge	r21,zero,8007b74 <___vfprintf_internal_r+0x126c>
 80087bc:	003dec06 	br	8007f70 <___vfprintf_internal_r+0x1668>
 80087c0:	02000184 	movi	r8,6
 80087c4:	003e5506 	br	800811c <___vfprintf_internal_r+0x1814>
 80087c8:	d9801a04 	addi	r6,sp,104
 80087cc:	900b883a 	mov	r5,r18
 80087d0:	9809883a 	mov	r4,r19
 80087d4:	800f07c0 	call	800f07c <__sprint_r>
 80087d8:	1039581e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80087dc:	d8801417 	ldw	r2,80(sp)
 80087e0:	d9000817 	ldw	r4,32(sp)
 80087e4:	d8c01c17 	ldw	r3,112(sp)
 80087e8:	dd802704 	addi	r22,sp,156
 80087ec:	2085c83a 	sub	r2,r4,r2
 80087f0:	003d0606 	br	8007c0c <___vfprintf_internal_r+0x1304>
 80087f4:	4029883a 	mov	r20,r8
 80087f8:	d8c00615 	stw	r3,24(sp)
 80087fc:	402b883a 	mov	r21,r8
 8008800:	00390406 	br	8006c14 <___vfprintf_internal_r+0x30c>
 8008804:	d8800817 	ldw	r2,32(sp)
 8008808:	d8c00b17 	ldw	r3,44(sp)
 800880c:	10eb883a 	add	r21,r2,r3
 8008810:	d8800717 	ldw	r2,28(sp)
 8008814:	00800316 	blt	zero,r2,8008824 <___vfprintf_internal_r+0x1f1c>
 8008818:	d8800717 	ldw	r2,28(sp)
 800881c:	a8abc83a 	sub	r21,r21,r2
 8008820:	ad400044 	addi	r21,r21,1
 8008824:	a829883a 	mov	r20,r21
 8008828:	a8002a16 	blt	r21,zero,80088d4 <___vfprintf_internal_r+0x1fcc>
 800882c:	070019c4 	movi	fp,103
 8008830:	003f3906 	br	8008518 <___vfprintf_internal_r+0x1c10>
 8008834:	d9401345 	stb	r5,77(sp)
 8008838:	003a2506 	br	80070d0 <___vfprintf_internal_r+0x7c8>
 800883c:	d9401345 	stb	r5,77(sp)
 8008840:	003b1806 	br	80074a4 <___vfprintf_internal_r+0xb9c>
 8008844:	d9401345 	stb	r5,77(sp)
 8008848:	003a9006 	br	800728c <___vfprintf_internal_r+0x984>
 800884c:	d9401345 	stb	r5,77(sp)
 8008850:	003a3f06 	br	8007150 <___vfprintf_internal_r+0x848>
 8008854:	d9401345 	stb	r5,77(sp)
 8008858:	003a7806 	br	800723c <___vfprintf_internal_r+0x934>
 800885c:	d9401345 	stb	r5,77(sp)
 8008860:	00399606 	br	8006ebc <___vfprintf_internal_r+0x5b4>
 8008864:	00bfffc4 	movi	r2,-1
 8008868:	d8800515 	stw	r2,20(sp)
 800886c:	00393606 	br	8006d48 <___vfprintf_internal_r+0x440>
 8008870:	900f883a 	mov	r7,r18
 8008874:	8025883a 	mov	r18,r16
 8008878:	dc000717 	ldw	r16,28(sp)
 800887c:	10800044 	addi	r2,r2,1
 8008880:	1f07883a 	add	r3,r3,fp
 8008884:	b1c00015 	stw	r7,0(r22)
 8008888:	b7000115 	stw	fp,4(r22)
 800888c:	d8c01c15 	stw	r3,112(sp)
 8008890:	d8801b15 	stw	r2,108(sp)
 8008894:	11000208 	cmpgei	r4,r2,8
 8008898:	203bf826 	beq	r4,zero,800787c <___vfprintf_internal_r+0xf74>
 800889c:	d9801a04 	addi	r6,sp,104
 80088a0:	900b883a 	mov	r5,r18
 80088a4:	9809883a 	mov	r4,r19
 80088a8:	800f07c0 	call	800f07c <__sprint_r>
 80088ac:	1039231e 	bne	r2,zero,8006d3c <___vfprintf_internal_r+0x434>
 80088b0:	d8c01c17 	ldw	r3,112(sp)
 80088b4:	d8801b17 	ldw	r2,108(sp)
 80088b8:	dd802704 	addi	r22,sp,156
 80088bc:	003bf006 	br	8007880 <___vfprintf_internal_r+0xf78>
 80088c0:	d8800717 	ldw	r2,28(sp)
 80088c4:	d8c00b17 	ldw	r3,44(sp)
 80088c8:	10eb883a 	add	r21,r2,r3
 80088cc:	a829883a 	mov	r20,r21
 80088d0:	a83fd60e 	bge	r21,zero,800882c <___vfprintf_internal_r+0x1f24>
 80088d4:	0029883a 	mov	r20,zero
 80088d8:	003fd406 	br	800882c <___vfprintf_internal_r+0x1f24>
 80088dc:	00800c04 	movi	r2,48
 80088e0:	ad400c04 	addi	r21,r21,48
 80088e4:	d88016c5 	stb	r2,91(sp)
 80088e8:	00800104 	movi	r2,4
 80088ec:	dd401705 	stb	r21,92(sp)
 80088f0:	d8801015 	stw	r2,64(sp)
 80088f4:	003e6e06 	br	80082b0 <___vfprintf_internal_r+0x19a8>
 80088f8:	05400044 	movi	r21,1
 80088fc:	a8abc83a 	sub	r21,r21,r2
 8008900:	00800b44 	movi	r2,45
 8008904:	d8801685 	stb	r2,90(sp)
 8008908:	003e3a06 	br	80081f4 <___vfprintf_internal_r+0x18ec>
 800890c:	6080004c 	andi	r2,r12,1
 8008910:	d8800715 	stw	r2,28(sp)
 8008914:	103e6b1e 	bne	r2,zero,80082c4 <___vfprintf_internal_r+0x19bc>
 8008918:	a829883a 	mov	r20,r21
 800891c:	a83efe0e 	bge	r21,zero,8008518 <___vfprintf_internal_r+0x1c10>
 8008920:	0029883a 	mov	r20,zero
 8008924:	003efc06 	br	8008518 <___vfprintf_internal_r+0x1c10>
 8008928:	d8800a17 	ldw	r2,40(sp)
 800892c:	10001a16 	blt	r2,zero,8008998 <___vfprintf_internal_r+0x2090>
 8008930:	db401343 	ldbu	r13,77(sp)
 8008934:	e0801210 	cmplti	r2,fp,72
 8008938:	1000141e 	bne	r2,zero,800898c <___vfprintf_internal_r+0x2084>
 800893c:	04420174 	movhi	r17,2053
 8008940:	8c415604 	addi	r17,r17,1368
 8008944:	00398c06 	br	8006f78 <___vfprintf_internal_r+0x670>
 8008948:	d8800b17 	ldw	r2,44(sp)
 800894c:	18ab883a 	add	r21,r3,r2
 8008950:	aa2b883a 	add	r21,r21,r8
 8008954:	003ff006 	br	8008918 <___vfprintf_internal_r+0x2010>
 8008958:	1000031e 	bne	r2,zero,8008968 <___vfprintf_internal_r+0x2060>
 800895c:	05000044 	movi	r20,1
 8008960:	05400044 	movi	r21,1
 8008964:	003eec06 	br	8008518 <___vfprintf_internal_r+0x1c10>
 8008968:	d8800b17 	ldw	r2,44(sp)
 800896c:	15400044 	addi	r21,r2,1
 8008970:	aa2b883a 	add	r21,r21,r8
 8008974:	003fe806 	br	8008918 <___vfprintf_internal_r+0x2010>
 8008978:	8025883a 	mov	r18,r16
 800897c:	0038ef06 	br	8006d3c <___vfprintf_internal_r+0x434>
 8008980:	b005883a 	mov	r2,r22
 8008984:	39c16c04 	addi	r7,r7,1456
 8008988:	003ea506 	br	8008420 <___vfprintf_internal_r+0x1b18>
 800898c:	04420174 	movhi	r17,2053
 8008990:	8c415504 	addi	r17,r17,1364
 8008994:	00397806 	br	8006f78 <___vfprintf_internal_r+0x670>
 8008998:	00800b44 	movi	r2,45
 800899c:	d8801345 	stb	r2,77(sp)
 80089a0:	03400b44 	movi	r13,45
 80089a4:	003fe306 	br	8008934 <___vfprintf_internal_r+0x202c>
 80089a8:	00800084 	movi	r2,2
 80089ac:	d8801015 	stw	r2,64(sp)
 80089b0:	003e3f06 	br	80082b0 <___vfprintf_internal_r+0x19a8>
 80089b4:	d8800617 	ldw	r2,24(sp)
 80089b8:	12000017 	ldw	r8,0(r2)
 80089bc:	10800104 	addi	r2,r2,4
 80089c0:	4000010e 	bge	r8,zero,80089c8 <___vfprintf_internal_r+0x20c0>
 80089c4:	023fffc4 	movi	r8,-1
 80089c8:	bf000043 	ldbu	fp,1(r23)
 80089cc:	d8800615 	stw	r2,24(sp)
 80089d0:	182f883a 	mov	r23,r3
 80089d4:	e2c03fcc 	andi	r11,fp,255
 80089d8:	5ac0201c 	xori	r11,r11,128
 80089dc:	5affe004 	addi	r11,r11,-128
 80089e0:	00381506 	br	8006a38 <___vfprintf_internal_r+0x130>

080089e4 <__vfprintf_internal>:
 80089e4:	00c20174 	movhi	r3,2053
 80089e8:	2005883a 	mov	r2,r4
 80089ec:	191bd417 	ldw	r4,28496(r3)
 80089f0:	300f883a 	mov	r7,r6
 80089f4:	280d883a 	mov	r6,r5
 80089f8:	100b883a 	mov	r5,r2
 80089fc:	80069081 	jmpi	8006908 <___vfprintf_internal_r>

08008a00 <__sbprintf>:
 8008a00:	2880030b 	ldhu	r2,12(r5)
 8008a04:	2b001917 	ldw	r12,100(r5)
 8008a08:	2ac0038b 	ldhu	r11,14(r5)
 8008a0c:	2a800717 	ldw	r10,28(r5)
 8008a10:	2a400917 	ldw	r9,36(r5)
 8008a14:	defee204 	addi	sp,sp,-1144
 8008a18:	da001a04 	addi	r8,sp,104
 8008a1c:	00c10004 	movi	r3,1024
 8008a20:	dc011a15 	stw	r16,1128(sp)
 8008a24:	10bfff4c 	andi	r2,r2,65533
 8008a28:	2821883a 	mov	r16,r5
 8008a2c:	d80b883a 	mov	r5,sp
 8008a30:	dc811c15 	stw	r18,1136(sp)
 8008a34:	dc411b15 	stw	r17,1132(sp)
 8008a38:	dfc11d15 	stw	ra,1140(sp)
 8008a3c:	2025883a 	mov	r18,r4
 8008a40:	d880030d 	sth	r2,12(sp)
 8008a44:	db001915 	stw	r12,100(sp)
 8008a48:	dac0038d 	sth	r11,14(sp)
 8008a4c:	da800715 	stw	r10,28(sp)
 8008a50:	da400915 	stw	r9,36(sp)
 8008a54:	da000015 	stw	r8,0(sp)
 8008a58:	da000415 	stw	r8,16(sp)
 8008a5c:	d8c00215 	stw	r3,8(sp)
 8008a60:	d8c00515 	stw	r3,20(sp)
 8008a64:	d8000615 	stw	zero,24(sp)
 8008a68:	80069080 	call	8006908 <___vfprintf_internal_r>
 8008a6c:	1023883a 	mov	r17,r2
 8008a70:	10000d0e 	bge	r2,zero,8008aa8 <__sbprintf+0xa8>
 8008a74:	d880030b 	ldhu	r2,12(sp)
 8008a78:	1080100c 	andi	r2,r2,64
 8008a7c:	10000326 	beq	r2,zero,8008a8c <__sbprintf+0x8c>
 8008a80:	8080030b 	ldhu	r2,12(r16)
 8008a84:	10801014 	ori	r2,r2,64
 8008a88:	8080030d 	sth	r2,12(r16)
 8008a8c:	8805883a 	mov	r2,r17
 8008a90:	dfc11d17 	ldw	ra,1140(sp)
 8008a94:	dc811c17 	ldw	r18,1136(sp)
 8008a98:	dc411b17 	ldw	r17,1132(sp)
 8008a9c:	dc011a17 	ldw	r16,1128(sp)
 8008aa0:	dec11e04 	addi	sp,sp,1144
 8008aa4:	f800283a 	ret
 8008aa8:	d80b883a 	mov	r5,sp
 8008aac:	9009883a 	mov	r4,r18
 8008ab0:	800a7f40 	call	800a7f4 <_fflush_r>
 8008ab4:	103fef26 	beq	r2,zero,8008a74 <__sbprintf+0x74>
 8008ab8:	047fffc4 	movi	r17,-1
 8008abc:	003fed06 	br	8008a74 <__sbprintf+0x74>

08008ac0 <_write_r>:
 8008ac0:	2807883a 	mov	r3,r5
 8008ac4:	defffe04 	addi	sp,sp,-8
 8008ac8:	dc000015 	stw	r16,0(sp)
 8008acc:	300b883a 	mov	r5,r6
 8008ad0:	00820174 	movhi	r2,2053
 8008ad4:	380d883a 	mov	r6,r7
 8008ad8:	2021883a 	mov	r16,r4
 8008adc:	1809883a 	mov	r4,r3
 8008ae0:	dfc00115 	stw	ra,4(sp)
 8008ae4:	101c2d15 	stw	zero,28852(r2)
 8008ae8:	8028e380 	call	8028e38 <write>
 8008aec:	10ffffd8 	cmpnei	r3,r2,-1
 8008af0:	18000426 	beq	r3,zero,8008b04 <_write_r+0x44>
 8008af4:	dfc00117 	ldw	ra,4(sp)
 8008af8:	dc000017 	ldw	r16,0(sp)
 8008afc:	dec00204 	addi	sp,sp,8
 8008b00:	f800283a 	ret
 8008b04:	00c20174 	movhi	r3,2053
 8008b08:	18dc2d17 	ldw	r3,28852(r3)
 8008b0c:	183ff926 	beq	r3,zero,8008af4 <_write_r+0x34>
 8008b10:	80c00015 	stw	r3,0(r16)
 8008b14:	dfc00117 	ldw	ra,4(sp)
 8008b18:	dc000017 	ldw	r16,0(sp)
 8008b1c:	dec00204 	addi	sp,sp,8
 8008b20:	f800283a 	ret

08008b24 <__swsetup_r>:
 8008b24:	00820174 	movhi	r2,2053
 8008b28:	109bd417 	ldw	r2,28496(r2)
 8008b2c:	defffd04 	addi	sp,sp,-12
 8008b30:	dc400115 	stw	r17,4(sp)
 8008b34:	dc000015 	stw	r16,0(sp)
 8008b38:	dfc00215 	stw	ra,8(sp)
 8008b3c:	2023883a 	mov	r17,r4
 8008b40:	2821883a 	mov	r16,r5
 8008b44:	10000226 	beq	r2,zero,8008b50 <__swsetup_r+0x2c>
 8008b48:	10c00e17 	ldw	r3,56(r2)
 8008b4c:	18003326 	beq	r3,zero,8008c1c <__swsetup_r+0xf8>
 8008b50:	8180030b 	ldhu	r6,12(r16)
 8008b54:	30c0020c 	andi	r3,r6,8
 8008b58:	3005883a 	mov	r2,r6
 8008b5c:	18000f26 	beq	r3,zero,8008b9c <__swsetup_r+0x78>
 8008b60:	80c00417 	ldw	r3,16(r16)
 8008b64:	18001626 	beq	r3,zero,8008bc0 <__swsetup_r+0x9c>
 8008b68:	1100004c 	andi	r4,r2,1
 8008b6c:	20001f1e 	bne	r4,zero,8008bec <__swsetup_r+0xc8>
 8008b70:	1100008c 	andi	r4,r2,2
 8008b74:	20002c1e 	bne	r4,zero,8008c28 <__swsetup_r+0x104>
 8008b78:	81000517 	ldw	r4,20(r16)
 8008b7c:	81000215 	stw	r4,8(r16)
 8008b80:	18001f26 	beq	r3,zero,8008c00 <__swsetup_r+0xdc>
 8008b84:	0005883a 	mov	r2,zero
 8008b88:	dfc00217 	ldw	ra,8(sp)
 8008b8c:	dc400117 	ldw	r17,4(sp)
 8008b90:	dc000017 	ldw	r16,0(sp)
 8008b94:	dec00304 	addi	sp,sp,12
 8008b98:	f800283a 	ret
 8008b9c:	3080040c 	andi	r2,r6,16
 8008ba0:	10003126 	beq	r2,zero,8008c68 <__swsetup_r+0x144>
 8008ba4:	3080010c 	andi	r2,r6,4
 8008ba8:	1000211e 	bne	r2,zero,8008c30 <__swsetup_r+0x10c>
 8008bac:	80c00417 	ldw	r3,16(r16)
 8008bb0:	30800214 	ori	r2,r6,8
 8008bb4:	8080030d 	sth	r2,12(r16)
 8008bb8:	100d883a 	mov	r6,r2
 8008bbc:	183fea1e 	bne	r3,zero,8008b68 <__swsetup_r+0x44>
 8008bc0:	1100a00c 	andi	r4,r2,640
 8008bc4:	21008020 	cmpeqi	r4,r4,512
 8008bc8:	203fe71e 	bne	r4,zero,8008b68 <__swsetup_r+0x44>
 8008bcc:	8809883a 	mov	r4,r17
 8008bd0:	800b883a 	mov	r5,r16
 8008bd4:	800b7fc0 	call	800b7fc <__smakebuf_r>
 8008bd8:	8180030b 	ldhu	r6,12(r16)
 8008bdc:	80c00417 	ldw	r3,16(r16)
 8008be0:	3005883a 	mov	r2,r6
 8008be4:	1100004c 	andi	r4,r2,1
 8008be8:	203fe126 	beq	r4,zero,8008b70 <__swsetup_r+0x4c>
 8008bec:	81000517 	ldw	r4,20(r16)
 8008bf0:	80000215 	stw	zero,8(r16)
 8008bf4:	0109c83a 	sub	r4,zero,r4
 8008bf8:	81000615 	stw	r4,24(r16)
 8008bfc:	183fe11e 	bne	r3,zero,8008b84 <__swsetup_r+0x60>
 8008c00:	10c0200c 	andi	r3,r2,128
 8008c04:	0005883a 	mov	r2,zero
 8008c08:	183fdf26 	beq	r3,zero,8008b88 <__swsetup_r+0x64>
 8008c0c:	31801014 	ori	r6,r6,64
 8008c10:	8180030d 	sth	r6,12(r16)
 8008c14:	00bfffc4 	movi	r2,-1
 8008c18:	003fdb06 	br	8008b88 <__swsetup_r+0x64>
 8008c1c:	1009883a 	mov	r4,r2
 8008c20:	800abdc0 	call	800abdc <__sinit>
 8008c24:	003fca06 	br	8008b50 <__swsetup_r+0x2c>
 8008c28:	0009883a 	mov	r4,zero
 8008c2c:	003fd306 	br	8008b7c <__swsetup_r+0x58>
 8008c30:	81400c17 	ldw	r5,48(r16)
 8008c34:	28000626 	beq	r5,zero,8008c50 <__swsetup_r+0x12c>
 8008c38:	80801004 	addi	r2,r16,64
 8008c3c:	28800326 	beq	r5,r2,8008c4c <__swsetup_r+0x128>
 8008c40:	8809883a 	mov	r4,r17
 8008c44:	800ad400 	call	800ad40 <_free_r>
 8008c48:	8180030b 	ldhu	r6,12(r16)
 8008c4c:	80000c15 	stw	zero,48(r16)
 8008c50:	80c00417 	ldw	r3,16(r16)
 8008c54:	00bff6c4 	movi	r2,-37
 8008c58:	118c703a 	and	r6,r2,r6
 8008c5c:	80000115 	stw	zero,4(r16)
 8008c60:	80c00015 	stw	r3,0(r16)
 8008c64:	003fd206 	br	8008bb0 <__swsetup_r+0x8c>
 8008c68:	00800244 	movi	r2,9
 8008c6c:	88800015 	stw	r2,0(r17)
 8008c70:	31801014 	ori	r6,r6,64
 8008c74:	8180030d 	sth	r6,12(r16)
 8008c78:	00bfffc4 	movi	r2,-1
 8008c7c:	003fc206 	br	8008b88 <__swsetup_r+0x64>

08008c80 <quorem>:
 8008c80:	defff504 	addi	sp,sp,-44
 8008c84:	dc800315 	stw	r18,12(sp)
 8008c88:	20800417 	ldw	r2,16(r4)
 8008c8c:	2c800417 	ldw	r18,16(r5)
 8008c90:	dfc00a15 	stw	ra,40(sp)
 8008c94:	df000915 	stw	fp,36(sp)
 8008c98:	ddc00815 	stw	r23,32(sp)
 8008c9c:	dd800715 	stw	r22,28(sp)
 8008ca0:	dd400615 	stw	r21,24(sp)
 8008ca4:	dd000515 	stw	r20,20(sp)
 8008ca8:	dcc00415 	stw	r19,16(sp)
 8008cac:	dc400215 	stw	r17,8(sp)
 8008cb0:	dc000115 	stw	r16,4(sp)
 8008cb4:	14806f16 	blt	r2,r18,8008e74 <quorem+0x1f4>
 8008cb8:	94bfffc4 	addi	r18,r18,-1
 8008cbc:	902c90ba 	slli	r22,r18,2
 8008cc0:	2c000504 	addi	r16,r5,20
 8008cc4:	25000504 	addi	r20,r4,20
 8008cc8:	85a7883a 	add	r19,r16,r22
 8008ccc:	9f000017 	ldw	fp,0(r19)
 8008cd0:	a5ad883a 	add	r22,r20,r22
 8008cd4:	202b883a 	mov	r21,r4
 8008cd8:	b1000017 	ldw	r4,0(r22)
 8008cdc:	e7000044 	addi	fp,fp,1
 8008ce0:	282f883a 	mov	r23,r5
 8008ce4:	e00b883a 	mov	r5,fp
 8008ce8:	d9000015 	stw	r4,0(sp)
 8008cec:	8011fdc0 	call	8011fdc <__udivsi3>
 8008cf0:	d9000017 	ldw	r4,0(sp)
 8008cf4:	1023883a 	mov	r17,r2
 8008cf8:	27002a36 	bltu	r4,fp,8008da4 <quorem+0x124>
 8008cfc:	800b883a 	mov	r5,r16
 8008d00:	a009883a 	mov	r4,r20
 8008d04:	0013883a 	mov	r9,zero
 8008d08:	0007883a 	mov	r3,zero
 8008d0c:	2a000017 	ldw	r8,0(r5)
 8008d10:	21800017 	ldw	r6,0(r4)
 8008d14:	21000104 	addi	r4,r4,4
 8008d18:	40bfffcc 	andi	r2,r8,65535
 8008d1c:	1445383a 	mul	r2,r2,r17
 8008d20:	400ed43a 	srli	r7,r8,16
 8008d24:	32bfffcc 	andi	r10,r6,65535
 8008d28:	1245883a 	add	r2,r2,r9
 8008d2c:	1012d43a 	srli	r9,r2,16
 8008d30:	123fffcc 	andi	r8,r2,65535
 8008d34:	3c4f383a 	mul	r7,r7,r17
 8008d38:	1a07c83a 	sub	r3,r3,r8
 8008d3c:	1a91883a 	add	r8,r3,r10
 8008d40:	3006d43a 	srli	r3,r6,16
 8008d44:	4005d43a 	srai	r2,r8,16
 8008d48:	3a4f883a 	add	r7,r7,r9
 8008d4c:	39bfffcc 	andi	r6,r7,65535
 8008d50:	1987c83a 	sub	r3,r3,r6
 8008d54:	1887883a 	add	r3,r3,r2
 8008d58:	1804943a 	slli	r2,r3,16
 8008d5c:	423fffcc 	andi	r8,r8,65535
 8008d60:	29400104 	addi	r5,r5,4
 8008d64:	1210b03a 	or	r8,r2,r8
 8008d68:	223fff15 	stw	r8,-4(r4)
 8008d6c:	3812d43a 	srli	r9,r7,16
 8008d70:	1807d43a 	srai	r3,r3,16
 8008d74:	997fe52e 	bgeu	r19,r5,8008d0c <quorem+0x8c>
 8008d78:	b0800017 	ldw	r2,0(r22)
 8008d7c:	1000091e 	bne	r2,zero,8008da4 <quorem+0x124>
 8008d80:	b5bfff04 	addi	r22,r22,-4
 8008d84:	a5800336 	bltu	r20,r22,8008d94 <quorem+0x114>
 8008d88:	00000506 	br	8008da0 <quorem+0x120>
 8008d8c:	94bfffc4 	addi	r18,r18,-1
 8008d90:	a580032e 	bgeu	r20,r22,8008da0 <quorem+0x120>
 8008d94:	b0800017 	ldw	r2,0(r22)
 8008d98:	b5bfff04 	addi	r22,r22,-4
 8008d9c:	103ffb26 	beq	r2,zero,8008d8c <quorem+0x10c>
 8008da0:	ac800415 	stw	r18,16(r21)
 8008da4:	b80b883a 	mov	r5,r23
 8008da8:	a809883a 	mov	r4,r21
 8008dac:	800cc8c0 	call	800cc8c <__mcmp>
 8008db0:	10002316 	blt	r2,zero,8008e40 <quorem+0x1c0>
 8008db4:	8c400044 	addi	r17,r17,1
 8008db8:	a00d883a 	mov	r6,r20
 8008dbc:	0007883a 	mov	r3,zero
 8008dc0:	81000017 	ldw	r4,0(r16)
 8008dc4:	31400017 	ldw	r5,0(r6)
 8008dc8:	31800104 	addi	r6,r6,4
 8008dcc:	20bfffcc 	andi	r2,r4,65535
 8008dd0:	1887c83a 	sub	r3,r3,r2
 8008dd4:	28bfffcc 	andi	r2,r5,65535
 8008dd8:	1885883a 	add	r2,r3,r2
 8008ddc:	2008d43a 	srli	r4,r4,16
 8008de0:	2806d43a 	srli	r3,r5,16
 8008de4:	100fd43a 	srai	r7,r2,16
 8008de8:	117fffcc 	andi	r5,r2,65535
 8008dec:	1907c83a 	sub	r3,r3,r4
 8008df0:	19c7883a 	add	r3,r3,r7
 8008df4:	1804943a 	slli	r2,r3,16
 8008df8:	84000104 	addi	r16,r16,4
 8008dfc:	1807d43a 	srai	r3,r3,16
 8008e00:	1144b03a 	or	r2,r2,r5
 8008e04:	30bfff15 	stw	r2,-4(r6)
 8008e08:	9c3fed2e 	bgeu	r19,r16,8008dc0 <quorem+0x140>
 8008e0c:	900490ba 	slli	r2,r18,2
 8008e10:	a085883a 	add	r2,r20,r2
 8008e14:	10c00017 	ldw	r3,0(r2)
 8008e18:	1800091e 	bne	r3,zero,8008e40 <quorem+0x1c0>
 8008e1c:	10bfff04 	addi	r2,r2,-4
 8008e20:	a0800336 	bltu	r20,r2,8008e30 <quorem+0x1b0>
 8008e24:	00000506 	br	8008e3c <quorem+0x1bc>
 8008e28:	94bfffc4 	addi	r18,r18,-1
 8008e2c:	a080032e 	bgeu	r20,r2,8008e3c <quorem+0x1bc>
 8008e30:	10c00017 	ldw	r3,0(r2)
 8008e34:	10bfff04 	addi	r2,r2,-4
 8008e38:	183ffb26 	beq	r3,zero,8008e28 <quorem+0x1a8>
 8008e3c:	ac800415 	stw	r18,16(r21)
 8008e40:	8805883a 	mov	r2,r17
 8008e44:	dfc00a17 	ldw	ra,40(sp)
 8008e48:	df000917 	ldw	fp,36(sp)
 8008e4c:	ddc00817 	ldw	r23,32(sp)
 8008e50:	dd800717 	ldw	r22,28(sp)
 8008e54:	dd400617 	ldw	r21,24(sp)
 8008e58:	dd000517 	ldw	r20,20(sp)
 8008e5c:	dcc00417 	ldw	r19,16(sp)
 8008e60:	dc800317 	ldw	r18,12(sp)
 8008e64:	dc400217 	ldw	r17,8(sp)
 8008e68:	dc000117 	ldw	r16,4(sp)
 8008e6c:	dec00b04 	addi	sp,sp,44
 8008e70:	f800283a 	ret
 8008e74:	0005883a 	mov	r2,zero
 8008e78:	003ff206 	br	8008e44 <quorem+0x1c4>

08008e7c <_dtoa_r>:
 8008e7c:	20801017 	ldw	r2,64(r4)
 8008e80:	deffe204 	addi	sp,sp,-120
 8008e84:	ddc01b15 	stw	r23,108(sp)
 8008e88:	dd001815 	stw	r20,96(sp)
 8008e8c:	dc801615 	stw	r18,88(sp)
 8008e90:	dc401515 	stw	r17,84(sp)
 8008e94:	dc001415 	stw	r16,80(sp)
 8008e98:	dfc01d15 	stw	ra,116(sp)
 8008e9c:	df001c15 	stw	fp,112(sp)
 8008ea0:	dd801a15 	stw	r22,104(sp)
 8008ea4:	dd401915 	stw	r21,100(sp)
 8008ea8:	dcc01715 	stw	r19,92(sp)
 8008eac:	d9c00115 	stw	r7,4(sp)
 8008eb0:	dc002017 	ldw	r16,128(sp)
 8008eb4:	202f883a 	mov	r23,r4
 8008eb8:	3025883a 	mov	r18,r6
 8008ebc:	2829883a 	mov	r20,r5
 8008ec0:	3023883a 	mov	r17,r6
 8008ec4:	10000826 	beq	r2,zero,8008ee8 <_dtoa_r+0x6c>
 8008ec8:	21801117 	ldw	r6,68(r4)
 8008ecc:	00c00044 	movi	r3,1
 8008ed0:	100b883a 	mov	r5,r2
 8008ed4:	1986983a 	sll	r3,r3,r6
 8008ed8:	11800115 	stw	r6,4(r2)
 8008edc:	10c00215 	stw	r3,8(r2)
 8008ee0:	800c3c00 	call	800c3c0 <_Bfree>
 8008ee4:	b8001015 	stw	zero,64(r23)
 8008ee8:	90018616 	blt	r18,zero,8009504 <_dtoa_r+0x688>
 8008eec:	80000015 	stw	zero,0(r16)
 8008ef0:	909ffc2c 	andhi	r2,r18,32752
 8008ef4:	00dffc34 	movhi	r3,32752
 8008ef8:	10c18b26 	beq	r2,r3,8009528 <_dtoa_r+0x6ac>
 8008efc:	000d883a 	mov	r6,zero
 8008f00:	000f883a 	mov	r7,zero
 8008f04:	a009883a 	mov	r4,r20
 8008f08:	880b883a 	mov	r5,r17
 8008f0c:	80132740 	call	8013274 <__eqdf2>
 8008f10:	1000181e 	bne	r2,zero,8008f74 <_dtoa_r+0xf8>
 8008f14:	d8c01f17 	ldw	r3,124(sp)
 8008f18:	00800044 	movi	r2,1
 8008f1c:	18800015 	stw	r2,0(r3)
 8008f20:	d8802117 	ldw	r2,132(sp)
 8008f24:	10030b26 	beq	r2,zero,8009b54 <_dtoa_r+0xcd8>
 8008f28:	d8c02117 	ldw	r3,132(sp)
 8008f2c:	00820174 	movhi	r2,2053
 8008f30:	10816344 	addi	r2,r2,1421
 8008f34:	07020174 	movhi	fp,2053
 8008f38:	18800015 	stw	r2,0(r3)
 8008f3c:	e7016304 	addi	fp,fp,1420
 8008f40:	e005883a 	mov	r2,fp
 8008f44:	dfc01d17 	ldw	ra,116(sp)
 8008f48:	df001c17 	ldw	fp,112(sp)
 8008f4c:	ddc01b17 	ldw	r23,108(sp)
 8008f50:	dd801a17 	ldw	r22,104(sp)
 8008f54:	dd401917 	ldw	r21,100(sp)
 8008f58:	dd001817 	ldw	r20,96(sp)
 8008f5c:	dcc01717 	ldw	r19,92(sp)
 8008f60:	dc801617 	ldw	r18,88(sp)
 8008f64:	dc401517 	ldw	r17,84(sp)
 8008f68:	dc001417 	ldw	r16,80(sp)
 8008f6c:	dec01e04 	addi	sp,sp,120
 8008f70:	f800283a 	ret
 8008f74:	d8801204 	addi	r2,sp,72
 8008f78:	9020d53a 	srli	r16,r18,20
 8008f7c:	d8800015 	stw	r2,0(sp)
 8008f80:	d9c01304 	addi	r7,sp,76
 8008f84:	a00b883a 	mov	r5,r20
 8008f88:	880d883a 	mov	r6,r17
 8008f8c:	b809883a 	mov	r4,r23
 8008f90:	800d0700 	call	800d070 <__d2b>
 8008f94:	102d883a 	mov	r22,r2
 8008f98:	8001741e 	bne	r16,zero,800956c <_dtoa_r+0x6f0>
 8008f9c:	df001217 	ldw	fp,72(sp)
 8008fa0:	dc001317 	ldw	r16,76(sp)
 8008fa4:	e421883a 	add	r16,fp,r16
 8008fa8:	80810c84 	addi	r2,r16,1074
 8008fac:	10c00850 	cmplti	r3,r2,33
 8008fb0:	1802f81e 	bne	r3,zero,8009b94 <_dtoa_r+0xd18>
 8008fb4:	01001004 	movi	r4,64
 8008fb8:	2085c83a 	sub	r2,r4,r2
 8008fbc:	81010484 	addi	r4,r16,1042
 8008fc0:	90a4983a 	sll	r18,r18,r2
 8008fc4:	a108d83a 	srl	r4,r20,r4
 8008fc8:	9108b03a 	or	r4,r18,r4
 8008fcc:	80146080 	call	8014608 <__floatunsidf>
 8008fd0:	1009883a 	mov	r4,r2
 8008fd4:	017f8434 	movhi	r5,65040
 8008fd8:	00800044 	movi	r2,1
 8008fdc:	194b883a 	add	r5,r3,r5
 8008fe0:	843fffc4 	addi	r16,r16,-1
 8008fe4:	d8800915 	stw	r2,36(sp)
 8008fe8:	000d883a 	mov	r6,zero
 8008fec:	01cffe34 	movhi	r7,16376
 8008ff0:	8013b440 	call	8013b44 <__subdf3>
 8008ff4:	0198dbf4 	movhi	r6,25455
 8008ff8:	01cff4f4 	movhi	r7,16339
 8008ffc:	3190d844 	addi	r6,r6,17249
 8009000:	39e1e9c4 	addi	r7,r7,-30809
 8009004:	1009883a 	mov	r4,r2
 8009008:	180b883a 	mov	r5,r3
 800900c:	80134d40 	call	80134d4 <__muldf3>
 8009010:	01a2d874 	movhi	r6,35681
 8009014:	01cff1f4 	movhi	r7,16327
 8009018:	31b22cc4 	addi	r6,r6,-14157
 800901c:	39e28a04 	addi	r7,r7,-30168
 8009020:	180b883a 	mov	r5,r3
 8009024:	1009883a 	mov	r4,r2
 8009028:	801209c0 	call	801209c <__adddf3>
 800902c:	8009883a 	mov	r4,r16
 8009030:	1027883a 	mov	r19,r2
 8009034:	1825883a 	mov	r18,r3
 8009038:	801454c0 	call	801454c <__floatsidf>
 800903c:	019427f4 	movhi	r6,20639
 8009040:	01cff4f4 	movhi	r7,16339
 8009044:	319e7ec4 	addi	r6,r6,31227
 8009048:	39d104c4 	addi	r7,r7,17427
 800904c:	1009883a 	mov	r4,r2
 8009050:	180b883a 	mov	r5,r3
 8009054:	80134d40 	call	80134d4 <__muldf3>
 8009058:	100d883a 	mov	r6,r2
 800905c:	180f883a 	mov	r7,r3
 8009060:	9809883a 	mov	r4,r19
 8009064:	900b883a 	mov	r5,r18
 8009068:	801209c0 	call	801209c <__adddf3>
 800906c:	1009883a 	mov	r4,r2
 8009070:	180b883a 	mov	r5,r3
 8009074:	1025883a 	mov	r18,r2
 8009078:	182b883a 	mov	r21,r3
 800907c:	80144cc0 	call	80144cc <__fixdfsi>
 8009080:	000d883a 	mov	r6,zero
 8009084:	000f883a 	mov	r7,zero
 8009088:	9009883a 	mov	r4,r18
 800908c:	a80b883a 	mov	r5,r21
 8009090:	1027883a 	mov	r19,r2
 8009094:	80133e40 	call	80133e4 <__ledf2>
 8009098:	1002a416 	blt	r2,zero,8009b2c <_dtoa_r+0xcb0>
 800909c:	e439c83a 	sub	fp,fp,r16
 80090a0:	e0ffffc4 	addi	r3,fp,-1
 80090a4:	988005e8 	cmpgeui	r2,r19,23
 80090a8:	d8c00215 	stw	r3,8(sp)
 80090ac:	1002961e 	bne	r2,zero,8009b08 <_dtoa_r+0xc8c>
 80090b0:	980690fa 	slli	r3,r19,3
 80090b4:	00820174 	movhi	r2,2053
 80090b8:	1081b204 	addi	r2,r2,1736
 80090bc:	10c5883a 	add	r2,r2,r3
 80090c0:	11800017 	ldw	r6,0(r2)
 80090c4:	11c00117 	ldw	r7,4(r2)
 80090c8:	a009883a 	mov	r4,r20
 80090cc:	880b883a 	mov	r5,r17
 80090d0:	80133e40 	call	80133e4 <__ledf2>
 80090d4:	1002670e 	bge	r2,zero,8009a74 <_dtoa_r+0xbf8>
 80090d8:	d8000815 	stw	zero,32(sp)
 80090dc:	e0bfffc4 	addi	r2,fp,-1
 80090e0:	9cffffc4 	addi	r19,r19,-1
 80090e4:	10028c16 	blt	r2,zero,8009b18 <_dtoa_r+0xc9c>
 80090e8:	d8000515 	stw	zero,20(sp)
 80090ec:	9802650e 	bge	r19,zero,8009a84 <_dtoa_r+0xc08>
 80090f0:	d8800517 	ldw	r2,20(sp)
 80090f4:	d8c00117 	ldw	r3,4(sp)
 80090f8:	dcc00315 	stw	r19,12(sp)
 80090fc:	14c5c83a 	sub	r2,r2,r19
 8009100:	d8800515 	stw	r2,20(sp)
 8009104:	04c5c83a 	sub	r2,zero,r19
 8009108:	d8800715 	stw	r2,28(sp)
 800910c:	188002a8 	cmpgeui	r2,r3,10
 8009110:	0027883a 	mov	r19,zero
 8009114:	1002631e 	bne	r2,zero,8009aa4 <_dtoa_r+0xc28>
 8009118:	18800190 	cmplti	r2,r3,6
 800911c:	1002a11e 	bne	r2,zero,8009ba4 <_dtoa_r+0xd28>
 8009120:	18bfff04 	addi	r2,r3,-4
 8009124:	d8800115 	stw	r2,4(sp)
 8009128:	0021883a 	mov	r16,zero
 800912c:	d8c00117 	ldw	r3,4(sp)
 8009130:	18800120 	cmpeqi	r2,r3,4
 8009134:	1003721e 	bne	r2,zero,8009f00 <_dtoa_r+0x1084>
 8009138:	18800160 	cmpeqi	r2,r3,5
 800913c:	10032f1e 	bne	r2,zero,8009dfc <_dtoa_r+0xf80>
 8009140:	188000a0 	cmpeqi	r2,r3,2
 8009144:	10026326 	beq	r2,zero,8009ad4 <_dtoa_r+0xc58>
 8009148:	d8000615 	stw	zero,24(sp)
 800914c:	d8801e17 	ldw	r2,120(sp)
 8009150:	00833c0e 	bge	zero,r2,8009e44 <_dtoa_r+0xfc8>
 8009154:	d8800b15 	stw	r2,44(sp)
 8009158:	d8800415 	stw	r2,16(sp)
 800915c:	100d883a 	mov	r6,r2
 8009160:	b8001115 	stw	zero,68(r23)
 8009164:	30800610 	cmplti	r2,r6,24
 8009168:	1005161e 	bne	r2,zero,800a5c4 <_dtoa_r+0x1748>
 800916c:	00c00044 	movi	r3,1
 8009170:	00800104 	movi	r2,4
 8009174:	1085883a 	add	r2,r2,r2
 8009178:	11000504 	addi	r4,r2,20
 800917c:	180b883a 	mov	r5,r3
 8009180:	18c00044 	addi	r3,r3,1
 8009184:	313ffb2e 	bgeu	r6,r4,8009174 <_dtoa_r+0x2f8>
 8009188:	b9401115 	stw	r5,68(r23)
 800918c:	b809883a 	mov	r4,r23
 8009190:	800c31c0 	call	800c31c <_Balloc>
 8009194:	1039883a 	mov	fp,r2
 8009198:	1004f526 	beq	r2,zero,800a570 <_dtoa_r+0x16f4>
 800919c:	b8801015 	stw	r2,64(r23)
 80091a0:	d8800417 	ldw	r2,16(sp)
 80091a4:	108003e8 	cmpgeui	r2,r2,15
 80091a8:	10010b1e 	bne	r2,zero,80095d8 <_dtoa_r+0x75c>
 80091ac:	80010a26 	beq	r16,zero,80095d8 <_dtoa_r+0x75c>
 80091b0:	d9000317 	ldw	r4,12(sp)
 80091b4:	0103a30e 	bge	zero,r4,800a044 <_dtoa_r+0x11c8>
 80091b8:	208003cc 	andi	r2,r4,15
 80091bc:	100690fa 	slli	r3,r2,3
 80091c0:	202bd13a 	srai	r21,r4,4
 80091c4:	00820174 	movhi	r2,2053
 80091c8:	1081b204 	addi	r2,r2,1736
 80091cc:	10c5883a 	add	r2,r2,r3
 80091d0:	a8c0040c 	andi	r3,r21,16
 80091d4:	12800017 	ldw	r10,0(r2)
 80091d8:	12400117 	ldw	r9,4(r2)
 80091dc:	18034226 	beq	r3,zero,8009ee8 <_dtoa_r+0x106c>
 80091e0:	00820174 	movhi	r2,2053
 80091e4:	1081a804 	addi	r2,r2,1696
 80091e8:	11800817 	ldw	r6,32(r2)
 80091ec:	11c00917 	ldw	r7,36(r2)
 80091f0:	a009883a 	mov	r4,r20
 80091f4:	880b883a 	mov	r5,r17
 80091f8:	da400e15 	stw	r9,56(sp)
 80091fc:	da800d15 	stw	r10,52(sp)
 8009200:	8012a140 	call	8012a14 <__divdf3>
 8009204:	da800d17 	ldw	r10,52(sp)
 8009208:	da400e17 	ldw	r9,56(sp)
 800920c:	ad4003cc 	andi	r21,r21,15
 8009210:	d8800a15 	stw	r2,40(sp)
 8009214:	d8c00c15 	stw	r3,48(sp)
 8009218:	040000c4 	movi	r16,3
 800921c:	a8001126 	beq	r21,zero,8009264 <_dtoa_r+0x3e8>
 8009220:	04820174 	movhi	r18,2053
 8009224:	9481a804 	addi	r18,r18,1696
 8009228:	5009883a 	mov	r4,r10
 800922c:	480b883a 	mov	r5,r9
 8009230:	a980004c 	andi	r6,r21,1
 8009234:	30000626 	beq	r6,zero,8009250 <_dtoa_r+0x3d4>
 8009238:	91800017 	ldw	r6,0(r18)
 800923c:	91c00117 	ldw	r7,4(r18)
 8009240:	84000044 	addi	r16,r16,1
 8009244:	80134d40 	call	80134d4 <__muldf3>
 8009248:	1009883a 	mov	r4,r2
 800924c:	180b883a 	mov	r5,r3
 8009250:	a82bd07a 	srai	r21,r21,1
 8009254:	94800204 	addi	r18,r18,8
 8009258:	a83ff51e 	bne	r21,zero,8009230 <_dtoa_r+0x3b4>
 800925c:	2015883a 	mov	r10,r4
 8009260:	2813883a 	mov	r9,r5
 8009264:	d9000a17 	ldw	r4,40(sp)
 8009268:	d9400c17 	ldw	r5,48(sp)
 800926c:	500d883a 	mov	r6,r10
 8009270:	480f883a 	mov	r7,r9
 8009274:	8012a140 	call	8012a14 <__divdf3>
 8009278:	1025883a 	mov	r18,r2
 800927c:	d8c00a15 	stw	r3,40(sp)
 8009280:	d8800817 	ldw	r2,32(sp)
 8009284:	10000726 	beq	r2,zero,80092a4 <_dtoa_r+0x428>
 8009288:	dd400a17 	ldw	r21,40(sp)
 800928c:	000d883a 	mov	r6,zero
 8009290:	01cffc34 	movhi	r7,16368
 8009294:	9009883a 	mov	r4,r18
 8009298:	a80b883a 	mov	r5,r21
 800929c:	80133e40 	call	80133e4 <__ledf2>
 80092a0:	10045516 	blt	r2,zero,800a3f8 <_dtoa_r+0x157c>
 80092a4:	8009883a 	mov	r4,r16
 80092a8:	801454c0 	call	801454c <__floatsidf>
 80092ac:	d9c00a17 	ldw	r7,40(sp)
 80092b0:	900d883a 	mov	r6,r18
 80092b4:	1009883a 	mov	r4,r2
 80092b8:	180b883a 	mov	r5,r3
 80092bc:	80134d40 	call	80134d4 <__muldf3>
 80092c0:	000d883a 	mov	r6,zero
 80092c4:	01d00734 	movhi	r7,16412
 80092c8:	1009883a 	mov	r4,r2
 80092cc:	180b883a 	mov	r5,r3
 80092d0:	801209c0 	call	801209c <__adddf3>
 80092d4:	d8800c15 	stw	r2,48(sp)
 80092d8:	00bf3034 	movhi	r2,64704
 80092dc:	1885883a 	add	r2,r3,r2
 80092e0:	d8800d15 	stw	r2,52(sp)
 80092e4:	d8800417 	ldw	r2,16(sp)
 80092e8:	10033926 	beq	r2,zero,8009fd0 <_dtoa_r+0x1154>
 80092ec:	d8800317 	ldw	r2,12(sp)
 80092f0:	d8801115 	stw	r2,68(sp)
 80092f4:	d8800417 	ldw	r2,16(sp)
 80092f8:	d8800e15 	stw	r2,56(sp)
 80092fc:	dc000a17 	ldw	r16,40(sp)
 8009300:	9009883a 	mov	r4,r18
 8009304:	800b883a 	mov	r5,r16
 8009308:	80144cc0 	call	80144cc <__fixdfsi>
 800930c:	d8c00e17 	ldw	r3,56(sp)
 8009310:	d8801015 	stw	r2,64(sp)
 8009314:	18ffffc4 	addi	r3,r3,-1
 8009318:	180890fa 	slli	r4,r3,3
 800931c:	00c20174 	movhi	r3,2053
 8009320:	18c1b204 	addi	r3,r3,1736
 8009324:	1907883a 	add	r3,r3,r4
 8009328:	1b000017 	ldw	r12,0(r3)
 800932c:	1b400117 	ldw	r13,4(r3)
 8009330:	1009883a 	mov	r4,r2
 8009334:	db000f15 	stw	r12,60(sp)
 8009338:	db400a15 	stw	r13,40(sp)
 800933c:	801454c0 	call	801454c <__floatsidf>
 8009340:	9009883a 	mov	r4,r18
 8009344:	800b883a 	mov	r5,r16
 8009348:	100d883a 	mov	r6,r2
 800934c:	180f883a 	mov	r7,r3
 8009350:	8013b440 	call	8013b44 <__subdf3>
 8009354:	dac01017 	ldw	r11,64(sp)
 8009358:	102b883a 	mov	r21,r2
 800935c:	d8800617 	ldw	r2,24(sp)
 8009360:	db400a17 	ldw	r13,40(sp)
 8009364:	db000f17 	ldw	r12,60(sp)
 8009368:	e4000044 	addi	r16,fp,1
 800936c:	1825883a 	mov	r18,r3
 8009370:	5ac00c04 	addi	r11,r11,48
 8009374:	1003c626 	beq	r2,zero,800a290 <_dtoa_r+0x1414>
 8009378:	600d883a 	mov	r6,r12
 800937c:	680f883a 	mov	r7,r13
 8009380:	0009883a 	mov	r4,zero
 8009384:	014ff834 	movhi	r5,16352
 8009388:	dac00f15 	stw	r11,60(sp)
 800938c:	8012a140 	call	8012a14 <__divdf3>
 8009390:	d9800c17 	ldw	r6,48(sp)
 8009394:	d9c00d17 	ldw	r7,52(sp)
 8009398:	1009883a 	mov	r4,r2
 800939c:	180b883a 	mov	r5,r3
 80093a0:	8013b440 	call	8013b44 <__subdf3>
 80093a4:	dac00f17 	ldw	r11,60(sp)
 80093a8:	a80d883a 	mov	r6,r21
 80093ac:	900f883a 	mov	r7,r18
 80093b0:	e2c00005 	stb	r11,0(fp)
 80093b4:	1009883a 	mov	r4,r2
 80093b8:	180b883a 	mov	r5,r3
 80093bc:	d8800a15 	stw	r2,40(sp)
 80093c0:	d8c00c15 	stw	r3,48(sp)
 80093c4:	80132f40 	call	80132f4 <__gedf2>
 80093c8:	00844116 	blt	zero,r2,800a4d0 <_dtoa_r+0x1654>
 80093cc:	0005883a 	mov	r2,zero
 80093d0:	dcc00f15 	stw	r19,60(sp)
 80093d4:	dd800d15 	stw	r22,52(sp)
 80093d8:	dcc00c17 	ldw	r19,48(sp)
 80093dc:	dd800e17 	ldw	r22,56(sp)
 80093e0:	dc400c15 	stw	r17,48(sp)
 80093e4:	ddc00e15 	stw	r23,56(sp)
 80093e8:	dc400a17 	ldw	r17,40(sp)
 80093ec:	dd000a15 	stw	r20,40(sp)
 80093f0:	1029883a 	mov	r20,r2
 80093f4:	00002606 	br	8009490 <_dtoa_r+0x614>
 80093f8:	a5000044 	addi	r20,r20,1
 80093fc:	a5843d0e 	bge	r20,r22,800a4f4 <_dtoa_r+0x1678>
 8009400:	8809883a 	mov	r4,r17
 8009404:	980b883a 	mov	r5,r19
 8009408:	000d883a 	mov	r6,zero
 800940c:	01d00934 	movhi	r7,16420
 8009410:	80134d40 	call	80134d4 <__muldf3>
 8009414:	000d883a 	mov	r6,zero
 8009418:	01d00934 	movhi	r7,16420
 800941c:	a809883a 	mov	r4,r21
 8009420:	900b883a 	mov	r5,r18
 8009424:	1023883a 	mov	r17,r2
 8009428:	1827883a 	mov	r19,r3
 800942c:	80134d40 	call	80134d4 <__muldf3>
 8009430:	180b883a 	mov	r5,r3
 8009434:	1009883a 	mov	r4,r2
 8009438:	1825883a 	mov	r18,r3
 800943c:	102b883a 	mov	r21,r2
 8009440:	80144cc0 	call	80144cc <__fixdfsi>
 8009444:	1009883a 	mov	r4,r2
 8009448:	102f883a 	mov	r23,r2
 800944c:	801454c0 	call	801454c <__floatsidf>
 8009450:	a809883a 	mov	r4,r21
 8009454:	900b883a 	mov	r5,r18
 8009458:	100d883a 	mov	r6,r2
 800945c:	180f883a 	mov	r7,r3
 8009460:	8013b440 	call	8013b44 <__subdf3>
 8009464:	84000044 	addi	r16,r16,1
 8009468:	ba000c04 	addi	r8,r23,48
 800946c:	823fffc5 	stb	r8,-1(r16)
 8009470:	880d883a 	mov	r6,r17
 8009474:	980f883a 	mov	r7,r19
 8009478:	1009883a 	mov	r4,r2
 800947c:	180b883a 	mov	r5,r3
 8009480:	102b883a 	mov	r21,r2
 8009484:	1825883a 	mov	r18,r3
 8009488:	80133e40 	call	80133e4 <__ledf2>
 800948c:	10040e16 	blt	r2,zero,800a4c8 <_dtoa_r+0x164c>
 8009490:	a80d883a 	mov	r6,r21
 8009494:	900f883a 	mov	r7,r18
 8009498:	0009883a 	mov	r4,zero
 800949c:	014ffc34 	movhi	r5,16368
 80094a0:	8013b440 	call	8013b44 <__subdf3>
 80094a4:	880d883a 	mov	r6,r17
 80094a8:	980f883a 	mov	r7,r19
 80094ac:	1009883a 	mov	r4,r2
 80094b0:	180b883a 	mov	r5,r3
 80094b4:	80133e40 	call	80133e4 <__ledf2>
 80094b8:	103fcf0e 	bge	r2,zero,80093f8 <_dtoa_r+0x57c>
 80094bc:	dd800d17 	ldw	r22,52(sp)
 80094c0:	ddc00e17 	ldw	r23,56(sp)
 80094c4:	d8801117 	ldw	r2,68(sp)
 80094c8:	10800044 	addi	r2,r2,1
 80094cc:	d8800315 	stw	r2,12(sp)
 80094d0:	00000106 	br	80094d8 <_dtoa_r+0x65c>
 80094d4:	e403ee26 	beq	fp,r16,800a490 <_dtoa_r+0x1614>
 80094d8:	80ffffc3 	ldbu	r3,-1(r16)
 80094dc:	8025883a 	mov	r18,r16
 80094e0:	843fffc4 	addi	r16,r16,-1
 80094e4:	18803fcc 	andi	r2,r3,255
 80094e8:	1080201c 	xori	r2,r2,128
 80094ec:	10bfe004 	addi	r2,r2,-128
 80094f0:	10800e60 	cmpeqi	r2,r2,57
 80094f4:	103ff71e 	bne	r2,zero,80094d4 <_dtoa_r+0x658>
 80094f8:	18c00044 	addi	r3,r3,1
 80094fc:	80c00005 	stb	r3,0(r16)
 8009500:	00015106 	br	8009a48 <_dtoa_r+0xbcc>
 8009504:	04600034 	movhi	r17,32768
 8009508:	8c7fffc4 	addi	r17,r17,-1
 800950c:	9462703a 	and	r17,r18,r17
 8009510:	00800044 	movi	r2,1
 8009514:	8825883a 	mov	r18,r17
 8009518:	80800015 	stw	r2,0(r16)
 800951c:	00dffc34 	movhi	r3,32752
 8009520:	909ffc2c 	andhi	r2,r18,32752
 8009524:	10fe751e 	bne	r2,r3,8008efc <_dtoa_r+0x80>
 8009528:	d8c01f17 	ldw	r3,124(sp)
 800952c:	00800434 	movhi	r2,16
 8009530:	10bfffc4 	addi	r2,r2,-1
 8009534:	90a4703a 	and	r18,r18,r2
 8009538:	0089c3c4 	movi	r2,9999
 800953c:	18800015 	stw	r2,0(r3)
 8009540:	9528b03a 	or	r20,r18,r20
 8009544:	a000121e 	bne	r20,zero,8009590 <_dtoa_r+0x714>
 8009548:	d8802117 	ldw	r2,132(sp)
 800954c:	07020174 	movhi	fp,2053
 8009550:	10041526 	beq	r2,zero,800a5a8 <_dtoa_r+0x172c>
 8009554:	00820174 	movhi	r2,2053
 8009558:	e7017504 	addi	fp,fp,1492
 800955c:	10817704 	addi	r2,r2,1500
 8009560:	d8c02117 	ldw	r3,132(sp)
 8009564:	18800015 	stw	r2,0(r3)
 8009568:	003e7506 	br	8008f40 <_dtoa_r+0xc4>
 800956c:	01400434 	movhi	r5,16
 8009570:	297fffc4 	addi	r5,r5,-1
 8009574:	894a703a 	and	r5,r17,r5
 8009578:	df001217 	ldw	fp,72(sp)
 800957c:	a009883a 	mov	r4,r20
 8009580:	294ffc34 	orhi	r5,r5,16368
 8009584:	843f0044 	addi	r16,r16,-1023
 8009588:	d8000915 	stw	zero,36(sp)
 800958c:	003e9606 	br	8008fe8 <_dtoa_r+0x16c>
 8009590:	d8802117 	ldw	r2,132(sp)
 8009594:	07020174 	movhi	fp,2053
 8009598:	1002141e 	bne	r2,zero,8009dec <_dtoa_r+0xf70>
 800959c:	e7017404 	addi	fp,fp,1488
 80095a0:	003e6706 	br	8008f40 <_dtoa_r+0xc4>
 80095a4:	b8001115 	stw	zero,68(r23)
 80095a8:	000b883a 	mov	r5,zero
 80095ac:	b809883a 	mov	r4,r23
 80095b0:	800c31c0 	call	800c31c <_Balloc>
 80095b4:	1039883a 	mov	fp,r2
 80095b8:	1003ed26 	beq	r2,zero,800a570 <_dtoa_r+0x16f4>
 80095bc:	b8801015 	stw	r2,64(r23)
 80095c0:	00bfffc4 	movi	r2,-1
 80095c4:	d8800415 	stw	r2,16(sp)
 80095c8:	d8800b15 	stw	r2,44(sp)
 80095cc:	00800044 	movi	r2,1
 80095d0:	d8001e15 	stw	zero,120(sp)
 80095d4:	d8800615 	stw	r2,24(sp)
 80095d8:	d8801317 	ldw	r2,76(sp)
 80095dc:	10007216 	blt	r2,zero,80097a8 <_dtoa_r+0x92c>
 80095e0:	d9000317 	ldw	r4,12(sp)
 80095e4:	20c003c8 	cmpgei	r3,r4,15
 80095e8:	18006f1e 	bne	r3,zero,80097a8 <_dtoa_r+0x92c>
 80095ec:	200690fa 	slli	r3,r4,3
 80095f0:	00820174 	movhi	r2,2053
 80095f4:	1081b204 	addi	r2,r2,1736
 80095f8:	10c5883a 	add	r2,r2,r3
 80095fc:	10c00017 	ldw	r3,0(r2)
 8009600:	14800117 	ldw	r18,4(r2)
 8009604:	d8801e17 	ldw	r2,120(sp)
 8009608:	d8c00115 	stw	r3,4(sp)
 800960c:	1000150e 	bge	r2,zero,8009664 <_dtoa_r+0x7e8>
 8009610:	d8800417 	ldw	r2,16(sp)
 8009614:	00801316 	blt	zero,r2,8009664 <_dtoa_r+0x7e8>
 8009618:	d8800417 	ldw	r2,16(sp)
 800961c:	1002801e 	bne	r2,zero,800a020 <_dtoa_r+0x11a4>
 8009620:	d9000117 	ldw	r4,4(sp)
 8009624:	000d883a 	mov	r6,zero
 8009628:	01d00534 	movhi	r7,16404
 800962c:	900b883a 	mov	r5,r18
 8009630:	80134d40 	call	80134d4 <__muldf3>
 8009634:	100d883a 	mov	r6,r2
 8009638:	180f883a 	mov	r7,r3
 800963c:	a009883a 	mov	r4,r20
 8009640:	880b883a 	mov	r5,r17
 8009644:	80133e40 	call	80133e4 <__ledf2>
 8009648:	002b883a 	mov	r21,zero
 800964c:	0021883a 	mov	r16,zero
 8009650:	00820f16 	blt	zero,r2,8009e90 <_dtoa_r+0x1014>
 8009654:	d8801e17 	ldw	r2,120(sp)
 8009658:	e025883a 	mov	r18,fp
 800965c:	00a2303a 	nor	r17,zero,r2
 8009660:	00021006 	br	8009ea4 <_dtoa_r+0x1028>
 8009664:	dd400117 	ldw	r21,4(sp)
 8009668:	900f883a 	mov	r7,r18
 800966c:	a009883a 	mov	r4,r20
 8009670:	a80d883a 	mov	r6,r21
 8009674:	880b883a 	mov	r5,r17
 8009678:	8012a140 	call	8012a14 <__divdf3>
 800967c:	180b883a 	mov	r5,r3
 8009680:	1009883a 	mov	r4,r2
 8009684:	80144cc0 	call	80144cc <__fixdfsi>
 8009688:	1009883a 	mov	r4,r2
 800968c:	1027883a 	mov	r19,r2
 8009690:	801454c0 	call	801454c <__floatsidf>
 8009694:	a80d883a 	mov	r6,r21
 8009698:	900f883a 	mov	r7,r18
 800969c:	1009883a 	mov	r4,r2
 80096a0:	180b883a 	mov	r5,r3
 80096a4:	80134d40 	call	80134d4 <__muldf3>
 80096a8:	100d883a 	mov	r6,r2
 80096ac:	a009883a 	mov	r4,r20
 80096b0:	880b883a 	mov	r5,r17
 80096b4:	180f883a 	mov	r7,r3
 80096b8:	8013b440 	call	8013b44 <__subdf3>
 80096bc:	d9800417 	ldw	r6,16(sp)
 80096c0:	1009883a 	mov	r4,r2
 80096c4:	98800c04 	addi	r2,r19,48
 80096c8:	e0800005 	stb	r2,0(fp)
 80096cc:	30800060 	cmpeqi	r2,r6,1
 80096d0:	180b883a 	mov	r5,r3
 80096d4:	e4000044 	addi	r16,fp,1
 80096d8:	1002a91e 	bne	r2,zero,800a180 <_dtoa_r+0x1304>
 80096dc:	04400044 	movi	r17,1
 80096e0:	3027883a 	mov	r19,r6
 80096e4:	dd800215 	stw	r22,8(sp)
 80096e8:	ddc00415 	stw	r23,16(sp)
 80096ec:	00001c06 	br	8009760 <_dtoa_r+0x8e4>
 80096f0:	a80d883a 	mov	r6,r21
 80096f4:	900f883a 	mov	r7,r18
 80096f8:	b809883a 	mov	r4,r23
 80096fc:	a00b883a 	mov	r5,r20
 8009700:	8012a140 	call	8012a14 <__divdf3>
 8009704:	180b883a 	mov	r5,r3
 8009708:	1009883a 	mov	r4,r2
 800970c:	80144cc0 	call	80144cc <__fixdfsi>
 8009710:	1009883a 	mov	r4,r2
 8009714:	102d883a 	mov	r22,r2
 8009718:	801454c0 	call	801454c <__floatsidf>
 800971c:	a80d883a 	mov	r6,r21
 8009720:	900f883a 	mov	r7,r18
 8009724:	1009883a 	mov	r4,r2
 8009728:	180b883a 	mov	r5,r3
 800972c:	80134d40 	call	80134d4 <__muldf3>
 8009730:	b809883a 	mov	r4,r23
 8009734:	a00b883a 	mov	r5,r20
 8009738:	100d883a 	mov	r6,r2
 800973c:	180f883a 	mov	r7,r3
 8009740:	8013b440 	call	8013b44 <__subdf3>
 8009744:	b1000c04 	addi	r4,r22,48
 8009748:	81000005 	stb	r4,0(r16)
 800974c:	8c400044 	addi	r17,r17,1
 8009750:	84000044 	addi	r16,r16,1
 8009754:	1009883a 	mov	r4,r2
 8009758:	180b883a 	mov	r5,r3
 800975c:	9c428526 	beq	r19,r17,800a174 <_dtoa_r+0x12f8>
 8009760:	000d883a 	mov	r6,zero
 8009764:	01d00934 	movhi	r7,16420
 8009768:	80134d40 	call	80134d4 <__muldf3>
 800976c:	000d883a 	mov	r6,zero
 8009770:	000f883a 	mov	r7,zero
 8009774:	1009883a 	mov	r4,r2
 8009778:	180b883a 	mov	r5,r3
 800977c:	102f883a 	mov	r23,r2
 8009780:	1829883a 	mov	r20,r3
 8009784:	80132740 	call	8013274 <__eqdf2>
 8009788:	103fd91e 	bne	r2,zero,80096f0 <_dtoa_r+0x874>
 800978c:	d8800317 	ldw	r2,12(sp)
 8009790:	dd800217 	ldw	r22,8(sp)
 8009794:	ddc00417 	ldw	r23,16(sp)
 8009798:	10800044 	addi	r2,r2,1
 800979c:	d8800315 	stw	r2,12(sp)
 80097a0:	8025883a 	mov	r18,r16
 80097a4:	0000a806 	br	8009a48 <_dtoa_r+0xbcc>
 80097a8:	d8c00617 	ldw	r3,24(sp)
 80097ac:	1800ec26 	beq	r3,zero,8009b60 <_dtoa_r+0xce4>
 80097b0:	d8c00117 	ldw	r3,4(sp)
 80097b4:	18c00088 	cmpgei	r3,r3,2
 80097b8:	1801e926 	beq	r3,zero,8009f60 <_dtoa_r+0x10e4>
 80097bc:	d8800417 	ldw	r2,16(sp)
 80097c0:	157fffc4 	addi	r21,r2,-1
 80097c4:	d8800717 	ldw	r2,28(sp)
 80097c8:	1541c50e 	bge	r2,r21,8009ee0 <_dtoa_r+0x1064>
 80097cc:	d8800717 	ldw	r2,28(sp)
 80097d0:	dd400715 	stw	r21,28(sp)
 80097d4:	a885c83a 	sub	r2,r21,r2
 80097d8:	98a7883a 	add	r19,r19,r2
 80097dc:	002b883a 	mov	r21,zero
 80097e0:	d8800417 	ldw	r2,16(sp)
 80097e4:	10029516 	blt	r2,zero,800a23c <_dtoa_r+0x13c0>
 80097e8:	d8c00517 	ldw	r3,20(sp)
 80097ec:	d9000217 	ldw	r4,8(sp)
 80097f0:	1825883a 	mov	r18,r3
 80097f4:	2089883a 	add	r4,r4,r2
 80097f8:	10c5883a 	add	r2,r2,r3
 80097fc:	d9000215 	stw	r4,8(sp)
 8009800:	d8800515 	stw	r2,20(sp)
 8009804:	01400044 	movi	r5,1
 8009808:	b809883a 	mov	r4,r23
 800980c:	800c7680 	call	800c768 <__i2b>
 8009810:	1021883a 	mov	r16,r2
 8009814:	04800b0e 	bge	zero,r18,8009844 <_dtoa_r+0x9c8>
 8009818:	d8c00217 	ldw	r3,8(sp)
 800981c:	00c0090e 	bge	zero,r3,8009844 <_dtoa_r+0x9c8>
 8009820:	9005883a 	mov	r2,r18
 8009824:	1c81a616 	blt	r3,r18,8009ec0 <_dtoa_r+0x1044>
 8009828:	d8c00517 	ldw	r3,20(sp)
 800982c:	90a5c83a 	sub	r18,r18,r2
 8009830:	1887c83a 	sub	r3,r3,r2
 8009834:	d8c00515 	stw	r3,20(sp)
 8009838:	d8c00217 	ldw	r3,8(sp)
 800983c:	1885c83a 	sub	r2,r3,r2
 8009840:	d8800215 	stw	r2,8(sp)
 8009844:	d8800717 	ldw	r2,28(sp)
 8009848:	10001526 	beq	r2,zero,80098a0 <_dtoa_r+0xa24>
 800984c:	d8800617 	ldw	r2,24(sp)
 8009850:	1001f626 	beq	r2,zero,800a02c <_dtoa_r+0x11b0>
 8009854:	05400f0e 	bge	zero,r21,8009894 <_dtoa_r+0xa18>
 8009858:	800b883a 	mov	r5,r16
 800985c:	a80d883a 	mov	r6,r21
 8009860:	b809883a 	mov	r4,r23
 8009864:	800c9ec0 	call	800c9ec <__pow5mult>
 8009868:	b00d883a 	mov	r6,r22
 800986c:	100b883a 	mov	r5,r2
 8009870:	b809883a 	mov	r4,r23
 8009874:	1021883a 	mov	r16,r2
 8009878:	800c7bc0 	call	800c7bc <__multiply>
 800987c:	b00b883a 	mov	r5,r22
 8009880:	b809883a 	mov	r4,r23
 8009884:	d8800915 	stw	r2,36(sp)
 8009888:	800c3c00 	call	800c3c0 <_Bfree>
 800988c:	d8800917 	ldw	r2,36(sp)
 8009890:	102d883a 	mov	r22,r2
 8009894:	d8800717 	ldw	r2,28(sp)
 8009898:	154dc83a 	sub	r6,r2,r21
 800989c:	1542621e 	bne	r2,r21,800a228 <_dtoa_r+0x13ac>
 80098a0:	01400044 	movi	r5,1
 80098a4:	b809883a 	mov	r4,r23
 80098a8:	800c7680 	call	800c768 <__i2b>
 80098ac:	102b883a 	mov	r21,r2
 80098b0:	04c0be16 	blt	zero,r19,8009bac <_dtoa_r+0xd30>
 80098b4:	d8800117 	ldw	r2,4(sp)
 80098b8:	10800088 	cmpgei	r2,r2,2
 80098bc:	10015226 	beq	r2,zero,8009e08 <_dtoa_r+0xf8c>
 80098c0:	0023883a 	mov	r17,zero
 80098c4:	00800044 	movi	r2,1
 80098c8:	9800c11e 	bne	r19,zero,8009bd0 <_dtoa_r+0xd54>
 80098cc:	d9400217 	ldw	r5,8(sp)
 80098d0:	1145883a 	add	r2,r2,r5
 80098d4:	108007cc 	andi	r2,r2,31
 80098d8:	1000a526 	beq	r2,zero,8009b70 <_dtoa_r+0xcf4>
 80098dc:	00c00804 	movi	r3,32
 80098e0:	1887c83a 	sub	r3,r3,r2
 80098e4:	19000150 	cmplti	r4,r3,5
 80098e8:	2003311e 	bne	r4,zero,800a5b0 <_dtoa_r+0x1734>
 80098ec:	00c00704 	movi	r3,28
 80098f0:	1885c83a 	sub	r2,r3,r2
 80098f4:	d8c00517 	ldw	r3,20(sp)
 80098f8:	90a5883a 	add	r18,r18,r2
 80098fc:	1887883a 	add	r3,r3,r2
 8009900:	2885883a 	add	r2,r5,r2
 8009904:	d8c00515 	stw	r3,20(sp)
 8009908:	d8800215 	stw	r2,8(sp)
 800990c:	d8800517 	ldw	r2,20(sp)
 8009910:	0080050e 	bge	zero,r2,8009928 <_dtoa_r+0xaac>
 8009914:	b00b883a 	mov	r5,r22
 8009918:	100d883a 	mov	r6,r2
 800991c:	b809883a 	mov	r4,r23
 8009920:	800cb040 	call	800cb04 <__lshift>
 8009924:	102d883a 	mov	r22,r2
 8009928:	d8800217 	ldw	r2,8(sp)
 800992c:	0080050e 	bge	zero,r2,8009944 <_dtoa_r+0xac8>
 8009930:	a80b883a 	mov	r5,r21
 8009934:	100d883a 	mov	r6,r2
 8009938:	b809883a 	mov	r4,r23
 800993c:	800cb040 	call	800cb04 <__lshift>
 8009940:	102b883a 	mov	r21,r2
 8009944:	d8800817 	ldw	r2,32(sp)
 8009948:	1001161e 	bne	r2,zero,8009da4 <_dtoa_r+0xf28>
 800994c:	d8800417 	ldw	r2,16(sp)
 8009950:	0081040e 	bge	zero,r2,8009d64 <_dtoa_r+0xee8>
 8009954:	d8800617 	ldw	r2,24(sp)
 8009958:	1000b01e 	bne	r2,zero,8009c1c <_dtoa_r+0xda0>
 800995c:	d8800317 	ldw	r2,12(sp)
 8009960:	10800044 	addi	r2,r2,1
 8009964:	d8800315 	stw	r2,12(sp)
 8009968:	dc800417 	ldw	r18,16(sp)
 800996c:	04400044 	movi	r17,1
 8009970:	00000706 	br	8009990 <_dtoa_r+0xb14>
 8009974:	b00b883a 	mov	r5,r22
 8009978:	000f883a 	mov	r7,zero
 800997c:	01800284 	movi	r6,10
 8009980:	b809883a 	mov	r4,r23
 8009984:	800c3e40 	call	800c3e4 <__multadd>
 8009988:	102d883a 	mov	r22,r2
 800998c:	8c400044 	addi	r17,r17,1
 8009990:	a80b883a 	mov	r5,r21
 8009994:	b009883a 	mov	r4,r22
 8009998:	8008c800 	call	8008c80 <quorem>
 800999c:	10c00c04 	addi	r3,r2,48
 80099a0:	e445883a 	add	r2,fp,r17
 80099a4:	10ffffc5 	stb	r3,-1(r2)
 80099a8:	8cbff216 	blt	r17,r18,8009974 <_dtoa_r+0xaf8>
 80099ac:	d8800417 	ldw	r2,16(sp)
 80099b0:	0081510e 	bge	zero,r2,8009ef8 <_dtoa_r+0x107c>
 80099b4:	e0a5883a 	add	r18,fp,r2
 80099b8:	0023883a 	mov	r17,zero
 80099bc:	b00b883a 	mov	r5,r22
 80099c0:	01800044 	movi	r6,1
 80099c4:	b809883a 	mov	r4,r23
 80099c8:	d8c00115 	stw	r3,4(sp)
 80099cc:	800cb040 	call	800cb04 <__lshift>
 80099d0:	1009883a 	mov	r4,r2
 80099d4:	a80b883a 	mov	r5,r21
 80099d8:	102d883a 	mov	r22,r2
 80099dc:	800cc8c0 	call	800cc8c <__mcmp>
 80099e0:	913fffc3 	ldbu	r4,-1(r18)
 80099e4:	00800416 	blt	zero,r2,80099f8 <_dtoa_r+0xb7c>
 80099e8:	00014806 	br	8009f0c <_dtoa_r+0x1090>
 80099ec:	e0c15626 	beq	fp,r3,8009f48 <_dtoa_r+0x10cc>
 80099f0:	193fffc3 	ldbu	r4,-1(r3)
 80099f4:	1825883a 	mov	r18,r3
 80099f8:	20803fcc 	andi	r2,r4,255
 80099fc:	1080201c 	xori	r2,r2,128
 8009a00:	10bfe004 	addi	r2,r2,-128
 8009a04:	10800e60 	cmpeqi	r2,r2,57
 8009a08:	90ffffc4 	addi	r3,r18,-1
 8009a0c:	103ff71e 	bne	r2,zero,80099ec <_dtoa_r+0xb70>
 8009a10:	21000044 	addi	r4,r4,1
 8009a14:	19000005 	stb	r4,0(r3)
 8009a18:	a80b883a 	mov	r5,r21
 8009a1c:	b809883a 	mov	r4,r23
 8009a20:	800c3c00 	call	800c3c0 <_Bfree>
 8009a24:	80000826 	beq	r16,zero,8009a48 <_dtoa_r+0xbcc>
 8009a28:	88000426 	beq	r17,zero,8009a3c <_dtoa_r+0xbc0>
 8009a2c:	8c000326 	beq	r17,r16,8009a3c <_dtoa_r+0xbc0>
 8009a30:	880b883a 	mov	r5,r17
 8009a34:	b809883a 	mov	r4,r23
 8009a38:	800c3c00 	call	800c3c0 <_Bfree>
 8009a3c:	800b883a 	mov	r5,r16
 8009a40:	b809883a 	mov	r4,r23
 8009a44:	800c3c00 	call	800c3c0 <_Bfree>
 8009a48:	b00b883a 	mov	r5,r22
 8009a4c:	b809883a 	mov	r4,r23
 8009a50:	800c3c00 	call	800c3c0 <_Bfree>
 8009a54:	d8801f17 	ldw	r2,124(sp)
 8009a58:	d8c00317 	ldw	r3,12(sp)
 8009a5c:	90000005 	stb	zero,0(r18)
 8009a60:	10c00015 	stw	r3,0(r2)
 8009a64:	d8802117 	ldw	r2,132(sp)
 8009a68:	103d3526 	beq	r2,zero,8008f40 <_dtoa_r+0xc4>
 8009a6c:	14800015 	stw	r18,0(r2)
 8009a70:	003d3306 	br	8008f40 <_dtoa_r+0xc4>
 8009a74:	e0bfffc4 	addi	r2,fp,-1
 8009a78:	d8000815 	stw	zero,32(sp)
 8009a7c:	10002616 	blt	r2,zero,8009b18 <_dtoa_r+0xc9c>
 8009a80:	d8000515 	stw	zero,20(sp)
 8009a84:	d8800217 	ldw	r2,8(sp)
 8009a88:	d8c00117 	ldw	r3,4(sp)
 8009a8c:	dcc00315 	stw	r19,12(sp)
 8009a90:	14c5883a 	add	r2,r2,r19
 8009a94:	d8800215 	stw	r2,8(sp)
 8009a98:	d8000715 	stw	zero,28(sp)
 8009a9c:	188002a8 	cmpgeui	r2,r3,10
 8009aa0:	103d9d26 	beq	r2,zero,8009118 <_dtoa_r+0x29c>
 8009aa4:	00800044 	movi	r2,1
 8009aa8:	d8800615 	stw	r2,24(sp)
 8009aac:	00bfffc4 	movi	r2,-1
 8009ab0:	04000044 	movi	r16,1
 8009ab4:	d8000115 	stw	zero,4(sp)
 8009ab8:	d8800415 	stw	r2,16(sp)
 8009abc:	d8001e15 	stw	zero,120(sp)
 8009ac0:	d8800417 	ldw	r2,16(sp)
 8009ac4:	b8001115 	stw	zero,68(r23)
 8009ac8:	000b883a 	mov	r5,zero
 8009acc:	d8800b15 	stw	r2,44(sp)
 8009ad0:	003dae06 	br	800918c <_dtoa_r+0x310>
 8009ad4:	188000e0 	cmpeqi	r2,r3,3
 8009ad8:	d8000615 	stw	zero,24(sp)
 8009adc:	103eb126 	beq	r2,zero,80095a4 <_dtoa_r+0x728>
 8009ae0:	d8801e17 	ldw	r2,120(sp)
 8009ae4:	d8c00317 	ldw	r3,12(sp)
 8009ae8:	10c5883a 	add	r2,r2,r3
 8009aec:	d8800b15 	stw	r2,44(sp)
 8009af0:	10800044 	addi	r2,r2,1
 8009af4:	d8800415 	stw	r2,16(sp)
 8009af8:	100d883a 	mov	r6,r2
 8009afc:	00bd9816 	blt	zero,r2,8009160 <_dtoa_r+0x2e4>
 8009b00:	01800044 	movi	r6,1
 8009b04:	003d9606 	br	8009160 <_dtoa_r+0x2e4>
 8009b08:	00800044 	movi	r2,1
 8009b0c:	d8800815 	stw	r2,32(sp)
 8009b10:	e0bfffc4 	addi	r2,fp,-1
 8009b14:	103d740e 	bge	r2,zero,80090e8 <_dtoa_r+0x26c>
 8009b18:	00800044 	movi	r2,1
 8009b1c:	1705c83a 	sub	r2,r2,fp
 8009b20:	d8800515 	stw	r2,20(sp)
 8009b24:	d8000215 	stw	zero,8(sp)
 8009b28:	003d7006 	br	80090ec <_dtoa_r+0x270>
 8009b2c:	9809883a 	mov	r4,r19
 8009b30:	801454c0 	call	801454c <__floatsidf>
 8009b34:	900d883a 	mov	r6,r18
 8009b38:	a80f883a 	mov	r7,r21
 8009b3c:	1009883a 	mov	r4,r2
 8009b40:	180b883a 	mov	r5,r3
 8009b44:	80132740 	call	8013274 <__eqdf2>
 8009b48:	103d5426 	beq	r2,zero,800909c <_dtoa_r+0x220>
 8009b4c:	9cffffc4 	addi	r19,r19,-1
 8009b50:	003d5206 	br	800909c <_dtoa_r+0x220>
 8009b54:	07020174 	movhi	fp,2053
 8009b58:	e7016304 	addi	fp,fp,1420
 8009b5c:	003cf806 	br	8008f40 <_dtoa_r+0xc4>
 8009b60:	dd400717 	ldw	r21,28(sp)
 8009b64:	dc800517 	ldw	r18,20(sp)
 8009b68:	0021883a 	mov	r16,zero
 8009b6c:	003f2906 	br	8009814 <_dtoa_r+0x998>
 8009b70:	00800704 	movi	r2,28
 8009b74:	d8c00517 	ldw	r3,20(sp)
 8009b78:	90a5883a 	add	r18,r18,r2
 8009b7c:	1887883a 	add	r3,r3,r2
 8009b80:	d8c00515 	stw	r3,20(sp)
 8009b84:	d8c00217 	ldw	r3,8(sp)
 8009b88:	1885883a 	add	r2,r3,r2
 8009b8c:	d8800215 	stw	r2,8(sp)
 8009b90:	003f5e06 	br	800990c <_dtoa_r+0xa90>
 8009b94:	01000804 	movi	r4,32
 8009b98:	2089c83a 	sub	r4,r4,r2
 8009b9c:	a108983a 	sll	r4,r20,r4
 8009ba0:	003d0a06 	br	8008fcc <_dtoa_r+0x150>
 8009ba4:	04000044 	movi	r16,1
 8009ba8:	003d6006 	br	800912c <_dtoa_r+0x2b0>
 8009bac:	100b883a 	mov	r5,r2
 8009bb0:	980d883a 	mov	r6,r19
 8009bb4:	b809883a 	mov	r4,r23
 8009bb8:	800c9ec0 	call	800c9ec <__pow5mult>
 8009bbc:	d8c00117 	ldw	r3,4(sp)
 8009bc0:	102b883a 	mov	r21,r2
 8009bc4:	18c00090 	cmplti	r3,r3,2
 8009bc8:	18014b1e 	bne	r3,zero,800a0f8 <_dtoa_r+0x127c>
 8009bcc:	0023883a 	mov	r17,zero
 8009bd0:	a8800417 	ldw	r2,16(r21)
 8009bd4:	10800104 	addi	r2,r2,4
 8009bd8:	100490ba 	slli	r2,r2,2
 8009bdc:	a885883a 	add	r2,r21,r2
 8009be0:	11000017 	ldw	r4,0(r2)
 8009be4:	800c6540 	call	800c654 <__hi0bits>
 8009be8:	00c00804 	movi	r3,32
 8009bec:	1885c83a 	sub	r2,r3,r2
 8009bf0:	003f3606 	br	80098cc <_dtoa_r+0xa50>
 8009bf4:	800b883a 	mov	r5,r16
 8009bf8:	000f883a 	mov	r7,zero
 8009bfc:	01800284 	movi	r6,10
 8009c00:	b809883a 	mov	r4,r23
 8009c04:	800c3e40 	call	800c3e4 <__multadd>
 8009c08:	1021883a 	mov	r16,r2
 8009c0c:	d8800b17 	ldw	r2,44(sp)
 8009c10:	00824d0e 	bge	zero,r2,800a548 <_dtoa_r+0x16cc>
 8009c14:	dcc00315 	stw	r19,12(sp)
 8009c18:	d8800415 	stw	r2,16(sp)
 8009c1c:	0480aa16 	blt	zero,r18,8009ec8 <_dtoa_r+0x104c>
 8009c20:	8801701e 	bne	r17,zero,800a1e4 <_dtoa_r+0x1368>
 8009c24:	8027883a 	mov	r19,r16
 8009c28:	d9000417 	ldw	r4,16(sp)
 8009c2c:	e0bfffc4 	addi	r2,fp,-1
 8009c30:	a0c0004c 	andi	r3,r20,1
 8009c34:	1105883a 	add	r2,r2,r4
 8009c38:	d8800415 	stw	r2,16(sp)
 8009c3c:	d8800117 	ldw	r2,4(sp)
 8009c40:	d8c00715 	stw	r3,28(sp)
 8009c44:	e029883a 	mov	r20,fp
 8009c48:	1884b03a 	or	r2,r3,r2
 8009c4c:	d8800615 	stw	r2,24(sp)
 8009c50:	df000815 	stw	fp,32(sp)
 8009c54:	00002906 	br	8009cfc <_dtoa_r+0xe80>
 8009c58:	b009883a 	mov	r4,r22
 8009c5c:	800cc8c0 	call	800cc8c <__mcmp>
 8009c60:	900b883a 	mov	r5,r18
 8009c64:	b809883a 	mov	r4,r23
 8009c68:	d8800215 	stw	r2,8(sp)
 8009c6c:	800c3c00 	call	800c3c0 <_Bfree>
 8009c70:	d8800217 	ldw	r2,8(sp)
 8009c74:	1000021e 	bne	r2,zero,8009c80 <_dtoa_r+0xe04>
 8009c78:	d8c00617 	ldw	r3,24(sp)
 8009c7c:	18022326 	beq	r3,zero,800a50c <_dtoa_r+0x1690>
 8009c80:	a4800044 	addi	r18,r20,1
 8009c84:	88012216 	blt	r17,zero,800a110 <_dtoa_r+0x1294>
 8009c88:	d8c00117 	ldw	r3,4(sp)
 8009c8c:	1c62b03a 	or	r17,r3,r17
 8009c90:	d8c00717 	ldw	r3,28(sp)
 8009c94:	1c62b03a 	or	r17,r3,r17
 8009c98:	88011d26 	beq	r17,zero,800a110 <_dtoa_r+0x1294>
 8009c9c:	00816b16 	blt	zero,r2,800a24c <_dtoa_r+0x13d0>
 8009ca0:	d8800417 	ldw	r2,16(sp)
 8009ca4:	a7000005 	stb	fp,0(r20)
 8009ca8:	15017126 	beq	r2,r20,800a270 <_dtoa_r+0x13f4>
 8009cac:	b00b883a 	mov	r5,r22
 8009cb0:	000f883a 	mov	r7,zero
 8009cb4:	01800284 	movi	r6,10
 8009cb8:	b809883a 	mov	r4,r23
 8009cbc:	800c3e40 	call	800c3e4 <__multadd>
 8009cc0:	102d883a 	mov	r22,r2
 8009cc4:	800b883a 	mov	r5,r16
 8009cc8:	000f883a 	mov	r7,zero
 8009ccc:	01800284 	movi	r6,10
 8009cd0:	b809883a 	mov	r4,r23
 8009cd4:	84c01f26 	beq	r16,r19,8009d54 <_dtoa_r+0xed8>
 8009cd8:	800c3e40 	call	800c3e4 <__multadd>
 8009cdc:	980b883a 	mov	r5,r19
 8009ce0:	000f883a 	mov	r7,zero
 8009ce4:	01800284 	movi	r6,10
 8009ce8:	b809883a 	mov	r4,r23
 8009cec:	1021883a 	mov	r16,r2
 8009cf0:	800c3e40 	call	800c3e4 <__multadd>
 8009cf4:	1027883a 	mov	r19,r2
 8009cf8:	9029883a 	mov	r20,r18
 8009cfc:	a80b883a 	mov	r5,r21
 8009d00:	b009883a 	mov	r4,r22
 8009d04:	8008c800 	call	8008c80 <quorem>
 8009d08:	800b883a 	mov	r5,r16
 8009d0c:	b009883a 	mov	r4,r22
 8009d10:	1039883a 	mov	fp,r2
 8009d14:	d8800515 	stw	r2,20(sp)
 8009d18:	800cc8c0 	call	800cc8c <__mcmp>
 8009d1c:	a80b883a 	mov	r5,r21
 8009d20:	980d883a 	mov	r6,r19
 8009d24:	b809883a 	mov	r4,r23
 8009d28:	1023883a 	mov	r17,r2
 8009d2c:	800cce40 	call	800cce4 <__mdiff>
 8009d30:	1025883a 	mov	r18,r2
 8009d34:	10800317 	ldw	r2,12(r2)
 8009d38:	e7000c04 	addi	fp,fp,48
 8009d3c:	900b883a 	mov	r5,r18
 8009d40:	103fc526 	beq	r2,zero,8009c58 <_dtoa_r+0xddc>
 8009d44:	b809883a 	mov	r4,r23
 8009d48:	800c3c00 	call	800c3c0 <_Bfree>
 8009d4c:	00800044 	movi	r2,1
 8009d50:	003fcb06 	br	8009c80 <_dtoa_r+0xe04>
 8009d54:	800c3e40 	call	800c3e4 <__multadd>
 8009d58:	1021883a 	mov	r16,r2
 8009d5c:	1027883a 	mov	r19,r2
 8009d60:	003fe506 	br	8009cf8 <_dtoa_r+0xe7c>
 8009d64:	d8800117 	ldw	r2,4(sp)
 8009d68:	108000d0 	cmplti	r2,r2,3
 8009d6c:	10003c26 	beq	r2,zero,8009e60 <_dtoa_r+0xfe4>
 8009d70:	d8800617 	ldw	r2,24(sp)
 8009d74:	103fa91e 	bne	r2,zero,8009c1c <_dtoa_r+0xda0>
 8009d78:	a80b883a 	mov	r5,r21
 8009d7c:	b009883a 	mov	r4,r22
 8009d80:	8008c800 	call	8008c80 <quorem>
 8009d84:	10c00c04 	addi	r3,r2,48
 8009d88:	d8800317 	ldw	r2,12(sp)
 8009d8c:	e4800044 	addi	r18,fp,1
 8009d90:	e0c00005 	stb	r3,0(fp)
 8009d94:	10800044 	addi	r2,r2,1
 8009d98:	d8800315 	stw	r2,12(sp)
 8009d9c:	0023883a 	mov	r17,zero
 8009da0:	003f0606 	br	80099bc <_dtoa_r+0xb40>
 8009da4:	a80b883a 	mov	r5,r21
 8009da8:	b009883a 	mov	r4,r22
 8009dac:	800cc8c0 	call	800cc8c <__mcmp>
 8009db0:	103ee60e 	bge	r2,zero,800994c <_dtoa_r+0xad0>
 8009db4:	b00b883a 	mov	r5,r22
 8009db8:	000f883a 	mov	r7,zero
 8009dbc:	01800284 	movi	r6,10
 8009dc0:	b809883a 	mov	r4,r23
 8009dc4:	800c3e40 	call	800c3e4 <__multadd>
 8009dc8:	d8c00317 	ldw	r3,12(sp)
 8009dcc:	102d883a 	mov	r22,r2
 8009dd0:	d8800617 	ldw	r2,24(sp)
 8009dd4:	1cffffc4 	addi	r19,r3,-1
 8009dd8:	103f861e 	bne	r2,zero,8009bf4 <_dtoa_r+0xd78>
 8009ddc:	d8800b17 	ldw	r2,44(sp)
 8009de0:	0081d40e 	bge	zero,r2,800a534 <_dtoa_r+0x16b8>
 8009de4:	d8800415 	stw	r2,16(sp)
 8009de8:	003edf06 	br	8009968 <_dtoa_r+0xaec>
 8009dec:	00820174 	movhi	r2,2053
 8009df0:	e7017404 	addi	fp,fp,1488
 8009df4:	108174c4 	addi	r2,r2,1491
 8009df8:	003dd906 	br	8009560 <_dtoa_r+0x6e4>
 8009dfc:	00800044 	movi	r2,1
 8009e00:	d8800615 	stw	r2,24(sp)
 8009e04:	003f3606 	br	8009ae0 <_dtoa_r+0xc64>
 8009e08:	a03ead1e 	bne	r20,zero,80098c0 <_dtoa_r+0xa44>
 8009e0c:	00800434 	movhi	r2,16
 8009e10:	10bfffc4 	addi	r2,r2,-1
 8009e14:	8884703a 	and	r2,r17,r2
 8009e18:	103ea91e 	bne	r2,zero,80098c0 <_dtoa_r+0xa44>
 8009e1c:	8c5ffc2c 	andhi	r17,r17,32752
 8009e20:	883ea726 	beq	r17,zero,80098c0 <_dtoa_r+0xa44>
 8009e24:	d8800517 	ldw	r2,20(sp)
 8009e28:	04400044 	movi	r17,1
 8009e2c:	10800044 	addi	r2,r2,1
 8009e30:	d8800515 	stw	r2,20(sp)
 8009e34:	d8800217 	ldw	r2,8(sp)
 8009e38:	10800044 	addi	r2,r2,1
 8009e3c:	d8800215 	stw	r2,8(sp)
 8009e40:	003ea006 	br	80098c4 <_dtoa_r+0xa48>
 8009e44:	00800044 	movi	r2,1
 8009e48:	d8800415 	stw	r2,16(sp)
 8009e4c:	d8801e15 	stw	r2,120(sp)
 8009e50:	003f1b06 	br	8009ac0 <_dtoa_r+0xc44>
 8009e54:	d8800b17 	ldw	r2,44(sp)
 8009e58:	dcc00315 	stw	r19,12(sp)
 8009e5c:	d8800415 	stw	r2,16(sp)
 8009e60:	d8800417 	ldw	r2,16(sp)
 8009e64:	103dfb1e 	bne	r2,zero,8009654 <_dtoa_r+0x7d8>
 8009e68:	a80b883a 	mov	r5,r21
 8009e6c:	b809883a 	mov	r4,r23
 8009e70:	000f883a 	mov	r7,zero
 8009e74:	01800144 	movi	r6,5
 8009e78:	800c3e40 	call	800c3e4 <__multadd>
 8009e7c:	100b883a 	mov	r5,r2
 8009e80:	b009883a 	mov	r4,r22
 8009e84:	102b883a 	mov	r21,r2
 8009e88:	800cc8c0 	call	800cc8c <__mcmp>
 8009e8c:	00bdf10e 	bge	zero,r2,8009654 <_dtoa_r+0x7d8>
 8009e90:	00800c44 	movi	r2,49
 8009e94:	e0800005 	stb	r2,0(fp)
 8009e98:	d8800317 	ldw	r2,12(sp)
 8009e9c:	e4800044 	addi	r18,fp,1
 8009ea0:	14400044 	addi	r17,r2,1
 8009ea4:	a80b883a 	mov	r5,r21
 8009ea8:	b809883a 	mov	r4,r23
 8009eac:	800c3c00 	call	800c3c0 <_Bfree>
 8009eb0:	88800044 	addi	r2,r17,1
 8009eb4:	d8800315 	stw	r2,12(sp)
 8009eb8:	803ee01e 	bne	r16,zero,8009a3c <_dtoa_r+0xbc0>
 8009ebc:	003ee206 	br	8009a48 <_dtoa_r+0xbcc>
 8009ec0:	1805883a 	mov	r2,r3
 8009ec4:	003e5806 	br	8009828 <_dtoa_r+0x9ac>
 8009ec8:	800b883a 	mov	r5,r16
 8009ecc:	900d883a 	mov	r6,r18
 8009ed0:	b809883a 	mov	r4,r23
 8009ed4:	800cb040 	call	800cb04 <__lshift>
 8009ed8:	1021883a 	mov	r16,r2
 8009edc:	003f5006 	br	8009c20 <_dtoa_r+0xda4>
 8009ee0:	156bc83a 	sub	r21,r2,r21
 8009ee4:	003e3e06 	br	80097e0 <_dtoa_r+0x964>
 8009ee8:	dd000a15 	stw	r20,40(sp)
 8009eec:	dc400c15 	stw	r17,48(sp)
 8009ef0:	04000084 	movi	r16,2
 8009ef4:	003cc906 	br	800921c <_dtoa_r+0x3a0>
 8009ef8:	00800044 	movi	r2,1
 8009efc:	003ead06 	br	80099b4 <_dtoa_r+0xb38>
 8009f00:	00800044 	movi	r2,1
 8009f04:	d8800615 	stw	r2,24(sp)
 8009f08:	003c9006 	br	800914c <_dtoa_r+0x2d0>
 8009f0c:	1000031e 	bne	r2,zero,8009f1c <_dtoa_r+0x10a0>
 8009f10:	d8c00117 	ldw	r3,4(sp)
 8009f14:	18c0004c 	andi	r3,r3,1
 8009f18:	183eb71e 	bne	r3,zero,80099f8 <_dtoa_r+0xb7c>
 8009f1c:	2005883a 	mov	r2,r4
 8009f20:	00000206 	br	8009f2c <_dtoa_r+0x10b0>
 8009f24:	90bfff83 	ldbu	r2,-2(r18)
 8009f28:	1825883a 	mov	r18,r3
 8009f2c:	10803fcc 	andi	r2,r2,255
 8009f30:	1080201c 	xori	r2,r2,128
 8009f34:	10bfe004 	addi	r2,r2,-128
 8009f38:	10800c18 	cmpnei	r2,r2,48
 8009f3c:	90ffffc4 	addi	r3,r18,-1
 8009f40:	103ff826 	beq	r2,zero,8009f24 <_dtoa_r+0x10a8>
 8009f44:	003eb406 	br	8009a18 <_dtoa_r+0xb9c>
 8009f48:	00800c44 	movi	r2,49
 8009f4c:	e0800005 	stb	r2,0(fp)
 8009f50:	d8800317 	ldw	r2,12(sp)
 8009f54:	10800044 	addi	r2,r2,1
 8009f58:	d8800315 	stw	r2,12(sp)
 8009f5c:	003eae06 	br	8009a18 <_dtoa_r+0xb9c>
 8009f60:	d8c00917 	ldw	r3,36(sp)
 8009f64:	18011826 	beq	r3,zero,800a3c8 <_dtoa_r+0x154c>
 8009f68:	d8c00517 	ldw	r3,20(sp)
 8009f6c:	d9000217 	ldw	r4,8(sp)
 8009f70:	10810cc4 	addi	r2,r2,1075
 8009f74:	dd400717 	ldw	r21,28(sp)
 8009f78:	2089883a 	add	r4,r4,r2
 8009f7c:	1885883a 	add	r2,r3,r2
 8009f80:	1825883a 	mov	r18,r3
 8009f84:	d9000215 	stw	r4,8(sp)
 8009f88:	d8800515 	stw	r2,20(sp)
 8009f8c:	003e1d06 	br	8009804 <_dtoa_r+0x988>
 8009f90:	8009883a 	mov	r4,r16
 8009f94:	801454c0 	call	801454c <__floatsidf>
 8009f98:	d9c00a17 	ldw	r7,40(sp)
 8009f9c:	900d883a 	mov	r6,r18
 8009fa0:	1009883a 	mov	r4,r2
 8009fa4:	180b883a 	mov	r5,r3
 8009fa8:	80134d40 	call	80134d4 <__muldf3>
 8009fac:	000d883a 	mov	r6,zero
 8009fb0:	01d00734 	movhi	r7,16412
 8009fb4:	1009883a 	mov	r4,r2
 8009fb8:	180b883a 	mov	r5,r3
 8009fbc:	801209c0 	call	801209c <__adddf3>
 8009fc0:	d8800c15 	stw	r2,48(sp)
 8009fc4:	00bf3034 	movhi	r2,64704
 8009fc8:	1885883a 	add	r2,r3,r2
 8009fcc:	d8800d15 	stw	r2,52(sp)
 8009fd0:	d9400a17 	ldw	r5,40(sp)
 8009fd4:	9009883a 	mov	r4,r18
 8009fd8:	000d883a 	mov	r6,zero
 8009fdc:	01d00534 	movhi	r7,16404
 8009fe0:	8013b440 	call	8013b44 <__subdf3>
 8009fe4:	dd400d17 	ldw	r21,52(sp)
 8009fe8:	d9800c17 	ldw	r6,48(sp)
 8009fec:	1009883a 	mov	r4,r2
 8009ff0:	a80f883a 	mov	r7,r21
 8009ff4:	180b883a 	mov	r5,r3
 8009ff8:	1025883a 	mov	r18,r2
 8009ffc:	1821883a 	mov	r16,r3
 800a000:	80132f40 	call	80132f4 <__gedf2>
 800a004:	00812d16 	blt	zero,r2,800a4bc <_dtoa_r+0x1640>
 800a008:	d9800c17 	ldw	r6,48(sp)
 800a00c:	a9e0003c 	xorhi	r7,r21,32768
 800a010:	9009883a 	mov	r4,r18
 800a014:	800b883a 	mov	r5,r16
 800a018:	80133e40 	call	80133e4 <__ledf2>
 800a01c:	103d6e0e 	bge	r2,zero,80095d8 <_dtoa_r+0x75c>
 800a020:	002b883a 	mov	r21,zero
 800a024:	0021883a 	mov	r16,zero
 800a028:	003d8a06 	br	8009654 <_dtoa_r+0x7d8>
 800a02c:	d9800717 	ldw	r6,28(sp)
 800a030:	b00b883a 	mov	r5,r22
 800a034:	b809883a 	mov	r4,r23
 800a038:	800c9ec0 	call	800c9ec <__pow5mult>
 800a03c:	102d883a 	mov	r22,r2
 800a040:	003e1706 	br	80098a0 <_dtoa_r+0xa24>
 800a044:	d8800317 	ldw	r2,12(sp)
 800a048:	10010d26 	beq	r2,zero,800a480 <_dtoa_r+0x1604>
 800a04c:	00abc83a 	sub	r21,zero,r2
 800a050:	a88003cc 	andi	r2,r21,15
 800a054:	100690fa 	slli	r3,r2,3
 800a058:	00820174 	movhi	r2,2053
 800a05c:	1081b204 	addi	r2,r2,1736
 800a060:	10c5883a 	add	r2,r2,r3
 800a064:	11800017 	ldw	r6,0(r2)
 800a068:	11c00117 	ldw	r7,4(r2)
 800a06c:	a009883a 	mov	r4,r20
 800a070:	880b883a 	mov	r5,r17
 800a074:	a82bd13a 	srai	r21,r21,4
 800a078:	80134d40 	call	80134d4 <__muldf3>
 800a07c:	d8c00a15 	stw	r3,40(sp)
 800a080:	1025883a 	mov	r18,r2
 800a084:	a8013826 	beq	r21,zero,800a568 <_dtoa_r+0x16ec>
 800a088:	02020174 	movhi	r8,2053
 800a08c:	04000084 	movi	r16,2
 800a090:	4201a804 	addi	r8,r8,1696
 800a094:	180b883a 	mov	r5,r3
 800a098:	dc400c15 	stw	r17,48(sp)
 800a09c:	1009883a 	mov	r4,r2
 800a0a0:	8023883a 	mov	r17,r16
 800a0a4:	0007883a 	mov	r3,zero
 800a0a8:	4021883a 	mov	r16,r8
 800a0ac:	a980004c 	andi	r6,r21,1
 800a0b0:	30000726 	beq	r6,zero,800a0d0 <_dtoa_r+0x1254>
 800a0b4:	81800017 	ldw	r6,0(r16)
 800a0b8:	81c00117 	ldw	r7,4(r16)
 800a0bc:	8c400044 	addi	r17,r17,1
 800a0c0:	80134d40 	call	80134d4 <__muldf3>
 800a0c4:	180b883a 	mov	r5,r3
 800a0c8:	1009883a 	mov	r4,r2
 800a0cc:	00c00044 	movi	r3,1
 800a0d0:	a82bd07a 	srai	r21,r21,1
 800a0d4:	84000204 	addi	r16,r16,8
 800a0d8:	a83ff41e 	bne	r21,zero,800a0ac <_dtoa_r+0x1230>
 800a0dc:	18c03fcc 	andi	r3,r3,255
 800a0e0:	8821883a 	mov	r16,r17
 800a0e4:	dc400c17 	ldw	r17,48(sp)
 800a0e8:	183c6526 	beq	r3,zero,8009280 <_dtoa_r+0x404>
 800a0ec:	2025883a 	mov	r18,r4
 800a0f0:	d9400a15 	stw	r5,40(sp)
 800a0f4:	003c6206 	br	8009280 <_dtoa_r+0x404>
 800a0f8:	a03eb41e 	bne	r20,zero,8009bcc <_dtoa_r+0xd50>
 800a0fc:	00800434 	movhi	r2,16
 800a100:	10bfffc4 	addi	r2,r2,-1
 800a104:	8884703a 	and	r2,r17,r2
 800a108:	103f4426 	beq	r2,zero,8009e1c <_dtoa_r+0xfa0>
 800a10c:	003eaf06 	br	8009bcc <_dtoa_r+0xd50>
 800a110:	d9000317 	ldw	r4,12(sp)
 800a114:	e007883a 	mov	r3,fp
 800a118:	df000817 	ldw	fp,32(sp)
 800a11c:	21000044 	addi	r4,r4,1
 800a120:	d9000315 	stw	r4,12(sp)
 800a124:	00800f0e 	bge	zero,r2,800a164 <_dtoa_r+0x12e8>
 800a128:	b00b883a 	mov	r5,r22
 800a12c:	01800044 	movi	r6,1
 800a130:	b809883a 	mov	r4,r23
 800a134:	d8c00115 	stw	r3,4(sp)
 800a138:	800cb040 	call	800cb04 <__lshift>
 800a13c:	a80b883a 	mov	r5,r21
 800a140:	1009883a 	mov	r4,r2
 800a144:	102d883a 	mov	r22,r2
 800a148:	800cc8c0 	call	800cc8c <__mcmp>
 800a14c:	d8c00117 	ldw	r3,4(sp)
 800a150:	0080e40e 	bge	zero,r2,800a4e4 <_dtoa_r+0x1668>
 800a154:	18c00e60 	cmpeqi	r3,r3,57
 800a158:	1800d21e 	bne	r3,zero,800a4a4 <_dtoa_r+0x1628>
 800a15c:	d8800517 	ldw	r2,20(sp)
 800a160:	10c00c44 	addi	r3,r2,49
 800a164:	8023883a 	mov	r17,r16
 800a168:	a0c00005 	stb	r3,0(r20)
 800a16c:	9821883a 	mov	r16,r19
 800a170:	003e2906 	br	8009a18 <_dtoa_r+0xb9c>
 800a174:	b027883a 	mov	r19,r22
 800a178:	ddc00417 	ldw	r23,16(sp)
 800a17c:	dd800217 	ldw	r22,8(sp)
 800a180:	200d883a 	mov	r6,r4
 800a184:	280f883a 	mov	r7,r5
 800a188:	801209c0 	call	801209c <__adddf3>
 800a18c:	dd400117 	ldw	r21,4(sp)
 800a190:	180b883a 	mov	r5,r3
 800a194:	900f883a 	mov	r7,r18
 800a198:	a80d883a 	mov	r6,r21
 800a19c:	1009883a 	mov	r4,r2
 800a1a0:	1823883a 	mov	r17,r3
 800a1a4:	1029883a 	mov	r20,r2
 800a1a8:	80132f40 	call	80132f4 <__gedf2>
 800a1ac:	d8c00317 	ldw	r3,12(sp)
 800a1b0:	18c00044 	addi	r3,r3,1
 800a1b4:	d8c00315 	stw	r3,12(sp)
 800a1b8:	00bcc716 	blt	zero,r2,80094d8 <_dtoa_r+0x65c>
 800a1bc:	a80d883a 	mov	r6,r21
 800a1c0:	900f883a 	mov	r7,r18
 800a1c4:	a009883a 	mov	r4,r20
 800a1c8:	880b883a 	mov	r5,r17
 800a1cc:	80132740 	call	8013274 <__eqdf2>
 800a1d0:	1000021e 	bne	r2,zero,800a1dc <_dtoa_r+0x1360>
 800a1d4:	9cc0004c 	andi	r19,r19,1
 800a1d8:	983cbf1e 	bne	r19,zero,80094d8 <_dtoa_r+0x65c>
 800a1dc:	8025883a 	mov	r18,r16
 800a1e0:	003e1906 	br	8009a48 <_dtoa_r+0xbcc>
 800a1e4:	81400117 	ldw	r5,4(r16)
 800a1e8:	b809883a 	mov	r4,r23
 800a1ec:	800c31c0 	call	800c31c <_Balloc>
 800a1f0:	1023883a 	mov	r17,r2
 800a1f4:	1000e526 	beq	r2,zero,800a58c <_dtoa_r+0x1710>
 800a1f8:	81800417 	ldw	r6,16(r16)
 800a1fc:	81400304 	addi	r5,r16,12
 800a200:	11000304 	addi	r4,r2,12
 800a204:	31800084 	addi	r6,r6,2
 800a208:	300c90ba 	slli	r6,r6,2
 800a20c:	80037cc0 	call	80037cc <memcpy>
 800a210:	01800044 	movi	r6,1
 800a214:	880b883a 	mov	r5,r17
 800a218:	b809883a 	mov	r4,r23
 800a21c:	800cb040 	call	800cb04 <__lshift>
 800a220:	1027883a 	mov	r19,r2
 800a224:	003e8006 	br	8009c28 <_dtoa_r+0xdac>
 800a228:	b00b883a 	mov	r5,r22
 800a22c:	b809883a 	mov	r4,r23
 800a230:	800c9ec0 	call	800c9ec <__pow5mult>
 800a234:	102d883a 	mov	r22,r2
 800a238:	003d9906 	br	80098a0 <_dtoa_r+0xa24>
 800a23c:	d8800517 	ldw	r2,20(sp)
 800a240:	d8c00417 	ldw	r3,16(sp)
 800a244:	10e5c83a 	sub	r18,r2,r3
 800a248:	003d6e06 	br	8009804 <_dtoa_r+0x988>
 800a24c:	d9000317 	ldw	r4,12(sp)
 800a250:	e007883a 	mov	r3,fp
 800a254:	18800e58 	cmpnei	r2,r3,57
 800a258:	21000044 	addi	r4,r4,1
 800a25c:	d9000315 	stw	r4,12(sp)
 800a260:	df000817 	ldw	fp,32(sp)
 800a264:	10008f26 	beq	r2,zero,800a4a4 <_dtoa_r+0x1628>
 800a268:	18c00044 	addi	r3,r3,1
 800a26c:	003fbd06 	br	800a164 <_dtoa_r+0x12e8>
 800a270:	d8800317 	ldw	r2,12(sp)
 800a274:	e007883a 	mov	r3,fp
 800a278:	8023883a 	mov	r17,r16
 800a27c:	10800044 	addi	r2,r2,1
 800a280:	df000817 	ldw	fp,32(sp)
 800a284:	d8800315 	stw	r2,12(sp)
 800a288:	9821883a 	mov	r16,r19
 800a28c:	003dcb06 	br	80099bc <_dtoa_r+0xb40>
 800a290:	d9000c17 	ldw	r4,48(sp)
 800a294:	d9400d17 	ldw	r5,52(sp)
 800a298:	600d883a 	mov	r6,r12
 800a29c:	680f883a 	mov	r7,r13
 800a2a0:	dac00a15 	stw	r11,40(sp)
 800a2a4:	80134d40 	call	80134d4 <__muldf3>
 800a2a8:	dac00a17 	ldw	r11,40(sp)
 800a2ac:	d9400e17 	ldw	r5,56(sp)
 800a2b0:	d8800a15 	stw	r2,40(sp)
 800a2b4:	e2c00005 	stb	r11,0(fp)
 800a2b8:	29000058 	cmpnei	r4,r5,1
 800a2bc:	d8c00c15 	stw	r3,48(sp)
 800a2c0:	e145883a 	add	r2,fp,r5
 800a2c4:	20002126 	beq	r4,zero,800a34c <_dtoa_r+0x14d0>
 800a2c8:	dc400e15 	stw	r17,56(sp)
 800a2cc:	dcc00d15 	stw	r19,52(sp)
 800a2d0:	8023883a 	mov	r17,r16
 800a2d4:	a809883a 	mov	r4,r21
 800a2d8:	900b883a 	mov	r5,r18
 800a2dc:	1021883a 	mov	r16,r2
 800a2e0:	000d883a 	mov	r6,zero
 800a2e4:	01d00934 	movhi	r7,16420
 800a2e8:	80134d40 	call	80134d4 <__muldf3>
 800a2ec:	180b883a 	mov	r5,r3
 800a2f0:	1009883a 	mov	r4,r2
 800a2f4:	182b883a 	mov	r21,r3
 800a2f8:	1027883a 	mov	r19,r2
 800a2fc:	80144cc0 	call	80144cc <__fixdfsi>
 800a300:	1009883a 	mov	r4,r2
 800a304:	1025883a 	mov	r18,r2
 800a308:	801454c0 	call	801454c <__floatsidf>
 800a30c:	9809883a 	mov	r4,r19
 800a310:	a80b883a 	mov	r5,r21
 800a314:	100d883a 	mov	r6,r2
 800a318:	180f883a 	mov	r7,r3
 800a31c:	8c400044 	addi	r17,r17,1
 800a320:	94800c04 	addi	r18,r18,48
 800a324:	8013b440 	call	8013b44 <__subdf3>
 800a328:	8cbfffc5 	stb	r18,-1(r17)
 800a32c:	1009883a 	mov	r4,r2
 800a330:	180b883a 	mov	r5,r3
 800a334:	847fea1e 	bne	r16,r17,800a2e0 <_dtoa_r+0x1464>
 800a338:	8821883a 	mov	r16,r17
 800a33c:	dcc00d17 	ldw	r19,52(sp)
 800a340:	dc400e17 	ldw	r17,56(sp)
 800a344:	102b883a 	mov	r21,r2
 800a348:	1825883a 	mov	r18,r3
 800a34c:	d9000a17 	ldw	r4,40(sp)
 800a350:	d9400c17 	ldw	r5,48(sp)
 800a354:	000d883a 	mov	r6,zero
 800a358:	01cff834 	movhi	r7,16352
 800a35c:	801209c0 	call	801209c <__adddf3>
 800a360:	a80d883a 	mov	r6,r21
 800a364:	900f883a 	mov	r7,r18
 800a368:	1009883a 	mov	r4,r2
 800a36c:	180b883a 	mov	r5,r3
 800a370:	80133e40 	call	80133e4 <__ledf2>
 800a374:	103c5316 	blt	r2,zero,80094c4 <_dtoa_r+0x648>
 800a378:	d9800a17 	ldw	r6,40(sp)
 800a37c:	d9c00c17 	ldw	r7,48(sp)
 800a380:	0009883a 	mov	r4,zero
 800a384:	014ff834 	movhi	r5,16352
 800a388:	8013b440 	call	8013b44 <__subdf3>
 800a38c:	a80d883a 	mov	r6,r21
 800a390:	900f883a 	mov	r7,r18
 800a394:	1009883a 	mov	r4,r2
 800a398:	180b883a 	mov	r5,r3
 800a39c:	80132f40 	call	80132f4 <__gedf2>
 800a3a0:	00bc8d0e 	bge	zero,r2,80095d8 <_dtoa_r+0x75c>
 800a3a4:	80bfffc7 	ldb	r2,-1(r16)
 800a3a8:	8025883a 	mov	r18,r16
 800a3ac:	843fffc4 	addi	r16,r16,-1
 800a3b0:	10800c20 	cmpeqi	r2,r2,48
 800a3b4:	103ffb1e 	bne	r2,zero,800a3a4 <_dtoa_r+0x1528>
 800a3b8:	d8801117 	ldw	r2,68(sp)
 800a3bc:	10800044 	addi	r2,r2,1
 800a3c0:	d8800315 	stw	r2,12(sp)
 800a3c4:	003da006 	br	8009a48 <_dtoa_r+0xbcc>
 800a3c8:	d8c01217 	ldw	r3,72(sp)
 800a3cc:	00800d84 	movi	r2,54
 800a3d0:	d9000517 	ldw	r4,20(sp)
 800a3d4:	10c5c83a 	sub	r2,r2,r3
 800a3d8:	d8c00217 	ldw	r3,8(sp)
 800a3dc:	dd400717 	ldw	r21,28(sp)
 800a3e0:	2025883a 	mov	r18,r4
 800a3e4:	1887883a 	add	r3,r3,r2
 800a3e8:	2085883a 	add	r2,r4,r2
 800a3ec:	d8c00215 	stw	r3,8(sp)
 800a3f0:	d8800515 	stw	r2,20(sp)
 800a3f4:	003d0306 	br	8009804 <_dtoa_r+0x988>
 800a3f8:	d8800417 	ldw	r2,16(sp)
 800a3fc:	103ee426 	beq	r2,zero,8009f90 <_dtoa_r+0x1114>
 800a400:	d8800b17 	ldw	r2,44(sp)
 800a404:	00bc740e 	bge	zero,r2,80095d8 <_dtoa_r+0x75c>
 800a408:	a80b883a 	mov	r5,r21
 800a40c:	9009883a 	mov	r4,r18
 800a410:	000d883a 	mov	r6,zero
 800a414:	01d00934 	movhi	r7,16420
 800a418:	80134d40 	call	80134d4 <__muldf3>
 800a41c:	81000044 	addi	r4,r16,1
 800a420:	1025883a 	mov	r18,r2
 800a424:	182b883a 	mov	r21,r3
 800a428:	d8c00a15 	stw	r3,40(sp)
 800a42c:	801454c0 	call	801454c <__floatsidf>
 800a430:	900d883a 	mov	r6,r18
 800a434:	a80f883a 	mov	r7,r21
 800a438:	1009883a 	mov	r4,r2
 800a43c:	180b883a 	mov	r5,r3
 800a440:	80134d40 	call	80134d4 <__muldf3>
 800a444:	1009883a 	mov	r4,r2
 800a448:	000d883a 	mov	r6,zero
 800a44c:	01d00734 	movhi	r7,16412
 800a450:	180b883a 	mov	r5,r3
 800a454:	801209c0 	call	801209c <__adddf3>
 800a458:	d9000317 	ldw	r4,12(sp)
 800a45c:	d8800c15 	stw	r2,48(sp)
 800a460:	00bf3034 	movhi	r2,64704
 800a464:	1887883a 	add	r3,r3,r2
 800a468:	d8800b17 	ldw	r2,44(sp)
 800a46c:	213fffc4 	addi	r4,r4,-1
 800a470:	d9001115 	stw	r4,68(sp)
 800a474:	d8c00d15 	stw	r3,52(sp)
 800a478:	d8800e15 	stw	r2,56(sp)
 800a47c:	003b9f06 	br	80092fc <_dtoa_r+0x480>
 800a480:	a025883a 	mov	r18,r20
 800a484:	dc400a15 	stw	r17,40(sp)
 800a488:	04000084 	movi	r16,2
 800a48c:	003b7c06 	br	8009280 <_dtoa_r+0x404>
 800a490:	d8800317 	ldw	r2,12(sp)
 800a494:	00c00c44 	movi	r3,49
 800a498:	10800044 	addi	r2,r2,1
 800a49c:	d8800315 	stw	r2,12(sp)
 800a4a0:	003c1606 	br	80094fc <_dtoa_r+0x680>
 800a4a4:	00800e44 	movi	r2,57
 800a4a8:	8023883a 	mov	r17,r16
 800a4ac:	a0800005 	stb	r2,0(r20)
 800a4b0:	9821883a 	mov	r16,r19
 800a4b4:	01000e44 	movi	r4,57
 800a4b8:	003d4f06 	br	80099f8 <_dtoa_r+0xb7c>
 800a4bc:	002b883a 	mov	r21,zero
 800a4c0:	0021883a 	mov	r16,zero
 800a4c4:	003e7206 	br	8009e90 <_dtoa_r+0x1014>
 800a4c8:	dd800d17 	ldw	r22,52(sp)
 800a4cc:	ddc00e17 	ldw	r23,56(sp)
 800a4d0:	d8801117 	ldw	r2,68(sp)
 800a4d4:	8025883a 	mov	r18,r16
 800a4d8:	10800044 	addi	r2,r2,1
 800a4dc:	d8800315 	stw	r2,12(sp)
 800a4e0:	003d5906 	br	8009a48 <_dtoa_r+0xbcc>
 800a4e4:	103f1f1e 	bne	r2,zero,800a164 <_dtoa_r+0x12e8>
 800a4e8:	1880004c 	andi	r2,r3,1
 800a4ec:	103f191e 	bne	r2,zero,800a154 <_dtoa_r+0x12d8>
 800a4f0:	003f1c06 	br	800a164 <_dtoa_r+0x12e8>
 800a4f4:	dcc00f17 	ldw	r19,60(sp)
 800a4f8:	dd800d17 	ldw	r22,52(sp)
 800a4fc:	ddc00e17 	ldw	r23,56(sp)
 800a500:	dc400c17 	ldw	r17,48(sp)
 800a504:	dd000a17 	ldw	r20,40(sp)
 800a508:	003c3306 	br	80095d8 <_dtoa_r+0x75c>
 800a50c:	d9000317 	ldw	r4,12(sp)
 800a510:	e007883a 	mov	r3,fp
 800a514:	18800e60 	cmpeqi	r2,r3,57
 800a518:	21000044 	addi	r4,r4,1
 800a51c:	d9000315 	stw	r4,12(sp)
 800a520:	df000817 	ldw	fp,32(sp)
 800a524:	a4800044 	addi	r18,r20,1
 800a528:	103fde1e 	bne	r2,zero,800a4a4 <_dtoa_r+0x1628>
 800a52c:	047f0b16 	blt	zero,r17,800a15c <_dtoa_r+0x12e0>
 800a530:	003f0c06 	br	800a164 <_dtoa_r+0x12e8>
 800a534:	d8800117 	ldw	r2,4(sp)
 800a538:	108000c8 	cmpgei	r2,r2,3
 800a53c:	103e451e 	bne	r2,zero,8009e54 <_dtoa_r+0xfd8>
 800a540:	dcc00315 	stw	r19,12(sp)
 800a544:	003e0c06 	br	8009d78 <_dtoa_r+0xefc>
 800a548:	d8800117 	ldw	r2,4(sp)
 800a54c:	108000c8 	cmpgei	r2,r2,3
 800a550:	103e401e 	bne	r2,zero,8009e54 <_dtoa_r+0xfd8>
 800a554:	d8800b17 	ldw	r2,44(sp)
 800a558:	dcc00315 	stw	r19,12(sp)
 800a55c:	d8800415 	stw	r2,16(sp)
 800a560:	04bdaf0e 	bge	zero,r18,8009c20 <_dtoa_r+0xda4>
 800a564:	003e5806 	br	8009ec8 <_dtoa_r+0x104c>
 800a568:	04000084 	movi	r16,2
 800a56c:	003b4406 	br	8009280 <_dtoa_r+0x404>
 800a570:	01c20174 	movhi	r7,2053
 800a574:	01020174 	movhi	r4,2053
 800a578:	39c17804 	addi	r7,r7,1504
 800a57c:	000d883a 	mov	r6,zero
 800a580:	01406a84 	movi	r5,426
 800a584:	21017d04 	addi	r4,r4,1524
 800a588:	801062c0 	call	801062c <__assert_func>
 800a58c:	01c20174 	movhi	r7,2053
 800a590:	01020174 	movhi	r4,2053
 800a594:	39c17804 	addi	r7,r7,1504
 800a598:	000d883a 	mov	r6,zero
 800a59c:	0140ba84 	movi	r5,746
 800a5a0:	21017d04 	addi	r4,r4,1524
 800a5a4:	801062c0 	call	801062c <__assert_func>
 800a5a8:	e7017504 	addi	fp,fp,1492
 800a5ac:	003a6406 	br	8008f40 <_dtoa_r+0xc4>
 800a5b0:	18c00120 	cmpeqi	r3,r3,4
 800a5b4:	183cd51e 	bne	r3,zero,800990c <_dtoa_r+0xa90>
 800a5b8:	00c00f04 	movi	r3,60
 800a5bc:	1885c83a 	sub	r2,r3,r2
 800a5c0:	003d6c06 	br	8009b74 <_dtoa_r+0xcf8>
 800a5c4:	000b883a 	mov	r5,zero
 800a5c8:	003af006 	br	800918c <_dtoa_r+0x310>

0800a5cc <__sflush_r>:
 800a5cc:	2880030b 	ldhu	r2,12(r5)
 800a5d0:	defffb04 	addi	sp,sp,-20
 800a5d4:	dcc00315 	stw	r19,12(sp)
 800a5d8:	dc000015 	stw	r16,0(sp)
 800a5dc:	dfc00415 	stw	ra,16(sp)
 800a5e0:	dc800215 	stw	r18,8(sp)
 800a5e4:	dc400115 	stw	r17,4(sp)
 800a5e8:	10c0020c 	andi	r3,r2,8
 800a5ec:	2821883a 	mov	r16,r5
 800a5f0:	2027883a 	mov	r19,r4
 800a5f4:	18003f1e 	bne	r3,zero,800a6f4 <__sflush_r+0x128>
 800a5f8:	28c00117 	ldw	r3,4(r5)
 800a5fc:	10820014 	ori	r2,r2,2048
 800a600:	2880030d 	sth	r2,12(r5)
 800a604:	00c0550e 	bge	zero,r3,800a75c <__sflush_r+0x190>
 800a608:	82000a17 	ldw	r8,40(r16)
 800a60c:	40003126 	beq	r8,zero,800a6d4 <__sflush_r+0x108>
 800a610:	9c400017 	ldw	r17,0(r19)
 800a614:	1104000c 	andi	r4,r2,4096
 800a618:	98000015 	stw	zero,0(r19)
 800a61c:	81400717 	ldw	r5,28(r16)
 800a620:	1007883a 	mov	r3,r2
 800a624:	2000521e 	bne	r4,zero,800a770 <__sflush_r+0x1a4>
 800a628:	01c00044 	movi	r7,1
 800a62c:	000d883a 	mov	r6,zero
 800a630:	9809883a 	mov	r4,r19
 800a634:	403ee83a 	callr	r8
 800a638:	10ffffd8 	cmpnei	r3,r2,-1
 800a63c:	18005826 	beq	r3,zero,800a7a0 <__sflush_r+0x1d4>
 800a640:	80c0030b 	ldhu	r3,12(r16)
 800a644:	82000a17 	ldw	r8,40(r16)
 800a648:	81400717 	ldw	r5,28(r16)
 800a64c:	18c0010c 	andi	r3,r3,4
 800a650:	18000626 	beq	r3,zero,800a66c <__sflush_r+0xa0>
 800a654:	81000117 	ldw	r4,4(r16)
 800a658:	80c00c17 	ldw	r3,48(r16)
 800a65c:	1105c83a 	sub	r2,r2,r4
 800a660:	18000226 	beq	r3,zero,800a66c <__sflush_r+0xa0>
 800a664:	80c00f17 	ldw	r3,60(r16)
 800a668:	10c5c83a 	sub	r2,r2,r3
 800a66c:	100d883a 	mov	r6,r2
 800a670:	000f883a 	mov	r7,zero
 800a674:	9809883a 	mov	r4,r19
 800a678:	403ee83a 	callr	r8
 800a67c:	10ffffd8 	cmpnei	r3,r2,-1
 800a680:	18003d1e 	bne	r3,zero,800a778 <__sflush_r+0x1ac>
 800a684:	99000017 	ldw	r4,0(r19)
 800a688:	80c0030b 	ldhu	r3,12(r16)
 800a68c:	20004e26 	beq	r4,zero,800a7c8 <__sflush_r+0x1fc>
 800a690:	21400760 	cmpeqi	r5,r4,29
 800a694:	2800021e 	bne	r5,zero,800a6a0 <__sflush_r+0xd4>
 800a698:	210005a0 	cmpeqi	r4,r4,22
 800a69c:	20002c26 	beq	r4,zero,800a750 <__sflush_r+0x184>
 800a6a0:	80800417 	ldw	r2,16(r16)
 800a6a4:	18fdffcc 	andi	r3,r3,63487
 800a6a8:	80c0030d 	sth	r3,12(r16)
 800a6ac:	80000115 	stw	zero,4(r16)
 800a6b0:	80800015 	stw	r2,0(r16)
 800a6b4:	81400c17 	ldw	r5,48(r16)
 800a6b8:	9c400015 	stw	r17,0(r19)
 800a6bc:	28000526 	beq	r5,zero,800a6d4 <__sflush_r+0x108>
 800a6c0:	80801004 	addi	r2,r16,64
 800a6c4:	28800226 	beq	r5,r2,800a6d0 <__sflush_r+0x104>
 800a6c8:	9809883a 	mov	r4,r19
 800a6cc:	800ad400 	call	800ad40 <_free_r>
 800a6d0:	80000c15 	stw	zero,48(r16)
 800a6d4:	0005883a 	mov	r2,zero
 800a6d8:	dfc00417 	ldw	ra,16(sp)
 800a6dc:	dcc00317 	ldw	r19,12(sp)
 800a6e0:	dc800217 	ldw	r18,8(sp)
 800a6e4:	dc400117 	ldw	r17,4(sp)
 800a6e8:	dc000017 	ldw	r16,0(sp)
 800a6ec:	dec00504 	addi	sp,sp,20
 800a6f0:	f800283a 	ret
 800a6f4:	2c800417 	ldw	r18,16(r5)
 800a6f8:	903ff626 	beq	r18,zero,800a6d4 <__sflush_r+0x108>
 800a6fc:	2c400017 	ldw	r17,0(r5)
 800a700:	108000cc 	andi	r2,r2,3
 800a704:	2c800015 	stw	r18,0(r5)
 800a708:	8ca3c83a 	sub	r17,r17,r18
 800a70c:	1000161e 	bne	r2,zero,800a768 <__sflush_r+0x19c>
 800a710:	28800517 	ldw	r2,20(r5)
 800a714:	80800215 	stw	r2,8(r16)
 800a718:	04400316 	blt	zero,r17,800a728 <__sflush_r+0x15c>
 800a71c:	003fed06 	br	800a6d4 <__sflush_r+0x108>
 800a720:	90a5883a 	add	r18,r18,r2
 800a724:	047feb0e 	bge	zero,r17,800a6d4 <__sflush_r+0x108>
 800a728:	80800917 	ldw	r2,36(r16)
 800a72c:	81400717 	ldw	r5,28(r16)
 800a730:	880f883a 	mov	r7,r17
 800a734:	900d883a 	mov	r6,r18
 800a738:	9809883a 	mov	r4,r19
 800a73c:	103ee83a 	callr	r2
 800a740:	88a3c83a 	sub	r17,r17,r2
 800a744:	00bff616 	blt	zero,r2,800a720 <__sflush_r+0x154>
 800a748:	80c0030b 	ldhu	r3,12(r16)
 800a74c:	00bfffc4 	movi	r2,-1
 800a750:	18c01014 	ori	r3,r3,64
 800a754:	80c0030d 	sth	r3,12(r16)
 800a758:	003fdf06 	br	800a6d8 <__sflush_r+0x10c>
 800a75c:	28c00f17 	ldw	r3,60(r5)
 800a760:	00ffa916 	blt	zero,r3,800a608 <__sflush_r+0x3c>
 800a764:	003fdb06 	br	800a6d4 <__sflush_r+0x108>
 800a768:	0005883a 	mov	r2,zero
 800a76c:	003fe906 	br	800a714 <__sflush_r+0x148>
 800a770:	80801417 	ldw	r2,80(r16)
 800a774:	003fb506 	br	800a64c <__sflush_r+0x80>
 800a778:	80c0030b 	ldhu	r3,12(r16)
 800a77c:	81000417 	ldw	r4,16(r16)
 800a780:	80000115 	stw	zero,4(r16)
 800a784:	197dffcc 	andi	r5,r3,63487
 800a788:	8140030d 	sth	r5,12(r16)
 800a78c:	81000015 	stw	r4,0(r16)
 800a790:	18c4000c 	andi	r3,r3,4096
 800a794:	183fc726 	beq	r3,zero,800a6b4 <__sflush_r+0xe8>
 800a798:	80801415 	stw	r2,80(r16)
 800a79c:	003fc506 	br	800a6b4 <__sflush_r+0xe8>
 800a7a0:	98c00017 	ldw	r3,0(r19)
 800a7a4:	183fa626 	beq	r3,zero,800a640 <__sflush_r+0x74>
 800a7a8:	19000760 	cmpeqi	r4,r3,29
 800a7ac:	20000e1e 	bne	r4,zero,800a7e8 <__sflush_r+0x21c>
 800a7b0:	18c00598 	cmpnei	r3,r3,22
 800a7b4:	18000c26 	beq	r3,zero,800a7e8 <__sflush_r+0x21c>
 800a7b8:	80c0030b 	ldhu	r3,12(r16)
 800a7bc:	18c01014 	ori	r3,r3,64
 800a7c0:	80c0030d 	sth	r3,12(r16)
 800a7c4:	003fc406 	br	800a6d8 <__sflush_r+0x10c>
 800a7c8:	81000417 	ldw	r4,16(r16)
 800a7cc:	197dffcc 	andi	r5,r3,63487
 800a7d0:	8140030d 	sth	r5,12(r16)
 800a7d4:	80000115 	stw	zero,4(r16)
 800a7d8:	81000015 	stw	r4,0(r16)
 800a7dc:	18c4000c 	andi	r3,r3,4096
 800a7e0:	183fb426 	beq	r3,zero,800a6b4 <__sflush_r+0xe8>
 800a7e4:	003fec06 	br	800a798 <__sflush_r+0x1cc>
 800a7e8:	9c400015 	stw	r17,0(r19)
 800a7ec:	0005883a 	mov	r2,zero
 800a7f0:	003fb906 	br	800a6d8 <__sflush_r+0x10c>

0800a7f4 <_fflush_r>:
 800a7f4:	defffd04 	addi	sp,sp,-12
 800a7f8:	dc000115 	stw	r16,4(sp)
 800a7fc:	dfc00215 	stw	ra,8(sp)
 800a800:	2021883a 	mov	r16,r4
 800a804:	20000226 	beq	r4,zero,800a810 <_fflush_r+0x1c>
 800a808:	20800e17 	ldw	r2,56(r4)
 800a80c:	10000726 	beq	r2,zero,800a82c <_fflush_r+0x38>
 800a810:	2880030f 	ldh	r2,12(r5)
 800a814:	10000a1e 	bne	r2,zero,800a840 <_fflush_r+0x4c>
 800a818:	0005883a 	mov	r2,zero
 800a81c:	dfc00217 	ldw	ra,8(sp)
 800a820:	dc000117 	ldw	r16,4(sp)
 800a824:	dec00304 	addi	sp,sp,12
 800a828:	f800283a 	ret
 800a82c:	d9400015 	stw	r5,0(sp)
 800a830:	800abdc0 	call	800abdc <__sinit>
 800a834:	d9400017 	ldw	r5,0(sp)
 800a838:	2880030f 	ldh	r2,12(r5)
 800a83c:	103ff626 	beq	r2,zero,800a818 <_fflush_r+0x24>
 800a840:	8009883a 	mov	r4,r16
 800a844:	dfc00217 	ldw	ra,8(sp)
 800a848:	dc000117 	ldw	r16,4(sp)
 800a84c:	dec00304 	addi	sp,sp,12
 800a850:	800a5cc1 	jmpi	800a5cc <__sflush_r>

0800a854 <fflush>:
 800a854:	200b883a 	mov	r5,r4
 800a858:	20000326 	beq	r4,zero,800a868 <fflush+0x14>
 800a85c:	00820174 	movhi	r2,2053
 800a860:	111bd417 	ldw	r4,28496(r2)
 800a864:	800a7f41 	jmpi	800a7f4 <_fflush_r>
 800a868:	00820174 	movhi	r2,2053
 800a86c:	111bd317 	ldw	r4,28492(r2)
 800a870:	01420074 	movhi	r5,2049
 800a874:	2969fd04 	addi	r5,r5,-22540
 800a878:	800b5901 	jmpi	800b590 <_fwalk_reent>

0800a87c <fileno>:
 800a87c:	00820174 	movhi	r2,2053
 800a880:	109bd417 	ldw	r2,28496(r2)
 800a884:	defffe04 	addi	sp,sp,-8
 800a888:	dc000015 	stw	r16,0(sp)
 800a88c:	dfc00115 	stw	ra,4(sp)
 800a890:	2021883a 	mov	r16,r4
 800a894:	10000226 	beq	r2,zero,800a8a0 <fileno+0x24>
 800a898:	10c00e17 	ldw	r3,56(r2)
 800a89c:	18000726 	beq	r3,zero,800a8bc <fileno+0x40>
 800a8a0:	8080030f 	ldh	r2,12(r16)
 800a8a4:	10000826 	beq	r2,zero,800a8c8 <fileno+0x4c>
 800a8a8:	8080038f 	ldh	r2,14(r16)
 800a8ac:	dfc00117 	ldw	ra,4(sp)
 800a8b0:	dc000017 	ldw	r16,0(sp)
 800a8b4:	dec00204 	addi	sp,sp,8
 800a8b8:	f800283a 	ret
 800a8bc:	1009883a 	mov	r4,r2
 800a8c0:	800abdc0 	call	800abdc <__sinit>
 800a8c4:	003ff606 	br	800a8a0 <fileno+0x24>
 800a8c8:	00820174 	movhi	r2,2053
 800a8cc:	10dbd417 	ldw	r3,28496(r2)
 800a8d0:	01000244 	movi	r4,9
 800a8d4:	00bfffc4 	movi	r2,-1
 800a8d8:	19000015 	stw	r4,0(r3)
 800a8dc:	003ff306 	br	800a8ac <fileno+0x30>

0800a8e0 <__fp_lock>:
 800a8e0:	0005883a 	mov	r2,zero
 800a8e4:	f800283a 	ret

0800a8e8 <_cleanup_r>:
 800a8e8:	01420074 	movhi	r5,2049
 800a8ec:	2941d604 	addi	r5,r5,1880
 800a8f0:	800b5901 	jmpi	800b590 <_fwalk_reent>

0800a8f4 <__sinit.part.0>:
 800a8f4:	00c20074 	movhi	r3,2049
 800a8f8:	20800117 	ldw	r2,4(r4)
 800a8fc:	18ea3a04 	addi	r3,r3,-22296
 800a900:	20c00f15 	stw	r3,60(r4)
 800a904:	2140bb04 	addi	r5,r4,748
 800a908:	00c000c4 	movi	r3,3
 800a90c:	20c0b915 	stw	r3,740(r4)
 800a910:	2140ba15 	stw	r5,744(r4)
 800a914:	2000b815 	stw	zero,736(r4)
 800a918:	10001705 	stb	zero,92(r2)
 800a91c:	10001745 	stb	zero,93(r2)
 800a920:	10001785 	stb	zero,94(r2)
 800a924:	100017c5 	stb	zero,95(r2)
 800a928:	10001805 	stb	zero,96(r2)
 800a92c:	10001845 	stb	zero,97(r2)
 800a930:	10001885 	stb	zero,98(r2)
 800a934:	100018c5 	stb	zero,99(r2)
 800a938:	00c00104 	movi	r3,4
 800a93c:	10c00315 	stw	r3,12(r2)
 800a940:	02020074 	movhi	r8,2049
 800a944:	20c00217 	ldw	r3,8(r4)
 800a948:	01c20074 	movhi	r7,2049
 800a94c:	01820074 	movhi	r6,2049
 800a950:	01420074 	movhi	r5,2049
 800a954:	4236e904 	addi	r8,r8,-9308
 800a958:	39f70004 	addi	r7,r7,-9216
 800a95c:	31b72004 	addi	r6,r6,-9088
 800a960:	29773704 	addi	r5,r5,-8996
 800a964:	02400074 	movhi	r9,1
 800a968:	10001915 	stw	zero,100(r2)
 800a96c:	10000015 	stw	zero,0(r2)
 800a970:	10000115 	stw	zero,4(r2)
 800a974:	10000215 	stw	zero,8(r2)
 800a978:	10000415 	stw	zero,16(r2)
 800a97c:	10000515 	stw	zero,20(r2)
 800a980:	10000615 	stw	zero,24(r2)
 800a984:	10800715 	stw	r2,28(r2)
 800a988:	12000815 	stw	r8,32(r2)
 800a98c:	11c00915 	stw	r7,36(r2)
 800a990:	11800a15 	stw	r6,40(r2)
 800a994:	11400b15 	stw	r5,44(r2)
 800a998:	4a400284 	addi	r9,r9,10
 800a99c:	1a400315 	stw	r9,12(r3)
 800a9a0:	18001915 	stw	zero,100(r3)
 800a9a4:	18000015 	stw	zero,0(r3)
 800a9a8:	18000115 	stw	zero,4(r3)
 800a9ac:	18000215 	stw	zero,8(r3)
 800a9b0:	18000415 	stw	zero,16(r3)
 800a9b4:	18001705 	stb	zero,92(r3)
 800a9b8:	18001745 	stb	zero,93(r3)
 800a9bc:	18001785 	stb	zero,94(r3)
 800a9c0:	180017c5 	stb	zero,95(r3)
 800a9c4:	18001805 	stb	zero,96(r3)
 800a9c8:	18001845 	stb	zero,97(r3)
 800a9cc:	18001885 	stb	zero,98(r3)
 800a9d0:	180018c5 	stb	zero,99(r3)
 800a9d4:	20800317 	ldw	r2,12(r4)
 800a9d8:	024000b4 	movhi	r9,2
 800a9dc:	18000515 	stw	zero,20(r3)
 800a9e0:	18000615 	stw	zero,24(r3)
 800a9e4:	18c00715 	stw	r3,28(r3)
 800a9e8:	1a000815 	stw	r8,32(r3)
 800a9ec:	19c00915 	stw	r7,36(r3)
 800a9f0:	19800a15 	stw	r6,40(r3)
 800a9f4:	19400b15 	stw	r5,44(r3)
 800a9f8:	4a400484 	addi	r9,r9,18
 800a9fc:	10001915 	stw	zero,100(r2)
 800aa00:	10000015 	stw	zero,0(r2)
 800aa04:	10000115 	stw	zero,4(r2)
 800aa08:	10000215 	stw	zero,8(r2)
 800aa0c:	12400315 	stw	r9,12(r2)
 800aa10:	10000415 	stw	zero,16(r2)
 800aa14:	10000515 	stw	zero,20(r2)
 800aa18:	10000615 	stw	zero,24(r2)
 800aa1c:	10001705 	stb	zero,92(r2)
 800aa20:	10001745 	stb	zero,93(r2)
 800aa24:	10001785 	stb	zero,94(r2)
 800aa28:	100017c5 	stb	zero,95(r2)
 800aa2c:	10001805 	stb	zero,96(r2)
 800aa30:	10001845 	stb	zero,97(r2)
 800aa34:	10001885 	stb	zero,98(r2)
 800aa38:	100018c5 	stb	zero,99(r2)
 800aa3c:	10800715 	stw	r2,28(r2)
 800aa40:	12000815 	stw	r8,32(r2)
 800aa44:	11c00915 	stw	r7,36(r2)
 800aa48:	11800a15 	stw	r6,40(r2)
 800aa4c:	11400b15 	stw	r5,44(r2)
 800aa50:	00800044 	movi	r2,1
 800aa54:	20800e15 	stw	r2,56(r4)
 800aa58:	f800283a 	ret

0800aa5c <__fp_unlock>:
 800aa5c:	0005883a 	mov	r2,zero
 800aa60:	f800283a 	ret

0800aa64 <__sfmoreglue>:
 800aa64:	defffc04 	addi	sp,sp,-16
 800aa68:	dc400115 	stw	r17,4(sp)
 800aa6c:	2c7fffc4 	addi	r17,r5,-1
 800aa70:	8c401a24 	muli	r17,r17,104
 800aa74:	dc800215 	stw	r18,8(sp)
 800aa78:	2825883a 	mov	r18,r5
 800aa7c:	89401d04 	addi	r5,r17,116
 800aa80:	dc000015 	stw	r16,0(sp)
 800aa84:	dfc00315 	stw	ra,12(sp)
 800aa88:	800b93c0 	call	800b93c <_malloc_r>
 800aa8c:	1021883a 	mov	r16,r2
 800aa90:	10000726 	beq	r2,zero,800aab0 <__sfmoreglue+0x4c>
 800aa94:	11000304 	addi	r4,r2,12
 800aa98:	10000015 	stw	zero,0(r2)
 800aa9c:	14800115 	stw	r18,4(r2)
 800aaa0:	11000215 	stw	r4,8(r2)
 800aaa4:	89801a04 	addi	r6,r17,104
 800aaa8:	000b883a 	mov	r5,zero
 800aaac:	80038cc0 	call	80038cc <memset>
 800aab0:	8005883a 	mov	r2,r16
 800aab4:	dfc00317 	ldw	ra,12(sp)
 800aab8:	dc800217 	ldw	r18,8(sp)
 800aabc:	dc400117 	ldw	r17,4(sp)
 800aac0:	dc000017 	ldw	r16,0(sp)
 800aac4:	dec00404 	addi	sp,sp,16
 800aac8:	f800283a 	ret

0800aacc <__sfp>:
 800aacc:	defffd04 	addi	sp,sp,-12
 800aad0:	00820174 	movhi	r2,2053
 800aad4:	dc000015 	stw	r16,0(sp)
 800aad8:	141bd317 	ldw	r16,28492(r2)
 800aadc:	dc400115 	stw	r17,4(sp)
 800aae0:	dfc00215 	stw	ra,8(sp)
 800aae4:	80800e17 	ldw	r2,56(r16)
 800aae8:	2023883a 	mov	r17,r4
 800aaec:	10002b26 	beq	r2,zero,800ab9c <__sfp+0xd0>
 800aaf0:	8400b804 	addi	r16,r16,736
 800aaf4:	80c00117 	ldw	r3,4(r16)
 800aaf8:	80800217 	ldw	r2,8(r16)
 800aafc:	18ffffc4 	addi	r3,r3,-1
 800ab00:	1800030e 	bge	r3,zero,800ab10 <__sfp+0x44>
 800ab04:	00002106 	br	800ab8c <__sfp+0xc0>
 800ab08:	10801a04 	addi	r2,r2,104
 800ab0c:	30001f26 	beq	r6,zero,800ab8c <__sfp+0xc0>
 800ab10:	1140030f 	ldh	r5,12(r2)
 800ab14:	18ffffc4 	addi	r3,r3,-1
 800ab18:	19bfffd8 	cmpnei	r6,r3,-1
 800ab1c:	283ffa1e 	bne	r5,zero,800ab08 <__sfp+0x3c>
 800ab20:	00fffff4 	movhi	r3,65535
 800ab24:	18c00044 	addi	r3,r3,1
 800ab28:	10001915 	stw	zero,100(r2)
 800ab2c:	10000015 	stw	zero,0(r2)
 800ab30:	10000115 	stw	zero,4(r2)
 800ab34:	10000215 	stw	zero,8(r2)
 800ab38:	10c00315 	stw	r3,12(r2)
 800ab3c:	10000415 	stw	zero,16(r2)
 800ab40:	10000515 	stw	zero,20(r2)
 800ab44:	10000615 	stw	zero,24(r2)
 800ab48:	10001705 	stb	zero,92(r2)
 800ab4c:	10001745 	stb	zero,93(r2)
 800ab50:	10001785 	stb	zero,94(r2)
 800ab54:	100017c5 	stb	zero,95(r2)
 800ab58:	10001805 	stb	zero,96(r2)
 800ab5c:	10001845 	stb	zero,97(r2)
 800ab60:	10001885 	stb	zero,98(r2)
 800ab64:	100018c5 	stb	zero,99(r2)
 800ab68:	10000c15 	stw	zero,48(r2)
 800ab6c:	10000d15 	stw	zero,52(r2)
 800ab70:	10001115 	stw	zero,68(r2)
 800ab74:	10001215 	stw	zero,72(r2)
 800ab78:	dfc00217 	ldw	ra,8(sp)
 800ab7c:	dc400117 	ldw	r17,4(sp)
 800ab80:	dc000017 	ldw	r16,0(sp)
 800ab84:	dec00304 	addi	sp,sp,12
 800ab88:	f800283a 	ret
 800ab8c:	80800017 	ldw	r2,0(r16)
 800ab90:	10000526 	beq	r2,zero,800aba8 <__sfp+0xdc>
 800ab94:	1021883a 	mov	r16,r2
 800ab98:	003fd606 	br	800aaf4 <__sfp+0x28>
 800ab9c:	8009883a 	mov	r4,r16
 800aba0:	800a8f40 	call	800a8f4 <__sinit.part.0>
 800aba4:	003fd206 	br	800aaf0 <__sfp+0x24>
 800aba8:	01400104 	movi	r5,4
 800abac:	8809883a 	mov	r4,r17
 800abb0:	800aa640 	call	800aa64 <__sfmoreglue>
 800abb4:	80800015 	stw	r2,0(r16)
 800abb8:	103ff61e 	bne	r2,zero,800ab94 <__sfp+0xc8>
 800abbc:	00c00304 	movi	r3,12
 800abc0:	88c00015 	stw	r3,0(r17)
 800abc4:	003fec06 	br	800ab78 <__sfp+0xac>

0800abc8 <_cleanup>:
 800abc8:	00820174 	movhi	r2,2053
 800abcc:	111bd317 	ldw	r4,28492(r2)
 800abd0:	01420074 	movhi	r5,2049
 800abd4:	2941d604 	addi	r5,r5,1880
 800abd8:	800b5901 	jmpi	800b590 <_fwalk_reent>

0800abdc <__sinit>:
 800abdc:	20800e17 	ldw	r2,56(r4)
 800abe0:	10000126 	beq	r2,zero,800abe8 <__sinit+0xc>
 800abe4:	f800283a 	ret
 800abe8:	800a8f41 	jmpi	800a8f4 <__sinit.part.0>

0800abec <__sfp_lock_acquire>:
 800abec:	f800283a 	ret

0800abf0 <__sfp_lock_release>:
 800abf0:	f800283a 	ret

0800abf4 <__sinit_lock_acquire>:
 800abf4:	f800283a 	ret

0800abf8 <__sinit_lock_release>:
 800abf8:	f800283a 	ret

0800abfc <__fp_lock_all>:
 800abfc:	00820174 	movhi	r2,2053
 800ac00:	111bd417 	ldw	r4,28496(r2)
 800ac04:	01420074 	movhi	r5,2049
 800ac08:	296a3804 	addi	r5,r5,-22304
 800ac0c:	800b4f81 	jmpi	800b4f8 <_fwalk>

0800ac10 <__fp_unlock_all>:
 800ac10:	00820174 	movhi	r2,2053
 800ac14:	111bd417 	ldw	r4,28496(r2)
 800ac18:	01420074 	movhi	r5,2049
 800ac1c:	296a9704 	addi	r5,r5,-21924
 800ac20:	800b4f81 	jmpi	800b4f8 <_fwalk>

0800ac24 <_malloc_trim_r>:
 800ac24:	defffb04 	addi	sp,sp,-20
 800ac28:	dcc00315 	stw	r19,12(sp)
 800ac2c:	04c20174 	movhi	r19,2053
 800ac30:	dc800215 	stw	r18,8(sp)
 800ac34:	dc400115 	stw	r17,4(sp)
 800ac38:	dc000015 	stw	r16,0(sp)
 800ac3c:	dfc00415 	stw	ra,16(sp)
 800ac40:	2821883a 	mov	r16,r5
 800ac44:	9cd4ab04 	addi	r19,r19,21164
 800ac48:	2025883a 	mov	r18,r4
 800ac4c:	8014e200 	call	8014e20 <__malloc_lock>
 800ac50:	98800217 	ldw	r2,8(r19)
 800ac54:	14400117 	ldw	r17,4(r2)
 800ac58:	00bfff04 	movi	r2,-4
 800ac5c:	88a2703a 	and	r17,r17,r2
 800ac60:	8c21c83a 	sub	r16,r17,r16
 800ac64:	8403fbc4 	addi	r16,r16,4079
 800ac68:	8020d33a 	srli	r16,r16,12
 800ac6c:	843fffc4 	addi	r16,r16,-1
 800ac70:	8020933a 	slli	r16,r16,12
 800ac74:	80840008 	cmpgei	r2,r16,4096
 800ac78:	10000626 	beq	r2,zero,800ac94 <_malloc_trim_r+0x70>
 800ac7c:	000b883a 	mov	r5,zero
 800ac80:	9009883a 	mov	r4,r18
 800ac84:	800db4c0 	call	800db4c <_sbrk_r>
 800ac88:	98c00217 	ldw	r3,8(r19)
 800ac8c:	1c47883a 	add	r3,r3,r17
 800ac90:	10c00a26 	beq	r2,r3,800acbc <_malloc_trim_r+0x98>
 800ac94:	9009883a 	mov	r4,r18
 800ac98:	8014f480 	call	8014f48 <__malloc_unlock>
 800ac9c:	0005883a 	mov	r2,zero
 800aca0:	dfc00417 	ldw	ra,16(sp)
 800aca4:	dcc00317 	ldw	r19,12(sp)
 800aca8:	dc800217 	ldw	r18,8(sp)
 800acac:	dc400117 	ldw	r17,4(sp)
 800acb0:	dc000017 	ldw	r16,0(sp)
 800acb4:	dec00504 	addi	sp,sp,20
 800acb8:	f800283a 	ret
 800acbc:	040bc83a 	sub	r5,zero,r16
 800acc0:	9009883a 	mov	r4,r18
 800acc4:	800db4c0 	call	800db4c <_sbrk_r>
 800acc8:	10bfffd8 	cmpnei	r2,r2,-1
 800accc:	10000d26 	beq	r2,zero,800ad04 <_malloc_trim_r+0xe0>
 800acd0:	00820174 	movhi	r2,2053
 800acd4:	109d9317 	ldw	r2,30284(r2)
 800acd8:	98c00217 	ldw	r3,8(r19)
 800acdc:	8c23c83a 	sub	r17,r17,r16
 800ace0:	8c400054 	ori	r17,r17,1
 800ace4:	1421c83a 	sub	r16,r2,r16
 800ace8:	1c400115 	stw	r17,4(r3)
 800acec:	00820174 	movhi	r2,2053
 800acf0:	9009883a 	mov	r4,r18
 800acf4:	141d9315 	stw	r16,30284(r2)
 800acf8:	8014f480 	call	8014f48 <__malloc_unlock>
 800acfc:	00800044 	movi	r2,1
 800ad00:	003fe706 	br	800aca0 <_malloc_trim_r+0x7c>
 800ad04:	000b883a 	mov	r5,zero
 800ad08:	9009883a 	mov	r4,r18
 800ad0c:	800db4c0 	call	800db4c <_sbrk_r>
 800ad10:	99000217 	ldw	r4,8(r19)
 800ad14:	1107c83a 	sub	r3,r2,r4
 800ad18:	19400410 	cmplti	r5,r3,16
 800ad1c:	283fdd1e 	bne	r5,zero,800ac94 <_malloc_trim_r+0x70>
 800ad20:	01420174 	movhi	r5,2053
 800ad24:	295bd517 	ldw	r5,28500(r5)
 800ad28:	18c00054 	ori	r3,r3,1
 800ad2c:	20c00115 	stw	r3,4(r4)
 800ad30:	1145c83a 	sub	r2,r2,r5
 800ad34:	01420174 	movhi	r5,2053
 800ad38:	289d9315 	stw	r2,30284(r5)
 800ad3c:	003fd506 	br	800ac94 <_malloc_trim_r+0x70>

0800ad40 <_free_r>:
 800ad40:	28004f26 	beq	r5,zero,800ae80 <_free_r+0x140>
 800ad44:	defffd04 	addi	sp,sp,-12
 800ad48:	dc400115 	stw	r17,4(sp)
 800ad4c:	dc000015 	stw	r16,0(sp)
 800ad50:	2023883a 	mov	r17,r4
 800ad54:	2821883a 	mov	r16,r5
 800ad58:	dfc00215 	stw	ra,8(sp)
 800ad5c:	8014e200 	call	8014e20 <__malloc_lock>
 800ad60:	81ffff17 	ldw	r7,-4(r16)
 800ad64:	00bfff84 	movi	r2,-2
 800ad68:	80fffe04 	addi	r3,r16,-8
 800ad6c:	3884703a 	and	r2,r7,r2
 800ad70:	01020174 	movhi	r4,2053
 800ad74:	188d883a 	add	r6,r3,r2
 800ad78:	2114ab04 	addi	r4,r4,21164
 800ad7c:	31400117 	ldw	r5,4(r6)
 800ad80:	22000217 	ldw	r8,8(r4)
 800ad84:	027fff04 	movi	r9,-4
 800ad88:	2a4a703a 	and	r5,r5,r9
 800ad8c:	41806426 	beq	r8,r6,800af20 <_free_r+0x1e0>
 800ad90:	31400115 	stw	r5,4(r6)
 800ad94:	39c0004c 	andi	r7,r7,1
 800ad98:	3151883a 	add	r8,r6,r5
 800ad9c:	3800281e 	bne	r7,zero,800ae40 <_free_r+0x100>
 800ada0:	82bffe17 	ldw	r10,-8(r16)
 800ada4:	42000117 	ldw	r8,4(r8)
 800ada8:	01c20174 	movhi	r7,2053
 800adac:	1a87c83a 	sub	r3,r3,r10
 800adb0:	1a400217 	ldw	r9,8(r3)
 800adb4:	39d4ad04 	addi	r7,r7,21172
 800adb8:	1285883a 	add	r2,r2,r10
 800adbc:	4200004c 	andi	r8,r8,1
 800adc0:	49c04c26 	beq	r9,r7,800aef4 <_free_r+0x1b4>
 800adc4:	1a800317 	ldw	r10,12(r3)
 800adc8:	4a800315 	stw	r10,12(r9)
 800adcc:	52400215 	stw	r9,8(r10)
 800add0:	40007126 	beq	r8,zero,800af98 <_free_r+0x258>
 800add4:	11400054 	ori	r5,r2,1
 800add8:	19400115 	stw	r5,4(r3)
 800addc:	30800015 	stw	r2,0(r6)
 800ade0:	11408028 	cmpgeui	r5,r2,512
 800ade4:	28002c1e 	bne	r5,zero,800ae98 <_free_r+0x158>
 800ade8:	100ad0fa 	srli	r5,r2,3
 800adec:	100cd17a 	srli	r6,r2,5
 800adf0:	00800044 	movi	r2,1
 800adf4:	29400044 	addi	r5,r5,1
 800adf8:	280a90fa 	slli	r5,r5,3
 800adfc:	21c00117 	ldw	r7,4(r4)
 800ae00:	1184983a 	sll	r2,r2,r6
 800ae04:	214b883a 	add	r5,r4,r5
 800ae08:	29800017 	ldw	r6,0(r5)
 800ae0c:	11c4b03a 	or	r2,r2,r7
 800ae10:	29fffe04 	addi	r7,r5,-8
 800ae14:	19c00315 	stw	r7,12(r3)
 800ae18:	19800215 	stw	r6,8(r3)
 800ae1c:	20800115 	stw	r2,4(r4)
 800ae20:	28c00015 	stw	r3,0(r5)
 800ae24:	30c00315 	stw	r3,12(r6)
 800ae28:	8809883a 	mov	r4,r17
 800ae2c:	dfc00217 	ldw	ra,8(sp)
 800ae30:	dc400117 	ldw	r17,4(sp)
 800ae34:	dc000017 	ldw	r16,0(sp)
 800ae38:	dec00304 	addi	sp,sp,12
 800ae3c:	8014f481 	jmpi	8014f48 <__malloc_unlock>
 800ae40:	41c00117 	ldw	r7,4(r8)
 800ae44:	39c0004c 	andi	r7,r7,1
 800ae48:	38000e1e 	bne	r7,zero,800ae84 <_free_r+0x144>
 800ae4c:	01c20174 	movhi	r7,2053
 800ae50:	1145883a 	add	r2,r2,r5
 800ae54:	39d4ad04 	addi	r7,r7,21172
 800ae58:	31400217 	ldw	r5,8(r6)
 800ae5c:	12400054 	ori	r9,r2,1
 800ae60:	1891883a 	add	r8,r3,r2
 800ae64:	29c05226 	beq	r5,r7,800afb0 <_free_r+0x270>
 800ae68:	31800317 	ldw	r6,12(r6)
 800ae6c:	29800315 	stw	r6,12(r5)
 800ae70:	31400215 	stw	r5,8(r6)
 800ae74:	1a400115 	stw	r9,4(r3)
 800ae78:	40800015 	stw	r2,0(r8)
 800ae7c:	003fd806 	br	800ade0 <_free_r+0xa0>
 800ae80:	f800283a 	ret
 800ae84:	11400054 	ori	r5,r2,1
 800ae88:	817fff15 	stw	r5,-4(r16)
 800ae8c:	30800015 	stw	r2,0(r6)
 800ae90:	11408028 	cmpgeui	r5,r2,512
 800ae94:	283fd426 	beq	r5,zero,800ade8 <_free_r+0xa8>
 800ae98:	100ad27a 	srli	r5,r2,9
 800ae9c:	29800168 	cmpgeui	r6,r5,5
 800aea0:	3000341e 	bne	r6,zero,800af74 <_free_r+0x234>
 800aea4:	100ad1ba 	srli	r5,r2,6
 800aea8:	29800e44 	addi	r6,r5,57
 800aeac:	300c90fa 	slli	r6,r6,3
 800aeb0:	29c00e04 	addi	r7,r5,56
 800aeb4:	218d883a 	add	r6,r4,r6
 800aeb8:	31400017 	ldw	r5,0(r6)
 800aebc:	31bffe04 	addi	r6,r6,-8
 800aec0:	31404226 	beq	r6,r5,800afcc <_free_r+0x28c>
 800aec4:	01ffff04 	movi	r7,-4
 800aec8:	29000117 	ldw	r4,4(r5)
 800aecc:	21c8703a 	and	r4,r4,r7
 800aed0:	1100022e 	bgeu	r2,r4,800aedc <_free_r+0x19c>
 800aed4:	29400217 	ldw	r5,8(r5)
 800aed8:	317ffb1e 	bne	r6,r5,800aec8 <_free_r+0x188>
 800aedc:	29800317 	ldw	r6,12(r5)
 800aee0:	19800315 	stw	r6,12(r3)
 800aee4:	19400215 	stw	r5,8(r3)
 800aee8:	30c00215 	stw	r3,8(r6)
 800aeec:	28c00315 	stw	r3,12(r5)
 800aef0:	003fcd06 	br	800ae28 <_free_r+0xe8>
 800aef4:	40004d1e 	bne	r8,zero,800b02c <_free_r+0x2ec>
 800aef8:	31000317 	ldw	r4,12(r6)
 800aefc:	31800217 	ldw	r6,8(r6)
 800af00:	2885883a 	add	r2,r5,r2
 800af04:	11400054 	ori	r5,r2,1
 800af08:	31000315 	stw	r4,12(r6)
 800af0c:	21800215 	stw	r6,8(r4)
 800af10:	19400115 	stw	r5,4(r3)
 800af14:	1887883a 	add	r3,r3,r2
 800af18:	18800015 	stw	r2,0(r3)
 800af1c:	003fc206 	br	800ae28 <_free_r+0xe8>
 800af20:	39c0004c 	andi	r7,r7,1
 800af24:	1145883a 	add	r2,r2,r5
 800af28:	3800071e 	bne	r7,zero,800af48 <_free_r+0x208>
 800af2c:	81fffe17 	ldw	r7,-8(r16)
 800af30:	19c7c83a 	sub	r3,r3,r7
 800af34:	19400317 	ldw	r5,12(r3)
 800af38:	19800217 	ldw	r6,8(r3)
 800af3c:	11c5883a 	add	r2,r2,r7
 800af40:	31400315 	stw	r5,12(r6)
 800af44:	29800215 	stw	r6,8(r5)
 800af48:	01420174 	movhi	r5,2053
 800af4c:	11800054 	ori	r6,r2,1
 800af50:	295bd617 	ldw	r5,28504(r5)
 800af54:	19800115 	stw	r6,4(r3)
 800af58:	20c00215 	stw	r3,8(r4)
 800af5c:	117fb236 	bltu	r2,r5,800ae28 <_free_r+0xe8>
 800af60:	00820174 	movhi	r2,2053
 800af64:	115c3017 	ldw	r5,28864(r2)
 800af68:	8809883a 	mov	r4,r17
 800af6c:	800ac240 	call	800ac24 <_malloc_trim_r>
 800af70:	003fad06 	br	800ae28 <_free_r+0xe8>
 800af74:	29800568 	cmpgeui	r6,r5,21
 800af78:	30000926 	beq	r6,zero,800afa0 <_free_r+0x260>
 800af7c:	29801568 	cmpgeui	r6,r5,85
 800af80:	3000191e 	bne	r6,zero,800afe8 <_free_r+0x2a8>
 800af84:	100ad33a 	srli	r5,r2,12
 800af88:	29801bc4 	addi	r6,r5,111
 800af8c:	300c90fa 	slli	r6,r6,3
 800af90:	29c01b84 	addi	r7,r5,110
 800af94:	003fc706 	br	800aeb4 <_free_r+0x174>
 800af98:	1145883a 	add	r2,r2,r5
 800af9c:	003fae06 	br	800ae58 <_free_r+0x118>
 800afa0:	29801704 	addi	r6,r5,92
 800afa4:	300c90fa 	slli	r6,r6,3
 800afa8:	29c016c4 	addi	r7,r5,91
 800afac:	003fc106 	br	800aeb4 <_free_r+0x174>
 800afb0:	20c00515 	stw	r3,20(r4)
 800afb4:	20c00415 	stw	r3,16(r4)
 800afb8:	19c00315 	stw	r7,12(r3)
 800afbc:	19c00215 	stw	r7,8(r3)
 800afc0:	1a400115 	stw	r9,4(r3)
 800afc4:	40800015 	stw	r2,0(r8)
 800afc8:	003f9706 	br	800ae28 <_free_r+0xe8>
 800afcc:	380fd0ba 	srai	r7,r7,2
 800afd0:	00800044 	movi	r2,1
 800afd4:	22000117 	ldw	r8,4(r4)
 800afd8:	11ce983a 	sll	r7,r2,r7
 800afdc:	3a0eb03a 	or	r7,r7,r8
 800afe0:	21c00115 	stw	r7,4(r4)
 800afe4:	003fbe06 	br	800aee0 <_free_r+0x1a0>
 800afe8:	29805568 	cmpgeui	r6,r5,341
 800afec:	3000051e 	bne	r6,zero,800b004 <_free_r+0x2c4>
 800aff0:	100ad3fa 	srli	r5,r2,15
 800aff4:	29801e04 	addi	r6,r5,120
 800aff8:	300c90fa 	slli	r6,r6,3
 800affc:	29c01dc4 	addi	r7,r5,119
 800b000:	003fac06 	br	800aeb4 <_free_r+0x174>
 800b004:	29415568 	cmpgeui	r5,r5,1365
 800b008:	2800051e 	bne	r5,zero,800b020 <_free_r+0x2e0>
 800b00c:	100ad4ba 	srli	r5,r2,18
 800b010:	29801f44 	addi	r6,r5,125
 800b014:	300c90fa 	slli	r6,r6,3
 800b018:	29c01f04 	addi	r7,r5,124
 800b01c:	003fa506 	br	800aeb4 <_free_r+0x174>
 800b020:	0180fe04 	movi	r6,1016
 800b024:	01c01f84 	movi	r7,126
 800b028:	003fa206 	br	800aeb4 <_free_r+0x174>
 800b02c:	11000054 	ori	r4,r2,1
 800b030:	19000115 	stw	r4,4(r3)
 800b034:	30800015 	stw	r2,0(r6)
 800b038:	003f7b06 	br	800ae28 <_free_r+0xe8>

0800b03c <__sfvwrite_r>:
 800b03c:	30800217 	ldw	r2,8(r6)
 800b040:	1000c726 	beq	r2,zero,800b360 <__sfvwrite_r+0x324>
 800b044:	29c0030b 	ldhu	r7,12(r5)
 800b048:	defff404 	addi	sp,sp,-48
 800b04c:	dd800815 	stw	r22,32(sp)
 800b050:	dd400715 	stw	r21,28(sp)
 800b054:	dc000215 	stw	r16,8(sp)
 800b058:	dfc00b15 	stw	ra,44(sp)
 800b05c:	df000a15 	stw	fp,40(sp)
 800b060:	ddc00915 	stw	r23,36(sp)
 800b064:	dd000615 	stw	r20,24(sp)
 800b068:	dcc00515 	stw	r19,20(sp)
 800b06c:	dc800415 	stw	r18,16(sp)
 800b070:	dc400315 	stw	r17,12(sp)
 800b074:	3880020c 	andi	r2,r7,8
 800b078:	302d883a 	mov	r22,r6
 800b07c:	202b883a 	mov	r21,r4
 800b080:	2821883a 	mov	r16,r5
 800b084:	10002226 	beq	r2,zero,800b110 <__sfvwrite_r+0xd4>
 800b088:	28800417 	ldw	r2,16(r5)
 800b08c:	10002026 	beq	r2,zero,800b110 <__sfvwrite_r+0xd4>
 800b090:	3880008c 	andi	r2,r7,2
 800b094:	b4400017 	ldw	r17,0(r22)
 800b098:	10002526 	beq	r2,zero,800b130 <__sfvwrite_r+0xf4>
 800b09c:	80800917 	ldw	r2,36(r16)
 800b0a0:	81400717 	ldw	r5,28(r16)
 800b0a4:	05200034 	movhi	r20,32768
 800b0a8:	0027883a 	mov	r19,zero
 800b0ac:	0025883a 	mov	r18,zero
 800b0b0:	a53f0004 	addi	r20,r20,-1024
 800b0b4:	980d883a 	mov	r6,r19
 800b0b8:	a809883a 	mov	r4,r21
 800b0bc:	90001026 	beq	r18,zero,800b100 <__sfvwrite_r+0xc4>
 800b0c0:	900f883a 	mov	r7,r18
 800b0c4:	a480012e 	bgeu	r20,r18,800b0cc <__sfvwrite_r+0x90>
 800b0c8:	a00f883a 	mov	r7,r20
 800b0cc:	103ee83a 	callr	r2
 800b0d0:	00809e0e 	bge	zero,r2,800b34c <__sfvwrite_r+0x310>
 800b0d4:	b1000217 	ldw	r4,8(r22)
 800b0d8:	98a7883a 	add	r19,r19,r2
 800b0dc:	90a5c83a 	sub	r18,r18,r2
 800b0e0:	2085c83a 	sub	r2,r4,r2
 800b0e4:	b0800215 	stw	r2,8(r22)
 800b0e8:	10006226 	beq	r2,zero,800b274 <__sfvwrite_r+0x238>
 800b0ec:	80800917 	ldw	r2,36(r16)
 800b0f0:	81400717 	ldw	r5,28(r16)
 800b0f4:	980d883a 	mov	r6,r19
 800b0f8:	a809883a 	mov	r4,r21
 800b0fc:	903ff01e 	bne	r18,zero,800b0c0 <__sfvwrite_r+0x84>
 800b100:	8cc00017 	ldw	r19,0(r17)
 800b104:	8c800117 	ldw	r18,4(r17)
 800b108:	8c400204 	addi	r17,r17,8
 800b10c:	003fe906 	br	800b0b4 <__sfvwrite_r+0x78>
 800b110:	800b883a 	mov	r5,r16
 800b114:	a809883a 	mov	r4,r21
 800b118:	8008b240 	call	8008b24 <__swsetup_r>
 800b11c:	1000f41e 	bne	r2,zero,800b4f0 <__sfvwrite_r+0x4b4>
 800b120:	81c0030b 	ldhu	r7,12(r16)
 800b124:	b4400017 	ldw	r17,0(r22)
 800b128:	3880008c 	andi	r2,r7,2
 800b12c:	103fdb1e 	bne	r2,zero,800b09c <__sfvwrite_r+0x60>
 800b130:	3880004c 	andi	r2,r7,1
 800b134:	84800217 	ldw	r18,8(r16)
 800b138:	82000017 	ldw	r8,0(r16)
 800b13c:	10008a1e 	bne	r2,zero,800b368 <__sfvwrite_r+0x32c>
 800b140:	00a00034 	movhi	r2,32768
 800b144:	10bfff84 	addi	r2,r2,-2
 800b148:	00e00034 	movhi	r3,32768
 800b14c:	d8800015 	stw	r2,0(sp)
 800b150:	18bfffc4 	addi	r2,r3,-1
 800b154:	0039883a 	mov	fp,zero
 800b158:	0027883a 	mov	r19,zero
 800b15c:	d8800115 	stw	r2,4(sp)
 800b160:	98004026 	beq	r19,zero,800b264 <__sfvwrite_r+0x228>
 800b164:	3880800c 	andi	r2,r7,512
 800b168:	10009226 	beq	r2,zero,800b3b4 <__sfvwrite_r+0x378>
 800b16c:	902f883a 	mov	r23,r18
 800b170:	9c80b636 	bltu	r19,r18,800b44c <__sfvwrite_r+0x410>
 800b174:	3881200c 	andi	r2,r7,1152
 800b178:	10002526 	beq	r2,zero,800b210 <__sfvwrite_r+0x1d4>
 800b17c:	81000517 	ldw	r4,20(r16)
 800b180:	81400417 	ldw	r5,16(r16)
 800b184:	98800044 	addi	r2,r19,1
 800b188:	210000e4 	muli	r4,r4,3
 800b18c:	4165c83a 	sub	r18,r8,r5
 800b190:	1485883a 	add	r2,r2,r18
 800b194:	2028d7fa 	srli	r20,r4,31
 800b198:	a109883a 	add	r4,r20,r4
 800b19c:	2029d07a 	srai	r20,r4,1
 800b1a0:	a00d883a 	mov	r6,r20
 800b1a4:	a080022e 	bgeu	r20,r2,800b1b0 <__sfvwrite_r+0x174>
 800b1a8:	1029883a 	mov	r20,r2
 800b1ac:	100d883a 	mov	r6,r2
 800b1b0:	39c1000c 	andi	r7,r7,1024
 800b1b4:	3800be26 	beq	r7,zero,800b4b0 <__sfvwrite_r+0x474>
 800b1b8:	a809883a 	mov	r4,r21
 800b1bc:	300b883a 	mov	r5,r6
 800b1c0:	800b93c0 	call	800b93c <_malloc_r>
 800b1c4:	1009883a 	mov	r4,r2
 800b1c8:	1000c526 	beq	r2,zero,800b4e0 <__sfvwrite_r+0x4a4>
 800b1cc:	81400417 	ldw	r5,16(r16)
 800b1d0:	900d883a 	mov	r6,r18
 800b1d4:	80037cc0 	call	80037cc <memcpy>
 800b1d8:	1009883a 	mov	r4,r2
 800b1dc:	8080030b 	ldhu	r2,12(r16)
 800b1e0:	00fedfc4 	movi	r3,-1153
 800b1e4:	10c4703a 	and	r2,r2,r3
 800b1e8:	10802014 	ori	r2,r2,128
 800b1ec:	8080030d 	sth	r2,12(r16)
 800b1f0:	2491883a 	add	r8,r4,r18
 800b1f4:	a485c83a 	sub	r2,r20,r18
 800b1f8:	81000415 	stw	r4,16(r16)
 800b1fc:	82000015 	stw	r8,0(r16)
 800b200:	85000515 	stw	r20,20(r16)
 800b204:	9825883a 	mov	r18,r19
 800b208:	80800215 	stw	r2,8(r16)
 800b20c:	982f883a 	mov	r23,r19
 800b210:	4009883a 	mov	r4,r8
 800b214:	b80d883a 	mov	r6,r23
 800b218:	e00b883a 	mov	r5,fp
 800b21c:	800c1f00 	call	800c1f0 <memmove>
 800b220:	81000217 	ldw	r4,8(r16)
 800b224:	80800017 	ldw	r2,0(r16)
 800b228:	9829883a 	mov	r20,r19
 800b22c:	24a5c83a 	sub	r18,r4,r18
 800b230:	15c5883a 	add	r2,r2,r23
 800b234:	84800215 	stw	r18,8(r16)
 800b238:	80800015 	stw	r2,0(r16)
 800b23c:	0027883a 	mov	r19,zero
 800b240:	b0800217 	ldw	r2,8(r22)
 800b244:	e539883a 	add	fp,fp,r20
 800b248:	1529c83a 	sub	r20,r2,r20
 800b24c:	b5000215 	stw	r20,8(r22)
 800b250:	a0000826 	beq	r20,zero,800b274 <__sfvwrite_r+0x238>
 800b254:	81c0030b 	ldhu	r7,12(r16)
 800b258:	84800217 	ldw	r18,8(r16)
 800b25c:	82000017 	ldw	r8,0(r16)
 800b260:	983fc01e 	bne	r19,zero,800b164 <__sfvwrite_r+0x128>
 800b264:	8f000017 	ldw	fp,0(r17)
 800b268:	8cc00117 	ldw	r19,4(r17)
 800b26c:	8c400204 	addi	r17,r17,8
 800b270:	003fbb06 	br	800b160 <__sfvwrite_r+0x124>
 800b274:	0005883a 	mov	r2,zero
 800b278:	dfc00b17 	ldw	ra,44(sp)
 800b27c:	df000a17 	ldw	fp,40(sp)
 800b280:	ddc00917 	ldw	r23,36(sp)
 800b284:	dd800817 	ldw	r22,32(sp)
 800b288:	dd400717 	ldw	r21,28(sp)
 800b28c:	dd000617 	ldw	r20,24(sp)
 800b290:	dcc00517 	ldw	r19,20(sp)
 800b294:	dc800417 	ldw	r18,16(sp)
 800b298:	dc400317 	ldw	r17,12(sp)
 800b29c:	dc000217 	ldw	r16,8(sp)
 800b2a0:	dec00c04 	addi	sp,sp,48
 800b2a4:	f800283a 	ret
 800b2a8:	e1c07016 	blt	fp,r7,800b46c <__sfvwrite_r+0x430>
 800b2ac:	80800917 	ldw	r2,36(r16)
 800b2b0:	81400717 	ldw	r5,28(r16)
 800b2b4:	b80d883a 	mov	r6,r23
 800b2b8:	a809883a 	mov	r4,r21
 800b2bc:	103ee83a 	callr	r2
 800b2c0:	1025883a 	mov	r18,r2
 800b2c4:	0080210e 	bge	zero,r2,800b34c <__sfvwrite_r+0x310>
 800b2c8:	a4a9c83a 	sub	r20,r20,r18
 800b2cc:	a0006226 	beq	r20,zero,800b458 <__sfvwrite_r+0x41c>
 800b2d0:	00800044 	movi	r2,1
 800b2d4:	b1800217 	ldw	r6,8(r22)
 800b2d8:	bcaf883a 	add	r23,r23,r18
 800b2dc:	9ca7c83a 	sub	r19,r19,r18
 800b2e0:	34a5c83a 	sub	r18,r6,r18
 800b2e4:	b4800215 	stw	r18,8(r22)
 800b2e8:	903fe226 	beq	r18,zero,800b274 <__sfvwrite_r+0x238>
 800b2ec:	84800217 	ldw	r18,8(r16)
 800b2f0:	82000017 	ldw	r8,0(r16)
 800b2f4:	98002126 	beq	r19,zero,800b37c <__sfvwrite_r+0x340>
 800b2f8:	10002426 	beq	r2,zero,800b38c <__sfvwrite_r+0x350>
 800b2fc:	a005883a 	mov	r2,r20
 800b300:	9839883a 	mov	fp,r19
 800b304:	14c0012e 	bgeu	r2,r19,800b30c <__sfvwrite_r+0x2d0>
 800b308:	1039883a 	mov	fp,r2
 800b30c:	80800417 	ldw	r2,16(r16)
 800b310:	81c00517 	ldw	r7,20(r16)
 800b314:	123fe42e 	bgeu	r2,r8,800b2a8 <__sfvwrite_r+0x26c>
 800b318:	3ca5883a 	add	r18,r7,r18
 800b31c:	973fe20e 	bge	r18,fp,800b2a8 <__sfvwrite_r+0x26c>
 800b320:	b80b883a 	mov	r5,r23
 800b324:	4009883a 	mov	r4,r8
 800b328:	900d883a 	mov	r6,r18
 800b32c:	800c1f00 	call	800c1f0 <memmove>
 800b330:	80800017 	ldw	r2,0(r16)
 800b334:	800b883a 	mov	r5,r16
 800b338:	a809883a 	mov	r4,r21
 800b33c:	1485883a 	add	r2,r2,r18
 800b340:	80800015 	stw	r2,0(r16)
 800b344:	800a7f40 	call	800a7f4 <_fflush_r>
 800b348:	103fdf26 	beq	r2,zero,800b2c8 <__sfvwrite_r+0x28c>
 800b34c:	8080030b 	ldhu	r2,12(r16)
 800b350:	10801014 	ori	r2,r2,64
 800b354:	8080030d 	sth	r2,12(r16)
 800b358:	00bfffc4 	movi	r2,-1
 800b35c:	003fc606 	br	800b278 <__sfvwrite_r+0x23c>
 800b360:	0005883a 	mov	r2,zero
 800b364:	f800283a 	ret
 800b368:	0027883a 	mov	r19,zero
 800b36c:	0029883a 	mov	r20,zero
 800b370:	0005883a 	mov	r2,zero
 800b374:	002f883a 	mov	r23,zero
 800b378:	983fdf1e 	bne	r19,zero,800b2f8 <__sfvwrite_r+0x2bc>
 800b37c:	8cc00117 	ldw	r19,4(r17)
 800b380:	8dc00017 	ldw	r23,0(r17)
 800b384:	8c400204 	addi	r17,r17,8
 800b388:	983ffc26 	beq	r19,zero,800b37c <__sfvwrite_r+0x340>
 800b38c:	980d883a 	mov	r6,r19
 800b390:	01400284 	movi	r5,10
 800b394:	b809883a 	mov	r4,r23
 800b398:	da000015 	stw	r8,0(sp)
 800b39c:	800c11c0 	call	800c11c <memchr>
 800b3a0:	da000017 	ldw	r8,0(sp)
 800b3a4:	10003f26 	beq	r2,zero,800b4a4 <__sfvwrite_r+0x468>
 800b3a8:	10800044 	addi	r2,r2,1
 800b3ac:	15e9c83a 	sub	r20,r2,r23
 800b3b0:	003fd206 	br	800b2fc <__sfvwrite_r+0x2c0>
 800b3b4:	80800417 	ldw	r2,16(r16)
 800b3b8:	12001136 	bltu	r2,r8,800b400 <__sfvwrite_r+0x3c4>
 800b3bc:	85000517 	ldw	r20,20(r16)
 800b3c0:	9d000f36 	bltu	r19,r20,800b400 <__sfvwrite_r+0x3c4>
 800b3c4:	d8800017 	ldw	r2,0(sp)
 800b3c8:	14c0342e 	bgeu	r2,r19,800b49c <__sfvwrite_r+0x460>
 800b3cc:	d9000117 	ldw	r4,4(sp)
 800b3d0:	a00b883a 	mov	r5,r20
 800b3d4:	8011ee80 	call	8011ee8 <__divsi3>
 800b3d8:	150f383a 	mul	r7,r2,r20
 800b3dc:	82000917 	ldw	r8,36(r16)
 800b3e0:	81400717 	ldw	r5,28(r16)
 800b3e4:	e00d883a 	mov	r6,fp
 800b3e8:	a809883a 	mov	r4,r21
 800b3ec:	403ee83a 	callr	r8
 800b3f0:	1029883a 	mov	r20,r2
 800b3f4:	00bfd50e 	bge	zero,r2,800b34c <__sfvwrite_r+0x310>
 800b3f8:	9d27c83a 	sub	r19,r19,r20
 800b3fc:	003f9006 	br	800b240 <__sfvwrite_r+0x204>
 800b400:	9029883a 	mov	r20,r18
 800b404:	9c80012e 	bgeu	r19,r18,800b40c <__sfvwrite_r+0x3d0>
 800b408:	9829883a 	mov	r20,r19
 800b40c:	4009883a 	mov	r4,r8
 800b410:	a00d883a 	mov	r6,r20
 800b414:	e00b883a 	mov	r5,fp
 800b418:	800c1f00 	call	800c1f0 <memmove>
 800b41c:	80800217 	ldw	r2,8(r16)
 800b420:	81000017 	ldw	r4,0(r16)
 800b424:	1505c83a 	sub	r2,r2,r20
 800b428:	2509883a 	add	r4,r4,r20
 800b42c:	80800215 	stw	r2,8(r16)
 800b430:	81000015 	stw	r4,0(r16)
 800b434:	103ff01e 	bne	r2,zero,800b3f8 <__sfvwrite_r+0x3bc>
 800b438:	800b883a 	mov	r5,r16
 800b43c:	a809883a 	mov	r4,r21
 800b440:	800a7f40 	call	800a7f4 <_fflush_r>
 800b444:	103fec26 	beq	r2,zero,800b3f8 <__sfvwrite_r+0x3bc>
 800b448:	003fc006 	br	800b34c <__sfvwrite_r+0x310>
 800b44c:	9825883a 	mov	r18,r19
 800b450:	982f883a 	mov	r23,r19
 800b454:	003f6e06 	br	800b210 <__sfvwrite_r+0x1d4>
 800b458:	800b883a 	mov	r5,r16
 800b45c:	a809883a 	mov	r4,r21
 800b460:	800a7f40 	call	800a7f4 <_fflush_r>
 800b464:	103f9b26 	beq	r2,zero,800b2d4 <__sfvwrite_r+0x298>
 800b468:	003fb806 	br	800b34c <__sfvwrite_r+0x310>
 800b46c:	e00d883a 	mov	r6,fp
 800b470:	b80b883a 	mov	r5,r23
 800b474:	4009883a 	mov	r4,r8
 800b478:	800c1f00 	call	800c1f0 <memmove>
 800b47c:	80800217 	ldw	r2,8(r16)
 800b480:	81800017 	ldw	r6,0(r16)
 800b484:	e025883a 	mov	r18,fp
 800b488:	1705c83a 	sub	r2,r2,fp
 800b48c:	370d883a 	add	r6,r6,fp
 800b490:	80800215 	stw	r2,8(r16)
 800b494:	81800015 	stw	r6,0(r16)
 800b498:	003f8b06 	br	800b2c8 <__sfvwrite_r+0x28c>
 800b49c:	9809883a 	mov	r4,r19
 800b4a0:	003fcb06 	br	800b3d0 <__sfvwrite_r+0x394>
 800b4a4:	98800044 	addi	r2,r19,1
 800b4a8:	1029883a 	mov	r20,r2
 800b4ac:	003f9406 	br	800b300 <__sfvwrite_r+0x2c4>
 800b4b0:	a809883a 	mov	r4,r21
 800b4b4:	800d5640 	call	800d564 <_realloc_r>
 800b4b8:	1009883a 	mov	r4,r2
 800b4bc:	103f4c1e 	bne	r2,zero,800b1f0 <__sfvwrite_r+0x1b4>
 800b4c0:	81400417 	ldw	r5,16(r16)
 800b4c4:	a809883a 	mov	r4,r21
 800b4c8:	800ad400 	call	800ad40 <_free_r>
 800b4cc:	8080030b 	ldhu	r2,12(r16)
 800b4d0:	00c00304 	movi	r3,12
 800b4d4:	a8c00015 	stw	r3,0(r21)
 800b4d8:	10bfdfcc 	andi	r2,r2,65407
 800b4dc:	003f9c06 	br	800b350 <__sfvwrite_r+0x314>
 800b4e0:	00c00304 	movi	r3,12
 800b4e4:	8080030b 	ldhu	r2,12(r16)
 800b4e8:	a8c00015 	stw	r3,0(r21)
 800b4ec:	003f9806 	br	800b350 <__sfvwrite_r+0x314>
 800b4f0:	00bfffc4 	movi	r2,-1
 800b4f4:	003f6006 	br	800b278 <__sfvwrite_r+0x23c>

0800b4f8 <_fwalk>:
 800b4f8:	defffa04 	addi	sp,sp,-24
 800b4fc:	dd000415 	stw	r20,16(sp)
 800b500:	dcc00315 	stw	r19,12(sp)
 800b504:	dc800215 	stw	r18,8(sp)
 800b508:	dfc00515 	stw	ra,20(sp)
 800b50c:	dc400115 	stw	r17,4(sp)
 800b510:	dc000015 	stw	r16,0(sp)
 800b514:	2827883a 	mov	r19,r5
 800b518:	2480b804 	addi	r18,r4,736
 800b51c:	0029883a 	mov	r20,zero
 800b520:	94400117 	ldw	r17,4(r18)
 800b524:	94000217 	ldw	r16,8(r18)
 800b528:	8c7fffc4 	addi	r17,r17,-1
 800b52c:	88000d16 	blt	r17,zero,800b564 <_fwalk+0x6c>
 800b530:	8080030b 	ldhu	r2,12(r16)
 800b534:	8c7fffc4 	addi	r17,r17,-1
 800b538:	108000b0 	cmpltui	r2,r2,2
 800b53c:	1000061e 	bne	r2,zero,800b558 <_fwalk+0x60>
 800b540:	8080038f 	ldh	r2,14(r16)
 800b544:	8009883a 	mov	r4,r16
 800b548:	10bfffe0 	cmpeqi	r2,r2,-1
 800b54c:	1000021e 	bne	r2,zero,800b558 <_fwalk+0x60>
 800b550:	983ee83a 	callr	r19
 800b554:	a0a8b03a 	or	r20,r20,r2
 800b558:	88bfffd8 	cmpnei	r2,r17,-1
 800b55c:	84001a04 	addi	r16,r16,104
 800b560:	103ff31e 	bne	r2,zero,800b530 <_fwalk+0x38>
 800b564:	94800017 	ldw	r18,0(r18)
 800b568:	903fed1e 	bne	r18,zero,800b520 <_fwalk+0x28>
 800b56c:	a005883a 	mov	r2,r20
 800b570:	dfc00517 	ldw	ra,20(sp)
 800b574:	dd000417 	ldw	r20,16(sp)
 800b578:	dcc00317 	ldw	r19,12(sp)
 800b57c:	dc800217 	ldw	r18,8(sp)
 800b580:	dc400117 	ldw	r17,4(sp)
 800b584:	dc000017 	ldw	r16,0(sp)
 800b588:	dec00604 	addi	sp,sp,24
 800b58c:	f800283a 	ret

0800b590 <_fwalk_reent>:
 800b590:	defff904 	addi	sp,sp,-28
 800b594:	dd400515 	stw	r21,20(sp)
 800b598:	dd000415 	stw	r20,16(sp)
 800b59c:	dcc00315 	stw	r19,12(sp)
 800b5a0:	dc800215 	stw	r18,8(sp)
 800b5a4:	dfc00615 	stw	ra,24(sp)
 800b5a8:	dc400115 	stw	r17,4(sp)
 800b5ac:	dc000015 	stw	r16,0(sp)
 800b5b0:	202b883a 	mov	r21,r4
 800b5b4:	2827883a 	mov	r19,r5
 800b5b8:	2480b804 	addi	r18,r4,736
 800b5bc:	0029883a 	mov	r20,zero
 800b5c0:	94400117 	ldw	r17,4(r18)
 800b5c4:	94000217 	ldw	r16,8(r18)
 800b5c8:	8c7fffc4 	addi	r17,r17,-1
 800b5cc:	88000e16 	blt	r17,zero,800b608 <_fwalk_reent+0x78>
 800b5d0:	8080030b 	ldhu	r2,12(r16)
 800b5d4:	8c7fffc4 	addi	r17,r17,-1
 800b5d8:	108000b0 	cmpltui	r2,r2,2
 800b5dc:	1000071e 	bne	r2,zero,800b5fc <_fwalk_reent+0x6c>
 800b5e0:	8080038f 	ldh	r2,14(r16)
 800b5e4:	800b883a 	mov	r5,r16
 800b5e8:	a809883a 	mov	r4,r21
 800b5ec:	10bfffe0 	cmpeqi	r2,r2,-1
 800b5f0:	1000021e 	bne	r2,zero,800b5fc <_fwalk_reent+0x6c>
 800b5f4:	983ee83a 	callr	r19
 800b5f8:	a0a8b03a 	or	r20,r20,r2
 800b5fc:	88bfffd8 	cmpnei	r2,r17,-1
 800b600:	84001a04 	addi	r16,r16,104
 800b604:	103ff21e 	bne	r2,zero,800b5d0 <_fwalk_reent+0x40>
 800b608:	94800017 	ldw	r18,0(r18)
 800b60c:	903fec1e 	bne	r18,zero,800b5c0 <_fwalk_reent+0x30>
 800b610:	a005883a 	mov	r2,r20
 800b614:	dfc00617 	ldw	ra,24(sp)
 800b618:	dd400517 	ldw	r21,20(sp)
 800b61c:	dd000417 	ldw	r20,16(sp)
 800b620:	dcc00317 	ldw	r19,12(sp)
 800b624:	dc800217 	ldw	r18,8(sp)
 800b628:	dc400117 	ldw	r17,4(sp)
 800b62c:	dc000017 	ldw	r16,0(sp)
 800b630:	dec00704 	addi	sp,sp,28
 800b634:	f800283a 	ret

0800b638 <_getc_r>:
 800b638:	defffd04 	addi	sp,sp,-12
 800b63c:	dc000115 	stw	r16,4(sp)
 800b640:	dfc00215 	stw	ra,8(sp)
 800b644:	2021883a 	mov	r16,r4
 800b648:	20000226 	beq	r4,zero,800b654 <_getc_r+0x1c>
 800b64c:	20800e17 	ldw	r2,56(r4)
 800b650:	10000c26 	beq	r2,zero,800b684 <_getc_r+0x4c>
 800b654:	28800117 	ldw	r2,4(r5)
 800b658:	10bfffc4 	addi	r2,r2,-1
 800b65c:	28800115 	stw	r2,4(r5)
 800b660:	10000f16 	blt	r2,zero,800b6a0 <_getc_r+0x68>
 800b664:	28800017 	ldw	r2,0(r5)
 800b668:	10c00044 	addi	r3,r2,1
 800b66c:	28c00015 	stw	r3,0(r5)
 800b670:	10800003 	ldbu	r2,0(r2)
 800b674:	dfc00217 	ldw	ra,8(sp)
 800b678:	dc000117 	ldw	r16,4(sp)
 800b67c:	dec00304 	addi	sp,sp,12
 800b680:	f800283a 	ret
 800b684:	d9400015 	stw	r5,0(sp)
 800b688:	800abdc0 	call	800abdc <__sinit>
 800b68c:	d9400017 	ldw	r5,0(sp)
 800b690:	28800117 	ldw	r2,4(r5)
 800b694:	10bfffc4 	addi	r2,r2,-1
 800b698:	28800115 	stw	r2,4(r5)
 800b69c:	103ff10e 	bge	r2,zero,800b664 <_getc_r+0x2c>
 800b6a0:	8009883a 	mov	r4,r16
 800b6a4:	dfc00217 	ldw	ra,8(sp)
 800b6a8:	dc000117 	ldw	r16,4(sp)
 800b6ac:	dec00304 	addi	sp,sp,12
 800b6b0:	800dac81 	jmpi	800dac8 <__srget_r>

0800b6b4 <getc>:
 800b6b4:	defffd04 	addi	sp,sp,-12
 800b6b8:	00820174 	movhi	r2,2053
 800b6bc:	dc400115 	stw	r17,4(sp)
 800b6c0:	145bd417 	ldw	r17,28496(r2)
 800b6c4:	dc000015 	stw	r16,0(sp)
 800b6c8:	dfc00215 	stw	ra,8(sp)
 800b6cc:	2021883a 	mov	r16,r4
 800b6d0:	88000226 	beq	r17,zero,800b6dc <getc+0x28>
 800b6d4:	88800e17 	ldw	r2,56(r17)
 800b6d8:	10000d26 	beq	r2,zero,800b710 <getc+0x5c>
 800b6dc:	80800117 	ldw	r2,4(r16)
 800b6e0:	10bfffc4 	addi	r2,r2,-1
 800b6e4:	80800115 	stw	r2,4(r16)
 800b6e8:	10000f16 	blt	r2,zero,800b728 <getc+0x74>
 800b6ec:	80800017 	ldw	r2,0(r16)
 800b6f0:	10c00044 	addi	r3,r2,1
 800b6f4:	80c00015 	stw	r3,0(r16)
 800b6f8:	10800003 	ldbu	r2,0(r2)
 800b6fc:	dfc00217 	ldw	ra,8(sp)
 800b700:	dc400117 	ldw	r17,4(sp)
 800b704:	dc000017 	ldw	r16,0(sp)
 800b708:	dec00304 	addi	sp,sp,12
 800b70c:	f800283a 	ret
 800b710:	8809883a 	mov	r4,r17
 800b714:	800abdc0 	call	800abdc <__sinit>
 800b718:	80800117 	ldw	r2,4(r16)
 800b71c:	10bfffc4 	addi	r2,r2,-1
 800b720:	80800115 	stw	r2,4(r16)
 800b724:	103ff10e 	bge	r2,zero,800b6ec <getc+0x38>
 800b728:	800b883a 	mov	r5,r16
 800b72c:	8809883a 	mov	r4,r17
 800b730:	dfc00217 	ldw	ra,8(sp)
 800b734:	dc400117 	ldw	r17,4(sp)
 800b738:	dc000017 	ldw	r16,0(sp)
 800b73c:	dec00304 	addi	sp,sp,12
 800b740:	800dac81 	jmpi	800dac8 <__srget_r>

0800b744 <__localeconv_l>:
 800b744:	20803c04 	addi	r2,r4,240
 800b748:	f800283a 	ret

0800b74c <_localeconv_r>:
 800b74c:	00820174 	movhi	r2,2053
 800b750:	1095e904 	addi	r2,r2,22436
 800b754:	f800283a 	ret

0800b758 <localeconv>:
 800b758:	00820174 	movhi	r2,2053
 800b75c:	1095e904 	addi	r2,r2,22436
 800b760:	f800283a 	ret

0800b764 <__swhatbuf_r>:
 800b764:	deffea04 	addi	sp,sp,-88
 800b768:	dc001215 	stw	r16,72(sp)
 800b76c:	2821883a 	mov	r16,r5
 800b770:	2940038f 	ldh	r5,14(r5)
 800b774:	dc801415 	stw	r18,80(sp)
 800b778:	dc401315 	stw	r17,76(sp)
 800b77c:	dfc01515 	stw	ra,84(sp)
 800b780:	3023883a 	mov	r17,r6
 800b784:	3825883a 	mov	r18,r7
 800b788:	28001016 	blt	r5,zero,800b7cc <__swhatbuf_r+0x68>
 800b78c:	d80d883a 	mov	r6,sp
 800b790:	8010ab80 	call	8010ab8 <_fstat_r>
 800b794:	10000d16 	blt	r2,zero,800b7cc <__swhatbuf_r+0x68>
 800b798:	d8c00117 	ldw	r3,4(sp)
 800b79c:	00820004 	movi	r2,2048
 800b7a0:	18fc000c 	andi	r3,r3,61440
 800b7a4:	18c80020 	cmpeqi	r3,r3,8192
 800b7a8:	90c00015 	stw	r3,0(r18)
 800b7ac:	00c10004 	movi	r3,1024
 800b7b0:	88c00015 	stw	r3,0(r17)
 800b7b4:	dfc01517 	ldw	ra,84(sp)
 800b7b8:	dc801417 	ldw	r18,80(sp)
 800b7bc:	dc401317 	ldw	r17,76(sp)
 800b7c0:	dc001217 	ldw	r16,72(sp)
 800b7c4:	dec01604 	addi	sp,sp,88
 800b7c8:	f800283a 	ret
 800b7cc:	8080030b 	ldhu	r2,12(r16)
 800b7d0:	90000015 	stw	zero,0(r18)
 800b7d4:	1080200c 	andi	r2,r2,128
 800b7d8:	10000426 	beq	r2,zero,800b7ec <__swhatbuf_r+0x88>
 800b7dc:	00801004 	movi	r2,64
 800b7e0:	88800015 	stw	r2,0(r17)
 800b7e4:	0005883a 	mov	r2,zero
 800b7e8:	003ff206 	br	800b7b4 <__swhatbuf_r+0x50>
 800b7ec:	00810004 	movi	r2,1024
 800b7f0:	88800015 	stw	r2,0(r17)
 800b7f4:	0005883a 	mov	r2,zero
 800b7f8:	003fee06 	br	800b7b4 <__swhatbuf_r+0x50>

0800b7fc <__smakebuf_r>:
 800b7fc:	2880030b 	ldhu	r2,12(r5)
 800b800:	defffa04 	addi	sp,sp,-24
 800b804:	dc000215 	stw	r16,8(sp)
 800b808:	dfc00515 	stw	ra,20(sp)
 800b80c:	dc800415 	stw	r18,16(sp)
 800b810:	dc400315 	stw	r17,12(sp)
 800b814:	1080008c 	andi	r2,r2,2
 800b818:	2821883a 	mov	r16,r5
 800b81c:	10000b26 	beq	r2,zero,800b84c <__smakebuf_r+0x50>
 800b820:	288010c4 	addi	r2,r5,67
 800b824:	28800015 	stw	r2,0(r5)
 800b828:	28800415 	stw	r2,16(r5)
 800b82c:	00800044 	movi	r2,1
 800b830:	28800515 	stw	r2,20(r5)
 800b834:	dfc00517 	ldw	ra,20(sp)
 800b838:	dc800417 	ldw	r18,16(sp)
 800b83c:	dc400317 	ldw	r17,12(sp)
 800b840:	dc000217 	ldw	r16,8(sp)
 800b844:	dec00604 	addi	sp,sp,24
 800b848:	f800283a 	ret
 800b84c:	d9c00104 	addi	r7,sp,4
 800b850:	d80d883a 	mov	r6,sp
 800b854:	2023883a 	mov	r17,r4
 800b858:	800b7640 	call	800b764 <__swhatbuf_r>
 800b85c:	d9000117 	ldw	r4,4(sp)
 800b860:	1025883a 	mov	r18,r2
 800b864:	2000131e 	bne	r4,zero,800b8b4 <__smakebuf_r+0xb8>
 800b868:	d9400017 	ldw	r5,0(sp)
 800b86c:	8809883a 	mov	r4,r17
 800b870:	800b93c0 	call	800b93c <_malloc_r>
 800b874:	10001c26 	beq	r2,zero,800b8e8 <__smakebuf_r+0xec>
 800b878:	01020074 	movhi	r4,2049
 800b87c:	212a3a04 	addi	r4,r4,-22296
 800b880:	80c0030b 	ldhu	r3,12(r16)
 800b884:	89000f15 	stw	r4,60(r17)
 800b888:	80800015 	stw	r2,0(r16)
 800b88c:	80800415 	stw	r2,16(r16)
 800b890:	d8800017 	ldw	r2,0(sp)
 800b894:	d9400117 	ldw	r5,4(sp)
 800b898:	18c02014 	ori	r3,r3,128
 800b89c:	80c0030d 	sth	r3,12(r16)
 800b8a0:	80800515 	stw	r2,20(r16)
 800b8a4:	28001d1e 	bne	r5,zero,800b91c <__smakebuf_r+0x120>
 800b8a8:	90c6b03a 	or	r3,r18,r3
 800b8ac:	80c0030d 	sth	r3,12(r16)
 800b8b0:	003fe006 	br	800b834 <__smakebuf_r+0x38>
 800b8b4:	8140038f 	ldh	r5,14(r16)
 800b8b8:	8809883a 	mov	r4,r17
 800b8bc:	8010b180 	call	8010b18 <_isatty_r>
 800b8c0:	103fe926 	beq	r2,zero,800b868 <__smakebuf_r+0x6c>
 800b8c4:	8080030b 	ldhu	r2,12(r16)
 800b8c8:	80c010c4 	addi	r3,r16,67
 800b8cc:	80c00015 	stw	r3,0(r16)
 800b8d0:	10800054 	ori	r2,r2,1
 800b8d4:	8080030d 	sth	r2,12(r16)
 800b8d8:	00800044 	movi	r2,1
 800b8dc:	80c00415 	stw	r3,16(r16)
 800b8e0:	80800515 	stw	r2,20(r16)
 800b8e4:	003fe006 	br	800b868 <__smakebuf_r+0x6c>
 800b8e8:	8080030b 	ldhu	r2,12(r16)
 800b8ec:	10c0800c 	andi	r3,r2,512
 800b8f0:	183fd01e 	bne	r3,zero,800b834 <__smakebuf_r+0x38>
 800b8f4:	00ffff04 	movi	r3,-4
 800b8f8:	10c4703a 	and	r2,r2,r3
 800b8fc:	10800094 	ori	r2,r2,2
 800b900:	80c010c4 	addi	r3,r16,67
 800b904:	8080030d 	sth	r2,12(r16)
 800b908:	00800044 	movi	r2,1
 800b90c:	80c00015 	stw	r3,0(r16)
 800b910:	80c00415 	stw	r3,16(r16)
 800b914:	80800515 	stw	r2,20(r16)
 800b918:	003fc606 	br	800b834 <__smakebuf_r+0x38>
 800b91c:	8140038f 	ldh	r5,14(r16)
 800b920:	8809883a 	mov	r4,r17
 800b924:	8010b180 	call	8010b18 <_isatty_r>
 800b928:	80c0030b 	ldhu	r3,12(r16)
 800b92c:	103fde26 	beq	r2,zero,800b8a8 <__smakebuf_r+0xac>
 800b930:	18ffff0c 	andi	r3,r3,65532
 800b934:	18c00054 	ori	r3,r3,1
 800b938:	003fdb06 	br	800b8a8 <__smakebuf_r+0xac>

0800b93c <_malloc_r>:
 800b93c:	defff604 	addi	sp,sp,-40
 800b940:	dc400115 	stw	r17,4(sp)
 800b944:	2c4002c4 	addi	r17,r5,11
 800b948:	dc800215 	stw	r18,8(sp)
 800b94c:	dfc00915 	stw	ra,36(sp)
 800b950:	df000815 	stw	fp,32(sp)
 800b954:	ddc00715 	stw	r23,28(sp)
 800b958:	dd800615 	stw	r22,24(sp)
 800b95c:	dd400515 	stw	r21,20(sp)
 800b960:	dd000415 	stw	r20,16(sp)
 800b964:	dcc00315 	stw	r19,12(sp)
 800b968:	dc000015 	stw	r16,0(sp)
 800b96c:	888005e8 	cmpgeui	r2,r17,23
 800b970:	2025883a 	mov	r18,r4
 800b974:	10001b1e 	bne	r2,zero,800b9e4 <_malloc_r+0xa8>
 800b978:	29400468 	cmpgeui	r5,r5,17
 800b97c:	2800821e 	bne	r5,zero,800bb88 <_malloc_r+0x24c>
 800b980:	8014e200 	call	8014e20 <__malloc_lock>
 800b984:	04400404 	movi	r17,16
 800b988:	01c00084 	movi	r7,2
 800b98c:	00800604 	movi	r2,24
 800b990:	04c20174 	movhi	r19,2053
 800b994:	9cd4ab04 	addi	r19,r19,21164
 800b998:	9885883a 	add	r2,r19,r2
 800b99c:	14000117 	ldw	r16,4(r2)
 800b9a0:	10fffe04 	addi	r3,r2,-8
 800b9a4:	80c08b26 	beq	r16,r3,800bbd4 <_malloc_r+0x298>
 800b9a8:	80800117 	ldw	r2,4(r16)
 800b9ac:	81000317 	ldw	r4,12(r16)
 800b9b0:	00ffff04 	movi	r3,-4
 800b9b4:	10c4703a 	and	r2,r2,r3
 800b9b8:	81400217 	ldw	r5,8(r16)
 800b9bc:	8085883a 	add	r2,r16,r2
 800b9c0:	10c00117 	ldw	r3,4(r2)
 800b9c4:	29000315 	stw	r4,12(r5)
 800b9c8:	21400215 	stw	r5,8(r4)
 800b9cc:	18c00054 	ori	r3,r3,1
 800b9d0:	10c00115 	stw	r3,4(r2)
 800b9d4:	9009883a 	mov	r4,r18
 800b9d8:	8014f480 	call	8014f48 <__malloc_unlock>
 800b9dc:	80800204 	addi	r2,r16,8
 800b9e0:	00006c06 	br	800bb94 <_malloc_r+0x258>
 800b9e4:	00bffe04 	movi	r2,-8
 800b9e8:	88a2703a 	and	r17,r17,r2
 800b9ec:	88006616 	blt	r17,zero,800bb88 <_malloc_r+0x24c>
 800b9f0:	89406536 	bltu	r17,r5,800bb88 <_malloc_r+0x24c>
 800b9f4:	8014e200 	call	8014e20 <__malloc_lock>
 800b9f8:	88807e28 	cmpgeui	r2,r17,504
 800b9fc:	10012226 	beq	r2,zero,800be88 <_malloc_r+0x54c>
 800ba00:	8804d27a 	srli	r2,r17,9
 800ba04:	10006f26 	beq	r2,zero,800bbc4 <_malloc_r+0x288>
 800ba08:	10c00168 	cmpgeui	r3,r2,5
 800ba0c:	1800fe1e 	bne	r3,zero,800be08 <_malloc_r+0x4cc>
 800ba10:	8804d1ba 	srli	r2,r17,6
 800ba14:	11c00e44 	addi	r7,r2,57
 800ba18:	380890fa 	slli	r4,r7,3
 800ba1c:	12000e04 	addi	r8,r2,56
 800ba20:	04c20174 	movhi	r19,2053
 800ba24:	9cd4ab04 	addi	r19,r19,21164
 800ba28:	9909883a 	add	r4,r19,r4
 800ba2c:	24000117 	ldw	r16,4(r4)
 800ba30:	213ffe04 	addi	r4,r4,-8
 800ba34:	24000b26 	beq	r4,r16,800ba64 <_malloc_r+0x128>
 800ba38:	01bfff04 	movi	r6,-4
 800ba3c:	00000306 	br	800ba4c <_malloc_r+0x110>
 800ba40:	1800d60e 	bge	r3,zero,800bd9c <_malloc_r+0x460>
 800ba44:	84000317 	ldw	r16,12(r16)
 800ba48:	24000626 	beq	r4,r16,800ba64 <_malloc_r+0x128>
 800ba4c:	80800117 	ldw	r2,4(r16)
 800ba50:	1184703a 	and	r2,r2,r6
 800ba54:	1447c83a 	sub	r3,r2,r17
 800ba58:	19400408 	cmpgei	r5,r3,16
 800ba5c:	283ff826 	beq	r5,zero,800ba40 <_malloc_r+0x104>
 800ba60:	400f883a 	mov	r7,r8
 800ba64:	9c000417 	ldw	r16,16(r19)
 800ba68:	02420174 	movhi	r9,2053
 800ba6c:	4a54ad04 	addi	r9,r9,21172
 800ba70:	82405f26 	beq	r16,r9,800bbf0 <_malloc_r+0x2b4>
 800ba74:	80c00117 	ldw	r3,4(r16)
 800ba78:	00bfff04 	movi	r2,-4
 800ba7c:	1884703a 	and	r2,r3,r2
 800ba80:	1447c83a 	sub	r3,r2,r17
 800ba84:	19000410 	cmplti	r4,r3,16
 800ba88:	20010a26 	beq	r4,zero,800beb4 <_malloc_r+0x578>
 800ba8c:	9a400515 	stw	r9,20(r19)
 800ba90:	9a400415 	stw	r9,16(r19)
 800ba94:	1800ff0e 	bge	r3,zero,800be94 <_malloc_r+0x558>
 800ba98:	10c08028 	cmpgeui	r3,r2,512
 800ba9c:	1800c11e 	bne	r3,zero,800bda4 <_malloc_r+0x468>
 800baa0:	1006d0fa 	srli	r3,r2,3
 800baa4:	1008d17a 	srli	r4,r2,5
 800baa8:	00800044 	movi	r2,1
 800baac:	18c00044 	addi	r3,r3,1
 800bab0:	180690fa 	slli	r3,r3,3
 800bab4:	99400117 	ldw	r5,4(r19)
 800bab8:	1104983a 	sll	r2,r2,r4
 800babc:	98c7883a 	add	r3,r19,r3
 800bac0:	19000017 	ldw	r4,0(r3)
 800bac4:	1144b03a 	or	r2,r2,r5
 800bac8:	197ffe04 	addi	r5,r3,-8
 800bacc:	81400315 	stw	r5,12(r16)
 800bad0:	81000215 	stw	r4,8(r16)
 800bad4:	98800115 	stw	r2,4(r19)
 800bad8:	1c000015 	stw	r16,0(r3)
 800badc:	24000315 	stw	r16,12(r4)
 800bae0:	3807d0ba 	srai	r3,r7,2
 800bae4:	01000044 	movi	r4,1
 800bae8:	20c8983a 	sll	r4,r4,r3
 800baec:	11004536 	bltu	r2,r4,800bc04 <_malloc_r+0x2c8>
 800baf0:	2086703a 	and	r3,r4,r2
 800baf4:	18000a1e 	bne	r3,zero,800bb20 <_malloc_r+0x1e4>
 800baf8:	00ffff04 	movi	r3,-4
 800bafc:	2109883a 	add	r4,r4,r4
 800bb00:	38ce703a 	and	r7,r7,r3
 800bb04:	2086703a 	and	r3,r4,r2
 800bb08:	39c00104 	addi	r7,r7,4
 800bb0c:	1800041e 	bne	r3,zero,800bb20 <_malloc_r+0x1e4>
 800bb10:	2109883a 	add	r4,r4,r4
 800bb14:	2086703a 	and	r3,r4,r2
 800bb18:	39c00104 	addi	r7,r7,4
 800bb1c:	183ffc26 	beq	r3,zero,800bb10 <_malloc_r+0x1d4>
 800bb20:	02bfff04 	movi	r10,-4
 800bb24:	381690fa 	slli	r11,r7,3
 800bb28:	3819883a 	mov	r12,r7
 800bb2c:	9ad7883a 	add	r11,r19,r11
 800bb30:	5811883a 	mov	r8,r11
 800bb34:	40800317 	ldw	r2,12(r8)
 800bb38:	4080bc26 	beq	r8,r2,800be2c <_malloc_r+0x4f0>
 800bb3c:	10c00117 	ldw	r3,4(r2)
 800bb40:	1021883a 	mov	r16,r2
 800bb44:	10800317 	ldw	r2,12(r2)
 800bb48:	1a86703a 	and	r3,r3,r10
 800bb4c:	1c4bc83a 	sub	r5,r3,r17
 800bb50:	29800410 	cmplti	r6,r5,16
 800bb54:	3000ba26 	beq	r6,zero,800be40 <_malloc_r+0x504>
 800bb58:	283ff716 	blt	r5,zero,800bb38 <_malloc_r+0x1fc>
 800bb5c:	80c7883a 	add	r3,r16,r3
 800bb60:	19400117 	ldw	r5,4(r3)
 800bb64:	81800217 	ldw	r6,8(r16)
 800bb68:	9009883a 	mov	r4,r18
 800bb6c:	29400054 	ori	r5,r5,1
 800bb70:	19400115 	stw	r5,4(r3)
 800bb74:	30800315 	stw	r2,12(r6)
 800bb78:	11800215 	stw	r6,8(r2)
 800bb7c:	8014f480 	call	8014f48 <__malloc_unlock>
 800bb80:	80800204 	addi	r2,r16,8
 800bb84:	00000306 	br	800bb94 <_malloc_r+0x258>
 800bb88:	00800304 	movi	r2,12
 800bb8c:	90800015 	stw	r2,0(r18)
 800bb90:	0005883a 	mov	r2,zero
 800bb94:	dfc00917 	ldw	ra,36(sp)
 800bb98:	df000817 	ldw	fp,32(sp)
 800bb9c:	ddc00717 	ldw	r23,28(sp)
 800bba0:	dd800617 	ldw	r22,24(sp)
 800bba4:	dd400517 	ldw	r21,20(sp)
 800bba8:	dd000417 	ldw	r20,16(sp)
 800bbac:	dcc00317 	ldw	r19,12(sp)
 800bbb0:	dc800217 	ldw	r18,8(sp)
 800bbb4:	dc400117 	ldw	r17,4(sp)
 800bbb8:	dc000017 	ldw	r16,0(sp)
 800bbbc:	dec00a04 	addi	sp,sp,40
 800bbc0:	f800283a 	ret
 800bbc4:	01008004 	movi	r4,512
 800bbc8:	01c01004 	movi	r7,64
 800bbcc:	02000fc4 	movi	r8,63
 800bbd0:	003f9306 	br	800ba20 <_malloc_r+0xe4>
 800bbd4:	14000317 	ldw	r16,12(r2)
 800bbd8:	39c00084 	addi	r7,r7,2
 800bbdc:	143f721e 	bne	r2,r16,800b9a8 <_malloc_r+0x6c>
 800bbe0:	9c000417 	ldw	r16,16(r19)
 800bbe4:	02420174 	movhi	r9,2053
 800bbe8:	4a54ad04 	addi	r9,r9,21172
 800bbec:	827fa11e 	bne	r16,r9,800ba74 <_malloc_r+0x138>
 800bbf0:	3807d0ba 	srai	r3,r7,2
 800bbf4:	01000044 	movi	r4,1
 800bbf8:	98800117 	ldw	r2,4(r19)
 800bbfc:	20c8983a 	sll	r4,r4,r3
 800bc00:	113fbb2e 	bgeu	r2,r4,800baf0 <_malloc_r+0x1b4>
 800bc04:	9c000217 	ldw	r16,8(r19)
 800bc08:	00bfff04 	movi	r2,-4
 800bc0c:	85400117 	ldw	r21,4(r16)
 800bc10:	a8ac703a 	and	r22,r21,r2
 800bc14:	b4400336 	bltu	r22,r17,800bc24 <_malloc_r+0x2e8>
 800bc18:	b445c83a 	sub	r2,r22,r17
 800bc1c:	10c00408 	cmpgei	r3,r2,16
 800bc20:	1800541e 	bne	r3,zero,800bd74 <_malloc_r+0x438>
 800bc24:	00820174 	movhi	r2,2053
 800bc28:	109bd517 	ldw	r2,28500(r2)
 800bc2c:	00c20174 	movhi	r3,2053
 800bc30:	1d5c3017 	ldw	r21,28864(r3)
 800bc34:	10bfffd8 	cmpnei	r2,r2,-1
 800bc38:	85b9883a 	add	fp,r16,r22
 800bc3c:	8d6b883a 	add	r21,r17,r21
 800bc40:	1000d626 	beq	r2,zero,800bf9c <_malloc_r+0x660>
 800bc44:	ad4403c4 	addi	r21,r21,4111
 800bc48:	00bc0004 	movi	r2,-4096
 800bc4c:	a8aa703a 	and	r21,r21,r2
 800bc50:	a80b883a 	mov	r5,r21
 800bc54:	9009883a 	mov	r4,r18
 800bc58:	800db4c0 	call	800db4c <_sbrk_r>
 800bc5c:	102f883a 	mov	r23,r2
 800bc60:	10bfffd8 	cmpnei	r2,r2,-1
 800bc64:	1000a826 	beq	r2,zero,800bf08 <_malloc_r+0x5cc>
 800bc68:	bf00a636 	bltu	r23,fp,800bf04 <_malloc_r+0x5c8>
 800bc6c:	00820174 	movhi	r2,2053
 800bc70:	151d9317 	ldw	r20,30284(r2)
 800bc74:	ad29883a 	add	r20,r21,r20
 800bc78:	151d9315 	stw	r20,30284(r2)
 800bc7c:	a007883a 	mov	r3,r20
 800bc80:	e5c0ec26 	beq	fp,r23,800c034 <_malloc_r+0x6f8>
 800bc84:	00820174 	movhi	r2,2053
 800bc88:	109bd517 	ldw	r2,28500(r2)
 800bc8c:	10bfffd8 	cmpnei	r2,r2,-1
 800bc90:	1000ef26 	beq	r2,zero,800c050 <_malloc_r+0x714>
 800bc94:	bf39c83a 	sub	fp,r23,fp
 800bc98:	e0c7883a 	add	r3,fp,r3
 800bc9c:	00820174 	movhi	r2,2053
 800bca0:	10dd9315 	stw	r3,30284(r2)
 800bca4:	bf0001cc 	andi	fp,r23,7
 800bca8:	e000c526 	beq	fp,zero,800bfc0 <_malloc_r+0x684>
 800bcac:	bf2fc83a 	sub	r23,r23,fp
 800bcb0:	bdc00204 	addi	r23,r23,8
 800bcb4:	05040204 	movi	r20,4104
 800bcb8:	a729c83a 	sub	r20,r20,fp
 800bcbc:	bd6b883a 	add	r21,r23,r21
 800bcc0:	a569c83a 	sub	r20,r20,r21
 800bcc4:	a503ffcc 	andi	r20,r20,4095
 800bcc8:	a00b883a 	mov	r5,r20
 800bccc:	9009883a 	mov	r4,r18
 800bcd0:	800db4c0 	call	800db4c <_sbrk_r>
 800bcd4:	10ffffe0 	cmpeqi	r3,r2,-1
 800bcd8:	1800f31e 	bne	r3,zero,800c0a8 <_malloc_r+0x76c>
 800bcdc:	15c5c83a 	sub	r2,r2,r23
 800bce0:	152b883a 	add	r21,r2,r20
 800bce4:	00820174 	movhi	r2,2053
 800bce8:	115d9317 	ldw	r5,30284(r2)
 800bcec:	9dc00215 	stw	r23,8(r19)
 800bcf0:	ad400054 	ori	r21,r21,1
 800bcf4:	a169883a 	add	r20,r20,r5
 800bcf8:	151d9315 	stw	r20,30284(r2)
 800bcfc:	bd400115 	stw	r21,4(r23)
 800bd00:	84c0d626 	beq	r16,r19,800c05c <_malloc_r+0x720>
 800bd04:	b0800428 	cmpgeui	r2,r22,16
 800bd08:	1000d626 	beq	r2,zero,800c064 <_malloc_r+0x728>
 800bd0c:	80c00117 	ldw	r3,4(r16)
 800bd10:	013ffe04 	movi	r4,-8
 800bd14:	b0bffd04 	addi	r2,r22,-12
 800bd18:	1104703a 	and	r2,r2,r4
 800bd1c:	18c0004c 	andi	r3,r3,1
 800bd20:	1886b03a 	or	r3,r3,r2
 800bd24:	80c00115 	stw	r3,4(r16)
 800bd28:	01000144 	movi	r4,5
 800bd2c:	8087883a 	add	r3,r16,r2
 800bd30:	19000115 	stw	r4,4(r3)
 800bd34:	19000215 	stw	r4,8(r3)
 800bd38:	10800428 	cmpgeui	r2,r2,16
 800bd3c:	1000df1e 	bne	r2,zero,800c0bc <_malloc_r+0x780>
 800bd40:	bd400117 	ldw	r21,4(r23)
 800bd44:	b821883a 	mov	r16,r23
 800bd48:	00820174 	movhi	r2,2053
 800bd4c:	109c2f17 	ldw	r2,28860(r2)
 800bd50:	1500022e 	bgeu	r2,r20,800bd5c <_malloc_r+0x420>
 800bd54:	00820174 	movhi	r2,2053
 800bd58:	151c2f15 	stw	r20,28860(r2)
 800bd5c:	00820174 	movhi	r2,2053
 800bd60:	109c2e17 	ldw	r2,28856(r2)
 800bd64:	15006a2e 	bgeu	r2,r20,800bf10 <_malloc_r+0x5d4>
 800bd68:	00820174 	movhi	r2,2053
 800bd6c:	151c2e15 	stw	r20,28856(r2)
 800bd70:	00006706 	br	800bf10 <_malloc_r+0x5d4>
 800bd74:	88c00054 	ori	r3,r17,1
 800bd78:	80c00115 	stw	r3,4(r16)
 800bd7c:	8463883a 	add	r17,r16,r17
 800bd80:	10800054 	ori	r2,r2,1
 800bd84:	9c400215 	stw	r17,8(r19)
 800bd88:	88800115 	stw	r2,4(r17)
 800bd8c:	9009883a 	mov	r4,r18
 800bd90:	8014f480 	call	8014f48 <__malloc_unlock>
 800bd94:	80800204 	addi	r2,r16,8
 800bd98:	003f7e06 	br	800bb94 <_malloc_r+0x258>
 800bd9c:	81000317 	ldw	r4,12(r16)
 800bda0:	003f0506 	br	800b9b8 <_malloc_r+0x7c>
 800bda4:	1006d27a 	srli	r3,r2,9
 800bda8:	19000168 	cmpgeui	r4,r3,5
 800bdac:	20005026 	beq	r4,zero,800bef0 <_malloc_r+0x5b4>
 800bdb0:	19000568 	cmpgeui	r4,r3,21
 800bdb4:	20008c1e 	bne	r4,zero,800bfe8 <_malloc_r+0x6ac>
 800bdb8:	19401704 	addi	r5,r3,92
 800bdbc:	280a90fa 	slli	r5,r5,3
 800bdc0:	190016c4 	addi	r4,r3,91
 800bdc4:	994b883a 	add	r5,r19,r5
 800bdc8:	28c00017 	ldw	r3,0(r5)
 800bdcc:	297ffe04 	addi	r5,r5,-8
 800bdd0:	28c07426 	beq	r5,r3,800bfa4 <_malloc_r+0x668>
 800bdd4:	01bfff04 	movi	r6,-4
 800bdd8:	19000117 	ldw	r4,4(r3)
 800bddc:	2188703a 	and	r4,r4,r6
 800bde0:	1100022e 	bgeu	r2,r4,800bdec <_malloc_r+0x4b0>
 800bde4:	18c00217 	ldw	r3,8(r3)
 800bde8:	28fffb1e 	bne	r5,r3,800bdd8 <_malloc_r+0x49c>
 800bdec:	19400317 	ldw	r5,12(r3)
 800bdf0:	98800117 	ldw	r2,4(r19)
 800bdf4:	81400315 	stw	r5,12(r16)
 800bdf8:	80c00215 	stw	r3,8(r16)
 800bdfc:	2c000215 	stw	r16,8(r5)
 800be00:	1c000315 	stw	r16,12(r3)
 800be04:	003f3606 	br	800bae0 <_malloc_r+0x1a4>
 800be08:	10c00568 	cmpgeui	r3,r2,21
 800be0c:	18004a26 	beq	r3,zero,800bf38 <_malloc_r+0x5fc>
 800be10:	10c01568 	cmpgeui	r3,r2,85
 800be14:	18007b1e 	bne	r3,zero,800c004 <_malloc_r+0x6c8>
 800be18:	8804d33a 	srli	r2,r17,12
 800be1c:	11c01bc4 	addi	r7,r2,111
 800be20:	380890fa 	slli	r4,r7,3
 800be24:	12001b84 	addi	r8,r2,110
 800be28:	003efd06 	br	800ba20 <_malloc_r+0xe4>
 800be2c:	63000044 	addi	r12,r12,1
 800be30:	608000cc 	andi	r2,r12,3
 800be34:	42000204 	addi	r8,r8,8
 800be38:	103f3e1e 	bne	r2,zero,800bb34 <_malloc_r+0x1f8>
 800be3c:	00004506 	br	800bf54 <_malloc_r+0x618>
 800be40:	81000217 	ldw	r4,8(r16)
 800be44:	89800054 	ori	r6,r17,1
 800be48:	81800115 	stw	r6,4(r16)
 800be4c:	20800315 	stw	r2,12(r4)
 800be50:	11000215 	stw	r4,8(r2)
 800be54:	8463883a 	add	r17,r16,r17
 800be58:	9c400515 	stw	r17,20(r19)
 800be5c:	9c400415 	stw	r17,16(r19)
 800be60:	28800054 	ori	r2,r5,1
 800be64:	88800115 	stw	r2,4(r17)
 800be68:	8a400315 	stw	r9,12(r17)
 800be6c:	8a400215 	stw	r9,8(r17)
 800be70:	80c7883a 	add	r3,r16,r3
 800be74:	19400015 	stw	r5,0(r3)
 800be78:	9009883a 	mov	r4,r18
 800be7c:	8014f480 	call	8014f48 <__malloc_unlock>
 800be80:	80800204 	addi	r2,r16,8
 800be84:	003f4306 	br	800bb94 <_malloc_r+0x258>
 800be88:	880ed0fa 	srli	r7,r17,3
 800be8c:	88800204 	addi	r2,r17,8
 800be90:	003ebf06 	br	800b990 <_malloc_r+0x54>
 800be94:	8085883a 	add	r2,r16,r2
 800be98:	10c00117 	ldw	r3,4(r2)
 800be9c:	9009883a 	mov	r4,r18
 800bea0:	18c00054 	ori	r3,r3,1
 800bea4:	10c00115 	stw	r3,4(r2)
 800bea8:	8014f480 	call	8014f48 <__malloc_unlock>
 800beac:	80800204 	addi	r2,r16,8
 800beb0:	003f3806 	br	800bb94 <_malloc_r+0x258>
 800beb4:	89000054 	ori	r4,r17,1
 800beb8:	81000115 	stw	r4,4(r16)
 800bebc:	8463883a 	add	r17,r16,r17
 800bec0:	9c400515 	stw	r17,20(r19)
 800bec4:	9c400415 	stw	r17,16(r19)
 800bec8:	19000054 	ori	r4,r3,1
 800becc:	89000115 	stw	r4,4(r17)
 800bed0:	8085883a 	add	r2,r16,r2
 800bed4:	8a400315 	stw	r9,12(r17)
 800bed8:	8a400215 	stw	r9,8(r17)
 800bedc:	10c00015 	stw	r3,0(r2)
 800bee0:	9009883a 	mov	r4,r18
 800bee4:	8014f480 	call	8014f48 <__malloc_unlock>
 800bee8:	80800204 	addi	r2,r16,8
 800beec:	003f2906 	br	800bb94 <_malloc_r+0x258>
 800bef0:	1006d1ba 	srli	r3,r2,6
 800bef4:	19400e44 	addi	r5,r3,57
 800bef8:	280a90fa 	slli	r5,r5,3
 800befc:	19000e04 	addi	r4,r3,56
 800bf00:	003fb006 	br	800bdc4 <_malloc_r+0x488>
 800bf04:	84c04626 	beq	r16,r19,800c020 <_malloc_r+0x6e4>
 800bf08:	9c000217 	ldw	r16,8(r19)
 800bf0c:	85400117 	ldw	r21,4(r16)
 800bf10:	00bfff04 	movi	r2,-4
 800bf14:	a8aa703a 	and	r21,r21,r2
 800bf18:	ac45c83a 	sub	r2,r21,r17
 800bf1c:	ac400236 	bltu	r21,r17,800bf28 <_malloc_r+0x5ec>
 800bf20:	10c00408 	cmpgei	r3,r2,16
 800bf24:	183f931e 	bne	r3,zero,800bd74 <_malloc_r+0x438>
 800bf28:	9009883a 	mov	r4,r18
 800bf2c:	8014f480 	call	8014f48 <__malloc_unlock>
 800bf30:	0005883a 	mov	r2,zero
 800bf34:	003f1706 	br	800bb94 <_malloc_r+0x258>
 800bf38:	11c01704 	addi	r7,r2,92
 800bf3c:	380890fa 	slli	r4,r7,3
 800bf40:	120016c4 	addi	r8,r2,91
 800bf44:	003eb606 	br	800ba20 <_malloc_r+0xe4>
 800bf48:	58800217 	ldw	r2,8(r11)
 800bf4c:	39ffffc4 	addi	r7,r7,-1
 800bf50:	12c0701e 	bne	r2,r11,800c114 <_malloc_r+0x7d8>
 800bf54:	388000cc 	andi	r2,r7,3
 800bf58:	5afffe04 	addi	r11,r11,-8
 800bf5c:	103ffa1e 	bne	r2,zero,800bf48 <_malloc_r+0x60c>
 800bf60:	98c00117 	ldw	r3,4(r19)
 800bf64:	0104303a 	nor	r2,zero,r4
 800bf68:	10c4703a 	and	r2,r2,r3
 800bf6c:	98800115 	stw	r2,4(r19)
 800bf70:	2109883a 	add	r4,r4,r4
 800bf74:	113f2336 	bltu	r2,r4,800bc04 <_malloc_r+0x2c8>
 800bf78:	203f2226 	beq	r4,zero,800bc04 <_malloc_r+0x2c8>
 800bf7c:	2086703a 	and	r3,r4,r2
 800bf80:	1800041e 	bne	r3,zero,800bf94 <_malloc_r+0x658>
 800bf84:	2109883a 	add	r4,r4,r4
 800bf88:	2086703a 	and	r3,r4,r2
 800bf8c:	63000104 	addi	r12,r12,4
 800bf90:	183ffc26 	beq	r3,zero,800bf84 <_malloc_r+0x648>
 800bf94:	600f883a 	mov	r7,r12
 800bf98:	003ee206 	br	800bb24 <_malloc_r+0x1e8>
 800bf9c:	ad400404 	addi	r21,r21,16
 800bfa0:	003f2b06 	br	800bc50 <_malloc_r+0x314>
 800bfa4:	2009d0ba 	srai	r4,r4,2
 800bfa8:	00800044 	movi	r2,1
 800bfac:	99800117 	ldw	r6,4(r19)
 800bfb0:	1104983a 	sll	r2,r2,r4
 800bfb4:	1184b03a 	or	r2,r2,r6
 800bfb8:	98800115 	stw	r2,4(r19)
 800bfbc:	003f8d06 	br	800bdf4 <_malloc_r+0x4b8>
 800bfc0:	bd69883a 	add	r20,r23,r21
 800bfc4:	0529c83a 	sub	r20,zero,r20
 800bfc8:	a503ffcc 	andi	r20,r20,4095
 800bfcc:	a00b883a 	mov	r5,r20
 800bfd0:	9009883a 	mov	r4,r18
 800bfd4:	800db4c0 	call	800db4c <_sbrk_r>
 800bfd8:	10ffffe0 	cmpeqi	r3,r2,-1
 800bfdc:	183f3f26 	beq	r3,zero,800bcdc <_malloc_r+0x3a0>
 800bfe0:	0029883a 	mov	r20,zero
 800bfe4:	003f3f06 	br	800bce4 <_malloc_r+0x3a8>
 800bfe8:	19001568 	cmpgeui	r4,r3,85
 800bfec:	2000201e 	bne	r4,zero,800c070 <_malloc_r+0x734>
 800bff0:	1006d33a 	srli	r3,r2,12
 800bff4:	19401bc4 	addi	r5,r3,111
 800bff8:	280a90fa 	slli	r5,r5,3
 800bffc:	19001b84 	addi	r4,r3,110
 800c000:	003f7006 	br	800bdc4 <_malloc_r+0x488>
 800c004:	10c05568 	cmpgeui	r3,r2,341
 800c008:	1800201e 	bne	r3,zero,800c08c <_malloc_r+0x750>
 800c00c:	8804d3fa 	srli	r2,r17,15
 800c010:	11c01e04 	addi	r7,r2,120
 800c014:	380890fa 	slli	r4,r7,3
 800c018:	12001dc4 	addi	r8,r2,119
 800c01c:	003e8006 	br	800ba20 <_malloc_r+0xe4>
 800c020:	00820174 	movhi	r2,2053
 800c024:	10dd9317 	ldw	r3,30284(r2)
 800c028:	a8c7883a 	add	r3,r21,r3
 800c02c:	10dd9315 	stw	r3,30284(r2)
 800c030:	003f1406 	br	800bc84 <_malloc_r+0x348>
 800c034:	e083ffcc 	andi	r2,fp,4095
 800c038:	103f121e 	bne	r2,zero,800bc84 <_malloc_r+0x348>
 800c03c:	9c000217 	ldw	r16,8(r19)
 800c040:	b56b883a 	add	r21,r22,r21
 800c044:	ad400054 	ori	r21,r21,1
 800c048:	85400115 	stw	r21,4(r16)
 800c04c:	003f3e06 	br	800bd48 <_malloc_r+0x40c>
 800c050:	00820174 	movhi	r2,2053
 800c054:	15dbd515 	stw	r23,28500(r2)
 800c058:	003f1206 	br	800bca4 <_malloc_r+0x368>
 800c05c:	b821883a 	mov	r16,r23
 800c060:	003f3906 	br	800bd48 <_malloc_r+0x40c>
 800c064:	00800044 	movi	r2,1
 800c068:	b8800115 	stw	r2,4(r23)
 800c06c:	003fae06 	br	800bf28 <_malloc_r+0x5ec>
 800c070:	19005568 	cmpgeui	r4,r3,341
 800c074:	2000191e 	bne	r4,zero,800c0dc <_malloc_r+0x7a0>
 800c078:	1006d3fa 	srli	r3,r2,15
 800c07c:	19401e04 	addi	r5,r3,120
 800c080:	280a90fa 	slli	r5,r5,3
 800c084:	19001dc4 	addi	r4,r3,119
 800c088:	003f4e06 	br	800bdc4 <_malloc_r+0x488>
 800c08c:	10815568 	cmpgeui	r2,r2,1365
 800c090:	1000191e 	bne	r2,zero,800c0f8 <_malloc_r+0x7bc>
 800c094:	8804d4ba 	srli	r2,r17,18
 800c098:	11c01f44 	addi	r7,r2,125
 800c09c:	380890fa 	slli	r4,r7,3
 800c0a0:	12001f04 	addi	r8,r2,124
 800c0a4:	003e5e06 	br	800ba20 <_malloc_r+0xe4>
 800c0a8:	e73ffe04 	addi	fp,fp,-8
 800c0ac:	af2b883a 	add	r21,r21,fp
 800c0b0:	adebc83a 	sub	r21,r21,r23
 800c0b4:	0029883a 	mov	r20,zero
 800c0b8:	003f0a06 	br	800bce4 <_malloc_r+0x3a8>
 800c0bc:	81400204 	addi	r5,r16,8
 800c0c0:	9009883a 	mov	r4,r18
 800c0c4:	800ad400 	call	800ad40 <_free_r>
 800c0c8:	9c000217 	ldw	r16,8(r19)
 800c0cc:	00820174 	movhi	r2,2053
 800c0d0:	151d9317 	ldw	r20,30284(r2)
 800c0d4:	85400117 	ldw	r21,4(r16)
 800c0d8:	003f1b06 	br	800bd48 <_malloc_r+0x40c>
 800c0dc:	18c15568 	cmpgeui	r3,r3,1365
 800c0e0:	1800091e 	bne	r3,zero,800c108 <_malloc_r+0x7cc>
 800c0e4:	1006d4ba 	srli	r3,r2,18
 800c0e8:	19401f44 	addi	r5,r3,125
 800c0ec:	280a90fa 	slli	r5,r5,3
 800c0f0:	19001f04 	addi	r4,r3,124
 800c0f4:	003f3306 	br	800bdc4 <_malloc_r+0x488>
 800c0f8:	0100fe04 	movi	r4,1016
 800c0fc:	01c01fc4 	movi	r7,127
 800c100:	02001f84 	movi	r8,126
 800c104:	003e4606 	br	800ba20 <_malloc_r+0xe4>
 800c108:	0140fe04 	movi	r5,1016
 800c10c:	01001f84 	movi	r4,126
 800c110:	003f2c06 	br	800bdc4 <_malloc_r+0x488>
 800c114:	98800117 	ldw	r2,4(r19)
 800c118:	003f9506 	br	800bf70 <_malloc_r+0x634>

0800c11c <memchr>:
 800c11c:	208000cc 	andi	r2,r4,3
 800c120:	280f883a 	mov	r7,r5
 800c124:	10000e26 	beq	r2,zero,800c160 <memchr+0x44>
 800c128:	30bfffc4 	addi	r2,r6,-1
 800c12c:	30001726 	beq	r6,zero,800c18c <memchr+0x70>
 800c130:	29803fcc 	andi	r6,r5,255
 800c134:	00000606 	br	800c150 <memchr+0x34>
 800c138:	21000044 	addi	r4,r4,1
 800c13c:	20c000cc 	andi	r3,r4,3
 800c140:	18000826 	beq	r3,zero,800c164 <memchr+0x48>
 800c144:	10bfffc4 	addi	r2,r2,-1
 800c148:	10ffffe0 	cmpeqi	r3,r2,-1
 800c14c:	18000f1e 	bne	r3,zero,800c18c <memchr+0x70>
 800c150:	20c00003 	ldbu	r3,0(r4)
 800c154:	19bff81e 	bne	r3,r6,800c138 <memchr+0x1c>
 800c158:	2005883a 	mov	r2,r4
 800c15c:	f800283a 	ret
 800c160:	3005883a 	mov	r2,r6
 800c164:	10c00128 	cmpgeui	r3,r2,4
 800c168:	18000a1e 	bne	r3,zero,800c194 <memchr+0x78>
 800c16c:	10001f26 	beq	r2,zero,800c1ec <memchr+0xd0>
 800c170:	2087883a 	add	r3,r4,r2
 800c174:	39803fcc 	andi	r6,r7,255
 800c178:	2005883a 	mov	r2,r4
 800c17c:	11000003 	ldbu	r4,0(r2)
 800c180:	21bff626 	beq	r4,r6,800c15c <memchr+0x40>
 800c184:	10800044 	addi	r2,r2,1
 800c188:	18bffc1e 	bne	r3,r2,800c17c <memchr+0x60>
 800c18c:	0005883a 	mov	r2,zero
 800c190:	f800283a 	ret
 800c194:	2810923a 	slli	r8,r5,8
 800c198:	29403fcc 	andi	r5,r5,255
 800c19c:	027fbff4 	movhi	r9,65279
 800c1a0:	423fffcc 	andi	r8,r8,65535
 800c1a4:	414ab03a 	or	r5,r8,r5
 800c1a8:	2810943a 	slli	r8,r5,16
 800c1ac:	01a02074 	movhi	r6,32897
 800c1b0:	4a7fbfc4 	addi	r9,r9,-257
 800c1b4:	4150b03a 	or	r8,r8,r5
 800c1b8:	31a02004 	addi	r6,r6,-32640
 800c1bc:	20c00017 	ldw	r3,0(r4)
 800c1c0:	40c6f03a 	xor	r3,r8,r3
 800c1c4:	1a4b883a 	add	r5,r3,r9
 800c1c8:	00c6303a 	nor	r3,zero,r3
 800c1cc:	28c6703a 	and	r3,r5,r3
 800c1d0:	1986703a 	and	r3,r3,r6
 800c1d4:	183fe61e 	bne	r3,zero,800c170 <memchr+0x54>
 800c1d8:	10bfff04 	addi	r2,r2,-4
 800c1dc:	10c00128 	cmpgeui	r3,r2,4
 800c1e0:	21000104 	addi	r4,r4,4
 800c1e4:	183ff51e 	bne	r3,zero,800c1bc <memchr+0xa0>
 800c1e8:	003fe006 	br	800c16c <memchr+0x50>
 800c1ec:	f800283a 	ret

0800c1f0 <memmove>:
 800c1f0:	2005883a 	mov	r2,r4
 800c1f4:	29000a2e 	bgeu	r5,r4,800c220 <memmove+0x30>
 800c1f8:	2989883a 	add	r4,r5,r6
 800c1fc:	1100082e 	bgeu	r2,r4,800c220 <memmove+0x30>
 800c200:	1187883a 	add	r3,r2,r6
 800c204:	30003e26 	beq	r6,zero,800c300 <memmove+0x110>
 800c208:	217fffc3 	ldbu	r5,-1(r4)
 800c20c:	18ffffc4 	addi	r3,r3,-1
 800c210:	213fffc4 	addi	r4,r4,-1
 800c214:	19400005 	stb	r5,0(r3)
 800c218:	10fffb1e 	bne	r2,r3,800c208 <memmove+0x18>
 800c21c:	f800283a 	ret
 800c220:	30c00430 	cmpltui	r3,r6,16
 800c224:	18000b26 	beq	r3,zero,800c254 <memmove+0x64>
 800c228:	1007883a 	mov	r3,r2
 800c22c:	31ffffc4 	addi	r7,r6,-1
 800c230:	30003726 	beq	r6,zero,800c310 <memmove+0x120>
 800c234:	39c00044 	addi	r7,r7,1
 800c238:	29cf883a 	add	r7,r5,r7
 800c23c:	29800003 	ldbu	r6,0(r5)
 800c240:	29400044 	addi	r5,r5,1
 800c244:	18c00044 	addi	r3,r3,1
 800c248:	19bfffc5 	stb	r6,-1(r3)
 800c24c:	29fffb1e 	bne	r5,r7,800c23c <memmove+0x4c>
 800c250:	f800283a 	ret
 800c254:	2886b03a 	or	r3,r5,r2
 800c258:	18c000cc 	andi	r3,r3,3
 800c25c:	1800291e 	bne	r3,zero,800c304 <memmove+0x114>
 800c260:	327ffc04 	addi	r9,r6,-16
 800c264:	4812d13a 	srli	r9,r9,4
 800c268:	280f883a 	mov	r7,r5
 800c26c:	1007883a 	mov	r3,r2
 800c270:	4a400044 	addi	r9,r9,1
 800c274:	4812913a 	slli	r9,r9,4
 800c278:	1251883a 	add	r8,r2,r9
 800c27c:	39000017 	ldw	r4,0(r7)
 800c280:	39c00404 	addi	r7,r7,16
 800c284:	18c00404 	addi	r3,r3,16
 800c288:	193ffc15 	stw	r4,-16(r3)
 800c28c:	393ffd17 	ldw	r4,-12(r7)
 800c290:	193ffd15 	stw	r4,-12(r3)
 800c294:	393ffe17 	ldw	r4,-8(r7)
 800c298:	193ffe15 	stw	r4,-8(r3)
 800c29c:	393fff17 	ldw	r4,-4(r7)
 800c2a0:	193fff15 	stw	r4,-4(r3)
 800c2a4:	40fff51e 	bne	r8,r3,800c27c <memmove+0x8c>
 800c2a8:	3100030c 	andi	r4,r6,12
 800c2ac:	2a4b883a 	add	r5,r5,r9
 800c2b0:	320003cc 	andi	r8,r6,15
 800c2b4:	20001726 	beq	r4,zero,800c314 <memmove+0x124>
 800c2b8:	2813883a 	mov	r9,r5
 800c2bc:	180f883a 	mov	r7,r3
 800c2c0:	4a800017 	ldw	r10,0(r9)
 800c2c4:	39c00104 	addi	r7,r7,4
 800c2c8:	41c9c83a 	sub	r4,r8,r7
 800c2cc:	1909883a 	add	r4,r3,r4
 800c2d0:	21000128 	cmpgeui	r4,r4,4
 800c2d4:	3abfff15 	stw	r10,-4(r7)
 800c2d8:	4a400104 	addi	r9,r9,4
 800c2dc:	203ff81e 	bne	r4,zero,800c2c0 <memmove+0xd0>
 800c2e0:	413fff04 	addi	r4,r8,-4
 800c2e4:	2008d0ba 	srli	r4,r4,2
 800c2e8:	318000cc 	andi	r6,r6,3
 800c2ec:	21000044 	addi	r4,r4,1
 800c2f0:	200890ba 	slli	r4,r4,2
 800c2f4:	1907883a 	add	r3,r3,r4
 800c2f8:	290b883a 	add	r5,r5,r4
 800c2fc:	003fcb06 	br	800c22c <memmove+0x3c>
 800c300:	f800283a 	ret
 800c304:	31ffffc4 	addi	r7,r6,-1
 800c308:	1007883a 	mov	r3,r2
 800c30c:	003fc906 	br	800c234 <memmove+0x44>
 800c310:	f800283a 	ret
 800c314:	400d883a 	mov	r6,r8
 800c318:	003fc406 	br	800c22c <memmove+0x3c>

0800c31c <_Balloc>:
 800c31c:	20801317 	ldw	r2,76(r4)
 800c320:	defffc04 	addi	sp,sp,-16
 800c324:	dc400115 	stw	r17,4(sp)
 800c328:	dc000015 	stw	r16,0(sp)
 800c32c:	dfc00315 	stw	ra,12(sp)
 800c330:	dc800215 	stw	r18,8(sp)
 800c334:	2021883a 	mov	r16,r4
 800c338:	2823883a 	mov	r17,r5
 800c33c:	10000e26 	beq	r2,zero,800c378 <_Balloc+0x5c>
 800c340:	880690ba 	slli	r3,r17,2
 800c344:	10c7883a 	add	r3,r2,r3
 800c348:	18800017 	ldw	r2,0(r3)
 800c34c:	10001126 	beq	r2,zero,800c394 <_Balloc+0x78>
 800c350:	11000017 	ldw	r4,0(r2)
 800c354:	19000015 	stw	r4,0(r3)
 800c358:	10000415 	stw	zero,16(r2)
 800c35c:	10000315 	stw	zero,12(r2)
 800c360:	dfc00317 	ldw	ra,12(sp)
 800c364:	dc800217 	ldw	r18,8(sp)
 800c368:	dc400117 	ldw	r17,4(sp)
 800c36c:	dc000017 	ldw	r16,0(sp)
 800c370:	dec00404 	addi	sp,sp,16
 800c374:	f800283a 	ret
 800c378:	01800844 	movi	r6,33
 800c37c:	01400104 	movi	r5,4
 800c380:	80106a40 	call	80106a4 <_calloc_r>
 800c384:	80801315 	stw	r2,76(r16)
 800c388:	103fed1e 	bne	r2,zero,800c340 <_Balloc+0x24>
 800c38c:	0005883a 	mov	r2,zero
 800c390:	003ff306 	br	800c360 <_Balloc+0x44>
 800c394:	04800044 	movi	r18,1
 800c398:	9464983a 	sll	r18,r18,r17
 800c39c:	01400044 	movi	r5,1
 800c3a0:	8009883a 	mov	r4,r16
 800c3a4:	91800144 	addi	r6,r18,5
 800c3a8:	300c90ba 	slli	r6,r6,2
 800c3ac:	80106a40 	call	80106a4 <_calloc_r>
 800c3b0:	103ff626 	beq	r2,zero,800c38c <_Balloc+0x70>
 800c3b4:	14400115 	stw	r17,4(r2)
 800c3b8:	14800215 	stw	r18,8(r2)
 800c3bc:	003fe606 	br	800c358 <_Balloc+0x3c>

0800c3c0 <_Bfree>:
 800c3c0:	28000726 	beq	r5,zero,800c3e0 <_Bfree+0x20>
 800c3c4:	28c00117 	ldw	r3,4(r5)
 800c3c8:	20801317 	ldw	r2,76(r4)
 800c3cc:	180690ba 	slli	r3,r3,2
 800c3d0:	10c5883a 	add	r2,r2,r3
 800c3d4:	10c00017 	ldw	r3,0(r2)
 800c3d8:	28c00015 	stw	r3,0(r5)
 800c3dc:	11400015 	stw	r5,0(r2)
 800c3e0:	f800283a 	ret

0800c3e4 <__multadd>:
 800c3e4:	defffa04 	addi	sp,sp,-24
 800c3e8:	dc400115 	stw	r17,4(sp)
 800c3ec:	2c400417 	ldw	r17,16(r5)
 800c3f0:	dcc00315 	stw	r19,12(sp)
 800c3f4:	dc800215 	stw	r18,8(sp)
 800c3f8:	dc000015 	stw	r16,0(sp)
 800c3fc:	dfc00515 	stw	ra,20(sp)
 800c400:	dd000415 	stw	r20,16(sp)
 800c404:	2825883a 	mov	r18,r5
 800c408:	2027883a 	mov	r19,r4
 800c40c:	3821883a 	mov	r16,r7
 800c410:	2a000504 	addi	r8,r5,20
 800c414:	0013883a 	mov	r9,zero
 800c418:	40800017 	ldw	r2,0(r8)
 800c41c:	42000104 	addi	r8,r8,4
 800c420:	4a400044 	addi	r9,r9,1
 800c424:	10ffffcc 	andi	r3,r2,65535
 800c428:	1987383a 	mul	r3,r3,r6
 800c42c:	100ed43a 	srli	r7,r2,16
 800c430:	1c05883a 	add	r2,r3,r16
 800c434:	1006d43a 	srli	r3,r2,16
 800c438:	398f383a 	mul	r7,r7,r6
 800c43c:	10bfffcc 	andi	r2,r2,65535
 800c440:	38cf883a 	add	r7,r7,r3
 800c444:	3806943a 	slli	r3,r7,16
 800c448:	3820d43a 	srli	r16,r7,16
 800c44c:	1885883a 	add	r2,r3,r2
 800c450:	40bfff15 	stw	r2,-4(r8)
 800c454:	4c7ff016 	blt	r9,r17,800c418 <__multadd+0x34>
 800c458:	80000826 	beq	r16,zero,800c47c <__multadd+0x98>
 800c45c:	90800217 	ldw	r2,8(r18)
 800c460:	88800f0e 	bge	r17,r2,800c4a0 <__multadd+0xbc>
 800c464:	88800144 	addi	r2,r17,5
 800c468:	100490ba 	slli	r2,r2,2
 800c46c:	8c400044 	addi	r17,r17,1
 800c470:	9085883a 	add	r2,r18,r2
 800c474:	14000015 	stw	r16,0(r2)
 800c478:	94400415 	stw	r17,16(r18)
 800c47c:	9005883a 	mov	r2,r18
 800c480:	dfc00517 	ldw	ra,20(sp)
 800c484:	dd000417 	ldw	r20,16(sp)
 800c488:	dcc00317 	ldw	r19,12(sp)
 800c48c:	dc800217 	ldw	r18,8(sp)
 800c490:	dc400117 	ldw	r17,4(sp)
 800c494:	dc000017 	ldw	r16,0(sp)
 800c498:	dec00604 	addi	sp,sp,24
 800c49c:	f800283a 	ret
 800c4a0:	91400117 	ldw	r5,4(r18)
 800c4a4:	9809883a 	mov	r4,r19
 800c4a8:	29400044 	addi	r5,r5,1
 800c4ac:	800c31c0 	call	800c31c <_Balloc>
 800c4b0:	1029883a 	mov	r20,r2
 800c4b4:	10001226 	beq	r2,zero,800c500 <__multadd+0x11c>
 800c4b8:	91800417 	ldw	r6,16(r18)
 800c4bc:	91400304 	addi	r5,r18,12
 800c4c0:	11000304 	addi	r4,r2,12
 800c4c4:	31800084 	addi	r6,r6,2
 800c4c8:	300c90ba 	slli	r6,r6,2
 800c4cc:	80037cc0 	call	80037cc <memcpy>
 800c4d0:	90000926 	beq	r18,zero,800c4f8 <__multadd+0x114>
 800c4d4:	90c00117 	ldw	r3,4(r18)
 800c4d8:	98801317 	ldw	r2,76(r19)
 800c4dc:	180690ba 	slli	r3,r3,2
 800c4e0:	10c5883a 	add	r2,r2,r3
 800c4e4:	10c00017 	ldw	r3,0(r2)
 800c4e8:	90c00015 	stw	r3,0(r18)
 800c4ec:	14800015 	stw	r18,0(r2)
 800c4f0:	a025883a 	mov	r18,r20
 800c4f4:	003fdb06 	br	800c464 <__multadd+0x80>
 800c4f8:	a025883a 	mov	r18,r20
 800c4fc:	003fd906 	br	800c464 <__multadd+0x80>
 800c500:	01c20174 	movhi	r7,2053
 800c504:	01020174 	movhi	r4,2053
 800c508:	39c17804 	addi	r7,r7,1504
 800c50c:	000d883a 	mov	r6,zero
 800c510:	01402d44 	movi	r5,181
 800c514:	21018c04 	addi	r4,r4,1584
 800c518:	801062c0 	call	801062c <__assert_func>

0800c51c <__s2b>:
 800c51c:	defff904 	addi	sp,sp,-28
 800c520:	dc800215 	stw	r18,8(sp)
 800c524:	dc000015 	stw	r16,0(sp)
 800c528:	2025883a 	mov	r18,r4
 800c52c:	2821883a 	mov	r16,r5
 800c530:	39000204 	addi	r4,r7,8
 800c534:	01400244 	movi	r5,9
 800c538:	dcc00315 	stw	r19,12(sp)
 800c53c:	dc400115 	stw	r17,4(sp)
 800c540:	dfc00615 	stw	ra,24(sp)
 800c544:	3823883a 	mov	r17,r7
 800c548:	dd400515 	stw	r21,20(sp)
 800c54c:	dd000415 	stw	r20,16(sp)
 800c550:	3027883a 	mov	r19,r6
 800c554:	8011ee80 	call	8011ee8 <__divsi3>
 800c558:	88c00290 	cmplti	r3,r17,10
 800c55c:	1800341e 	bne	r3,zero,800c630 <__s2b+0x114>
 800c560:	00c00044 	movi	r3,1
 800c564:	000b883a 	mov	r5,zero
 800c568:	18c7883a 	add	r3,r3,r3
 800c56c:	29400044 	addi	r5,r5,1
 800c570:	18bffd16 	blt	r3,r2,800c568 <__s2b+0x4c>
 800c574:	9009883a 	mov	r4,r18
 800c578:	800c31c0 	call	800c31c <_Balloc>
 800c57c:	100b883a 	mov	r5,r2
 800c580:	10002d26 	beq	r2,zero,800c638 <__s2b+0x11c>
 800c584:	d8800717 	ldw	r2,28(sp)
 800c588:	28800515 	stw	r2,20(r5)
 800c58c:	00800044 	movi	r2,1
 800c590:	28800415 	stw	r2,16(r5)
 800c594:	98800290 	cmplti	r2,r19,10
 800c598:	1000221e 	bne	r2,zero,800c624 <__s2b+0x108>
 800c59c:	85400244 	addi	r21,r16,9
 800c5a0:	a829883a 	mov	r20,r21
 800c5a4:	84e1883a 	add	r16,r16,r19
 800c5a8:	a1c00007 	ldb	r7,0(r20)
 800c5ac:	01800284 	movi	r6,10
 800c5b0:	9009883a 	mov	r4,r18
 800c5b4:	39fff404 	addi	r7,r7,-48
 800c5b8:	800c3e40 	call	800c3e4 <__multadd>
 800c5bc:	a5000044 	addi	r20,r20,1
 800c5c0:	100b883a 	mov	r5,r2
 800c5c4:	a43ff81e 	bne	r20,r16,800c5a8 <__s2b+0x8c>
 800c5c8:	9c3ffe04 	addi	r16,r19,-8
 800c5cc:	ac21883a 	add	r16,r21,r16
 800c5d0:	9c400a0e 	bge	r19,r17,800c5fc <__s2b+0xe0>
 800c5d4:	8ce3c83a 	sub	r17,r17,r19
 800c5d8:	8463883a 	add	r17,r16,r17
 800c5dc:	81c00007 	ldb	r7,0(r16)
 800c5e0:	01800284 	movi	r6,10
 800c5e4:	9009883a 	mov	r4,r18
 800c5e8:	39fff404 	addi	r7,r7,-48
 800c5ec:	800c3e40 	call	800c3e4 <__multadd>
 800c5f0:	84000044 	addi	r16,r16,1
 800c5f4:	100b883a 	mov	r5,r2
 800c5f8:	8c3ff81e 	bne	r17,r16,800c5dc <__s2b+0xc0>
 800c5fc:	2805883a 	mov	r2,r5
 800c600:	dfc00617 	ldw	ra,24(sp)
 800c604:	dd400517 	ldw	r21,20(sp)
 800c608:	dd000417 	ldw	r20,16(sp)
 800c60c:	dcc00317 	ldw	r19,12(sp)
 800c610:	dc800217 	ldw	r18,8(sp)
 800c614:	dc400117 	ldw	r17,4(sp)
 800c618:	dc000017 	ldw	r16,0(sp)
 800c61c:	dec00704 	addi	sp,sp,28
 800c620:	f800283a 	ret
 800c624:	84000284 	addi	r16,r16,10
 800c628:	04c00244 	movi	r19,9
 800c62c:	003fe806 	br	800c5d0 <__s2b+0xb4>
 800c630:	000b883a 	mov	r5,zero
 800c634:	003fcf06 	br	800c574 <__s2b+0x58>
 800c638:	01c20174 	movhi	r7,2053
 800c63c:	01020174 	movhi	r4,2053
 800c640:	39c17804 	addi	r7,r7,1504
 800c644:	000d883a 	mov	r6,zero
 800c648:	01403384 	movi	r5,206
 800c64c:	21018c04 	addi	r4,r4,1584
 800c650:	801062c0 	call	801062c <__assert_func>

0800c654 <__hi0bits>:
 800c654:	20bfffec 	andhi	r2,r4,65535
 800c658:	1000131e 	bne	r2,zero,800c6a8 <__hi0bits+0x54>
 800c65c:	2008943a 	slli	r4,r4,16
 800c660:	00800404 	movi	r2,16
 800c664:	20ffc02c 	andhi	r3,r4,65280
 800c668:	1800021e 	bne	r3,zero,800c674 <__hi0bits+0x20>
 800c66c:	2008923a 	slli	r4,r4,8
 800c670:	10800204 	addi	r2,r2,8
 800c674:	20fc002c 	andhi	r3,r4,61440
 800c678:	1800021e 	bne	r3,zero,800c684 <__hi0bits+0x30>
 800c67c:	2008913a 	slli	r4,r4,4
 800c680:	10800104 	addi	r2,r2,4
 800c684:	20f0002c 	andhi	r3,r4,49152
 800c688:	1800021e 	bne	r3,zero,800c694 <__hi0bits+0x40>
 800c68c:	200890ba 	slli	r4,r4,2
 800c690:	10800084 	addi	r2,r2,2
 800c694:	20000316 	blt	r4,zero,800c6a4 <__hi0bits+0x50>
 800c698:	2110002c 	andhi	r4,r4,16384
 800c69c:	10800044 	addi	r2,r2,1
 800c6a0:	20000326 	beq	r4,zero,800c6b0 <__hi0bits+0x5c>
 800c6a4:	f800283a 	ret
 800c6a8:	0005883a 	mov	r2,zero
 800c6ac:	003fed06 	br	800c664 <__hi0bits+0x10>
 800c6b0:	00800804 	movi	r2,32
 800c6b4:	f800283a 	ret

0800c6b8 <__lo0bits>:
 800c6b8:	20c00017 	ldw	r3,0(r4)
 800c6bc:	188001cc 	andi	r2,r3,7
 800c6c0:	10000826 	beq	r2,zero,800c6e4 <__lo0bits+0x2c>
 800c6c4:	1880004c 	andi	r2,r3,1
 800c6c8:	10001f1e 	bne	r2,zero,800c748 <__lo0bits+0x90>
 800c6cc:	1880008c 	andi	r2,r3,2
 800c6d0:	10002126 	beq	r2,zero,800c758 <__lo0bits+0xa0>
 800c6d4:	1806d07a 	srli	r3,r3,1
 800c6d8:	00800044 	movi	r2,1
 800c6dc:	20c00015 	stw	r3,0(r4)
 800c6e0:	f800283a 	ret
 800c6e4:	18bfffcc 	andi	r2,r3,65535
 800c6e8:	10001426 	beq	r2,zero,800c73c <__lo0bits+0x84>
 800c6ec:	0005883a 	mov	r2,zero
 800c6f0:	19403fcc 	andi	r5,r3,255
 800c6f4:	2800021e 	bne	r5,zero,800c700 <__lo0bits+0x48>
 800c6f8:	1806d23a 	srli	r3,r3,8
 800c6fc:	10800204 	addi	r2,r2,8
 800c700:	194003cc 	andi	r5,r3,15
 800c704:	2800021e 	bne	r5,zero,800c710 <__lo0bits+0x58>
 800c708:	1806d13a 	srli	r3,r3,4
 800c70c:	10800104 	addi	r2,r2,4
 800c710:	194000cc 	andi	r5,r3,3
 800c714:	2800021e 	bne	r5,zero,800c720 <__lo0bits+0x68>
 800c718:	1806d0ba 	srli	r3,r3,2
 800c71c:	10800084 	addi	r2,r2,2
 800c720:	1940004c 	andi	r5,r3,1
 800c724:	2800031e 	bne	r5,zero,800c734 <__lo0bits+0x7c>
 800c728:	1806d07a 	srli	r3,r3,1
 800c72c:	10800044 	addi	r2,r2,1
 800c730:	18000726 	beq	r3,zero,800c750 <__lo0bits+0x98>
 800c734:	20c00015 	stw	r3,0(r4)
 800c738:	f800283a 	ret
 800c73c:	1806d43a 	srli	r3,r3,16
 800c740:	00800404 	movi	r2,16
 800c744:	003fea06 	br	800c6f0 <__lo0bits+0x38>
 800c748:	0005883a 	mov	r2,zero
 800c74c:	f800283a 	ret
 800c750:	00800804 	movi	r2,32
 800c754:	f800283a 	ret
 800c758:	1806d0ba 	srli	r3,r3,2
 800c75c:	00800084 	movi	r2,2
 800c760:	20c00015 	stw	r3,0(r4)
 800c764:	f800283a 	ret

0800c768 <__i2b>:
 800c768:	defffe04 	addi	sp,sp,-8
 800c76c:	dc000015 	stw	r16,0(sp)
 800c770:	2821883a 	mov	r16,r5
 800c774:	01400044 	movi	r5,1
 800c778:	dfc00115 	stw	ra,4(sp)
 800c77c:	800c31c0 	call	800c31c <_Balloc>
 800c780:	10000726 	beq	r2,zero,800c7a0 <__i2b+0x38>
 800c784:	01000044 	movi	r4,1
 800c788:	14000515 	stw	r16,20(r2)
 800c78c:	11000415 	stw	r4,16(r2)
 800c790:	dfc00117 	ldw	ra,4(sp)
 800c794:	dc000017 	ldw	r16,0(sp)
 800c798:	dec00204 	addi	sp,sp,8
 800c79c:	f800283a 	ret
 800c7a0:	01c20174 	movhi	r7,2053
 800c7a4:	01020174 	movhi	r4,2053
 800c7a8:	39c17804 	addi	r7,r7,1504
 800c7ac:	000d883a 	mov	r6,zero
 800c7b0:	01405004 	movi	r5,320
 800c7b4:	21018c04 	addi	r4,r4,1584
 800c7b8:	801062c0 	call	801062c <__assert_func>

0800c7bc <__multiply>:
 800c7bc:	defffa04 	addi	sp,sp,-24
 800c7c0:	dcc00315 	stw	r19,12(sp)
 800c7c4:	dc800215 	stw	r18,8(sp)
 800c7c8:	34c00417 	ldw	r19,16(r6)
 800c7cc:	2c800417 	ldw	r18,16(r5)
 800c7d0:	dd000415 	stw	r20,16(sp)
 800c7d4:	dc400115 	stw	r17,4(sp)
 800c7d8:	dfc00515 	stw	ra,20(sp)
 800c7dc:	dc000015 	stw	r16,0(sp)
 800c7e0:	2829883a 	mov	r20,r5
 800c7e4:	3023883a 	mov	r17,r6
 800c7e8:	94c00516 	blt	r18,r19,800c800 <__multiply+0x44>
 800c7ec:	9807883a 	mov	r3,r19
 800c7f0:	2823883a 	mov	r17,r5
 800c7f4:	9027883a 	mov	r19,r18
 800c7f8:	3029883a 	mov	r20,r6
 800c7fc:	1825883a 	mov	r18,r3
 800c800:	88800217 	ldw	r2,8(r17)
 800c804:	9ca1883a 	add	r16,r19,r18
 800c808:	89400117 	ldw	r5,4(r17)
 800c80c:	1400010e 	bge	r2,r16,800c814 <__multiply+0x58>
 800c810:	29400044 	addi	r5,r5,1
 800c814:	800c31c0 	call	800c31c <_Balloc>
 800c818:	10006d26 	beq	r2,zero,800c9d0 <__multiply+0x214>
 800c81c:	801290ba 	slli	r9,r16,2
 800c820:	12800504 	addi	r10,r2,20
 800c824:	5007883a 	mov	r3,r10
 800c828:	5253883a 	add	r9,r10,r9
 800c82c:	5240032e 	bgeu	r10,r9,800c83c <__multiply+0x80>
 800c830:	18000015 	stw	zero,0(r3)
 800c834:	18c00104 	addi	r3,r3,4
 800c838:	1a7ffd36 	bltu	r3,r9,800c830 <__multiply+0x74>
 800c83c:	901690ba 	slli	r11,r18,2
 800c840:	980e90ba 	slli	r7,r19,2
 800c844:	a2000504 	addi	r8,r20,20
 800c848:	8b000504 	addi	r12,r17,20
 800c84c:	42d7883a 	add	r11,r8,r11
 800c850:	61cf883a 	add	r7,r12,r7
 800c854:	42c02e2e 	bgeu	r8,r11,800c910 <__multiply+0x154>
 800c858:	88c00544 	addi	r3,r17,21
 800c85c:	38c03c36 	bltu	r7,r3,800c950 <__multiply+0x194>
 800c860:	3c4dc83a 	sub	r6,r7,r17
 800c864:	31bffac4 	addi	r6,r6,-21
 800c868:	300cd0ba 	srli	r6,r6,2
 800c86c:	31800044 	addi	r6,r6,1
 800c870:	300c90ba 	slli	r6,r6,2
 800c874:	00000306 	br	800c884 <__multiply+0xc8>
 800c878:	42000104 	addi	r8,r8,4
 800c87c:	52800104 	addi	r10,r10,4
 800c880:	42c0232e 	bgeu	r8,r11,800c910 <__multiply+0x154>
 800c884:	43800017 	ldw	r14,0(r8)
 800c888:	77ffffcc 	andi	ra,r14,65535
 800c88c:	f800341e 	bne	ra,zero,800c960 <__multiply+0x1a4>
 800c890:	701cd43a 	srli	r14,r14,16
 800c894:	703ff826 	beq	r14,zero,800c878 <__multiply+0xbc>
 800c898:	50c00017 	ldw	r3,0(r10)
 800c89c:	501f883a 	mov	r15,r10
 800c8a0:	601b883a 	mov	r13,r12
 800c8a4:	183f883a 	mov	ra,r3
 800c8a8:	0023883a 	mov	r17,zero
 800c8ac:	6940000b 	ldhu	r5,0(r13)
 800c8b0:	f824d43a 	srli	r18,ra,16
 800c8b4:	193fffcc 	andi	r4,r3,65535
 800c8b8:	2b8b383a 	mul	r5,r5,r14
 800c8bc:	6b400104 	addi	r13,r13,4
 800c8c0:	7fc00117 	ldw	ra,4(r15)
 800c8c4:	2c8b883a 	add	r5,r5,r18
 800c8c8:	2c4b883a 	add	r5,r5,r17
 800c8cc:	2806943a 	slli	r3,r5,16
 800c8d0:	280ad43a 	srli	r5,r5,16
 800c8d4:	fc7fffcc 	andi	r17,ra,65535
 800c8d8:	1908b03a 	or	r4,r3,r4
 800c8dc:	79000015 	stw	r4,0(r15)
 800c8e0:	68ffff8b 	ldhu	r3,-2(r13)
 800c8e4:	7bc00104 	addi	r15,r15,4
 800c8e8:	1b87383a 	mul	r3,r3,r14
 800c8ec:	1c47883a 	add	r3,r3,r17
 800c8f0:	1947883a 	add	r3,r3,r5
 800c8f4:	1822d43a 	srli	r17,r3,16
 800c8f8:	69ffec36 	bltu	r13,r7,800c8ac <__multiply+0xf0>
 800c8fc:	5189883a 	add	r4,r10,r6
 800c900:	20c00015 	stw	r3,0(r4)
 800c904:	42000104 	addi	r8,r8,4
 800c908:	52800104 	addi	r10,r10,4
 800c90c:	42ffdd36 	bltu	r8,r11,800c884 <__multiply+0xc8>
 800c910:	04000316 	blt	zero,r16,800c920 <__multiply+0x164>
 800c914:	00000506 	br	800c92c <__multiply+0x170>
 800c918:	843fffc4 	addi	r16,r16,-1
 800c91c:	80000326 	beq	r16,zero,800c92c <__multiply+0x170>
 800c920:	48ffff17 	ldw	r3,-4(r9)
 800c924:	4a7fff04 	addi	r9,r9,-4
 800c928:	183ffb26 	beq	r3,zero,800c918 <__multiply+0x15c>
 800c92c:	14000415 	stw	r16,16(r2)
 800c930:	dfc00517 	ldw	ra,20(sp)
 800c934:	dd000417 	ldw	r20,16(sp)
 800c938:	dcc00317 	ldw	r19,12(sp)
 800c93c:	dc800217 	ldw	r18,8(sp)
 800c940:	dc400117 	ldw	r17,4(sp)
 800c944:	dc000017 	ldw	r16,0(sp)
 800c948:	dec00604 	addi	sp,sp,24
 800c94c:	f800283a 	ret
 800c950:	43800017 	ldw	r14,0(r8)
 800c954:	01800104 	movi	r6,4
 800c958:	77ffffcc 	andi	ra,r14,65535
 800c95c:	f83fcc26 	beq	ra,zero,800c890 <__multiply+0xd4>
 800c960:	501f883a 	mov	r15,r10
 800c964:	601d883a 	mov	r14,r12
 800c968:	0023883a 	mov	r17,zero
 800c96c:	71000017 	ldw	r4,0(r14)
 800c970:	7b400017 	ldw	r13,0(r15)
 800c974:	7bc00104 	addi	r15,r15,4
 800c978:	217fffcc 	andi	r5,r4,65535
 800c97c:	2fcb383a 	mul	r5,r5,ra
 800c980:	2006d43a 	srli	r3,r4,16
 800c984:	693fffcc 	andi	r4,r13,65535
 800c988:	290b883a 	add	r5,r5,r4
 800c98c:	2c4b883a 	add	r5,r5,r17
 800c990:	1fc7383a 	mul	r3,r3,ra
 800c994:	681ad43a 	srli	r13,r13,16
 800c998:	2808d43a 	srli	r4,r5,16
 800c99c:	297fffcc 	andi	r5,r5,65535
 800c9a0:	1b47883a 	add	r3,r3,r13
 800c9a4:	1907883a 	add	r3,r3,r4
 800c9a8:	1808943a 	slli	r4,r3,16
 800c9ac:	73800104 	addi	r14,r14,4
 800c9b0:	1822d43a 	srli	r17,r3,16
 800c9b4:	214ab03a 	or	r5,r4,r5
 800c9b8:	797fff15 	stw	r5,-4(r15)
 800c9bc:	71ffeb36 	bltu	r14,r7,800c96c <__multiply+0x1b0>
 800c9c0:	5187883a 	add	r3,r10,r6
 800c9c4:	1c400015 	stw	r17,0(r3)
 800c9c8:	43800017 	ldw	r14,0(r8)
 800c9cc:	003fb006 	br	800c890 <__multiply+0xd4>
 800c9d0:	01c20174 	movhi	r7,2053
 800c9d4:	01020174 	movhi	r4,2053
 800c9d8:	39c17804 	addi	r7,r7,1504
 800c9dc:	000d883a 	mov	r6,zero
 800c9e0:	01405744 	movi	r5,349
 800c9e4:	21018c04 	addi	r4,r4,1584
 800c9e8:	801062c0 	call	801062c <__assert_func>

0800c9ec <__pow5mult>:
 800c9ec:	defffb04 	addi	sp,sp,-20
 800c9f0:	dcc00315 	stw	r19,12(sp)
 800c9f4:	dc000015 	stw	r16,0(sp)
 800c9f8:	dfc00415 	stw	ra,16(sp)
 800c9fc:	dc800215 	stw	r18,8(sp)
 800ca00:	dc400115 	stw	r17,4(sp)
 800ca04:	308000cc 	andi	r2,r6,3
 800ca08:	3021883a 	mov	r16,r6
 800ca0c:	2027883a 	mov	r19,r4
 800ca10:	10002d1e 	bne	r2,zero,800cac8 <__pow5mult+0xdc>
 800ca14:	2825883a 	mov	r18,r5
 800ca18:	8021d0ba 	srai	r16,r16,2
 800ca1c:	80001926 	beq	r16,zero,800ca84 <__pow5mult+0x98>
 800ca20:	9c401217 	ldw	r17,72(r19)
 800ca24:	8800061e 	bne	r17,zero,800ca40 <__pow5mult+0x54>
 800ca28:	00002f06 	br	800cae8 <__pow5mult+0xfc>
 800ca2c:	8021d07a 	srai	r16,r16,1
 800ca30:	80001426 	beq	r16,zero,800ca84 <__pow5mult+0x98>
 800ca34:	88800017 	ldw	r2,0(r17)
 800ca38:	10001a26 	beq	r2,zero,800caa4 <__pow5mult+0xb8>
 800ca3c:	1023883a 	mov	r17,r2
 800ca40:	8080004c 	andi	r2,r16,1
 800ca44:	103ff926 	beq	r2,zero,800ca2c <__pow5mult+0x40>
 800ca48:	880d883a 	mov	r6,r17
 800ca4c:	900b883a 	mov	r5,r18
 800ca50:	9809883a 	mov	r4,r19
 800ca54:	800c7bc0 	call	800c7bc <__multiply>
 800ca58:	90001926 	beq	r18,zero,800cac0 <__pow5mult+0xd4>
 800ca5c:	91000117 	ldw	r4,4(r18)
 800ca60:	98c01317 	ldw	r3,76(r19)
 800ca64:	8021d07a 	srai	r16,r16,1
 800ca68:	200890ba 	slli	r4,r4,2
 800ca6c:	1907883a 	add	r3,r3,r4
 800ca70:	19000017 	ldw	r4,0(r3)
 800ca74:	91000015 	stw	r4,0(r18)
 800ca78:	1c800015 	stw	r18,0(r3)
 800ca7c:	1025883a 	mov	r18,r2
 800ca80:	803fec1e 	bne	r16,zero,800ca34 <__pow5mult+0x48>
 800ca84:	9005883a 	mov	r2,r18
 800ca88:	dfc00417 	ldw	ra,16(sp)
 800ca8c:	dcc00317 	ldw	r19,12(sp)
 800ca90:	dc800217 	ldw	r18,8(sp)
 800ca94:	dc400117 	ldw	r17,4(sp)
 800ca98:	dc000017 	ldw	r16,0(sp)
 800ca9c:	dec00504 	addi	sp,sp,20
 800caa0:	f800283a 	ret
 800caa4:	880d883a 	mov	r6,r17
 800caa8:	880b883a 	mov	r5,r17
 800caac:	9809883a 	mov	r4,r19
 800cab0:	800c7bc0 	call	800c7bc <__multiply>
 800cab4:	88800015 	stw	r2,0(r17)
 800cab8:	10000015 	stw	zero,0(r2)
 800cabc:	003fdf06 	br	800ca3c <__pow5mult+0x50>
 800cac0:	1025883a 	mov	r18,r2
 800cac4:	003fd906 	br	800ca2c <__pow5mult+0x40>
 800cac8:	100490ba 	slli	r2,r2,2
 800cacc:	00c20174 	movhi	r3,2053
 800cad0:	000f883a 	mov	r7,zero
 800cad4:	10c7883a 	add	r3,r2,r3
 800cad8:	19819a17 	ldw	r6,1640(r3)
 800cadc:	800c3e40 	call	800c3e4 <__multadd>
 800cae0:	1025883a 	mov	r18,r2
 800cae4:	003fcc06 	br	800ca18 <__pow5mult+0x2c>
 800cae8:	01409c44 	movi	r5,625
 800caec:	9809883a 	mov	r4,r19
 800caf0:	800c7680 	call	800c768 <__i2b>
 800caf4:	98801215 	stw	r2,72(r19)
 800caf8:	1023883a 	mov	r17,r2
 800cafc:	10000015 	stw	zero,0(r2)
 800cb00:	003fcf06 	br	800ca40 <__pow5mult+0x54>

0800cb04 <__lshift>:
 800cb04:	defff904 	addi	sp,sp,-28
 800cb08:	dd400515 	stw	r21,20(sp)
 800cb0c:	dc800215 	stw	r18,8(sp)
 800cb10:	302bd17a 	srai	r21,r6,5
 800cb14:	2c800417 	ldw	r18,16(r5)
 800cb18:	28800217 	ldw	r2,8(r5)
 800cb1c:	dd000415 	stw	r20,16(sp)
 800cb20:	aca5883a 	add	r18,r21,r18
 800cb24:	dcc00315 	stw	r19,12(sp)
 800cb28:	dc400115 	stw	r17,4(sp)
 800cb2c:	dc000015 	stw	r16,0(sp)
 800cb30:	dfc00615 	stw	ra,24(sp)
 800cb34:	94400044 	addi	r17,r18,1
 800cb38:	2821883a 	mov	r16,r5
 800cb3c:	3029883a 	mov	r20,r6
 800cb40:	29400117 	ldw	r5,4(r5)
 800cb44:	2027883a 	mov	r19,r4
 800cb48:	1440030e 	bge	r2,r17,800cb58 <__lshift+0x54>
 800cb4c:	1085883a 	add	r2,r2,r2
 800cb50:	29400044 	addi	r5,r5,1
 800cb54:	147ffd16 	blt	r2,r17,800cb4c <__lshift+0x48>
 800cb58:	9809883a 	mov	r4,r19
 800cb5c:	800c31c0 	call	800c31c <_Balloc>
 800cb60:	10004326 	beq	r2,zero,800cc70 <__lshift+0x16c>
 800cb64:	12000504 	addi	r8,r2,20
 800cb68:	0540090e 	bge	zero,r21,800cb90 <__lshift+0x8c>
 800cb6c:	ad400144 	addi	r21,r21,5
 800cb70:	a82a90ba 	slli	r21,r21,2
 800cb74:	4007883a 	mov	r3,r8
 800cb78:	1549883a 	add	r4,r2,r21
 800cb7c:	18c00104 	addi	r3,r3,4
 800cb80:	183fff15 	stw	zero,-4(r3)
 800cb84:	193ffd1e 	bne	r3,r4,800cb7c <__lshift+0x78>
 800cb88:	ad7ffb04 	addi	r21,r21,-20
 800cb8c:	4551883a 	add	r8,r8,r21
 800cb90:	82400417 	ldw	r9,16(r16)
 800cb94:	80c00504 	addi	r3,r16,20
 800cb98:	a14007cc 	andi	r5,r20,31
 800cb9c:	481290ba 	slli	r9,r9,2
 800cba0:	1a53883a 	add	r9,r3,r9
 800cba4:	28002a26 	beq	r5,zero,800cc50 <__lshift+0x14c>
 800cba8:	02800804 	movi	r10,32
 800cbac:	5155c83a 	sub	r10,r10,r5
 800cbb0:	4009883a 	mov	r4,r8
 800cbb4:	000f883a 	mov	r7,zero
 800cbb8:	19800017 	ldw	r6,0(r3)
 800cbbc:	21000104 	addi	r4,r4,4
 800cbc0:	18c00104 	addi	r3,r3,4
 800cbc4:	314c983a 	sll	r6,r6,r5
 800cbc8:	31ccb03a 	or	r6,r6,r7
 800cbcc:	21bfff15 	stw	r6,-4(r4)
 800cbd0:	19bfff17 	ldw	r6,-4(r3)
 800cbd4:	328ed83a 	srl	r7,r6,r10
 800cbd8:	1a7ff736 	bltu	r3,r9,800cbb8 <__lshift+0xb4>
 800cbdc:	80c00544 	addi	r3,r16,21
 800cbe0:	48c02136 	bltu	r9,r3,800cc68 <__lshift+0x164>
 800cbe4:	4c07c83a 	sub	r3,r9,r16
 800cbe8:	18fffac4 	addi	r3,r3,-21
 800cbec:	1806d0ba 	srli	r3,r3,2
 800cbf0:	18c00044 	addi	r3,r3,1
 800cbf4:	180690ba 	slli	r3,r3,2
 800cbf8:	40d1883a 	add	r8,r8,r3
 800cbfc:	41c00015 	stw	r7,0(r8)
 800cc00:	38000126 	beq	r7,zero,800cc08 <__lshift+0x104>
 800cc04:	8825883a 	mov	r18,r17
 800cc08:	14800415 	stw	r18,16(r2)
 800cc0c:	80000726 	beq	r16,zero,800cc2c <__lshift+0x128>
 800cc10:	81000117 	ldw	r4,4(r16)
 800cc14:	98c01317 	ldw	r3,76(r19)
 800cc18:	200890ba 	slli	r4,r4,2
 800cc1c:	1907883a 	add	r3,r3,r4
 800cc20:	19000017 	ldw	r4,0(r3)
 800cc24:	81000015 	stw	r4,0(r16)
 800cc28:	1c000015 	stw	r16,0(r3)
 800cc2c:	dfc00617 	ldw	ra,24(sp)
 800cc30:	dd400517 	ldw	r21,20(sp)
 800cc34:	dd000417 	ldw	r20,16(sp)
 800cc38:	dcc00317 	ldw	r19,12(sp)
 800cc3c:	dc800217 	ldw	r18,8(sp)
 800cc40:	dc400117 	ldw	r17,4(sp)
 800cc44:	dc000017 	ldw	r16,0(sp)
 800cc48:	dec00704 	addi	sp,sp,28
 800cc4c:	f800283a 	ret
 800cc50:	19000017 	ldw	r4,0(r3)
 800cc54:	18c00104 	addi	r3,r3,4
 800cc58:	42000104 	addi	r8,r8,4
 800cc5c:	413fff15 	stw	r4,-4(r8)
 800cc60:	1a7ffb36 	bltu	r3,r9,800cc50 <__lshift+0x14c>
 800cc64:	003fe806 	br	800cc08 <__lshift+0x104>
 800cc68:	00c00104 	movi	r3,4
 800cc6c:	003fe206 	br	800cbf8 <__lshift+0xf4>
 800cc70:	01c20174 	movhi	r7,2053
 800cc74:	01020174 	movhi	r4,2053
 800cc78:	39c17804 	addi	r7,r7,1504
 800cc7c:	000d883a 	mov	r6,zero
 800cc80:	01407644 	movi	r5,473
 800cc84:	21018c04 	addi	r4,r4,1584
 800cc88:	801062c0 	call	801062c <__assert_func>

0800cc8c <__mcmp>:
 800cc8c:	21800417 	ldw	r6,16(r4)
 800cc90:	28c00417 	ldw	r3,16(r5)
 800cc94:	30c5c83a 	sub	r2,r6,r3
 800cc98:	30c00e1e 	bne	r6,r3,800ccd4 <__mcmp+0x48>
 800cc9c:	180690ba 	slli	r3,r3,2
 800cca0:	21c00504 	addi	r7,r4,20
 800cca4:	29400504 	addi	r5,r5,20
 800cca8:	38c9883a 	add	r4,r7,r3
 800ccac:	28c7883a 	add	r3,r5,r3
 800ccb0:	00000106 	br	800ccb8 <__mcmp+0x2c>
 800ccb4:	3900082e 	bgeu	r7,r4,800ccd8 <__mcmp+0x4c>
 800ccb8:	21bfff17 	ldw	r6,-4(r4)
 800ccbc:	197fff17 	ldw	r5,-4(r3)
 800ccc0:	213fff04 	addi	r4,r4,-4
 800ccc4:	18ffff04 	addi	r3,r3,-4
 800ccc8:	317ffa26 	beq	r6,r5,800ccb4 <__mcmp+0x28>
 800cccc:	3140032e 	bgeu	r6,r5,800ccdc <__mcmp+0x50>
 800ccd0:	00bfffc4 	movi	r2,-1
 800ccd4:	f800283a 	ret
 800ccd8:	f800283a 	ret
 800ccdc:	00800044 	movi	r2,1
 800cce0:	f800283a 	ret

0800cce4 <__mdiff>:
 800cce4:	28800417 	ldw	r2,16(r5)
 800cce8:	30c00417 	ldw	r3,16(r6)
 800ccec:	defffc04 	addi	sp,sp,-16
 800ccf0:	dc800215 	stw	r18,8(sp)
 800ccf4:	dc400115 	stw	r17,4(sp)
 800ccf8:	dc000015 	stw	r16,0(sp)
 800ccfc:	dfc00315 	stw	ra,12(sp)
 800cd00:	2823883a 	mov	r17,r5
 800cd04:	3021883a 	mov	r16,r6
 800cd08:	10e5c83a 	sub	r18,r2,r3
 800cd0c:	10c0641e 	bne	r2,r3,800cea0 <__mdiff+0x1bc>
 800cd10:	180c90ba 	slli	r6,r3,2
 800cd14:	29400504 	addi	r5,r5,20
 800cd18:	80c00504 	addi	r3,r16,20
 800cd1c:	2985883a 	add	r2,r5,r6
 800cd20:	1987883a 	add	r3,r3,r6
 800cd24:	00000106 	br	800cd2c <__mdiff+0x48>
 800cd28:	2880642e 	bgeu	r5,r2,800cebc <__mdiff+0x1d8>
 800cd2c:	11ffff17 	ldw	r7,-4(r2)
 800cd30:	19bfff17 	ldw	r6,-4(r3)
 800cd34:	10bfff04 	addi	r2,r2,-4
 800cd38:	18ffff04 	addi	r3,r3,-4
 800cd3c:	39bffa26 	beq	r7,r6,800cd28 <__mdiff+0x44>
 800cd40:	39805236 	bltu	r7,r6,800ce8c <__mdiff+0x1a8>
 800cd44:	89400117 	ldw	r5,4(r17)
 800cd48:	800c31c0 	call	800c31c <_Balloc>
 800cd4c:	10006226 	beq	r2,zero,800ced8 <__mdiff+0x1f4>
 800cd50:	8a400417 	ldw	r9,16(r17)
 800cd54:	83000417 	ldw	r12,16(r16)
 800cd58:	8ac00504 	addi	r11,r17,20
 800cd5c:	481090ba 	slli	r8,r9,2
 800cd60:	601890ba 	slli	r12,r12,2
 800cd64:	81800504 	addi	r6,r16,20
 800cd68:	13400504 	addi	r13,r2,20
 800cd6c:	14800315 	stw	r18,12(r2)
 800cd70:	5a11883a 	add	r8,r11,r8
 800cd74:	3319883a 	add	r12,r6,r12
 800cd78:	681d883a 	mov	r14,r13
 800cd7c:	5815883a 	mov	r10,r11
 800cd80:	0007883a 	mov	r3,zero
 800cd84:	51000017 	ldw	r4,0(r10)
 800cd88:	31c00017 	ldw	r7,0(r6)
 800cd8c:	73800104 	addi	r14,r14,4
 800cd90:	217fffcc 	andi	r5,r4,65535
 800cd94:	28cb883a 	add	r5,r5,r3
 800cd98:	38ffffcc 	andi	r3,r7,65535
 800cd9c:	28cbc83a 	sub	r5,r5,r3
 800cda0:	380ed43a 	srli	r7,r7,16
 800cda4:	2006d43a 	srli	r3,r4,16
 800cda8:	2809d43a 	srai	r4,r5,16
 800cdac:	297fffcc 	andi	r5,r5,65535
 800cdb0:	19c7c83a 	sub	r3,r3,r7
 800cdb4:	1907883a 	add	r3,r3,r4
 800cdb8:	1808943a 	slli	r4,r3,16
 800cdbc:	31800104 	addi	r6,r6,4
 800cdc0:	1807d43a 	srai	r3,r3,16
 800cdc4:	214ab03a 	or	r5,r4,r5
 800cdc8:	717fff15 	stw	r5,-4(r14)
 800cdcc:	52800104 	addi	r10,r10,4
 800cdd0:	333fec36 	bltu	r6,r12,800cd84 <__mdiff+0xa0>
 800cdd4:	640fc83a 	sub	r7,r12,r16
 800cdd8:	39fffac4 	addi	r7,r7,-21
 800cddc:	84000544 	addi	r16,r16,21
 800cde0:	380ed0ba 	srli	r7,r7,2
 800cde4:	64003336 	bltu	r12,r16,800ceb4 <__mdiff+0x1d0>
 800cde8:	380890ba 	slli	r4,r7,2
 800cdec:	6909883a 	add	r4,r13,r4
 800cdf0:	64002e36 	bltu	r12,r16,800ceac <__mdiff+0x1c8>
 800cdf4:	39800044 	addi	r6,r7,1
 800cdf8:	300c90ba 	slli	r6,r6,2
 800cdfc:	5997883a 	add	r11,r11,r6
 800ce00:	699b883a 	add	r13,r13,r6
 800ce04:	5a00152e 	bgeu	r11,r8,800ce5c <__mdiff+0x178>
 800ce08:	680f883a 	mov	r7,r13
 800ce0c:	580d883a 	mov	r6,r11
 800ce10:	31000017 	ldw	r4,0(r6)
 800ce14:	39c00104 	addi	r7,r7,4
 800ce18:	31800104 	addi	r6,r6,4
 800ce1c:	217fffcc 	andi	r5,r4,65535
 800ce20:	28cb883a 	add	r5,r5,r3
 800ce24:	2815d43a 	srai	r10,r5,16
 800ce28:	2006d43a 	srli	r3,r4,16
 800ce2c:	297fffcc 	andi	r5,r5,65535
 800ce30:	1a87883a 	add	r3,r3,r10
 800ce34:	1814943a 	slli	r10,r3,16
 800ce38:	1807d43a 	srai	r3,r3,16
 800ce3c:	514ab03a 	or	r5,r10,r5
 800ce40:	397fff15 	stw	r5,-4(r7)
 800ce44:	323ff236 	bltu	r6,r8,800ce10 <__mdiff+0x12c>
 800ce48:	413fffc4 	addi	r4,r8,-1
 800ce4c:	22c9c83a 	sub	r4,r4,r11
 800ce50:	2008d0ba 	srli	r4,r4,2
 800ce54:	200890ba 	slli	r4,r4,2
 800ce58:	6909883a 	add	r4,r13,r4
 800ce5c:	2800041e 	bne	r5,zero,800ce70 <__mdiff+0x18c>
 800ce60:	20ffff17 	ldw	r3,-4(r4)
 800ce64:	4a7fffc4 	addi	r9,r9,-1
 800ce68:	213fff04 	addi	r4,r4,-4
 800ce6c:	183ffc26 	beq	r3,zero,800ce60 <__mdiff+0x17c>
 800ce70:	12400415 	stw	r9,16(r2)
 800ce74:	dfc00317 	ldw	ra,12(sp)
 800ce78:	dc800217 	ldw	r18,8(sp)
 800ce7c:	dc400117 	ldw	r17,4(sp)
 800ce80:	dc000017 	ldw	r16,0(sp)
 800ce84:	dec00404 	addi	sp,sp,16
 800ce88:	f800283a 	ret
 800ce8c:	8805883a 	mov	r2,r17
 800ce90:	04800044 	movi	r18,1
 800ce94:	8023883a 	mov	r17,r16
 800ce98:	1021883a 	mov	r16,r2
 800ce9c:	003fa906 	br	800cd44 <__mdiff+0x60>
 800cea0:	903ffa16 	blt	r18,zero,800ce8c <__mdiff+0x1a8>
 800cea4:	0025883a 	mov	r18,zero
 800cea8:	003fa606 	br	800cd44 <__mdiff+0x60>
 800ceac:	01800104 	movi	r6,4
 800ceb0:	003fd206 	br	800cdfc <__mdiff+0x118>
 800ceb4:	0009883a 	mov	r4,zero
 800ceb8:	003fcc06 	br	800cdec <__mdiff+0x108>
 800cebc:	000b883a 	mov	r5,zero
 800cec0:	800c31c0 	call	800c31c <_Balloc>
 800cec4:	10000b26 	beq	r2,zero,800cef4 <__mdiff+0x210>
 800cec8:	00c00044 	movi	r3,1
 800cecc:	10c00415 	stw	r3,16(r2)
 800ced0:	10000515 	stw	zero,20(r2)
 800ced4:	003fe706 	br	800ce74 <__mdiff+0x190>
 800ced8:	01c20174 	movhi	r7,2053
 800cedc:	01020174 	movhi	r4,2053
 800cee0:	39c17804 	addi	r7,r7,1504
 800cee4:	000d883a 	mov	r6,zero
 800cee8:	01409004 	movi	r5,576
 800ceec:	21018c04 	addi	r4,r4,1584
 800cef0:	801062c0 	call	801062c <__assert_func>
 800cef4:	01c20174 	movhi	r7,2053
 800cef8:	01020174 	movhi	r4,2053
 800cefc:	39c17804 	addi	r7,r7,1504
 800cf00:	000d883a 	mov	r6,zero
 800cf04:	01408c84 	movi	r5,562
 800cf08:	21018c04 	addi	r4,r4,1584
 800cf0c:	801062c0 	call	801062c <__assert_func>

0800cf10 <__ulp>:
 800cf10:	28dffc2c 	andhi	r3,r5,32752
 800cf14:	017f3034 	movhi	r5,64704
 800cf18:	1947883a 	add	r3,r3,r5
 800cf1c:	00c0020e 	bge	zero,r3,800cf28 <__ulp+0x18>
 800cf20:	0005883a 	mov	r2,zero
 800cf24:	f800283a 	ret
 800cf28:	00c7c83a 	sub	r3,zero,r3
 800cf2c:	1807d53a 	srai	r3,r3,20
 800cf30:	18800508 	cmpgei	r2,r3,20
 800cf34:	1000041e 	bne	r2,zero,800cf48 <__ulp+0x38>
 800cf38:	00800234 	movhi	r2,8
 800cf3c:	10c7d83a 	sra	r3,r2,r3
 800cf40:	0005883a 	mov	r2,zero
 800cf44:	f800283a 	ret
 800cf48:	193ffb04 	addi	r4,r3,-20
 800cf4c:	208007c8 	cmpgei	r2,r4,31
 800cf50:	0007883a 	mov	r3,zero
 800cf54:	1000031e 	bne	r2,zero,800cf64 <__ulp+0x54>
 800cf58:	00a00034 	movhi	r2,32768
 800cf5c:	1104d83a 	srl	r2,r2,r4
 800cf60:	f800283a 	ret
 800cf64:	00800044 	movi	r2,1
 800cf68:	f800283a 	ret

0800cf6c <__b2d>:
 800cf6c:	defffa04 	addi	sp,sp,-24
 800cf70:	dc400115 	stw	r17,4(sp)
 800cf74:	24400417 	ldw	r17,16(r4)
 800cf78:	dc000015 	stw	r16,0(sp)
 800cf7c:	24000504 	addi	r16,r4,20
 800cf80:	882290ba 	slli	r17,r17,2
 800cf84:	dc800215 	stw	r18,8(sp)
 800cf88:	dd000415 	stw	r20,16(sp)
 800cf8c:	8463883a 	add	r17,r16,r17
 800cf90:	8cbfff17 	ldw	r18,-4(r17)
 800cf94:	dcc00315 	stw	r19,12(sp)
 800cf98:	dfc00515 	stw	ra,20(sp)
 800cf9c:	9009883a 	mov	r4,r18
 800cfa0:	2827883a 	mov	r19,r5
 800cfa4:	800c6540 	call	800c654 <__hi0bits>
 800cfa8:	01000804 	movi	r4,32
 800cfac:	2087c83a 	sub	r3,r4,r2
 800cfb0:	98c00015 	stw	r3,0(r19)
 800cfb4:	10c002c8 	cmpgei	r3,r2,11
 800cfb8:	8d3fff04 	addi	r20,r17,-4
 800cfbc:	18001f26 	beq	r3,zero,800d03c <__b2d+0xd0>
 800cfc0:	10fffd44 	addi	r3,r2,-11
 800cfc4:	85000e2e 	bgeu	r16,r20,800d000 <__b2d+0x94>
 800cfc8:	88bffe17 	ldw	r2,-8(r17)
 800cfcc:	18001226 	beq	r3,zero,800d018 <__b2d+0xac>
 800cfd0:	20c9c83a 	sub	r4,r4,r3
 800cfd4:	110cd83a 	srl	r6,r2,r4
 800cfd8:	90e4983a 	sll	r18,r18,r3
 800cfdc:	10c4983a 	sll	r2,r2,r3
 800cfe0:	897ffe04 	addi	r5,r17,-8
 800cfe4:	9186b03a 	or	r3,r18,r6
 800cfe8:	18cffc34 	orhi	r3,r3,16368
 800cfec:	81400b2e 	bgeu	r16,r5,800d01c <__b2d+0xb0>
 800cff0:	897ffd17 	ldw	r5,-12(r17)
 800cff4:	2908d83a 	srl	r4,r5,r4
 800cff8:	1104b03a 	or	r2,r2,r4
 800cffc:	00000706 	br	800d01c <__b2d+0xb0>
 800d000:	18000426 	beq	r3,zero,800d014 <__b2d+0xa8>
 800d004:	90c6983a 	sll	r3,r18,r3
 800d008:	0005883a 	mov	r2,zero
 800d00c:	18cffc34 	orhi	r3,r3,16368
 800d010:	00000206 	br	800d01c <__b2d+0xb0>
 800d014:	0005883a 	mov	r2,zero
 800d018:	90cffc34 	orhi	r3,r18,16368
 800d01c:	dfc00517 	ldw	ra,20(sp)
 800d020:	dd000417 	ldw	r20,16(sp)
 800d024:	dcc00317 	ldw	r19,12(sp)
 800d028:	dc800217 	ldw	r18,8(sp)
 800d02c:	dc400117 	ldw	r17,4(sp)
 800d030:	dc000017 	ldw	r16,0(sp)
 800d034:	dec00604 	addi	sp,sp,24
 800d038:	f800283a 	ret
 800d03c:	014002c4 	movi	r5,11
 800d040:	2889c83a 	sub	r4,r5,r2
 800d044:	9106d83a 	srl	r3,r18,r4
 800d048:	18cffc34 	orhi	r3,r3,16368
 800d04c:	85000536 	bltu	r16,r20,800d064 <__b2d+0xf8>
 800d050:	000b883a 	mov	r5,zero
 800d054:	10800544 	addi	r2,r2,21
 800d058:	9084983a 	sll	r2,r18,r2
 800d05c:	1144b03a 	or	r2,r2,r5
 800d060:	003fee06 	br	800d01c <__b2d+0xb0>
 800d064:	897ffe17 	ldw	r5,-8(r17)
 800d068:	290ad83a 	srl	r5,r5,r4
 800d06c:	003ff906 	br	800d054 <__b2d+0xe8>

0800d070 <__d2b>:
 800d070:	defff804 	addi	sp,sp,-32
 800d074:	dd000615 	stw	r20,24(sp)
 800d078:	2829883a 	mov	r20,r5
 800d07c:	01400044 	movi	r5,1
 800d080:	dcc00515 	stw	r19,20(sp)
 800d084:	dc000215 	stw	r16,8(sp)
 800d088:	dfc00715 	stw	ra,28(sp)
 800d08c:	dc800415 	stw	r18,16(sp)
 800d090:	dc400315 	stw	r17,12(sp)
 800d094:	3021883a 	mov	r16,r6
 800d098:	3827883a 	mov	r19,r7
 800d09c:	800c31c0 	call	800c31c <_Balloc>
 800d0a0:	10004526 	beq	r2,zero,800d1b8 <__d2b+0x148>
 800d0a4:	8024d53a 	srli	r18,r16,20
 800d0a8:	01800434 	movhi	r6,16
 800d0ac:	31bfffc4 	addi	r6,r6,-1
 800d0b0:	9481ffcc 	andi	r18,r18,2047
 800d0b4:	1023883a 	mov	r17,r2
 800d0b8:	81a0703a 	and	r16,r16,r6
 800d0bc:	90000126 	beq	r18,zero,800d0c4 <__d2b+0x54>
 800d0c0:	84000434 	orhi	r16,r16,16
 800d0c4:	dc000115 	stw	r16,4(sp)
 800d0c8:	a0002226 	beq	r20,zero,800d154 <__d2b+0xe4>
 800d0cc:	d809883a 	mov	r4,sp
 800d0d0:	dd000015 	stw	r20,0(sp)
 800d0d4:	800c6b80 	call	800c6b8 <__lo0bits>
 800d0d8:	d8c00117 	ldw	r3,4(sp)
 800d0dc:	10003326 	beq	r2,zero,800d1ac <__d2b+0x13c>
 800d0e0:	01000804 	movi	r4,32
 800d0e4:	2089c83a 	sub	r4,r4,r2
 800d0e8:	1908983a 	sll	r4,r3,r4
 800d0ec:	d9400017 	ldw	r5,0(sp)
 800d0f0:	1886d83a 	srl	r3,r3,r2
 800d0f4:	2148b03a 	or	r4,r4,r5
 800d0f8:	89000515 	stw	r4,20(r17)
 800d0fc:	d8c00115 	stw	r3,4(sp)
 800d100:	88c00615 	stw	r3,24(r17)
 800d104:	1800271e 	bne	r3,zero,800d1a4 <__d2b+0x134>
 800d108:	04000044 	movi	r16,1
 800d10c:	8c000415 	stw	r16,16(r17)
 800d110:	90001926 	beq	r18,zero,800d178 <__d2b+0x108>
 800d114:	00c00d44 	movi	r3,53
 800d118:	94bef344 	addi	r18,r18,-1075
 800d11c:	90a5883a 	add	r18,r18,r2
 800d120:	1885c83a 	sub	r2,r3,r2
 800d124:	d8c00817 	ldw	r3,32(sp)
 800d128:	9c800015 	stw	r18,0(r19)
 800d12c:	18800015 	stw	r2,0(r3)
 800d130:	8805883a 	mov	r2,r17
 800d134:	dfc00717 	ldw	ra,28(sp)
 800d138:	dd000617 	ldw	r20,24(sp)
 800d13c:	dcc00517 	ldw	r19,20(sp)
 800d140:	dc800417 	ldw	r18,16(sp)
 800d144:	dc400317 	ldw	r17,12(sp)
 800d148:	dc000217 	ldw	r16,8(sp)
 800d14c:	dec00804 	addi	sp,sp,32
 800d150:	f800283a 	ret
 800d154:	d9000104 	addi	r4,sp,4
 800d158:	800c6b80 	call	800c6b8 <__lo0bits>
 800d15c:	00c00044 	movi	r3,1
 800d160:	88c00415 	stw	r3,16(r17)
 800d164:	d8c00117 	ldw	r3,4(sp)
 800d168:	10800804 	addi	r2,r2,32
 800d16c:	04000044 	movi	r16,1
 800d170:	88c00515 	stw	r3,20(r17)
 800d174:	903fe71e 	bne	r18,zero,800d114 <__d2b+0xa4>
 800d178:	800690ba 	slli	r3,r16,2
 800d17c:	10bef384 	addi	r2,r2,-1074
 800d180:	98800015 	stw	r2,0(r19)
 800d184:	88c5883a 	add	r2,r17,r3
 800d188:	11000417 	ldw	r4,16(r2)
 800d18c:	8020917a 	slli	r16,r16,5
 800d190:	800c6540 	call	800c654 <__hi0bits>
 800d194:	80a1c83a 	sub	r16,r16,r2
 800d198:	d8800817 	ldw	r2,32(sp)
 800d19c:	14000015 	stw	r16,0(r2)
 800d1a0:	003fe306 	br	800d130 <__d2b+0xc0>
 800d1a4:	04000084 	movi	r16,2
 800d1a8:	003fd806 	br	800d10c <__d2b+0x9c>
 800d1ac:	d9000017 	ldw	r4,0(sp)
 800d1b0:	89000515 	stw	r4,20(r17)
 800d1b4:	003fd206 	br	800d100 <__d2b+0x90>
 800d1b8:	01c20174 	movhi	r7,2053
 800d1bc:	01020174 	movhi	r4,2053
 800d1c0:	39c17804 	addi	r7,r7,1504
 800d1c4:	000d883a 	mov	r6,zero
 800d1c8:	0140c284 	movi	r5,778
 800d1cc:	21018c04 	addi	r4,r4,1584
 800d1d0:	801062c0 	call	801062c <__assert_func>

0800d1d4 <__ratio>:
 800d1d4:	defff904 	addi	sp,sp,-28
 800d1d8:	dc400315 	stw	r17,12(sp)
 800d1dc:	2823883a 	mov	r17,r5
 800d1e0:	d80b883a 	mov	r5,sp
 800d1e4:	dfc00615 	stw	ra,24(sp)
 800d1e8:	dcc00515 	stw	r19,20(sp)
 800d1ec:	dc800415 	stw	r18,16(sp)
 800d1f0:	2027883a 	mov	r19,r4
 800d1f4:	dc000215 	stw	r16,8(sp)
 800d1f8:	800cf6c0 	call	800cf6c <__b2d>
 800d1fc:	d9400104 	addi	r5,sp,4
 800d200:	8809883a 	mov	r4,r17
 800d204:	1025883a 	mov	r18,r2
 800d208:	1821883a 	mov	r16,r3
 800d20c:	800cf6c0 	call	800cf6c <__b2d>
 800d210:	89400417 	ldw	r5,16(r17)
 800d214:	99000417 	ldw	r4,16(r19)
 800d218:	d9800117 	ldw	r6,4(sp)
 800d21c:	180f883a 	mov	r7,r3
 800d220:	2149c83a 	sub	r4,r4,r5
 800d224:	d9400017 	ldw	r5,0(sp)
 800d228:	2008917a 	slli	r4,r4,5
 800d22c:	298bc83a 	sub	r5,r5,r6
 800d230:	2149883a 	add	r4,r4,r5
 800d234:	100d883a 	mov	r6,r2
 800d238:	01000c0e 	bge	zero,r4,800d26c <__ratio+0x98>
 800d23c:	2008953a 	slli	r4,r4,20
 800d240:	2421883a 	add	r16,r4,r16
 800d244:	9009883a 	mov	r4,r18
 800d248:	800b883a 	mov	r5,r16
 800d24c:	8012a140 	call	8012a14 <__divdf3>
 800d250:	dfc00617 	ldw	ra,24(sp)
 800d254:	dcc00517 	ldw	r19,20(sp)
 800d258:	dc800417 	ldw	r18,16(sp)
 800d25c:	dc400317 	ldw	r17,12(sp)
 800d260:	dc000217 	ldw	r16,8(sp)
 800d264:	dec00704 	addi	sp,sp,28
 800d268:	f800283a 	ret
 800d26c:	00bffc34 	movhi	r2,65520
 800d270:	2089383a 	mul	r4,r4,r2
 800d274:	20cf883a 	add	r7,r4,r3
 800d278:	003ff206 	br	800d244 <__ratio+0x70>

0800d27c <_mprec_log10>:
 800d27c:	defffe04 	addi	sp,sp,-8
 800d280:	dc000015 	stw	r16,0(sp)
 800d284:	dfc00115 	stw	ra,4(sp)
 800d288:	20800608 	cmpgei	r2,r4,24
 800d28c:	2021883a 	mov	r16,r4
 800d290:	10000f26 	beq	r2,zero,800d2d0 <_mprec_log10+0x54>
 800d294:	0009883a 	mov	r4,zero
 800d298:	014ffc34 	movhi	r5,16368
 800d29c:	000d883a 	mov	r6,zero
 800d2a0:	01d00934 	movhi	r7,16420
 800d2a4:	80134d40 	call	80134d4 <__muldf3>
 800d2a8:	843fffc4 	addi	r16,r16,-1
 800d2ac:	1009883a 	mov	r4,r2
 800d2b0:	180b883a 	mov	r5,r3
 800d2b4:	803ff91e 	bne	r16,zero,800d29c <_mprec_log10+0x20>
 800d2b8:	2005883a 	mov	r2,r4
 800d2bc:	2807883a 	mov	r3,r5
 800d2c0:	dfc00117 	ldw	ra,4(sp)
 800d2c4:	dc000017 	ldw	r16,0(sp)
 800d2c8:	dec00204 	addi	sp,sp,8
 800d2cc:	f800283a 	ret
 800d2d0:	202090fa 	slli	r16,r4,3
 800d2d4:	00820174 	movhi	r2,2053
 800d2d8:	1081b204 	addi	r2,r2,1736
 800d2dc:	1421883a 	add	r16,r2,r16
 800d2e0:	81000017 	ldw	r4,0(r16)
 800d2e4:	81400117 	ldw	r5,4(r16)
 800d2e8:	003ff306 	br	800d2b8 <_mprec_log10+0x3c>

0800d2ec <__copybits>:
 800d2ec:	297fffc4 	addi	r5,r5,-1
 800d2f0:	280fd17a 	srai	r7,r5,5
 800d2f4:	31400417 	ldw	r5,16(r6)
 800d2f8:	30800504 	addi	r2,r6,20
 800d2fc:	39c00044 	addi	r7,r7,1
 800d300:	280a90ba 	slli	r5,r5,2
 800d304:	380e90ba 	slli	r7,r7,2
 800d308:	114b883a 	add	r5,r2,r5
 800d30c:	21cf883a 	add	r7,r4,r7
 800d310:	11400c2e 	bgeu	r2,r5,800d344 <__copybits+0x58>
 800d314:	2007883a 	mov	r3,r4
 800d318:	12000017 	ldw	r8,0(r2)
 800d31c:	10800104 	addi	r2,r2,4
 800d320:	18c00104 	addi	r3,r3,4
 800d324:	1a3fff15 	stw	r8,-4(r3)
 800d328:	117ffb36 	bltu	r2,r5,800d318 <__copybits+0x2c>
 800d32c:	2985c83a 	sub	r2,r5,r6
 800d330:	10bffac4 	addi	r2,r2,-21
 800d334:	1004d0ba 	srli	r2,r2,2
 800d338:	10800044 	addi	r2,r2,1
 800d33c:	100490ba 	slli	r2,r2,2
 800d340:	2089883a 	add	r4,r4,r2
 800d344:	21c0032e 	bgeu	r4,r7,800d354 <__copybits+0x68>
 800d348:	21000104 	addi	r4,r4,4
 800d34c:	203fff15 	stw	zero,-4(r4)
 800d350:	21fffd36 	bltu	r4,r7,800d348 <__copybits+0x5c>
 800d354:	f800283a 	ret

0800d358 <__any_on>:
 800d358:	20c00417 	ldw	r3,16(r4)
 800d35c:	280dd17a 	srai	r6,r5,5
 800d360:	21000504 	addi	r4,r4,20
 800d364:	1980080e 	bge	r3,r6,800d388 <__any_on+0x30>
 800d368:	180490ba 	slli	r2,r3,2
 800d36c:	2085883a 	add	r2,r4,r2
 800d370:	20800f2e 	bgeu	r4,r2,800d3b0 <__any_on+0x58>
 800d374:	10ffff17 	ldw	r3,-4(r2)
 800d378:	10bfff04 	addi	r2,r2,-4
 800d37c:	183ffc26 	beq	r3,zero,800d370 <__any_on+0x18>
 800d380:	00800044 	movi	r2,1
 800d384:	f800283a 	ret
 800d388:	300490ba 	slli	r2,r6,2
 800d38c:	2085883a 	add	r2,r4,r2
 800d390:	30fff70e 	bge	r6,r3,800d370 <__any_on+0x18>
 800d394:	294007cc 	andi	r5,r5,31
 800d398:	283ff526 	beq	r5,zero,800d370 <__any_on+0x18>
 800d39c:	11800017 	ldw	r6,0(r2)
 800d3a0:	3146d83a 	srl	r3,r6,r5
 800d3a4:	194a983a 	sll	r5,r3,r5
 800d3a8:	317ff51e 	bne	r6,r5,800d380 <__any_on+0x28>
 800d3ac:	003ff006 	br	800d370 <__any_on+0x18>
 800d3b0:	0005883a 	mov	r2,zero
 800d3b4:	f800283a 	ret

0800d3b8 <_putc_r>:
 800d3b8:	defffc04 	addi	sp,sp,-16
 800d3bc:	dc400215 	stw	r17,8(sp)
 800d3c0:	dfc00315 	stw	ra,12(sp)
 800d3c4:	2023883a 	mov	r17,r4
 800d3c8:	20000226 	beq	r4,zero,800d3d4 <_putc_r+0x1c>
 800d3cc:	20800e17 	ldw	r2,56(r4)
 800d3d0:	10000e26 	beq	r2,zero,800d40c <_putc_r+0x54>
 800d3d4:	30800217 	ldw	r2,8(r6)
 800d3d8:	10bfffc4 	addi	r2,r2,-1
 800d3dc:	30800215 	stw	r2,8(r6)
 800d3e0:	10001316 	blt	r2,zero,800d430 <_putc_r+0x78>
 800d3e4:	30800017 	ldw	r2,0(r6)
 800d3e8:	11400005 	stb	r5,0(r2)
 800d3ec:	30800017 	ldw	r2,0(r6)
 800d3f0:	10c00044 	addi	r3,r2,1
 800d3f4:	30c00015 	stw	r3,0(r6)
 800d3f8:	10800003 	ldbu	r2,0(r2)
 800d3fc:	dfc00317 	ldw	ra,12(sp)
 800d400:	dc400217 	ldw	r17,8(sp)
 800d404:	dec00404 	addi	sp,sp,16
 800d408:	f800283a 	ret
 800d40c:	d9800115 	stw	r6,4(sp)
 800d410:	d9400015 	stw	r5,0(sp)
 800d414:	800abdc0 	call	800abdc <__sinit>
 800d418:	d9800117 	ldw	r6,4(sp)
 800d41c:	d9400017 	ldw	r5,0(sp)
 800d420:	30800217 	ldw	r2,8(r6)
 800d424:	10bfffc4 	addi	r2,r2,-1
 800d428:	30800215 	stw	r2,8(r6)
 800d42c:	103fed0e 	bge	r2,zero,800d3e4 <_putc_r+0x2c>
 800d430:	30c00617 	ldw	r3,24(r6)
 800d434:	10c00e16 	blt	r2,r3,800d470 <_putc_r+0xb8>
 800d438:	30800017 	ldw	r2,0(r6)
 800d43c:	11400005 	stb	r5,0(r2)
 800d440:	30c00017 	ldw	r3,0(r6)
 800d444:	18800003 	ldbu	r2,0(r3)
 800d448:	108002a0 	cmpeqi	r2,r2,10
 800d44c:	1000071e 	bne	r2,zero,800d46c <_putc_r+0xb4>
 800d450:	18800044 	addi	r2,r3,1
 800d454:	30800015 	stw	r2,0(r6)
 800d458:	18800003 	ldbu	r2,0(r3)
 800d45c:	dfc00317 	ldw	ra,12(sp)
 800d460:	dc400217 	ldw	r17,8(sp)
 800d464:	dec00404 	addi	sp,sp,16
 800d468:	f800283a 	ret
 800d46c:	01400284 	movi	r5,10
 800d470:	8809883a 	mov	r4,r17
 800d474:	dfc00317 	ldw	ra,12(sp)
 800d478:	dc400217 	ldw	r17,8(sp)
 800d47c:	dec00404 	addi	sp,sp,16
 800d480:	80104741 	jmpi	8010474 <__swbuf_r>

0800d484 <putc>:
 800d484:	defffc04 	addi	sp,sp,-16
 800d488:	00820174 	movhi	r2,2053
 800d48c:	dc800215 	stw	r18,8(sp)
 800d490:	149bd417 	ldw	r18,28496(r2)
 800d494:	dc400115 	stw	r17,4(sp)
 800d498:	dfc00315 	stw	ra,12(sp)
 800d49c:	2023883a 	mov	r17,r4
 800d4a0:	90000226 	beq	r18,zero,800d4ac <putc+0x28>
 800d4a4:	90800e17 	ldw	r2,56(r18)
 800d4a8:	10000f26 	beq	r2,zero,800d4e8 <putc+0x64>
 800d4ac:	28800217 	ldw	r2,8(r5)
 800d4b0:	10bfffc4 	addi	r2,r2,-1
 800d4b4:	28800215 	stw	r2,8(r5)
 800d4b8:	10001316 	blt	r2,zero,800d508 <putc+0x84>
 800d4bc:	28800017 	ldw	r2,0(r5)
 800d4c0:	14400005 	stb	r17,0(r2)
 800d4c4:	28800017 	ldw	r2,0(r5)
 800d4c8:	10c00044 	addi	r3,r2,1
 800d4cc:	28c00015 	stw	r3,0(r5)
 800d4d0:	10800003 	ldbu	r2,0(r2)
 800d4d4:	dfc00317 	ldw	ra,12(sp)
 800d4d8:	dc800217 	ldw	r18,8(sp)
 800d4dc:	dc400117 	ldw	r17,4(sp)
 800d4e0:	dec00404 	addi	sp,sp,16
 800d4e4:	f800283a 	ret
 800d4e8:	9009883a 	mov	r4,r18
 800d4ec:	d9400015 	stw	r5,0(sp)
 800d4f0:	800abdc0 	call	800abdc <__sinit>
 800d4f4:	d9400017 	ldw	r5,0(sp)
 800d4f8:	28800217 	ldw	r2,8(r5)
 800d4fc:	10bfffc4 	addi	r2,r2,-1
 800d500:	28800215 	stw	r2,8(r5)
 800d504:	103fed0e 	bge	r2,zero,800d4bc <putc+0x38>
 800d508:	28c00617 	ldw	r3,24(r5)
 800d50c:	10c00a16 	blt	r2,r3,800d538 <putc+0xb4>
 800d510:	28800017 	ldw	r2,0(r5)
 800d514:	14400005 	stb	r17,0(r2)
 800d518:	28c00017 	ldw	r3,0(r5)
 800d51c:	18800003 	ldbu	r2,0(r3)
 800d520:	108002a0 	cmpeqi	r2,r2,10
 800d524:	10000c1e 	bne	r2,zero,800d558 <putc+0xd4>
 800d528:	18800044 	addi	r2,r3,1
 800d52c:	28800015 	stw	r2,0(r5)
 800d530:	18800003 	ldbu	r2,0(r3)
 800d534:	003fe706 	br	800d4d4 <putc+0x50>
 800d538:	280d883a 	mov	r6,r5
 800d53c:	880b883a 	mov	r5,r17
 800d540:	9009883a 	mov	r4,r18
 800d544:	dfc00317 	ldw	ra,12(sp)
 800d548:	dc800217 	ldw	r18,8(sp)
 800d54c:	dc400117 	ldw	r17,4(sp)
 800d550:	dec00404 	addi	sp,sp,16
 800d554:	80104741 	jmpi	8010474 <__swbuf_r>
 800d558:	280d883a 	mov	r6,r5
 800d55c:	01400284 	movi	r5,10
 800d560:	003ff706 	br	800d540 <putc+0xbc>

0800d564 <_realloc_r>:
 800d564:	defff504 	addi	sp,sp,-44
 800d568:	dc800315 	stw	r18,12(sp)
 800d56c:	dfc00a15 	stw	ra,40(sp)
 800d570:	df000915 	stw	fp,36(sp)
 800d574:	ddc00815 	stw	r23,32(sp)
 800d578:	dd800715 	stw	r22,28(sp)
 800d57c:	dd400615 	stw	r21,24(sp)
 800d580:	dd000515 	stw	r20,20(sp)
 800d584:	dcc00415 	stw	r19,16(sp)
 800d588:	dc400215 	stw	r17,8(sp)
 800d58c:	dc000115 	stw	r16,4(sp)
 800d590:	3025883a 	mov	r18,r6
 800d594:	28008b26 	beq	r5,zero,800d7c4 <_realloc_r+0x260>
 800d598:	2821883a 	mov	r16,r5
 800d59c:	2027883a 	mov	r19,r4
 800d5a0:	944002c4 	addi	r17,r18,11
 800d5a4:	8014e200 	call	8014e20 <__malloc_lock>
 800d5a8:	888005f0 	cmpltui	r2,r17,23
 800d5ac:	1000521e 	bne	r2,zero,800d6f8 <_realloc_r+0x194>
 800d5b0:	017ffe04 	movi	r5,-8
 800d5b4:	8962703a 	and	r17,r17,r5
 800d5b8:	8807883a 	mov	r3,r17
 800d5bc:	88005116 	blt	r17,zero,800d704 <_realloc_r+0x1a0>
 800d5c0:	8c805036 	bltu	r17,r18,800d704 <_realloc_r+0x1a0>
 800d5c4:	80bfff17 	ldw	r2,-4(r16)
 800d5c8:	017fff04 	movi	r5,-4
 800d5cc:	857ffe04 	addi	r21,r16,-8
 800d5d0:	1168703a 	and	r20,r2,r5
 800d5d4:	ad2d883a 	add	r22,r21,r20
 800d5d8:	a0c0390e 	bge	r20,r3,800d6c0 <_realloc_r+0x15c>
 800d5dc:	07020174 	movhi	fp,2053
 800d5e0:	e714ab04 	addi	fp,fp,21164
 800d5e4:	e2000217 	ldw	r8,8(fp)
 800d5e8:	b1000117 	ldw	r4,4(r22)
 800d5ec:	45808e26 	beq	r8,r22,800d828 <_realloc_r+0x2c4>
 800d5f0:	01bfff84 	movi	r6,-2
 800d5f4:	218c703a 	and	r6,r4,r6
 800d5f8:	b18d883a 	add	r6,r22,r6
 800d5fc:	31800117 	ldw	r6,4(r6)
 800d600:	3180004c 	andi	r6,r6,1
 800d604:	30004f1e 	bne	r6,zero,800d744 <_realloc_r+0x1e0>
 800d608:	2148703a 	and	r4,r4,r5
 800d60c:	a10b883a 	add	r5,r20,r4
 800d610:	28c0bf0e 	bge	r5,r3,800d910 <_realloc_r+0x3ac>
 800d614:	1080004c 	andi	r2,r2,1
 800d618:	10004c1e 	bne	r2,zero,800d74c <_realloc_r+0x1e8>
 800d61c:	81fffe17 	ldw	r7,-8(r16)
 800d620:	00bfff04 	movi	r2,-4
 800d624:	a9cfc83a 	sub	r7,r21,r7
 800d628:	39400117 	ldw	r5,4(r7)
 800d62c:	288a703a 	and	r5,r5,r2
 800d630:	b0000426 	beq	r22,zero,800d644 <_realloc_r+0xe0>
 800d634:	a16f883a 	add	r23,r20,r5
 800d638:	b92f883a 	add	r23,r23,r4
 800d63c:	4580bf26 	beq	r8,r22,800d93c <_realloc_r+0x3d8>
 800d640:	b8c0930e 	bge	r23,r3,800d890 <_realloc_r+0x32c>
 800d644:	38004126 	beq	r7,zero,800d74c <_realloc_r+0x1e8>
 800d648:	a16f883a 	add	r23,r20,r5
 800d64c:	b8c03f16 	blt	r23,r3,800d74c <_realloc_r+0x1e8>
 800d650:	38800317 	ldw	r2,12(r7)
 800d654:	38c00217 	ldw	r3,8(r7)
 800d658:	a1bfff04 	addi	r6,r20,-4
 800d65c:	31400968 	cmpgeui	r5,r6,37
 800d660:	18800315 	stw	r2,12(r3)
 800d664:	10c00215 	stw	r3,8(r2)
 800d668:	39000204 	addi	r4,r7,8
 800d66c:	3ded883a 	add	r22,r7,r23
 800d670:	2800941e 	bne	r5,zero,800d8c4 <_realloc_r+0x360>
 800d674:	30800530 	cmpltui	r2,r6,20
 800d678:	80c00017 	ldw	r3,0(r16)
 800d67c:	1000df1e 	bne	r2,zero,800d9fc <_realloc_r+0x498>
 800d680:	38c00215 	stw	r3,8(r7)
 800d684:	80c00117 	ldw	r3,4(r16)
 800d688:	30800728 	cmpgeui	r2,r6,28
 800d68c:	38c00315 	stw	r3,12(r7)
 800d690:	1000dc1e 	bne	r2,zero,800da04 <_realloc_r+0x4a0>
 800d694:	80c00217 	ldw	r3,8(r16)
 800d698:	38800404 	addi	r2,r7,16
 800d69c:	84000204 	addi	r16,r16,8
 800d6a0:	10c00015 	stw	r3,0(r2)
 800d6a4:	80c00117 	ldw	r3,4(r16)
 800d6a8:	b829883a 	mov	r20,r23
 800d6ac:	382b883a 	mov	r21,r7
 800d6b0:	10c00115 	stw	r3,4(r2)
 800d6b4:	80c00217 	ldw	r3,8(r16)
 800d6b8:	2021883a 	mov	r16,r4
 800d6bc:	10c00215 	stw	r3,8(r2)
 800d6c0:	a9800117 	ldw	r6,4(r21)
 800d6c4:	a445c83a 	sub	r2,r20,r17
 800d6c8:	10c00430 	cmpltui	r3,r2,16
 800d6cc:	3180004c 	andi	r6,r6,1
 800d6d0:	18004926 	beq	r3,zero,800d7f8 <_realloc_r+0x294>
 800d6d4:	a18cb03a 	or	r6,r20,r6
 800d6d8:	a9800115 	stw	r6,4(r21)
 800d6dc:	b0800117 	ldw	r2,4(r22)
 800d6e0:	10800054 	ori	r2,r2,1
 800d6e4:	b0800115 	stw	r2,4(r22)
 800d6e8:	9809883a 	mov	r4,r19
 800d6ec:	8014f480 	call	8014f48 <__malloc_unlock>
 800d6f0:	8025883a 	mov	r18,r16
 800d6f4:	00000606 	br	800d710 <_realloc_r+0x1ac>
 800d6f8:	04400404 	movi	r17,16
 800d6fc:	00c00404 	movi	r3,16
 800d700:	8cbfb02e 	bgeu	r17,r18,800d5c4 <_realloc_r+0x60>
 800d704:	00800304 	movi	r2,12
 800d708:	98800015 	stw	r2,0(r19)
 800d70c:	0025883a 	mov	r18,zero
 800d710:	9005883a 	mov	r2,r18
 800d714:	dfc00a17 	ldw	ra,40(sp)
 800d718:	df000917 	ldw	fp,36(sp)
 800d71c:	ddc00817 	ldw	r23,32(sp)
 800d720:	dd800717 	ldw	r22,28(sp)
 800d724:	dd400617 	ldw	r21,24(sp)
 800d728:	dd000517 	ldw	r20,20(sp)
 800d72c:	dcc00417 	ldw	r19,16(sp)
 800d730:	dc800317 	ldw	r18,12(sp)
 800d734:	dc400217 	ldw	r17,8(sp)
 800d738:	dc000117 	ldw	r16,4(sp)
 800d73c:	dec00b04 	addi	sp,sp,44
 800d740:	f800283a 	ret
 800d744:	1080004c 	andi	r2,r2,1
 800d748:	10006c26 	beq	r2,zero,800d8fc <_realloc_r+0x398>
 800d74c:	900b883a 	mov	r5,r18
 800d750:	9809883a 	mov	r4,r19
 800d754:	800b93c0 	call	800b93c <_malloc_r>
 800d758:	1025883a 	mov	r18,r2
 800d75c:	10001626 	beq	r2,zero,800d7b8 <_realloc_r+0x254>
 800d760:	80bfff17 	ldw	r2,-4(r16)
 800d764:	013fff84 	movi	r4,-2
 800d768:	90fffe04 	addi	r3,r18,-8
 800d76c:	1104703a 	and	r2,r2,r4
 800d770:	a885883a 	add	r2,r21,r2
 800d774:	10c05b26 	beq	r2,r3,800d8e4 <_realloc_r+0x380>
 800d778:	a1bfff04 	addi	r6,r20,-4
 800d77c:	30800968 	cmpgeui	r2,r6,37
 800d780:	10006a1e 	bne	r2,zero,800d92c <_realloc_r+0x3c8>
 800d784:	30800530 	cmpltui	r2,r6,20
 800d788:	81000017 	ldw	r4,0(r16)
 800d78c:	10003726 	beq	r2,zero,800d86c <_realloc_r+0x308>
 800d790:	9005883a 	mov	r2,r18
 800d794:	8007883a 	mov	r3,r16
 800d798:	11000015 	stw	r4,0(r2)
 800d79c:	19000117 	ldw	r4,4(r3)
 800d7a0:	11000115 	stw	r4,4(r2)
 800d7a4:	18c00217 	ldw	r3,8(r3)
 800d7a8:	10c00215 	stw	r3,8(r2)
 800d7ac:	800b883a 	mov	r5,r16
 800d7b0:	9809883a 	mov	r4,r19
 800d7b4:	800ad400 	call	800ad40 <_free_r>
 800d7b8:	9809883a 	mov	r4,r19
 800d7bc:	8014f480 	call	8014f48 <__malloc_unlock>
 800d7c0:	003fd306 	br	800d710 <_realloc_r+0x1ac>
 800d7c4:	300b883a 	mov	r5,r6
 800d7c8:	dfc00a17 	ldw	ra,40(sp)
 800d7cc:	df000917 	ldw	fp,36(sp)
 800d7d0:	ddc00817 	ldw	r23,32(sp)
 800d7d4:	dd800717 	ldw	r22,28(sp)
 800d7d8:	dd400617 	ldw	r21,24(sp)
 800d7dc:	dd000517 	ldw	r20,20(sp)
 800d7e0:	dcc00417 	ldw	r19,16(sp)
 800d7e4:	dc800317 	ldw	r18,12(sp)
 800d7e8:	dc400217 	ldw	r17,8(sp)
 800d7ec:	dc000117 	ldw	r16,4(sp)
 800d7f0:	dec00b04 	addi	sp,sp,44
 800d7f4:	800b93c1 	jmpi	800b93c <_malloc_r>
 800d7f8:	344cb03a 	or	r6,r6,r17
 800d7fc:	a9800115 	stw	r6,4(r21)
 800d800:	ac4b883a 	add	r5,r21,r17
 800d804:	10800054 	ori	r2,r2,1
 800d808:	28800115 	stw	r2,4(r5)
 800d80c:	b0800117 	ldw	r2,4(r22)
 800d810:	29400204 	addi	r5,r5,8
 800d814:	9809883a 	mov	r4,r19
 800d818:	10800054 	ori	r2,r2,1
 800d81c:	b0800115 	stw	r2,4(r22)
 800d820:	800ad400 	call	800ad40 <_free_r>
 800d824:	003fb006 	br	800d6e8 <_realloc_r+0x184>
 800d828:	2148703a 	and	r4,r4,r5
 800d82c:	a10b883a 	add	r5,r20,r4
 800d830:	89800404 	addi	r6,r17,16
 800d834:	29bf7716 	blt	r5,r6,800d614 <_realloc_r+0xb0>
 800d838:	ac6b883a 	add	r21,r21,r17
 800d83c:	2c45c83a 	sub	r2,r5,r17
 800d840:	e5400215 	stw	r21,8(fp)
 800d844:	10800054 	ori	r2,r2,1
 800d848:	a8800115 	stw	r2,4(r21)
 800d84c:	80bfff17 	ldw	r2,-4(r16)
 800d850:	9809883a 	mov	r4,r19
 800d854:	8025883a 	mov	r18,r16
 800d858:	1080004c 	andi	r2,r2,1
 800d85c:	1462b03a 	or	r17,r2,r17
 800d860:	847fff15 	stw	r17,-4(r16)
 800d864:	8014f480 	call	8014f48 <__malloc_unlock>
 800d868:	003fa906 	br	800d710 <_realloc_r+0x1ac>
 800d86c:	91000015 	stw	r4,0(r18)
 800d870:	80c00117 	ldw	r3,4(r16)
 800d874:	30800728 	cmpgeui	r2,r6,28
 800d878:	90c00115 	stw	r3,4(r18)
 800d87c:	1000551e 	bne	r2,zero,800d9d4 <_realloc_r+0x470>
 800d880:	81000217 	ldw	r4,8(r16)
 800d884:	80c00204 	addi	r3,r16,8
 800d888:	90800204 	addi	r2,r18,8
 800d88c:	003fc206 	br	800d798 <_realloc_r+0x234>
 800d890:	b0800317 	ldw	r2,12(r22)
 800d894:	b0c00217 	ldw	r3,8(r22)
 800d898:	a1bfff04 	addi	r6,r20,-4
 800d89c:	31400968 	cmpgeui	r5,r6,37
 800d8a0:	18800315 	stw	r2,12(r3)
 800d8a4:	10c00215 	stw	r3,8(r2)
 800d8a8:	38c00217 	ldw	r3,8(r7)
 800d8ac:	38800317 	ldw	r2,12(r7)
 800d8b0:	39000204 	addi	r4,r7,8
 800d8b4:	3ded883a 	add	r22,r7,r23
 800d8b8:	18800315 	stw	r2,12(r3)
 800d8bc:	10c00215 	stw	r3,8(r2)
 800d8c0:	283f6c26 	beq	r5,zero,800d674 <_realloc_r+0x110>
 800d8c4:	800b883a 	mov	r5,r16
 800d8c8:	d9c00015 	stw	r7,0(sp)
 800d8cc:	800c1f00 	call	800c1f0 <memmove>
 800d8d0:	d9c00017 	ldw	r7,0(sp)
 800d8d4:	1021883a 	mov	r16,r2
 800d8d8:	b829883a 	mov	r20,r23
 800d8dc:	382b883a 	mov	r21,r7
 800d8e0:	003f7706 	br	800d6c0 <_realloc_r+0x15c>
 800d8e4:	90bfff17 	ldw	r2,-4(r18)
 800d8e8:	00ffff04 	movi	r3,-4
 800d8ec:	10c4703a 	and	r2,r2,r3
 800d8f0:	a0a9883a 	add	r20,r20,r2
 800d8f4:	ad2d883a 	add	r22,r21,r20
 800d8f8:	003f7106 	br	800d6c0 <_realloc_r+0x15c>
 800d8fc:	81fffe17 	ldw	r7,-8(r16)
 800d900:	a9cfc83a 	sub	r7,r21,r7
 800d904:	39000117 	ldw	r4,4(r7)
 800d908:	214a703a 	and	r5,r4,r5
 800d90c:	003f4d06 	br	800d644 <_realloc_r+0xe0>
 800d910:	b0800317 	ldw	r2,12(r22)
 800d914:	b0c00217 	ldw	r3,8(r22)
 800d918:	2829883a 	mov	r20,r5
 800d91c:	a96d883a 	add	r22,r21,r5
 800d920:	18800315 	stw	r2,12(r3)
 800d924:	10c00215 	stw	r3,8(r2)
 800d928:	003f6506 	br	800d6c0 <_realloc_r+0x15c>
 800d92c:	800b883a 	mov	r5,r16
 800d930:	9009883a 	mov	r4,r18
 800d934:	800c1f00 	call	800c1f0 <memmove>
 800d938:	003f9c06 	br	800d7ac <_realloc_r+0x248>
 800d93c:	88800404 	addi	r2,r17,16
 800d940:	b8bf4016 	blt	r23,r2,800d644 <_realloc_r+0xe0>
 800d944:	38800317 	ldw	r2,12(r7)
 800d948:	38c00217 	ldw	r3,8(r7)
 800d94c:	a1bfff04 	addi	r6,r20,-4
 800d950:	31000968 	cmpgeui	r4,r6,37
 800d954:	18800315 	stw	r2,12(r3)
 800d958:	10c00215 	stw	r3,8(r2)
 800d95c:	3c800204 	addi	r18,r7,8
 800d960:	20003b1e 	bne	r4,zero,800da50 <_realloc_r+0x4ec>
 800d964:	30800530 	cmpltui	r2,r6,20
 800d968:	80c00017 	ldw	r3,0(r16)
 800d96c:	1000361e 	bne	r2,zero,800da48 <_realloc_r+0x4e4>
 800d970:	38c00215 	stw	r3,8(r7)
 800d974:	80c00117 	ldw	r3,4(r16)
 800d978:	30800728 	cmpgeui	r2,r6,28
 800d97c:	38c00315 	stw	r3,12(r7)
 800d980:	1000401e 	bne	r2,zero,800da84 <_realloc_r+0x520>
 800d984:	80c00217 	ldw	r3,8(r16)
 800d988:	38800404 	addi	r2,r7,16
 800d98c:	84000204 	addi	r16,r16,8
 800d990:	10c00015 	stw	r3,0(r2)
 800d994:	80c00117 	ldw	r3,4(r16)
 800d998:	10c00115 	stw	r3,4(r2)
 800d99c:	80c00217 	ldw	r3,8(r16)
 800d9a0:	10c00215 	stw	r3,8(r2)
 800d9a4:	3c47883a 	add	r3,r7,r17
 800d9a8:	bc45c83a 	sub	r2,r23,r17
 800d9ac:	e0c00215 	stw	r3,8(fp)
 800d9b0:	10800054 	ori	r2,r2,1
 800d9b4:	18800115 	stw	r2,4(r3)
 800d9b8:	38800117 	ldw	r2,4(r7)
 800d9bc:	9809883a 	mov	r4,r19
 800d9c0:	1080004c 	andi	r2,r2,1
 800d9c4:	1462b03a 	or	r17,r2,r17
 800d9c8:	3c400115 	stw	r17,4(r7)
 800d9cc:	8014f480 	call	8014f48 <__malloc_unlock>
 800d9d0:	003f4f06 	br	800d710 <_realloc_r+0x1ac>
 800d9d4:	80800217 	ldw	r2,8(r16)
 800d9d8:	31800920 	cmpeqi	r6,r6,36
 800d9dc:	90800215 	stw	r2,8(r18)
 800d9e0:	80800317 	ldw	r2,12(r16)
 800d9e4:	90800315 	stw	r2,12(r18)
 800d9e8:	81000417 	ldw	r4,16(r16)
 800d9ec:	30000f1e 	bne	r6,zero,800da2c <_realloc_r+0x4c8>
 800d9f0:	80c00404 	addi	r3,r16,16
 800d9f4:	90800404 	addi	r2,r18,16
 800d9f8:	003f6706 	br	800d798 <_realloc_r+0x234>
 800d9fc:	2005883a 	mov	r2,r4
 800da00:	003f2706 	br	800d6a0 <_realloc_r+0x13c>
 800da04:	80800217 	ldw	r2,8(r16)
 800da08:	31800920 	cmpeqi	r6,r6,36
 800da0c:	38800415 	stw	r2,16(r7)
 800da10:	80800317 	ldw	r2,12(r16)
 800da14:	38800515 	stw	r2,20(r7)
 800da18:	80c00417 	ldw	r3,16(r16)
 800da1c:	3000121e 	bne	r6,zero,800da68 <_realloc_r+0x504>
 800da20:	38800604 	addi	r2,r7,24
 800da24:	84000404 	addi	r16,r16,16
 800da28:	003f1d06 	br	800d6a0 <_realloc_r+0x13c>
 800da2c:	91000415 	stw	r4,16(r18)
 800da30:	81000517 	ldw	r4,20(r16)
 800da34:	80c00604 	addi	r3,r16,24
 800da38:	90800604 	addi	r2,r18,24
 800da3c:	91000515 	stw	r4,20(r18)
 800da40:	81000617 	ldw	r4,24(r16)
 800da44:	003f5406 	br	800d798 <_realloc_r+0x234>
 800da48:	9005883a 	mov	r2,r18
 800da4c:	003fd006 	br	800d990 <_realloc_r+0x42c>
 800da50:	800b883a 	mov	r5,r16
 800da54:	9009883a 	mov	r4,r18
 800da58:	d9c00015 	stw	r7,0(sp)
 800da5c:	800c1f00 	call	800c1f0 <memmove>
 800da60:	d9c00017 	ldw	r7,0(sp)
 800da64:	003fcf06 	br	800d9a4 <_realloc_r+0x440>
 800da68:	84000604 	addi	r16,r16,24
 800da6c:	38c00615 	stw	r3,24(r7)
 800da70:	80ffff17 	ldw	r3,-4(r16)
 800da74:	38800804 	addi	r2,r7,32
 800da78:	38c00715 	stw	r3,28(r7)
 800da7c:	80c00017 	ldw	r3,0(r16)
 800da80:	003f0706 	br	800d6a0 <_realloc_r+0x13c>
 800da84:	80800217 	ldw	r2,8(r16)
 800da88:	31800920 	cmpeqi	r6,r6,36
 800da8c:	38800415 	stw	r2,16(r7)
 800da90:	80800317 	ldw	r2,12(r16)
 800da94:	38800515 	stw	r2,20(r7)
 800da98:	80c00417 	ldw	r3,16(r16)
 800da9c:	3000031e 	bne	r6,zero,800daac <_realloc_r+0x548>
 800daa0:	38800604 	addi	r2,r7,24
 800daa4:	84000404 	addi	r16,r16,16
 800daa8:	003fb906 	br	800d990 <_realloc_r+0x42c>
 800daac:	84000604 	addi	r16,r16,24
 800dab0:	38c00615 	stw	r3,24(r7)
 800dab4:	80ffff17 	ldw	r3,-4(r16)
 800dab8:	38800804 	addi	r2,r7,32
 800dabc:	38c00715 	stw	r3,28(r7)
 800dac0:	80c00017 	ldw	r3,0(r16)
 800dac4:	003fb206 	br	800d990 <_realloc_r+0x42c>

0800dac8 <__srget_r>:
 800dac8:	defffd04 	addi	sp,sp,-12
 800dacc:	dc400115 	stw	r17,4(sp)
 800dad0:	dc000015 	stw	r16,0(sp)
 800dad4:	dfc00215 	stw	ra,8(sp)
 800dad8:	2023883a 	mov	r17,r4
 800dadc:	2821883a 	mov	r16,r5
 800dae0:	20000226 	beq	r4,zero,800daec <__srget_r+0x24>
 800dae4:	20800e17 	ldw	r2,56(r4)
 800dae8:	10001026 	beq	r2,zero,800db2c <__srget_r+0x64>
 800daec:	800b883a 	mov	r5,r16
 800daf0:	8809883a 	mov	r4,r17
 800daf4:	8010d3c0 	call	8010d3c <__srefill_r>
 800daf8:	10000e1e 	bne	r2,zero,800db34 <__srget_r+0x6c>
 800dafc:	80c00017 	ldw	r3,0(r16)
 800db00:	80800117 	ldw	r2,4(r16)
 800db04:	19000044 	addi	r4,r3,1
 800db08:	10bfffc4 	addi	r2,r2,-1
 800db0c:	80800115 	stw	r2,4(r16)
 800db10:	81000015 	stw	r4,0(r16)
 800db14:	18800003 	ldbu	r2,0(r3)
 800db18:	dfc00217 	ldw	ra,8(sp)
 800db1c:	dc400117 	ldw	r17,4(sp)
 800db20:	dc000017 	ldw	r16,0(sp)
 800db24:	dec00304 	addi	sp,sp,12
 800db28:	f800283a 	ret
 800db2c:	800abdc0 	call	800abdc <__sinit>
 800db30:	003fee06 	br	800daec <__srget_r+0x24>
 800db34:	00bfffc4 	movi	r2,-1
 800db38:	003ff706 	br	800db18 <__srget_r+0x50>

0800db3c <__srget>:
 800db3c:	00820174 	movhi	r2,2053
 800db40:	200b883a 	mov	r5,r4
 800db44:	111bd417 	ldw	r4,28496(r2)
 800db48:	800dac81 	jmpi	800dac8 <__srget_r>

0800db4c <_sbrk_r>:
 800db4c:	defffe04 	addi	sp,sp,-8
 800db50:	dc000015 	stw	r16,0(sp)
 800db54:	00820174 	movhi	r2,2053
 800db58:	2021883a 	mov	r16,r4
 800db5c:	2809883a 	mov	r4,r5
 800db60:	dfc00115 	stw	ra,4(sp)
 800db64:	101c2d15 	stw	zero,28852(r2)
 800db68:	8014c480 	call	8014c48 <sbrk>
 800db6c:	10ffffd8 	cmpnei	r3,r2,-1
 800db70:	18000426 	beq	r3,zero,800db84 <_sbrk_r+0x38>
 800db74:	dfc00117 	ldw	ra,4(sp)
 800db78:	dc000017 	ldw	r16,0(sp)
 800db7c:	dec00204 	addi	sp,sp,8
 800db80:	f800283a 	ret
 800db84:	00c20174 	movhi	r3,2053
 800db88:	18dc2d17 	ldw	r3,28852(r3)
 800db8c:	183ff926 	beq	r3,zero,800db74 <_sbrk_r+0x28>
 800db90:	80c00015 	stw	r3,0(r16)
 800db94:	dfc00117 	ldw	ra,4(sp)
 800db98:	dc000017 	ldw	r16,0(sp)
 800db9c:	dec00204 	addi	sp,sp,8
 800dba0:	f800283a 	ret

0800dba4 <__sread>:
 800dba4:	defffe04 	addi	sp,sp,-8
 800dba8:	dc000015 	stw	r16,0(sp)
 800dbac:	2821883a 	mov	r16,r5
 800dbb0:	2940038f 	ldh	r5,14(r5)
 800dbb4:	dfc00115 	stw	ra,4(sp)
 800dbb8:	8010cbc0 	call	8010cbc <_read_r>
 800dbbc:	10000716 	blt	r2,zero,800dbdc <__sread+0x38>
 800dbc0:	80c01417 	ldw	r3,80(r16)
 800dbc4:	1887883a 	add	r3,r3,r2
 800dbc8:	80c01415 	stw	r3,80(r16)
 800dbcc:	dfc00117 	ldw	ra,4(sp)
 800dbd0:	dc000017 	ldw	r16,0(sp)
 800dbd4:	dec00204 	addi	sp,sp,8
 800dbd8:	f800283a 	ret
 800dbdc:	80c0030b 	ldhu	r3,12(r16)
 800dbe0:	18fbffcc 	andi	r3,r3,61439
 800dbe4:	80c0030d 	sth	r3,12(r16)
 800dbe8:	dfc00117 	ldw	ra,4(sp)
 800dbec:	dc000017 	ldw	r16,0(sp)
 800dbf0:	dec00204 	addi	sp,sp,8
 800dbf4:	f800283a 	ret

0800dbf8 <__seofread>:
 800dbf8:	0005883a 	mov	r2,zero
 800dbfc:	f800283a 	ret

0800dc00 <__swrite>:
 800dc00:	2880030b 	ldhu	r2,12(r5)
 800dc04:	defffb04 	addi	sp,sp,-20
 800dc08:	dcc00315 	stw	r19,12(sp)
 800dc0c:	dc800215 	stw	r18,8(sp)
 800dc10:	dc400115 	stw	r17,4(sp)
 800dc14:	dc000015 	stw	r16,0(sp)
 800dc18:	dfc00415 	stw	ra,16(sp)
 800dc1c:	10c0400c 	andi	r3,r2,256
 800dc20:	2821883a 	mov	r16,r5
 800dc24:	2023883a 	mov	r17,r4
 800dc28:	2940038f 	ldh	r5,14(r5)
 800dc2c:	3025883a 	mov	r18,r6
 800dc30:	3827883a 	mov	r19,r7
 800dc34:	18000c1e 	bne	r3,zero,800dc68 <__swrite+0x68>
 800dc38:	10bbffcc 	andi	r2,r2,61439
 800dc3c:	980f883a 	mov	r7,r19
 800dc40:	900d883a 	mov	r6,r18
 800dc44:	8809883a 	mov	r4,r17
 800dc48:	8080030d 	sth	r2,12(r16)
 800dc4c:	dfc00417 	ldw	ra,16(sp)
 800dc50:	dcc00317 	ldw	r19,12(sp)
 800dc54:	dc800217 	ldw	r18,8(sp)
 800dc58:	dc400117 	ldw	r17,4(sp)
 800dc5c:	dc000017 	ldw	r16,0(sp)
 800dc60:	dec00504 	addi	sp,sp,20
 800dc64:	8008ac01 	jmpi	8008ac0 <_write_r>
 800dc68:	01c00084 	movi	r7,2
 800dc6c:	000d883a 	mov	r6,zero
 800dc70:	8010c080 	call	8010c08 <_lseek_r>
 800dc74:	8080030b 	ldhu	r2,12(r16)
 800dc78:	8140038f 	ldh	r5,14(r16)
 800dc7c:	003fee06 	br	800dc38 <__swrite+0x38>

0800dc80 <__sseek>:
 800dc80:	defffe04 	addi	sp,sp,-8
 800dc84:	dc000015 	stw	r16,0(sp)
 800dc88:	2821883a 	mov	r16,r5
 800dc8c:	2940038f 	ldh	r5,14(r5)
 800dc90:	dfc00115 	stw	ra,4(sp)
 800dc94:	8010c080 	call	8010c08 <_lseek_r>
 800dc98:	10ffffd8 	cmpnei	r3,r2,-1
 800dc9c:	18000826 	beq	r3,zero,800dcc0 <__sseek+0x40>
 800dca0:	80c0030b 	ldhu	r3,12(r16)
 800dca4:	80801415 	stw	r2,80(r16)
 800dca8:	18c40014 	ori	r3,r3,4096
 800dcac:	80c0030d 	sth	r3,12(r16)
 800dcb0:	dfc00117 	ldw	ra,4(sp)
 800dcb4:	dc000017 	ldw	r16,0(sp)
 800dcb8:	dec00204 	addi	sp,sp,8
 800dcbc:	f800283a 	ret
 800dcc0:	80c0030b 	ldhu	r3,12(r16)
 800dcc4:	18fbffcc 	andi	r3,r3,61439
 800dcc8:	80c0030d 	sth	r3,12(r16)
 800dccc:	dfc00117 	ldw	ra,4(sp)
 800dcd0:	dc000017 	ldw	r16,0(sp)
 800dcd4:	dec00204 	addi	sp,sp,8
 800dcd8:	f800283a 	ret

0800dcdc <__sclose>:
 800dcdc:	2940038f 	ldh	r5,14(r5)
 800dce0:	80105d41 	jmpi	80105d4 <_close_r>

0800dce4 <__ssprint_r>:
 800dce4:	30800217 	ldw	r2,8(r6)
 800dce8:	defff604 	addi	sp,sp,-40
 800dcec:	dcc00315 	stw	r19,12(sp)
 800dcf0:	dfc00915 	stw	ra,36(sp)
 800dcf4:	df000815 	stw	fp,32(sp)
 800dcf8:	ddc00715 	stw	r23,28(sp)
 800dcfc:	dd800615 	stw	r22,24(sp)
 800dd00:	dd400515 	stw	r21,20(sp)
 800dd04:	dd000415 	stw	r20,16(sp)
 800dd08:	dc800215 	stw	r18,8(sp)
 800dd0c:	dc400115 	stw	r17,4(sp)
 800dd10:	dc000015 	stw	r16,0(sp)
 800dd14:	3027883a 	mov	r19,r6
 800dd18:	10005426 	beq	r2,zero,800de6c <__ssprint_r+0x188>
 800dd1c:	2029883a 	mov	r20,r4
 800dd20:	35800017 	ldw	r22,0(r6)
 800dd24:	29000017 	ldw	r4,0(r5)
 800dd28:	2c400217 	ldw	r17,8(r5)
 800dd2c:	2821883a 	mov	r16,r5
 800dd30:	057edfc4 	movi	r21,-1153
 800dd34:	00003406 	br	800de08 <__ssprint_r+0x124>
 800dd38:	8080030b 	ldhu	r2,12(r16)
 800dd3c:	10c1200c 	andi	r3,r2,1152
 800dd40:	18002426 	beq	r3,zero,800ddd4 <__ssprint_r+0xf0>
 800dd44:	81800517 	ldw	r6,20(r16)
 800dd48:	81400417 	ldw	r5,16(r16)
 800dd4c:	90c00044 	addi	r3,r18,1
 800dd50:	318000e4 	muli	r6,r6,3
 800dd54:	216fc83a 	sub	r23,r4,r5
 800dd58:	1dc7883a 	add	r3,r3,r23
 800dd5c:	3022d7fa 	srli	r17,r6,31
 800dd60:	89a3883a 	add	r17,r17,r6
 800dd64:	8823d07a 	srai	r17,r17,1
 800dd68:	880d883a 	mov	r6,r17
 800dd6c:	88c0022e 	bgeu	r17,r3,800dd78 <__ssprint_r+0x94>
 800dd70:	1823883a 	mov	r17,r3
 800dd74:	180d883a 	mov	r6,r3
 800dd78:	1081000c 	andi	r2,r2,1024
 800dd7c:	10002b26 	beq	r2,zero,800de2c <__ssprint_r+0x148>
 800dd80:	300b883a 	mov	r5,r6
 800dd84:	a009883a 	mov	r4,r20
 800dd88:	800b93c0 	call	800b93c <_malloc_r>
 800dd8c:	10002e26 	beq	r2,zero,800de48 <__ssprint_r+0x164>
 800dd90:	81400417 	ldw	r5,16(r16)
 800dd94:	b80d883a 	mov	r6,r23
 800dd98:	1009883a 	mov	r4,r2
 800dd9c:	80037cc0 	call	80037cc <memcpy>
 800dda0:	1007883a 	mov	r3,r2
 800dda4:	8080030b 	ldhu	r2,12(r16)
 800dda8:	1544703a 	and	r2,r2,r21
 800ddac:	10802014 	ori	r2,r2,128
 800ddb0:	8080030d 	sth	r2,12(r16)
 800ddb4:	1dc9883a 	add	r4,r3,r23
 800ddb8:	8defc83a 	sub	r23,r17,r23
 800ddbc:	84400515 	stw	r17,20(r16)
 800ddc0:	85c00215 	stw	r23,8(r16)
 800ddc4:	80c00415 	stw	r3,16(r16)
 800ddc8:	81000015 	stw	r4,0(r16)
 800ddcc:	9023883a 	mov	r17,r18
 800ddd0:	902f883a 	mov	r23,r18
 800ddd4:	b80d883a 	mov	r6,r23
 800ddd8:	e00b883a 	mov	r5,fp
 800dddc:	800c1f00 	call	800c1f0 <memmove>
 800dde0:	80c00217 	ldw	r3,8(r16)
 800dde4:	81000017 	ldw	r4,0(r16)
 800dde8:	98800217 	ldw	r2,8(r19)
 800ddec:	1c63c83a 	sub	r17,r3,r17
 800ddf0:	25c9883a 	add	r4,r4,r23
 800ddf4:	84400215 	stw	r17,8(r16)
 800ddf8:	81000015 	stw	r4,0(r16)
 800ddfc:	14a5c83a 	sub	r18,r2,r18
 800de00:	9c800215 	stw	r18,8(r19)
 800de04:	90001926 	beq	r18,zero,800de6c <__ssprint_r+0x188>
 800de08:	b4800117 	ldw	r18,4(r22)
 800de0c:	b7000017 	ldw	fp,0(r22)
 800de10:	882f883a 	mov	r23,r17
 800de14:	b5800204 	addi	r22,r22,8
 800de18:	903ffb26 	beq	r18,zero,800de08 <__ssprint_r+0x124>
 800de1c:	947fc62e 	bgeu	r18,r17,800dd38 <__ssprint_r+0x54>
 800de20:	9023883a 	mov	r17,r18
 800de24:	902f883a 	mov	r23,r18
 800de28:	003fea06 	br	800ddd4 <__ssprint_r+0xf0>
 800de2c:	a009883a 	mov	r4,r20
 800de30:	800d5640 	call	800d564 <_realloc_r>
 800de34:	1007883a 	mov	r3,r2
 800de38:	103fde1e 	bne	r2,zero,800ddb4 <__ssprint_r+0xd0>
 800de3c:	81400417 	ldw	r5,16(r16)
 800de40:	a009883a 	mov	r4,r20
 800de44:	800ad400 	call	800ad40 <_free_r>
 800de48:	80c0030b 	ldhu	r3,12(r16)
 800de4c:	00800304 	movi	r2,12
 800de50:	a0800015 	stw	r2,0(r20)
 800de54:	18c01014 	ori	r3,r3,64
 800de58:	80c0030d 	sth	r3,12(r16)
 800de5c:	00bfffc4 	movi	r2,-1
 800de60:	98000215 	stw	zero,8(r19)
 800de64:	98000115 	stw	zero,4(r19)
 800de68:	00000206 	br	800de74 <__ssprint_r+0x190>
 800de6c:	98000115 	stw	zero,4(r19)
 800de70:	0005883a 	mov	r2,zero
 800de74:	dfc00917 	ldw	ra,36(sp)
 800de78:	df000817 	ldw	fp,32(sp)
 800de7c:	ddc00717 	ldw	r23,28(sp)
 800de80:	dd800617 	ldw	r22,24(sp)
 800de84:	dd400517 	ldw	r21,20(sp)
 800de88:	dd000417 	ldw	r20,16(sp)
 800de8c:	dcc00317 	ldw	r19,12(sp)
 800de90:	dc800217 	ldw	r18,8(sp)
 800de94:	dc400117 	ldw	r17,4(sp)
 800de98:	dc000017 	ldw	r16,0(sp)
 800de9c:	dec00a04 	addi	sp,sp,40
 800dea0:	f800283a 	ret

0800dea4 <___svfiprintf_internal_r>:
 800dea4:	2880030b 	ldhu	r2,12(r5)
 800dea8:	deffd004 	addi	sp,sp,-192
 800deac:	df002e15 	stw	fp,184(sp)
 800deb0:	dd402b15 	stw	r21,172(sp)
 800deb4:	dd002a15 	stw	r20,168(sp)
 800deb8:	dfc02f15 	stw	ra,188(sp)
 800debc:	ddc02d15 	stw	r23,180(sp)
 800dec0:	dd802c15 	stw	r22,176(sp)
 800dec4:	dcc02915 	stw	r19,164(sp)
 800dec8:	dc802815 	stw	r18,160(sp)
 800decc:	dc402715 	stw	r17,156(sp)
 800ded0:	dc002615 	stw	r16,152(sp)
 800ded4:	1080200c 	andi	r2,r2,128
 800ded8:	d9c00315 	stw	r7,12(sp)
 800dedc:	2829883a 	mov	r20,r5
 800dee0:	202b883a 	mov	r21,r4
 800dee4:	3039883a 	mov	fp,r6
 800dee8:	10000226 	beq	r2,zero,800def4 <___svfiprintf_internal_r+0x50>
 800deec:	28800417 	ldw	r2,16(r5)
 800def0:	10039f26 	beq	r2,zero,800ed70 <___svfiprintf_internal_r+0xecc>
 800def4:	dc801604 	addi	r18,sp,88
 800def8:	dc800915 	stw	r18,36(sp)
 800defc:	d8000b15 	stw	zero,44(sp)
 800df00:	d8000a15 	stw	zero,40(sp)
 800df04:	9011883a 	mov	r8,r18
 800df08:	d8000415 	stw	zero,16(sp)
 800df0c:	d8000015 	stw	zero,0(sp)
 800df10:	e0800007 	ldb	r2,0(fp)
 800df14:	1000f226 	beq	r2,zero,800e2e0 <___svfiprintf_internal_r+0x43c>
 800df18:	e021883a 	mov	r16,fp
 800df1c:	00000306 	br	800df2c <___svfiprintf_internal_r+0x88>
 800df20:	80800047 	ldb	r2,1(r16)
 800df24:	84000044 	addi	r16,r16,1
 800df28:	10010926 	beq	r2,zero,800e350 <___svfiprintf_internal_r+0x4ac>
 800df2c:	10800958 	cmpnei	r2,r2,37
 800df30:	103ffb1e 	bne	r2,zero,800df20 <___svfiprintf_internal_r+0x7c>
 800df34:	8723c83a 	sub	r17,r16,fp
 800df38:	8701071e 	bne	r16,fp,800e358 <___svfiprintf_internal_r+0x4b4>
 800df3c:	80800003 	ldbu	r2,0(r16)
 800df40:	10803fcc 	andi	r2,r2,255
 800df44:	1080201c 	xori	r2,r2,128
 800df48:	10bfe004 	addi	r2,r2,-128
 800df4c:	1000e426 	beq	r2,zero,800e2e0 <___svfiprintf_internal_r+0x43c>
 800df50:	80800047 	ldb	r2,1(r16)
 800df54:	87000044 	addi	fp,r16,1
 800df58:	d8000845 	stb	zero,33(sp)
 800df5c:	000b883a 	mov	r5,zero
 800df60:	000d883a 	mov	r6,zero
 800df64:	027fffc4 	movi	r9,-1
 800df68:	0021883a 	mov	r16,zero
 800df6c:	0019883a 	mov	r12,zero
 800df70:	e7000044 	addi	fp,fp,1
 800df74:	10fff804 	addi	r3,r2,-32
 800df78:	19001668 	cmpgeui	r4,r3,89
 800df7c:	20006a1e 	bne	r4,zero,800e128 <___svfiprintf_internal_r+0x284>
 800df80:	180690ba 	slli	r3,r3,2
 800df84:	01020074 	movhi	r4,2049
 800df88:	1909883a 	add	r4,r3,r4
 800df8c:	20f7e517 	ldw	r3,-8300(r4)
 800df90:	1800683a 	jmp	r3
 800df94:	0800e7b0 	cmpltui	zero,at,926
 800df98:	0800e128 	cmpgeui	zero,at,900
 800df9c:	0800e128 	cmpgeui	zero,at,900
 800dfa0:	0800e7a4 	muli	zero,at,926
 800dfa4:	0800e128 	cmpgeui	zero,at,900
 800dfa8:	0800e128 	cmpgeui	zero,at,900
 800dfac:	0800e128 	cmpgeui	zero,at,900
 800dfb0:	0800e128 	cmpgeui	zero,at,900
 800dfb4:	0800e128 	cmpgeui	zero,at,900
 800dfb8:	0800e128 	cmpgeui	zero,at,900
 800dfbc:	0800e77c 	xorhi	zero,at,925
 800dfc0:	0800e76c 	andhi	zero,at,925
 800dfc4:	0800e128 	cmpgeui	zero,at,900
 800dfc8:	0800e754 	ori	zero,at,925
 800dfcc:	0800e710 	cmplti	zero,at,924
 800dfd0:	0800e128 	cmpgeui	zero,at,900
 800dfd4:	0800e704 	addi	zero,at,924
 800dfd8:	0800e0f8 	rdprs	zero,at,899
 800dfdc:	0800e0f8 	rdprs	zero,at,899
 800dfe0:	0800e0f8 	rdprs	zero,at,899
 800dfe4:	0800e0f8 	rdprs	zero,at,899
 800dfe8:	0800e0f8 	rdprs	zero,at,899
 800dfec:	0800e0f8 	rdprs	zero,at,899
 800dff0:	0800e0f8 	rdprs	zero,at,899
 800dff4:	0800e0f8 	rdprs	zero,at,899
 800dff8:	0800e0f8 	rdprs	zero,at,899
 800dffc:	0800e128 	cmpgeui	zero,at,900
 800e000:	0800e128 	cmpgeui	zero,at,900
 800e004:	0800e128 	cmpgeui	zero,at,900
 800e008:	0800e128 	cmpgeui	zero,at,900
 800e00c:	0800e128 	cmpgeui	zero,at,900
 800e010:	0800e128 	cmpgeui	zero,at,900
 800e014:	0800e128 	cmpgeui	zero,at,900
 800e018:	0800e128 	cmpgeui	zero,at,900
 800e01c:	0800e128 	cmpgeui	zero,at,900
 800e020:	0800e128 	cmpgeui	zero,at,900
 800e024:	0800e620 	cmpeqi	zero,at,920
 800e028:	0800e128 	cmpgeui	zero,at,900
 800e02c:	0800e128 	cmpgeui	zero,at,900
 800e030:	0800e128 	cmpgeui	zero,at,900
 800e034:	0800e128 	cmpgeui	zero,at,900
 800e038:	0800e128 	cmpgeui	zero,at,900
 800e03c:	0800e128 	cmpgeui	zero,at,900
 800e040:	0800e128 	cmpgeui	zero,at,900
 800e044:	0800e128 	cmpgeui	zero,at,900
 800e048:	0800e128 	cmpgeui	zero,at,900
 800e04c:	0800e128 	cmpgeui	zero,at,900
 800e050:	0800e328 	cmpgeui	zero,at,908
 800e054:	0800e128 	cmpgeui	zero,at,900
 800e058:	0800e128 	cmpgeui	zero,at,900
 800e05c:	0800e128 	cmpgeui	zero,at,900
 800e060:	0800e128 	cmpgeui	zero,at,900
 800e064:	0800e128 	cmpgeui	zero,at,900
 800e068:	0800e154 	ori	zero,at,901
 800e06c:	0800e128 	cmpgeui	zero,at,900
 800e070:	0800e128 	cmpgeui	zero,at,900
 800e074:	0800e5d8 	cmpnei	zero,at,919
 800e078:	0800e128 	cmpgeui	zero,at,900
 800e07c:	0800e128 	cmpgeui	zero,at,900
 800e080:	0800e128 	cmpgeui	zero,at,900
 800e084:	0800e128 	cmpgeui	zero,at,900
 800e088:	0800e128 	cmpgeui	zero,at,900
 800e08c:	0800e128 	cmpgeui	zero,at,900
 800e090:	0800e128 	cmpgeui	zero,at,900
 800e094:	0800e128 	cmpgeui	zero,at,900
 800e098:	0800e128 	cmpgeui	zero,at,900
 800e09c:	0800e128 	cmpgeui	zero,at,900
 800e0a0:	0800e5b0 	cmpltui	zero,at,918
 800e0a4:	0800e4d0 	cmplti	zero,at,915
 800e0a8:	0800e128 	cmpgeui	zero,at,900
 800e0ac:	0800e128 	cmpgeui	zero,at,900
 800e0b0:	0800e128 	cmpgeui	zero,at,900
 800e0b4:	0800e554 	ori	zero,at,917
 800e0b8:	0800e4d0 	cmplti	zero,at,915
 800e0bc:	0800e128 	cmpgeui	zero,at,900
 800e0c0:	0800e128 	cmpgeui	zero,at,900
 800e0c4:	0800e59c 	xori	zero,at,918
 800e0c8:	0800e128 	cmpgeui	zero,at,900
 800e0cc:	0800e560 	cmpeqi	zero,at,917
 800e0d0:	0800e32c 	andhi	zero,at,908
 800e0d4:	0800e888 	cmpgei	zero,at,930
 800e0d8:	0800e87c 	xorhi	zero,at,929
 800e0dc:	0800e128 	cmpgeui	zero,at,900
 800e0e0:	0800e824 	muli	zero,at,928
 800e0e4:	0800e128 	cmpgeui	zero,at,900
 800e0e8:	0800e158 	cmpnei	zero,at,901
 800e0ec:	0800e128 	cmpgeui	zero,at,900
 800e0f0:	0800e128 	cmpgeui	zero,at,900
 800e0f4:	0800e7dc 	xori	zero,at,927
 800e0f8:	0021883a 	mov	r16,zero
 800e0fc:	10fff404 	addi	r3,r2,-48
 800e100:	e0800007 	ldb	r2,0(fp)
 800e104:	840002a4 	muli	r16,r16,10
 800e108:	e7000044 	addi	fp,fp,1
 800e10c:	1c21883a 	add	r16,r3,r16
 800e110:	10fff404 	addi	r3,r2,-48
 800e114:	190002b0 	cmpltui	r4,r3,10
 800e118:	203ff91e 	bne	r4,zero,800e100 <___svfiprintf_internal_r+0x25c>
 800e11c:	10fff804 	addi	r3,r2,-32
 800e120:	19001668 	cmpgeui	r4,r3,89
 800e124:	203f9626 	beq	r4,zero,800df80 <___svfiprintf_internal_r+0xdc>
 800e128:	29403fcc 	andi	r5,r5,255
 800e12c:	2803691e 	bne	r5,zero,800eed4 <___svfiprintf_internal_r+0x1030>
 800e130:	10006b26 	beq	r2,zero,800e2e0 <___svfiprintf_internal_r+0x43c>
 800e134:	d8800c05 	stb	r2,48(sp)
 800e138:	d8000845 	stb	zero,33(sp)
 800e13c:	04c00044 	movi	r19,1
 800e140:	05800044 	movi	r22,1
 800e144:	ddc00c04 	addi	r23,sp,48
 800e148:	6023883a 	mov	r17,r12
 800e14c:	0013883a 	mov	r9,zero
 800e150:	00002006 	br	800e1d4 <___svfiprintf_internal_r+0x330>
 800e154:	63000414 	ori	r12,r12,16
 800e158:	6080080c 	andi	r2,r12,32
 800e15c:	1000a126 	beq	r2,zero,800e3e4 <___svfiprintf_internal_r+0x540>
 800e160:	d8c00317 	ldw	r3,12(sp)
 800e164:	00800044 	movi	r2,1
 800e168:	1cc00017 	ldw	r19,0(r3)
 800e16c:	1d800117 	ldw	r22,4(r3)
 800e170:	18c00204 	addi	r3,r3,8
 800e174:	d8c00315 	stw	r3,12(sp)
 800e178:	d8000845 	stb	zero,33(sp)
 800e17c:	48ffffe0 	cmpeqi	r3,r9,-1
 800e180:	001b883a 	mov	r13,zero
 800e184:	1801411e 	bne	r3,zero,800e68c <___svfiprintf_internal_r+0x7e8>
 800e188:	047fdfc4 	movi	r17,-129
 800e18c:	9d86b03a 	or	r3,r19,r22
 800e190:	6462703a 	and	r17,r12,r17
 800e194:	1802691e 	bne	r3,zero,800eb3c <___svfiprintf_internal_r+0xc98>
 800e198:	4803131e 	bne	r9,zero,800ede8 <___svfiprintf_internal_r+0xf44>
 800e19c:	1002c61e 	bne	r2,zero,800ecb8 <___svfiprintf_internal_r+0xe14>
 800e1a0:	6580004c 	andi	r22,r12,1
 800e1a4:	b002c726 	beq	r22,zero,800ecc4 <___svfiprintf_internal_r+0xe20>
 800e1a8:	00800c04 	movi	r2,48
 800e1ac:	d88015c5 	stb	r2,87(sp)
 800e1b0:	ddc015c4 	addi	r23,sp,87
 800e1b4:	4827883a 	mov	r19,r9
 800e1b8:	4d80010e 	bge	r9,r22,800e1c0 <___svfiprintf_internal_r+0x31c>
 800e1bc:	b027883a 	mov	r19,r22
 800e1c0:	6b403fcc 	andi	r13,r13,255
 800e1c4:	6b40201c 	xori	r13,r13,128
 800e1c8:	6b7fe004 	addi	r13,r13,-128
 800e1cc:	68000126 	beq	r13,zero,800e1d4 <___svfiprintf_internal_r+0x330>
 800e1d0:	9cc00044 	addi	r19,r19,1
 800e1d4:	8b40008c 	andi	r13,r17,2
 800e1d8:	68000126 	beq	r13,zero,800e1e0 <___svfiprintf_internal_r+0x33c>
 800e1dc:	9cc00084 	addi	r19,r19,2
 800e1e0:	8b00210c 	andi	r12,r17,132
 800e1e4:	d8800b17 	ldw	r2,44(sp)
 800e1e8:	d9000a17 	ldw	r4,40(sp)
 800e1ec:	6000021e 	bne	r12,zero,800e1f8 <___svfiprintf_internal_r+0x354>
 800e1f0:	84c7c83a 	sub	r3,r16,r19
 800e1f4:	00c25316 	blt	zero,r3,800eb44 <___svfiprintf_internal_r+0xca0>
 800e1f8:	d9800847 	ldb	r6,33(sp)
 800e1fc:	21400044 	addi	r5,r4,1
 800e200:	40c00204 	addi	r3,r8,8
 800e204:	30000f26 	beq	r6,zero,800e244 <___svfiprintf_internal_r+0x3a0>
 800e208:	d9800844 	addi	r6,sp,33
 800e20c:	10800044 	addi	r2,r2,1
 800e210:	41800015 	stw	r6,0(r8)
 800e214:	01800044 	movi	r6,1
 800e218:	41800115 	stw	r6,4(r8)
 800e21c:	d8800b15 	stw	r2,44(sp)
 800e220:	d9400a15 	stw	r5,40(sp)
 800e224:	29800208 	cmpgei	r6,r5,8
 800e228:	3002781e 	bne	r6,zero,800ec0c <___svfiprintf_internal_r+0xd68>
 800e22c:	21c00084 	addi	r7,r4,2
 800e230:	41800404 	addi	r6,r8,16
 800e234:	2809883a 	mov	r4,r5
 800e238:	1811883a 	mov	r8,r3
 800e23c:	380b883a 	mov	r5,r7
 800e240:	3007883a 	mov	r3,r6
 800e244:	68000d26 	beq	r13,zero,800e27c <___svfiprintf_internal_r+0x3d8>
 800e248:	d9000884 	addi	r4,sp,34
 800e24c:	10800084 	addi	r2,r2,2
 800e250:	41000015 	stw	r4,0(r8)
 800e254:	01000084 	movi	r4,2
 800e258:	41000115 	stw	r4,4(r8)
 800e25c:	d8800b15 	stw	r2,44(sp)
 800e260:	d9400a15 	stw	r5,40(sp)
 800e264:	29000208 	cmpgei	r4,r5,8
 800e268:	2002791e 	bne	r4,zero,800ec50 <___svfiprintf_internal_r+0xdac>
 800e26c:	2809883a 	mov	r4,r5
 800e270:	1811883a 	mov	r8,r3
 800e274:	29400044 	addi	r5,r5,1
 800e278:	18c00204 	addi	r3,r3,8
 800e27c:	63002018 	cmpnei	r12,r12,128
 800e280:	6001bd26 	beq	r12,zero,800e978 <___svfiprintf_internal_r+0xad4>
 800e284:	4d93c83a 	sub	r9,r9,r22
 800e288:	0241ef16 	blt	zero,r9,800ea48 <___svfiprintf_internal_r+0xba4>
 800e28c:	b085883a 	add	r2,r22,r2
 800e290:	45c00015 	stw	r23,0(r8)
 800e294:	45800115 	stw	r22,4(r8)
 800e298:	d8800b15 	stw	r2,44(sp)
 800e29c:	d9400a15 	stw	r5,40(sp)
 800e2a0:	29000210 	cmplti	r4,r5,8
 800e2a4:	20021726 	beq	r4,zero,800eb04 <___svfiprintf_internal_r+0xc60>
 800e2a8:	8c40010c 	andi	r17,r17,4
 800e2ac:	88000226 	beq	r17,zero,800e2b8 <___svfiprintf_internal_r+0x414>
 800e2b0:	84e3c83a 	sub	r17,r16,r19
 800e2b4:	04405716 	blt	zero,r17,800e414 <___svfiprintf_internal_r+0x570>
 800e2b8:	84c0010e 	bge	r16,r19,800e2c0 <___svfiprintf_internal_r+0x41c>
 800e2bc:	9821883a 	mov	r16,r19
 800e2c0:	d8c00017 	ldw	r3,0(sp)
 800e2c4:	1c07883a 	add	r3,r3,r16
 800e2c8:	d8c00015 	stw	r3,0(sp)
 800e2cc:	1002151e 	bne	r2,zero,800eb24 <___svfiprintf_internal_r+0xc80>
 800e2d0:	e0800007 	ldb	r2,0(fp)
 800e2d4:	d8000a15 	stw	zero,40(sp)
 800e2d8:	9011883a 	mov	r8,r18
 800e2dc:	103f0e1e 	bne	r2,zero,800df18 <___svfiprintf_internal_r+0x74>
 800e2e0:	d8800b17 	ldw	r2,44(sp)
 800e2e4:	1002fd1e 	bne	r2,zero,800eedc <___svfiprintf_internal_r+0x1038>
 800e2e8:	a080030b 	ldhu	r2,12(r20)
 800e2ec:	1080100c 	andi	r2,r2,64
 800e2f0:	1003111e 	bne	r2,zero,800ef38 <___svfiprintf_internal_r+0x1094>
 800e2f4:	d8800017 	ldw	r2,0(sp)
 800e2f8:	dfc02f17 	ldw	ra,188(sp)
 800e2fc:	df002e17 	ldw	fp,184(sp)
 800e300:	ddc02d17 	ldw	r23,180(sp)
 800e304:	dd802c17 	ldw	r22,176(sp)
 800e308:	dd402b17 	ldw	r21,172(sp)
 800e30c:	dd002a17 	ldw	r20,168(sp)
 800e310:	dcc02917 	ldw	r19,164(sp)
 800e314:	dc802817 	ldw	r18,160(sp)
 800e318:	dc402717 	ldw	r17,156(sp)
 800e31c:	dc002617 	ldw	r16,152(sp)
 800e320:	dec03004 	addi	sp,sp,192
 800e324:	f800283a 	ret
 800e328:	63000414 	ori	r12,r12,16
 800e32c:	6080080c 	andi	r2,r12,32
 800e330:	10002026 	beq	r2,zero,800e3b4 <___svfiprintf_internal_r+0x510>
 800e334:	d8c00317 	ldw	r3,12(sp)
 800e338:	0005883a 	mov	r2,zero
 800e33c:	1cc00017 	ldw	r19,0(r3)
 800e340:	1d800117 	ldw	r22,4(r3)
 800e344:	18c00204 	addi	r3,r3,8
 800e348:	d8c00315 	stw	r3,12(sp)
 800e34c:	003f8a06 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800e350:	8723c83a 	sub	r17,r16,fp
 800e354:	873fe226 	beq	r16,fp,800e2e0 <___svfiprintf_internal_r+0x43c>
 800e358:	d8c00b17 	ldw	r3,44(sp)
 800e35c:	d8800a17 	ldw	r2,40(sp)
 800e360:	47000015 	stw	fp,0(r8)
 800e364:	1c47883a 	add	r3,r3,r17
 800e368:	10800044 	addi	r2,r2,1
 800e36c:	d8800a15 	stw	r2,40(sp)
 800e370:	44400115 	stw	r17,4(r8)
 800e374:	d8c00b15 	stw	r3,44(sp)
 800e378:	10800208 	cmpgei	r2,r2,8
 800e37c:	1000061e 	bne	r2,zero,800e398 <___svfiprintf_internal_r+0x4f4>
 800e380:	42000204 	addi	r8,r8,8
 800e384:	d8c00017 	ldw	r3,0(sp)
 800e388:	80800003 	ldbu	r2,0(r16)
 800e38c:	1c47883a 	add	r3,r3,r17
 800e390:	d8c00015 	stw	r3,0(sp)
 800e394:	003eea06 	br	800df40 <___svfiprintf_internal_r+0x9c>
 800e398:	d9800904 	addi	r6,sp,36
 800e39c:	a00b883a 	mov	r5,r20
 800e3a0:	a809883a 	mov	r4,r21
 800e3a4:	800dce40 	call	800dce4 <__ssprint_r>
 800e3a8:	103fcf1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800e3ac:	9011883a 	mov	r8,r18
 800e3b0:	003ff406 	br	800e384 <___svfiprintf_internal_r+0x4e0>
 800e3b4:	d9000317 	ldw	r4,12(sp)
 800e3b8:	6080040c 	andi	r2,r12,16
 800e3bc:	20c00104 	addi	r3,r4,4
 800e3c0:	1002531e 	bne	r2,zero,800ed10 <___svfiprintf_internal_r+0xe6c>
 800e3c4:	6080100c 	andi	r2,r12,64
 800e3c8:	1002b926 	beq	r2,zero,800eeb0 <___svfiprintf_internal_r+0x100c>
 800e3cc:	d8800317 	ldw	r2,12(sp)
 800e3d0:	002d883a 	mov	r22,zero
 800e3d4:	d8c00315 	stw	r3,12(sp)
 800e3d8:	14c0000b 	ldhu	r19,0(r2)
 800e3dc:	0005883a 	mov	r2,zero
 800e3e0:	003f6506 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800e3e4:	d9000317 	ldw	r4,12(sp)
 800e3e8:	6080040c 	andi	r2,r12,16
 800e3ec:	20c00104 	addi	r3,r4,4
 800e3f0:	1002421e 	bne	r2,zero,800ecfc <___svfiprintf_internal_r+0xe58>
 800e3f4:	6080100c 	andi	r2,r12,64
 800e3f8:	10029c26 	beq	r2,zero,800ee6c <___svfiprintf_internal_r+0xfc8>
 800e3fc:	d8800317 	ldw	r2,12(sp)
 800e400:	002d883a 	mov	r22,zero
 800e404:	d8c00315 	stw	r3,12(sp)
 800e408:	14c0000b 	ldhu	r19,0(r2)
 800e40c:	00800044 	movi	r2,1
 800e410:	003f5906 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800e414:	01c20174 	movhi	r7,2053
 800e418:	89400450 	cmplti	r5,r17,17
 800e41c:	d9000a17 	ldw	r4,40(sp)
 800e420:	39c1e804 	addi	r7,r7,1952
 800e424:	05800404 	movi	r22,16
 800e428:	28000526 	beq	r5,zero,800e440 <___svfiprintf_internal_r+0x59c>
 800e42c:	00001906 	br	800e494 <___svfiprintf_internal_r+0x5f0>
 800e430:	8c7ffc04 	addi	r17,r17,-16
 800e434:	89400448 	cmpgei	r5,r17,17
 800e438:	18c00204 	addi	r3,r3,8
 800e43c:	28001526 	beq	r5,zero,800e494 <___svfiprintf_internal_r+0x5f0>
 800e440:	21000044 	addi	r4,r4,1
 800e444:	10800404 	addi	r2,r2,16
 800e448:	19c00015 	stw	r7,0(r3)
 800e44c:	1d800115 	stw	r22,4(r3)
 800e450:	d8800b15 	stw	r2,44(sp)
 800e454:	d9000a15 	stw	r4,40(sp)
 800e458:	21400208 	cmpgei	r5,r4,8
 800e45c:	283ff426 	beq	r5,zero,800e430 <___svfiprintf_internal_r+0x58c>
 800e460:	d9800904 	addi	r6,sp,36
 800e464:	a00b883a 	mov	r5,r20
 800e468:	a809883a 	mov	r4,r21
 800e46c:	d9c00115 	stw	r7,4(sp)
 800e470:	800dce40 	call	800dce4 <__ssprint_r>
 800e474:	103f9c1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800e478:	8c7ffc04 	addi	r17,r17,-16
 800e47c:	89400448 	cmpgei	r5,r17,17
 800e480:	d8800b17 	ldw	r2,44(sp)
 800e484:	d9000a17 	ldw	r4,40(sp)
 800e488:	d9c00117 	ldw	r7,4(sp)
 800e48c:	9007883a 	mov	r3,r18
 800e490:	283feb1e 	bne	r5,zero,800e440 <___svfiprintf_internal_r+0x59c>
 800e494:	21000044 	addi	r4,r4,1
 800e498:	1445883a 	add	r2,r2,r17
 800e49c:	d9000a15 	stw	r4,40(sp)
 800e4a0:	19c00015 	stw	r7,0(r3)
 800e4a4:	1c400115 	stw	r17,4(r3)
 800e4a8:	d8800b15 	stw	r2,44(sp)
 800e4ac:	21000210 	cmplti	r4,r4,8
 800e4b0:	203f811e 	bne	r4,zero,800e2b8 <___svfiprintf_internal_r+0x414>
 800e4b4:	d9800904 	addi	r6,sp,36
 800e4b8:	a00b883a 	mov	r5,r20
 800e4bc:	a809883a 	mov	r4,r21
 800e4c0:	800dce40 	call	800dce4 <__ssprint_r>
 800e4c4:	103f881e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800e4c8:	d8800b17 	ldw	r2,44(sp)
 800e4cc:	003f7a06 	br	800e2b8 <___svfiprintf_internal_r+0x414>
 800e4d0:	29403fcc 	andi	r5,r5,255
 800e4d4:	2802901e 	bne	r5,zero,800ef18 <___svfiprintf_internal_r+0x1074>
 800e4d8:	6080080c 	andi	r2,r12,32
 800e4dc:	10005526 	beq	r2,zero,800e634 <___svfiprintf_internal_r+0x790>
 800e4e0:	d8c00317 	ldw	r3,12(sp)
 800e4e4:	18800117 	ldw	r2,4(r3)
 800e4e8:	1cc00017 	ldw	r19,0(r3)
 800e4ec:	18c00204 	addi	r3,r3,8
 800e4f0:	d8c00315 	stw	r3,12(sp)
 800e4f4:	102d883a 	mov	r22,r2
 800e4f8:	10005a16 	blt	r2,zero,800e664 <___svfiprintf_internal_r+0x7c0>
 800e4fc:	48bfffd8 	cmpnei	r2,r9,-1
 800e500:	10000a26 	beq	r2,zero,800e52c <___svfiprintf_internal_r+0x688>
 800e504:	00ffdfc4 	movi	r3,-129
 800e508:	9d84b03a 	or	r2,r19,r22
 800e50c:	db400843 	ldbu	r13,33(sp)
 800e510:	60d8703a 	and	r12,r12,r3
 800e514:	1000061e 	bne	r2,zero,800e530 <___svfiprintf_internal_r+0x68c>
 800e518:	4800081e 	bne	r9,zero,800e53c <___svfiprintf_internal_r+0x698>
 800e51c:	002d883a 	mov	r22,zero
 800e520:	6023883a 	mov	r17,r12
 800e524:	902f883a 	mov	r23,r18
 800e528:	003f2206 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800e52c:	db400843 	ldbu	r13,33(sp)
 800e530:	b000e41e 	bne	r22,zero,800e8c4 <___svfiprintf_internal_r+0xa20>
 800e534:	988002a8 	cmpgeui	r2,r19,10
 800e538:	1000e21e 	bne	r2,zero,800e8c4 <___svfiprintf_internal_r+0xa20>
 800e53c:	9cc00c04 	addi	r19,r19,48
 800e540:	dcc015c5 	stb	r19,87(sp)
 800e544:	6023883a 	mov	r17,r12
 800e548:	05800044 	movi	r22,1
 800e54c:	ddc015c4 	addi	r23,sp,87
 800e550:	003f1806 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800e554:	e0800007 	ldb	r2,0(fp)
 800e558:	63001014 	ori	r12,r12,64
 800e55c:	003e8406 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e560:	29403fcc 	andi	r5,r5,255
 800e564:	2802681e 	bne	r5,zero,800ef08 <___svfiprintf_internal_r+0x1064>
 800e568:	d9000317 	ldw	r4,12(sp)
 800e56c:	6080080c 	andi	r2,r12,32
 800e570:	20c00017 	ldw	r3,0(r4)
 800e574:	25c00104 	addi	r23,r4,4
 800e578:	1001da1e 	bne	r2,zero,800ece4 <___svfiprintf_internal_r+0xe40>
 800e57c:	6080040c 	andi	r2,r12,16
 800e580:	1002031e 	bne	r2,zero,800ed90 <___svfiprintf_internal_r+0xeec>
 800e584:	6300100c 	andi	r12,r12,64
 800e588:	60020126 	beq	r12,zero,800ed90 <___svfiprintf_internal_r+0xeec>
 800e58c:	d8800017 	ldw	r2,0(sp)
 800e590:	ddc00315 	stw	r23,12(sp)
 800e594:	1880000d 	sth	r2,0(r3)
 800e598:	003e5d06 	br	800df10 <___svfiprintf_internal_r+0x6c>
 800e59c:	e0800007 	ldb	r2,0(fp)
 800e5a0:	10c01b18 	cmpnei	r3,r2,108
 800e5a4:	18022126 	beq	r3,zero,800ee2c <___svfiprintf_internal_r+0xf88>
 800e5a8:	63000414 	ori	r12,r12,16
 800e5ac:	003e7006 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e5b0:	d8c00317 	ldw	r3,12(sp)
 800e5b4:	d8000845 	stb	zero,33(sp)
 800e5b8:	04c00044 	movi	r19,1
 800e5bc:	18800017 	ldw	r2,0(r3)
 800e5c0:	18c00104 	addi	r3,r3,4
 800e5c4:	d8c00315 	stw	r3,12(sp)
 800e5c8:	d8800c05 	stb	r2,48(sp)
 800e5cc:	05800044 	movi	r22,1
 800e5d0:	ddc00c04 	addi	r23,sp,48
 800e5d4:	003edc06 	br	800e148 <___svfiprintf_internal_r+0x2a4>
 800e5d8:	29403fcc 	andi	r5,r5,255
 800e5dc:	28024c1e 	bne	r5,zero,800ef10 <___svfiprintf_internal_r+0x106c>
 800e5e0:	00c20174 	movhi	r3,2053
 800e5e4:	18c15704 	addi	r3,r3,1372
 800e5e8:	d8c00415 	stw	r3,16(sp)
 800e5ec:	60c0080c 	andi	r3,r12,32
 800e5f0:	18008126 	beq	r3,zero,800e7f8 <___svfiprintf_internal_r+0x954>
 800e5f4:	d8c00317 	ldw	r3,12(sp)
 800e5f8:	1cc00017 	ldw	r19,0(r3)
 800e5fc:	1d800117 	ldw	r22,4(r3)
 800e600:	18c00204 	addi	r3,r3,8
 800e604:	d8c00315 	stw	r3,12(sp)
 800e608:	60c0004c 	andi	r3,r12,1
 800e60c:	18000226 	beq	r3,zero,800e618 <___svfiprintf_internal_r+0x774>
 800e610:	9d86b03a 	or	r3,r19,r22
 800e614:	1801ad1e 	bne	r3,zero,800eccc <___svfiprintf_internal_r+0xe28>
 800e618:	00800084 	movi	r2,2
 800e61c:	003ed606 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800e620:	29403fcc 	andi	r5,r5,255
 800e624:	28023e1e 	bne	r5,zero,800ef20 <___svfiprintf_internal_r+0x107c>
 800e628:	63000414 	ori	r12,r12,16
 800e62c:	6080080c 	andi	r2,r12,32
 800e630:	103fab1e 	bne	r2,zero,800e4e0 <___svfiprintf_internal_r+0x63c>
 800e634:	d9000317 	ldw	r4,12(sp)
 800e638:	6080040c 	andi	r2,r12,16
 800e63c:	20c00104 	addi	r3,r4,4
 800e640:	1001bc1e 	bne	r2,zero,800ed34 <___svfiprintf_internal_r+0xe90>
 800e644:	6080100c 	andi	r2,r12,64
 800e648:	10021326 	beq	r2,zero,800ee98 <___svfiprintf_internal_r+0xff4>
 800e64c:	d8800317 	ldw	r2,12(sp)
 800e650:	d8c00315 	stw	r3,12(sp)
 800e654:	14c0000f 	ldh	r19,0(r2)
 800e658:	982dd7fa 	srai	r22,r19,31
 800e65c:	b005883a 	mov	r2,r22
 800e660:	103fa60e 	bge	r2,zero,800e4fc <___svfiprintf_internal_r+0x658>
 800e664:	9804c03a 	cmpne	r2,r19,zero
 800e668:	05adc83a 	sub	r22,zero,r22
 800e66c:	b0adc83a 	sub	r22,r22,r2
 800e670:	00800b44 	movi	r2,45
 800e674:	d8800845 	stb	r2,33(sp)
 800e678:	48ffffe0 	cmpeqi	r3,r9,-1
 800e67c:	04e7c83a 	sub	r19,zero,r19
 800e680:	03400b44 	movi	r13,45
 800e684:	00800044 	movi	r2,1
 800e688:	183ebf26 	beq	r3,zero,800e188 <___svfiprintf_internal_r+0x2e4>
 800e68c:	10c00060 	cmpeqi	r3,r2,1
 800e690:	183fa71e 	bne	r3,zero,800e530 <___svfiprintf_internal_r+0x68c>
 800e694:	108000a0 	cmpeqi	r2,r2,2
 800e698:	902f883a 	mov	r23,r18
 800e69c:	1000a91e 	bne	r2,zero,800e944 <___svfiprintf_internal_r+0xaa0>
 800e6a0:	b006977a 	slli	r3,r22,29
 800e6a4:	9804d0fa 	srli	r2,r19,3
 800e6a8:	b02cd0fa 	srli	r22,r22,3
 800e6ac:	990001cc 	andi	r4,r19,7
 800e6b0:	21000c04 	addi	r4,r4,48
 800e6b4:	18a6b03a 	or	r19,r3,r2
 800e6b8:	b93fffc5 	stb	r4,-1(r23)
 800e6bc:	9d84b03a 	or	r2,r19,r22
 800e6c0:	b80b883a 	mov	r5,r23
 800e6c4:	bdffffc4 	addi	r23,r23,-1
 800e6c8:	103ff51e 	bne	r2,zero,800e6a0 <___svfiprintf_internal_r+0x7fc>
 800e6cc:	6080004c 	andi	r2,r12,1
 800e6d0:	10009926 	beq	r2,zero,800e938 <___svfiprintf_internal_r+0xa94>
 800e6d4:	21003fcc 	andi	r4,r4,255
 800e6d8:	2100201c 	xori	r4,r4,128
 800e6dc:	213fe004 	addi	r4,r4,-128
 800e6e0:	20800c18 	cmpnei	r2,r4,48
 800e6e4:	10009426 	beq	r2,zero,800e938 <___svfiprintf_internal_r+0xa94>
 800e6e8:	297fff84 	addi	r5,r5,-2
 800e6ec:	00800c04 	movi	r2,48
 800e6f0:	b8bfffc5 	stb	r2,-1(r23)
 800e6f4:	916dc83a 	sub	r22,r18,r5
 800e6f8:	6023883a 	mov	r17,r12
 800e6fc:	282f883a 	mov	r23,r5
 800e700:	003eac06 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800e704:	e0800007 	ldb	r2,0(fp)
 800e708:	63002014 	ori	r12,r12,128
 800e70c:	003e1806 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e710:	e0800007 	ldb	r2,0(fp)
 800e714:	e1000044 	addi	r4,fp,1
 800e718:	10c00aa0 	cmpeqi	r3,r2,42
 800e71c:	1802091e 	bne	r3,zero,800ef44 <___svfiprintf_internal_r+0x10a0>
 800e720:	10fff404 	addi	r3,r2,-48
 800e724:	19c002b0 	cmpltui	r7,r3,10
 800e728:	2039883a 	mov	fp,r4
 800e72c:	0013883a 	mov	r9,zero
 800e730:	383e1026 	beq	r7,zero,800df74 <___svfiprintf_internal_r+0xd0>
 800e734:	e0800007 	ldb	r2,0(fp)
 800e738:	4a4002a4 	muli	r9,r9,10
 800e73c:	e7000044 	addi	fp,fp,1
 800e740:	48d3883a 	add	r9,r9,r3
 800e744:	10fff404 	addi	r3,r2,-48
 800e748:	190002b0 	cmpltui	r4,r3,10
 800e74c:	203ff91e 	bne	r4,zero,800e734 <___svfiprintf_internal_r+0x890>
 800e750:	003e0806 	br	800df74 <___svfiprintf_internal_r+0xd0>
 800e754:	e0800003 	ldbu	r2,0(fp)
 800e758:	10803fcc 	andi	r2,r2,255
 800e75c:	1080201c 	xori	r2,r2,128
 800e760:	63000114 	ori	r12,r12,4
 800e764:	10bfe004 	addi	r2,r2,-128
 800e768:	003e0106 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e76c:	e0800007 	ldb	r2,0(fp)
 800e770:	01400044 	movi	r5,1
 800e774:	01800ac4 	movi	r6,43
 800e778:	003dfd06 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e77c:	d8c00317 	ldw	r3,12(sp)
 800e780:	e0800003 	ldbu	r2,0(fp)
 800e784:	1c000017 	ldw	r16,0(r3)
 800e788:	1dc00104 	addi	r23,r3,4
 800e78c:	80019316 	blt	r16,zero,800eddc <___svfiprintf_internal_r+0xf38>
 800e790:	ddc00315 	stw	r23,12(sp)
 800e794:	10803fcc 	andi	r2,r2,255
 800e798:	1080201c 	xori	r2,r2,128
 800e79c:	10bfe004 	addi	r2,r2,-128
 800e7a0:	003df306 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e7a4:	e0800007 	ldb	r2,0(fp)
 800e7a8:	63000054 	ori	r12,r12,1
 800e7ac:	003df006 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e7b0:	30c03fcc 	andi	r3,r6,255
 800e7b4:	18c0201c 	xori	r3,r3,128
 800e7b8:	18ffe004 	addi	r3,r3,-128
 800e7bc:	e0800003 	ldbu	r2,0(fp)
 800e7c0:	183ff41e 	bne	r3,zero,800e794 <___svfiprintf_internal_r+0x8f0>
 800e7c4:	10803fcc 	andi	r2,r2,255
 800e7c8:	1080201c 	xori	r2,r2,128
 800e7cc:	01400044 	movi	r5,1
 800e7d0:	01800804 	movi	r6,32
 800e7d4:	10bfe004 	addi	r2,r2,-128
 800e7d8:	003de506 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e7dc:	29403fcc 	andi	r5,r5,255
 800e7e0:	2801c71e 	bne	r5,zero,800ef00 <___svfiprintf_internal_r+0x105c>
 800e7e4:	00c20174 	movhi	r3,2053
 800e7e8:	18c15c04 	addi	r3,r3,1392
 800e7ec:	d8c00415 	stw	r3,16(sp)
 800e7f0:	60c0080c 	andi	r3,r12,32
 800e7f4:	183f7f1e 	bne	r3,zero,800e5f4 <___svfiprintf_internal_r+0x750>
 800e7f8:	d9400317 	ldw	r5,12(sp)
 800e7fc:	60c0040c 	andi	r3,r12,16
 800e800:	29000104 	addi	r4,r5,4
 800e804:	1801471e 	bne	r3,zero,800ed24 <___svfiprintf_internal_r+0xe80>
 800e808:	60c0100c 	andi	r3,r12,64
 800e80c:	18019d26 	beq	r3,zero,800ee84 <___svfiprintf_internal_r+0xfe0>
 800e810:	d8c00317 	ldw	r3,12(sp)
 800e814:	002d883a 	mov	r22,zero
 800e818:	d9000315 	stw	r4,12(sp)
 800e81c:	1cc0000b 	ldhu	r19,0(r3)
 800e820:	003f7906 	br	800e608 <___svfiprintf_internal_r+0x764>
 800e824:	d8800317 	ldw	r2,12(sp)
 800e828:	d8000845 	stb	zero,33(sp)
 800e82c:	15c00017 	ldw	r23,0(r2)
 800e830:	14400104 	addi	r17,r2,4
 800e834:	b8018426 	beq	r23,zero,800ee48 <___svfiprintf_internal_r+0xfa4>
 800e838:	48bfffe0 	cmpeqi	r2,r9,-1
 800e83c:	1001421e 	bne	r2,zero,800ed48 <___svfiprintf_internal_r+0xea4>
 800e840:	480d883a 	mov	r6,r9
 800e844:	000b883a 	mov	r5,zero
 800e848:	b809883a 	mov	r4,r23
 800e84c:	da000315 	stw	r8,12(sp)
 800e850:	db000215 	stw	r12,8(sp)
 800e854:	da400115 	stw	r9,4(sp)
 800e858:	800c11c0 	call	800c11c <memchr>
 800e85c:	da400117 	ldw	r9,4(sp)
 800e860:	db000217 	ldw	r12,8(sp)
 800e864:	da000317 	ldw	r8,12(sp)
 800e868:	1001a126 	beq	r2,zero,800eef0 <___svfiprintf_internal_r+0x104c>
 800e86c:	15edc83a 	sub	r22,r2,r23
 800e870:	b027883a 	mov	r19,r22
 800e874:	dc400315 	stw	r17,12(sp)
 800e878:	003e3306 	br	800e148 <___svfiprintf_internal_r+0x2a4>
 800e87c:	e0800007 	ldb	r2,0(fp)
 800e880:	63000814 	ori	r12,r12,32
 800e884:	003dba06 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800e888:	d8c00317 	ldw	r3,12(sp)
 800e88c:	00800c04 	movi	r2,48
 800e890:	d8800885 	stb	r2,34(sp)
 800e894:	00801e04 	movi	r2,120
 800e898:	01020174 	movhi	r4,2053
 800e89c:	d88008c5 	stb	r2,35(sp)
 800e8a0:	18800104 	addi	r2,r3,4
 800e8a4:	d8800315 	stw	r2,12(sp)
 800e8a8:	20815c04 	addi	r2,r4,1392
 800e8ac:	d8800415 	stw	r2,16(sp)
 800e8b0:	1cc00017 	ldw	r19,0(r3)
 800e8b4:	002d883a 	mov	r22,zero
 800e8b8:	63000094 	ori	r12,r12,2
 800e8bc:	00800084 	movi	r2,2
 800e8c0:	003e2d06 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800e8c4:	902f883a 	mov	r23,r18
 800e8c8:	9809883a 	mov	r4,r19
 800e8cc:	b00b883a 	mov	r5,r22
 800e8d0:	01800284 	movi	r6,10
 800e8d4:	000f883a 	mov	r7,zero
 800e8d8:	db400615 	stw	r13,24(sp)
 800e8dc:	da000515 	stw	r8,20(sp)
 800e8e0:	da400215 	stw	r9,8(sp)
 800e8e4:	db000115 	stw	r12,4(sp)
 800e8e8:	80119b40 	call	80119b4 <__umoddi3>
 800e8ec:	10800c04 	addi	r2,r2,48
 800e8f0:	9809883a 	mov	r4,r19
 800e8f4:	b00b883a 	mov	r5,r22
 800e8f8:	b8bfffc5 	stb	r2,-1(r23)
 800e8fc:	01800284 	movi	r6,10
 800e900:	000f883a 	mov	r7,zero
 800e904:	80114240 	call	8011424 <__udivdi3>
 800e908:	b009883a 	mov	r4,r22
 800e90c:	980b883a 	mov	r5,r19
 800e910:	db000117 	ldw	r12,4(sp)
 800e914:	da400217 	ldw	r9,8(sp)
 800e918:	da000517 	ldw	r8,20(sp)
 800e91c:	db400617 	ldw	r13,24(sp)
 800e920:	bdffffc4 	addi	r23,r23,-1
 800e924:	1027883a 	mov	r19,r2
 800e928:	182d883a 	mov	r22,r3
 800e92c:	203fe61e 	bne	r4,zero,800e8c8 <___svfiprintf_internal_r+0xa24>
 800e930:	294002a8 	cmpgeui	r5,r5,10
 800e934:	283fe41e 	bne	r5,zero,800e8c8 <___svfiprintf_internal_r+0xa24>
 800e938:	95edc83a 	sub	r22,r18,r23
 800e93c:	6023883a 	mov	r17,r12
 800e940:	003e1c06 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800e944:	d9000417 	ldw	r4,16(sp)
 800e948:	988003cc 	andi	r2,r19,15
 800e94c:	b006973a 	slli	r3,r22,28
 800e950:	9826d13a 	srli	r19,r19,4
 800e954:	2085883a 	add	r2,r4,r2
 800e958:	10800003 	ldbu	r2,0(r2)
 800e95c:	b02cd13a 	srli	r22,r22,4
 800e960:	1ce6b03a 	or	r19,r3,r19
 800e964:	b8bfffc5 	stb	r2,-1(r23)
 800e968:	9d84b03a 	or	r2,r19,r22
 800e96c:	bdffffc4 	addi	r23,r23,-1
 800e970:	103ff41e 	bne	r2,zero,800e944 <___svfiprintf_internal_r+0xaa0>
 800e974:	003ff006 	br	800e938 <___svfiprintf_internal_r+0xa94>
 800e978:	84d9c83a 	sub	r12,r16,r19
 800e97c:	033e410e 	bge	zero,r12,800e284 <___svfiprintf_internal_r+0x3e0>
 800e980:	61800450 	cmplti	r6,r12,17
 800e984:	01c20174 	movhi	r7,2053
 800e988:	3001671e 	bne	r6,zero,800ef28 <___svfiprintf_internal_r+0x1084>
 800e98c:	39c1e404 	addi	r7,r7,1936
 800e990:	03400404 	movi	r13,16
 800e994:	00000406 	br	800e9a8 <___svfiprintf_internal_r+0xb04>
 800e998:	633ffc04 	addi	r12,r12,-16
 800e99c:	60c00448 	cmpgei	r3,r12,17
 800e9a0:	42000204 	addi	r8,r8,8
 800e9a4:	18001a26 	beq	r3,zero,800ea10 <___svfiprintf_internal_r+0xb6c>
 800e9a8:	21000044 	addi	r4,r4,1
 800e9ac:	10800404 	addi	r2,r2,16
 800e9b0:	41c00015 	stw	r7,0(r8)
 800e9b4:	43400115 	stw	r13,4(r8)
 800e9b8:	d8800b15 	stw	r2,44(sp)
 800e9bc:	d9000a15 	stw	r4,40(sp)
 800e9c0:	20c00208 	cmpgei	r3,r4,8
 800e9c4:	183ff426 	beq	r3,zero,800e998 <___svfiprintf_internal_r+0xaf4>
 800e9c8:	d9800904 	addi	r6,sp,36
 800e9cc:	a00b883a 	mov	r5,r20
 800e9d0:	a809883a 	mov	r4,r21
 800e9d4:	d9c00515 	stw	r7,20(sp)
 800e9d8:	da400215 	stw	r9,8(sp)
 800e9dc:	db000115 	stw	r12,4(sp)
 800e9e0:	800dce40 	call	800dce4 <__ssprint_r>
 800e9e4:	103e401e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800e9e8:	db000117 	ldw	r12,4(sp)
 800e9ec:	d8800b17 	ldw	r2,44(sp)
 800e9f0:	d9000a17 	ldw	r4,40(sp)
 800e9f4:	633ffc04 	addi	r12,r12,-16
 800e9f8:	60c00448 	cmpgei	r3,r12,17
 800e9fc:	d9c00517 	ldw	r7,20(sp)
 800ea00:	da400217 	ldw	r9,8(sp)
 800ea04:	9011883a 	mov	r8,r18
 800ea08:	03400404 	movi	r13,16
 800ea0c:	183fe61e 	bne	r3,zero,800e9a8 <___svfiprintf_internal_r+0xb04>
 800ea10:	21000044 	addi	r4,r4,1
 800ea14:	41800204 	addi	r6,r8,8
 800ea18:	1305883a 	add	r2,r2,r12
 800ea1c:	41c00015 	stw	r7,0(r8)
 800ea20:	43000115 	stw	r12,4(r8)
 800ea24:	d8800b15 	stw	r2,44(sp)
 800ea28:	d9000a15 	stw	r4,40(sp)
 800ea2c:	20c00208 	cmpgei	r3,r4,8
 800ea30:	1800f11e 	bne	r3,zero,800edf8 <___svfiprintf_internal_r+0xf54>
 800ea34:	4d93c83a 	sub	r9,r9,r22
 800ea38:	21400044 	addi	r5,r4,1
 800ea3c:	30c00204 	addi	r3,r6,8
 800ea40:	3011883a 	mov	r8,r6
 800ea44:	027e110e 	bge	zero,r9,800e28c <___svfiprintf_internal_r+0x3e8>
 800ea48:	49800450 	cmplti	r6,r9,17
 800ea4c:	01c20174 	movhi	r7,2053
 800ea50:	30011d1e 	bne	r6,zero,800eec8 <___svfiprintf_internal_r+0x1024>
 800ea54:	39c1e404 	addi	r7,r7,1936
 800ea58:	03000404 	movi	r12,16
 800ea5c:	00000406 	br	800ea70 <___svfiprintf_internal_r+0xbcc>
 800ea60:	4a7ffc04 	addi	r9,r9,-16
 800ea64:	48c00448 	cmpgei	r3,r9,17
 800ea68:	42000204 	addi	r8,r8,8
 800ea6c:	18001826 	beq	r3,zero,800ead0 <___svfiprintf_internal_r+0xc2c>
 800ea70:	21000044 	addi	r4,r4,1
 800ea74:	10800404 	addi	r2,r2,16
 800ea78:	41c00015 	stw	r7,0(r8)
 800ea7c:	43000115 	stw	r12,4(r8)
 800ea80:	d8800b15 	stw	r2,44(sp)
 800ea84:	d9000a15 	stw	r4,40(sp)
 800ea88:	20c00208 	cmpgei	r3,r4,8
 800ea8c:	183ff426 	beq	r3,zero,800ea60 <___svfiprintf_internal_r+0xbbc>
 800ea90:	d9800904 	addi	r6,sp,36
 800ea94:	a00b883a 	mov	r5,r20
 800ea98:	a809883a 	mov	r4,r21
 800ea9c:	d9c00215 	stw	r7,8(sp)
 800eaa0:	da400115 	stw	r9,4(sp)
 800eaa4:	800dce40 	call	800dce4 <__ssprint_r>
 800eaa8:	103e0f1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800eaac:	da400117 	ldw	r9,4(sp)
 800eab0:	d8800b17 	ldw	r2,44(sp)
 800eab4:	d9000a17 	ldw	r4,40(sp)
 800eab8:	4a7ffc04 	addi	r9,r9,-16
 800eabc:	48c00448 	cmpgei	r3,r9,17
 800eac0:	d9c00217 	ldw	r7,8(sp)
 800eac4:	9011883a 	mov	r8,r18
 800eac8:	03000404 	movi	r12,16
 800eacc:	183fe81e 	bne	r3,zero,800ea70 <___svfiprintf_internal_r+0xbcc>
 800ead0:	21400044 	addi	r5,r4,1
 800ead4:	41000204 	addi	r4,r8,8
 800ead8:	1245883a 	add	r2,r2,r9
 800eadc:	41c00015 	stw	r7,0(r8)
 800eae0:	42400115 	stw	r9,4(r8)
 800eae4:	d8800b15 	stw	r2,44(sp)
 800eae8:	d9400a15 	stw	r5,40(sp)
 800eaec:	28c00208 	cmpgei	r3,r5,8
 800eaf0:	1800661e 	bne	r3,zero,800ec8c <___svfiprintf_internal_r+0xde8>
 800eaf4:	29400044 	addi	r5,r5,1
 800eaf8:	20c00204 	addi	r3,r4,8
 800eafc:	2011883a 	mov	r8,r4
 800eb00:	003de206 	br	800e28c <___svfiprintf_internal_r+0x3e8>
 800eb04:	d9800904 	addi	r6,sp,36
 800eb08:	a00b883a 	mov	r5,r20
 800eb0c:	a809883a 	mov	r4,r21
 800eb10:	800dce40 	call	800dce4 <__ssprint_r>
 800eb14:	103df41e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800eb18:	d8800b17 	ldw	r2,44(sp)
 800eb1c:	9007883a 	mov	r3,r18
 800eb20:	003de106 	br	800e2a8 <___svfiprintf_internal_r+0x404>
 800eb24:	d9800904 	addi	r6,sp,36
 800eb28:	a00b883a 	mov	r5,r20
 800eb2c:	a809883a 	mov	r4,r21
 800eb30:	800dce40 	call	800dce4 <__ssprint_r>
 800eb34:	103de626 	beq	r2,zero,800e2d0 <___svfiprintf_internal_r+0x42c>
 800eb38:	003deb06 	br	800e2e8 <___svfiprintf_internal_r+0x444>
 800eb3c:	8819883a 	mov	r12,r17
 800eb40:	003ed206 	br	800e68c <___svfiprintf_internal_r+0x7e8>
 800eb44:	01c20174 	movhi	r7,2053
 800eb48:	19400450 	cmplti	r5,r3,17
 800eb4c:	39c1e804 	addi	r7,r7,1952
 800eb50:	03800404 	movi	r14,16
 800eb54:	28000526 	beq	r5,zero,800eb6c <___svfiprintf_internal_r+0xcc8>
 800eb58:	00002206 	br	800ebe4 <___svfiprintf_internal_r+0xd40>
 800eb5c:	18fffc04 	addi	r3,r3,-16
 800eb60:	19400448 	cmpgei	r5,r3,17
 800eb64:	42000204 	addi	r8,r8,8
 800eb68:	28001e26 	beq	r5,zero,800ebe4 <___svfiprintf_internal_r+0xd40>
 800eb6c:	21000044 	addi	r4,r4,1
 800eb70:	10800404 	addi	r2,r2,16
 800eb74:	41c00015 	stw	r7,0(r8)
 800eb78:	43800115 	stw	r14,4(r8)
 800eb7c:	d8800b15 	stw	r2,44(sp)
 800eb80:	d9000a15 	stw	r4,40(sp)
 800eb84:	21400208 	cmpgei	r5,r4,8
 800eb88:	283ff426 	beq	r5,zero,800eb5c <___svfiprintf_internal_r+0xcb8>
 800eb8c:	d9800904 	addi	r6,sp,36
 800eb90:	a00b883a 	mov	r5,r20
 800eb94:	a809883a 	mov	r4,r21
 800eb98:	d9c00715 	stw	r7,28(sp)
 800eb9c:	d8c00615 	stw	r3,24(sp)
 800eba0:	da400515 	stw	r9,20(sp)
 800eba4:	db000215 	stw	r12,8(sp)
 800eba8:	db400115 	stw	r13,4(sp)
 800ebac:	800dce40 	call	800dce4 <__ssprint_r>
 800ebb0:	103dcd1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800ebb4:	d8c00617 	ldw	r3,24(sp)
 800ebb8:	d8800b17 	ldw	r2,44(sp)
 800ebbc:	d9000a17 	ldw	r4,40(sp)
 800ebc0:	18fffc04 	addi	r3,r3,-16
 800ebc4:	19400448 	cmpgei	r5,r3,17
 800ebc8:	d9c00717 	ldw	r7,28(sp)
 800ebcc:	da400517 	ldw	r9,20(sp)
 800ebd0:	db000217 	ldw	r12,8(sp)
 800ebd4:	db400117 	ldw	r13,4(sp)
 800ebd8:	9011883a 	mov	r8,r18
 800ebdc:	03800404 	movi	r14,16
 800ebe0:	283fe21e 	bne	r5,zero,800eb6c <___svfiprintf_internal_r+0xcc8>
 800ebe4:	21000044 	addi	r4,r4,1
 800ebe8:	10c5883a 	add	r2,r2,r3
 800ebec:	40c00115 	stw	r3,4(r8)
 800ebf0:	41c00015 	stw	r7,0(r8)
 800ebf4:	d8800b15 	stw	r2,44(sp)
 800ebf8:	d9000a15 	stw	r4,40(sp)
 800ebfc:	20c00208 	cmpgei	r3,r4,8
 800ec00:	1800671e 	bne	r3,zero,800eda0 <___svfiprintf_internal_r+0xefc>
 800ec04:	42000204 	addi	r8,r8,8
 800ec08:	003d7b06 	br	800e1f8 <___svfiprintf_internal_r+0x354>
 800ec0c:	d9800904 	addi	r6,sp,36
 800ec10:	a00b883a 	mov	r5,r20
 800ec14:	a809883a 	mov	r4,r21
 800ec18:	da400515 	stw	r9,20(sp)
 800ec1c:	db000215 	stw	r12,8(sp)
 800ec20:	db400115 	stw	r13,4(sp)
 800ec24:	800dce40 	call	800dce4 <__ssprint_r>
 800ec28:	103daf1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800ec2c:	d9000a17 	ldw	r4,40(sp)
 800ec30:	d8800b17 	ldw	r2,44(sp)
 800ec34:	da400517 	ldw	r9,20(sp)
 800ec38:	db000217 	ldw	r12,8(sp)
 800ec3c:	db400117 	ldw	r13,4(sp)
 800ec40:	d8c01804 	addi	r3,sp,96
 800ec44:	21400044 	addi	r5,r4,1
 800ec48:	9011883a 	mov	r8,r18
 800ec4c:	003d7d06 	br	800e244 <___svfiprintf_internal_r+0x3a0>
 800ec50:	d9800904 	addi	r6,sp,36
 800ec54:	a00b883a 	mov	r5,r20
 800ec58:	a809883a 	mov	r4,r21
 800ec5c:	da400215 	stw	r9,8(sp)
 800ec60:	db000115 	stw	r12,4(sp)
 800ec64:	800dce40 	call	800dce4 <__ssprint_r>
 800ec68:	103d9f1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800ec6c:	d9000a17 	ldw	r4,40(sp)
 800ec70:	d8800b17 	ldw	r2,44(sp)
 800ec74:	da400217 	ldw	r9,8(sp)
 800ec78:	db000117 	ldw	r12,4(sp)
 800ec7c:	d8c01804 	addi	r3,sp,96
 800ec80:	21400044 	addi	r5,r4,1
 800ec84:	9011883a 	mov	r8,r18
 800ec88:	003d7c06 	br	800e27c <___svfiprintf_internal_r+0x3d8>
 800ec8c:	d9800904 	addi	r6,sp,36
 800ec90:	a00b883a 	mov	r5,r20
 800ec94:	a809883a 	mov	r4,r21
 800ec98:	800dce40 	call	800dce4 <__ssprint_r>
 800ec9c:	103d921e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800eca0:	d9000a17 	ldw	r4,40(sp)
 800eca4:	d8800b17 	ldw	r2,44(sp)
 800eca8:	d8c01804 	addi	r3,sp,96
 800ecac:	21400044 	addi	r5,r4,1
 800ecb0:	9011883a 	mov	r8,r18
 800ecb4:	003d7506 	br	800e28c <___svfiprintf_internal_r+0x3e8>
 800ecb8:	002d883a 	mov	r22,zero
 800ecbc:	902f883a 	mov	r23,r18
 800ecc0:	003d3c06 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800ecc4:	902f883a 	mov	r23,r18
 800ecc8:	003d3a06 	br	800e1b4 <___svfiprintf_internal_r+0x310>
 800eccc:	00c00c04 	movi	r3,48
 800ecd0:	d88008c5 	stb	r2,35(sp)
 800ecd4:	d8c00885 	stb	r3,34(sp)
 800ecd8:	63000094 	ori	r12,r12,2
 800ecdc:	00800084 	movi	r2,2
 800ece0:	003d2506 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800ece4:	d9000017 	ldw	r4,0(sp)
 800ece8:	ddc00315 	stw	r23,12(sp)
 800ecec:	2005d7fa 	srai	r2,r4,31
 800ecf0:	19000015 	stw	r4,0(r3)
 800ecf4:	18800115 	stw	r2,4(r3)
 800ecf8:	003c8506 	br	800df10 <___svfiprintf_internal_r+0x6c>
 800ecfc:	24c00017 	ldw	r19,0(r4)
 800ed00:	002d883a 	mov	r22,zero
 800ed04:	d8c00315 	stw	r3,12(sp)
 800ed08:	00800044 	movi	r2,1
 800ed0c:	003d1a06 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800ed10:	24c00017 	ldw	r19,0(r4)
 800ed14:	002d883a 	mov	r22,zero
 800ed18:	d8c00315 	stw	r3,12(sp)
 800ed1c:	0005883a 	mov	r2,zero
 800ed20:	003d1506 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800ed24:	2cc00017 	ldw	r19,0(r5)
 800ed28:	002d883a 	mov	r22,zero
 800ed2c:	d9000315 	stw	r4,12(sp)
 800ed30:	003e3506 	br	800e608 <___svfiprintf_internal_r+0x764>
 800ed34:	24c00017 	ldw	r19,0(r4)
 800ed38:	d8c00315 	stw	r3,12(sp)
 800ed3c:	982dd7fa 	srai	r22,r19,31
 800ed40:	b005883a 	mov	r2,r22
 800ed44:	003dec06 	br	800e4f8 <___svfiprintf_internal_r+0x654>
 800ed48:	b809883a 	mov	r4,r23
 800ed4c:	da000215 	stw	r8,8(sp)
 800ed50:	db000115 	stw	r12,4(sp)
 800ed54:	80044880 	call	8004488 <strlen>
 800ed58:	db000117 	ldw	r12,4(sp)
 800ed5c:	da000217 	ldw	r8,8(sp)
 800ed60:	102d883a 	mov	r22,r2
 800ed64:	1027883a 	mov	r19,r2
 800ed68:	dc400315 	stw	r17,12(sp)
 800ed6c:	003cf606 	br	800e148 <___svfiprintf_internal_r+0x2a4>
 800ed70:	01401004 	movi	r5,64
 800ed74:	800b93c0 	call	800b93c <_malloc_r>
 800ed78:	a0800015 	stw	r2,0(r20)
 800ed7c:	a0800415 	stw	r2,16(r20)
 800ed80:	10007c26 	beq	r2,zero,800ef74 <___svfiprintf_internal_r+0x10d0>
 800ed84:	00801004 	movi	r2,64
 800ed88:	a0800515 	stw	r2,20(r20)
 800ed8c:	003c5906 	br	800def4 <___svfiprintf_internal_r+0x50>
 800ed90:	d8800017 	ldw	r2,0(sp)
 800ed94:	18800015 	stw	r2,0(r3)
 800ed98:	ddc00315 	stw	r23,12(sp)
 800ed9c:	003c5c06 	br	800df10 <___svfiprintf_internal_r+0x6c>
 800eda0:	d9800904 	addi	r6,sp,36
 800eda4:	a00b883a 	mov	r5,r20
 800eda8:	a809883a 	mov	r4,r21
 800edac:	da400515 	stw	r9,20(sp)
 800edb0:	db000215 	stw	r12,8(sp)
 800edb4:	db400115 	stw	r13,4(sp)
 800edb8:	800dce40 	call	800dce4 <__ssprint_r>
 800edbc:	103d4a1e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800edc0:	d8800b17 	ldw	r2,44(sp)
 800edc4:	d9000a17 	ldw	r4,40(sp)
 800edc8:	da400517 	ldw	r9,20(sp)
 800edcc:	db000217 	ldw	r12,8(sp)
 800edd0:	db400117 	ldw	r13,4(sp)
 800edd4:	9011883a 	mov	r8,r18
 800edd8:	003d0706 	br	800e1f8 <___svfiprintf_internal_r+0x354>
 800eddc:	0421c83a 	sub	r16,zero,r16
 800ede0:	ddc00315 	stw	r23,12(sp)
 800ede4:	003e5c06 	br	800e758 <___svfiprintf_internal_r+0x8b4>
 800ede8:	10c00060 	cmpeqi	r3,r2,1
 800edec:	8819883a 	mov	r12,r17
 800edf0:	183e2826 	beq	r3,zero,800e694 <___svfiprintf_internal_r+0x7f0>
 800edf4:	003dd106 	br	800e53c <___svfiprintf_internal_r+0x698>
 800edf8:	d9800904 	addi	r6,sp,36
 800edfc:	a00b883a 	mov	r5,r20
 800ee00:	a809883a 	mov	r4,r21
 800ee04:	da400115 	stw	r9,4(sp)
 800ee08:	800dce40 	call	800dce4 <__ssprint_r>
 800ee0c:	103d361e 	bne	r2,zero,800e2e8 <___svfiprintf_internal_r+0x444>
 800ee10:	d9000a17 	ldw	r4,40(sp)
 800ee14:	d8800b17 	ldw	r2,44(sp)
 800ee18:	da400117 	ldw	r9,4(sp)
 800ee1c:	d8c01804 	addi	r3,sp,96
 800ee20:	21400044 	addi	r5,r4,1
 800ee24:	9011883a 	mov	r8,r18
 800ee28:	003d1606 	br	800e284 <___svfiprintf_internal_r+0x3e0>
 800ee2c:	e0800043 	ldbu	r2,1(fp)
 800ee30:	63000814 	ori	r12,r12,32
 800ee34:	e7000044 	addi	fp,fp,1
 800ee38:	10803fcc 	andi	r2,r2,255
 800ee3c:	1080201c 	xori	r2,r2,128
 800ee40:	10bfe004 	addi	r2,r2,-128
 800ee44:	003c4a06 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800ee48:	488001f0 	cmpltui	r2,r9,7
 800ee4c:	482d883a 	mov	r22,r9
 800ee50:	1000011e 	bne	r2,zero,800ee58 <___svfiprintf_internal_r+0xfb4>
 800ee54:	05800184 	movi	r22,6
 800ee58:	05c20174 	movhi	r23,2053
 800ee5c:	b027883a 	mov	r19,r22
 800ee60:	dc400315 	stw	r17,12(sp)
 800ee64:	bdc16104 	addi	r23,r23,1412
 800ee68:	003cb706 	br	800e148 <___svfiprintf_internal_r+0x2a4>
 800ee6c:	d8800317 	ldw	r2,12(sp)
 800ee70:	002d883a 	mov	r22,zero
 800ee74:	d8c00315 	stw	r3,12(sp)
 800ee78:	14c00017 	ldw	r19,0(r2)
 800ee7c:	00800044 	movi	r2,1
 800ee80:	003cbd06 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800ee84:	d8c00317 	ldw	r3,12(sp)
 800ee88:	002d883a 	mov	r22,zero
 800ee8c:	d9000315 	stw	r4,12(sp)
 800ee90:	1cc00017 	ldw	r19,0(r3)
 800ee94:	003ddc06 	br	800e608 <___svfiprintf_internal_r+0x764>
 800ee98:	d8800317 	ldw	r2,12(sp)
 800ee9c:	d8c00315 	stw	r3,12(sp)
 800eea0:	14c00017 	ldw	r19,0(r2)
 800eea4:	982dd7fa 	srai	r22,r19,31
 800eea8:	b005883a 	mov	r2,r22
 800eeac:	003d9206 	br	800e4f8 <___svfiprintf_internal_r+0x654>
 800eeb0:	d8800317 	ldw	r2,12(sp)
 800eeb4:	002d883a 	mov	r22,zero
 800eeb8:	d8c00315 	stw	r3,12(sp)
 800eebc:	14c00017 	ldw	r19,0(r2)
 800eec0:	0005883a 	mov	r2,zero
 800eec4:	003cac06 	br	800e178 <___svfiprintf_internal_r+0x2d4>
 800eec8:	1809883a 	mov	r4,r3
 800eecc:	39c1e404 	addi	r7,r7,1936
 800eed0:	003f0106 	br	800ead8 <___svfiprintf_internal_r+0xc34>
 800eed4:	d9800845 	stb	r6,33(sp)
 800eed8:	003c9506 	br	800e130 <___svfiprintf_internal_r+0x28c>
 800eedc:	d9800904 	addi	r6,sp,36
 800eee0:	a00b883a 	mov	r5,r20
 800eee4:	a809883a 	mov	r4,r21
 800eee8:	800dce40 	call	800dce4 <__ssprint_r>
 800eeec:	003cfe06 	br	800e2e8 <___svfiprintf_internal_r+0x444>
 800eef0:	4827883a 	mov	r19,r9
 800eef4:	dc400315 	stw	r17,12(sp)
 800eef8:	482d883a 	mov	r22,r9
 800eefc:	003c9206 	br	800e148 <___svfiprintf_internal_r+0x2a4>
 800ef00:	d9800845 	stb	r6,33(sp)
 800ef04:	003e3706 	br	800e7e4 <___svfiprintf_internal_r+0x940>
 800ef08:	d9800845 	stb	r6,33(sp)
 800ef0c:	003d9606 	br	800e568 <___svfiprintf_internal_r+0x6c4>
 800ef10:	d9800845 	stb	r6,33(sp)
 800ef14:	003db206 	br	800e5e0 <___svfiprintf_internal_r+0x73c>
 800ef18:	d9800845 	stb	r6,33(sp)
 800ef1c:	003d6e06 	br	800e4d8 <___svfiprintf_internal_r+0x634>
 800ef20:	d9800845 	stb	r6,33(sp)
 800ef24:	003dc006 	br	800e628 <___svfiprintf_internal_r+0x784>
 800ef28:	180d883a 	mov	r6,r3
 800ef2c:	2809883a 	mov	r4,r5
 800ef30:	39c1e404 	addi	r7,r7,1936
 800ef34:	003eb806 	br	800ea18 <___svfiprintf_internal_r+0xb74>
 800ef38:	00bfffc4 	movi	r2,-1
 800ef3c:	d8800015 	stw	r2,0(sp)
 800ef40:	003cec06 	br	800e2f4 <___svfiprintf_internal_r+0x450>
 800ef44:	d8800317 	ldw	r2,12(sp)
 800ef48:	12400017 	ldw	r9,0(r2)
 800ef4c:	15c00104 	addi	r23,r2,4
 800ef50:	4800010e 	bge	r9,zero,800ef58 <___svfiprintf_internal_r+0x10b4>
 800ef54:	027fffc4 	movi	r9,-1
 800ef58:	e0800043 	ldbu	r2,1(fp)
 800ef5c:	ddc00315 	stw	r23,12(sp)
 800ef60:	2039883a 	mov	fp,r4
 800ef64:	10803fcc 	andi	r2,r2,255
 800ef68:	1080201c 	xori	r2,r2,128
 800ef6c:	10bfe004 	addi	r2,r2,-128
 800ef70:	003bff06 	br	800df70 <___svfiprintf_internal_r+0xcc>
 800ef74:	00800304 	movi	r2,12
 800ef78:	a8800015 	stw	r2,0(r21)
 800ef7c:	00bfffc4 	movi	r2,-1
 800ef80:	d8800015 	stw	r2,0(sp)
 800ef84:	003cdb06 	br	800e2f4 <___svfiprintf_internal_r+0x450>

0800ef88 <__sprint_r.part.0>:
 800ef88:	28801917 	ldw	r2,100(r5)
 800ef8c:	defff604 	addi	sp,sp,-40
 800ef90:	dcc00315 	stw	r19,12(sp)
 800ef94:	dfc00915 	stw	ra,36(sp)
 800ef98:	df000815 	stw	fp,32(sp)
 800ef9c:	ddc00715 	stw	r23,28(sp)
 800efa0:	dd800615 	stw	r22,24(sp)
 800efa4:	dd400515 	stw	r21,20(sp)
 800efa8:	dd000415 	stw	r20,16(sp)
 800efac:	dc800215 	stw	r18,8(sp)
 800efb0:	dc400115 	stw	r17,4(sp)
 800efb4:	dc000015 	stw	r16,0(sp)
 800efb8:	1088000c 	andi	r2,r2,8192
 800efbc:	3027883a 	mov	r19,r6
 800efc0:	10002c26 	beq	r2,zero,800f074 <__sprint_r.part.0+0xec>
 800efc4:	30800217 	ldw	r2,8(r6)
 800efc8:	35000017 	ldw	r20,0(r6)
 800efcc:	2821883a 	mov	r16,r5
 800efd0:	2023883a 	mov	r17,r4
 800efd4:	05bfff04 	movi	r22,-4
 800efd8:	10002426 	beq	r2,zero,800f06c <__sprint_r.part.0+0xe4>
 800efdc:	a5400117 	ldw	r21,4(r20)
 800efe0:	a5c00017 	ldw	r23,0(r20)
 800efe4:	a824d0ba 	srli	r18,r21,2
 800efe8:	90001b26 	beq	r18,zero,800f058 <__sprint_r.part.0+0xd0>
 800efec:	0039883a 	mov	fp,zero
 800eff0:	00000206 	br	800effc <__sprint_r.part.0+0x74>
 800eff4:	bdc00104 	addi	r23,r23,4
 800eff8:	97001626 	beq	r18,fp,800f054 <__sprint_r.part.0+0xcc>
 800effc:	b9400017 	ldw	r5,0(r23)
 800f000:	800d883a 	mov	r6,r16
 800f004:	8809883a 	mov	r4,r17
 800f008:	8010a1c0 	call	8010a1c <_fputwc_r>
 800f00c:	10bfffe0 	cmpeqi	r2,r2,-1
 800f010:	e7000044 	addi	fp,fp,1
 800f014:	103ff726 	beq	r2,zero,800eff4 <__sprint_r.part.0+0x6c>
 800f018:	00bfffc4 	movi	r2,-1
 800f01c:	98000215 	stw	zero,8(r19)
 800f020:	98000115 	stw	zero,4(r19)
 800f024:	dfc00917 	ldw	ra,36(sp)
 800f028:	df000817 	ldw	fp,32(sp)
 800f02c:	ddc00717 	ldw	r23,28(sp)
 800f030:	dd800617 	ldw	r22,24(sp)
 800f034:	dd400517 	ldw	r21,20(sp)
 800f038:	dd000417 	ldw	r20,16(sp)
 800f03c:	dcc00317 	ldw	r19,12(sp)
 800f040:	dc800217 	ldw	r18,8(sp)
 800f044:	dc400117 	ldw	r17,4(sp)
 800f048:	dc000017 	ldw	r16,0(sp)
 800f04c:	dec00a04 	addi	sp,sp,40
 800f050:	f800283a 	ret
 800f054:	98800217 	ldw	r2,8(r19)
 800f058:	adaa703a 	and	r21,r21,r22
 800f05c:	1545c83a 	sub	r2,r2,r21
 800f060:	98800215 	stw	r2,8(r19)
 800f064:	a5000204 	addi	r20,r20,8
 800f068:	103fdc1e 	bne	r2,zero,800efdc <__sprint_r.part.0+0x54>
 800f06c:	0005883a 	mov	r2,zero
 800f070:	003fea06 	br	800f01c <__sprint_r.part.0+0x94>
 800f074:	800b03c0 	call	800b03c <__sfvwrite_r>
 800f078:	003fe806 	br	800f01c <__sprint_r.part.0+0x94>

0800f07c <__sprint_r>:
 800f07c:	30c00217 	ldw	r3,8(r6)
 800f080:	18000126 	beq	r3,zero,800f088 <__sprint_r+0xc>
 800f084:	800ef881 	jmpi	800ef88 <__sprint_r.part.0>
 800f088:	30000115 	stw	zero,4(r6)
 800f08c:	0005883a 	mov	r2,zero
 800f090:	f800283a 	ret

0800f094 <___vfiprintf_internal_r>:
 800f094:	deffcf04 	addi	sp,sp,-196
 800f098:	dd802d15 	stw	r22,180(sp)
 800f09c:	dd402c15 	stw	r21,176(sp)
 800f0a0:	dd002b15 	stw	r20,172(sp)
 800f0a4:	dfc03015 	stw	ra,192(sp)
 800f0a8:	df002f15 	stw	fp,188(sp)
 800f0ac:	ddc02e15 	stw	r23,184(sp)
 800f0b0:	dcc02a15 	stw	r19,168(sp)
 800f0b4:	dc802915 	stw	r18,164(sp)
 800f0b8:	dc402815 	stw	r17,160(sp)
 800f0bc:	dc002715 	stw	r16,156(sp)
 800f0c0:	d9c00415 	stw	r7,16(sp)
 800f0c4:	202d883a 	mov	r22,r4
 800f0c8:	282b883a 	mov	r21,r5
 800f0cc:	3029883a 	mov	r20,r6
 800f0d0:	20000226 	beq	r4,zero,800f0dc <___vfiprintf_internal_r+0x48>
 800f0d4:	20800e17 	ldw	r2,56(r4)
 800f0d8:	1001b226 	beq	r2,zero,800f7a4 <___vfiprintf_internal_r+0x710>
 800f0dc:	a880030b 	ldhu	r2,12(r21)
 800f0e0:	10c8000c 	andi	r3,r2,8192
 800f0e4:	1800061e 	bne	r3,zero,800f100 <___vfiprintf_internal_r+0x6c>
 800f0e8:	a8c01917 	ldw	r3,100(r21)
 800f0ec:	0137ffc4 	movi	r4,-8193
 800f0f0:	10880014 	ori	r2,r2,8192
 800f0f4:	1906703a 	and	r3,r3,r4
 800f0f8:	a880030d 	sth	r2,12(r21)
 800f0fc:	a8c01915 	stw	r3,100(r21)
 800f100:	10c0020c 	andi	r3,r2,8
 800f104:	18010626 	beq	r3,zero,800f520 <___vfiprintf_internal_r+0x48c>
 800f108:	a8c00417 	ldw	r3,16(r21)
 800f10c:	18010426 	beq	r3,zero,800f520 <___vfiprintf_internal_r+0x48c>
 800f110:	1080068c 	andi	r2,r2,26
 800f114:	10800298 	cmpnei	r2,r2,10
 800f118:	10010926 	beq	r2,zero,800f540 <___vfiprintf_internal_r+0x4ac>
 800f11c:	dc801704 	addi	r18,sp,92
 800f120:	dc800a15 	stw	r18,40(sp)
 800f124:	d8000c15 	stw	zero,48(sp)
 800f128:	d8000b15 	stw	zero,44(sp)
 800f12c:	9021883a 	mov	r16,r18
 800f130:	d8000515 	stw	zero,20(sp)
 800f134:	d8000115 	stw	zero,4(sp)
 800f138:	a0c00007 	ldb	r3,0(r20)
 800f13c:	1800e626 	beq	r3,zero,800f4d8 <___vfiprintf_internal_r+0x444>
 800f140:	a023883a 	mov	r17,r20
 800f144:	00000306 	br	800f154 <___vfiprintf_internal_r+0xc0>
 800f148:	88c00047 	ldb	r3,1(r17)
 800f14c:	8c400044 	addi	r17,r17,1
 800f150:	18012826 	beq	r3,zero,800f5f4 <___vfiprintf_internal_r+0x560>
 800f154:	18c00958 	cmpnei	r3,r3,37
 800f158:	183ffb1e 	bne	r3,zero,800f148 <___vfiprintf_internal_r+0xb4>
 800f15c:	8d27c83a 	sub	r19,r17,r20
 800f160:	8d01261e 	bne	r17,r20,800f5fc <___vfiprintf_internal_r+0x568>
 800f164:	88800003 	ldbu	r2,0(r17)
 800f168:	10803fcc 	andi	r2,r2,255
 800f16c:	1080201c 	xori	r2,r2,128
 800f170:	10bfe004 	addi	r2,r2,-128
 800f174:	1000d826 	beq	r2,zero,800f4d8 <___vfiprintf_internal_r+0x444>
 800f178:	88800047 	ldb	r2,1(r17)
 800f17c:	8d000044 	addi	r20,r17,1
 800f180:	d8000945 	stb	zero,37(sp)
 800f184:	000b883a 	mov	r5,zero
 800f188:	000d883a 	mov	r6,zero
 800f18c:	023fffc4 	movi	r8,-1
 800f190:	0023883a 	mov	r17,zero
 800f194:	001b883a 	mov	r13,zero
 800f198:	a5000044 	addi	r20,r20,1
 800f19c:	10fff804 	addi	r3,r2,-32
 800f1a0:	19001668 	cmpgeui	r4,r3,89
 800f1a4:	20006a1e 	bne	r4,zero,800f350 <___vfiprintf_internal_r+0x2bc>
 800f1a8:	180690ba 	slli	r3,r3,2
 800f1ac:	01020074 	movhi	r4,2049
 800f1b0:	1909883a 	add	r4,r3,r4
 800f1b4:	20fc6f17 	ldw	r3,-3652(r4)
 800f1b8:	1800683a 	jmp	r3
 800f1bc:	0800faac 	andhi	zero,at,1002
 800f1c0:	0800f350 	cmplti	zero,at,973
 800f1c4:	0800f350 	cmplti	zero,at,973
 800f1c8:	0800faa0 	cmpeqi	zero,at,1002
 800f1cc:	0800f350 	cmplti	zero,at,973
 800f1d0:	0800f350 	cmplti	zero,at,973
 800f1d4:	0800f350 	cmplti	zero,at,973
 800f1d8:	0800f350 	cmplti	zero,at,973
 800f1dc:	0800f350 	cmplti	zero,at,973
 800f1e0:	0800f350 	cmplti	zero,at,973
 800f1e4:	0800fa78 	rdprs	zero,at,1001
 800f1e8:	0800fa68 	cmpgeui	zero,at,1001
 800f1ec:	0800f350 	cmplti	zero,at,973
 800f1f0:	0800fa50 	cmplti	zero,at,1001
 800f1f4:	0800fa0c 	andi	zero,at,1000
 800f1f8:	0800f350 	cmplti	zero,at,973
 800f1fc:	0800fa00 	call	800fa0 <OSCtxSw_SWITCH_PC+0x800f60>
 800f200:	0800f320 	cmpeqi	zero,at,972
 800f204:	0800f320 	cmpeqi	zero,at,972
 800f208:	0800f320 	cmpeqi	zero,at,972
 800f20c:	0800f320 	cmpeqi	zero,at,972
 800f210:	0800f320 	cmpeqi	zero,at,972
 800f214:	0800f320 	cmpeqi	zero,at,972
 800f218:	0800f320 	cmpeqi	zero,at,972
 800f21c:	0800f320 	cmpeqi	zero,at,972
 800f220:	0800f320 	cmpeqi	zero,at,972
 800f224:	0800f350 	cmplti	zero,at,973
 800f228:	0800f350 	cmplti	zero,at,973
 800f22c:	0800f350 	cmplti	zero,at,973
 800f230:	0800f350 	cmplti	zero,at,973
 800f234:	0800f350 	cmplti	zero,at,973
 800f238:	0800f350 	cmplti	zero,at,973
 800f23c:	0800f350 	cmplti	zero,at,973
 800f240:	0800f350 	cmplti	zero,at,973
 800f244:	0800f350 	cmplti	zero,at,973
 800f248:	0800f350 	cmplti	zero,at,973
 800f24c:	0800f91c 	xori	zero,at,996
 800f250:	0800f350 	cmplti	zero,at,973
 800f254:	0800f350 	cmplti	zero,at,973
 800f258:	0800f350 	cmplti	zero,at,973
 800f25c:	0800f350 	cmplti	zero,at,973
 800f260:	0800f350 	cmplti	zero,at,973
 800f264:	0800f350 	cmplti	zero,at,973
 800f268:	0800f350 	cmplti	zero,at,973
 800f26c:	0800f350 	cmplti	zero,at,973
 800f270:	0800f350 	cmplti	zero,at,973
 800f274:	0800f350 	cmplti	zero,at,973
 800f278:	0800f58c 	andi	zero,at,982
 800f27c:	0800f350 	cmplti	zero,at,973
 800f280:	0800f350 	cmplti	zero,at,973
 800f284:	0800f350 	cmplti	zero,at,973
 800f288:	0800f350 	cmplti	zero,at,973
 800f28c:	0800f350 	cmplti	zero,at,973
 800f290:	0800f564 	muli	zero,at,981
 800f294:	0800f350 	cmplti	zero,at,973
 800f298:	0800f350 	cmplti	zero,at,973
 800f29c:	0800f8d4 	ori	zero,at,995
 800f2a0:	0800f350 	cmplti	zero,at,973
 800f2a4:	0800f350 	cmplti	zero,at,973
 800f2a8:	0800f350 	cmplti	zero,at,973
 800f2ac:	0800f350 	cmplti	zero,at,973
 800f2b0:	0800f350 	cmplti	zero,at,973
 800f2b4:	0800f350 	cmplti	zero,at,973
 800f2b8:	0800f350 	cmplti	zero,at,973
 800f2bc:	0800f350 	cmplti	zero,at,973
 800f2c0:	0800f350 	cmplti	zero,at,973
 800f2c4:	0800f350 	cmplti	zero,at,973
 800f2c8:	0800f8ac 	andhi	zero,at,994
 800f2cc:	0800f7ac 	andhi	zero,at,990
 800f2d0:	0800f350 	cmplti	zero,at,973
 800f2d4:	0800f350 	cmplti	zero,at,973
 800f2d8:	0800f350 	cmplti	zero,at,973
 800f2dc:	0800f850 	cmplti	zero,at,993
 800f2e0:	0800f7ac 	andhi	zero,at,990
 800f2e4:	0800f350 	cmplti	zero,at,973
 800f2e8:	0800f350 	cmplti	zero,at,973
 800f2ec:	0800f898 	cmpnei	zero,at,994
 800f2f0:	0800f350 	cmplti	zero,at,973
 800f2f4:	0800f85c 	xori	zero,at,993
 800f2f8:	0800f590 	cmplti	zero,at,982
 800f2fc:	0800fb84 	addi	zero,at,1006
 800f300:	0800fb78 	rdprs	zero,at,1005
 800f304:	0800f350 	cmplti	zero,at,973
 800f308:	0800fb20 	cmpeqi	zero,at,1004
 800f30c:	0800f350 	cmplti	zero,at,973
 800f310:	0800f568 	cmpgeui	zero,at,981
 800f314:	0800f350 	cmplti	zero,at,973
 800f318:	0800f350 	cmplti	zero,at,973
 800f31c:	0800fad8 	cmpnei	zero,at,1003
 800f320:	0023883a 	mov	r17,zero
 800f324:	10fff404 	addi	r3,r2,-48
 800f328:	a0800007 	ldb	r2,0(r20)
 800f32c:	8c4002a4 	muli	r17,r17,10
 800f330:	a5000044 	addi	r20,r20,1
 800f334:	1c63883a 	add	r17,r3,r17
 800f338:	10fff404 	addi	r3,r2,-48
 800f33c:	190002b0 	cmpltui	r4,r3,10
 800f340:	203ff91e 	bne	r4,zero,800f328 <___vfiprintf_internal_r+0x294>
 800f344:	10fff804 	addi	r3,r2,-32
 800f348:	19001668 	cmpgeui	r4,r3,89
 800f34c:	203f9626 	beq	r4,zero,800f1a8 <___vfiprintf_internal_r+0x114>
 800f350:	29403fcc 	andi	r5,r5,255
 800f354:	2803e11e 	bne	r5,zero,80102dc <___vfiprintf_internal_r+0x1248>
 800f358:	10005f26 	beq	r2,zero,800f4d8 <___vfiprintf_internal_r+0x444>
 800f35c:	d8800d05 	stb	r2,52(sp)
 800f360:	d8000945 	stb	zero,37(sp)
 800f364:	05c00044 	movi	r23,1
 800f368:	07000044 	movi	fp,1
 800f36c:	dcc00d04 	addi	r19,sp,52
 800f370:	db400015 	stw	r13,0(sp)
 800f374:	0011883a 	mov	r8,zero
 800f378:	d8800017 	ldw	r2,0(sp)
 800f37c:	1380008c 	andi	r14,r2,2
 800f380:	70000126 	beq	r14,zero,800f388 <___vfiprintf_internal_r+0x2f4>
 800f384:	bdc00084 	addi	r23,r23,2
 800f388:	d8800017 	ldw	r2,0(sp)
 800f38c:	d9000b17 	ldw	r4,44(sp)
 800f390:	1340210c 	andi	r13,r2,132
 800f394:	21800044 	addi	r6,r4,1
 800f398:	d8800c17 	ldw	r2,48(sp)
 800f39c:	300b883a 	mov	r5,r6
 800f3a0:	6800021e 	bne	r13,zero,800f3ac <___vfiprintf_internal_r+0x318>
 800f3a4:	8dc7c83a 	sub	r3,r17,r23
 800f3a8:	00c2d516 	blt	zero,r3,800ff00 <___vfiprintf_internal_r+0xe6c>
 800f3ac:	d8c00947 	ldb	r3,37(sp)
 800f3b0:	81800204 	addi	r6,r16,8
 800f3b4:	18000d26 	beq	r3,zero,800f3ec <___vfiprintf_internal_r+0x358>
 800f3b8:	d8c00944 	addi	r3,sp,37
 800f3bc:	10800044 	addi	r2,r2,1
 800f3c0:	80c00015 	stw	r3,0(r16)
 800f3c4:	00c00044 	movi	r3,1
 800f3c8:	80c00115 	stw	r3,4(r16)
 800f3cc:	d8800c15 	stw	r2,48(sp)
 800f3d0:	d9400b15 	stw	r5,44(sp)
 800f3d4:	28c00208 	cmpgei	r3,r5,8
 800f3d8:	1802aa1e 	bne	r3,zero,800fe84 <___vfiprintf_internal_r+0xdf0>
 800f3dc:	2809883a 	mov	r4,r5
 800f3e0:	3021883a 	mov	r16,r6
 800f3e4:	29400044 	addi	r5,r5,1
 800f3e8:	31800204 	addi	r6,r6,8
 800f3ec:	70001826 	beq	r14,zero,800f450 <___vfiprintf_internal_r+0x3bc>
 800f3f0:	d8c00984 	addi	r3,sp,38
 800f3f4:	10800084 	addi	r2,r2,2
 800f3f8:	80c00015 	stw	r3,0(r16)
 800f3fc:	00c00084 	movi	r3,2
 800f400:	80c00115 	stw	r3,4(r16)
 800f404:	d8800c15 	stw	r2,48(sp)
 800f408:	d9400b15 	stw	r5,44(sp)
 800f40c:	28c00208 	cmpgei	r3,r5,8
 800f410:	1802b426 	beq	r3,zero,800fee4 <___vfiprintf_internal_r+0xe50>
 800f414:	10031026 	beq	r2,zero,8010058 <___vfiprintf_internal_r+0xfc4>
 800f418:	d9800a04 	addi	r6,sp,40
 800f41c:	a80b883a 	mov	r5,r21
 800f420:	b009883a 	mov	r4,r22
 800f424:	da000315 	stw	r8,12(sp)
 800f428:	db400215 	stw	r13,8(sp)
 800f42c:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800f430:	10002b1e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800f434:	d9000b17 	ldw	r4,44(sp)
 800f438:	d8800c17 	ldw	r2,48(sp)
 800f43c:	da000317 	ldw	r8,12(sp)
 800f440:	db400217 	ldw	r13,8(sp)
 800f444:	d9801904 	addi	r6,sp,100
 800f448:	21400044 	addi	r5,r4,1
 800f44c:	9021883a 	mov	r16,r18
 800f450:	6b402018 	cmpnei	r13,r13,128
 800f454:	68020a26 	beq	r13,zero,800fc80 <___vfiprintf_internal_r+0xbec>
 800f458:	4711c83a 	sub	r8,r8,fp
 800f45c:	02024916 	blt	zero,r8,800fd84 <___vfiprintf_internal_r+0xcf0>
 800f460:	e085883a 	add	r2,fp,r2
 800f464:	d9400b15 	stw	r5,44(sp)
 800f468:	84c00015 	stw	r19,0(r16)
 800f46c:	87000115 	stw	fp,4(r16)
 800f470:	d8800c15 	stw	r2,48(sp)
 800f474:	29400210 	cmplti	r5,r5,8
 800f478:	2800081e 	bne	r5,zero,800f49c <___vfiprintf_internal_r+0x408>
 800f47c:	10008f26 	beq	r2,zero,800f6bc <___vfiprintf_internal_r+0x628>
 800f480:	d9800a04 	addi	r6,sp,40
 800f484:	a80b883a 	mov	r5,r21
 800f488:	b009883a 	mov	r4,r22
 800f48c:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800f490:	1000131e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800f494:	d8800c17 	ldw	r2,48(sp)
 800f498:	900d883a 	mov	r6,r18
 800f49c:	d8c00017 	ldw	r3,0(sp)
 800f4a0:	1cc0010c 	andi	r19,r3,4
 800f4a4:	98000226 	beq	r19,zero,800f4b0 <___vfiprintf_internal_r+0x41c>
 800f4a8:	8de1c83a 	sub	r16,r17,r23
 800f4ac:	04008a16 	blt	zero,r16,800f6d8 <___vfiprintf_internal_r+0x644>
 800f4b0:	8dc0010e 	bge	r17,r23,800f4b8 <___vfiprintf_internal_r+0x424>
 800f4b4:	b823883a 	mov	r17,r23
 800f4b8:	d8c00117 	ldw	r3,4(sp)
 800f4bc:	1c47883a 	add	r3,r3,r17
 800f4c0:	d8c00115 	stw	r3,4(sp)
 800f4c4:	1002651e 	bne	r2,zero,800fe5c <___vfiprintf_internal_r+0xdc8>
 800f4c8:	a0c00007 	ldb	r3,0(r20)
 800f4cc:	d8000b15 	stw	zero,44(sp)
 800f4d0:	9021883a 	mov	r16,r18
 800f4d4:	183f1a1e 	bne	r3,zero,800f140 <___vfiprintf_internal_r+0xac>
 800f4d8:	d8800c17 	ldw	r2,48(sp)
 800f4dc:	1003811e 	bne	r2,zero,80102e4 <___vfiprintf_internal_r+0x1250>
 800f4e0:	a880030b 	ldhu	r2,12(r21)
 800f4e4:	1080100c 	andi	r2,r2,64
 800f4e8:	10039c1e 	bne	r2,zero,801035c <___vfiprintf_internal_r+0x12c8>
 800f4ec:	d8800117 	ldw	r2,4(sp)
 800f4f0:	dfc03017 	ldw	ra,192(sp)
 800f4f4:	df002f17 	ldw	fp,188(sp)
 800f4f8:	ddc02e17 	ldw	r23,184(sp)
 800f4fc:	dd802d17 	ldw	r22,180(sp)
 800f500:	dd402c17 	ldw	r21,176(sp)
 800f504:	dd002b17 	ldw	r20,172(sp)
 800f508:	dcc02a17 	ldw	r19,168(sp)
 800f50c:	dc802917 	ldw	r18,164(sp)
 800f510:	dc402817 	ldw	r17,160(sp)
 800f514:	dc002717 	ldw	r16,156(sp)
 800f518:	dec03104 	addi	sp,sp,196
 800f51c:	f800283a 	ret
 800f520:	a80b883a 	mov	r5,r21
 800f524:	b009883a 	mov	r4,r22
 800f528:	8008b240 	call	8008b24 <__swsetup_r>
 800f52c:	10038b1e 	bne	r2,zero,801035c <___vfiprintf_internal_r+0x12c8>
 800f530:	a880030b 	ldhu	r2,12(r21)
 800f534:	1080068c 	andi	r2,r2,26
 800f538:	10800298 	cmpnei	r2,r2,10
 800f53c:	103ef71e 	bne	r2,zero,800f11c <___vfiprintf_internal_r+0x88>
 800f540:	a880038f 	ldh	r2,14(r21)
 800f544:	103ef516 	blt	r2,zero,800f11c <___vfiprintf_internal_r+0x88>
 800f548:	d9c00417 	ldw	r7,16(sp)
 800f54c:	a00d883a 	mov	r6,r20
 800f550:	a80b883a 	mov	r5,r21
 800f554:	b009883a 	mov	r4,r22
 800f558:	80103b40 	call	80103b4 <__sbprintf>
 800f55c:	d8800115 	stw	r2,4(sp)
 800f560:	003fe206 	br	800f4ec <___vfiprintf_internal_r+0x458>
 800f564:	6b400414 	ori	r13,r13,16
 800f568:	6880080c 	andi	r2,r13,32
 800f56c:	10004726 	beq	r2,zero,800f68c <___vfiprintf_internal_r+0x5f8>
 800f570:	d8c00417 	ldw	r3,16(sp)
 800f574:	00800044 	movi	r2,1
 800f578:	1dc00017 	ldw	r23,0(r3)
 800f57c:	1f000117 	ldw	fp,4(r3)
 800f580:	18c00204 	addi	r3,r3,8
 800f584:	d8c00415 	stw	r3,16(sp)
 800f588:	00000906 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 800f58c:	6b400414 	ori	r13,r13,16
 800f590:	6880080c 	andi	r2,r13,32
 800f594:	10003126 	beq	r2,zero,800f65c <___vfiprintf_internal_r+0x5c8>
 800f598:	d8c00417 	ldw	r3,16(sp)
 800f59c:	0005883a 	mov	r2,zero
 800f5a0:	1dc00017 	ldw	r23,0(r3)
 800f5a4:	1f000117 	ldw	fp,4(r3)
 800f5a8:	18c00204 	addi	r3,r3,8
 800f5ac:	d8c00415 	stw	r3,16(sp)
 800f5b0:	d8000945 	stb	zero,37(sp)
 800f5b4:	40ffffe0 	cmpeqi	r3,r8,-1
 800f5b8:	001d883a 	mov	r14,zero
 800f5bc:	1800f21e 	bne	r3,zero,800f988 <___vfiprintf_internal_r+0x8f4>
 800f5c0:	04ffdfc4 	movi	r19,-129
 800f5c4:	6cc8703a 	and	r4,r13,r19
 800f5c8:	bf06b03a 	or	r3,r23,fp
 800f5cc:	d9000015 	stw	r4,0(sp)
 800f5d0:	1802491e 	bne	r3,zero,800fef8 <___vfiprintf_internal_r+0xe64>
 800f5d4:	4003071e 	bne	r8,zero,80101f4 <___vfiprintf_internal_r+0x1160>
 800f5d8:	1002a41e 	bne	r2,zero,801006c <___vfiprintf_internal_r+0xfd8>
 800f5dc:	6f00004c 	andi	fp,r13,1
 800f5e0:	e002b626 	beq	fp,zero,80100bc <___vfiprintf_internal_r+0x1028>
 800f5e4:	00800c04 	movi	r2,48
 800f5e8:	d88016c5 	stb	r2,91(sp)
 800f5ec:	dcc016c4 	addi	r19,sp,91
 800f5f0:	00008e06 	br	800f82c <___vfiprintf_internal_r+0x798>
 800f5f4:	8d27c83a 	sub	r19,r17,r20
 800f5f8:	8d3fb726 	beq	r17,r20,800f4d8 <___vfiprintf_internal_r+0x444>
 800f5fc:	d8c00c17 	ldw	r3,48(sp)
 800f600:	d8800b17 	ldw	r2,44(sp)
 800f604:	85000015 	stw	r20,0(r16)
 800f608:	98c7883a 	add	r3,r19,r3
 800f60c:	10800044 	addi	r2,r2,1
 800f610:	d8800b15 	stw	r2,44(sp)
 800f614:	84c00115 	stw	r19,4(r16)
 800f618:	d8c00c15 	stw	r3,48(sp)
 800f61c:	10800208 	cmpgei	r2,r2,8
 800f620:	1000061e 	bne	r2,zero,800f63c <___vfiprintf_internal_r+0x5a8>
 800f624:	84000204 	addi	r16,r16,8
 800f628:	d8c00117 	ldw	r3,4(sp)
 800f62c:	88800003 	ldbu	r2,0(r17)
 800f630:	1cc7883a 	add	r3,r3,r19
 800f634:	d8c00115 	stw	r3,4(sp)
 800f638:	003ecb06 	br	800f168 <___vfiprintf_internal_r+0xd4>
 800f63c:	18027d26 	beq	r3,zero,8010034 <___vfiprintf_internal_r+0xfa0>
 800f640:	d9800a04 	addi	r6,sp,40
 800f644:	a80b883a 	mov	r5,r21
 800f648:	b009883a 	mov	r4,r22
 800f64c:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800f650:	103fa31e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800f654:	9021883a 	mov	r16,r18
 800f658:	003ff306 	br	800f628 <___vfiprintf_internal_r+0x594>
 800f65c:	d9000417 	ldw	r4,16(sp)
 800f660:	6880040c 	andi	r2,r13,16
 800f664:	20c00104 	addi	r3,r4,4
 800f668:	1002a11e 	bne	r2,zero,80100f0 <___vfiprintf_internal_r+0x105c>
 800f66c:	6880100c 	andi	r2,r13,64
 800f670:	1002f426 	beq	r2,zero,8010244 <___vfiprintf_internal_r+0x11b0>
 800f674:	d8800417 	ldw	r2,16(sp)
 800f678:	0039883a 	mov	fp,zero
 800f67c:	d8c00415 	stw	r3,16(sp)
 800f680:	15c0000b 	ldhu	r23,0(r2)
 800f684:	0005883a 	mov	r2,zero
 800f688:	003fc906 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 800f68c:	d9000417 	ldw	r4,16(sp)
 800f690:	6880040c 	andi	r2,r13,16
 800f694:	20c00104 	addi	r3,r4,4
 800f698:	1002a91e 	bne	r2,zero,8010140 <___vfiprintf_internal_r+0x10ac>
 800f69c:	6880100c 	andi	r2,r13,64
 800f6a0:	1002ee26 	beq	r2,zero,801025c <___vfiprintf_internal_r+0x11c8>
 800f6a4:	d8800417 	ldw	r2,16(sp)
 800f6a8:	0039883a 	mov	fp,zero
 800f6ac:	d8c00415 	stw	r3,16(sp)
 800f6b0:	15c0000b 	ldhu	r23,0(r2)
 800f6b4:	00800044 	movi	r2,1
 800f6b8:	003fbd06 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 800f6bc:	d8c00017 	ldw	r3,0(sp)
 800f6c0:	d8000b15 	stw	zero,44(sp)
 800f6c4:	1cc0010c 	andi	r19,r3,4
 800f6c8:	98024826 	beq	r19,zero,800ffec <___vfiprintf_internal_r+0xf58>
 800f6cc:	8de1c83a 	sub	r16,r17,r23
 800f6d0:	0402460e 	bge	zero,r16,800ffec <___vfiprintf_internal_r+0xf58>
 800f6d4:	900d883a 	mov	r6,r18
 800f6d8:	80c00450 	cmplti	r3,r16,17
 800f6dc:	d9000b17 	ldw	r4,44(sp)
 800f6e0:	01c20174 	movhi	r7,2053
 800f6e4:	1803151e 	bne	r3,zero,801033c <___vfiprintf_internal_r+0x12a8>
 800f6e8:	39c1f004 	addi	r7,r7,1984
 800f6ec:	04c00404 	movi	r19,16
 800f6f0:	00000606 	br	800f70c <___vfiprintf_internal_r+0x678>
 800f6f4:	21400084 	addi	r5,r4,2
 800f6f8:	31800204 	addi	r6,r6,8
 800f6fc:	1809883a 	mov	r4,r3
 800f700:	843ffc04 	addi	r16,r16,-16
 800f704:	80c00448 	cmpgei	r3,r16,17
 800f708:	18001726 	beq	r3,zero,800f768 <___vfiprintf_internal_r+0x6d4>
 800f70c:	20c00044 	addi	r3,r4,1
 800f710:	10800404 	addi	r2,r2,16
 800f714:	31c00015 	stw	r7,0(r6)
 800f718:	34c00115 	stw	r19,4(r6)
 800f71c:	d8800c15 	stw	r2,48(sp)
 800f720:	d8c00b15 	stw	r3,44(sp)
 800f724:	19400208 	cmpgei	r5,r3,8
 800f728:	283ff226 	beq	r5,zero,800f6f4 <___vfiprintf_internal_r+0x660>
 800f72c:	d9800a04 	addi	r6,sp,40
 800f730:	a80b883a 	mov	r5,r21
 800f734:	b009883a 	mov	r4,r22
 800f738:	10014d26 	beq	r2,zero,800fc70 <___vfiprintf_internal_r+0xbdc>
 800f73c:	d9c00015 	stw	r7,0(sp)
 800f740:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800f744:	103f661e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800f748:	d9000b17 	ldw	r4,44(sp)
 800f74c:	843ffc04 	addi	r16,r16,-16
 800f750:	80c00448 	cmpgei	r3,r16,17
 800f754:	d8800c17 	ldw	r2,48(sp)
 800f758:	d9c00017 	ldw	r7,0(sp)
 800f75c:	900d883a 	mov	r6,r18
 800f760:	21400044 	addi	r5,r4,1
 800f764:	183fe91e 	bne	r3,zero,800f70c <___vfiprintf_internal_r+0x678>
 800f768:	1405883a 	add	r2,r2,r16
 800f76c:	d9400b15 	stw	r5,44(sp)
 800f770:	31c00015 	stw	r7,0(r6)
 800f774:	34000115 	stw	r16,4(r6)
 800f778:	d8800c15 	stw	r2,48(sp)
 800f77c:	29400210 	cmplti	r5,r5,8
 800f780:	283f4b1e 	bne	r5,zero,800f4b0 <___vfiprintf_internal_r+0x41c>
 800f784:	10021926 	beq	r2,zero,800ffec <___vfiprintf_internal_r+0xf58>
 800f788:	d9800a04 	addi	r6,sp,40
 800f78c:	a80b883a 	mov	r5,r21
 800f790:	b009883a 	mov	r4,r22
 800f794:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800f798:	103f511e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800f79c:	d8800c17 	ldw	r2,48(sp)
 800f7a0:	003f4306 	br	800f4b0 <___vfiprintf_internal_r+0x41c>
 800f7a4:	800abdc0 	call	800abdc <__sinit>
 800f7a8:	003e4c06 	br	800f0dc <___vfiprintf_internal_r+0x48>
 800f7ac:	29403fcc 	andi	r5,r5,255
 800f7b0:	2802de1e 	bne	r5,zero,801032c <___vfiprintf_internal_r+0x1298>
 800f7b4:	6880080c 	andi	r2,r13,32
 800f7b8:	10005d26 	beq	r2,zero,800f930 <___vfiprintf_internal_r+0x89c>
 800f7bc:	d8c00417 	ldw	r3,16(sp)
 800f7c0:	18800117 	ldw	r2,4(r3)
 800f7c4:	1dc00017 	ldw	r23,0(r3)
 800f7c8:	18c00204 	addi	r3,r3,8
 800f7cc:	d8c00415 	stw	r3,16(sp)
 800f7d0:	1039883a 	mov	fp,r2
 800f7d4:	10006216 	blt	r2,zero,800f960 <___vfiprintf_internal_r+0x8cc>
 800f7d8:	40bfffd8 	cmpnei	r2,r8,-1
 800f7dc:	10000a26 	beq	r2,zero,800f808 <___vfiprintf_internal_r+0x774>
 800f7e0:	00ffdfc4 	movi	r3,-129
 800f7e4:	bf04b03a 	or	r2,r23,fp
 800f7e8:	db800943 	ldbu	r14,37(sp)
 800f7ec:	68da703a 	and	r13,r13,r3
 800f7f0:	1000061e 	bne	r2,zero,800f80c <___vfiprintf_internal_r+0x778>
 800f7f4:	4000081e 	bne	r8,zero,800f818 <___vfiprintf_internal_r+0x784>
 800f7f8:	0039883a 	mov	fp,zero
 800f7fc:	db400015 	stw	r13,0(sp)
 800f800:	9027883a 	mov	r19,r18
 800f804:	00000906 	br	800f82c <___vfiprintf_internal_r+0x798>
 800f808:	db800943 	ldbu	r14,37(sp)
 800f80c:	e000ec1e 	bne	fp,zero,800fbc0 <___vfiprintf_internal_r+0xb2c>
 800f810:	b88002a8 	cmpgeui	r2,r23,10
 800f814:	1000ea1e 	bne	r2,zero,800fbc0 <___vfiprintf_internal_r+0xb2c>
 800f818:	bdc00c04 	addi	r23,r23,48
 800f81c:	ddc016c5 	stb	r23,91(sp)
 800f820:	db400015 	stw	r13,0(sp)
 800f824:	07000044 	movi	fp,1
 800f828:	dcc016c4 	addi	r19,sp,91
 800f82c:	402f883a 	mov	r23,r8
 800f830:	4700010e 	bge	r8,fp,800f838 <___vfiprintf_internal_r+0x7a4>
 800f834:	e02f883a 	mov	r23,fp
 800f838:	73803fcc 	andi	r14,r14,255
 800f83c:	7380201c 	xori	r14,r14,128
 800f840:	73bfe004 	addi	r14,r14,-128
 800f844:	703ecc26 	beq	r14,zero,800f378 <___vfiprintf_internal_r+0x2e4>
 800f848:	bdc00044 	addi	r23,r23,1
 800f84c:	003eca06 	br	800f378 <___vfiprintf_internal_r+0x2e4>
 800f850:	a0800007 	ldb	r2,0(r20)
 800f854:	6b401014 	ori	r13,r13,64
 800f858:	003e4f06 	br	800f198 <___vfiprintf_internal_r+0x104>
 800f85c:	29403fcc 	andi	r5,r5,255
 800f860:	2802b01e 	bne	r5,zero,8010324 <___vfiprintf_internal_r+0x1290>
 800f864:	d9000417 	ldw	r4,16(sp)
 800f868:	6880080c 	andi	r2,r13,32
 800f86c:	20c00017 	ldw	r3,0(r4)
 800f870:	21000104 	addi	r4,r4,4
 800f874:	1002231e 	bne	r2,zero,8010104 <___vfiprintf_internal_r+0x1070>
 800f878:	6880040c 	andi	r2,r13,16
 800f87c:	1002511e 	bne	r2,zero,80101c4 <___vfiprintf_internal_r+0x1130>
 800f880:	6b40100c 	andi	r13,r13,64
 800f884:	68024f26 	beq	r13,zero,80101c4 <___vfiprintf_internal_r+0x1130>
 800f888:	d8800117 	ldw	r2,4(sp)
 800f88c:	d9000415 	stw	r4,16(sp)
 800f890:	1880000d 	sth	r2,0(r3)
 800f894:	003e2806 	br	800f138 <___vfiprintf_internal_r+0xa4>
 800f898:	a0800007 	ldb	r2,0(r20)
 800f89c:	10c01b18 	cmpnei	r3,r2,108
 800f8a0:	18025826 	beq	r3,zero,8010204 <___vfiprintf_internal_r+0x1170>
 800f8a4:	6b400414 	ori	r13,r13,16
 800f8a8:	003e3b06 	br	800f198 <___vfiprintf_internal_r+0x104>
 800f8ac:	d8c00417 	ldw	r3,16(sp)
 800f8b0:	d8000945 	stb	zero,37(sp)
 800f8b4:	05c00044 	movi	r23,1
 800f8b8:	18800017 	ldw	r2,0(r3)
 800f8bc:	18c00104 	addi	r3,r3,4
 800f8c0:	d8c00415 	stw	r3,16(sp)
 800f8c4:	d8800d05 	stb	r2,52(sp)
 800f8c8:	07000044 	movi	fp,1
 800f8cc:	dcc00d04 	addi	r19,sp,52
 800f8d0:	003ea706 	br	800f370 <___vfiprintf_internal_r+0x2dc>
 800f8d4:	29403fcc 	andi	r5,r5,255
 800f8d8:	2802961e 	bne	r5,zero,8010334 <___vfiprintf_internal_r+0x12a0>
 800f8dc:	00c20174 	movhi	r3,2053
 800f8e0:	18c15704 	addi	r3,r3,1372
 800f8e4:	d8c00515 	stw	r3,20(sp)
 800f8e8:	68c0080c 	andi	r3,r13,32
 800f8ec:	18008126 	beq	r3,zero,800faf4 <___vfiprintf_internal_r+0xa60>
 800f8f0:	d8c00417 	ldw	r3,16(sp)
 800f8f4:	1dc00017 	ldw	r23,0(r3)
 800f8f8:	1f000117 	ldw	fp,4(r3)
 800f8fc:	18c00204 	addi	r3,r3,8
 800f900:	d8c00415 	stw	r3,16(sp)
 800f904:	68c0004c 	andi	r3,r13,1
 800f908:	18000226 	beq	r3,zero,800f914 <___vfiprintf_internal_r+0x880>
 800f90c:	bf06b03a 	or	r3,r23,fp
 800f910:	1801f11e 	bne	r3,zero,80100d8 <___vfiprintf_internal_r+0x1044>
 800f914:	00800084 	movi	r2,2
 800f918:	003f2506 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 800f91c:	29403fcc 	andi	r5,r5,255
 800f920:	28027e1e 	bne	r5,zero,801031c <___vfiprintf_internal_r+0x1288>
 800f924:	6b400414 	ori	r13,r13,16
 800f928:	6880080c 	andi	r2,r13,32
 800f92c:	103fa31e 	bne	r2,zero,800f7bc <___vfiprintf_internal_r+0x728>
 800f930:	d9000417 	ldw	r4,16(sp)
 800f934:	6880040c 	andi	r2,r13,16
 800f938:	20c00104 	addi	r3,r4,4
 800f93c:	1001f71e 	bne	r2,zero,801011c <___vfiprintf_internal_r+0x1088>
 800f940:	6880100c 	andi	r2,r13,64
 800f944:	10025026 	beq	r2,zero,8010288 <___vfiprintf_internal_r+0x11f4>
 800f948:	d8800417 	ldw	r2,16(sp)
 800f94c:	d8c00415 	stw	r3,16(sp)
 800f950:	15c0000f 	ldh	r23,0(r2)
 800f954:	b839d7fa 	srai	fp,r23,31
 800f958:	e005883a 	mov	r2,fp
 800f95c:	103f9e0e 	bge	r2,zero,800f7d8 <___vfiprintf_internal_r+0x744>
 800f960:	b804c03a 	cmpne	r2,r23,zero
 800f964:	0739c83a 	sub	fp,zero,fp
 800f968:	e0b9c83a 	sub	fp,fp,r2
 800f96c:	00800b44 	movi	r2,45
 800f970:	d8800945 	stb	r2,37(sp)
 800f974:	40ffffe0 	cmpeqi	r3,r8,-1
 800f978:	05efc83a 	sub	r23,zero,r23
 800f97c:	03800b44 	movi	r14,45
 800f980:	00800044 	movi	r2,1
 800f984:	183f0e26 	beq	r3,zero,800f5c0 <___vfiprintf_internal_r+0x52c>
 800f988:	10c00060 	cmpeqi	r3,r2,1
 800f98c:	183f9f1e 	bne	r3,zero,800f80c <___vfiprintf_internal_r+0x778>
 800f990:	108000a0 	cmpeqi	r2,r2,2
 800f994:	9027883a 	mov	r19,r18
 800f998:	1000a61e 	bne	r2,zero,800fc34 <___vfiprintf_internal_r+0xba0>
 800f99c:	e006977a 	slli	r3,fp,29
 800f9a0:	b804d0fa 	srli	r2,r23,3
 800f9a4:	e038d0fa 	srli	fp,fp,3
 800f9a8:	b90001cc 	andi	r4,r23,7
 800f9ac:	21000c04 	addi	r4,r4,48
 800f9b0:	18aeb03a 	or	r23,r3,r2
 800f9b4:	993fffc5 	stb	r4,-1(r19)
 800f9b8:	bf04b03a 	or	r2,r23,fp
 800f9bc:	980b883a 	mov	r5,r19
 800f9c0:	9cffffc4 	addi	r19,r19,-1
 800f9c4:	103ff51e 	bne	r2,zero,800f99c <___vfiprintf_internal_r+0x908>
 800f9c8:	6880004c 	andi	r2,r13,1
 800f9cc:	1000a526 	beq	r2,zero,800fc64 <___vfiprintf_internal_r+0xbd0>
 800f9d0:	21003fcc 	andi	r4,r4,255
 800f9d4:	2100201c 	xori	r4,r4,128
 800f9d8:	213fe004 	addi	r4,r4,-128
 800f9dc:	20800c18 	cmpnei	r2,r4,48
 800f9e0:	1000a026 	beq	r2,zero,800fc64 <___vfiprintf_internal_r+0xbd0>
 800f9e4:	297fff84 	addi	r5,r5,-2
 800f9e8:	00800c04 	movi	r2,48
 800f9ec:	98bfffc5 	stb	r2,-1(r19)
 800f9f0:	9179c83a 	sub	fp,r18,r5
 800f9f4:	db400015 	stw	r13,0(sp)
 800f9f8:	2827883a 	mov	r19,r5
 800f9fc:	003f8b06 	br	800f82c <___vfiprintf_internal_r+0x798>
 800fa00:	a0800007 	ldb	r2,0(r20)
 800fa04:	6b402014 	ori	r13,r13,128
 800fa08:	003de306 	br	800f198 <___vfiprintf_internal_r+0x104>
 800fa0c:	a0800007 	ldb	r2,0(r20)
 800fa10:	a1000044 	addi	r4,r20,1
 800fa14:	10c00aa0 	cmpeqi	r3,r2,42
 800fa18:	1802531e 	bne	r3,zero,8010368 <___vfiprintf_internal_r+0x12d4>
 800fa1c:	10fff404 	addi	r3,r2,-48
 800fa20:	19c002b0 	cmpltui	r7,r3,10
 800fa24:	2029883a 	mov	r20,r4
 800fa28:	0011883a 	mov	r8,zero
 800fa2c:	383ddb26 	beq	r7,zero,800f19c <___vfiprintf_internal_r+0x108>
 800fa30:	a0800007 	ldb	r2,0(r20)
 800fa34:	420002a4 	muli	r8,r8,10
 800fa38:	a5000044 	addi	r20,r20,1
 800fa3c:	40d1883a 	add	r8,r8,r3
 800fa40:	10fff404 	addi	r3,r2,-48
 800fa44:	190002b0 	cmpltui	r4,r3,10
 800fa48:	203ff91e 	bne	r4,zero,800fa30 <___vfiprintf_internal_r+0x99c>
 800fa4c:	003dd306 	br	800f19c <___vfiprintf_internal_r+0x108>
 800fa50:	a0800003 	ldbu	r2,0(r20)
 800fa54:	10803fcc 	andi	r2,r2,255
 800fa58:	1080201c 	xori	r2,r2,128
 800fa5c:	6b400114 	ori	r13,r13,4
 800fa60:	10bfe004 	addi	r2,r2,-128
 800fa64:	003dcc06 	br	800f198 <___vfiprintf_internal_r+0x104>
 800fa68:	a0800007 	ldb	r2,0(r20)
 800fa6c:	01400044 	movi	r5,1
 800fa70:	01800ac4 	movi	r6,43
 800fa74:	003dc806 	br	800f198 <___vfiprintf_internal_r+0x104>
 800fa78:	d8c00417 	ldw	r3,16(sp)
 800fa7c:	a0800003 	ldbu	r2,0(r20)
 800fa80:	1c400017 	ldw	r17,0(r3)
 800fa84:	18c00104 	addi	r3,r3,4
 800fa88:	8801b916 	blt	r17,zero,8010170 <___vfiprintf_internal_r+0x10dc>
 800fa8c:	d8c00415 	stw	r3,16(sp)
 800fa90:	10803fcc 	andi	r2,r2,255
 800fa94:	1080201c 	xori	r2,r2,128
 800fa98:	10bfe004 	addi	r2,r2,-128
 800fa9c:	003dbe06 	br	800f198 <___vfiprintf_internal_r+0x104>
 800faa0:	a0800007 	ldb	r2,0(r20)
 800faa4:	6b400054 	ori	r13,r13,1
 800faa8:	003dbb06 	br	800f198 <___vfiprintf_internal_r+0x104>
 800faac:	30c03fcc 	andi	r3,r6,255
 800fab0:	18c0201c 	xori	r3,r3,128
 800fab4:	18ffe004 	addi	r3,r3,-128
 800fab8:	a0800003 	ldbu	r2,0(r20)
 800fabc:	183ff41e 	bne	r3,zero,800fa90 <___vfiprintf_internal_r+0x9fc>
 800fac0:	10803fcc 	andi	r2,r2,255
 800fac4:	1080201c 	xori	r2,r2,128
 800fac8:	01400044 	movi	r5,1
 800facc:	01800804 	movi	r6,32
 800fad0:	10bfe004 	addi	r2,r2,-128
 800fad4:	003db006 	br	800f198 <___vfiprintf_internal_r+0x104>
 800fad8:	29403fcc 	andi	r5,r5,255
 800fadc:	28020a1e 	bne	r5,zero,8010308 <___vfiprintf_internal_r+0x1274>
 800fae0:	00c20174 	movhi	r3,2053
 800fae4:	18c15c04 	addi	r3,r3,1392
 800fae8:	d8c00515 	stw	r3,20(sp)
 800faec:	68c0080c 	andi	r3,r13,32
 800faf0:	183f7f1e 	bne	r3,zero,800f8f0 <___vfiprintf_internal_r+0x85c>
 800faf4:	d9400417 	ldw	r5,16(sp)
 800faf8:	68c0040c 	andi	r3,r13,16
 800fafc:	29000104 	addi	r4,r5,4
 800fb00:	18018b1e 	bne	r3,zero,8010130 <___vfiprintf_internal_r+0x109c>
 800fb04:	68c0100c 	andi	r3,r13,64
 800fb08:	1801da26 	beq	r3,zero,8010274 <___vfiprintf_internal_r+0x11e0>
 800fb0c:	d8c00417 	ldw	r3,16(sp)
 800fb10:	0039883a 	mov	fp,zero
 800fb14:	d9000415 	stw	r4,16(sp)
 800fb18:	1dc0000b 	ldhu	r23,0(r3)
 800fb1c:	003f7906 	br	800f904 <___vfiprintf_internal_r+0x870>
 800fb20:	d8800417 	ldw	r2,16(sp)
 800fb24:	d8000945 	stb	zero,37(sp)
 800fb28:	14c00017 	ldw	r19,0(r2)
 800fb2c:	10c00104 	addi	r3,r2,4
 800fb30:	9801bb26 	beq	r19,zero,8010220 <___vfiprintf_internal_r+0x118c>
 800fb34:	40bfffe0 	cmpeqi	r2,r8,-1
 800fb38:	1001901e 	bne	r2,zero,801017c <___vfiprintf_internal_r+0x10e8>
 800fb3c:	400d883a 	mov	r6,r8
 800fb40:	000b883a 	mov	r5,zero
 800fb44:	9809883a 	mov	r4,r19
 800fb48:	d8c00315 	stw	r3,12(sp)
 800fb4c:	db400215 	stw	r13,8(sp)
 800fb50:	da000015 	stw	r8,0(sp)
 800fb54:	800c11c0 	call	800c11c <memchr>
 800fb58:	da000017 	ldw	r8,0(sp)
 800fb5c:	db400217 	ldw	r13,8(sp)
 800fb60:	d8c00317 	ldw	r3,12(sp)
 800fb64:	1001e426 	beq	r2,zero,80102f8 <___vfiprintf_internal_r+0x1264>
 800fb68:	14f9c83a 	sub	fp,r2,r19
 800fb6c:	e02f883a 	mov	r23,fp
 800fb70:	d8c00415 	stw	r3,16(sp)
 800fb74:	003dfe06 	br	800f370 <___vfiprintf_internal_r+0x2dc>
 800fb78:	a0800007 	ldb	r2,0(r20)
 800fb7c:	6b400814 	ori	r13,r13,32
 800fb80:	003d8506 	br	800f198 <___vfiprintf_internal_r+0x104>
 800fb84:	d8c00417 	ldw	r3,16(sp)
 800fb88:	00800c04 	movi	r2,48
 800fb8c:	d8800985 	stb	r2,38(sp)
 800fb90:	00801e04 	movi	r2,120
 800fb94:	01020174 	movhi	r4,2053
 800fb98:	d88009c5 	stb	r2,39(sp)
 800fb9c:	18800104 	addi	r2,r3,4
 800fba0:	d8800415 	stw	r2,16(sp)
 800fba4:	20815c04 	addi	r2,r4,1392
 800fba8:	d8800515 	stw	r2,20(sp)
 800fbac:	1dc00017 	ldw	r23,0(r3)
 800fbb0:	0039883a 	mov	fp,zero
 800fbb4:	6b400094 	ori	r13,r13,2
 800fbb8:	00800084 	movi	r2,2
 800fbbc:	003e7c06 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 800fbc0:	9027883a 	mov	r19,r18
 800fbc4:	b809883a 	mov	r4,r23
 800fbc8:	e00b883a 	mov	r5,fp
 800fbcc:	01800284 	movi	r6,10
 800fbd0:	000f883a 	mov	r7,zero
 800fbd4:	db800315 	stw	r14,12(sp)
 800fbd8:	da000215 	stw	r8,8(sp)
 800fbdc:	db400015 	stw	r13,0(sp)
 800fbe0:	80119b40 	call	80119b4 <__umoddi3>
 800fbe4:	10800c04 	addi	r2,r2,48
 800fbe8:	b809883a 	mov	r4,r23
 800fbec:	e00b883a 	mov	r5,fp
 800fbf0:	98bfffc5 	stb	r2,-1(r19)
 800fbf4:	01800284 	movi	r6,10
 800fbf8:	000f883a 	mov	r7,zero
 800fbfc:	80114240 	call	8011424 <__udivdi3>
 800fc00:	e009883a 	mov	r4,fp
 800fc04:	b80b883a 	mov	r5,r23
 800fc08:	db400017 	ldw	r13,0(sp)
 800fc0c:	da000217 	ldw	r8,8(sp)
 800fc10:	db800317 	ldw	r14,12(sp)
 800fc14:	9cffffc4 	addi	r19,r19,-1
 800fc18:	102f883a 	mov	r23,r2
 800fc1c:	1839883a 	mov	fp,r3
 800fc20:	203fe81e 	bne	r4,zero,800fbc4 <___vfiprintf_internal_r+0xb30>
 800fc24:	294002a8 	cmpgeui	r5,r5,10
 800fc28:	283fe61e 	bne	r5,zero,800fbc4 <___vfiprintf_internal_r+0xb30>
 800fc2c:	94f9c83a 	sub	fp,r18,r19
 800fc30:	003efe06 	br	800f82c <___vfiprintf_internal_r+0x798>
 800fc34:	d9000517 	ldw	r4,20(sp)
 800fc38:	b88003cc 	andi	r2,r23,15
 800fc3c:	e006973a 	slli	r3,fp,28
 800fc40:	b82ed13a 	srli	r23,r23,4
 800fc44:	2085883a 	add	r2,r4,r2
 800fc48:	10800003 	ldbu	r2,0(r2)
 800fc4c:	e038d13a 	srli	fp,fp,4
 800fc50:	1deeb03a 	or	r23,r3,r23
 800fc54:	98bfffc5 	stb	r2,-1(r19)
 800fc58:	bf04b03a 	or	r2,r23,fp
 800fc5c:	9cffffc4 	addi	r19,r19,-1
 800fc60:	103ff41e 	bne	r2,zero,800fc34 <___vfiprintf_internal_r+0xba0>
 800fc64:	94f9c83a 	sub	fp,r18,r19
 800fc68:	db400015 	stw	r13,0(sp)
 800fc6c:	003eef06 	br	800f82c <___vfiprintf_internal_r+0x798>
 800fc70:	01400044 	movi	r5,1
 800fc74:	0009883a 	mov	r4,zero
 800fc78:	900d883a 	mov	r6,r18
 800fc7c:	003ea006 	br	800f700 <___vfiprintf_internal_r+0x66c>
 800fc80:	8dc7c83a 	sub	r3,r17,r23
 800fc84:	00fdf40e 	bge	zero,r3,800f458 <___vfiprintf_internal_r+0x3c4>
 800fc88:	19c00450 	cmplti	r7,r3,17
 800fc8c:	3801ae1e 	bne	r7,zero,8010348 <___vfiprintf_internal_r+0x12b4>
 800fc90:	01c20174 	movhi	r7,2053
 800fc94:	39c1ec04 	addi	r7,r7,1968
 800fc98:	03400404 	movi	r13,16
 800fc9c:	00000606 	br	800fcb8 <___vfiprintf_internal_r+0xc24>
 800fca0:	23800084 	addi	r14,r4,2
 800fca4:	84000204 	addi	r16,r16,8
 800fca8:	2809883a 	mov	r4,r5
 800fcac:	18fffc04 	addi	r3,r3,-16
 800fcb0:	19400448 	cmpgei	r5,r3,17
 800fcb4:	28001c26 	beq	r5,zero,800fd28 <___vfiprintf_internal_r+0xc94>
 800fcb8:	21400044 	addi	r5,r4,1
 800fcbc:	10800404 	addi	r2,r2,16
 800fcc0:	81c00015 	stw	r7,0(r16)
 800fcc4:	83400115 	stw	r13,4(r16)
 800fcc8:	d8800c15 	stw	r2,48(sp)
 800fccc:	d9400b15 	stw	r5,44(sp)
 800fcd0:	29800208 	cmpgei	r6,r5,8
 800fcd4:	303ff226 	beq	r6,zero,800fca0 <___vfiprintf_internal_r+0xc0c>
 800fcd8:	d9800a04 	addi	r6,sp,40
 800fcdc:	a80b883a 	mov	r5,r21
 800fce0:	b009883a 	mov	r4,r22
 800fce4:	10006326 	beq	r2,zero,800fe74 <___vfiprintf_internal_r+0xde0>
 800fce8:	d9c00615 	stw	r7,24(sp)
 800fcec:	d8c00315 	stw	r3,12(sp)
 800fcf0:	da000215 	stw	r8,8(sp)
 800fcf4:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800fcf8:	103df91e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800fcfc:	d8c00317 	ldw	r3,12(sp)
 800fd00:	d9000b17 	ldw	r4,44(sp)
 800fd04:	d8800c17 	ldw	r2,48(sp)
 800fd08:	18fffc04 	addi	r3,r3,-16
 800fd0c:	19400448 	cmpgei	r5,r3,17
 800fd10:	d9c00617 	ldw	r7,24(sp)
 800fd14:	da000217 	ldw	r8,8(sp)
 800fd18:	9021883a 	mov	r16,r18
 800fd1c:	23800044 	addi	r14,r4,1
 800fd20:	03400404 	movi	r13,16
 800fd24:	283fe41e 	bne	r5,zero,800fcb8 <___vfiprintf_internal_r+0xc24>
 800fd28:	83400204 	addi	r13,r16,8
 800fd2c:	10c5883a 	add	r2,r2,r3
 800fd30:	80c00115 	stw	r3,4(r16)
 800fd34:	81c00015 	stw	r7,0(r16)
 800fd38:	d8800c15 	stw	r2,48(sp)
 800fd3c:	db800b15 	stw	r14,44(sp)
 800fd40:	70c00208 	cmpgei	r3,r14,8
 800fd44:	1800df26 	beq	r3,zero,80100c4 <___vfiprintf_internal_r+0x1030>
 800fd48:	10015826 	beq	r2,zero,80102ac <___vfiprintf_internal_r+0x1218>
 800fd4c:	d9800a04 	addi	r6,sp,40
 800fd50:	a80b883a 	mov	r5,r21
 800fd54:	b009883a 	mov	r4,r22
 800fd58:	da000215 	stw	r8,8(sp)
 800fd5c:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800fd60:	103ddf1e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800fd64:	da000217 	ldw	r8,8(sp)
 800fd68:	d9000b17 	ldw	r4,44(sp)
 800fd6c:	d8800c17 	ldw	r2,48(sp)
 800fd70:	4711c83a 	sub	r8,r8,fp
 800fd74:	d9801904 	addi	r6,sp,100
 800fd78:	21400044 	addi	r5,r4,1
 800fd7c:	9021883a 	mov	r16,r18
 800fd80:	023db70e 	bge	zero,r8,800f460 <___vfiprintf_internal_r+0x3cc>
 800fd84:	40c00450 	cmplti	r3,r8,17
 800fd88:	01c20174 	movhi	r7,2053
 800fd8c:	1801441e 	bne	r3,zero,80102a0 <___vfiprintf_internal_r+0x120c>
 800fd90:	39c1ec04 	addi	r7,r7,1968
 800fd94:	03400404 	movi	r13,16
 800fd98:	00000606 	br	800fdb4 <___vfiprintf_internal_r+0xd20>
 800fd9c:	21400084 	addi	r5,r4,2
 800fda0:	84000204 	addi	r16,r16,8
 800fda4:	1809883a 	mov	r4,r3
 800fda8:	423ffc04 	addi	r8,r8,-16
 800fdac:	40c00448 	cmpgei	r3,r8,17
 800fdb0:	18001a26 	beq	r3,zero,800fe1c <___vfiprintf_internal_r+0xd88>
 800fdb4:	20c00044 	addi	r3,r4,1
 800fdb8:	10800404 	addi	r2,r2,16
 800fdbc:	81c00015 	stw	r7,0(r16)
 800fdc0:	83400115 	stw	r13,4(r16)
 800fdc4:	d8800c15 	stw	r2,48(sp)
 800fdc8:	d8c00b15 	stw	r3,44(sp)
 800fdcc:	19400208 	cmpgei	r5,r3,8
 800fdd0:	283ff226 	beq	r5,zero,800fd9c <___vfiprintf_internal_r+0xd08>
 800fdd4:	d9800a04 	addi	r6,sp,40
 800fdd8:	a80b883a 	mov	r5,r21
 800fddc:	b009883a 	mov	r4,r22
 800fde0:	10001a26 	beq	r2,zero,800fe4c <___vfiprintf_internal_r+0xdb8>
 800fde4:	d9c00315 	stw	r7,12(sp)
 800fde8:	da000215 	stw	r8,8(sp)
 800fdec:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800fdf0:	103dbb1e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800fdf4:	da000217 	ldw	r8,8(sp)
 800fdf8:	d9000b17 	ldw	r4,44(sp)
 800fdfc:	d8800c17 	ldw	r2,48(sp)
 800fe00:	423ffc04 	addi	r8,r8,-16
 800fe04:	40c00448 	cmpgei	r3,r8,17
 800fe08:	d9c00317 	ldw	r7,12(sp)
 800fe0c:	9021883a 	mov	r16,r18
 800fe10:	21400044 	addi	r5,r4,1
 800fe14:	03400404 	movi	r13,16
 800fe18:	183fe61e 	bne	r3,zero,800fdb4 <___vfiprintf_internal_r+0xd20>
 800fe1c:	81000204 	addi	r4,r16,8
 800fe20:	1205883a 	add	r2,r2,r8
 800fe24:	81c00015 	stw	r7,0(r16)
 800fe28:	82000115 	stw	r8,4(r16)
 800fe2c:	d8800c15 	stw	r2,48(sp)
 800fe30:	d9400b15 	stw	r5,44(sp)
 800fe34:	28c00208 	cmpgei	r3,r5,8
 800fe38:	1800721e 	bne	r3,zero,8010004 <___vfiprintf_internal_r+0xf70>
 800fe3c:	29400044 	addi	r5,r5,1
 800fe40:	21800204 	addi	r6,r4,8
 800fe44:	2021883a 	mov	r16,r4
 800fe48:	003d8506 	br	800f460 <___vfiprintf_internal_r+0x3cc>
 800fe4c:	01400044 	movi	r5,1
 800fe50:	0009883a 	mov	r4,zero
 800fe54:	9021883a 	mov	r16,r18
 800fe58:	003fd306 	br	800fda8 <___vfiprintf_internal_r+0xd14>
 800fe5c:	d9800a04 	addi	r6,sp,40
 800fe60:	a80b883a 	mov	r5,r21
 800fe64:	b009883a 	mov	r4,r22
 800fe68:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800fe6c:	103d9626 	beq	r2,zero,800f4c8 <___vfiprintf_internal_r+0x434>
 800fe70:	003d9b06 	br	800f4e0 <___vfiprintf_internal_r+0x44c>
 800fe74:	03800044 	movi	r14,1
 800fe78:	0009883a 	mov	r4,zero
 800fe7c:	9021883a 	mov	r16,r18
 800fe80:	003f8a06 	br	800fcac <___vfiprintf_internal_r+0xc18>
 800fe84:	10006e26 	beq	r2,zero,8010040 <___vfiprintf_internal_r+0xfac>
 800fe88:	d9800a04 	addi	r6,sp,40
 800fe8c:	a80b883a 	mov	r5,r21
 800fe90:	b009883a 	mov	r4,r22
 800fe94:	da000615 	stw	r8,24(sp)
 800fe98:	db400315 	stw	r13,12(sp)
 800fe9c:	db800215 	stw	r14,8(sp)
 800fea0:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800fea4:	103d8e1e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800fea8:	d9000b17 	ldw	r4,44(sp)
 800feac:	d8800c17 	ldw	r2,48(sp)
 800feb0:	da000617 	ldw	r8,24(sp)
 800feb4:	db400317 	ldw	r13,12(sp)
 800feb8:	db800217 	ldw	r14,8(sp)
 800febc:	d9801904 	addi	r6,sp,100
 800fec0:	21400044 	addi	r5,r4,1
 800fec4:	9021883a 	mov	r16,r18
 800fec8:	003d4806 	br	800f3ec <___vfiprintf_internal_r+0x358>
 800fecc:	d8800984 	addi	r2,sp,38
 800fed0:	d8801715 	stw	r2,92(sp)
 800fed4:	00800084 	movi	r2,2
 800fed8:	d8801815 	stw	r2,96(sp)
 800fedc:	d9801904 	addi	r6,sp,100
 800fee0:	01400044 	movi	r5,1
 800fee4:	3021883a 	mov	r16,r6
 800fee8:	2809883a 	mov	r4,r5
 800feec:	21400044 	addi	r5,r4,1
 800fef0:	81800204 	addi	r6,r16,8
 800fef4:	003d5606 	br	800f450 <___vfiprintf_internal_r+0x3bc>
 800fef8:	db400017 	ldw	r13,0(sp)
 800fefc:	003ea206 	br	800f988 <___vfiprintf_internal_r+0x8f4>
 800ff00:	19400450 	cmplti	r5,r3,17
 800ff04:	01c20174 	movhi	r7,2053
 800ff08:	2801011e 	bne	r5,zero,8010310 <___vfiprintf_internal_r+0x127c>
 800ff0c:	39c1f004 	addi	r7,r7,1984
 800ff10:	03c00404 	movi	r15,16
 800ff14:	00000706 	br	800ff34 <___vfiprintf_internal_r+0xea0>
 800ff18:	27c00084 	addi	ra,r4,2
 800ff1c:	84000204 	addi	r16,r16,8
 800ff20:	3009883a 	mov	r4,r6
 800ff24:	18fffc04 	addi	r3,r3,-16
 800ff28:	19400448 	cmpgei	r5,r3,17
 800ff2c:	28002026 	beq	r5,zero,800ffb0 <___vfiprintf_internal_r+0xf1c>
 800ff30:	21800044 	addi	r6,r4,1
 800ff34:	10800404 	addi	r2,r2,16
 800ff38:	81c00015 	stw	r7,0(r16)
 800ff3c:	83c00115 	stw	r15,4(r16)
 800ff40:	d8800c15 	stw	r2,48(sp)
 800ff44:	d9800b15 	stw	r6,44(sp)
 800ff48:	31400208 	cmpgei	r5,r6,8
 800ff4c:	283ff226 	beq	r5,zero,800ff18 <___vfiprintf_internal_r+0xe84>
 800ff50:	d9800a04 	addi	r6,sp,40
 800ff54:	a80b883a 	mov	r5,r21
 800ff58:	b009883a 	mov	r4,r22
 800ff5c:	10001f26 	beq	r2,zero,800ffdc <___vfiprintf_internal_r+0xf48>
 800ff60:	d9c00815 	stw	r7,32(sp)
 800ff64:	d8c00715 	stw	r3,28(sp)
 800ff68:	da000615 	stw	r8,24(sp)
 800ff6c:	db400315 	stw	r13,12(sp)
 800ff70:	db800215 	stw	r14,8(sp)
 800ff74:	800ef880 	call	800ef88 <__sprint_r.part.0>
 800ff78:	103d591e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 800ff7c:	d8c00717 	ldw	r3,28(sp)
 800ff80:	d9000b17 	ldw	r4,44(sp)
 800ff84:	d8800c17 	ldw	r2,48(sp)
 800ff88:	18fffc04 	addi	r3,r3,-16
 800ff8c:	19400448 	cmpgei	r5,r3,17
 800ff90:	d9c00817 	ldw	r7,32(sp)
 800ff94:	da000617 	ldw	r8,24(sp)
 800ff98:	db400317 	ldw	r13,12(sp)
 800ff9c:	db800217 	ldw	r14,8(sp)
 800ffa0:	9021883a 	mov	r16,r18
 800ffa4:	27c00044 	addi	ra,r4,1
 800ffa8:	03c00404 	movi	r15,16
 800ffac:	283fe01e 	bne	r5,zero,800ff30 <___vfiprintf_internal_r+0xe9c>
 800ffb0:	10c5883a 	add	r2,r2,r3
 800ffb4:	80c00115 	stw	r3,4(r16)
 800ffb8:	81c00015 	stw	r7,0(r16)
 800ffbc:	d8800c15 	stw	r2,48(sp)
 800ffc0:	dfc00b15 	stw	ra,44(sp)
 800ffc4:	f8c00208 	cmpgei	r3,ra,8
 800ffc8:	18002b1e 	bne	r3,zero,8010078 <___vfiprintf_internal_r+0xfe4>
 800ffcc:	84000204 	addi	r16,r16,8
 800ffd0:	f9400044 	addi	r5,ra,1
 800ffd4:	f809883a 	mov	r4,ra
 800ffd8:	003cf406 	br	800f3ac <___vfiprintf_internal_r+0x318>
 800ffdc:	0009883a 	mov	r4,zero
 800ffe0:	07c00044 	movi	ra,1
 800ffe4:	9021883a 	mov	r16,r18
 800ffe8:	003fce06 	br	800ff24 <___vfiprintf_internal_r+0xe90>
 800ffec:	8dc0010e 	bge	r17,r23,800fff4 <___vfiprintf_internal_r+0xf60>
 800fff0:	b823883a 	mov	r17,r23
 800fff4:	d8800117 	ldw	r2,4(sp)
 800fff8:	1445883a 	add	r2,r2,r17
 800fffc:	d8800115 	stw	r2,4(sp)
 8010000:	003d3106 	br	800f4c8 <___vfiprintf_internal_r+0x434>
 8010004:	10007326 	beq	r2,zero,80101d4 <___vfiprintf_internal_r+0x1140>
 8010008:	d9800a04 	addi	r6,sp,40
 801000c:	a80b883a 	mov	r5,r21
 8010010:	b009883a 	mov	r4,r22
 8010014:	800ef880 	call	800ef88 <__sprint_r.part.0>
 8010018:	103d311e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 801001c:	d9400b17 	ldw	r5,44(sp)
 8010020:	d8800c17 	ldw	r2,48(sp)
 8010024:	d9801904 	addi	r6,sp,100
 8010028:	29400044 	addi	r5,r5,1
 801002c:	9021883a 	mov	r16,r18
 8010030:	003d0b06 	br	800f460 <___vfiprintf_internal_r+0x3cc>
 8010034:	d8000b15 	stw	zero,44(sp)
 8010038:	9021883a 	mov	r16,r18
 801003c:	003d7a06 	br	800f628 <___vfiprintf_internal_r+0x594>
 8010040:	7000441e 	bne	r14,zero,8010154 <___vfiprintf_internal_r+0x10c0>
 8010044:	0009883a 	mov	r4,zero
 8010048:	d9801904 	addi	r6,sp,100
 801004c:	01400044 	movi	r5,1
 8010050:	9021883a 	mov	r16,r18
 8010054:	003cfe06 	br	800f450 <___vfiprintf_internal_r+0x3bc>
 8010058:	d9801904 	addi	r6,sp,100
 801005c:	01400044 	movi	r5,1
 8010060:	0009883a 	mov	r4,zero
 8010064:	9021883a 	mov	r16,r18
 8010068:	003cf906 	br	800f450 <___vfiprintf_internal_r+0x3bc>
 801006c:	0039883a 	mov	fp,zero
 8010070:	9027883a 	mov	r19,r18
 8010074:	003ded06 	br	800f82c <___vfiprintf_internal_r+0x798>
 8010078:	10004a26 	beq	r2,zero,80101a4 <___vfiprintf_internal_r+0x1110>
 801007c:	d9800a04 	addi	r6,sp,40
 8010080:	a80b883a 	mov	r5,r21
 8010084:	b009883a 	mov	r4,r22
 8010088:	da000615 	stw	r8,24(sp)
 801008c:	db400315 	stw	r13,12(sp)
 8010090:	db800215 	stw	r14,8(sp)
 8010094:	800ef880 	call	800ef88 <__sprint_r.part.0>
 8010098:	103d111e 	bne	r2,zero,800f4e0 <___vfiprintf_internal_r+0x44c>
 801009c:	d9000b17 	ldw	r4,44(sp)
 80100a0:	d8800c17 	ldw	r2,48(sp)
 80100a4:	da000617 	ldw	r8,24(sp)
 80100a8:	db400317 	ldw	r13,12(sp)
 80100ac:	db800217 	ldw	r14,8(sp)
 80100b0:	9021883a 	mov	r16,r18
 80100b4:	21400044 	addi	r5,r4,1
 80100b8:	003cbc06 	br	800f3ac <___vfiprintf_internal_r+0x318>
 80100bc:	9027883a 	mov	r19,r18
 80100c0:	003dda06 	br	800f82c <___vfiprintf_internal_r+0x798>
 80100c4:	71400044 	addi	r5,r14,1
 80100c8:	69800204 	addi	r6,r13,8
 80100cc:	7009883a 	mov	r4,r14
 80100d0:	6821883a 	mov	r16,r13
 80100d4:	003ce006 	br	800f458 <___vfiprintf_internal_r+0x3c4>
 80100d8:	00c00c04 	movi	r3,48
 80100dc:	d88009c5 	stb	r2,39(sp)
 80100e0:	d8c00985 	stb	r3,38(sp)
 80100e4:	6b400094 	ori	r13,r13,2
 80100e8:	00800084 	movi	r2,2
 80100ec:	003d3006 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 80100f0:	25c00017 	ldw	r23,0(r4)
 80100f4:	0039883a 	mov	fp,zero
 80100f8:	d8c00415 	stw	r3,16(sp)
 80100fc:	0005883a 	mov	r2,zero
 8010100:	003d2b06 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 8010104:	d9400117 	ldw	r5,4(sp)
 8010108:	d9000415 	stw	r4,16(sp)
 801010c:	2805d7fa 	srai	r2,r5,31
 8010110:	19400015 	stw	r5,0(r3)
 8010114:	18800115 	stw	r2,4(r3)
 8010118:	003c0706 	br	800f138 <___vfiprintf_internal_r+0xa4>
 801011c:	25c00017 	ldw	r23,0(r4)
 8010120:	d8c00415 	stw	r3,16(sp)
 8010124:	b839d7fa 	srai	fp,r23,31
 8010128:	e005883a 	mov	r2,fp
 801012c:	003da906 	br	800f7d4 <___vfiprintf_internal_r+0x740>
 8010130:	2dc00017 	ldw	r23,0(r5)
 8010134:	0039883a 	mov	fp,zero
 8010138:	d9000415 	stw	r4,16(sp)
 801013c:	003df106 	br	800f904 <___vfiprintf_internal_r+0x870>
 8010140:	25c00017 	ldw	r23,0(r4)
 8010144:	0039883a 	mov	fp,zero
 8010148:	d8c00415 	stw	r3,16(sp)
 801014c:	00800044 	movi	r2,1
 8010150:	003d1706 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 8010154:	d8800984 	addi	r2,sp,38
 8010158:	d8801715 	stw	r2,92(sp)
 801015c:	00800084 	movi	r2,2
 8010160:	d8801815 	stw	r2,96(sp)
 8010164:	dc001904 	addi	r16,sp,100
 8010168:	01000044 	movi	r4,1
 801016c:	003f5f06 	br	800feec <___vfiprintf_internal_r+0xe58>
 8010170:	0463c83a 	sub	r17,zero,r17
 8010174:	d8c00415 	stw	r3,16(sp)
 8010178:	003e3606 	br	800fa54 <___vfiprintf_internal_r+0x9c0>
 801017c:	9809883a 	mov	r4,r19
 8010180:	d8c00215 	stw	r3,8(sp)
 8010184:	db400015 	stw	r13,0(sp)
 8010188:	80044880 	call	8004488 <strlen>
 801018c:	d8c00217 	ldw	r3,8(sp)
 8010190:	db400017 	ldw	r13,0(sp)
 8010194:	1039883a 	mov	fp,r2
 8010198:	102f883a 	mov	r23,r2
 801019c:	d8c00415 	stw	r3,16(sp)
 80101a0:	003c7306 	br	800f370 <___vfiprintf_internal_r+0x2dc>
 80101a4:	d8c00947 	ldb	r3,37(sp)
 80101a8:	1800451e 	bne	r3,zero,80102c0 <___vfiprintf_internal_r+0x122c>
 80101ac:	703f471e 	bne	r14,zero,800fecc <___vfiprintf_internal_r+0xe38>
 80101b0:	0009883a 	mov	r4,zero
 80101b4:	d9801904 	addi	r6,sp,100
 80101b8:	01400044 	movi	r5,1
 80101bc:	9021883a 	mov	r16,r18
 80101c0:	003ca506 	br	800f458 <___vfiprintf_internal_r+0x3c4>
 80101c4:	d8800117 	ldw	r2,4(sp)
 80101c8:	18800015 	stw	r2,0(r3)
 80101cc:	d9000415 	stw	r4,16(sp)
 80101d0:	003bd906 	br	800f138 <___vfiprintf_internal_r+0xa4>
 80101d4:	00c00044 	movi	r3,1
 80101d8:	e005883a 	mov	r2,fp
 80101dc:	dcc01715 	stw	r19,92(sp)
 80101e0:	df001815 	stw	fp,96(sp)
 80101e4:	df000c15 	stw	fp,48(sp)
 80101e8:	d8c00b15 	stw	r3,44(sp)
 80101ec:	d9801904 	addi	r6,sp,100
 80101f0:	003caa06 	br	800f49c <___vfiprintf_internal_r+0x408>
 80101f4:	10c00060 	cmpeqi	r3,r2,1
 80101f8:	db400017 	ldw	r13,0(sp)
 80101fc:	183de426 	beq	r3,zero,800f990 <___vfiprintf_internal_r+0x8fc>
 8010200:	003d8506 	br	800f818 <___vfiprintf_internal_r+0x784>
 8010204:	a0800043 	ldbu	r2,1(r20)
 8010208:	6b400814 	ori	r13,r13,32
 801020c:	a5000044 	addi	r20,r20,1
 8010210:	10803fcc 	andi	r2,r2,255
 8010214:	1080201c 	xori	r2,r2,128
 8010218:	10bfe004 	addi	r2,r2,-128
 801021c:	003bde06 	br	800f198 <___vfiprintf_internal_r+0x104>
 8010220:	408001f0 	cmpltui	r2,r8,7
 8010224:	4039883a 	mov	fp,r8
 8010228:	1000011e 	bne	r2,zero,8010230 <___vfiprintf_internal_r+0x119c>
 801022c:	07000184 	movi	fp,6
 8010230:	04c20174 	movhi	r19,2053
 8010234:	e02f883a 	mov	r23,fp
 8010238:	d8c00415 	stw	r3,16(sp)
 801023c:	9cc16104 	addi	r19,r19,1412
 8010240:	003c4b06 	br	800f370 <___vfiprintf_internal_r+0x2dc>
 8010244:	d8800417 	ldw	r2,16(sp)
 8010248:	0039883a 	mov	fp,zero
 801024c:	d8c00415 	stw	r3,16(sp)
 8010250:	15c00017 	ldw	r23,0(r2)
 8010254:	0005883a 	mov	r2,zero
 8010258:	003cd506 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 801025c:	d8800417 	ldw	r2,16(sp)
 8010260:	0039883a 	mov	fp,zero
 8010264:	d8c00415 	stw	r3,16(sp)
 8010268:	15c00017 	ldw	r23,0(r2)
 801026c:	00800044 	movi	r2,1
 8010270:	003ccf06 	br	800f5b0 <___vfiprintf_internal_r+0x51c>
 8010274:	d8c00417 	ldw	r3,16(sp)
 8010278:	0039883a 	mov	fp,zero
 801027c:	d9000415 	stw	r4,16(sp)
 8010280:	1dc00017 	ldw	r23,0(r3)
 8010284:	003d9f06 	br	800f904 <___vfiprintf_internal_r+0x870>
 8010288:	d8800417 	ldw	r2,16(sp)
 801028c:	d8c00415 	stw	r3,16(sp)
 8010290:	15c00017 	ldw	r23,0(r2)
 8010294:	b839d7fa 	srai	fp,r23,31
 8010298:	e005883a 	mov	r2,fp
 801029c:	003d4d06 	br	800f7d4 <___vfiprintf_internal_r+0x740>
 80102a0:	3009883a 	mov	r4,r6
 80102a4:	39c1ec04 	addi	r7,r7,1968
 80102a8:	003edd06 	br	800fe20 <___vfiprintf_internal_r+0xd8c>
 80102ac:	d9801904 	addi	r6,sp,100
 80102b0:	01400044 	movi	r5,1
 80102b4:	0009883a 	mov	r4,zero
 80102b8:	9021883a 	mov	r16,r18
 80102bc:	003c6606 	br	800f458 <___vfiprintf_internal_r+0x3c4>
 80102c0:	d8800944 	addi	r2,sp,37
 80102c4:	d8801715 	stw	r2,92(sp)
 80102c8:	00800044 	movi	r2,1
 80102cc:	d8801815 	stw	r2,96(sp)
 80102d0:	d9801904 	addi	r6,sp,100
 80102d4:	01400044 	movi	r5,1
 80102d8:	003c4006 	br	800f3dc <___vfiprintf_internal_r+0x348>
 80102dc:	d9800945 	stb	r6,37(sp)
 80102e0:	003c1d06 	br	800f358 <___vfiprintf_internal_r+0x2c4>
 80102e4:	d9800a04 	addi	r6,sp,40
 80102e8:	a80b883a 	mov	r5,r21
 80102ec:	b009883a 	mov	r4,r22
 80102f0:	800ef880 	call	800ef88 <__sprint_r.part.0>
 80102f4:	003c7a06 	br	800f4e0 <___vfiprintf_internal_r+0x44c>
 80102f8:	402f883a 	mov	r23,r8
 80102fc:	d8c00415 	stw	r3,16(sp)
 8010300:	4039883a 	mov	fp,r8
 8010304:	003c1a06 	br	800f370 <___vfiprintf_internal_r+0x2dc>
 8010308:	d9800945 	stb	r6,37(sp)
 801030c:	003df406 	br	800fae0 <___vfiprintf_internal_r+0xa4c>
 8010310:	303f883a 	mov	ra,r6
 8010314:	39c1f004 	addi	r7,r7,1984
 8010318:	003f2506 	br	800ffb0 <___vfiprintf_internal_r+0xf1c>
 801031c:	d9800945 	stb	r6,37(sp)
 8010320:	003d8006 	br	800f924 <___vfiprintf_internal_r+0x890>
 8010324:	d9800945 	stb	r6,37(sp)
 8010328:	003d4e06 	br	800f864 <___vfiprintf_internal_r+0x7d0>
 801032c:	d9800945 	stb	r6,37(sp)
 8010330:	003d2006 	br	800f7b4 <___vfiprintf_internal_r+0x720>
 8010334:	d9800945 	stb	r6,37(sp)
 8010338:	003d6806 	br	800f8dc <___vfiprintf_internal_r+0x848>
 801033c:	21400044 	addi	r5,r4,1
 8010340:	39c1f004 	addi	r7,r7,1984
 8010344:	003d0806 	br	800f768 <___vfiprintf_internal_r+0x6d4>
 8010348:	01c20174 	movhi	r7,2053
 801034c:	301b883a 	mov	r13,r6
 8010350:	281d883a 	mov	r14,r5
 8010354:	39c1ec04 	addi	r7,r7,1968
 8010358:	003e7406 	br	800fd2c <___vfiprintf_internal_r+0xc98>
 801035c:	00bfffc4 	movi	r2,-1
 8010360:	d8800115 	stw	r2,4(sp)
 8010364:	003c6106 	br	800f4ec <___vfiprintf_internal_r+0x458>
 8010368:	d8800417 	ldw	r2,16(sp)
 801036c:	12000017 	ldw	r8,0(r2)
 8010370:	10c00104 	addi	r3,r2,4
 8010374:	4000010e 	bge	r8,zero,801037c <___vfiprintf_internal_r+0x12e8>
 8010378:	023fffc4 	movi	r8,-1
 801037c:	a0800043 	ldbu	r2,1(r20)
 8010380:	d8c00415 	stw	r3,16(sp)
 8010384:	2029883a 	mov	r20,r4
 8010388:	10803fcc 	andi	r2,r2,255
 801038c:	1080201c 	xori	r2,r2,128
 8010390:	10bfe004 	addi	r2,r2,-128
 8010394:	003b8006 	br	800f198 <___vfiprintf_internal_r+0x104>

08010398 <__vfiprintf_internal>:
 8010398:	00c20174 	movhi	r3,2053
 801039c:	2005883a 	mov	r2,r4
 80103a0:	191bd417 	ldw	r4,28496(r3)
 80103a4:	300f883a 	mov	r7,r6
 80103a8:	280d883a 	mov	r6,r5
 80103ac:	100b883a 	mov	r5,r2
 80103b0:	800f0941 	jmpi	800f094 <___vfiprintf_internal_r>

080103b4 <__sbprintf>:
 80103b4:	2880030b 	ldhu	r2,12(r5)
 80103b8:	2b001917 	ldw	r12,100(r5)
 80103bc:	2ac0038b 	ldhu	r11,14(r5)
 80103c0:	2a800717 	ldw	r10,28(r5)
 80103c4:	2a400917 	ldw	r9,36(r5)
 80103c8:	defee204 	addi	sp,sp,-1144
 80103cc:	da001a04 	addi	r8,sp,104
 80103d0:	00c10004 	movi	r3,1024
 80103d4:	dc011a15 	stw	r16,1128(sp)
 80103d8:	10bfff4c 	andi	r2,r2,65533
 80103dc:	2821883a 	mov	r16,r5
 80103e0:	d80b883a 	mov	r5,sp
 80103e4:	dc811c15 	stw	r18,1136(sp)
 80103e8:	dc411b15 	stw	r17,1132(sp)
 80103ec:	dfc11d15 	stw	ra,1140(sp)
 80103f0:	2025883a 	mov	r18,r4
 80103f4:	d880030d 	sth	r2,12(sp)
 80103f8:	db001915 	stw	r12,100(sp)
 80103fc:	dac0038d 	sth	r11,14(sp)
 8010400:	da800715 	stw	r10,28(sp)
 8010404:	da400915 	stw	r9,36(sp)
 8010408:	da000015 	stw	r8,0(sp)
 801040c:	da000415 	stw	r8,16(sp)
 8010410:	d8c00215 	stw	r3,8(sp)
 8010414:	d8c00515 	stw	r3,20(sp)
 8010418:	d8000615 	stw	zero,24(sp)
 801041c:	800f0940 	call	800f094 <___vfiprintf_internal_r>
 8010420:	1023883a 	mov	r17,r2
 8010424:	10000d0e 	bge	r2,zero,801045c <__sbprintf+0xa8>
 8010428:	d880030b 	ldhu	r2,12(sp)
 801042c:	1080100c 	andi	r2,r2,64
 8010430:	10000326 	beq	r2,zero,8010440 <__sbprintf+0x8c>
 8010434:	8080030b 	ldhu	r2,12(r16)
 8010438:	10801014 	ori	r2,r2,64
 801043c:	8080030d 	sth	r2,12(r16)
 8010440:	8805883a 	mov	r2,r17
 8010444:	dfc11d17 	ldw	ra,1140(sp)
 8010448:	dc811c17 	ldw	r18,1136(sp)
 801044c:	dc411b17 	ldw	r17,1132(sp)
 8010450:	dc011a17 	ldw	r16,1128(sp)
 8010454:	dec11e04 	addi	sp,sp,1144
 8010458:	f800283a 	ret
 801045c:	d80b883a 	mov	r5,sp
 8010460:	9009883a 	mov	r4,r18
 8010464:	800a7f40 	call	800a7f4 <_fflush_r>
 8010468:	103fef26 	beq	r2,zero,8010428 <__sbprintf+0x74>
 801046c:	047fffc4 	movi	r17,-1
 8010470:	003fed06 	br	8010428 <__sbprintf+0x74>

08010474 <__swbuf_r>:
 8010474:	defffb04 	addi	sp,sp,-20
 8010478:	dcc00315 	stw	r19,12(sp)
 801047c:	dc400115 	stw	r17,4(sp)
 8010480:	dc000015 	stw	r16,0(sp)
 8010484:	dfc00415 	stw	ra,16(sp)
 8010488:	dc800215 	stw	r18,8(sp)
 801048c:	2027883a 	mov	r19,r4
 8010490:	2823883a 	mov	r17,r5
 8010494:	3021883a 	mov	r16,r6
 8010498:	20000226 	beq	r4,zero,80104a4 <__swbuf_r+0x30>
 801049c:	20800e17 	ldw	r2,56(r4)
 80104a0:	10003e26 	beq	r2,zero,801059c <__swbuf_r+0x128>
 80104a4:	80800617 	ldw	r2,24(r16)
 80104a8:	80c0030b 	ldhu	r3,12(r16)
 80104ac:	80800215 	stw	r2,8(r16)
 80104b0:	1880020c 	andi	r2,r3,8
 80104b4:	10001f26 	beq	r2,zero,8010534 <__swbuf_r+0xc0>
 80104b8:	80800417 	ldw	r2,16(r16)
 80104bc:	10001d26 	beq	r2,zero,8010534 <__swbuf_r+0xc0>
 80104c0:	1948000c 	andi	r5,r3,8192
 80104c4:	8c803fcc 	andi	r18,r17,255
 80104c8:	28002326 	beq	r5,zero,8010558 <__swbuf_r+0xe4>
 80104cc:	80c00017 	ldw	r3,0(r16)
 80104d0:	81000517 	ldw	r4,20(r16)
 80104d4:	1885c83a 	sub	r2,r3,r2
 80104d8:	1100290e 	bge	r2,r4,8010580 <__swbuf_r+0x10c>
 80104dc:	10800044 	addi	r2,r2,1
 80104e0:	81400217 	ldw	r5,8(r16)
 80104e4:	19000044 	addi	r4,r3,1
 80104e8:	81000015 	stw	r4,0(r16)
 80104ec:	297fffc4 	addi	r5,r5,-1
 80104f0:	81400215 	stw	r5,8(r16)
 80104f4:	1c400005 	stb	r17,0(r3)
 80104f8:	80c00517 	ldw	r3,20(r16)
 80104fc:	18802926 	beq	r3,r2,80105a4 <__swbuf_r+0x130>
 8010500:	8080030b 	ldhu	r2,12(r16)
 8010504:	1080004c 	andi	r2,r2,1
 8010508:	10000226 	beq	r2,zero,8010514 <__swbuf_r+0xa0>
 801050c:	90800298 	cmpnei	r2,r18,10
 8010510:	10002426 	beq	r2,zero,80105a4 <__swbuf_r+0x130>
 8010514:	9005883a 	mov	r2,r18
 8010518:	dfc00417 	ldw	ra,16(sp)
 801051c:	dcc00317 	ldw	r19,12(sp)
 8010520:	dc800217 	ldw	r18,8(sp)
 8010524:	dc400117 	ldw	r17,4(sp)
 8010528:	dc000017 	ldw	r16,0(sp)
 801052c:	dec00504 	addi	sp,sp,20
 8010530:	f800283a 	ret
 8010534:	800b883a 	mov	r5,r16
 8010538:	9809883a 	mov	r4,r19
 801053c:	8008b240 	call	8008b24 <__swsetup_r>
 8010540:	10001c1e 	bne	r2,zero,80105b4 <__swbuf_r+0x140>
 8010544:	80c0030b 	ldhu	r3,12(r16)
 8010548:	80800417 	ldw	r2,16(r16)
 801054c:	8c803fcc 	andi	r18,r17,255
 8010550:	1948000c 	andi	r5,r3,8192
 8010554:	283fdd1e 	bne	r5,zero,80104cc <__swbuf_r+0x58>
 8010558:	81001917 	ldw	r4,100(r16)
 801055c:	18c80014 	ori	r3,r3,8192
 8010560:	0177ffc4 	movi	r5,-8193
 8010564:	2148703a 	and	r4,r4,r5
 8010568:	80c0030d 	sth	r3,12(r16)
 801056c:	80c00017 	ldw	r3,0(r16)
 8010570:	81001915 	stw	r4,100(r16)
 8010574:	81000517 	ldw	r4,20(r16)
 8010578:	1885c83a 	sub	r2,r3,r2
 801057c:	113fd716 	blt	r2,r4,80104dc <__swbuf_r+0x68>
 8010580:	800b883a 	mov	r5,r16
 8010584:	9809883a 	mov	r4,r19
 8010588:	800a7f40 	call	800a7f4 <_fflush_r>
 801058c:	1000091e 	bne	r2,zero,80105b4 <__swbuf_r+0x140>
 8010590:	80c00017 	ldw	r3,0(r16)
 8010594:	00800044 	movi	r2,1
 8010598:	003fd106 	br	80104e0 <__swbuf_r+0x6c>
 801059c:	800abdc0 	call	800abdc <__sinit>
 80105a0:	003fc006 	br	80104a4 <__swbuf_r+0x30>
 80105a4:	800b883a 	mov	r5,r16
 80105a8:	9809883a 	mov	r4,r19
 80105ac:	800a7f40 	call	800a7f4 <_fflush_r>
 80105b0:	103fd826 	beq	r2,zero,8010514 <__swbuf_r+0xa0>
 80105b4:	04bfffc4 	movi	r18,-1
 80105b8:	003fd606 	br	8010514 <__swbuf_r+0xa0>

080105bc <__swbuf>:
 80105bc:	00c20174 	movhi	r3,2053
 80105c0:	2005883a 	mov	r2,r4
 80105c4:	191bd417 	ldw	r4,28496(r3)
 80105c8:	280d883a 	mov	r6,r5
 80105cc:	100b883a 	mov	r5,r2
 80105d0:	80104741 	jmpi	8010474 <__swbuf_r>

080105d4 <_close_r>:
 80105d4:	defffe04 	addi	sp,sp,-8
 80105d8:	dc000015 	stw	r16,0(sp)
 80105dc:	00820174 	movhi	r2,2053
 80105e0:	2021883a 	mov	r16,r4
 80105e4:	2809883a 	mov	r4,r5
 80105e8:	dfc00115 	stw	ra,4(sp)
 80105ec:	101c2d15 	stw	zero,28852(r2)
 80105f0:	8028c400 	call	8028c40 <close>
 80105f4:	10ffffd8 	cmpnei	r3,r2,-1
 80105f8:	18000426 	beq	r3,zero,801060c <_close_r+0x38>
 80105fc:	dfc00117 	ldw	ra,4(sp)
 8010600:	dc000017 	ldw	r16,0(sp)
 8010604:	dec00204 	addi	sp,sp,8
 8010608:	f800283a 	ret
 801060c:	00c20174 	movhi	r3,2053
 8010610:	18dc2d17 	ldw	r3,28852(r3)
 8010614:	183ff926 	beq	r3,zero,80105fc <_close_r+0x28>
 8010618:	80c00015 	stw	r3,0(r16)
 801061c:	dfc00117 	ldw	ra,4(sp)
 8010620:	dc000017 	ldw	r16,0(sp)
 8010624:	dec00204 	addi	sp,sp,8
 8010628:	f800283a 	ret

0801062c <__assert_func>:
 801062c:	00820174 	movhi	r2,2053
 8010630:	121bd417 	ldw	r8,28496(r2)
 8010634:	defffc04 	addi	sp,sp,-16
 8010638:	3807883a 	mov	r3,r7
 801063c:	3005883a 	mov	r2,r6
 8010640:	dfc00315 	stw	ra,12(sp)
 8010644:	42400317 	ldw	r9,12(r8)
 8010648:	200f883a 	mov	r7,r4
 801064c:	2811883a 	mov	r8,r5
 8010650:	180d883a 	mov	r6,r3
 8010654:	10000a26 	beq	r2,zero,8010680 <__assert_func+0x54>
 8010658:	00c20174 	movhi	r3,2053
 801065c:	18c1f404 	addi	r3,r3,2000
 8010660:	01420174 	movhi	r5,2053
 8010664:	2941f804 	addi	r5,r5,2016
 8010668:	4809883a 	mov	r4,r9
 801066c:	d8c00115 	stw	r3,4(sp)
 8010670:	da000015 	stw	r8,0(sp)
 8010674:	d8800215 	stw	r2,8(sp)
 8010678:	80108800 	call	8010880 <fiprintf>
 801067c:	80110f40 	call	80110f4 <abort>
 8010680:	00c20174 	movhi	r3,2053
 8010684:	18c1f704 	addi	r3,r3,2012
 8010688:	1805883a 	mov	r2,r3
 801068c:	003ff406 	br	8010660 <__assert_func+0x34>

08010690 <__assert>:
 8010690:	deffff04 	addi	sp,sp,-4
 8010694:	300f883a 	mov	r7,r6
 8010698:	000d883a 	mov	r6,zero
 801069c:	dfc00015 	stw	ra,0(sp)
 80106a0:	801062c0 	call	801062c <__assert_func>

080106a4 <_calloc_r>:
 80106a4:	298b383a 	mul	r5,r5,r6
 80106a8:	deffff04 	addi	sp,sp,-4
 80106ac:	dfc00015 	stw	ra,0(sp)
 80106b0:	800b93c0 	call	800b93c <_malloc_r>
 80106b4:	1009883a 	mov	r4,r2
 80106b8:	10000c26 	beq	r2,zero,80106ec <_calloc_r+0x48>
 80106bc:	11bfff17 	ldw	r6,-4(r2)
 80106c0:	00bfff04 	movi	r2,-4
 80106c4:	308c703a 	and	r6,r6,r2
 80106c8:	31bfff04 	addi	r6,r6,-4
 80106cc:	30800968 	cmpgeui	r2,r6,37
 80106d0:	1000141e 	bne	r2,zero,8010724 <_calloc_r+0x80>
 80106d4:	30800530 	cmpltui	r2,r6,20
 80106d8:	10000826 	beq	r2,zero,80106fc <_calloc_r+0x58>
 80106dc:	2005883a 	mov	r2,r4
 80106e0:	10000015 	stw	zero,0(r2)
 80106e4:	10000115 	stw	zero,4(r2)
 80106e8:	10000215 	stw	zero,8(r2)
 80106ec:	2005883a 	mov	r2,r4
 80106f0:	dfc00017 	ldw	ra,0(sp)
 80106f4:	dec00104 	addi	sp,sp,4
 80106f8:	f800283a 	ret
 80106fc:	20000015 	stw	zero,0(r4)
 8010700:	20000115 	stw	zero,4(r4)
 8010704:	30800728 	cmpgeui	r2,r6,28
 8010708:	10000d26 	beq	r2,zero,8010740 <_calloc_r+0x9c>
 801070c:	20000215 	stw	zero,8(r4)
 8010710:	20000315 	stw	zero,12(r4)
 8010714:	31800920 	cmpeqi	r6,r6,36
 8010718:	30000b1e 	bne	r6,zero,8010748 <_calloc_r+0xa4>
 801071c:	20800404 	addi	r2,r4,16
 8010720:	003fef06 	br	80106e0 <_calloc_r+0x3c>
 8010724:	000b883a 	mov	r5,zero
 8010728:	80038cc0 	call	80038cc <memset>
 801072c:	1009883a 	mov	r4,r2
 8010730:	2005883a 	mov	r2,r4
 8010734:	dfc00017 	ldw	ra,0(sp)
 8010738:	dec00104 	addi	sp,sp,4
 801073c:	f800283a 	ret
 8010740:	20800204 	addi	r2,r4,8
 8010744:	003fe606 	br	80106e0 <_calloc_r+0x3c>
 8010748:	20000415 	stw	zero,16(r4)
 801074c:	20800604 	addi	r2,r4,24
 8010750:	20000515 	stw	zero,20(r4)
 8010754:	003fe206 	br	80106e0 <_calloc_r+0x3c>

08010758 <_fclose_r>:
 8010758:	defffc04 	addi	sp,sp,-16
 801075c:	dfc00315 	stw	ra,12(sp)
 8010760:	dc800215 	stw	r18,8(sp)
 8010764:	dc400115 	stw	r17,4(sp)
 8010768:	dc000015 	stw	r16,0(sp)
 801076c:	28000726 	beq	r5,zero,801078c <_fclose_r+0x34>
 8010770:	2821883a 	mov	r16,r5
 8010774:	2023883a 	mov	r17,r4
 8010778:	20000226 	beq	r4,zero,8010784 <_fclose_r+0x2c>
 801077c:	20800e17 	ldw	r2,56(r4)
 8010780:	10002726 	beq	r2,zero,8010820 <_fclose_r+0xc8>
 8010784:	8080030f 	ldh	r2,12(r16)
 8010788:	1000081e 	bne	r2,zero,80107ac <_fclose_r+0x54>
 801078c:	0025883a 	mov	r18,zero
 8010790:	9005883a 	mov	r2,r18
 8010794:	dfc00317 	ldw	ra,12(sp)
 8010798:	dc800217 	ldw	r18,8(sp)
 801079c:	dc400117 	ldw	r17,4(sp)
 80107a0:	dc000017 	ldw	r16,0(sp)
 80107a4:	dec00404 	addi	sp,sp,16
 80107a8:	f800283a 	ret
 80107ac:	800b883a 	mov	r5,r16
 80107b0:	8809883a 	mov	r4,r17
 80107b4:	800a5cc0 	call	800a5cc <__sflush_r>
 80107b8:	80c00b17 	ldw	r3,44(r16)
 80107bc:	1025883a 	mov	r18,r2
 80107c0:	18000426 	beq	r3,zero,80107d4 <_fclose_r+0x7c>
 80107c4:	81400717 	ldw	r5,28(r16)
 80107c8:	8809883a 	mov	r4,r17
 80107cc:	183ee83a 	callr	r3
 80107d0:	10001716 	blt	r2,zero,8010830 <_fclose_r+0xd8>
 80107d4:	8080030b 	ldhu	r2,12(r16)
 80107d8:	1080200c 	andi	r2,r2,128
 80107dc:	1000181e 	bne	r2,zero,8010840 <_fclose_r+0xe8>
 80107e0:	81400c17 	ldw	r5,48(r16)
 80107e4:	28000526 	beq	r5,zero,80107fc <_fclose_r+0xa4>
 80107e8:	80801004 	addi	r2,r16,64
 80107ec:	28800226 	beq	r5,r2,80107f8 <_fclose_r+0xa0>
 80107f0:	8809883a 	mov	r4,r17
 80107f4:	800ad400 	call	800ad40 <_free_r>
 80107f8:	80000c15 	stw	zero,48(r16)
 80107fc:	81401117 	ldw	r5,68(r16)
 8010800:	28000326 	beq	r5,zero,8010810 <_fclose_r+0xb8>
 8010804:	8809883a 	mov	r4,r17
 8010808:	800ad400 	call	800ad40 <_free_r>
 801080c:	80001115 	stw	zero,68(r16)
 8010810:	800abec0 	call	800abec <__sfp_lock_acquire>
 8010814:	8000030d 	sth	zero,12(r16)
 8010818:	800abf00 	call	800abf0 <__sfp_lock_release>
 801081c:	003fdc06 	br	8010790 <_fclose_r+0x38>
 8010820:	800abdc0 	call	800abdc <__sinit>
 8010824:	8080030f 	ldh	r2,12(r16)
 8010828:	103fd826 	beq	r2,zero,801078c <_fclose_r+0x34>
 801082c:	003fdf06 	br	80107ac <_fclose_r+0x54>
 8010830:	8080030b 	ldhu	r2,12(r16)
 8010834:	04bfffc4 	movi	r18,-1
 8010838:	1080200c 	andi	r2,r2,128
 801083c:	103fe826 	beq	r2,zero,80107e0 <_fclose_r+0x88>
 8010840:	81400417 	ldw	r5,16(r16)
 8010844:	8809883a 	mov	r4,r17
 8010848:	800ad400 	call	800ad40 <_free_r>
 801084c:	003fe406 	br	80107e0 <_fclose_r+0x88>

08010850 <fclose>:
 8010850:	00820174 	movhi	r2,2053
 8010854:	200b883a 	mov	r5,r4
 8010858:	111bd417 	ldw	r4,28496(r2)
 801085c:	80107581 	jmpi	8010758 <_fclose_r>

08010860 <_fiprintf_r>:
 8010860:	defffe04 	addi	sp,sp,-8
 8010864:	dfc00015 	stw	ra,0(sp)
 8010868:	d9c00115 	stw	r7,4(sp)
 801086c:	d9c00104 	addi	r7,sp,4
 8010870:	8010fc00 	call	8010fc0 <_vfiprintf_r>
 8010874:	dfc00017 	ldw	ra,0(sp)
 8010878:	dec00204 	addi	sp,sp,8
 801087c:	f800283a 	ret

08010880 <fiprintf>:
 8010880:	defffd04 	addi	sp,sp,-12
 8010884:	2005883a 	mov	r2,r4
 8010888:	dfc00015 	stw	ra,0(sp)
 801088c:	d9800115 	stw	r6,4(sp)
 8010890:	d9c00215 	stw	r7,8(sp)
 8010894:	00c20174 	movhi	r3,2053
 8010898:	191bd417 	ldw	r4,28496(r3)
 801089c:	280d883a 	mov	r6,r5
 80108a0:	d9c00104 	addi	r7,sp,4
 80108a4:	100b883a 	mov	r5,r2
 80108a8:	8010fc00 	call	8010fc0 <_vfiprintf_r>
 80108ac:	dfc00017 	ldw	ra,0(sp)
 80108b0:	dec00304 	addi	sp,sp,12
 80108b4:	f800283a 	ret

080108b8 <__fputwc>:
 80108b8:	defff904 	addi	sp,sp,-28
 80108bc:	dcc00415 	stw	r19,16(sp)
 80108c0:	dc800315 	stw	r18,12(sp)
 80108c4:	dc000115 	stw	r16,4(sp)
 80108c8:	dfc00615 	stw	ra,24(sp)
 80108cc:	dd000515 	stw	r20,20(sp)
 80108d0:	dc400215 	stw	r17,8(sp)
 80108d4:	2025883a 	mov	r18,r4
 80108d8:	2827883a 	mov	r19,r5
 80108dc:	3021883a 	mov	r16,r6
 80108e0:	8010be40 	call	8010be4 <__locale_mb_cur_max>
 80108e4:	10800058 	cmpnei	r2,r2,1
 80108e8:	1000071e 	bne	r2,zero,8010908 <__fputwc+0x50>
 80108ec:	98bfffc4 	addi	r2,r19,-1
 80108f0:	10803fe8 	cmpgeui	r2,r2,255
 80108f4:	1000041e 	bne	r2,zero,8010908 <__fputwc+0x50>
 80108f8:	980b883a 	mov	r5,r19
 80108fc:	dcc000c5 	stb	r19,3(sp)
 8010900:	05000044 	movi	r20,1
 8010904:	00000a06 	br	8010930 <__fputwc+0x78>
 8010908:	81c01704 	addi	r7,r16,92
 801090c:	980d883a 	mov	r6,r19
 8010910:	d94000c4 	addi	r5,sp,3
 8010914:	9009883a 	mov	r4,r18
 8010918:	8010fc40 	call	8010fc4 <_wcrtomb_r>
 801091c:	1029883a 	mov	r20,r2
 8010920:	10bfffd8 	cmpnei	r2,r2,-1
 8010924:	10003926 	beq	r2,zero,8010a0c <__fputwc+0x154>
 8010928:	a0001f26 	beq	r20,zero,80109a8 <__fputwc+0xf0>
 801092c:	d94000c3 	ldbu	r5,3(sp)
 8010930:	0023883a 	mov	r17,zero
 8010934:	00000a06 	br	8010960 <__fputwc+0xa8>
 8010938:	80800017 	ldw	r2,0(r16)
 801093c:	11400005 	stb	r5,0(r2)
 8010940:	80c00017 	ldw	r3,0(r16)
 8010944:	18c00044 	addi	r3,r3,1
 8010948:	80c00015 	stw	r3,0(r16)
 801094c:	8c400044 	addi	r17,r17,1
 8010950:	d88000c4 	addi	r2,sp,3
 8010954:	1447883a 	add	r3,r2,r17
 8010958:	8d00132e 	bgeu	r17,r20,80109a8 <__fputwc+0xf0>
 801095c:	19400003 	ldbu	r5,0(r3)
 8010960:	80c00217 	ldw	r3,8(r16)
 8010964:	18ffffc4 	addi	r3,r3,-1
 8010968:	80c00215 	stw	r3,8(r16)
 801096c:	183ff20e 	bge	r3,zero,8010938 <__fputwc+0x80>
 8010970:	80800617 	ldw	r2,24(r16)
 8010974:	18801616 	blt	r3,r2,80109d0 <__fputwc+0x118>
 8010978:	80800017 	ldw	r2,0(r16)
 801097c:	11400005 	stb	r5,0(r2)
 8010980:	80800017 	ldw	r2,0(r16)
 8010984:	10c00003 	ldbu	r3,0(r2)
 8010988:	10800044 	addi	r2,r2,1
 801098c:	18c002a0 	cmpeqi	r3,r3,10
 8010990:	1800181e 	bne	r3,zero,80109f4 <__fputwc+0x13c>
 8010994:	80800015 	stw	r2,0(r16)
 8010998:	8c400044 	addi	r17,r17,1
 801099c:	d88000c4 	addi	r2,sp,3
 80109a0:	1447883a 	add	r3,r2,r17
 80109a4:	8d3fed36 	bltu	r17,r20,801095c <__fputwc+0xa4>
 80109a8:	9829883a 	mov	r20,r19
 80109ac:	a005883a 	mov	r2,r20
 80109b0:	dfc00617 	ldw	ra,24(sp)
 80109b4:	dd000517 	ldw	r20,20(sp)
 80109b8:	dcc00417 	ldw	r19,16(sp)
 80109bc:	dc800317 	ldw	r18,12(sp)
 80109c0:	dc400217 	ldw	r17,8(sp)
 80109c4:	dc000117 	ldw	r16,4(sp)
 80109c8:	dec00704 	addi	sp,sp,28
 80109cc:	f800283a 	ret
 80109d0:	29403fcc 	andi	r5,r5,255
 80109d4:	800d883a 	mov	r6,r16
 80109d8:	9009883a 	mov	r4,r18
 80109dc:	80104740 	call	8010474 <__swbuf_r>
 80109e0:	10ffffe0 	cmpeqi	r3,r2,-1
 80109e4:	18c03fcc 	andi	r3,r3,255
 80109e8:	183fd826 	beq	r3,zero,801094c <__fputwc+0x94>
 80109ec:	053fffc4 	movi	r20,-1
 80109f0:	003fee06 	br	80109ac <__fputwc+0xf4>
 80109f4:	800d883a 	mov	r6,r16
 80109f8:	01400284 	movi	r5,10
 80109fc:	9009883a 	mov	r4,r18
 8010a00:	80104740 	call	8010474 <__swbuf_r>
 8010a04:	10ffffe0 	cmpeqi	r3,r2,-1
 8010a08:	003ff606 	br	80109e4 <__fputwc+0x12c>
 8010a0c:	8080030b 	ldhu	r2,12(r16)
 8010a10:	10801014 	ori	r2,r2,64
 8010a14:	8080030d 	sth	r2,12(r16)
 8010a18:	003fe406 	br	80109ac <__fputwc+0xf4>

08010a1c <_fputwc_r>:
 8010a1c:	3080030b 	ldhu	r2,12(r6)
 8010a20:	10c8000c 	andi	r3,r2,8192
 8010a24:	1800051e 	bne	r3,zero,8010a3c <_fputwc_r+0x20>
 8010a28:	30c01917 	ldw	r3,100(r6)
 8010a2c:	10880014 	ori	r2,r2,8192
 8010a30:	3080030d 	sth	r2,12(r6)
 8010a34:	18880014 	ori	r2,r3,8192
 8010a38:	30801915 	stw	r2,100(r6)
 8010a3c:	80108b81 	jmpi	80108b8 <__fputwc>

08010a40 <fputwc>:
 8010a40:	defffc04 	addi	sp,sp,-16
 8010a44:	00820174 	movhi	r2,2053
 8010a48:	dc000215 	stw	r16,8(sp)
 8010a4c:	141bd417 	ldw	r16,28496(r2)
 8010a50:	dfc00315 	stw	ra,12(sp)
 8010a54:	280d883a 	mov	r6,r5
 8010a58:	200b883a 	mov	r5,r4
 8010a5c:	80000226 	beq	r16,zero,8010a68 <fputwc+0x28>
 8010a60:	80800e17 	ldw	r2,56(r16)
 8010a64:	10000d26 	beq	r2,zero,8010a9c <fputwc+0x5c>
 8010a68:	3080030b 	ldhu	r2,12(r6)
 8010a6c:	10c8000c 	andi	r3,r2,8192
 8010a70:	1800051e 	bne	r3,zero,8010a88 <fputwc+0x48>
 8010a74:	30c01917 	ldw	r3,100(r6)
 8010a78:	10880014 	ori	r2,r2,8192
 8010a7c:	3080030d 	sth	r2,12(r6)
 8010a80:	18880014 	ori	r2,r3,8192
 8010a84:	30801915 	stw	r2,100(r6)
 8010a88:	8009883a 	mov	r4,r16
 8010a8c:	dfc00317 	ldw	ra,12(sp)
 8010a90:	dc000217 	ldw	r16,8(sp)
 8010a94:	dec00404 	addi	sp,sp,16
 8010a98:	80108b81 	jmpi	80108b8 <__fputwc>
 8010a9c:	d9000015 	stw	r4,0(sp)
 8010aa0:	8009883a 	mov	r4,r16
 8010aa4:	d9800115 	stw	r6,4(sp)
 8010aa8:	800abdc0 	call	800abdc <__sinit>
 8010aac:	d9800117 	ldw	r6,4(sp)
 8010ab0:	d9400017 	ldw	r5,0(sp)
 8010ab4:	003fec06 	br	8010a68 <fputwc+0x28>

08010ab8 <_fstat_r>:
 8010ab8:	2807883a 	mov	r3,r5
 8010abc:	defffe04 	addi	sp,sp,-8
 8010ac0:	dc000015 	stw	r16,0(sp)
 8010ac4:	00820174 	movhi	r2,2053
 8010ac8:	300b883a 	mov	r5,r6
 8010acc:	2021883a 	mov	r16,r4
 8010ad0:	1809883a 	mov	r4,r3
 8010ad4:	dfc00115 	stw	ra,4(sp)
 8010ad8:	101c2d15 	stw	zero,28852(r2)
 8010adc:	80147600 	call	8014760 <fstat>
 8010ae0:	10ffffd8 	cmpnei	r3,r2,-1
 8010ae4:	18000426 	beq	r3,zero,8010af8 <_fstat_r+0x40>
 8010ae8:	dfc00117 	ldw	ra,4(sp)
 8010aec:	dc000017 	ldw	r16,0(sp)
 8010af0:	dec00204 	addi	sp,sp,8
 8010af4:	f800283a 	ret
 8010af8:	00c20174 	movhi	r3,2053
 8010afc:	18dc2d17 	ldw	r3,28852(r3)
 8010b00:	183ff926 	beq	r3,zero,8010ae8 <_fstat_r+0x30>
 8010b04:	80c00015 	stw	r3,0(r16)
 8010b08:	dfc00117 	ldw	ra,4(sp)
 8010b0c:	dc000017 	ldw	r16,0(sp)
 8010b10:	dec00204 	addi	sp,sp,8
 8010b14:	f800283a 	ret

08010b18 <_isatty_r>:
 8010b18:	defffe04 	addi	sp,sp,-8
 8010b1c:	dc000015 	stw	r16,0(sp)
 8010b20:	00820174 	movhi	r2,2053
 8010b24:	2021883a 	mov	r16,r4
 8010b28:	2809883a 	mov	r4,r5
 8010b2c:	dfc00115 	stw	ra,4(sp)
 8010b30:	101c2d15 	stw	zero,28852(r2)
 8010b34:	801486c0 	call	801486c <isatty>
 8010b38:	10ffffd8 	cmpnei	r3,r2,-1
 8010b3c:	18000426 	beq	r3,zero,8010b50 <_isatty_r+0x38>
 8010b40:	dfc00117 	ldw	ra,4(sp)
 8010b44:	dc000017 	ldw	r16,0(sp)
 8010b48:	dec00204 	addi	sp,sp,8
 8010b4c:	f800283a 	ret
 8010b50:	00c20174 	movhi	r3,2053
 8010b54:	18dc2d17 	ldw	r3,28852(r3)
 8010b58:	183ff926 	beq	r3,zero,8010b40 <_isatty_r+0x28>
 8010b5c:	80c00015 	stw	r3,0(r16)
 8010b60:	dfc00117 	ldw	ra,4(sp)
 8010b64:	dc000017 	ldw	r16,0(sp)
 8010b68:	dec00204 	addi	sp,sp,8
 8010b6c:	f800283a 	ret

08010b70 <_setlocale_r>:
 8010b70:	30001626 	beq	r6,zero,8010bcc <_setlocale_r+0x5c>
 8010b74:	01420174 	movhi	r5,2053
 8010b78:	defffe04 	addi	sp,sp,-8
 8010b7c:	29420504 	addi	r5,r5,2068
 8010b80:	3009883a 	mov	r4,r6
 8010b84:	dc000015 	stw	r16,0(sp)
 8010b88:	dfc00115 	stw	ra,4(sp)
 8010b8c:	3021883a 	mov	r16,r6
 8010b90:	8010f080 	call	8010f08 <strcmp>
 8010b94:	1000061e 	bne	r2,zero,8010bb0 <_setlocale_r+0x40>
 8010b98:	00820174 	movhi	r2,2053
 8010b9c:	10820404 	addi	r2,r2,2064
 8010ba0:	dfc00117 	ldw	ra,4(sp)
 8010ba4:	dc000017 	ldw	r16,0(sp)
 8010ba8:	dec00204 	addi	sp,sp,8
 8010bac:	f800283a 	ret
 8010bb0:	80800003 	ldbu	r2,0(r16)
 8010bb4:	10bfef44 	addi	r2,r2,-67
 8010bb8:	10000726 	beq	r2,zero,8010bd8 <_setlocale_r+0x68>
 8010bbc:	80800003 	ldbu	r2,0(r16)
 8010bc0:	103ff526 	beq	r2,zero,8010b98 <_setlocale_r+0x28>
 8010bc4:	0005883a 	mov	r2,zero
 8010bc8:	003ff506 	br	8010ba0 <_setlocale_r+0x30>
 8010bcc:	00820174 	movhi	r2,2053
 8010bd0:	10820404 	addi	r2,r2,2064
 8010bd4:	f800283a 	ret
 8010bd8:	80800043 	ldbu	r2,1(r16)
 8010bdc:	103fee26 	beq	r2,zero,8010b98 <_setlocale_r+0x28>
 8010be0:	003ff606 	br	8010bbc <_setlocale_r+0x4c>

08010be4 <__locale_mb_cur_max>:
 8010be4:	00820174 	movhi	r2,2053
 8010be8:	1095f707 	ldb	r2,22492(r2)
 8010bec:	f800283a 	ret

08010bf0 <setlocale>:
 8010bf0:	00c20174 	movhi	r3,2053
 8010bf4:	2005883a 	mov	r2,r4
 8010bf8:	191bd417 	ldw	r4,28496(r3)
 8010bfc:	280d883a 	mov	r6,r5
 8010c00:	100b883a 	mov	r5,r2
 8010c04:	8010b701 	jmpi	8010b70 <_setlocale_r>

08010c08 <_lseek_r>:
 8010c08:	2807883a 	mov	r3,r5
 8010c0c:	defffe04 	addi	sp,sp,-8
 8010c10:	dc000015 	stw	r16,0(sp)
 8010c14:	300b883a 	mov	r5,r6
 8010c18:	00820174 	movhi	r2,2053
 8010c1c:	380d883a 	mov	r6,r7
 8010c20:	2021883a 	mov	r16,r4
 8010c24:	1809883a 	mov	r4,r3
 8010c28:	dfc00115 	stw	ra,4(sp)
 8010c2c:	101c2d15 	stw	zero,28852(r2)
 8010c30:	8014ab40 	call	8014ab4 <lseek>
 8010c34:	10ffffd8 	cmpnei	r3,r2,-1
 8010c38:	18000426 	beq	r3,zero,8010c4c <_lseek_r+0x44>
 8010c3c:	dfc00117 	ldw	ra,4(sp)
 8010c40:	dc000017 	ldw	r16,0(sp)
 8010c44:	dec00204 	addi	sp,sp,8
 8010c48:	f800283a 	ret
 8010c4c:	00c20174 	movhi	r3,2053
 8010c50:	18dc2d17 	ldw	r3,28852(r3)
 8010c54:	183ff926 	beq	r3,zero,8010c3c <_lseek_r+0x34>
 8010c58:	80c00015 	stw	r3,0(r16)
 8010c5c:	dfc00117 	ldw	ra,4(sp)
 8010c60:	dc000017 	ldw	r16,0(sp)
 8010c64:	dec00204 	addi	sp,sp,8
 8010c68:	f800283a 	ret

08010c6c <_mbtowc_r>:
 8010c6c:	00820174 	movhi	r2,2053
 8010c70:	1095e617 	ldw	r2,22424(r2)
 8010c74:	1000683a 	jmp	r2

08010c78 <__ascii_mbtowc>:
 8010c78:	deffff04 	addi	sp,sp,-4
 8010c7c:	28000826 	beq	r5,zero,8010ca0 <__ascii_mbtowc+0x28>
 8010c80:	30000926 	beq	r6,zero,8010ca8 <__ascii_mbtowc+0x30>
 8010c84:	38000b26 	beq	r7,zero,8010cb4 <__ascii_mbtowc+0x3c>
 8010c88:	30800003 	ldbu	r2,0(r6)
 8010c8c:	28800015 	stw	r2,0(r5)
 8010c90:	30800003 	ldbu	r2,0(r6)
 8010c94:	1004c03a 	cmpne	r2,r2,zero
 8010c98:	dec00104 	addi	sp,sp,4
 8010c9c:	f800283a 	ret
 8010ca0:	d80b883a 	mov	r5,sp
 8010ca4:	303ff71e 	bne	r6,zero,8010c84 <__ascii_mbtowc+0xc>
 8010ca8:	0005883a 	mov	r2,zero
 8010cac:	dec00104 	addi	sp,sp,4
 8010cb0:	f800283a 	ret
 8010cb4:	00bfff84 	movi	r2,-2
 8010cb8:	003ff706 	br	8010c98 <__ascii_mbtowc+0x20>

08010cbc <_read_r>:
 8010cbc:	2807883a 	mov	r3,r5
 8010cc0:	defffe04 	addi	sp,sp,-8
 8010cc4:	dc000015 	stw	r16,0(sp)
 8010cc8:	300b883a 	mov	r5,r6
 8010ccc:	00820174 	movhi	r2,2053
 8010cd0:	380d883a 	mov	r6,r7
 8010cd4:	2021883a 	mov	r16,r4
 8010cd8:	1809883a 	mov	r4,r3
 8010cdc:	dfc00115 	stw	ra,4(sp)
 8010ce0:	101c2d15 	stw	zero,28852(r2)
 8010ce4:	8028dc80 	call	8028dc8 <read>
 8010ce8:	10ffffd8 	cmpnei	r3,r2,-1
 8010cec:	18000426 	beq	r3,zero,8010d00 <_read_r+0x44>
 8010cf0:	dfc00117 	ldw	ra,4(sp)
 8010cf4:	dc000017 	ldw	r16,0(sp)
 8010cf8:	dec00204 	addi	sp,sp,8
 8010cfc:	f800283a 	ret
 8010d00:	00c20174 	movhi	r3,2053
 8010d04:	18dc2d17 	ldw	r3,28852(r3)
 8010d08:	183ff926 	beq	r3,zero,8010cf0 <_read_r+0x34>
 8010d0c:	80c00015 	stw	r3,0(r16)
 8010d10:	dfc00117 	ldw	ra,4(sp)
 8010d14:	dc000017 	ldw	r16,0(sp)
 8010d18:	dec00204 	addi	sp,sp,8
 8010d1c:	f800283a 	ret

08010d20 <lflush>:
 8010d20:	2080030b 	ldhu	r2,12(r4)
 8010d24:	1080024c 	andi	r2,r2,9
 8010d28:	10800258 	cmpnei	r2,r2,9
 8010d2c:	10000226 	beq	r2,zero,8010d38 <lflush+0x18>
 8010d30:	0005883a 	mov	r2,zero
 8010d34:	f800283a 	ret
 8010d38:	800a8541 	jmpi	800a854 <fflush>

08010d3c <__srefill_r>:
 8010d3c:	defffc04 	addi	sp,sp,-16
 8010d40:	dc400115 	stw	r17,4(sp)
 8010d44:	dc000015 	stw	r16,0(sp)
 8010d48:	dfc00315 	stw	ra,12(sp)
 8010d4c:	dc800215 	stw	r18,8(sp)
 8010d50:	2023883a 	mov	r17,r4
 8010d54:	2821883a 	mov	r16,r5
 8010d58:	20000226 	beq	r4,zero,8010d64 <__srefill_r+0x28>
 8010d5c:	20800e17 	ldw	r2,56(r4)
 8010d60:	10003a26 	beq	r2,zero,8010e4c <__srefill_r+0x110>
 8010d64:	80c0030b 	ldhu	r3,12(r16)
 8010d68:	1908000c 	andi	r4,r3,8192
 8010d6c:	1805883a 	mov	r2,r3
 8010d70:	2000071e 	bne	r4,zero,8010d90 <__srefill_r+0x54>
 8010d74:	81001917 	ldw	r4,100(r16)
 8010d78:	18880014 	ori	r2,r3,8192
 8010d7c:	00f7ffc4 	movi	r3,-8193
 8010d80:	20c8703a 	and	r4,r4,r3
 8010d84:	8080030d 	sth	r2,12(r16)
 8010d88:	1007883a 	mov	r3,r2
 8010d8c:	81001915 	stw	r4,100(r16)
 8010d90:	80000115 	stw	zero,4(r16)
 8010d94:	1100080c 	andi	r4,r2,32
 8010d98:	20004d1e 	bne	r4,zero,8010ed0 <__srefill_r+0x194>
 8010d9c:	1100010c 	andi	r4,r2,4
 8010da0:	20001c1e 	bne	r4,zero,8010e14 <__srefill_r+0xd8>
 8010da4:	1100040c 	andi	r4,r2,16
 8010da8:	20005126 	beq	r4,zero,8010ef0 <__srefill_r+0x1b4>
 8010dac:	1080020c 	andi	r2,r2,8
 8010db0:	1000371e 	bne	r2,zero,8010e90 <__srefill_r+0x154>
 8010db4:	18c00114 	ori	r3,r3,4
 8010db8:	80c0030d 	sth	r3,12(r16)
 8010dbc:	80800417 	ldw	r2,16(r16)
 8010dc0:	10003c26 	beq	r2,zero,8010eb4 <__srefill_r+0x178>
 8010dc4:	8480030b 	ldhu	r18,12(r16)
 8010dc8:	908000cc 	andi	r2,r18,3
 8010dcc:	1000211e 	bne	r2,zero,8010e54 <__srefill_r+0x118>
 8010dd0:	81800417 	ldw	r6,16(r16)
 8010dd4:	80800817 	ldw	r2,32(r16)
 8010dd8:	81c00517 	ldw	r7,20(r16)
 8010ddc:	81400717 	ldw	r5,28(r16)
 8010de0:	81800015 	stw	r6,0(r16)
 8010de4:	8809883a 	mov	r4,r17
 8010de8:	103ee83a 	callr	r2
 8010dec:	1007883a 	mov	r3,r2
 8010df0:	80800115 	stw	r2,4(r16)
 8010df4:	0005883a 	mov	r2,zero
 8010df8:	00c0370e 	bge	zero,r3,8010ed8 <__srefill_r+0x19c>
 8010dfc:	dfc00317 	ldw	ra,12(sp)
 8010e00:	dc800217 	ldw	r18,8(sp)
 8010e04:	dc400117 	ldw	r17,4(sp)
 8010e08:	dc000017 	ldw	r16,0(sp)
 8010e0c:	dec00404 	addi	sp,sp,16
 8010e10:	f800283a 	ret
 8010e14:	81400c17 	ldw	r5,48(r16)
 8010e18:	283fe826 	beq	r5,zero,8010dbc <__srefill_r+0x80>
 8010e1c:	80801004 	addi	r2,r16,64
 8010e20:	28800226 	beq	r5,r2,8010e2c <__srefill_r+0xf0>
 8010e24:	8809883a 	mov	r4,r17
 8010e28:	800ad400 	call	800ad40 <_free_r>
 8010e2c:	80800f17 	ldw	r2,60(r16)
 8010e30:	80000c15 	stw	zero,48(r16)
 8010e34:	80800115 	stw	r2,4(r16)
 8010e38:	103fe026 	beq	r2,zero,8010dbc <__srefill_r+0x80>
 8010e3c:	80c00e17 	ldw	r3,56(r16)
 8010e40:	0005883a 	mov	r2,zero
 8010e44:	80c00015 	stw	r3,0(r16)
 8010e48:	003fec06 	br	8010dfc <__srefill_r+0xc0>
 8010e4c:	800abdc0 	call	800abdc <__sinit>
 8010e50:	003fc406 	br	8010d64 <__srefill_r+0x28>
 8010e54:	00820174 	movhi	r2,2053
 8010e58:	111bd317 	ldw	r4,28492(r2)
 8010e5c:	01420074 	movhi	r5,2049
 8010e60:	00800044 	movi	r2,1
 8010e64:	8080030d 	sth	r2,12(r16)
 8010e68:	29434804 	addi	r5,r5,3360
 8010e6c:	800b4f80 	call	800b4f8 <_fwalk>
 8010e70:	9080024c 	andi	r2,r18,9
 8010e74:	8480030d 	sth	r18,12(r16)
 8010e78:	10800258 	cmpnei	r2,r2,9
 8010e7c:	103fd41e 	bne	r2,zero,8010dd0 <__srefill_r+0x94>
 8010e80:	800b883a 	mov	r5,r16
 8010e84:	8809883a 	mov	r4,r17
 8010e88:	800a5cc0 	call	800a5cc <__sflush_r>
 8010e8c:	003fd006 	br	8010dd0 <__srefill_r+0x94>
 8010e90:	800b883a 	mov	r5,r16
 8010e94:	8809883a 	mov	r4,r17
 8010e98:	800a7f40 	call	800a7f4 <_fflush_r>
 8010e9c:	10000c1e 	bne	r2,zero,8010ed0 <__srefill_r+0x194>
 8010ea0:	80c0030b 	ldhu	r3,12(r16)
 8010ea4:	80000215 	stw	zero,8(r16)
 8010ea8:	80000615 	stw	zero,24(r16)
 8010eac:	18fffdcc 	andi	r3,r3,65527
 8010eb0:	003fc006 	br	8010db4 <__srefill_r+0x78>
 8010eb4:	800b883a 	mov	r5,r16
 8010eb8:	8809883a 	mov	r4,r17
 8010ebc:	800b7fc0 	call	800b7fc <__smakebuf_r>
 8010ec0:	003fc006 	br	8010dc4 <__srefill_r+0x88>
 8010ec4:	10801014 	ori	r2,r2,64
 8010ec8:	80000115 	stw	zero,4(r16)
 8010ecc:	8080030d 	sth	r2,12(r16)
 8010ed0:	00bfffc4 	movi	r2,-1
 8010ed4:	003fc906 	br	8010dfc <__srefill_r+0xc0>
 8010ed8:	8080030b 	ldhu	r2,12(r16)
 8010edc:	183ff91e 	bne	r3,zero,8010ec4 <__srefill_r+0x188>
 8010ee0:	10800814 	ori	r2,r2,32
 8010ee4:	8080030d 	sth	r2,12(r16)
 8010ee8:	00bfffc4 	movi	r2,-1
 8010eec:	003fc306 	br	8010dfc <__srefill_r+0xc0>
 8010ef0:	00800244 	movi	r2,9
 8010ef4:	88800015 	stw	r2,0(r17)
 8010ef8:	18c01014 	ori	r3,r3,64
 8010efc:	80c0030d 	sth	r3,12(r16)
 8010f00:	00bfffc4 	movi	r2,-1
 8010f04:	003fbd06 	br	8010dfc <__srefill_r+0xc0>

08010f08 <strcmp>:
 8010f08:	2144b03a 	or	r2,r4,r5
 8010f0c:	108000cc 	andi	r2,r2,3
 8010f10:	1000141e 	bne	r2,zero,8010f64 <strcmp+0x5c>
 8010f14:	20800017 	ldw	r2,0(r4)
 8010f18:	28c00017 	ldw	r3,0(r5)
 8010f1c:	10c0111e 	bne	r2,r3,8010f64 <strcmp+0x5c>
 8010f20:	01ffbff4 	movhi	r7,65279
 8010f24:	01a02074 	movhi	r6,32897
 8010f28:	39ffbfc4 	addi	r7,r7,-257
 8010f2c:	31a02004 	addi	r6,r6,-32640
 8010f30:	00000306 	br	8010f40 <strcmp+0x38>
 8010f34:	20800017 	ldw	r2,0(r4)
 8010f38:	28c00017 	ldw	r3,0(r5)
 8010f3c:	10c0091e 	bne	r2,r3,8010f64 <strcmp+0x5c>
 8010f40:	11c7883a 	add	r3,r2,r7
 8010f44:	0084303a 	nor	r2,zero,r2
 8010f48:	1884703a 	and	r2,r3,r2
 8010f4c:	1184703a 	and	r2,r2,r6
 8010f50:	21000104 	addi	r4,r4,4
 8010f54:	29400104 	addi	r5,r5,4
 8010f58:	103ff626 	beq	r2,zero,8010f34 <strcmp+0x2c>
 8010f5c:	0005883a 	mov	r2,zero
 8010f60:	f800283a 	ret
 8010f64:	20c00003 	ldbu	r3,0(r4)
 8010f68:	18803fcc 	andi	r2,r3,255
 8010f6c:	1080201c 	xori	r2,r2,128
 8010f70:	10bfe004 	addi	r2,r2,-128
 8010f74:	1000071e 	bne	r2,zero,8010f94 <strcmp+0x8c>
 8010f78:	00000a06 	br	8010fa4 <strcmp+0x9c>
 8010f7c:	20c00003 	ldbu	r3,0(r4)
 8010f80:	29400044 	addi	r5,r5,1
 8010f84:	18803fcc 	andi	r2,r3,255
 8010f88:	1080201c 	xori	r2,r2,128
 8010f8c:	10bfe004 	addi	r2,r2,-128
 8010f90:	10000726 	beq	r2,zero,8010fb0 <strcmp+0xa8>
 8010f94:	29800007 	ldb	r6,0(r5)
 8010f98:	21000044 	addi	r4,r4,1
 8010f9c:	30bff726 	beq	r6,r2,8010f7c <strcmp+0x74>
 8010fa0:	18803fcc 	andi	r2,r3,255
 8010fa4:	28c00003 	ldbu	r3,0(r5)
 8010fa8:	10c5c83a 	sub	r2,r2,r3
 8010fac:	f800283a 	ret
 8010fb0:	28c00003 	ldbu	r3,0(r5)
 8010fb4:	0005883a 	mov	r2,zero
 8010fb8:	10c5c83a 	sub	r2,r2,r3
 8010fbc:	f800283a 	ret

08010fc0 <_vfiprintf_r>:
 8010fc0:	800f0941 	jmpi	800f094 <___vfiprintf_internal_r>

08010fc4 <_wcrtomb_r>:
 8010fc4:	defffa04 	addi	sp,sp,-24
 8010fc8:	dc400415 	stw	r17,16(sp)
 8010fcc:	dc000315 	stw	r16,12(sp)
 8010fd0:	00820174 	movhi	r2,2053
 8010fd4:	dfc00515 	stw	ra,20(sp)
 8010fd8:	1095e517 	ldw	r2,22420(r2)
 8010fdc:	2023883a 	mov	r17,r4
 8010fe0:	3821883a 	mov	r16,r7
 8010fe4:	28000826 	beq	r5,zero,8011008 <_wcrtomb_r+0x44>
 8010fe8:	103ee83a 	callr	r2
 8010fec:	10ffffd8 	cmpnei	r3,r2,-1
 8010ff0:	18000a26 	beq	r3,zero,801101c <_wcrtomb_r+0x58>
 8010ff4:	dfc00517 	ldw	ra,20(sp)
 8010ff8:	dc400417 	ldw	r17,16(sp)
 8010ffc:	dc000317 	ldw	r16,12(sp)
 8011000:	dec00604 	addi	sp,sp,24
 8011004:	f800283a 	ret
 8011008:	000d883a 	mov	r6,zero
 801100c:	d9400084 	addi	r5,sp,2
 8011010:	103ee83a 	callr	r2
 8011014:	10ffffd8 	cmpnei	r3,r2,-1
 8011018:	183ff61e 	bne	r3,zero,8010ff4 <_wcrtomb_r+0x30>
 801101c:	00802284 	movi	r2,138
 8011020:	80000015 	stw	zero,0(r16)
 8011024:	88800015 	stw	r2,0(r17)
 8011028:	00bfffc4 	movi	r2,-1
 801102c:	003ff106 	br	8010ff4 <_wcrtomb_r+0x30>

08011030 <wcrtomb>:
 8011030:	defffa04 	addi	sp,sp,-24
 8011034:	00c20174 	movhi	r3,2053
 8011038:	dc400415 	stw	r17,16(sp)
 801103c:	dc000315 	stw	r16,12(sp)
 8011040:	1c5bd417 	ldw	r17,28496(r3)
 8011044:	dfc00515 	stw	ra,20(sp)
 8011048:	00c20174 	movhi	r3,2053
 801104c:	18d5e517 	ldw	r3,22420(r3)
 8011050:	3021883a 	mov	r16,r6
 8011054:	20000c26 	beq	r4,zero,8011088 <wcrtomb+0x58>
 8011058:	280d883a 	mov	r6,r5
 801105c:	800f883a 	mov	r7,r16
 8011060:	200b883a 	mov	r5,r4
 8011064:	8809883a 	mov	r4,r17
 8011068:	183ee83a 	callr	r3
 801106c:	10ffffd8 	cmpnei	r3,r2,-1
 8011070:	18000c26 	beq	r3,zero,80110a4 <wcrtomb+0x74>
 8011074:	dfc00517 	ldw	ra,20(sp)
 8011078:	dc400417 	ldw	r17,16(sp)
 801107c:	dc000317 	ldw	r16,12(sp)
 8011080:	dec00604 	addi	sp,sp,24
 8011084:	f800283a 	ret
 8011088:	300f883a 	mov	r7,r6
 801108c:	d9400084 	addi	r5,sp,2
 8011090:	000d883a 	mov	r6,zero
 8011094:	8809883a 	mov	r4,r17
 8011098:	183ee83a 	callr	r3
 801109c:	10ffffd8 	cmpnei	r3,r2,-1
 80110a0:	183ff41e 	bne	r3,zero,8011074 <wcrtomb+0x44>
 80110a4:	00802284 	movi	r2,138
 80110a8:	80000015 	stw	zero,0(r16)
 80110ac:	88800015 	stw	r2,0(r17)
 80110b0:	00bfffc4 	movi	r2,-1
 80110b4:	003fef06 	br	8011074 <wcrtomb+0x44>

080110b8 <_wctomb_r>:
 80110b8:	00820174 	movhi	r2,2053
 80110bc:	1095e517 	ldw	r2,22420(r2)
 80110c0:	1000683a 	jmp	r2

080110c4 <__ascii_wctomb>:
 80110c4:	28000926 	beq	r5,zero,80110ec <__ascii_wctomb+0x28>
 80110c8:	30804030 	cmpltui	r2,r6,256
 80110cc:	10000326 	beq	r2,zero,80110dc <__ascii_wctomb+0x18>
 80110d0:	29800005 	stb	r6,0(r5)
 80110d4:	00800044 	movi	r2,1
 80110d8:	f800283a 	ret
 80110dc:	00802284 	movi	r2,138
 80110e0:	20800015 	stw	r2,0(r4)
 80110e4:	00bfffc4 	movi	r2,-1
 80110e8:	f800283a 	ret
 80110ec:	0005883a 	mov	r2,zero
 80110f0:	f800283a 	ret

080110f4 <abort>:
 80110f4:	deffff04 	addi	sp,sp,-4
 80110f8:	01000184 	movi	r4,6
 80110fc:	dfc00015 	stw	ra,0(sp)
 8011100:	801136c0 	call	801136c <raise>
 8011104:	01000044 	movi	r4,1
 8011108:	80146ec0 	call	80146ec <_exit>

0801110c <_init_signal_r.part.0>:
 801110c:	defffe04 	addi	sp,sp,-8
 8011110:	01402004 	movi	r5,128
 8011114:	dc000015 	stw	r16,0(sp)
 8011118:	dfc00115 	stw	ra,4(sp)
 801111c:	2021883a 	mov	r16,r4
 8011120:	800b93c0 	call	800b93c <_malloc_r>
 8011124:	8080b715 	stw	r2,732(r16)
 8011128:	10000926 	beq	r2,zero,8011150 <_init_signal_r.part.0+0x44>
 801112c:	10c02004 	addi	r3,r2,128
 8011130:	10000015 	stw	zero,0(r2)
 8011134:	10800104 	addi	r2,r2,4
 8011138:	10fffd1e 	bne	r2,r3,8011130 <_init_signal_r.part.0+0x24>
 801113c:	0005883a 	mov	r2,zero
 8011140:	dfc00117 	ldw	ra,4(sp)
 8011144:	dc000017 	ldw	r16,0(sp)
 8011148:	dec00204 	addi	sp,sp,8
 801114c:	f800283a 	ret
 8011150:	00bfffc4 	movi	r2,-1
 8011154:	003ffa06 	br	8011140 <_init_signal_r.part.0+0x34>

08011158 <_init_signal_r>:
 8011158:	2080b717 	ldw	r2,732(r4)
 801115c:	10000226 	beq	r2,zero,8011168 <_init_signal_r+0x10>
 8011160:	0005883a 	mov	r2,zero
 8011164:	f800283a 	ret
 8011168:	801110c1 	jmpi	801110c <_init_signal_r.part.0>

0801116c <_signal_r>:
 801116c:	defffc04 	addi	sp,sp,-16
 8011170:	dc000215 	stw	r16,8(sp)
 8011174:	dfc00315 	stw	ra,12(sp)
 8011178:	28800830 	cmpltui	r2,r5,32
 801117c:	2021883a 	mov	r16,r4
 8011180:	10000a26 	beq	r2,zero,80111ac <_signal_r+0x40>
 8011184:	2080b717 	ldw	r2,732(r4)
 8011188:	10000f26 	beq	r2,zero,80111c8 <_signal_r+0x5c>
 801118c:	280a90ba 	slli	r5,r5,2
 8011190:	114b883a 	add	r5,r2,r5
 8011194:	28800017 	ldw	r2,0(r5)
 8011198:	29800015 	stw	r6,0(r5)
 801119c:	dfc00317 	ldw	ra,12(sp)
 80111a0:	dc000217 	ldw	r16,8(sp)
 80111a4:	dec00404 	addi	sp,sp,16
 80111a8:	f800283a 	ret
 80111ac:	00800584 	movi	r2,22
 80111b0:	20800015 	stw	r2,0(r4)
 80111b4:	00bfffc4 	movi	r2,-1
 80111b8:	dfc00317 	ldw	ra,12(sp)
 80111bc:	dc000217 	ldw	r16,8(sp)
 80111c0:	dec00404 	addi	sp,sp,16
 80111c4:	f800283a 	ret
 80111c8:	d9800115 	stw	r6,4(sp)
 80111cc:	d9400015 	stw	r5,0(sp)
 80111d0:	801110c0 	call	801110c <_init_signal_r.part.0>
 80111d4:	1000041e 	bne	r2,zero,80111e8 <_signal_r+0x7c>
 80111d8:	8080b717 	ldw	r2,732(r16)
 80111dc:	d9800117 	ldw	r6,4(sp)
 80111e0:	d9400017 	ldw	r5,0(sp)
 80111e4:	003fe906 	br	801118c <_signal_r+0x20>
 80111e8:	00bfffc4 	movi	r2,-1
 80111ec:	003feb06 	br	801119c <_signal_r+0x30>

080111f0 <_raise_r>:
 80111f0:	28800830 	cmpltui	r2,r5,32
 80111f4:	10002b26 	beq	r2,zero,80112a4 <_raise_r+0xb4>
 80111f8:	2080b717 	ldw	r2,732(r4)
 80111fc:	defffd04 	addi	sp,sp,-12
 8011200:	dc000115 	stw	r16,4(sp)
 8011204:	dfc00215 	stw	ra,8(sp)
 8011208:	2821883a 	mov	r16,r5
 801120c:	10001026 	beq	r2,zero,8011250 <_raise_r+0x60>
 8011210:	280690ba 	slli	r3,r5,2
 8011214:	10c5883a 	add	r2,r2,r3
 8011218:	10c00017 	ldw	r3,0(r2)
 801121c:	18000c26 	beq	r3,zero,8011250 <_raise_r+0x60>
 8011220:	19400060 	cmpeqi	r5,r3,1
 8011224:	28001a1e 	bne	r5,zero,8011290 <_raise_r+0xa0>
 8011228:	197fffd8 	cmpnei	r5,r3,-1
 801122c:	28001126 	beq	r5,zero,8011274 <_raise_r+0x84>
 8011230:	10000015 	stw	zero,0(r2)
 8011234:	8009883a 	mov	r4,r16
 8011238:	183ee83a 	callr	r3
 801123c:	0005883a 	mov	r2,zero
 8011240:	dfc00217 	ldw	ra,8(sp)
 8011244:	dc000117 	ldw	r16,4(sp)
 8011248:	dec00304 	addi	sp,sp,12
 801124c:	f800283a 	ret
 8011250:	d9000015 	stw	r4,0(sp)
 8011254:	80114200 	call	8011420 <_getpid_r>
 8011258:	d9000017 	ldw	r4,0(sp)
 801125c:	800d883a 	mov	r6,r16
 8011260:	100b883a 	mov	r5,r2
 8011264:	dfc00217 	ldw	ra,8(sp)
 8011268:	dc000117 	ldw	r16,4(sp)
 801126c:	dec00304 	addi	sp,sp,12
 8011270:	80113c01 	jmpi	80113c0 <_kill_r>
 8011274:	00800584 	movi	r2,22
 8011278:	20800015 	stw	r2,0(r4)
 801127c:	00800044 	movi	r2,1
 8011280:	dfc00217 	ldw	ra,8(sp)
 8011284:	dc000117 	ldw	r16,4(sp)
 8011288:	dec00304 	addi	sp,sp,12
 801128c:	f800283a 	ret
 8011290:	0005883a 	mov	r2,zero
 8011294:	dfc00217 	ldw	ra,8(sp)
 8011298:	dc000117 	ldw	r16,4(sp)
 801129c:	dec00304 	addi	sp,sp,12
 80112a0:	f800283a 	ret
 80112a4:	00800584 	movi	r2,22
 80112a8:	20800015 	stw	r2,0(r4)
 80112ac:	00bfffc4 	movi	r2,-1
 80112b0:	f800283a 	ret

080112b4 <__sigtramp_r>:
 80112b4:	28800830 	cmpltui	r2,r5,32
 80112b8:	10002a26 	beq	r2,zero,8011364 <__sigtramp_r+0xb0>
 80112bc:	2080b717 	ldw	r2,732(r4)
 80112c0:	defffd04 	addi	sp,sp,-12
 80112c4:	dc400115 	stw	r17,4(sp)
 80112c8:	dfc00215 	stw	ra,8(sp)
 80112cc:	2023883a 	mov	r17,r4
 80112d0:	10001526 	beq	r2,zero,8011328 <__sigtramp_r+0x74>
 80112d4:	280690ba 	slli	r3,r5,2
 80112d8:	10c5883a 	add	r2,r2,r3
 80112dc:	10c00017 	ldw	r3,0(r2)
 80112e0:	18000c26 	beq	r3,zero,8011314 <__sigtramp_r+0x60>
 80112e4:	193fffe0 	cmpeqi	r4,r3,-1
 80112e8:	20001a1e 	bne	r4,zero,8011354 <__sigtramp_r+0xa0>
 80112ec:	19000060 	cmpeqi	r4,r3,1
 80112f0:	2000131e 	bne	r4,zero,8011340 <__sigtramp_r+0x8c>
 80112f4:	10000015 	stw	zero,0(r2)
 80112f8:	2809883a 	mov	r4,r5
 80112fc:	183ee83a 	callr	r3
 8011300:	0005883a 	mov	r2,zero
 8011304:	dfc00217 	ldw	ra,8(sp)
 8011308:	dc400117 	ldw	r17,4(sp)
 801130c:	dec00304 	addi	sp,sp,12
 8011310:	f800283a 	ret
 8011314:	00800044 	movi	r2,1
 8011318:	dfc00217 	ldw	ra,8(sp)
 801131c:	dc400117 	ldw	r17,4(sp)
 8011320:	dec00304 	addi	sp,sp,12
 8011324:	f800283a 	ret
 8011328:	d9400015 	stw	r5,0(sp)
 801132c:	801110c0 	call	801110c <_init_signal_r.part.0>
 8011330:	10000a1e 	bne	r2,zero,801135c <__sigtramp_r+0xa8>
 8011334:	8880b717 	ldw	r2,732(r17)
 8011338:	d9400017 	ldw	r5,0(sp)
 801133c:	003fe506 	br	80112d4 <__sigtramp_r+0x20>
 8011340:	008000c4 	movi	r2,3
 8011344:	dfc00217 	ldw	ra,8(sp)
 8011348:	dc400117 	ldw	r17,4(sp)
 801134c:	dec00304 	addi	sp,sp,12
 8011350:	f800283a 	ret
 8011354:	00800084 	movi	r2,2
 8011358:	003fea06 	br	8011304 <__sigtramp_r+0x50>
 801135c:	00bfffc4 	movi	r2,-1
 8011360:	003fe806 	br	8011304 <__sigtramp_r+0x50>
 8011364:	00bfffc4 	movi	r2,-1
 8011368:	f800283a 	ret

0801136c <raise>:
 801136c:	00820174 	movhi	r2,2053
 8011370:	200b883a 	mov	r5,r4
 8011374:	111bd417 	ldw	r4,28496(r2)
 8011378:	80111f01 	jmpi	80111f0 <_raise_r>

0801137c <signal>:
 801137c:	00c20174 	movhi	r3,2053
 8011380:	2005883a 	mov	r2,r4
 8011384:	191bd417 	ldw	r4,28496(r3)
 8011388:	280d883a 	mov	r6,r5
 801138c:	100b883a 	mov	r5,r2
 8011390:	801116c1 	jmpi	801116c <_signal_r>

08011394 <_init_signal>:
 8011394:	00820174 	movhi	r2,2053
 8011398:	111bd417 	ldw	r4,28496(r2)
 801139c:	2080b717 	ldw	r2,732(r4)
 80113a0:	10000226 	beq	r2,zero,80113ac <_init_signal+0x18>
 80113a4:	0005883a 	mov	r2,zero
 80113a8:	f800283a 	ret
 80113ac:	801110c1 	jmpi	801110c <_init_signal_r.part.0>

080113b0 <__sigtramp>:
 80113b0:	00820174 	movhi	r2,2053
 80113b4:	200b883a 	mov	r5,r4
 80113b8:	111bd417 	ldw	r4,28496(r2)
 80113bc:	80112b41 	jmpi	80112b4 <__sigtramp_r>

080113c0 <_kill_r>:
 80113c0:	2807883a 	mov	r3,r5
 80113c4:	defffe04 	addi	sp,sp,-8
 80113c8:	dc000015 	stw	r16,0(sp)
 80113cc:	00820174 	movhi	r2,2053
 80113d0:	300b883a 	mov	r5,r6
 80113d4:	2021883a 	mov	r16,r4
 80113d8:	1809883a 	mov	r4,r3
 80113dc:	dfc00115 	stw	ra,4(sp)
 80113e0:	101c2d15 	stw	zero,28852(r2)
 80113e4:	801494c0 	call	801494c <kill>
 80113e8:	10ffffd8 	cmpnei	r3,r2,-1
 80113ec:	18000426 	beq	r3,zero,8011400 <_kill_r+0x40>
 80113f0:	dfc00117 	ldw	ra,4(sp)
 80113f4:	dc000017 	ldw	r16,0(sp)
 80113f8:	dec00204 	addi	sp,sp,8
 80113fc:	f800283a 	ret
 8011400:	00c20174 	movhi	r3,2053
 8011404:	18dc2d17 	ldw	r3,28852(r3)
 8011408:	183ff926 	beq	r3,zero,80113f0 <_kill_r+0x30>
 801140c:	80c00015 	stw	r3,0(r16)
 8011410:	dfc00117 	ldw	ra,4(sp)
 8011414:	dc000017 	ldw	r16,0(sp)
 8011418:	dec00204 	addi	sp,sp,8
 801141c:	f800283a 	ret

08011420 <_getpid_r>:
 8011420:	80148101 	jmpi	8014810 <getpid>

08011424 <__udivdi3>:
 8011424:	defff504 	addi	sp,sp,-44
 8011428:	dcc00415 	stw	r19,16(sp)
 801142c:	dc000115 	stw	r16,4(sp)
 8011430:	dfc00a15 	stw	ra,40(sp)
 8011434:	df000915 	stw	fp,36(sp)
 8011438:	ddc00815 	stw	r23,32(sp)
 801143c:	dd800715 	stw	r22,28(sp)
 8011440:	dd400615 	stw	r21,24(sp)
 8011444:	dd000515 	stw	r20,20(sp)
 8011448:	dc800315 	stw	r18,12(sp)
 801144c:	dc400215 	stw	r17,8(sp)
 8011450:	2027883a 	mov	r19,r4
 8011454:	2821883a 	mov	r16,r5
 8011458:	3800411e 	bne	r7,zero,8011560 <__udivdi3+0x13c>
 801145c:	3829883a 	mov	r20,r7
 8011460:	3023883a 	mov	r17,r6
 8011464:	2025883a 	mov	r18,r4
 8011468:	29805d2e 	bgeu	r5,r6,80115e0 <__udivdi3+0x1bc>
 801146c:	00bfffd4 	movui	r2,65535
 8011470:	282b883a 	mov	r21,r5
 8011474:	1180a02e 	bgeu	r2,r6,80116f8 <__udivdi3+0x2d4>
 8011478:	00804034 	movhi	r2,256
 801147c:	30813636 	bltu	r6,r2,8011958 <__udivdi3+0x534>
 8011480:	3006d63a 	srli	r3,r6,24
 8011484:	05000604 	movi	r20,24
 8011488:	00820174 	movhi	r2,2053
 801148c:	1885883a 	add	r2,r3,r2
 8011490:	10820803 	ldbu	r2,2080(r2)
 8011494:	00c00804 	movi	r3,32
 8011498:	1505883a 	add	r2,r2,r20
 801149c:	1889c83a 	sub	r4,r3,r2
 80114a0:	18800526 	beq	r3,r2,80114b8 <__udivdi3+0x94>
 80114a4:	8120983a 	sll	r16,r16,r4
 80114a8:	9884d83a 	srl	r2,r19,r2
 80114ac:	3122983a 	sll	r17,r6,r4
 80114b0:	9924983a 	sll	r18,r19,r4
 80114b4:	142ab03a 	or	r21,r2,r16
 80114b8:	882cd43a 	srli	r22,r17,16
 80114bc:	a809883a 	mov	r4,r21
 80114c0:	8d3fffcc 	andi	r20,r17,65535
 80114c4:	b00b883a 	mov	r5,r22
 80114c8:	80120400 	call	8012040 <__umodsi3>
 80114cc:	a809883a 	mov	r4,r21
 80114d0:	b00b883a 	mov	r5,r22
 80114d4:	1027883a 	mov	r19,r2
 80114d8:	8011fdc0 	call	8011fdc <__udivsi3>
 80114dc:	9826943a 	slli	r19,r19,16
 80114e0:	9008d43a 	srli	r4,r18,16
 80114e4:	1021883a 	mov	r16,r2
 80114e8:	a085383a 	mul	r2,r20,r2
 80114ec:	9908b03a 	or	r4,r19,r4
 80114f0:	2080052e 	bgeu	r4,r2,8011508 <__udivdi3+0xe4>
 80114f4:	2449883a 	add	r4,r4,r17
 80114f8:	80ffffc4 	addi	r3,r16,-1
 80114fc:	24400136 	bltu	r4,r17,8011504 <__udivdi3+0xe0>
 8011500:	20812636 	bltu	r4,r2,801199c <__udivdi3+0x578>
 8011504:	1821883a 	mov	r16,r3
 8011508:	20a7c83a 	sub	r19,r4,r2
 801150c:	9809883a 	mov	r4,r19
 8011510:	b00b883a 	mov	r5,r22
 8011514:	80120400 	call	8012040 <__umodsi3>
 8011518:	9809883a 	mov	r4,r19
 801151c:	b00b883a 	mov	r5,r22
 8011520:	1027883a 	mov	r19,r2
 8011524:	9826943a 	slli	r19,r19,16
 8011528:	8011fdc0 	call	8011fdc <__udivsi3>
 801152c:	a0a9383a 	mul	r20,r20,r2
 8011530:	94bfffcc 	andi	r18,r18,65535
 8011534:	9ca4b03a 	or	r18,r19,r18
 8011538:	9500052e 	bgeu	r18,r20,8011550 <__udivdi3+0x12c>
 801153c:	8ca5883a 	add	r18,r17,r18
 8011540:	10ffffc4 	addi	r3,r2,-1
 8011544:	94400136 	bltu	r18,r17,801154c <__udivdi3+0x128>
 8011548:	95011236 	bltu	r18,r20,8011994 <__udivdi3+0x570>
 801154c:	1805883a 	mov	r2,r3
 8011550:	8020943a 	slli	r16,r16,16
 8011554:	0007883a 	mov	r3,zero
 8011558:	8084b03a 	or	r2,r16,r2
 801155c:	00000306 	br	801156c <__udivdi3+0x148>
 8011560:	29c00e2e 	bgeu	r5,r7,801159c <__udivdi3+0x178>
 8011564:	0007883a 	mov	r3,zero
 8011568:	0005883a 	mov	r2,zero
 801156c:	dfc00a17 	ldw	ra,40(sp)
 8011570:	df000917 	ldw	fp,36(sp)
 8011574:	ddc00817 	ldw	r23,32(sp)
 8011578:	dd800717 	ldw	r22,28(sp)
 801157c:	dd400617 	ldw	r21,24(sp)
 8011580:	dd000517 	ldw	r20,20(sp)
 8011584:	dcc00417 	ldw	r19,16(sp)
 8011588:	dc800317 	ldw	r18,12(sp)
 801158c:	dc400217 	ldw	r17,8(sp)
 8011590:	dc000117 	ldw	r16,4(sp)
 8011594:	dec00b04 	addi	sp,sp,44
 8011598:	f800283a 	ret
 801159c:	00bfffd4 	movui	r2,65535
 80115a0:	11c05a2e 	bgeu	r2,r7,801170c <__udivdi3+0x2e8>
 80115a4:	00804034 	movhi	r2,256
 80115a8:	3880dd36 	bltu	r7,r2,8011920 <__udivdi3+0x4fc>
 80115ac:	3806d63a 	srli	r3,r7,24
 80115b0:	01000604 	movi	r4,24
 80115b4:	00820174 	movhi	r2,2053
 80115b8:	1885883a 	add	r2,r3,r2
 80115bc:	10c20803 	ldbu	r3,2080(r2)
 80115c0:	00800804 	movi	r2,32
 80115c4:	1907883a 	add	r3,r3,r4
 80115c8:	10ebc83a 	sub	r21,r2,r3
 80115cc:	10c0861e 	bne	r2,r3,80117e8 <__udivdi3+0x3c4>
 80115d0:	3c00d836 	bltu	r7,r16,8011934 <__udivdi3+0x510>
 80115d4:	9985403a 	cmpgeu	r2,r19,r6
 80115d8:	0007883a 	mov	r3,zero
 80115dc:	003fe306 	br	801156c <__udivdi3+0x148>
 80115e0:	3000041e 	bne	r6,zero,80115f4 <__udivdi3+0x1d0>
 80115e4:	000b883a 	mov	r5,zero
 80115e8:	01000044 	movi	r4,1
 80115ec:	8011fdc0 	call	8011fdc <__udivsi3>
 80115f0:	1023883a 	mov	r17,r2
 80115f4:	00bfffd4 	movui	r2,65535
 80115f8:	14403a2e 	bgeu	r2,r17,80116e4 <__udivdi3+0x2c0>
 80115fc:	00804034 	movhi	r2,256
 8011600:	8880d236 	bltu	r17,r2,801194c <__udivdi3+0x528>
 8011604:	8806d63a 	srli	r3,r17,24
 8011608:	05000604 	movi	r20,24
 801160c:	00820174 	movhi	r2,2053
 8011610:	1885883a 	add	r2,r3,r2
 8011614:	10820803 	ldbu	r2,2080(r2)
 8011618:	00c00804 	movi	r3,32
 801161c:	1505883a 	add	r2,r2,r20
 8011620:	188dc83a 	sub	r6,r3,r2
 8011624:	18803e1e 	bne	r3,r2,8011720 <__udivdi3+0x2fc>
 8011628:	882ad43a 	srli	r21,r17,16
 801162c:	8461c83a 	sub	r16,r16,r17
 8011630:	8cffffcc 	andi	r19,r17,65535
 8011634:	00c00044 	movi	r3,1
 8011638:	8009883a 	mov	r4,r16
 801163c:	a80b883a 	mov	r5,r21
 8011640:	d8c00015 	stw	r3,0(sp)
 8011644:	80120400 	call	8012040 <__umodsi3>
 8011648:	8009883a 	mov	r4,r16
 801164c:	a80b883a 	mov	r5,r21
 8011650:	1021883a 	mov	r16,r2
 8011654:	8011fdc0 	call	8011fdc <__udivsi3>
 8011658:	8020943a 	slli	r16,r16,16
 801165c:	9008d43a 	srli	r4,r18,16
 8011660:	1029883a 	mov	r20,r2
 8011664:	14c5383a 	mul	r2,r2,r19
 8011668:	8108b03a 	or	r4,r16,r4
 801166c:	d8c00017 	ldw	r3,0(sp)
 8011670:	2080052e 	bgeu	r4,r2,8011688 <__udivdi3+0x264>
 8011674:	2449883a 	add	r4,r4,r17
 8011678:	a17fffc4 	addi	r5,r20,-1
 801167c:	24400136 	bltu	r4,r17,8011684 <__udivdi3+0x260>
 8011680:	2080c936 	bltu	r4,r2,80119a8 <__udivdi3+0x584>
 8011684:	2829883a 	mov	r20,r5
 8011688:	20a1c83a 	sub	r16,r4,r2
 801168c:	8009883a 	mov	r4,r16
 8011690:	a80b883a 	mov	r5,r21
 8011694:	d8c00015 	stw	r3,0(sp)
 8011698:	80120400 	call	8012040 <__umodsi3>
 801169c:	8009883a 	mov	r4,r16
 80116a0:	a80b883a 	mov	r5,r21
 80116a4:	1021883a 	mov	r16,r2
 80116a8:	8020943a 	slli	r16,r16,16
 80116ac:	8011fdc0 	call	8011fdc <__udivsi3>
 80116b0:	14e7383a 	mul	r19,r2,r19
 80116b4:	94bfffcc 	andi	r18,r18,65535
 80116b8:	84a4b03a 	or	r18,r16,r18
 80116bc:	d8c00017 	ldw	r3,0(sp)
 80116c0:	94c0052e 	bgeu	r18,r19,80116d8 <__udivdi3+0x2b4>
 80116c4:	8ca5883a 	add	r18,r17,r18
 80116c8:	113fffc4 	addi	r4,r2,-1
 80116cc:	94400136 	bltu	r18,r17,80116d4 <__udivdi3+0x2b0>
 80116d0:	94c0ae36 	bltu	r18,r19,801198c <__udivdi3+0x568>
 80116d4:	2005883a 	mov	r2,r4
 80116d8:	a00c943a 	slli	r6,r20,16
 80116dc:	3084b03a 	or	r2,r6,r2
 80116e0:	003fa206 	br	801156c <__udivdi3+0x148>
 80116e4:	88804030 	cmpltui	r2,r17,256
 80116e8:	10009e1e 	bne	r2,zero,8011964 <__udivdi3+0x540>
 80116ec:	8806d23a 	srli	r3,r17,8
 80116f0:	05000204 	movi	r20,8
 80116f4:	003fc506 	br	801160c <__udivdi3+0x1e8>
 80116f8:	30804030 	cmpltui	r2,r6,256
 80116fc:	10008b1e 	bne	r2,zero,801192c <__udivdi3+0x508>
 8011700:	3006d23a 	srli	r3,r6,8
 8011704:	05000204 	movi	r20,8
 8011708:	003f5f06 	br	8011488 <__udivdi3+0x64>
 801170c:	38804030 	cmpltui	r2,r7,256
 8011710:	10008b1e 	bne	r2,zero,8011940 <__udivdi3+0x51c>
 8011714:	3806d23a 	srli	r3,r7,8
 8011718:	01000204 	movi	r4,8
 801171c:	003fa506 	br	80115b4 <__udivdi3+0x190>
 8011720:	89a2983a 	sll	r17,r17,r6
 8011724:	80acd83a 	srl	r22,r16,r2
 8011728:	81a0983a 	sll	r16,r16,r6
 801172c:	882ad43a 	srli	r21,r17,16
 8011730:	9884d83a 	srl	r2,r19,r2
 8011734:	b009883a 	mov	r4,r22
 8011738:	a80b883a 	mov	r5,r21
 801173c:	99a4983a 	sll	r18,r19,r6
 8011740:	1428b03a 	or	r20,r2,r16
 8011744:	80120400 	call	8012040 <__umodsi3>
 8011748:	b009883a 	mov	r4,r22
 801174c:	a80b883a 	mov	r5,r21
 8011750:	1021883a 	mov	r16,r2
 8011754:	8011fdc0 	call	8011fdc <__udivsi3>
 8011758:	8008943a 	slli	r4,r16,16
 801175c:	a00ad43a 	srli	r5,r20,16
 8011760:	8cffffcc 	andi	r19,r17,65535
 8011764:	98a1383a 	mul	r16,r19,r2
 8011768:	2148b03a 	or	r4,r4,r5
 801176c:	102d883a 	mov	r22,r2
 8011770:	2400062e 	bgeu	r4,r16,801178c <__udivdi3+0x368>
 8011774:	2449883a 	add	r4,r4,r17
 8011778:	10bfffc4 	addi	r2,r2,-1
 801177c:	24408136 	bltu	r4,r17,8011984 <__udivdi3+0x560>
 8011780:	2400802e 	bgeu	r4,r16,8011984 <__udivdi3+0x560>
 8011784:	b5bfff84 	addi	r22,r22,-2
 8011788:	2449883a 	add	r4,r4,r17
 801178c:	2421c83a 	sub	r16,r4,r16
 8011790:	8009883a 	mov	r4,r16
 8011794:	a80b883a 	mov	r5,r21
 8011798:	80120400 	call	8012040 <__umodsi3>
 801179c:	8009883a 	mov	r4,r16
 80117a0:	a80b883a 	mov	r5,r21
 80117a4:	1021883a 	mov	r16,r2
 80117a8:	8020943a 	slli	r16,r16,16
 80117ac:	8011fdc0 	call	8011fdc <__udivsi3>
 80117b0:	9889383a 	mul	r4,r19,r2
 80117b4:	a53fffcc 	andi	r20,r20,65535
 80117b8:	8520b03a 	or	r16,r16,r20
 80117bc:	8100062e 	bgeu	r16,r4,80117d8 <__udivdi3+0x3b4>
 80117c0:	8461883a 	add	r16,r16,r17
 80117c4:	10ffffc4 	addi	r3,r2,-1
 80117c8:	84406a36 	bltu	r16,r17,8011974 <__udivdi3+0x550>
 80117cc:	8100692e 	bgeu	r16,r4,8011974 <__udivdi3+0x550>
 80117d0:	10bfff84 	addi	r2,r2,-2
 80117d4:	8461883a 	add	r16,r16,r17
 80117d8:	b006943a 	slli	r3,r22,16
 80117dc:	8121c83a 	sub	r16,r16,r4
 80117e0:	1886b03a 	or	r3,r3,r2
 80117e4:	003f9406 	br	8011638 <__udivdi3+0x214>
 80117e8:	30ecd83a 	srl	r22,r6,r3
 80117ec:	3d4e983a 	sll	r7,r7,r21
 80117f0:	80e4d83a 	srl	r18,r16,r3
 80117f4:	98e2d83a 	srl	r17,r19,r3
 80117f8:	b1ecb03a 	or	r22,r22,r7
 80117fc:	b038d43a 	srli	fp,r22,16
 8011800:	8546983a 	sll	r3,r16,r21
 8011804:	9009883a 	mov	r4,r18
 8011808:	e00b883a 	mov	r5,fp
 801180c:	88e2b03a 	or	r17,r17,r3
 8011810:	3568983a 	sll	r20,r6,r21
 8011814:	80120400 	call	8012040 <__umodsi3>
 8011818:	9009883a 	mov	r4,r18
 801181c:	e00b883a 	mov	r5,fp
 8011820:	1025883a 	mov	r18,r2
 8011824:	8011fdc0 	call	8011fdc <__udivsi3>
 8011828:	9008943a 	slli	r4,r18,16
 801182c:	8806d43a 	srli	r3,r17,16
 8011830:	b5ffffcc 	andi	r23,r22,65535
 8011834:	b8a5383a 	mul	r18,r23,r2
 8011838:	20c8b03a 	or	r4,r4,r3
 801183c:	1021883a 	mov	r16,r2
 8011840:	2480062e 	bgeu	r4,r18,801185c <__udivdi3+0x438>
 8011844:	2589883a 	add	r4,r4,r22
 8011848:	10bfffc4 	addi	r2,r2,-1
 801184c:	25804b36 	bltu	r4,r22,801197c <__udivdi3+0x558>
 8011850:	24804a2e 	bgeu	r4,r18,801197c <__udivdi3+0x558>
 8011854:	843fff84 	addi	r16,r16,-2
 8011858:	2589883a 	add	r4,r4,r22
 801185c:	24a5c83a 	sub	r18,r4,r18
 8011860:	9009883a 	mov	r4,r18
 8011864:	e00b883a 	mov	r5,fp
 8011868:	80120400 	call	8012040 <__umodsi3>
 801186c:	9009883a 	mov	r4,r18
 8011870:	e00b883a 	mov	r5,fp
 8011874:	1025883a 	mov	r18,r2
 8011878:	9024943a 	slli	r18,r18,16
 801187c:	8011fdc0 	call	8011fdc <__udivsi3>
 8011880:	b8af383a 	mul	r23,r23,r2
 8011884:	8c7fffcc 	andi	r17,r17,65535
 8011888:	9462b03a 	or	r17,r18,r17
 801188c:	8dc0062e 	bgeu	r17,r23,80118a8 <__udivdi3+0x484>
 8011890:	8da3883a 	add	r17,r17,r22
 8011894:	10ffffc4 	addi	r3,r2,-1
 8011898:	8d803436 	bltu	r17,r22,801196c <__udivdi3+0x548>
 801189c:	8dc0332e 	bgeu	r17,r23,801196c <__udivdi3+0x548>
 80118a0:	10bfff84 	addi	r2,r2,-2
 80118a4:	8da3883a 	add	r17,r17,r22
 80118a8:	8020943a 	slli	r16,r16,16
 80118ac:	10ffffcc 	andi	r3,r2,65535
 80118b0:	a00ed43a 	srli	r7,r20,16
 80118b4:	8084b03a 	or	r2,r16,r2
 80118b8:	1008d43a 	srli	r4,r2,16
 80118bc:	a1bfffcc 	andi	r6,r20,65535
 80118c0:	1991383a 	mul	r8,r3,r6
 80118c4:	218d383a 	mul	r6,r4,r6
 80118c8:	19c7383a 	mul	r3,r3,r7
 80118cc:	400ad43a 	srli	r5,r8,16
 80118d0:	21c9383a 	mul	r4,r4,r7
 80118d4:	1987883a 	add	r3,r3,r6
 80118d8:	28c7883a 	add	r3,r5,r3
 80118dc:	8de3c83a 	sub	r17,r17,r23
 80118e0:	1980022e 	bgeu	r3,r6,80118ec <__udivdi3+0x4c8>
 80118e4:	01400074 	movhi	r5,1
 80118e8:	2149883a 	add	r4,r4,r5
 80118ec:	180ad43a 	srli	r5,r3,16
 80118f0:	2909883a 	add	r4,r5,r4
 80118f4:	89000836 	bltu	r17,r4,8011918 <__udivdi3+0x4f4>
 80118f8:	89000226 	beq	r17,r4,8011904 <__udivdi3+0x4e0>
 80118fc:	0007883a 	mov	r3,zero
 8011900:	003f1a06 	br	801156c <__udivdi3+0x148>
 8011904:	1806943a 	slli	r3,r3,16
 8011908:	9d4c983a 	sll	r6,r19,r21
 801190c:	423fffcc 	andi	r8,r8,65535
 8011910:	1a07883a 	add	r3,r3,r8
 8011914:	30fff92e 	bgeu	r6,r3,80118fc <__udivdi3+0x4d8>
 8011918:	10bfffc4 	addi	r2,r2,-1
 801191c:	003ff706 	br	80118fc <__udivdi3+0x4d8>
 8011920:	3806d43a 	srli	r3,r7,16
 8011924:	01000404 	movi	r4,16
 8011928:	003f2206 	br	80115b4 <__udivdi3+0x190>
 801192c:	3007883a 	mov	r3,r6
 8011930:	003ed506 	br	8011488 <__udivdi3+0x64>
 8011934:	0007883a 	mov	r3,zero
 8011938:	00800044 	movi	r2,1
 801193c:	003f0b06 	br	801156c <__udivdi3+0x148>
 8011940:	3807883a 	mov	r3,r7
 8011944:	0009883a 	mov	r4,zero
 8011948:	003f1a06 	br	80115b4 <__udivdi3+0x190>
 801194c:	8806d43a 	srli	r3,r17,16
 8011950:	05000404 	movi	r20,16
 8011954:	003f2d06 	br	801160c <__udivdi3+0x1e8>
 8011958:	3006d43a 	srli	r3,r6,16
 801195c:	05000404 	movi	r20,16
 8011960:	003ec906 	br	8011488 <__udivdi3+0x64>
 8011964:	8807883a 	mov	r3,r17
 8011968:	003f2806 	br	801160c <__udivdi3+0x1e8>
 801196c:	1805883a 	mov	r2,r3
 8011970:	003fcd06 	br	80118a8 <__udivdi3+0x484>
 8011974:	1805883a 	mov	r2,r3
 8011978:	003f9706 	br	80117d8 <__udivdi3+0x3b4>
 801197c:	1021883a 	mov	r16,r2
 8011980:	003fb606 	br	801185c <__udivdi3+0x438>
 8011984:	102d883a 	mov	r22,r2
 8011988:	003f8006 	br	801178c <__udivdi3+0x368>
 801198c:	10bfff84 	addi	r2,r2,-2
 8011990:	003f5106 	br	80116d8 <__udivdi3+0x2b4>
 8011994:	10bfff84 	addi	r2,r2,-2
 8011998:	003eed06 	br	8011550 <__udivdi3+0x12c>
 801199c:	843fff84 	addi	r16,r16,-2
 80119a0:	2449883a 	add	r4,r4,r17
 80119a4:	003ed806 	br	8011508 <__udivdi3+0xe4>
 80119a8:	a53fff84 	addi	r20,r20,-2
 80119ac:	2449883a 	add	r4,r4,r17
 80119b0:	003f3506 	br	8011688 <__udivdi3+0x264>

080119b4 <__umoddi3>:
 80119b4:	defff504 	addi	sp,sp,-44
 80119b8:	dc400215 	stw	r17,8(sp)
 80119bc:	dc000115 	stw	r16,4(sp)
 80119c0:	dfc00a15 	stw	ra,40(sp)
 80119c4:	df000915 	stw	fp,36(sp)
 80119c8:	ddc00815 	stw	r23,32(sp)
 80119cc:	dd800715 	stw	r22,28(sp)
 80119d0:	dd400615 	stw	r21,24(sp)
 80119d4:	dd000515 	stw	r20,20(sp)
 80119d8:	dcc00415 	stw	r19,16(sp)
 80119dc:	dc800315 	stw	r18,12(sp)
 80119e0:	2823883a 	mov	r17,r5
 80119e4:	2021883a 	mov	r16,r4
 80119e8:	3800371e 	bne	r7,zero,8011ac8 <__umoddi3+0x114>
 80119ec:	3825883a 	mov	r18,r7
 80119f0:	3029883a 	mov	r20,r6
 80119f4:	2027883a 	mov	r19,r4
 80119f8:	2980572e 	bgeu	r5,r6,8011b58 <__umoddi3+0x1a4>
 80119fc:	00bfffd4 	movui	r2,65535
 8011a00:	282b883a 	mov	r21,r5
 8011a04:	1180922e 	bgeu	r2,r6,8011c50 <__umoddi3+0x29c>
 8011a08:	00804034 	movhi	r2,256
 8011a0c:	30812036 	bltu	r6,r2,8011e90 <__umoddi3+0x4dc>
 8011a10:	3006d63a 	srli	r3,r6,24
 8011a14:	04800604 	movi	r18,24
 8011a18:	00820174 	movhi	r2,2053
 8011a1c:	1885883a 	add	r2,r3,r2
 8011a20:	10820803 	ldbu	r2,2080(r2)
 8011a24:	00c00804 	movi	r3,32
 8011a28:	1485883a 	add	r2,r2,r18
 8011a2c:	18a5c83a 	sub	r18,r3,r2
 8011a30:	18800526 	beq	r3,r2,8011a48 <__umoddi3+0x94>
 8011a34:	8ca2983a 	sll	r17,r17,r18
 8011a38:	8084d83a 	srl	r2,r16,r2
 8011a3c:	34a8983a 	sll	r20,r6,r18
 8011a40:	84a6983a 	sll	r19,r16,r18
 8011a44:	146ab03a 	or	r21,r2,r17
 8011a48:	a02ed43a 	srli	r23,r20,16
 8011a4c:	a809883a 	mov	r4,r21
 8011a50:	a43fffcc 	andi	r16,r20,65535
 8011a54:	b80b883a 	mov	r5,r23
 8011a58:	80120400 	call	8012040 <__umodsi3>
 8011a5c:	a809883a 	mov	r4,r21
 8011a60:	b80b883a 	mov	r5,r23
 8011a64:	102d883a 	mov	r22,r2
 8011a68:	8011fdc0 	call	8011fdc <__udivsi3>
 8011a6c:	b02c943a 	slli	r22,r22,16
 8011a70:	9808d43a 	srli	r4,r19,16
 8011a74:	80ab383a 	mul	r21,r16,r2
 8011a78:	b108b03a 	or	r4,r22,r4
 8011a7c:	2540042e 	bgeu	r4,r21,8011a90 <__umoddi3+0xdc>
 8011a80:	2509883a 	add	r4,r4,r20
 8011a84:	25000236 	bltu	r4,r20,8011a90 <__umoddi3+0xdc>
 8011a88:	2540012e 	bgeu	r4,r21,8011a90 <__umoddi3+0xdc>
 8011a8c:	2509883a 	add	r4,r4,r20
 8011a90:	256bc83a 	sub	r21,r4,r21
 8011a94:	b80b883a 	mov	r5,r23
 8011a98:	a809883a 	mov	r4,r21
 8011a9c:	80120400 	call	8012040 <__umodsi3>
 8011aa0:	1023883a 	mov	r17,r2
 8011aa4:	b80b883a 	mov	r5,r23
 8011aa8:	a809883a 	mov	r4,r21
 8011aac:	8011fdc0 	call	8011fdc <__udivsi3>
 8011ab0:	8822943a 	slli	r17,r17,16
 8011ab4:	8085383a 	mul	r2,r16,r2
 8011ab8:	98ffffcc 	andi	r3,r19,65535
 8011abc:	88c6b03a 	or	r3,r17,r3
 8011ac0:	18805a2e 	bgeu	r3,r2,8011c2c <__umoddi3+0x278>
 8011ac4:	00005506 	br	8011c1c <__umoddi3+0x268>
 8011ac8:	2005883a 	mov	r2,r4
 8011acc:	29c00d2e 	bgeu	r5,r7,8011b04 <__umoddi3+0x150>
 8011ad0:	2807883a 	mov	r3,r5
 8011ad4:	dfc00a17 	ldw	ra,40(sp)
 8011ad8:	df000917 	ldw	fp,36(sp)
 8011adc:	ddc00817 	ldw	r23,32(sp)
 8011ae0:	dd800717 	ldw	r22,28(sp)
 8011ae4:	dd400617 	ldw	r21,24(sp)
 8011ae8:	dd000517 	ldw	r20,20(sp)
 8011aec:	dcc00417 	ldw	r19,16(sp)
 8011af0:	dc800317 	ldw	r18,12(sp)
 8011af4:	dc400217 	ldw	r17,8(sp)
 8011af8:	dc000117 	ldw	r16,4(sp)
 8011afc:	dec00b04 	addi	sp,sp,44
 8011b00:	f800283a 	ret
 8011b04:	013fffd4 	movui	r4,65535
 8011b08:	2807883a 	mov	r3,r5
 8011b0c:	21c0552e 	bgeu	r4,r7,8011c64 <__umoddi3+0x2b0>
 8011b10:	01004034 	movhi	r4,256
 8011b14:	3900e336 	bltu	r7,r4,8011ea4 <__umoddi3+0x4f0>
 8011b18:	3808d63a 	srli	r4,r7,24
 8011b1c:	02000604 	movi	r8,24
 8011b20:	01420174 	movhi	r5,2053
 8011b24:	214b883a 	add	r5,r4,r5
 8011b28:	2d420803 	ldbu	r21,2080(r5)
 8011b2c:	01000804 	movi	r4,32
 8011b30:	aa2b883a 	add	r21,r21,r8
 8011b34:	2569c83a 	sub	r20,r4,r21
 8011b38:	25404f1e 	bne	r4,r21,8011c78 <__umoddi3+0x2c4>
 8011b3c:	3c400136 	bltu	r7,r17,8011b44 <__umoddi3+0x190>
 8011b40:	81bfe436 	bltu	r16,r6,8011ad4 <__umoddi3+0x120>
 8011b44:	8185c83a 	sub	r2,r16,r6
 8011b48:	89cfc83a 	sub	r7,r17,r7
 8011b4c:	8087803a 	cmpltu	r3,r16,r2
 8011b50:	38c7c83a 	sub	r3,r7,r3
 8011b54:	003fdf06 	br	8011ad4 <__umoddi3+0x120>
 8011b58:	3000041e 	bne	r6,zero,8011b6c <__umoddi3+0x1b8>
 8011b5c:	000b883a 	mov	r5,zero
 8011b60:	01000044 	movi	r4,1
 8011b64:	8011fdc0 	call	8011fdc <__udivsi3>
 8011b68:	1029883a 	mov	r20,r2
 8011b6c:	00bfffd4 	movui	r2,65535
 8011b70:	1500322e 	bgeu	r2,r20,8011c3c <__umoddi3+0x288>
 8011b74:	00804034 	movhi	r2,256
 8011b78:	a080cd36 	bltu	r20,r2,8011eb0 <__umoddi3+0x4fc>
 8011b7c:	a006d63a 	srli	r3,r20,24
 8011b80:	04800604 	movi	r18,24
 8011b84:	00820174 	movhi	r2,2053
 8011b88:	1885883a 	add	r2,r3,r2
 8011b8c:	15820803 	ldbu	r22,2080(r2)
 8011b90:	00800804 	movi	r2,32
 8011b94:	b4ad883a 	add	r22,r22,r18
 8011b98:	15a5c83a 	sub	r18,r2,r22
 8011b9c:	15808a1e 	bne	r2,r22,8011dc8 <__umoddi3+0x414>
 8011ba0:	a02ed43a 	srli	r23,r20,16
 8011ba4:	8d23c83a 	sub	r17,r17,r20
 8011ba8:	a57fffcc 	andi	r21,r20,65535
 8011bac:	b80b883a 	mov	r5,r23
 8011bb0:	8809883a 	mov	r4,r17
 8011bb4:	80120400 	call	8012040 <__umodsi3>
 8011bb8:	8809883a 	mov	r4,r17
 8011bbc:	b80b883a 	mov	r5,r23
 8011bc0:	102d883a 	mov	r22,r2
 8011bc4:	8011fdc0 	call	8011fdc <__udivsi3>
 8011bc8:	b02c943a 	slli	r22,r22,16
 8011bcc:	9808d43a 	srli	r4,r19,16
 8011bd0:	1561383a 	mul	r16,r2,r21
 8011bd4:	b108b03a 	or	r4,r22,r4
 8011bd8:	2400032e 	bgeu	r4,r16,8011be8 <__umoddi3+0x234>
 8011bdc:	2509883a 	add	r4,r4,r20
 8011be0:	25000136 	bltu	r4,r20,8011be8 <__umoddi3+0x234>
 8011be4:	2400be36 	bltu	r4,r16,8011ee0 <__umoddi3+0x52c>
 8011be8:	2421c83a 	sub	r16,r4,r16
 8011bec:	b80b883a 	mov	r5,r23
 8011bf0:	8009883a 	mov	r4,r16
 8011bf4:	80120400 	call	8012040 <__umodsi3>
 8011bf8:	1023883a 	mov	r17,r2
 8011bfc:	b80b883a 	mov	r5,r23
 8011c00:	8009883a 	mov	r4,r16
 8011c04:	8011fdc0 	call	8011fdc <__udivsi3>
 8011c08:	8822943a 	slli	r17,r17,16
 8011c0c:	1545383a 	mul	r2,r2,r21
 8011c10:	9cffffcc 	andi	r19,r19,65535
 8011c14:	8cc6b03a 	or	r3,r17,r19
 8011c18:	1880042e 	bgeu	r3,r2,8011c2c <__umoddi3+0x278>
 8011c1c:	1d07883a 	add	r3,r3,r20
 8011c20:	1d000236 	bltu	r3,r20,8011c2c <__umoddi3+0x278>
 8011c24:	1880012e 	bgeu	r3,r2,8011c2c <__umoddi3+0x278>
 8011c28:	1d07883a 	add	r3,r3,r20
 8011c2c:	1885c83a 	sub	r2,r3,r2
 8011c30:	1484d83a 	srl	r2,r2,r18
 8011c34:	0007883a 	mov	r3,zero
 8011c38:	003fa606 	br	8011ad4 <__umoddi3+0x120>
 8011c3c:	a0804030 	cmpltui	r2,r20,256
 8011c40:	10009e1e 	bne	r2,zero,8011ebc <__umoddi3+0x508>
 8011c44:	a006d23a 	srli	r3,r20,8
 8011c48:	04800204 	movi	r18,8
 8011c4c:	003fcd06 	br	8011b84 <__umoddi3+0x1d0>
 8011c50:	30804030 	cmpltui	r2,r6,256
 8011c54:	1000911e 	bne	r2,zero,8011e9c <__umoddi3+0x4e8>
 8011c58:	3006d23a 	srli	r3,r6,8
 8011c5c:	04800204 	movi	r18,8
 8011c60:	003f6d06 	br	8011a18 <__umoddi3+0x64>
 8011c64:	39004030 	cmpltui	r4,r7,256
 8011c68:	2000961e 	bne	r4,zero,8011ec4 <__umoddi3+0x510>
 8011c6c:	3808d23a 	srli	r4,r7,8
 8011c70:	02000204 	movi	r8,8
 8011c74:	003faa06 	br	8011b20 <__umoddi3+0x16c>
 8011c78:	3d0e983a 	sll	r7,r7,r20
 8011c7c:	3544d83a 	srl	r2,r6,r21
 8011c80:	8d64d83a 	srl	r18,r17,r21
 8011c84:	8d22983a 	sll	r17,r17,r20
 8011c88:	11eeb03a 	or	r23,r2,r7
 8011c8c:	b838d43a 	srli	fp,r23,16
 8011c90:	8544d83a 	srl	r2,r16,r21
 8011c94:	9009883a 	mov	r4,r18
 8011c98:	e00b883a 	mov	r5,fp
 8011c9c:	3526983a 	sll	r19,r6,r20
 8011ca0:	1462b03a 	or	r17,r2,r17
 8011ca4:	80120400 	call	8012040 <__umodsi3>
 8011ca8:	9009883a 	mov	r4,r18
 8011cac:	e00b883a 	mov	r5,fp
 8011cb0:	1025883a 	mov	r18,r2
 8011cb4:	8011fdc0 	call	8011fdc <__udivsi3>
 8011cb8:	9008943a 	slli	r4,r18,16
 8011cbc:	8806d43a 	srli	r3,r17,16
 8011cc0:	b9ffffcc 	andi	r7,r23,65535
 8011cc4:	38a5383a 	mul	r18,r7,r2
 8011cc8:	20c8b03a 	or	r4,r4,r3
 8011ccc:	8520983a 	sll	r16,r16,r20
 8011cd0:	102d883a 	mov	r22,r2
 8011cd4:	2480062e 	bgeu	r4,r18,8011cf0 <__umoddi3+0x33c>
 8011cd8:	25c9883a 	add	r4,r4,r23
 8011cdc:	10bfffc4 	addi	r2,r2,-1
 8011ce0:	25c07d36 	bltu	r4,r23,8011ed8 <__umoddi3+0x524>
 8011ce4:	24807c2e 	bgeu	r4,r18,8011ed8 <__umoddi3+0x524>
 8011ce8:	b5bfff84 	addi	r22,r22,-2
 8011cec:	25c9883a 	add	r4,r4,r23
 8011cf0:	24a5c83a 	sub	r18,r4,r18
 8011cf4:	9009883a 	mov	r4,r18
 8011cf8:	e00b883a 	mov	r5,fp
 8011cfc:	d9c00015 	stw	r7,0(sp)
 8011d00:	80120400 	call	8012040 <__umodsi3>
 8011d04:	9009883a 	mov	r4,r18
 8011d08:	e00b883a 	mov	r5,fp
 8011d0c:	1025883a 	mov	r18,r2
 8011d10:	8011fdc0 	call	8011fdc <__udivsi3>
 8011d14:	d9c00017 	ldw	r7,0(sp)
 8011d18:	9024943a 	slli	r18,r18,16
 8011d1c:	8c7fffcc 	andi	r17,r17,65535
 8011d20:	388f383a 	mul	r7,r7,r2
 8011d24:	9448b03a 	or	r4,r18,r17
 8011d28:	21c0062e 	bgeu	r4,r7,8011d44 <__umoddi3+0x390>
 8011d2c:	25c9883a 	add	r4,r4,r23
 8011d30:	10ffffc4 	addi	r3,r2,-1
 8011d34:	25c06636 	bltu	r4,r23,8011ed0 <__umoddi3+0x51c>
 8011d38:	21c0652e 	bgeu	r4,r7,8011ed0 <__umoddi3+0x51c>
 8011d3c:	10bfff84 	addi	r2,r2,-2
 8011d40:	25c9883a 	add	r4,r4,r23
 8011d44:	b00a943a 	slli	r5,r22,16
 8011d48:	11bfffcc 	andi	r6,r2,65535
 8011d4c:	9806d43a 	srli	r3,r19,16
 8011d50:	2884b03a 	or	r2,r5,r2
 8011d54:	102cd43a 	srli	r22,r2,16
 8011d58:	997fffcc 	andi	r5,r19,65535
 8011d5c:	3151383a 	mul	r8,r6,r5
 8011d60:	b14b383a 	mul	r5,r22,r5
 8011d64:	30cd383a 	mul	r6,r6,r3
 8011d68:	4004d43a 	srli	r2,r8,16
 8011d6c:	b0ed383a 	mul	r22,r22,r3
 8011d70:	314d883a 	add	r6,r6,r5
 8011d74:	1185883a 	add	r2,r2,r6
 8011d78:	21c9c83a 	sub	r4,r4,r7
 8011d7c:	1140022e 	bgeu	r2,r5,8011d88 <__umoddi3+0x3d4>
 8011d80:	00c00074 	movhi	r3,1
 8011d84:	b0ed883a 	add	r22,r22,r3
 8011d88:	1006d43a 	srli	r3,r2,16
 8011d8c:	1004943a 	slli	r2,r2,16
 8011d90:	423fffcc 	andi	r8,r8,65535
 8011d94:	1dad883a 	add	r22,r3,r22
 8011d98:	1205883a 	add	r2,r2,r8
 8011d9c:	25803636 	bltu	r4,r22,8011e78 <__umoddi3+0x4c4>
 8011da0:	25803426 	beq	r4,r22,8011e74 <__umoddi3+0x4c0>
 8011da4:	8085c83a 	sub	r2,r16,r2
 8011da8:	8087803a 	cmpltu	r3,r16,r2
 8011dac:	2589c83a 	sub	r4,r4,r22
 8011db0:	20c7c83a 	sub	r3,r4,r3
 8011db4:	1d60983a 	sll	r16,r3,r21
 8011db8:	1504d83a 	srl	r2,r2,r20
 8011dbc:	1d06d83a 	srl	r3,r3,r20
 8011dc0:	8084b03a 	or	r2,r16,r2
 8011dc4:	003f4306 	br	8011ad4 <__umoddi3+0x120>
 8011dc8:	a4a8983a 	sll	r20,r20,r18
 8011dcc:	8daad83a 	srl	r21,r17,r22
 8011dd0:	8ca2983a 	sll	r17,r17,r18
 8011dd4:	a02ed43a 	srli	r23,r20,16
 8011dd8:	a809883a 	mov	r4,r21
 8011ddc:	85acd83a 	srl	r22,r16,r22
 8011de0:	b80b883a 	mov	r5,r23
 8011de4:	80120400 	call	8012040 <__umodsi3>
 8011de8:	a809883a 	mov	r4,r21
 8011dec:	b80b883a 	mov	r5,r23
 8011df0:	b46cb03a 	or	r22,r22,r17
 8011df4:	1027883a 	mov	r19,r2
 8011df8:	8011fdc0 	call	8011fdc <__udivsi3>
 8011dfc:	9826943a 	slli	r19,r19,16
 8011e00:	b008d43a 	srli	r4,r22,16
 8011e04:	a57fffcc 	andi	r21,r20,65535
 8011e08:	a8a3383a 	mul	r17,r21,r2
 8011e0c:	9908b03a 	or	r4,r19,r4
 8011e10:	84a6983a 	sll	r19,r16,r18
 8011e14:	2440042e 	bgeu	r4,r17,8011e28 <__umoddi3+0x474>
 8011e18:	2509883a 	add	r4,r4,r20
 8011e1c:	25000236 	bltu	r4,r20,8011e28 <__umoddi3+0x474>
 8011e20:	2440012e 	bgeu	r4,r17,8011e28 <__umoddi3+0x474>
 8011e24:	2509883a 	add	r4,r4,r20
 8011e28:	2463c83a 	sub	r17,r4,r17
 8011e2c:	8809883a 	mov	r4,r17
 8011e30:	b80b883a 	mov	r5,r23
 8011e34:	80120400 	call	8012040 <__umodsi3>
 8011e38:	1021883a 	mov	r16,r2
 8011e3c:	8809883a 	mov	r4,r17
 8011e40:	b80b883a 	mov	r5,r23
 8011e44:	8020943a 	slli	r16,r16,16
 8011e48:	8011fdc0 	call	8011fdc <__udivsi3>
 8011e4c:	a885383a 	mul	r2,r21,r2
 8011e50:	b47fffcc 	andi	r17,r22,65535
 8011e54:	8462b03a 	or	r17,r16,r17
 8011e58:	8880042e 	bgeu	r17,r2,8011e6c <__umoddi3+0x4b8>
 8011e5c:	8d23883a 	add	r17,r17,r20
 8011e60:	8d000236 	bltu	r17,r20,8011e6c <__umoddi3+0x4b8>
 8011e64:	8880012e 	bgeu	r17,r2,8011e6c <__umoddi3+0x4b8>
 8011e68:	8d23883a 	add	r17,r17,r20
 8011e6c:	88a3c83a 	sub	r17,r17,r2
 8011e70:	003f4e06 	br	8011bac <__umoddi3+0x1f8>
 8011e74:	80bfcb2e 	bgeu	r16,r2,8011da4 <__umoddi3+0x3f0>
 8011e78:	14e7c83a 	sub	r19,r2,r19
 8011e7c:	14c5803a 	cmpltu	r2,r2,r19
 8011e80:	15c5883a 	add	r2,r2,r23
 8011e84:	b0adc83a 	sub	r22,r22,r2
 8011e88:	9805883a 	mov	r2,r19
 8011e8c:	003fc506 	br	8011da4 <__umoddi3+0x3f0>
 8011e90:	3006d43a 	srli	r3,r6,16
 8011e94:	04800404 	movi	r18,16
 8011e98:	003edf06 	br	8011a18 <__umoddi3+0x64>
 8011e9c:	3007883a 	mov	r3,r6
 8011ea0:	003edd06 	br	8011a18 <__umoddi3+0x64>
 8011ea4:	3808d43a 	srli	r4,r7,16
 8011ea8:	02000404 	movi	r8,16
 8011eac:	003f1c06 	br	8011b20 <__umoddi3+0x16c>
 8011eb0:	a006d43a 	srli	r3,r20,16
 8011eb4:	04800404 	movi	r18,16
 8011eb8:	003f3206 	br	8011b84 <__umoddi3+0x1d0>
 8011ebc:	a007883a 	mov	r3,r20
 8011ec0:	003f3006 	br	8011b84 <__umoddi3+0x1d0>
 8011ec4:	3809883a 	mov	r4,r7
 8011ec8:	0011883a 	mov	r8,zero
 8011ecc:	003f1406 	br	8011b20 <__umoddi3+0x16c>
 8011ed0:	1805883a 	mov	r2,r3
 8011ed4:	003f9b06 	br	8011d44 <__umoddi3+0x390>
 8011ed8:	102d883a 	mov	r22,r2
 8011edc:	003f8406 	br	8011cf0 <__umoddi3+0x33c>
 8011ee0:	2509883a 	add	r4,r4,r20
 8011ee4:	003f4006 	br	8011be8 <__umoddi3+0x234>

08011ee8 <__divsi3>:
 8011ee8:	20001a16 	blt	r4,zero,8011f54 <__divsi3+0x6c>
 8011eec:	000f883a 	mov	r7,zero
 8011ef0:	2800020e 	bge	r5,zero,8011efc <__divsi3+0x14>
 8011ef4:	014bc83a 	sub	r5,zero,r5
 8011ef8:	39c0005c 	xori	r7,r7,1
 8011efc:	200d883a 	mov	r6,r4
 8011f00:	00c00044 	movi	r3,1
 8011f04:	2900092e 	bgeu	r5,r4,8011f2c <__divsi3+0x44>
 8011f08:	00800804 	movi	r2,32
 8011f0c:	00c00044 	movi	r3,1
 8011f10:	00000106 	br	8011f18 <__divsi3+0x30>
 8011f14:	10001226 	beq	r2,zero,8011f60 <__divsi3+0x78>
 8011f18:	294b883a 	add	r5,r5,r5
 8011f1c:	10bfffc4 	addi	r2,r2,-1
 8011f20:	18c7883a 	add	r3,r3,r3
 8011f24:	293ffb36 	bltu	r5,r4,8011f14 <__divsi3+0x2c>
 8011f28:	18000d26 	beq	r3,zero,8011f60 <__divsi3+0x78>
 8011f2c:	0005883a 	mov	r2,zero
 8011f30:	31400236 	bltu	r6,r5,8011f3c <__divsi3+0x54>
 8011f34:	314dc83a 	sub	r6,r6,r5
 8011f38:	10c4b03a 	or	r2,r2,r3
 8011f3c:	1806d07a 	srli	r3,r3,1
 8011f40:	280ad07a 	srli	r5,r5,1
 8011f44:	183ffa1e 	bne	r3,zero,8011f30 <__divsi3+0x48>
 8011f48:	38000126 	beq	r7,zero,8011f50 <__divsi3+0x68>
 8011f4c:	0085c83a 	sub	r2,zero,r2
 8011f50:	f800283a 	ret
 8011f54:	0109c83a 	sub	r4,zero,r4
 8011f58:	01c00044 	movi	r7,1
 8011f5c:	003fe406 	br	8011ef0 <__divsi3+0x8>
 8011f60:	0005883a 	mov	r2,zero
 8011f64:	003ff806 	br	8011f48 <__divsi3+0x60>

08011f68 <__modsi3>:
 8011f68:	20001916 	blt	r4,zero,8011fd0 <__modsi3+0x68>
 8011f6c:	000f883a 	mov	r7,zero
 8011f70:	2005883a 	mov	r2,r4
 8011f74:	2800010e 	bge	r5,zero,8011f7c <__modsi3+0x14>
 8011f78:	014bc83a 	sub	r5,zero,r5
 8011f7c:	00c00044 	movi	r3,1
 8011f80:	2900092e 	bgeu	r5,r4,8011fa8 <__modsi3+0x40>
 8011f84:	01800804 	movi	r6,32
 8011f88:	00c00044 	movi	r3,1
 8011f8c:	00000106 	br	8011f94 <__modsi3+0x2c>
 8011f90:	30000d26 	beq	r6,zero,8011fc8 <__modsi3+0x60>
 8011f94:	294b883a 	add	r5,r5,r5
 8011f98:	31bfffc4 	addi	r6,r6,-1
 8011f9c:	18c7883a 	add	r3,r3,r3
 8011fa0:	293ffb36 	bltu	r5,r4,8011f90 <__modsi3+0x28>
 8011fa4:	18000826 	beq	r3,zero,8011fc8 <__modsi3+0x60>
 8011fa8:	1806d07a 	srli	r3,r3,1
 8011fac:	11400136 	bltu	r2,r5,8011fb4 <__modsi3+0x4c>
 8011fb0:	1145c83a 	sub	r2,r2,r5
 8011fb4:	280ad07a 	srli	r5,r5,1
 8011fb8:	183ffb1e 	bne	r3,zero,8011fa8 <__modsi3+0x40>
 8011fbc:	38000126 	beq	r7,zero,8011fc4 <__modsi3+0x5c>
 8011fc0:	0085c83a 	sub	r2,zero,r2
 8011fc4:	f800283a 	ret
 8011fc8:	2005883a 	mov	r2,r4
 8011fcc:	003ffb06 	br	8011fbc <__modsi3+0x54>
 8011fd0:	0109c83a 	sub	r4,zero,r4
 8011fd4:	01c00044 	movi	r7,1
 8011fd8:	003fe506 	br	8011f70 <__modsi3+0x8>

08011fdc <__udivsi3>:
 8011fdc:	200d883a 	mov	r6,r4
 8011fe0:	2900152e 	bgeu	r5,r4,8012038 <__udivsi3+0x5c>
 8011fe4:	28001416 	blt	r5,zero,8012038 <__udivsi3+0x5c>
 8011fe8:	00800804 	movi	r2,32
 8011fec:	00c00044 	movi	r3,1
 8011ff0:	00000206 	br	8011ffc <__udivsi3+0x20>
 8011ff4:	10000e26 	beq	r2,zero,8012030 <__udivsi3+0x54>
 8011ff8:	28000516 	blt	r5,zero,8012010 <__udivsi3+0x34>
 8011ffc:	294b883a 	add	r5,r5,r5
 8012000:	10bfffc4 	addi	r2,r2,-1
 8012004:	18c7883a 	add	r3,r3,r3
 8012008:	293ffa36 	bltu	r5,r4,8011ff4 <__udivsi3+0x18>
 801200c:	18000826 	beq	r3,zero,8012030 <__udivsi3+0x54>
 8012010:	0005883a 	mov	r2,zero
 8012014:	31400236 	bltu	r6,r5,8012020 <__udivsi3+0x44>
 8012018:	314dc83a 	sub	r6,r6,r5
 801201c:	10c4b03a 	or	r2,r2,r3
 8012020:	1806d07a 	srli	r3,r3,1
 8012024:	280ad07a 	srli	r5,r5,1
 8012028:	183ffa1e 	bne	r3,zero,8012014 <__udivsi3+0x38>
 801202c:	f800283a 	ret
 8012030:	0005883a 	mov	r2,zero
 8012034:	f800283a 	ret
 8012038:	00c00044 	movi	r3,1
 801203c:	003ff406 	br	8012010 <__udivsi3+0x34>

08012040 <__umodsi3>:
 8012040:	2005883a 	mov	r2,r4
 8012044:	2900132e 	bgeu	r5,r4,8012094 <__umodsi3+0x54>
 8012048:	28001216 	blt	r5,zero,8012094 <__umodsi3+0x54>
 801204c:	01800804 	movi	r6,32
 8012050:	00c00044 	movi	r3,1
 8012054:	00000206 	br	8012060 <__umodsi3+0x20>
 8012058:	30000c26 	beq	r6,zero,801208c <__umodsi3+0x4c>
 801205c:	28000516 	blt	r5,zero,8012074 <__umodsi3+0x34>
 8012060:	294b883a 	add	r5,r5,r5
 8012064:	31bfffc4 	addi	r6,r6,-1
 8012068:	18c7883a 	add	r3,r3,r3
 801206c:	293ffa36 	bltu	r5,r4,8012058 <__umodsi3+0x18>
 8012070:	18000626 	beq	r3,zero,801208c <__umodsi3+0x4c>
 8012074:	1806d07a 	srli	r3,r3,1
 8012078:	11400136 	bltu	r2,r5,8012080 <__umodsi3+0x40>
 801207c:	1145c83a 	sub	r2,r2,r5
 8012080:	280ad07a 	srli	r5,r5,1
 8012084:	183ffb1e 	bne	r3,zero,8012074 <__umodsi3+0x34>
 8012088:	f800283a 	ret
 801208c:	2005883a 	mov	r2,r4
 8012090:	f800283a 	ret
 8012094:	00c00044 	movi	r3,1
 8012098:	003ff606 	br	8012074 <__umodsi3+0x34>

0801209c <__adddf3>:
 801209c:	02000434 	movhi	r8,16
 80120a0:	423fffc4 	addi	r8,r8,-1
 80120a4:	3a12703a 	and	r9,r7,r8
 80120a8:	2a06703a 	and	r3,r5,r8
 80120ac:	2818d53a 	srli	r12,r5,20
 80120b0:	3804d53a 	srli	r2,r7,20
 80120b4:	481490fa 	slli	r10,r9,3
 80120b8:	280ad7fa 	srli	r5,r5,31
 80120bc:	180690fa 	slli	r3,r3,3
 80120c0:	2016d77a 	srli	r11,r4,29
 80120c4:	3012d77a 	srli	r9,r6,29
 80120c8:	380ed7fa 	srli	r7,r7,31
 80120cc:	defffb04 	addi	sp,sp,-20
 80120d0:	dc400115 	stw	r17,4(sp)
 80120d4:	dc000015 	stw	r16,0(sp)
 80120d8:	dfc00415 	stw	ra,16(sp)
 80120dc:	dcc00315 	stw	r19,12(sp)
 80120e0:	dc800215 	stw	r18,8(sp)
 80120e4:	201c90fa 	slli	r14,r4,3
 80120e8:	301a90fa 	slli	r13,r6,3
 80120ec:	6441ffcc 	andi	r17,r12,2047
 80120f0:	2821883a 	mov	r16,r5
 80120f4:	58c6b03a 	or	r3,r11,r3
 80120f8:	1081ffcc 	andi	r2,r2,2047
 80120fc:	4a92b03a 	or	r9,r9,r10
 8012100:	29c06326 	beq	r5,r7,8012290 <__adddf3+0x1f4>
 8012104:	888bc83a 	sub	r5,r17,r2
 8012108:	0140560e 	bge	zero,r5,8012264 <__adddf3+0x1c8>
 801210c:	10007526 	beq	r2,zero,80122e4 <__adddf3+0x248>
 8012110:	8881ffd8 	cmpnei	r2,r17,2047
 8012114:	10012d26 	beq	r2,zero,80125cc <__adddf3+0x530>
 8012118:	4a402034 	orhi	r9,r9,128
 801211c:	28800e48 	cmpgei	r2,r5,57
 8012120:	1000f41e 	bne	r2,zero,80124f4 <__adddf3+0x458>
 8012124:	28800808 	cmpgei	r2,r5,32
 8012128:	1001471e 	bne	r2,zero,8012648 <__adddf3+0x5ac>
 801212c:	00800804 	movi	r2,32
 8012130:	1145c83a 	sub	r2,r2,r5
 8012134:	6948d83a 	srl	r4,r13,r5
 8012138:	48a4983a 	sll	r18,r9,r2
 801213c:	6884983a 	sll	r2,r13,r2
 8012140:	494ad83a 	srl	r5,r9,r5
 8012144:	9124b03a 	or	r18,r18,r4
 8012148:	101ac03a 	cmpne	r13,r2,zero
 801214c:	9364b03a 	or	r18,r18,r13
 8012150:	1947c83a 	sub	r3,r3,r5
 8012154:	74a5c83a 	sub	r18,r14,r18
 8012158:	7489803a 	cmpltu	r4,r14,r18
 801215c:	1909c83a 	sub	r4,r3,r4
 8012160:	2080202c 	andhi	r2,r4,128
 8012164:	10008626 	beq	r2,zero,8012380 <__adddf3+0x2e4>
 8012168:	00802034 	movhi	r2,128
 801216c:	10bfffc4 	addi	r2,r2,-1
 8012170:	20a6703a 	and	r19,r4,r2
 8012174:	9800d626 	beq	r19,zero,80124d0 <__adddf3+0x434>
 8012178:	9809883a 	mov	r4,r19
 801217c:	80146980 	call	8014698 <__clzsi2>
 8012180:	133ffe04 	addi	r12,r2,-8
 8012184:	01000804 	movi	r4,32
 8012188:	2309c83a 	sub	r4,r4,r12
 801218c:	9108d83a 	srl	r4,r18,r4
 8012190:	9b04983a 	sll	r2,r19,r12
 8012194:	9324983a 	sll	r18,r18,r12
 8012198:	2088b03a 	or	r4,r4,r2
 801219c:	6440c716 	blt	r12,r17,80124bc <__adddf3+0x420>
 80121a0:	6459c83a 	sub	r12,r12,r17
 80121a4:	62000044 	addi	r8,r12,1
 80121a8:	40800808 	cmpgei	r2,r8,32
 80121ac:	1001191e 	bne	r2,zero,8012614 <__adddf3+0x578>
 80121b0:	00800804 	movi	r2,32
 80121b4:	1205c83a 	sub	r2,r2,r8
 80121b8:	9206d83a 	srl	r3,r18,r8
 80121bc:	90a4983a 	sll	r18,r18,r2
 80121c0:	2084983a 	sll	r2,r4,r2
 80121c4:	2208d83a 	srl	r4,r4,r8
 80121c8:	9024c03a 	cmpne	r18,r18,zero
 80121cc:	10c4b03a 	or	r2,r2,r3
 80121d0:	14a4b03a 	or	r18,r2,r18
 80121d4:	0023883a 	mov	r17,zero
 80121d8:	908001cc 	andi	r2,r18,7
 80121dc:	10000726 	beq	r2,zero,80121fc <__adddf3+0x160>
 80121e0:	908003cc 	andi	r2,r18,15
 80121e4:	10800120 	cmpeqi	r2,r2,4
 80121e8:	1000041e 	bne	r2,zero,80121fc <__adddf3+0x160>
 80121ec:	90c00104 	addi	r3,r18,4
 80121f0:	1ca5803a 	cmpltu	r18,r3,r18
 80121f4:	2489883a 	add	r4,r4,r18
 80121f8:	1825883a 	mov	r18,r3
 80121fc:	2080202c 	andhi	r2,r4,128
 8012200:	10006126 	beq	r2,zero,8012388 <__adddf3+0x2ec>
 8012204:	89400044 	addi	r5,r17,1
 8012208:	2881ffe0 	cmpeqi	r2,r5,2047
 801220c:	2941ffcc 	andi	r5,r5,2047
 8012210:	1000731e 	bne	r2,zero,80123e0 <__adddf3+0x344>
 8012214:	023fe034 	movhi	r8,65408
 8012218:	423fffc4 	addi	r8,r8,-1
 801221c:	2210703a 	and	r8,r4,r8
 8012220:	4006927a 	slli	r3,r8,9
 8012224:	9024d0fa 	srli	r18,r18,3
 8012228:	4004977a 	slli	r2,r8,29
 801222c:	1806d33a 	srli	r3,r3,12
 8012230:	1484b03a 	or	r2,r2,r18
 8012234:	280a953a 	slli	r5,r5,20
 8012238:	84003fcc 	andi	r16,r16,255
 801223c:	802097fa 	slli	r16,r16,31
 8012240:	28c6b03a 	or	r3,r5,r3
 8012244:	1c06b03a 	or	r3,r3,r16
 8012248:	dfc00417 	ldw	ra,16(sp)
 801224c:	dcc00317 	ldw	r19,12(sp)
 8012250:	dc800217 	ldw	r18,8(sp)
 8012254:	dc400117 	ldw	r17,4(sp)
 8012258:	dc000017 	ldw	r16,0(sp)
 801225c:	dec00504 	addi	sp,sp,20
 8012260:	f800283a 	ret
 8012264:	28002726 	beq	r5,zero,8012304 <__adddf3+0x268>
 8012268:	144bc83a 	sub	r5,r2,r17
 801226c:	8800be1e 	bne	r17,zero,8012568 <__adddf3+0x4cc>
 8012270:	1b88b03a 	or	r4,r3,r14
 8012274:	20013126 	beq	r4,zero,801273c <__adddf3+0x6a0>
 8012278:	293fffc4 	addi	r4,r5,-1
 801227c:	20017226 	beq	r4,zero,8012848 <__adddf3+0x7ac>
 8012280:	2941ffd8 	cmpnei	r5,r5,2047
 8012284:	2801c226 	beq	r5,zero,8012990 <__adddf3+0x8f4>
 8012288:	200b883a 	mov	r5,r4
 801228c:	0000b906 	br	8012574 <__adddf3+0x4d8>
 8012290:	888bc83a 	sub	r5,r17,r2
 8012294:	0140700e 	bge	zero,r5,8012458 <__adddf3+0x3bc>
 8012298:	10002a26 	beq	r2,zero,8012344 <__adddf3+0x2a8>
 801229c:	8881ffd8 	cmpnei	r2,r17,2047
 80122a0:	1000ca26 	beq	r2,zero,80125cc <__adddf3+0x530>
 80122a4:	4a402034 	orhi	r9,r9,128
 80122a8:	28800e48 	cmpgei	r2,r5,57
 80122ac:	1000421e 	bne	r2,zero,80123b8 <__adddf3+0x31c>
 80122b0:	28800808 	cmpgei	r2,r5,32
 80122b4:	1000ff26 	beq	r2,zero,80126b4 <__adddf3+0x618>
 80122b8:	2cbff804 	addi	r18,r5,-32
 80122bc:	29000820 	cmpeqi	r4,r5,32
 80122c0:	4c84d83a 	srl	r2,r9,r18
 80122c4:	2000041e 	bne	r4,zero,80122d8 <__adddf3+0x23c>
 80122c8:	01001004 	movi	r4,64
 80122cc:	214bc83a 	sub	r5,r4,r5
 80122d0:	4952983a 	sll	r9,r9,r5
 80122d4:	6a5ab03a 	or	r13,r13,r9
 80122d8:	6824c03a 	cmpne	r18,r13,zero
 80122dc:	90a4b03a 	or	r18,r18,r2
 80122e0:	00003706 	br	80123c0 <__adddf3+0x324>
 80122e4:	4b44b03a 	or	r2,r9,r13
 80122e8:	1000b126 	beq	r2,zero,80125b0 <__adddf3+0x514>
 80122ec:	28bfffc4 	addi	r2,r5,-1
 80122f0:	10011a26 	beq	r2,zero,801275c <__adddf3+0x6c0>
 80122f4:	2941ffd8 	cmpnei	r5,r5,2047
 80122f8:	28012526 	beq	r5,zero,8012790 <__adddf3+0x6f4>
 80122fc:	100b883a 	mov	r5,r2
 8012300:	003f8606 	br	801211c <__adddf3+0x80>
 8012304:	8a800044 	addi	r10,r17,1
 8012308:	5281ff8c 	andi	r10,r10,2046
 801230c:	50008b1e 	bne	r10,zero,801253c <__adddf3+0x4a0>
 8012310:	1b96b03a 	or	r11,r3,r14
 8012314:	4b44b03a 	or	r2,r9,r13
 8012318:	8801031e 	bne	r17,zero,8012728 <__adddf3+0x68c>
 801231c:	58014126 	beq	r11,zero,8012824 <__adddf3+0x788>
 8012320:	1001571e 	bne	r2,zero,8012880 <__adddf3+0x7e4>
 8012324:	1804977a 	slli	r2,r3,29
 8012328:	01480034 	movhi	r5,8192
 801232c:	297fffc4 	addi	r5,r5,-1
 8012330:	2148703a 	and	r4,r4,r5
 8012334:	1810d0fa 	srli	r8,r3,3
 8012338:	1104b03a 	or	r2,r2,r4
 801233c:	500b883a 	mov	r5,r10
 8012340:	00001806 	br	80123a4 <__adddf3+0x308>
 8012344:	4b44b03a 	or	r2,r9,r13
 8012348:	10010a26 	beq	r2,zero,8012774 <__adddf3+0x6d8>
 801234c:	28bfffc4 	addi	r2,r5,-1
 8012350:	10000426 	beq	r2,zero,8012364 <__adddf3+0x2c8>
 8012354:	2941ffd8 	cmpnei	r5,r5,2047
 8012358:	28014226 	beq	r5,zero,8012864 <__adddf3+0x7c8>
 801235c:	100b883a 	mov	r5,r2
 8012360:	003fd106 	br	80122a8 <__adddf3+0x20c>
 8012364:	7365883a 	add	r18,r14,r13
 8012368:	1a47883a 	add	r3,r3,r9
 801236c:	9389803a 	cmpltu	r4,r18,r14
 8012370:	1909883a 	add	r4,r3,r4
 8012374:	2080202c 	andhi	r2,r4,128
 8012378:	10009b1e 	bne	r2,zero,80125e8 <__adddf3+0x54c>
 801237c:	04400044 	movi	r17,1
 8012380:	908001cc 	andi	r2,r18,7
 8012384:	103f961e 	bne	r2,zero,80121e0 <__adddf3+0x144>
 8012388:	9024d0fa 	srli	r18,r18,3
 801238c:	2004977a 	slli	r2,r4,29
 8012390:	2010d0fa 	srli	r8,r4,3
 8012394:	880b883a 	mov	r5,r17
 8012398:	9084b03a 	or	r2,r18,r2
 801239c:	28c1ffe0 	cmpeqi	r3,r5,2047
 80123a0:	1800251e 	bne	r3,zero,8012438 <__adddf3+0x39c>
 80123a4:	00c00434 	movhi	r3,16
 80123a8:	18ffffc4 	addi	r3,r3,-1
 80123ac:	40c6703a 	and	r3,r8,r3
 80123b0:	2941ffcc 	andi	r5,r5,2047
 80123b4:	003f9f06 	br	8012234 <__adddf3+0x198>
 80123b8:	4b64b03a 	or	r18,r9,r13
 80123bc:	9024c03a 	cmpne	r18,r18,zero
 80123c0:	93a5883a 	add	r18,r18,r14
 80123c4:	9389803a 	cmpltu	r4,r18,r14
 80123c8:	20c9883a 	add	r4,r4,r3
 80123cc:	2080202c 	andhi	r2,r4,128
 80123d0:	103feb26 	beq	r2,zero,8012380 <__adddf3+0x2e4>
 80123d4:	8c400044 	addi	r17,r17,1
 80123d8:	8881ffe0 	cmpeqi	r2,r17,2047
 80123dc:	10008326 	beq	r2,zero,80125ec <__adddf3+0x550>
 80123e0:	0141ffc4 	movi	r5,2047
 80123e4:	0007883a 	mov	r3,zero
 80123e8:	0005883a 	mov	r2,zero
 80123ec:	003f9106 	br	8012234 <__adddf3+0x198>
 80123f0:	4b44b03a 	or	r2,r9,r13
 80123f4:	180a977a 	slli	r5,r3,29
 80123f8:	1810d0fa 	srli	r8,r3,3
 80123fc:	10016c26 	beq	r2,zero,80129b0 <__adddf3+0x914>
 8012400:	00c80034 	movhi	r3,8192
 8012404:	18ffffc4 	addi	r3,r3,-1
 8012408:	20c4703a 	and	r2,r4,r3
 801240c:	4100022c 	andhi	r4,r8,8
 8012410:	1144b03a 	or	r2,r2,r5
 8012414:	20000826 	beq	r4,zero,8012438 <__adddf3+0x39c>
 8012418:	4808d0fa 	srli	r4,r9,3
 801241c:	2140022c 	andhi	r5,r4,8
 8012420:	2800051e 	bne	r5,zero,8012438 <__adddf3+0x39c>
 8012424:	4804977a 	slli	r2,r9,29
 8012428:	30cc703a 	and	r6,r6,r3
 801242c:	3821883a 	mov	r16,r7
 8012430:	3084b03a 	or	r2,r6,r2
 8012434:	2011883a 	mov	r8,r4
 8012438:	4086b03a 	or	r3,r8,r2
 801243c:	18017126 	beq	r3,zero,8012a04 <__adddf3+0x968>
 8012440:	01000434 	movhi	r4,16
 8012444:	40c00234 	orhi	r3,r8,8
 8012448:	213fffc4 	addi	r4,r4,-1
 801244c:	1906703a 	and	r3,r3,r4
 8012450:	0141ffc4 	movi	r5,2047
 8012454:	003f7706 	br	8012234 <__adddf3+0x198>
 8012458:	28002926 	beq	r5,zero,8012500 <__adddf3+0x464>
 801245c:	144bc83a 	sub	r5,r2,r17
 8012460:	88008c26 	beq	r17,zero,8012694 <__adddf3+0x5f8>
 8012464:	1101ffd8 	cmpnei	r4,r2,2047
 8012468:	20011126 	beq	r4,zero,80128b0 <__adddf3+0x814>
 801246c:	18c02034 	orhi	r3,r3,128
 8012470:	29000e48 	cmpgei	r4,r5,57
 8012474:	2000d51e 	bne	r4,zero,80127cc <__adddf3+0x730>
 8012478:	29000808 	cmpgei	r4,r5,32
 801247c:	2001511e 	bne	r4,zero,80129c4 <__adddf3+0x928>
 8012480:	01000804 	movi	r4,32
 8012484:	2149c83a 	sub	r4,r4,r5
 8012488:	1924983a 	sll	r18,r3,r4
 801248c:	714cd83a 	srl	r6,r14,r5
 8012490:	7108983a 	sll	r4,r14,r4
 8012494:	194ad83a 	srl	r5,r3,r5
 8012498:	91a4b03a 	or	r18,r18,r6
 801249c:	2006c03a 	cmpne	r3,r4,zero
 80124a0:	90e4b03a 	or	r18,r18,r3
 80124a4:	4953883a 	add	r9,r9,r5
 80124a8:	9365883a 	add	r18,r18,r13
 80124ac:	9349803a 	cmpltu	r4,r18,r13
 80124b0:	2249883a 	add	r4,r4,r9
 80124b4:	1023883a 	mov	r17,r2
 80124b8:	003fc406 	br	80123cc <__adddf3+0x330>
 80124bc:	023fe034 	movhi	r8,65408
 80124c0:	423fffc4 	addi	r8,r8,-1
 80124c4:	8b23c83a 	sub	r17,r17,r12
 80124c8:	2208703a 	and	r4,r4,r8
 80124cc:	003f4206 	br	80121d8 <__adddf3+0x13c>
 80124d0:	9009883a 	mov	r4,r18
 80124d4:	80146980 	call	8014698 <__clzsi2>
 80124d8:	13000604 	addi	r12,r2,24
 80124dc:	60c00808 	cmpgei	r3,r12,32
 80124e0:	183f2826 	beq	r3,zero,8012184 <__adddf3+0xe8>
 80124e4:	113ffe04 	addi	r4,r2,-8
 80124e8:	9108983a 	sll	r4,r18,r4
 80124ec:	0025883a 	mov	r18,zero
 80124f0:	003f2a06 	br	801219c <__adddf3+0x100>
 80124f4:	4b64b03a 	or	r18,r9,r13
 80124f8:	9024c03a 	cmpne	r18,r18,zero
 80124fc:	003f1506 	br	8012154 <__adddf3+0xb8>
 8012500:	8a000044 	addi	r8,r17,1
 8012504:	4081ff8c 	andi	r2,r8,2046
 8012508:	1000751e 	bne	r2,zero,80126e0 <__adddf3+0x644>
 801250c:	1b84b03a 	or	r2,r3,r14
 8012510:	8800bc1e 	bne	r17,zero,8012804 <__adddf3+0x768>
 8012514:	10010c26 	beq	r2,zero,8012948 <__adddf3+0x8ac>
 8012518:	4b44b03a 	or	r2,r9,r13
 801251c:	1001111e 	bne	r2,zero,8012964 <__adddf3+0x8c8>
 8012520:	180c977a 	slli	r6,r3,29
 8012524:	00880034 	movhi	r2,8192
 8012528:	10bfffc4 	addi	r2,r2,-1
 801252c:	2084703a 	and	r2,r4,r2
 8012530:	1810d0fa 	srli	r8,r3,3
 8012534:	1184b03a 	or	r2,r2,r6
 8012538:	003f9a06 	br	80123a4 <__adddf3+0x308>
 801253c:	7365c83a 	sub	r18,r14,r13
 8012540:	1a67c83a 	sub	r19,r3,r9
 8012544:	7489803a 	cmpltu	r4,r14,r18
 8012548:	9927c83a 	sub	r19,r19,r4
 801254c:	9880202c 	andhi	r2,r19,128
 8012550:	10006f1e 	bne	r2,zero,8012710 <__adddf3+0x674>
 8012554:	94c4b03a 	or	r2,r18,r19
 8012558:	103f061e 	bne	r2,zero,8012174 <__adddf3+0xd8>
 801255c:	0011883a 	mov	r8,zero
 8012560:	0021883a 	mov	r16,zero
 8012564:	003f8f06 	br	80123a4 <__adddf3+0x308>
 8012568:	1101ffd8 	cmpnei	r4,r2,2047
 801256c:	20008f26 	beq	r4,zero,80127ac <__adddf3+0x710>
 8012570:	18c02034 	orhi	r3,r3,128
 8012574:	29000e48 	cmpgei	r4,r5,57
 8012578:	20003e1e 	bne	r4,zero,8012674 <__adddf3+0x5d8>
 801257c:	29000808 	cmpgei	r4,r5,32
 8012580:	2000951e 	bne	r4,zero,80127d8 <__adddf3+0x73c>
 8012584:	01000804 	movi	r4,32
 8012588:	2149c83a 	sub	r4,r4,r5
 801258c:	1924983a 	sll	r18,r3,r4
 8012590:	714cd83a 	srl	r6,r14,r5
 8012594:	711c983a 	sll	r14,r14,r4
 8012598:	1946d83a 	srl	r3,r3,r5
 801259c:	91a4b03a 	or	r18,r18,r6
 80125a0:	701cc03a 	cmpne	r14,r14,zero
 80125a4:	93a4b03a 	or	r18,r18,r14
 80125a8:	48d3c83a 	sub	r9,r9,r3
 80125ac:	00003306 	br	801267c <__adddf3+0x5e0>
 80125b0:	1824977a 	slli	r18,r3,29
 80125b4:	01880034 	movhi	r6,8192
 80125b8:	31bfffc4 	addi	r6,r6,-1
 80125bc:	2184703a 	and	r2,r4,r6
 80125c0:	1810d0fa 	srli	r8,r3,3
 80125c4:	1484b03a 	or	r2,r2,r18
 80125c8:	003f7406 	br	801239c <__adddf3+0x300>
 80125cc:	1804977a 	slli	r2,r3,29
 80125d0:	01480034 	movhi	r5,8192
 80125d4:	297fffc4 	addi	r5,r5,-1
 80125d8:	2148703a 	and	r4,r4,r5
 80125dc:	1810d0fa 	srli	r8,r3,3
 80125e0:	1104b03a 	or	r2,r2,r4
 80125e4:	003f9406 	br	8012438 <__adddf3+0x39c>
 80125e8:	04400084 	movi	r17,2
 80125ec:	00bfe034 	movhi	r2,65408
 80125f0:	10bfffc4 	addi	r2,r2,-1
 80125f4:	9006d07a 	srli	r3,r18,1
 80125f8:	2088703a 	and	r4,r4,r2
 80125fc:	200497fa 	slli	r2,r4,31
 8012600:	9480004c 	andi	r18,r18,1
 8012604:	1ca4b03a 	or	r18,r3,r18
 8012608:	2008d07a 	srli	r4,r4,1
 801260c:	14a4b03a 	or	r18,r2,r18
 8012610:	003ef106 	br	80121d8 <__adddf3+0x13c>
 8012614:	633ff844 	addi	r12,r12,-31
 8012618:	40800820 	cmpeqi	r2,r8,32
 801261c:	2318d83a 	srl	r12,r4,r12
 8012620:	1000041e 	bne	r2,zero,8012634 <__adddf3+0x598>
 8012624:	00801004 	movi	r2,64
 8012628:	1211c83a 	sub	r8,r2,r8
 801262c:	2208983a 	sll	r4,r4,r8
 8012630:	9124b03a 	or	r18,r18,r4
 8012634:	9024c03a 	cmpne	r18,r18,zero
 8012638:	9324b03a 	or	r18,r18,r12
 801263c:	0009883a 	mov	r4,zero
 8012640:	0023883a 	mov	r17,zero
 8012644:	003f4e06 	br	8012380 <__adddf3+0x2e4>
 8012648:	2cbff804 	addi	r18,r5,-32
 801264c:	29000820 	cmpeqi	r4,r5,32
 8012650:	4c84d83a 	srl	r2,r9,r18
 8012654:	2000041e 	bne	r4,zero,8012668 <__adddf3+0x5cc>
 8012658:	01001004 	movi	r4,64
 801265c:	214bc83a 	sub	r5,r4,r5
 8012660:	4952983a 	sll	r9,r9,r5
 8012664:	6a5ab03a 	or	r13,r13,r9
 8012668:	6824c03a 	cmpne	r18,r13,zero
 801266c:	90a4b03a 	or	r18,r18,r2
 8012670:	003eb806 	br	8012154 <__adddf3+0xb8>
 8012674:	1b88b03a 	or	r4,r3,r14
 8012678:	2024c03a 	cmpne	r18,r4,zero
 801267c:	6ca5c83a 	sub	r18,r13,r18
 8012680:	6c89803a 	cmpltu	r4,r13,r18
 8012684:	4909c83a 	sub	r4,r9,r4
 8012688:	3821883a 	mov	r16,r7
 801268c:	1023883a 	mov	r17,r2
 8012690:	003eb306 	br	8012160 <__adddf3+0xc4>
 8012694:	1b88b03a 	or	r4,r3,r14
 8012698:	20008c26 	beq	r4,zero,80128cc <__adddf3+0x830>
 801269c:	293fffc4 	addi	r4,r5,-1
 80126a0:	2000d326 	beq	r4,zero,80129f0 <__adddf3+0x954>
 80126a4:	2941ffd8 	cmpnei	r5,r5,2047
 80126a8:	28008126 	beq	r5,zero,80128b0 <__adddf3+0x814>
 80126ac:	200b883a 	mov	r5,r4
 80126b0:	003f6f06 	br	8012470 <__adddf3+0x3d4>
 80126b4:	00800804 	movi	r2,32
 80126b8:	1145c83a 	sub	r2,r2,r5
 80126bc:	6948d83a 	srl	r4,r13,r5
 80126c0:	48a4983a 	sll	r18,r9,r2
 80126c4:	6884983a 	sll	r2,r13,r2
 80126c8:	494ad83a 	srl	r5,r9,r5
 80126cc:	9124b03a 	or	r18,r18,r4
 80126d0:	101ac03a 	cmpne	r13,r2,zero
 80126d4:	9364b03a 	or	r18,r18,r13
 80126d8:	1947883a 	add	r3,r3,r5
 80126dc:	003f3806 	br	80123c0 <__adddf3+0x324>
 80126e0:	4081ffe0 	cmpeqi	r2,r8,2047
 80126e4:	103f3e1e 	bne	r2,zero,80123e0 <__adddf3+0x344>
 80126e8:	7345883a 	add	r2,r14,r13
 80126ec:	139d803a 	cmpltu	r14,r2,r14
 80126f0:	1a49883a 	add	r4,r3,r9
 80126f4:	2389883a 	add	r4,r4,r14
 80126f8:	202497fa 	slli	r18,r4,31
 80126fc:	1004d07a 	srli	r2,r2,1
 8012700:	2008d07a 	srli	r4,r4,1
 8012704:	4023883a 	mov	r17,r8
 8012708:	90a4b03a 	or	r18,r18,r2
 801270c:	003f1c06 	br	8012380 <__adddf3+0x2e4>
 8012710:	6ba5c83a 	sub	r18,r13,r14
 8012714:	48c9c83a 	sub	r4,r9,r3
 8012718:	6c85803a 	cmpltu	r2,r13,r18
 801271c:	20a7c83a 	sub	r19,r4,r2
 8012720:	3821883a 	mov	r16,r7
 8012724:	003e9306 	br	8012174 <__adddf3+0xd8>
 8012728:	58006f1e 	bne	r11,zero,80128e8 <__adddf3+0x84c>
 801272c:	10001f1e 	bne	r2,zero,80127ac <__adddf3+0x710>
 8012730:	00bfffc4 	movi	r2,-1
 8012734:	0021883a 	mov	r16,zero
 8012738:	003f4106 	br	8012440 <__adddf3+0x3a4>
 801273c:	4808977a 	slli	r4,r9,29
 8012740:	00c80034 	movhi	r3,8192
 8012744:	18ffffc4 	addi	r3,r3,-1
 8012748:	30c4703a 	and	r2,r6,r3
 801274c:	4810d0fa 	srli	r8,r9,3
 8012750:	1104b03a 	or	r2,r2,r4
 8012754:	3821883a 	mov	r16,r7
 8012758:	003f1006 	br	801239c <__adddf3+0x300>
 801275c:	7365c83a 	sub	r18,r14,r13
 8012760:	1a47c83a 	sub	r3,r3,r9
 8012764:	7489803a 	cmpltu	r4,r14,r18
 8012768:	1909c83a 	sub	r4,r3,r4
 801276c:	04400044 	movi	r17,1
 8012770:	003e7b06 	br	8012160 <__adddf3+0xc4>
 8012774:	1824977a 	slli	r18,r3,29
 8012778:	01c80034 	movhi	r7,8192
 801277c:	39ffffc4 	addi	r7,r7,-1
 8012780:	21c4703a 	and	r2,r4,r7
 8012784:	1810d0fa 	srli	r8,r3,3
 8012788:	1484b03a 	or	r2,r2,r18
 801278c:	003f0306 	br	801239c <__adddf3+0x300>
 8012790:	1824977a 	slli	r18,r3,29
 8012794:	01480034 	movhi	r5,8192
 8012798:	297fffc4 	addi	r5,r5,-1
 801279c:	2144703a 	and	r2,r4,r5
 80127a0:	1810d0fa 	srli	r8,r3,3
 80127a4:	1484b03a 	or	r2,r2,r18
 80127a8:	003f2306 	br	8012438 <__adddf3+0x39c>
 80127ac:	4806977a 	slli	r3,r9,29
 80127b0:	00880034 	movhi	r2,8192
 80127b4:	10bfffc4 	addi	r2,r2,-1
 80127b8:	3084703a 	and	r2,r6,r2
 80127bc:	4810d0fa 	srli	r8,r9,3
 80127c0:	10c4b03a 	or	r2,r2,r3
 80127c4:	3821883a 	mov	r16,r7
 80127c8:	003f1b06 	br	8012438 <__adddf3+0x39c>
 80127cc:	1b88b03a 	or	r4,r3,r14
 80127d0:	2024c03a 	cmpne	r18,r4,zero
 80127d4:	003f3406 	br	80124a8 <__adddf3+0x40c>
 80127d8:	2cbff804 	addi	r18,r5,-32
 80127dc:	29800820 	cmpeqi	r6,r5,32
 80127e0:	1c88d83a 	srl	r4,r3,r18
 80127e4:	3000041e 	bne	r6,zero,80127f8 <__adddf3+0x75c>
 80127e8:	01801004 	movi	r6,64
 80127ec:	314bc83a 	sub	r5,r6,r5
 80127f0:	1946983a 	sll	r3,r3,r5
 80127f4:	70dcb03a 	or	r14,r14,r3
 80127f8:	7024c03a 	cmpne	r18,r14,zero
 80127fc:	9124b03a 	or	r18,r18,r4
 8012800:	003f9e06 	br	801267c <__adddf3+0x5e0>
 8012804:	103efa1e 	bne	r2,zero,80123f0 <__adddf3+0x354>
 8012808:	4804977a 	slli	r2,r9,29
 801280c:	00c80034 	movhi	r3,8192
 8012810:	18ffffc4 	addi	r3,r3,-1
 8012814:	30cc703a 	and	r6,r6,r3
 8012818:	4810d0fa 	srli	r8,r9,3
 801281c:	1184b03a 	or	r2,r2,r6
 8012820:	003f0506 	br	8012438 <__adddf3+0x39c>
 8012824:	10004426 	beq	r2,zero,8012938 <__adddf3+0x89c>
 8012828:	4806977a 	slli	r3,r9,29
 801282c:	00880034 	movhi	r2,8192
 8012830:	10bfffc4 	addi	r2,r2,-1
 8012834:	3084703a 	and	r2,r6,r2
 8012838:	4810d0fa 	srli	r8,r9,3
 801283c:	10c4b03a 	or	r2,r2,r3
 8012840:	3821883a 	mov	r16,r7
 8012844:	003ed706 	br	80123a4 <__adddf3+0x308>
 8012848:	6ba5c83a 	sub	r18,r13,r14
 801284c:	48c7c83a 	sub	r3,r9,r3
 8012850:	6c85803a 	cmpltu	r2,r13,r18
 8012854:	1889c83a 	sub	r4,r3,r2
 8012858:	3821883a 	mov	r16,r7
 801285c:	04400044 	movi	r17,1
 8012860:	003e3f06 	br	8012160 <__adddf3+0xc4>
 8012864:	180a977a 	slli	r5,r3,29
 8012868:	00880034 	movhi	r2,8192
 801286c:	10bfffc4 	addi	r2,r2,-1
 8012870:	2084703a 	and	r2,r4,r2
 8012874:	1810d0fa 	srli	r8,r3,3
 8012878:	1144b03a 	or	r2,r2,r5
 801287c:	003eee06 	br	8012438 <__adddf3+0x39c>
 8012880:	7365c83a 	sub	r18,r14,r13
 8012884:	7485803a 	cmpltu	r2,r14,r18
 8012888:	1a49c83a 	sub	r4,r3,r9
 801288c:	2089c83a 	sub	r4,r4,r2
 8012890:	2080202c 	andhi	r2,r4,128
 8012894:	10002626 	beq	r2,zero,8012930 <__adddf3+0x894>
 8012898:	6ba5c83a 	sub	r18,r13,r14
 801289c:	48c7c83a 	sub	r3,r9,r3
 80128a0:	6c85803a 	cmpltu	r2,r13,r18
 80128a4:	1889c83a 	sub	r4,r3,r2
 80128a8:	3821883a 	mov	r16,r7
 80128ac:	003e4a06 	br	80121d8 <__adddf3+0x13c>
 80128b0:	4806977a 	slli	r3,r9,29
 80128b4:	00880034 	movhi	r2,8192
 80128b8:	10bfffc4 	addi	r2,r2,-1
 80128bc:	3084703a 	and	r2,r6,r2
 80128c0:	4810d0fa 	srli	r8,r9,3
 80128c4:	10c4b03a 	or	r2,r2,r3
 80128c8:	003edb06 	br	8012438 <__adddf3+0x39c>
 80128cc:	4806977a 	slli	r3,r9,29
 80128d0:	00880034 	movhi	r2,8192
 80128d4:	10bfffc4 	addi	r2,r2,-1
 80128d8:	3084703a 	and	r2,r6,r2
 80128dc:	4810d0fa 	srli	r8,r9,3
 80128e0:	10c4b03a 	or	r2,r2,r3
 80128e4:	003ead06 	br	801239c <__adddf3+0x300>
 80128e8:	180a977a 	slli	r5,r3,29
 80128ec:	1810d0fa 	srli	r8,r3,3
 80128f0:	10002f26 	beq	r2,zero,80129b0 <__adddf3+0x914>
 80128f4:	00c80034 	movhi	r3,8192
 80128f8:	18ffffc4 	addi	r3,r3,-1
 80128fc:	20c4703a 	and	r2,r4,r3
 8012900:	4100022c 	andhi	r4,r8,8
 8012904:	1144b03a 	or	r2,r2,r5
 8012908:	203ecb26 	beq	r4,zero,8012438 <__adddf3+0x39c>
 801290c:	4808d0fa 	srli	r4,r9,3
 8012910:	2140022c 	andhi	r5,r4,8
 8012914:	283ec81e 	bne	r5,zero,8012438 <__adddf3+0x39c>
 8012918:	4812977a 	slli	r9,r9,29
 801291c:	30c4703a 	and	r2,r6,r3
 8012920:	3821883a 	mov	r16,r7
 8012924:	1244b03a 	or	r2,r2,r9
 8012928:	2011883a 	mov	r8,r4
 801292c:	003ec206 	br	8012438 <__adddf3+0x39c>
 8012930:	9104b03a 	or	r2,r18,r4
 8012934:	103e921e 	bne	r2,zero,8012380 <__adddf3+0x2e4>
 8012938:	0011883a 	mov	r8,zero
 801293c:	100b883a 	mov	r5,r2
 8012940:	0021883a 	mov	r16,zero
 8012944:	003e9706 	br	80123a4 <__adddf3+0x308>
 8012948:	4804977a 	slli	r2,r9,29
 801294c:	00c80034 	movhi	r3,8192
 8012950:	18ffffc4 	addi	r3,r3,-1
 8012954:	30cc703a 	and	r6,r6,r3
 8012958:	4810d0fa 	srli	r8,r9,3
 801295c:	1184b03a 	or	r2,r2,r6
 8012960:	003e9006 	br	80123a4 <__adddf3+0x308>
 8012964:	7365883a 	add	r18,r14,r13
 8012968:	1a47883a 	add	r3,r3,r9
 801296c:	9389803a 	cmpltu	r4,r18,r14
 8012970:	1909883a 	add	r4,r3,r4
 8012974:	2080202c 	andhi	r2,r4,128
 8012978:	103e8126 	beq	r2,zero,8012380 <__adddf3+0x2e4>
 801297c:	00bfe034 	movhi	r2,65408
 8012980:	10bfffc4 	addi	r2,r2,-1
 8012984:	2088703a 	and	r4,r4,r2
 8012988:	04400044 	movi	r17,1
 801298c:	003e7c06 	br	8012380 <__adddf3+0x2e4>
 8012990:	4804977a 	slli	r2,r9,29
 8012994:	00c80034 	movhi	r3,8192
 8012998:	18ffffc4 	addi	r3,r3,-1
 801299c:	30cc703a 	and	r6,r6,r3
 80129a0:	4810d0fa 	srli	r8,r9,3
 80129a4:	1184b03a 	or	r2,r2,r6
 80129a8:	3821883a 	mov	r16,r7
 80129ac:	003ea206 	br	8012438 <__adddf3+0x39c>
 80129b0:	00880034 	movhi	r2,8192
 80129b4:	10bfffc4 	addi	r2,r2,-1
 80129b8:	2084703a 	and	r2,r4,r2
 80129bc:	1144b03a 	or	r2,r2,r5
 80129c0:	003e9d06 	br	8012438 <__adddf3+0x39c>
 80129c4:	293ff804 	addi	r4,r5,-32
 80129c8:	29800820 	cmpeqi	r6,r5,32
 80129cc:	1908d83a 	srl	r4,r3,r4
 80129d0:	3000041e 	bne	r6,zero,80129e4 <__adddf3+0x948>
 80129d4:	01801004 	movi	r6,64
 80129d8:	314bc83a 	sub	r5,r6,r5
 80129dc:	1946983a 	sll	r3,r3,r5
 80129e0:	70dcb03a 	or	r14,r14,r3
 80129e4:	7024c03a 	cmpne	r18,r14,zero
 80129e8:	9124b03a 	or	r18,r18,r4
 80129ec:	003eae06 	br	80124a8 <__adddf3+0x40c>
 80129f0:	7365883a 	add	r18,r14,r13
 80129f4:	1a47883a 	add	r3,r3,r9
 80129f8:	9345803a 	cmpltu	r2,r18,r13
 80129fc:	1889883a 	add	r4,r3,r2
 8012a00:	003e5c06 	br	8012374 <__adddf3+0x2d8>
 8012a04:	0005883a 	mov	r2,zero
 8012a08:	0141ffc4 	movi	r5,2047
 8012a0c:	0007883a 	mov	r3,zero
 8012a10:	003e0806 	br	8012234 <__adddf3+0x198>

08012a14 <__divdf3>:
 8012a14:	2804d53a 	srli	r2,r5,20
 8012a18:	defff204 	addi	sp,sp,-56
 8012a1c:	dc000415 	stw	r16,16(sp)
 8012a20:	04000434 	movhi	r16,16
 8012a24:	ddc00b15 	stw	r23,44(sp)
 8012a28:	dd800a15 	stw	r22,40(sp)
 8012a2c:	dc800615 	stw	r18,24(sp)
 8012a30:	843fffc4 	addi	r16,r16,-1
 8012a34:	dfc00d15 	stw	ra,52(sp)
 8012a38:	df000c15 	stw	fp,48(sp)
 8012a3c:	dd400915 	stw	r21,36(sp)
 8012a40:	dd000815 	stw	r20,32(sp)
 8012a44:	dcc00715 	stw	r19,28(sp)
 8012a48:	dc400515 	stw	r17,20(sp)
 8012a4c:	1081ffcc 	andi	r2,r2,2047
 8012a50:	282cd7fa 	srli	r22,r5,31
 8012a54:	302f883a 	mov	r23,r6
 8012a58:	2025883a 	mov	r18,r4
 8012a5c:	2c20703a 	and	r16,r5,r16
 8012a60:	10005326 	beq	r2,zero,8012bb0 <__divdf3+0x19c>
 8012a64:	10c1ffe0 	cmpeqi	r3,r2,2047
 8012a68:	1800661e 	bne	r3,zero,8012c04 <__divdf3+0x1f0>
 8012a6c:	2028d77a 	srli	r20,r4,29
 8012a70:	800a90fa 	slli	r5,r16,3
 8012a74:	202490fa 	slli	r18,r4,3
 8012a78:	14ff0044 	addi	r19,r2,-1023
 8012a7c:	a14ab03a 	or	r5,r20,r5
 8012a80:	2d002034 	orhi	r20,r5,128
 8012a84:	0021883a 	mov	r16,zero
 8012a88:	0039883a 	mov	fp,zero
 8012a8c:	3804d53a 	srli	r2,r7,20
 8012a90:	00c00434 	movhi	r3,16
 8012a94:	18ffffc4 	addi	r3,r3,-1
 8012a98:	1081ffcc 	andi	r2,r2,2047
 8012a9c:	3810d7fa 	srli	r8,r7,31
 8012aa0:	38e2703a 	and	r17,r7,r3
 8012aa4:	10005e26 	beq	r2,zero,8012c20 <__divdf3+0x20c>
 8012aa8:	10c1ffe0 	cmpeqi	r3,r2,2047
 8012aac:	1800201e 	bne	r3,zero,8012b30 <__divdf3+0x11c>
 8012ab0:	880690fa 	slli	r3,r17,3
 8012ab4:	b822d77a 	srli	r17,r23,29
 8012ab8:	b81290fa 	slli	r9,r23,3
 8012abc:	10bf0044 	addi	r2,r2,-1023
 8012ac0:	88c6b03a 	or	r3,r17,r3
 8012ac4:	1c402034 	orhi	r17,r3,128
 8012ac8:	98a7c83a 	sub	r19,r19,r2
 8012acc:	0007883a 	mov	r3,zero
 8012ad0:	80800428 	cmpgeui	r2,r16,16
 8012ad4:	b22af03a 	xor	r21,r22,r8
 8012ad8:	1000ac1e 	bne	r2,zero,8012d8c <__divdf3+0x378>
 8012adc:	800490ba 	slli	r2,r16,2
 8012ae0:	01820074 	movhi	r6,2049
 8012ae4:	118d883a 	add	r6,r2,r6
 8012ae8:	308abc17 	ldw	r2,10992(r6)
 8012aec:	1000683a 	jmp	r2
 8012af0:	08012d8c 	andi	zero,at,1206
 8012af4:	08012ba0 	cmpeqi	zero,at,1198
 8012af8:	08012b4c 	andi	zero,at,1197
 8012afc:	08012cd4 	ori	zero,at,1203
 8012b00:	08012b4c 	andi	zero,at,1197
 8012b04:	08012d30 	cmpltui	zero,at,1204
 8012b08:	08012b4c 	andi	zero,at,1197
 8012b0c:	08012cd4 	ori	zero,at,1203
 8012b10:	08012ba0 	cmpeqi	zero,at,1198
 8012b14:	08012ba0 	cmpeqi	zero,at,1198
 8012b18:	08012d30 	cmpltui	zero,at,1204
 8012b1c:	08012cd4 	ori	zero,at,1203
 8012b20:	08012c6c 	andhi	zero,at,1201
 8012b24:	08012c6c 	andhi	zero,at,1201
 8012b28:	08012c6c 	andhi	zero,at,1201
 8012b2c:	08012d48 	cmpgei	zero,at,1205
 8012b30:	8dd2b03a 	or	r9,r17,r23
 8012b34:	9cfe0044 	addi	r19,r19,-2047
 8012b38:	48006b1e 	bne	r9,zero,8012ce8 <__divdf3+0x2d4>
 8012b3c:	84000094 	ori	r16,r16,2
 8012b40:	0023883a 	mov	r17,zero
 8012b44:	00c00084 	movi	r3,2
 8012b48:	003fe106 	br	8012ad0 <__divdf3+0xbc>
 8012b4c:	0007883a 	mov	r3,zero
 8012b50:	000b883a 	mov	r5,zero
 8012b54:	0025883a 	mov	r18,zero
 8012b58:	a8803fcc 	andi	r2,r21,255
 8012b5c:	1806953a 	slli	r3,r3,20
 8012b60:	100497fa 	slli	r2,r2,31
 8012b64:	1946b03a 	or	r3,r3,r5
 8012b68:	1886b03a 	or	r3,r3,r2
 8012b6c:	9005883a 	mov	r2,r18
 8012b70:	dfc00d17 	ldw	ra,52(sp)
 8012b74:	df000c17 	ldw	fp,48(sp)
 8012b78:	ddc00b17 	ldw	r23,44(sp)
 8012b7c:	dd800a17 	ldw	r22,40(sp)
 8012b80:	dd400917 	ldw	r21,36(sp)
 8012b84:	dd000817 	ldw	r20,32(sp)
 8012b88:	dcc00717 	ldw	r19,28(sp)
 8012b8c:	dc800617 	ldw	r18,24(sp)
 8012b90:	dc400517 	ldw	r17,20(sp)
 8012b94:	dc000417 	ldw	r16,16(sp)
 8012b98:	dec00e04 	addi	sp,sp,56
 8012b9c:	f800283a 	ret
 8012ba0:	00c1ffc4 	movi	r3,2047
 8012ba4:	000b883a 	mov	r5,zero
 8012ba8:	0025883a 	mov	r18,zero
 8012bac:	003fea06 	br	8012b58 <__divdf3+0x144>
 8012bb0:	2428b03a 	or	r20,r4,r16
 8012bb4:	2023883a 	mov	r17,r4
 8012bb8:	a0005326 	beq	r20,zero,8012d08 <__divdf3+0x2f4>
 8012bbc:	d9c00015 	stw	r7,0(sp)
 8012bc0:	80014126 	beq	r16,zero,80130c8 <__divdf3+0x6b4>
 8012bc4:	8009883a 	mov	r4,r16
 8012bc8:	80146980 	call	8014698 <__clzsi2>
 8012bcc:	d9c00017 	ldw	r7,0(sp)
 8012bd0:	10fffd44 	addi	r3,r2,-11
 8012bd4:	05000744 	movi	r20,29
 8012bd8:	113ffe04 	addi	r4,r2,-8
 8012bdc:	a0e9c83a 	sub	r20,r20,r3
 8012be0:	810a983a 	sll	r5,r16,r4
 8012be4:	8d28d83a 	srl	r20,r17,r20
 8012be8:	8924983a 	sll	r18,r17,r4
 8012bec:	a168b03a 	or	r20,r20,r5
 8012bf0:	04ff0344 	movi	r19,-1011
 8012bf4:	98a7c83a 	sub	r19,r19,r2
 8012bf8:	0021883a 	mov	r16,zero
 8012bfc:	0039883a 	mov	fp,zero
 8012c00:	003fa206 	br	8012a8c <__divdf3+0x78>
 8012c04:	2428b03a 	or	r20,r4,r16
 8012c08:	a000441e 	bne	r20,zero,8012d1c <__divdf3+0x308>
 8012c0c:	0025883a 	mov	r18,zero
 8012c10:	04000204 	movi	r16,8
 8012c14:	04c1ffc4 	movi	r19,2047
 8012c18:	07000084 	movi	fp,2
 8012c1c:	003f9b06 	br	8012a8c <__divdf3+0x78>
 8012c20:	8dd2b03a 	or	r9,r17,r23
 8012c24:	48003426 	beq	r9,zero,8012cf8 <__divdf3+0x2e4>
 8012c28:	da000015 	stw	r8,0(sp)
 8012c2c:	88013126 	beq	r17,zero,80130f4 <__divdf3+0x6e0>
 8012c30:	8809883a 	mov	r4,r17
 8012c34:	80146980 	call	8014698 <__clzsi2>
 8012c38:	da000017 	ldw	r8,0(sp)
 8012c3c:	117ffd44 	addi	r5,r2,-11
 8012c40:	01000744 	movi	r4,29
 8012c44:	127ffe04 	addi	r9,r2,-8
 8012c48:	2149c83a 	sub	r4,r4,r5
 8012c4c:	8a46983a 	sll	r3,r17,r9
 8012c50:	b908d83a 	srl	r4,r23,r4
 8012c54:	ba52983a 	sll	r9,r23,r9
 8012c58:	20e2b03a 	or	r17,r4,r3
 8012c5c:	14c5883a 	add	r2,r2,r19
 8012c60:	14c0fcc4 	addi	r19,r2,1011
 8012c64:	0007883a 	mov	r3,zero
 8012c68:	003f9906 	br	8012ad0 <__divdf3+0xbc>
 8012c6c:	b02b883a 	mov	r21,r22
 8012c70:	e08000a0 	cmpeqi	r2,fp,2
 8012c74:	103fca1e 	bne	r2,zero,8012ba0 <__divdf3+0x18c>
 8012c78:	e08000e0 	cmpeqi	r2,fp,3
 8012c7c:	1001741e 	bne	r2,zero,8013250 <__divdf3+0x83c>
 8012c80:	e0800060 	cmpeqi	r2,fp,1
 8012c84:	103fb11e 	bne	r2,zero,8012b4c <__divdf3+0x138>
 8012c88:	9c40ffc4 	addi	r17,r19,1023
 8012c8c:	0440de0e 	bge	zero,r17,8013008 <__divdf3+0x5f4>
 8012c90:	908001cc 	andi	r2,r18,7
 8012c94:	10014a1e 	bne	r2,zero,80131c0 <__divdf3+0x7ac>
 8012c98:	900cd0fa 	srli	r6,r18,3
 8012c9c:	a080402c 	andhi	r2,r20,256
 8012ca0:	10000426 	beq	r2,zero,8012cb4 <__divdf3+0x2a0>
 8012ca4:	00bfc034 	movhi	r2,65280
 8012ca8:	10bfffc4 	addi	r2,r2,-1
 8012cac:	a0a8703a 	and	r20,r20,r2
 8012cb0:	9c410004 	addi	r17,r19,1024
 8012cb4:	8881ffc8 	cmpgei	r2,r17,2047
 8012cb8:	103fb91e 	bne	r2,zero,8012ba0 <__divdf3+0x18c>
 8012cbc:	a008977a 	slli	r4,r20,29
 8012cc0:	a00a927a 	slli	r5,r20,9
 8012cc4:	88c1ffcc 	andi	r3,r17,2047
 8012cc8:	21a4b03a 	or	r18,r4,r6
 8012ccc:	280ad33a 	srli	r5,r5,12
 8012cd0:	003fa106 	br	8012b58 <__divdf3+0x144>
 8012cd4:	402b883a 	mov	r21,r8
 8012cd8:	8829883a 	mov	r20,r17
 8012cdc:	4825883a 	mov	r18,r9
 8012ce0:	1839883a 	mov	fp,r3
 8012ce4:	003fe206 	br	8012c70 <__divdf3+0x25c>
 8012ce8:	840000d4 	ori	r16,r16,3
 8012cec:	b813883a 	mov	r9,r23
 8012cf0:	00c000c4 	movi	r3,3
 8012cf4:	003f7606 	br	8012ad0 <__divdf3+0xbc>
 8012cf8:	84000054 	ori	r16,r16,1
 8012cfc:	0023883a 	mov	r17,zero
 8012d00:	00c00044 	movi	r3,1
 8012d04:	003f7206 	br	8012ad0 <__divdf3+0xbc>
 8012d08:	0025883a 	mov	r18,zero
 8012d0c:	04000104 	movi	r16,4
 8012d10:	0027883a 	mov	r19,zero
 8012d14:	07000044 	movi	fp,1
 8012d18:	003f5c06 	br	8012a8c <__divdf3+0x78>
 8012d1c:	8029883a 	mov	r20,r16
 8012d20:	04c1ffc4 	movi	r19,2047
 8012d24:	04000304 	movi	r16,12
 8012d28:	070000c4 	movi	fp,3
 8012d2c:	003f5706 	br	8012a8c <__divdf3+0x78>
 8012d30:	01400434 	movhi	r5,16
 8012d34:	002b883a 	mov	r21,zero
 8012d38:	297fffc4 	addi	r5,r5,-1
 8012d3c:	04bfffc4 	movi	r18,-1
 8012d40:	00c1ffc4 	movi	r3,2047
 8012d44:	003f8406 	br	8012b58 <__divdf3+0x144>
 8012d48:	a080022c 	andhi	r2,r20,8
 8012d4c:	10000926 	beq	r2,zero,8012d74 <__divdf3+0x360>
 8012d50:	8880022c 	andhi	r2,r17,8
 8012d54:	1000071e 	bne	r2,zero,8012d74 <__divdf3+0x360>
 8012d58:	00800434 	movhi	r2,16
 8012d5c:	89400234 	orhi	r5,r17,8
 8012d60:	10bfffc4 	addi	r2,r2,-1
 8012d64:	288a703a 	and	r5,r5,r2
 8012d68:	402b883a 	mov	r21,r8
 8012d6c:	4825883a 	mov	r18,r9
 8012d70:	003ff306 	br	8012d40 <__divdf3+0x32c>
 8012d74:	00800434 	movhi	r2,16
 8012d78:	a1400234 	orhi	r5,r20,8
 8012d7c:	10bfffc4 	addi	r2,r2,-1
 8012d80:	288a703a 	and	r5,r5,r2
 8012d84:	b02b883a 	mov	r21,r22
 8012d88:	003fed06 	br	8012d40 <__divdf3+0x32c>
 8012d8c:	8d00c836 	bltu	r17,r20,80130b0 <__divdf3+0x69c>
 8012d90:	8d00c626 	beq	r17,r20,80130ac <__divdf3+0x698>
 8012d94:	9cffffc4 	addi	r19,r19,-1
 8012d98:	0021883a 	mov	r16,zero
 8012d9c:	8806923a 	slli	r3,r17,8
 8012da0:	480cd63a 	srli	r6,r9,24
 8012da4:	4804923a 	slli	r2,r9,8
 8012da8:	1838d43a 	srli	fp,r3,16
 8012dac:	a009883a 	mov	r4,r20
 8012db0:	30ecb03a 	or	r22,r6,r3
 8012db4:	e00b883a 	mov	r5,fp
 8012db8:	d8800015 	stw	r2,0(sp)
 8012dbc:	8011fdc0 	call	8011fdc <__udivsi3>
 8012dc0:	a009883a 	mov	r4,r20
 8012dc4:	e00b883a 	mov	r5,fp
 8012dc8:	d8800115 	stw	r2,4(sp)
 8012dcc:	80120400 	call	8012040 <__umodsi3>
 8012dd0:	d8c00117 	ldw	r3,4(sp)
 8012dd4:	1004943a 	slli	r2,r2,16
 8012dd8:	9008d43a 	srli	r4,r18,16
 8012ddc:	b5ffffcc 	andi	r23,r22,65535
 8012de0:	b8e3383a 	mul	r17,r23,r3
 8012de4:	2088b03a 	or	r4,r4,r2
 8012de8:	2440042e 	bgeu	r4,r17,8012dfc <__divdf3+0x3e8>
 8012dec:	2589883a 	add	r4,r4,r22
 8012df0:	18bfffc4 	addi	r2,r3,-1
 8012df4:	2580d32e 	bgeu	r4,r22,8013144 <__divdf3+0x730>
 8012df8:	1007883a 	mov	r3,r2
 8012dfc:	2463c83a 	sub	r17,r4,r17
 8012e00:	e00b883a 	mov	r5,fp
 8012e04:	8809883a 	mov	r4,r17
 8012e08:	d8c00115 	stw	r3,4(sp)
 8012e0c:	8011fdc0 	call	8011fdc <__udivsi3>
 8012e10:	8809883a 	mov	r4,r17
 8012e14:	e00b883a 	mov	r5,fp
 8012e18:	1029883a 	mov	r20,r2
 8012e1c:	80120400 	call	8012040 <__umodsi3>
 8012e20:	1008943a 	slli	r4,r2,16
 8012e24:	bd13383a 	mul	r9,r23,r20
 8012e28:	94bfffcc 	andi	r18,r18,65535
 8012e2c:	9108b03a 	or	r4,r18,r4
 8012e30:	d8c00117 	ldw	r3,4(sp)
 8012e34:	2240042e 	bgeu	r4,r9,8012e48 <__divdf3+0x434>
 8012e38:	2589883a 	add	r4,r4,r22
 8012e3c:	a0bfffc4 	addi	r2,r20,-1
 8012e40:	2580bc2e 	bgeu	r4,r22,8013134 <__divdf3+0x720>
 8012e44:	1029883a 	mov	r20,r2
 8012e48:	180a943a 	slli	r5,r3,16
 8012e4c:	d8800017 	ldw	r2,0(sp)
 8012e50:	2249c83a 	sub	r4,r4,r9
 8012e54:	2d28b03a 	or	r20,r5,r20
 8012e58:	100ed43a 	srli	r7,r2,16
 8012e5c:	123fffcc 	andi	r8,r2,65535
 8012e60:	a00ad43a 	srli	r5,r20,16
 8012e64:	a0bfffcc 	andi	r2,r20,65535
 8012e68:	1225383a 	mul	r18,r2,r8
 8012e6c:	2a15383a 	mul	r10,r5,r8
 8012e70:	3887383a 	mul	r3,r7,r2
 8012e74:	9004d43a 	srli	r2,r18,16
 8012e78:	29cb383a 	mul	r5,r5,r7
 8012e7c:	1a87883a 	add	r3,r3,r10
 8012e80:	10c5883a 	add	r2,r2,r3
 8012e84:	1280022e 	bgeu	r2,r10,8012e90 <__divdf3+0x47c>
 8012e88:	00c00074 	movhi	r3,1
 8012e8c:	28cb883a 	add	r5,r5,r3
 8012e90:	1006d43a 	srli	r3,r2,16
 8012e94:	1004943a 	slli	r2,r2,16
 8012e98:	94bfffcc 	andi	r18,r18,65535
 8012e9c:	1947883a 	add	r3,r3,r5
 8012ea0:	14a5883a 	add	r18,r2,r18
 8012ea4:	20c07636 	bltu	r4,r3,8013080 <__divdf3+0x66c>
 8012ea8:	20c07426 	beq	r4,r3,801307c <__divdf3+0x668>
 8012eac:	84a5c83a 	sub	r18,r16,r18
 8012eb0:	20c9c83a 	sub	r4,r4,r3
 8012eb4:	84a1803a 	cmpltu	r16,r16,r18
 8012eb8:	2421c83a 	sub	r16,r4,r16
 8012ebc:	9c40ffc4 	addi	r17,r19,1023
 8012ec0:	b400ba26 	beq	r22,r16,80131ac <__divdf3+0x798>
 8012ec4:	8009883a 	mov	r4,r16
 8012ec8:	e00b883a 	mov	r5,fp
 8012ecc:	da000315 	stw	r8,12(sp)
 8012ed0:	d9c00215 	stw	r7,8(sp)
 8012ed4:	8011fdc0 	call	8011fdc <__udivsi3>
 8012ed8:	8009883a 	mov	r4,r16
 8012edc:	e00b883a 	mov	r5,fp
 8012ee0:	d8800115 	stw	r2,4(sp)
 8012ee4:	80120400 	call	8012040 <__umodsi3>
 8012ee8:	da400117 	ldw	r9,4(sp)
 8012eec:	1004943a 	slli	r2,r2,16
 8012ef0:	9008d43a 	srli	r4,r18,16
 8012ef4:	ba61383a 	mul	r16,r23,r9
 8012ef8:	d9c00217 	ldw	r7,8(sp)
 8012efc:	2088b03a 	or	r4,r4,r2
 8012f00:	da000317 	ldw	r8,12(sp)
 8012f04:	2400062e 	bgeu	r4,r16,8012f20 <__divdf3+0x50c>
 8012f08:	2589883a 	add	r4,r4,r22
 8012f0c:	48bfffc4 	addi	r2,r9,-1
 8012f10:	2580b536 	bltu	r4,r22,80131e8 <__divdf3+0x7d4>
 8012f14:	2400b42e 	bgeu	r4,r16,80131e8 <__divdf3+0x7d4>
 8012f18:	4a7fff84 	addi	r9,r9,-2
 8012f1c:	2589883a 	add	r4,r4,r22
 8012f20:	2421c83a 	sub	r16,r4,r16
 8012f24:	8009883a 	mov	r4,r16
 8012f28:	e00b883a 	mov	r5,fp
 8012f2c:	da000315 	stw	r8,12(sp)
 8012f30:	da400215 	stw	r9,8(sp)
 8012f34:	d9c00115 	stw	r7,4(sp)
 8012f38:	8011fdc0 	call	8011fdc <__udivsi3>
 8012f3c:	8009883a 	mov	r4,r16
 8012f40:	e00b883a 	mov	r5,fp
 8012f44:	1021883a 	mov	r16,r2
 8012f48:	80120400 	call	8012040 <__umodsi3>
 8012f4c:	1004943a 	slli	r2,r2,16
 8012f50:	bc2f383a 	mul	r23,r23,r16
 8012f54:	90ffffcc 	andi	r3,r18,65535
 8012f58:	1886b03a 	or	r3,r3,r2
 8012f5c:	d9c00117 	ldw	r7,4(sp)
 8012f60:	da400217 	ldw	r9,8(sp)
 8012f64:	da000317 	ldw	r8,12(sp)
 8012f68:	1dc0062e 	bgeu	r3,r23,8012f84 <__divdf3+0x570>
 8012f6c:	1d87883a 	add	r3,r3,r22
 8012f70:	80bfffc4 	addi	r2,r16,-1
 8012f74:	1d809a36 	bltu	r3,r22,80131e0 <__divdf3+0x7cc>
 8012f78:	1dc0992e 	bgeu	r3,r23,80131e0 <__divdf3+0x7cc>
 8012f7c:	843fff84 	addi	r16,r16,-2
 8012f80:	1d87883a 	add	r3,r3,r22
 8012f84:	4808943a 	slli	r4,r9,16
 8012f88:	1defc83a 	sub	r23,r3,r23
 8012f8c:	2424b03a 	or	r18,r4,r16
 8012f90:	900ad43a 	srli	r5,r18,16
 8012f94:	90bfffcc 	andi	r2,r18,65535
 8012f98:	4087383a 	mul	r3,r8,r2
 8012f9c:	3885383a 	mul	r2,r7,r2
 8012fa0:	2a11383a 	mul	r8,r5,r8
 8012fa4:	1808d43a 	srli	r4,r3,16
 8012fa8:	394f383a 	mul	r7,r7,r5
 8012fac:	1205883a 	add	r2,r2,r8
 8012fb0:	2089883a 	add	r4,r4,r2
 8012fb4:	2200022e 	bgeu	r4,r8,8012fc0 <__divdf3+0x5ac>
 8012fb8:	00800074 	movhi	r2,1
 8012fbc:	388f883a 	add	r7,r7,r2
 8012fc0:	2004d43a 	srli	r2,r4,16
 8012fc4:	2008943a 	slli	r4,r4,16
 8012fc8:	18ffffcc 	andi	r3,r3,65535
 8012fcc:	11cf883a 	add	r7,r2,r7
 8012fd0:	20c9883a 	add	r4,r4,r3
 8012fd4:	b9c00436 	bltu	r23,r7,8012fe8 <__divdf3+0x5d4>
 8012fd8:	b9c00226 	beq	r23,r7,8012fe4 <__divdf3+0x5d0>
 8012fdc:	94800054 	ori	r18,r18,1
 8012fe0:	003f2a06 	br	8012c8c <__divdf3+0x278>
 8012fe4:	203f2926 	beq	r4,zero,8012c8c <__divdf3+0x278>
 8012fe8:	b5ef883a 	add	r23,r22,r23
 8012fec:	90bfffc4 	addi	r2,r18,-1
 8012ff0:	bd806936 	bltu	r23,r22,8013198 <__divdf3+0x784>
 8012ff4:	b9c08636 	bltu	r23,r7,8013210 <__divdf3+0x7fc>
 8012ff8:	b9c09a26 	beq	r23,r7,8013264 <__divdf3+0x850>
 8012ffc:	1025883a 	mov	r18,r2
 8013000:	003ff606 	br	8012fdc <__divdf3+0x5c8>
 8013004:	04bfffc4 	movi	r18,-1
 8013008:	01400044 	movi	r5,1
 801300c:	2c4bc83a 	sub	r5,r5,r17
 8013010:	28800e48 	cmpgei	r2,r5,57
 8013014:	103ecd1e 	bne	r2,zero,8012b4c <__divdf3+0x138>
 8013018:	28800808 	cmpgei	r2,r5,32
 801301c:	10004d1e 	bne	r2,zero,8013154 <__divdf3+0x740>
 8013020:	98810784 	addi	r2,r19,1054
 8013024:	a086983a 	sll	r3,r20,r2
 8013028:	9148d83a 	srl	r4,r18,r5
 801302c:	9084983a 	sll	r2,r18,r2
 8013030:	a14ad83a 	srl	r5,r20,r5
 8013034:	1924b03a 	or	r18,r3,r4
 8013038:	1004c03a 	cmpne	r2,r2,zero
 801303c:	90a4b03a 	or	r18,r18,r2
 8013040:	908001cc 	andi	r2,r18,7
 8013044:	10000726 	beq	r2,zero,8013064 <__divdf3+0x650>
 8013048:	908003cc 	andi	r2,r18,15
 801304c:	10800120 	cmpeqi	r2,r2,4
 8013050:	1000041e 	bne	r2,zero,8013064 <__divdf3+0x650>
 8013054:	90800104 	addi	r2,r18,4
 8013058:	14a5803a 	cmpltu	r18,r2,r18
 801305c:	2c8b883a 	add	r5,r5,r18
 8013060:	1025883a 	mov	r18,r2
 8013064:	2880202c 	andhi	r2,r5,128
 8013068:	10007526 	beq	r2,zero,8013240 <__divdf3+0x82c>
 801306c:	00c00044 	movi	r3,1
 8013070:	000b883a 	mov	r5,zero
 8013074:	0025883a 	mov	r18,zero
 8013078:	003eb706 	br	8012b58 <__divdf3+0x144>
 801307c:	84bf8b2e 	bgeu	r16,r18,8012eac <__divdf3+0x498>
 8013080:	d8800017 	ldw	r2,0(sp)
 8013084:	80a1883a 	add	r16,r16,r2
 8013088:	8085803a 	cmpltu	r2,r16,r2
 801308c:	1585883a 	add	r2,r2,r22
 8013090:	2089883a 	add	r4,r4,r2
 8013094:	a0bfffc4 	addi	r2,r20,-1
 8013098:	b100222e 	bgeu	r22,r4,8013124 <__divdf3+0x710>
 801309c:	20c05536 	bltu	r4,r3,80131f4 <__divdf3+0x7e0>
 80130a0:	19005326 	beq	r3,r4,80131f0 <__divdf3+0x7dc>
 80130a4:	1029883a 	mov	r20,r2
 80130a8:	003f8006 	br	8012eac <__divdf3+0x498>
 80130ac:	927f3936 	bltu	r18,r9,8012d94 <__divdf3+0x380>
 80130b0:	a00897fa 	slli	r4,r20,31
 80130b4:	9004d07a 	srli	r2,r18,1
 80130b8:	902097fa 	slli	r16,r18,31
 80130bc:	a028d07a 	srli	r20,r20,1
 80130c0:	20a4b03a 	or	r18,r4,r2
 80130c4:	003f3506 	br	8012d9c <__divdf3+0x388>
 80130c8:	80146980 	call	8014698 <__clzsi2>
 80130cc:	10c00544 	addi	r3,r2,21
 80130d0:	19000748 	cmpgei	r4,r3,29
 80130d4:	100b883a 	mov	r5,r2
 80130d8:	d9c00017 	ldw	r7,0(sp)
 80130dc:	10800804 	addi	r2,r2,32
 80130e0:	203ebc26 	beq	r4,zero,8012bd4 <__divdf3+0x1c0>
 80130e4:	297ffe04 	addi	r5,r5,-8
 80130e8:	9168983a 	sll	r20,r18,r5
 80130ec:	0025883a 	mov	r18,zero
 80130f0:	003ebf06 	br	8012bf0 <__divdf3+0x1dc>
 80130f4:	b809883a 	mov	r4,r23
 80130f8:	80146980 	call	8014698 <__clzsi2>
 80130fc:	11400544 	addi	r5,r2,21
 8013100:	29000748 	cmpgei	r4,r5,29
 8013104:	1007883a 	mov	r3,r2
 8013108:	da000017 	ldw	r8,0(sp)
 801310c:	10800804 	addi	r2,r2,32
 8013110:	203ecb26 	beq	r4,zero,8012c40 <__divdf3+0x22c>
 8013114:	18fffe04 	addi	r3,r3,-8
 8013118:	b8e2983a 	sll	r17,r23,r3
 801311c:	0013883a 	mov	r9,zero
 8013120:	003ece06 	br	8012c5c <__divdf3+0x248>
 8013124:	b13fdf1e 	bne	r22,r4,80130a4 <__divdf3+0x690>
 8013128:	d9400017 	ldw	r5,0(sp)
 801312c:	817fdd36 	bltu	r16,r5,80130a4 <__divdf3+0x690>
 8013130:	003fda06 	br	801309c <__divdf3+0x688>
 8013134:	227f432e 	bgeu	r4,r9,8012e44 <__divdf3+0x430>
 8013138:	a53fff84 	addi	r20,r20,-2
 801313c:	2589883a 	add	r4,r4,r22
 8013140:	003f4106 	br	8012e48 <__divdf3+0x434>
 8013144:	247f2c2e 	bgeu	r4,r17,8012df8 <__divdf3+0x3e4>
 8013148:	18ffff84 	addi	r3,r3,-2
 801314c:	2589883a 	add	r4,r4,r22
 8013150:	003f2a06 	br	8012dfc <__divdf3+0x3e8>
 8013154:	00fff844 	movi	r3,-31
 8013158:	1c47c83a 	sub	r3,r3,r17
 801315c:	29400820 	cmpeqi	r5,r5,32
 8013160:	a0c6d83a 	srl	r3,r20,r3
 8013164:	2800031e 	bne	r5,zero,8013174 <__divdf3+0x760>
 8013168:	99410f84 	addi	r5,r19,1086
 801316c:	a14a983a 	sll	r5,r20,r5
 8013170:	9164b03a 	or	r18,r18,r5
 8013174:	9024c03a 	cmpne	r18,r18,zero
 8013178:	90e4b03a 	or	r18,r18,r3
 801317c:	910001cc 	andi	r4,r18,7
 8013180:	20002b1e 	bne	r4,zero,8013230 <__divdf3+0x81c>
 8013184:	000b883a 	mov	r5,zero
 8013188:	9024d0fa 	srli	r18,r18,3
 801318c:	0007883a 	mov	r3,zero
 8013190:	9124b03a 	or	r18,r18,r4
 8013194:	003e7006 	br	8012b58 <__divdf3+0x144>
 8013198:	1025883a 	mov	r18,r2
 801319c:	b9ff8f1e 	bne	r23,r7,8012fdc <__divdf3+0x5c8>
 80131a0:	d8800017 	ldw	r2,0(sp)
 80131a4:	20bf8d1e 	bne	r4,r2,8012fdc <__divdf3+0x5c8>
 80131a8:	003eb806 	br	8012c8c <__divdf3+0x278>
 80131ac:	047f950e 	bge	zero,r17,8013004 <__divdf3+0x5f0>
 80131b0:	000d883a 	mov	r6,zero
 80131b4:	01000044 	movi	r4,1
 80131b8:	a129883a 	add	r20,r20,r4
 80131bc:	003eb706 	br	8012c9c <__divdf3+0x288>
 80131c0:	908003cc 	andi	r2,r18,15
 80131c4:	10800118 	cmpnei	r2,r2,4
 80131c8:	103eb326 	beq	r2,zero,8012c98 <__divdf3+0x284>
 80131cc:	91800104 	addi	r6,r18,4
 80131d0:	013ffec4 	movi	r4,-5
 80131d4:	300cd0fa 	srli	r6,r6,3
 80131d8:	2489803a 	cmpltu	r4,r4,r18
 80131dc:	003ff606 	br	80131b8 <__divdf3+0x7a4>
 80131e0:	1021883a 	mov	r16,r2
 80131e4:	003f6706 	br	8012f84 <__divdf3+0x570>
 80131e8:	1013883a 	mov	r9,r2
 80131ec:	003f4c06 	br	8012f20 <__divdf3+0x50c>
 80131f0:	84bfac2e 	bgeu	r16,r18,80130a4 <__divdf3+0x690>
 80131f4:	d8800017 	ldw	r2,0(sp)
 80131f8:	a53fff84 	addi	r20,r20,-2
 80131fc:	80a1883a 	add	r16,r16,r2
 8013200:	8085803a 	cmpltu	r2,r16,r2
 8013204:	1585883a 	add	r2,r2,r22
 8013208:	2089883a 	add	r4,r4,r2
 801320c:	003f2706 	br	8012eac <__divdf3+0x498>
 8013210:	d8c00017 	ldw	r3,0(sp)
 8013214:	94bfff84 	addi	r18,r18,-2
 8013218:	18c5883a 	add	r2,r3,r3
 801321c:	10c7803a 	cmpltu	r3,r2,r3
 8013220:	1d8d883a 	add	r6,r3,r22
 8013224:	b9af883a 	add	r23,r23,r6
 8013228:	d8800015 	stw	r2,0(sp)
 801322c:	003fdb06 	br	801319c <__divdf3+0x788>
 8013230:	908003cc 	andi	r2,r18,15
 8013234:	10800118 	cmpnei	r2,r2,4
 8013238:	000b883a 	mov	r5,zero
 801323c:	103f851e 	bne	r2,zero,8013054 <__divdf3+0x640>
 8013240:	2804927a 	slli	r2,r5,9
 8013244:	2808977a 	slli	r4,r5,29
 8013248:	100ad33a 	srli	r5,r2,12
 801324c:	003fce06 	br	8013188 <__divdf3+0x774>
 8013250:	00800434 	movhi	r2,16
 8013254:	a1400234 	orhi	r5,r20,8
 8013258:	10bfffc4 	addi	r2,r2,-1
 801325c:	288a703a 	and	r5,r5,r2
 8013260:	003eb706 	br	8012d40 <__divdf3+0x32c>
 8013264:	d8c00017 	ldw	r3,0(sp)
 8013268:	193fe936 	bltu	r3,r4,8013210 <__divdf3+0x7fc>
 801326c:	1025883a 	mov	r18,r2
 8013270:	003fcb06 	br	80131a0 <__divdf3+0x78c>

08013274 <__eqdf2>:
 8013274:	2810d53a 	srli	r8,r5,20
 8013278:	3806d53a 	srli	r3,r7,20
 801327c:	00800434 	movhi	r2,16
 8013280:	4201ffcc 	andi	r8,r8,2047
 8013284:	10bfffc4 	addi	r2,r2,-1
 8013288:	4241ffd8 	cmpnei	r9,r8,2047
 801328c:	2814d7fa 	srli	r10,r5,31
 8013290:	3816d7fa 	srli	r11,r7,31
 8013294:	288a703a 	and	r5,r5,r2
 8013298:	388e703a 	and	r7,r7,r2
 801329c:	1881ffcc 	andi	r2,r3,2047
 80132a0:	48000626 	beq	r9,zero,80132bc <__eqdf2+0x48>
 80132a4:	10c1ffe0 	cmpeqi	r3,r2,2047
 80132a8:	1800021e 	bne	r3,zero,80132b4 <__eqdf2+0x40>
 80132ac:	4080011e 	bne	r8,r2,80132b4 <__eqdf2+0x40>
 80132b0:	29c00826 	beq	r5,r7,80132d4 <__eqdf2+0x60>
 80132b4:	00800044 	movi	r2,1
 80132b8:	f800283a 	ret
 80132bc:	2906b03a 	or	r3,r5,r4
 80132c0:	183ffc1e 	bne	r3,zero,80132b4 <__eqdf2+0x40>
 80132c4:	1081ffd8 	cmpnei	r2,r2,2047
 80132c8:	103ffa1e 	bne	r2,zero,80132b4 <__eqdf2+0x40>
 80132cc:	398eb03a 	or	r7,r7,r6
 80132d0:	383ff81e 	bne	r7,zero,80132b4 <__eqdf2+0x40>
 80132d4:	21bff71e 	bne	r4,r6,80132b4 <__eqdf2+0x40>
 80132d8:	52c00426 	beq	r10,r11,80132ec <__eqdf2+0x78>
 80132dc:	403ff51e 	bne	r8,zero,80132b4 <__eqdf2+0x40>
 80132e0:	290ab03a 	or	r5,r5,r4
 80132e4:	2804c03a 	cmpne	r2,r5,zero
 80132e8:	f800283a 	ret
 80132ec:	0005883a 	mov	r2,zero
 80132f0:	f800283a 	ret

080132f4 <__gedf2>:
 80132f4:	2810d53a 	srli	r8,r5,20
 80132f8:	3812d53a 	srli	r9,r7,20
 80132fc:	00c00434 	movhi	r3,16
 8013300:	4201ffcc 	andi	r8,r8,2047
 8013304:	18ffffc4 	addi	r3,r3,-1
 8013308:	4281ffd8 	cmpnei	r10,r8,2047
 801330c:	2816d7fa 	srli	r11,r5,31
 8013310:	3804d7fa 	srli	r2,r7,31
 8013314:	28ca703a 	and	r5,r5,r3
 8013318:	38ce703a 	and	r7,r7,r3
 801331c:	48c1ffcc 	andi	r3,r9,2047
 8013320:	50000b26 	beq	r10,zero,8013350 <__gedf2+0x5c>
 8013324:	1a41ffd8 	cmpnei	r9,r3,2047
 8013328:	48000d26 	beq	r9,zero,8013360 <__gedf2+0x6c>
 801332c:	4000191e 	bne	r8,zero,8013394 <__gedf2+0xa0>
 8013330:	2914b03a 	or	r10,r5,r4
 8013334:	5013003a 	cmpeq	r9,r10,zero
 8013338:	1800131e 	bne	r3,zero,8013388 <__gedf2+0x94>
 801333c:	3998b03a 	or	r12,r7,r6
 8013340:	6000111e 	bne	r12,zero,8013388 <__gedf2+0x94>
 8013344:	50000a1e 	bne	r10,zero,8013370 <__gedf2+0x7c>
 8013348:	0005883a 	mov	r2,zero
 801334c:	f800283a 	ret
 8013350:	2912b03a 	or	r9,r5,r4
 8013354:	48001e1e 	bne	r9,zero,80133d0 <__gedf2+0xdc>
 8013358:	1a41ffe0 	cmpeqi	r9,r3,2047
 801335c:	48000d26 	beq	r9,zero,8013394 <__gedf2+0xa0>
 8013360:	3992b03a 	or	r9,r7,r6
 8013364:	48001a1e 	bne	r9,zero,80133d0 <__gedf2+0xdc>
 8013368:	40000526 	beq	r8,zero,8013380 <__gedf2+0x8c>
 801336c:	58800d26 	beq	r11,r2,80133a4 <__gedf2+0xb0>
 8013370:	00800044 	movi	r2,1
 8013374:	58000626 	beq	r11,zero,8013390 <__gedf2+0x9c>
 8013378:	00bfffc4 	movi	r2,-1
 801337c:	f800283a 	ret
 8013380:	2912b03a 	or	r9,r5,r4
 8013384:	4813003a 	cmpeq	r9,r9,zero
 8013388:	483ff826 	beq	r9,zero,801336c <__gedf2+0x78>
 801338c:	103ffa26 	beq	r2,zero,8013378 <__gedf2+0x84>
 8013390:	f800283a 	ret
 8013394:	183ff51e 	bne	r3,zero,801336c <__gedf2+0x78>
 8013398:	3992b03a 	or	r9,r7,r6
 801339c:	483ff31e 	bne	r9,zero,801336c <__gedf2+0x78>
 80133a0:	003ff306 	br	8013370 <__gedf2+0x7c>
 80133a4:	1a000716 	blt	r3,r8,80133c4 <__gedf2+0xd0>
 80133a8:	40fff816 	blt	r8,r3,801338c <__gedf2+0x98>
 80133ac:	397ff036 	bltu	r7,r5,8013370 <__gedf2+0x7c>
 80133b0:	29c00926 	beq	r5,r7,80133d8 <__gedf2+0xe4>
 80133b4:	29ffe42e 	bgeu	r5,r7,8013348 <__gedf2+0x54>
 80133b8:	583fef26 	beq	r11,zero,8013378 <__gedf2+0x84>
 80133bc:	5805883a 	mov	r2,r11
 80133c0:	f800283a 	ret
 80133c4:	103fec1e 	bne	r2,zero,8013378 <__gedf2+0x84>
 80133c8:	00800044 	movi	r2,1
 80133cc:	f800283a 	ret
 80133d0:	00bfff84 	movi	r2,-2
 80133d4:	f800283a 	ret
 80133d8:	313fe536 	bltu	r6,r4,8013370 <__gedf2+0x7c>
 80133dc:	21bfda2e 	bgeu	r4,r6,8013348 <__gedf2+0x54>
 80133e0:	003ff506 	br	80133b8 <__gedf2+0xc4>

080133e4 <__ledf2>:
 80133e4:	2810d53a 	srli	r8,r5,20
 80133e8:	3812d53a 	srli	r9,r7,20
 80133ec:	00c00434 	movhi	r3,16
 80133f0:	4201ffcc 	andi	r8,r8,2047
 80133f4:	18ffffc4 	addi	r3,r3,-1
 80133f8:	4281ffd8 	cmpnei	r10,r8,2047
 80133fc:	2816d7fa 	srli	r11,r5,31
 8013400:	3804d7fa 	srli	r2,r7,31
 8013404:	28ca703a 	and	r5,r5,r3
 8013408:	38ce703a 	and	r7,r7,r3
 801340c:	48c1ffcc 	andi	r3,r9,2047
 8013410:	50000b26 	beq	r10,zero,8013440 <__ledf2+0x5c>
 8013414:	1a41ffd8 	cmpnei	r9,r3,2047
 8013418:	48000d26 	beq	r9,zero,8013450 <__ledf2+0x6c>
 801341c:	40001b1e 	bne	r8,zero,801348c <__ledf2+0xa8>
 8013420:	2914b03a 	or	r10,r5,r4
 8013424:	5013003a 	cmpeq	r9,r10,zero
 8013428:	18000e1e 	bne	r3,zero,8013464 <__ledf2+0x80>
 801342c:	3998b03a 	or	r12,r7,r6
 8013430:	60000c1e 	bne	r12,zero,8013464 <__ledf2+0x80>
 8013434:	50000d1e 	bne	r10,zero,801346c <__ledf2+0x88>
 8013438:	0005883a 	mov	r2,zero
 801343c:	f800283a 	ret
 8013440:	2912b03a 	or	r9,r5,r4
 8013444:	48000d1e 	bne	r9,zero,801347c <__ledf2+0x98>
 8013448:	1a41ffe0 	cmpeqi	r9,r3,2047
 801344c:	48000f26 	beq	r9,zero,801348c <__ledf2+0xa8>
 8013450:	3992b03a 	or	r9,r7,r6
 8013454:	4800091e 	bne	r9,zero,801347c <__ledf2+0x98>
 8013458:	4000031e 	bne	r8,zero,8013468 <__ledf2+0x84>
 801345c:	2912b03a 	or	r9,r5,r4
 8013460:	4813003a 	cmpeq	r9,r9,zero
 8013464:	4800071e 	bne	r9,zero,8013484 <__ledf2+0xa0>
 8013468:	58800c26 	beq	r11,r2,801349c <__ledf2+0xb8>
 801346c:	00800044 	movi	r2,1
 8013470:	58000526 	beq	r11,zero,8013488 <__ledf2+0xa4>
 8013474:	00bfffc4 	movi	r2,-1
 8013478:	f800283a 	ret
 801347c:	00800084 	movi	r2,2
 8013480:	f800283a 	ret
 8013484:	103ffb26 	beq	r2,zero,8013474 <__ledf2+0x90>
 8013488:	f800283a 	ret
 801348c:	183ff61e 	bne	r3,zero,8013468 <__ledf2+0x84>
 8013490:	3992b03a 	or	r9,r7,r6
 8013494:	483ff41e 	bne	r9,zero,8013468 <__ledf2+0x84>
 8013498:	003ff406 	br	801346c <__ledf2+0x88>
 801349c:	1a00030e 	bge	r3,r8,80134ac <__ledf2+0xc8>
 80134a0:	103ff41e 	bne	r2,zero,8013474 <__ledf2+0x90>
 80134a4:	00800044 	movi	r2,1
 80134a8:	f800283a 	ret
 80134ac:	40fff516 	blt	r8,r3,8013484 <__ledf2+0xa0>
 80134b0:	397fee36 	bltu	r7,r5,801346c <__ledf2+0x88>
 80134b4:	29c00426 	beq	r5,r7,80134c8 <__ledf2+0xe4>
 80134b8:	29ffdf2e 	bgeu	r5,r7,8013438 <__ledf2+0x54>
 80134bc:	583fed26 	beq	r11,zero,8013474 <__ledf2+0x90>
 80134c0:	5805883a 	mov	r2,r11
 80134c4:	f800283a 	ret
 80134c8:	313fe836 	bltu	r6,r4,801346c <__ledf2+0x88>
 80134cc:	21bfda2e 	bgeu	r4,r6,8013438 <__ledf2+0x54>
 80134d0:	003ffa06 	br	80134bc <__ledf2+0xd8>

080134d4 <__muldf3>:
 80134d4:	2804d53a 	srli	r2,r5,20
 80134d8:	defff504 	addi	sp,sp,-44
 80134dc:	02000434 	movhi	r8,16
 80134e0:	df000915 	stw	fp,36(sp)
 80134e4:	dd000515 	stw	r20,20(sp)
 80134e8:	dcc00415 	stw	r19,16(sp)
 80134ec:	dc000115 	stw	r16,4(sp)
 80134f0:	423fffc4 	addi	r8,r8,-1
 80134f4:	dfc00a15 	stw	ra,40(sp)
 80134f8:	ddc00815 	stw	r23,32(sp)
 80134fc:	dd800715 	stw	r22,28(sp)
 8013500:	dd400615 	stw	r21,24(sp)
 8013504:	dc800315 	stw	r18,12(sp)
 8013508:	dc400215 	stw	r17,8(sp)
 801350c:	1081ffcc 	andi	r2,r2,2047
 8013510:	2828d7fa 	srli	r20,r5,31
 8013514:	2027883a 	mov	r19,r4
 8013518:	3039883a 	mov	fp,r6
 801351c:	2a20703a 	and	r16,r5,r8
 8013520:	10005a26 	beq	r2,zero,801368c <__muldf3+0x1b8>
 8013524:	10c1ffe0 	cmpeqi	r3,r2,2047
 8013528:	18006c1e 	bne	r3,zero,80136dc <__muldf3+0x208>
 801352c:	800a90fa 	slli	r5,r16,3
 8013530:	2020d77a 	srli	r16,r4,29
 8013534:	202490fa 	slli	r18,r4,3
 8013538:	14ff0044 	addi	r19,r2,-1023
 801353c:	8160b03a 	or	r16,r16,r5
 8013540:	84002034 	orhi	r16,r16,128
 8013544:	002b883a 	mov	r21,zero
 8013548:	002d883a 	mov	r22,zero
 801354c:	3804d53a 	srli	r2,r7,20
 8013550:	00c00434 	movhi	r3,16
 8013554:	18ffffc4 	addi	r3,r3,-1
 8013558:	1081ffcc 	andi	r2,r2,2047
 801355c:	382ed7fa 	srli	r23,r7,31
 8013560:	38e2703a 	and	r17,r7,r3
 8013564:	10006426 	beq	r2,zero,80136f8 <__muldf3+0x224>
 8013568:	10c1ffe0 	cmpeqi	r3,r2,2047
 801356c:	1800211e 	bne	r3,zero,80135f4 <__muldf3+0x120>
 8013570:	880690fa 	slli	r3,r17,3
 8013574:	e022d77a 	srli	r17,fp,29
 8013578:	e00a90fa 	slli	r5,fp,3
 801357c:	10bf0044 	addi	r2,r2,-1023
 8013580:	88e2b03a 	or	r17,r17,r3
 8013584:	8c402034 	orhi	r17,r17,128
 8013588:	98a7883a 	add	r19,r19,r2
 801358c:	0007883a 	mov	r3,zero
 8013590:	a9000428 	cmpgeui	r4,r21,16
 8013594:	a5ccf03a 	xor	r6,r20,r23
 8013598:	9a000044 	addi	r8,r19,1
 801359c:	20006b1e 	bne	r4,zero,801374c <__muldf3+0x278>
 80135a0:	a80490ba 	slli	r2,r21,2
 80135a4:	01020074 	movhi	r4,2049
 80135a8:	1109883a 	add	r4,r2,r4
 80135ac:	208d6d17 	ldw	r2,13748(r4)
 80135b0:	1000683a 	jmp	r2
 80135b4:	0801374c 	andi	zero,at,1245
 80135b8:	08013614 	ori	zero,at,1240
 80135bc:	08013614 	ori	zero,at,1240
 80135c0:	08013610 	cmplti	zero,at,1240
 80135c4:	08013620 	cmpeqi	zero,at,1240
 80135c8:	08013620 	cmpeqi	zero,at,1240
 80135cc:	0801399c 	xori	zero,at,1254
 80135d0:	08013610 	cmplti	zero,at,1240
 80135d4:	08013620 	cmpeqi	zero,at,1240
 80135d8:	0801399c 	xori	zero,at,1254
 80135dc:	08013620 	cmpeqi	zero,at,1240
 80135e0:	08013610 	cmplti	zero,at,1240
 80135e4:	0801394c 	andi	zero,at,1253
 80135e8:	0801394c 	andi	zero,at,1253
 80135ec:	0801394c 	andi	zero,at,1253
 80135f0:	08013a28 	cmpgeui	zero,at,1256
 80135f4:	e44ab03a 	or	r5,fp,r17
 80135f8:	9cc1ffc4 	addi	r19,r19,2047
 80135fc:	2800d51e 	bne	r5,zero,8013954 <__muldf3+0x480>
 8013600:	ad400094 	ori	r21,r21,2
 8013604:	0023883a 	mov	r17,zero
 8013608:	00c00084 	movi	r3,2
 801360c:	003fe006 	br	8013590 <__muldf3+0xbc>
 8013610:	b80d883a 	mov	r6,r23
 8013614:	8821883a 	mov	r16,r17
 8013618:	2825883a 	mov	r18,r5
 801361c:	182d883a 	mov	r22,r3
 8013620:	b08000a0 	cmpeqi	r2,r22,2
 8013624:	1000451e 	bne	r2,zero,801373c <__muldf3+0x268>
 8013628:	b08000e0 	cmpeqi	r2,r22,3
 801362c:	1001401e 	bne	r2,zero,8013b30 <__muldf3+0x65c>
 8013630:	b0800060 	cmpeqi	r2,r22,1
 8013634:	1000ab26 	beq	r2,zero,80138e4 <__muldf3+0x410>
 8013638:	0007883a 	mov	r3,zero
 801363c:	0021883a 	mov	r16,zero
 8013640:	0025883a 	mov	r18,zero
 8013644:	30803fcc 	andi	r2,r6,255
 8013648:	1806953a 	slli	r3,r3,20
 801364c:	100497fa 	slli	r2,r2,31
 8013650:	1c06b03a 	or	r3,r3,r16
 8013654:	1886b03a 	or	r3,r3,r2
 8013658:	9005883a 	mov	r2,r18
 801365c:	dfc00a17 	ldw	ra,40(sp)
 8013660:	df000917 	ldw	fp,36(sp)
 8013664:	ddc00817 	ldw	r23,32(sp)
 8013668:	dd800717 	ldw	r22,28(sp)
 801366c:	dd400617 	ldw	r21,24(sp)
 8013670:	dd000517 	ldw	r20,20(sp)
 8013674:	dcc00417 	ldw	r19,16(sp)
 8013678:	dc800317 	ldw	r18,12(sp)
 801367c:	dc400217 	ldw	r17,8(sp)
 8013680:	dc000117 	ldw	r16,4(sp)
 8013684:	dec00b04 	addi	sp,sp,44
 8013688:	f800283a 	ret
 801368c:	8124b03a 	or	r18,r16,r4
 8013690:	9000bd26 	beq	r18,zero,8013988 <__muldf3+0x4b4>
 8013694:	d9c00015 	stw	r7,0(sp)
 8013698:	8000ff26 	beq	r16,zero,8013a98 <__muldf3+0x5c4>
 801369c:	8009883a 	mov	r4,r16
 80136a0:	80146980 	call	8014698 <__clzsi2>
 80136a4:	d9c00017 	ldw	r7,0(sp)
 80136a8:	113ffd44 	addi	r4,r2,-11
 80136ac:	00c00744 	movi	r3,29
 80136b0:	14bffe04 	addi	r18,r2,-8
 80136b4:	1907c83a 	sub	r3,r3,r4
 80136b8:	84a0983a 	sll	r16,r16,r18
 80136bc:	98c6d83a 	srl	r3,r19,r3
 80136c0:	9ca4983a 	sll	r18,r19,r18
 80136c4:	1c20b03a 	or	r16,r3,r16
 80136c8:	04ff0344 	movi	r19,-1011
 80136cc:	98a7c83a 	sub	r19,r19,r2
 80136d0:	002b883a 	mov	r21,zero
 80136d4:	002d883a 	mov	r22,zero
 80136d8:	003f9c06 	br	801354c <__muldf3+0x78>
 80136dc:	8124b03a 	or	r18,r16,r4
 80136e0:	9000a41e 	bne	r18,zero,8013974 <__muldf3+0x4a0>
 80136e4:	0021883a 	mov	r16,zero
 80136e8:	05400204 	movi	r21,8
 80136ec:	04c1ffc4 	movi	r19,2047
 80136f0:	05800084 	movi	r22,2
 80136f4:	003f9506 	br	801354c <__muldf3+0x78>
 80136f8:	e44ab03a 	or	r5,fp,r17
 80136fc:	28009926 	beq	r5,zero,8013964 <__muldf3+0x490>
 8013700:	8800da26 	beq	r17,zero,8013a6c <__muldf3+0x598>
 8013704:	8809883a 	mov	r4,r17
 8013708:	80146980 	call	8014698 <__clzsi2>
 801370c:	11bffd44 	addi	r6,r2,-11
 8013710:	01000744 	movi	r4,29
 8013714:	117ffe04 	addi	r5,r2,-8
 8013718:	2189c83a 	sub	r4,r4,r6
 801371c:	8962983a 	sll	r17,r17,r5
 8013720:	e108d83a 	srl	r4,fp,r4
 8013724:	e14a983a 	sll	r5,fp,r5
 8013728:	2462b03a 	or	r17,r4,r17
 801372c:	9885c83a 	sub	r2,r19,r2
 8013730:	14ff0344 	addi	r19,r2,-1011
 8013734:	0007883a 	mov	r3,zero
 8013738:	003f9506 	br	8013590 <__muldf3+0xbc>
 801373c:	00c1ffc4 	movi	r3,2047
 8013740:	0021883a 	mov	r16,zero
 8013744:	0025883a 	mov	r18,zero
 8013748:	003fbe06 	br	8013644 <__muldf3+0x170>
 801374c:	9008d43a 	srli	r4,r18,16
 8013750:	281ed43a 	srli	r15,r5,16
 8013754:	94bfffcc 	andi	r18,r18,65535
 8013758:	297fffcc 	andi	r5,r5,65535
 801375c:	2c85383a 	mul	r2,r5,r18
 8013760:	214f383a 	mul	r7,r4,r5
 8013764:	7c87383a 	mul	r3,r15,r18
 8013768:	1012d43a 	srli	r9,r2,16
 801376c:	23dd383a 	mul	r14,r4,r15
 8013770:	19c7883a 	add	r3,r3,r7
 8013774:	48d3883a 	add	r9,r9,r3
 8013778:	49c0022e 	bgeu	r9,r7,8013784 <__muldf3+0x2b0>
 801377c:	00c00074 	movhi	r3,1
 8013780:	70dd883a 	add	r14,r14,r3
 8013784:	881ad43a 	srli	r13,r17,16
 8013788:	8c7fffcc 	andi	r17,r17,65535
 801378c:	8c87383a 	mul	r3,r17,r18
 8013790:	244f383a 	mul	r7,r4,r17
 8013794:	6ca5383a 	mul	r18,r13,r18
 8013798:	1816d43a 	srli	r11,r3,16
 801379c:	4814943a 	slli	r10,r9,16
 80137a0:	91e5883a 	add	r18,r18,r7
 80137a4:	10bfffcc 	andi	r2,r2,65535
 80137a8:	5c97883a 	add	r11,r11,r18
 80137ac:	4818d43a 	srli	r12,r9,16
 80137b0:	2349383a 	mul	r4,r4,r13
 80137b4:	5095883a 	add	r10,r10,r2
 80137b8:	59c0022e 	bgeu	r11,r7,80137c4 <__muldf3+0x2f0>
 80137bc:	00800074 	movhi	r2,1
 80137c0:	2089883a 	add	r4,r4,r2
 80137c4:	8028d43a 	srli	r20,r16,16
 80137c8:	827fffcc 	andi	r9,r16,65535
 80137cc:	2a6b383a 	mul	r21,r5,r9
 80137d0:	7a45383a 	mul	r2,r15,r9
 80137d4:	a14b383a 	mul	r5,r20,r5
 80137d8:	580e943a 	slli	r7,r11,16
 80137dc:	a82cd43a 	srli	r22,r21,16
 80137e0:	5824d43a 	srli	r18,r11,16
 80137e4:	18ffffcc 	andi	r3,r3,65535
 80137e8:	1145883a 	add	r2,r2,r5
 80137ec:	38cf883a 	add	r7,r7,r3
 80137f0:	b085883a 	add	r2,r22,r2
 80137f4:	7d1f383a 	mul	r15,r15,r20
 80137f8:	9117883a 	add	r11,r18,r4
 80137fc:	61c7883a 	add	r3,r12,r7
 8013800:	1140022e 	bgeu	r2,r5,801380c <__muldf3+0x338>
 8013804:	01000074 	movhi	r4,1
 8013808:	791f883a 	add	r15,r15,r4
 801380c:	8a65383a 	mul	r18,r17,r9
 8013810:	6a53383a 	mul	r9,r13,r9
 8013814:	a463383a 	mul	r17,r20,r17
 8013818:	9020d43a 	srli	r16,r18,16
 801381c:	100ad43a 	srli	r5,r2,16
 8013820:	1004943a 	slli	r2,r2,16
 8013824:	4c53883a 	add	r9,r9,r17
 8013828:	ab3fffcc 	andi	r12,r21,65535
 801382c:	8253883a 	add	r9,r16,r9
 8013830:	6d1b383a 	mul	r13,r13,r20
 8013834:	2bdf883a 	add	r15,r5,r15
 8013838:	1305883a 	add	r2,r2,r12
 801383c:	4c40022e 	bgeu	r9,r17,8013848 <__muldf3+0x374>
 8013840:	01000074 	movhi	r4,1
 8013844:	691b883a 	add	r13,r13,r4
 8013848:	4808943a 	slli	r4,r9,16
 801384c:	917fffcc 	andi	r5,r18,65535
 8013850:	1b87883a 	add	r3,r3,r14
 8013854:	2149883a 	add	r4,r4,r5
 8013858:	19cf803a 	cmpltu	r7,r3,r7
 801385c:	22c9883a 	add	r4,r4,r11
 8013860:	1887883a 	add	r3,r3,r2
 8013864:	21dd883a 	add	r14,r4,r7
 8013868:	1885803a 	cmpltu	r2,r3,r2
 801386c:	73cb883a 	add	r5,r14,r15
 8013870:	4812d43a 	srli	r9,r9,16
 8013874:	2899883a 	add	r12,r5,r2
 8013878:	22c9803a 	cmpltu	r4,r4,r11
 801387c:	71e1803a 	cmpltu	r16,r14,r7
 8013880:	2bcb803a 	cmpltu	r5,r5,r15
 8013884:	2420b03a 	or	r16,r4,r16
 8013888:	6085803a 	cmpltu	r2,r12,r2
 801388c:	2884b03a 	or	r2,r5,r2
 8013890:	8261883a 	add	r16,r16,r9
 8013894:	1824927a 	slli	r18,r3,9
 8013898:	80a1883a 	add	r16,r16,r2
 801389c:	8361883a 	add	r16,r16,r13
 80138a0:	8020927a 	slli	r16,r16,9
 80138a4:	1806d5fa 	srli	r3,r3,23
 80138a8:	600ad5fa 	srli	r5,r12,23
 80138ac:	6004927a 	slli	r2,r12,9
 80138b0:	92a4b03a 	or	r18,r18,r10
 80138b4:	9024c03a 	cmpne	r18,r18,zero
 80138b8:	90e4b03a 	or	r18,r18,r3
 80138bc:	80c0402c 	andhi	r3,r16,256
 80138c0:	90a4b03a 	or	r18,r18,r2
 80138c4:	8160b03a 	or	r16,r16,r5
 80138c8:	18007e26 	beq	r3,zero,8013ac4 <__muldf3+0x5f0>
 80138cc:	9006d07a 	srli	r3,r18,1
 80138d0:	800497fa 	slli	r2,r16,31
 80138d4:	9480004c 	andi	r18,r18,1
 80138d8:	8020d07a 	srli	r16,r16,1
 80138dc:	1c86b03a 	or	r3,r3,r18
 80138e0:	18a4b03a 	or	r18,r3,r2
 80138e4:	4100ffc4 	addi	r4,r8,1023
 80138e8:	0100320e 	bge	zero,r4,80139b4 <__muldf3+0x4e0>
 80138ec:	908001cc 	andi	r2,r18,7
 80138f0:	10000726 	beq	r2,zero,8013910 <__muldf3+0x43c>
 80138f4:	908003cc 	andi	r2,r18,15
 80138f8:	10800120 	cmpeqi	r2,r2,4
 80138fc:	1000041e 	bne	r2,zero,8013910 <__muldf3+0x43c>
 8013900:	90800104 	addi	r2,r18,4
 8013904:	14a5803a 	cmpltu	r18,r2,r18
 8013908:	84a1883a 	add	r16,r16,r18
 801390c:	1025883a 	mov	r18,r2
 8013910:	8080402c 	andhi	r2,r16,256
 8013914:	10000426 	beq	r2,zero,8013928 <__muldf3+0x454>
 8013918:	00bfc034 	movhi	r2,65280
 801391c:	10bfffc4 	addi	r2,r2,-1
 8013920:	80a0703a 	and	r16,r16,r2
 8013924:	41010004 	addi	r4,r8,1024
 8013928:	2081ffc8 	cmpgei	r2,r4,2047
 801392c:	103f831e 	bne	r2,zero,801373c <__muldf3+0x268>
 8013930:	8004977a 	slli	r2,r16,29
 8013934:	9024d0fa 	srli	r18,r18,3
 8013938:	8020927a 	slli	r16,r16,9
 801393c:	20c1ffcc 	andi	r3,r4,2047
 8013940:	14a4b03a 	or	r18,r2,r18
 8013944:	8020d33a 	srli	r16,r16,12
 8013948:	003f3e06 	br	8013644 <__muldf3+0x170>
 801394c:	a00d883a 	mov	r6,r20
 8013950:	003f3306 	br	8013620 <__muldf3+0x14c>
 8013954:	ad4000d4 	ori	r21,r21,3
 8013958:	e00b883a 	mov	r5,fp
 801395c:	00c000c4 	movi	r3,3
 8013960:	003f0b06 	br	8013590 <__muldf3+0xbc>
 8013964:	ad400054 	ori	r21,r21,1
 8013968:	0023883a 	mov	r17,zero
 801396c:	00c00044 	movi	r3,1
 8013970:	003f0706 	br	8013590 <__muldf3+0xbc>
 8013974:	2025883a 	mov	r18,r4
 8013978:	05400304 	movi	r21,12
 801397c:	04c1ffc4 	movi	r19,2047
 8013980:	058000c4 	movi	r22,3
 8013984:	003ef106 	br	801354c <__muldf3+0x78>
 8013988:	0021883a 	mov	r16,zero
 801398c:	05400104 	movi	r21,4
 8013990:	0027883a 	mov	r19,zero
 8013994:	05800044 	movi	r22,1
 8013998:	003eec06 	br	801354c <__muldf3+0x78>
 801399c:	04000434 	movhi	r16,16
 80139a0:	000d883a 	mov	r6,zero
 80139a4:	843fffc4 	addi	r16,r16,-1
 80139a8:	04bfffc4 	movi	r18,-1
 80139ac:	00c1ffc4 	movi	r3,2047
 80139b0:	003f2406 	br	8013644 <__muldf3+0x170>
 80139b4:	00800044 	movi	r2,1
 80139b8:	1105c83a 	sub	r2,r2,r4
 80139bc:	10c00e48 	cmpgei	r3,r2,57
 80139c0:	183f1d1e 	bne	r3,zero,8013638 <__muldf3+0x164>
 80139c4:	10c00808 	cmpgei	r3,r2,32
 80139c8:	1800401e 	bne	r3,zero,8013acc <__muldf3+0x5f8>
 80139cc:	42010784 	addi	r8,r8,1054
 80139d0:	8206983a 	sll	r3,r16,r8
 80139d4:	9088d83a 	srl	r4,r18,r2
 80139d8:	9210983a 	sll	r8,r18,r8
 80139dc:	80a0d83a 	srl	r16,r16,r2
 80139e0:	1904b03a 	or	r2,r3,r4
 80139e4:	4024c03a 	cmpne	r18,r8,zero
 80139e8:	1484b03a 	or	r2,r2,r18
 80139ec:	10c001cc 	andi	r3,r2,7
 80139f0:	18000726 	beq	r3,zero,8013a10 <__muldf3+0x53c>
 80139f4:	10c003cc 	andi	r3,r2,15
 80139f8:	18c00120 	cmpeqi	r3,r3,4
 80139fc:	1800041e 	bne	r3,zero,8013a10 <__muldf3+0x53c>
 8013a00:	10c00104 	addi	r3,r2,4
 8013a04:	1885803a 	cmpltu	r2,r3,r2
 8013a08:	80a1883a 	add	r16,r16,r2
 8013a0c:	1805883a 	mov	r2,r3
 8013a10:	80c0202c 	andhi	r3,r16,128
 8013a14:	18004226 	beq	r3,zero,8013b20 <__muldf3+0x64c>
 8013a18:	00c00044 	movi	r3,1
 8013a1c:	0021883a 	mov	r16,zero
 8013a20:	0025883a 	mov	r18,zero
 8013a24:	003f0706 	br	8013644 <__muldf3+0x170>
 8013a28:	8080022c 	andhi	r2,r16,8
 8013a2c:	10000926 	beq	r2,zero,8013a54 <__muldf3+0x580>
 8013a30:	8880022c 	andhi	r2,r17,8
 8013a34:	1000071e 	bne	r2,zero,8013a54 <__muldf3+0x580>
 8013a38:	00800434 	movhi	r2,16
 8013a3c:	8c000234 	orhi	r16,r17,8
 8013a40:	10bfffc4 	addi	r2,r2,-1
 8013a44:	80a0703a 	and	r16,r16,r2
 8013a48:	b80d883a 	mov	r6,r23
 8013a4c:	2825883a 	mov	r18,r5
 8013a50:	003fd606 	br	80139ac <__muldf3+0x4d8>
 8013a54:	00800434 	movhi	r2,16
 8013a58:	84000234 	orhi	r16,r16,8
 8013a5c:	10bfffc4 	addi	r2,r2,-1
 8013a60:	80a0703a 	and	r16,r16,r2
 8013a64:	a00d883a 	mov	r6,r20
 8013a68:	003fd006 	br	80139ac <__muldf3+0x4d8>
 8013a6c:	e009883a 	mov	r4,fp
 8013a70:	80146980 	call	8014698 <__clzsi2>
 8013a74:	11800544 	addi	r6,r2,21
 8013a78:	31000748 	cmpgei	r4,r6,29
 8013a7c:	1007883a 	mov	r3,r2
 8013a80:	10800804 	addi	r2,r2,32
 8013a84:	203f2226 	beq	r4,zero,8013710 <__muldf3+0x23c>
 8013a88:	1c7ffe04 	addi	r17,r3,-8
 8013a8c:	e462983a 	sll	r17,fp,r17
 8013a90:	000b883a 	mov	r5,zero
 8013a94:	003f2506 	br	801372c <__muldf3+0x258>
 8013a98:	80146980 	call	8014698 <__clzsi2>
 8013a9c:	11000544 	addi	r4,r2,21
 8013aa0:	21400748 	cmpgei	r5,r4,29
 8013aa4:	1007883a 	mov	r3,r2
 8013aa8:	d9c00017 	ldw	r7,0(sp)
 8013aac:	10800804 	addi	r2,r2,32
 8013ab0:	283efe26 	beq	r5,zero,80136ac <__muldf3+0x1d8>
 8013ab4:	1c3ffe04 	addi	r16,r3,-8
 8013ab8:	9c20983a 	sll	r16,r19,r16
 8013abc:	0025883a 	mov	r18,zero
 8013ac0:	003f0106 	br	80136c8 <__muldf3+0x1f4>
 8013ac4:	9811883a 	mov	r8,r19
 8013ac8:	003f8606 	br	80138e4 <__muldf3+0x410>
 8013acc:	00fff844 	movi	r3,-31
 8013ad0:	1907c83a 	sub	r3,r3,r4
 8013ad4:	10800820 	cmpeqi	r2,r2,32
 8013ad8:	80c6d83a 	srl	r3,r16,r3
 8013adc:	1000031e 	bne	r2,zero,8013aec <__muldf3+0x618>
 8013ae0:	42010f84 	addi	r8,r8,1086
 8013ae4:	8220983a 	sll	r16,r16,r8
 8013ae8:	9424b03a 	or	r18,r18,r16
 8013aec:	9024c03a 	cmpne	r18,r18,zero
 8013af0:	90c4b03a 	or	r2,r18,r3
 8013af4:	148001cc 	andi	r18,r2,7
 8013af8:	9000051e 	bne	r18,zero,8013b10 <__muldf3+0x63c>
 8013afc:	0021883a 	mov	r16,zero
 8013b00:	1004d0fa 	srli	r2,r2,3
 8013b04:	0007883a 	mov	r3,zero
 8013b08:	14a4b03a 	or	r18,r2,r18
 8013b0c:	003ecd06 	br	8013644 <__muldf3+0x170>
 8013b10:	10c003cc 	andi	r3,r2,15
 8013b14:	18c00118 	cmpnei	r3,r3,4
 8013b18:	0021883a 	mov	r16,zero
 8013b1c:	183fb81e 	bne	r3,zero,8013a00 <__muldf3+0x52c>
 8013b20:	8006927a 	slli	r3,r16,9
 8013b24:	8024977a 	slli	r18,r16,29
 8013b28:	1820d33a 	srli	r16,r3,12
 8013b2c:	003ff406 	br	8013b00 <__muldf3+0x62c>
 8013b30:	00800434 	movhi	r2,16
 8013b34:	84000234 	orhi	r16,r16,8
 8013b38:	10bfffc4 	addi	r2,r2,-1
 8013b3c:	80a0703a 	and	r16,r16,r2
 8013b40:	003f9a06 	br	80139ac <__muldf3+0x4d8>

08013b44 <__subdf3>:
 8013b44:	00c00434 	movhi	r3,16
 8013b48:	3812d53a 	srli	r9,r7,20
 8013b4c:	18ffffc4 	addi	r3,r3,-1
 8013b50:	defffb04 	addi	sp,sp,-20
 8013b54:	28d0703a 	and	r8,r5,r3
 8013b58:	38c6703a 	and	r3,r7,r3
 8013b5c:	2804d7fa 	srli	r2,r5,31
 8013b60:	401090fa 	slli	r8,r8,3
 8013b64:	280ad53a 	srli	r5,r5,20
 8013b68:	180690fa 	slli	r3,r3,3
 8013b6c:	dcc00315 	stw	r19,12(sp)
 8013b70:	dc400115 	stw	r17,4(sp)
 8013b74:	2026d77a 	srli	r19,r4,29
 8013b78:	3022d77a 	srli	r17,r6,29
 8013b7c:	4b41ffcc 	andi	r13,r9,2047
 8013b80:	dc800215 	stw	r18,8(sp)
 8013b84:	dc000015 	stw	r16,0(sp)
 8013b88:	dfc00415 	stw	ra,16(sp)
 8013b8c:	6a41ffe0 	cmpeqi	r9,r13,2047
 8013b90:	1025883a 	mov	r18,r2
 8013b94:	201690fa 	slli	r11,r4,3
 8013b98:	380ed7fa 	srli	r7,r7,31
 8013b9c:	301490fa 	slli	r10,r6,3
 8013ba0:	2c01ffcc 	andi	r16,r5,2047
 8013ba4:	10803fcc 	andi	r2,r2,255
 8013ba8:	9a10b03a 	or	r8,r19,r8
 8013bac:	88c6b03a 	or	r3,r17,r3
 8013bb0:	48006e1e 	bne	r9,zero,8013d6c <__subdf3+0x228>
 8013bb4:	3a40005c 	xori	r9,r7,1
 8013bb8:	834bc83a 	sub	r5,r16,r13
 8013bbc:	12405726 	beq	r2,r9,8013d1c <__subdf3+0x1d8>
 8013bc0:	01406f0e 	bge	zero,r5,8013d80 <__subdf3+0x23c>
 8013bc4:	68007a26 	beq	r13,zero,8013db0 <__subdf3+0x26c>
 8013bc8:	8081ffd8 	cmpnei	r2,r16,2047
 8013bcc:	10019f26 	beq	r2,zero,801424c <__subdf3+0x708>
 8013bd0:	18c02034 	orhi	r3,r3,128
 8013bd4:	28800e48 	cmpgei	r2,r5,57
 8013bd8:	1000f91e 	bne	r2,zero,8013fc0 <__subdf3+0x47c>
 8013bdc:	28800808 	cmpgei	r2,r5,32
 8013be0:	1001451e 	bne	r2,zero,80140f8 <__subdf3+0x5b4>
 8013be4:	00800804 	movi	r2,32
 8013be8:	1145c83a 	sub	r2,r2,r5
 8013bec:	18a2983a 	sll	r17,r3,r2
 8013bf0:	5148d83a 	srl	r4,r10,r5
 8013bf4:	5084983a 	sll	r2,r10,r2
 8013bf8:	1946d83a 	srl	r3,r3,r5
 8013bfc:	8922b03a 	or	r17,r17,r4
 8013c00:	1004c03a 	cmpne	r2,r2,zero
 8013c04:	88a2b03a 	or	r17,r17,r2
 8013c08:	40d1c83a 	sub	r8,r8,r3
 8013c0c:	5c63c83a 	sub	r17,r11,r17
 8013c10:	5c49803a 	cmpltu	r4,r11,r17
 8013c14:	4109c83a 	sub	r4,r8,r4
 8013c18:	2080202c 	andhi	r2,r4,128
 8013c1c:	1000a526 	beq	r2,zero,8013eb4 <__subdf3+0x370>
 8013c20:	04c02034 	movhi	r19,128
 8013c24:	9cffffc4 	addi	r19,r19,-1
 8013c28:	24e6703a 	and	r19,r4,r19
 8013c2c:	9800db26 	beq	r19,zero,8013f9c <__subdf3+0x458>
 8013c30:	9809883a 	mov	r4,r19
 8013c34:	80146980 	call	8014698 <__clzsi2>
 8013c38:	117ffe04 	addi	r5,r2,-8
 8013c3c:	01000804 	movi	r4,32
 8013c40:	2149c83a 	sub	r4,r4,r5
 8013c44:	8906d83a 	srl	r3,r17,r4
 8013c48:	9948983a 	sll	r4,r19,r5
 8013c4c:	8962983a 	sll	r17,r17,r5
 8013c50:	1908b03a 	or	r4,r3,r4
 8013c54:	2c00cc16 	blt	r5,r16,8013f88 <__subdf3+0x444>
 8013c58:	2c0bc83a 	sub	r5,r5,r16
 8013c5c:	28c00044 	addi	r3,r5,1
 8013c60:	18800808 	cmpgei	r2,r3,32
 8013c64:	1001171e 	bne	r2,zero,80140c4 <__subdf3+0x580>
 8013c68:	00800804 	movi	r2,32
 8013c6c:	10c5c83a 	sub	r2,r2,r3
 8013c70:	88cad83a 	srl	r5,r17,r3
 8013c74:	88a2983a 	sll	r17,r17,r2
 8013c78:	2084983a 	sll	r2,r4,r2
 8013c7c:	20c8d83a 	srl	r4,r4,r3
 8013c80:	8822c03a 	cmpne	r17,r17,zero
 8013c84:	1144b03a 	or	r2,r2,r5
 8013c88:	1462b03a 	or	r17,r2,r17
 8013c8c:	0021883a 	mov	r16,zero
 8013c90:	888001cc 	andi	r2,r17,7
 8013c94:	10000726 	beq	r2,zero,8013cb4 <__subdf3+0x170>
 8013c98:	888003cc 	andi	r2,r17,15
 8013c9c:	10800120 	cmpeqi	r2,r2,4
 8013ca0:	1000041e 	bne	r2,zero,8013cb4 <__subdf3+0x170>
 8013ca4:	88c00104 	addi	r3,r17,4
 8013ca8:	1c63803a 	cmpltu	r17,r3,r17
 8013cac:	2449883a 	add	r4,r4,r17
 8013cb0:	1823883a 	mov	r17,r3
 8013cb4:	2080202c 	andhi	r2,r4,128
 8013cb8:	10008026 	beq	r2,zero,8013ebc <__subdf3+0x378>
 8013cbc:	81400044 	addi	r5,r16,1
 8013cc0:	2881ffe0 	cmpeqi	r2,r5,2047
 8013cc4:	2941ffcc 	andi	r5,r5,2047
 8013cc8:	1000921e 	bne	r2,zero,8013f14 <__subdf3+0x3d0>
 8013ccc:	00bfe034 	movhi	r2,65408
 8013cd0:	10bfffc4 	addi	r2,r2,-1
 8013cd4:	2088703a 	and	r4,r4,r2
 8013cd8:	2006927a 	slli	r3,r4,9
 8013cdc:	8822d0fa 	srli	r17,r17,3
 8013ce0:	2004977a 	slli	r2,r4,29
 8013ce4:	1806d33a 	srli	r3,r3,12
 8013ce8:	1444b03a 	or	r2,r2,r17
 8013cec:	280a953a 	slli	r5,r5,20
 8013cf0:	94803fcc 	andi	r18,r18,255
 8013cf4:	902497fa 	slli	r18,r18,31
 8013cf8:	28c6b03a 	or	r3,r5,r3
 8013cfc:	1c86b03a 	or	r3,r3,r18
 8013d00:	dfc00417 	ldw	ra,16(sp)
 8013d04:	dcc00317 	ldw	r19,12(sp)
 8013d08:	dc800217 	ldw	r18,8(sp)
 8013d0c:	dc400117 	ldw	r17,4(sp)
 8013d10:	dc000017 	ldw	r16,0(sp)
 8013d14:	dec00504 	addi	sp,sp,20
 8013d18:	f800283a 	ret
 8013d1c:	01402e0e 	bge	zero,r5,8013dd8 <__subdf3+0x294>
 8013d20:	68005526 	beq	r13,zero,8013e78 <__subdf3+0x334>
 8013d24:	8081ffd8 	cmpnei	r2,r16,2047
 8013d28:	10013b26 	beq	r2,zero,8014218 <__subdf3+0x6d4>
 8013d2c:	18c02034 	orhi	r3,r3,128
 8013d30:	28800e48 	cmpgei	r2,r5,57
 8013d34:	10006d1e 	bne	r2,zero,8013eec <__subdf3+0x3a8>
 8013d38:	28800808 	cmpgei	r2,r5,32
 8013d3c:	10010826 	beq	r2,zero,8014160 <__subdf3+0x61c>
 8013d40:	2c7ff804 	addi	r17,r5,-32
 8013d44:	29000820 	cmpeqi	r4,r5,32
 8013d48:	1c44d83a 	srl	r2,r3,r17
 8013d4c:	2000041e 	bne	r4,zero,8013d60 <__subdf3+0x21c>
 8013d50:	01001004 	movi	r4,64
 8013d54:	214bc83a 	sub	r5,r4,r5
 8013d58:	1946983a 	sll	r3,r3,r5
 8013d5c:	50d4b03a 	or	r10,r10,r3
 8013d60:	5022c03a 	cmpne	r17,r10,zero
 8013d64:	88a2b03a 	or	r17,r17,r2
 8013d68:	00006206 	br	8013ef4 <__subdf3+0x3b0>
 8013d6c:	1a98b03a 	or	r12,r3,r10
 8013d70:	817e0044 	addi	r5,r16,-2047
 8013d74:	6000161e 	bne	r12,zero,8013dd0 <__subdf3+0x28c>
 8013d78:	3a40005c 	xori	r9,r7,1
 8013d7c:	12401626 	beq	r2,r9,8013dd8 <__subdf3+0x294>
 8013d80:	28002e26 	beq	r5,zero,8013e3c <__subdf3+0x2f8>
 8013d84:	6c0bc83a 	sub	r5,r13,r16
 8013d88:	4825883a 	mov	r18,r9
 8013d8c:	80009e1e 	bne	r16,zero,8014008 <__subdf3+0x4c4>
 8013d90:	42c4b03a 	or	r2,r8,r11
 8013d94:	10010926 	beq	r2,zero,80141bc <__subdf3+0x678>
 8013d98:	28bfffc4 	addi	r2,r5,-1
 8013d9c:	10016826 	beq	r2,zero,8014340 <__subdf3+0x7fc>
 8013da0:	2941ffd8 	cmpnei	r5,r5,2047
 8013da4:	28015f26 	beq	r5,zero,8014324 <__subdf3+0x7e0>
 8013da8:	100b883a 	mov	r5,r2
 8013dac:	00009906 	br	8014014 <__subdf3+0x4d0>
 8013db0:	1a84b03a 	or	r2,r3,r10
 8013db4:	1000b126 	beq	r2,zero,801407c <__subdf3+0x538>
 8013db8:	28bfffc4 	addi	r2,r5,-1
 8013dbc:	10011d26 	beq	r2,zero,8014234 <__subdf3+0x6f0>
 8013dc0:	2941ffd8 	cmpnei	r5,r5,2047
 8013dc4:	28011426 	beq	r5,zero,8014218 <__subdf3+0x6d4>
 8013dc8:	100b883a 	mov	r5,r2
 8013dcc:	003f8106 	br	8013bd4 <__subdf3+0x90>
 8013dd0:	3a403fcc 	andi	r9,r7,255
 8013dd4:	11ffea1e 	bne	r2,r7,8013d80 <__subdf3+0x23c>
 8013dd8:	28007c26 	beq	r5,zero,8013fcc <__subdf3+0x488>
 8013ddc:	6c0bc83a 	sub	r5,r13,r16
 8013de0:	8000d726 	beq	r16,zero,8014140 <__subdf3+0x5fc>
 8013de4:	6881ffd8 	cmpnei	r2,r13,2047
 8013de8:	10012626 	beq	r2,zero,8014284 <__subdf3+0x740>
 8013dec:	42002034 	orhi	r8,r8,128
 8013df0:	28800e48 	cmpgei	r2,r5,57
 8013df4:	10012a1e 	bne	r2,zero,80142a0 <__subdf3+0x75c>
 8013df8:	28800808 	cmpgei	r2,r5,32
 8013dfc:	1001821e 	bne	r2,zero,8014408 <__subdf3+0x8c4>
 8013e00:	00800804 	movi	r2,32
 8013e04:	1145c83a 	sub	r2,r2,r5
 8013e08:	40a2983a 	sll	r17,r8,r2
 8013e0c:	5948d83a 	srl	r4,r11,r5
 8013e10:	5884983a 	sll	r2,r11,r2
 8013e14:	4150d83a 	srl	r8,r8,r5
 8013e18:	8922b03a 	or	r17,r17,r4
 8013e1c:	1004c03a 	cmpne	r2,r2,zero
 8013e20:	88a2b03a 	or	r17,r17,r2
 8013e24:	1a07883a 	add	r3,r3,r8
 8013e28:	8aa3883a 	add	r17,r17,r10
 8013e2c:	8a89803a 	cmpltu	r4,r17,r10
 8013e30:	20c9883a 	add	r4,r4,r3
 8013e34:	6821883a 	mov	r16,r13
 8013e38:	00003106 	br	8013f00 <__subdf3+0x3bc>
 8013e3c:	80800044 	addi	r2,r16,1
 8013e40:	1081ff8c 	andi	r2,r2,2046
 8013e44:	1000821e 	bne	r2,zero,8014050 <__subdf3+0x50c>
 8013e48:	42ceb03a 	or	r7,r8,r11
 8013e4c:	1a84b03a 	or	r2,r3,r10
 8013e50:	8000e11e 	bne	r16,zero,80141d8 <__subdf3+0x694>
 8013e54:	38012a26 	beq	r7,zero,8014300 <__subdf3+0x7bc>
 8013e58:	1001461e 	bne	r2,zero,8014374 <__subdf3+0x830>
 8013e5c:	4004977a 	slli	r2,r8,29
 8013e60:	00c80034 	movhi	r3,8192
 8013e64:	18ffffc4 	addi	r3,r3,-1
 8013e68:	20c8703a 	and	r4,r4,r3
 8013e6c:	4010d0fa 	srli	r8,r8,3
 8013e70:	1104b03a 	or	r2,r2,r4
 8013e74:	00001806 	br	8013ed8 <__subdf3+0x394>
 8013e78:	1a84b03a 	or	r2,r3,r10
 8013e7c:	1000fa26 	beq	r2,zero,8014268 <__subdf3+0x724>
 8013e80:	28bfffc4 	addi	r2,r5,-1
 8013e84:	10000426 	beq	r2,zero,8013e98 <__subdf3+0x354>
 8013e88:	2941ffd8 	cmpnei	r5,r5,2047
 8013e8c:	28013226 	beq	r5,zero,8014358 <__subdf3+0x814>
 8013e90:	100b883a 	mov	r5,r2
 8013e94:	003fa606 	br	8013d30 <__subdf3+0x1ec>
 8013e98:	5aa3883a 	add	r17,r11,r10
 8013e9c:	40c9883a 	add	r4,r8,r3
 8013ea0:	8ad7803a 	cmpltu	r11,r17,r11
 8013ea4:	22c9883a 	add	r4,r4,r11
 8013ea8:	2080202c 	andhi	r2,r4,128
 8013eac:	10007a1e 	bne	r2,zero,8014098 <__subdf3+0x554>
 8013eb0:	04000044 	movi	r16,1
 8013eb4:	888001cc 	andi	r2,r17,7
 8013eb8:	103f771e 	bne	r2,zero,8013c98 <__subdf3+0x154>
 8013ebc:	8822d0fa 	srli	r17,r17,3
 8013ec0:	2004977a 	slli	r2,r4,29
 8013ec4:	2010d0fa 	srli	r8,r4,3
 8013ec8:	800b883a 	mov	r5,r16
 8013ecc:	8884b03a 	or	r2,r17,r2
 8013ed0:	28c1ffe0 	cmpeqi	r3,r5,2047
 8013ed4:	1800241e 	bne	r3,zero,8013f68 <__subdf3+0x424>
 8013ed8:	00c00434 	movhi	r3,16
 8013edc:	18ffffc4 	addi	r3,r3,-1
 8013ee0:	40c6703a 	and	r3,r8,r3
 8013ee4:	2941ffcc 	andi	r5,r5,2047
 8013ee8:	003f8006 	br	8013cec <__subdf3+0x1a8>
 8013eec:	1aa2b03a 	or	r17,r3,r10
 8013ef0:	8822c03a 	cmpne	r17,r17,zero
 8013ef4:	8ae3883a 	add	r17,r17,r11
 8013ef8:	8ac9803a 	cmpltu	r4,r17,r11
 8013efc:	2209883a 	add	r4,r4,r8
 8013f00:	2080202c 	andhi	r2,r4,128
 8013f04:	103feb26 	beq	r2,zero,8013eb4 <__subdf3+0x370>
 8013f08:	84000044 	addi	r16,r16,1
 8013f0c:	8081ffe0 	cmpeqi	r2,r16,2047
 8013f10:	10006226 	beq	r2,zero,801409c <__subdf3+0x558>
 8013f14:	0141ffc4 	movi	r5,2047
 8013f18:	0007883a 	mov	r3,zero
 8013f1c:	0005883a 	mov	r2,zero
 8013f20:	003f7206 	br	8013cec <__subdf3+0x1a8>
 8013f24:	400e977a 	slli	r7,r8,29
 8013f28:	4010d0fa 	srli	r8,r8,3
 8013f2c:	1000ef26 	beq	r2,zero,80142ec <__subdf3+0x7a8>
 8013f30:	01480034 	movhi	r5,8192
 8013f34:	297fffc4 	addi	r5,r5,-1
 8013f38:	2144703a 	and	r2,r4,r5
 8013f3c:	4100022c 	andhi	r4,r8,8
 8013f40:	11c4b03a 	or	r2,r2,r7
 8013f44:	20000826 	beq	r4,zero,8013f68 <__subdf3+0x424>
 8013f48:	1808d0fa 	srli	r4,r3,3
 8013f4c:	21c0022c 	andhi	r7,r4,8
 8013f50:	3800051e 	bne	r7,zero,8013f68 <__subdf3+0x424>
 8013f54:	1804977a 	slli	r2,r3,29
 8013f58:	314c703a 	and	r6,r6,r5
 8013f5c:	4825883a 	mov	r18,r9
 8013f60:	3084b03a 	or	r2,r6,r2
 8013f64:	2011883a 	mov	r8,r4
 8013f68:	1206b03a 	or	r3,r2,r8
 8013f6c:	18013e26 	beq	r3,zero,8014468 <__subdf3+0x924>
 8013f70:	01000434 	movhi	r4,16
 8013f74:	40c00234 	orhi	r3,r8,8
 8013f78:	213fffc4 	addi	r4,r4,-1
 8013f7c:	1906703a 	and	r3,r3,r4
 8013f80:	0141ffc4 	movi	r5,2047
 8013f84:	003f5906 	br	8013cec <__subdf3+0x1a8>
 8013f88:	00ffe034 	movhi	r3,65408
 8013f8c:	18ffffc4 	addi	r3,r3,-1
 8013f90:	8161c83a 	sub	r16,r16,r5
 8013f94:	20c8703a 	and	r4,r4,r3
 8013f98:	003f3d06 	br	8013c90 <__subdf3+0x14c>
 8013f9c:	8809883a 	mov	r4,r17
 8013fa0:	80146980 	call	8014698 <__clzsi2>
 8013fa4:	11400604 	addi	r5,r2,24
 8013fa8:	28c00808 	cmpgei	r3,r5,32
 8013fac:	183f2326 	beq	r3,zero,8013c3c <__subdf3+0xf8>
 8013fb0:	113ffe04 	addi	r4,r2,-8
 8013fb4:	8908983a 	sll	r4,r17,r4
 8013fb8:	0023883a 	mov	r17,zero
 8013fbc:	003f2506 	br	8013c54 <__subdf3+0x110>
 8013fc0:	1aa2b03a 	or	r17,r3,r10
 8013fc4:	8822c03a 	cmpne	r17,r17,zero
 8013fc8:	003f1006 	br	8013c0c <__subdf3+0xc8>
 8013fcc:	80800044 	addi	r2,r16,1
 8013fd0:	11c1ff8c 	andi	r7,r2,2046
 8013fd4:	38006d1e 	bne	r7,zero,801418c <__subdf3+0x648>
 8013fd8:	42c4b03a 	or	r2,r8,r11
 8013fdc:	8000be1e 	bne	r16,zero,80142d8 <__subdf3+0x794>
 8013fe0:	1000f726 	beq	r2,zero,80143c0 <__subdf3+0x87c>
 8013fe4:	1a84b03a 	or	r2,r3,r10
 8013fe8:	1000fc1e 	bne	r2,zero,80143dc <__subdf3+0x898>
 8013fec:	4006977a 	slli	r3,r8,29
 8013ff0:	00880034 	movhi	r2,8192
 8013ff4:	10bfffc4 	addi	r2,r2,-1
 8013ff8:	2084703a 	and	r2,r4,r2
 8013ffc:	4010d0fa 	srli	r8,r8,3
 8014000:	10c4b03a 	or	r2,r2,r3
 8014004:	003fb406 	br	8013ed8 <__subdf3+0x394>
 8014008:	6881ffd8 	cmpnei	r2,r13,2047
 801400c:	10009d26 	beq	r2,zero,8014284 <__subdf3+0x740>
 8014010:	42002034 	orhi	r8,r8,128
 8014014:	28800e48 	cmpgei	r2,r5,57
 8014018:	1000421e 	bne	r2,zero,8014124 <__subdf3+0x5e0>
 801401c:	28800808 	cmpgei	r2,r5,32
 8014020:	1000a21e 	bne	r2,zero,80142ac <__subdf3+0x768>
 8014024:	00800804 	movi	r2,32
 8014028:	1145c83a 	sub	r2,r2,r5
 801402c:	40a2983a 	sll	r17,r8,r2
 8014030:	5948d83a 	srl	r4,r11,r5
 8014034:	5896983a 	sll	r11,r11,r2
 8014038:	4150d83a 	srl	r8,r8,r5
 801403c:	8922b03a 	or	r17,r17,r4
 8014040:	5816c03a 	cmpne	r11,r11,zero
 8014044:	8ae2b03a 	or	r17,r17,r11
 8014048:	1a07c83a 	sub	r3,r3,r8
 801404c:	00003706 	br	801412c <__subdf3+0x5e8>
 8014050:	5aa3c83a 	sub	r17,r11,r10
 8014054:	40e7c83a 	sub	r19,r8,r3
 8014058:	5c49803a 	cmpltu	r4,r11,r17
 801405c:	9927c83a 	sub	r19,r19,r4
 8014060:	9880202c 	andhi	r2,r19,128
 8014064:	1000661e 	bne	r2,zero,8014200 <__subdf3+0x6bc>
 8014068:	8cc4b03a 	or	r2,r17,r19
 801406c:	103eef1e 	bne	r2,zero,8013c2c <__subdf3+0xe8>
 8014070:	0011883a 	mov	r8,zero
 8014074:	0025883a 	mov	r18,zero
 8014078:	003f9706 	br	8013ed8 <__subdf3+0x394>
 801407c:	4022977a 	slli	r17,r8,29
 8014080:	00880034 	movhi	r2,8192
 8014084:	10bfffc4 	addi	r2,r2,-1
 8014088:	2088703a 	and	r4,r4,r2
 801408c:	4010d0fa 	srli	r8,r8,3
 8014090:	2444b03a 	or	r2,r4,r17
 8014094:	003f8e06 	br	8013ed0 <__subdf3+0x38c>
 8014098:	04000084 	movi	r16,2
 801409c:	00bfe034 	movhi	r2,65408
 80140a0:	10bfffc4 	addi	r2,r2,-1
 80140a4:	8806d07a 	srli	r3,r17,1
 80140a8:	2088703a 	and	r4,r4,r2
 80140ac:	200497fa 	slli	r2,r4,31
 80140b0:	8c40004c 	andi	r17,r17,1
 80140b4:	1c62b03a 	or	r17,r3,r17
 80140b8:	2008d07a 	srli	r4,r4,1
 80140bc:	1462b03a 	or	r17,r2,r17
 80140c0:	003ef306 	br	8013c90 <__subdf3+0x14c>
 80140c4:	297ff844 	addi	r5,r5,-31
 80140c8:	18800820 	cmpeqi	r2,r3,32
 80140cc:	214ad83a 	srl	r5,r4,r5
 80140d0:	1000041e 	bne	r2,zero,80140e4 <__subdf3+0x5a0>
 80140d4:	00801004 	movi	r2,64
 80140d8:	10c7c83a 	sub	r3,r2,r3
 80140dc:	20c8983a 	sll	r4,r4,r3
 80140e0:	8922b03a 	or	r17,r17,r4
 80140e4:	8822c03a 	cmpne	r17,r17,zero
 80140e8:	8962b03a 	or	r17,r17,r5
 80140ec:	0009883a 	mov	r4,zero
 80140f0:	0021883a 	mov	r16,zero
 80140f4:	003f6f06 	br	8013eb4 <__subdf3+0x370>
 80140f8:	2c7ff804 	addi	r17,r5,-32
 80140fc:	29000820 	cmpeqi	r4,r5,32
 8014100:	1c44d83a 	srl	r2,r3,r17
 8014104:	2000041e 	bne	r4,zero,8014118 <__subdf3+0x5d4>
 8014108:	01001004 	movi	r4,64
 801410c:	214bc83a 	sub	r5,r4,r5
 8014110:	1946983a 	sll	r3,r3,r5
 8014114:	50d4b03a 	or	r10,r10,r3
 8014118:	5022c03a 	cmpne	r17,r10,zero
 801411c:	88a2b03a 	or	r17,r17,r2
 8014120:	003eba06 	br	8013c0c <__subdf3+0xc8>
 8014124:	42d0b03a 	or	r8,r8,r11
 8014128:	4022c03a 	cmpne	r17,r8,zero
 801412c:	5463c83a 	sub	r17,r10,r17
 8014130:	5449803a 	cmpltu	r4,r10,r17
 8014134:	1909c83a 	sub	r4,r3,r4
 8014138:	6821883a 	mov	r16,r13
 801413c:	003eb606 	br	8013c18 <__subdf3+0xd4>
 8014140:	42c4b03a 	or	r2,r8,r11
 8014144:	10009726 	beq	r2,zero,80143a4 <__subdf3+0x860>
 8014148:	28bfffc4 	addi	r2,r5,-1
 801414c:	1000b926 	beq	r2,zero,8014434 <__subdf3+0x8f0>
 8014150:	2941ffd8 	cmpnei	r5,r5,2047
 8014154:	28007326 	beq	r5,zero,8014324 <__subdf3+0x7e0>
 8014158:	100b883a 	mov	r5,r2
 801415c:	003f2406 	br	8013df0 <__subdf3+0x2ac>
 8014160:	00800804 	movi	r2,32
 8014164:	1145c83a 	sub	r2,r2,r5
 8014168:	18a2983a 	sll	r17,r3,r2
 801416c:	5148d83a 	srl	r4,r10,r5
 8014170:	5084983a 	sll	r2,r10,r2
 8014174:	1946d83a 	srl	r3,r3,r5
 8014178:	8922b03a 	or	r17,r17,r4
 801417c:	1004c03a 	cmpne	r2,r2,zero
 8014180:	88a2b03a 	or	r17,r17,r2
 8014184:	40d1883a 	add	r8,r8,r3
 8014188:	003f5a06 	br	8013ef4 <__subdf3+0x3b0>
 801418c:	1101ffe0 	cmpeqi	r4,r2,2047
 8014190:	203f601e 	bne	r4,zero,8013f14 <__subdf3+0x3d0>
 8014194:	5a95883a 	add	r10,r11,r10
 8014198:	52d7803a 	cmpltu	r11,r10,r11
 801419c:	40c9883a 	add	r4,r8,r3
 80141a0:	22c9883a 	add	r4,r4,r11
 80141a4:	202297fa 	slli	r17,r4,31
 80141a8:	5014d07a 	srli	r10,r10,1
 80141ac:	2008d07a 	srli	r4,r4,1
 80141b0:	1021883a 	mov	r16,r2
 80141b4:	8aa2b03a 	or	r17,r17,r10
 80141b8:	003f3e06 	br	8013eb4 <__subdf3+0x370>
 80141bc:	1808977a 	slli	r4,r3,29
 80141c0:	00880034 	movhi	r2,8192
 80141c4:	10bfffc4 	addi	r2,r2,-1
 80141c8:	308c703a 	and	r6,r6,r2
 80141cc:	1810d0fa 	srli	r8,r3,3
 80141d0:	3104b03a 	or	r2,r6,r4
 80141d4:	003f3e06 	br	8013ed0 <__subdf3+0x38c>
 80141d8:	383f521e 	bne	r7,zero,8013f24 <__subdf3+0x3e0>
 80141dc:	10009d26 	beq	r2,zero,8014454 <__subdf3+0x910>
 80141e0:	1808977a 	slli	r4,r3,29
 80141e4:	00880034 	movhi	r2,8192
 80141e8:	10bfffc4 	addi	r2,r2,-1
 80141ec:	3084703a 	and	r2,r6,r2
 80141f0:	1810d0fa 	srli	r8,r3,3
 80141f4:	1104b03a 	or	r2,r2,r4
 80141f8:	4825883a 	mov	r18,r9
 80141fc:	003f5a06 	br	8013f68 <__subdf3+0x424>
 8014200:	52e3c83a 	sub	r17,r10,r11
 8014204:	1a09c83a 	sub	r4,r3,r8
 8014208:	5467803a 	cmpltu	r19,r10,r17
 801420c:	24e7c83a 	sub	r19,r4,r19
 8014210:	4825883a 	mov	r18,r9
 8014214:	003e8506 	br	8013c2c <__subdf3+0xe8>
 8014218:	4022977a 	slli	r17,r8,29
 801421c:	00880034 	movhi	r2,8192
 8014220:	10bfffc4 	addi	r2,r2,-1
 8014224:	2088703a 	and	r4,r4,r2
 8014228:	4010d0fa 	srli	r8,r8,3
 801422c:	2444b03a 	or	r2,r4,r17
 8014230:	003f4d06 	br	8013f68 <__subdf3+0x424>
 8014234:	5aa3c83a 	sub	r17,r11,r10
 8014238:	40c9c83a 	sub	r4,r8,r3
 801423c:	5c57803a 	cmpltu	r11,r11,r17
 8014240:	22c9c83a 	sub	r4,r4,r11
 8014244:	04000044 	movi	r16,1
 8014248:	003e7306 	br	8013c18 <__subdf3+0xd4>
 801424c:	4004977a 	slli	r2,r8,29
 8014250:	00c80034 	movhi	r3,8192
 8014254:	18ffffc4 	addi	r3,r3,-1
 8014258:	20c8703a 	and	r4,r4,r3
 801425c:	4010d0fa 	srli	r8,r8,3
 8014260:	1104b03a 	or	r2,r2,r4
 8014264:	003f4006 	br	8013f68 <__subdf3+0x424>
 8014268:	4004977a 	slli	r2,r8,29
 801426c:	00c80034 	movhi	r3,8192
 8014270:	18ffffc4 	addi	r3,r3,-1
 8014274:	20c8703a 	and	r4,r4,r3
 8014278:	4010d0fa 	srli	r8,r8,3
 801427c:	1104b03a 	or	r2,r2,r4
 8014280:	003f1306 	br	8013ed0 <__subdf3+0x38c>
 8014284:	1804977a 	slli	r2,r3,29
 8014288:	01080034 	movhi	r4,8192
 801428c:	213fffc4 	addi	r4,r4,-1
 8014290:	310c703a 	and	r6,r6,r4
 8014294:	1810d0fa 	srli	r8,r3,3
 8014298:	1184b03a 	or	r2,r2,r6
 801429c:	003f3206 	br	8013f68 <__subdf3+0x424>
 80142a0:	42d0b03a 	or	r8,r8,r11
 80142a4:	4022c03a 	cmpne	r17,r8,zero
 80142a8:	003edf06 	br	8013e28 <__subdf3+0x2e4>
 80142ac:	2c7ff804 	addi	r17,r5,-32
 80142b0:	29000820 	cmpeqi	r4,r5,32
 80142b4:	4444d83a 	srl	r2,r8,r17
 80142b8:	2000041e 	bne	r4,zero,80142cc <__subdf3+0x788>
 80142bc:	01001004 	movi	r4,64
 80142c0:	214bc83a 	sub	r5,r4,r5
 80142c4:	4150983a 	sll	r8,r8,r5
 80142c8:	5a16b03a 	or	r11,r11,r8
 80142cc:	5822c03a 	cmpne	r17,r11,zero
 80142d0:	88a2b03a 	or	r17,r17,r2
 80142d4:	003f9506 	br	801412c <__subdf3+0x5e8>
 80142d8:	103fea26 	beq	r2,zero,8014284 <__subdf3+0x740>
 80142dc:	1a94b03a 	or	r10,r3,r10
 80142e0:	400e977a 	slli	r7,r8,29
 80142e4:	4010d0fa 	srli	r8,r8,3
 80142e8:	503f111e 	bne	r10,zero,8013f30 <__subdf3+0x3ec>
 80142ec:	00880034 	movhi	r2,8192
 80142f0:	10bfffc4 	addi	r2,r2,-1
 80142f4:	2084703a 	and	r2,r4,r2
 80142f8:	11c4b03a 	or	r2,r2,r7
 80142fc:	003f1a06 	br	8013f68 <__subdf3+0x424>
 8014300:	103f5b26 	beq	r2,zero,8014070 <__subdf3+0x52c>
 8014304:	1804977a 	slli	r2,r3,29
 8014308:	01080034 	movhi	r4,8192
 801430c:	213fffc4 	addi	r4,r4,-1
 8014310:	310c703a 	and	r6,r6,r4
 8014314:	1810d0fa 	srli	r8,r3,3
 8014318:	1184b03a 	or	r2,r2,r6
 801431c:	4825883a 	mov	r18,r9
 8014320:	003eed06 	br	8013ed8 <__subdf3+0x394>
 8014324:	1808977a 	slli	r4,r3,29
 8014328:	00880034 	movhi	r2,8192
 801432c:	10bfffc4 	addi	r2,r2,-1
 8014330:	3084703a 	and	r2,r6,r2
 8014334:	1810d0fa 	srli	r8,r3,3
 8014338:	1104b03a 	or	r2,r2,r4
 801433c:	003f0a06 	br	8013f68 <__subdf3+0x424>
 8014340:	52e3c83a 	sub	r17,r10,r11
 8014344:	1a09c83a 	sub	r4,r3,r8
 8014348:	5455803a 	cmpltu	r10,r10,r17
 801434c:	2289c83a 	sub	r4,r4,r10
 8014350:	04000044 	movi	r16,1
 8014354:	003e3006 	br	8013c18 <__subdf3+0xd4>
 8014358:	4006977a 	slli	r3,r8,29
 801435c:	00880034 	movhi	r2,8192
 8014360:	10bfffc4 	addi	r2,r2,-1
 8014364:	2084703a 	and	r2,r4,r2
 8014368:	4010d0fa 	srli	r8,r8,3
 801436c:	10c4b03a 	or	r2,r2,r3
 8014370:	003efd06 	br	8013f68 <__subdf3+0x424>
 8014374:	5aa3c83a 	sub	r17,r11,r10
 8014378:	5c45803a 	cmpltu	r2,r11,r17
 801437c:	40c9c83a 	sub	r4,r8,r3
 8014380:	2089c83a 	sub	r4,r4,r2
 8014384:	2080202c 	andhi	r2,r4,128
 8014388:	10002f26 	beq	r2,zero,8014448 <__subdf3+0x904>
 801438c:	52e3c83a 	sub	r17,r10,r11
 8014390:	1a09c83a 	sub	r4,r3,r8
 8014394:	5455803a 	cmpltu	r10,r10,r17
 8014398:	2289c83a 	sub	r4,r4,r10
 801439c:	4825883a 	mov	r18,r9
 80143a0:	003e3b06 	br	8013c90 <__subdf3+0x14c>
 80143a4:	1808977a 	slli	r4,r3,29
 80143a8:	00880034 	movhi	r2,8192
 80143ac:	10bfffc4 	addi	r2,r2,-1
 80143b0:	3084703a 	and	r2,r6,r2
 80143b4:	1810d0fa 	srli	r8,r3,3
 80143b8:	1104b03a 	or	r2,r2,r4
 80143bc:	003ec406 	br	8013ed0 <__subdf3+0x38c>
 80143c0:	1808977a 	slli	r4,r3,29
 80143c4:	00880034 	movhi	r2,8192
 80143c8:	10bfffc4 	addi	r2,r2,-1
 80143cc:	3084703a 	and	r2,r6,r2
 80143d0:	1810d0fa 	srli	r8,r3,3
 80143d4:	1104b03a 	or	r2,r2,r4
 80143d8:	003ebf06 	br	8013ed8 <__subdf3+0x394>
 80143dc:	5aa3883a 	add	r17,r11,r10
 80143e0:	40c9883a 	add	r4,r8,r3
 80143e4:	8ad7803a 	cmpltu	r11,r17,r11
 80143e8:	22c9883a 	add	r4,r4,r11
 80143ec:	2080202c 	andhi	r2,r4,128
 80143f0:	103eb026 	beq	r2,zero,8013eb4 <__subdf3+0x370>
 80143f4:	00bfe034 	movhi	r2,65408
 80143f8:	10bfffc4 	addi	r2,r2,-1
 80143fc:	2088703a 	and	r4,r4,r2
 8014400:	04000044 	movi	r16,1
 8014404:	003eab06 	br	8013eb4 <__subdf3+0x370>
 8014408:	28bff804 	addi	r2,r5,-32
 801440c:	29000820 	cmpeqi	r4,r5,32
 8014410:	4084d83a 	srl	r2,r8,r2
 8014414:	2000041e 	bne	r4,zero,8014428 <__subdf3+0x8e4>
 8014418:	01001004 	movi	r4,64
 801441c:	214bc83a 	sub	r5,r4,r5
 8014420:	4150983a 	sll	r8,r8,r5
 8014424:	5a16b03a 	or	r11,r11,r8
 8014428:	5822c03a 	cmpne	r17,r11,zero
 801442c:	88a2b03a 	or	r17,r17,r2
 8014430:	003e7d06 	br	8013e28 <__subdf3+0x2e4>
 8014434:	5aa3883a 	add	r17,r11,r10
 8014438:	40c9883a 	add	r4,r8,r3
 801443c:	8a95803a 	cmpltu	r10,r17,r10
 8014440:	2289883a 	add	r4,r4,r10
 8014444:	003e9806 	br	8013ea8 <__subdf3+0x364>
 8014448:	8904b03a 	or	r2,r17,r4
 801444c:	103f0826 	beq	r2,zero,8014070 <__subdf3+0x52c>
 8014450:	003e9806 	br	8013eb4 <__subdf3+0x370>
 8014454:	02000434 	movhi	r8,16
 8014458:	423fffc4 	addi	r8,r8,-1
 801445c:	0025883a 	mov	r18,zero
 8014460:	00bfffc4 	movi	r2,-1
 8014464:	003ec206 	br	8013f70 <__subdf3+0x42c>
 8014468:	0005883a 	mov	r2,zero
 801446c:	0141ffc4 	movi	r5,2047
 8014470:	0007883a 	mov	r3,zero
 8014474:	003e1d06 	br	8013cec <__subdf3+0x1a8>

08014478 <__unorddf2>:
 8014478:	2806d53a 	srli	r3,r5,20
 801447c:	3810d53a 	srli	r8,r7,20
 8014480:	02400434 	movhi	r9,16
 8014484:	18c1ffcc 	andi	r3,r3,2047
 8014488:	4a7fffc4 	addi	r9,r9,-1
 801448c:	18c1ffd8 	cmpnei	r3,r3,2047
 8014490:	2a4a703a 	and	r5,r5,r9
 8014494:	3a4e703a 	and	r7,r7,r9
 8014498:	4201ffcc 	andi	r8,r8,2047
 801449c:	18000426 	beq	r3,zero,80144b0 <__unorddf2+0x38>
 80144a0:	4201ffd8 	cmpnei	r8,r8,2047
 80144a4:	40000626 	beq	r8,zero,80144c0 <__unorddf2+0x48>
 80144a8:	0005883a 	mov	r2,zero
 80144ac:	f800283a 	ret
 80144b0:	214ab03a 	or	r5,r4,r5
 80144b4:	283ffa26 	beq	r5,zero,80144a0 <__unorddf2+0x28>
 80144b8:	00800044 	movi	r2,1
 80144bc:	f800283a 	ret
 80144c0:	398eb03a 	or	r7,r7,r6
 80144c4:	3804c03a 	cmpne	r2,r7,zero
 80144c8:	f800283a 	ret

080144cc <__fixdfsi>:
 80144cc:	2806d53a 	srli	r3,r5,20
 80144d0:	01800434 	movhi	r6,16
 80144d4:	31bfffc4 	addi	r6,r6,-1
 80144d8:	18c1ffcc 	andi	r3,r3,2047
 80144dc:	19c0ffd0 	cmplti	r7,r3,1023
 80144e0:	2810d7fa 	srli	r8,r5,31
 80144e4:	298a703a 	and	r5,r5,r6
 80144e8:	3800061e 	bne	r7,zero,8014504 <__fixdfsi+0x38>
 80144ec:	18810790 	cmplti	r2,r3,1054
 80144f0:	1000061e 	bne	r2,zero,801450c <__fixdfsi+0x40>
 80144f4:	00a00034 	movhi	r2,32768
 80144f8:	10bfffc4 	addi	r2,r2,-1
 80144fc:	4085883a 	add	r2,r8,r2
 8014500:	f800283a 	ret
 8014504:	0005883a 	mov	r2,zero
 8014508:	f800283a 	ret
 801450c:	01810cc4 	movi	r6,1075
 8014510:	30cdc83a 	sub	r6,r6,r3
 8014514:	30800808 	cmpgei	r2,r6,32
 8014518:	29400434 	orhi	r5,r5,16
 801451c:	1000071e 	bne	r2,zero,801453c <__fixdfsi+0x70>
 8014520:	18befb44 	addi	r2,r3,-1043
 8014524:	2884983a 	sll	r2,r5,r2
 8014528:	2188d83a 	srl	r4,r4,r6
 801452c:	1104b03a 	or	r2,r2,r4
 8014530:	403ff526 	beq	r8,zero,8014508 <__fixdfsi+0x3c>
 8014534:	0085c83a 	sub	r2,zero,r2
 8014538:	f800283a 	ret
 801453c:	008104c4 	movi	r2,1043
 8014540:	10c5c83a 	sub	r2,r2,r3
 8014544:	2884d83a 	srl	r2,r5,r2
 8014548:	003ff906 	br	8014530 <__fixdfsi+0x64>

0801454c <__floatsidf>:
 801454c:	defffd04 	addi	sp,sp,-12
 8014550:	dfc00215 	stw	ra,8(sp)
 8014554:	dc400115 	stw	r17,4(sp)
 8014558:	dc000015 	stw	r16,0(sp)
 801455c:	20001326 	beq	r4,zero,80145ac <__floatsidf+0x60>
 8014560:	2022d7fa 	srli	r17,r4,31
 8014564:	2021883a 	mov	r16,r4
 8014568:	20002516 	blt	r4,zero,8014600 <__floatsidf+0xb4>
 801456c:	8009883a 	mov	r4,r16
 8014570:	80146980 	call	8014698 <__clzsi2>
 8014574:	01410784 	movi	r5,1054
 8014578:	288bc83a 	sub	r5,r5,r2
 801457c:	10c002c8 	cmpgei	r3,r2,11
 8014580:	2941ffcc 	andi	r5,r5,2047
 8014584:	1800171e 	bne	r3,zero,80145e4 <__floatsidf+0x98>
 8014588:	00c002c4 	movi	r3,11
 801458c:	1887c83a 	sub	r3,r3,r2
 8014590:	80c6d83a 	srl	r3,r16,r3
 8014594:	01000434 	movhi	r4,16
 8014598:	10800544 	addi	r2,r2,21
 801459c:	213fffc4 	addi	r4,r4,-1
 80145a0:	8084983a 	sll	r2,r16,r2
 80145a4:	1906703a 	and	r3,r3,r4
 80145a8:	00000406 	br	80145bc <__floatsidf+0x70>
 80145ac:	0023883a 	mov	r17,zero
 80145b0:	000b883a 	mov	r5,zero
 80145b4:	0007883a 	mov	r3,zero
 80145b8:	0005883a 	mov	r2,zero
 80145bc:	280a953a 	slli	r5,r5,20
 80145c0:	8c403fcc 	andi	r17,r17,255
 80145c4:	882297fa 	slli	r17,r17,31
 80145c8:	28c6b03a 	or	r3,r5,r3
 80145cc:	1c46b03a 	or	r3,r3,r17
 80145d0:	dfc00217 	ldw	ra,8(sp)
 80145d4:	dc400117 	ldw	r17,4(sp)
 80145d8:	dc000017 	ldw	r16,0(sp)
 80145dc:	dec00304 	addi	sp,sp,12
 80145e0:	f800283a 	ret
 80145e4:	10bffd44 	addi	r2,r2,-11
 80145e8:	8086983a 	sll	r3,r16,r2
 80145ec:	00800434 	movhi	r2,16
 80145f0:	10bfffc4 	addi	r2,r2,-1
 80145f4:	1886703a 	and	r3,r3,r2
 80145f8:	0005883a 	mov	r2,zero
 80145fc:	003fef06 	br	80145bc <__floatsidf+0x70>
 8014600:	0121c83a 	sub	r16,zero,r4
 8014604:	003fd906 	br	801456c <__floatsidf+0x20>

08014608 <__floatunsidf>:
 8014608:	defffe04 	addi	sp,sp,-8
 801460c:	dc000015 	stw	r16,0(sp)
 8014610:	dfc00115 	stw	ra,4(sp)
 8014614:	2021883a 	mov	r16,r4
 8014618:	20000f26 	beq	r4,zero,8014658 <__floatunsidf+0x50>
 801461c:	80146980 	call	8014698 <__clzsi2>
 8014620:	00c10784 	movi	r3,1054
 8014624:	1887c83a 	sub	r3,r3,r2
 8014628:	110002c8 	cmpgei	r4,r2,11
 801462c:	18c1ffcc 	andi	r3,r3,2047
 8014630:	2000121e 	bne	r4,zero,801467c <__floatunsidf+0x74>
 8014634:	014002c4 	movi	r5,11
 8014638:	288bc83a 	sub	r5,r5,r2
 801463c:	814ad83a 	srl	r5,r16,r5
 8014640:	01000434 	movhi	r4,16
 8014644:	10800544 	addi	r2,r2,21
 8014648:	213fffc4 	addi	r4,r4,-1
 801464c:	80a0983a 	sll	r16,r16,r2
 8014650:	290a703a 	and	r5,r5,r4
 8014654:	00000206 	br	8014660 <__floatunsidf+0x58>
 8014658:	0007883a 	mov	r3,zero
 801465c:	000b883a 	mov	r5,zero
 8014660:	1806953a 	slli	r3,r3,20
 8014664:	8005883a 	mov	r2,r16
 8014668:	1946b03a 	or	r3,r3,r5
 801466c:	dfc00117 	ldw	ra,4(sp)
 8014670:	dc000017 	ldw	r16,0(sp)
 8014674:	dec00204 	addi	sp,sp,8
 8014678:	f800283a 	ret
 801467c:	10bffd44 	addi	r2,r2,-11
 8014680:	808a983a 	sll	r5,r16,r2
 8014684:	00800434 	movhi	r2,16
 8014688:	10bfffc4 	addi	r2,r2,-1
 801468c:	288a703a 	and	r5,r5,r2
 8014690:	0021883a 	mov	r16,zero
 8014694:	003ff206 	br	8014660 <__floatunsidf+0x58>

08014698 <__clzsi2>:
 8014698:	00bfffd4 	movui	r2,65535
 801469c:	11000436 	bltu	r2,r4,80146b0 <__clzsi2+0x18>
 80146a0:	20804030 	cmpltui	r2,r4,256
 80146a4:	10000e26 	beq	r2,zero,80146e0 <__clzsi2+0x48>
 80146a8:	01400804 	movi	r5,32
 80146ac:	00000406 	br	80146c0 <__clzsi2+0x28>
 80146b0:	00804034 	movhi	r2,256
 80146b4:	20800736 	bltu	r4,r2,80146d4 <__clzsi2+0x3c>
 80146b8:	2008d63a 	srli	r4,r4,24
 80146bc:	01400204 	movi	r5,8
 80146c0:	00c20174 	movhi	r3,2053
 80146c4:	20c7883a 	add	r3,r4,r3
 80146c8:	18820803 	ldbu	r2,2080(r3)
 80146cc:	2885c83a 	sub	r2,r5,r2
 80146d0:	f800283a 	ret
 80146d4:	2008d43a 	srli	r4,r4,16
 80146d8:	01400404 	movi	r5,16
 80146dc:	003ff806 	br	80146c0 <__clzsi2+0x28>
 80146e0:	2008d23a 	srli	r4,r4,8
 80146e4:	01400604 	movi	r5,24
 80146e8:	003ff506 	br	80146c0 <__clzsi2+0x28>

080146ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80146ec:	defffd04 	addi	sp,sp,-12
 80146f0:	df000215 	stw	fp,8(sp)
 80146f4:	df000204 	addi	fp,sp,8
 80146f8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80146fc:	d0206645 	stb	zero,-32359(gp)
 8014700:	e0bffe17 	ldw	r2,-8(fp)
 8014704:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8014708:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801470c:	10000226 	beq	r2,zero,8014718 <_exit+0x2c>
    ALT_SIM_FAIL();
 8014710:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 8014714:	00000106 	br	801471c <_exit+0x30>
    ALT_SIM_PASS();
 8014718:	002af0b0 	cmpltui	zero,zero,43970
}
 801471c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8014720:	003fff06 	br	8014720 <_exit+0x34>

08014724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014724:	defffe04 	addi	sp,sp,-8
 8014728:	dfc00115 	stw	ra,4(sp)
 801472c:	df000015 	stw	fp,0(sp)
 8014730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014734:	d0a04317 	ldw	r2,-32500(gp)
 8014738:	10000326 	beq	r2,zero,8014748 <alt_get_errno+0x24>
 801473c:	d0a04317 	ldw	r2,-32500(gp)
 8014740:	103ee83a 	callr	r2
 8014744:	00000106 	br	801474c <alt_get_errno+0x28>
 8014748:	d0a05a04 	addi	r2,gp,-32408
}
 801474c:	e037883a 	mov	sp,fp
 8014750:	dfc00117 	ldw	ra,4(sp)
 8014754:	df000017 	ldw	fp,0(sp)
 8014758:	dec00204 	addi	sp,sp,8
 801475c:	f800283a 	ret

08014760 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8014760:	defffb04 	addi	sp,sp,-20
 8014764:	dfc00415 	stw	ra,16(sp)
 8014768:	df000315 	stw	fp,12(sp)
 801476c:	df000304 	addi	fp,sp,12
 8014770:	e13ffe15 	stw	r4,-8(fp)
 8014774:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014778:	e0bffe17 	ldw	r2,-8(fp)
 801477c:	10000616 	blt	r2,zero,8014798 <fstat+0x38>
 8014780:	e0bffe17 	ldw	r2,-8(fp)
 8014784:	10c00324 	muli	r3,r2,12
 8014788:	00820174 	movhi	r2,2053
 801478c:	109b0f04 	addi	r2,r2,27708
 8014790:	1885883a 	add	r2,r3,r2
 8014794:	00000106 	br	801479c <fstat+0x3c>
 8014798:	0005883a 	mov	r2,zero
 801479c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80147a0:	e0bfff17 	ldw	r2,-4(fp)
 80147a4:	10001026 	beq	r2,zero,80147e8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80147a8:	e0bfff17 	ldw	r2,-4(fp)
 80147ac:	10800017 	ldw	r2,0(r2)
 80147b0:	10800817 	ldw	r2,32(r2)
 80147b4:	10000726 	beq	r2,zero,80147d4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 80147b8:	e0bfff17 	ldw	r2,-4(fp)
 80147bc:	10800017 	ldw	r2,0(r2)
 80147c0:	10800817 	ldw	r2,32(r2)
 80147c4:	e17ffd17 	ldw	r5,-12(fp)
 80147c8:	e13fff17 	ldw	r4,-4(fp)
 80147cc:	103ee83a 	callr	r2
 80147d0:	00000a06 	br	80147fc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80147d4:	e0bffd17 	ldw	r2,-12(fp)
 80147d8:	00c80004 	movi	r3,8192
 80147dc:	10c00115 	stw	r3,4(r2)
      return 0;
 80147e0:	0005883a 	mov	r2,zero
 80147e4:	00000506 	br	80147fc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80147e8:	80147240 	call	8014724 <alt_get_errno>
 80147ec:	1007883a 	mov	r3,r2
 80147f0:	00801444 	movi	r2,81
 80147f4:	18800015 	stw	r2,0(r3)
    return -1;
 80147f8:	00bfffc4 	movi	r2,-1
  }
}
 80147fc:	e037883a 	mov	sp,fp
 8014800:	dfc00117 	ldw	ra,4(sp)
 8014804:	df000017 	ldw	fp,0(sp)
 8014808:	dec00204 	addi	sp,sp,8
 801480c:	f800283a 	ret

08014810 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 8014810:	deffff04 	addi	sp,sp,-4
 8014814:	df000015 	stw	fp,0(sp)
 8014818:	d839883a 	mov	fp,sp
  return 0;
 801481c:	0005883a 	mov	r2,zero
}
 8014820:	e037883a 	mov	sp,fp
 8014824:	df000017 	ldw	fp,0(sp)
 8014828:	dec00104 	addi	sp,sp,4
 801482c:	f800283a 	ret

08014830 <alt_get_errno>:
{
 8014830:	defffe04 	addi	sp,sp,-8
 8014834:	dfc00115 	stw	ra,4(sp)
 8014838:	df000015 	stw	fp,0(sp)
 801483c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014840:	d0a04317 	ldw	r2,-32500(gp)
 8014844:	10000326 	beq	r2,zero,8014854 <alt_get_errno+0x24>
 8014848:	d0a04317 	ldw	r2,-32500(gp)
 801484c:	103ee83a 	callr	r2
 8014850:	00000106 	br	8014858 <alt_get_errno+0x28>
 8014854:	d0a05a04 	addi	r2,gp,-32408
}
 8014858:	e037883a 	mov	sp,fp
 801485c:	dfc00117 	ldw	ra,4(sp)
 8014860:	df000017 	ldw	fp,0(sp)
 8014864:	dec00204 	addi	sp,sp,8
 8014868:	f800283a 	ret

0801486c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801486c:	deffea04 	addi	sp,sp,-88
 8014870:	dfc01515 	stw	ra,84(sp)
 8014874:	df001415 	stw	fp,80(sp)
 8014878:	df001404 	addi	fp,sp,80
 801487c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014880:	e0bfec17 	ldw	r2,-80(fp)
 8014884:	10000616 	blt	r2,zero,80148a0 <isatty+0x34>
 8014888:	e0bfec17 	ldw	r2,-80(fp)
 801488c:	10c00324 	muli	r3,r2,12
 8014890:	00820174 	movhi	r2,2053
 8014894:	109b0f04 	addi	r2,r2,27708
 8014898:	1885883a 	add	r2,r3,r2
 801489c:	00000106 	br	80148a4 <isatty+0x38>
 80148a0:	0005883a 	mov	r2,zero
 80148a4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80148a8:	e0bfff17 	ldw	r2,-4(fp)
 80148ac:	10000e26 	beq	r2,zero,80148e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80148b0:	e0bfff17 	ldw	r2,-4(fp)
 80148b4:	10800017 	ldw	r2,0(r2)
 80148b8:	10800817 	ldw	r2,32(r2)
 80148bc:	1000021e 	bne	r2,zero,80148c8 <isatty+0x5c>
    {
      return 1;
 80148c0:	00800044 	movi	r2,1
 80148c4:	00000d06 	br	80148fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80148c8:	e0bfed04 	addi	r2,fp,-76
 80148cc:	100b883a 	mov	r5,r2
 80148d0:	e13fec17 	ldw	r4,-80(fp)
 80148d4:	80147600 	call	8014760 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80148d8:	e0bfee17 	ldw	r2,-72(fp)
 80148dc:	10880020 	cmpeqi	r2,r2,8192
 80148e0:	10803fcc 	andi	r2,r2,255
 80148e4:	00000506 	br	80148fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80148e8:	80148300 	call	8014830 <alt_get_errno>
 80148ec:	1007883a 	mov	r3,r2
 80148f0:	00801444 	movi	r2,81
 80148f4:	18800015 	stw	r2,0(r3)
    return 0;
 80148f8:	0005883a 	mov	r2,zero
  }
}
 80148fc:	e037883a 	mov	sp,fp
 8014900:	dfc00117 	ldw	ra,4(sp)
 8014904:	df000017 	ldw	fp,0(sp)
 8014908:	dec00204 	addi	sp,sp,8
 801490c:	f800283a 	ret

08014910 <alt_get_errno>:
{
 8014910:	defffe04 	addi	sp,sp,-8
 8014914:	dfc00115 	stw	ra,4(sp)
 8014918:	df000015 	stw	fp,0(sp)
 801491c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014920:	d0a04317 	ldw	r2,-32500(gp)
 8014924:	10000326 	beq	r2,zero,8014934 <alt_get_errno+0x24>
 8014928:	d0a04317 	ldw	r2,-32500(gp)
 801492c:	103ee83a 	callr	r2
 8014930:	00000106 	br	8014938 <alt_get_errno+0x28>
 8014934:	d0a05a04 	addi	r2,gp,-32408
}
 8014938:	e037883a 	mov	sp,fp
 801493c:	dfc00117 	ldw	ra,4(sp)
 8014940:	df000017 	ldw	fp,0(sp)
 8014944:	dec00204 	addi	sp,sp,8
 8014948:	f800283a 	ret

0801494c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 801494c:	defffb04 	addi	sp,sp,-20
 8014950:	dfc00415 	stw	ra,16(sp)
 8014954:	df000315 	stw	fp,12(sp)
 8014958:	df000304 	addi	fp,sp,12
 801495c:	e13ffe15 	stw	r4,-8(fp)
 8014960:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 8014964:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 8014968:	e0bffe17 	ldw	r2,-8(fp)
 801496c:	00802e16 	blt	zero,r2,8014a28 <kill+0xdc>
 8014970:	e0bffd17 	ldw	r2,-12(fp)
 8014974:	10800828 	cmpgeui	r2,r2,32
 8014978:	1000281e 	bne	r2,zero,8014a1c <kill+0xd0>
 801497c:	e0bffd17 	ldw	r2,-12(fp)
 8014980:	100690ba 	slli	r3,r2,2
 8014984:	00820074 	movhi	r2,2049
 8014988:	1885883a 	add	r2,r3,r2
 801498c:	10926517 	ldw	r2,18836(r2)
 8014990:	1000683a 	jmp	r2
 8014994:	08014a3c 	xorhi	zero,at,1320
 8014998:	08014a1c 	xori	zero,at,1320
 801499c:	08014a1c 	xori	zero,at,1320
 80149a0:	08014a14 	ori	zero,at,1320
 80149a4:	08014a14 	ori	zero,at,1320
 80149a8:	08014a14 	ori	zero,at,1320
 80149ac:	08014a14 	ori	zero,at,1320
 80149b0:	08014a1c 	xori	zero,at,1320
 80149b4:	08014a14 	ori	zero,at,1320
 80149b8:	08014a14 	ori	zero,at,1320
 80149bc:	08014a14 	ori	zero,at,1320
 80149c0:	08014a14 	ori	zero,at,1320
 80149c4:	08014a14 	ori	zero,at,1320
 80149c8:	08014a14 	ori	zero,at,1320
 80149cc:	08014a14 	ori	zero,at,1320
 80149d0:	08014a14 	ori	zero,at,1320
 80149d4:	08014a3c 	xorhi	zero,at,1320
 80149d8:	08014a1c 	xori	zero,at,1320
 80149dc:	08014a1c 	xori	zero,at,1320
 80149e0:	08014a1c 	xori	zero,at,1320
 80149e4:	08014a3c 	xorhi	zero,at,1320
 80149e8:	08014a1c 	xori	zero,at,1320
 80149ec:	08014a1c 	xori	zero,at,1320
 80149f0:	08014a14 	ori	zero,at,1320
 80149f4:	08014a14 	ori	zero,at,1320
 80149f8:	08014a14 	ori	zero,at,1320
 80149fc:	08014a14 	ori	zero,at,1320
 8014a00:	08014a14 	ori	zero,at,1320
 8014a04:	08014a1c 	xori	zero,at,1320
 8014a08:	08014a1c 	xori	zero,at,1320
 8014a0c:	08014a14 	ori	zero,at,1320
 8014a10:	08014a14 	ori	zero,at,1320
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 8014a14:	0009883a 	mov	r4,zero
 8014a18:	80146ec0 	call	80146ec <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8014a1c:	00800584 	movi	r2,22
 8014a20:	e0bfff15 	stw	r2,-4(fp)
 8014a24:	00000606 	br	8014a40 <kill+0xf4>
    }
  }

  else if (pid > 0)
 8014a28:	e0bffe17 	ldw	r2,-8(fp)
 8014a2c:	0080040e 	bge	zero,r2,8014a40 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8014a30:	008000c4 	movi	r2,3
 8014a34:	e0bfff15 	stw	r2,-4(fp)
 8014a38:	00000106 	br	8014a40 <kill+0xf4>
      break;
 8014a3c:	0001883a 	nop
  }

  if (status)
 8014a40:	e0bfff17 	ldw	r2,-4(fp)
 8014a44:	10000626 	beq	r2,zero,8014a60 <kill+0x114>
  {
    ALT_ERRNO = status;
 8014a48:	80149100 	call	8014910 <alt_get_errno>
 8014a4c:	1007883a 	mov	r3,r2
 8014a50:	e0bfff17 	ldw	r2,-4(fp)
 8014a54:	18800015 	stw	r2,0(r3)
    return -1;
 8014a58:	00bfffc4 	movi	r2,-1
 8014a5c:	00000106 	br	8014a64 <kill+0x118>
  }

  return 0;
 8014a60:	0005883a 	mov	r2,zero
}
 8014a64:	e037883a 	mov	sp,fp
 8014a68:	dfc00117 	ldw	ra,4(sp)
 8014a6c:	df000017 	ldw	fp,0(sp)
 8014a70:	dec00204 	addi	sp,sp,8
 8014a74:	f800283a 	ret

08014a78 <alt_get_errno>:
{
 8014a78:	defffe04 	addi	sp,sp,-8
 8014a7c:	dfc00115 	stw	ra,4(sp)
 8014a80:	df000015 	stw	fp,0(sp)
 8014a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014a88:	d0a04317 	ldw	r2,-32500(gp)
 8014a8c:	10000326 	beq	r2,zero,8014a9c <alt_get_errno+0x24>
 8014a90:	d0a04317 	ldw	r2,-32500(gp)
 8014a94:	103ee83a 	callr	r2
 8014a98:	00000106 	br	8014aa0 <alt_get_errno+0x28>
 8014a9c:	d0a05a04 	addi	r2,gp,-32408
}
 8014aa0:	e037883a 	mov	sp,fp
 8014aa4:	dfc00117 	ldw	ra,4(sp)
 8014aa8:	df000017 	ldw	fp,0(sp)
 8014aac:	dec00204 	addi	sp,sp,8
 8014ab0:	f800283a 	ret

08014ab4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8014ab4:	defff904 	addi	sp,sp,-28
 8014ab8:	dfc00615 	stw	ra,24(sp)
 8014abc:	df000515 	stw	fp,20(sp)
 8014ac0:	df000504 	addi	fp,sp,20
 8014ac4:	e13ffd15 	stw	r4,-12(fp)
 8014ac8:	e17ffc15 	stw	r5,-16(fp)
 8014acc:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8014ad0:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014ad4:	e0bffd17 	ldw	r2,-12(fp)
 8014ad8:	10000616 	blt	r2,zero,8014af4 <lseek+0x40>
 8014adc:	e0bffd17 	ldw	r2,-12(fp)
 8014ae0:	10c00324 	muli	r3,r2,12
 8014ae4:	00820174 	movhi	r2,2053
 8014ae8:	109b0f04 	addi	r2,r2,27708
 8014aec:	1885883a 	add	r2,r3,r2
 8014af0:	00000106 	br	8014af8 <lseek+0x44>
 8014af4:	0005883a 	mov	r2,zero
 8014af8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8014afc:	e0bffe17 	ldw	r2,-8(fp)
 8014b00:	10001026 	beq	r2,zero,8014b44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8014b04:	e0bffe17 	ldw	r2,-8(fp)
 8014b08:	10800017 	ldw	r2,0(r2)
 8014b0c:	10800717 	ldw	r2,28(r2)
 8014b10:	10000926 	beq	r2,zero,8014b38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8014b14:	e0bffe17 	ldw	r2,-8(fp)
 8014b18:	10800017 	ldw	r2,0(r2)
 8014b1c:	10800717 	ldw	r2,28(r2)
 8014b20:	e1bffb17 	ldw	r6,-20(fp)
 8014b24:	e17ffc17 	ldw	r5,-16(fp)
 8014b28:	e13ffe17 	ldw	r4,-8(fp)
 8014b2c:	103ee83a 	callr	r2
 8014b30:	e0bfff15 	stw	r2,-4(fp)
 8014b34:	00000506 	br	8014b4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8014b38:	00bfde84 	movi	r2,-134
 8014b3c:	e0bfff15 	stw	r2,-4(fp)
 8014b40:	00000206 	br	8014b4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8014b44:	00bfebc4 	movi	r2,-81
 8014b48:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 8014b4c:	e0bfff17 	ldw	r2,-4(fp)
 8014b50:	1000070e 	bge	r2,zero,8014b70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8014b54:	8014a780 	call	8014a78 <alt_get_errno>
 8014b58:	1007883a 	mov	r3,r2
 8014b5c:	e0bfff17 	ldw	r2,-4(fp)
 8014b60:	0085c83a 	sub	r2,zero,r2
 8014b64:	18800015 	stw	r2,0(r3)
    rc = -1;
 8014b68:	00bfffc4 	movi	r2,-1
 8014b6c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 8014b70:	e0bfff17 	ldw	r2,-4(fp)
}
 8014b74:	e037883a 	mov	sp,fp
 8014b78:	dfc00117 	ldw	ra,4(sp)
 8014b7c:	df000017 	ldw	fp,0(sp)
 8014b80:	dec00204 	addi	sp,sp,8
 8014b84:	f800283a 	ret

08014b88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8014b88:	defffb04 	addi	sp,sp,-20
 8014b8c:	dfc00415 	stw	ra,16(sp)
 8014b90:	df000315 	stw	fp,12(sp)
 8014b94:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8014b98:	0009883a 	mov	r4,zero
 8014b9c:	801c9b80 	call	801c9b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8014ba0:	80158c00 	call	80158c0 <OSInit>
 8014ba4:	01000044 	movi	r4,1
 8014ba8:	801a3440 	call	801a344 <OSSemCreate>
 8014bac:	d0a06315 	stw	r2,-32372(gp)
 8014bb0:	01000044 	movi	r4,1
 8014bb4:	801a3440 	call	801a344 <OSSemCreate>
 8014bb8:	d0a06515 	stw	r2,-32364(gp)
 8014bbc:	d0a0b104 	addi	r2,gp,-32060
 8014bc0:	e0bffe15 	stw	r2,-8(fp)
 8014bc4:	00800044 	movi	r2,1
 8014bc8:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 8014bcc:	e0bffd8b 	ldhu	r2,-10(fp)
 8014bd0:	1009883a 	mov	r4,r2
 8014bd4:	801a3440 	call	801a344 <OSSemCreate>
 8014bd8:	1007883a 	mov	r3,r2
 8014bdc:	e0bffe17 	ldw	r2,-8(fp)
 8014be0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 8014be4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8014be8:	801c9f40 	call	801c9f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8014bec:	01820174 	movhi	r6,2053
 8014bf0:	31824804 	addi	r6,r6,2336
 8014bf4:	01420174 	movhi	r5,2053
 8014bf8:	29424804 	addi	r5,r5,2336
 8014bfc:	01020174 	movhi	r4,2053
 8014c00:	21024804 	addi	r4,r4,2336
 8014c04:	803efb80 	call	803efb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8014c08:	803ea5c0 	call	803ea5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8014c0c:	01020134 	movhi	r4,2052
 8014c10:	213ab004 	addi	r4,r4,-5440
 8014c14:	804de780 	call	804de78 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8014c18:	d0a05f17 	ldw	r2,-32388(gp)
 8014c1c:	d0e06017 	ldw	r3,-32384(gp)
 8014c20:	d1206117 	ldw	r4,-32380(gp)
 8014c24:	200d883a 	mov	r6,r4
 8014c28:	180b883a 	mov	r5,r3
 8014c2c:	1009883a 	mov	r4,r2
 8014c30:	8002d400 	call	8002d40 <main>
 8014c34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8014c38:	01000044 	movi	r4,1
 8014c3c:	8028c400 	call	8028c40 <close>
  exit (result);
 8014c40:	e13fff17 	ldw	r4,-4(fp)
 8014c44:	804dea40 	call	804dea4 <exit>

08014c48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8014c48:	defff904 	addi	sp,sp,-28
 8014c4c:	df000615 	stw	fp,24(sp)
 8014c50:	df000604 	addi	fp,sp,24
 8014c54:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 8014c58:	0005303a 	rdctl	r2,status
 8014c5c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014c60:	e0fffd17 	ldw	r3,-12(fp)
 8014c64:	00bfff84 	movi	r2,-2
 8014c68:	1884703a 	and	r2,r3,r2
 8014c6c:	1001703a 	wrctl	status,r2
  return context;
 8014c70:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8014c74:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8014c78:	d0a00417 	ldw	r2,-32752(gp)
 8014c7c:	10c000c4 	addi	r3,r2,3
 8014c80:	00bfff04 	movi	r2,-4
 8014c84:	1884703a 	and	r2,r3,r2
 8014c88:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8014c8c:	d0e00417 	ldw	r3,-32752(gp)
 8014c90:	e0bffa17 	ldw	r2,-24(fp)
 8014c94:	1887883a 	add	r3,r3,r2
 8014c98:	00840034 	movhi	r2,4096
 8014c9c:	10800004 	addi	r2,r2,0
 8014ca0:	10c0072e 	bgeu	r2,r3,8014cc0 <sbrk+0x78>
 8014ca4:	e0bfff17 	ldw	r2,-4(fp)
 8014ca8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8014cac:	e0bffc17 	ldw	r2,-16(fp)
 8014cb0:	1001703a 	wrctl	status,r2
}
 8014cb4:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8014cb8:	00bfffc4 	movi	r2,-1
 8014cbc:	00000c06 	br	8014cf0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 8014cc0:	d0a00417 	ldw	r2,-32752(gp)
 8014cc4:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 8014cc8:	d0e00417 	ldw	r3,-32752(gp)
 8014ccc:	e0bffa17 	ldw	r2,-24(fp)
 8014cd0:	1885883a 	add	r2,r3,r2
 8014cd4:	d0a00415 	stw	r2,-32752(gp)
 8014cd8:	e0bfff17 	ldw	r2,-4(fp)
 8014cdc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8014ce0:	e0bffb17 	ldw	r2,-20(fp)
 8014ce4:	1001703a 	wrctl	status,r2
}
 8014ce8:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8014cec:	e0bffe17 	ldw	r2,-8(fp)
} 
 8014cf0:	e037883a 	mov	sp,fp
 8014cf4:	df000017 	ldw	fp,0(sp)
 8014cf8:	dec00104 	addi	sp,sp,4
 8014cfc:	f800283a 	ret

08014d00 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 8014d00:	deffdf04 	addi	sp,sp,-132
 8014d04:	dfc02015 	stw	ra,128(sp)
 8014d08:	df001f15 	stw	fp,124(sp)
 8014d0c:	df001f04 	addi	fp,sp,124
 8014d10:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 8014d14:	e0bfe404 	addi	r2,fp,-112
 8014d18:	100b883a 	mov	r5,r2
 8014d1c:	01003fc4 	movi	r4,255
 8014d20:	801c2e00 	call	801c2e0 <OSTaskQuery>
 8014d24:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
 8014d28:	e0bfe243 	ldbu	r2,-119(fp)
 8014d2c:	10803fcc 	andi	r2,r2,255
 8014d30:	10001d1e 	bne	r2,zero,8014da8 <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
 8014d34:	e0bff083 	ldbu	r2,-62(fp)
 8014d38:	10803fcc 	andi	r2,r2,255
 8014d3c:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 8014d40:	d0a06317 	ldw	r2,-32372(gp)
 8014d44:	e0ffe284 	addi	r3,fp,-118
 8014d48:	180b883a 	mov	r5,r3
 8014d4c:	1009883a 	mov	r4,r2
 8014d50:	801ab140 	call	801ab14 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 8014d54:	e0bfe3c3 	ldbu	r2,-113(fp)
 8014d58:	10803fcc 	andi	r2,r2,255
 8014d5c:	10000726 	beq	r2,zero,8014d7c <__env_lock+0x7c>
 8014d60:	d0a00517 	ldw	r2,-32748(gp)
 8014d64:	e0ffff17 	ldw	r3,-4(fp)
 8014d68:	1880041e 	bne	r3,r2,8014d7c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 8014d6c:	d0a06217 	ldw	r2,-32376(gp)
 8014d70:	10800044 	addi	r2,r2,1
 8014d74:	d0a06215 	stw	r2,-32376(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 8014d78:	00000c06 	br	8014dac <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
 8014d7c:	d0a06317 	ldw	r2,-32372(gp)
 8014d80:	e0ffe244 	addi	r3,fp,-119
 8014d84:	180d883a 	mov	r6,r3
 8014d88:	000b883a 	mov	r5,zero
 8014d8c:	1009883a 	mov	r4,r2
 8014d90:	801a6700 	call	801a670 <OSSemPend>
    locks  = 1;
 8014d94:	00800044 	movi	r2,1
 8014d98:	d0a06215 	stw	r2,-32376(gp)
    lockid = id;
 8014d9c:	e0bfff17 	ldw	r2,-4(fp)
 8014da0:	d0a00515 	stw	r2,-32748(gp)
  return;
 8014da4:	00000106 	br	8014dac <__env_lock+0xac>
    return;
 8014da8:	0001883a 	nop
}
 8014dac:	e037883a 	mov	sp,fp
 8014db0:	dfc00117 	ldw	ra,4(sp)
 8014db4:	df000017 	ldw	fp,0(sp)
 8014db8:	dec00204 	addi	sp,sp,8
 8014dbc:	f800283a 	ret

08014dc0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 8014dc0:	defffd04 	addi	sp,sp,-12
 8014dc4:	dfc00215 	stw	ra,8(sp)
 8014dc8:	df000115 	stw	fp,4(sp)
 8014dcc:	df000104 	addi	fp,sp,4
 8014dd0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 8014dd4:	d0a06217 	ldw	r2,-32376(gp)
 8014dd8:	10000b26 	beq	r2,zero,8014e08 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 8014ddc:	d0a06217 	ldw	r2,-32376(gp)
 8014de0:	10bfffc4 	addi	r2,r2,-1
 8014de4:	d0a06215 	stw	r2,-32376(gp)
 8014de8:	d0a06217 	ldw	r2,-32376(gp)
 8014dec:	1000071e 	bne	r2,zero,8014e0c <__env_unlock+0x4c>
  {
    lockid = -1;
 8014df0:	00bfffc4 	movi	r2,-1
 8014df4:	d0a00515 	stw	r2,-32748(gp)
    OSSemPost( alt_envsem );
 8014df8:	d0a06317 	ldw	r2,-32372(gp)
 8014dfc:	1009883a 	mov	r4,r2
 8014e00:	801a9f80 	call	801a9f8 <OSSemPost>
 8014e04:	00000106 	br	8014e0c <__env_unlock+0x4c>
    return;
 8014e08:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 8014e0c:	e037883a 	mov	sp,fp
 8014e10:	dfc00117 	ldw	ra,4(sp)
 8014e14:	df000017 	ldw	fp,0(sp)
 8014e18:	dec00204 	addi	sp,sp,8
 8014e1c:	f800283a 	ret

08014e20 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 8014e20:	deffdb04 	addi	sp,sp,-148
 8014e24:	dfc02415 	stw	ra,144(sp)
 8014e28:	df002315 	stw	fp,140(sp)
 8014e2c:	df002304 	addi	fp,sp,140
 8014e30:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8014e34:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 8014e38:	d0a06643 	ldbu	r2,-32359(gp)
 8014e3c:	10803fcc 	andi	r2,r2,255
 8014e40:	10800060 	cmpeqi	r2,r2,1
 8014e44:	10003826 	beq	r2,zero,8014f28 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 8014e48:	e0bfe004 	addi	r2,fp,-128
 8014e4c:	100b883a 	mov	r5,r2
 8014e50:	01003fc4 	movi	r4,255
 8014e54:	801c2e00 	call	801c2e0 <OSTaskQuery>
 8014e58:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
 8014e5c:	e0bfde43 	ldbu	r2,-135(fp)
 8014e60:	10803fcc 	andi	r2,r2,255
 8014e64:	1000321e 	bne	r2,zero,8014f30 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
 8014e68:	e0bfec83 	ldbu	r2,-78(fp)
 8014e6c:	10803fcc 	andi	r2,r2,255
 8014e70:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 8014e74:	d0a06517 	ldw	r2,-32364(gp)
 8014e78:	e0ffde84 	addi	r3,fp,-134
 8014e7c:	180b883a 	mov	r5,r3
 8014e80:	1009883a 	mov	r4,r2
 8014e84:	801ab140 	call	801ab14 <OSSemQuery>
  NIOS2_READ_STATUS (context);
 8014e88:	0005303a 	rdctl	r2,status
 8014e8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014e90:	e0fffd17 	ldw	r3,-12(fp)
 8014e94:	00bfff84 	movi	r2,-2
 8014e98:	1884703a 	and	r2,r3,r2
 8014e9c:	1001703a 	wrctl	status,r2
  return context;
 8014ea0:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
 8014ea4:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
 8014ea8:	e0bfde8b 	ldhu	r2,-134(fp)
 8014eac:	10bfffcc 	andi	r2,r2,65535
 8014eb0:	10000d1e 	bne	r2,zero,8014ee8 <__malloc_lock+0xc8>
 8014eb4:	d0a00617 	ldw	r2,-32744(gp)
 8014eb8:	e0fffe17 	ldw	r3,-8(fp)
 8014ebc:	18800a1e 	bne	r3,r2,8014ee8 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
 8014ec0:	d0a06417 	ldw	r2,-32368(gp)
 8014ec4:	10800044 	addi	r2,r2,1
 8014ec8:	d0a06415 	stw	r2,-32368(gp)
 8014ecc:	e0bfff17 	ldw	r2,-4(fp)
 8014ed0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8014ed4:	e0bffc17 	ldw	r2,-16(fp)
 8014ed8:	1001703a 	wrctl	status,r2
}
 8014edc:	0001883a 	nop
    OS_EXIT_CRITICAL();
 8014ee0:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 8014ee4:	00001306 	br	8014f34 <__malloc_lock+0x114>
 8014ee8:	e0bfff17 	ldw	r2,-4(fp)
 8014eec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8014ef0:	e0bffb17 	ldw	r2,-20(fp)
 8014ef4:	1001703a 	wrctl	status,r2
}
 8014ef8:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
 8014efc:	d0a06517 	ldw	r2,-32364(gp)
 8014f00:	e0ffde44 	addi	r3,fp,-135
 8014f04:	180d883a 	mov	r6,r3
 8014f08:	000b883a 	mov	r5,zero
 8014f0c:	1009883a 	mov	r4,r2
 8014f10:	801a6700 	call	801a670 <OSSemPend>
    locks  = 1;
 8014f14:	00800044 	movi	r2,1
 8014f18:	d0a06415 	stw	r2,-32368(gp)
    lockid = id;
 8014f1c:	e0bffe17 	ldw	r2,-8(fp)
 8014f20:	d0a00615 	stw	r2,-32744(gp)
  return;
 8014f24:	00000306 	br	8014f34 <__malloc_lock+0x114>
      return;
 8014f28:	0001883a 	nop
 8014f2c:	00000106 	br	8014f34 <__malloc_lock+0x114>
    return;
 8014f30:	0001883a 	nop
}
 8014f34:	e037883a 	mov	sp,fp
 8014f38:	dfc00117 	ldw	ra,4(sp)
 8014f3c:	df000017 	ldw	fp,0(sp)
 8014f40:	dec00204 	addi	sp,sp,8
 8014f44:	f800283a 	ret

08014f48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8014f48:	defff804 	addi	sp,sp,-32
 8014f4c:	dfc00715 	stw	ra,28(sp)
 8014f50:	df000615 	stw	fp,24(sp)
 8014f54:	df000604 	addi	fp,sp,24
 8014f58:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8014f5c:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
 8014f60:	d0a06643 	ldbu	r2,-32359(gp)
 8014f64:	10803fcc 	andi	r2,r2,255
 8014f68:	10800060 	cmpeqi	r2,r2,1
 8014f6c:	10002526 	beq	r2,zero,8015004 <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
 8014f70:	0005303a 	rdctl	r2,status
 8014f74:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014f78:	e0fffe17 	ldw	r3,-8(fp)
 8014f7c:	00bfff84 	movi	r2,-2
 8014f80:	1884703a 	and	r2,r3,r2
 8014f84:	1001703a 	wrctl	status,r2
  return context;
 8014f88:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 8014f8c:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
 8014f90:	d0a06417 	ldw	r2,-32368(gp)
 8014f94:	1000061e 	bne	r2,zero,8014fb0 <__malloc_unlock+0x68>
 8014f98:	e0bfff17 	ldw	r2,-4(fp)
 8014f9c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8014fa0:	e0bffd17 	ldw	r2,-12(fp)
 8014fa4:	1001703a 	wrctl	status,r2
}
 8014fa8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
 8014fac:	00001606 	br	8015008 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 8014fb0:	d0a06417 	ldw	r2,-32368(gp)
 8014fb4:	10bfffc4 	addi	r2,r2,-1
 8014fb8:	d0a06415 	stw	r2,-32368(gp)
 8014fbc:	d0a06417 	ldw	r2,-32368(gp)
 8014fc0:	10000b1e 	bne	r2,zero,8014ff0 <__malloc_unlock+0xa8>
  {
    lockid = -1;
 8014fc4:	00bfffc4 	movi	r2,-1
 8014fc8:	d0a00615 	stw	r2,-32744(gp)
 8014fcc:	e0bfff17 	ldw	r2,-4(fp)
 8014fd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8014fd4:	e0bffc17 	ldw	r2,-16(fp)
 8014fd8:	1001703a 	wrctl	status,r2
}
 8014fdc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 8014fe0:	d0a06517 	ldw	r2,-32364(gp)
 8014fe4:	1009883a 	mov	r4,r2
 8014fe8:	801a9f80 	call	801a9f8 <OSSemPost>
 8014fec:	00000606 	br	8015008 <__malloc_unlock+0xc0>
 8014ff0:	e0bfff17 	ldw	r2,-4(fp)
 8014ff4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8014ff8:	e0bffb17 	ldw	r2,-20(fp)
 8014ffc:	1001703a 	wrctl	status,r2
}
 8015000:	00000106 	br	8015008 <__malloc_unlock+0xc0>
      return;
 8015004:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 8015008:	e037883a 	mov	sp,fp
 801500c:	dfc00117 	ldw	ra,4(sp)
 8015010:	df000017 	ldw	fp,0(sp)
 8015014:	dec00204 	addi	sp,sp,8
 8015018:	f800283a 	ret

0801501c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 801501c:	defff704 	addi	sp,sp,-36
 8015020:	dfc00815 	stw	ra,32(sp)
 8015024:	df000715 	stw	fp,28(sp)
 8015028:	df000704 	addi	fp,sp,28
 801502c:	e13ffb15 	stw	r4,-20(fp)
 8015030:	e17ffa15 	stw	r5,-24(fp)
 8015034:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015038:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 801503c:	e0bff917 	ldw	r2,-28(fp)
 8015040:	1000021e 	bne	r2,zero,801504c <OSEventNameGet+0x30>
        return (0);
 8015044:	0005883a 	mov	r2,zero
 8015048:	00003806 	br	801512c <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 801504c:	e0bffb17 	ldw	r2,-20(fp)
 8015050:	1000051e 	bne	r2,zero,8015068 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 8015054:	e0bff917 	ldw	r2,-28(fp)
 8015058:	00c00104 	movi	r3,4
 801505c:	10c00005 	stb	r3,0(r2)
        return (0);
 8015060:	0005883a 	mov	r2,zero
 8015064:	00003106 	br	801512c <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8015068:	e0bffa17 	ldw	r2,-24(fp)
 801506c:	1000051e 	bne	r2,zero,8015084 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8015070:	e0bff917 	ldw	r2,-28(fp)
 8015074:	00c00304 	movi	r3,12
 8015078:	10c00005 	stb	r3,0(r2)
        return (0);
 801507c:	0005883a 	mov	r2,zero
 8015080:	00002a06 	br	801512c <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8015084:	d0a07403 	ldbu	r2,-32304(gp)
 8015088:	10803fcc 	andi	r2,r2,255
 801508c:	10000526 	beq	r2,zero,80150a4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 8015090:	e0bff917 	ldw	r2,-28(fp)
 8015094:	00c00444 	movi	r3,17
 8015098:	10c00005 	stb	r3,0(r2)
        return (0);
 801509c:	0005883a 	mov	r2,zero
 80150a0:	00002206 	br	801512c <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
 80150a4:	e0bffb17 	ldw	r2,-20(fp)
 80150a8:	10800003 	ldbu	r2,0(r2)
 80150ac:	10803fcc 	andi	r2,r2,255
 80150b0:	10bfffc4 	addi	r2,r2,-1
 80150b4:	10800128 	cmpgeui	r2,r2,4
 80150b8:	10000526 	beq	r2,zero,80150d0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80150bc:	e0bff917 	ldw	r2,-28(fp)
 80150c0:	00c00044 	movi	r3,1
 80150c4:	10c00005 	stb	r3,0(r2)
             return (0);
 80150c8:	0005883a 	mov	r2,zero
 80150cc:	00001706 	br	801512c <OSEventNameGet+0x110>
             break;
 80150d0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 80150d4:	0005303a 	rdctl	r2,status
 80150d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80150dc:	e0fffc17 	ldw	r3,-16(fp)
 80150e0:	00bfff84 	movi	r2,-2
 80150e4:	1884703a 	and	r2,r3,r2
 80150e8:	1001703a 	wrctl	status,r2
  return context;
 80150ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80150f0:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 80150f4:	e0bffb17 	ldw	r2,-20(fp)
 80150f8:	10800384 	addi	r2,r2,14
 80150fc:	100b883a 	mov	r5,r2
 8015100:	e13ffa17 	ldw	r4,-24(fp)
 8015104:	8016acc0 	call	8016acc <OS_StrCopy>
 8015108:	e0bffec5 	stb	r2,-5(fp)
 801510c:	e0bfff17 	ldw	r2,-4(fp)
 8015110:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8015114:	e0bffd17 	ldw	r2,-12(fp)
 8015118:	1001703a 	wrctl	status,r2
}
 801511c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8015120:	e0bff917 	ldw	r2,-28(fp)
 8015124:	10000005 	stb	zero,0(r2)
    return (len);
 8015128:	e0bffec3 	ldbu	r2,-5(fp)
}
 801512c:	e037883a 	mov	sp,fp
 8015130:	dfc00117 	ldw	ra,4(sp)
 8015134:	df000017 	ldw	fp,0(sp)
 8015138:	dec00204 	addi	sp,sp,8
 801513c:	f800283a 	ret

08015140 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 8015140:	defff604 	addi	sp,sp,-40
 8015144:	dfc00915 	stw	ra,36(sp)
 8015148:	df000815 	stw	fp,32(sp)
 801514c:	df000804 	addi	fp,sp,32
 8015150:	e13ffa15 	stw	r4,-24(fp)
 8015154:	e17ff915 	stw	r5,-28(fp)
 8015158:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801515c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8015160:	e0bff817 	ldw	r2,-32(fp)
 8015164:	10004226 	beq	r2,zero,8015270 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8015168:	e0bffa17 	ldw	r2,-24(fp)
 801516c:	1000041e 	bne	r2,zero,8015180 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 8015170:	e0bff817 	ldw	r2,-32(fp)
 8015174:	00c00104 	movi	r3,4
 8015178:	10c00005 	stb	r3,0(r2)
        return;
 801517c:	00003d06 	br	8015274 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8015180:	e0bff917 	ldw	r2,-28(fp)
 8015184:	1000041e 	bne	r2,zero,8015198 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 8015188:	e0bff817 	ldw	r2,-32(fp)
 801518c:	00c00304 	movi	r3,12
 8015190:	10c00005 	stb	r3,0(r2)
        return;
 8015194:	00003706 	br	8015274 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8015198:	d0a07403 	ldbu	r2,-32304(gp)
 801519c:	10803fcc 	andi	r2,r2,255
 80151a0:	10000426 	beq	r2,zero,80151b4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 80151a4:	e0bff817 	ldw	r2,-32(fp)
 80151a8:	00c00484 	movi	r3,18
 80151ac:	10c00005 	stb	r3,0(r2)
        return;
 80151b0:	00003006 	br	8015274 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
 80151b4:	e0bffa17 	ldw	r2,-24(fp)
 80151b8:	10800003 	ldbu	r2,0(r2)
 80151bc:	10803fcc 	andi	r2,r2,255
 80151c0:	10bfffc4 	addi	r2,r2,-1
 80151c4:	10800128 	cmpgeui	r2,r2,4
 80151c8:	10000426 	beq	r2,zero,80151dc <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80151cc:	e0bff817 	ldw	r2,-32(fp)
 80151d0:	00c00044 	movi	r3,1
 80151d4:	10c00005 	stb	r3,0(r2)
             return;
 80151d8:	00002606 	br	8015274 <OSEventNameSet+0x134>
             break;
 80151dc:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 80151e0:	0005303a 	rdctl	r2,status
 80151e4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80151e8:	e0fffd17 	ldw	r3,-12(fp)
 80151ec:	00bfff84 	movi	r2,-2
 80151f0:	1884703a 	and	r2,r3,r2
 80151f4:	1001703a 	wrctl	status,r2
  return context;
 80151f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80151fc:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 8015200:	e13ff917 	ldw	r4,-28(fp)
 8015204:	8016b400 	call	8016b40 <OS_StrLen>
 8015208:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 801520c:	e0bffec3 	ldbu	r2,-5(fp)
 8015210:	10800830 	cmpltui	r2,r2,32
 8015214:	1000091e 	bne	r2,zero,801523c <OSEventNameSet+0xfc>
 8015218:	e0bfff17 	ldw	r2,-4(fp)
 801521c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015220:	e0bffc17 	ldw	r2,-16(fp)
 8015224:	1001703a 	wrctl	status,r2
}
 8015228:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 801522c:	e0bff817 	ldw	r2,-32(fp)
 8015230:	00c002c4 	movi	r3,11
 8015234:	10c00005 	stb	r3,0(r2)
        return;
 8015238:	00000e06 	br	8015274 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 801523c:	e0bffa17 	ldw	r2,-24(fp)
 8015240:	10800384 	addi	r2,r2,14
 8015244:	e17ff917 	ldw	r5,-28(fp)
 8015248:	1009883a 	mov	r4,r2
 801524c:	8016acc0 	call	8016acc <OS_StrCopy>
 8015250:	e0bfff17 	ldw	r2,-4(fp)
 8015254:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015258:	e0bffb17 	ldw	r2,-20(fp)
 801525c:	1001703a 	wrctl	status,r2
}
 8015260:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8015264:	e0bff817 	ldw	r2,-32(fp)
 8015268:	10000005 	stb	zero,0(r2)
 801526c:	00000106 	br	8015274 <OSEventNameSet+0x134>
        return;
 8015270:	0001883a 	nop
}
 8015274:	e037883a 	mov	sp,fp
 8015278:	dfc00117 	ldw	ra,4(sp)
 801527c:	df000017 	ldw	fp,0(sp)
 8015280:	dec00204 	addi	sp,sp,8
 8015284:	f800283a 	ret

08015288 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 8015288:	deffed04 	addi	sp,sp,-76
 801528c:	dfc01215 	stw	ra,72(sp)
 8015290:	df001115 	stw	fp,68(sp)
 8015294:	df001104 	addi	fp,sp,68
 8015298:	e13ff215 	stw	r4,-56(fp)
 801529c:	e17ff115 	stw	r5,-60(fp)
 80152a0:	e1bff015 	stw	r6,-64(fp)
 80152a4:	3805883a 	mov	r2,r7
 80152a8:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 80152ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 80152b0:	e0800217 	ldw	r2,8(fp)
 80152b4:	1000021e 	bne	r2,zero,80152c0 <OSEventPendMulti+0x38>
        return (0);
 80152b8:	0005883a 	mov	r2,zero
 80152bc:	00017b06 	br	80158ac <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 80152c0:	e0bff217 	ldw	r2,-56(fp)
 80152c4:	1000051e 	bne	r2,zero,80152dc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 80152c8:	e0800217 	ldw	r2,8(fp)
 80152cc:	00c00104 	movi	r3,4
 80152d0:	10c00005 	stb	r3,0(r2)
        return (0);
 80152d4:	0005883a 	mov	r2,zero
 80152d8:	00017406 	br	80158ac <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 80152dc:	e0bff117 	ldw	r2,-60(fp)
 80152e0:	1000051e 	bne	r2,zero,80152f8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 80152e4:	e0800217 	ldw	r2,8(fp)
 80152e8:	00c00104 	movi	r3,4
 80152ec:	10c00005 	stb	r3,0(r2)
        return (0);
 80152f0:	0005883a 	mov	r2,zero
 80152f4:	00016d06 	br	80158ac <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 80152f8:	e0bff017 	ldw	r2,-64(fp)
 80152fc:	1000051e 	bne	r2,zero,8015314 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 8015300:	e0800217 	ldw	r2,8(fp)
 8015304:	00c00104 	movi	r3,4
 8015308:	10c00005 	stb	r3,0(r2)
        return (0);
 801530c:	0005883a 	mov	r2,zero
 8015310:	00016606 	br	80158ac <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 8015314:	e0bff117 	ldw	r2,-60(fp)
 8015318:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 801531c:	e0bff217 	ldw	r2,-56(fp)
 8015320:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
 8015324:	e0bfff17 	ldw	r2,-4(fp)
 8015328:	10800017 	ldw	r2,0(r2)
 801532c:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
 8015330:	00001b06 	br	80153a0 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 8015334:	e0bffe17 	ldw	r2,-8(fp)
 8015338:	10800003 	ldbu	r2,0(r2)
 801533c:	10803fcc 	andi	r2,r2,255
 8015340:	10c000e0 	cmpeqi	r3,r2,3
 8015344:	18000b1e 	bne	r3,zero,8015374 <OSEventPendMulti+0xec>
 8015348:	10c00108 	cmpgei	r3,r2,4
 801534c:	1800041e 	bne	r3,zero,8015360 <OSEventPendMulti+0xd8>
 8015350:	10c00060 	cmpeqi	r3,r2,1
 8015354:	1800091e 	bne	r3,zero,801537c <OSEventPendMulti+0xf4>
 8015358:	108000a0 	cmpeqi	r2,r2,2
 801535c:	1000091e 	bne	r2,zero,8015384 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 8015360:	e0800217 	ldw	r2,8(fp)
 8015364:	00c00044 	movi	r3,1
 8015368:	10c00005 	stb	r3,0(r2)
                 return (0);
 801536c:	0005883a 	mov	r2,zero
 8015370:	00014e06 	br	80158ac <OSEventPendMulti+0x624>
                 break;
 8015374:	0001883a 	nop
 8015378:	00000306 	br	8015388 <OSEventPendMulti+0x100>
                 break;
 801537c:	0001883a 	nop
 8015380:	00000106 	br	8015388 <OSEventPendMulti+0x100>
                 break;
 8015384:	0001883a 	nop
        }
        pevents++;
 8015388:	e0bfff17 	ldw	r2,-4(fp)
 801538c:	10800104 	addi	r2,r2,4
 8015390:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 8015394:	e0bfff17 	ldw	r2,-4(fp)
 8015398:	10800017 	ldw	r2,0(r2)
 801539c:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
 80153a0:	e0bffe17 	ldw	r2,-8(fp)
 80153a4:	103fe31e 	bne	r2,zero,8015334 <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 80153a8:	d0a07403 	ldbu	r2,-32304(gp)
 80153ac:	10803fcc 	andi	r2,r2,255
 80153b0:	10000526 	beq	r2,zero,80153c8 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 80153b4:	e0800217 	ldw	r2,8(fp)
 80153b8:	00c00084 	movi	r3,2
 80153bc:	10c00005 	stb	r3,0(r2)
        return (0);
 80153c0:	0005883a 	mov	r2,zero
 80153c4:	00013906 	br	80158ac <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 80153c8:	d0a06603 	ldbu	r2,-32360(gp)
 80153cc:	10803fcc 	andi	r2,r2,255
 80153d0:	10000526 	beq	r2,zero,80153e8 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 80153d4:	e0800217 	ldw	r2,8(fp)
 80153d8:	00c00344 	movi	r3,13
 80153dc:	10c00005 	stb	r3,0(r2)
        return (0);
 80153e0:	0005883a 	mov	r2,zero
 80153e4:	00013106 	br	80158ac <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
 80153e8:	0005303a 	rdctl	r2,status
 80153ec:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80153f0:	e0fff917 	ldw	r3,-28(fp)
 80153f4:	00bfff84 	movi	r2,-2
 80153f8:	1884703a 	and	r2,r3,r2
 80153fc:	1001703a 	wrctl	status,r2
  return context;
 8015400:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8015404:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
 8015408:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
 801540c:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
 8015410:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
 8015414:	e0bff217 	ldw	r2,-56(fp)
 8015418:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
 801541c:	e0bfff17 	ldw	r2,-4(fp)
 8015420:	10800017 	ldw	r2,0(r2)
 8015424:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 8015428:	00008406 	br	801563c <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
 801542c:	e0bffe17 	ldw	r2,-8(fp)
 8015430:	10800003 	ldbu	r2,0(r2)
 8015434:	10803fcc 	andi	r2,r2,255
 8015438:	10c000e0 	cmpeqi	r3,r2,3
 801543c:	1800071e 	bne	r3,zero,801545c <OSEventPendMulti+0x1d4>
 8015440:	10c00108 	cmpgei	r3,r2,4
 8015444:	18006b1e 	bne	r3,zero,80155f4 <OSEventPendMulti+0x36c>
 8015448:	10c00060 	cmpeqi	r3,r2,1
 801544c:	1800201e 	bne	r3,zero,80154d0 <OSEventPendMulti+0x248>
 8015450:	108000a0 	cmpeqi	r2,r2,2
 8015454:	1000381e 	bne	r2,zero,8015538 <OSEventPendMulti+0x2b0>
 8015458:	00006606 	br	80155f4 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 801545c:	e0bffe17 	ldw	r2,-8(fp)
 8015460:	1080020b 	ldhu	r2,8(r2)
 8015464:	10bfffcc 	andi	r2,r2,65535
 8015468:	10001526 	beq	r2,zero,80154c0 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 801546c:	e0bffe17 	ldw	r2,-8(fp)
 8015470:	1080020b 	ldhu	r2,8(r2)
 8015474:	10bfffc4 	addi	r2,r2,-1
 8015478:	1007883a 	mov	r3,r2
 801547c:	e0bffe17 	ldw	r2,-8(fp)
 8015480:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 8015484:	e0bff117 	ldw	r2,-60(fp)
 8015488:	10c00104 	addi	r3,r2,4
 801548c:	e0fff115 	stw	r3,-60(fp)
 8015490:	e0fffe17 	ldw	r3,-8(fp)
 8015494:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 8015498:	00800044 	movi	r2,1
 801549c:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 80154a0:	e0bff017 	ldw	r2,-64(fp)
 80154a4:	10c00104 	addi	r3,r2,4
 80154a8:	e0fff015 	stw	r3,-64(fp)
 80154ac:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 80154b0:	e0bffd0b 	ldhu	r2,-12(fp)
 80154b4:	10800044 	addi	r2,r2,1
 80154b8:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 80154bc:	00005906 	br	8015624 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 80154c0:	e0bffcc3 	ldbu	r2,-13(fp)
 80154c4:	10800054 	ori	r2,r2,1
 80154c8:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 80154cc:	00005506 	br	8015624 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 80154d0:	e0bffe17 	ldw	r2,-8(fp)
 80154d4:	10800117 	ldw	r2,4(r2)
 80154d8:	10001326 	beq	r2,zero,8015528 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 80154dc:	e0bff017 	ldw	r2,-64(fp)
 80154e0:	10c00104 	addi	r3,r2,4
 80154e4:	e0fff015 	stw	r3,-64(fp)
 80154e8:	e0fffe17 	ldw	r3,-8(fp)
 80154ec:	18c00117 	ldw	r3,4(r3)
 80154f0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 80154f4:	e0bffe17 	ldw	r2,-8(fp)
 80154f8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 80154fc:	e0bff117 	ldw	r2,-60(fp)
 8015500:	10c00104 	addi	r3,r2,4
 8015504:	e0fff115 	stw	r3,-60(fp)
 8015508:	e0fffe17 	ldw	r3,-8(fp)
 801550c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 8015510:	00800044 	movi	r2,1
 8015514:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
 8015518:	e0bffd0b 	ldhu	r2,-12(fp)
 801551c:	10800044 	addi	r2,r2,1
 8015520:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 8015524:	00003f06 	br	8015624 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 8015528:	e0bffcc3 	ldbu	r2,-13(fp)
 801552c:	10800094 	ori	r2,r2,2
 8015530:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 8015534:	00003b06 	br	8015624 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 8015538:	e0bffe17 	ldw	r2,-8(fp)
 801553c:	10800117 	ldw	r2,4(r2)
 8015540:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 8015544:	e0bffa17 	ldw	r2,-24(fp)
 8015548:	1080058b 	ldhu	r2,22(r2)
 801554c:	10bfffcc 	andi	r2,r2,65535
 8015550:	10002426 	beq	r2,zero,80155e4 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 8015554:	e0bffa17 	ldw	r2,-24(fp)
 8015558:	10c00417 	ldw	r3,16(r2)
 801555c:	19000104 	addi	r4,r3,4
 8015560:	e0bffa17 	ldw	r2,-24(fp)
 8015564:	11000415 	stw	r4,16(r2)
 8015568:	e0bff017 	ldw	r2,-64(fp)
 801556c:	11000104 	addi	r4,r2,4
 8015570:	e13ff015 	stw	r4,-64(fp)
 8015574:	18c00017 	ldw	r3,0(r3)
 8015578:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 801557c:	e0bffa17 	ldw	r2,-24(fp)
 8015580:	10c00417 	ldw	r3,16(r2)
 8015584:	e0bffa17 	ldw	r2,-24(fp)
 8015588:	10800217 	ldw	r2,8(r2)
 801558c:	1880041e 	bne	r3,r2,80155a0 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 8015590:	e0bffa17 	ldw	r2,-24(fp)
 8015594:	10c00117 	ldw	r3,4(r2)
 8015598:	e0bffa17 	ldw	r2,-24(fp)
 801559c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 80155a0:	e0bffa17 	ldw	r2,-24(fp)
 80155a4:	1080058b 	ldhu	r2,22(r2)
 80155a8:	10bfffc4 	addi	r2,r2,-1
 80155ac:	1007883a 	mov	r3,r2
 80155b0:	e0bffa17 	ldw	r2,-24(fp)
 80155b4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 80155b8:	e0bff117 	ldw	r2,-60(fp)
 80155bc:	10c00104 	addi	r3,r2,4
 80155c0:	e0fff115 	stw	r3,-60(fp)
 80155c4:	e0fffe17 	ldw	r3,-8(fp)
 80155c8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 80155cc:	00800044 	movi	r2,1
 80155d0:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
 80155d4:	e0bffd0b 	ldhu	r2,-12(fp)
 80155d8:	10800044 	addi	r2,r2,1
 80155dc:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 80155e0:	00001006 	br	8015624 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 80155e4:	e0bffcc3 	ldbu	r2,-13(fp)
 80155e8:	10800114 	ori	r2,r2,4
 80155ec:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 80155f0:	00000c06 	br	8015624 <OSEventPendMulti+0x39c>
 80155f4:	e0bffb17 	ldw	r2,-20(fp)
 80155f8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 80155fc:	e0bff817 	ldw	r2,-32(fp)
 8015600:	1001703a 	wrctl	status,r2
}
 8015604:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 8015608:	e0bff117 	ldw	r2,-60(fp)
 801560c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 8015610:	e0800217 	ldw	r2,8(fp)
 8015614:	00c00044 	movi	r3,1
 8015618:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 801561c:	e0bffd0b 	ldhu	r2,-12(fp)
 8015620:	0000a206 	br	80158ac <OSEventPendMulti+0x624>
        }
        pevents++;
 8015624:	e0bfff17 	ldw	r2,-4(fp)
 8015628:	10800104 	addi	r2,r2,4
 801562c:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 8015630:	e0bfff17 	ldw	r2,-4(fp)
 8015634:	10800017 	ldw	r2,0(r2)
 8015638:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 801563c:	e0bffe17 	ldw	r2,-8(fp)
 8015640:	103f7a1e 	bne	r2,zero,801542c <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 8015644:	e0bffdc3 	ldbu	r2,-9(fp)
 8015648:	10800058 	cmpnei	r2,r2,1
 801564c:	10000b1e 	bne	r2,zero,801567c <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 8015650:	e0bff117 	ldw	r2,-60(fp)
 8015654:	10000015 	stw	zero,0(r2)
 8015658:	e0bffb17 	ldw	r2,-20(fp)
 801565c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8015660:	e0bff717 	ldw	r2,-36(fp)
 8015664:	1001703a 	wrctl	status,r2
}
 8015668:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 801566c:	e0800217 	ldw	r2,8(fp)
 8015670:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 8015674:	e0bffd0b 	ldhu	r2,-12(fp)
 8015678:	00008c06 	br	80158ac <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 801567c:	d0a07517 	ldw	r2,-32300(gp)
 8015680:	10800c03 	ldbu	r2,48(r2)
 8015684:	e0fffcc3 	ldbu	r3,-13(fp)
 8015688:	1884b03a 	or	r2,r3,r2
 801568c:	1009883a 	mov	r4,r2
 8015690:	d0a07517 	ldw	r2,-32300(gp)
 8015694:	00ffe004 	movi	r3,-128
 8015698:	20c6b03a 	or	r3,r4,r3
 801569c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80156a0:	d0a07517 	ldw	r2,-32300(gp)
 80156a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 80156a8:	d0a07517 	ldw	r2,-32300(gp)
 80156ac:	e0ffef0b 	ldhu	r3,-68(fp)
 80156b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 80156b4:	e13ff217 	ldw	r4,-56(fp)
 80156b8:	80161f00 	call	80161f0 <OS_EventTaskWaitMulti>
 80156bc:	e0bffb17 	ldw	r2,-20(fp)
 80156c0:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 80156c4:	e0bff517 	ldw	r2,-44(fp)
 80156c8:	1001703a 	wrctl	status,r2
}
 80156cc:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 80156d0:	80169940 	call	8016994 <OS_Sched>
  NIOS2_READ_STATUS (context);
 80156d4:	0005303a 	rdctl	r2,status
 80156d8:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80156dc:	e0fff617 	ldw	r3,-40(fp)
 80156e0:	00bfff84 	movi	r2,-2
 80156e4:	1884703a 	and	r2,r3,r2
 80156e8:	1001703a 	wrctl	status,r2
  return context;
 80156ec:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
 80156f0:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 80156f4:	d0a07517 	ldw	r2,-32300(gp)
 80156f8:	10800c43 	ldbu	r2,49(r2)
 80156fc:	10803fcc 	andi	r2,r2,255
 8015700:	10000226 	beq	r2,zero,801570c <OSEventPendMulti+0x484>
 8015704:	10800098 	cmpnei	r2,r2,2
 8015708:	1000181e 	bne	r2,zero,801576c <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 801570c:	d0a07517 	ldw	r2,-32300(gp)
 8015710:	10800717 	ldw	r2,28(r2)
 8015714:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 8015718:	e0bffe17 	ldw	r2,-8(fp)
 801571c:	10000b26 	beq	r2,zero,801574c <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 8015720:	e0bff117 	ldw	r2,-60(fp)
 8015724:	10c00104 	addi	r3,r2,4
 8015728:	e0fff115 	stw	r3,-60(fp)
 801572c:	e0fffe17 	ldw	r3,-8(fp)
 8015730:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 8015734:	e0bff117 	ldw	r2,-60(fp)
 8015738:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 801573c:	e0bffd0b 	ldhu	r2,-12(fp)
 8015740:	10800044 	addi	r2,r2,1
 8015744:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 8015748:	00000d06 	br	8015780 <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 801574c:	d0a07517 	ldw	r2,-32300(gp)
 8015750:	00c00044 	movi	r3,1
 8015754:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 8015758:	d0a07517 	ldw	r2,-32300(gp)
 801575c:	e17ff217 	ldw	r5,-56(fp)
 8015760:	1009883a 	mov	r4,r2
 8015764:	80163e80 	call	80163e8 <OS_EventTaskRemoveMulti>
			 break;
 8015768:	00000506 	br	8015780 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 801576c:	d0a07517 	ldw	r2,-32300(gp)
 8015770:	e17ff217 	ldw	r5,-56(fp)
 8015774:	1009883a 	mov	r4,r2
 8015778:	80163e80 	call	80163e8 <OS_EventTaskRemoveMulti>
             break;
 801577c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 8015780:	d0a07517 	ldw	r2,-32300(gp)
 8015784:	10800c43 	ldbu	r2,49(r2)
 8015788:	10803fcc 	andi	r2,r2,255
 801578c:	10000326 	beq	r2,zero,801579c <OSEventPendMulti+0x514>
 8015790:	108000a0 	cmpeqi	r2,r2,2
 8015794:	1000251e 	bne	r2,zero,801582c <OSEventPendMulti+0x5a4>
 8015798:	00002c06 	br	801584c <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 801579c:	e0bffe17 	ldw	r2,-8(fp)
 80157a0:	10800003 	ldbu	r2,0(r2)
 80157a4:	10803fcc 	andi	r2,r2,255
 80157a8:	10c000c8 	cmpgei	r3,r2,3
 80157ac:	1800021e 	bne	r3,zero,80157b8 <OSEventPendMulti+0x530>
 80157b0:	00800816 	blt	zero,r2,80157d4 <OSEventPendMulti+0x54c>
 80157b4:	00000e06 	br	80157f0 <OSEventPendMulti+0x568>
 80157b8:	108000d8 	cmpnei	r2,r2,3
 80157bc:	10000c1e 	bne	r2,zero,80157f0 <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 80157c0:	e0bff017 	ldw	r2,-64(fp)
 80157c4:	10c00104 	addi	r3,r2,4
 80157c8:	e0fff015 	stw	r3,-64(fp)
 80157cc:	10000015 	stw	zero,0(r2)
                      break;
 80157d0:	00001306 	br	8015820 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 80157d4:	d0e07517 	ldw	r3,-32300(gp)
 80157d8:	e0bff017 	ldw	r2,-64(fp)
 80157dc:	11000104 	addi	r4,r2,4
 80157e0:	e13ff015 	stw	r4,-64(fp)
 80157e4:	18c00917 	ldw	r3,36(r3)
 80157e8:	10c00015 	stw	r3,0(r2)
                      break;
 80157ec:	00000c06 	br	8015820 <OSEventPendMulti+0x598>
 80157f0:	e0bffb17 	ldw	r2,-20(fp)
 80157f4:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 80157f8:	e0bff417 	ldw	r2,-48(fp)
 80157fc:	1001703a 	wrctl	status,r2
}
 8015800:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 8015804:	e0bff117 	ldw	r2,-60(fp)
 8015808:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 801580c:	e0800217 	ldw	r2,8(fp)
 8015810:	00c00044 	movi	r3,1
 8015814:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 8015818:	e0bffd0b 	ldhu	r2,-12(fp)
 801581c:	00002306 	br	80158ac <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
 8015820:	e0800217 	ldw	r2,8(fp)
 8015824:	10000005 	stb	zero,0(r2)
             break;
 8015828:	00001006 	br	801586c <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 801582c:	e0bff017 	ldw	r2,-64(fp)
 8015830:	10c00104 	addi	r3,r2,4
 8015834:	e0fff015 	stw	r3,-64(fp)
 8015838:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 801583c:	e0800217 	ldw	r2,8(fp)
 8015840:	00c00384 	movi	r3,14
 8015844:	10c00005 	stb	r3,0(r2)
             break;
 8015848:	00000806 	br	801586c <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 801584c:	e0bff017 	ldw	r2,-64(fp)
 8015850:	10c00104 	addi	r3,r2,4
 8015854:	e0fff015 	stw	r3,-64(fp)
 8015858:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 801585c:	e0800217 	ldw	r2,8(fp)
 8015860:	00c00284 	movi	r3,10
 8015864:	10c00005 	stb	r3,0(r2)
             break;
 8015868:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 801586c:	d0a07517 	ldw	r2,-32300(gp)
 8015870:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 8015874:	d0a07517 	ldw	r2,-32300(gp)
 8015878:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 801587c:	d0a07517 	ldw	r2,-32300(gp)
 8015880:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8015884:	d0a07517 	ldw	r2,-32300(gp)
 8015888:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 801588c:	d0a07517 	ldw	r2,-32300(gp)
 8015890:	10000915 	stw	zero,36(r2)
 8015894:	e0bffb17 	ldw	r2,-20(fp)
 8015898:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
 801589c:	e0bff317 	ldw	r2,-52(fp)
 80158a0:	1001703a 	wrctl	status,r2
}
 80158a4:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 80158a8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80158ac:	e037883a 	mov	sp,fp
 80158b0:	dfc00117 	ldw	ra,4(sp)
 80158b4:	df000017 	ldw	fp,0(sp)
 80158b8:	dec00204 	addi	sp,sp,8
 80158bc:	f800283a 	ret

080158c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 80158c0:	defffe04 	addi	sp,sp,-8
 80158c4:	dfc00115 	stw	ra,4(sp)
 80158c8:	df000015 	stw	fp,0(sp)
 80158cc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 80158d0:	803fe400 	call	803fe40 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 80158d4:	80166300 	call	8016630 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 80158d8:	80166780 	call	8016678 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 80158dc:	80167ec0 	call	80167ec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 80158e0:	80165500 	call	8016550 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 80158e4:	80187440 	call	8018744 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 80158e8:	80190680 	call	8019068 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 80158ec:	801a1e80 	call	801a1e8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 80158f0:	80166e40 	call	80166e4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 80158f4:	80167680 	call	8016768 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 80158f8:	803fe600 	call	803fe60 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 80158fc:	80170680 	call	8017068 <OSDebugInit>
#endif
}
 8015900:	0001883a 	nop
 8015904:	e037883a 	mov	sp,fp
 8015908:	dfc00117 	ldw	ra,4(sp)
 801590c:	df000017 	ldw	fp,0(sp)
 8015910:	dec00204 	addi	sp,sp,8
 8015914:	f800283a 	ret

08015918 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8015918:	deffff04 	addi	sp,sp,-4
 801591c:	df000015 	stw	fp,0(sp)
 8015920:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 8015924:	d0a06643 	ldbu	r2,-32359(gp)
 8015928:	10803fcc 	andi	r2,r2,255
 801592c:	10800058 	cmpnei	r2,r2,1
 8015930:	1000071e 	bne	r2,zero,8015950 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 8015934:	d0a07403 	ldbu	r2,-32304(gp)
 8015938:	10803fcc 	andi	r2,r2,255
 801593c:	10803fe0 	cmpeqi	r2,r2,255
 8015940:	1000031e 	bne	r2,zero,8015950 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8015944:	d0a07403 	ldbu	r2,-32304(gp)
 8015948:	10800044 	addi	r2,r2,1
 801594c:	d0a07405 	stb	r2,-32304(gp)
        }
    }
}
 8015950:	0001883a 	nop
 8015954:	e037883a 	mov	sp,fp
 8015958:	df000017 	ldw	fp,0(sp)
 801595c:	dec00104 	addi	sp,sp,4
 8015960:	f800283a 	ret

08015964 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8015964:	defffb04 	addi	sp,sp,-20
 8015968:	dfc00415 	stw	ra,16(sp)
 801596c:	df000315 	stw	fp,12(sp)
 8015970:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8015974:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 8015978:	d0a06643 	ldbu	r2,-32359(gp)
 801597c:	10803fcc 	andi	r2,r2,255
 8015980:	10800058 	cmpnei	r2,r2,1
 8015984:	10002e1e 	bne	r2,zero,8015a40 <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
 8015988:	0005303a 	rdctl	r2,status
 801598c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015990:	e0fffe17 	ldw	r3,-8(fp)
 8015994:	00bfff84 	movi	r2,-2
 8015998:	1884703a 	and	r2,r3,r2
 801599c:	1001703a 	wrctl	status,r2
  return context;
 80159a0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 80159a4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 80159a8:	d0a07403 	ldbu	r2,-32304(gp)
 80159ac:	10803fcc 	andi	r2,r2,255
 80159b0:	10000326 	beq	r2,zero,80159c0 <OSIntExit+0x5c>
            OSIntNesting--;
 80159b4:	d0a07403 	ldbu	r2,-32304(gp)
 80159b8:	10bfffc4 	addi	r2,r2,-1
 80159bc:	d0a07405 	stb	r2,-32304(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 80159c0:	d0a07403 	ldbu	r2,-32304(gp)
 80159c4:	10803fcc 	andi	r2,r2,255
 80159c8:	1000181e 	bne	r2,zero,8015a2c <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 80159cc:	d0a06603 	ldbu	r2,-32360(gp)
 80159d0:	10803fcc 	andi	r2,r2,255
 80159d4:	1000151e 	bne	r2,zero,8015a2c <OSIntExit+0xc8>
                OS_SchedNew();
 80159d8:	8016a600 	call	8016a60 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 80159dc:	d0e06803 	ldbu	r3,-32352(gp)
 80159e0:	d0a06843 	ldbu	r2,-32351(gp)
 80159e4:	18c03fcc 	andi	r3,r3,255
 80159e8:	10803fcc 	andi	r2,r2,255
 80159ec:	18800f26 	beq	r3,r2,8015a2c <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 80159f0:	d0a06803 	ldbu	r2,-32352(gp)
 80159f4:	10803fcc 	andi	r2,r2,255
 80159f8:	100690ba 	slli	r3,r2,2
 80159fc:	008201b4 	movhi	r2,2054
 8015a00:	1885883a 	add	r2,r3,r2
 8015a04:	10bc0017 	ldw	r2,-4096(r2)
 8015a08:	d0a07015 	stw	r2,-32320(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8015a0c:	d0a07017 	ldw	r2,-32320(gp)
 8015a10:	10c00e17 	ldw	r3,56(r2)
 8015a14:	18c00044 	addi	r3,r3,1
 8015a18:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8015a1c:	d0a06b17 	ldw	r2,-32340(gp)
 8015a20:	10800044 	addi	r2,r2,1
 8015a24:	d0a06b15 	stw	r2,-32340(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8015a28:	803fb700 	call	803fb70 <OSCtxSw>
 8015a2c:	e0bfff17 	ldw	r2,-4(fp)
 8015a30:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8015a34:	e0bffd17 	ldw	r2,-12(fp)
 8015a38:	1001703a 	wrctl	status,r2
}
 8015a3c:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 8015a40:	0001883a 	nop
 8015a44:	e037883a 	mov	sp,fp
 8015a48:	dfc00117 	ldw	ra,4(sp)
 8015a4c:	df000017 	ldw	fp,0(sp)
 8015a50:	dec00204 	addi	sp,sp,8
 8015a54:	f800283a 	ret

08015a58 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 8015a58:	defffc04 	addi	sp,sp,-16
 8015a5c:	df000315 	stw	fp,12(sp)
 8015a60:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015a64:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8015a68:	d0a06643 	ldbu	r2,-32359(gp)
 8015a6c:	10803fcc 	andi	r2,r2,255
 8015a70:	10800058 	cmpnei	r2,r2,1
 8015a74:	1000171e 	bne	r2,zero,8015ad4 <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
 8015a78:	0005303a 	rdctl	r2,status
 8015a7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a80:	e0fffe17 	ldw	r3,-8(fp)
 8015a84:	00bfff84 	movi	r2,-2
 8015a88:	1884703a 	and	r2,r3,r2
 8015a8c:	1001703a 	wrctl	status,r2
  return context;
 8015a90:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 8015a94:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 8015a98:	d0a07403 	ldbu	r2,-32304(gp)
 8015a9c:	10803fcc 	andi	r2,r2,255
 8015aa0:	1000071e 	bne	r2,zero,8015ac0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8015aa4:	d0a06603 	ldbu	r2,-32360(gp)
 8015aa8:	10803fcc 	andi	r2,r2,255
 8015aac:	10803fe0 	cmpeqi	r2,r2,255
 8015ab0:	1000031e 	bne	r2,zero,8015ac0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8015ab4:	d0a06603 	ldbu	r2,-32360(gp)
 8015ab8:	10800044 	addi	r2,r2,1
 8015abc:	d0a06605 	stb	r2,-32360(gp)
 8015ac0:	e0bfff17 	ldw	r2,-4(fp)
 8015ac4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8015ac8:	e0bffd17 	ldw	r2,-12(fp)
 8015acc:	1001703a 	wrctl	status,r2
}
 8015ad0:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 8015ad4:	0001883a 	nop
 8015ad8:	e037883a 	mov	sp,fp
 8015adc:	df000017 	ldw	fp,0(sp)
 8015ae0:	dec00104 	addi	sp,sp,4
 8015ae4:	f800283a 	ret

08015ae8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 8015ae8:	defff804 	addi	sp,sp,-32
 8015aec:	dfc00715 	stw	ra,28(sp)
 8015af0:	df000615 	stw	fp,24(sp)
 8015af4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8015af8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8015afc:	d0a06643 	ldbu	r2,-32359(gp)
 8015b00:	10803fcc 	andi	r2,r2,255
 8015b04:	10800058 	cmpnei	r2,r2,1
 8015b08:	10002a1e 	bne	r2,zero,8015bb4 <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
 8015b0c:	0005303a 	rdctl	r2,status
 8015b10:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015b14:	e0fffe17 	ldw	r3,-8(fp)
 8015b18:	00bfff84 	movi	r2,-2
 8015b1c:	1884703a 	and	r2,r3,r2
 8015b20:	1001703a 	wrctl	status,r2
  return context;
 8015b24:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 8015b28:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 8015b2c:	d0a06603 	ldbu	r2,-32360(gp)
 8015b30:	10803fcc 	andi	r2,r2,255
 8015b34:	10001a26 	beq	r2,zero,8015ba0 <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 8015b38:	d0a06603 	ldbu	r2,-32360(gp)
 8015b3c:	10bfffc4 	addi	r2,r2,-1
 8015b40:	d0a06605 	stb	r2,-32360(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 8015b44:	d0a06603 	ldbu	r2,-32360(gp)
 8015b48:	10803fcc 	andi	r2,r2,255
 8015b4c:	10000f1e 	bne	r2,zero,8015b8c <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 8015b50:	d0a07403 	ldbu	r2,-32304(gp)
 8015b54:	10803fcc 	andi	r2,r2,255
 8015b58:	1000071e 	bne	r2,zero,8015b78 <OSSchedUnlock+0x90>
 8015b5c:	e0bfff17 	ldw	r2,-4(fp)
 8015b60:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8015b64:	e0bffd17 	ldw	r2,-12(fp)
 8015b68:	1001703a 	wrctl	status,r2
}
 8015b6c:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 8015b70:	80169940 	call	8016994 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8015b74:	00000f06 	br	8015bb4 <OSSchedUnlock+0xcc>
 8015b78:	e0bfff17 	ldw	r2,-4(fp)
 8015b7c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015b80:	e0bffc17 	ldw	r2,-16(fp)
 8015b84:	1001703a 	wrctl	status,r2
}
 8015b88:	00000a06 	br	8015bb4 <OSSchedUnlock+0xcc>
 8015b8c:	e0bfff17 	ldw	r2,-4(fp)
 8015b90:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015b94:	e0bffb17 	ldw	r2,-20(fp)
 8015b98:	1001703a 	wrctl	status,r2
}
 8015b9c:	00000506 	br	8015bb4 <OSSchedUnlock+0xcc>
 8015ba0:	e0bfff17 	ldw	r2,-4(fp)
 8015ba4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8015ba8:	e0bffa17 	ldw	r2,-24(fp)
 8015bac:	1001703a 	wrctl	status,r2
}
 8015bb0:	0001883a 	nop
 8015bb4:	0001883a 	nop
 8015bb8:	e037883a 	mov	sp,fp
 8015bbc:	dfc00117 	ldw	ra,4(sp)
 8015bc0:	df000017 	ldw	fp,0(sp)
 8015bc4:	dec00204 	addi	sp,sp,8
 8015bc8:	f800283a 	ret

08015bcc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8015bcc:	defffe04 	addi	sp,sp,-8
 8015bd0:	dfc00115 	stw	ra,4(sp)
 8015bd4:	df000015 	stw	fp,0(sp)
 8015bd8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 8015bdc:	d0a06643 	ldbu	r2,-32359(gp)
 8015be0:	10803fcc 	andi	r2,r2,255
 8015be4:	10000d1e 	bne	r2,zero,8015c1c <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8015be8:	8016a600 	call	8016a60 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8015bec:	d0a06803 	ldbu	r2,-32352(gp)
 8015bf0:	d0a06845 	stb	r2,-32351(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8015bf4:	d0a06803 	ldbu	r2,-32352(gp)
 8015bf8:	10803fcc 	andi	r2,r2,255
 8015bfc:	100690ba 	slli	r3,r2,2
 8015c00:	008201b4 	movhi	r2,2054
 8015c04:	1885883a 	add	r2,r3,r2
 8015c08:	10bc0017 	ldw	r2,-4096(r2)
 8015c0c:	d0a07015 	stw	r2,-32320(gp)
        OSTCBCur      = OSTCBHighRdy;
 8015c10:	d0a07017 	ldw	r2,-32320(gp)
 8015c14:	d0a07515 	stw	r2,-32300(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8015c18:	803fbfc0 	call	803fbfc <OSStartHighRdy>
    }
}
 8015c1c:	0001883a 	nop
 8015c20:	e037883a 	mov	sp,fp
 8015c24:	dfc00117 	ldw	ra,4(sp)
 8015c28:	df000017 	ldw	fp,0(sp)
 8015c2c:	dec00204 	addi	sp,sp,8
 8015c30:	f800283a 	ret

08015c34 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 8015c34:	defff904 	addi	sp,sp,-28
 8015c38:	dfc00615 	stw	ra,24(sp)
 8015c3c:	df000515 	stw	fp,20(sp)
 8015c40:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015c44:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 8015c48:	01000084 	movi	r4,2
 8015c4c:	801c4780 	call	801c478 <OSTimeDly>
  NIOS2_READ_STATUS (context);
 8015c50:	0005303a 	rdctl	r2,status
 8015c54:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015c58:	e0fffb17 	ldw	r3,-20(fp)
 8015c5c:	00bfff84 	movi	r2,-2
 8015c60:	1884703a 	and	r2,r3,r2
 8015c64:	1001703a 	wrctl	status,r2
  return context;
 8015c68:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 8015c6c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 8015c70:	d0206715 	stw	zero,-32356(gp)
 8015c74:	e0bfff17 	ldw	r2,-4(fp)
 8015c78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015c7c:	e0bffc17 	ldw	r2,-16(fp)
 8015c80:	1001703a 	wrctl	status,r2
}
 8015c84:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 8015c88:	01000284 	movi	r4,10
 8015c8c:	801c4780 	call	801c478 <OSTimeDly>
  NIOS2_READ_STATUS (context);
 8015c90:	0005303a 	rdctl	r2,status
 8015c94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015c98:	e0fffd17 	ldw	r3,-12(fp)
 8015c9c:	00bfff84 	movi	r2,-2
 8015ca0:	1884703a 	and	r2,r3,r2
 8015ca4:	1001703a 	wrctl	status,r2
  return context;
 8015ca8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 8015cac:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8015cb0:	d0a06717 	ldw	r2,-32356(gp)
 8015cb4:	d0a06c15 	stw	r2,-32336(gp)
    OSStatRdy    = OS_TRUE;
 8015cb8:	00800044 	movi	r2,1
 8015cbc:	d0a07805 	stb	r2,-32288(gp)
 8015cc0:	e0bfff17 	ldw	r2,-4(fp)
 8015cc4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8015cc8:	e0bffe17 	ldw	r2,-8(fp)
 8015ccc:	1001703a 	wrctl	status,r2
}
 8015cd0:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
 8015cd4:	0001883a 	nop
 8015cd8:	e037883a 	mov	sp,fp
 8015cdc:	dfc00117 	ldw	ra,4(sp)
 8015ce0:	df000017 	ldw	fp,0(sp)
 8015ce4:	dec00204 	addi	sp,sp,8
 8015ce8:	f800283a 	ret

08015cec <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8015cec:	defff704 	addi	sp,sp,-36
 8015cf0:	dfc00815 	stw	ra,32(sp)
 8015cf4:	df000715 	stw	fp,28(sp)
 8015cf8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8015cfc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8015d00:	803fe140 	call	803fe14 <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
 8015d04:	0005303a 	rdctl	r2,status
 8015d08:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015d0c:	e0fffb17 	ldw	r3,-20(fp)
 8015d10:	00bfff84 	movi	r2,-2
 8015d14:	1884703a 	and	r2,r3,r2
 8015d18:	1001703a 	wrctl	status,r2
  return context;
 8015d1c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8015d20:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
 8015d24:	d0a07617 	ldw	r2,-32296(gp)
 8015d28:	10800044 	addi	r2,r2,1
 8015d2c:	d0a07615 	stw	r2,-32296(gp)
 8015d30:	e0bffd17 	ldw	r2,-12(fp)
 8015d34:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015d38:	e0bffc17 	ldw	r2,-16(fp)
 8015d3c:	1001703a 	wrctl	status,r2
}
 8015d40:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 8015d44:	d0a06643 	ldbu	r2,-32359(gp)
 8015d48:	10803fcc 	andi	r2,r2,255
 8015d4c:	10800058 	cmpnei	r2,r2,1
 8015d50:	10006e1e 	bne	r2,zero,8015f0c <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8015d54:	d0a06a03 	ldbu	r2,-32344(gp)
 8015d58:	10803fcc 	andi	r2,r2,255
 8015d5c:	10c000a0 	cmpeqi	r3,r2,2
 8015d60:	18000b1e 	bne	r3,zero,8015d90 <OSTimeTick+0xa4>
 8015d64:	10c000c8 	cmpgei	r3,r2,3
 8015d68:	18000e1e 	bne	r3,zero,8015da4 <OSTimeTick+0xb8>
 8015d6c:	10000326 	beq	r2,zero,8015d7c <OSTimeTick+0x90>
 8015d70:	10800060 	cmpeqi	r2,r2,1
 8015d74:	1000041e 	bne	r2,zero,8015d88 <OSTimeTick+0x9c>
 8015d78:	00000a06 	br	8015da4 <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8015d7c:	00800044 	movi	r2,1
 8015d80:	e0bffec5 	stb	r2,-5(fp)
                 break;
 8015d84:	00000b06 	br	8015db4 <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8015d88:	e03ffec5 	stb	zero,-5(fp)
                 break;
 8015d8c:	00000906 	br	8015db4 <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8015d90:	00800044 	movi	r2,1
 8015d94:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8015d98:	00800044 	movi	r2,1
 8015d9c:	d0a06a05 	stb	r2,-32344(gp)
                 break;
 8015da0:	00000406 	br	8015db4 <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8015da4:	00800044 	movi	r2,1
 8015da8:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 8015dac:	d0206a05 	stb	zero,-32344(gp)
                 break;
 8015db0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8015db4:	e0bffec3 	ldbu	r2,-5(fp)
 8015db8:	10005326 	beq	r2,zero,8015f08 <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8015dbc:	d0a06917 	ldw	r2,-32348(gp)
 8015dc0:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8015dc4:	00004a06 	br	8015ef0 <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
 8015dc8:	0005303a 	rdctl	r2,status
 8015dcc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015dd0:	e0fffa17 	ldw	r3,-24(fp)
 8015dd4:	00bfff84 	movi	r2,-2
 8015dd8:	1884703a 	and	r2,r3,r2
 8015ddc:	1001703a 	wrctl	status,r2
  return context;
 8015de0:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
 8015de4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 8015de8:	e0bfff17 	ldw	r2,-4(fp)
 8015dec:	10800b8b 	ldhu	r2,46(r2)
 8015df0:	10bfffcc 	andi	r2,r2,65535
 8015df4:	10003626 	beq	r2,zero,8015ed0 <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 8015df8:	e0bfff17 	ldw	r2,-4(fp)
 8015dfc:	10800b8b 	ldhu	r2,46(r2)
 8015e00:	10bfffc4 	addi	r2,r2,-1
 8015e04:	1007883a 	mov	r3,r2
 8015e08:	e0bfff17 	ldw	r2,-4(fp)
 8015e0c:	10c00b8d 	sth	r3,46(r2)
 8015e10:	e0bfff17 	ldw	r2,-4(fp)
 8015e14:	10800b8b 	ldhu	r2,46(r2)
 8015e18:	10bfffcc 	andi	r2,r2,65535
 8015e1c:	10002c1e 	bne	r2,zero,8015ed0 <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8015e20:	e0bfff17 	ldw	r2,-4(fp)
 8015e24:	10800c03 	ldbu	r2,48(r2)
 8015e28:	10803fcc 	andi	r2,r2,255
 8015e2c:	10800dcc 	andi	r2,r2,55
 8015e30:	10000b26 	beq	r2,zero,8015e60 <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 8015e34:	e0bfff17 	ldw	r2,-4(fp)
 8015e38:	10c00c03 	ldbu	r3,48(r2)
 8015e3c:	00bff204 	movi	r2,-56
 8015e40:	1884703a 	and	r2,r3,r2
 8015e44:	1007883a 	mov	r3,r2
 8015e48:	e0bfff17 	ldw	r2,-4(fp)
 8015e4c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8015e50:	e0bfff17 	ldw	r2,-4(fp)
 8015e54:	00c00044 	movi	r3,1
 8015e58:	10c00c45 	stb	r3,49(r2)
 8015e5c:	00000206 	br	8015e68 <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8015e60:	e0bfff17 	ldw	r2,-4(fp)
 8015e64:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8015e68:	e0bfff17 	ldw	r2,-4(fp)
 8015e6c:	10800c03 	ldbu	r2,48(r2)
 8015e70:	10803fcc 	andi	r2,r2,255
 8015e74:	1080020c 	andi	r2,r2,8
 8015e78:	1000151e 	bne	r2,zero,8015ed0 <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8015e7c:	e0bfff17 	ldw	r2,-4(fp)
 8015e80:	10c00d83 	ldbu	r3,54(r2)
 8015e84:	d0a07203 	ldbu	r2,-32312(gp)
 8015e88:	1884b03a 	or	r2,r3,r2
 8015e8c:	d0a07205 	stb	r2,-32312(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8015e90:	e0bfff17 	ldw	r2,-4(fp)
 8015e94:	10800d03 	ldbu	r2,52(r2)
 8015e98:	10c03fcc 	andi	r3,r2,255
 8015e9c:	d0a07244 	addi	r2,gp,-32311
 8015ea0:	1885883a 	add	r2,r3,r2
 8015ea4:	11000003 	ldbu	r4,0(r2)
 8015ea8:	e0bfff17 	ldw	r2,-4(fp)
 8015eac:	10800d43 	ldbu	r2,53(r2)
 8015eb0:	e0ffff17 	ldw	r3,-4(fp)
 8015eb4:	18c00d03 	ldbu	r3,52(r3)
 8015eb8:	18c03fcc 	andi	r3,r3,255
 8015ebc:	2084b03a 	or	r2,r4,r2
 8015ec0:	1009883a 	mov	r4,r2
 8015ec4:	d0a07244 	addi	r2,gp,-32311
 8015ec8:	1885883a 	add	r2,r3,r2
 8015ecc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8015ed0:	e0bfff17 	ldw	r2,-4(fp)
 8015ed4:	10800517 	ldw	r2,20(r2)
 8015ed8:	e0bfff15 	stw	r2,-4(fp)
 8015edc:	e0bffd17 	ldw	r2,-12(fp)
 8015ee0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8015ee4:	e0bff917 	ldw	r2,-28(fp)
 8015ee8:	1001703a 	wrctl	status,r2
}
 8015eec:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8015ef0:	e0bfff17 	ldw	r2,-4(fp)
 8015ef4:	10800c83 	ldbu	r2,50(r2)
 8015ef8:	10803fcc 	andi	r2,r2,255
 8015efc:	10800518 	cmpnei	r2,r2,20
 8015f00:	103fb11e 	bne	r2,zero,8015dc8 <OSTimeTick+0xdc>
 8015f04:	00000106 	br	8015f0c <OSTimeTick+0x220>
            return;
 8015f08:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
 8015f0c:	e037883a 	mov	sp,fp
 8015f10:	dfc00117 	ldw	ra,4(sp)
 8015f14:	df000017 	ldw	fp,0(sp)
 8015f18:	dec00204 	addi	sp,sp,8
 8015f1c:	f800283a 	ret

08015f20 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 8015f20:	deffff04 	addi	sp,sp,-4
 8015f24:	df000015 	stw	fp,0(sp)
 8015f28:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 8015f2c:	00804784 	movi	r2,286
}
 8015f30:	e037883a 	mov	sp,fp
 8015f34:	df000017 	ldw	fp,0(sp)
 8015f38:	dec00104 	addi	sp,sp,4
 8015f3c:	f800283a 	ret

08015f40 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 8015f40:	deffff04 	addi	sp,sp,-4
 8015f44:	df000015 	stw	fp,0(sp)
 8015f48:	d839883a 	mov	fp,sp
}
 8015f4c:	0001883a 	nop
 8015f50:	e037883a 	mov	sp,fp
 8015f54:	df000017 	ldw	fp,0(sp)
 8015f58:	dec00104 	addi	sp,sp,4
 8015f5c:	f800283a 	ret

08015f60 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 8015f60:	defff804 	addi	sp,sp,-32
 8015f64:	dfc00715 	stw	ra,28(sp)
 8015f68:	df000615 	stw	fp,24(sp)
 8015f6c:	df000604 	addi	fp,sp,24
 8015f70:	e13ffd15 	stw	r4,-12(fp)
 8015f74:	e17ffc15 	stw	r5,-16(fp)
 8015f78:	3005883a 	mov	r2,r6
 8015f7c:	3807883a 	mov	r3,r7
 8015f80:	e0bffb05 	stb	r2,-20(fp)
 8015f84:	1805883a 	mov	r2,r3
 8015f88:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8015f8c:	e0bffd17 	ldw	r2,-12(fp)
 8015f90:	10800283 	ldbu	r2,10(r2)
 8015f94:	10c03fcc 	andi	r3,r2,255
 8015f98:	00820174 	movhi	r2,2053
 8015f9c:	1885883a 	add	r2,r3,r2
 8015fa0:	10824c03 	ldbu	r2,2352(r2)
 8015fa4:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8015fa8:	e0bfffc3 	ldbu	r2,-1(fp)
 8015fac:	e0fffd17 	ldw	r3,-12(fp)
 8015fb0:	1885883a 	add	r2,r3,r2
 8015fb4:	108002c3 	ldbu	r2,11(r2)
 8015fb8:	10c03fcc 	andi	r3,r2,255
 8015fbc:	00820174 	movhi	r2,2053
 8015fc0:	1885883a 	add	r2,r3,r2
 8015fc4:	10824c03 	ldbu	r2,2352(r2)
 8015fc8:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 8015fcc:	e0bfffc3 	ldbu	r2,-1(fp)
 8015fd0:	100490fa 	slli	r2,r2,3
 8015fd4:	1007883a 	mov	r3,r2
 8015fd8:	e0bfff83 	ldbu	r2,-2(fp)
 8015fdc:	10c5883a 	add	r2,r2,r3
 8015fe0:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8015fe4:	e0bfff43 	ldbu	r2,-3(fp)
 8015fe8:	100690ba 	slli	r3,r2,2
 8015fec:	008201b4 	movhi	r2,2054
 8015ff0:	1885883a 	add	r2,r3,r2
 8015ff4:	10bc0017 	ldw	r2,-4096(r2)
 8015ff8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 8015ffc:	e0bffe17 	ldw	r2,-8(fp)
 8016000:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8016004:	e0bffe17 	ldw	r2,-8(fp)
 8016008:	e0fffc17 	ldw	r3,-16(fp)
 801600c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 8016010:	e0bffe17 	ldw	r2,-8(fp)
 8016014:	10800c03 	ldbu	r2,48(r2)
 8016018:	1007883a 	mov	r3,r2
 801601c:	e0bffb03 	ldbu	r2,-20(fp)
 8016020:	0084303a 	nor	r2,zero,r2
 8016024:	1884703a 	and	r2,r3,r2
 8016028:	1007883a 	mov	r3,r2
 801602c:	e0bffe17 	ldw	r2,-8(fp)
 8016030:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8016034:	e0bffe17 	ldw	r2,-8(fp)
 8016038:	e0fffa03 	ldbu	r3,-24(fp)
 801603c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8016040:	e0bffe17 	ldw	r2,-8(fp)
 8016044:	10800c03 	ldbu	r2,48(r2)
 8016048:	10803fcc 	andi	r2,r2,255
 801604c:	1080020c 	andi	r2,r2,8
 8016050:	1000111e 	bne	r2,zero,8016098 <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8016054:	e0bffe17 	ldw	r2,-8(fp)
 8016058:	10c00d83 	ldbu	r3,54(r2)
 801605c:	d0a07203 	ldbu	r2,-32312(gp)
 8016060:	1884b03a 	or	r2,r3,r2
 8016064:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8016068:	e0ffffc3 	ldbu	r3,-1(fp)
 801606c:	d0a07244 	addi	r2,gp,-32311
 8016070:	1885883a 	add	r2,r3,r2
 8016074:	11000003 	ldbu	r4,0(r2)
 8016078:	e0bffe17 	ldw	r2,-8(fp)
 801607c:	10800d43 	ldbu	r2,53(r2)
 8016080:	e0ffffc3 	ldbu	r3,-1(fp)
 8016084:	2084b03a 	or	r2,r4,r2
 8016088:	1009883a 	mov	r4,r2
 801608c:	d0a07244 	addi	r2,gp,-32311
 8016090:	1885883a 	add	r2,r3,r2
 8016094:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8016098:	e17ffd17 	ldw	r5,-12(fp)
 801609c:	e13ffe17 	ldw	r4,-8(fp)
 80160a0:	80163380 	call	8016338 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80160a4:	e0bffe17 	ldw	r2,-8(fp)
 80160a8:	10800817 	ldw	r2,32(r2)
 80160ac:	10000826 	beq	r2,zero,80160d0 <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80160b0:	e0bffe17 	ldw	r2,-8(fp)
 80160b4:	10800817 	ldw	r2,32(r2)
 80160b8:	100b883a 	mov	r5,r2
 80160bc:	e13ffe17 	ldw	r4,-8(fp)
 80160c0:	80163e80 	call	80163e8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 80160c4:	e0bffe17 	ldw	r2,-8(fp)
 80160c8:	e0fffd17 	ldw	r3,-12(fp)
 80160cc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 80160d0:	e0bfff43 	ldbu	r2,-3(fp)
}
 80160d4:	e037883a 	mov	sp,fp
 80160d8:	dfc00117 	ldw	ra,4(sp)
 80160dc:	df000017 	ldw	fp,0(sp)
 80160e0:	dec00204 	addi	sp,sp,8
 80160e4:	f800283a 	ret

080160e8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 80160e8:	defffd04 	addi	sp,sp,-12
 80160ec:	df000215 	stw	fp,8(sp)
 80160f0:	df000204 	addi	fp,sp,8
 80160f4:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 80160f8:	d0a07517 	ldw	r2,-32300(gp)
 80160fc:	e0fffe17 	ldw	r3,-8(fp)
 8016100:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8016104:	d0a07517 	ldw	r2,-32300(gp)
 8016108:	10800d03 	ldbu	r2,52(r2)
 801610c:	10803fcc 	andi	r2,r2,255
 8016110:	e0fffe17 	ldw	r3,-8(fp)
 8016114:	1885883a 	add	r2,r3,r2
 8016118:	110002c3 	ldbu	r4,11(r2)
 801611c:	d0a07517 	ldw	r2,-32300(gp)
 8016120:	10c00d43 	ldbu	r3,53(r2)
 8016124:	d0a07517 	ldw	r2,-32300(gp)
 8016128:	10800d03 	ldbu	r2,52(r2)
 801612c:	10803fcc 	andi	r2,r2,255
 8016130:	20c6b03a 	or	r3,r4,r3
 8016134:	1809883a 	mov	r4,r3
 8016138:	e0fffe17 	ldw	r3,-8(fp)
 801613c:	1885883a 	add	r2,r3,r2
 8016140:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8016144:	e0bffe17 	ldw	r2,-8(fp)
 8016148:	10c00283 	ldbu	r3,10(r2)
 801614c:	d0a07517 	ldw	r2,-32300(gp)
 8016150:	10800d83 	ldbu	r2,54(r2)
 8016154:	1884b03a 	or	r2,r3,r2
 8016158:	1007883a 	mov	r3,r2
 801615c:	e0bffe17 	ldw	r2,-8(fp)
 8016160:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8016164:	d0a07517 	ldw	r2,-32300(gp)
 8016168:	10800d03 	ldbu	r2,52(r2)
 801616c:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 8016170:	e0ffffc3 	ldbu	r3,-1(fp)
 8016174:	d0a07244 	addi	r2,gp,-32311
 8016178:	1885883a 	add	r2,r3,r2
 801617c:	10800003 	ldbu	r2,0(r2)
 8016180:	1007883a 	mov	r3,r2
 8016184:	d0a07517 	ldw	r2,-32300(gp)
 8016188:	10800d43 	ldbu	r2,53(r2)
 801618c:	0084303a 	nor	r2,zero,r2
 8016190:	1884703a 	and	r2,r3,r2
 8016194:	e0ffffc3 	ldbu	r3,-1(fp)
 8016198:	1009883a 	mov	r4,r2
 801619c:	d0a07244 	addi	r2,gp,-32311
 80161a0:	1885883a 	add	r2,r3,r2
 80161a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 80161a8:	e0ffffc3 	ldbu	r3,-1(fp)
 80161ac:	d0a07244 	addi	r2,gp,-32311
 80161b0:	1885883a 	add	r2,r3,r2
 80161b4:	10800003 	ldbu	r2,0(r2)
 80161b8:	10803fcc 	andi	r2,r2,255
 80161bc:	1000071e 	bne	r2,zero,80161dc <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 80161c0:	d0a07517 	ldw	r2,-32300(gp)
 80161c4:	10800d83 	ldbu	r2,54(r2)
 80161c8:	0084303a 	nor	r2,zero,r2
 80161cc:	1007883a 	mov	r3,r2
 80161d0:	d0a07203 	ldbu	r2,-32312(gp)
 80161d4:	1884703a 	and	r2,r3,r2
 80161d8:	d0a07205 	stb	r2,-32312(gp)
    }
}
 80161dc:	0001883a 	nop
 80161e0:	e037883a 	mov	sp,fp
 80161e4:	df000017 	ldw	fp,0(sp)
 80161e8:	dec00104 	addi	sp,sp,4
 80161ec:	f800283a 	ret

080161f0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 80161f0:	defffb04 	addi	sp,sp,-20
 80161f4:	df000415 	stw	fp,16(sp)
 80161f8:	df000404 	addi	fp,sp,16
 80161fc:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 8016200:	d0a07517 	ldw	r2,-32300(gp)
 8016204:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 8016208:	d0a07517 	ldw	r2,-32300(gp)
 801620c:	e0fffc17 	ldw	r3,-16(fp)
 8016210:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 8016214:	e0bffc17 	ldw	r2,-16(fp)
 8016218:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
 801621c:	e0bfff17 	ldw	r2,-4(fp)
 8016220:	10800017 	ldw	r2,0(r2)
 8016224:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 8016228:	00001e06 	br	80162a4 <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 801622c:	d0a07517 	ldw	r2,-32300(gp)
 8016230:	10800d03 	ldbu	r2,52(r2)
 8016234:	10803fcc 	andi	r2,r2,255
 8016238:	e0fffe17 	ldw	r3,-8(fp)
 801623c:	1885883a 	add	r2,r3,r2
 8016240:	110002c3 	ldbu	r4,11(r2)
 8016244:	d0a07517 	ldw	r2,-32300(gp)
 8016248:	10c00d43 	ldbu	r3,53(r2)
 801624c:	d0a07517 	ldw	r2,-32300(gp)
 8016250:	10800d03 	ldbu	r2,52(r2)
 8016254:	10803fcc 	andi	r2,r2,255
 8016258:	20c6b03a 	or	r3,r4,r3
 801625c:	1809883a 	mov	r4,r3
 8016260:	e0fffe17 	ldw	r3,-8(fp)
 8016264:	1885883a 	add	r2,r3,r2
 8016268:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 801626c:	e0bffe17 	ldw	r2,-8(fp)
 8016270:	10c00283 	ldbu	r3,10(r2)
 8016274:	d0a07517 	ldw	r2,-32300(gp)
 8016278:	10800d83 	ldbu	r2,54(r2)
 801627c:	1884b03a 	or	r2,r3,r2
 8016280:	1007883a 	mov	r3,r2
 8016284:	e0bffe17 	ldw	r2,-8(fp)
 8016288:	10c00285 	stb	r3,10(r2)
        pevents++;
 801628c:	e0bfff17 	ldw	r2,-4(fp)
 8016290:	10800104 	addi	r2,r2,4
 8016294:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 8016298:	e0bfff17 	ldw	r2,-4(fp)
 801629c:	10800017 	ldw	r2,0(r2)
 80162a0:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 80162a4:	e0bffe17 	ldw	r2,-8(fp)
 80162a8:	103fe01e 	bne	r2,zero,801622c <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 80162ac:	d0a07517 	ldw	r2,-32300(gp)
 80162b0:	10800d03 	ldbu	r2,52(r2)
 80162b4:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 80162b8:	e0fffdc3 	ldbu	r3,-9(fp)
 80162bc:	d0a07244 	addi	r2,gp,-32311
 80162c0:	1885883a 	add	r2,r3,r2
 80162c4:	10800003 	ldbu	r2,0(r2)
 80162c8:	1007883a 	mov	r3,r2
 80162cc:	d0a07517 	ldw	r2,-32300(gp)
 80162d0:	10800d43 	ldbu	r2,53(r2)
 80162d4:	0084303a 	nor	r2,zero,r2
 80162d8:	1884703a 	and	r2,r3,r2
 80162dc:	e0fffdc3 	ldbu	r3,-9(fp)
 80162e0:	1009883a 	mov	r4,r2
 80162e4:	d0a07244 	addi	r2,gp,-32311
 80162e8:	1885883a 	add	r2,r3,r2
 80162ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 80162f0:	e0fffdc3 	ldbu	r3,-9(fp)
 80162f4:	d0a07244 	addi	r2,gp,-32311
 80162f8:	1885883a 	add	r2,r3,r2
 80162fc:	10800003 	ldbu	r2,0(r2)
 8016300:	10803fcc 	andi	r2,r2,255
 8016304:	1000071e 	bne	r2,zero,8016324 <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 8016308:	d0a07517 	ldw	r2,-32300(gp)
 801630c:	10800d83 	ldbu	r2,54(r2)
 8016310:	0084303a 	nor	r2,zero,r2
 8016314:	1007883a 	mov	r3,r2
 8016318:	d0a07203 	ldbu	r2,-32312(gp)
 801631c:	1884703a 	and	r2,r3,r2
 8016320:	d0a07205 	stb	r2,-32312(gp)
    }
}
 8016324:	0001883a 	nop
 8016328:	e037883a 	mov	sp,fp
 801632c:	df000017 	ldw	fp,0(sp)
 8016330:	dec00104 	addi	sp,sp,4
 8016334:	f800283a 	ret

08016338 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8016338:	defffc04 	addi	sp,sp,-16
 801633c:	df000315 	stw	fp,12(sp)
 8016340:	df000304 	addi	fp,sp,12
 8016344:	e13ffe15 	stw	r4,-8(fp)
 8016348:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 801634c:	e0bffe17 	ldw	r2,-8(fp)
 8016350:	10800d03 	ldbu	r2,52(r2)
 8016354:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 8016358:	e0bfffc3 	ldbu	r2,-1(fp)
 801635c:	e0fffd17 	ldw	r3,-12(fp)
 8016360:	1885883a 	add	r2,r3,r2
 8016364:	108002c3 	ldbu	r2,11(r2)
 8016368:	1007883a 	mov	r3,r2
 801636c:	e0bffe17 	ldw	r2,-8(fp)
 8016370:	10800d43 	ldbu	r2,53(r2)
 8016374:	0084303a 	nor	r2,zero,r2
 8016378:	1884703a 	and	r2,r3,r2
 801637c:	1007883a 	mov	r3,r2
 8016380:	e0bfffc3 	ldbu	r2,-1(fp)
 8016384:	1809883a 	mov	r4,r3
 8016388:	e0fffd17 	ldw	r3,-12(fp)
 801638c:	1885883a 	add	r2,r3,r2
 8016390:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
 8016394:	e0bfffc3 	ldbu	r2,-1(fp)
 8016398:	e0fffd17 	ldw	r3,-12(fp)
 801639c:	1885883a 	add	r2,r3,r2
 80163a0:	108002c3 	ldbu	r2,11(r2)
 80163a4:	10803fcc 	andi	r2,r2,255
 80163a8:	10000a1e 	bne	r2,zero,80163d4 <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 80163ac:	e0bffd17 	ldw	r2,-12(fp)
 80163b0:	10800283 	ldbu	r2,10(r2)
 80163b4:	1007883a 	mov	r3,r2
 80163b8:	e0bffe17 	ldw	r2,-8(fp)
 80163bc:	10800d83 	ldbu	r2,54(r2)
 80163c0:	0084303a 	nor	r2,zero,r2
 80163c4:	1884703a 	and	r2,r3,r2
 80163c8:	1007883a 	mov	r3,r2
 80163cc:	e0bffd17 	ldw	r2,-12(fp)
 80163d0:	10c00285 	stb	r3,10(r2)
    }
}
 80163d4:	0001883a 	nop
 80163d8:	e037883a 	mov	sp,fp
 80163dc:	df000017 	ldw	fp,0(sp)
 80163e0:	dec00104 	addi	sp,sp,4
 80163e4:	f800283a 	ret

080163e8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 80163e8:	defffa04 	addi	sp,sp,-24
 80163ec:	df000515 	stw	fp,20(sp)
 80163f0:	df000504 	addi	fp,sp,20
 80163f4:	e13ffc15 	stw	r4,-16(fp)
 80163f8:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 80163fc:	e0bffc17 	ldw	r2,-16(fp)
 8016400:	10800d03 	ldbu	r2,52(r2)
 8016404:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
 8016408:	e0bffc17 	ldw	r2,-16(fp)
 801640c:	10800d83 	ldbu	r2,54(r2)
 8016410:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
 8016414:	e0bffc17 	ldw	r2,-16(fp)
 8016418:	10800d43 	ldbu	r2,53(r2)
 801641c:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
 8016420:	e0bffb17 	ldw	r2,-20(fp)
 8016424:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
 8016428:	e0bfff17 	ldw	r2,-4(fp)
 801642c:	10800017 	ldw	r2,0(r2)
 8016430:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8016434:	00002306 	br	80164c4 <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
 8016438:	e0bffdc3 	ldbu	r2,-9(fp)
 801643c:	e0fffe17 	ldw	r3,-8(fp)
 8016440:	1885883a 	add	r2,r3,r2
 8016444:	108002c3 	ldbu	r2,11(r2)
 8016448:	1007883a 	mov	r3,r2
 801644c:	e0bffd43 	ldbu	r2,-11(fp)
 8016450:	0084303a 	nor	r2,zero,r2
 8016454:	1884703a 	and	r2,r3,r2
 8016458:	1007883a 	mov	r3,r2
 801645c:	e0bffdc3 	ldbu	r2,-9(fp)
 8016460:	1809883a 	mov	r4,r3
 8016464:	e0fffe17 	ldw	r3,-8(fp)
 8016468:	1885883a 	add	r2,r3,r2
 801646c:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
 8016470:	e0bffdc3 	ldbu	r2,-9(fp)
 8016474:	e0fffe17 	ldw	r3,-8(fp)
 8016478:	1885883a 	add	r2,r3,r2
 801647c:	108002c3 	ldbu	r2,11(r2)
 8016480:	10803fcc 	andi	r2,r2,255
 8016484:	1000091e 	bne	r2,zero,80164ac <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
 8016488:	e0bffe17 	ldw	r2,-8(fp)
 801648c:	10800283 	ldbu	r2,10(r2)
 8016490:	1007883a 	mov	r3,r2
 8016494:	e0bffd83 	ldbu	r2,-10(fp)
 8016498:	0084303a 	nor	r2,zero,r2
 801649c:	1884703a 	and	r2,r3,r2
 80164a0:	1007883a 	mov	r3,r2
 80164a4:	e0bffe17 	ldw	r2,-8(fp)
 80164a8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 80164ac:	e0bfff17 	ldw	r2,-4(fp)
 80164b0:	10800104 	addi	r2,r2,4
 80164b4:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 80164b8:	e0bfff17 	ldw	r2,-4(fp)
 80164bc:	10800017 	ldw	r2,0(r2)
 80164c0:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80164c4:	e0bffe17 	ldw	r2,-8(fp)
 80164c8:	103fdb1e 	bne	r2,zero,8016438 <OS_EventTaskRemoveMulti+0x50>
    }
}
 80164cc:	0001883a 	nop
 80164d0:	0001883a 	nop
 80164d4:	e037883a 	mov	sp,fp
 80164d8:	df000017 	ldw	fp,0(sp)
 80164dc:	dec00104 	addi	sp,sp,4
 80164e0:	f800283a 	ret

080164e4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 80164e4:	defffc04 	addi	sp,sp,-16
 80164e8:	df000315 	stw	fp,12(sp)
 80164ec:	df000304 	addi	fp,sp,12
 80164f0:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 80164f4:	e0bffd17 	ldw	r2,-12(fp)
 80164f8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 80164fc:	e0bffd17 	ldw	r2,-12(fp)
 8016500:	108002c4 	addi	r2,r2,11
 8016504:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8016508:	e03ffec5 	stb	zero,-5(fp)
 801650c:	00000706 	br	801652c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 8016510:	e0bfff17 	ldw	r2,-4(fp)
 8016514:	10c00044 	addi	r3,r2,1
 8016518:	e0ffff15 	stw	r3,-4(fp)
 801651c:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8016520:	e0bffec3 	ldbu	r2,-5(fp)
 8016524:	10800044 	addi	r2,r2,1
 8016528:	e0bffec5 	stb	r2,-5(fp)
 801652c:	e0bffec3 	ldbu	r2,-5(fp)
 8016530:	108000f0 	cmpltui	r2,r2,3
 8016534:	103ff61e 	bne	r2,zero,8016510 <OS_EventWaitListInit+0x2c>
    }
}
 8016538:	0001883a 	nop
 801653c:	0001883a 	nop
 8016540:	e037883a 	mov	sp,fp
 8016544:	df000017 	ldw	fp,0(sp)
 8016548:	dec00104 	addi	sp,sp,4
 801654c:	f800283a 	ret

08016550 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8016550:	defffb04 	addi	sp,sp,-20
 8016554:	dfc00415 	stw	ra,16(sp)
 8016558:	df000315 	stw	fp,12(sp)
 801655c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8016560:	0142d004 	movi	r5,2880
 8016564:	010201b4 	movhi	r4,2054
 8016568:	2137ec04 	addi	r4,r4,-8272
 801656c:	80168d00 	call	80168d0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 8016570:	008201b4 	movhi	r2,2054
 8016574:	10b7ec04 	addi	r2,r2,-8272
 8016578:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 801657c:	008201b4 	movhi	r2,2054
 8016580:	10b7f804 	addi	r2,r2,-8224
 8016584:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 8016588:	e03fff8d 	sth	zero,-2(fp)
 801658c:	00001306 	br	80165dc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8016590:	e0bffe17 	ldw	r2,-8(fp)
 8016594:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 8016598:	e0bffe17 	ldw	r2,-8(fp)
 801659c:	e0fffd17 	ldw	r3,-12(fp)
 80165a0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 80165a4:	e0bffe17 	ldw	r2,-8(fp)
 80165a8:	00c00fc4 	movi	r3,63
 80165ac:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 80165b0:	e0bffe17 	ldw	r2,-8(fp)
 80165b4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 80165b8:	e0bffe17 	ldw	r2,-8(fp)
 80165bc:	10800c04 	addi	r2,r2,48
 80165c0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 80165c4:	e0bffd17 	ldw	r2,-12(fp)
 80165c8:	10800c04 	addi	r2,r2,48
 80165cc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 80165d0:	e0bfff8b 	ldhu	r2,-2(fp)
 80165d4:	10800044 	addi	r2,r2,1
 80165d8:	e0bfff8d 	sth	r2,-2(fp)
 80165dc:	e0bfff8b 	ldhu	r2,-2(fp)
 80165e0:	10800ef0 	cmpltui	r2,r2,59
 80165e4:	103fea1e 	bne	r2,zero,8016590 <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 80165e8:	e0bffe17 	ldw	r2,-8(fp)
 80165ec:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 80165f0:	e0bffe17 	ldw	r2,-8(fp)
 80165f4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 80165f8:	e0bffe17 	ldw	r2,-8(fp)
 80165fc:	00c00fc4 	movi	r3,63
 8016600:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 8016604:	e0bffe17 	ldw	r2,-8(fp)
 8016608:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 801660c:	008201b4 	movhi	r2,2054
 8016610:	10b7ec04 	addi	r2,r2,-8272
 8016614:	d0a07315 	stw	r2,-32308(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 8016618:	0001883a 	nop
 801661c:	e037883a 	mov	sp,fp
 8016620:	dfc00117 	ldw	ra,4(sp)
 8016624:	df000017 	ldw	fp,0(sp)
 8016628:	dec00204 	addi	sp,sp,8
 801662c:	f800283a 	ret

08016630 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8016630:	deffff04 	addi	sp,sp,-4
 8016634:	df000015 	stw	fp,0(sp)
 8016638:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 801663c:	d0207615 	stw	zero,-32296(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 8016640:	d0207405 	stb	zero,-32304(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 8016644:	d0206605 	stb	zero,-32360(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 8016648:	d0206e45 	stb	zero,-32327(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 801664c:	d0206645 	stb	zero,-32359(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 8016650:	d0206b15 	stw	zero,-32340(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 8016654:	d0206715 	stw	zero,-32356(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 8016658:	d0207915 	stw	zero,-32284(gp)
    OSIdleCtrMax  = 0L;
 801665c:	d0206c15 	stw	zero,-32336(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 8016660:	d0207805 	stb	zero,-32288(gp)
#endif
}
 8016664:	0001883a 	nop
 8016668:	e037883a 	mov	sp,fp
 801666c:	df000017 	ldw	fp,0(sp)
 8016670:	dec00104 	addi	sp,sp,4
 8016674:	f800283a 	ret

08016678 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8016678:	defffd04 	addi	sp,sp,-12
 801667c:	df000215 	stw	fp,8(sp)
 8016680:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 8016684:	d0207205 	stb	zero,-32312(gp)
    prdytbl       = &OSRdyTbl[0];
 8016688:	d0a07244 	addi	r2,gp,-32311
 801668c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 8016690:	e03fffc5 	stb	zero,-1(fp)
 8016694:	00000706 	br	80166b4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 8016698:	e0bffe17 	ldw	r2,-8(fp)
 801669c:	10c00044 	addi	r3,r2,1
 80166a0:	e0fffe15 	stw	r3,-8(fp)
 80166a4:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 80166a8:	e0bfffc3 	ldbu	r2,-1(fp)
 80166ac:	10800044 	addi	r2,r2,1
 80166b0:	e0bfffc5 	stb	r2,-1(fp)
 80166b4:	e0bfffc3 	ldbu	r2,-1(fp)
 80166b8:	108000f0 	cmpltui	r2,r2,3
 80166bc:	103ff61e 	bne	r2,zero,8016698 <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
 80166c0:	d0206845 	stb	zero,-32351(gp)
    OSPrioHighRdy = 0;
 80166c4:	d0206805 	stb	zero,-32352(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 80166c8:	d0207015 	stw	zero,-32320(gp)
    OSTCBCur      = (OS_TCB *)0;
 80166cc:	d0207515 	stw	zero,-32300(gp)
}
 80166d0:	0001883a 	nop
 80166d4:	e037883a 	mov	sp,fp
 80166d8:	df000017 	ldw	fp,0(sp)
 80166dc:	dec00104 	addi	sp,sp,4
 80166e0:	f800283a 	ret

080166e4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 80166e4:	defff804 	addi	sp,sp,-32
 80166e8:	dfc00715 	stw	ra,28(sp)
 80166ec:	df000615 	stw	fp,24(sp)
 80166f0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 80166f4:	008000c4 	movi	r2,3
 80166f8:	d8800415 	stw	r2,16(sp)
 80166fc:	d8000315 	stw	zero,12(sp)
 8016700:	00808004 	movi	r2,512
 8016704:	d8800215 	stw	r2,8(sp)
 8016708:	008201b4 	movhi	r2,2054
 801670c:	10b5ec04 	addi	r2,r2,-10320
 8016710:	d8800115 	stw	r2,4(sp)
 8016714:	00bfffd4 	movui	r2,65535
 8016718:	d8800015 	stw	r2,0(sp)
 801671c:	01c00504 	movi	r7,20
 8016720:	018201b4 	movhi	r6,2054
 8016724:	31b7eb04 	addi	r6,r6,-8276
 8016728:	000b883a 	mov	r5,zero
 801672c:	01020074 	movhi	r4,2049
 8016730:	211ae504 	addi	r4,r4,27540
 8016734:	801b3900 	call	801b390 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 8016738:	e0bfffc4 	addi	r2,fp,-1
 801673c:	100d883a 	mov	r6,r2
 8016740:	01420174 	movhi	r5,2053
 8016744:	29428c04 	addi	r5,r5,2608
 8016748:	01000504 	movi	r4,20
 801674c:	801bba40 	call	801bba4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 8016750:	0001883a 	nop
 8016754:	e037883a 	mov	sp,fp
 8016758:	dfc00117 	ldw	ra,4(sp)
 801675c:	df000017 	ldw	fp,0(sp)
 8016760:	dec00204 	addi	sp,sp,8
 8016764:	f800283a 	ret

08016768 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 8016768:	defff804 	addi	sp,sp,-32
 801676c:	dfc00715 	stw	ra,28(sp)
 8016770:	df000615 	stw	fp,24(sp)
 8016774:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 8016778:	008000c4 	movi	r2,3
 801677c:	d8800415 	stw	r2,16(sp)
 8016780:	d8000315 	stw	zero,12(sp)
 8016784:	00808004 	movi	r2,512
 8016788:	d8800215 	stw	r2,8(sp)
 801678c:	008201b4 	movhi	r2,2054
 8016790:	10b37404 	addi	r2,r2,-12848
 8016794:	d8800115 	stw	r2,4(sp)
 8016798:	00bfff94 	movui	r2,65534
 801679c:	d8800015 	stw	r2,0(sp)
 80167a0:	01c004c4 	movi	r7,19
 80167a4:	018201b4 	movhi	r6,2054
 80167a8:	31b57304 	addi	r6,r6,-10804
 80167ac:	000b883a 	mov	r5,zero
 80167b0:	01020074 	movhi	r4,2049
 80167b4:	211afd04 	addi	r4,r4,27636
 80167b8:	801b3900 	call	801b390 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 80167bc:	e0bfffc4 	addi	r2,fp,-1
 80167c0:	100d883a 	mov	r6,r2
 80167c4:	01420174 	movhi	r5,2053
 80167c8:	29429004 	addi	r5,r5,2624
 80167cc:	010004c4 	movi	r4,19
 80167d0:	801bba40 	call	801bba4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 80167d4:	0001883a 	nop
 80167d8:	e037883a 	mov	sp,fp
 80167dc:	dfc00117 	ldw	ra,4(sp)
 80167e0:	df000017 	ldw	fp,0(sp)
 80167e4:	dec00204 	addi	sp,sp,8
 80167e8:	f800283a 	ret

080167ec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80167ec:	defffb04 	addi	sp,sp,-20
 80167f0:	dfc00415 	stw	ra,16(sp)
 80167f4:	df000315 	stw	fp,12(sp)
 80167f8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80167fc:	01414404 	movi	r5,1296
 8016800:	010201b4 	movhi	r4,2054
 8016804:	213abc04 	addi	r4,r4,-5392
 8016808:	80168d00 	call	80168d0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 801680c:	01401504 	movi	r5,84
 8016810:	010201b4 	movhi	r4,2054
 8016814:	213c0004 	addi	r4,r4,-4096
 8016818:	80168d00 	call	80168d0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 801681c:	008201b4 	movhi	r2,2054
 8016820:	10babc04 	addi	r2,r2,-5392
 8016824:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 8016828:	008201b4 	movhi	r2,2054
 801682c:	10bad704 	addi	r2,r2,-5284
 8016830:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 8016834:	e03fffc5 	stb	zero,-1(fp)
 8016838:	00001106 	br	8016880 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 801683c:	e0bffe17 	ldw	r2,-8(fp)
 8016840:	e0fffd17 	ldw	r3,-12(fp)
 8016844:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 8016848:	e0bffe17 	ldw	r2,-8(fp)
 801684c:	00c00fc4 	movi	r3,63
 8016850:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 8016854:	e0bffe17 	ldw	r2,-8(fp)
 8016858:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 801685c:	e0bffe17 	ldw	r2,-8(fp)
 8016860:	10801b04 	addi	r2,r2,108
 8016864:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 8016868:	e0bffd17 	ldw	r2,-12(fp)
 801686c:	10801b04 	addi	r2,r2,108
 8016870:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 8016874:	e0bfffc3 	ldbu	r2,-1(fp)
 8016878:	10800044 	addi	r2,r2,1
 801687c:	e0bfffc5 	stb	r2,-1(fp)
 8016880:	e0bfffc3 	ldbu	r2,-1(fp)
 8016884:	108002f0 	cmpltui	r2,r2,11
 8016888:	103fec1e 	bne	r2,zero,801683c <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 801688c:	e0bffe17 	ldw	r2,-8(fp)
 8016890:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 8016894:	e0bffe17 	ldw	r2,-8(fp)
 8016898:	00c00fc4 	movi	r3,63
 801689c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 80168a0:	e0bffe17 	ldw	r2,-8(fp)
 80168a4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 80168a8:	d0206915 	stw	zero,-32348(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 80168ac:	008201b4 	movhi	r2,2054
 80168b0:	10babc04 	addi	r2,r2,-5392
 80168b4:	d0a06d15 	stw	r2,-32332(gp)
}
 80168b8:	0001883a 	nop
 80168bc:	e037883a 	mov	sp,fp
 80168c0:	dfc00117 	ldw	ra,4(sp)
 80168c4:	df000017 	ldw	fp,0(sp)
 80168c8:	dec00204 	addi	sp,sp,8
 80168cc:	f800283a 	ret

080168d0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 80168d0:	defffd04 	addi	sp,sp,-12
 80168d4:	df000215 	stw	fp,8(sp)
 80168d8:	df000204 	addi	fp,sp,8
 80168dc:	e13fff15 	stw	r4,-4(fp)
 80168e0:	2805883a 	mov	r2,r5
 80168e4:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
 80168e8:	00000706 	br	8016908 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 80168ec:	e0bfff17 	ldw	r2,-4(fp)
 80168f0:	10c00044 	addi	r3,r2,1
 80168f4:	e0ffff15 	stw	r3,-4(fp)
 80168f8:	10000005 	stb	zero,0(r2)
        size--;
 80168fc:	e0bffe0b 	ldhu	r2,-8(fp)
 8016900:	10bfffc4 	addi	r2,r2,-1
 8016904:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
 8016908:	e0bffe0b 	ldhu	r2,-8(fp)
 801690c:	103ff71e 	bne	r2,zero,80168ec <OS_MemClr+0x1c>
    }
}
 8016910:	0001883a 	nop
 8016914:	0001883a 	nop
 8016918:	e037883a 	mov	sp,fp
 801691c:	df000017 	ldw	fp,0(sp)
 8016920:	dec00104 	addi	sp,sp,4
 8016924:	f800283a 	ret

08016928 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 8016928:	defffc04 	addi	sp,sp,-16
 801692c:	df000315 	stw	fp,12(sp)
 8016930:	df000304 	addi	fp,sp,12
 8016934:	e13fff15 	stw	r4,-4(fp)
 8016938:	e17ffe15 	stw	r5,-8(fp)
 801693c:	3005883a 	mov	r2,r6
 8016940:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
 8016944:	00000b06 	br	8016974 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 8016948:	e0fffe17 	ldw	r3,-8(fp)
 801694c:	18800044 	addi	r2,r3,1
 8016950:	e0bffe15 	stw	r2,-8(fp)
 8016954:	e0bfff17 	ldw	r2,-4(fp)
 8016958:	11000044 	addi	r4,r2,1
 801695c:	e13fff15 	stw	r4,-4(fp)
 8016960:	18c00003 	ldbu	r3,0(r3)
 8016964:	10c00005 	stb	r3,0(r2)
        size--;
 8016968:	e0bffd0b 	ldhu	r2,-12(fp)
 801696c:	10bfffc4 	addi	r2,r2,-1
 8016970:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
 8016974:	e0bffd0b 	ldhu	r2,-12(fp)
 8016978:	103ff31e 	bne	r2,zero,8016948 <OS_MemCopy+0x20>
    }
}
 801697c:	0001883a 	nop
 8016980:	0001883a 	nop
 8016984:	e037883a 	mov	sp,fp
 8016988:	df000017 	ldw	fp,0(sp)
 801698c:	dec00104 	addi	sp,sp,4
 8016990:	f800283a 	ret

08016994 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8016994:	defffb04 	addi	sp,sp,-20
 8016998:	dfc00415 	stw	ra,16(sp)
 801699c:	df000315 	stw	fp,12(sp)
 80169a0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 80169a4:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 80169a8:	0005303a 	rdctl	r2,status
 80169ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80169b0:	e0fffe17 	ldw	r3,-8(fp)
 80169b4:	00bfff84 	movi	r2,-2
 80169b8:	1884703a 	and	r2,r3,r2
 80169bc:	1001703a 	wrctl	status,r2
  return context;
 80169c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 80169c4:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 80169c8:	d0a07403 	ldbu	r2,-32304(gp)
 80169cc:	10803fcc 	andi	r2,r2,255
 80169d0:	1000181e 	bne	r2,zero,8016a34 <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 80169d4:	d0a06603 	ldbu	r2,-32360(gp)
 80169d8:	10803fcc 	andi	r2,r2,255
 80169dc:	1000151e 	bne	r2,zero,8016a34 <OS_Sched+0xa0>
            OS_SchedNew();
 80169e0:	8016a600 	call	8016a60 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80169e4:	d0e06803 	ldbu	r3,-32352(gp)
 80169e8:	d0a06843 	ldbu	r2,-32351(gp)
 80169ec:	18c03fcc 	andi	r3,r3,255
 80169f0:	10803fcc 	andi	r2,r2,255
 80169f4:	18800f26 	beq	r3,r2,8016a34 <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80169f8:	d0a06803 	ldbu	r2,-32352(gp)
 80169fc:	10803fcc 	andi	r2,r2,255
 8016a00:	100690ba 	slli	r3,r2,2
 8016a04:	008201b4 	movhi	r2,2054
 8016a08:	1885883a 	add	r2,r3,r2
 8016a0c:	10bc0017 	ldw	r2,-4096(r2)
 8016a10:	d0a07015 	stw	r2,-32320(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8016a14:	d0a07017 	ldw	r2,-32320(gp)
 8016a18:	10c00e17 	ldw	r3,56(r2)
 8016a1c:	18c00044 	addi	r3,r3,1
 8016a20:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8016a24:	d0a06b17 	ldw	r2,-32340(gp)
 8016a28:	10800044 	addi	r2,r2,1
 8016a2c:	d0a06b15 	stw	r2,-32340(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 8016a30:	803fb700 	call	803fb70 <OSCtxSw>
 8016a34:	e0bfff17 	ldw	r2,-4(fp)
 8016a38:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8016a3c:	e0bffd17 	ldw	r2,-12(fp)
 8016a40:	1001703a 	wrctl	status,r2
}
 8016a44:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 8016a48:	0001883a 	nop
 8016a4c:	e037883a 	mov	sp,fp
 8016a50:	dfc00117 	ldw	ra,4(sp)
 8016a54:	df000017 	ldw	fp,0(sp)
 8016a58:	dec00204 	addi	sp,sp,8
 8016a5c:	f800283a 	ret

08016a60 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8016a60:	defffe04 	addi	sp,sp,-8
 8016a64:	df000115 	stw	fp,4(sp)
 8016a68:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8016a6c:	d0a07203 	ldbu	r2,-32312(gp)
 8016a70:	10c03fcc 	andi	r3,r2,255
 8016a74:	00820174 	movhi	r2,2053
 8016a78:	1885883a 	add	r2,r3,r2
 8016a7c:	10824c03 	ldbu	r2,2352(r2)
 8016a80:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 8016a84:	e0bfffc3 	ldbu	r2,-1(fp)
 8016a88:	100490fa 	slli	r2,r2,3
 8016a8c:	1009883a 	mov	r4,r2
 8016a90:	e0ffffc3 	ldbu	r3,-1(fp)
 8016a94:	d0a07244 	addi	r2,gp,-32311
 8016a98:	1885883a 	add	r2,r3,r2
 8016a9c:	10800003 	ldbu	r2,0(r2)
 8016aa0:	10c03fcc 	andi	r3,r2,255
 8016aa4:	00820174 	movhi	r2,2053
 8016aa8:	1885883a 	add	r2,r3,r2
 8016aac:	10824c03 	ldbu	r2,2352(r2)
 8016ab0:	2085883a 	add	r2,r4,r2
 8016ab4:	d0a06805 	stb	r2,-32352(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 8016ab8:	0001883a 	nop
 8016abc:	e037883a 	mov	sp,fp
 8016ac0:	df000017 	ldw	fp,0(sp)
 8016ac4:	dec00104 	addi	sp,sp,4
 8016ac8:	f800283a 	ret

08016acc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 8016acc:	defffc04 	addi	sp,sp,-16
 8016ad0:	df000315 	stw	fp,12(sp)
 8016ad4:	df000304 	addi	fp,sp,12
 8016ad8:	e13ffe15 	stw	r4,-8(fp)
 8016adc:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
 8016ae0:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8016ae4:	00000b06 	br	8016b14 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 8016ae8:	e0fffd17 	ldw	r3,-12(fp)
 8016aec:	18800044 	addi	r2,r3,1
 8016af0:	e0bffd15 	stw	r2,-12(fp)
 8016af4:	e0bffe17 	ldw	r2,-8(fp)
 8016af8:	11000044 	addi	r4,r2,1
 8016afc:	e13ffe15 	stw	r4,-8(fp)
 8016b00:	18c00003 	ldbu	r3,0(r3)
 8016b04:	10c00005 	stb	r3,0(r2)
        len++;
 8016b08:	e0bfffc3 	ldbu	r2,-1(fp)
 8016b0c:	10800044 	addi	r2,r2,1
 8016b10:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8016b14:	e0bffd17 	ldw	r2,-12(fp)
 8016b18:	10800003 	ldbu	r2,0(r2)
 8016b1c:	10803fcc 	andi	r2,r2,255
 8016b20:	103ff11e 	bne	r2,zero,8016ae8 <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
 8016b24:	e0bffe17 	ldw	r2,-8(fp)
 8016b28:	10000005 	stb	zero,0(r2)
    return (len);
 8016b2c:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8016b30:	e037883a 	mov	sp,fp
 8016b34:	df000017 	ldw	fp,0(sp)
 8016b38:	dec00104 	addi	sp,sp,4
 8016b3c:	f800283a 	ret

08016b40 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 8016b40:	defffd04 	addi	sp,sp,-12
 8016b44:	df000215 	stw	fp,8(sp)
 8016b48:	df000204 	addi	fp,sp,8
 8016b4c:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
 8016b50:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8016b54:	00000606 	br	8016b70 <OS_StrLen+0x30>
        psrc++;
 8016b58:	e0bffe17 	ldw	r2,-8(fp)
 8016b5c:	10800044 	addi	r2,r2,1
 8016b60:	e0bffe15 	stw	r2,-8(fp)
        len++;
 8016b64:	e0bfffc3 	ldbu	r2,-1(fp)
 8016b68:	10800044 	addi	r2,r2,1
 8016b6c:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8016b70:	e0bffe17 	ldw	r2,-8(fp)
 8016b74:	10800003 	ldbu	r2,0(r2)
 8016b78:	10803fcc 	andi	r2,r2,255
 8016b7c:	103ff61e 	bne	r2,zero,8016b58 <OS_StrLen+0x18>
    }
    return (len);
 8016b80:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8016b84:	e037883a 	mov	sp,fp
 8016b88:	df000017 	ldw	fp,0(sp)
 8016b8c:	dec00104 	addi	sp,sp,4
 8016b90:	f800283a 	ret

08016b94 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8016b94:	defffa04 	addi	sp,sp,-24
 8016b98:	dfc00515 	stw	ra,20(sp)
 8016b9c:	df000415 	stw	fp,16(sp)
 8016ba0:	df000404 	addi	fp,sp,16
 8016ba4:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8016ba8:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8016bac:	0005303a 	rdctl	r2,status
 8016bb0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016bb4:	e0fffd17 	ldw	r3,-12(fp)
 8016bb8:	00bfff84 	movi	r2,-2
 8016bbc:	1884703a 	and	r2,r3,r2
 8016bc0:	1001703a 	wrctl	status,r2
  return context;
 8016bc4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8016bc8:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
 8016bcc:	d0a06717 	ldw	r2,-32356(gp)
 8016bd0:	10800044 	addi	r2,r2,1
 8016bd4:	d0a06715 	stw	r2,-32356(gp)
 8016bd8:	e0bfff17 	ldw	r2,-4(fp)
 8016bdc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8016be0:	e0bffe17 	ldw	r2,-8(fp)
 8016be4:	1001703a 	wrctl	status,r2
}
 8016be8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8016bec:	803fe800 	call	803fe80 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8016bf0:	003fee06 	br	8016bac <OS_TaskIdle+0x18>

08016bf4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 8016bf4:	defffa04 	addi	sp,sp,-24
 8016bf8:	dfc00515 	stw	ra,20(sp)
 8016bfc:	df000415 	stw	fp,16(sp)
 8016c00:	df000404 	addi	fp,sp,16
 8016c04:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8016c08:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8016c0c:	00000206 	br	8016c18 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 8016c10:	01000504 	movi	r4,20
 8016c14:	801c4780 	call	801c478 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8016c18:	d0a07803 	ldbu	r2,-32288(gp)
 8016c1c:	10803fcc 	andi	r2,r2,255
 8016c20:	103ffb26 	beq	r2,zero,8016c10 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
 8016c24:	d0a06c17 	ldw	r2,-32336(gp)
 8016c28:	01401904 	movi	r5,100
 8016c2c:	1009883a 	mov	r4,r2
 8016c30:	8011fdc0 	call	8011fdc <__udivsi3>
 8016c34:	d0a06c15 	stw	r2,-32336(gp)
    if (OSIdleCtrMax == 0L) {
 8016c38:	d0a06c17 	ldw	r2,-32336(gp)
 8016c3c:	1000031e 	bne	r2,zero,8016c4c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 8016c40:	d0206e05 	stb	zero,-32328(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8016c44:	01003fc4 	movi	r4,255
 8016c48:	801c0f80 	call	801c0f8 <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
 8016c4c:	0005303a 	rdctl	r2,status
 8016c50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016c54:	e0fffd17 	ldw	r3,-12(fp)
 8016c58:	00bfff84 	movi	r2,-2
 8016c5c:	1884703a 	and	r2,r3,r2
 8016c60:	1001703a 	wrctl	status,r2
  return context;
 8016c64:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 8016c68:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 8016c6c:	d0a06717 	ldw	r2,-32356(gp)
 8016c70:	d0a07915 	stw	r2,-32284(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 8016c74:	d0206715 	stw	zero,-32356(gp)
 8016c78:	e0bfff17 	ldw	r2,-4(fp)
 8016c7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8016c80:	e0bffe17 	ldw	r2,-8(fp)
 8016c84:	1001703a 	wrctl	status,r2
}
 8016c88:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 8016c8c:	d0a07917 	ldw	r2,-32284(gp)
 8016c90:	d0e06c17 	ldw	r3,-32336(gp)
 8016c94:	180b883a 	mov	r5,r3
 8016c98:	1009883a 	mov	r4,r2
 8016c9c:	8011fdc0 	call	8011fdc <__udivsi3>
 8016ca0:	1007883a 	mov	r3,r2
 8016ca4:	00801904 	movi	r2,100
 8016ca8:	10c5c83a 	sub	r2,r2,r3
 8016cac:	d0a06e05 	stb	r2,-32328(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8016cb0:	803fdf40 	call	803fdf4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8016cb4:	8016cc40 	call	8016cc4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 8016cb8:	01000284 	movi	r4,10
 8016cbc:	801c4780 	call	801c478 <OSTimeDly>
        OS_ENTER_CRITICAL();
 8016cc0:	003fe206 	br	8016c4c <OS_TaskStat+0x58>

08016cc4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 8016cc4:	defffa04 	addi	sp,sp,-24
 8016cc8:	dfc00515 	stw	ra,20(sp)
 8016ccc:	df000415 	stw	fp,16(sp)
 8016cd0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8016cd4:	e03fffc5 	stb	zero,-1(fp)
 8016cd8:	00002106 	br	8016d60 <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
 8016cdc:	e0bfffc3 	ldbu	r2,-1(fp)
 8016ce0:	e0fffc04 	addi	r3,fp,-16
 8016ce4:	180b883a 	mov	r5,r3
 8016ce8:	1009883a 	mov	r4,r2
 8016cec:	801bf400 	call	801bf40 <OSTaskStkChk>
 8016cf0:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
 8016cf4:	e0bfff83 	ldbu	r2,-2(fp)
 8016cf8:	1000161e 	bne	r2,zero,8016d54 <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
 8016cfc:	e0bfffc3 	ldbu	r2,-1(fp)
 8016d00:	100690ba 	slli	r3,r2,2
 8016d04:	008201b4 	movhi	r2,2054
 8016d08:	1885883a 	add	r2,r3,r2
 8016d0c:	10bc0017 	ldw	r2,-4096(r2)
 8016d10:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8016d14:	e0bffe17 	ldw	r2,-8(fp)
 8016d18:	10000e26 	beq	r2,zero,8016d54 <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8016d1c:	e0bffe17 	ldw	r2,-8(fp)
 8016d20:	10800060 	cmpeqi	r2,r2,1
 8016d24:	10000b1e 	bne	r2,zero,8016d54 <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8016d28:	e0bffe17 	ldw	r2,-8(fp)
 8016d2c:	10c00217 	ldw	r3,8(r2)
 8016d30:	e0bffe17 	ldw	r2,-8(fp)
 8016d34:	10800317 	ldw	r2,12(r2)
 8016d38:	100490ba 	slli	r2,r2,2
 8016d3c:	1887883a 	add	r3,r3,r2
 8016d40:	e0bffe17 	ldw	r2,-8(fp)
 8016d44:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 8016d48:	e0fffd17 	ldw	r3,-12(fp)
 8016d4c:	e0bffe17 	ldw	r2,-8(fp)
 8016d50:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8016d54:	e0bfffc3 	ldbu	r2,-1(fp)
 8016d58:	10800044 	addi	r2,r2,1
 8016d5c:	e0bfffc5 	stb	r2,-1(fp)
 8016d60:	e0bfffc3 	ldbu	r2,-1(fp)
 8016d64:	10800570 	cmpltui	r2,r2,21
 8016d68:	103fdc1e 	bne	r2,zero,8016cdc <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 8016d6c:	0001883a 	nop
 8016d70:	0001883a 	nop
 8016d74:	e037883a 	mov	sp,fp
 8016d78:	dfc00117 	ldw	ra,4(sp)
 8016d7c:	df000017 	ldw	fp,0(sp)
 8016d80:	dec00204 	addi	sp,sp,8
 8016d84:	f800283a 	ret

08016d88 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 8016d88:	defff204 	addi	sp,sp,-56
 8016d8c:	dfc00d15 	stw	ra,52(sp)
 8016d90:	df000c15 	stw	fp,48(sp)
 8016d94:	df000c04 	addi	fp,sp,48
 8016d98:	2007883a 	mov	r3,r4
 8016d9c:	e17ff715 	stw	r5,-36(fp)
 8016da0:	e1bff615 	stw	r6,-40(fp)
 8016da4:	3809883a 	mov	r4,r7
 8016da8:	e0800417 	ldw	r2,16(fp)
 8016dac:	e0fff805 	stb	r3,-32(fp)
 8016db0:	2007883a 	mov	r3,r4
 8016db4:	e0fff50d 	sth	r3,-44(fp)
 8016db8:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8016dbc:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8016dc0:	0005303a 	rdctl	r2,status
 8016dc4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016dc8:	e0fffd17 	ldw	r3,-12(fp)
 8016dcc:	00bfff84 	movi	r2,-2
 8016dd0:	1884703a 	and	r2,r3,r2
 8016dd4:	1001703a 	wrctl	status,r2
  return context;
 8016dd8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 8016ddc:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8016de0:	d0a06d17 	ldw	r2,-32332(gp)
 8016de4:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
 8016de8:	e0bffe17 	ldw	r2,-8(fp)
 8016dec:	10009326 	beq	r2,zero,801703c <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8016df0:	e0bffe17 	ldw	r2,-8(fp)
 8016df4:	10800517 	ldw	r2,20(r2)
 8016df8:	d0a06d15 	stw	r2,-32332(gp)
 8016dfc:	e0bfff17 	ldw	r2,-4(fp)
 8016e00:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016e04:	e0bffb17 	ldw	r2,-20(fp)
 8016e08:	1001703a 	wrctl	status,r2
}
 8016e0c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8016e10:	e0bffe17 	ldw	r2,-8(fp)
 8016e14:	e0fff717 	ldw	r3,-36(fp)
 8016e18:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8016e1c:	e0bffe17 	ldw	r2,-8(fp)
 8016e20:	e0fff803 	ldbu	r3,-32(fp)
 8016e24:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8016e28:	e0bffe17 	ldw	r2,-8(fp)
 8016e2c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8016e30:	e0bffe17 	ldw	r2,-8(fp)
 8016e34:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 8016e38:	e0bffe17 	ldw	r2,-8(fp)
 8016e3c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8016e40:	e0bffe17 	ldw	r2,-8(fp)
 8016e44:	e0c00317 	ldw	r3,12(fp)
 8016e48:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8016e4c:	e0bffe17 	ldw	r2,-8(fp)
 8016e50:	e0c00217 	ldw	r3,8(fp)
 8016e54:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8016e58:	e0bffe17 	ldw	r2,-8(fp)
 8016e5c:	e0fff617 	ldw	r3,-40(fp)
 8016e60:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8016e64:	e0bffe17 	ldw	r2,-8(fp)
 8016e68:	e0fff40b 	ldhu	r3,-48(fp)
 8016e6c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8016e70:	e0bffe17 	ldw	r2,-8(fp)
 8016e74:	e0fff50b 	ldhu	r3,-44(fp)
 8016e78:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 8016e7c:	e0bffe17 	ldw	r2,-8(fp)
 8016e80:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 8016e84:	e0bff803 	ldbu	r2,-32(fp)
 8016e88:	1004d0fa 	srli	r2,r2,3
 8016e8c:	1007883a 	mov	r3,r2
 8016e90:	e0bffe17 	ldw	r2,-8(fp)
 8016e94:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 8016e98:	e0bff803 	ldbu	r2,-32(fp)
 8016e9c:	108001cc 	andi	r2,r2,7
 8016ea0:	1007883a 	mov	r3,r2
 8016ea4:	e0bffe17 	ldw	r2,-8(fp)
 8016ea8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 8016eac:	e0bffe17 	ldw	r2,-8(fp)
 8016eb0:	10800d03 	ldbu	r2,52(r2)
 8016eb4:	10803fcc 	andi	r2,r2,255
 8016eb8:	00c00044 	movi	r3,1
 8016ebc:	1884983a 	sll	r2,r3,r2
 8016ec0:	1007883a 	mov	r3,r2
 8016ec4:	e0bffe17 	ldw	r2,-8(fp)
 8016ec8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 8016ecc:	e0bffe17 	ldw	r2,-8(fp)
 8016ed0:	10800cc3 	ldbu	r2,51(r2)
 8016ed4:	10803fcc 	andi	r2,r2,255
 8016ed8:	00c00044 	movi	r3,1
 8016edc:	1884983a 	sll	r2,r3,r2
 8016ee0:	1007883a 	mov	r3,r2
 8016ee4:	e0bffe17 	ldw	r2,-8(fp)
 8016ee8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8016eec:	e0bffe17 	ldw	r2,-8(fp)
 8016ef0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8016ef4:	e0bffe17 	ldw	r2,-8(fp)
 8016ef8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 8016efc:	e0bffe17 	ldw	r2,-8(fp)
 8016f00:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 8016f04:	e0bffe17 	ldw	r2,-8(fp)
 8016f08:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 8016f0c:	e0bffe17 	ldw	r2,-8(fp)
 8016f10:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 8016f14:	e0bffe17 	ldw	r2,-8(fp)
 8016f18:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 8016f1c:	e0bffe17 	ldw	r2,-8(fp)
 8016f20:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 8016f24:	e0bffe17 	ldw	r2,-8(fp)
 8016f28:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 8016f2c:	e0bffe17 	ldw	r2,-8(fp)
 8016f30:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 8016f34:	e0bffe17 	ldw	r2,-8(fp)
 8016f38:	00c00fc4 	movi	r3,63
 8016f3c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 8016f40:	e0bffe17 	ldw	r2,-8(fp)
 8016f44:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 8016f48:	e13ffe17 	ldw	r4,-8(fp)
 8016f4c:	803fea00 	call	803fea0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8016f50:	e13ffe17 	ldw	r4,-8(fp)
 8016f54:	803fd8c0 	call	803fd8c <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
 8016f58:	0005303a 	rdctl	r2,status
 8016f5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016f60:	e0fffc17 	ldw	r3,-16(fp)
 8016f64:	00bfff84 	movi	r2,-2
 8016f68:	1884703a 	and	r2,r3,r2
 8016f6c:	1001703a 	wrctl	status,r2
  return context;
 8016f70:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
 8016f74:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
 8016f78:	e0bff803 	ldbu	r2,-32(fp)
 8016f7c:	100890ba 	slli	r4,r2,2
 8016f80:	e0fffe17 	ldw	r3,-8(fp)
 8016f84:	008201b4 	movhi	r2,2054
 8016f88:	2085883a 	add	r2,r4,r2
 8016f8c:	10fc0015 	stw	r3,-4096(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 8016f90:	d0e06917 	ldw	r3,-32348(gp)
 8016f94:	e0bffe17 	ldw	r2,-8(fp)
 8016f98:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 8016f9c:	e0bffe17 	ldw	r2,-8(fp)
 8016fa0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 8016fa4:	d0a06917 	ldw	r2,-32348(gp)
 8016fa8:	10000326 	beq	r2,zero,8016fb8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 8016fac:	d0a06917 	ldw	r2,-32348(gp)
 8016fb0:	e0fffe17 	ldw	r3,-8(fp)
 8016fb4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 8016fb8:	e0bffe17 	ldw	r2,-8(fp)
 8016fbc:	d0a06915 	stw	r2,-32348(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8016fc0:	e0bffe17 	ldw	r2,-8(fp)
 8016fc4:	10c00d83 	ldbu	r3,54(r2)
 8016fc8:	d0a07203 	ldbu	r2,-32312(gp)
 8016fcc:	1884b03a 	or	r2,r3,r2
 8016fd0:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8016fd4:	e0bffe17 	ldw	r2,-8(fp)
 8016fd8:	10800d03 	ldbu	r2,52(r2)
 8016fdc:	10c03fcc 	andi	r3,r2,255
 8016fe0:	d0a07244 	addi	r2,gp,-32311
 8016fe4:	1885883a 	add	r2,r3,r2
 8016fe8:	11000003 	ldbu	r4,0(r2)
 8016fec:	e0bffe17 	ldw	r2,-8(fp)
 8016ff0:	10800d43 	ldbu	r2,53(r2)
 8016ff4:	e0fffe17 	ldw	r3,-8(fp)
 8016ff8:	18c00d03 	ldbu	r3,52(r3)
 8016ffc:	18c03fcc 	andi	r3,r3,255
 8017000:	2084b03a 	or	r2,r4,r2
 8017004:	1009883a 	mov	r4,r2
 8017008:	d0a07244 	addi	r2,gp,-32311
 801700c:	1885883a 	add	r2,r3,r2
 8017010:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8017014:	d0a06e43 	ldbu	r2,-32327(gp)
 8017018:	10800044 	addi	r2,r2,1
 801701c:	d0a06e45 	stb	r2,-32327(gp)
 8017020:	e0bfff17 	ldw	r2,-4(fp)
 8017024:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8017028:	e0bffa17 	ldw	r2,-24(fp)
 801702c:	1001703a 	wrctl	status,r2
}
 8017030:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 8017034:	0005883a 	mov	r2,zero
 8017038:	00000606 	br	8017054 <OS_TCBInit+0x2cc>
 801703c:	e0bfff17 	ldw	r2,-4(fp)
 8017040:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017044:	e0bff917 	ldw	r2,-28(fp)
 8017048:	1001703a 	wrctl	status,r2
}
 801704c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 8017050:	00801084 	movi	r2,66
}
 8017054:	e037883a 	mov	sp,fp
 8017058:	dfc00117 	ldw	ra,4(sp)
 801705c:	df000017 	ldw	fp,0(sp)
 8017060:	dec00204 	addi	sp,sp,8
 8017064:	f800283a 	ret

08017068 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 8017068:	defffe04 	addi	sp,sp,-8
 801706c:	df000115 	stw	fp,4(sp)
 8017070:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 8017074:	d0a00704 	addi	r2,gp,-32740
 8017078:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 801707c:	d0a00804 	addi	r2,gp,-32736
 8017080:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 8017084:	d0a00984 	addi	r2,gp,-32730
 8017088:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 801708c:	d0a00a04 	addi	r2,gp,-32728
 8017090:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 8017094:	d0a00904 	addi	r2,gp,-32732
 8017098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 801709c:	d0a00a84 	addi	r2,gp,-32726
 80170a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 80170a4:	d0a00b04 	addi	r2,gp,-32724
 80170a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 80170ac:	d0a00b84 	addi	r2,gp,-32722
 80170b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 80170b4:	d0a00c04 	addi	r2,gp,-32720
 80170b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 80170bc:	d0a00c84 	addi	r2,gp,-32718
 80170c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 80170c4:	d0a00d04 	addi	r2,gp,-32716
 80170c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 80170cc:	d0a00d84 	addi	r2,gp,-32714
 80170d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 80170d4:	d0a00e04 	addi	r2,gp,-32712
 80170d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 80170dc:	d0a00e84 	addi	r2,gp,-32710
 80170e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 80170e4:	d0a00f04 	addi	r2,gp,-32708
 80170e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 80170ec:	d0a00f84 	addi	r2,gp,-32706
 80170f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 80170f4:	d0a01004 	addi	r2,gp,-32704
 80170f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 80170fc:	d0a01084 	addi	r2,gp,-32702
 8017100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 8017104:	d0a01104 	addi	r2,gp,-32700
 8017108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 801710c:	d0a01184 	addi	r2,gp,-32698
 8017110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 8017114:	d0a01204 	addi	r2,gp,-32696
 8017118:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 801711c:	d0a01284 	addi	r2,gp,-32694
 8017120:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 8017124:	d0a01304 	addi	r2,gp,-32692
 8017128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 801712c:	d0a01384 	addi	r2,gp,-32690
 8017130:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 8017134:	d0a01404 	addi	r2,gp,-32688
 8017138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 801713c:	d0a01484 	addi	r2,gp,-32686
 8017140:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 8017144:	d0a01504 	addi	r2,gp,-32684
 8017148:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 801714c:	d0a01584 	addi	r2,gp,-32682
 8017150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 8017154:	d0a01604 	addi	r2,gp,-32680
 8017158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 801715c:	d0a01684 	addi	r2,gp,-32678
 8017160:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 8017164:	d0a01704 	addi	r2,gp,-32676
 8017168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 801716c:	d0a01784 	addi	r2,gp,-32674
 8017170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 8017174:	d0a01804 	addi	r2,gp,-32672
 8017178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 801717c:	d0a01884 	addi	r2,gp,-32670
 8017180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 8017184:	d0a01904 	addi	r2,gp,-32668
 8017188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 801718c:	d0a01984 	addi	r2,gp,-32666
 8017190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 8017194:	d0a01a04 	addi	r2,gp,-32664
 8017198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 801719c:	d0a01a84 	addi	r2,gp,-32662
 80171a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 80171a4:	d0a01b04 	addi	r2,gp,-32660
 80171a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 80171ac:	d0a01b84 	addi	r2,gp,-32658
 80171b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 80171b4:	d0a01c04 	addi	r2,gp,-32656
 80171b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 80171bc:	d0a01c84 	addi	r2,gp,-32654
 80171c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 80171c4:	d0a01d04 	addi	r2,gp,-32652
 80171c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 80171cc:	d0a01d84 	addi	r2,gp,-32650
 80171d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 80171d4:	d0a01e04 	addi	r2,gp,-32648
 80171d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 80171dc:	d0a02304 	addi	r2,gp,-32628
 80171e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 80171e4:	0001883a 	nop
 80171e8:	e037883a 	mov	sp,fp
 80171ec:	df000017 	ldw	fp,0(sp)
 80171f0:	dec00104 	addi	sp,sp,4
 80171f4:	f800283a 	ret

080171f8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 80171f8:	defff204 	addi	sp,sp,-56
 80171fc:	df000d15 	stw	fp,52(sp)
 8017200:	df000d04 	addi	fp,sp,52
 8017204:	e13ff615 	stw	r4,-40(fp)
 8017208:	2805883a 	mov	r2,r5
 801720c:	3007883a 	mov	r3,r6
 8017210:	e1fff315 	stw	r7,-52(fp)
 8017214:	e0bff50d 	sth	r2,-44(fp)
 8017218:	1805883a 	mov	r2,r3
 801721c:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8017220:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8017224:	e0bff317 	ldw	r2,-52(fp)
 8017228:	1000021e 	bne	r2,zero,8017234 <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
 801722c:	0005883a 	mov	r2,zero
 8017230:	0000b606 	br	801750c <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8017234:	e0bff617 	ldw	r2,-40(fp)
 8017238:	1000051e 	bne	r2,zero,8017250 <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 801723c:	e0bff317 	ldw	r2,-52(fp)
 8017240:	00c01b84 	movi	r3,110
 8017244:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017248:	0005883a 	mov	r2,zero
 801724c:	0000af06 	br	801750c <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8017250:	e0bff617 	ldw	r2,-40(fp)
 8017254:	10800003 	ldbu	r2,0(r2)
 8017258:	10803fcc 	andi	r2,r2,255
 801725c:	10800160 	cmpeqi	r2,r2,5
 8017260:	1000051e 	bne	r2,zero,8017278 <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 8017264:	e0bff317 	ldw	r2,-52(fp)
 8017268:	00c00044 	movi	r3,1
 801726c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017270:	0005883a 	mov	r2,zero
 8017274:	0000a506 	br	801750c <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8017278:	e0fff403 	ldbu	r3,-48(fp)
 801727c:	00bfe004 	movi	r2,-128
 8017280:	1884703a 	and	r2,r3,r2
 8017284:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 8017288:	e0bffdc3 	ldbu	r2,-9(fp)
 801728c:	10000626 	beq	r2,zero,80172a8 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 8017290:	e0bff403 	ldbu	r2,-48(fp)
 8017294:	10801fcc 	andi	r2,r2,127
 8017298:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
 801729c:	00800044 	movi	r2,1
 80172a0:	e0bfff45 	stb	r2,-3(fp)
 80172a4:	00000106 	br	80172ac <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 80172a8:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 80172ac:	e0bff317 	ldw	r2,-52(fp)
 80172b0:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
 80172b4:	0005303a 	rdctl	r2,status
 80172b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80172bc:	e0fffc17 	ldw	r3,-16(fp)
 80172c0:	00bfff84 	movi	r2,-2
 80172c4:	1884703a 	and	r2,r3,r2
 80172c8:	1001703a 	wrctl	status,r2
  return context;
 80172cc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 80172d0:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
 80172d4:	e0bff403 	ldbu	r2,-48(fp)
 80172d8:	10c000e0 	cmpeqi	r3,r2,3
 80172dc:	1800281e 	bne	r3,zero,8017380 <OSFlagAccept+0x188>
 80172e0:	10c00108 	cmpgei	r3,r2,4
 80172e4:	18007e1e 	bne	r3,zero,80174e0 <OSFlagAccept+0x2e8>
 80172e8:	10c000a0 	cmpeqi	r3,r2,2
 80172ec:	1800061e 	bne	r3,zero,8017308 <OSFlagAccept+0x110>
 80172f0:	10c000c8 	cmpgei	r3,r2,3
 80172f4:	18007a1e 	bne	r3,zero,80174e0 <OSFlagAccept+0x2e8>
 80172f8:	10003e26 	beq	r2,zero,80173f4 <OSFlagAccept+0x1fc>
 80172fc:	10800060 	cmpeqi	r2,r2,1
 8017300:	10005a1e 	bne	r2,zero,801746c <OSFlagAccept+0x274>
 8017304:	00007606 	br	80174e0 <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 8017308:	e0bff617 	ldw	r2,-40(fp)
 801730c:	1080020b 	ldhu	r2,8(r2)
 8017310:	e0fff50b 	ldhu	r3,-44(fp)
 8017314:	1884703a 	and	r2,r3,r2
 8017318:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 801731c:	e0ffff8b 	ldhu	r3,-2(fp)
 8017320:	e0bff50b 	ldhu	r2,-44(fp)
 8017324:	18800d1e 	bne	r3,r2,801735c <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017328:	e0bfff43 	ldbu	r2,-3(fp)
 801732c:	10800058 	cmpnei	r2,r2,1
 8017330:	10000d1e 	bne	r2,zero,8017368 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8017334:	e0bff617 	ldw	r2,-40(fp)
 8017338:	1080020b 	ldhu	r2,8(r2)
 801733c:	1007883a 	mov	r3,r2
 8017340:	e0bfff8b 	ldhu	r2,-2(fp)
 8017344:	0084303a 	nor	r2,zero,r2
 8017348:	1884703a 	and	r2,r3,r2
 801734c:	1007883a 	mov	r3,r2
 8017350:	e0bff617 	ldw	r2,-40(fp)
 8017354:	10c0020d 	sth	r3,8(r2)
 8017358:	00000306 	br	8017368 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 801735c:	e0bff317 	ldw	r2,-52(fp)
 8017360:	00c01c04 	movi	r3,112
 8017364:	10c00005 	stb	r3,0(r2)
 8017368:	e0bffe17 	ldw	r2,-8(fp)
 801736c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017370:	e0bffb17 	ldw	r2,-20(fp)
 8017374:	1001703a 	wrctl	status,r2
}
 8017378:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 801737c:	00006206 	br	8017508 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 8017380:	e0bff617 	ldw	r2,-40(fp)
 8017384:	1080020b 	ldhu	r2,8(r2)
 8017388:	e0fff50b 	ldhu	r3,-44(fp)
 801738c:	1884703a 	and	r2,r3,r2
 8017390:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8017394:	e0bfff8b 	ldhu	r2,-2(fp)
 8017398:	10000d26 	beq	r2,zero,80173d0 <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 801739c:	e0bfff43 	ldbu	r2,-3(fp)
 80173a0:	10800058 	cmpnei	r2,r2,1
 80173a4:	10000d1e 	bne	r2,zero,80173dc <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 80173a8:	e0bff617 	ldw	r2,-40(fp)
 80173ac:	1080020b 	ldhu	r2,8(r2)
 80173b0:	1007883a 	mov	r3,r2
 80173b4:	e0bfff8b 	ldhu	r2,-2(fp)
 80173b8:	0084303a 	nor	r2,zero,r2
 80173bc:	1884703a 	and	r2,r3,r2
 80173c0:	1007883a 	mov	r3,r2
 80173c4:	e0bff617 	ldw	r2,-40(fp)
 80173c8:	10c0020d 	sth	r3,8(r2)
 80173cc:	00000306 	br	80173dc <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80173d0:	e0bff317 	ldw	r2,-52(fp)
 80173d4:	00c01c04 	movi	r3,112
 80173d8:	10c00005 	stb	r3,0(r2)
 80173dc:	e0bffe17 	ldw	r2,-8(fp)
 80173e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80173e4:	e0bffa17 	ldw	r2,-24(fp)
 80173e8:	1001703a 	wrctl	status,r2
}
 80173ec:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 80173f0:	00004506 	br	8017508 <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 80173f4:	e0bff617 	ldw	r2,-40(fp)
 80173f8:	1080020b 	ldhu	r2,8(r2)
 80173fc:	0084303a 	nor	r2,zero,r2
 8017400:	1007883a 	mov	r3,r2
 8017404:	e0bff50b 	ldhu	r2,-44(fp)
 8017408:	1884703a 	and	r2,r3,r2
 801740c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8017410:	e0ffff8b 	ldhu	r3,-2(fp)
 8017414:	e0bff50b 	ldhu	r2,-44(fp)
 8017418:	18800b1e 	bne	r3,r2,8017448 <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 801741c:	e0bfff43 	ldbu	r2,-3(fp)
 8017420:	10800058 	cmpnei	r2,r2,1
 8017424:	10000b1e 	bne	r2,zero,8017454 <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8017428:	e0bff617 	ldw	r2,-40(fp)
 801742c:	1080020b 	ldhu	r2,8(r2)
 8017430:	e0ffff8b 	ldhu	r3,-2(fp)
 8017434:	1884b03a 	or	r2,r3,r2
 8017438:	1007883a 	mov	r3,r2
 801743c:	e0bff617 	ldw	r2,-40(fp)
 8017440:	10c0020d 	sth	r3,8(r2)
 8017444:	00000306 	br	8017454 <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8017448:	e0bff317 	ldw	r2,-52(fp)
 801744c:	00c01c04 	movi	r3,112
 8017450:	10c00005 	stb	r3,0(r2)
 8017454:	e0bffe17 	ldw	r2,-8(fp)
 8017458:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801745c:	e0bff917 	ldw	r2,-28(fp)
 8017460:	1001703a 	wrctl	status,r2
}
 8017464:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 8017468:	00002706 	br	8017508 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 801746c:	e0bff617 	ldw	r2,-40(fp)
 8017470:	1080020b 	ldhu	r2,8(r2)
 8017474:	0084303a 	nor	r2,zero,r2
 8017478:	1007883a 	mov	r3,r2
 801747c:	e0bff50b 	ldhu	r2,-44(fp)
 8017480:	1884703a 	and	r2,r3,r2
 8017484:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8017488:	e0bfff8b 	ldhu	r2,-2(fp)
 801748c:	10000b26 	beq	r2,zero,80174bc <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017490:	e0bfff43 	ldbu	r2,-3(fp)
 8017494:	10800058 	cmpnei	r2,r2,1
 8017498:	10000b1e 	bne	r2,zero,80174c8 <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 801749c:	e0bff617 	ldw	r2,-40(fp)
 80174a0:	1080020b 	ldhu	r2,8(r2)
 80174a4:	e0ffff8b 	ldhu	r3,-2(fp)
 80174a8:	1884b03a 	or	r2,r3,r2
 80174ac:	1007883a 	mov	r3,r2
 80174b0:	e0bff617 	ldw	r2,-40(fp)
 80174b4:	10c0020d 	sth	r3,8(r2)
 80174b8:	00000306 	br	80174c8 <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80174bc:	e0bff317 	ldw	r2,-52(fp)
 80174c0:	00c01c04 	movi	r3,112
 80174c4:	10c00005 	stb	r3,0(r2)
 80174c8:	e0bffe17 	ldw	r2,-8(fp)
 80174cc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 80174d0:	e0bff817 	ldw	r2,-32(fp)
 80174d4:	1001703a 	wrctl	status,r2
}
 80174d8:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 80174dc:	00000a06 	br	8017508 <OSFlagAccept+0x310>
 80174e0:	e0bffe17 	ldw	r2,-8(fp)
 80174e4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80174e8:	e0bff717 	ldw	r2,-36(fp)
 80174ec:	1001703a 	wrctl	status,r2
}
 80174f0:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 80174f4:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 80174f8:	e0bff317 	ldw	r2,-52(fp)
 80174fc:	00c01bc4 	movi	r3,111
 8017500:	10c00005 	stb	r3,0(r2)
             break;
 8017504:	0001883a 	nop
    }
    return (flags_rdy);
 8017508:	e0bfff8b 	ldhu	r2,-2(fp)
}
 801750c:	e037883a 	mov	sp,fp
 8017510:	df000017 	ldw	fp,0(sp)
 8017514:	dec00104 	addi	sp,sp,4
 8017518:	f800283a 	ret

0801751c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 801751c:	defff804 	addi	sp,sp,-32
 8017520:	df000715 	stw	fp,28(sp)
 8017524:	df000704 	addi	fp,sp,28
 8017528:	2005883a 	mov	r2,r4
 801752c:	e17ff915 	stw	r5,-28(fp)
 8017530:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 8017534:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 8017538:	e0bff917 	ldw	r2,-28(fp)
 801753c:	1000021e 	bne	r2,zero,8017548 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 8017540:	0005883a 	mov	r2,zero
 8017544:	00003506 	br	801761c <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 8017548:	d0a07403 	ldbu	r2,-32304(gp)
 801754c:	10803fcc 	andi	r2,r2,255
 8017550:	10000526 	beq	r2,zero,8017568 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 8017554:	e0bff917 	ldw	r2,-28(fp)
 8017558:	00c00404 	movi	r3,16
 801755c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 8017560:	0005883a 	mov	r2,zero
 8017564:	00002d06 	br	801761c <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
 8017568:	0005303a 	rdctl	r2,status
 801756c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017570:	e0fffd17 	ldw	r3,-12(fp)
 8017574:	00bfff84 	movi	r2,-2
 8017578:	1884703a 	and	r2,r3,r2
 801757c:	1001703a 	wrctl	status,r2
  return context;
 8017580:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8017584:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 8017588:	d0a07717 	ldw	r2,-32292(gp)
 801758c:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 8017590:	e0bffe17 	ldw	r2,-8(fp)
 8017594:	10001826 	beq	r2,zero,80175f8 <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 8017598:	d0a07717 	ldw	r2,-32292(gp)
 801759c:	10800117 	ldw	r2,4(r2)
 80175a0:	d0a07715 	stw	r2,-32292(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 80175a4:	e0bffe17 	ldw	r2,-8(fp)
 80175a8:	00c00144 	movi	r3,5
 80175ac:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 80175b0:	e0bffe17 	ldw	r2,-8(fp)
 80175b4:	e0fffa0b 	ldhu	r3,-24(fp)
 80175b8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 80175bc:	e0bffe17 	ldw	r2,-8(fp)
 80175c0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 80175c4:	e0bffe17 	ldw	r2,-8(fp)
 80175c8:	00c00fc4 	movi	r3,63
 80175cc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 80175d0:	e0bffe17 	ldw	r2,-8(fp)
 80175d4:	100002c5 	stb	zero,11(r2)
 80175d8:	e0bfff17 	ldw	r2,-4(fp)
 80175dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80175e0:	e0bffc17 	ldw	r2,-16(fp)
 80175e4:	1001703a 	wrctl	status,r2
}
 80175e8:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 80175ec:	e0bff917 	ldw	r2,-28(fp)
 80175f0:	10000005 	stb	zero,0(r2)
 80175f4:	00000806 	br	8017618 <OSFlagCreate+0xfc>
 80175f8:	e0bfff17 	ldw	r2,-4(fp)
 80175fc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017600:	e0bffb17 	ldw	r2,-20(fp)
 8017604:	1001703a 	wrctl	status,r2
}
 8017608:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 801760c:	e0bff917 	ldw	r2,-28(fp)
 8017610:	00c01c84 	movi	r3,114
 8017614:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 8017618:	e0bffe17 	ldw	r2,-8(fp)
}
 801761c:	e037883a 	mov	sp,fp
 8017620:	df000017 	ldw	fp,0(sp)
 8017624:	dec00104 	addi	sp,sp,4
 8017628:	f800283a 	ret

0801762c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 801762c:	defff204 	addi	sp,sp,-56
 8017630:	dfc00d15 	stw	ra,52(sp)
 8017634:	df000c15 	stw	fp,48(sp)
 8017638:	df000c04 	addi	fp,sp,48
 801763c:	e13ff615 	stw	r4,-40(fp)
 8017640:	2805883a 	mov	r2,r5
 8017644:	e1bff415 	stw	r6,-48(fp)
 8017648:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 801764c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8017650:	e0bff417 	ldw	r2,-48(fp)
 8017654:	1000021e 	bne	r2,zero,8017660 <OSFlagDel+0x34>
        return (pgrp);
 8017658:	e0bff617 	ldw	r2,-40(fp)
 801765c:	00008406 	br	8017870 <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8017660:	e0bff617 	ldw	r2,-40(fp)
 8017664:	1000051e 	bne	r2,zero,801767c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8017668:	e0bff417 	ldw	r2,-48(fp)
 801766c:	00c01b84 	movi	r3,110
 8017670:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 8017674:	e0bff617 	ldw	r2,-40(fp)
 8017678:	00007d06 	br	8017870 <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 801767c:	d0a07403 	ldbu	r2,-32304(gp)
 8017680:	10803fcc 	andi	r2,r2,255
 8017684:	10000526 	beq	r2,zero,801769c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 8017688:	e0bff417 	ldw	r2,-48(fp)
 801768c:	00c003c4 	movi	r3,15
 8017690:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 8017694:	e0bff617 	ldw	r2,-40(fp)
 8017698:	00007506 	br	8017870 <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 801769c:	e0bff617 	ldw	r2,-40(fp)
 80176a0:	10800003 	ldbu	r2,0(r2)
 80176a4:	10803fcc 	andi	r2,r2,255
 80176a8:	10800160 	cmpeqi	r2,r2,5
 80176ac:	1000051e 	bne	r2,zero,80176c4 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 80176b0:	e0bff417 	ldw	r2,-48(fp)
 80176b4:	00c00044 	movi	r3,1
 80176b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80176bc:	e0bff617 	ldw	r2,-40(fp)
 80176c0:	00006b06 	br	8017870 <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
 80176c4:	0005303a 	rdctl	r2,status
 80176c8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80176cc:	e0fffb17 	ldw	r3,-20(fp)
 80176d0:	00bfff84 	movi	r2,-2
 80176d4:	1884703a 	and	r2,r3,r2
 80176d8:	1001703a 	wrctl	status,r2
  return context;
 80176dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 80176e0:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 80176e4:	e0bff617 	ldw	r2,-40(fp)
 80176e8:	10800117 	ldw	r2,4(r2)
 80176ec:	10000326 	beq	r2,zero,80176fc <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 80176f0:	00800044 	movi	r2,1
 80176f4:	e0bfffc5 	stb	r2,-1(fp)
 80176f8:	00000106 	br	8017700 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 80176fc:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 8017700:	e0bff503 	ldbu	r2,-44(fp)
 8017704:	10000326 	beq	r2,zero,8017714 <OSFlagDel+0xe8>
 8017708:	10800060 	cmpeqi	r2,r2,1
 801770c:	1000251e 	bne	r2,zero,80177a4 <OSFlagDel+0x178>
 8017710:	00004b06 	br	8017840 <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 8017714:	e0bfffc3 	ldbu	r2,-1(fp)
 8017718:	1000171e 	bne	r2,zero,8017778 <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 801771c:	e0bff617 	ldw	r2,-40(fp)
 8017720:	00c00fc4 	movi	r3,63
 8017724:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8017728:	e0bff617 	ldw	r2,-40(fp)
 801772c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8017730:	e0bff617 	ldw	r2,-40(fp)
 8017734:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 8017738:	d0e07717 	ldw	r3,-32292(gp)
 801773c:	e0bff617 	ldw	r2,-40(fp)
 8017740:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 8017744:	e0bff617 	ldw	r2,-40(fp)
 8017748:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 801774c:	e0bff617 	ldw	r2,-40(fp)
 8017750:	d0a07715 	stw	r2,-32292(gp)
 8017754:	e0bffc17 	ldw	r2,-16(fp)
 8017758:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801775c:	e0bffa17 	ldw	r2,-24(fp)
 8017760:	1001703a 	wrctl	status,r2
}
 8017764:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 8017768:	e0bff417 	ldw	r2,-48(fp)
 801776c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 8017770:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 8017774:	00003d06 	br	801786c <OSFlagDel+0x240>
 8017778:	e0bffc17 	ldw	r2,-16(fp)
 801777c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017780:	e0bff917 	ldw	r2,-28(fp)
 8017784:	1001703a 	wrctl	status,r2
}
 8017788:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
 801778c:	e0bff417 	ldw	r2,-48(fp)
 8017790:	00c01244 	movi	r3,73
 8017794:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 8017798:	e0bff617 	ldw	r2,-40(fp)
 801779c:	e0bffd15 	stw	r2,-12(fp)
             break;
 80177a0:	00003206 	br	801786c <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 80177a4:	e0bff617 	ldw	r2,-40(fp)
 80177a8:	10800117 	ldw	r2,4(r2)
 80177ac:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 80177b0:	00000606 	br	80177cc <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 80177b4:	000b883a 	mov	r5,zero
 80177b8:	e13ffe17 	ldw	r4,-8(fp)
 80177bc:	80188240 	call	8018824 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80177c0:	e0bffe17 	ldw	r2,-8(fp)
 80177c4:	10800017 	ldw	r2,0(r2)
 80177c8:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 80177cc:	e0bffe17 	ldw	r2,-8(fp)
 80177d0:	103ff81e 	bne	r2,zero,80177b4 <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 80177d4:	e0bff617 	ldw	r2,-40(fp)
 80177d8:	00c00fc4 	movi	r3,63
 80177dc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 80177e0:	e0bff617 	ldw	r2,-40(fp)
 80177e4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80177e8:	e0bff617 	ldw	r2,-40(fp)
 80177ec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 80177f0:	d0e07717 	ldw	r3,-32292(gp)
 80177f4:	e0bff617 	ldw	r2,-40(fp)
 80177f8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 80177fc:	e0bff617 	ldw	r2,-40(fp)
 8017800:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 8017804:	e0bff617 	ldw	r2,-40(fp)
 8017808:	d0a07715 	stw	r2,-32292(gp)
 801780c:	e0bffc17 	ldw	r2,-16(fp)
 8017810:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8017814:	e0bff817 	ldw	r2,-32(fp)
 8017818:	1001703a 	wrctl	status,r2
}
 801781c:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8017820:	e0bfffc3 	ldbu	r2,-1(fp)
 8017824:	10800058 	cmpnei	r2,r2,1
 8017828:	1000011e 	bne	r2,zero,8017830 <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 801782c:	80169940 	call	8016994 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 8017830:	e0bff417 	ldw	r2,-48(fp)
 8017834:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 8017838:	e03ffd15 	stw	zero,-12(fp)
             break;
 801783c:	00000b06 	br	801786c <OSFlagDel+0x240>
 8017840:	e0bffc17 	ldw	r2,-16(fp)
 8017844:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8017848:	e0bff717 	ldw	r2,-36(fp)
 801784c:	1001703a 	wrctl	status,r2
}
 8017850:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 8017854:	e0bff417 	ldw	r2,-48(fp)
 8017858:	00c001c4 	movi	r3,7
 801785c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 8017860:	e0bff617 	ldw	r2,-40(fp)
 8017864:	e0bffd15 	stw	r2,-12(fp)
             break;
 8017868:	0001883a 	nop
    }
    return (pgrp_return);
 801786c:	e0bffd17 	ldw	r2,-12(fp)
}
 8017870:	e037883a 	mov	sp,fp
 8017874:	dfc00117 	ldw	ra,4(sp)
 8017878:	df000017 	ldw	fp,0(sp)
 801787c:	dec00204 	addi	sp,sp,8
 8017880:	f800283a 	ret

08017884 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 8017884:	defff604 	addi	sp,sp,-40
 8017888:	dfc00915 	stw	ra,36(sp)
 801788c:	df000815 	stw	fp,32(sp)
 8017890:	df000804 	addi	fp,sp,32
 8017894:	e13ffa15 	stw	r4,-24(fp)
 8017898:	e17ff915 	stw	r5,-28(fp)
 801789c:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80178a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80178a4:	e0bff817 	ldw	r2,-32(fp)
 80178a8:	1000021e 	bne	r2,zero,80178b4 <OSFlagNameGet+0x30>
        return (0);
 80178ac:	0005883a 	mov	r2,zero
 80178b0:	00003b06 	br	80179a0 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 80178b4:	e0bffa17 	ldw	r2,-24(fp)
 80178b8:	1000051e 	bne	r2,zero,80178d0 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80178bc:	e0bff817 	ldw	r2,-32(fp)
 80178c0:	00c01b84 	movi	r3,110
 80178c4:	10c00005 	stb	r3,0(r2)
        return (0);
 80178c8:	0005883a 	mov	r2,zero
 80178cc:	00003406 	br	80179a0 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80178d0:	e0bff917 	ldw	r2,-28(fp)
 80178d4:	1000051e 	bne	r2,zero,80178ec <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 80178d8:	e0bff817 	ldw	r2,-32(fp)
 80178dc:	00c00304 	movi	r3,12
 80178e0:	10c00005 	stb	r3,0(r2)
        return (0);
 80178e4:	0005883a 	mov	r2,zero
 80178e8:	00002d06 	br	80179a0 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80178ec:	d0a07403 	ldbu	r2,-32304(gp)
 80178f0:	10803fcc 	andi	r2,r2,255
 80178f4:	10000526 	beq	r2,zero,801790c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 80178f8:	e0bff817 	ldw	r2,-32(fp)
 80178fc:	00c00444 	movi	r3,17
 8017900:	10c00005 	stb	r3,0(r2)
        return (0);
 8017904:	0005883a 	mov	r2,zero
 8017908:	00002506 	br	80179a0 <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
 801790c:	0005303a 	rdctl	r2,status
 8017910:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017914:	e0fffd17 	ldw	r3,-12(fp)
 8017918:	00bfff84 	movi	r2,-2
 801791c:	1884703a 	and	r2,r3,r2
 8017920:	1001703a 	wrctl	status,r2
  return context;
 8017924:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8017928:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 801792c:	e0bffa17 	ldw	r2,-24(fp)
 8017930:	10800003 	ldbu	r2,0(r2)
 8017934:	10803fcc 	andi	r2,r2,255
 8017938:	10800160 	cmpeqi	r2,r2,5
 801793c:	10000a1e 	bne	r2,zero,8017968 <OSFlagNameGet+0xe4>
 8017940:	e0bfff17 	ldw	r2,-4(fp)
 8017944:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8017948:	e0bffc17 	ldw	r2,-16(fp)
 801794c:	1001703a 	wrctl	status,r2
}
 8017950:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8017954:	e0bff817 	ldw	r2,-32(fp)
 8017958:	00c00044 	movi	r3,1
 801795c:	10c00005 	stb	r3,0(r2)
        return (0);
 8017960:	0005883a 	mov	r2,zero
 8017964:	00000e06 	br	80179a0 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 8017968:	e0bffa17 	ldw	r2,-24(fp)
 801796c:	10800284 	addi	r2,r2,10
 8017970:	100b883a 	mov	r5,r2
 8017974:	e13ff917 	ldw	r4,-28(fp)
 8017978:	8016acc0 	call	8016acc <OS_StrCopy>
 801797c:	e0bffec5 	stb	r2,-5(fp)
 8017980:	e0bfff17 	ldw	r2,-4(fp)
 8017984:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017988:	e0bffb17 	ldw	r2,-20(fp)
 801798c:	1001703a 	wrctl	status,r2
}
 8017990:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8017994:	e0bff817 	ldw	r2,-32(fp)
 8017998:	10000005 	stb	zero,0(r2)
    return (len);
 801799c:	e0bffec3 	ldbu	r2,-5(fp)
}
 80179a0:	e037883a 	mov	sp,fp
 80179a4:	dfc00117 	ldw	ra,4(sp)
 80179a8:	df000017 	ldw	fp,0(sp)
 80179ac:	dec00204 	addi	sp,sp,8
 80179b0:	f800283a 	ret

080179b4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 80179b4:	defff504 	addi	sp,sp,-44
 80179b8:	dfc00a15 	stw	ra,40(sp)
 80179bc:	df000915 	stw	fp,36(sp)
 80179c0:	df000904 	addi	fp,sp,36
 80179c4:	e13ff915 	stw	r4,-28(fp)
 80179c8:	e17ff815 	stw	r5,-32(fp)
 80179cc:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80179d0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80179d4:	e0bff717 	ldw	r2,-36(fp)
 80179d8:	10004526 	beq	r2,zero,8017af0 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 80179dc:	e0bff917 	ldw	r2,-28(fp)
 80179e0:	1000041e 	bne	r2,zero,80179f4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80179e4:	e0bff717 	ldw	r2,-36(fp)
 80179e8:	00c01b84 	movi	r3,110
 80179ec:	10c00005 	stb	r3,0(r2)
        return;
 80179f0:	00004006 	br	8017af4 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80179f4:	e0bff817 	ldw	r2,-32(fp)
 80179f8:	1000041e 	bne	r2,zero,8017a0c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 80179fc:	e0bff717 	ldw	r2,-36(fp)
 8017a00:	00c00304 	movi	r3,12
 8017a04:	10c00005 	stb	r3,0(r2)
        return;
 8017a08:	00003a06 	br	8017af4 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8017a0c:	d0a07403 	ldbu	r2,-32304(gp)
 8017a10:	10803fcc 	andi	r2,r2,255
 8017a14:	10000426 	beq	r2,zero,8017a28 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 8017a18:	e0bff717 	ldw	r2,-36(fp)
 8017a1c:	00c00484 	movi	r3,18
 8017a20:	10c00005 	stb	r3,0(r2)
        return;
 8017a24:	00003306 	br	8017af4 <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
 8017a28:	0005303a 	rdctl	r2,status
 8017a2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017a30:	e0fffd17 	ldw	r3,-12(fp)
 8017a34:	00bfff84 	movi	r2,-2
 8017a38:	1884703a 	and	r2,r3,r2
 8017a3c:	1001703a 	wrctl	status,r2
  return context;
 8017a40:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8017a44:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 8017a48:	e0bff917 	ldw	r2,-28(fp)
 8017a4c:	10800003 	ldbu	r2,0(r2)
 8017a50:	10803fcc 	andi	r2,r2,255
 8017a54:	10800160 	cmpeqi	r2,r2,5
 8017a58:	1000091e 	bne	r2,zero,8017a80 <OSFlagNameSet+0xcc>
 8017a5c:	e0bfff17 	ldw	r2,-4(fp)
 8017a60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8017a64:	e0bffc17 	ldw	r2,-16(fp)
 8017a68:	1001703a 	wrctl	status,r2
}
 8017a6c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8017a70:	e0bff717 	ldw	r2,-36(fp)
 8017a74:	00c00044 	movi	r3,1
 8017a78:	10c00005 	stb	r3,0(r2)
        return;
 8017a7c:	00001d06 	br	8017af4 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8017a80:	e13ff817 	ldw	r4,-32(fp)
 8017a84:	8016b400 	call	8016b40 <OS_StrLen>
 8017a88:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 8017a8c:	e0bffec3 	ldbu	r2,-5(fp)
 8017a90:	10800830 	cmpltui	r2,r2,32
 8017a94:	1000091e 	bne	r2,zero,8017abc <OSFlagNameSet+0x108>
 8017a98:	e0bfff17 	ldw	r2,-4(fp)
 8017a9c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017aa0:	e0bffb17 	ldw	r2,-20(fp)
 8017aa4:	1001703a 	wrctl	status,r2
}
 8017aa8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 8017aac:	e0bff717 	ldw	r2,-36(fp)
 8017ab0:	00c01cc4 	movi	r3,115
 8017ab4:	10c00005 	stb	r3,0(r2)
        return;
 8017ab8:	00000e06 	br	8017af4 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 8017abc:	e0bff917 	ldw	r2,-28(fp)
 8017ac0:	10800284 	addi	r2,r2,10
 8017ac4:	e17ff817 	ldw	r5,-32(fp)
 8017ac8:	1009883a 	mov	r4,r2
 8017acc:	8016acc0 	call	8016acc <OS_StrCopy>
 8017ad0:	e0bfff17 	ldw	r2,-4(fp)
 8017ad4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8017ad8:	e0bffa17 	ldw	r2,-24(fp)
 8017adc:	1001703a 	wrctl	status,r2
}
 8017ae0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8017ae4:	e0bff717 	ldw	r2,-36(fp)
 8017ae8:	10000005 	stb	zero,0(r2)
    return;
 8017aec:	00000106 	br	8017af4 <OSFlagNameSet+0x140>
        return;
 8017af0:	0001883a 	nop
}
 8017af4:	e037883a 	mov	sp,fp
 8017af8:	dfc00117 	ldw	ra,4(sp)
 8017afc:	df000017 	ldw	fp,0(sp)
 8017b00:	dec00204 	addi	sp,sp,8
 8017b04:	f800283a 	ret

08017b08 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 8017b08:	deffe204 	addi	sp,sp,-120
 8017b0c:	dfc01d15 	stw	ra,116(sp)
 8017b10:	df001c15 	stw	fp,112(sp)
 8017b14:	df001c04 	addi	fp,sp,112
 8017b18:	e13fe815 	stw	r4,-96(fp)
 8017b1c:	2805883a 	mov	r2,r5
 8017b20:	3009883a 	mov	r4,r6
 8017b24:	3807883a 	mov	r3,r7
 8017b28:	e0bfe70d 	sth	r2,-100(fp)
 8017b2c:	2005883a 	mov	r2,r4
 8017b30:	e0bfe605 	stb	r2,-104(fp)
 8017b34:	1805883a 	mov	r2,r3
 8017b38:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8017b3c:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8017b40:	e0800217 	ldw	r2,8(fp)
 8017b44:	1000021e 	bne	r2,zero,8017b50 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
 8017b48:	0005883a 	mov	r2,zero
 8017b4c:	00016906 	br	80180f4 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8017b50:	e0bfe817 	ldw	r2,-96(fp)
 8017b54:	1000051e 	bne	r2,zero,8017b6c <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8017b58:	e0800217 	ldw	r2,8(fp)
 8017b5c:	00c01b84 	movi	r3,110
 8017b60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017b64:	0005883a 	mov	r2,zero
 8017b68:	00016206 	br	80180f4 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8017b6c:	d0a07403 	ldbu	r2,-32304(gp)
 8017b70:	10803fcc 	andi	r2,r2,255
 8017b74:	10000526 	beq	r2,zero,8017b8c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 8017b78:	e0800217 	ldw	r2,8(fp)
 8017b7c:	00c00084 	movi	r3,2
 8017b80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017b84:	0005883a 	mov	r2,zero
 8017b88:	00015a06 	br	80180f4 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 8017b8c:	d0a06603 	ldbu	r2,-32360(gp)
 8017b90:	10803fcc 	andi	r2,r2,255
 8017b94:	10000526 	beq	r2,zero,8017bac <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 8017b98:	e0800217 	ldw	r2,8(fp)
 8017b9c:	00c00344 	movi	r3,13
 8017ba0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017ba4:	0005883a 	mov	r2,zero
 8017ba8:	00015206 	br	80180f4 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8017bac:	e0bfe817 	ldw	r2,-96(fp)
 8017bb0:	10800003 	ldbu	r2,0(r2)
 8017bb4:	10803fcc 	andi	r2,r2,255
 8017bb8:	10800160 	cmpeqi	r2,r2,5
 8017bbc:	1000051e 	bne	r2,zero,8017bd4 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
 8017bc0:	e0800217 	ldw	r2,8(fp)
 8017bc4:	00c00044 	movi	r3,1
 8017bc8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8017bcc:	0005883a 	mov	r2,zero
 8017bd0:	00014806 	br	80180f4 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8017bd4:	e0ffe603 	ldbu	r3,-104(fp)
 8017bd8:	00bfe004 	movi	r2,-128
 8017bdc:	1884703a 	and	r2,r3,r2
 8017be0:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 8017be4:	e0bffdc3 	ldbu	r2,-9(fp)
 8017be8:	10000626 	beq	r2,zero,8017c04 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 8017bec:	e0bfe603 	ldbu	r2,-104(fp)
 8017bf0:	10801fcc 	andi	r2,r2,127
 8017bf4:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
 8017bf8:	00800044 	movi	r2,1
 8017bfc:	e0bfffc5 	stb	r2,-1(fp)
 8017c00:	00000106 	br	8017c08 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
 8017c04:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
 8017c08:	0005303a 	rdctl	r2,status
 8017c0c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017c10:	e0fffb17 	ldw	r3,-20(fp)
 8017c14:	00bfff84 	movi	r2,-2
 8017c18:	1884703a 	and	r2,r3,r2
 8017c1c:	1001703a 	wrctl	status,r2
  return context;
 8017c20:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8017c24:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
 8017c28:	e0bfe603 	ldbu	r2,-104(fp)
 8017c2c:	10c000e0 	cmpeqi	r3,r2,3
 8017c30:	18003a1e 	bne	r3,zero,8017d1c <OSFlagPend+0x214>
 8017c34:	10c00108 	cmpgei	r3,r2,4
 8017c38:	1800c61e 	bne	r3,zero,8017f54 <OSFlagPend+0x44c>
 8017c3c:	10c000a0 	cmpeqi	r3,r2,2
 8017c40:	1800061e 	bne	r3,zero,8017c5c <OSFlagPend+0x154>
 8017c44:	10c000c8 	cmpgei	r3,r2,3
 8017c48:	1800c21e 	bne	r3,zero,8017f54 <OSFlagPend+0x44c>
 8017c4c:	10006226 	beq	r2,zero,8017dd8 <OSFlagPend+0x2d0>
 8017c50:	10800060 	cmpeqi	r2,r2,1
 8017c54:	1000901e 	bne	r2,zero,8017e98 <OSFlagPend+0x390>
 8017c58:	0000be06 	br	8017f54 <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8017c5c:	e0bfe817 	ldw	r2,-96(fp)
 8017c60:	1080020b 	ldhu	r2,8(r2)
 8017c64:	e0ffe70b 	ldhu	r3,-100(fp)
 8017c68:	1884703a 	and	r2,r3,r2
 8017c6c:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8017c70:	e0fffd0b 	ldhu	r3,-12(fp)
 8017c74:	e0bfe70b 	ldhu	r2,-100(fp)
 8017c78:	1880181e 	bne	r3,r2,8017cdc <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017c7c:	e0bfffc3 	ldbu	r2,-1(fp)
 8017c80:	10800058 	cmpnei	r2,r2,1
 8017c84:	1000091e 	bne	r2,zero,8017cac <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8017c88:	e0bfe817 	ldw	r2,-96(fp)
 8017c8c:	1080020b 	ldhu	r2,8(r2)
 8017c90:	1007883a 	mov	r3,r2
 8017c94:	e0bffd0b 	ldhu	r2,-12(fp)
 8017c98:	0084303a 	nor	r2,zero,r2
 8017c9c:	1884703a 	and	r2,r3,r2
 8017ca0:	1007883a 	mov	r3,r2
 8017ca4:	e0bfe817 	ldw	r2,-96(fp)
 8017ca8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8017cac:	d0a07517 	ldw	r2,-32300(gp)
 8017cb0:	e0fffd0b 	ldhu	r3,-12(fp)
 8017cb4:	10c00b0d 	sth	r3,44(r2)
 8017cb8:	e0bffe17 	ldw	r2,-8(fp)
 8017cbc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8017cc0:	e0bffa17 	ldw	r2,-24(fp)
 8017cc4:	1001703a 	wrctl	status,r2
}
 8017cc8:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8017ccc:	e0800217 	ldw	r2,8(fp)
 8017cd0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8017cd4:	e0bffd0b 	ldhu	r2,-12(fp)
 8017cd8:	00010606 	br	80180f4 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8017cdc:	e13fe70b 	ldhu	r4,-100(fp)
 8017ce0:	e17fe603 	ldbu	r5,-104(fp)
 8017ce4:	e0bfe50b 	ldhu	r2,-108(fp)
 8017ce8:	e0ffe904 	addi	r3,fp,-92
 8017cec:	d8800015 	stw	r2,0(sp)
 8017cf0:	280f883a 	mov	r7,r5
 8017cf4:	200d883a 	mov	r6,r4
 8017cf8:	180b883a 	mov	r5,r3
 8017cfc:	e13fe817 	ldw	r4,-96(fp)
 8017d00:	80185e00 	call	80185e0 <OS_FlagBlock>
 8017d04:	e0bffe17 	ldw	r2,-8(fp)
 8017d08:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017d0c:	e0bff917 	ldw	r2,-28(fp)
 8017d10:	1001703a 	wrctl	status,r2
}
 8017d14:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8017d18:	00009906 	br	8017f80 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8017d1c:	e0bfe817 	ldw	r2,-96(fp)
 8017d20:	1080020b 	ldhu	r2,8(r2)
 8017d24:	e0ffe70b 	ldhu	r3,-100(fp)
 8017d28:	1884703a 	and	r2,r3,r2
 8017d2c:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8017d30:	e0bffd0b 	ldhu	r2,-12(fp)
 8017d34:	10001826 	beq	r2,zero,8017d98 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017d38:	e0bfffc3 	ldbu	r2,-1(fp)
 8017d3c:	10800058 	cmpnei	r2,r2,1
 8017d40:	1000091e 	bne	r2,zero,8017d68 <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 8017d44:	e0bfe817 	ldw	r2,-96(fp)
 8017d48:	1080020b 	ldhu	r2,8(r2)
 8017d4c:	1007883a 	mov	r3,r2
 8017d50:	e0bffd0b 	ldhu	r2,-12(fp)
 8017d54:	0084303a 	nor	r2,zero,r2
 8017d58:	1884703a 	and	r2,r3,r2
 8017d5c:	1007883a 	mov	r3,r2
 8017d60:	e0bfe817 	ldw	r2,-96(fp)
 8017d64:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8017d68:	d0a07517 	ldw	r2,-32300(gp)
 8017d6c:	e0fffd0b 	ldhu	r3,-12(fp)
 8017d70:	10c00b0d 	sth	r3,44(r2)
 8017d74:	e0bffe17 	ldw	r2,-8(fp)
 8017d78:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8017d7c:	e0bff817 	ldw	r2,-32(fp)
 8017d80:	1001703a 	wrctl	status,r2
}
 8017d84:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8017d88:	e0800217 	ldw	r2,8(fp)
 8017d8c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8017d90:	e0bffd0b 	ldhu	r2,-12(fp)
 8017d94:	0000d706 	br	80180f4 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8017d98:	e13fe70b 	ldhu	r4,-100(fp)
 8017d9c:	e17fe603 	ldbu	r5,-104(fp)
 8017da0:	e0bfe50b 	ldhu	r2,-108(fp)
 8017da4:	e0ffe904 	addi	r3,fp,-92
 8017da8:	d8800015 	stw	r2,0(sp)
 8017dac:	280f883a 	mov	r7,r5
 8017db0:	200d883a 	mov	r6,r4
 8017db4:	180b883a 	mov	r5,r3
 8017db8:	e13fe817 	ldw	r4,-96(fp)
 8017dbc:	80185e00 	call	80185e0 <OS_FlagBlock>
 8017dc0:	e0bffe17 	ldw	r2,-8(fp)
 8017dc4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8017dc8:	e0bff717 	ldw	r2,-36(fp)
 8017dcc:	1001703a 	wrctl	status,r2
}
 8017dd0:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8017dd4:	00006a06 	br	8017f80 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8017dd8:	e0bfe817 	ldw	r2,-96(fp)
 8017ddc:	1080020b 	ldhu	r2,8(r2)
 8017de0:	0084303a 	nor	r2,zero,r2
 8017de4:	1007883a 	mov	r3,r2
 8017de8:	e0bfe70b 	ldhu	r2,-100(fp)
 8017dec:	1884703a 	and	r2,r3,r2
 8017df0:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8017df4:	e0fffd0b 	ldhu	r3,-12(fp)
 8017df8:	e0bfe70b 	ldhu	r2,-100(fp)
 8017dfc:	1880161e 	bne	r3,r2,8017e58 <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017e00:	e0bfffc3 	ldbu	r2,-1(fp)
 8017e04:	10800058 	cmpnei	r2,r2,1
 8017e08:	1000071e 	bne	r2,zero,8017e28 <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8017e0c:	e0bfe817 	ldw	r2,-96(fp)
 8017e10:	1080020b 	ldhu	r2,8(r2)
 8017e14:	e0fffd0b 	ldhu	r3,-12(fp)
 8017e18:	1884b03a 	or	r2,r3,r2
 8017e1c:	1007883a 	mov	r3,r2
 8017e20:	e0bfe817 	ldw	r2,-96(fp)
 8017e24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8017e28:	d0a07517 	ldw	r2,-32300(gp)
 8017e2c:	e0fffd0b 	ldhu	r3,-12(fp)
 8017e30:	10c00b0d 	sth	r3,44(r2)
 8017e34:	e0bffe17 	ldw	r2,-8(fp)
 8017e38:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8017e3c:	e0bff617 	ldw	r2,-40(fp)
 8017e40:	1001703a 	wrctl	status,r2
}
 8017e44:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8017e48:	e0800217 	ldw	r2,8(fp)
 8017e4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8017e50:	e0bffd0b 	ldhu	r2,-12(fp)
 8017e54:	0000a706 	br	80180f4 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8017e58:	e13fe70b 	ldhu	r4,-100(fp)
 8017e5c:	e17fe603 	ldbu	r5,-104(fp)
 8017e60:	e0bfe50b 	ldhu	r2,-108(fp)
 8017e64:	e0ffe904 	addi	r3,fp,-92
 8017e68:	d8800015 	stw	r2,0(sp)
 8017e6c:	280f883a 	mov	r7,r5
 8017e70:	200d883a 	mov	r6,r4
 8017e74:	180b883a 	mov	r5,r3
 8017e78:	e13fe817 	ldw	r4,-96(fp)
 8017e7c:	80185e00 	call	80185e0 <OS_FlagBlock>
 8017e80:	e0bffe17 	ldw	r2,-8(fp)
 8017e84:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 8017e88:	e0bff517 	ldw	r2,-44(fp)
 8017e8c:	1001703a 	wrctl	status,r2
}
 8017e90:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8017e94:	00003a06 	br	8017f80 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 8017e98:	e0bfe817 	ldw	r2,-96(fp)
 8017e9c:	1080020b 	ldhu	r2,8(r2)
 8017ea0:	0084303a 	nor	r2,zero,r2
 8017ea4:	1007883a 	mov	r3,r2
 8017ea8:	e0bfe70b 	ldhu	r2,-100(fp)
 8017eac:	1884703a 	and	r2,r3,r2
 8017eb0:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8017eb4:	e0bffd0b 	ldhu	r2,-12(fp)
 8017eb8:	10001626 	beq	r2,zero,8017f14 <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8017ebc:	e0bfffc3 	ldbu	r2,-1(fp)
 8017ec0:	10800058 	cmpnei	r2,r2,1
 8017ec4:	1000071e 	bne	r2,zero,8017ee4 <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8017ec8:	e0bfe817 	ldw	r2,-96(fp)
 8017ecc:	1080020b 	ldhu	r2,8(r2)
 8017ed0:	e0fffd0b 	ldhu	r3,-12(fp)
 8017ed4:	1884b03a 	or	r2,r3,r2
 8017ed8:	1007883a 	mov	r3,r2
 8017edc:	e0bfe817 	ldw	r2,-96(fp)
 8017ee0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8017ee4:	d0a07517 	ldw	r2,-32300(gp)
 8017ee8:	e0fffd0b 	ldhu	r3,-12(fp)
 8017eec:	10c00b0d 	sth	r3,44(r2)
 8017ef0:	e0bffe17 	ldw	r2,-8(fp)
 8017ef4:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 8017ef8:	e0bff417 	ldw	r2,-48(fp)
 8017efc:	1001703a 	wrctl	status,r2
}
 8017f00:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8017f04:	e0800217 	ldw	r2,8(fp)
 8017f08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8017f0c:	e0bffd0b 	ldhu	r2,-12(fp)
 8017f10:	00007806 	br	80180f4 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8017f14:	e13fe70b 	ldhu	r4,-100(fp)
 8017f18:	e17fe603 	ldbu	r5,-104(fp)
 8017f1c:	e0bfe50b 	ldhu	r2,-108(fp)
 8017f20:	e0ffe904 	addi	r3,fp,-92
 8017f24:	d8800015 	stw	r2,0(sp)
 8017f28:	280f883a 	mov	r7,r5
 8017f2c:	200d883a 	mov	r6,r4
 8017f30:	180b883a 	mov	r5,r3
 8017f34:	e13fe817 	ldw	r4,-96(fp)
 8017f38:	80185e00 	call	80185e0 <OS_FlagBlock>
 8017f3c:	e0bffe17 	ldw	r2,-8(fp)
 8017f40:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
 8017f44:	e0bff317 	ldw	r2,-52(fp)
 8017f48:	1001703a 	wrctl	status,r2
}
 8017f4c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8017f50:	00000b06 	br	8017f80 <OSFlagPend+0x478>
 8017f54:	e0bffe17 	ldw	r2,-8(fp)
 8017f58:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
 8017f5c:	e0bff217 	ldw	r2,-56(fp)
 8017f60:	1001703a 	wrctl	status,r2
}
 8017f64:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8017f68:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 8017f6c:	e0800217 	ldw	r2,8(fp)
 8017f70:	00c01bc4 	movi	r3,111
 8017f74:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 8017f78:	e0bffd0b 	ldhu	r2,-12(fp)
 8017f7c:	00005d06 	br	80180f4 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 8017f80:	80169940 	call	8016994 <OS_Sched>
  NIOS2_READ_STATUS (context);
 8017f84:	0005303a 	rdctl	r2,status
 8017f88:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017f8c:	e0fff117 	ldw	r3,-60(fp)
 8017f90:	00bfff84 	movi	r2,-2
 8017f94:	1884703a 	and	r2,r3,r2
 8017f98:	1001703a 	wrctl	status,r2
  return context;
 8017f9c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 8017fa0:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 8017fa4:	d0a07517 	ldw	r2,-32300(gp)
 8017fa8:	10800c43 	ldbu	r2,49(r2)
 8017fac:	10803fcc 	andi	r2,r2,255
 8017fb0:	10001d26 	beq	r2,zero,8018028 <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8017fb4:	d0a07517 	ldw	r2,-32300(gp)
 8017fb8:	10800c43 	ldbu	r2,49(r2)
 8017fbc:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8017fc0:	d0a07517 	ldw	r2,-32300(gp)
 8017fc4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 8017fc8:	e0bfe904 	addi	r2,fp,-92
 8017fcc:	1009883a 	mov	r4,r2
 8017fd0:	80189180 	call	8018918 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8017fd4:	d0a07517 	ldw	r2,-32300(gp)
 8017fd8:	10000c05 	stb	zero,48(r2)
 8017fdc:	e0bffe17 	ldw	r2,-8(fp)
 8017fe0:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
 8017fe4:	e0bff017 	ldw	r2,-64(fp)
 8017fe8:	1001703a 	wrctl	status,r2
}
 8017fec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 8017ff0:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
 8017ff4:	e0bffcc3 	ldbu	r2,-13(fp)
 8017ff8:	10800098 	cmpnei	r2,r2,2
 8017ffc:	1000041e 	bne	r2,zero,8018010 <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 8018000:	e0800217 	ldw	r2,8(fp)
 8018004:	00c00384 	movi	r3,14
 8018008:	10c00005 	stb	r3,0(r2)
                 break;
 801800c:	00000406 	br	8018020 <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 8018010:	e0800217 	ldw	r2,8(fp)
 8018014:	00c00284 	movi	r3,10
 8018018:	10c00005 	stb	r3,0(r2)
                 break;
 801801c:	0001883a 	nop
        }
        return (flags_rdy);
 8018020:	e0bffd0b 	ldhu	r2,-12(fp)
 8018024:	00003306 	br	80180f4 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8018028:	d0a07517 	ldw	r2,-32300(gp)
 801802c:	10800b0b 	ldhu	r2,44(r2)
 8018030:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8018034:	e0bfffc3 	ldbu	r2,-1(fp)
 8018038:	10800058 	cmpnei	r2,r2,1
 801803c:	1000241e 	bne	r2,zero,80180d0 <OSFlagPend+0x5c8>
        switch (wait_type) {
 8018040:	e0bfe603 	ldbu	r2,-104(fp)
 8018044:	10c00088 	cmpgei	r3,r2,2
 8018048:	1800021e 	bne	r3,zero,8018054 <OSFlagPend+0x54c>
 801804c:	10000e0e 	bge	r2,zero,8018088 <OSFlagPend+0x580>
 8018050:	00001506 	br	80180a8 <OSFlagPend+0x5a0>
 8018054:	10bfff84 	addi	r2,r2,-2
 8018058:	108000a8 	cmpgeui	r2,r2,2
 801805c:	1000121e 	bne	r2,zero,80180a8 <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 8018060:	e0bfe817 	ldw	r2,-96(fp)
 8018064:	1080020b 	ldhu	r2,8(r2)
 8018068:	1007883a 	mov	r3,r2
 801806c:	e0bffd0b 	ldhu	r2,-12(fp)
 8018070:	0084303a 	nor	r2,zero,r2
 8018074:	1884703a 	and	r2,r3,r2
 8018078:	1007883a 	mov	r3,r2
 801807c:	e0bfe817 	ldw	r2,-96(fp)
 8018080:	10c0020d 	sth	r3,8(r2)
                 break;
 8018084:	00001306 	br	80180d4 <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8018088:	e0bfe817 	ldw	r2,-96(fp)
 801808c:	1080020b 	ldhu	r2,8(r2)
 8018090:	e0fffd0b 	ldhu	r3,-12(fp)
 8018094:	1884b03a 	or	r2,r3,r2
 8018098:	1007883a 	mov	r3,r2
 801809c:	e0bfe817 	ldw	r2,-96(fp)
 80180a0:	10c0020d 	sth	r3,8(r2)
                 break;
 80180a4:	00000b06 	br	80180d4 <OSFlagPend+0x5cc>
 80180a8:	e0bffe17 	ldw	r2,-8(fp)
 80180ac:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
 80180b0:	e0bfef17 	ldw	r2,-68(fp)
 80180b4:	1001703a 	wrctl	status,r2
}
 80180b8:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 80180bc:	e0800217 	ldw	r2,8(fp)
 80180c0:	00c01bc4 	movi	r3,111
 80180c4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 80180c8:	0005883a 	mov	r2,zero
 80180cc:	00000906 	br	80180f4 <OSFlagPend+0x5ec>
        }
    }
 80180d0:	0001883a 	nop
 80180d4:	e0bffe17 	ldw	r2,-8(fp)
 80180d8:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
 80180dc:	e0bfee17 	ldw	r2,-72(fp)
 80180e0:	1001703a 	wrctl	status,r2
}
 80180e4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 80180e8:	e0800217 	ldw	r2,8(fp)
 80180ec:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 80180f0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80180f4:	e037883a 	mov	sp,fp
 80180f8:	dfc00117 	ldw	ra,4(sp)
 80180fc:	df000017 	ldw	fp,0(sp)
 8018100:	dec00204 	addi	sp,sp,8
 8018104:	f800283a 	ret

08018108 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 8018108:	defffb04 	addi	sp,sp,-20
 801810c:	df000415 	stw	fp,16(sp)
 8018110:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8018114:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8018118:	0005303a 	rdctl	r2,status
 801811c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018120:	e0fffc17 	ldw	r3,-16(fp)
 8018124:	00bfff84 	movi	r2,-2
 8018128:	1884703a 	and	r2,r3,r2
 801812c:	1001703a 	wrctl	status,r2
  return context;
 8018130:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
 8018134:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 8018138:	d0a07517 	ldw	r2,-32300(gp)
 801813c:	10800b0b 	ldhu	r2,44(r2)
 8018140:	e0bffe8d 	sth	r2,-6(fp)
 8018144:	e0bfff17 	ldw	r2,-4(fp)
 8018148:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801814c:	e0bffd17 	ldw	r2,-12(fp)
 8018150:	1001703a 	wrctl	status,r2
}
 8018154:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
 8018158:	e0bffe8b 	ldhu	r2,-6(fp)
}
 801815c:	e037883a 	mov	sp,fp
 8018160:	df000017 	ldw	fp,0(sp)
 8018164:	dec00104 	addi	sp,sp,4
 8018168:	f800283a 	ret

0801816c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 801816c:	deffef04 	addi	sp,sp,-68
 8018170:	dfc01015 	stw	ra,64(sp)
 8018174:	df000f15 	stw	fp,60(sp)
 8018178:	df000f04 	addi	fp,sp,60
 801817c:	e13ff415 	stw	r4,-48(fp)
 8018180:	2805883a 	mov	r2,r5
 8018184:	3007883a 	mov	r3,r6
 8018188:	e1fff115 	stw	r7,-60(fp)
 801818c:	e0bff30d 	sth	r2,-52(fp)
 8018190:	1805883a 	mov	r2,r3
 8018194:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 8018198:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 801819c:	e0bff117 	ldw	r2,-60(fp)
 80181a0:	1000021e 	bne	r2,zero,80181ac <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
 80181a4:	0005883a 	mov	r2,zero
 80181a8:	0000d606 	br	8018504 <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 80181ac:	e0bff417 	ldw	r2,-48(fp)
 80181b0:	1000051e 	bne	r2,zero,80181c8 <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80181b4:	e0bff117 	ldw	r2,-60(fp)
 80181b8:	00c01b84 	movi	r3,110
 80181bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80181c0:	0005883a 	mov	r2,zero
 80181c4:	0000cf06 	br	8018504 <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 80181c8:	e0bff417 	ldw	r2,-48(fp)
 80181cc:	10800003 	ldbu	r2,0(r2)
 80181d0:	10803fcc 	andi	r2,r2,255
 80181d4:	10800160 	cmpeqi	r2,r2,5
 80181d8:	1000051e 	bne	r2,zero,80181f0 <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
 80181dc:	e0bff117 	ldw	r2,-60(fp)
 80181e0:	00c00044 	movi	r3,1
 80181e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80181e8:	0005883a 	mov	r2,zero
 80181ec:	0000c506 	br	8018504 <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
 80181f0:	0005303a 	rdctl	r2,status
 80181f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80181f8:	e0fffa17 	ldw	r3,-24(fp)
 80181fc:	00bfff84 	movi	r2,-2
 8018200:	1884703a 	and	r2,r3,r2
 8018204:	1001703a 	wrctl	status,r2
  return context;
 8018208:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 801820c:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
 8018210:	e0bff203 	ldbu	r2,-56(fp)
 8018214:	10000326 	beq	r2,zero,8018224 <OSFlagPost+0xb8>
 8018218:	10800060 	cmpeqi	r2,r2,1
 801821c:	10000b1e 	bne	r2,zero,801824c <OSFlagPost+0xe0>
 8018220:	00001206 	br	801826c <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 8018224:	e0bff417 	ldw	r2,-48(fp)
 8018228:	1080020b 	ldhu	r2,8(r2)
 801822c:	1007883a 	mov	r3,r2
 8018230:	e0bff30b 	ldhu	r2,-52(fp)
 8018234:	0084303a 	nor	r2,zero,r2
 8018238:	1884703a 	and	r2,r3,r2
 801823c:	1007883a 	mov	r3,r2
 8018240:	e0bff417 	ldw	r2,-48(fp)
 8018244:	10c0020d 	sth	r3,8(r2)
             break;
 8018248:	00001206 	br	8018294 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 801824c:	e0bff417 	ldw	r2,-48(fp)
 8018250:	1080020b 	ldhu	r2,8(r2)
 8018254:	e0fff30b 	ldhu	r3,-52(fp)
 8018258:	1884b03a 	or	r2,r3,r2
 801825c:	1007883a 	mov	r3,r2
 8018260:	e0bff417 	ldw	r2,-48(fp)
 8018264:	10c0020d 	sth	r3,8(r2)
             break;
 8018268:	00000a06 	br	8018294 <OSFlagPost+0x128>
 801826c:	e0bffd17 	ldw	r2,-12(fp)
 8018270:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018274:	e0bff917 	ldw	r2,-28(fp)
 8018278:	1001703a 	wrctl	status,r2
}
 801827c:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8018280:	e0bff117 	ldw	r2,-60(fp)
 8018284:	00c01c44 	movi	r3,113
 8018288:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 801828c:	0005883a 	mov	r2,zero
 8018290:	00009c06 	br	8018504 <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 8018294:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8018298:	e0bff417 	ldw	r2,-48(fp)
 801829c:	10800117 	ldw	r2,4(r2)
 80182a0:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 80182a4:	00007906 	br	801848c <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
 80182a8:	e0bfff17 	ldw	r2,-4(fp)
 80182ac:	10800483 	ldbu	r2,18(r2)
 80182b0:	10803fcc 	andi	r2,r2,255
 80182b4:	10c000e0 	cmpeqi	r3,r2,3
 80182b8:	1800201e 	bne	r3,zero,801833c <OSFlagPost+0x1d0>
 80182bc:	10c00108 	cmpgei	r3,r2,4
 80182c0:	18005e1e 	bne	r3,zero,801843c <OSFlagPost+0x2d0>
 80182c4:	10c000a0 	cmpeqi	r3,r2,2
 80182c8:	1800061e 	bne	r3,zero,80182e4 <OSFlagPost+0x178>
 80182cc:	10c000c8 	cmpgei	r3,r2,3
 80182d0:	18005a1e 	bne	r3,zero,801843c <OSFlagPost+0x2d0>
 80182d4:	10002c26 	beq	r2,zero,8018388 <OSFlagPost+0x21c>
 80182d8:	10800060 	cmpeqi	r2,r2,1
 80182dc:	1000421e 	bne	r2,zero,80183e8 <OSFlagPost+0x27c>
 80182e0:	00005606 	br	801843c <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80182e4:	e0bff417 	ldw	r2,-48(fp)
 80182e8:	10c0020b 	ldhu	r3,8(r2)
 80182ec:	e0bfff17 	ldw	r2,-4(fp)
 80182f0:	1080040b 	ldhu	r2,16(r2)
 80182f4:	1884703a 	and	r2,r3,r2
 80182f8:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 80182fc:	e0bfff17 	ldw	r2,-4(fp)
 8018300:	1080040b 	ldhu	r2,16(r2)
 8018304:	e0fffc0b 	ldhu	r3,-16(fp)
 8018308:	10bfffcc 	andi	r2,r2,65535
 801830c:	1880551e 	bne	r3,r2,8018464 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8018310:	e0bffc0b 	ldhu	r2,-16(fp)
 8018314:	100b883a 	mov	r5,r2
 8018318:	e13fff17 	ldw	r4,-4(fp)
 801831c:	80188240 	call	8018824 <OS_FlagTaskRdy>
 8018320:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8018324:	e0bffbc3 	ldbu	r2,-17(fp)
 8018328:	10800058 	cmpnei	r2,r2,1
 801832c:	10004d1e 	bne	r2,zero,8018464 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8018330:	00800044 	movi	r2,1
 8018334:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 8018338:	00004a06 	br	8018464 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 801833c:	e0bff417 	ldw	r2,-48(fp)
 8018340:	10c0020b 	ldhu	r3,8(r2)
 8018344:	e0bfff17 	ldw	r2,-4(fp)
 8018348:	1080040b 	ldhu	r2,16(r2)
 801834c:	1884703a 	and	r2,r3,r2
 8018350:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 8018354:	e0bffc0b 	ldhu	r2,-16(fp)
 8018358:	10004426 	beq	r2,zero,801846c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 801835c:	e0bffc0b 	ldhu	r2,-16(fp)
 8018360:	100b883a 	mov	r5,r2
 8018364:	e13fff17 	ldw	r4,-4(fp)
 8018368:	80188240 	call	8018824 <OS_FlagTaskRdy>
 801836c:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8018370:	e0bffbc3 	ldbu	r2,-17(fp)
 8018374:	10800058 	cmpnei	r2,r2,1
 8018378:	10003c1e 	bne	r2,zero,801846c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 801837c:	00800044 	movi	r2,1
 8018380:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 8018384:	00003906 	br	801846c <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8018388:	e0bff417 	ldw	r2,-48(fp)
 801838c:	1080020b 	ldhu	r2,8(r2)
 8018390:	0084303a 	nor	r2,zero,r2
 8018394:	1007883a 	mov	r3,r2
 8018398:	e0bfff17 	ldw	r2,-4(fp)
 801839c:	1080040b 	ldhu	r2,16(r2)
 80183a0:	1884703a 	and	r2,r3,r2
 80183a4:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 80183a8:	e0bfff17 	ldw	r2,-4(fp)
 80183ac:	1080040b 	ldhu	r2,16(r2)
 80183b0:	e0fffc0b 	ldhu	r3,-16(fp)
 80183b4:	10bfffcc 	andi	r2,r2,65535
 80183b8:	18802e1e 	bne	r3,r2,8018474 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80183bc:	e0bffc0b 	ldhu	r2,-16(fp)
 80183c0:	100b883a 	mov	r5,r2
 80183c4:	e13fff17 	ldw	r4,-4(fp)
 80183c8:	80188240 	call	8018824 <OS_FlagTaskRdy>
 80183cc:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 80183d0:	e0bffbc3 	ldbu	r2,-17(fp)
 80183d4:	10800058 	cmpnei	r2,r2,1
 80183d8:	1000261e 	bne	r2,zero,8018474 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80183dc:	00800044 	movi	r2,1
 80183e0:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 80183e4:	00002306 	br	8018474 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80183e8:	e0bff417 	ldw	r2,-48(fp)
 80183ec:	1080020b 	ldhu	r2,8(r2)
 80183f0:	0084303a 	nor	r2,zero,r2
 80183f4:	1007883a 	mov	r3,r2
 80183f8:	e0bfff17 	ldw	r2,-4(fp)
 80183fc:	1080040b 	ldhu	r2,16(r2)
 8018400:	1884703a 	and	r2,r3,r2
 8018404:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 8018408:	e0bffc0b 	ldhu	r2,-16(fp)
 801840c:	10001b26 	beq	r2,zero,801847c <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8018410:	e0bffc0b 	ldhu	r2,-16(fp)
 8018414:	100b883a 	mov	r5,r2
 8018418:	e13fff17 	ldw	r4,-4(fp)
 801841c:	80188240 	call	8018824 <OS_FlagTaskRdy>
 8018420:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8018424:	e0bffbc3 	ldbu	r2,-17(fp)
 8018428:	10800058 	cmpnei	r2,r2,1
 801842c:	1000131e 	bne	r2,zero,801847c <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8018430:	00800044 	movi	r2,1
 8018434:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 8018438:	00001006 	br	801847c <OSFlagPost+0x310>
 801843c:	e0bffd17 	ldw	r2,-12(fp)
 8018440:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8018444:	e0bff817 	ldw	r2,-32(fp)
 8018448:	1001703a 	wrctl	status,r2
}
 801844c:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8018450:	e0bff117 	ldw	r2,-60(fp)
 8018454:	00c01bc4 	movi	r3,111
 8018458:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 801845c:	0005883a 	mov	r2,zero
 8018460:	00002806 	br	8018504 <OSFlagPost+0x398>
                 break;
 8018464:	0001883a 	nop
 8018468:	00000506 	br	8018480 <OSFlagPost+0x314>
                 break;
 801846c:	0001883a 	nop
 8018470:	00000306 	br	8018480 <OSFlagPost+0x314>
                 break;
 8018474:	0001883a 	nop
 8018478:	00000106 	br	8018480 <OSFlagPost+0x314>
                 break;
 801847c:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8018480:	e0bfff17 	ldw	r2,-4(fp)
 8018484:	10800017 	ldw	r2,0(r2)
 8018488:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 801848c:	e0bfff17 	ldw	r2,-4(fp)
 8018490:	103f851e 	bne	r2,zero,80182a8 <OSFlagPost+0x13c>
 8018494:	e0bffd17 	ldw	r2,-12(fp)
 8018498:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801849c:	e0bff717 	ldw	r2,-36(fp)
 80184a0:	1001703a 	wrctl	status,r2
}
 80184a4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 80184a8:	e0bffec3 	ldbu	r2,-5(fp)
 80184ac:	10800058 	cmpnei	r2,r2,1
 80184b0:	1000011e 	bne	r2,zero,80184b8 <OSFlagPost+0x34c>
        OS_Sched();
 80184b4:	80169940 	call	8016994 <OS_Sched>
  NIOS2_READ_STATUS (context);
 80184b8:	0005303a 	rdctl	r2,status
 80184bc:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80184c0:	e0fff517 	ldw	r3,-44(fp)
 80184c4:	00bfff84 	movi	r2,-2
 80184c8:	1884703a 	and	r2,r3,r2
 80184cc:	1001703a 	wrctl	status,r2
  return context;
 80184d0:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
 80184d4:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
 80184d8:	e0bff417 	ldw	r2,-48(fp)
 80184dc:	1080020b 	ldhu	r2,8(r2)
 80184e0:	e0bffc8d 	sth	r2,-14(fp)
 80184e4:	e0bffd17 	ldw	r2,-12(fp)
 80184e8:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 80184ec:	e0bff617 	ldw	r2,-40(fp)
 80184f0:	1001703a 	wrctl	status,r2
}
 80184f4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 80184f8:	e0bff117 	ldw	r2,-60(fp)
 80184fc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 8018500:	e0bffc8b 	ldhu	r2,-14(fp)
}
 8018504:	e037883a 	mov	sp,fp
 8018508:	dfc00117 	ldw	ra,4(sp)
 801850c:	df000017 	ldw	fp,0(sp)
 8018510:	dec00204 	addi	sp,sp,8
 8018514:	f800283a 	ret

08018518 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 8018518:	defff904 	addi	sp,sp,-28
 801851c:	df000615 	stw	fp,24(sp)
 8018520:	df000604 	addi	fp,sp,24
 8018524:	e13ffb15 	stw	r4,-20(fp)
 8018528:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 801852c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 8018530:	e0bffa17 	ldw	r2,-24(fp)
 8018534:	1000021e 	bne	r2,zero,8018540 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 8018538:	0005883a 	mov	r2,zero
 801853c:	00002406 	br	80185d0 <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 8018540:	e0bffb17 	ldw	r2,-20(fp)
 8018544:	1000051e 	bne	r2,zero,801855c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8018548:	e0bffa17 	ldw	r2,-24(fp)
 801854c:	00c01b84 	movi	r3,110
 8018550:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8018554:	0005883a 	mov	r2,zero
 8018558:	00001d06 	br	80185d0 <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 801855c:	e0bffb17 	ldw	r2,-20(fp)
 8018560:	10800003 	ldbu	r2,0(r2)
 8018564:	10803fcc 	andi	r2,r2,255
 8018568:	10800160 	cmpeqi	r2,r2,5
 801856c:	1000051e 	bne	r2,zero,8018584 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 8018570:	e0bffa17 	ldw	r2,-24(fp)
 8018574:	00c00044 	movi	r3,1
 8018578:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 801857c:	0005883a 	mov	r2,zero
 8018580:	00001306 	br	80185d0 <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
 8018584:	0005303a 	rdctl	r2,status
 8018588:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801858c:	e0fffc17 	ldw	r3,-16(fp)
 8018590:	00bfff84 	movi	r2,-2
 8018594:	1884703a 	and	r2,r3,r2
 8018598:	1001703a 	wrctl	status,r2
  return context;
 801859c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80185a0:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
 80185a4:	e0bffb17 	ldw	r2,-20(fp)
 80185a8:	1080020b 	ldhu	r2,8(r2)
 80185ac:	e0bffe8d 	sth	r2,-6(fp)
 80185b0:	e0bfff17 	ldw	r2,-4(fp)
 80185b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 80185b8:	e0bffd17 	ldw	r2,-12(fp)
 80185bc:	1001703a 	wrctl	status,r2
}
 80185c0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80185c4:	e0bffa17 	ldw	r2,-24(fp)
 80185c8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 80185cc:	e0bffe8b 	ldhu	r2,-6(fp)
}
 80185d0:	e037883a 	mov	sp,fp
 80185d4:	df000017 	ldw	fp,0(sp)
 80185d8:	dec00104 	addi	sp,sp,4
 80185dc:	f800283a 	ret

080185e0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 80185e0:	defff804 	addi	sp,sp,-32
 80185e4:	df000715 	stw	fp,28(sp)
 80185e8:	df000704 	addi	fp,sp,28
 80185ec:	e13ffd15 	stw	r4,-12(fp)
 80185f0:	e17ffc15 	stw	r5,-16(fp)
 80185f4:	3007883a 	mov	r3,r6
 80185f8:	3809883a 	mov	r4,r7
 80185fc:	e0800117 	ldw	r2,4(fp)
 8018600:	e0fffb0d 	sth	r3,-20(fp)
 8018604:	2007883a 	mov	r3,r4
 8018608:	e0fffa05 	stb	r3,-24(fp)
 801860c:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8018610:	d0a07517 	ldw	r2,-32300(gp)
 8018614:	10c00c03 	ldbu	r3,48(r2)
 8018618:	d0a07517 	ldw	r2,-32300(gp)
 801861c:	18c00814 	ori	r3,r3,32
 8018620:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 8018624:	d0a07517 	ldw	r2,-32300(gp)
 8018628:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 801862c:	d0a07517 	ldw	r2,-32300(gp)
 8018630:	e0fff90b 	ldhu	r3,-28(fp)
 8018634:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 8018638:	d0a07517 	ldw	r2,-32300(gp)
 801863c:	e0fffc17 	ldw	r3,-16(fp)
 8018640:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 8018644:	e0bffc17 	ldw	r2,-16(fp)
 8018648:	e0fffb0b 	ldhu	r3,-20(fp)
 801864c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 8018650:	e0bffc17 	ldw	r2,-16(fp)
 8018654:	e0fffa03 	ldbu	r3,-24(fp)
 8018658:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 801865c:	d0e07517 	ldw	r3,-32300(gp)
 8018660:	e0bffc17 	ldw	r2,-16(fp)
 8018664:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 8018668:	e0bffd17 	ldw	r2,-12(fp)
 801866c:	10c00117 	ldw	r3,4(r2)
 8018670:	e0bffc17 	ldw	r2,-16(fp)
 8018674:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 8018678:	e0bffc17 	ldw	r2,-16(fp)
 801867c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 8018680:	e0bffc17 	ldw	r2,-16(fp)
 8018684:	e0fffd17 	ldw	r3,-12(fp)
 8018688:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 801868c:	e0bffd17 	ldw	r2,-12(fp)
 8018690:	10800117 	ldw	r2,4(r2)
 8018694:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 8018698:	e0bfff17 	ldw	r2,-4(fp)
 801869c:	10000326 	beq	r2,zero,80186ac <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 80186a0:	e0bfff17 	ldw	r2,-4(fp)
 80186a4:	e0fffc17 	ldw	r3,-16(fp)
 80186a8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 80186ac:	e0bffd17 	ldw	r2,-12(fp)
 80186b0:	e0fffc17 	ldw	r3,-16(fp)
 80186b4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 80186b8:	d0a07517 	ldw	r2,-32300(gp)
 80186bc:	10800d03 	ldbu	r2,52(r2)
 80186c0:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 80186c4:	e0fffec3 	ldbu	r3,-5(fp)
 80186c8:	d0a07244 	addi	r2,gp,-32311
 80186cc:	1885883a 	add	r2,r3,r2
 80186d0:	10800003 	ldbu	r2,0(r2)
 80186d4:	1007883a 	mov	r3,r2
 80186d8:	d0a07517 	ldw	r2,-32300(gp)
 80186dc:	10800d43 	ldbu	r2,53(r2)
 80186e0:	0084303a 	nor	r2,zero,r2
 80186e4:	1884703a 	and	r2,r3,r2
 80186e8:	e0fffec3 	ldbu	r3,-5(fp)
 80186ec:	1009883a 	mov	r4,r2
 80186f0:	d0a07244 	addi	r2,gp,-32311
 80186f4:	1885883a 	add	r2,r3,r2
 80186f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 80186fc:	e0fffec3 	ldbu	r3,-5(fp)
 8018700:	d0a07244 	addi	r2,gp,-32311
 8018704:	1885883a 	add	r2,r3,r2
 8018708:	10800003 	ldbu	r2,0(r2)
 801870c:	10803fcc 	andi	r2,r2,255
 8018710:	1000071e 	bne	r2,zero,8018730 <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 8018714:	d0a07517 	ldw	r2,-32300(gp)
 8018718:	10800d83 	ldbu	r2,54(r2)
 801871c:	0084303a 	nor	r2,zero,r2
 8018720:	1007883a 	mov	r3,r2
 8018724:	d0a07203 	ldbu	r2,-32312(gp)
 8018728:	1884703a 	and	r2,r3,r2
 801872c:	d0a07205 	stb	r2,-32312(gp)
    }
}
 8018730:	0001883a 	nop
 8018734:	e037883a 	mov	sp,fp
 8018738:	df000017 	ldw	fp,0(sp)
 801873c:	dec00104 	addi	sp,sp,4
 8018740:	f800283a 	ret

08018744 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8018744:	defffb04 	addi	sp,sp,-20
 8018748:	dfc00415 	stw	ra,16(sp)
 801874c:	df000315 	stw	fp,12(sp)
 8018750:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8018754:	0140dc04 	movi	r5,880
 8018758:	010201b4 	movhi	r4,2054
 801875c:	212f8c04 	addi	r4,r4,-16848
 8018760:	80168d00 	call	80168d0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 8018764:	008201b4 	movhi	r2,2054
 8018768:	10af8c04 	addi	r2,r2,-16848
 801876c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 8018770:	008201b4 	movhi	r2,2054
 8018774:	10af9704 	addi	r2,r2,-16804
 8018778:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 801877c:	e03fff8d 	sth	zero,-2(fp)
 8018780:	00001306 	br	80187d0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8018784:	e0bffe17 	ldw	r2,-8(fp)
 8018788:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 801878c:	e0bffe17 	ldw	r2,-8(fp)
 8018790:	e0fffd17 	ldw	r3,-12(fp)
 8018794:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 8018798:	e0bffe17 	ldw	r2,-8(fp)
 801879c:	00c00fc4 	movi	r3,63
 80187a0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 80187a4:	e0bffe17 	ldw	r2,-8(fp)
 80187a8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 80187ac:	e0bffe17 	ldw	r2,-8(fp)
 80187b0:	10800b04 	addi	r2,r2,44
 80187b4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 80187b8:	e0bffd17 	ldw	r2,-12(fp)
 80187bc:	10800b04 	addi	r2,r2,44
 80187c0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 80187c4:	e0bfff8b 	ldhu	r2,-2(fp)
 80187c8:	10800044 	addi	r2,r2,1
 80187cc:	e0bfff8d 	sth	r2,-2(fp)
 80187d0:	e0bfff8b 	ldhu	r2,-2(fp)
 80187d4:	108004f0 	cmpltui	r2,r2,19
 80187d8:	103fea1e 	bne	r2,zero,8018784 <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80187dc:	e0bffe17 	ldw	r2,-8(fp)
 80187e0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 80187e4:	e0bffe17 	ldw	r2,-8(fp)
 80187e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 80187ec:	e0bffe17 	ldw	r2,-8(fp)
 80187f0:	00c00fc4 	movi	r3,63
 80187f4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 80187f8:	e0bffe17 	ldw	r2,-8(fp)
 80187fc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8018800:	008201b4 	movhi	r2,2054
 8018804:	10af8c04 	addi	r2,r2,-16848
 8018808:	d0a07715 	stw	r2,-32292(gp)
#endif
}
 801880c:	0001883a 	nop
 8018810:	e037883a 	mov	sp,fp
 8018814:	dfc00117 	ldw	ra,4(sp)
 8018818:	df000017 	ldw	fp,0(sp)
 801881c:	dec00204 	addi	sp,sp,8
 8018820:	f800283a 	ret

08018824 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 8018824:	defffa04 	addi	sp,sp,-24
 8018828:	dfc00515 	stw	ra,20(sp)
 801882c:	df000415 	stw	fp,16(sp)
 8018830:	df000404 	addi	fp,sp,16
 8018834:	e13ffd15 	stw	r4,-12(fp)
 8018838:	2805883a 	mov	r2,r5
 801883c:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 8018840:	e0bffd17 	ldw	r2,-12(fp)
 8018844:	10800217 	ldw	r2,8(r2)
 8018848:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
 801884c:	e0bffe17 	ldw	r2,-8(fp)
 8018850:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8018854:	e0bffe17 	ldw	r2,-8(fp)
 8018858:	e0fffc0b 	ldhu	r3,-16(fp)
 801885c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 8018860:	e0bffe17 	ldw	r2,-8(fp)
 8018864:	10c00c03 	ldbu	r3,48(r2)
 8018868:	00bff7c4 	movi	r2,-33
 801886c:	1884703a 	and	r2,r3,r2
 8018870:	1007883a 	mov	r3,r2
 8018874:	e0bffe17 	ldw	r2,-8(fp)
 8018878:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 801887c:	e0bffe17 	ldw	r2,-8(fp)
 8018880:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8018884:	e0bffe17 	ldw	r2,-8(fp)
 8018888:	10800c03 	ldbu	r2,48(r2)
 801888c:	10803fcc 	andi	r2,r2,255
 8018890:	1000181e 	bne	r2,zero,80188f4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8018894:	e0bffe17 	ldw	r2,-8(fp)
 8018898:	10c00d83 	ldbu	r3,54(r2)
 801889c:	d0a07203 	ldbu	r2,-32312(gp)
 80188a0:	1884b03a 	or	r2,r3,r2
 80188a4:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80188a8:	e0bffe17 	ldw	r2,-8(fp)
 80188ac:	10800d03 	ldbu	r2,52(r2)
 80188b0:	10c03fcc 	andi	r3,r2,255
 80188b4:	d0a07244 	addi	r2,gp,-32311
 80188b8:	1885883a 	add	r2,r3,r2
 80188bc:	11000003 	ldbu	r4,0(r2)
 80188c0:	e0bffe17 	ldw	r2,-8(fp)
 80188c4:	10800d43 	ldbu	r2,53(r2)
 80188c8:	e0fffe17 	ldw	r3,-8(fp)
 80188cc:	18c00d03 	ldbu	r3,52(r3)
 80188d0:	18c03fcc 	andi	r3,r3,255
 80188d4:	2084b03a 	or	r2,r4,r2
 80188d8:	1009883a 	mov	r4,r2
 80188dc:	d0a07244 	addi	r2,gp,-32311
 80188e0:	1885883a 	add	r2,r3,r2
 80188e4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 80188e8:	00800044 	movi	r2,1
 80188ec:	e0bfffc5 	stb	r2,-1(fp)
 80188f0:	00000106 	br	80188f8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 80188f4:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
 80188f8:	e13ffd17 	ldw	r4,-12(fp)
 80188fc:	80189180 	call	8018918 <OS_FlagUnlink>
    return (sched);
 8018900:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8018904:	e037883a 	mov	sp,fp
 8018908:	dfc00117 	ldw	ra,4(sp)
 801890c:	df000017 	ldw	fp,0(sp)
 8018910:	dec00204 	addi	sp,sp,8
 8018914:	f800283a 	ret

08018918 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8018918:	defffa04 	addi	sp,sp,-24
 801891c:	df000515 	stw	fp,20(sp)
 8018920:	df000504 	addi	fp,sp,20
 8018924:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8018928:	e0bffb17 	ldw	r2,-20(fp)
 801892c:	10800117 	ldw	r2,4(r2)
 8018930:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8018934:	e0bffb17 	ldw	r2,-20(fp)
 8018938:	10800017 	ldw	r2,0(r2)
 801893c:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8018940:	e0bfff17 	ldw	r2,-4(fp)
 8018944:	10000b1e 	bne	r2,zero,8018974 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8018948:	e0bffb17 	ldw	r2,-20(fp)
 801894c:	10800317 	ldw	r2,12(r2)
 8018950:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8018954:	e0bffd17 	ldw	r2,-12(fp)
 8018958:	e0fffe17 	ldw	r3,-8(fp)
 801895c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8018960:	e0bffe17 	ldw	r2,-8(fp)
 8018964:	10000b26 	beq	r2,zero,8018994 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8018968:	e0bffe17 	ldw	r2,-8(fp)
 801896c:	10000115 	stw	zero,4(r2)
 8018970:	00000806 	br	8018994 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8018974:	e0bfff17 	ldw	r2,-4(fp)
 8018978:	e0fffe17 	ldw	r3,-8(fp)
 801897c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8018980:	e0bffe17 	ldw	r2,-8(fp)
 8018984:	10000326 	beq	r2,zero,8018994 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8018988:	e0bffe17 	ldw	r2,-8(fp)
 801898c:	e0ffff17 	ldw	r3,-4(fp)
 8018990:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8018994:	e0bffb17 	ldw	r2,-20(fp)
 8018998:	10800217 	ldw	r2,8(r2)
 801899c:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 80189a0:	e0bffc17 	ldw	r2,-16(fp)
 80189a4:	10000a15 	stw	zero,40(r2)
#endif
}
 80189a8:	0001883a 	nop
 80189ac:	e037883a 	mov	sp,fp
 80189b0:	df000017 	ldw	fp,0(sp)
 80189b4:	dec00104 	addi	sp,sp,4
 80189b8:	f800283a 	ret

080189bc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 80189bc:	defff404 	addi	sp,sp,-48
 80189c0:	df000b15 	stw	fp,44(sp)
 80189c4:	df000b04 	addi	fp,sp,44
 80189c8:	e13ff815 	stw	r4,-32(fp)
 80189cc:	e17ff715 	stw	r5,-36(fp)
 80189d0:	e1bff615 	stw	r6,-40(fp)
 80189d4:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80189d8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80189dc:	e0bff517 	ldw	r2,-44(fp)
 80189e0:	1000021e 	bne	r2,zero,80189ec <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 80189e4:	0005883a 	mov	r2,zero
 80189e8:	00006606 	br	8018b84 <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 80189ec:	e0bff817 	ldw	r2,-32(fp)
 80189f0:	1000051e 	bne	r2,zero,8018a08 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 80189f4:	e0bff517 	ldw	r2,-44(fp)
 80189f8:	00c01884 	movi	r3,98
 80189fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8018a00:	0005883a 	mov	r2,zero
 8018a04:	00005f06 	br	8018b84 <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 8018a08:	e0bff817 	ldw	r2,-32(fp)
 8018a0c:	108000cc 	andi	r2,r2,3
 8018a10:	10000526 	beq	r2,zero,8018a28 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 8018a14:	e0bff517 	ldw	r2,-44(fp)
 8018a18:	00c01884 	movi	r3,98
 8018a1c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8018a20:	0005883a 	mov	r2,zero
 8018a24:	00005706 	br	8018b84 <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 8018a28:	e0bff717 	ldw	r2,-36(fp)
 8018a2c:	108000a8 	cmpgeui	r2,r2,2
 8018a30:	1000051e 	bne	r2,zero,8018a48 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 8018a34:	e0bff517 	ldw	r2,-44(fp)
 8018a38:	00c016c4 	movi	r3,91
 8018a3c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8018a40:	0005883a 	mov	r2,zero
 8018a44:	00004f06 	br	8018b84 <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 8018a48:	e0bff617 	ldw	r2,-40(fp)
 8018a4c:	10800128 	cmpgeui	r2,r2,4
 8018a50:	1000051e 	bne	r2,zero,8018a68 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 8018a54:	e0bff517 	ldw	r2,-44(fp)
 8018a58:	00c01704 	movi	r3,92
 8018a5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8018a60:	0005883a 	mov	r2,zero
 8018a64:	00004706 	br	8018b84 <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
 8018a68:	0005303a 	rdctl	r2,status
 8018a6c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018a70:	e0fffa17 	ldw	r3,-24(fp)
 8018a74:	00bfff84 	movi	r2,-2
 8018a78:	1884703a 	and	r2,r3,r2
 8018a7c:	1001703a 	wrctl	status,r2
  return context;
 8018a80:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8018a84:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 8018a88:	d0a06f17 	ldw	r2,-32324(gp)
 8018a8c:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 8018a90:	d0a06f17 	ldw	r2,-32324(gp)
 8018a94:	10000326 	beq	r2,zero,8018aa4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 8018a98:	d0a06f17 	ldw	r2,-32324(gp)
 8018a9c:	10800117 	ldw	r2,4(r2)
 8018aa0:	d0a06f15 	stw	r2,-32324(gp)
 8018aa4:	e0bffc17 	ldw	r2,-16(fp)
 8018aa8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018aac:	e0bff917 	ldw	r2,-28(fp)
 8018ab0:	1001703a 	wrctl	status,r2
}
 8018ab4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 8018ab8:	e0bffb17 	ldw	r2,-20(fp)
 8018abc:	1000051e 	bne	r2,zero,8018ad4 <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
 8018ac0:	e0bff517 	ldw	r2,-44(fp)
 8018ac4:	00c01684 	movi	r3,90
 8018ac8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8018acc:	0005883a 	mov	r2,zero
 8018ad0:	00002c06 	br	8018b84 <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 8018ad4:	e0bff817 	ldw	r2,-32(fp)
 8018ad8:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 8018adc:	e0fff817 	ldw	r3,-32(fp)
 8018ae0:	e0bff617 	ldw	r2,-40(fp)
 8018ae4:	1885883a 	add	r2,r3,r2
 8018ae8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8018aec:	e03ffd15 	stw	zero,-12(fp)
 8018af0:	00000c06 	br	8018b24 <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 8018af4:	e0bffe17 	ldw	r2,-8(fp)
 8018af8:	e0ffff17 	ldw	r3,-4(fp)
 8018afc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 8018b00:	e0bfff17 	ldw	r2,-4(fp)
 8018b04:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 8018b08:	e0ffff17 	ldw	r3,-4(fp)
 8018b0c:	e0bff617 	ldw	r2,-40(fp)
 8018b10:	1885883a 	add	r2,r3,r2
 8018b14:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8018b18:	e0bffd17 	ldw	r2,-12(fp)
 8018b1c:	10800044 	addi	r2,r2,1
 8018b20:	e0bffd15 	stw	r2,-12(fp)
 8018b24:	e0bff717 	ldw	r2,-36(fp)
 8018b28:	10bfffc4 	addi	r2,r2,-1
 8018b2c:	e0fffd17 	ldw	r3,-12(fp)
 8018b30:	18bff036 	bltu	r3,r2,8018af4 <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 8018b34:	e0bffe17 	ldw	r2,-8(fp)
 8018b38:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 8018b3c:	e0bffb17 	ldw	r2,-20(fp)
 8018b40:	e0fff817 	ldw	r3,-32(fp)
 8018b44:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 8018b48:	e0bffb17 	ldw	r2,-20(fp)
 8018b4c:	e0fff817 	ldw	r3,-32(fp)
 8018b50:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 8018b54:	e0bffb17 	ldw	r2,-20(fp)
 8018b58:	e0fff717 	ldw	r3,-36(fp)
 8018b5c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 8018b60:	e0bffb17 	ldw	r2,-20(fp)
 8018b64:	e0fff717 	ldw	r3,-36(fp)
 8018b68:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 8018b6c:	e0bffb17 	ldw	r2,-20(fp)
 8018b70:	e0fff617 	ldw	r3,-40(fp)
 8018b74:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 8018b78:	e0bff517 	ldw	r2,-44(fp)
 8018b7c:	10000005 	stb	zero,0(r2)
    return (pmem);
 8018b80:	e0bffb17 	ldw	r2,-20(fp)
}
 8018b84:	e037883a 	mov	sp,fp
 8018b88:	df000017 	ldw	fp,0(sp)
 8018b8c:	dec00104 	addi	sp,sp,4
 8018b90:	f800283a 	ret

08018b94 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 8018b94:	defff804 	addi	sp,sp,-32
 8018b98:	df000715 	stw	fp,28(sp)
 8018b9c:	df000704 	addi	fp,sp,28
 8018ba0:	e13ffa15 	stw	r4,-24(fp)
 8018ba4:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8018ba8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8018bac:	e0bff917 	ldw	r2,-28(fp)
 8018bb0:	1000021e 	bne	r2,zero,8018bbc <OSMemGet+0x28>
        return ((void *)0);
 8018bb4:	0005883a 	mov	r2,zero
 8018bb8:	00003006 	br	8018c7c <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 8018bbc:	e0bffa17 	ldw	r2,-24(fp)
 8018bc0:	1000051e 	bne	r2,zero,8018bd8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8018bc4:	e0bff917 	ldw	r2,-28(fp)
 8018bc8:	00c01804 	movi	r3,96
 8018bcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8018bd0:	0005883a 	mov	r2,zero
 8018bd4:	00002906 	br	8018c7c <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
 8018bd8:	0005303a 	rdctl	r2,status
 8018bdc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018be0:	e0fffd17 	ldw	r3,-12(fp)
 8018be4:	00bfff84 	movi	r2,-2
 8018be8:	1884703a 	and	r2,r3,r2
 8018bec:	1001703a 	wrctl	status,r2
  return context;
 8018bf0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8018bf4:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 8018bf8:	e0bffa17 	ldw	r2,-24(fp)
 8018bfc:	10800417 	ldw	r2,16(r2)
 8018c00:	10001526 	beq	r2,zero,8018c58 <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 8018c04:	e0bffa17 	ldw	r2,-24(fp)
 8018c08:	10800117 	ldw	r2,4(r2)
 8018c0c:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 8018c10:	e0bffe17 	ldw	r2,-8(fp)
 8018c14:	10c00017 	ldw	r3,0(r2)
 8018c18:	e0bffa17 	ldw	r2,-24(fp)
 8018c1c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 8018c20:	e0bffa17 	ldw	r2,-24(fp)
 8018c24:	10800417 	ldw	r2,16(r2)
 8018c28:	10ffffc4 	addi	r3,r2,-1
 8018c2c:	e0bffa17 	ldw	r2,-24(fp)
 8018c30:	10c00415 	stw	r3,16(r2)
 8018c34:	e0bfff17 	ldw	r2,-4(fp)
 8018c38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8018c3c:	e0bffc17 	ldw	r2,-16(fp)
 8018c40:	1001703a 	wrctl	status,r2
}
 8018c44:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 8018c48:	e0bff917 	ldw	r2,-28(fp)
 8018c4c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 8018c50:	e0bffe17 	ldw	r2,-8(fp)
 8018c54:	00000906 	br	8018c7c <OSMemGet+0xe8>
 8018c58:	e0bfff17 	ldw	r2,-4(fp)
 8018c5c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8018c60:	e0bffb17 	ldw	r2,-20(fp)
 8018c64:	1001703a 	wrctl	status,r2
}
 8018c68:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 8018c6c:	e0bff917 	ldw	r2,-28(fp)
 8018c70:	00c01744 	movi	r3,93
 8018c74:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 8018c78:	0005883a 	mov	r2,zero
}
 8018c7c:	e037883a 	mov	sp,fp
 8018c80:	df000017 	ldw	fp,0(sp)
 8018c84:	dec00104 	addi	sp,sp,4
 8018c88:	f800283a 	ret

08018c8c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8018c8c:	defff704 	addi	sp,sp,-36
 8018c90:	dfc00815 	stw	ra,32(sp)
 8018c94:	df000715 	stw	fp,28(sp)
 8018c98:	df000704 	addi	fp,sp,28
 8018c9c:	e13ffb15 	stw	r4,-20(fp)
 8018ca0:	e17ffa15 	stw	r5,-24(fp)
 8018ca4:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018ca8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8018cac:	e0bff917 	ldw	r2,-28(fp)
 8018cb0:	1000021e 	bne	r2,zero,8018cbc <OSMemNameGet+0x30>
        return (0);
 8018cb4:	0005883a 	mov	r2,zero
 8018cb8:	00002c06 	br	8018d6c <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8018cbc:	e0bffb17 	ldw	r2,-20(fp)
 8018cc0:	1000051e 	bne	r2,zero,8018cd8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8018cc4:	e0bff917 	ldw	r2,-28(fp)
 8018cc8:	00c01804 	movi	r3,96
 8018ccc:	10c00005 	stb	r3,0(r2)
        return (0);
 8018cd0:	0005883a 	mov	r2,zero
 8018cd4:	00002506 	br	8018d6c <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8018cd8:	e0bffa17 	ldw	r2,-24(fp)
 8018cdc:	1000051e 	bne	r2,zero,8018cf4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8018ce0:	e0bff917 	ldw	r2,-28(fp)
 8018ce4:	00c00304 	movi	r3,12
 8018ce8:	10c00005 	stb	r3,0(r2)
        return (0);
 8018cec:	0005883a 	mov	r2,zero
 8018cf0:	00001e06 	br	8018d6c <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8018cf4:	d0a07403 	ldbu	r2,-32304(gp)
 8018cf8:	10803fcc 	andi	r2,r2,255
 8018cfc:	10000526 	beq	r2,zero,8018d14 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 8018d00:	e0bff917 	ldw	r2,-28(fp)
 8018d04:	00c00444 	movi	r3,17
 8018d08:	10c00005 	stb	r3,0(r2)
        return (0);
 8018d0c:	0005883a 	mov	r2,zero
 8018d10:	00001606 	br	8018d6c <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
 8018d14:	0005303a 	rdctl	r2,status
 8018d18:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018d1c:	e0fffc17 	ldw	r3,-16(fp)
 8018d20:	00bfff84 	movi	r2,-2
 8018d24:	1884703a 	and	r2,r3,r2
 8018d28:	1001703a 	wrctl	status,r2
  return context;
 8018d2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8018d30:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 8018d34:	e0bffb17 	ldw	r2,-20(fp)
 8018d38:	10800504 	addi	r2,r2,20
 8018d3c:	100b883a 	mov	r5,r2
 8018d40:	e13ffa17 	ldw	r4,-24(fp)
 8018d44:	8016acc0 	call	8016acc <OS_StrCopy>
 8018d48:	e0bffec5 	stb	r2,-5(fp)
 8018d4c:	e0bfff17 	ldw	r2,-4(fp)
 8018d50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8018d54:	e0bffd17 	ldw	r2,-12(fp)
 8018d58:	1001703a 	wrctl	status,r2
}
 8018d5c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8018d60:	e0bff917 	ldw	r2,-28(fp)
 8018d64:	10000005 	stb	zero,0(r2)
    return (len);
 8018d68:	e0bffec3 	ldbu	r2,-5(fp)
}
 8018d6c:	e037883a 	mov	sp,fp
 8018d70:	dfc00117 	ldw	ra,4(sp)
 8018d74:	df000017 	ldw	fp,0(sp)
 8018d78:	dec00204 	addi	sp,sp,8
 8018d7c:	f800283a 	ret

08018d80 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8018d80:	defff604 	addi	sp,sp,-40
 8018d84:	dfc00915 	stw	ra,36(sp)
 8018d88:	df000815 	stw	fp,32(sp)
 8018d8c:	df000804 	addi	fp,sp,32
 8018d90:	e13ffa15 	stw	r4,-24(fp)
 8018d94:	e17ff915 	stw	r5,-28(fp)
 8018d98:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018d9c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8018da0:	e0bff817 	ldw	r2,-32(fp)
 8018da4:	10003726 	beq	r2,zero,8018e84 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8018da8:	e0bffa17 	ldw	r2,-24(fp)
 8018dac:	1000041e 	bne	r2,zero,8018dc0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8018db0:	e0bff817 	ldw	r2,-32(fp)
 8018db4:	00c01804 	movi	r3,96
 8018db8:	10c00005 	stb	r3,0(r2)
        return;
 8018dbc:	00003206 	br	8018e88 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8018dc0:	e0bff917 	ldw	r2,-28(fp)
 8018dc4:	1000041e 	bne	r2,zero,8018dd8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 8018dc8:	e0bff817 	ldw	r2,-32(fp)
 8018dcc:	00c00304 	movi	r3,12
 8018dd0:	10c00005 	stb	r3,0(r2)
        return;
 8018dd4:	00002c06 	br	8018e88 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8018dd8:	d0a07403 	ldbu	r2,-32304(gp)
 8018ddc:	10803fcc 	andi	r2,r2,255
 8018de0:	10000426 	beq	r2,zero,8018df4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 8018de4:	e0bff817 	ldw	r2,-32(fp)
 8018de8:	00c00484 	movi	r3,18
 8018dec:	10c00005 	stb	r3,0(r2)
        return;
 8018df0:	00002506 	br	8018e88 <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
 8018df4:	0005303a 	rdctl	r2,status
 8018df8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018dfc:	e0fffd17 	ldw	r3,-12(fp)
 8018e00:	00bfff84 	movi	r2,-2
 8018e04:	1884703a 	and	r2,r3,r2
 8018e08:	1001703a 	wrctl	status,r2
  return context;
 8018e0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8018e10:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8018e14:	e13ff917 	ldw	r4,-28(fp)
 8018e18:	8016b400 	call	8016b40 <OS_StrLen>
 8018e1c:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 8018e20:	e0bffec3 	ldbu	r2,-5(fp)
 8018e24:	10800830 	cmpltui	r2,r2,32
 8018e28:	1000091e 	bne	r2,zero,8018e50 <OSMemNameSet+0xd0>
 8018e2c:	e0bfff17 	ldw	r2,-4(fp)
 8018e30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8018e34:	e0bffc17 	ldw	r2,-16(fp)
 8018e38:	1001703a 	wrctl	status,r2
}
 8018e3c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 8018e40:	e0bff817 	ldw	r2,-32(fp)
 8018e44:	00c018c4 	movi	r3,99
 8018e48:	10c00005 	stb	r3,0(r2)
        return;
 8018e4c:	00000e06 	br	8018e88 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 8018e50:	e0bffa17 	ldw	r2,-24(fp)
 8018e54:	10800504 	addi	r2,r2,20
 8018e58:	e17ff917 	ldw	r5,-28(fp)
 8018e5c:	1009883a 	mov	r4,r2
 8018e60:	8016acc0 	call	8016acc <OS_StrCopy>
 8018e64:	e0bfff17 	ldw	r2,-4(fp)
 8018e68:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8018e6c:	e0bffb17 	ldw	r2,-20(fp)
 8018e70:	1001703a 	wrctl	status,r2
}
 8018e74:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8018e78:	e0bff817 	ldw	r2,-32(fp)
 8018e7c:	10000005 	stb	zero,0(r2)
 8018e80:	00000106 	br	8018e88 <OSMemNameSet+0x108>
        return;
 8018e84:	0001883a 	nop
}
 8018e88:	e037883a 	mov	sp,fp
 8018e8c:	dfc00117 	ldw	ra,4(sp)
 8018e90:	df000017 	ldw	fp,0(sp)
 8018e94:	dec00204 	addi	sp,sp,8
 8018e98:	f800283a 	ret

08018e9c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 8018e9c:	defff904 	addi	sp,sp,-28
 8018ea0:	df000615 	stw	fp,24(sp)
 8018ea4:	df000604 	addi	fp,sp,24
 8018ea8:	e13ffb15 	stw	r4,-20(fp)
 8018eac:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018eb0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8018eb4:	e0bffb17 	ldw	r2,-20(fp)
 8018eb8:	1000021e 	bne	r2,zero,8018ec4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8018ebc:	00801804 	movi	r2,96
 8018ec0:	00002a06 	br	8018f6c <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 8018ec4:	e0bffa17 	ldw	r2,-24(fp)
 8018ec8:	1000021e 	bne	r2,zero,8018ed4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 8018ecc:	008017c4 	movi	r2,95
 8018ed0:	00002606 	br	8018f6c <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
 8018ed4:	0005303a 	rdctl	r2,status
 8018ed8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018edc:	e0fffe17 	ldw	r3,-8(fp)
 8018ee0:	00bfff84 	movi	r2,-2
 8018ee4:	1884703a 	and	r2,r3,r2
 8018ee8:	1001703a 	wrctl	status,r2
  return context;
 8018eec:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8018ef0:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 8018ef4:	e0bffb17 	ldw	r2,-20(fp)
 8018ef8:	10c00417 	ldw	r3,16(r2)
 8018efc:	e0bffb17 	ldw	r2,-20(fp)
 8018f00:	10800317 	ldw	r2,12(r2)
 8018f04:	18800736 	bltu	r3,r2,8018f24 <OSMemPut+0x88>
 8018f08:	e0bfff17 	ldw	r2,-4(fp)
 8018f0c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8018f10:	e0bffd17 	ldw	r2,-12(fp)
 8018f14:	1001703a 	wrctl	status,r2
}
 8018f18:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 8018f1c:	00801784 	movi	r2,94
 8018f20:	00001206 	br	8018f6c <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 8018f24:	e0bffb17 	ldw	r2,-20(fp)
 8018f28:	10c00117 	ldw	r3,4(r2)
 8018f2c:	e0bffa17 	ldw	r2,-24(fp)
 8018f30:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 8018f34:	e0bffb17 	ldw	r2,-20(fp)
 8018f38:	e0fffa17 	ldw	r3,-24(fp)
 8018f3c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 8018f40:	e0bffb17 	ldw	r2,-20(fp)
 8018f44:	10800417 	ldw	r2,16(r2)
 8018f48:	10c00044 	addi	r3,r2,1
 8018f4c:	e0bffb17 	ldw	r2,-20(fp)
 8018f50:	10c00415 	stw	r3,16(r2)
 8018f54:	e0bfff17 	ldw	r2,-4(fp)
 8018f58:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8018f5c:	e0bffc17 	ldw	r2,-16(fp)
 8018f60:	1001703a 	wrctl	status,r2
}
 8018f64:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 8018f68:	0005883a 	mov	r2,zero
}
 8018f6c:	e037883a 	mov	sp,fp
 8018f70:	df000017 	ldw	fp,0(sp)
 8018f74:	dec00104 	addi	sp,sp,4
 8018f78:	f800283a 	ret

08018f7c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 8018f7c:	defffa04 	addi	sp,sp,-24
 8018f80:	df000515 	stw	fp,20(sp)
 8018f84:	df000504 	addi	fp,sp,20
 8018f88:	e13ffc15 	stw	r4,-16(fp)
 8018f8c:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018f90:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8018f94:	e0bffc17 	ldw	r2,-16(fp)
 8018f98:	1000021e 	bne	r2,zero,8018fa4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8018f9c:	00801804 	movi	r2,96
 8018fa0:	00002d06 	br	8019058 <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 8018fa4:	e0bffb17 	ldw	r2,-20(fp)
 8018fa8:	1000021e 	bne	r2,zero,8018fb4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 8018fac:	00801844 	movi	r2,97
 8018fb0:	00002906 	br	8019058 <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
 8018fb4:	0005303a 	rdctl	r2,status
 8018fb8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018fbc:	e0fffd17 	ldw	r3,-12(fp)
 8018fc0:	00bfff84 	movi	r2,-2
 8018fc4:	1884703a 	and	r2,r3,r2
 8018fc8:	1001703a 	wrctl	status,r2
  return context;
 8018fcc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8018fd0:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 8018fd4:	e0bffc17 	ldw	r2,-16(fp)
 8018fd8:	10c00017 	ldw	r3,0(r2)
 8018fdc:	e0bffb17 	ldw	r2,-20(fp)
 8018fe0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 8018fe4:	e0bffc17 	ldw	r2,-16(fp)
 8018fe8:	10c00117 	ldw	r3,4(r2)
 8018fec:	e0bffb17 	ldw	r2,-20(fp)
 8018ff0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 8018ff4:	e0bffc17 	ldw	r2,-16(fp)
 8018ff8:	10c00217 	ldw	r3,8(r2)
 8018ffc:	e0bffb17 	ldw	r2,-20(fp)
 8019000:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 8019004:	e0bffc17 	ldw	r2,-16(fp)
 8019008:	10c00317 	ldw	r3,12(r2)
 801900c:	e0bffb17 	ldw	r2,-20(fp)
 8019010:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 8019014:	e0bffc17 	ldw	r2,-16(fp)
 8019018:	10c00417 	ldw	r3,16(r2)
 801901c:	e0bffb17 	ldw	r2,-20(fp)
 8019020:	10c00415 	stw	r3,16(r2)
 8019024:	e0bfff17 	ldw	r2,-4(fp)
 8019028:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 801902c:	e0bffe17 	ldw	r2,-8(fp)
 8019030:	1001703a 	wrctl	status,r2
}
 8019034:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 8019038:	e0bffb17 	ldw	r2,-20(fp)
 801903c:	10c00317 	ldw	r3,12(r2)
 8019040:	e0bffb17 	ldw	r2,-20(fp)
 8019044:	10800417 	ldw	r2,16(r2)
 8019048:	1887c83a 	sub	r3,r3,r2
 801904c:	e0bffb17 	ldw	r2,-20(fp)
 8019050:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 8019054:	0005883a 	mov	r2,zero
}
 8019058:	e037883a 	mov	sp,fp
 801905c:	df000017 	ldw	fp,0(sp)
 8019060:	dec00104 	addi	sp,sp,4
 8019064:	f800283a 	ret

08019068 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8019068:	defffc04 	addi	sp,sp,-16
 801906c:	dfc00315 	stw	ra,12(sp)
 8019070:	df000215 	stw	fp,8(sp)
 8019074:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8019078:	01430c04 	movi	r5,3120
 801907c:	010201b4 	movhi	r4,2054
 8019080:	21306804 	addi	r4,r4,-15968
 8019084:	80168d00 	call	80168d0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 8019088:	008201b4 	movhi	r2,2054
 801908c:	10b06804 	addi	r2,r2,-15968
 8019090:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 8019094:	e03ffe8d 	sth	zero,-6(fp)
 8019098:	00001306 	br	80190e8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 801909c:	e0bffe8b 	ldhu	r2,-6(fp)
 80190a0:	10800044 	addi	r2,r2,1
 80190a4:	10c00d24 	muli	r3,r2,52
 80190a8:	008201b4 	movhi	r2,2054
 80190ac:	10b06804 	addi	r2,r2,-15968
 80190b0:	1887883a 	add	r3,r3,r2
 80190b4:	e0bfff17 	ldw	r2,-4(fp)
 80190b8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 80190bc:	e0bfff17 	ldw	r2,-4(fp)
 80190c0:	00c00fc4 	movi	r3,63
 80190c4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 80190c8:	e0bfff17 	ldw	r2,-4(fp)
 80190cc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 80190d0:	e0bfff17 	ldw	r2,-4(fp)
 80190d4:	10800d04 	addi	r2,r2,52
 80190d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 80190dc:	e0bffe8b 	ldhu	r2,-6(fp)
 80190e0:	10800044 	addi	r2,r2,1
 80190e4:	e0bffe8d 	sth	r2,-6(fp)
 80190e8:	e0bffe8b 	ldhu	r2,-6(fp)
 80190ec:	10800ef0 	cmpltui	r2,r2,59
 80190f0:	103fea1e 	bne	r2,zero,801909c <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 80190f4:	e0bfff17 	ldw	r2,-4(fp)
 80190f8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 80190fc:	e0bfff17 	ldw	r2,-4(fp)
 8019100:	00c00fc4 	movi	r3,63
 8019104:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 8019108:	e0bfff17 	ldw	r2,-4(fp)
 801910c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 8019110:	008201b4 	movhi	r2,2054
 8019114:	10b06804 	addi	r2,r2,-15968
 8019118:	d0a06f15 	stw	r2,-32324(gp)
#endif
}
 801911c:	0001883a 	nop
 8019120:	e037883a 	mov	sp,fp
 8019124:	dfc00117 	ldw	ra,4(sp)
 8019128:	df000017 	ldw	fp,0(sp)
 801912c:	dec00204 	addi	sp,sp,8
 8019130:	f800283a 	ret

08019134 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 8019134:	defff804 	addi	sp,sp,-32
 8019138:	df000715 	stw	fp,28(sp)
 801913c:	df000704 	addi	fp,sp,28
 8019140:	e13ffa15 	stw	r4,-24(fp)
 8019144:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8019148:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 801914c:	e0bff917 	ldw	r2,-28(fp)
 8019150:	1000021e 	bne	r2,zero,801915c <OSQAccept+0x28>
        return ((void *)0);
 8019154:	0005883a 	mov	r2,zero
 8019158:	00004306 	br	8019268 <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 801915c:	e0bffa17 	ldw	r2,-24(fp)
 8019160:	1000051e 	bne	r2,zero,8019178 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 8019164:	e0bff917 	ldw	r2,-28(fp)
 8019168:	00c00104 	movi	r3,4
 801916c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8019170:	0005883a 	mov	r2,zero
 8019174:	00003c06 	br	8019268 <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 8019178:	e0bffa17 	ldw	r2,-24(fp)
 801917c:	10800003 	ldbu	r2,0(r2)
 8019180:	10803fcc 	andi	r2,r2,255
 8019184:	108000a0 	cmpeqi	r2,r2,2
 8019188:	1000051e 	bne	r2,zero,80191a0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 801918c:	e0bff917 	ldw	r2,-28(fp)
 8019190:	00c00044 	movi	r3,1
 8019194:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8019198:	0005883a 	mov	r2,zero
 801919c:	00003206 	br	8019268 <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
 80191a0:	0005303a 	rdctl	r2,status
 80191a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80191a8:	e0fffc17 	ldw	r3,-16(fp)
 80191ac:	00bfff84 	movi	r2,-2
 80191b0:	1884703a 	and	r2,r3,r2
 80191b4:	1001703a 	wrctl	status,r2
  return context;
 80191b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80191bc:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80191c0:	e0bffa17 	ldw	r2,-24(fp)
 80191c4:	10800117 	ldw	r2,4(r2)
 80191c8:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 80191cc:	e0bffd17 	ldw	r2,-12(fp)
 80191d0:	1080058b 	ldhu	r2,22(r2)
 80191d4:	10bfffcc 	andi	r2,r2,65535
 80191d8:	10001926 	beq	r2,zero,8019240 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80191dc:	e0bffd17 	ldw	r2,-12(fp)
 80191e0:	10800417 	ldw	r2,16(r2)
 80191e4:	11000104 	addi	r4,r2,4
 80191e8:	e0fffd17 	ldw	r3,-12(fp)
 80191ec:	19000415 	stw	r4,16(r3)
 80191f0:	10800017 	ldw	r2,0(r2)
 80191f4:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 80191f8:	e0bffd17 	ldw	r2,-12(fp)
 80191fc:	1080058b 	ldhu	r2,22(r2)
 8019200:	10bfffc4 	addi	r2,r2,-1
 8019204:	1007883a 	mov	r3,r2
 8019208:	e0bffd17 	ldw	r2,-12(fp)
 801920c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8019210:	e0bffd17 	ldw	r2,-12(fp)
 8019214:	10c00417 	ldw	r3,16(r2)
 8019218:	e0bffd17 	ldw	r2,-12(fp)
 801921c:	10800217 	ldw	r2,8(r2)
 8019220:	1880041e 	bne	r3,r2,8019234 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 8019224:	e0bffd17 	ldw	r2,-12(fp)
 8019228:	10c00117 	ldw	r3,4(r2)
 801922c:	e0bffd17 	ldw	r2,-12(fp)
 8019230:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 8019234:	e0bff917 	ldw	r2,-28(fp)
 8019238:	10000005 	stb	zero,0(r2)
 801923c:	00000406 	br	8019250 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 8019240:	e0bff917 	ldw	r2,-28(fp)
 8019244:	00c007c4 	movi	r3,31
 8019248:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 801924c:	e03fff15 	stw	zero,-4(fp)
 8019250:	e0bffe17 	ldw	r2,-8(fp)
 8019254:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8019258:	e0bffb17 	ldw	r2,-20(fp)
 801925c:	1001703a 	wrctl	status,r2
}
 8019260:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 8019264:	e0bfff17 	ldw	r2,-4(fp)
}
 8019268:	e037883a 	mov	sp,fp
 801926c:	df000017 	ldw	fp,0(sp)
 8019270:	dec00104 	addi	sp,sp,4
 8019274:	f800283a 	ret

08019278 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 8019278:	defff404 	addi	sp,sp,-48
 801927c:	dfc00b15 	stw	ra,44(sp)
 8019280:	df000a15 	stw	fp,40(sp)
 8019284:	df000a04 	addi	fp,sp,40
 8019288:	e13ff715 	stw	r4,-36(fp)
 801928c:	2805883a 	mov	r2,r5
 8019290:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8019294:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8019298:	d0a07403 	ldbu	r2,-32304(gp)
 801929c:	10803fcc 	andi	r2,r2,255
 80192a0:	10000226 	beq	r2,zero,80192ac <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 80192a4:	0005883a 	mov	r2,zero
 80192a8:	00005a06 	br	8019414 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
 80192ac:	0005303a 	rdctl	r2,status
 80192b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80192b4:	e0fffc17 	ldw	r3,-16(fp)
 80192b8:	00bfff84 	movi	r2,-2
 80192bc:	1884703a 	and	r2,r3,r2
 80192c0:	1001703a 	wrctl	status,r2
  return context;
 80192c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80192c8:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 80192cc:	d0a07317 	ldw	r2,-32308(gp)
 80192d0:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 80192d4:	d0a07317 	ldw	r2,-32308(gp)
 80192d8:	10000326 	beq	r2,zero,80192e8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80192dc:	d0a07317 	ldw	r2,-32308(gp)
 80192e0:	10800117 	ldw	r2,4(r2)
 80192e4:	d0a07315 	stw	r2,-32308(gp)
 80192e8:	e0bffe17 	ldw	r2,-8(fp)
 80192ec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80192f0:	e0bffb17 	ldw	r2,-20(fp)
 80192f4:	1001703a 	wrctl	status,r2
}
 80192f8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 80192fc:	e0bfff17 	ldw	r2,-4(fp)
 8019300:	10004326 	beq	r2,zero,8019410 <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
 8019304:	0005303a 	rdctl	r2,status
 8019308:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801930c:	e0fffa17 	ldw	r3,-24(fp)
 8019310:	00bfff84 	movi	r2,-2
 8019314:	1884703a 	and	r2,r3,r2
 8019318:	1001703a 	wrctl	status,r2
  return context;
 801931c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
 8019320:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 8019324:	d0a07117 	ldw	r2,-32316(gp)
 8019328:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 801932c:	e0bffd17 	ldw	r2,-12(fp)
 8019330:	10002c26 	beq	r2,zero,80193e4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 8019334:	d0a07117 	ldw	r2,-32316(gp)
 8019338:	10800017 	ldw	r2,0(r2)
 801933c:	d0a07115 	stw	r2,-32316(gp)
 8019340:	e0bffe17 	ldw	r2,-8(fp)
 8019344:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8019348:	e0bff917 	ldw	r2,-28(fp)
 801934c:	1001703a 	wrctl	status,r2
}
 8019350:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 8019354:	e0bffd17 	ldw	r2,-12(fp)
 8019358:	e0fff717 	ldw	r3,-36(fp)
 801935c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 8019360:	e0bff60b 	ldhu	r2,-40(fp)
 8019364:	100490ba 	slli	r2,r2,2
 8019368:	e0fff717 	ldw	r3,-36(fp)
 801936c:	1887883a 	add	r3,r3,r2
 8019370:	e0bffd17 	ldw	r2,-12(fp)
 8019374:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 8019378:	e0bffd17 	ldw	r2,-12(fp)
 801937c:	e0fff717 	ldw	r3,-36(fp)
 8019380:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 8019384:	e0bffd17 	ldw	r2,-12(fp)
 8019388:	e0fff717 	ldw	r3,-36(fp)
 801938c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 8019390:	e0bffd17 	ldw	r2,-12(fp)
 8019394:	e0fff60b 	ldhu	r3,-40(fp)
 8019398:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 801939c:	e0bffd17 	ldw	r2,-12(fp)
 80193a0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 80193a4:	e0bfff17 	ldw	r2,-4(fp)
 80193a8:	00c00084 	movi	r3,2
 80193ac:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 80193b0:	e0bfff17 	ldw	r2,-4(fp)
 80193b4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 80193b8:	e0bfff17 	ldw	r2,-4(fp)
 80193bc:	e0fffd17 	ldw	r3,-12(fp)
 80193c0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 80193c4:	e0bfff17 	ldw	r2,-4(fp)
 80193c8:	00c00fc4 	movi	r3,63
 80193cc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 80193d0:	e0bfff17 	ldw	r2,-4(fp)
 80193d4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 80193d8:	e13fff17 	ldw	r4,-4(fp)
 80193dc:	80164e40 	call	80164e4 <OS_EventWaitListInit>
 80193e0:	00000b06 	br	8019410 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 80193e4:	d0e07317 	ldw	r3,-32308(gp)
 80193e8:	e0bfff17 	ldw	r2,-4(fp)
 80193ec:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 80193f0:	e0bfff17 	ldw	r2,-4(fp)
 80193f4:	d0a07315 	stw	r2,-32308(gp)
 80193f8:	e0bffe17 	ldw	r2,-8(fp)
 80193fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8019400:	e0bff817 	ldw	r2,-32(fp)
 8019404:	1001703a 	wrctl	status,r2
}
 8019408:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 801940c:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
 8019410:	e0bfff17 	ldw	r2,-4(fp)
}
 8019414:	e037883a 	mov	sp,fp
 8019418:	dfc00117 	ldw	ra,4(sp)
 801941c:	df000017 	ldw	fp,0(sp)
 8019420:	dec00204 	addi	sp,sp,8
 8019424:	f800283a 	ret

08019428 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8019428:	defff204 	addi	sp,sp,-56
 801942c:	dfc00d15 	stw	ra,52(sp)
 8019430:	df000c15 	stw	fp,48(sp)
 8019434:	df000c04 	addi	fp,sp,48
 8019438:	e13ff615 	stw	r4,-40(fp)
 801943c:	2805883a 	mov	r2,r5
 8019440:	e1bff415 	stw	r6,-48(fp)
 8019444:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8019448:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 801944c:	e0bff417 	ldw	r2,-48(fp)
 8019450:	1000021e 	bne	r2,zero,801945c <OSQDel+0x34>
        return (pevent);
 8019454:	e0bff617 	ldw	r2,-40(fp)
 8019458:	00009206 	br	80196a4 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 801945c:	e0bff617 	ldw	r2,-40(fp)
 8019460:	1000051e 	bne	r2,zero,8019478 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8019464:	e0bff417 	ldw	r2,-48(fp)
 8019468:	00c00104 	movi	r3,4
 801946c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8019470:	e0bff617 	ldw	r2,-40(fp)
 8019474:	00008b06 	br	80196a4 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 8019478:	e0bff617 	ldw	r2,-40(fp)
 801947c:	10800003 	ldbu	r2,0(r2)
 8019480:	10803fcc 	andi	r2,r2,255
 8019484:	108000a0 	cmpeqi	r2,r2,2
 8019488:	1000051e 	bne	r2,zero,80194a0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 801948c:	e0bff417 	ldw	r2,-48(fp)
 8019490:	00c00044 	movi	r3,1
 8019494:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8019498:	e0bff617 	ldw	r2,-40(fp)
 801949c:	00008106 	br	80196a4 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80194a0:	d0a07403 	ldbu	r2,-32304(gp)
 80194a4:	10803fcc 	andi	r2,r2,255
 80194a8:	10000526 	beq	r2,zero,80194c0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 80194ac:	e0bff417 	ldw	r2,-48(fp)
 80194b0:	00c003c4 	movi	r3,15
 80194b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80194b8:	e0bff617 	ldw	r2,-40(fp)
 80194bc:	00007906 	br	80196a4 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
 80194c0:	0005303a 	rdctl	r2,status
 80194c4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80194c8:	e0fffb17 	ldw	r3,-20(fp)
 80194cc:	00bfff84 	movi	r2,-2
 80194d0:	1884703a 	and	r2,r3,r2
 80194d4:	1001703a 	wrctl	status,r2
  return context;
 80194d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 80194dc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 80194e0:	e0bff617 	ldw	r2,-40(fp)
 80194e4:	10800283 	ldbu	r2,10(r2)
 80194e8:	10803fcc 	andi	r2,r2,255
 80194ec:	10000326 	beq	r2,zero,80194fc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 80194f0:	00800044 	movi	r2,1
 80194f4:	e0bfffc5 	stb	r2,-1(fp)
 80194f8:	00000106 	br	8019500 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 80194fc:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 8019500:	e0bff503 	ldbu	r2,-44(fp)
 8019504:	10000326 	beq	r2,zero,8019514 <OSQDel+0xec>
 8019508:	10800060 	cmpeqi	r2,r2,1
 801950c:	1000321e 	bne	r2,zero,80195d8 <OSQDel+0x1b0>
 8019510:	00005806 	br	8019674 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 8019514:	e0bfffc3 	ldbu	r2,-1(fp)
 8019518:	10001f1e 	bne	r2,zero,8019598 <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 801951c:	e0bff617 	ldw	r2,-40(fp)
 8019520:	00c00fc4 	movi	r3,63
 8019524:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 8019528:	e0bff617 	ldw	r2,-40(fp)
 801952c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 8019530:	e0bff617 	ldw	r2,-40(fp)
 8019534:	10800117 	ldw	r2,4(r2)
 8019538:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
 801953c:	d0e07117 	ldw	r3,-32316(gp)
 8019540:	e0bffc17 	ldw	r2,-16(fp)
 8019544:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 8019548:	e0bffc17 	ldw	r2,-16(fp)
 801954c:	d0a07115 	stw	r2,-32316(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8019550:	e0bff617 	ldw	r2,-40(fp)
 8019554:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 8019558:	d0e07317 	ldw	r3,-32308(gp)
 801955c:	e0bff617 	ldw	r2,-40(fp)
 8019560:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 8019564:	e0bff617 	ldw	r2,-40(fp)
 8019568:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 801956c:	e0bff617 	ldw	r2,-40(fp)
 8019570:	d0a07315 	stw	r2,-32308(gp)
 8019574:	e0bffd17 	ldw	r2,-12(fp)
 8019578:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801957c:	e0bffa17 	ldw	r2,-24(fp)
 8019580:	1001703a 	wrctl	status,r2
}
 8019584:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 8019588:	e0bff417 	ldw	r2,-48(fp)
 801958c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 8019590:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 8019594:	00004206 	br	80196a0 <OSQDel+0x278>
 8019598:	e0bffd17 	ldw	r2,-12(fp)
 801959c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80195a0:	e0bff917 	ldw	r2,-28(fp)
 80195a4:	1001703a 	wrctl	status,r2
}
 80195a8:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
 80195ac:	e0bff417 	ldw	r2,-48(fp)
 80195b0:	00c01244 	movi	r3,73
 80195b4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 80195b8:	e0bff617 	ldw	r2,-40(fp)
 80195bc:	e0bffe15 	stw	r2,-8(fp)
             break;
 80195c0:	00003706 	br	80196a0 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 80195c4:	000f883a 	mov	r7,zero
 80195c8:	01800104 	movi	r6,4
 80195cc:	000b883a 	mov	r5,zero
 80195d0:	e13ff617 	ldw	r4,-40(fp)
 80195d4:	8015f600 	call	8015f60 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 80195d8:	e0bff617 	ldw	r2,-40(fp)
 80195dc:	10800283 	ldbu	r2,10(r2)
 80195e0:	10803fcc 	andi	r2,r2,255
 80195e4:	103ff71e 	bne	r2,zero,80195c4 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 80195e8:	e0bff617 	ldw	r2,-40(fp)
 80195ec:	00c00fc4 	movi	r3,63
 80195f0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 80195f4:	e0bff617 	ldw	r2,-40(fp)
 80195f8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 80195fc:	e0bff617 	ldw	r2,-40(fp)
 8019600:	10800117 	ldw	r2,4(r2)
 8019604:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
 8019608:	d0e07117 	ldw	r3,-32316(gp)
 801960c:	e0bffc17 	ldw	r2,-16(fp)
 8019610:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 8019614:	e0bffc17 	ldw	r2,-16(fp)
 8019618:	d0a07115 	stw	r2,-32316(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 801961c:	e0bff617 	ldw	r2,-40(fp)
 8019620:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 8019624:	d0e07317 	ldw	r3,-32308(gp)
 8019628:	e0bff617 	ldw	r2,-40(fp)
 801962c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 8019630:	e0bff617 	ldw	r2,-40(fp)
 8019634:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 8019638:	e0bff617 	ldw	r2,-40(fp)
 801963c:	d0a07315 	stw	r2,-32308(gp)
 8019640:	e0bffd17 	ldw	r2,-12(fp)
 8019644:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8019648:	e0bff817 	ldw	r2,-32(fp)
 801964c:	1001703a 	wrctl	status,r2
}
 8019650:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8019654:	e0bfffc3 	ldbu	r2,-1(fp)
 8019658:	10800058 	cmpnei	r2,r2,1
 801965c:	1000011e 	bne	r2,zero,8019664 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 8019660:	80169940 	call	8016994 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 8019664:	e0bff417 	ldw	r2,-48(fp)
 8019668:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 801966c:	e03ffe15 	stw	zero,-8(fp)
             break;
 8019670:	00000b06 	br	80196a0 <OSQDel+0x278>
 8019674:	e0bffd17 	ldw	r2,-12(fp)
 8019678:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801967c:	e0bff717 	ldw	r2,-36(fp)
 8019680:	1001703a 	wrctl	status,r2
}
 8019684:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 8019688:	e0bff417 	ldw	r2,-48(fp)
 801968c:	00c001c4 	movi	r3,7
 8019690:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 8019694:	e0bff617 	ldw	r2,-40(fp)
 8019698:	e0bffe15 	stw	r2,-8(fp)
             break;
 801969c:	0001883a 	nop
    }
    return (pevent_return);
 80196a0:	e0bffe17 	ldw	r2,-8(fp)
}
 80196a4:	e037883a 	mov	sp,fp
 80196a8:	dfc00117 	ldw	ra,4(sp)
 80196ac:	df000017 	ldw	fp,0(sp)
 80196b0:	dec00204 	addi	sp,sp,8
 80196b4:	f800283a 	ret

080196b8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 80196b8:	defffa04 	addi	sp,sp,-24
 80196bc:	df000515 	stw	fp,20(sp)
 80196c0:	df000504 	addi	fp,sp,20
 80196c4:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80196c8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80196cc:	e0bffb17 	ldw	r2,-20(fp)
 80196d0:	1000021e 	bne	r2,zero,80196dc <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 80196d4:	00800104 	movi	r2,4
 80196d8:	00002206 	br	8019764 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 80196dc:	e0bffb17 	ldw	r2,-20(fp)
 80196e0:	10800003 	ldbu	r2,0(r2)
 80196e4:	10803fcc 	andi	r2,r2,255
 80196e8:	108000a0 	cmpeqi	r2,r2,2
 80196ec:	1000021e 	bne	r2,zero,80196f8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 80196f0:	00800044 	movi	r2,1
 80196f4:	00001b06 	br	8019764 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
 80196f8:	0005303a 	rdctl	r2,status
 80196fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019700:	e0fffc17 	ldw	r3,-16(fp)
 8019704:	00bfff84 	movi	r2,-2
 8019708:	1884703a 	and	r2,r3,r2
 801970c:	1001703a 	wrctl	status,r2
  return context;
 8019710:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8019714:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 8019718:	e0bffb17 	ldw	r2,-20(fp)
 801971c:	10800117 	ldw	r2,4(r2)
 8019720:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
 8019724:	e0bffe17 	ldw	r2,-8(fp)
 8019728:	10c00117 	ldw	r3,4(r2)
 801972c:	e0bffe17 	ldw	r2,-8(fp)
 8019730:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 8019734:	e0bffe17 	ldw	r2,-8(fp)
 8019738:	10c00117 	ldw	r3,4(r2)
 801973c:	e0bffe17 	ldw	r2,-8(fp)
 8019740:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 8019744:	e0bffe17 	ldw	r2,-8(fp)
 8019748:	1000058d 	sth	zero,22(r2)
 801974c:	e0bfff17 	ldw	r2,-4(fp)
 8019750:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8019754:	e0bffd17 	ldw	r2,-12(fp)
 8019758:	1001703a 	wrctl	status,r2
}
 801975c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8019760:	0005883a 	mov	r2,zero
}
 8019764:	e037883a 	mov	sp,fp
 8019768:	df000017 	ldw	fp,0(sp)
 801976c:	dec00104 	addi	sp,sp,4
 8019770:	f800283a 	ret

08019774 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 8019774:	defff304 	addi	sp,sp,-52
 8019778:	dfc00c15 	stw	ra,48(sp)
 801977c:	df000b15 	stw	fp,44(sp)
 8019780:	df000b04 	addi	fp,sp,44
 8019784:	e13ff715 	stw	r4,-36(fp)
 8019788:	2805883a 	mov	r2,r5
 801978c:	e1bff515 	stw	r6,-44(fp)
 8019790:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8019794:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8019798:	e0bff517 	ldw	r2,-44(fp)
 801979c:	1000021e 	bne	r2,zero,80197a8 <OSQPend+0x34>
        return ((void *)0);
 80197a0:	0005883a 	mov	r2,zero
 80197a4:	00009406 	br	80199f8 <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 80197a8:	e0bff717 	ldw	r2,-36(fp)
 80197ac:	1000051e 	bne	r2,zero,80197c4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80197b0:	e0bff517 	ldw	r2,-44(fp)
 80197b4:	00c00104 	movi	r3,4
 80197b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80197bc:	0005883a 	mov	r2,zero
 80197c0:	00008d06 	br	80199f8 <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 80197c4:	e0bff717 	ldw	r2,-36(fp)
 80197c8:	10800003 	ldbu	r2,0(r2)
 80197cc:	10803fcc 	andi	r2,r2,255
 80197d0:	108000a0 	cmpeqi	r2,r2,2
 80197d4:	1000051e 	bne	r2,zero,80197ec <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80197d8:	e0bff517 	ldw	r2,-44(fp)
 80197dc:	00c00044 	movi	r3,1
 80197e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80197e4:	0005883a 	mov	r2,zero
 80197e8:	00008306 	br	80199f8 <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 80197ec:	d0a07403 	ldbu	r2,-32304(gp)
 80197f0:	10803fcc 	andi	r2,r2,255
 80197f4:	10000526 	beq	r2,zero,801980c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 80197f8:	e0bff517 	ldw	r2,-44(fp)
 80197fc:	00c00084 	movi	r3,2
 8019800:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8019804:	0005883a 	mov	r2,zero
 8019808:	00007b06 	br	80199f8 <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 801980c:	d0a06603 	ldbu	r2,-32360(gp)
 8019810:	10803fcc 	andi	r2,r2,255
 8019814:	10000526 	beq	r2,zero,801982c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 8019818:	e0bff517 	ldw	r2,-44(fp)
 801981c:	00c00344 	movi	r3,13
 8019820:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8019824:	0005883a 	mov	r2,zero
 8019828:	00007306 	br	80199f8 <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
 801982c:	0005303a 	rdctl	r2,status
 8019830:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019834:	e0fffc17 	ldw	r3,-16(fp)
 8019838:	00bfff84 	movi	r2,-2
 801983c:	1884703a 	and	r2,r3,r2
 8019840:	1001703a 	wrctl	status,r2
  return context;
 8019844:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8019848:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 801984c:	e0bff717 	ldw	r2,-36(fp)
 8019850:	10800117 	ldw	r2,4(r2)
 8019854:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 8019858:	e0bffd17 	ldw	r2,-12(fp)
 801985c:	1080058b 	ldhu	r2,22(r2)
 8019860:	10bfffcc 	andi	r2,r2,65535
 8019864:	10001f26 	beq	r2,zero,80198e4 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 8019868:	e0bffd17 	ldw	r2,-12(fp)
 801986c:	10800417 	ldw	r2,16(r2)
 8019870:	11000104 	addi	r4,r2,4
 8019874:	e0fffd17 	ldw	r3,-12(fp)
 8019878:	19000415 	stw	r4,16(r3)
 801987c:	10800017 	ldw	r2,0(r2)
 8019880:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 8019884:	e0bffd17 	ldw	r2,-12(fp)
 8019888:	1080058b 	ldhu	r2,22(r2)
 801988c:	10bfffc4 	addi	r2,r2,-1
 8019890:	1007883a 	mov	r3,r2
 8019894:	e0bffd17 	ldw	r2,-12(fp)
 8019898:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 801989c:	e0bffd17 	ldw	r2,-12(fp)
 80198a0:	10c00417 	ldw	r3,16(r2)
 80198a4:	e0bffd17 	ldw	r2,-12(fp)
 80198a8:	10800217 	ldw	r2,8(r2)
 80198ac:	1880041e 	bne	r3,r2,80198c0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 80198b0:	e0bffd17 	ldw	r2,-12(fp)
 80198b4:	10c00117 	ldw	r3,4(r2)
 80198b8:	e0bffd17 	ldw	r2,-12(fp)
 80198bc:	10c00415 	stw	r3,16(r2)
 80198c0:	e0bffe17 	ldw	r2,-8(fp)
 80198c4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80198c8:	e0bffb17 	ldw	r2,-20(fp)
 80198cc:	1001703a 	wrctl	status,r2
}
 80198d0:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 80198d4:	e0bff517 	ldw	r2,-44(fp)
 80198d8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 80198dc:	e0bfff17 	ldw	r2,-4(fp)
 80198e0:	00004506 	br	80199f8 <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 80198e4:	d0a07517 	ldw	r2,-32300(gp)
 80198e8:	10c00c03 	ldbu	r3,48(r2)
 80198ec:	d0a07517 	ldw	r2,-32300(gp)
 80198f0:	18c00114 	ori	r3,r3,4
 80198f4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80198f8:	d0a07517 	ldw	r2,-32300(gp)
 80198fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 8019900:	d0a07517 	ldw	r2,-32300(gp)
 8019904:	e0fff60b 	ldhu	r3,-40(fp)
 8019908:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 801990c:	e13ff717 	ldw	r4,-36(fp)
 8019910:	80160e80 	call	80160e8 <OS_EventTaskWait>
 8019914:	e0bffe17 	ldw	r2,-8(fp)
 8019918:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801991c:	e0bff917 	ldw	r2,-28(fp)
 8019920:	1001703a 	wrctl	status,r2
}
 8019924:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 8019928:	80169940 	call	8016994 <OS_Sched>
  NIOS2_READ_STATUS (context);
 801992c:	0005303a 	rdctl	r2,status
 8019930:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019934:	e0fffa17 	ldw	r3,-24(fp)
 8019938:	00bfff84 	movi	r2,-2
 801993c:	1884703a 	and	r2,r3,r2
 8019940:	1001703a 	wrctl	status,r2
  return context;
 8019944:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
 8019948:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 801994c:	d0a07517 	ldw	r2,-32300(gp)
 8019950:	10800c43 	ldbu	r2,49(r2)
 8019954:	10803fcc 	andi	r2,r2,255
 8019958:	10000326 	beq	r2,zero,8019968 <OSQPend+0x1f4>
 801995c:	108000a0 	cmpeqi	r2,r2,2
 8019960:	1000071e 	bne	r2,zero,8019980 <OSQPend+0x20c>
 8019964:	00000b06 	br	8019994 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 8019968:	d0a07517 	ldw	r2,-32300(gp)
 801996c:	10800917 	ldw	r2,36(r2)
 8019970:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
 8019974:	e0bff517 	ldw	r2,-44(fp)
 8019978:	10000005 	stb	zero,0(r2)
             break;
 801997c:	00000e06 	br	80199b8 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8019980:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8019984:	e0bff517 	ldw	r2,-44(fp)
 8019988:	00c00384 	movi	r3,14
 801998c:	10c00005 	stb	r3,0(r2)
             break;
 8019990:	00000906 	br	80199b8 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8019994:	d0a07517 	ldw	r2,-32300(gp)
 8019998:	e17ff717 	ldw	r5,-36(fp)
 801999c:	1009883a 	mov	r4,r2
 80199a0:	80163380 	call	8016338 <OS_EventTaskRemove>
             pmsg = (void *)0;
 80199a4:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80199a8:	e0bff517 	ldw	r2,-44(fp)
 80199ac:	00c00284 	movi	r3,10
 80199b0:	10c00005 	stb	r3,0(r2)
             break;
 80199b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80199b8:	d0a07517 	ldw	r2,-32300(gp)
 80199bc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80199c0:	d0a07517 	ldw	r2,-32300(gp)
 80199c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80199c8:	d0a07517 	ldw	r2,-32300(gp)
 80199cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80199d0:	d0a07517 	ldw	r2,-32300(gp)
 80199d4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 80199d8:	d0a07517 	ldw	r2,-32300(gp)
 80199dc:	10000915 	stw	zero,36(r2)
 80199e0:	e0bffe17 	ldw	r2,-8(fp)
 80199e4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 80199e8:	e0bff817 	ldw	r2,-32(fp)
 80199ec:	1001703a 	wrctl	status,r2
}
 80199f0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 80199f4:	e0bfff17 	ldw	r2,-4(fp)
}
 80199f8:	e037883a 	mov	sp,fp
 80199fc:	dfc00117 	ldw	ra,4(sp)
 8019a00:	df000017 	ldw	fp,0(sp)
 8019a04:	dec00204 	addi	sp,sp,8
 8019a08:	f800283a 	ret

08019a0c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8019a0c:	defff604 	addi	sp,sp,-40
 8019a10:	dfc00915 	stw	ra,36(sp)
 8019a14:	df000815 	stw	fp,32(sp)
 8019a18:	df000804 	addi	fp,sp,32
 8019a1c:	e13ffa15 	stw	r4,-24(fp)
 8019a20:	2805883a 	mov	r2,r5
 8019a24:	e1bff815 	stw	r6,-32(fp)
 8019a28:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8019a2c:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8019a30:	e0bff817 	ldw	r2,-32(fp)
 8019a34:	1000021e 	bne	r2,zero,8019a40 <OSQPendAbort+0x34>
        return (0);
 8019a38:	0005883a 	mov	r2,zero
 8019a3c:	00004b06 	br	8019b6c <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8019a40:	e0bffa17 	ldw	r2,-24(fp)
 8019a44:	1000051e 	bne	r2,zero,8019a5c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8019a48:	e0bff817 	ldw	r2,-32(fp)
 8019a4c:	00c00104 	movi	r3,4
 8019a50:	10c00005 	stb	r3,0(r2)
        return (0);
 8019a54:	0005883a 	mov	r2,zero
 8019a58:	00004406 	br	8019b6c <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 8019a5c:	e0bffa17 	ldw	r2,-24(fp)
 8019a60:	10800003 	ldbu	r2,0(r2)
 8019a64:	10803fcc 	andi	r2,r2,255
 8019a68:	108000a0 	cmpeqi	r2,r2,2
 8019a6c:	1000051e 	bne	r2,zero,8019a84 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8019a70:	e0bff817 	ldw	r2,-32(fp)
 8019a74:	00c00044 	movi	r3,1
 8019a78:	10c00005 	stb	r3,0(r2)
        return (0);
 8019a7c:	0005883a 	mov	r2,zero
 8019a80:	00003a06 	br	8019b6c <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
 8019a84:	0005303a 	rdctl	r2,status
 8019a88:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019a8c:	e0fffd17 	ldw	r3,-12(fp)
 8019a90:	00bfff84 	movi	r2,-2
 8019a94:	1884703a 	and	r2,r3,r2
 8019a98:	1001703a 	wrctl	status,r2
  return context;
 8019a9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8019aa0:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 8019aa4:	e0bffa17 	ldw	r2,-24(fp)
 8019aa8:	10800283 	ldbu	r2,10(r2)
 8019aac:	10803fcc 	andi	r2,r2,255
 8019ab0:	10002626 	beq	r2,zero,8019b4c <OSQPendAbort+0x140>
        nbr_tasks = 0;
 8019ab4:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
 8019ab8:	e0bff903 	ldbu	r2,-28(fp)
 8019abc:	10800058 	cmpnei	r2,r2,1
 8019ac0:	10000e1e 	bne	r2,zero,8019afc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8019ac4:	00000806 	br	8019ae8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8019ac8:	01c00084 	movi	r7,2
 8019acc:	01800104 	movi	r6,4
 8019ad0:	000b883a 	mov	r5,zero
 8019ad4:	e13ffa17 	ldw	r4,-24(fp)
 8019ad8:	8015f600 	call	8015f60 <OS_EventTaskRdy>
                     nbr_tasks++;
 8019adc:	e0bfffc3 	ldbu	r2,-1(fp)
 8019ae0:	10800044 	addi	r2,r2,1
 8019ae4:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8019ae8:	e0bffa17 	ldw	r2,-24(fp)
 8019aec:	10800283 	ldbu	r2,10(r2)
 8019af0:	10803fcc 	andi	r2,r2,255
 8019af4:	103ff41e 	bne	r2,zero,8019ac8 <OSQPendAbort+0xbc>
                 }
                 break;
 8019af8:	00000906 	br	8019b20 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8019afc:	01c00084 	movi	r7,2
 8019b00:	01800104 	movi	r6,4
 8019b04:	000b883a 	mov	r5,zero
 8019b08:	e13ffa17 	ldw	r4,-24(fp)
 8019b0c:	8015f600 	call	8015f60 <OS_EventTaskRdy>
                 nbr_tasks++;
 8019b10:	e0bfffc3 	ldbu	r2,-1(fp)
 8019b14:	10800044 	addi	r2,r2,1
 8019b18:	e0bfffc5 	stb	r2,-1(fp)
                 break;
 8019b1c:	0001883a 	nop
 8019b20:	e0bffe17 	ldw	r2,-8(fp)
 8019b24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8019b28:	e0bffc17 	ldw	r2,-16(fp)
 8019b2c:	1001703a 	wrctl	status,r2
}
 8019b30:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 8019b34:	80169940 	call	8016994 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 8019b38:	e0bff817 	ldw	r2,-32(fp)
 8019b3c:	00c00384 	movi	r3,14
 8019b40:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 8019b44:	e0bfffc3 	ldbu	r2,-1(fp)
 8019b48:	00000806 	br	8019b6c <OSQPendAbort+0x160>
 8019b4c:	e0bffe17 	ldw	r2,-8(fp)
 8019b50:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8019b54:	e0bffb17 	ldw	r2,-20(fp)
 8019b58:	1001703a 	wrctl	status,r2
}
 8019b5c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8019b60:	e0bff817 	ldw	r2,-32(fp)
 8019b64:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 8019b68:	0005883a 	mov	r2,zero
}
 8019b6c:	e037883a 	mov	sp,fp
 8019b70:	dfc00117 	ldw	ra,4(sp)
 8019b74:	df000017 	ldw	fp,0(sp)
 8019b78:	dec00204 	addi	sp,sp,8
 8019b7c:	f800283a 	ret

08019b80 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 8019b80:	defff604 	addi	sp,sp,-40
 8019b84:	dfc00915 	stw	ra,36(sp)
 8019b88:	df000815 	stw	fp,32(sp)
 8019b8c:	df000804 	addi	fp,sp,32
 8019b90:	e13ff915 	stw	r4,-28(fp)
 8019b94:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8019b98:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8019b9c:	e0bff917 	ldw	r2,-28(fp)
 8019ba0:	1000021e 	bne	r2,zero,8019bac <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8019ba4:	00800104 	movi	r2,4
 8019ba8:	00004d06 	br	8019ce0 <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8019bac:	e0bff917 	ldw	r2,-28(fp)
 8019bb0:	10800003 	ldbu	r2,0(r2)
 8019bb4:	10803fcc 	andi	r2,r2,255
 8019bb8:	108000a0 	cmpeqi	r2,r2,2
 8019bbc:	1000021e 	bne	r2,zero,8019bc8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 8019bc0:	00800044 	movi	r2,1
 8019bc4:	00004606 	br	8019ce0 <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
 8019bc8:	0005303a 	rdctl	r2,status
 8019bcc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019bd0:	e0fffd17 	ldw	r3,-12(fp)
 8019bd4:	00bfff84 	movi	r2,-2
 8019bd8:	1884703a 	and	r2,r3,r2
 8019bdc:	1001703a 	wrctl	status,r2
  return context;
 8019be0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8019be4:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 8019be8:	e0bff917 	ldw	r2,-28(fp)
 8019bec:	10800283 	ldbu	r2,10(r2)
 8019bf0:	10803fcc 	andi	r2,r2,255
 8019bf4:	10000d26 	beq	r2,zero,8019c2c <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8019bf8:	000f883a 	mov	r7,zero
 8019bfc:	01800104 	movi	r6,4
 8019c00:	e17ff817 	ldw	r5,-32(fp)
 8019c04:	e13ff917 	ldw	r4,-28(fp)
 8019c08:	8015f600 	call	8015f60 <OS_EventTaskRdy>
 8019c0c:	e0bfff17 	ldw	r2,-4(fp)
 8019c10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8019c14:	e0bffc17 	ldw	r2,-16(fp)
 8019c18:	1001703a 	wrctl	status,r2
}
 8019c1c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 8019c20:	80169940 	call	8016994 <OS_Sched>
        return (OS_ERR_NONE);
 8019c24:	0005883a 	mov	r2,zero
 8019c28:	00002d06 	br	8019ce0 <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8019c2c:	e0bff917 	ldw	r2,-28(fp)
 8019c30:	10800117 	ldw	r2,4(r2)
 8019c34:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 8019c38:	e0bffe17 	ldw	r2,-8(fp)
 8019c3c:	10c0058b 	ldhu	r3,22(r2)
 8019c40:	e0bffe17 	ldw	r2,-8(fp)
 8019c44:	1080050b 	ldhu	r2,20(r2)
 8019c48:	18ffffcc 	andi	r3,r3,65535
 8019c4c:	10bfffcc 	andi	r2,r2,65535
 8019c50:	18800736 	bltu	r3,r2,8019c70 <OSQPost+0xf0>
 8019c54:	e0bfff17 	ldw	r2,-4(fp)
 8019c58:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8019c5c:	e0bffb17 	ldw	r2,-20(fp)
 8019c60:	1001703a 	wrctl	status,r2
}
 8019c64:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8019c68:	00800784 	movi	r2,30
 8019c6c:	00001c06 	br	8019ce0 <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 8019c70:	e0bffe17 	ldw	r2,-8(fp)
 8019c74:	10800317 	ldw	r2,12(r2)
 8019c78:	11000104 	addi	r4,r2,4
 8019c7c:	e0fffe17 	ldw	r3,-8(fp)
 8019c80:	19000315 	stw	r4,12(r3)
 8019c84:	e0fff817 	ldw	r3,-32(fp)
 8019c88:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 8019c8c:	e0bffe17 	ldw	r2,-8(fp)
 8019c90:	1080058b 	ldhu	r2,22(r2)
 8019c94:	10800044 	addi	r2,r2,1
 8019c98:	1007883a 	mov	r3,r2
 8019c9c:	e0bffe17 	ldw	r2,-8(fp)
 8019ca0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 8019ca4:	e0bffe17 	ldw	r2,-8(fp)
 8019ca8:	10c00317 	ldw	r3,12(r2)
 8019cac:	e0bffe17 	ldw	r2,-8(fp)
 8019cb0:	10800217 	ldw	r2,8(r2)
 8019cb4:	1880041e 	bne	r3,r2,8019cc8 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
 8019cb8:	e0bffe17 	ldw	r2,-8(fp)
 8019cbc:	10c00117 	ldw	r3,4(r2)
 8019cc0:	e0bffe17 	ldw	r2,-8(fp)
 8019cc4:	10c00315 	stw	r3,12(r2)
 8019cc8:	e0bfff17 	ldw	r2,-4(fp)
 8019ccc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8019cd0:	e0bffa17 	ldw	r2,-24(fp)
 8019cd4:	1001703a 	wrctl	status,r2
}
 8019cd8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8019cdc:	0005883a 	mov	r2,zero
}
 8019ce0:	e037883a 	mov	sp,fp
 8019ce4:	dfc00117 	ldw	ra,4(sp)
 8019ce8:	df000017 	ldw	fp,0(sp)
 8019cec:	dec00204 	addi	sp,sp,8
 8019cf0:	f800283a 	ret

08019cf4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 8019cf4:	defff604 	addi	sp,sp,-40
 8019cf8:	dfc00915 	stw	ra,36(sp)
 8019cfc:	df000815 	stw	fp,32(sp)
 8019d00:	df000804 	addi	fp,sp,32
 8019d04:	e13ff915 	stw	r4,-28(fp)
 8019d08:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8019d0c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8019d10:	e0bff917 	ldw	r2,-28(fp)
 8019d14:	1000021e 	bne	r2,zero,8019d20 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8019d18:	00800104 	movi	r2,4
 8019d1c:	00004f06 	br	8019e5c <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8019d20:	e0bff917 	ldw	r2,-28(fp)
 8019d24:	10800003 	ldbu	r2,0(r2)
 8019d28:	10803fcc 	andi	r2,r2,255
 8019d2c:	108000a0 	cmpeqi	r2,r2,2
 8019d30:	1000021e 	bne	r2,zero,8019d3c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 8019d34:	00800044 	movi	r2,1
 8019d38:	00004806 	br	8019e5c <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
 8019d3c:	0005303a 	rdctl	r2,status
 8019d40:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019d44:	e0fffd17 	ldw	r3,-12(fp)
 8019d48:	00bfff84 	movi	r2,-2
 8019d4c:	1884703a 	and	r2,r3,r2
 8019d50:	1001703a 	wrctl	status,r2
  return context;
 8019d54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8019d58:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 8019d5c:	e0bff917 	ldw	r2,-28(fp)
 8019d60:	10800283 	ldbu	r2,10(r2)
 8019d64:	10803fcc 	andi	r2,r2,255
 8019d68:	10000d26 	beq	r2,zero,8019da0 <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8019d6c:	000f883a 	mov	r7,zero
 8019d70:	01800104 	movi	r6,4
 8019d74:	e17ff817 	ldw	r5,-32(fp)
 8019d78:	e13ff917 	ldw	r4,-28(fp)
 8019d7c:	8015f600 	call	8015f60 <OS_EventTaskRdy>
 8019d80:	e0bfff17 	ldw	r2,-4(fp)
 8019d84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8019d88:	e0bffc17 	ldw	r2,-16(fp)
 8019d8c:	1001703a 	wrctl	status,r2
}
 8019d90:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 8019d94:	80169940 	call	8016994 <OS_Sched>
        return (OS_ERR_NONE);
 8019d98:	0005883a 	mov	r2,zero
 8019d9c:	00002f06 	br	8019e5c <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8019da0:	e0bff917 	ldw	r2,-28(fp)
 8019da4:	10800117 	ldw	r2,4(r2)
 8019da8:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8019dac:	e0bffe17 	ldw	r2,-8(fp)
 8019db0:	10c0058b 	ldhu	r3,22(r2)
 8019db4:	e0bffe17 	ldw	r2,-8(fp)
 8019db8:	1080050b 	ldhu	r2,20(r2)
 8019dbc:	18ffffcc 	andi	r3,r3,65535
 8019dc0:	10bfffcc 	andi	r2,r2,65535
 8019dc4:	18800736 	bltu	r3,r2,8019de4 <OSQPostFront+0xf0>
 8019dc8:	e0bfff17 	ldw	r2,-4(fp)
 8019dcc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8019dd0:	e0bffb17 	ldw	r2,-20(fp)
 8019dd4:	1001703a 	wrctl	status,r2
}
 8019dd8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8019ddc:	00800784 	movi	r2,30
 8019de0:	00001e06 	br	8019e5c <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 8019de4:	e0bffe17 	ldw	r2,-8(fp)
 8019de8:	10c00417 	ldw	r3,16(r2)
 8019dec:	e0bffe17 	ldw	r2,-8(fp)
 8019df0:	10800117 	ldw	r2,4(r2)
 8019df4:	1880041e 	bne	r3,r2,8019e08 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
 8019df8:	e0bffe17 	ldw	r2,-8(fp)
 8019dfc:	10c00217 	ldw	r3,8(r2)
 8019e00:	e0bffe17 	ldw	r2,-8(fp)
 8019e04:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 8019e08:	e0bffe17 	ldw	r2,-8(fp)
 8019e0c:	10800417 	ldw	r2,16(r2)
 8019e10:	10ffff04 	addi	r3,r2,-4
 8019e14:	e0bffe17 	ldw	r2,-8(fp)
 8019e18:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 8019e1c:	e0bffe17 	ldw	r2,-8(fp)
 8019e20:	10800417 	ldw	r2,16(r2)
 8019e24:	e0fff817 	ldw	r3,-32(fp)
 8019e28:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8019e2c:	e0bffe17 	ldw	r2,-8(fp)
 8019e30:	1080058b 	ldhu	r2,22(r2)
 8019e34:	10800044 	addi	r2,r2,1
 8019e38:	1007883a 	mov	r3,r2
 8019e3c:	e0bffe17 	ldw	r2,-8(fp)
 8019e40:	10c0058d 	sth	r3,22(r2)
 8019e44:	e0bfff17 	ldw	r2,-4(fp)
 8019e48:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8019e4c:	e0bffa17 	ldw	r2,-24(fp)
 8019e50:	1001703a 	wrctl	status,r2
}
 8019e54:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8019e58:	0005883a 	mov	r2,zero
}
 8019e5c:	e037883a 	mov	sp,fp
 8019e60:	dfc00117 	ldw	ra,4(sp)
 8019e64:	df000017 	ldw	fp,0(sp)
 8019e68:	dec00204 	addi	sp,sp,8
 8019e6c:	f800283a 	ret

08019e70 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 8019e70:	defff504 	addi	sp,sp,-44
 8019e74:	dfc00a15 	stw	ra,40(sp)
 8019e78:	df000915 	stw	fp,36(sp)
 8019e7c:	df000904 	addi	fp,sp,36
 8019e80:	e13ff915 	stw	r4,-28(fp)
 8019e84:	e17ff815 	stw	r5,-32(fp)
 8019e88:	3005883a 	mov	r2,r6
 8019e8c:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8019e90:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8019e94:	e0bff917 	ldw	r2,-28(fp)
 8019e98:	1000021e 	bne	r2,zero,8019ea4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 8019e9c:	00800104 	movi	r2,4
 8019ea0:	00007406 	br	801a074 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8019ea4:	e0bff917 	ldw	r2,-28(fp)
 8019ea8:	10800003 	ldbu	r2,0(r2)
 8019eac:	10803fcc 	andi	r2,r2,255
 8019eb0:	108000a0 	cmpeqi	r2,r2,2
 8019eb4:	1000021e 	bne	r2,zero,8019ec0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 8019eb8:	00800044 	movi	r2,1
 8019ebc:	00006d06 	br	801a074 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
 8019ec0:	0005303a 	rdctl	r2,status
 8019ec4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019ec8:	e0fffd17 	ldw	r3,-12(fp)
 8019ecc:	00bfff84 	movi	r2,-2
 8019ed0:	1884703a 	and	r2,r3,r2
 8019ed4:	1001703a 	wrctl	status,r2
  return context;
 8019ed8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8019edc:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 8019ee0:	e0bff917 	ldw	r2,-28(fp)
 8019ee4:	10800283 	ldbu	r2,10(r2)
 8019ee8:	10803fcc 	andi	r2,r2,255
 8019eec:	10001e26 	beq	r2,zero,8019f68 <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 8019ef0:	e0bff703 	ldbu	r2,-36(fp)
 8019ef4:	1080004c 	andi	r2,r2,1
 8019ef8:	10000b26 	beq	r2,zero,8019f28 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8019efc:	00000506 	br	8019f14 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8019f00:	000f883a 	mov	r7,zero
 8019f04:	01800104 	movi	r6,4
 8019f08:	e17ff817 	ldw	r5,-32(fp)
 8019f0c:	e13ff917 	ldw	r4,-28(fp)
 8019f10:	8015f600 	call	8015f60 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8019f14:	e0bff917 	ldw	r2,-28(fp)
 8019f18:	10800283 	ldbu	r2,10(r2)
 8019f1c:	10803fcc 	andi	r2,r2,255
 8019f20:	103ff71e 	bne	r2,zero,8019f00 <OSQPostOpt+0x90>
 8019f24:	00000506 	br	8019f3c <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8019f28:	000f883a 	mov	r7,zero
 8019f2c:	01800104 	movi	r6,4
 8019f30:	e17ff817 	ldw	r5,-32(fp)
 8019f34:	e13ff917 	ldw	r4,-28(fp)
 8019f38:	8015f600 	call	8015f60 <OS_EventTaskRdy>
 8019f3c:	e0bfff17 	ldw	r2,-4(fp)
 8019f40:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8019f44:	e0bffc17 	ldw	r2,-16(fp)
 8019f48:	1001703a 	wrctl	status,r2
}
 8019f4c:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 8019f50:	e0bff703 	ldbu	r2,-36(fp)
 8019f54:	1080010c 	andi	r2,r2,4
 8019f58:	1000011e 	bne	r2,zero,8019f60 <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
 8019f5c:	80169940 	call	8016994 <OS_Sched>
        }
        return (OS_ERR_NONE);
 8019f60:	0005883a 	mov	r2,zero
 8019f64:	00004306 	br	801a074 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8019f68:	e0bff917 	ldw	r2,-28(fp)
 8019f6c:	10800117 	ldw	r2,4(r2)
 8019f70:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8019f74:	e0bffe17 	ldw	r2,-8(fp)
 8019f78:	10c0058b 	ldhu	r3,22(r2)
 8019f7c:	e0bffe17 	ldw	r2,-8(fp)
 8019f80:	1080050b 	ldhu	r2,20(r2)
 8019f84:	18ffffcc 	andi	r3,r3,65535
 8019f88:	10bfffcc 	andi	r2,r2,65535
 8019f8c:	18800736 	bltu	r3,r2,8019fac <OSQPostOpt+0x13c>
 8019f90:	e0bfff17 	ldw	r2,-4(fp)
 8019f94:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8019f98:	e0bffb17 	ldw	r2,-20(fp)
 8019f9c:	1001703a 	wrctl	status,r2
}
 8019fa0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8019fa4:	00800784 	movi	r2,30
 8019fa8:	00003206 	br	801a074 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 8019fac:	e0bff703 	ldbu	r2,-36(fp)
 8019fb0:	1080008c 	andi	r2,r2,2
 8019fb4:	10001326 	beq	r2,zero,801a004 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 8019fb8:	e0bffe17 	ldw	r2,-8(fp)
 8019fbc:	10c00417 	ldw	r3,16(r2)
 8019fc0:	e0bffe17 	ldw	r2,-8(fp)
 8019fc4:	10800117 	ldw	r2,4(r2)
 8019fc8:	1880041e 	bne	r3,r2,8019fdc <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 8019fcc:	e0bffe17 	ldw	r2,-8(fp)
 8019fd0:	10c00217 	ldw	r3,8(r2)
 8019fd4:	e0bffe17 	ldw	r2,-8(fp)
 8019fd8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 8019fdc:	e0bffe17 	ldw	r2,-8(fp)
 8019fe0:	10800417 	ldw	r2,16(r2)
 8019fe4:	10ffff04 	addi	r3,r2,-4
 8019fe8:	e0bffe17 	ldw	r2,-8(fp)
 8019fec:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 8019ff0:	e0bffe17 	ldw	r2,-8(fp)
 8019ff4:	10800417 	ldw	r2,16(r2)
 8019ff8:	e0fff817 	ldw	r3,-32(fp)
 8019ffc:	10c00015 	stw	r3,0(r2)
 801a000:	00001006 	br	801a044 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 801a004:	e0bffe17 	ldw	r2,-8(fp)
 801a008:	10800317 	ldw	r2,12(r2)
 801a00c:	11000104 	addi	r4,r2,4
 801a010:	e0fffe17 	ldw	r3,-8(fp)
 801a014:	19000315 	stw	r4,12(r3)
 801a018:	e0fff817 	ldw	r3,-32(fp)
 801a01c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 801a020:	e0bffe17 	ldw	r2,-8(fp)
 801a024:	10c00317 	ldw	r3,12(r2)
 801a028:	e0bffe17 	ldw	r2,-8(fp)
 801a02c:	10800217 	ldw	r2,8(r2)
 801a030:	1880041e 	bne	r3,r2,801a044 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
 801a034:	e0bffe17 	ldw	r2,-8(fp)
 801a038:	10c00117 	ldw	r3,4(r2)
 801a03c:	e0bffe17 	ldw	r2,-8(fp)
 801a040:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 801a044:	e0bffe17 	ldw	r2,-8(fp)
 801a048:	1080058b 	ldhu	r2,22(r2)
 801a04c:	10800044 	addi	r2,r2,1
 801a050:	1007883a 	mov	r3,r2
 801a054:	e0bffe17 	ldw	r2,-8(fp)
 801a058:	10c0058d 	sth	r3,22(r2)
 801a05c:	e0bfff17 	ldw	r2,-4(fp)
 801a060:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801a064:	e0bffa17 	ldw	r2,-24(fp)
 801a068:	1001703a 	wrctl	status,r2
}
 801a06c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801a070:	0005883a 	mov	r2,zero
}
 801a074:	e037883a 	mov	sp,fp
 801a078:	dfc00117 	ldw	ra,4(sp)
 801a07c:	df000017 	ldw	fp,0(sp)
 801a080:	dec00204 	addi	sp,sp,8
 801a084:	f800283a 	ret

0801a088 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 801a088:	defff604 	addi	sp,sp,-40
 801a08c:	df000915 	stw	fp,36(sp)
 801a090:	df000904 	addi	fp,sp,36
 801a094:	e13ff815 	stw	r4,-32(fp)
 801a098:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 801a09c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 801a0a0:	e0bff817 	ldw	r2,-32(fp)
 801a0a4:	1000021e 	bne	r2,zero,801a0b0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 801a0a8:	00800104 	movi	r2,4
 801a0ac:	00004a06 	br	801a1d8 <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 801a0b0:	e0bff717 	ldw	r2,-36(fp)
 801a0b4:	1000021e 	bne	r2,zero,801a0c0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 801a0b8:	00800244 	movi	r2,9
 801a0bc:	00004606 	br	801a1d8 <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 801a0c0:	e0bff817 	ldw	r2,-32(fp)
 801a0c4:	10800003 	ldbu	r2,0(r2)
 801a0c8:	10803fcc 	andi	r2,r2,255
 801a0cc:	108000a0 	cmpeqi	r2,r2,2
 801a0d0:	1000021e 	bne	r2,zero,801a0dc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 801a0d4:	00800044 	movi	r2,1
 801a0d8:	00003f06 	br	801a1d8 <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
 801a0dc:	0005303a 	rdctl	r2,status
 801a0e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a0e4:	e0fffa17 	ldw	r3,-24(fp)
 801a0e8:	00bfff84 	movi	r2,-2
 801a0ec:	1884703a 	and	r2,r3,r2
 801a0f0:	1001703a 	wrctl	status,r2
  return context;
 801a0f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 801a0f8:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 801a0fc:	e0bff817 	ldw	r2,-32(fp)
 801a100:	10c00283 	ldbu	r3,10(r2)
 801a104:	e0bff717 	ldw	r2,-36(fp)
 801a108:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 801a10c:	e0bff817 	ldw	r2,-32(fp)
 801a110:	108002c4 	addi	r2,r2,11
 801a114:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 801a118:	e0bff717 	ldw	r2,-36(fp)
 801a11c:	10800204 	addi	r2,r2,8
 801a120:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 801a124:	e03fffc5 	stb	zero,-1(fp)
 801a128:	00000b06 	br	801a158 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 801a12c:	e0fffe17 	ldw	r3,-8(fp)
 801a130:	18800044 	addi	r2,r3,1
 801a134:	e0bffe15 	stw	r2,-8(fp)
 801a138:	e0bffd17 	ldw	r2,-12(fp)
 801a13c:	11000044 	addi	r4,r2,1
 801a140:	e13ffd15 	stw	r4,-12(fp)
 801a144:	18c00003 	ldbu	r3,0(r3)
 801a148:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 801a14c:	e0bfffc3 	ldbu	r2,-1(fp)
 801a150:	10800044 	addi	r2,r2,1
 801a154:	e0bfffc5 	stb	r2,-1(fp)
 801a158:	e0bfffc3 	ldbu	r2,-1(fp)
 801a15c:	108000f0 	cmpltui	r2,r2,3
 801a160:	103ff21e 	bne	r2,zero,801a12c <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 801a164:	e0bff817 	ldw	r2,-32(fp)
 801a168:	10800117 	ldw	r2,4(r2)
 801a16c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
 801a170:	e0bffb17 	ldw	r2,-20(fp)
 801a174:	1080058b 	ldhu	r2,22(r2)
 801a178:	10bfffcc 	andi	r2,r2,65535
 801a17c:	10000626 	beq	r2,zero,801a198 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 801a180:	e0bffb17 	ldw	r2,-20(fp)
 801a184:	10800417 	ldw	r2,16(r2)
 801a188:	10c00017 	ldw	r3,0(r2)
 801a18c:	e0bff717 	ldw	r2,-36(fp)
 801a190:	10c00015 	stw	r3,0(r2)
 801a194:	00000206 	br	801a1a0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 801a198:	e0bff717 	ldw	r2,-36(fp)
 801a19c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 801a1a0:	e0bffb17 	ldw	r2,-20(fp)
 801a1a4:	10c0058b 	ldhu	r3,22(r2)
 801a1a8:	e0bff717 	ldw	r2,-36(fp)
 801a1ac:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 801a1b0:	e0bffb17 	ldw	r2,-20(fp)
 801a1b4:	10c0050b 	ldhu	r3,20(r2)
 801a1b8:	e0bff717 	ldw	r2,-36(fp)
 801a1bc:	10c0018d 	sth	r3,6(r2)
 801a1c0:	e0bffc17 	ldw	r2,-16(fp)
 801a1c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801a1c8:	e0bff917 	ldw	r2,-28(fp)
 801a1cc:	1001703a 	wrctl	status,r2
}
 801a1d0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801a1d4:	0005883a 	mov	r2,zero
}
 801a1d8:	e037883a 	mov	sp,fp
 801a1dc:	df000017 	ldw	fp,0(sp)
 801a1e0:	dec00104 	addi	sp,sp,4
 801a1e4:	f800283a 	ret

0801a1e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 801a1e8:	defffb04 	addi	sp,sp,-20
 801a1ec:	dfc00415 	stw	ra,16(sp)
 801a1f0:	df000315 	stw	fp,12(sp)
 801a1f4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 801a1f8:	01407804 	movi	r5,480
 801a1fc:	010201b4 	movhi	r4,2054
 801a200:	21357404 	addi	r4,r4,-10800
 801a204:	80168d00 	call	80168d0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 801a208:	008201b4 	movhi	r2,2054
 801a20c:	10b57404 	addi	r2,r2,-10800
 801a210:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 801a214:	008201b4 	movhi	r2,2054
 801a218:	10b57a04 	addi	r2,r2,-10776
 801a21c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 801a220:	e03fff8d 	sth	zero,-2(fp)
 801a224:	00000c06 	br	801a258 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 801a228:	e0bffe17 	ldw	r2,-8(fp)
 801a22c:	e0fffd17 	ldw	r3,-12(fp)
 801a230:	10c00015 	stw	r3,0(r2)
        pq1++;
 801a234:	e0bffe17 	ldw	r2,-8(fp)
 801a238:	10800604 	addi	r2,r2,24
 801a23c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 801a240:	e0bffd17 	ldw	r2,-12(fp)
 801a244:	10800604 	addi	r2,r2,24
 801a248:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 801a24c:	e0bfff8b 	ldhu	r2,-2(fp)
 801a250:	10800044 	addi	r2,r2,1
 801a254:	e0bfff8d 	sth	r2,-2(fp)
 801a258:	e0bfff8b 	ldhu	r2,-2(fp)
 801a25c:	108004f0 	cmpltui	r2,r2,19
 801a260:	103ff11e 	bne	r2,zero,801a228 <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
 801a264:	e0bffe17 	ldw	r2,-8(fp)
 801a268:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 801a26c:	008201b4 	movhi	r2,2054
 801a270:	10b57404 	addi	r2,r2,-10800
 801a274:	d0a07115 	stw	r2,-32316(gp)
#endif
}
 801a278:	0001883a 	nop
 801a27c:	e037883a 	mov	sp,fp
 801a280:	dfc00117 	ldw	ra,4(sp)
 801a284:	df000017 	ldw	fp,0(sp)
 801a288:	dec00204 	addi	sp,sp,8
 801a28c:	f800283a 	ret

0801a290 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 801a290:	defffa04 	addi	sp,sp,-24
 801a294:	df000515 	stw	fp,20(sp)
 801a298:	df000504 	addi	fp,sp,20
 801a29c:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801a2a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801a2a4:	e0bffb17 	ldw	r2,-20(fp)
 801a2a8:	1000021e 	bne	r2,zero,801a2b4 <OSSemAccept+0x24>
        return (0);
 801a2ac:	0005883a 	mov	r2,zero
 801a2b0:	00002006 	br	801a334 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 801a2b4:	e0bffb17 	ldw	r2,-20(fp)
 801a2b8:	10800003 	ldbu	r2,0(r2)
 801a2bc:	10803fcc 	andi	r2,r2,255
 801a2c0:	108000e0 	cmpeqi	r2,r2,3
 801a2c4:	1000021e 	bne	r2,zero,801a2d0 <OSSemAccept+0x40>
        return (0);
 801a2c8:	0005883a 	mov	r2,zero
 801a2cc:	00001906 	br	801a334 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
 801a2d0:	0005303a 	rdctl	r2,status
 801a2d4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a2d8:	e0fffd17 	ldw	r3,-12(fp)
 801a2dc:	00bfff84 	movi	r2,-2
 801a2e0:	1884703a 	and	r2,r3,r2
 801a2e4:	1001703a 	wrctl	status,r2
  return context;
 801a2e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 801a2ec:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
 801a2f0:	e0bffb17 	ldw	r2,-20(fp)
 801a2f4:	1080020b 	ldhu	r2,8(r2)
 801a2f8:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 801a2fc:	e0bffe8b 	ldhu	r2,-6(fp)
 801a300:	10000626 	beq	r2,zero,801a31c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 801a304:	e0bffb17 	ldw	r2,-20(fp)
 801a308:	1080020b 	ldhu	r2,8(r2)
 801a30c:	10bfffc4 	addi	r2,r2,-1
 801a310:	1007883a 	mov	r3,r2
 801a314:	e0bffb17 	ldw	r2,-20(fp)
 801a318:	10c0020d 	sth	r3,8(r2)
 801a31c:	e0bfff17 	ldw	r2,-4(fp)
 801a320:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801a324:	e0bffc17 	ldw	r2,-16(fp)
 801a328:	1001703a 	wrctl	status,r2
}
 801a32c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 801a330:	e0bffe8b 	ldhu	r2,-6(fp)
}
 801a334:	e037883a 	mov	sp,fp
 801a338:	df000017 	ldw	fp,0(sp)
 801a33c:	dec00104 	addi	sp,sp,4
 801a340:	f800283a 	ret

0801a344 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 801a344:	defff904 	addi	sp,sp,-28
 801a348:	dfc00615 	stw	ra,24(sp)
 801a34c:	df000515 	stw	fp,20(sp)
 801a350:	df000504 	addi	fp,sp,20
 801a354:	2005883a 	mov	r2,r4
 801a358:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801a35c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 801a360:	d0a07403 	ldbu	r2,-32304(gp)
 801a364:	10803fcc 	andi	r2,r2,255
 801a368:	10000226 	beq	r2,zero,801a374 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 801a36c:	0005883a 	mov	r2,zero
 801a370:	00002606 	br	801a40c <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
 801a374:	0005303a 	rdctl	r2,status
 801a378:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a37c:	e0fffd17 	ldw	r3,-12(fp)
 801a380:	00bfff84 	movi	r2,-2
 801a384:	1884703a 	and	r2,r3,r2
 801a388:	1001703a 	wrctl	status,r2
  return context;
 801a38c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 801a390:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 801a394:	d0a07317 	ldw	r2,-32308(gp)
 801a398:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 801a39c:	d0a07317 	ldw	r2,-32308(gp)
 801a3a0:	10000326 	beq	r2,zero,801a3b0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 801a3a4:	d0a07317 	ldw	r2,-32308(gp)
 801a3a8:	10800117 	ldw	r2,4(r2)
 801a3ac:	d0a07315 	stw	r2,-32308(gp)
 801a3b0:	e0bfff17 	ldw	r2,-4(fp)
 801a3b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801a3b8:	e0bffc17 	ldw	r2,-16(fp)
 801a3bc:	1001703a 	wrctl	status,r2
}
 801a3c0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 801a3c4:	e0bffe17 	ldw	r2,-8(fp)
 801a3c8:	10000f26 	beq	r2,zero,801a408 <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 801a3cc:	e0bffe17 	ldw	r2,-8(fp)
 801a3d0:	00c000c4 	movi	r3,3
 801a3d4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 801a3d8:	e0bffe17 	ldw	r2,-8(fp)
 801a3dc:	e0fffb0b 	ldhu	r3,-20(fp)
 801a3e0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 801a3e4:	e0bffe17 	ldw	r2,-8(fp)
 801a3e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 801a3ec:	e0bffe17 	ldw	r2,-8(fp)
 801a3f0:	00c00fc4 	movi	r3,63
 801a3f4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 801a3f8:	e0bffe17 	ldw	r2,-8(fp)
 801a3fc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 801a400:	e13ffe17 	ldw	r4,-8(fp)
 801a404:	80164e40 	call	80164e4 <OS_EventWaitListInit>
    }
    return (pevent);
 801a408:	e0bffe17 	ldw	r2,-8(fp)
}
 801a40c:	e037883a 	mov	sp,fp
 801a410:	dfc00117 	ldw	ra,4(sp)
 801a414:	df000017 	ldw	fp,0(sp)
 801a418:	dec00204 	addi	sp,sp,8
 801a41c:	f800283a 	ret

0801a420 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 801a420:	defff304 	addi	sp,sp,-52
 801a424:	dfc00c15 	stw	ra,48(sp)
 801a428:	df000b15 	stw	fp,44(sp)
 801a42c:	df000b04 	addi	fp,sp,44
 801a430:	e13ff715 	stw	r4,-36(fp)
 801a434:	2805883a 	mov	r2,r5
 801a438:	e1bff515 	stw	r6,-44(fp)
 801a43c:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801a440:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 801a444:	e0bff517 	ldw	r2,-44(fp)
 801a448:	1000021e 	bne	r2,zero,801a454 <OSSemDel+0x34>
        return (pevent);
 801a44c:	e0bff717 	ldw	r2,-36(fp)
 801a450:	00008206 	br	801a65c <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 801a454:	e0bff717 	ldw	r2,-36(fp)
 801a458:	1000051e 	bne	r2,zero,801a470 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 801a45c:	e0bff517 	ldw	r2,-44(fp)
 801a460:	00c00104 	movi	r3,4
 801a464:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801a468:	e0bff717 	ldw	r2,-36(fp)
 801a46c:	00007b06 	br	801a65c <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 801a470:	e0bff717 	ldw	r2,-36(fp)
 801a474:	10800003 	ldbu	r2,0(r2)
 801a478:	10803fcc 	andi	r2,r2,255
 801a47c:	108000e0 	cmpeqi	r2,r2,3
 801a480:	1000051e 	bne	r2,zero,801a498 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 801a484:	e0bff517 	ldw	r2,-44(fp)
 801a488:	00c00044 	movi	r3,1
 801a48c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801a490:	e0bff717 	ldw	r2,-36(fp)
 801a494:	00007106 	br	801a65c <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 801a498:	d0a07403 	ldbu	r2,-32304(gp)
 801a49c:	10803fcc 	andi	r2,r2,255
 801a4a0:	10000526 	beq	r2,zero,801a4b8 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 801a4a4:	e0bff517 	ldw	r2,-44(fp)
 801a4a8:	00c003c4 	movi	r3,15
 801a4ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801a4b0:	e0bff717 	ldw	r2,-36(fp)
 801a4b4:	00006906 	br	801a65c <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
 801a4b8:	0005303a 	rdctl	r2,status
 801a4bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a4c0:	e0fffc17 	ldw	r3,-16(fp)
 801a4c4:	00bfff84 	movi	r2,-2
 801a4c8:	1884703a 	and	r2,r3,r2
 801a4cc:	1001703a 	wrctl	status,r2
  return context;
 801a4d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801a4d4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 801a4d8:	e0bff717 	ldw	r2,-36(fp)
 801a4dc:	10800283 	ldbu	r2,10(r2)
 801a4e0:	10803fcc 	andi	r2,r2,255
 801a4e4:	10000326 	beq	r2,zero,801a4f4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 801a4e8:	00800044 	movi	r2,1
 801a4ec:	e0bfffc5 	stb	r2,-1(fp)
 801a4f0:	00000106 	br	801a4f8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 801a4f4:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 801a4f8:	e0bff603 	ldbu	r2,-40(fp)
 801a4fc:	10000326 	beq	r2,zero,801a50c <OSSemDel+0xec>
 801a500:	10800060 	cmpeqi	r2,r2,1
 801a504:	10002a1e 	bne	r2,zero,801a5b0 <OSSemDel+0x190>
 801a508:	00004806 	br	801a62c <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 801a50c:	e0bfffc3 	ldbu	r2,-1(fp)
 801a510:	1000171e 	bne	r2,zero,801a570 <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 801a514:	e0bff717 	ldw	r2,-36(fp)
 801a518:	00c00fc4 	movi	r3,63
 801a51c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 801a520:	e0bff717 	ldw	r2,-36(fp)
 801a524:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 801a528:	e0bff717 	ldw	r2,-36(fp)
 801a52c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 801a530:	d0e07317 	ldw	r3,-32308(gp)
 801a534:	e0bff717 	ldw	r2,-36(fp)
 801a538:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 801a53c:	e0bff717 	ldw	r2,-36(fp)
 801a540:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 801a544:	e0bff717 	ldw	r2,-36(fp)
 801a548:	d0a07315 	stw	r2,-32308(gp)
 801a54c:	e0bffd17 	ldw	r2,-12(fp)
 801a550:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801a554:	e0bffb17 	ldw	r2,-20(fp)
 801a558:	1001703a 	wrctl	status,r2
}
 801a55c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 801a560:	e0bff517 	ldw	r2,-44(fp)
 801a564:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 801a568:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 801a56c:	00003a06 	br	801a658 <OSSemDel+0x238>
 801a570:	e0bffd17 	ldw	r2,-12(fp)
 801a574:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801a578:	e0bffa17 	ldw	r2,-24(fp)
 801a57c:	1001703a 	wrctl	status,r2
}
 801a580:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
 801a584:	e0bff517 	ldw	r2,-44(fp)
 801a588:	00c01244 	movi	r3,73
 801a58c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 801a590:	e0bff717 	ldw	r2,-36(fp)
 801a594:	e0bffe15 	stw	r2,-8(fp)
             break;
 801a598:	00002f06 	br	801a658 <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 801a59c:	000f883a 	mov	r7,zero
 801a5a0:	01800044 	movi	r6,1
 801a5a4:	000b883a 	mov	r5,zero
 801a5a8:	e13ff717 	ldw	r4,-36(fp)
 801a5ac:	8015f600 	call	8015f60 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 801a5b0:	e0bff717 	ldw	r2,-36(fp)
 801a5b4:	10800283 	ldbu	r2,10(r2)
 801a5b8:	10803fcc 	andi	r2,r2,255
 801a5bc:	103ff71e 	bne	r2,zero,801a59c <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 801a5c0:	e0bff717 	ldw	r2,-36(fp)
 801a5c4:	00c00fc4 	movi	r3,63
 801a5c8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 801a5cc:	e0bff717 	ldw	r2,-36(fp)
 801a5d0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 801a5d4:	e0bff717 	ldw	r2,-36(fp)
 801a5d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 801a5dc:	d0e07317 	ldw	r3,-32308(gp)
 801a5e0:	e0bff717 	ldw	r2,-36(fp)
 801a5e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 801a5e8:	e0bff717 	ldw	r2,-36(fp)
 801a5ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 801a5f0:	e0bff717 	ldw	r2,-36(fp)
 801a5f4:	d0a07315 	stw	r2,-32308(gp)
 801a5f8:	e0bffd17 	ldw	r2,-12(fp)
 801a5fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801a600:	e0bff917 	ldw	r2,-28(fp)
 801a604:	1001703a 	wrctl	status,r2
}
 801a608:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 801a60c:	e0bfffc3 	ldbu	r2,-1(fp)
 801a610:	10800058 	cmpnei	r2,r2,1
 801a614:	1000011e 	bne	r2,zero,801a61c <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 801a618:	80169940 	call	8016994 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 801a61c:	e0bff517 	ldw	r2,-44(fp)
 801a620:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 801a624:	e03ffe15 	stw	zero,-8(fp)
             break;
 801a628:	00000b06 	br	801a658 <OSSemDel+0x238>
 801a62c:	e0bffd17 	ldw	r2,-12(fp)
 801a630:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801a634:	e0bff817 	ldw	r2,-32(fp)
 801a638:	1001703a 	wrctl	status,r2
}
 801a63c:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 801a640:	e0bff517 	ldw	r2,-44(fp)
 801a644:	00c001c4 	movi	r3,7
 801a648:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 801a64c:	e0bff717 	ldw	r2,-36(fp)
 801a650:	e0bffe15 	stw	r2,-8(fp)
             break;
 801a654:	0001883a 	nop
    }
    return (pevent_return);
 801a658:	e0bffe17 	ldw	r2,-8(fp)
}
 801a65c:	e037883a 	mov	sp,fp
 801a660:	dfc00117 	ldw	ra,4(sp)
 801a664:	df000017 	ldw	fp,0(sp)
 801a668:	dec00204 	addi	sp,sp,8
 801a66c:	f800283a 	ret

0801a670 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 801a670:	defff504 	addi	sp,sp,-44
 801a674:	dfc00a15 	stw	ra,40(sp)
 801a678:	df000915 	stw	fp,36(sp)
 801a67c:	df000904 	addi	fp,sp,36
 801a680:	e13ff915 	stw	r4,-28(fp)
 801a684:	2805883a 	mov	r2,r5
 801a688:	e1bff715 	stw	r6,-36(fp)
 801a68c:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801a690:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 801a694:	e0bff717 	ldw	r2,-36(fp)
 801a698:	10007426 	beq	r2,zero,801a86c <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801a69c:	e0bff917 	ldw	r2,-28(fp)
 801a6a0:	1000041e 	bne	r2,zero,801a6b4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 801a6a4:	e0bff717 	ldw	r2,-36(fp)
 801a6a8:	00c00104 	movi	r3,4
 801a6ac:	10c00005 	stb	r3,0(r2)
        return;
 801a6b0:	00006f06 	br	801a870 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 801a6b4:	e0bff917 	ldw	r2,-28(fp)
 801a6b8:	10800003 	ldbu	r2,0(r2)
 801a6bc:	10803fcc 	andi	r2,r2,255
 801a6c0:	108000e0 	cmpeqi	r2,r2,3
 801a6c4:	1000041e 	bne	r2,zero,801a6d8 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 801a6c8:	e0bff717 	ldw	r2,-36(fp)
 801a6cc:	00c00044 	movi	r3,1
 801a6d0:	10c00005 	stb	r3,0(r2)
        return;
 801a6d4:	00006606 	br	801a870 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 801a6d8:	d0a07403 	ldbu	r2,-32304(gp)
 801a6dc:	10803fcc 	andi	r2,r2,255
 801a6e0:	10000426 	beq	r2,zero,801a6f4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 801a6e4:	e0bff717 	ldw	r2,-36(fp)
 801a6e8:	00c00084 	movi	r3,2
 801a6ec:	10c00005 	stb	r3,0(r2)
        return;
 801a6f0:	00005f06 	br	801a870 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 801a6f4:	d0a06603 	ldbu	r2,-32360(gp)
 801a6f8:	10803fcc 	andi	r2,r2,255
 801a6fc:	10000426 	beq	r2,zero,801a710 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 801a700:	e0bff717 	ldw	r2,-36(fp)
 801a704:	00c00344 	movi	r3,13
 801a708:	10c00005 	stb	r3,0(r2)
        return;
 801a70c:	00005806 	br	801a870 <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
 801a710:	0005303a 	rdctl	r2,status
 801a714:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a718:	e0fffe17 	ldw	r3,-8(fp)
 801a71c:	00bfff84 	movi	r2,-2
 801a720:	1884703a 	and	r2,r3,r2
 801a724:	1001703a 	wrctl	status,r2
  return context;
 801a728:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 801a72c:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 801a730:	e0bff917 	ldw	r2,-28(fp)
 801a734:	1080020b 	ldhu	r2,8(r2)
 801a738:	10bfffcc 	andi	r2,r2,65535
 801a73c:	10000e26 	beq	r2,zero,801a778 <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 801a740:	e0bff917 	ldw	r2,-28(fp)
 801a744:	1080020b 	ldhu	r2,8(r2)
 801a748:	10bfffc4 	addi	r2,r2,-1
 801a74c:	1007883a 	mov	r3,r2
 801a750:	e0bff917 	ldw	r2,-28(fp)
 801a754:	10c0020d 	sth	r3,8(r2)
 801a758:	e0bfff17 	ldw	r2,-4(fp)
 801a75c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801a760:	e0bffd17 	ldw	r2,-12(fp)
 801a764:	1001703a 	wrctl	status,r2
}
 801a768:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 801a76c:	e0bff717 	ldw	r2,-36(fp)
 801a770:	10000005 	stb	zero,0(r2)
        return;
 801a774:	00003e06 	br	801a870 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 801a778:	d0a07517 	ldw	r2,-32300(gp)
 801a77c:	10c00c03 	ldbu	r3,48(r2)
 801a780:	d0a07517 	ldw	r2,-32300(gp)
 801a784:	18c00054 	ori	r3,r3,1
 801a788:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 801a78c:	d0a07517 	ldw	r2,-32300(gp)
 801a790:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 801a794:	d0a07517 	ldw	r2,-32300(gp)
 801a798:	e0fff80b 	ldhu	r3,-32(fp)
 801a79c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 801a7a0:	e13ff917 	ldw	r4,-28(fp)
 801a7a4:	80160e80 	call	80160e8 <OS_EventTaskWait>
 801a7a8:	e0bfff17 	ldw	r2,-4(fp)
 801a7ac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801a7b0:	e0bffb17 	ldw	r2,-20(fp)
 801a7b4:	1001703a 	wrctl	status,r2
}
 801a7b8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 801a7bc:	80169940 	call	8016994 <OS_Sched>
  NIOS2_READ_STATUS (context);
 801a7c0:	0005303a 	rdctl	r2,status
 801a7c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a7c8:	e0fffc17 	ldw	r3,-16(fp)
 801a7cc:	00bfff84 	movi	r2,-2
 801a7d0:	1884703a 	and	r2,r3,r2
 801a7d4:	1001703a 	wrctl	status,r2
  return context;
 801a7d8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 801a7dc:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 801a7e0:	d0a07517 	ldw	r2,-32300(gp)
 801a7e4:	10800c43 	ldbu	r2,49(r2)
 801a7e8:	10803fcc 	andi	r2,r2,255
 801a7ec:	10000326 	beq	r2,zero,801a7fc <OSSemPend+0x18c>
 801a7f0:	108000a0 	cmpeqi	r2,r2,2
 801a7f4:	1000041e 	bne	r2,zero,801a808 <OSSemPend+0x198>
 801a7f8:	00000706 	br	801a818 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 801a7fc:	e0bff717 	ldw	r2,-36(fp)
 801a800:	10000005 	stb	zero,0(r2)
             break;
 801a804:	00000c06 	br	801a838 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 801a808:	e0bff717 	ldw	r2,-36(fp)
 801a80c:	00c00384 	movi	r3,14
 801a810:	10c00005 	stb	r3,0(r2)
             break;
 801a814:	00000806 	br	801a838 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 801a818:	d0a07517 	ldw	r2,-32300(gp)
 801a81c:	e17ff917 	ldw	r5,-28(fp)
 801a820:	1009883a 	mov	r4,r2
 801a824:	80163380 	call	8016338 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 801a828:	e0bff717 	ldw	r2,-36(fp)
 801a82c:	00c00284 	movi	r3,10
 801a830:	10c00005 	stb	r3,0(r2)
             break;
 801a834:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 801a838:	d0a07517 	ldw	r2,-32300(gp)
 801a83c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 801a840:	d0a07517 	ldw	r2,-32300(gp)
 801a844:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 801a848:	d0a07517 	ldw	r2,-32300(gp)
 801a84c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 801a850:	d0a07517 	ldw	r2,-32300(gp)
 801a854:	10000815 	stw	zero,32(r2)
 801a858:	e0bfff17 	ldw	r2,-4(fp)
 801a85c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801a860:	e0bffa17 	ldw	r2,-24(fp)
 801a864:	1001703a 	wrctl	status,r2
}
 801a868:	00000106 	br	801a870 <OSSemPend+0x200>
        return;
 801a86c:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
 801a870:	e037883a 	mov	sp,fp
 801a874:	dfc00117 	ldw	ra,4(sp)
 801a878:	df000017 	ldw	fp,0(sp)
 801a87c:	dec00204 	addi	sp,sp,8
 801a880:	f800283a 	ret

0801a884 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 801a884:	defff604 	addi	sp,sp,-40
 801a888:	dfc00915 	stw	ra,36(sp)
 801a88c:	df000815 	stw	fp,32(sp)
 801a890:	df000804 	addi	fp,sp,32
 801a894:	e13ffa15 	stw	r4,-24(fp)
 801a898:	2805883a 	mov	r2,r5
 801a89c:	e1bff815 	stw	r6,-32(fp)
 801a8a0:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801a8a4:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 801a8a8:	e0bff817 	ldw	r2,-32(fp)
 801a8ac:	1000021e 	bne	r2,zero,801a8b8 <OSSemPendAbort+0x34>
        return (0);
 801a8b0:	0005883a 	mov	r2,zero
 801a8b4:	00004b06 	br	801a9e4 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801a8b8:	e0bffa17 	ldw	r2,-24(fp)
 801a8bc:	1000051e 	bne	r2,zero,801a8d4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 801a8c0:	e0bff817 	ldw	r2,-32(fp)
 801a8c4:	00c00104 	movi	r3,4
 801a8c8:	10c00005 	stb	r3,0(r2)
        return (0);
 801a8cc:	0005883a 	mov	r2,zero
 801a8d0:	00004406 	br	801a9e4 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 801a8d4:	e0bffa17 	ldw	r2,-24(fp)
 801a8d8:	10800003 	ldbu	r2,0(r2)
 801a8dc:	10803fcc 	andi	r2,r2,255
 801a8e0:	108000e0 	cmpeqi	r2,r2,3
 801a8e4:	1000051e 	bne	r2,zero,801a8fc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 801a8e8:	e0bff817 	ldw	r2,-32(fp)
 801a8ec:	00c00044 	movi	r3,1
 801a8f0:	10c00005 	stb	r3,0(r2)
        return (0);
 801a8f4:	0005883a 	mov	r2,zero
 801a8f8:	00003a06 	br	801a9e4 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
 801a8fc:	0005303a 	rdctl	r2,status
 801a900:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a904:	e0fffd17 	ldw	r3,-12(fp)
 801a908:	00bfff84 	movi	r2,-2
 801a90c:	1884703a 	and	r2,r3,r2
 801a910:	1001703a 	wrctl	status,r2
  return context;
 801a914:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 801a918:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 801a91c:	e0bffa17 	ldw	r2,-24(fp)
 801a920:	10800283 	ldbu	r2,10(r2)
 801a924:	10803fcc 	andi	r2,r2,255
 801a928:	10002626 	beq	r2,zero,801a9c4 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
 801a92c:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
 801a930:	e0bff903 	ldbu	r2,-28(fp)
 801a934:	10800058 	cmpnei	r2,r2,1
 801a938:	10000e1e 	bne	r2,zero,801a974 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 801a93c:	00000806 	br	801a960 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 801a940:	01c00084 	movi	r7,2
 801a944:	01800044 	movi	r6,1
 801a948:	000b883a 	mov	r5,zero
 801a94c:	e13ffa17 	ldw	r4,-24(fp)
 801a950:	8015f600 	call	8015f60 <OS_EventTaskRdy>
                     nbr_tasks++;
 801a954:	e0bfffc3 	ldbu	r2,-1(fp)
 801a958:	10800044 	addi	r2,r2,1
 801a95c:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 801a960:	e0bffa17 	ldw	r2,-24(fp)
 801a964:	10800283 	ldbu	r2,10(r2)
 801a968:	10803fcc 	andi	r2,r2,255
 801a96c:	103ff41e 	bne	r2,zero,801a940 <OSSemPendAbort+0xbc>
                 }
                 break;
 801a970:	00000906 	br	801a998 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 801a974:	01c00084 	movi	r7,2
 801a978:	01800044 	movi	r6,1
 801a97c:	000b883a 	mov	r5,zero
 801a980:	e13ffa17 	ldw	r4,-24(fp)
 801a984:	8015f600 	call	8015f60 <OS_EventTaskRdy>
                 nbr_tasks++;
 801a988:	e0bfffc3 	ldbu	r2,-1(fp)
 801a98c:	10800044 	addi	r2,r2,1
 801a990:	e0bfffc5 	stb	r2,-1(fp)
                 break;
 801a994:	0001883a 	nop
 801a998:	e0bffe17 	ldw	r2,-8(fp)
 801a99c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801a9a0:	e0bffc17 	ldw	r2,-16(fp)
 801a9a4:	1001703a 	wrctl	status,r2
}
 801a9a8:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 801a9ac:	80169940 	call	8016994 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 801a9b0:	e0bff817 	ldw	r2,-32(fp)
 801a9b4:	00c00384 	movi	r3,14
 801a9b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 801a9bc:	e0bfffc3 	ldbu	r2,-1(fp)
 801a9c0:	00000806 	br	801a9e4 <OSSemPendAbort+0x160>
 801a9c4:	e0bffe17 	ldw	r2,-8(fp)
 801a9c8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801a9cc:	e0bffb17 	ldw	r2,-20(fp)
 801a9d0:	1001703a 	wrctl	status,r2
}
 801a9d4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 801a9d8:	e0bff817 	ldw	r2,-32(fp)
 801a9dc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 801a9e0:	0005883a 	mov	r2,zero
}
 801a9e4:	e037883a 	mov	sp,fp
 801a9e8:	dfc00117 	ldw	ra,4(sp)
 801a9ec:	df000017 	ldw	fp,0(sp)
 801a9f0:	dec00204 	addi	sp,sp,8
 801a9f4:	f800283a 	ret

0801a9f8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 801a9f8:	defff804 	addi	sp,sp,-32
 801a9fc:	dfc00715 	stw	ra,28(sp)
 801aa00:	df000615 	stw	fp,24(sp)
 801aa04:	df000604 	addi	fp,sp,24
 801aa08:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801aa0c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801aa10:	e0bffa17 	ldw	r2,-24(fp)
 801aa14:	1000021e 	bne	r2,zero,801aa20 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 801aa18:	00800104 	movi	r2,4
 801aa1c:	00003806 	br	801ab00 <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 801aa20:	e0bffa17 	ldw	r2,-24(fp)
 801aa24:	10800003 	ldbu	r2,0(r2)
 801aa28:	10803fcc 	andi	r2,r2,255
 801aa2c:	108000e0 	cmpeqi	r2,r2,3
 801aa30:	1000021e 	bne	r2,zero,801aa3c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 801aa34:	00800044 	movi	r2,1
 801aa38:	00003106 	br	801ab00 <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
 801aa3c:	0005303a 	rdctl	r2,status
 801aa40:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aa44:	e0fffe17 	ldw	r3,-8(fp)
 801aa48:	00bfff84 	movi	r2,-2
 801aa4c:	1884703a 	and	r2,r3,r2
 801aa50:	1001703a 	wrctl	status,r2
  return context;
 801aa54:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 801aa58:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 801aa5c:	e0bffa17 	ldw	r2,-24(fp)
 801aa60:	10800283 	ldbu	r2,10(r2)
 801aa64:	10803fcc 	andi	r2,r2,255
 801aa68:	10000d26 	beq	r2,zero,801aaa0 <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 801aa6c:	000f883a 	mov	r7,zero
 801aa70:	01800044 	movi	r6,1
 801aa74:	000b883a 	mov	r5,zero
 801aa78:	e13ffa17 	ldw	r4,-24(fp)
 801aa7c:	8015f600 	call	8015f60 <OS_EventTaskRdy>
 801aa80:	e0bfff17 	ldw	r2,-4(fp)
 801aa84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801aa88:	e0bffd17 	ldw	r2,-12(fp)
 801aa8c:	1001703a 	wrctl	status,r2
}
 801aa90:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 801aa94:	80169940 	call	8016994 <OS_Sched>
        return (OS_ERR_NONE);
 801aa98:	0005883a 	mov	r2,zero
 801aa9c:	00001806 	br	801ab00 <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 801aaa0:	e0bffa17 	ldw	r2,-24(fp)
 801aaa4:	1080020b 	ldhu	r2,8(r2)
 801aaa8:	10ffffcc 	andi	r3,r2,65535
 801aaac:	00bfffd4 	movui	r2,65535
 801aab0:	18800d26 	beq	r3,r2,801aae8 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 801aab4:	e0bffa17 	ldw	r2,-24(fp)
 801aab8:	1080020b 	ldhu	r2,8(r2)
 801aabc:	10800044 	addi	r2,r2,1
 801aac0:	1007883a 	mov	r3,r2
 801aac4:	e0bffa17 	ldw	r2,-24(fp)
 801aac8:	10c0020d 	sth	r3,8(r2)
 801aacc:	e0bfff17 	ldw	r2,-4(fp)
 801aad0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801aad4:	e0bffc17 	ldw	r2,-16(fp)
 801aad8:	1001703a 	wrctl	status,r2
}
 801aadc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 801aae0:	0005883a 	mov	r2,zero
 801aae4:	00000606 	br	801ab00 <OSSemPost+0x108>
 801aae8:	e0bfff17 	ldw	r2,-4(fp)
 801aaec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801aaf0:	e0bffb17 	ldw	r2,-20(fp)
 801aaf4:	1001703a 	wrctl	status,r2
}
 801aaf8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 801aafc:	00800c84 	movi	r2,50
}
 801ab00:	e037883a 	mov	sp,fp
 801ab04:	dfc00117 	ldw	ra,4(sp)
 801ab08:	df000017 	ldw	fp,0(sp)
 801ab0c:	dec00204 	addi	sp,sp,8
 801ab10:	f800283a 	ret

0801ab14 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 801ab14:	defff704 	addi	sp,sp,-36
 801ab18:	df000815 	stw	fp,32(sp)
 801ab1c:	df000804 	addi	fp,sp,32
 801ab20:	e13ff915 	stw	r4,-28(fp)
 801ab24:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801ab28:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 801ab2c:	e0bff917 	ldw	r2,-28(fp)
 801ab30:	1000021e 	bne	r2,zero,801ab3c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 801ab34:	00800104 	movi	r2,4
 801ab38:	00003706 	br	801ac18 <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 801ab3c:	e0bff817 	ldw	r2,-32(fp)
 801ab40:	1000021e 	bne	r2,zero,801ab4c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 801ab44:	00800244 	movi	r2,9
 801ab48:	00003306 	br	801ac18 <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 801ab4c:	e0bff917 	ldw	r2,-28(fp)
 801ab50:	10800003 	ldbu	r2,0(r2)
 801ab54:	10803fcc 	andi	r2,r2,255
 801ab58:	108000e0 	cmpeqi	r2,r2,3
 801ab5c:	1000021e 	bne	r2,zero,801ab68 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 801ab60:	00800044 	movi	r2,1
 801ab64:	00002c06 	br	801ac18 <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
 801ab68:	0005303a 	rdctl	r2,status
 801ab6c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ab70:	e0fffb17 	ldw	r3,-20(fp)
 801ab74:	00bfff84 	movi	r2,-2
 801ab78:	1884703a 	and	r2,r3,r2
 801ab7c:	1001703a 	wrctl	status,r2
  return context;
 801ab80:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 801ab84:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 801ab88:	e0bff917 	ldw	r2,-28(fp)
 801ab8c:	10c00283 	ldbu	r3,10(r2)
 801ab90:	e0bff817 	ldw	r2,-32(fp)
 801ab94:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 801ab98:	e0bff917 	ldw	r2,-28(fp)
 801ab9c:	108002c4 	addi	r2,r2,11
 801aba0:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 801aba4:	e0bff817 	ldw	r2,-32(fp)
 801aba8:	10800084 	addi	r2,r2,2
 801abac:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 801abb0:	e03ffdc5 	stb	zero,-9(fp)
 801abb4:	00000b06 	br	801abe4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 801abb8:	e0ffff17 	ldw	r3,-4(fp)
 801abbc:	18800044 	addi	r2,r3,1
 801abc0:	e0bfff15 	stw	r2,-4(fp)
 801abc4:	e0bffe17 	ldw	r2,-8(fp)
 801abc8:	11000044 	addi	r4,r2,1
 801abcc:	e13ffe15 	stw	r4,-8(fp)
 801abd0:	18c00003 	ldbu	r3,0(r3)
 801abd4:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 801abd8:	e0bffdc3 	ldbu	r2,-9(fp)
 801abdc:	10800044 	addi	r2,r2,1
 801abe0:	e0bffdc5 	stb	r2,-9(fp)
 801abe4:	e0bffdc3 	ldbu	r2,-9(fp)
 801abe8:	108000f0 	cmpltui	r2,r2,3
 801abec:	103ff21e 	bne	r2,zero,801abb8 <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 801abf0:	e0bff917 	ldw	r2,-28(fp)
 801abf4:	10c0020b 	ldhu	r3,8(r2)
 801abf8:	e0bff817 	ldw	r2,-32(fp)
 801abfc:	10c0000d 	sth	r3,0(r2)
 801ac00:	e0bffc17 	ldw	r2,-16(fp)
 801ac04:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801ac08:	e0bffa17 	ldw	r2,-24(fp)
 801ac0c:	1001703a 	wrctl	status,r2
}
 801ac10:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801ac14:	0005883a 	mov	r2,zero
}
 801ac18:	e037883a 	mov	sp,fp
 801ac1c:	df000017 	ldw	fp,0(sp)
 801ac20:	dec00104 	addi	sp,sp,4
 801ac24:	f800283a 	ret

0801ac28 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 801ac28:	defff904 	addi	sp,sp,-28
 801ac2c:	df000615 	stw	fp,24(sp)
 801ac30:	df000604 	addi	fp,sp,24
 801ac34:	e13ffc15 	stw	r4,-16(fp)
 801ac38:	2805883a 	mov	r2,r5
 801ac3c:	e1bffa15 	stw	r6,-24(fp)
 801ac40:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801ac44:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 801ac48:	e0bffa17 	ldw	r2,-24(fp)
 801ac4c:	10003126 	beq	r2,zero,801ad14 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801ac50:	e0bffc17 	ldw	r2,-16(fp)
 801ac54:	1000041e 	bne	r2,zero,801ac68 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 801ac58:	e0bffa17 	ldw	r2,-24(fp)
 801ac5c:	00c00104 	movi	r3,4
 801ac60:	10c00005 	stb	r3,0(r2)
        return;
 801ac64:	00002c06 	br	801ad18 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 801ac68:	e0bffc17 	ldw	r2,-16(fp)
 801ac6c:	10800003 	ldbu	r2,0(r2)
 801ac70:	10803fcc 	andi	r2,r2,255
 801ac74:	108000e0 	cmpeqi	r2,r2,3
 801ac78:	1000041e 	bne	r2,zero,801ac8c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 801ac7c:	e0bffa17 	ldw	r2,-24(fp)
 801ac80:	00c00044 	movi	r3,1
 801ac84:	10c00005 	stb	r3,0(r2)
        return;
 801ac88:	00002306 	br	801ad18 <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
 801ac8c:	0005303a 	rdctl	r2,status
 801ac90:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ac94:	e0fffe17 	ldw	r3,-8(fp)
 801ac98:	00bfff84 	movi	r2,-2
 801ac9c:	1884703a 	and	r2,r3,r2
 801aca0:	1001703a 	wrctl	status,r2
  return context;
 801aca4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 801aca8:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
 801acac:	e0bffa17 	ldw	r2,-24(fp)
 801acb0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 801acb4:	e0bffc17 	ldw	r2,-16(fp)
 801acb8:	1080020b 	ldhu	r2,8(r2)
 801acbc:	10bfffcc 	andi	r2,r2,65535
 801acc0:	10000426 	beq	r2,zero,801acd4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 801acc4:	e0bffc17 	ldw	r2,-16(fp)
 801acc8:	e0fffb0b 	ldhu	r3,-20(fp)
 801accc:	10c0020d 	sth	r3,8(r2)
 801acd0:	00000b06 	br	801ad00 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 801acd4:	e0bffc17 	ldw	r2,-16(fp)
 801acd8:	10800283 	ldbu	r2,10(r2)
 801acdc:	10803fcc 	andi	r2,r2,255
 801ace0:	1000041e 	bne	r2,zero,801acf4 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 801ace4:	e0bffc17 	ldw	r2,-16(fp)
 801ace8:	e0fffb0b 	ldhu	r3,-20(fp)
 801acec:	10c0020d 	sth	r3,8(r2)
 801acf0:	00000306 	br	801ad00 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 801acf4:	e0bffa17 	ldw	r2,-24(fp)
 801acf8:	00c01244 	movi	r3,73
 801acfc:	10c00005 	stb	r3,0(r2)
 801ad00:	e0bfff17 	ldw	r2,-4(fp)
 801ad04:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801ad08:	e0bffd17 	ldw	r2,-12(fp)
 801ad0c:	1001703a 	wrctl	status,r2
}
 801ad10:	00000106 	br	801ad18 <OSSemSet+0xf0>
        return;
 801ad14:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
 801ad18:	e037883a 	mov	sp,fp
 801ad1c:	df000017 	ldw	fp,0(sp)
 801ad20:	dec00104 	addi	sp,sp,4
 801ad24:	f800283a 	ret

0801ad28 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 801ad28:	defff104 	addi	sp,sp,-60
 801ad2c:	dfc00e15 	stw	ra,56(sp)
 801ad30:	df000d15 	stw	fp,52(sp)
 801ad34:	df000d04 	addi	fp,sp,52
 801ad38:	2005883a 	mov	r2,r4
 801ad3c:	2807883a 	mov	r3,r5
 801ad40:	e0bff405 	stb	r2,-48(fp)
 801ad44:	1805883a 	mov	r2,r3
 801ad48:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 801ad4c:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 801ad50:	e0bff403 	ldbu	r2,-48(fp)
 801ad54:	10800530 	cmpltui	r2,r2,20
 801ad58:	1000051e 	bne	r2,zero,801ad70 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
 801ad5c:	e0bff403 	ldbu	r2,-48(fp)
 801ad60:	10803fe0 	cmpeqi	r2,r2,255
 801ad64:	1000021e 	bne	r2,zero,801ad70 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
 801ad68:	00800a84 	movi	r2,42
 801ad6c:	00011a06 	br	801b1d8 <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 801ad70:	e0bff303 	ldbu	r2,-52(fp)
 801ad74:	10800530 	cmpltui	r2,r2,20
 801ad78:	1000021e 	bne	r2,zero,801ad84 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
 801ad7c:	00800a84 	movi	r2,42
 801ad80:	00011506 	br	801b1d8 <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
 801ad84:	0005303a 	rdctl	r2,status
 801ad88:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ad8c:	e0fff917 	ldw	r3,-28(fp)
 801ad90:	00bfff84 	movi	r2,-2
 801ad94:	1884703a 	and	r2,r3,r2
 801ad98:	1001703a 	wrctl	status,r2
  return context;
 801ad9c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801ada0:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 801ada4:	e0bff303 	ldbu	r2,-52(fp)
 801ada8:	100690ba 	slli	r3,r2,2
 801adac:	008201b4 	movhi	r2,2054
 801adb0:	1885883a 	add	r2,r3,r2
 801adb4:	10bc0017 	ldw	r2,-4096(r2)
 801adb8:	10000726 	beq	r2,zero,801add8 <OSTaskChangePrio+0xb0>
 801adbc:	e0bffd17 	ldw	r2,-12(fp)
 801adc0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801adc4:	e0bff817 	ldw	r2,-32(fp)
 801adc8:	1001703a 	wrctl	status,r2
}
 801adcc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 801add0:	00800a04 	movi	r2,40
 801add4:	00010006 	br	801b1d8 <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 801add8:	e0bff403 	ldbu	r2,-48(fp)
 801addc:	10803fd8 	cmpnei	r2,r2,255
 801ade0:	1000031e 	bne	r2,zero,801adf0 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 801ade4:	d0a07517 	ldw	r2,-32300(gp)
 801ade8:	10800c83 	ldbu	r2,50(r2)
 801adec:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 801adf0:	e0bff403 	ldbu	r2,-48(fp)
 801adf4:	100690ba 	slli	r3,r2,2
 801adf8:	008201b4 	movhi	r2,2054
 801adfc:	1885883a 	add	r2,r3,r2
 801ae00:	10bc0017 	ldw	r2,-4096(r2)
 801ae04:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 801ae08:	e0bffc17 	ldw	r2,-16(fp)
 801ae0c:	1000071e 	bne	r2,zero,801ae2c <OSTaskChangePrio+0x104>
 801ae10:	e0bffd17 	ldw	r2,-12(fp)
 801ae14:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801ae18:	e0bff717 	ldw	r2,-36(fp)
 801ae1c:	1001703a 	wrctl	status,r2
}
 801ae20:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 801ae24:	00800a44 	movi	r2,41
 801ae28:	0000eb06 	br	801b1d8 <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 801ae2c:	e0bffc17 	ldw	r2,-16(fp)
 801ae30:	10800058 	cmpnei	r2,r2,1
 801ae34:	1000071e 	bne	r2,zero,801ae54 <OSTaskChangePrio+0x12c>
 801ae38:	e0bffd17 	ldw	r2,-12(fp)
 801ae3c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 801ae40:	e0bff617 	ldw	r2,-40(fp)
 801ae44:	1001703a 	wrctl	status,r2
}
 801ae48:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 801ae4c:	008010c4 	movi	r2,67
 801ae50:	0000e106 	br	801b1d8 <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 801ae54:	e0bff303 	ldbu	r2,-52(fp)
 801ae58:	1004d0fa 	srli	r2,r2,3
 801ae5c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 801ae60:	e0bff303 	ldbu	r2,-52(fp)
 801ae64:	108001cc 	andi	r2,r2,7
 801ae68:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
 801ae6c:	e0bffbc3 	ldbu	r2,-17(fp)
 801ae70:	00c00044 	movi	r3,1
 801ae74:	1884983a 	sll	r2,r3,r2
 801ae78:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
 801ae7c:	e0bffb83 	ldbu	r2,-18(fp)
 801ae80:	00c00044 	movi	r3,1
 801ae84:	1884983a 	sll	r2,r3,r2
 801ae88:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 801ae8c:	e0bff403 	ldbu	r2,-48(fp)
 801ae90:	100690ba 	slli	r3,r2,2
 801ae94:	008201b4 	movhi	r2,2054
 801ae98:	1885883a 	add	r2,r3,r2
 801ae9c:	103c0015 	stw	zero,-4096(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 801aea0:	e0bff303 	ldbu	r2,-52(fp)
 801aea4:	100890ba 	slli	r4,r2,2
 801aea8:	e0fffc17 	ldw	r3,-16(fp)
 801aeac:	008201b4 	movhi	r2,2054
 801aeb0:	2085883a 	add	r2,r4,r2
 801aeb4:	10fc0015 	stw	r3,-4096(r2)
    y_old                 =  ptcb->OSTCBY;
 801aeb8:	e0bffc17 	ldw	r2,-16(fp)
 801aebc:	10800d03 	ldbu	r2,52(r2)
 801aec0:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
 801aec4:	e0bffc17 	ldw	r2,-16(fp)
 801aec8:	10800d83 	ldbu	r2,54(r2)
 801aecc:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 801aed0:	e0bffc17 	ldw	r2,-16(fp)
 801aed4:	10800d43 	ldbu	r2,53(r2)
 801aed8:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 801aedc:	e0fffac3 	ldbu	r3,-21(fp)
 801aee0:	d0a07244 	addi	r2,gp,-32311
 801aee4:	1885883a 	add	r2,r3,r2
 801aee8:	10800003 	ldbu	r2,0(r2)
 801aeec:	e0fffa43 	ldbu	r3,-23(fp)
 801aef0:	1884703a 	and	r2,r3,r2
 801aef4:	10803fcc 	andi	r2,r2,255
 801aef8:	10002826 	beq	r2,zero,801af9c <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
 801aefc:	e0fffac3 	ldbu	r3,-21(fp)
 801af00:	d0a07244 	addi	r2,gp,-32311
 801af04:	1885883a 	add	r2,r3,r2
 801af08:	10800003 	ldbu	r2,0(r2)
 801af0c:	1007883a 	mov	r3,r2
 801af10:	e0bffa43 	ldbu	r2,-23(fp)
 801af14:	0084303a 	nor	r2,zero,r2
 801af18:	1884703a 	and	r2,r3,r2
 801af1c:	e0fffac3 	ldbu	r3,-21(fp)
 801af20:	1009883a 	mov	r4,r2
 801af24:	d0a07244 	addi	r2,gp,-32311
 801af28:	1885883a 	add	r2,r3,r2
 801af2c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 801af30:	e0fffac3 	ldbu	r3,-21(fp)
 801af34:	d0a07244 	addi	r2,gp,-32311
 801af38:	1885883a 	add	r2,r3,r2
 801af3c:	10800003 	ldbu	r2,0(r2)
 801af40:	10803fcc 	andi	r2,r2,255
 801af44:	1000061e 	bne	r2,zero,801af60 <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
 801af48:	e0bffa83 	ldbu	r2,-22(fp)
 801af4c:	0084303a 	nor	r2,zero,r2
 801af50:	1007883a 	mov	r3,r2
 801af54:	d0a07203 	ldbu	r2,-32312(gp)
 801af58:	1884703a 	and	r2,r3,r2
 801af5c:	d0a07205 	stb	r2,-32312(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 801af60:	d0a07203 	ldbu	r2,-32312(gp)
 801af64:	e0fffb43 	ldbu	r3,-19(fp)
 801af68:	1884b03a 	or	r2,r3,r2
 801af6c:	d0a07205 	stb	r2,-32312(gp)
         OSRdyTbl[y_new] |= bitx_new;
 801af70:	e0fffbc3 	ldbu	r3,-17(fp)
 801af74:	d0a07244 	addi	r2,gp,-32311
 801af78:	1885883a 	add	r2,r3,r2
 801af7c:	10800003 	ldbu	r2,0(r2)
 801af80:	e0fffbc3 	ldbu	r3,-17(fp)
 801af84:	e13ffb03 	ldbu	r4,-20(fp)
 801af88:	2084b03a 	or	r2,r4,r2
 801af8c:	1009883a 	mov	r4,r2
 801af90:	d0a07244 	addi	r2,gp,-32311
 801af94:	1885883a 	add	r2,r3,r2
 801af98:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 801af9c:	e0bffc17 	ldw	r2,-16(fp)
 801afa0:	10800717 	ldw	r2,28(r2)
 801afa4:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
 801afa8:	e0bfff17 	ldw	r2,-4(fp)
 801afac:	10002f26 	beq	r2,zero,801b06c <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 801afb0:	e0bffac3 	ldbu	r2,-21(fp)
 801afb4:	e0ffff17 	ldw	r3,-4(fp)
 801afb8:	1885883a 	add	r2,r3,r2
 801afbc:	108002c3 	ldbu	r2,11(r2)
 801afc0:	1007883a 	mov	r3,r2
 801afc4:	e0bffa43 	ldbu	r2,-23(fp)
 801afc8:	0084303a 	nor	r2,zero,r2
 801afcc:	1884703a 	and	r2,r3,r2
 801afd0:	1007883a 	mov	r3,r2
 801afd4:	e0bffac3 	ldbu	r2,-21(fp)
 801afd8:	1809883a 	mov	r4,r3
 801afdc:	e0ffff17 	ldw	r3,-4(fp)
 801afe0:	1885883a 	add	r2,r3,r2
 801afe4:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 801afe8:	e0bffac3 	ldbu	r2,-21(fp)
 801afec:	e0ffff17 	ldw	r3,-4(fp)
 801aff0:	1885883a 	add	r2,r3,r2
 801aff4:	108002c3 	ldbu	r2,11(r2)
 801aff8:	10803fcc 	andi	r2,r2,255
 801affc:	1000091e 	bne	r2,zero,801b024 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
 801b000:	e0bfff17 	ldw	r2,-4(fp)
 801b004:	10800283 	ldbu	r2,10(r2)
 801b008:	1007883a 	mov	r3,r2
 801b00c:	e0bffa83 	ldbu	r2,-22(fp)
 801b010:	0084303a 	nor	r2,zero,r2
 801b014:	1884703a 	and	r2,r3,r2
 801b018:	1007883a 	mov	r3,r2
 801b01c:	e0bfff17 	ldw	r2,-4(fp)
 801b020:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 801b024:	e0bfff17 	ldw	r2,-4(fp)
 801b028:	10800283 	ldbu	r2,10(r2)
 801b02c:	e0fffb43 	ldbu	r3,-19(fp)
 801b030:	1884b03a 	or	r2,r3,r2
 801b034:	1007883a 	mov	r3,r2
 801b038:	e0bfff17 	ldw	r2,-4(fp)
 801b03c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 801b040:	e0bffbc3 	ldbu	r2,-17(fp)
 801b044:	e0ffff17 	ldw	r3,-4(fp)
 801b048:	1885883a 	add	r2,r3,r2
 801b04c:	10c002c3 	ldbu	r3,11(r2)
 801b050:	e0bffbc3 	ldbu	r2,-17(fp)
 801b054:	e13ffb03 	ldbu	r4,-20(fp)
 801b058:	20c6b03a 	or	r3,r4,r3
 801b05c:	1809883a 	mov	r4,r3
 801b060:	e0ffff17 	ldw	r3,-4(fp)
 801b064:	1885883a 	add	r2,r3,r2
 801b068:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 801b06c:	e0bffc17 	ldw	r2,-16(fp)
 801b070:	10800817 	ldw	r2,32(r2)
 801b074:	10003e26 	beq	r2,zero,801b170 <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
 801b078:	e0bffc17 	ldw	r2,-16(fp)
 801b07c:	10800817 	ldw	r2,32(r2)
 801b080:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
 801b084:	e0bffe17 	ldw	r2,-8(fp)
 801b088:	10800017 	ldw	r2,0(r2)
 801b08c:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
 801b090:	00003506 	br	801b168 <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 801b094:	e0bffac3 	ldbu	r2,-21(fp)
 801b098:	e0ffff17 	ldw	r3,-4(fp)
 801b09c:	1885883a 	add	r2,r3,r2
 801b0a0:	108002c3 	ldbu	r2,11(r2)
 801b0a4:	1007883a 	mov	r3,r2
 801b0a8:	e0bffa43 	ldbu	r2,-23(fp)
 801b0ac:	0084303a 	nor	r2,zero,r2
 801b0b0:	1884703a 	and	r2,r3,r2
 801b0b4:	1007883a 	mov	r3,r2
 801b0b8:	e0bffac3 	ldbu	r2,-21(fp)
 801b0bc:	1809883a 	mov	r4,r3
 801b0c0:	e0ffff17 	ldw	r3,-4(fp)
 801b0c4:	1885883a 	add	r2,r3,r2
 801b0c8:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 801b0cc:	e0bffac3 	ldbu	r2,-21(fp)
 801b0d0:	e0ffff17 	ldw	r3,-4(fp)
 801b0d4:	1885883a 	add	r2,r3,r2
 801b0d8:	108002c3 	ldbu	r2,11(r2)
 801b0dc:	10803fcc 	andi	r2,r2,255
 801b0e0:	1000091e 	bne	r2,zero,801b108 <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
 801b0e4:	e0bfff17 	ldw	r2,-4(fp)
 801b0e8:	10800283 	ldbu	r2,10(r2)
 801b0ec:	1007883a 	mov	r3,r2
 801b0f0:	e0bffa83 	ldbu	r2,-22(fp)
 801b0f4:	0084303a 	nor	r2,zero,r2
 801b0f8:	1884703a 	and	r2,r3,r2
 801b0fc:	1007883a 	mov	r3,r2
 801b100:	e0bfff17 	ldw	r2,-4(fp)
 801b104:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 801b108:	e0bfff17 	ldw	r2,-4(fp)
 801b10c:	10800283 	ldbu	r2,10(r2)
 801b110:	e0fffb43 	ldbu	r3,-19(fp)
 801b114:	1884b03a 	or	r2,r3,r2
 801b118:	1007883a 	mov	r3,r2
 801b11c:	e0bfff17 	ldw	r2,-4(fp)
 801b120:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 801b124:	e0bffbc3 	ldbu	r2,-17(fp)
 801b128:	e0ffff17 	ldw	r3,-4(fp)
 801b12c:	1885883a 	add	r2,r3,r2
 801b130:	10c002c3 	ldbu	r3,11(r2)
 801b134:	e0bffbc3 	ldbu	r2,-17(fp)
 801b138:	e13ffb03 	ldbu	r4,-20(fp)
 801b13c:	20c6b03a 	or	r3,r4,r3
 801b140:	1809883a 	mov	r4,r3
 801b144:	e0ffff17 	ldw	r3,-4(fp)
 801b148:	1885883a 	add	r2,r3,r2
 801b14c:	110002c5 	stb	r4,11(r2)
            pevents++;
 801b150:	e0bffe17 	ldw	r2,-8(fp)
 801b154:	10800104 	addi	r2,r2,4
 801b158:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
 801b15c:	e0bffe17 	ldw	r2,-8(fp)
 801b160:	10800017 	ldw	r2,0(r2)
 801b164:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
 801b168:	e0bfff17 	ldw	r2,-4(fp)
 801b16c:	103fc91e 	bne	r2,zero,801b094 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 801b170:	e0bffc17 	ldw	r2,-16(fp)
 801b174:	e0fff303 	ldbu	r3,-52(fp)
 801b178:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 801b17c:	e0bffc17 	ldw	r2,-16(fp)
 801b180:	e0fffbc3 	ldbu	r3,-17(fp)
 801b184:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 801b188:	e0bffc17 	ldw	r2,-16(fp)
 801b18c:	e0fffb83 	ldbu	r3,-18(fp)
 801b190:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 801b194:	e0bffc17 	ldw	r2,-16(fp)
 801b198:	e0fffb43 	ldbu	r3,-19(fp)
 801b19c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 801b1a0:	e0bffc17 	ldw	r2,-16(fp)
 801b1a4:	e0fffb03 	ldbu	r3,-20(fp)
 801b1a8:	10c00d45 	stb	r3,53(r2)
 801b1ac:	e0bffd17 	ldw	r2,-12(fp)
 801b1b0:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 801b1b4:	e0bff517 	ldw	r2,-44(fp)
 801b1b8:	1001703a 	wrctl	status,r2
}
 801b1bc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 801b1c0:	d0a06643 	ldbu	r2,-32359(gp)
 801b1c4:	10803fcc 	andi	r2,r2,255
 801b1c8:	10800058 	cmpnei	r2,r2,1
 801b1cc:	1000011e 	bne	r2,zero,801b1d4 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
 801b1d0:	80169940 	call	8016994 <OS_Sched>
    }
    return (OS_ERR_NONE);
 801b1d4:	0005883a 	mov	r2,zero
}
 801b1d8:	e037883a 	mov	sp,fp
 801b1dc:	dfc00117 	ldw	ra,4(sp)
 801b1e0:	df000017 	ldw	fp,0(sp)
 801b1e4:	dec00204 	addi	sp,sp,8
 801b1e8:	f800283a 	ret

0801b1ec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 801b1ec:	deffee04 	addi	sp,sp,-72
 801b1f0:	dfc01115 	stw	ra,68(sp)
 801b1f4:	df001015 	stw	fp,64(sp)
 801b1f8:	df001004 	addi	fp,sp,64
 801b1fc:	e13ff615 	stw	r4,-40(fp)
 801b200:	e17ff515 	stw	r5,-44(fp)
 801b204:	e1bff415 	stw	r6,-48(fp)
 801b208:	3805883a 	mov	r2,r7
 801b20c:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 801b210:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 801b214:	e0bff303 	ldbu	r2,-52(fp)
 801b218:	10800570 	cmpltui	r2,r2,21
 801b21c:	1000021e 	bne	r2,zero,801b228 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 801b220:	00800a84 	movi	r2,42
 801b224:	00005506 	br	801b37c <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
 801b228:	0005303a 	rdctl	r2,status
 801b22c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b230:	e0fffc17 	ldw	r3,-16(fp)
 801b234:	00bfff84 	movi	r2,-2
 801b238:	1884703a 	and	r2,r3,r2
 801b23c:	1001703a 	wrctl	status,r2
  return context;
 801b240:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801b244:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 801b248:	d0a07403 	ldbu	r2,-32304(gp)
 801b24c:	10803fcc 	andi	r2,r2,255
 801b250:	10000726 	beq	r2,zero,801b270 <OSTaskCreate+0x84>
 801b254:	e0bfff17 	ldw	r2,-4(fp)
 801b258:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801b25c:	e0bffb17 	ldw	r2,-20(fp)
 801b260:	1001703a 	wrctl	status,r2
}
 801b264:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 801b268:	00800f04 	movi	r2,60
 801b26c:	00004306 	br	801b37c <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 801b270:	e0bff303 	ldbu	r2,-52(fp)
 801b274:	100690ba 	slli	r3,r2,2
 801b278:	008201b4 	movhi	r2,2054
 801b27c:	1885883a 	add	r2,r3,r2
 801b280:	10bc0017 	ldw	r2,-4096(r2)
 801b284:	1000371e 	bne	r2,zero,801b364 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 801b288:	e0bff303 	ldbu	r2,-52(fp)
 801b28c:	100890ba 	slli	r4,r2,2
 801b290:	00c00044 	movi	r3,1
 801b294:	008201b4 	movhi	r2,2054
 801b298:	2085883a 	add	r2,r4,r2
 801b29c:	10fc0015 	stw	r3,-4096(r2)
 801b2a0:	e0bfff17 	ldw	r2,-4(fp)
 801b2a4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801b2a8:	e0bffa17 	ldw	r2,-24(fp)
 801b2ac:	1001703a 	wrctl	status,r2
}
 801b2b0:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 801b2b4:	000f883a 	mov	r7,zero
 801b2b8:	e1bff417 	ldw	r6,-48(fp)
 801b2bc:	e17ff517 	ldw	r5,-44(fp)
 801b2c0:	e13ff617 	ldw	r4,-40(fp)
 801b2c4:	803fc400 	call	803fc40 <OSTaskStkInit>
 801b2c8:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 801b2cc:	e0bff303 	ldbu	r2,-52(fp)
 801b2d0:	d8000215 	stw	zero,8(sp)
 801b2d4:	d8000115 	stw	zero,4(sp)
 801b2d8:	d8000015 	stw	zero,0(sp)
 801b2dc:	000f883a 	mov	r7,zero
 801b2e0:	000d883a 	mov	r6,zero
 801b2e4:	e17ffe17 	ldw	r5,-8(fp)
 801b2e8:	1009883a 	mov	r4,r2
 801b2ec:	8016d880 	call	8016d88 <OS_TCBInit>
 801b2f0:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
 801b2f4:	e0bffdc3 	ldbu	r2,-9(fp)
 801b2f8:	1000061e 	bne	r2,zero,801b314 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 801b2fc:	d0a06643 	ldbu	r2,-32359(gp)
 801b300:	10803fcc 	andi	r2,r2,255
 801b304:	10800058 	cmpnei	r2,r2,1
 801b308:	1000141e 	bne	r2,zero,801b35c <OSTaskCreate+0x170>
                OS_Sched();
 801b30c:	80169940 	call	8016994 <OS_Sched>
 801b310:	00001206 	br	801b35c <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
 801b314:	0005303a 	rdctl	r2,status
 801b318:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b31c:	e0fff817 	ldw	r3,-32(fp)
 801b320:	00bfff84 	movi	r2,-2
 801b324:	1884703a 	and	r2,r3,r2
 801b328:	1001703a 	wrctl	status,r2
  return context;
 801b32c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 801b330:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 801b334:	e0bff303 	ldbu	r2,-52(fp)
 801b338:	100690ba 	slli	r3,r2,2
 801b33c:	008201b4 	movhi	r2,2054
 801b340:	1885883a 	add	r2,r3,r2
 801b344:	103c0015 	stw	zero,-4096(r2)
 801b348:	e0bfff17 	ldw	r2,-4(fp)
 801b34c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801b350:	e0bff917 	ldw	r2,-28(fp)
 801b354:	1001703a 	wrctl	status,r2
}
 801b358:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
 801b35c:	e0bffdc3 	ldbu	r2,-9(fp)
 801b360:	00000606 	br	801b37c <OSTaskCreate+0x190>
 801b364:	e0bfff17 	ldw	r2,-4(fp)
 801b368:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801b36c:	e0bff717 	ldw	r2,-36(fp)
 801b370:	1001703a 	wrctl	status,r2
}
 801b374:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 801b378:	00800a04 	movi	r2,40
}
 801b37c:	e037883a 	mov	sp,fp
 801b380:	dfc00117 	ldw	ra,4(sp)
 801b384:	df000017 	ldw	fp,0(sp)
 801b388:	dec00204 	addi	sp,sp,8
 801b38c:	f800283a 	ret

0801b390 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 801b390:	deffec04 	addi	sp,sp,-80
 801b394:	dfc01315 	stw	ra,76(sp)
 801b398:	df001215 	stw	fp,72(sp)
 801b39c:	df001204 	addi	fp,sp,72
 801b3a0:	e13ff615 	stw	r4,-40(fp)
 801b3a4:	e17ff515 	stw	r5,-44(fp)
 801b3a8:	e1bff415 	stw	r6,-48(fp)
 801b3ac:	3809883a 	mov	r4,r7
 801b3b0:	e0c00217 	ldw	r3,8(fp)
 801b3b4:	e0800617 	ldw	r2,24(fp)
 801b3b8:	e13ff305 	stb	r4,-52(fp)
 801b3bc:	e0fff20d 	sth	r3,-56(fp)
 801b3c0:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 801b3c4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 801b3c8:	e0bff303 	ldbu	r2,-52(fp)
 801b3cc:	10800570 	cmpltui	r2,r2,21
 801b3d0:	1000021e 	bne	r2,zero,801b3dc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 801b3d4:	00800a84 	movi	r2,42
 801b3d8:	00005f06 	br	801b558 <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
 801b3dc:	0005303a 	rdctl	r2,status
 801b3e0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b3e4:	e0fffc17 	ldw	r3,-16(fp)
 801b3e8:	00bfff84 	movi	r2,-2
 801b3ec:	1884703a 	and	r2,r3,r2
 801b3f0:	1001703a 	wrctl	status,r2
  return context;
 801b3f4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801b3f8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 801b3fc:	d0a07403 	ldbu	r2,-32304(gp)
 801b400:	10803fcc 	andi	r2,r2,255
 801b404:	10000726 	beq	r2,zero,801b424 <OSTaskCreateExt+0x94>
 801b408:	e0bfff17 	ldw	r2,-4(fp)
 801b40c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801b410:	e0bffb17 	ldw	r2,-20(fp)
 801b414:	1001703a 	wrctl	status,r2
}
 801b418:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 801b41c:	00800f04 	movi	r2,60
 801b420:	00004d06 	br	801b558 <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 801b424:	e0bff303 	ldbu	r2,-52(fp)
 801b428:	100690ba 	slli	r3,r2,2
 801b42c:	008201b4 	movhi	r2,2054
 801b430:	1885883a 	add	r2,r3,r2
 801b434:	10bc0017 	ldw	r2,-4096(r2)
 801b438:	1000411e 	bne	r2,zero,801b540 <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 801b43c:	e0bff303 	ldbu	r2,-52(fp)
 801b440:	100890ba 	slli	r4,r2,2
 801b444:	00c00044 	movi	r3,1
 801b448:	008201b4 	movhi	r2,2054
 801b44c:	2085883a 	add	r2,r4,r2
 801b450:	10fc0015 	stw	r3,-4096(r2)
 801b454:	e0bfff17 	ldw	r2,-4(fp)
 801b458:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801b45c:	e0bffa17 	ldw	r2,-24(fp)
 801b460:	1001703a 	wrctl	status,r2
}
 801b464:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 801b468:	e0bff10b 	ldhu	r2,-60(fp)
 801b46c:	100d883a 	mov	r6,r2
 801b470:	e1400417 	ldw	r5,16(fp)
 801b474:	e1000317 	ldw	r4,12(fp)
 801b478:	801c4080 	call	801c408 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 801b47c:	e0bff10b 	ldhu	r2,-60(fp)
 801b480:	100f883a 	mov	r7,r2
 801b484:	e1bff417 	ldw	r6,-48(fp)
 801b488:	e17ff517 	ldw	r5,-44(fp)
 801b48c:	e13ff617 	ldw	r4,-40(fp)
 801b490:	803fc400 	call	803fc40 <OSTaskStkInit>
 801b494:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 801b498:	e0fff303 	ldbu	r3,-52(fp)
 801b49c:	e13ff20b 	ldhu	r4,-56(fp)
 801b4a0:	e0bff10b 	ldhu	r2,-60(fp)
 801b4a4:	d8800215 	stw	r2,8(sp)
 801b4a8:	e0800517 	ldw	r2,20(fp)
 801b4ac:	d8800115 	stw	r2,4(sp)
 801b4b0:	e0800417 	ldw	r2,16(fp)
 801b4b4:	d8800015 	stw	r2,0(sp)
 801b4b8:	200f883a 	mov	r7,r4
 801b4bc:	e1800317 	ldw	r6,12(fp)
 801b4c0:	e17ffe17 	ldw	r5,-8(fp)
 801b4c4:	1809883a 	mov	r4,r3
 801b4c8:	8016d880 	call	8016d88 <OS_TCBInit>
 801b4cc:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
 801b4d0:	e0bffdc3 	ldbu	r2,-9(fp)
 801b4d4:	1000061e 	bne	r2,zero,801b4f0 <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 801b4d8:	d0a06643 	ldbu	r2,-32359(gp)
 801b4dc:	10803fcc 	andi	r2,r2,255
 801b4e0:	10800058 	cmpnei	r2,r2,1
 801b4e4:	1000141e 	bne	r2,zero,801b538 <OSTaskCreateExt+0x1a8>
                OS_Sched();
 801b4e8:	80169940 	call	8016994 <OS_Sched>
 801b4ec:	00001206 	br	801b538 <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
 801b4f0:	0005303a 	rdctl	r2,status
 801b4f4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b4f8:	e0fff817 	ldw	r3,-32(fp)
 801b4fc:	00bfff84 	movi	r2,-2
 801b500:	1884703a 	and	r2,r3,r2
 801b504:	1001703a 	wrctl	status,r2
  return context;
 801b508:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 801b50c:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 801b510:	e0bff303 	ldbu	r2,-52(fp)
 801b514:	100690ba 	slli	r3,r2,2
 801b518:	008201b4 	movhi	r2,2054
 801b51c:	1885883a 	add	r2,r3,r2
 801b520:	103c0015 	stw	zero,-4096(r2)
 801b524:	e0bfff17 	ldw	r2,-4(fp)
 801b528:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801b52c:	e0bff917 	ldw	r2,-28(fp)
 801b530:	1001703a 	wrctl	status,r2
}
 801b534:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
 801b538:	e0bffdc3 	ldbu	r2,-9(fp)
 801b53c:	00000606 	br	801b558 <OSTaskCreateExt+0x1c8>
 801b540:	e0bfff17 	ldw	r2,-4(fp)
 801b544:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801b548:	e0bff717 	ldw	r2,-36(fp)
 801b54c:	1001703a 	wrctl	status,r2
}
 801b550:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 801b554:	00800a04 	movi	r2,40
}
 801b558:	e037883a 	mov	sp,fp
 801b55c:	dfc00117 	ldw	ra,4(sp)
 801b560:	df000017 	ldw	fp,0(sp)
 801b564:	dec00204 	addi	sp,sp,8
 801b568:	f800283a 	ret

0801b56c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 801b56c:	defff404 	addi	sp,sp,-48
 801b570:	dfc00b15 	stw	ra,44(sp)
 801b574:	df000a15 	stw	fp,40(sp)
 801b578:	df000a04 	addi	fp,sp,40
 801b57c:	2005883a 	mov	r2,r4
 801b580:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 801b584:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 801b588:	d0a07403 	ldbu	r2,-32304(gp)
 801b58c:	10803fcc 	andi	r2,r2,255
 801b590:	10000226 	beq	r2,zero,801b59c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 801b594:	00801004 	movi	r2,64
 801b598:	0000c006 	br	801b89c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 801b59c:	e0bff603 	ldbu	r2,-40(fp)
 801b5a0:	10800518 	cmpnei	r2,r2,20
 801b5a4:	1000021e 	bne	r2,zero,801b5b0 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 801b5a8:	00800f84 	movi	r2,62
 801b5ac:	0000bb06 	br	801b89c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 801b5b0:	e0bff603 	ldbu	r2,-40(fp)
 801b5b4:	10800530 	cmpltui	r2,r2,20
 801b5b8:	1000051e 	bne	r2,zero,801b5d0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 801b5bc:	e0bff603 	ldbu	r2,-40(fp)
 801b5c0:	10803fe0 	cmpeqi	r2,r2,255
 801b5c4:	1000021e 	bne	r2,zero,801b5d0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 801b5c8:	00800a84 	movi	r2,42
 801b5cc:	0000b306 	br	801b89c <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
 801b5d0:	0005303a 	rdctl	r2,status
 801b5d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b5d8:	e0fffc17 	ldw	r3,-16(fp)
 801b5dc:	00bfff84 	movi	r2,-2
 801b5e0:	1884703a 	and	r2,r3,r2
 801b5e4:	1001703a 	wrctl	status,r2
  return context;
 801b5e8:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 801b5ec:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 801b5f0:	e0bff603 	ldbu	r2,-40(fp)
 801b5f4:	10803fd8 	cmpnei	r2,r2,255
 801b5f8:	1000031e 	bne	r2,zero,801b608 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 801b5fc:	d0a07517 	ldw	r2,-32300(gp)
 801b600:	10800c83 	ldbu	r2,50(r2)
 801b604:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801b608:	e0bff603 	ldbu	r2,-40(fp)
 801b60c:	100690ba 	slli	r3,r2,2
 801b610:	008201b4 	movhi	r2,2054
 801b614:	1885883a 	add	r2,r3,r2
 801b618:	10bc0017 	ldw	r2,-4096(r2)
 801b61c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 801b620:	e0bffe17 	ldw	r2,-8(fp)
 801b624:	1000071e 	bne	r2,zero,801b644 <OSTaskDel+0xd8>
 801b628:	e0bfff17 	ldw	r2,-4(fp)
 801b62c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801b630:	e0bffb17 	ldw	r2,-20(fp)
 801b634:	1001703a 	wrctl	status,r2
}
 801b638:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801b63c:	008010c4 	movi	r2,67
 801b640:	00009606 	br	801b89c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 801b644:	e0bffe17 	ldw	r2,-8(fp)
 801b648:	10800058 	cmpnei	r2,r2,1
 801b64c:	1000071e 	bne	r2,zero,801b66c <OSTaskDel+0x100>
 801b650:	e0bfff17 	ldw	r2,-4(fp)
 801b654:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801b658:	e0bffa17 	ldw	r2,-24(fp)
 801b65c:	1001703a 	wrctl	status,r2
}
 801b660:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 801b664:	00800f44 	movi	r2,61
 801b668:	00008c06 	br	801b89c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 801b66c:	e0bffe17 	ldw	r2,-8(fp)
 801b670:	10800d03 	ldbu	r2,52(r2)
 801b674:	10c03fcc 	andi	r3,r2,255
 801b678:	d0a07244 	addi	r2,gp,-32311
 801b67c:	1885883a 	add	r2,r3,r2
 801b680:	10800003 	ldbu	r2,0(r2)
 801b684:	1007883a 	mov	r3,r2
 801b688:	e0bffe17 	ldw	r2,-8(fp)
 801b68c:	10800d43 	ldbu	r2,53(r2)
 801b690:	0084303a 	nor	r2,zero,r2
 801b694:	1884703a 	and	r2,r3,r2
 801b698:	1009883a 	mov	r4,r2
 801b69c:	e0bffe17 	ldw	r2,-8(fp)
 801b6a0:	10800d03 	ldbu	r2,52(r2)
 801b6a4:	10c03fcc 	andi	r3,r2,255
 801b6a8:	d0a07244 	addi	r2,gp,-32311
 801b6ac:	1885883a 	add	r2,r3,r2
 801b6b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 801b6b4:	e0bffe17 	ldw	r2,-8(fp)
 801b6b8:	10800d03 	ldbu	r2,52(r2)
 801b6bc:	10c03fcc 	andi	r3,r2,255
 801b6c0:	d0a07244 	addi	r2,gp,-32311
 801b6c4:	1885883a 	add	r2,r3,r2
 801b6c8:	10800003 	ldbu	r2,0(r2)
 801b6cc:	10803fcc 	andi	r2,r2,255
 801b6d0:	1000071e 	bne	r2,zero,801b6f0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 801b6d4:	e0bffe17 	ldw	r2,-8(fp)
 801b6d8:	10800d83 	ldbu	r2,54(r2)
 801b6dc:	0084303a 	nor	r2,zero,r2
 801b6e0:	1007883a 	mov	r3,r2
 801b6e4:	d0a07203 	ldbu	r2,-32312(gp)
 801b6e8:	1884703a 	and	r2,r3,r2
 801b6ec:	d0a07205 	stb	r2,-32312(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 801b6f0:	e0bffe17 	ldw	r2,-8(fp)
 801b6f4:	10800717 	ldw	r2,28(r2)
 801b6f8:	10000526 	beq	r2,zero,801b710 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 801b6fc:	e0bffe17 	ldw	r2,-8(fp)
 801b700:	10800717 	ldw	r2,28(r2)
 801b704:	100b883a 	mov	r5,r2
 801b708:	e13ffe17 	ldw	r4,-8(fp)
 801b70c:	80163380 	call	8016338 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 801b710:	e0bffe17 	ldw	r2,-8(fp)
 801b714:	10800817 	ldw	r2,32(r2)
 801b718:	10000526 	beq	r2,zero,801b730 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 801b71c:	e0bffe17 	ldw	r2,-8(fp)
 801b720:	10800817 	ldw	r2,32(r2)
 801b724:	100b883a 	mov	r5,r2
 801b728:	e13ffe17 	ldw	r4,-8(fp)
 801b72c:	80163e80 	call	80163e8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 801b730:	e0bffe17 	ldw	r2,-8(fp)
 801b734:	10800a17 	ldw	r2,40(r2)
 801b738:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 801b73c:	e0bffd17 	ldw	r2,-12(fp)
 801b740:	10000226 	beq	r2,zero,801b74c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 801b744:	e13ffd17 	ldw	r4,-12(fp)
 801b748:	80189180 	call	8018918 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 801b74c:	e0bffe17 	ldw	r2,-8(fp)
 801b750:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 801b754:	e0bffe17 	ldw	r2,-8(fp)
 801b758:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 801b75c:	e0bffe17 	ldw	r2,-8(fp)
 801b760:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 801b764:	d0a06603 	ldbu	r2,-32360(gp)
 801b768:	10803fcc 	andi	r2,r2,255
 801b76c:	10803fe0 	cmpeqi	r2,r2,255
 801b770:	1000031e 	bne	r2,zero,801b780 <OSTaskDel+0x214>
        OSLockNesting++;
 801b774:	d0a06603 	ldbu	r2,-32360(gp)
 801b778:	10800044 	addi	r2,r2,1
 801b77c:	d0a06605 	stb	r2,-32360(gp)
 801b780:	e0bfff17 	ldw	r2,-4(fp)
 801b784:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801b788:	e0bff817 	ldw	r2,-32(fp)
 801b78c:	1001703a 	wrctl	status,r2
}
 801b790:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 801b794:	8015f400 	call	8015f40 <OS_Dummy>
  NIOS2_READ_STATUS (context);
 801b798:	0005303a 	rdctl	r2,status
 801b79c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b7a0:	e0fff917 	ldw	r3,-28(fp)
 801b7a4:	00bfff84 	movi	r2,-2
 801b7a8:	1884703a 	and	r2,r3,r2
 801b7ac:	1001703a 	wrctl	status,r2
  return context;
 801b7b0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 801b7b4:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 801b7b8:	d0a06603 	ldbu	r2,-32360(gp)
 801b7bc:	10803fcc 	andi	r2,r2,255
 801b7c0:	10000326 	beq	r2,zero,801b7d0 <OSTaskDel+0x264>
        OSLockNesting--;
 801b7c4:	d0a06603 	ldbu	r2,-32360(gp)
 801b7c8:	10bfffc4 	addi	r2,r2,-1
 801b7cc:	d0a06605 	stb	r2,-32360(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 801b7d0:	e13ffe17 	ldw	r4,-8(fp)
 801b7d4:	803fdb00 	call	803fdb0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 801b7d8:	d0a06e43 	ldbu	r2,-32327(gp)
 801b7dc:	10bfffc4 	addi	r2,r2,-1
 801b7e0:	d0a06e45 	stb	r2,-32327(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 801b7e4:	e0bff603 	ldbu	r2,-40(fp)
 801b7e8:	100690ba 	slli	r3,r2,2
 801b7ec:	008201b4 	movhi	r2,2054
 801b7f0:	1885883a 	add	r2,r3,r2
 801b7f4:	103c0015 	stw	zero,-4096(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 801b7f8:	e0bffe17 	ldw	r2,-8(fp)
 801b7fc:	10800617 	ldw	r2,24(r2)
 801b800:	1000071e 	bne	r2,zero,801b820 <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 801b804:	e0bffe17 	ldw	r2,-8(fp)
 801b808:	10800517 	ldw	r2,20(r2)
 801b80c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 801b810:	e0bffe17 	ldw	r2,-8(fp)
 801b814:	10800517 	ldw	r2,20(r2)
 801b818:	d0a06915 	stw	r2,-32348(gp)
 801b81c:	00000a06 	br	801b848 <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 801b820:	e0bffe17 	ldw	r2,-8(fp)
 801b824:	10800617 	ldw	r2,24(r2)
 801b828:	e0fffe17 	ldw	r3,-8(fp)
 801b82c:	18c00517 	ldw	r3,20(r3)
 801b830:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 801b834:	e0bffe17 	ldw	r2,-8(fp)
 801b838:	10800517 	ldw	r2,20(r2)
 801b83c:	e0fffe17 	ldw	r3,-8(fp)
 801b840:	18c00617 	ldw	r3,24(r3)
 801b844:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 801b848:	d0e06d17 	ldw	r3,-32332(gp)
 801b84c:	e0bffe17 	ldw	r2,-8(fp)
 801b850:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 801b854:	e0bffe17 	ldw	r2,-8(fp)
 801b858:	d0a06d15 	stw	r2,-32332(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 801b85c:	e0bffe17 	ldw	r2,-8(fp)
 801b860:	00c00fc4 	movi	r3,63
 801b864:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 801b868:	e0bffe17 	ldw	r2,-8(fp)
 801b86c:	10001345 	stb	zero,77(r2)
 801b870:	e0bfff17 	ldw	r2,-4(fp)
 801b874:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801b878:	e0bff717 	ldw	r2,-36(fp)
 801b87c:	1001703a 	wrctl	status,r2
}
 801b880:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 801b884:	d0a06643 	ldbu	r2,-32359(gp)
 801b888:	10803fcc 	andi	r2,r2,255
 801b88c:	10800058 	cmpnei	r2,r2,1
 801b890:	1000011e 	bne	r2,zero,801b898 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 801b894:	80169940 	call	8016994 <OS_Sched>
    }
    return (OS_ERR_NONE);
 801b898:	0005883a 	mov	r2,zero
}
 801b89c:	e037883a 	mov	sp,fp
 801b8a0:	dfc00117 	ldw	ra,4(sp)
 801b8a4:	df000017 	ldw	fp,0(sp)
 801b8a8:	dec00204 	addi	sp,sp,8
 801b8ac:	f800283a 	ret

0801b8b0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 801b8b0:	defff504 	addi	sp,sp,-44
 801b8b4:	df000a15 	stw	fp,40(sp)
 801b8b8:	df000a04 	addi	fp,sp,40
 801b8bc:	2005883a 	mov	r2,r4
 801b8c0:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801b8c4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 801b8c8:	e0bff603 	ldbu	r2,-40(fp)
 801b8cc:	10800518 	cmpnei	r2,r2,20
 801b8d0:	1000021e 	bne	r2,zero,801b8dc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 801b8d4:	00800f84 	movi	r2,62
 801b8d8:	00004706 	br	801b9f8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 801b8dc:	e0bff603 	ldbu	r2,-40(fp)
 801b8e0:	10800530 	cmpltui	r2,r2,20
 801b8e4:	1000051e 	bne	r2,zero,801b8fc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 801b8e8:	e0bff603 	ldbu	r2,-40(fp)
 801b8ec:	10803fe0 	cmpeqi	r2,r2,255
 801b8f0:	1000021e 	bne	r2,zero,801b8fc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 801b8f4:	00800a84 	movi	r2,42
 801b8f8:	00003f06 	br	801b9f8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 801b8fc:	e0bff603 	ldbu	r2,-40(fp)
 801b900:	10803fd8 	cmpnei	r2,r2,255
 801b904:	1000121e 	bne	r2,zero,801b950 <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
 801b908:	0005303a 	rdctl	r2,status
 801b90c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b910:	e0fffb17 	ldw	r3,-20(fp)
 801b914:	00bfff84 	movi	r2,-2
 801b918:	1884703a 	and	r2,r3,r2
 801b91c:	1001703a 	wrctl	status,r2
  return context;
 801b920:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 801b924:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 801b928:	d0a07517 	ldw	r2,-32300(gp)
 801b92c:	10800dc3 	ldbu	r2,55(r2)
 801b930:	e0bffdc5 	stb	r2,-9(fp)
 801b934:	e0bfff17 	ldw	r2,-4(fp)
 801b938:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801b93c:	e0bffc17 	ldw	r2,-16(fp)
 801b940:	1001703a 	wrctl	status,r2
}
 801b944:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
 801b948:	e0bffdc3 	ldbu	r2,-9(fp)
 801b94c:	00002a06 	br	801b9f8 <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
 801b950:	0005303a 	rdctl	r2,status
 801b954:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b958:	e0fffa17 	ldw	r3,-24(fp)
 801b95c:	00bfff84 	movi	r2,-2
 801b960:	1884703a 	and	r2,r3,r2
 801b964:	1001703a 	wrctl	status,r2
  return context;
 801b968:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 801b96c:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
 801b970:	e0bff603 	ldbu	r2,-40(fp)
 801b974:	100690ba 	slli	r3,r2,2
 801b978:	008201b4 	movhi	r2,2054
 801b97c:	1885883a 	add	r2,r3,r2
 801b980:	10bc0017 	ldw	r2,-4096(r2)
 801b984:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 801b988:	e0bffe17 	ldw	r2,-8(fp)
 801b98c:	1000071e 	bne	r2,zero,801b9ac <OSTaskDelReq+0xfc>
 801b990:	e0bfff17 	ldw	r2,-4(fp)
 801b994:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801b998:	e0bff917 	ldw	r2,-28(fp)
 801b99c:	1001703a 	wrctl	status,r2
}
 801b9a0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 801b9a4:	008010c4 	movi	r2,67
 801b9a8:	00001306 	br	801b9f8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 801b9ac:	e0bffe17 	ldw	r2,-8(fp)
 801b9b0:	10800058 	cmpnei	r2,r2,1
 801b9b4:	1000071e 	bne	r2,zero,801b9d4 <OSTaskDelReq+0x124>
 801b9b8:	e0bfff17 	ldw	r2,-4(fp)
 801b9bc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801b9c0:	e0bff817 	ldw	r2,-32(fp)
 801b9c4:	1001703a 	wrctl	status,r2
}
 801b9c8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 801b9cc:	00800f44 	movi	r2,61
 801b9d0:	00000906 	br	801b9f8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 801b9d4:	e0bffe17 	ldw	r2,-8(fp)
 801b9d8:	00c00fc4 	movi	r3,63
 801b9dc:	10c00dc5 	stb	r3,55(r2)
 801b9e0:	e0bfff17 	ldw	r2,-4(fp)
 801b9e4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801b9e8:	e0bff717 	ldw	r2,-36(fp)
 801b9ec:	1001703a 	wrctl	status,r2
}
 801b9f0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801b9f4:	0005883a 	mov	r2,zero
}
 801b9f8:	e037883a 	mov	sp,fp
 801b9fc:	df000017 	ldw	fp,0(sp)
 801ba00:	dec00104 	addi	sp,sp,4
 801ba04:	f800283a 	ret

0801ba08 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 801ba08:	defff404 	addi	sp,sp,-48
 801ba0c:	dfc00b15 	stw	ra,44(sp)
 801ba10:	df000a15 	stw	fp,40(sp)
 801ba14:	df000a04 	addi	fp,sp,40
 801ba18:	2005883a 	mov	r2,r4
 801ba1c:	e17ff715 	stw	r5,-36(fp)
 801ba20:	e1bff615 	stw	r6,-40(fp)
 801ba24:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 801ba28:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 801ba2c:	e0bff617 	ldw	r2,-40(fp)
 801ba30:	1000021e 	bne	r2,zero,801ba3c <OSTaskNameGet+0x34>
        return (0);
 801ba34:	0005883a 	mov	r2,zero
 801ba38:	00005506 	br	801bb90 <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 801ba3c:	e0bff803 	ldbu	r2,-32(fp)
 801ba40:	10800570 	cmpltui	r2,r2,21
 801ba44:	1000081e 	bne	r2,zero,801ba68 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 801ba48:	e0bff803 	ldbu	r2,-32(fp)
 801ba4c:	10803fe0 	cmpeqi	r2,r2,255
 801ba50:	1000051e 	bne	r2,zero,801ba68 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 801ba54:	e0bff617 	ldw	r2,-40(fp)
 801ba58:	00c00a84 	movi	r3,42
 801ba5c:	10c00005 	stb	r3,0(r2)
            return (0);
 801ba60:	0005883a 	mov	r2,zero
 801ba64:	00004a06 	br	801bb90 <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 801ba68:	e0bff717 	ldw	r2,-36(fp)
 801ba6c:	1000051e 	bne	r2,zero,801ba84 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 801ba70:	e0bff617 	ldw	r2,-40(fp)
 801ba74:	00c00304 	movi	r3,12
 801ba78:	10c00005 	stb	r3,0(r2)
        return (0);
 801ba7c:	0005883a 	mov	r2,zero
 801ba80:	00004306 	br	801bb90 <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 801ba84:	d0a07403 	ldbu	r2,-32304(gp)
 801ba88:	10803fcc 	andi	r2,r2,255
 801ba8c:	10000526 	beq	r2,zero,801baa4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 801ba90:	e0bff617 	ldw	r2,-40(fp)
 801ba94:	00c00444 	movi	r3,17
 801ba98:	10c00005 	stb	r3,0(r2)
        return (0);
 801ba9c:	0005883a 	mov	r2,zero
 801baa0:	00003b06 	br	801bb90 <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
 801baa4:	0005303a 	rdctl	r2,status
 801baa8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801baac:	e0fffc17 	ldw	r3,-16(fp)
 801bab0:	00bfff84 	movi	r2,-2
 801bab4:	1884703a 	and	r2,r3,r2
 801bab8:	1001703a 	wrctl	status,r2
  return context;
 801babc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801bac0:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 801bac4:	e0bff803 	ldbu	r2,-32(fp)
 801bac8:	10803fd8 	cmpnei	r2,r2,255
 801bacc:	1000031e 	bne	r2,zero,801badc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 801bad0:	d0a07517 	ldw	r2,-32300(gp)
 801bad4:	10800c83 	ldbu	r2,50(r2)
 801bad8:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801badc:	e0bff803 	ldbu	r2,-32(fp)
 801bae0:	100690ba 	slli	r3,r2,2
 801bae4:	008201b4 	movhi	r2,2054
 801bae8:	1885883a 	add	r2,r3,r2
 801baec:	10bc0017 	ldw	r2,-4096(r2)
 801baf0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 801baf4:	e0bffe17 	ldw	r2,-8(fp)
 801baf8:	10000a1e 	bne	r2,zero,801bb24 <OSTaskNameGet+0x11c>
 801bafc:	e0bfff17 	ldw	r2,-4(fp)
 801bb00:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801bb04:	e0bffb17 	ldw	r2,-20(fp)
 801bb08:	1001703a 	wrctl	status,r2
}
 801bb0c:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801bb10:	e0bff617 	ldw	r2,-40(fp)
 801bb14:	00c010c4 	movi	r3,67
 801bb18:	10c00005 	stb	r3,0(r2)
        return (0);
 801bb1c:	0005883a 	mov	r2,zero
 801bb20:	00001b06 	br	801bb90 <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 801bb24:	e0bffe17 	ldw	r2,-8(fp)
 801bb28:	10800058 	cmpnei	r2,r2,1
 801bb2c:	10000a1e 	bne	r2,zero,801bb58 <OSTaskNameGet+0x150>
 801bb30:	e0bfff17 	ldw	r2,-4(fp)
 801bb34:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801bb38:	e0bffa17 	ldw	r2,-24(fp)
 801bb3c:	1001703a 	wrctl	status,r2
}
 801bb40:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801bb44:	e0bff617 	ldw	r2,-40(fp)
 801bb48:	00c010c4 	movi	r3,67
 801bb4c:	10c00005 	stb	r3,0(r2)
        return (0);
 801bb50:	0005883a 	mov	r2,zero
 801bb54:	00000e06 	br	801bb90 <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 801bb58:	e0bffe17 	ldw	r2,-8(fp)
 801bb5c:	10801304 	addi	r2,r2,76
 801bb60:	100b883a 	mov	r5,r2
 801bb64:	e13ff717 	ldw	r4,-36(fp)
 801bb68:	8016acc0 	call	8016acc <OS_StrCopy>
 801bb6c:	e0bffdc5 	stb	r2,-9(fp)
 801bb70:	e0bfff17 	ldw	r2,-4(fp)
 801bb74:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801bb78:	e0bff917 	ldw	r2,-28(fp)
 801bb7c:	1001703a 	wrctl	status,r2
}
 801bb80:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 801bb84:	e0bff617 	ldw	r2,-40(fp)
 801bb88:	10000005 	stb	zero,0(r2)
    return (len);
 801bb8c:	e0bffdc3 	ldbu	r2,-9(fp)
}
 801bb90:	e037883a 	mov	sp,fp
 801bb94:	dfc00117 	ldw	ra,4(sp)
 801bb98:	df000017 	ldw	fp,0(sp)
 801bb9c:	dec00204 	addi	sp,sp,8
 801bba0:	f800283a 	ret

0801bba4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 801bba4:	defff304 	addi	sp,sp,-52
 801bba8:	dfc00c15 	stw	ra,48(sp)
 801bbac:	df000b15 	stw	fp,44(sp)
 801bbb0:	df000b04 	addi	fp,sp,44
 801bbb4:	2005883a 	mov	r2,r4
 801bbb8:	e17ff615 	stw	r5,-40(fp)
 801bbbc:	e1bff515 	stw	r6,-44(fp)
 801bbc0:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 801bbc4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 801bbc8:	e0bff517 	ldw	r2,-44(fp)
 801bbcc:	10005e26 	beq	r2,zero,801bd48 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 801bbd0:	e0bff703 	ldbu	r2,-36(fp)
 801bbd4:	10800570 	cmpltui	r2,r2,21
 801bbd8:	1000071e 	bne	r2,zero,801bbf8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 801bbdc:	e0bff703 	ldbu	r2,-36(fp)
 801bbe0:	10803fe0 	cmpeqi	r2,r2,255
 801bbe4:	1000041e 	bne	r2,zero,801bbf8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 801bbe8:	e0bff517 	ldw	r2,-44(fp)
 801bbec:	00c00a84 	movi	r3,42
 801bbf0:	10c00005 	stb	r3,0(r2)
            return;
 801bbf4:	00005506 	br	801bd4c <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 801bbf8:	e0bff617 	ldw	r2,-40(fp)
 801bbfc:	1000041e 	bne	r2,zero,801bc10 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 801bc00:	e0bff517 	ldw	r2,-44(fp)
 801bc04:	00c00304 	movi	r3,12
 801bc08:	10c00005 	stb	r3,0(r2)
        return;
 801bc0c:	00004f06 	br	801bd4c <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 801bc10:	d0a07403 	ldbu	r2,-32304(gp)
 801bc14:	10803fcc 	andi	r2,r2,255
 801bc18:	10000426 	beq	r2,zero,801bc2c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 801bc1c:	e0bff517 	ldw	r2,-44(fp)
 801bc20:	00c00484 	movi	r3,18
 801bc24:	10c00005 	stb	r3,0(r2)
        return;
 801bc28:	00004806 	br	801bd4c <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
 801bc2c:	0005303a 	rdctl	r2,status
 801bc30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801bc34:	e0fffc17 	ldw	r3,-16(fp)
 801bc38:	00bfff84 	movi	r2,-2
 801bc3c:	1884703a 	and	r2,r3,r2
 801bc40:	1001703a 	wrctl	status,r2
  return context;
 801bc44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801bc48:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 801bc4c:	e0bff703 	ldbu	r2,-36(fp)
 801bc50:	10803fd8 	cmpnei	r2,r2,255
 801bc54:	1000031e 	bne	r2,zero,801bc64 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 801bc58:	d0a07517 	ldw	r2,-32300(gp)
 801bc5c:	10800c83 	ldbu	r2,50(r2)
 801bc60:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801bc64:	e0bff703 	ldbu	r2,-36(fp)
 801bc68:	100690ba 	slli	r3,r2,2
 801bc6c:	008201b4 	movhi	r2,2054
 801bc70:	1885883a 	add	r2,r3,r2
 801bc74:	10bc0017 	ldw	r2,-4096(r2)
 801bc78:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 801bc7c:	e0bffe17 	ldw	r2,-8(fp)
 801bc80:	1000091e 	bne	r2,zero,801bca8 <OSTaskNameSet+0x104>
 801bc84:	e0bfff17 	ldw	r2,-4(fp)
 801bc88:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801bc8c:	e0bffb17 	ldw	r2,-20(fp)
 801bc90:	1001703a 	wrctl	status,r2
}
 801bc94:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801bc98:	e0bff517 	ldw	r2,-44(fp)
 801bc9c:	00c010c4 	movi	r3,67
 801bca0:	10c00005 	stb	r3,0(r2)
        return;
 801bca4:	00002906 	br	801bd4c <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 801bca8:	e0bffe17 	ldw	r2,-8(fp)
 801bcac:	10800058 	cmpnei	r2,r2,1
 801bcb0:	1000091e 	bne	r2,zero,801bcd8 <OSTaskNameSet+0x134>
 801bcb4:	e0bfff17 	ldw	r2,-4(fp)
 801bcb8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801bcbc:	e0bffa17 	ldw	r2,-24(fp)
 801bcc0:	1001703a 	wrctl	status,r2
}
 801bcc4:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 801bcc8:	e0bff517 	ldw	r2,-44(fp)
 801bccc:	00c010c4 	movi	r3,67
 801bcd0:	10c00005 	stb	r3,0(r2)
        return;
 801bcd4:	00001d06 	br	801bd4c <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 801bcd8:	e13ff617 	ldw	r4,-40(fp)
 801bcdc:	8016b400 	call	8016b40 <OS_StrLen>
 801bce0:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 801bce4:	e0bffdc3 	ldbu	r2,-9(fp)
 801bce8:	10800830 	cmpltui	r2,r2,32
 801bcec:	1000091e 	bne	r2,zero,801bd14 <OSTaskNameSet+0x170>
 801bcf0:	e0bfff17 	ldw	r2,-4(fp)
 801bcf4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801bcf8:	e0bff917 	ldw	r2,-28(fp)
 801bcfc:	1001703a 	wrctl	status,r2
}
 801bd00:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 801bd04:	e0bff517 	ldw	r2,-44(fp)
 801bd08:	00c01044 	movi	r3,65
 801bd0c:	10c00005 	stb	r3,0(r2)
        return;
 801bd10:	00000e06 	br	801bd4c <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 801bd14:	e0bffe17 	ldw	r2,-8(fp)
 801bd18:	10801304 	addi	r2,r2,76
 801bd1c:	e17ff617 	ldw	r5,-40(fp)
 801bd20:	1009883a 	mov	r4,r2
 801bd24:	8016acc0 	call	8016acc <OS_StrCopy>
 801bd28:	e0bfff17 	ldw	r2,-4(fp)
 801bd2c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801bd30:	e0bff817 	ldw	r2,-32(fp)
 801bd34:	1001703a 	wrctl	status,r2
}
 801bd38:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 801bd3c:	e0bff517 	ldw	r2,-44(fp)
 801bd40:	10000005 	stb	zero,0(r2)
 801bd44:	00000106 	br	801bd4c <OSTaskNameSet+0x1a8>
        return;
 801bd48:	0001883a 	nop
}
 801bd4c:	e037883a 	mov	sp,fp
 801bd50:	dfc00117 	ldw	ra,4(sp)
 801bd54:	df000017 	ldw	fp,0(sp)
 801bd58:	dec00204 	addi	sp,sp,8
 801bd5c:	f800283a 	ret

0801bd60 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 801bd60:	defff404 	addi	sp,sp,-48
 801bd64:	dfc00b15 	stw	ra,44(sp)
 801bd68:	df000a15 	stw	fp,40(sp)
 801bd6c:	df000a04 	addi	fp,sp,40
 801bd70:	2005883a 	mov	r2,r4
 801bd74:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 801bd78:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 801bd7c:	e0bff603 	ldbu	r2,-40(fp)
 801bd80:	10800530 	cmpltui	r2,r2,20
 801bd84:	1000021e 	bne	r2,zero,801bd90 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 801bd88:	00800a84 	movi	r2,42
 801bd8c:	00006706 	br	801bf2c <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
 801bd90:	0005303a 	rdctl	r2,status
 801bd94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801bd98:	e0fffd17 	ldw	r3,-12(fp)
 801bd9c:	00bfff84 	movi	r2,-2
 801bda0:	1884703a 	and	r2,r3,r2
 801bda4:	1001703a 	wrctl	status,r2
  return context;
 801bda8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801bdac:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
 801bdb0:	e0bff603 	ldbu	r2,-40(fp)
 801bdb4:	100690ba 	slli	r3,r2,2
 801bdb8:	008201b4 	movhi	r2,2054
 801bdbc:	1885883a 	add	r2,r3,r2
 801bdc0:	10bc0017 	ldw	r2,-4096(r2)
 801bdc4:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 801bdc8:	e0bffe17 	ldw	r2,-8(fp)
 801bdcc:	1000071e 	bne	r2,zero,801bdec <OSTaskResume+0x8c>
 801bdd0:	e0bfff17 	ldw	r2,-4(fp)
 801bdd4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801bdd8:	e0bffc17 	ldw	r2,-16(fp)
 801bddc:	1001703a 	wrctl	status,r2
}
 801bde0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 801bde4:	00801184 	movi	r2,70
 801bde8:	00005006 	br	801bf2c <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 801bdec:	e0bffe17 	ldw	r2,-8(fp)
 801bdf0:	10800058 	cmpnei	r2,r2,1
 801bdf4:	1000071e 	bne	r2,zero,801be14 <OSTaskResume+0xb4>
 801bdf8:	e0bfff17 	ldw	r2,-4(fp)
 801bdfc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801be00:	e0bffb17 	ldw	r2,-20(fp)
 801be04:	1001703a 	wrctl	status,r2
}
 801be08:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801be0c:	008010c4 	movi	r2,67
 801be10:	00004606 	br	801bf2c <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 801be14:	e0bffe17 	ldw	r2,-8(fp)
 801be18:	10800c03 	ldbu	r2,48(r2)
 801be1c:	10803fcc 	andi	r2,r2,255
 801be20:	1080020c 	andi	r2,r2,8
 801be24:	10003b26 	beq	r2,zero,801bf14 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 801be28:	e0bffe17 	ldw	r2,-8(fp)
 801be2c:	10c00c03 	ldbu	r3,48(r2)
 801be30:	00bffdc4 	movi	r2,-9
 801be34:	1884703a 	and	r2,r3,r2
 801be38:	1007883a 	mov	r3,r2
 801be3c:	e0bffe17 	ldw	r2,-8(fp)
 801be40:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 801be44:	e0bffe17 	ldw	r2,-8(fp)
 801be48:	10800c03 	ldbu	r2,48(r2)
 801be4c:	10803fcc 	andi	r2,r2,255
 801be50:	1000291e 	bne	r2,zero,801bef8 <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
 801be54:	e0bffe17 	ldw	r2,-8(fp)
 801be58:	10800b8b 	ldhu	r2,46(r2)
 801be5c:	10bfffcc 	andi	r2,r2,65535
 801be60:	1000201e 	bne	r2,zero,801bee4 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 801be64:	e0bffe17 	ldw	r2,-8(fp)
 801be68:	10c00d83 	ldbu	r3,54(r2)
 801be6c:	d0a07203 	ldbu	r2,-32312(gp)
 801be70:	1884b03a 	or	r2,r3,r2
 801be74:	d0a07205 	stb	r2,-32312(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 801be78:	e0bffe17 	ldw	r2,-8(fp)
 801be7c:	10800d03 	ldbu	r2,52(r2)
 801be80:	10c03fcc 	andi	r3,r2,255
 801be84:	d0a07244 	addi	r2,gp,-32311
 801be88:	1885883a 	add	r2,r3,r2
 801be8c:	11000003 	ldbu	r4,0(r2)
 801be90:	e0bffe17 	ldw	r2,-8(fp)
 801be94:	10800d43 	ldbu	r2,53(r2)
 801be98:	e0fffe17 	ldw	r3,-8(fp)
 801be9c:	18c00d03 	ldbu	r3,52(r3)
 801bea0:	18c03fcc 	andi	r3,r3,255
 801bea4:	2084b03a 	or	r2,r4,r2
 801bea8:	1009883a 	mov	r4,r2
 801beac:	d0a07244 	addi	r2,gp,-32311
 801beb0:	1885883a 	add	r2,r3,r2
 801beb4:	11000005 	stb	r4,0(r2)
 801beb8:	e0bfff17 	ldw	r2,-4(fp)
 801bebc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801bec0:	e0bffa17 	ldw	r2,-24(fp)
 801bec4:	1001703a 	wrctl	status,r2
}
 801bec8:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 801becc:	d0a06643 	ldbu	r2,-32359(gp)
 801bed0:	10803fcc 	andi	r2,r2,255
 801bed4:	10800058 	cmpnei	r2,r2,1
 801bed8:	10000c1e 	bne	r2,zero,801bf0c <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
 801bedc:	80169940 	call	8016994 <OS_Sched>
 801bee0:	00000a06 	br	801bf0c <OSTaskResume+0x1ac>
 801bee4:	e0bfff17 	ldw	r2,-4(fp)
 801bee8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801beec:	e0bff917 	ldw	r2,-28(fp)
 801bef0:	1001703a 	wrctl	status,r2
}
 801bef4:	00000506 	br	801bf0c <OSTaskResume+0x1ac>
 801bef8:	e0bfff17 	ldw	r2,-4(fp)
 801befc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801bf00:	e0bff817 	ldw	r2,-32(fp)
 801bf04:	1001703a 	wrctl	status,r2
}
 801bf08:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 801bf0c:	0005883a 	mov	r2,zero
 801bf10:	00000606 	br	801bf2c <OSTaskResume+0x1cc>
 801bf14:	e0bfff17 	ldw	r2,-4(fp)
 801bf18:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801bf1c:	e0bff717 	ldw	r2,-36(fp)
 801bf20:	1001703a 	wrctl	status,r2
}
 801bf24:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 801bf28:	00801104 	movi	r2,68
}
 801bf2c:	e037883a 	mov	sp,fp
 801bf30:	dfc00117 	ldw	ra,4(sp)
 801bf34:	df000017 	ldw	fp,0(sp)
 801bf38:	dec00204 	addi	sp,sp,8
 801bf3c:	f800283a 	ret

0801bf40 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 801bf40:	defff304 	addi	sp,sp,-52
 801bf44:	df000c15 	stw	fp,48(sp)
 801bf48:	df000c04 	addi	fp,sp,48
 801bf4c:	2005883a 	mov	r2,r4
 801bf50:	e17ff415 	stw	r5,-48(fp)
 801bf54:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 801bf58:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 801bf5c:	e0bff503 	ldbu	r2,-44(fp)
 801bf60:	10800570 	cmpltui	r2,r2,21
 801bf64:	1000051e 	bne	r2,zero,801bf7c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 801bf68:	e0bff503 	ldbu	r2,-44(fp)
 801bf6c:	10803fe0 	cmpeqi	r2,r2,255
 801bf70:	1000021e 	bne	r2,zero,801bf7c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 801bf74:	00800a84 	movi	r2,42
 801bf78:	00005b06 	br	801c0e8 <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 801bf7c:	e0bff417 	ldw	r2,-48(fp)
 801bf80:	1000021e 	bne	r2,zero,801bf8c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 801bf84:	00800244 	movi	r2,9
 801bf88:	00005706 	br	801c0e8 <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 801bf8c:	e0bff417 	ldw	r2,-48(fp)
 801bf90:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 801bf94:	e0bff417 	ldw	r2,-48(fp)
 801bf98:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
 801bf9c:	0005303a 	rdctl	r2,status
 801bfa0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801bfa4:	e0fffa17 	ldw	r3,-24(fp)
 801bfa8:	00bfff84 	movi	r2,-2
 801bfac:	1884703a 	and	r2,r3,r2
 801bfb0:	1001703a 	wrctl	status,r2
  return context;
 801bfb4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
 801bfb8:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 801bfbc:	e0bff503 	ldbu	r2,-44(fp)
 801bfc0:	10803fd8 	cmpnei	r2,r2,255
 801bfc4:	1000031e 	bne	r2,zero,801bfd4 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 801bfc8:	d0a07517 	ldw	r2,-32300(gp)
 801bfcc:	10800c83 	ldbu	r2,50(r2)
 801bfd0:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801bfd4:	e0bff503 	ldbu	r2,-44(fp)
 801bfd8:	100690ba 	slli	r3,r2,2
 801bfdc:	008201b4 	movhi	r2,2054
 801bfe0:	1885883a 	add	r2,r3,r2
 801bfe4:	10bc0017 	ldw	r2,-4096(r2)
 801bfe8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 801bfec:	e0bffc17 	ldw	r2,-16(fp)
 801bff0:	1000071e 	bne	r2,zero,801c010 <OSTaskStkChk+0xd0>
 801bff4:	e0bffd17 	ldw	r2,-12(fp)
 801bff8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801bffc:	e0bff917 	ldw	r2,-28(fp)
 801c000:	1001703a 	wrctl	status,r2
}
 801c004:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801c008:	008010c4 	movi	r2,67
 801c00c:	00003606 	br	801c0e8 <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 801c010:	e0bffc17 	ldw	r2,-16(fp)
 801c014:	10800058 	cmpnei	r2,r2,1
 801c018:	1000071e 	bne	r2,zero,801c038 <OSTaskStkChk+0xf8>
 801c01c:	e0bffd17 	ldw	r2,-12(fp)
 801c020:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801c024:	e0bff817 	ldw	r2,-32(fp)
 801c028:	1001703a 	wrctl	status,r2
}
 801c02c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801c030:	008010c4 	movi	r2,67
 801c034:	00002c06 	br	801c0e8 <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 801c038:	e0bffc17 	ldw	r2,-16(fp)
 801c03c:	1080040b 	ldhu	r2,16(r2)
 801c040:	10bfffcc 	andi	r2,r2,65535
 801c044:	1080004c 	andi	r2,r2,1
 801c048:	1000071e 	bne	r2,zero,801c068 <OSTaskStkChk+0x128>
 801c04c:	e0bffd17 	ldw	r2,-12(fp)
 801c050:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801c054:	e0bff717 	ldw	r2,-36(fp)
 801c058:	1001703a 	wrctl	status,r2
}
 801c05c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 801c060:	00801144 	movi	r2,69
 801c064:	00002006 	br	801c0e8 <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
 801c068:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
 801c06c:	e0bffc17 	ldw	r2,-16(fp)
 801c070:	10800317 	ldw	r2,12(r2)
 801c074:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
 801c078:	e0bffc17 	ldw	r2,-16(fp)
 801c07c:	10800217 	ldw	r2,8(r2)
 801c080:	e0bfff15 	stw	r2,-4(fp)
 801c084:	e0bffd17 	ldw	r2,-12(fp)
 801c088:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 801c08c:	e0bff617 	ldw	r2,-40(fp)
 801c090:	1001703a 	wrctl	status,r2
}
 801c094:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 801c098:	00000306 	br	801c0a8 <OSTaskStkChk+0x168>
        nfree++;
 801c09c:	e0bffe17 	ldw	r2,-8(fp)
 801c0a0:	10800044 	addi	r2,r2,1
 801c0a4:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 801c0a8:	e0bfff17 	ldw	r2,-4(fp)
 801c0ac:	10c00104 	addi	r3,r2,4
 801c0b0:	e0ffff15 	stw	r3,-4(fp)
 801c0b4:	10800017 	ldw	r2,0(r2)
 801c0b8:	103ff826 	beq	r2,zero,801c09c <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 801c0bc:	e0bffe17 	ldw	r2,-8(fp)
 801c0c0:	100690ba 	slli	r3,r2,2
 801c0c4:	e0bff417 	ldw	r2,-48(fp)
 801c0c8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 801c0cc:	e0fffb17 	ldw	r3,-20(fp)
 801c0d0:	e0bffe17 	ldw	r2,-8(fp)
 801c0d4:	1885c83a 	sub	r2,r3,r2
 801c0d8:	100690ba 	slli	r3,r2,2
 801c0dc:	e0bff417 	ldw	r2,-48(fp)
 801c0e0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 801c0e4:	0005883a 	mov	r2,zero
}
 801c0e8:	e037883a 	mov	sp,fp
 801c0ec:	df000017 	ldw	fp,0(sp)
 801c0f0:	dec00104 	addi	sp,sp,4
 801c0f4:	f800283a 	ret

0801c0f8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 801c0f8:	defff504 	addi	sp,sp,-44
 801c0fc:	dfc00a15 	stw	ra,40(sp)
 801c100:	df000915 	stw	fp,36(sp)
 801c104:	df000904 	addi	fp,sp,36
 801c108:	2005883a 	mov	r2,r4
 801c10c:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801c110:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 801c114:	e0bff703 	ldbu	r2,-36(fp)
 801c118:	10800518 	cmpnei	r2,r2,20
 801c11c:	1000021e 	bne	r2,zero,801c128 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 801c120:	008011c4 	movi	r2,71
 801c124:	00006906 	br	801c2cc <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 801c128:	e0bff703 	ldbu	r2,-36(fp)
 801c12c:	10800530 	cmpltui	r2,r2,20
 801c130:	1000051e 	bne	r2,zero,801c148 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 801c134:	e0bff703 	ldbu	r2,-36(fp)
 801c138:	10803fe0 	cmpeqi	r2,r2,255
 801c13c:	1000021e 	bne	r2,zero,801c148 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 801c140:	00800a84 	movi	r2,42
 801c144:	00006106 	br	801c2cc <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
 801c148:	0005303a 	rdctl	r2,status
 801c14c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c150:	e0fffb17 	ldw	r3,-20(fp)
 801c154:	00bfff84 	movi	r2,-2
 801c158:	1884703a 	and	r2,r3,r2
 801c15c:	1001703a 	wrctl	status,r2
  return context;
 801c160:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 801c164:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 801c168:	e0bff703 	ldbu	r2,-36(fp)
 801c16c:	10803fd8 	cmpnei	r2,r2,255
 801c170:	1000061e 	bne	r2,zero,801c18c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 801c174:	d0a07517 	ldw	r2,-32300(gp)
 801c178:	10800c83 	ldbu	r2,50(r2)
 801c17c:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
 801c180:	00800044 	movi	r2,1
 801c184:	e0bfffc5 	stb	r2,-1(fp)
 801c188:	00000906 	br	801c1b0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 801c18c:	d0a07517 	ldw	r2,-32300(gp)
 801c190:	10800c83 	ldbu	r2,50(r2)
 801c194:	e0fff703 	ldbu	r3,-36(fp)
 801c198:	10803fcc 	andi	r2,r2,255
 801c19c:	1880031e 	bne	r3,r2,801c1ac <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 801c1a0:	00800044 	movi	r2,1
 801c1a4:	e0bfffc5 	stb	r2,-1(fp)
 801c1a8:	00000106 	br	801c1b0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 801c1ac:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801c1b0:	e0bff703 	ldbu	r2,-36(fp)
 801c1b4:	100690ba 	slli	r3,r2,2
 801c1b8:	008201b4 	movhi	r2,2054
 801c1bc:	1885883a 	add	r2,r3,r2
 801c1c0:	10bc0017 	ldw	r2,-4096(r2)
 801c1c4:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 801c1c8:	e0bffd17 	ldw	r2,-12(fp)
 801c1cc:	1000071e 	bne	r2,zero,801c1ec <OSTaskSuspend+0xf4>
 801c1d0:	e0bffe17 	ldw	r2,-8(fp)
 801c1d4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801c1d8:	e0bffa17 	ldw	r2,-24(fp)
 801c1dc:	1001703a 	wrctl	status,r2
}
 801c1e0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 801c1e4:	00801204 	movi	r2,72
 801c1e8:	00003806 	br	801c2cc <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 801c1ec:	e0bffd17 	ldw	r2,-12(fp)
 801c1f0:	10800058 	cmpnei	r2,r2,1
 801c1f4:	1000071e 	bne	r2,zero,801c214 <OSTaskSuspend+0x11c>
 801c1f8:	e0bffe17 	ldw	r2,-8(fp)
 801c1fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801c200:	e0bff917 	ldw	r2,-28(fp)
 801c204:	1001703a 	wrctl	status,r2
}
 801c208:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801c20c:	008010c4 	movi	r2,67
 801c210:	00002e06 	br	801c2cc <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
 801c214:	e0bffd17 	ldw	r2,-12(fp)
 801c218:	10800d03 	ldbu	r2,52(r2)
 801c21c:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 801c220:	e0fffcc3 	ldbu	r3,-13(fp)
 801c224:	d0a07244 	addi	r2,gp,-32311
 801c228:	1885883a 	add	r2,r3,r2
 801c22c:	10800003 	ldbu	r2,0(r2)
 801c230:	1007883a 	mov	r3,r2
 801c234:	e0bffd17 	ldw	r2,-12(fp)
 801c238:	10800d43 	ldbu	r2,53(r2)
 801c23c:	0084303a 	nor	r2,zero,r2
 801c240:	1884703a 	and	r2,r3,r2
 801c244:	e0fffcc3 	ldbu	r3,-13(fp)
 801c248:	1009883a 	mov	r4,r2
 801c24c:	d0a07244 	addi	r2,gp,-32311
 801c250:	1885883a 	add	r2,r3,r2
 801c254:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 801c258:	e0fffcc3 	ldbu	r3,-13(fp)
 801c25c:	d0a07244 	addi	r2,gp,-32311
 801c260:	1885883a 	add	r2,r3,r2
 801c264:	10800003 	ldbu	r2,0(r2)
 801c268:	10803fcc 	andi	r2,r2,255
 801c26c:	1000071e 	bne	r2,zero,801c28c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 801c270:	e0bffd17 	ldw	r2,-12(fp)
 801c274:	10800d83 	ldbu	r2,54(r2)
 801c278:	0084303a 	nor	r2,zero,r2
 801c27c:	1007883a 	mov	r3,r2
 801c280:	d0a07203 	ldbu	r2,-32312(gp)
 801c284:	1884703a 	and	r2,r3,r2
 801c288:	d0a07205 	stb	r2,-32312(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 801c28c:	e0bffd17 	ldw	r2,-12(fp)
 801c290:	10800c03 	ldbu	r2,48(r2)
 801c294:	10800214 	ori	r2,r2,8
 801c298:	1007883a 	mov	r3,r2
 801c29c:	e0bffd17 	ldw	r2,-12(fp)
 801c2a0:	10c00c05 	stb	r3,48(r2)
 801c2a4:	e0bffe17 	ldw	r2,-8(fp)
 801c2a8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801c2ac:	e0bff817 	ldw	r2,-32(fp)
 801c2b0:	1001703a 	wrctl	status,r2
}
 801c2b4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 801c2b8:	e0bfffc3 	ldbu	r2,-1(fp)
 801c2bc:	10800058 	cmpnei	r2,r2,1
 801c2c0:	1000011e 	bne	r2,zero,801c2c8 <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
 801c2c4:	80169940 	call	8016994 <OS_Sched>
    }
    return (OS_ERR_NONE);
 801c2c8:	0005883a 	mov	r2,zero
}
 801c2cc:	e037883a 	mov	sp,fp
 801c2d0:	dfc00117 	ldw	ra,4(sp)
 801c2d4:	df000017 	ldw	fp,0(sp)
 801c2d8:	dec00204 	addi	sp,sp,8
 801c2dc:	f800283a 	ret

0801c2e0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 801c2e0:	defff604 	addi	sp,sp,-40
 801c2e4:	dfc00915 	stw	ra,36(sp)
 801c2e8:	df000815 	stw	fp,32(sp)
 801c2ec:	df000804 	addi	fp,sp,32
 801c2f0:	2005883a 	mov	r2,r4
 801c2f4:	e17ff815 	stw	r5,-32(fp)
 801c2f8:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801c2fc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 801c300:	e0bff903 	ldbu	r2,-28(fp)
 801c304:	10800570 	cmpltui	r2,r2,21
 801c308:	1000051e 	bne	r2,zero,801c320 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 801c30c:	e0bff903 	ldbu	r2,-28(fp)
 801c310:	10803fe0 	cmpeqi	r2,r2,255
 801c314:	1000021e 	bne	r2,zero,801c320 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 801c318:	00800a84 	movi	r2,42
 801c31c:	00003506 	br	801c3f4 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 801c320:	e0bff817 	ldw	r2,-32(fp)
 801c324:	1000021e 	bne	r2,zero,801c330 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 801c328:	00800244 	movi	r2,9
 801c32c:	00003106 	br	801c3f4 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
 801c330:	0005303a 	rdctl	r2,status
 801c334:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c338:	e0fffd17 	ldw	r3,-12(fp)
 801c33c:	00bfff84 	movi	r2,-2
 801c340:	1884703a 	and	r2,r3,r2
 801c344:	1001703a 	wrctl	status,r2
  return context;
 801c348:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801c34c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 801c350:	e0bff903 	ldbu	r2,-28(fp)
 801c354:	10803fd8 	cmpnei	r2,r2,255
 801c358:	1000031e 	bne	r2,zero,801c368 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 801c35c:	d0a07517 	ldw	r2,-32300(gp)
 801c360:	10800c83 	ldbu	r2,50(r2)
 801c364:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801c368:	e0bff903 	ldbu	r2,-28(fp)
 801c36c:	100690ba 	slli	r3,r2,2
 801c370:	008201b4 	movhi	r2,2054
 801c374:	1885883a 	add	r2,r3,r2
 801c378:	10bc0017 	ldw	r2,-4096(r2)
 801c37c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 801c380:	e0bffe17 	ldw	r2,-8(fp)
 801c384:	1000071e 	bne	r2,zero,801c3a4 <OSTaskQuery+0xc4>
 801c388:	e0bfff17 	ldw	r2,-4(fp)
 801c38c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801c390:	e0bffc17 	ldw	r2,-16(fp)
 801c394:	1001703a 	wrctl	status,r2
}
 801c398:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 801c39c:	00800a44 	movi	r2,41
 801c3a0:	00001406 	br	801c3f4 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 801c3a4:	e0bffe17 	ldw	r2,-8(fp)
 801c3a8:	10800058 	cmpnei	r2,r2,1
 801c3ac:	1000071e 	bne	r2,zero,801c3cc <OSTaskQuery+0xec>
 801c3b0:	e0bfff17 	ldw	r2,-4(fp)
 801c3b4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801c3b8:	e0bffb17 	ldw	r2,-20(fp)
 801c3bc:	1001703a 	wrctl	status,r2
}
 801c3c0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801c3c4:	008010c4 	movi	r2,67
 801c3c8:	00000a06 	br	801c3f4 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 801c3cc:	01801b04 	movi	r6,108
 801c3d0:	e17ffe17 	ldw	r5,-8(fp)
 801c3d4:	e13ff817 	ldw	r4,-32(fp)
 801c3d8:	80169280 	call	8016928 <OS_MemCopy>
 801c3dc:	e0bfff17 	ldw	r2,-4(fp)
 801c3e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801c3e4:	e0bffa17 	ldw	r2,-24(fp)
 801c3e8:	1001703a 	wrctl	status,r2
}
 801c3ec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 801c3f0:	0005883a 	mov	r2,zero
}
 801c3f4:	e037883a 	mov	sp,fp
 801c3f8:	dfc00117 	ldw	ra,4(sp)
 801c3fc:	df000017 	ldw	fp,0(sp)
 801c400:	dec00204 	addi	sp,sp,8
 801c404:	f800283a 	ret

0801c408 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 801c408:	defffc04 	addi	sp,sp,-16
 801c40c:	df000315 	stw	fp,12(sp)
 801c410:	df000304 	addi	fp,sp,12
 801c414:	e13fff15 	stw	r4,-4(fp)
 801c418:	e17ffe15 	stw	r5,-8(fp)
 801c41c:	3005883a 	mov	r2,r6
 801c420:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 801c424:	e0bffd0b 	ldhu	r2,-12(fp)
 801c428:	1080004c 	andi	r2,r2,1
 801c42c:	10000d26 	beq	r2,zero,801c464 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 801c430:	e0bffd0b 	ldhu	r2,-12(fp)
 801c434:	1080008c 	andi	r2,r2,2
 801c438:	10000a26 	beq	r2,zero,801c464 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 801c43c:	00000706 	br	801c45c <OS_TaskStkClr+0x54>
                size--;
 801c440:	e0bffe17 	ldw	r2,-8(fp)
 801c444:	10bfffc4 	addi	r2,r2,-1
 801c448:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 801c44c:	e0bfff17 	ldw	r2,-4(fp)
 801c450:	10c00104 	addi	r3,r2,4
 801c454:	e0ffff15 	stw	r3,-4(fp)
 801c458:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 801c45c:	e0bffe17 	ldw	r2,-8(fp)
 801c460:	103ff71e 	bne	r2,zero,801c440 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 801c464:	0001883a 	nop
 801c468:	e037883a 	mov	sp,fp
 801c46c:	df000017 	ldw	fp,0(sp)
 801c470:	dec00104 	addi	sp,sp,4
 801c474:	f800283a 	ret

0801c478 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 801c478:	defff904 	addi	sp,sp,-28
 801c47c:	dfc00615 	stw	ra,24(sp)
 801c480:	df000515 	stw	fp,20(sp)
 801c484:	df000504 	addi	fp,sp,20
 801c488:	2005883a 	mov	r2,r4
 801c48c:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801c490:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 801c494:	d0a07403 	ldbu	r2,-32304(gp)
 801c498:	10803fcc 	andi	r2,r2,255
 801c49c:	1000321e 	bne	r2,zero,801c568 <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 801c4a0:	e0bffb0b 	ldhu	r2,-20(fp)
 801c4a4:	10003126 	beq	r2,zero,801c56c <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
 801c4a8:	0005303a 	rdctl	r2,status
 801c4ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c4b0:	e0fffd17 	ldw	r3,-12(fp)
 801c4b4:	00bfff84 	movi	r2,-2
 801c4b8:	1884703a 	and	r2,r3,r2
 801c4bc:	1001703a 	wrctl	status,r2
  return context;
 801c4c0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
 801c4c4:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 801c4c8:	d0a07517 	ldw	r2,-32300(gp)
 801c4cc:	10800d03 	ldbu	r2,52(r2)
 801c4d0:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 801c4d4:	e0fffec3 	ldbu	r3,-5(fp)
 801c4d8:	d0a07244 	addi	r2,gp,-32311
 801c4dc:	1885883a 	add	r2,r3,r2
 801c4e0:	10800003 	ldbu	r2,0(r2)
 801c4e4:	1007883a 	mov	r3,r2
 801c4e8:	d0a07517 	ldw	r2,-32300(gp)
 801c4ec:	10800d43 	ldbu	r2,53(r2)
 801c4f0:	0084303a 	nor	r2,zero,r2
 801c4f4:	1884703a 	and	r2,r3,r2
 801c4f8:	e0fffec3 	ldbu	r3,-5(fp)
 801c4fc:	1009883a 	mov	r4,r2
 801c500:	d0a07244 	addi	r2,gp,-32311
 801c504:	1885883a 	add	r2,r3,r2
 801c508:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 801c50c:	e0fffec3 	ldbu	r3,-5(fp)
 801c510:	d0a07244 	addi	r2,gp,-32311
 801c514:	1885883a 	add	r2,r3,r2
 801c518:	10800003 	ldbu	r2,0(r2)
 801c51c:	10803fcc 	andi	r2,r2,255
 801c520:	1000071e 	bne	r2,zero,801c540 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 801c524:	d0a07517 	ldw	r2,-32300(gp)
 801c528:	10800d83 	ldbu	r2,54(r2)
 801c52c:	0084303a 	nor	r2,zero,r2
 801c530:	1007883a 	mov	r3,r2
 801c534:	d0a07203 	ldbu	r2,-32312(gp)
 801c538:	1884703a 	and	r2,r3,r2
 801c53c:	d0a07205 	stb	r2,-32312(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 801c540:	d0a07517 	ldw	r2,-32300(gp)
 801c544:	e0fffb0b 	ldhu	r3,-20(fp)
 801c548:	10c00b8d 	sth	r3,46(r2)
 801c54c:	e0bfff17 	ldw	r2,-4(fp)
 801c550:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801c554:	e0bffc17 	ldw	r2,-16(fp)
 801c558:	1001703a 	wrctl	status,r2
}
 801c55c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 801c560:	80169940 	call	8016994 <OS_Sched>
 801c564:	00000106 	br	801c56c <OSTimeDly+0xf4>
        return;
 801c568:	0001883a 	nop
    }
}
 801c56c:	e037883a 	mov	sp,fp
 801c570:	dfc00117 	ldw	ra,4(sp)
 801c574:	df000017 	ldw	fp,0(sp)
 801c578:	dec00204 	addi	sp,sp,8
 801c57c:	f800283a 	ret

0801c580 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 801c580:	defff704 	addi	sp,sp,-36
 801c584:	dfc00815 	stw	ra,32(sp)
 801c588:	df000715 	stw	fp,28(sp)
 801c58c:	dc000615 	stw	r16,24(sp)
 801c590:	df000704 	addi	fp,sp,28
 801c594:	2005883a 	mov	r2,r4
 801c598:	3009883a 	mov	r4,r6
 801c59c:	3807883a 	mov	r3,r7
 801c5a0:	e0bffc05 	stb	r2,-16(fp)
 801c5a4:	2805883a 	mov	r2,r5
 801c5a8:	e0bffb05 	stb	r2,-20(fp)
 801c5ac:	2005883a 	mov	r2,r4
 801c5b0:	e0bffa05 	stb	r2,-24(fp)
 801c5b4:	1805883a 	mov	r2,r3
 801c5b8:	e0bff90d 	sth	r2,-28(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 801c5bc:	d0a07403 	ldbu	r2,-32304(gp)
 801c5c0:	10803fcc 	andi	r2,r2,255
 801c5c4:	10000226 	beq	r2,zero,801c5d0 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
 801c5c8:	00801544 	movi	r2,85
 801c5cc:	00003e06 	br	801c6c8 <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 801c5d0:	e0bffc03 	ldbu	r2,-16(fp)
 801c5d4:	1000081e 	bne	r2,zero,801c5f8 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
 801c5d8:	e0bffb03 	ldbu	r2,-20(fp)
 801c5dc:	1000061e 	bne	r2,zero,801c5f8 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
 801c5e0:	e0bffa03 	ldbu	r2,-24(fp)
 801c5e4:	1000041e 	bne	r2,zero,801c5f8 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
 801c5e8:	e0bff90b 	ldhu	r2,-28(fp)
 801c5ec:	1000021e 	bne	r2,zero,801c5f8 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
 801c5f0:	00801504 	movi	r2,84
 801c5f4:	00003406 	br	801c6c8 <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
 801c5f8:	e0bffb03 	ldbu	r2,-20(fp)
 801c5fc:	10800f30 	cmpltui	r2,r2,60
 801c600:	1000021e 	bne	r2,zero,801c60c <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 801c604:	00801444 	movi	r2,81
 801c608:	00002f06 	br	801c6c8 <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
 801c60c:	e0bffa03 	ldbu	r2,-24(fp)
 801c610:	10800f30 	cmpltui	r2,r2,60
 801c614:	1000021e 	bne	r2,zero,801c620 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
 801c618:	00801484 	movi	r2,82
 801c61c:	00002a06 	br	801c6c8 <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
 801c620:	e0bff90b 	ldhu	r2,-28(fp)
 801c624:	1080fa30 	cmpltui	r2,r2,1000
 801c628:	1000021e 	bne	r2,zero,801c634 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
 801c62c:	008014c4 	movi	r2,83
 801c630:	00002506 	br	801c6c8 <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 801c634:	e0bffc03 	ldbu	r2,-16(fp)
 801c638:	10c38424 	muli	r3,r2,3600
 801c63c:	e0bffb03 	ldbu	r2,-20(fp)
 801c640:	10800f24 	muli	r2,r2,60
 801c644:	1887883a 	add	r3,r3,r2
 801c648:	e0bffa03 	ldbu	r2,-24(fp)
 801c64c:	1885883a 	add	r2,r3,r2
 801c650:	14001924 	muli	r16,r2,100
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 801c654:	e0bff90b 	ldhu	r2,-28(fp)
 801c658:	10801924 	muli	r2,r2,100
 801c65c:	10807d04 	addi	r2,r2,500
 801c660:	0140fa04 	movi	r5,1000
 801c664:	1009883a 	mov	r4,r2
 801c668:	8011fdc0 	call	8011fdc <__udivsi3>
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 801c66c:	8085883a 	add	r2,r16,r2
 801c670:	e0bffd15 	stw	r2,-12(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 801c674:	e0bffd17 	ldw	r2,-12(fp)
 801c678:	1004d43a 	srli	r2,r2,16
 801c67c:	e0bffe8d 	sth	r2,-6(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 801c680:	e0bffd17 	ldw	r2,-12(fp)
 801c684:	10bfffcc 	andi	r2,r2,65535
 801c688:	e0bffd15 	stw	r2,-12(fp)
    OSTimeDly((INT16U)ticks);
 801c68c:	e0bffd17 	ldw	r2,-12(fp)
 801c690:	10bfffcc 	andi	r2,r2,65535
 801c694:	1009883a 	mov	r4,r2
 801c698:	801c4780 	call	801c478 <OSTimeDly>
    while (loops > 0) {
 801c69c:	00000706 	br	801c6bc <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
 801c6a0:	01200014 	movui	r4,32768
 801c6a4:	801c4780 	call	801c478 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 801c6a8:	01200014 	movui	r4,32768
 801c6ac:	801c4780 	call	801c478 <OSTimeDly>
        loops--;
 801c6b0:	e0bffe8b 	ldhu	r2,-6(fp)
 801c6b4:	10bfffc4 	addi	r2,r2,-1
 801c6b8:	e0bffe8d 	sth	r2,-6(fp)
    while (loops > 0) {
 801c6bc:	e0bffe8b 	ldhu	r2,-6(fp)
 801c6c0:	103ff71e 	bne	r2,zero,801c6a0 <OSTimeDlyHMSM+0x120>
    }
    return (OS_ERR_NONE);
 801c6c4:	0005883a 	mov	r2,zero
}
 801c6c8:	e6ffff04 	addi	sp,fp,-4
 801c6cc:	dfc00217 	ldw	ra,8(sp)
 801c6d0:	df000117 	ldw	fp,4(sp)
 801c6d4:	dc000017 	ldw	r16,0(sp)
 801c6d8:	dec00304 	addi	sp,sp,12
 801c6dc:	f800283a 	ret

0801c6e0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 801c6e0:	defff504 	addi	sp,sp,-44
 801c6e4:	dfc00a15 	stw	ra,40(sp)
 801c6e8:	df000915 	stw	fp,36(sp)
 801c6ec:	df000904 	addi	fp,sp,36
 801c6f0:	2005883a 	mov	r2,r4
 801c6f4:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801c6f8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 801c6fc:	e0bff703 	ldbu	r2,-36(fp)
 801c700:	10800530 	cmpltui	r2,r2,20
 801c704:	1000021e 	bne	r2,zero,801c710 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 801c708:	00800a84 	movi	r2,42
 801c70c:	00006706 	br	801c8ac <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
 801c710:	0005303a 	rdctl	r2,status
 801c714:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c718:	e0fffd17 	ldw	r3,-12(fp)
 801c71c:	00bfff84 	movi	r2,-2
 801c720:	1884703a 	and	r2,r3,r2
 801c724:	1001703a 	wrctl	status,r2
  return context;
 801c728:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 801c72c:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 801c730:	e0bff703 	ldbu	r2,-36(fp)
 801c734:	100690ba 	slli	r3,r2,2
 801c738:	008201b4 	movhi	r2,2054
 801c73c:	1885883a 	add	r2,r3,r2
 801c740:	10bc0017 	ldw	r2,-4096(r2)
 801c744:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
 801c748:	e0bffe17 	ldw	r2,-8(fp)
 801c74c:	1000071e 	bne	r2,zero,801c76c <OSTimeDlyResume+0x8c>
 801c750:	e0bfff17 	ldw	r2,-4(fp)
 801c754:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801c758:	e0bffc17 	ldw	r2,-16(fp)
 801c75c:	1001703a 	wrctl	status,r2
}
 801c760:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 801c764:	008010c4 	movi	r2,67
 801c768:	00005006 	br	801c8ac <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
 801c76c:	e0bffe17 	ldw	r2,-8(fp)
 801c770:	10800058 	cmpnei	r2,r2,1
 801c774:	1000071e 	bne	r2,zero,801c794 <OSTimeDlyResume+0xb4>
 801c778:	e0bfff17 	ldw	r2,-4(fp)
 801c77c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801c780:	e0bffb17 	ldw	r2,-20(fp)
 801c784:	1001703a 	wrctl	status,r2
}
 801c788:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 801c78c:	008010c4 	movi	r2,67
 801c790:	00004606 	br	801c8ac <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 801c794:	e0bffe17 	ldw	r2,-8(fp)
 801c798:	10800b8b 	ldhu	r2,46(r2)
 801c79c:	10bfffcc 	andi	r2,r2,65535
 801c7a0:	1000071e 	bne	r2,zero,801c7c0 <OSTimeDlyResume+0xe0>
 801c7a4:	e0bfff17 	ldw	r2,-4(fp)
 801c7a8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801c7ac:	e0bffa17 	ldw	r2,-24(fp)
 801c7b0:	1001703a 	wrctl	status,r2
}
 801c7b4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 801c7b8:	00801404 	movi	r2,80
 801c7bc:	00003b06 	br	801c8ac <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 801c7c0:	e0bffe17 	ldw	r2,-8(fp)
 801c7c4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 801c7c8:	e0bffe17 	ldw	r2,-8(fp)
 801c7cc:	10800c03 	ldbu	r2,48(r2)
 801c7d0:	10803fcc 	andi	r2,r2,255
 801c7d4:	10800dcc 	andi	r2,r2,55
 801c7d8:	10000b26 	beq	r2,zero,801c808 <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 801c7dc:	e0bffe17 	ldw	r2,-8(fp)
 801c7e0:	10c00c03 	ldbu	r3,48(r2)
 801c7e4:	00bff204 	movi	r2,-56
 801c7e8:	1884703a 	and	r2,r3,r2
 801c7ec:	1007883a 	mov	r3,r2
 801c7f0:	e0bffe17 	ldw	r2,-8(fp)
 801c7f4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 801c7f8:	e0bffe17 	ldw	r2,-8(fp)
 801c7fc:	00c00044 	movi	r3,1
 801c800:	10c00c45 	stb	r3,49(r2)
 801c804:	00000206 	br	801c810 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 801c808:	e0bffe17 	ldw	r2,-8(fp)
 801c80c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 801c810:	e0bffe17 	ldw	r2,-8(fp)
 801c814:	10800c03 	ldbu	r2,48(r2)
 801c818:	10803fcc 	andi	r2,r2,255
 801c81c:	1080020c 	andi	r2,r2,8
 801c820:	10001c1e 	bne	r2,zero,801c894 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 801c824:	e0bffe17 	ldw	r2,-8(fp)
 801c828:	10c00d83 	ldbu	r3,54(r2)
 801c82c:	d0a07203 	ldbu	r2,-32312(gp)
 801c830:	1884b03a 	or	r2,r3,r2
 801c834:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 801c838:	e0bffe17 	ldw	r2,-8(fp)
 801c83c:	10800d03 	ldbu	r2,52(r2)
 801c840:	10c03fcc 	andi	r3,r2,255
 801c844:	d0a07244 	addi	r2,gp,-32311
 801c848:	1885883a 	add	r2,r3,r2
 801c84c:	11000003 	ldbu	r4,0(r2)
 801c850:	e0bffe17 	ldw	r2,-8(fp)
 801c854:	10800d43 	ldbu	r2,53(r2)
 801c858:	e0fffe17 	ldw	r3,-8(fp)
 801c85c:	18c00d03 	ldbu	r3,52(r3)
 801c860:	18c03fcc 	andi	r3,r3,255
 801c864:	2084b03a 	or	r2,r4,r2
 801c868:	1009883a 	mov	r4,r2
 801c86c:	d0a07244 	addi	r2,gp,-32311
 801c870:	1885883a 	add	r2,r3,r2
 801c874:	11000005 	stb	r4,0(r2)
 801c878:	e0bfff17 	ldw	r2,-4(fp)
 801c87c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801c880:	e0bff917 	ldw	r2,-28(fp)
 801c884:	1001703a 	wrctl	status,r2
}
 801c888:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 801c88c:	80169940 	call	8016994 <OS_Sched>
 801c890:	00000506 	br	801c8a8 <OSTimeDlyResume+0x1c8>
 801c894:	e0bfff17 	ldw	r2,-4(fp)
 801c898:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801c89c:	e0bff817 	ldw	r2,-32(fp)
 801c8a0:	1001703a 	wrctl	status,r2
}
 801c8a4:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 801c8a8:	0005883a 	mov	r2,zero
}
 801c8ac:	e037883a 	mov	sp,fp
 801c8b0:	dfc00117 	ldw	ra,4(sp)
 801c8b4:	df000017 	ldw	fp,0(sp)
 801c8b8:	dec00204 	addi	sp,sp,8
 801c8bc:	f800283a 	ret

0801c8c0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 801c8c0:	defffb04 	addi	sp,sp,-20
 801c8c4:	df000415 	stw	fp,16(sp)
 801c8c8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801c8cc:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 801c8d0:	0005303a 	rdctl	r2,status
 801c8d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c8d8:	e0fffc17 	ldw	r3,-16(fp)
 801c8dc:	00bfff84 	movi	r2,-2
 801c8e0:	1884703a 	and	r2,r3,r2
 801c8e4:	1001703a 	wrctl	status,r2
  return context;
 801c8e8:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
 801c8ec:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
 801c8f0:	d0a07617 	ldw	r2,-32296(gp)
 801c8f4:	e0bffe15 	stw	r2,-8(fp)
 801c8f8:	e0bfff17 	ldw	r2,-4(fp)
 801c8fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801c900:	e0bffd17 	ldw	r2,-12(fp)
 801c904:	1001703a 	wrctl	status,r2
}
 801c908:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
 801c90c:	e0bffe17 	ldw	r2,-8(fp)
}
 801c910:	e037883a 	mov	sp,fp
 801c914:	df000017 	ldw	fp,0(sp)
 801c918:	dec00104 	addi	sp,sp,4
 801c91c:	f800283a 	ret

0801c920 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 801c920:	defffb04 	addi	sp,sp,-20
 801c924:	df000415 	stw	fp,16(sp)
 801c928:	df000404 	addi	fp,sp,16
 801c92c:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801c930:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 801c934:	0005303a 	rdctl	r2,status
 801c938:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c93c:	e0fffd17 	ldw	r3,-12(fp)
 801c940:	00bfff84 	movi	r2,-2
 801c944:	1884703a 	and	r2,r3,r2
 801c948:	1001703a 	wrctl	status,r2
  return context;
 801c94c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 801c950:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
 801c954:	e0bffc17 	ldw	r2,-16(fp)
 801c958:	d0a07615 	stw	r2,-32296(gp)
 801c95c:	e0bfff17 	ldw	r2,-4(fp)
 801c960:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 801c964:	e0bffe17 	ldw	r2,-8(fp)
 801c968:	1001703a 	wrctl	status,r2
}
 801c96c:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
 801c970:	0001883a 	nop
 801c974:	e037883a 	mov	sp,fp
 801c978:	df000017 	ldw	fp,0(sp)
 801c97c:	dec00104 	addi	sp,sp,4
 801c980:	f800283a 	ret

0801c984 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801c984:	defffd04 	addi	sp,sp,-12
 801c988:	dfc00215 	stw	ra,8(sp)
 801c98c:	df000115 	stw	fp,4(sp)
 801c990:	df000104 	addi	fp,sp,4
 801c994:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801c998:	d1604004 	addi	r5,gp,-32512
 801c99c:	e13fff17 	ldw	r4,-4(fp)
 801c9a0:	803e9b40 	call	803e9b4 <alt_dev_llist_insert>
}
 801c9a4:	e037883a 	mov	sp,fp
 801c9a8:	dfc00117 	ldw	ra,4(sp)
 801c9ac:	df000017 	ldw	fp,0(sp)
 801c9b0:	dec00204 	addi	sp,sp,8
 801c9b4:	f800283a 	ret

0801c9b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 801c9b8:	defffd04 	addi	sp,sp,-12
 801c9bc:	dfc00215 	stw	ra,8(sp)
 801c9c0:	df000115 	stw	fp,4(sp)
 801c9c4:	df000104 	addi	fp,sp,4
 801c9c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 801c9cc:	803fb4c0 	call	803fb4c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801c9d0:	00800044 	movi	r2,1
 801c9d4:	1001703a 	wrctl	status,r2
}
 801c9d8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 801c9dc:	0001883a 	nop
 801c9e0:	e037883a 	mov	sp,fp
 801c9e4:	dfc00117 	ldw	ra,4(sp)
 801c9e8:	df000017 	ldw	fp,0(sp)
 801c9ec:	dec00204 	addi	sp,sp,8
 801c9f0:	f800283a 	ret

0801c9f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801c9f4:	defffa04 	addi	sp,sp,-24
 801c9f8:	dfc00515 	stw	ra,20(sp)
 801c9fc:	df000415 	stw	fp,16(sp)
 801ca00:	df000404 	addi	fp,sp,16
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 801ca04:	01c01904 	movi	r7,100
 801ca08:	01800104 	movi	r6,4
 801ca0c:	000b883a 	mov	r5,zero
 801ca10:	01060034 	movhi	r4,6144
 801ca14:	210fc004 	addi	r4,r4,16128
 801ca18:	801f6880 	call	801f688 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_C0, i2c_ckm_c0);
 801ca1c:	01020174 	movhi	r4,2053
 801ca20:	21160804 	addi	r4,r4,22560
 801ca24:	801ceac0 	call	801ceac <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_C1, i2c_ckm_c1);
 801ca28:	01020174 	movhi	r4,2053
 801ca2c:	21161704 	addi	r4,r4,22620
 801ca30:	801ceac0 	call	801ceac <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_ID, i2c_ckm_id);
 801ca34:	01020174 	movhi	r4,2053
 801ca38:	21162604 	addi	r4,r4,22680
 801ca3c:	801ceac0 	call	801ceac <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_RXM_CTRL, i2c_rxm_ctrl);
 801ca40:	01020174 	movhi	r4,2053
 801ca44:	21163504 	addi	r4,r4,22740
 801ca48:	801ceac0 	call	801ceac <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_RXM_ID, i2c_rxm_id);
 801ca4c:	01020174 	movhi	r4,2053
 801ca50:	21164404 	addi	r4,r4,22800
 801ca54:	801ceac0 	call	801ceac <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 801ca58:	018000c4 	movi	r6,3
 801ca5c:	000b883a 	mov	r5,zero
 801ca60:	01020174 	movhi	r4,2053
 801ca64:	21165d04 	addi	r4,r4,22900
 801ca68:	801ea100 	call	801ea10 <altera_avalon_jtag_uart_init>
 801ca6c:	01020174 	movhi	r4,2053
 801ca70:	21165304 	addi	r4,r4,22860
 801ca74:	801c9840 	call	801c984 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_RXM, spi_rxm);
 801ca78:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 801ca7c:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETH_TSE, eth_tse);
 801ca80:	e03fff15 	stw	zero,-4(fp)
 801ca84:	00800044 	movi	r2,1
 801ca88:	e0bffe15 	stw	r2,-8(fp)
 801ca8c:	e0bffe17 	ldw	r2,-8(fp)
 801ca90:	00800216 	blt	zero,r2,801ca9c <alt_sys_init+0xa8>
 801ca94:	00800044 	movi	r2,1
 801ca98:	e0bffe15 	stw	r2,-8(fp)
 801ca9c:	e03fff15 	stw	zero,-4(fp)
 801caa0:	00004f06 	br	801cbe0 <alt_sys_init+0x1ec>
 801caa4:	e0bfff17 	ldw	r2,-4(fp)
 801caa8:	10c00724 	muli	r3,r2,28
 801caac:	008201b4 	movhi	r2,2054
 801cab0:	1885883a 	add	r2,r3,r2
 801cab4:	103c1515 	stw	zero,-4012(r2)
 801cab8:	e0bfff17 	ldw	r2,-4(fp)
 801cabc:	10c00724 	muli	r3,r2,28
 801cac0:	008201b4 	movhi	r2,2054
 801cac4:	1885883a 	add	r2,r3,r2
 801cac8:	103c1615 	stw	zero,-4008(r2)
 801cacc:	d0e02417 	ldw	r3,-32624(gp)
 801cad0:	e0bfff17 	ldw	r2,-4(fp)
 801cad4:	11000724 	muli	r4,r2,28
 801cad8:	008201b4 	movhi	r2,2054
 801cadc:	2085883a 	add	r2,r4,r2
 801cae0:	10fc1715 	stw	r3,-4004(r2)
 801cae4:	e0bfff17 	ldw	r2,-4(fp)
 801cae8:	11000724 	muli	r4,r2,28
 801caec:	00c200b4 	movhi	r3,2050
 801caf0:	18dcaa04 	addi	r3,r3,29352
 801caf4:	008201b4 	movhi	r2,2054
 801caf8:	2085883a 	add	r2,r4,r2
 801cafc:	10fc1815 	stw	r3,-4000(r2)
 801cb00:	e0bfff17 	ldw	r2,-4(fp)
 801cb04:	10c00724 	muli	r3,r2,28
 801cb08:	008201b4 	movhi	r2,2054
 801cb0c:	10bc1504 	addi	r2,r2,-4012
 801cb10:	1885883a 	add	r2,r3,r2
 801cb14:	d0e02a04 	addi	r3,gp,-32600
 801cb18:	e0fffd15 	stw	r3,-12(fp)
 801cb1c:	e0bffc15 	stw	r2,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801cb20:	e0bffc17 	ldw	r2,-16(fp)
 801cb24:	e0fffd17 	ldw	r3,-12(fp)
 801cb28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801cb2c:	e0bffd17 	ldw	r2,-12(fp)
 801cb30:	10c00017 	ldw	r3,0(r2)
 801cb34:	e0bffc17 	ldw	r2,-16(fp)
 801cb38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801cb3c:	e0bffd17 	ldw	r2,-12(fp)
 801cb40:	10800017 	ldw	r2,0(r2)
 801cb44:	e0fffc17 	ldw	r3,-16(fp)
 801cb48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801cb4c:	e0bffd17 	ldw	r2,-12(fp)
 801cb50:	e0fffc17 	ldw	r3,-16(fp)
 801cb54:	10c00015 	stw	r3,0(r2)
}
 801cb58:	0001883a 	nop
 801cb5c:	d0a07b03 	ldbu	r2,-32276(gp)
 801cb60:	11003fcc 	andi	r4,r2,255
 801cb64:	e0bfff17 	ldw	r2,-4(fp)
 801cb68:	10c00724 	muli	r3,r2,28
 801cb6c:	008201b4 	movhi	r2,2054
 801cb70:	10bc1504 	addi	r2,r2,-4012
 801cb74:	1887883a 	add	r3,r3,r2
 801cb78:	21000324 	muli	r4,r4,12
 801cb7c:	008201b4 	movhi	r2,2054
 801cb80:	2085883a 	add	r2,r4,r2
 801cb84:	10fc5915 	stw	r3,-3740(r2)
 801cb88:	d0a07b03 	ldbu	r2,-32276(gp)
 801cb8c:	10803fcc 	andi	r2,r2,255
 801cb90:	11000324 	muli	r4,r2,12
 801cb94:	00c60034 	movhi	r3,6144
 801cb98:	18ce0004 	addi	r3,r3,14336
 801cb9c:	008201b4 	movhi	r2,2054
 801cba0:	2085883a 	add	r2,r4,r2
 801cba4:	10fc5a15 	stw	r3,-3736(r2)
 801cba8:	d0a07b03 	ldbu	r2,-32276(gp)
 801cbac:	10803fcc 	andi	r2,r2,255
 801cbb0:	e0ffff17 	ldw	r3,-4(fp)
 801cbb4:	1809883a 	mov	r4,r3
 801cbb8:	10c00324 	muli	r3,r2,12
 801cbbc:	008201b4 	movhi	r2,2054
 801cbc0:	1885883a 	add	r2,r3,r2
 801cbc4:	113c5b05 	stb	r4,-3732(r2)
 801cbc8:	d0a07b03 	ldbu	r2,-32276(gp)
 801cbcc:	10800044 	addi	r2,r2,1
 801cbd0:	d0a07b05 	stb	r2,-32276(gp)
 801cbd4:	e0bfff17 	ldw	r2,-4(fp)
 801cbd8:	10800044 	addi	r2,r2,1
 801cbdc:	e0bfff15 	stw	r2,-4(fp)
 801cbe0:	e0ffff17 	ldw	r3,-4(fp)
 801cbe4:	e0bffe17 	ldw	r2,-8(fp)
 801cbe8:	18bfae16 	blt	r3,r2,801caa4 <alt_sys_init+0xb0>
    ALTERA_GENERIC_QUAD_SPI_CONTROLLER_INIT ( EXT_FLASH, ext_flash);
 801cbec:	01020174 	movhi	r4,2053
 801cbf0:	211a6e04 	addi	r4,r4,27064
 801cbf4:	8024dc40 	call	8024dc4 <altera_qspi_controller_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_RX, msgdma_rx);
 801cbf8:	00820174 	movhi	r2,2053
 801cbfc:	10daaf17 	ldw	r3,27324(r2)
 801cc00:	00820174 	movhi	r2,2053
 801cc04:	109ab017 	ldw	r2,27328(r2)
 801cc08:	100d883a 	mov	r6,r2
 801cc0c:	180b883a 	mov	r5,r3
 801cc10:	01020174 	movhi	r4,2053
 801cc14:	211aa804 	addi	r4,r4,27296
 801cc18:	8026fbc0 	call	8026fbc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_TX, msgdma_tx);
 801cc1c:	00820174 	movhi	r2,2053
 801cc20:	10dacb17 	ldw	r3,27436(r2)
 801cc24:	00820174 	movhi	r2,2053
 801cc28:	109acc17 	ldw	r2,27440(r2)
 801cc2c:	100d883a 	mov	r6,r2
 801cc30:	180b883a 	mov	r5,r3
 801cc34:	01020174 	movhi	r4,2053
 801cc38:	211ac404 	addi	r4,r4,27408
 801cc3c:	8026fbc0 	call	8026fbc <alt_msgdma_init>
}
 801cc40:	0001883a 	nop
 801cc44:	e037883a 	mov	sp,fp
 801cc48:	dfc00117 	ldw	ra,4(sp)
 801cc4c:	df000017 	ldw	fp,0(sp)
 801cc50:	dec00204 	addi	sp,sp,8
 801cc54:	f800283a 	ret

0801cc58 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 801cc58:	defff904 	addi	sp,sp,-28
 801cc5c:	dfc00615 	stw	ra,24(sp)
 801cc60:	df000515 	stw	fp,20(sp)
 801cc64:	df000504 	addi	fp,sp,20
 801cc68:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
 801cc6c:	008000b4 	movhi	r2,2
 801cc70:	10a1a804 	addi	r2,r2,-31072
 801cc74:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 801cc78:	e0bffb17 	ldw	r2,-20(fp)
 801cc7c:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 801cc80:	e0bffe17 	ldw	r2,-8(fp)
 801cc84:	10800717 	ldw	r2,28(r2)
 801cc88:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 801cc8c:	e0bffd17 	ldw	r2,-12(fp)
 801cc90:	10800217 	ldw	r2,8(r2)
 801cc94:	10800098 	cmpnei	r2,r2,2
 801cc98:	1000251e 	bne	r2,zero,801cd30 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 801cc9c:	e0bffd17 	ldw	r2,-12(fp)
 801cca0:	10c00017 	ldw	r3,0(r2)
 801cca4:	e0bffd17 	ldw	r2,-12(fp)
 801cca8:	10800117 	ldw	r2,4(r2)
 801ccac:	e13ffc04 	addi	r4,fp,-16
 801ccb0:	200f883a 	mov	r7,r4
 801ccb4:	100d883a 	mov	r6,r2
 801ccb8:	180b883a 	mov	r5,r3
 801ccbc:	e13ffe17 	ldw	r4,-8(fp)
 801ccc0:	801d44c0 	call	801d44c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 801ccc4:	e0bffd17 	ldw	r2,-12(fp)
 801ccc8:	10c00117 	ldw	r3,4(r2)
 801cccc:	e0bffc17 	ldw	r2,-16(fp)
 801ccd0:	1887c83a 	sub	r3,r3,r2
 801ccd4:	e0bffd17 	ldw	r2,-12(fp)
 801ccd8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 801ccdc:	e0bffd17 	ldw	r2,-12(fp)
 801cce0:	10c00017 	ldw	r3,0(r2)
 801cce4:	e0bffc17 	ldw	r2,-16(fp)
 801cce8:	1887883a 	add	r3,r3,r2
 801ccec:	e0bffd17 	ldw	r2,-12(fp)
 801ccf0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 801ccf4:	e0bffd17 	ldw	r2,-12(fp)
 801ccf8:	10800117 	ldw	r2,4(r2)
 801ccfc:	10000c26 	beq	r2,zero,801cd30 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801cd00:	01400704 	movi	r5,28
 801cd04:	e13ffe17 	ldw	r4,-8(fp)
 801cd08:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 801cd0c:	01400084 	movi	r5,2
 801cd10:	e13ffe17 	ldw	r4,-8(fp)
 801cd14:	801e6a00 	call	801e6a0 <alt_avalon_i2c_int_enable>
 801cd18:	00000e06 	br	801cd54 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 801cd1c:	e0bfff17 	ldw	r2,-4(fp)
 801cd20:	10bfffc4 	addi	r2,r2,-1
 801cd24:	e0bfff15 	stw	r2,-4(fp)
 801cd28:	e0bfff17 	ldw	r2,-4(fp)
 801cd2c:	10000426 	beq	r2,zero,801cd40 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 801cd30:	e13ffe17 	ldw	r4,-8(fp)
 801cd34:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801cd38:	103ff81e 	bne	r2,zero,801cd1c <optional_irq_callback+0xc4>
 801cd3c:	00000106 	br	801cd44 <optional_irq_callback+0xec>
      {
         break;
 801cd40:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 801cd44:	e13ffe17 	ldw	r4,-8(fp)
 801cd48:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 801cd4c:	e0bffd17 	ldw	r2,-12(fp)
 801cd50:	10000215 	stw	zero,8(r2)
}
 801cd54:	e037883a 	mov	sp,fp
 801cd58:	dfc00117 	ldw	ra,4(sp)
 801cd5c:	df000017 	ldw	fp,0(sp)
 801cd60:	dec00204 	addi	sp,sp,8
 801cd64:	f800283a 	ret

0801cd68 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 801cd68:	defffc04 	addi	sp,sp,-16
 801cd6c:	dfc00315 	stw	ra,12(sp)
 801cd70:	df000215 	stw	fp,8(sp)
 801cd74:	df000204 	addi	fp,sp,8
 801cd78:	e13fff15 	stw	r4,-4(fp)
 801cd7c:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
 801cd80:	e0bffe17 	ldw	r2,-8(fp)
 801cd84:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 801cd88:	e1fffe17 	ldw	r7,-8(fp)
 801cd8c:	000d883a 	mov	r6,zero
 801cd90:	014200b4 	movhi	r5,2050
 801cd94:	29731604 	addi	r5,r5,-13224
 801cd98:	e13fff17 	ldw	r4,-4(fp)
 801cd9c:	801ce580 	call	801ce58 <alt_avalon_i2c_register_callback>
}
 801cda0:	0001883a 	nop
 801cda4:	e037883a 	mov	sp,fp
 801cda8:	dfc00117 	ldw	ra,4(sp)
 801cdac:	df000017 	ldw	fp,0(sp)
 801cdb0:	dec00204 	addi	sp,sp,8
 801cdb4:	f800283a 	ret

0801cdb8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 801cdb8:	defff904 	addi	sp,sp,-28
 801cdbc:	dfc00615 	stw	ra,24(sp)
 801cdc0:	df000515 	stw	fp,20(sp)
 801cdc4:	df000504 	addi	fp,sp,20
 801cdc8:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 801cdcc:	e0bffb17 	ldw	r2,-20(fp)
 801cdd0:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 801cdd4:	014007c4 	movi	r5,31
 801cdd8:	e13fff17 	ldw	r4,-4(fp)
 801cddc:	801e6340 	call	801e634 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801cde0:	01400704 	movi	r5,28
 801cde4:	e13fff17 	ldw	r4,-4(fp)
 801cde8:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 801cdec:	e0bfff17 	ldw	r2,-4(fp)
 801cdf0:	10800617 	ldw	r2,24(r2)
 801cdf4:	10001226 	beq	r2,zero,801ce40 <alt_avalon_i2c_irq+0x88>
  NIOS2_READ_STATUS (context);
 801cdf8:	0005303a 	rdctl	r2,status
 801cdfc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ce00:	e0fffc17 	ldw	r3,-16(fp)
 801ce04:	00bfff84 	movi	r2,-2
 801ce08:	1884703a 	and	r2,r3,r2
 801ce0c:	1001703a 	wrctl	status,r2
  return context;
 801ce10:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 801ce14:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
 801ce18:	e0bfff17 	ldw	r2,-4(fp)
 801ce1c:	10800617 	ldw	r2,24(r2)
 801ce20:	e13fff17 	ldw	r4,-4(fp)
 801ce24:	103ee83a 	callr	r2
 801ce28:	e0bffe17 	ldw	r2,-8(fp)
 801ce2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801ce30:	e0bffd17 	ldw	r2,-12(fp)
 801ce34:	1001703a 	wrctl	status,r2
}
 801ce38:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    return;
 801ce3c:	0001883a 	nop
 801ce40:	0001883a 	nop
}
 801ce44:	e037883a 	mov	sp,fp
 801ce48:	dfc00117 	ldw	ra,4(sp)
 801ce4c:	df000017 	ldw	fp,0(sp)
 801ce50:	dec00204 	addi	sp,sp,8
 801ce54:	f800283a 	ret

0801ce58 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 801ce58:	defffb04 	addi	sp,sp,-20
 801ce5c:	df000415 	stw	fp,16(sp)
 801ce60:	df000404 	addi	fp,sp,16
 801ce64:	e13fff15 	stw	r4,-4(fp)
 801ce68:	e17ffe15 	stw	r5,-8(fp)
 801ce6c:	e1bffd15 	stw	r6,-12(fp)
 801ce70:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 801ce74:	e0bfff17 	ldw	r2,-4(fp)
 801ce78:	e0fffe17 	ldw	r3,-8(fp)
 801ce7c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 801ce80:	e0bfff17 	ldw	r2,-4(fp)
 801ce84:	e0fffc17 	ldw	r3,-16(fp)
 801ce88:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 801ce8c:	e0bfff17 	ldw	r2,-4(fp)
 801ce90:	e0fffd17 	ldw	r3,-12(fp)
 801ce94:	10c00815 	stw	r3,32(r2)

    return ;
 801ce98:	0001883a 	nop
}
 801ce9c:	e037883a 	mov	sp,fp
 801cea0:	df000017 	ldw	fp,0(sp)
 801cea4:	dec00104 	addi	sp,sp,4
 801cea8:	f800283a 	ret

0801ceac <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 801ceac:	defff504 	addi	sp,sp,-44
 801ceb0:	dfc00a15 	stw	ra,40(sp)
 801ceb4:	df000915 	stw	fp,36(sp)
 801ceb8:	df000904 	addi	fp,sp,36
 801cebc:	e13ff815 	stw	r4,-32(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 801cec0:	e13ff817 	ldw	r4,-32(fp)
 801cec4:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 801cec8:	014007c4 	movi	r5,31
 801cecc:	e13ff817 	ldw	r4,-32(fp)
 801ced0:	801e6340 	call	801e634 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801ced4:	01400704 	movi	r5,28
 801ced8:	e13ff817 	ldw	r4,-32(fp)
 801cedc:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 801cee0:	014000c4 	movi	r5,3
 801cee4:	e13ff817 	ldw	r4,-32(fp)
 801cee8:	801e8480 	call	801e848 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 801ceec:	014000c4 	movi	r5,3
 801cef0:	e13ff817 	ldw	r4,-32(fp)
 801cef4:	801e7980 	call	801e798 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 801cef8:	e03ffa15 	stw	zero,-24(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 801cefc:	e03ff915 	stw	zero,-28(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 801cf00:	e0bff904 	addi	r2,fp,-28
 801cf04:	018000b4 	movhi	r6,2
 801cf08:	31a1a804 	addi	r6,r6,-31072
 801cf0c:	100b883a 	mov	r5,r2
 801cf10:	e13ff817 	ldw	r4,-32(fp)
 801cf14:	801d30c0 	call	801d30c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 801cf18:	e0bff904 	addi	r2,fp,-28
 801cf1c:	100b883a 	mov	r5,r2
 801cf20:	e13ff817 	ldw	r4,-32(fp)
 801cf24:	801d1ac0 	call	801d1ac <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 801cf28:	d1602504 	addi	r5,gp,-32620
 801cf2c:	e13ff817 	ldw	r4,-32(fp)
 801cf30:	803e9b40 	call	803e9b4 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 801cf34:	e0bff817 	ldw	r2,-32(fp)
 801cf38:	10800e04 	addi	r2,r2,56
 801cf3c:	e0bffe15 	stw	r2,-8(fp)
 801cf40:	00800044 	movi	r2,1
 801cf44:	e0bffd8d 	sth	r2,-10(fp)
  *sem = OSSemCreate (value);
 801cf48:	e0bffd8b 	ldhu	r2,-10(fp)
 801cf4c:	1009883a 	mov	r4,r2
 801cf50:	801a3440 	call	801a344 <OSSemCreate>
 801cf54:	1007883a 	mov	r3,r2
 801cf58:	e0bffe17 	ldw	r2,-8(fp)
 801cf5c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 801cf60:	e0bffe17 	ldw	r2,-8(fp)
 801cf64:	10800017 	ldw	r2,0(r2)
 801cf68:	10000226 	beq	r2,zero,801cf74 <alt_avalon_i2c_init+0xc8>
 801cf6c:	0005883a 	mov	r2,zero
 801cf70:	00000106 	br	801cf78 <alt_avalon_i2c_init+0xcc>
 801cf74:	00bfffc4 	movi	r2,-1
 801cf78:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
 801cf7c:	e0bfff17 	ldw	r2,-4(fp)
 801cf80:	10000c1e 	bne	r2,zero,801cfb4 <alt_avalon_i2c_init+0x108>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 801cf84:	e0bff817 	ldw	r2,-32(fp)
 801cf88:	10c00417 	ldw	r3,16(r2)
 801cf8c:	e0bff817 	ldw	r2,-32(fp)
 801cf90:	10800517 	ldw	r2,20(r2)
 801cf94:	d8000015 	stw	zero,0(sp)
 801cf98:	e1fff817 	ldw	r7,-32(fp)
 801cf9c:	018200b4 	movhi	r6,2050
 801cfa0:	31b36e04 	addi	r6,r6,-12872
 801cfa4:	100b883a 	mov	r5,r2
 801cfa8:	1809883a 	mov	r4,r3
 801cfac:	803ec700 	call	803ec70 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 801cfb0:	00000406 	br	801cfc4 <alt_avalon_i2c_init+0x118>
        alt_printf("failed to create semaphores\n");
 801cfb4:	01020174 	movhi	r4,2053
 801cfb8:	2102c604 	addi	r4,r4,2840
 801cfbc:	803f27c0 	call	803f27c <alt_printf>
    return;
 801cfc0:	0001883a 	nop

}
 801cfc4:	e037883a 	mov	sp,fp
 801cfc8:	dfc00117 	ldw	ra,4(sp)
 801cfcc:	df000017 	ldw	fp,0(sp)
 801cfd0:	dec00204 	addi	sp,sp,8
 801cfd4:	f800283a 	ret

0801cfd8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 801cfd8:	defffc04 	addi	sp,sp,-16
 801cfdc:	dfc00315 	stw	ra,12(sp)
 801cfe0:	df000215 	stw	fp,8(sp)
 801cfe4:	df000204 	addi	fp,sp,8
 801cfe8:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 801cfec:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 801cff0:	d1602504 	addi	r5,gp,-32620
 801cff4:	e13ffe17 	ldw	r4,-8(fp)
 801cff8:	803eb240 	call	803eb24 <alt_find_dev>
 801cffc:	e0bfff15 	stw	r2,-4(fp)

    return dev;
 801d000:	e0bfff17 	ldw	r2,-4(fp)
}
 801d004:	e037883a 	mov	sp,fp
 801d008:	dfc00117 	ldw	ra,4(sp)
 801d00c:	df000017 	ldw	fp,0(sp)
 801d010:	dec00204 	addi	sp,sp,8
 801d014:	f800283a 	ret

0801d018 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801d018:	defffc04 	addi	sp,sp,-16
 801d01c:	df000315 	stw	fp,12(sp)
 801d020:	df000304 	addi	fp,sp,12
 801d024:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 801d028:	e0bffd17 	ldw	r2,-12(fp)
 801d02c:	10800717 	ldw	r2,28(r2)
 801d030:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 801d034:	e0bffd17 	ldw	r2,-12(fp)
 801d038:	10800317 	ldw	r2,12(r2)
 801d03c:	10800204 	addi	r2,r2,8
 801d040:	10800037 	ldwio	r2,0(r2)
 801d044:	1080004c 	andi	r2,r2,1
 801d048:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 801d04c:	e0bffe17 	ldw	r2,-8(fp)
 801d050:	10000226 	beq	r2,zero,801d05c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 801d054:	00bffe44 	movi	r2,-7
 801d058:	00001106 	br	801d0a0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 801d05c:	e0bffd17 	ldw	r2,-12(fp)
 801d060:	10c00617 	ldw	r3,24(r2)
 801d064:	008200b4 	movhi	r2,2050
 801d068:	10b31604 	addi	r2,r2,-13224
 801d06c:	1880021e 	bne	r3,r2,801d078 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 801d070:	e0bfff17 	ldw	r2,-4(fp)
 801d074:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 801d078:	e0bffd17 	ldw	r2,-12(fp)
 801d07c:	10800317 	ldw	r2,12(r2)
 801d080:	10800204 	addi	r2,r2,8
 801d084:	e0fffd17 	ldw	r3,-12(fp)
 801d088:	18c00317 	ldw	r3,12(r3)
 801d08c:	18c00204 	addi	r3,r3,8
 801d090:	18c00037 	ldwio	r3,0(r3)
 801d094:	18c00054 	ori	r3,r3,1
 801d098:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 801d09c:	0005883a 	mov	r2,zero
}
 801d0a0:	e037883a 	mov	sp,fp
 801d0a4:	df000017 	ldw	fp,0(sp)
 801d0a8:	dec00104 	addi	sp,sp,4
 801d0ac:	f800283a 	ret

0801d0b0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801d0b0:	defffe04 	addi	sp,sp,-8
 801d0b4:	df000115 	stw	fp,4(sp)
 801d0b8:	df000104 	addi	fp,sp,4
 801d0bc:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 801d0c0:	e0bfff17 	ldw	r2,-4(fp)
 801d0c4:	10800317 	ldw	r2,12(r2)
 801d0c8:	10800204 	addi	r2,r2,8
 801d0cc:	e0ffff17 	ldw	r3,-4(fp)
 801d0d0:	18c00317 	ldw	r3,12(r3)
 801d0d4:	18c00204 	addi	r3,r3,8
 801d0d8:	19000037 	ldwio	r4,0(r3)
 801d0dc:	00ffff84 	movi	r3,-2
 801d0e0:	20c6703a 	and	r3,r4,r3
 801d0e4:	10c00035 	stwio	r3,0(r2)

}
 801d0e8:	0001883a 	nop
 801d0ec:	e037883a 	mov	sp,fp
 801d0f0:	df000017 	ldw	fp,0(sp)
 801d0f4:	dec00104 	addi	sp,sp,4
 801d0f8:	f800283a 	ret

0801d0fc <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 801d0fc:	defffd04 	addi	sp,sp,-12
 801d100:	df000215 	stw	fp,8(sp)
 801d104:	df000204 	addi	fp,sp,8
 801d108:	e13fff15 	stw	r4,-4(fp)
 801d10c:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 801d110:	e0bfff17 	ldw	r2,-4(fp)
 801d114:	10c00d17 	ldw	r3,52(r2)
 801d118:	e0bffe17 	ldw	r2,-8(fp)
 801d11c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 801d120:	e0bfff17 	ldw	r2,-4(fp)
 801d124:	10800317 	ldw	r2,12(r2)
 801d128:	10800204 	addi	r2,r2,8
 801d12c:	10800037 	ldwio	r2,0(r2)
 801d130:	1005d07a 	srai	r2,r2,1
 801d134:	1080004c 	andi	r2,r2,1
 801d138:	1007883a 	mov	r3,r2
 801d13c:	e0bffe17 	ldw	r2,-8(fp)
 801d140:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 801d144:	e0bfff17 	ldw	r2,-4(fp)
 801d148:	10800317 	ldw	r2,12(r2)
 801d14c:	10800904 	addi	r2,r2,36
 801d150:	10800037 	ldwio	r2,0(r2)
 801d154:	1007883a 	mov	r3,r2
 801d158:	e0bffe17 	ldw	r2,-8(fp)
 801d15c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 801d160:	e0bfff17 	ldw	r2,-4(fp)
 801d164:	10800317 	ldw	r2,12(r2)
 801d168:	10800804 	addi	r2,r2,32
 801d16c:	10800037 	ldwio	r2,0(r2)
 801d170:	1007883a 	mov	r3,r2
 801d174:	e0bffe17 	ldw	r2,-8(fp)
 801d178:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 801d17c:	e0bfff17 	ldw	r2,-4(fp)
 801d180:	10800317 	ldw	r2,12(r2)
 801d184:	10800a04 	addi	r2,r2,40
 801d188:	10800037 	ldwio	r2,0(r2)
 801d18c:	1007883a 	mov	r3,r2
 801d190:	e0bffe17 	ldw	r2,-8(fp)
 801d194:	10c0030d 	sth	r3,12(r2)
}
 801d198:	0001883a 	nop
 801d19c:	e037883a 	mov	sp,fp
 801d1a0:	df000017 	ldw	fp,0(sp)
 801d1a4:	dec00104 	addi	sp,sp,4
 801d1a8:	f800283a 	ret

0801d1ac <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 801d1ac:	defffd04 	addi	sp,sp,-12
 801d1b0:	df000215 	stw	fp,8(sp)
 801d1b4:	df000204 	addi	fp,sp,8
 801d1b8:	e13fff15 	stw	r4,-4(fp)
 801d1bc:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 801d1c0:	e0bffe17 	ldw	r2,-8(fp)
 801d1c4:	10c00017 	ldw	r3,0(r2)
 801d1c8:	e0bfff17 	ldw	r2,-4(fp)
 801d1cc:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 801d1d0:	e0bfff17 	ldw	r2,-4(fp)
 801d1d4:	10800317 	ldw	r2,12(r2)
 801d1d8:	10c00204 	addi	r3,r2,8
 801d1dc:	e0bfff17 	ldw	r2,-4(fp)
 801d1e0:	10800317 	ldw	r2,12(r2)
 801d1e4:	10800204 	addi	r2,r2,8
 801d1e8:	10800037 	ldwio	r2,0(r2)
 801d1ec:	1009883a 	mov	r4,r2
 801d1f0:	00bfff44 	movi	r2,-3
 801d1f4:	2088703a 	and	r4,r4,r2
 801d1f8:	e0bffe17 	ldw	r2,-8(fp)
 801d1fc:	10800117 	ldw	r2,4(r2)
 801d200:	1085883a 	add	r2,r2,r2
 801d204:	1080008c 	andi	r2,r2,2
 801d208:	2084b03a 	or	r2,r4,r2
 801d20c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 801d210:	e0bfff17 	ldw	r2,-4(fp)
 801d214:	10800317 	ldw	r2,12(r2)
 801d218:	10800904 	addi	r2,r2,36
 801d21c:	e0fffe17 	ldw	r3,-8(fp)
 801d220:	18c0020b 	ldhu	r3,8(r3)
 801d224:	18ffffcc 	andi	r3,r3,65535
 801d228:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 801d22c:	e0bfff17 	ldw	r2,-4(fp)
 801d230:	10800317 	ldw	r2,12(r2)
 801d234:	10800804 	addi	r2,r2,32
 801d238:	e0fffe17 	ldw	r3,-8(fp)
 801d23c:	18c0028b 	ldhu	r3,10(r3)
 801d240:	18ffffcc 	andi	r3,r3,65535
 801d244:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 801d248:	e0bfff17 	ldw	r2,-4(fp)
 801d24c:	10800317 	ldw	r2,12(r2)
 801d250:	10800a04 	addi	r2,r2,40
 801d254:	e0fffe17 	ldw	r3,-8(fp)
 801d258:	18c0030b 	ldhu	r3,12(r3)
 801d25c:	18ffffcc 	andi	r3,r3,65535
 801d260:	10c00035 	stwio	r3,0(r2)
}
 801d264:	0001883a 	nop
 801d268:	e037883a 	mov	sp,fp
 801d26c:	df000017 	ldw	fp,0(sp)
 801d270:	dec00104 	addi	sp,sp,4
 801d274:	f800283a 	ret

0801d278 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 801d278:	defffb04 	addi	sp,sp,-20
 801d27c:	dfc00415 	stw	ra,16(sp)
 801d280:	df000315 	stw	fp,12(sp)
 801d284:	df000304 	addi	fp,sp,12
 801d288:	e13fff15 	stw	r4,-4(fp)
 801d28c:	e17ffe15 	stw	r5,-8(fp)
 801d290:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 801d294:	e0bffe17 	ldw	r2,-8(fp)
 801d298:	1080028b 	ldhu	r2,10(r2)
 801d29c:	10bfffcc 	andi	r2,r2,65535
 801d2a0:	10000426 	beq	r2,zero,801d2b4 <alt_avalon_i2c_master_config_speed_get+0x3c>
 801d2a4:	e0bffe17 	ldw	r2,-8(fp)
 801d2a8:	1080020b 	ldhu	r2,8(r2)
 801d2ac:	10bfffcc 	andi	r2,r2,65535
 801d2b0:	1000021e 	bne	r2,zero,801d2bc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 801d2b4:	00bfff44 	movi	r2,-3
 801d2b8:	00000f06 	br	801d2f8 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 801d2bc:	e0bfff17 	ldw	r2,-4(fp)
 801d2c0:	11000c17 	ldw	r4,48(r2)
 801d2c4:	e0bffe17 	ldw	r2,-8(fp)
 801d2c8:	1080028b 	ldhu	r2,10(r2)
 801d2cc:	10ffffcc 	andi	r3,r2,65535
 801d2d0:	e0bffe17 	ldw	r2,-8(fp)
 801d2d4:	1080020b 	ldhu	r2,8(r2)
 801d2d8:	10bfffcc 	andi	r2,r2,65535
 801d2dc:	1885883a 	add	r2,r3,r2
 801d2e0:	100b883a 	mov	r5,r2
 801d2e4:	8011fdc0 	call	8011fdc <__udivsi3>
 801d2e8:	1007883a 	mov	r3,r2
 801d2ec:	e0bffd17 	ldw	r2,-12(fp)
 801d2f0:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 801d2f4:	0005883a 	mov	r2,zero
}
 801d2f8:	e037883a 	mov	sp,fp
 801d2fc:	dfc00117 	ldw	ra,4(sp)
 801d300:	df000017 	ldw	fp,0(sp)
 801d304:	dec00204 	addi	sp,sp,8
 801d308:	f800283a 	ret

0801d30c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 801d30c:	defff904 	addi	sp,sp,-28
 801d310:	dfc00615 	stw	ra,24(sp)
 801d314:	df000515 	stw	fp,20(sp)
 801d318:	df000504 	addi	fp,sp,20
 801d31c:	e13ffd15 	stw	r4,-12(fp)
 801d320:	e17ffc15 	stw	r5,-16(fp)
 801d324:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 801d328:	e0fffb17 	ldw	r3,-20(fp)
 801d32c:	008001b4 	movhi	r2,6
 801d330:	1086a004 	addi	r2,r2,6784
 801d334:	10c00436 	bltu	r2,r3,801d348 <alt_avalon_i2c_master_config_speed_set+0x3c>
 801d338:	e0bffb17 	ldw	r2,-20(fp)
 801d33c:	10000226 	beq	r2,zero,801d348 <alt_avalon_i2c_master_config_speed_set+0x3c>
 801d340:	e0bffb17 	ldw	r2,-20(fp)
 801d344:	1000021e 	bne	r2,zero,801d350 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 801d348:	00bfff04 	movi	r2,-4
 801d34c:	00002906 	br	801d3f4 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 801d350:	e0bffd17 	ldw	r2,-12(fp)
 801d354:	10c00c17 	ldw	r3,48(r2)
 801d358:	e0bffb17 	ldw	r2,-20(fp)
 801d35c:	1085883a 	add	r2,r2,r2
 801d360:	100b883a 	mov	r5,r2
 801d364:	1809883a 	mov	r4,r3
 801d368:	8011fdc0 	call	8011fdc <__udivsi3>
 801d36c:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 801d370:	e0bfff17 	ldw	r2,-4(fp)
 801d374:	10800f04 	addi	r2,r2,60
 801d378:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 801d37c:	e0bfff17 	ldw	r2,-4(fp)
 801d380:	10bff104 	addi	r2,r2,-60
 801d384:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 801d388:	e0fffb17 	ldw	r3,-20(fp)
 801d38c:	008000b4 	movhi	r2,2
 801d390:	10a1a804 	addi	r2,r2,-31072
 801d394:	10c0042e 	bgeu	r2,r3,801d3a8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 801d398:	e0bffc17 	ldw	r2,-16(fp)
 801d39c:	00c00044 	movi	r3,1
 801d3a0:	10c00115 	stw	r3,4(r2)
 801d3a4:	00000206 	br	801d3b0 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 801d3a8:	e0bffc17 	ldw	r2,-16(fp)
 801d3ac:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 801d3b0:	e0bfff17 	ldw	r2,-4(fp)
 801d3b4:	1007883a 	mov	r3,r2
 801d3b8:	e0bffc17 	ldw	r2,-16(fp)
 801d3bc:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 801d3c0:	e0bffe17 	ldw	r2,-8(fp)
 801d3c4:	1007883a 	mov	r3,r2
 801d3c8:	e0bffc17 	ldw	r2,-16(fp)
 801d3cc:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 801d3d0:	e0bfff17 	ldw	r2,-4(fp)
 801d3d4:	1007883a 	mov	r3,r2
 801d3d8:	e0bfff17 	ldw	r2,-4(fp)
 801d3dc:	1004d07a 	srli	r2,r2,1
 801d3e0:	1885c83a 	sub	r2,r3,r2
 801d3e4:	1007883a 	mov	r3,r2
 801d3e8:	e0bffc17 	ldw	r2,-16(fp)
 801d3ec:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 801d3f0:	0005883a 	mov	r2,zero

}
 801d3f4:	e037883a 	mov	sp,fp
 801d3f8:	dfc00117 	ldw	ra,4(sp)
 801d3fc:	df000017 	ldw	fp,0(sp)
 801d400:	dec00204 	addi	sp,sp,8
 801d404:	f800283a 	ret

0801d408 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801d408:	defffe04 	addi	sp,sp,-8
 801d40c:	df000115 	stw	fp,4(sp)
 801d410:	df000104 	addi	fp,sp,4
 801d414:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 801d418:	e0bfff17 	ldw	r2,-4(fp)
 801d41c:	10800317 	ldw	r2,12(r2)
 801d420:	10800504 	addi	r2,r2,20
 801d424:	10800037 	ldwio	r2,0(r2)
 801d428:	1080004c 	andi	r2,r2,1
 801d42c:	10000226 	beq	r2,zero,801d438 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 801d430:	00800044 	movi	r2,1
 801d434:	00000106 	br	801d43c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 801d438:	0005883a 	mov	r2,zero
}
 801d43c:	e037883a 	mov	sp,fp
 801d440:	df000017 	ldw	fp,0(sp)
 801d444:	dec00104 	addi	sp,sp,4
 801d448:	f800283a 	ret

0801d44c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 801d44c:	defffb04 	addi	sp,sp,-20
 801d450:	df000415 	stw	fp,16(sp)
 801d454:	df000404 	addi	fp,sp,16
 801d458:	e13fff15 	stw	r4,-4(fp)
 801d45c:	e17ffe15 	stw	r5,-8(fp)
 801d460:	e1bffd15 	stw	r6,-12(fp)
 801d464:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
 801d468:	e0bffc17 	ldw	r2,-16(fp)
 801d46c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 801d470:	00001506 	br	801d4c8 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 801d474:	e0bfff17 	ldw	r2,-4(fp)
 801d478:	10800317 	ldw	r2,12(r2)
 801d47c:	10800104 	addi	r2,r2,4
 801d480:	11000037 	ldwio	r4,0(r2)
 801d484:	e0bffc17 	ldw	r2,-16(fp)
 801d488:	10800017 	ldw	r2,0(r2)
 801d48c:	e0fffe17 	ldw	r3,-8(fp)
 801d490:	1885883a 	add	r2,r3,r2
 801d494:	2007883a 	mov	r3,r4
 801d498:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 801d49c:	e0bffc17 	ldw	r2,-16(fp)
 801d4a0:	10800017 	ldw	r2,0(r2)
 801d4a4:	10c00044 	addi	r3,r2,1
 801d4a8:	e0bffc17 	ldw	r2,-16(fp)
 801d4ac:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 801d4b0:	e0bffc17 	ldw	r2,-16(fp)
 801d4b4:	10800017 	ldw	r2,0(r2)
 801d4b8:	e0fffd17 	ldw	r3,-12(fp)
 801d4bc:	1880021e 	bne	r3,r2,801d4c8 <alt_avalon_i2c_rx_read_available+0x7c>
 801d4c0:	e0bffd17 	ldw	r2,-12(fp)
 801d4c4:	1000061e 	bne	r2,zero,801d4e0 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 801d4c8:	e0bfff17 	ldw	r2,-4(fp)
 801d4cc:	10800317 	ldw	r2,12(r2)
 801d4d0:	10800704 	addi	r2,r2,28
 801d4d4:	10800037 	ldwio	r2,0(r2)
 801d4d8:	103fe61e 	bne	r2,zero,801d474 <alt_avalon_i2c_rx_read_available+0x28>
    }
}
 801d4dc:	00000106 	br	801d4e4 <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 801d4e0:	0001883a 	nop
}
 801d4e4:	0001883a 	nop
 801d4e8:	e037883a 	mov	sp,fp
 801d4ec:	df000017 	ldw	fp,0(sp)
 801d4f0:	dec00104 	addi	sp,sp,4
 801d4f4:	f800283a 	ret

0801d4f8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 801d4f8:	defffa04 	addi	sp,sp,-24
 801d4fc:	dfc00515 	stw	ra,20(sp)
 801d500:	df000415 	stw	fp,16(sp)
 801d504:	df000404 	addi	fp,sp,16
 801d508:	e13ffd15 	stw	r4,-12(fp)
 801d50c:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 801d510:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
 801d514:	008000b4 	movhi	r2,2
 801d518:	10a1a804 	addi	r2,r2,-31072
 801d51c:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 801d520:	00000d06 	br	801d558 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 801d524:	e0bffe17 	ldw	r2,-8(fp)
 801d528:	108002a8 	cmpgeui	r2,r2,10
 801d52c:	1000021e 	bne	r2,zero,801d538 <alt_avalon_i2c_rx_read+0x40>
 801d530:	0109c404 	movi	r4,10000
 801d534:	803e6700 	call	803e670 <alt_busy_sleep>
      if (--timeout == 0)
 801d538:	e0bffe17 	ldw	r2,-8(fp)
 801d53c:	10bfffc4 	addi	r2,r2,-1
 801d540:	e0bffe15 	stw	r2,-8(fp)
 801d544:	e0bffe17 	ldw	r2,-8(fp)
 801d548:	1000031e 	bne	r2,zero,801d558 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 801d54c:	00bfff84 	movi	r2,-2
 801d550:	e0bfff15 	stw	r2,-4(fp)
        break;
 801d554:	00000506 	br	801d56c <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 801d558:	e0bffd17 	ldw	r2,-12(fp)
 801d55c:	10800317 	ldw	r2,12(r2)
 801d560:	10800704 	addi	r2,r2,28
 801d564:	10800037 	ldwio	r2,0(r2)
 801d568:	103fee26 	beq	r2,zero,801d524 <alt_avalon_i2c_rx_read+0x2c>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 801d56c:	e0bffd17 	ldw	r2,-12(fp)
 801d570:	10800317 	ldw	r2,12(r2)
 801d574:	10800104 	addi	r2,r2,4
 801d578:	10800037 	ldwio	r2,0(r2)
 801d57c:	1007883a 	mov	r3,r2
 801d580:	e0bffc17 	ldw	r2,-16(fp)
 801d584:	10c00005 	stb	r3,0(r2)
        
    return status;
 801d588:	e0bfff17 	ldw	r2,-4(fp)
}
 801d58c:	e037883a 	mov	sp,fp
 801d590:	dfc00117 	ldw	ra,4(sp)
 801d594:	df000017 	ldw	fp,0(sp)
 801d598:	dec00204 	addi	sp,sp,8
 801d59c:	f800283a 	ret

0801d5a0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 801d5a0:	defff804 	addi	sp,sp,-32
 801d5a4:	dfc00715 	stw	ra,28(sp)
 801d5a8:	df000615 	stw	fp,24(sp)
 801d5ac:	df000604 	addi	fp,sp,24
 801d5b0:	e13ffd15 	stw	r4,-12(fp)
 801d5b4:	2805883a 	mov	r2,r5
 801d5b8:	3009883a 	mov	r4,r6
 801d5bc:	3807883a 	mov	r3,r7
 801d5c0:	e0bffc05 	stb	r2,-16(fp)
 801d5c4:	2005883a 	mov	r2,r4
 801d5c8:	e0bffb05 	stb	r2,-20(fp)
 801d5cc:	1805883a 	mov	r2,r3
 801d5d0:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
 801d5d4:	0089c404 	movi	r2,10000
 801d5d8:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801d5dc:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 801d5e0:	00000c06 	br	801d614 <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 801d5e4:	e0bfff17 	ldw	r2,-4(fp)
 801d5e8:	108002a8 	cmpgeui	r2,r2,10
 801d5ec:	1000021e 	bne	r2,zero,801d5f8 <alt_avalon_i2c_cmd_write+0x58>
 801d5f0:	0109c404 	movi	r4,10000
 801d5f4:	803e6700 	call	803e670 <alt_busy_sleep>
      if (--timeout == 0)
 801d5f8:	e0bfff17 	ldw	r2,-4(fp)
 801d5fc:	10bfffc4 	addi	r2,r2,-1
 801d600:	e0bfff15 	stw	r2,-4(fp)
 801d604:	e0bfff17 	ldw	r2,-4(fp)
 801d608:	1000021e 	bne	r2,zero,801d614 <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 801d60c:	00bfff84 	movi	r2,-2
 801d610:	00001906 	br	801d678 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 801d614:	e0bffd17 	ldw	r2,-12(fp)
 801d618:	10800317 	ldw	r2,12(r2)
 801d61c:	10800404 	addi	r2,r2,16
 801d620:	10800037 	ldwio	r2,0(r2)
 801d624:	1080004c 	andi	r2,r2,1
 801d628:	103fee26 	beq	r2,zero,801d5e4 <alt_avalon_i2c_cmd_write+0x44>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 801d62c:	e0bffd17 	ldw	r2,-12(fp)
 801d630:	10800317 	ldw	r2,12(r2)
 801d634:	e13ffc03 	ldbu	r4,-16(fp)
 801d638:	e0fffb03 	ldbu	r3,-20(fp)
 801d63c:	1806927a 	slli	r3,r3,9
 801d640:	20c8b03a 	or	r4,r4,r3
 801d644:	e0fffa03 	ldbu	r3,-24(fp)
 801d648:	1806923a 	slli	r3,r3,8
 801d64c:	20c6b03a 	or	r3,r4,r3
 801d650:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 801d654:	e0bffe04 	addi	r2,fp,-8
 801d658:	100b883a 	mov	r5,r2
 801d65c:	e13ffd17 	ldw	r4,-12(fp)
 801d660:	801d7e80 	call	801d7e8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 801d664:	e0bffe04 	addi	r2,fp,-8
 801d668:	100b883a 	mov	r5,r2
 801d66c:	e13ffd17 	ldw	r4,-12(fp)
 801d670:	801d8340 	call	801d834 <alt_avalon_i2c_check_arblost>
    
    return status;
 801d674:	e0bffe17 	ldw	r2,-8(fp)
}
 801d678:	e037883a 	mov	sp,fp
 801d67c:	dfc00117 	ldw	ra,4(sp)
 801d680:	df000017 	ldw	fp,0(sp)
 801d684:	dec00204 	addi	sp,sp,8
 801d688:	f800283a 	ret

0801d68c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 801d68c:	defffa04 	addi	sp,sp,-24
 801d690:	dfc00515 	stw	ra,20(sp)
 801d694:	df000415 	stw	fp,16(sp)
 801d698:	df000404 	addi	fp,sp,16
 801d69c:	e13ffe15 	stw	r4,-8(fp)
 801d6a0:	e17ffd15 	stw	r5,-12(fp)
 801d6a4:	3005883a 	mov	r2,r6
 801d6a8:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 801d6ac:	e0bffe17 	ldw	r2,-8(fp)
 801d6b0:	10800d17 	ldw	r2,52(r2)
 801d6b4:	10800058 	cmpnei	r2,r2,1
 801d6b8:	10001c1e 	bne	r2,zero,801d72c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 801d6bc:	e0bffe17 	ldw	r2,-8(fp)
 801d6c0:	10800917 	ldw	r2,36(r2)
 801d6c4:	1004d1fa 	srli	r2,r2,7
 801d6c8:	1080038c 	andi	r2,r2,14
 801d6cc:	1007883a 	mov	r3,r2
 801d6d0:	e0bffd17 	ldw	r2,-12(fp)
 801d6d4:	1884b03a 	or	r2,r3,r2
 801d6d8:	1007883a 	mov	r3,r2
 801d6dc:	00bffc04 	movi	r2,-16
 801d6e0:	1884b03a 	or	r2,r3,r2
 801d6e4:	10803fcc 	andi	r2,r2,255
 801d6e8:	e0fffc03 	ldbu	r3,-16(fp)
 801d6ec:	000f883a 	mov	r7,zero
 801d6f0:	180d883a 	mov	r6,r3
 801d6f4:	100b883a 	mov	r5,r2
 801d6f8:	e13ffe17 	ldw	r4,-8(fp)
 801d6fc:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801d700:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 801d704:	e0bffe17 	ldw	r2,-8(fp)
 801d708:	10800917 	ldw	r2,36(r2)
 801d70c:	10803fcc 	andi	r2,r2,255
 801d710:	000f883a 	mov	r7,zero
 801d714:	000d883a 	mov	r6,zero
 801d718:	100b883a 	mov	r5,r2
 801d71c:	e13ffe17 	ldw	r4,-8(fp)
 801d720:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801d724:	e0bfff15 	stw	r2,-4(fp)
 801d728:	00000e06 	br	801d764 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 801d72c:	e0bffe17 	ldw	r2,-8(fp)
 801d730:	10800917 	ldw	r2,36(r2)
 801d734:	1085883a 	add	r2,r2,r2
 801d738:	1007883a 	mov	r3,r2
 801d73c:	e0bffd17 	ldw	r2,-12(fp)
 801d740:	1884b03a 	or	r2,r3,r2
 801d744:	10803fcc 	andi	r2,r2,255
 801d748:	e0fffc03 	ldbu	r3,-16(fp)
 801d74c:	000f883a 	mov	r7,zero
 801d750:	180d883a 	mov	r6,r3
 801d754:	100b883a 	mov	r5,r2
 801d758:	e13ffe17 	ldw	r4,-8(fp)
 801d75c:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801d760:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
 801d764:	e0bfff17 	ldw	r2,-4(fp)
}
 801d768:	e037883a 	mov	sp,fp
 801d76c:	dfc00117 	ldw	ra,4(sp)
 801d770:	df000017 	ldw	fp,0(sp)
 801d774:	dec00204 	addi	sp,sp,8
 801d778:	f800283a 	ret

0801d77c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 801d77c:	defffd04 	addi	sp,sp,-12
 801d780:	df000215 	stw	fp,8(sp)
 801d784:	df000204 	addi	fp,sp,8
 801d788:	e13fff15 	stw	r4,-4(fp)
 801d78c:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
 801d790:	e0bfff17 	ldw	r2,-4(fp)
 801d794:	10c00917 	ldw	r3,36(r2)
 801d798:	e0bffe17 	ldw	r2,-8(fp)
 801d79c:	10c00015 	stw	r3,0(r2)
}
 801d7a0:	0001883a 	nop
 801d7a4:	e037883a 	mov	sp,fp
 801d7a8:	df000017 	ldw	fp,0(sp)
 801d7ac:	dec00104 	addi	sp,sp,4
 801d7b0:	f800283a 	ret

0801d7b4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 801d7b4:	defffd04 	addi	sp,sp,-12
 801d7b8:	df000215 	stw	fp,8(sp)
 801d7bc:	df000204 	addi	fp,sp,8
 801d7c0:	e13fff15 	stw	r4,-4(fp)
 801d7c4:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
 801d7c8:	e0bfff17 	ldw	r2,-4(fp)
 801d7cc:	e0fffe17 	ldw	r3,-8(fp)
 801d7d0:	10c00915 	stw	r3,36(r2)
}
 801d7d4:	0001883a 	nop
 801d7d8:	e037883a 	mov	sp,fp
 801d7dc:	df000017 	ldw	fp,0(sp)
 801d7e0:	dec00104 	addi	sp,sp,4
 801d7e4:	f800283a 	ret

0801d7e8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 801d7e8:	defffd04 	addi	sp,sp,-12
 801d7ec:	df000215 	stw	fp,8(sp)
 801d7f0:	df000204 	addi	fp,sp,8
 801d7f4:	e13fff15 	stw	r4,-4(fp)
 801d7f8:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 801d7fc:	e0bfff17 	ldw	r2,-4(fp)
 801d800:	10800317 	ldw	r2,12(r2)
 801d804:	10800404 	addi	r2,r2,16
 801d808:	10800037 	ldwio	r2,0(r2)
 801d80c:	1080010c 	andi	r2,r2,4
 801d810:	10000326 	beq	r2,zero,801d820 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 801d814:	e0bffe17 	ldw	r2,-8(fp)
 801d818:	00fffec4 	movi	r3,-5
 801d81c:	10c00015 	stw	r3,0(r2)
    }
}
 801d820:	0001883a 	nop
 801d824:	e037883a 	mov	sp,fp
 801d828:	df000017 	ldw	fp,0(sp)
 801d82c:	dec00104 	addi	sp,sp,4
 801d830:	f800283a 	ret

0801d834 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 801d834:	defffd04 	addi	sp,sp,-12
 801d838:	df000215 	stw	fp,8(sp)
 801d83c:	df000204 	addi	fp,sp,8
 801d840:	e13fff15 	stw	r4,-4(fp)
 801d844:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 801d848:	e0bfff17 	ldw	r2,-4(fp)
 801d84c:	10800317 	ldw	r2,12(r2)
 801d850:	10800404 	addi	r2,r2,16
 801d854:	10800037 	ldwio	r2,0(r2)
 801d858:	1080020c 	andi	r2,r2,8
 801d85c:	10000326 	beq	r2,zero,801d86c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 801d860:	e0bffe17 	ldw	r2,-8(fp)
 801d864:	00fffe84 	movi	r3,-6
 801d868:	10c00015 	stw	r3,0(r2)
    }
}
 801d86c:	0001883a 	nop
 801d870:	e037883a 	mov	sp,fp
 801d874:	df000017 	ldw	fp,0(sp)
 801d878:	dec00104 	addi	sp,sp,4
 801d87c:	f800283a 	ret

0801d880 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801d880:	defff804 	addi	sp,sp,-32
 801d884:	dfc00715 	stw	ra,28(sp)
 801d888:	df000615 	stw	fp,24(sp)
 801d88c:	df000604 	addi	fp,sp,24
 801d890:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801d894:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 801d898:	e0bffa17 	ldw	r2,-24(fp)
 801d89c:	10800717 	ldw	r2,28(r2)
 801d8a0:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 801d8a4:	e0bffe17 	ldw	r2,-8(fp)
 801d8a8:	10800117 	ldw	r2,4(r2)
 801d8ac:	10800044 	addi	r2,r2,1
 801d8b0:	1089c424 	muli	r2,r2,10000
 801d8b4:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 801d8b8:	e0bffc04 	addi	r2,fp,-16
 801d8bc:	100b883a 	mov	r5,r2
 801d8c0:	e13ffa17 	ldw	r4,-24(fp)
 801d8c4:	801e7080 	call	801e708 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 801d8c8:	e0bffc17 	ldw	r2,-16(fp)
 801d8cc:	100b883a 	mov	r5,r2
 801d8d0:	e13ffa17 	ldw	r4,-24(fp)
 801d8d4:	801e6340 	call	801e634 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 801d8d8:	e0bffd04 	addi	r2,fp,-12
 801d8dc:	100b883a 	mov	r5,r2
 801d8e0:	e13ffa17 	ldw	r4,-24(fp)
 801d8e4:	801d7e80 	call	801d7e8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 801d8e8:	e0bffd17 	ldw	r2,-12(fp)
 801d8ec:	10002226 	beq	r2,zero,801d978 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
 801d8f0:	e0bffe17 	ldw	r2,-8(fp)
 801d8f4:	10800217 	ldw	r2,8(r2)
 801d8f8:	10001d26 	beq	r2,zero,801d970 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801d8fc:	00000d06 	br	801d934 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
 801d900:	e0bfff17 	ldw	r2,-4(fp)
 801d904:	108002a8 	cmpgeui	r2,r2,10
 801d908:	1000021e 	bne	r2,zero,801d914 <alt_avalon_i2c_interrupt_transaction_status+0x94>
 801d90c:	0109c404 	movi	r4,10000
 801d910:	803e6700 	call	803e670 <alt_busy_sleep>
              if (--timeout == 0)
 801d914:	e0bfff17 	ldw	r2,-4(fp)
 801d918:	10bfffc4 	addi	r2,r2,-1
 801d91c:	e0bfff15 	stw	r2,-4(fp)
 801d920:	e0bfff17 	ldw	r2,-4(fp)
 801d924:	1000031e 	bne	r2,zero,801d934 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 801d928:	00bfff84 	movi	r2,-2
 801d92c:	e0bffd15 	stw	r2,-12(fp)
                 break;
 801d930:	00000306 	br	801d940 <alt_avalon_i2c_interrupt_transaction_status+0xc0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801d934:	e13ffa17 	ldw	r4,-24(fp)
 801d938:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801d93c:	103ff01e 	bne	r2,zero,801d900 <alt_avalon_i2c_interrupt_transaction_status+0x80>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 801d940:	e0bffe17 	ldw	r2,-8(fp)
 801d944:	10800017 	ldw	r2,0(r2)
 801d948:	e0fffb04 	addi	r3,fp,-20
 801d94c:	180f883a 	mov	r7,r3
 801d950:	000d883a 	mov	r6,zero
 801d954:	100b883a 	mov	r5,r2
 801d958:	e13ffa17 	ldw	r4,-24(fp)
 801d95c:	801d44c0 	call	801d44c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 801d960:	e13ffa17 	ldw	r4,-24(fp)
 801d964:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 801d968:	e0bffe17 	ldw	r2,-8(fp)
 801d96c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 801d970:	e0bffd17 	ldw	r2,-12(fp)
 801d974:	00000a06 	br	801d9a0 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
 801d978:	e0bffe17 	ldw	r2,-8(fp)
 801d97c:	10800217 	ldw	r2,8(r2)
 801d980:	10000626 	beq	r2,zero,801d99c <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 801d984:	e0bffc17 	ldw	r2,-16(fp)
 801d988:	100b883a 	mov	r5,r2
 801d98c:	e13ffa17 	ldw	r4,-24(fp)
 801d990:	801e6a00 	call	801e6a0 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 801d994:	00bffe44 	movi	r2,-7
 801d998:	00000106 	br	801d9a0 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 801d99c:	0005883a 	mov	r2,zero
}
 801d9a0:	e037883a 	mov	sp,fp
 801d9a4:	dfc00117 	ldw	ra,4(sp)
 801d9a8:	df000017 	ldw	fp,0(sp)
 801d9ac:	dec00204 	addi	sp,sp,8
 801d9b0:	f800283a 	ret

0801d9b4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 801d9b4:	defff704 	addi	sp,sp,-36
 801d9b8:	dfc00815 	stw	ra,32(sp)
 801d9bc:	df000715 	stw	fp,28(sp)
 801d9c0:	df000704 	addi	fp,sp,28
 801d9c4:	e13ffd15 	stw	r4,-12(fp)
 801d9c8:	e17ffc15 	stw	r5,-16(fp)
 801d9cc:	e1bffb15 	stw	r6,-20(fp)
 801d9d0:	3805883a 	mov	r2,r7
 801d9d4:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 801d9d8:	0089c404 	movi	r2,10000
 801d9dc:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
 801d9e0:	00002206 	br	801da6c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 801d9e4:	e0bffe17 	ldw	r2,-8(fp)
 801d9e8:	108002a8 	cmpgeui	r2,r2,10
 801d9ec:	1000021e 	bne	r2,zero,801d9f8 <alt_avalon_i2c_master_tx+0x44>
 801d9f0:	0109c404 	movi	r4,10000
 801d9f4:	803e6700 	call	803e670 <alt_busy_sleep>
      if (use_interrupts)
 801d9f8:	e0bffa03 	ldbu	r2,-24(fp)
 801d9fc:	10000926 	beq	r2,zero,801da24 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 801da00:	00800044 	movi	r2,1
 801da04:	d8800015 	stw	r2,0(sp)
 801da08:	000f883a 	mov	r7,zero
 801da0c:	e1bffb17 	ldw	r6,-20(fp)
 801da10:	e17ffc17 	ldw	r5,-16(fp)
 801da14:	e13ffd17 	ldw	r4,-12(fp)
 801da18:	801df5c0 	call	801df5c <alt_avalon_i2c_master_transmit_using_interrupts>
 801da1c:	e0bfff15 	stw	r2,-4(fp)
 801da20:	00000806 	br	801da44 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 801da24:	00800044 	movi	r2,1
 801da28:	d8800015 	stw	r2,0(sp)
 801da2c:	000f883a 	mov	r7,zero
 801da30:	e1bffb17 	ldw	r6,-20(fp)
 801da34:	e17ffc17 	ldw	r5,-16(fp)
 801da38:	e13ffd17 	ldw	r4,-12(fp)
 801da3c:	801dda00 	call	801dda0 <alt_avalon_i2c_master_transmit>
 801da40:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801da44:	e0bfff17 	ldw	r2,-4(fp)
 801da48:	10bffea0 	cmpeqi	r2,r2,-6
 801da4c:	1000061e 	bne	r2,zero,801da68 <alt_avalon_i2c_master_tx+0xb4>
 801da50:	e0bfff17 	ldw	r2,-4(fp)
 801da54:	10bffee0 	cmpeqi	r2,r2,-5
 801da58:	1000031e 	bne	r2,zero,801da68 <alt_avalon_i2c_master_tx+0xb4>
 801da5c:	e0bfff17 	ldw	r2,-4(fp)
 801da60:	10bffe58 	cmpnei	r2,r2,-7
 801da64:	1000061e 	bne	r2,zero,801da80 <alt_avalon_i2c_master_tx+0xcc>
 801da68:	0001883a 	nop
    while (retry--)
 801da6c:	e0bffe17 	ldw	r2,-8(fp)
 801da70:	10ffffc4 	addi	r3,r2,-1
 801da74:	e0fffe15 	stw	r3,-8(fp)
 801da78:	103fda1e 	bne	r2,zero,801d9e4 <alt_avalon_i2c_master_tx+0x30>
 801da7c:	00000106 	br	801da84 <alt_avalon_i2c_master_tx+0xd0>
      break;
 801da80:	0001883a 	nop
    }

    return status;
 801da84:	e0bfff17 	ldw	r2,-4(fp)
}        
 801da88:	e037883a 	mov	sp,fp
 801da8c:	dfc00117 	ldw	ra,4(sp)
 801da90:	df000017 	ldw	fp,0(sp)
 801da94:	dec00204 	addi	sp,sp,8
 801da98:	f800283a 	ret

0801da9c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 801da9c:	defff704 	addi	sp,sp,-36
 801daa0:	dfc00815 	stw	ra,32(sp)
 801daa4:	df000715 	stw	fp,28(sp)
 801daa8:	df000704 	addi	fp,sp,28
 801daac:	e13ffd15 	stw	r4,-12(fp)
 801dab0:	e17ffc15 	stw	r5,-16(fp)
 801dab4:	e1bffb15 	stw	r6,-20(fp)
 801dab8:	3805883a 	mov	r2,r7
 801dabc:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 801dac0:	0089c404 	movi	r2,10000
 801dac4:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
 801dac8:	e0bffa03 	ldbu	r2,-24(fp)
 801dacc:	10003426 	beq	r2,zero,801dba0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 801dad0:	00001706 	br	801db30 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 801dad4:	e0bffe17 	ldw	r2,-8(fp)
 801dad8:	108002a8 	cmpgeui	r2,r2,10
 801dadc:	1000021e 	bne	r2,zero,801dae8 <alt_avalon_i2c_master_rx+0x4c>
 801dae0:	0109c404 	movi	r4,10000
 801dae4:	803e6700 	call	803e670 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 801dae8:	00800044 	movi	r2,1
 801daec:	d8800015 	stw	r2,0(sp)
 801daf0:	000f883a 	mov	r7,zero
 801daf4:	e1bffb17 	ldw	r6,-20(fp)
 801daf8:	e17ffc17 	ldw	r5,-16(fp)
 801dafc:	e13ffd17 	ldw	r4,-12(fp)
 801db00:	801e3700 	call	801e370 <alt_avalon_i2c_master_receive_using_interrupts>
 801db04:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801db08:	e0bfff17 	ldw	r2,-4(fp)
 801db0c:	10bffea0 	cmpeqi	r2,r2,-6
 801db10:	1000061e 	bne	r2,zero,801db2c <alt_avalon_i2c_master_rx+0x90>
 801db14:	e0bfff17 	ldw	r2,-4(fp)
 801db18:	10bffee0 	cmpeqi	r2,r2,-5
 801db1c:	1000031e 	bne	r2,zero,801db2c <alt_avalon_i2c_master_rx+0x90>
 801db20:	e0bfff17 	ldw	r2,-4(fp)
 801db24:	10bffe58 	cmpnei	r2,r2,-7
 801db28:	1000221e 	bne	r2,zero,801dbb4 <alt_avalon_i2c_master_rx+0x118>
 801db2c:	0001883a 	nop
      while (retry--) 
 801db30:	e0bffe17 	ldw	r2,-8(fp)
 801db34:	10ffffc4 	addi	r3,r2,-1
 801db38:	e0fffe15 	stw	r3,-8(fp)
 801db3c:	103fe51e 	bne	r2,zero,801dad4 <alt_avalon_i2c_master_rx+0x38>
 801db40:	00001f06 	br	801dbc0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 801db44:	e0bffe17 	ldw	r2,-8(fp)
 801db48:	108002a8 	cmpgeui	r2,r2,10
 801db4c:	1000021e 	bne	r2,zero,801db58 <alt_avalon_i2c_master_rx+0xbc>
 801db50:	0109c404 	movi	r4,10000
 801db54:	803e6700 	call	803e670 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 801db58:	00800044 	movi	r2,1
 801db5c:	d8800015 	stw	r2,0(sp)
 801db60:	000f883a 	mov	r7,zero
 801db64:	e1bffb17 	ldw	r6,-20(fp)
 801db68:	e17ffc17 	ldw	r5,-16(fp)
 801db6c:	e13ffd17 	ldw	r4,-12(fp)
 801db70:	801e1640 	call	801e164 <alt_avalon_i2c_master_receive>
 801db74:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801db78:	e0bfff17 	ldw	r2,-4(fp)
 801db7c:	10bffea0 	cmpeqi	r2,r2,-6
 801db80:	1000061e 	bne	r2,zero,801db9c <alt_avalon_i2c_master_rx+0x100>
 801db84:	e0bfff17 	ldw	r2,-4(fp)
 801db88:	10bffee0 	cmpeqi	r2,r2,-5
 801db8c:	1000031e 	bne	r2,zero,801db9c <alt_avalon_i2c_master_rx+0x100>
 801db90:	e0bfff17 	ldw	r2,-4(fp)
 801db94:	10bffe58 	cmpnei	r2,r2,-7
 801db98:	1000081e 	bne	r2,zero,801dbbc <alt_avalon_i2c_master_rx+0x120>
 801db9c:	0001883a 	nop
      while (retry--) 
 801dba0:	e0bffe17 	ldw	r2,-8(fp)
 801dba4:	10ffffc4 	addi	r3,r2,-1
 801dba8:	e0fffe15 	stw	r3,-8(fp)
 801dbac:	103fe51e 	bne	r2,zero,801db44 <alt_avalon_i2c_master_rx+0xa8>
 801dbb0:	00000306 	br	801dbc0 <alt_avalon_i2c_master_rx+0x124>
        break;
 801dbb4:	0001883a 	nop
 801dbb8:	00000106 	br	801dbc0 <alt_avalon_i2c_master_rx+0x124>
        break;
 801dbbc:	0001883a 	nop
      }
    }
    
    return status;
 801dbc0:	e0bfff17 	ldw	r2,-4(fp)
}        
 801dbc4:	e037883a 	mov	sp,fp
 801dbc8:	dfc00117 	ldw	ra,4(sp)
 801dbcc:	df000017 	ldw	fp,0(sp)
 801dbd0:	dec00204 	addi	sp,sp,8
 801dbd4:	f800283a 	ret

0801dbd8 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 801dbd8:	defff604 	addi	sp,sp,-40
 801dbdc:	dfc00915 	stw	ra,36(sp)
 801dbe0:	df000815 	stw	fp,32(sp)
 801dbe4:	df000804 	addi	fp,sp,32
 801dbe8:	e13ffd15 	stw	r4,-12(fp)
 801dbec:	e17ffc15 	stw	r5,-16(fp)
 801dbf0:	e1bffb15 	stw	r6,-20(fp)
 801dbf4:	e1fffa15 	stw	r7,-24(fp)
 801dbf8:	e0800317 	ldw	r2,12(fp)
 801dbfc:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 801dc00:	0089c404 	movi	r2,10000
 801dc04:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
 801dc08:	e0bff903 	ldbu	r2,-28(fp)
 801dc0c:	10005626 	beq	r2,zero,801dd68 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 801dc10:	00002806 	br	801dcb4 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 801dc14:	e0bffe17 	ldw	r2,-8(fp)
 801dc18:	108002a8 	cmpgeui	r2,r2,10
 801dc1c:	1000021e 	bne	r2,zero,801dc28 <alt_avalon_i2c_master_tx_rx+0x50>
 801dc20:	0109c404 	movi	r4,10000
 801dc24:	803e6700 	call	803e670 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 801dc28:	d8000015 	stw	zero,0(sp)
 801dc2c:	000f883a 	mov	r7,zero
 801dc30:	e1bffb17 	ldw	r6,-20(fp)
 801dc34:	e17ffc17 	ldw	r5,-16(fp)
 801dc38:	e13ffd17 	ldw	r4,-12(fp)
 801dc3c:	801df5c0 	call	801df5c <alt_avalon_i2c_master_transmit_using_interrupts>
 801dc40:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801dc44:	e0bfff17 	ldw	r2,-4(fp)
 801dc48:	10bffea0 	cmpeqi	r2,r2,-6
 801dc4c:	1000191e 	bne	r2,zero,801dcb4 <alt_avalon_i2c_master_tx_rx+0xdc>
 801dc50:	e0bfff17 	ldw	r2,-4(fp)
 801dc54:	10bffee0 	cmpeqi	r2,r2,-5
 801dc58:	1000161e 	bne	r2,zero,801dcb4 <alt_avalon_i2c_master_tx_rx+0xdc>
 801dc5c:	e0bfff17 	ldw	r2,-4(fp)
 801dc60:	10bffe58 	cmpnei	r2,r2,-7
 801dc64:	1000011e 	bne	r2,zero,801dc6c <alt_avalon_i2c_master_tx_rx+0x94>
 801dc68:	00001206 	br	801dcb4 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 801dc6c:	00800044 	movi	r2,1
 801dc70:	d8800015 	stw	r2,0(sp)
 801dc74:	01c00044 	movi	r7,1
 801dc78:	e1800217 	ldw	r6,8(fp)
 801dc7c:	e17ffa17 	ldw	r5,-24(fp)
 801dc80:	e13ffd17 	ldw	r4,-12(fp)
 801dc84:	801e3700 	call	801e370 <alt_avalon_i2c_master_receive_using_interrupts>
 801dc88:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801dc8c:	e0bfff17 	ldw	r2,-4(fp)
 801dc90:	10bffea0 	cmpeqi	r2,r2,-6
 801dc94:	1000061e 	bne	r2,zero,801dcb0 <alt_avalon_i2c_master_tx_rx+0xd8>
 801dc98:	e0bfff17 	ldw	r2,-4(fp)
 801dc9c:	10bffee0 	cmpeqi	r2,r2,-5
 801dca0:	1000031e 	bne	r2,zero,801dcb0 <alt_avalon_i2c_master_tx_rx+0xd8>
 801dca4:	e0bfff17 	ldw	r2,-4(fp)
 801dca8:	10bffe58 	cmpnei	r2,r2,-7
 801dcac:	1000331e 	bne	r2,zero,801dd7c <alt_avalon_i2c_master_tx_rx+0x1a4>
 801dcb0:	0001883a 	nop
      while (retry--) 
 801dcb4:	e0bffe17 	ldw	r2,-8(fp)
 801dcb8:	10ffffc4 	addi	r3,r2,-1
 801dcbc:	e0fffe15 	stw	r3,-8(fp)
 801dcc0:	103fd41e 	bne	r2,zero,801dc14 <alt_avalon_i2c_master_tx_rx+0x3c>
 801dcc4:	00003006 	br	801dd88 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 801dcc8:	e0bffe17 	ldw	r2,-8(fp)
 801dccc:	108002a8 	cmpgeui	r2,r2,10
 801dcd0:	1000021e 	bne	r2,zero,801dcdc <alt_avalon_i2c_master_tx_rx+0x104>
 801dcd4:	0109c404 	movi	r4,10000
 801dcd8:	803e6700 	call	803e670 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 801dcdc:	d8000015 	stw	zero,0(sp)
 801dce0:	000f883a 	mov	r7,zero
 801dce4:	e1bffb17 	ldw	r6,-20(fp)
 801dce8:	e17ffc17 	ldw	r5,-16(fp)
 801dcec:	e13ffd17 	ldw	r4,-12(fp)
 801dcf0:	801dda00 	call	801dda0 <alt_avalon_i2c_master_transmit>
 801dcf4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801dcf8:	e0bfff17 	ldw	r2,-4(fp)
 801dcfc:	10bffea0 	cmpeqi	r2,r2,-6
 801dd00:	1000191e 	bne	r2,zero,801dd68 <alt_avalon_i2c_master_tx_rx+0x190>
 801dd04:	e0bfff17 	ldw	r2,-4(fp)
 801dd08:	10bffee0 	cmpeqi	r2,r2,-5
 801dd0c:	1000161e 	bne	r2,zero,801dd68 <alt_avalon_i2c_master_tx_rx+0x190>
 801dd10:	e0bfff17 	ldw	r2,-4(fp)
 801dd14:	10bffe58 	cmpnei	r2,r2,-7
 801dd18:	1000011e 	bne	r2,zero,801dd20 <alt_avalon_i2c_master_tx_rx+0x148>
 801dd1c:	00001206 	br	801dd68 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 801dd20:	00800044 	movi	r2,1
 801dd24:	d8800015 	stw	r2,0(sp)
 801dd28:	01c00044 	movi	r7,1
 801dd2c:	e1800217 	ldw	r6,8(fp)
 801dd30:	e17ffa17 	ldw	r5,-24(fp)
 801dd34:	e13ffd17 	ldw	r4,-12(fp)
 801dd38:	801e1640 	call	801e164 <alt_avalon_i2c_master_receive>
 801dd3c:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801dd40:	e0bfff17 	ldw	r2,-4(fp)
 801dd44:	10bffea0 	cmpeqi	r2,r2,-6
 801dd48:	1000061e 	bne	r2,zero,801dd64 <alt_avalon_i2c_master_tx_rx+0x18c>
 801dd4c:	e0bfff17 	ldw	r2,-4(fp)
 801dd50:	10bffee0 	cmpeqi	r2,r2,-5
 801dd54:	1000031e 	bne	r2,zero,801dd64 <alt_avalon_i2c_master_tx_rx+0x18c>
 801dd58:	e0bfff17 	ldw	r2,-4(fp)
 801dd5c:	10bffe58 	cmpnei	r2,r2,-7
 801dd60:	1000081e 	bne	r2,zero,801dd84 <alt_avalon_i2c_master_tx_rx+0x1ac>
 801dd64:	0001883a 	nop
      while (retry--) 
 801dd68:	e0bffe17 	ldw	r2,-8(fp)
 801dd6c:	10ffffc4 	addi	r3,r2,-1
 801dd70:	e0fffe15 	stw	r3,-8(fp)
 801dd74:	103fd41e 	bne	r2,zero,801dcc8 <alt_avalon_i2c_master_tx_rx+0xf0>
 801dd78:	00000306 	br	801dd88 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
 801dd7c:	0001883a 	nop
 801dd80:	00000106 	br	801dd88 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
 801dd84:	0001883a 	nop
      }
    }
    
    return status;
 801dd88:	e0bfff17 	ldw	r2,-4(fp)
}                                       
 801dd8c:	e037883a 	mov	sp,fp
 801dd90:	dfc00117 	ldw	ra,4(sp)
 801dd94:	df000017 	ldw	fp,0(sp)
 801dd98:	dec00204 	addi	sp,sp,8
 801dd9c:	f800283a 	ret

0801dda0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 801dda0:	defff704 	addi	sp,sp,-36
 801dda4:	dfc00815 	stw	ra,32(sp)
 801dda8:	df000715 	stw	fp,28(sp)
 801ddac:	df000704 	addi	fp,sp,28
 801ddb0:	e13ffd15 	stw	r4,-12(fp)
 801ddb4:	e17ffc15 	stw	r5,-16(fp)
 801ddb8:	e1bffb15 	stw	r6,-20(fp)
 801ddbc:	3807883a 	mov	r3,r7
 801ddc0:	e0800217 	ldw	r2,8(fp)
 801ddc4:	e0fffa05 	stb	r3,-24(fp)
 801ddc8:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801ddcc:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
 801ddd0:	e0bffb17 	ldw	r2,-20(fp)
 801ddd4:	1089c424 	muli	r2,r2,10000
 801ddd8:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
 801dddc:	e0bffb17 	ldw	r2,-20(fp)
 801dde0:	1000021e 	bne	r2,zero,801ddec <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801dde4:	0005883a 	mov	r2,zero
 801dde8:	00005706 	br	801df48 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801ddec:	e0bffa03 	ldbu	r2,-24(fp)
 801ddf0:	10000a1e 	bne	r2,zero,801de1c <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801ddf4:	e13ffd17 	ldw	r4,-12(fp)
 801ddf8:	801d0180 	call	801d018 <alt_avalon_i2c_enable>
 801ddfc:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801de00:	e0bffe17 	ldw	r2,-8(fp)
 801de04:	10000226 	beq	r2,zero,801de10 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
 801de08:	e0bffe17 	ldw	r2,-8(fp)
 801de0c:	00004e06 	br	801df48 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801de10:	01400704 	movi	r5,28
 801de14:	e13ffd17 	ldw	r4,-12(fp)
 801de18:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 801de1c:	e0bffa03 	ldbu	r2,-24(fp)
 801de20:	100d883a 	mov	r6,r2
 801de24:	000b883a 	mov	r5,zero
 801de28:	e13ffd17 	ldw	r4,-12(fp)
 801de2c:	801d68c0 	call	801d68c <alt_avalon_i2c_send_address>
 801de30:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 801de34:	e0bffe17 	ldw	r2,-8(fp)
 801de38:	1000271e 	bne	r2,zero,801ded8 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801de3c:	00000f06 	br	801de7c <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801de40:	e0bffc17 	ldw	r2,-16(fp)
 801de44:	10800003 	ldbu	r2,0(r2)
 801de48:	10803fcc 	andi	r2,r2,255
 801de4c:	000f883a 	mov	r7,zero
 801de50:	000d883a 	mov	r6,zero
 801de54:	100b883a 	mov	r5,r2
 801de58:	e13ffd17 	ldw	r4,-12(fp)
 801de5c:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801de60:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
 801de64:	e0bffc17 	ldw	r2,-16(fp)
 801de68:	10800044 	addi	r2,r2,1
 801de6c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 801de70:	e0bffb17 	ldw	r2,-20(fp)
 801de74:	10bfffc4 	addi	r2,r2,-1
 801de78:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801de7c:	e0bffb17 	ldw	r2,-20(fp)
 801de80:	108000b0 	cmpltui	r2,r2,2
 801de84:	1000021e 	bne	r2,zero,801de90 <alt_avalon_i2c_master_transmit+0xf0>
 801de88:	e0bffe17 	ldw	r2,-8(fp)
 801de8c:	103fec26 	beq	r2,zero,801de40 <alt_avalon_i2c_master_transmit+0xa0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801de90:	e0bffe17 	ldw	r2,-8(fp)
 801de94:	1000101e 	bne	r2,zero,801ded8 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801de98:	e0bffc17 	ldw	r2,-16(fp)
 801de9c:	10800003 	ldbu	r2,0(r2)
 801dea0:	10803fcc 	andi	r2,r2,255
 801dea4:	e0fff903 	ldbu	r3,-28(fp)
 801dea8:	180f883a 	mov	r7,r3
 801deac:	000d883a 	mov	r6,zero
 801deb0:	100b883a 	mov	r5,r2
 801deb4:	e13ffd17 	ldw	r4,-12(fp)
 801deb8:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801debc:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
 801dec0:	e0bffc17 	ldw	r2,-16(fp)
 801dec4:	10800044 	addi	r2,r2,1
 801dec8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 801decc:	e0bffb17 	ldw	r2,-20(fp)
 801ded0:	10bfffc4 	addi	r2,r2,-1
 801ded4:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 801ded8:	e0bff903 	ldbu	r2,-28(fp)
 801dedc:	1000101e 	bne	r2,zero,801df20 <alt_avalon_i2c_master_transmit+0x180>
 801dee0:	e0bffe17 	ldw	r2,-8(fp)
 801dee4:	10001726 	beq	r2,zero,801df44 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801dee8:	00000d06 	br	801df20 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801deec:	e0bfff17 	ldw	r2,-4(fp)
 801def0:	108002a8 	cmpgeui	r2,r2,10
 801def4:	1000021e 	bne	r2,zero,801df00 <alt_avalon_i2c_master_transmit+0x160>
 801def8:	0109c404 	movi	r4,10000
 801defc:	803e6700 	call	803e670 <alt_busy_sleep>
            if (--timeout == 0)
 801df00:	e0bfff17 	ldw	r2,-4(fp)
 801df04:	10bfffc4 	addi	r2,r2,-1
 801df08:	e0bfff15 	stw	r2,-4(fp)
 801df0c:	e0bfff17 	ldw	r2,-4(fp)
 801df10:	1000031e 	bne	r2,zero,801df20 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801df14:	00bfff84 	movi	r2,-2
 801df18:	e0bffe15 	stw	r2,-8(fp)
               break;
 801df1c:	00000306 	br	801df2c <alt_avalon_i2c_master_transmit+0x18c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801df20:	e13ffd17 	ldw	r4,-12(fp)
 801df24:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801df28:	103ff01e 	bne	r2,zero,801deec <alt_avalon_i2c_master_transmit+0x14c>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 801df2c:	e0bffe04 	addi	r2,fp,-8
 801df30:	100b883a 	mov	r5,r2
 801df34:	e13ffd17 	ldw	r4,-12(fp)
 801df38:	801d7e80 	call	801d7e8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801df3c:	e13ffd17 	ldw	r4,-12(fp)
 801df40:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>
    }


    return status;
 801df44:	e0bffe17 	ldw	r2,-8(fp)
}
 801df48:	e037883a 	mov	sp,fp
 801df4c:	dfc00117 	ldw	ra,4(sp)
 801df50:	df000017 	ldw	fp,0(sp)
 801df54:	dec00204 	addi	sp,sp,8
 801df58:	f800283a 	ret

0801df5c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 801df5c:	defff604 	addi	sp,sp,-40
 801df60:	dfc00915 	stw	ra,36(sp)
 801df64:	df000815 	stw	fp,32(sp)
 801df68:	df000804 	addi	fp,sp,32
 801df6c:	e13ffc15 	stw	r4,-16(fp)
 801df70:	e17ffb15 	stw	r5,-20(fp)
 801df74:	e1bffa15 	stw	r6,-24(fp)
 801df78:	3807883a 	mov	r3,r7
 801df7c:	e0800217 	ldw	r2,8(fp)
 801df80:	e0fff905 	stb	r3,-28(fp)
 801df84:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801df88:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
 801df8c:	e0bffa17 	ldw	r2,-24(fp)
 801df90:	1089c424 	muli	r2,r2,10000
 801df94:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801df98:	e0bffc17 	ldw	r2,-16(fp)
 801df9c:	10800717 	ldw	r2,28(r2)
 801dfa0:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
 801dfa4:	e0bffa17 	ldw	r2,-24(fp)
 801dfa8:	1000021e 	bne	r2,zero,801dfb4 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801dfac:	0005883a 	mov	r2,zero
 801dfb0:	00006706 	br	801e150 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801dfb4:	e0bffc17 	ldw	r2,-16(fp)
 801dfb8:	10c00617 	ldw	r3,24(r2)
 801dfbc:	008200b4 	movhi	r2,2050
 801dfc0:	10b31604 	addi	r2,r2,-13224
 801dfc4:	18800226 	beq	r3,r2,801dfd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 801dfc8:	00bfff44 	movi	r2,-3
 801dfcc:	00006006 	br	801e150 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801dfd0:	e0bff903 	ldbu	r2,-28(fp)
 801dfd4:	10000a1e 	bne	r2,zero,801e000 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801dfd8:	e13ffc17 	ldw	r4,-16(fp)
 801dfdc:	801d0180 	call	801d018 <alt_avalon_i2c_enable>
 801dfe0:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801dfe4:	e0bfff17 	ldw	r2,-4(fp)
 801dfe8:	10000226 	beq	r2,zero,801dff4 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
 801dfec:	e0bfff17 	ldw	r2,-4(fp)
 801dff0:	00005706 	br	801e150 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801dff4:	01400704 	movi	r5,28
 801dff8:	e13ffc17 	ldw	r4,-16(fp)
 801dffc:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 801e000:	e0bff903 	ldbu	r2,-28(fp)
 801e004:	100d883a 	mov	r6,r2
 801e008:	000b883a 	mov	r5,zero
 801e00c:	e13ffc17 	ldw	r4,-16(fp)
 801e010:	801d68c0 	call	801d68c <alt_avalon_i2c_send_address>
 801e014:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 801e018:	e0bfff17 	ldw	r2,-4(fp)
 801e01c:	1000271e 	bne	r2,zero,801e0bc <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801e020:	00000f06 	br	801e060 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801e024:	e0bffb17 	ldw	r2,-20(fp)
 801e028:	10800003 	ldbu	r2,0(r2)
 801e02c:	10803fcc 	andi	r2,r2,255
 801e030:	000f883a 	mov	r7,zero
 801e034:	000d883a 	mov	r6,zero
 801e038:	100b883a 	mov	r5,r2
 801e03c:	e13ffc17 	ldw	r4,-16(fp)
 801e040:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e044:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
 801e048:	e0bffb17 	ldw	r2,-20(fp)
 801e04c:	10800044 	addi	r2,r2,1
 801e050:	e0bffb15 	stw	r2,-20(fp)
            --size;
 801e054:	e0bffa17 	ldw	r2,-24(fp)
 801e058:	10bfffc4 	addi	r2,r2,-1
 801e05c:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801e060:	e0bffa17 	ldw	r2,-24(fp)
 801e064:	108000b0 	cmpltui	r2,r2,2
 801e068:	1000021e 	bne	r2,zero,801e074 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
 801e06c:	e0bfff17 	ldw	r2,-4(fp)
 801e070:	103fec26 	beq	r2,zero,801e024 <alt_avalon_i2c_master_transmit_using_interrupts+0xc8>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801e074:	e0bfff17 	ldw	r2,-4(fp)
 801e078:	1000101e 	bne	r2,zero,801e0bc <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801e07c:	e0bffb17 	ldw	r2,-20(fp)
 801e080:	10800003 	ldbu	r2,0(r2)
 801e084:	10803fcc 	andi	r2,r2,255
 801e088:	e0fff803 	ldbu	r3,-32(fp)
 801e08c:	180f883a 	mov	r7,r3
 801e090:	000d883a 	mov	r6,zero
 801e094:	100b883a 	mov	r5,r2
 801e098:	e13ffc17 	ldw	r4,-16(fp)
 801e09c:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e0a0:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
 801e0a4:	e0bffb17 	ldw	r2,-20(fp)
 801e0a8:	10800044 	addi	r2,r2,1
 801e0ac:	e0bffb15 	stw	r2,-20(fp)
            --size;
 801e0b0:	e0bffa17 	ldw	r2,-24(fp)
 801e0b4:	10bfffc4 	addi	r2,r2,-1
 801e0b8:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801e0bc:	e0bfff17 	ldw	r2,-4(fp)
 801e0c0:	10001426 	beq	r2,zero,801e114 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e0c4:	00000d06 	br	801e0fc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 801e0c8:	e0bffe17 	ldw	r2,-8(fp)
 801e0cc:	108002a8 	cmpgeui	r2,r2,10
 801e0d0:	1000021e 	bne	r2,zero,801e0dc <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
 801e0d4:	0109c404 	movi	r4,10000
 801e0d8:	803e6700 	call	803e670 <alt_busy_sleep>
            if (--timeout == 0)
 801e0dc:	e0bffe17 	ldw	r2,-8(fp)
 801e0e0:	10bfffc4 	addi	r2,r2,-1
 801e0e4:	e0bffe15 	stw	r2,-8(fp)
 801e0e8:	e0bffe17 	ldw	r2,-8(fp)
 801e0ec:	1000031e 	bne	r2,zero,801e0fc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801e0f0:	00bfff84 	movi	r2,-2
 801e0f4:	e0bfff15 	stw	r2,-4(fp)
               break;
 801e0f8:	00000306 	br	801e108 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e0fc:	e13ffc17 	ldw	r4,-16(fp)
 801e100:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801e104:	103ff01e 	bne	r2,zero,801e0c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x16c>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801e108:	e13ffc17 	ldw	r4,-16(fp)
 801e10c:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>
 801e110:	00000e06 	br	801e14c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
 801e114:	e0bff803 	ldbu	r2,-32(fp)
 801e118:	10000c26 	beq	r2,zero,801e14c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801e11c:	01400704 	movi	r5,28
 801e120:	e13ffc17 	ldw	r4,-16(fp)
 801e124:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 801e128:	000b883a 	mov	r5,zero
 801e12c:	e13ffc17 	ldw	r4,-16(fp)
 801e130:	801e8480 	call	801e848 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 801e134:	e0bffd17 	ldw	r2,-12(fp)
 801e138:	00c00044 	movi	r3,1
 801e13c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 801e140:	01400044 	movi	r5,1
 801e144:	e13ffc17 	ldw	r4,-16(fp)
 801e148:	801e6a00 	call	801e6a0 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 801e14c:	e0bfff17 	ldw	r2,-4(fp)
}
 801e150:	e037883a 	mov	sp,fp
 801e154:	dfc00117 	ldw	ra,4(sp)
 801e158:	df000017 	ldw	fp,0(sp)
 801e15c:	dec00204 	addi	sp,sp,8
 801e160:	f800283a 	ret

0801e164 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 801e164:	defff404 	addi	sp,sp,-48
 801e168:	dfc00b15 	stw	ra,44(sp)
 801e16c:	df000a15 	stw	fp,40(sp)
 801e170:	df000a04 	addi	fp,sp,40
 801e174:	e13ffa15 	stw	r4,-24(fp)
 801e178:	e17ff915 	stw	r5,-28(fp)
 801e17c:	e1bff815 	stw	r6,-32(fp)
 801e180:	3807883a 	mov	r3,r7
 801e184:	e0800217 	ldw	r2,8(fp)
 801e188:	e0fff705 	stb	r3,-36(fp)
 801e18c:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801e190:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 801e194:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
 801e198:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 801e19c:	e0bff817 	ldw	r2,-32(fp)
 801e1a0:	1000021e 	bne	r2,zero,801e1ac <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801e1a4:	0005883a 	mov	r2,zero
 801e1a8:	00006c06 	br	801e35c <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801e1ac:	e0bff703 	ldbu	r2,-36(fp)
 801e1b0:	10000a1e 	bne	r2,zero,801e1dc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801e1b4:	e13ffa17 	ldw	r4,-24(fp)
 801e1b8:	801d0180 	call	801d018 <alt_avalon_i2c_enable>
 801e1bc:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801e1c0:	e0bffc17 	ldw	r2,-16(fp)
 801e1c4:	10000226 	beq	r2,zero,801e1d0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 801e1c8:	e0bffc17 	ldw	r2,-16(fp)
 801e1cc:	00006306 	br	801e35c <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801e1d0:	01400704 	movi	r5,28
 801e1d4:	e13ffa17 	ldw	r4,-24(fp)
 801e1d8:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 801e1dc:	e0bff703 	ldbu	r2,-36(fp)
 801e1e0:	100d883a 	mov	r6,r2
 801e1e4:	01400044 	movi	r5,1
 801e1e8:	e13ffa17 	ldw	r4,-24(fp)
 801e1ec:	801d68c0 	call	801d68c <alt_avalon_i2c_send_address>
 801e1f0:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 801e1f4:	e0bffc17 	ldw	r2,-16(fp)
 801e1f8:	1000341e 	bne	r2,zero,801e2cc <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801e1fc:	00001906 	br	801e264 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801e200:	000f883a 	mov	r7,zero
 801e204:	000d883a 	mov	r6,zero
 801e208:	000b883a 	mov	r5,zero
 801e20c:	e13ffa17 	ldw	r4,-24(fp)
 801e210:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e214:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
 801e218:	e0bffd17 	ldw	r2,-12(fp)
 801e21c:	10800044 	addi	r2,r2,1
 801e220:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 801e224:	e0bffc17 	ldw	r2,-16(fp)
 801e228:	10000e1e 	bne	r2,zero,801e264 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 801e22c:	e0bffb04 	addi	r2,fp,-20
 801e230:	100f883a 	mov	r7,r2
 801e234:	000d883a 	mov	r6,zero
 801e238:	e17ff917 	ldw	r5,-28(fp)
 801e23c:	e13ffa17 	ldw	r4,-24(fp)
 801e240:	801d44c0 	call	801d44c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 801e244:	e0bffb17 	ldw	r2,-20(fp)
 801e248:	e0fff917 	ldw	r3,-28(fp)
 801e24c:	1885883a 	add	r2,r3,r2
 801e250:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
 801e254:	e0bffb17 	ldw	r2,-20(fp)
 801e258:	e0fffe17 	ldw	r3,-8(fp)
 801e25c:	1885883a 	add	r2,r3,r2
 801e260:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801e264:	e0bff817 	ldw	r2,-32(fp)
 801e268:	10bfffc4 	addi	r2,r2,-1
 801e26c:	e0fffd17 	ldw	r3,-12(fp)
 801e270:	1880022e 	bgeu	r3,r2,801e27c <alt_avalon_i2c_master_receive+0x118>
 801e274:	e0bffc17 	ldw	r2,-16(fp)
 801e278:	103fe126 	beq	r2,zero,801e200 <alt_avalon_i2c_master_receive+0x9c>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801e27c:	e0bffc17 	ldw	r2,-16(fp)
 801e280:	1000121e 	bne	r2,zero,801e2cc <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801e284:	e0bff603 	ldbu	r2,-40(fp)
 801e288:	100f883a 	mov	r7,r2
 801e28c:	000d883a 	mov	r6,zero
 801e290:	000b883a 	mov	r5,zero
 801e294:	e13ffa17 	ldw	r4,-24(fp)
 801e298:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e29c:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 801e2a0:	00000a06 	br	801e2cc <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 801e2a4:	e17ff917 	ldw	r5,-28(fp)
 801e2a8:	e13ffa17 	ldw	r4,-24(fp)
 801e2ac:	801d4f80 	call	801d4f8 <alt_avalon_i2c_rx_read>
 801e2b0:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
 801e2b4:	e0bff917 	ldw	r2,-28(fp)
 801e2b8:	10800044 	addi	r2,r2,1
 801e2bc:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
 801e2c0:	e0bffe17 	ldw	r2,-8(fp)
 801e2c4:	10800044 	addi	r2,r2,1
 801e2c8:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 801e2cc:	e0fffe17 	ldw	r3,-8(fp)
 801e2d0:	e0bff817 	ldw	r2,-32(fp)
 801e2d4:	1880022e 	bgeu	r3,r2,801e2e0 <alt_avalon_i2c_master_receive+0x17c>
 801e2d8:	e0bffc17 	ldw	r2,-16(fp)
 801e2dc:	103ff126 	beq	r2,zero,801e2a4 <alt_avalon_i2c_master_receive+0x140>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 801e2e0:	e0bff603 	ldbu	r2,-40(fp)
 801e2e4:	1000021e 	bne	r2,zero,801e2f0 <alt_avalon_i2c_master_receive+0x18c>
 801e2e8:	e0bffc17 	ldw	r2,-16(fp)
 801e2ec:	10001a26 	beq	r2,zero,801e358 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
 801e2f0:	e0bff817 	ldw	r2,-32(fp)
 801e2f4:	1089c424 	muli	r2,r2,10000
 801e2f8:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e2fc:	00000d06 	br	801e334 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801e300:	e0bfff17 	ldw	r2,-4(fp)
 801e304:	108002a8 	cmpgeui	r2,r2,10
 801e308:	1000021e 	bne	r2,zero,801e314 <alt_avalon_i2c_master_receive+0x1b0>
 801e30c:	0109c404 	movi	r4,10000
 801e310:	803e6700 	call	803e670 <alt_busy_sleep>
            if (--timeout == 0)
 801e314:	e0bfff17 	ldw	r2,-4(fp)
 801e318:	10bfffc4 	addi	r2,r2,-1
 801e31c:	e0bfff15 	stw	r2,-4(fp)
 801e320:	e0bfff17 	ldw	r2,-4(fp)
 801e324:	1000031e 	bne	r2,zero,801e334 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801e328:	00bfff84 	movi	r2,-2
 801e32c:	e0bffc15 	stw	r2,-16(fp)
               break;
 801e330:	00000306 	br	801e340 <alt_avalon_i2c_master_receive+0x1dc>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e334:	e13ffa17 	ldw	r4,-24(fp)
 801e338:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801e33c:	103ff01e 	bne	r2,zero,801e300 <alt_avalon_i2c_master_receive+0x19c>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 801e340:	e0bffc04 	addi	r2,fp,-16
 801e344:	100b883a 	mov	r5,r2
 801e348:	e13ffa17 	ldw	r4,-24(fp)
 801e34c:	801d7e80 	call	801d7e8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801e350:	e13ffa17 	ldw	r4,-24(fp)
 801e354:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>
    }

    return status;
 801e358:	e0bffc17 	ldw	r2,-16(fp)
}
 801e35c:	e037883a 	mov	sp,fp
 801e360:	dfc00117 	ldw	ra,4(sp)
 801e364:	df000017 	ldw	fp,0(sp)
 801e368:	dec00204 	addi	sp,sp,8
 801e36c:	f800283a 	ret

0801e370 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 801e370:	defff504 	addi	sp,sp,-44
 801e374:	dfc00a15 	stw	ra,40(sp)
 801e378:	df000915 	stw	fp,36(sp)
 801e37c:	df000904 	addi	fp,sp,36
 801e380:	e13ffb15 	stw	r4,-20(fp)
 801e384:	e17ffa15 	stw	r5,-24(fp)
 801e388:	e1bff915 	stw	r6,-28(fp)
 801e38c:	3807883a 	mov	r3,r7
 801e390:	e0800217 	ldw	r2,8(fp)
 801e394:	e0fff805 	stb	r3,-32(fp)
 801e398:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801e39c:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801e3a0:	e0bffb17 	ldw	r2,-20(fp)
 801e3a4:	10800717 	ldw	r2,28(r2)
 801e3a8:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 801e3ac:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
 801e3b0:	e0bff917 	ldw	r2,-28(fp)
 801e3b4:	1000021e 	bne	r2,zero,801e3c0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801e3b8:	0005883a 	mov	r2,zero
 801e3bc:	00006206 	br	801e548 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801e3c0:	e0bffb17 	ldw	r2,-20(fp)
 801e3c4:	10c00617 	ldw	r3,24(r2)
 801e3c8:	008200b4 	movhi	r2,2050
 801e3cc:	10b31604 	addi	r2,r2,-13224
 801e3d0:	18800226 	beq	r3,r2,801e3dc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 801e3d4:	00bfff44 	movi	r2,-3
 801e3d8:	00005b06 	br	801e548 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801e3dc:	e0bff803 	ldbu	r2,-32(fp)
 801e3e0:	10000a1e 	bne	r2,zero,801e40c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801e3e4:	e13ffb17 	ldw	r4,-20(fp)
 801e3e8:	801d0180 	call	801d018 <alt_avalon_i2c_enable>
 801e3ec:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801e3f0:	e0bfff17 	ldw	r2,-4(fp)
 801e3f4:	10000226 	beq	r2,zero,801e400 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 801e3f8:	e0bfff17 	ldw	r2,-4(fp)
 801e3fc:	00005206 	br	801e548 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801e400:	01400704 	movi	r5,28
 801e404:	e13ffb17 	ldw	r4,-20(fp)
 801e408:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 801e40c:	e0bff803 	ldbu	r2,-32(fp)
 801e410:	100d883a 	mov	r6,r2
 801e414:	01400044 	movi	r5,1
 801e418:	e13ffb17 	ldw	r4,-20(fp)
 801e41c:	801d68c0 	call	801d68c <alt_avalon_i2c_send_address>
 801e420:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 801e424:	e0bfff17 	ldw	r2,-4(fp)
 801e428:	1000191e 	bne	r2,zero,801e490 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801e42c:	00000906 	br	801e454 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801e430:	000f883a 	mov	r7,zero
 801e434:	000d883a 	mov	r6,zero
 801e438:	000b883a 	mov	r5,zero
 801e43c:	e13ffb17 	ldw	r4,-20(fp)
 801e440:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e444:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
 801e448:	e0bffd17 	ldw	r2,-12(fp)
 801e44c:	10800044 	addi	r2,r2,1
 801e450:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801e454:	e0bff917 	ldw	r2,-28(fp)
 801e458:	10bfffc4 	addi	r2,r2,-1
 801e45c:	e0fffd17 	ldw	r3,-12(fp)
 801e460:	1880022e 	bgeu	r3,r2,801e46c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 801e464:	e0bfff17 	ldw	r2,-4(fp)
 801e468:	103ff126 	beq	r2,zero,801e430 <alt_avalon_i2c_master_receive_using_interrupts+0xc0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801e46c:	e0bfff17 	ldw	r2,-4(fp)
 801e470:	1000071e 	bne	r2,zero,801e490 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801e474:	e0bff703 	ldbu	r2,-36(fp)
 801e478:	100f883a 	mov	r7,r2
 801e47c:	000d883a 	mov	r6,zero
 801e480:	000b883a 	mov	r5,zero
 801e484:	e13ffb17 	ldw	r4,-20(fp)
 801e488:	801d5a00 	call	801d5a0 <alt_avalon_i2c_cmd_write>
 801e48c:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801e490:	e0bfff17 	ldw	r2,-4(fp)
 801e494:	10001726 	beq	r2,zero,801e4f4 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
 801e498:	e0bff917 	ldw	r2,-28(fp)
 801e49c:	1089c424 	muli	r2,r2,10000
 801e4a0:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e4a4:	00000d06 	br	801e4dc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801e4a8:	e0bffe17 	ldw	r2,-8(fp)
 801e4ac:	108002a8 	cmpgeui	r2,r2,10
 801e4b0:	1000021e 	bne	r2,zero,801e4bc <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
 801e4b4:	0109c404 	movi	r4,10000
 801e4b8:	803e6700 	call	803e670 <alt_busy_sleep>
            if (--timeout == 0)
 801e4bc:	e0bffe17 	ldw	r2,-8(fp)
 801e4c0:	10bfffc4 	addi	r2,r2,-1
 801e4c4:	e0bffe15 	stw	r2,-8(fp)
 801e4c8:	e0bffe17 	ldw	r2,-8(fp)
 801e4cc:	1000031e 	bne	r2,zero,801e4dc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801e4d0:	00bfff84 	movi	r2,-2
 801e4d4:	e0bfff15 	stw	r2,-4(fp)
               break;
 801e4d8:	00000306 	br	801e4e8 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801e4dc:	e13ffb17 	ldw	r4,-20(fp)
 801e4e0:	801d4080 	call	801d408 <alt_avalon_i2c_is_busy>
 801e4e4:	103ff01e 	bne	r2,zero,801e4a8 <alt_avalon_i2c_master_receive_using_interrupts+0x138>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801e4e8:	e13ffb17 	ldw	r4,-20(fp)
 801e4ec:	801d0b00 	call	801d0b0 <alt_avalon_i2c_disable>
 801e4f0:	00001406 	br	801e544 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
 801e4f4:	e0bff703 	ldbu	r2,-36(fp)
 801e4f8:	10001226 	beq	r2,zero,801e544 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801e4fc:	01400704 	movi	r5,28
 801e500:	e13ffb17 	ldw	r4,-20(fp)
 801e504:	801e5f80 	call	801e5f8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 801e508:	000b883a 	mov	r5,zero
 801e50c:	e13ffb17 	ldw	r4,-20(fp)
 801e510:	801e7980 	call	801e798 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 801e514:	e0bffc17 	ldw	r2,-16(fp)
 801e518:	00c00084 	movi	r3,2
 801e51c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 801e520:	e0bffc17 	ldw	r2,-16(fp)
 801e524:	e0fffa17 	ldw	r3,-24(fp)
 801e528:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 801e52c:	e0bffc17 	ldw	r2,-16(fp)
 801e530:	e0fff917 	ldw	r3,-28(fp)
 801e534:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 801e538:	01400084 	movi	r5,2
 801e53c:	e13ffb17 	ldw	r4,-20(fp)
 801e540:	801e6a00 	call	801e6a0 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 801e544:	e0bfff17 	ldw	r2,-4(fp)
}
 801e548:	e037883a 	mov	sp,fp
 801e54c:	dfc00117 	ldw	ra,4(sp)
 801e550:	df000017 	ldw	fp,0(sp)
 801e554:	dec00204 	addi	sp,sp,8
 801e558:	f800283a 	ret

0801e55c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 801e55c:	defffd04 	addi	sp,sp,-12
 801e560:	df000215 	stw	fp,8(sp)
 801e564:	df000204 	addi	fp,sp,8
 801e568:	e13fff15 	stw	r4,-4(fp)
 801e56c:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 801e570:	e0bfff17 	ldw	r2,-4(fp)
 801e574:	10800317 	ldw	r2,12(r2)
 801e578:	10800404 	addi	r2,r2,16
 801e57c:	10c00037 	ldwio	r3,0(r2)
 801e580:	e0bfff17 	ldw	r2,-4(fp)
 801e584:	10800317 	ldw	r2,12(r2)
 801e588:	10800304 	addi	r2,r2,12
 801e58c:	10800037 	ldwio	r2,0(r2)
 801e590:	1884703a 	and	r2,r3,r2
 801e594:	1007883a 	mov	r3,r2
 801e598:	e0bffe17 	ldw	r2,-8(fp)
 801e59c:	10c00015 	stw	r3,0(r2)
}
 801e5a0:	0001883a 	nop
 801e5a4:	e037883a 	mov	sp,fp
 801e5a8:	df000017 	ldw	fp,0(sp)
 801e5ac:	dec00104 	addi	sp,sp,4
 801e5b0:	f800283a 	ret

0801e5b4 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 801e5b4:	defffd04 	addi	sp,sp,-12
 801e5b8:	df000215 	stw	fp,8(sp)
 801e5bc:	df000204 	addi	fp,sp,8
 801e5c0:	e13fff15 	stw	r4,-4(fp)
 801e5c4:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 801e5c8:	e0bfff17 	ldw	r2,-4(fp)
 801e5cc:	10800317 	ldw	r2,12(r2)
 801e5d0:	10800404 	addi	r2,r2,16
 801e5d4:	10800037 	ldwio	r2,0(r2)
 801e5d8:	1007883a 	mov	r3,r2
 801e5dc:	e0bffe17 	ldw	r2,-8(fp)
 801e5e0:	10c00015 	stw	r3,0(r2)
}
 801e5e4:	0001883a 	nop
 801e5e8:	e037883a 	mov	sp,fp
 801e5ec:	df000017 	ldw	fp,0(sp)
 801e5f0:	dec00104 	addi	sp,sp,4
 801e5f4:	f800283a 	ret

0801e5f8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801e5f8:	defffd04 	addi	sp,sp,-12
 801e5fc:	df000215 	stw	fp,8(sp)
 801e600:	df000204 	addi	fp,sp,8
 801e604:	e13fff15 	stw	r4,-4(fp)
 801e608:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 801e60c:	e0bfff17 	ldw	r2,-4(fp)
 801e610:	10800317 	ldw	r2,12(r2)
 801e614:	10800404 	addi	r2,r2,16
 801e618:	e0fffe17 	ldw	r3,-8(fp)
 801e61c:	10c00035 	stwio	r3,0(r2)
}
 801e620:	0001883a 	nop
 801e624:	e037883a 	mov	sp,fp
 801e628:	df000017 	ldw	fp,0(sp)
 801e62c:	dec00104 	addi	sp,sp,4
 801e630:	f800283a 	ret

0801e634 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801e634:	defffb04 	addi	sp,sp,-20
 801e638:	dfc00415 	stw	ra,16(sp)
 801e63c:	df000315 	stw	fp,12(sp)
 801e640:	df000304 	addi	fp,sp,12
 801e644:	e13ffe15 	stw	r4,-8(fp)
 801e648:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801e64c:	e0bfff04 	addi	r2,fp,-4
 801e650:	100b883a 	mov	r5,r2
 801e654:	e13ffe17 	ldw	r4,-8(fp)
 801e658:	801e7080 	call	801e708 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 801e65c:	e0bffd17 	ldw	r2,-12(fp)
 801e660:	0086303a 	nor	r3,zero,r2
 801e664:	e0bfff17 	ldw	r2,-4(fp)
 801e668:	1884703a 	and	r2,r3,r2
 801e66c:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801e670:	e0bffe17 	ldw	r2,-8(fp)
 801e674:	10800317 	ldw	r2,12(r2)
 801e678:	10800304 	addi	r2,r2,12
 801e67c:	e0ffff17 	ldw	r3,-4(fp)
 801e680:	18c007cc 	andi	r3,r3,31
 801e684:	10c00035 	stwio	r3,0(r2)
}
 801e688:	0001883a 	nop
 801e68c:	e037883a 	mov	sp,fp
 801e690:	dfc00117 	ldw	ra,4(sp)
 801e694:	df000017 	ldw	fp,0(sp)
 801e698:	dec00204 	addi	sp,sp,8
 801e69c:	f800283a 	ret

0801e6a0 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801e6a0:	defffb04 	addi	sp,sp,-20
 801e6a4:	dfc00415 	stw	ra,16(sp)
 801e6a8:	df000315 	stw	fp,12(sp)
 801e6ac:	df000304 	addi	fp,sp,12
 801e6b0:	e13ffe15 	stw	r4,-8(fp)
 801e6b4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801e6b8:	e0bfff04 	addi	r2,fp,-4
 801e6bc:	100b883a 	mov	r5,r2
 801e6c0:	e13ffe17 	ldw	r4,-8(fp)
 801e6c4:	801e7080 	call	801e708 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 801e6c8:	e0ffff17 	ldw	r3,-4(fp)
 801e6cc:	e0bffd17 	ldw	r2,-12(fp)
 801e6d0:	1884b03a 	or	r2,r3,r2
 801e6d4:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801e6d8:	e0bffe17 	ldw	r2,-8(fp)
 801e6dc:	10800317 	ldw	r2,12(r2)
 801e6e0:	10800304 	addi	r2,r2,12
 801e6e4:	e0ffff17 	ldw	r3,-4(fp)
 801e6e8:	18c007cc 	andi	r3,r3,31
 801e6ec:	10c00035 	stwio	r3,0(r2)
}
 801e6f0:	0001883a 	nop
 801e6f4:	e037883a 	mov	sp,fp
 801e6f8:	dfc00117 	ldw	ra,4(sp)
 801e6fc:	df000017 	ldw	fp,0(sp)
 801e700:	dec00204 	addi	sp,sp,8
 801e704:	f800283a 	ret

0801e708 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 801e708:	defffd04 	addi	sp,sp,-12
 801e70c:	df000215 	stw	fp,8(sp)
 801e710:	df000204 	addi	fp,sp,8
 801e714:	e13fff15 	stw	r4,-4(fp)
 801e718:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 801e71c:	e0bfff17 	ldw	r2,-4(fp)
 801e720:	10800317 	ldw	r2,12(r2)
 801e724:	10800304 	addi	r2,r2,12
 801e728:	10800037 	ldwio	r2,0(r2)
 801e72c:	10c007cc 	andi	r3,r2,31
 801e730:	e0bffe17 	ldw	r2,-8(fp)
 801e734:	10c00015 	stw	r3,0(r2)
}
 801e738:	0001883a 	nop
 801e73c:	e037883a 	mov	sp,fp
 801e740:	df000017 	ldw	fp,0(sp)
 801e744:	dec00104 	addi	sp,sp,4
 801e748:	f800283a 	ret

0801e74c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 801e74c:	defffd04 	addi	sp,sp,-12
 801e750:	df000215 	stw	fp,8(sp)
 801e754:	df000204 	addi	fp,sp,8
 801e758:	e13fff15 	stw	r4,-4(fp)
 801e75c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 801e760:	e0bfff17 	ldw	r2,-4(fp)
 801e764:	10800317 	ldw	r2,12(r2)
 801e768:	10800204 	addi	r2,r2,8
 801e76c:	10800037 	ldwio	r2,0(r2)
 801e770:	1005d13a 	srai	r2,r2,4
 801e774:	108000cc 	andi	r2,r2,3
 801e778:	1007883a 	mov	r3,r2
 801e77c:	e0bffe17 	ldw	r2,-8(fp)
 801e780:	10c00015 	stw	r3,0(r2)
}
 801e784:	0001883a 	nop
 801e788:	e037883a 	mov	sp,fp
 801e78c:	df000017 	ldw	fp,0(sp)
 801e790:	dec00104 	addi	sp,sp,4
 801e794:	f800283a 	ret

0801e798 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 801e798:	defffd04 	addi	sp,sp,-12
 801e79c:	df000215 	stw	fp,8(sp)
 801e7a0:	df000204 	addi	fp,sp,8
 801e7a4:	e13fff15 	stw	r4,-4(fp)
 801e7a8:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 801e7ac:	e0bfff17 	ldw	r2,-4(fp)
 801e7b0:	10800317 	ldw	r2,12(r2)
 801e7b4:	10800204 	addi	r2,r2,8
 801e7b8:	e0ffff17 	ldw	r3,-4(fp)
 801e7bc:	18c00317 	ldw	r3,12(r3)
 801e7c0:	18c00204 	addi	r3,r3,8
 801e7c4:	18c00037 	ldwio	r3,0(r3)
 801e7c8:	1809883a 	mov	r4,r3
 801e7cc:	00fff3c4 	movi	r3,-49
 801e7d0:	20c8703a 	and	r4,r4,r3
 801e7d4:	e0fffe17 	ldw	r3,-8(fp)
 801e7d8:	1806913a 	slli	r3,r3,4
 801e7dc:	18c00c0c 	andi	r3,r3,48
 801e7e0:	20c6b03a 	or	r3,r4,r3
 801e7e4:	10c00035 	stwio	r3,0(r2)
}
 801e7e8:	0001883a 	nop
 801e7ec:	e037883a 	mov	sp,fp
 801e7f0:	df000017 	ldw	fp,0(sp)
 801e7f4:	dec00104 	addi	sp,sp,4
 801e7f8:	f800283a 	ret

0801e7fc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 801e7fc:	defffd04 	addi	sp,sp,-12
 801e800:	df000215 	stw	fp,8(sp)
 801e804:	df000204 	addi	fp,sp,8
 801e808:	e13fff15 	stw	r4,-4(fp)
 801e80c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 801e810:	e0bfff17 	ldw	r2,-4(fp)
 801e814:	10800317 	ldw	r2,12(r2)
 801e818:	10800204 	addi	r2,r2,8
 801e81c:	10800037 	ldwio	r2,0(r2)
 801e820:	1005d0ba 	srai	r2,r2,2
 801e824:	108000cc 	andi	r2,r2,3
 801e828:	1007883a 	mov	r3,r2
 801e82c:	e0bffe17 	ldw	r2,-8(fp)
 801e830:	10c00015 	stw	r3,0(r2)
}
 801e834:	0001883a 	nop
 801e838:	e037883a 	mov	sp,fp
 801e83c:	df000017 	ldw	fp,0(sp)
 801e840:	dec00104 	addi	sp,sp,4
 801e844:	f800283a 	ret

0801e848 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 801e848:	defffd04 	addi	sp,sp,-12
 801e84c:	df000215 	stw	fp,8(sp)
 801e850:	df000204 	addi	fp,sp,8
 801e854:	e13fff15 	stw	r4,-4(fp)
 801e858:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 801e85c:	e0bfff17 	ldw	r2,-4(fp)
 801e860:	10800317 	ldw	r2,12(r2)
 801e864:	10800204 	addi	r2,r2,8
 801e868:	e0ffff17 	ldw	r3,-4(fp)
 801e86c:	18c00317 	ldw	r3,12(r3)
 801e870:	18c00204 	addi	r3,r3,8
 801e874:	18c00037 	ldwio	r3,0(r3)
 801e878:	1809883a 	mov	r4,r3
 801e87c:	00fffcc4 	movi	r3,-13
 801e880:	20c8703a 	and	r4,r4,r3
 801e884:	e0fffe17 	ldw	r3,-8(fp)
 801e888:	180690ba 	slli	r3,r3,2
 801e88c:	18c0030c 	andi	r3,r3,12
 801e890:	20c6b03a 	or	r3,r4,r3
 801e894:	10c00035 	stwio	r3,0(r2)
}
 801e898:	0001883a 	nop
 801e89c:	e037883a 	mov	sp,fp
 801e8a0:	df000017 	ldw	fp,0(sp)
 801e8a4:	dec00104 	addi	sp,sp,4
 801e8a8:	f800283a 	ret

0801e8ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801e8ac:	defffa04 	addi	sp,sp,-24
 801e8b0:	dfc00515 	stw	ra,20(sp)
 801e8b4:	df000415 	stw	fp,16(sp)
 801e8b8:	df000404 	addi	fp,sp,16
 801e8bc:	e13ffe15 	stw	r4,-8(fp)
 801e8c0:	e17ffd15 	stw	r5,-12(fp)
 801e8c4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801e8c8:	e0bffe17 	ldw	r2,-8(fp)
 801e8cc:	10800017 	ldw	r2,0(r2)
 801e8d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801e8d4:	e0bfff17 	ldw	r2,-4(fp)
 801e8d8:	10c00a04 	addi	r3,r2,40
 801e8dc:	e0bffe17 	ldw	r2,-8(fp)
 801e8e0:	10800217 	ldw	r2,8(r2)
 801e8e4:	100f883a 	mov	r7,r2
 801e8e8:	e1bffc17 	ldw	r6,-16(fp)
 801e8ec:	e17ffd17 	ldw	r5,-12(fp)
 801e8f0:	1809883a 	mov	r4,r3
 801e8f4:	801f0740 	call	801f074 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801e8f8:	e037883a 	mov	sp,fp
 801e8fc:	dfc00117 	ldw	ra,4(sp)
 801e900:	df000017 	ldw	fp,0(sp)
 801e904:	dec00204 	addi	sp,sp,8
 801e908:	f800283a 	ret

0801e90c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801e90c:	defffa04 	addi	sp,sp,-24
 801e910:	dfc00515 	stw	ra,20(sp)
 801e914:	df000415 	stw	fp,16(sp)
 801e918:	df000404 	addi	fp,sp,16
 801e91c:	e13ffe15 	stw	r4,-8(fp)
 801e920:	e17ffd15 	stw	r5,-12(fp)
 801e924:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801e928:	e0bffe17 	ldw	r2,-8(fp)
 801e92c:	10800017 	ldw	r2,0(r2)
 801e930:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801e934:	e0bfff17 	ldw	r2,-4(fp)
 801e938:	10c00a04 	addi	r3,r2,40
 801e93c:	e0bffe17 	ldw	r2,-8(fp)
 801e940:	10800217 	ldw	r2,8(r2)
 801e944:	100f883a 	mov	r7,r2
 801e948:	e1bffc17 	ldw	r6,-16(fp)
 801e94c:	e17ffd17 	ldw	r5,-12(fp)
 801e950:	1809883a 	mov	r4,r3
 801e954:	801f33c0 	call	801f33c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801e958:	e037883a 	mov	sp,fp
 801e95c:	dfc00117 	ldw	ra,4(sp)
 801e960:	df000017 	ldw	fp,0(sp)
 801e964:	dec00204 	addi	sp,sp,8
 801e968:	f800283a 	ret

0801e96c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801e96c:	defffc04 	addi	sp,sp,-16
 801e970:	dfc00315 	stw	ra,12(sp)
 801e974:	df000215 	stw	fp,8(sp)
 801e978:	df000204 	addi	fp,sp,8
 801e97c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801e980:	e0bffe17 	ldw	r2,-8(fp)
 801e984:	10800017 	ldw	r2,0(r2)
 801e988:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801e98c:	e0bfff17 	ldw	r2,-4(fp)
 801e990:	10c00a04 	addi	r3,r2,40
 801e994:	e0bffe17 	ldw	r2,-8(fp)
 801e998:	10800217 	ldw	r2,8(r2)
 801e99c:	100b883a 	mov	r5,r2
 801e9a0:	1809883a 	mov	r4,r3
 801e9a4:	801ef180 	call	801ef18 <altera_avalon_jtag_uart_close>
}
 801e9a8:	e037883a 	mov	sp,fp
 801e9ac:	dfc00117 	ldw	ra,4(sp)
 801e9b0:	df000017 	ldw	fp,0(sp)
 801e9b4:	dec00204 	addi	sp,sp,8
 801e9b8:	f800283a 	ret

0801e9bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801e9bc:	defffa04 	addi	sp,sp,-24
 801e9c0:	dfc00515 	stw	ra,20(sp)
 801e9c4:	df000415 	stw	fp,16(sp)
 801e9c8:	df000404 	addi	fp,sp,16
 801e9cc:	e13ffe15 	stw	r4,-8(fp)
 801e9d0:	e17ffd15 	stw	r5,-12(fp)
 801e9d4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801e9d8:	e0bffe17 	ldw	r2,-8(fp)
 801e9dc:	10800017 	ldw	r2,0(r2)
 801e9e0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801e9e4:	e0bfff17 	ldw	r2,-4(fp)
 801e9e8:	10800a04 	addi	r2,r2,40
 801e9ec:	e1bffc17 	ldw	r6,-16(fp)
 801e9f0:	e17ffd17 	ldw	r5,-12(fp)
 801e9f4:	1009883a 	mov	r4,r2
 801e9f8:	801ef800 	call	801ef80 <altera_avalon_jtag_uart_ioctl>
}
 801e9fc:	e037883a 	mov	sp,fp
 801ea00:	dfc00117 	ldw	ra,4(sp)
 801ea04:	df000017 	ldw	fp,0(sp)
 801ea08:	dec00204 	addi	sp,sp,8
 801ea0c:	f800283a 	ret

0801ea10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801ea10:	defff404 	addi	sp,sp,-48
 801ea14:	dfc00b15 	stw	ra,44(sp)
 801ea18:	df000a15 	stw	fp,40(sp)
 801ea1c:	df000a04 	addi	fp,sp,40
 801ea20:	e13ff915 	stw	r4,-28(fp)
 801ea24:	e17ff815 	stw	r5,-32(fp)
 801ea28:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 801ea2c:	e0bff917 	ldw	r2,-28(fp)
 801ea30:	10800c04 	addi	r2,r2,48
 801ea34:	e0bffb15 	stw	r2,-20(fp)
 801ea38:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 801ea3c:	e0bffa8b 	ldhu	r2,-22(fp)
 801ea40:	e0fffa44 	addi	r3,fp,-23
 801ea44:	180b883a 	mov	r5,r3
 801ea48:	1009883a 	mov	r4,r2
 801ea4c:	801751c0 	call	801751c <OSFlagCreate>
 801ea50:	1007883a 	mov	r3,r2
 801ea54:	e0bffb17 	ldw	r2,-20(fp)
 801ea58:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 801ea5c:	e0bff917 	ldw	r2,-28(fp)
 801ea60:	10800a04 	addi	r2,r2,40
 801ea64:	e0bffd15 	stw	r2,-12(fp)
 801ea68:	00800044 	movi	r2,1
 801ea6c:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
 801ea70:	e0bffc8b 	ldhu	r2,-14(fp)
 801ea74:	1009883a 	mov	r4,r2
 801ea78:	801a3440 	call	801a344 <OSSemCreate>
 801ea7c:	1007883a 	mov	r3,r2
 801ea80:	e0bffd17 	ldw	r2,-12(fp)
 801ea84:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 801ea88:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
 801ea8c:	e0bff917 	ldw	r2,-28(fp)
 801ea90:	10800b04 	addi	r2,r2,44
 801ea94:	e0bfff15 	stw	r2,-4(fp)
 801ea98:	00800044 	movi	r2,1
 801ea9c:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
 801eaa0:	e0bffe8b 	ldhu	r2,-6(fp)
 801eaa4:	1009883a 	mov	r4,r2
 801eaa8:	801a3440 	call	801a344 <OSSemCreate>
 801eaac:	1007883a 	mov	r3,r2
 801eab0:	e0bfff17 	ldw	r2,-4(fp)
 801eab4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 801eab8:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801eabc:	e0bff917 	ldw	r2,-28(fp)
 801eac0:	00c00044 	movi	r3,1
 801eac4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801eac8:	e0bff917 	ldw	r2,-28(fp)
 801eacc:	10800017 	ldw	r2,0(r2)
 801ead0:	10800104 	addi	r2,r2,4
 801ead4:	1007883a 	mov	r3,r2
 801ead8:	e0bff917 	ldw	r2,-28(fp)
 801eadc:	10800817 	ldw	r2,32(r2)
 801eae0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801eae4:	e0bff817 	ldw	r2,-32(fp)
 801eae8:	e0fff717 	ldw	r3,-36(fp)
 801eaec:	d8000015 	stw	zero,0(sp)
 801eaf0:	e1fff917 	ldw	r7,-28(fp)
 801eaf4:	018200b4 	movhi	r6,2050
 801eaf8:	31bad804 	addi	r6,r6,-5280
 801eafc:	180b883a 	mov	r5,r3
 801eb00:	1009883a 	mov	r4,r2
 801eb04:	803ec700 	call	803ec70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801eb08:	e0bff917 	ldw	r2,-28(fp)
 801eb0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801eb10:	e0bff917 	ldw	r2,-28(fp)
 801eb14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801eb18:	d0e0b317 	ldw	r3,-32052(gp)
 801eb1c:	e1fff917 	ldw	r7,-28(fp)
 801eb20:	018200b4 	movhi	r6,2050
 801eb24:	31bb8304 	addi	r6,r6,-4596
 801eb28:	180b883a 	mov	r5,r3
 801eb2c:	1009883a 	mov	r4,r2
 801eb30:	803e53c0 	call	803e53c <alt_alarm_start>
 801eb34:	1000040e 	bge	r2,zero,801eb48 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801eb38:	e0fff917 	ldw	r3,-28(fp)
 801eb3c:	00a00034 	movhi	r2,32768
 801eb40:	10bfffc4 	addi	r2,r2,-1
 801eb44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801eb48:	0001883a 	nop
 801eb4c:	e037883a 	mov	sp,fp
 801eb50:	dfc00117 	ldw	ra,4(sp)
 801eb54:	df000017 	ldw	fp,0(sp)
 801eb58:	dec00204 	addi	sp,sp,8
 801eb5c:	f800283a 	ret

0801eb60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801eb60:	defff204 	addi	sp,sp,-56
 801eb64:	dfc00d15 	stw	ra,52(sp)
 801eb68:	df000c15 	stw	fp,48(sp)
 801eb6c:	df000c04 	addi	fp,sp,48
 801eb70:	e13ff415 	stw	r4,-48(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801eb74:	e0bff417 	ldw	r2,-48(fp)
 801eb78:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 801eb7c:	e0bffd17 	ldw	r2,-12(fp)
 801eb80:	10800017 	ldw	r2,0(r2)
 801eb84:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801eb88:	e0bffc17 	ldw	r2,-16(fp)
 801eb8c:	10800104 	addi	r2,r2,4
 801eb90:	10800037 	ldwio	r2,0(r2)
 801eb94:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801eb98:	e0bffb17 	ldw	r2,-20(fp)
 801eb9c:	1080c00c 	andi	r2,r2,768
 801eba0:	10009326 	beq	r2,zero,801edf0 <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801eba4:	e0bffb17 	ldw	r2,-20(fp)
 801eba8:	1080400c 	andi	r2,r2,256
 801ebac:	10004826 	beq	r2,zero,801ecd0 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801ebb0:	00800074 	movhi	r2,1
 801ebb4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801ebb8:	e0bffd17 	ldw	r2,-12(fp)
 801ebbc:	10800d17 	ldw	r2,52(r2)
 801ebc0:	10800044 	addi	r2,r2,1
 801ebc4:	1081ffcc 	andi	r2,r2,2047
 801ebc8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 801ebcc:	e0bffd17 	ldw	r2,-12(fp)
 801ebd0:	10800e17 	ldw	r2,56(r2)
 801ebd4:	e0fffa17 	ldw	r3,-24(fp)
 801ebd8:	18802826 	beq	r3,r2,801ec7c <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801ebdc:	e0bffc17 	ldw	r2,-16(fp)
 801ebe0:	10800037 	ldwio	r2,0(r2)
 801ebe4:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801ebe8:	e0bfff17 	ldw	r2,-4(fp)
 801ebec:	10a0000c 	andi	r2,r2,32768
 801ebf0:	10002426 	beq	r2,zero,801ec84 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801ebf4:	e0bffd17 	ldw	r2,-12(fp)
 801ebf8:	10800d17 	ldw	r2,52(r2)
 801ebfc:	e0ffff17 	ldw	r3,-4(fp)
 801ec00:	1809883a 	mov	r4,r3
 801ec04:	e0fffd17 	ldw	r3,-12(fp)
 801ec08:	1885883a 	add	r2,r3,r2
 801ec0c:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801ec10:	e0bffd17 	ldw	r2,-12(fp)
 801ec14:	10800d17 	ldw	r2,52(r2)
 801ec18:	10800044 	addi	r2,r2,1
 801ec1c:	10c1ffcc 	andi	r3,r2,2047
 801ec20:	e0bffd17 	ldw	r2,-12(fp)
 801ec24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 801ec28:	e0bffd17 	ldw	r2,-12(fp)
 801ec2c:	10800c17 	ldw	r2,48(r2)
 801ec30:	e0bff915 	stw	r2,-28(fp)
 801ec34:	00800044 	movi	r2,1
 801ec38:	e0bff88d 	sth	r2,-30(fp)
 801ec3c:	00800044 	movi	r2,1
 801ec40:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 801ec44:	d0a06643 	ldbu	r2,-32359(gp)
 801ec48:	10803fcc 	andi	r2,r2,255
 801ec4c:	10000926 	beq	r2,zero,801ec74 <altera_avalon_jtag_uart_irq+0x114>
  {
    OSFlagPost (group, flags, opt, &err);
 801ec50:	e0bff88b 	ldhu	r2,-30(fp)
 801ec54:	e0fff843 	ldbu	r3,-31(fp)
 801ec58:	e13ff604 	addi	r4,fp,-40
 801ec5c:	200f883a 	mov	r7,r4
 801ec60:	180d883a 	mov	r6,r3
 801ec64:	100b883a 	mov	r5,r2
 801ec68:	e13ff917 	ldw	r4,-28(fp)
 801ec6c:	801816c0 	call	801816c <OSFlagPost>
    return err;
 801ec70:	00000106 	br	801ec78 <altera_avalon_jtag_uart_irq+0x118>
  }
  return OS_ERR_PEND_ISR;
 801ec74:	0001883a 	nop
      {
 801ec78:	003fcf06 	br	801ebb8 <altera_avalon_jtag_uart_irq+0x58>
          break;
 801ec7c:	0001883a 	nop
 801ec80:	00000106 	br	801ec88 <altera_avalon_jtag_uart_irq+0x128>
          break;
 801ec84:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801ec88:	e0bfff17 	ldw	r2,-4(fp)
 801ec8c:	10bfffec 	andhi	r2,r2,65535
 801ec90:	10000f26 	beq	r2,zero,801ecd0 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801ec94:	e0bffd17 	ldw	r2,-12(fp)
 801ec98:	10c00817 	ldw	r3,32(r2)
 801ec9c:	00bfff84 	movi	r2,-2
 801eca0:	1886703a 	and	r3,r3,r2
 801eca4:	e0bffd17 	ldw	r2,-12(fp)
 801eca8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801ecac:	e0bffc17 	ldw	r2,-16(fp)
 801ecb0:	10800104 	addi	r2,r2,4
 801ecb4:	1007883a 	mov	r3,r2
 801ecb8:	e0bffd17 	ldw	r2,-12(fp)
 801ecbc:	10800817 	ldw	r2,32(r2)
 801ecc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801ecc4:	e0bffc17 	ldw	r2,-16(fp)
 801ecc8:	10800104 	addi	r2,r2,4
 801eccc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801ecd0:	e0bffb17 	ldw	r2,-20(fp)
 801ecd4:	1080800c 	andi	r2,r2,512
 801ecd8:	103fab26 	beq	r2,zero,801eb88 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801ecdc:	e0bffb17 	ldw	r2,-20(fp)
 801ece0:	1004d43a 	srli	r2,r2,16
 801ece4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801ece8:	00002706 	br	801ed88 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801ecec:	e0bffc17 	ldw	r2,-16(fp)
 801ecf0:	e0fffd17 	ldw	r3,-12(fp)
 801ecf4:	18c01017 	ldw	r3,64(r3)
 801ecf8:	e13ffd17 	ldw	r4,-12(fp)
 801ecfc:	20c7883a 	add	r3,r4,r3
 801ed00:	18c21103 	ldbu	r3,2116(r3)
 801ed04:	18c03fcc 	andi	r3,r3,255
 801ed08:	18c0201c 	xori	r3,r3,128
 801ed0c:	18ffe004 	addi	r3,r3,-128
 801ed10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801ed14:	e0bffd17 	ldw	r2,-12(fp)
 801ed18:	10801017 	ldw	r2,64(r2)
 801ed1c:	10800044 	addi	r2,r2,1
 801ed20:	10c1ffcc 	andi	r3,r2,2047
 801ed24:	e0bffd17 	ldw	r2,-12(fp)
 801ed28:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 801ed2c:	e0bffd17 	ldw	r2,-12(fp)
 801ed30:	10800c17 	ldw	r2,48(r2)
 801ed34:	e0bff715 	stw	r2,-36(fp)
 801ed38:	00800084 	movi	r2,2
 801ed3c:	e0bff68d 	sth	r2,-38(fp)
 801ed40:	00800044 	movi	r2,1
 801ed44:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
 801ed48:	d0a06643 	ldbu	r2,-32359(gp)
 801ed4c:	10803fcc 	andi	r2,r2,255
 801ed50:	10000926 	beq	r2,zero,801ed78 <altera_avalon_jtag_uart_irq+0x218>
    OSFlagPost (group, flags, opt, &err);
 801ed54:	e0bff68b 	ldhu	r2,-38(fp)
 801ed58:	e0fff643 	ldbu	r3,-39(fp)
 801ed5c:	e13ff5c4 	addi	r4,fp,-41
 801ed60:	200f883a 	mov	r7,r4
 801ed64:	180d883a 	mov	r6,r3
 801ed68:	100b883a 	mov	r5,r2
 801ed6c:	e13ff717 	ldw	r4,-36(fp)
 801ed70:	801816c0 	call	801816c <OSFlagPost>
    return err;
 801ed74:	00000106 	br	801ed7c <altera_avalon_jtag_uart_irq+0x21c>
  return OS_ERR_PEND_ISR;
 801ed78:	0001883a 	nop

        space--;
 801ed7c:	e0bffe17 	ldw	r2,-8(fp)
 801ed80:	10bfffc4 	addi	r2,r2,-1
 801ed84:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 801ed88:	e0bffe17 	ldw	r2,-8(fp)
 801ed8c:	10000526 	beq	r2,zero,801eda4 <altera_avalon_jtag_uart_irq+0x244>
 801ed90:	e0bffd17 	ldw	r2,-12(fp)
 801ed94:	10c01017 	ldw	r3,64(r2)
 801ed98:	e0bffd17 	ldw	r2,-12(fp)
 801ed9c:	10800f17 	ldw	r2,60(r2)
 801eda0:	18bfd21e 	bne	r3,r2,801ecec <altera_avalon_jtag_uart_irq+0x18c>
      }

      if (space > 0)
 801eda4:	e0bffe17 	ldw	r2,-8(fp)
 801eda8:	103f7726 	beq	r2,zero,801eb88 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801edac:	e0bffd17 	ldw	r2,-12(fp)
 801edb0:	10c00817 	ldw	r3,32(r2)
 801edb4:	00bfff44 	movi	r2,-3
 801edb8:	1886703a 	and	r3,r3,r2
 801edbc:	e0bffd17 	ldw	r2,-12(fp)
 801edc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801edc4:	e0bffd17 	ldw	r2,-12(fp)
 801edc8:	10800017 	ldw	r2,0(r2)
 801edcc:	10800104 	addi	r2,r2,4
 801edd0:	1007883a 	mov	r3,r2
 801edd4:	e0bffd17 	ldw	r2,-12(fp)
 801edd8:	10800817 	ldw	r2,32(r2)
 801eddc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801ede0:	e0bffc17 	ldw	r2,-16(fp)
 801ede4:	10800104 	addi	r2,r2,4
 801ede8:	10800037 	ldwio	r2,0(r2)
  {
 801edec:	003f6606 	br	801eb88 <altera_avalon_jtag_uart_irq+0x28>
      break;
 801edf0:	0001883a 	nop
      }
    }
  }
}
 801edf4:	0001883a 	nop
 801edf8:	e037883a 	mov	sp,fp
 801edfc:	dfc00117 	ldw	ra,4(sp)
 801ee00:	df000017 	ldw	fp,0(sp)
 801ee04:	dec00204 	addi	sp,sp,8
 801ee08:	f800283a 	ret

0801ee0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801ee0c:	defff904 	addi	sp,sp,-28
 801ee10:	dfc00615 	stw	ra,24(sp)
 801ee14:	df000515 	stw	fp,20(sp)
 801ee18:	df000504 	addi	fp,sp,20
 801ee1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801ee20:	e0bffb17 	ldw	r2,-20(fp)
 801ee24:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801ee28:	e0bfff17 	ldw	r2,-4(fp)
 801ee2c:	10800017 	ldw	r2,0(r2)
 801ee30:	10800104 	addi	r2,r2,4
 801ee34:	10800037 	ldwio	r2,0(r2)
 801ee38:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801ee3c:	e0bffe17 	ldw	r2,-8(fp)
 801ee40:	1081000c 	andi	r2,r2,1024
 801ee44:	10000b26 	beq	r2,zero,801ee74 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801ee48:	e0bfff17 	ldw	r2,-4(fp)
 801ee4c:	10800017 	ldw	r2,0(r2)
 801ee50:	10800104 	addi	r2,r2,4
 801ee54:	1007883a 	mov	r3,r2
 801ee58:	e0bfff17 	ldw	r2,-4(fp)
 801ee5c:	10800817 	ldw	r2,32(r2)
 801ee60:	10810014 	ori	r2,r2,1024
 801ee64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801ee68:	e0bfff17 	ldw	r2,-4(fp)
 801ee6c:	10000915 	stw	zero,36(r2)
 801ee70:	00002306 	br	801ef00 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801ee74:	e0bfff17 	ldw	r2,-4(fp)
 801ee78:	10c00917 	ldw	r3,36(r2)
 801ee7c:	00a00034 	movhi	r2,32768
 801ee80:	10bfff04 	addi	r2,r2,-4
 801ee84:	10c01e36 	bltu	r2,r3,801ef00 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 801ee88:	e0bfff17 	ldw	r2,-4(fp)
 801ee8c:	10800917 	ldw	r2,36(r2)
 801ee90:	10c00044 	addi	r3,r2,1
 801ee94:	e0bfff17 	ldw	r2,-4(fp)
 801ee98:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 801ee9c:	e0bfff17 	ldw	r2,-4(fp)
 801eea0:	10c00917 	ldw	r3,36(r2)
 801eea4:	e0bfff17 	ldw	r2,-4(fp)
 801eea8:	10800117 	ldw	r2,4(r2)
 801eeac:	18801436 	bltu	r3,r2,801ef00 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 801eeb0:	e0bfff17 	ldw	r2,-4(fp)
 801eeb4:	10800c17 	ldw	r2,48(r2)
 801eeb8:	e0bffd15 	stw	r2,-12(fp)
 801eebc:	00800104 	movi	r2,4
 801eec0:	e0bffc8d 	sth	r2,-14(fp)
 801eec4:	00800044 	movi	r2,1
 801eec8:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
 801eecc:	d0a06643 	ldbu	r2,-32359(gp)
 801eed0:	10803fcc 	andi	r2,r2,255
 801eed4:	10000926 	beq	r2,zero,801eefc <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
 801eed8:	e0bffc8b 	ldhu	r2,-14(fp)
 801eedc:	e0fffc43 	ldbu	r3,-15(fp)
 801eee0:	e13ffc04 	addi	r4,fp,-16
 801eee4:	200f883a 	mov	r7,r4
 801eee8:	180d883a 	mov	r6,r3
 801eeec:	100b883a 	mov	r5,r2
 801eef0:	e13ffd17 	ldw	r4,-12(fp)
 801eef4:	801816c0 	call	801816c <OSFlagPost>
    return err;
 801eef8:	00000106 	br	801ef00 <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
 801eefc:	0001883a 	nop
 801ef00:	d0a0b317 	ldw	r2,-32052(gp)
    }
  }

  return alt_ticks_per_second();
}
 801ef04:	e037883a 	mov	sp,fp
 801ef08:	dfc00117 	ldw	ra,4(sp)
 801ef0c:	df000017 	ldw	fp,0(sp)
 801ef10:	dec00204 	addi	sp,sp,8
 801ef14:	f800283a 	ret

0801ef18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801ef18:	defffd04 	addi	sp,sp,-12
 801ef1c:	df000215 	stw	fp,8(sp)
 801ef20:	df000204 	addi	fp,sp,8
 801ef24:	e13fff15 	stw	r4,-4(fp)
 801ef28:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801ef2c:	00000506 	br	801ef44 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801ef30:	e0bffe17 	ldw	r2,-8(fp)
 801ef34:	1090000c 	andi	r2,r2,16384
 801ef38:	10000226 	beq	r2,zero,801ef44 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801ef3c:	00bffd44 	movi	r2,-11
 801ef40:	00000b06 	br	801ef70 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801ef44:	e0bfff17 	ldw	r2,-4(fp)
 801ef48:	10c01017 	ldw	r3,64(r2)
 801ef4c:	e0bfff17 	ldw	r2,-4(fp)
 801ef50:	10800f17 	ldw	r2,60(r2)
 801ef54:	18800526 	beq	r3,r2,801ef6c <altera_avalon_jtag_uart_close+0x54>
 801ef58:	e0bfff17 	ldw	r2,-4(fp)
 801ef5c:	10c00917 	ldw	r3,36(r2)
 801ef60:	e0bfff17 	ldw	r2,-4(fp)
 801ef64:	10800117 	ldw	r2,4(r2)
 801ef68:	18bff136 	bltu	r3,r2,801ef30 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 801ef6c:	0005883a 	mov	r2,zero
}
 801ef70:	e037883a 	mov	sp,fp
 801ef74:	df000017 	ldw	fp,0(sp)
 801ef78:	dec00104 	addi	sp,sp,4
 801ef7c:	f800283a 	ret

0801ef80 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801ef80:	defffa04 	addi	sp,sp,-24
 801ef84:	df000515 	stw	fp,20(sp)
 801ef88:	df000504 	addi	fp,sp,20
 801ef8c:	e13ffd15 	stw	r4,-12(fp)
 801ef90:	e17ffc15 	stw	r5,-16(fp)
 801ef94:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 801ef98:	00bff9c4 	movi	r2,-25
 801ef9c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 801efa0:	e0bffc17 	ldw	r2,-16(fp)
 801efa4:	109a8060 	cmpeqi	r2,r2,27137
 801efa8:	1000041e 	bne	r2,zero,801efbc <altera_avalon_jtag_uart_ioctl+0x3c>
 801efac:	e0bffc17 	ldw	r2,-16(fp)
 801efb0:	109a80a0 	cmpeqi	r2,r2,27138
 801efb4:	1000181e 	bne	r2,zero,801f018 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801efb8:	00002906 	br	801f060 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 801efbc:	e0bffd17 	ldw	r2,-12(fp)
 801efc0:	10c00117 	ldw	r3,4(r2)
 801efc4:	00a00034 	movhi	r2,32768
 801efc8:	10bfffc4 	addi	r2,r2,-1
 801efcc:	18802126 	beq	r3,r2,801f054 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 801efd0:	e0bffb17 	ldw	r2,-20(fp)
 801efd4:	10800017 	ldw	r2,0(r2)
 801efd8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801efdc:	e0bffe17 	ldw	r2,-8(fp)
 801efe0:	10800090 	cmplti	r2,r2,2
 801efe4:	1000061e 	bne	r2,zero,801f000 <altera_avalon_jtag_uart_ioctl+0x80>
 801efe8:	e0fffe17 	ldw	r3,-8(fp)
 801efec:	00a00034 	movhi	r2,32768
 801eff0:	10bfffc4 	addi	r2,r2,-1
 801eff4:	18800226 	beq	r3,r2,801f000 <altera_avalon_jtag_uart_ioctl+0x80>
 801eff8:	e0bffe17 	ldw	r2,-8(fp)
 801effc:	00000206 	br	801f008 <altera_avalon_jtag_uart_ioctl+0x88>
 801f000:	00a00034 	movhi	r2,32768
 801f004:	10bfff84 	addi	r2,r2,-2
 801f008:	e0fffd17 	ldw	r3,-12(fp)
 801f00c:	18800115 	stw	r2,4(r3)
      rc = 0;
 801f010:	e03fff15 	stw	zero,-4(fp)
    break;
 801f014:	00000f06 	br	801f054 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 801f018:	e0bffd17 	ldw	r2,-12(fp)
 801f01c:	10c00117 	ldw	r3,4(r2)
 801f020:	00a00034 	movhi	r2,32768
 801f024:	10bfffc4 	addi	r2,r2,-1
 801f028:	18800c26 	beq	r3,r2,801f05c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801f02c:	e0bffd17 	ldw	r2,-12(fp)
 801f030:	10c00917 	ldw	r3,36(r2)
 801f034:	e0bffd17 	ldw	r2,-12(fp)
 801f038:	10800117 	ldw	r2,4(r2)
 801f03c:	1885803a 	cmpltu	r2,r3,r2
 801f040:	10c03fcc 	andi	r3,r2,255
 801f044:	e0bffb17 	ldw	r2,-20(fp)
 801f048:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801f04c:	e03fff15 	stw	zero,-4(fp)
    break;
 801f050:	00000206 	br	801f05c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 801f054:	0001883a 	nop
 801f058:	00000106 	br	801f060 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 801f05c:	0001883a 	nop
  }

  return rc;
 801f060:	e0bfff17 	ldw	r2,-4(fp)
}
 801f064:	e037883a 	mov	sp,fp
 801f068:	df000017 	ldw	fp,0(sp)
 801f06c:	dec00104 	addi	sp,sp,4
 801f070:	f800283a 	ret

0801f074 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801f074:	deffec04 	addi	sp,sp,-80
 801f078:	dfc01315 	stw	ra,76(sp)
 801f07c:	df001215 	stw	fp,72(sp)
 801f080:	df001204 	addi	fp,sp,72
 801f084:	e13ff215 	stw	r4,-56(fp)
 801f088:	e17ff115 	stw	r5,-60(fp)
 801f08c:	e1bff015 	stw	r6,-64(fp)
 801f090:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
 801f094:	e0bff117 	ldw	r2,-60(fp)
 801f098:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 801f09c:	e0bff217 	ldw	r2,-56(fp)
 801f0a0:	10800a17 	ldw	r2,40(r2)
 801f0a4:	e0bffa15 	stw	r2,-24(fp)
 801f0a8:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 801f0ac:	e0bff98b 	ldhu	r2,-26(fp)
 801f0b0:	e0fff3c4 	addi	r3,fp,-49
 801f0b4:	180d883a 	mov	r6,r3
 801f0b8:	100b883a 	mov	r5,r2
 801f0bc:	e13ffa17 	ldw	r4,-24(fp)
 801f0c0:	801a6700 	call	801a670 <OSSemPend>

  while (space > 0)
 801f0c4:	00006306 	br	801f254 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801f0c8:	e0bff217 	ldw	r2,-56(fp)
 801f0cc:	10800d17 	ldw	r2,52(r2)
 801f0d0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 801f0d4:	e0bff217 	ldw	r2,-56(fp)
 801f0d8:	10800e17 	ldw	r2,56(r2)
 801f0dc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 801f0e0:	e0fffd17 	ldw	r3,-12(fp)
 801f0e4:	e0bffc17 	ldw	r2,-16(fp)
 801f0e8:	18800536 	bltu	r3,r2,801f100 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 801f0ec:	e0fffd17 	ldw	r3,-12(fp)
 801f0f0:	e0bffc17 	ldw	r2,-16(fp)
 801f0f4:	1885c83a 	sub	r2,r3,r2
 801f0f8:	e0bffe15 	stw	r2,-8(fp)
 801f0fc:	00000406 	br	801f110 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801f100:	00c20004 	movi	r3,2048
 801f104:	e0bffc17 	ldw	r2,-16(fp)
 801f108:	1885c83a 	sub	r2,r3,r2
 801f10c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 801f110:	e0bffe17 	ldw	r2,-8(fp)
 801f114:	10001e26 	beq	r2,zero,801f190 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 801f118:	e0fff017 	ldw	r3,-64(fp)
 801f11c:	e0bffe17 	ldw	r2,-8(fp)
 801f120:	1880022e 	bgeu	r3,r2,801f12c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 801f124:	e0bff017 	ldw	r2,-64(fp)
 801f128:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801f12c:	e0bff217 	ldw	r2,-56(fp)
 801f130:	10c01104 	addi	r3,r2,68
 801f134:	e0bffc17 	ldw	r2,-16(fp)
 801f138:	1885883a 	add	r2,r3,r2
 801f13c:	e1bffe17 	ldw	r6,-8(fp)
 801f140:	100b883a 	mov	r5,r2
 801f144:	e13fff17 	ldw	r4,-4(fp)
 801f148:	80037cc0 	call	80037cc <memcpy>
      ptr   += n;
 801f14c:	e0ffff17 	ldw	r3,-4(fp)
 801f150:	e0bffe17 	ldw	r2,-8(fp)
 801f154:	1885883a 	add	r2,r3,r2
 801f158:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 801f15c:	e0fff017 	ldw	r3,-64(fp)
 801f160:	e0bffe17 	ldw	r2,-8(fp)
 801f164:	1885c83a 	sub	r2,r3,r2
 801f168:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801f16c:	e0fffc17 	ldw	r3,-16(fp)
 801f170:	e0bffe17 	ldw	r2,-8(fp)
 801f174:	1885883a 	add	r2,r3,r2
 801f178:	10c1ffcc 	andi	r3,r2,2047
 801f17c:	e0bff217 	ldw	r2,-56(fp)
 801f180:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 801f184:	e0bff017 	ldw	r2,-64(fp)
 801f188:	00bfcf16 	blt	zero,r2,801f0c8 <altera_avalon_jtag_uart_read+0x54>
 801f18c:	00000106 	br	801f194 <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
 801f190:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 801f194:	e0ffff17 	ldw	r3,-4(fp)
 801f198:	e0bff117 	ldw	r2,-60(fp)
 801f19c:	1880301e 	bne	r3,r2,801f260 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801f1a0:	e0bfef17 	ldw	r2,-68(fp)
 801f1a4:	1090000c 	andi	r2,r2,16384
 801f1a8:	10002f1e 	bne	r2,zero,801f268 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 801f1ac:	d0a06643 	ldbu	r2,-32359(gp)
 801f1b0:	10803fcc 	andi	r2,r2,255
 801f1b4:	10800058 	cmpnei	r2,r2,1
 801f1b8:	1000161e 	bne	r2,zero,801f214 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 801f1bc:	e0bff217 	ldw	r2,-56(fp)
 801f1c0:	10800c17 	ldw	r2,48(r2)
 801f1c4:	e0bff815 	stw	r2,-32(fp)
 801f1c8:	00800144 	movi	r2,5
 801f1cc:	e0bff78d 	sth	r2,-34(fp)
 801f1d0:	00bfe0c4 	movi	r2,-125
 801f1d4:	e0bff745 	stb	r2,-35(fp)
 801f1d8:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
 801f1dc:	d0a06643 	ldbu	r2,-32359(gp)
 801f1e0:	10803fcc 	andi	r2,r2,255
 801f1e4:	10001626 	beq	r2,zero,801f240 <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
 801f1e8:	e0fff78b 	ldhu	r3,-34(fp)
 801f1ec:	e13ff743 	ldbu	r4,-35(fp)
 801f1f0:	e17ff68b 	ldhu	r5,-38(fp)
 801f1f4:	e0bff384 	addi	r2,fp,-50
 801f1f8:	d8800015 	stw	r2,0(sp)
 801f1fc:	280f883a 	mov	r7,r5
 801f200:	200d883a 	mov	r6,r4
 801f204:	180b883a 	mov	r5,r3
 801f208:	e13ff817 	ldw	r4,-32(fp)
 801f20c:	8017b080 	call	8017b08 <OSFlagPend>
    return err;
 801f210:	00000c06 	br	801f244 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801f214:	0001883a 	nop
 801f218:	e0bff217 	ldw	r2,-56(fp)
 801f21c:	10800d17 	ldw	r2,52(r2)
 801f220:	e0fffd17 	ldw	r3,-12(fp)
 801f224:	1880071e 	bne	r3,r2,801f244 <altera_avalon_jtag_uart_read+0x1d0>
 801f228:	e0bff217 	ldw	r2,-56(fp)
 801f22c:	10c00917 	ldw	r3,36(r2)
 801f230:	e0bff217 	ldw	r2,-56(fp)
 801f234:	10800117 	ldw	r2,4(r2)
 801f238:	18bff736 	bltu	r3,r2,801f218 <altera_avalon_jtag_uart_read+0x1a4>
 801f23c:	00000106 	br	801f244 <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
 801f240:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801f244:	e0bff217 	ldw	r2,-56(fp)
 801f248:	10800d17 	ldw	r2,52(r2)
 801f24c:	e0fffd17 	ldw	r3,-12(fp)
 801f250:	18800726 	beq	r3,r2,801f270 <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
 801f254:	e0bff017 	ldw	r2,-64(fp)
 801f258:	00bf9b16 	blt	zero,r2,801f0c8 <altera_avalon_jtag_uart_read+0x54>
 801f25c:	00000506 	br	801f274 <altera_avalon_jtag_uart_read+0x200>
      break;
 801f260:	0001883a 	nop
 801f264:	00000306 	br	801f274 <altera_avalon_jtag_uart_read+0x200>
      break;
 801f268:	0001883a 	nop
 801f26c:	00000106 	br	801f274 <altera_avalon_jtag_uart_read+0x200>
      break;
 801f270:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 801f274:	e0bff217 	ldw	r2,-56(fp)
 801f278:	10800a17 	ldw	r2,40(r2)
 801f27c:	1009883a 	mov	r4,r2
 801f280:	801a9f80 	call	801a9f8 <OSSemPost>

  if (ptr != buffer)
 801f284:	e0ffff17 	ldw	r3,-4(fp)
 801f288:	e0bff117 	ldw	r2,-60(fp)
 801f28c:	18801926 	beq	r3,r2,801f2f4 <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
 801f290:	0005303a 	rdctl	r2,status
 801f294:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f298:	e0fff417 	ldw	r3,-48(fp)
 801f29c:	00bfff84 	movi	r2,-2
 801f2a0:	1884703a 	and	r2,r3,r2
 801f2a4:	1001703a 	wrctl	status,r2
  return context;
 801f2a8:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801f2ac:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801f2b0:	e0bff217 	ldw	r2,-56(fp)
 801f2b4:	10800817 	ldw	r2,32(r2)
 801f2b8:	10c00054 	ori	r3,r2,1
 801f2bc:	e0bff217 	ldw	r2,-56(fp)
 801f2c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801f2c4:	e0bff217 	ldw	r2,-56(fp)
 801f2c8:	10800017 	ldw	r2,0(r2)
 801f2cc:	10800104 	addi	r2,r2,4
 801f2d0:	1007883a 	mov	r3,r2
 801f2d4:	e0bff217 	ldw	r2,-56(fp)
 801f2d8:	10800817 	ldw	r2,32(r2)
 801f2dc:	18800035 	stwio	r2,0(r3)
 801f2e0:	e0bffb17 	ldw	r2,-20(fp)
 801f2e4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 801f2e8:	e0bff517 	ldw	r2,-44(fp)
 801f2ec:	1001703a 	wrctl	status,r2
}
 801f2f0:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801f2f4:	e0ffff17 	ldw	r3,-4(fp)
 801f2f8:	e0bff117 	ldw	r2,-60(fp)
 801f2fc:	18800426 	beq	r3,r2,801f310 <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
 801f300:	e0ffff17 	ldw	r3,-4(fp)
 801f304:	e0bff117 	ldw	r2,-60(fp)
 801f308:	1885c83a 	sub	r2,r3,r2
 801f30c:	00000606 	br	801f328 <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
 801f310:	e0bfef17 	ldw	r2,-68(fp)
 801f314:	1090000c 	andi	r2,r2,16384
 801f318:	10000226 	beq	r2,zero,801f324 <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
 801f31c:	00bffd44 	movi	r2,-11
 801f320:	00000106 	br	801f328 <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
 801f324:	00bffec4 	movi	r2,-5
}
 801f328:	e037883a 	mov	sp,fp
 801f32c:	dfc00117 	ldw	ra,4(sp)
 801f330:	df000017 	ldw	fp,0(sp)
 801f334:	dec00204 	addi	sp,sp,8
 801f338:	f800283a 	ret

0801f33c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801f33c:	deffed04 	addi	sp,sp,-76
 801f340:	dfc01215 	stw	ra,72(sp)
 801f344:	df001115 	stw	fp,68(sp)
 801f348:	df001104 	addi	fp,sp,68
 801f34c:	e13ff315 	stw	r4,-52(fp)
 801f350:	e17ff215 	stw	r5,-56(fp)
 801f354:	e1bff115 	stw	r6,-60(fp)
 801f358:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801f35c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801f360:	e0bff217 	ldw	r2,-56(fp)
 801f364:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 801f368:	e0bff317 	ldw	r2,-52(fp)
 801f36c:	10800b17 	ldw	r2,44(r2)
 801f370:	e0bffa15 	stw	r2,-24(fp)
 801f374:	e03ff98d 	sth	zero,-26(fp)
 801f378:	e0bff98b 	ldhu	r2,-26(fp)
 801f37c:	e0fff404 	addi	r3,fp,-48
 801f380:	180d883a 	mov	r6,r3
 801f384:	100b883a 	mov	r5,r2
 801f388:	e13ffa17 	ldw	r4,-24(fp)
 801f38c:	801a6700 	call	801a670 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801f390:	00003706 	br	801f470 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801f394:	e0bff317 	ldw	r2,-52(fp)
 801f398:	10800f17 	ldw	r2,60(r2)
 801f39c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 801f3a0:	e0bff317 	ldw	r2,-52(fp)
 801f3a4:	10801017 	ldw	r2,64(r2)
 801f3a8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 801f3ac:	e0fffc17 	ldw	r3,-16(fp)
 801f3b0:	e0bfff17 	ldw	r2,-4(fp)
 801f3b4:	1880062e 	bgeu	r3,r2,801f3d0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 801f3b8:	e0ffff17 	ldw	r3,-4(fp)
 801f3bc:	e0bffc17 	ldw	r2,-16(fp)
 801f3c0:	1885c83a 	sub	r2,r3,r2
 801f3c4:	10bfffc4 	addi	r2,r2,-1
 801f3c8:	e0bffe15 	stw	r2,-8(fp)
 801f3cc:	00000b06 	br	801f3fc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 801f3d0:	e0bfff17 	ldw	r2,-4(fp)
 801f3d4:	10000526 	beq	r2,zero,801f3ec <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801f3d8:	00c20004 	movi	r3,2048
 801f3dc:	e0bffc17 	ldw	r2,-16(fp)
 801f3e0:	1885c83a 	sub	r2,r3,r2
 801f3e4:	e0bffe15 	stw	r2,-8(fp)
 801f3e8:	00000406 	br	801f3fc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801f3ec:	00c1ffc4 	movi	r3,2047
 801f3f0:	e0bffc17 	ldw	r2,-16(fp)
 801f3f4:	1885c83a 	sub	r2,r3,r2
 801f3f8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 801f3fc:	e0bffe17 	ldw	r2,-8(fp)
 801f400:	10001e26 	beq	r2,zero,801f47c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 801f404:	e0fff117 	ldw	r3,-60(fp)
 801f408:	e0bffe17 	ldw	r2,-8(fp)
 801f40c:	1880022e 	bgeu	r3,r2,801f418 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 801f410:	e0bff117 	ldw	r2,-60(fp)
 801f414:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801f418:	e0bff317 	ldw	r2,-52(fp)
 801f41c:	10c21104 	addi	r3,r2,2116
 801f420:	e0bffc17 	ldw	r2,-16(fp)
 801f424:	1885883a 	add	r2,r3,r2
 801f428:	e1bffe17 	ldw	r6,-8(fp)
 801f42c:	e17ff217 	ldw	r5,-56(fp)
 801f430:	1009883a 	mov	r4,r2
 801f434:	80037cc0 	call	80037cc <memcpy>
      ptr   += n;
 801f438:	e0fff217 	ldw	r3,-56(fp)
 801f43c:	e0bffe17 	ldw	r2,-8(fp)
 801f440:	1885883a 	add	r2,r3,r2
 801f444:	e0bff215 	stw	r2,-56(fp)
      count -= n;
 801f448:	e0fff117 	ldw	r3,-60(fp)
 801f44c:	e0bffe17 	ldw	r2,-8(fp)
 801f450:	1885c83a 	sub	r2,r3,r2
 801f454:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801f458:	e0fffc17 	ldw	r3,-16(fp)
 801f45c:	e0bffe17 	ldw	r2,-8(fp)
 801f460:	1885883a 	add	r2,r3,r2
 801f464:	10c1ffcc 	andi	r3,r2,2047
 801f468:	e0bff317 	ldw	r2,-52(fp)
 801f46c:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
 801f470:	e0bff117 	ldw	r2,-60(fp)
 801f474:	00bfc716 	blt	zero,r2,801f394 <altera_avalon_jtag_uart_write+0x58>
 801f478:	00000106 	br	801f480 <altera_avalon_jtag_uart_write+0x144>
        break;
 801f47c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 801f480:	0005303a 	rdctl	r2,status
 801f484:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f488:	e0fff717 	ldw	r3,-36(fp)
 801f48c:	00bfff84 	movi	r2,-2
 801f490:	1884703a 	and	r2,r3,r2
 801f494:	1001703a 	wrctl	status,r2
  return context;
 801f498:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801f49c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801f4a0:	e0bff317 	ldw	r2,-52(fp)
 801f4a4:	10800817 	ldw	r2,32(r2)
 801f4a8:	10c00094 	ori	r3,r2,2
 801f4ac:	e0bff317 	ldw	r2,-52(fp)
 801f4b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801f4b4:	e0bff317 	ldw	r2,-52(fp)
 801f4b8:	10800017 	ldw	r2,0(r2)
 801f4bc:	10800104 	addi	r2,r2,4
 801f4c0:	1007883a 	mov	r3,r2
 801f4c4:	e0bff317 	ldw	r2,-52(fp)
 801f4c8:	10800817 	ldw	r2,32(r2)
 801f4cc:	18800035 	stwio	r2,0(r3)
 801f4d0:	e0bffb17 	ldw	r2,-20(fp)
 801f4d4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801f4d8:	e0bff817 	ldw	r2,-32(fp)
 801f4dc:	1001703a 	wrctl	status,r2
}
 801f4e0:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801f4e4:	e0bff117 	ldw	r2,-60(fp)
 801f4e8:	00802c0e 	bge	zero,r2,801f59c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
 801f4ec:	e0bff017 	ldw	r2,-64(fp)
 801f4f0:	1090000c 	andi	r2,r2,16384
 801f4f4:	10002c1e 	bne	r2,zero,801f5a8 <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 801f4f8:	d0a06643 	ldbu	r2,-32359(gp)
 801f4fc:	10803fcc 	andi	r2,r2,255
 801f500:	10800058 	cmpnei	r2,r2,1
 801f504:	1000161e 	bne	r2,zero,801f560 <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 801f508:	e0bff317 	ldw	r2,-52(fp)
 801f50c:	10800c17 	ldw	r2,48(r2)
 801f510:	e0bff615 	stw	r2,-40(fp)
 801f514:	00800184 	movi	r2,6
 801f518:	e0bff58d 	sth	r2,-42(fp)
 801f51c:	00bfe0c4 	movi	r2,-125
 801f520:	e0bff545 	stb	r2,-43(fp)
 801f524:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
 801f528:	d0a06643 	ldbu	r2,-32359(gp)
 801f52c:	10803fcc 	andi	r2,r2,255
 801f530:	10001626 	beq	r2,zero,801f58c <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
 801f534:	e0fff58b 	ldhu	r3,-42(fp)
 801f538:	e13ff543 	ldbu	r4,-43(fp)
 801f53c:	e17ff48b 	ldhu	r5,-46(fp)
 801f540:	e0bff444 	addi	r2,fp,-47
 801f544:	d8800015 	stw	r2,0(sp)
 801f548:	280f883a 	mov	r7,r5
 801f54c:	200d883a 	mov	r6,r4
 801f550:	180b883a 	mov	r5,r3
 801f554:	e13ff617 	ldw	r4,-40(fp)
 801f558:	8017b080 	call	8017b08 <OSFlagPend>
    return err;
 801f55c:	00000c06 	br	801f590 <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801f560:	0001883a 	nop
 801f564:	e0bff317 	ldw	r2,-52(fp)
 801f568:	10801017 	ldw	r2,64(r2)
 801f56c:	e0ffff17 	ldw	r3,-4(fp)
 801f570:	1880071e 	bne	r3,r2,801f590 <altera_avalon_jtag_uart_write+0x254>
 801f574:	e0bff317 	ldw	r2,-52(fp)
 801f578:	10c00917 	ldw	r3,36(r2)
 801f57c:	e0bff317 	ldw	r2,-52(fp)
 801f580:	10800117 	ldw	r2,4(r2)
 801f584:	18bff736 	bltu	r3,r2,801f564 <altera_avalon_jtag_uart_write+0x228>
 801f588:	00000106 	br	801f590 <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
 801f58c:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801f590:	e0bff317 	ldw	r2,-52(fp)
 801f594:	10800917 	ldw	r2,36(r2)
 801f598:	1000051e 	bne	r2,zero,801f5b0 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 801f59c:	e0bff117 	ldw	r2,-60(fp)
 801f5a0:	00bfb316 	blt	zero,r2,801f470 <altera_avalon_jtag_uart_write+0x134>
 801f5a4:	00000306 	br	801f5b4 <altera_avalon_jtag_uart_write+0x278>
        break;
 801f5a8:	0001883a 	nop
 801f5ac:	00000106 	br	801f5b4 <altera_avalon_jtag_uart_write+0x278>
         break;
 801f5b0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 801f5b4:	e0bff317 	ldw	r2,-52(fp)
 801f5b8:	10800b17 	ldw	r2,44(r2)
 801f5bc:	1009883a 	mov	r4,r2
 801f5c0:	801a9f80 	call	801a9f8 <OSSemPost>

  if (ptr != start)
 801f5c4:	e0fff217 	ldw	r3,-56(fp)
 801f5c8:	e0bffd17 	ldw	r2,-12(fp)
 801f5cc:	18800426 	beq	r3,r2,801f5e0 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
 801f5d0:	e0fff217 	ldw	r3,-56(fp)
 801f5d4:	e0bffd17 	ldw	r2,-12(fp)
 801f5d8:	1885c83a 	sub	r2,r3,r2
 801f5dc:	00000606 	br	801f5f8 <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
 801f5e0:	e0bff017 	ldw	r2,-64(fp)
 801f5e4:	1090000c 	andi	r2,r2,16384
 801f5e8:	10000226 	beq	r2,zero,801f5f4 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
 801f5ec:	00bffd44 	movi	r2,-11
 801f5f0:	00000106 	br	801f5f8 <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801f5f4:	00bffec4 	movi	r2,-5
}
 801f5f8:	e037883a 	mov	sp,fp
 801f5fc:	dfc00117 	ldw	ra,4(sp)
 801f600:	df000017 	ldw	fp,0(sp)
 801f604:	dec00204 	addi	sp,sp,8
 801f608:	f800283a 	ret

0801f60c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801f60c:	defffa04 	addi	sp,sp,-24
 801f610:	dfc00515 	stw	ra,20(sp)
 801f614:	df000415 	stw	fp,16(sp)
 801f618:	df000404 	addi	fp,sp,16
 801f61c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801f620:	0007883a 	mov	r3,zero
 801f624:	e0bffc17 	ldw	r2,-16(fp)
 801f628:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801f62c:	e0bffc17 	ldw	r2,-16(fp)
 801f630:	10800104 	addi	r2,r2,4
 801f634:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 801f638:	0005303a 	rdctl	r2,status
 801f63c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f640:	e0fffd17 	ldw	r3,-12(fp)
 801f644:	00bfff84 	movi	r2,-2
 801f648:	1884703a 	and	r2,r3,r2
 801f64c:	1001703a 	wrctl	status,r2
  return context;
 801f650:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801f654:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 801f658:	803f7400 	call	803f740 <alt_tick>
 801f65c:	e0bfff17 	ldw	r2,-4(fp)
 801f660:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 801f664:	e0bffe17 	ldw	r2,-8(fp)
 801f668:	1001703a 	wrctl	status,r2
}
 801f66c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 801f670:	0001883a 	nop
 801f674:	e037883a 	mov	sp,fp
 801f678:	dfc00117 	ldw	ra,4(sp)
 801f67c:	df000017 	ldw	fp,0(sp)
 801f680:	dec00204 	addi	sp,sp,8
 801f684:	f800283a 	ret

0801f688 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801f688:	defff804 	addi	sp,sp,-32
 801f68c:	dfc00715 	stw	ra,28(sp)
 801f690:	df000615 	stw	fp,24(sp)
 801f694:	df000604 	addi	fp,sp,24
 801f698:	e13ffe15 	stw	r4,-8(fp)
 801f69c:	e17ffd15 	stw	r5,-12(fp)
 801f6a0:	e1bffc15 	stw	r6,-16(fp)
 801f6a4:	e1fffb15 	stw	r7,-20(fp)
 801f6a8:	e0bffb17 	ldw	r2,-20(fp)
 801f6ac:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801f6b0:	d0a0b317 	ldw	r2,-32052(gp)
 801f6b4:	1000031e 	bne	r2,zero,801f6c4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 801f6b8:	e0bfff17 	ldw	r2,-4(fp)
 801f6bc:	d0a0b315 	stw	r2,-32052(gp)
    return 0;
 801f6c0:	00000106 	br	801f6c8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 801f6c4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801f6c8:	e0bffe17 	ldw	r2,-8(fp)
 801f6cc:	10800104 	addi	r2,r2,4
 801f6d0:	00c001c4 	movi	r3,7
 801f6d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801f6d8:	d8000015 	stw	zero,0(sp)
 801f6dc:	e1fffe17 	ldw	r7,-8(fp)
 801f6e0:	018200b4 	movhi	r6,2050
 801f6e4:	31bd8304 	addi	r6,r6,-2548
 801f6e8:	e17ffc17 	ldw	r5,-16(fp)
 801f6ec:	e13ffd17 	ldw	r4,-12(fp)
 801f6f0:	803ec700 	call	803ec70 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801f6f4:	0001883a 	nop
 801f6f8:	e037883a 	mov	sp,fp
 801f6fc:	dfc00117 	ldw	ra,4(sp)
 801f700:	df000017 	ldw	fp,0(sp)
 801f704:	dec00204 	addi	sp,sp,8
 801f708:	f800283a 	ret

0801f70c <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 801f70c:	defffb04 	addi	sp,sp,-20
 801f710:	df000115 	stw	fp,4(sp)
 801f714:	df000104 	addi	fp,sp,4
 801f718:	e13fff15 	stw	r4,-4(fp)
 801f71c:	e1400115 	stw	r5,4(fp)
 801f720:	e1800215 	stw	r6,8(fp)
 801f724:	e1c00315 	stw	r7,12(fp)
 801f728:	0001883a 	nop
 801f72c:	e037883a 	mov	sp,fp
 801f730:	df000017 	ldw	fp,0(sp)
 801f734:	dec00404 	addi	sp,sp,16
 801f738:	f800283a 	ret

0801f73c <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_msgdma,
                                        alt_32 rx_msgdma,
                                        alt_32 cfgflags) {
 801f73c:	defffb04 	addi	sp,sp,-20
 801f740:	df000415 	stw	fp,16(sp)
 801f744:	df000404 	addi	fp,sp,16
 801f748:	e13fff15 	stw	r4,-4(fp)
 801f74c:	e17ffe15 	stw	r5,-8(fp)
 801f750:	e1bffd15 	stw	r6,-12(fp)
 801f754:	e1fffc15 	stw	r7,-16(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 801f758:	e0fffe17 	ldw	r3,-8(fp)
 801f75c:	e0bfff17 	ldw	r2,-4(fp)
 801f760:	10c00015 	stw	r3,0(r2)
        mi->tx_msgdma = (alt_msgdma_dev *)tx_msgdma;
 801f764:	e0fffd17 	ldw	r3,-12(fp)
 801f768:	e0bfff17 	ldw	r2,-4(fp)
 801f76c:	10c00115 	stw	r3,4(r2)
        mi->rx_msgdma = (alt_msgdma_dev *)rx_msgdma;
 801f770:	e0fffc17 	ldw	r3,-16(fp)
 801f774:	e0bfff17 	ldw	r2,-4(fp)
 801f778:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 801f77c:	e0c00117 	ldw	r3,4(fp)
 801f780:	e0bfff17 	ldw	r2,-4(fp)
 801f784:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 801f788:	0005883a 	mov	r2,zero
}
 801f78c:	e037883a 	mov	sp,fp
 801f790:	df000017 	ldw	fp,0(sp)
 801f794:	dec00104 	addi	sp,sp,4
 801f798:	f800283a 	ret

0801f79c <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit MSGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_msgdma_standard_descriptor *txDesc)   
{ 
 801f79c:	defffa04 	addi	sp,sp,-24
 801f7a0:	dfc00515 	stw	ra,20(sp)
 801f7a4:	df000415 	stw	fp,16(sp)
 801f7a8:	df000404 	addi	fp,sp,16
 801f7ac:	e13ffd15 	stw	r4,-12(fp)
 801f7b0:	e17ffc15 	stw	r5,-16(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 801f7b4:	e03ffec5 	stb	zero,-5(fp)
  
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 801f7b8:	e03fff15 	stw	zero,-4(fp)
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
 801f7bc:	00000b06 	br	801f7ec <tse_mac_sTxWrite+0x50>
           ALTERA_MSGDMA_CSR_BUSY_MASK) ) {
           if(timeout++ == ALTERA_TSE_MSGDMA_BUSY_TIME_OUT_CNT) {
 801f7c0:	e0ffff17 	ldw	r3,-4(fp)
 801f7c4:	18800044 	addi	r2,r3,1
 801f7c8:	e0bfff15 	stw	r2,-4(fp)
 801f7cc:	008003f4 	movhi	r2,15
 801f7d0:	10909004 	addi	r2,r2,16960
 801f7d4:	1880051e 	bne	r3,r2,801f7ec <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX MSGDMA Timeout\n");
 801f7d8:	01020174 	movhi	r4,2053
 801f7dc:	2102ce04 	addi	r4,r4,2872
 801f7e0:	8003ca80 	call	8003ca8 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 801f7e4:	00bffa84 	movi	r2,-22
 801f7e8:	00001906 	br	801f850 <tse_mac_sTxWrite+0xb4>
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
 801f7ec:	e0bffd17 	ldw	r2,-12(fp)
 801f7f0:	10800117 	ldw	r2,4(r2)
 801f7f4:	10800317 	ldw	r2,12(r2)
 801f7f8:	10800037 	ldwio	r2,0(r2)
 801f7fc:	1080004c 	andi	r2,r2,1
 801f800:	103fef1e 	bne	r2,zero,801f7c0 <tse_mac_sTxWrite+0x24>
           }
  }
  
  // Start MSGDMA (blocking call)
  alt_dcache_flush(txDesc,sizeof(alt_msgdma_standard_descriptor));
 801f804:	01400404 	movi	r5,16
 801f808:	e13ffc17 	ldw	r4,-16(fp)
 801f80c:	803e8d40 	call	803e8d4 <alt_dcache_flush>
  result = alt_msgdma_standard_descriptor_sync_transfer(
 801f810:	e0bffd17 	ldw	r2,-12(fp)
 801f814:	10800117 	ldw	r2,4(r2)
 801f818:	e17ffc17 	ldw	r5,-16(fp)
 801f81c:	1009883a 	mov	r4,r2
 801f820:	80272300 	call	8027230 <alt_msgdma_standard_descriptor_sync_transfer>
 801f824:	e0bffec5 	stb	r2,-5(fp)
                mi->tx_msgdma, 
                txDesc);
  
  if (result != 0) {
 801f828:	e0bffec3 	ldbu	r2,-5(fp)
 801f82c:	10000726 	beq	r2,zero,801f84c <tse_mac_sTxWrite+0xb0>
    tse_dprintf(4, "WARNING :alt_msgdma_standard_descriptor_sync_transfer Error code 0x%x\n",result);
 801f830:	e0bffec3 	ldbu	r2,-5(fp)
 801f834:	100b883a 	mov	r5,r2
 801f838:	01020174 	movhi	r4,2053
 801f83c:	2102d504 	addi	r4,r4,2900
 801f840:	8003b840 	call	8003b84 <printf>
    return -1;
 801f844:	00bfffc4 	movi	r2,-1
 801f848:	00000106 	br	801f850 <tse_mac_sTxWrite+0xb4>
  }

  return 0;
 801f84c:	0005883a 	mov	r2,zero
}
 801f850:	e037883a 	mov	sp,fp
 801f854:	dfc00117 	ldw	ra,4(sp)
 801f858:	df000017 	ldw	fp,0(sp)
 801f85c:	dec00204 	addi	sp,sp,8
 801f860:	f800283a 	ret

0801f864 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *rxDesc)  
{
 801f864:	defff904 	addi	sp,sp,-28
 801f868:	dfc00615 	stw	ra,24(sp)
 801f86c:	df000515 	stw	fp,20(sp)
 801f870:	df000504 	addi	fp,sp,20
 801f874:	e13ffe15 	stw	r4,-8(fp)
 801f878:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
           
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
 801f87c:	e0bffe17 	ldw	r2,-8(fp)
 801f880:	10c00217 	ldw	r3,8(r2)
 801f884:	00800044 	movi	r2,1
 801f888:	d8800115 	stw	r2,4(sp)
 801f88c:	00800044 	movi	r2,1
 801f890:	d8800015 	stw	r2,0(sp)
 801f894:	000f883a 	mov	r7,zero
 801f898:	000d883a 	mov	r6,zero
 801f89c:	e17ffd17 	ldw	r5,-12(fp)
 801f8a0:	1809883a 	mov	r4,r3
 801f8a4:	8026e040 	call	8026e04 <alt_msgdma_start_prefetcher_with_std_desc_list>
 801f8a8:	e0bfffc5 	stb	r2,-1(fp)
                mi->rx_msgdma, 
                rxDesc,0,0,1,1);
  
  if (result != 0) { return -1; }
 801f8ac:	e0bfffc3 	ldbu	r2,-1(fp)
 801f8b0:	10000226 	beq	r2,zero,801f8bc <tse_mac_aRxRead+0x58>
 801f8b4:	00bfffc4 	movi	r2,-1
 801f8b8:	00000106 	br	801f8c0 <tse_mac_aRxRead+0x5c>
 
  return SUCCESS;
 801f8bc:	0005883a 	mov	r2,zero
}
 801f8c0:	e037883a 	mov	sp,fp
 801f8c4:	dfc00117 	ldw	ra,4(sp)
 801f8c8:	df000017 	ldw	fp,0(sp)
 801f8cc:	dec00204 	addi	sp,sp,8
 801f8d0:	f800283a 	ret

0801f8d4 <tse_mac_aTxWrite>:
  *
  */
alt_32 tse_mac_aTxWrite( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *txDesc)  
{
 801f8d4:	defff904 	addi	sp,sp,-28
 801f8d8:	dfc00615 	stw	ra,24(sp)
 801f8dc:	df000515 	stw	fp,20(sp)
 801f8e0:	df000504 	addi	fp,sp,20
 801f8e4:	e13ffe15 	stw	r4,-8(fp)
 801f8e8:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
  
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
 801f8ec:	e0bffe17 	ldw	r2,-8(fp)
 801f8f0:	10c00117 	ldw	r3,4(r2)
 801f8f4:	00800044 	movi	r2,1
 801f8f8:	d8800115 	stw	r2,4(sp)
 801f8fc:	00800044 	movi	r2,1
 801f900:	d8800015 	stw	r2,0(sp)
 801f904:	000f883a 	mov	r7,zero
 801f908:	000d883a 	mov	r6,zero
 801f90c:	e17ffd17 	ldw	r5,-12(fp)
 801f910:	1809883a 	mov	r4,r3
 801f914:	8026e040 	call	8026e04 <alt_msgdma_start_prefetcher_with_std_desc_list>
 801f918:	e0bfffc5 	stb	r2,-1(fp)
                mi->tx_msgdma, 
                txDesc,0,0,1,1);

  if (result != 0) { return -1; }
 801f91c:	e0bfffc3 	ldbu	r2,-1(fp)
 801f920:	10000226 	beq	r2,zero,801f92c <tse_mac_aTxWrite+0x58>
 801f924:	00bfffc4 	movi	r2,-1
 801f928:	00000106 	br	801f930 <tse_mac_aTxWrite+0x5c>
 
  return SUCCESS;
 801f92c:	0005883a 	mov	r2,zero
}
 801f930:	e037883a 	mov	sp,fp
 801f934:	dfc00117 	ldw	ra,4(sp)
 801f938:	df000017 	ldw	fp,0(sp)
 801f93c:	dec00204 	addi	sp,sp,8
 801f940:	f800283a 	ret

0801f944 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 801f944:	defffc04 	addi	sp,sp,-16
 801f948:	df000315 	stw	fp,12(sp)
 801f94c:	df000304 	addi	fp,sp,12
 801f950:	e13ffd15 	stw	r4,-12(fp)
    alt_32 timeout;
    alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801f954:	e0bffd17 	ldw	r2,-12(fp)
 801f958:	10800204 	addi	r2,r2,8
 801f95c:	10800037 	ldwio	r2,0(r2)
 801f960:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 801f964:	e0bffd17 	ldw	r2,-12(fp)
 801f968:	10800204 	addi	r2,r2,8
 801f96c:	00c80204 	movi	r3,8200
 801f970:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 801f974:	e03fff15 	stw	zero,-4(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 801f978:	00000306 	br	801f988 <tse_mac_SwReset+0x44>
 801f97c:	e0bfff17 	ldw	r2,-4(fp)
 801f980:	10800044 	addi	r2,r2,1
 801f984:	e0bfff15 	stw	r2,-4(fp)
 801f988:	e0bffd17 	ldw	r2,-12(fp)
 801f98c:	10800204 	addi	r2,r2,8
 801f990:	10800037 	ldwio	r2,0(r2)
 801f994:	1088000c 	andi	r2,r2,8192
 801f998:	10000326 	beq	r2,zero,801f9a8 <tse_mac_SwReset+0x64>
 801f99c:	e0bfff17 	ldw	r2,-4(fp)
 801f9a0:	1089c410 	cmplti	r2,r2,10000
 801f9a4:	103ff51e 	bne	r2,zero,801f97c <tse_mac_SwReset+0x38>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 801f9a8:	e0bffd17 	ldw	r2,-12(fp)
 801f9ac:	10800204 	addi	r2,r2,8
 801f9b0:	e0fffe17 	ldw	r3,-8(fp)
 801f9b4:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
 801f9b8:	0005883a 	mov	r2,zero
}
 801f9bc:	e037883a 	mov	sp,fp
 801f9c0:	df000017 	ldw	fp,0(sp)
 801f9c4:	dec00104 	addi	sp,sp,4
 801f9c8:	f800283a 	ret

0801f9cc <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 801f9cc:	defffd04 	addi	sp,sp,-12
 801f9d0:	df000215 	stw	fp,8(sp)
 801f9d4:	df000204 	addi	fp,sp,8
 801f9d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801f9dc:	e0bffe17 	ldw	r2,-8(fp)
 801f9e0:	10800204 	addi	r2,r2,8
 801f9e4:	10800037 	ldwio	r2,0(r2)
 801f9e8:	e0bfff15 	stw	r2,-4(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 801f9ec:	e0ffff17 	ldw	r3,-4(fp)
 801f9f0:	00bffdc4 	movi	r2,-9
 801f9f4:	1884703a 	and	r2,r3,r2
 801f9f8:	e0bfff15 	stw	r2,-4(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 801f9fc:	e0bffe17 	ldw	r2,-8(fp)
 801fa00:	10800204 	addi	r2,r2,8
 801fa04:	e0ffff17 	ldw	r3,-4(fp)
 801fa08:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801fa0c:	0005883a 	mov	r2,zero
}
 801fa10:	e037883a 	mov	sp,fp
 801fa14:	df000017 	ldw	fp,0(sp)
 801fa18:	dec00104 	addi	sp,sp,4
 801fa1c:	f800283a 	ret

0801fa20 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 801fa20:	defffd04 	addi	sp,sp,-12
 801fa24:	df000215 	stw	fp,8(sp)
 801fa28:	df000204 	addi	fp,sp,8
 801fa2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801fa30:	e0bffe17 	ldw	r2,-8(fp)
 801fa34:	10800204 	addi	r2,r2,8
 801fa38:	10800037 	ldwio	r2,0(r2)
 801fa3c:	e0bfff15 	stw	r2,-4(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 801fa40:	e0bfff17 	ldw	r2,-4(fp)
 801fa44:	10800214 	ori	r2,r2,8
 801fa48:	e0bfff15 	stw	r2,-4(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 801fa4c:	e0bffe17 	ldw	r2,-8(fp)
 801fa50:	10800204 	addi	r2,r2,8
 801fa54:	e0ffff17 	ldw	r3,-4(fp)
 801fa58:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801fa5c:	0005883a 	mov	r2,zero
}
 801fa60:	e037883a 	mov	sp,fp
 801fa64:	df000017 	ldw	fp,0(sp)
 801fa68:	dec00104 	addi	sp,sp,4
 801fa6c:	f800283a 	ret

0801fa70 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 801fa70:	defffb04 	addi	sp,sp,-20
 801fa74:	dfc00415 	stw	ra,16(sp)
 801fa78:	df000315 	stw	fp,12(sp)
 801fa7c:	dc000215 	stw	r16,8(sp)
 801fa80:	df000304 	addi	fp,sp,12
 801fa84:	e13ffd15 	stw	r4,-12(fp)
    alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 801fa88:	e03ffe15 	stw	zero,-8(fp)
 801fa8c:	00002506 	br	801fb24 <alt_tse_phy_add_profile+0xb4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 801fa90:	e0bffe17 	ldw	r2,-8(fp)
 801fa94:	100690ba 	slli	r3,r2,2
 801fa98:	008201b4 	movhi	r2,2054
 801fa9c:	1885883a 	add	r2,r3,r2
 801faa0:	10bc5117 	ldw	r2,-3772(r2)
 801faa4:	10c01417 	ldw	r3,80(r2)
 801faa8:	e0bffd17 	ldw	r2,-12(fp)
 801faac:	10801417 	ldw	r2,80(r2)
 801fab0:	1880191e 	bne	r3,r2,801fb18 <alt_tse_phy_add_profile+0xa8>
 801fab4:	e0bffe17 	ldw	r2,-8(fp)
 801fab8:	100690ba 	slli	r3,r2,2
 801fabc:	008201b4 	movhi	r2,2054
 801fac0:	1885883a 	add	r2,r3,r2
 801fac4:	10bc5117 	ldw	r2,-3772(r2)
 801fac8:	10c01503 	ldbu	r3,84(r2)
 801facc:	e0bffd17 	ldw	r2,-12(fp)
 801fad0:	10801503 	ldbu	r2,84(r2)
 801fad4:	18c03fcc 	andi	r3,r3,255
 801fad8:	10803fcc 	andi	r2,r2,255
 801fadc:	18800e1e 	bne	r3,r2,801fb18 <alt_tse_phy_add_profile+0xa8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 801fae0:	e0bffd17 	ldw	r2,-12(fp)
 801fae4:	10801417 	ldw	r2,80(r2)
 801fae8:	1007883a 	mov	r3,r2
 801faec:	e0bffd17 	ldw	r2,-12(fp)
 801faf0:	10801503 	ldbu	r2,84(r2)
 801faf4:	10803fcc 	andi	r2,r2,255
 801faf8:	100d883a 	mov	r6,r2
 801fafc:	180b883a 	mov	r5,r3
 801fb00:	01020174 	movhi	r4,2053
 801fb04:	2102e704 	addi	r4,r4,2972
 801fb08:	8003b840 	call	8003b84 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 801fb0c:	01020174 	movhi	r4,2053
 801fb10:	2102fb04 	addi	r4,r4,3052
 801fb14:	8003ca80 	call	8003ca8 <puts>
    for(i = 0; i < phy_profile_count; i++)
 801fb18:	e0bffe17 	ldw	r2,-8(fp)
 801fb1c:	10800044 	addi	r2,r2,1
 801fb20:	e0bffe15 	stw	r2,-8(fp)
 801fb24:	d0a07a03 	ldbu	r2,-32280(gp)
 801fb28:	10803fcc 	andi	r2,r2,255
 801fb2c:	e0fffe17 	ldw	r3,-8(fp)
 801fb30:	18bfd716 	blt	r3,r2,801fa90 <alt_tse_phy_add_profile+0x20>
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 801fb34:	d0a07a03 	ldbu	r2,-32280(gp)
 801fb38:	14003fcc 	andi	r16,r2,255
 801fb3c:	01001904 	movi	r4,100
 801fb40:	804e0840 	call	804e084 <malloc>
 801fb44:	1009883a 	mov	r4,r2
 801fb48:	800690ba 	slli	r3,r16,2
 801fb4c:	008201b4 	movhi	r2,2054
 801fb50:	1885883a 	add	r2,r3,r2
 801fb54:	113c5115 	stw	r4,-3772(r2)
    if(!pphy_profiles[phy_profile_count]) {
 801fb58:	d0a07a03 	ldbu	r2,-32280(gp)
 801fb5c:	10803fcc 	andi	r2,r2,255
 801fb60:	100690ba 	slli	r3,r2,2
 801fb64:	008201b4 	movhi	r2,2054
 801fb68:	1885883a 	add	r2,r3,r2
 801fb6c:	10bc5117 	ldw	r2,-3772(r2)
 801fb70:	1000081e 	bne	r2,zero,801fb94 <alt_tse_phy_add_profile+0x124>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 801fb74:	d0a07a03 	ldbu	r2,-32280(gp)
 801fb78:	10803fcc 	andi	r2,r2,255
 801fb7c:	100b883a 	mov	r5,r2
 801fb80:	01020174 	movhi	r4,2053
 801fb84:	21031304 	addi	r4,r4,3148
 801fb88:	8003b840 	call	8003b84 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 801fb8c:	00bfffc4 	movi	r2,-1
 801fb90:	00001e06 	br	801fc0c <alt_tse_phy_add_profile+0x19c>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 801fb94:	d0a07a03 	ldbu	r2,-32280(gp)
 801fb98:	10803fcc 	andi	r2,r2,255
 801fb9c:	100690ba 	slli	r3,r2,2
 801fba0:	008201b4 	movhi	r2,2054
 801fba4:	1885883a 	add	r2,r3,r2
 801fba8:	10fc5117 	ldw	r3,-3772(r2)
 801fbac:	e0bffd17 	ldw	r2,-12(fp)
 801fbb0:	1009883a 	mov	r4,r2
 801fbb4:	00801904 	movi	r2,100
 801fbb8:	100d883a 	mov	r6,r2
 801fbbc:	200b883a 	mov	r5,r4
 801fbc0:	1809883a 	mov	r4,r3
 801fbc4:	80037cc0 	call	80037cc <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 801fbc8:	d0a07a03 	ldbu	r2,-32280(gp)
 801fbcc:	10803fcc 	andi	r2,r2,255
 801fbd0:	100690ba 	slli	r3,r2,2
 801fbd4:	008201b4 	movhi	r2,2054
 801fbd8:	1885883a 	add	r2,r3,r2
 801fbdc:	10bc5117 	ldw	r2,-3772(r2)
 801fbe0:	1007883a 	mov	r3,r2
 801fbe4:	e0bffd17 	ldw	r2,-12(fp)
 801fbe8:	100b883a 	mov	r5,r2
 801fbec:	1809883a 	mov	r4,r3
 801fbf0:	8003d700 	call	8003d70 <strcpy>
    
    phy_profile_count++;
 801fbf4:	d0a07a03 	ldbu	r2,-32280(gp)
 801fbf8:	10800044 	addi	r2,r2,1
 801fbfc:	d0a07a05 	stb	r2,-32280(gp)
    
    return phy_profile_count - 1;
 801fc00:	d0a07a03 	ldbu	r2,-32280(gp)
 801fc04:	10803fcc 	andi	r2,r2,255
 801fc08:	10bfffc4 	addi	r2,r2,-1
}
 801fc0c:	e6ffff04 	addi	sp,fp,-4
 801fc10:	dfc00217 	ldw	ra,8(sp)
 801fc14:	df000117 	ldw	fp,4(sp)
 801fc18:	dc000017 	ldw	r16,0(sp)
 801fc1c:	dec00304 	addi	sp,sp,12
 801fc20:	f800283a 	ret

0801fc24 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
    alt_tse_system_mac                    *psys_mac,
    alt_tse_system_msgdma                *psys_msgdma,
    alt_tse_system_desc_mem                *psys_mem,
    alt_tse_system_shared_fifo            *psys_shared_fifo,
    alt_tse_system_phy                     *psys_phy ) {
 801fc24:	defff204 	addi	sp,sp,-56
 801fc28:	dfc00d15 	stw	ra,52(sp)
 801fc2c:	df000c15 	stw	fp,48(sp)
 801fc30:	dc000b15 	stw	r16,44(sp)
 801fc34:	df000c04 	addi	fp,sp,48
 801fc38:	e13ff715 	stw	r4,-36(fp)
 801fc3c:	e17ff615 	stw	r5,-40(fp)
 801fc40:	e1bff515 	stw	r6,-44(fp)
 801fc44:	e1fff415 	stw	r7,-48(fp)

    int i;
    int loop_end;
    
    alt_tse_system_mac                    *pmac    = psys_mac;
 801fc48:	e0bff717 	ldw	r2,-36(fp)
 801fc4c:	e0bff815 	stw	r2,-32(fp)
    alt_tse_system_msgdma                *pmsgdma    = psys_msgdma;
 801fc50:	e0bff617 	ldw	r2,-40(fp)
 801fc54:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_system_desc_mem                *pmem    = psys_mem;
 801fc58:	e0bff517 	ldw	r2,-44(fp)
 801fc5c:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_system_shared_fifo            *pfifo    = psys_shared_fifo;
 801fc60:	e0bff417 	ldw	r2,-48(fp)
 801fc64:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_system_phy                     *pphy    = psys_phy;
 801fc68:	e0800217 	ldw	r2,8(fp)
 801fc6c:	e0bffd15 	stw	r2,-12(fp)
    
    static alt_8 tse_system_count = 0;
    
    /* Determine number of loop */
    /* Run at least one for non-multi-channel MAC */
    if(pmac->tse_num_of_channel == 0) {
 801fc70:	e0bff817 	ldw	r2,-32(fp)
 801fc74:	10800303 	ldbu	r2,12(r2)
 801fc78:	10803fcc 	andi	r2,r2,255
 801fc7c:	1000031e 	bne	r2,zero,801fc8c <alt_tse_system_add_sys+0x68>
        loop_end = 1;
 801fc80:	00800044 	movi	r2,1
 801fc84:	e0bff915 	stw	r2,-28(fp)
 801fc88:	00000e06 	br	801fcc4 <alt_tse_system_add_sys+0xa0>
    }
    else if(pmac->tse_num_of_channel > 0) {
 801fc8c:	e0bff817 	ldw	r2,-32(fp)
 801fc90:	10800303 	ldbu	r2,12(r2)
 801fc94:	10803fcc 	andi	r2,r2,255
 801fc98:	10000526 	beq	r2,zero,801fcb0 <alt_tse_system_add_sys+0x8c>
        loop_end = pmac->tse_num_of_channel; 
 801fc9c:	e0bff817 	ldw	r2,-32(fp)
 801fca0:	10800303 	ldbu	r2,12(r2)
 801fca4:	10803fcc 	andi	r2,r2,255
 801fca8:	e0bff915 	stw	r2,-28(fp)
 801fcac:	00000506 	br	801fcc4 <alt_tse_system_add_sys+0xa0>
    }
    else {
        tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 801fcb0:	01020174 	movhi	r4,2053
 801fcb4:	21032204 	addi	r4,r4,3208
 801fcb8:	8003ca80 	call	8003ca8 <puts>
        return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801fcbc:	00bfffc4 	movi	r2,-1
 801fcc0:	00020306 	br	80204d0 <alt_tse_system_add_sys+0x8ac>
    }

    for(i = 0; i < loop_end; i++) {
 801fcc4:	e03ffa15 	stw	zero,-24(fp)
 801fcc8:	0001fd06 	br	80204c0 <alt_tse_system_add_sys+0x89c>
        
        /* Make sure the boundary of array is not exceeded */
        if(tse_system_count >= MAXNETS) {
 801fccc:	d0a07a83 	ldbu	r2,-32278(gp)
 801fcd0:	10803fcc 	andi	r2,r2,255
 801fcd4:	1080201c 	xori	r2,r2,128
 801fcd8:	10bfe004 	addi	r2,r2,-128
 801fcdc:	10800110 	cmplti	r2,r2,4
 801fce0:	10000c1e 	bne	r2,zero,801fd14 <alt_tse_system_add_sys+0xf0>
            tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 801fce4:	01020174 	movhi	r4,2053
 801fce8:	21032e04 	addi	r4,r4,3256
 801fcec:	8003ca80 	call	8003ca8 <puts>
            tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 801fcf0:	d0a07a83 	ldbu	r2,-32278(gp)
 801fcf4:	10803fcc 	andi	r2,r2,255
 801fcf8:	1080201c 	xori	r2,r2,128
 801fcfc:	10bfe004 	addi	r2,r2,-128
 801fd00:	100d883a 	mov	r6,r2
 801fd04:	01400104 	movi	r5,4
 801fd08:	01020174 	movhi	r4,2053
 801fd0c:	21033e04 	addi	r4,r4,3320
 801fd10:	8003b840 	call	8003b84 <printf>
        }

        /* Add MAC info to alt_tse_system_info structure */
        if(pmac == 0) {
 801fd14:	e0bff817 	ldw	r2,-32(fp)
 801fd18:	1000081e 	bne	r2,zero,801fd3c <alt_tse_system_add_sys+0x118>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 801fd1c:	01020174 	movhi	r4,2053
 801fd20:	21034d04 	addi	r4,r4,3380
 801fd24:	8003ca80 	call	8003ca8 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 801fd28:	01020174 	movhi	r4,2053
 801fd2c:	21035704 	addi	r4,r4,3420
 801fd30:	8003ca80 	call	8003ca8 <puts>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801fd34:	00bfffc4 	movi	r2,-1
 801fd38:	0001e506 	br	80204d0 <alt_tse_system_add_sys+0x8ac>
        }        
        
        tse_mac_device[tse_system_count].tse_mac_base                     = pmac->tse_mac_base + (i * 0x400);
 801fd3c:	e0bff817 	ldw	r2,-32(fp)
 801fd40:	10c00017 	ldw	r3,0(r2)
 801fd44:	e0bffa17 	ldw	r2,-24(fp)
 801fd48:	100492ba 	slli	r2,r2,10
 801fd4c:	1009883a 	mov	r4,r2
 801fd50:	d0a07a83 	ldbu	r2,-32278(gp)
 801fd54:	10803fcc 	andi	r2,r2,255
 801fd58:	1080201c 	xori	r2,r2,128
 801fd5c:	10bfe004 	addi	r2,r2,-128
 801fd60:	1907883a 	add	r3,r3,r4
 801fd64:	11001324 	muli	r4,r2,76
 801fd68:	00820174 	movhi	r2,2053
 801fd6c:	2085883a 	add	r2,r4,r2
 801fd70:	10d35615 	stw	r3,19800(r2)
        tse_mac_device[tse_system_count].tse_tx_depth                     = pmac->tse_tx_depth;
 801fd74:	e0bff817 	ldw	r2,-32(fp)
 801fd78:	10c0010b 	ldhu	r3,4(r2)
 801fd7c:	d0a07a83 	ldbu	r2,-32278(gp)
 801fd80:	10803fcc 	andi	r2,r2,255
 801fd84:	1080201c 	xori	r2,r2,128
 801fd88:	10bfe004 	addi	r2,r2,-128
 801fd8c:	18ffffcc 	andi	r3,r3,65535
 801fd90:	11001324 	muli	r4,r2,76
 801fd94:	00820174 	movhi	r2,2053
 801fd98:	2085883a 	add	r2,r4,r2
 801fd9c:	10d35715 	stw	r3,19804(r2)
        tse_mac_device[tse_system_count].tse_rx_depth                     = pmac->tse_rx_depth;
 801fda0:	e0bff817 	ldw	r2,-32(fp)
 801fda4:	10c0018b 	ldhu	r3,6(r2)
 801fda8:	d0a07a83 	ldbu	r2,-32278(gp)
 801fdac:	10803fcc 	andi	r2,r2,255
 801fdb0:	1080201c 	xori	r2,r2,128
 801fdb4:	10bfe004 	addi	r2,r2,-128
 801fdb8:	18ffffcc 	andi	r3,r3,65535
 801fdbc:	11001324 	muli	r4,r2,76
 801fdc0:	00820174 	movhi	r2,2053
 801fdc4:	2085883a 	add	r2,r4,r2
 801fdc8:	10d35815 	stw	r3,19808(r2)
        tse_mac_device[tse_system_count].tse_use_mdio                     = pmac->tse_use_mdio;
 801fdcc:	d0a07a83 	ldbu	r2,-32278(gp)
 801fdd0:	10803fcc 	andi	r2,r2,255
 801fdd4:	1080201c 	xori	r2,r2,128
 801fdd8:	10bfe004 	addi	r2,r2,-128
 801fddc:	e0fff817 	ldw	r3,-32(fp)
 801fde0:	18c00203 	ldbu	r3,8(r3)
 801fde4:	11001324 	muli	r4,r2,76
 801fde8:	00820174 	movhi	r2,2053
 801fdec:	2085883a 	add	r2,r4,r2
 801fdf0:	10d35905 	stb	r3,19812(r2)
        tse_mac_device[tse_system_count].tse_en_maclite                 = pmac->tse_en_maclite;
 801fdf4:	d0a07a83 	ldbu	r2,-32278(gp)
 801fdf8:	10803fcc 	andi	r2,r2,255
 801fdfc:	1080201c 	xori	r2,r2,128
 801fe00:	10bfe004 	addi	r2,r2,-128
 801fe04:	e0fff817 	ldw	r3,-32(fp)
 801fe08:	18c00243 	ldbu	r3,9(r3)
 801fe0c:	11001324 	muli	r4,r2,76
 801fe10:	00820174 	movhi	r2,2053
 801fe14:	2085883a 	add	r2,r4,r2
 801fe18:	10d35945 	stb	r3,19813(r2)
        tse_mac_device[tse_system_count].tse_maclite_gige                 = pmac->tse_maclite_gige;
 801fe1c:	d0a07a83 	ldbu	r2,-32278(gp)
 801fe20:	10803fcc 	andi	r2,r2,255
 801fe24:	1080201c 	xori	r2,r2,128
 801fe28:	10bfe004 	addi	r2,r2,-128
 801fe2c:	e0fff817 	ldw	r3,-32(fp)
 801fe30:	18c00283 	ldbu	r3,10(r3)
 801fe34:	11001324 	muli	r4,r2,76
 801fe38:	00820174 	movhi	r2,2053
 801fe3c:	2085883a 	add	r2,r4,r2
 801fe40:	10d35985 	stb	r3,19814(r2)
        tse_mac_device[tse_system_count].tse_multichannel_mac             = pmac->tse_multichannel_mac;
 801fe44:	d0a07a83 	ldbu	r2,-32278(gp)
 801fe48:	10803fcc 	andi	r2,r2,255
 801fe4c:	1080201c 	xori	r2,r2,128
 801fe50:	10bfe004 	addi	r2,r2,-128
 801fe54:	e0fff817 	ldw	r3,-32(fp)
 801fe58:	18c002c3 	ldbu	r3,11(r3)
 801fe5c:	11001324 	muli	r4,r2,76
 801fe60:	00820174 	movhi	r2,2053
 801fe64:	2085883a 	add	r2,r4,r2
 801fe68:	10d359c5 	stb	r3,19815(r2)
        tse_mac_device[tse_system_count].tse_num_of_channel             = pmac->tse_num_of_channel;
 801fe6c:	d0a07a83 	ldbu	r2,-32278(gp)
 801fe70:	10803fcc 	andi	r2,r2,255
 801fe74:	1080201c 	xori	r2,r2,128
 801fe78:	10bfe004 	addi	r2,r2,-128
 801fe7c:	e0fff817 	ldw	r3,-32(fp)
 801fe80:	18c00303 	ldbu	r3,12(r3)
 801fe84:	11001324 	muli	r4,r2,76
 801fe88:	00820174 	movhi	r2,2053
 801fe8c:	2085883a 	add	r2,r4,r2
 801fe90:	10d35a05 	stb	r3,19816(r2)
        tse_mac_device[tse_system_count].tse_mdio_shared                 = pmac->tse_mdio_shared;
 801fe94:	d0a07a83 	ldbu	r2,-32278(gp)
 801fe98:	10803fcc 	andi	r2,r2,255
 801fe9c:	1080201c 	xori	r2,r2,128
 801fea0:	10bfe004 	addi	r2,r2,-128
 801fea4:	e0fff817 	ldw	r3,-32(fp)
 801fea8:	18c00343 	ldbu	r3,13(r3)
 801feac:	11001324 	muli	r4,r2,76
 801feb0:	00820174 	movhi	r2,2053
 801feb4:	2085883a 	add	r2,r4,r2
 801feb8:	10d35a45 	stb	r3,19817(r2)
        tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared    = pmac->tse_number_of_mac_mdio_shared;
 801febc:	d0a07a83 	ldbu	r2,-32278(gp)
 801fec0:	10803fcc 	andi	r2,r2,255
 801fec4:	1080201c 	xori	r2,r2,128
 801fec8:	10bfe004 	addi	r2,r2,-128
 801fecc:	e0fff817 	ldw	r3,-32(fp)
 801fed0:	18c00383 	ldbu	r3,14(r3)
 801fed4:	11001324 	muli	r4,r2,76
 801fed8:	00820174 	movhi	r2,2053
 801fedc:	2085883a 	add	r2,r4,r2
 801fee0:	10d35a85 	stb	r3,19818(r2)
        tse_mac_device[tse_system_count].tse_pcs_ena                     = pmac->tse_pcs_ena;
 801fee4:	d0a07a83 	ldbu	r2,-32278(gp)
 801fee8:	10803fcc 	andi	r2,r2,255
 801feec:	1080201c 	xori	r2,r2,128
 801fef0:	10bfe004 	addi	r2,r2,-128
 801fef4:	e0fff817 	ldw	r3,-32(fp)
 801fef8:	18c003c3 	ldbu	r3,15(r3)
 801fefc:	11001324 	muli	r4,r2,76
 801ff00:	00820174 	movhi	r2,2053
 801ff04:	2085883a 	add	r2,r4,r2
 801ff08:	10d35ac5 	stb	r3,19819(r2)
        tse_mac_device[tse_system_count].tse_pcs_sgmii                     = pmac->tse_pcs_sgmii;
 801ff0c:	d0a07a83 	ldbu	r2,-32278(gp)
 801ff10:	10803fcc 	andi	r2,r2,255
 801ff14:	1080201c 	xori	r2,r2,128
 801ff18:	10bfe004 	addi	r2,r2,-128
 801ff1c:	e0fff817 	ldw	r3,-32(fp)
 801ff20:	18c00403 	ldbu	r3,16(r3)
 801ff24:	11001324 	muli	r4,r2,76
 801ff28:	00820174 	movhi	r2,2053
 801ff2c:	2085883a 	add	r2,r4,r2
 801ff30:	10d35b05 	stb	r3,19820(r2)
        
        /* Add MSGDMA info to alt_tse_system_info structure */
        if(pmsgdma == 0) {
 801ff34:	e0bffb17 	ldw	r2,-20(fp)
 801ff38:	10000d1e 	bne	r2,zero,801ff70 <alt_tse_system_add_sys+0x34c>
            tse_dprintf(2, "ERROR   : MSGDMA system structure == NULL\n");
 801ff3c:	01020174 	movhi	r4,2053
 801ff40:	21036904 	addi	r4,r4,3492
 801ff44:	8003ca80 	call	8003ca8 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 801ff48:	d0a07a83 	ldbu	r2,-32278(gp)
 801ff4c:	10803fcc 	andi	r2,r2,255
 801ff50:	1080201c 	xori	r2,r2,128
 801ff54:	10bfe004 	addi	r2,r2,-128
 801ff58:	100b883a 	mov	r5,r2
 801ff5c:	01020174 	movhi	r4,2053
 801ff60:	21037404 	addi	r4,r4,3536
 801ff64:	8003b840 	call	8003b84 <printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801ff68:	00bfffc4 	movi	r2,-1
 801ff6c:	00015806 	br	80204d0 <alt_tse_system_add_sys+0x8ac>
        }
        
        tse_mac_device[tse_system_count].tse_msgdma_tx = (char *) malloc(strlen(pmsgdma->tse_msgdma_tx) + 1);
 801ff70:	e0bffb17 	ldw	r2,-20(fp)
 801ff74:	10800017 	ldw	r2,0(r2)
 801ff78:	1009883a 	mov	r4,r2
 801ff7c:	80044880 	call	8004488 <strlen>
 801ff80:	10800044 	addi	r2,r2,1
 801ff84:	d0e07a83 	ldbu	r3,-32278(gp)
 801ff88:	1c003fcc 	andi	r16,r3,255
 801ff8c:	8400201c 	xori	r16,r16,128
 801ff90:	843fe004 	addi	r16,r16,-128
 801ff94:	1009883a 	mov	r4,r2
 801ff98:	804e0840 	call	804e084 <malloc>
 801ff9c:	1009883a 	mov	r4,r2
 801ffa0:	80c01324 	muli	r3,r16,76
 801ffa4:	00820174 	movhi	r2,2053
 801ffa8:	1885883a 	add	r2,r3,r2
 801ffac:	11135c15 	stw	r4,19824(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_tx) {
 801ffb0:	d0a07a83 	ldbu	r2,-32278(gp)
 801ffb4:	10803fcc 	andi	r2,r2,255
 801ffb8:	1080201c 	xori	r2,r2,128
 801ffbc:	10bfe004 	addi	r2,r2,-128
 801ffc0:	10c01324 	muli	r3,r2,76
 801ffc4:	00820174 	movhi	r2,2053
 801ffc8:	1885883a 	add	r2,r3,r2
 801ffcc:	10935c17 	ldw	r2,19824(r2)
 801ffd0:	10000a1e 	bne	r2,zero,801fffc <alt_tse_system_add_sys+0x3d8>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_tx\n", tse_system_count);
 801ffd4:	d0a07a83 	ldbu	r2,-32278(gp)
 801ffd8:	10803fcc 	andi	r2,r2,255
 801ffdc:	1080201c 	xori	r2,r2,128
 801ffe0:	10bfe004 	addi	r2,r2,-128
 801ffe4:	100b883a 	mov	r5,r2
 801ffe8:	01020174 	movhi	r4,2053
 801ffec:	21038c04 	addi	r4,r4,3632
 801fff0:	8003b840 	call	8003b84 <printf>
            return ALTERA_TSE_MALLOC_FAILED;
 801fff4:	00bfffc4 	movi	r2,-1
 801fff8:	00013506 	br	80204d0 <alt_tse_system_add_sys+0x8ac>
        }   
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_tx, pmsgdma->tse_msgdma_tx);
 801fffc:	d0a07a83 	ldbu	r2,-32278(gp)
 8020000:	10803fcc 	andi	r2,r2,255
 8020004:	1080201c 	xori	r2,r2,128
 8020008:	10bfe004 	addi	r2,r2,-128
 802000c:	10c01324 	muli	r3,r2,76
 8020010:	00820174 	movhi	r2,2053
 8020014:	1885883a 	add	r2,r3,r2
 8020018:	10d35c17 	ldw	r3,19824(r2)
 802001c:	e0bffb17 	ldw	r2,-20(fp)
 8020020:	10800017 	ldw	r2,0(r2)
 8020024:	100b883a 	mov	r5,r2
 8020028:	1809883a 	mov	r4,r3
 802002c:	8003d700 	call	8003d70 <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx = (char *) malloc(strlen(pmsgdma->tse_msgdma_rx) + 1);
 8020030:	e0bffb17 	ldw	r2,-20(fp)
 8020034:	10800117 	ldw	r2,4(r2)
 8020038:	1009883a 	mov	r4,r2
 802003c:	80044880 	call	8004488 <strlen>
 8020040:	10800044 	addi	r2,r2,1
 8020044:	d0e07a83 	ldbu	r3,-32278(gp)
 8020048:	1c003fcc 	andi	r16,r3,255
 802004c:	8400201c 	xori	r16,r16,128
 8020050:	843fe004 	addi	r16,r16,-128
 8020054:	1009883a 	mov	r4,r2
 8020058:	804e0840 	call	804e084 <malloc>
 802005c:	1009883a 	mov	r4,r2
 8020060:	80c01324 	muli	r3,r16,76
 8020064:	00820174 	movhi	r2,2053
 8020068:	1885883a 	add	r2,r3,r2
 802006c:	11135d15 	stw	r4,19828(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_rx) {
 8020070:	d0a07a83 	ldbu	r2,-32278(gp)
 8020074:	10803fcc 	andi	r2,r2,255
 8020078:	1080201c 	xori	r2,r2,128
 802007c:	10bfe004 	addi	r2,r2,-128
 8020080:	10c01324 	muli	r3,r2,76
 8020084:	00820174 	movhi	r2,2053
 8020088:	1885883a 	add	r2,r3,r2
 802008c:	10935d17 	ldw	r2,19828(r2)
 8020090:	10000a1e 	bne	r2,zero,80200bc <alt_tse_system_add_sys+0x498>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_rx\n", tse_system_count);
 8020094:	d0a07a83 	ldbu	r2,-32278(gp)
 8020098:	10803fcc 	andi	r2,r2,255
 802009c:	1080201c 	xori	r2,r2,128
 80200a0:	10bfe004 	addi	r2,r2,-128
 80200a4:	100b883a 	mov	r5,r2
 80200a8:	01020174 	movhi	r4,2053
 80200ac:	21039f04 	addi	r4,r4,3708
 80200b0:	8003b840 	call	8003b84 <printf>
            return ALTERA_TSE_MALLOC_FAILED;
 80200b4:	00bfffc4 	movi	r2,-1
 80200b8:	00010506 	br	80204d0 <alt_tse_system_add_sys+0x8ac>
        }
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_rx, pmsgdma->tse_msgdma_rx);
 80200bc:	d0a07a83 	ldbu	r2,-32278(gp)
 80200c0:	10803fcc 	andi	r2,r2,255
 80200c4:	1080201c 	xori	r2,r2,128
 80200c8:	10bfe004 	addi	r2,r2,-128
 80200cc:	10c01324 	muli	r3,r2,76
 80200d0:	00820174 	movhi	r2,2053
 80200d4:	1885883a 	add	r2,r3,r2
 80200d8:	10d35d17 	ldw	r3,19828(r2)
 80200dc:	e0bffb17 	ldw	r2,-20(fp)
 80200e0:	10800117 	ldw	r2,4(r2)
 80200e4:	100b883a 	mov	r5,r2
 80200e8:	1809883a 	mov	r4,r3
 80200ec:	8003d700 	call	8003d70 <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx_irq = pmsgdma->tse_msgdma_rx_irq;
 80200f0:	d0a07a83 	ldbu	r2,-32278(gp)
 80200f4:	10803fcc 	andi	r2,r2,255
 80200f8:	1080201c 	xori	r2,r2,128
 80200fc:	10bfe004 	addi	r2,r2,-128
 8020100:	e0fffb17 	ldw	r3,-20(fp)
 8020104:	18c0020b 	ldhu	r3,8(r3)
 8020108:	11001324 	muli	r4,r2,76
 802010c:	00820174 	movhi	r2,2053
 8020110:	2085883a 	add	r2,r4,r2
 8020114:	10d35e0d 	sth	r3,19832(r2)
        
        /* Add descriptor memory info to alt_tse_system_info structure */
        if(pmem == 0) {
 8020118:	e0bffc17 	ldw	r2,-16(fp)
 802011c:	1000111e 	bne	r2,zero,8020164 <alt_tse_system_add_sys+0x540>
            tse_mac_device[tse_system_count].ext_desc_mem    = TSE_INT_DESC_MEM;
 8020120:	d0a07a83 	ldbu	r2,-32278(gp)
 8020124:	10803fcc 	andi	r2,r2,255
 8020128:	1080201c 	xori	r2,r2,128
 802012c:	10bfe004 	addi	r2,r2,-128
 8020130:	10c01324 	muli	r3,r2,76
 8020134:	00820174 	movhi	r2,2053
 8020138:	1885883a 	add	r2,r3,r2
 802013c:	10135e85 	stb	zero,19834(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = TSE_INT_DESC_MEM;
 8020140:	d0a07a83 	ldbu	r2,-32278(gp)
 8020144:	10803fcc 	andi	r2,r2,255
 8020148:	1080201c 	xori	r2,r2,128
 802014c:	10bfe004 	addi	r2,r2,-128
 8020150:	10c01324 	muli	r3,r2,76
 8020154:	00820174 	movhi	r2,2053
 8020158:	1885883a 	add	r2,r3,r2
 802015c:	10135f15 	stw	zero,19836(r2)
 8020160:	00001406 	br	80201b4 <alt_tse_system_add_sys+0x590>
        }
        else {
            tse_mac_device[tse_system_count].ext_desc_mem    = pmem->ext_desc_mem;
 8020164:	d0a07a83 	ldbu	r2,-32278(gp)
 8020168:	10803fcc 	andi	r2,r2,255
 802016c:	1080201c 	xori	r2,r2,128
 8020170:	10bfe004 	addi	r2,r2,-128
 8020174:	e0fffc17 	ldw	r3,-16(fp)
 8020178:	18c00003 	ldbu	r3,0(r3)
 802017c:	11001324 	muli	r4,r2,76
 8020180:	00820174 	movhi	r2,2053
 8020184:	2085883a 	add	r2,r4,r2
 8020188:	10d35e85 	stb	r3,19834(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = pmem->desc_mem_base;
 802018c:	d0a07a83 	ldbu	r2,-32278(gp)
 8020190:	10803fcc 	andi	r2,r2,255
 8020194:	1080201c 	xori	r2,r2,128
 8020198:	10bfe004 	addi	r2,r2,-128
 802019c:	e0fffc17 	ldw	r3,-16(fp)
 80201a0:	18c00117 	ldw	r3,4(r3)
 80201a4:	11001324 	muli	r4,r2,76
 80201a8:	00820174 	movhi	r2,2053
 80201ac:	2085883a 	add	r2,r4,r2
 80201b0:	10d35f15 	stw	r3,19836(r2)
        }
        
        /* Add shared fifo info to alt_tse_system_info structure */
        if(pfifo == 0) {
 80201b4:	e0bffe17 	ldw	r2,-8(fp)
 80201b8:	1000391e 	bne	r2,zero,80202a0 <alt_tse_system_add_sys+0x67c>
            tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 80201bc:	d0a07a83 	ldbu	r2,-32278(gp)
 80201c0:	10803fcc 	andi	r2,r2,255
 80201c4:	1080201c 	xori	r2,r2,128
 80201c8:	10bfe004 	addi	r2,r2,-128
 80201cc:	10c01324 	muli	r3,r2,76
 80201d0:	00820174 	movhi	r2,2053
 80201d4:	1885883a 	add	r2,r3,r2
 80201d8:	10136005 	stb	zero,19840(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = TSE_NO_SHARED_FIFO;
 80201dc:	d0a07a83 	ldbu	r2,-32278(gp)
 80201e0:	10803fcc 	andi	r2,r2,255
 80201e4:	1080201c 	xori	r2,r2,128
 80201e8:	10bfe004 	addi	r2,r2,-128
 80201ec:	10c01324 	muli	r3,r2,76
 80201f0:	00820174 	movhi	r2,2053
 80201f4:	1885883a 	add	r2,r3,r2
 80201f8:	10136115 	stw	zero,19844(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = TSE_NO_SHARED_FIFO;
 80201fc:	d0a07a83 	ldbu	r2,-32278(gp)
 8020200:	10803fcc 	andi	r2,r2,255
 8020204:	1080201c 	xori	r2,r2,128
 8020208:	10bfe004 	addi	r2,r2,-128
 802020c:	10c01324 	muli	r3,r2,76
 8020210:	00820174 	movhi	r2,2053
 8020214:	1885883a 	add	r2,r3,r2
 8020218:	10136215 	stw	zero,19848(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 802021c:	d0a07a83 	ldbu	r2,-32278(gp)
 8020220:	10803fcc 	andi	r2,r2,255
 8020224:	1080201c 	xori	r2,r2,128
 8020228:	10bfe004 	addi	r2,r2,-128
 802022c:	10c01324 	muli	r3,r2,76
 8020230:	00820174 	movhi	r2,2053
 8020234:	1885883a 	add	r2,r3,r2
 8020238:	10136315 	stw	zero,19852(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = TSE_NO_SHARED_FIFO;
 802023c:	d0a07a83 	ldbu	r2,-32278(gp)
 8020240:	10803fcc 	andi	r2,r2,255
 8020244:	1080201c 	xori	r2,r2,128
 8020248:	10bfe004 	addi	r2,r2,-128
 802024c:	10c01324 	muli	r3,r2,76
 8020250:	00820174 	movhi	r2,2053
 8020254:	1885883a 	add	r2,r3,r2
 8020258:	10136415 	stw	zero,19856(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = TSE_NO_SHARED_FIFO;
 802025c:	d0a07a83 	ldbu	r2,-32278(gp)
 8020260:	10803fcc 	andi	r2,r2,255
 8020264:	1080201c 	xori	r2,r2,128
 8020268:	10bfe004 	addi	r2,r2,-128
 802026c:	10c01324 	muli	r3,r2,76
 8020270:	00820174 	movhi	r2,2053
 8020274:	1885883a 	add	r2,r3,r2
 8020278:	10136515 	stw	zero,19860(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 802027c:	d0a07a83 	ldbu	r2,-32278(gp)
 8020280:	10803fcc 	andi	r2,r2,255
 8020284:	1080201c 	xori	r2,r2,128
 8020288:	10bfe004 	addi	r2,r2,-128
 802028c:	10c01324 	muli	r3,r2,76
 8020290:	00820174 	movhi	r2,2053
 8020294:	1885883a 	add	r2,r3,r2
 8020298:	10136615 	stw	zero,19864(r2)
 802029c:	00004606 	br	80203b8 <alt_tse_system_add_sys+0x794>
        }
        else {
            tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 80202a0:	d0a07a83 	ldbu	r2,-32278(gp)
 80202a4:	10803fcc 	andi	r2,r2,255
 80202a8:	1080201c 	xori	r2,r2,128
 80202ac:	10bfe004 	addi	r2,r2,-128
 80202b0:	e0fffe17 	ldw	r3,-8(fp)
 80202b4:	18c00003 	ldbu	r3,0(r3)
 80202b8:	11001324 	muli	r4,r2,76
 80202bc:	00820174 	movhi	r2,2053
 80202c0:	2085883a 	add	r2,r4,r2
 80202c4:	10d36005 	stb	r3,19840(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = pfifo->tse_shared_fifo_tx_ctrl_base;
 80202c8:	d0a07a83 	ldbu	r2,-32278(gp)
 80202cc:	10803fcc 	andi	r2,r2,255
 80202d0:	1080201c 	xori	r2,r2,128
 80202d4:	10bfe004 	addi	r2,r2,-128
 80202d8:	e0fffe17 	ldw	r3,-8(fp)
 80202dc:	18c00117 	ldw	r3,4(r3)
 80202e0:	11001324 	muli	r4,r2,76
 80202e4:	00820174 	movhi	r2,2053
 80202e8:	2085883a 	add	r2,r4,r2
 80202ec:	10d36115 	stw	r3,19844(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = pfifo->tse_shared_fifo_tx_stat_base;
 80202f0:	d0a07a83 	ldbu	r2,-32278(gp)
 80202f4:	10803fcc 	andi	r2,r2,255
 80202f8:	1080201c 	xori	r2,r2,128
 80202fc:	10bfe004 	addi	r2,r2,-128
 8020300:	e0fffe17 	ldw	r3,-8(fp)
 8020304:	18c00217 	ldw	r3,8(r3)
 8020308:	11001324 	muli	r4,r2,76
 802030c:	00820174 	movhi	r2,2053
 8020310:	2085883a 	add	r2,r4,r2
 8020314:	10d36215 	stw	r3,19848(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 8020318:	d0a07a83 	ldbu	r2,-32278(gp)
 802031c:	10803fcc 	andi	r2,r2,255
 8020320:	1080201c 	xori	r2,r2,128
 8020324:	10bfe004 	addi	r2,r2,-128
 8020328:	e0fffe17 	ldw	r3,-8(fp)
 802032c:	18c00317 	ldw	r3,12(r3)
 8020330:	11001324 	muli	r4,r2,76
 8020334:	00820174 	movhi	r2,2053
 8020338:	2085883a 	add	r2,r4,r2
 802033c:	10d36315 	stw	r3,19852(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = pfifo->tse_shared_fifo_rx_ctrl_base;
 8020340:	d0a07a83 	ldbu	r2,-32278(gp)
 8020344:	10803fcc 	andi	r2,r2,255
 8020348:	1080201c 	xori	r2,r2,128
 802034c:	10bfe004 	addi	r2,r2,-128
 8020350:	e0fffe17 	ldw	r3,-8(fp)
 8020354:	18c00417 	ldw	r3,16(r3)
 8020358:	11001324 	muli	r4,r2,76
 802035c:	00820174 	movhi	r2,2053
 8020360:	2085883a 	add	r2,r4,r2
 8020364:	10d36415 	stw	r3,19856(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = pfifo->tse_shared_fifo_rx_stat_base;
 8020368:	d0a07a83 	ldbu	r2,-32278(gp)
 802036c:	10803fcc 	andi	r2,r2,255
 8020370:	1080201c 	xori	r2,r2,128
 8020374:	10bfe004 	addi	r2,r2,-128
 8020378:	e0fffe17 	ldw	r3,-8(fp)
 802037c:	18c00517 	ldw	r3,20(r3)
 8020380:	11001324 	muli	r4,r2,76
 8020384:	00820174 	movhi	r2,2053
 8020388:	2085883a 	add	r2,r4,r2
 802038c:	10d36515 	stw	r3,19860(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 8020390:	d0a07a83 	ldbu	r2,-32278(gp)
 8020394:	10803fcc 	andi	r2,r2,255
 8020398:	1080201c 	xori	r2,r2,128
 802039c:	10bfe004 	addi	r2,r2,-128
 80203a0:	e0fffe17 	ldw	r3,-8(fp)
 80203a4:	18c00617 	ldw	r3,24(r3)
 80203a8:	11001324 	muli	r4,r2,76
 80203ac:	00820174 	movhi	r2,2053
 80203b0:	2085883a 	add	r2,r4,r2
 80203b4:	10d36615 	stw	r3,19864(r2)
        }
        
        /* Add PHY info to alt_tse_system_info structure */
        if(pphy == 0) {
 80203b8:	e0bffd17 	ldw	r2,-12(fp)
 80203bc:	1000121e 	bne	r2,zero,8020408 <alt_tse_system_add_sys+0x7e4>
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = TSE_PHY_AUTO_ADDRESS;
 80203c0:	d0a07a83 	ldbu	r2,-32278(gp)
 80203c4:	10803fcc 	andi	r2,r2,255
 80203c8:	1080201c 	xori	r2,r2,128
 80203cc:	10bfe004 	addi	r2,r2,-128
 80203d0:	11001324 	muli	r4,r2,76
 80203d4:	00ffffc4 	movi	r3,-1
 80203d8:	00820174 	movhi	r2,2053
 80203dc:	2085883a 	add	r2,r4,r2
 80203e0:	10d36715 	stw	r3,19868(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = 0;
 80203e4:	d0a07a83 	ldbu	r2,-32278(gp)
 80203e8:	10803fcc 	andi	r2,r2,255
 80203ec:	1080201c 	xori	r2,r2,128
 80203f0:	10bfe004 	addi	r2,r2,-128
 80203f4:	10c01324 	muli	r3,r2,76
 80203f8:	00820174 	movhi	r2,2053
 80203fc:	1885883a 	add	r2,r3,r2
 8020400:	10136815 	stw	zero,19872(r2)
 8020404:	00001406 	br	8020458 <alt_tse_system_add_sys+0x834>
        }
        else {
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = pphy->tse_phy_mdio_address;
 8020408:	d0a07a83 	ldbu	r2,-32278(gp)
 802040c:	10803fcc 	andi	r2,r2,255
 8020410:	1080201c 	xori	r2,r2,128
 8020414:	10bfe004 	addi	r2,r2,-128
 8020418:	e0fffd17 	ldw	r3,-12(fp)
 802041c:	18c00017 	ldw	r3,0(r3)
 8020420:	11001324 	muli	r4,r2,76
 8020424:	00820174 	movhi	r2,2053
 8020428:	2085883a 	add	r2,r4,r2
 802042c:	10d36715 	stw	r3,19868(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = pphy->tse_phy_cfg;
 8020430:	d0a07a83 	ldbu	r2,-32278(gp)
 8020434:	10803fcc 	andi	r2,r2,255
 8020438:	1080201c 	xori	r2,r2,128
 802043c:	10bfe004 	addi	r2,r2,-128
 8020440:	e0fffd17 	ldw	r3,-12(fp)
 8020444:	18c00117 	ldw	r3,4(r3)
 8020448:	11001324 	muli	r4,r2,76
 802044c:	00820174 	movhi	r2,2053
 8020450:	2085883a 	add	r2,r4,r2
 8020454:	10d36815 	stw	r3,19872(r2)
        }
        
        /* Point to next structure */
        pmsgdma++;
 8020458:	e0bffb17 	ldw	r2,-20(fp)
 802045c:	10800304 	addi	r2,r2,12
 8020460:	e0bffb15 	stw	r2,-20(fp)
        if(pmem) pmem++;
 8020464:	e0bffc17 	ldw	r2,-16(fp)
 8020468:	10000326 	beq	r2,zero,8020478 <alt_tse_system_add_sys+0x854>
 802046c:	e0bffc17 	ldw	r2,-16(fp)
 8020470:	10800204 	addi	r2,r2,8
 8020474:	e0bffc15 	stw	r2,-16(fp)
        if(pfifo) pfifo++;
 8020478:	e0bffe17 	ldw	r2,-8(fp)
 802047c:	10000326 	beq	r2,zero,802048c <alt_tse_system_add_sys+0x868>
 8020480:	e0bffe17 	ldw	r2,-8(fp)
 8020484:	10800704 	addi	r2,r2,28
 8020488:	e0bffe15 	stw	r2,-8(fp)
        if(pphy) pphy++;
 802048c:	e0bffd17 	ldw	r2,-12(fp)
 8020490:	10000326 	beq	r2,zero,80204a0 <alt_tse_system_add_sys+0x87c>
 8020494:	e0bffd17 	ldw	r2,-12(fp)
 8020498:	10800204 	addi	r2,r2,8
 802049c:	e0bffd15 	stw	r2,-12(fp)
        
        tse_system_count++;
 80204a0:	d0a07a83 	ldbu	r2,-32278(gp)
 80204a4:	10800044 	addi	r2,r2,1
 80204a8:	d0a07a85 	stb	r2,-32278(gp)
        max_mac_system = tse_system_count;
 80204ac:	d0a07a83 	ldbu	r2,-32278(gp)
 80204b0:	d0a02705 	stb	r2,-32612(gp)
    for(i = 0; i < loop_end; i++) {
 80204b4:	e0bffa17 	ldw	r2,-24(fp)
 80204b8:	10800044 	addi	r2,r2,1
 80204bc:	e0bffa15 	stw	r2,-24(fp)
 80204c0:	e0fffa17 	ldw	r3,-24(fp)
 80204c4:	e0bff917 	ldw	r2,-28(fp)
 80204c8:	18be0016 	blt	r3,r2,801fccc <alt_tse_system_add_sys+0xa8>
    }
    
    return SUCCESS;
 80204cc:	0005883a 	mov	r2,zero
    
}
 80204d0:	e6ffff04 	addi	sp,fp,-4
 80204d4:	dfc00217 	ldw	ra,8(sp)
 80204d8:	df000117 	ldw	fp,4(sp)
 80204dc:	dc000017 	ldw	r16,0(sp)
 80204e0:	dec00304 	addi	sp,sp,12
 80204e4:	f800283a 	ret

080204e8 <alt_tse_sys_enable_mdio_sharing>:
 * @param        number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 *                 ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 80204e8:	defff904 	addi	sp,sp,-28
 80204ec:	dfc00615 	stw	ra,24(sp)
 80204f0:	df000515 	stw	fp,20(sp)
 80204f4:	df000504 	addi	fp,sp,20
 80204f8:	e13ffc15 	stw	r4,-16(fp)
 80204fc:	2805883a 	mov	r2,r5
 8020500:	e0bffb05 	stb	r2,-20(fp)
    alt_32 i;
    alt_32 j;
    
    alt_tse_system_mac *psys_mac;
    
    for(i = 0; i < number_of_mac; i++) {
 8020504:	e03fff15 	stw	zero,-4(fp)
 8020508:	00003f06 	br	8020608 <alt_tse_sys_enable_mdio_sharing+0x120>
        psys_mac = psys_mac_list[i];
 802050c:	e0bfff17 	ldw	r2,-4(fp)
 8020510:	100490ba 	slli	r2,r2,2
 8020514:	e0fffc17 	ldw	r3,-16(fp)
 8020518:	1885883a 	add	r2,r3,r2
 802051c:	10800017 	ldw	r2,0(r2)
 8020520:	e0bffd15 	stw	r2,-12(fp)
        
        if(psys_mac == 0) {
 8020524:	e0bffd17 	ldw	r2,-12(fp)
 8020528:	1000081e 	bne	r2,zero,802054c <alt_tse_sys_enable_mdio_sharing+0x64>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 802052c:	01020174 	movhi	r4,2053
 8020530:	21034d04 	addi	r4,r4,3380
 8020534:	8003ca80 	call	8003ca8 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 8020538:	01020174 	movhi	r4,2053
 802053c:	2103b204 	addi	r4,r4,3784
 8020540:	8003ca80 	call	8003ca8 <puts>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 8020544:	00bfffc4 	movi	r2,-1
 8020548:	00003306 	br	8020618 <alt_tse_sys_enable_mdio_sharing+0x130>
        }
        
        for(j = 0; j < max_mac_system; j++) {
 802054c:	e03ffe15 	stw	zero,-8(fp)
 8020550:	00002606 	br	80205ec <alt_tse_sys_enable_mdio_sharing+0x104>
            
            if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 8020554:	e0bffd17 	ldw	r2,-12(fp)
 8020558:	10c00017 	ldw	r3,0(r2)
 802055c:	e0bffe17 	ldw	r2,-8(fp)
 8020560:	11001324 	muli	r4,r2,76
 8020564:	00820174 	movhi	r2,2053
 8020568:	2085883a 	add	r2,r4,r2
 802056c:	10935617 	ldw	r2,19800(r2)
 8020570:	18801b1e 	bne	r3,r2,80205e0 <alt_tse_sys_enable_mdio_sharing+0xf8>
                if(tse_mac_device[j].tse_multichannel_mac) {
 8020574:	e0bffe17 	ldw	r2,-8(fp)
 8020578:	10c01324 	muli	r3,r2,76
 802057c:	00820174 	movhi	r2,2053
 8020580:	1885883a 	add	r2,r3,r2
 8020584:	109359c3 	ldbu	r2,19815(r2)
 8020588:	10803fcc 	andi	r2,r2,255
 802058c:	10000826 	beq	r2,zero,80205b0 <alt_tse_sys_enable_mdio_sharing+0xc8>
                    tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 8020590:	01020174 	movhi	r4,2053
 8020594:	2103c604 	addi	r4,r4,3864
 8020598:	8003ca80 	call	8003ca8 <puts>
                    tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 802059c:	01020174 	movhi	r4,2053
 80205a0:	2103d704 	addi	r4,r4,3932
 80205a4:	8003ca80 	call	8003ca8 <puts>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 80205a8:	00bfffc4 	movi	r2,-1
 80205ac:	00001a06 	br	8020618 <alt_tse_sys_enable_mdio_sharing+0x130>
                }
                
                tse_mac_device[j].tse_mdio_shared = 1;
 80205b0:	e0bffe17 	ldw	r2,-8(fp)
 80205b4:	11001324 	muli	r4,r2,76
 80205b8:	00c00044 	movi	r3,1
 80205bc:	00820174 	movhi	r2,2053
 80205c0:	2085883a 	add	r2,r4,r2
 80205c4:	10d35a45 	stb	r3,19817(r2)
                tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 80205c8:	e0bffe17 	ldw	r2,-8(fp)
 80205cc:	11001324 	muli	r4,r2,76
 80205d0:	e0fffb03 	ldbu	r3,-20(fp)
 80205d4:	00820174 	movhi	r2,2053
 80205d8:	2085883a 	add	r2,r4,r2
 80205dc:	10d35a85 	stb	r3,19818(r2)
        for(j = 0; j < max_mac_system; j++) {
 80205e0:	e0bffe17 	ldw	r2,-8(fp)
 80205e4:	10800044 	addi	r2,r2,1
 80205e8:	e0bffe15 	stw	r2,-8(fp)
 80205ec:	d0a02703 	ldbu	r2,-32612(gp)
 80205f0:	10803fcc 	andi	r2,r2,255
 80205f4:	e0fffe17 	ldw	r3,-8(fp)
 80205f8:	18bfd616 	blt	r3,r2,8020554 <alt_tse_sys_enable_mdio_sharing+0x6c>
    for(i = 0; i < number_of_mac; i++) {
 80205fc:	e0bfff17 	ldw	r2,-4(fp)
 8020600:	10800044 	addi	r2,r2,1
 8020604:	e0bfff15 	stw	r2,-4(fp)
 8020608:	e0bffb03 	ldbu	r2,-20(fp)
 802060c:	e0ffff17 	ldw	r3,-4(fp)
 8020610:	18bfbe16 	blt	r3,r2,802050c <alt_tse_sys_enable_mdio_sharing+0x24>
            }
        }    
    }
    
    return SUCCESS;
 8020614:	0005883a 	mov	r2,zero
}
 8020618:	e037883a 	mov	sp,fp
 802061c:	dfc00117 	ldw	ra,4(sp)
 8020620:	df000017 	ldw	fp,0(sp)
 8020624:	dec00204 	addi	sp,sp,8
 8020628:	f800283a 	ret

0802062c <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 802062c:	defffc04 	addi	sp,sp,-16
 8020630:	dfc00315 	stw	ra,12(sp)
 8020634:	df000215 	stw	fp,8(sp)
 8020638:	df000204 	addi	fp,sp,8
 802063c:	e13ffe15 	stw	r4,-8(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 8020640:	e13ffe17 	ldw	r4,-8(fp)
 8020644:	80208080 	call	8020808 <alt_tse_get_mac_info>
 8020648:	10800317 	ldw	r2,12(r2)
 802064c:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 8020650:	e13fff17 	ldw	r4,-4(fp)
 8020654:	802399c0 	call	802399c <alt_tse_phy_get_common_speed>
}
 8020658:	e037883a 	mov	sp,fp
 802065c:	dfc00117 	ldw	ra,4(sp)
 8020660:	df000017 	ldw	fp,0(sp)
 8020664:	dec00204 	addi	sp,sp,8
 8020668:	f800283a 	ret

0802066c <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 802066c:	defffb04 	addi	sp,sp,-20
 8020670:	dfc00415 	stw	ra,16(sp)
 8020674:	df000315 	stw	fp,12(sp)
 8020678:	df000304 	addi	fp,sp,12
 802067c:	e13ffe15 	stw	r4,-8(fp)
 8020680:	e17ffd15 	stw	r5,-12(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 8020684:	e13ffe17 	ldw	r4,-8(fp)
 8020688:	80208080 	call	8020808 <alt_tse_get_mac_info>
 802068c:	10800317 	ldw	r2,12(r2)
 8020690:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 8020694:	e17ffd17 	ldw	r5,-12(fp)
 8020698:	e13fff17 	ldw	r4,-4(fp)
 802069c:	8023cb80 	call	8023cb8 <alt_tse_phy_set_common_speed>
}
 80206a0:	e037883a 	mov	sp,fp
 80206a4:	dfc00117 	ldw	ra,4(sp)
 80206a8:	df000017 	ldw	fp,0(sp)
 80206ac:	dec00204 	addi	sp,sp,8
 80206b0:	f800283a 	ret

080206b4 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 80206b4:	defffd04 	addi	sp,sp,-12
 80206b8:	df000215 	stw	fp,8(sp)
 80206bc:	df000204 	addi	fp,sp,8
 80206c0:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 80206c4:	e03fff15 	stw	zero,-4(fp)
 80206c8:	00000c06 	br	80206fc <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
 80206cc:	e0bfff17 	ldw	r2,-4(fp)
 80206d0:	10c01324 	muli	r3,r2,76
 80206d4:	00820174 	movhi	r2,2053
 80206d8:	10935604 	addi	r2,r2,19800
 80206dc:	1885883a 	add	r2,r3,r2
 80206e0:	e0fffe17 	ldw	r3,-8(fp)
 80206e4:	1880021e 	bne	r3,r2,80206f0 <alt_tse_get_system_index+0x3c>
            return i;
 80206e8:	e0bfff17 	ldw	r2,-4(fp)
 80206ec:	00000806 	br	8020710 <alt_tse_get_system_index+0x5c>
    for(i = 0; i < max_mac_system; i++) {
 80206f0:	e0bfff17 	ldw	r2,-4(fp)
 80206f4:	10800044 	addi	r2,r2,1
 80206f8:	e0bfff15 	stw	r2,-4(fp)
 80206fc:	d0a02703 	ldbu	r2,-32612(gp)
 8020700:	10803fcc 	andi	r2,r2,255
 8020704:	e0ffff17 	ldw	r3,-4(fp)
 8020708:	18bff016 	blt	r3,r2,80206cc <alt_tse_get_system_index+0x18>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 802070c:	00bfffc4 	movi	r2,-1
}
 8020710:	e037883a 	mov	sp,fp
 8020714:	df000017 	ldw	fp,0(sp)
 8020718:	dec00104 	addi	sp,sp,4
 802071c:	f800283a 	ret

08020720 <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 8020720:	defffd04 	addi	sp,sp,-12
 8020724:	df000215 	stw	fp,8(sp)
 8020728:	df000204 	addi	fp,sp,8
 802072c:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 8020730:	e03fff15 	stw	zero,-4(fp)
 8020734:	00000c06 	br	8020768 <alt_tse_get_mac_group_index+0x48>
        if(pmac_group == pmac_groups[i]) {
 8020738:	e0bfff17 	ldw	r2,-4(fp)
 802073c:	100690ba 	slli	r3,r2,2
 8020740:	008201b4 	movhi	r2,2054
 8020744:	1885883a 	add	r2,r3,r2
 8020748:	10bc4d17 	ldw	r2,-3788(r2)
 802074c:	e0fffe17 	ldw	r3,-8(fp)
 8020750:	1880021e 	bne	r3,r2,802075c <alt_tse_get_mac_group_index+0x3c>
            return i;
 8020754:	e0bfff17 	ldw	r2,-4(fp)
 8020758:	00000806 	br	802077c <alt_tse_get_mac_group_index+0x5c>
    for(i = 0; i < mac_group_count; i++) {
 802075c:	e0bfff17 	ldw	r2,-4(fp)
 8020760:	10800044 	addi	r2,r2,1
 8020764:	e0bfff15 	stw	r2,-4(fp)
 8020768:	d0a07a43 	ldbu	r2,-32279(gp)
 802076c:	10803fcc 	andi	r2,r2,255
 8020770:	e0ffff17 	ldw	r3,-4(fp)
 8020774:	18bff016 	blt	r3,r2,8020738 <alt_tse_get_mac_group_index+0x18>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 8020778:	00bfffc4 	movi	r2,-1
}
 802077c:	e037883a 	mov	sp,fp
 8020780:	df000017 	ldw	fp,0(sp)
 8020784:	dec00104 	addi	sp,sp,4
 8020788:	f800283a 	ret

0802078c <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 802078c:	defffd04 	addi	sp,sp,-12
 8020790:	df000215 	stw	fp,8(sp)
 8020794:	df000204 	addi	fp,sp,8
 8020798:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 802079c:	e03fff15 	stw	zero,-4(fp)
 80207a0:	00000e06 	br	80207dc <alt_tse_get_mac_info_index+0x50>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 80207a4:	e0bffe17 	ldw	r2,-8(fp)
 80207a8:	10c00317 	ldw	r3,12(r2)
 80207ac:	e0bfff17 	ldw	r2,-4(fp)
 80207b0:	10800044 	addi	r2,r2,1
 80207b4:	100490ba 	slli	r2,r2,2
 80207b8:	1885883a 	add	r2,r3,r2
 80207bc:	10800017 	ldw	r2,0(r2)
 80207c0:	e0fffe17 	ldw	r3,-8(fp)
 80207c4:	1880021e 	bne	r3,r2,80207d0 <alt_tse_get_mac_info_index+0x44>
            return i;
 80207c8:	e0bfff17 	ldw	r2,-4(fp)
 80207cc:	00000a06 	br	80207f8 <alt_tse_get_mac_info_index+0x6c>
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 80207d0:	e0bfff17 	ldw	r2,-4(fp)
 80207d4:	10800044 	addi	r2,r2,1
 80207d8:	e0bfff15 	stw	r2,-4(fp)
 80207dc:	e0bffe17 	ldw	r2,-8(fp)
 80207e0:	10800317 	ldw	r2,12(r2)
 80207e4:	10800003 	ldbu	r2,0(r2)
 80207e8:	10803fcc 	andi	r2,r2,255
 80207ec:	e0ffff17 	ldw	r3,-4(fp)
 80207f0:	18bfec16 	blt	r3,r2,80207a4 <alt_tse_get_mac_info_index+0x18>
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 80207f4:	00bfffc4 	movi	r2,-1
}
 80207f8:	e037883a 	mov	sp,fp
 80207fc:	df000017 	ldw	fp,0(sp)
 8020800:	dec00104 	addi	sp,sp,4
 8020804:	f800283a 	ret

08020808 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 8020808:	defffa04 	addi	sp,sp,-24
 802080c:	df000515 	stw	fp,20(sp)
 8020810:	df000504 	addi	fp,sp,20
 8020814:	e13ffb15 	stw	r4,-20(fp)
    alt_32 i;
    alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 8020818:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 802081c:	e03ffc15 	stw	zero,-16(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 8020820:	e03fff15 	stw	zero,-4(fp)
 8020824:	00002206 	br	80208b0 <alt_tse_get_mac_info+0xa8>
        pmac_group = pmac_groups[i];
 8020828:	e0bfff17 	ldw	r2,-4(fp)
 802082c:	100690ba 	slli	r3,r2,2
 8020830:	008201b4 	movhi	r2,2054
 8020834:	1885883a 	add	r2,r3,r2
 8020838:	10bc4d17 	ldw	r2,-3788(r2)
 802083c:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 8020840:	e03ffe15 	stw	zero,-8(fp)
 8020844:	00001206 	br	8020890 <alt_tse_get_mac_info+0x88>
            pmac_info = pmac_group->pmac_info[j];
 8020848:	e0fffd17 	ldw	r3,-12(fp)
 802084c:	e0bffe17 	ldw	r2,-8(fp)
 8020850:	10800044 	addi	r2,r2,1
 8020854:	100490ba 	slli	r2,r2,2
 8020858:	1885883a 	add	r2,r3,r2
 802085c:	10800017 	ldw	r2,0(r2)
 8020860:	e0bffc15 	stw	r2,-16(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 8020864:	e0bffc17 	ldw	r2,-16(fp)
 8020868:	10800217 	ldw	r2,8(r2)
 802086c:	10800017 	ldw	r2,0(r2)
 8020870:	1007883a 	mov	r3,r2
 8020874:	e0bffb17 	ldw	r2,-20(fp)
 8020878:	10c0021e 	bne	r2,r3,8020884 <alt_tse_get_mac_info+0x7c>
                return pmac_info;
 802087c:	e0bffc17 	ldw	r2,-16(fp)
 8020880:	00001006 	br	80208c4 <alt_tse_get_mac_info+0xbc>
        for(j = 0; j < pmac_group->channel; j++) {
 8020884:	e0bffe17 	ldw	r2,-8(fp)
 8020888:	10800044 	addi	r2,r2,1
 802088c:	e0bffe15 	stw	r2,-8(fp)
 8020890:	e0bffd17 	ldw	r2,-12(fp)
 8020894:	10800003 	ldbu	r2,0(r2)
 8020898:	10803fcc 	andi	r2,r2,255
 802089c:	e0fffe17 	ldw	r3,-8(fp)
 80208a0:	18bfe916 	blt	r3,r2,8020848 <alt_tse_get_mac_info+0x40>
    for(i = 0; i < mac_group_count; i++) {
 80208a4:	e0bfff17 	ldw	r2,-4(fp)
 80208a8:	10800044 	addi	r2,r2,1
 80208ac:	e0bfff15 	stw	r2,-4(fp)
 80208b0:	d0a07a43 	ldbu	r2,-32279(gp)
 80208b4:	10803fcc 	andi	r2,r2,255
 80208b8:	e0ffff17 	ldw	r3,-4(fp)
 80208bc:	18bfda16 	blt	r3,r2,8020828 <alt_tse_get_mac_info+0x20>
            }
        }        
    }
    
    return 0;
 80208c0:	0005883a 	mov	r2,zero
}
 80208c4:	e037883a 	mov	sp,fp
 80208c8:	df000017 	ldw	fp,0(sp)
 80208cc:	dec00104 	addi	sp,sp,4
 80208d0:	f800283a 	ret

080208d4 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 80208d4:	defffc04 	addi	sp,sp,-16
 80208d8:	df000315 	stw	fp,12(sp)
 80208dc:	df000304 	addi	fp,sp,12
 80208e0:	e13ffe15 	stw	r4,-8(fp)
 80208e4:	2805883a 	mov	r2,r5
 80208e8:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 80208ec:	e0bffe17 	ldw	r2,-8(fp)
 80208f0:	10800204 	addi	r2,r2,8
 80208f4:	10800037 	ldwio	r2,0(r2)
 80208f8:	e0bfff15 	stw	r2,-4(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 80208fc:	e0bffd03 	ldbu	r2,-12(fp)
 8020900:	10800098 	cmpnei	r2,r2,2
 8020904:	1000091e 	bne	r2,zero,802092c <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8020908:	e0bfff17 	ldw	r2,-4(fp)
 802090c:	10800214 	ori	r2,r2,8
 8020910:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8020914:	e0ffff17 	ldw	r3,-4(fp)
 8020918:	00bf8034 	movhi	r2,65024
 802091c:	10bfffc4 	addi	r2,r2,-1
 8020920:	1884703a 	and	r2,r3,r2
 8020924:	e0bfff15 	stw	r2,-4(fp)
 8020928:	00001906 	br	8020990 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 802092c:	e0bffd03 	ldbu	r2,-12(fp)
 8020930:	10800058 	cmpnei	r2,r2,1
 8020934:	10000a1e 	bne	r2,zero,8020960 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8020938:	e0ffff17 	ldw	r3,-4(fp)
 802093c:	00bffdc4 	movi	r2,-9
 8020940:	1884703a 	and	r2,r3,r2
 8020944:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8020948:	e0ffff17 	ldw	r3,-4(fp)
 802094c:	00bf8034 	movhi	r2,65024
 8020950:	10bfffc4 	addi	r2,r2,-1
 8020954:	1884703a 	and	r2,r3,r2
 8020958:	e0bfff15 	stw	r2,-4(fp)
 802095c:	00000c06 	br	8020990 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 8020960:	e0bffd03 	ldbu	r2,-12(fp)
 8020964:	1000081e 	bne	r2,zero,8020988 <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8020968:	e0ffff17 	ldw	r3,-4(fp)
 802096c:	00bffdc4 	movi	r2,-9
 8020970:	1884703a 	and	r2,r3,r2
 8020974:	e0bfff15 	stw	r2,-4(fp)
    helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8020978:	e0bfff17 	ldw	r2,-4(fp)
 802097c:	10808034 	orhi	r2,r2,512
 8020980:	e0bfff15 	stw	r2,-4(fp)
 8020984:	00000206 	br	8020990 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
 8020988:	00bffd84 	movi	r2,-10
 802098c:	00000506 	br	80209a4 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 8020990:	e0bffe17 	ldw	r2,-8(fp)
 8020994:	10800204 	addi	r2,r2,8
 8020998:	e0ffff17 	ldw	r3,-4(fp)
 802099c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 80209a0:	0005883a 	mov	r2,zero
}
 80209a4:	e037883a 	mov	sp,fp
 80209a8:	df000017 	ldw	fp,0(sp)
 80209ac:	dec00104 	addi	sp,sp,4
 80209b0:	f800283a 	ret

080209b4 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 80209b4:	defffc04 	addi	sp,sp,-16
 80209b8:	df000315 	stw	fp,12(sp)
 80209bc:	df000304 	addi	fp,sp,12
 80209c0:	e13ffe15 	stw	r4,-8(fp)
 80209c4:	2805883a 	mov	r2,r5
 80209c8:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 80209cc:	e0bffe17 	ldw	r2,-8(fp)
 80209d0:	10800204 	addi	r2,r2,8
 80209d4:	10800037 	ldwio	r2,0(r2)
 80209d8:	e0bfff15 	stw	r2,-4(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 80209dc:	e0bffd03 	ldbu	r2,-12(fp)
 80209e0:	1000041e 	bne	r2,zero,80209f4 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 80209e4:	e0bfff17 	ldw	r2,-4(fp)
 80209e8:	10810014 	ori	r2,r2,1024
 80209ec:	e0bfff15 	stw	r2,-4(fp)
 80209f0:	00000a06 	br	8020a1c <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 80209f4:	e0bffd03 	ldbu	r2,-12(fp)
 80209f8:	10800058 	cmpnei	r2,r2,1
 80209fc:	1000051e 	bne	r2,zero,8020a14 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 8020a00:	e0ffff17 	ldw	r3,-4(fp)
 8020a04:	00beffc4 	movi	r2,-1025
 8020a08:	1884703a 	and	r2,r3,r2
 8020a0c:	e0bfff15 	stw	r2,-4(fp)
 8020a10:	00000206 	br	8020a1c <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
 8020a14:	00bffd84 	movi	r2,-10
 8020a18:	00000506 	br	8020a30 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 8020a1c:	e0bffe17 	ldw	r2,-8(fp)
 8020a20:	10800204 	addi	r2,r2,8
 8020a24:	e0ffff17 	ldw	r3,-4(fp)
 8020a28:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 8020a2c:	0005883a 	mov	r2,zero

}
 8020a30:	e037883a 	mov	sp,fp
 8020a34:	df000017 	ldw	fp,0(sp)
 8020a38:	dec00104 	addi	sp,sp,4
 8020a3c:	f800283a 	ret

08020a40 <getPHYSpeed>:
      (((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
    (((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
    (((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
    ((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 8020a40:	defff404 	addi	sp,sp,-48
 8020a44:	dfc00b15 	stw	ra,44(sp)
 8020a48:	df000a15 	stw	fp,40(sp)
 8020a4c:	df000a04 	addi	fp,sp,40
 8020a50:	e13ff715 	stw	r4,-36(fp)

    alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8020a54:	00800044 	movi	r2,1
 8020a58:	e0bffec5 	stb	r2,-5(fp)
    alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 8020a5c:	00800044 	movi	r2,1
 8020a60:	e0bffe85 	stb	r2,-6(fp)
    alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 8020a64:	e0bffe83 	ldbu	r2,-6(fp)
 8020a68:	10c0004c 	andi	r3,r2,1
 8020a6c:	e0bffec3 	ldbu	r2,-5(fp)
 8020a70:	10800098 	cmpnei	r2,r2,2
 8020a74:	1000021e 	bne	r2,zero,8020a80 <getPHYSpeed+0x40>
 8020a78:	00800084 	movi	r2,2
 8020a7c:	00000106 	br	8020a84 <getPHYSpeed+0x44>
 8020a80:	0005883a 	mov	r2,zero
 8020a84:	10c6b03a 	or	r3,r2,r3
 8020a88:	e0bffec3 	ldbu	r2,-5(fp)
 8020a8c:	10800058 	cmpnei	r2,r2,1
 8020a90:	1000021e 	bne	r2,zero,8020a9c <getPHYSpeed+0x5c>
 8020a94:	00800104 	movi	r2,4
 8020a98:	00000106 	br	8020aa0 <getPHYSpeed+0x60>
 8020a9c:	0005883a 	mov	r2,zero
 8020aa0:	10c6b03a 	or	r3,r2,r3
 8020aa4:	e0bffec3 	ldbu	r2,-5(fp)
 8020aa8:	1000021e 	bne	r2,zero,8020ab4 <getPHYSpeed+0x74>
 8020aac:	00800204 	movi	r2,8
 8020ab0:	00000106 	br	8020ab8 <getPHYSpeed+0x78>
 8020ab4:	0005883a 	mov	r2,zero
 8020ab8:	10c6b03a 	or	r3,r2,r3
 8020abc:	e0bffec3 	ldbu	r2,-5(fp)
 8020ac0:	108000d8 	cmpnei	r2,r2,3
 8020ac4:	1000021e 	bne	r2,zero,8020ad0 <getPHYSpeed+0x90>
 8020ac8:	00800074 	movhi	r2,1
 8020acc:	00000106 	br	8020ad4 <getPHYSpeed+0x94>
 8020ad0:	0005883a 	mov	r2,zero
 8020ad4:	10c4b03a 	or	r2,r2,r3
 8020ad8:	e0bfff15 	stw	r2,-4(fp)
    
    alt_tse_phy_info *pphy = 0;
 8020adc:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 8020ae0:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_group *pmac_group = 0;
 8020ae4:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
 8020ae8:	e03ffa15 	stw	zero,-24(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 8020aec:	e03ff9c5 	stb	zero,-25(fp)
    alt_8 mac_group_index = 0;
 8020af0:	e03ff985 	stb	zero,-26(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 8020af4:	d0a07ac3 	ldbu	r2,-32277(gp)
 8020af8:	10803fcc 	andi	r2,r2,255
 8020afc:	1000031e 	bne	r2,zero,8020b0c <getPHYSpeed+0xcc>
        alt_tse_phy_init();
 8020b00:	80229f80 	call	80229f8 <alt_tse_phy_init>
        is_init = 1;
 8020b04:	00800044 	movi	r2,1
 8020b08:	d0a07ac5 	stb	r2,-32277(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 8020b0c:	e13ff717 	ldw	r4,-36(fp)
 8020b10:	80208080 	call	8020808 <alt_tse_get_mac_info>
 8020b14:	e0bffc15 	stw	r2,-16(fp)
    
    if(pmac_info == 0) {
 8020b18:	e0bffc17 	ldw	r2,-16(fp)
 8020b1c:	1000481e 	bne	r2,zero,8020c40 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8020b20:	00800044 	movi	r2,1
 8020b24:	e0bffec5 	stb	r2,-5(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 8020b28:	00800044 	movi	r2,1
 8020b2c:	e0bffe85 	stb	r2,-6(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 8020b30:	e0bffe83 	ldbu	r2,-6(fp)
 8020b34:	10c0004c 	andi	r3,r2,1
 8020b38:	e0bffec3 	ldbu	r2,-5(fp)
 8020b3c:	10800098 	cmpnei	r2,r2,2
 8020b40:	1000021e 	bne	r2,zero,8020b4c <getPHYSpeed+0x10c>
 8020b44:	00800084 	movi	r2,2
 8020b48:	00000106 	br	8020b50 <getPHYSpeed+0x110>
 8020b4c:	0005883a 	mov	r2,zero
 8020b50:	10c6b03a 	or	r3,r2,r3
 8020b54:	e0bffec3 	ldbu	r2,-5(fp)
 8020b58:	10800058 	cmpnei	r2,r2,1
 8020b5c:	1000021e 	bne	r2,zero,8020b68 <getPHYSpeed+0x128>
 8020b60:	00800104 	movi	r2,4
 8020b64:	00000106 	br	8020b6c <getPHYSpeed+0x12c>
 8020b68:	0005883a 	mov	r2,zero
 8020b6c:	10c6b03a 	or	r3,r2,r3
 8020b70:	e0bffec3 	ldbu	r2,-5(fp)
 8020b74:	1000021e 	bne	r2,zero,8020b80 <getPHYSpeed+0x140>
 8020b78:	00800204 	movi	r2,8
 8020b7c:	00000106 	br	8020b84 <getPHYSpeed+0x144>
 8020b80:	0005883a 	mov	r2,zero
 8020b84:	10c6b03a 	or	r3,r2,r3
 8020b88:	e0bffec3 	ldbu	r2,-5(fp)
 8020b8c:	108000d8 	cmpnei	r2,r2,3
 8020b90:	1000021e 	bne	r2,zero,8020b9c <getPHYSpeed+0x15c>
 8020b94:	00800074 	movhi	r2,1
 8020b98:	00000106 	br	8020ba0 <getPHYSpeed+0x160>
 8020b9c:	0005883a 	mov	r2,zero
 8020ba0:	10c4b03a 	or	r2,r2,r3
 8020ba4:	10802034 	orhi	r2,r2,128
 8020ba8:	e0bfff15 	stw	r2,-4(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 8020bac:	e0bffec3 	ldbu	r2,-5(fp)
 8020bb0:	108000a0 	cmpeqi	r2,r2,2
 8020bb4:	10000e1e 	bne	r2,zero,8020bf0 <getPHYSpeed+0x1b0>
 8020bb8:	e0bffec3 	ldbu	r2,-5(fp)
 8020bbc:	10800060 	cmpeqi	r2,r2,1
 8020bc0:	1000081e 	bne	r2,zero,8020be4 <getPHYSpeed+0x1a4>
 8020bc4:	e0bffec3 	ldbu	r2,-5(fp)
 8020bc8:	1000031e 	bne	r2,zero,8020bd8 <getPHYSpeed+0x198>
 8020bcc:	00820174 	movhi	r2,2053
 8020bd0:	1083e604 	addi	r2,r2,3992
 8020bd4:	00000806 	br	8020bf8 <getPHYSpeed+0x1b8>
 8020bd8:	00820174 	movhi	r2,2053
 8020bdc:	1083e704 	addi	r2,r2,3996
 8020be0:	00000506 	br	8020bf8 <getPHYSpeed+0x1b8>
 8020be4:	00820174 	movhi	r2,2053
 8020be8:	1083e904 	addi	r2,r2,4004
 8020bec:	00000206 	br	8020bf8 <getPHYSpeed+0x1b8>
 8020bf0:	00820174 	movhi	r2,2053
 8020bf4:	1083ea04 	addi	r2,r2,4008
 8020bf8:	e0fffe83 	ldbu	r3,-6(fp)
 8020bfc:	18c00058 	cmpnei	r3,r3,1
 8020c00:	1800031e 	bne	r3,zero,8020c10 <getPHYSpeed+0x1d0>
 8020c04:	00c20174 	movhi	r3,2053
 8020c08:	18c3ec04 	addi	r3,r3,4016
 8020c0c:	00000206 	br	8020c18 <getPHYSpeed+0x1d8>
 8020c10:	00c20174 	movhi	r3,2053
 8020c14:	18c3ee04 	addi	r3,r3,4024
 8020c18:	180d883a 	mov	r6,r3
 8020c1c:	100b883a 	mov	r5,r2
 8020c20:	01020174 	movhi	r4,2053
 8020c24:	2103f004 	addi	r4,r4,4032
 8020c28:	8003b840 	call	8003b84 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 8020c2c:	01020174 	movhi	r4,2053
 8020c30:	21040804 	addi	r4,r4,4128
 8020c34:	8003ca80 	call	8003ca8 <puts>
        return result;
 8020c38:	e0bfff17 	ldw	r2,-4(fp)
 8020c3c:	00021906 	br	80214a4 <getPHYSpeed+0xa64>
    }
    
    pphy = pmac_info->pphy_info;
 8020c40:	e0bffc17 	ldw	r2,-16(fp)
 8020c44:	10800117 	ldw	r2,4(r2)
 8020c48:	e0bffd15 	stw	r2,-12(fp)
    pmac_group = pmac_info->pmac_group;
 8020c4c:	e0bffc17 	ldw	r2,-16(fp)
 8020c50:	10800317 	ldw	r2,12(r2)
 8020c54:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
 8020c58:	e0bffc17 	ldw	r2,-16(fp)
 8020c5c:	10800217 	ldw	r2,8(r2)
 8020c60:	e0bffa15 	stw	r2,-24(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8020c64:	e13ffc17 	ldw	r4,-16(fp)
 8020c68:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8020c6c:	e0bff9c5 	stb	r2,-25(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 8020c70:	e13ffb17 	ldw	r4,-20(fp)
 8020c74:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8020c78:	e0bff985 	stb	r2,-26(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 8020c7c:	e0bffb17 	ldw	r2,-20(fp)
 8020c80:	10800117 	ldw	r2,4(r2)
 8020c84:	10800217 	ldw	r2,8(r2)
 8020c88:	10800303 	ldbu	r2,12(r2)
 8020c8c:	10803fcc 	andi	r2,r2,255
 8020c90:	10005a1e 	bne	r2,zero,8020dfc <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8020c94:	00800044 	movi	r2,1
 8020c98:	e0bffec5 	stb	r2,-5(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 8020c9c:	00800044 	movi	r2,1
 8020ca0:	e0bffe85 	stb	r2,-6(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 8020ca4:	e0bffe83 	ldbu	r2,-6(fp)
 8020ca8:	10c0004c 	andi	r3,r2,1
 8020cac:	e0bffec3 	ldbu	r2,-5(fp)
 8020cb0:	10800098 	cmpnei	r2,r2,2
 8020cb4:	1000021e 	bne	r2,zero,8020cc0 <getPHYSpeed+0x280>
 8020cb8:	00800084 	movi	r2,2
 8020cbc:	00000106 	br	8020cc4 <getPHYSpeed+0x284>
 8020cc0:	0005883a 	mov	r2,zero
 8020cc4:	10c6b03a 	or	r3,r2,r3
 8020cc8:	e0bffec3 	ldbu	r2,-5(fp)
 8020ccc:	10800058 	cmpnei	r2,r2,1
 8020cd0:	1000021e 	bne	r2,zero,8020cdc <getPHYSpeed+0x29c>
 8020cd4:	00800104 	movi	r2,4
 8020cd8:	00000106 	br	8020ce0 <getPHYSpeed+0x2a0>
 8020cdc:	0005883a 	mov	r2,zero
 8020ce0:	10c6b03a 	or	r3,r2,r3
 8020ce4:	e0bffec3 	ldbu	r2,-5(fp)
 8020ce8:	1000021e 	bne	r2,zero,8020cf4 <getPHYSpeed+0x2b4>
 8020cec:	00800204 	movi	r2,8
 8020cf0:	00000106 	br	8020cf8 <getPHYSpeed+0x2b8>
 8020cf4:	0005883a 	mov	r2,zero
 8020cf8:	10c6b03a 	or	r3,r2,r3
 8020cfc:	e0bffec3 	ldbu	r2,-5(fp)
 8020d00:	108000d8 	cmpnei	r2,r2,3
 8020d04:	1000021e 	bne	r2,zero,8020d10 <getPHYSpeed+0x2d0>
 8020d08:	00800074 	movhi	r2,1
 8020d0c:	00000106 	br	8020d14 <getPHYSpeed+0x2d4>
 8020d10:	0005883a 	mov	r2,zero
 8020d14:	10c4b03a 	or	r2,r2,r3
 8020d18:	10801034 	orhi	r2,r2,64
 8020d1c:	e0bfff15 	stw	r2,-4(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 8020d20:	010003f4 	movhi	r4,15
 8020d24:	21109004 	addi	r4,r4,16960
 8020d28:	803f9040 	call	803f904 <usleep>
        if(psys->tse_phy_cfg) {
 8020d2c:	e0bffa17 	ldw	r2,-24(fp)
 8020d30:	10801217 	ldw	r2,72(r2)
 8020d34:	10000d26 	beq	r2,zero,8020d6c <getPHYSpeed+0x32c>
            tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 8020d38:	e0bff987 	ldb	r2,-26(fp)
 8020d3c:	e0fff9c7 	ldb	r3,-25(fp)
 8020d40:	180d883a 	mov	r6,r3
 8020d44:	100b883a 	mov	r5,r2
 8020d48:	01020174 	movhi	r4,2053
 8020d4c:	21041904 	addi	r4,r4,4196
 8020d50:	8003b840 	call	8003b84 <printf>
            result = psys->tse_phy_cfg(pmac);
 8020d54:	e0bffa17 	ldw	r2,-24(fp)
 8020d58:	10801217 	ldw	r2,72(r2)
 8020d5c:	e13ff717 	ldw	r4,-36(fp)
 8020d60:	103ee83a 	callr	r2
 8020d64:	e0bfff15 	stw	r2,-4(fp)
 8020d68:	00002206 	br	8020df4 <getPHYSpeed+0x3b4>
        }
        else {
            tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 8020d6c:	e13ff987 	ldb	r4,-26(fp)
 8020d70:	e0bffec3 	ldbu	r2,-5(fp)
 8020d74:	108000a0 	cmpeqi	r2,r2,2
 8020d78:	10000e1e 	bne	r2,zero,8020db4 <getPHYSpeed+0x374>
 8020d7c:	e0bffec3 	ldbu	r2,-5(fp)
 8020d80:	10800060 	cmpeqi	r2,r2,1
 8020d84:	1000081e 	bne	r2,zero,8020da8 <getPHYSpeed+0x368>
 8020d88:	e0bffec3 	ldbu	r2,-5(fp)
 8020d8c:	1000031e 	bne	r2,zero,8020d9c <getPHYSpeed+0x35c>
 8020d90:	00820174 	movhi	r2,2053
 8020d94:	1083e604 	addi	r2,r2,3992
 8020d98:	00000806 	br	8020dbc <getPHYSpeed+0x37c>
 8020d9c:	00820174 	movhi	r2,2053
 8020da0:	1083e704 	addi	r2,r2,3996
 8020da4:	00000506 	br	8020dbc <getPHYSpeed+0x37c>
 8020da8:	00820174 	movhi	r2,2053
 8020dac:	1083e904 	addi	r2,r2,4004
 8020db0:	00000206 	br	8020dbc <getPHYSpeed+0x37c>
 8020db4:	00820174 	movhi	r2,2053
 8020db8:	1083ea04 	addi	r2,r2,4008
 8020dbc:	e0fffe83 	ldbu	r3,-6(fp)
 8020dc0:	18c00058 	cmpnei	r3,r3,1
 8020dc4:	1800031e 	bne	r3,zero,8020dd4 <getPHYSpeed+0x394>
 8020dc8:	00c20174 	movhi	r3,2053
 8020dcc:	18c3ec04 	addi	r3,r3,4016
 8020dd0:	00000206 	br	8020ddc <getPHYSpeed+0x39c>
 8020dd4:	00c20174 	movhi	r3,2053
 8020dd8:	18c3ee04 	addi	r3,r3,4024
 8020ddc:	180f883a 	mov	r7,r3
 8020de0:	100d883a 	mov	r6,r2
 8020de4:	200b883a 	mov	r5,r4
 8020de8:	01020174 	movhi	r4,2053
 8020dec:	21042b04 	addi	r4,r4,4268
 8020df0:	8003b840 	call	8003b84 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 8020df4:	e0bfff17 	ldw	r2,-4(fp)
 8020df8:	0001aa06 	br	80214a4 <getPHYSpeed+0xa64>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
    
        /* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
        np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 8020dfc:	e0bffb17 	ldw	r2,-20(fp)
 8020e00:	10800117 	ldw	r2,4(r2)
 8020e04:	10800217 	ldw	r2,8(r2)
 8020e08:	10800017 	ldw	r2,0(r2)
 8020e0c:	e0bff815 	stw	r2,-32(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 8020e10:	e0bffd17 	ldw	r2,-12(fp)
 8020e14:	1000491e 	bne	r2,zero,8020f3c <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8020e18:	00800044 	movi	r2,1
 8020e1c:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 8020e20:	00800044 	movi	r2,1
 8020e24:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 8020e28:	e0bffe83 	ldbu	r2,-6(fp)
 8020e2c:	10c0004c 	andi	r3,r2,1
 8020e30:	e0bffec3 	ldbu	r2,-5(fp)
 8020e34:	10800098 	cmpnei	r2,r2,2
 8020e38:	1000021e 	bne	r2,zero,8020e44 <getPHYSpeed+0x404>
 8020e3c:	00800084 	movi	r2,2
 8020e40:	00000106 	br	8020e48 <getPHYSpeed+0x408>
 8020e44:	0005883a 	mov	r2,zero
 8020e48:	10c6b03a 	or	r3,r2,r3
 8020e4c:	e0bffec3 	ldbu	r2,-5(fp)
 8020e50:	10800058 	cmpnei	r2,r2,1
 8020e54:	1000021e 	bne	r2,zero,8020e60 <getPHYSpeed+0x420>
 8020e58:	00800104 	movi	r2,4
 8020e5c:	00000106 	br	8020e64 <getPHYSpeed+0x424>
 8020e60:	0005883a 	mov	r2,zero
 8020e64:	10c6b03a 	or	r3,r2,r3
 8020e68:	e0bffec3 	ldbu	r2,-5(fp)
 8020e6c:	1000021e 	bne	r2,zero,8020e78 <getPHYSpeed+0x438>
 8020e70:	00800204 	movi	r2,8
 8020e74:	00000106 	br	8020e7c <getPHYSpeed+0x43c>
 8020e78:	0005883a 	mov	r2,zero
 8020e7c:	10c6b03a 	or	r3,r2,r3
 8020e80:	e0bffec3 	ldbu	r2,-5(fp)
 8020e84:	108000d8 	cmpnei	r2,r2,3
 8020e88:	1000021e 	bne	r2,zero,8020e94 <getPHYSpeed+0x454>
 8020e8c:	00800074 	movhi	r2,1
 8020e90:	00000106 	br	8020e98 <getPHYSpeed+0x458>
 8020e94:	0005883a 	mov	r2,zero
 8020e98:	10c4b03a 	or	r2,r2,r3
 8020e9c:	10800834 	orhi	r2,r2,32
 8020ea0:	e0bfff15 	stw	r2,-4(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 8020ea4:	e13ff987 	ldb	r4,-26(fp)
 8020ea8:	e17ff9c7 	ldb	r5,-25(fp)
 8020eac:	e0bffec3 	ldbu	r2,-5(fp)
 8020eb0:	108000a0 	cmpeqi	r2,r2,2
 8020eb4:	10000e1e 	bne	r2,zero,8020ef0 <getPHYSpeed+0x4b0>
 8020eb8:	e0bffec3 	ldbu	r2,-5(fp)
 8020ebc:	10800060 	cmpeqi	r2,r2,1
 8020ec0:	1000081e 	bne	r2,zero,8020ee4 <getPHYSpeed+0x4a4>
 8020ec4:	e0bffec3 	ldbu	r2,-5(fp)
 8020ec8:	1000031e 	bne	r2,zero,8020ed8 <getPHYSpeed+0x498>
 8020ecc:	00820174 	movhi	r2,2053
 8020ed0:	1083e604 	addi	r2,r2,3992
 8020ed4:	00000806 	br	8020ef8 <getPHYSpeed+0x4b8>
 8020ed8:	00820174 	movhi	r2,2053
 8020edc:	1083e704 	addi	r2,r2,3996
 8020ee0:	00000506 	br	8020ef8 <getPHYSpeed+0x4b8>
 8020ee4:	00820174 	movhi	r2,2053
 8020ee8:	1083e904 	addi	r2,r2,4004
 8020eec:	00000206 	br	8020ef8 <getPHYSpeed+0x4b8>
 8020ef0:	00820174 	movhi	r2,2053
 8020ef4:	1083ea04 	addi	r2,r2,4008
 8020ef8:	e0fffe83 	ldbu	r3,-6(fp)
 8020efc:	18c00058 	cmpnei	r3,r3,1
 8020f00:	1800031e 	bne	r3,zero,8020f10 <getPHYSpeed+0x4d0>
 8020f04:	00c20174 	movhi	r3,2053
 8020f08:	18c3ec04 	addi	r3,r3,4016
 8020f0c:	00000206 	br	8020f18 <getPHYSpeed+0x4d8>
 8020f10:	00c20174 	movhi	r3,2053
 8020f14:	18c3ee04 	addi	r3,r3,4024
 8020f18:	d8c00015 	stw	r3,0(sp)
 8020f1c:	100f883a 	mov	r7,r2
 8020f20:	280d883a 	mov	r6,r5
 8020f24:	200b883a 	mov	r5,r4
 8020f28:	01020174 	movhi	r4,2053
 8020f2c:	21043d04 	addi	r4,r4,4340
 8020f30:	8003b840 	call	8003b84 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 8020f34:	e0bfff17 	ldw	r2,-4(fp)
 8020f38:	00015a06 	br	80214a4 <getPHYSpeed+0xa64>
        }

        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 8020f3c:	e0bffc17 	ldw	r2,-16(fp)
 8020f40:	10800003 	ldbu	r2,0(r2)
 8020f44:	10803fcc 	andi	r2,r2,255
 8020f48:	10800058 	cmpnei	r2,r2,1
 8020f4c:	1000071e 	bne	r2,zero,8020f6c <getPHYSpeed+0x52c>
            alt_tse_phy_set_adv_1000(pphy, 0);
 8020f50:	000b883a 	mov	r5,zero
 8020f54:	e13ffd17 	ldw	r4,-12(fp)
 8020f58:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 8020f5c:	01427104 	movi	r5,2500
 8020f60:	e13ffd17 	ldw	r4,-12(fp)
 8020f64:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
 8020f68:	00000e06 	br	8020fa4 <getPHYSpeed+0x564>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 8020f6c:	e0bffc17 	ldw	r2,-16(fp)
 8020f70:	10800003 	ldbu	r2,0(r2)
 8020f74:	10803fcc 	andi	r2,r2,255
 8020f78:	10800098 	cmpnei	r2,r2,2
 8020f7c:	1000091e 	bne	r2,zero,8020fa4 <getPHYSpeed+0x564>
            alt_tse_phy_set_adv_100(pphy, 0);
 8020f80:	000b883a 	mov	r5,zero
 8020f84:	e13ffd17 	ldw	r4,-12(fp)
 8020f88:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 8020f8c:	000b883a 	mov	r5,zero
 8020f90:	e13ffd17 	ldw	r4,-12(fp)
 8020f94:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 8020f98:	01427104 	movi	r5,2500
 8020f9c:	e13ffd17 	ldw	r4,-12(fp)
 8020fa0:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
        }
        
        /* check link connection for this PHY */
        if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 8020fa4:	01427104 	movi	r5,2500
 8020fa8:	e13ffd17 	ldw	r4,-12(fp)
 8020fac:	8022cc80 	call	8022cc8 <alt_tse_phy_check_link>
 8020fb0:	10bfffd8 	cmpnei	r2,r2,-1
 8020fb4:	1000491e 	bne	r2,zero,80210dc <getPHYSpeed+0x69c>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8020fb8:	00800044 	movi	r2,1
 8020fbc:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 8020fc0:	00800044 	movi	r2,1
 8020fc4:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 8020fc8:	e0bffe83 	ldbu	r2,-6(fp)
 8020fcc:	10c0004c 	andi	r3,r2,1
 8020fd0:	e0bffec3 	ldbu	r2,-5(fp)
 8020fd4:	10800098 	cmpnei	r2,r2,2
 8020fd8:	1000021e 	bne	r2,zero,8020fe4 <getPHYSpeed+0x5a4>
 8020fdc:	00800084 	movi	r2,2
 8020fe0:	00000106 	br	8020fe8 <getPHYSpeed+0x5a8>
 8020fe4:	0005883a 	mov	r2,zero
 8020fe8:	10c6b03a 	or	r3,r2,r3
 8020fec:	e0bffec3 	ldbu	r2,-5(fp)
 8020ff0:	10800058 	cmpnei	r2,r2,1
 8020ff4:	1000021e 	bne	r2,zero,8021000 <getPHYSpeed+0x5c0>
 8020ff8:	00800104 	movi	r2,4
 8020ffc:	00000106 	br	8021004 <getPHYSpeed+0x5c4>
 8021000:	0005883a 	mov	r2,zero
 8021004:	10c6b03a 	or	r3,r2,r3
 8021008:	e0bffec3 	ldbu	r2,-5(fp)
 802100c:	1000021e 	bne	r2,zero,8021018 <getPHYSpeed+0x5d8>
 8021010:	00800204 	movi	r2,8
 8021014:	00000106 	br	802101c <getPHYSpeed+0x5dc>
 8021018:	0005883a 	mov	r2,zero
 802101c:	10c6b03a 	or	r3,r2,r3
 8021020:	e0bffec3 	ldbu	r2,-5(fp)
 8021024:	108000d8 	cmpnei	r2,r2,3
 8021028:	1000021e 	bne	r2,zero,8021034 <getPHYSpeed+0x5f4>
 802102c:	00800074 	movhi	r2,1
 8021030:	00000106 	br	8021038 <getPHYSpeed+0x5f8>
 8021034:	0005883a 	mov	r2,zero
 8021038:	10c4b03a 	or	r2,r2,r3
 802103c:	10800234 	orhi	r2,r2,8
 8021040:	e0bfff15 	stw	r2,-4(fp)
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 8021044:	e13ff987 	ldb	r4,-26(fp)
 8021048:	e17ff9c7 	ldb	r5,-25(fp)
 802104c:	e0bffec3 	ldbu	r2,-5(fp)
 8021050:	108000a0 	cmpeqi	r2,r2,2
 8021054:	10000e1e 	bne	r2,zero,8021090 <getPHYSpeed+0x650>
 8021058:	e0bffec3 	ldbu	r2,-5(fp)
 802105c:	10800060 	cmpeqi	r2,r2,1
 8021060:	1000081e 	bne	r2,zero,8021084 <getPHYSpeed+0x644>
 8021064:	e0bffec3 	ldbu	r2,-5(fp)
 8021068:	1000031e 	bne	r2,zero,8021078 <getPHYSpeed+0x638>
 802106c:	00820174 	movhi	r2,2053
 8021070:	1083e604 	addi	r2,r2,3992
 8021074:	00000806 	br	8021098 <getPHYSpeed+0x658>
 8021078:	00820174 	movhi	r2,2053
 802107c:	1083e704 	addi	r2,r2,3996
 8021080:	00000506 	br	8021098 <getPHYSpeed+0x658>
 8021084:	00820174 	movhi	r2,2053
 8021088:	1083e904 	addi	r2,r2,4004
 802108c:	00000206 	br	8021098 <getPHYSpeed+0x658>
 8021090:	00820174 	movhi	r2,2053
 8021094:	1083ea04 	addi	r2,r2,4008
 8021098:	e0fffe83 	ldbu	r3,-6(fp)
 802109c:	18c00058 	cmpnei	r3,r3,1
 80210a0:	1800031e 	bne	r3,zero,80210b0 <getPHYSpeed+0x670>
 80210a4:	00c20174 	movhi	r3,2053
 80210a8:	18c3ec04 	addi	r3,r3,4016
 80210ac:	00000206 	br	80210b8 <getPHYSpeed+0x678>
 80210b0:	00c20174 	movhi	r3,2053
 80210b4:	18c3ee04 	addi	r3,r3,4024
 80210b8:	d8c00015 	stw	r3,0(sp)
 80210bc:	100f883a 	mov	r7,r2
 80210c0:	280d883a 	mov	r6,r5
 80210c4:	200b883a 	mov	r5,r4
 80210c8:	01020174 	movhi	r4,2053
 80210cc:	21044e04 	addi	r4,r4,4408
 80210d0:	8003b840 	call	8003b84 <printf>
                                                                             speed == TSE_PHY_SPEED_100 ? "100" :
                                                                             speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                             duplex == 1 ? "Full" : "Half");
            return result;
 80210d4:	e0bfff17 	ldw	r2,-4(fp)
 80210d8:	0000f206 	br	80214a4 <getPHYSpeed+0xa64>
        }

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 80210dc:	e0bff817 	ldw	r2,-32(fp)
 80210e0:	10801004 	addi	r2,r2,64
 80210e4:	e0fffd17 	ldw	r3,-12(fp)
 80210e8:	18c00003 	ldbu	r3,0(r3)
 80210ec:	18c03fcc 	andi	r3,r3,255
 80210f0:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
        #else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 80210f4:	d8000015 	stw	zero,0(sp)
 80210f8:	01c00044 	movi	r7,1
 80210fc:	01800384 	movi	r6,14
 8021100:	000b883a 	mov	r5,zero
 8021104:	e13ffd17 	ldw	r4,-12(fp)
 8021108:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 802110c:	e0bffd17 	ldw	r2,-12(fp)
 8021110:	10800517 	ldw	r2,20(r2)
 8021114:	10002b1e 	bne	r2,zero,80211c4 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 8021118:	e0bff987 	ldb	r2,-26(fp)
 802111c:	e0fff9c7 	ldb	r3,-25(fp)
 8021120:	180d883a 	mov	r6,r3
 8021124:	100b883a 	mov	r5,r2
 8021128:	01020174 	movhi	r4,2053
 802112c:	21046204 	addi	r4,r4,4488
 8021130:	8003b840 	call	8003b84 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8021134:	00800044 	movi	r2,1
 8021138:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 802113c:	00800044 	movi	r2,1
 8021140:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 8021144:	e0bffe83 	ldbu	r2,-6(fp)
 8021148:	10c0004c 	andi	r3,r2,1
 802114c:	e0bffec3 	ldbu	r2,-5(fp)
 8021150:	10800098 	cmpnei	r2,r2,2
 8021154:	1000021e 	bne	r2,zero,8021160 <getPHYSpeed+0x720>
 8021158:	00800084 	movi	r2,2
 802115c:	00000106 	br	8021164 <getPHYSpeed+0x724>
 8021160:	0005883a 	mov	r2,zero
 8021164:	10c6b03a 	or	r3,r2,r3
 8021168:	e0bffec3 	ldbu	r2,-5(fp)
 802116c:	10800058 	cmpnei	r2,r2,1
 8021170:	1000021e 	bne	r2,zero,802117c <getPHYSpeed+0x73c>
 8021174:	00800104 	movi	r2,4
 8021178:	00000106 	br	8021180 <getPHYSpeed+0x740>
 802117c:	0005883a 	mov	r2,zero
 8021180:	10c6b03a 	or	r3,r2,r3
 8021184:	e0bffec3 	ldbu	r2,-5(fp)
 8021188:	1000021e 	bne	r2,zero,8021194 <getPHYSpeed+0x754>
 802118c:	00800204 	movi	r2,8
 8021190:	00000106 	br	8021198 <getPHYSpeed+0x758>
 8021194:	0005883a 	mov	r2,zero
 8021198:	10c6b03a 	or	r3,r2,r3
 802119c:	e0bffec3 	ldbu	r2,-5(fp)
 80211a0:	108000d8 	cmpnei	r2,r2,3
 80211a4:	1000021e 	bne	r2,zero,80211b0 <getPHYSpeed+0x770>
 80211a8:	00800074 	movhi	r2,1
 80211ac:	00000106 	br	80211b4 <getPHYSpeed+0x774>
 80211b0:	0005883a 	mov	r2,zero
 80211b4:	10c4b03a 	or	r2,r2,r3
 80211b8:	10800134 	orhi	r2,r2,4
 80211bc:	e0bfff15 	stw	r2,-4(fp)
 80211c0:	00009306 	br	8021410 <getPHYSpeed+0x9d0>
        }
        // retrieve duplex information from PHY
        else
        {
            if(pphy->pphy_profile->link_status_read)
 80211c4:	e0bffd17 	ldw	r2,-12(fp)
 80211c8:	10800517 	ldw	r2,20(r2)
 80211cc:	10801817 	ldw	r2,96(r2)
 80211d0:	10002526 	beq	r2,zero,8021268 <getPHYSpeed+0x828>
            {
                result = pphy->pphy_profile->link_status_read(pmac_group_base);
 80211d4:	e0bffd17 	ldw	r2,-12(fp)
 80211d8:	10800517 	ldw	r2,20(r2)
 80211dc:	10801817 	ldw	r2,96(r2)
 80211e0:	e13ff817 	ldw	r4,-32(fp)
 80211e4:	103ee83a 	callr	r2
 80211e8:	e0bfff15 	stw	r2,-4(fp)
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 80211ec:	e0bfff17 	ldw	r2,-4(fp)
 80211f0:	1080008c 	andi	r2,r2,2
 80211f4:	10000c1e 	bne	r2,zero,8021228 <getPHYSpeed+0x7e8>
                        (result & 0x04) ? TSE_PHY_SPEED_100  :
 80211f8:	e0bfff17 	ldw	r2,-4(fp)
 80211fc:	1080010c 	andi	r2,r2,4
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 8021200:	1000071e 	bne	r2,zero,8021220 <getPHYSpeed+0x7e0>
                        (result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
 8021204:	e0bfff17 	ldw	r2,-4(fp)
 8021208:	1080020c 	andi	r2,r2,8
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 802120c:	10000226 	beq	r2,zero,8021218 <getPHYSpeed+0x7d8>
 8021210:	0005883a 	mov	r2,zero
 8021214:	00000506 	br	802122c <getPHYSpeed+0x7ec>
 8021218:	008000c4 	movi	r2,3
 802121c:	00000306 	br	802122c <getPHYSpeed+0x7ec>
 8021220:	00800044 	movi	r2,1
 8021224:	00000106 	br	802122c <getPHYSpeed+0x7ec>
 8021228:	00800084 	movi	r2,2
 802122c:	e0bffec5 	stb	r2,-5(fp)
                duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 8021230:	e0bfff17 	ldw	r2,-4(fp)
 8021234:	1080004c 	andi	r2,r2,1
 8021238:	e0bffe85 	stb	r2,-6(fp)
                
                if(result & ALT_TSE_E_INVALID_SPEED)
 802123c:	e0bfff17 	ldw	r2,-4(fp)
 8021240:	1080006c 	andhi	r2,r2,1
 8021244:	10007226 	beq	r2,zero,8021410 <getPHYSpeed+0x9d0>
                {
                    tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 8021248:	e0bff987 	ldb	r2,-26(fp)
 802124c:	e0fff9c7 	ldb	r3,-25(fp)
 8021250:	180d883a 	mov	r6,r3
 8021254:	100b883a 	mov	r5,r2
 8021258:	01020174 	movhi	r4,2053
 802125c:	21047004 	addi	r4,r4,4544
 8021260:	8003b840 	call	8003b84 <printf>
 8021264:	00006a06 	br	8021410 <getPHYSpeed+0x9d0>
                }
            }
            else if(pphy->pphy_profile->status_reg_location == 0)
 8021268:	e0bffd17 	ldw	r2,-12(fp)
 802126c:	10800517 	ldw	r2,20(r2)
 8021270:	10801583 	ldbu	r2,86(r2)
 8021274:	10803fcc 	andi	r2,r2,255
 8021278:	10002b1e 	bne	r2,zero,8021328 <getPHYSpeed+0x8e8>
            {
                tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 802127c:	e0bff987 	ldb	r2,-26(fp)
 8021280:	e0fff9c7 	ldb	r3,-25(fp)
 8021284:	180d883a 	mov	r6,r3
 8021288:	100b883a 	mov	r5,r2
 802128c:	01020174 	movhi	r4,2053
 8021290:	21047d04 	addi	r4,r4,4596
 8021294:	8003b840 	call	8003b84 <printf>
                speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 8021298:	00800044 	movi	r2,1
 802129c:	e0bffec5 	stb	r2,-5(fp)
                duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 80212a0:	00800044 	movi	r2,1
 80212a4:	e0bffe85 	stb	r2,-6(fp)
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 80212a8:	e0bffe83 	ldbu	r2,-6(fp)
 80212ac:	10c0004c 	andi	r3,r2,1
 80212b0:	e0bffec3 	ldbu	r2,-5(fp)
 80212b4:	10800098 	cmpnei	r2,r2,2
 80212b8:	1000021e 	bne	r2,zero,80212c4 <getPHYSpeed+0x884>
 80212bc:	00800084 	movi	r2,2
 80212c0:	00000106 	br	80212c8 <getPHYSpeed+0x888>
 80212c4:	0005883a 	mov	r2,zero
 80212c8:	10c6b03a 	or	r3,r2,r3
 80212cc:	e0bffec3 	ldbu	r2,-5(fp)
 80212d0:	10800058 	cmpnei	r2,r2,1
 80212d4:	1000021e 	bne	r2,zero,80212e0 <getPHYSpeed+0x8a0>
 80212d8:	00800104 	movi	r2,4
 80212dc:	00000106 	br	80212e4 <getPHYSpeed+0x8a4>
 80212e0:	0005883a 	mov	r2,zero
 80212e4:	10c6b03a 	or	r3,r2,r3
 80212e8:	e0bffec3 	ldbu	r2,-5(fp)
 80212ec:	1000021e 	bne	r2,zero,80212f8 <getPHYSpeed+0x8b8>
 80212f0:	00800204 	movi	r2,8
 80212f4:	00000106 	br	80212fc <getPHYSpeed+0x8bc>
 80212f8:	0005883a 	mov	r2,zero
 80212fc:	10c6b03a 	or	r3,r2,r3
 8021300:	e0bffec3 	ldbu	r2,-5(fp)
 8021304:	108000d8 	cmpnei	r2,r2,3
 8021308:	1000021e 	bne	r2,zero,8021314 <getPHYSpeed+0x8d4>
 802130c:	00800074 	movhi	r2,1
 8021310:	00000106 	br	8021318 <getPHYSpeed+0x8d8>
 8021314:	0005883a 	mov	r2,zero
 8021318:	10c4b03a 	or	r2,r2,r3
 802131c:	108000b4 	orhi	r2,r2,2
 8021320:	e0bfff15 	stw	r2,-4(fp)
 8021324:	00003a06 	br	8021410 <getPHYSpeed+0x9d0>
            }
            else
            {
                /* extract connection speed and duplex information */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 8021328:	e0bffd17 	ldw	r2,-12(fp)
 802132c:	10800517 	ldw	r2,20(r2)
 8021330:	10801583 	ldbu	r2,86(r2)
 8021334:	10c03fcc 	andi	r3,r2,255
 8021338:	e0bffd17 	ldw	r2,-12(fp)
 802133c:	10800517 	ldw	r2,20(r2)
 8021340:	108015c3 	ldbu	r2,87(r2)
 8021344:	10803fcc 	andi	r2,r2,255
 8021348:	01c00084 	movi	r7,2
 802134c:	100d883a 	mov	r6,r2
 8021350:	180b883a 	mov	r5,r3
 8021354:	e13ffd17 	ldw	r4,-12(fp)
 8021358:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 802135c:	e0bffec5 	stb	r2,-5(fp)
                duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 8021360:	e0bffd17 	ldw	r2,-12(fp)
 8021364:	10800517 	ldw	r2,20(r2)
 8021368:	10801583 	ldbu	r2,86(r2)
 802136c:	10c03fcc 	andi	r3,r2,255
 8021370:	e0bffd17 	ldw	r2,-12(fp)
 8021374:	10800517 	ldw	r2,20(r2)
 8021378:	10801603 	ldbu	r2,88(r2)
 802137c:	10803fcc 	andi	r2,r2,255
 8021380:	01c00044 	movi	r7,1
 8021384:	100d883a 	mov	r6,r2
 8021388:	180b883a 	mov	r5,r3
 802138c:	e13ffd17 	ldw	r4,-12(fp)
 8021390:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8021394:	e0bffe85 	stb	r2,-6(fp)
                
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 8021398:	e0bffe83 	ldbu	r2,-6(fp)
 802139c:	10c0004c 	andi	r3,r2,1
 80213a0:	e0bffec3 	ldbu	r2,-5(fp)
 80213a4:	10800098 	cmpnei	r2,r2,2
 80213a8:	1000021e 	bne	r2,zero,80213b4 <getPHYSpeed+0x974>
 80213ac:	00800084 	movi	r2,2
 80213b0:	00000106 	br	80213b8 <getPHYSpeed+0x978>
 80213b4:	0005883a 	mov	r2,zero
 80213b8:	10c6b03a 	or	r3,r2,r3
 80213bc:	e0bffec3 	ldbu	r2,-5(fp)
 80213c0:	10800058 	cmpnei	r2,r2,1
 80213c4:	1000021e 	bne	r2,zero,80213d0 <getPHYSpeed+0x990>
 80213c8:	00800104 	movi	r2,4
 80213cc:	00000106 	br	80213d4 <getPHYSpeed+0x994>
 80213d0:	0005883a 	mov	r2,zero
 80213d4:	10c6b03a 	or	r3,r2,r3
 80213d8:	e0bffec3 	ldbu	r2,-5(fp)
 80213dc:	1000021e 	bne	r2,zero,80213e8 <getPHYSpeed+0x9a8>
 80213e0:	00800204 	movi	r2,8
 80213e4:	00000106 	br	80213ec <getPHYSpeed+0x9ac>
 80213e8:	0005883a 	mov	r2,zero
 80213ec:	10c6b03a 	or	r3,r2,r3
 80213f0:	e0bffec3 	ldbu	r2,-5(fp)
 80213f4:	108000d8 	cmpnei	r2,r2,3
 80213f8:	1000021e 	bne	r2,zero,8021404 <getPHYSpeed+0x9c4>
 80213fc:	00800074 	movhi	r2,1
 8021400:	00000106 	br	8021408 <getPHYSpeed+0x9c8>
 8021404:	0005883a 	mov	r2,zero
 8021408:	10c4b03a 	or	r2,r2,r3
 802140c:	e0bfff15 	stw	r2,-4(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 8021410:	e13ff987 	ldb	r4,-26(fp)
 8021414:	e17ff9c7 	ldb	r5,-25(fp)
 8021418:	e0bffec3 	ldbu	r2,-5(fp)
 802141c:	108000a0 	cmpeqi	r2,r2,2
 8021420:	10000e1e 	bne	r2,zero,802145c <getPHYSpeed+0xa1c>
 8021424:	e0bffec3 	ldbu	r2,-5(fp)
 8021428:	10800060 	cmpeqi	r2,r2,1
 802142c:	1000081e 	bne	r2,zero,8021450 <getPHYSpeed+0xa10>
 8021430:	e0bffec3 	ldbu	r2,-5(fp)
 8021434:	1000031e 	bne	r2,zero,8021444 <getPHYSpeed+0xa04>
 8021438:	00820174 	movhi	r2,2053
 802143c:	1083e604 	addi	r2,r2,3992
 8021440:	00000806 	br	8021464 <getPHYSpeed+0xa24>
 8021444:	00820174 	movhi	r2,2053
 8021448:	1083e704 	addi	r2,r2,3996
 802144c:	00000506 	br	8021464 <getPHYSpeed+0xa24>
 8021450:	00820174 	movhi	r2,2053
 8021454:	1083e904 	addi	r2,r2,4004
 8021458:	00000206 	br	8021464 <getPHYSpeed+0xa24>
 802145c:	00820174 	movhi	r2,2053
 8021460:	1083ea04 	addi	r2,r2,4008
 8021464:	e0fffe83 	ldbu	r3,-6(fp)
 8021468:	18c00058 	cmpnei	r3,r3,1
 802146c:	1800031e 	bne	r3,zero,802147c <getPHYSpeed+0xa3c>
 8021470:	00c20174 	movhi	r3,2053
 8021474:	18c3ec04 	addi	r3,r3,4016
 8021478:	00000206 	br	8021484 <getPHYSpeed+0xa44>
 802147c:	00c20174 	movhi	r3,2053
 8021480:	18c3ee04 	addi	r3,r3,4024
 8021484:	d8c00015 	stw	r3,0(sp)
 8021488:	100f883a 	mov	r7,r2
 802148c:	280d883a 	mov	r6,r5
 8021490:	200b883a 	mov	r5,r4
 8021494:	01020174 	movhi	r4,2053
 8021498:	21049404 	addi	r4,r4,4688
 802149c:	8003b840 	call	8003b84 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 80214a0:	e0bfff17 	ldw	r2,-4(fp)
}
 80214a4:	e037883a 	mov	sp,fp
 80214a8:	dfc00117 	ldw	ra,4(sp)
 80214ac:	df000017 	ldw	fp,0(sp)
 80214b0:	dec00204 	addi	sp,sp,8
 80214b4:	f800283a 	ret

080214b8 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 80214b8:	defffd04 	addi	sp,sp,-12
 80214bc:	df000215 	stw	fp,8(sp)
 80214c0:	df000204 	addi	fp,sp,8
 80214c4:	e13ffe15 	stw	r4,-8(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 80214c8:	e0bffe17 	ldw	r2,-8(fp)
 80214cc:	10800617 	ldw	r2,24(r2)
 80214d0:	10800317 	ldw	r2,12(r2)
 80214d4:	10800117 	ldw	r2,4(r2)
 80214d8:	10800217 	ldw	r2,8(r2)
 80214dc:	10800017 	ldw	r2,0(r2)
 80214e0:	e0bfff15 	stw	r2,-4(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 80214e4:	e0bfff17 	ldw	r2,-4(fp)
 80214e8:	10801004 	addi	r2,r2,64
 80214ec:	10800037 	ldwio	r2,0(r2)
}
 80214f0:	e037883a 	mov	sp,fp
 80214f4:	df000017 	ldw	fp,0(sp)
 80214f8:	dec00104 	addi	sp,sp,4
 80214fc:	f800283a 	ret

08021500 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 8021500:	defffc04 	addi	sp,sp,-16
 8021504:	df000315 	stw	fp,12(sp)
 8021508:	df000304 	addi	fp,sp,12
 802150c:	e13ffe15 	stw	r4,-8(fp)
 8021510:	2805883a 	mov	r2,r5
 8021514:	e0bffd05 	stb	r2,-12(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 8021518:	e0bffe17 	ldw	r2,-8(fp)
 802151c:	10800617 	ldw	r2,24(r2)
 8021520:	10800317 	ldw	r2,12(r2)
 8021524:	10800117 	ldw	r2,4(r2)
 8021528:	10800217 	ldw	r2,8(r2)
 802152c:	10800017 	ldw	r2,0(r2)
 8021530:	e0bfff15 	stw	r2,-4(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 8021534:	e0bfff17 	ldw	r2,-4(fp)
 8021538:	10801004 	addi	r2,r2,64
 802153c:	e0fffd03 	ldbu	r3,-12(fp)
 8021540:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 8021544:	0005883a 	mov	r2,zero
}
 8021548:	e037883a 	mov	sp,fp
 802154c:	df000017 	ldw	fp,0(sp)
 8021550:	dec00104 	addi	sp,sp,4
 8021554:	f800283a 	ret

08021558 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 8021558:	defff604 	addi	sp,sp,-40
 802155c:	df000915 	stw	fp,36(sp)
 8021560:	df000904 	addi	fp,sp,36
 8021564:	e13ffb15 	stw	r4,-20(fp)
 8021568:	2807883a 	mov	r3,r5
 802156c:	300b883a 	mov	r5,r6
 8021570:	3809883a 	mov	r4,r7
 8021574:	e0800117 	ldw	r2,4(fp)
 8021578:	e0fffa05 	stb	r3,-24(fp)
 802157c:	2807883a 	mov	r3,r5
 8021580:	e0fff905 	stb	r3,-28(fp)
 8021584:	2007883a 	mov	r3,r4
 8021588:	e0fff805 	stb	r3,-32(fp)
 802158c:	e0bff70d 	sth	r2,-36(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 8021590:	e0bffb17 	ldw	r2,-20(fp)
 8021594:	10800617 	ldw	r2,24(r2)
 8021598:	10800317 	ldw	r2,12(r2)
 802159c:	10800117 	ldw	r2,4(r2)
 80215a0:	10800217 	ldw	r2,8(r2)
 80215a4:	10800017 	ldw	r2,0(r2)
 80215a8:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
 80215ac:	e03fff8d 	sth	zero,-2(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 80215b0:	e03ffe15 	stw	zero,-8(fp)
 80215b4:	00000906 	br	80215dc <alt_tse_phy_wr_mdio_reg+0x84>
    {
        bit_mask <<= 1;
 80215b8:	e0bfff8b 	ldhu	r2,-2(fp)
 80215bc:	1085883a 	add	r2,r2,r2
 80215c0:	e0bfff8d 	sth	r2,-2(fp)
        bit_mask |= 0x01;        
 80215c4:	e0bfff8b 	ldhu	r2,-2(fp)
 80215c8:	10800054 	ori	r2,r2,1
 80215cc:	e0bfff8d 	sth	r2,-2(fp)
    for(i = 0; i < bit_length; i++)
 80215d0:	e0bffe17 	ldw	r2,-8(fp)
 80215d4:	10800044 	addi	r2,r2,1
 80215d8:	e0bffe15 	stw	r2,-8(fp)
 80215dc:	e0bff803 	ldbu	r2,-32(fp)
 80215e0:	e0fffe17 	ldw	r3,-8(fp)
 80215e4:	18bff416 	blt	r3,r2,80215b8 <alt_tse_phy_wr_mdio_reg+0x60>
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 80215e8:	e0ffff8b 	ldhu	r3,-2(fp)
 80215ec:	e0bff903 	ldbu	r2,-28(fp)
 80215f0:	1884983a 	sll	r2,r3,r2
 80215f4:	e0bfff8d 	sth	r2,-2(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 80215f8:	e0bffd17 	ldw	r2,-12(fp)
 80215fc:	1080a004 	addi	r2,r2,640
 8021600:	e0fffa03 	ldbu	r3,-24(fp)
 8021604:	180690ba 	slli	r3,r3,2
 8021608:	10c5883a 	add	r2,r2,r3
 802160c:	10800037 	ldwio	r2,0(r2)
 8021610:	e0bffc8d 	sth	r2,-14(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 8021614:	e0bfff8b 	ldhu	r2,-2(fp)
 8021618:	0084303a 	nor	r2,zero,r2
 802161c:	1007883a 	mov	r3,r2
 8021620:	e0bffc8b 	ldhu	r2,-14(fp)
 8021624:	1884703a 	and	r2,r3,r2
 8021628:	e0bffc8d 	sth	r2,-14(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 802162c:	e0fff70b 	ldhu	r3,-36(fp)
 8021630:	e0bff903 	ldbu	r2,-28(fp)
 8021634:	1884983a 	sll	r2,r3,r2
 8021638:	1007883a 	mov	r3,r2
 802163c:	e0bfff8b 	ldhu	r2,-2(fp)
 8021640:	1884703a 	and	r2,r3,r2
 8021644:	1007883a 	mov	r3,r2
 8021648:	e0bffc8b 	ldhu	r2,-14(fp)
 802164c:	1884b03a 	or	r2,r3,r2
 8021650:	e0bffc8d 	sth	r2,-14(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 8021654:	e0bffd17 	ldw	r2,-12(fp)
 8021658:	1080a004 	addi	r2,r2,640
 802165c:	e0fffa03 	ldbu	r3,-24(fp)
 8021660:	180690ba 	slli	r3,r3,2
 8021664:	10c5883a 	add	r2,r2,r3
 8021668:	e0fffc8b 	ldhu	r3,-14(fp)
 802166c:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 8021670:	0005883a 	mov	r2,zero
    
}
 8021674:	e037883a 	mov	sp,fp
 8021678:	df000017 	ldw	fp,0(sp)
 802167c:	dec00104 	addi	sp,sp,4
 8021680:	f800283a 	ret

08021684 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 8021684:	defff704 	addi	sp,sp,-36
 8021688:	df000815 	stw	fp,32(sp)
 802168c:	df000804 	addi	fp,sp,32
 8021690:	e13ffb15 	stw	r4,-20(fp)
 8021694:	2805883a 	mov	r2,r5
 8021698:	3009883a 	mov	r4,r6
 802169c:	3807883a 	mov	r3,r7
 80216a0:	e0bffa05 	stb	r2,-24(fp)
 80216a4:	2005883a 	mov	r2,r4
 80216a8:	e0bff905 	stb	r2,-28(fp)
 80216ac:	1805883a 	mov	r2,r3
 80216b0:	e0bff805 	stb	r2,-32(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 80216b4:	e0bffb17 	ldw	r2,-20(fp)
 80216b8:	10800617 	ldw	r2,24(r2)
 80216bc:	10800317 	ldw	r2,12(r2)
 80216c0:	10800117 	ldw	r2,4(r2)
 80216c4:	10800217 	ldw	r2,8(r2)
 80216c8:	10800017 	ldw	r2,0(r2)
 80216cc:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
 80216d0:	e03fff15 	stw	zero,-4(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 80216d4:	e03ffe15 	stw	zero,-8(fp)
 80216d8:	00000906 	br	8021700 <alt_tse_phy_rd_mdio_reg+0x7c>
    {
        bit_mask <<= 1;
 80216dc:	e0bfff17 	ldw	r2,-4(fp)
 80216e0:	1085883a 	add	r2,r2,r2
 80216e4:	e0bfff15 	stw	r2,-4(fp)
        bit_mask |= 0x01;        
 80216e8:	e0bfff17 	ldw	r2,-4(fp)
 80216ec:	10800054 	ori	r2,r2,1
 80216f0:	e0bfff15 	stw	r2,-4(fp)
    for(i = 0; i < bit_length; i++)
 80216f4:	e0bffe17 	ldw	r2,-8(fp)
 80216f8:	10800044 	addi	r2,r2,1
 80216fc:	e0bffe15 	stw	r2,-8(fp)
 8021700:	e0bff803 	ldbu	r2,-32(fp)
 8021704:	e0fffe17 	ldw	r3,-8(fp)
 8021708:	18bff416 	blt	r3,r2,80216dc <alt_tse_phy_rd_mdio_reg+0x58>
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 802170c:	e0bffd17 	ldw	r2,-12(fp)
 8021710:	1080a004 	addi	r2,r2,640
 8021714:	e0fffa03 	ldbu	r3,-24(fp)
 8021718:	180690ba 	slli	r3,r3,2
 802171c:	10c5883a 	add	r2,r2,r3
 8021720:	10800037 	ldwio	r2,0(r2)
 8021724:	e0bffc8d 	sth	r2,-14(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 8021728:	e0fffc8b 	ldhu	r3,-14(fp)
 802172c:	e0bff903 	ldbu	r2,-28(fp)
 8021730:	1885d83a 	sra	r2,r3,r2
 8021734:	e0bffc8d 	sth	r2,-14(fp)
    
    return (temp_data & bit_mask);
 8021738:	e0fffc8b 	ldhu	r3,-14(fp)
 802173c:	e0bfff17 	ldw	r2,-4(fp)
 8021740:	1884703a 	and	r2,r3,r2
}
 8021744:	e037883a 	mov	sp,fp
 8021748:	df000017 	ldw	fp,0(sp)
 802174c:	dec00104 	addi	sp,sp,4
 8021750:	f800283a 	ret

08021754 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 8021754:	deff8104 	addi	sp,sp,-508
 8021758:	dfc07e15 	stw	ra,504(sp)
 802175c:	df007d15 	stw	fp,500(sp)
 8021760:	df007d04 	addi	fp,sp,500
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
 8021764:	e0bfe704 	addi	r2,fp,-100
 8021768:	00c01904 	movi	r3,100
 802176c:	180d883a 	mov	r6,r3
 8021770:	000b883a 	mov	r5,zero
 8021774:	1009883a 	mov	r4,r2
 8021778:	80038cc0 	call	80038cc <memset>
 802177c:	009d9cb4 	movhi	r2,30322
 8021780:	10985344 	addi	r2,r2,24909
 8021784:	e0bfe715 	stw	r2,-100(fp)
 8021788:	00881b34 	movhi	r2,8300
 802178c:	109b1944 	addi	r2,r2,27749
 8021790:	e0bfe815 	stw	r2,-96(fp)
 8021794:	008c5174 	movhi	r2,12613
 8021798:	108e0e04 	addi	r2,r2,14392
 802179c:	e0bfe915 	stw	r2,-92(fp)
 80217a0:	00800c74 	movhi	r2,49
 80217a4:	108c4c44 	addi	r2,r2,12593
 80217a8:	e0bfea15 	stw	r2,-88(fp)
 80217ac:	e0bfeb04 	addi	r2,fp,-84
 80217b0:	00c01004 	movi	r3,64
 80217b4:	180d883a 	mov	r6,r3
 80217b8:	000b883a 	mov	r5,zero
 80217bc:	1009883a 	mov	r4,r2
 80217c0:	80038cc0 	call	80038cc <memset>
 80217c4:	009410c4 	movi	r2,20547
 80217c8:	e0bffb15 	stw	r2,-20(fp)
 80217cc:	00800304 	movi	r2,12
 80217d0:	e0bffc05 	stb	r2,-16(fp)
 80217d4:	00800084 	movi	r2,2
 80217d8:	e0bffc45 	stb	r2,-15(fp)
 80217dc:	00800444 	movi	r2,17
 80217e0:	e0bffc85 	stb	r2,-14(fp)
 80217e4:	00800384 	movi	r2,14
 80217e8:	e0bffcc5 	stb	r2,-13(fp)
 80217ec:	00800344 	movi	r2,13
 80217f0:	e0bffd05 	stb	r2,-12(fp)
 80217f4:	00800284 	movi	r2,10
 80217f8:	e0bffd45 	stb	r2,-11(fp)
 80217fc:	008200b4 	movhi	r2,2050
 8021800:	10905a04 	addi	r2,r2,16744
 8021804:	e0bffe15 	stw	r2,-8(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
 8021808:	e0bfce04 	addi	r2,fp,-200
 802180c:	00c01904 	movi	r3,100
 8021810:	180d883a 	mov	r6,r3
 8021814:	000b883a 	mov	r5,zero
 8021818:	1009883a 	mov	r4,r2
 802181c:	80038cc0 	call	80038cc <memset>
 8021820:	009d9cb4 	movhi	r2,30322
 8021824:	10985344 	addi	r2,r2,24909
 8021828:	e0bfce15 	stw	r2,-200(fp)
 802182c:	00881b34 	movhi	r2,8300
 8021830:	109b1944 	addi	r2,r2,27749
 8021834:	e0bfcf15 	stw	r2,-196(fp)
 8021838:	00991874 	movhi	r2,25697
 802183c:	109d5444 	addi	r2,r2,30033
 8021840:	e0bfd015 	stw	r2,-192(fp)
 8021844:	00965234 	movhi	r2,22856
 8021848:	10940804 	addi	r2,r2,20512
 802184c:	e0bfd115 	stw	r2,-188(fp)
 8021850:	00914e34 	movhi	r2,17720
 8021854:	108e0804 	addi	r2,r2,14368
 8021858:	e0bfd215 	stw	r2,-184(fp)
 802185c:	008d4d34 	movhi	r2,13620
 8021860:	108c4c44 	addi	r2,r2,12593
 8021864:	e0bfd315 	stw	r2,-180(fp)
 8021868:	e03fd415 	stw	zero,-176(fp)
 802186c:	e03fd515 	stw	zero,-172(fp)
 8021870:	e03fd615 	stw	zero,-168(fp)
 8021874:	e03fd715 	stw	zero,-164(fp)
 8021878:	e03fd815 	stw	zero,-160(fp)
 802187c:	e03fd915 	stw	zero,-156(fp)
 8021880:	e03fda15 	stw	zero,-152(fp)
 8021884:	e03fdb15 	stw	zero,-148(fp)
 8021888:	e03fdc15 	stw	zero,-144(fp)
 802188c:	e03fdd15 	stw	zero,-140(fp)
 8021890:	e03fde15 	stw	zero,-136(fp)
 8021894:	e03fdf15 	stw	zero,-132(fp)
 8021898:	e03fe015 	stw	zero,-128(fp)
 802189c:	e03fe115 	stw	zero,-124(fp)
 80218a0:	009410c4 	movi	r2,20547
 80218a4:	e0bfe215 	stw	r2,-120(fp)
 80218a8:	00800344 	movi	r2,13
 80218ac:	e0bfe305 	stb	r2,-116(fp)
 80218b0:	00800084 	movi	r2,2
 80218b4:	e0bfe345 	stb	r2,-115(fp)
 80218b8:	00800444 	movi	r2,17
 80218bc:	e0bfe385 	stb	r2,-114(fp)
 80218c0:	00800384 	movi	r2,14
 80218c4:	e0bfe3c5 	stb	r2,-113(fp)
 80218c8:	00800344 	movi	r2,13
 80218cc:	e0bfe405 	stb	r2,-112(fp)
 80218d0:	00800284 	movi	r2,10
 80218d4:	e0bfe445 	stb	r2,-111(fp)
 80218d8:	008200b4 	movhi	r2,2050
 80218dc:	10905a04 	addi	r2,r2,16744
 80218e0:	e0bfe515 	stw	r2,-108(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
 80218e4:	e0bfb504 	addi	r2,fp,-300
 80218e8:	00c01904 	movi	r3,100
 80218ec:	180d883a 	mov	r6,r3
 80218f0:	000b883a 	mov	r5,zero
 80218f4:	1009883a 	mov	r4,r2
 80218f8:	80038cc0 	call	80038cc <memset>
 80218fc:	009a5d34 	movhi	r2,26996
 8021900:	10985384 	addi	r2,r2,24910
 8021904:	e0bfb515 	stw	r2,-300(fp)
 8021908:	009b1874 	movhi	r2,27745
 802190c:	109b9bc4 	addi	r2,r2,28271
 8021910:	e0bfb615 	stw	r2,-296(fp)
 8021914:	008e1434 	movhi	r2,14416
 8021918:	10910804 	addi	r2,r2,17440
 802191c:	e0bfb715 	stw	r2,-292(fp)
 8021920:	008d4db4 	movhi	r2,13622
 8021924:	108e0cc4 	addi	r2,r2,14387
 8021928:	e0bfb815 	stw	r2,-288(fp)
 802192c:	e03fb915 	stw	zero,-284(fp)
 8021930:	e0bfba04 	addi	r2,fp,-280
 8021934:	00c00f04 	movi	r3,60
 8021938:	180d883a 	mov	r6,r3
 802193c:	000b883a 	mov	r5,zero
 8021940:	1009883a 	mov	r4,r2
 8021944:	80038cc0 	call	80038cc <memset>
 8021948:	00800234 	movhi	r2,8
 802194c:	108005c4 	addi	r2,r2,23
 8021950:	e0bfc915 	stw	r2,-220(fp)
 8021954:	008001c4 	movi	r2,7
 8021958:	e0bfca05 	stb	r2,-216(fp)
 802195c:	00800284 	movi	r2,10
 8021960:	e0bfca45 	stb	r2,-215(fp)
 8021964:	00800444 	movi	r2,17
 8021968:	e0bfca85 	stb	r2,-214(fp)
 802196c:	008000c4 	movi	r2,3
 8021970:	e0bfcac5 	stb	r2,-213(fp)
 8021974:	00800044 	movi	r2,1
 8021978:	e0bfcb05 	stb	r2,-212(fp)
 802197c:	00800084 	movi	r2,2
 8021980:	e0bfcb45 	stb	r2,-211(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
 8021984:	e0ff9c04 	addi	r3,fp,-400
 8021988:	00820174 	movhi	r2,2053
 802198c:	1084a004 	addi	r2,r2,4736
 8021990:	01001904 	movi	r4,100
 8021994:	200d883a 	mov	r6,r4
 8021998:	100b883a 	mov	r5,r2
 802199c:	1809883a 	mov	r4,r3
 80219a0:	80037cc0 	call	80037cc <memcpy>

    /* -------------------------------------- */
    /* Intel PHY on C10LP EVA board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile PEF7071 = {"Intel PEF7071",       /* National DP83848C                                          */
 80219a4:	e0ff8304 	addi	r3,fp,-500
 80219a8:	00820174 	movhi	r2,2053
 80219ac:	1084b904 	addi	r2,r2,4836
 80219b0:	01001904 	movi	r4,100
 80219b4:	200d883a 	mov	r6,r4
 80219b8:	100b883a 	mov	r5,r2
 80219bc:	1809883a 	mov	r4,r3
 80219c0:	80037cc0 	call	80037cc <memcpy>
                           &PEF7071_config,               /* configure PEF7071                                          */
                           &PEF7071_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 80219c4:	e0bfe704 	addi	r2,fp,-100
 80219c8:	1009883a 	mov	r4,r2
 80219cc:	801fa700 	call	801fa70 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 80219d0:	e0bfce04 	addi	r2,fp,-200
 80219d4:	1009883a 	mov	r4,r2
 80219d8:	801fa700 	call	801fa70 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 80219dc:	e0bfb504 	addi	r2,fp,-300
 80219e0:	1009883a 	mov	r4,r2
 80219e4:	801fa700 	call	801fa70 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 80219e8:	e0bf9c04 	addi	r2,fp,-400
 80219ec:	1009883a 	mov	r4,r2
 80219f0:	801fa700 	call	801fa70 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&PEF7071);
 80219f4:	e0bf8304 	addi	r2,fp,-500
 80219f8:	1009883a 	mov	r4,r2
 80219fc:	801fa700 	call	801fa70 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 8021a00:	d0a07a03 	ldbu	r2,-32280(gp)
 8021a04:	10803fcc 	andi	r2,r2,255
}
 8021a08:	e037883a 	mov	sp,fp
 8021a0c:	dfc00117 	ldw	ra,4(sp)
 8021a10:	df000017 	ldw	fp,0(sp)
 8021a14:	dec00204 	addi	sp,sp,8
 8021a18:	f800283a 	ret

08021a1c <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 8021a1c:	defffd04 	addi	sp,sp,-12
 8021a20:	dfc00215 	stw	ra,8(sp)
 8021a24:	df000115 	stw	fp,4(sp)
 8021a28:	df000104 	addi	fp,sp,4
   
    alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 8021a2c:	d0a07a03 	ldbu	r2,-32280(gp)
 8021a30:	10803fcc 	andi	r2,r2,255
 8021a34:	100b883a 	mov	r5,r2
 8021a38:	01020174 	movhi	r4,2053
 8021a3c:	2104d204 	addi	r4,r4,4936
 8021a40:	8003b840 	call	8003b84 <printf>
    
    for(i = 0; i < phy_profile_count; i++)
 8021a44:	e03fffc5 	stb	zero,-1(fp)
 8021a48:	00005d06 	br	8021bc0 <alt_tse_phy_print_profile+0x1a4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 8021a4c:	e0bfffc7 	ldb	r2,-1(fp)
 8021a50:	100b883a 	mov	r5,r2
 8021a54:	01020174 	movhi	r4,2053
 8021a58:	2104e104 	addi	r4,r4,4996
 8021a5c:	8003b840 	call	8003b84 <printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 8021a60:	e0bfffc7 	ldb	r2,-1(fp)
 8021a64:	100690ba 	slli	r3,r2,2
 8021a68:	008201b4 	movhi	r2,2054
 8021a6c:	1885883a 	add	r2,r3,r2
 8021a70:	10bc5117 	ldw	r2,-3772(r2)
 8021a74:	100b883a 	mov	r5,r2
 8021a78:	01020174 	movhi	r4,2053
 8021a7c:	2104e604 	addi	r4,r4,5016
 8021a80:	8003b840 	call	8003b84 <printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 8021a84:	e0bfffc7 	ldb	r2,-1(fp)
 8021a88:	100690ba 	slli	r3,r2,2
 8021a8c:	008201b4 	movhi	r2,2054
 8021a90:	1885883a 	add	r2,r3,r2
 8021a94:	10bc5117 	ldw	r2,-3772(r2)
 8021a98:	10801417 	ldw	r2,80(r2)
 8021a9c:	100b883a 	mov	r5,r2
 8021aa0:	01020174 	movhi	r4,2053
 8021aa4:	2104ec04 	addi	r4,r4,5040
 8021aa8:	8003b840 	call	8003b84 <printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 8021aac:	e0bfffc7 	ldb	r2,-1(fp)
 8021ab0:	100690ba 	slli	r3,r2,2
 8021ab4:	008201b4 	movhi	r2,2054
 8021ab8:	1885883a 	add	r2,r3,r2
 8021abc:	10bc5117 	ldw	r2,-3772(r2)
 8021ac0:	10801503 	ldbu	r2,84(r2)
 8021ac4:	10803fcc 	andi	r2,r2,255
 8021ac8:	100b883a 	mov	r5,r2
 8021acc:	01020174 	movhi	r4,2053
 8021ad0:	2104f304 	addi	r4,r4,5068
 8021ad4:	8003b840 	call	8003b84 <printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 8021ad8:	e0bfffc7 	ldb	r2,-1(fp)
 8021adc:	100690ba 	slli	r3,r2,2
 8021ae0:	008201b4 	movhi	r2,2054
 8021ae4:	1885883a 	add	r2,r3,r2
 8021ae8:	10bc5117 	ldw	r2,-3772(r2)
 8021aec:	10801543 	ldbu	r2,85(r2)
 8021af0:	10803fcc 	andi	r2,r2,255
 8021af4:	100b883a 	mov	r5,r2
 8021af8:	01020174 	movhi	r4,2053
 8021afc:	2104fa04 	addi	r4,r4,5096
 8021b00:	8003b840 	call	8003b84 <printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 8021b04:	e0bfffc7 	ldb	r2,-1(fp)
 8021b08:	100690ba 	slli	r3,r2,2
 8021b0c:	008201b4 	movhi	r2,2054
 8021b10:	1885883a 	add	r2,r3,r2
 8021b14:	10bc5117 	ldw	r2,-3772(r2)
 8021b18:	10801583 	ldbu	r2,86(r2)
 8021b1c:	10803fcc 	andi	r2,r2,255
 8021b20:	100b883a 	mov	r5,r2
 8021b24:	01020174 	movhi	r4,2053
 8021b28:	21050104 	addi	r4,r4,5124
 8021b2c:	8003b840 	call	8003b84 <printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 8021b30:	e0bfffc7 	ldb	r2,-1(fp)
 8021b34:	100690ba 	slli	r3,r2,2
 8021b38:	008201b4 	movhi	r2,2054
 8021b3c:	1885883a 	add	r2,r3,r2
 8021b40:	10bc5117 	ldw	r2,-3772(r2)
 8021b44:	108015c3 	ldbu	r2,87(r2)
 8021b48:	10803fcc 	andi	r2,r2,255
 8021b4c:	100b883a 	mov	r5,r2
 8021b50:	01020174 	movhi	r4,2053
 8021b54:	21050804 	addi	r4,r4,5152
 8021b58:	8003b840 	call	8003b84 <printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 8021b5c:	e0bfffc7 	ldb	r2,-1(fp)
 8021b60:	100690ba 	slli	r3,r2,2
 8021b64:	008201b4 	movhi	r2,2054
 8021b68:	1885883a 	add	r2,r3,r2
 8021b6c:	10bc5117 	ldw	r2,-3772(r2)
 8021b70:	10801603 	ldbu	r2,88(r2)
 8021b74:	10803fcc 	andi	r2,r2,255
 8021b78:	100b883a 	mov	r5,r2
 8021b7c:	01020174 	movhi	r4,2053
 8021b80:	21050e04 	addi	r4,r4,5176
 8021b84:	8003b840 	call	8003b84 <printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 8021b88:	e0bfffc7 	ldb	r2,-1(fp)
 8021b8c:	100690ba 	slli	r3,r2,2
 8021b90:	008201b4 	movhi	r2,2054
 8021b94:	1885883a 	add	r2,r3,r2
 8021b98:	10bc5117 	ldw	r2,-3772(r2)
 8021b9c:	10801643 	ldbu	r2,89(r2)
 8021ba0:	10803fcc 	andi	r2,r2,255
 8021ba4:	100b883a 	mov	r5,r2
 8021ba8:	01020174 	movhi	r4,2053
 8021bac:	21051404 	addi	r4,r4,5200
 8021bb0:	8003b840 	call	8003b84 <printf>
    for(i = 0; i < phy_profile_count; i++)
 8021bb4:	e0bfffc3 	ldbu	r2,-1(fp)
 8021bb8:	10800044 	addi	r2,r2,1
 8021bbc:	e0bfffc5 	stb	r2,-1(fp)
 8021bc0:	e0ffffc7 	ldb	r3,-1(fp)
 8021bc4:	d0a07a03 	ldbu	r2,-32280(gp)
 8021bc8:	10803fcc 	andi	r2,r2,255
 8021bcc:	18bf9f16 	blt	r3,r2,8021a4c <alt_tse_phy_print_profile+0x30>
 
    }
    
    return phy_profile_count;
 8021bd0:	d0a07a03 	ldbu	r2,-32280(gp)
 8021bd4:	10803fcc 	andi	r2,r2,255
}
 8021bd8:	e037883a 	mov	sp,fp
 8021bdc:	dfc00117 	ldw	ra,4(sp)
 8021be0:	df000017 	ldw	fp,0(sp)
 8021be4:	dec00204 	addi	sp,sp,8
 8021be8:	f800283a 	ret

08021bec <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 8021bec:	defffa04 	addi	sp,sp,-24
 8021bf0:	dfc00515 	stw	ra,20(sp)
 8021bf4:	df000415 	stw	fp,16(sp)
 8021bf8:	df000404 	addi	fp,sp,16
    
    alt_8 i;
    alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 8021bfc:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 8021c00:	e03fff15 	stw	zero,-4(fp)
    alt_tse_system_info *psys = 0;
 8021c04:	e03ffc15 	stw	zero,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 8021c08:	d0207a45 	stb	zero,-32279(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 8021c0c:	e03ffec5 	stb	zero,-5(fp)
 8021c10:	00019606 	br	802226c <alt_tse_mac_group_init+0x680>
        psys = &tse_mac_device[i];
 8021c14:	e0bffec7 	ldb	r2,-5(fp)
 8021c18:	10c01324 	muli	r3,r2,76
 8021c1c:	00820174 	movhi	r2,2053
 8021c20:	10935604 	addi	r2,r2,19800
 8021c24:	1885883a 	add	r2,r3,r2
 8021c28:	e0bffc15 	stw	r2,-16(fp)

        if((psys->tse_msgdma_tx != 0) && (psys->tse_msgdma_rx != 0)) {        
 8021c2c:	e0bffc17 	ldw	r2,-16(fp)
 8021c30:	10800617 	ldw	r2,24(r2)
 8021c34:	10018a26 	beq	r2,zero,8022260 <alt_tse_mac_group_init+0x674>
 8021c38:	e0bffc17 	ldw	r2,-16(fp)
 8021c3c:	10800717 	ldw	r2,28(r2)
 8021c40:	10018726 	beq	r2,zero,8022260 <alt_tse_mac_group_init+0x674>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 8021c44:	d0a07a43 	ldbu	r2,-32279(gp)
 8021c48:	10c03fcc 	andi	r3,r2,255
 8021c4c:	e0bffc17 	ldw	r2,-16(fp)
 8021c50:	10800017 	ldw	r2,0(r2)
 8021c54:	100d883a 	mov	r6,r2
 8021c58:	180b883a 	mov	r5,r3
 8021c5c:	01020174 	movhi	r4,2053
 8021c60:	21051a04 	addi	r4,r4,5224
 8021c64:	8003b840 	call	8003b84 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 8021c68:	01000504 	movi	r4,20
 8021c6c:	804e0840 	call	804e084 <malloc>
 8021c70:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
 8021c74:	e0bffd17 	ldw	r2,-12(fp)
 8021c78:	1000081e 	bne	r2,zero,8021c9c <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 8021c7c:	d0a07a43 	ldbu	r2,-32279(gp)
 8021c80:	10803fcc 	andi	r2,r2,255
 8021c84:	100b883a 	mov	r5,r2
 8021c88:	01020174 	movhi	r4,2053
 8021c8c:	21052604 	addi	r4,r4,5272
 8021c90:	8003b840 	call	8003b84 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 8021c94:	00bfffc4 	movi	r2,-1
 8021c98:	00017906 	br	8022280 <alt_tse_mac_group_init+0x694>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 8021c9c:	e0bffc17 	ldw	r2,-16(fp)
 8021ca0:	108003c3 	ldbu	r2,15(r2)
 8021ca4:	10803fcc 	andi	r2,r2,255
 8021ca8:	10001226 	beq	r2,zero,8021cf4 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
 8021cac:	e0bffc17 	ldw	r2,-16(fp)
 8021cb0:	10c00403 	ldbu	r3,16(r2)
 8021cb4:	e0bffd17 	ldw	r2,-12(fp)
 8021cb8:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 8021cbc:	01020174 	movhi	r4,2053
 8021cc0:	21053404 	addi	r4,r4,5328
 8021cc4:	8003ca80 	call	8003ca8 <puts>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 8021cc8:	e0bffd17 	ldw	r2,-12(fp)
 8021ccc:	10800003 	ldbu	r2,0(r2)
 8021cd0:	10803fcc 	andi	r2,r2,255
 8021cd4:	100b883a 	mov	r5,r2
 8021cd8:	01020174 	movhi	r4,2053
 8021cdc:	21053f04 	addi	r4,r4,5372
 8021ce0:	8003b840 	call	8003b84 <printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 8021ce4:	01020174 	movhi	r4,2053
 8021ce8:	21054a04 	addi	r4,r4,5416
 8021cec:	8003ca80 	call	8003ca8 <puts>
 8021cf0:	00001f06 	br	8021d70 <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
 8021cf4:	e0bffc17 	ldw	r2,-16(fp)
 8021cf8:	10800443 	ldbu	r2,17(r2)
 8021cfc:	10803fcc 	andi	r2,r2,255
 8021d00:	10001226 	beq	r2,zero,8021d4c <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 8021d04:	e0bffc17 	ldw	r2,-16(fp)
 8021d08:	10c00483 	ldbu	r3,18(r2)
 8021d0c:	e0bffd17 	ldw	r2,-12(fp)
 8021d10:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 8021d14:	01020174 	movhi	r4,2053
 8021d18:	21055504 	addi	r4,r4,5460
 8021d1c:	8003ca80 	call	8003ca8 <puts>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 8021d20:	01020174 	movhi	r4,2053
 8021d24:	21054a04 	addi	r4,r4,5416
 8021d28:	8003ca80 	call	8003ca8 <puts>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 8021d2c:	e0bffd17 	ldw	r2,-12(fp)
 8021d30:	10800003 	ldbu	r2,0(r2)
 8021d34:	10803fcc 	andi	r2,r2,255
 8021d38:	100b883a 	mov	r5,r2
 8021d3c:	01020174 	movhi	r4,2053
 8021d40:	21055f04 	addi	r4,r4,5500
 8021d44:	8003b840 	call	8003b84 <printf>
 8021d48:	00000906 	br	8021d70 <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
 8021d4c:	e0bffd17 	ldw	r2,-12(fp)
 8021d50:	00c00044 	movi	r3,1
 8021d54:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 8021d58:	01020174 	movhi	r4,2053
 8021d5c:	21055504 	addi	r4,r4,5460
 8021d60:	8003ca80 	call	8003ca8 <puts>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 8021d64:	01020174 	movhi	r4,2053
 8021d68:	21056a04 	addi	r4,r4,5544
 8021d6c:	8003ca80 	call	8003ca8 <puts>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 8021d70:	e03ffe85 	stb	zero,-6(fp)
 8021d74:	00012506 	br	802220c <alt_tse_mac_group_init+0x620>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 8021d78:	01000404 	movi	r4,16
 8021d7c:	804e0840 	call	804e084 <malloc>
 8021d80:	e0bfff15 	stw	r2,-4(fp)
                if(!pmac_info) {
 8021d84:	e0bfff17 	ldw	r2,-4(fp)
 8021d88:	10000a1e 	bne	r2,zero,8021db4 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 8021d8c:	d0a07a43 	ldbu	r2,-32279(gp)
 8021d90:	10803fcc 	andi	r2,r2,255
 8021d94:	e0fffe87 	ldb	r3,-6(fp)
 8021d98:	180d883a 	mov	r6,r3
 8021d9c:	100b883a 	mov	r5,r2
 8021da0:	01020174 	movhi	r4,2053
 8021da4:	21057404 	addi	r4,r4,5584
 8021da8:	8003b840 	call	8003b84 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 8021dac:	00bfffc4 	movi	r2,-1
 8021db0:	00013306 	br	8022280 <alt_tse_mac_group_init+0x694>
                }
                
                pmac_info->pmac_group = pmac_group;
 8021db4:	e0bfff17 	ldw	r2,-4(fp)
 8021db8:	e0fffd17 	ldw	r3,-12(fp)
 8021dbc:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
 8021dc0:	e0bfff17 	ldw	r2,-4(fp)
 8021dc4:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 8021dc8:	e0fffec7 	ldb	r3,-5(fp)
 8021dcc:	e0bffe87 	ldb	r2,-6(fp)
 8021dd0:	1885883a 	add	r2,r3,r2
 8021dd4:	10c01324 	muli	r3,r2,76
 8021dd8:	00820174 	movhi	r2,2053
 8021ddc:	10935604 	addi	r2,r2,19800
 8021de0:	1887883a 	add	r3,r3,r2
 8021de4:	e0bfff17 	ldw	r2,-4(fp)
 8021de8:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_msgdma_tx == 0) || (pmac_info->psys_info->tse_msgdma_rx == 0)){                    
 8021dec:	e0bfff17 	ldw	r2,-4(fp)
 8021df0:	10800217 	ldw	r2,8(r2)
 8021df4:	10800617 	ldw	r2,24(r2)
 8021df8:	10000426 	beq	r2,zero,8021e0c <alt_tse_mac_group_init+0x220>
 8021dfc:	e0bfff17 	ldw	r2,-4(fp)
 8021e00:	10800217 	ldw	r2,8(r2)
 8021e04:	10800717 	ldw	r2,28(r2)
 8021e08:	1000091e 	bne	r2,zero,8021e30 <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 8021e0c:	e0fffec7 	ldb	r3,-5(fp)
 8021e10:	e0bffe87 	ldb	r2,-6(fp)
 8021e14:	1885883a 	add	r2,r3,r2
 8021e18:	100b883a 	mov	r5,r2
 8021e1c:	01020174 	movhi	r4,2053
 8021e20:	21058604 	addi	r4,r4,5656
 8021e24:	8003b840 	call	8003b84 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 8021e28:	00bfffc4 	movi	r2,-1
 8021e2c:	00011406 	br	8022280 <alt_tse_mac_group_init+0x694>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 8021e30:	e0bfff17 	ldw	r2,-4(fp)
 8021e34:	10800217 	ldw	r2,8(r2)
 8021e38:	10800343 	ldbu	r2,13(r2)
 8021e3c:	10803fcc 	andi	r2,r2,255
 8021e40:	10000d26 	beq	r2,zero,8021e78 <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 8021e44:	e0bfff17 	ldw	r2,-4(fp)
 8021e48:	10800217 	ldw	r2,8(r2)
 8021e4c:	10800383 	ldbu	r2,14(r2)
 8021e50:	10803fcc 	andi	r2,r2,255
 8021e54:	10000426 	beq	r2,zero,8021e68 <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 8021e58:	e0bfff17 	ldw	r2,-4(fp)
 8021e5c:	00c00084 	movi	r3,2
 8021e60:	10c00005 	stb	r3,0(r2)
 8021e64:	00000606 	br	8021e80 <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 8021e68:	e0bfff17 	ldw	r2,-4(fp)
 8021e6c:	00c00044 	movi	r3,1
 8021e70:	10c00005 	stb	r3,0(r2)
 8021e74:	00000206 	br	8021e80 <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 8021e78:	e0bfff17 	ldw	r2,-4(fp)
 8021e7c:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 8021e80:	e0bfff17 	ldw	r2,-4(fp)
 8021e84:	10800217 	ldw	r2,8(r2)
 8021e88:	10800443 	ldbu	r2,17(r2)
 8021e8c:	10803fcc 	andi	r2,r2,255
 8021e90:	10006826 	beq	r2,zero,8022034 <alt_tse_mac_group_init+0x448>
 8021e94:	e0bfff17 	ldw	r2,-4(fp)
 8021e98:	10800217 	ldw	r2,8(r2)
 8021e9c:	108003c3 	ldbu	r2,15(r2)
 8021ea0:	10803fcc 	andi	r2,r2,255
 8021ea4:	1000631e 	bne	r2,zero,8022034 <alt_tse_mac_group_init+0x448>
                    tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 8021ea8:	e0fffe87 	ldb	r3,-6(fp)
 8021eac:	e0bfff17 	ldw	r2,-4(fp)
 8021eb0:	10800217 	ldw	r2,8(r2)
 8021eb4:	10800017 	ldw	r2,0(r2)
 8021eb8:	100d883a 	mov	r6,r2
 8021ebc:	180b883a 	mov	r5,r3
 8021ec0:	01020174 	movhi	r4,2053
 8021ec4:	21059504 	addi	r4,r4,5716
 8021ec8:	8003b840 	call	8003b84 <printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 8021ecc:	e13ffe87 	ldb	r4,-6(fp)
 8021ed0:	e0fffec7 	ldb	r3,-5(fp)
 8021ed4:	e0bffe87 	ldb	r2,-6(fp)
 8021ed8:	1885883a 	add	r2,r3,r2
 8021edc:	100d883a 	mov	r6,r2
 8021ee0:	200b883a 	mov	r5,r4
 8021ee4:	01020174 	movhi	r4,2053
 8021ee8:	2105a104 	addi	r4,r4,5764
 8021eec:	8003b840 	call	8003b84 <printf>
                    
                    switch(pmac_info->mac_type) {
 8021ef0:	e0bfff17 	ldw	r2,-4(fp)
 8021ef4:	10800003 	ldbu	r2,0(r2)
 8021ef8:	10803fcc 	andi	r2,r2,255
 8021efc:	10c000a0 	cmpeqi	r3,r2,2
 8021f00:	1800061e 	bne	r3,zero,8021f1c <alt_tse_mac_group_init+0x330>
 8021f04:	10c000c8 	cmpgei	r3,r2,3
 8021f08:	18001c1e 	bne	r3,zero,8021f7c <alt_tse_mac_group_init+0x390>
 8021f0c:	10001326 	beq	r2,zero,8021f5c <alt_tse_mac_group_init+0x370>
 8021f10:	10800060 	cmpeqi	r2,r2,1
 8021f14:	1000091e 	bne	r2,zero,8021f3c <alt_tse_mac_group_init+0x350>
 8021f18:	00001806 	br	8021f7c <alt_tse_mac_group_init+0x390>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 8021f1c:	e0bffe87 	ldb	r2,-6(fp)
 8021f20:	01820174 	movhi	r6,2053
 8021f24:	3185b004 	addi	r6,r6,5824
 8021f28:	100b883a 	mov	r5,r2
 8021f2c:	01020174 	movhi	r4,2053
 8021f30:	2105b504 	addi	r4,r4,5844
 8021f34:	8003b840 	call	8003b84 <printf>
                            break;
 8021f38:	00001806 	br	8021f9c <alt_tse_mac_group_init+0x3b0>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 8021f3c:	e0bffe87 	ldb	r2,-6(fp)
 8021f40:	01820174 	movhi	r6,2053
 8021f44:	3185c004 	addi	r6,r6,5888
 8021f48:	100b883a 	mov	r5,r2
 8021f4c:	01020174 	movhi	r4,2053
 8021f50:	2105b504 	addi	r4,r4,5844
 8021f54:	8003b840 	call	8003b84 <printf>
                            break;
 8021f58:	00001006 	br	8021f9c <alt_tse_mac_group_init+0x3b0>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 8021f5c:	e0bffe87 	ldb	r2,-6(fp)
 8021f60:	01820174 	movhi	r6,2053
 8021f64:	3185c604 	addi	r6,r6,5912
 8021f68:	100b883a 	mov	r5,r2
 8021f6c:	01020174 	movhi	r4,2053
 8021f70:	2105b504 	addi	r4,r4,5844
 8021f74:	8003b840 	call	8003b84 <printf>
                            break;
 8021f78:	00000806 	br	8021f9c <alt_tse_mac_group_init+0x3b0>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 8021f7c:	e0bffe87 	ldb	r2,-6(fp)
 8021f80:	01820174 	movhi	r6,2053
 8021f84:	3183e704 	addi	r6,r6,3996
 8021f88:	100b883a 	mov	r5,r2
 8021f8c:	01020174 	movhi	r4,2053
 8021f90:	2105b504 	addi	r4,r4,5844
 8021f94:	8003b840 	call	8003b84 <printf>
                            break;
 8021f98:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 8021f9c:	e0bfff17 	ldw	r2,-4(fp)
 8021fa0:	10800217 	ldw	r2,8(r2)
 8021fa4:	108004c3 	ldbu	r2,19(r2)
 8021fa8:	10803fcc 	andi	r2,r2,255
 8021fac:	10008d26 	beq	r2,zero,80221e4 <alt_tse_mac_group_init+0x5f8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 8021fb0:	e0fffe87 	ldb	r3,-6(fp)
 8021fb4:	e0bfff17 	ldw	r2,-4(fp)
 8021fb8:	10800217 	ldw	r2,8(r2)
 8021fbc:	108004c3 	ldbu	r2,19(r2)
 8021fc0:	10803fcc 	andi	r2,r2,255
 8021fc4:	10000326 	beq	r2,zero,8021fd4 <alt_tse_mac_group_init+0x3e8>
 8021fc8:	00820174 	movhi	r2,2053
 8021fcc:	1085cd04 	addi	r2,r2,5940
 8021fd0:	00000206 	br	8021fdc <alt_tse_mac_group_init+0x3f0>
 8021fd4:	00820174 	movhi	r2,2053
 8021fd8:	1085ce04 	addi	r2,r2,5944
 8021fdc:	100d883a 	mov	r6,r2
 8021fe0:	180b883a 	mov	r5,r3
 8021fe4:	01020174 	movhi	r4,2053
 8021fe8:	2105cf04 	addi	r4,r4,5948
 8021fec:	8003b840 	call	8003b84 <printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 8021ff0:	e0fffe87 	ldb	r3,-6(fp)
 8021ff4:	e0bfff17 	ldw	r2,-4(fp)
 8021ff8:	10800217 	ldw	r2,8(r2)
 8021ffc:	10800503 	ldbu	r2,20(r2)
 8022000:	10803fcc 	andi	r2,r2,255
 8022004:	10000326 	beq	r2,zero,8022014 <alt_tse_mac_group_init+0x428>
 8022008:	00820174 	movhi	r2,2053
 802200c:	1085cd04 	addi	r2,r2,5940
 8022010:	00000206 	br	802201c <alt_tse_mac_group_init+0x430>
 8022014:	00820174 	movhi	r2,2053
 8022018:	1085ce04 	addi	r2,r2,5944
 802201c:	100d883a 	mov	r6,r2
 8022020:	180b883a 	mov	r5,r3
 8022024:	01020174 	movhi	r4,2053
 8022028:	2105da04 	addi	r4,r4,5992
 802202c:	8003b840 	call	8003b84 <printf>
                    if(pmac_info->psys_info->tse_pcs_ena) {
 8022030:	00006c06 	br	80221e4 <alt_tse_mac_group_init+0x5f8>
                    }
                }
                else {
                    /* display only once for all MAC, except shared MDIO MACs */
                    if(j == 0) {
 8022034:	e0bffe87 	ldb	r2,-6(fp)
 8022038:	1000441e 	bne	r2,zero,802214c <alt_tse_mac_group_init+0x560>
                        switch(pmac_info->mac_type) {
 802203c:	e0bfff17 	ldw	r2,-4(fp)
 8022040:	10800003 	ldbu	r2,0(r2)
 8022044:	10803fcc 	andi	r2,r2,255
 8022048:	10c000a0 	cmpeqi	r3,r2,2
 802204c:	1800061e 	bne	r3,zero,8022068 <alt_tse_mac_group_init+0x47c>
 8022050:	10c000c8 	cmpgei	r3,r2,3
 8022054:	1800161e 	bne	r3,zero,80220b0 <alt_tse_mac_group_init+0x4c4>
 8022058:	10000f26 	beq	r2,zero,8022098 <alt_tse_mac_group_init+0x4ac>
 802205c:	10800060 	cmpeqi	r2,r2,1
 8022060:	1000071e 	bne	r2,zero,8022080 <alt_tse_mac_group_init+0x494>
 8022064:	00001206 	br	80220b0 <alt_tse_mac_group_init+0x4c4>
                            case ALTERA_TSE_MACLITE_1000:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 8022068:	01420174 	movhi	r5,2053
 802206c:	2945b004 	addi	r5,r5,5824
 8022070:	01020174 	movhi	r4,2053
 8022074:	2105e504 	addi	r4,r4,6036
 8022078:	8003b840 	call	8003b84 <printf>
                                break;
 802207c:	00001206 	br	80220c8 <alt_tse_mac_group_init+0x4dc>
                            case ALTERA_TSE_MACLITE_10_100:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 8022080:	01420174 	movhi	r5,2053
 8022084:	2945c004 	addi	r5,r5,5888
 8022088:	01020174 	movhi	r4,2053
 802208c:	2105e504 	addi	r4,r4,6036
 8022090:	8003b840 	call	8003b84 <printf>
                                break;
 8022094:	00000c06 	br	80220c8 <alt_tse_mac_group_init+0x4dc>
                            case ALTERA_TSE_FULL_MAC:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 8022098:	01420174 	movhi	r5,2053
 802209c:	2945c604 	addi	r5,r5,5912
 80220a0:	01020174 	movhi	r4,2053
 80220a4:	2105e504 	addi	r4,r4,6036
 80220a8:	8003b840 	call	8003b84 <printf>
                                break;
 80220ac:	00000606 	br	80220c8 <alt_tse_mac_group_init+0x4dc>
                            default :
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 80220b0:	01420174 	movhi	r5,2053
 80220b4:	2943e704 	addi	r5,r5,3996
 80220b8:	01020174 	movhi	r4,2053
 80220bc:	2105e504 	addi	r4,r4,6036
 80220c0:	8003b840 	call	8003b84 <printf>
                                    break;
 80220c4:	0001883a 	nop
                }
                        
                        if(pmac_info->psys_info->tse_pcs_ena) {
 80220c8:	e0bfff17 	ldw	r2,-4(fp)
 80220cc:	10800217 	ldw	r2,8(r2)
 80220d0:	108004c3 	ldbu	r2,19(r2)
 80220d4:	10803fcc 	andi	r2,r2,255
 80220d8:	10001c26 	beq	r2,zero,802214c <alt_tse_mac_group_init+0x560>
                            tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 80220dc:	e0bfff17 	ldw	r2,-4(fp)
 80220e0:	10800217 	ldw	r2,8(r2)
 80220e4:	108004c3 	ldbu	r2,19(r2)
 80220e8:	10803fcc 	andi	r2,r2,255
 80220ec:	10000326 	beq	r2,zero,80220fc <alt_tse_mac_group_init+0x510>
 80220f0:	00820174 	movhi	r2,2053
 80220f4:	1085cd04 	addi	r2,r2,5940
 80220f8:	00000206 	br	8022104 <alt_tse_mac_group_init+0x518>
 80220fc:	00820174 	movhi	r2,2053
 8022100:	1085ce04 	addi	r2,r2,5944
 8022104:	100b883a 	mov	r5,r2
 8022108:	01020174 	movhi	r4,2053
 802210c:	2105f004 	addi	r4,r4,6080
 8022110:	8003b840 	call	8003b84 <printf>
                            tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                            
 8022114:	e0bfff17 	ldw	r2,-4(fp)
 8022118:	10800217 	ldw	r2,8(r2)
 802211c:	10800503 	ldbu	r2,20(r2)
 8022120:	10803fcc 	andi	r2,r2,255
 8022124:	10000326 	beq	r2,zero,8022134 <alt_tse_mac_group_init+0x548>
 8022128:	00820174 	movhi	r2,2053
 802212c:	1085cd04 	addi	r2,r2,5940
 8022130:	00000206 	br	802213c <alt_tse_mac_group_init+0x550>
 8022134:	00820174 	movhi	r2,2053
 8022138:	1085ce04 	addi	r2,r2,5944
 802213c:	100b883a 	mov	r5,r2
 8022140:	01020174 	movhi	r4,2053
 8022144:	2105fb04 	addi	r4,r4,6124
 8022148:	8003b840 	call	8003b84 <printf>
                        }
                    }
                    
                    if(pmac_info->psys_info->tse_multichannel_mac) {
 802214c:	e0bfff17 	ldw	r2,-4(fp)
 8022150:	10800217 	ldw	r2,8(r2)
 8022154:	108003c3 	ldbu	r2,15(r2)
 8022158:	10803fcc 	andi	r2,r2,255
 802215c:	10001326 	beq	r2,zero,80221ac <alt_tse_mac_group_init+0x5c0>
                        tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 8022160:	e0fffe87 	ldb	r3,-6(fp)
 8022164:	e0bfff17 	ldw	r2,-4(fp)
 8022168:	10800217 	ldw	r2,8(r2)
 802216c:	10800017 	ldw	r2,0(r2)
 8022170:	100d883a 	mov	r6,r2
 8022174:	180b883a 	mov	r5,r3
 8022178:	01020174 	movhi	r4,2053
 802217c:	21060604 	addi	r4,r4,6168
 8022180:	8003b840 	call	8003b84 <printf>
                        tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 8022184:	e13ffe87 	ldb	r4,-6(fp)
 8022188:	e0fffec7 	ldb	r3,-5(fp)
 802218c:	e0bffe87 	ldb	r2,-6(fp)
 8022190:	1885883a 	add	r2,r3,r2
 8022194:	100d883a 	mov	r6,r2
 8022198:	200b883a 	mov	r5,r4
 802219c:	01020174 	movhi	r4,2053
 80221a0:	21061204 	addi	r4,r4,6216
 80221a4:	8003b840 	call	8003b84 <printf>
 80221a8:	00000e06 	br	80221e4 <alt_tse_mac_group_init+0x5f8>
                    }                
                    else {
                        tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 80221ac:	e0bfff17 	ldw	r2,-4(fp)
 80221b0:	10800217 	ldw	r2,8(r2)
 80221b4:	10800017 	ldw	r2,0(r2)
 80221b8:	100b883a 	mov	r5,r2
 80221bc:	01020174 	movhi	r4,2053
 80221c0:	21062104 	addi	r4,r4,6276
 80221c4:	8003b840 	call	8003b84 <printf>
                        tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 80221c8:	e0fffec7 	ldb	r3,-5(fp)
 80221cc:	e0bffe87 	ldb	r2,-6(fp)
 80221d0:	1885883a 	add	r2,r3,r2
 80221d4:	100b883a 	mov	r5,r2
 80221d8:	01020174 	movhi	r4,2053
 80221dc:	21062d04 	addi	r4,r4,6324
 80221e0:	8003b840 	call	8003b84 <printf>
                    }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 80221e4:	e0bffe87 	ldb	r2,-6(fp)
 80221e8:	e0fffd17 	ldw	r3,-12(fp)
 80221ec:	10800044 	addi	r2,r2,1
 80221f0:	100490ba 	slli	r2,r2,2
 80221f4:	1885883a 	add	r2,r3,r2
 80221f8:	e0ffff17 	ldw	r3,-4(fp)
 80221fc:	10c00015 	stw	r3,0(r2)
            for(j = 0; j < pmac_group->channel; j++) {
 8022200:	e0bffe83 	ldbu	r2,-6(fp)
 8022204:	10800044 	addi	r2,r2,1
 8022208:	e0bffe85 	stb	r2,-6(fp)
 802220c:	e0fffe87 	ldb	r3,-6(fp)
 8022210:	e0bffd17 	ldw	r2,-12(fp)
 8022214:	10800003 	ldbu	r2,0(r2)
 8022218:	10803fcc 	andi	r2,r2,255
 802221c:	18bed616 	blt	r3,r2,8021d78 <alt_tse_mac_group_init+0x18c>
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 8022220:	d0a07a43 	ldbu	r2,-32279(gp)
 8022224:	10803fcc 	andi	r2,r2,255
 8022228:	100890ba 	slli	r4,r2,2
 802222c:	e0fffd17 	ldw	r3,-12(fp)
 8022230:	008201b4 	movhi	r2,2054
 8022234:	2085883a 	add	r2,r4,r2
 8022238:	10fc4d15 	stw	r3,-3788(r2)
            
            mac_group_count++;
 802223c:	d0a07a43 	ldbu	r2,-32279(gp)
 8022240:	10800044 	addi	r2,r2,1
 8022244:	d0a07a45 	stb	r2,-32279(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 8022248:	e0bffd17 	ldw	r2,-12(fp)
 802224c:	10c00003 	ldbu	r3,0(r2)
 8022250:	e0bffec3 	ldbu	r2,-5(fp)
 8022254:	1885883a 	add	r2,r3,r2
 8022258:	10bfffc4 	addi	r2,r2,-1
 802225c:	e0bffec5 	stb	r2,-5(fp)
    for(i = 0; i < max_mac_system; i++) {
 8022260:	e0bffec3 	ldbu	r2,-5(fp)
 8022264:	10800044 	addi	r2,r2,1
 8022268:	e0bffec5 	stb	r2,-5(fp)
 802226c:	e0fffec7 	ldb	r3,-5(fp)
 8022270:	d0a02703 	ldbu	r2,-32612(gp)
 8022274:	10803fcc 	andi	r2,r2,255
 8022278:	18be6616 	blt	r3,r2,8021c14 <alt_tse_mac_group_init+0x28>
                        
        }
    }
    return SUCCESS;
 802227c:	0005883a 	mov	r2,zero
}
 8022280:	e037883a 	mov	sp,fp
 8022284:	dfc00117 	ldw	ra,4(sp)
 8022288:	df000017 	ldw	fp,0(sp)
 802228c:	dec00204 	addi	sp,sp,8
 8022290:	f800283a 	ret

08022294 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 8022294:	deffed04 	addi	sp,sp,-76
 8022298:	dfc01215 	stw	ra,72(sp)
 802229c:	df001115 	stw	fp,68(sp)
 80222a0:	df001104 	addi	fp,sp,68
 80222a4:	e13ff015 	stw	r4,-64(fp)
    
    alt_32 phyid; 
    alt_32 phyid2 = 0;
 80222a8:	e03fff15 	stw	zero,-4(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 80222ac:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 phy_info_count = 0;
 80222b0:	e03ffec5 	stb	zero,-5(fp)
    
    alt_tse_phy_info *pphy = 0;
 80222b4:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
 80222b8:	e03ff815 	stw	zero,-32(fp)
    alt_tse_system_info *psys = 0;
 80222bc:	e03ff715 	stw	zero,-36(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 80222c0:	e0bff017 	ldw	r2,-64(fp)
 80222c4:	10800117 	ldw	r2,4(r2)
 80222c8:	10800217 	ldw	r2,8(r2)
 80222cc:	10800017 	ldw	r2,0(r2)
 80222d0:	e0bff615 	stw	r2,-40(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 80222d4:	e0bff617 	ldw	r2,-40(fp)
 80222d8:	10801004 	addi	r2,r2,64
 80222dc:	10800037 	ldwio	r2,0(r2)
 80222e0:	e0bff515 	stw	r2,-44(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 80222e4:	e13ff017 	ldw	r4,-64(fp)
 80222e8:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 80222ec:	e0bff4c5 	stb	r2,-45(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 80222f0:	e03ffcc5 	stb	zero,-13(fp)
 80222f4:	0000c106 	br	80225fc <alt_tse_mac_get_phy+0x368>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 80222f8:	e0bff617 	ldw	r2,-40(fp)
 80222fc:	10801004 	addi	r2,r2,64
 8022300:	e0fffcc3 	ldbu	r3,-13(fp)
 8022304:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 8022308:	e0bff617 	ldw	r2,-40(fp)
 802230c:	1080a204 	addi	r2,r2,648
 8022310:	10800037 	ldwio	r2,0(r2)
 8022314:	e0bff315 	stw	r2,-52(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 8022318:	e0bff617 	ldw	r2,-40(fp)
 802231c:	1080a304 	addi	r2,r2,652
 8022320:	10800037 	ldwio	r2,0(r2)
 8022324:	e0bfff15 	stw	r2,-4(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 8022328:	e0fff317 	ldw	r3,-52(fp)
 802232c:	e0bfff17 	ldw	r2,-4(fp)
 8022330:	1880af26 	beq	r3,r2,80225f0 <alt_tse_mac_get_phy+0x35c>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 8022334:	01000704 	movi	r4,28
 8022338:	804e0840 	call	804e084 <malloc>
 802233c:	e0bff915 	stw	r2,-28(fp)
            if(!pphy) {
 8022340:	e0bff917 	ldw	r2,-28(fp)
 8022344:	1000091e 	bne	r2,zero,802236c <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 8022348:	e0bff4c7 	ldb	r2,-45(fp)
 802234c:	e0fffec7 	ldb	r3,-5(fp)
 8022350:	180d883a 	mov	r6,r3
 8022354:	100b883a 	mov	r5,r2
 8022358:	01020174 	movhi	r4,2053
 802235c:	21063c04 	addi	r4,r4,6384
 8022360:	8003b840 	call	8003b84 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 8022364:	00bfffc4 	movi	r2,-1
 8022368:	0000c406 	br	802267c <alt_tse_mac_get_phy+0x3e8>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 802236c:	e0bff917 	ldw	r2,-28(fp)
 8022370:	e0fffcc3 	ldbu	r3,-13(fp)
 8022374:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 8022378:	e0bff317 	ldw	r2,-52(fp)
 802237c:	100691ba 	slli	r3,r2,6
 8022380:	e0bfff17 	ldw	r2,-4(fp)
 8022384:	1005d2ba 	srai	r2,r2,10
 8022388:	10800fcc 	andi	r2,r2,63
 802238c:	1884b03a 	or	r2,r3,r2
 8022390:	e0bff215 	stw	r2,-56(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 8022394:	e0bfff17 	ldw	r2,-4(fp)
 8022398:	1005d13a 	srai	r2,r2,4
 802239c:	10800fcc 	andi	r2,r2,63
 80223a0:	e0bff1c5 	stb	r2,-57(fp)
            revision_number = phyid2 & 0x0f;
 80223a4:	e0bfff17 	ldw	r2,-4(fp)
 80223a8:	108003cc 	andi	r2,r2,15
 80223ac:	e0bff185 	stb	r2,-58(fp)
            
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 80223b0:	e03ffac5 	stb	zero,-21(fp)
            for(i = 0; i < phy_profile_count; i++) {
 80223b4:	e03ffb15 	stw	zero,-20(fp)
 80223b8:	00002c06 	br	802246c <alt_tse_mac_get_phy+0x1d8>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 80223bc:	e0bffb17 	ldw	r2,-20(fp)
 80223c0:	100690ba 	slli	r3,r2,2
 80223c4:	008201b4 	movhi	r2,2054
 80223c8:	1885883a 	add	r2,r3,r2
 80223cc:	10bc5117 	ldw	r2,-3772(r2)
 80223d0:	10801417 	ldw	r2,80(r2)
 80223d4:	e0fff217 	ldw	r3,-56(fp)
 80223d8:	1880211e 	bne	r3,r2,8022460 <alt_tse_mac_get_phy+0x1cc>
 80223dc:	e0bffb17 	ldw	r2,-20(fp)
 80223e0:	100690ba 	slli	r3,r2,2
 80223e4:	008201b4 	movhi	r2,2054
 80223e8:	1885883a 	add	r2,r3,r2
 80223ec:	10bc5117 	ldw	r2,-3772(r2)
 80223f0:	10801503 	ldbu	r2,84(r2)
 80223f4:	e0fff1c3 	ldbu	r3,-57(fp)
 80223f8:	10803fcc 	andi	r2,r2,255
 80223fc:	1880181e 	bne	r3,r2,8022460 <alt_tse_mac_get_phy+0x1cc>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 8022400:	e0bffb17 	ldw	r2,-20(fp)
 8022404:	100690ba 	slli	r3,r2,2
 8022408:	008201b4 	movhi	r2,2054
 802240c:	1885883a 	add	r2,r3,r2
 8022410:	10fc5117 	ldw	r3,-3772(r2)
 8022414:	e0bff917 	ldw	r2,-28(fp)
 8022418:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 802241c:	e0bffb17 	ldw	r2,-20(fp)
 8022420:	100690ba 	slli	r3,r2,2
 8022424:	008201b4 	movhi	r2,2054
 8022428:	1885883a 	add	r2,r3,r2
 802242c:	10bc5117 	ldw	r2,-3772(r2)
 8022430:	1009883a 	mov	r4,r2
 8022434:	e0bffcc3 	ldbu	r2,-13(fp)
 8022438:	e0fff4c7 	ldb	r3,-45(fp)
 802243c:	180f883a 	mov	r7,r3
 8022440:	100d883a 	mov	r6,r2
 8022444:	200b883a 	mov	r5,r4
 8022448:	01020174 	movhi	r4,2053
 802244c:	21064b04 	addi	r4,r4,6444
 8022450:	8003b840 	call	8003b84 <printf>
                    is_phy_in_profile = 1;
 8022454:	00800044 	movi	r2,1
 8022458:	e0bffac5 	stb	r2,-21(fp)
                    break;
 802245c:	00000706 	br	802247c <alt_tse_mac_get_phy+0x1e8>
            for(i = 0; i < phy_profile_count; i++) {
 8022460:	e0bffb17 	ldw	r2,-20(fp)
 8022464:	10800044 	addi	r2,r2,1
 8022468:	e0bffb15 	stw	r2,-20(fp)
 802246c:	d0a07a03 	ldbu	r2,-32280(gp)
 8022470:	10803fcc 	andi	r2,r2,255
 8022474:	e0fffb17 	ldw	r3,-20(fp)
 8022478:	18bfd016 	blt	r3,r2,80223bc <alt_tse_mac_get_phy+0x128>
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 802247c:	e0bffac3 	ldbu	r2,-21(fp)
 8022480:	10000f1e 	bne	r2,zero,80224c0 <alt_tse_mac_get_phy+0x22c>
                pphy->pphy_profile = 0;
 8022484:	e0bff917 	ldw	r2,-28(fp)
 8022488:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 802248c:	e0bffcc3 	ldbu	r2,-13(fp)
 8022490:	e0fff4c7 	ldb	r3,-45(fp)
 8022494:	180d883a 	mov	r6,r3
 8022498:	100b883a 	mov	r5,r2
 802249c:	01020174 	movhi	r4,2053
 80224a0:	21065b04 	addi	r4,r4,6508
 80224a4:	8003b840 	call	8003b84 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 80224a8:	01020174 	movhi	r4,2053
 80224ac:	21066c04 	addi	r4,r4,6576
 80224b0:	8003ca80 	call	8003ca8 <puts>
                return_value++;
 80224b4:	e0bffd17 	ldw	r2,-12(fp)
 80224b8:	10800044 	addi	r2,r2,1
 80224bc:	e0bffd15 	stw	r2,-12(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 80224c0:	e0bff217 	ldw	r2,-56(fp)
 80224c4:	100b883a 	mov	r5,r2
 80224c8:	01020174 	movhi	r4,2053
 80224cc:	21067904 	addi	r4,r4,6628
 80224d0:	8003b840 	call	8003b84 <printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 80224d4:	e0bff1c3 	ldbu	r2,-57(fp)
 80224d8:	100b883a 	mov	r5,r2
 80224dc:	01020174 	movhi	r4,2053
 80224e0:	21068404 	addi	r4,r4,6672
 80224e4:	8003b840 	call	8003b84 <printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 80224e8:	e0bff183 	ldbu	r2,-58(fp)
 80224ec:	100b883a 	mov	r5,r2
 80224f0:	01020174 	movhi	r4,2053
 80224f4:	21068f04 	addi	r4,r4,6716
 80224f8:	8003b840 	call	8003b84 <printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 80224fc:	e17ff917 	ldw	r5,-28(fp)
 8022500:	e13ff017 	ldw	r4,-64(fp)
 8022504:	80226900 	call	8022690 <alt_tse_mac_associate_phy>
 8022508:	1000341e 	bne	r2,zero,80225dc <alt_tse_mac_get_phy+0x348>
                
                pmac_info = pphy->pmac_info;
 802250c:	e0bff917 	ldw	r2,-28(fp)
 8022510:	10800617 	ldw	r2,24(r2)
 8022514:	e0bff815 	stw	r2,-32(fp)
                psys = pmac_info->psys_info;
 8022518:	e0bff817 	ldw	r2,-32(fp)
 802251c:	10800217 	ldw	r2,8(r2)
 8022520:	e0bff715 	stw	r2,-36(fp)
                
                /* Disable PHY loopback to allow Auto-Negotiation completed */
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 8022524:	d8000015 	stw	zero,0(sp)
 8022528:	01c00044 	movi	r7,1
 802252c:	01800384 	movi	r6,14
 8022530:	000b883a 	mov	r5,zero
 8022534:	e13ff917 	ldw	r4,-28(fp)
 8022538:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
                
                /* Reset auto-negotiation advertisement */
                alt_tse_phy_set_adv_1000(pphy, 1);
 802253c:	01400044 	movi	r5,1
 8022540:	e13ff917 	ldw	r4,-28(fp)
 8022544:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
                alt_tse_phy_set_adv_100(pphy, 1);
 8022548:	01400044 	movi	r5,1
 802254c:	e13ff917 	ldw	r4,-28(fp)
 8022550:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
                alt_tse_phy_set_adv_10(pphy, 1);
 8022554:	01400044 	movi	r5,1
 8022558:	e13ff917 	ldw	r4,-28(fp)
 802255c:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
                                
                /* check link connection for this PHY */
                alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 8022560:	0149c404 	movi	r5,10000
 8022564:	e13ff917 	ldw	r4,-28(fp)
 8022568:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
                
                /* Perform additional setting if there is any */
                /* Profile specific */
                if(pphy->pphy_profile) {
 802256c:	e0bff917 	ldw	r2,-28(fp)
 8022570:	10800517 	ldw	r2,20(r2)
 8022574:	10000f26 	beq	r2,zero,80225b4 <alt_tse_mac_get_phy+0x320>
                    if(pphy->pphy_profile->phy_cfg) {
 8022578:	e0bff917 	ldw	r2,-28(fp)
 802257c:	10800517 	ldw	r2,20(r2)
 8022580:	10801717 	ldw	r2,92(r2)
 8022584:	10000b26 	beq	r2,zero,80225b4 <alt_tse_mac_get_phy+0x320>
                        tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 8022588:	e0bff917 	ldw	r2,-28(fp)
 802258c:	10800517 	ldw	r2,20(r2)
 8022590:	100b883a 	mov	r5,r2
 8022594:	01020174 	movhi	r4,2053
 8022598:	21069a04 	addi	r4,r4,6760
 802259c:	8003b840 	call	8003b84 <printf>
                        pphy->pphy_profile->phy_cfg(pmac_group_base);
 80225a0:	e0bff917 	ldw	r2,-28(fp)
 80225a4:	10800517 	ldw	r2,20(r2)
 80225a8:	10801717 	ldw	r2,92(r2)
 80225ac:	e13ff617 	ldw	r4,-40(fp)
 80225b0:	103ee83a 	callr	r2
                    }
                }
                
                /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
                /* Individual PHY specific */
                if(psys->tse_phy_cfg) {
 80225b4:	e0bff717 	ldw	r2,-36(fp)
 80225b8:	10801217 	ldw	r2,72(r2)
 80225bc:	10000726 	beq	r2,zero,80225dc <alt_tse_mac_get_phy+0x348>
                    tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 80225c0:	01020174 	movhi	r4,2053
 80225c4:	2106a804 	addi	r4,r4,6816
 80225c8:	8003ca80 	call	8003ca8 <puts>
                    psys->tse_phy_cfg(pmac_group_base);
 80225cc:	e0bff717 	ldw	r2,-36(fp)
 80225d0:	10801217 	ldw	r2,72(r2)
 80225d4:	e13ff617 	ldw	r4,-40(fp)
 80225d8:	103ee83a 	callr	r2
                }
            }
            
            tse_dprintf(6, "\n");
 80225dc:	01000284 	movi	r4,10
 80225e0:	8003bc40 	call	8003bc4 <putchar>
                
            phy_info_count++;
 80225e4:	e0bffec3 	ldbu	r2,-5(fp)
 80225e8:	10800044 	addi	r2,r2,1
 80225ec:	e0bffec5 	stb	r2,-5(fp)
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 80225f0:	e0bffcc3 	ldbu	r2,-13(fp)
 80225f4:	10800044 	addi	r2,r2,1
 80225f8:	e0bffcc5 	stb	r2,-13(fp)
 80225fc:	e0bffcc3 	ldbu	r2,-13(fp)
 8022600:	10800830 	cmpltui	r2,r2,32
 8022604:	103f3c1e 	bne	r2,zero,80222f8 <alt_tse_mac_get_phy+0x64>
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 8022608:	e0bff017 	ldw	r2,-64(fp)
 802260c:	10800003 	ldbu	r2,0(r2)
 8022610:	10c03fcc 	andi	r3,r2,255
 8022614:	e0bffec7 	ldb	r2,-5(fp)
 8022618:	18801326 	beq	r3,r2,8022668 <alt_tse_mac_get_phy+0x3d4>
        if(phy_info_count == 0) {
 802261c:	e0bffec7 	ldb	r2,-5(fp)
 8022620:	1000061e 	bne	r2,zero,802263c <alt_tse_mac_get_phy+0x3a8>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 8022624:	e0bff4c7 	ldb	r2,-45(fp)
 8022628:	100b883a 	mov	r5,r2
 802262c:	01020174 	movhi	r4,2053
 8022630:	2106b604 	addi	r4,r4,6872
 8022634:	8003b840 	call	8003b84 <printf>
 8022638:	00000b06 	br	8022668 <alt_tse_mac_get_phy+0x3d4>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 802263c:	e0fff4c7 	ldb	r3,-45(fp)
 8022640:	e13ffec7 	ldb	r4,-5(fp)
 8022644:	e0bff017 	ldw	r2,-64(fp)
 8022648:	10800003 	ldbu	r2,0(r2)
 802264c:	10803fcc 	andi	r2,r2,255
 8022650:	100f883a 	mov	r7,r2
 8022654:	200d883a 	mov	r6,r4
 8022658:	180b883a 	mov	r5,r3
 802265c:	01020174 	movhi	r4,2053
 8022660:	2106c204 	addi	r4,r4,6920
 8022664:	8003b840 	call	8003b84 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 8022668:	e0bff617 	ldw	r2,-40(fp)
 802266c:	10801004 	addi	r2,r2,64
 8022670:	e0fff517 	ldw	r3,-44(fp)
 8022674:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
 8022678:	e0bffd17 	ldw	r2,-12(fp)
}
 802267c:	e037883a 	mov	sp,fp
 8022680:	dfc00117 	ldw	ra,4(sp)
 8022684:	df000017 	ldw	fp,0(sp)
 8022688:	dec00204 	addi	sp,sp,8
 802268c:	f800283a 	ret

08022690 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 8022690:	defff604 	addi	sp,sp,-40
 8022694:	dfc00915 	stw	ra,36(sp)
 8022698:	df000815 	stw	fp,32(sp)
 802269c:	df000804 	addi	fp,sp,32
 80226a0:	e13ff915 	stw	r4,-28(fp)
 80226a4:	e17ff815 	stw	r5,-32(fp)
    
    alt_32 i;
    alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 80226a8:	e03ffd15 	stw	zero,-12(fp)
    
    alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 80226ac:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_info *pmac_info = 0;
 80226b0:	e03ffb15 	stw	zero,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 80226b4:	e03ffac5 	stb	zero,-21(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 80226b8:	e13ff917 	ldw	r4,-28(fp)
 80226bc:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 80226c0:	e0bffa85 	stb	r2,-22(fp)
    alt_8 sys_info_index = 0;
 80226c4:	e03ffa45 	stb	zero,-23(fp)
    
    is_mapped = 0;
 80226c8:	e03fffc5 	stb	zero,-1(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 80226cc:	e03ffe15 	stw	zero,-8(fp)
 80226d0:	00002b06 	br	8022780 <alt_tse_mac_associate_phy+0xf0>
        pmac_info = pmac_group->pmac_info[i];
 80226d4:	e0fff917 	ldw	r3,-28(fp)
 80226d8:	e0bffe17 	ldw	r2,-8(fp)
 80226dc:	10800044 	addi	r2,r2,1
 80226e0:	100490ba 	slli	r2,r2,2
 80226e4:	1885883a 	add	r2,r3,r2
 80226e8:	10800017 	ldw	r2,0(r2)
 80226ec:	e0bffb15 	stw	r2,-20(fp)
        psys = pmac_info->psys_info;
 80226f0:	e0bffb17 	ldw	r2,-20(fp)
 80226f4:	10800217 	ldw	r2,8(r2)
 80226f8:	e0bffc15 	stw	r2,-16(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 80226fc:	e0bffc17 	ldw	r2,-16(fp)
 8022700:	10c01117 	ldw	r3,68(r2)
 8022704:	e0bff817 	ldw	r2,-32(fp)
 8022708:	10800003 	ldbu	r2,0(r2)
 802270c:	10803fcc 	andi	r2,r2,255
 8022710:	1880181e 	bne	r3,r2,8022774 <alt_tse_mac_associate_phy+0xe4>
            mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8022714:	e13ffb17 	ldw	r4,-20(fp)
 8022718:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 802271c:	e0bffac5 	stb	r2,-21(fp)
            sys_info_index = alt_tse_get_system_index(psys);
 8022720:	e13ffc17 	ldw	r4,-16(fp)
 8022724:	80206b40 	call	80206b4 <alt_tse_get_system_index>
 8022728:	e0bffa45 	stb	r2,-23(fp)
            
            pmac_info->pphy_info = pphy;
 802272c:	e0bffb17 	ldw	r2,-20(fp)
 8022730:	e0fff817 	ldw	r3,-32(fp)
 8022734:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
 8022738:	e0bff817 	ldw	r2,-32(fp)
 802273c:	e0fffb17 	ldw	r3,-20(fp)
 8022740:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 8022744:	e0bffa87 	ldb	r2,-22(fp)
 8022748:	e0fffac7 	ldb	r3,-21(fp)
 802274c:	e13ffa47 	ldb	r4,-23(fp)
 8022750:	200f883a 	mov	r7,r4
 8022754:	180d883a 	mov	r6,r3
 8022758:	100b883a 	mov	r5,r2
 802275c:	01020174 	movhi	r4,2053
 8022760:	2106e104 	addi	r4,r4,7044
 8022764:	8003b840 	call	8003b84 <printf>
            is_mapped = 1;
 8022768:	00800044 	movi	r2,1
 802276c:	e0bfffc5 	stb	r2,-1(fp)
            break;
 8022770:	00000806 	br	8022794 <alt_tse_mac_associate_phy+0x104>
    for(i = 0; i < pmac_group->channel; i++) {
 8022774:	e0bffe17 	ldw	r2,-8(fp)
 8022778:	10800044 	addi	r2,r2,1
 802277c:	e0bffe15 	stw	r2,-8(fp)
 8022780:	e0bff917 	ldw	r2,-28(fp)
 8022784:	10800003 	ldbu	r2,0(r2)
 8022788:	10803fcc 	andi	r2,r2,255
 802278c:	e0fffe17 	ldw	r3,-8(fp)
 8022790:	18bfd016 	blt	r3,r2,80226d4 <alt_tse_mac_associate_phy+0x44>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 8022794:	e0bfffc3 	ldbu	r2,-1(fp)
 8022798:	10003c1e 	bne	r2,zero,802288c <alt_tse_mac_associate_phy+0x1fc>
        for(i = 0; i < pmac_group->channel; i++) {
 802279c:	e03ffe15 	stw	zero,-8(fp)
 80227a0:	00003506 	br	8022878 <alt_tse_mac_associate_phy+0x1e8>
            pmac_info = pmac_group->pmac_info[i];
 80227a4:	e0fff917 	ldw	r3,-28(fp)
 80227a8:	e0bffe17 	ldw	r2,-8(fp)
 80227ac:	10800044 	addi	r2,r2,1
 80227b0:	100490ba 	slli	r2,r2,2
 80227b4:	1885883a 	add	r2,r3,r2
 80227b8:	10800017 	ldw	r2,0(r2)
 80227bc:	e0bffb15 	stw	r2,-20(fp)
            psys = pmac_info->psys_info;
 80227c0:	e0bffb17 	ldw	r2,-20(fp)
 80227c4:	10800217 	ldw	r2,8(r2)
 80227c8:	e0bffc15 	stw	r2,-16(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_msgdma_tx == 0) || (psys->tse_msgdma_rx == 0)){
 80227cc:	e0bffc17 	ldw	r2,-16(fp)
 80227d0:	10800617 	ldw	r2,24(r2)
 80227d4:	10002426 	beq	r2,zero,8022868 <alt_tse_mac_associate_phy+0x1d8>
 80227d8:	e0bffc17 	ldw	r2,-16(fp)
 80227dc:	10800717 	ldw	r2,28(r2)
 80227e0:	10002126 	beq	r2,zero,8022868 <alt_tse_mac_associate_phy+0x1d8>
                continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 80227e4:	e0bffc17 	ldw	r2,-16(fp)
 80227e8:	10801117 	ldw	r2,68(r2)
 80227ec:	10bfffd8 	cmpnei	r2,r2,-1
 80227f0:	10001e1e 	bne	r2,zero,802286c <alt_tse_mac_associate_phy+0x1dc>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 80227f4:	e13ffb17 	ldw	r4,-20(fp)
 80227f8:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 80227fc:	e0bffac5 	stb	r2,-21(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 8022800:	e13ffc17 	ldw	r4,-16(fp)
 8022804:	80206b40 	call	80206b4 <alt_tse_get_system_index>
 8022808:	e0bffa45 	stb	r2,-23(fp)
                
                pmac_info->pphy_info = pphy;
 802280c:	e0bffb17 	ldw	r2,-20(fp)
 8022810:	e0fff817 	ldw	r3,-32(fp)
 8022814:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
 8022818:	e0bff817 	ldw	r2,-32(fp)
 802281c:	e0fffb17 	ldw	r3,-20(fp)
 8022820:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 8022824:	e0bff817 	ldw	r2,-32(fp)
 8022828:	10800003 	ldbu	r2,0(r2)
 802282c:	10c03fcc 	andi	r3,r2,255
 8022830:	e0bffc17 	ldw	r2,-16(fp)
 8022834:	10c01115 	stw	r3,68(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 8022838:	e0bffa87 	ldb	r2,-22(fp)
 802283c:	e0fffac7 	ldb	r3,-21(fp)
 8022840:	e13ffa47 	ldb	r4,-23(fp)
 8022844:	200f883a 	mov	r7,r4
 8022848:	180d883a 	mov	r6,r3
 802284c:	100b883a 	mov	r5,r2
 8022850:	01020174 	movhi	r4,2053
 8022854:	2106f104 	addi	r4,r4,7108
 8022858:	8003b840 	call	8003b84 <printf>
                is_mapped = 1;
 802285c:	00800044 	movi	r2,1
 8022860:	e0bfffc5 	stb	r2,-1(fp)
                break;
 8022864:	00000906 	br	802288c <alt_tse_mac_associate_phy+0x1fc>
                continue;
 8022868:	0001883a 	nop
        for(i = 0; i < pmac_group->channel; i++) {
 802286c:	e0bffe17 	ldw	r2,-8(fp)
 8022870:	10800044 	addi	r2,r2,1
 8022874:	e0bffe15 	stw	r2,-8(fp)
 8022878:	e0bff917 	ldw	r2,-28(fp)
 802287c:	10800003 	ldbu	r2,0(r2)
 8022880:	10803fcc 	andi	r2,r2,255
 8022884:	e0fffe17 	ldw	r3,-8(fp)
 8022888:	18bfc616 	blt	r3,r2,80227a4 <alt_tse_mac_associate_phy+0x114>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 802288c:	e0bfffc3 	ldbu	r2,-1(fp)
 8022890:	1000091e 	bne	r2,zero,80228b8 <alt_tse_mac_associate_phy+0x228>
        pphy->pmac_info = 0;
 8022894:	e0bff817 	ldw	r2,-32(fp)
 8022898:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 802289c:	e0bffa87 	ldb	r2,-22(fp)
 80228a0:	100b883a 	mov	r5,r2
 80228a4:	01020174 	movhi	r4,2053
 80228a8:	21070204 	addi	r4,r4,7176
 80228ac:	8003b840 	call	8003b84 <printf>
        return_value = TSE_PHY_MAP_ERROR;
 80228b0:	00bfffc4 	movi	r2,-1
 80228b4:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return return_value;
 80228b8:	e0bffd17 	ldw	r2,-12(fp)
}
 80228bc:	e037883a 	mov	sp,fp
 80228c0:	dfc00117 	ldw	ra,4(sp)
 80228c4:	df000017 	ldw	fp,0(sp)
 80228c8:	dec00204 	addi	sp,sp,8
 80228cc:	f800283a 	ret

080228d0 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 80228d0:	defff804 	addi	sp,sp,-32
 80228d4:	dfc00715 	stw	ra,28(sp)
 80228d8:	df000615 	stw	fp,24(sp)
 80228dc:	df000604 	addi	fp,sp,24
 80228e0:	e13ffa15 	stw	r4,-24(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 80228e4:	e0bffa17 	ldw	r2,-24(fp)
 80228e8:	10800217 	ldw	r2,8(r2)
 80228ec:	e0bffd15 	stw	r2,-12(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 80228f0:	e0bffd17 	ldw	r2,-12(fp)
 80228f4:	10800017 	ldw	r2,0(r2)
 80228f8:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 80228fc:	e0bffa17 	ldw	r2,-24(fp)
 8022900:	10800317 	ldw	r2,12(r2)
 8022904:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8022908:	e13ffa17 	ldw	r4,-24(fp)
 802290c:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8022910:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 8022914:	e13ffe17 	ldw	r4,-8(fp)
 8022918:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 802291c:	e0bffc85 	stb	r2,-14(fp)

    if(psys->tse_pcs_ena) {
 8022920:	e0bffd17 	ldw	r2,-12(fp)
 8022924:	108004c3 	ldbu	r2,19(r2)
 8022928:	10803fcc 	andi	r2,r2,255
 802292c:	10002c26 	beq	r2,zero,80229e0 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 8022930:	e0bffc87 	ldb	r2,-14(fp)
 8022934:	e0fffcc7 	ldb	r3,-13(fp)
 8022938:	180d883a 	mov	r6,r3
 802293c:	100b883a 	mov	r5,r2
 8022940:	01020174 	movhi	r4,2053
 8022944:	21073304 	addi	r4,r4,7372
 8022948:	8003b840 	call	8003b84 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 802294c:	e0bfff17 	ldw	r2,-4(fp)
 8022950:	10808004 	addi	r2,r2,512
 8022954:	10801404 	addi	r2,r2,80
 8022958:	10800037 	ldwio	r2,0(r2)
 802295c:	e0bffb15 	stw	r2,-20(fp)
        
        if(psys->tse_pcs_sgmii) {
 8022960:	e0bffd17 	ldw	r2,-12(fp)
 8022964:	10800503 	ldbu	r2,20(r2)
 8022968:	10803fcc 	andi	r2,r2,255
 802296c:	10000e26 	beq	r2,zero,80229a8 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 8022970:	e0bffc87 	ldb	r2,-14(fp)
 8022974:	e0fffcc7 	ldb	r3,-13(fp)
 8022978:	180d883a 	mov	r6,r3
 802297c:	100b883a 	mov	r5,r2
 8022980:	01020174 	movhi	r4,2053
 8022984:	21074104 	addi	r4,r4,7428
 8022988:	8003b840 	call	8003b84 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 802298c:	e0bfff17 	ldw	r2,-4(fp)
 8022990:	10808004 	addi	r2,r2,512
 8022994:	10801404 	addi	r2,r2,80
 8022998:	e0fffb17 	ldw	r3,-20(fp)
 802299c:	18c000d4 	ori	r3,r3,3
 80229a0:	10c00035 	stwio	r3,0(r2)
 80229a4:	00000e06 	br	80229e0 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 80229a8:	e0bffc87 	ldb	r2,-14(fp)
 80229ac:	e0fffcc7 	ldb	r3,-13(fp)
 80229b0:	180d883a 	mov	r6,r3
 80229b4:	100b883a 	mov	r5,r2
 80229b8:	01020174 	movhi	r4,2053
 80229bc:	21074d04 	addi	r4,r4,7476
 80229c0:	8003b840 	call	8003b84 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 80229c4:	e0bfff17 	ldw	r2,-4(fp)
 80229c8:	10808004 	addi	r2,r2,512
 80229cc:	10801404 	addi	r2,r2,80
 80229d0:	e13ffb17 	ldw	r4,-20(fp)
 80229d4:	00ffff04 	movi	r3,-4
 80229d8:	20c6703a 	and	r3,r4,r3
 80229dc:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 80229e0:	0005883a 	mov	r2,zero
}
 80229e4:	e037883a 	mov	sp,fp
 80229e8:	dfc00117 	ldw	ra,4(sp)
 80229ec:	df000017 	ldw	fp,0(sp)
 80229f0:	dec00204 	addi	sp,sp,8
 80229f4:	f800283a 	ret

080229f8 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 80229f8:	defffb04 	addi	sp,sp,-20
 80229fc:	dfc00415 	stw	ra,16(sp)
 8022a00:	df000315 	stw	fp,12(sp)
 8022a04:	df000304 	addi	fp,sp,12
    alt_8 i = 0;
 8022a08:	e03fffc5 	stb	zero,-1(fp)
    alt_8 j = 0;
 8022a0c:	e03fff85 	stb	zero,-2(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 8022a10:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 8022a14:	e03ffd15 	stw	zero,-12(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 8022a18:	80217540 	call	8021754 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 8022a1c:	8021a1c0 	call	8021a1c <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 8022a20:	8021bec0 	call	8021bec <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 8022a24:	e03fffc5 	stb	zero,-1(fp)
 8022a28:	00002c06 	br	8022adc <alt_tse_phy_init+0xe4>
        pmac_group = pmac_groups[i];
 8022a2c:	e0bfffc7 	ldb	r2,-1(fp)
 8022a30:	100690ba 	slli	r3,r2,2
 8022a34:	008201b4 	movhi	r2,2054
 8022a38:	1885883a 	add	r2,r3,r2
 8022a3c:	10bc4d17 	ldw	r2,-3788(r2)
 8022a40:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 8022a44:	e0bffe17 	ldw	r2,-8(fp)
 8022a48:	10800117 	ldw	r2,4(r2)
 8022a4c:	10800217 	ldw	r2,8(r2)
 8022a50:	10800303 	ldbu	r2,12(r2)
 8022a54:	10803fcc 	andi	r2,r2,255
 8022a58:	10000326 	beq	r2,zero,8022a68 <alt_tse_phy_init+0x70>
            
            /* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 8022a5c:	e13ffe17 	ldw	r4,-8(fp)
 8022a60:	80222940 	call	8022294 <alt_tse_mac_get_phy>
 8022a64:	00000706 	br	8022a84 <alt_tse_phy_init+0x8c>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 8022a68:	e0bfffc7 	ldb	r2,-1(fp)
 8022a6c:	e0ffff87 	ldb	r3,-2(fp)
 8022a70:	180d883a 	mov	r6,r3
 8022a74:	100b883a 	mov	r5,r2
 8022a78:	01020174 	movhi	r4,2053
 8022a7c:	21075904 	addi	r4,r4,7524
 8022a80:	8003b840 	call	8003b84 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 8022a84:	e03fff85 	stb	zero,-2(fp)
 8022a88:	00000c06 	br	8022abc <alt_tse_phy_init+0xc4>
            pmac_info = pmac_group->pmac_info[j];
 8022a8c:	e0bfff87 	ldb	r2,-2(fp)
 8022a90:	e0fffe17 	ldw	r3,-8(fp)
 8022a94:	10800044 	addi	r2,r2,1
 8022a98:	100490ba 	slli	r2,r2,2
 8022a9c:	1885883a 	add	r2,r3,r2
 8022aa0:	10800017 	ldw	r2,0(r2)
 8022aa4:	e0bffd15 	stw	r2,-12(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 8022aa8:	e13ffd17 	ldw	r4,-12(fp)
 8022aac:	80228d00 	call	80228d0 <alt_tse_phy_cfg_pcs>
        for(j = 0; j < pmac_group->channel; j++) {
 8022ab0:	e0bfff83 	ldbu	r2,-2(fp)
 8022ab4:	10800044 	addi	r2,r2,1
 8022ab8:	e0bfff85 	stb	r2,-2(fp)
 8022abc:	e0ffff87 	ldb	r3,-2(fp)
 8022ac0:	e0bffe17 	ldw	r2,-8(fp)
 8022ac4:	10800003 	ldbu	r2,0(r2)
 8022ac8:	10803fcc 	andi	r2,r2,255
 8022acc:	18bfef16 	blt	r3,r2,8022a8c <alt_tse_phy_init+0x94>
    for(i = 0; i < mac_group_count; i++) {
 8022ad0:	e0bfffc3 	ldbu	r2,-1(fp)
 8022ad4:	10800044 	addi	r2,r2,1
 8022ad8:	e0bfffc5 	stb	r2,-1(fp)
 8022adc:	e0ffffc7 	ldb	r3,-1(fp)
 8022ae0:	d0a07a43 	ldbu	r2,-32279(gp)
 8022ae4:	10803fcc 	andi	r2,r2,255
 8022ae8:	18bfd016 	blt	r3,r2,8022a2c <alt_tse_phy_init+0x34>
        }
    }
                
    return SUCCESS;
 8022aec:	0005883a 	mov	r2,zero
}
 8022af0:	e037883a 	mov	sp,fp
 8022af4:	dfc00117 	ldw	ra,4(sp)
 8022af8:	df000017 	ldw	fp,0(sp)
 8022afc:	dec00204 	addi	sp,sp,8
 8022b00:	f800283a 	ret

08022b04 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 8022b04:	defff704 	addi	sp,sp,-36
 8022b08:	dfc00815 	stw	ra,32(sp)
 8022b0c:	df000715 	stw	fp,28(sp)
 8022b10:	df000704 	addi	fp,sp,28
 8022b14:	e13ffb15 	stw	r4,-20(fp)
 8022b18:	e17ffa15 	stw	r5,-24(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 8022b1c:	e0bffb17 	ldw	r2,-20(fp)
 8022b20:	10800617 	ldw	r2,24(r2)
 8022b24:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 8022b28:	e0bfff17 	ldw	r2,-4(fp)
 8022b2c:	10800317 	ldw	r2,12(r2)
 8022b30:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8022b34:	e13fff17 	ldw	r4,-4(fp)
 8022b38:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8022b3c:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 8022b40:	e13ffe17 	ldw	r4,-8(fp)
 8022b44:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8022b48:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 8022b4c:	e13ffb17 	ldw	r4,-20(fp)
 8022b50:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 8022b54:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8022b58:	e0bffb17 	ldw	r2,-20(fp)
 8022b5c:	10800003 	ldbu	r2,0(r2)
 8022b60:	10803fcc 	andi	r2,r2,255
 8022b64:	100b883a 	mov	r5,r2
 8022b68:	e13ffb17 	ldw	r4,-20(fp)
 8022b6c:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 8022b70:	01c00044 	movi	r7,1
 8022b74:	018000c4 	movi	r6,3
 8022b78:	01400044 	movi	r5,1
 8022b7c:	e13ffb17 	ldw	r4,-20(fp)
 8022b80:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022b84:	10000d1e 	bne	r2,zero,8022bbc <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 8022b88:	e0bffc87 	ldb	r2,-14(fp)
 8022b8c:	e0fffcc7 	ldb	r3,-13(fp)
 8022b90:	180d883a 	mov	r6,r3
 8022b94:	100b883a 	mov	r5,r2
 8022b98:	01020174 	movhi	r4,2053
 8022b9c:	21076f04 	addi	r4,r4,7612
 8022ba0:	8003b840 	call	8003b84 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022ba4:	e0bffc43 	ldbu	r2,-15(fp)
 8022ba8:	100b883a 	mov	r5,r2
 8022bac:	e13ffb17 	ldw	r4,-20(fp)
 8022bb0:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 8022bb4:	00bfff84 	movi	r2,-2
 8022bb8:	00003e06 	br	8022cb4 <alt_tse_phy_restart_an+0x1b0>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 8022bbc:	00800044 	movi	r2,1
 8022bc0:	d8800015 	stw	r2,0(sp)
 8022bc4:	01c00044 	movi	r7,1
 8022bc8:	01800304 	movi	r6,12
 8022bcc:	000b883a 	mov	r5,zero
 8022bd0:	e13ffb17 	ldw	r4,-20(fp)
 8022bd4:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 8022bd8:	00800044 	movi	r2,1
 8022bdc:	d8800015 	stw	r2,0(sp)
 8022be0:	01c00044 	movi	r7,1
 8022be4:	01800244 	movi	r6,9
 8022be8:	000b883a 	mov	r5,zero
 8022bec:	e13ffb17 	ldw	r4,-20(fp)
 8022bf0:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 8022bf4:	e0bffc87 	ldb	r2,-14(fp)
 8022bf8:	e0fffcc7 	ldb	r3,-13(fp)
 8022bfc:	180d883a 	mov	r6,r3
 8022c00:	100b883a 	mov	r5,r2
 8022c04:	01020174 	movhi	r4,2053
 8022c08:	21077f04 	addi	r4,r4,7676
 8022c0c:	8003b840 	call	8003b84 <printf>
    
    alt_32 timeout = 0;
 8022c10:	e03ffd15 	stw	zero,-12(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 8022c14:	00001506 	br	8022c6c <alt_tse_phy_restart_an+0x168>
        if(timeout++ > timeout_threshold) {
 8022c18:	e0bffd17 	ldw	r2,-12(fp)
 8022c1c:	10c00044 	addi	r3,r2,1
 8022c20:	e0fffd15 	stw	r3,-12(fp)
 8022c24:	1007883a 	mov	r3,r2
 8022c28:	e0bffa17 	ldw	r2,-24(fp)
 8022c2c:	10c00d2e 	bgeu	r2,r3,8022c64 <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 8022c30:	e0bffc87 	ldb	r2,-14(fp)
 8022c34:	e0fffcc7 	ldb	r3,-13(fp)
 8022c38:	180d883a 	mov	r6,r3
 8022c3c:	100b883a 	mov	r5,r2
 8022c40:	01020174 	movhi	r4,2053
 8022c44:	21079104 	addi	r4,r4,7748
 8022c48:	8003b840 	call	8003b84 <printf>
           
           /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022c4c:	e0bffc43 	ldbu	r2,-15(fp)
 8022c50:	100b883a 	mov	r5,r2
 8022c54:	e13ffb17 	ldw	r4,-20(fp)
 8022c58:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
           
           return TSE_PHY_AN_NOT_COMPLETE;
 8022c5c:	00bfffc4 	movi	r2,-1
 8022c60:	00001406 	br	8022cb4 <alt_tse_phy_restart_an+0x1b0>
        }
        usleep(2000);
 8022c64:	0101f404 	movi	r4,2000
 8022c68:	803f9040 	call	803f904 <usleep>
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 8022c6c:	01c00044 	movi	r7,1
 8022c70:	01800144 	movi	r6,5
 8022c74:	01400044 	movi	r5,1
 8022c78:	e13ffb17 	ldw	r4,-20(fp)
 8022c7c:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022c80:	103fe526 	beq	r2,zero,8022c18 <alt_tse_phy_restart_an+0x114>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 8022c84:	e0bffc87 	ldb	r2,-14(fp)
 8022c88:	e0fffcc7 	ldb	r3,-13(fp)
 8022c8c:	180d883a 	mov	r6,r3
 8022c90:	100b883a 	mov	r5,r2
 8022c94:	01020174 	movhi	r4,2053
 8022c98:	21079d04 	addi	r4,r4,7796
 8022c9c:	8003b840 	call	8003b84 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022ca0:	e0bffc43 	ldbu	r2,-15(fp)
 8022ca4:	100b883a 	mov	r5,r2
 8022ca8:	e13ffb17 	ldw	r4,-20(fp)
 8022cac:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 8022cb0:	0005883a 	mov	r2,zero
}
 8022cb4:	e037883a 	mov	sp,fp
 8022cb8:	dfc00117 	ldw	ra,4(sp)
 8022cbc:	df000017 	ldw	fp,0(sp)
 8022cc0:	dec00204 	addi	sp,sp,8
 8022cc4:	f800283a 	ret

08022cc8 <alt_tse_phy_check_link>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold)
{
 8022cc8:	defff804 	addi	sp,sp,-32
 8022ccc:	dfc00715 	stw	ra,28(sp)
 8022cd0:	df000615 	stw	fp,24(sp)
 8022cd4:	df000604 	addi	fp,sp,24
 8022cd8:	e13ffb15 	stw	r4,-20(fp)
 8022cdc:	e17ffa15 	stw	r5,-24(fp)
    alt_32 timeout=0;
 8022ce0:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 8022ce4:	e0bffb17 	ldw	r2,-20(fp)
 8022ce8:	10800617 	ldw	r2,24(r2)
 8022cec:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 8022cf0:	e0bffe17 	ldw	r2,-8(fp)
 8022cf4:	10800317 	ldw	r2,12(r2)
 8022cf8:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8022cfc:	e13ffe17 	ldw	r4,-8(fp)
 8022d00:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8022d04:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 8022d08:	e13ffd17 	ldw	r4,-12(fp)
 8022d0c:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8022d10:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 8022d14:	e13ffb17 	ldw	r4,-20(fp)
 8022d18:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 8022d1c:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8022d20:	e0bffb17 	ldw	r2,-20(fp)
 8022d24:	10800003 	ldbu	r2,0(r2)
 8022d28:	10803fcc 	andi	r2,r2,255
 8022d2c:	100b883a 	mov	r5,r2
 8022d30:	e13ffb17 	ldw	r4,-20(fp)
 8022d34:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 8022d38:	e0bffc87 	ldb	r2,-14(fp)
 8022d3c:	e0fffcc7 	ldb	r3,-13(fp)
 8022d40:	180d883a 	mov	r6,r3
 8022d44:	100b883a 	mov	r5,r2
 8022d48:	01020174 	movhi	r4,2053
 8022d4c:	2107a904 	addi	r4,r4,7844
 8022d50:	8003b840 	call	8003b84 <printf>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 8022d54:	00002106 	br	8022ddc <alt_tse_phy_check_link+0x114>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
    {                 
        if (timeout++ > timeout_threshold) 
 8022d58:	e0bfff17 	ldw	r2,-4(fp)
 8022d5c:	10c00044 	addi	r3,r2,1
 8022d60:	e0ffff15 	stw	r3,-4(fp)
 8022d64:	1007883a 	mov	r3,r2
 8022d68:	e0bffa17 	ldw	r2,-24(fp)
 8022d6c:	10c0192e 	bgeu	r2,r3,8022dd4 <alt_tse_phy_check_link+0x10c>
        {    
          tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 8022d70:	e0bffc87 	ldb	r2,-14(fp)
 8022d74:	e0fffcc7 	ldb	r3,-13(fp)
 8022d78:	180d883a 	mov	r6,r3
 8022d7c:	100b883a 	mov	r5,r2
 8022d80:	01020174 	movhi	r4,2053
 8022d84:	2107b404 	addi	r4,r4,7888
 8022d88:	8003b840 	call	8003b84 <printf>
          /* restart Auto-Negotiation */
          /* if Auto-Negotiation still cannot complete, then go to next PHY */
          if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE)
 8022d8c:	e17ffa17 	ldw	r5,-24(fp)
 8022d90:	e13ffb17 	ldw	r4,-20(fp)
 8022d94:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
 8022d98:	10bfffd8 	cmpnei	r2,r2,-1
 8022d9c:	10000d1e 	bne	r2,zero,8022dd4 <alt_tse_phy_check_link+0x10c>
          {
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 8022da0:	e0bffc87 	ldb	r2,-14(fp)
 8022da4:	e0fffcc7 	ldb	r3,-13(fp)
 8022da8:	180d883a 	mov	r6,r3
 8022dac:	100b883a 	mov	r5,r2
 8022db0:	01020174 	movhi	r4,2053
 8022db4:	2107c804 	addi	r4,r4,7968
 8022db8:	8003b840 	call	8003b84 <printf>
            
            /* Restore previous MDIO address */
            alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022dbc:	e0bffc43 	ldbu	r2,-15(fp)
 8022dc0:	100b883a 	mov	r5,r2
 8022dc4:	e13ffb17 	ldw	r4,-20(fp)
 8022dc8:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
            return TSE_PHY_AN_NOT_COMPLETE;
 8022dcc:	00bfffc4 	movi	r2,-1
 8022dd0:	00001a06 	br	8022e3c <alt_tse_phy_check_link+0x174>
          } 
        }   
        usleep(1000);        
 8022dd4:	0100fa04 	movi	r4,1000
 8022dd8:	803f9040 	call	803f904 <usleep>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 8022ddc:	01c00044 	movi	r7,1
 8022de0:	01800384 	movi	r6,14
 8022de4:	000b883a 	mov	r5,zero
 8022de8:	e13ffb17 	ldw	r4,-20(fp)
 8022dec:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022df0:	103fd91e 	bne	r2,zero,8022d58 <alt_tse_phy_check_link+0x90>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
 8022df4:	01c00044 	movi	r7,1
 8022df8:	01800144 	movi	r6,5
 8022dfc:	01400044 	movi	r5,1
 8022e00:	e13ffb17 	ldw	r4,-20(fp)
 8022e04:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 8022e08:	103fd326 	beq	r2,zero,8022d58 <alt_tse_phy_check_link+0x90>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 8022e0c:	e0bffc87 	ldb	r2,-14(fp)
 8022e10:	e0fffcc7 	ldb	r3,-13(fp)
 8022e14:	180d883a 	mov	r6,r3
 8022e18:	100b883a 	mov	r5,r2
 8022e1c:	01020174 	movhi	r4,2053
 8022e20:	2107d504 	addi	r4,r4,8020
 8022e24:	8003b840 	call	8003b84 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022e28:	e0bffc43 	ldbu	r2,-15(fp)
 8022e2c:	100b883a 	mov	r5,r2
 8022e30:	e13ffb17 	ldw	r4,-20(fp)
 8022e34:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 8022e38:	0005883a 	mov	r2,zero
}
 8022e3c:	e037883a 	mov	sp,fp
 8022e40:	dfc00117 	ldw	ra,4(sp)
 8022e44:	df000017 	ldw	fp,0(sp)
 8022e48:	dec00204 	addi	sp,sp,8
 8022e4c:	f800283a 	ret

08022e50 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 8022e50:	defff904 	addi	sp,sp,-28
 8022e54:	dfc00615 	stw	ra,24(sp)
 8022e58:	df000515 	stw	fp,20(sp)
 8022e5c:	df000504 	addi	fp,sp,20
 8022e60:	e13ffb15 	stw	r4,-20(fp)
    alt_32 return_value = TSE_PHY_AN_COMPLETE;
 8022e64:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 8022e68:	e0bffb17 	ldw	r2,-20(fp)
 8022e6c:	10800617 	ldw	r2,24(r2)
 8022e70:	e0bffd15 	stw	r2,-12(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 8022e74:	e0bffd17 	ldw	r2,-12(fp)
 8022e78:	10800317 	ldw	r2,12(r2)
 8022e7c:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8022e80:	e13ffd17 	ldw	r4,-12(fp)
 8022e84:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8022e88:	e0bffe45 	stb	r2,-7(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 8022e8c:	e13ffc17 	ldw	r4,-16(fp)
 8022e90:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8022e94:	e0bffe85 	stb	r2,-6(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 8022e98:	e13ffb17 	ldw	r4,-20(fp)
 8022e9c:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 8022ea0:	e0bffec5 	stb	r2,-5(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8022ea4:	e0bffb17 	ldw	r2,-20(fp)
 8022ea8:	10800003 	ldbu	r2,0(r2)
 8022eac:	10803fcc 	andi	r2,r2,255
 8022eb0:	100b883a 	mov	r5,r2
 8022eb4:	e13ffb17 	ldw	r4,-20(fp)
 8022eb8:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 8022ebc:	01c00044 	movi	r7,1
 8022ec0:	018000c4 	movi	r6,3
 8022ec4:	01400044 	movi	r5,1
 8022ec8:	e13ffb17 	ldw	r4,-20(fp)
 8022ecc:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022ed0:	10000d1e 	bne	r2,zero,8022f08 <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 8022ed4:	e0bffe87 	ldb	r2,-6(fp)
 8022ed8:	e0fffe47 	ldb	r3,-7(fp)
 8022edc:	180d883a 	mov	r6,r3
 8022ee0:	100b883a 	mov	r5,r2
 8022ee4:	01020174 	movhi	r4,2053
 8022ee8:	21076f04 	addi	r4,r4,7612
 8022eec:	8003b840 	call	8003b84 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8022ef0:	e0bffec3 	ldbu	r2,-5(fp)
 8022ef4:	100b883a 	mov	r5,r2
 8022ef8:	e13ffb17 	ldw	r4,-20(fp)
 8022efc:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 8022f00:	00bfff84 	movi	r2,-2
 8022f04:	00013006 	br	80233c8 <alt_tse_phy_get_cap+0x578>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 8022f08:	01427104 	movi	r5,2500
 8022f0c:	e13ffb17 	ldw	r4,-20(fp)
 8022f10:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 8022f14:	01c00044 	movi	r7,1
 8022f18:	01800144 	movi	r6,5
 8022f1c:	01400044 	movi	r5,1
 8022f20:	e13ffb17 	ldw	r4,-20(fp)
 8022f24:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022f28:	1000021e 	bne	r2,zero,8022f34 <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 8022f2c:	00bfffc4 	movi	r2,-1
 8022f30:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 8022f34:	01c00044 	movi	r7,1
 8022f38:	018003c4 	movi	r6,15
 8022f3c:	014003c4 	movi	r5,15
 8022f40:	e13ffb17 	ldw	r4,-20(fp)
 8022f44:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022f48:	1007883a 	mov	r3,r2
 8022f4c:	e0bffb17 	ldw	r2,-20(fp)
 8022f50:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 8022f54:	01c00044 	movi	r7,1
 8022f58:	01800384 	movi	r6,14
 8022f5c:	014003c4 	movi	r5,15
 8022f60:	e13ffb17 	ldw	r4,-20(fp)
 8022f64:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022f68:	1007883a 	mov	r3,r2
 8022f6c:	e0bffb17 	ldw	r2,-20(fp)
 8022f70:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 8022f74:	01c00044 	movi	r7,1
 8022f78:	01800344 	movi	r6,13
 8022f7c:	014003c4 	movi	r5,15
 8022f80:	e13ffb17 	ldw	r4,-20(fp)
 8022f84:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022f88:	1007883a 	mov	r3,r2
 8022f8c:	e0bffb17 	ldw	r2,-20(fp)
 8022f90:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 8022f94:	01c00044 	movi	r7,1
 8022f98:	01800304 	movi	r6,12
 8022f9c:	014003c4 	movi	r5,15
 8022fa0:	e13ffb17 	ldw	r4,-20(fp)
 8022fa4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022fa8:	1007883a 	mov	r3,r2
 8022fac:	e0bffb17 	ldw	r2,-20(fp)
 8022fb0:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 8022fb4:	01c00044 	movi	r7,1
 8022fb8:	018003c4 	movi	r6,15
 8022fbc:	01400044 	movi	r5,1
 8022fc0:	e13ffb17 	ldw	r4,-20(fp)
 8022fc4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022fc8:	1007883a 	mov	r3,r2
 8022fcc:	e0bffb17 	ldw	r2,-20(fp)
 8022fd0:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 8022fd4:	01c00044 	movi	r7,1
 8022fd8:	01800384 	movi	r6,14
 8022fdc:	01400044 	movi	r5,1
 8022fe0:	e13ffb17 	ldw	r4,-20(fp)
 8022fe4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8022fe8:	1007883a 	mov	r3,r2
 8022fec:	e0bffb17 	ldw	r2,-20(fp)
 8022ff0:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 8022ff4:	01c00044 	movi	r7,1
 8022ff8:	01800344 	movi	r6,13
 8022ffc:	01400044 	movi	r5,1
 8023000:	e13ffb17 	ldw	r4,-20(fp)
 8023004:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023008:	1007883a 	mov	r3,r2
 802300c:	e0bffb17 	ldw	r2,-20(fp)
 8023010:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 8023014:	01c00044 	movi	r7,1
 8023018:	01800284 	movi	r6,10
 802301c:	01400044 	movi	r5,1
 8023020:	e13ffb17 	ldw	r4,-20(fp)
 8023024:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023028:	1007883a 	mov	r3,r2
 802302c:	e0bffb17 	ldw	r2,-20(fp)
 8023030:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 8023034:	01c00044 	movi	r7,1
 8023038:	01800244 	movi	r6,9
 802303c:	01400044 	movi	r5,1
 8023040:	e13ffb17 	ldw	r4,-20(fp)
 8023044:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023048:	1007883a 	mov	r3,r2
 802304c:	e0bffb17 	ldw	r2,-20(fp)
 8023050:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 8023054:	01c00044 	movi	r7,1
 8023058:	01800304 	movi	r6,12
 802305c:	01400044 	movi	r5,1
 8023060:	e13ffb17 	ldw	r4,-20(fp)
 8023064:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023068:	1007883a 	mov	r3,r2
 802306c:	e0bffb17 	ldw	r2,-20(fp)
 8023070:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 8023074:	01c00044 	movi	r7,1
 8023078:	018002c4 	movi	r6,11
 802307c:	01400044 	movi	r5,1
 8023080:	e13ffb17 	ldw	r4,-20(fp)
 8023084:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023088:	1007883a 	mov	r3,r2
 802308c:	e0bffb17 	ldw	r2,-20(fp)
 8023090:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 8023094:	01c00044 	movi	r7,1
 8023098:	018002c4 	movi	r6,11
 802309c:	01400284 	movi	r5,10
 80230a0:	e13ffb17 	ldw	r4,-20(fp)
 80230a4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80230a8:	1007883a 	mov	r3,r2
 80230ac:	e0bffb17 	ldw	r2,-20(fp)
 80230b0:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 80230b4:	01c00044 	movi	r7,1
 80230b8:	01800284 	movi	r6,10
 80230bc:	01400284 	movi	r5,10
 80230c0:	e13ffb17 	ldw	r4,-20(fp)
 80230c4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80230c8:	1007883a 	mov	r3,r2
 80230cc:	e0bffb17 	ldw	r2,-20(fp)
 80230d0:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 80230d4:	01c00044 	movi	r7,1
 80230d8:	01800244 	movi	r6,9
 80230dc:	01400144 	movi	r5,5
 80230e0:	e13ffb17 	ldw	r4,-20(fp)
 80230e4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80230e8:	1007883a 	mov	r3,r2
 80230ec:	e0bffb17 	ldw	r2,-20(fp)
 80230f0:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 80230f4:	01c00044 	movi	r7,1
 80230f8:	01800204 	movi	r6,8
 80230fc:	01400144 	movi	r5,5
 8023100:	e13ffb17 	ldw	r4,-20(fp)
 8023104:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023108:	1007883a 	mov	r3,r2
 802310c:	e0bffb17 	ldw	r2,-20(fp)
 8023110:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 8023114:	01c00044 	movi	r7,1
 8023118:	018001c4 	movi	r6,7
 802311c:	01400144 	movi	r5,5
 8023120:	e13ffb17 	ldw	r4,-20(fp)
 8023124:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023128:	1007883a 	mov	r3,r2
 802312c:	e0bffb17 	ldw	r2,-20(fp)
 8023130:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 8023134:	01c00044 	movi	r7,1
 8023138:	01800184 	movi	r6,6
 802313c:	01400144 	movi	r5,5
 8023140:	e13ffb17 	ldw	r4,-20(fp)
 8023144:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023148:	1007883a 	mov	r3,r2
 802314c:	e0bffb17 	ldw	r2,-20(fp)
 8023150:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 8023154:	01c00044 	movi	r7,1
 8023158:	01800144 	movi	r6,5
 802315c:	01400144 	movi	r5,5
 8023160:	e13ffb17 	ldw	r4,-20(fp)
 8023164:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023168:	1007883a 	mov	r3,r2
 802316c:	e0bffb17 	ldw	r2,-20(fp)
 8023170:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 8023174:	e0bffe87 	ldb	r2,-6(fp)
 8023178:	e0fffe47 	ldb	r3,-7(fp)
 802317c:	180d883a 	mov	r6,r3
 8023180:	100b883a 	mov	r5,r2
 8023184:	01020174 	movhi	r4,2053
 8023188:	2107e004 	addi	r4,r4,8064
 802318c:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 8023190:	e0bffb17 	ldw	r2,-20(fp)
 8023194:	10800043 	ldbu	r2,1(r2)
 8023198:	10803fcc 	andi	r2,r2,255
 802319c:	100b883a 	mov	r5,r2
 80231a0:	01020174 	movhi	r4,2053
 80231a4:	2107eb04 	addi	r4,r4,8108
 80231a8:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 80231ac:	e0bffb17 	ldw	r2,-20(fp)
 80231b0:	10800083 	ldbu	r2,2(r2)
 80231b4:	10803fcc 	andi	r2,r2,255
 80231b8:	100b883a 	mov	r5,r2
 80231bc:	01020174 	movhi	r4,2053
 80231c0:	2107f504 	addi	r4,r4,8148
 80231c4:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 80231c8:	e0bffb17 	ldw	r2,-20(fp)
 80231cc:	108000c3 	ldbu	r2,3(r2)
 80231d0:	10803fcc 	andi	r2,r2,255
 80231d4:	100b883a 	mov	r5,r2
 80231d8:	01020174 	movhi	r4,2053
 80231dc:	2107ff04 	addi	r4,r4,8188
 80231e0:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 80231e4:	e0bffb17 	ldw	r2,-20(fp)
 80231e8:	10800103 	ldbu	r2,4(r2)
 80231ec:	10803fcc 	andi	r2,r2,255
 80231f0:	100b883a 	mov	r5,r2
 80231f4:	01020174 	movhi	r4,2053
 80231f8:	21080904 	addi	r4,r4,8228
 80231fc:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 8023200:	e0bffb17 	ldw	r2,-20(fp)
 8023204:	10800143 	ldbu	r2,5(r2)
 8023208:	10803fcc 	andi	r2,r2,255
 802320c:	100b883a 	mov	r5,r2
 8023210:	01020174 	movhi	r4,2053
 8023214:	21081304 	addi	r4,r4,8268
 8023218:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 802321c:	e0bffb17 	ldw	r2,-20(fp)
 8023220:	10800183 	ldbu	r2,6(r2)
 8023224:	10803fcc 	andi	r2,r2,255
 8023228:	100b883a 	mov	r5,r2
 802322c:	01020174 	movhi	r4,2053
 8023230:	21081d04 	addi	r4,r4,8308
 8023234:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 8023238:	e0bffb17 	ldw	r2,-20(fp)
 802323c:	108001c3 	ldbu	r2,7(r2)
 8023240:	10803fcc 	andi	r2,r2,255
 8023244:	100b883a 	mov	r5,r2
 8023248:	01020174 	movhi	r4,2053
 802324c:	21082704 	addi	r4,r4,8348
 8023250:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 8023254:	e0bffb17 	ldw	r2,-20(fp)
 8023258:	10800203 	ldbu	r2,8(r2)
 802325c:	10803fcc 	andi	r2,r2,255
 8023260:	100b883a 	mov	r5,r2
 8023264:	01020174 	movhi	r4,2053
 8023268:	21083104 	addi	r4,r4,8388
 802326c:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 8023270:	e0bffb17 	ldw	r2,-20(fp)
 8023274:	10800243 	ldbu	r2,9(r2)
 8023278:	10803fcc 	andi	r2,r2,255
 802327c:	100b883a 	mov	r5,r2
 8023280:	01020174 	movhi	r4,2053
 8023284:	21083b04 	addi	r4,r4,8428
 8023288:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 802328c:	e0bffb17 	ldw	r2,-20(fp)
 8023290:	10800283 	ldbu	r2,10(r2)
 8023294:	10803fcc 	andi	r2,r2,255
 8023298:	100b883a 	mov	r5,r2
 802329c:	01020174 	movhi	r4,2053
 80232a0:	21084504 	addi	r4,r4,8468
 80232a4:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 80232a8:	e0bffb17 	ldw	r2,-20(fp)
 80232ac:	108002c3 	ldbu	r2,11(r2)
 80232b0:	10803fcc 	andi	r2,r2,255
 80232b4:	100b883a 	mov	r5,r2
 80232b8:	01020174 	movhi	r4,2053
 80232bc:	21084f04 	addi	r4,r4,8508
 80232c0:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "\n");
 80232c4:	01000284 	movi	r4,10
 80232c8:	8003bc40 	call	8003bc4 <putchar>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 80232cc:	e0bffe87 	ldb	r2,-6(fp)
 80232d0:	e0fffe47 	ldb	r3,-7(fp)
 80232d4:	180d883a 	mov	r6,r3
 80232d8:	100b883a 	mov	r5,r2
 80232dc:	01020174 	movhi	r4,2053
 80232e0:	21085904 	addi	r4,r4,8548
 80232e4:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 80232e8:	e0bffb17 	ldw	r2,-20(fp)
 80232ec:	10800303 	ldbu	r2,12(r2)
 80232f0:	10803fcc 	andi	r2,r2,255
 80232f4:	100b883a 	mov	r5,r2
 80232f8:	01020174 	movhi	r4,2053
 80232fc:	2107ff04 	addi	r4,r4,8188
 8023300:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 8023304:	e0bffb17 	ldw	r2,-20(fp)
 8023308:	10800343 	ldbu	r2,13(r2)
 802330c:	10803fcc 	andi	r2,r2,255
 8023310:	100b883a 	mov	r5,r2
 8023314:	01020174 	movhi	r4,2053
 8023318:	21080904 	addi	r4,r4,8228
 802331c:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 8023320:	e0bffb17 	ldw	r2,-20(fp)
 8023324:	10800383 	ldbu	r2,14(r2)
 8023328:	10803fcc 	andi	r2,r2,255
 802332c:	100b883a 	mov	r5,r2
 8023330:	01020174 	movhi	r4,2053
 8023334:	21081304 	addi	r4,r4,8268
 8023338:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 802333c:	e0bffb17 	ldw	r2,-20(fp)
 8023340:	108003c3 	ldbu	r2,15(r2)
 8023344:	10803fcc 	andi	r2,r2,255
 8023348:	100b883a 	mov	r5,r2
 802334c:	01020174 	movhi	r4,2053
 8023350:	21086604 	addi	r4,r4,8600
 8023354:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 8023358:	e0bffb17 	ldw	r2,-20(fp)
 802335c:	10800403 	ldbu	r2,16(r2)
 8023360:	10803fcc 	andi	r2,r2,255
 8023364:	100b883a 	mov	r5,r2
 8023368:	01020174 	movhi	r4,2053
 802336c:	21087004 	addi	r4,r4,8640
 8023370:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 8023374:	e0bffb17 	ldw	r2,-20(fp)
 8023378:	10800443 	ldbu	r2,17(r2)
 802337c:	10803fcc 	andi	r2,r2,255
 8023380:	100b883a 	mov	r5,r2
 8023384:	01020174 	movhi	r4,2053
 8023388:	21087a04 	addi	r4,r4,8680
 802338c:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 8023390:	e0bffb17 	ldw	r2,-20(fp)
 8023394:	10800483 	ldbu	r2,18(r2)
 8023398:	10803fcc 	andi	r2,r2,255
 802339c:	100b883a 	mov	r5,r2
 80233a0:	01020174 	movhi	r4,2053
 80233a4:	21088404 	addi	r4,r4,8720
 80233a8:	8003b840 	call	8003b84 <printf>
    tse_dprintf(6, "\n");
 80233ac:	01000284 	movi	r4,10
 80233b0:	8003bc40 	call	8003bc4 <putchar>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 80233b4:	e0bffec3 	ldbu	r2,-5(fp)
 80233b8:	100b883a 	mov	r5,r2
 80233bc:	e13ffb17 	ldw	r4,-20(fp)
 80233c0:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 80233c4:	e0bfff17 	ldw	r2,-4(fp)
    
}
 80233c8:	e037883a 	mov	sp,fp
 80233cc:	dfc00117 	ldw	ra,4(sp)
 80233d0:	df000017 	ldw	fp,0(sp)
 80233d4:	dec00204 	addi	sp,sp,8
 80233d8:	f800283a 	ret

080233dc <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 80233dc:	defff604 	addi	sp,sp,-40
 80233e0:	dfc00915 	stw	ra,36(sp)
 80233e4:	df000815 	stw	fp,32(sp)
 80233e8:	df000804 	addi	fp,sp,32
 80233ec:	e13ffa15 	stw	r4,-24(fp)
 80233f0:	2805883a 	mov	r2,r5
 80233f4:	e0bff905 	stb	r2,-28(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 80233f8:	e0bffa17 	ldw	r2,-24(fp)
 80233fc:	10800617 	ldw	r2,24(r2)
 8023400:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 8023404:	e0bffc17 	ldw	r2,-16(fp)
 8023408:	10800317 	ldw	r2,12(r2)
 802340c:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8023410:	e13ffc17 	ldw	r4,-16(fp)
 8023414:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8023418:	e0bffdc5 	stb	r2,-9(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 802341c:	e13ffe17 	ldw	r4,-8(fp)
 8023420:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8023424:	e0bfffc5 	stb	r2,-1(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 8023428:	e13ffa17 	ldw	r4,-24(fp)
 802342c:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 8023430:	e0bffbc5 	stb	r2,-17(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8023434:	e0bffa17 	ldw	r2,-24(fp)
 8023438:	10800003 	ldbu	r2,0(r2)
 802343c:	10803fcc 	andi	r2,r2,255
 8023440:	100b883a 	mov	r5,r2
 8023444:	e13ffa17 	ldw	r4,-24(fp)
 8023448:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 802344c:	e0bff903 	ldbu	r2,-28(fp)
 8023450:	10002d26 	beq	r2,zero,8023508 <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 8023454:	01c00044 	movi	r7,1
 8023458:	01800344 	movi	r6,13
 802345c:	014003c4 	movi	r5,15
 8023460:	e13ffa17 	ldw	r4,-24(fp)
 8023464:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023468:	e0bffb85 	stb	r2,-18(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 802346c:	e0bffb83 	ldbu	r2,-18(fp)
 8023470:	d8800015 	stw	r2,0(sp)
 8023474:	01c00044 	movi	r7,1
 8023478:	01800244 	movi	r6,9
 802347c:	01400244 	movi	r5,9
 8023480:	e13ffa17 	ldw	r4,-24(fp)
 8023484:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 8023488:	e0bfffc7 	ldb	r2,-1(fp)
 802348c:	e0fffdc7 	ldb	r3,-9(fp)
 8023490:	e13ffb83 	ldbu	r4,-18(fp)
 8023494:	200f883a 	mov	r7,r4
 8023498:	180d883a 	mov	r6,r3
 802349c:	100b883a 	mov	r5,r2
 80234a0:	01020174 	movhi	r4,2053
 80234a4:	21088e04 	addi	r4,r4,8760
 80234a8:	8003b840 	call	8003b84 <printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 80234ac:	01c00044 	movi	r7,1
 80234b0:	01800304 	movi	r6,12
 80234b4:	014003c4 	movi	r5,15
 80234b8:	e13ffa17 	ldw	r4,-24(fp)
 80234bc:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80234c0:	e0bffb85 	stb	r2,-18(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 80234c4:	e0bffb83 	ldbu	r2,-18(fp)
 80234c8:	d8800015 	stw	r2,0(sp)
 80234cc:	01c00044 	movi	r7,1
 80234d0:	01800204 	movi	r6,8
 80234d4:	01400244 	movi	r5,9
 80234d8:	e13ffa17 	ldw	r4,-24(fp)
 80234dc:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 80234e0:	e0bfffc7 	ldb	r2,-1(fp)
 80234e4:	e0fffdc7 	ldb	r3,-9(fp)
 80234e8:	e13ffb83 	ldbu	r4,-18(fp)
 80234ec:	200f883a 	mov	r7,r4
 80234f0:	180d883a 	mov	r6,r3
 80234f4:	100b883a 	mov	r5,r2
 80234f8:	01020174 	movhi	r4,2053
 80234fc:	2108a104 	addi	r4,r4,8836
 8023500:	8003b840 	call	8003b84 <printf>
 8023504:	00001c06 	br	8023578 <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 8023508:	d8000015 	stw	zero,0(sp)
 802350c:	01c00044 	movi	r7,1
 8023510:	01800244 	movi	r6,9
 8023514:	01400244 	movi	r5,9
 8023518:	e13ffa17 	ldw	r4,-24(fp)
 802351c:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 8023520:	e0bfffc7 	ldb	r2,-1(fp)
 8023524:	e0fffdc7 	ldb	r3,-9(fp)
 8023528:	000f883a 	mov	r7,zero
 802352c:	180d883a 	mov	r6,r3
 8023530:	100b883a 	mov	r5,r2
 8023534:	01020174 	movhi	r4,2053
 8023538:	21088e04 	addi	r4,r4,8760
 802353c:	8003b840 	call	8003b84 <printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 8023540:	d8000015 	stw	zero,0(sp)
 8023544:	01c00044 	movi	r7,1
 8023548:	01800204 	movi	r6,8
 802354c:	01400244 	movi	r5,9
 8023550:	e13ffa17 	ldw	r4,-24(fp)
 8023554:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 8023558:	e0bfffc7 	ldb	r2,-1(fp)
 802355c:	e0fffdc7 	ldb	r3,-9(fp)
 8023560:	000f883a 	mov	r7,zero
 8023564:	180d883a 	mov	r6,r3
 8023568:	100b883a 	mov	r5,r2
 802356c:	01020174 	movhi	r4,2053
 8023570:	2108b404 	addi	r4,r4,8912
 8023574:	8003b840 	call	8003b84 <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 8023578:	e0bffbc3 	ldbu	r2,-17(fp)
 802357c:	100b883a 	mov	r5,r2
 8023580:	e13ffa17 	ldw	r4,-24(fp)
 8023584:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 8023588:	0005883a 	mov	r2,zero
}
 802358c:	e037883a 	mov	sp,fp
 8023590:	dfc00117 	ldw	ra,4(sp)
 8023594:	df000017 	ldw	fp,0(sp)
 8023598:	dec00204 	addi	sp,sp,8
 802359c:	f800283a 	ret

080235a0 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 80235a0:	defff704 	addi	sp,sp,-36
 80235a4:	dfc00815 	stw	ra,32(sp)
 80235a8:	df000715 	stw	fp,28(sp)
 80235ac:	df000704 	addi	fp,sp,28
 80235b0:	e13ffb15 	stw	r4,-20(fp)
 80235b4:	2805883a 	mov	r2,r5
 80235b8:	e0bffa05 	stb	r2,-24(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 80235bc:	e0bffb17 	ldw	r2,-20(fp)
 80235c0:	10800617 	ldw	r2,24(r2)
 80235c4:	e0bffd15 	stw	r2,-12(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 80235c8:	e0bffd17 	ldw	r2,-12(fp)
 80235cc:	10800317 	ldw	r2,12(r2)
 80235d0:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 80235d4:	e13ffd17 	ldw	r4,-12(fp)
 80235d8:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 80235dc:	e0bfff85 	stb	r2,-2(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 80235e0:	e13ffe17 	ldw	r4,-8(fp)
 80235e4:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 80235e8:	e0bfff45 	stb	r2,-3(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 80235ec:	e13ffb17 	ldw	r4,-20(fp)
 80235f0:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 80235f4:	e0bfffc5 	stb	r2,-1(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 80235f8:	e0bffb17 	ldw	r2,-20(fp)
 80235fc:	10800003 	ldbu	r2,0(r2)
 8023600:	10803fcc 	andi	r2,r2,255
 8023604:	100b883a 	mov	r5,r2
 8023608:	e13ffb17 	ldw	r4,-20(fp)
 802360c:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 8023610:	e0bffa03 	ldbu	r2,-24(fp)
 8023614:	10004326 	beq	r2,zero,8023724 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 8023618:	01c00044 	movi	r7,1
 802361c:	018003c4 	movi	r6,15
 8023620:	01400044 	movi	r5,1
 8023624:	e13ffb17 	ldw	r4,-20(fp)
 8023628:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 802362c:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 8023630:	e0bffcc3 	ldbu	r2,-13(fp)
 8023634:	d8800015 	stw	r2,0(sp)
 8023638:	01c00044 	movi	r7,1
 802363c:	01800244 	movi	r6,9
 8023640:	01400104 	movi	r5,4
 8023644:	e13ffb17 	ldw	r4,-20(fp)
 8023648:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 802364c:	e0bfff47 	ldb	r2,-3(fp)
 8023650:	e0ffff87 	ldb	r3,-2(fp)
 8023654:	e13ffcc3 	ldbu	r4,-13(fp)
 8023658:	200f883a 	mov	r7,r4
 802365c:	180d883a 	mov	r6,r3
 8023660:	100b883a 	mov	r5,r2
 8023664:	01020174 	movhi	r4,2053
 8023668:	2108c604 	addi	r4,r4,8984
 802366c:	8003b840 	call	8003b84 <printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 8023670:	01c00044 	movi	r7,1
 8023674:	01800384 	movi	r6,14
 8023678:	01400044 	movi	r5,1
 802367c:	e13ffb17 	ldw	r4,-20(fp)
 8023680:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023684:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 8023688:	e0bffcc3 	ldbu	r2,-13(fp)
 802368c:	d8800015 	stw	r2,0(sp)
 8023690:	01c00044 	movi	r7,1
 8023694:	01800204 	movi	r6,8
 8023698:	01400104 	movi	r5,4
 802369c:	e13ffb17 	ldw	r4,-20(fp)
 80236a0:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 80236a4:	e0bfff47 	ldb	r2,-3(fp)
 80236a8:	e0ffff87 	ldb	r3,-2(fp)
 80236ac:	e13ffcc3 	ldbu	r4,-13(fp)
 80236b0:	200f883a 	mov	r7,r4
 80236b4:	180d883a 	mov	r6,r3
 80236b8:	100b883a 	mov	r5,r2
 80236bc:	01020174 	movhi	r4,2053
 80236c0:	2108d604 	addi	r4,r4,9048
 80236c4:	8003b840 	call	8003b84 <printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 80236c8:	01c00044 	movi	r7,1
 80236cc:	01800344 	movi	r6,13
 80236d0:	01400044 	movi	r5,1
 80236d4:	e13ffb17 	ldw	r4,-20(fp)
 80236d8:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80236dc:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 80236e0:	e0bffcc3 	ldbu	r2,-13(fp)
 80236e4:	d8800015 	stw	r2,0(sp)
 80236e8:	01c00044 	movi	r7,1
 80236ec:	018001c4 	movi	r6,7
 80236f0:	01400104 	movi	r5,4
 80236f4:	e13ffb17 	ldw	r4,-20(fp)
 80236f8:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 80236fc:	e0bfff47 	ldb	r2,-3(fp)
 8023700:	e0ffff87 	ldb	r3,-2(fp)
 8023704:	e13ffcc3 	ldbu	r4,-13(fp)
 8023708:	200f883a 	mov	r7,r4
 802370c:	180d883a 	mov	r6,r3
 8023710:	100b883a 	mov	r5,r2
 8023714:	01020174 	movhi	r4,2053
 8023718:	2108e904 	addi	r4,r4,9124
 802371c:	8003b840 	call	8003b84 <printf>
 8023720:	00002a06 	br	80237cc <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 8023724:	d8000015 	stw	zero,0(sp)
 8023728:	01c00044 	movi	r7,1
 802372c:	01800244 	movi	r6,9
 8023730:	01400104 	movi	r5,4
 8023734:	e13ffb17 	ldw	r4,-20(fp)
 8023738:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 802373c:	e0bfff47 	ldb	r2,-3(fp)
 8023740:	e0ffff87 	ldb	r3,-2(fp)
 8023744:	000f883a 	mov	r7,zero
 8023748:	180d883a 	mov	r6,r3
 802374c:	100b883a 	mov	r5,r2
 8023750:	01020174 	movhi	r4,2053
 8023754:	2108c604 	addi	r4,r4,8984
 8023758:	8003b840 	call	8003b84 <printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 802375c:	d8000015 	stw	zero,0(sp)
 8023760:	01c00044 	movi	r7,1
 8023764:	01800204 	movi	r6,8
 8023768:	01400104 	movi	r5,4
 802376c:	e13ffb17 	ldw	r4,-20(fp)
 8023770:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 8023774:	e0bfff47 	ldb	r2,-3(fp)
 8023778:	e0ffff87 	ldb	r3,-2(fp)
 802377c:	000f883a 	mov	r7,zero
 8023780:	180d883a 	mov	r6,r3
 8023784:	100b883a 	mov	r5,r2
 8023788:	01020174 	movhi	r4,2053
 802378c:	2108d604 	addi	r4,r4,9048
 8023790:	8003b840 	call	8003b84 <printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 8023794:	d8000015 	stw	zero,0(sp)
 8023798:	01c00044 	movi	r7,1
 802379c:	018001c4 	movi	r6,7
 80237a0:	01400104 	movi	r5,4
 80237a4:	e13ffb17 	ldw	r4,-20(fp)
 80237a8:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 80237ac:	e0bfff47 	ldb	r2,-3(fp)
 80237b0:	e0ffff87 	ldb	r3,-2(fp)
 80237b4:	000f883a 	mov	r7,zero
 80237b8:	180d883a 	mov	r6,r3
 80237bc:	100b883a 	mov	r5,r2
 80237c0:	01020174 	movhi	r4,2053
 80237c4:	2108e904 	addi	r4,r4,9124
 80237c8:	8003b840 	call	8003b84 <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 80237cc:	e0bfffc3 	ldbu	r2,-1(fp)
 80237d0:	100b883a 	mov	r5,r2
 80237d4:	e13ffb17 	ldw	r4,-20(fp)
 80237d8:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 80237dc:	0005883a 	mov	r2,zero
}
 80237e0:	e037883a 	mov	sp,fp
 80237e4:	dfc00117 	ldw	ra,4(sp)
 80237e8:	df000017 	ldw	fp,0(sp)
 80237ec:	dec00204 	addi	sp,sp,8
 80237f0:	f800283a 	ret

080237f4 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 80237f4:	defff504 	addi	sp,sp,-44
 80237f8:	dfc00a15 	stw	ra,40(sp)
 80237fc:	df000915 	stw	fp,36(sp)
 8023800:	df000904 	addi	fp,sp,36
 8023804:	e13ff915 	stw	r4,-28(fp)
 8023808:	2805883a 	mov	r2,r5
 802380c:	e0bff805 	stb	r2,-32(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 8023810:	e0bff917 	ldw	r2,-28(fp)
 8023814:	10800617 	ldw	r2,24(r2)
 8023818:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 802381c:	e0bfff17 	ldw	r2,-4(fp)
 8023820:	10800317 	ldw	r2,12(r2)
 8023824:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8023828:	e13fff17 	ldw	r4,-4(fp)
 802382c:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8023830:	e0bffd15 	stw	r2,-12(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 8023834:	e13ffe17 	ldw	r4,-8(fp)
 8023838:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 802383c:	e0bffc15 	stw	r2,-16(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 8023840:	e13ff917 	ldw	r4,-28(fp)
 8023844:	80214b80 	call	80214b8 <alt_tse_phy_rd_mdio_addr>
 8023848:	e0bffb15 	stw	r2,-20(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 802384c:	e0bff917 	ldw	r2,-28(fp)
 8023850:	10800003 	ldbu	r2,0(r2)
 8023854:	10803fcc 	andi	r2,r2,255
 8023858:	100b883a 	mov	r5,r2
 802385c:	e13ff917 	ldw	r4,-28(fp)
 8023860:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 8023864:	e0bff803 	ldbu	r2,-32(fp)
 8023868:	10002926 	beq	r2,zero,8023910 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 802386c:	01c00044 	movi	r7,1
 8023870:	01800304 	movi	r6,12
 8023874:	01400044 	movi	r5,1
 8023878:	e13ff917 	ldw	r4,-28(fp)
 802387c:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023880:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 8023884:	e0bffac3 	ldbu	r2,-21(fp)
 8023888:	d8800015 	stw	r2,0(sp)
 802388c:	01c00044 	movi	r7,1
 8023890:	01800184 	movi	r6,6
 8023894:	01400104 	movi	r5,4
 8023898:	e13ff917 	ldw	r4,-28(fp)
 802389c:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 80238a0:	e0bffac3 	ldbu	r2,-21(fp)
 80238a4:	100f883a 	mov	r7,r2
 80238a8:	e1bffd17 	ldw	r6,-12(fp)
 80238ac:	e17ffc17 	ldw	r5,-16(fp)
 80238b0:	01020174 	movhi	r4,2053
 80238b4:	2108fc04 	addi	r4,r4,9200
 80238b8:	8003b840 	call	8003b84 <printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 80238bc:	01c00044 	movi	r7,1
 80238c0:	018002c4 	movi	r6,11
 80238c4:	01400044 	movi	r5,1
 80238c8:	e13ff917 	ldw	r4,-28(fp)
 80238cc:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80238d0:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 80238d4:	e0bffac3 	ldbu	r2,-21(fp)
 80238d8:	d8800015 	stw	r2,0(sp)
 80238dc:	01c00044 	movi	r7,1
 80238e0:	01800144 	movi	r6,5
 80238e4:	01400104 	movi	r5,4
 80238e8:	e13ff917 	ldw	r4,-28(fp)
 80238ec:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 80238f0:	e0bffac3 	ldbu	r2,-21(fp)
 80238f4:	100f883a 	mov	r7,r2
 80238f8:	e1bffd17 	ldw	r6,-12(fp)
 80238fc:	e17ffc17 	ldw	r5,-16(fp)
 8023900:	01020174 	movhi	r4,2053
 8023904:	21090f04 	addi	r4,r4,9276
 8023908:	8003b840 	call	8003b84 <printf>
 802390c:	00001806 	br	8023970 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 8023910:	d8000015 	stw	zero,0(sp)
 8023914:	01c00044 	movi	r7,1
 8023918:	01800184 	movi	r6,6
 802391c:	01400104 	movi	r5,4
 8023920:	e13ff917 	ldw	r4,-28(fp)
 8023924:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 8023928:	000f883a 	mov	r7,zero
 802392c:	e1bffd17 	ldw	r6,-12(fp)
 8023930:	e17ffc17 	ldw	r5,-16(fp)
 8023934:	01020174 	movhi	r4,2053
 8023938:	2108fc04 	addi	r4,r4,9200
 802393c:	8003b840 	call	8003b84 <printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 8023940:	d8000015 	stw	zero,0(sp)
 8023944:	01c00044 	movi	r7,1
 8023948:	01800144 	movi	r6,5
 802394c:	01400104 	movi	r5,4
 8023950:	e13ff917 	ldw	r4,-28(fp)
 8023954:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 8023958:	000f883a 	mov	r7,zero
 802395c:	e1bffd17 	ldw	r6,-12(fp)
 8023960:	e17ffc17 	ldw	r5,-16(fp)
 8023964:	01020174 	movhi	r4,2053
 8023968:	21090f04 	addi	r4,r4,9276
 802396c:	8003b840 	call	8003b84 <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 8023970:	e0bffb17 	ldw	r2,-20(fp)
 8023974:	10803fcc 	andi	r2,r2,255
 8023978:	100b883a 	mov	r5,r2
 802397c:	e13ff917 	ldw	r4,-28(fp)
 8023980:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 8023984:	0005883a 	mov	r2,zero
}
 8023988:	e037883a 	mov	sp,fp
 802398c:	dfc00117 	ldw	ra,4(sp)
 8023990:	df000017 	ldw	fp,0(sp)
 8023994:	dec00204 	addi	sp,sp,8
 8023998:	f800283a 	ret

0802399c <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 802399c:	defff504 	addi	sp,sp,-44
 80239a0:	dfc00a15 	stw	ra,40(sp)
 80239a4:	df000915 	stw	fp,36(sp)
 80239a8:	df000904 	addi	fp,sp,36
 80239ac:	e13ff715 	stw	r4,-36(fp)
    
    alt_32 i;
    alt_u8 common_1000 = 1;
 80239b0:	00800044 	movi	r2,1
 80239b4:	e0bfffc5 	stb	r2,-1(fp)
    alt_u8 common_100 = 1;
 80239b8:	00800044 	movi	r2,1
 80239bc:	e0bffdc5 	stb	r2,-9(fp)
    alt_u8 common_10 = 1;
 80239c0:	00800044 	movi	r2,1
 80239c4:	e0bffd85 	stb	r2,-10(fp)
    
    alt_32 common_speed;
    
    alt_u8 none_an_complete = 1;
 80239c8:	00800044 	movi	r2,1
 80239cc:	e0bffbc5 	stb	r2,-17(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 80239d0:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_phy_info *pphy = 0;
 80239d4:	e03ff915 	stw	zero,-28(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 80239d8:	e13ff717 	ldw	r4,-36(fp)
 80239dc:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 80239e0:	e0bff8c5 	stb	r2,-29(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 80239e4:	e03ffe15 	stw	zero,-8(fp)
 80239e8:	00001a06 	br	8023a54 <alt_tse_phy_get_common_speed+0xb8>
        pmac_info = pmac_group->pmac_info[i];
 80239ec:	e0fff717 	ldw	r3,-36(fp)
 80239f0:	e0bffe17 	ldw	r2,-8(fp)
 80239f4:	10800044 	addi	r2,r2,1
 80239f8:	100490ba 	slli	r2,r2,2
 80239fc:	1885883a 	add	r2,r3,r2
 8023a00:	10800017 	ldw	r2,0(r2)
 8023a04:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 8023a08:	e0bffa17 	ldw	r2,-24(fp)
 8023a0c:	10800117 	ldw	r2,4(r2)
 8023a10:	e0bff915 	stw	r2,-28(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 8023a14:	e0bff917 	ldw	r2,-28(fp)
 8023a18:	10000926 	beq	r2,zero,8023a40 <alt_tse_phy_get_common_speed+0xa4>
            alt_tse_phy_set_adv_1000(pphy, 1);
 8023a1c:	01400044 	movi	r5,1
 8023a20:	e13ff917 	ldw	r4,-28(fp)
 8023a24:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 8023a28:	01400044 	movi	r5,1
 8023a2c:	e13ff917 	ldw	r4,-28(fp)
 8023a30:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 8023a34:	01400044 	movi	r5,1
 8023a38:	e13ff917 	ldw	r4,-28(fp)
 8023a3c:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 8023a40:	01000284 	movi	r4,10
 8023a44:	8003bc40 	call	8003bc4 <putchar>
    for(i = 0; i < pmac_group->channel; i++) {
 8023a48:	e0bffe17 	ldw	r2,-8(fp)
 8023a4c:	10800044 	addi	r2,r2,1
 8023a50:	e0bffe15 	stw	r2,-8(fp)
 8023a54:	e0bff717 	ldw	r2,-36(fp)
 8023a58:	10800003 	ldbu	r2,0(r2)
 8023a5c:	10803fcc 	andi	r2,r2,255
 8023a60:	e0fffe17 	ldw	r3,-8(fp)
 8023a64:	18bfe116 	blt	r3,r2,80239ec <alt_tse_phy_get_common_speed+0x50>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 8023a68:	e03ffe15 	stw	zero,-8(fp)
 8023a6c:	00005506 	br	8023bc4 <alt_tse_phy_get_common_speed+0x228>

        pmac_info = pmac_group->pmac_info[i];
 8023a70:	e0fff717 	ldw	r3,-36(fp)
 8023a74:	e0bffe17 	ldw	r2,-8(fp)
 8023a78:	10800044 	addi	r2,r2,1
 8023a7c:	100490ba 	slli	r2,r2,2
 8023a80:	1885883a 	add	r2,r3,r2
 8023a84:	10800017 	ldw	r2,0(r2)
 8023a88:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 8023a8c:	e0bffa17 	ldw	r2,-24(fp)
 8023a90:	10800117 	ldw	r2,4(r2)
 8023a94:	e0bff915 	stw	r2,-28(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 8023a98:	e0bff917 	ldw	r2,-28(fp)
 8023a9c:	10004326 	beq	r2,zero,8023bac <alt_tse_phy_get_common_speed+0x210>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 8023aa0:	e13ff917 	ldw	r4,-28(fp)
 8023aa4:	8022e500 	call	8022e50 <alt_tse_phy_get_cap>
 8023aa8:	1000421e 	bne	r2,zero,8023bb4 <alt_tse_phy_get_common_speed+0x218>
            continue;
        }
        
        none_an_complete = 0;
 8023aac:	e03ffbc5 	stb	zero,-17(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 8023ab0:	e0bffa17 	ldw	r2,-24(fp)
 8023ab4:	10800003 	ldbu	r2,0(r2)
 8023ab8:	10803fcc 	andi	r2,r2,255
 8023abc:	10800058 	cmpnei	r2,r2,1
 8023ac0:	1000021e 	bne	r2,zero,8023acc <alt_tse_phy_get_common_speed+0x130>
            common_1000 = 0;
 8023ac4:	e03fffc5 	stb	zero,-1(fp)
 8023ac8:	00000706 	br	8023ae8 <alt_tse_phy_get_common_speed+0x14c>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 8023acc:	e0bffa17 	ldw	r2,-24(fp)
 8023ad0:	10800003 	ldbu	r2,0(r2)
 8023ad4:	10803fcc 	andi	r2,r2,255
 8023ad8:	10800098 	cmpnei	r2,r2,2
 8023adc:	1000021e 	bne	r2,zero,8023ae8 <alt_tse_phy_get_common_speed+0x14c>
            common_100 = 0;
 8023ae0:	e03ffdc5 	stb	zero,-9(fp)
            common_10 = 0;            
 8023ae4:	e03ffd85 	stb	zero,-10(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 8023ae8:	e0bff917 	ldw	r2,-28(fp)
 8023aec:	10c000c3 	ldbu	r3,3(r2)
 8023af0:	e0bff917 	ldw	r2,-28(fp)
 8023af4:	10800303 	ldbu	r2,12(r2)
 8023af8:	1884703a 	and	r2,r3,r2
 8023afc:	1007883a 	mov	r3,r2
 8023b00:	e0bfffc3 	ldbu	r2,-1(fp)
 8023b04:	10c4703a 	and	r2,r2,r3
 8023b08:	e0bfffc5 	stb	r2,-1(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 8023b0c:	e0bff917 	ldw	r2,-28(fp)
 8023b10:	10c00183 	ldbu	r3,6(r2)
 8023b14:	e0bff917 	ldw	r2,-28(fp)
 8023b18:	108003c3 	ldbu	r2,15(r2)
 8023b1c:	1884703a 	and	r2,r3,r2
 8023b20:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
 8023b24:	e0bff917 	ldw	r2,-28(fp)
 8023b28:	10c001c3 	ldbu	r3,7(r2)
 8023b2c:	e0bff917 	ldw	r2,-28(fp)
 8023b30:	10800403 	ldbu	r2,16(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 8023b34:	1884703a 	and	r2,r3,r2
 8023b38:	2084b03a 	or	r2,r4,r2
 8023b3c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
 8023b40:	e0bff917 	ldw	r2,-28(fp)
 8023b44:	10c00143 	ldbu	r3,5(r2)
 8023b48:	e0bff917 	ldw	r2,-28(fp)
 8023b4c:	10800383 	ldbu	r2,14(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 8023b50:	1884703a 	and	r2,r3,r2
 8023b54:	2084b03a 	or	r2,r4,r2
 8023b58:	1007883a 	mov	r3,r2
 8023b5c:	e0bffdc3 	ldbu	r2,-9(fp)
 8023b60:	10c4703a 	and	r2,r2,r3
 8023b64:	e0bffdc5 	stb	r2,-9(fp)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 8023b68:	e0bff917 	ldw	r2,-28(fp)
 8023b6c:	10c00283 	ldbu	r3,10(r2)
 8023b70:	e0bff917 	ldw	r2,-28(fp)
 8023b74:	10800443 	ldbu	r2,17(r2)
 8023b78:	1884703a 	and	r2,r3,r2
 8023b7c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
 8023b80:	e0bff917 	ldw	r2,-28(fp)
 8023b84:	10c002c3 	ldbu	r3,11(r2)
 8023b88:	e0bff917 	ldw	r2,-28(fp)
 8023b8c:	10800483 	ldbu	r2,18(r2)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 8023b90:	1884703a 	and	r2,r3,r2
 8023b94:	2084b03a 	or	r2,r4,r2
 8023b98:	1007883a 	mov	r3,r2
 8023b9c:	e0bffd83 	ldbu	r2,-10(fp)
 8023ba0:	10c4703a 	and	r2,r2,r3
 8023ba4:	e0bffd85 	stb	r2,-10(fp)
 8023ba8:	00000306 	br	8023bb8 <alt_tse_phy_get_common_speed+0x21c>
            continue;
 8023bac:	0001883a 	nop
 8023bb0:	00000106 	br	8023bb8 <alt_tse_phy_get_common_speed+0x21c>
            continue;
 8023bb4:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
 8023bb8:	e0bffe17 	ldw	r2,-8(fp)
 8023bbc:	10800044 	addi	r2,r2,1
 8023bc0:	e0bffe15 	stw	r2,-8(fp)
 8023bc4:	e0bff717 	ldw	r2,-36(fp)
 8023bc8:	10800003 	ldbu	r2,0(r2)
 8023bcc:	10803fcc 	andi	r2,r2,255
 8023bd0:	e0fffe17 	ldw	r3,-8(fp)
 8023bd4:	18bfa616 	blt	r3,r2,8023a70 <alt_tse_phy_get_common_speed+0xd4>

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 8023bd8:	e0bffbc3 	ldbu	r2,-17(fp)
 8023bdc:	10800058 	cmpnei	r2,r2,1
 8023be0:	1000081e 	bne	r2,zero,8023c04 <alt_tse_phy_get_common_speed+0x268>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 8023be4:	00bfffc4 	movi	r2,-1
 8023be8:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 8023bec:	e0bff8c7 	ldb	r2,-29(fp)
 8023bf0:	100b883a 	mov	r5,r2
 8023bf4:	01020174 	movhi	r4,2053
 8023bf8:	21092204 	addi	r4,r4,9352
 8023bfc:	8003b840 	call	8003b84 <printf>
 8023c00:	00002706 	br	8023ca0 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_1000) {
 8023c04:	e0bfffc3 	ldbu	r2,-1(fp)
 8023c08:	10000926 	beq	r2,zero,8023c30 <alt_tse_phy_get_common_speed+0x294>
        common_speed = TSE_PHY_SPEED_1000;
 8023c0c:	00800084 	movi	r2,2
 8023c10:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 8023c14:	e0bff8c7 	ldb	r2,-29(fp)
 8023c18:	0180fa04 	movi	r6,1000
 8023c1c:	100b883a 	mov	r5,r2
 8023c20:	01020174 	movhi	r4,2053
 8023c24:	21093404 	addi	r4,r4,9424
 8023c28:	8003b840 	call	8003b84 <printf>
 8023c2c:	00001c06 	br	8023ca0 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_100) {
 8023c30:	e0bffdc3 	ldbu	r2,-9(fp)
 8023c34:	10000926 	beq	r2,zero,8023c5c <alt_tse_phy_get_common_speed+0x2c0>
        common_speed = TSE_PHY_SPEED_100;
 8023c38:	00800044 	movi	r2,1
 8023c3c:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 8023c40:	e0bff8c7 	ldb	r2,-29(fp)
 8023c44:	01801904 	movi	r6,100
 8023c48:	100b883a 	mov	r5,r2
 8023c4c:	01020174 	movhi	r4,2053
 8023c50:	21093404 	addi	r4,r4,9424
 8023c54:	8003b840 	call	8003b84 <printf>
 8023c58:	00001106 	br	8023ca0 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_10) {
 8023c5c:	e0bffd83 	ldbu	r2,-10(fp)
 8023c60:	10000826 	beq	r2,zero,8023c84 <alt_tse_phy_get_common_speed+0x2e8>
        common_speed = TSE_PHY_SPEED_10;
 8023c64:	e03ffc15 	stw	zero,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 8023c68:	e0bff8c7 	ldb	r2,-29(fp)
 8023c6c:	01800284 	movi	r6,10
 8023c70:	100b883a 	mov	r5,r2
 8023c74:	01020174 	movhi	r4,2053
 8023c78:	21093404 	addi	r4,r4,9424
 8023c7c:	8003b840 	call	8003b84 <printf>
 8023c80:	00000706 	br	8023ca0 <alt_tse_phy_get_common_speed+0x304>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 8023c84:	00bfffc4 	movi	r2,-1
 8023c88:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 8023c8c:	e0bff8c7 	ldb	r2,-29(fp)
 8023c90:	100b883a 	mov	r5,r2
 8023c94:	01020174 	movhi	r4,2053
 8023c98:	21094104 	addi	r4,r4,9476
 8023c9c:	8003b840 	call	8003b84 <printf>

    return common_speed;
 8023ca0:	e0bffc17 	ldw	r2,-16(fp)
}
 8023ca4:	e037883a 	mov	sp,fp
 8023ca8:	dfc00117 	ldw	ra,4(sp)
 8023cac:	df000017 	ldw	fp,0(sp)
 8023cb0:	dec00204 	addi	sp,sp,8
 8023cb4:	f800283a 	ret

08023cb8 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 8023cb8:	defff004 	addi	sp,sp,-64
 8023cbc:	dfc00f15 	stw	ra,60(sp)
 8023cc0:	df000e15 	stw	fp,56(sp)
 8023cc4:	dc400d15 	stw	r17,52(sp)
 8023cc8:	dc000c15 	stw	r16,48(sp)
 8023ccc:	df000e04 	addi	fp,sp,56
 8023cd0:	e13ff415 	stw	r4,-48(fp)
 8023cd4:	e17ff315 	stw	r5,-52(fp)
    alt_u8 speed;
    alt_u8 duplex;
    
    alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 8023cd8:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 8023cdc:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_system_info *psys = 0;
 8023ce0:	e03ff915 	stw	zero,-28(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 8023ce4:	e03ff8c5 	stb	zero,-29(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 8023ce8:	e13ff417 	ldw	r4,-48(fp)
 8023cec:	80207200 	call	8020720 <alt_tse_get_mac_group_index>
 8023cf0:	e0bff885 	stb	r2,-30(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 8023cf4:	e0bff417 	ldw	r2,-48(fp)
 8023cf8:	10800117 	ldw	r2,4(r2)
 8023cfc:	10800217 	ldw	r2,8(r2)
 8023d00:	10800017 	ldw	r2,0(r2)
 8023d04:	e0bff715 	stw	r2,-36(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 8023d08:	e0bff717 	ldw	r2,-36(fp)
 8023d0c:	10801004 	addi	r2,r2,64
 8023d10:	10800037 	ldwio	r2,0(r2)
 8023d14:	e0bff615 	stw	r2,-40(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 8023d18:	e0bff317 	ldw	r2,-52(fp)
 8023d1c:	10000316 	blt	r2,zero,8023d2c <alt_tse_phy_set_common_speed+0x74>
 8023d20:	e0bff317 	ldw	r2,-52(fp)
 8023d24:	108000d0 	cmplti	r2,r2,3
 8023d28:	10000c1e 	bne	r2,zero,8023d5c <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 8023d2c:	e0bff887 	ldb	r2,-30(fp)
 8023d30:	e1bff317 	ldw	r6,-52(fp)
 8023d34:	100b883a 	mov	r5,r2
 8023d38:	01020174 	movhi	r4,2053
 8023d3c:	21094e04 	addi	r4,r4,9528
 8023d40:	8003b840 	call	8003b84 <printf>
        /* Restore previous MDIO address */
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 8023d44:	e0bff717 	ldw	r2,-36(fp)
 8023d48:	10801004 	addi	r2,r2,64
 8023d4c:	e0fff617 	ldw	r3,-40(fp)
 8023d50:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
 8023d54:	00bfffc4 	movi	r2,-1
 8023d58:	0000fc06 	br	802414c <alt_tse_phy_set_common_speed+0x494>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 8023d5c:	e03ffc15 	stw	zero,-16(fp)
 8023d60:	0000da06 	br	80240cc <alt_tse_phy_set_common_speed+0x414>
        pmac_info = pmac_group->pmac_info[i];
 8023d64:	e0fff417 	ldw	r3,-48(fp)
 8023d68:	e0bffc17 	ldw	r2,-16(fp)
 8023d6c:	10800044 	addi	r2,r2,1
 8023d70:	100490ba 	slli	r2,r2,2
 8023d74:	1885883a 	add	r2,r3,r2
 8023d78:	10800017 	ldw	r2,0(r2)
 8023d7c:	e0bffa15 	stw	r2,-24(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 8023d80:	e13ffa17 	ldw	r4,-24(fp)
 8023d84:	802078c0 	call	802078c <alt_tse_get_mac_info_index>
 8023d88:	e0bff8c5 	stb	r2,-29(fp)

        pphy = pmac_info->pphy_info;
 8023d8c:	e0bffa17 	ldw	r2,-24(fp)
 8023d90:	10800117 	ldw	r2,4(r2)
 8023d94:	e0bffb15 	stw	r2,-20(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 8023d98:	e0bffb17 	ldw	r2,-20(fp)
 8023d9c:	1000c726 	beq	r2,zero,80240bc <alt_tse_phy_set_common_speed+0x404>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 8023da0:	e0bffa17 	ldw	r2,-24(fp)
 8023da4:	10800217 	ldw	r2,8(r2)
 8023da8:	e0bff915 	stw	r2,-28(fp)
            
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8023dac:	e0bffb17 	ldw	r2,-20(fp)
 8023db0:	10800003 	ldbu	r2,0(r2)
 8023db4:	10803fcc 	andi	r2,r2,255
 8023db8:	100b883a 	mov	r5,r2
 8023dbc:	e13ffb17 	ldw	r4,-20(fp)
 8023dc0:	80215000 	call	8021500 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8023dc4:	e0bffb17 	ldw	r2,-20(fp)
 8023dc8:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8023dcc:	10803fcc 	andi	r2,r2,255
 8023dd0:	10000c1e 	bne	r2,zero,8023e04 <alt_tse_phy_set_common_speed+0x14c>
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8023dd4:	e0bffb17 	ldw	r2,-20(fp)
 8023dd8:	10800103 	ldbu	r2,4(r2)
 8023ddc:	10803fcc 	andi	r2,r2,255
 8023de0:	1000081e 	bne	r2,zero,8023e04 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8023de4:	e0bffb17 	ldw	r2,-20(fp)
 8023de8:	10800043 	ldbu	r2,1(r2)
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8023dec:	10803fcc 	andi	r2,r2,255
 8023df0:	1000041e 	bne	r2,zero,8023e04 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8023df4:	e0bffb17 	ldw	r2,-20(fp)
 8023df8:	10800083 	ldbu	r2,2(r2)
 8023dfc:	10803fcc 	andi	r2,r2,255
 8023e00:	10000226 	beq	r2,zero,8023e0c <alt_tse_phy_set_common_speed+0x154>
 8023e04:	00800044 	movi	r2,1
 8023e08:	00000106 	br	8023e10 <alt_tse_phy_set_common_speed+0x158>
 8023e0c:	0005883a 	mov	r2,zero
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8023e10:	e0bff5c5 	stb	r2,-41(fp)
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 8023e14:	e0bff5c3 	ldbu	r2,-41(fp)
 8023e18:	1000101e 	bne	r2,zero,8023e5c <alt_tse_phy_set_common_speed+0x1a4>
 8023e1c:	e0bff317 	ldw	r2,-52(fp)
 8023e20:	10800098 	cmpnei	r2,r2,2
 8023e24:	10000d1e 	bne	r2,zero,8023e5c <alt_tse_phy_set_common_speed+0x1a4>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 8023e28:	e0bff887 	ldb	r2,-30(fp)
 8023e2c:	e0fff8c7 	ldb	r3,-29(fp)
 8023e30:	180d883a 	mov	r6,r3
 8023e34:	100b883a 	mov	r5,r2
 8023e38:	01020174 	movhi	r4,2053
 8023e3c:	21096204 	addi	r4,r4,9608
 8023e40:	8003b840 	call	8003b84 <printf>
            /* Restore previous MDIO address */
            IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 8023e44:	e0bff717 	ldw	r2,-36(fp)
 8023e48:	10801004 	addi	r2,r2,64
 8023e4c:	e0fff617 	ldw	r3,-40(fp)
 8023e50:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
 8023e54:	00bfffc4 	movi	r2,-1
 8023e58:	0000bc06 	br	802414c <alt_tse_phy_set_common_speed+0x494>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 8023e5c:	01c00044 	movi	r7,1
 8023e60:	018000c4 	movi	r6,3
 8023e64:	01400044 	movi	r5,1
 8023e68:	e13ffb17 	ldw	r4,-20(fp)
 8023e6c:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023e70:	1000141e 	bne	r2,zero,8023ec4 <alt_tse_phy_set_common_speed+0x20c>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 8023e74:	e0bff5c3 	ldbu	r2,-41(fp)
 8023e78:	10000926 	beq	r2,zero,8023ea0 <alt_tse_phy_set_common_speed+0x1e8>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 8023e7c:	e0bff317 	ldw	r2,-52(fp)
 8023e80:	1005d07a 	srai	r2,r2,1
 8023e84:	10bfffcc 	andi	r2,r2,65535
 8023e88:	d8800015 	stw	r2,0(sp)
 8023e8c:	01c00044 	movi	r7,1
 8023e90:	01800184 	movi	r6,6
 8023e94:	000b883a 	mov	r5,zero
 8023e98:	e13ffb17 	ldw	r4,-20(fp)
 8023e9c:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 8023ea0:	e0bff317 	ldw	r2,-52(fp)
 8023ea4:	10bfffcc 	andi	r2,r2,65535
 8023ea8:	d8800015 	stw	r2,0(sp)
 8023eac:	01c00044 	movi	r7,1
 8023eb0:	01800344 	movi	r6,13
 8023eb4:	000b883a 	mov	r5,zero
 8023eb8:	e13ffb17 	ldw	r4,-20(fp)
 8023ebc:	80215580 	call	8021558 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 8023ec0:	00007f06 	br	80240c0 <alt_tse_phy_set_common_speed+0x408>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 8023ec4:	e0bff317 	ldw	r2,-52(fp)
 8023ec8:	10800098 	cmpnei	r2,r2,2
 8023ecc:	10000a1e 	bne	r2,zero,8023ef8 <alt_tse_phy_set_common_speed+0x240>
            alt_tse_phy_set_adv_1000(pphy, 1);
 8023ed0:	01400044 	movi	r5,1
 8023ed4:	e13ffb17 	ldw	r4,-20(fp)
 8023ed8:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 8023edc:	01400044 	movi	r5,1
 8023ee0:	e13ffb17 	ldw	r4,-20(fp)
 8023ee4:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 8023ee8:	01400044 	movi	r5,1
 8023eec:	e13ffb17 	ldw	r4,-20(fp)
 8023ef0:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
 8023ef4:	00002206 	br	8023f80 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 8023ef8:	e0bff317 	ldw	r2,-52(fp)
 8023efc:	10800058 	cmpnei	r2,r2,1
 8023f00:	10000a1e 	bne	r2,zero,8023f2c <alt_tse_phy_set_common_speed+0x274>
            alt_tse_phy_set_adv_1000(pphy, 0);
 8023f04:	000b883a 	mov	r5,zero
 8023f08:	e13ffb17 	ldw	r4,-20(fp)
 8023f0c:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 8023f10:	01400044 	movi	r5,1
 8023f14:	e13ffb17 	ldw	r4,-20(fp)
 8023f18:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 8023f1c:	01400044 	movi	r5,1
 8023f20:	e13ffb17 	ldw	r4,-20(fp)
 8023f24:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
 8023f28:	00001506 	br	8023f80 <alt_tse_phy_set_common_speed+0x2c8>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 8023f2c:	e0bff317 	ldw	r2,-52(fp)
 8023f30:	10000a1e 	bne	r2,zero,8023f5c <alt_tse_phy_set_common_speed+0x2a4>
            alt_tse_phy_set_adv_1000(pphy, 0);
 8023f34:	000b883a 	mov	r5,zero
 8023f38:	e13ffb17 	ldw	r4,-20(fp)
 8023f3c:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 8023f40:	000b883a 	mov	r5,zero
 8023f44:	e13ffb17 	ldw	r4,-20(fp)
 8023f48:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 8023f4c:	01400044 	movi	r5,1
 8023f50:	e13ffb17 	ldw	r4,-20(fp)
 8023f54:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
 8023f58:	00000906 	br	8023f80 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 8023f5c:	000b883a 	mov	r5,zero
 8023f60:	e13ffb17 	ldw	r4,-20(fp)
 8023f64:	80233dc0 	call	80233dc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 8023f68:	000b883a 	mov	r5,zero
 8023f6c:	e13ffb17 	ldw	r4,-20(fp)
 8023f70:	80235a00 	call	80235a0 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 8023f74:	000b883a 	mov	r5,zero
 8023f78:	e13ffb17 	ldw	r4,-20(fp)
 8023f7c:	80237f40 	call	80237f4 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 8023f80:	01c00044 	movi	r7,1
 8023f84:	01800144 	movi	r6,5
 8023f88:	01400044 	movi	r5,1
 8023f8c:	e13ffb17 	ldw	r4,-20(fp)
 8023f90:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023f94:	10800058 	cmpnei	r2,r2,1
 8023f98:	10003a1e 	bne	r2,zero,8024084 <alt_tse_phy_set_common_speed+0x3cc>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 8023f9c:	e0bff5c3 	ldbu	r2,-41(fp)
 8023fa0:	10000f26 	beq	r2,zero,8023fe0 <alt_tse_phy_set_common_speed+0x328>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 8023fa4:	e0bffb17 	ldw	r2,-20(fp)
 8023fa8:	10800517 	ldw	r2,20(r2)
 8023fac:	10801583 	ldbu	r2,86(r2)
 8023fb0:	10c03fcc 	andi	r3,r2,255
 8023fb4:	e0bffb17 	ldw	r2,-20(fp)
 8023fb8:	10800517 	ldw	r2,20(r2)
 8023fbc:	108015c3 	ldbu	r2,87(r2)
 8023fc0:	10803fcc 	andi	r2,r2,255
 8023fc4:	01c00084 	movi	r7,2
 8023fc8:	100d883a 	mov	r6,r2
 8023fcc:	180b883a 	mov	r5,r3
 8023fd0:	e13ffb17 	ldw	r4,-20(fp)
 8023fd4:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8023fd8:	e0bffdc5 	stb	r2,-9(fp)
 8023fdc:	00000e06 	br	8024018 <alt_tse_phy_set_common_speed+0x360>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 8023fe0:	e0bffb17 	ldw	r2,-20(fp)
 8023fe4:	10800517 	ldw	r2,20(r2)
 8023fe8:	10801583 	ldbu	r2,86(r2)
 8023fec:	10c03fcc 	andi	r3,r2,255
 8023ff0:	e0bffb17 	ldw	r2,-20(fp)
 8023ff4:	10800517 	ldw	r2,20(r2)
 8023ff8:	108015c3 	ldbu	r2,87(r2)
 8023ffc:	10803fcc 	andi	r2,r2,255
 8024000:	01c00044 	movi	r7,1
 8024004:	100d883a 	mov	r6,r2
 8024008:	180b883a 	mov	r5,r3
 802400c:	e13ffb17 	ldw	r4,-20(fp)
 8024010:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8024014:	e0bffdc5 	stb	r2,-9(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 8024018:	e0bffdc3 	ldbu	r2,-9(fp)
 802401c:	e0fff317 	ldw	r3,-52(fp)
 8024020:	18800326 	beq	r3,r2,8024030 <alt_tse_phy_set_common_speed+0x378>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 8024024:	01427104 	movi	r5,2500
 8024028:	e13ffb17 	ldw	r4,-20(fp)
 802402c:	8022b040 	call	8022b04 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 8024030:	e0bffb17 	ldw	r2,-20(fp)
 8024034:	10800517 	ldw	r2,20(r2)
 8024038:	10801583 	ldbu	r2,86(r2)
 802403c:	10c03fcc 	andi	r3,r2,255
 8024040:	e0bffb17 	ldw	r2,-20(fp)
 8024044:	10800517 	ldw	r2,20(r2)
 8024048:	10801603 	ldbu	r2,88(r2)
 802404c:	10803fcc 	andi	r2,r2,255
 8024050:	01c00044 	movi	r7,1
 8024054:	100d883a 	mov	r6,r2
 8024058:	180b883a 	mov	r5,r3
 802405c:	e13ffb17 	ldw	r4,-20(fp)
 8024060:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 8024064:	e0bff585 	stb	r2,-42(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 8024068:	e0bff917 	ldw	r2,-28(fp)
 802406c:	10800017 	ldw	r2,0(r2)
 8024070:	1007883a 	mov	r3,r2
 8024074:	e0bff583 	ldbu	r2,-42(fp)
 8024078:	100b883a 	mov	r5,r2
 802407c:	1809883a 	mov	r4,r3
 8024080:	80209b40 	call	80209b4 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 8024084:	e43ff887 	ldb	r16,-30(fp)
 8024088:	e47ff8c7 	ldb	r17,-29(fp)
 802408c:	01c00404 	movi	r7,16
 8024090:	000d883a 	mov	r6,zero
 8024094:	01400044 	movi	r5,1
 8024098:	e13ffb17 	ldw	r4,-20(fp)
 802409c:	80216840 	call	8021684 <alt_tse_phy_rd_mdio_reg>
 80240a0:	100f883a 	mov	r7,r2
 80240a4:	880d883a 	mov	r6,r17
 80240a8:	800b883a 	mov	r5,r16
 80240ac:	01020174 	movhi	r4,2053
 80240b0:	21097904 	addi	r4,r4,9700
 80240b4:	8003b840 	call	8003b84 <printf>
 80240b8:	00000106 	br	80240c0 <alt_tse_phy_set_common_speed+0x408>
            continue;
 80240bc:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
 80240c0:	e0bffc17 	ldw	r2,-16(fp)
 80240c4:	10800044 	addi	r2,r2,1
 80240c8:	e0bffc15 	stw	r2,-16(fp)
 80240cc:	e0bff417 	ldw	r2,-48(fp)
 80240d0:	10800003 	ldbu	r2,0(r2)
 80240d4:	10803fcc 	andi	r2,r2,255
 80240d8:	e0fffc17 	ldw	r3,-16(fp)
 80240dc:	18bf2116 	blt	r3,r2,8023d64 <alt_tse_phy_set_common_speed+0xac>
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 80240e0:	e0fff887 	ldb	r3,-30(fp)
 80240e4:	e0bff317 	ldw	r2,-52(fp)
 80240e8:	108000a0 	cmpeqi	r2,r2,2
 80240ec:	1000071e 	bne	r2,zero,802410c <alt_tse_phy_set_common_speed+0x454>
 80240f0:	e0bff317 	ldw	r2,-52(fp)
 80240f4:	10800058 	cmpnei	r2,r2,1
 80240f8:	1000021e 	bne	r2,zero,8024104 <alt_tse_phy_set_common_speed+0x44c>
 80240fc:	00801904 	movi	r2,100
 8024100:	00000306 	br	8024110 <alt_tse_phy_set_common_speed+0x458>
 8024104:	00800284 	movi	r2,10
 8024108:	00000106 	br	8024110 <alt_tse_phy_set_common_speed+0x458>
 802410c:	0080fa04 	movi	r2,1000
 8024110:	100d883a 	mov	r6,r2
 8024114:	180b883a 	mov	r5,r3
 8024118:	01020174 	movhi	r4,2053
 802411c:	21098504 	addi	r4,r4,9748
 8024120:	8003b840 	call	8003b84 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 8024124:	e0bff317 	ldw	r2,-52(fp)
 8024128:	10803fcc 	andi	r2,r2,255
 802412c:	100b883a 	mov	r5,r2
 8024130:	e13ff717 	ldw	r4,-36(fp)
 8024134:	80208d40 	call	80208d4 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 8024138:	e0bff717 	ldw	r2,-36(fp)
 802413c:	10801004 	addi	r2,r2,64
 8024140:	e0fff617 	ldw	r3,-40(fp)
 8024144:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
 8024148:	e0bff317 	ldw	r2,-52(fp)
}
 802414c:	e6fffe04 	addi	sp,fp,-8
 8024150:	dfc00317 	ldw	ra,12(sp)
 8024154:	df000217 	ldw	fp,8(sp)
 8024158:	dc400117 	ldw	r17,4(sp)
 802415c:	dc000017 	ldw	r16,0(sp)
 8024160:	dec00404 	addi	sp,sp,16
 8024164:	f800283a 	ret

08024168 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 8024168:	defffc04 	addi	sp,sp,-16
 802416c:	dfc00315 	stw	ra,12(sp)
 8024170:	df000215 	stw	fp,8(sp)
 8024174:	df000204 	addi	fp,sp,8
 8024178:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 802417c:	e0bffe17 	ldw	r2,-8(fp)
 8024180:	1080a104 	addi	r2,r2,644
 8024184:	10800037 	ldwio	r2,0(r2)
 8024188:	1080080c 	andi	r2,r2,32
 802418c:	1000161e 	bne	r2,zero,80241e8 <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 8024190:	01020174 	movhi	r4,2053
 8024194:	21099604 	addi	r4,r4,9816
 8024198:	8003ca80 	call	8003ca8 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 802419c:	e0bffe17 	ldw	r2,-8(fp)
 80241a0:	1080a004 	addi	r2,r2,640
 80241a4:	10801004 	addi	r2,r2,64
 80241a8:	00c01e04 	movi	r3,120
 80241ac:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 80241b0:	01020174 	movhi	r4,2053
 80241b4:	21099f04 	addi	r4,r4,9852
 80241b8:	8003ca80 	call	8003ca8 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 80241bc:	e0bffe17 	ldw	r2,-8(fp)
 80241c0:	1080a004 	addi	r2,r2,640
 80241c4:	10800037 	ldwio	r2,0(r2)
 80241c8:	e0bfff8d 	sth	r2,-2(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
 80241cc:	e0bffe17 	ldw	r2,-8(fp)
 80241d0:	1080a004 	addi	r2,r2,640
 80241d4:	e13fff8b 	ldhu	r4,-2(fp)
 80241d8:	00e00004 	movi	r3,-32768
 80241dc:	20c6b03a 	or	r3,r4,r3
 80241e0:	18ffffcc 	andi	r3,r3,65535
 80241e4:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 80241e8:	0005883a 	mov	r2,zero
}
 80241ec:	e037883a 	mov	sp,fp
 80241f0:	dfc00117 	ldw	ra,4(sp)
 80241f4:	df000017 	ldw	fp,0(sp)
 80241f8:	dec00204 	addi	sp,sp,8
 80241fc:	f800283a 	ret

08024200 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 8024200:	defffc04 	addi	sp,sp,-16
 8024204:	dfc00315 	stw	ra,12(sp)
 8024208:	df000215 	stw	fp,8(sp)
 802420c:	df000204 	addi	fp,sp,8
 8024210:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 8024214:	e0bffe17 	ldw	r2,-8(fp)
 8024218:	1080bb04 	addi	r2,r2,748
 802421c:	10800037 	ldwio	r2,0(r2)
 8024220:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 8024224:	e0ffff8b 	ldhu	r3,-2(fp)
 8024228:	00bffc04 	movi	r2,-16
 802422c:	1884703a 	and	r2,r3,r2
 8024230:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 8024234:	01020174 	movhi	r4,2053
 8024238:	2109a404 	addi	r4,r4,9872
 802423c:	8003ca80 	call	8003ca8 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 8024240:	e0bffe17 	ldw	r2,-8(fp)
 8024244:	1080bb04 	addi	r2,r2,748
 8024248:	e0ffff8b 	ldhu	r3,-2(fp)
 802424c:	18c003d4 	ori	r3,r3,15
 8024250:	18ffffcc 	andi	r3,r3,65535
 8024254:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 8024258:	01020174 	movhi	r4,2053
 802425c:	2109b004 	addi	r4,r4,9920
 8024260:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 8024264:	e0bffe17 	ldw	r2,-8(fp)
 8024268:	1080b404 	addi	r2,r2,720
 802426c:	10800037 	ldwio	r2,0(r2)
 8024270:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 8024274:	e0ffff8b 	ldhu	r3,-2(fp)
 8024278:	00bfdf44 	movi	r2,-131
 802427c:	1884703a 	and	r2,r3,r2
 8024280:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 8024284:	e0bffe17 	ldw	r2,-8(fp)
 8024288:	1080b404 	addi	r2,r2,720
 802428c:	e0ffff8b 	ldhu	r3,-2(fp)
 8024290:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 8024294:	01020174 	movhi	r4,2053
 8024298:	21099f04 	addi	r4,r4,9852
 802429c:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 80242a0:	e0bffe17 	ldw	r2,-8(fp)
 80242a4:	1080a004 	addi	r2,r2,640
 80242a8:	10800037 	ldwio	r2,0(r2)
 80242ac:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 80242b0:	e0bffe17 	ldw	r2,-8(fp)
 80242b4:	1080a004 	addi	r2,r2,640
 80242b8:	e13fff8b 	ldhu	r4,-2(fp)
 80242bc:	00e00004 	movi	r3,-32768
 80242c0:	20c6b03a 	or	r3,r4,r3
 80242c4:	18ffffcc 	andi	r3,r3,65535
 80242c8:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 80242cc:	00800044 	movi	r2,1
}
 80242d0:	e037883a 	mov	sp,fp
 80242d4:	dfc00117 	ldw	ra,4(sp)
 80242d8:	df000017 	ldw	fp,0(sp)
 80242dc:	dec00204 	addi	sp,sp,8
 80242e0:	f800283a 	ret

080242e4 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 80242e4:	defffc04 	addi	sp,sp,-16
 80242e8:	dfc00315 	stw	ra,12(sp)
 80242ec:	df000215 	stw	fp,8(sp)
 80242f0:	df000204 	addi	fp,sp,8
 80242f4:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 80242f8:	e0bffe17 	ldw	r2,-8(fp)
 80242fc:	1080bb04 	addi	r2,r2,748
 8024300:	10800037 	ldwio	r2,0(r2)
 8024304:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 8024308:	e0ffff8b 	ldhu	r3,-2(fp)
 802430c:	00bffc04 	movi	r2,-16
 8024310:	1884703a 	and	r2,r3,r2
 8024314:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 8024318:	01020174 	movhi	r4,2053
 802431c:	2109ba04 	addi	r4,r4,9960
 8024320:	8003ca80 	call	8003ca8 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 8024324:	e0bffe17 	ldw	r2,-8(fp)
 8024328:	1080bb04 	addi	r2,r2,748
 802432c:	e0ffff8b 	ldhu	r3,-2(fp)
 8024330:	18c00114 	ori	r3,r3,4
 8024334:	18ffffcc 	andi	r3,r3,65535
 8024338:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 802433c:	01020174 	movhi	r4,2053
 8024340:	2109b004 	addi	r4,r4,9920
 8024344:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 8024348:	e0bffe17 	ldw	r2,-8(fp)
 802434c:	1080b404 	addi	r2,r2,720
 8024350:	10800037 	ldwio	r2,0(r2)
 8024354:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 8024358:	e0ffff8b 	ldhu	r3,-2(fp)
 802435c:	00bfdf44 	movi	r2,-131
 8024360:	1884703a 	and	r2,r3,r2
 8024364:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 8024368:	e0bffe17 	ldw	r2,-8(fp)
 802436c:	1080b404 	addi	r2,r2,720
 8024370:	e0ffff8b 	ldhu	r3,-2(fp)
 8024374:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 8024378:	01020174 	movhi	r4,2053
 802437c:	21099f04 	addi	r4,r4,9852
 8024380:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 8024384:	e0bffe17 	ldw	r2,-8(fp)
 8024388:	1080a004 	addi	r2,r2,640
 802438c:	10800037 	ldwio	r2,0(r2)
 8024390:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 8024394:	e0bffe17 	ldw	r2,-8(fp)
 8024398:	1080a004 	addi	r2,r2,640
 802439c:	e13fff8b 	ldhu	r4,-2(fp)
 80243a0:	00e00004 	movi	r3,-32768
 80243a4:	20c6b03a 	or	r3,r4,r3
 80243a8:	18ffffcc 	andi	r3,r3,65535
 80243ac:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 80243b0:	00800044 	movi	r2,1
}
 80243b4:	e037883a 	mov	sp,fp
 80243b8:	dfc00117 	ldw	ra,4(sp)
 80243bc:	df000017 	ldw	fp,0(sp)
 80243c0:	dec00204 	addi	sp,sp,8
 80243c4:	f800283a 	ret

080243c8 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 80243c8:	defffc04 	addi	sp,sp,-16
 80243cc:	dfc00315 	stw	ra,12(sp)
 80243d0:	df000215 	stw	fp,8(sp)
 80243d4:	df000204 	addi	fp,sp,8
 80243d8:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 80243dc:	e0bffe17 	ldw	r2,-8(fp)
 80243e0:	1080bb04 	addi	r2,r2,748
 80243e4:	10800037 	ldwio	r2,0(r2)
 80243e8:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 80243ec:	e0ffff8b 	ldhu	r3,-2(fp)
 80243f0:	00bffc04 	movi	r2,-16
 80243f4:	1884703a 	and	r2,r3,r2
 80243f8:	e0bfff8d 	sth	r2,-2(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 80243fc:	01020174 	movhi	r4,2053
 8024400:	2109cf04 	addi	r4,r4,10044
 8024404:	8003ca80 	call	8003ca8 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 8024408:	e0bffe17 	ldw	r2,-8(fp)
 802440c:	1080bb04 	addi	r2,r2,748
 8024410:	e0ffff8b 	ldhu	r3,-2(fp)
 8024414:	18c002d4 	ori	r3,r3,11
 8024418:	18ffffcc 	andi	r3,r3,65535
 802441c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 8024420:	01020174 	movhi	r4,2053
 8024424:	2109de04 	addi	r4,r4,10104
 8024428:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 802442c:	e0bffe17 	ldw	r2,-8(fp)
 8024430:	1080b404 	addi	r2,r2,720
 8024434:	10800037 	ldwio	r2,0(r2)
 8024438:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 802443c:	e0ffff8b 	ldhu	r3,-2(fp)
 8024440:	00bfdf44 	movi	r2,-131
 8024444:	1884703a 	and	r2,r3,r2
 8024448:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x82;
 802444c:	e0bfff8b 	ldhu	r2,-2(fp)
 8024450:	10802094 	ori	r2,r2,130
 8024454:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 8024458:	e0bffe17 	ldw	r2,-8(fp)
 802445c:	1080b404 	addi	r2,r2,720
 8024460:	e0ffff8b 	ldhu	r3,-2(fp)
 8024464:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 8024468:	01020174 	movhi	r4,2053
 802446c:	21099f04 	addi	r4,r4,9852
 8024470:	8003ca80 	call	8003ca8 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 8024474:	e0bffe17 	ldw	r2,-8(fp)
 8024478:	1080a004 	addi	r2,r2,640
 802447c:	10800037 	ldwio	r2,0(r2)
 8024480:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 8024484:	e0bffe17 	ldw	r2,-8(fp)
 8024488:	1080a004 	addi	r2,r2,640
 802448c:	e13fff8b 	ldhu	r4,-2(fp)
 8024490:	00e00004 	movi	r3,-32768
 8024494:	20c6b03a 	or	r3,r4,r3
 8024498:	18ffffcc 	andi	r3,r3,65535
 802449c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 80244a0:	00800044 	movi	r2,1
    
}
 80244a4:	e037883a 	mov	sp,fp
 80244a8:	dfc00117 	ldw	ra,4(sp)
 80244ac:	df000017 	ldw	fp,0(sp)
 80244b0:	dec00204 	addi	sp,sp,8
 80244b4:	f800283a 	ret

080244b8 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 80244b8:	defffc04 	addi	sp,sp,-16
 80244bc:	df000315 	stw	fp,12(sp)
 80244c0:	df000304 	addi	fp,sp,12
 80244c4:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
 80244c8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 80244cc:	e0bffd17 	ldw	r2,-12(fp)
 80244d0:	1080b004 	addi	r2,r2,704
 80244d4:	10800037 	ldwio	r2,0(r2)
 80244d8:	e0bffe15 	stw	r2,-8(fp)
    
    /* If speed == 10 Mbps */
    if(reg_status & 0x2) {
 80244dc:	e0bffe17 	ldw	r2,-8(fp)
 80244e0:	1080008c 	andi	r2,r2,2
 80244e4:	10000426 	beq	r2,zero,80244f8 <DP83848C_link_status_read+0x40>
        link_status |= 0x8;
 80244e8:	e0bfff17 	ldw	r2,-4(fp)
 80244ec:	10800214 	ori	r2,r2,8
 80244f0:	e0bfff15 	stw	r2,-4(fp)
 80244f4:	00000306 	br	8024504 <DP83848C_link_status_read+0x4c>
    }
    /* Else speed = 100 Mbps */
    else {
        link_status |= 0x4;
 80244f8:	e0bfff17 	ldw	r2,-4(fp)
 80244fc:	10800114 	ori	r2,r2,4
 8024500:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* If duplex == Full */
    if(reg_status & 0x4) {
 8024504:	e0bffe17 	ldw	r2,-8(fp)
 8024508:	1080010c 	andi	r2,r2,4
 802450c:	10000326 	beq	r2,zero,802451c <DP83848C_link_status_read+0x64>
        link_status |= 0x1;
 8024510:	e0bfff17 	ldw	r2,-4(fp)
 8024514:	10800054 	ori	r2,r2,1
 8024518:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
 802451c:	e0bfff17 	ldw	r2,-4(fp)
}
 8024520:	e037883a 	mov	sp,fp
 8024524:	df000017 	ldw	fp,0(sp)
 8024528:	dec00104 	addi	sp,sp,4
 802452c:	f800283a 	ret

08024530 <PEF7071_config>:
/* @Function Description: Additional configuration for PEF7071 Phy
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 PEF7071_config(np_tse_mac *pmac)
{  
 8024530:	defffd04 	addi	sp,sp,-12
 8024534:	df000215 	stw	fp,8(sp)
 8024538:	df000204 	addi	fp,sp,8
 802453c:	e13ffe15 	stw	r4,-8(fp)
    alt_u16 dat;
        
    dat = IORD(&pmac->mdio1.reg14, 0);
 8024540:	e0bffe17 	ldw	r2,-8(fp)
 8024544:	1080b404 	addi	r2,r2,720
 8024548:	10800037 	ldwio	r2,0(r2)
 802454c:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0x3FFF;
 8024550:	e0bfff8b 	ldhu	r2,-2(fp)
 8024554:	108fffcc 	andi	r2,r2,16383
 8024558:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x0100;
 802455c:	e0bfff8b 	ldhu	r2,-2(fp)
 8024560:	10804014 	ori	r2,r2,256
 8024564:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 8024568:	e0bffe17 	ldw	r2,-8(fp)
 802456c:	1080b404 	addi	r2,r2,720
 8024570:	e0ffff8b 	ldhu	r3,-2(fp)
 8024574:	10c00035 	stwio	r3,0(r2)
    
    return 0;
 8024578:	0005883a 	mov	r2,zero
    
}
 802457c:	e037883a 	mov	sp,fp
 8024580:	df000017 	ldw	fp,0(sp)
 8024584:	dec00104 	addi	sp,sp,4
 8024588:	f800283a 	ret

0802458c <PEF7071_link_status_read>:
/* @Function Description: Read link status from PHY specific status register of PEF7071
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 PEF7071_link_status_read(np_tse_mac *pmac)
{
 802458c:	defffc04 	addi	sp,sp,-16
 8024590:	df000315 	stw	fp,12(sp)
 8024594:	df000304 	addi	fp,sp,12
 8024598:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
 802459c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg18 = IORD(&pmac->mdio1.reg18, 0);
 80245a0:	e0bffd17 	ldw	r2,-12(fp)
 80245a4:	1080b804 	addi	r2,r2,736
 80245a8:	10800037 	ldwio	r2,0(r2)
 80245ac:	e0bffe15 	stw	r2,-8(fp)
        
    if ((reg18 & 0x3)==0) { link_status |= 0x8; }  /* If speed == 10 Mbps */
 80245b0:	e0bffe17 	ldw	r2,-8(fp)
 80245b4:	108000cc 	andi	r2,r2,3
 80245b8:	1000031e 	bne	r2,zero,80245c8 <PEF7071_link_status_read+0x3c>
 80245bc:	e0bfff17 	ldw	r2,-4(fp)
 80245c0:	10800214 	ori	r2,r2,8
 80245c4:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==1) { link_status |= 0x4; }  /* Else speed = 100 Mbps */
 80245c8:	e0bffe17 	ldw	r2,-8(fp)
 80245cc:	108000cc 	andi	r2,r2,3
 80245d0:	10800058 	cmpnei	r2,r2,1
 80245d4:	1000031e 	bne	r2,zero,80245e4 <PEF7071_link_status_read+0x58>
 80245d8:	e0bfff17 	ldw	r2,-4(fp)
 80245dc:	10800114 	ori	r2,r2,4
 80245e0:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==2) { link_status |= 0x2; }  /* Else speed = 1000 Mbps */    
 80245e4:	e0bffe17 	ldw	r2,-8(fp)
 80245e8:	108000cc 	andi	r2,r2,3
 80245ec:	10800098 	cmpnei	r2,r2,2
 80245f0:	1000031e 	bne	r2,zero,8024600 <PEF7071_link_status_read+0x74>
 80245f4:	e0bfff17 	ldw	r2,-4(fp)
 80245f8:	10800094 	ori	r2,r2,2
 80245fc:	e0bfff15 	stw	r2,-4(fp)
        
    /* If duplex == Full */
    if(reg18 & 0x8) {
 8024600:	e0bffe17 	ldw	r2,-8(fp)
 8024604:	1080020c 	andi	r2,r2,8
 8024608:	10000326 	beq	r2,zero,8024618 <PEF7071_link_status_read+0x8c>
        link_status |= 0x1;
 802460c:	e0bfff17 	ldw	r2,-4(fp)
 8024610:	10800054 	ori	r2,r2,1
 8024614:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
 8024618:	e0bfff17 	ldw	r2,-4(fp)
}
 802461c:	e037883a 	mov	sp,fp
 8024620:	df000017 	ldw	fp,0(sp)
 8024624:	dec00104 	addi	sp,sp,4
 8024628:	f800283a 	ret

0802462c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 802462c:	defffd04 	addi	sp,sp,-12
 8024630:	dfc00215 	stw	ra,8(sp)
 8024634:	df000115 	stw	fp,4(sp)
 8024638:	df000104 	addi	fp,sp,4
 802463c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 8024640:	d1604404 	addi	r5,gp,-32496
 8024644:	e13fff17 	ldw	r4,-4(fp)
 8024648:	803e9b40 	call	803e9b4 <alt_dev_llist_insert>
}
 802464c:	e037883a 	mov	sp,fp
 8024650:	dfc00117 	ldw	ra,4(sp)
 8024654:	df000017 	ldw	fp,0(sp)
 8024658:	dec00204 	addi	sp,sp,8
 802465c:	f800283a 	ret

08024660 <alt_qspi_controller_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_qspi_controller_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
 8024660:	defff804 	addi	sp,sp,-32
 8024664:	dfc00715 	stw	ra,28(sp)
 8024668:	df000615 	stw	fp,24(sp)
 802466c:	df000604 	addi	fp,sp,24
 8024670:	e13ffb15 	stw	r4,-20(fp)
 8024674:	e17ffa15 	stw	r5,-24(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
 8024678:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller_dev* qspi_flash_info = NULL;
 802467c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 result = 0;
 8024680:	e03ffd15 	stw	zero,-12(fp)
    alt_32 status = 0;
 8024684:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
 8024688:	e0bffb17 	ldw	r2,-20(fp)
 802468c:	1000021e 	bne	r2,zero,8024698 <alt_qspi_controller_lock+0x38>
    {
    	return -EINVAL;
 8024690:	00bffa84 	movi	r2,-22
 8024694:	00003106 	br	802475c <alt_qspi_controller_lock+0xfc>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8024698:	e0bffb17 	ldw	r2,-20(fp)
 802469c:	e0bffe15 	stw	r2,-8(fp)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
 80246a0:	e0bffa17 	ldw	r2,-24(fp)
 80246a4:	1004923a 	slli	r2,r2,8
 80246a8:	e0bfff15 	stw	r2,-4(fp)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_PROTECT_CMD;
 80246ac:	e0bfff17 	ldw	r2,-4(fp)
 80246b0:	108000d4 	ori	r2,r2,3
 80246b4:	e0bfff15 	stw	r2,-4(fp)

    /* write sector protect command to QSPI_MEM_OP register to protect sectors */
    IOWR_ALTERA_QSPI_CONTROLLER_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
 80246b8:	e0bffe17 	ldw	r2,-8(fp)
 80246bc:	10803017 	ldw	r2,192(r2)
 80246c0:	10800304 	addi	r2,r2,12
 80246c4:	1007883a 	mov	r3,r2
 80246c8:	e0bfff17 	ldw	r2,-4(fp)
 80246cc:	18800035 	stwio	r2,0(r3)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_qspi_poll_for_write_in_progress(qspi_flash_info);
 80246d0:	e13ffe17 	ldw	r4,-8(fp)
 80246d4:	80250c40 	call	80250c4 <alt_qspi_poll_for_write_in_progress>
 80246d8:	e0bffc15 	stw	r2,-16(fp)
    if(status != 0)
 80246dc:	e0bffc17 	ldw	r2,-16(fp)
 80246e0:	10000226 	beq	r2,zero,80246ec <alt_qspi_controller_lock+0x8c>
    {
    	return status;
 80246e4:	e0bffc17 	ldw	r2,-16(fp)
 80246e8:	00001c06 	br	802475c <alt_qspi_controller_lock+0xfc>
    }
	
	status = IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base);
 80246ec:	e0bffe17 	ldw	r2,-8(fp)
 80246f0:	10803017 	ldw	r2,192(r2)
 80246f4:	10800037 	ldwio	r2,0(r2)
 80246f8:	e0bffc15 	stw	r2,-16(fp)
	result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
 80246fc:	e0bffc17 	ldw	r2,-16(fp)
 8024700:	1005d0ba 	srai	r2,r2,2
 8024704:	108001cc 	andi	r2,r2,7
 8024708:	e0fffd17 	ldw	r3,-12(fp)
 802470c:	1884b03a 	or	r2,r3,r2
 8024710:	e0bffd15 	stw	r2,-12(fp)
	result |= (status >> 3) & 0x08; /* extract out BP4 */
 8024714:	e0bffc17 	ldw	r2,-16(fp)
 8024718:	1005d0fa 	srai	r2,r2,3
 802471c:	1080020c 	andi	r2,r2,8
 8024720:	e0fffd17 	ldw	r3,-12(fp)
 8024724:	1884b03a 	or	r2,r3,r2
 8024728:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
 802472c:	e0bffc17 	ldw	r2,-16(fp)
 8024730:	1005d07a 	srai	r2,r2,1
 8024734:	1080040c 	andi	r2,r2,16
 8024738:	e0fffd17 	ldw	r3,-12(fp)
 802473c:	1884b03a 	or	r2,r3,r2
 8024740:	e0bffd15 	stw	r2,-12(fp)

	if(result != sectors_to_lock)
 8024744:	e0fffd17 	ldw	r3,-12(fp)
 8024748:	e0bffa17 	ldw	r2,-24(fp)
 802474c:	18800226 	beq	r3,r2,8024758 <alt_qspi_controller_lock+0xf8>
	{
		return -ENOLCK;
 8024750:	00bff484 	movi	r2,-46
 8024754:	00000106 	br	802475c <alt_qspi_controller_lock+0xfc>
	}

    return 0;
 8024758:	0005883a 	mov	r2,zero
}
 802475c:	e037883a 	mov	sp,fp
 8024760:	dfc00117 	ldw	ra,4(sp)
 8024764:	df000017 	ldw	fp,0(sp)
 8024768:	dec00204 	addi	sp,sp,8
 802476c:	f800283a 	ret

08024770 <alt_qspi_controller_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
 8024770:	defffb04 	addi	sp,sp,-20
 8024774:	df000415 	stw	fp,16(sp)
 8024778:	df000404 	addi	fp,sp,16
 802477c:	e13ffe15 	stw	r4,-8(fp)
 8024780:	e17ffd15 	stw	r5,-12(fp)
 8024784:	e1bffc15 	stw	r6,-16(fp)
	alt_flash_dev* flash = NULL;
 8024788:	e03fff15 	stw	zero,-4(fp)
	
	/* return -EINVAL if fd,info and number_of_regions are NULL */
	if(NULL == fd || NULL == info || NULL == number_of_regions)
 802478c:	e0bffe17 	ldw	r2,-8(fp)
 8024790:	10000426 	beq	r2,zero,80247a4 <alt_qspi_controller_get_info+0x34>
 8024794:	e0bffd17 	ldw	r2,-12(fp)
 8024798:	10000226 	beq	r2,zero,80247a4 <alt_qspi_controller_get_info+0x34>
 802479c:	e0bffc17 	ldw	r2,-16(fp)
 80247a0:	1000021e 	bne	r2,zero,80247ac <alt_qspi_controller_get_info+0x3c>
    {
    	return -EINVAL;
 80247a4:	00bffa84 	movi	r2,-22
 80247a8:	00001006 	br	80247ec <alt_qspi_controller_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
 80247ac:	e0bffe17 	ldw	r2,-8(fp)
 80247b0:	e0bfff15 	stw	r2,-4(fp)

    *number_of_regions = flash->number_of_regions;
 80247b4:	e0bfff17 	ldw	r2,-4(fp)
 80247b8:	10c00c17 	ldw	r3,48(r2)
 80247bc:	e0bffc17 	ldw	r2,-16(fp)
 80247c0:	10c00015 	stw	r3,0(r2)

    if (!flash->number_of_regions)
 80247c4:	e0bfff17 	ldw	r2,-4(fp)
 80247c8:	10800c17 	ldw	r2,48(r2)
 80247cc:	1000021e 	bne	r2,zero,80247d8 <alt_qspi_controller_get_info+0x68>
    {
      return -EIO;
 80247d0:	00bffec4 	movi	r2,-5
 80247d4:	00000506 	br	80247ec <alt_qspi_controller_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
 80247d8:	e0bfff17 	ldw	r2,-4(fp)
 80247dc:	10c00d04 	addi	r3,r2,52
 80247e0:	e0bffd17 	ldw	r2,-12(fp)
 80247e4:	10c00015 	stw	r3,0(r2)
    }

    return 0;
 80247e8:	0005883a 	mov	r2,zero
}
 80247ec:	e037883a 	mov	sp,fp
 80247f0:	df000017 	ldw	fp,0(sp)
 80247f4:	dec00104 	addi	sp,sp,4
 80247f8:	f800283a 	ret

080247fc <alt_qspi_controller_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_qspi_controller_erase_block(alt_flash_dev *flash_info, int block_offset)
{
 80247fc:	defff804 	addi	sp,sp,-32
 8024800:	dfc00715 	stw	ra,28(sp)
 8024804:	df000615 	stw	fp,24(sp)
 8024808:	df000604 	addi	fp,sp,24
 802480c:	e13ffb15 	stw	r4,-20(fp)
 8024810:	e17ffa15 	stw	r5,-24(fp)
    alt_32 ret_code = 0;
 8024814:	e03fff15 	stw	zero,-4(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
 8024818:	e03ffe15 	stw	zero,-8(fp)
    alt_qspi_controller_dev* qspi_flash_info = NULL;
 802481c:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 sector_number = 0; 
 8024820:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
 8024824:	e0bffb17 	ldw	r2,-20(fp)
 8024828:	1000021e 	bne	r2,zero,8024834 <alt_qspi_controller_erase_block+0x38>
    {
    	return -EINVAL;
 802482c:	00bffa84 	movi	r2,-22
 8024830:	00003606 	br	802490c <alt_qspi_controller_erase_block+0x110>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8024834:	e0bffb17 	ldw	r2,-20(fp)
 8024838:	e0bffd15 	stw	r2,-12(fp)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
 802483c:	e0bffa17 	ldw	r2,-24(fp)
 8024840:	10000a16 	blt	r2,zero,802486c <alt_qspi_controller_erase_block+0x70>
        || (block_offset >= qspi_flash_info->size_in_bytes)
 8024844:	e0bffd17 	ldw	r2,-12(fp)
 8024848:	10803117 	ldw	r2,196(r2)
 802484c:	e0fffa17 	ldw	r3,-24(fp)
 8024850:	1880062e 	bgeu	r3,r2,802486c <alt_qspi_controller_erase_block+0x70>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0)
 8024854:	e0bffd17 	ldw	r2,-12(fp)
 8024858:	10803417 	ldw	r2,208(r2)
 802485c:	10ffffc4 	addi	r3,r2,-1
 8024860:	e0bffa17 	ldw	r2,-24(fp)
 8024864:	1884703a 	and	r2,r3,r2
 8024868:	10000226 	beq	r2,zero,8024874 <alt_qspi_controller_erase_block+0x78>
    {
    	return -EINVAL;
 802486c:	00bffa84 	movi	r2,-22
 8024870:	00002606 	br	802490c <alt_qspi_controller_erase_block+0x110>
    }

    /* calculate current sector/block number */
    sector_number = (block_offset/(qspi_flash_info->sector_size));
 8024874:	e0fffa17 	ldw	r3,-24(fp)
 8024878:	e0bffd17 	ldw	r2,-12(fp)
 802487c:	10803417 	ldw	r2,208(r2)
 8024880:	100b883a 	mov	r5,r2
 8024884:	1809883a 	mov	r4,r3
 8024888:	8011fdc0 	call	8011fdc <__udivsi3>
 802488c:	e0bffc15 	stw	r2,-16(fp)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_VALUE_MASK;
 8024890:	e0bffc17 	ldw	r2,-16(fp)
 8024894:	1006923a 	slli	r3,r2,8
 8024898:	00804034 	movhi	r2,256
 802489c:	10bfc004 	addi	r2,r2,-256
 80248a0:	1884703a 	and	r2,r3,r2
 80248a4:	e0bffe15 	stw	r2,-8(fp)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_ERASE_CMD;
 80248a8:	e0bffe17 	ldw	r2,-8(fp)
 80248ac:	10800094 	ori	r2,r2,2
 80248b0:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to QSPI_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
 80248b4:	e0bffd17 	ldw	r2,-12(fp)
 80248b8:	10803017 	ldw	r2,192(r2)
 80248bc:	10800304 	addi	r2,r2,12
 80248c0:	1007883a 	mov	r3,r2
 80248c4:	e0bffe17 	ldw	r2,-8(fp)
 80248c8:	18800035 	stwio	r2,0(r3)
	
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base) &
 80248cc:	e0bffd17 	ldw	r2,-12(fp)
 80248d0:	10803017 	ldw	r2,192(r2)
 80248d4:	10800404 	addi	r2,r2,16
 80248d8:	10800037 	ldwio	r2,0(r2)
 80248dc:	1080004c 	andi	r2,r2,1
 80248e0:	10800058 	cmpnei	r2,r2,1
 80248e4:	1000081e 	bne	r2,zero,8024908 <alt_qspi_controller_erase_block+0x10c>
            		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_MASK) ==
            				ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_ACTIVE)
    {
	    /* clear register */
	    /* QSPI_ISR access is write one to clear (W1C) */
    	IOWR_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base,
 80248e8:	e0bffd17 	ldw	r2,-12(fp)
 80248ec:	10803017 	ldw	r2,192(r2)
 80248f0:	10800404 	addi	r2,r2,16
 80248f4:	1007883a 	mov	r3,r2
 80248f8:	00800044 	movi	r2,1
 80248fc:	18800035 	stwio	r2,0(r3)
    		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_MASK );
    	return -EIO; /* erase failed, sector might be protected */
 8024900:	00bffec4 	movi	r2,-5
 8024904:	00000106 	br	802490c <alt_qspi_controller_erase_block+0x110>
    }

    return ret_code;
 8024908:	e0bfff17 	ldw	r2,-4(fp)
}
 802490c:	e037883a 	mov	sp,fp
 8024910:	dfc00117 	ldw	ra,4(sp)
 8024914:	df000017 	ldw	fp,0(sp)
 8024918:	dec00204 	addi	sp,sp,8
 802491c:	f800283a 	ret

08024920 <alt_qspi_controller_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
 8024920:	defff304 	addi	sp,sp,-52
 8024924:	dfc00c15 	stw	ra,48(sp)
 8024928:	df000b15 	stw	fp,44(sp)
 802492c:	df000b04 	addi	fp,sp,44
 8024930:	e13ff815 	stw	r4,-32(fp)
 8024934:	e17ff715 	stw	r5,-36(fp)
 8024938:	e1bff615 	stw	r6,-40(fp)
 802493c:	e1fff515 	stw	r7,-44(fp)
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
 8024940:	e03fff15 	stw	zero,-4(fp)
    alt_u32 remaining_length = length; /** length left to write */
 8024944:	e0800217 	ldw	r2,8(fp)
 8024948:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
 802494c:	e0bff617 	ldw	r2,-40(fp)
 8024950:	e0bffd15 	stw	r2,-12(fp)

    alt_qspi_controller_dev *qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8024954:	e0bff817 	ldw	r2,-32(fp)
 8024958:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
 802495c:	e0bff717 	ldw	r2,-36(fp)
 8024960:	10001e16 	blt	r2,zero,80249dc <alt_qspi_controller_write_block+0xbc>
        || data_offset < 0
 8024964:	e0bff617 	ldw	r2,-40(fp)
 8024968:	10001c16 	blt	r2,zero,80249dc <alt_qspi_controller_write_block+0xbc>
        || NULL == flash_info
 802496c:	e0bff817 	ldw	r2,-32(fp)
 8024970:	10001a26 	beq	r2,zero,80249dc <alt_qspi_controller_write_block+0xbc>
        || NULL == data
 8024974:	e0bff517 	ldw	r2,-44(fp)
 8024978:	10001826 	beq	r2,zero,80249dc <alt_qspi_controller_write_block+0xbc>
        || data_offset >= qspi_flash_info->size_in_bytes
 802497c:	e0bffa17 	ldw	r2,-24(fp)
 8024980:	10803117 	ldw	r2,196(r2)
 8024984:	e0fff617 	ldw	r3,-40(fp)
 8024988:	1880142e 	bgeu	r3,r2,80249dc <alt_qspi_controller_write_block+0xbc>
        || block_offset >= qspi_flash_info->size_in_bytes
 802498c:	e0bffa17 	ldw	r2,-24(fp)
 8024990:	10803117 	ldw	r2,196(r2)
 8024994:	e0fff717 	ldw	r3,-36(fp)
 8024998:	1880102e 	bgeu	r3,r2,80249dc <alt_qspi_controller_write_block+0xbc>
        || length > (qspi_flash_info->sector_size - (data_offset - block_offset))
 802499c:	e0bffa17 	ldw	r2,-24(fp)
 80249a0:	10803417 	ldw	r2,208(r2)
 80249a4:	e13ff617 	ldw	r4,-40(fp)
 80249a8:	e0fff717 	ldw	r3,-36(fp)
 80249ac:	20c7c83a 	sub	r3,r4,r3
 80249b0:	10c7c83a 	sub	r3,r2,r3
 80249b4:	e0800217 	ldw	r2,8(fp)
 80249b8:	18800836 	bltu	r3,r2,80249dc <alt_qspi_controller_write_block+0xbc>
        || length < 0
 80249bc:	e0800217 	ldw	r2,8(fp)
 80249c0:	10000616 	blt	r2,zero,80249dc <alt_qspi_controller_write_block+0xbc>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0) 
 80249c4:	e0bffa17 	ldw	r2,-24(fp)
 80249c8:	10803417 	ldw	r2,208(r2)
 80249cc:	10ffffc4 	addi	r3,r2,-1
 80249d0:	e0bff717 	ldw	r2,-36(fp)
 80249d4:	1884703a 	and	r2,r3,r2
 80249d8:	10004d26 	beq	r2,zero,8024b10 <alt_qspi_controller_write_block+0x1f0>
    {
    	return -EINVAL;
 80249dc:	00bffa84 	movi	r2,-22
 80249e0:	00004e06 	br	8024b1c <alt_qspi_controller_write_block+0x1fc>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
    	alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
 80249e4:	00bfffc4 	movi	r2,-1
 80249e8:	e0bff915 	stw	r2,-28(fp)
    	alt_u32 padding = 0; /** bytes to pad the next word that is written */
 80249ec:	e03ffc15 	stw	zero,-16(fp)
    	alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
 80249f0:	00800104 	movi	r2,4
 80249f4:	e0bffb15 	stw	r2,-20(fp)

        /*
         * we need to make sure the write is word aligned
    	 * this should only be true at most 1 time
    	 */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
 80249f8:	e0bffd17 	ldw	r2,-12(fp)
 80249fc:	108000cc 	andi	r2,r2,3
 8024a00:	10001526 	beq	r2,zero,8024a58 <alt_qspi_controller_write_block+0x138>
        {
        	/*
        	 * data is not word aligned
        	 * calculate padding bytes need to add before start of a data offset
        	 */
            padding = write_offset & (sizeof(alt_u32) - 1);
 8024a04:	e0bffd17 	ldw	r2,-12(fp)
 8024a08:	108000cc 	andi	r2,r2,3
 8024a0c:	e0bffc15 	stw	r2,-16(fp)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
 8024a10:	e0fffb17 	ldw	r3,-20(fp)
 8024a14:	e0bffc17 	ldw	r2,-16(fp)
 8024a18:	1885c83a 	sub	r2,r3,r2
 8024a1c:	e0bffb15 	stw	r2,-20(fp)

            if(bytes_to_copy > remaining_length)
 8024a20:	e0bffb17 	ldw	r2,-20(fp)
 8024a24:	e0fffe17 	ldw	r3,-8(fp)
 8024a28:	1880022e 	bgeu	r3,r2,8024a34 <alt_qspi_controller_write_block+0x114>
            {
            	bytes_to_copy = remaining_length;
 8024a2c:	e0bffe17 	ldw	r2,-8(fp)
 8024a30:	e0bffb15 	stw	r2,-20(fp)
            }

            write_offset = write_offset - padding;
 8024a34:	e0fffd17 	ldw	r3,-12(fp)
 8024a38:	e0bffc17 	ldw	r2,-16(fp)
 8024a3c:	1885c83a 	sub	r2,r3,r2
 8024a40:	e0bffd15 	stw	r2,-12(fp)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
 8024a44:	e0bffd17 	ldw	r2,-12(fp)
 8024a48:	108000cc 	andi	r2,r2,3
 8024a4c:	10000726 	beq	r2,zero,8024a6c <alt_qspi_controller_write_block+0x14c>
            {
            	return -EINVAL;
 8024a50:	00bffa84 	movi	r2,-22
 8024a54:	00003106 	br	8024b1c <alt_qspi_controller_write_block+0x1fc>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
 8024a58:	e0bffb17 	ldw	r2,-20(fp)
 8024a5c:	e0fffe17 	ldw	r3,-8(fp)
 8024a60:	1880022e 	bgeu	r3,r2,8024a6c <alt_qspi_controller_write_block+0x14c>
            {
            	bytes_to_copy = remaining_length;
 8024a64:	e0bffe17 	ldw	r2,-8(fp)
 8024a68:	e0bffb15 	stw	r2,-20(fp)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
 8024a6c:	e0fff904 	addi	r3,fp,-28
 8024a70:	e0bffc17 	ldw	r2,-16(fp)
 8024a74:	1889883a 	add	r4,r3,r2
 8024a78:	e0fff517 	ldw	r3,-44(fp)
 8024a7c:	e0bfff17 	ldw	r2,-4(fp)
 8024a80:	1885883a 	add	r2,r3,r2
 8024a84:	e1bffb17 	ldw	r6,-20(fp)
 8024a88:	100b883a 	mov	r5,r2
 8024a8c:	80037cc0 	call	80037cc <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
 8024a90:	e0ffff17 	ldw	r3,-4(fp)
 8024a94:	e0bffb17 	ldw	r2,-20(fp)
 8024a98:	1885883a 	add	r2,r3,r2
 8024a9c:	e0bfff15 	stw	r2,-4(fp)
        remaining_length -= bytes_to_copy;
 8024aa0:	e0fffe17 	ldw	r3,-8(fp)
 8024aa4:	e0bffb17 	ldw	r2,-20(fp)
 8024aa8:	1885c83a 	sub	r2,r3,r2
 8024aac:	e0bffe15 	stw	r2,-8(fp)

        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
 8024ab0:	e0bffa17 	ldw	r2,-24(fp)
 8024ab4:	10c02e17 	ldw	r3,184(r2)
 8024ab8:	e0bffd17 	ldw	r2,-12(fp)
 8024abc:	1885883a 	add	r2,r3,r2
 8024ac0:	e0fff917 	ldw	r3,-28(fp)
 8024ac4:	10c00035 	stwio	r3,0(r2)

        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base) &
 8024ac8:	e0bffa17 	ldw	r2,-24(fp)
 8024acc:	10803017 	ldw	r2,192(r2)
 8024ad0:	10800404 	addi	r2,r2,16
 8024ad4:	10800037 	ldwio	r2,0(r2)
 8024ad8:	1080008c 	andi	r2,r2,2
 8024adc:	10800098 	cmpnei	r2,r2,2
 8024ae0:	1000081e 	bne	r2,zero,8024b04 <alt_qspi_controller_write_block+0x1e4>
        		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_MASK) ==
        				ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_ACTIVE)
        {
		    /* clear register */
        	IOWR_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base,
 8024ae4:	e0bffa17 	ldw	r2,-24(fp)
 8024ae8:	10803017 	ldw	r2,192(r2)
 8024aec:	10800404 	addi	r2,r2,16
 8024af0:	1007883a 	mov	r3,r2
 8024af4:	00800084 	movi	r2,2
 8024af8:	18800035 	stwio	r2,0(r3)
			ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_MASK );
        	return -EIO; /** write failed, sector might be protected */
 8024afc:	00bffec4 	movi	r2,-5
 8024b00:	00000606 	br	8024b1c <alt_qspi_controller_write_block+0x1fc>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
 8024b04:	e0bffd17 	ldw	r2,-12(fp)
 8024b08:	10800104 	addi	r2,r2,4
 8024b0c:	e0bffd15 	stw	r2,-12(fp)
    while (remaining_length > 0)
 8024b10:	e0bffe17 	ldw	r2,-8(fp)
 8024b14:	103fb31e 	bne	r2,zero,80249e4 <alt_qspi_controller_write_block+0xc4>
    }

    return 0;
 8024b18:	0005883a 	mov	r2,zero
}
 8024b1c:	e037883a 	mov	sp,fp
 8024b20:	dfc00117 	ldw	ra,4(sp)
 8024b24:	df000017 	ldw	fp,0(sp)
 8024b28:	dec00204 	addi	sp,sp,8
 8024b2c:	f800283a 	ret

08024b30 <alt_qspi_controller_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
 8024b30:	defff004 	addi	sp,sp,-64
 8024b34:	dfc00f15 	stw	ra,60(sp)
 8024b38:	df000e15 	stw	fp,56(sp)
 8024b3c:	df000e04 	addi	fp,sp,56
 8024b40:	e13ff615 	stw	r4,-40(fp)
 8024b44:	e17ff515 	stw	r5,-44(fp)
 8024b48:	e1bff415 	stw	r6,-48(fp)
 8024b4c:	e1fff315 	stw	r7,-52(fp)
    alt_32 ret_code = 0;
 8024b50:	e03fff15 	stw	zero,-4(fp)

    alt_qspi_controller_dev *qspi_flash_info = NULL;
 8024b54:	e03ff915 	stw	zero,-28(fp)

    alt_u32 write_offset = offset; /** address of next byte to write */
 8024b58:	e0bff517 	ldw	r2,-44(fp)
 8024b5c:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 remaining_length = length; /** length of write data left to be written */
 8024b60:	e0bff317 	ldw	r2,-52(fp)
 8024b64:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
 8024b68:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 i = 0;
 8024b6c:	e03ffb15 	stw	zero,-20(fp)

    /* return -EINVAL if flash_info and src_addr are NULL */
	if(NULL == flash_info || NULL == src_addr)
 8024b70:	e0bff617 	ldw	r2,-40(fp)
 8024b74:	10000226 	beq	r2,zero,8024b80 <alt_qspi_controller_write+0x50>
 8024b78:	e0bff417 	ldw	r2,-48(fp)
 8024b7c:	1000021e 	bne	r2,zero,8024b88 <alt_qspi_controller_write+0x58>
    {
    	return -EINVAL;
 8024b80:	00bffa84 	movi	r2,-22
 8024b84:	00005f06 	br	8024d04 <alt_qspi_controller_write+0x1d4>
    }
	
	qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8024b88:	e0bff617 	ldw	r2,-40(fp)
 8024b8c:	e0bff915 	stw	r2,-28(fp)
	
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
 8024b90:	e0bff517 	ldw	r2,-44(fp)
 8024b94:	e0fff317 	ldw	r3,-52(fp)
 8024b98:	180d883a 	mov	r6,r3
 8024b9c:	100b883a 	mov	r5,r2
 8024ba0:	e13ff917 	ldw	r4,-28(fp)
 8024ba4:	80250280 	call	8025028 <alt_qspi_validate_read_write_arguments>
 8024ba8:	e0bfff15 	stw	r2,-4(fp)

	if(0 != ret_code)
 8024bac:	e0bfff17 	ldw	r2,-4(fp)
 8024bb0:	10000226 	beq	r2,zero,8024bbc <alt_qspi_controller_write+0x8c>
	{
		return ret_code;
 8024bb4:	e0bfff17 	ldw	r2,-4(fp)
 8024bb8:	00005206 	br	8024d04 <alt_qspi_controller_write+0x1d4>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
 8024bbc:	e0fff517 	ldw	r3,-44(fp)
 8024bc0:	e0bff917 	ldw	r2,-28(fp)
 8024bc4:	10803417 	ldw	r2,208(r2)
 8024bc8:	100b883a 	mov	r5,r2
 8024bcc:	1809883a 	mov	r4,r3
 8024bd0:	8011fdc0 	call	8011fdc <__udivsi3>
 8024bd4:	e0bffb15 	stw	r2,-20(fp)
 8024bd8:	00004306 	br	8024ce8 <alt_qspi_controller_write+0x1b8>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
 8024bdc:	e03ff815 	stw	zero,-32(fp)
    	alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
 8024be0:	e03ffa15 	stw	zero,-24(fp)
        alt_u32 length_to_write = 0; /** length to write to current sector */
 8024be4:	e03ff715 	stw	zero,-36(fp)

    	if(0 >= remaining_length)
 8024be8:	e0bffd17 	ldw	r2,-12(fp)
 8024bec:	10004326 	beq	r2,zero,8024cfc <alt_qspi_controller_write+0x1cc>
    	{
    		break; /* out of data to write */
    	}

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(qspi_flash_info->sector_size - 1);
 8024bf0:	e0bff917 	ldw	r2,-28(fp)
 8024bf4:	10803417 	ldw	r2,208(r2)
 8024bf8:	0085c83a 	sub	r2,zero,r2
 8024bfc:	e0fffe17 	ldw	r3,-8(fp)
 8024c00:	1884703a 	and	r2,r3,r2
 8024c04:	e0bff815 	stw	r2,-32(fp)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
 8024c08:	e0fff817 	ldw	r3,-32(fp)
 8024c0c:	e0bffe17 	ldw	r2,-8(fp)
 8024c10:	18800426 	beq	r3,r2,8024c24 <alt_qspi_controller_write+0xf4>
        {
            offset_within_current_sector = write_offset - block_offset;
 8024c14:	e0fffe17 	ldw	r3,-8(fp)
 8024c18:	e0bff817 	ldw	r2,-32(fp)
 8024c1c:	1885c83a 	sub	r2,r3,r2
 8024c20:	e0bffa15 	stw	r2,-24(fp)
        }

        /* erase sector */
        ret_code = alt_qspi_controller_erase_block(flash_info, block_offset);
 8024c24:	e0bff817 	ldw	r2,-32(fp)
 8024c28:	100b883a 	mov	r5,r2
 8024c2c:	e13ff617 	ldw	r4,-40(fp)
 8024c30:	80247fc0 	call	80247fc <alt_qspi_controller_erase_block>
 8024c34:	e0bfff15 	stw	r2,-4(fp)

        if(0 != ret_code)
 8024c38:	e0bfff17 	ldw	r2,-4(fp)
 8024c3c:	10000226 	beq	r2,zero,8024c48 <alt_qspi_controller_write+0x118>
        {
            return ret_code;
 8024c40:	e0bfff17 	ldw	r2,-4(fp)
 8024c44:	00002f06 	br	8024d04 <alt_qspi_controller_write+0x1d4>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(qspi_flash_info->sector_size - offset_within_current_sector, 
 8024c48:	e0bff917 	ldw	r2,-28(fp)
 8024c4c:	10c03417 	ldw	r3,208(r2)
 8024c50:	e0bffa17 	ldw	r2,-24(fp)
 8024c54:	1887c83a 	sub	r3,r3,r2
 8024c58:	e0bffd17 	ldw	r2,-12(fp)
 8024c5c:	1880012e 	bgeu	r3,r2,8024c64 <alt_qspi_controller_write+0x134>
 8024c60:	1805883a 	mov	r2,r3
 8024c64:	e0bff715 	stw	r2,-36(fp)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_qspi_controller_write_block(flash_info, block_offset, write_offset,
 8024c68:	e13ff817 	ldw	r4,-32(fp)
 8024c6c:	e17ffe17 	ldw	r5,-8(fp)
 8024c70:	e0fff417 	ldw	r3,-48(fp)
 8024c74:	e0bffc17 	ldw	r2,-16(fp)
 8024c78:	1887883a 	add	r3,r3,r2
 8024c7c:	e0bff717 	ldw	r2,-36(fp)
 8024c80:	d8800015 	stw	r2,0(sp)
 8024c84:	180f883a 	mov	r7,r3
 8024c88:	280d883a 	mov	r6,r5
 8024c8c:	200b883a 	mov	r5,r4
 8024c90:	e13ff617 	ldw	r4,-40(fp)
 8024c94:	80249200 	call	8024920 <alt_qspi_controller_write_block>
 8024c98:	e0bfff15 	stw	r2,-4(fp)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
 8024c9c:	e0bfff17 	ldw	r2,-4(fp)
 8024ca0:	10000226 	beq	r2,zero,8024cac <alt_qspi_controller_write+0x17c>
        {
            return ret_code;
 8024ca4:	e0bfff17 	ldw	r2,-4(fp)
 8024ca8:	00001606 	br	8024d04 <alt_qspi_controller_write+0x1d4>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
 8024cac:	e0fffd17 	ldw	r3,-12(fp)
 8024cb0:	e0bff717 	ldw	r2,-36(fp)
 8024cb4:	1885c83a 	sub	r2,r3,r2
 8024cb8:	e0bffd15 	stw	r2,-12(fp)
        buffer_offset += length_to_write;
 8024cbc:	e0fffc17 	ldw	r3,-16(fp)
 8024cc0:	e0bff717 	ldw	r2,-36(fp)
 8024cc4:	1885883a 	add	r2,r3,r2
 8024cc8:	e0bffc15 	stw	r2,-16(fp)
        write_offset += length_to_write; 
 8024ccc:	e0fffe17 	ldw	r3,-8(fp)
 8024cd0:	e0bff717 	ldw	r2,-36(fp)
 8024cd4:	1885883a 	add	r2,r3,r2
 8024cd8:	e0bffe15 	stw	r2,-8(fp)
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
 8024cdc:	e0bffb17 	ldw	r2,-20(fp)
 8024ce0:	10800044 	addi	r2,r2,1
 8024ce4:	e0bffb15 	stw	r2,-20(fp)
 8024ce8:	e0bff917 	ldw	r2,-28(fp)
 8024cec:	10803317 	ldw	r2,204(r2)
 8024cf0:	e0fffb17 	ldw	r3,-20(fp)
 8024cf4:	18bfb936 	bltu	r3,r2,8024bdc <alt_qspi_controller_write+0xac>
 8024cf8:	00000106 	br	8024d00 <alt_qspi_controller_write+0x1d0>
    		break; /* out of data to write */
 8024cfc:	0001883a 	nop
    }

    return ret_code;
 8024d00:	e0bfff17 	ldw	r2,-4(fp)
}
 8024d04:	e037883a 	mov	sp,fp
 8024d08:	dfc00117 	ldw	ra,4(sp)
 8024d0c:	df000017 	ldw	fp,0(sp)
 8024d10:	dec00204 	addi	sp,sp,8
 8024d14:	f800283a 	ret

08024d18 <alt_qspi_controller_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
 8024d18:	defff804 	addi	sp,sp,-32
 8024d1c:	dfc00715 	stw	ra,28(sp)
 8024d20:	df000615 	stw	fp,24(sp)
 8024d24:	df000604 	addi	fp,sp,24
 8024d28:	e13ffd15 	stw	r4,-12(fp)
 8024d2c:	e17ffc15 	stw	r5,-16(fp)
 8024d30:	e1bffb15 	stw	r6,-20(fp)
 8024d34:	e1fffa15 	stw	r7,-24(fp)
    alt_32 ret_code = 0;
 8024d38:	e03fff15 	stw	zero,-4(fp)
	alt_qspi_controller_dev *qspi_flash_info = NULL;
 8024d3c:	e03ffe15 	stw	zero,-8(fp)
	
	/* return -EINVAL if flash_info and dest_addr are NULL */
	if(NULL == flash_info || NULL == dest_addr)
 8024d40:	e0bffd17 	ldw	r2,-12(fp)
 8024d44:	10000226 	beq	r2,zero,8024d50 <alt_qspi_controller_read+0x38>
 8024d48:	e0bffb17 	ldw	r2,-20(fp)
 8024d4c:	1000021e 	bne	r2,zero,8024d58 <alt_qspi_controller_read+0x40>
    {
    	return -EINVAL;
 8024d50:	00bffa84 	movi	r2,-22
 8024d54:	00001606 	br	8024db0 <alt_qspi_controller_read+0x98>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8024d58:	e0bffd17 	ldw	r2,-12(fp)
 8024d5c:	e0bffe15 	stw	r2,-8(fp)

	/* validate arguments */
	ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
 8024d60:	e0bffc17 	ldw	r2,-16(fp)
 8024d64:	e0fffa17 	ldw	r3,-24(fp)
 8024d68:	180d883a 	mov	r6,r3
 8024d6c:	100b883a 	mov	r5,r2
 8024d70:	e13ffe17 	ldw	r4,-8(fp)
 8024d74:	80250280 	call	8025028 <alt_qspi_validate_read_write_arguments>
 8024d78:	e0bfff15 	stw	r2,-4(fp)

	/* copy data from flash to destination address */
	if(0 == ret_code)
 8024d7c:	e0bfff17 	ldw	r2,-4(fp)
 8024d80:	10000a1e 	bne	r2,zero,8024dac <alt_qspi_controller_read+0x94>
	{
		memcpy(dest_addr, (alt_u8*)qspi_flash_info->data_base + offset, length);
 8024d84:	e0bffe17 	ldw	r2,-8(fp)
 8024d88:	10c02e17 	ldw	r3,184(r2)
 8024d8c:	e0bffc17 	ldw	r2,-16(fp)
 8024d90:	1885883a 	add	r2,r3,r2
 8024d94:	1007883a 	mov	r3,r2
 8024d98:	e0bffa17 	ldw	r2,-24(fp)
 8024d9c:	100d883a 	mov	r6,r2
 8024da0:	180b883a 	mov	r5,r3
 8024da4:	e13ffb17 	ldw	r4,-20(fp)
 8024da8:	80037cc0 	call	80037cc <memcpy>
	}

    return ret_code;
 8024dac:	e0bfff17 	ldw	r2,-4(fp)
}
 8024db0:	e037883a 	mov	sp,fp
 8024db4:	dfc00117 	ldw	ra,4(sp)
 8024db8:	df000017 	ldw	fp,0(sp)
 8024dbc:	dec00204 	addi	sp,sp,8
 8024dc0:	f800283a 	ret

08024dc4 <altera_qspi_controller_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_qspi_controller_init(alt_qspi_controller_dev *flash)
{
 8024dc4:	defffa04 	addi	sp,sp,-24
 8024dc8:	dfc00515 	stw	ra,20(sp)
 8024dcc:	df000415 	stw	fp,16(sp)
 8024dd0:	df000404 	addi	fp,sp,16
 8024dd4:	e13ffc15 	stw	r4,-16(fp)
	alt_u32 silicon_id = 0;
 8024dd8:	e03fff15 	stw	zero,-4(fp)
	alt_u32 size_in_bytes = 0;
 8024ddc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 number_of_sectors = 0;
 8024de0:	e03ffe15 	stw	zero,-8(fp)

    /* return -EINVAL if flash is NULL */
	if(NULL == flash)
 8024de4:	e0bffc17 	ldw	r2,-16(fp)
 8024de8:	1000021e 	bne	r2,zero,8024df4 <altera_qspi_controller_init+0x30>
    {
    	return -EINVAL;
 8024dec:	00bffa84 	movi	r2,-22
 8024df0:	00008806 	br	8025014 <altera_qspi_controller_init+0x250>
    }
	
	/* return -ENODEV if CSR slave is not attached */
	if(NULL == (void *)flash->csr_base)
 8024df4:	e0bffc17 	ldw	r2,-16(fp)
 8024df8:	10803017 	ldw	r2,192(r2)
 8024dfc:	1000021e 	bne	r2,zero,8024e08 <altera_qspi_controller_init+0x44>
	{
		return -ENODEV;
 8024e00:	00bffb44 	movi	r2,-19
 8024e04:	00008306 	br	8025014 <altera_qspi_controller_init+0x250>
	 *
	 * In both cases, we can determine the number of sectors, which we can use
	 * to calculate a size. We compare that size to the system.h value to make sure
	 * the QSPI soft IP was configured correctly.
	 */
	if(0 == flash->is_epcs)
 8024e08:	e0bffc17 	ldw	r2,-16(fp)
 8024e0c:	10803217 	ldw	r2,200(r2)
 8024e10:	1000351e 	bne	r2,zero,8024ee8 <altera_qspi_controller_init+0x124>
	{
		/* If we're an EPCQ or QSPI, we read QSPI_RD_RDID for the silicon ID */
		silicon_id = IORD_ALTERA_QSPI_CONTROLLER_RDID(flash->csr_base);
 8024e14:	e0bffc17 	ldw	r2,-16(fp)
 8024e18:	10803017 	ldw	r2,192(r2)
 8024e1c:	10800204 	addi	r2,r2,8
 8024e20:	10800037 	ldwio	r2,0(r2)
 8024e24:	e0bfff15 	stw	r2,-4(fp)
		silicon_id &= ALTERA_QSPI_CONTROLLER_RDID_MASK;
 8024e28:	e0bfff17 	ldw	r2,-4(fp)
 8024e2c:	10803fcc 	andi	r2,r2,255
 8024e30:	e0bfff15 	stw	r2,-4(fp)
 8024e34:	e0bfff17 	ldw	r2,-4(fp)
 8024e38:	10bffac4 	addi	r2,r2,-21
 8024e3c:	10c00368 	cmpgeui	r3,r2,13
 8024e40:	1800271e 	bne	r3,zero,8024ee0 <altera_qspi_controller_init+0x11c>
 8024e44:	100690ba 	slli	r3,r2,2
 8024e48:	008200b4 	movhi	r2,2050
 8024e4c:	1885883a 	add	r2,r3,r2
 8024e50:	10939617 	ldw	r2,20056(r2)
 8024e54:	1000683a 	jmp	r2
 8024e58:	08024e8c 	andi	zero,at,2362
 8024e5c:	08024e98 	cmpnei	zero,at,2362
 8024e60:	08024ea4 	muli	zero,at,2362
 8024e64:	08024eb0 	cmpltui	zero,at,2362
 8024e68:	08024ebc 	xorhi	zero,at,2362
 8024e6c:	08024ee0 	cmpeqi	zero,at,2363
 8024e70:	08024ee0 	cmpeqi	zero,at,2363
 8024e74:	08024ee0 	cmpeqi	zero,at,2363
 8024e78:	08024ee0 	cmpeqi	zero,at,2363
 8024e7c:	08024ee0 	cmpeqi	zero,at,2363
 8024e80:	08024ee0 	cmpeqi	zero,at,2363
 8024e84:	08024ec8 	cmpgei	zero,at,2363
 8024e88:	08024ed4 	ori	zero,at,2363
		/*EPCQ and QSPI share the same ID for the same capacity*/
		switch(silicon_id)
		{
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI16:
			{
				number_of_sectors = 32;
 8024e8c:	00800804 	movi	r2,32
 8024e90:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024e94:	00003406 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI32:
			{
				number_of_sectors = 64;
 8024e98:	00801004 	movi	r2,64
 8024e9c:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024ea0:	00003106 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI64:
			{
				number_of_sectors = 128;
 8024ea4:	00802004 	movi	r2,128
 8024ea8:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024eac:	00002e06 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI128:
			{
				number_of_sectors = 256;
 8024eb0:	00804004 	movi	r2,256
 8024eb4:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024eb8:	00002b06 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI256:
			{
				number_of_sectors = 512;
 8024ebc:	00808004 	movi	r2,512
 8024ec0:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024ec4:	00002806 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI512:
			{
				number_of_sectors = 1024;
 8024ec8:	00810004 	movi	r2,1024
 8024ecc:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024ed0:	00002506 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI1024:
			{
				number_of_sectors = 2048;
 8024ed4:	00820004 	movi	r2,2048
 8024ed8:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024edc:	00002206 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			default:
			{
				return -ENODEV;
 8024ee0:	00bffb44 	movi	r2,-19
 8024ee4:	00004b06 	br	8025014 <altera_qspi_controller_init+0x250>
			}
		}
	}
	else {
		/* If we're an EPCS, we read QSPI_RD_SID for the silicon ID */
		silicon_id = IORD_ALTERA_QSPI_CONTROLLER_SID(flash->csr_base);
 8024ee8:	e0bffc17 	ldw	r2,-16(fp)
 8024eec:	10803017 	ldw	r2,192(r2)
 8024ef0:	10800104 	addi	r2,r2,4
 8024ef4:	10800037 	ldwio	r2,0(r2)
 8024ef8:	e0bfff15 	stw	r2,-4(fp)
		silicon_id &= ALTERA_QSPI_CONTROLLER_SID_MASK;
 8024efc:	e0bfff17 	ldw	r2,-4(fp)
 8024f00:	10803fcc 	andi	r2,r2,255
 8024f04:	e0bfff15 	stw	r2,-4(fp)

		/* Determine which EPCS device so we can figure out various properties */
		switch(silicon_id)
 8024f08:	e0bfff17 	ldw	r2,-4(fp)
 8024f0c:	10800620 	cmpeqi	r2,r2,24
 8024f10:	1000101e 	bne	r2,zero,8024f54 <altera_qspi_controller_init+0x190>
 8024f14:	e0bfff17 	ldw	r2,-4(fp)
 8024f18:	10800668 	cmpgeui	r2,r2,25
 8024f1c:	1000101e 	bne	r2,zero,8024f60 <altera_qspi_controller_init+0x19c>
 8024f20:	e0bfff17 	ldw	r2,-4(fp)
 8024f24:	10800520 	cmpeqi	r2,r2,20
 8024f28:	1000041e 	bne	r2,zero,8024f3c <altera_qspi_controller_init+0x178>
 8024f2c:	e0bfff17 	ldw	r2,-4(fp)
 8024f30:	108005a0 	cmpeqi	r2,r2,22
 8024f34:	1000041e 	bne	r2,zero,8024f48 <altera_qspi_controller_init+0x184>
 8024f38:	00000906 	br	8024f60 <altera_qspi_controller_init+0x19c>
		{
			case ALTERA_QSPI_CONTROLLER_SID_EPCS16:
			{
				number_of_sectors = 32;
 8024f3c:	00800804 	movi	r2,32
 8024f40:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024f44:	00000806 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_SID_EPCS64:
			{
				number_of_sectors = 128;
 8024f48:	00802004 	movi	r2,128
 8024f4c:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024f50:	00000506 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_SID_EPCS128:
			{
				number_of_sectors = 256;
 8024f54:	00804004 	movi	r2,256
 8024f58:	e0bffe15 	stw	r2,-8(fp)
				break;
 8024f5c:	00000206 	br	8024f68 <altera_qspi_controller_init+0x1a4>
			}
			default:
			{
				return -ENODEV;
 8024f60:	00bffb44 	movi	r2,-19
 8024f64:	00002b06 	br	8025014 <altera_qspi_controller_init+0x250>
			}
		}
	}

	/* Calculate size of flash based on number of sectors */
	size_in_bytes = number_of_sectors * flash->sector_size;
 8024f68:	e0bffc17 	ldw	r2,-16(fp)
 8024f6c:	10803417 	ldw	r2,208(r2)
 8024f70:	e0fffe17 	ldw	r3,-8(fp)
 8024f74:	1885383a 	mul	r2,r3,r2
 8024f78:	e0bffd15 	stw	r2,-12(fp)
	/*
	 * Make sure calculated size is the same size given in system.h
	 * Also check number of sectors is the same number given in system.h
	 * Otherwise the QSPI IP was not configured correctly
	 */
	if(	size_in_bytes != flash->size_in_bytes ||
 8024f7c:	e0bffc17 	ldw	r2,-16(fp)
 8024f80:	10803117 	ldw	r2,196(r2)
 8024f84:	e0fffd17 	ldw	r3,-12(fp)
 8024f88:	1880041e 	bne	r3,r2,8024f9c <altera_qspi_controller_init+0x1d8>
			number_of_sectors != flash->number_of_sectors)
 8024f8c:	e0bffc17 	ldw	r2,-16(fp)
 8024f90:	10803317 	ldw	r2,204(r2)
	if(	size_in_bytes != flash->size_in_bytes ||
 8024f94:	e0fffe17 	ldw	r3,-8(fp)
 8024f98:	18800426 	beq	r3,r2,8024fac <altera_qspi_controller_init+0x1e8>
	{
		flash->dev.number_of_regions = 0;
 8024f9c:	e0bffc17 	ldw	r2,-16(fp)
 8024fa0:	10000c15 	stw	zero,48(r2)
		return -ENODEV;
 8024fa4:	00bffb44 	movi	r2,-19
 8024fa8:	00001a06 	br	8025014 <altera_qspi_controller_init+0x250>
	}
	else
	{
		flash->silicon_id = silicon_id;
 8024fac:	e0bffc17 	ldw	r2,-16(fp)
 8024fb0:	e0ffff17 	ldw	r3,-4(fp)
 8024fb4:	10c03615 	stw	r3,216(r2)
		flash->number_of_sectors = number_of_sectors;
 8024fb8:	e0bffc17 	ldw	r2,-16(fp)
 8024fbc:	e0fffe17 	ldw	r3,-8(fp)
 8024fc0:	10c03315 	stw	r3,204(r2)

		/*
		 * populate fields of region_info required to conform to HAL API
		 * create 1 region that composed of "number_of_sectors" blocks
		 */
		flash->dev.number_of_regions = 1;
 8024fc4:	e0bffc17 	ldw	r2,-16(fp)
 8024fc8:	00c00044 	movi	r3,1
 8024fcc:	10c00c15 	stw	r3,48(r2)
		flash->dev.region_info[0].offset = 0;
 8024fd0:	e0bffc17 	ldw	r2,-16(fp)
 8024fd4:	10000d15 	stw	zero,52(r2)
		flash->dev.region_info[0].region_size = size_in_bytes;
 8024fd8:	e0fffd17 	ldw	r3,-12(fp)
 8024fdc:	e0bffc17 	ldw	r2,-16(fp)
 8024fe0:	10c00e15 	stw	r3,56(r2)
		flash->dev.region_info[0].number_of_blocks = number_of_sectors;
 8024fe4:	e0fffe17 	ldw	r3,-8(fp)
 8024fe8:	e0bffc17 	ldw	r2,-16(fp)
 8024fec:	10c00f15 	stw	r3,60(r2)
		flash->dev.region_info[0].block_size = flash->sector_size;
 8024ff0:	e0bffc17 	ldw	r2,-16(fp)
 8024ff4:	10803417 	ldw	r2,208(r2)
 8024ff8:	1007883a 	mov	r3,r2
 8024ffc:	e0bffc17 	ldw	r2,-16(fp)
 8025000:	10c01015 	stw	r3,64(r2)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
		alt_flash_device_register(&(flash->dev));
 8025004:	e0bffc17 	ldw	r2,-16(fp)
 8025008:	1009883a 	mov	r4,r2
 802500c:	802462c0 	call	802462c <alt_flash_device_register>


    return 0;
 8025010:	0005883a 	mov	r2,zero
}
 8025014:	e037883a 	mov	sp,fp
 8025018:	dfc00117 	ldw	ra,4(sp)
 802501c:	df000017 	ldw	fp,0(sp)
 8025020:	dec00204 	addi	sp,sp,8
 8025024:	f800283a 	ret

08025028 <alt_qspi_validate_read_write_arguments>:
(
		alt_qspi_controller_dev *flash_info, /** device info */
		alt_u32 offset, /** offset of read/write */
		alt_u32 length /** length of read/write */
)
{
 8025028:	defff904 	addi	sp,sp,-28
 802502c:	df000615 	stw	fp,24(sp)
 8025030:	df000604 	addi	fp,sp,24
 8025034:	e13ffc15 	stw	r4,-16(fp)
 8025038:	e17ffb15 	stw	r5,-20(fp)
 802503c:	e1bffa15 	stw	r6,-24(fp)
    alt_qspi_controller_dev *qspi_flash_info = NULL;
 8025040:	e03fff15 	stw	zero,-4(fp)
    alt_u32 start_address = 0;
 8025044:	e03ffe15 	stw	zero,-8(fp)
    alt_32 end_address = 0;
 8025048:	e03ffd15 	stw	zero,-12(fp)
	
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
 802504c:	e0bffc17 	ldw	r2,-16(fp)
 8025050:	1000021e 	bne	r2,zero,802505c <alt_qspi_validate_read_write_arguments+0x34>
   {
    	return -EINVAL;
 8025054:	00bffa84 	movi	r2,-22
 8025058:	00001606 	br	80250b4 <alt_qspi_validate_read_write_arguments+0x8c>
   }
	
  qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 802505c:	e0bffc17 	ldw	r2,-16(fp)
 8025060:	e0bfff15 	stw	r2,-4(fp)

  start_address = qspi_flash_info->data_base + offset; /** first address of read or write */
 8025064:	e0bfff17 	ldw	r2,-4(fp)
 8025068:	10802e17 	ldw	r2,184(r2)
 802506c:	e0fffb17 	ldw	r3,-20(fp)
 8025070:	1885883a 	add	r2,r3,r2
 8025074:	e0bffe15 	stw	r2,-8(fp)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
 8025078:	e0fffe17 	ldw	r3,-8(fp)
 802507c:	e0bffa17 	ldw	r2,-24(fp)
 8025080:	1885883a 	add	r2,r3,r2
 8025084:	e0bffd15 	stw	r2,-12(fp)

  /* make sure start and end address is less then the end address of the flash */
  if(
		  start_address >= qspi_flash_info->data_end ||
 8025088:	e0bfff17 	ldw	r2,-4(fp)
 802508c:	10802f17 	ldw	r2,188(r2)
  if(
 8025090:	e0fffe17 	ldw	r3,-8(fp)
 8025094:	1880042e 	bgeu	r3,r2,80250a8 <alt_qspi_validate_read_write_arguments+0x80>
		  end_address >= qspi_flash_info->data_end ||
 8025098:	e0bfff17 	ldw	r2,-4(fp)
 802509c:	10802f17 	ldw	r2,188(r2)
 80250a0:	e0fffd17 	ldw	r3,-12(fp)
		  offset < 0 ||
 80250a4:	18800236 	bltu	r3,r2,80250b0 <alt_qspi_validate_read_write_arguments+0x88>
		  length < 0
  )
  {
	  return -EINVAL;
 80250a8:	00bffa84 	movi	r2,-22
 80250ac:	00000106 	br	80250b4 <alt_qspi_validate_read_write_arguments+0x8c>
  }

  return 0;
 80250b0:	0005883a 	mov	r2,zero
}
 80250b4:	e037883a 	mov	sp,fp
 80250b8:	df000017 	ldw	fp,0(sp)
 80250bc:	dec00104 	addi	sp,sp,4
 80250c0:	f800283a 	ret

080250c4 <alt_qspi_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_qspi_poll_for_write_in_progress(alt_qspi_controller_dev* qspi_flash_info)
{  
 80250c4:	defffb04 	addi	sp,sp,-20
 80250c8:	dfc00415 	stw	ra,16(sp)
 80250cc:	df000315 	stw	fp,12(sp)
 80250d0:	df000304 	addi	fp,sp,12
 80250d4:	e13ffd15 	stw	r4,-12(fp)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE > 0
	alt_u32 timeout = ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE;
 80250d8:	008002f4 	movhi	r2,11
 80250dc:	10ab9804 	addi	r2,r2,-20896
 80250e0:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
 80250e4:	e03fff8d 	sth	zero,-2(fp)
#endif

    /* return -EINVAL if qspi_flash_info is NULL */
	if(NULL == qspi_flash_info)
 80250e8:	e0bffd17 	ldw	r2,-12(fp)
 80250ec:	10000c1e 	bne	r2,zero,8025120 <alt_qspi_poll_for_write_in_progress+0x5c>
    {
    	return -EINVAL;
 80250f0:	00bffa84 	movi	r2,-22
 80250f4:	00001106 	br	802513c <alt_qspi_poll_for_write_in_progress+0x78>
	/* while Write in Progress bit is set, we wait */
	while((IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base) &
			ALTERA_QSPI_CONTROLLER_STATUS_WIP_MASK) ==
			ALTERA_QSPI_CONTROLLER_STATUS_WIP_BUSY)
	{
        alt_busy_sleep(1); /* delay 1us */
 80250f8:	01000044 	movi	r4,1
 80250fc:	803e6700 	call	803e670 <alt_busy_sleep>
#if ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE > 0
		if(timeout <= counter )
 8025100:	e0ffff8b 	ldhu	r3,-2(fp)
 8025104:	e0bffe17 	ldw	r2,-8(fp)
 8025108:	18800236 	bltu	r3,r2,8025114 <alt_qspi_poll_for_write_in_progress+0x50>
		{
			return -ETIME;
 802510c:	00bff084 	movi	r2,-62
 8025110:	00000a06 	br	802513c <alt_qspi_poll_for_write_in_progress+0x78>
		}
		
		counter++;
 8025114:	e0bfff8b 	ldhu	r2,-2(fp)
 8025118:	10800044 	addi	r2,r2,1
 802511c:	e0bfff8d 	sth	r2,-2(fp)
	while((IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base) &
 8025120:	e0bffd17 	ldw	r2,-12(fp)
 8025124:	10803017 	ldw	r2,192(r2)
 8025128:	10800037 	ldwio	r2,0(r2)
 802512c:	1080004c 	andi	r2,r2,1
 8025130:	10800060 	cmpeqi	r2,r2,1
 8025134:	103ff01e 	bne	r2,zero,80250f8 <alt_qspi_poll_for_write_in_progress+0x34>
#endif

	}

	return 0;
 8025138:	0005883a 	mov	r2,zero
}
 802513c:	e037883a 	mov	sp,fp
 8025140:	dfc00117 	ldw	ra,4(sp)
 8025144:	df000017 	ldw	fp,0(sp)
 8025148:	dec00204 	addi	sp,sp,8
 802514c:	f800283a 	ret

08025150 <alt_get_errno>:
{
 8025150:	defffe04 	addi	sp,sp,-8
 8025154:	dfc00115 	stw	ra,4(sp)
 8025158:	df000015 	stw	fp,0(sp)
 802515c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8025160:	d0a04317 	ldw	r2,-32500(gp)
 8025164:	10000326 	beq	r2,zero,8025174 <alt_get_errno+0x24>
 8025168:	d0a04317 	ldw	r2,-32500(gp)
 802516c:	103ee83a 	callr	r2
 8025170:	00000106 	br	8025178 <alt_get_errno+0x28>
 8025174:	d0a05a04 	addi	r2,gp,-32408
}
 8025178:	e037883a 	mov	sp,fp
 802517c:	dfc00117 	ldw	ra,4(sp)
 8025180:	df000017 	ldw	fp,0(sp)
 8025184:	dec00204 	addi	sp,sp,8
 8025188:	f800283a 	ret

0802518c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
 802518c:	defffc04 	addi	sp,sp,-16
 8025190:	df000315 	stw	fp,12(sp)
 8025194:	df000304 	addi	fp,sp,12
 8025198:	e13fff15 	stw	r4,-4(fp)
 802519c:	e17ffe15 	stw	r5,-8(fp)
 80251a0:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 80251a4:	e0bfff17 	ldw	r2,-4(fp)
 80251a8:	10800037 	ldwio	r2,0(r2)
 80251ac:	1080010c 	andi	r2,r2,4
 80251b0:	10000226 	beq	r2,zero,80251bc <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
 80251b4:	00bff904 	movi	r2,-28
 80251b8:	00001506 	br	8025210 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
 80251bc:	e0bffd17 	ldw	r2,-12(fp)
 80251c0:	10800017 	ldw	r2,0(r2)
 80251c4:	1007883a 	mov	r3,r2
 80251c8:	e0bffe17 	ldw	r2,-8(fp)
 80251cc:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
 80251d0:	e0bffe17 	ldw	r2,-8(fp)
 80251d4:	10800104 	addi	r2,r2,4
 80251d8:	e0fffd17 	ldw	r3,-12(fp)
 80251dc:	18c00117 	ldw	r3,4(r3)
 80251e0:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
 80251e4:	e0bffe17 	ldw	r2,-8(fp)
 80251e8:	10800204 	addi	r2,r2,8
 80251ec:	e0fffd17 	ldw	r3,-12(fp)
 80251f0:	18c00217 	ldw	r3,8(r3)
 80251f4:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
 80251f8:	e0bffe17 	ldw	r2,-8(fp)
 80251fc:	10800304 	addi	r2,r2,12
 8025200:	e0fffd17 	ldw	r3,-12(fp)
 8025204:	18c00317 	ldw	r3,12(r3)
 8025208:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
 802520c:	0005883a 	mov	r2,zero
}
 8025210:	e037883a 	mov	sp,fp
 8025214:	df000017 	ldw	fp,0(sp)
 8025218:	dec00104 	addi	sp,sp,4
 802521c:	f800283a 	ret

08025220 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
 8025220:	defffc04 	addi	sp,sp,-16
 8025224:	df000315 	stw	fp,12(sp)
 8025228:	df000304 	addi	fp,sp,12
 802522c:	e13fff15 	stw	r4,-4(fp)
 8025230:	e17ffe15 	stw	r5,-8(fp)
 8025234:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 8025238:	e0bfff17 	ldw	r2,-4(fp)
 802523c:	10800037 	ldwio	r2,0(r2)
 8025240:	1080010c 	andi	r2,r2,4
 8025244:	10000226 	beq	r2,zero,8025250 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
 8025248:	00bff904 	movi	r2,-28
 802524c:	00003b06 	br	802533c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
 8025250:	e0bffd17 	ldw	r2,-12(fp)
 8025254:	10800017 	ldw	r2,0(r2)
 8025258:	1007883a 	mov	r3,r2
 802525c:	e0bffe17 	ldw	r2,-8(fp)
 8025260:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
 8025264:	e0bffe17 	ldw	r2,-8(fp)
 8025268:	10800104 	addi	r2,r2,4
 802526c:	e0fffd17 	ldw	r3,-12(fp)
 8025270:	18c00117 	ldw	r3,4(r3)
 8025274:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
 8025278:	e0bffe17 	ldw	r2,-8(fp)
 802527c:	10800204 	addi	r2,r2,8
 8025280:	e0fffd17 	ldw	r3,-12(fp)
 8025284:	18c00217 	ldw	r3,8(r3)
 8025288:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
 802528c:	e0bffe17 	ldw	r2,-8(fp)
 8025290:	10800304 	addi	r2,r2,12
 8025294:	e0fffd17 	ldw	r3,-12(fp)
 8025298:	18c0030b 	ldhu	r3,12(r3)
 802529c:	18ffffcc 	andi	r3,r3,65535
 80252a0:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
 80252a4:	e0bffe17 	ldw	r2,-8(fp)
 80252a8:	10800384 	addi	r2,r2,14
 80252ac:	e0fffd17 	ldw	r3,-12(fp)
 80252b0:	18c00383 	ldbu	r3,14(r3)
 80252b4:	18c03fcc 	andi	r3,r3,255
 80252b8:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
 80252bc:	e0bffe17 	ldw	r2,-8(fp)
 80252c0:	108003c4 	addi	r2,r2,15
 80252c4:	e0fffd17 	ldw	r3,-12(fp)
 80252c8:	18c003c3 	ldbu	r3,15(r3)
 80252cc:	18c03fcc 	andi	r3,r3,255
 80252d0:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
 80252d4:	e0bffe17 	ldw	r2,-8(fp)
 80252d8:	10800404 	addi	r2,r2,16
 80252dc:	e0fffd17 	ldw	r3,-12(fp)
 80252e0:	18c0040b 	ldhu	r3,16(r3)
 80252e4:	18ffffcc 	andi	r3,r3,65535
 80252e8:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
 80252ec:	e0bffe17 	ldw	r2,-8(fp)
 80252f0:	10800484 	addi	r2,r2,18
 80252f4:	e0fffd17 	ldw	r3,-12(fp)
 80252f8:	18c0048b 	ldhu	r3,18(r3)
 80252fc:	18ffffcc 	andi	r3,r3,65535
 8025300:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
 8025304:	e0bffe17 	ldw	r2,-8(fp)
 8025308:	10800504 	addi	r2,r2,20
 802530c:	0007883a 	mov	r3,zero
 8025310:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
 8025314:	e0bffe17 	ldw	r2,-8(fp)
 8025318:	10800604 	addi	r2,r2,24
 802531c:	0007883a 	mov	r3,zero
 8025320:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
 8025324:	e0bffe17 	ldw	r2,-8(fp)
 8025328:	10800704 	addi	r2,r2,28
 802532c:	e0fffd17 	ldw	r3,-12(fp)
 8025330:	18c00717 	ldw	r3,28(r3)
 8025334:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
 8025338:	0005883a 	mov	r2,zero
}
 802533c:	e037883a 	mov	sp,fp
 8025340:	df000017 	ldw	fp,0(sp)
 8025344:	dec00104 	addi	sp,sp,4
 8025348:	f800283a 	ret

0802534c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
 802534c:	defff804 	addi	sp,sp,-32
 8025350:	dfc00715 	stw	ra,28(sp)
 8025354:	df000615 	stw	fp,24(sp)
 8025358:	df000604 	addi	fp,sp,24
 802535c:	e13ffa15 	stw	r4,-24(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
 8025360:	e0bffa17 	ldw	r2,-24(fp)
 8025364:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
 8025368:	e0bfff17 	ldw	r2,-4(fp)
 802536c:	10801783 	ldbu	r2,94(r2)
 8025370:	10803fcc 	andi	r2,r2,255
 8025374:	10001126 	beq	r2,zero,80253bc <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 8025378:	e0bfff17 	ldw	r2,-4(fp)
 802537c:	10800617 	ldw	r2,24(r2)
 8025380:	10800037 	ldwio	r2,0(r2)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
 8025384:	1007883a 	mov	r3,r2
        temporary_control = 
 8025388:	00bffdc4 	movi	r2,-9
 802538c:	1884703a 	and	r2,r3,r2
 8025390:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 8025394:	e0bfff17 	ldw	r2,-4(fp)
 8025398:	10800617 	ldw	r2,24(r2)
 802539c:	e0fffe17 	ldw	r3,-8(fp)
 80253a0:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
 80253a4:	e0bfff17 	ldw	r2,-4(fp)
 80253a8:	10800617 	ldw	r2,24(r2)
 80253ac:	10800404 	addi	r2,r2,16
 80253b0:	00c00044 	movi	r3,1
 80253b4:	10c00035 	stwio	r3,0(r2)
 80253b8:	00001106 	br	8025400 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 80253bc:	e0bfff17 	ldw	r2,-4(fp)
 80253c0:	10800317 	ldw	r2,12(r2)
 80253c4:	10800104 	addi	r2,r2,4
 80253c8:	10800037 	ldwio	r2,0(r2)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 80253cc:	1007883a 	mov	r3,r2
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 80253d0:	00bffbc4 	movi	r2,-17
 80253d4:	1884703a 	and	r2,r3,r2
 80253d8:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 80253dc:	e0bfff17 	ldw	r2,-4(fp)
 80253e0:	10800317 	ldw	r2,12(r2)
 80253e4:	10800104 	addi	r2,r2,4
 80253e8:	e0fffe17 	ldw	r3,-8(fp)
 80253ec:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
 80253f0:	e0bfff17 	ldw	r2,-4(fp)
 80253f4:	10800317 	ldw	r2,12(r2)
 80253f8:	00c08004 	movi	r3,512
 80253fc:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8025400:	e0bfff17 	ldw	r2,-4(fp)
 8025404:	10800b17 	ldw	r2,44(r2)
 8025408:	10001326 	beq	r2,zero,8025458 <alt_msgdma_irq+0x10c>
  NIOS2_READ_STATUS (context);
 802540c:	0005303a 	rdctl	r2,status
 8025410:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025414:	e0fffb17 	ldw	r3,-20(fp)
 8025418:	00bfff84 	movi	r2,-2
 802541c:	1884703a 	and	r2,r3,r2
 8025420:	1001703a 	wrctl	status,r2
  return context;
 8025424:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8025428:	e0bffd15 	stw	r2,-12(fp)
        dev->callback (dev->callback_context);
 802542c:	e0bfff17 	ldw	r2,-4(fp)
 8025430:	10800b17 	ldw	r2,44(r2)
 8025434:	e0ffff17 	ldw	r3,-4(fp)
 8025438:	18c00c17 	ldw	r3,48(r3)
 802543c:	1809883a 	mov	r4,r3
 8025440:	103ee83a 	callr	r2
 8025444:	e0bffd17 	ldw	r2,-12(fp)
 8025448:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 802544c:	e0bffc17 	ldw	r2,-16(fp)
 8025450:	1001703a 	wrctl	status,r2
}
 8025454:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
 8025458:	e0bfff17 	ldw	r2,-4(fp)
 802545c:	10801783 	ldbu	r2,94(r2)
 8025460:	10803fcc 	andi	r2,r2,255
 8025464:	10000a26 	beq	r2,zero,8025490 <alt_msgdma_irq+0x144>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 8025468:	e0bfff17 	ldw	r2,-4(fp)
 802546c:	10800617 	ldw	r2,24(r2)
 8025470:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 8025474:	10800214 	ori	r2,r2,8
        temporary_control = 
 8025478:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 802547c:	e0bfff17 	ldw	r2,-4(fp)
 8025480:	10800617 	ldw	r2,24(r2)
 8025484:	e0fffe17 	ldw	r3,-8(fp)
 8025488:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
 802548c:	00000c06 	br	80254c0 <alt_msgdma_irq+0x174>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 8025490:	e0bfff17 	ldw	r2,-4(fp)
 8025494:	10800317 	ldw	r2,12(r2)
 8025498:	10800104 	addi	r2,r2,4
 802549c:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 80254a0:	10800414 	ori	r2,r2,16
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 80254a4:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 80254a8:	e0bfff17 	ldw	r2,-4(fp)
 80254ac:	10800317 	ldw	r2,12(r2)
 80254b0:	10800104 	addi	r2,r2,4
 80254b4:	e0fffe17 	ldw	r3,-8(fp)
 80254b8:	10c00035 	stwio	r3,0(r2)
    return;
 80254bc:	0001883a 	nop
}
 80254c0:	e037883a 	mov	sp,fp
 80254c4:	dfc00117 	ldw	ra,4(sp)
 80254c8:	df000017 	ldw	fp,0(sp)
 80254cc:	dec00204 	addi	sp,sp,8
 80254d0:	f800283a 	ret

080254d4 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 80254d4:	defffb04 	addi	sp,sp,-20
 80254d8:	df000415 	stw	fp,16(sp)
 80254dc:	df000404 	addi	fp,sp,16
 80254e0:	e13fff15 	stw	r4,-4(fp)
 80254e4:	e17ffe15 	stw	r5,-8(fp)
 80254e8:	e1bffd15 	stw	r6,-12(fp)
 80254ec:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
 80254f0:	e0bfff17 	ldw	r2,-4(fp)
 80254f4:	10c01217 	ldw	r3,72(r2)
 80254f8:	e0800117 	ldw	r2,4(fp)
 80254fc:	18800436 	bltu	r3,r2,8025510 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 8025500:	e0bfff17 	ldw	r2,-4(fp)
 8025504:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
 8025508:	10803fcc 	andi	r2,r2,255
 802550c:	10000226 	beq	r2,zero,8025518 <alt_msgdma_construct_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
 8025510:	00bffa84 	movi	r2,-22
 8025514:	00000e06 	br	8025550 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
 8025518:	e0bffe17 	ldw	r2,-8(fp)
 802551c:	e0fffd17 	ldw	r3,-12(fp)
 8025520:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 8025524:	e0bffe17 	ldw	r2,-8(fp)
 8025528:	e0fffc17 	ldw	r3,-16(fp)
 802552c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 8025530:	e0bffe17 	ldw	r2,-8(fp)
 8025534:	e0c00117 	ldw	r3,4(fp)
 8025538:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 802553c:	e0800217 	ldw	r2,8(fp)
 8025540:	10e00034 	orhi	r3,r2,32768
 8025544:	e0bffe17 	ldw	r2,-8(fp)
 8025548:	10c00315 	stw	r3,12(r2)
    
    return 0;
 802554c:	0005883a 	mov	r2,zero
}
 8025550:	e037883a 	mov	sp,fp
 8025554:	df000017 	ldw	fp,0(sp)
 8025558:	dec00104 	addi	sp,sp,4
 802555c:	f800283a 	ret

08025560 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 8025560:	defff604 	addi	sp,sp,-40
 8025564:	df000915 	stw	fp,36(sp)
 8025568:	df000904 	addi	fp,sp,36
 802556c:	e13fff15 	stw	r4,-4(fp)
 8025570:	e17ffe15 	stw	r5,-8(fp)
 8025574:	e1bffd15 	stw	r6,-12(fp)
 8025578:	e1fffc15 	stw	r7,-16(fp)
 802557c:	e1800317 	ldw	r6,12(fp)
 8025580:	e1400417 	ldw	r5,16(fp)
 8025584:	e1000517 	ldw	r4,20(fp)
 8025588:	e0c00617 	ldw	r3,24(fp)
 802558c:	e0800717 	ldw	r2,28(fp)
 8025590:	e1bffb0d 	sth	r6,-20(fp)
 8025594:	e17ffa05 	stb	r5,-24(fp)
 8025598:	e13ff905 	stb	r4,-28(fp)
 802559c:	e0fff80d 	sth	r3,-32(fp)
 80255a0:	e0bff70d 	sth	r2,-36(fp)
    if(dev->max_byte < length ||
 80255a4:	e0bfff17 	ldw	r2,-4(fp)
 80255a8:	10c01217 	ldw	r3,72(r2)
 80255ac:	e0800117 	ldw	r2,4(fp)
 80255b0:	18801936 	bltu	r3,r2,8025618 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 80255b4:	e13fff17 	ldw	r4,-4(fp)
 80255b8:	20801317 	ldw	r2,76(r4)
 80255bc:	20c01417 	ldw	r3,80(r4)
 80255c0:	e13ff80b 	ldhu	r4,-32(fp)
 80255c4:	213fffcc 	andi	r4,r4,65535
 80255c8:	2015883a 	mov	r10,r4
 80255cc:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
 80255d0:	1ac01136 	bltu	r3,r11,8025618 <alt_msgdma_construct_extended_descriptor+0xb8>
 80255d4:	58c0011e 	bne	r11,r3,80255dc <alt_msgdma_construct_extended_descriptor+0x7c>
 80255d8:	12800f36 	bltu	r2,r10,8025618 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
 80255dc:	e13fff17 	ldw	r4,-4(fp)
 80255e0:	20801317 	ldw	r2,76(r4)
 80255e4:	20c01417 	ldw	r3,80(r4)
 80255e8:	e13ff70b 	ldhu	r4,-36(fp)
 80255ec:	213fffcc 	andi	r4,r4,65535
 80255f0:	2011883a 	mov	r8,r4
 80255f4:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
 80255f8:	1a400736 	bltu	r3,r9,8025618 <alt_msgdma_construct_extended_descriptor+0xb8>
 80255fc:	48c0011e 	bne	r9,r3,8025604 <alt_msgdma_construct_extended_descriptor+0xa4>
 8025600:	12000536 	bltu	r2,r8,8025618 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
 8025604:	e0bfff17 	ldw	r2,-4(fp)
 8025608:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
 802560c:	10803fcc 	andi	r2,r2,255
 8025610:	10800060 	cmpeqi	r2,r2,1
 8025614:	1000021e 	bne	r2,zero,8025620 <alt_msgdma_construct_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
 8025618:	00bffa84 	movi	r2,-22
 802561c:	00002106 	br	80256a4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
 8025620:	e0bffe17 	ldw	r2,-8(fp)
 8025624:	e0fffd17 	ldw	r3,-12(fp)
 8025628:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
 802562c:	e0bffe17 	ldw	r2,-8(fp)
 8025630:	e0fffc17 	ldw	r3,-16(fp)
 8025634:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 8025638:	e0bffe17 	ldw	r2,-8(fp)
 802563c:	e0c00117 	ldw	r3,4(fp)
 8025640:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 8025644:	e0bffe17 	ldw	r2,-8(fp)
 8025648:	e0fffb0b 	ldhu	r3,-20(fp)
 802564c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
 8025650:	e0bffe17 	ldw	r2,-8(fp)
 8025654:	e0fffa03 	ldbu	r3,-24(fp)
 8025658:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
 802565c:	e0bffe17 	ldw	r2,-8(fp)
 8025660:	e0fff903 	ldbu	r3,-28(fp)
 8025664:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
 8025668:	e0bffe17 	ldw	r2,-8(fp)
 802566c:	e0fff80b 	ldhu	r3,-32(fp)
 8025670:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
 8025674:	e0bffe17 	ldw	r2,-8(fp)
 8025678:	e0fff70b 	ldhu	r3,-36(fp)
 802567c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
 8025680:	e0bffe17 	ldw	r2,-8(fp)
 8025684:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
 8025688:	e0bffe17 	ldw	r2,-8(fp)
 802568c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 8025690:	e0800217 	ldw	r2,8(fp)
 8025694:	10e00034 	orhi	r3,r2,32768
 8025698:	e0bffe17 	ldw	r2,-8(fp)
 802569c:	10c00715 	stw	r3,28(r2)

  return 0 ;
 80256a0:	0005883a 	mov	r2,zero

}
 80256a4:	e037883a 	mov	sp,fp
 80256a8:	df000017 	ldw	fp,0(sp)
 80256ac:	dec00104 	addi	sp,sp,4
 80256b0:	f800283a 	ret

080256b4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 80256b4:	deffed04 	addi	sp,sp,-76
 80256b8:	dfc01215 	stw	ra,72(sp)
 80256bc:	df001115 	stw	fp,68(sp)
 80256c0:	df001104 	addi	fp,sp,68
 80256c4:	e13ff115 	stw	r4,-60(fp)
 80256c8:	e17ff015 	stw	r5,-64(fp)
 80256cc:	e1bfef15 	stw	r6,-68(fp)
    alt_u32 control = 0;
 80256d0:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
 80256d4:	e03ffd15 	stw	zero,-12(fp)
    alt_u16 counter = 0;
 80256d8:	e03fff8d 	sth	zero,-2(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 80256dc:	e0bff117 	ldw	r2,-60(fp)
 80256e0:	10800317 	ldw	r2,12(r2)
 80256e4:	10800204 	addi	r2,r2,8
 80256e8:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
 80256ec:	10bfffcc 	andi	r2,r2,65535
 80256f0:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 80256f4:	e0bff117 	ldw	r2,-60(fp)
 80256f8:	10800317 	ldw	r2,12(r2)
 80256fc:	10800204 	addi	r2,r2,8
 8025700:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8025704:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
 8025708:	10bfffcc 	andi	r2,r2,65535
 802570c:	e0bffb15 	stw	r2,-20(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8025710:	e0bff117 	ldw	r2,-60(fp)
 8025714:	10800917 	ldw	r2,36(r2)
 8025718:	e0fffb17 	ldw	r3,-20(fp)
 802571c:	1880042e 	bgeu	r3,r2,8025730 <alt_msgdma_descriptor_async_transfer+0x7c>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 8025720:	e0bff117 	ldw	r2,-60(fp)
 8025724:	10800917 	ldw	r2,36(r2)
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8025728:	e0fffc17 	ldw	r3,-16(fp)
 802572c:	18800236 	bltu	r3,r2,8025738 <alt_msgdma_descriptor_async_transfer+0x84>
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
 8025730:	00bff904 	movi	r2,-28
 8025734:	0000ab06 	br	80259e4 <alt_msgdma_descriptor_async_transfer+0x330>
    
    /*
    * When running in a multi threaded environment, obtain the "regs_lock"
    * semaphore. This ensures that accessing registers is thread-safe.
    */
    ALT_SEM_PEND (dev->regs_lock, 0);
 8025738:	e0bff117 	ldw	r2,-60(fp)
 802573c:	10801817 	ldw	r2,96(r2)
 8025740:	e0bff815 	stw	r2,-32(fp)
 8025744:	e03ff78d 	sth	zero,-34(fp)
 8025748:	e0bff78b 	ldhu	r2,-34(fp)
 802574c:	e0fff2c4 	addi	r3,fp,-53
 8025750:	180d883a 	mov	r6,r3
 8025754:	100b883a 	mov	r5,r2
 8025758:	e13ff817 	ldw	r4,-32(fp)
 802575c:	801a6700 	call	801a670 <OSSemPend>
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 8025760:	00800804 	movi	r2,32
 8025764:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8025768:	0005303a 	rdctl	r2,status
 802576c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025770:	e0fff917 	ldw	r3,-28(fp)
 8025774:	00bfff84 	movi	r2,-2
 8025778:	1884703a 	and	r2,r3,r2
 802577c:	1001703a 	wrctl	status,r2
  return context;
 8025780:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 8025784:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8025788:	e0bff117 	ldw	r2,-60(fp)
 802578c:	10800317 	ldw	r2,12(r2)
 8025790:	10800104 	addi	r2,r2,4
 8025794:	e0fffe17 	ldw	r3,-8(fp)
 8025798:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 802579c:	e0bff117 	ldw	r2,-60(fp)
 80257a0:	10800317 	ldw	r2,12(r2)
 80257a4:	e0fff117 	ldw	r3,-60(fp)
 80257a8:	18c00317 	ldw	r3,12(r3)
 80257ac:	18c00037 	ldwio	r3,0(r3)
 80257b0:	10c00035 	stwio	r3,0(r2)
 80257b4:	e0bffd17 	ldw	r2,-12(fp)
 80257b8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80257bc:	e0bffa17 	ldw	r2,-24(fp)
 80257c0:	1001703a 	wrctl	status,r2
}
 80257c4:	0001883a 	nop
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
 80257c8:	e0bff017 	ldw	r2,-64(fp)
 80257cc:	10001e26 	beq	r2,zero,8025848 <alt_msgdma_descriptor_async_transfer+0x194>
 80257d0:	e0bfef17 	ldw	r2,-68(fp)
 80257d4:	10001c1e 	bne	r2,zero,8025848 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 80257d8:	00001106 	br	8025820 <alt_msgdma_descriptor_async_transfer+0x16c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 80257dc:	01000044 	movi	r4,1
 80257e0:	803e6700 	call	803e670 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 80257e4:	e0bfff8b 	ldhu	r2,-2(fp)
 80257e8:	1084e230 	cmpltui	r2,r2,5000
 80257ec:	1000091e 	bne	r2,zero,8025814 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
 80257f0:	01020174 	movhi	r4,2053
 80257f4:	2109e804 	addi	r4,r4,10144
 80257f8:	803f27c0 	call	803f27c <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 80257fc:	e0bff117 	ldw	r2,-60(fp)
 8025800:	10801817 	ldw	r2,96(r2)
 8025804:	1009883a 	mov	r4,r2
 8025808:	801a9f80 	call	801a9f8 <OSSemPost>
                
                return -ETIME;
 802580c:	00bff084 	movi	r2,-62
 8025810:	00007406 	br	80259e4 <alt_msgdma_descriptor_async_transfer+0x330>
            }
            counter++; 
 8025814:	e0bfff8b 	ldhu	r2,-2(fp)
 8025818:	10800044 	addi	r2,r2,1
 802581c:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
 8025820:	e0bff117 	ldw	r2,-60(fp)
 8025824:	10c00317 	ldw	r3,12(r2)
 8025828:	e0bff117 	ldw	r2,-60(fp)
 802582c:	10800417 	ldw	r2,16(r2)
 8025830:	e1bff017 	ldw	r6,-64(fp)
 8025834:	100b883a 	mov	r5,r2
 8025838:	1809883a 	mov	r4,r3
 802583c:	802518c0 	call	802518c <alt_msgdma_write_standard_descriptor>
 8025840:	103fe61e 	bne	r2,zero,80257dc <alt_msgdma_descriptor_async_transfer+0x128>
    if (NULL != standard_desc && NULL == extended_desc)
 8025844:	00002706 	br	80258e4 <alt_msgdma_descriptor_async_transfer+0x230>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 8025848:	e0bff017 	ldw	r2,-64(fp)
 802584c:	10001f1e 	bne	r2,zero,80258cc <alt_msgdma_descriptor_async_transfer+0x218>
 8025850:	e0bfef17 	ldw	r2,-68(fp)
 8025854:	10001d26 	beq	r2,zero,80258cc <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
 8025858:	e03fff8d 	sth	zero,-2(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 802585c:	00001106 	br	80258a4 <alt_msgdma_descriptor_async_transfer+0x1f0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 8025860:	01000044 	movi	r4,1
 8025864:	803e6700 	call	803e670 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8025868:	e0bfff8b 	ldhu	r2,-2(fp)
 802586c:	1084e230 	cmpltui	r2,r2,5000
 8025870:	1000091e 	bne	r2,zero,8025898 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
 8025874:	01020174 	movhi	r4,2053
 8025878:	2109fe04 	addi	r4,r4,10232
 802587c:	803f27c0 	call	803f27c <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8025880:	e0bff117 	ldw	r2,-60(fp)
 8025884:	10801817 	ldw	r2,96(r2)
 8025888:	1009883a 	mov	r4,r2
 802588c:	801a9f80 	call	801a9f8 <OSSemPost>
                
                return -ETIME;
 8025890:	00bff084 	movi	r2,-62
 8025894:	00005306 	br	80259e4 <alt_msgdma_descriptor_async_transfer+0x330>
            }
            counter++; 
 8025898:	e0bfff8b 	ldhu	r2,-2(fp)
 802589c:	10800044 	addi	r2,r2,1
 80258a0:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
 80258a4:	e0bff117 	ldw	r2,-60(fp)
 80258a8:	10c00317 	ldw	r3,12(r2)
 80258ac:	e0bff117 	ldw	r2,-60(fp)
 80258b0:	10800417 	ldw	r2,16(r2)
 80258b4:	e1bfef17 	ldw	r6,-68(fp)
 80258b8:	100b883a 	mov	r5,r2
 80258bc:	1809883a 	mov	r4,r3
 80258c0:	80252200 	call	8025220 <alt_msgdma_write_extended_descriptor>
 80258c4:	103fe61e 	bne	r2,zero,8025860 <alt_msgdma_descriptor_async_transfer+0x1ac>
    else if (NULL == standard_desc && NULL != extended_desc)
 80258c8:	00000606 	br	80258e4 <alt_msgdma_descriptor_async_transfer+0x230>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 80258cc:	e0bff117 	ldw	r2,-60(fp)
 80258d0:	10801817 	ldw	r2,96(r2)
 80258d4:	1009883a 	mov	r4,r2
 80258d8:	801a9f80 	call	801a9f8 <OSSemPost>
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 80258dc:	00bfffc4 	movi	r2,-1
 80258e0:	00004006 	br	80259e4 <alt_msgdma_descriptor_async_transfer+0x330>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
 80258e4:	e0bff117 	ldw	r2,-60(fp)
 80258e8:	10800b17 	ldw	r2,44(r2)
 80258ec:	10001c26 	beq	r2,zero,8025960 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
 80258f0:	e0bff117 	ldw	r2,-60(fp)
 80258f4:	10c00d17 	ldw	r3,52(r2)
 80258f8:	e0bffe17 	ldw	r2,-8(fp)
 80258fc:	1884b03a 	or	r2,r3,r2
 8025900:	10800514 	ori	r2,r2,20
 8025904:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 8025908:	e0fffe17 	ldw	r3,-8(fp)
 802590c:	00bff7c4 	movi	r2,-33
 8025910:	1884703a 	and	r2,r3,r2
 8025914:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8025918:	0005303a 	rdctl	r2,status
 802591c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025920:	e0fff517 	ldw	r3,-44(fp)
 8025924:	00bfff84 	movi	r2,-2
 8025928:	1884703a 	and	r2,r3,r2
 802592c:	1001703a 	wrctl	status,r2
  return context;
 8025930:	e0bff517 	ldw	r2,-44(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 8025934:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8025938:	e0bff117 	ldw	r2,-60(fp)
 802593c:	10800317 	ldw	r2,12(r2)
 8025940:	10800104 	addi	r2,r2,4
 8025944:	e0fffe17 	ldw	r3,-8(fp)
 8025948:	10c00035 	stwio	r3,0(r2)
 802594c:	e0bffd17 	ldw	r2,-12(fp)
 8025950:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8025954:	e0bff617 	ldw	r2,-40(fp)
 8025958:	1001703a 	wrctl	status,r2
}
 802595c:	00001c06 	br	80259d0 <alt_msgdma_descriptor_async_transfer+0x31c>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
 8025960:	e0bff117 	ldw	r2,-60(fp)
 8025964:	10c00d17 	ldw	r3,52(r2)
 8025968:	e0bffe17 	ldw	r2,-8(fp)
 802596c:	1884b03a 	or	r2,r3,r2
 8025970:	10800114 	ori	r2,r2,4
 8025974:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
 8025978:	e0fffe17 	ldw	r3,-8(fp)
 802597c:	00bff3c4 	movi	r2,-49
 8025980:	1884703a 	and	r2,r3,r2
 8025984:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8025988:	0005303a 	rdctl	r2,status
 802598c:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025990:	e0fff317 	ldw	r3,-52(fp)
 8025994:	00bfff84 	movi	r2,-2
 8025998:	1884703a 	and	r2,r3,r2
 802599c:	1001703a 	wrctl	status,r2
  return context;
 80259a0:	e0bff317 	ldw	r2,-52(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
 80259a4:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 80259a8:	e0bff117 	ldw	r2,-60(fp)
 80259ac:	10800317 	ldw	r2,12(r2)
 80259b0:	10800104 	addi	r2,r2,4
 80259b4:	e0fffe17 	ldw	r3,-8(fp)
 80259b8:	10c00035 	stwio	r3,0(r2)
 80259bc:	e0bffd17 	ldw	r2,-12(fp)
 80259c0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 80259c4:	e0bff417 	ldw	r2,-48(fp)
 80259c8:	1001703a 	wrctl	status,r2
}
 80259cc:	0001883a 	nop

    /*
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
 80259d0:	e0bff117 	ldw	r2,-60(fp)
 80259d4:	10801817 	ldw	r2,96(r2)
 80259d8:	1009883a 	mov	r4,r2
 80259dc:	801a9f80 	call	801a9f8 <OSSemPost>
    
    return 0;
 80259e0:	0005883a 	mov	r2,zero
}
 80259e4:	e037883a 	mov	sp,fp
 80259e8:	dfc00117 	ldw	ra,4(sp)
 80259ec:	df000017 	ldw	fp,0(sp)
 80259f0:	dec00204 	addi	sp,sp,8
 80259f4:	f800283a 	ret

080259f8 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 80259f8:	deffed04 	addi	sp,sp,-76
 80259fc:	dfc01215 	stw	ra,72(sp)
 8025a00:	df001115 	stw	fp,68(sp)
 8025a04:	df001104 	addi	fp,sp,68
 8025a08:	e13ff115 	stw	r4,-60(fp)
 8025a0c:	e17ff015 	stw	r5,-64(fp)
 8025a10:	e1bfef15 	stw	r6,-68(fp)
    alt_u32 control=0;
 8025a14:	e03ffb15 	stw	zero,-20(fp)
    alt_irq_context context=0;
 8025a18:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 csr_status = 0;
 8025a1c:	e03fff15 	stw	zero,-4(fp)
    alt_u16 counter = 0;
 8025a20:	e03ffe8d 	sth	zero,-6(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8025a24:	e0bff117 	ldw	r2,-60(fp)
 8025a28:	10800317 	ldw	r2,12(r2)
 8025a2c:	10800204 	addi	r2,r2,8
 8025a30:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
 8025a34:	10bfffcc 	andi	r2,r2,65535
 8025a38:	e0bffd15 	stw	r2,-12(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8025a3c:	e0bff117 	ldw	r2,-60(fp)
 8025a40:	10800317 	ldw	r2,12(r2)
 8025a44:	10800204 	addi	r2,r2,8
 8025a48:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8025a4c:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
 8025a50:	10bfffcc 	andi	r2,r2,65535
 8025a54:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
 8025a58:	00807804 	movi	r2,480
 8025a5c:	e0bff915 	stw	r2,-28(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8025a60:	00001a06 	br	8025acc <alt_msgdma_descriptor_sync_transfer+0xd4>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
 8025a64:	01000044 	movi	r4,1
 8025a68:	803e6700 	call	803e670 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8025a6c:	e0bffe8b 	ldhu	r2,-6(fp)
 8025a70:	1084e230 	cmpltui	r2,r2,5000
 8025a74:	1000051e 	bne	r2,zero,8025a8c <alt_msgdma_descriptor_sync_transfer+0x94>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
 8025a78:	01020174 	movhi	r4,2053
 8025a7c:	210a1404 	addi	r4,r4,10320
 8025a80:	803f27c0 	call	803f27c <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
 8025a84:	00bff084 	movi	r2,-62
 8025a88:	0000da06 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
        }
        counter++;  
 8025a8c:	e0bffe8b 	ldhu	r2,-6(fp)
 8025a90:	10800044 	addi	r2,r2,1
 8025a94:	e0bffe8d 	sth	r2,-6(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8025a98:	e0bff117 	ldw	r2,-60(fp)
 8025a9c:	10800317 	ldw	r2,12(r2)
 8025aa0:	10800204 	addi	r2,r2,8
 8025aa4:	10800037 	ldwio	r2,0(r2)
        fifo_read_fill_level = (
 8025aa8:	10bfffcc 	andi	r2,r2,65535
 8025aac:	e0bffd15 	stw	r2,-12(fp)
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8025ab0:	e0bff117 	ldw	r2,-60(fp)
 8025ab4:	10800317 	ldw	r2,12(r2)
 8025ab8:	10800204 	addi	r2,r2,8
 8025abc:	10800037 	ldwio	r2,0(r2)
            ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8025ac0:	1004d43a 	srli	r2,r2,16
        fifo_write_fill_level = (
 8025ac4:	10bfffcc 	andi	r2,r2,65535
 8025ac8:	e0bffc15 	stw	r2,-16(fp)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8025acc:	e0bff117 	ldw	r2,-60(fp)
 8025ad0:	10800917 	ldw	r2,36(r2)
 8025ad4:	e0fffc17 	ldw	r3,-16(fp)
 8025ad8:	18bfe22e 	bgeu	r3,r2,8025a64 <alt_msgdma_descriptor_sync_transfer+0x6c>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 8025adc:	e0bff117 	ldw	r2,-60(fp)
 8025ae0:	10800917 	ldw	r2,36(r2)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8025ae4:	e0fffd17 	ldw	r3,-12(fp)
 8025ae8:	18bfde2e 	bgeu	r3,r2,8025a64 <alt_msgdma_descriptor_sync_transfer+0x6c>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
 8025aec:	e0bff117 	ldw	r2,-60(fp)
 8025af0:	10801817 	ldw	r2,96(r2)
 8025af4:	e0bff715 	stw	r2,-36(fp)
 8025af8:	e03ff68d 	sth	zero,-38(fp)
 8025afc:	e0bff68b 	ldhu	r2,-38(fp)
 8025b00:	e0fff2c4 	addi	r3,fp,-53
 8025b04:	180d883a 	mov	r6,r3
 8025b08:	100b883a 	mov	r5,r2
 8025b0c:	e13ff717 	ldw	r4,-36(fp)
 8025b10:	801a6700 	call	801a670 <OSSemPend>
  NIOS2_READ_STATUS (context);
 8025b14:	0005303a 	rdctl	r2,status
 8025b18:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025b1c:	e0fff817 	ldw	r3,-32(fp)
 8025b20:	00bfff84 	movi	r2,-2
 8025b24:	1884703a 	and	r2,r3,r2
 8025b28:	1001703a 	wrctl	status,r2
  return context;
 8025b2c:	e0bff817 	ldw	r2,-32(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 8025b30:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 8025b34:	e0bff117 	ldw	r2,-60(fp)
 8025b38:	10800317 	ldw	r2,12(r2)
 8025b3c:	10800104 	addi	r2,r2,4
 8025b40:	00c00804 	movi	r3,32
 8025b44:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 8025b48:	e0bff117 	ldw	r2,-60(fp)
 8025b4c:	10800317 	ldw	r2,12(r2)
 8025b50:	e0fff117 	ldw	r3,-60(fp)
 8025b54:	18c00317 	ldw	r3,12(r3)
 8025b58:	18c00037 	ldwio	r3,0(r3)
 8025b5c:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
 8025b60:	e0bff017 	ldw	r2,-64(fp)
 8025b64:	10001f26 	beq	r2,zero,8025be4 <alt_msgdma_descriptor_sync_transfer+0x1ec>
 8025b68:	e0bfef17 	ldw	r2,-68(fp)
 8025b6c:	10001d1e 	bne	r2,zero,8025be4 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
 8025b70:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 8025b74:	00001106 	br	8025bbc <alt_msgdma_descriptor_sync_transfer+0x1c4>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
 8025b78:	01000044 	movi	r4,1
 8025b7c:	803e6700 	call	803e670 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8025b80:	e0bffe8b 	ldhu	r2,-6(fp)
 8025b84:	1084e230 	cmpltui	r2,r2,5000
 8025b88:	1000091e 	bne	r2,zero,8025bb0 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
 8025b8c:	01020174 	movhi	r4,2053
 8025b90:	210a2804 	addi	r4,r4,10400
 8025b94:	803f27c0 	call	803f27c <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8025b98:	e0bff117 	ldw	r2,-60(fp)
 8025b9c:	10801817 	ldw	r2,96(r2)
 8025ba0:	1009883a 	mov	r4,r2
 8025ba4:	801a9f80 	call	801a9f8 <OSSemPost>
                
                return -ETIME;
 8025ba8:	00bff084 	movi	r2,-62
 8025bac:	00009106 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
            }
            counter++;    
 8025bb0:	e0bffe8b 	ldhu	r2,-6(fp)
 8025bb4:	10800044 	addi	r2,r2,1
 8025bb8:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
 8025bbc:	e0bff117 	ldw	r2,-60(fp)
 8025bc0:	10c00317 	ldw	r3,12(r2)
 8025bc4:	e0bff117 	ldw	r2,-60(fp)
 8025bc8:	10800417 	ldw	r2,16(r2)
 8025bcc:	e1bff017 	ldw	r6,-64(fp)
 8025bd0:	100b883a 	mov	r5,r2
 8025bd4:	1809883a 	mov	r4,r3
 8025bd8:	802518c0 	call	802518c <alt_msgdma_write_standard_descriptor>
 8025bdc:	103fe61e 	bne	r2,zero,8025b78 <alt_msgdma_descriptor_sync_transfer+0x180>
    if (NULL != standard_desc && NULL == extended_desc)
 8025be0:	00002706 	br	8025c80 <alt_msgdma_descriptor_sync_transfer+0x288>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 8025be4:	e0bff017 	ldw	r2,-64(fp)
 8025be8:	10001f1e 	bne	r2,zero,8025c68 <alt_msgdma_descriptor_sync_transfer+0x270>
 8025bec:	e0bfef17 	ldw	r2,-68(fp)
 8025bf0:	10001d26 	beq	r2,zero,8025c68 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
 8025bf4:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 8025bf8:	00001106 	br	8025c40 <alt_msgdma_descriptor_sync_transfer+0x248>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 8025bfc:	01000044 	movi	r4,1
 8025c00:	803e6700 	call	803e670 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8025c04:	e0bffe8b 	ldhu	r2,-6(fp)
 8025c08:	1084e230 	cmpltui	r2,r2,5000
 8025c0c:	1000091e 	bne	r2,zero,8025c34 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
 8025c10:	01020174 	movhi	r4,2053
 8025c14:	210a3904 	addi	r4,r4,10468
 8025c18:	803f27c0 	call	803f27c <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8025c1c:	e0bff117 	ldw	r2,-60(fp)
 8025c20:	10801817 	ldw	r2,96(r2)
 8025c24:	1009883a 	mov	r4,r2
 8025c28:	801a9f80 	call	801a9f8 <OSSemPost>
                
                return -ETIME;
 8025c2c:	00bff084 	movi	r2,-62
 8025c30:	00007006 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
            }
            counter++;
 8025c34:	e0bffe8b 	ldhu	r2,-6(fp)
 8025c38:	10800044 	addi	r2,r2,1
 8025c3c:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
 8025c40:	e0bff117 	ldw	r2,-60(fp)
 8025c44:	10c00317 	ldw	r3,12(r2)
 8025c48:	e0bff117 	ldw	r2,-60(fp)
 8025c4c:	10800417 	ldw	r2,16(r2)
 8025c50:	e1bfef17 	ldw	r6,-68(fp)
 8025c54:	100b883a 	mov	r5,r2
 8025c58:	1809883a 	mov	r4,r3
 8025c5c:	80252200 	call	8025220 <alt_msgdma_write_extended_descriptor>
 8025c60:	103fe61e 	bne	r2,zero,8025bfc <alt_msgdma_descriptor_sync_transfer+0x204>
    else if (NULL == standard_desc && NULL != extended_desc)
 8025c64:	00000606 	br	8025c80 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 8025c68:	e0bff117 	ldw	r2,-60(fp)
 8025c6c:	10801817 	ldw	r2,96(r2)
 8025c70:	1009883a 	mov	r4,r2
 8025c74:	801a9f80 	call	801a9f8 <OSSemPost>
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 8025c78:	00bfffc4 	movi	r2,-1
 8025c7c:	00005d06 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 8025c80:	e0bff117 	ldw	r2,-60(fp)
 8025c84:	10800317 	ldw	r2,12(r2)
 8025c88:	10800104 	addi	r2,r2,4
 8025c8c:	e0fff117 	ldw	r3,-60(fp)
 8025c90:	19000d17 	ldw	r4,52(r3)
 8025c94:	00fff2c4 	movi	r3,-53
 8025c98:	20c6703a 	and	r3,r4,r3
 8025c9c:	18c00114 	ori	r3,r3,4
 8025ca0:	10c00035 	stwio	r3,0(r2)
 8025ca4:	e0bffa17 	ldw	r2,-24(fp)
 8025ca8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 8025cac:	e0bff517 	ldw	r2,-44(fp)
 8025cb0:	1001703a 	wrctl	status,r2
}
 8025cb4:	0001883a 	nop
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
 8025cb8:	e03ffe8d 	sth	zero,-6(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 8025cbc:	e0bff117 	ldw	r2,-60(fp)
 8025cc0:	10800317 	ldw	r2,12(r2)
 8025cc4:	10800037 	ldwio	r2,0(r2)
 8025cc8:	e0bfff15 	stw	r2,-4(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 8025ccc:	00001506 	br	8025d24 <alt_msgdma_descriptor_sync_transfer+0x32c>
    {
        alt_busy_sleep(1); /* delay 1us */
 8025cd0:	01000044 	movi	r4,1
 8025cd4:	803e6700 	call	803e670 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8025cd8:	e0bffe8b 	ldhu	r2,-6(fp)
 8025cdc:	1084e230 	cmpltui	r2,r2,5000
 8025ce0:	1000091e 	bne	r2,zero,8025d08 <alt_msgdma_descriptor_sync_transfer+0x310>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
 8025ce4:	01020174 	movhi	r4,2053
 8025ce8:	210a4a04 	addi	r4,r4,10536
 8025cec:	803f27c0 	call	803f27c <alt_printf>
            
            /*
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
 8025cf0:	e0bff117 	ldw	r2,-60(fp)
 8025cf4:	10801817 	ldw	r2,96(r2)
 8025cf8:	1009883a 	mov	r4,r2
 8025cfc:	801a9f80 	call	801a9f8 <OSSemPost>
            
            return -ETIME;
 8025d00:	00bff084 	movi	r2,-62
 8025d04:	00003b06 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
        }
        counter++;
 8025d08:	e0bffe8b 	ldhu	r2,-6(fp)
 8025d0c:	10800044 	addi	r2,r2,1
 8025d10:	e0bffe8d 	sth	r2,-6(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 8025d14:	e0bff117 	ldw	r2,-60(fp)
 8025d18:	10800317 	ldw	r2,12(r2)
 8025d1c:	10800037 	ldwio	r2,0(r2)
 8025d20:	e0bfff15 	stw	r2,-4(fp)
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 8025d24:	e0ffff17 	ldw	r3,-4(fp)
 8025d28:	e0bff917 	ldw	r2,-28(fp)
 8025d2c:	1884703a 	and	r2,r3,r2
 8025d30:	1000031e 	bne	r2,zero,8025d40 <alt_msgdma_descriptor_sync_transfer+0x348>
 8025d34:	e0bfff17 	ldw	r2,-4(fp)
 8025d38:	1080004c 	andi	r2,r2,1
 8025d3c:	103fe41e 	bne	r2,zero,8025cd0 <alt_msgdma_descriptor_sync_transfer+0x2d8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
 8025d40:	e0ffff17 	ldw	r3,-4(fp)
 8025d44:	e0bff917 	ldw	r2,-28(fp)
 8025d48:	1884703a 	and	r2,r3,r2
 8025d4c:	10000626 	beq	r2,zero,8025d68 <alt_msgdma_descriptor_sync_transfer+0x370>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 8025d50:	e0bff117 	ldw	r2,-60(fp)
 8025d54:	10801817 	ldw	r2,96(r2)
 8025d58:	1009883a 	mov	r4,r2
 8025d5c:	801a9f80 	call	801a9f8 <OSSemPost>
        
        return error;
 8025d60:	e0bff917 	ldw	r2,-28(fp)
 8025d64:	00002306 	br	8025df4 <alt_msgdma_descriptor_sync_transfer+0x3fc>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
 8025d68:	e0bff117 	ldw	r2,-60(fp)
 8025d6c:	10800317 	ldw	r2,12(r2)
 8025d70:	10800104 	addi	r2,r2,4
 8025d74:	10800037 	ldwio	r2,0(r2)
 8025d78:	10800814 	ori	r2,r2,32
 8025d7c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_READ_STATUS (context);
 8025d80:	0005303a 	rdctl	r2,status
 8025d84:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025d88:	e0fff317 	ldw	r3,-52(fp)
 8025d8c:	00bfff84 	movi	r2,-2
 8025d90:	1884703a 	and	r2,r3,r2
 8025d94:	1001703a 	wrctl	status,r2
  return context;
 8025d98:	e0bff317 	ldw	r2,-52(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
 8025d9c:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8025da0:	e0bff117 	ldw	r2,-60(fp)
 8025da4:	10800317 	ldw	r2,12(r2)
 8025da8:	10800104 	addi	r2,r2,4
 8025dac:	e0fffb17 	ldw	r3,-20(fp)
 8025db0:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 8025db4:	e0bff117 	ldw	r2,-60(fp)
 8025db8:	10800317 	ldw	r2,12(r2)
 8025dbc:	e0fff117 	ldw	r3,-60(fp)
 8025dc0:	18c00317 	ldw	r3,12(r3)
 8025dc4:	18c00037 	ldwio	r3,0(r3)
 8025dc8:	10c00035 	stwio	r3,0(r2)
 8025dcc:	e0bffa17 	ldw	r2,-24(fp)
 8025dd0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 8025dd4:	e0bff417 	ldw	r2,-48(fp)
 8025dd8:	1001703a 	wrctl	status,r2
}
 8025ddc:	0001883a 	nop

    /*
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
 8025de0:	e0bff117 	ldw	r2,-60(fp)
 8025de4:	10801817 	ldw	r2,96(r2)
 8025de8:	1009883a 	mov	r4,r2
 8025dec:	801a9f80 	call	801a9f8 <OSSemPost>
    
    return 0;
 8025df0:	0005883a 	mov	r2,zero

}
 8025df4:	e037883a 	mov	sp,fp
 8025df8:	dfc00117 	ldw	ra,4(sp)
 8025dfc:	df000017 	ldw	fp,0(sp)
 8025e00:	dec00204 	addi	sp,sp,8
 8025e04:	f800283a 	ret

08025e08 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
 8025e08:	defff804 	addi	sp,sp,-32
 8025e0c:	dfc00715 	stw	ra,28(sp)
 8025e10:	df000615 	stw	fp,24(sp)
 8025e14:	df000604 	addi	fp,sp,24
 8025e18:	e13fff15 	stw	r4,-4(fp)
 8025e1c:	e17ffe15 	stw	r5,-8(fp)
 8025e20:	e1bffd15 	stw	r6,-12(fp)
 8025e24:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
 8025e28:	e0800217 	ldw	r2,8(fp)
 8025e2c:	d8800115 	stw	r2,4(sp)
 8025e30:	e0bffc17 	ldw	r2,-16(fp)
 8025e34:	d8800015 	stw	r2,0(sp)
 8025e38:	e1fffd17 	ldw	r7,-12(fp)
 8025e3c:	000d883a 	mov	r6,zero
 8025e40:	e17ffe17 	ldw	r5,-8(fp)
 8025e44:	e13fff17 	ldw	r4,-4(fp)
 8025e48:	80254d40 	call	80254d4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 8025e4c:	e037883a 	mov	sp,fp
 8025e50:	dfc00117 	ldw	ra,4(sp)
 8025e54:	df000017 	ldw	fp,0(sp)
 8025e58:	dec00204 	addi	sp,sp,8
 8025e5c:	f800283a 	ret

08025e60 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
 8025e60:	defff804 	addi	sp,sp,-32
 8025e64:	dfc00715 	stw	ra,28(sp)
 8025e68:	df000615 	stw	fp,24(sp)
 8025e6c:	df000604 	addi	fp,sp,24
 8025e70:	e13fff15 	stw	r4,-4(fp)
 8025e74:	e17ffe15 	stw	r5,-8(fp)
 8025e78:	e1bffd15 	stw	r6,-12(fp)
 8025e7c:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 8025e80:	e0800217 	ldw	r2,8(fp)
 8025e84:	d8800115 	stw	r2,4(sp)
 8025e88:	e0bffc17 	ldw	r2,-16(fp)
 8025e8c:	d8800015 	stw	r2,0(sp)
 8025e90:	000f883a 	mov	r7,zero
 8025e94:	e1bffd17 	ldw	r6,-12(fp)
 8025e98:	e17ffe17 	ldw	r5,-8(fp)
 8025e9c:	e13fff17 	ldw	r4,-4(fp)
 8025ea0:	80254d40 	call	80254d4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
 8025ea4:	e037883a 	mov	sp,fp
 8025ea8:	dfc00117 	ldw	ra,4(sp)
 8025eac:	df000017 	ldw	fp,0(sp)
 8025eb0:	dec00204 	addi	sp,sp,8
 8025eb4:	f800283a 	ret

08025eb8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 8025eb8:	defff804 	addi	sp,sp,-32
 8025ebc:	dfc00715 	stw	ra,28(sp)
 8025ec0:	df000615 	stw	fp,24(sp)
 8025ec4:	df000604 	addi	fp,sp,24
 8025ec8:	e13fff15 	stw	r4,-4(fp)
 8025ecc:	e17ffe15 	stw	r5,-8(fp)
 8025ed0:	e1bffd15 	stw	r6,-12(fp)
 8025ed4:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 8025ed8:	e0800317 	ldw	r2,12(fp)
 8025edc:	d8800115 	stw	r2,4(sp)
 8025ee0:	e0800217 	ldw	r2,8(fp)
 8025ee4:	d8800015 	stw	r2,0(sp)
 8025ee8:	e1fffc17 	ldw	r7,-16(fp)
 8025eec:	e1bffd17 	ldw	r6,-12(fp)
 8025ef0:	e17ffe17 	ldw	r5,-8(fp)
 8025ef4:	e13fff17 	ldw	r4,-4(fp)
 8025ef8:	80254d40 	call	80254d4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 8025efc:	e037883a 	mov	sp,fp
 8025f00:	dfc00117 	ldw	ra,4(sp)
 8025f04:	df000017 	ldw	fp,0(sp)
 8025f08:	dec00204 	addi	sp,sp,8
 8025f0c:	f800283a 	ret

08025f10 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
 8025f10:	defff004 	addi	sp,sp,-64
 8025f14:	dfc00f15 	stw	ra,60(sp)
 8025f18:	df000e15 	stw	fp,56(sp)
 8025f1c:	df000e04 	addi	fp,sp,56
 8025f20:	e13fff15 	stw	r4,-4(fp)
 8025f24:	e17ffe15 	stw	r5,-8(fp)
 8025f28:	e1bffd15 	stw	r6,-12(fp)
 8025f2c:	e1fffc15 	stw	r7,-16(fp)
 8025f30:	e1000317 	ldw	r4,12(fp)
 8025f34:	e0c00417 	ldw	r3,16(fp)
 8025f38:	e0800517 	ldw	r2,20(fp)
 8025f3c:	e13ffb0d 	sth	r4,-20(fp)
 8025f40:	e0fffa05 	stb	r3,-24(fp)
 8025f44:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 8025f48:	e0bffb0b 	ldhu	r2,-20(fp)
 8025f4c:	e0fffa03 	ldbu	r3,-24(fp)
 8025f50:	e13ff90b 	ldhu	r4,-28(fp)
 8025f54:	d9000615 	stw	r4,24(sp)
 8025f58:	d8000515 	stw	zero,20(sp)
 8025f5c:	d8c00415 	stw	r3,16(sp)
 8025f60:	d8000315 	stw	zero,12(sp)
 8025f64:	d8800215 	stw	r2,8(sp)
 8025f68:	e0800217 	ldw	r2,8(fp)
 8025f6c:	d8800115 	stw	r2,4(sp)
 8025f70:	e0bffc17 	ldw	r2,-16(fp)
 8025f74:	d8800015 	stw	r2,0(sp)
 8025f78:	e1fffd17 	ldw	r7,-12(fp)
 8025f7c:	000d883a 	mov	r6,zero
 8025f80:	e17ffe17 	ldw	r5,-8(fp)
 8025f84:	e13fff17 	ldw	r4,-4(fp)
 8025f88:	80255600 	call	8025560 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
 8025f8c:	e037883a 	mov	sp,fp
 8025f90:	dfc00117 	ldw	ra,4(sp)
 8025f94:	df000017 	ldw	fp,0(sp)
 8025f98:	dec00204 	addi	sp,sp,8
 8025f9c:	f800283a 	ret

08025fa0 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 8025fa0:	defff004 	addi	sp,sp,-64
 8025fa4:	dfc00f15 	stw	ra,60(sp)
 8025fa8:	df000e15 	stw	fp,56(sp)
 8025fac:	df000e04 	addi	fp,sp,56
 8025fb0:	e13fff15 	stw	r4,-4(fp)
 8025fb4:	e17ffe15 	stw	r5,-8(fp)
 8025fb8:	e1bffd15 	stw	r6,-12(fp)
 8025fbc:	e1fffc15 	stw	r7,-16(fp)
 8025fc0:	e1000317 	ldw	r4,12(fp)
 8025fc4:	e0c00417 	ldw	r3,16(fp)
 8025fc8:	e0800517 	ldw	r2,20(fp)
 8025fcc:	e13ffb0d 	sth	r4,-20(fp)
 8025fd0:	e0fffa05 	stb	r3,-24(fp)
 8025fd4:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
 8025fd8:	e0bffb0b 	ldhu	r2,-20(fp)
 8025fdc:	e0fffa03 	ldbu	r3,-24(fp)
 8025fe0:	e13ff90b 	ldhu	r4,-28(fp)
 8025fe4:	d8000615 	stw	zero,24(sp)
 8025fe8:	d9000515 	stw	r4,20(sp)
 8025fec:	d8000415 	stw	zero,16(sp)
 8025ff0:	d8c00315 	stw	r3,12(sp)
 8025ff4:	d8800215 	stw	r2,8(sp)
 8025ff8:	e0800217 	ldw	r2,8(fp)
 8025ffc:	d8800115 	stw	r2,4(sp)
 8026000:	e0bffc17 	ldw	r2,-16(fp)
 8026004:	d8800015 	stw	r2,0(sp)
 8026008:	000f883a 	mov	r7,zero
 802600c:	e1bffd17 	ldw	r6,-12(fp)
 8026010:	e17ffe17 	ldw	r5,-8(fp)
 8026014:	e13fff17 	ldw	r4,-4(fp)
 8026018:	80255600 	call	8025560 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
 802601c:	e037883a 	mov	sp,fp
 8026020:	dfc00117 	ldw	ra,4(sp)
 8026024:	df000017 	ldw	fp,0(sp)
 8026028:	dec00204 	addi	sp,sp,8
 802602c:	f800283a 	ret

08026030 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 8026030:	deffee04 	addi	sp,sp,-72
 8026034:	dfc01115 	stw	ra,68(sp)
 8026038:	df001015 	stw	fp,64(sp)
 802603c:	df001004 	addi	fp,sp,64
 8026040:	e13fff15 	stw	r4,-4(fp)
 8026044:	e17ffe15 	stw	r5,-8(fp)
 8026048:	e1bffd15 	stw	r6,-12(fp)
 802604c:	e1fffc15 	stw	r7,-16(fp)
 8026050:	e1800417 	ldw	r6,16(fp)
 8026054:	e1400517 	ldw	r5,20(fp)
 8026058:	e1000617 	ldw	r4,24(fp)
 802605c:	e0c00717 	ldw	r3,28(fp)
 8026060:	e0800817 	ldw	r2,32(fp)
 8026064:	e1bffb0d 	sth	r6,-20(fp)
 8026068:	e17ffa05 	stb	r5,-24(fp)
 802606c:	e13ff905 	stb	r4,-28(fp)
 8026070:	e0fff80d 	sth	r3,-32(fp)
 8026074:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 8026078:	e0bffb0b 	ldhu	r2,-20(fp)
 802607c:	e0fffa03 	ldbu	r3,-24(fp)
 8026080:	e13ff903 	ldbu	r4,-28(fp)
 8026084:	e17ff80b 	ldhu	r5,-32(fp)
 8026088:	e1bff70b 	ldhu	r6,-36(fp)
 802608c:	d9800615 	stw	r6,24(sp)
 8026090:	d9400515 	stw	r5,20(sp)
 8026094:	d9000415 	stw	r4,16(sp)
 8026098:	d8c00315 	stw	r3,12(sp)
 802609c:	d8800215 	stw	r2,8(sp)
 80260a0:	e0800317 	ldw	r2,12(fp)
 80260a4:	d8800115 	stw	r2,4(sp)
 80260a8:	e0800217 	ldw	r2,8(fp)
 80260ac:	d8800015 	stw	r2,0(sp)
 80260b0:	e1fffc17 	ldw	r7,-16(fp)
 80260b4:	e1bffd17 	ldw	r6,-12(fp)
 80260b8:	e17ffe17 	ldw	r5,-8(fp)
 80260bc:	e13fff17 	ldw	r4,-4(fp)
 80260c0:	80255600 	call	8025560 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 80260c4:	e037883a 	mov	sp,fp
 80260c8:	dfc00117 	ldw	ra,4(sp)
 80260cc:	df000017 	ldw	fp,0(sp)
 80260d0:	dec00204 	addi	sp,sp,8
 80260d4:	f800283a 	ret

080260d8 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 80260d8:	defffb04 	addi	sp,sp,-20
 80260dc:	df000415 	stw	fp,16(sp)
 80260e0:	df000404 	addi	fp,sp,16
 80260e4:	e13fff15 	stw	r4,-4(fp)
 80260e8:	e17ffe15 	stw	r5,-8(fp)
 80260ec:	e1bffd15 	stw	r6,-12(fp)
 80260f0:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
 80260f4:	e0bfff17 	ldw	r2,-4(fp)
 80260f8:	10c01217 	ldw	r3,72(r2)
 80260fc:	e0800117 	ldw	r2,4(fp)
 8026100:	18800436 	bltu	r3,r2,8026114 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 8026104:	e0bfff17 	ldw	r2,-4(fp)
 8026108:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
 802610c:	10803fcc 	andi	r2,r2,255
 8026110:	10000226 	beq	r2,zero,802611c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
 8026114:	00bffa84 	movi	r2,-22
 8026118:	00001406 	br	802616c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
 802611c:	e0bffe17 	ldw	r2,-8(fp)
 8026120:	e0fffd17 	ldw	r3,-12(fp)
 8026124:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 8026128:	e0bffe17 	ldw	r2,-8(fp)
 802612c:	e0fffc17 	ldw	r3,-16(fp)
 8026130:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 8026134:	e0bffe17 	ldw	r2,-8(fp)
 8026138:	e0c00117 	ldw	r3,4(fp)
 802613c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
 8026140:	e0fffe17 	ldw	r3,-8(fp)
 8026144:	e0bffe17 	ldw	r2,-8(fp)
 8026148:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 802614c:	e0c00217 	ldw	r3,8(fp)
 8026150:	00900034 	movhi	r2,16384
 8026154:	10bfffc4 	addi	r2,r2,-1
 8026158:	1884703a 	and	r2,r3,r2
 802615c:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
 8026160:	e0bffe17 	ldw	r2,-8(fp)
 8026164:	10c00715 	stw	r3,28(r2)
    
    return 0;
 8026168:	0005883a 	mov	r2,zero
}
 802616c:	e037883a 	mov	sp,fp
 8026170:	df000017 	ldw	fp,0(sp)
 8026174:	dec00104 	addi	sp,sp,4
 8026178:	f800283a 	ret

0802617c <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 802617c:	defff404 	addi	sp,sp,-48
 8026180:	df000b15 	stw	fp,44(sp)
 8026184:	df000b04 	addi	fp,sp,44
 8026188:	e13ffd15 	stw	r4,-12(fp)
 802618c:	e17ffc15 	stw	r5,-16(fp)
 8026190:	e1bffb15 	stw	r6,-20(fp)
 8026194:	e1fffa15 	stw	r7,-24(fp)
 8026198:	e1800517 	ldw	r6,20(fp)
 802619c:	e1400617 	ldw	r5,24(fp)
 80261a0:	e1000717 	ldw	r4,28(fp)
 80261a4:	e0c00817 	ldw	r3,32(fp)
 80261a8:	e0800917 	ldw	r2,36(fp)
 80261ac:	e1bff90d 	sth	r6,-28(fp)
 80261b0:	e17ff805 	stb	r5,-32(fp)
 80261b4:	e13ff705 	stb	r4,-36(fp)
 80261b8:	e0fff60d 	sth	r3,-40(fp)
 80261bc:	e0bff50d 	sth	r2,-44(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
 80261c0:	e0bffd17 	ldw	r2,-12(fp)
 80261c4:	10c01217 	ldw	r3,72(r2)
 80261c8:	e0800317 	ldw	r2,12(fp)
 80261cc:	18801936 	bltu	r3,r2,8026234 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 80261d0:	e13ffd17 	ldw	r4,-12(fp)
 80261d4:	20801317 	ldw	r2,76(r4)
 80261d8:	20c01417 	ldw	r3,80(r4)
 80261dc:	e13ff60b 	ldhu	r4,-40(fp)
 80261e0:	213fffcc 	andi	r4,r4,65535
 80261e4:	2015883a 	mov	r10,r4
 80261e8:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
 80261ec:	1ac01136 	bltu	r3,r11,8026234 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 80261f0:	58c0011e 	bne	r11,r3,80261f8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
 80261f4:	12800f36 	bltu	r2,r10,8026234 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
 80261f8:	e13ffd17 	ldw	r4,-12(fp)
 80261fc:	20801317 	ldw	r2,76(r4)
 8026200:	20c01417 	ldw	r3,80(r4)
 8026204:	e13ff50b 	ldhu	r4,-44(fp)
 8026208:	213fffcc 	andi	r4,r4,65535
 802620c:	2011883a 	mov	r8,r4
 8026210:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
 8026214:	1a400736 	bltu	r3,r9,8026234 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 8026218:	48c0011e 	bne	r9,r3,8026220 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
 802621c:	12000536 	bltu	r2,r8,8026234 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
 8026220:	e0bffd17 	ldw	r2,-12(fp)
 8026224:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
 8026228:	10803fcc 	andi	r2,r2,255
 802622c:	10800060 	cmpeqi	r2,r2,1
 8026230:	1000021e 	bne	r2,zero,802623c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
 8026234:	00bffa84 	movi	r2,-22
 8026238:	00003106 	br	8026300 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
 802623c:	e0bffc17 	ldw	r2,-16(fp)
 8026240:	e0fffb17 	ldw	r3,-20(fp)
 8026244:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
 8026248:	e0bffc17 	ldw	r2,-16(fp)
 802624c:	e0fffa17 	ldw	r3,-24(fp)
 8026250:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
 8026254:	e0bffc17 	ldw	r2,-16(fp)
 8026258:	e0c00117 	ldw	r3,4(fp)
 802625c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
 8026260:	e0bffc17 	ldw	r2,-16(fp)
 8026264:	e0c00217 	ldw	r3,8(fp)
 8026268:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 802626c:	e0bffc17 	ldw	r2,-16(fp)
 8026270:	e0c00317 	ldw	r3,12(fp)
 8026274:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 8026278:	e0bffc17 	ldw	r2,-16(fp)
 802627c:	e0fff90b 	ldhu	r3,-28(fp)
 8026280:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
 8026284:	e0bffc17 	ldw	r2,-16(fp)
 8026288:	e0fff803 	ldbu	r3,-32(fp)
 802628c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
 8026290:	e0bffc17 	ldw	r2,-16(fp)
 8026294:	e0fff703 	ldbu	r3,-36(fp)
 8026298:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
 802629c:	e0bffc17 	ldw	r2,-16(fp)
 80262a0:	e0fff60b 	ldhu	r3,-40(fp)
 80262a4:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
 80262a8:	e0bffc17 	ldw	r2,-16(fp)
 80262ac:	e0fff50b 	ldhu	r3,-44(fp)
 80262b0:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
 80262b4:	e0bffc17 	ldw	r2,-16(fp)
 80262b8:	1019883a 	mov	r12,r2
 80262bc:	001b883a 	mov	r13,zero
 80262c0:	e33ffe15 	stw	r12,-8(fp)
 80262c4:	e37fff15 	stw	r13,-4(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
 80262c8:	e0fffe17 	ldw	r3,-8(fp)
 80262cc:	e0bffc17 	ldw	r2,-16(fp)
 80262d0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
 80262d4:	e0ffff17 	ldw	r3,-4(fp)
 80262d8:	e0bffc17 	ldw	r2,-16(fp)
 80262dc:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 80262e0:	e0c00417 	ldw	r3,16(fp)
 80262e4:	00900034 	movhi	r2,16384
 80262e8:	10bfffc4 	addi	r2,r2,-1
 80262ec:	1884703a 	and	r2,r3,r2
 80262f0:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
 80262f4:	e0bffc17 	ldw	r2,-16(fp)
 80262f8:	10c00f15 	stw	r3,60(r2)

  return 0 ;
 80262fc:	0005883a 	mov	r2,zero
}
 8026300:	e037883a 	mov	sp,fp
 8026304:	df000017 	ldw	fp,0(sp)
 8026308:	dec00104 	addi	sp,sp,4
 802630c:	f800283a 	ret

08026310 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
 8026310:	defff804 	addi	sp,sp,-32
 8026314:	dfc00715 	stw	ra,28(sp)
 8026318:	df000615 	stw	fp,24(sp)
 802631c:	df000604 	addi	fp,sp,24
 8026320:	e13fff15 	stw	r4,-4(fp)
 8026324:	e17ffe15 	stw	r5,-8(fp)
 8026328:	e1bffd15 	stw	r6,-12(fp)
 802632c:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 8026330:	e0800317 	ldw	r2,12(fp)
 8026334:	d8800115 	stw	r2,4(sp)
 8026338:	e0800217 	ldw	r2,8(fp)
 802633c:	d8800015 	stw	r2,0(sp)
 8026340:	e1fffc17 	ldw	r7,-16(fp)
 8026344:	e1bffd17 	ldw	r6,-12(fp)
 8026348:	e17ffe17 	ldw	r5,-8(fp)
 802634c:	e13fff17 	ldw	r4,-4(fp)
 8026350:	80260d80 	call	80260d8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
 8026354:	e037883a 	mov	sp,fp
 8026358:	dfc00117 	ldw	ra,4(sp)
 802635c:	df000017 	ldw	fp,0(sp)
 8026360:	dec00204 	addi	sp,sp,8
 8026364:	f800283a 	ret

08026368 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 8026368:	defff804 	addi	sp,sp,-32
 802636c:	dfc00715 	stw	ra,28(sp)
 8026370:	df000615 	stw	fp,24(sp)
 8026374:	df000604 	addi	fp,sp,24
 8026378:	e13fff15 	stw	r4,-4(fp)
 802637c:	e17ffe15 	stw	r5,-8(fp)
 8026380:	e1bffd15 	stw	r6,-12(fp)
 8026384:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 8026388:	e0800217 	ldw	r2,8(fp)
 802638c:	d8800115 	stw	r2,4(sp)
 8026390:	e0bffc17 	ldw	r2,-16(fp)
 8026394:	d8800015 	stw	r2,0(sp)
 8026398:	e1fffd17 	ldw	r7,-12(fp)
 802639c:	000d883a 	mov	r6,zero
 80263a0:	e17ffe17 	ldw	r5,-8(fp)
 80263a4:	e13fff17 	ldw	r4,-4(fp)
 80263a8:	80260d80 	call	80260d8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
 80263ac:	e037883a 	mov	sp,fp
 80263b0:	dfc00117 	ldw	ra,4(sp)
 80263b4:	df000017 	ldw	fp,0(sp)
 80263b8:	dec00204 	addi	sp,sp,8
 80263bc:	f800283a 	ret

080263c0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
 80263c0:	defff804 	addi	sp,sp,-32
 80263c4:	dfc00715 	stw	ra,28(sp)
 80263c8:	df000615 	stw	fp,24(sp)
 80263cc:	df000604 	addi	fp,sp,24
 80263d0:	e13fff15 	stw	r4,-4(fp)
 80263d4:	e17ffe15 	stw	r5,-8(fp)
 80263d8:	e1bffd15 	stw	r6,-12(fp)
 80263dc:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 80263e0:	e0800217 	ldw	r2,8(fp)
 80263e4:	d8800115 	stw	r2,4(sp)
 80263e8:	e0bffc17 	ldw	r2,-16(fp)
 80263ec:	d8800015 	stw	r2,0(sp)
 80263f0:	000f883a 	mov	r7,zero
 80263f4:	e1bffd17 	ldw	r6,-12(fp)
 80263f8:	e17ffe17 	ldw	r5,-8(fp)
 80263fc:	e13fff17 	ldw	r4,-4(fp)
 8026400:	80260d80 	call	80260d8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
 8026404:	e037883a 	mov	sp,fp
 8026408:	dfc00117 	ldw	ra,4(sp)
 802640c:	df000017 	ldw	fp,0(sp)
 8026410:	dec00204 	addi	sp,sp,8
 8026414:	f800283a 	ret

08026418 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
 8026418:	deffee04 	addi	sp,sp,-72
 802641c:	dfc01115 	stw	ra,68(sp)
 8026420:	df001015 	stw	fp,64(sp)
 8026424:	df001004 	addi	fp,sp,64
 8026428:	e13fff15 	stw	r4,-4(fp)
 802642c:	e17ffe15 	stw	r5,-8(fp)
 8026430:	e1bffd15 	stw	r6,-12(fp)
 8026434:	e1fffc15 	stw	r7,-16(fp)
 8026438:	e1000417 	ldw	r4,16(fp)
 802643c:	e0c00517 	ldw	r3,20(fp)
 8026440:	e0800617 	ldw	r2,24(fp)
 8026444:	e13ffb0d 	sth	r4,-20(fp)
 8026448:	e0fffa05 	stb	r3,-24(fp)
 802644c:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
 8026450:	e0bffb0b 	ldhu	r2,-20(fp)
 8026454:	e0fffa03 	ldbu	r3,-24(fp)
 8026458:	e13ff90b 	ldhu	r4,-28(fp)
 802645c:	d9000815 	stw	r4,32(sp)
 8026460:	d8000715 	stw	zero,28(sp)
 8026464:	d8c00615 	stw	r3,24(sp)
 8026468:	d8000515 	stw	zero,20(sp)
 802646c:	d8800415 	stw	r2,16(sp)
 8026470:	e0800317 	ldw	r2,12(fp)
 8026474:	d8800315 	stw	r2,12(sp)
 8026478:	e0800217 	ldw	r2,8(fp)
 802647c:	d8800215 	stw	r2,8(sp)
 8026480:	e0bffc17 	ldw	r2,-16(fp)
 8026484:	d8800115 	stw	r2,4(sp)
 8026488:	e0bffd17 	ldw	r2,-12(fp)
 802648c:	d8800015 	stw	r2,0(sp)
 8026490:	000f883a 	mov	r7,zero
 8026494:	000d883a 	mov	r6,zero
 8026498:	e17ffe17 	ldw	r5,-8(fp)
 802649c:	e13fff17 	ldw	r4,-4(fp)
 80264a0:	802617c0 	call	802617c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
 80264a4:	e037883a 	mov	sp,fp
 80264a8:	dfc00117 	ldw	ra,4(sp)
 80264ac:	df000017 	ldw	fp,0(sp)
 80264b0:	dec00204 	addi	sp,sp,8
 80264b4:	f800283a 	ret

080264b8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 80264b8:	deffee04 	addi	sp,sp,-72
 80264bc:	dfc01115 	stw	ra,68(sp)
 80264c0:	df001015 	stw	fp,64(sp)
 80264c4:	df001004 	addi	fp,sp,64
 80264c8:	e13fff15 	stw	r4,-4(fp)
 80264cc:	e17ffe15 	stw	r5,-8(fp)
 80264d0:	e1bffd15 	stw	r6,-12(fp)
 80264d4:	e1fffc15 	stw	r7,-16(fp)
 80264d8:	e1000417 	ldw	r4,16(fp)
 80264dc:	e0c00517 	ldw	r3,20(fp)
 80264e0:	e0800617 	ldw	r2,24(fp)
 80264e4:	e13ffb0d 	sth	r4,-20(fp)
 80264e8:	e0fffa05 	stb	r3,-24(fp)
 80264ec:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 80264f0:	e0bffb0b 	ldhu	r2,-20(fp)
 80264f4:	e0fffa03 	ldbu	r3,-24(fp)
 80264f8:	e13ff90b 	ldhu	r4,-28(fp)
 80264fc:	d8000815 	stw	zero,32(sp)
 8026500:	d9000715 	stw	r4,28(sp)
 8026504:	d8000615 	stw	zero,24(sp)
 8026508:	d8c00515 	stw	r3,20(sp)
 802650c:	d8800415 	stw	r2,16(sp)
 8026510:	e0800317 	ldw	r2,12(fp)
 8026514:	d8800315 	stw	r2,12(sp)
 8026518:	e0800217 	ldw	r2,8(fp)
 802651c:	d8800215 	stw	r2,8(sp)
 8026520:	d8000115 	stw	zero,4(sp)
 8026524:	d8000015 	stw	zero,0(sp)
 8026528:	e1fffc17 	ldw	r7,-16(fp)
 802652c:	e1bffd17 	ldw	r6,-12(fp)
 8026530:	e17ffe17 	ldw	r5,-8(fp)
 8026534:	e13fff17 	ldw	r4,-4(fp)
 8026538:	802617c0 	call	802617c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
 802653c:	e037883a 	mov	sp,fp
 8026540:	dfc00117 	ldw	ra,4(sp)
 8026544:	df000017 	ldw	fp,0(sp)
 8026548:	dec00204 	addi	sp,sp,8
 802654c:	f800283a 	ret

08026550 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 8026550:	deffec04 	addi	sp,sp,-80
 8026554:	dfc01315 	stw	ra,76(sp)
 8026558:	df001215 	stw	fp,72(sp)
 802655c:	df001204 	addi	fp,sp,72
 8026560:	e13fff15 	stw	r4,-4(fp)
 8026564:	e17ffe15 	stw	r5,-8(fp)
 8026568:	e1bffd15 	stw	r6,-12(fp)
 802656c:	e1fffc15 	stw	r7,-16(fp)
 8026570:	e1800617 	ldw	r6,24(fp)
 8026574:	e1400717 	ldw	r5,28(fp)
 8026578:	e1000817 	ldw	r4,32(fp)
 802657c:	e0c00917 	ldw	r3,36(fp)
 8026580:	e0800a17 	ldw	r2,40(fp)
 8026584:	e1bffb0d 	sth	r6,-20(fp)
 8026588:	e17ffa05 	stb	r5,-24(fp)
 802658c:	e13ff905 	stb	r4,-28(fp)
 8026590:	e0fff80d 	sth	r3,-32(fp)
 8026594:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 8026598:	e0bffb0b 	ldhu	r2,-20(fp)
 802659c:	e0fffa03 	ldbu	r3,-24(fp)
 80265a0:	e13ff903 	ldbu	r4,-28(fp)
 80265a4:	e17ff80b 	ldhu	r5,-32(fp)
 80265a8:	e1bff70b 	ldhu	r6,-36(fp)
 80265ac:	d9800815 	stw	r6,32(sp)
 80265b0:	d9400715 	stw	r5,28(sp)
 80265b4:	d9000615 	stw	r4,24(sp)
 80265b8:	d8c00515 	stw	r3,20(sp)
 80265bc:	d8800415 	stw	r2,16(sp)
 80265c0:	e0800517 	ldw	r2,20(fp)
 80265c4:	d8800315 	stw	r2,12(sp)
 80265c8:	e0800417 	ldw	r2,16(fp)
 80265cc:	d8800215 	stw	r2,8(sp)
 80265d0:	e0800317 	ldw	r2,12(fp)
 80265d4:	d8800115 	stw	r2,4(sp)
 80265d8:	e0800217 	ldw	r2,8(fp)
 80265dc:	d8800015 	stw	r2,0(sp)
 80265e0:	e1fffc17 	ldw	r7,-16(fp)
 80265e4:	e1bffd17 	ldw	r6,-12(fp)
 80265e8:	e17ffe17 	ldw	r5,-8(fp)
 80265ec:	e13fff17 	ldw	r4,-4(fp)
 80265f0:	802617c0 	call	802617c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 80265f4:	e037883a 	mov	sp,fp
 80265f8:	dfc00117 	ldw	ra,4(sp)
 80265fc:	df000017 	ldw	fp,0(sp)
 8026600:	dec00204 	addi	sp,sp,8
 8026604:	f800283a 	ret

08026608 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
 8026608:	defffc04 	addi	sp,sp,-16
 802660c:	df000315 	stw	fp,12(sp)
 8026610:	df000304 	addi	fp,sp,12
 8026614:	e13ffe15 	stw	r4,-8(fp)
 8026618:	e17ffd15 	stw	r5,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
 802661c:	e0bffd17 	ldw	r2,-12(fp)
 8026620:	1000021e 	bne	r2,zero,802662c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 8026624:	00bffa84 	movi	r2,-22
 8026628:	00002f06 	br	80266e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
 802662c:	e0bffd17 	ldw	r2,-12(fp)
 8026630:	10c00317 	ldw	r3,12(r2)
 8026634:	e0bffd17 	ldw	r2,-12(fp)
 8026638:	18800226 	beq	r3,r2,8026644 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 802663c:	00bffa84 	movi	r2,-22
 8026640:	00002906 	br	80266e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
 8026644:	e0bffe17 	ldw	r2,-8(fp)
 8026648:	10800017 	ldw	r2,0(r2)
 802664c:	1000051e 	bne	r2,zero,8026664 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
 8026650:	e0bffe17 	ldw	r2,-8(fp)
 8026654:	e0fffd17 	ldw	r3,-12(fp)
 8026658:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
 802665c:	0005883a 	mov	r2,zero
 8026660:	00002106 	br	80266e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
 8026664:	e0bffe17 	ldw	r2,-8(fp)
 8026668:	10800017 	ldw	r2,0(r2)
 802666c:	e0fffd17 	ldw	r3,-12(fp)
 8026670:	1880021e 	bne	r3,r2,802667c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 8026674:	00bffa84 	movi	r2,-22
 8026678:	00001b06 	br	80266e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 802667c:	e0bffe17 	ldw	r2,-8(fp)
 8026680:	10800017 	ldw	r2,0(r2)
 8026684:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 8026688:	00000906 	br	80266b0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
 802668c:	e0bfff17 	ldw	r2,-4(fp)
 8026690:	10c00317 	ldw	r3,12(r2)
 8026694:	e0bffd17 	ldw	r2,-12(fp)
 8026698:	1880021e 	bne	r3,r2,80266a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 802669c:	00bffa84 	movi	r2,-22
 80266a0:	00001106 	br	80266e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 80266a4:	e0bfff17 	ldw	r2,-4(fp)
 80266a8:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
 80266ac:	e0bfff15 	stw	r2,-4(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 80266b0:	e0bfff17 	ldw	r2,-4(fp)
 80266b4:	10800317 	ldw	r2,12(r2)
 80266b8:	e0fffe17 	ldw	r3,-8(fp)
 80266bc:	18c00017 	ldw	r3,0(r3)
 80266c0:	10fff21e 	bne	r2,r3,802668c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x84>
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
 80266c4:	e0fffd17 	ldw	r3,-12(fp)
 80266c8:	e0bfff17 	ldw	r2,-4(fp)
 80266cc:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
 80266d0:	e0bffe17 	ldw	r2,-8(fp)
 80266d4:	10800017 	ldw	r2,0(r2)
 80266d8:	1007883a 	mov	r3,r2
 80266dc:	e0bffd17 	ldw	r2,-12(fp)
 80266e0:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
 80266e4:	0005883a 	mov	r2,zero
}
 80266e8:	e037883a 	mov	sp,fp
 80266ec:	df000017 	ldw	fp,0(sp)
 80266f0:	dec00104 	addi	sp,sp,4
 80266f4:	f800283a 	ret

080266f8 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
 80266f8:	defff804 	addi	sp,sp,-32
 80266fc:	df000715 	stw	fp,28(sp)
 8026700:	df000704 	addi	fp,sp,28
 8026704:	e13ffa15 	stw	r4,-24(fp)
 8026708:	e17ff915 	stw	r5,-28(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
 802670c:	e13ff917 	ldw	r4,-28(fp)
 8026710:	2000021e 	bne	r4,zero,802671c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 8026714:	00bffa84 	movi	r2,-22
 8026718:	00005906 	br	8026880 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
 802671c:	e13ff917 	ldw	r4,-28(fp)
 8026720:	2015883a 	mov	r10,r4
 8026724:	0017883a 	mov	r11,zero
 8026728:	e2bffb15 	stw	r10,-20(fp)
 802672c:	e2fffc15 	stw	r11,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 8026730:	e13ff917 	ldw	r4,-28(fp)
 8026734:	21400317 	ldw	r5,12(r4)
 8026738:	e13ffb17 	ldw	r4,-20(fp)
 802673c:	2900041e 	bne	r5,r4,8026750 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
 8026740:	e13ff917 	ldw	r4,-28(fp)
 8026744:	21400b17 	ldw	r5,44(r4)
 8026748:	e13ffc17 	ldw	r4,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 802674c:	29000226 	beq	r5,r4,8026758 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 8026750:	00bffa84 	movi	r2,-22
 8026754:	00004a06 	br	8026880 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
 8026758:	e13ffa17 	ldw	r4,-24(fp)
 802675c:	21000017 	ldw	r4,0(r4)
 8026760:	2000051e 	bne	r4,zero,8026778 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
 8026764:	e0bffa17 	ldw	r2,-24(fp)
 8026768:	e0fff917 	ldw	r3,-28(fp)
 802676c:	10c00015 	stw	r3,0(r2)
        return 0;
 8026770:	0005883a 	mov	r2,zero
 8026774:	00004206 	br	8026880 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
 8026778:	e13ffa17 	ldw	r4,-24(fp)
 802677c:	21000017 	ldw	r4,0(r4)
 8026780:	e17ff917 	ldw	r5,-28(fp)
 8026784:	2900021e 	bne	r5,r4,8026790 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 8026788:	00bffa84 	movi	r2,-22
 802678c:	00003c06 	br	8026880 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 8026790:	e13ffa17 	ldw	r4,-24(fp)
 8026794:	21000017 	ldw	r4,0(r4)
 8026798:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
 802679c:	e13ffa17 	ldw	r4,-24(fp)
 80267a0:	21000017 	ldw	r4,0(r4)
 80267a4:	2011883a 	mov	r8,r4
 80267a8:	0013883a 	mov	r9,zero
 80267ac:	e23ffd15 	stw	r8,-12(fp)
 80267b0:	e27ffe15 	stw	r9,-8(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 80267b4:	00001806 	br	8026818 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
 80267b8:	e13ff917 	ldw	r4,-28(fp)
 80267bc:	200d883a 	mov	r6,r4
 80267c0:	000f883a 	mov	r7,zero
 80267c4:	e1bffb15 	stw	r6,-20(fp)
 80267c8:	e1fffc15 	stw	r7,-16(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
 80267cc:	e13fff17 	ldw	r4,-4(fp)
 80267d0:	21400317 	ldw	r5,12(r4)
 80267d4:	e13ffb17 	ldw	r4,-20(fp)
 80267d8:	2900061e 	bne	r5,r4,80267f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
 80267dc:	e13fff17 	ldw	r4,-4(fp)
 80267e0:	21400b17 	ldw	r5,44(r4)
 80267e4:	e13ffc17 	ldw	r4,-16(fp)
 80267e8:	2900021e 	bne	r5,r4,80267f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 80267ec:	00bffa84 	movi	r2,-22
 80267f0:	00002306 	br	8026880 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 80267f4:	e13fff17 	ldw	r4,-4(fp)
 80267f8:	21000317 	ldw	r4,12(r4)
 80267fc:	e13ffb15 	stw	r4,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 8026800:	e13fff17 	ldw	r4,-4(fp)
 8026804:	21000b17 	ldw	r4,44(r4)
 8026808:	e13ffc15 	stw	r4,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 802680c:	e13ffb17 	ldw	r4,-20(fp)
 8026810:	e17ffc17 	ldw	r5,-16(fp)
        last_descr_ptr = 
 8026814:	e13fff15 	stw	r4,-4(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8026818:	e13fff17 	ldw	r4,-4(fp)
 802681c:	21400317 	ldw	r5,12(r4)
 8026820:	e13ffd17 	ldw	r4,-12(fp)
 8026824:	293fe41e 	bne	r5,r4,80267b8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 8026828:	e13fff17 	ldw	r4,-4(fp)
 802682c:	21400b17 	ldw	r5,44(r4)
 8026830:	e13ffe17 	ldw	r4,-8(fp)
 8026834:	293fe01e 	bne	r5,r4,80267b8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
 8026838:	e13ff917 	ldw	r4,-28(fp)
 802683c:	2005883a 	mov	r2,r4
 8026840:	0007883a 	mov	r3,zero
 8026844:	e0bffb15 	stw	r2,-20(fp)
 8026848:	e0fffc15 	stw	r3,-16(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
 802684c:	e0fffb17 	ldw	r3,-20(fp)
 8026850:	e0bfff17 	ldw	r2,-4(fp)
 8026854:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
 8026858:	e0fffc17 	ldw	r3,-16(fp)
 802685c:	e0bfff17 	ldw	r2,-4(fp)
 8026860:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
 8026864:	e0fffd17 	ldw	r3,-12(fp)
 8026868:	e0bff917 	ldw	r2,-28(fp)
 802686c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
 8026870:	e0fffe17 	ldw	r3,-8(fp)
 8026874:	e0bff917 	ldw	r2,-28(fp)
 8026878:	10c00b15 	stw	r3,44(r2)
    return 0;
 802687c:	0005883a 	mov	r2,zero
}
 8026880:	e037883a 	mov	sp,fp
 8026884:	df000017 	ldw	fp,0(sp)
 8026888:	dec00104 	addi	sp,sp,4
 802688c:	f800283a 	ret

08026890 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
 8026890:	defff804 	addi	sp,sp,-32
 8026894:	dfc00715 	stw	ra,28(sp)
 8026898:	df000615 	stw	fp,24(sp)
 802689c:	df000604 	addi	fp,sp,24
 80268a0:	e13ffc15 	stw	r4,-16(fp)
 80268a4:	2805883a 	mov	r2,r5
 80268a8:	3007883a 	mov	r3,r6
 80268ac:	e0bffb05 	stb	r2,-20(fp)
 80268b0:	1805883a 	mov	r2,r3
 80268b4:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 descriptor_control_field = 0;
 80268b8:	e03ffd15 	stw	zero,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 80268bc:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
 80268c0:	e0bffc17 	ldw	r2,-16(fp)
 80268c4:	1000021e 	bne	r2,zero,80268d0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
 80268c8:	00bffa84 	movi	r2,-22
 80268cc:	00002f06 	br	802698c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xfc>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 80268d0:	e0bffc17 	ldw	r2,-16(fp)
 80268d4:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 80268d8:	00000d06 	br	8026910 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x80>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
 80268dc:	e0bfff17 	ldw	r2,-4(fp)
 80268e0:	10800717 	ldw	r2,28(r2)
 80268e4:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 80268e8:	e0bffd17 	ldw	r2,-12(fp)
 80268ec:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 80268f0:	e0bfff17 	ldw	r2,-4(fp)
 80268f4:	10c00715 	stw	r3,28(r2)
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 80268f8:	e0bfff17 	ldw	r2,-4(fp)
 80268fc:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
 8026900:	e0bfff15 	stw	r2,-4(fp)
            
        descriptor_count++;
 8026904:	e0bffe17 	ldw	r2,-8(fp)
 8026908:	10800044 	addi	r2,r2,1
 802690c:	e0bffe15 	stw	r2,-8(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 8026910:	e0bfff17 	ldw	r2,-4(fp)
 8026914:	10c00317 	ldw	r3,12(r2)
 8026918:	e0bffc17 	ldw	r2,-16(fp)
 802691c:	18bfef1e 	bne	r3,r2,80268dc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x4c>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
 8026920:	e0bfff17 	ldw	r2,-4(fp)
 8026924:	10800717 	ldw	r2,28(r2)
 8026928:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 802692c:	e0bffb03 	ldbu	r2,-20(fp)
 8026930:	10000726 	beq	r2,zero,8026950 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc0>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 8026934:	e0fffd17 	ldw	r3,-12(fp)
 8026938:	00b00034 	movhi	r2,49152
 802693c:	10bfffc4 	addi	r2,r2,-1
 8026940:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
 8026944:	e0bfff17 	ldw	r2,-4(fp)
 8026948:	10c00715 	stw	r3,28(r2)
 802694c:	00000406 	br	8026960 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xd0>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 8026950:	e0bffd17 	ldw	r2,-12(fp)
 8026954:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8026958:	e0bfff17 	ldw	r2,-4(fp)
 802695c:	10c00715 	stw	r3,28(r2)
    }
    
    descriptor_count++;
 8026960:	e0bffe17 	ldw	r2,-8(fp)
 8026964:	10800044 	addi	r2,r2,1
 8026968:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
 802696c:	e0bffa03 	ldbu	r2,-24(fp)
 8026970:	10000526 	beq	r2,zero,8026988 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
 8026974:	e0bffe17 	ldw	r2,-8(fp)
 8026978:	1004917a 	slli	r2,r2,5
 802697c:	100b883a 	mov	r5,r2
 8026980:	e13ffc17 	ldw	r4,-16(fp)
 8026984:	803e8d40 	call	803e8d4 <alt_dcache_flush>
    }
    
    return 0;
 8026988:	0005883a 	mov	r2,zero
}
 802698c:	e037883a 	mov	sp,fp
 8026990:	dfc00117 	ldw	ra,4(sp)
 8026994:	df000017 	ldw	fp,0(sp)
 8026998:	dec00204 	addi	sp,sp,8
 802699c:	f800283a 	ret

080269a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
 80269a0:	defff404 	addi	sp,sp,-48
 80269a4:	dfc00b15 	stw	ra,44(sp)
 80269a8:	df000a15 	stw	fp,40(sp)
 80269ac:	df000a04 	addi	fp,sp,40
 80269b0:	e13ff815 	stw	r4,-32(fp)
 80269b4:	2809883a 	mov	r4,r5
 80269b8:	300b883a 	mov	r5,r6
 80269bc:	e13ff705 	stb	r4,-36(fp)
 80269c0:	2809883a 	mov	r4,r5
 80269c4:	e13ff605 	stb	r4,-40(fp)
    alt_u32 descriptor_control_field = 0;
 80269c8:	e03ffd15 	stw	zero,-12(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 80269cc:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
 80269d0:	e13ff817 	ldw	r4,-32(fp)
 80269d4:	2000021e 	bne	r4,zero,80269e0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
 80269d8:	00bffa84 	movi	r2,-22
 80269dc:	00003e06 	br	8026ad8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x138>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 80269e0:	e13ff817 	ldw	r4,-32(fp)
 80269e4:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
 80269e8:	e13ff817 	ldw	r4,-32(fp)
 80269ec:	2005883a 	mov	r2,r4
 80269f0:	0007883a 	mov	r3,zero
 80269f4:	e0bffb15 	stw	r2,-20(fp)
 80269f8:	e0fffc15 	stw	r3,-16(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 80269fc:	00001306 	br	8026a4c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
 8026a00:	e0bfff17 	ldw	r2,-4(fp)
 8026a04:	10800f17 	ldw	r2,60(r2)
 8026a08:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 8026a0c:	e0bffd17 	ldw	r2,-12(fp)
 8026a10:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8026a14:	e0bfff17 	ldw	r2,-4(fp)
 8026a18:	10c00f15 	stw	r3,60(r2)
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 8026a1c:	e0bfff17 	ldw	r2,-4(fp)
 8026a20:	10800317 	ldw	r2,12(r2)
 8026a24:	e0bff915 	stw	r2,-28(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 8026a28:	e0bfff17 	ldw	r2,-4(fp)
 8026a2c:	10800b17 	ldw	r2,44(r2)
 8026a30:	e0bffa15 	stw	r2,-24(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 8026a34:	e0bff917 	ldw	r2,-28(fp)
 8026a38:	e0fffa17 	ldw	r3,-24(fp)
        last_descr_ptr = 
 8026a3c:	e0bfff15 	stw	r2,-4(fp)
        descriptor_count++;            
 8026a40:	e0bffe17 	ldw	r2,-8(fp)
 8026a44:	10800044 	addi	r2,r2,1
 8026a48:	e0bffe15 	stw	r2,-8(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8026a4c:	e0bfff17 	ldw	r2,-4(fp)
 8026a50:	10c00317 	ldw	r3,12(r2)
 8026a54:	e0bffb17 	ldw	r2,-20(fp)
 8026a58:	18bfe91e 	bne	r3,r2,8026a00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x60>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 8026a5c:	e0bfff17 	ldw	r2,-4(fp)
 8026a60:	10c00b17 	ldw	r3,44(r2)
 8026a64:	e0bffc17 	ldw	r2,-16(fp)
 8026a68:	18bfe51e 	bne	r3,r2,8026a00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x60>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
 8026a6c:	e0bfff17 	ldw	r2,-4(fp)
 8026a70:	10800f17 	ldw	r2,60(r2)
 8026a74:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 8026a78:	e0bff703 	ldbu	r2,-36(fp)
 8026a7c:	10000726 	beq	r2,zero,8026a9c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xfc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 8026a80:	e0fffd17 	ldw	r3,-12(fp)
 8026a84:	00b00034 	movhi	r2,49152
 8026a88:	10bfffc4 	addi	r2,r2,-1
 8026a8c:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
 8026a90:	e0bfff17 	ldw	r2,-4(fp)
 8026a94:	10c00f15 	stw	r3,60(r2)
 8026a98:	00000406 	br	8026aac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x10c>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 8026a9c:	e0bffd17 	ldw	r2,-12(fp)
 8026aa0:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8026aa4:	e0bfff17 	ldw	r2,-4(fp)
 8026aa8:	10c00f15 	stw	r3,60(r2)
    }
    
    descriptor_count++;
 8026aac:	e0bffe17 	ldw	r2,-8(fp)
 8026ab0:	10800044 	addi	r2,r2,1
 8026ab4:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
 8026ab8:	e0bff603 	ldbu	r2,-40(fp)
 8026abc:	10000526 	beq	r2,zero,8026ad4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x134>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
 8026ac0:	e0bffe17 	ldw	r2,-8(fp)
 8026ac4:	100491ba 	slli	r2,r2,6
 8026ac8:	100b883a 	mov	r5,r2
 8026acc:	e13ff817 	ldw	r4,-32(fp)
 8026ad0:	803e8d40 	call	803e8d4 <alt_dcache_flush>
    }
    
    return 0;
 8026ad4:	0005883a 	mov	r2,zero
}
 8026ad8:	e037883a 	mov	sp,fp
 8026adc:	dfc00117 	ldw	ra,4(sp)
 8026ae0:	df000017 	ldw	fp,0(sp)
 8026ae4:	dec00204 	addi	sp,sp,8
 8026ae8:	f800283a 	ret

08026aec <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
 8026aec:	deffeb04 	addi	sp,sp,-84
 8026af0:	dfc01415 	stw	ra,80(sp)
 8026af4:	df001315 	stw	fp,76(sp)
 8026af8:	df001304 	addi	fp,sp,76
 8026afc:	e13ff115 	stw	r4,-60(fp)
 8026b00:	e17fef15 	stw	r5,-68(fp)
 8026b04:	e1bff015 	stw	r6,-64(fp)
 8026b08:	3807883a 	mov	r3,r7
 8026b0c:	e0800217 	ldw	r2,8(fp)
 8026b10:	e0ffee05 	stb	r3,-72(fp)
 8026b14:	e0bfed05 	stb	r2,-76(fp)
    alt_u32 prefetcher_ctl = 0;
 8026b18:	e03fff15 	stw	zero,-4(fp)
    alt_u32 dispatcher_ctl = 0;
 8026b1c:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
 8026b20:	e03ffd15 	stw	zero,-12(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
 8026b24:	e0bfef17 	ldw	r2,-68(fp)
 8026b28:	e0bff315 	stw	r2,-52(fp)
 8026b2c:	e0bff017 	ldw	r2,-64(fp)
 8026b30:	e0bff415 	stw	r2,-48(fp)
    
    /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
 8026b34:	e0bff117 	ldw	r2,-60(fp)
 8026b38:	10801817 	ldw	r2,96(r2)
 8026b3c:	e0bffc15 	stw	r2,-16(fp)
 8026b40:	e03ffb8d 	sth	zero,-18(fp)
 8026b44:	e0bffb8b 	ldhu	r2,-18(fp)
 8026b48:	e0fff2c4 	addi	r3,fp,-53
 8026b4c:	180d883a 	mov	r6,r3
 8026b50:	100b883a 	mov	r5,r2
 8026b54:	e13ffc17 	ldw	r4,-16(fp)
 8026b58:	801a6700 	call	801a670 <OSSemPend>
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
 8026b5c:	e0bff117 	ldw	r2,-60(fp)
 8026b60:	10800617 	ldw	r2,24(r2)
 8026b64:	10800037 	ldwio	r2,0(r2)
 8026b68:	e0bfff15 	stw	r2,-4(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
 8026b6c:	e0bfff17 	ldw	r2,-4(fp)
 8026b70:	1080004c 	andi	r2,r2,1
 8026b74:	10000626 	beq	r2,zero,8026b90 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
 8026b78:	e0bff117 	ldw	r2,-60(fp)
 8026b7c:	10801817 	ldw	r2,96(r2)
 8026b80:	1009883a 	mov	r4,r2
 8026b84:	801a9f80 	call	801a9f8 <OSSemPost>
        return -EBUSY;
 8026b88:	00bffc04 	movi	r2,-16
 8026b8c:	00009806 	br	8026df0 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 8026b90:	00800804 	movi	r2,32
 8026b94:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8026b98:	0005303a 	rdctl	r2,status
 8026b9c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026ba0:	e0fff917 	ldw	r3,-28(fp)
 8026ba4:	00bfff84 	movi	r2,-2
 8026ba8:	1884703a 	and	r2,r3,r2
 8026bac:	1001703a 	wrctl	status,r2
  return context;
 8026bb0:	e0bff917 	ldw	r2,-28(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 8026bb4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8026bb8:	e0bff117 	ldw	r2,-60(fp)
 8026bbc:	10800317 	ldw	r2,12(r2)
 8026bc0:	10800104 	addi	r2,r2,4
 8026bc4:	e0fffe17 	ldw	r3,-8(fp)
 8026bc8:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
 8026bcc:	e0bff117 	ldw	r2,-60(fp)
 8026bd0:	10800317 	ldw	r2,12(r2)
 8026bd4:	e0fff117 	ldw	r3,-60(fp)
 8026bd8:	18c00317 	ldw	r3,12(r3)
 8026bdc:	18c00037 	ldwio	r3,0(r3)
 8026be0:	10c00035 	stwio	r3,0(r2)
 8026be4:	e0bffd17 	ldw	r2,-12(fp)
 8026be8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8026bec:	e0bffa17 	ldw	r2,-24(fp)
 8026bf0:	1001703a 	wrctl	status,r2
}
 8026bf4:	0001883a 	nop
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
 8026bf8:	e0bff117 	ldw	r2,-60(fp)
 8026bfc:	10800b17 	ldw	r2,44(r2)
 8026c00:	10002326 	beq	r2,zero,8026c90 <alt_msgdma_start_prefetcher_with_list_addr+0x1a4>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
 8026c04:	e0bff117 	ldw	r2,-60(fp)
 8026c08:	10c00d17 	ldw	r3,52(r2)
 8026c0c:	e0bffe17 	ldw	r2,-8(fp)
 8026c10:	1884b03a 	or	r2,r3,r2
 8026c14:	10800514 	ori	r2,r2,20
 8026c18:	e0bffe15 	stw	r2,-8(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 8026c1c:	e0fffe17 	ldw	r3,-8(fp)
 8026c20:	00bff7c4 	movi	r2,-33
 8026c24:	1884703a 	and	r2,r3,r2
 8026c28:	e0bffe15 	stw	r2,-8(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 8026c2c:	e0bfff17 	ldw	r2,-4(fp)
 8026c30:	10800214 	ori	r2,r2,8
 8026c34:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8026c38:	0005303a 	rdctl	r2,status
 8026c3c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026c40:	e0fff717 	ldw	r3,-36(fp)
 8026c44:	00bfff84 	movi	r2,-2
 8026c48:	1884703a 	and	r2,r3,r2
 8026c4c:	1001703a 	wrctl	status,r2
  return context;
 8026c50:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 8026c54:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8026c58:	e0bff117 	ldw	r2,-60(fp)
 8026c5c:	10800317 	ldw	r2,12(r2)
 8026c60:	10800104 	addi	r2,r2,4
 8026c64:	e0fffe17 	ldw	r3,-8(fp)
 8026c68:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8026c6c:	e0bff117 	ldw	r2,-60(fp)
 8026c70:	10800617 	ldw	r2,24(r2)
 8026c74:	e0ffff17 	ldw	r3,-4(fp)
 8026c78:	10c00035 	stwio	r3,0(r2)
 8026c7c:	e0bffd17 	ldw	r2,-12(fp)
 8026c80:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8026c84:	e0bff817 	ldw	r2,-32(fp)
 8026c88:	1001703a 	wrctl	status,r2
}
 8026c8c:	00002406 	br	8026d20 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
 8026c90:	e0bff117 	ldw	r2,-60(fp)
 8026c94:	10c00d17 	ldw	r3,52(r2)
 8026c98:	e0bffe17 	ldw	r2,-8(fp)
 8026c9c:	1884b03a 	or	r2,r3,r2
 8026ca0:	10800114 	ori	r2,r2,4
 8026ca4:	e0bffe15 	stw	r2,-8(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
 8026ca8:	e0fffe17 	ldw	r3,-8(fp)
 8026cac:	00bff3c4 	movi	r2,-49
 8026cb0:	1884703a 	and	r2,r3,r2
 8026cb4:	e0bffe15 	stw	r2,-8(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
 8026cb8:	e0ffff17 	ldw	r3,-4(fp)
 8026cbc:	00bffdc4 	movi	r2,-9
 8026cc0:	1884703a 	and	r2,r3,r2
 8026cc4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8026cc8:	0005303a 	rdctl	r2,status
 8026ccc:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026cd0:	e0fff517 	ldw	r3,-44(fp)
 8026cd4:	00bfff84 	movi	r2,-2
 8026cd8:	1884703a 	and	r2,r3,r2
 8026cdc:	1001703a 	wrctl	status,r2
  return context;
 8026ce0:	e0bff517 	ldw	r2,-44(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
 8026ce4:	e0bffd15 	stw	r2,-12(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8026ce8:	e0bff117 	ldw	r2,-60(fp)
 8026cec:	10800317 	ldw	r2,12(r2)
 8026cf0:	10800104 	addi	r2,r2,4
 8026cf4:	e0fffe17 	ldw	r3,-8(fp)
 8026cf8:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8026cfc:	e0bff117 	ldw	r2,-60(fp)
 8026d00:	10800617 	ldw	r2,24(r2)
 8026d04:	e0ffff17 	ldw	r3,-4(fp)
 8026d08:	10c00035 	stwio	r3,0(r2)
 8026d0c:	e0bffd17 	ldw	r2,-12(fp)
 8026d10:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8026d14:	e0bff617 	ldw	r2,-40(fp)
 8026d18:	1001703a 	wrctl	status,r2
}
 8026d1c:	0001883a 	nop
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
 8026d20:	e0bff117 	ldw	r2,-60(fp)
 8026d24:	10800617 	ldw	r2,24(r2)
 8026d28:	10800104 	addi	r2,r2,4
 8026d2c:	e0fff317 	ldw	r3,-52(fp)
 8026d30:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
 8026d34:	e0bff117 	ldw	r2,-60(fp)
 8026d38:	10800617 	ldw	r2,24(r2)
 8026d3c:	10800204 	addi	r2,r2,8
 8026d40:	e0fff417 	ldw	r3,-48(fp)
 8026d44:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
 8026d48:	e0bfee03 	ldbu	r2,-72(fp)
 8026d4c:	10000426 	beq	r2,zero,8026d60 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
 8026d50:	e0bfff17 	ldw	r2,-4(fp)
 8026d54:	10800414 	ori	r2,r2,16
 8026d58:	e0bfff15 	stw	r2,-4(fp)
 8026d5c:	00000406 	br	8026d70 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
 8026d60:	e0ffff17 	ldw	r3,-4(fp)
 8026d64:	00bffbc4 	movi	r2,-17
 8026d68:	1884703a 	and	r2,r3,r2
 8026d6c:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set poll-en */
     if (poll_en){
 8026d70:	e0bfed03 	ldbu	r2,-76(fp)
 8026d74:	10000e26 	beq	r2,zero,8026db0 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
 8026d78:	e0bfff17 	ldw	r2,-4(fp)
 8026d7c:	10800094 	ori	r2,r2,2
 8026d80:	e0bfff15 	stw	r2,-4(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 8026d84:	e0bff117 	ldw	r2,-60(fp)
 8026d88:	10800617 	ldw	r2,24(r2)
 8026d8c:	10800304 	addi	r2,r2,12
 8026d90:	10800037 	ldwio	r2,0(r2)
 8026d94:	10000a1e 	bne	r2,zero,8026dc0 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 8026d98:	e0bff117 	ldw	r2,-60(fp)
 8026d9c:	10800617 	ldw	r2,24(r2)
 8026da0:	10800304 	addi	r2,r2,12
 8026da4:	00c03fc4 	movi	r3,255
 8026da8:	10c00035 	stwio	r3,0(r2)
 8026dac:	00000406 	br	8026dc0 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
 8026db0:	e0ffff17 	ldw	r3,-4(fp)
 8026db4:	00bfff44 	movi	r2,-3
 8026db8:	1884703a 	and	r2,r3,r2
 8026dbc:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
 8026dc0:	e0bfff17 	ldw	r2,-4(fp)
 8026dc4:	10800054 	ori	r2,r2,1
 8026dc8:	e0bfff15 	stw	r2,-4(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8026dcc:	e0bff117 	ldw	r2,-60(fp)
 8026dd0:	10800617 	ldw	r2,24(r2)
 8026dd4:	e0ffff17 	ldw	r3,-4(fp)
 8026dd8:	10c00035 	stwio	r3,0(r2)
     
     /*
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
 8026ddc:	e0bff117 	ldw	r2,-60(fp)
 8026de0:	10801817 	ldw	r2,96(r2)
 8026de4:	1009883a 	mov	r4,r2
 8026de8:	801a9f80 	call	801a9f8 <OSSemPost>
     
     return 0;
 8026dec:	0005883a 	mov	r2,zero
}
 8026df0:	e037883a 	mov	sp,fp
 8026df4:	dfc00117 	ldw	ra,4(sp)
 8026df8:	df000017 	ldw	fp,0(sp)
 8026dfc:	dec00204 	addi	sp,sp,8
 8026e00:	f800283a 	ret

08026e04 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
 8026e04:	defff504 	addi	sp,sp,-44
 8026e08:	dfc00a15 	stw	ra,40(sp)
 8026e0c:	df000915 	stw	fp,36(sp)
 8026e10:	dc400815 	stw	r17,32(sp)
 8026e14:	dc000715 	stw	r16,28(sp)
 8026e18:	df000904 	addi	fp,sp,36
 8026e1c:	e13ffd15 	stw	r4,-12(fp)
 8026e20:	e17ffc15 	stw	r5,-16(fp)
 8026e24:	3009883a 	mov	r4,r6
 8026e28:	380b883a 	mov	r5,r7
 8026e2c:	e0c00217 	ldw	r3,8(fp)
 8026e30:	e0800317 	ldw	r2,12(fp)
 8026e34:	e13ffb05 	stb	r4,-20(fp)
 8026e38:	2809883a 	mov	r4,r5
 8026e3c:	e13ffa05 	stb	r4,-24(fp)
 8026e40:	e0fff905 	stb	r3,-28(fp)
 8026e44:	e0bff805 	stb	r2,-32(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 8026e48:	e0bff903 	ldbu	r2,-28(fp)
 8026e4c:	e0fff803 	ldbu	r3,-32(fp)
 8026e50:	180d883a 	mov	r6,r3
 8026e54:	100b883a 	mov	r5,r2
 8026e58:	e13ffc17 	ldw	r4,-16(fp)
 8026e5c:	80268900 	call	8026890 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
 8026e60:	10000226 	beq	r2,zero,8026e6c <alt_msgdma_start_prefetcher_with_std_desc_list+0x68>
    {
        return -EINVAL;
 8026e64:	00bffa84 	movi	r2,-22
 8026e68:	00000b06 	br	8026e98 <alt_msgdma_start_prefetcher_with_std_desc_list+0x94>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
 8026e6c:	e0bffc17 	ldw	r2,-16(fp)
 8026e70:	1021883a 	mov	r16,r2
 8026e74:	0023883a 	mov	r17,zero
 8026e78:	e0fffb03 	ldbu	r3,-20(fp)
 8026e7c:	e0bffa03 	ldbu	r2,-24(fp)
 8026e80:	d8800015 	stw	r2,0(sp)
 8026e84:	180f883a 	mov	r7,r3
 8026e88:	800b883a 	mov	r5,r16
 8026e8c:	880d883a 	mov	r6,r17
 8026e90:	e13ffd17 	ldw	r4,-12(fp)
 8026e94:	8026aec0 	call	8026aec <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 8026e98:	e6fffe04 	addi	sp,fp,-8
 8026e9c:	dfc00317 	ldw	ra,12(sp)
 8026ea0:	df000217 	ldw	fp,8(sp)
 8026ea4:	dc400117 	ldw	r17,4(sp)
 8026ea8:	dc000017 	ldw	r16,0(sp)
 8026eac:	dec00404 	addi	sp,sp,16
 8026eb0:	f800283a 	ret

08026eb4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
 8026eb4:	defff504 	addi	sp,sp,-44
 8026eb8:	dfc00a15 	stw	ra,40(sp)
 8026ebc:	df000915 	stw	fp,36(sp)
 8026ec0:	dc400815 	stw	r17,32(sp)
 8026ec4:	dc000715 	stw	r16,28(sp)
 8026ec8:	df000904 	addi	fp,sp,36
 8026ecc:	e13ffd15 	stw	r4,-12(fp)
 8026ed0:	e17ffc15 	stw	r5,-16(fp)
 8026ed4:	3009883a 	mov	r4,r6
 8026ed8:	380b883a 	mov	r5,r7
 8026edc:	e0c00217 	ldw	r3,8(fp)
 8026ee0:	e0800317 	ldw	r2,12(fp)
 8026ee4:	e13ffb05 	stb	r4,-20(fp)
 8026ee8:	2809883a 	mov	r4,r5
 8026eec:	e13ffa05 	stb	r4,-24(fp)
 8026ef0:	e0fff905 	stb	r3,-28(fp)
 8026ef4:	e0bff805 	stb	r2,-32(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 8026ef8:	e0bff903 	ldbu	r2,-28(fp)
 8026efc:	e0fff803 	ldbu	r3,-32(fp)
 8026f00:	180d883a 	mov	r6,r3
 8026f04:	100b883a 	mov	r5,r2
 8026f08:	e13ffc17 	ldw	r4,-16(fp)
 8026f0c:	80269a00 	call	80269a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
 8026f10:	10000226 	beq	r2,zero,8026f1c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x68>
    {
        return -EINVAL;
 8026f14:	00bffa84 	movi	r2,-22
 8026f18:	00000b06 	br	8026f48 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x94>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
 8026f1c:	e0bffc17 	ldw	r2,-16(fp)
 8026f20:	1021883a 	mov	r16,r2
 8026f24:	0023883a 	mov	r17,zero
 8026f28:	e0fffb03 	ldbu	r3,-20(fp)
 8026f2c:	e0bffa03 	ldbu	r2,-24(fp)
 8026f30:	d8800015 	stw	r2,0(sp)
 8026f34:	180f883a 	mov	r7,r3
 8026f38:	800b883a 	mov	r5,r16
 8026f3c:	880d883a 	mov	r6,r17
 8026f40:	e13ffd17 	ldw	r4,-12(fp)
 8026f44:	8026aec0 	call	8026aec <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 8026f48:	e6fffe04 	addi	sp,fp,-8
 8026f4c:	dfc00317 	ldw	ra,12(sp)
 8026f50:	df000217 	ldw	fp,8(sp)
 8026f54:	dc400117 	ldw	r17,4(sp)
 8026f58:	dc000017 	ldw	r16,0(sp)
 8026f5c:	dec00404 	addi	sp,sp,16
 8026f60:	f800283a 	ret

08026f64 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
 8026f64:	defffc04 	addi	sp,sp,-16
 8026f68:	dfc00315 	stw	ra,12(sp)
 8026f6c:	df000215 	stw	fp,8(sp)
 8026f70:	df000204 	addi	fp,sp,8
 8026f74:	e13ffe15 	stw	r4,-8(fp)
    alt_msgdma_dev* dev = NULL;
 8026f78:	e03fff15 	stw	zero,-4(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
 8026f7c:	d1602804 	addi	r5,gp,-32608
 8026f80:	e13ffe17 	ldw	r4,-8(fp)
 8026f84:	803eb240 	call	803eb24 <alt_find_dev>
 8026f88:	e0bfff15 	stw	r2,-4(fp)

    if (NULL == dev)
 8026f8c:	e0bfff17 	ldw	r2,-4(fp)
 8026f90:	1000041e 	bne	r2,zero,8026fa4 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
 8026f94:	80251500 	call	8025150 <alt_get_errno>
 8026f98:	1007883a 	mov	r3,r2
 8026f9c:	008004c4 	movi	r2,19
 8026fa0:	18800015 	stw	r2,0(r3)
    }

    return dev;
 8026fa4:	e0bfff17 	ldw	r2,-4(fp)
}
 8026fa8:	e037883a 	mov	sp,fp
 8026fac:	dfc00117 	ldw	ra,4(sp)
 8026fb0:	df000017 	ldw	fp,0(sp)
 8026fb4:	dec00204 	addi	sp,sp,8
 8026fb8:	f800283a 	ret

08026fbc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 8026fbc:	defff604 	addi	sp,sp,-40
 8026fc0:	dfc00915 	stw	ra,36(sp)
 8026fc4:	df000815 	stw	fp,32(sp)
 8026fc8:	df000804 	addi	fp,sp,32
 8026fcc:	e13ffb15 	stw	r4,-20(fp)
 8026fd0:	e17ffa15 	stw	r5,-24(fp)
 8026fd4:	e1bff915 	stw	r6,-28(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
 8026fd8:	e0bffb17 	ldw	r2,-20(fp)
 8026fdc:	10801783 	ldbu	r2,94(r2)
 8026fe0:	10803fcc 	andi	r2,r2,255
 8026fe4:	10000a26 	beq	r2,zero,8027010 <alt_msgdma_init+0x54>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
 8026fe8:	e0bffb17 	ldw	r2,-20(fp)
 8026fec:	10800617 	ldw	r2,24(r2)
 8026ff0:	00c00104 	movi	r3,4
 8026ff4:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
 8026ff8:	0001883a 	nop
 8026ffc:	e0bffb17 	ldw	r2,-20(fp)
 8027000:	10800617 	ldw	r2,24(r2)
 8027004:	10800037 	ldwio	r2,0(r2)
 8027008:	1080010c 	andi	r2,r2,4
 802700c:	103ffb1e 	bne	r2,zero,8026ffc <alt_msgdma_init+0x40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
 8027010:	e0bffb17 	ldw	r2,-20(fp)
 8027014:	10800317 	ldw	r2,12(r2)
 8027018:	10800104 	addi	r2,r2,4
 802701c:	00c00084 	movi	r3,2
 8027020:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 8027024:	0001883a 	nop
 8027028:	e0bffb17 	ldw	r2,-20(fp)
 802702c:	10800317 	ldw	r2,12(r2)
 8027030:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
 8027034:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 8027038:	103ffb1e 	bne	r2,zero,8027028 <alt_msgdma_init+0x6c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 802703c:	e0bffb17 	ldw	r2,-20(fp)
 8027040:	10800317 	ldw	r2,12(r2)
 8027044:	10800104 	addi	r2,r2,4
 8027048:	10800037 	ldwio	r2,0(r2)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 802704c:	1007883a 	mov	r3,r2
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 8027050:	00bffbc4 	movi	r2,-17
 8027054:	1884703a 	and	r2,r3,r2
 8027058:	e0bfff15 	stw	r2,-4(fp)
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 802705c:	e0bfff17 	ldw	r2,-4(fp)
 8027060:	10800814 	ori	r2,r2,32
 8027064:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 8027068:	e0bffb17 	ldw	r2,-20(fp)
 802706c:	10800317 	ldw	r2,12(r2)
 8027070:	10800104 	addi	r2,r2,4
 8027074:	e0ffff17 	ldw	r3,-4(fp)
 8027078:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
 802707c:	e0bffb17 	ldw	r2,-20(fp)
 8027080:	10800317 	ldw	r2,12(r2)
 8027084:	e0fffb17 	ldw	r3,-20(fp)
 8027088:	18c00317 	ldw	r3,12(r3)
 802708c:	18c00037 	ldwio	r3,0(r3)
 8027090:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
 8027094:	e0bffb17 	ldw	r2,-20(fp)
 8027098:	10801783 	ldbu	r2,94(r2)
 802709c:	10803fcc 	andi	r2,r2,255
 80270a0:	10000826 	beq	r2,zero,80270c4 <alt_msgdma_init+0x108>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
 80270a4:	e0bffb17 	ldw	r2,-20(fp)
 80270a8:	10800617 	ldw	r2,24(r2)
 80270ac:	10800404 	addi	r2,r2,16
 80270b0:	e0fffb17 	ldw	r3,-20(fp)
 80270b4:	18c00617 	ldw	r3,24(r3)
 80270b8:	18c00404 	addi	r3,r3,16
 80270bc:	18c00037 	ldwio	r3,0(r3)
 80270c0:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
 80270c4:	d1602804 	addi	r5,gp,-32608
 80270c8:	e13ffb17 	ldw	r4,-20(fp)
 80270cc:	803e9b40 	call	803e9b4 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 80270d0:	e0bffb17 	ldw	r2,-20(fp)
 80270d4:	10801804 	addi	r2,r2,96
 80270d8:	e0bffd15 	stw	r2,-12(fp)
 80270dc:	00800044 	movi	r2,1
 80270e0:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
 80270e4:	e0bffc8b 	ldhu	r2,-14(fp)
 80270e8:	1009883a 	mov	r4,r2
 80270ec:	801a3440 	call	801a344 <OSSemCreate>
 80270f0:	1007883a 	mov	r3,r2
 80270f4:	e0bffd17 	ldw	r2,-12(fp)
 80270f8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 80270fc:	e0bffd17 	ldw	r2,-12(fp)
 8027100:	10800017 	ldw	r2,0(r2)
 8027104:	10000226 	beq	r2,zero,8027110 <alt_msgdma_init+0x154>
 8027108:	0005883a 	mov	r2,zero
 802710c:	00000106 	br	8027114 <alt_msgdma_init+0x158>
 8027110:	00bfffc4 	movi	r2,-1
 8027114:	e0bffe15 	stw	r2,-8(fp)
            
    if (!error)
 8027118:	e0bffe17 	ldw	r2,-8(fp)
 802711c:	1000081e 	bne	r2,zero,8027140 <alt_msgdma_init+0x184>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
 8027120:	d8000015 	stw	zero,0(sp)
 8027124:	e1fffb17 	ldw	r7,-20(fp)
 8027128:	018200b4 	movhi	r6,2050
 802712c:	3194d304 	addi	r6,r6,21324
 8027130:	e17ff917 	ldw	r5,-28(fp)
 8027134:	e13ffa17 	ldw	r4,-24(fp)
 8027138:	803ec700 	call	803ec70 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
 802713c:	00000406 	br	8027150 <alt_msgdma_init+0x194>
        alt_printf("failed to create semaphores\n");
 8027140:	01020174 	movhi	r4,2053
 8027144:	210a5c04 	addi	r4,r4,10608
 8027148:	803f27c0 	call	803f27c <alt_printf>
    return;
 802714c:	0001883a 	nop

}
 8027150:	e037883a 	mov	sp,fp
 8027154:	dfc00117 	ldw	ra,4(sp)
 8027158:	df000017 	ldw	fp,0(sp)
 802715c:	dec00204 	addi	sp,sp,8
 8027160:	f800283a 	ret

08027164 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
 8027164:	defffb04 	addi	sp,sp,-20
 8027168:	df000415 	stw	fp,16(sp)
 802716c:	df000404 	addi	fp,sp,16
 8027170:	e13fff15 	stw	r4,-4(fp)
 8027174:	e17ffe15 	stw	r5,-8(fp)
 8027178:	e1bffd15 	stw	r6,-12(fp)
 802717c:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 8027180:	e0bfff17 	ldw	r2,-4(fp)
 8027184:	e0fffe17 	ldw	r3,-8(fp)
 8027188:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
 802718c:	e0bfff17 	ldw	r2,-4(fp)
 8027190:	e0fffc17 	ldw	r3,-16(fp)
 8027194:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
 8027198:	e0bfff17 	ldw	r2,-4(fp)
 802719c:	e0fffd17 	ldw	r3,-12(fp)
 80271a0:	10c00d15 	stw	r3,52(r2)

    return ;
 80271a4:	0001883a 	nop
}
 80271a8:	e037883a 	mov	sp,fp
 80271ac:	df000017 	ldw	fp,0(sp)
 80271b0:	dec00104 	addi	sp,sp,4
 80271b4:	f800283a 	ret

080271b8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 80271b8:	defffc04 	addi	sp,sp,-16
 80271bc:	dfc00315 	stw	ra,12(sp)
 80271c0:	df000215 	stw	fp,8(sp)
 80271c4:	df000204 	addi	fp,sp,8
 80271c8:	e13fff15 	stw	r4,-4(fp)
 80271cc:	e17ffe15 	stw	r5,-8(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
 80271d0:	000d883a 	mov	r6,zero
 80271d4:	e17ffe17 	ldw	r5,-8(fp)
 80271d8:	e13fff17 	ldw	r4,-4(fp)
 80271dc:	80256b40 	call	80256b4 <alt_msgdma_descriptor_async_transfer>

}
 80271e0:	e037883a 	mov	sp,fp
 80271e4:	dfc00117 	ldw	ra,4(sp)
 80271e8:	df000017 	ldw	fp,0(sp)
 80271ec:	dec00204 	addi	sp,sp,8
 80271f0:	f800283a 	ret

080271f4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 80271f4:	defffc04 	addi	sp,sp,-16
 80271f8:	dfc00315 	stw	ra,12(sp)
 80271fc:	df000215 	stw	fp,8(sp)
 8027200:	df000204 	addi	fp,sp,8
 8027204:	e13fff15 	stw	r4,-4(fp)
 8027208:	e17ffe15 	stw	r5,-8(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
 802720c:	e1bffe17 	ldw	r6,-8(fp)
 8027210:	000b883a 	mov	r5,zero
 8027214:	e13fff17 	ldw	r4,-4(fp)
 8027218:	80256b40 	call	80256b4 <alt_msgdma_descriptor_async_transfer>
}
 802721c:	e037883a 	mov	sp,fp
 8027220:	dfc00117 	ldw	ra,4(sp)
 8027224:	df000017 	ldw	fp,0(sp)
 8027228:	dec00204 	addi	sp,sp,8
 802722c:	f800283a 	ret

08027230 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 8027230:	defffc04 	addi	sp,sp,-16
 8027234:	dfc00315 	stw	ra,12(sp)
 8027238:	df000215 	stw	fp,8(sp)
 802723c:	df000204 	addi	fp,sp,8
 8027240:	e13fff15 	stw	r4,-4(fp)
 8027244:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
 8027248:	000d883a 	mov	r6,zero
 802724c:	e17ffe17 	ldw	r5,-8(fp)
 8027250:	e13fff17 	ldw	r4,-4(fp)
 8027254:	80259f80 	call	80259f8 <alt_msgdma_descriptor_sync_transfer>
}
 8027258:	e037883a 	mov	sp,fp
 802725c:	dfc00117 	ldw	ra,4(sp)
 8027260:	df000017 	ldw	fp,0(sp)
 8027264:	dec00204 	addi	sp,sp,8
 8027268:	f800283a 	ret

0802726c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 802726c:	defffc04 	addi	sp,sp,-16
 8027270:	dfc00315 	stw	ra,12(sp)
 8027274:	df000215 	stw	fp,8(sp)
 8027278:	df000204 	addi	fp,sp,8
 802727c:	e13fff15 	stw	r4,-4(fp)
 8027280:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
 8027284:	e1bffe17 	ldw	r6,-8(fp)
 8027288:	000b883a 	mov	r5,zero
 802728c:	e13fff17 	ldw	r4,-4(fp)
 8027290:	80259f80 	call	80259f8 <alt_msgdma_descriptor_sync_transfer>
}
 8027294:	e037883a 	mov	sp,fp
 8027298:	dfc00117 	ldw	ra,4(sp)
 802729c:	df000017 	ldw	fp,0(sp)
 80272a0:	dec00204 	addi	sp,sp,8
 80272a4:	f800283a 	ret

080272a8 <altera_eth_tse_init>:
 * @Return ENP_HARDWARE on error, otherwise return SUCCESS
 */

error_t altera_eth_tse_init(
    alt_iniche_dev              *p_dev)
{
 80272a8:	defffa04 	addi	sp,sp,-24
 80272ac:	dfc00515 	stw	ra,20(sp)
 80272b0:	df000415 	stw	fp,16(sp)
 80272b4:	df000404 	addi	fp,sp,16
 80272b8:	e13ffc15 	stw	r4,-16(fp)
    int i;
    
    alt_tse_iniche_dev_driver_data *p_driver_data = 0;
 80272bc:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys_info = 0;
 80272c0:	e03ffd15 	stw	zero,-12(fp)

    dprintf("altera_eth_tse_init %d\n", p_dev->if_num);
 80272c4:	e0bffc17 	ldw	r2,-16(fp)
 80272c8:	10800517 	ldw	r2,20(r2)
 80272cc:	100b883a 	mov	r5,r2
 80272d0:	01020174 	movhi	r4,2053
 80272d4:	210a6404 	addi	r4,r4,10640
 80272d8:	8003b840 	call	8003b84 <printf>
       
    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 80272dc:	e03fff15 	stw	zero,-4(fp)
 80272e0:	00001006 	br	8027324 <altera_eth_tse_init+0x7c>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
 80272e4:	e0bfff17 	ldw	r2,-4(fp)
 80272e8:	10c00324 	muli	r3,r2,12
 80272ec:	008201b4 	movhi	r2,2054
 80272f0:	1885883a 	add	r2,r3,r2
 80272f4:	10bc5917 	ldw	r2,-3740(r2)
 80272f8:	e0fffc17 	ldw	r3,-16(fp)
 80272fc:	1880061e 	bne	r3,r2,8027318 <altera_eth_tse_init+0x70>
            p_driver_data = &tse_iniche_dev_driver_data[i];
 8027300:	e0bfff17 	ldw	r2,-4(fp)
 8027304:	10c00324 	muli	r3,r2,12
 8027308:	008201b4 	movhi	r2,2054
 802730c:	10bc5904 	addi	r2,r2,-3740
 8027310:	1885883a 	add	r2,r3,r2
 8027314:	e0bffe15 	stw	r2,-8(fp)
    for(i = 0; i < number_of_tse_mac; i++) {
 8027318:	e0bfff17 	ldw	r2,-4(fp)
 802731c:	10800044 	addi	r2,r2,1
 8027320:	e0bfff15 	stw	r2,-4(fp)
 8027324:	d0a07b03 	ldbu	r2,-32276(gp)
 8027328:	10803fcc 	andi	r2,r2,255
 802732c:	e0ffff17 	ldw	r3,-4(fp)
 8027330:	18bfec16 	blt	r3,r2,80272e4 <altera_eth_tse_init+0x3c>
        }
    }
    /* If pointer could not found */
    if(p_driver_data == 0) {
 8027334:	e0bffe17 	ldw	r2,-8(fp)
 8027338:	1000021e 	bne	r2,zero,8027344 <altera_eth_tse_init+0x9c>
        return ENP_HARDWARE;
 802733c:	00bff744 	movi	r2,-35
 8027340:	00002606 	br	80273dc <altera_eth_tse_init+0x134>
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 8027344:	e03fff15 	stw	zero,-4(fp)
 8027348:	00001106 	br	8027390 <altera_eth_tse_init+0xe8>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 802734c:	e0bfff17 	ldw	r2,-4(fp)
 8027350:	10c01324 	muli	r3,r2,76
 8027354:	00820174 	movhi	r2,2053
 8027358:	1885883a 	add	r2,r3,r2
 802735c:	10d35617 	ldw	r3,19800(r2)
 8027360:	e0bffe17 	ldw	r2,-8(fp)
 8027364:	10800117 	ldw	r2,4(r2)
 8027368:	1880061e 	bne	r3,r2,8027384 <altera_eth_tse_init+0xdc>
            psys_info = &tse_mac_device[i];
 802736c:	e0bfff17 	ldw	r2,-4(fp)
 8027370:	10c01324 	muli	r3,r2,76
 8027374:	00820174 	movhi	r2,2053
 8027378:	10935604 	addi	r2,r2,19800
 802737c:	1885883a 	add	r2,r3,r2
 8027380:	e0bffd15 	stw	r2,-12(fp)
    for(i = 0; i < max_mac_system; i++) {
 8027384:	e0bfff17 	ldw	r2,-4(fp)
 8027388:	10800044 	addi	r2,r2,1
 802738c:	e0bfff15 	stw	r2,-4(fp)
 8027390:	d0a02703 	ldbu	r2,-32612(gp)
 8027394:	10803fcc 	andi	r2,r2,255
 8027398:	e0ffff17 	ldw	r3,-4(fp)
 802739c:	18bfeb16 	blt	r3,r2,802734c <altera_eth_tse_init+0xa4>
        }
    }
    /* If pointer could not found */
    if(psys_info == 0) {
 80273a0:	e0bffd17 	ldw	r2,-12(fp)
 80273a4:	1000021e 	bne	r2,zero,80273b0 <altera_eth_tse_init+0x108>
        return ENP_HARDWARE;
 80273a8:	00bff744 	movi	r2,-35
 80273ac:	00000b06 	br	80273dc <altera_eth_tse_init+0x134>
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
 80273b0:	e0bffc17 	ldw	r2,-16(fp)
 80273b4:	11000517 	ldw	r4,20(r2)
 80273b8:	e0bffe17 	ldw	r2,-8(fp)
 80273bc:	10800203 	ldbu	r2,8(r2)
 80273c0:	10803fcc 	andi	r2,r2,255
 80273c4:	10801324 	muli	r2,r2,76
 80273c8:	e0fffd17 	ldw	r3,-12(fp)
 80273cc:	1885883a 	add	r2,r3,r2
 80273d0:	100b883a 	mov	r5,r2
 80273d4:	80273f00 	call	80273f0 <prep_tse_mac>
    
    return SUCCESS;
 80273d8:	0005883a 	mov	r2,zero
}
 80273dc:	e037883a 	mov	sp,fp
 80273e0:	dfc00117 	ldw	ra,4(sp)
 80273e4:	df000017 	ldw	fp,0(sp)
 80273e8:	dec00204 	addi	sp,sp,8
 80273ec:	f800283a 	ret

080273f0 <prep_tse_mac>:
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 80273f0:	defffb04 	addi	sp,sp,-20
 80273f4:	dfc00415 	stw	ra,16(sp)
 80273f8:	df000315 	stw	fp,12(sp)
 80273fc:	df000304 	addi	fp,sp,12
 8027400:	e13ffe15 	stw	r4,-8(fp)
 8027404:	e17ffd15 	stw	r5,-12(fp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 8027408:	e17ffe17 	ldw	r5,-8(fp)
 802740c:	01020174 	movhi	r4,2053
 8027410:	210a6a04 	addi	r4,r4,10664
 8027414:	8003b840 	call	8003b84 <printf>
    {
        tse[index].sem = 0; /*Tx IDLE*/
 8027418:	e0bffe17 	ldw	r2,-8(fp)
 802741c:	10c02924 	muli	r3,r2,164
 8027420:	008201b4 	movhi	r2,2054
 8027424:	1885883a 	add	r2,r3,r2
 8027428:	103c7015 	stw	zero,-3648(r2)
        tse[index].tse = (void *)psys_info;
 802742c:	e0bffe17 	ldw	r2,-8(fp)
 8027430:	11002924 	muli	r4,r2,164
 8027434:	e0fffd17 	ldw	r3,-12(fp)
 8027438:	008201b4 	movhi	r2,2054
 802743c:	2085883a 	add	r2,r4,r2
 8027440:	10fc8d15 	stw	r3,-3532(r2)

        ifp = nets[index];
 8027444:	e0bffe17 	ldw	r2,-8(fp)
 8027448:	100690ba 	slli	r3,r2,2
 802744c:	008201b4 	movhi	r2,2054
 8027450:	1885883a 	add	r2,r3,r2
 8027454:	10bdce17 	ldw	r2,-2248(r2)
 8027458:	e0bfff15 	stw	r2,-4(fp)
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 802745c:	e0bfff17 	ldw	r2,-4(fp)
 8027460:	10802717 	ldw	r2,156(r2)
 8027464:	00c00084 	movi	r3,2
 8027468:	10c00615 	stw	r3,24(r2)
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
 802746c:	e0bfff17 	ldw	r2,-4(fp)
 8027470:	10802717 	ldw	r2,156(r2)
 8027474:	00c00084 	movi	r3,2
 8027478:	10c00715 	stw	r3,28(r2)
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 802747c:	e0bfff17 	ldw	r2,-4(fp)
 8027480:	10802717 	ldw	r2,156(r2)
 8027484:	d0e0a317 	ldw	r3,-32116(gp)
 8027488:	10c00815 	stw	r3,32(r2)
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
 802748c:	e0bfff17 	ldw	r2,-4(fp)
 8027490:	10c02717 	ldw	r3,156(r2)
 8027494:	e0bffe17 	ldw	r2,-8(fp)
 8027498:	10802924 	muli	r2,r2,164
 802749c:	11000604 	addi	r4,r2,24
 80274a0:	008201b4 	movhi	r2,2054
 80274a4:	10bc6504 	addi	r2,r2,-3692
 80274a8:	2085883a 	add	r2,r4,r2
 80274ac:	18800515 	stw	r2,20(r3)
        ifp->n_mib->ifDescr =       "Altera TSE MAC ethernet";
 80274b0:	e0bfff17 	ldw	r2,-4(fp)
 80274b4:	10c02717 	ldw	r3,156(r2)
 80274b8:	00820174 	movhi	r2,2053
 80274bc:	108a6f04 	addi	r2,r2,10684
 80274c0:	18800115 	stw	r2,4(r3)
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
 80274c4:	e0bfff17 	ldw	r2,-4(fp)
 80274c8:	00c00404 	movi	r3,16
 80274cc:	10c00815 	stw	r3,32(r2)
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
 80274d0:	e0bfff17 	ldw	r2,-4(fp)
 80274d4:	00c00184 	movi	r3,6
 80274d8:	10c01115 	stw	r3,68(r2)
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
 80274dc:	e0bfff17 	ldw	r2,-4(fp)
 80274e0:	10802717 	ldw	r2,156(r2)
 80274e4:	00c00184 	movi	r3,6
 80274e8:	10c00215 	stw	r3,8(r2)
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
 80274ec:	e0bfff17 	ldw	r2,-4(fp)
 80274f0:	00c17a84 	movi	r3,1514
 80274f4:	10c00915 	stw	r3,36(r2)
    
        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
 80274f8:	e0ffff17 	ldw	r3,-4(fp)
 80274fc:	008200b4 	movhi	r2,2050
 8027500:	109da604 	addi	r2,r2,30360
 8027504:	18800215 	stw	r2,8(r3)
        ifp->pkt_send =     NULL;
 8027508:	e0bfff17 	ldw	r2,-4(fp)
 802750c:	10000415 	stw	zero,16(r2)
        ifp->raw_send =     tse_mac_raw_send;
 8027510:	e0ffff17 	ldw	r3,-4(fp)
 8027514:	008200f4 	movhi	r2,2051
 8027518:	10a08704 	addi	r2,r2,-32228
 802751c:	18800315 	stw	r2,12(r3)
        ifp->n_close =      tse_mac_close;
 8027520:	e0ffff17 	ldw	r3,-4(fp)
 8027524:	008200f4 	movhi	r2,2051
 8027528:	10a2d904 	addi	r2,r2,-29852
 802752c:	18800515 	stw	r2,20(r3)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
 8027530:	e0ffff17 	ldw	r3,-4(fp)
 8027534:	008200f4 	movhi	r2,2051
 8027538:	10a2c904 	addi	r2,r2,-29916
 802753c:	18800715 	stw	r2,28(r3)
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 8027540:	e0bfff17 	ldw	r2,-4(fp)
 8027544:	10802a17 	ldw	r2,168(r2)
 8027548:	10c00214 	ori	r3,r2,8
 802754c:	e0bfff17 	ldw	r2,-4(fp)
 8027550:	10c02a15 	stw	r3,168(r2)
    #endif
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
 8027554:	e0bffe17 	ldw	r2,-8(fp)
 8027558:	100690ba 	slli	r3,r2,2
 802755c:	008201b4 	movhi	r2,2054
 8027560:	1885883a 	add	r2,r3,r2
 8027564:	10bdce17 	ldw	r2,-2248(r2)
 8027568:	10c02717 	ldw	r3,156(r2)
 802756c:	e0bffe17 	ldw	r2,-8(fp)
 8027570:	10802924 	muli	r2,r2,164
 8027574:	11000604 	addi	r4,r2,24
 8027578:	008201b4 	movhi	r2,2054
 802757c:	10bc6504 	addi	r2,r2,-3692
 8027580:	2085883a 	add	r2,r4,r2
 8027584:	18800515 	stw	r2,20(r3)
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
 8027588:	e0bffe17 	ldw	r2,-8(fp)
 802758c:	10802924 	muli	r2,r2,164
 8027590:	10c00604 	addi	r3,r2,24
 8027594:	008201b4 	movhi	r2,2054
 8027598:	10bc6504 	addi	r2,r2,-3692
 802759c:	1885883a 	add	r2,r3,r2
 80275a0:	100b883a 	mov	r5,r2
 80275a4:	e13fff17 	ldw	r4,-4(fp)
 80275a8:	8002f080 	call	8002f08 <get_mac_addr>
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
 80275ac:	e0bffe17 	ldw	r2,-8(fp)
 80275b0:	11002924 	muli	r4,r2,164
 80275b4:	e0fffe17 	ldw	r3,-8(fp)
 80275b8:	008201b4 	movhi	r2,2054
 80275bc:	2085883a 	add	r2,r4,r2
 80275c0:	10fc6515 	stw	r3,-3692(r2)
        tse[index].netp = ifp;
 80275c4:	e0bffe17 	ldw	r2,-8(fp)
 80275c8:	11002924 	muli	r4,r2,164
 80275cc:	e0ffff17 	ldw	r3,-4(fp)
 80275d0:	008201b4 	movhi	r2,2054
 80275d4:	2085883a 	add	r2,r4,r2
 80275d8:	10fc6d15 	stw	r3,-3660(r2)
        ifp->n_local = (void*)(&tse[index]);
 80275dc:	e0bffe17 	ldw	r2,-8(fp)
 80275e0:	10c02924 	muli	r3,r2,164
 80275e4:	008201b4 	movhi	r2,2054
 80275e8:	10bc6504 	addi	r2,r2,-3692
 80275ec:	1887883a 	add	r3,r3,r2
 80275f0:	e0bfff17 	ldw	r2,-4(fp)
 80275f4:	10c02815 	stw	r3,160(r2)
    
        index++;
 80275f8:	e0bffe17 	ldw	r2,-8(fp)
 80275fc:	10800044 	addi	r2,r2,1
 8027600:	e0bffe15 	stw	r2,-8(fp)
   }
 
   return index;
 8027604:	e0bffe17 	ldw	r2,-8(fp)
}
 8027608:	e037883a 	mov	sp,fp
 802760c:	dfc00117 	ldw	ra,4(sp)
 8027610:	df000017 	ldw	fp,0(sp)
 8027614:	dec00204 	addi	sp,sp,8
 8027618:	f800283a 	ret

0802761c <msgdma_reset>:

//temporary code for msgdma hw workaround
void msgdma_reset(alt_msgdma_dev * dev)
{
 802761c:	defffe04 	addi	sp,sp,-8
 8027620:	df000115 	stw	fp,4(sp)
 8027624:	df000104 	addi	fp,sp,4
 8027628:	e13fff15 	stw	r4,-4(fp)

   /* start prefetcher reset sequence */
   IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
 802762c:	e0bfff17 	ldw	r2,-4(fp)
 8027630:	10800617 	ldw	r2,24(r2)
 8027634:	00c00104 	movi	r3,4
 8027638:	10c00035 	stwio	r3,0(r2)
   ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
   /* wait until hw clears the bit */
   while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
 802763c:	0001883a 	nop
 8027640:	e0bfff17 	ldw	r2,-4(fp)
 8027644:	10800617 	ldw	r2,24(r2)
 8027648:	10800037 	ldwio	r2,0(r2)
 802764c:	1080010c 	andi	r2,r2,4
 8027650:	103ffb1e 	bne	r2,zero,8027640 <msgdma_reset+0x24>
    */

    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
 8027654:	e0bfff17 	ldw	r2,-4(fp)
 8027658:	10800317 	ldw	r2,12(r2)
 802765c:	10800104 	addi	r2,r2,4
 8027660:	00c00084 	movi	r3,2
 8027664:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 8027668:	0001883a 	nop
 802766c:	e0bfff17 	ldw	r2,-4(fp)
 8027670:	10800317 	ldw	r2,12(r2)
 8027674:	10800037 	ldwio	r2,0(r2)
                   & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
 8027678:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 802767c:	103ffb1e 	bne	r2,zero,802766c <msgdma_reset+0x50>

}  
 8027680:	0001883a 	nop
 8027684:	0001883a 	nop
 8027688:	e037883a 	mov	sp,fp
 802768c:	df000017 	ldw	fp,0(sp)
 8027690:	dec00104 	addi	sp,sp,4
 8027694:	f800283a 	ret

08027698 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 8027698:	defff104 	addi	sp,sp,-60
 802769c:	dfc00e15 	stw	ra,56(sp)
 80276a0:	df000d15 	stw	fp,52(sp)
 80276a4:	df000d04 	addi	fp,sp,52
 80276a8:	e13ff415 	stw	r4,-48(fp)
   int dat;
   int speed, duplex, result, x;
   int status = SUCCESS;
 80276ac:	e03ffd15 	stw	zero,-12(fp)
   
   alt_msgdma_dev *msgdma_tx_dev;
   alt_msgdma_dev *msgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 80276b0:	e0bff417 	ldw	r2,-48(fp)
 80276b4:	10c02924 	muli	r3,r2,164
 80276b8:	008201b4 	movhi	r2,2054
 80276bc:	1885883a 	add	r2,r3,r2
 80276c0:	10bc8d17 	ldw	r2,-3532(r2)
 80276c4:	e0bffa15 	stw	r2,-24(fp)
   
   dprintf("tse_mac_init %d\n", iface);
 80276c8:	e17ff417 	ldw	r5,-48(fp)
 80276cc:	01020174 	movhi	r4,2053
 80276d0:	210a7504 	addi	r4,r4,10708
 80276d4:	8003b840 	call	8003b84 <printf>

    if (tse_hw->ext_desc_mem == 1) {
 80276d8:	e0bffa17 	ldw	r2,-24(fp)
 80276dc:	10800883 	ldbu	r2,34(r2)
 80276e0:	10803fcc 	andi	r2,r2,255
 80276e4:	10800058 	cmpnei	r2,r2,1
 80276e8:	10001b1e 	bne	r2,zero,8027758 <tse_mac_init+0xc0>
        tse[iface].rxdesc[0] = (alt_msgdma_prefetcher_standard_descriptor *) tse_hw->desc_mem_base;
 80276ec:	e0bffa17 	ldw	r2,-24(fp)
 80276f0:	10800917 	ldw	r2,36(r2)
 80276f4:	1009883a 	mov	r4,r2
 80276f8:	e0bff417 	ldw	r2,-48(fp)
 80276fc:	10c02924 	muli	r3,r2,164
 8027700:	008201b4 	movhi	r2,2054
 8027704:	1885883a 	add	r2,r3,r2
 8027708:	113c7615 	stw	r4,-3624(r2)
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *) 
               (tse_hw->desc_mem_base + ((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor))));          
 802770c:	e0bffa17 	ldw	r2,-24(fp)
 8027710:	10800917 	ldw	r2,36(r2)
 8027714:	10805004 	addi	r2,r2,320
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *) 
 8027718:	1009883a 	mov	r4,r2
 802771c:	e0bff417 	ldw	r2,-48(fp)
 8027720:	10c02924 	muli	r3,r2,164
 8027724:	008201b4 	movhi	r2,2054
 8027728:	1885883a 	add	r2,r3,r2
 802772c:	113c7715 	stw	r4,-3620(r2)
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *) 
               (tse_hw->desc_mem_base + ((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE+1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor))));          
 8027730:	e0bffa17 	ldw	r2,-24(fp)
 8027734:	10800917 	ldw	r2,36(r2)
 8027738:	1080a004 	addi	r2,r2,640
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *) 
 802773c:	1009883a 	mov	r4,r2
 8027740:	e0bff417 	ldw	r2,-48(fp)
 8027744:	10c02924 	muli	r3,r2,164
 8027748:	008201b4 	movhi	r2,2054
 802774c:	1885883a 	add	r2,r3,r2
 8027750:	113c7315 	stw	r4,-3636(r2)
 8027754:	00005106 	br	802789c <tse_mac_init+0x204>
    }
    else {
        tse[iface].rxdesc[0] = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 8027758:	01005004 	movi	r4,320
 802775c:	803f88c0 	call	803f88c <alt_uncached_malloc>
 8027760:	1009883a 	mov	r4,r2
 8027764:	e0bff417 	ldw	r2,-48(fp)
 8027768:	10c02924 	muli	r3,r2,164
 802776c:	008201b4 	movhi	r2,2054
 8027770:	1885883a 	add	r2,r3,r2
 8027774:	113c7615 	stw	r4,-3624(r2)
        while ((((alt_u32)tse[iface].rxdesc[0]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 8027778:	00000b06 	br	80277a8 <tse_mac_init+0x110>
        tse[iface].rxdesc[0]++;  //boundary
 802777c:	e0bff417 	ldw	r2,-48(fp)
 8027780:	10c02924 	muli	r3,r2,164
 8027784:	008201b4 	movhi	r2,2054
 8027788:	1885883a 	add	r2,r3,r2
 802778c:	10bc7617 	ldw	r2,-3624(r2)
 8027790:	10c00804 	addi	r3,r2,32
 8027794:	e0bff417 	ldw	r2,-48(fp)
 8027798:	11002924 	muli	r4,r2,164
 802779c:	008201b4 	movhi	r2,2054
 80277a0:	2085883a 	add	r2,r4,r2
 80277a4:	10fc7615 	stw	r3,-3624(r2)
        while ((((alt_u32)tse[iface].rxdesc[0]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 80277a8:	e0bff417 	ldw	r2,-48(fp)
 80277ac:	10c02924 	muli	r3,r2,164
 80277b0:	008201b4 	movhi	r2,2054
 80277b4:	1885883a 	add	r2,r3,r2
 80277b8:	10bc7617 	ldw	r2,-3624(r2)
 80277bc:	108007cc 	andi	r2,r2,31
 80277c0:	103fee1e 	bne	r2,zero,802777c <tse_mac_init+0xe4>
          
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 80277c4:	01005004 	movi	r4,320
 80277c8:	803f88c0 	call	803f88c <alt_uncached_malloc>
 80277cc:	1009883a 	mov	r4,r2
 80277d0:	e0bff417 	ldw	r2,-48(fp)
 80277d4:	10c02924 	muli	r3,r2,164
 80277d8:	008201b4 	movhi	r2,2054
 80277dc:	1885883a 	add	r2,r3,r2
 80277e0:	113c7715 	stw	r4,-3620(r2)
        while ((((alt_u32)tse[iface].rxdesc[1]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 80277e4:	00000b06 	br	8027814 <tse_mac_init+0x17c>
        tse[iface].rxdesc[1]++;  //boundary  
 80277e8:	e0bff417 	ldw	r2,-48(fp)
 80277ec:	10c02924 	muli	r3,r2,164
 80277f0:	008201b4 	movhi	r2,2054
 80277f4:	1885883a 	add	r2,r3,r2
 80277f8:	10bc7717 	ldw	r2,-3620(r2)
 80277fc:	10c00804 	addi	r3,r2,32
 8027800:	e0bff417 	ldw	r2,-48(fp)
 8027804:	11002924 	muli	r4,r2,164
 8027808:	008201b4 	movhi	r2,2054
 802780c:	2085883a 	add	r2,r4,r2
 8027810:	10fc7715 	stw	r3,-3620(r2)
        while ((((alt_u32)tse[iface].rxdesc[1]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 8027814:	e0bff417 	ldw	r2,-48(fp)
 8027818:	10c02924 	muli	r3,r2,164
 802781c:	008201b4 	movhi	r2,2054
 8027820:	1885883a 	add	r2,r3,r2
 8027824:	10bc7717 	ldw	r2,-3620(r2)
 8027828:	108007cc 	andi	r2,r2,31
 802782c:	103fee1e 	bne	r2,zero,80277e8 <tse_mac_init+0x150>
    
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 8027830:	01001804 	movi	r4,96
 8027834:	803f88c0 	call	803f88c <alt_uncached_malloc>
 8027838:	1009883a 	mov	r4,r2
 802783c:	e0bff417 	ldw	r2,-48(fp)
 8027840:	10c02924 	muli	r3,r2,164
 8027844:	008201b4 	movhi	r2,2054
 8027848:	1885883a 	add	r2,r3,r2
 802784c:	113c7315 	stw	r4,-3636(r2)
        while ((((alt_u32)tse[iface].txdesc) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0)  
 8027850:	00000b06 	br	8027880 <tse_mac_init+0x1e8>
          tse[iface].txdesc++;  //boundary
 8027854:	e0bff417 	ldw	r2,-48(fp)
 8027858:	10c02924 	muli	r3,r2,164
 802785c:	008201b4 	movhi	r2,2054
 8027860:	1885883a 	add	r2,r3,r2
 8027864:	10bc7317 	ldw	r2,-3636(r2)
 8027868:	10c00804 	addi	r3,r2,32
 802786c:	e0bff417 	ldw	r2,-48(fp)
 8027870:	11002924 	muli	r4,r2,164
 8027874:	008201b4 	movhi	r2,2054
 8027878:	2085883a 	add	r2,r4,r2
 802787c:	10fc7315 	stw	r3,-3636(r2)
        while ((((alt_u32)tse[iface].txdesc) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0)  
 8027880:	e0bff417 	ldw	r2,-48(fp)
 8027884:	10c02924 	muli	r3,r2,164
 8027888:	008201b4 	movhi	r2,2054
 802788c:	1885883a 	add	r2,r3,r2
 8027890:	10bc7317 	ldw	r2,-3636(r2)
 8027894:	108007cc 	andi	r2,r2,31
 8027898:	103fee1e 	bne	r2,zero,8027854 <tse_mac_init+0x1bc>
    }
   
    /* Get the Rx and Tx MSGDMA addresses */
    msgdma_tx_dev = alt_msgdma_open(tse_hw->tse_msgdma_tx); 
 802789c:	e0bffa17 	ldw	r2,-24(fp)
 80278a0:	10800617 	ldw	r2,24(r2)
 80278a4:	1009883a 	mov	r4,r2
 80278a8:	8026f640 	call	8026f64 <alt_msgdma_open>
 80278ac:	e0bff915 	stw	r2,-28(fp)
    
    if(!msgdma_tx_dev) {
 80278b0:	e0bff917 	ldw	r2,-28(fp)
 80278b4:	1000051e 	bne	r2,zero,80278cc <tse_mac_init+0x234>
      dprintf("[altera_eth_tse_init] Error opening TX MSGDMA\n");
 80278b8:	01020174 	movhi	r4,2053
 80278bc:	210a7a04 	addi	r4,r4,10728
 80278c0:	8003ca80 	call	8003ca8 <puts>
      return ENP_RESOURCE;
 80278c4:	00bffa84 	movi	r2,-22
 80278c8:	00020706 	br	80280e8 <tse_mac_init+0xa50>
    }
  
    msgdma_rx_dev = alt_msgdma_open(tse_hw->tse_msgdma_rx);
 80278cc:	e0bffa17 	ldw	r2,-24(fp)
 80278d0:	10800717 	ldw	r2,28(r2)
 80278d4:	1009883a 	mov	r4,r2
 80278d8:	8026f640 	call	8026f64 <alt_msgdma_open>
 80278dc:	e0bff815 	stw	r2,-32(fp)
    if(!msgdma_rx_dev) {
 80278e0:	e0bff817 	ldw	r2,-32(fp)
 80278e4:	1000051e 	bne	r2,zero,80278fc <tse_mac_init+0x264>
      dprintf("[altera_eth_tse_init] Error opening RX MSGDMA\n");
 80278e8:	01020174 	movhi	r4,2053
 80278ec:	210a8604 	addi	r4,r4,10776
 80278f0:	8003ca80 	call	8003ca8 <puts>
      return ENP_RESOURCE;
 80278f4:	00bffa84 	movi	r2,-22
 80278f8:	0001fb06 	br	80280e8 <tse_mac_init+0xa50>
    }

    /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
    tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 80278fc:	e0bff417 	ldw	r2,-48(fp)
 8027900:	10802924 	muli	r2,r2,164
 8027904:	10c00104 	addi	r3,r2,4
 8027908:	008201b4 	movhi	r2,2054
 802790c:	10bc6504 	addi	r2,r2,-3692
 8027910:	1887883a 	add	r3,r3,r2
 8027914:	e0bffa17 	ldw	r2,-24(fp)
 8027918:	10800017 	ldw	r2,0(r2)
 802791c:	e13ff917 	ldw	r4,-28(fp)
 8027920:	e17ff817 	ldw	r5,-32(fp)
 8027924:	d8000015 	stw	zero,0(sp)
 8027928:	280f883a 	mov	r7,r5
 802792c:	200d883a 	mov	r6,r4
 8027930:	100b883a 	mov	r5,r2
 8027934:	1809883a 	mov	r4,r3
 8027938:	801f73c0 	call	801f73c <tse_mac_initTransInfo2>
                                   (unsigned int)msgdma_tx_dev,            
                                   (unsigned int)msgdma_rx_dev,
                                   0);

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 802793c:	e0bff417 	ldw	r2,-48(fp)
 8027940:	10c02924 	muli	r3,r2,164
 8027944:	008201b4 	movhi	r2,2054
 8027948:	1885883a 	add	r2,r3,r2
 802794c:	10bc6617 	ldw	r2,-3688(r2)
 8027950:	1009883a 	mov	r4,r2
 8027954:	8020a400 	call	8020a40 <getPHYSpeed>
 8027958:	e0bff715 	stw	r2,-36(fp)
   speed = (result >> 1) & 0x07;
 802795c:	e0bff717 	ldw	r2,-36(fp)
 8027960:	1005d07a 	srai	r2,r2,1
 8027964:	108001cc 	andi	r2,r2,7
 8027968:	e0bff615 	stw	r2,-40(fp)
   duplex = result & 0x01;
 802796c:	e0bff717 	ldw	r2,-36(fp)
 8027970:	1080004c 	andi	r2,r2,1
 8027974:	e0bff515 	stw	r2,-44(fp)
   
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 8027978:	e0bff417 	ldw	r2,-48(fp)
 802797c:	10c02924 	muli	r3,r2,164
 8027980:	008201b4 	movhi	r2,2054
 8027984:	1885883a 	add	r2,r3,r2
 8027988:	10bc6617 	ldw	r2,-3688(r2)
 802798c:	10800204 	addi	r2,r2,8
 8027990:	00c800c4 	movi	r3,8195
 8027994:	10c00035 	stwio	r3,0(r2)
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
 8027998:	e03ffe15 	stw	zero,-8(fp)
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 802799c:	00000506 	br	80279b4 <tse_mac_init+0x31c>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
 80279a0:	e0bffe17 	ldw	r2,-8(fp)
 80279a4:	10c00044 	addi	r3,r2,1
 80279a8:	e0fffe15 	stw	r3,-8(fp)
 80279ac:	1089c450 	cmplti	r2,r2,10001
 80279b0:	10000a26 	beq	r2,zero,80279dc <tse_mac_init+0x344>
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 80279b4:	e0bff417 	ldw	r2,-48(fp)
 80279b8:	10c02924 	muli	r3,r2,164
 80279bc:	008201b4 	movhi	r2,2054
 80279c0:	1885883a 	add	r2,r3,r2
 80279c4:	10bc6617 	ldw	r2,-3688(r2)
 80279c8:	10800204 	addi	r2,r2,8
 80279cc:	10800037 	ldwio	r2,0(r2)
 80279d0:	1088000c 	andi	r2,r2,8192
 80279d4:	103ff21e 	bne	r2,zero,80279a0 <tse_mac_init+0x308>
 80279d8:	00000106 	br	80279e0 <tse_mac_init+0x348>
       break;
 80279dc:	0001883a 	nop
     }
   }
   if(x >= 10000) {
 80279e0:	e0bffe17 	ldw	r2,-8(fp)
 80279e4:	1089c410 	cmplti	r2,r2,10000
 80279e8:	1000031e 	bne	r2,zero,80279f8 <tse_mac_init+0x360>
     dprintf("TSEMAC SW reset bit never cleared!\n");
 80279ec:	01020174 	movhi	r4,2053
 80279f0:	210a9204 	addi	r4,r4,10824
 80279f4:	8003ca80 	call	8003ca8 <puts>
   }

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 80279f8:	e0bff417 	ldw	r2,-48(fp)
 80279fc:	10c02924 	muli	r3,r2,164
 8027a00:	008201b4 	movhi	r2,2054
 8027a04:	1885883a 	add	r2,r3,r2
 8027a08:	10bc6617 	ldw	r2,-3688(r2)
 8027a0c:	10800204 	addi	r2,r2,8
 8027a10:	10800037 	ldwio	r2,0(r2)
 8027a14:	e0bfff15 	stw	r2,-4(fp)
   if( (dat & 0x03) != 0 ) {
 8027a18:	e0bfff17 	ldw	r2,-4(fp)
 8027a1c:	108000cc 	andi	r2,r2,3
 8027a20:	10000526 	beq	r2,zero,8027a38 <tse_mac_init+0x3a0>
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
 8027a24:	e17fff17 	ldw	r5,-4(fp)
 8027a28:	01020174 	movhi	r4,2053
 8027a2c:	210a9b04 	addi	r4,r4,10860
 8027a30:	8003b840 	call	8003b84 <printf>
 8027a34:	00000506 	br	8027a4c <tse_mac_init+0x3b4>
   } 
   else {
     dprintf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
 8027a38:	e1bfff17 	ldw	r6,-4(fp)
 8027a3c:	e17ffe17 	ldw	r5,-8(fp)
 8027a40:	01020174 	movhi	r4,2053
 8027a44:	210aaf04 	addi	r4,r4,10940
 8027a48:	8003b840 	call	8003b84 <printf>
  
   /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
   extern alt_u8 mac_group_count;
   extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
   if(tse_hw->use_shared_fifo == 1) {
 8027a4c:	e0bffa17 	ldw	r2,-24(fp)
 8027a50:	10800a03 	ldbu	r2,40(r2)
 8027a54:	10803fcc 	andi	r2,r2,255
 8027a58:	10800058 	cmpnei	r2,r2,1
 8027a5c:	10002c1e 	bne	r2,zero,8027b10 <tse_mac_init+0x478>
     int channel_loop = 0;
 8027a60:	e03ffc15 	stw	zero,-16(fp)
     int mac_loop = 0;
 8027a64:	e03ffb15 	stw	zero,-20(fp)
         
     for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 8027a68:	e03ffc15 	stw	zero,-16(fp)
 8027a6c:	00002406 	br	8027b00 <tse_mac_init+0x468>
       for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 8027a70:	e03ffb15 	stw	zero,-20(fp)
 8027a74:	00001606 	br	8027ad0 <tse_mac_init+0x438>
         if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
 8027a78:	e0bffc17 	ldw	r2,-16(fp)
 8027a7c:	100690ba 	slli	r3,r2,2
 8027a80:	008201b4 	movhi	r2,2054
 8027a84:	1885883a 	add	r2,r3,r2
 8027a88:	10fc4d17 	ldw	r3,-3788(r2)
 8027a8c:	e0bffb17 	ldw	r2,-20(fp)
 8027a90:	10800044 	addi	r2,r2,1
 8027a94:	100490ba 	slli	r2,r2,2
 8027a98:	1885883a 	add	r2,r3,r2
 8027a9c:	10800017 	ldw	r2,0(r2)
 8027aa0:	10800217 	ldw	r2,8(r2)
 8027aa4:	e0fffa17 	ldw	r3,-24(fp)
 8027aa8:	1880061e 	bne	r3,r2,8027ac4 <tse_mac_init+0x42c>
           tse[iface].channel = mac_loop;
 8027aac:	e0bff417 	ldw	r2,-48(fp)
 8027ab0:	11002924 	muli	r4,r2,164
 8027ab4:	e0fffb17 	ldw	r3,-20(fp)
 8027ab8:	008201b4 	movhi	r2,2054
 8027abc:	2085883a 	add	r2,r4,r2
 8027ac0:	10fc7115 	stw	r3,-3644(r2)
       for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 8027ac4:	e0bffb17 	ldw	r2,-20(fp)
 8027ac8:	10800044 	addi	r2,r2,1
 8027acc:	e0bffb15 	stw	r2,-20(fp)
 8027ad0:	e0bffc17 	ldw	r2,-16(fp)
 8027ad4:	100690ba 	slli	r3,r2,2
 8027ad8:	008201b4 	movhi	r2,2054
 8027adc:	1885883a 	add	r2,r3,r2
 8027ae0:	10bc4d17 	ldw	r2,-3788(r2)
 8027ae4:	10800003 	ldbu	r2,0(r2)
 8027ae8:	10803fcc 	andi	r2,r2,255
 8027aec:	e0fffb17 	ldw	r3,-20(fp)
 8027af0:	18bfe116 	blt	r3,r2,8027a78 <tse_mac_init+0x3e0>
     for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 8027af4:	e0bffc17 	ldw	r2,-16(fp)
 8027af8:	10800044 	addi	r2,r2,1
 8027afc:	e0bffc15 	stw	r2,-16(fp)
 8027b00:	d0a07a43 	ldbu	r2,-32279(gp)
 8027b04:	10803fcc 	andi	r2,r2,255
 8027b08:	e0fffc17 	ldw	r3,-16(fp)
 8027b0c:	18bfd816 	blt	r3,r2,8027a70 <tse_mac_init+0x3d8>
       }
     }
   }
   /* End of Hack code */
  
   if(tse_hw->use_shared_fifo == 1) {
 8027b10:	e0bffa17 	ldw	r2,-24(fp)
 8027b14:	10800a03 	ldbu	r2,40(r2)
 8027b18:	10803fcc 	andi	r2,r2,255
 8027b1c:	10800058 	cmpnei	r2,r2,1
 8027b20:	10000f1e 	bne	r2,zero,8027b60 <tse_mac_init+0x4c8>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
 8027b24:	e0bffa17 	ldw	r2,-24(fp)
 8027b28:	10800e17 	ldw	r2,56(r2)
 8027b2c:	1007883a 	mov	r3,r2
 8027b30:	e0bffa17 	ldw	r2,-24(fp)
 8027b34:	10801017 	ldw	r2,64(r2)
 8027b38:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
 8027b3c:	e0bffa17 	ldw	r2,-24(fp)
 8027b40:	10800e17 	ldw	r2,56(r2)
 8027b44:	10800204 	addi	r2,r2,8
 8027b48:	1007883a 	mov	r3,r2
 8027b4c:	e0bffa17 	ldw	r2,-24(fp)
 8027b50:	10801017 	ldw	r2,64(r2)
 8027b54:	10bfdd04 	addi	r2,r2,-140
 8027b58:	18800035 	stwio	r2,0(r3)
 8027b5c:	00004c06 	br	8027c90 <tse_mac_init+0x5f8>
   }
   else {
      /* Initialize MAC registers */
      IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse[iface].mi.base, ALTERA_TSE_MAC_MAX_FRAME_LENGTH); 
 8027b60:	e0bff417 	ldw	r2,-48(fp)
 8027b64:	10c02924 	muli	r3,r2,164
 8027b68:	008201b4 	movhi	r2,2054
 8027b6c:	1885883a 	add	r2,r3,r2
 8027b70:	10bc6617 	ldw	r2,-3688(r2)
 8027b74:	10800504 	addi	r2,r2,20
 8027b78:	00c17b84 	movi	r3,1518
 8027b7c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 8027b80:	e0bff417 	ldw	r2,-48(fp)
 8027b84:	10c02924 	muli	r3,r2,164
 8027b88:	008201b4 	movhi	r2,2054
 8027b8c:	1885883a 	add	r2,r3,r2
 8027b90:	10bc6617 	ldw	r2,-3688(r2)
 8027b94:	10800b04 	addi	r2,r2,44
 8027b98:	00c00204 	movi	r3,8
 8027b9c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse[iface].mi.base, 8);
 8027ba0:	e0bff417 	ldw	r2,-48(fp)
 8027ba4:	10c02924 	muli	r3,r2,164
 8027ba8:	008201b4 	movhi	r2,2054
 8027bac:	1885883a 	add	r2,r3,r2
 8027bb0:	10bc6617 	ldw	r2,-3688(r2)
 8027bb4:	10800c04 	addi	r2,r2,48
 8027bb8:	00c00204 	movi	r3,8
 8027bbc:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 8027bc0:	e0bff417 	ldw	r2,-48(fp)
 8027bc4:	10c02924 	muli	r3,r2,164
 8027bc8:	008201b4 	movhi	r2,2054
 8027bcc:	1885883a 	add	r2,r3,r2
 8027bd0:	10bc6617 	ldw	r2,-3688(r2)
 8027bd4:	10800d04 	addi	r2,r2,52
 8027bd8:	00c00204 	movi	r3,8
 8027bdc:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse[iface].mi.base,  3);
 8027be0:	e0bff417 	ldw	r2,-48(fp)
 8027be4:	10c02924 	muli	r3,r2,164
 8027be8:	008201b4 	movhi	r2,2054
 8027bec:	1885883a 	add	r2,r3,r2
 8027bf0:	10bc6617 	ldw	r2,-3688(r2)
 8027bf4:	10800e04 	addi	r2,r2,56
 8027bf8:	00c000c4 	movi	r3,3
 8027bfc:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_tx_depth - 16); //1024/4;  
 8027c00:	e0bff417 	ldw	r2,-48(fp)
 8027c04:	10c02924 	muli	r3,r2,164
 8027c08:	008201b4 	movhi	r2,2054
 8027c0c:	1885883a 	add	r2,r3,r2
 8027c10:	10bc6617 	ldw	r2,-3688(r2)
 8027c14:	10800904 	addi	r2,r2,36
 8027c18:	e0fffa17 	ldw	r3,-24(fp)
 8027c1c:	18c00117 	ldw	r3,4(r3)
 8027c20:	18fffc04 	addi	r3,r3,-16
 8027c24:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse[iface].mi.base,  0); //32/4; // start transmit when there are 48 bytes
 8027c28:	e0bff417 	ldw	r2,-48(fp)
 8027c2c:	10c02924 	muli	r3,r2,164
 8027c30:	008201b4 	movhi	r2,2054
 8027c34:	1885883a 	add	r2,r3,r2
 8027c38:	10bc6617 	ldw	r2,-3688(r2)
 8027c3c:	10800a04 	addi	r2,r2,40
 8027c40:	0007883a 	mov	r3,zero
 8027c44:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_rx_depth - 16); //4000/4);
 8027c48:	e0bff417 	ldw	r2,-48(fp)
 8027c4c:	10c02924 	muli	r3,r2,164
 8027c50:	008201b4 	movhi	r2,2054
 8027c54:	1885883a 	add	r2,r3,r2
 8027c58:	10bc6617 	ldw	r2,-3688(r2)
 8027c5c:	10800704 	addi	r2,r2,28
 8027c60:	e0fffa17 	ldw	r3,-24(fp)
 8027c64:	18c00217 	ldw	r3,8(r3)
 8027c68:	18fffc04 	addi	r3,r3,-16
 8027c6c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse[iface].mi.base,  0);
 8027c70:	e0bff417 	ldw	r2,-48(fp)
 8027c74:	10c02924 	muli	r3,r2,164
 8027c78:	008201b4 	movhi	r2,2054
 8027c7c:	1885883a 	add	r2,r3,r2
 8027c80:	10bc6617 	ldw	r2,-3688(r2)
 8027c84:	10800804 	addi	r2,r2,32
 8027c88:	0007883a 	mov	r3,zero
 8027c8c:	10c00035 	stwio	r3,0(r2)
      tse[iface].rxShift16OK = 0;
    }
  } /* if(ETHHDR_BIAS == 0) */
 
  if(ETHHDR_BIAS == 2) {
    IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 8027c90:	e0bff417 	ldw	r2,-48(fp)
 8027c94:	10c02924 	muli	r3,r2,164
 8027c98:	008201b4 	movhi	r2,2054
 8027c9c:	1885883a 	add	r2,r3,r2
 8027ca0:	10bc6617 	ldw	r2,-3688(r2)
 8027ca4:	10803a04 	addi	r2,r2,232
 8027ca8:	00c00134 	movhi	r3,4
 8027cac:	10c00035 	stwio	r3,0(r2)
 
    /*
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
 8027cb0:	e0bff417 	ldw	r2,-48(fp)
 8027cb4:	10c02924 	muli	r3,r2,164
 8027cb8:	008201b4 	movhi	r2,2054
 8027cbc:	1885883a 	add	r2,r3,r2
 8027cc0:	10bc6617 	ldw	r2,-3688(r2)
 8027cc4:	10803a04 	addi	r2,r2,232
 8027cc8:	10800037 	ldwio	r2,0(r2)
 8027ccc:	1080012c 	andhi	r2,r2,4
 8027cd0:	10001826 	beq	r2,zero,8027d34 <tse_mac_init+0x69c>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
 8027cd4:	e0bff417 	ldw	r2,-48(fp)
 8027cd8:	11002924 	muli	r4,r2,164
 8027cdc:	00c00044 	movi	r3,1
 8027ce0:	008201b4 	movhi	r2,2054
 8027ce4:	2085883a 	add	r2,r4,r2
 8027ce8:	10fc6e15 	stw	r3,-3656(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 8027cec:	e0bff417 	ldw	r2,-48(fp)
 8027cf0:	10c02924 	muli	r3,r2,164
 8027cf4:	008201b4 	movhi	r2,2054
 8027cf8:	1885883a 	add	r2,r3,r2
 8027cfc:	10bc6617 	ldw	r2,-3688(r2)
 8027d00:	10803b04 	addi	r2,r2,236
 8027d04:	00c08034 	movhi	r3,512
 8027d08:	10c00035 	stwio	r3,0(r2)
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
 8027d0c:	e0bff417 	ldw	r2,-48(fp)
 8027d10:	10c02924 	muli	r3,r2,164
 8027d14:	008201b4 	movhi	r2,2054
 8027d18:	1885883a 	add	r2,r3,r2
 8027d1c:	10bc6617 	ldw	r2,-3688(r2)
 8027d20:	10803b04 	addi	r2,r2,236
 8027d24:	10800037 	ldwio	r2,0(r2)
 8027d28:	1080802c 	andhi	r2,r2,512
 8027d2c:	10001926 	beq	r2,zero,8027d94 <tse_mac_init+0x6fc>
 8027d30:	00000b06 	br	8027d60 <tse_mac_init+0x6c8>
      tse[iface].txShift16OK = 0;
 8027d34:	e0bff417 	ldw	r2,-48(fp)
 8027d38:	10c02924 	muli	r3,r2,164
 8027d3c:	008201b4 	movhi	r2,2054
 8027d40:	1885883a 	add	r2,r3,r2
 8027d44:	103c6e15 	stw	zero,-3656(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
 8027d48:	01400084 	movi	r5,2
 8027d4c:	01020174 	movhi	r4,2053
 8027d50:	210ab704 	addi	r4,r4,10972
 8027d54:	8003b840 	call	8003b84 <printf>
      return ENP_LOGIC;
 8027d58:	00bffd44 	movi	r2,-11
 8027d5c:	0000e206 	br	80280e8 <tse_mac_init+0xa50>
    {
      tse[iface].rxShift16OK = 1;
 8027d60:	e0bff417 	ldw	r2,-48(fp)
 8027d64:	11002924 	muli	r4,r2,164
 8027d68:	00c00044 	movi	r3,1
 8027d6c:	008201b4 	movhi	r2,2054
 8027d70:	2085883a 	add	r2,r4,r2
 8027d74:	10fc6f15 	stw	r3,-3652(r2)
      return ENP_LOGIC;
    }
  } /* if(ETHHDR_BIAS == 2) */
  
  /* enable MAC */
  dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 8027d78:	00810034 	movhi	r2,1024
 8027d7c:	108080c4 	addi	r2,r2,515
 8027d80:	e0bfff15 	stw	r2,-4(fp)
        ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
 8027d84:	e0bff617 	ldw	r2,-40(fp)
 8027d88:	10800058 	cmpnei	r2,r2,1
 8027d8c:	1000151e 	bne	r2,zero,8027de4 <tse_mac_init+0x74c>
 8027d90:	00000b06 	br	8027dc0 <tse_mac_init+0x728>
      tse[iface].rxShift16OK = 0;
 8027d94:	e0bff417 	ldw	r2,-48(fp)
 8027d98:	10c02924 	muli	r3,r2,164
 8027d9c:	008201b4 	movhi	r2,2054
 8027da0:	1885883a 	add	r2,r3,r2
 8027da4:	103c6f15 	stw	zero,-3652(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
 8027da8:	01400084 	movi	r5,2
 8027dac:	01020174 	movhi	r4,2053
 8027db0:	210acf04 	addi	r4,r4,11068
 8027db4:	8003b840 	call	8003b84 <printf>
      return ENP_LOGIC;
 8027db8:	00bffd44 	movi	r2,-11
 8027dbc:	0000ca06 	br	80280e8 <tse_mac_init+0xa50>
    dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8027dc0:	e0bfff17 	ldw	r2,-4(fp)
 8027dc4:	10800214 	ori	r2,r2,8
 8027dc8:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8027dcc:	e0ffff17 	ldw	r3,-4(fp)
 8027dd0:	00bf8034 	movhi	r2,65024
 8027dd4:	10bfffc4 	addi	r2,r2,-1
 8027dd8:	1884703a 	and	r2,r3,r2
 8027ddc:	e0bfff15 	stw	r2,-4(fp)
 8027de0:	00002106 	br	8027e68 <tse_mac_init+0x7d0>
  }
  /* 100 Mbps */
  else if(speed == 0x02) {
 8027de4:	e0bff617 	ldw	r2,-40(fp)
 8027de8:	10800098 	cmpnei	r2,r2,2
 8027dec:	10000a1e 	bne	r2,zero,8027e18 <tse_mac_init+0x780>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8027df0:	e0ffff17 	ldw	r3,-4(fp)
 8027df4:	00bffdc4 	movi	r2,-9
 8027df8:	1884703a 	and	r2,r3,r2
 8027dfc:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8027e00:	e0ffff17 	ldw	r3,-4(fp)
 8027e04:	00bf8034 	movhi	r2,65024
 8027e08:	10bfffc4 	addi	r2,r2,-1
 8027e0c:	1884703a 	and	r2,r3,r2
 8027e10:	e0bfff15 	stw	r2,-4(fp)
 8027e14:	00001406 	br	8027e68 <tse_mac_init+0x7d0>
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
 8027e18:	e0bff617 	ldw	r2,-40(fp)
 8027e1c:	10800118 	cmpnei	r2,r2,4
 8027e20:	1000081e 	bne	r2,zero,8027e44 <tse_mac_init+0x7ac>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8027e24:	e0ffff17 	ldw	r3,-4(fp)
 8027e28:	00bffdc4 	movi	r2,-9
 8027e2c:	1884703a 	and	r2,r3,r2
 8027e30:	e0bfff15 	stw	r2,-4(fp)
    dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8027e34:	e0bfff17 	ldw	r2,-4(fp)
 8027e38:	10808034 	orhi	r2,r2,512
 8027e3c:	e0bfff15 	stw	r2,-4(fp)
 8027e40:	00000906 	br	8027e68 <tse_mac_init+0x7d0>
  }
  /* default to 100 Mbps if returned invalid speed */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8027e44:	e0ffff17 	ldw	r3,-4(fp)
 8027e48:	00bffdc4 	movi	r2,-9
 8027e4c:	1884703a 	and	r2,r3,r2
 8027e50:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8027e54:	e0ffff17 	ldw	r3,-4(fp)
 8027e58:	00bf8034 	movhi	r2,65024
 8027e5c:	10bfffc4 	addi	r2,r2,-1
 8027e60:	1884703a 	and	r2,r3,r2
 8027e64:	e0bfff15 	stw	r2,-4(fp)
  }
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 8027e68:	e0bff517 	ldw	r2,-44(fp)
 8027e6c:	1000041e 	bne	r2,zero,8027e80 <tse_mac_init+0x7e8>
    dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 8027e70:	e0bfff17 	ldw	r2,-4(fp)
 8027e74:	10810014 	ori	r2,r2,1024
 8027e78:	e0bfff15 	stw	r2,-4(fp)
 8027e7c:	00000406 	br	8027e90 <tse_mac_init+0x7f8>
  }
  /* Full Duplex */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 8027e80:	e0ffff17 	ldw	r3,-4(fp)
 8027e84:	00beffc4 	movi	r2,-1025
 8027e88:	1884703a 	and	r2,r3,r2
 8027e8c:	e0bfff15 	stw	r2,-4(fp)
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 8027e90:	e0bff417 	ldw	r2,-48(fp)
 8027e94:	10c02924 	muli	r3,r2,164
 8027e98:	008201b4 	movhi	r2,2054
 8027e9c:	1885883a 	add	r2,r3,r2
 8027ea0:	10bc6617 	ldw	r2,-3688(r2)
 8027ea4:	10800204 	addi	r2,r2,8
 8027ea8:	e0ffff17 	ldw	r3,-4(fp)
 8027eac:	10c00035 	stwio	r3,0(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
 8027eb0:	e0bff417 	ldw	r2,-48(fp)
 8027eb4:	10c02924 	muli	r3,r2,164
 8027eb8:	008201b4 	movhi	r2,2054
 8027ebc:	1885883a 	add	r2,r3,r2
 8027ec0:	10bc6617 	ldw	r2,-3688(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
 8027ec4:	10800204 	addi	r2,r2,8
 8027ec8:	10800037 	ldwio	r2,0(r2)
 8027ecc:	100b883a 	mov	r5,r2
 8027ed0:	01020174 	movhi	r4,2053
 8027ed4:	210ae704 	addi	r4,r4,11164
 8027ed8:	8003b840 	call	8003b84 <printf>
  
                          
#ifdef ALT_INICHE
   /* Set the MAC address */  
   IOWR_ALTERA_TSEMAC_MAC_0(tse[iface].mi.base,
 8027edc:	e0bff417 	ldw	r2,-48(fp)
 8027ee0:	10c02924 	muli	r3,r2,164
 8027ee4:	008201b4 	movhi	r2,2054
 8027ee8:	1885883a 	add	r2,r3,r2
 8027eec:	10bc6617 	ldw	r2,-3688(r2)
 8027ef0:	10c00304 	addi	r3,r2,12
 8027ef4:	e0bff417 	ldw	r2,-48(fp)
 8027ef8:	11002924 	muli	r4,r2,164
 8027efc:	008201b4 	movhi	r2,2054
 8027f00:	2085883a 	add	r2,r4,r2
 8027f04:	10bc6b03 	ldbu	r2,-3668(r2)
 8027f08:	11003fcc 	andi	r4,r2,255
 8027f0c:	e0bff417 	ldw	r2,-48(fp)
 8027f10:	11402924 	muli	r5,r2,164
 8027f14:	008201b4 	movhi	r2,2054
 8027f18:	2885883a 	add	r2,r5,r2
 8027f1c:	10bc6b43 	ldbu	r2,-3667(r2)
 8027f20:	10803fcc 	andi	r2,r2,255
 8027f24:	1004923a 	slli	r2,r2,8
 8027f28:	2088b03a 	or	r4,r4,r2
 8027f2c:	e0bff417 	ldw	r2,-48(fp)
 8027f30:	11402924 	muli	r5,r2,164
 8027f34:	008201b4 	movhi	r2,2054
 8027f38:	2885883a 	add	r2,r5,r2
 8027f3c:	10bc6b83 	ldbu	r2,-3666(r2)
 8027f40:	10803fcc 	andi	r2,r2,255
 8027f44:	1004943a 	slli	r2,r2,16
 8027f48:	2088b03a 	or	r4,r4,r2
 8027f4c:	e0bff417 	ldw	r2,-48(fp)
 8027f50:	11402924 	muli	r5,r2,164
 8027f54:	008201b4 	movhi	r2,2054
 8027f58:	2885883a 	add	r2,r5,r2
 8027f5c:	10bc6bc3 	ldbu	r2,-3665(r2)
 8027f60:	10803fcc 	andi	r2,r2,255
 8027f64:	1004963a 	slli	r2,r2,24
 8027f68:	2084b03a 	or	r2,r4,r2
 8027f6c:	18800035 	stwio	r2,0(r3)
                           ((int)((unsigned char) tse[iface].mac_addr[0]) | 
                            (int)((unsigned char) tse[iface].mac_addr[1] <<  8) |
                            (int)((unsigned char) tse[iface].mac_addr[2] << 16) | 
                            (int)((unsigned char) tse[iface].mac_addr[3] << 24)));
  
   IOWR_ALTERA_TSEMAC_MAC_1(tse[iface].mi.base, 
 8027f70:	e0bff417 	ldw	r2,-48(fp)
 8027f74:	10c02924 	muli	r3,r2,164
 8027f78:	008201b4 	movhi	r2,2054
 8027f7c:	1885883a 	add	r2,r3,r2
 8027f80:	10bc6617 	ldw	r2,-3688(r2)
 8027f84:	10c00404 	addi	r3,r2,16
 8027f88:	e0bff417 	ldw	r2,-48(fp)
 8027f8c:	11002924 	muli	r4,r2,164
 8027f90:	008201b4 	movhi	r2,2054
 8027f94:	2085883a 	add	r2,r4,r2
 8027f98:	10bc6c03 	ldbu	r2,-3664(r2)
 8027f9c:	11003fcc 	andi	r4,r2,255
 8027fa0:	e0bff417 	ldw	r2,-48(fp)
 8027fa4:	11402924 	muli	r5,r2,164
 8027fa8:	008201b4 	movhi	r2,2054
 8027fac:	2885883a 	add	r2,r5,r2
 8027fb0:	10bc6c43 	ldbu	r2,-3663(r2)
 8027fb4:	10803fcc 	andi	r2,r2,255
 8027fb8:	1004923a 	slli	r2,r2,8
 8027fbc:	2084b03a 	or	r2,r4,r2
 8027fc0:	10bfffcc 	andi	r2,r2,65535
 8027fc4:	18800035 	stwio	r2,0(r3)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 8027fc8:	e0bff417 	ldw	r2,-48(fp)
 8027fcc:	100690ba 	slli	r3,r2,2
 8027fd0:	008201b4 	movhi	r2,2054
 8027fd4:	1885883a 	add	r2,r3,r2
 8027fd8:	10bdce17 	ldw	r2,-2248(r2)
 8027fdc:	10802717 	ldw	r2,156(r2)
 8027fe0:	00c00044 	movi	r3,1
 8027fe4:	10c00615 	stw	r3,24(r2)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
 8027fe8:	e0bff417 	ldw	r2,-48(fp)
 8027fec:	100690ba 	slli	r3,r2,2
 8027ff0:	008201b4 	movhi	r2,2054
 8027ff4:	1885883a 	add	r2,r3,r2
 8027ff8:	10bdce17 	ldw	r2,-2248(r2)
 8027ffc:	10802717 	ldw	r2,156(r2)
 8028000:	00c00044 	movi	r3,1
 8028004:	10c00715 	stw	r3,28(r2)
   
   /* Install MSGDMA (RX) interrupt handler */
   alt_msgdma_register_callback(
 8028008:	e0bff417 	ldw	r2,-48(fp)
 802800c:	10c02924 	muli	r3,r2,164
 8028010:	008201b4 	movhi	r2,2054
 8028014:	1885883a 	add	r2,r3,r2
 8028018:	113c6817 	ldw	r4,-3680(r2)
        tse[iface].mi.rx_msgdma,
        (alt_msgdma_callback)&tse_msgdmaRx_isr,
        0,
        (void*)(&tse[iface]));
 802801c:	e0bff417 	ldw	r2,-48(fp)
 8028020:	10c02924 	muli	r3,r2,164
 8028024:	008201b4 	movhi	r2,2054
 8028028:	10bc6504 	addi	r2,r2,-3692
 802802c:	1885883a 	add	r2,r3,r2
   alt_msgdma_register_callback(
 8028030:	100f883a 	mov	r7,r2
 8028034:	000d883a 	mov	r6,zero
 8028038:	014200f4 	movhi	r5,2051
 802803c:	2960fc04 	addi	r5,r5,-31760
 8028040:	80271640 	call	8027164 <alt_msgdma_register_callback>
        
           /* Install MSGDMA (TX) interrupt handler */
    alt_msgdma_register_callback(
 8028044:	e0bff417 	ldw	r2,-48(fp)
 8028048:	10c02924 	muli	r3,r2,164
 802804c:	008201b4 	movhi	r2,2054
 8028050:	1885883a 	add	r2,r3,r2
 8028054:	113c6717 	ldw	r4,-3684(r2)
          tse[iface].mi.tx_msgdma,
          (alt_msgdma_callback)&tse_msgdmaTx_isr,
          0,
          (void*)(&tse[iface]));
 8028058:	e0bff417 	ldw	r2,-48(fp)
 802805c:	10c02924 	muli	r3,r2,164
 8028060:	008201b4 	movhi	r2,2054
 8028064:	10bc6504 	addi	r2,r2,-3692
 8028068:	1885883a 	add	r2,r3,r2
    alt_msgdma_register_callback(
 802806c:	100f883a 	mov	r7,r2
 8028070:	000d883a 	mov	r6,zero
 8028074:	014200f4 	movhi	r5,2051
 8028078:	29616204 	addi	r5,r5,-31352
 802807c:	80271640 	call	8027164 <alt_msgdma_register_callback>
    
  status = tse_msgdma_read_init(&tse[iface]);
 8028080:	e0bff417 	ldw	r2,-48(fp)
 8028084:	10c02924 	muli	r3,r2,164
 8028088:	008201b4 	movhi	r2,2054
 802808c:	10bc6504 	addi	r2,r2,-3692
 8028090:	1885883a 	add	r2,r3,r2
 8028094:	1009883a 	mov	r4,r2
 8028098:	80285e80 	call	80285e8 <tse_msgdma_read_init>
 802809c:	e0bffd15 	stw	r2,-12(fp)
  if (status == 0 ) status = tse_msgdma_write_init(&tse[iface],0,0);
 80280a0:	e0bffd17 	ldw	r2,-12(fp)
 80280a4:	10000a1e 	bne	r2,zero,80280d0 <tse_mac_init+0xa38>
 80280a8:	e0bff417 	ldw	r2,-48(fp)
 80280ac:	10c02924 	muli	r3,r2,164
 80280b0:	008201b4 	movhi	r2,2054
 80280b4:	10bc6504 	addi	r2,r2,-3692
 80280b8:	1885883a 	add	r2,r3,r2
 80280bc:	000d883a 	mov	r6,zero
 80280c0:	000b883a 	mov	r5,zero
 80280c4:	1009883a 	mov	r4,r2
 80280c8:	80280fc0 	call	80280fc <tse_msgdma_write_init>
 80280cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (status!=0) dprintf("TSE_MAC_INIT error\n");
 80280d0:	e0bffd17 	ldw	r2,-12(fp)
 80280d4:	10000326 	beq	r2,zero,80280e4 <tse_mac_init+0xa4c>
 80280d8:	01020174 	movhi	r4,2053
 80280dc:	210af304 	addi	r4,r4,11212
 80280e0:	8003ca80 	call	8003ca8 <puts>
  
  return status;
 80280e4:	e0bffd17 	ldw	r2,-12(fp)
}
 80280e8:	e037883a 	mov	sp,fp
 80280ec:	dfc00117 	ldw	ra,4(sp)
 80280f0:	df000017 	ldw	fp,0(sp)
 80280f4:	dec00204 	addi	sp,sp,8
 80280f8:	f800283a 	ret

080280fc <tse_msgdma_write_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_msgdma_write_init(ins_tse_info* tse_ptr,unsigned int * ActualData,unsigned int len)
{     
 80280fc:	defff704 	addi	sp,sp,-36
 8028100:	dfc00815 	stw	ra,32(sp)
 8028104:	df000715 	stw	fp,28(sp)
 8028108:	df000704 	addi	fp,sp,28
 802810c:	e13ffc15 	stw	r4,-16(fp)
 8028110:	e17ffb15 	stw	r5,-20(fp)
 8028114:	e1bffa15 	stw	r6,-24(fp)
  alt_u32 control = 0;
 8028118:	e03fff15 	stw	zero,-4(fp)
  int desc_index;
  int rc;
  
  tse_ptr->txdesc_list = NULL;
 802811c:	e0bffc17 	ldw	r2,-16(fp)
 8028120:	10000d15 	stw	zero,52(r2)
  
  for(desc_index = 0; desc_index < (ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE); desc_index++)
 8028124:	e03ffe15 	stw	zero,-8(fp)
 8028128:	00003306 	br	80281f8 <tse_msgdma_write_init+0xfc>
  { 
        
    /* trigger interrupt when transfer complete */
    control =  ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MASK | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MASK; 
 802812c:	0080c004 	movi	r2,768
 8028130:	e0bfff15 	stw	r2,-4(fp)
            
    if (desc_index >= ( ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE - 2)) control |= ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK;
 8028134:	e0bffe17 	ldw	r2,-8(fp)
 8028138:	10000416 	blt	r2,zero,802814c <tse_msgdma_write_init+0x50>
 802813c:	e0bfff17 	ldw	r2,-4(fp)
 8028140:	10900014 	ori	r2,r2,16384
 8028144:	e0bfff15 	stw	r2,-4(fp)
 8028148:	00000306 	br	8028158 <tse_msgdma_write_init+0x5c>
    else control  |= ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK;
 802814c:	e0bfff17 	ldw	r2,-4(fp)
 8028150:	10804034 	orhi	r2,r2,256
 8028154:	e0bfff15 	stw	r2,-4(fp)
            
    rc=alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor(
 8028158:	e0bffc17 	ldw	r2,-16(fp)
 802815c:	11000217 	ldw	r4,8(r2)
            tse_ptr->mi.tx_msgdma,
            (alt_msgdma_prefetcher_standard_descriptor *) &tse_ptr->txdesc[desc_index],  
 8028160:	e0bffc17 	ldw	r2,-16(fp)
 8028164:	10c00e17 	ldw	r3,56(r2)
 8028168:	e0bffe17 	ldw	r2,-8(fp)
 802816c:	1004917a 	slli	r2,r2,5
    rc=alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor(
 8028170:	1887883a 	add	r3,r3,r2
 8028174:	e17ffb17 	ldw	r5,-20(fp)
 8028178:	e0bfff17 	ldw	r2,-4(fp)
 802817c:	d8800015 	stw	r2,0(sp)
 8028180:	e1fffa17 	ldw	r7,-24(fp)
 8028184:	280d883a 	mov	r6,r5
 8028188:	180b883a 	mov	r5,r3
 802818c:	80263c00 	call	80263c0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>
 8028190:	e0bffd15 	stw	r2,-12(fp)
            (int)ActualData,   
            len,
            control);
    if (rc!=0) return -1;
 8028194:	e0bffd17 	ldw	r2,-12(fp)
 8028198:	10000226 	beq	r2,zero,80281a4 <tse_msgdma_write_init+0xa8>
 802819c:	00bfffc4 	movi	r2,-1
 80281a0:	00001906 	br	8028208 <tse_msgdma_write_init+0x10c>
    
    if (desc_index==0) tse_ptr->txdesc_list = NULL; 
 80281a4:	e0bffe17 	ldw	r2,-8(fp)
 80281a8:	1000021e 	bne	r2,zero,80281b4 <tse_msgdma_write_init+0xb8>
 80281ac:	e0bffc17 	ldw	r2,-16(fp)
 80281b0:	10000d15 	stw	zero,52(r2)
            
    rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 80281b4:	e0bffc17 	ldw	r2,-16(fp)
 80281b8:	11000d04 	addi	r4,r2,52
               &tse_ptr->txdesc_list,
               &tse_ptr->txdesc[desc_index] );        
 80281bc:	e0bffc17 	ldw	r2,-16(fp)
 80281c0:	10c00e17 	ldw	r3,56(r2)
 80281c4:	e0bffe17 	ldw	r2,-8(fp)
 80281c8:	1004917a 	slli	r2,r2,5
    rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 80281cc:	1885883a 	add	r2,r3,r2
 80281d0:	100b883a 	mov	r5,r2
 80281d4:	80266080 	call	8026608 <alt_msgdma_prefetcher_add_standard_desc_to_list>
 80281d8:	e0bffd15 	stw	r2,-12(fp)
    if (rc!=0) return -1;
 80281dc:	e0bffd17 	ldw	r2,-12(fp)
 80281e0:	10000226 	beq	r2,zero,80281ec <tse_msgdma_write_init+0xf0>
 80281e4:	00bfffc4 	movi	r2,-1
 80281e8:	00000706 	br	8028208 <tse_msgdma_write_init+0x10c>
  for(desc_index = 0; desc_index < (ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE); desc_index++)
 80281ec:	e0bffe17 	ldw	r2,-8(fp)
 80281f0:	10800044 	addi	r2,r2,1
 80281f4:	e0bffe15 	stw	r2,-8(fp)
 80281f8:	e0bffe17 	ldw	r2,-8(fp)
 80281fc:	10800090 	cmplti	r2,r2,2
 8028200:	103fca1e 	bne	r2,zero,802812c <tse_msgdma_write_init+0x30>

  } 
  
  return 0;
 8028204:	0005883a 	mov	r2,zero
}
 8028208:	e037883a 	mov	sp,fp
 802820c:	dfc00117 	ldw	ra,4(sp)
 8028210:	df000017 	ldw	fp,0(sp)
 8028214:	dec00204 	addi	sp,sp,8
 8028218:	f800283a 	ret

0802821c <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned int data_bytes)
{
 802821c:	defff104 	addi	sp,sp,-60
 8028220:	dfc00e15 	stw	ra,56(sp)
 8028224:	df000d15 	stw	fp,52(sp)
 8028228:	df000d04 	addi	fp,sp,52
 802822c:	e13ff515 	stw	r4,-44(fp)
 8028230:	e17ff415 	stw	r5,-48(fp)
 8028234:	e1bff315 	stw	r6,-52(fp)
   unsigned int len = data_bytes;
 8028238:	e0bff317 	ldw	r2,-52(fp)
 802823c:	e0bfff15 	stw	r2,-4(fp)
   int rc;

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;
 8028240:	e0bff517 	ldw	r2,-44(fp)
 8028244:	10802817 	ldw	r2,160(r2)
 8028248:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 802824c:	0005303a 	rdctl	r2,status
 8028250:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8028254:	e0fff917 	ldw	r3,-28(fp)
 8028258:	00bfff84 	movi	r2,-2
 802825c:	1884703a 	and	r2,r3,r2
 8028260:	1001703a 	wrctl	status,r2
  return context;
 8028264:	e0bff917 	ldw	r2,-28(fp)
   tse_mac_trans_info *mi;
   unsigned int* ActualData;
   int cpu_sr;
   
   OS_ENTER_CRITICAL();
 8028268:	e0bffd15 	stw	r2,-12(fp)
   mi = &tse_ptr->mi;
 802826c:	e0bffe17 	ldw	r2,-8(fp)
 8028270:	10800104 	addi	r2,r2,4
 8028274:	e0bffc15 	stw	r2,-16(fp)
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
 8028278:	e0bffe17 	ldw	r2,-8(fp)
 802827c:	10800b17 	ldw	r2,44(r2)
 8028280:	10000a26 	beq	r2,zero,80282ac <tse_mac_raw_send+0x90>
   {
      dprintf("raw_send CALLED AGAIN!!!\n");
 8028284:	01020174 	movhi	r4,2053
 8028288:	210af804 	addi	r4,r4,11232
 802828c:	8003ca80 	call	8003ca8 <puts>
 8028290:	e0bffd17 	ldw	r2,-12(fp)
 8028294:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8028298:	e0bff817 	ldw	r2,-32(fp)
 802829c:	1001703a 	wrctl	status,r2
}
 80282a0:	0001883a 	nop
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
 80282a4:	00bffa84 	movi	r2,-22
 80282a8:	00004c06 	br	80283dc <tse_mac_raw_send+0x1c0>
   }
 
   tse_ptr->sem = 1;  
 80282ac:	e0bffe17 	ldw	r2,-8(fp)
 80282b0:	00c00044 	movi	r3,1
 80282b4:	10c00b15 	stw	r3,44(r2)
   
   // clear bit-31 before passing it to MSGDMA Driver
   ActualData = (unsigned int*)alt_remap_cached ((volatile void*) data, 4);
 80282b8:	01400104 	movi	r5,4
 80282bc:	e13ff417 	ldw	r4,-48(fp)
 80282c0:	803f6680 	call	803f668 <alt_remap_cached>
 80282c4:	e0bffb15 	stw	r2,-20(fp)
     dprintf("tse_msgdma_write_init bad return\n");
     OS_EXIT_CRITICAL();
     return -1;
   }
   #else
     tse_ptr->txdesc[0].read_address = (alt_u32)ActualData;
 80282c8:	e0bffe17 	ldw	r2,-8(fp)
 80282cc:	10800e17 	ldw	r2,56(r2)
 80282d0:	e0fffb17 	ldw	r3,-20(fp)
 80282d4:	10c00015 	stw	r3,0(r2)
     tse_ptr->txdesc[0].transfer_length = len;
 80282d8:	e0bffe17 	ldw	r2,-8(fp)
 80282dc:	10800e17 	ldw	r2,56(r2)
 80282e0:	e0ffff17 	ldw	r3,-4(fp)
 80282e4:	10c00215 	stw	r3,8(r2)
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 80282e8:	e0bffe17 	ldw	r2,-8(fp)
 80282ec:	10800e17 	ldw	r2,56(r2)
 80282f0:	10c00717 	ldw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 80282f4:	00900034 	movhi	r2,16384
 80282f8:	10bfffc4 	addi	r2,r2,-1
 80282fc:	1886703a 	and	r3,r3,r2
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 8028300:	e0bffe17 	ldw	r2,-8(fp)
 8028304:	10800e17 	ldw	r2,56(r2)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 8028308:	18e00034 	orhi	r3,r3,32768
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 802830c:	10c00715 	stw	r3,28(r2)
   #endif  
        
   alt_dcache_flush(ActualData,len);   
 8028310:	e17fff17 	ldw	r5,-4(fp)
 8028314:	e13ffb17 	ldw	r4,-20(fp)
 8028318:	803e8d40 	call	803e8d4 <alt_dcache_flush>
   rc = tse_mac_aTxWrite(mi,tse_ptr->txdesc);
 802831c:	e0bffe17 	ldw	r2,-8(fp)
 8028320:	10800e17 	ldw	r2,56(r2)
 8028324:	100b883a 	mov	r5,r2
 8028328:	e13ffc17 	ldw	r4,-16(fp)
 802832c:	801f8d40 	call	801f8d4 <tse_mac_aTxWrite>
 8028330:	e0bffa15 	stw	r2,-24(fp)
   if(rc < 0)   /* MSGDMA not available */
 8028334:	e0bffa17 	ldw	r2,-24(fp)
 8028338:	1000130e 	bge	r2,zero,8028388 <tse_mac_raw_send+0x16c>
   {
      dprintf("raw_send() MSGDMA not available, ret=%d, len=%d\n",rc, len);
 802833c:	e1bfff17 	ldw	r6,-4(fp)
 8028340:	e17ffa17 	ldw	r5,-24(fp)
 8028344:	01020174 	movhi	r4,2053
 8028348:	210aff04 	addi	r4,r4,11260
 802834c:	8003b840 	call	8003b84 <printf>
      net->n_mib->ifOutDiscards++;
 8028350:	e0bff517 	ldw	r2,-44(fp)
 8028354:	10802717 	ldw	r2,156(r2)
 8028358:	10c01217 	ldw	r3,72(r2)
 802835c:	18c00044 	addi	r3,r3,1
 8028360:	10c01215 	stw	r3,72(r2)
      tse_ptr->sem = 0;
 8028364:	e0bffe17 	ldw	r2,-8(fp)
 8028368:	10000b15 	stw	zero,44(r2)
 802836c:	e0bffd17 	ldw	r2,-12(fp)
 8028370:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8028374:	e0bff717 	ldw	r2,-36(fp)
 8028378:	1001703a 	wrctl	status,r2
}
 802837c:	0001883a 	nop

      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
 8028380:	00bffa84 	movi	r2,-22
 8028384:	00001506 	br	80283dc <tse_mac_raw_send+0x1c0>
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 8028388:	e0bff517 	ldw	r2,-44(fp)
 802838c:	10802717 	ldw	r2,156(r2)
 8028390:	11000f17 	ldw	r4,60(r2)
 8028394:	e0bff517 	ldw	r2,-44(fp)
 8028398:	10802717 	ldw	r2,156(r2)
 802839c:	e0fff317 	ldw	r3,-52(fp)
 80283a0:	20c7883a 	add	r3,r4,r3
 80283a4:	10c00f15 	stw	r3,60(r2)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
 80283a8:	e0bff517 	ldw	r2,-44(fp)
 80283ac:	10802717 	ldw	r2,156(r2)
 80283b0:	10c01017 	ldw	r3,64(r2)
 80283b4:	18c00044 	addi	r3,r3,1
 80283b8:	10c01015 	stw	r3,64(r2)
      tse_ptr->sem = 0;
 80283bc:	e0bffe17 	ldw	r2,-8(fp)
 80283c0:	10000b15 	stw	zero,44(r2)
 80283c4:	e0bffd17 	ldw	r2,-12(fp)
 80283c8:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 80283cc:	e0bff617 	ldw	r2,-40(fp)
 80283d0:	1001703a 	wrctl	status,r2
}
 80283d4:	0001883a 	nop

      OS_EXIT_CRITICAL();
      return SUCCESS;  /*success */
 80283d8:	0005883a 	mov	r2,zero
   }
}
 80283dc:	e037883a 	mov	sp,fp
 80283e0:	dfc00117 	ldw	ra,4(sp)
 80283e4:	df000017 	ldw	fp,0(sp)
 80283e8:	dec00204 	addi	sp,sp,8
 80283ec:	f800283a 	ret

080283f0 <tse_msgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_msgdmaRx_isr(void * context)
{
 80283f0:	defff804 	addi	sp,sp,-32
 80283f4:	dfc00715 	stw	ra,28(sp)
 80283f8:	df000615 	stw	fp,24(sp)
 80283fc:	df000604 	addi	fp,sp,24
 8028400:	e13ffa15 	stw	r4,-24(fp)
    ins_tse_info* tse_ptr = (ins_tse_info *) context; 
 8028404:	e0bffa17 	ldw	r2,-24(fp)
 8028408:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 msgdma_status;
    alt_u32 i,control;
    
    /* Capture current rcv queue length */
    int initial_rcvdq_len = rcvdq.q_len;
 802840c:	008201b4 	movhi	r2,2054
 8028410:	10bd0b17 	ldw	r2,-3028(r2)
 8028414:	e0bffd15 	stw	r2,-12(fp)

    /* reenable global interrupts so we don't miss one that occurs during the
       processing of this ISR */
    IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(tse_ptr->mi.rx_msgdma->prefetcher_base,
 8028418:	e0bffe17 	ldw	r2,-8(fp)
 802841c:	10800317 	ldw	r2,12(r2)
 8028420:	10800617 	ldw	r2,24(r2)
 8028424:	e0fffe17 	ldw	r3,-8(fp)
 8028428:	18c00317 	ldw	r3,12(r3)
 802842c:	18c00617 	ldw	r3,24(r3)
 8028430:	18c00037 	ldwio	r3,0(r3)
 8028434:	18c00214 	ori	r3,r3,8
 8028438:	10c00035 	stwio	r3,0(r2)
      			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(tse_ptr->mi.rx_msgdma->prefetcher_base)
	  			| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK);
       
    msgdma_status = IORD_ALTERA_MSGDMA_CSR_STATUS(tse_ptr->mi.rx_msgdma->csr_base);
 802843c:	e0bffe17 	ldw	r2,-8(fp)
 8028440:	10800317 	ldw	r2,12(r2)
 8028444:	10800317 	ldw	r2,12(r2)
 8028448:	10800037 	ldwio	r2,0(r2)
 802844c:	e0bffc15 	stw	r2,-16(fp)
       
    if ((msgdma_status & ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK)==0)
 8028450:	e0bffc17 	ldw	r2,-16(fp)
 8028454:	1080200c 	andi	r2,r2,128
 8028458:	1000421e 	bne	r2,zero,8028564 <tse_msgdmaRx_isr+0x174>
    {   
       /* Handle received packet */
        tse_mac_rcv(tse_ptr); 
 802845c:	e13ffe17 	ldw	r4,-8(fp)
 8028460:	80289d80 	call	80289d8 <tse_mac_rcv>
        
        /* read the control field of the last descriptor in the chain */
        control = IORD_32DIRECT(&tse_ptr->rxdesc[tse_ptr->rx_chain][ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-2],0x1c);
 8028464:	e0bffe17 	ldw	r2,-8(fp)
 8028468:	10801317 	ldw	r2,76(r2)
 802846c:	e0fffe17 	ldw	r3,-8(fp)
 8028470:	10800444 	addi	r2,r2,17
 8028474:	100490ba 	slli	r2,r2,2
 8028478:	1885883a 	add	r2,r3,r2
 802847c:	10800017 	ldw	r2,0(r2)
 8028480:	10803804 	addi	r2,r2,224
 8028484:	10800704 	addi	r2,r2,28
 8028488:	10800037 	ldwio	r2,0(r2)
 802848c:	e0bffb15 	stw	r2,-20(fp)
                          
        //if the chain is completed then start a new chain
        if ((control & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK)==0)            
 8028490:	e0bffb17 	ldw	r2,-20(fp)
 8028494:	1090002c 	andhi	r2,r2,16384
 8028498:	10002a1e 	bne	r2,zero,8028544 <tse_msgdmaRx_isr+0x154>
        {
            /* process any unprocessed descriptors */      
            for (i=(tse_ptr->rx_descriptor_index);i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 802849c:	e0bffe17 	ldw	r2,-8(fp)
 80284a0:	10801417 	ldw	r2,80(r2)
 80284a4:	e0bfff15 	stw	r2,-4(fp)
 80284a8:	00000506 	br	80284c0 <tse_msgdmaRx_isr+0xd0>
            {
                tse_mac_rcv(tse_ptr); 
 80284ac:	e13ffe17 	ldw	r4,-8(fp)
 80284b0:	80289d80 	call	80289d8 <tse_mac_rcv>
            for (i=(tse_ptr->rx_descriptor_index);i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 80284b4:	e0bfff17 	ldw	r2,-4(fp)
 80284b8:	10800044 	addi	r2,r2,1
 80284bc:	e0bfff15 	stw	r2,-4(fp)
 80284c0:	e0bfff17 	ldw	r2,-4(fp)
 80284c4:	10800230 	cmpltui	r2,r2,8
 80284c8:	103ff81e 	bne	r2,zero,80284ac <tse_msgdmaRx_isr+0xbc>
            }
            
            /* cancel any pending ints */
            /* the chain could have been completed and int generated during the processing of this ISR */
            /* But we are handling that in this ISR, so cancel any pending interrupt */
            IOWR_ALT_MSGDMA_PREFETCHER_STATUS(tse_ptr->mi.rx_msgdma->prefetcher_base,1);
 80284cc:	e0bffe17 	ldw	r2,-8(fp)
 80284d0:	10800317 	ldw	r2,12(r2)
 80284d4:	10800617 	ldw	r2,24(r2)
 80284d8:	10800404 	addi	r2,r2,16
 80284dc:	00c00044 	movi	r3,1
 80284e0:	10c00035 	stwio	r3,0(r2)
          
            /* switch chains */
            tse_ptr->rx_descriptor_index = 0;
 80284e4:	e0bffe17 	ldw	r2,-8(fp)
 80284e8:	10001415 	stw	zero,80(r2)
            if (tse->rx_chain == 0) tse->rx_chain=1; else tse->rx_chain=0; 
 80284ec:	008201b4 	movhi	r2,2054
 80284f0:	10bc7817 	ldw	r2,-3616(r2)
 80284f4:	1000041e 	bne	r2,zero,8028508 <tse_msgdmaRx_isr+0x118>
 80284f8:	00c00044 	movi	r3,1
 80284fc:	008201b4 	movhi	r2,2054
 8028500:	10fc7815 	stw	r3,-3616(r2)
 8028504:	00000206 	br	8028510 <tse_msgdmaRx_isr+0x120>
 8028508:	008201b4 	movhi	r2,2054
 802850c:	103c7815 	stw	zero,-3616(r2)
                
            /* start new chain */            
            tse_mac_aRxRead(&tse_ptr->mi, tse_ptr->rxdesc_list[tse->rx_chain]);
 8028510:	e0bffe17 	ldw	r2,-8(fp)
 8028514:	11000104 	addi	r4,r2,4
 8028518:	008201b4 	movhi	r2,2054
 802851c:	10bc7817 	ldw	r2,-3616(r2)
 8028520:	e0fffe17 	ldw	r3,-8(fp)
 8028524:	108003c4 	addi	r2,r2,15
 8028528:	100490ba 	slli	r2,r2,2
 802852c:	1885883a 	add	r2,r3,r2
 8028530:	10800017 	ldw	r2,0(r2)
 8028534:	100b883a 	mov	r5,r2
 8028538:	801f8640 	call	801f864 <tse_mac_aRxRead>
            
            /* allocate storage for the non active chain */
            allocate_rx_descriptor_chain(tse_ptr); 
 802853c:	e13ffe17 	ldw	r4,-8(fp)
 8028540:	80288a00 	call	80288a0 <allocate_rx_descriptor_chain>
        }    
        
        /* Wake up Niche stack if there are new packets are on queue */
        if ((rcvdq.q_len) > initial_rcvdq_len) {
 8028544:	008201b4 	movhi	r2,2054
 8028548:	10bd0b17 	ldw	r2,-3028(r2)
 802854c:	e0fffd17 	ldw	r3,-12(fp)
 8028550:	1880070e 	bge	r3,r2,8028570 <tse_msgdmaRx_isr+0x180>
            SignalPktDemux();
 8028554:	d0a0a617 	ldw	r2,-32104(gp)
 8028558:	1009883a 	mov	r4,r2
 802855c:	801a9f80 	call	801a9f8 <OSSemPost>
        }       
    } /* if (no error) */
    else {  dprintf("RX ERROR\n");  }
    
}
 8028560:	00000306 	br	8028570 <tse_msgdmaRx_isr+0x180>
    else {  dprintf("RX ERROR\n");  }
 8028564:	01020174 	movhi	r4,2053
 8028568:	210b0c04 	addi	r4,r4,11312
 802856c:	8003ca80 	call	8003ca8 <puts>
}
 8028570:	0001883a 	nop
 8028574:	e037883a 	mov	sp,fp
 8028578:	dfc00117 	ldw	ra,4(sp)
 802857c:	df000017 	ldw	fp,0(sp)
 8028580:	dec00204 	addi	sp,sp,8
 8028584:	f800283a 	ret

08028588 <tse_msgdmaTx_isr>:
 * 
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 */
void tse_msgdmaTx_isr(void * context)
{
 8028588:	defffb04 	addi	sp,sp,-20
 802858c:	dfc00415 	stw	ra,16(sp)
 8028590:	df000315 	stw	fp,12(sp)
 8028594:	df000304 	addi	fp,sp,12
 8028598:	e13ffd15 	stw	r4,-12(fp)
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
 802859c:	e0bffd17 	ldw	r2,-12(fp)
 80285a0:	e0bfff15 	stw	r2,-4(fp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  msgdma_status = IORD_ALTERA_MSGDMA_CSR_STATUS(tse_ptr->mi.tx_msgdma->csr_base);
 80285a4:	e0bfff17 	ldw	r2,-4(fp)
 80285a8:	10800217 	ldw	r2,8(r2)
 80285ac:	10800317 	ldw	r2,12(r2)
 80285b0:	10800037 	ldwio	r2,0(r2)
 80285b4:	e0bffe15 	stw	r2,-8(fp)
  
  if ((msgdma_status & ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK)!=0)
 80285b8:	e0bffe17 	ldw	r2,-8(fp)
 80285bc:	1080200c 	andi	r2,r2,128
 80285c0:	10000326 	beq	r2,zero,80285d0 <tse_msgdmaTx_isr+0x48>
      dprintf("TX STOPPED\n");
 80285c4:	01020174 	movhi	r4,2053
 80285c8:	210b0f04 	addi	r4,r4,11324
 80285cc:	8003ca80 	call	8003ca8 <puts>
   
}
 80285d0:	0001883a 	nop
 80285d4:	e037883a 	mov	sp,fp
 80285d8:	dfc00117 	ldw	ra,4(sp)
 80285dc:	df000017 	ldw	fp,0(sp)
 80285e0:	dec00204 	addi	sp,sp,8
 80285e4:	f800283a 	ret

080285e8 <tse_msgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_msgdma_read_init(ins_tse_info* tse_ptr)
{     
 80285e8:	defff604 	addi	sp,sp,-40
 80285ec:	dfc00915 	stw	ra,36(sp)
 80285f0:	df000815 	stw	fp,32(sp)
 80285f4:	df000804 	addi	fp,sp,32
 80285f8:	e13ff915 	stw	r4,-28(fp)
  alt_u32 *uncached_packet_payload;
  alt_u32 control = 0;
 80285fc:	e03ffb15 	stw	zero,-20(fp)
  int desc_index;
  int chain_index;
  int rc;
  int max_transfer_size=0xffff;
 8028600:	00bfffd4 	movui	r2,65535
 8028604:	e0bffc15 	stw	r2,-16(fp)
  
  if  (tse_ptr->mi.rx_msgdma->max_byte < max_transfer_size) { max_transfer_size = tse_ptr->mi.rx_msgdma->max_byte; }
 8028608:	e0bff917 	ldw	r2,-28(fp)
 802860c:	10800317 	ldw	r2,12(r2)
 8028610:	10c01217 	ldw	r3,72(r2)
 8028614:	e0bffc17 	ldw	r2,-16(fp)
 8028618:	1880042e 	bgeu	r3,r2,802862c <tse_msgdma_read_init+0x44>
 802861c:	e0bff917 	ldw	r2,-28(fp)
 8028620:	10800317 	ldw	r2,12(r2)
 8028624:	10801217 	ldw	r2,72(r2)
 8028628:	e0bffc15 	stw	r2,-16(fp)
   
  for (chain_index=0;chain_index<2;chain_index++)
 802862c:	e03ffd15 	stw	zero,-12(fp)
 8028630:	00007f06 	br	8028830 <tse_msgdma_read_init+0x248>
  { 
    tse_ptr->rxdesc_list[chain_index] = NULL;
 8028634:	e0fff917 	ldw	r3,-28(fp)
 8028638:	e0bffd17 	ldw	r2,-12(fp)
 802863c:	108003c4 	addi	r2,r2,15
 8028640:	100490ba 	slli	r2,r2,2
 8028644:	1885883a 	add	r2,r3,r2
 8028648:	10000015 	stw	zero,0(r2)
  
    for(desc_index = 0; desc_index < ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE; desc_index++)
 802864c:	e03ffe15 	stw	zero,-8(fp)
 8028650:	00007106 	br	8028818 <tse_msgdma_read_init+0x230>
    { 
      uncached_packet_payload = NULL;
 8028654:	e03fff15 	stw	zero,-4(fp)
      
      if ((desc_index < (ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1))) {  
 8028658:	e0bffe17 	ldw	r2,-8(fp)
 802865c:	10800208 	cmpgei	r2,r2,8
 8028660:	1000321e 	bne	r2,zero,802872c <tse_msgdma_read_init+0x144>
        tse_ptr->pkt_array_rx[chain_index][desc_index] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN);
 8028664:	01017e04 	movi	r4,1528
 8028668:	802f6300 	call	802f630 <pk_alloc>
 802866c:	100b883a 	mov	r5,r2
 8028670:	e0fff917 	ldw	r3,-28(fp)
 8028674:	e0bffd17 	ldw	r2,-12(fp)
 8028678:	11000264 	muli	r4,r2,9
 802867c:	e0bffe17 	ldw	r2,-8(fp)
 8028680:	2085883a 	add	r2,r4,r2
 8028684:	10800584 	addi	r2,r2,22
 8028688:	100490ba 	slli	r2,r2,2
 802868c:	1885883a 	add	r2,r3,r2
 8028690:	11400015 	stw	r5,0(r2)
      
        if (!tse_ptr->pkt_array_rx[chain_index][desc_index])   /* couldn't get a free buffer for rx */
 8028694:	e0fff917 	ldw	r3,-28(fp)
 8028698:	e0bffd17 	ldw	r2,-12(fp)
 802869c:	11000264 	muli	r4,r2,9
 80286a0:	e0bffe17 	ldw	r2,-8(fp)
 80286a4:	2085883a 	add	r2,r4,r2
 80286a8:	10800584 	addi	r2,r2,22
 80286ac:	100490ba 	slli	r2,r2,2
 80286b0:	1885883a 	add	r2,r3,r2
 80286b4:	10800017 	ldw	r2,0(r2)
 80286b8:	10000b1e 	bne	r2,zero,80286e8 <tse_msgdma_read_init+0x100>
        {
          dprintf("[tse_msgdma_read_init] Fatal error: No free packet buffers for RX\n");
 80286bc:	01020174 	movhi	r4,2053
 80286c0:	210b1204 	addi	r4,r4,11336
 80286c4:	8003ca80 	call	8003ca8 <puts>
          tse_ptr->netp->n_mib->ifInDiscards++;
 80286c8:	e0bff917 	ldw	r2,-28(fp)
 80286cc:	10800817 	ldw	r2,32(r2)
 80286d0:	10802717 	ldw	r2,156(r2)
 80286d4:	10c00c17 	ldw	r3,48(r2)
 80286d8:	18c00044 	addi	r3,r3,1
 80286dc:	10c00c15 	stw	r3,48(r2)
        
          return ENP_NOBUFFER;
 80286e0:	00bffac4 	movi	r2,-21
 80286e4:	00006906 	br	802888c <tse_msgdma_read_init+0x2a4>
        }
      
        // ensure bit-31 of tse_ptr->pkt_array_rx[desc_index]->nb_buff is clear before passing
        // to MSGDMA Driver
        uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array_rx[chain_index][desc_index]->nb_buff, 4);
 80286e8:	e0fff917 	ldw	r3,-28(fp)
 80286ec:	e0bffd17 	ldw	r2,-12(fp)
 80286f0:	11000264 	muli	r4,r2,9
 80286f4:	e0bffe17 	ldw	r2,-8(fp)
 80286f8:	2085883a 	add	r2,r4,r2
 80286fc:	10800584 	addi	r2,r2,22
 8028700:	100490ba 	slli	r2,r2,2
 8028704:	1885883a 	add	r2,r3,r2
 8028708:	10800017 	ldw	r2,0(r2)
 802870c:	10800117 	ldw	r2,4(r2)
 8028710:	01400104 	movi	r5,4
 8028714:	1009883a 	mov	r4,r2
 8028718:	803f6680 	call	803f668 <alt_remap_cached>
 802871c:	e0bfff15 	stw	r2,-4(fp)
        alt_dcache_flush((void *) uncached_packet_payload, ALTERA_TSE_PKT_INIT_LEN);
 8028720:	01417e04 	movi	r5,1528
 8028724:	e13fff17 	ldw	r4,-4(fp)
 8028728:	803e8d40 	call	803e8d4 <alt_dcache_flush>
      }
   
      /* trigger interrupt when transfer complete */
      control =  ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK |
 802872c:	00803ff4 	movhi	r2,255
 8028730:	10940004 	addi	r2,r2,20480
 8028734:	e0bffb15 	stw	r2,-20(fp)
            ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ERROR_IRQ_MASK | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_END_ON_EOP_MASK; 
            
      rc=alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor(
 8028738:	e0bff917 	ldw	r2,-28(fp)
 802873c:	11000317 	ldw	r4,12(r2)
            tse_ptr->mi.rx_msgdma,
            (alt_msgdma_prefetcher_standard_descriptor *) &tse_ptr->rxdesc[chain_index][desc_index],  
 8028740:	e0fff917 	ldw	r3,-28(fp)
 8028744:	e0bffd17 	ldw	r2,-12(fp)
 8028748:	10800444 	addi	r2,r2,17
 802874c:	100490ba 	slli	r2,r2,2
 8028750:	1885883a 	add	r2,r3,r2
 8028754:	10c00017 	ldw	r3,0(r2)
 8028758:	e0bffe17 	ldw	r2,-8(fp)
 802875c:	1004917a 	slli	r2,r2,5
      rc=alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor(
 8028760:	1887883a 	add	r3,r3,r2
 8028764:	e17fff17 	ldw	r5,-4(fp)
 8028768:	e1bffc17 	ldw	r6,-16(fp)
 802876c:	e0bffb17 	ldw	r2,-20(fp)
 8028770:	d8800015 	stw	r2,0(sp)
 8028774:	300f883a 	mov	r7,r6
 8028778:	280d883a 	mov	r6,r5
 802877c:	180b883a 	mov	r5,r3
 8028780:	80263680 	call	8026368 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>
 8028784:	e0bffa15 	stw	r2,-24(fp)
            (alt_u32)uncached_packet_payload,   
            max_transfer_size,
            control);
      if (rc!=0) return -1;
 8028788:	e0bffa17 	ldw	r2,-24(fp)
 802878c:	10000226 	beq	r2,zero,8028798 <tse_msgdma_read_init+0x1b0>
 8028790:	00bfffc4 	movi	r2,-1
 8028794:	00003d06 	br	802888c <tse_msgdma_read_init+0x2a4>
      
      if (desc_index==0) tse_ptr->rxdesc_list[chain_index] = NULL;  
 8028798:	e0bffe17 	ldw	r2,-8(fp)
 802879c:	1000061e 	bne	r2,zero,80287b8 <tse_msgdma_read_init+0x1d0>
 80287a0:	e0fff917 	ldw	r3,-28(fp)
 80287a4:	e0bffd17 	ldw	r2,-12(fp)
 80287a8:	108003c4 	addi	r2,r2,15
 80287ac:	100490ba 	slli	r2,r2,2
 80287b0:	1885883a 	add	r2,r3,r2
 80287b4:	10000015 	stw	zero,0(r2)
            
      rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 80287b8:	e0bffd17 	ldw	r2,-12(fp)
 80287bc:	108003c4 	addi	r2,r2,15
 80287c0:	100490ba 	slli	r2,r2,2
 80287c4:	e0fff917 	ldw	r3,-28(fp)
 80287c8:	1889883a 	add	r4,r3,r2
               &tse_ptr->rxdesc_list[chain_index],
               &tse_ptr->rxdesc[chain_index][desc_index] );        
 80287cc:	e0fff917 	ldw	r3,-28(fp)
 80287d0:	e0bffd17 	ldw	r2,-12(fp)
 80287d4:	10800444 	addi	r2,r2,17
 80287d8:	100490ba 	slli	r2,r2,2
 80287dc:	1885883a 	add	r2,r3,r2
 80287e0:	10c00017 	ldw	r3,0(r2)
 80287e4:	e0bffe17 	ldw	r2,-8(fp)
 80287e8:	1004917a 	slli	r2,r2,5
      rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 80287ec:	1885883a 	add	r2,r3,r2
 80287f0:	100b883a 	mov	r5,r2
 80287f4:	80266080 	call	8026608 <alt_msgdma_prefetcher_add_standard_desc_to_list>
 80287f8:	e0bffa15 	stw	r2,-24(fp)
      if (rc!=0) return -1;
 80287fc:	e0bffa17 	ldw	r2,-24(fp)
 8028800:	10000226 	beq	r2,zero,802880c <tse_msgdma_read_init+0x224>
 8028804:	00bfffc4 	movi	r2,-1
 8028808:	00002006 	br	802888c <tse_msgdma_read_init+0x2a4>
    for(desc_index = 0; desc_index < ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE; desc_index++)
 802880c:	e0bffe17 	ldw	r2,-8(fp)
 8028810:	10800044 	addi	r2,r2,1
 8028814:	e0bffe15 	stw	r2,-8(fp)
 8028818:	e0bffe17 	ldw	r2,-8(fp)
 802881c:	10800250 	cmplti	r2,r2,9
 8028820:	103f8c1e 	bne	r2,zero,8028654 <tse_msgdma_read_init+0x6c>
  for (chain_index=0;chain_index<2;chain_index++)
 8028824:	e0bffd17 	ldw	r2,-12(fp)
 8028828:	10800044 	addi	r2,r2,1
 802882c:	e0bffd15 	stw	r2,-12(fp)
 8028830:	e0bffd17 	ldw	r2,-12(fp)
 8028834:	10800090 	cmplti	r2,r2,2
 8028838:	103f7e1e 	bne	r2,zero,8028634 <tse_msgdma_read_init+0x4c>
    }

  } 

  dprintf("[tse_msgdma_read_init] RX descriptor chain desc (%d depth) created\n",  desc_index);
 802883c:	e17ffe17 	ldw	r5,-8(fp)
 8028840:	01020174 	movhi	r4,2053
 8028844:	210b2304 	addi	r4,r4,11404
 8028848:	8003b840 	call	8003b84 <printf>
   
  tse_ptr->rx_descriptor_index=0;   //for processing completed rx descriptors
 802884c:	e0bff917 	ldw	r2,-28(fp)
 8028850:	10001415 	stw	zero,80(r2)
  tse_ptr->rx_chain=0;
 8028854:	e0bff917 	ldw	r2,-28(fp)
 8028858:	10001315 	stw	zero,76(r2)
  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->rxdesc_list[tse_ptr->rx_chain]);
 802885c:	e0bff917 	ldw	r2,-28(fp)
 8028860:	11000104 	addi	r4,r2,4
 8028864:	e0bff917 	ldw	r2,-28(fp)
 8028868:	10801317 	ldw	r2,76(r2)
 802886c:	e0fff917 	ldw	r3,-28(fp)
 8028870:	108003c4 	addi	r2,r2,15
 8028874:	100490ba 	slli	r2,r2,2
 8028878:	1885883a 	add	r2,r3,r2
 802887c:	10800017 	ldw	r2,0(r2)
 8028880:	100b883a 	mov	r5,r2
 8028884:	801f8640 	call	801f864 <tse_mac_aRxRead>
  
  return SUCCESS;
 8028888:	0005883a 	mov	r2,zero
}
 802888c:	e037883a 	mov	sp,fp
 8028890:	dfc00117 	ldw	ra,4(sp)
 8028894:	df000017 	ldw	fp,0(sp)
 8028898:	dec00204 	addi	sp,sp,8
 802889c:	f800283a 	ret

080288a0 <allocate_rx_descriptor_chain>:

/* allocate the storage for the non active rx descriptor chain 
   update the write pointers in each descriptor to point
   to the allocated storage. */
int allocate_rx_descriptor_chain(ins_tse_info* tse_ptr)
{
 80288a0:	defff904 	addi	sp,sp,-28
 80288a4:	dfc00615 	stw	ra,24(sp)
 80288a8:	df000515 	stw	fp,20(sp)
 80288ac:	df000504 	addi	fp,sp,20
 80288b0:	e13ffb15 	stw	r4,-20(fp)
    PACKET replacement_pkt;
    alt_u32 *uncached_packet_payload;
    alt_msgdma_prefetcher_standard_descriptor *rxDesc;
    int i;
    
    for (i=0;i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 80288b4:	e03fff15 	stw	zero,-4(fp)
 80288b8:	00003e06 	br	80289b4 <allocate_rx_descriptor_chain+0x114>
    {
        replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN);
 80288bc:	01017e04 	movi	r4,1528
 80288c0:	802f6300 	call	802f630 <pk_alloc>
 80288c4:	e0bffe15 	stw	r2,-8(fp)
        if (!replacement_pkt) { /* couldn't get a free buffer for rx */
 80288c8:	e0bffe17 	ldw	r2,-8(fp)
 80288cc:	1000051e 	bne	r2,zero,80288e4 <allocate_rx_descriptor_chain+0x44>
          dprintf("No free buffers for rx\n");
 80288d0:	01020174 	movhi	r4,2053
 80288d4:	210b3404 	addi	r4,r4,11472
 80288d8:	8003ca80 	call	8003ca8 <puts>
          return 1;
 80288dc:	00800044 	movi	r2,1
 80288e0:	00003806 	br	80289c4 <allocate_rx_descriptor_chain+0x124>
        }
        else
        {
            rxDesc = &tse_ptr->rxdesc[!tse_ptr->rx_chain][i];
 80288e4:	e0bffb17 	ldw	r2,-20(fp)
 80288e8:	10801317 	ldw	r2,76(r2)
 80288ec:	1005003a 	cmpeq	r2,r2,zero
 80288f0:	10803fcc 	andi	r2,r2,255
 80288f4:	e0fffb17 	ldw	r3,-20(fp)
 80288f8:	10800444 	addi	r2,r2,17
 80288fc:	100490ba 	slli	r2,r2,2
 8028900:	1885883a 	add	r2,r3,r2
 8028904:	10c00017 	ldw	r3,0(r2)
 8028908:	e0bfff17 	ldw	r2,-4(fp)
 802890c:	1004917a 	slli	r2,r2,5
 8028910:	1885883a 	add	r2,r3,r2
 8028914:	e0bffd15 	stw	r2,-12(fp)
            tse_ptr->pkt_array_rx[!tse_ptr->rx_chain][i] = replacement_pkt;
 8028918:	e0bffb17 	ldw	r2,-20(fp)
 802891c:	10801317 	ldw	r2,76(r2)
 8028920:	1005003a 	cmpeq	r2,r2,zero
 8028924:	10803fcc 	andi	r2,r2,255
 8028928:	e0fffb17 	ldw	r3,-20(fp)
 802892c:	11000264 	muli	r4,r2,9
 8028930:	e0bfff17 	ldw	r2,-4(fp)
 8028934:	2085883a 	add	r2,r4,r2
 8028938:	10800584 	addi	r2,r2,22
 802893c:	100490ba 	slli	r2,r2,2
 8028940:	1885883a 	add	r2,r3,r2
 8028944:	e0fffe17 	ldw	r3,-8(fp)
 8028948:	10c00015 	stw	r3,0(r2)
            uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array_rx[!tse_ptr->rx_chain][i]->nb_buff, 4);
 802894c:	e0bffb17 	ldw	r2,-20(fp)
 8028950:	10801317 	ldw	r2,76(r2)
 8028954:	1005003a 	cmpeq	r2,r2,zero
 8028958:	10803fcc 	andi	r2,r2,255
 802895c:	e0fffb17 	ldw	r3,-20(fp)
 8028960:	11000264 	muli	r4,r2,9
 8028964:	e0bfff17 	ldw	r2,-4(fp)
 8028968:	2085883a 	add	r2,r4,r2
 802896c:	10800584 	addi	r2,r2,22
 8028970:	100490ba 	slli	r2,r2,2
 8028974:	1885883a 	add	r2,r3,r2
 8028978:	10800017 	ldw	r2,0(r2)
 802897c:	10800117 	ldw	r2,4(r2)
 8028980:	01400104 	movi	r5,4
 8028984:	1009883a 	mov	r4,r2
 8028988:	803f6680 	call	803f668 <alt_remap_cached>
 802898c:	e0bffc15 	stw	r2,-16(fp)
            alt_dcache_flush((void *) uncached_packet_payload, ALTERA_TSE_PKT_INIT_LEN);
 8028990:	01417e04 	movi	r5,1528
 8028994:	e13ffc17 	ldw	r4,-16(fp)
 8028998:	803e8d40 	call	803e8d4 <alt_dcache_flush>
            rxDesc->write_address = (alt_u32)(uncached_packet_payload);
 802899c:	e0fffc17 	ldw	r3,-16(fp)
 80289a0:	e0bffd17 	ldw	r2,-12(fp)
 80289a4:	10c00115 	stw	r3,4(r2)
    for (i=0;i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 80289a8:	e0bfff17 	ldw	r2,-4(fp)
 80289ac:	10800044 	addi	r2,r2,1
 80289b0:	e0bfff15 	stw	r2,-4(fp)
 80289b4:	e0bfff17 	ldw	r2,-4(fp)
 80289b8:	10800210 	cmplti	r2,r2,8
 80289bc:	103fbf1e 	bne	r2,zero,80288bc <allocate_rx_descriptor_chain+0x1c>
        }
    } 
    
    return 0;
 80289c0:	0005883a 	mov	r2,zero
}
 80289c4:	e037883a 	mov	sp,fp
 80289c8:	dfc00117 	ldw	ra,4(sp)
 80289cc:	df000017 	ldw	fp,0(sp)
 80289d0:	dec00204 	addi	sp,sp,8
 80289d4:	f800283a 	ret

080289d8 <tse_mac_rcv>:
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 80289d8:	defffa04 	addi	sp,sp,-24
 80289dc:	dfc00515 	stw	ra,20(sp)
 80289e0:	df000415 	stw	fp,16(sp)
 80289e4:	df000404 	addi	fp,sp,16
 80289e8:	e13ffc15 	stw	r4,-16(fp)
    struct ethhdr * eth;
    int pklen;
    PACKET rx_packet;
        
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_32DIRECT(&tse_ptr->rxdesc[tse_ptr->rx_chain][tse_ptr->rx_descriptor_index].bytes_transfered,0) - 2;  
 80289ec:	e0bffc17 	ldw	r2,-16(fp)
 80289f0:	10801317 	ldw	r2,76(r2)
 80289f4:	e0fffc17 	ldw	r3,-16(fp)
 80289f8:	10800444 	addi	r2,r2,17
 80289fc:	100490ba 	slli	r2,r2,2
 8028a00:	1885883a 	add	r2,r3,r2
 8028a04:	10c00017 	ldw	r3,0(r2)
 8028a08:	e0bffc17 	ldw	r2,-16(fp)
 8028a0c:	10801417 	ldw	r2,80(r2)
 8028a10:	1004917a 	slli	r2,r2,5
 8028a14:	1885883a 	add	r2,r3,r2
 8028a18:	10800404 	addi	r2,r2,16
 8028a1c:	10800037 	ldwio	r2,0(r2)
 8028a20:	10bfff84 	addi	r2,r2,-2
 8028a24:	e0bfff15 	stw	r2,-4(fp)
    
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 8028a28:	e0bffc17 	ldw	r2,-16(fp)
 8028a2c:	10800817 	ldw	r2,32(r2)
 8028a30:	10802717 	ldw	r2,156(r2)
 8028a34:	11000917 	ldw	r4,36(r2)
 8028a38:	e0ffff17 	ldw	r3,-4(fp)
 8028a3c:	e0bffc17 	ldw	r2,-16(fp)
 8028a40:	10800817 	ldw	r2,32(r2)
 8028a44:	10802717 	ldw	r2,156(r2)
 8028a48:	20c7883a 	add	r3,r4,r3
 8028a4c:	10c00915 	stw	r3,36(r2)
    
    rx_packet = tse_ptr->pkt_array_rx[tse_ptr->rx_chain][tse_ptr->rx_descriptor_index];   
 8028a50:	e0bffc17 	ldw	r2,-16(fp)
 8028a54:	11001317 	ldw	r4,76(r2)
 8028a58:	e0bffc17 	ldw	r2,-16(fp)
 8028a5c:	10801417 	ldw	r2,80(r2)
 8028a60:	e0fffc17 	ldw	r3,-16(fp)
 8028a64:	21000264 	muli	r4,r4,9
 8028a68:	2085883a 	add	r2,r4,r2
 8028a6c:	10800584 	addi	r2,r2,22
 8028a70:	100490ba 	slli	r2,r2,2
 8028a74:	1885883a 	add	r2,r3,r2
 8028a78:	10800017 	ldw	r2,0(r2)
 8028a7c:	e0bffe15 	stw	r2,-8(fp)
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 8028a80:	e0bffe17 	ldw	r2,-8(fp)
 8028a84:	10800117 	ldw	r2,4(r2)
 8028a88:	10c00404 	addi	r3,r2,16
 8028a8c:	e0bffe17 	ldw	r2,-8(fp)
 8028a90:	10c00315 	stw	r3,12(r2)
    rx_packet->nb_plen = pklen - 14;
 8028a94:	e0bfff17 	ldw	r2,-4(fp)
 8028a98:	10bffc84 	addi	r2,r2,-14
 8028a9c:	1007883a 	mov	r3,r2
 8028aa0:	e0bffe17 	ldw	r2,-8(fp)
 8028aa4:	10c00415 	stw	r3,16(r2)
    rx_packet->nb_tstamp = cticks;
 8028aa8:	d0a0a317 	ldw	r2,-32116(gp)
 8028aac:	1007883a 	mov	r3,r2
 8028ab0:	e0bffe17 	ldw	r2,-8(fp)
 8028ab4:	10c00515 	stw	r3,20(r2)
    rx_packet->net = tse_ptr->netp;
 8028ab8:	e0bffc17 	ldw	r2,-16(fp)
 8028abc:	10c00817 	ldw	r3,32(r2)
 8028ac0:	e0bffe17 	ldw	r2,-8(fp)
 8028ac4:	10c00615 	stw	r3,24(r2)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
 8028ac8:	e0bffe17 	ldw	r2,-8(fp)
 8028acc:	10800117 	ldw	r2,4(r2)
 8028ad0:	10800084 	addi	r2,r2,2
 8028ad4:	e0bffd15 	stw	r2,-12(fp)
    rx_packet->type = eth->e_type;
 8028ad8:	e0bffd17 	ldw	r2,-12(fp)
 8028adc:	10c0030b 	ldhu	r3,12(r2)
 8028ae0:	e0bffe17 	ldw	r2,-8(fp)
 8028ae4:	10c0080d 	sth	r3,32(r2)
    
    putq(&rcvdq, rx_packet);
 8028ae8:	e17ffe17 	ldw	r5,-8(fp)
 8028aec:	010201b4 	movhi	r4,2054
 8028af0:	213d0904 	addi	r4,r4,-3036
 8028af4:	802fb8c0 	call	802fb8c <putq>
              
    tse_ptr->rx_descriptor_index++; 
 8028af8:	e0bffc17 	ldw	r2,-16(fp)
 8028afc:	10801417 	ldw	r2,80(r2)
 8028b00:	10c00044 	addi	r3,r2,1
 8028b04:	e0bffc17 	ldw	r2,-16(fp)
 8028b08:	10c01415 	stw	r3,80(r2)
} 
 8028b0c:	0001883a 	nop
 8028b10:	e037883a 	mov	sp,fp
 8028b14:	dfc00117 	ldw	ra,4(sp)
 8028b18:	df000017 	ldw	fp,0(sp)
 8028b1c:	dec00204 	addi	sp,sp,8
 8028b20:	f800283a 	ret

08028b24 <tse_mac_stats>:

int tse_mac_stats(void * pio, int iface)
{
 8028b24:	defffc04 	addi	sp,sp,-16
 8028b28:	dfc00315 	stw	ra,12(sp)
 8028b2c:	df000215 	stw	fp,8(sp)
 8028b30:	df000204 	addi	fp,sp,8
 8028b34:	e13fff15 	stw	r4,-4(fp)
 8028b38:	e17ffe15 	stw	r5,-8(fp)
    ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
 8028b3c:	01420174 	movhi	r5,2053
 8028b40:	294b3a04 	addi	r5,r5,11496
 8028b44:	e13fff17 	ldw	r4,-4(fp)
 8028b48:	802bfa40 	call	802bfa4 <ns_printf>
    return SUCCESS;
 8028b4c:	0005883a 	mov	r2,zero
}
 8028b50:	e037883a 	mov	sp,fp
 8028b54:	dfc00117 	ldw	ra,4(sp)
 8028b58:	df000017 	ldw	fp,0(sp)
 8028b5c:	dec00204 	addi	sp,sp,8
 8028b60:	f800283a 	ret

08028b64 <tse_mac_close>:
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 8028b64:	defffc04 	addi	sp,sp,-16
 8028b68:	dfc00315 	stw	ra,12(sp)
 8028b6c:	df000215 	stw	fp,8(sp)
 8028b70:	df000204 	addi	fp,sp,8
 8028b74:	e13ffe15 	stw	r4,-8(fp)
    int state;
     
    /* status = down */
    nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 8028b78:	e0bffe17 	ldw	r2,-8(fp)
 8028b7c:	100690ba 	slli	r3,r2,2
 8028b80:	008201b4 	movhi	r2,2054
 8028b84:	1885883a 	add	r2,r3,r2
 8028b88:	10bdce17 	ldw	r2,-2248(r2)
 8028b8c:	10802717 	ldw	r2,156(r2)
 8028b90:	00c00084 	movi	r3,2
 8028b94:	10c00615 	stw	r3,24(r2)
    
    /* disable the interrupt in the OS*/
    alt_msgdma_register_callback(tse[iface].mi.rx_msgdma, 0, 0, 0);
 8028b98:	e0bffe17 	ldw	r2,-8(fp)
 8028b9c:	10c02924 	muli	r3,r2,164
 8028ba0:	008201b4 	movhi	r2,2054
 8028ba4:	1885883a 	add	r2,r3,r2
 8028ba8:	10bc6817 	ldw	r2,-3680(r2)
 8028bac:	000f883a 	mov	r7,zero
 8028bb0:	000d883a 	mov	r6,zero
 8028bb4:	000b883a 	mov	r5,zero
 8028bb8:	1009883a 	mov	r4,r2
 8028bbc:	80271640 	call	8027164 <alt_msgdma_register_callback>
     
    /* Disable Receive path on the device*/
    state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 8028bc0:	e0bffe17 	ldw	r2,-8(fp)
 8028bc4:	10c02924 	muli	r3,r2,164
 8028bc8:	008201b4 	movhi	r2,2054
 8028bcc:	1885883a 	add	r2,r3,r2
 8028bd0:	10bc6617 	ldw	r2,-3688(r2)
 8028bd4:	10800204 	addi	r2,r2,8
 8028bd8:	10800037 	ldwio	r2,0(r2)
 8028bdc:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
 8028be0:	e0bffe17 	ldw	r2,-8(fp)
 8028be4:	10c02924 	muli	r3,r2,164
 8028be8:	008201b4 	movhi	r2,2054
 8028bec:	1885883a 	add	r2,r3,r2
 8028bf0:	10bc6617 	ldw	r2,-3688(r2)
 8028bf4:	10800204 	addi	r2,r2,8
 8028bf8:	e13fff17 	ldw	r4,-4(fp)
 8028bfc:	00ffff44 	movi	r3,-3
 8028c00:	20c6703a 	and	r3,r4,r3
 8028c04:	10c00035 	stwio	r3,0(r2)
    
    /* status = down */                                     
    nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
 8028c08:	e0bffe17 	ldw	r2,-8(fp)
 8028c0c:	100690ba 	slli	r3,r2,2
 8028c10:	008201b4 	movhi	r2,2054
 8028c14:	1885883a 	add	r2,r3,r2
 8028c18:	10bdce17 	ldw	r2,-2248(r2)
 8028c1c:	10802717 	ldw	r2,156(r2)
 8028c20:	00c00084 	movi	r3,2
 8028c24:	10c00715 	stw	r3,28(r2)
    
    return SUCCESS;
 8028c28:	0005883a 	mov	r2,zero
}
 8028c2c:	e037883a 	mov	sp,fp
 8028c30:	dfc00117 	ldw	ra,4(sp)
 8028c34:	df000017 	ldw	fp,0(sp)
 8028c38:	dec00204 	addi	sp,sp,8
 8028c3c:	f800283a 	ret

08028c40 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 8028c40:	defffd04 	addi	sp,sp,-12
 8028c44:	dfc00215 	stw	ra,8(sp)
 8028c48:	df000115 	stw	fp,4(sp)
 8028c4c:	df000104 	addi	fp,sp,4
 8028c50:	e13fff15 	stw	r4,-4(fp)
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
 8028c54:	e0bfff17 	ldw	r2,-4(fp)
 8028c58:	10800808 	cmpgei	r2,r2,32
 8028c5c:	1000031e 	bne	r2,zero,8028c6c <close+0x2c>
 8028c60:	e13fff17 	ldw	r4,-4(fp)
 8028c64:	803e8040 	call	803e804 <alt_close>
 8028c68:	00000206 	br	8028c74 <close+0x34>
 8028c6c:	e13fff17 	ldw	r4,-4(fp)
 8028c70:	80343640 	call	8034364 <t_socketclose>
}
 8028c74:	e037883a 	mov	sp,fp
 8028c78:	dfc00117 	ldw	ra,4(sp)
 8028c7c:	df000017 	ldw	fp,0(sp)
 8028c80:	dec00204 	addi	sp,sp,8
 8028c84:	f800283a 	ret

08028c88 <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 8028c88:	defff504 	addi	sp,sp,-44
 8028c8c:	dfc00a15 	stw	ra,40(sp)
 8028c90:	df000915 	stw	fp,36(sp)
 8028c94:	df000904 	addi	fp,sp,36
 8028c98:	e13ff815 	stw	r4,-32(fp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
 8028c9c:	d0a02a17 	ldw	r2,-32600(gp)
 8028ca0:	e0bfff15 	stw	r2,-4(fp)
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
 8028ca4:	d0a02a04 	addi	r2,gp,-32600
 8028ca8:	e0bffe15 	stw	r2,-8(fp)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 8028cac:	00003d06 	br	8028da4 <iniche_devices_init+0x11c>
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
 8028cb0:	e0bfff17 	ldw	r2,-4(fp)
 8028cb4:	e0ffff17 	ldw	r3,-4(fp)
 8028cb8:	10c00415 	stw	r3,16(r2)
        p_dev->if_num = if_count;
 8028cbc:	e0bfff17 	ldw	r2,-4(fp)
 8028cc0:	e0fff817 	ldw	r3,-32(fp)
 8028cc4:	10c00515 	stw	r3,20(r2)
        p_dev->p_net = nets[p_dev->if_num];
 8028cc8:	e0bfff17 	ldw	r2,-4(fp)
 8028ccc:	10800517 	ldw	r2,20(r2)
 8028cd0:	100690ba 	slli	r3,r2,2
 8028cd4:	008201b4 	movhi	r2,2054
 8028cd8:	1885883a 	add	r2,r3,r2
 8028cdc:	10fdce17 	ldw	r3,-2248(r2)
 8028ce0:	e0bfff17 	ldw	r2,-4(fp)
 8028ce4:	10c00615 	stw	r3,24(r2)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 8028ce8:	e0bfff17 	ldw	r2,-4(fp)
 8028cec:	10800317 	ldw	r2,12(r2)
 8028cf0:	e13fff17 	ldw	r4,-4(fp)
 8028cf4:	103ee83a 	callr	r2

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
 8028cf8:	e0bfff17 	ldw	r2,-4(fp)
 8028cfc:	10800617 	ldw	r2,24(r2)
 8028d00:	e0bffd15 	stw	r2,-12(fp)
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
 8028d04:	e17ffa04 	addi	r5,fp,-24
 8028d08:	e13ffb04 	addi	r4,fp,-20
 8028d0c:	e0fffc04 	addi	r3,fp,-16
 8028d10:	e0bff904 	addi	r2,fp,-28
 8028d14:	d8800015 	stw	r2,0(sp)
 8028d18:	280f883a 	mov	r7,r5
 8028d1c:	200d883a 	mov	r6,r4
 8028d20:	180b883a 	mov	r5,r3
 8028d24:	e13fff17 	ldw	r4,-4(fp)
 8028d28:	8002f5c0 	call	8002f5c <get_ip_addr>
 8028d2c:	10001726 	beq	r2,zero,8028d8c <iniche_devices_init+0x104>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
 8028d30:	e0bff917 	ldw	r2,-28(fp)
 8028d34:	10000526 	beq	r2,zero,8028d4c <iniche_devices_init+0xc4>
                p_net->n_flags |= NF_DHCPC;
 8028d38:	e0bffd17 	ldw	r2,-12(fp)
 8028d3c:	10802a17 	ldw	r2,168(r2)
 8028d40:	10c04014 	ori	r3,r2,256
 8028d44:	e0bffd17 	ldw	r2,-12(fp)
 8028d48:	10c02a15 	stw	r3,168(r2)
            }
#endif
            p_net->n_ipaddr = ipaddr;
 8028d4c:	e0fffc17 	ldw	r3,-16(fp)
 8028d50:	e0bffd17 	ldw	r2,-12(fp)
 8028d54:	10c00a15 	stw	r3,40(r2)
            p_net->snmask = netmask;
 8028d58:	e0fffb17 	ldw	r3,-20(fp)
 8028d5c:	e0bffd17 	ldw	r2,-12(fp)
 8028d60:	10c00c15 	stw	r3,48(r2)
            p_net->n_defgw = gw;
 8028d64:	e0fffa17 	ldw	r3,-24(fp)
 8028d68:	e0bffd17 	ldw	r2,-12(fp)
 8028d6c:	10c00d15 	stw	r3,52(r2)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
 8028d70:	e0fffd17 	ldw	r3,-12(fp)
 8028d74:	00820134 	movhi	r2,2052
 8028d78:	10808904 	addi	r2,r2,548
 8028d7c:	18802b15 	stw	r2,172(r3)
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
 8028d80:	e0bffd17 	ldw	r2,-12(fp)
 8028d84:	00c00084 	movi	r3,2
 8028d88:	10c02f05 	stb	r3,188(r2)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
 8028d8c:	e0bff817 	ldw	r2,-32(fp)
 8028d90:	10800044 	addi	r2,r2,1
 8028d94:	e0bff815 	stw	r2,-32(fp)
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
 8028d98:	e0bfff17 	ldw	r2,-4(fp)
 8028d9c:	10800017 	ldw	r2,0(r2)
 8028da0:	e0bfff15 	stw	r2,-4(fp)
    while (p_dev != p_dev_list_end)
 8028da4:	e0ffff17 	ldw	r3,-4(fp)
 8028da8:	e0bffe17 	ldw	r2,-8(fp)
 8028dac:	18bfc01e 	bne	r3,r2,8028cb0 <iniche_devices_init+0x28>
    }

    return (if_count);
 8028db0:	e0bff817 	ldw	r2,-32(fp)
}
 8028db4:	e037883a 	mov	sp,fp
 8028db8:	dfc00117 	ldw	ra,4(sp)
 8028dbc:	df000017 	ldw	fp,0(sp)
 8028dc0:	dec00204 	addi	sp,sp,8
 8028dc4:	f800283a 	ret

08028dc8 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 8028dc8:	defff904 	addi	sp,sp,-28
 8028dcc:	dfc00615 	stw	ra,24(sp)
 8028dd0:	df000515 	stw	fp,20(sp)
 8028dd4:	df000504 	addi	fp,sp,20
 8028dd8:	e13fff15 	stw	r4,-4(fp)
 8028ddc:	e17ffe15 	stw	r5,-8(fp)
 8028de0:	e1bffd15 	stw	r6,-12(fp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
 8028de4:	e0bfff17 	ldw	r2,-4(fp)
 8028de8:	10800808 	cmpgei	r2,r2,32
 8028dec:	1000051e 	bne	r2,zero,8028e04 <read+0x3c>
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 8028df0:	e1bffd17 	ldw	r6,-12(fp)
 8028df4:	e17ffe17 	ldw	r5,-8(fp)
 8028df8:	e13fff17 	ldw	r4,-4(fp)
 8028dfc:	803f5140 	call	803f514 <alt_read>
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
 8028e00:	00000806 	br	8028e24 <read+0x5c>
 8028e04:	e0bffd17 	ldw	r2,-12(fp)
 8028e08:	d8000115 	stw	zero,4(sp)
 8028e0c:	d8000015 	stw	zero,0(sp)
 8028e10:	000f883a 	mov	r7,zero
 8028e14:	100d883a 	mov	r6,r2
 8028e18:	e17ffe17 	ldw	r5,-8(fp)
 8028e1c:	e13fff17 	ldw	r4,-4(fp)
 8028e20:	802b5400 	call	802b540 <bsd_recvfrom>
}
 8028e24:	e037883a 	mov	sp,fp
 8028e28:	dfc00117 	ldw	ra,4(sp)
 8028e2c:	df000017 	ldw	fp,0(sp)
 8028e30:	dec00204 	addi	sp,sp,8
 8028e34:	f800283a 	ret

08028e38 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 8028e38:	defffb04 	addi	sp,sp,-20
 8028e3c:	dfc00415 	stw	ra,16(sp)
 8028e40:	df000315 	stw	fp,12(sp)
 8028e44:	df000304 	addi	fp,sp,12
 8028e48:	e13fff15 	stw	r4,-4(fp)
 8028e4c:	e17ffe15 	stw	r5,-8(fp)
 8028e50:	e1bffd15 	stw	r6,-12(fp)
  if (fd < ALT_MAX_FD)
 8028e54:	e0bfff17 	ldw	r2,-4(fp)
 8028e58:	10800808 	cmpgei	r2,r2,32
 8028e5c:	1000051e 	bne	r2,zero,8028e74 <write+0x3c>
  {
    return alt_write (fd, ptr, len);
 8028e60:	e1bffd17 	ldw	r6,-12(fp)
 8028e64:	e17ffe17 	ldw	r5,-8(fp)
 8028e68:	e13fff17 	ldw	r4,-4(fp)
 8028e6c:	803fa540 	call	803fa54 <alt_write>
 8028e70:	00000606 	br	8028e8c <write+0x54>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
 8028e74:	e0bffd17 	ldw	r2,-12(fp)
 8028e78:	000f883a 	mov	r7,zero
 8028e7c:	100d883a 	mov	r6,r2
 8028e80:	e17ffe17 	ldw	r5,-8(fp)
 8028e84:	e13fff17 	ldw	r4,-4(fp)
 8028e88:	80340900 	call	8034090 <t_send>
  }  
}
 8028e8c:	e037883a 	mov	sp,fp
 8028e90:	dfc00117 	ldw	ra,4(sp)
 8028e94:	df000017 	ldw	fp,0(sp)
 8028e98:	dec00204 	addi	sp,sp,8
 8028e9c:	f800283a 	ret

08028ea0 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
 8028ea0:	defffc04 	addi	sp,sp,-16
 8028ea4:	dfc00315 	stw	ra,12(sp)
 8028ea8:	df000215 	stw	fp,8(sp)
 8028eac:	df000204 	addi	fp,sp,8
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 8028eb0:	e03fff15 	stw	zero,-4(fp)
 8028eb4:	00003c06 	br	8028fa8 <Netinit+0x108>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
 8028eb8:	e0bfff17 	ldw	r2,-4(fp)
 8028ebc:	100690ba 	slli	r3,r2,2
 8028ec0:	008201b4 	movhi	r2,2054
 8028ec4:	1885883a 	add	r2,r3,r2
 8028ec8:	10bdce17 	ldw	r2,-2248(r2)
 8028ecc:	10802717 	ldw	r2,156(r2)
 8028ed0:	10800217 	ldw	r2,8(r2)
 8028ed4:	10800198 	cmpnei	r2,r2,6
 8028ed8:	10001c1e 	bne	r2,zero,8028f4c <Netinit+0xac>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
 8028edc:	e0bfff17 	ldw	r2,-4(fp)
 8028ee0:	100690ba 	slli	r3,r2,2
 8028ee4:	008201b4 	movhi	r2,2054
 8028ee8:	1885883a 	add	r2,r3,r2
 8028eec:	10bdce17 	ldw	r2,-2248(r2)
 8028ef0:	10800917 	ldw	r2,36(r2)
 8028ef4:	1000071e 	bne	r2,zero,8028f14 <Netinit+0x74>
            nets[i]->n_mtu = 1514;
 8028ef8:	e0bfff17 	ldw	r2,-4(fp)
 8028efc:	100690ba 	slli	r3,r2,2
 8028f00:	008201b4 	movhi	r2,2054
 8028f04:	1885883a 	add	r2,r3,r2
 8028f08:	10bdce17 	ldw	r2,-2248(r2)
 8028f0c:	00c17a84 	movi	r3,1514
 8028f10:	10c00915 	stw	r3,36(r2)

         if (nets[i]->n_lnh == 0)
 8028f14:	e0bfff17 	ldw	r2,-4(fp)
 8028f18:	100690ba 	slli	r3,r2,2
 8028f1c:	008201b4 	movhi	r2,2054
 8028f20:	1885883a 	add	r2,r3,r2
 8028f24:	10bdce17 	ldw	r2,-2248(r2)
 8028f28:	10800817 	ldw	r2,32(r2)
 8028f2c:	1000071e 	bne	r2,zero,8028f4c <Netinit+0xac>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
 8028f30:	e0bfff17 	ldw	r2,-4(fp)
 8028f34:	100690ba 	slli	r3,r2,2
 8028f38:	008201b4 	movhi	r2,2054
 8028f3c:	1885883a 	add	r2,r3,r2
 8028f40:	10bdce17 	ldw	r2,-2248(r2)
 8028f44:	00c00404 	movi	r3,16
 8028f48:	10c00815 	stw	r3,32(r2)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
 8028f4c:	e0bfff17 	ldw	r2,-4(fp)
 8028f50:	100690ba 	slli	r3,r2,2
 8028f54:	008201b4 	movhi	r2,2054
 8028f58:	1885883a 	add	r2,r3,r2
 8028f5c:	10bdce17 	ldw	r2,-2248(r2)
 8028f60:	10800817 	ldw	r2,32(r2)
 8028f64:	d0e07c17 	ldw	r3,-32272(gp)
 8028f68:	10c0010e 	bge	r2,r3,8028f70 <Netinit+0xd0>
 8028f6c:	1805883a 	mov	r2,r3
 8028f70:	d0a07c15 	stw	r2,-32272(gp)
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
 8028f74:	e0bfff17 	ldw	r2,-4(fp)
 8028f78:	100690ba 	slli	r3,r2,2
 8028f7c:	008201b4 	movhi	r2,2054
 8028f80:	1885883a 	add	r2,r3,r2
 8028f84:	10bdce17 	ldw	r2,-2248(r2)
 8028f88:	10800917 	ldw	r2,36(r2)
 8028f8c:	d0e07d17 	ldw	r3,-32268(gp)
 8028f90:	10c0010e 	bge	r2,r3,8028f98 <Netinit+0xf8>
 8028f94:	1805883a 	mov	r2,r3
 8028f98:	d0a07d15 	stw	r2,-32268(gp)
   for (i = 0; i < (int)ifNumber; i++)
 8028f9c:	e0bfff17 	ldw	r2,-4(fp)
 8028fa0:	10800044 	addi	r2,r2,1
 8028fa4:	e0bfff15 	stw	r2,-4(fp)
 8028fa8:	d0a07f17 	ldw	r2,-32260(gp)
 8028fac:	1007883a 	mov	r3,r2
 8028fb0:	e0bfff17 	ldw	r2,-4(fp)
 8028fb4:	10ffc016 	blt	r2,r3,8028eb8 <Netinit+0x18>
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
 8028fb8:	008201b4 	movhi	r2,2054
 8028fbc:	103d0a15 	stw	zero,-3032(r2)
 8028fc0:	008201b4 	movhi	r2,2054
 8028fc4:	10fd0a17 	ldw	r3,-3032(r2)
 8028fc8:	008201b4 	movhi	r2,2054
 8028fcc:	10fd0915 	stw	r3,-3036(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
 8028fd0:	008201b4 	movhi	r2,2054
 8028fd4:	103d0b15 	stw	zero,-3028(r2)
 8028fd8:	008201b4 	movhi	r2,2054
 8028fdc:	10fd0b17 	ldw	r3,-3028(r2)
 8028fe0:	008201b4 	movhi	r2,2054
 8028fe4:	10fd0d15 	stw	r3,-3020(r2)
 8028fe8:	008201b4 	movhi	r2,2054
 8028fec:	10fd0d17 	ldw	r3,-3020(r2)
 8028ff0:	008201b4 	movhi	r2,2054
 8028ff4:	10fd0c15 	stw	r3,-3024(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8028ff8:	01000084 	movi	r4,2
 8028ffc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   e = pk_init();
 8029000:	802f3a40 	call	802f3a4 <pk_init>
 8029004:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029008:	01000084 	movi	r4,2
 802900c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
 8029010:	e0bffe17 	ldw	r2,-8(fp)
 8029014:	10000226 	beq	r2,zero,8029020 <Netinit+0x180>
      return e;
 8029018:	e0bffe17 	ldw	r2,-8(fp)
 802901c:	0000cf06 	br	802935c <Netinit+0x4bc>

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
 8029020:	010200f4 	movhi	r4,2051
 8029024:	21252804 	addi	r4,r4,-27488
 8029028:	8029da80 	call	8029da8 <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 802902c:	e03fff15 	stw	zero,-4(fp)
 8029030:	0000c506 	br	8029348 <Netinit+0x4a8>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
 8029034:	e0bfff17 	ldw	r2,-4(fp)
 8029038:	100690ba 	slli	r3,r2,2
 802903c:	008201b4 	movhi	r2,2054
 8029040:	1885883a 	add	r2,r3,r2
 8029044:	10bdce17 	ldw	r2,-2248(r2)
 8029048:	10800217 	ldw	r2,8(r2)
 802904c:	10007726 	beq	r2,zero,802922c <Netinit+0x38c>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
 8029050:	e0bfff17 	ldw	r2,-4(fp)
 8029054:	100690ba 	slli	r3,r2,2
 8029058:	008201b4 	movhi	r2,2054
 802905c:	1885883a 	add	r2,r3,r2
 8029060:	10bdce17 	ldw	r2,-2248(r2)
 8029064:	10800217 	ldw	r2,8(r2)
 8029068:	e13fff17 	ldw	r4,-4(fp)
 802906c:	103ee83a 	callr	r2
 8029070:	e0bffe15 	stw	r2,-8(fp)
 8029074:	e0bffe17 	ldw	r2,-8(fp)
 8029078:	10000e26 	beq	r2,zero,80290b4 <Netinit+0x214>
         {
            dprintf("init error %d on net[%d]\n", e, i);
 802907c:	e1bfff17 	ldw	r6,-4(fp)
 8029080:	e17ffe17 	ldw	r5,-8(fp)
 8029084:	01020174 	movhi	r4,2053
 8029088:	210b4604 	addi	r4,r4,11544
 802908c:	8003b840 	call	8003b84 <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
 8029090:	e0bfff17 	ldw	r2,-4(fp)
 8029094:	100690ba 	slli	r3,r2,2
 8029098:	008201b4 	movhi	r2,2054
 802909c:	1885883a 	add	r2,r3,r2
 80290a0:	10bdce17 	ldw	r2,-2248(r2)
 80290a4:	10802717 	ldw	r2,156(r2)
 80290a8:	00c00084 	movi	r3,2
 80290ac:	10c00715 	stw	r3,28(r2)
            continue;   /* ignore ifaces which fail */
 80290b0:	0000a206 	br	802933c <Netinit+0x49c>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
 80290b4:	e0bfff17 	ldw	r2,-4(fp)
 80290b8:	100690ba 	slli	r3,r2,2
 80290bc:	008201b4 	movhi	r2,2054
 80290c0:	1885883a 	add	r2,r3,r2
 80290c4:	10bdce17 	ldw	r2,-2248(r2)
 80290c8:	10802717 	ldw	r2,156(r2)
 80290cc:	10800217 	ldw	r2,8(r2)
 80290d0:	10800198 	cmpnei	r2,r2,6
 80290d4:	10000d1e 	bne	r2,zero,802910c <Netinit+0x26c>
            nets[i]->n_flags |= NF_BCAST;
 80290d8:	e0bfff17 	ldw	r2,-4(fp)
 80290dc:	100690ba 	slli	r3,r2,2
 80290e0:	008201b4 	movhi	r2,2054
 80290e4:	1885883a 	add	r2,r3,r2
 80290e8:	10bdce17 	ldw	r2,-2248(r2)
 80290ec:	10c02a17 	ldw	r3,168(r2)
 80290f0:	e0bfff17 	ldw	r2,-4(fp)
 80290f4:	100890ba 	slli	r4,r2,2
 80290f8:	008201b4 	movhi	r2,2054
 80290fc:	2085883a 	add	r2,r4,r2
 8029100:	10bdce17 	ldw	r2,-2248(r2)
 8029104:	18c00054 	ori	r3,r3,1
 8029108:	10c02a15 	stw	r3,168(r2)

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
 802910c:	e0bfff17 	ldw	r2,-4(fp)
 8029110:	100690ba 	slli	r3,r2,2
 8029114:	008201b4 	movhi	r2,2054
 8029118:	1885883a 	add	r2,r3,r2
 802911c:	10bdce17 	ldw	r2,-2248(r2)
 8029120:	10802717 	ldw	r2,156(r2)
 8029124:	00c00044 	movi	r3,1
 8029128:	10c00615 	stw	r3,24(r2)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
 802912c:	e0bfff17 	ldw	r2,-4(fp)
 8029130:	100690ba 	slli	r3,r2,2
 8029134:	008201b4 	movhi	r2,2054
 8029138:	1885883a 	add	r2,r3,r2
 802913c:	10bdce17 	ldw	r2,-2248(r2)
 8029140:	10800103 	ldbu	r2,4(r2)
 8029144:	10803fcc 	andi	r2,r2,255
 8029148:	1080201c 	xori	r2,r2,128
 802914c:	10bfe004 	addi	r2,r2,-128
 8029150:	1000361e 	bne	r2,zero,802922c <Netinit+0x38c>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
 8029154:	e0bfff17 	ldw	r2,-4(fp)
 8029158:	100690ba 	slli	r3,r2,2
 802915c:	008201b4 	movhi	r2,2054
 8029160:	1885883a 	add	r2,r3,r2
 8029164:	10bdce17 	ldw	r2,-2248(r2)
 8029168:	10802717 	ldw	r2,156(r2)
 802916c:	10800217 	ldw	r2,8(r2)
 8029170:	10800198 	cmpnei	r2,r2,6
 8029174:	10000f1e 	bne	r2,zero,80291b4 <Netinit+0x314>
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
 8029178:	e0bfff17 	ldw	r2,-4(fp)
 802917c:	100690ba 	slli	r3,r2,2
 8029180:	008201b4 	movhi	r2,2054
 8029184:	1885883a 	add	r2,r3,r2
 8029188:	10bdce17 	ldw	r2,-2248(r2)
 802918c:	00c01944 	movi	r3,101
 8029190:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 't';
 8029194:	e0bfff17 	ldw	r2,-4(fp)
 8029198:	100690ba 	slli	r3,r2,2
 802919c:	008201b4 	movhi	r2,2054
 80291a0:	1885883a 	add	r2,r3,r2
 80291a4:	10bdce17 	ldw	r2,-2248(r2)
 80291a8:	00c01d04 	movi	r3,116
 80291ac:	10c00145 	stb	r3,5(r2)
 80291b0:	00000e06 	br	80291ec <Netinit+0x34c>
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
 80291b4:	e0bfff17 	ldw	r2,-4(fp)
 80291b8:	100690ba 	slli	r3,r2,2
 80291bc:	008201b4 	movhi	r2,2054
 80291c0:	1885883a 	add	r2,r3,r2
 80291c4:	10bdce17 	ldw	r2,-2248(r2)
 80291c8:	00c01a44 	movi	r3,105
 80291cc:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 'f';
 80291d0:	e0bfff17 	ldw	r2,-4(fp)
 80291d4:	100690ba 	slli	r3,r2,2
 80291d8:	008201b4 	movhi	r2,2054
 80291dc:	1885883a 	add	r2,r3,r2
 80291e0:	10bdce17 	ldw	r2,-2248(r2)
 80291e4:	00c01984 	movi	r3,102
 80291e8:	10c00145 	stb	r3,5(r2)
            }
            nets[i]->name[2] = (char)(i + '1');
 80291ec:	e0bfff17 	ldw	r2,-4(fp)
 80291f0:	10800c44 	addi	r2,r2,49
 80291f4:	1009883a 	mov	r4,r2
 80291f8:	e0bfff17 	ldw	r2,-4(fp)
 80291fc:	100690ba 	slli	r3,r2,2
 8029200:	008201b4 	movhi	r2,2054
 8029204:	1885883a 	add	r2,r3,r2
 8029208:	10bdce17 	ldw	r2,-2248(r2)
 802920c:	2007883a 	mov	r3,r4
 8029210:	10c00185 	stb	r3,6(r2)
            nets[i]->name[3] = '\0';
 8029214:	e0bfff17 	ldw	r2,-4(fp)
 8029218:	100690ba 	slli	r3,r2,2
 802921c:	008201b4 	movhi	r2,2054
 8029220:	1885883a 	add	r2,r3,r2
 8029224:	10bdce17 	ldw	r2,-2248(r2)
 8029228:	100001c5 	stb	zero,7(r2)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
 802922c:	e13fff17 	ldw	r4,-4(fp)
 8029230:	80293700 	call	8029370 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
 8029234:	e0bfff17 	ldw	r2,-4(fp)
 8029238:	100690ba 	slli	r3,r2,2
 802923c:	008201b4 	movhi	r2,2054
 8029240:	1885883a 	add	r2,r3,r2
 8029244:	10bdce17 	ldw	r2,-2248(r2)
 8029248:	10800a17 	ldw	r2,40(r2)
 802924c:	10003b26 	beq	r2,zero,802933c <Netinit+0x49c>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 8029250:	e0bfff17 	ldw	r2,-4(fp)
 8029254:	100690ba 	slli	r3,r2,2
 8029258:	008201b4 	movhi	r2,2054
 802925c:	1885883a 	add	r2,r3,r2
 8029260:	10bdce17 	ldw	r2,-2248(r2)
 8029264:	11000a17 	ldw	r4,40(r2)
 8029268:	e0bfff17 	ldw	r2,-4(fp)
 802926c:	100690ba 	slli	r3,r2,2
 8029270:	008201b4 	movhi	r2,2054
 8029274:	1885883a 	add	r2,r3,r2
 8029278:	10bdce17 	ldw	r2,-2248(r2)
 802927c:	10800c17 	ldw	r2,48(r2)
 8029280:	0086303a 	nor	r3,zero,r2
 8029284:	e0bfff17 	ldw	r2,-4(fp)
 8029288:	100a90ba 	slli	r5,r2,2
 802928c:	008201b4 	movhi	r2,2054
 8029290:	2885883a 	add	r2,r5,r2
 8029294:	10bdce17 	ldw	r2,-2248(r2)
 8029298:	20c6b03a 	or	r3,r4,r3
 802929c:	10c00e15 	stw	r3,56(r2)
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
 80292a0:	e0bfff17 	ldw	r2,-4(fp)
 80292a4:	100690ba 	slli	r3,r2,2
 80292a8:	008201b4 	movhi	r2,2054
 80292ac:	1885883a 	add	r2,r3,r2
 80292b0:	10bdce17 	ldw	r2,-2248(r2)
 80292b4:	11000a17 	ldw	r4,40(r2)
 80292b8:	e0bfff17 	ldw	r2,-4(fp)
 80292bc:	100690ba 	slli	r3,r2,2
 80292c0:	008201b4 	movhi	r2,2054
 80292c4:	1885883a 	add	r2,r3,r2
 80292c8:	10bdce17 	ldw	r2,-2248(r2)
 80292cc:	10c00c17 	ldw	r3,48(r2)
 80292d0:	e0bfff17 	ldw	r2,-4(fp)
 80292d4:	100a90ba 	slli	r5,r2,2
 80292d8:	008201b4 	movhi	r2,2054
 80292dc:	2885883a 	add	r2,r5,r2
 80292e0:	10bdce17 	ldw	r2,-2248(r2)
 80292e4:	20c6703a 	and	r3,r4,r3
 80292e8:	10c00f15 	stw	r3,60(r2)
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 80292ec:	e0bfff17 	ldw	r2,-4(fp)
 80292f0:	100690ba 	slli	r3,r2,2
 80292f4:	008201b4 	movhi	r2,2054
 80292f8:	1885883a 	add	r2,r3,r2
 80292fc:	10bdce17 	ldw	r2,-2248(r2)
 8029300:	11000a17 	ldw	r4,40(r2)
 8029304:	e0bfff17 	ldw	r2,-4(fp)
 8029308:	100690ba 	slli	r3,r2,2
 802930c:	008201b4 	movhi	r2,2054
 8029310:	1885883a 	add	r2,r3,r2
 8029314:	10bdce17 	ldw	r2,-2248(r2)
 8029318:	10800c17 	ldw	r2,48(r2)
 802931c:	0086303a 	nor	r3,zero,r2
 8029320:	e0bfff17 	ldw	r2,-4(fp)
 8029324:	100a90ba 	slli	r5,r2,2
 8029328:	008201b4 	movhi	r2,2054
 802932c:	2885883a 	add	r2,r5,r2
 8029330:	10bdce17 	ldw	r2,-2248(r2)
 8029334:	20c6b03a 	or	r3,r4,r3
 8029338:	10c01015 	stw	r3,64(r2)
   for (i = 0; i < (int)ifNumber; i++)
 802933c:	e0bfff17 	ldw	r2,-4(fp)
 8029340:	10800044 	addi	r2,r2,1
 8029344:	e0bfff15 	stw	r2,-4(fp)
 8029348:	d0a07f17 	ldw	r2,-32260(gp)
 802934c:	1007883a 	mov	r3,r2
 8029350:	e0bfff17 	ldw	r2,-4(fp)
 8029354:	10ff3716 	blt	r2,r3,8029034 <Netinit+0x194>
#if defined(DYNAMIC_IFACES) && defined(IN_MENUS)
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
 8029358:	0005883a 	mov	r2,zero
}
 802935c:	e037883a 	mov	sp,fp
 8029360:	dfc00117 	ldw	ra,4(sp)
 8029364:	df000017 	ldw	fp,0(sp)
 8029368:	dec00204 	addi	sp,sp,8
 802936c:	f800283a 	ret

08029370 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 8029370:	defffc04 	addi	sp,sp,-16
 8029374:	dfc00315 	stw	ra,12(sp)
 8029378:	df000215 	stw	fp,8(sp)
 802937c:	df000204 	addi	fp,sp,8
 8029380:	e13ffe15 	stw	r4,-8(fp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 8029384:	e0bffe17 	ldw	r2,-8(fp)
 8029388:	100690ba 	slli	r3,r2,2
 802938c:	008201b4 	movhi	r2,2054
 8029390:	1885883a 	add	r2,r3,r2
 8029394:	10bdce17 	ldw	r2,-2248(r2)
 8029398:	10800c17 	ldw	r2,48(r2)
 802939c:	10003a1e 	bne	r2,zero,8029488 <fixup_subnet_mask+0x118>
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
 80293a0:	e0bffe17 	ldw	r2,-8(fp)
 80293a4:	100690ba 	slli	r3,r2,2
 80293a8:	008201b4 	movhi	r2,2054
 80293ac:	1885883a 	add	r2,r3,r2
 80293b0:	10bdce17 	ldw	r2,-2248(r2)
 80293b4:	10800a17 	ldw	r2,40(r2)
 80293b8:	1080200c 	andi	r2,r2,128
 80293bc:	1000031e 	bne	r2,zero,80293cc <fixup_subnet_mask+0x5c>
      smask = 0xFF000000L;
 80293c0:	00bfc034 	movhi	r2,65280
 80293c4:	e0bfff15 	stw	r2,-4(fp)
 80293c8:	00001b06 	br	8029438 <fixup_subnet_mask+0xc8>
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 80293cc:	e0bffe17 	ldw	r2,-8(fp)
 80293d0:	100690ba 	slli	r3,r2,2
 80293d4:	008201b4 	movhi	r2,2054
 80293d8:	1885883a 	add	r2,r3,r2
 80293dc:	10bdce17 	ldw	r2,-2248(r2)
 80293e0:	10800a17 	ldw	r2,40(r2)
 80293e4:	1080300c 	andi	r2,r2,192
 80293e8:	10802018 	cmpnei	r2,r2,128
 80293ec:	1000031e 	bne	r2,zero,80293fc <fixup_subnet_mask+0x8c>
      smask = 0xFFFF0000L;
 80293f0:	00bffff4 	movhi	r2,65535
 80293f4:	e0bfff15 	stw	r2,-4(fp)
 80293f8:	00000f06 	br	8029438 <fixup_subnet_mask+0xc8>
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
 80293fc:	e0bffe17 	ldw	r2,-8(fp)
 8029400:	100690ba 	slli	r3,r2,2
 8029404:	008201b4 	movhi	r2,2054
 8029408:	1885883a 	add	r2,r3,r2
 802940c:	10bdce17 	ldw	r2,-2248(r2)
 8029410:	10800a17 	ldw	r2,40(r2)
 8029414:	1080380c 	andi	r2,r2,224
 8029418:	10803018 	cmpnei	r2,r2,192
 802941c:	1000031e 	bne	r2,zero,802942c <fixup_subnet_mask+0xbc>
      smask = 0xFFFFFF00L;
 8029420:	00bfc004 	movi	r2,-256
 8029424:	e0bfff15 	stw	r2,-4(fp)
 8029428:	00000306 	br	8029438 <fixup_subnet_mask+0xc8>
   else
   {
      dtrap();    /* bad logic or setup values */
 802942c:	80301a80 	call	80301a8 <dtrap>
      smask = 0xFFFFFF00L;
 8029430:	00bfc004 	movi	r2,-256
 8029434:	e0bfff15 	stw	r2,-4(fp)
   }
   nets[netnum]->snmask = htonl(smask);
 8029438:	e0bfff17 	ldw	r2,-4(fp)
 802943c:	1006d63a 	srli	r3,r2,24
 8029440:	e0bfff17 	ldw	r2,-4(fp)
 8029444:	1004d23a 	srli	r2,r2,8
 8029448:	10bfc00c 	andi	r2,r2,65280
 802944c:	1886b03a 	or	r3,r3,r2
 8029450:	e0bfff17 	ldw	r2,-4(fp)
 8029454:	1004923a 	slli	r2,r2,8
 8029458:	10803fec 	andhi	r2,r2,255
 802945c:	1888b03a 	or	r4,r3,r2
 8029460:	e0bfff17 	ldw	r2,-4(fp)
 8029464:	1006963a 	slli	r3,r2,24
 8029468:	e0bffe17 	ldw	r2,-8(fp)
 802946c:	100a90ba 	slli	r5,r2,2
 8029470:	008201b4 	movhi	r2,2054
 8029474:	2885883a 	add	r2,r5,r2
 8029478:	10bdce17 	ldw	r2,-2248(r2)
 802947c:	20c6b03a 	or	r3,r4,r3
 8029480:	10c00c15 	stw	r3,48(r2)
 8029484:	00000106 	br	802948c <fixup_subnet_mask+0x11c>
      return;
 8029488:	0001883a 	nop
}
 802948c:	e037883a 	mov	sp,fp
 8029490:	dfc00117 	ldw	ra,4(sp)
 8029494:	df000017 	ldw	fp,0(sp)
 8029498:	dec00204 	addi	sp,sp,8
 802949c:	f800283a 	ret

080294a0 <netclose>:
 * RETURNS: 
 */

void
netclose()
{
 80294a0:	defffc04 	addi	sp,sp,-16
 80294a4:	dfc00315 	stw	ra,12(sp)
 80294a8:	df000215 	stw	fp,8(sp)
 80294ac:	df000204 	addi	fp,sp,8
   NET ifp;
   int index = 0;
 80294b0:	e03ffe15 	stw	zero,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 80294b4:	d0a07e17 	ldw	r2,-32264(gp)
 80294b8:	1080010c 	andi	r2,r2,4
 80294bc:	10000326 	beq	r2,zero,80294cc <netclose+0x2c>
 80294c0:	01020174 	movhi	r4,2053
 80294c4:	210b4d04 	addi	r4,r4,11572
 80294c8:	8003ca80 	call	8003ca8 <puts>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 80294cc:	008201b4 	movhi	r2,2054
 80294d0:	10800f17 	ldw	r2,60(r2)
 80294d4:	e0bfff15 	stw	r2,-4(fp)
 80294d8:	00002106 	br	8029560 <netclose+0xc0>
   {
      if (ifp->n_close)
 80294dc:	e0bfff17 	ldw	r2,-4(fp)
 80294e0:	10800517 	ldw	r2,20(r2)
 80294e4:	10000f26 	beq	r2,zero,8029524 <netclose+0x84>
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
 80294e8:	e0bfff17 	ldw	r2,-4(fp)
 80294ec:	10802717 	ldw	r2,156(r2)
 80294f0:	10800117 	ldw	r2,4(r2)
 80294f4:	100b883a 	mov	r5,r2
 80294f8:	01020174 	movhi	r4,2053
 80294fc:	210b5204 	addi	r4,r4,11592
 8029500:	8003b840 	call	8003b84 <printf>
         (*(ifp->n_close))(index++);
 8029504:	e0bfff17 	ldw	r2,-4(fp)
 8029508:	10c00517 	ldw	r3,20(r2)
 802950c:	e0bffe17 	ldw	r2,-8(fp)
 8029510:	11000044 	addi	r4,r2,1
 8029514:	e13ffe15 	stw	r4,-8(fp)
 8029518:	1009883a 	mov	r4,r2
 802951c:	183ee83a 	callr	r3
 8029520:	00000c06 	br	8029554 <netclose+0xb4>
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
 8029524:	d0a07e17 	ldw	r2,-32264(gp)
 8029528:	1080010c 	andi	r2,r2,4
 802952c:	10000626 	beq	r2,zero,8029548 <netclose+0xa8>
 8029530:	e0bfff17 	ldw	r2,-4(fp)
 8029534:	10800104 	addi	r2,r2,4
 8029538:	100b883a 	mov	r5,r2
 802953c:	01020174 	movhi	r4,2053
 8029540:	210b5904 	addi	r4,r4,11620
 8029544:	8003b840 	call	8003b84 <printf>
#endif
         index++;
 8029548:	e0bffe17 	ldw	r2,-8(fp)
 802954c:	10800044 	addi	r2,r2,1
 8029550:	e0bffe15 	stw	r2,-8(fp)
   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 8029554:	e0bfff17 	ldw	r2,-4(fp)
 8029558:	10800017 	ldw	r2,0(r2)
 802955c:	e0bfff15 	stw	r2,-4(fp)
 8029560:	e0bfff17 	ldw	r2,-4(fp)
 8029564:	103fdd1e 	bne	r2,zero,80294dc <netclose+0x3c>
      }
   }
}
 8029568:	0001883a 	nop
 802956c:	0001883a 	nop
 8029570:	e037883a 	mov	sp,fp
 8029574:	dfc00117 	ldw	ra,4(sp)
 8029578:	df000017 	ldw	fp,0(sp)
 802957c:	dec00204 	addi	sp,sp,8
 8029580:	f800283a 	ret

08029584 <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
 8029584:	defff904 	addi	sp,sp,-28
 8029588:	dfc00615 	stw	ra,24(sp)
 802958c:	df000515 	stw	fp,20(sp)
 8029590:	df000504 	addi	fp,sp,20
   NET      ifc;                /* interface packet came from */
   IFMIB    mib;
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */
 8029594:	e03fff15 	stw	zero,-4(fp)

   while (rcvdq.q_len)
 8029598:	0000d906 	br	8029900 <pktdemux+0x37c>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
 802959c:	e0bfff17 	ldw	r2,-4(fp)
 80295a0:	10c00044 	addi	r3,r2,1
 80295a4:	e0ffff15 	stw	r3,-4(fp)
 80295a8:	00c201b4 	movhi	r3,2054
 80295ac:	18fe7717 	ldw	r3,-1572(r3)
 80295b0:	1880020e 	bge	r3,r2,80295bc <pktdemux+0x38>
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
 80295b4:	802c8fc0 	call	802c8fc <tk_yield>
         pkts = 0;   /* reset counter */
 80295b8:	e03fff15 	stw	zero,-4(fp)
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
 80295bc:	01000044 	movi	r4,1
 80295c0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
 80295c4:	010201b4 	movhi	r4,2054
 80295c8:	213d0904 	addi	r4,r4,-3036
 80295cc:	802fad40 	call	802fad4 <getq>
 80295d0:	e0bffe15 	stw	r2,-8(fp)
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 80295d4:	01000044 	movi	r4,1
 80295d8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
 80295dc:	e0bffe17 	ldw	r2,-8(fp)
 80295e0:	1000031e 	bne	r2,zero,80295f0 <pktdemux+0x6c>
 80295e4:	01020174 	movhi	r4,2053
 80295e8:	210b6004 	addi	r4,r4,11648
 80295ec:	802bd8c0 	call	802bd8c <panic>
      ifc = pkt->net;
 80295f0:	e0bffe17 	ldw	r2,-8(fp)
 80295f4:	10800617 	ldw	r2,24(r2)
 80295f8:	e0bffd15 	stw	r2,-12(fp)

      mib = ifc->n_mib;
 80295fc:	e0bffd17 	ldw	r2,-12(fp)
 8029600:	10802717 	ldw	r2,156(r2)
 8029604:	e0bffc15 	stw	r2,-16(fp)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
 8029608:	e0bffe17 	ldw	r2,-8(fp)
 802960c:	10800117 	ldw	r2,4(r2)
 8029610:	10800084 	addi	r2,r2,2
 8029614:	100b883a 	mov	r5,r2
 8029618:	e13ffd17 	ldw	r4,-12(fp)
 802961c:	8041bcc0 	call	8041bcc <isbcast>
 8029620:	10000626 	beq	r2,zero,802963c <pktdemux+0xb8>
         mib->ifInNUcastPkts++;
 8029624:	e0bffc17 	ldw	r2,-16(fp)
 8029628:	10800b17 	ldw	r2,44(r2)
 802962c:	10c00044 	addi	r3,r2,1
 8029630:	e0bffc17 	ldw	r2,-16(fp)
 8029634:	10c00b15 	stw	r3,44(r2)
 8029638:	00000506 	br	8029650 <pktdemux+0xcc>
      else
         mib->ifInUcastPkts++;
 802963c:	e0bffc17 	ldw	r2,-16(fp)
 8029640:	10800a17 	ldw	r2,40(r2)
 8029644:	10c00044 	addi	r3,r2,1
 8029648:	e0bffc17 	ldw	r2,-16(fp)
 802964c:	10c00a15 	stw	r3,40(r2)

      if(mib->ifAdminStatus == NI_DOWN)
 8029650:	e0bffc17 	ldw	r2,-16(fp)
 8029654:	10800617 	ldw	r2,24(r2)
 8029658:	10800098 	cmpnei	r2,r2,2
 802965c:	10000c1e 	bne	r2,zero,8029690 <pktdemux+0x10c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8029660:	01000084 	movi	r4,2
 8029664:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
 8029668:	e13ffe17 	ldw	r4,-8(fp)
 802966c:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029670:	01000084 	movi	r4,2
 8029674:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
 8029678:	e0bffc17 	ldw	r2,-16(fp)
 802967c:	10800c17 	ldw	r2,48(r2)
 8029680:	10c00044 	addi	r3,r2,1
 8029684:	e0bffc17 	ldw	r2,-16(fp)
 8029688:	10c00c15 	stw	r3,48(r2)
         continue;      /* next packet */
 802968c:	00009c06 	br	8029900 <pktdemux+0x37c>
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 8029690:	e0bffe17 	ldw	r2,-8(fp)
 8029694:	10800117 	ldw	r2,4(r2)
 8029698:	10bfff04 	addi	r2,r2,-4
 802969c:	10800003 	ldbu	r2,0(r2)
 80296a0:	10803fcc 	andi	r2,r2,255
 80296a4:	1080201c 	xori	r2,r2,128
 80296a8:	10bfe004 	addi	r2,r2,-128
 80296ac:	10801358 	cmpnei	r2,r2,77
 80296b0:	10000b1e 	bne	r2,zero,80296e0 <pktdemux+0x15c>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
 80296b4:	e0bffe17 	ldw	r2,-8(fp)
 80296b8:	10c00117 	ldw	r3,4(r2)
 80296bc:	e0bffe17 	ldw	r2,-8(fp)
 80296c0:	10800217 	ldw	r2,8(r2)
 80296c4:	1885883a 	add	r2,r3,r2
 80296c8:	10800003 	ldbu	r2,0(r2)
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 80296cc:	10803fcc 	andi	r2,r2,255
 80296d0:	1080201c 	xori	r2,r2,128
 80296d4:	10bfe004 	addi	r2,r2,-128
 80296d8:	10801360 	cmpeqi	r2,r2,77
 80296dc:	1000041e 	bne	r2,zero,80296f0 <pktdemux+0x16c>
      {
         dtrap();
 80296e0:	80301a80 	call	80301a8 <dtrap>
         panic("pktdemux: corrupt pkt");
 80296e4:	01020174 	movhi	r4,2053
 80296e8:	210b6604 	addi	r4,r4,11672
 80296ec:	802bd8c0 	call	802bd8c <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
 80296f0:	e0bffd17 	ldw	r2,-12(fp)
 80296f4:	10802a17 	ldw	r2,168(r2)
 80296f8:	1080020c 	andi	r2,r2,8
 80296fc:	1000491e 	bne	r2,zero,8029824 <pktdemux+0x2a0>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
 8029700:	e0bffd17 	ldw	r2,-12(fp)
 8029704:	10802717 	ldw	r2,156(r2)
 8029708:	10800217 	ldw	r2,8(r2)
 802970c:	10800198 	cmpnei	r2,r2,6
 8029710:	1000361e 	bne	r2,zero,80297ec <pktdemux+0x268>
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
 8029714:	e0bffe17 	ldw	r2,-8(fp)
 8029718:	10800117 	ldw	r2,4(r2)
 802971c:	10800084 	addi	r2,r2,2
 8029720:	e0bffb15 	stw	r2,-20(fp)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 8029724:	e0bffb17 	ldw	r2,-20(fp)
 8029728:	10800304 	addi	r2,r2,12
 802972c:	10800003 	ldbu	r2,0(r2)
 8029730:	10803fcc 	andi	r2,r2,255
 8029734:	1080201c 	xori	r2,r2,128
 8029738:	10bfe004 	addi	r2,r2,-128
 802973c:	1004923a 	slli	r2,r2,8
 8029740:	1007883a 	mov	r3,r2
 8029744:	e0bffb17 	ldw	r2,-20(fp)
 8029748:	10800344 	addi	r2,r2,13
 802974c:	10800003 	ldbu	r2,0(r2)
 8029750:	10803fcc 	andi	r2,r2,255
 8029754:	1080201c 	xori	r2,r2,128
 8029758:	10bfe004 	addi	r2,r2,-128
 802975c:	10803fcc 	andi	r2,r2,255
 8029760:	1885883a 	add	r2,r3,r2
 8029764:	10bfffcc 	andi	r2,r2,65535
 8029768:	1004d23a 	srli	r2,r2,8
 802976c:	1007883a 	mov	r3,r2
 8029770:	e0bffb17 	ldw	r2,-20(fp)
 8029774:	10800304 	addi	r2,r2,12
 8029778:	10800003 	ldbu	r2,0(r2)
 802977c:	10803fcc 	andi	r2,r2,255
 8029780:	1080201c 	xori	r2,r2,128
 8029784:	10bfe004 	addi	r2,r2,-128
 8029788:	1004923a 	slli	r2,r2,8
 802978c:	1009883a 	mov	r4,r2
 8029790:	e0bffb17 	ldw	r2,-20(fp)
 8029794:	10800344 	addi	r2,r2,13
 8029798:	10800003 	ldbu	r2,0(r2)
 802979c:	10803fcc 	andi	r2,r2,255
 80297a0:	1080201c 	xori	r2,r2,128
 80297a4:	10bfe004 	addi	r2,r2,-128
 80297a8:	10803fcc 	andi	r2,r2,255
 80297ac:	2085883a 	add	r2,r4,r2
 80297b0:	10bfffcc 	andi	r2,r2,65535
 80297b4:	1004923a 	slli	r2,r2,8
 80297b8:	1884b03a 	or	r2,r3,r2
 80297bc:	1007883a 	mov	r3,r2
 80297c0:	e0bffe17 	ldw	r2,-8(fp)
 80297c4:	10c0080d 	sth	r3,32(r2)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 80297c8:	e0bffe17 	ldw	r2,-8(fp)
 80297cc:	10800117 	ldw	r2,4(r2)
 80297d0:	e0fffe17 	ldw	r3,-8(fp)
 80297d4:	18c00617 	ldw	r3,24(r3)
 80297d8:	18c00817 	ldw	r3,32(r3)
 80297dc:	10c7883a 	add	r3,r2,r3
 80297e0:	e0bffe17 	ldw	r2,-8(fp)
 80297e4:	10c00315 	stw	r3,12(r2)
#endif   /* IEEE_802_3 */
            break;
 80297e8:	00000f06 	br	8029828 <pktdemux+0x2a4>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
 80297ec:	e0bffd17 	ldw	r2,-12(fp)
 80297f0:	10802717 	ldw	r2,156(r2)
 80297f4:	10800217 	ldw	r2,8(r2)
 80297f8:	100b883a 	mov	r5,r2
 80297fc:	01020174 	movhi	r4,2053
 8029800:	210b6c04 	addi	r4,r4,11696
 8029804:	8003b840 	call	8003b84 <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 8029808:	01000084 	movi	r4,2
 802980c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(pkt);
 8029810:	e13ffe17 	ldw	r4,-8(fp)
 8029814:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029818:	01000084 	movi	r4,2
 802981c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            continue;
 8029820:	00003706 	br	8029900 <pktdemux+0x37c>
         }
      }
 8029824:	0001883a 	nop

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
 8029828:	e0bffe17 	ldw	r2,-8(fp)
 802982c:	1080080b 	ldhu	r2,32(r2)
 8029830:	10bfffcc 	andi	r2,r2,65535
 8029834:	10c00220 	cmpeqi	r3,r2,8
 8029838:	1800031e 	bne	r3,zero,8029848 <pktdemux+0x2c4>
 802983c:	10818220 	cmpeqi	r2,r2,1544
 8029840:	1000081e 	bne	r2,zero,8029864 <pktdemux+0x2e0>
 8029844:	00000e06 	br	8029880 <pktdemux+0x2fc>
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
 8029848:	0009883a 	mov	r4,zero
 802984c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
 8029850:	e13ffe17 	ldw	r4,-8(fp)
 8029854:	80458a00 	call	80458a0 <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
 8029858:	0009883a 	mov	r4,zero
 802985c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         break;
 8029860:	00002606 	br	80298fc <pktdemux+0x378>
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
 8029864:	0009883a 	mov	r4,zero
 8029868:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         arprcv(pkt);
 802986c:	e13ffe17 	ldw	r4,-8(fp)
 8029870:	80413bc0 	call	80413bc <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
 8029874:	0009883a 	mov	r4,zero
 8029878:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         break;
 802987c:	00001f06 	br	80298fc <pktdemux+0x378>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
 8029880:	d0a07e17 	ldw	r2,-32264(gp)
 8029884:	1081000c 	andi	r2,r2,1024
 8029888:	10001026 	beq	r2,zero,80298cc <pktdemux+0x348>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
 802988c:	e0bffe17 	ldw	r2,-8(fp)
 8029890:	1080080b 	ldhu	r2,32(r2)
 8029894:	10bfffcc 	andi	r2,r2,65535
 8029898:	1004d23a 	srli	r2,r2,8
 802989c:	10bfffcc 	andi	r2,r2,65535
 80298a0:	10c03fcc 	andi	r3,r2,255
 80298a4:	e0bffe17 	ldw	r2,-8(fp)
 80298a8:	1080080b 	ldhu	r2,32(r2)
 80298ac:	10bfffcc 	andi	r2,r2,65535
 80298b0:	1004923a 	slli	r2,r2,8
 80298b4:	10bfffcc 	andi	r2,r2,65535
 80298b8:	1884b03a 	or	r2,r3,r2
 80298bc:	100b883a 	mov	r5,r2
 80298c0:	01020174 	movhi	r4,2053
 80298c4:	210b7404 	addi	r4,r4,11728
 80298c8:	8003b840 	call	8003b84 <printf>
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
 80298cc:	e0bffd17 	ldw	r2,-12(fp)
 80298d0:	10802717 	ldw	r2,156(r2)
 80298d4:	10c00e17 	ldw	r3,56(r2)
 80298d8:	18c00044 	addi	r3,r3,1
 80298dc:	10c00e15 	stw	r3,56(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80298e0:	01000084 	movi	r4,2
 80298e4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
 80298e8:	e13ffe17 	ldw	r4,-8(fp)
 80298ec:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80298f0:	01000084 	movi	r4,2
 80298f4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         break;
 80298f8:	0001883a 	nop
      }
      continue;
 80298fc:	0001883a 	nop
   while (rcvdq.q_len)
 8029900:	008201b4 	movhi	r2,2054
 8029904:	10bd0b17 	ldw	r2,-3028(r2)
 8029908:	103f241e 	bne	r2,zero,802959c <pktdemux+0x18>
   }
}
 802990c:	0001883a 	nop
 8029910:	0001883a 	nop
 8029914:	e037883a 	mov	sp,fp
 8029918:	dfc00117 	ldw	ra,4(sp)
 802991c:	df000017 	ldw	fp,0(sp)
 8029920:	dec00204 	addi	sp,sp,8
 8029924:	f800283a 	ret

08029928 <c_older>:
 * RETURNS: the older of the two passed tick counts
 */

u_long
c_older(u_long ct1, u_long ct2)
{
 8029928:	defffd04 	addi	sp,sp,-12
 802992c:	df000215 	stw	fp,8(sp)
 8029930:	df000204 	addi	fp,sp,8
 8029934:	e13fff15 	stw	r4,-4(fp)
 8029938:	e17ffe15 	stw	r5,-8(fp)

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 802993c:	d0a0a317 	ldw	r2,-32116(gp)
 8029940:	10000c0e 	bge	r2,zero,8029974 <c_older+0x4c>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8029944:	d0e0a317 	ldw	r3,-32116(gp)
   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 8029948:	e0bfff17 	ldw	r2,-4(fp)
 802994c:	18800336 	bltu	r3,r2,802995c <c_older+0x34>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8029950:	d0e0a317 	ldw	r3,-32116(gp)
 8029954:	e0bffe17 	ldw	r2,-8(fp)
 8029958:	1880062e 	bgeu	r3,r2,8029974 <c_older+0x4c>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
 802995c:	d0a0a317 	ldw	r2,-32116(gp)
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8029960:	e0ffff17 	ldw	r3,-4(fp)
 8029964:	18800a36 	bltu	r3,r2,8029990 <c_older+0x68>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
 8029968:	d0a0a317 	ldw	r2,-32116(gp)
 802996c:	e0fffe17 	ldw	r3,-8(fp)
 8029970:	18800736 	bltu	r3,r2,8029990 <c_older+0x68>
   {
      if (ct1 < ct2)
 8029974:	e0ffff17 	ldw	r3,-4(fp)
 8029978:	e0bffe17 	ldw	r2,-8(fp)
 802997c:	1880022e 	bgeu	r3,r2,8029988 <c_older+0x60>
         return(ct1);      /* then smaller is oldest */
 8029980:	e0bfff17 	ldw	r2,-4(fp)
 8029984:	00000806 	br	80299a8 <c_older+0x80>
      else 
         return(ct2);
 8029988:	e0bffe17 	ldw	r2,-8(fp)
 802998c:	00000606 	br	80299a8 <c_older+0x80>
   }

   /* else one is less than cticks, and one is greater.
   the larger value is then the oldest */
   if (ct1 >= ct2)
 8029990:	e0ffff17 	ldw	r3,-4(fp)
 8029994:	e0bffe17 	ldw	r2,-8(fp)
 8029998:	18800236 	bltu	r3,r2,80299a4 <c_older+0x7c>
      return(ct1);
 802999c:	e0bfff17 	ldw	r2,-4(fp)
 80299a0:	00000106 	br	80299a8 <c_older+0x80>
   else
      return(ct2);
 80299a4:	e0bffe17 	ldw	r2,-8(fp)
}
 80299a8:	e037883a 	mov	sp,fp
 80299ac:	df000017 	ldw	fp,0(sp)
 80299b0:	dec00104 	addi	sp,sp,4
 80299b4:	f800283a 	ret

080299b8 <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 80299b8:	defffb04 	addi	sp,sp,-20
 80299bc:	dfc00415 	stw	ra,16(sp)
 80299c0:	df000315 	stw	fp,12(sp)
 80299c4:	df000304 	addi	fp,sp,12
 80299c8:	e13ffe15 	stw	r4,-8(fp)
 80299cc:	e17ffd15 	stw	r5,-12(fp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
 80299d0:	e0bffe17 	ldw	r2,-8(fp)
 80299d4:	10800617 	ldw	r2,24(r2)
 80299d8:	10802717 	ldw	r2,156(r2)
 80299dc:	e0bfff15 	stw	r2,-4(fp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
 80299e0:	e0bfff17 	ldw	r2,-4(fp)
 80299e4:	10800617 	ldw	r2,24(r2)
 80299e8:	10800098 	cmpnei	r2,r2,2
 80299ec:	1000081e 	bne	r2,zero,8029a10 <ip2mac+0x58>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80299f0:	01000084 	movi	r4,2
 80299f4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 80299f8:	e13ffe17 	ldw	r4,-8(fp)
 80299fc:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029a00:	01000084 	movi	r4,2
 8029a04:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return(ENP_NO_ROUTE);
 8029a08:	00bff7c4 	movi	r2,-33
 8029a0c:	00004806 	br	8029b30 <ip2mac+0x178>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 8029a10:	e0bffe17 	ldw	r2,-8(fp)
 8029a14:	10800617 	ldw	r2,24(r2)
 8029a18:	10800817 	ldw	r2,32(r2)
 8029a1c:	10000826 	beq	r2,zero,8029a40 <ip2mac+0x88>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
 8029a20:	e0bfff17 	ldw	r2,-4(fp)
 8029a24:	10800217 	ldw	r2,8(r2)
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 8029a28:	108005e0 	cmpeqi	r2,r2,23
 8029a2c:	1000041e 	bne	r2,zero,8029a40 <ip2mac+0x88>
       (ifmib->ifType == SLIP))
 8029a30:	e0bfff17 	ldw	r2,-4(fp)
 8029a34:	10800217 	ldw	r2,8(r2)
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
 8029a38:	10800718 	cmpnei	r2,r2,28
 8029a3c:	1000291e 	bne	r2,zero,8029ae4 <ip2mac+0x12c>
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 8029a40:	e0bfff17 	ldw	r2,-4(fp)
 8029a44:	10801017 	ldw	r2,64(r2)
 8029a48:	10c00044 	addi	r3,r2,1
 8029a4c:	e0bfff17 	ldw	r2,-4(fp)
 8029a50:	10c01015 	stw	r3,64(r2)
      ifmib->ifOutOctets += pkt->nb_plen;
 8029a54:	e0bfff17 	ldw	r2,-4(fp)
 8029a58:	10c00f17 	ldw	r3,60(r2)
 8029a5c:	e0bffe17 	ldw	r2,-8(fp)
 8029a60:	10800417 	ldw	r2,16(r2)
 8029a64:	1887883a 	add	r3,r3,r2
 8029a68:	e0bfff17 	ldw	r2,-4(fp)
 8029a6c:	10c00f15 	stw	r3,60(r2)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
 8029a70:	e0bffe17 	ldw	r2,-8(fp)
 8029a74:	10800617 	ldw	r2,24(r2)
 8029a78:	10800417 	ldw	r2,16(r2)
 8029a7c:	10000626 	beq	r2,zero,8029a98 <ip2mac+0xe0>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
 8029a80:	e0bffe17 	ldw	r2,-8(fp)
 8029a84:	10800617 	ldw	r2,24(r2)
 8029a88:	10800417 	ldw	r2,16(r2)
 8029a8c:	e13ffe17 	ldw	r4,-8(fp)
 8029a90:	103ee83a 	callr	r2
 8029a94:	00001106 	br	8029adc <ip2mac+0x124>
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 8029a98:	e0bffe17 	ldw	r2,-8(fp)
 8029a9c:	10800617 	ldw	r2,24(r2)
 8029aa0:	10800317 	ldw	r2,12(r2)
 8029aa4:	e0fffe17 	ldw	r3,-8(fp)
 8029aa8:	19000617 	ldw	r4,24(r3)
 8029aac:	e0fffe17 	ldw	r3,-8(fp)
 8029ab0:	19400317 	ldw	r5,12(r3)
 8029ab4:	e0fffe17 	ldw	r3,-8(fp)
 8029ab8:	18c00417 	ldw	r3,16(r3)
 8029abc:	180d883a 	mov	r6,r3
 8029ac0:	103ee83a 	callr	r2
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8029ac4:	01000084 	movi	r4,2
 8029ac8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 8029acc:	e13ffe17 	ldw	r4,-8(fp)
 8029ad0:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029ad4:	01000084 	movi	r4,2
 8029ad8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      }
      return(SUCCESS);
 8029adc:	0005883a 	mov	r2,zero
 8029ae0:	00001306 	br	8029b30 <ip2mac+0x178>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
 8029ae4:	e0bffe17 	ldw	r2,-8(fp)
 8029ae8:	10800617 	ldw	r2,24(r2)
 8029aec:	10800a17 	ldw	r2,40(r2)
 8029af0:	10000c1e 	bne	r2,zero,8029b24 <ip2mac+0x16c>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
 8029af4:	e0bffe17 	ldw	r2,-8(fp)
 8029af8:	10800717 	ldw	r2,28(r2)
 8029afc:	10bfffe0 	cmpeqi	r2,r2,-1
 8029b00:	1000081e 	bne	r2,zero,8029b24 <ip2mac+0x16c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8029b04:	01000084 	movi	r4,2
 8029b08:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 8029b0c:	e13ffe17 	ldw	r4,-8(fp)
 8029b10:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8029b14:	01000084 	movi	r4,2
 8029b18:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return ENP_SENDERR;
 8029b1c:	00bff884 	movi	r2,-30
 8029b20:	00000306 	br	8029b30 <ip2mac+0x178>
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
 8029b24:	e17ffd17 	ldw	r5,-12(fp)
 8029b28:	e13ffe17 	ldw	r4,-8(fp)
 8029b2c:	80416200 	call	8041620 <send_via_arp>
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 8029b30:	e037883a 	mov	sp,fp
 8029b34:	dfc00117 	ldw	ra,4(sp)
 8029b38:	df000017 	ldw	fp,0(sp)
 8029b3c:	dec00204 	addi	sp,sp,8
 8029b40:	f800283a 	ret

08029b44 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
 8029b44:	defffc04 	addi	sp,sp,-16
 8029b48:	dfc00315 	stw	ra,12(sp)
 8029b4c:	df000215 	stw	fp,8(sp)
 8029b50:	df000204 	addi	fp,sp,8
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
 8029b54:	e03fff15 	stw	zero,-4(fp)
 8029b58:	00002206 	br	8029be4 <ip_startup+0xa0>
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
 8029b5c:	e0bfff17 	ldw	r2,-4(fp)
 8029b60:	10c03024 	muli	r3,r2,192
 8029b64:	008201b4 	movhi	r2,2054
 8029b68:	10bd0e04 	addi	r2,r2,-3016
 8029b6c:	1887883a 	add	r3,r3,r2
 8029b70:	e0bfff17 	ldw	r2,-4(fp)
 8029b74:	100890ba 	slli	r4,r2,2
 8029b78:	008201b4 	movhi	r2,2054
 8029b7c:	2085883a 	add	r2,r4,r2
 8029b80:	10fdce15 	stw	r3,-2248(r2)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
 8029b84:	e0bfff17 	ldw	r2,-4(fp)
 8029b88:	100690ba 	slli	r3,r2,2
 8029b8c:	008201b4 	movhi	r2,2054
 8029b90:	1885883a 	add	r2,r3,r2
 8029b94:	10fdce17 	ldw	r3,-2248(r2)
 8029b98:	e0bfff17 	ldw	r2,-4(fp)
 8029b9c:	100890ba 	slli	r4,r2,2
 8029ba0:	008201b4 	movhi	r2,2054
 8029ba4:	2085883a 	add	r2,r4,r2
 8029ba8:	10bdce17 	ldw	r2,-2248(r2)
 8029bac:	18c01204 	addi	r3,r3,72
 8029bb0:	10c02715 	stw	r3,156(r2)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
 8029bb4:	e0bfff17 	ldw	r2,-4(fp)
 8029bb8:	100690ba 	slli	r3,r2,2
 8029bbc:	008201b4 	movhi	r2,2054
 8029bc0:	1885883a 	add	r2,r3,r2
 8029bc4:	10bdce17 	ldw	r2,-2248(r2)
 8029bc8:	100b883a 	mov	r5,r2
 8029bcc:	010201b4 	movhi	r4,2054
 8029bd0:	21000f04 	addi	r4,r4,60
 8029bd4:	802fb8c0 	call	802fb8c <putq>
   for (i = 0; i < STATIC_NETS; i++)
 8029bd8:	e0bfff17 	ldw	r2,-4(fp)
 8029bdc:	10800044 	addi	r2,r2,1
 8029be0:	e0bfff15 	stw	r2,-4(fp)
 8029be4:	e0bfff17 	ldw	r2,-4(fp)
 8029be8:	10800110 	cmplti	r2,r2,4
 8029bec:	103fdb1e 	bne	r2,zero,8029b5c <ip_startup+0x18>
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
 8029bf0:	d0a07f17 	ldw	r2,-32260(gp)
 8029bf4:	1009883a 	mov	r4,r2
 8029bf8:	80467fc0 	call	80467fc <prep_ifaces>
 8029bfc:	d0a07f15 	stw	r2,-32260(gp)

   if (ifNumber < 1)    /* no static interfaces? */
 8029c00:	d0a07f17 	ldw	r2,-32260(gp)
 8029c04:	1000031e 	bne	r2,zero,8029c14 <ip_startup+0xd0>
#ifdef DYNAMIC_IFACES
      /* print a debug message and hope user knows what he's doing */
      dprintf("unable to find any working interfaces");
#else /* static ifaces only */
      /* no static and no dynamic interfaces is probably a bug... */
      return("unable to find any working interfaces");
 8029c08:	00820174 	movhi	r2,2053
 8029c0c:	108b8504 	addi	r2,r2,11796
 8029c10:	00006006 	br	8029d94 <ip_startup+0x250>
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 8029c14:	d0a07f17 	ldw	r2,-32260(gp)
 8029c18:	e0bfff15 	stw	r2,-4(fp)
 8029c1c:	00001106 	br	8029c64 <ip_startup+0x120>
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
 8029c20:	e0bfff17 	ldw	r2,-4(fp)
 8029c24:	100690ba 	slli	r3,r2,2
 8029c28:	008201b4 	movhi	r2,2054
 8029c2c:	1885883a 	add	r2,r3,r2
 8029c30:	10bdce17 	ldw	r2,-2248(r2)
 8029c34:	100b883a 	mov	r5,r2
 8029c38:	010201b4 	movhi	r4,2054
 8029c3c:	21000f04 	addi	r4,r4,60
 8029c40:	802fc3c0 	call	802fc3c <qdel>
      nets[i] = NULL;               /* remove from array */
 8029c44:	e0bfff17 	ldw	r2,-4(fp)
 8029c48:	100690ba 	slli	r3,r2,2
 8029c4c:	008201b4 	movhi	r2,2054
 8029c50:	1885883a 	add	r2,r3,r2
 8029c54:	103dce15 	stw	zero,-2248(r2)
   for (i = ifNumber; i < STATIC_NETS; i++)
 8029c58:	e0bfff17 	ldw	r2,-4(fp)
 8029c5c:	10800044 	addi	r2,r2,1
 8029c60:	e0bfff15 	stw	r2,-4(fp)
 8029c64:	e0bfff17 	ldw	r2,-4(fp)
 8029c68:	10800110 	cmplti	r2,r2,4
 8029c6c:	103fec1e 	bne	r2,zero,8029c20 <ip_startup+0xdc>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
 8029c70:	80302b40 	call	80302b4 <clock_init>
   exit_hook(clock_c);
 8029c74:	010200f4 	movhi	r4,2051
 8029c78:	2100bb04 	addi	r4,r4,748
 8029c7c:	8029da80 	call	8029da8 <exit_hook>

   e = Netinit();    /* start net interface(s) */
 8029c80:	8028ea00 	call	8028ea0 <Netinit>
 8029c84:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8029c88:	e0bffe17 	ldw	r2,-8(fp)
 8029c8c:	10000326 	beq	r2,zero,8029c9c <ip_startup+0x158>
   {
      return("unable to initialize net");
 8029c90:	00820174 	movhi	r2,2053
 8029c94:	108b8f04 	addi	r2,r2,11836
 8029c98:	00003e06 	br	8029d94 <ip_startup+0x250>
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
 8029c9c:	80407780 	call	8040778 <etainit>
 8029ca0:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8029ca4:	e0bffe17 	ldw	r2,-8(fp)
 8029ca8:	10000426 	beq	r2,zero,8029cbc <ip_startup+0x178>
   {
      ip_exit();
 8029cac:	8029e100 	call	8029e10 <ip_exit>
      return("unable to initialize arp");
 8029cb0:	00820174 	movhi	r2,2053
 8029cb4:	108b9604 	addi	r2,r2,11864
 8029cb8:	00003606 	br	8029d94 <ip_startup+0x250>
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
 8029cbc:	8041dc00 	call	8041dc0 <ip_init>
 8029cc0:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8029cc4:	e0bffe17 	ldw	r2,-8(fp)
 8029cc8:	10000426 	beq	r2,zero,8029cdc <ip_startup+0x198>
   {
      ip_exit();
 8029ccc:	8029e100 	call	8029e10 <ip_exit>
      return("unable to initialize IP");
 8029cd0:	00820174 	movhi	r2,2053
 8029cd4:	108b9d04 	addi	r2,r2,11892
 8029cd8:	00002e06 	br	8029d94 <ip_startup+0x250>

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
 8029cdc:	8029f440 	call	8029f44 <igmp_init>
 8029ce0:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8029ce4:	e0bffe17 	ldw	r2,-8(fp)
 8029ce8:	10000326 	beq	r2,zero,8029cf8 <ip_startup+0x1b4>
   {
      ip_exit();
 8029cec:	8029e100 	call	8029e10 <ip_exit>
      return(ipmcfail_str);
 8029cf0:	d0a02c17 	ldw	r2,-32592(gp)
 8029cf4:	00002706 	br	8029d94 <ip_startup+0x250>
   }

   for (i = 0; i < (int)ifNumber; i++)
 8029cf8:	e03fff15 	stw	zero,-4(fp)
 8029cfc:	00001706 	br	8029d5c <ip_startup+0x218>
   {
      if (nets[i]->n_mcastlist != NULL)
 8029d00:	e0bfff17 	ldw	r2,-4(fp)
 8029d04:	100690ba 	slli	r3,r2,2
 8029d08:	008201b4 	movhi	r2,2054
 8029d0c:	1885883a 	add	r2,r3,r2
 8029d10:	10bdce17 	ldw	r2,-2248(r2)
 8029d14:	10802b17 	ldw	r2,172(r2)
 8029d18:	10000d26 	beq	r2,zero,8029d50 <ip_startup+0x20c>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 8029d1c:	e0bfff17 	ldw	r2,-4(fp)
 8029d20:	100690ba 	slli	r3,r2,2
 8029d24:	008201b4 	movhi	r2,2054
 8029d28:	1885883a 	add	r2,r3,r2
 8029d2c:	10bdce17 	ldw	r2,-2248(r2)
 8029d30:	01800104 	movi	r6,4
 8029d34:	100b883a 	mov	r5,r2
 8029d38:	d1208304 	addi	r4,gp,-32244
 8029d3c:	80465400 	call	8046540 <in_addmulti>
 8029d40:	1000031e 	bne	r2,zero,8029d50 <ip_startup+0x20c>
      {
         ip_exit();
 8029d44:	8029e100 	call	8029e10 <ip_exit>
         return(ipmcfail_str);
 8029d48:	d0a02c17 	ldw	r2,-32592(gp)
 8029d4c:	00001106 	br	8029d94 <ip_startup+0x250>
   for (i = 0; i < (int)ifNumber; i++)
 8029d50:	e0bfff17 	ldw	r2,-4(fp)
 8029d54:	10800044 	addi	r2,r2,1
 8029d58:	e0bfff15 	stw	r2,-4(fp)
 8029d5c:	d0a07f17 	ldw	r2,-32260(gp)
 8029d60:	1007883a 	mov	r3,r2
 8029d64:	e0bfff17 	ldw	r2,-4(fp)
 8029d68:	10ffe516 	blt	r2,r3,8029d00 <ip_startup+0x1bc>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
 8029d6c:	803d95c0 	call	803d95c <tcpinit>
 8029d70:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8029d74:	e0bffe17 	ldw	r2,-8(fp)
 8029d78:	10000426 	beq	r2,zero,8029d8c <ip_startup+0x248>
   {
      ip_exit();
 8029d7c:	8029e100 	call	8029e10 <ip_exit>
      return("unable to initialize TCP");
 8029d80:	00820174 	movhi	r2,2053
 8029d84:	108ba304 	addi	r2,r2,11916
 8029d88:	00000206 	br	8029d94 <ip_startup+0x250>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
 8029d8c:	80468a40 	call	80468a4 <evtmap_setup>
      return("unable to initialize IP Filter table");
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
 8029d90:	0005883a 	mov	r2,zero
}
 8029d94:	e037883a 	mov	sp,fp
 8029d98:	dfc00117 	ldw	ra,4(sp)
 8029d9c:	df000017 	ldw	fp,0(sp)
 8029da0:	dec00204 	addi	sp,sp,8
 8029da4:	f800283a 	ret

08029da8 <exit_hook>:
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
 8029da8:	defffd04 	addi	sp,sp,-12
 8029dac:	dfc00215 	stw	ra,8(sp)
 8029db0:	df000115 	stw	fp,4(sp)
 8029db4:	df000104 	addi	fp,sp,4
 8029db8:	e13fff15 	stw	r4,-4(fp)
   if (nclosers >= (NUMCLOSERS-1))
 8029dbc:	d0a08017 	ldw	r2,-32256(gp)
 8029dc0:	10800390 	cmplti	r2,r2,14
 8029dc4:	1000031e 	bne	r2,zero,8029dd4 <exit_hook+0x2c>
      panic("exit_hook");
 8029dc8:	01020174 	movhi	r4,2053
 8029dcc:	210baa04 	addi	r4,r4,11944
 8029dd0:	802bd8c0 	call	802bd8c <panic>

   closers[++nclosers] = func;
 8029dd4:	d0a08017 	ldw	r2,-32256(gp)
 8029dd8:	10800044 	addi	r2,r2,1
 8029ddc:	d0a08015 	stw	r2,-32256(gp)
 8029de0:	d0a08017 	ldw	r2,-32256(gp)
 8029de4:	100890ba 	slli	r4,r2,2
 8029de8:	e0ffff17 	ldw	r3,-4(fp)
 8029dec:	00820174 	movhi	r2,2053
 8029df0:	2085883a 	add	r2,r4,r2
 8029df4:	10dd9d15 	stw	r3,30324(r2)
}
 8029df8:	0001883a 	nop
 8029dfc:	e037883a 	mov	sp,fp
 8029e00:	dfc00117 	ldw	ra,4(sp)
 8029e04:	df000017 	ldw	fp,0(sp)
 8029e08:	dec00204 	addi	sp,sp,8
 8029e0c:	f800283a 	ret

08029e10 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
 8029e10:	defffd04 	addi	sp,sp,-12
 8029e14:	dfc00215 	stw	ra,8(sp)
 8029e18:	df000115 	stw	fp,4(sp)
 8029e1c:	df000104 	addi	fp,sp,4
   int   n;

   for (n=nclosers; n; n--)
 8029e20:	d0a08017 	ldw	r2,-32256(gp)
 8029e24:	e0bfff15 	stw	r2,-4(fp)
 8029e28:	00001d06 	br	8029ea0 <ip_exit+0x90>
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
 8029e2c:	e0bfff17 	ldw	r2,-4(fp)
 8029e30:	100690ba 	slli	r3,r2,2
 8029e34:	00820174 	movhi	r2,2053
 8029e38:	1885883a 	add	r2,r3,r2
 8029e3c:	109d9d17 	ldw	r2,30324(r2)
 8029e40:	100b883a 	mov	r5,r2
 8029e44:	01020174 	movhi	r4,2053
 8029e48:	210bad04 	addi	r4,r4,11956
 8029e4c:	8003b840 	call	8003b84 <printf>
#endif
      if(closers[n])
 8029e50:	e0bfff17 	ldw	r2,-4(fp)
 8029e54:	100690ba 	slli	r3,r2,2
 8029e58:	00820174 	movhi	r2,2053
 8029e5c:	1885883a 	add	r2,r3,r2
 8029e60:	109d9d17 	ldw	r2,30324(r2)
 8029e64:	10000b26 	beq	r2,zero,8029e94 <ip_exit+0x84>
      {
         (*closers[n])();
 8029e68:	e0bfff17 	ldw	r2,-4(fp)
 8029e6c:	100690ba 	slli	r3,r2,2
 8029e70:	00820174 	movhi	r2,2053
 8029e74:	1885883a 	add	r2,r3,r2
 8029e78:	109d9d17 	ldw	r2,30324(r2)
 8029e7c:	103ee83a 	callr	r2
         closers[n] = NULL;
 8029e80:	e0bfff17 	ldw	r2,-4(fp)
 8029e84:	100690ba 	slli	r3,r2,2
 8029e88:	00820174 	movhi	r2,2053
 8029e8c:	1885883a 	add	r2,r3,r2
 8029e90:	101d9d15 	stw	zero,30324(r2)
   for (n=nclosers; n; n--)
 8029e94:	e0bfff17 	ldw	r2,-4(fp)
 8029e98:	10bfffc4 	addi	r2,r2,-1
 8029e9c:	e0bfff15 	stw	r2,-4(fp)
 8029ea0:	e0bfff17 	ldw	r2,-4(fp)
 8029ea4:	103fe11e 	bne	r2,zero,8029e2c <ip_exit+0x1c>
      }
   }
}
 8029ea8:	0001883a 	nop
 8029eac:	0001883a 	nop
 8029eb0:	e037883a 	mov	sp,fp
 8029eb4:	dfc00117 	ldw	ra,4(sp)
 8029eb8:	df000017 	ldw	fp,0(sp)
 8029ebc:	dec00204 	addi	sp,sp,8
 8029ec0:	f800283a 	ret

08029ec4 <if_netnumber>:
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
 8029ec4:	defffb04 	addi	sp,sp,-20
 8029ec8:	dfc00415 	stw	ra,16(sp)
 8029ecc:	df000315 	stw	fp,12(sp)
 8029ed0:	df000304 	addi	fp,sp,12
 8029ed4:	e13ffd15 	stw	r4,-12(fp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 8029ed8:	008201b4 	movhi	r2,2054
 8029edc:	10800f17 	ldw	r2,60(r2)
 8029ee0:	e0bffe15 	stw	r2,-8(fp)
 8029ee4:	e03fff15 	stw	zero,-4(fp)
 8029ee8:	00000b06 	br	8029f18 <if_netnumber+0x54>
   {
      if(ifp == nptr)
 8029eec:	e0fffe17 	ldw	r3,-8(fp)
 8029ef0:	e0bffd17 	ldw	r2,-12(fp)
 8029ef4:	1880021e 	bne	r3,r2,8029f00 <if_netnumber+0x3c>
        return (int)i;
 8029ef8:	e0bfff17 	ldw	r2,-4(fp)
 8029efc:	00000c06 	br	8029f30 <if_netnumber+0x6c>
   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 8029f00:	e0bffe17 	ldw	r2,-8(fp)
 8029f04:	10800017 	ldw	r2,0(r2)
 8029f08:	e0bffe15 	stw	r2,-8(fp)
 8029f0c:	e0bfff17 	ldw	r2,-4(fp)
 8029f10:	10800044 	addi	r2,r2,1
 8029f14:	e0bfff15 	stw	r2,-4(fp)
 8029f18:	e0bffe17 	ldw	r2,-8(fp)
 8029f1c:	103ff31e 	bne	r2,zero,8029eec <if_netnumber+0x28>
   }

   panic("bad net ptr");
 8029f20:	01020174 	movhi	r4,2053
 8029f24:	210bb404 	addi	r4,r4,11984
 8029f28:	802bd8c0 	call	802bd8c <panic>
   return 0;
 8029f2c:	0005883a 	mov	r2,zero
}
 8029f30:	e037883a 	mov	sp,fp
 8029f34:	dfc00117 	ldw	ra,4(sp)
 8029f38:	df000017 	ldw	fp,0(sp)
 8029f3c:	dec00204 	addi	sp,sp,8
 8029f40:	f800283a 	ret

08029f44 <igmp_init>:
 *
 * OUTPUT: None.
 */

int igmp_init(void)
{
 8029f44:	defffe04 	addi	sp,sp,-8
 8029f48:	df000115 	stw	fp,4(sp)
 8029f4c:	df000104 	addi	fp,sp,4
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
 8029f50:	00804034 	movhi	r2,256
 8029f54:	10803804 	addi	r2,r2,224
 8029f58:	d0a08315 	stw	r2,-32244(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
 8029f5c:	00808034 	movhi	r2,512
 8029f60:	10803804 	addi	r2,r2,224
 8029f64:	d0a08415 	stw	r2,-32240(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 8029f68:	008201b4 	movhi	r2,2054
 8029f6c:	10800f17 	ldw	r2,60(r2)
 8029f70:	e0bfff15 	stw	r2,-4(fp)
 8029f74:	00001006 	br	8029fb8 <igmp_init+0x74>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
 8029f78:	e0bfff17 	ldw	r2,-4(fp)
 8029f7c:	10802f03 	ldbu	r2,188(r2)
 8029f80:	10803fcc 	andi	r2,r2,255
 8029f84:	10800058 	cmpnei	r2,r2,1
 8029f88:	1000041e 	bne	r2,zero,8029f9c <igmp_init+0x58>
      {
         ifp->igmpv1_rtr_present = 1;
 8029f8c:	e0bfff17 	ldw	r2,-4(fp)
 8029f90:	00c00044 	movi	r3,1
 8029f94:	10c02d05 	stb	r3,180(r2)
 8029f98:	00000406 	br	8029fac <igmp_init+0x68>
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
 8029f9c:	e0bfff17 	ldw	r2,-4(fp)
 8029fa0:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
 8029fa4:	e0bfff17 	ldw	r2,-4(fp)
 8029fa8:	10002e15 	stw	zero,184(r2)
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 8029fac:	e0bfff17 	ldw	r2,-4(fp)
 8029fb0:	10800017 	ldw	r2,0(r2)
 8029fb4:	e0bfff15 	stw	r2,-4(fp)
 8029fb8:	e0bfff17 	ldw	r2,-4(fp)
 8029fbc:	103fee1e 	bne	r2,zero,8029f78 <igmp_init+0x34>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 8029fc0:	d0a0a317 	ldw	r2,-32116(gp)
 8029fc4:	10800504 	addi	r2,r2,20
 8029fc8:	d0a08215 	stw	r2,-32248(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
 8029fcc:	d0208115 	stw	zero,-32252(gp)

   return IGMP_OK;
 8029fd0:	0005883a 	mov	r2,zero
}
 8029fd4:	e037883a 	mov	sp,fp
 8029fd8:	df000017 	ldw	fp,0(sp)
 8029fdc:	dec00104 	addi	sp,sp,4
 8029fe0:	f800283a 	ret

08029fe4 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 8029fe4:	defffb04 	addi	sp,sp,-20
 8029fe8:	dfc00415 	stw	ra,16(sp)
 8029fec:	df000315 	stw	fp,12(sp)
 8029ff0:	df000304 	addi	fp,sp,12
 8029ff4:	e13ffd15 	stw	r4,-12(fp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
 8029ff8:	008201b4 	movhi	r2,2054
 8029ffc:	10bdd217 	ldw	r2,-2232(r2)
 802a000:	10c00044 	addi	r3,r2,1
 802a004:	008201b4 	movhi	r2,2054
 802a008:	10fdd215 	stw	r3,-2232(r2)
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 802a00c:	e13ffd17 	ldw	r4,-12(fp)
 802a010:	802a7480 	call	802a748 <igmp_validate>
 802a014:	e0bfff15 	stw	r2,-4(fp)
 802a018:	e0bfff17 	ldw	r2,-4(fp)
 802a01c:	1000181e 	bne	r2,zero,802a080 <igmp_input+0x9c>

   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
 802a020:	e0bffd17 	ldw	r2,-12(fp)
 802a024:	10800617 	ldw	r2,24(r2)
 802a028:	10802f03 	ldbu	r2,188(r2)
 802a02c:	e0bffec5 	stb	r2,-5(fp)
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
 802a030:	e0bffec3 	ldbu	r2,-5(fp)
 802a034:	10c00060 	cmpeqi	r3,r2,1
 802a038:	1800031e 	bne	r3,zero,802a048 <igmp_input+0x64>
 802a03c:	108000a0 	cmpeqi	r2,r2,2
 802a040:	1000041e 	bne	r2,zero,802a054 <igmp_input+0x70>
 802a044:	00000606 	br	802a060 <igmp_input+0x7c>
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
 802a048:	e13ffd17 	ldw	r4,-12(fp)
 802a04c:	80480900 	call	8048090 <igmpv1_input>
 802a050:	00001306 	br	802a0a0 <igmp_input+0xbc>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
 802a054:	e13ffd17 	ldw	r4,-12(fp)
 802a058:	80482f80 	call	80482f8 <igmpv2_input>
 802a05c:	00001006 	br	802a0a0 <igmp_input+0xbc>
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
 802a060:	008201b4 	movhi	r2,2054
 802a064:	10bddf17 	ldw	r2,-2180(r2)
 802a068:	10c00044 	addi	r3,r2,1
 802a06c:	008201b4 	movhi	r2,2054
 802a070:	10fddf15 	stw	r3,-2180(r2)
         rc = IGMP_ERR;
 802a074:	00bfffc4 	movi	r2,-1
 802a078:	e0bfff15 	stw	r2,-4(fp)
         break;
 802a07c:	00000106 	br	802a084 <igmp_input+0xa0>
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 802a080:	0001883a 	nop
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 802a084:	01000084 	movi	r4,2
 802a088:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 802a08c:	e13ffd17 	ldw	r4,-12(fp)
 802a090:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802a094:	01000084 	movi	r4,2
 802a098:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      
   return rc;
 802a09c:	e0bfff17 	ldw	r2,-4(fp)
}
 802a0a0:	e037883a 	mov	sp,fp
 802a0a4:	dfc00117 	ldw	ra,4(sp)
 802a0a8:	df000017 	ldw	fp,0(sp)
 802a0ac:	dec00204 	addi	sp,sp,8
 802a0b0:	f800283a 	ret

0802a0b4 <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
 802a0b4:	defffc04 	addi	sp,sp,-16
 802a0b8:	dfc00315 	stw	ra,12(sp)
 802a0bc:	df000215 	stw	fp,8(sp)
 802a0c0:	df000204 	addi	fp,sp,8
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
 802a0c4:	0009883a 	mov	r4,zero
 802a0c8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
 802a0cc:	d0a08117 	ldw	r2,-32252(gp)
 802a0d0:	1000031e 	bne	r2,zero,802a0e0 <igmp_fasttimo+0x2c>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
 802a0d4:	0009883a 	mov	r4,zero
 802a0d8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return;
 802a0dc:	00004c06 	br	802a210 <igmp_fasttimo+0x15c>
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802a0e0:	008201b4 	movhi	r2,2054
 802a0e4:	10800f17 	ldw	r2,60(r2)
 802a0e8:	e0bffe15 	stw	r2,-8(fp)
 802a0ec:	00004006 	br	802a1f0 <igmp_fasttimo+0x13c>
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 802a0f0:	e0bffe17 	ldw	r2,-8(fp)
 802a0f4:	10802c17 	ldw	r2,176(r2)
 802a0f8:	e0bfff15 	stw	r2,-4(fp)
 802a0fc:	00003706 	br	802a1dc <igmp_fasttimo+0x128>
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
 802a100:	e0bfff17 	ldw	r2,-4(fp)
 802a104:	10800017 	ldw	r2,0(r2)
 802a108:	10003026 	beq	r2,zero,802a1cc <igmp_fasttimo+0x118>
               continue;

         if (inm->inm_timer == 0)   /* timer not set */
 802a10c:	e0bfff17 	ldw	r2,-4(fp)
 802a110:	10800317 	ldw	r2,12(r2)
 802a114:	10002e26 	beq	r2,zero,802a1d0 <igmp_fasttimo+0x11c>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
 802a118:	e0bfff17 	ldw	r2,-4(fp)
 802a11c:	10800317 	ldw	r2,12(r2)
 802a120:	10ffffc4 	addi	r3,r2,-1
 802a124:	e0bfff17 	ldw	r2,-4(fp)
 802a128:	10c00315 	stw	r3,12(r2)
 802a12c:	e0bfff17 	ldw	r2,-4(fp)
 802a130:	10800317 	ldw	r2,12(r2)
 802a134:	1000261e 	bne	r2,zero,802a1d0 <igmp_fasttimo+0x11c>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
 802a138:	e0bffe17 	ldw	r2,-8(fp)
 802a13c:	10802d03 	ldbu	r2,180(r2)
 802a140:	10803fcc 	andi	r2,r2,255
 802a144:	10000426 	beq	r2,zero,802a158 <igmp_fasttimo+0xa4>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 802a148:	e17fff17 	ldw	r5,-4(fp)
 802a14c:	01000484 	movi	r4,18
 802a150:	802a2240 	call	802a224 <igmp_send>
 802a154:	00000306 	br	802a164 <igmp_fasttimo+0xb0>
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 802a158:	e17fff17 	ldw	r5,-4(fp)
 802a15c:	01000584 	movi	r4,22
 802a160:	802a2240 	call	802a224 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 802a164:	e0bffe17 	ldw	r2,-8(fp)
 802a168:	10802f03 	ldbu	r2,188(r2)
 802a16c:	10803fcc 	andi	r2,r2,255
 802a170:	10800098 	cmpnei	r2,r2,2
 802a174:	1000111e 	bne	r2,zero,802a1bc <igmp_fasttimo+0x108>
            {
               inm->last2send_report = IGMP_TRUE;
 802a178:	e0bfff17 	ldw	r2,-4(fp)
 802a17c:	00c00044 	movi	r3,1
 802a180:	10c00405 	stb	r3,16(r2)
               
               if (ifp->igmpv1_rtr_present)
 802a184:	e0bffe17 	ldw	r2,-8(fp)
 802a188:	10802d03 	ldbu	r2,180(r2)
 802a18c:	10803fcc 	andi	r2,r2,255
 802a190:	10000a26 	beq	r2,zero,802a1bc <igmp_fasttimo+0x108>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
 802a194:	e0bffe17 	ldw	r2,-8(fp)
 802a198:	10c02e17 	ldw	r3,184(r2)
 802a19c:	00a71014 	movui	r2,40000
 802a1a0:	1887883a 	add	r3,r3,r2
 802a1a4:	d0a0a317 	ldw	r2,-32116(gp)
 802a1a8:	1880042e 	bgeu	r3,r2,802a1bc <igmp_fasttimo+0x108>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
 802a1ac:	e0bffe17 	ldw	r2,-8(fp)
 802a1b0:	10002d05 	stb	zero,180(r2)
                     ifp->igmpv1_query_rcvd_time = 0;
 802a1b4:	e0bffe17 	ldw	r2,-8(fp)
 802a1b8:	10002e15 	stw	zero,184(r2)
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
 802a1bc:	d0a08117 	ldw	r2,-32252(gp)
 802a1c0:	10bfffc4 	addi	r2,r2,-1
 802a1c4:	d0a08115 	stw	r2,-32252(gp)
 802a1c8:	00000106 	br	802a1d0 <igmp_fasttimo+0x11c>
               continue;
 802a1cc:	0001883a 	nop
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 802a1d0:	e0bfff17 	ldw	r2,-4(fp)
 802a1d4:	10800517 	ldw	r2,20(r2)
 802a1d8:	e0bfff15 	stw	r2,-4(fp)
 802a1dc:	e0bfff17 	ldw	r2,-4(fp)
 802a1e0:	103fc71e 	bne	r2,zero,802a100 <igmp_fasttimo+0x4c>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802a1e4:	e0bffe17 	ldw	r2,-8(fp)
 802a1e8:	10800017 	ldw	r2,0(r2)
 802a1ec:	e0bffe15 	stw	r2,-8(fp)
 802a1f0:	e0bffe17 	ldw	r2,-8(fp)
 802a1f4:	103fbe1e 	bne	r2,zero,802a0f0 <igmp_fasttimo+0x3c>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 802a1f8:	d0a0a317 	ldw	r2,-32116(gp)
 802a1fc:	10800504 	addi	r2,r2,20
 802a200:	d0a08215 	stw	r2,-32248(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 802a204:	0009883a 	mov	r4,zero
 802a208:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   
   return;
 802a20c:	0001883a 	nop
}
 802a210:	e037883a 	mov	sp,fp
 802a214:	dfc00117 	ldw	ra,4(sp)
 802a218:	df000017 	ldw	fp,0(sp)
 802a21c:	dec00204 	addi	sp,sp,8
 802a220:	f800283a 	ret

0802a224 <igmp_send>:
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 802a224:	deffde04 	addi	sp,sp,-136
 802a228:	dfc02115 	stw	ra,132(sp)
 802a22c:	df002015 	stw	fp,128(sp)
 802a230:	df002004 	addi	fp,sp,128
 802a234:	2005883a 	mov	r2,r4
 802a238:	e17fe015 	stw	r5,-128(fp)
 802a23c:	e0bfe105 	stb	r2,-124(fp)
   struct igmp * igmp;
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
 802a240:	00800504 	movi	r2,20
 802a244:	e0bfe28d 	sth	r2,-118(fp)
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
 802a248:	d0a07c17 	ldw	r2,-32272(gp)
 802a24c:	10800704 	addi	r2,r2,28
 802a250:	e0bffdc5 	stb	r2,-9(fp)
   if ((type == IGMPv2_LEAVE_GROUP) || 
 802a254:	e0bfe103 	ldbu	r2,-124(fp)
 802a258:	108005e0 	cmpeqi	r2,r2,23
 802a25c:	1000031e 	bne	r2,zero,802a26c <igmp_send+0x48>
 802a260:	e0bfe103 	ldbu	r2,-124(fp)
 802a264:	10800598 	cmpnei	r2,r2,22
 802a268:	1000031e 	bne	r2,zero,802a278 <igmp_send+0x54>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
 802a26c:	e0bffdc3 	ldbu	r2,-9(fp)
 802a270:	10800104 	addi	r2,r2,4
 802a274:	e0bffdc5 	stb	r2,-9(fp)
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
 802a278:	01000084 	movi	r4,2
 802a27c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
 802a280:	e0bffdc3 	ldbu	r2,-9(fp)
 802a284:	1009883a 	mov	r4,r2
 802a288:	802f6300 	call	802f630 <pk_alloc>
 802a28c:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 802a290:	01000084 	movi	r4,2
 802a294:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
 802a298:	e0bffc17 	ldw	r2,-16(fp)
 802a29c:	1000061e 	bne	r2,zero,802a2b8 <igmp_send+0x94>
   {
      ++igmpstats.igmp_pkt_alloc_fail;
 802a2a0:	008201b4 	movhi	r2,2054
 802a2a4:	10bdde17 	ldw	r2,-2184(r2)
 802a2a8:	10c00044 	addi	r3,r2,1
 802a2ac:	008201b4 	movhi	r2,2054
 802a2b0:	10fdde15 	stw	r3,-2184(r2)
 802a2b4:	00007406 	br	802a488 <igmp_send+0x264>
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
 802a2b8:	e0bffc17 	ldw	r2,-16(fp)
 802a2bc:	10800317 	ldw	r2,12(r2)
 802a2c0:	e0bffb15 	stw	r2,-20(fp)
   pip->ip_src = inm->inm_netp->n_ipaddr;
 802a2c4:	e0bfe017 	ldw	r2,-128(fp)
 802a2c8:	10800117 	ldw	r2,4(r2)
 802a2cc:	10c00a17 	ldw	r3,40(r2)
 802a2d0:	e0bffb17 	ldw	r2,-20(fp)
 802a2d4:	10c00315 	stw	r3,12(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 802a2d8:	e0bfe103 	ldbu	r2,-124(fp)
 802a2dc:	108005d8 	cmpnei	r2,r2,23
 802a2e0:	1000041e 	bne	r2,zero,802a2f4 <igmp_send+0xd0>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
 802a2e4:	d0e08417 	ldw	r3,-32240(gp)
 802a2e8:	e0bffb17 	ldw	r2,-20(fp)
 802a2ec:	10c00415 	stw	r3,16(r2)
 802a2f0:	00000406 	br	802a304 <igmp_send+0xe0>
   }
   else
      pip->ip_dest = inm->inm_addr;
 802a2f4:	e0bfe017 	ldw	r2,-128(fp)
 802a2f8:	10c00017 	ldw	r3,0(r2)
 802a2fc:	e0bffb17 	ldw	r2,-20(fp)
 802a300:	10c00415 	stw	r3,16(r2)
   
   p->fhost = pip->ip_dest;
 802a304:	e0bffb17 	ldw	r2,-20(fp)
 802a308:	10c00417 	ldw	r3,16(r2)
 802a30c:	e0bffc17 	ldw	r2,-16(fp)
 802a310:	10c00715 	stw	r3,28(r2)

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
 802a314:	e0bffc17 	ldw	r2,-16(fp)
 802a318:	10800317 	ldw	r2,12(r2)
 802a31c:	10800504 	addi	r2,r2,20
 802a320:	e0bfff15 	stw	r2,-4(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 802a324:	e0bfe103 	ldbu	r2,-124(fp)
 802a328:	108005e0 	cmpeqi	r2,r2,23
 802a32c:	1000031e 	bne	r2,zero,802a33c <igmp_send+0x118>
 802a330:	e0bfe103 	ldbu	r2,-124(fp)
 802a334:	10800598 	cmpnei	r2,r2,22
 802a338:	1000061e 	bne	r2,zero,802a354 <igmp_send+0x130>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
 802a33c:	e0bfff17 	ldw	r2,-4(fp)
 802a340:	10800104 	addi	r2,r2,4
 802a344:	e0bfff15 	stw	r2,-4(fp)
      optp = &(opts [0]); /* one option (IP Router Alert) */
 802a348:	e0bfe284 	addi	r2,fp,-118
 802a34c:	e0bffe15 	stw	r2,-8(fp)
 802a350:	00000306 	br	802a360 <igmp_send+0x13c>
   }
   /* outgoing packet does not require any options */
   else 
      optp = &(opts [1]);
 802a354:	e0bfe284 	addi	r2,fp,-118
 802a358:	10800044 	addi	r2,r2,1
 802a35c:	e0bffe15 	stw	r2,-8(fp)
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
 802a360:	e0bfff17 	ldw	r2,-4(fp)
 802a364:	e0bffa15 	stw	r2,-24(fp)
   
   igmp->igmp_type = type;
 802a368:	e0bffa17 	ldw	r2,-24(fp)
 802a36c:	e0ffe103 	ldbu	r3,-124(fp)
 802a370:	10c00005 	stb	r3,0(r2)
   igmp->igmp_code = 0;
 802a374:	e0bffa17 	ldw	r2,-24(fp)
 802a378:	10000045 	stb	zero,1(r2)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
 802a37c:	e0bfe017 	ldw	r2,-128(fp)
 802a380:	10c00017 	ldw	r3,0(r2)
 802a384:	e0bffa17 	ldw	r2,-24(fp)
 802a388:	10c00115 	stw	r3,4(r2)
   igmp->igmp_cksum = 0;
 802a38c:	e0bffa17 	ldw	r2,-24(fp)
 802a390:	1000008d 	sth	zero,2(r2)
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 802a394:	01400104 	movi	r5,4
 802a398:	e13ffa17 	ldw	r4,-24(fp)
 802a39c:	802b98c0 	call	802b98c <cksum>
 802a3a0:	0084303a 	nor	r2,zero,r2
 802a3a4:	1007883a 	mov	r3,r2
 802a3a8:	e0bffa17 	ldw	r2,-24(fp)
 802a3ac:	10c0008d 	sth	r3,2(r2)

   imop = &simo;
 802a3b0:	e0bfe304 	addi	r2,fp,-116
 802a3b4:	e0bff915 	stw	r2,-28(fp)
   MEMSET(imop, 0, sizeof(simo));
 802a3b8:	01801604 	movi	r6,88
 802a3bc:	000b883a 	mov	r5,zero
 802a3c0:	e13ff917 	ldw	r4,-28(fp)
 802a3c4:	80038cc0 	call	80038cc <memset>
   imop->imo_multicast_netp = inm->inm_netp;
 802a3c8:	e0bfe017 	ldw	r2,-128(fp)
 802a3cc:	10c00117 	ldw	r3,4(r2)
 802a3d0:	e0bff917 	ldw	r2,-28(fp)
 802a3d4:	10c00015 	stw	r3,0(r2)
   imop->imo_multicast_ttl = 1;
 802a3d8:	e0bff917 	ldw	r2,-28(fp)
 802a3dc:	00c00044 	movi	r3,1
 802a3e0:	10c00105 	stb	r3,4(r2)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
 802a3e4:	e0bff917 	ldw	r2,-28(fp)
 802a3e8:	10000145 	stb	zero,5(r2)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
 802a3ec:	e0bffc17 	ldw	r2,-16(fp)
 802a3f0:	e0ffff17 	ldw	r3,-4(fp)
 802a3f4:	10c00315 	stw	r3,12(r2)
   p->nb_plen = sizeof(struct igmp);
 802a3f8:	e0bffc17 	ldw	r2,-16(fp)
 802a3fc:	00c00204 	movi	r3,8
 802a400:	10c00415 	stw	r3,16(r2)
   p->imo = imop;
 802a404:	e0bffc17 	ldw	r2,-16(fp)
 802a408:	e0fff917 	ldw	r3,-28(fp)
 802a40c:	10c00b15 	stw	r3,44(r2)
   
   ip_write2 (IGMP_PROT, p, optp);
 802a410:	e1bffe17 	ldw	r6,-8(fp)
 802a414:	e17ffc17 	ldw	r5,-16(fp)
 802a418:	01000084 	movi	r4,2
 802a41c:	80429400 	call	8042940 <ip_write2>

   if (type == IGMPv2_LEAVE_GROUP)
 802a420:	e0bfe103 	ldbu	r2,-124(fp)
 802a424:	108005d8 	cmpnei	r2,r2,23
 802a428:	1000061e 	bne	r2,zero,802a444 <igmp_send+0x220>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
 802a42c:	008201b4 	movhi	r2,2054
 802a430:	10bde917 	ldw	r2,-2140(r2)
 802a434:	10c00044 	addi	r3,r2,1
 802a438:	008201b4 	movhi	r2,2054
 802a43c:	10fde915 	stw	r3,-2140(r2)
 802a440:	00001106 	br	802a488 <igmp_send+0x264>
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
 802a444:	e0bfe103 	ldbu	r2,-124(fp)
 802a448:	10800598 	cmpnei	r2,r2,22
 802a44c:	1000061e 	bne	r2,zero,802a468 <igmp_send+0x244>
      ++igmpstats.igmpv2mode_v2_reports_sent;
 802a450:	008201b4 	movhi	r2,2054
 802a454:	10bdea17 	ldw	r2,-2136(r2)
 802a458:	10c00044 	addi	r3,r2,1
 802a45c:	008201b4 	movhi	r2,2054
 802a460:	10fdea15 	stw	r3,-2136(r2)
 802a464:	00000806 	br	802a488 <igmp_send+0x264>
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
 802a468:	e0bfe103 	ldbu	r2,-124(fp)
 802a46c:	10800498 	cmpnei	r2,r2,18
 802a470:	1000051e 	bne	r2,zero,802a488 <igmp_send+0x264>
      ++igmpstats.igmp_v1_reports_sent;
 802a474:	008201b4 	movhi	r2,2054
 802a478:	10bde817 	ldw	r2,-2144(r2)
 802a47c:	10c00044 	addi	r3,r2,1
 802a480:	008201b4 	movhi	r2,2054
 802a484:	10fde815 	stw	r3,-2144(r2)
}
 802a488:	e037883a 	mov	sp,fp
 802a48c:	dfc00117 	ldw	ra,4(sp)
 802a490:	df000017 	ldw	fp,0(sp)
 802a494:	dec00204 	addi	sp,sp,8
 802a498:	f800283a 	ret

0802a49c <igmp_joingroup>:
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
 802a49c:	defffc04 	addi	sp,sp,-16
 802a4a0:	dfc00315 	stw	ra,12(sp)
 802a4a4:	df000215 	stw	fp,8(sp)
 802a4a8:	df000204 	addi	fp,sp,8
 802a4ac:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
 802a4b0:	e0bffe17 	ldw	r2,-8(fp)
 802a4b4:	10800117 	ldw	r2,4(r2)
 802a4b8:	e0bfff15 	stw	r2,-4(fp)

   if (inm->inm_addr == igmp_all_hosts_group)
 802a4bc:	e0bffe17 	ldw	r2,-8(fp)
 802a4c0:	10c00017 	ldw	r3,0(r2)
 802a4c4:	d0a08317 	ldw	r2,-32244(gp)
 802a4c8:	1880031e 	bne	r3,r2,802a4d8 <igmp_joingroup+0x3c>
   {
      inm->inm_timer = 0;
 802a4cc:	e0bffe17 	ldw	r2,-8(fp)
 802a4d0:	10000315 	stw	zero,12(r2)
      }

      ++igmp_timers_are_running;
   }
   
   return;
 802a4d4:	00007706 	br	802a6b4 <igmp_joingroup+0x218>
      if (ifp->igmpv1_rtr_present)
 802a4d8:	e0bfff17 	ldw	r2,-4(fp)
 802a4dc:	10802d03 	ldbu	r2,180(r2)
 802a4e0:	10803fcc 	andi	r2,r2,255
 802a4e4:	10003426 	beq	r2,zero,802a5b8 <igmp_joingroup+0x11c>
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 802a4e8:	e17ffe17 	ldw	r5,-8(fp)
 802a4ec:	01000484 	movi	r4,18
 802a4f0:	802a2240 	call	802a224 <igmp_send>
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 802a4f4:	008201b4 	movhi	r2,2054
 802a4f8:	10c01617 	ldw	r3,88(r2)
 802a4fc:	008201b4 	movhi	r2,2054
 802a500:	10bdce17 	ldw	r2,-2248(r2)
 802a504:	10800a17 	ldw	r2,40(r2)
 802a508:	1008d63a 	srli	r4,r2,24
 802a50c:	008201b4 	movhi	r2,2054
 802a510:	10bdce17 	ldw	r2,-2248(r2)
 802a514:	10800a17 	ldw	r2,40(r2)
 802a518:	1004d23a 	srli	r2,r2,8
 802a51c:	10bfc00c 	andi	r2,r2,65280
 802a520:	2088b03a 	or	r4,r4,r2
 802a524:	008201b4 	movhi	r2,2054
 802a528:	10bdce17 	ldw	r2,-2248(r2)
 802a52c:	10800a17 	ldw	r2,40(r2)
 802a530:	1004923a 	slli	r2,r2,8
 802a534:	10803fec 	andhi	r2,r2,255
 802a538:	2088b03a 	or	r4,r4,r2
 802a53c:	008201b4 	movhi	r2,2054
 802a540:	10bdce17 	ldw	r2,-2248(r2)
 802a544:	10800a17 	ldw	r2,40(r2)
 802a548:	1004963a 	slli	r2,r2,24
 802a54c:	2084b03a 	or	r2,r4,r2
 802a550:	1887883a 	add	r3,r3,r2
 802a554:	e0bffe17 	ldw	r2,-8(fp)
 802a558:	10800017 	ldw	r2,0(r2)
 802a55c:	1008d63a 	srli	r4,r2,24
 802a560:	e0bffe17 	ldw	r2,-8(fp)
 802a564:	10800017 	ldw	r2,0(r2)
 802a568:	1004d23a 	srli	r2,r2,8
 802a56c:	10bfc00c 	andi	r2,r2,65280
 802a570:	2088b03a 	or	r4,r4,r2
 802a574:	e0bffe17 	ldw	r2,-8(fp)
 802a578:	10800017 	ldw	r2,0(r2)
 802a57c:	1004923a 	slli	r2,r2,8
 802a580:	10803fec 	andhi	r2,r2,255
 802a584:	2088b03a 	or	r4,r4,r2
 802a588:	e0bffe17 	ldw	r2,-8(fp)
 802a58c:	10800017 	ldw	r2,0(r2)
 802a590:	1004963a 	slli	r2,r2,24
 802a594:	2084b03a 	or	r2,r4,r2
 802a598:	1885883a 	add	r2,r3,r2
 802a59c:	01400c84 	movi	r5,50
 802a5a0:	1009883a 	mov	r4,r2
 802a5a4:	80120400 	call	8012040 <__umodsi3>
 802a5a8:	10c00044 	addi	r3,r2,1
 802a5ac:	e0bffe17 	ldw	r2,-8(fp)
 802a5b0:	10c00315 	stw	r3,12(r2)
 802a5b4:	00003306 	br	802a684 <igmp_joingroup+0x1e8>
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 802a5b8:	e17ffe17 	ldw	r5,-8(fp)
 802a5bc:	01000584 	movi	r4,22
 802a5c0:	802a2240 	call	802a224 <igmp_send>
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
 802a5c4:	008201b4 	movhi	r2,2054
 802a5c8:	10c01617 	ldw	r3,88(r2)
 802a5cc:	008201b4 	movhi	r2,2054
 802a5d0:	10bdce17 	ldw	r2,-2248(r2)
 802a5d4:	10800a17 	ldw	r2,40(r2)
 802a5d8:	1008d63a 	srli	r4,r2,24
 802a5dc:	008201b4 	movhi	r2,2054
 802a5e0:	10bdce17 	ldw	r2,-2248(r2)
 802a5e4:	10800a17 	ldw	r2,40(r2)
 802a5e8:	1004d23a 	srli	r2,r2,8
 802a5ec:	10bfc00c 	andi	r2,r2,65280
 802a5f0:	2088b03a 	or	r4,r4,r2
 802a5f4:	008201b4 	movhi	r2,2054
 802a5f8:	10bdce17 	ldw	r2,-2248(r2)
 802a5fc:	10800a17 	ldw	r2,40(r2)
 802a600:	1004923a 	slli	r2,r2,8
 802a604:	10803fec 	andhi	r2,r2,255
 802a608:	2088b03a 	or	r4,r4,r2
 802a60c:	008201b4 	movhi	r2,2054
 802a610:	10bdce17 	ldw	r2,-2248(r2)
 802a614:	10800a17 	ldw	r2,40(r2)
 802a618:	1004963a 	slli	r2,r2,24
 802a61c:	2084b03a 	or	r2,r4,r2
 802a620:	1887883a 	add	r3,r3,r2
 802a624:	e0bffe17 	ldw	r2,-8(fp)
 802a628:	10800017 	ldw	r2,0(r2)
 802a62c:	1008d63a 	srli	r4,r2,24
 802a630:	e0bffe17 	ldw	r2,-8(fp)
 802a634:	10800017 	ldw	r2,0(r2)
 802a638:	1004d23a 	srli	r2,r2,8
 802a63c:	10bfc00c 	andi	r2,r2,65280
 802a640:	2088b03a 	or	r4,r4,r2
 802a644:	e0bffe17 	ldw	r2,-8(fp)
 802a648:	10800017 	ldw	r2,0(r2)
 802a64c:	1004923a 	slli	r2,r2,8
 802a650:	10803fec 	andhi	r2,r2,255
 802a654:	2088b03a 	or	r4,r4,r2
 802a658:	e0bffe17 	ldw	r2,-8(fp)
 802a65c:	10800017 	ldw	r2,0(r2)
 802a660:	1004963a 	slli	r2,r2,24
 802a664:	2084b03a 	or	r2,r4,r2
 802a668:	1885883a 	add	r2,r3,r2
 802a66c:	01400c84 	movi	r5,50
 802a670:	1009883a 	mov	r4,r2
 802a674:	80120400 	call	8012040 <__umodsi3>
 802a678:	10c00044 	addi	r3,r2,1
 802a67c:	e0bffe17 	ldw	r2,-8(fp)
 802a680:	10c00315 	stw	r3,12(r2)
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 802a684:	e0bfff17 	ldw	r2,-4(fp)
 802a688:	10802f03 	ldbu	r2,188(r2)
 802a68c:	10803fcc 	andi	r2,r2,255
 802a690:	10800098 	cmpnei	r2,r2,2
 802a694:	1000031e 	bne	r2,zero,802a6a4 <igmp_joingroup+0x208>
         inm->last2send_report = IGMP_TRUE;
 802a698:	e0bffe17 	ldw	r2,-8(fp)
 802a69c:	00c00044 	movi	r3,1
 802a6a0:	10c00405 	stb	r3,16(r2)
      ++igmp_timers_are_running;
 802a6a4:	d0a08117 	ldw	r2,-32252(gp)
 802a6a8:	10800044 	addi	r2,r2,1
 802a6ac:	d0a08115 	stw	r2,-32252(gp)
   return;
 802a6b0:	0001883a 	nop
}     
 802a6b4:	e037883a 	mov	sp,fp
 802a6b8:	dfc00117 	ldw	ra,4(sp)
 802a6bc:	df000017 	ldw	fp,0(sp)
 802a6c0:	dec00204 	addi	sp,sp,8
 802a6c4:	f800283a 	ret

0802a6c8 <igmp_leavegroup>:
 *
 * OUTPUT: None.
 */

void igmp_leavegroup (struct in_multi * inm)
{
 802a6c8:	defffc04 	addi	sp,sp,-16
 802a6cc:	dfc00315 	stw	ra,12(sp)
 802a6d0:	df000215 	stw	fp,8(sp)
 802a6d4:	df000204 	addi	fp,sp,8
 802a6d8:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   ifp = inm->inm_netp;
 802a6dc:	e0bffe17 	ldw	r2,-8(fp)
 802a6e0:	10800117 	ldw	r2,4(r2)
 802a6e4:	e0bfff15 	stw	r2,-4(fp)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 802a6e8:	e0bfff17 	ldw	r2,-4(fp)
 802a6ec:	10802f03 	ldbu	r2,188(r2)
 802a6f0:	10803fcc 	andi	r2,r2,255
 802a6f4:	10800098 	cmpnei	r2,r2,2
 802a6f8:	10000d1e 	bne	r2,zero,802a730 <igmp_leavegroup+0x68>
       !ifp->igmpv1_rtr_present)
 802a6fc:	e0bfff17 	ldw	r2,-4(fp)
 802a700:	10802d03 	ldbu	r2,180(r2)
   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 802a704:	10803fcc 	andi	r2,r2,255
 802a708:	1000091e 	bne	r2,zero,802a730 <igmp_leavegroup+0x68>
   {
      if (inm->last2send_report == IGMP_TRUE)
 802a70c:	e0bffe17 	ldw	r2,-8(fp)
 802a710:	10800403 	ldbu	r2,16(r2)
 802a714:	10803fcc 	andi	r2,r2,255
 802a718:	10800058 	cmpnei	r2,r2,1
 802a71c:	1000041e 	bne	r2,zero,802a730 <igmp_leavegroup+0x68>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
 802a720:	e17ffe17 	ldw	r5,-8(fp)
 802a724:	010005c4 	movi	r4,23
 802a728:	802a2240 	call	802a224 <igmp_send>
   }
   
   return;
 802a72c:	0001883a 	nop
 802a730:	0001883a 	nop
}
 802a734:	e037883a 	mov	sp,fp
 802a738:	dfc00117 	ldw	ra,4(sp)
 802a73c:	df000017 	ldw	fp,0(sp)
 802a740:	dec00204 	addi	sp,sp,8
 802a744:	f800283a 	ret

0802a748 <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 802a748:	defff604 	addi	sp,sp,-40
 802a74c:	dfc00915 	stw	ra,36(sp)
 802a750:	df000815 	stw	fp,32(sp)
 802a754:	df000804 	addi	fp,sp,32
 802a758:	e13ff815 	stw	r4,-32(fp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
 802a75c:	e0bff817 	ldw	r2,-32(fp)
 802a760:	10800317 	ldw	r2,12(r2)
 802a764:	e0bfff15 	stw	r2,-4(fp)

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 802a768:	e0bff817 	ldw	r2,-32(fp)
 802a76c:	10c00417 	ldw	r3,16(r2)
 802a770:	e0bfff17 	ldw	r2,-4(fp)
 802a774:	10800003 	ldbu	r2,0(r2)
 802a778:	10803fcc 	andi	r2,r2,255
 802a77c:	100490ba 	slli	r2,r2,2
 802a780:	10800f0c 	andi	r2,r2,60
 802a784:	1885c83a 	sub	r2,r3,r2
 802a788:	e0bffe15 	stw	r2,-8(fp)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 802a78c:	e0bffe17 	ldw	r2,-8(fp)
 802a790:	10800220 	cmpeqi	r2,r2,8
 802a794:	1000071e 	bne	r2,zero,802a7b4 <igmp_validate+0x6c>
   {
      ++igmpstats.igmp_badlen_rcvd;
 802a798:	008201b4 	movhi	r2,2054
 802a79c:	10bddc17 	ldw	r2,-2192(r2)
 802a7a0:	10c00044 	addi	r3,r2,1
 802a7a4:	008201b4 	movhi	r2,2054
 802a7a8:	10fddc15 	stw	r3,-2192(r2)
      return ENP_BAD_HEADER;
 802a7ac:	00bff804 	movi	r2,-32
 802a7b0:	00009706 	br	802aa10 <igmp_validate+0x2c8>
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
 802a7b4:	e0bfff17 	ldw	r2,-4(fp)
 802a7b8:	10800003 	ldbu	r2,0(r2)
 802a7bc:	10803fcc 	andi	r2,r2,255
 802a7c0:	100490ba 	slli	r2,r2,2
 802a7c4:	10800f0c 	andi	r2,r2,60
 802a7c8:	e0ffff17 	ldw	r3,-4(fp)
 802a7cc:	1885883a 	add	r2,r3,r2
 802a7d0:	e0bffd15 	stw	r2,-12(fp)
   osum = igmp->igmp_cksum;
 802a7d4:	e0bffd17 	ldw	r2,-12(fp)
 802a7d8:	1080008b 	ldhu	r2,2(r2)
 802a7dc:	e0bffc8d 	sth	r2,-14(fp)
   igmp->igmp_cksum = 0;
 802a7e0:	e0bffd17 	ldw	r2,-12(fp)
 802a7e4:	1000008d 	sth	zero,2(r2)
   xsum = ~cksum(igmp, igmplen>>1);
 802a7e8:	e0bffe17 	ldw	r2,-8(fp)
 802a7ec:	1005d07a 	srai	r2,r2,1
 802a7f0:	100b883a 	mov	r5,r2
 802a7f4:	e13ffd17 	ldw	r4,-12(fp)
 802a7f8:	802b98c0 	call	802b98c <cksum>
 802a7fc:	0084303a 	nor	r2,zero,r2
 802a800:	e0bffc0d 	sth	r2,-16(fp)
   if (xsum != osum)
 802a804:	e0fffc0b 	ldhu	r3,-16(fp)
 802a808:	e0bffc8b 	ldhu	r2,-14(fp)
 802a80c:	18800a26 	beq	r3,r2,802a838 <igmp_validate+0xf0>
   {
      igmp->igmp_cksum = osum;
 802a810:	e0bffd17 	ldw	r2,-12(fp)
 802a814:	e0fffc8b 	ldhu	r3,-14(fp)
 802a818:	10c0008d 	sth	r3,2(r2)
      ++igmpstats.igmp_badsum_rcvd;
 802a81c:	008201b4 	movhi	r2,2054
 802a820:	10bddd17 	ldw	r2,-2188(r2)
 802a824:	10c00044 	addi	r3,r2,1
 802a828:	008201b4 	movhi	r2,2054
 802a82c:	10fddd15 	stw	r3,-2188(r2)
      return ENP_BAD_HEADER;
 802a830:	00bff804 	movi	r2,-32
 802a834:	00007606 	br	802aa10 <igmp_validate+0x2c8>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
 802a838:	e0bffd17 	ldw	r2,-12(fp)
 802a83c:	10800003 	ldbu	r2,0(r2)
 802a840:	e0bffbc5 	stb	r2,-17(fp)
   mcgrp_addr = ntohl(igmp->igmp_group); 
 802a844:	e0bffd17 	ldw	r2,-12(fp)
 802a848:	10800117 	ldw	r2,4(r2)
 802a84c:	1006d63a 	srli	r3,r2,24
 802a850:	e0bffd17 	ldw	r2,-12(fp)
 802a854:	10800117 	ldw	r2,4(r2)
 802a858:	1004d23a 	srli	r2,r2,8
 802a85c:	10bfc00c 	andi	r2,r2,65280
 802a860:	1886b03a 	or	r3,r3,r2
 802a864:	e0bffd17 	ldw	r2,-12(fp)
 802a868:	10800117 	ldw	r2,4(r2)
 802a86c:	1004923a 	slli	r2,r2,8
 802a870:	10803fec 	andhi	r2,r2,255
 802a874:	1886b03a 	or	r3,r3,r2
 802a878:	e0bffd17 	ldw	r2,-12(fp)
 802a87c:	10800117 	ldw	r2,4(r2)
 802a880:	1004963a 	slli	r2,r2,24
 802a884:	1884b03a 	or	r2,r3,r2
 802a888:	e0bffa15 	stw	r2,-24(fp)
   resp_time = igmp->igmp_code;
 802a88c:	e0bffd17 	ldw	r2,-12(fp)
 802a890:	10800043 	ldbu	r2,1(r2)
 802a894:	e0bff9c5 	stb	r2,-25(fp)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
 802a898:	e0bffbc3 	ldbu	r2,-17(fp)
 802a89c:	10800458 	cmpnei	r2,r2,17
 802a8a0:	10002c1e 	bne	r2,zero,802a954 <igmp_validate+0x20c>
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
 802a8a4:	e0bff9c3 	ldbu	r2,-25(fp)
 802a8a8:	10000426 	beq	r2,zero,802a8bc <igmp_validate+0x174>
 802a8ac:	e0bff9c3 	ldbu	r2,-25(fp)
 802a8b0:	10000d26 	beq	r2,zero,802a8e8 <igmp_validate+0x1a0>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
 802a8b4:	e0bffa17 	ldw	r2,-24(fp)
 802a8b8:	10000b1e 	bne	r2,zero,802a8e8 <igmp_validate+0x1a0>
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
 802a8bc:	e0bfff17 	ldw	r2,-4(fp)
 802a8c0:	10c00417 	ldw	r3,16(r2)
 802a8c4:	d0a08317 	ldw	r2,-32244(gp)
 802a8c8:	18800726 	beq	r3,r2,802a8e8 <igmp_validate+0x1a0>
         {
            ++igmpstats.igmp_bad_queries_rcvd;
 802a8cc:	008201b4 	movhi	r2,2054
 802a8d0:	10bde017 	ldw	r2,-2176(r2)
 802a8d4:	10c00044 	addi	r3,r2,1
 802a8d8:	008201b4 	movhi	r2,2054
 802a8dc:	10fde015 	stw	r3,-2176(r2)
            return ENP_BAD_HEADER;
 802a8e0:	00bff804 	movi	r2,-32
 802a8e4:	00004a06 	br	802aa10 <igmp_validate+0x2c8>
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
 802a8e8:	e0bff9c3 	ldbu	r2,-25(fp)
 802a8ec:	10001926 	beq	r2,zero,802a954 <igmp_validate+0x20c>
 802a8f0:	e0bffa17 	ldw	r2,-24(fp)
 802a8f4:	10001726 	beq	r2,zero,802a954 <igmp_validate+0x20c>
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
 802a8f8:	e0bff817 	ldw	r2,-32(fp)
 802a8fc:	10800617 	ldw	r2,24(r2)
 802a900:	10802f03 	ldbu	r2,188(r2)
 802a904:	10803fcc 	andi	r2,r2,255
 802a908:	10800058 	cmpnei	r2,r2,1
 802a90c:	1000021e 	bne	r2,zero,802a918 <igmp_validate+0x1d0>
         {
            /* IGMPv1 code does not understand a IGMPv2 Group-
             * Specific Query */
            return ENP_BAD_HEADER; 
 802a910:	00bff804 	movi	r2,-32
 802a914:	00003e06 	br	802aa10 <igmp_validate+0x2c8>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 802a918:	e0bffa17 	ldw	r2,-24(fp)
 802a91c:	10fc002c 	andhi	r3,r2,61440
 802a920:	00b80034 	movhi	r2,57344
 802a924:	1880041e 	bne	r3,r2,802a938 <igmp_validate+0x1f0>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
 802a928:	e0bffd17 	ldw	r2,-12(fp)
 802a92c:	10c00117 	ldw	r3,4(r2)
 802a930:	d0a08317 	ldw	r2,-32244(gp)
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 802a934:	1880071e 	bne	r3,r2,802a954 <igmp_validate+0x20c>
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
 802a938:	008201b4 	movhi	r2,2054
 802a93c:	10bde317 	ldw	r2,-2164(r2)
 802a940:	10c00044 	addi	r3,r2,1
 802a944:	008201b4 	movhi	r2,2054
 802a948:	10fde315 	stw	r3,-2164(r2)
            /* caller will free received packet */
            return ENP_BAD_HEADER;
 802a94c:	00bff804 	movi	r2,-32
 802a950:	00002f06 	br	802aa10 <igmp_validate+0x2c8>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
 802a954:	e0bffbc3 	ldbu	r2,-17(fp)
 802a958:	108004a0 	cmpeqi	r2,r2,18
 802a95c:	1000031e 	bne	r2,zero,802a96c <igmp_validate+0x224>
 802a960:	e0bffbc3 	ldbu	r2,-17(fp)
 802a964:	10800598 	cmpnei	r2,r2,22
 802a968:	1000101e 	bne	r2,zero,802a9ac <igmp_validate+0x264>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
 802a96c:	e0bffd17 	ldw	r2,-12(fp)
 802a970:	10c00117 	ldw	r3,4(r2)
 802a974:	e0bfff17 	ldw	r2,-4(fp)
 802a978:	10800417 	ldw	r2,16(r2)
 802a97c:	1880041e 	bne	r3,r2,802a990 <igmp_validate+0x248>
          (!IN_MULTICAST(mcgrp_addr)))
 802a980:	e0bffa17 	ldw	r2,-24(fp)
 802a984:	10fc002c 	andhi	r3,r2,61440
      if ((igmp->igmp_group != pip->ip_dest) ||
 802a988:	00b80034 	movhi	r2,57344
 802a98c:	18800726 	beq	r3,r2,802a9ac <igmp_validate+0x264>
      {
         ++igmpstats.igmp_bad_reports_rcvd;
 802a990:	008201b4 	movhi	r2,2054
 802a994:	10bde117 	ldw	r2,-2172(r2)
 802a998:	10c00044 	addi	r3,r2,1
 802a99c:	008201b4 	movhi	r2,2054
 802a9a0:	10fde115 	stw	r3,-2172(r2)
         return ENP_BAD_HEADER;    
 802a9a4:	00bff804 	movi	r2,-32
 802a9a8:	00001906 	br	802aa10 <igmp_validate+0x2c8>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
 802a9ac:	e0bffbc3 	ldbu	r2,-17(fp)
 802a9b0:	108005e0 	cmpeqi	r2,r2,23
 802a9b4:	10000a1e 	bne	r2,zero,802a9e0 <igmp_validate+0x298>
 802a9b8:	e0bffbc3 	ldbu	r2,-17(fp)
 802a9bc:	108005a0 	cmpeqi	r2,r2,22
 802a9c0:	1000071e 	bne	r2,zero,802a9e0 <igmp_validate+0x298>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
 802a9c4:	e0bffbc3 	ldbu	r2,-17(fp)
 802a9c8:	10800458 	cmpnei	r2,r2,17
 802a9cc:	10000f1e 	bne	r2,zero,802aa0c <igmp_validate+0x2c4>
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
 802a9d0:	e0bffd17 	ldw	r2,-12(fp)
 802a9d4:	10800043 	ldbu	r2,1(r2)
 802a9d8:	10803fcc 	andi	r2,r2,255
 802a9dc:	10000b26 	beq	r2,zero,802aa0c <igmp_validate+0x2c4>
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
 802a9e0:	e13fff17 	ldw	r4,-4(fp)
 802a9e4:	804880c0 	call	804880c <igmpv2_chk4_rtr_alert_opt>
 802a9e8:	10803fcc 	andi	r2,r2,255
 802a9ec:	1000071e 	bne	r2,zero,802aa0c <igmp_validate+0x2c4>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
 802a9f0:	008201b4 	movhi	r2,2054
 802a9f4:	10bde617 	ldw	r2,-2152(r2)
 802a9f8:	10c00044 	addi	r3,r2,1
 802a9fc:	008201b4 	movhi	r2,2054
 802aa00:	10fde615 	stw	r3,-2152(r2)
         return ENP_BAD_HEADER;
 802aa04:	00bff804 	movi	r2,-32
 802aa08:	00000106 	br	802aa10 <igmp_validate+0x2c8>
      }
   }
#endif   

   /* validation successful */
   return IGMP_OK;
 802aa0c:	0005883a 	mov	r2,zero
}
 802aa10:	e037883a 	mov	sp,fp
 802aa14:	dfc00117 	ldw	ra,4(sp)
 802aa18:	df000017 	ldw	fp,0(sp)
 802aa1c:	dec00204 	addi	sp,sp,8
 802aa20:	f800283a 	ret

0802aa24 <igmp_print_stats>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
 802aa24:	defffa04 	addi	sp,sp,-24
 802aa28:	dfc00515 	stw	ra,20(sp)
 802aa2c:	df000415 	stw	fp,16(sp)
 802aa30:	df000404 	addi	fp,sp,16
 802aa34:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802aa38:	008201b4 	movhi	r2,2054
 802aa3c:	10800f17 	ldw	r2,60(r2)
 802aa40:	e0bfff15 	stw	r2,-4(fp)
 802aa44:	00003b06 	br	802ab34 <igmp_print_stats+0x110>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
                 ifp->name, 
 802aa48:	e0bfff17 	ldw	r2,-4(fp)
 802aa4c:	10c00104 	addi	r3,r2,4
                 ifp->igmp_oper_mode, 
 802aa50:	e0bfff17 	ldw	r2,-4(fp)
 802aa54:	10802f03 	ldbu	r2,188(r2)
      ns_printf (pio, "%s: mode: %u [%s] ", 
 802aa58:	11003fcc 	andi	r4,r2,255
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
 802aa5c:	e0bfff17 	ldw	r2,-4(fp)
 802aa60:	10802f03 	ldbu	r2,188(r2)
      ns_printf (pio, "%s: mode: %u [%s] ", 
 802aa64:	10803fcc 	andi	r2,r2,255
 802aa68:	10800058 	cmpnei	r2,r2,1
 802aa6c:	1000031e 	bne	r2,zero,802aa7c <igmp_print_stats+0x58>
 802aa70:	00820174 	movhi	r2,2053
 802aa74:	108bb704 	addi	r2,r2,11996
 802aa78:	00000206 	br	802aa84 <igmp_print_stats+0x60>
 802aa7c:	00820174 	movhi	r2,2053
 802aa80:	108bb804 	addi	r2,r2,12000
 802aa84:	d8800015 	stw	r2,0(sp)
 802aa88:	200f883a 	mov	r7,r4
 802aa8c:	180d883a 	mov	r6,r3
 802aa90:	01420174 	movhi	r5,2053
 802aa94:	294bb904 	addi	r5,r5,12004
 802aa98:	e13ffe17 	ldw	r4,-8(fp)
 802aa9c:	802bfa40 	call	802bfa4 <ns_printf>
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 802aaa0:	e0bfff17 	ldw	r2,-4(fp)
 802aaa4:	10802f03 	ldbu	r2,188(r2)
 802aaa8:	10803fcc 	andi	r2,r2,255
 802aaac:	10800098 	cmpnei	r2,r2,2
 802aab0:	1000191e 	bne	r2,zero,802ab18 <igmp_print_stats+0xf4>
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
                    ifp->igmpv1_rtr_present,
 802aab4:	e0bfff17 	ldw	r2,-4(fp)
 802aab8:	10802d03 	ldbu	r2,180(r2)
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 802aabc:	11403fcc 	andi	r5,r2,255
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
 802aac0:	e0bfff17 	ldw	r2,-4(fp)
 802aac4:	10802d03 	ldbu	r2,180(r2)
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 802aac8:	10803fcc 	andi	r2,r2,255
 802aacc:	10800058 	cmpnei	r2,r2,1
 802aad0:	1000031e 	bne	r2,zero,802aae0 <igmp_print_stats+0xbc>
 802aad4:	00820174 	movhi	r2,2053
 802aad8:	108bbe04 	addi	r2,r2,12024
 802aadc:	00000206 	br	802aae8 <igmp_print_stats+0xc4>
 802aae0:	00820174 	movhi	r2,2053
 802aae4:	108bc004 	addi	r2,r2,12032
 802aae8:	e0ffff17 	ldw	r3,-4(fp)
 802aaec:	18c02e17 	ldw	r3,184(r3)
 802aaf0:	d120a317 	ldw	r4,-32116(gp)
 802aaf4:	d9000115 	stw	r4,4(sp)
 802aaf8:	d8c00015 	stw	r3,0(sp)
 802aafc:	100f883a 	mov	r7,r2
 802ab00:	280d883a 	mov	r6,r5
 802ab04:	01420174 	movhi	r5,2053
 802ab08:	294bc204 	addi	r5,r5,12040
 802ab0c:	e13ffe17 	ldw	r4,-8(fp)
 802ab10:	802bfa40 	call	802bfa4 <ns_printf>
 802ab14:	00000406 	br	802ab28 <igmp_print_stats+0x104>
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
 802ab18:	01420174 	movhi	r5,2053
 802ab1c:	294bcd04 	addi	r5,r5,12084
 802ab20:	e13ffe17 	ldw	r4,-8(fp)
 802ab24:	802bfa40 	call	802bfa4 <ns_printf>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ab28:	e0bfff17 	ldw	r2,-4(fp)
 802ab2c:	10800017 	ldw	r2,0(r2)
 802ab30:	e0bfff15 	stw	r2,-4(fp)
 802ab34:	e0bfff17 	ldw	r2,-4(fp)
 802ab38:	103fc31e 	bne	r2,zero,802aa48 <igmp_print_stats+0x24>
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
 802ab3c:	008201b4 	movhi	r2,2054
 802ab40:	10bdd217 	ldw	r2,-2232(r2)
 802ab44:	d0e08117 	ldw	r3,-32252(gp)
 802ab48:	180f883a 	mov	r7,r3
 802ab4c:	100d883a 	mov	r6,r2
 802ab50:	01420174 	movhi	r5,2053
 802ab54:	294bce04 	addi	r5,r5,12088
 802ab58:	e13ffe17 	ldw	r4,-8(fp)
 802ab5c:	802bfa40 	call	802bfa4 <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
 802ab60:	008201b4 	movhi	r2,2054
 802ab64:	10bdd317 	ldw	r2,-2228(r2)
 802ab68:	100d883a 	mov	r6,r2
 802ab6c:	01420174 	movhi	r5,2053
 802ab70:	294bdb04 	addi	r5,r5,12140
 802ab74:	e13ffe17 	ldw	r4,-8(fp)
 802ab78:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
 802ab7c:	008201b4 	movhi	r2,2054
 802ab80:	10bdd417 	ldw	r2,-2224(r2)
 802ab84:	100d883a 	mov	r6,r2
 802ab88:	01420174 	movhi	r5,2053
 802ab8c:	294bec04 	addi	r5,r5,12208
 802ab90:	e13ffe17 	ldw	r4,-8(fp)
 802ab94:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
 802ab98:	008201b4 	movhi	r2,2054
 802ab9c:	10bdd517 	ldw	r2,-2220(r2)
 802aba0:	100d883a 	mov	r6,r2
 802aba4:	01420174 	movhi	r5,2053
 802aba8:	294bf804 	addi	r5,r5,12256
 802abac:	e13ffe17 	ldw	r4,-8(fp)
 802abb0:	802bfa40 	call	802bfa4 <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
 802abb4:	008201b4 	movhi	r2,2054
 802abb8:	10bdd617 	ldw	r2,-2216(r2)
 802abbc:	100d883a 	mov	r6,r2
 802abc0:	01420174 	movhi	r5,2053
 802abc4:	294c0b04 	addi	r5,r5,12332
 802abc8:	e13ffe17 	ldw	r4,-8(fp)
 802abcc:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
 802abd0:	008201b4 	movhi	r2,2054
 802abd4:	10fdd717 	ldw	r3,-2212(r2)
 802abd8:	008201b4 	movhi	r2,2054
 802abdc:	10bdd817 	ldw	r2,-2208(r2)
 802abe0:	100f883a 	mov	r7,r2
 802abe4:	180d883a 	mov	r6,r3
 802abe8:	01420174 	movhi	r5,2053
 802abec:	294c1c04 	addi	r5,r5,12400
 802abf0:	e13ffe17 	ldw	r4,-8(fp)
 802abf4:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
 802abf8:	008201b4 	movhi	r2,2054
 802abfc:	10bdd917 	ldw	r2,-2204(r2)
 802ac00:	100d883a 	mov	r6,r2
 802ac04:	01420174 	movhi	r5,2053
 802ac08:	294bf804 	addi	r5,r5,12256
 802ac0c:	e13ffe17 	ldw	r4,-8(fp)
 802ac10:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
 802ac14:	008201b4 	movhi	r2,2054
 802ac18:	10bdda17 	ldw	r2,-2200(r2)
 802ac1c:	100d883a 	mov	r6,r2
 802ac20:	01420174 	movhi	r5,2053
 802ac24:	294c2f04 	addi	r5,r5,12476
 802ac28:	e13ffe17 	ldw	r4,-8(fp)
 802ac2c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
 802ac30:	008201b4 	movhi	r2,2054
 802ac34:	10bddb17 	ldw	r2,-2196(r2)
 802ac38:	100d883a 	mov	r6,r2
 802ac3c:	01420174 	movhi	r5,2053
 802ac40:	294c4004 	addi	r5,r5,12544
 802ac44:	e13ffe17 	ldw	r4,-8(fp)
 802ac48:	802bfa40 	call	802bfa4 <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
 802ac4c:	008201b4 	movhi	r2,2054
 802ac50:	10fde917 	ldw	r3,-2140(r2)
 802ac54:	008201b4 	movhi	r2,2054
 802ac58:	10bdea17 	ldw	r2,-2136(r2)
 802ac5c:	100f883a 	mov	r7,r2
 802ac60:	180d883a 	mov	r6,r3
 802ac64:	01420174 	movhi	r5,2053
 802ac68:	294c4c04 	addi	r5,r5,12592
 802ac6c:	e13ffe17 	ldw	r4,-8(fp)
 802ac70:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
 802ac74:	008201b4 	movhi	r2,2054
 802ac78:	10bde817 	ldw	r2,-2144(r2)
 802ac7c:	100d883a 	mov	r6,r2
 802ac80:	01420174 	movhi	r5,2053
 802ac84:	294c5f04 	addi	r5,r5,12668
 802ac88:	e13ffe17 	ldw	r4,-8(fp)
 802ac8c:	802bfa40 	call	802bfa4 <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
 802ac90:	008201b4 	movhi	r2,2054
 802ac94:	10bddc17 	ldw	r2,-2192(r2)
 802ac98:	100d883a 	mov	r6,r2
 802ac9c:	01420174 	movhi	r5,2053
 802aca0:	294c6b04 	addi	r5,r5,12716
 802aca4:	e13ffe17 	ldw	r4,-8(fp)
 802aca8:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
 802acac:	008201b4 	movhi	r2,2054
 802acb0:	10bddd17 	ldw	r2,-2188(r2)
 802acb4:	100d883a 	mov	r6,r2
 802acb8:	01420174 	movhi	r5,2053
 802acbc:	294c7704 	addi	r5,r5,12764
 802acc0:	e13ffe17 	ldw	r4,-8(fp)
 802acc4:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
 802acc8:	008201b4 	movhi	r2,2054
 802accc:	10fdde17 	ldw	r3,-2184(r2)
 802acd0:	008201b4 	movhi	r2,2054
 802acd4:	10bddf17 	ldw	r2,-2180(r2)
 802acd8:	100f883a 	mov	r7,r2
 802acdc:	180d883a 	mov	r6,r3
 802ace0:	01420174 	movhi	r5,2053
 802ace4:	294c8304 	addi	r5,r5,12812
 802ace8:	e13ffe17 	ldw	r4,-8(fp)
 802acec:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
 802acf0:	008201b4 	movhi	r2,2054
 802acf4:	10fde017 	ldw	r3,-2176(r2)
 802acf8:	008201b4 	movhi	r2,2054
 802acfc:	10bde117 	ldw	r2,-2172(r2)
 802ad00:	100f883a 	mov	r7,r2
 802ad04:	180d883a 	mov	r6,r3
 802ad08:	01420174 	movhi	r5,2053
 802ad0c:	294c9704 	addi	r5,r5,12892
 802ad10:	e13ffe17 	ldw	r4,-8(fp)
 802ad14:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
 802ad18:	008201b4 	movhi	r2,2054
 802ad1c:	10bde317 	ldw	r2,-2164(r2)
 802ad20:	100d883a 	mov	r6,r2
 802ad24:	01420174 	movhi	r5,2053
 802ad28:	294ca704 	addi	r5,r5,12956
 802ad2c:	e13ffe17 	ldw	r4,-8(fp)
 802ad30:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
 802ad34:	008201b4 	movhi	r2,2054
 802ad38:	10bde417 	ldw	r2,-2160(r2)
 802ad3c:	100d883a 	mov	r6,r2
 802ad40:	01420174 	movhi	r5,2053
 802ad44:	294cb404 	addi	r5,r5,13008
 802ad48:	e13ffe17 	ldw	r4,-8(fp)
 802ad4c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
 802ad50:	008201b4 	movhi	r2,2054
 802ad54:	10bde517 	ldw	r2,-2156(r2)
 802ad58:	100d883a 	mov	r6,r2
 802ad5c:	01420174 	movhi	r5,2053
 802ad60:	294cc704 	addi	r5,r5,13084
 802ad64:	e13ffe17 	ldw	r4,-8(fp)
 802ad68:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
 802ad6c:	008201b4 	movhi	r2,2054
 802ad70:	10bde617 	ldw	r2,-2152(r2)
 802ad74:	100d883a 	mov	r6,r2
 802ad78:	01420174 	movhi	r5,2053
 802ad7c:	294cd804 	addi	r5,r5,13152
 802ad80:	e13ffe17 	ldw	r4,-8(fp)
 802ad84:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
 802ad88:	008201b4 	movhi	r2,2054
 802ad8c:	10bde217 	ldw	r2,-2168(r2)
 802ad90:	100d883a 	mov	r6,r2
 802ad94:	01420174 	movhi	r5,2053
 802ad98:	294cea04 	addi	r5,r5,13224
 802ad9c:	e13ffe17 	ldw	r4,-8(fp)
 802ada0:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
 802ada4:	008201b4 	movhi	r2,2054
 802ada8:	10bde717 	ldw	r2,-2148(r2)
 802adac:	100d883a 	mov	r6,r2
 802adb0:	01420174 	movhi	r5,2053
 802adb4:	294cfa04 	addi	r5,r5,13288
 802adb8:	e13ffe17 	ldw	r4,-8(fp)
 802adbc:	802bfa40 	call	802bfa4 <ns_printf>
   
   return IGMP_OK;
 802adc0:	0005883a 	mov	r2,zero
}
 802adc4:	e037883a 	mov	sp,fp
 802adc8:	dfc00117 	ldw	ra,4(sp)
 802adcc:	df000017 	ldw	fp,0(sp)
 802add0:	dec00204 	addi	sp,sp,8
 802add4:	f800283a 	ret

0802add8 <bsd_accept>:
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 802add8:	defff404 	addi	sp,sp,-48
 802addc:	dfc00b15 	stw	ra,44(sp)
 802ade0:	df000a15 	stw	fp,40(sp)
 802ade4:	df000a04 	addi	fp,sp,40
 802ade8:	e13ff815 	stw	r4,-32(fp)
 802adec:	e17ff715 	stw	r5,-36(fp)
 802adf0:	e1bff615 	stw	r6,-40(fp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 802adf4:	e0bff817 	ldw	r2,-32(fp)
 802adf8:	10bff804 	addi	r2,r2,-32
 802adfc:	100490ba 	slli	r2,r2,2
 802ae00:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802ae04:	008201b4 	movhi	r2,2054
 802ae08:	10bf0b04 	addi	r2,r2,-980
 802ae0c:	e0bfff15 	stw	r2,-4(fp)
 802ae10:	00000606 	br	802ae2c <bsd_accept+0x54>
 802ae14:	e0ffff17 	ldw	r3,-4(fp)
 802ae18:	e0bffe17 	ldw	r2,-8(fp)
 802ae1c:	18800626 	beq	r3,r2,802ae38 <bsd_accept+0x60>
 802ae20:	e0bfff17 	ldw	r2,-4(fp)
 802ae24:	10800017 	ldw	r2,0(r2)
 802ae28:	e0bfff15 	stw	r2,-4(fp)
 802ae2c:	e0bfff17 	ldw	r2,-4(fp)
 802ae30:	103ff81e 	bne	r2,zero,802ae14 <bsd_accept+0x3c>
 802ae34:	00000106 	br	802ae3c <bsd_accept+0x64>
 802ae38:	0001883a 	nop
 802ae3c:	e0ffff17 	ldw	r3,-4(fp)
 802ae40:	e0bffe17 	ldw	r2,-8(fp)
 802ae44:	18800326 	beq	r3,r2,802ae54 <bsd_accept+0x7c>
 802ae48:	80301a80 	call	80301a8 <dtrap>
 802ae4c:	00bfffc4 	movi	r2,-1
 802ae50:	00002406 	br	802aee4 <bsd_accept+0x10c>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
 802ae54:	e0bff717 	ldw	r2,-36(fp)
 802ae58:	10000726 	beq	r2,zero,802ae78 <bsd_accept+0xa0>
   {
      if (addrlen == 0)
 802ae5c:	e0bff617 	ldw	r2,-40(fp)
 802ae60:	1000051e 	bne	r2,zero,802ae78 <bsd_accept+0xa0>
      {
         so->so_error = EFAULT;
 802ae64:	e0bffe17 	ldw	r2,-8(fp)
 802ae68:	00c00384 	movi	r3,14
 802ae6c:	10c00615 	stw	r3,24(r2)
         return -1;
 802ae70:	00bfffc4 	movi	r2,-1
 802ae74:	00001b06 	br	802aee4 <bsd_accept+0x10c>
      }
   }

   lret = t_accept(s, &laddr, addrlen);
 802ae78:	e0bff904 	addi	r2,fp,-28
 802ae7c:	e1bff617 	ldw	r6,-40(fp)
 802ae80:	100b883a 	mov	r5,r2
 802ae84:	e13ff817 	ldw	r4,-32(fp)
 802ae88:	803320c0 	call	803320c <t_accept>
 802ae8c:	e0bffd15 	stw	r2,-12(fp)
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
 802ae90:	e0bffd17 	ldw	r2,-12(fp)
 802ae94:	10bfffe0 	cmpeqi	r2,r2,-1
 802ae98:	1000111e 	bne	r2,zero,802aee0 <bsd_accept+0x108>
 802ae9c:	e0bff717 	ldw	r2,-36(fp)
 802aea0:	10000f26 	beq	r2,zero,802aee0 <bsd_accept+0x108>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
 802aea4:	e0bff617 	ldw	r2,-40(fp)
 802aea8:	10800017 	ldw	r2,0(r2)
 802aeac:	10800470 	cmpltui	r2,r2,17
 802aeb0:	1000031e 	bne	r2,zero,802aec0 <bsd_accept+0xe8>
         *addrlen = sizeof(struct sockaddr_in);
 802aeb4:	e0bff617 	ldw	r2,-40(fp)
 802aeb8:	00c00404 	movi	r3,16
 802aebc:	10c00015 	stw	r3,0(r2)
      MEMCPY(addr, &laddr, *addrlen);
 802aec0:	e0bff617 	ldw	r2,-40(fp)
 802aec4:	10800017 	ldw	r2,0(r2)
 802aec8:	1007883a 	mov	r3,r2
 802aecc:	e0bff904 	addi	r2,fp,-28
 802aed0:	180d883a 	mov	r6,r3
 802aed4:	100b883a 	mov	r5,r2
 802aed8:	e13ff717 	ldw	r4,-36(fp)
 802aedc:	80037cc0 	call	80037cc <memcpy>
   }

   return lret;
 802aee0:	e0bffd17 	ldw	r2,-12(fp)
}
 802aee4:	e037883a 	mov	sp,fp
 802aee8:	dfc00117 	ldw	ra,4(sp)
 802aeec:	df000017 	ldw	fp,0(sp)
 802aef0:	dec00204 	addi	sp,sp,8
 802aef4:	f800283a 	ret

0802aef8 <bsd_getpeername>:
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 802aef8:	defff304 	addi	sp,sp,-52
 802aefc:	dfc00c15 	stw	ra,48(sp)
 802af00:	df000b15 	stw	fp,44(sp)
 802af04:	df000b04 	addi	fp,sp,44
 802af08:	e13ff715 	stw	r4,-36(fp)
 802af0c:	e17ff615 	stw	r5,-40(fp)
 802af10:	e1bff515 	stw	r6,-44(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 802af14:	e0bff717 	ldw	r2,-36(fp)
 802af18:	10bff804 	addi	r2,r2,-32
 802af1c:	100490ba 	slli	r2,r2,2
 802af20:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802af24:	008201b4 	movhi	r2,2054
 802af28:	10bf0b04 	addi	r2,r2,-980
 802af2c:	e0bfff15 	stw	r2,-4(fp)
 802af30:	00000606 	br	802af4c <bsd_getpeername+0x54>
 802af34:	e0ffff17 	ldw	r3,-4(fp)
 802af38:	e0bffe17 	ldw	r2,-8(fp)
 802af3c:	18800626 	beq	r3,r2,802af58 <bsd_getpeername+0x60>
 802af40:	e0bfff17 	ldw	r2,-4(fp)
 802af44:	10800017 	ldw	r2,0(r2)
 802af48:	e0bfff15 	stw	r2,-4(fp)
 802af4c:	e0bfff17 	ldw	r2,-4(fp)
 802af50:	103ff81e 	bne	r2,zero,802af34 <bsd_getpeername+0x3c>
 802af54:	00000106 	br	802af5c <bsd_getpeername+0x64>
 802af58:	0001883a 	nop
 802af5c:	e0ffff17 	ldw	r3,-4(fp)
 802af60:	e0bffe17 	ldw	r2,-8(fp)
 802af64:	18800326 	beq	r3,r2,802af74 <bsd_getpeername+0x7c>
 802af68:	80301a80 	call	80301a8 <dtrap>
 802af6c:	00bfffc4 	movi	r2,-1
 802af70:	00002406 	br	802b004 <bsd_getpeername+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 802af74:	e0bff517 	ldw	r2,-44(fp)
 802af78:	1000051e 	bne	r2,zero,802af90 <bsd_getpeername+0x98>
   {
      so->so_error = EFAULT;
 802af7c:	e0bffe17 	ldw	r2,-8(fp)
 802af80:	00c00384 	movi	r3,14
 802af84:	10c00615 	stw	r3,24(r2)
      return -1;
 802af88:	00bfffc4 	movi	r2,-1
 802af8c:	00001d06 	br	802b004 <bsd_getpeername+0x10c>
   }
   lnamelen = *namelen;
 802af90:	e0bff517 	ldw	r2,-44(fp)
 802af94:	10800017 	ldw	r2,0(r2)
 802af98:	e0bff815 	stw	r2,-32(fp)

   lret = t_getpeername(s, &lname, &lnamelen);
 802af9c:	e0fff804 	addi	r3,fp,-32
 802afa0:	e0bff904 	addi	r2,fp,-28
 802afa4:	180d883a 	mov	r6,r3
 802afa8:	100b883a 	mov	r5,r2
 802afac:	e13ff717 	ldw	r4,-36(fp)
 802afb0:	80336cc0 	call	80336cc <t_getpeername>
 802afb4:	e0bffd15 	stw	r2,-12(fp)
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
 802afb8:	e0bffd17 	ldw	r2,-12(fp)
 802afbc:	10bfffe0 	cmpeqi	r2,r2,-1
 802afc0:	10000f1e 	bne	r2,zero,802b000 <bsd_getpeername+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 802afc4:	e0bff817 	ldw	r2,-32(fp)
 802afc8:	10800470 	cmpltui	r2,r2,17
 802afcc:	1000021e 	bne	r2,zero,802afd8 <bsd_getpeername+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
 802afd0:	00800404 	movi	r2,16
 802afd4:	e0bff815 	stw	r2,-32(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
 802afd8:	e0bff817 	ldw	r2,-32(fp)
 802afdc:	1007883a 	mov	r3,r2
 802afe0:	e0bff904 	addi	r2,fp,-28
 802afe4:	180d883a 	mov	r6,r3
 802afe8:	100b883a 	mov	r5,r2
 802afec:	e13ff617 	ldw	r4,-40(fp)
 802aff0:	80037cc0 	call	80037cc <memcpy>
      *namelen = lnamelen;
 802aff4:	e0fff817 	ldw	r3,-32(fp)
 802aff8:	e0bff517 	ldw	r2,-44(fp)
 802affc:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 802b000:	e0bffd17 	ldw	r2,-12(fp)
}
 802b004:	e037883a 	mov	sp,fp
 802b008:	dfc00117 	ldw	ra,4(sp)
 802b00c:	df000017 	ldw	fp,0(sp)
 802b010:	dec00204 	addi	sp,sp,8
 802b014:	f800283a 	ret

0802b018 <bsd_getsockname>:
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 802b018:	defff304 	addi	sp,sp,-52
 802b01c:	dfc00c15 	stw	ra,48(sp)
 802b020:	df000b15 	stw	fp,44(sp)
 802b024:	df000b04 	addi	fp,sp,44
 802b028:	e13ff715 	stw	r4,-36(fp)
 802b02c:	e17ff615 	stw	r5,-40(fp)
 802b030:	e1bff515 	stw	r6,-44(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 802b034:	e0bff717 	ldw	r2,-36(fp)
 802b038:	10bff804 	addi	r2,r2,-32
 802b03c:	100490ba 	slli	r2,r2,2
 802b040:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802b044:	008201b4 	movhi	r2,2054
 802b048:	10bf0b04 	addi	r2,r2,-980
 802b04c:	e0bfff15 	stw	r2,-4(fp)
 802b050:	00000606 	br	802b06c <bsd_getsockname+0x54>
 802b054:	e0ffff17 	ldw	r3,-4(fp)
 802b058:	e0bffe17 	ldw	r2,-8(fp)
 802b05c:	18800626 	beq	r3,r2,802b078 <bsd_getsockname+0x60>
 802b060:	e0bfff17 	ldw	r2,-4(fp)
 802b064:	10800017 	ldw	r2,0(r2)
 802b068:	e0bfff15 	stw	r2,-4(fp)
 802b06c:	e0bfff17 	ldw	r2,-4(fp)
 802b070:	103ff81e 	bne	r2,zero,802b054 <bsd_getsockname+0x3c>
 802b074:	00000106 	br	802b07c <bsd_getsockname+0x64>
 802b078:	0001883a 	nop
 802b07c:	e0ffff17 	ldw	r3,-4(fp)
 802b080:	e0bffe17 	ldw	r2,-8(fp)
 802b084:	18800326 	beq	r3,r2,802b094 <bsd_getsockname+0x7c>
 802b088:	80301a80 	call	80301a8 <dtrap>
 802b08c:	00bfffc4 	movi	r2,-1
 802b090:	00002406 	br	802b124 <bsd_getsockname+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 802b094:	e0bff517 	ldw	r2,-44(fp)
 802b098:	1000051e 	bne	r2,zero,802b0b0 <bsd_getsockname+0x98>
   {
      so->so_error = EFAULT;
 802b09c:	e0bffe17 	ldw	r2,-8(fp)
 802b0a0:	00c00384 	movi	r3,14
 802b0a4:	10c00615 	stw	r3,24(r2)
      return -1;
 802b0a8:	00bfffc4 	movi	r2,-1
 802b0ac:	00001d06 	br	802b124 <bsd_getsockname+0x10c>
   }
   lnamelen = *namelen;
 802b0b0:	e0bff517 	ldw	r2,-44(fp)
 802b0b4:	10800017 	ldw	r2,0(r2)
 802b0b8:	e0bff815 	stw	r2,-32(fp)

   lret = t_getsockname(s, &lname, &lnamelen);
 802b0bc:	e0fff804 	addi	r3,fp,-32
 802b0c0:	e0bff904 	addi	r2,fp,-28
 802b0c4:	180d883a 	mov	r6,r3
 802b0c8:	100b883a 	mov	r5,r2
 802b0cc:	e13ff717 	ldw	r4,-36(fp)
 802b0d0:	80337100 	call	8033710 <t_getsockname>
 802b0d4:	e0bffd15 	stw	r2,-12(fp)
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
 802b0d8:	e0bffd17 	ldw	r2,-12(fp)
 802b0dc:	10bfffe0 	cmpeqi	r2,r2,-1
 802b0e0:	10000f1e 	bne	r2,zero,802b120 <bsd_getsockname+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 802b0e4:	e0bff817 	ldw	r2,-32(fp)
 802b0e8:	10800470 	cmpltui	r2,r2,17
 802b0ec:	1000021e 	bne	r2,zero,802b0f8 <bsd_getsockname+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
 802b0f0:	00800404 	movi	r2,16
 802b0f4:	e0bff815 	stw	r2,-32(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
 802b0f8:	e0bff817 	ldw	r2,-32(fp)
 802b0fc:	1007883a 	mov	r3,r2
 802b100:	e0bff904 	addi	r2,fp,-28
 802b104:	180d883a 	mov	r6,r3
 802b108:	100b883a 	mov	r5,r2
 802b10c:	e13ff617 	ldw	r4,-40(fp)
 802b110:	80037cc0 	call	80037cc <memcpy>
      *namelen = lnamelen;
 802b114:	e0fff817 	ldw	r3,-32(fp)
 802b118:	e0bff517 	ldw	r2,-44(fp)
 802b11c:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 802b120:	e0bffd17 	ldw	r2,-12(fp)
}
 802b124:	e037883a 	mov	sp,fp
 802b128:	dfc00117 	ldw	ra,4(sp)
 802b12c:	df000017 	ldw	fp,0(sp)
 802b130:	dec00204 	addi	sp,sp,8
 802b134:	f800283a 	ret

0802b138 <bsd_i_sockoptlen>:
 * RETURNS: minimum length of the named socket option, in bytes
 */
int 
bsd_i_sockoptlen(int level,
                 int name)
{
 802b138:	defffd04 	addi	sp,sp,-12
 802b13c:	df000215 	stw	fp,8(sp)
 802b140:	df000204 	addi	fp,sp,8
 802b144:	e13fff15 	stw	r4,-4(fp)
 802b148:	e17ffe15 	stw	r5,-8(fp)
   USE_ARG(level);

   switch (name)
 802b14c:	e0bffe17 	ldw	r2,-8(fp)
 802b150:	108405c8 	cmpgei	r2,r2,4119
 802b154:	10006a1e 	bne	r2,zero,802b300 <bsd_i_sockoptlen+0x1c8>
 802b158:	e0bffe17 	ldw	r2,-8(fp)
 802b15c:	10840048 	cmpgei	r2,r2,4097
 802b160:	10000d1e 	bne	r2,zero,802b198 <bsd_i_sockoptlen+0x60>
 802b164:	e0bffe17 	ldw	r2,-8(fp)
 802b168:	10804020 	cmpeqi	r2,r2,256
 802b16c:	10005a1e 	bne	r2,zero,802b2d8 <bsd_i_sockoptlen+0x1a0>
 802b170:	e0bffe17 	ldw	r2,-8(fp)
 802b174:	10804048 	cmpgei	r2,r2,257
 802b178:	1000611e 	bne	r2,zero,802b300 <bsd_i_sockoptlen+0x1c8>
 802b17c:	e0bffe17 	ldw	r2,-8(fp)
 802b180:	10800848 	cmpgei	r2,r2,33
 802b184:	10004a1e 	bne	r2,zero,802b2b0 <bsd_i_sockoptlen+0x178>
 802b188:	e0bffe17 	ldw	r2,-8(fp)
 802b18c:	108000c8 	cmpgei	r2,r2,3
 802b190:	1000201e 	bne	r2,zero,802b214 <bsd_i_sockoptlen+0xdc>
 802b194:	00005a06 	br	802b300 <bsd_i_sockoptlen+0x1c8>
 802b198:	e0bffe17 	ldw	r2,-8(fp)
 802b19c:	10bbffc4 	addi	r2,r2,-4097
 802b1a0:	10c005a8 	cmpgeui	r3,r2,22
 802b1a4:	1800561e 	bne	r3,zero,802b300 <bsd_i_sockoptlen+0x1c8>
 802b1a8:	100690ba 	slli	r3,r2,2
 802b1ac:	008200f4 	movhi	r2,2051
 802b1b0:	1885883a 	add	r2,r3,r2
 802b1b4:	10ac6f17 	ldw	r2,-20036(r2)
 802b1b8:	1000683a 	jmp	r2
 802b1bc:	0802b2d8 	cmpnei	zero,at,2763
 802b1c0:	0802b2d8 	cmpnei	zero,at,2763
 802b1c4:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1c8:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1cc:	0802b2d0 	cmplti	zero,at,2763
 802b1d0:	0802b2d0 	cmplti	zero,at,2763
 802b1d4:	0802b2d8 	cmpnei	zero,at,2763
 802b1d8:	0802b2d8 	cmpnei	zero,at,2763
 802b1dc:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1e0:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1e4:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1e8:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1ec:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1f0:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1f4:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1f8:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b1fc:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b200:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b204:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b208:	0802b2c0 	call	802b2c <OSCtxSw_SWITCH_PC+0x802aec>
 802b20c:	0802b2c0 	call	802b2c <OSCtxSw_SWITCH_PC+0x802aec>
 802b210:	0802b2d8 	cmpnei	zero,at,2763
 802b214:	e0bffe17 	ldw	r2,-8(fp)
 802b218:	10bfff44 	addi	r2,r2,-3
 802b21c:	10c007a8 	cmpgeui	r3,r2,30
 802b220:	1800371e 	bne	r3,zero,802b300 <bsd_i_sockoptlen+0x1c8>
 802b224:	100690ba 	slli	r3,r2,2
 802b228:	008200f4 	movhi	r2,2051
 802b22c:	1885883a 	add	r2,r3,r2
 802b230:	10ac8e17 	ldw	r2,-19912(r2)
 802b234:	1000683a 	jmp	r2
 802b238:	0802b2f8 	rdprs	zero,at,2763
 802b23c:	0802b2d8 	cmpnei	zero,at,2763
 802b240:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b244:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b248:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b24c:	0802b2d8 	cmpnei	zero,at,2763
 802b250:	0802b2e0 	cmpeqi	zero,at,2763
 802b254:	0802b2e8 	cmpgeui	zero,at,2763
 802b258:	0802b2e8 	cmpgeui	zero,at,2763
 802b25c:	0802b2f0 	cmpltui	zero,at,2763
 802b260:	0802b2f0 	cmpltui	zero,at,2763
 802b264:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b268:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b26c:	0802b2d8 	cmpnei	zero,at,2763
 802b270:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b274:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b278:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b27c:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b280:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b284:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b288:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b28c:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b290:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b294:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b298:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b29c:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b2a0:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b2a4:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b2a8:	0802b300 	call	802b30 <OSCtxSw_SWITCH_PC+0x802af0>
 802b2ac:	0802b2d8 	cmpnei	zero,at,2763
 802b2b0:	e0bffe17 	ldw	r2,-8(fp)
 802b2b4:	10802020 	cmpeqi	r2,r2,128
 802b2b8:	1000031e 	bne	r2,zero,802b2c8 <bsd_i_sockoptlen+0x190>
 802b2bc:	00001006 	br	802b300 <bsd_i_sockoptlen+0x1c8>
   {
   case SO_BIO:
   case SO_NBIO:
      /* these don't use an option value */
      return 0;
 802b2c0:	0005883a 	mov	r2,zero
 802b2c4:	00000f06 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   case SO_LINGER:
      /* this option is a struct linger */
      return sizeof(struct linger);
 802b2c8:	00800204 	movi	r2,8
 802b2cc:	00000d06 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
 802b2d0:	00800084 	movi	r2,2
 802b2d4:	00000b06 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   case SO_RCVBUF:
   case SO_NONBLOCK:
   case SO_ERROR:
   case SO_TYPE:
      /* these options are type int */
      return sizeof(int);
 802b2d8:	00800104 	movi	r2,4
 802b2dc:	00000906 	br	802b304 <bsd_i_sockoptlen+0x1cc>
      return sizeof(int (*)());
#endif /* TCP_ZEROCOPY */
#ifdef IP_MULTICAST
   case IP_MULTICAST_IF:
      /* this option is type ip_addr */
      return sizeof(ip_addr);
 802b2e0:	00800104 	movi	r2,4
 802b2e4:	00000706 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
 802b2e8:	00800044 	movi	r2,1
 802b2ec:	00000506 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      /* these options are struct ip_mreq */
      return sizeof(struct ip_mreq);
 802b2f0:	00800204 	movi	r2,8
 802b2f4:	00000306 	br	802b304 <bsd_i_sockoptlen+0x1cc>
 * IP_TTL_OPT == SOREUSEADDR. This causes a build erro
 * due to duplicate cases. Removing this one. They both
 * return the same value (sizeof(int)).
 */
  // case IP_TTL_OPT:
      return sizeof(int);
 802b2f8:	00800104 	movi	r2,4
 802b2fc:	00000106 	br	802b304 <bsd_i_sockoptlen+0x1cc>
   default:
      /* we don't know what type these options are */
      return 0;
 802b300:	0005883a 	mov	r2,zero
   }
   
}
 802b304:	e037883a 	mov	sp,fp
 802b308:	df000017 	ldw	fp,0(sp)
 802b30c:	dec00104 	addi	sp,sp,4
 802b310:	f800283a 	ret

0802b314 <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 802b314:	defff504 	addi	sp,sp,-44
 802b318:	dfc00a15 	stw	ra,40(sp)
 802b31c:	df000915 	stw	fp,36(sp)
 802b320:	df000904 	addi	fp,sp,36
 802b324:	e13ffb15 	stw	r4,-20(fp)
 802b328:	e17ffa15 	stw	r5,-24(fp)
 802b32c:	e1bff915 	stw	r6,-28(fp)
 802b330:	e1fff815 	stw	r7,-32(fp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 802b334:	e0bffb17 	ldw	r2,-20(fp)
 802b338:	10bff804 	addi	r2,r2,-32
 802b33c:	100490ba 	slli	r2,r2,2
 802b340:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802b344:	008201b4 	movhi	r2,2054
 802b348:	10bf0b04 	addi	r2,r2,-980
 802b34c:	e0bfff15 	stw	r2,-4(fp)
 802b350:	00000606 	br	802b36c <bsd_getsockopt+0x58>
 802b354:	e0ffff17 	ldw	r3,-4(fp)
 802b358:	e0bffe17 	ldw	r2,-8(fp)
 802b35c:	18800626 	beq	r3,r2,802b378 <bsd_getsockopt+0x64>
 802b360:	e0bfff17 	ldw	r2,-4(fp)
 802b364:	10800017 	ldw	r2,0(r2)
 802b368:	e0bfff15 	stw	r2,-4(fp)
 802b36c:	e0bfff17 	ldw	r2,-4(fp)
 802b370:	103ff81e 	bne	r2,zero,802b354 <bsd_getsockopt+0x40>
 802b374:	00000106 	br	802b37c <bsd_getsockopt+0x68>
 802b378:	0001883a 	nop
 802b37c:	e0ffff17 	ldw	r3,-4(fp)
 802b380:	e0bffe17 	ldw	r2,-8(fp)
 802b384:	18800326 	beq	r3,r2,802b394 <bsd_getsockopt+0x80>
 802b388:	80301a80 	call	80301a8 <dtrap>
 802b38c:	00bfffc4 	movi	r2,-1
 802b390:	00001d06 	br	802b408 <bsd_getsockopt+0xf4>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
 802b394:	e17ff917 	ldw	r5,-28(fp)
 802b398:	e13ffa17 	ldw	r4,-24(fp)
 802b39c:	802b1380 	call	802b138 <bsd_i_sockoptlen>
 802b3a0:	e0bffd15 	stw	r2,-12(fp)
   if ((optlen == NULL) || (*optlen < loptlen))
 802b3a4:	e0800217 	ldw	r2,8(fp)
 802b3a8:	10000426 	beq	r2,zero,802b3bc <bsd_getsockopt+0xa8>
 802b3ac:	e0800217 	ldw	r2,8(fp)
 802b3b0:	10c00017 	ldw	r3,0(r2)
 802b3b4:	e0bffd17 	ldw	r2,-12(fp)
 802b3b8:	1880050e 	bge	r3,r2,802b3d0 <bsd_getsockopt+0xbc>
   {
      so->so_error = EFAULT;
 802b3bc:	e0bffe17 	ldw	r2,-8(fp)
 802b3c0:	00c00384 	movi	r3,14
 802b3c4:	10c00615 	stw	r3,24(r2)
      return -1;
 802b3c8:	00bfffc4 	movi	r2,-1
 802b3cc:	00000e06 	br	802b408 <bsd_getsockopt+0xf4>
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
 802b3d0:	e0bffd17 	ldw	r2,-12(fp)
 802b3d4:	d8800015 	stw	r2,0(sp)
 802b3d8:	e1fff817 	ldw	r7,-32(fp)
 802b3dc:	e1bff917 	ldw	r6,-28(fp)
 802b3e0:	e17ffa17 	ldw	r5,-24(fp)
 802b3e4:	e13ffb17 	ldw	r4,-20(fp)
 802b3e8:	8033af40 	call	8033af4 <t_getsockopt>
 802b3ec:	e0bffc15 	stw	r2,-16(fp)

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
 802b3f0:	e0bffc17 	ldw	r2,-16(fp)
 802b3f4:	1000031e 	bne	r2,zero,802b404 <bsd_getsockopt+0xf0>
   {
      *optlen = loptlen;
 802b3f8:	e0800217 	ldw	r2,8(fp)
 802b3fc:	e0fffd17 	ldw	r3,-12(fp)
 802b400:	10c00015 	stw	r3,0(r2)
   }

   return e;
 802b404:	e0bffc17 	ldw	r2,-16(fp)
   
}
 802b408:	e037883a 	mov	sp,fp
 802b40c:	dfc00117 	ldw	ra,4(sp)
 802b410:	df000017 	ldw	fp,0(sp)
 802b414:	dec00204 	addi	sp,sp,8
 802b418:	f800283a 	ret

0802b41c <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
 802b41c:	defff504 	addi	sp,sp,-44
 802b420:	dfc00815 	stw	ra,32(sp)
 802b424:	df000715 	stw	fp,28(sp)
 802b428:	df000704 	addi	fp,sp,28
 802b42c:	e13ffb15 	stw	r4,-20(fp)
 802b430:	e17ffa15 	stw	r5,-24(fp)
 802b434:	e1800215 	stw	r6,8(fp)
 802b438:	e1c00315 	stw	r7,12(fp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
 802b43c:	e0bffb17 	ldw	r2,-20(fp)
 802b440:	10bff804 	addi	r2,r2,-32
 802b444:	100490ba 	slli	r2,r2,2
 802b448:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802b44c:	008201b4 	movhi	r2,2054
 802b450:	10bf0b04 	addi	r2,r2,-980
 802b454:	e0bfff15 	stw	r2,-4(fp)
 802b458:	00000606 	br	802b474 <bsd_ioctl+0x58>
 802b45c:	e0ffff17 	ldw	r3,-4(fp)
 802b460:	e0bffe17 	ldw	r2,-8(fp)
 802b464:	18800626 	beq	r3,r2,802b480 <bsd_ioctl+0x64>
 802b468:	e0bfff17 	ldw	r2,-4(fp)
 802b46c:	10800017 	ldw	r2,0(r2)
 802b470:	e0bfff15 	stw	r2,-4(fp)
 802b474:	e0bfff17 	ldw	r2,-4(fp)
 802b478:	103ff81e 	bne	r2,zero,802b45c <bsd_ioctl+0x40>
 802b47c:	00000106 	br	802b484 <bsd_ioctl+0x68>
 802b480:	0001883a 	nop
 802b484:	e0ffff17 	ldw	r3,-4(fp)
 802b488:	e0bffe17 	ldw	r2,-8(fp)
 802b48c:	18800326 	beq	r3,r2,802b49c <bsd_ioctl+0x80>
 802b490:	80301a80 	call	80301a8 <dtrap>
 802b494:	00bfffc4 	movi	r2,-1
 802b498:	00001706 	br	802b4f8 <bsd_ioctl+0xdc>

   va_start(argptr, request);
 802b49c:	e0800204 	addi	r2,fp,8
 802b4a0:	e0bffd15 	stw	r2,-12(fp)

   switch (request)
 802b4a4:	e0bffa17 	ldw	r2,-24(fp)
 802b4a8:	10840598 	cmpnei	r2,r2,4118
 802b4ac:	10000e1e 	bne	r2,zero,802b4e8 <bsd_ioctl+0xcc>
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 802b4b0:	e0bffd17 	ldw	r2,-12(fp)
 802b4b4:	10c00104 	addi	r3,r2,4
 802b4b8:	e0fffd15 	stw	r3,-12(fp)
 802b4bc:	10800017 	ldw	r2,0(r2)
 802b4c0:	e0bffc15 	stw	r2,-16(fp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 802b4c4:	e0fffc04 	addi	r3,fp,-16
 802b4c8:	00800104 	movi	r2,4
 802b4cc:	d8800015 	stw	r2,0(sp)
 802b4d0:	180f883a 	mov	r7,r3
 802b4d4:	01840584 	movi	r6,4118
 802b4d8:	017fffc4 	movi	r5,-1
 802b4dc:	e13ffb17 	ldw	r4,-20(fp)
 802b4e0:	80339340 	call	8033934 <t_setsockopt>
 802b4e4:	00000406 	br	802b4f8 <bsd_ioctl+0xdc>
   default:
      so->so_error = EINVAL;
 802b4e8:	e0bffe17 	ldw	r2,-8(fp)
 802b4ec:	00c00584 	movi	r3,22
 802b4f0:	10c00615 	stw	r3,24(r2)
      return -1;
 802b4f4:	00bfffc4 	movi	r2,-1
   }
}
 802b4f8:	e037883a 	mov	sp,fp
 802b4fc:	dfc00117 	ldw	ra,4(sp)
 802b500:	df000017 	ldw	fp,0(sp)
 802b504:	dec00404 	addi	sp,sp,16
 802b508:	f800283a 	ret

0802b50c <bsd_inet_ntoa>:
 * RETURNS: pointer to null-terminated string containing dotted-decimal
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
 802b50c:	defffd04 	addi	sp,sp,-12
 802b510:	dfc00215 	stw	ra,8(sp)
 802b514:	df000115 	stw	fp,4(sp)
 802b518:	df000104 	addi	fp,sp,4
 802b51c:	e13fff15 	stw	r4,-4(fp)
   return print_ipad(in.s_addr);
 802b520:	e0bfff17 	ldw	r2,-4(fp)
 802b524:	1009883a 	mov	r4,r2
 802b528:	802bbd00 	call	802bbd0 <print_ipad>
}
 802b52c:	e037883a 	mov	sp,fp
 802b530:	dfc00117 	ldw	ra,4(sp)
 802b534:	df000017 	ldw	fp,0(sp)
 802b538:	dec00204 	addi	sp,sp,8
 802b53c:	f800283a 	ret

0802b540 <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 802b540:	defff004 	addi	sp,sp,-64
 802b544:	dfc00f15 	stw	ra,60(sp)
 802b548:	df000e15 	stw	fp,56(sp)
 802b54c:	df000e04 	addi	fp,sp,56
 802b550:	e13ff715 	stw	r4,-36(fp)
 802b554:	e17ff615 	stw	r5,-40(fp)
 802b558:	e1bff515 	stw	r6,-44(fp)
 802b55c:	e1fff415 	stw	r7,-48(fp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
 802b560:	e03ff815 	stw	zero,-32(fp)
   int lret;

   so = LONG2SO(s);
 802b564:	e0bff717 	ldw	r2,-36(fp)
 802b568:	10bff804 	addi	r2,r2,-32
 802b56c:	100490ba 	slli	r2,r2,2
 802b570:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802b574:	008201b4 	movhi	r2,2054
 802b578:	10bf0b04 	addi	r2,r2,-980
 802b57c:	e0bfff15 	stw	r2,-4(fp)
 802b580:	00000606 	br	802b59c <bsd_recvfrom+0x5c>
 802b584:	e0ffff17 	ldw	r3,-4(fp)
 802b588:	e0bffe17 	ldw	r2,-8(fp)
 802b58c:	18800626 	beq	r3,r2,802b5a8 <bsd_recvfrom+0x68>
 802b590:	e0bfff17 	ldw	r2,-4(fp)
 802b594:	10800017 	ldw	r2,0(r2)
 802b598:	e0bfff15 	stw	r2,-4(fp)
 802b59c:	e0bfff17 	ldw	r2,-4(fp)
 802b5a0:	103ff81e 	bne	r2,zero,802b584 <bsd_recvfrom+0x44>
 802b5a4:	00000106 	br	802b5ac <bsd_recvfrom+0x6c>
 802b5a8:	0001883a 	nop
 802b5ac:	e0ffff17 	ldw	r3,-4(fp)
 802b5b0:	e0bffe17 	ldw	r2,-8(fp)
 802b5b4:	18800326 	beq	r3,r2,802b5c4 <bsd_recvfrom+0x84>
 802b5b8:	80301a80 	call	80301a8 <dtrap>
 802b5bc:	00bfffc4 	movi	r2,-1
 802b5c0:	00002b06 	br	802b670 <bsd_recvfrom+0x130>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
 802b5c4:	e0800217 	ldw	r2,8(fp)
 802b5c8:	10000a26 	beq	r2,zero,802b5f4 <bsd_recvfrom+0xb4>
   {
      if (fromlen == NULL)
 802b5cc:	e0800317 	ldw	r2,12(fp)
 802b5d0:	1000051e 	bne	r2,zero,802b5e8 <bsd_recvfrom+0xa8>
      {
         so->so_error = EFAULT;
 802b5d4:	e0bffe17 	ldw	r2,-8(fp)
 802b5d8:	00c00384 	movi	r3,14
 802b5dc:	10c00615 	stw	r3,24(r2)
         return -1;
 802b5e0:	00bfffc4 	movi	r2,-1
 802b5e4:	00002206 	br	802b670 <bsd_recvfrom+0x130>
      }
      lfromlen = *fromlen;
 802b5e8:	e0800317 	ldw	r2,12(fp)
 802b5ec:	10800017 	ldw	r2,0(r2)
 802b5f0:	e0bff815 	stw	r2,-32(fp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
 802b5f4:	e0bff804 	addi	r2,fp,-32
 802b5f8:	d8800115 	stw	r2,4(sp)
 802b5fc:	e0bff904 	addi	r2,fp,-28
 802b600:	d8800015 	stw	r2,0(sp)
 802b604:	e1fff417 	ldw	r7,-48(fp)
 802b608:	e1bff517 	ldw	r6,-44(fp)
 802b60c:	e17ff617 	ldw	r5,-40(fp)
 802b610:	e13ff717 	ldw	r4,-36(fp)
 802b614:	8033d580 	call	8033d58 <t_recvfrom>
 802b618:	e0bffd15 	stw	r2,-12(fp)
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
 802b61c:	e0bffd17 	ldw	r2,-12(fp)
 802b620:	10bfffe0 	cmpeqi	r2,r2,-1
 802b624:	1000111e 	bne	r2,zero,802b66c <bsd_recvfrom+0x12c>
 802b628:	e0800217 	ldw	r2,8(fp)
 802b62c:	10000f26 	beq	r2,zero,802b66c <bsd_recvfrom+0x12c>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
 802b630:	e0bff817 	ldw	r2,-32(fp)
 802b634:	10800470 	cmpltui	r2,r2,17
 802b638:	1000021e 	bne	r2,zero,802b644 <bsd_recvfrom+0x104>
         lfromlen = sizeof(struct sockaddr_in);
 802b63c:	00800404 	movi	r2,16
 802b640:	e0bff815 	stw	r2,-32(fp)
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
 802b644:	e0bff817 	ldw	r2,-32(fp)
 802b648:	1007883a 	mov	r3,r2
 802b64c:	e0bff904 	addi	r2,fp,-28
 802b650:	180d883a 	mov	r6,r3
 802b654:	100b883a 	mov	r5,r2
 802b658:	e1000217 	ldw	r4,8(fp)
 802b65c:	80037cc0 	call	80037cc <memcpy>
      *fromlen = lfromlen;
 802b660:	e0fff817 	ldw	r3,-32(fp)
 802b664:	e0800317 	ldw	r2,12(fp)
 802b668:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 802b66c:	e0bffd17 	ldw	r2,-12(fp)
}
 802b670:	e037883a 	mov	sp,fp
 802b674:	dfc00117 	ldw	ra,4(sp)
 802b678:	df000017 	ldw	fp,0(sp)
 802b67c:	dec00204 	addi	sp,sp,8
 802b680:	f800283a 	ret

0802b684 <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
 802b684:	defff804 	addi	sp,sp,-32
 802b688:	dfc00715 	stw	ra,28(sp)
 802b68c:	df000615 	stw	fp,24(sp)
 802b690:	df000604 	addi	fp,sp,24
 802b694:	e13ffd15 	stw	r4,-12(fp)
 802b698:	e17ffc15 	stw	r5,-16(fp)
 802b69c:	e1bffb15 	stw	r6,-20(fp)
 802b6a0:	e1fffa15 	stw	r7,-24(fp)
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
 802b6a4:	e0800217 	ldw	r2,8(fp)
 802b6a8:	10004c26 	beq	r2,zero,802b7dc <bsd_select+0x158>
       * million (i.e. any number of microseconds up to one second).
       * So we scale tv_usec from microseconds to something reasonable
       * based on TPS, multiply it by TPS, then scale it the rest of
       * the way to ticks-per-second.
       */
      tps = TPS;
 802b6ac:	00801904 	movi	r2,100
 802b6b0:	e0bffe15 	stw	r2,-8(fp)
      if (tps >= 1000)
 802b6b4:	e0bffe17 	ldw	r2,-8(fp)
 802b6b8:	1080fa10 	cmplti	r2,r2,1000
 802b6bc:	10000e1e 	bne	r2,zero,802b6f8 <bsd_select+0x74>
      {
         ltv = (((timeout->tv_usec + 50) / 100) * tps) / 10000;
 802b6c0:	e0800217 	ldw	r2,8(fp)
 802b6c4:	10800217 	ldw	r2,8(r2)
 802b6c8:	10800c84 	addi	r2,r2,50
 802b6cc:	01401904 	movi	r5,100
 802b6d0:	1009883a 	mov	r4,r2
 802b6d4:	8011ee80 	call	8011ee8 <__divsi3>
 802b6d8:	1007883a 	mov	r3,r2
 802b6dc:	e0bffe17 	ldw	r2,-8(fp)
 802b6e0:	1885383a 	mul	r2,r3,r2
 802b6e4:	0149c404 	movi	r5,10000
 802b6e8:	1009883a 	mov	r4,r2
 802b6ec:	8011ee80 	call	8011ee8 <__divsi3>
 802b6f0:	e0bfff15 	stw	r2,-4(fp)
 802b6f4:	00003106 	br	802b7bc <bsd_select+0x138>
      }
      else if (tps >= 100)
 802b6f8:	e0bffe17 	ldw	r2,-8(fp)
 802b6fc:	10801910 	cmplti	r2,r2,100
 802b700:	10000e1e 	bne	r2,zero,802b73c <bsd_select+0xb8>
      {
         ltv = (((timeout->tv_usec + 500) / 1000) * tps) / 1000;
 802b704:	e0800217 	ldw	r2,8(fp)
 802b708:	10800217 	ldw	r2,8(r2)
 802b70c:	10807d04 	addi	r2,r2,500
 802b710:	0140fa04 	movi	r5,1000
 802b714:	1009883a 	mov	r4,r2
 802b718:	8011ee80 	call	8011ee8 <__divsi3>
 802b71c:	1007883a 	mov	r3,r2
 802b720:	e0bffe17 	ldw	r2,-8(fp)
 802b724:	1885383a 	mul	r2,r3,r2
 802b728:	0140fa04 	movi	r5,1000
 802b72c:	1009883a 	mov	r4,r2
 802b730:	8011ee80 	call	8011ee8 <__divsi3>
 802b734:	e0bfff15 	stw	r2,-4(fp)
 802b738:	00002006 	br	802b7bc <bsd_select+0x138>
      }
      else if (tps >= 10)
 802b73c:	e0bffe17 	ldw	r2,-8(fp)
 802b740:	10800290 	cmplti	r2,r2,10
 802b744:	10000e1e 	bne	r2,zero,802b780 <bsd_select+0xfc>
      {
         ltv = (((timeout->tv_usec + 5000) / 10000) * tps) / 100;
 802b748:	e0800217 	ldw	r2,8(fp)
 802b74c:	10800217 	ldw	r2,8(r2)
 802b750:	1084e204 	addi	r2,r2,5000
 802b754:	0149c404 	movi	r5,10000
 802b758:	1009883a 	mov	r4,r2
 802b75c:	8011ee80 	call	8011ee8 <__divsi3>
 802b760:	1007883a 	mov	r3,r2
 802b764:	e0bffe17 	ldw	r2,-8(fp)
 802b768:	1885383a 	mul	r2,r3,r2
 802b76c:	01401904 	movi	r5,100
 802b770:	1009883a 	mov	r4,r2
 802b774:	8011ee80 	call	8011ee8 <__divsi3>
 802b778:	e0bfff15 	stw	r2,-4(fp)
 802b77c:	00000f06 	br	802b7bc <bsd_select+0x138>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
 802b780:	e0800217 	ldw	r2,8(fp)
 802b784:	10c00217 	ldw	r3,8(r2)
 802b788:	00b0d414 	movui	r2,50000
 802b78c:	1885883a 	add	r2,r3,r2
 802b790:	014000b4 	movhi	r5,2
 802b794:	2961a804 	addi	r5,r5,-31072
 802b798:	1009883a 	mov	r4,r2
 802b79c:	8011ee80 	call	8011ee8 <__divsi3>
 802b7a0:	1007883a 	mov	r3,r2
 802b7a4:	e0bffe17 	ldw	r2,-8(fp)
 802b7a8:	1885383a 	mul	r2,r3,r2
 802b7ac:	01400284 	movi	r5,10
 802b7b0:	1009883a 	mov	r4,r2
 802b7b4:	8011ee80 	call	8011ee8 <__divsi3>
 802b7b8:	e0bfff15 	stw	r2,-4(fp)
      }
      ltv += (timeout->tv_sec * TPS);
 802b7bc:	e1000217 	ldw	r4,8(fp)
 802b7c0:	20800017 	ldw	r2,0(r4)
 802b7c4:	20c00117 	ldw	r3,4(r4)
 802b7c8:	10c01924 	muli	r3,r2,100
 802b7cc:	e0bfff17 	ldw	r2,-4(fp)
 802b7d0:	1885883a 	add	r2,r3,r2
 802b7d4:	e0bfff15 	stw	r2,-4(fp)
 802b7d8:	00000206 	br	802b7e4 <bsd_select+0x160>
   }
   else {
      /*
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
 802b7dc:	00bfffc4 	movi	r2,-1
 802b7e0:	e0bfff15 	stw	r2,-4(fp)
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
 802b7e4:	e1ffff17 	ldw	r7,-4(fp)
 802b7e8:	e1bffa17 	ldw	r6,-24(fp)
 802b7ec:	e17ffb17 	ldw	r5,-20(fp)
 802b7f0:	e13ffc17 	ldw	r4,-16(fp)
 802b7f4:	80379b40 	call	80379b4 <t_select>
}
 802b7f8:	e037883a 	mov	sp,fp
 802b7fc:	dfc00117 	ldw	ra,4(sp)
 802b800:	df000017 	ldw	fp,0(sp)
 802b804:	dec00204 	addi	sp,sp,8
 802b808:	f800283a 	ret

0802b80c <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 802b80c:	defff704 	addi	sp,sp,-36
 802b810:	dfc00815 	stw	ra,32(sp)
 802b814:	df000715 	stw	fp,28(sp)
 802b818:	df000704 	addi	fp,sp,28
 802b81c:	e13ffd15 	stw	r4,-12(fp)
 802b820:	e17ffc15 	stw	r5,-16(fp)
 802b824:	e1bffb15 	stw	r6,-20(fp)
 802b828:	e1fffa15 	stw	r7,-24(fp)
   struct socket * so;

   so = LONG2SO(s);
 802b82c:	e0bffd17 	ldw	r2,-12(fp)
 802b830:	10bff804 	addi	r2,r2,-32
 802b834:	100490ba 	slli	r2,r2,2
 802b838:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802b83c:	008201b4 	movhi	r2,2054
 802b840:	10bf0b04 	addi	r2,r2,-980
 802b844:	e0bfff15 	stw	r2,-4(fp)
 802b848:	00000606 	br	802b864 <bsd_setsockopt+0x58>
 802b84c:	e0ffff17 	ldw	r3,-4(fp)
 802b850:	e0bffe17 	ldw	r2,-8(fp)
 802b854:	18800626 	beq	r3,r2,802b870 <bsd_setsockopt+0x64>
 802b858:	e0bfff17 	ldw	r2,-4(fp)
 802b85c:	10800017 	ldw	r2,0(r2)
 802b860:	e0bfff15 	stw	r2,-4(fp)
 802b864:	e0bfff17 	ldw	r2,-4(fp)
 802b868:	103ff81e 	bne	r2,zero,802b84c <bsd_setsockopt+0x40>
 802b86c:	00000106 	br	802b874 <bsd_setsockopt+0x68>
 802b870:	0001883a 	nop
 802b874:	e0ffff17 	ldw	r3,-4(fp)
 802b878:	e0bffe17 	ldw	r2,-8(fp)
 802b87c:	18800326 	beq	r3,r2,802b88c <bsd_setsockopt+0x80>
 802b880:	80301a80 	call	80301a8 <dtrap>
 802b884:	00bfffc4 	movi	r2,-1
 802b888:	00001206 	br	802b8d4 <bsd_setsockopt+0xc8>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
 802b88c:	e17ffb17 	ldw	r5,-20(fp)
 802b890:	e13ffc17 	ldw	r4,-16(fp)
 802b894:	802b1380 	call	802b138 <bsd_i_sockoptlen>
 802b898:	1007883a 	mov	r3,r2
 802b89c:	e0800217 	ldw	r2,8(fp)
 802b8a0:	10c0050e 	bge	r2,r3,802b8b8 <bsd_setsockopt+0xac>
   {
      so->so_error = EFAULT;
 802b8a4:	e0bffe17 	ldw	r2,-8(fp)
 802b8a8:	00c00384 	movi	r3,14
 802b8ac:	10c00615 	stw	r3,24(r2)
      return -1;
 802b8b0:	00bfffc4 	movi	r2,-1
 802b8b4:	00000706 	br	802b8d4 <bsd_setsockopt+0xc8>
   }

   return t_setsockopt(s, level, name, opt, optlen);
 802b8b8:	e0800217 	ldw	r2,8(fp)
 802b8bc:	d8800015 	stw	r2,0(sp)
 802b8c0:	e1fffa17 	ldw	r7,-24(fp)
 802b8c4:	e1bffb17 	ldw	r6,-20(fp)
 802b8c8:	e17ffc17 	ldw	r5,-16(fp)
 802b8cc:	e13ffd17 	ldw	r4,-12(fp)
 802b8d0:	80339340 	call	8033934 <t_setsockopt>
}
 802b8d4:	e037883a 	mov	sp,fp
 802b8d8:	dfc00117 	ldw	ra,4(sp)
 802b8dc:	df000017 	ldw	fp,0(sp)
 802b8e0:	dec00204 	addi	sp,sp,8
 802b8e4:	f800283a 	ret

0802b8e8 <ccksum>:
 * be done in 16-bit chunks.
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
 802b8e8:	defffa04 	addi	sp,sp,-24
 802b8ec:	df000515 	stw	fp,20(sp)
 802b8f0:	df000504 	addi	fp,sp,20
 802b8f4:	e13ffc15 	stw	r4,-16(fp)
 802b8f8:	e17ffb15 	stw	r5,-20(fp)
   unsigned short *addr = (unsigned short *)ptr;
 802b8fc:	e0bffc17 	ldw	r2,-16(fp)
 802b900:	e0bfff15 	stw	r2,-4(fp)
   unsigned long sum = 0;
 802b904:	e03ffe15 	stw	zero,-8(fp)
   int count = (int)words;
 802b908:	e0bffb17 	ldw	r2,-20(fp)
 802b90c:	e0bffd15 	stw	r2,-12(fp)

   while (--count >= 0)
 802b910:	00000806 	br	802b934 <ccksum+0x4c>
   {
      /*  This is the inner loop */
      sum += *addr++;
 802b914:	e0bfff17 	ldw	r2,-4(fp)
 802b918:	10c00084 	addi	r3,r2,2
 802b91c:	e0ffff15 	stw	r3,-4(fp)
 802b920:	1080000b 	ldhu	r2,0(r2)
 802b924:	10bfffcc 	andi	r2,r2,65535
 802b928:	e0fffe17 	ldw	r3,-8(fp)
 802b92c:	1885883a 	add	r2,r3,r2
 802b930:	e0bffe15 	stw	r2,-8(fp)
   while (--count >= 0)
 802b934:	e0bffd17 	ldw	r2,-12(fp)
 802b938:	10bfffc4 	addi	r2,r2,-1
 802b93c:	e0bffd15 	stw	r2,-12(fp)
 802b940:	e0bffd17 	ldw	r2,-12(fp)
 802b944:	103ff30e 	bge	r2,zero,802b914 <ccksum+0x2c>
   }

   /*  Fold 32-bit sum to 16 bits */
   sum = (sum & 0xffff) + (sum >> 16);
 802b948:	e0bffe17 	ldw	r2,-8(fp)
 802b94c:	10ffffcc 	andi	r3,r2,65535
 802b950:	e0bffe17 	ldw	r2,-8(fp)
 802b954:	1004d43a 	srli	r2,r2,16
 802b958:	1885883a 	add	r2,r3,r2
 802b95c:	e0bffe15 	stw	r2,-8(fp)
   sum = (sum & 0xffff) + (sum >> 16);
 802b960:	e0bffe17 	ldw	r2,-8(fp)
 802b964:	10ffffcc 	andi	r3,r2,65535
 802b968:	e0bffe17 	ldw	r2,-8(fp)
 802b96c:	1004d43a 	srli	r2,r2,16
 802b970:	1885883a 	add	r2,r3,r2
 802b974:	e0bffe15 	stw	r2,-8(fp)

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
 802b978:	e0bffe17 	ldw	r2,-8(fp)
}
 802b97c:	e037883a 	mov	sp,fp
 802b980:	df000017 	ldw	fp,0(sp)
 802b984:	dec00104 	addi	sp,sp,4
 802b988:	f800283a 	ret

0802b98c <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
 802b98c:	defffc04 	addi	sp,sp,-16
 802b990:	dfc00315 	stw	ra,12(sp)
 802b994:	df000215 	stw	fp,8(sp)
 802b998:	df000204 	addi	fp,sp,8
 802b99c:	e13fff15 	stw	r4,-4(fp)
 802b9a0:	e17ffe15 	stw	r5,-8(fp)
   switch (cksum_select)
 802b9a4:	d0a02d17 	ldw	r2,-32588(gp)
 802b9a8:	108000a0 	cmpeqi	r2,r2,2
 802b9ac:	1000041e 	bne	r2,zero,802b9c0 <cksum+0x34>
   {
      case 1:
      default:
         return (ccksum(ptr, count));
 802b9b0:	e17ffe17 	ldw	r5,-8(fp)
 802b9b4:	e13fff17 	ldw	r4,-4(fp)
 802b9b8:	802b8e80 	call	802b8e8 <ccksum>
 802b9bc:	00000306 	br	802b9cc <cksum+0x40>
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
 802b9c0:	e17ffe17 	ldw	r5,-8(fp)
 802b9c4:	e13fff17 	ldw	r4,-4(fp)
 802b9c8:	80300140 	call	8030014 <asm_cksum>
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
 802b9cc:	e037883a 	mov	sp,fp
 802b9d0:	dfc00117 	ldw	ra,4(sp)
 802b9d4:	df000017 	ldw	fp,0(sp)
 802b9d8:	dec00204 	addi	sp,sp,8
 802b9dc:	f800283a 	ret

0802b9e0 <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
 802b9e0:	defffe04 	addi	sp,sp,-8
 802b9e4:	dfc00115 	stw	ra,4(sp)
 802b9e8:	df000015 	stw	fp,0(sp)
 802b9ec:	d839883a 	mov	fp,sp
   dtrap();
 802b9f0:	80301a80 	call	80301a8 <dtrap>
   return 0;
 802b9f4:	0005883a 	mov	r2,zero
}
 802b9f8:	e037883a 	mov	sp,fp
 802b9fc:	dfc00117 	ldw	ra,4(sp)
 802ba00:	df000017 	ldw	fp,0(sp)
 802ba04:	dec00204 	addi	sp,sp,8
 802ba08:	f800283a 	ret

0802ba0c <nextarg>:
 * RETURNS:  pointer to next arg in string 
 */

char *   
nextarg(char * argp)
{
 802ba0c:	defffe04 	addi	sp,sp,-8
 802ba10:	df000115 	stw	fp,4(sp)
 802ba14:	df000104 	addi	fp,sp,4
 802ba18:	e13fff15 	stw	r4,-4(fp)
   while (*argp > ' ')argp++; /* scan past current arg */
 802ba1c:	00000306 	br	802ba2c <nextarg+0x20>
 802ba20:	e0bfff17 	ldw	r2,-4(fp)
 802ba24:	10800044 	addi	r2,r2,1
 802ba28:	e0bfff15 	stw	r2,-4(fp)
 802ba2c:	e0bfff17 	ldw	r2,-4(fp)
 802ba30:	10800003 	ldbu	r2,0(r2)
 802ba34:	10803fcc 	andi	r2,r2,255
 802ba38:	1080201c 	xori	r2,r2,128
 802ba3c:	10bfe004 	addi	r2,r2,-128
 802ba40:	10800848 	cmpgei	r2,r2,33
 802ba44:	103ff61e 	bne	r2,zero,802ba20 <nextarg+0x14>
      while (*argp == ' ')argp++;   /* scan past spaces */
 802ba48:	00000306 	br	802ba58 <nextarg+0x4c>
 802ba4c:	e0bfff17 	ldw	r2,-4(fp)
 802ba50:	10800044 	addi	r2,r2,1
 802ba54:	e0bfff15 	stw	r2,-4(fp)
 802ba58:	e0bfff17 	ldw	r2,-4(fp)
 802ba5c:	10800003 	ldbu	r2,0(r2)
 802ba60:	10803fcc 	andi	r2,r2,255
 802ba64:	1080201c 	xori	r2,r2,128
 802ba68:	10bfe004 	addi	r2,r2,-128
 802ba6c:	10800820 	cmpeqi	r2,r2,32
 802ba70:	103ff61e 	bne	r2,zero,802ba4c <nextarg+0x40>
      return (argp);
 802ba74:	e0bfff17 	ldw	r2,-4(fp)
}
 802ba78:	e037883a 	mov	sp,fp
 802ba7c:	df000017 	ldw	fp,0(sp)
 802ba80:	dec00104 	addi	sp,sp,4
 802ba84:	f800283a 	ret

0802ba88 <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
 802ba88:	defff804 	addi	sp,sp,-32
 802ba8c:	dfc00715 	stw	ra,28(sp)
 802ba90:	df000615 	stw	fp,24(sp)
 802ba94:	df000604 	addi	fp,sp,24
 802ba98:	e13ffc15 	stw	r4,-16(fp)
 802ba9c:	e17ffb15 	stw	r5,-20(fp)
 802baa0:	e1bffa15 	stw	r6,-24(fp)
   u_char * data  =  (u_char *)buffer;
 802baa4:	e0bffb17 	ldw	r2,-20(fp)
 802baa8:	e0bfff15 	stw	r2,-4(fp)
   unsigned int count;
   char  c;

   while (len)
 802baac:	00003f06 	br	802bbac <hexdump+0x124>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 802bab0:	e03ffe15 	stw	zero,-8(fp)
 802bab4:	00000d06 	br	802baec <hexdump+0x64>
         ns_printf(pio, "%02x ", *(data + count));
 802bab8:	e0ffff17 	ldw	r3,-4(fp)
 802babc:	e0bffe17 	ldw	r2,-8(fp)
 802bac0:	1885883a 	add	r2,r3,r2
 802bac4:	10800003 	ldbu	r2,0(r2)
 802bac8:	10803fcc 	andi	r2,r2,255
 802bacc:	100d883a 	mov	r6,r2
 802bad0:	01420174 	movhi	r5,2053
 802bad4:	294d0a04 	addi	r5,r5,13352
 802bad8:	e13ffc17 	ldw	r4,-16(fp)
 802badc:	802bfa40 	call	802bfa4 <ns_printf>
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 802bae0:	e0bffe17 	ldw	r2,-8(fp)
 802bae4:	10800044 	addi	r2,r2,1
 802bae8:	e0bffe15 	stw	r2,-8(fp)
 802baec:	e0bffe17 	ldw	r2,-8(fp)
 802baf0:	10800428 	cmpgeui	r2,r2,16
 802baf4:	1000031e 	bne	r2,zero,802bb04 <hexdump+0x7c>
 802baf8:	e0fffe17 	ldw	r3,-8(fp)
 802bafc:	e0bffa17 	ldw	r2,-24(fp)
 802bb00:	18bfed36 	bltu	r3,r2,802bab8 <hexdump+0x30>
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 802bb04:	e03ffe15 	stw	zero,-8(fp)
 802bb08:	00001606 	br	802bb64 <hexdump+0xdc>
      {
         c = *(data + count);
 802bb0c:	e0ffff17 	ldw	r3,-4(fp)
 802bb10:	e0bffe17 	ldw	r2,-8(fp)
 802bb14:	1885883a 	add	r2,r3,r2
 802bb18:	10800003 	ldbu	r2,0(r2)
 802bb1c:	e0bffdc5 	stb	r2,-9(fp)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
 802bb20:	e0bffdc7 	ldb	r2,-9(fp)
 802bb24:	10800810 	cmplti	r2,r2,32
 802bb28:	1000051e 	bne	r2,zero,802bb40 <hexdump+0xb8>
 802bb2c:	e0bffdc7 	ldb	r2,-9(fp)
 802bb30:	10801fe0 	cmpeqi	r2,r2,127
 802bb34:	1000021e 	bne	r2,zero,802bb40 <hexdump+0xb8>
 802bb38:	e0bffdc7 	ldb	r2,-9(fp)
 802bb3c:	00000106 	br	802bb44 <hexdump+0xbc>
 802bb40:	00800b84 	movi	r2,46
 802bb44:	100d883a 	mov	r6,r2
 802bb48:	01420174 	movhi	r5,2053
 802bb4c:	294d0c04 	addi	r5,r5,13360
 802bb50:	e13ffc17 	ldw	r4,-16(fp)
 802bb54:	802bfa40 	call	802bfa4 <ns_printf>
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 802bb58:	e0bffe17 	ldw	r2,-8(fp)
 802bb5c:	10800044 	addi	r2,r2,1
 802bb60:	e0bffe15 	stw	r2,-8(fp)
 802bb64:	e0bffe17 	ldw	r2,-8(fp)
 802bb68:	10800428 	cmpgeui	r2,r2,16
 802bb6c:	1000031e 	bne	r2,zero,802bb7c <hexdump+0xf4>
 802bb70:	e0fffe17 	ldw	r3,-8(fp)
 802bb74:	e0bffa17 	ldw	r2,-24(fp)
 802bb78:	18bfe436 	bltu	r3,r2,802bb0c <hexdump+0x84>
      }
      ns_printf(pio,"\n");
 802bb7c:	01420174 	movhi	r5,2053
 802bb80:	294d0d04 	addi	r5,r5,13364
 802bb84:	e13ffc17 	ldw	r4,-16(fp)
 802bb88:	802bfa40 	call	802bfa4 <ns_printf>
      len -= count;
 802bb8c:	e0fffa17 	ldw	r3,-24(fp)
 802bb90:	e0bffe17 	ldw	r2,-8(fp)
 802bb94:	1885c83a 	sub	r2,r3,r2
 802bb98:	e0bffa15 	stw	r2,-24(fp)
      data += count;
 802bb9c:	e0ffff17 	ldw	r3,-4(fp)
 802bba0:	e0bffe17 	ldw	r2,-8(fp)
 802bba4:	1885883a 	add	r2,r3,r2
 802bba8:	e0bfff15 	stw	r2,-4(fp)
   while (len)
 802bbac:	e0bffa17 	ldw	r2,-24(fp)
 802bbb0:	103fbf1e 	bne	r2,zero,802bab0 <hexdump+0x28>
   }
}
 802bbb4:	0001883a 	nop
 802bbb8:	0001883a 	nop
 802bbbc:	e037883a 	mov	sp,fp
 802bbc0:	dfc00117 	ldw	ra,4(sp)
 802bbc4:	df000017 	ldw	fp,0(sp)
 802bbc8:	dec00204 	addi	sp,sp,8
 802bbcc:	f800283a 	ret

0802bbd0 <print_ipad>:

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 802bbd0:	defffa04 	addi	sp,sp,-24
 802bbd4:	dfc00515 	stw	ra,20(sp)
 802bbd8:	df000415 	stw	fp,16(sp)
 802bbdc:	df000404 	addi	fp,sp,16
 802bbe0:	e13ffe15 	stw	r4,-8(fp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
 802bbe4:	e0bffe17 	ldw	r2,-8(fp)
 802bbe8:	e0bfff15 	stw	r2,-4(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
    ip.ip.ipchar[0],
 802bbec:	e0bfff03 	ldbu	r2,-4(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 802bbf0:	11003fcc 	andi	r4,r2,255
    ip.ip.ipchar[1],
 802bbf4:	e0bfff43 	ldbu	r2,-3(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 802bbf8:	11403fcc 	andi	r5,r2,255
    ip.ip.ipchar[2],
 802bbfc:	e0bfff83 	ldbu	r2,-2(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 802bc00:	10803fcc 	andi	r2,r2,255
    ip.ip.ipchar[3]);
 802bc04:	e0ffffc3 	ldbu	r3,-1(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 802bc08:	18c03fcc 	andi	r3,r3,255
 802bc0c:	d8c00115 	stw	r3,4(sp)
 802bc10:	d8800015 	stw	r2,0(sp)
 802bc14:	280f883a 	mov	r7,r5
 802bc18:	200d883a 	mov	r6,r4
 802bc1c:	01420174 	movhi	r5,2053
 802bc20:	294d0e04 	addi	r5,r5,13368
 802bc24:	010201b4 	movhi	r4,2054
 802bc28:	213def84 	addi	r4,r4,-2114
 802bc2c:	8003d0c0 	call	8003d0c <sprintf>

   return ipreturn;
 802bc30:	008201b4 	movhi	r2,2054
 802bc34:	10bdef84 	addi	r2,r2,-2114
}
 802bc38:	e037883a 	mov	sp,fp
 802bc3c:	dfc00117 	ldw	ra,4(sp)
 802bc40:	df000017 	ldw	fp,0(sp)
 802bc44:	dec00204 	addi	sp,sp,8
 802bc48:	f800283a 	ret

0802bc4c <print_uptime>:

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
 802bc4c:	defff804 	addi	sp,sp,-32
 802bc50:	dfc00715 	stw	ra,28(sp)
 802bc54:	df000615 	stw	fp,24(sp)
 802bc58:	df000604 	addi	fp,sp,24
 802bc5c:	e13ffc15 	stw	r4,-16(fp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
 802bc60:	e0bffc17 	ldw	r2,-16(fp)
 802bc64:	01401904 	movi	r5,100
 802bc68:	1009883a 	mov	r4,r2
 802bc6c:	8011fdc0 	call	8011fdc <__udivsi3>
 802bc70:	e0bffc15 	stw	r2,-16(fp)
   seconds = (unsigned)(timetick%60);
 802bc74:	e0bffc17 	ldw	r2,-16(fp)
 802bc78:	01400f04 	movi	r5,60
 802bc7c:	1009883a 	mov	r4,r2
 802bc80:	80120400 	call	8012040 <__umodsi3>
 802bc84:	e0bfff15 	stw	r2,-4(fp)
   timetick = timetick/60;    /* turn timetick into minutes */
 802bc88:	e0bffc17 	ldw	r2,-16(fp)
 802bc8c:	01400f04 	movi	r5,60
 802bc90:	1009883a 	mov	r4,r2
 802bc94:	8011fdc0 	call	8011fdc <__udivsi3>
 802bc98:	e0bffc15 	stw	r2,-16(fp)
   minutes = (unsigned)(timetick%60);
 802bc9c:	e0bffc17 	ldw	r2,-16(fp)
 802bca0:	01400f04 	movi	r5,60
 802bca4:	1009883a 	mov	r4,r2
 802bca8:	80120400 	call	8012040 <__umodsi3>
 802bcac:	e0bffe15 	stw	r2,-8(fp)
   timetick = timetick/60;    /* turn timetick into hours */
 802bcb0:	e0bffc17 	ldw	r2,-16(fp)
 802bcb4:	01400f04 	movi	r5,60
 802bcb8:	1009883a 	mov	r4,r2
 802bcbc:	8011fdc0 	call	8011fdc <__udivsi3>
 802bcc0:	e0bffc15 	stw	r2,-16(fp)
   hours = (unsigned)(timetick%24);
 802bcc4:	e0bffc17 	ldw	r2,-16(fp)
 802bcc8:	01400604 	movi	r5,24
 802bccc:	1009883a 	mov	r4,r2
 802bcd0:	80120400 	call	8012040 <__umodsi3>
 802bcd4:	e0bffd15 	stw	r2,-12(fp)
   timetick = timetick/24;    /* turn timetick into days */
 802bcd8:	e0bffc17 	ldw	r2,-16(fp)
 802bcdc:	01400604 	movi	r5,24
 802bce0:	1009883a 	mov	r4,r2
 802bce4:	8011fdc0 	call	8011fdc <__udivsi3>
 802bce8:	e0bffc15 	stw	r2,-16(fp)

   if (timetick)  /* Is there a whole number of days? */
 802bcec:	e0bffc17 	ldw	r2,-16(fp)
 802bcf0:	10000c26 	beq	r2,zero,802bd24 <print_uptime+0xd8>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
 802bcf4:	e0bfff17 	ldw	r2,-4(fp)
 802bcf8:	d8800115 	stw	r2,4(sp)
 802bcfc:	e0bffe17 	ldw	r2,-8(fp)
 802bd00:	d8800015 	stw	r2,0(sp)
 802bd04:	e1fffd17 	ldw	r7,-12(fp)
 802bd08:	e1bffc17 	ldw	r6,-16(fp)
 802bd0c:	01420174 	movhi	r5,2053
 802bd10:	294d1104 	addi	r5,r5,13380
 802bd14:	01020174 	movhi	r4,2053
 802bd18:	211dac04 	addi	r4,r4,30384
 802bd1c:	8003d0c0 	call	8003d0c <sprintf>
 802bd20:	00001306 	br	802bd70 <print_uptime+0x124>
    timetick, hours, minutes, seconds);
   else if (hours)
 802bd24:	e0bffd17 	ldw	r2,-12(fp)
 802bd28:	10000a26 	beq	r2,zero,802bd54 <print_uptime+0x108>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
 802bd2c:	e0bfff17 	ldw	r2,-4(fp)
 802bd30:	d8800015 	stw	r2,0(sp)
 802bd34:	e1fffe17 	ldw	r7,-8(fp)
 802bd38:	e1bffd17 	ldw	r6,-12(fp)
 802bd3c:	01420174 	movhi	r5,2053
 802bd40:	294d1704 	addi	r5,r5,13404
 802bd44:	01020174 	movhi	r4,2053
 802bd48:	211dac04 	addi	r4,r4,30384
 802bd4c:	8003d0c0 	call	8003d0c <sprintf>
 802bd50:	00000706 	br	802bd70 <print_uptime+0x124>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
 802bd54:	e1ffff17 	ldw	r7,-4(fp)
 802bd58:	e1bffe17 	ldw	r6,-8(fp)
 802bd5c:	01420174 	movhi	r5,2053
 802bd60:	294d1c04 	addi	r5,r5,13424
 802bd64:	01020174 	movhi	r4,2053
 802bd68:	211dac04 	addi	r4,r4,30384
 802bd6c:	8003d0c0 	call	8003d0c <sprintf>
   return tistring;
 802bd70:	00820174 	movhi	r2,2053
 802bd74:	109dac04 	addi	r2,r2,30384
}
 802bd78:	e037883a 	mov	sp,fp
 802bd7c:	dfc00117 	ldw	ra,4(sp)
 802bd80:	df000017 	ldw	fp,0(sp)
 802bd84:	dec00204 	addi	sp,sp,8
 802bd88:	f800283a 	ret

0802bd8c <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
 802bd8c:	defffd04 	addi	sp,sp,-12
 802bd90:	dfc00215 	stw	ra,8(sp)
 802bd94:	df000115 	stw	fp,4(sp)
 802bd98:	df000104 	addi	fp,sp,4
 802bd9c:	e13fff15 	stw	r4,-4(fp)
   dprintf("panic: %s\n", msg);
 802bda0:	e17fff17 	ldw	r5,-4(fp)
 802bda4:	01020174 	movhi	r4,2053
 802bda8:	210d2104 	addi	r4,r4,13444
 802bdac:	8003b840 	call	8003b84 <printf>
   dtrap();                   /* try to hook debugger */
 802bdb0:	80301a80 	call	80301a8 <dtrap>
   netexit(1);                /* try to clean up */
 802bdb4:	01000044 	movi	r4,1
 802bdb8:	804687c0 	call	804687c <netexit>
}
 802bdbc:	0001883a 	nop
 802bdc0:	e037883a 	mov	sp,fp
 802bdc4:	dfc00117 	ldw	ra,4(sp)
 802bdc8:	df000017 	ldw	fp,0(sp)
 802bdcc:	dec00204 	addi	sp,sp,8
 802bdd0:	f800283a 	ret

0802bdd4 <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
 802bdd4:	defffb04 	addi	sp,sp,-20
 802bdd8:	df000415 	stw	fp,16(sp)
 802bddc:	df000404 	addi	fp,sp,16
 802bde0:	e13ffd15 	stw	r4,-12(fp)
 802bde4:	2805883a 	mov	r2,r5
 802bde8:	e0bffc05 	stb	r2,-16(fp)
   int   i;
   char *   out   =  eth_prt_buf;
 802bdec:	008201b4 	movhi	r2,2054
 802bdf0:	10bdeb04 	addi	r2,r2,-2132
 802bdf4:	e0bffe15 	stw	r2,-8(fp)

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
 802bdf8:	e03fff15 	stw	zero,-4(fp)
 802bdfc:	00003f06 	br	802befc <print_eth+0x128>
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 802be00:	e0bffd17 	ldw	r2,-12(fp)
 802be04:	10800003 	ldbu	r2,0(r2)
 802be08:	10803fcc 	andi	r2,r2,255
 802be0c:	1004d13a 	srli	r2,r2,4
 802be10:	10800c04 	addi	r2,r2,48
 802be14:	1007883a 	mov	r3,r2
 802be18:	e0bffe17 	ldw	r2,-8(fp)
 802be1c:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 802be20:	e0bffe17 	ldw	r2,-8(fp)
 802be24:	10800003 	ldbu	r2,0(r2)
 802be28:	10803fcc 	andi	r2,r2,255
 802be2c:	1080201c 	xori	r2,r2,128
 802be30:	10bfe004 	addi	r2,r2,-128
 802be34:	10800e90 	cmplti	r2,r2,58
 802be38:	1000061e 	bne	r2,zero,802be54 <print_eth+0x80>
         (*out) += 7;
 802be3c:	e0bffe17 	ldw	r2,-8(fp)
 802be40:	10800003 	ldbu	r2,0(r2)
 802be44:	108001c4 	addi	r2,r2,7
 802be48:	1007883a 	mov	r3,r2
 802be4c:	e0bffe17 	ldw	r2,-8(fp)
 802be50:	10c00005 	stb	r3,0(r2)
      out++;
 802be54:	e0bffe17 	ldw	r2,-8(fp)
 802be58:	10800044 	addi	r2,r2,1
 802be5c:	e0bffe15 	stw	r2,-8(fp)

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 802be60:	e0bffd17 	ldw	r2,-12(fp)
 802be64:	10800003 	ldbu	r2,0(r2)
 802be68:	108003cc 	andi	r2,r2,15
 802be6c:	10800c04 	addi	r2,r2,48
 802be70:	1007883a 	mov	r3,r2
 802be74:	e0bffe17 	ldw	r2,-8(fp)
 802be78:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 802be7c:	e0bffe17 	ldw	r2,-8(fp)
 802be80:	10800003 	ldbu	r2,0(r2)
 802be84:	10803fcc 	andi	r2,r2,255
 802be88:	1080201c 	xori	r2,r2,128
 802be8c:	10bfe004 	addi	r2,r2,-128
 802be90:	10800e90 	cmplti	r2,r2,58
 802be94:	1000061e 	bne	r2,zero,802beb0 <print_eth+0xdc>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
 802be98:	e0bffe17 	ldw	r2,-8(fp)
 802be9c:	10800003 	ldbu	r2,0(r2)
 802bea0:	108001c4 	addi	r2,r2,7
 802bea4:	1007883a 	mov	r3,r2
 802bea8:	e0bffe17 	ldw	r2,-8(fp)
 802beac:	10c00005 	stb	r3,0(r2)
      out++;
 802beb0:	e0bffe17 	ldw	r2,-8(fp)
 802beb4:	10800044 	addi	r2,r2,1
 802beb8:	e0bffe15 	stw	r2,-8(fp)

      /* optional spacer character */
      if (spacer && i < 5)
 802bebc:	e0bffc07 	ldb	r2,-16(fp)
 802bec0:	10000826 	beq	r2,zero,802bee4 <print_eth+0x110>
 802bec4:	e0bfff17 	ldw	r2,-4(fp)
 802bec8:	10800148 	cmpgei	r2,r2,5
 802becc:	1000051e 	bne	r2,zero,802bee4 <print_eth+0x110>
         *out++ = spacer;
 802bed0:	e0bffe17 	ldw	r2,-8(fp)
 802bed4:	10c00044 	addi	r3,r2,1
 802bed8:	e0fffe15 	stw	r3,-8(fp)
 802bedc:	e0fffc03 	ldbu	r3,-16(fp)
 802bee0:	10c00005 	stb	r3,0(r2)
      addr++;
 802bee4:	e0bffd17 	ldw	r2,-12(fp)
 802bee8:	10800044 	addi	r2,r2,1
 802beec:	e0bffd15 	stw	r2,-12(fp)
   for (i = 0; i < 6; i++)
 802bef0:	e0bfff17 	ldw	r2,-4(fp)
 802bef4:	10800044 	addi	r2,r2,1
 802bef8:	e0bfff15 	stw	r2,-4(fp)
 802befc:	e0bfff17 	ldw	r2,-4(fp)
 802bf00:	10800190 	cmplti	r2,r2,6
 802bf04:	103fbe1e 	bne	r2,zero,802be00 <print_eth+0x2c>
   }
   *out = 0;
 802bf08:	e0bffe17 	ldw	r2,-8(fp)
 802bf0c:	10000005 	stb	zero,0(r2)
   return eth_prt_buf;
 802bf10:	008201b4 	movhi	r2,2054
 802bf14:	10bdeb04 	addi	r2,r2,-2132
}
 802bf18:	e037883a 	mov	sp,fp
 802bf1c:	df000017 	ldw	fp,0(sp)
 802bf20:	dec00104 	addi	sp,sp,4
 802bf24:	f800283a 	ret

0802bf28 <uslash>:
 * RETURNS:  pointer to formatted text
 */

char *   
uslash(char * path)
{
 802bf28:	defffd04 	addi	sp,sp,-12
 802bf2c:	df000215 	stw	fp,8(sp)
 802bf30:	df000204 	addi	fp,sp,8
 802bf34:	e13ffe15 	stw	r4,-8(fp)
   char *   cp;

   for (cp = path; *cp; cp++)
 802bf38:	e0bffe17 	ldw	r2,-8(fp)
 802bf3c:	e0bfff15 	stw	r2,-4(fp)
 802bf40:	00000d06 	br	802bf78 <uslash+0x50>
      if (*cp == '\\')
 802bf44:	e0bfff17 	ldw	r2,-4(fp)
 802bf48:	10800003 	ldbu	r2,0(r2)
 802bf4c:	10803fcc 	andi	r2,r2,255
 802bf50:	1080201c 	xori	r2,r2,128
 802bf54:	10bfe004 	addi	r2,r2,-128
 802bf58:	10801718 	cmpnei	r2,r2,92
 802bf5c:	1000031e 	bne	r2,zero,802bf6c <uslash+0x44>
      *cp = '/';
 802bf60:	e0bfff17 	ldw	r2,-4(fp)
 802bf64:	00c00bc4 	movi	r3,47
 802bf68:	10c00005 	stb	r3,0(r2)
   for (cp = path; *cp; cp++)
 802bf6c:	e0bfff17 	ldw	r2,-4(fp)
 802bf70:	10800044 	addi	r2,r2,1
 802bf74:	e0bfff15 	stw	r2,-4(fp)
 802bf78:	e0bfff17 	ldw	r2,-4(fp)
 802bf7c:	10800003 	ldbu	r2,0(r2)
 802bf80:	10803fcc 	andi	r2,r2,255
 802bf84:	1080201c 	xori	r2,r2,128
 802bf88:	10bfe004 	addi	r2,r2,-128
 802bf8c:	103fed1e 	bne	r2,zero,802bf44 <uslash+0x1c>
   return path;
 802bf90:	e0bffe17 	ldw	r2,-8(fp)
}
 802bf94:	e037883a 	mov	sp,fp
 802bf98:	df000017 	ldw	fp,0(sp)
 802bf9c:	dec00104 	addi	sp,sp,4
 802bfa0:	f800283a 	ret

0802bfa4 <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
 802bfa4:	defff304 	addi	sp,sp,-52
 802bfa8:	dfc00a15 	stw	ra,40(sp)
 802bfac:	df000915 	stw	fp,36(sp)
 802bfb0:	dc400815 	stw	r17,32(sp)
 802bfb4:	dc000715 	stw	r16,28(sp)
 802bfb8:	df000904 	addi	fp,sp,36
 802bfbc:	e13ff815 	stw	r4,-32(fp)
 802bfc0:	e17ff715 	stw	r5,-36(fp)
 802bfc4:	e1800215 	stw	r6,8(fp)
 802bfc8:	e1c00315 	stw	r7,12(fp)
   char *   outbuf=NULL;
 802bfcc:	e03ffc15 	stw	zero,-16(fp)
   int   ret_value   ;
   int   buf_size =  MAXIOSIZE   ;
 802bfd0:	00802704 	movi	r2,156
 802bfd4:	e0bffd15 	stw	r2,-12(fp)
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 802bfd8:	e0bff817 	ldw	r2,-32(fp)
 802bfdc:	e0bffb15 	stw	r2,-20(fp)
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
 802bfe0:	e0bffb17 	ldw	r2,-20(fp)
 802bfe4:	1000091e 	bne	r2,zero,802c00c <ns_printf+0x68>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
 802bfe8:	e0800204 	addi	r2,fp,8
 802bfec:	e0bff915 	stw	r2,-28(fp)
      ret_value = vprintf(format,argList);
 802bff0:	e0bff917 	ldw	r2,-28(fp)
 802bff4:	100b883a 	mov	r5,r2
 802bff8:	e13ff717 	ldw	r4,-36(fp)
 802bffc:	804e5dc0 	call	804e5dc <vprintf>
 802c000:	e0bffa15 	stw	r2,-24(fp)
      va_end(argList);
      return ret_value;
 802c004:	e0bffa17 	ldw	r2,-24(fp)
 802c008:	00003b06 	br	802c0f8 <ns_printf+0x154>
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
 802c00c:	e0bffb17 	ldw	r2,-20(fp)
 802c010:	10800117 	ldw	r2,4(r2)
 802c014:	1000021e 	bne	r2,zero,802c020 <ns_printf+0x7c>
   {
      /* Programming mistake. Output function not set. */
      return -1;
 802c018:	00bfffc4 	movi	r2,-1
 802c01c:	00003606 	br	802c0f8 <ns_printf+0x154>

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
 802c020:	e13ff717 	ldw	r4,-36(fp)
 802c024:	80044880 	call	8004488 <strlen>
 802c028:	e0bffa15 	stw	r2,-24(fp)
   if (ret_value >= MAXIOSIZE)
 802c02c:	e0bffa17 	ldw	r2,-24(fp)
 802c030:	10802710 	cmplti	r2,r2,156
 802c034:	1000041e 	bne	r2,zero,802c048 <ns_printf+0xa4>
   {
      buf_size += ret_value ;
 802c038:	e0fffd17 	ldw	r3,-12(fp)
 802c03c:	e0bffa17 	ldw	r2,-24(fp)
 802c040:	1885883a 	add	r2,r3,r2
 802c044:	e0bffd15 	stw	r2,-12(fp)
   }

   outbuf=(char *)npalloc(buf_size); 
 802c048:	e0bffd17 	ldw	r2,-12(fp)
 802c04c:	1009883a 	mov	r4,r2
 802c050:	8030d080 	call	8030d08 <npalloc>
 802c054:	e0bffc15 	stw	r2,-16(fp)

   if (outbuf == NULL)
 802c058:	e0bffc17 	ldw	r2,-16(fp)
 802c05c:	1000021e 	bne	r2,zero,802c068 <ns_printf+0xc4>
   {
      return -2;
 802c060:	00bfff84 	movi	r2,-2
 802c064:	00002406 	br	802c0f8 <ns_printf+0x154>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
 802c068:	e0800204 	addi	r2,fp,8
 802c06c:	e0bff915 	stw	r2,-28(fp)
   ret_value = vsprintf(outbuf,format,argList);
 802c070:	e0bff917 	ldw	r2,-28(fp)
 802c074:	100d883a 	mov	r6,r2
 802c078:	e17ff717 	ldw	r5,-36(fp)
 802c07c:	e13ffc17 	ldw	r4,-16(fp)
 802c080:	804e6580 	call	804e658 <vsprintf>
 802c084:	e0bffa15 	stw	r2,-24(fp)
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
 802c088:	e13ffc17 	ldw	r4,-16(fp)
 802c08c:	80044880 	call	8004488 <strlen>
 802c090:	1007883a 	mov	r3,r2
 802c094:	e0bffd17 	ldw	r2,-12(fp)
 802c098:	10c0080e 	bge	r2,r3,802c0bc <ns_printf+0x118>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
 802c09c:	01020174 	movhi	r4,2053
 802c0a0:	210d2404 	addi	r4,r4,13456
 802c0a4:	802bd8c0 	call	802bd8c <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
 802c0a8:	e0bffd17 	ldw	r2,-12(fp)
 802c0ac:	10bfffc4 	addi	r2,r2,-1
 802c0b0:	e0fffc17 	ldw	r3,-16(fp)
 802c0b4:	1885883a 	add	r2,r3,r2
 802c0b8:	10000005 	stb	zero,0(r2)
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
 802c0bc:	e0bffb17 	ldw	r2,-20(fp)
 802c0c0:	14000117 	ldw	r16,4(r2)
 802c0c4:	e0bffb17 	ldw	r2,-20(fp)
 802c0c8:	14400217 	ldw	r17,8(r2)
 802c0cc:	e13ffc17 	ldw	r4,-16(fp)
 802c0d0:	80044880 	call	8004488 <strlen>
 802c0d4:	100d883a 	mov	r6,r2
 802c0d8:	e17ffc17 	ldw	r5,-16(fp)
 802c0dc:	8809883a 	mov	r4,r17
 802c0e0:	803ee83a 	callr	r16
 802c0e4:	e0bffa15 	stw	r2,-24(fp)

   /* Free memory for the output string */
   npfree(outbuf); 
 802c0e8:	e13ffc17 	ldw	r4,-16(fp)
 802c0ec:	8030d3c0 	call	8030d3c <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
 802c0f0:	802c8fc0 	call	802c8fc <tk_yield>

   return ret_value ;
 802c0f4:	e0bffa17 	ldw	r2,-24(fp)
}
 802c0f8:	e6fffe04 	addi	sp,fp,-8
 802c0fc:	dfc00317 	ldw	ra,12(sp)
 802c100:	df000217 	ldw	fp,8(sp)
 802c104:	dc400117 	ldw	r17,4(sp)
 802c108:	dc000017 	ldw	r16,0(sp)
 802c10c:	dec00604 	addi	sp,sp,24
 802c110:	f800283a 	ret

0802c114 <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
 802c114:	defffb04 	addi	sp,sp,-20
 802c118:	dfc00415 	stw	ra,16(sp)
 802c11c:	df000315 	stw	fp,12(sp)
 802c120:	df000304 	addi	fp,sp,12
 802c124:	e13fff15 	stw	r4,-4(fp)
 802c128:	e17ffe15 	stw	r5,-8(fp)
 802c12c:	e1bffd15 	stw	r6,-12(fp)
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
 802c130:	e17ffe17 	ldw	r5,-8(fp)
 802c134:	01020174 	movhi	r4,2053
 802c138:	210d2b04 	addi	r4,r4,13484
 802c13c:	8003b840 	call	8003b84 <printf>
   USE_ARG(s);
   return len;
 802c140:	e0bffd17 	ldw	r2,-12(fp)
}
 802c144:	e037883a 	mov	sp,fp
 802c148:	dfc00117 	ldw	ra,4(sp)
 802c14c:	df000017 	ldw	fp,0(sp)
 802c150:	dec00204 	addi	sp,sp,8
 802c154:	f800283a 	ret

0802c158 <con_page>:
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
 802c158:	defffa04 	addi	sp,sp,-24
 802c15c:	dfc00515 	stw	ra,20(sp)
 802c160:	df000415 	stw	fp,16(sp)
 802c164:	df000404 	addi	fp,sp,16
 802c168:	e13ffd15 	stw	r4,-12(fp)
 802c16c:	e17ffc15 	stw	r5,-16(fp)
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 802c170:	e0bffd17 	ldw	r2,-12(fp)
 802c174:	e0bfff15 	stw	r2,-4(fp)

   if (lines % 20 == 0)   /* Time to get user input */
 802c178:	e0bffc17 	ldw	r2,-16(fp)
 802c17c:	01400504 	movi	r5,20
 802c180:	1009883a 	mov	r4,r2
 802c184:	8011f680 	call	8011f68 <__modsi3>
 802c188:	1000231e 	bne	r2,zero,802c218 <con_page+0xc0>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
 802c18c:	e0bfff17 	ldw	r2,-4(fp)
 802c190:	10002126 	beq	r2,zero,802c218 <con_page+0xc0>
 802c194:	e0bfff17 	ldw	r2,-4(fp)
 802c198:	10800317 	ldw	r2,12(r2)
 802c19c:	10001e26 	beq	r2,zero,802c218 <con_page+0xc0>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
 802c1a0:	01420174 	movhi	r5,2053
 802c1a4:	294d2c04 	addi	r5,r5,13488
 802c1a8:	e13fff17 	ldw	r4,-4(fp)
 802c1ac:	802bfa40 	call	802bfa4 <ns_printf>

         do 
         {
            ch = (pio->getch)(pio->id);
 802c1b0:	e0bfff17 	ldw	r2,-4(fp)
 802c1b4:	10800317 	ldw	r2,12(r2)
 802c1b8:	e0ffff17 	ldw	r3,-4(fp)
 802c1bc:	18c00217 	ldw	r3,8(r3)
 802c1c0:	1809883a 	mov	r4,r3
 802c1c4:	103ee83a 	callr	r2
 802c1c8:	e0bffe15 	stw	r2,-8(fp)
            if (ch == 0)
 802c1cc:	e0bffe17 	ldw	r2,-8(fp)
 802c1d0:	1000011e 	bne	r2,zero,802c1d8 <con_page+0x80>
               tk_yield();    /* Give timeslice to other processes */
 802c1d4:	802c8fc0 	call	802c8fc <tk_yield>
         } while (ch == 0) ;
 802c1d8:	e0bffe17 	ldw	r2,-8(fp)
 802c1dc:	103ff426 	beq	r2,zero,802c1b0 <con_page+0x58>

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
 802c1e0:	e0bffe17 	ldw	r2,-8(fp)
 802c1e4:	10bfffd8 	cmpnei	r2,r2,-1
 802c1e8:	1000021e 	bne	r2,zero,802c1f4 <con_page+0x9c>
            return 1 ;
 802c1ec:	00800044 	movi	r2,1
 802c1f0:	00000a06 	br	802c21c <con_page+0xc4>

         ns_printf(pio,"\n");
 802c1f4:	01420174 	movhi	r5,2053
 802c1f8:	294d0d04 	addi	r5,r5,13364
 802c1fc:	e13fff17 	ldw	r4,-4(fp)
 802c200:	802bfa40 	call	802bfa4 <ns_printf>
         if (ch == 27)   /* ESC key pressed */
 802c204:	e0bffe17 	ldw	r2,-8(fp)
 802c208:	108006d8 	cmpnei	r2,r2,27
 802c20c:	1000021e 	bne	r2,zero,802c218 <con_page+0xc0>
            return 1 ;
 802c210:	00800044 	movi	r2,1
 802c214:	00000106 	br	802c21c <con_page+0xc4>
      }
   }
   return  0;
 802c218:	0005883a 	mov	r2,zero
}
 802c21c:	e037883a 	mov	sp,fp
 802c220:	dfc00117 	ldw	ra,4(sp)
 802c224:	df000017 	ldw	fp,0(sp)
 802c228:	dec00204 	addi	sp,sp,8
 802c22c:	f800283a 	ret

0802c230 <parse_args>:

char **parse_args(char *buf, int argc, int *pargc_index)
{
 802c230:	defff704 	addi	sp,sp,-36
 802c234:	dfc00815 	stw	ra,32(sp)
 802c238:	df000715 	stw	fp,28(sp)
 802c23c:	df000704 	addi	fp,sp,28
 802c240:	e13ffb15 	stw	r4,-20(fp)
 802c244:	e17ffa15 	stw	r5,-24(fp)
 802c248:	e1bff915 	stw	r6,-28(fp)
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
 802c24c:	e0bffb17 	ldw	r2,-20(fp)
 802c250:	e0bffe15 	stw	r2,-8(fp)
   char **pargv = NULL;
 802c254:	e03ffd15 	stw	zero,-12(fp)
   *pargc_index = 0;
 802c258:	e0bff917 	ldw	r2,-28(fp)
 802c25c:	10000015 	stw	zero,0(r2)
   if (buf == NULL)
 802c260:	e0bffb17 	ldw	r2,-20(fp)
 802c264:	1000021e 	bne	r2,zero,802c270 <parse_args+0x40>
   {
      return (NULL);
 802c268:	0005883a 	mov	r2,zero
 802c26c:	00006906 	br	802c414 <parse_args+0x1e4>
   }
   len = strlen(buf);
 802c270:	e13ffb17 	ldw	r4,-20(fp)
 802c274:	80044880 	call	8004488 <strlen>
 802c278:	e0bffc15 	stw	r2,-16(fp)
   if (len <= 0)
 802c27c:	e0bffc17 	ldw	r2,-16(fp)
 802c280:	00800216 	blt	zero,r2,802c28c <parse_args+0x5c>
   {
      return (NULL);
 802c284:	0005883a 	mov	r2,zero
 802c288:	00006206 	br	802c414 <parse_args+0x1e4>
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
 802c28c:	e0bffa17 	ldw	r2,-24(fp)
 802c290:	100490ba 	slli	r2,r2,2
 802c294:	1009883a 	mov	r4,r2
 802c298:	8030d080 	call	8030d08 <npalloc>
 802c29c:	e0bffd15 	stw	r2,-12(fp)
   if (pargv == NULL)
 802c2a0:	e0bffd17 	ldw	r2,-12(fp)
 802c2a4:	1000051e 	bne	r2,zero,802c2bc <parse_args+0x8c>
   {
      return (NULL);
 802c2a8:	0005883a 	mov	r2,zero
 802c2ac:	00005906 	br	802c414 <parse_args+0x1e4>
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
 802c2b0:	e0bffe17 	ldw	r2,-8(fp)
 802c2b4:	10800044 	addi	r2,r2,1
 802c2b8:	e0bffe15 	stw	r2,-8(fp)
   while (*bp == ' ')
 802c2bc:	e0bffe17 	ldw	r2,-8(fp)
 802c2c0:	10800003 	ldbu	r2,0(r2)
 802c2c4:	10803fcc 	andi	r2,r2,255
 802c2c8:	1080201c 	xori	r2,r2,128
 802c2cc:	10bfe004 	addi	r2,r2,-128
 802c2d0:	10800820 	cmpeqi	r2,r2,32
 802c2d4:	103ff61e 	bne	r2,zero,802c2b0 <parse_args+0x80>
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 802c2d8:	00002e06 	br	802c394 <parse_args+0x164>
   {
      pargv[(*pargc_index)] = bp;
 802c2dc:	e0bff917 	ldw	r2,-28(fp)
 802c2e0:	10800017 	ldw	r2,0(r2)
 802c2e4:	100490ba 	slli	r2,r2,2
 802c2e8:	e0fffd17 	ldw	r3,-12(fp)
 802c2ec:	1885883a 	add	r2,r3,r2
 802c2f0:	e0fffe17 	ldw	r3,-8(fp)
 802c2f4:	10c00015 	stw	r3,0(r2)
      (*pargc_index)++;
 802c2f8:	e0bff917 	ldw	r2,-28(fp)
 802c2fc:	10800017 	ldw	r2,0(r2)
 802c300:	10c00044 	addi	r3,r2,1
 802c304:	e0bff917 	ldw	r2,-28(fp)
 802c308:	10c00015 	stw	r3,0(r2)
      while (*bp != ' ' && *bp != '\0')
 802c30c:	00000306 	br	802c31c <parse_args+0xec>
      {
         bp++; 
 802c310:	e0bffe17 	ldw	r2,-8(fp)
 802c314:	10800044 	addi	r2,r2,1
 802c318:	e0bffe15 	stw	r2,-8(fp)
      while (*bp != ' ' && *bp != '\0')
 802c31c:	e0bffe17 	ldw	r2,-8(fp)
 802c320:	10800003 	ldbu	r2,0(r2)
 802c324:	10803fcc 	andi	r2,r2,255
 802c328:	1080201c 	xori	r2,r2,128
 802c32c:	10bfe004 	addi	r2,r2,-128
 802c330:	10800820 	cmpeqi	r2,r2,32
 802c334:	10000a1e 	bne	r2,zero,802c360 <parse_args+0x130>
 802c338:	e0bffe17 	ldw	r2,-8(fp)
 802c33c:	10800003 	ldbu	r2,0(r2)
 802c340:	10803fcc 	andi	r2,r2,255
 802c344:	1080201c 	xori	r2,r2,128
 802c348:	10bfe004 	addi	r2,r2,-128
 802c34c:	103ff01e 	bne	r2,zero,802c310 <parse_args+0xe0>
      }
      while (*bp == ' ' && *bp != '\0')
 802c350:	00000306 	br	802c360 <parse_args+0x130>
      {
         bp++; 
 802c354:	e0bffe17 	ldw	r2,-8(fp)
 802c358:	10800044 	addi	r2,r2,1
 802c35c:	e0bffe15 	stw	r2,-8(fp)
      while (*bp == ' ' && *bp != '\0')
 802c360:	e0bffe17 	ldw	r2,-8(fp)
 802c364:	10800003 	ldbu	r2,0(r2)
 802c368:	10803fcc 	andi	r2,r2,255
 802c36c:	1080201c 	xori	r2,r2,128
 802c370:	10bfe004 	addi	r2,r2,-128
 802c374:	10800818 	cmpnei	r2,r2,32
 802c378:	1000061e 	bne	r2,zero,802c394 <parse_args+0x164>
 802c37c:	e0bffe17 	ldw	r2,-8(fp)
 802c380:	10800003 	ldbu	r2,0(r2)
 802c384:	10803fcc 	andi	r2,r2,255
 802c388:	1080201c 	xori	r2,r2,128
 802c38c:	10bfe004 	addi	r2,r2,-128
 802c390:	103ff01e 	bne	r2,zero,802c354 <parse_args+0x124>
   while ((*bp != '\0') && ((*pargc_index) < argc))
 802c394:	e0bffe17 	ldw	r2,-8(fp)
 802c398:	10800003 	ldbu	r2,0(r2)
 802c39c:	10803fcc 	andi	r2,r2,255
 802c3a0:	1080201c 	xori	r2,r2,128
 802c3a4:	10bfe004 	addi	r2,r2,-128
 802c3a8:	10000426 	beq	r2,zero,802c3bc <parse_args+0x18c>
 802c3ac:	e0bff917 	ldw	r2,-28(fp)
 802c3b0:	10c00017 	ldw	r3,0(r2)
 802c3b4:	e0bffa17 	ldw	r2,-24(fp)
 802c3b8:	18bfc816 	blt	r3,r2,802c2dc <parse_args+0xac>
      }
   }
   for (i = 0; i < len; i++)
 802c3bc:	e03fff15 	stw	zero,-4(fp)
 802c3c0:	00001006 	br	802c404 <parse_args+0x1d4>
   {
      if (buf[i] == ' ')
 802c3c4:	e0bfff17 	ldw	r2,-4(fp)
 802c3c8:	e0fffb17 	ldw	r3,-20(fp)
 802c3cc:	1885883a 	add	r2,r3,r2
 802c3d0:	10800003 	ldbu	r2,0(r2)
 802c3d4:	10803fcc 	andi	r2,r2,255
 802c3d8:	1080201c 	xori	r2,r2,128
 802c3dc:	10bfe004 	addi	r2,r2,-128
 802c3e0:	10800818 	cmpnei	r2,r2,32
 802c3e4:	1000041e 	bne	r2,zero,802c3f8 <parse_args+0x1c8>
         buf[i] = '\0';
 802c3e8:	e0bfff17 	ldw	r2,-4(fp)
 802c3ec:	e0fffb17 	ldw	r3,-20(fp)
 802c3f0:	1885883a 	add	r2,r3,r2
 802c3f4:	10000005 	stb	zero,0(r2)
   for (i = 0; i < len; i++)
 802c3f8:	e0bfff17 	ldw	r2,-4(fp)
 802c3fc:	10800044 	addi	r2,r2,1
 802c400:	e0bfff15 	stw	r2,-4(fp)
 802c404:	e0ffff17 	ldw	r3,-4(fp)
 802c408:	e0bffc17 	ldw	r2,-16(fp)
 802c40c:	18bfed16 	blt	r3,r2,802c3c4 <parse_args+0x194>
   {
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
 802c410:	e0bffd17 	ldw	r2,-12(fp)
}
 802c414:	e037883a 	mov	sp,fp
 802c418:	dfc00117 	ldw	ra,4(sp)
 802c41c:	df000017 	ldw	fp,0(sp)
 802c420:	dec00204 	addi	sp,sp,8
 802c424:	f800283a 	ret

0802c428 <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
 802c428:	defffc04 	addi	sp,sp,-16
 802c42c:	dfc00315 	stw	ra,12(sp)
 802c430:	df000215 	stw	fp,8(sp)
 802c434:	df000204 	addi	fp,sp,8
   int   i;
   int   e;

   iniche_net_ready = FALSE;
 802c438:	d0208715 	stw	zero,-32228(gp)

   e = prep_modules();
 802c43c:	80402480 	call	8040248 <prep_modules>
 802c440:	e0bffe15 	stw	r2,-8(fp)

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 802c444:	e03fff15 	stw	zero,-4(fp)
 802c448:	00001a06 	br	802c4b4 <netmain+0x8c>
   {
      e = TK_NEWTASK(&nettasks[i]);
 802c44c:	e0bfff17 	ldw	r2,-4(fp)
 802c450:	10c00624 	muli	r3,r2,24
 802c454:	00820174 	movhi	r2,2053
 802c458:	109ae004 	addi	r2,r2,27520
 802c45c:	1885883a 	add	r2,r3,r2
 802c460:	1009883a 	mov	r4,r2
 802c464:	80305500 	call	8030550 <TK_NEWTASK>
 802c468:	e0bffe15 	stw	r2,-8(fp)
      if (e != 0)
 802c46c:	e0bffe17 	ldw	r2,-8(fp)
 802c470:	10000d26 	beq	r2,zero,802c4a8 <netmain+0x80>
      {
         dprintf("task create error\n");
 802c474:	01020174 	movhi	r4,2053
 802c478:	210d3e04 	addi	r4,r4,13560
 802c47c:	8003ca80 	call	8003ca8 <puts>
         panic((char *)&nettasks[i].name);
 802c480:	e0bfff17 	ldw	r2,-4(fp)
 802c484:	10800624 	muli	r2,r2,24
 802c488:	10c00104 	addi	r3,r2,4
 802c48c:	00820174 	movhi	r2,2053
 802c490:	109ae004 	addi	r2,r2,27520
 802c494:	1885883a 	add	r2,r3,r2
 802c498:	1009883a 	mov	r4,r2
 802c49c:	802bd8c0 	call	802bd8c <panic>
         return -1;  /* compiler warnings */
 802c4a0:	00bfffc4 	movi	r2,-1
 802c4a4:	00001306 	br	802c4f4 <netmain+0xcc>
   for (i = 0; i < num_net_tasks; i++)
 802c4a8:	e0bfff17 	ldw	r2,-4(fp)
 802c4ac:	10800044 	addi	r2,r2,1
 802c4b0:	e0bfff15 	stw	r2,-4(fp)
 802c4b4:	d0a02e17 	ldw	r2,-32584(gp)
 802c4b8:	e0ffff17 	ldw	r3,-4(fp)
 802c4bc:	18bfe316 	blt	r3,r2,802c44c <netmain+0x24>
      }
   }
   
   e = create_apptasks();
 802c4c0:	80406380 	call	8040638 <create_apptasks>
 802c4c4:	e0bffe15 	stw	r2,-8(fp)
   if (e != 0) 
 802c4c8:	e0bffe17 	ldw	r2,-8(fp)
 802c4cc:	10000826 	beq	r2,zero,802c4f0 <netmain+0xc8>
   {
      dprintf("task create error\n");
 802c4d0:	01020174 	movhi	r4,2053
 802c4d4:	210d3e04 	addi	r4,r4,13560
 802c4d8:	8003ca80 	call	8003ca8 <puts>
      panic("netmain");
 802c4dc:	01020174 	movhi	r4,2053
 802c4e0:	210d4304 	addi	r4,r4,13580
 802c4e4:	802bd8c0 	call	802bd8c <panic>
      return -1;  /* compiler warnings */
 802c4e8:	00bfffc4 	movi	r2,-1
 802c4ec:	00000106 	br	802c4f4 <netmain+0xcc>
#ifdef MAIN_TASK_IS_NET
   tk_netmain(TK_NETMAINPARM);
   panic("net task return");
   return -1;
#else
   return 0;
 802c4f0:	0005883a 	mov	r2,zero
#endif
#endif   /* NO_INET_STACK */
}
 802c4f4:	e037883a 	mov	sp,fp
 802c4f8:	dfc00117 	ldw	ra,4(sp)
 802c4fc:	df000017 	ldw	fp,0(sp)
 802c500:	dec00204 	addi	sp,sp,8
 802c504:	f800283a 	ret

0802c508 <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
 802c508:	defffc04 	addi	sp,sp,-16
 802c50c:	dfc00315 	stw	ra,12(sp)
 802c510:	df000215 	stw	fp,8(sp)
 802c514:	df000204 	addi	fp,sp,8
 802c518:	e13ffe15 	stw	r4,-8(fp)
   netmain_init(); /* initialize all modules */
 802c51c:	803fec40 	call	803fec4 <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
 802c520:	00800044 	movi	r2,1
 802c524:	d0a08715 	stw	r2,-32228(gp)

   for (;;)
   {
      TK_NETRX_BLOCK();
 802c528:	d0a0a617 	ldw	r2,-32104(gp)
 802c52c:	e0ffffc4 	addi	r3,fp,-1
 802c530:	180d883a 	mov	r6,r3
 802c534:	01401904 	movi	r5,100
 802c538:	1009883a 	mov	r4,r2
 802c53c:	801a6700 	call	801a670 <OSSemPend>
 802c540:	e0bfffc3 	ldbu	r2,-1(fp)
 802c544:	10803fcc 	andi	r2,r2,255
 802c548:	10000526 	beq	r2,zero,802c560 <tk_netmain+0x58>
 802c54c:	e0bfffc3 	ldbu	r2,-1(fp)
 802c550:	10803fcc 	andi	r2,r2,255
 802c554:	108002a0 	cmpeqi	r2,r2,10
 802c558:	1000011e 	bne	r2,zero,802c560 <tk_netmain+0x58>
 802c55c:	80301a80 	call	80301a8 <dtrap>
      netmain_wakes++;  /* count wakeups */
 802c560:	d0a08517 	ldw	r2,-32236(gp)
 802c564:	10800044 	addi	r2,r2,1
 802c568:	d0a08515 	stw	r2,-32236(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
 802c56c:	008201b4 	movhi	r2,2054
 802c570:	10bd0b17 	ldw	r2,-3028(r2)
 802c574:	103fec26 	beq	r2,zero,802c528 <tk_netmain+0x20>
         pktdemux();
 802c578:	80295840 	call	8029584 <pktdemux>
      TK_NETRX_BLOCK();
 802c57c:	003fea06 	br	802c528 <tk_netmain+0x20>

0802c580 <tk_nettick>:
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
 802c580:	defffd04 	addi	sp,sp,-12
 802c584:	dfc00215 	stw	ra,8(sp)
 802c588:	df000115 	stw	fp,4(sp)
 802c58c:	df000104 	addi	fp,sp,4
 802c590:	e13fff15 	stw	r4,-4(fp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 802c594:	00000306 	br	802c5a4 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
 802c598:	802ea7c0 	call	802ea7c <dhc_second>
#endif
      TK_SLEEP(1);
 802c59c:	01000084 	movi	r4,2
 802c5a0:	801c4780 	call	801c478 <OSTimeDly>
   while (!iniche_net_ready)
 802c5a4:	d0a08717 	ldw	r2,-32228(gp)
 802c5a8:	103ffb26 	beq	r2,zero,802c598 <tk_nettick+0x18>
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
 802c5ac:	01000084 	movi	r4,2
 802c5b0:	801c4780 	call	801c478 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
 802c5b4:	d0a08617 	ldw	r2,-32232(gp)
 802c5b8:	10800044 	addi	r2,r2,1
 802c5bc:	d0a08615 	stw	r2,-32232(gp)
      inet_timer();  /* let various timeouts occur */
 802c5c0:	804029c0 	call	804029c <inet_timer>
      TK_SLEEP(SYS_SHORT_SLEEP);
 802c5c4:	003ff906 	br	802c5ac <tk_nettick+0x2c>

0802c5c8 <TK_OSTimeDly>:
u_char   TK_OSTaskQuery(void);



void TK_OSTimeDly(void)
{
 802c5c8:	defffe04 	addi	sp,sp,-8
 802c5cc:	dfc00115 	stw	ra,4(sp)
 802c5d0:	df000015 	stw	fp,0(sp)
 802c5d4:	d839883a 	mov	fp,sp
   OSTimeDly(2);
 802c5d8:	01000084 	movi	r4,2
 802c5dc:	801c4780 	call	801c478 <OSTimeDly>
}
 802c5e0:	0001883a 	nop
 802c5e4:	e037883a 	mov	sp,fp
 802c5e8:	dfc00117 	ldw	ra,4(sp)
 802c5ec:	df000017 	ldw	fp,0(sp)
 802c5f0:	dec00204 	addi	sp,sp,8
 802c5f4:	f800283a 	ret

0802c5f8 <TK_OSTaskResume>:



void TK_OSTaskResume(u_char * Id)
{
 802c5f8:	defffc04 	addi	sp,sp,-16
 802c5fc:	dfc00315 	stw	ra,12(sp)
 802c600:	df000215 	stw	fp,8(sp)
 802c604:	df000204 	addi	fp,sp,8
 802c608:	e13ffe15 	stw	r4,-8(fp)
INT8U err;

   err = OSTaskResume(*Id);
 802c60c:	e0bffe17 	ldw	r2,-8(fp)
 802c610:	10800003 	ldbu	r2,0(r2)
 802c614:	10803fcc 	andi	r2,r2,255
 802c618:	1009883a 	mov	r4,r2
 802c61c:	801bd600 	call	801bd60 <OSTaskResume>
 802c620:	e0bfffc5 	stb	r2,-1(fp)
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
 802c624:	e0bfffc3 	ldbu	r2,-1(fp)
 802c628:	10000a26 	beq	r2,zero,802c654 <TK_OSTaskResume+0x5c>
 802c62c:	e0bfffc3 	ldbu	r2,-1(fp)
 802c630:	10801120 	cmpeqi	r2,r2,68
 802c634:	1000071e 	bne	r2,zero,802c654 <TK_OSTaskResume+0x5c>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
 802c638:	01020174 	movhi	r4,2053
 802c63c:	210d4504 	addi	r4,r4,13588
 802c640:	8003ca80 	call	8003ca8 <puts>
      dtrap();
 802c644:	80301a80 	call	80301a8 <dtrap>
      panic("TK_OSTaskResume");      
 802c648:	01020174 	movhi	r4,2053
 802c64c:	210d5204 	addi	r4,r4,13640
 802c650:	802bd8c0 	call	802bd8c <panic>
   }
#endif
}
 802c654:	0001883a 	nop
 802c658:	e037883a 	mov	sp,fp
 802c65c:	dfc00117 	ldw	ra,4(sp)
 802c660:	df000017 	ldw	fp,0(sp)
 802c664:	dec00204 	addi	sp,sp,8
 802c668:	f800283a 	ret

0802c66c <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
 802c66c:	defffb04 	addi	sp,sp,-20
 802c670:	dfc00415 	stw	ra,16(sp)
 802c674:	df000315 	stw	fp,12(sp)
 802c678:	df000304 	addi	fp,sp,12
 802c67c:	e13ffd15 	stw	r4,-12(fp)
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 802c680:	e03fff15 	stw	zero,-4(fp)
 802c684:	00003d06 	br	802c77c <tcp_sleep+0x110>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
 802c688:	e0bfff17 	ldw	r2,-4(fp)
 802c68c:	10c00324 	muli	r3,r2,12
 802c690:	008201b4 	movhi	r2,2054
 802c694:	1885883a 	add	r2,r3,r2
 802c698:	10beba17 	ldw	r2,-1304(r2)
 802c69c:	1000341e 	bne	r2,zero,802c770 <tcp_sleep+0x104>
      {
         global_TCPwakeup_set[i].soc_event = event;
 802c6a0:	e0bfff17 	ldw	r2,-4(fp)
 802c6a4:	11000324 	muli	r4,r2,12
 802c6a8:	e0fffd17 	ldw	r3,-12(fp)
 802c6ac:	008201b4 	movhi	r2,2054
 802c6b0:	2085883a 	add	r2,r4,r2
 802c6b4:	10feba15 	stw	r3,-1304(r2)
         global_TCPwakeup_set[i].ctick = cticks;
 802c6b8:	d0e0a317 	ldw	r3,-32116(gp)
 802c6bc:	e0bfff17 	ldw	r2,-4(fp)
 802c6c0:	11000324 	muli	r4,r2,12
 802c6c4:	008201b4 	movhi	r2,2054
 802c6c8:	2085883a 	add	r2,r4,r2
 802c6cc:	10feb915 	stw	r3,-1308(r2)
         if (i > global_TCPwakeup_setIndx)
 802c6d0:	d0e0a217 	ldw	r3,-32120(gp)
 802c6d4:	e0bfff17 	ldw	r2,-4(fp)
 802c6d8:	1880020e 	bge	r3,r2,802c6e4 <tcp_sleep+0x78>
            global_TCPwakeup_setIndx = i;
 802c6dc:	e0bfff17 	ldw	r2,-4(fp)
 802c6e0:	d0a0a215 	stw	r2,-32120(gp)

         tcp_sleep_count++;
 802c6e4:	d0a09e17 	ldw	r2,-32136(gp)
 802c6e8:	10800044 	addi	r2,r2,1
 802c6ec:	d0a09e15 	stw	r2,-32136(gp)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
 802c6f0:	0009883a 	mov	r4,zero
 802c6f4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
 802c6f8:	e0bfff17 	ldw	r2,-4(fp)
 802c6fc:	10c00324 	muli	r3,r2,12
 802c700:	008201b4 	movhi	r2,2054
 802c704:	1885883a 	add	r2,r3,r2
 802c708:	10bebb17 	ldw	r2,-1300(r2)
 802c70c:	e0fffec4 	addi	r3,fp,-5
 802c710:	180d883a 	mov	r6,r3
 802c714:	01401904 	movi	r5,100
 802c718:	1009883a 	mov	r4,r2
 802c71c:	801a6700 	call	801a670 <OSSemPend>
         if (err == 10)
 802c720:	e0bffec3 	ldbu	r2,-5(fp)
 802c724:	10803fcc 	andi	r2,r2,255
 802c728:	10800298 	cmpnei	r2,r2,10
 802c72c:	10000d1e 	bne	r2,zero,802c764 <tcp_sleep+0xf8>
         {
            ++tcp_sleep_timeout;
 802c730:	d0a08917 	ldw	r2,-32220(gp)
 802c734:	10800044 	addi	r2,r2,1
 802c738:	d0a08915 	stw	r2,-32220(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
 802c73c:	e0bfff17 	ldw	r2,-4(fp)
 802c740:	10c00324 	muli	r3,r2,12
 802c744:	008201b4 	movhi	r2,2054
 802c748:	1885883a 	add	r2,r3,r2
 802c74c:	103eb915 	stw	zero,-1308(r2)
            global_TCPwakeup_set[i].soc_event = NULL;
 802c750:	e0bfff17 	ldw	r2,-4(fp)
 802c754:	10c00324 	muli	r3,r2,12
 802c758:	008201b4 	movhi	r2,2054
 802c75c:	1885883a 	add	r2,r3,r2
 802c760:	103eba15 	stw	zero,-1304(r2)
         }

         /* Regain the lock */
         LOCK_NET_RESOURCE(NET_RESID);
 802c764:	0009883a 	mov	r4,zero
 802c768:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
 802c76c:	00000d06 	br	802c7a4 <tcp_sleep+0x138>
   for (i = 0; i < GLOBWAKE_SZ; i++)
 802c770:	e0bfff17 	ldw	r2,-4(fp)
 802c774:	10800044 	addi	r2,r2,1
 802c778:	e0bfff15 	stw	r2,-4(fp)
 802c77c:	e0bfff17 	ldw	r2,-4(fp)
 802c780:	10800510 	cmplti	r2,r2,20
 802c784:	103fc01e 	bne	r2,zero,802c688 <tcp_sleep+0x1c>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
 802c788:	e0bfff17 	ldw	r2,-4(fp)
 802c78c:	d0a0a215 	stw	r2,-32120(gp)

   UNLOCK_NET_RESOURCE(NET_RESID);
 802c790:	0009883a 	mov	r4,zero
 802c794:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   TK_YIELD();
 802c798:	802c8fc0 	call	802c8fc <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
 802c79c:	0009883a 	mov	r4,zero
 802c7a0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
}
 802c7a4:	e037883a 	mov	sp,fp
 802c7a8:	dfc00117 	ldw	ra,4(sp)
 802c7ac:	df000017 	ldw	fp,0(sp)
 802c7b0:	dec00204 	addi	sp,sp,8
 802c7b4:	f800283a 	ret

0802c7b8 <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
 802c7b8:	defffc04 	addi	sp,sp,-16
 802c7bc:	dfc00315 	stw	ra,12(sp)
 802c7c0:	df000215 	stw	fp,8(sp)
 802c7c4:	df000204 	addi	fp,sp,8
 802c7c8:	e13ffe15 	stw	r4,-8(fp)
   int i;

   OSSchedLock();
 802c7cc:	8015a580 	call	8015a58 <OSSchedLock>

   for (i = 0; i < GLOBWAKE_SZ; i++)
 802c7d0:	e03fff15 	stw	zero,-4(fp)
 802c7d4:	00002406 	br	802c868 <tcp_wakeup+0xb0>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 802c7d8:	e0bfff17 	ldw	r2,-4(fp)
 802c7dc:	10c00324 	muli	r3,r2,12
 802c7e0:	008201b4 	movhi	r2,2054
 802c7e4:	1885883a 	add	r2,r3,r2
 802c7e8:	10beb917 	ldw	r2,-1308(r2)
 802c7ec:	10001b26 	beq	r2,zero,802c85c <tcp_wakeup+0xa4>
          (global_TCPwakeup_set[i].soc_event == event))
 802c7f0:	e0bfff17 	ldw	r2,-4(fp)
 802c7f4:	10c00324 	muli	r3,r2,12
 802c7f8:	008201b4 	movhi	r2,2054
 802c7fc:	1885883a 	add	r2,r3,r2
 802c800:	10beba17 	ldw	r2,-1304(r2)
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 802c804:	e0fffe17 	ldw	r3,-8(fp)
 802c808:	1880141e 	bne	r3,r2,802c85c <tcp_wakeup+0xa4>
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
 802c80c:	e0bfff17 	ldw	r2,-4(fp)
 802c810:	10c00324 	muli	r3,r2,12
 802c814:	008201b4 	movhi	r2,2054
 802c818:	1885883a 	add	r2,r3,r2
 802c81c:	10bebb17 	ldw	r2,-1300(r2)
 802c820:	1009883a 	mov	r4,r2
 802c824:	801a9f80 	call	801a9f8 <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
 802c828:	e0bfff17 	ldw	r2,-4(fp)
 802c82c:	10c00324 	muli	r3,r2,12
 802c830:	008201b4 	movhi	r2,2054
 802c834:	1885883a 	add	r2,r3,r2
 802c838:	103eb915 	stw	zero,-1308(r2)
         global_TCPwakeup_set[i].soc_event = NULL;
 802c83c:	e0bfff17 	ldw	r2,-4(fp)
 802c840:	10c00324 	muli	r3,r2,12
 802c844:	008201b4 	movhi	r2,2054
 802c848:	1885883a 	add	r2,r3,r2
 802c84c:	103eba15 	stw	zero,-1304(r2)

         tcp_wakeup_count++;
 802c850:	d0a09f17 	ldw	r2,-32132(gp)
 802c854:	10800044 	addi	r2,r2,1
 802c858:	d0a09f15 	stw	r2,-32132(gp)
   for (i = 0; i < GLOBWAKE_SZ; i++)
 802c85c:	e0bfff17 	ldw	r2,-4(fp)
 802c860:	10800044 	addi	r2,r2,1
 802c864:	e0bfff15 	stw	r2,-4(fp)
 802c868:	e0bfff17 	ldw	r2,-4(fp)
 802c86c:	10800510 	cmplti	r2,r2,20
 802c870:	103fd91e 	bne	r2,zero,802c7d8 <tcp_wakeup+0x20>
      }
   }

   OSSchedUnlock();
 802c874:	8015ae80 	call	8015ae8 <OSSchedUnlock>
}
 802c878:	0001883a 	nop
 802c87c:	e037883a 	mov	sp,fp
 802c880:	dfc00117 	ldw	ra,4(sp)
 802c884:	df000017 	ldw	fp,0(sp)
 802c888:	dec00204 	addi	sp,sp,8
 802c88c:	f800283a 	ret

0802c890 <TK_OSTaskQuery>:



u_char TK_OSTaskQuery(void)
{
 802c890:	deffe204 	addi	sp,sp,-120
 802c894:	dfc01d15 	stw	ra,116(sp)
 802c898:	df001c15 	stw	fp,112(sp)
 802c89c:	df001c04 	addi	fp,sp,112
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
 802c8a0:	e0bfe404 	addi	r2,fp,-112
 802c8a4:	100b883a 	mov	r5,r2
 802c8a8:	01003fc4 	movi	r4,255
 802c8ac:	801c2e00 	call	801c2e0 <OSTaskQuery>
 802c8b0:	e0bfffc5 	stb	r2,-1(fp)

   if (err == OS_NO_ERR)
 802c8b4:	e0bfffc3 	ldbu	r2,-1(fp)
 802c8b8:	1000041e 	bne	r2,zero,802c8cc <TK_OSTaskQuery+0x3c>
   {
      task_prio = task_data.OSTCBPrio;
 802c8bc:	e0bff083 	ldbu	r2,-62(fp)
 802c8c0:	e0bfff85 	stb	r2,-2(fp)
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
 802c8c4:	e0bfff83 	ldbu	r2,-2(fp)
 802c8c8:	00000706 	br	802c8e8 <TK_OSTaskQuery+0x58>
      dprintf("ChronOS API call failure, unable to identify task!");
 802c8cc:	01020174 	movhi	r4,2053
 802c8d0:	210d5604 	addi	r4,r4,13656
 802c8d4:	8003b840 	call	8003b84 <printf>
      panic("TK_OSTaskQuery");
 802c8d8:	01020174 	movhi	r4,2053
 802c8dc:	210d6304 	addi	r4,r4,13708
 802c8e0:	802bd8c0 	call	802bd8c <panic>
      return 0;
 802c8e4:	0005883a 	mov	r2,zero
}
 802c8e8:	e037883a 	mov	sp,fp
 802c8ec:	dfc00117 	ldw	ra,4(sp)
 802c8f0:	df000017 	ldw	fp,0(sp)
 802c8f4:	dec00204 	addi	sp,sp,8
 802c8f8:	f800283a 	ret

0802c8fc <tk_yield>:



void
tk_yield(void)
{
 802c8fc:	defffe04 	addi	sp,sp,-8
 802c900:	dfc00115 	stw	ra,4(sp)
 802c904:	df000015 	stw	fp,0(sp)
 802c908:	d839883a 	mov	fp,sp
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
 802c90c:	01000044 	movi	r4,1
 802c910:	801c4780 	call	801c478 <OSTimeDly>
}
 802c914:	0001883a 	nop
 802c918:	e037883a 	mov	sp,fp
 802c91c:	dfc00117 	ldw	ra,4(sp)
 802c920:	df000017 	ldw	fp,0(sp)
 802c924:	dec00204 	addi	sp,sp,8
 802c928:	f800283a 	ret

0802c92c <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
 802c92c:	deffef04 	addi	sp,sp,-68
 802c930:	dfc01015 	stw	ra,64(sp)
 802c934:	df000f15 	stw	fp,60(sp)
 802c938:	df000f04 	addi	fp,sp,60
 802c93c:	e13ff215 	stw	r4,-56(fp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
 802c940:	01420174 	movhi	r5,2053
 802c944:	294d6704 	addi	r5,r5,13724
 802c948:	e13ff217 	ldw	r4,-56(fp)
 802c94c:	802bfa40 	call	802bfa4 <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
 802c950:	d0a06b17 	ldw	r2,-32340(gp)
 802c954:	100d883a 	mov	r6,r2
 802c958:	01420174 	movhi	r5,2053
 802c95c:	294d6d04 	addi	r5,r5,13748
 802c960:	e13ff217 	ldw	r4,-56(fp)
 802c964:	802bfa40 	call	802bfa4 <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
 802c968:	01420174 	movhi	r5,2053
 802c96c:	294d7504 	addi	r5,r5,13780
 802c970:	e13ff217 	ldw	r4,-56(fp)
 802c974:	802bfa40 	call	802bfa4 <ns_printf>

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 802c978:	e03fff15 	stw	zero,-4(fp)
 802c97c:	00005006 	br	802cac0 <tk_stats+0x194>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
 802c980:	e0bfff17 	ldw	r2,-4(fp)
 802c984:	100690ba 	slli	r3,r2,2
 802c988:	008201b4 	movhi	r2,2054
 802c98c:	1885883a 	add	r2,r3,r2
 802c990:	10bc0017 	ldw	r2,-4096(r2)
 802c994:	e0bffd15 	stw	r2,-12(fp)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
 802c998:	e0bffd17 	ldw	r2,-12(fp)
 802c99c:	10004426 	beq	r2,zero,802cab0 <tk_stats+0x184>
 802c9a0:	e0bffd17 	ldw	r2,-12(fp)
 802c9a4:	10800058 	cmpnei	r2,r2,1
 802c9a8:	10004126 	beq	r2,zero,802cab0 <tk_stats+0x184>
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
 802c9ac:	e0bffd17 	ldw	r2,-12(fp)
 802c9b0:	10800c83 	ldbu	r2,50(r2)
 802c9b4:	10803fcc 	andi	r2,r2,255
 802c9b8:	e13ff384 	addi	r4,fp,-50
 802c9bc:	e0fff3c4 	addi	r3,fp,-49
 802c9c0:	200d883a 	mov	r6,r4
 802c9c4:	180b883a 	mov	r5,r3
 802c9c8:	1009883a 	mov	r4,r2
 802c9cc:	801ba080 	call	801ba08 <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
 802c9d0:	e0bffd17 	ldw	r2,-12(fp)
 802c9d4:	10800c83 	ldbu	r2,50(r2)
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 802c9d8:	11003fcc 	andi	r4,r2,255
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
 802c9dc:	e0bffd17 	ldw	r2,-12(fp)
 802c9e0:	10800c03 	ldbu	r2,48(r2)
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 802c9e4:	10803fcc 	andi	r2,r2,255
 802c9e8:	e0fff3c4 	addi	r3,fp,-49
 802c9ec:	d8800015 	stw	r2,0(sp)
 802c9f0:	200f883a 	mov	r7,r4
 802c9f4:	180d883a 	mov	r6,r3
 802c9f8:	01420174 	movhi	r5,2053
 802c9fc:	294d8504 	addi	r5,r5,13844
 802ca00:	e13ff217 	ldw	r4,-56(fp)
 802ca04:	802bfa40 	call	802bfa4 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
 802ca08:	e0bffd17 	ldw	r2,-12(fp)
 802ca0c:	10800217 	ldw	r2,8(r2)
 802ca10:	10002226 	beq	r2,zero,802ca9c <tk_stats+0x170>
 802ca14:	e0bffd17 	ldw	r2,-12(fp)
 802ca18:	10800317 	ldw	r2,12(r2)
 802ca1c:	10001f26 	beq	r2,zero,802ca9c <tk_stats+0x170>
      {
         sp = tcb->OSTCBStkBottom + 1;
 802ca20:	e0bffd17 	ldw	r2,-12(fp)
 802ca24:	10800217 	ldw	r2,8(r2)
 802ca28:	10800104 	addi	r2,r2,4
 802ca2c:	e0bffe15 	stw	r2,-8(fp)
         while(*sp == 0)
 802ca30:	00000306 	br	802ca40 <tk_stats+0x114>
            sp++;
 802ca34:	e0bffe17 	ldw	r2,-8(fp)
 802ca38:	10800104 	addi	r2,r2,4
 802ca3c:	e0bffe15 	stw	r2,-8(fp)
         while(*sp == 0)
 802ca40:	e0bffe17 	ldw	r2,-8(fp)
 802ca44:	10800017 	ldw	r2,0(r2)
 802ca48:	103ffa26 	beq	r2,zero,802ca34 <tk_stats+0x108>
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
 802ca4c:	e0bffd17 	ldw	r2,-12(fp)
 802ca50:	10800317 	ldw	r2,12(r2)
 802ca54:	e0fffd17 	ldw	r3,-12(fp)
 802ca58:	18c00217 	ldw	r3,8(r3)
 802ca5c:	e13ffe17 	ldw	r4,-8(fp)
 802ca60:	20c7c83a 	sub	r3,r4,r3
 802ca64:	1807d0ba 	srai	r3,r3,2
 802ca68:	10c5c83a 	sub	r2,r2,r3
 802ca6c:	100490ba 	slli	r2,r2,2
 802ca70:	e0bffc15 	stw	r2,-16(fp)
         ns_printf(pio, "%6d,      %6d\n",
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
 802ca74:	e0bffd17 	ldw	r2,-12(fp)
 802ca78:	10800317 	ldw	r2,12(r2)
         ns_printf(pio, "%6d,      %6d\n",
 802ca7c:	100490ba 	slli	r2,r2,2
 802ca80:	e1fffc17 	ldw	r7,-16(fp)
 802ca84:	100d883a 	mov	r6,r2
 802ca88:	01420174 	movhi	r5,2053
 802ca8c:	294d8d04 	addi	r5,r5,13876
 802ca90:	e13ff217 	ldw	r4,-56(fp)
 802ca94:	802bfa40 	call	802bfa4 <ns_printf>
 802ca98:	00000606 	br	802cab4 <tk_stats+0x188>
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 802ca9c:	01420174 	movhi	r5,2053
 802caa0:	294d9104 	addi	r5,r5,13892
 802caa4:	e13ff217 	ldw	r4,-56(fp)
 802caa8:	802bfa40 	call	802bfa4 <ns_printf>
 802caac:	00000106 	br	802cab4 <tk_stats+0x188>
         continue;
 802cab0:	0001883a 	nop
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 802cab4:	e0bfff17 	ldw	r2,-4(fp)
 802cab8:	10800044 	addi	r2,r2,1
 802cabc:	e0bfff15 	stw	r2,-4(fp)
 802cac0:	e0bfff17 	ldw	r2,-4(fp)
 802cac4:	10800550 	cmplti	r2,r2,21
 802cac8:	103fad1e 	bne	r2,zero,802c980 <tk_stats+0x54>
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
 802cacc:	d0a09e17 	ldw	r2,-32136(gp)
 802cad0:	d0e09f17 	ldw	r3,-32132(gp)
 802cad4:	180f883a 	mov	r7,r3
 802cad8:	100d883a 	mov	r6,r2
 802cadc:	01420174 	movhi	r5,2053
 802cae0:	294d9504 	addi	r5,r5,13908
 802cae4:	e13ff217 	ldw	r4,-56(fp)
 802cae8:	802bfa40 	call	802bfa4 <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
 802caec:	d0a0a217 	ldw	r2,-32120(gp)
 802caf0:	d0e08917 	ldw	r3,-32220(gp)
 802caf4:	180f883a 	mov	r7,r3
 802caf8:	100d883a 	mov	r6,r2
 802cafc:	01420174 	movhi	r5,2053
 802cb00:	294da104 	addi	r5,r5,13956
 802cb04:	e13ff217 	ldw	r4,-56(fp)
 802cb08:	802bfa40 	call	802bfa4 <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
 802cb0c:	0005883a 	mov	r2,zero
}
 802cb10:	e037883a 	mov	sp,fp
 802cb14:	dfc00117 	ldw	ra,4(sp)
 802cb18:	df000017 	ldw	fp,0(sp)
 802cb1c:	dec00204 	addi	sp,sp,8
 802cb20:	f800283a 	ret

0802cb24 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
 802cb24:	defffa04 	addi	sp,sp,-24
 802cb28:	dfc00515 	stw	ra,20(sp)
 802cb2c:	df000415 	stw	fp,16(sp)
 802cb30:	df000404 	addi	fp,sp,16
 802cb34:	e13ffc15 	stw	r4,-16(fp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;
 802cb38:	e03fff15 	stw	zero,-4(fp)

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 802cb3c:	e17ffc17 	ldw	r5,-16(fp)
 802cb40:	01000d84 	movi	r4,54
 802cb44:	802f2e40 	call	802f2e4 <find_opt>
 802cb48:	e0bffe15 	stw	r2,-8(fp)
 802cb4c:	e0bffe17 	ldw	r2,-8(fp)
 802cb50:	10001026 	beq	r2,zero,802cb94 <dhc_get_srv_ipaddr+0x70>
   {
      opts++;
 802cb54:	e0bffe17 	ldw	r2,-8(fp)
 802cb58:	10800044 	addi	r2,r2,1
 802cb5c:	e0bffe15 	stw	r2,-8(fp)
      optlen = *opts;
 802cb60:	e0bffe17 	ldw	r2,-8(fp)
 802cb64:	10800003 	ldbu	r2,0(r2)
 802cb68:	e0bffdc5 	stb	r2,-9(fp)
      opts++;
 802cb6c:	e0bffe17 	ldw	r2,-8(fp)
 802cb70:	10800044 	addi	r2,r2,1
 802cb74:	e0bffe15 	stw	r2,-8(fp)
      srv_ipaddr = dh_getlong(opts);
 802cb78:	e13ffe17 	ldw	r4,-8(fp)
 802cb7c:	802e77c0 	call	802e77c <dh_getlong>
 802cb80:	e0bfff15 	stw	r2,-4(fp)
      opts += optlen;
 802cb84:	e0bffdc3 	ldbu	r2,-9(fp)
 802cb88:	e0fffe17 	ldw	r3,-8(fp)
 802cb8c:	1885883a 	add	r2,r3,r2
 802cb90:	e0bffe15 	stw	r2,-8(fp)
   }

   return (srv_ipaddr);
 802cb94:	e0bfff17 	ldw	r2,-4(fp)
} 
 802cb98:	e037883a 	mov	sp,fp
 802cb9c:	dfc00117 	ldw	ra,4(sp)
 802cba0:	df000017 	ldw	fp,0(sp)
 802cba4:	dec00204 	addi	sp,sp,8
 802cba8:	f800283a 	ret

0802cbac <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
 802cbac:	defffc04 	addi	sp,sp,-16
 802cbb0:	dfc00315 	stw	ra,12(sp)
 802cbb4:	df000215 	stw	fp,8(sp)
 802cbb8:	df000204 	addi	fp,sp,8
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
 802cbbc:	00bfff44 	movi	r2,-3
 802cbc0:	d8800015 	stw	r2,0(sp)
 802cbc4:	01c200f4 	movhi	r7,2051
 802cbc8:	39f32404 	addi	r7,r7,-13168
 802cbcc:	01801104 	movi	r6,68
 802cbd0:	014010c4 	movi	r5,67
 802cbd4:	0009883a 	mov	r4,zero
 802cbd8:	802fd3c0 	call	802fd3c <udp_open>
 802cbdc:	d0a08a15 	stw	r2,-32216(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
 802cbe0:	d0a08a17 	ldw	r2,-32216(gp)
 802cbe4:	1000021e 	bne	r2,zero,802cbf0 <dhc_init+0x44>
      return ENP_RESOURCE;
 802cbe8:	00bffa84 	movi	r2,-22
 802cbec:	00001306 	br	802cc3c <dhc_init+0x90>

   for (i = 0; i < MAXNETS; i++)
 802cbf0:	e03fff15 	stw	zero,-4(fp)
 802cbf4:	00000d06 	br	802cc2c <dhc_init+0x80>
   {
      dhc_states[i].state = DHCS_UNUSED;
 802cbf8:	e0bfff17 	ldw	r2,-4(fp)
 802cbfc:	10c00f24 	muli	r3,r2,60
 802cc00:	008201b4 	movhi	r2,2054
 802cc04:	1885883a 	add	r2,r3,r2
 802cc08:	103df415 	stw	zero,-2096(r2)
      dhc_states[i].tries = 0;
 802cc0c:	e0bfff17 	ldw	r2,-4(fp)
 802cc10:	10c00f24 	muli	r3,r2,60
 802cc14:	008201b4 	movhi	r2,2054
 802cc18:	1885883a 	add	r2,r3,r2
 802cc1c:	103df515 	stw	zero,-2092(r2)
   for (i = 0; i < MAXNETS; i++)
 802cc20:	e0bfff17 	ldw	r2,-4(fp)
 802cc24:	10800044 	addi	r2,r2,1
 802cc28:	e0bfff15 	stw	r2,-4(fp)
 802cc2c:	e0bfff17 	ldw	r2,-4(fp)
 802cc30:	10800110 	cmplti	r2,r2,4
 802cc34:	103ff01e 	bne	r2,zero,802cbf8 <dhc_init+0x4c>
   }

   return 0;
 802cc38:	0005883a 	mov	r2,zero
}
 802cc3c:	e037883a 	mov	sp,fp
 802cc40:	dfc00117 	ldw	ra,4(sp)
 802cc44:	df000017 	ldw	fp,0(sp)
 802cc48:	dec00204 	addi	sp,sp,8
 802cc4c:	f800283a 	ret

0802cc50 <dhc_set_callback>:
 * RETURNS: 
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
 802cc50:	defffd04 	addi	sp,sp,-12
 802cc54:	df000215 	stw	fp,8(sp)
 802cc58:	df000204 	addi	fp,sp,8
 802cc5c:	e13fff15 	stw	r4,-4(fp)
 802cc60:	e17ffe15 	stw	r5,-8(fp)
   dhc_states[iface].callback = routine;
 802cc64:	e0bfff17 	ldw	r2,-4(fp)
 802cc68:	11000f24 	muli	r4,r2,60
 802cc6c:	e0fffe17 	ldw	r3,-8(fp)
 802cc70:	008201b4 	movhi	r2,2054
 802cc74:	2085883a 	add	r2,r4,r2
 802cc78:	10fe0215 	stw	r3,-2040(r2)
}
 802cc7c:	0001883a 	nop
 802cc80:	e037883a 	mov	sp,fp
 802cc84:	df000017 	ldw	fp,0(sp)
 802cc88:	dec00104 	addi	sp,sp,4
 802cc8c:	f800283a 	ret

0802cc90 <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
 802cc90:	defff504 	addi	sp,sp,-44
 802cc94:	dfc00a15 	stw	ra,40(sp)
 802cc98:	df000915 	stw	fp,36(sp)
 802cc9c:	dc000815 	stw	r16,32(sp)
 802cca0:	df000904 	addi	fp,sp,36
 802cca4:	e13ff815 	stw	r4,-32(fp)
 802cca8:	e17ff715 	stw	r5,-36(fp)
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
 802ccac:	e0bff817 	ldw	r2,-32(fp)
 802ccb0:	10800417 	ldw	r2,16(r2)
 802ccb4:	e0bffd15 	stw	r2,-12(fp)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
 802ccb8:	e03ffe15 	stw	zero,-8(fp)
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
 802ccbc:	e0bff717 	ldw	r2,-36(fp)
 802ccc0:	10bfff60 	cmpeqi	r2,r2,-3
 802ccc4:	1000031e 	bne	r2,zero,802ccd4 <dhc_upcall+0x44>
   {
      dtrap();
 802ccc8:	80301a80 	call	80301a8 <dtrap>
      return ENP_LOGIC;    /* internal logic error */
 802cccc:	00bffd44 	movi	r2,-11
 802ccd0:	0001a306 	br	802d360 <dhc_upcall+0x6d0>
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 802ccd4:	e0bff817 	ldw	r2,-32(fp)
 802ccd8:	10800617 	ldw	r2,24(r2)
 802ccdc:	1009883a 	mov	r4,r2
 802cce0:	8029ec40 	call	8029ec4 <if_netnumber>
 802cce4:	e0bffc15 	stw	r2,-16(fp)
   if (dhc_states[iface].state == DHCS_UNUSED)
 802cce8:	e0bffc17 	ldw	r2,-16(fp)
 802ccec:	10c00f24 	muli	r3,r2,60
 802ccf0:	008201b4 	movhi	r2,2054
 802ccf4:	1885883a 	add	r2,r3,r2
 802ccf8:	10bdf417 	ldw	r2,-2096(r2)
 802ccfc:	1000021e 	bne	r2,zero,802cd08 <dhc_upcall+0x78>
      return ENP_NOT_MINE;
 802cd00:	00800084 	movi	r2,2
 802cd04:	00019606 	br	802d360 <dhc_upcall+0x6d0>

   bp = (struct bootp *)pkt->nb_prot;
 802cd08:	e0bff817 	ldw	r2,-32(fp)
 802cd0c:	10800317 	ldw	r2,12(r2)
 802cd10:	e0bffb15 	stw	r2,-20(fp)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 802cd14:	e0bffd17 	ldw	r2,-12(fp)
 802cd18:	10803b30 	cmpltui	r2,r2,236
 802cd1c:	10000b1e 	bne	r2,zero,802cd4c <dhc_upcall+0xbc>
       (bp->op != BOOTREPLY) ||
 802cd20:	e0bffb17 	ldw	r2,-20(fp)
 802cd24:	10800003 	ldbu	r2,0(r2)
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 802cd28:	10803fcc 	andi	r2,r2,255
 802cd2c:	10800098 	cmpnei	r2,r2,2
 802cd30:	1000061e 	bne	r2,zero,802cd4c <dhc_upcall+0xbc>
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
 802cd34:	e0bffb17 	ldw	r2,-20(fp)
 802cd38:	10803b04 	addi	r2,r2,236
 802cd3c:	10c00017 	ldw	r3,0(r2)
       (bp->op != BOOTREPLY) ||
 802cd40:	0098d534 	movhi	r2,25428
 802cd44:	10a098c4 	addi	r2,r2,-32157
 802cd48:	18800626 	beq	r3,r2,802cd64 <dhc_upcall+0xd4>
   {
      dtrap();
 802cd4c:	80301a80 	call	80301a8 <dtrap>
      dsc_errors++;
 802cd50:	d0a08b17 	ldw	r2,-32212(gp)
 802cd54:	10800044 	addi	r2,r2,1
 802cd58:	d0a08b15 	stw	r2,-32212(gp)
      return ENP_NOT_MINE;
 802cd5c:	00800084 	movi	r2,2
 802cd60:	00017f06 	br	802d360 <dhc_upcall+0x6d0>
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
 802cd64:	e0bffb17 	ldw	r2,-20(fp)
 802cd68:	10c00704 	addi	r3,r2,28
 802cd6c:	e0bff817 	ldw	r2,-32(fp)
 802cd70:	10800617 	ldw	r2,24(r2)
 802cd74:	11001717 	ldw	r4,92(r2)
 802cd78:	e0bff817 	ldw	r2,-32(fp)
 802cd7c:	10800617 	ldw	r2,24(r2)
 802cd80:	10801117 	ldw	r2,68(r2)
 802cd84:	100d883a 	mov	r6,r2
 802cd88:	200b883a 	mov	r5,r4
 802cd8c:	1809883a 	mov	r4,r3
 802cd90:	80037540 	call	8003754 <memcmp>
 802cd94:	10000226 	beq	r2,zero,802cda0 <dhc_upcall+0x110>
      return ENP_NOT_MINE;    /* not an error, just ignore it */
 802cd98:	00800084 	movi	r2,2
 802cd9c:	00017006 	br	802d360 <dhc_upcall+0x6d0>

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
 802cda0:	e0bffb17 	ldw	r2,-20(fp)
 802cda4:	10803c04 	addi	r2,r2,240
 802cda8:	100b883a 	mov	r5,r2
 802cdac:	01000d44 	movi	r4,53
 802cdb0:	802f2e40 	call	802f2e4 <find_opt>
 802cdb4:	e0bffa15 	stw	r2,-24(fp)
   if (opts && *opts == DHOP_TYPE)
 802cdb8:	e0bffa17 	ldw	r2,-24(fp)
 802cdbc:	10001026 	beq	r2,zero,802ce00 <dhc_upcall+0x170>
 802cdc0:	e0bffa17 	ldw	r2,-24(fp)
 802cdc4:	10800003 	ldbu	r2,0(r2)
 802cdc8:	10803fcc 	andi	r2,r2,255
 802cdcc:	10800d58 	cmpnei	r2,r2,53
 802cdd0:	10000b1e 	bne	r2,zero,802ce00 <dhc_upcall+0x170>
   {
      dhcptype = *(opts+2);
 802cdd4:	e0bffa17 	ldw	r2,-24(fp)
 802cdd8:	10800084 	addi	r2,r2,2
 802cddc:	10800003 	ldbu	r2,0(r2)
 802cde0:	10803fcc 	andi	r2,r2,255
 802cde4:	e0bffe15 	stw	r2,-8(fp)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 802cde8:	e0bffb17 	ldw	r2,-20(fp)
 802cdec:	10800003 	ldbu	r2,0(r2)
 802cdf0:	10800114 	ori	r2,r2,4
 802cdf4:	1007883a 	mov	r3,r2
 802cdf8:	e0bffb17 	ldw	r2,-20(fp)
 802cdfc:	10c00005 	stb	r3,0(r2)
   }

   if (isdhcp(bp))
 802ce00:	e0bffb17 	ldw	r2,-20(fp)
 802ce04:	10800003 	ldbu	r2,0(r2)
 802ce08:	10803fcc 	andi	r2,r2,255
 802ce0c:	1080010c 	andi	r2,r2,4
 802ce10:	10013626 	beq	r2,zero,802d2ec <dhc_upcall+0x65c>
 802ce14:	e0bffe17 	ldw	r2,-8(fp)
 802ce18:	10c00228 	cmpgeui	r3,r2,8
 802ce1c:	18c03fcc 	andi	r3,r3,255
 802ce20:	18000b1e 	bne	r3,zero,802ce50 <dhc_upcall+0x1c0>
 802ce24:	00c00044 	movi	r3,1
 802ce28:	1884983a 	sll	r2,r3,r2
 802ce2c:	1080268c 	andi	r2,r2,154
 802ce30:	1004c03a 	cmpne	r2,r2,zero
 802ce34:	10803fcc 	andi	r2,r2,255
 802ce38:	10000526 	beq	r2,zero,802ce50 <dhc_upcall+0x1c0>
      {
      case DHCP_DISCOVER:
      case DHCP_REQUEST:
      case DHCP_DECLINE:
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
 802ce3c:	d0a08b17 	ldw	r2,-32212(gp)
 802ce40:	10800044 	addi	r2,r2,1
 802ce44:	d0a08b15 	stw	r2,-32212(gp)
         return ENP_NOT_MINE;
 802ce48:	00800084 	movi	r2,2
 802ce4c:	00014406 	br	802d360 <dhc_upcall+0x6d0>
      }

      switch (dhc_states[iface].state)
 802ce50:	e0bffc17 	ldw	r2,-16(fp)
 802ce54:	10c00f24 	muli	r3,r2,60
 802ce58:	008201b4 	movhi	r2,2054
 802ce5c:	1885883a 	add	r2,r3,r2
 802ce60:	10bdf417 	ldw	r2,-2096(r2)
 802ce64:	10c00268 	cmpgeui	r3,r2,9
 802ce68:	1801171e 	bne	r3,zero,802d2c8 <dhc_upcall+0x638>
 802ce6c:	100690ba 	slli	r3,r2,2
 802ce70:	008200f4 	movhi	r2,2051
 802ce74:	1885883a 	add	r2,r3,r2
 802ce78:	10b3a017 	ldw	r2,-12672(r2)
 802ce7c:	1000683a 	jmp	r2
 802ce80:	0802d2c8 	cmpgei	zero,at,2891
 802ce84:	0802cea4 	muli	zero,at,2874
 802ce88:	0802cea4 	muli	zero,at,2874
 802ce8c:	0802d098 	cmpnei	zero,at,2882
 802ce90:	0802ceb8 	rdprs	zero,at,2874
 802ce94:	0802d004 	addi	zero,at,2880
 802ce98:	0802cea4 	muli	zero,at,2874
 802ce9c:	0802d004 	addi	zero,at,2880
 802cea0:	0802d004 	addi	zero,at,2880
      case DHCS_INITREBOOT:
         /* How can we receive any response when we never sent one */
      case DHCS_BOUND:
         /* If there are multiple DHCP Servers, and one of them is slow
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
 802cea4:	d0a08b17 	ldw	r2,-32212(gp)
 802cea8:	10800044 	addi	r2,r2,1
 802ceac:	d0a08b15 	stw	r2,-32212(gp)
         return ENP_NOT_MINE;
 802ceb0:	00800084 	movi	r2,2
 802ceb4:	00012a06 	br	802d360 <dhc_upcall+0x6d0>
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
 802ceb8:	e0bffe17 	ldw	r2,-8(fp)
 802cebc:	10800098 	cmpnei	r2,r2,2
 802cec0:	1000451e 	bne	r2,zero,802cfd8 <dhc_upcall+0x348>
         {
            dsc_offers++;
 802cec4:	d0a08d17 	ldw	r2,-32204(gp)
 802cec8:	10800044 	addi	r2,r2,1
 802cecc:	d0a08d15 	stw	r2,-32204(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
 802ced0:	e0bffb17 	ldw	r2,-20(fp)
 802ced4:	10803c04 	addi	r2,r2,240
 802ced8:	1009883a 	mov	r4,r2
 802cedc:	802cb240 	call	802cb24 <dhc_get_srv_ipaddr>
 802cee0:	1009883a 	mov	r4,r2
 802cee4:	e0bffc17 	ldw	r2,-16(fp)
 802cee8:	10c00f24 	muli	r3,r2,60
 802ceec:	008201b4 	movhi	r2,2054
 802cef0:	1885883a 	add	r2,r3,r2
 802cef4:	113e0115 	stw	r4,-2044(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 802cef8:	e0bffc17 	ldw	r2,-16(fp)
 802cefc:	10c00f24 	muli	r3,r2,60
 802cf00:	008201b4 	movhi	r2,2054
 802cf04:	1885883a 	add	r2,r3,r2
 802cf08:	10be0117 	ldw	r2,-2044(r2)
 802cf0c:	10000b1e 	bne	r2,zero,802cf3c <dhc_upcall+0x2ac>
            {
               dtrap(); /* didn't receive server-identifier option */
 802cf10:	80301a80 	call	80301a8 <dtrap>
               dsc_errors++;
 802cf14:	d0a08b17 	ldw	r2,-32212(gp)
 802cf18:	10800044 	addi	r2,r2,1
 802cf1c:	d0a08b15 	stw	r2,-32212(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 802cf20:	e0bff817 	ldw	r2,-32(fp)
 802cf24:	10c00717 	ldw	r3,28(r2)
 802cf28:	e0bffc17 	ldw	r2,-16(fp)
 802cf2c:	11000f24 	muli	r4,r2,60
 802cf30:	008201b4 	movhi	r2,2054
 802cf34:	2085883a 	add	r2,r4,r2
 802cf38:	10fe0115 	stw	r3,-2044(r2)
            }

            if (bp->hops)
 802cf3c:	e0bffb17 	ldw	r2,-20(fp)
 802cf40:	108000c3 	ldbu	r2,3(r2)
 802cf44:	10803fcc 	andi	r2,r2,255
 802cf48:	10000826 	beq	r2,zero,802cf6c <dhc_upcall+0x2dc>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 802cf4c:	e0bff817 	ldw	r2,-32(fp)
 802cf50:	10c00717 	ldw	r3,28(r2)
 802cf54:	e0bffc17 	ldw	r2,-16(fp)
 802cf58:	11000f24 	muli	r4,r2,60
 802cf5c:	008201b4 	movhi	r2,2054
 802cf60:	2085883a 	add	r2,r4,r2
 802cf64:	10fe0015 	stw	r3,-2048(r2)
 802cf68:	00000506 	br	802cf80 <dhc_upcall+0x2f0>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 802cf6c:	e0bffc17 	ldw	r2,-16(fp)
 802cf70:	10c00f24 	muli	r3,r2,60
 802cf74:	008201b4 	movhi	r2,2054
 802cf78:	1885883a 	add	r2,r3,r2
 802cf7c:	103e0015 	stw	zero,-2048(r2)

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
 802cf80:	e0bff817 	ldw	r2,-32(fp)
 802cf84:	10800417 	ldw	r2,16(r2)
 802cf88:	100d883a 	mov	r6,r2
 802cf8c:	e17ffb17 	ldw	r5,-20(fp)
 802cf90:	e13ffc17 	ldw	r4,-16(fp)
 802cf94:	802d97c0 	call	802d97c <dhc_rx_offer>
 802cf98:	e0bff915 	stw	r2,-28(fp)
            if (e)
 802cf9c:	e0bff917 	ldw	r2,-28(fp)
 802cfa0:	10000926 	beq	r2,zero,802cfc8 <dhc_upcall+0x338>
            {
               dsc_errors++;
 802cfa4:	d0a08b17 	ldw	r2,-32212(gp)
 802cfa8:	10800044 	addi	r2,r2,1
 802cfac:	d0a08b15 	stw	r2,-32212(gp)
               dhc_set_state(iface,DHCS_INIT);
 802cfb0:	01400044 	movi	r5,1
 802cfb4:	e13ffc17 	ldw	r4,-16(fp)
 802cfb8:	802f2500 	call	802f250 <dhc_set_state>
               dtrap();
 802cfbc:	80301a80 	call	80301a8 <dtrap>
               return ENP_NOT_MINE;
 802cfc0:	00800084 	movi	r2,2
 802cfc4:	0000e606 	br	802d360 <dhc_upcall+0x6d0>
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
 802cfc8:	01400144 	movi	r5,5
 802cfcc:	e13ffc17 	ldw	r4,-16(fp)
 802cfd0:	802f2500 	call	802f250 <dhc_set_state>
            dsc_errors++;
            if ( dhcptype == DHCP_NAK ) 
               dsc_naks++;
            return ENP_NOT_MINE;
         }
         break;
 802cfd4:	0000df06 	br	802d354 <dhc_upcall+0x6c4>
            dsc_errors++;
 802cfd8:	d0a08b17 	ldw	r2,-32212(gp)
 802cfdc:	10800044 	addi	r2,r2,1
 802cfe0:	d0a08b15 	stw	r2,-32212(gp)
            if ( dhcptype == DHCP_NAK ) 
 802cfe4:	e0bffe17 	ldw	r2,-8(fp)
 802cfe8:	10800198 	cmpnei	r2,r2,6
 802cfec:	1000031e 	bne	r2,zero,802cffc <dhc_upcall+0x36c>
               dsc_naks++;
 802cff0:	d0a09317 	ldw	r2,-32180(gp)
 802cff4:	10800044 	addi	r2,r2,1
 802cff8:	d0a09315 	stw	r2,-32180(gp)
            return ENP_NOT_MINE;
 802cffc:	00800084 	movi	r2,2
 802d000:	0000d706 	br	802d360 <dhc_upcall+0x6d0>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
 802d004:	e0bffc17 	ldw	r2,-16(fp)
 802d008:	10c00f24 	muli	r3,r2,60
 802d00c:	008201b4 	movhi	r2,2054
 802d010:	1885883a 	add	r2,r3,r2
 802d014:	143e0117 	ldw	r16,-2044(r2)
             dhc_get_srv_ipaddr(&bp->options[4]) )
 802d018:	e0bffb17 	ldw	r2,-20(fp)
 802d01c:	10803c04 	addi	r2,r2,240
 802d020:	1009883a 	mov	r4,r2
 802d024:	802cb240 	call	802cb24 <dhc_get_srv_ipaddr>
         if ( dhc_states[iface].srv_ipaddr != 
 802d028:	80800526 	beq	r16,r2,802d040 <dhc_upcall+0x3b0>
         {
            dsc_errors++;
 802d02c:	d0a08b17 	ldw	r2,-32212(gp)
 802d030:	10800044 	addi	r2,r2,1
 802d034:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 802d038:	00800084 	movi	r2,2
 802d03c:	0000c806 	br	802d360 <dhc_upcall+0x6d0>
         }
         if (dhc_states[iface].rly_ipaddr &&
 802d040:	e0bffc17 	ldw	r2,-16(fp)
 802d044:	10c00f24 	muli	r3,r2,60
 802d048:	008201b4 	movhi	r2,2054
 802d04c:	1885883a 	add	r2,r3,r2
 802d050:	10be0017 	ldw	r2,-2048(r2)
 802d054:	10001026 	beq	r2,zero,802d098 <dhc_upcall+0x408>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
 802d058:	e0bffc17 	ldw	r2,-16(fp)
 802d05c:	10c00f24 	muli	r3,r2,60
 802d060:	008201b4 	movhi	r2,2054
 802d064:	1885883a 	add	r2,r3,r2
 802d068:	10fe0017 	ldw	r3,-2048(r2)
 802d06c:	e0bff817 	ldw	r2,-32(fp)
 802d070:	10800717 	ldw	r2,28(r2)
         if (dhc_states[iface].rly_ipaddr &&
 802d074:	18800826 	beq	r3,r2,802d098 <dhc_upcall+0x408>
         {
            dsc_rlyerrs++;
 802d078:	d0a09617 	ldw	r2,-32168(gp)
 802d07c:	10800044 	addi	r2,r2,1
 802d080:	d0a09615 	stw	r2,-32168(gp)
            dsc_errors++;
 802d084:	d0a08b17 	ldw	r2,-32212(gp)
 802d088:	10800044 	addi	r2,r2,1
 802d08c:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 802d090:	00800084 	movi	r2,2
 802d094:	0000b206 	br	802d360 <dhc_upcall+0x6d0>
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
 802d098:	e0bffe17 	ldw	r2,-8(fp)
 802d09c:	10800158 	cmpnei	r2,r2,5
 802d0a0:	10006b1e 	bne	r2,zero,802d250 <dhc_upcall+0x5c0>
         {
            dsc_acks++;
 802d0a4:	d0a08f17 	ldw	r2,-32196(gp)
 802d0a8:	10800044 	addi	r2,r2,1
 802d0ac:	d0a08f15 	stw	r2,-32196(gp)
            dhc_extract_opts(iface,&bp->options[4]);
 802d0b0:	e0bffb17 	ldw	r2,-20(fp)
 802d0b4:	10803c04 	addi	r2,r2,240
 802d0b8:	100b883a 	mov	r5,r2
 802d0bc:	e13ffc17 	ldw	r4,-16(fp)
 802d0c0:	802e8280 	call	802e828 <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
 802d0c4:	e0bffc17 	ldw	r2,-16(fp)
 802d0c8:	10c00f24 	muli	r3,r2,60
 802d0cc:	008201b4 	movhi	r2,2054
 802d0d0:	1885883a 	add	r2,r3,r2
 802d0d4:	10bdf917 	ldw	r2,-2076(r2)
 802d0d8:	10bfffd8 	cmpnei	r2,r2,-1
 802d0dc:	10000d1e 	bne	r2,zero,802d114 <dhc_upcall+0x484>
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
 802d0e0:	e0bffc17 	ldw	r2,-16(fp)
 802d0e4:	11000f24 	muli	r4,r2,60
 802d0e8:	00ffffc4 	movi	r3,-1
 802d0ec:	008201b4 	movhi	r2,2054
 802d0f0:	2085883a 	add	r2,r4,r2
 802d0f4:	10fdfa15 	stw	r3,-2072(r2)
               dhc_states[iface].t2 = DHC_INFINITY ;
 802d0f8:	e0bffc17 	ldw	r2,-16(fp)
 802d0fc:	11000f24 	muli	r4,r2,60
 802d100:	00ffffc4 	movi	r3,-1
 802d104:	008201b4 	movhi	r2,2054
 802d108:	2085883a 	add	r2,r4,r2
 802d10c:	10fdfb15 	stw	r3,-2068(r2)
 802d110:	00001706 	br	802d170 <dhc_upcall+0x4e0>
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
 802d114:	e0bffc17 	ldw	r2,-16(fp)
 802d118:	10c00f24 	muli	r3,r2,60
 802d11c:	008201b4 	movhi	r2,2054
 802d120:	1885883a 	add	r2,r3,r2
 802d124:	10bdf917 	ldw	r2,-2076(r2)
 802d128:	1006d07a 	srli	r3,r2,1
 802d12c:	e0bffc17 	ldw	r2,-16(fp)
 802d130:	11000f24 	muli	r4,r2,60
 802d134:	008201b4 	movhi	r2,2054
 802d138:	2085883a 	add	r2,r4,r2
 802d13c:	10fdfa15 	stw	r3,-2072(r2)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 802d140:	e0bffc17 	ldw	r2,-16(fp)
 802d144:	10c00f24 	muli	r3,r2,60
 802d148:	008201b4 	movhi	r2,2054
 802d14c:	1885883a 	add	r2,r3,r2
 802d150:	10bdf917 	ldw	r2,-2076(r2)
 802d154:	1004d0fa 	srli	r2,r2,3
 802d158:	10c001e4 	muli	r3,r2,7
 802d15c:	e0bffc17 	ldw	r2,-16(fp)
 802d160:	11000f24 	muli	r4,r2,60
 802d164:	008201b4 	movhi	r2,2054
 802d168:	2085883a 	add	r2,r4,r2
 802d16c:	10fdfb15 	stw	r3,-2068(r2)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
 802d170:	d0e0a317 	ldw	r3,-32116(gp)
 802d174:	e0bffc17 	ldw	r2,-16(fp)
 802d178:	11000f24 	muli	r4,r2,60
 802d17c:	008201b4 	movhi	r2,2054
 802d180:	2085883a 	add	r2,r4,r2
 802d184:	10fdfc15 	stw	r3,-2064(r2)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
 802d188:	e0bffb17 	ldw	r2,-20(fp)
 802d18c:	10803c04 	addi	r2,r2,240
 802d190:	1009883a 	mov	r4,r2
 802d194:	802cb240 	call	802cb24 <dhc_get_srv_ipaddr>
 802d198:	1009883a 	mov	r4,r2
 802d19c:	e0bffc17 	ldw	r2,-16(fp)
 802d1a0:	10c00f24 	muli	r3,r2,60
 802d1a4:	008201b4 	movhi	r2,2054
 802d1a8:	1885883a 	add	r2,r3,r2
 802d1ac:	113e0115 	stw	r4,-2044(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 802d1b0:	e0bffc17 	ldw	r2,-16(fp)
 802d1b4:	10c00f24 	muli	r3,r2,60
 802d1b8:	008201b4 	movhi	r2,2054
 802d1bc:	1885883a 	add	r2,r3,r2
 802d1c0:	10be0117 	ldw	r2,-2044(r2)
 802d1c4:	10000b1e 	bne	r2,zero,802d1f4 <dhc_upcall+0x564>
            {
               dtrap(); /* didn't receive server-identifier option */
 802d1c8:	80301a80 	call	80301a8 <dtrap>
               dsc_errors++;
 802d1cc:	d0a08b17 	ldw	r2,-32212(gp)
 802d1d0:	10800044 	addi	r2,r2,1
 802d1d4:	d0a08b15 	stw	r2,-32212(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 802d1d8:	e0bff817 	ldw	r2,-32(fp)
 802d1dc:	10c00717 	ldw	r3,28(r2)
 802d1e0:	e0bffc17 	ldw	r2,-16(fp)
 802d1e4:	11000f24 	muli	r4,r2,60
 802d1e8:	008201b4 	movhi	r2,2054
 802d1ec:	2085883a 	add	r2,r4,r2
 802d1f0:	10fe0115 	stw	r3,-2044(r2)
            }
            if (bp->hops)
 802d1f4:	e0bffb17 	ldw	r2,-20(fp)
 802d1f8:	108000c3 	ldbu	r2,3(r2)
 802d1fc:	10803fcc 	andi	r2,r2,255
 802d200:	10000826 	beq	r2,zero,802d224 <dhc_upcall+0x594>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 802d204:	e0bff817 	ldw	r2,-32(fp)
 802d208:	10c00717 	ldw	r3,28(r2)
 802d20c:	e0bffc17 	ldw	r2,-16(fp)
 802d210:	11000f24 	muli	r4,r2,60
 802d214:	008201b4 	movhi	r2,2054
 802d218:	2085883a 	add	r2,r4,r2
 802d21c:	10fe0015 	stw	r3,-2048(r2)
 802d220:	00000506 	br	802d238 <dhc_upcall+0x5a8>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 802d224:	e0bffc17 	ldw	r2,-16(fp)
 802d228:	10c00f24 	muli	r3,r2,60
 802d22c:	008201b4 	movhi	r2,2054
 802d230:	1885883a 	add	r2,r3,r2
 802d234:	103e0015 	stw	zero,-2048(r2)

            dhc_setip(iface);
 802d238:	e13ffc17 	ldw	r4,-16(fp)
 802d23c:	802e3dc0 	call	802e3dc <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
 802d240:	01400184 	movi	r5,6
 802d244:	e13ffc17 	ldw	r4,-16(fp)
 802d248:	802f2500 	call	802f250 <dhc_set_state>
             * error and discard it with no change to our state.
             */
            dsc_errors++;
            return ENP_NOT_MINE;
         }
         break;
 802d24c:	00004106 	br	802d354 <dhc_upcall+0x6c4>
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
 802d250:	e0bffe17 	ldw	r2,-8(fp)
 802d254:	10800198 	cmpnei	r2,r2,6
 802d258:	1000071e 	bne	r2,zero,802d278 <dhc_upcall+0x5e8>
            dhc_set_state(iface,DHCS_INIT);
 802d25c:	01400044 	movi	r5,1
 802d260:	e13ffc17 	ldw	r4,-16(fp)
 802d264:	802f2500 	call	802f250 <dhc_set_state>
            dsc_naks++;
 802d268:	d0a09317 	ldw	r2,-32180(gp)
 802d26c:	10800044 	addi	r2,r2,1
 802d270:	d0a09315 	stw	r2,-32180(gp)
         break;
 802d274:	00003706 	br	802d354 <dhc_upcall+0x6c4>
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
 802d278:	e0bffc17 	ldw	r2,-16(fp)
 802d27c:	10c00f24 	muli	r3,r2,60
 802d280:	008201b4 	movhi	r2,2054
 802d284:	1885883a 	add	r2,r3,r2
 802d288:	10bdf417 	ldw	r2,-2096(r2)
 802d28c:	10800158 	cmpnei	r2,r2,5
 802d290:	1000081e 	bne	r2,zero,802d2b4 <dhc_upcall+0x624>
 802d294:	e0bffe17 	ldw	r2,-8(fp)
 802d298:	10800098 	cmpnei	r2,r2,2
 802d29c:	1000051e 	bne	r2,zero,802d2b4 <dhc_upcall+0x624>
               dsc_offers++;
 802d2a0:	d0a08d17 	ldw	r2,-32204(gp)
 802d2a4:	10800044 	addi	r2,r2,1
 802d2a8:	d0a08d15 	stw	r2,-32204(gp)
               return ENP_NOT_MINE;
 802d2ac:	00800084 	movi	r2,2
 802d2b0:	00002b06 	br	802d360 <dhc_upcall+0x6d0>
            dsc_errors++;
 802d2b4:	d0a08b17 	ldw	r2,-32212(gp)
 802d2b8:	10800044 	addi	r2,r2,1
 802d2bc:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 802d2c0:	00800084 	movi	r2,2
 802d2c4:	00002606 	br	802d360 <dhc_upcall+0x6d0>
      default:    /* bad state */
         dtrap();
 802d2c8:	80301a80 	call	80301a8 <dtrap>
         dhc_set_state(iface,DHCS_INIT);
 802d2cc:	01400044 	movi	r5,1
 802d2d0:	e13ffc17 	ldw	r4,-16(fp)
 802d2d4:	802f2500 	call	802f250 <dhc_set_state>
         dsc_errors++;
 802d2d8:	d0a08b17 	ldw	r2,-32212(gp)
 802d2dc:	10800044 	addi	r2,r2,1
 802d2e0:	d0a08b15 	stw	r2,-32212(gp)
         return -1;
 802d2e4:	00bfffc4 	movi	r2,-1
 802d2e8:	00001d06 	br	802d360 <dhc_upcall+0x6d0>
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
 802d2ec:	d0a09017 	ldw	r2,-32192(gp)
 802d2f0:	10800044 	addi	r2,r2,1
 802d2f4:	d0a09015 	stw	r2,-32192(gp)
      dhc_extract_opts(iface,&bp->options[4]);
 802d2f8:	e0bffb17 	ldw	r2,-20(fp)
 802d2fc:	10803c04 	addi	r2,r2,240
 802d300:	100b883a 	mov	r5,r2
 802d304:	e13ffc17 	ldw	r4,-16(fp)
 802d308:	802e8280 	call	802e828 <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
 802d30c:	e0bffb17 	ldw	r2,-20(fp)
 802d310:	10c00417 	ldw	r3,16(r2)
 802d314:	e0bffc17 	ldw	r2,-16(fp)
 802d318:	11000f24 	muli	r4,r2,60
 802d31c:	008201b4 	movhi	r2,2054
 802d320:	2085883a 	add	r2,r4,r2
 802d324:	10fdfd15 	stw	r3,-2060(r2)
      dhc_setip(iface);
 802d328:	e13ffc17 	ldw	r4,-16(fp)
 802d32c:	802e3dc0 	call	802e3dc <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
 802d330:	01400184 	movi	r5,6
 802d334:	e13ffc17 	ldw	r4,-16(fp)
 802d338:	802f2500 	call	802f250 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
 802d33c:	e0bffc17 	ldw	r2,-16(fp)
 802d340:	11000f24 	muli	r4,r2,60
 802d344:	00ffffc4 	movi	r3,-1
 802d348:	008201b4 	movhi	r2,2054
 802d34c:	2085883a 	add	r2,r4,r2
 802d350:	10fdfa15 	stw	r3,-2072(r2)
   }

   udp_free(pkt);
 802d354:	e13ff817 	ldw	r4,-32(fp)
 802d358:	804804c0 	call	804804c <udp_free>
   return 0;
 802d35c:	0005883a 	mov	r2,zero
}
 802d360:	e6ffff04 	addi	sp,fp,-4
 802d364:	dfc00217 	ldw	ra,8(sp)
 802d368:	df000117 	ldw	fp,4(sp)
 802d36c:	dc000017 	ldw	r16,0(sp)
 802d370:	dec00304 	addi	sp,sp,12
 802d374:	f800283a 	ret

0802d378 <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 802d378:	defffb04 	addi	sp,sp,-20
 802d37c:	dfc00415 	stw	ra,16(sp)
 802d380:	df000315 	stw	fp,12(sp)
 802d384:	df000304 	addi	fp,sp,12
 802d388:	e13ffe15 	stw	r4,-8(fp)
 802d38c:	e17ffd15 	stw	r5,-12(fp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 802d390:	01804b04 	movi	r6,300
 802d394:	000b883a 	mov	r5,zero
 802d398:	e13ffd17 	ldw	r4,-12(fp)
 802d39c:	80038cc0 	call	80038cc <memset>
   outbp->op = BOOTREQUEST;
 802d3a0:	e0bffd17 	ldw	r2,-12(fp)
 802d3a4:	00c00044 	movi	r3,1
 802d3a8:	10c00005 	stb	r3,0(r2)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 802d3ac:	e0bffe17 	ldw	r2,-8(fp)
 802d3b0:	100690ba 	slli	r3,r2,2
 802d3b4:	008201b4 	movhi	r2,2054
 802d3b8:	1885883a 	add	r2,r3,r2
 802d3bc:	10bdce17 	ldw	r2,-2248(r2)
 802d3c0:	10802717 	ldw	r2,156(r2)
 802d3c4:	10800217 	ldw	r2,8(r2)
 802d3c8:	10c00720 	cmpeqi	r3,r2,28
 802d3cc:	18000b1e 	bne	r3,zero,802d3fc <dhc_buildheader+0x84>
 802d3d0:	10c00768 	cmpgeui	r3,r2,29
 802d3d4:	18000d1e 	bne	r3,zero,802d40c <dhc_buildheader+0x94>
 802d3d8:	10c001a0 	cmpeqi	r3,r2,6
 802d3dc:	1800031e 	bne	r3,zero,802d3ec <dhc_buildheader+0x74>
 802d3e0:	108005e0 	cmpeqi	r2,r2,23
 802d3e4:	1000051e 	bne	r2,zero,802d3fc <dhc_buildheader+0x84>
 802d3e8:	00000806 	br	802d40c <dhc_buildheader+0x94>
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
 802d3ec:	e0bffd17 	ldw	r2,-12(fp)
 802d3f0:	00c00044 	movi	r3,1
 802d3f4:	10c00045 	stb	r3,1(r2)
   break;
 802d3f8:	00000706 	br	802d418 <dhc_buildheader+0xa0>
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
 802d3fc:	e0bffd17 	ldw	r2,-12(fp)
 802d400:	00c00504 	movi	r3,20
 802d404:	10c00045 	stb	r3,1(r2)
   break;
 802d408:	00000306 	br	802d418 <dhc_buildheader+0xa0>
      default:
      dtrap();
 802d40c:	80301a80 	call	80301a8 <dtrap>
      return ENP_LOGIC;             /* this shouldn't happen */
 802d410:	00bffd44 	movi	r2,-11
 802d414:	00004206 	br	802d520 <dhc_buildheader+0x1a8>
   }

   addrlen = min(16, nets[iface]->n_hal);
 802d418:	e0bffe17 	ldw	r2,-8(fp)
 802d41c:	100690ba 	slli	r3,r2,2
 802d420:	008201b4 	movhi	r2,2054
 802d424:	1885883a 	add	r2,r3,r2
 802d428:	10bdce17 	ldw	r2,-2248(r2)
 802d42c:	10801117 	ldw	r2,68(r2)
 802d430:	10c00470 	cmpltui	r3,r2,17
 802d434:	1800011e 	bne	r3,zero,802d43c <dhc_buildheader+0xc4>
 802d438:	00800404 	movi	r2,16
 802d43c:	e0bfff15 	stw	r2,-4(fp)
   outbp->hlen = (u_char)addrlen;
 802d440:	e0bfff17 	ldw	r2,-4(fp)
 802d444:	1007883a 	mov	r3,r2
 802d448:	e0bffd17 	ldw	r2,-12(fp)
 802d44c:	10c00085 	stb	r3,2(r2)
   outbp->hops = 0;
 802d450:	e0bffd17 	ldw	r2,-12(fp)
 802d454:	100000c5 	stb	zero,3(r2)
   if(dhc_states[iface].state == DHCS_RENEWING) 
 802d458:	e0bffe17 	ldw	r2,-8(fp)
 802d45c:	10c00f24 	muli	r3,r2,60
 802d460:	008201b4 	movhi	r2,2054
 802d464:	1885883a 	add	r2,r3,r2
 802d468:	10bdf417 	ldw	r2,-2096(r2)
 802d46c:	108001d8 	cmpnei	r2,r2,7
 802d470:	1000031e 	bne	r2,zero,802d480 <dhc_buildheader+0x108>
      outbp->flags = 0; /* Renewing needs unicast */
 802d474:	e0bffd17 	ldw	r2,-12(fp)
 802d478:	1000028d 	sth	zero,10(r2)
 802d47c:	00000306 	br	802d48c <dhc_buildheader+0x114>
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
 802d480:	e0bffd17 	ldw	r2,-12(fp)
 802d484:	00c02004 	movi	r3,128
 802d488:	10c0028d 	sth	r3,10(r2)
   outbp->xid = dhc_states[iface].xid;
 802d48c:	e0bffe17 	ldw	r2,-8(fp)
 802d490:	10c00f24 	muli	r3,r2,60
 802d494:	008201b4 	movhi	r2,2054
 802d498:	1885883a 	add	r2,r3,r2
 802d49c:	10fdf617 	ldw	r3,-2088(r2)
 802d4a0:	e0bffd17 	ldw	r2,-12(fp)
 802d4a4:	10c00115 	stw	r3,4(r2)
   outbp->secs = dhc_states[iface].secs;
 802d4a8:	e0bffe17 	ldw	r2,-8(fp)
 802d4ac:	10c00f24 	muli	r3,r2,60
 802d4b0:	008201b4 	movhi	r2,2054
 802d4b4:	1885883a 	add	r2,r3,r2
 802d4b8:	10fdf70b 	ldhu	r3,-2084(r2)
 802d4bc:	e0bffd17 	ldw	r2,-12(fp)
 802d4c0:	10c0020d 	sth	r3,8(r2)
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 802d4c4:	e0bffe17 	ldw	r2,-8(fp)
 802d4c8:	100690ba 	slli	r3,r2,2
 802d4cc:	008201b4 	movhi	r2,2054
 802d4d0:	1885883a 	add	r2,r3,r2
 802d4d4:	10bdce17 	ldw	r2,-2248(r2)
 802d4d8:	10801717 	ldw	r2,92(r2)
 802d4dc:	1000031e 	bne	r2,zero,802d4ec <dhc_buildheader+0x174>
   {
      dtrap();
 802d4e0:	80301a80 	call	80301a8 <dtrap>
      return ENP_LOGIC;
 802d4e4:	00bffd44 	movi	r2,-11
 802d4e8:	00000d06 	br	802d520 <dhc_buildheader+0x1a8>
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
 802d4ec:	e0bffd17 	ldw	r2,-12(fp)
 802d4f0:	11000704 	addi	r4,r2,28
 802d4f4:	e0bffe17 	ldw	r2,-8(fp)
 802d4f8:	100690ba 	slli	r3,r2,2
 802d4fc:	008201b4 	movhi	r2,2054
 802d500:	1885883a 	add	r2,r3,r2
 802d504:	10bdce17 	ldw	r2,-2248(r2)
 802d508:	10801717 	ldw	r2,92(r2)
 802d50c:	e0ffff17 	ldw	r3,-4(fp)
 802d510:	180d883a 	mov	r6,r3
 802d514:	100b883a 	mov	r5,r2
 802d518:	80037cc0 	call	80037cc <memcpy>

   /* return success */
   return 0;
 802d51c:	0005883a 	mov	r2,zero
}
 802d520:	e037883a 	mov	sp,fp
 802d524:	dfc00117 	ldw	ra,4(sp)
 802d528:	df000017 	ldw	fp,0(sp)
 802d52c:	dec00204 	addi	sp,sp,8
 802d530:	f800283a 	ret

0802d534 <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 802d534:	defff604 	addi	sp,sp,-40
 802d538:	dfc00915 	stw	ra,36(sp)
 802d53c:	df000815 	stw	fp,32(sp)
 802d540:	df000804 	addi	fp,sp,32
 802d544:	e13ff815 	stw	r4,-32(fp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 802d548:	000b883a 	mov	r5,zero
 802d54c:	01004b04 	movi	r4,300
 802d550:	8047f6c0 	call	8047f6c <udp_alloc>
 802d554:	e0bffd15 	stw	r2,-12(fp)
   if (!pkt) 
 802d558:	e0bffd17 	ldw	r2,-12(fp)
 802d55c:	1000021e 	bne	r2,zero,802d568 <dhc_discover+0x34>
      return ENP_NOMEM;
 802d560:	00bffb04 	movi	r2,-20
 802d564:	00010006 	br	802d968 <dhc_discover+0x434>
   pkt->nb_plen = sizeof(struct bootp);
 802d568:	e0bffd17 	ldw	r2,-12(fp)
 802d56c:	00c04b04 	movi	r3,300
 802d570:	10c00415 	stw	r3,16(r2)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 802d574:	d0a02f17 	ldw	r2,-32580(gp)
 802d578:	10c00044 	addi	r3,r2,1
 802d57c:	d0e02f15 	stw	r3,-32580(gp)
 802d580:	1009883a 	mov	r4,r2
 802d584:	e0bff817 	ldw	r2,-32(fp)
 802d588:	10c00f24 	muli	r3,r2,60
 802d58c:	008201b4 	movhi	r2,2054
 802d590:	1885883a 	add	r2,r3,r2
 802d594:	113df615 	stw	r4,-2088(r2)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 802d598:	804019c0 	call	804019c <sysuptime>
 802d59c:	01401904 	movi	r5,100
 802d5a0:	1009883a 	mov	r4,r2
 802d5a4:	8011fdc0 	call	8011fdc <__udivsi3>
 802d5a8:	1009883a 	mov	r4,r2
 802d5ac:	e0bff817 	ldw	r2,-32(fp)
 802d5b0:	10c00f24 	muli	r3,r2,60
 802d5b4:	008201b4 	movhi	r2,2054
 802d5b8:	1885883a 	add	r2,r3,r2
 802d5bc:	113df70d 	sth	r4,-2084(r2)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
 802d5c0:	e0bffd17 	ldw	r2,-12(fp)
 802d5c4:	10800317 	ldw	r2,12(r2)
 802d5c8:	e0bffc15 	stw	r2,-16(fp)
   e = dhc_buildheader(iface,outbp);
 802d5cc:	e17ffc17 	ldw	r5,-16(fp)
 802d5d0:	e13ff817 	ldw	r4,-32(fp)
 802d5d4:	802d3780 	call	802d378 <dhc_buildheader>
 802d5d8:	e0bffb15 	stw	r2,-20(fp)
   if (e)
 802d5dc:	e0bffb17 	ldw	r2,-20(fp)
 802d5e0:	10000226 	beq	r2,zero,802d5ec <dhc_discover+0xb8>
      return e;
 802d5e4:	e0bffb17 	ldw	r2,-20(fp)
 802d5e8:	0000df06 	br	802d968 <dhc_discover+0x434>

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 802d5ec:	e0bffc17 	ldw	r2,-16(fp)
 802d5f0:	10c03b04 	addi	r3,r2,236
 802d5f4:	0098d534 	movhi	r2,25428
 802d5f8:	10a098c4 	addi	r2,r2,-32157
 802d5fc:	18800015 	stw	r2,0(r3)
   opts = &outbp->options[4];    /* encode options after cookie */
 802d600:	e0bffc17 	ldw	r2,-16(fp)
 802d604:	10803c04 	addi	r2,r2,240
 802d608:	e0bfff15 	stw	r2,-4(fp)
   *opts++ = DHOP_TYPE;
 802d60c:	e0bfff17 	ldw	r2,-4(fp)
 802d610:	10c00044 	addi	r3,r2,1
 802d614:	e0ffff15 	stw	r3,-4(fp)
 802d618:	00c00d44 	movi	r3,53
 802d61c:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
 802d620:	e0bfff17 	ldw	r2,-4(fp)
 802d624:	10c00044 	addi	r3,r2,1
 802d628:	e0ffff15 	stw	r3,-4(fp)
 802d62c:	00c00044 	movi	r3,1
 802d630:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_DISCOVER;
 802d634:	e0bfff17 	ldw	r2,-4(fp)
 802d638:	10c00044 	addi	r3,r2,1
 802d63c:	e0ffff15 	stw	r3,-4(fp)
 802d640:	00c00044 	movi	r3,1
 802d644:	10c00005 	stb	r3,0(r2)
   leasetime = -1L ;    /* ask for infinite lease */
 802d648:	00bfffc4 	movi	r2,-1
 802d64c:	e0bffa15 	stw	r2,-24(fp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 802d650:	e0bfff17 	ldw	r2,-4(fp)
 802d654:	10c00044 	addi	r3,r2,1
 802d658:	e0ffff15 	stw	r3,-4(fp)
 802d65c:	00c00cc4 	movi	r3,51
 802d660:	10c00005 	stb	r3,0(r2)
 802d664:	e0bfff17 	ldw	r2,-4(fp)
 802d668:	10c00044 	addi	r3,r2,1
 802d66c:	e0ffff15 	stw	r3,-4(fp)
 802d670:	00c00104 	movi	r3,4
 802d674:	10c00005 	stb	r3,0(r2)
 802d678:	e0bffa04 	addi	r2,fp,-24
 802d67c:	10c00003 	ldbu	r3,0(r2)
 802d680:	e0bfff17 	ldw	r2,-4(fp)
 802d684:	108000c4 	addi	r2,r2,3
 802d688:	10c00005 	stb	r3,0(r2)
 802d68c:	e0bffa04 	addi	r2,fp,-24
 802d690:	10800044 	addi	r2,r2,1
 802d694:	10c00003 	ldbu	r3,0(r2)
 802d698:	e0bfff17 	ldw	r2,-4(fp)
 802d69c:	10800084 	addi	r2,r2,2
 802d6a0:	10c00005 	stb	r3,0(r2)
 802d6a4:	e0bffa04 	addi	r2,fp,-24
 802d6a8:	10800084 	addi	r2,r2,2
 802d6ac:	10c00003 	ldbu	r3,0(r2)
 802d6b0:	e0bfff17 	ldw	r2,-4(fp)
 802d6b4:	10800044 	addi	r2,r2,1
 802d6b8:	10c00005 	stb	r3,0(r2)
 802d6bc:	e0bffa04 	addi	r2,fp,-24
 802d6c0:	108000c4 	addi	r2,r2,3
 802d6c4:	10800003 	ldbu	r2,0(r2)
 802d6c8:	1007883a 	mov	r3,r2
 802d6cc:	e0bfff17 	ldw	r2,-4(fp)
 802d6d0:	10c00005 	stb	r3,0(r2)
 802d6d4:	e0bfff17 	ldw	r2,-4(fp)
 802d6d8:	10800104 	addi	r2,r2,4
 802d6dc:	e0bfff15 	stw	r2,-4(fp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 802d6e0:	e0bff817 	ldw	r2,-32(fp)
 802d6e4:	100690ba 	slli	r3,r2,2
 802d6e8:	008201b4 	movhi	r2,2054
 802d6ec:	1885883a 	add	r2,r3,r2
 802d6f0:	10bdce17 	ldw	r2,-2248(r2)
 802d6f4:	10800a17 	ldw	r2,40(r2)
 802d6f8:	10004626 	beq	r2,zero,802d814 <dhc_discover+0x2e0>
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
 802d6fc:	e0bff817 	ldw	r2,-32(fp)
 802d700:	100690ba 	slli	r3,r2,2
 802d704:	008201b4 	movhi	r2,2054
 802d708:	1885883a 	add	r2,r3,r2
 802d70c:	10bdce17 	ldw	r2,-2248(r2)
 802d710:	10800a17 	ldw	r2,40(r2)
 802d714:	1006d63a 	srli	r3,r2,24
 802d718:	e0bff817 	ldw	r2,-32(fp)
 802d71c:	100890ba 	slli	r4,r2,2
 802d720:	008201b4 	movhi	r2,2054
 802d724:	2085883a 	add	r2,r4,r2
 802d728:	10bdce17 	ldw	r2,-2248(r2)
 802d72c:	10800a17 	ldw	r2,40(r2)
 802d730:	1004d23a 	srli	r2,r2,8
 802d734:	10bfc00c 	andi	r2,r2,65280
 802d738:	1886b03a 	or	r3,r3,r2
 802d73c:	e0bff817 	ldw	r2,-32(fp)
 802d740:	100890ba 	slli	r4,r2,2
 802d744:	008201b4 	movhi	r2,2054
 802d748:	2085883a 	add	r2,r4,r2
 802d74c:	10bdce17 	ldw	r2,-2248(r2)
 802d750:	10800a17 	ldw	r2,40(r2)
 802d754:	1004923a 	slli	r2,r2,8
 802d758:	10803fec 	andhi	r2,r2,255
 802d75c:	1886b03a 	or	r3,r3,r2
 802d760:	e0bff817 	ldw	r2,-32(fp)
 802d764:	100890ba 	slli	r4,r2,2
 802d768:	008201b4 	movhi	r2,2054
 802d76c:	2085883a 	add	r2,r4,r2
 802d770:	10bdce17 	ldw	r2,-2248(r2)
 802d774:	10800a17 	ldw	r2,40(r2)
 802d778:	1004963a 	slli	r2,r2,24
 802d77c:	1884b03a 	or	r2,r3,r2
 802d780:	e0bff915 	stw	r2,-28(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
 802d784:	e0bfff17 	ldw	r2,-4(fp)
 802d788:	10c00044 	addi	r3,r2,1
 802d78c:	e0ffff15 	stw	r3,-4(fp)
 802d790:	00c00c84 	movi	r3,50
 802d794:	10c00005 	stb	r3,0(r2)
 802d798:	e0bfff17 	ldw	r2,-4(fp)
 802d79c:	10c00044 	addi	r3,r2,1
 802d7a0:	e0ffff15 	stw	r3,-4(fp)
 802d7a4:	00c00104 	movi	r3,4
 802d7a8:	10c00005 	stb	r3,0(r2)
 802d7ac:	e0bff904 	addi	r2,fp,-28
 802d7b0:	10c00003 	ldbu	r3,0(r2)
 802d7b4:	e0bfff17 	ldw	r2,-4(fp)
 802d7b8:	108000c4 	addi	r2,r2,3
 802d7bc:	10c00005 	stb	r3,0(r2)
 802d7c0:	e0bff904 	addi	r2,fp,-28
 802d7c4:	10800044 	addi	r2,r2,1
 802d7c8:	10c00003 	ldbu	r3,0(r2)
 802d7cc:	e0bfff17 	ldw	r2,-4(fp)
 802d7d0:	10800084 	addi	r2,r2,2
 802d7d4:	10c00005 	stb	r3,0(r2)
 802d7d8:	e0bff904 	addi	r2,fp,-28
 802d7dc:	10800084 	addi	r2,r2,2
 802d7e0:	10c00003 	ldbu	r3,0(r2)
 802d7e4:	e0bfff17 	ldw	r2,-4(fp)
 802d7e8:	10800044 	addi	r2,r2,1
 802d7ec:	10c00005 	stb	r3,0(r2)
 802d7f0:	e0bff904 	addi	r2,fp,-28
 802d7f4:	108000c4 	addi	r2,r2,3
 802d7f8:	10800003 	ldbu	r2,0(r2)
 802d7fc:	1007883a 	mov	r3,r2
 802d800:	e0bfff17 	ldw	r2,-4(fp)
 802d804:	10c00005 	stb	r3,0(r2)
 802d808:	e0bfff17 	ldw	r2,-4(fp)
 802d80c:	10800104 	addi	r2,r2,4
 802d810:	e0bfff15 	stw	r2,-4(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 802d814:	d0a03117 	ldw	r2,-32572(gp)
 802d818:	00801b0e 	bge	zero,r2,802d888 <dhc_discover+0x354>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 802d81c:	e0bfff17 	ldw	r2,-4(fp)
 802d820:	10c00044 	addi	r3,r2,1
 802d824:	e0ffff15 	stw	r3,-4(fp)
 802d828:	00c00dc4 	movi	r3,55
 802d82c:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
 802d830:	d1203117 	ldw	r4,-32572(gp)
 802d834:	e0bfff17 	ldw	r2,-4(fp)
 802d838:	10c00044 	addi	r3,r2,1
 802d83c:	e0ffff15 	stw	r3,-4(fp)
 802d840:	2007883a 	mov	r3,r4
 802d844:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
 802d848:	e03ffe15 	stw	zero,-8(fp)
 802d84c:	00000b06 	br	802d87c <dhc_discover+0x348>
         *opts++ = reqlist[i];
 802d850:	e0bfff17 	ldw	r2,-4(fp)
 802d854:	10c00044 	addi	r3,r2,1
 802d858:	e0ffff15 	stw	r3,-4(fp)
 802d85c:	e13ffe17 	ldw	r4,-8(fp)
 802d860:	d0e03004 	addi	r3,gp,-32576
 802d864:	20c7883a 	add	r3,r4,r3
 802d868:	18c00003 	ldbu	r3,0(r3)
 802d86c:	10c00005 	stb	r3,0(r2)
      for (i=0 ; i < reqlist_len ; i++ )
 802d870:	e0bffe17 	ldw	r2,-8(fp)
 802d874:	10800044 	addi	r2,r2,1
 802d878:	e0bffe15 	stw	r2,-8(fp)
 802d87c:	d0a03117 	ldw	r2,-32572(gp)
 802d880:	e0fffe17 	ldw	r3,-8(fp)
 802d884:	18bff216 	blt	r3,r2,802d850 <dhc_discover+0x31c>
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
 802d888:	e0bfff17 	ldw	r2,-4(fp)
 802d88c:	10c00044 	addi	r3,r2,1
 802d890:	e0ffff15 	stw	r3,-4(fp)
 802d894:	00ffffc4 	movi	r3,-1
 802d898:	10c00005 	stb	r3,0(r2)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
 802d89c:	d0e0a317 	ldw	r3,-32116(gp)
 802d8a0:	e0bff817 	ldw	r2,-32(fp)
 802d8a4:	11000f24 	muli	r4,r2,60
 802d8a8:	008201b4 	movhi	r2,2054
 802d8ac:	2085883a 	add	r2,r4,r2
 802d8b0:	10fdf815 	stw	r3,-2080(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
 802d8b4:	e0bffd17 	ldw	r2,-12(fp)
 802d8b8:	00ffffc4 	movi	r3,-1
 802d8bc:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 802d8c0:	e0bff817 	ldw	r2,-32(fp)
 802d8c4:	100690ba 	slli	r3,r2,2
 802d8c8:	008201b4 	movhi	r2,2054
 802d8cc:	1885883a 	add	r2,r3,r2
 802d8d0:	10fdce17 	ldw	r3,-2248(r2)
 802d8d4:	e0bffd17 	ldw	r2,-12(fp)
 802d8d8:	10c00615 	stw	r3,24(r2)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 802d8dc:	e0bff817 	ldw	r2,-32(fp)
 802d8e0:	10c00f24 	muli	r3,r2,60
 802d8e4:	008201b4 	movhi	r2,2054
 802d8e8:	1885883a 	add	r2,r3,r2
 802d8ec:	10bdf417 	ldw	r2,-2096(r2)
 802d8f0:	10800120 	cmpeqi	r2,r2,4
 802d8f4:	1000031e 	bne	r2,zero,802d904 <dhc_discover+0x3d0>
      dhc_set_state(iface, DHCS_SELECTING);
 802d8f8:	01400104 	movi	r5,4
 802d8fc:	e13ff817 	ldw	r4,-32(fp)
 802d900:	802f2500 	call	802f250 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 802d904:	e1bffd17 	ldw	r6,-12(fp)
 802d908:	01401104 	movi	r5,68
 802d90c:	010010c4 	movi	r4,67
 802d910:	8047b340 	call	8047b34 <udp_send>
   dsc_discovers++;
 802d914:	d0a08c17 	ldw	r2,-32208(gp)
 802d918:	10800044 	addi	r2,r2,1
 802d91c:	d0a08c15 	stw	r2,-32208(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
 802d920:	d0e0a317 	ldw	r3,-32116(gp)
 802d924:	e0bff817 	ldw	r2,-32(fp)
 802d928:	11000f24 	muli	r4,r2,60
 802d92c:	008201b4 	movhi	r2,2054
 802d930:	2085883a 	add	r2,r4,r2
 802d934:	10fdf815 	stw	r3,-2080(r2)
   dhc_states[iface].tries++;
 802d938:	e0bff817 	ldw	r2,-32(fp)
 802d93c:	10c00f24 	muli	r3,r2,60
 802d940:	008201b4 	movhi	r2,2054
 802d944:	1885883a 	add	r2,r3,r2
 802d948:	10bdf517 	ldw	r2,-2092(r2)
 802d94c:	10c00044 	addi	r3,r2,1
 802d950:	e0bff817 	ldw	r2,-32(fp)
 802d954:	11000f24 	muli	r4,r2,60
 802d958:	008201b4 	movhi	r2,2054
 802d95c:	2085883a 	add	r2,r4,r2
 802d960:	10fdf515 	stw	r3,-2092(r2)

   return 0;
 802d964:	0005883a 	mov	r2,zero
}
 802d968:	e037883a 	mov	sp,fp
 802d96c:	dfc00117 	ldw	ra,4(sp)
 802d970:	df000017 	ldw	fp,0(sp)
 802d974:	dec00204 	addi	sp,sp,8
 802d978:	f800283a 	ret

0802d97c <dhc_rx_offer>:
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 802d97c:	defff904 	addi	sp,sp,-28
 802d980:	dfc00615 	stw	ra,24(sp)
 802d984:	df000515 	stw	fp,20(sp)
 802d988:	df000504 	addi	fp,sp,20
 802d98c:	e13ffd15 	stw	r4,-12(fp)
 802d990:	e17ffc15 	stw	r5,-16(fp)
 802d994:	e1bffb15 	stw	r6,-20(fp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 802d998:	e0bffd17 	ldw	r2,-12(fp)
 802d99c:	10c00f24 	muli	r3,r2,60
 802d9a0:	008201b4 	movhi	r2,2054
 802d9a4:	1885883a 	add	r2,r3,r2
 802d9a8:	10fdf617 	ldw	r3,-2088(r2)
 802d9ac:	e0bffc17 	ldw	r2,-16(fp)
 802d9b0:	10800117 	ldw	r2,4(r2)
 802d9b4:	18800226 	beq	r3,r2,802d9c0 <dhc_rx_offer+0x44>
      return ENP_NOT_MINE;
 802d9b8:	00800084 	movi	r2,2
 802d9bc:	00001f06 	br	802da3c <dhc_rx_offer+0xc0>

   opts = &bp->options[4];    /* examine options after cookie */
 802d9c0:	e0bffc17 	ldw	r2,-16(fp)
 802d9c4:	10803c04 	addi	r2,r2,240
 802d9c8:	e0bfff15 	stw	r2,-4(fp)
   e = dhc_extract_opts(iface,opts);
 802d9cc:	e17fff17 	ldw	r5,-4(fp)
 802d9d0:	e13ffd17 	ldw	r4,-12(fp)
 802d9d4:	802e8280 	call	802e828 <dhc_extract_opts>
 802d9d8:	e0bffe15 	stw	r2,-8(fp)
   if (e)   /* parse error? */
 802d9dc:	e0bffe17 	ldw	r2,-8(fp)
 802d9e0:	10000326 	beq	r2,zero,802d9f0 <dhc_rx_offer+0x74>
   {
      dtrap();
 802d9e4:	80301a80 	call	80301a8 <dtrap>
      return e;
 802d9e8:	e0bffe17 	ldw	r2,-8(fp)
 802d9ec:	00001306 	br	802da3c <dhc_rx_offer+0xc0>
   }
   if (!bp->yiaddr)  /* require an IP address */
 802d9f0:	e0bffc17 	ldw	r2,-16(fp)
 802d9f4:	10800417 	ldw	r2,16(r2)
 802d9f8:	1000061e 	bne	r2,zero,802da14 <dhc_rx_offer+0x98>
   {
      dhc_decline(iface,bp, bplen);
 802d9fc:	e1bffb17 	ldw	r6,-20(fp)
 802da00:	e17ffc17 	ldw	r5,-16(fp)
 802da04:	e13ffd17 	ldw	r4,-12(fp)
 802da08:	802e67c0 	call	802e67c <dhc_decline>
      return ENP_NOT_MINE;
 802da0c:	00800084 	movi	r2,2
 802da10:	00000a06 	br	802da3c <dhc_rx_offer+0xc0>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
 802da14:	e0bffc17 	ldw	r2,-16(fp)
 802da18:	10c00417 	ldw	r3,16(r2)
 802da1c:	e0bffd17 	ldw	r2,-12(fp)
 802da20:	11000f24 	muli	r4,r2,60
 802da24:	008201b4 	movhi	r2,2054
 802da28:	2085883a 	add	r2,r4,r2
 802da2c:	10fdfd15 	stw	r3,-2060(r2)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
 802da30:	000b883a 	mov	r5,zero
 802da34:	e13ffd17 	ldw	r4,-12(fp)
 802da38:	802da500 	call	802da50 <dhc_request>
}
 802da3c:	e037883a 	mov	sp,fp
 802da40:	dfc00117 	ldw	ra,4(sp)
 802da44:	df000017 	ldw	fp,0(sp)
 802da48:	dec00204 	addi	sp,sp,8
 802da4c:	f800283a 	ret

0802da50 <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
 802da50:	defff404 	addi	sp,sp,-48
 802da54:	dfc00b15 	stw	ra,44(sp)
 802da58:	df000a15 	stw	fp,40(sp)
 802da5c:	df000a04 	addi	fp,sp,40
 802da60:	e13ff715 	stw	r4,-36(fp)
 802da64:	e17ff615 	stw	r5,-40(fp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
 802da68:	000b883a 	mov	r5,zero
 802da6c:	01008904 	movi	r4,548
 802da70:	8047f6c0 	call	8047f6c <udp_alloc>
 802da74:	e0bffd15 	stw	r2,-12(fp)
   if (!pkt) 
 802da78:	e0bffd17 	ldw	r2,-12(fp)
 802da7c:	1000021e 	bne	r2,zero,802da88 <dhc_request+0x38>
      return ENP_NOMEM;
 802da80:	00bffb04 	movi	r2,-20
 802da84:	00025006 	br	802e3c8 <dhc_request+0x978>
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
 802da88:	e0bffd17 	ldw	r2,-12(fp)
 802da8c:	00c03b04 	movi	r3,236
 802da90:	10c00415 	stw	r3,16(r2)

   if ( xid_flag == TRUE )
 802da94:	e0bff617 	ldw	r2,-40(fp)
 802da98:	10800058 	cmpnei	r2,r2,1
 802da9c:	10000e1e 	bne	r2,zero,802dad8 <dhc_request+0x88>
   {
      dhc_states[iface].xid  = xids++;
 802daa0:	d0a02f17 	ldw	r2,-32580(gp)
 802daa4:	10c00044 	addi	r3,r2,1
 802daa8:	d0e02f15 	stw	r3,-32580(gp)
 802daac:	1009883a 	mov	r4,r2
 802dab0:	e0bff717 	ldw	r2,-36(fp)
 802dab4:	10c00f24 	muli	r3,r2,60
 802dab8:	008201b4 	movhi	r2,2054
 802dabc:	1885883a 	add	r2,r3,r2
 802dac0:	113df615 	stw	r4,-2088(r2)
      dhc_states[iface].secs = 0;
 802dac4:	e0bff717 	ldw	r2,-36(fp)
 802dac8:	10c00f24 	muli	r3,r2,60
 802dacc:	008201b4 	movhi	r2,2054
 802dad0:	1885883a 	add	r2,r3,r2
 802dad4:	103df70d 	sth	zero,-2084(r2)
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
 802dad8:	e0bffd17 	ldw	r2,-12(fp)
 802dadc:	10800317 	ldw	r2,12(r2)
 802dae0:	e0bffc15 	stw	r2,-16(fp)
   e     = dhc_buildheader(iface,outbp);
 802dae4:	e17ffc17 	ldw	r5,-16(fp)
 802dae8:	e13ff717 	ldw	r4,-36(fp)
 802daec:	802d3780 	call	802d378 <dhc_buildheader>
 802daf0:	e0bffb15 	stw	r2,-20(fp)
   if (e)
 802daf4:	e0bffb17 	ldw	r2,-20(fp)
 802daf8:	10000226 	beq	r2,zero,802db04 <dhc_request+0xb4>
      return e;
 802dafc:	e0bffb17 	ldw	r2,-20(fp)
 802db00:	00023106 	br	802e3c8 <dhc_request+0x978>

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 802db04:	e0bffc17 	ldw	r2,-16(fp)
 802db08:	10c03b04 	addi	r3,r2,236
 802db0c:	0098d534 	movhi	r2,25428
 802db10:	10a098c4 	addi	r2,r2,-32157
 802db14:	18800015 	stw	r2,0(r3)
   opts    = &outbp->options[4];    /* encode options after cookie */
 802db18:	e0bffc17 	ldw	r2,-16(fp)
 802db1c:	10803c04 	addi	r2,r2,240
 802db20:	e0bfff15 	stw	r2,-4(fp)
   *opts++ = DHOP_TYPE;
 802db24:	e0bfff17 	ldw	r2,-4(fp)
 802db28:	10c00044 	addi	r3,r2,1
 802db2c:	e0ffff15 	stw	r3,-4(fp)
 802db30:	00c00d44 	movi	r3,53
 802db34:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
 802db38:	e0bfff17 	ldw	r2,-4(fp)
 802db3c:	10c00044 	addi	r3,r2,1
 802db40:	e0ffff15 	stw	r3,-4(fp)
 802db44:	00c00044 	movi	r3,1
 802db48:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_REQUEST;
 802db4c:	e0bfff17 	ldw	r2,-4(fp)
 802db50:	10c00044 	addi	r3,r2,1
 802db54:	e0ffff15 	stw	r3,-4(fp)
 802db58:	00c000c4 	movi	r3,3
 802db5c:	10c00005 	stb	r3,0(r2)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802db60:	e0bff717 	ldw	r2,-36(fp)
 802db64:	10c00f24 	muli	r3,r2,60
 802db68:	008201b4 	movhi	r2,2054
 802db6c:	1885883a 	add	r2,r3,r2
 802db70:	10bdf417 	ldw	r2,-2096(r2)
 802db74:	10800120 	cmpeqi	r2,r2,4
 802db78:	1000151e 	bne	r2,zero,802dbd0 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
 802db7c:	e0bff717 	ldw	r2,-36(fp)
 802db80:	10c00f24 	muli	r3,r2,60
 802db84:	008201b4 	movhi	r2,2054
 802db88:	1885883a 	add	r2,r3,r2
 802db8c:	10bdf417 	ldw	r2,-2096(r2)
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802db90:	10800160 	cmpeqi	r2,r2,5
 802db94:	10000e1e 	bne	r2,zero,802dbd0 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_REBOOTING) ||
 802db98:	e0bff717 	ldw	r2,-36(fp)
 802db9c:	10c00f24 	muli	r3,r2,60
 802dba0:	008201b4 	movhi	r2,2054
 802dba4:	1885883a 	add	r2,r3,r2
 802dba8:	10bdf417 	ldw	r2,-2096(r2)
       (dhc_states[iface].state == DHCS_REQUESTING) ||
 802dbac:	108000e0 	cmpeqi	r2,r2,3
 802dbb0:	1000071e 	bne	r2,zero,802dbd0 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_INITREBOOT))
 802dbb4:	e0bff717 	ldw	r2,-36(fp)
 802dbb8:	10c00f24 	muli	r3,r2,60
 802dbbc:	008201b4 	movhi	r2,2054
 802dbc0:	1885883a 	add	r2,r3,r2
 802dbc4:	10bdf417 	ldw	r2,-2096(r2)
       (dhc_states[iface].state == DHCS_REBOOTING) ||
 802dbc8:	10800098 	cmpnei	r2,r2,2
 802dbcc:	1000421e 	bne	r2,zero,802dcd8 <dhc_request+0x288>
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
 802dbd0:	e0bff717 	ldw	r2,-36(fp)
 802dbd4:	10c00f24 	muli	r3,r2,60
 802dbd8:	008201b4 	movhi	r2,2054
 802dbdc:	1885883a 	add	r2,r3,r2
 802dbe0:	10bdfd17 	ldw	r2,-2060(r2)
 802dbe4:	1006d63a 	srli	r3,r2,24
 802dbe8:	e0bff717 	ldw	r2,-36(fp)
 802dbec:	11000f24 	muli	r4,r2,60
 802dbf0:	008201b4 	movhi	r2,2054
 802dbf4:	2085883a 	add	r2,r4,r2
 802dbf8:	10bdfd17 	ldw	r2,-2060(r2)
 802dbfc:	1004d23a 	srli	r2,r2,8
 802dc00:	10bfc00c 	andi	r2,r2,65280
 802dc04:	1886b03a 	or	r3,r3,r2
 802dc08:	e0bff717 	ldw	r2,-36(fp)
 802dc0c:	11000f24 	muli	r4,r2,60
 802dc10:	008201b4 	movhi	r2,2054
 802dc14:	2085883a 	add	r2,r4,r2
 802dc18:	10bdfd17 	ldw	r2,-2060(r2)
 802dc1c:	1004923a 	slli	r2,r2,8
 802dc20:	10803fec 	andhi	r2,r2,255
 802dc24:	1886b03a 	or	r3,r3,r2
 802dc28:	e0bff717 	ldw	r2,-36(fp)
 802dc2c:	11000f24 	muli	r4,r2,60
 802dc30:	008201b4 	movhi	r2,2054
 802dc34:	2085883a 	add	r2,r4,r2
 802dc38:	10bdfd17 	ldw	r2,-2060(r2)
 802dc3c:	1004963a 	slli	r2,r2,24
 802dc40:	1884b03a 	or	r2,r3,r2
 802dc44:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
 802dc48:	e0bfff17 	ldw	r2,-4(fp)
 802dc4c:	10c00044 	addi	r3,r2,1
 802dc50:	e0ffff15 	stw	r3,-4(fp)
 802dc54:	00c00c84 	movi	r3,50
 802dc58:	10c00005 	stb	r3,0(r2)
 802dc5c:	e0bfff17 	ldw	r2,-4(fp)
 802dc60:	10c00044 	addi	r3,r2,1
 802dc64:	e0ffff15 	stw	r3,-4(fp)
 802dc68:	00c00104 	movi	r3,4
 802dc6c:	10c00005 	stb	r3,0(r2)
 802dc70:	e0bff804 	addi	r2,fp,-32
 802dc74:	10c00003 	ldbu	r3,0(r2)
 802dc78:	e0bfff17 	ldw	r2,-4(fp)
 802dc7c:	108000c4 	addi	r2,r2,3
 802dc80:	10c00005 	stb	r3,0(r2)
 802dc84:	e0bff804 	addi	r2,fp,-32
 802dc88:	10800044 	addi	r2,r2,1
 802dc8c:	10c00003 	ldbu	r3,0(r2)
 802dc90:	e0bfff17 	ldw	r2,-4(fp)
 802dc94:	10800084 	addi	r2,r2,2
 802dc98:	10c00005 	stb	r3,0(r2)
 802dc9c:	e0bff804 	addi	r2,fp,-32
 802dca0:	10800084 	addi	r2,r2,2
 802dca4:	10c00003 	ldbu	r3,0(r2)
 802dca8:	e0bfff17 	ldw	r2,-4(fp)
 802dcac:	10800044 	addi	r2,r2,1
 802dcb0:	10c00005 	stb	r3,0(r2)
 802dcb4:	e0bff804 	addi	r2,fp,-32
 802dcb8:	108000c4 	addi	r2,r2,3
 802dcbc:	10800003 	ldbu	r2,0(r2)
 802dcc0:	1007883a 	mov	r3,r2
 802dcc4:	e0bfff17 	ldw	r2,-4(fp)
 802dcc8:	10c00005 	stb	r3,0(r2)
 802dccc:	e0bfff17 	ldw	r2,-4(fp)
 802dcd0:	10800104 	addi	r2,r2,4
 802dcd4:	e0bfff15 	stw	r2,-4(fp)
   }
   if (dhc_states[iface].snmask)
 802dcd8:	e0bff717 	ldw	r2,-36(fp)
 802dcdc:	10c00f24 	muli	r3,r2,60
 802dce0:	008201b4 	movhi	r2,2054
 802dce4:	1885883a 	add	r2,r3,r2
 802dce8:	10bdfe17 	ldw	r2,-2056(r2)
 802dcec:	10004226 	beq	r2,zero,802ddf8 <dhc_request+0x3a8>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
 802dcf0:	e0bff717 	ldw	r2,-36(fp)
 802dcf4:	10c00f24 	muli	r3,r2,60
 802dcf8:	008201b4 	movhi	r2,2054
 802dcfc:	1885883a 	add	r2,r3,r2
 802dd00:	10bdfe17 	ldw	r2,-2056(r2)
 802dd04:	1006d63a 	srli	r3,r2,24
 802dd08:	e0bff717 	ldw	r2,-36(fp)
 802dd0c:	11000f24 	muli	r4,r2,60
 802dd10:	008201b4 	movhi	r2,2054
 802dd14:	2085883a 	add	r2,r4,r2
 802dd18:	10bdfe17 	ldw	r2,-2056(r2)
 802dd1c:	1004d23a 	srli	r2,r2,8
 802dd20:	10bfc00c 	andi	r2,r2,65280
 802dd24:	1886b03a 	or	r3,r3,r2
 802dd28:	e0bff717 	ldw	r2,-36(fp)
 802dd2c:	11000f24 	muli	r4,r2,60
 802dd30:	008201b4 	movhi	r2,2054
 802dd34:	2085883a 	add	r2,r4,r2
 802dd38:	10bdfe17 	ldw	r2,-2056(r2)
 802dd3c:	1004923a 	slli	r2,r2,8
 802dd40:	10803fec 	andhi	r2,r2,255
 802dd44:	1886b03a 	or	r3,r3,r2
 802dd48:	e0bff717 	ldw	r2,-36(fp)
 802dd4c:	11000f24 	muli	r4,r2,60
 802dd50:	008201b4 	movhi	r2,2054
 802dd54:	2085883a 	add	r2,r4,r2
 802dd58:	10bdfe17 	ldw	r2,-2056(r2)
 802dd5c:	1004963a 	slli	r2,r2,24
 802dd60:	1884b03a 	or	r2,r3,r2
 802dd64:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
 802dd68:	e0bfff17 	ldw	r2,-4(fp)
 802dd6c:	10c00044 	addi	r3,r2,1
 802dd70:	e0ffff15 	stw	r3,-4(fp)
 802dd74:	00c00044 	movi	r3,1
 802dd78:	10c00005 	stb	r3,0(r2)
 802dd7c:	e0bfff17 	ldw	r2,-4(fp)
 802dd80:	10c00044 	addi	r3,r2,1
 802dd84:	e0ffff15 	stw	r3,-4(fp)
 802dd88:	00c00104 	movi	r3,4
 802dd8c:	10c00005 	stb	r3,0(r2)
 802dd90:	e0bff804 	addi	r2,fp,-32
 802dd94:	10c00003 	ldbu	r3,0(r2)
 802dd98:	e0bfff17 	ldw	r2,-4(fp)
 802dd9c:	108000c4 	addi	r2,r2,3
 802dda0:	10c00005 	stb	r3,0(r2)
 802dda4:	e0bff804 	addi	r2,fp,-32
 802dda8:	10800044 	addi	r2,r2,1
 802ddac:	10c00003 	ldbu	r3,0(r2)
 802ddb0:	e0bfff17 	ldw	r2,-4(fp)
 802ddb4:	10800084 	addi	r2,r2,2
 802ddb8:	10c00005 	stb	r3,0(r2)
 802ddbc:	e0bff804 	addi	r2,fp,-32
 802ddc0:	10800084 	addi	r2,r2,2
 802ddc4:	10c00003 	ldbu	r3,0(r2)
 802ddc8:	e0bfff17 	ldw	r2,-4(fp)
 802ddcc:	10800044 	addi	r2,r2,1
 802ddd0:	10c00005 	stb	r3,0(r2)
 802ddd4:	e0bff804 	addi	r2,fp,-32
 802ddd8:	108000c4 	addi	r2,r2,3
 802dddc:	10800003 	ldbu	r2,0(r2)
 802dde0:	1007883a 	mov	r3,r2
 802dde4:	e0bfff17 	ldw	r2,-4(fp)
 802dde8:	10c00005 	stb	r3,0(r2)
 802ddec:	e0bfff17 	ldw	r2,-4(fp)
 802ddf0:	10800104 	addi	r2,r2,4
 802ddf4:	e0bfff15 	stw	r2,-4(fp)
   }
   if (dhc_states[iface].defgw)
 802ddf8:	e0bff717 	ldw	r2,-36(fp)
 802ddfc:	10c00f24 	muli	r3,r2,60
 802de00:	008201b4 	movhi	r2,2054
 802de04:	1885883a 	add	r2,r3,r2
 802de08:	10bdff17 	ldw	r2,-2052(r2)
 802de0c:	10004226 	beq	r2,zero,802df18 <dhc_request+0x4c8>
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
 802de10:	e0bff717 	ldw	r2,-36(fp)
 802de14:	10c00f24 	muli	r3,r2,60
 802de18:	008201b4 	movhi	r2,2054
 802de1c:	1885883a 	add	r2,r3,r2
 802de20:	10bdff17 	ldw	r2,-2052(r2)
 802de24:	1006d63a 	srli	r3,r2,24
 802de28:	e0bff717 	ldw	r2,-36(fp)
 802de2c:	11000f24 	muli	r4,r2,60
 802de30:	008201b4 	movhi	r2,2054
 802de34:	2085883a 	add	r2,r4,r2
 802de38:	10bdff17 	ldw	r2,-2052(r2)
 802de3c:	1004d23a 	srli	r2,r2,8
 802de40:	10bfc00c 	andi	r2,r2,65280
 802de44:	1886b03a 	or	r3,r3,r2
 802de48:	e0bff717 	ldw	r2,-36(fp)
 802de4c:	11000f24 	muli	r4,r2,60
 802de50:	008201b4 	movhi	r2,2054
 802de54:	2085883a 	add	r2,r4,r2
 802de58:	10bdff17 	ldw	r2,-2052(r2)
 802de5c:	1004923a 	slli	r2,r2,8
 802de60:	10803fec 	andhi	r2,r2,255
 802de64:	1886b03a 	or	r3,r3,r2
 802de68:	e0bff717 	ldw	r2,-36(fp)
 802de6c:	11000f24 	muli	r4,r2,60
 802de70:	008201b4 	movhi	r2,2054
 802de74:	2085883a 	add	r2,r4,r2
 802de78:	10bdff17 	ldw	r2,-2052(r2)
 802de7c:	1004963a 	slli	r2,r2,24
 802de80:	1884b03a 	or	r2,r3,r2
 802de84:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
 802de88:	e0bfff17 	ldw	r2,-4(fp)
 802de8c:	10c00044 	addi	r3,r2,1
 802de90:	e0ffff15 	stw	r3,-4(fp)
 802de94:	00c000c4 	movi	r3,3
 802de98:	10c00005 	stb	r3,0(r2)
 802de9c:	e0bfff17 	ldw	r2,-4(fp)
 802dea0:	10c00044 	addi	r3,r2,1
 802dea4:	e0ffff15 	stw	r3,-4(fp)
 802dea8:	00c00104 	movi	r3,4
 802deac:	10c00005 	stb	r3,0(r2)
 802deb0:	e0bff804 	addi	r2,fp,-32
 802deb4:	10c00003 	ldbu	r3,0(r2)
 802deb8:	e0bfff17 	ldw	r2,-4(fp)
 802debc:	108000c4 	addi	r2,r2,3
 802dec0:	10c00005 	stb	r3,0(r2)
 802dec4:	e0bff804 	addi	r2,fp,-32
 802dec8:	10800044 	addi	r2,r2,1
 802decc:	10c00003 	ldbu	r3,0(r2)
 802ded0:	e0bfff17 	ldw	r2,-4(fp)
 802ded4:	10800084 	addi	r2,r2,2
 802ded8:	10c00005 	stb	r3,0(r2)
 802dedc:	e0bff804 	addi	r2,fp,-32
 802dee0:	10800084 	addi	r2,r2,2
 802dee4:	10c00003 	ldbu	r3,0(r2)
 802dee8:	e0bfff17 	ldw	r2,-4(fp)
 802deec:	10800044 	addi	r2,r2,1
 802def0:	10c00005 	stb	r3,0(r2)
 802def4:	e0bff804 	addi	r2,fp,-32
 802def8:	108000c4 	addi	r2,r2,3
 802defc:	10800003 	ldbu	r2,0(r2)
 802df00:	1007883a 	mov	r3,r2
 802df04:	e0bfff17 	ldw	r2,-4(fp)
 802df08:	10c00005 	stb	r3,0(r2)
 802df0c:	e0bfff17 	ldw	r2,-4(fp)
 802df10:	10800104 	addi	r2,r2,4
 802df14:	e0bfff15 	stw	r2,-4(fp)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 802df18:	e0bff717 	ldw	r2,-36(fp)
 802df1c:	10c00f24 	muli	r3,r2,60
 802df20:	008201b4 	movhi	r2,2054
 802df24:	1885883a 	add	r2,r3,r2
 802df28:	10bdf917 	ldw	r2,-2076(r2)
 802df2c:	10003826 	beq	r2,zero,802e010 <dhc_request+0x5c0>
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
 802df30:	e0bfff17 	ldw	r2,-4(fp)
 802df34:	10c00044 	addi	r3,r2,1
 802df38:	e0ffff15 	stw	r3,-4(fp)
 802df3c:	00c00cc4 	movi	r3,51
 802df40:	10c00005 	stb	r3,0(r2)
 802df44:	e0bfff17 	ldw	r2,-4(fp)
 802df48:	10c00044 	addi	r3,r2,1
 802df4c:	e0ffff15 	stw	r3,-4(fp)
 802df50:	00c00104 	movi	r3,4
 802df54:	10c00005 	stb	r3,0(r2)
 802df58:	e0bff717 	ldw	r2,-36(fp)
 802df5c:	10800f24 	muli	r2,r2,60
 802df60:	10c00504 	addi	r3,r2,20
 802df64:	008201b4 	movhi	r2,2054
 802df68:	10bdf404 	addi	r2,r2,-2096
 802df6c:	1885883a 	add	r2,r3,r2
 802df70:	10c00003 	ldbu	r3,0(r2)
 802df74:	e0bfff17 	ldw	r2,-4(fp)
 802df78:	108000c4 	addi	r2,r2,3
 802df7c:	10c00005 	stb	r3,0(r2)
 802df80:	e0bff717 	ldw	r2,-36(fp)
 802df84:	10800f24 	muli	r2,r2,60
 802df88:	10c00504 	addi	r3,r2,20
 802df8c:	008201b4 	movhi	r2,2054
 802df90:	10bdf404 	addi	r2,r2,-2096
 802df94:	1885883a 	add	r2,r3,r2
 802df98:	10800044 	addi	r2,r2,1
 802df9c:	10c00003 	ldbu	r3,0(r2)
 802dfa0:	e0bfff17 	ldw	r2,-4(fp)
 802dfa4:	10800084 	addi	r2,r2,2
 802dfa8:	10c00005 	stb	r3,0(r2)
 802dfac:	e0bff717 	ldw	r2,-36(fp)
 802dfb0:	10800f24 	muli	r2,r2,60
 802dfb4:	10c00504 	addi	r3,r2,20
 802dfb8:	008201b4 	movhi	r2,2054
 802dfbc:	10bdf404 	addi	r2,r2,-2096
 802dfc0:	1885883a 	add	r2,r3,r2
 802dfc4:	10800084 	addi	r2,r2,2
 802dfc8:	10c00003 	ldbu	r3,0(r2)
 802dfcc:	e0bfff17 	ldw	r2,-4(fp)
 802dfd0:	10800044 	addi	r2,r2,1
 802dfd4:	10c00005 	stb	r3,0(r2)
 802dfd8:	e0bff717 	ldw	r2,-36(fp)
 802dfdc:	10800f24 	muli	r2,r2,60
 802dfe0:	10c00504 	addi	r3,r2,20
 802dfe4:	008201b4 	movhi	r2,2054
 802dfe8:	10bdf404 	addi	r2,r2,-2096
 802dfec:	1885883a 	add	r2,r3,r2
 802dff0:	108000c4 	addi	r2,r2,3
 802dff4:	10800003 	ldbu	r2,0(r2)
 802dff8:	1007883a 	mov	r3,r2
 802dffc:	e0bfff17 	ldw	r2,-4(fp)
 802e000:	10c00005 	stb	r3,0(r2)
 802e004:	e0bfff17 	ldw	r2,-4(fp)
 802e008:	10800104 	addi	r2,r2,4
 802e00c:	e0bfff15 	stw	r2,-4(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 802e010:	d0a03117 	ldw	r2,-32572(gp)
 802e014:	00801b0e 	bge	zero,r2,802e084 <dhc_request+0x634>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 802e018:	e0bfff17 	ldw	r2,-4(fp)
 802e01c:	10c00044 	addi	r3,r2,1
 802e020:	e0ffff15 	stw	r3,-4(fp)
 802e024:	00c00dc4 	movi	r3,55
 802e028:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
 802e02c:	d1203117 	ldw	r4,-32572(gp)
 802e030:	e0bfff17 	ldw	r2,-4(fp)
 802e034:	10c00044 	addi	r3,r2,1
 802e038:	e0ffff15 	stw	r3,-4(fp)
 802e03c:	2007883a 	mov	r3,r4
 802e040:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
 802e044:	e03ffe15 	stw	zero,-8(fp)
 802e048:	00000b06 	br	802e078 <dhc_request+0x628>
         *opts++ = reqlist[i];
 802e04c:	e0bfff17 	ldw	r2,-4(fp)
 802e050:	10c00044 	addi	r3,r2,1
 802e054:	e0ffff15 	stw	r3,-4(fp)
 802e058:	e13ffe17 	ldw	r4,-8(fp)
 802e05c:	d0e03004 	addi	r3,gp,-32576
 802e060:	20c7883a 	add	r3,r4,r3
 802e064:	18c00003 	ldbu	r3,0(r3)
 802e068:	10c00005 	stb	r3,0(r2)
      for (i=0 ; i < reqlist_len ; i++ )
 802e06c:	e0bffe17 	ldw	r2,-8(fp)
 802e070:	10800044 	addi	r2,r2,1
 802e074:	e0bffe15 	stw	r2,-8(fp)
 802e078:	d0a03117 	ldw	r2,-32572(gp)
 802e07c:	e0fffe17 	ldw	r3,-8(fp)
 802e080:	18bff216 	blt	r3,r2,802e04c <dhc_request+0x5fc>
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
 802e084:	e0bff717 	ldw	r2,-36(fp)
 802e088:	10c00f24 	muli	r3,r2,60
 802e08c:	008201b4 	movhi	r2,2054
 802e090:	1885883a 	add	r2,r3,r2
 802e094:	10bdf417 	ldw	r2,-2096(r2)
 802e098:	108001e0 	cmpeqi	r2,r2,7
 802e09c:	1000071e 	bne	r2,zero,802e0bc <dhc_request+0x66c>
       || (dhc_states[iface].state == DHCS_REBINDING))
 802e0a0:	e0bff717 	ldw	r2,-36(fp)
 802e0a4:	10c00f24 	muli	r3,r2,60
 802e0a8:	008201b4 	movhi	r2,2054
 802e0ac:	1885883a 	add	r2,r3,r2
 802e0b0:	10bdf417 	ldw	r2,-2096(r2)
 802e0b4:	10800218 	cmpnei	r2,r2,8
 802e0b8:	1000081e 	bne	r2,zero,802e0dc <dhc_request+0x68c>
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
 802e0bc:	e0bff717 	ldw	r2,-36(fp)
 802e0c0:	100690ba 	slli	r3,r2,2
 802e0c4:	008201b4 	movhi	r2,2054
 802e0c8:	1885883a 	add	r2,r3,r2
 802e0cc:	10bdce17 	ldw	r2,-2248(r2)
 802e0d0:	10c00a17 	ldw	r3,40(r2)
 802e0d4:	e0bffc17 	ldw	r2,-16(fp)
 802e0d8:	10c00315 	stw	r3,12(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802e0dc:	e0bff717 	ldw	r2,-36(fp)
 802e0e0:	10c00f24 	muli	r3,r2,60
 802e0e4:	008201b4 	movhi	r2,2054
 802e0e8:	1885883a 	add	r2,r3,r2
 802e0ec:	10bdf417 	ldw	r2,-2096(r2)
 802e0f0:	10800120 	cmpeqi	r2,r2,4
 802e0f4:	1000071e 	bne	r2,zero,802e114 <dhc_request+0x6c4>
       (dhc_states[iface].state == DHCS_REQUESTING))
 802e0f8:	e0bff717 	ldw	r2,-36(fp)
 802e0fc:	10c00f24 	muli	r3,r2,60
 802e100:	008201b4 	movhi	r2,2054
 802e104:	1885883a 	add	r2,r3,r2
 802e108:	10bdf417 	ldw	r2,-2096(r2)
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802e10c:	10800158 	cmpnei	r2,r2,5
 802e110:	1000421e 	bne	r2,zero,802e21c <dhc_request+0x7cc>
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
 802e114:	e0bff717 	ldw	r2,-36(fp)
 802e118:	10c00f24 	muli	r3,r2,60
 802e11c:	008201b4 	movhi	r2,2054
 802e120:	1885883a 	add	r2,r3,r2
 802e124:	10be0117 	ldw	r2,-2044(r2)
 802e128:	1006d63a 	srli	r3,r2,24
 802e12c:	e0bff717 	ldw	r2,-36(fp)
 802e130:	11000f24 	muli	r4,r2,60
 802e134:	008201b4 	movhi	r2,2054
 802e138:	2085883a 	add	r2,r4,r2
 802e13c:	10be0117 	ldw	r2,-2044(r2)
 802e140:	1004d23a 	srli	r2,r2,8
 802e144:	10bfc00c 	andi	r2,r2,65280
 802e148:	1886b03a 	or	r3,r3,r2
 802e14c:	e0bff717 	ldw	r2,-36(fp)
 802e150:	11000f24 	muli	r4,r2,60
 802e154:	008201b4 	movhi	r2,2054
 802e158:	2085883a 	add	r2,r4,r2
 802e15c:	10be0117 	ldw	r2,-2044(r2)
 802e160:	1004923a 	slli	r2,r2,8
 802e164:	10803fec 	andhi	r2,r2,255
 802e168:	1886b03a 	or	r3,r3,r2
 802e16c:	e0bff717 	ldw	r2,-36(fp)
 802e170:	11000f24 	muli	r4,r2,60
 802e174:	008201b4 	movhi	r2,2054
 802e178:	2085883a 	add	r2,r4,r2
 802e17c:	10be0117 	ldw	r2,-2044(r2)
 802e180:	1004963a 	slli	r2,r2,24
 802e184:	1884b03a 	or	r2,r3,r2
 802e188:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
 802e18c:	e0bfff17 	ldw	r2,-4(fp)
 802e190:	10c00044 	addi	r3,r2,1
 802e194:	e0ffff15 	stw	r3,-4(fp)
 802e198:	00c00d84 	movi	r3,54
 802e19c:	10c00005 	stb	r3,0(r2)
 802e1a0:	e0bfff17 	ldw	r2,-4(fp)
 802e1a4:	10c00044 	addi	r3,r2,1
 802e1a8:	e0ffff15 	stw	r3,-4(fp)
 802e1ac:	00c00104 	movi	r3,4
 802e1b0:	10c00005 	stb	r3,0(r2)
 802e1b4:	e0bff804 	addi	r2,fp,-32
 802e1b8:	10c00003 	ldbu	r3,0(r2)
 802e1bc:	e0bfff17 	ldw	r2,-4(fp)
 802e1c0:	108000c4 	addi	r2,r2,3
 802e1c4:	10c00005 	stb	r3,0(r2)
 802e1c8:	e0bff804 	addi	r2,fp,-32
 802e1cc:	10800044 	addi	r2,r2,1
 802e1d0:	10c00003 	ldbu	r3,0(r2)
 802e1d4:	e0bfff17 	ldw	r2,-4(fp)
 802e1d8:	10800084 	addi	r2,r2,2
 802e1dc:	10c00005 	stb	r3,0(r2)
 802e1e0:	e0bff804 	addi	r2,fp,-32
 802e1e4:	10800084 	addi	r2,r2,2
 802e1e8:	10c00003 	ldbu	r3,0(r2)
 802e1ec:	e0bfff17 	ldw	r2,-4(fp)
 802e1f0:	10800044 	addi	r2,r2,1
 802e1f4:	10c00005 	stb	r3,0(r2)
 802e1f8:	e0bff804 	addi	r2,fp,-32
 802e1fc:	108000c4 	addi	r2,r2,3
 802e200:	10800003 	ldbu	r2,0(r2)
 802e204:	1007883a 	mov	r3,r2
 802e208:	e0bfff17 	ldw	r2,-4(fp)
 802e20c:	10c00005 	stb	r3,0(r2)
 802e210:	e0bfff17 	ldw	r2,-4(fp)
 802e214:	10800104 	addi	r2,r2,4
 802e218:	e0bfff15 	stw	r2,-4(fp)
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
 802e21c:	e0bfff17 	ldw	r2,-4(fp)
 802e220:	10c00044 	addi	r3,r2,1
 802e224:	e0ffff15 	stw	r3,-4(fp)
 802e228:	00c01444 	movi	r3,81
 802e22c:	10c00005 	stb	r3,0(r2)
 802e230:	00800184 	movi	r2,6
 802e234:	e0bffa15 	stw	r2,-24(fp)
 802e238:	e0bfff17 	ldw	r2,-4(fp)
 802e23c:	10c00044 	addi	r3,r2,1
 802e240:	e0ffff15 	stw	r3,-4(fp)
 802e244:	e0fffa17 	ldw	r3,-24(fp)
 802e248:	10c00005 	stb	r3,0(r2)
 802e24c:	e0bffa17 	ldw	r2,-24(fp)
 802e250:	100d883a 	mov	r6,r2
 802e254:	01420174 	movhi	r5,2053
 802e258:	294daf04 	addi	r5,r5,14012
 802e25c:	e13fff17 	ldw	r4,-4(fp)
 802e260:	804e2c40 	call	804e2c4 <strncpy>
 802e264:	e0bffa17 	ldw	r2,-24(fp)
 802e268:	e0ffff17 	ldw	r3,-4(fp)
 802e26c:	1885883a 	add	r2,r3,r2
 802e270:	e0bfff15 	stw	r2,-4(fp)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
 802e274:	e0bfff17 	ldw	r2,-4(fp)
 802e278:	10c00044 	addi	r3,r2,1
 802e27c:	e0ffff15 	stw	r3,-4(fp)
 802e280:	00c00f04 	movi	r3,60
 802e284:	10c00005 	stb	r3,0(r2)
 802e288:	d0a04917 	ldw	r2,-32476(gp)
 802e28c:	1009883a 	mov	r4,r2
 802e290:	80044880 	call	8004488 <strlen>
 802e294:	e0bff915 	stw	r2,-28(fp)
 802e298:	e0bfff17 	ldw	r2,-4(fp)
 802e29c:	10c00044 	addi	r3,r2,1
 802e2a0:	e0ffff15 	stw	r3,-4(fp)
 802e2a4:	e0fff917 	ldw	r3,-28(fp)
 802e2a8:	10c00005 	stb	r3,0(r2)
 802e2ac:	d0a04917 	ldw	r2,-32476(gp)
 802e2b0:	e0fff917 	ldw	r3,-28(fp)
 802e2b4:	180d883a 	mov	r6,r3
 802e2b8:	100b883a 	mov	r5,r2
 802e2bc:	e13fff17 	ldw	r4,-4(fp)
 802e2c0:	804e2c40 	call	804e2c4 <strncpy>
 802e2c4:	e0bff917 	ldw	r2,-28(fp)
 802e2c8:	e0ffff17 	ldw	r3,-4(fp)
 802e2cc:	1885883a 	add	r2,r3,r2
 802e2d0:	e0bfff15 	stw	r2,-4(fp)

   *opts++ = DHOP_END;  /* Mark the end of options */
 802e2d4:	e0bfff17 	ldw	r2,-4(fp)
 802e2d8:	10c00044 	addi	r3,r2,1
 802e2dc:	e0ffff15 	stw	r3,-4(fp)
 802e2e0:	00ffffc4 	movi	r3,-1
 802e2e4:	10c00005 	stb	r3,0(r2)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
 802e2e8:	e0bff717 	ldw	r2,-36(fp)
 802e2ec:	10c00f24 	muli	r3,r2,60
 802e2f0:	008201b4 	movhi	r2,2054
 802e2f4:	1885883a 	add	r2,r3,r2
 802e2f8:	10bdf417 	ldw	r2,-2096(r2)
 802e2fc:	108001d8 	cmpnei	r2,r2,7
 802e300:	1000081e 	bne	r2,zero,802e324 <dhc_request+0x8d4>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
 802e304:	e0bff717 	ldw	r2,-36(fp)
 802e308:	10c00f24 	muli	r3,r2,60
 802e30c:	008201b4 	movhi	r2,2054
 802e310:	1885883a 	add	r2,r3,r2
 802e314:	10fe0117 	ldw	r3,-2044(r2)
 802e318:	e0bffd17 	ldw	r2,-12(fp)
 802e31c:	10c00715 	stw	r3,28(r2)
 802e320:	00000306 	br	802e330 <dhc_request+0x8e0>
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
 802e324:	e0bffd17 	ldw	r2,-12(fp)
 802e328:	00ffffc4 	movi	r3,-1
 802e32c:	10c00715 	stw	r3,28(r2)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
 802e330:	e0bff717 	ldw	r2,-36(fp)
 802e334:	100690ba 	slli	r3,r2,2
 802e338:	008201b4 	movhi	r2,2054
 802e33c:	1885883a 	add	r2,r3,r2
 802e340:	10fdce17 	ldw	r3,-2248(r2)
 802e344:	e0bffd17 	ldw	r2,-12(fp)
 802e348:	10c00615 	stw	r3,24(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
 802e34c:	e0ffff17 	ldw	r3,-4(fp)
 802e350:	e0bffc17 	ldw	r2,-16(fp)
 802e354:	1885c83a 	sub	r2,r3,r2
 802e358:	1007883a 	mov	r3,r2
 802e35c:	e0bffd17 	ldw	r2,-12(fp)
 802e360:	10c00415 	stw	r3,16(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 802e364:	e1bffd17 	ldw	r6,-12(fp)
 802e368:	01401104 	movi	r5,68
 802e36c:	010010c4 	movi	r4,67
 802e370:	8047b340 	call	8047b34 <udp_send>
   dsc_requests++;
 802e374:	d0a08e17 	ldw	r2,-32200(gp)
 802e378:	10800044 	addi	r2,r2,1
 802e37c:	d0a08e15 	stw	r2,-32200(gp)

   dhc_states[iface].last_tick = cticks;
 802e380:	d0e0a317 	ldw	r3,-32116(gp)
 802e384:	e0bff717 	ldw	r2,-36(fp)
 802e388:	11000f24 	muli	r4,r2,60
 802e38c:	008201b4 	movhi	r2,2054
 802e390:	2085883a 	add	r2,r4,r2
 802e394:	10fdf815 	stw	r3,-2080(r2)
   dhc_states[iface].tries++;
 802e398:	e0bff717 	ldw	r2,-36(fp)
 802e39c:	10c00f24 	muli	r3,r2,60
 802e3a0:	008201b4 	movhi	r2,2054
 802e3a4:	1885883a 	add	r2,r3,r2
 802e3a8:	10bdf517 	ldw	r2,-2092(r2)
 802e3ac:	10c00044 	addi	r3,r2,1
 802e3b0:	e0bff717 	ldw	r2,-36(fp)
 802e3b4:	11000f24 	muli	r4,r2,60
 802e3b8:	008201b4 	movhi	r2,2054
 802e3bc:	2085883a 	add	r2,r4,r2
 802e3c0:	10fdf515 	stw	r3,-2092(r2)

   return 0;   /* return OK code */
 802e3c4:	0005883a 	mov	r2,zero
}
 802e3c8:	e037883a 	mov	sp,fp
 802e3cc:	dfc00117 	ldw	ra,4(sp)
 802e3d0:	df000017 	ldw	fp,0(sp)
 802e3d4:	dec00204 	addi	sp,sp,8
 802e3d8:	f800283a 	ret

0802e3dc <dhc_setip>:
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 802e3dc:	defffd04 	addi	sp,sp,-12
 802e3e0:	dfc00215 	stw	ra,8(sp)
 802e3e4:	df000115 	stw	fp,4(sp)
 802e3e8:	df000104 	addi	fp,sp,4
 802e3ec:	e13fff15 	stw	r4,-4(fp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 802e3f0:	e0bfff17 	ldw	r2,-4(fp)
 802e3f4:	100690ba 	slli	r3,r2,2
 802e3f8:	008201b4 	movhi	r2,2054
 802e3fc:	1885883a 	add	r2,r3,r2
 802e400:	10fdce17 	ldw	r3,-2248(r2)
 802e404:	e0bfff17 	ldw	r2,-4(fp)
 802e408:	11000f24 	muli	r4,r2,60
 802e40c:	008201b4 	movhi	r2,2054
 802e410:	2085883a 	add	r2,r4,r2
 802e414:	10bdfd17 	ldw	r2,-2060(r2)
 802e418:	18800a15 	stw	r2,40(r3)
   nets[iface]->snmask   = dhc_states[iface].snmask;
 802e41c:	e0bfff17 	ldw	r2,-4(fp)
 802e420:	100690ba 	slli	r3,r2,2
 802e424:	008201b4 	movhi	r2,2054
 802e428:	1885883a 	add	r2,r3,r2
 802e42c:	10fdce17 	ldw	r3,-2248(r2)
 802e430:	e0bfff17 	ldw	r2,-4(fp)
 802e434:	11000f24 	muli	r4,r2,60
 802e438:	008201b4 	movhi	r2,2054
 802e43c:	2085883a 	add	r2,r4,r2
 802e440:	10bdfe17 	ldw	r2,-2056(r2)
 802e444:	18800c15 	stw	r2,48(r3)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
 802e448:	e0bfff17 	ldw	r2,-4(fp)
 802e44c:	100690ba 	slli	r3,r2,2
 802e450:	008201b4 	movhi	r2,2054
 802e454:	1885883a 	add	r2,r3,r2
 802e458:	10fdce17 	ldw	r3,-2248(r2)
 802e45c:	e0bfff17 	ldw	r2,-4(fp)
 802e460:	11000f24 	muli	r4,r2,60
 802e464:	008201b4 	movhi	r2,2054
 802e468:	2085883a 	add	r2,r4,r2
 802e46c:	10bdff17 	ldw	r2,-2052(r2)
 802e470:	18800d15 	stw	r2,52(r3)

   if ( nets[iface]->snmask == 0 )
 802e474:	e0bfff17 	ldw	r2,-4(fp)
 802e478:	100690ba 	slli	r3,r2,2
 802e47c:	008201b4 	movhi	r2,2054
 802e480:	1885883a 	add	r2,r3,r2
 802e484:	10bdce17 	ldw	r2,-2248(r2)
 802e488:	10800c17 	ldw	r2,48(r2)
 802e48c:	10000d1e 	bne	r2,zero,802e4c4 <dhc_setip+0xe8>
   {
      fixup_subnet_mask(iface);
 802e490:	e13fff17 	ldw	r4,-4(fp)
 802e494:	80293700 	call	8029370 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
 802e498:	e0bfff17 	ldw	r2,-4(fp)
 802e49c:	100690ba 	slli	r3,r2,2
 802e4a0:	008201b4 	movhi	r2,2054
 802e4a4:	1885883a 	add	r2,r3,r2
 802e4a8:	10bdce17 	ldw	r2,-2248(r2)
 802e4ac:	10c00c17 	ldw	r3,48(r2)
 802e4b0:	e0bfff17 	ldw	r2,-4(fp)
 802e4b4:	11000f24 	muli	r4,r2,60
 802e4b8:	008201b4 	movhi	r2,2054
 802e4bc:	2085883a 	add	r2,r4,r2
 802e4c0:	10fdfe15 	stw	r3,-2056(r2)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 802e4c4:	e0bfff17 	ldw	r2,-4(fp)
 802e4c8:	100690ba 	slli	r3,r2,2
 802e4cc:	008201b4 	movhi	r2,2054
 802e4d0:	1885883a 	add	r2,r3,r2
 802e4d4:	10bdce17 	ldw	r2,-2248(r2)
 802e4d8:	11000a17 	ldw	r4,40(r2)
 802e4dc:	e0bfff17 	ldw	r2,-4(fp)
 802e4e0:	100690ba 	slli	r3,r2,2
 802e4e4:	008201b4 	movhi	r2,2054
 802e4e8:	1885883a 	add	r2,r3,r2
 802e4ec:	10bdce17 	ldw	r2,-2248(r2)
 802e4f0:	10800c17 	ldw	r2,48(r2)
 802e4f4:	0086303a 	nor	r3,zero,r2
 802e4f8:	e0bfff17 	ldw	r2,-4(fp)
 802e4fc:	100a90ba 	slli	r5,r2,2
 802e500:	008201b4 	movhi	r2,2054
 802e504:	2885883a 	add	r2,r5,r2
 802e508:	10bdce17 	ldw	r2,-2248(r2)
 802e50c:	20c6b03a 	or	r3,r4,r3
 802e510:	10c00e15 	stw	r3,56(r2)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
 802e514:	e0bfff17 	ldw	r2,-4(fp)
 802e518:	100690ba 	slli	r3,r2,2
 802e51c:	008201b4 	movhi	r2,2054
 802e520:	1885883a 	add	r2,r3,r2
 802e524:	10bdce17 	ldw	r2,-2248(r2)
 802e528:	11000a17 	ldw	r4,40(r2)
 802e52c:	e0bfff17 	ldw	r2,-4(fp)
 802e530:	100690ba 	slli	r3,r2,2
 802e534:	008201b4 	movhi	r2,2054
 802e538:	1885883a 	add	r2,r3,r2
 802e53c:	10bdce17 	ldw	r2,-2248(r2)
 802e540:	10c00c17 	ldw	r3,48(r2)
 802e544:	e0bfff17 	ldw	r2,-4(fp)
 802e548:	100a90ba 	slli	r5,r2,2
 802e54c:	008201b4 	movhi	r2,2054
 802e550:	2885883a 	add	r2,r5,r2
 802e554:	10bdce17 	ldw	r2,-2248(r2)
 802e558:	20c6703a 	and	r3,r4,r3
 802e55c:	10c00f15 	stw	r3,60(r2)
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 802e560:	e0bfff17 	ldw	r2,-4(fp)
 802e564:	100690ba 	slli	r3,r2,2
 802e568:	008201b4 	movhi	r2,2054
 802e56c:	1885883a 	add	r2,r3,r2
 802e570:	10bdce17 	ldw	r2,-2248(r2)
 802e574:	11000a17 	ldw	r4,40(r2)
 802e578:	e0bfff17 	ldw	r2,-4(fp)
 802e57c:	100690ba 	slli	r3,r2,2
 802e580:	008201b4 	movhi	r2,2054
 802e584:	1885883a 	add	r2,r3,r2
 802e588:	10bdce17 	ldw	r2,-2248(r2)
 802e58c:	10800c17 	ldw	r2,48(r2)
 802e590:	0086303a 	nor	r3,zero,r2
 802e594:	e0bfff17 	ldw	r2,-4(fp)
 802e598:	100a90ba 	slli	r5,r2,2
 802e59c:	008201b4 	movhi	r2,2054
 802e5a0:	2885883a 	add	r2,r5,r2
 802e5a4:	10bdce17 	ldw	r2,-2248(r2)
 802e5a8:	20c6b03a 	or	r3,r4,r3
 802e5ac:	10c01015 	stw	r3,64(r2)

   return 0;   /* return OK code */
 802e5b0:	0005883a 	mov	r2,zero
}
 802e5b4:	e037883a 	mov	sp,fp
 802e5b8:	dfc00117 	ldw	ra,4(sp)
 802e5bc:	df000017 	ldw	fp,0(sp)
 802e5c0:	dec00204 	addi	sp,sp,8
 802e5c4:	f800283a 	ret

0802e5c8 <dhc_resetip>:
 * RETURNS: Returns 0 if ok, else non-zero error. 
 */

int
dhc_resetip(int iface)
{
 802e5c8:	defffe04 	addi	sp,sp,-8
 802e5cc:	df000115 	stw	fp,4(sp)
 802e5d0:	df000104 	addi	fp,sp,4
 802e5d4:	e13fff15 	stw	r4,-4(fp)
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
 802e5d8:	e0bfff17 	ldw	r2,-4(fp)
 802e5dc:	100690ba 	slli	r3,r2,2
 802e5e0:	008201b4 	movhi	r2,2054
 802e5e4:	1885883a 	add	r2,r3,r2
 802e5e8:	10bdce17 	ldw	r2,-2248(r2)
 802e5ec:	10000a15 	stw	zero,40(r2)
   nets[iface]->snmask   = 0;
 802e5f0:	e0bfff17 	ldw	r2,-4(fp)
 802e5f4:	100690ba 	slli	r3,r2,2
 802e5f8:	008201b4 	movhi	r2,2054
 802e5fc:	1885883a 	add	r2,r3,r2
 802e600:	10bdce17 	ldw	r2,-2248(r2)
 802e604:	10000c15 	stw	zero,48(r2)
   nets[iface]->n_defgw  = 0;
 802e608:	e0bfff17 	ldw	r2,-4(fp)
 802e60c:	100690ba 	slli	r3,r2,2
 802e610:	008201b4 	movhi	r2,2054
 802e614:	1885883a 	add	r2,r3,r2
 802e618:	10bdce17 	ldw	r2,-2248(r2)
 802e61c:	10000d15 	stw	zero,52(r2)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
 802e620:	e0bfff17 	ldw	r2,-4(fp)
 802e624:	100690ba 	slli	r3,r2,2
 802e628:	008201b4 	movhi	r2,2054
 802e62c:	1885883a 	add	r2,r3,r2
 802e630:	10bdce17 	ldw	r2,-2248(r2)
 802e634:	10000e15 	stw	zero,56(r2)
   nets[iface]->n_netbr42  = 0;
 802e638:	e0bfff17 	ldw	r2,-4(fp)
 802e63c:	100690ba 	slli	r3,r2,2
 802e640:	008201b4 	movhi	r2,2054
 802e644:	1885883a 	add	r2,r3,r2
 802e648:	10bdce17 	ldw	r2,-2248(r2)
 802e64c:	10000f15 	stw	zero,60(r2)
   nets[iface]->n_subnetbr = 0;
 802e650:	e0bfff17 	ldw	r2,-4(fp)
 802e654:	100690ba 	slli	r3,r2,2
 802e658:	008201b4 	movhi	r2,2054
 802e65c:	1885883a 	add	r2,r3,r2
 802e660:	10bdce17 	ldw	r2,-2248(r2)
 802e664:	10001015 	stw	zero,64(r2)

   return 0;   /* return OK code */
 802e668:	0005883a 	mov	r2,zero
}
 802e66c:	e037883a 	mov	sp,fp
 802e670:	df000017 	ldw	fp,0(sp)
 802e674:	dec00104 	addi	sp,sp,4
 802e678:	f800283a 	ret

0802e67c <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
 802e67c:	defff804 	addi	sp,sp,-32
 802e680:	dfc00715 	stw	ra,28(sp)
 802e684:	df000615 	stw	fp,24(sp)
 802e688:	df000604 	addi	fp,sp,24
 802e68c:	e13ffc15 	stw	r4,-16(fp)
 802e690:	e17ffb15 	stw	r5,-20(fp)
 802e694:	e1bffa15 	stw	r6,-24(fp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
 802e698:	e0bffa17 	ldw	r2,-24(fp)
 802e69c:	000b883a 	mov	r5,zero
 802e6a0:	1009883a 	mov	r4,r2
 802e6a4:	8047f6c0 	call	8047f6c <udp_alloc>
 802e6a8:	e0bfff15 	stw	r2,-4(fp)
   if (!pkt) 
 802e6ac:	e0bfff17 	ldw	r2,-4(fp)
 802e6b0:	1000021e 	bne	r2,zero,802e6bc <dhc_decline+0x40>
      return ENP_NOMEM;
 802e6b4:	00bffb04 	movi	r2,-20
 802e6b8:	00002b06 	br	802e768 <dhc_decline+0xec>
   pkt->nb_plen = bplen;
 802e6bc:	e0bfff17 	ldw	r2,-4(fp)
 802e6c0:	e0fffa17 	ldw	r3,-24(fp)
 802e6c4:	10c00415 	stw	r3,16(r2)

   outbp = (struct bootp *)pkt->nb_prot;
 802e6c8:	e0bfff17 	ldw	r2,-4(fp)
 802e6cc:	10800317 	ldw	r2,12(r2)
 802e6d0:	e0bffe15 	stw	r2,-8(fp)
   MEMCPY(outbp, bp, bplen);
 802e6d4:	e1bffa17 	ldw	r6,-24(fp)
 802e6d8:	e17ffb17 	ldw	r5,-20(fp)
 802e6dc:	e13ffe17 	ldw	r4,-8(fp)
 802e6e0:	80037cc0 	call	80037cc <memcpy>
   outbp->op = BOOTREQUEST;
 802e6e4:	e0bffe17 	ldw	r2,-8(fp)
 802e6e8:	00c00044 	movi	r3,1
 802e6ec:	10c00005 	stb	r3,0(r2)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
 802e6f0:	e0bffe17 	ldw	r2,-8(fp)
 802e6f4:	10803c04 	addi	r2,r2,240
 802e6f8:	100b883a 	mov	r5,r2
 802e6fc:	01000d44 	movi	r4,53
 802e700:	802f2e40 	call	802f2e4 <find_opt>
 802e704:	e0bffd15 	stw	r2,-12(fp)
   opts += 2;     /* point to actual op code */
 802e708:	e0bffd17 	ldw	r2,-12(fp)
 802e70c:	10800084 	addi	r2,r2,2
 802e710:	e0bffd15 	stw	r2,-12(fp)
   *opts = DHCP_DECLINE;   /* overwrite op code */
 802e714:	e0bffd17 	ldw	r2,-12(fp)
 802e718:	00c00104 	movi	r3,4
 802e71c:	10c00005 	stb	r3,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
 802e720:	e0bfff17 	ldw	r2,-4(fp)
 802e724:	00ffffc4 	movi	r3,-1
 802e728:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller speced net */
 802e72c:	e0bffc17 	ldw	r2,-16(fp)
 802e730:	100690ba 	slli	r3,r2,2
 802e734:	008201b4 	movhi	r2,2054
 802e738:	1885883a 	add	r2,r3,r2
 802e73c:	10fdce17 	ldw	r3,-2248(r2)
 802e740:	e0bfff17 	ldw	r2,-4(fp)
 802e744:	10c00615 	stw	r3,24(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 802e748:	e1bfff17 	ldw	r6,-4(fp)
 802e74c:	01401104 	movi	r5,68
 802e750:	010010c4 	movi	r4,67
 802e754:	8047b340 	call	8047b34 <udp_send>
   dsc_declines++;   /* count declines sent */
 802e758:	d0a09117 	ldw	r2,-32188(gp)
 802e75c:	10800044 	addi	r2,r2,1
 802e760:	d0a09115 	stw	r2,-32188(gp)
   return 0;
 802e764:	0005883a 	mov	r2,zero
}
 802e768:	e037883a 	mov	sp,fp
 802e76c:	dfc00117 	ldw	ra,4(sp)
 802e770:	df000017 	ldw	fp,0(sp)
 802e774:	dec00204 	addi	sp,sp,8
 802e778:	f800283a 	ret

0802e77c <dh_getlong>:
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
 802e77c:	defffc04 	addi	sp,sp,-16
 802e780:	df000315 	stw	fp,12(sp)
 802e784:	df000304 	addi	fp,sp,12
 802e788:	e13ffd15 	stw	r4,-12(fp)
     long  v;
     u_char * p2 =  (u_char *)&v;
 802e78c:	e0bffe04 	addi	r2,fp,-8
 802e790:	e0bfff15 	stw	r2,-4(fp)

   *p2++ = *ptr++;
 802e794:	e0fffd17 	ldw	r3,-12(fp)
 802e798:	18800044 	addi	r2,r3,1
 802e79c:	e0bffd15 	stw	r2,-12(fp)
 802e7a0:	e0bfff17 	ldw	r2,-4(fp)
 802e7a4:	11000044 	addi	r4,r2,1
 802e7a8:	e13fff15 	stw	r4,-4(fp)
 802e7ac:	18c00003 	ldbu	r3,0(r3)
 802e7b0:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802e7b4:	e0fffd17 	ldw	r3,-12(fp)
 802e7b8:	18800044 	addi	r2,r3,1
 802e7bc:	e0bffd15 	stw	r2,-12(fp)
 802e7c0:	e0bfff17 	ldw	r2,-4(fp)
 802e7c4:	11000044 	addi	r4,r2,1
 802e7c8:	e13fff15 	stw	r4,-4(fp)
 802e7cc:	18c00003 	ldbu	r3,0(r3)
 802e7d0:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802e7d4:	e0fffd17 	ldw	r3,-12(fp)
 802e7d8:	18800044 	addi	r2,r3,1
 802e7dc:	e0bffd15 	stw	r2,-12(fp)
 802e7e0:	e0bfff17 	ldw	r2,-4(fp)
 802e7e4:	11000044 	addi	r4,r2,1
 802e7e8:	e13fff15 	stw	r4,-4(fp)
 802e7ec:	18c00003 	ldbu	r3,0(r3)
 802e7f0:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802e7f4:	e0fffd17 	ldw	r3,-12(fp)
 802e7f8:	18800044 	addi	r2,r3,1
 802e7fc:	e0bffd15 	stw	r2,-12(fp)
 802e800:	e0bfff17 	ldw	r2,-4(fp)
 802e804:	11000044 	addi	r4,r2,1
 802e808:	e13fff15 	stw	r4,-4(fp)
 802e80c:	18c00003 	ldbu	r3,0(r3)
 802e810:	10c00005 	stb	r3,0(r2)

   return v;
 802e814:	e0bffe17 	ldw	r2,-8(fp)
}
 802e818:	e037883a 	mov	sp,fp
 802e81c:	df000017 	ldw	fp,0(sp)
 802e820:	dec00104 	addi	sp,sp,4
 802e824:	f800283a 	ret

0802e828 <dhc_extract_opts>:
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 802e828:	defff904 	addi	sp,sp,-28
 802e82c:	dfc00615 	stw	ra,24(sp)
 802e830:	df000515 	stw	fp,20(sp)
 802e834:	dc000415 	stw	r16,16(sp)
 802e838:	df000504 	addi	fp,sp,20
 802e83c:	e13ffc15 	stw	r4,-16(fp)
 802e840:	e17ffb15 	stw	r5,-20(fp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
 802e844:	e0bffb17 	ldw	r2,-20(fp)
 802e848:	10804e04 	addi	r2,r2,312
 802e84c:	e0bffe15 	stw	r2,-8(fp)
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 802e850:	e0bffc17 	ldw	r2,-16(fp)
 802e854:	10c00f24 	muli	r3,r2,60
 802e858:	008201b4 	movhi	r2,2054
 802e85c:	1885883a 	add	r2,r3,r2
 802e860:	103dfe15 	stw	zero,-2056(r2)
   dhc_states[iface].defgw = 0; 
 802e864:	e0bffc17 	ldw	r2,-16(fp)
 802e868:	10c00f24 	muli	r3,r2,60
 802e86c:	008201b4 	movhi	r2,2054
 802e870:	1885883a 	add	r2,r3,r2
 802e874:	103dff15 	stw	zero,-2052(r2)
   dhc_states[iface].lease = 0; 
 802e878:	e0bffc17 	ldw	r2,-16(fp)
 802e87c:	10c00f24 	muli	r3,r2,60
 802e880:	008201b4 	movhi	r2,2054
 802e884:	1885883a 	add	r2,r3,r2
 802e888:	103df915 	stw	zero,-2076(r2)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 802e88c:	00007006 	br	802ea50 <dhc_extract_opts+0x228>
   {
      switch (*opts++)
 802e890:	e0bffb17 	ldw	r2,-20(fp)
 802e894:	10c00044 	addi	r3,r2,1
 802e898:	e0fffb15 	stw	r3,-20(fp)
 802e89c:	10800003 	ldbu	r2,0(r2)
 802e8a0:	10803fcc 	andi	r2,r2,255
 802e8a4:	10c03fe0 	cmpeqi	r3,r2,255
 802e8a8:	1800121e 	bne	r3,zero,802e8f4 <dhc_extract_opts+0xcc>
 802e8ac:	10c04008 	cmpgei	r3,r2,256
 802e8b0:	18005f1e 	bne	r3,zero,802ea30 <dhc_extract_opts+0x208>
 802e8b4:	10c00ce0 	cmpeqi	r3,r2,51
 802e8b8:	1800341e 	bne	r3,zero,802e98c <dhc_extract_opts+0x164>
 802e8bc:	10c00d08 	cmpgei	r3,r2,52
 802e8c0:	18005b1e 	bne	r3,zero,802ea30 <dhc_extract_opts+0x208>
 802e8c4:	10c001a0 	cmpeqi	r3,r2,6
 802e8c8:	18004f1e 	bne	r3,zero,802ea08 <dhc_extract_opts+0x1e0>
 802e8cc:	10c001c8 	cmpgei	r3,r2,7
 802e8d0:	1800571e 	bne	r3,zero,802ea30 <dhc_extract_opts+0x208>
 802e8d4:	10c000e0 	cmpeqi	r3,r2,3
 802e8d8:	1800171e 	bne	r3,zero,802e938 <dhc_extract_opts+0x110>
 802e8dc:	10c00108 	cmpgei	r3,r2,4
 802e8e0:	1800531e 	bne	r3,zero,802ea30 <dhc_extract_opts+0x208>
 802e8e4:	10005a26 	beq	r2,zero,802ea50 <dhc_extract_opts+0x228>
 802e8e8:	10800060 	cmpeqi	r2,r2,1
 802e8ec:	1000031e 	bne	r2,zero,802e8fc <dhc_extract_opts+0xd4>
 802e8f0:	00004f06 	br	802ea30 <dhc_extract_opts+0x208>
      {
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
 802e8f4:	0005883a 	mov	r2,zero
 802e8f8:	00005a06 	br	802ea64 <dhc_extract_opts+0x23c>
      case DHOP_SNMASK:
         opts++;
 802e8fc:	e0bffb17 	ldw	r2,-20(fp)
 802e900:	10800044 	addi	r2,r2,1
 802e904:	e0bffb15 	stw	r2,-20(fp)
         dhc_states[iface].snmask = dh_getlong(opts);
 802e908:	e13ffb17 	ldw	r4,-20(fp)
 802e90c:	802e77c0 	call	802e77c <dh_getlong>
 802e910:	1009883a 	mov	r4,r2
 802e914:	e0bffc17 	ldw	r2,-16(fp)
 802e918:	10c00f24 	muli	r3,r2,60
 802e91c:	008201b4 	movhi	r2,2054
 802e920:	1885883a 	add	r2,r3,r2
 802e924:	113dfe15 	stw	r4,-2056(r2)
         opts += 4;
 802e928:	e0bffb17 	ldw	r2,-20(fp)
 802e92c:	10800104 	addi	r2,r2,4
 802e930:	e0bffb15 	stw	r2,-20(fp)
         break;
 802e934:	00004606 	br	802ea50 <dhc_extract_opts+0x228>
      case DHOP_ROUTER:
         optlen = *opts++;
 802e938:	e0bffb17 	ldw	r2,-20(fp)
 802e93c:	10c00044 	addi	r3,r2,1
 802e940:	e0fffb15 	stw	r3,-20(fp)
 802e944:	10800003 	ldbu	r2,0(r2)
 802e948:	e0bffdc5 	stb	r2,-9(fp)
         if (optlen >= 4)
 802e94c:	e0bffdc3 	ldbu	r2,-9(fp)
 802e950:	10800130 	cmpltui	r2,r2,4
 802e954:	1000081e 	bne	r2,zero,802e978 <dhc_extract_opts+0x150>
            dhc_states[iface].defgw = dh_getlong(opts);
 802e958:	e13ffb17 	ldw	r4,-20(fp)
 802e95c:	802e77c0 	call	802e77c <dh_getlong>
 802e960:	1009883a 	mov	r4,r2
 802e964:	e0bffc17 	ldw	r2,-16(fp)
 802e968:	10c00f24 	muli	r3,r2,60
 802e96c:	008201b4 	movhi	r2,2054
 802e970:	1885883a 	add	r2,r3,r2
 802e974:	113dff15 	stw	r4,-2052(r2)
         opts += optlen;
 802e978:	e0bffdc3 	ldbu	r2,-9(fp)
 802e97c:	e0fffb17 	ldw	r3,-20(fp)
 802e980:	1885883a 	add	r2,r3,r2
 802e984:	e0bffb15 	stw	r2,-20(fp)
         break;
 802e988:	00003106 	br	802ea50 <dhc_extract_opts+0x228>
      case DHOP_LEASE:
         opts++;
 802e98c:	e0bffb17 	ldw	r2,-20(fp)
 802e990:	10800044 	addi	r2,r2,1
 802e994:	e0bffb15 	stw	r2,-20(fp)
         dhc_states[iface].lease = htonl(dh_getlong(opts));
 802e998:	e13ffb17 	ldw	r4,-20(fp)
 802e99c:	802e77c0 	call	802e77c <dh_getlong>
 802e9a0:	1005d63a 	srai	r2,r2,24
 802e9a4:	14003fcc 	andi	r16,r2,255
 802e9a8:	e13ffb17 	ldw	r4,-20(fp)
 802e9ac:	802e77c0 	call	802e77c <dh_getlong>
 802e9b0:	1005d23a 	srai	r2,r2,8
 802e9b4:	10bfc00c 	andi	r2,r2,65280
 802e9b8:	80a0b03a 	or	r16,r16,r2
 802e9bc:	e13ffb17 	ldw	r4,-20(fp)
 802e9c0:	802e77c0 	call	802e77c <dh_getlong>
 802e9c4:	1004923a 	slli	r2,r2,8
 802e9c8:	10803fec 	andhi	r2,r2,255
 802e9cc:	80a0b03a 	or	r16,r16,r2
 802e9d0:	e13ffb17 	ldw	r4,-20(fp)
 802e9d4:	802e77c0 	call	802e77c <dh_getlong>
 802e9d8:	1004963a 	slli	r2,r2,24
 802e9dc:	8084b03a 	or	r2,r16,r2
 802e9e0:	1009883a 	mov	r4,r2
 802e9e4:	e0bffc17 	ldw	r2,-16(fp)
 802e9e8:	10c00f24 	muli	r3,r2,60
 802e9ec:	008201b4 	movhi	r2,2054
 802e9f0:	1885883a 	add	r2,r3,r2
 802e9f4:	113df915 	stw	r4,-2076(r2)
         opts += 4;
 802e9f8:	e0bffb17 	ldw	r2,-20(fp)
 802e9fc:	10800104 	addi	r2,r2,4
 802ea00:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ea04:	00001206 	br	802ea50 <dhc_extract_opts+0x228>
      case DHOP_DNSRV:
         optlen = *opts++;
 802ea08:	e0bffb17 	ldw	r2,-20(fp)
 802ea0c:	10c00044 	addi	r3,r2,1
 802ea10:	e0fffb15 	stw	r3,-20(fp)
 802ea14:	10800003 	ldbu	r2,0(r2)
 802ea18:	e0bffdc5 	stb	r2,-9(fp)
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
 802ea1c:	e0bffdc3 	ldbu	r2,-9(fp)
 802ea20:	e0fffb17 	ldw	r3,-20(fp)
 802ea24:	1885883a 	add	r2,r3,r2
 802ea28:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ea2c:	00000806 	br	802ea50 <dhc_extract_opts+0x228>
      default:
         opts += ((*opts) + 1);
 802ea30:	e0bffb17 	ldw	r2,-20(fp)
 802ea34:	10800003 	ldbu	r2,0(r2)
 802ea38:	10803fcc 	andi	r2,r2,255
 802ea3c:	10800044 	addi	r2,r2,1
 802ea40:	e0fffb17 	ldw	r3,-20(fp)
 802ea44:	1885883a 	add	r2,r3,r2
 802ea48:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ea4c:	0001883a 	nop
   while (opts <= end)
 802ea50:	e0bffb17 	ldw	r2,-20(fp)
 802ea54:	e0fffe17 	ldw	r3,-8(fp)
 802ea58:	18bf8d2e 	bgeu	r3,r2,802e890 <dhc_extract_opts+0x68>
      }
   }
   dtrap();
 802ea5c:	80301a80 	call	80301a8 <dtrap>
   return -1;
 802ea60:	00bfffc4 	movi	r2,-1
}
 802ea64:	e6ffff04 	addi	sp,fp,-4
 802ea68:	dfc00217 	ldw	ra,8(sp)
 802ea6c:	df000117 	ldw	fp,4(sp)
 802ea70:	dc000017 	ldw	r16,0(sp)
 802ea74:	dec00304 	addi	sp,sp,12
 802ea78:	f800283a 	ret

0802ea7c <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
 802ea7c:	defffa04 	addi	sp,sp,-24
 802ea80:	dfc00515 	stw	ra,20(sp)
 802ea84:	df000415 	stw	fp,16(sp)
 802ea88:	df000404 	addi	fp,sp,16
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 802ea8c:	e03fff15 	stw	zero,-4(fp)
 802ea90:	00012106 	br	802ef18 <dhc_second+0x49c>
   {
      switch (dhc_states[iface].state)
 802ea94:	e0bfff17 	ldw	r2,-4(fp)
 802ea98:	10c00f24 	muli	r3,r2,60
 802ea9c:	008201b4 	movhi	r2,2054
 802eaa0:	1885883a 	add	r2,r3,r2
 802eaa4:	10bdf417 	ldw	r2,-2096(r2)
 802eaa8:	10c00268 	cmpgeui	r3,r2,9
 802eaac:	18010e1e 	bne	r3,zero,802eee8 <dhc_second+0x46c>
 802eab0:	100690ba 	slli	r3,r2,2
 802eab4:	008200f4 	movhi	r2,2051
 802eab8:	1885883a 	add	r2,r3,r2
 802eabc:	10bab117 	ldw	r2,-5436(r2)
 802eac0:	1000683a 	jmp	r2
 802eac4:	0802eee8 	cmpgeui	zero,at,3003
 802eac8:	0802eae8 	cmpgeui	zero,at,2987
 802eacc:	0802eb18 	cmpnei	zero,at,2988
 802ead0:	0802eb48 	cmpgei	zero,at,2989
 802ead4:	0802eb48 	cmpgei	zero,at,2989
 802ead8:	0802eb48 	cmpgei	zero,at,2989
 802eadc:	0802ed48 	cmpgei	zero,at,2997
 802eae0:	0802edd8 	cmpnei	zero,at,2999
 802eae4:	0802ec54 	ori	zero,at,2993
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
 802eae8:	e13fff17 	ldw	r4,-4(fp)
 802eaec:	802d5340 	call	802d534 <dhc_discover>
 802eaf0:	e0bffc15 	stw	r2,-16(fp)
         /* Error while sending a discover packet */
         if (e)
 802eaf4:	e0bffc17 	ldw	r2,-16(fp)
 802eaf8:	10000326 	beq	r2,zero,802eb08 <dhc_second+0x8c>
         {
            dtrap();
 802eafc:	80301a80 	call	80301a8 <dtrap>
            return e;
 802eb00:	e0bffc17 	ldw	r2,-16(fp)
 802eb04:	00010806 	br	802ef28 <dhc_second+0x4ac>
         }
         dhc_set_state(iface,DHCS_SELECTING);
 802eb08:	01400104 	movi	r5,4
 802eb0c:	e13fff17 	ldw	r4,-4(fp)
 802eb10:	802f2500 	call	802f250 <dhc_set_state>
         break;
 802eb14:	0000fd06 	br	802ef0c <dhc_second+0x490>
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
 802eb18:	e13fff17 	ldw	r4,-4(fp)
 802eb1c:	802efb80 	call	802efb8 <dhc_reclaim>
 802eb20:	e0bffc15 	stw	r2,-16(fp)
         if (e)
 802eb24:	e0bffc17 	ldw	r2,-16(fp)
 802eb28:	10000326 	beq	r2,zero,802eb38 <dhc_second+0xbc>
         {
            dtrap();
 802eb2c:	80301a80 	call	80301a8 <dtrap>
            return e;
 802eb30:	e0bffc17 	ldw	r2,-16(fp)
 802eb34:	0000fc06 	br	802ef28 <dhc_second+0x4ac>
         }
         dhc_set_state(iface,DHCS_REBOOTING);
 802eb38:	014000c4 	movi	r5,3
 802eb3c:	e13fff17 	ldw	r4,-4(fp)
 802eb40:	802f2500 	call	802f250 <dhc_set_state>
         break;
 802eb44:	0000f106 	br	802ef0c <dhc_second+0x490>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
 802eb48:	e0bfff17 	ldw	r2,-4(fp)
 802eb4c:	10c00f24 	muli	r3,r2,60
 802eb50:	008201b4 	movhi	r2,2054
 802eb54:	1885883a 	add	r2,r3,r2
 802eb58:	10bdf517 	ldw	r2,-2092(r2)
 802eb5c:	e0bffe15 	stw	r2,-8(fp)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
 802eb60:	e0bffe17 	ldw	r2,-8(fp)
 802eb64:	10800110 	cmplti	r2,r2,4
 802eb68:	1000021e 	bne	r2,zero,802eb74 <dhc_second+0xf8>
            tries= DHC_MAX_TRIES;
 802eb6c:	00800104 	movi	r2,4
 802eb70:	e0bffe15 	stw	r2,-8(fp)
         if ( cticks > (dhc_states[iface].last_tick + 
 802eb74:	e0bfff17 	ldw	r2,-4(fp)
 802eb78:	10c00f24 	muli	r3,r2,60
 802eb7c:	008201b4 	movhi	r2,2054
 802eb80:	1885883a 	add	r2,r3,r2
 802eb84:	10fdf817 	ldw	r3,-2080(r2)
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
 802eb88:	01006404 	movi	r4,400
 802eb8c:	e0bffe17 	ldw	r2,-8(fp)
 802eb90:	2084983a 	sll	r2,r4,r2
         if ( cticks > (dhc_states[iface].last_tick + 
 802eb94:	1887883a 	add	r3,r3,r2
 802eb98:	d0a0a317 	ldw	r2,-32116(gp)
 802eb9c:	1880192e 	bgeu	r3,r2,802ec04 <dhc_second+0x188>
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
 802eba0:	e0bfff17 	ldw	r2,-4(fp)
 802eba4:	10c00f24 	muli	r3,r2,60
 802eba8:	008201b4 	movhi	r2,2054
 802ebac:	1885883a 	add	r2,r3,r2
 802ebb0:	10bdf417 	ldw	r2,-2096(r2)
 802ebb4:	10c00160 	cmpeqi	r3,r2,5
 802ebb8:	1800091e 	bne	r3,zero,802ebe0 <dhc_second+0x164>
 802ebbc:	10c001a8 	cmpgeui	r3,r2,6
 802ebc0:	18000e1e 	bne	r3,zero,802ebfc <dhc_second+0x180>
 802ebc4:	10c000e0 	cmpeqi	r3,r2,3
 802ebc8:	1800091e 	bne	r3,zero,802ebf0 <dhc_second+0x174>
 802ebcc:	10800118 	cmpnei	r2,r2,4
 802ebd0:	10000a1e 	bne	r2,zero,802ebfc <dhc_second+0x180>
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
 802ebd4:	e13fff17 	ldw	r4,-4(fp)
 802ebd8:	802d5340 	call	802d534 <dhc_discover>
               break;
 802ebdc:	00000a06 	br	802ec08 <dhc_second+0x18c>
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
 802ebe0:	000b883a 	mov	r5,zero
 802ebe4:	e13fff17 	ldw	r4,-4(fp)
 802ebe8:	802da500 	call	802da50 <dhc_request>
               break;
 802ebec:	00000606 	br	802ec08 <dhc_second+0x18c>
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
 802ebf0:	e13fff17 	ldw	r4,-4(fp)
 802ebf4:	802efb80 	call	802efb8 <dhc_reclaim>
               break;
 802ebf8:	00000306 	br	802ec08 <dhc_second+0x18c>
            default:
               dtrap(); /* bogus state */
 802ebfc:	80301a80 	call	80301a8 <dtrap>
               break;
 802ec00:	00000106 	br	802ec08 <dhc_second+0x18c>
            }
         }
 802ec04:	0001883a 	nop
         if ( tries == DHC_MAX_TRIES && 
 802ec08:	e0bffe17 	ldw	r2,-8(fp)
 802ec0c:	10800118 	cmpnei	r2,r2,4
 802ec10:	1000b71e 	bne	r2,zero,802eef0 <dhc_second+0x474>
             (dhc_states[iface].state !=DHCS_SELECTING) )
 802ec14:	e0bfff17 	ldw	r2,-4(fp)
 802ec18:	10c00f24 	muli	r3,r2,60
 802ec1c:	008201b4 	movhi	r2,2054
 802ec20:	1885883a 	add	r2,r3,r2
 802ec24:	10bdf417 	ldw	r2,-2096(r2)
         if ( tries == DHC_MAX_TRIES && 
 802ec28:	10800120 	cmpeqi	r2,r2,4
 802ec2c:	1000b01e 	bne	r2,zero,802eef0 <dhc_second+0x474>
         {
            /* We have tried enough. Restart from INIT state */
            dhc_set_state(iface,DHCS_RESTARTING);
 802ec30:	01400244 	movi	r5,9
 802ec34:	e13fff17 	ldw	r4,-4(fp)
 802ec38:	802f2500 	call	802f250 <dhc_set_state>
            dhc_resetip(iface);
 802ec3c:	e13fff17 	ldw	r4,-4(fp)
 802ec40:	802e5c80 	call	802e5c8 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 802ec44:	01400044 	movi	r5,1
 802ec48:	e13fff17 	ldw	r4,-4(fp)
 802ec4c:	802f2500 	call	802f250 <dhc_set_state>
         }
         break;
 802ec50:	0000a706 	br	802eef0 <dhc_second+0x474>
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
 802ec54:	e0bfff17 	ldw	r2,-4(fp)
 802ec58:	10c00f24 	muli	r3,r2,60
 802ec5c:	008201b4 	movhi	r2,2054
 802ec60:	1885883a 	add	r2,r3,r2
 802ec64:	10bdf917 	ldw	r2,-2076(r2)
 802ec68:	10c01924 	muli	r3,r2,100
 802ec6c:	e0bfff17 	ldw	r2,-4(fp)
 802ec70:	11000f24 	muli	r4,r2,60
 802ec74:	008201b4 	movhi	r2,2054
 802ec78:	2085883a 	add	r2,r4,r2
 802ec7c:	10bdfc17 	ldw	r2,-2064(r2)
 802ec80:	1885883a 	add	r2,r3,r2
 802ec84:	d0e0a317 	ldw	r3,-32116(gp)
 802ec88:	1880262e 	bgeu	r3,r2,802ed24 <dhc_second+0x2a8>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
 802ec8c:	e0bfff17 	ldw	r2,-4(fp)
 802ec90:	10c00f24 	muli	r3,r2,60
 802ec94:	008201b4 	movhi	r2,2054
 802ec98:	1885883a 	add	r2,r3,r2
 802ec9c:	10fdfc17 	ldw	r3,-2064(r2)
             dhc_states[iface].lease*TPS - 
 802eca0:	e0bfff17 	ldw	r2,-4(fp)
 802eca4:	11000f24 	muli	r4,r2,60
 802eca8:	008201b4 	movhi	r2,2054
 802ecac:	2085883a 	add	r2,r4,r2
 802ecb0:	10bdf917 	ldw	r2,-2076(r2)
 802ecb4:	10801924 	muli	r2,r2,100
            half_time = (dhc_states[iface].lease_start + 
 802ecb8:	1887883a 	add	r3,r3,r2
             dhc_states[iface].last_tick)/2;
 802ecbc:	e0bfff17 	ldw	r2,-4(fp)
 802ecc0:	11000f24 	muli	r4,r2,60
 802ecc4:	008201b4 	movhi	r2,2054
 802ecc8:	2085883a 	add	r2,r4,r2
 802eccc:	10bdf817 	ldw	r2,-2080(r2)
             dhc_states[iface].lease*TPS - 
 802ecd0:	1885c83a 	sub	r2,r3,r2
            half_time = (dhc_states[iface].lease_start + 
 802ecd4:	1004d07a 	srli	r2,r2,1
 802ecd8:	e0bffd15 	stw	r2,-12(fp)

            if ( half_time < 60*TPS )
 802ecdc:	e0bffd17 	ldw	r2,-12(fp)
 802ece0:	1085dc28 	cmpgeui	r2,r2,6000
 802ece4:	1000021e 	bne	r2,zero,802ecf0 <dhc_second+0x274>
               half_time = 60*TPS;
 802ece8:	0085dc04 	movi	r2,6000
 802ecec:	e0bffd15 	stw	r2,-12(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 802ecf0:	e0bfff17 	ldw	r2,-4(fp)
 802ecf4:	10c00f24 	muli	r3,r2,60
 802ecf8:	008201b4 	movhi	r2,2054
 802ecfc:	1885883a 	add	r2,r3,r2
 802ed00:	10fdf817 	ldw	r3,-2080(r2)
 802ed04:	e0bffd17 	ldw	r2,-12(fp)
 802ed08:	1887883a 	add	r3,r3,r2
 802ed0c:	d0a0a317 	ldw	r2,-32116(gp)
 802ed10:	1880792e 	bgeu	r3,r2,802eef8 <dhc_second+0x47c>
            {
               dhc_request(iface,FALSE);
 802ed14:	000b883a 	mov	r5,zero
 802ed18:	e13fff17 	ldw	r4,-4(fp)
 802ed1c:	802da500 	call	802da50 <dhc_request>
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
            dhc_resetip(iface);
            dhc_set_state(iface,DHCS_INIT);
         }
         break;
 802ed20:	00007506 	br	802eef8 <dhc_second+0x47c>
            dhc_set_state(iface,DHCS_RESTARTING);
 802ed24:	01400244 	movi	r5,9
 802ed28:	e13fff17 	ldw	r4,-4(fp)
 802ed2c:	802f2500 	call	802f250 <dhc_set_state>
            dhc_resetip(iface);
 802ed30:	e13fff17 	ldw	r4,-4(fp)
 802ed34:	802e5c80 	call	802e5c8 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 802ed38:	01400044 	movi	r5,1
 802ed3c:	e13fff17 	ldw	r4,-4(fp)
 802ed40:	802f2500 	call	802f250 <dhc_set_state>
         break;
 802ed44:	00006c06 	br	802eef8 <dhc_second+0x47c>

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 802ed48:	e0bfff17 	ldw	r2,-4(fp)
 802ed4c:	10c00f24 	muli	r3,r2,60
 802ed50:	008201b4 	movhi	r2,2054
 802ed54:	1885883a 	add	r2,r3,r2
 802ed58:	10bdfa17 	ldw	r2,-2072(r2)
 802ed5c:	10bfffe0 	cmpeqi	r2,r2,-1
 802ed60:	1000671e 	bne	r2,zero,802ef00 <dhc_second+0x484>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
 802ed64:	e0bfff17 	ldw	r2,-4(fp)
 802ed68:	10c00f24 	muli	r3,r2,60
 802ed6c:	008201b4 	movhi	r2,2054
 802ed70:	1885883a 	add	r2,r3,r2
 802ed74:	10bdfa17 	ldw	r2,-2072(r2)
 802ed78:	10c01924 	muli	r3,r2,100
 802ed7c:	e0bfff17 	ldw	r2,-4(fp)
 802ed80:	11000f24 	muli	r4,r2,60
 802ed84:	008201b4 	movhi	r2,2054
 802ed88:	2085883a 	add	r2,r4,r2
 802ed8c:	10bdfc17 	ldw	r2,-2064(r2)
 802ed90:	1887883a 	add	r3,r3,r2
 802ed94:	d0a0a317 	ldw	r2,-32116(gp)
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 802ed98:	1880592e 	bgeu	r3,r2,802ef00 <dhc_second+0x484>
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
 802ed9c:	014001c4 	movi	r5,7
 802eda0:	e13fff17 	ldw	r4,-4(fp)
 802eda4:	802f2500 	call	802f250 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
 802eda8:	e13fff17 	ldw	r4,-4(fp)
 802edac:	802efb80 	call	802efb8 <dhc_reclaim>
 802edb0:	e0bffc15 	stw	r2,-16(fp)
            if (e)
 802edb4:	e0bffc17 	ldw	r2,-16(fp)
 802edb8:	10000326 	beq	r2,zero,802edc8 <dhc_second+0x34c>
            {
               dtrap();
 802edbc:	80301a80 	call	80301a8 <dtrap>
               return e;
 802edc0:	e0bffc17 	ldw	r2,-16(fp)
 802edc4:	00005806 	br	802ef28 <dhc_second+0x4ac>
            }
            dsc_renew++;
 802edc8:	d0a09417 	ldw	r2,-32176(gp)
 802edcc:	10800044 	addi	r2,r2,1
 802edd0:	d0a09415 	stw	r2,-32176(gp)
         }
         break;
 802edd4:	00004a06 	br	802ef00 <dhc_second+0x484>
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
 802edd8:	e0bfff17 	ldw	r2,-4(fp)
 802eddc:	10c00f24 	muli	r3,r2,60
 802ede0:	008201b4 	movhi	r2,2054
 802ede4:	1885883a 	add	r2,r3,r2
 802ede8:	10bdfb17 	ldw	r2,-2068(r2)
 802edec:	10c01924 	muli	r3,r2,100
 802edf0:	e0bfff17 	ldw	r2,-4(fp)
 802edf4:	11000f24 	muli	r4,r2,60
 802edf8:	008201b4 	movhi	r2,2054
 802edfc:	2085883a 	add	r2,r4,r2
 802ee00:	10bdfc17 	ldw	r2,-2064(r2)
 802ee04:	1885883a 	add	r2,r3,r2
 802ee08:	d0e0a317 	ldw	r3,-32116(gp)
 802ee0c:	1880262e 	bgeu	r3,r2,802eea8 <dhc_second+0x42c>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
 802ee10:	e0bfff17 	ldw	r2,-4(fp)
 802ee14:	10c00f24 	muli	r3,r2,60
 802ee18:	008201b4 	movhi	r2,2054
 802ee1c:	1885883a 	add	r2,r3,r2
 802ee20:	10fdfc17 	ldw	r3,-2064(r2)
             dhc_states[iface].t2*TPS - 
 802ee24:	e0bfff17 	ldw	r2,-4(fp)
 802ee28:	11000f24 	muli	r4,r2,60
 802ee2c:	008201b4 	movhi	r2,2054
 802ee30:	2085883a 	add	r2,r4,r2
 802ee34:	10bdfb17 	ldw	r2,-2068(r2)
 802ee38:	10801924 	muli	r2,r2,100
            half_time = (dhc_states[iface].lease_start +
 802ee3c:	1887883a 	add	r3,r3,r2
             dhc_states[iface].last_tick)/2;
 802ee40:	e0bfff17 	ldw	r2,-4(fp)
 802ee44:	11000f24 	muli	r4,r2,60
 802ee48:	008201b4 	movhi	r2,2054
 802ee4c:	2085883a 	add	r2,r4,r2
 802ee50:	10bdf817 	ldw	r2,-2080(r2)
             dhc_states[iface].t2*TPS - 
 802ee54:	1885c83a 	sub	r2,r3,r2
            half_time = (dhc_states[iface].lease_start +
 802ee58:	1004d07a 	srli	r2,r2,1
 802ee5c:	e0bffd15 	stw	r2,-12(fp)

            if ( half_time < 60*TPS )
 802ee60:	e0bffd17 	ldw	r2,-12(fp)
 802ee64:	1085dc28 	cmpgeui	r2,r2,6000
 802ee68:	1000021e 	bne	r2,zero,802ee74 <dhc_second+0x3f8>
               half_time = 60*TPS;
 802ee6c:	0085dc04 	movi	r2,6000
 802ee70:	e0bffd15 	stw	r2,-12(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 802ee74:	e0bfff17 	ldw	r2,-4(fp)
 802ee78:	10c00f24 	muli	r3,r2,60
 802ee7c:	008201b4 	movhi	r2,2054
 802ee80:	1885883a 	add	r2,r3,r2
 802ee84:	10fdf817 	ldw	r3,-2080(r2)
 802ee88:	e0bffd17 	ldw	r2,-12(fp)
 802ee8c:	1887883a 	add	r3,r3,r2
 802ee90:	d0a0a317 	ldw	r2,-32116(gp)
 802ee94:	18801c2e 	bgeu	r3,r2,802ef08 <dhc_second+0x48c>
            {
               dhc_request(iface,FALSE);
 802ee98:	000b883a 	mov	r5,zero
 802ee9c:	e13fff17 	ldw	r4,-4(fp)
 802eea0:	802da500 	call	802da50 <dhc_request>
               dtrap();
               return e;
            }
            dsc_rebind++;
         }
         break;
 802eea4:	00001806 	br	802ef08 <dhc_second+0x48c>
            dhc_set_state(iface,DHCS_REBINDING);
 802eea8:	01400204 	movi	r5,8
 802eeac:	e13fff17 	ldw	r4,-4(fp)
 802eeb0:	802f2500 	call	802f250 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
 802eeb4:	01400044 	movi	r5,1
 802eeb8:	e13fff17 	ldw	r4,-4(fp)
 802eebc:	802da500 	call	802da50 <dhc_request>
 802eec0:	e0bffc15 	stw	r2,-16(fp)
            if (e)
 802eec4:	e0bffc17 	ldw	r2,-16(fp)
 802eec8:	10000326 	beq	r2,zero,802eed8 <dhc_second+0x45c>
               dtrap();
 802eecc:	80301a80 	call	80301a8 <dtrap>
               return e;
 802eed0:	e0bffc17 	ldw	r2,-16(fp)
 802eed4:	00001406 	br	802ef28 <dhc_second+0x4ac>
            dsc_rebind++;
 802eed8:	d0a09517 	ldw	r2,-32172(gp)
 802eedc:	10800044 	addi	r2,r2,1
 802eee0:	d0a09515 	stw	r2,-32172(gp)
         break;
 802eee4:	00000806 	br	802ef08 <dhc_second+0x48c>
      case DHCS_UNUSED:
      default:
         continue;
 802eee8:	0001883a 	nop
 802eeec:	00000706 	br	802ef0c <dhc_second+0x490>
         break;
 802eef0:	0001883a 	nop
 802eef4:	00000506 	br	802ef0c <dhc_second+0x490>
         break;
 802eef8:	0001883a 	nop
 802eefc:	00000306 	br	802ef0c <dhc_second+0x490>
         break;
 802ef00:	0001883a 	nop
 802ef04:	00000106 	br	802ef0c <dhc_second+0x490>
         break;
 802ef08:	0001883a 	nop
   for (iface = 0; iface < MAXNETS; iface++)
 802ef0c:	e0bfff17 	ldw	r2,-4(fp)
 802ef10:	10800044 	addi	r2,r2,1
 802ef14:	e0bfff15 	stw	r2,-4(fp)
 802ef18:	e0bfff17 	ldw	r2,-4(fp)
 802ef1c:	10800110 	cmplti	r2,r2,4
 802ef20:	103edc1e 	bne	r2,zero,802ea94 <dhc_second+0x18>
      }
   }
   return 0;
 802ef24:	0005883a 	mov	r2,zero
}
 802ef28:	e037883a 	mov	sp,fp
 802ef2c:	dfc00117 	ldw	ra,4(sp)
 802ef30:	df000017 	ldw	fp,0(sp)
 802ef34:	dec00204 	addi	sp,sp,8
 802ef38:	f800283a 	ret

0802ef3c <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
 802ef3c:	defffd04 	addi	sp,sp,-12
 802ef40:	dfc00215 	stw	ra,8(sp)
 802ef44:	df000115 	stw	fp,4(sp)
 802ef48:	df000104 	addi	fp,sp,4
 802ef4c:	e13fff15 	stw	r4,-4(fp)
   if (iface < 0 || iface > MAXNETS)
 802ef50:	e0bfff17 	ldw	r2,-4(fp)
 802ef54:	10000316 	blt	r2,zero,802ef64 <dhc_halt+0x28>
 802ef58:	e0bfff17 	ldw	r2,-4(fp)
 802ef5c:	10800150 	cmplti	r2,r2,5
 802ef60:	1000021e 	bne	r2,zero,802ef6c <dhc_halt+0x30>
   {
      dtrap();
 802ef64:	80301a80 	call	80301a8 <dtrap>
      return;
 802ef68:	00000e06 	br	802efa4 <dhc_halt+0x68>
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 802ef6c:	e0bfff17 	ldw	r2,-4(fp)
 802ef70:	10c00f24 	muli	r3,r2,60
 802ef74:	008201b4 	movhi	r2,2054
 802ef78:	10bdf404 	addi	r2,r2,-2096
 802ef7c:	1885883a 	add	r2,r3,r2
 802ef80:	01800f04 	movi	r6,60
 802ef84:	000b883a 	mov	r5,zero
 802ef88:	1009883a 	mov	r4,r2
 802ef8c:	80038cc0 	call	80038cc <memset>
   dhc_states[iface].state = DHCS_UNUSED;
 802ef90:	e0bfff17 	ldw	r2,-4(fp)
 802ef94:	10c00f24 	muli	r3,r2,60
 802ef98:	008201b4 	movhi	r2,2054
 802ef9c:	1885883a 	add	r2,r3,r2
 802efa0:	103df415 	stw	zero,-2096(r2)
}
 802efa4:	e037883a 	mov	sp,fp
 802efa8:	dfc00117 	ldw	ra,4(sp)
 802efac:	df000017 	ldw	fp,0(sp)
 802efb0:	dec00204 	addi	sp,sp,8
 802efb4:	f800283a 	ret

0802efb8 <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
 802efb8:	defffc04 	addi	sp,sp,-16
 802efbc:	dfc00315 	stw	ra,12(sp)
 802efc0:	df000215 	stw	fp,8(sp)
 802efc4:	df000204 	addi	fp,sp,8
 802efc8:	e13fff15 	stw	r4,-4(fp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 802efcc:	e0bfff17 	ldw	r2,-4(fp)
 802efd0:	100690ba 	slli	r3,r2,2
 802efd4:	008201b4 	movhi	r2,2054
 802efd8:	1885883a 	add	r2,r3,r2
 802efdc:	10bdce17 	ldw	r2,-2248(r2)
 802efe0:	10800a17 	ldw	r2,40(r2)
 802efe4:	1000031e 	bne	r2,zero,802eff4 <dhc_reclaim+0x3c>
   {
      dtrap();    /* programming bug? */
 802efe8:	80301a80 	call	80301a8 <dtrap>
      return ENP_LOGIC;
 802efec:	00bffd44 	movi	r2,-11
 802eff0:	00004406 	br	802f104 <dhc_reclaim+0x14c>
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 802eff4:	e0bfff17 	ldw	r2,-4(fp)
 802eff8:	100690ba 	slli	r3,r2,2
 802effc:	008201b4 	movhi	r2,2054
 802f000:	1885883a 	add	r2,r3,r2
 802f004:	10bdce17 	ldw	r2,-2248(r2)
 802f008:	10c00a17 	ldw	r3,40(r2)
 802f00c:	e0bfff17 	ldw	r2,-4(fp)
 802f010:	11000f24 	muli	r4,r2,60
 802f014:	008201b4 	movhi	r2,2054
 802f018:	2085883a 	add	r2,r4,r2
 802f01c:	10fdfd15 	stw	r3,-2060(r2)
   dhc_states[iface].snmask = nets[iface]->snmask;
 802f020:	e0bfff17 	ldw	r2,-4(fp)
 802f024:	100690ba 	slli	r3,r2,2
 802f028:	008201b4 	movhi	r2,2054
 802f02c:	1885883a 	add	r2,r3,r2
 802f030:	10bdce17 	ldw	r2,-2248(r2)
 802f034:	10c00c17 	ldw	r3,48(r2)
 802f038:	e0bfff17 	ldw	r2,-4(fp)
 802f03c:	11000f24 	muli	r4,r2,60
 802f040:	008201b4 	movhi	r2,2054
 802f044:	2085883a 	add	r2,r4,r2
 802f048:	10fdfe15 	stw	r3,-2056(r2)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
 802f04c:	e0bfff17 	ldw	r2,-4(fp)
 802f050:	100690ba 	slli	r3,r2,2
 802f054:	008201b4 	movhi	r2,2054
 802f058:	1885883a 	add	r2,r3,r2
 802f05c:	10bdce17 	ldw	r2,-2248(r2)
 802f060:	10c00d17 	ldw	r3,52(r2)
 802f064:	e0bfff17 	ldw	r2,-4(fp)
 802f068:	11000f24 	muli	r4,r2,60
 802f06c:	008201b4 	movhi	r2,2054
 802f070:	2085883a 	add	r2,r4,r2
 802f074:	10fdff15 	stw	r3,-2052(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
 802f078:	e0bfff17 	ldw	r2,-4(fp)
 802f07c:	10c00f24 	muli	r3,r2,60
 802f080:	008201b4 	movhi	r2,2054
 802f084:	1885883a 	add	r2,r3,r2
 802f088:	10be0017 	ldw	r2,-2048(r2)
 802f08c:	10001a26 	beq	r2,zero,802f0f8 <dhc_reclaim+0x140>
   {
      if (dhc_states[iface].srv_ipaddr)
 802f090:	e0bfff17 	ldw	r2,-4(fp)
 802f094:	10c00f24 	muli	r3,r2,60
 802f098:	008201b4 	movhi	r2,2054
 802f09c:	1885883a 	add	r2,r3,r2
 802f0a0:	10be0117 	ldw	r2,-2044(r2)
 802f0a4:	10001326 	beq	r2,zero,802f0f4 <dhc_reclaim+0x13c>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
 802f0a8:	e0bfff17 	ldw	r2,-4(fp)
 802f0ac:	10c00f24 	muli	r3,r2,60
 802f0b0:	008201b4 	movhi	r2,2054
 802f0b4:	1885883a 	add	r2,r3,r2
 802f0b8:	113e0117 	ldw	r4,-2044(r2)
 802f0bc:	e0bfff17 	ldw	r2,-4(fp)
 802f0c0:	10c00f24 	muli	r3,r2,60
 802f0c4:	008201b4 	movhi	r2,2054
 802f0c8:	1885883a 	add	r2,r3,r2
 802f0cc:	10fe0017 	ldw	r3,-2048(r2)
 802f0d0:	00800084 	movi	r2,2
 802f0d4:	d8800015 	stw	r2,0(sp)
 802f0d8:	e1ffff17 	ldw	r7,-4(fp)
 802f0dc:	180d883a 	mov	r6,r3
 802f0e0:	017fffc4 	movi	r5,-1
 802f0e4:	8046f100 	call	8046f10 <add_route>
 802f0e8:	1000031e 	bne	r2,zero,802f0f8 <dhc_reclaim+0x140>
             dhc_states[iface].rly_ipaddr, iface, IPRP_LOCAL))
         {
            /* route was not added. check this case */
            dtrap(); 
 802f0ec:	80301a80 	call	80301a8 <dtrap>
 802f0f0:	00000106 	br	802f0f8 <dhc_reclaim+0x140>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
 802f0f4:	80301a80 	call	80301a8 <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 802f0f8:	01400044 	movi	r5,1
 802f0fc:	e13fff17 	ldw	r4,-4(fp)
 802f100:	802da500 	call	802da50 <dhc_request>
}
 802f104:	e037883a 	mov	sp,fp
 802f108:	dfc00117 	ldw	ra,4(sp)
 802f10c:	df000017 	ldw	fp,0(sp)
 802f110:	dec00204 	addi	sp,sp,8
 802f114:	f800283a 	ret

0802f118 <dhc_state_init>:
 * RETURNS: void
 */

void 
dhc_state_init(int iface, int init_flag)
{
 802f118:	defffb04 	addi	sp,sp,-20
 802f11c:	dfc00415 	stw	ra,16(sp)
 802f120:	df000315 	stw	fp,12(sp)
 802f124:	df000304 	addi	fp,sp,12
 802f128:	e13ffe15 	stw	r4,-8(fp)
 802f12c:	e17ffd15 	stw	r5,-12(fp)
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
 802f130:	e0bffd17 	ldw	r2,-12(fp)
 802f134:	10800058 	cmpnei	r2,r2,1
 802f138:	1000021e 	bne	r2,zero,802f144 <dhc_state_init+0x2c>
 802f13c:	00800044 	movi	r2,1
 802f140:	00000106 	br	802f148 <dhc_state_init+0x30>
 802f144:	00800084 	movi	r2,2
 802f148:	e0bfff15 	stw	r2,-4(fp)
   
   dhc_set_state(iface, state);
 802f14c:	e17fff17 	ldw	r5,-4(fp)
 802f150:	e13ffe17 	ldw	r4,-8(fp)
 802f154:	802f2500 	call	802f250 <dhc_set_state>
}
 802f158:	0001883a 	nop
 802f15c:	e037883a 	mov	sp,fp
 802f160:	dfc00117 	ldw	ra,4(sp)
 802f164:	df000017 	ldw	fp,0(sp)
 802f168:	dec00204 	addi	sp,sp,8
 802f16c:	f800283a 	ret

0802f170 <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
 802f170:	defffe04 	addi	sp,sp,-8
 802f174:	df000115 	stw	fp,4(sp)
 802f178:	df000104 	addi	fp,sp,4
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
 802f17c:	e03fff15 	stw	zero,-4(fp)
 802f180:	00001306 	br	802f1d0 <dhc_alldone+0x60>
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 802f184:	e0bfff17 	ldw	r2,-4(fp)
 802f188:	10c00f24 	muli	r3,r2,60
 802f18c:	008201b4 	movhi	r2,2054
 802f190:	1885883a 	add	r2,r3,r2
 802f194:	10bdf417 	ldw	r2,-2096(r2)
 802f198:	10000726 	beq	r2,zero,802f1b8 <dhc_alldone+0x48>
          ( dhc_states[i].state == DHCS_BOUND  )  )
 802f19c:	e0bfff17 	ldw	r2,-4(fp)
 802f1a0:	10c00f24 	muli	r3,r2,60
 802f1a4:	008201b4 	movhi	r2,2054
 802f1a8:	1885883a 	add	r2,r3,r2
 802f1ac:	10bdf417 	ldw	r2,-2096(r2)
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 802f1b0:	10800198 	cmpnei	r2,r2,6
 802f1b4:	1000041e 	bne	r2,zero,802f1c8 <dhc_alldone+0x58>
   for ( i=0 ; i < MAXNETS ; i++ )
 802f1b8:	e0bfff17 	ldw	r2,-4(fp)
 802f1bc:	10800044 	addi	r2,r2,1
 802f1c0:	e0bfff15 	stw	r2,-4(fp)
 802f1c4:	00000206 	br	802f1d0 <dhc_alldone+0x60>
      {
         continue ;
      }
      else
      {
         return FALSE ;
 802f1c8:	0005883a 	mov	r2,zero
 802f1cc:	00000406 	br	802f1e0 <dhc_alldone+0x70>
   for ( i=0 ; i < MAXNETS ; i++ )
 802f1d0:	e0bfff17 	ldw	r2,-4(fp)
 802f1d4:	10800110 	cmplti	r2,r2,4
 802f1d8:	103fea1e 	bne	r2,zero,802f184 <dhc_alldone+0x14>
      }
   }
   return TRUE ;
 802f1dc:	00800044 	movi	r2,1
}
 802f1e0:	e037883a 	mov	sp,fp
 802f1e4:	df000017 	ldw	fp,0(sp)
 802f1e8:	dec00104 	addi	sp,sp,4
 802f1ec:	f800283a 	ret

0802f1f0 <dhc_ifacedone>:
 * RETURNS: 
 */

int 
dhc_ifacedone(int iface)
{
 802f1f0:	defffe04 	addi	sp,sp,-8
 802f1f4:	df000115 	stw	fp,4(sp)
 802f1f8:	df000104 	addi	fp,sp,4
 802f1fc:	e13fff15 	stw	r4,-4(fp)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 802f200:	e0bfff17 	ldw	r2,-4(fp)
 802f204:	10c00f24 	muli	r3,r2,60
 802f208:	008201b4 	movhi	r2,2054
 802f20c:	1885883a 	add	r2,r3,r2
 802f210:	10bdf417 	ldw	r2,-2096(r2)
 802f214:	10000726 	beq	r2,zero,802f234 <dhc_ifacedone+0x44>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
 802f218:	e0bfff17 	ldw	r2,-4(fp)
 802f21c:	10c00f24 	muli	r3,r2,60
 802f220:	008201b4 	movhi	r2,2054
 802f224:	1885883a 	add	r2,r3,r2
 802f228:	10bdf417 	ldw	r2,-2096(r2)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 802f22c:	10800198 	cmpnei	r2,r2,6
 802f230:	1000021e 	bne	r2,zero,802f23c <dhc_ifacedone+0x4c>
   {
      return TRUE ;
 802f234:	00800044 	movi	r2,1
 802f238:	00000106 	br	802f240 <dhc_ifacedone+0x50>
   }
   else
   {
      return FALSE ;
 802f23c:	0005883a 	mov	r2,zero
   }
}
 802f240:	e037883a 	mov	sp,fp
 802f244:	df000017 	ldw	fp,0(sp)
 802f248:	dec00104 	addi	sp,sp,4
 802f24c:	f800283a 	ret

0802f250 <dhc_set_state>:
 *
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
 802f250:	defffc04 	addi	sp,sp,-16
 802f254:	dfc00315 	stw	ra,12(sp)
 802f258:	df000215 	stw	fp,8(sp)
 802f25c:	df000204 	addi	fp,sp,8
 802f260:	e13fff15 	stw	r4,-4(fp)
 802f264:	e17ffe15 	stw	r5,-8(fp)
   dhc_states[iface].state = state; /* Set the new state */
 802f268:	e0fffe17 	ldw	r3,-8(fp)
 802f26c:	e0bfff17 	ldw	r2,-4(fp)
 802f270:	11000f24 	muli	r4,r2,60
 802f274:	008201b4 	movhi	r2,2054
 802f278:	2085883a 	add	r2,r4,r2
 802f27c:	10fdf415 	stw	r3,-2096(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
 802f280:	e0bfff17 	ldw	r2,-4(fp)
 802f284:	10c00f24 	muli	r3,r2,60
 802f288:	008201b4 	movhi	r2,2054
 802f28c:	1885883a 	add	r2,r3,r2
 802f290:	103df515 	stw	zero,-2092(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
 802f294:	e0bfff17 	ldw	r2,-4(fp)
 802f298:	10c00f24 	muli	r3,r2,60
 802f29c:	008201b4 	movhi	r2,2054
 802f2a0:	1885883a 	add	r2,r3,r2
 802f2a4:	10be0217 	ldw	r2,-2040(r2)
 802f2a8:	10000826 	beq	r2,zero,802f2cc <dhc_set_state+0x7c>
      dhc_states[iface].callback(iface,state);
 802f2ac:	e0bfff17 	ldw	r2,-4(fp)
 802f2b0:	10c00f24 	muli	r3,r2,60
 802f2b4:	008201b4 	movhi	r2,2054
 802f2b8:	1885883a 	add	r2,r3,r2
 802f2bc:	10be0217 	ldw	r2,-2040(r2)
 802f2c0:	e17ffe17 	ldw	r5,-8(fp)
 802f2c4:	e13fff17 	ldw	r4,-4(fp)
 802f2c8:	103ee83a 	callr	r2
}
 802f2cc:	0001883a 	nop
 802f2d0:	e037883a 	mov	sp,fp
 802f2d4:	dfc00117 	ldw	ra,4(sp)
 802f2d8:	df000017 	ldw	fp,0(sp)
 802f2dc:	dec00204 	addi	sp,sp,8
 802f2e0:	f800283a 	ret

0802f2e4 <find_opt>:
 * RETURNS:  Return pointer to that code if found, NULL if not found.
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
 802f2e4:	defffc04 	addi	sp,sp,-16
 802f2e8:	df000315 	stw	fp,12(sp)
 802f2ec:	df000304 	addi	fp,sp,12
 802f2f0:	2005883a 	mov	r2,r4
 802f2f4:	e17ffd15 	stw	r5,-12(fp)
 802f2f8:	e0bffe05 	stb	r2,-8(fp)
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
 802f2fc:	e0bffd17 	ldw	r2,-12(fp)
 802f300:	10804e04 	addi	r2,r2,312
 802f304:	e0bfff15 	stw	r2,-4(fp)

   while (opts < end)
 802f308:	00001e06 	br	802f384 <find_opt+0xa0>
   {
      if (*opts == opcode) /* found it */
 802f30c:	e0bffd17 	ldw	r2,-12(fp)
 802f310:	10800003 	ldbu	r2,0(r2)
 802f314:	e0fffe03 	ldbu	r3,-8(fp)
 802f318:	10803fcc 	andi	r2,r2,255
 802f31c:	1880021e 	bne	r3,r2,802f328 <find_opt+0x44>
         return opts;
 802f320:	e0bffd17 	ldw	r2,-12(fp)
 802f324:	00001b06 	br	802f394 <find_opt+0xb0>
      if (*opts == DHOP_END)  /* end of options; opcode not found */
 802f328:	e0bffd17 	ldw	r2,-12(fp)
 802f32c:	10800003 	ldbu	r2,0(r2)
 802f330:	10803fcc 	andi	r2,r2,255
 802f334:	10803fd8 	cmpnei	r2,r2,255
 802f338:	1000021e 	bne	r2,zero,802f344 <find_opt+0x60>
         return NULL;
 802f33c:	0005883a 	mov	r2,zero
 802f340:	00001406 	br	802f394 <find_opt+0xb0>
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
 802f344:	e0bffd17 	ldw	r2,-12(fp)
 802f348:	10800003 	ldbu	r2,0(r2)
 802f34c:	10803fcc 	andi	r2,r2,255
 802f350:	1000041e 	bne	r2,zero,802f364 <find_opt+0x80>
         opts++;
 802f354:	e0bffd17 	ldw	r2,-12(fp)
 802f358:	10800044 	addi	r2,r2,1
 802f35c:	e0bffd15 	stw	r2,-12(fp)
 802f360:	00000806 	br	802f384 <find_opt+0xa0>
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
 802f364:	e0bffd17 	ldw	r2,-12(fp)
 802f368:	10800044 	addi	r2,r2,1
 802f36c:	10800003 	ldbu	r2,0(r2)
 802f370:	10803fcc 	andi	r2,r2,255
 802f374:	10800084 	addi	r2,r2,2
 802f378:	e0fffd17 	ldw	r3,-12(fp)
 802f37c:	1885883a 	add	r2,r3,r2
 802f380:	e0bffd15 	stw	r2,-12(fp)
   while (opts < end)
 802f384:	e0fffd17 	ldw	r3,-12(fp)
 802f388:	e0bfff17 	ldw	r2,-4(fp)
 802f38c:	18bfdf36 	bltu	r3,r2,802f30c <find_opt+0x28>
   }
   /* no DHOP_END option?? */
   return NULL;
 802f390:	0005883a 	mov	r2,zero
}
 802f394:	e037883a 	mov	sp,fp
 802f398:	df000017 	ldw	fp,0(sp)
 802f39c:	dec00104 	addi	sp,sp,4
 802f3a0:	f800283a 	ret

0802f3a4 <pk_init>:
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
 802f3a4:	defff804 	addi	sp,sp,-32
 802f3a8:	dfc00715 	stw	ra,28(sp)
 802f3ac:	df000615 	stw	fp,24(sp)
 802f3b0:	df000604 	addi	fp,sp,24
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
 802f3b4:	d0e03417 	ldw	r3,-32560(gp)
 802f3b8:	d0a03217 	ldw	r2,-32568(gp)
 802f3bc:	1885883a 	add	r2,r3,r2
 802f3c0:	e0bffc15 	stw	r2,-16(fp)
   u_char align_req;
   
#ifdef ALIGN_BUFS
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
 802f3c4:	e03ffbc5 	stb	zero,-17(fp)
#endif

   for (i = 0; i < numpkts; i++)
 802f3c8:	e03fff15 	stw	zero,-4(fp)
 802f3cc:	00007806 	br	802f5b0 <pk_init+0x20c>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
 802f3d0:	01000d04 	movi	r4,52
 802f3d4:	8030d080 	call	8030d08 <npalloc>
 802f3d8:	e0bffa15 	stw	r2,-24(fp)
      if (packet == NULL)
 802f3dc:	e0bffa17 	ldw	r2,-24(fp)
 802f3e0:	10008026 	beq	r2,zero,802f5e4 <pk_init+0x240>
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
 802f3e4:	e0bfff17 	ldw	r2,-4(fp)
 802f3e8:	10800f30 	cmpltui	r2,r2,60
 802f3ec:	1000051e 	bne	r2,zero,802f404 <pk_init+0x60>
      {
         dprintf("pk_init: bad define\n");
 802f3f0:	01020174 	movhi	r4,2053
 802f3f4:	210db104 	addi	r4,r4,14020
 802f3f8:	8003ca80 	call	8003ca8 <puts>
         return -1;
 802f3fc:	00bfffc4 	movi	r2,-1
 802f400:	00008606 	br	802f61c <pk_init+0x278>
      }
      pktlog[i] = packet;     /* save for debugging */
 802f404:	e0bfff17 	ldw	r2,-4(fp)
 802f408:	100890ba 	slli	r4,r2,2
 802f40c:	e0fffa17 	ldw	r3,-24(fp)
 802f410:	008201b4 	movhi	r2,2054
 802f414:	2085883a 	add	r2,r4,r2
 802f418:	10fe3915 	stw	r3,-1820(r2)
#endif

      packet->nb_tstamp = 0L;
 802f41c:	e0bffa17 	ldw	r2,-24(fp)
 802f420:	10000515 	stw	zero,20(r2)

      if (i < bigbufs)
 802f424:	d0a03417 	ldw	r2,-32560(gp)
 802f428:	e0ffff17 	ldw	r3,-4(fp)
 802f42c:	18802f2e 	bgeu	r3,r2,802f4ec <pk_init+0x148>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
 802f430:	d0a03517 	ldw	r2,-32556(gp)
 802f434:	10800144 	addi	r2,r2,5
 802f438:	1009883a 	mov	r4,r2
 802f43c:	8030d7c0 	call	8030d7c <ncpalloc>
 802f440:	1007883a 	mov	r3,r2
 802f444:	e0bffa17 	ldw	r2,-24(fp)
 802f448:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 802f44c:	e0bffa17 	ldw	r2,-24(fp)
 802f450:	10800117 	ldw	r2,4(r2)
 802f454:	10006526 	beq	r2,zero,802f5ec <pk_init+0x248>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 802f458:	e03ffe15 	stw	zero,-8(fp)
 802f45c:	00000906 	br	802f484 <pk_init+0xe0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 802f460:	e0bffa17 	ldw	r2,-24(fp)
 802f464:	10c00117 	ldw	r3,4(r2)
 802f468:	e0bffe17 	ldw	r2,-8(fp)
 802f46c:	1885883a 	add	r2,r3,r2
 802f470:	00c01344 	movi	r3,77
 802f474:	10c00005 	stb	r3,0(r2)
            for(j = 0; j < ALIGN_TYPE; j++)
 802f478:	e0bffe17 	ldw	r2,-8(fp)
 802f47c:	10800044 	addi	r2,r2,1
 802f480:	e0bffe15 	stw	r2,-8(fp)
 802f484:	e0bffe17 	ldw	r2,-8(fp)
 802f488:	10800110 	cmplti	r2,r2,4
 802f48c:	103ff41e 	bne	r2,zero,802f460 <pk_init+0xbc>

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
 802f490:	e0bffa17 	ldw	r2,-24(fp)
 802f494:	10c00117 	ldw	r3,4(r2)
 802f498:	d0a03517 	ldw	r2,-32556(gp)
 802f49c:	10800104 	addi	r2,r2,4
 802f4a0:	1885883a 	add	r2,r3,r2
 802f4a4:	00c01344 	movi	r3,77
 802f4a8:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
 802f4ac:	e0bffa17 	ldw	r2,-24(fp)
 802f4b0:	10800117 	ldw	r2,4(r2)
 802f4b4:	10c00104 	addi	r3,r2,4
 802f4b8:	e0bffa17 	ldw	r2,-24(fp)
 802f4bc:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 802f4c0:	e0bffa17 	ldw	r2,-24(fp)
 802f4c4:	10800117 	ldw	r2,4(r2)
 802f4c8:	10004a26 	beq	r2,zero,802f5f4 <pk_init+0x250>
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
 802f4cc:	d0e03517 	ldw	r3,-32556(gp)
 802f4d0:	e0bffa17 	ldw	r2,-24(fp)
 802f4d4:	10c00215 	stw	r3,8(r2)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
 802f4d8:	e17ffa17 	ldw	r5,-24(fp)
 802f4dc:	010201b4 	movhi	r4,2054
 802f4e0:	213e7504 	addi	r4,r4,-1580
 802f4e4:	802fb8c0 	call	802fb8c <putq>
 802f4e8:	00002e06 	br	802f5a4 <pk_init+0x200>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
 802f4ec:	d0a03317 	ldw	r2,-32564(gp)
 802f4f0:	10800144 	addi	r2,r2,5
 802f4f4:	1009883a 	mov	r4,r2
 802f4f8:	8030d7c0 	call	8030d7c <ncpalloc>
 802f4fc:	1007883a 	mov	r3,r2
 802f500:	e0bffa17 	ldw	r2,-24(fp)
 802f504:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 802f508:	e0bffa17 	ldw	r2,-24(fp)
 802f50c:	10800117 	ldw	r2,4(r2)
 802f510:	10003a26 	beq	r2,zero,802f5fc <pk_init+0x258>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 802f514:	e03ffd15 	stw	zero,-12(fp)
 802f518:	00000906 	br	802f540 <pk_init+0x19c>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 802f51c:	e0bffa17 	ldw	r2,-24(fp)
 802f520:	10c00117 	ldw	r3,4(r2)
 802f524:	e0bffd17 	ldw	r2,-12(fp)
 802f528:	1885883a 	add	r2,r3,r2
 802f52c:	00c01344 	movi	r3,77
 802f530:	10c00005 	stb	r3,0(r2)
            for(j = 0; j < ALIGN_TYPE; j++)
 802f534:	e0bffd17 	ldw	r2,-12(fp)
 802f538:	10800044 	addi	r2,r2,1
 802f53c:	e0bffd15 	stw	r2,-12(fp)
 802f540:	e0bffd17 	ldw	r2,-12(fp)
 802f544:	10800110 	cmplti	r2,r2,4
 802f548:	103ff41e 	bne	r2,zero,802f51c <pk_init+0x178>

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
 802f54c:	e0bffa17 	ldw	r2,-24(fp)
 802f550:	10c00117 	ldw	r3,4(r2)
 802f554:	d0a03317 	ldw	r2,-32564(gp)
 802f558:	10800104 	addi	r2,r2,4
 802f55c:	1885883a 	add	r2,r3,r2
 802f560:	00c01344 	movi	r3,77
 802f564:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;
 802f568:	e0bffa17 	ldw	r2,-24(fp)
 802f56c:	10800117 	ldw	r2,4(r2)
 802f570:	10c00104 	addi	r3,r2,4
 802f574:	e0bffa17 	ldw	r2,-24(fp)
 802f578:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 802f57c:	e0bffa17 	ldw	r2,-24(fp)
 802f580:	10800117 	ldw	r2,4(r2)
 802f584:	10001f26 	beq	r2,zero,802f604 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
 802f588:	d0e03317 	ldw	r3,-32564(gp)
 802f58c:	e0bffa17 	ldw	r2,-24(fp)
 802f590:	10c00215 	stw	r3,8(r2)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
 802f594:	e17ffa17 	ldw	r5,-24(fp)
 802f598:	010201b4 	movhi	r4,2054
 802f59c:	213e3004 	addi	r4,r4,-1856
 802f5a0:	802fb8c0 	call	802fb8c <putq>
   for (i = 0; i < numpkts; i++)
 802f5a4:	e0bfff17 	ldw	r2,-4(fp)
 802f5a8:	10800044 	addi	r2,r2,1
 802f5ac:	e0bfff15 	stw	r2,-4(fp)
 802f5b0:	e0ffff17 	ldw	r3,-4(fp)
 802f5b4:	e0bffc17 	ldw	r2,-16(fp)
 802f5b8:	18bf8536 	bltu	r3,r2,802f3d0 <pk_init+0x2c>
      }
   }
   bigfreeq.q_min = bigbufs;
 802f5bc:	d0a03417 	ldw	r2,-32560(gp)
 802f5c0:	1007883a 	mov	r3,r2
 802f5c4:	008201b4 	movhi	r2,2054
 802f5c8:	10fe7915 	stw	r3,-1564(r2)
   lilfreeq.q_min = lilbufs;
 802f5cc:	d0a03217 	ldw	r2,-32568(gp)
 802f5d0:	1007883a 	mov	r3,r2
 802f5d4:	008201b4 	movhi	r2,2054
 802f5d8:	10fe3415 	stw	r3,-1840(r2)
   heap_curr_mem_hi_watermark = 0;
   /* set the heap's access type to blocking */
   heap_type = HEAP_ACCESS_BLOCKING;
#endif

   return 0;
 802f5dc:	0005883a 	mov	r2,zero
 802f5e0:	00000e06 	br	802f61c <pk_init+0x278>
         goto no_pkt_buf;
 802f5e4:	0001883a 	nop
 802f5e8:	00000706 	br	802f608 <pk_init+0x264>
               goto no_pkt_buf;
 802f5ec:	0001883a 	nop
 802f5f0:	00000506 	br	802f608 <pk_init+0x264>
            goto no_pkt_buf;
 802f5f4:	0001883a 	nop
 802f5f8:	00000306 	br	802f608 <pk_init+0x264>
               goto no_pkt_buf;
 802f5fc:	0001883a 	nop
 802f600:	00000106 	br	802f608 <pk_init+0x264>
            goto no_pkt_buf;
 802f604:	0001883a 	nop

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
 802f608:	e17fff17 	ldw	r5,-4(fp)
 802f60c:	01020174 	movhi	r4,2053
 802f610:	210db604 	addi	r4,r4,14040
 802f614:	8003b840 	call	8003b84 <printf>
#endif
   return(-1);
 802f618:	00bfffc4 	movi	r2,-1
}
 802f61c:	e037883a 	mov	sp,fp
 802f620:	dfc00117 	ldw	ra,4(sp)
 802f624:	df000017 	ldw	fp,0(sp)
 802f628:	dec00204 	addi	sp,sp,8
 802f62c:	f800283a 	ret

0802f630 <pk_alloc>:
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
 802f630:	defffc04 	addi	sp,sp,-16
 802f634:	dfc00315 	stw	ra,12(sp)
 802f638:	df000215 	stw	fp,8(sp)
 802f63c:	df000204 	addi	fp,sp,8
 802f640:	e13ffe15 	stw	r4,-8(fp)
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
 802f644:	d0e03517 	ldw	r3,-32556(gp)
 802f648:	e0bffe17 	ldw	r2,-8(fp)
 802f64c:	1880022e 	bgeu	r3,r2,802f658 <pk_alloc+0x28>
   {
#ifdef HEAPBUFS
      if ((p = pk_alloc_heapbuf (len)) == NULL)
         return NULL;
#else
      return(NULL);
 802f650:	0005883a 	mov	r2,zero
 802f654:	00002106 	br	802f6dc <pk_alloc+0xac>
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 802f658:	d0e03317 	ldw	r3,-32564(gp)
 802f65c:	e0bffe17 	ldw	r2,-8(fp)
 802f660:	18800336 	bltu	r3,r2,802f670 <pk_alloc+0x40>
 802f664:	008201b4 	movhi	r2,2054
 802f668:	10be3217 	ldw	r2,-1848(r2)
 802f66c:	1000051e 	bne	r2,zero,802f684 <pk_alloc+0x54>
         p = (PACKET)getq(&bigfreeq);
 802f670:	010201b4 	movhi	r4,2054
 802f674:	213e7504 	addi	r4,r4,-1580
 802f678:	802fad40 	call	802fad4 <getq>
 802f67c:	e0bfff15 	stw	r2,-4(fp)
 802f680:	00000406 	br	802f694 <pk_alloc+0x64>
      else
         p = (PACKET)getq(&lilfreeq);
 802f684:	010201b4 	movhi	r4,2054
 802f688:	213e3004 	addi	r4,r4,-1856
 802f68c:	802fad40 	call	802fad4 <getq>
 802f690:	e0bfff15 	stw	r2,-4(fp)

      if (!p)
 802f694:	e0bfff17 	ldw	r2,-4(fp)
 802f698:	1000021e 	bne	r2,zero,802f6a4 <pk_alloc+0x74>
         return NULL;
 802f69c:	0005883a 	mov	r2,zero
 802f6a0:	00000e06 	br	802f6dc <pk_alloc+0xac>
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 802f6a4:	e0bfff17 	ldw	r2,-4(fp)
 802f6a8:	10800117 	ldw	r2,4(r2)
 802f6ac:	d0e07c17 	ldw	r3,-32272(gp)
 802f6b0:	10c7883a 	add	r3,r2,r3
 802f6b4:	e0bfff17 	ldw	r2,-4(fp)
 802f6b8:	10c00315 	stw	r3,12(r2)
   p->nb_plen = 0;   /* no protocol data there yet */
 802f6bc:	e0bfff17 	ldw	r2,-4(fp)
 802f6c0:	10000415 	stw	zero,16(r2)
   p->net = NULL;
 802f6c4:	e0bfff17 	ldw	r2,-4(fp)
 802f6c8:	10000615 	stw	zero,24(r2)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
 802f6cc:	e0bfff17 	ldw	r2,-4(fp)
 802f6d0:	00c00044 	movi	r3,1
 802f6d4:	10c00915 	stw	r3,36(r2)

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
 802f6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 802f6dc:	e037883a 	mov	sp,fp
 802f6e0:	dfc00117 	ldw	ra,4(sp)
 802f6e4:	df000017 	ldw	fp,0(sp)
 802f6e8:	dec00204 	addi	sp,sp,8
 802f6ec:	f800283a 	ret

0802f6f0 <pk_validate>:
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
 802f6f0:	defffb04 	addi	sp,sp,-20
 802f6f4:	dfc00415 	stw	ra,16(sp)
 802f6f8:	df000315 	stw	fp,12(sp)
 802f6fc:	df000304 	addi	fp,sp,12
 802f700:	e13ffd15 	stw	r4,-12(fp)
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
 802f704:	e0bffd17 	ldw	r2,-12(fp)
 802f708:	10800017 	ldw	r2,0(r2)
 802f70c:	10000c26 	beq	r2,zero,802f740 <pk_validate+0x50>
 802f710:	e0bffd17 	ldw	r2,-12(fp)
 802f714:	10800917 	ldw	r2,36(r2)
 802f718:	10000926 	beq	r2,zero,802f740 <pk_validate+0x50>
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
 802f71c:	80303680 	call	8030368 <irq_Mask>
 802f720:	008201b4 	movhi	r2,2054
 802f724:	10be3817 	ldw	r2,-1824(r2)
 802f728:	10c00044 	addi	r3,r2,1
 802f72c:	008201b4 	movhi	r2,2054
 802f730:	10fe3815 	stw	r3,-1824(r2)
 802f734:	80303c80 	call	80303c8 <irq_Unmask>
      return -1;
 802f738:	00bfffc4 	movi	r2,-1
 802f73c:	00007c06 	br	802f930 <pk_validate+0x240>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
 802f740:	e0bffd17 	ldw	r2,-12(fp)
 802f744:	10c00217 	ldw	r3,8(r2)
 802f748:	d0a03517 	ldw	r2,-32556(gp)
 802f74c:	18801d1e 	bne	r3,r2,802f7c4 <pk_validate+0xd4>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
 802f750:	80303680 	call	8030368 <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 802f754:	008201b4 	movhi	r2,2054
 802f758:	10be7517 	ldw	r2,-1580(r2)
 802f75c:	e0bfff15 	stw	r2,-4(fp)
 802f760:	00001406 	br	802f7b4 <pk_validate+0xc4>
            if (p == pkt)
 802f764:	e0ffff17 	ldw	r3,-4(fp)
 802f768:	e0bffd17 	ldw	r2,-12(fp)
 802f76c:	18800e1e 	bne	r3,r2,802f7a8 <pk_validate+0xb8>
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
 802f770:	e17ffd17 	ldw	r5,-12(fp)
 802f774:	01020174 	movhi	r4,2053
 802f778:	210dc104 	addi	r4,r4,14084
 802f77c:	8003b840 	call	8003b84 <printf>
               EXIT_CRIT_SECTION(&bigfreeq);
 802f780:	80303c80 	call	80303c8 <irq_Unmask>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 802f784:	80303680 	call	8030368 <irq_Mask>
 802f788:	008201b4 	movhi	r2,2054
 802f78c:	10be3717 	ldw	r2,-1828(r2)
 802f790:	10c00044 	addi	r3,r2,1
 802f794:	008201b4 	movhi	r2,2054
 802f798:	10fe3715 	stw	r3,-1828(r2)
 802f79c:	80303c80 	call	80303c8 <irq_Unmask>
               return -1;
 802f7a0:	00bfffc4 	movi	r2,-1
 802f7a4:	00006206 	br	802f930 <pk_validate+0x240>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 802f7a8:	e0bfff17 	ldw	r2,-4(fp)
 802f7ac:	10800017 	ldw	r2,0(r2)
 802f7b0:	e0bfff15 	stw	r2,-4(fp)
 802f7b4:	e0bfff17 	ldw	r2,-4(fp)
 802f7b8:	103fea1e 	bne	r2,zero,802f764 <pk_validate+0x74>
            }
         EXIT_CRIT_SECTION(&bigfreeq);
 802f7bc:	80303c80 	call	80303c8 <irq_Unmask>
 802f7c0:	00002a06 	br	802f86c <pk_validate+0x17c>
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
 802f7c4:	e0bffd17 	ldw	r2,-12(fp)
 802f7c8:	10c00217 	ldw	r3,8(r2)
 802f7cc:	d0a03317 	ldw	r2,-32564(gp)
 802f7d0:	18801d1e 	bne	r3,r2,802f848 <pk_validate+0x158>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
 802f7d4:	80303680 	call	8030368 <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 802f7d8:	008201b4 	movhi	r2,2054
 802f7dc:	10be3017 	ldw	r2,-1856(r2)
 802f7e0:	e0bfff15 	stw	r2,-4(fp)
 802f7e4:	00001406 	br	802f838 <pk_validate+0x148>
            if (p == pkt)
 802f7e8:	e0ffff17 	ldw	r3,-4(fp)
 802f7ec:	e0bffd17 	ldw	r2,-12(fp)
 802f7f0:	18800e1e 	bne	r3,r2,802f82c <pk_validate+0x13c>
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
 802f7f4:	e17ffd17 	ldw	r5,-12(fp)
 802f7f8:	01020174 	movhi	r4,2053
 802f7fc:	210dcb04 	addi	r4,r4,14124
 802f800:	8003b840 	call	8003b84 <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
 802f804:	80303c80 	call	80303c8 <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 802f808:	80303680 	call	8030368 <irq_Mask>
 802f80c:	008201b4 	movhi	r2,2054
 802f810:	10be3717 	ldw	r2,-1828(r2)
 802f814:	10c00044 	addi	r3,r2,1
 802f818:	008201b4 	movhi	r2,2054
 802f81c:	10fe3715 	stw	r3,-1828(r2)
 802f820:	80303c80 	call	80303c8 <irq_Unmask>
            return -1;
 802f824:	00bfffc4 	movi	r2,-1
 802f828:	00004106 	br	802f930 <pk_validate+0x240>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 802f82c:	e0bfff17 	ldw	r2,-4(fp)
 802f830:	10800017 	ldw	r2,0(r2)
 802f834:	e0bfff15 	stw	r2,-4(fp)
 802f838:	e0bfff17 	ldw	r2,-4(fp)
 802f83c:	103fea1e 	bne	r2,zero,802f7e8 <pk_validate+0xf8>
         }
         EXIT_CRIT_SECTION(&lilfreeq);
 802f840:	80303c80 	call	80303c8 <irq_Unmask>
 802f844:	00000906 	br	802f86c <pk_validate+0x17c>
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
 802f848:	80303680 	call	8030368 <irq_Mask>
 802f84c:	008201b4 	movhi	r2,2054
 802f850:	10be3517 	ldw	r2,-1836(r2)
 802f854:	10c00044 	addi	r3,r2,1
 802f858:	008201b4 	movhi	r2,2054
 802f85c:	10fe3515 	stw	r3,-1836(r2)
 802f860:	80303c80 	call	80303c8 <irq_Unmask>
         return -1;
 802f864:	00bfffc4 	movi	r2,-1
 802f868:	00003106 	br	802f930 <pk_validate+0x240>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
 802f86c:	00800104 	movi	r2,4
 802f870:	e0bffe15 	stw	r2,-8(fp)
 802f874:	00001706 	br	802f8d4 <pk_validate+0x1e4>
   {
      if (*(pkt->nb_buff - j) != 'M')
 802f878:	e0bffd17 	ldw	r2,-12(fp)
 802f87c:	10c00117 	ldw	r3,4(r2)
 802f880:	e0bffe17 	ldw	r2,-8(fp)
 802f884:	0085c83a 	sub	r2,zero,r2
 802f888:	1885883a 	add	r2,r3,r2
 802f88c:	10800003 	ldbu	r2,0(r2)
 802f890:	10803fcc 	andi	r2,r2,255
 802f894:	1080201c 	xori	r2,r2,128
 802f898:	10bfe004 	addi	r2,r2,-128
 802f89c:	10801360 	cmpeqi	r2,r2,77
 802f8a0:	1000091e 	bne	r2,zero,802f8c8 <pk_validate+0x1d8>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 802f8a4:	80303680 	call	8030368 <irq_Mask>
 802f8a8:	008201b4 	movhi	r2,2054
 802f8ac:	10be3617 	ldw	r2,-1832(r2)
 802f8b0:	10c00044 	addi	r3,r2,1
 802f8b4:	008201b4 	movhi	r2,2054
 802f8b8:	10fe3615 	stw	r3,-1832(r2)
 802f8bc:	80303c80 	call	80303c8 <irq_Unmask>
         return -1;
 802f8c0:	00bfffc4 	movi	r2,-1
 802f8c4:	00001a06 	br	802f930 <pk_validate+0x240>
   for (j = ALIGN_TYPE; j > 0; j--)
 802f8c8:	e0bffe17 	ldw	r2,-8(fp)
 802f8cc:	10bfffc4 	addi	r2,r2,-1
 802f8d0:	e0bffe15 	stw	r2,-8(fp)
 802f8d4:	e0bffe17 	ldw	r2,-8(fp)
 802f8d8:	00bfe716 	blt	zero,r2,802f878 <pk_validate+0x188>
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
 802f8dc:	e0bffd17 	ldw	r2,-12(fp)
 802f8e0:	10c00117 	ldw	r3,4(r2)
 802f8e4:	e0bffd17 	ldw	r2,-12(fp)
 802f8e8:	10800217 	ldw	r2,8(r2)
 802f8ec:	1885883a 	add	r2,r3,r2
 802f8f0:	10800003 	ldbu	r2,0(r2)
 802f8f4:	10803fcc 	andi	r2,r2,255
 802f8f8:	1080201c 	xori	r2,r2,128
 802f8fc:	10bfe004 	addi	r2,r2,-128
 802f900:	10801360 	cmpeqi	r2,r2,77
 802f904:	1000091e 	bne	r2,zero,802f92c <pk_validate+0x23c>
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 802f908:	80303680 	call	8030368 <irq_Mask>
 802f90c:	008201b4 	movhi	r2,2054
 802f910:	10be3617 	ldw	r2,-1832(r2)
 802f914:	10c00044 	addi	r3,r2,1
 802f918:	008201b4 	movhi	r2,2054
 802f91c:	10fe3615 	stw	r3,-1832(r2)
 802f920:	80303c80 	call	80303c8 <irq_Unmask>
      return -1;
 802f924:	00bfffc4 	movi	r2,-1
 802f928:	00000106 	br	802f930 <pk_validate+0x240>
   }
#endif /* NPDEBUG */

   return 0;
 802f92c:	0005883a 	mov	r2,zero
}
 802f930:	e037883a 	mov	sp,fp
 802f934:	dfc00117 	ldw	ra,4(sp)
 802f938:	df000017 	ldw	fp,0(sp)
 802f93c:	dec00204 	addi	sp,sp,8
 802f940:	f800283a 	ret

0802f944 <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
 802f944:	defffc04 	addi	sp,sp,-16
 802f948:	dfc00315 	stw	ra,12(sp)
 802f94c:	df000215 	stw	fp,8(sp)
 802f950:	df000204 	addi	fp,sp,8
 802f954:	e13ffe15 	stw	r4,-8(fp)
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
 802f958:	e13ffe17 	ldw	r4,-8(fp)
 802f95c:	802f6f00 	call	802f6f0 <pk_validate>
 802f960:	e0bfff15 	stw	r2,-4(fp)
      if (e)
 802f964:	e0bfff17 	ldw	r2,-4(fp)
 802f968:	1000191e 	bne	r2,zero,802f9d0 <pk_free+0x8c>
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
 802f96c:	e0bffe17 	ldw	r2,-8(fp)
 802f970:	10800917 	ldw	r2,36(r2)
 802f974:	113fffc4 	addi	r4,r2,-1
 802f978:	e0fffe17 	ldw	r3,-8(fp)
 802f97c:	19000915 	stw	r4,36(r3)
 802f980:	108000b0 	cmpltui	r2,r2,2
 802f984:	10001426 	beq	r2,zero,802f9d8 <pk_free+0x94>
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
 802f988:	e0bffe17 	ldw	r2,-8(fp)
 802f98c:	10c00217 	ldw	r3,8(r2)
 802f990:	d0a03517 	ldw	r2,-32556(gp)
 802f994:	1880051e 	bne	r3,r2,802f9ac <pk_free+0x68>
            q_add(&bigfreeq, (qp)pkt);
 802f998:	e17ffe17 	ldw	r5,-8(fp)
 802f99c:	010201b4 	movhi	r4,2054
 802f9a0:	213e7504 	addi	r4,r4,-1580
 802f9a4:	802fb8c0 	call	802fb8c <putq>
 802f9a8:	00000c06 	br	802f9dc <pk_free+0x98>
         else if (pkt->nb_blen == lilbufsiz)
 802f9ac:	e0bffe17 	ldw	r2,-8(fp)
 802f9b0:	10c00217 	ldw	r3,8(r2)
 802f9b4:	d0a03317 	ldw	r2,-32564(gp)
 802f9b8:	1880081e 	bne	r3,r2,802f9dc <pk_free+0x98>
            q_add(&lilfreeq, (qp)pkt);
 802f9bc:	e17ffe17 	ldw	r5,-8(fp)
 802f9c0:	010201b4 	movhi	r4,2054
 802f9c4:	213e3004 	addi	r4,r4,-1856
 802f9c8:	802fb8c0 	call	802fb8c <putq>
 802f9cc:	00000306 	br	802f9dc <pk_free+0x98>
         return;
 802f9d0:	0001883a 	nop
 802f9d4:	00000106 	br	802f9dc <pk_free+0x98>
         return;  /* packet was cloned, don't delete yet */
 802f9d8:	0001883a 	nop
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
 802f9dc:	e037883a 	mov	sp,fp
 802f9e0:	dfc00117 	ldw	ra,4(sp)
 802f9e4:	df000017 	ldw	fp,0(sp)
 802f9e8:	dec00204 	addi	sp,sp,8
 802f9ec:	f800283a 	ret

0802f9f0 <pk_get_max_intrsafe_buf_len>:
 *
 * OUTPUT: This function always returns the length of a big buffer (bigbufsiz).
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
 802f9f0:	deffff04 	addi	sp,sp,-4
 802f9f4:	df000015 	stw	fp,0(sp)
 802f9f8:	d839883a 	mov	fp,sp
   return bigbufsiz;
 802f9fc:	d0a03517 	ldw	r2,-32556(gp)
}
 802fa00:	e037883a 	mov	sp,fp
 802fa04:	df000017 	ldw	fp,0(sp)
 802fa08:	dec00104 	addi	sp,sp,4
 802fa0c:	f800283a 	ret

0802fa10 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 802fa10:	defff904 	addi	sp,sp,-28
 802fa14:	dfc00615 	stw	ra,24(sp)
 802fa18:	df000515 	stw	fp,20(sp)
 802fa1c:	df000504 	addi	fp,sp,20
 802fa20:	e13ffb15 	stw	r4,-20(fp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 802fa24:	01000084 	movi	r4,2
 802fa28:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
 802fa2c:	80303680 	call	8030368 <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
 802fa30:	008201b4 	movhi	r2,2054
 802fa34:	10be3517 	ldw	r2,-1836(r2)
 802fa38:	e0bffc15 	stw	r2,-16(fp)
 802fa3c:	008201b4 	movhi	r2,2054
 802fa40:	10be3617 	ldw	r2,-1832(r2)
 802fa44:	e0bffd15 	stw	r2,-12(fp)
 802fa48:	008201b4 	movhi	r2,2054
 802fa4c:	10be3717 	ldw	r2,-1828(r2)
 802fa50:	e0bffe15 	stw	r2,-8(fp)
 802fa54:	008201b4 	movhi	r2,2054
 802fa58:	10be3817 	ldw	r2,-1824(r2)
 802fa5c:	e0bfff15 	stw	r2,-4(fp)
   EXIT_CRIT_SECTION(&memestats);
 802fa60:	80303c80 	call	80303c8 <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802fa64:	01000084 	movi	r4,2
 802fa68:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
 802fa6c:	01420174 	movhi	r5,2053
 802fa70:	294dd504 	addi	r5,r5,14164
 802fa74:	e13ffb17 	ldw	r4,-20(fp)
 802fa78:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
 802fa7c:	e0bffc17 	ldw	r2,-16(fp)
 802fa80:	e0fffd17 	ldw	r3,-12(fp)
 802fa84:	180f883a 	mov	r7,r3
 802fa88:	100d883a 	mov	r6,r2
 802fa8c:	01420174 	movhi	r5,2053
 802fa90:	294dde04 	addi	r5,r5,14200
 802fa94:	e13ffb17 	ldw	r4,-20(fp)
 802fa98:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
 802fa9c:	e0bffe17 	ldw	r2,-8(fp)
 802faa0:	e0ffff17 	ldw	r3,-4(fp)
 802faa4:	180f883a 	mov	r7,r3
 802faa8:	100d883a 	mov	r6,r2
 802faac:	01420174 	movhi	r5,2053
 802fab0:	294deb04 	addi	r5,r5,14252
 802fab4:	e13ffb17 	ldw	r4,-20(fp)
 802fab8:	802bfa40 	call	802bfa4 <ns_printf>

   return 0;
 802fabc:	0005883a 	mov	r2,zero
}
 802fac0:	e037883a 	mov	sp,fp
 802fac4:	dfc00117 	ldw	ra,4(sp)
 802fac8:	df000017 	ldw	fp,0(sp)
 802facc:	dec00204 	addi	sp,sp,8
 802fad0:	f800283a 	ret

0802fad4 <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
 802fad4:	defffc04 	addi	sp,sp,-16
 802fad8:	dfc00315 	stw	ra,12(sp)
 802fadc:	df000215 	stw	fp,8(sp)
 802fae0:	df000204 	addi	fp,sp,8
 802fae4:	e13ffe15 	stw	r4,-8(fp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
 802fae8:	80303680 	call	8030368 <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
 802faec:	e0bffe17 	ldw	r2,-8(fp)
 802faf0:	10800017 	ldw	r2,0(r2)
 802faf4:	e0bfff15 	stw	r2,-4(fp)
 802faf8:	e0bfff17 	ldw	r2,-4(fp)
 802fafc:	1000031e 	bne	r2,zero,802fb0c <getq+0x38>
   {
      EXIT_CRIT_SECTION(q);
 802fb00:	80303c80 	call	80303c8 <irq_Unmask>
      return (0);             /* yes, show none */
 802fb04:	0005883a 	mov	r2,zero
 802fb08:	00001b06 	br	802fb78 <getq+0xa4>
   }

   q->q_head = temp->qe_next; /* else unlink */
 802fb0c:	e0bfff17 	ldw	r2,-4(fp)
 802fb10:	10c00017 	ldw	r3,0(r2)
 802fb14:	e0bffe17 	ldw	r2,-8(fp)
 802fb18:	10c00015 	stw	r3,0(r2)
   temp->qe_next = 0;         /* avoid dangling pointers */
 802fb1c:	e0bfff17 	ldw	r2,-4(fp)
 802fb20:	10000015 	stw	zero,0(r2)
   if (q->q_head == 0)        /* queue empty? */
 802fb24:	e0bffe17 	ldw	r2,-8(fp)
 802fb28:	10800017 	ldw	r2,0(r2)
 802fb2c:	1000021e 	bne	r2,zero,802fb38 <getq+0x64>
      q->q_tail = 0;          /* yes, update tail pointer too */
 802fb30:	e0bffe17 	ldw	r2,-8(fp)
 802fb34:	10000115 	stw	zero,4(r2)
   q->q_len--;                /* update queue length */
 802fb38:	e0bffe17 	ldw	r2,-8(fp)
 802fb3c:	10800217 	ldw	r2,8(r2)
 802fb40:	10ffffc4 	addi	r3,r2,-1
 802fb44:	e0bffe17 	ldw	r2,-8(fp)
 802fb48:	10c00215 	stw	r3,8(r2)
   if (q->q_len < q->q_min)
 802fb4c:	e0bffe17 	ldw	r2,-8(fp)
 802fb50:	10c00217 	ldw	r3,8(r2)
 802fb54:	e0bffe17 	ldw	r2,-8(fp)
 802fb58:	10800417 	ldw	r2,16(r2)
 802fb5c:	1880040e 	bge	r3,r2,802fb70 <getq+0x9c>
      q->q_min = q->q_len;
 802fb60:	e0bffe17 	ldw	r2,-8(fp)
 802fb64:	10c00217 	ldw	r3,8(r2)
 802fb68:	e0bffe17 	ldw	r2,-8(fp)
 802fb6c:	10c00415 	stw	r3,16(r2)

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
 802fb70:	80303c80 	call	80303c8 <irq_Unmask>

   return ((void*)temp);
 802fb74:	e0bfff17 	ldw	r2,-4(fp)
}
 802fb78:	e037883a 	mov	sp,fp
 802fb7c:	dfc00117 	ldw	ra,4(sp)
 802fb80:	df000017 	ldw	fp,0(sp)
 802fb84:	dec00204 	addi	sp,sp,8
 802fb88:	f800283a 	ret

0802fb8c <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
 802fb8c:	defffc04 	addi	sp,sp,-16
 802fb90:	dfc00315 	stw	ra,12(sp)
 802fb94:	df000215 	stw	fp,8(sp)
 802fb98:	df000204 	addi	fp,sp,8
 802fb9c:	e13fff15 	stw	r4,-4(fp)
 802fba0:	e17ffe15 	stw	r5,-8(fp)
   ENTER_CRIT_SECTION(q);
 802fba4:	80303680 	call	8030368 <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
 802fba8:	e0bffe17 	ldw	r2,-8(fp)
 802fbac:	10000015 	stw	zero,0(r2)
 802fbb0:	e0bfff17 	ldw	r2,-4(fp)
 802fbb4:	10800017 	ldw	r2,0(r2)
 802fbb8:	1000041e 	bne	r2,zero,802fbcc <putq+0x40>
 802fbbc:	e0bfff17 	ldw	r2,-4(fp)
 802fbc0:	e0fffe17 	ldw	r3,-8(fp)
 802fbc4:	10c00015 	stw	r3,0(r2)
 802fbc8:	00000406 	br	802fbdc <putq+0x50>
 802fbcc:	e0bfff17 	ldw	r2,-4(fp)
 802fbd0:	10800117 	ldw	r2,4(r2)
 802fbd4:	e0fffe17 	ldw	r3,-8(fp)
 802fbd8:	10c00015 	stw	r3,0(r2)
 802fbdc:	e0bfff17 	ldw	r2,-4(fp)
 802fbe0:	e0fffe17 	ldw	r3,-8(fp)
 802fbe4:	10c00115 	stw	r3,4(r2)
 802fbe8:	e0bfff17 	ldw	r2,-4(fp)
 802fbec:	10800217 	ldw	r2,8(r2)
 802fbf0:	10c00044 	addi	r3,r2,1
 802fbf4:	e0bfff17 	ldw	r2,-4(fp)
 802fbf8:	10c00215 	stw	r3,8(r2)
 802fbfc:	e0bfff17 	ldw	r2,-4(fp)
 802fc00:	10800217 	ldw	r2,8(r2)
 802fc04:	e0ffff17 	ldw	r3,-4(fp)
 802fc08:	18c00317 	ldw	r3,12(r3)
 802fc0c:	1880040e 	bge	r3,r2,802fc20 <putq+0x94>
 802fc10:	e0bfff17 	ldw	r2,-4(fp)
 802fc14:	10c00217 	ldw	r3,8(r2)
 802fc18:	e0bfff17 	ldw	r2,-4(fp)
 802fc1c:	10c00315 	stw	r3,12(r2)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
 802fc20:	80303c80 	call	80303c8 <irq_Unmask>
}
 802fc24:	0001883a 	nop
 802fc28:	e037883a 	mov	sp,fp
 802fc2c:	dfc00117 	ldw	ra,4(sp)
 802fc30:	df000017 	ldw	fp,0(sp)
 802fc34:	dec00204 	addi	sp,sp,8
 802fc38:	f800283a 	ret

0802fc3c <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
 802fc3c:	defffa04 	addi	sp,sp,-24
 802fc40:	dfc00515 	stw	ra,20(sp)
 802fc44:	df000415 	stw	fp,16(sp)
 802fc48:	df000404 	addi	fp,sp,16
 802fc4c:	e13ffd15 	stw	r4,-12(fp)
 802fc50:	e17ffc15 	stw	r5,-16(fp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
 802fc54:	80303680 	call	8030368 <irq_Mask>
   qptr = q->q_head;
 802fc58:	e0bffd17 	ldw	r2,-12(fp)
 802fc5c:	10800017 	ldw	r2,0(r2)
 802fc60:	e0bfff15 	stw	r2,-4(fp)
   qlast = NULL;
 802fc64:	e03ffe15 	stw	zero,-8(fp)
   while (qptr)
 802fc68:	00002b06 	br	802fd18 <qdel+0xdc>
   {
      if (qptr == (qp)elt)
 802fc6c:	e0ffff17 	ldw	r3,-4(fp)
 802fc70:	e0bffc17 	ldw	r2,-16(fp)
 802fc74:	1880231e 	bne	r3,r2,802fd04 <qdel+0xc8>
      {
         /* found our item; dequeue it */
         if (qlast)
 802fc78:	e0bffe17 	ldw	r2,-8(fp)
 802fc7c:	10000526 	beq	r2,zero,802fc94 <qdel+0x58>
            qlast->qe_next = qptr->qe_next;
 802fc80:	e0bfff17 	ldw	r2,-4(fp)
 802fc84:	10c00017 	ldw	r3,0(r2)
 802fc88:	e0bffe17 	ldw	r2,-8(fp)
 802fc8c:	10c00015 	stw	r3,0(r2)
 802fc90:	00000406 	br	802fca4 <qdel+0x68>
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
 802fc94:	e0bfff17 	ldw	r2,-4(fp)
 802fc98:	10c00017 	ldw	r3,0(r2)
 802fc9c:	e0bffd17 	ldw	r2,-12(fp)
 802fca0:	10c00015 	stw	r3,0(r2)

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
 802fca4:	e0bffd17 	ldw	r2,-12(fp)
 802fca8:	10800117 	ldw	r2,4(r2)
 802fcac:	e0fffc17 	ldw	r3,-16(fp)
 802fcb0:	1880031e 	bne	r3,r2,802fcc0 <qdel+0x84>
            q->q_tail = qlast;
 802fcb4:	e0bffd17 	ldw	r2,-12(fp)
 802fcb8:	e0fffe17 	ldw	r3,-8(fp)
 802fcbc:	10c00115 	stw	r3,4(r2)

         /* fix queue counters */
         q->q_len--;
 802fcc0:	e0bffd17 	ldw	r2,-12(fp)
 802fcc4:	10800217 	ldw	r2,8(r2)
 802fcc8:	10ffffc4 	addi	r3,r2,-1
 802fccc:	e0bffd17 	ldw	r2,-12(fp)
 802fcd0:	10c00215 	stw	r3,8(r2)
         if (q->q_len < q->q_min)
 802fcd4:	e0bffd17 	ldw	r2,-12(fp)
 802fcd8:	10c00217 	ldw	r3,8(r2)
 802fcdc:	e0bffd17 	ldw	r2,-12(fp)
 802fce0:	10800417 	ldw	r2,16(r2)
 802fce4:	1880040e 	bge	r3,r2,802fcf8 <qdel+0xbc>
            q->q_min = q->q_len;
 802fce8:	e0bffd17 	ldw	r2,-12(fp)
 802fcec:	10c00217 	ldw	r3,8(r2)
 802fcf0:	e0bffd17 	ldw	r2,-12(fp)
 802fcf4:	10c00415 	stw	r3,16(r2)
         EXIT_CRIT_SECTION(q);   /* restore int state */
 802fcf8:	80303c80 	call	80303c8 <irq_Unmask>
         return (qp)elt;   /* success exit point */
 802fcfc:	e0bffc17 	ldw	r2,-16(fp)
 802fd00:	00000906 	br	802fd28 <qdel+0xec>
      }
      qlast = qptr;
 802fd04:	e0bfff17 	ldw	r2,-4(fp)
 802fd08:	e0bffe15 	stw	r2,-8(fp)
      qptr = qptr->qe_next;
 802fd0c:	e0bfff17 	ldw	r2,-4(fp)
 802fd10:	10800017 	ldw	r2,0(r2)
 802fd14:	e0bfff15 	stw	r2,-4(fp)
   while (qptr)
 802fd18:	e0bfff17 	ldw	r2,-4(fp)
 802fd1c:	103fd31e 	bne	r2,zero,802fc6c <qdel+0x30>
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
 802fd20:	80303c80 	call	80303c8 <irq_Unmask>
   return NULL;   /* item not found in queue */
 802fd24:	0005883a 	mov	r2,zero
}
 802fd28:	e037883a 	mov	sp,fp
 802fd2c:	dfc00117 	ldw	ra,4(sp)
 802fd30:	df000017 	ldw	fp,0(sp)
 802fd34:	dec00204 	addi	sp,sp,8
 802fd38:	f800283a 	ret

0802fd3c <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 802fd3c:	defff404 	addi	sp,sp,-48
 802fd40:	dfc00b15 	stw	ra,44(sp)
 802fd44:	df000a15 	stw	fp,40(sp)
 802fd48:	df000a04 	addi	fp,sp,40
 802fd4c:	e13ffd15 	stw	r4,-12(fp)
 802fd50:	2805883a 	mov	r2,r5
 802fd54:	3007883a 	mov	r3,r6
 802fd58:	e1fffa15 	stw	r7,-24(fp)
 802fd5c:	e0bffc0d 	sth	r2,-16(fp)
 802fd60:	1805883a 	mov	r2,r3
 802fd64:	e0bffb0d 	sth	r2,-20(fp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 802fd68:	d0a07e17 	ldw	r2,-32264(gp)
 802fd6c:	1080010c 	andi	r2,r2,4
 802fd70:	10001526 	beq	r2,zero,802fdc8 <udp_open+0x8c>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802fd74:	e0bffd17 	ldw	r2,-12(fp)
 802fd78:	12003fcc 	andi	r8,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802fd7c:	e0bffd17 	ldw	r2,-12(fp)
 802fd80:	1004d23a 	srli	r2,r2,8
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802fd84:	11803fcc 	andi	r6,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802fd88:	e0bffd17 	ldw	r2,-12(fp)
 802fd8c:	1004d43a 	srli	r2,r2,16
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802fd90:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802fd94:	e0bffd17 	ldw	r2,-12(fp)
 802fd98:	1004d63a 	srli	r2,r2,24
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802fd9c:	e0fffb0b 	ldhu	r3,-20(fp)
 802fda0:	e13ffc0b 	ldhu	r4,-16(fp)
 802fda4:	e1400217 	ldw	r5,8(fp)
 802fda8:	d9400315 	stw	r5,12(sp)
 802fdac:	d9000215 	stw	r4,8(sp)
 802fdb0:	d8c00115 	stw	r3,4(sp)
 802fdb4:	d8800015 	stw	r2,0(sp)
 802fdb8:	400b883a 	mov	r5,r8
 802fdbc:	01020174 	movhi	r4,2053
 802fdc0:	210df704 	addi	r4,r4,14300
 802fdc4:	8003b840 	call	8003b84 <printf>
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 802fdc8:	0009883a 	mov	r4,zero
 802fdcc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   ocon = NULL;
 802fdd0:	e03ffe15 	stw	zero,-8(fp)
   for (con = firstudp; con; con = con->u_next)
 802fdd4:	d0a09717 	ldw	r2,-32164(gp)
 802fdd8:	e0bfff15 	stw	r2,-4(fp)
 802fddc:	00002006 	br	802fe60 <udp_open+0x124>
   {
      ocon = con;       /* remember last con in list */
 802fde0:	e0bfff17 	ldw	r2,-4(fp)
 802fde4:	e0bffe15 	stw	r2,-8(fp)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
 802fde8:	e0bfff17 	ldw	r2,-4(fp)
 802fdec:	1080018b 	ldhu	r2,6(r2)
 802fdf0:	e0fffb0b 	ldhu	r3,-20(fp)
 802fdf4:	10bfffcc 	andi	r2,r2,65535
 802fdf8:	1880161e 	bne	r3,r2,802fe54 <udp_open+0x118>
 802fdfc:	e0bfff17 	ldw	r2,-4(fp)
 802fe00:	1080020b 	ldhu	r2,8(r2)
 802fe04:	e0fffc0b 	ldhu	r3,-16(fp)
 802fe08:	10bfffcc 	andi	r2,r2,65535
 802fe0c:	1880111e 	bne	r3,r2,802fe54 <udp_open+0x118>
          con->u_lhost == 0 && con->u_fhost == fhost)
 802fe10:	e0bfff17 	ldw	r2,-4(fp)
 802fe14:	10800317 	ldw	r2,12(r2)
      if (con->u_lport == lsock && con->u_fport == fsock &&
 802fe18:	10000e1e 	bne	r2,zero,802fe54 <udp_open+0x118>
          con->u_lhost == 0 && con->u_fhost == fhost)
 802fe1c:	e0bfff17 	ldw	r2,-4(fp)
 802fe20:	10800417 	ldw	r2,16(r2)
 802fe24:	e0fffd17 	ldw	r3,-12(fp)
 802fe28:	18800a1e 	bne	r3,r2,802fe54 <udp_open+0x118>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
 802fe2c:	d0a07e17 	ldw	r2,-32264(gp)
 802fe30:	1080050c 	andi	r2,r2,20
 802fe34:	10000326 	beq	r2,zero,802fe44 <udp_open+0x108>
            dprintf("UDP: Connection already exists.\n");
 802fe38:	01020174 	movhi	r4,2053
 802fe3c:	210e0604 	addi	r4,r4,14360
 802fe40:	8003ca80 	call	8003ca8 <puts>
#endif
         UNLOCK_NET_RESOURCE(NET_RESID);
 802fe44:	0009883a 	mov	r4,zero
 802fe48:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return(NULL);
 802fe4c:	0005883a 	mov	r2,zero
 802fe50:	00003506 	br	802ff28 <udp_open+0x1ec>
   for (con = firstudp; con; con = con->u_next)
 802fe54:	e0bfff17 	ldw	r2,-4(fp)
 802fe58:	10800017 	ldw	r2,0(r2)
 802fe5c:	e0bfff15 	stw	r2,-4(fp)
 802fe60:	e0bfff17 	ldw	r2,-4(fp)
 802fe64:	103fde1e 	bne	r2,zero,802fde0 <udp_open+0xa4>
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
 802fe68:	01000804 	movi	r4,32
 802fe6c:	8030d080 	call	8030d08 <npalloc>
 802fe70:	e0bfff15 	stw	r2,-4(fp)
   if (con == 0)
 802fe74:	e0bfff17 	ldw	r2,-4(fp)
 802fe78:	10000a1e 	bne	r2,zero,802fea4 <udp_open+0x168>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
 802fe7c:	d0a07e17 	ldw	r2,-32264(gp)
 802fe80:	1080010c 	andi	r2,r2,4
 802fe84:	10000326 	beq	r2,zero,802fe94 <udp_open+0x158>
         dprintf("UDP: Couldn't allocate conn storage.\n");
 802fe88:	01020174 	movhi	r4,2053
 802fe8c:	210e0e04 	addi	r4,r4,14392
 802fe90:	8003ca80 	call	8003ca8 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 802fe94:	0009883a 	mov	r4,zero
 802fe98:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return(NULL);
 802fe9c:	0005883a 	mov	r2,zero
 802fea0:	00002106 	br	802ff28 <udp_open+0x1ec>
   }

   if (ocon)   /* ocon is end of list */
 802fea4:	e0bffe17 	ldw	r2,-8(fp)
 802fea8:	10000426 	beq	r2,zero,802febc <udp_open+0x180>
      ocon->u_next = con;  /* add new connection to end */
 802feac:	e0bffe17 	ldw	r2,-8(fp)
 802feb0:	e0ffff17 	ldw	r3,-4(fp)
 802feb4:	10c00015 	stw	r3,0(r2)
 802feb8:	00000206 	br	802fec4 <udp_open+0x188>
   else  /* no list, start one */
      firstudp = con;
 802febc:	e0bfff17 	ldw	r2,-4(fp)
 802fec0:	d0a09715 	stw	r2,-32164(gp)

   con->u_next = 0;
 802fec4:	e0bfff17 	ldw	r2,-4(fp)
 802fec8:	10000015 	stw	zero,0(r2)

   con->u_lport = lsock;      /* fill in connection info */
 802fecc:	e0bfff17 	ldw	r2,-4(fp)
 802fed0:	e0fffb0b 	ldhu	r3,-20(fp)
 802fed4:	10c0018d 	sth	r3,6(r2)
   con->u_fport = fsock;
 802fed8:	e0bfff17 	ldw	r2,-4(fp)
 802fedc:	e0fffc0b 	ldhu	r3,-16(fp)
 802fee0:	10c0020d 	sth	r3,8(r2)
   con->u_lhost = 0;
 802fee4:	e0bfff17 	ldw	r2,-4(fp)
 802fee8:	10000315 	stw	zero,12(r2)
   con->u_fhost = fhost;
 802feec:	e0bfff17 	ldw	r2,-4(fp)
 802fef0:	e0fffd17 	ldw	r3,-12(fp)
 802fef4:	10c00415 	stw	r3,16(r2)
   con->u_rcv   = handler;
 802fef8:	e0bfff17 	ldw	r2,-4(fp)
 802fefc:	e0fffa17 	ldw	r3,-24(fp)
 802ff00:	10c00515 	stw	r3,20(r2)
   con->u_data  = data;
 802ff04:	e0bfff17 	ldw	r2,-4(fp)
 802ff08:	e0c00217 	ldw	r3,8(fp)
 802ff0c:	10c00615 	stw	r3,24(r2)
   con->u_flags = UDPCF_V4;
 802ff10:	e0bfff17 	ldw	r2,-4(fp)
 802ff14:	00c00044 	movi	r3,1
 802ff18:	10c0010d 	sth	r3,4(r2)

   UNLOCK_NET_RESOURCE(NET_RESID);
 802ff1c:	0009883a 	mov	r4,zero
 802ff20:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return(con);
 802ff24:	e0bfff17 	ldw	r2,-4(fp)
}
 802ff28:	e037883a 	mov	sp,fp
 802ff2c:	dfc00117 	ldw	ra,4(sp)
 802ff30:	df000017 	ldw	fp,0(sp)
 802ff34:	dec00204 	addi	sp,sp,8
 802ff38:	f800283a 	ret

0802ff3c <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
 802ff3c:	defffb04 	addi	sp,sp,-20
 802ff40:	dfc00415 	stw	ra,16(sp)
 802ff44:	df000315 	stw	fp,12(sp)
 802ff48:	df000304 	addi	fp,sp,12
 802ff4c:	e13ffd15 	stw	r4,-12(fp)
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
 802ff50:	e0bffd17 	ldw	r2,-12(fp)
 802ff54:	10000226 	beq	r2,zero,802ff60 <udp_close+0x24>
 802ff58:	d0a09717 	ldw	r2,-32164(gp)
 802ff5c:	1000021e 	bne	r2,zero,802ff68 <udp_close+0x2c>
   {
      dtrap(); /* bad programming! */
 802ff60:	80301a80 	call	80301a8 <dtrap>
      return;
 802ff64:	00002606 	br	8030000 <udp_close+0xc4>
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 802ff68:	0009883a 	mov	r4,zero
 802ff6c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
 802ff70:	e03ffe15 	stw	zero,-8(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 802ff74:	d0a09717 	ldw	r2,-32164(gp)
 802ff78:	e0bfff15 	stw	r2,-4(fp)
 802ff7c:	00000806 	br	802ffa0 <udp_close+0x64>
   {
      if (pcon == con)  /* found connection to delete */
 802ff80:	e0ffff17 	ldw	r3,-4(fp)
 802ff84:	e0bffd17 	ldw	r2,-12(fp)
 802ff88:	18800826 	beq	r3,r2,802ffac <udp_close+0x70>
      break;
      lcon = pcon;   /* remember last connection */
 802ff8c:	e0bfff17 	ldw	r2,-4(fp)
 802ff90:	e0bffe15 	stw	r2,-8(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 802ff94:	e0bfff17 	ldw	r2,-4(fp)
 802ff98:	10800017 	ldw	r2,0(r2)
 802ff9c:	e0bfff15 	stw	r2,-4(fp)
 802ffa0:	e0bfff17 	ldw	r2,-4(fp)
 802ffa4:	103ff61e 	bne	r2,zero,802ff80 <udp_close+0x44>
 802ffa8:	00000106 	br	802ffb0 <udp_close+0x74>
      break;
 802ffac:	0001883a 	nop
   }

   if (!pcon)
 802ffb0:	e0bfff17 	ldw	r2,-4(fp)
 802ffb4:	1000041e 	bne	r2,zero,802ffc8 <udp_close+0x8c>
   {
      dtrap(); /* prog error - connenction not in list */
 802ffb8:	80301a80 	call	80301a8 <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
 802ffbc:	0009883a 	mov	r4,zero
 802ffc0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return;
 802ffc4:	00000e06 	br	8030000 <udp_close+0xc4>
   }

   if (lcon)   /* in con is not head of list */
 802ffc8:	e0bffe17 	ldw	r2,-8(fp)
 802ffcc:	10000526 	beq	r2,zero,802ffe4 <udp_close+0xa8>
      lcon->u_next = con->u_next;   /* unlink */
 802ffd0:	e0bffd17 	ldw	r2,-12(fp)
 802ffd4:	10c00017 	ldw	r3,0(r2)
 802ffd8:	e0bffe17 	ldw	r2,-8(fp)
 802ffdc:	10c00015 	stw	r3,0(r2)
 802ffe0:	00000306 	br	802fff0 <udp_close+0xb4>
   else
      firstudp = con->u_next; /* remove from head */
 802ffe4:	e0bffd17 	ldw	r2,-12(fp)
 802ffe8:	10800017 	ldw	r2,0(r2)
 802ffec:	d0a09715 	stw	r2,-32164(gp)

   UC_FREE(con);  /* free memory for structure */
 802fff0:	e13ffd17 	ldw	r4,-12(fp)
 802fff4:	8030d3c0 	call	8030d3c <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
 802fff8:	0009883a 	mov	r4,zero
 802fffc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
}
 8030000:	e037883a 	mov	sp,fp
 8030004:	dfc00117 	ldw	ra,4(sp)
 8030008:	df000017 	ldw	fp,0(sp)
 803000c:	dec00204 	addi	sp,sp,8
 8030010:	f800283a 	ret

08030014 <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
 8030014:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
 8030018:	0140620e 	bge	zero,r5,80301a4 <done>

      mov   r6, zero		       /* carry accumulator */
 803001c:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
 8030020:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
 8030024:	18000326 	beq	r3,zero,8030034 <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
 8030028:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
 803002c:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
 8030030:	297fffc4 	addi	r5,r5,-1

08030034 <asm1>:
 8030034:	02c200f4 	movhi	r11,2051
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
 8030038:	5ac05804 	addi	r11,r11,352
      andi  r9, r5, 1		       /* r9 = last halfword flag */
 803003c:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
 8030040:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
 8030044:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
 8030048:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
 803004c:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
 8030050:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
 8030054:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
 8030058:	5800683a 	jmp	r11

0803005c <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
 803005c:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
 8030060:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
 8030064:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030068:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803006c:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
 8030070:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
 8030074:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030078:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803007c:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
 8030080:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
 8030084:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030088:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803008c:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
 8030090:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
 8030094:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030098:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803009c:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
 80300a0:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
 80300a4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300a8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300ac:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
 80300b0:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
 80300b4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300b8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300bc:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
 80300c0:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
 80300c4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300c8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300cc:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
 80300d0:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
 80300d4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300d8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300dc:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
 80300e0:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
 80300e4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300e8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300ec:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
 80300f0:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
 80300f4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 80300f8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 80300fc:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
 8030100:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
 8030104:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030108:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803010c:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
 8030110:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
 8030114:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030118:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803011c:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
 8030120:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
 8030124:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030128:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803012c:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
 8030130:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
 8030134:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030138:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803013c:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
 8030140:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
 8030144:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030148:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803014c:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
 8030150:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
 8030154:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030158:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 803015c:	418d883a 	add	r6,r8,r6

08030160 <loop0>:
loop0:
      subi  r5, r5, 16
 8030160:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
 8030164:	283fbd0e 	bge	r5,zero,803005c <loop>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
 8030168:	48000426 	beq	r9,zero,803017c <fold>
      ldhu  r7, 0(r4)
 803016c:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
 8030170:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 8030174:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 8030178:	418d883a 	add	r6,r8,r6

0803017c <fold>:
      
fold:
      srli  r7, r2, 16
 803017c:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 8030180:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
 8030184:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
 8030188:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
 803018c:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 8030190:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
 8030194:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
 8030198:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 803019c:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
 80301a0:	3885883a 	add	r2,r7,r2

080301a4 <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
 80301a4:	f800283a 	ret

080301a8 <dtrap>:
void irq_Unmask(void);

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
 80301a8:	defffe04 	addi	sp,sp,-8
 80301ac:	dfc00115 	stw	ra,4(sp)
 80301b0:	df000015 	stw	fp,0(sp)
 80301b4:	d839883a 	mov	fp,sp
   printf("dtrap - needs breakpoint\n");
 80301b8:	01020174 	movhi	r4,2053
 80301bc:	210e1804 	addi	r4,r4,14432
 80301c0:	8003ca80 	call	8003ca8 <puts>
}
 80301c4:	0001883a 	nop
 80301c8:	e037883a 	mov	sp,fp
 80301cc:	dfc00117 	ldw	ra,4(sp)
 80301d0:	df000017 	ldw	fp,0(sp)
 80301d4:	dec00204 	addi	sp,sp,8
 80301d8:	f800283a 	ret

080301dc <kbhit>:

int
kbhit()
{
 80301dc:	defffd04 	addi	sp,sp,-12
 80301e0:	dfc00215 	stw	ra,8(sp)
 80301e4:	df000115 	stw	fp,4(sp)
 80301e8:	df000104 	addi	fp,sp,4
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
 80301ec:	d0a09b17 	ldw	r2,-32148(gp)
 80301f0:	10000b1e 	bne	r2,zero,8030220 <kbhit+0x44>
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 80301f4:	01900004 	movi	r6,16384
 80301f8:	01400104 	movi	r5,4
 80301fc:	0009883a 	mov	r4,zero
 8030200:	80406d80 	call	80406d8 <fcntl>
 8030204:	10000426 	beq	r2,zero,8030218 <kbhit+0x3c>
      {
         printf("F_SETFL failed.\n");
 8030208:	01020174 	movhi	r4,2053
 803020c:	210e1f04 	addi	r4,r4,14460
 8030210:	8003ca80 	call	8003ca8 <puts>
         dtrap();
 8030214:	80301a80 	call	80301a8 <dtrap>
      }
      kbd_init = 1; 
 8030218:	00800044 	movi	r2,1
 803021c:	d0a09b15 	stw	r2,-32148(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 8030220:	d0a03617 	ldw	r2,-32552(gp)
 8030224:	10bfffd8 	cmpnei	r2,r2,-1
 8030228:	1000081e 	bne	r2,zero,803024c <kbhit+0x70>
   {
      kb = getchar();
 803022c:	80037440 	call	8003744 <getchar>
 8030230:	e0bfff15 	stw	r2,-4(fp)
      if (kb < 0)       /* any error means no character present */
 8030234:	e0bfff17 	ldw	r2,-4(fp)
 8030238:	1000020e 	bge	r2,zero,8030244 <kbhit+0x68>
         return (FALSE);
 803023c:	0005883a 	mov	r2,zero
 8030240:	00000306 	br	8030250 <kbhit+0x74>
         
      /* there was a character, and we read it. */
      kb_last = kb;
 8030244:	e0bfff17 	ldw	r2,-4(fp)
 8030248:	d0a03615 	stw	r2,-32552(gp)
   }

   return (TRUE);
 803024c:	00800044 	movi	r2,1
}
 8030250:	e037883a 	mov	sp,fp
 8030254:	dfc00117 	ldw	ra,4(sp)
 8030258:	df000017 	ldw	fp,0(sp)
 803025c:	dec00204 	addi	sp,sp,8
 8030260:	f800283a 	ret

08030264 <getch>:

int 
getch()
{
 8030264:	defffd04 	addi	sp,sp,-12
 8030268:	dfc00215 	stw	ra,8(sp)
 803026c:	df000115 	stw	fp,4(sp)
 8030270:	df000104 	addi	fp,sp,4
int chr;

   if(kb_last != EOF)
 8030274:	d0a03617 	ldw	r2,-32552(gp)
 8030278:	10bfffe0 	cmpeqi	r2,r2,-1
 803027c:	1000051e 	bne	r2,zero,8030294 <getch+0x30>
   {
      chr = kb_last;
 8030280:	d0a03617 	ldw	r2,-32552(gp)
 8030284:	e0bfff15 	stw	r2,-4(fp)
      kb_last = EOF;
 8030288:	00bfffc4 	movi	r2,-1
 803028c:	d0a03615 	stw	r2,-32552(gp)
 8030290:	00000206 	br	803029c <getch+0x38>
   }
   else
      chr = getchar();
 8030294:	80037440 	call	8003744 <getchar>
 8030298:	e0bfff15 	stw	r2,-4(fp)

   return chr;
 803029c:	e0bfff17 	ldw	r2,-4(fp)
}
 80302a0:	e037883a 	mov	sp,fp
 80302a4:	dfc00117 	ldw	ra,4(sp)
 80302a8:	df000017 	ldw	fp,0(sp)
 80302ac:	dec00204 	addi	sp,sp,8
 80302b0:	f800283a 	ret

080302b4 <clock_init>:
int OS_TPS;
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
 80302b4:	deffff04 	addi	sp,sp,-4
 80302b8:	df000015 	stw	fp,0(sp)
 80302bc:	d839883a 	mov	fp,sp
   OS_TPS = OS_TICKS_PER_SEC;
 80302c0:	00801904 	movi	r2,100
 80302c4:	d0a09d15 	stw	r2,-32140(gp)
   cticks_factor = 0;
 80302c8:	d0209c15 	stw	zero,-32144(gp)
   cticks = 0;
 80302cc:	d020a315 	stw	zero,-32116(gp)
   cticks_initialized = 1;
 80302d0:	00800044 	movi	r2,1
 80302d4:	d0a09815 	stw	r2,-32160(gp)
}
 80302d8:	0001883a 	nop
 80302dc:	e037883a 	mov	sp,fp
 80302e0:	df000017 	ldw	fp,0(sp)
 80302e4:	dec00104 	addi	sp,sp,4
 80302e8:	f800283a 	ret

080302ec <clock_c>:

/* undo effects of clock_init (i.e. restore ISR vector) 
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
 80302ec:	deffff04 	addi	sp,sp,-4
 80302f0:	df000015 	stw	fp,0(sp)
 80302f4:	d839883a 	mov	fp,sp
   /* null */ ;
}
 80302f8:	0001883a 	nop
 80302fc:	e037883a 	mov	sp,fp
 8030300:	df000017 	ldw	fp,0(sp)
 8030304:	dec00104 	addi	sp,sp,4
 8030308:	f800283a 	ret

0803030c <cticks_hook>:
 * Use the uCOS-II/Altera HAL BSP's timer and scale cticks as per TPS.
 */

void
cticks_hook(void)
{
 803030c:	deffff04 	addi	sp,sp,-4
 8030310:	df000015 	stw	fp,0(sp)
 8030314:	d839883a 	mov	fp,sp
   if (cticks_initialized) 
 8030318:	d0a09817 	ldw	r2,-32160(gp)
 803031c:	10000d26 	beq	r2,zero,8030354 <cticks_hook+0x48>
   {
      cticks_factor += TPS;
 8030320:	d0a09c17 	ldw	r2,-32144(gp)
 8030324:	10801904 	addi	r2,r2,100
 8030328:	d0a09c15 	stw	r2,-32144(gp)
      if (cticks_factor >= OS_TPS)
 803032c:	d0e09c17 	ldw	r3,-32144(gp)
 8030330:	d0a09d17 	ldw	r2,-32140(gp)
 8030334:	18800716 	blt	r3,r2,8030354 <cticks_hook+0x48>
      {
         cticks++;
 8030338:	d0a0a317 	ldw	r2,-32116(gp)
 803033c:	10800044 	addi	r2,r2,1
 8030340:	d0a0a315 	stw	r2,-32116(gp)
         cticks_factor -= OS_TPS;
 8030344:	d0e09c17 	ldw	r3,-32144(gp)
 8030348:	d0a09d17 	ldw	r2,-32140(gp)
 803034c:	1885c83a 	sub	r2,r3,r2
 8030350:	d0a09c15 	stw	r2,-32144(gp)
#ifdef USE_LCD
         update_display();
#endif
      }
   }
}
 8030354:	0001883a 	nop
 8030358:	e037883a 	mov	sp,fp
 803035c:	df000017 	ldw	fp,0(sp)
 8030360:	dec00104 	addi	sp,sp,4
 8030364:	f800283a 	ret

08030368 <irq_Mask>:
 * ENTER_CRIT_SECTION() and enable them in EXIT_CRIT_SECTION()
 * because calls to ENTER_CRIT_SECTION() can be nested."
 */
void
irq_Mask(void)
{
 8030368:	defffd04 	addi	sp,sp,-12
 803036c:	df000215 	stw	fp,8(sp)
 8030370:	df000204 	addi	fp,sp,8
  NIOS2_READ_STATUS (context);
 8030374:	0005303a 	rdctl	r2,status
 8030378:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803037c:	e0fffe17 	ldw	r3,-8(fp)
 8030380:	00bfff84 	movi	r2,-2
 8030384:	1884703a 	and	r2,r3,r2
 8030388:	1001703a 	wrctl	status,r2
  return context;
 803038c:	e0bffe17 	ldw	r2,-8(fp)
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
 8030390:	e0bfff15 	stw	r2,-4(fp)
	
   if (++irq_level == 1)
 8030394:	d0a09917 	ldw	r2,-32156(gp)
 8030398:	10800044 	addi	r2,r2,1
 803039c:	d0a09915 	stw	r2,-32156(gp)
 80303a0:	d0a09917 	ldw	r2,-32156(gp)
 80303a4:	10800058 	cmpnei	r2,r2,1
 80303a8:	1000021e 	bne	r2,zero,80303b4 <irq_Mask+0x4c>
   {
      cpu_statusreg = local_cpu_statusreg;
 80303ac:	e0bfff17 	ldw	r2,-4(fp)
 80303b0:	d0a09a15 	stw	r2,-32152(gp)
   }
}
 80303b4:	0001883a 	nop
 80303b8:	e037883a 	mov	sp,fp
 80303bc:	df000017 	ldw	fp,0(sp)
 80303c0:	dec00104 	addi	sp,sp,4
 80303c4:	f800283a 	ret

080303c8 <irq_Unmask>:


/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
 80303c8:	defffe04 	addi	sp,sp,-8
 80303cc:	df000115 	stw	fp,4(sp)
 80303d0:	df000104 	addi	fp,sp,4
   if (--irq_level == 0)
 80303d4:	d0a09917 	ldw	r2,-32156(gp)
 80303d8:	10bfffc4 	addi	r2,r2,-1
 80303dc:	d0a09915 	stw	r2,-32156(gp)
 80303e0:	d0a09917 	ldw	r2,-32156(gp)
 80303e4:	1000051e 	bne	r2,zero,80303fc <irq_Unmask+0x34>
   {
      alt_irq_enable_all(cpu_statusreg);
 80303e8:	d0a09a17 	ldw	r2,-32152(gp)
 80303ec:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_WRITE_STATUS (context);
 80303f0:	e0bfff17 	ldw	r2,-4(fp)
 80303f4:	1001703a 	wrctl	status,r2
}
 80303f8:	0001883a 	nop
   }
}
 80303fc:	0001883a 	nop
 8030400:	e037883a 	mov	sp,fp
 8030404:	df000017 	ldw	fp,0(sp)
 8030408:	dec00104 	addi	sp,sp,4
 803040c:	f800283a 	ret

08030410 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
 8030410:	defffb04 	addi	sp,sp,-20
 8030414:	dfc00415 	stw	ra,16(sp)
 8030418:	df000315 	stw	fp,12(sp)
 803041c:	df000304 	addi	fp,sp,12
 8030420:	e13ffd15 	stw	r4,-12(fp)
   INT8U error = 0;
 8030424:	e03ffec5 	stb	zero,-5(fp)
   int   errct = 0;
 8030428:	e03fff15 	stw	zero,-4(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 803042c:	e0bffd17 	ldw	r2,-12(fp)
 8030430:	10002016 	blt	r2,zero,80304b4 <LOCK_NET_RESOURCE+0xa4>
 8030434:	e0bffd17 	ldw	r2,-12(fp)
 8030438:	10800408 	cmpgei	r2,r2,16
 803043c:	10001d1e 	bne	r2,zero,80304b4 <LOCK_NET_RESOURCE+0xa4>
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
 8030440:	e0bffd17 	ldw	r2,-12(fp)
 8030444:	100690ba 	slli	r3,r2,2
 8030448:	008201b4 	movhi	r2,2054
 803044c:	1885883a 	add	r2,r3,r2
 8030450:	10bef517 	ldw	r2,-1068(r2)
 8030454:	e0fffec4 	addi	r3,fp,-5
 8030458:	180d883a 	mov	r6,r3
 803045c:	000b883a 	mov	r5,zero
 8030460:	1009883a 	mov	r4,r2
 8030464:	801a6700 	call	801a670 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 8030468:	e0bffec3 	ldbu	r2,-5(fp)
 803046c:	10803fcc 	andi	r2,r2,255
 8030470:	10800298 	cmpnei	r2,r2,10
 8030474:	10000a1e 	bne	r2,zero,80304a0 <LOCK_NET_RESOURCE+0x90>
 8030478:	e0bfff17 	ldw	r2,-4(fp)
 803047c:	10800044 	addi	r2,r2,1
 8030480:	e0bfff15 	stw	r2,-4(fp)
 8030484:	e0bfff17 	ldw	r2,-4(fp)
 8030488:	1080fa50 	cmplti	r2,r2,1001
 803048c:	1000041e 	bne	r2,zero,80304a0 <LOCK_NET_RESOURCE+0x90>
         {
            panic("lock NET");   /* fatal */
 8030490:	01020174 	movhi	r4,2053
 8030494:	210e2304 	addi	r4,r4,14476
 8030498:	802bd8c0 	call	802bd8c <panic>
 803049c:	00000606 	br	80304b8 <LOCK_NET_RESOURCE+0xa8>
            return;
         }
      } while (error == 10);
 80304a0:	e0bffec3 	ldbu	r2,-5(fp)
 80304a4:	10803fcc 	andi	r2,r2,255
 80304a8:	108002a0 	cmpeqi	r2,r2,10
 80304ac:	103fe41e 	bne	r2,zero,8030440 <LOCK_NET_RESOURCE+0x30>
   if ((0 <= resid) && (resid <= MAX_RESID))
 80304b0:	00000106 	br	80304b8 <LOCK_NET_RESOURCE+0xa8>
   }
   else
      dtrap();
 80304b4:	80301a80 	call	80301a8 <dtrap>
}
 80304b8:	e037883a 	mov	sp,fp
 80304bc:	dfc00117 	ldw	ra,4(sp)
 80304c0:	df000017 	ldw	fp,0(sp)
 80304c4:	dec00204 	addi	sp,sp,8
 80304c8:	f800283a 	ret

080304cc <UNLOCK_NET_RESOURCE>:

void
UNLOCK_NET_RESOURCE(int resid)
{
 80304cc:	defffc04 	addi	sp,sp,-16
 80304d0:	dfc00315 	stw	ra,12(sp)
 80304d4:	df000215 	stw	fp,8(sp)
 80304d8:	df000204 	addi	fp,sp,8
 80304dc:	e13ffe15 	stw	r4,-8(fp)
   INT8U error = 0;
 80304e0:	e03fffc5 	stb	zero,-1(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 80304e4:	e0bffe17 	ldw	r2,-8(fp)
 80304e8:	10001116 	blt	r2,zero,8030530 <UNLOCK_NET_RESOURCE+0x64>
 80304ec:	e0bffe17 	ldw	r2,-8(fp)
 80304f0:	10800408 	cmpgei	r2,r2,16
 80304f4:	10000e1e 	bne	r2,zero,8030530 <UNLOCK_NET_RESOURCE+0x64>
   {
      error = OSSemPost(resid_semaphore[resid]);
 80304f8:	e0bffe17 	ldw	r2,-8(fp)
 80304fc:	100690ba 	slli	r3,r2,2
 8030500:	008201b4 	movhi	r2,2054
 8030504:	1885883a 	add	r2,r3,r2
 8030508:	10bef517 	ldw	r2,-1068(r2)
 803050c:	1009883a 	mov	r4,r2
 8030510:	801a9f80 	call	801a9f8 <OSSemPost>
 8030514:	e0bfffc5 	stb	r2,-1(fp)
      if (error != OS_NO_ERR)
 8030518:	e0bfffc3 	ldbu	r2,-1(fp)
 803051c:	10000626 	beq	r2,zero,8030538 <UNLOCK_NET_RESOURCE+0x6c>
      {
         panic("unlock NET");
 8030520:	01020174 	movhi	r4,2053
 8030524:	210e2604 	addi	r4,r4,14488
 8030528:	802bd8c0 	call	802bd8c <panic>
      if (error != OS_NO_ERR)
 803052c:	00000206 	br	8030538 <UNLOCK_NET_RESOURCE+0x6c>
      }
   }
   else
      dtrap();
 8030530:	80301a80 	call	80301a8 <dtrap>
}
 8030534:	0001883a 	nop
 8030538:	0001883a 	nop
 803053c:	e037883a 	mov	sp,fp
 8030540:	dfc00117 	ldw	ra,4(sp)
 8030544:	df000017 	ldw	fp,0(sp)
 8030548:	dec00204 	addi	sp,sp,8
 803054c:	f800283a 	ret

08030550 <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
 8030550:	deffee04 	addi	sp,sp,-72
 8030554:	dfc01115 	stw	ra,68(sp)
 8030558:	df001015 	stw	fp,64(sp)
 803055c:	df001004 	addi	fp,sp,64
 8030560:	e13ff515 	stw	r4,-44(fp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 8030564:	e0bff517 	ldw	r2,-44(fp)
 8030568:	10800417 	ldw	r2,16(r2)
 803056c:	1009883a 	mov	r4,r2
 8030570:	8030d080 	call	8030d08 <npalloc>
 8030574:	e0bfff15 	stw	r2,-4(fp)
   if(!stack)
 8030578:	e0bfff17 	ldw	r2,-4(fp)
 803057c:	1000031e 	bne	r2,zero,803058c <TK_NEWTASK+0x3c>
      panic("stack alloc");
 8030580:	01020174 	movhi	r4,2053
 8030584:	210e2904 	addi	r4,r4,14500
 8030588:	802bd8c0 	call	802bd8c <panic>

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
 803058c:	e0bff517 	ldw	r2,-44(fp)
 8030590:	12000217 	ldw	r8,8(r2)
      nettask->entry,
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
 8030594:	e0bff517 	ldw	r2,-44(fp)
 8030598:	10800417 	ldw	r2,16(r2)
 803059c:	1007883a 	mov	r3,r2
 80305a0:	00bfff04 	movi	r2,-4
 80305a4:	1884703a 	and	r2,r3,r2
 80305a8:	10bfff04 	addi	r2,r2,-4
   error = OSTaskCreateExt(
 80305ac:	e0ffff17 	ldw	r3,-4(fp)
 80305b0:	188b883a 	add	r5,r3,r2
      nettask->priority,
 80305b4:	e0bff517 	ldw	r2,-44(fp)
 80305b8:	10800317 	ldw	r2,12(r2)
   error = OSTaskCreateExt(
 80305bc:	11803fcc 	andi	r6,r2,255
      nettask->priority,
 80305c0:	e0bff517 	ldw	r2,-44(fp)
 80305c4:	10800317 	ldw	r2,12(r2)
   error = OSTaskCreateExt(
 80305c8:	10bfffcc 	andi	r2,r2,65535
      stack, 
      (INT32U)nettask->stacksize / sizeof(OS_STK),
 80305cc:	e0fff517 	ldw	r3,-44(fp)
 80305d0:	18c00417 	ldw	r3,16(r3)
   error = OSTaskCreateExt(
 80305d4:	1806d0ba 	srli	r3,r3,2
 80305d8:	010000c4 	movi	r4,3
 80305dc:	d9000415 	stw	r4,16(sp)
 80305e0:	d8000315 	stw	zero,12(sp)
 80305e4:	d8c00215 	stw	r3,8(sp)
 80305e8:	e0ffff17 	ldw	r3,-4(fp)
 80305ec:	d8c00115 	stw	r3,4(sp)
 80305f0:	d8800015 	stw	r2,0(sp)
 80305f4:	300f883a 	mov	r7,r6
 80305f8:	280d883a 	mov	r6,r5
 80305fc:	000b883a 	mov	r5,zero
 8030600:	4009883a 	mov	r4,r8
 8030604:	801b3900 	call	801b390 <OSTaskCreateExt>
 8030608:	e0bffec5 	stb	r2,-5(fp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 803060c:	e0bffec3 	ldbu	r2,-5(fp)
 8030610:	10803fcc 	andi	r2,r2,255
 8030614:	10800a18 	cmpnei	r2,r2,40
 8030618:	10001c1e 	bne	r2,zero,803068c <TK_NEWTASK+0x13c>
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, (INT8U*)curr_task, &err);
 803061c:	e0bff517 	ldw	r2,-44(fp)
 8030620:	10800317 	ldw	r2,12(r2)
 8030624:	10803fcc 	andi	r2,r2,255
 8030628:	e13ffe84 	addi	r4,fp,-6
 803062c:	e0fff684 	addi	r3,fp,-38
 8030630:	200d883a 	mov	r6,r4
 8030634:	180b883a 	mov	r5,r3
 8030638:	1009883a 	mov	r4,r2
 803063c:	801ba080 	call	801ba08 <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
 8030640:	e03ffe45 	stb	zero,-7(fp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
 8030644:	e0bff517 	ldw	r2,-44(fp)
 8030648:	10c00117 	ldw	r3,4(r2)
 803064c:	e0bff517 	ldw	r2,-44(fp)
 8030650:	11000317 	ldw	r4,12(r2)
 8030654:	e0bff517 	ldw	r2,-44(fp)
 8030658:	10800317 	ldw	r2,12(r2)
 803065c:	e17ff684 	addi	r5,fp,-38
 8030660:	d8800015 	stw	r2,0(sp)
 8030664:	280f883a 	mov	r7,r5
 8030668:	200d883a 	mov	r6,r4
 803066c:	180b883a 	mov	r5,r3
 8030670:	01020174 	movhi	r4,2053
 8030674:	210e2c04 	addi	r4,r4,14512
 8030678:	8003b840 	call	8003b84 <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
 803067c:	01020174 	movhi	r4,2053
 8030680:	210e4404 	addi	r4,r4,14608
 8030684:	8003ca80 	call	8003ca8 <puts>
 8030688:	00002006 	br	803070c <TK_NEWTASK+0x1bc>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
 803068c:	e0bffec3 	ldbu	r2,-5(fp)
 8030690:	10803fcc 	andi	r2,r2,255
 8030694:	10800a98 	cmpnei	r2,r2,42
 8030698:	10000e1e 	bne	r2,zero,80306d4 <TK_NEWTASK+0x184>
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
 803069c:	e0bff517 	ldw	r2,-44(fp)
 80306a0:	10c00117 	ldw	r3,4(r2)
 80306a4:	e0bff517 	ldw	r2,-44(fp)
 80306a8:	10800317 	ldw	r2,12(r2)
 80306ac:	01c00504 	movi	r7,20
 80306b0:	100d883a 	mov	r6,r2
 80306b4:	180b883a 	mov	r5,r3
 80306b8:	01020174 	movhi	r4,2053
 80306bc:	210e6c04 	addi	r4,r4,14768
 80306c0:	8003b840 	call	8003b84 <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
 80306c4:	01020174 	movhi	r4,2053
 80306c8:	210e8904 	addi	r4,r4,14884
 80306cc:	8003ca80 	call	8003ca8 <puts>
 80306d0:	00000e06 	br	803070c <TK_NEWTASK+0x1bc>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
 80306d4:	e0bffec3 	ldbu	r2,-5(fp)
 80306d8:	10803fcc 	andi	r2,r2,255
 80306dc:	10000b26 	beq	r2,zero,803070c <TK_NEWTASK+0x1bc>
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
 80306e0:	e0bffec3 	ldbu	r2,-5(fp)
 80306e4:	10c03fcc 	andi	r3,r2,255
 80306e8:	e0bff517 	ldw	r2,-44(fp)
 80306ec:	10800117 	ldw	r2,4(r2)
 80306f0:	100d883a 	mov	r6,r2
 80306f4:	180b883a 	mov	r5,r3
 80306f8:	01020174 	movhi	r4,2053
 80306fc:	210ea804 	addi	r4,r4,15008
 8030700:	8003b840 	call	8003b84 <printf>
             error, nettask->name);
      return (-1);
 8030704:	00bfffc4 	movi	r2,-1
 8030708:	00001c06 	br	803077c <TK_NEWTASK+0x22c>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, (INT8U*)&nettask->name[0], &error);
 803070c:	e0bff517 	ldw	r2,-44(fp)
 8030710:	10800317 	ldw	r2,12(r2)
 8030714:	10c03fcc 	andi	r3,r2,255
 8030718:	e0bff517 	ldw	r2,-44(fp)
 803071c:	10800117 	ldw	r2,4(r2)
 8030720:	e13ffec4 	addi	r4,fp,-5
 8030724:	200d883a 	mov	r6,r4
 8030728:	100b883a 	mov	r5,r2
 803072c:	1809883a 	mov	r4,r3
 8030730:	801bba40 	call	801bba4 <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
 8030734:	e0bff517 	ldw	r2,-44(fp)
 8030738:	e0ffff17 	ldw	r3,-4(fp)
 803073c:	10c00515 	stw	r3,20(r2)
   *nettask->tk_ptr = (INT8U)nettask->priority;  
 8030740:	e0bff517 	ldw	r2,-44(fp)
 8030744:	10c00317 	ldw	r3,12(r2)
 8030748:	e0bff517 	ldw	r2,-44(fp)
 803074c:	10800017 	ldw	r2,0(r2)
 8030750:	10c00005 	stb	r3,0(r2)

   printf("Created \"%s\" task (Prio: %d)\n",
 8030754:	e0bff517 	ldw	r2,-44(fp)
 8030758:	10c00117 	ldw	r3,4(r2)
 803075c:	e0bff517 	ldw	r2,-44(fp)
 8030760:	10800317 	ldw	r2,12(r2)
 8030764:	100d883a 	mov	r6,r2
 8030768:	180b883a 	mov	r5,r3
 803076c:	01020174 	movhi	r4,2053
 8030770:	210eb604 	addi	r4,r4,15064
 8030774:	8003b840 	call	8003b84 <printf>
         (char *)nettask->name, nettask->priority);

   return (0);
 8030778:	0005883a 	mov	r2,zero
}
 803077c:	e037883a 	mov	sp,fp
 8030780:	dfc00117 	ldw	ra,4(sp)
 8030784:	df000017 	ldw	fp,0(sp)
 8030788:	dec00204 	addi	sp,sp,8
 803078c:	f800283a 	ret

08030790 <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
 8030790:	defffb04 	addi	sp,sp,-20
 8030794:	dfc00415 	stw	ra,16(sp)
 8030798:	df000315 	stw	fp,12(sp)
 803079c:	df000304 	addi	fp,sp,12
 80307a0:	e13ffd15 	stw	r4,-12(fp)
   INT8U error = 0;
 80307a4:	e03ffec5 	stb	zero,-5(fp)
   int   errct = 0;
 80307a8:	e03fff15 	stw	zero,-4(fp)

   if ((0 <= semid) && (semid <= MAX_SEMID))
 80307ac:	e0bffd17 	ldw	r2,-12(fp)
 80307b0:	108001a8 	cmpgeui	r2,r2,6
 80307b4:	10001d1e 	bne	r2,zero,803082c <wait_app_sem+0x9c>
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
 80307b8:	e0bffd17 	ldw	r2,-12(fp)
 80307bc:	100690ba 	slli	r3,r2,2
 80307c0:	008201b4 	movhi	r2,2054
 80307c4:	1885883a 	add	r2,r3,r2
 80307c8:	10bf0517 	ldw	r2,-1004(r2)
 80307cc:	e0fffec4 	addi	r3,fp,-5
 80307d0:	180d883a 	mov	r6,r3
 80307d4:	000b883a 	mov	r5,zero
 80307d8:	1009883a 	mov	r4,r2
 80307dc:	801a6700 	call	801a670 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 80307e0:	e0bffec3 	ldbu	r2,-5(fp)
 80307e4:	10803fcc 	andi	r2,r2,255
 80307e8:	10800298 	cmpnei	r2,r2,10
 80307ec:	10000a1e 	bne	r2,zero,8030818 <wait_app_sem+0x88>
 80307f0:	e0bfff17 	ldw	r2,-4(fp)
 80307f4:	10800044 	addi	r2,r2,1
 80307f8:	e0bfff15 	stw	r2,-4(fp)
 80307fc:	e0bfff17 	ldw	r2,-4(fp)
 8030800:	1080fa50 	cmplti	r2,r2,1001
 8030804:	1000041e 	bne	r2,zero,8030818 <wait_app_sem+0x88>
         {
            panic("lock NET");   /* fatal */
 8030808:	01020174 	movhi	r4,2053
 803080c:	210e2304 	addi	r4,r4,14476
 8030810:	802bd8c0 	call	802bd8c <panic>
 8030814:	00000606 	br	8030830 <wait_app_sem+0xa0>
            return;
         }
      } while (error == 10);
 8030818:	e0bffec3 	ldbu	r2,-5(fp)
 803081c:	10803fcc 	andi	r2,r2,255
 8030820:	108002a0 	cmpeqi	r2,r2,10
 8030824:	103fe41e 	bne	r2,zero,80307b8 <wait_app_sem+0x28>
 8030828:	00000106 	br	8030830 <wait_app_sem+0xa0>
   }
   else
      dtrap();
 803082c:	80301a80 	call	80301a8 <dtrap>
}
 8030830:	e037883a 	mov	sp,fp
 8030834:	dfc00117 	ldw	ra,4(sp)
 8030838:	df000017 	ldw	fp,0(sp)
 803083c:	dec00204 	addi	sp,sp,8
 8030840:	f800283a 	ret

08030844 <post_app_sem>:
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
 8030844:	defffc04 	addi	sp,sp,-16
 8030848:	dfc00315 	stw	ra,12(sp)
 803084c:	df000215 	stw	fp,8(sp)
 8030850:	df000204 	addi	fp,sp,8
 8030854:	e13ffe15 	stw	r4,-8(fp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 8030858:	e0bffe17 	ldw	r2,-8(fp)
 803085c:	108001a8 	cmpgeui	r2,r2,6
 8030860:	10000e1e 	bne	r2,zero,803089c <post_app_sem+0x58>
   {
      error = OSSemPost(app_semaphore[semid]);
 8030864:	e0bffe17 	ldw	r2,-8(fp)
 8030868:	100690ba 	slli	r3,r2,2
 803086c:	008201b4 	movhi	r2,2054
 8030870:	1885883a 	add	r2,r3,r2
 8030874:	10bf0517 	ldw	r2,-1004(r2)
 8030878:	1009883a 	mov	r4,r2
 803087c:	801a9f80 	call	801a9f8 <OSSemPost>
 8030880:	e0bfffc5 	stb	r2,-1(fp)
      if (error != OS_NO_ERR)
 8030884:	e0bfffc3 	ldbu	r2,-1(fp)
 8030888:	10000526 	beq	r2,zero,80308a0 <post_app_sem+0x5c>
      {
         panic("unlock NET");
 803088c:	01020174 	movhi	r4,2053
 8030890:	210e2604 	addi	r4,r4,14488
 8030894:	802bd8c0 	call	802bd8c <panic>
      }
   }
   else
      dtrap();
}
 8030898:	00000106 	br	80308a0 <post_app_sem+0x5c>
      dtrap();
 803089c:	80301a80 	call	80301a8 <dtrap>
}
 80308a0:	0001883a 	nop
 80308a4:	e037883a 	mov	sp,fp
 80308a8:	dfc00117 	ldw	ra,4(sp)
 80308ac:	df000017 	ldw	fp,0(sp)
 80308b0:	dec00204 	addi	sp,sp,8
 80308b4:	f800283a 	ret

080308b8 <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
 80308b8:	defffd04 	addi	sp,sp,-12
 80308bc:	dfc00215 	stw	ra,8(sp)
 80308c0:	df000115 	stw	fp,4(sp)
 80308c4:	df000104 	addi	fp,sp,4
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
 80308c8:	01000044 	movi	r4,1
 80308cc:	801a3440 	call	801a344 <OSSemCreate>
 80308d0:	d0a0a515 	stw	r2,-32108(gp)
   if (!mheap_sem_ptr)
 80308d4:	d0a0a517 	ldw	r2,-32108(gp)
 80308d8:	1000031e 	bne	r2,zero,80308e8 <alt_iniche_init+0x30>
      panic("mheap_sem_ptr create err"); 
 80308dc:	01020174 	movhi	r4,2053
 80308e0:	210ebe04 	addi	r4,r4,15096
 80308e4:	802bd8c0 	call	802bd8c <panic>

   rcvdq_sem_ptr = OSSemCreate(0);
 80308e8:	0009883a 	mov	r4,zero
 80308ec:	801a3440 	call	801a344 <OSSemCreate>
 80308f0:	d0a0a615 	stw	r2,-32104(gp)
   if (!rcvdq_sem_ptr)
 80308f4:	d0a0a617 	ldw	r2,-32104(gp)
 80308f8:	1000031e 	bne	r2,zero,8030908 <alt_iniche_init+0x50>
      panic("rcvdq_sem_ptr create err"); 
 80308fc:	01020174 	movhi	r4,2053
 8030900:	210ec504 	addi	r4,r4,15124
 8030904:	802bd8c0 	call	802bd8c <panic>

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 8030908:	e03fff15 	stw	zero,-4(fp)
 803090c:	00001406 	br	8030960 <alt_iniche_init+0xa8>
   {
      resid_semaphore[i] = OSSemCreate(1);
 8030910:	01000044 	movi	r4,1
 8030914:	801a3440 	call	801a344 <OSSemCreate>
 8030918:	1009883a 	mov	r4,r2
 803091c:	e0bfff17 	ldw	r2,-4(fp)
 8030920:	100690ba 	slli	r3,r2,2
 8030924:	008201b4 	movhi	r2,2054
 8030928:	1885883a 	add	r2,r3,r2
 803092c:	113ef515 	stw	r4,-1068(r2)
      if (!resid_semaphore[i])
 8030930:	e0bfff17 	ldw	r2,-4(fp)
 8030934:	100690ba 	slli	r3,r2,2
 8030938:	008201b4 	movhi	r2,2054
 803093c:	1885883a 	add	r2,r3,r2
 8030940:	10bef517 	ldw	r2,-1068(r2)
 8030944:	1000031e 	bne	r2,zero,8030954 <alt_iniche_init+0x9c>
         panic("resid_semaphore create err");  
 8030948:	01020174 	movhi	r4,2053
 803094c:	210ecc04 	addi	r4,r4,15152
 8030950:	802bd8c0 	call	802bd8c <panic>
   for (i = 0; i <= MAX_RESID; i++)
 8030954:	e0bfff17 	ldw	r2,-4(fp)
 8030958:	10800044 	addi	r2,r2,1
 803095c:	e0bfff15 	stw	r2,-4(fp)
 8030960:	e0bfff17 	ldw	r2,-4(fp)
 8030964:	10800410 	cmplti	r2,r2,16
 8030968:	103fe91e 	bne	r2,zero,8030910 <alt_iniche_init+0x58>
   }
   for (i = 0; i <= MAX_SEMID; i++)
 803096c:	e03fff15 	stw	zero,-4(fp)
 8030970:	00001406 	br	80309c4 <alt_iniche_init+0x10c>
   {
      app_semaphore[i] = OSSemCreate(1);
 8030974:	01000044 	movi	r4,1
 8030978:	801a3440 	call	801a344 <OSSemCreate>
 803097c:	1009883a 	mov	r4,r2
 8030980:	e0bfff17 	ldw	r2,-4(fp)
 8030984:	100690ba 	slli	r3,r2,2
 8030988:	008201b4 	movhi	r2,2054
 803098c:	1885883a 	add	r2,r3,r2
 8030990:	113f0515 	stw	r4,-1004(r2)
      if (!app_semaphore[i])
 8030994:	e0bfff17 	ldw	r2,-4(fp)
 8030998:	100690ba 	slli	r3,r2,2
 803099c:	008201b4 	movhi	r2,2054
 80309a0:	1885883a 	add	r2,r3,r2
 80309a4:	10bf0517 	ldw	r2,-1004(r2)
 80309a8:	1000031e 	bne	r2,zero,80309b8 <alt_iniche_init+0x100>
         panic("app_semaphore create err");  
 80309ac:	01020174 	movhi	r4,2053
 80309b0:	210ed304 	addi	r4,r4,15180
 80309b4:	802bd8c0 	call	802bd8c <panic>
   for (i = 0; i <= MAX_SEMID; i++)
 80309b8:	e0bfff17 	ldw	r2,-4(fp)
 80309bc:	10800044 	addi	r2,r2,1
 80309c0:	e0bfff15 	stw	r2,-4(fp)
 80309c4:	e0bfff17 	ldw	r2,-4(fp)
 80309c8:	10800190 	cmplti	r2,r2,6
 80309cc:	103fe91e 	bne	r2,zero,8030974 <alt_iniche_init+0xbc>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 80309d0:	e03fff15 	stw	zero,-4(fp)
 80309d4:	00001e06 	br	8030a50 <alt_iniche_init+0x198>
   {
      global_TCPwakeup_set[i].ctick = 0;
 80309d8:	e0bfff17 	ldw	r2,-4(fp)
 80309dc:	10c00324 	muli	r3,r2,12
 80309e0:	008201b4 	movhi	r2,2054
 80309e4:	1885883a 	add	r2,r3,r2
 80309e8:	103eb915 	stw	zero,-1308(r2)
      global_TCPwakeup_set[i].soc_event = NULL;
 80309ec:	e0bfff17 	ldw	r2,-4(fp)
 80309f0:	10c00324 	muli	r3,r2,12
 80309f4:	008201b4 	movhi	r2,2054
 80309f8:	1885883a 	add	r2,r3,r2
 80309fc:	103eba15 	stw	zero,-1304(r2)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
 8030a00:	0009883a 	mov	r4,zero
 8030a04:	801a3440 	call	801a344 <OSSemCreate>
 8030a08:	1009883a 	mov	r4,r2
 8030a0c:	e0bfff17 	ldw	r2,-4(fp)
 8030a10:	10c00324 	muli	r3,r2,12
 8030a14:	008201b4 	movhi	r2,2054
 8030a18:	1885883a 	add	r2,r3,r2
 8030a1c:	113ebb15 	stw	r4,-1300(r2)
      if (!global_TCPwakeup_set[i].semaphore)
 8030a20:	e0bfff17 	ldw	r2,-4(fp)
 8030a24:	10c00324 	muli	r3,r2,12
 8030a28:	008201b4 	movhi	r2,2054
 8030a2c:	1885883a 	add	r2,r3,r2
 8030a30:	10bebb17 	ldw	r2,-1300(r2)
 8030a34:	1000031e 	bne	r2,zero,8030a44 <alt_iniche_init+0x18c>
         panic("globwake_semaphore create err");  
 8030a38:	01020174 	movhi	r4,2053
 8030a3c:	210eda04 	addi	r4,r4,15208
 8030a40:	802bd8c0 	call	802bd8c <panic>
   for (i = 0; i < GLOBWAKE_SZ; i++)
 8030a44:	e0bfff17 	ldw	r2,-4(fp)
 8030a48:	10800044 	addi	r2,r2,1
 8030a4c:	e0bfff15 	stw	r2,-4(fp)
 8030a50:	e0bfff17 	ldw	r2,-4(fp)
 8030a54:	10800510 	cmplti	r2,r2,20
 8030a58:	103fdf1e 	bne	r2,zero,80309d8 <alt_iniche_init+0x120>
   }
   global_TCPwakeup_setIndx = 0;
 8030a5c:	d020a215 	stw	zero,-32120(gp)
#endif  /* TCPWAKE_RTOS */
}
 8030a60:	0001883a 	nop
 8030a64:	e037883a 	mov	sp,fp
 8030a68:	dfc00117 	ldw	ra,4(sp)
 8030a6c:	df000017 	ldw	fp,0(sp)
 8030a70:	dec00204 	addi	sp,sp,8
 8030a74:	f800283a 	ret

08030a78 <pre_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
pre_task_setup()
{
 8030a78:	deffff04 	addi	sp,sp,-4
 8030a7c:	df000015 	stw	fp,0(sp)
 8030a80:	d839883a 	mov	fp,sp
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 8030a84:	00800784 	movi	r2,30
 8030a88:	d0a03415 	stw	r2,-32560(gp)
   lilbufs = MAXLILPKTS;
 8030a8c:	00800784 	movi	r2,30
 8030a90:	d0a03215 	stw	r2,-32568(gp)
   bigbufsiz = BIGBUFSIZE;
 8030a94:	00818004 	movi	r2,1536
 8030a98:	d0a03515 	stw	r2,-32556(gp)
   lilbufsiz = LILBUFSIZE;
 8030a9c:	00802004 	movi	r2,128
 8030aa0:	d0a03315 	stw	r2,-32564(gp)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
 8030aa4:	008200f4 	movhi	r2,2051
 8030aa8:	1082b904 	addi	r2,r2,2788
 8030aac:	d0a0c515 	stw	r2,-31980(gp)
#endif   /* NOTDEF */

#endif   /* USE_PPP */


   return NULL;
 8030ab0:	0005883a 	mov	r2,zero
}
 8030ab4:	e037883a 	mov	sp,fp
 8030ab8:	df000017 	ldw	fp,0(sp)
 8030abc:	dec00104 	addi	sp,sp,4
 8030ac0:	f800283a 	ret

08030ac4 <post_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
post_task_setup()
{
 8030ac4:	deffff04 	addi	sp,sp,-4
 8030ac8:	df000015 	stw	fp,0(sp)
 8030acc:	d839883a 	mov	fp,sp
   return NULL;
 8030ad0:	0005883a 	mov	r2,zero
}
 8030ad4:	e037883a 	mov	sp,fp
 8030ad8:	df000017 	ldw	fp,0(sp)
 8030adc:	dec00104 	addi	sp,sp,4
 8030ae0:	f800283a 	ret

08030ae4 <prep_armintcp>:

#endif  /* INCLUDE_NVPARMS */

int 
prep_armintcp(int ifaces_found)
{
 8030ae4:	defffd04 	addi	sp,sp,-12
 8030ae8:	dfc00215 	stw	ra,8(sp)
 8030aec:	df000115 	stw	fp,4(sp)
 8030af0:	df000104 	addi	fp,sp,4
 8030af4:	e13fff15 	stw	r4,-4(fp)
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
 8030af8:	e13fff17 	ldw	r4,-4(fp)
 8030afc:	8028c880 	call	8028c88 <iniche_devices_init>
 8030b00:	e0bfff15 	stw	r2,-4(fp)

#ifdef USE_SLIP
   ifaces_found = prep_slip(ifaces_found);
#endif

   return ifaces_found;
 8030b04:	e0bfff17 	ldw	r2,-4(fp)
}
 8030b08:	e037883a 	mov	sp,fp
 8030b0c:	dfc00117 	ldw	ra,4(sp)
 8030b10:	df000017 	ldw	fp,0(sp)
 8030b14:	dec00204 	addi	sp,sp,8
 8030b18:	f800283a 	ret

08030b1c <npalloc_base>:
#endif


char *
npalloc_base(unsigned size, int cacheable)
{
 8030b1c:	defff804 	addi	sp,sp,-32
 8030b20:	dfc00715 	stw	ra,28(sp)
 8030b24:	df000615 	stw	fp,24(sp)
 8030b28:	df000604 	addi	fp,sp,24
 8030b2c:	e13ffb15 	stw	r4,-20(fp)
 8030b30:	e17ffa15 	stw	r5,-24(fp)
char * ptr;
void *(*alloc_rtn)(size_t size) = cacheable ? malloc : alt_uncached_malloc;
 8030b34:	e0bffa17 	ldw	r2,-24(fp)
 8030b38:	10000326 	beq	r2,zero,8030b48 <npalloc_base+0x2c>
 8030b3c:	00820174 	movhi	r2,2053
 8030b40:	10b82104 	addi	r2,r2,-8060
 8030b44:	00000206 	br	8030b50 <npalloc_base+0x34>
 8030b48:	00820134 	movhi	r2,2052
 8030b4c:	10be2304 	addi	r2,r2,-1908
 8030b50:	e0bffe15 	stw	r2,-8(fp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
 8030b54:	d0a0a517 	ldw	r2,-32108(gp)
 8030b58:	e0fffcc4 	addi	r3,fp,-13
 8030b5c:	180d883a 	mov	r6,r3
 8030b60:	000b883a 	mov	r5,zero
 8030b64:	1009883a 	mov	r4,r2
 8030b68:	801a6700 	call	801a670 <OSSemPend>
   if(err)
 8030b6c:	e0bffcc3 	ldbu	r2,-13(fp)
 8030b70:	10803fcc 	andi	r2,r2,255
 8030b74:	10001626 	beq	r2,zero,8030bd0 <npalloc_base+0xb4>
   {
      int errct = 0;
 8030b78:	e03fff15 	stw	zero,-4(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 8030b7c:	00001006 	br	8030bc0 <npalloc_base+0xa4>
      {
         if(errct++ > 1000)
 8030b80:	e0bfff17 	ldw	r2,-4(fp)
 8030b84:	10c00044 	addi	r3,r2,1
 8030b88:	e0ffff15 	stw	r3,-4(fp)
 8030b8c:	1080fa50 	cmplti	r2,r2,1001
 8030b90:	1000051e 	bne	r2,zero,8030ba8 <npalloc_base+0x8c>
         {
            panic("npalloc");    /* fatal? */
 8030b94:	01020174 	movhi	r4,2053
 8030b98:	210ee204 	addi	r4,r4,15240
 8030b9c:	802bd8c0 	call	802bd8c <panic>
            return NULL;
 8030ba0:	0005883a 	mov	r2,zero
 8030ba4:	00001b06 	br	8030c14 <npalloc_base+0xf8>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 8030ba8:	d0a0a517 	ldw	r2,-32108(gp)
 8030bac:	e0fffcc4 	addi	r3,fp,-13
 8030bb0:	180d883a 	mov	r6,r3
 8030bb4:	000b883a 	mov	r5,zero
 8030bb8:	1009883a 	mov	r4,r2
 8030bbc:	801a6700 	call	801a670 <OSSemPend>
      while(err == 10)
 8030bc0:	e0bffcc3 	ldbu	r2,-13(fp)
 8030bc4:	10803fcc 	andi	r2,r2,255
 8030bc8:	108002a0 	cmpeqi	r2,r2,10
 8030bcc:	103fec1e 	bne	r2,zero,8030b80 <npalloc_base+0x64>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, alloc_rtn);
#else
   ptr = (*alloc_rtn)(size);
 8030bd0:	e0bffe17 	ldw	r2,-8(fp)
 8030bd4:	e13ffb17 	ldw	r4,-20(fp)
 8030bd8:	103ee83a 	callr	r2
 8030bdc:	e0bffd15 	stw	r2,-12(fp)
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 8030be0:	d0a0a517 	ldw	r2,-32108(gp)
 8030be4:	1009883a 	mov	r4,r2
 8030be8:	801a9f80 	call	801a9f8 <OSSemPost>
 8030bec:	e0bffcc5 	stb	r2,-13(fp)
#endif
   
   if(!ptr)
 8030bf0:	e0bffd17 	ldw	r2,-12(fp)
 8030bf4:	1000021e 	bne	r2,zero,8030c00 <npalloc_base+0xe4>
      return NULL;
 8030bf8:	0005883a 	mov	r2,zero
 8030bfc:	00000506 	br	8030c14 <npalloc_base+0xf8>

   MEMSET(ptr, 0, size);
 8030c00:	e1bffb17 	ldw	r6,-20(fp)
 8030c04:	000b883a 	mov	r5,zero
 8030c08:	e13ffd17 	ldw	r4,-12(fp)
 8030c0c:	80038cc0 	call	80038cc <memset>
   return ptr;      
 8030c10:	e0bffd17 	ldw	r2,-12(fp)
}
 8030c14:	e037883a 	mov	sp,fp
 8030c18:	dfc00117 	ldw	ra,4(sp)
 8030c1c:	df000017 	ldw	fp,0(sp)
 8030c20:	dec00204 	addi	sp,sp,8
 8030c24:	f800283a 	ret

08030c28 <npfree_base>:

void
npfree_base(void *ptr, int cacheable)
{
 8030c28:	defff904 	addi	sp,sp,-28
 8030c2c:	dfc00615 	stw	ra,24(sp)
 8030c30:	df000515 	stw	fp,20(sp)
 8030c34:	df000504 	addi	fp,sp,20
 8030c38:	e13ffc15 	stw	r4,-16(fp)
 8030c3c:	e17ffb15 	stw	r5,-20(fp)
   void (*free_rtn)(void *ptr) = cacheable ? free : alt_uncached_free;
 8030c40:	e0bffb17 	ldw	r2,-20(fp)
 8030c44:	10000326 	beq	r2,zero,8030c54 <npfree_base+0x2c>
 8030c48:	00820174 	movhi	r2,2053
 8030c4c:	10b82504 	addi	r2,r2,-8044
 8030c50:	00000206 	br	8030c5c <npfree_base+0x34>
 8030c54:	00820134 	movhi	r2,2052
 8030c58:	10be1204 	addi	r2,r2,-1976
 8030c5c:	e0bffe15 	stw	r2,-8(fp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
 8030c60:	d0a0a517 	ldw	r2,-32108(gp)
 8030c64:	e0fffdc4 	addi	r3,fp,-9
 8030c68:	180d883a 	mov	r6,r3
 8030c6c:	000b883a 	mov	r5,zero
 8030c70:	1009883a 	mov	r4,r2
 8030c74:	801a6700 	call	801a670 <OSSemPend>
   if (err)
 8030c78:	e0bffdc3 	ldbu	r2,-9(fp)
 8030c7c:	10803fcc 	andi	r2,r2,255
 8030c80:	10001526 	beq	r2,zero,8030cd8 <npfree_base+0xb0>
   {
      int errct = 0;
 8030c84:	e03fff15 	stw	zero,-4(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 8030c88:	00000f06 	br	8030cc8 <npfree_base+0xa0>
      {
         if (errct++ > 1000)
 8030c8c:	e0bfff17 	ldw	r2,-4(fp)
 8030c90:	10c00044 	addi	r3,r2,1
 8030c94:	e0ffff15 	stw	r3,-4(fp)
 8030c98:	1080fa50 	cmplti	r2,r2,1001
 8030c9c:	1000041e 	bne	r2,zero,8030cb0 <npfree_base+0x88>
         {
            panic("npfree");    /* fatal? */
 8030ca0:	01020174 	movhi	r4,2053
 8030ca4:	210ee404 	addi	r4,r4,15248
 8030ca8:	802bd8c0 	call	802bd8c <panic>
 8030cac:	00001106 	br	8030cf4 <npfree_base+0xcc>
            return;
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 8030cb0:	d0a0a517 	ldw	r2,-32108(gp)
 8030cb4:	e0fffdc4 	addi	r3,fp,-9
 8030cb8:	180d883a 	mov	r6,r3
 8030cbc:	000b883a 	mov	r5,zero
 8030cc0:	1009883a 	mov	r4,r2
 8030cc4:	801a6700 	call	801a670 <OSSemPend>
      while (err == 10)
 8030cc8:	e0bffdc3 	ldbu	r2,-9(fp)
 8030ccc:	10803fcc 	andi	r2,r2,255
 8030cd0:	108002a0 	cmpeqi	r2,r2,10
 8030cd4:	103fed1e 	bne	r2,zero,8030c8c <npfree_base+0x64>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free_rtn);
#else
   (*free_rtn)(ptr);
 8030cd8:	e0bffe17 	ldw	r2,-8(fp)
 8030cdc:	e13ffc17 	ldw	r4,-16(fp)
 8030ce0:	103ee83a 	callr	r2
#endif

   err = OSSemPost(mheap_sem_ptr);
 8030ce4:	d0a0a517 	ldw	r2,-32108(gp)
 8030ce8:	1009883a 	mov	r4,r2
 8030cec:	801a9f80 	call	801a9f8 <OSSemPost>
 8030cf0:	e0bffdc5 	stb	r2,-9(fp)
#else
   (*free_rtn)(ptr);
#endif
#endif

}
 8030cf4:	e037883a 	mov	sp,fp
 8030cf8:	dfc00117 	ldw	ra,4(sp)
 8030cfc:	df000017 	ldw	fp,0(sp)
 8030d00:	dec00204 	addi	sp,sp,8
 8030d04:	f800283a 	ret

08030d08 <npalloc>:

char *
npalloc(unsigned size)
{
 8030d08:	defffd04 	addi	sp,sp,-12
 8030d0c:	dfc00215 	stw	ra,8(sp)
 8030d10:	df000115 	stw	fp,4(sp)
 8030d14:	df000104 	addi	fp,sp,4
 8030d18:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 1);
 8030d1c:	01400044 	movi	r5,1
 8030d20:	e13fff17 	ldw	r4,-4(fp)
 8030d24:	8030b1c0 	call	8030b1c <npalloc_base>
}
 8030d28:	e037883a 	mov	sp,fp
 8030d2c:	dfc00117 	ldw	ra,4(sp)
 8030d30:	df000017 	ldw	fp,0(sp)
 8030d34:	dec00204 	addi	sp,sp,8
 8030d38:	f800283a 	ret

08030d3c <npfree>:

void
npfree(void *ptr)
{
 8030d3c:	defffd04 	addi	sp,sp,-12
 8030d40:	dfc00215 	stw	ra,8(sp)
 8030d44:	df000115 	stw	fp,4(sp)
 8030d48:	df000104 	addi	fp,sp,4
 8030d4c:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
 8030d50:	e0bfff17 	ldw	r2,-4(fp)
 8030d54:	10000326 	beq	r2,zero,8030d64 <npfree+0x28>
      npfree_base(ptr, 1);
 8030d58:	01400044 	movi	r5,1
 8030d5c:	e13fff17 	ldw	r4,-4(fp)
 8030d60:	8030c280 	call	8030c28 <npfree_base>
   }
}
 8030d64:	0001883a 	nop
 8030d68:	e037883a 	mov	sp,fp
 8030d6c:	dfc00117 	ldw	ra,4(sp)
 8030d70:	df000017 	ldw	fp,0(sp)
 8030d74:	dec00204 	addi	sp,sp,8
 8030d78:	f800283a 	ret

08030d7c <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
 8030d7c:	defffd04 	addi	sp,sp,-12
 8030d80:	dfc00215 	stw	ra,8(sp)
 8030d84:	df000115 	stw	fp,4(sp)
 8030d88:	df000104 	addi	fp,sp,4
 8030d8c:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 0);
 8030d90:	000b883a 	mov	r5,zero
 8030d94:	e13fff17 	ldw	r4,-4(fp)
 8030d98:	8030b1c0 	call	8030b1c <npalloc_base>
}
 8030d9c:	e037883a 	mov	sp,fp
 8030da0:	dfc00117 	ldw	ra,4(sp)
 8030da4:	df000017 	ldw	fp,0(sp)
 8030da8:	dec00204 	addi	sp,sp,8
 8030dac:	f800283a 	ret

08030db0 <ncpfree>:

void ncpfree(void *ptr)
{
 8030db0:	defffd04 	addi	sp,sp,-12
 8030db4:	dfc00215 	stw	ra,8(sp)
 8030db8:	df000115 	stw	fp,4(sp)
 8030dbc:	df000104 	addi	fp,sp,4
 8030dc0:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
 8030dc4:	e0bfff17 	ldw	r2,-4(fp)
 8030dc8:	10000326 	beq	r2,zero,8030dd8 <ncpfree+0x28>
      npfree_base(ptr, 0);
 8030dcc:	000b883a 	mov	r5,zero
 8030dd0:	e13fff17 	ldw	r4,-4(fp)
 8030dd4:	8030c280 	call	8030c28 <npfree_base>
   }
}
 8030dd8:	0001883a 	nop
 8030ddc:	e037883a 	mov	sp,fp
 8030de0:	dfc00117 	ldw	ra,4(sp)
 8030de4:	df000017 	ldw	fp,0(sp)
 8030de8:	dec00204 	addi	sp,sp,8
 8030dec:	f800283a 	ret

08030df0 <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
 8030df0:	defffc04 	addi	sp,sp,-16
 8030df4:	dfc00315 	stw	ra,12(sp)
 8030df8:	df000215 	stw	fp,8(sp)
 8030dfc:	df000204 	addi	fp,sp,8
 8030e00:	e13fff15 	stw	r4,-4(fp)
 8030e04:	e17ffe15 	stw	r5,-8(fp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
 8030e08:	e0bfff17 	ldw	r2,-4(fp)
 8030e0c:	108000a0 	cmpeqi	r2,r2,2
 8030e10:	1000031e 	bne	r2,zero,8030e20 <pffindtype+0x30>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
 8030e14:	80301a80 	call	80301a8 <dtrap>
         return NULL;
 8030e18:	0005883a 	mov	r2,zero
 8030e1c:	00001306 	br	8030e6c <pffindtype+0x7c>
      }
   }

   if (type == SOCK_STREAM)
 8030e20:	e0bffe17 	ldw	r2,-8(fp)
 8030e24:	10800058 	cmpnei	r2,r2,1
 8030e28:	1000031e 	bne	r2,zero,8030e38 <pffindtype+0x48>
      return &tcp_protosw;
 8030e2c:	00820174 	movhi	r2,2053
 8030e30:	109aec04 	addi	r2,r2,27568
 8030e34:	00000d06 	br	8030e6c <pffindtype+0x7c>
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
 8030e38:	e0bffe17 	ldw	r2,-8(fp)
 8030e3c:	10800098 	cmpnei	r2,r2,2
 8030e40:	1000031e 	bne	r2,zero,8030e50 <pffindtype+0x60>
      return &udp_protosw;
 8030e44:	00820174 	movhi	r2,2053
 8030e48:	109af204 	addi	r2,r2,27592
 8030e4c:	00000706 	br	8030e6c <pffindtype+0x7c>
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
 8030e50:	e0bffe17 	ldw	r2,-8(fp)
 8030e54:	108000d8 	cmpnei	r2,r2,3
 8030e58:	1000031e 	bne	r2,zero,8030e68 <pffindtype+0x78>
      return &rawip_protosw;
 8030e5c:	00820174 	movhi	r2,2053
 8030e60:	109af804 	addi	r2,r2,27616
 8030e64:	00000106 	br	8030e6c <pffindtype+0x7c>
#endif  /* IP_RAW */
   else
      return NULL;
 8030e68:	0005883a 	mov	r2,zero
}
 8030e6c:	e037883a 	mov	sp,fp
 8030e70:	dfc00117 	ldw	ra,4(sp)
 8030e74:	df000017 	ldw	fp,0(sp)
 8030e78:	dec00204 	addi	sp,sp,8
 8030e7c:	f800283a 	ret

08030e80 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
 8030e80:	defffb04 	addi	sp,sp,-20
 8030e84:	dfc00415 	stw	ra,16(sp)
 8030e88:	df000315 	stw	fp,12(sp)
 8030e8c:	df000304 	addi	fp,sp,12
 8030e90:	e13fff15 	stw	r4,-4(fp)
 8030e94:	e17ffe15 	stw	r5,-8(fp)
 8030e98:	e1bffd15 	stw	r6,-12(fp)
#ifdef IP_RAW
   if (type == SOCK_RAW)
 8030e9c:	e0bffd17 	ldw	r2,-12(fp)
 8030ea0:	108000d8 	cmpnei	r2,r2,3
 8030ea4:	1000041e 	bne	r2,zero,8030eb8 <pffindproto+0x38>
      return(pffindtype(domain, type));
 8030ea8:	e17ffd17 	ldw	r5,-12(fp)
 8030eac:	e13fff17 	ldw	r4,-4(fp)
 8030eb0:	8030df00 	call	8030df0 <pffindtype>
 8030eb4:	00002206 	br	8030f40 <pffindproto+0xc0>
#endif

   switch (protocol)
 8030eb8:	e0bffe17 	ldw	r2,-8(fp)
 8030ebc:	10800460 	cmpeqi	r2,r2,17
 8030ec0:	10000e1e 	bne	r2,zero,8030efc <pffindproto+0x7c>
 8030ec4:	e0bffe17 	ldw	r2,-8(fp)
 8030ec8:	10800488 	cmpgei	r2,r2,18
 8030ecc:	1000111e 	bne	r2,zero,8030f14 <pffindproto+0x94>
 8030ed0:	e0bffe17 	ldw	r2,-8(fp)
 8030ed4:	10001226 	beq	r2,zero,8030f20 <pffindproto+0xa0>
 8030ed8:	e0bffe17 	ldw	r2,-8(fp)
 8030edc:	10800198 	cmpnei	r2,r2,6
 8030ee0:	10000c1e 	bne	r2,zero,8030f14 <pffindproto+0x94>
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
 8030ee4:	e0bffd17 	ldw	r2,-12(fp)
 8030ee8:	10800058 	cmpnei	r2,r2,1
 8030eec:	10000e26 	beq	r2,zero,8030f28 <pffindproto+0xa8>
         break;
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
 8030ef0:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 8030ef4:	0005883a 	mov	r2,zero
 8030ef8:	00001106 	br	8030f40 <pffindproto+0xc0>
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
 8030efc:	e0bffd17 	ldw	r2,-12(fp)
 8030f00:	10800098 	cmpnei	r2,r2,2
 8030f04:	10000a26 	beq	r2,zero,8030f30 <pffindproto+0xb0>
         break;
      /* IPPROTO_UDP protocol on non-SOCK_DGRAM type socket */
      dtrap();
 8030f08:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 8030f0c:	0005883a 	mov	r2,zero
 8030f10:	00000b06 	br	8030f40 <pffindproto+0xc0>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
 8030f14:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 8030f18:	0005883a 	mov	r2,zero
 8030f1c:	00000806 	br	8030f40 <pffindproto+0xc0>
      break;
 8030f20:	0001883a 	nop
 8030f24:	00000306 	br	8030f34 <pffindproto+0xb4>
         break;
 8030f28:	0001883a 	nop
 8030f2c:	00000106 	br	8030f34 <pffindproto+0xb4>
         break;
 8030f30:	0001883a 	nop
   }
   return(pffindtype(domain, type));   /* map to findtype */
 8030f34:	e17ffd17 	ldw	r5,-12(fp)
 8030f38:	e13fff17 	ldw	r4,-4(fp)
 8030f3c:	8030df00 	call	8030df0 <pffindtype>
}
 8030f40:	e037883a 	mov	sp,fp
 8030f44:	dfc00117 	ldw	ra,4(sp)
 8030f48:	df000017 	ldw	fp,0(sp)
 8030f4c:	dec00204 	addi	sp,sp,8
 8030f50:	f800283a 	ret

08030f54 <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
 8030f54:	defffa04 	addi	sp,sp,-24
 8030f58:	dfc00515 	stw	ra,20(sp)
 8030f5c:	df000415 	stw	fp,16(sp)
 8030f60:	df000404 	addi	fp,sp,16
 8030f64:	e13ffd15 	stw	r4,-12(fp)
 8030f68:	e17ffc15 	stw	r5,-16(fp)
   struct mbuf *  m;
   PACKET pkt = NULL;
 8030f6c:	e03fff15 	stw	zero,-4(fp)

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
 8030f70:	e0bffd17 	ldw	r2,-12(fp)
 8030f74:	0080030e 	bge	zero,r2,8030f84 <m_getnbuf+0x30>
 8030f78:	e0bffd17 	ldw	r2,-12(fp)
 8030f7c:	10800390 	cmplti	r2,r2,14
 8030f80:	1000011e 	bne	r2,zero,8030f88 <m_getnbuf+0x34>
   {
      dtrap(); /* is this OK? */
 8030f84:	80301a80 	call	80301a8 <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 8030f88:	e0bffc17 	ldw	r2,-16(fp)
 8030f8c:	10000d26 	beq	r2,zero,8030fc4 <m_getnbuf+0x70>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8030f90:	01000084 	movi	r4,2
 8030f94:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
 8030f98:	e0bffc17 	ldw	r2,-16(fp)
 8030f9c:	10800e04 	addi	r2,r2,56
 8030fa0:	1009883a 	mov	r4,r2
 8030fa4:	802f6300 	call	802f630 <pk_alloc>
 8030fa8:	e0bfff15 	stw	r2,-4(fp)

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8030fac:	01000084 	movi	r4,2
 8030fb0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      if (!pkt)
 8030fb4:	e0bfff17 	ldw	r2,-4(fp)
 8030fb8:	1000021e 	bne	r2,zero,8030fc4 <m_getnbuf+0x70>
         return NULL;
 8030fbc:	0005883a 	mov	r2,zero
 8030fc0:	00004106 	br	80310c8 <m_getnbuf+0x174>
   }

   m = (struct mbuf *)getq(&mfreeq);
 8030fc4:	010201b4 	movhi	r4,2054
 8030fc8:	213f2404 	addi	r4,r4,-880
 8030fcc:	802fad40 	call	802fad4 <getq>
 8030fd0:	e0bffe15 	stw	r2,-8(fp)
   if (!m)
 8030fd4:	e0bffe17 	ldw	r2,-8(fp)
 8030fd8:	10000a1e 	bne	r2,zero,8031004 <m_getnbuf+0xb0>
   {
      if (pkt) 
 8030fdc:	e0bfff17 	ldw	r2,-4(fp)
 8030fe0:	10000626 	beq	r2,zero,8030ffc <m_getnbuf+0xa8>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8030fe4:	01000084 	movi	r4,2
 8030fe8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 8030fec:	e13fff17 	ldw	r4,-4(fp)
 8030ff0:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8030ff4:	01000084 	movi	r4,2
 8030ff8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      }
      return NULL;
 8030ffc:	0005883a 	mov	r2,zero
 8031000:	00003106 	br	80310c8 <m_getnbuf+0x174>
   }
   m->m_type = type;
 8031004:	e0bffe17 	ldw	r2,-8(fp)
 8031008:	e0fffd17 	ldw	r3,-12(fp)
 803100c:	10c00815 	stw	r3,32(r2)
   if (len == 0)
 8031010:	e0bffc17 	ldw	r2,-16(fp)
 8031014:	1000071e 	bne	r2,zero,8031034 <m_getnbuf+0xe0>
   {
      m->pkt = NULL;
 8031018:	e0bffe17 	ldw	r2,-8(fp)
 803101c:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
 8031020:	e0bffe17 	ldw	r2,-8(fp)
 8031024:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
 8031028:	e0bffe17 	ldw	r2,-8(fp)
 803102c:	10000515 	stw	zero,20(r2)
 8031030:	00001506 	br	8031088 <m_getnbuf+0x134>
   }
   else
   {
      m->pkt = pkt;
 8031034:	e0bffe17 	ldw	r2,-8(fp)
 8031038:	e0ffff17 	ldw	r3,-4(fp)
 803103c:	10c00115 	stw	r3,4(r2)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 8031040:	e0bfff17 	ldw	r2,-4(fp)
 8031044:	10800117 	ldw	r2,4(r2)
 8031048:	10c00e04 	addi	r3,r2,56
 803104c:	e0bfff17 	ldw	r2,-4(fp)
 8031050:	10c00315 	stw	r3,12(r2)
 8031054:	e0bfff17 	ldw	r2,-4(fp)
 8031058:	10c00317 	ldw	r3,12(r2)
 803105c:	e0bffe17 	ldw	r2,-8(fp)
 8031060:	10c00315 	stw	r3,12(r2)
 8031064:	e0bffe17 	ldw	r2,-8(fp)
 8031068:	10c00317 	ldw	r3,12(r2)
 803106c:	e0bffe17 	ldw	r2,-8(fp)
 8031070:	10c00415 	stw	r3,16(r2)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 8031074:	e0bfff17 	ldw	r2,-4(fp)
 8031078:	10800217 	ldw	r2,8(r2)
 803107c:	10fff204 	addi	r3,r2,-56
 8031080:	e0bffe17 	ldw	r2,-8(fp)
 8031084:	10c00515 	stw	r3,20(r2)
   }
   m->m_len = 0;
 8031088:	e0bffe17 	ldw	r2,-8(fp)
 803108c:	10000215 	stw	zero,8(r2)
   m->m_next = m->m_act = NULL;
 8031090:	e0bffe17 	ldw	r2,-8(fp)
 8031094:	10000715 	stw	zero,28(r2)
 8031098:	e0bffe17 	ldw	r2,-8(fp)
 803109c:	10c00717 	ldw	r3,28(r2)
 80310a0:	e0bffe17 	ldw	r2,-8(fp)
 80310a4:	10c00615 	stw	r3,24(r2)
   mbstat.allocs++;        /* maintain local statistics */
 80310a8:	d0a0a917 	ldw	r2,-32092(gp)
 80310ac:	10800044 	addi	r2,r2,1
 80310b0:	d0a0a915 	stw	r2,-32092(gp)
   putq(&mbufq, (qp)m);
 80310b4:	e17ffe17 	ldw	r5,-8(fp)
 80310b8:	010201b4 	movhi	r4,2054
 80310bc:	213f1f04 	addi	r4,r4,-900
 80310c0:	802fb8c0 	call	802fb8c <putq>
   return m;
 80310c4:	e0bffe17 	ldw	r2,-8(fp)
}
 80310c8:	e037883a 	mov	sp,fp
 80310cc:	dfc00117 	ldw	ra,4(sp)
 80310d0:	df000017 	ldw	fp,0(sp)
 80310d4:	dec00204 	addi	sp,sp,8
 80310d8:	f800283a 	ret

080310dc <m_free>:
 */


struct mbuf *  
m_free(struct mbuf * m)
{
 80310dc:	defffc04 	addi	sp,sp,-16
 80310e0:	dfc00315 	stw	ra,12(sp)
 80310e4:	df000215 	stw	fp,8(sp)
 80310e8:	df000204 	addi	fp,sp,8
 80310ec:	e13ffe15 	stw	r4,-8(fp)
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
 80310f0:	008201b4 	movhi	r2,2054
 80310f4:	10bf2117 	ldw	r2,-892(r2)
 80310f8:	00800316 	blt	zero,r2,8031108 <m_free+0x2c>
      panic("mfree: q_len");
 80310fc:	01020174 	movhi	r4,2053
 8031100:	210ee604 	addi	r4,r4,15256
 8031104:	802bd8c0 	call	802bd8c <panic>

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
 8031108:	e0bffe17 	ldw	r2,-8(fp)
 803110c:	10800817 	ldw	r2,32(r2)
 8031110:	0080040e 	bge	zero,r2,8031124 <m_free+0x48>
 8031114:	e0bffe17 	ldw	r2,-8(fp)
 8031118:	10800817 	ldw	r2,32(r2)
 803111c:	10800390 	cmplti	r2,r2,14
 8031120:	10000a1e 	bne	r2,zero,803114c <m_free+0x70>
   {
      if (m->m_type == MT_FREE)
 8031124:	e0bffe17 	ldw	r2,-8(fp)
 8031128:	10800817 	ldw	r2,32(r2)
 803112c:	1000041e 	bne	r2,zero,8031140 <m_free+0x64>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
 8031130:	80301a80 	call	80301a8 <dtrap>
         return m->m_next; /* seems harmless, though.... */
 8031134:	e0bffe17 	ldw	r2,-8(fp)
 8031138:	10800617 	ldw	r2,24(r2)
 803113c:	00002306 	br	80311cc <m_free+0xf0>
      }
      else
         panic("m_free: type");
 8031140:	01020174 	movhi	r4,2053
 8031144:	210eea04 	addi	r4,r4,15272
 8031148:	802bd8c0 	call	802bd8c <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
 803114c:	e0bffe17 	ldw	r2,-8(fp)
 8031150:	10800617 	ldw	r2,24(r2)
 8031154:	e0bfff15 	stw	r2,-4(fp)

   if (qdel(&mbufq, m) == NULL)
 8031158:	e17ffe17 	ldw	r5,-8(fp)
 803115c:	010201b4 	movhi	r4,2054
 8031160:	213f1f04 	addi	r4,r4,-900
 8031164:	802fc3c0 	call	802fc3c <qdel>
 8031168:	1000031e 	bne	r2,zero,8031178 <m_free+0x9c>
      panic("m_free: missing");
 803116c:	01020174 	movhi	r4,2053
 8031170:	210eee04 	addi	r4,r4,15288
 8031174:	802bd8c0 	call	802bd8c <panic>

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
 8031178:	e0bffe17 	ldw	r2,-8(fp)
 803117c:	10000815 	stw	zero,32(r2)

   if (m->pkt)
 8031180:	e0bffe17 	ldw	r2,-8(fp)
 8031184:	10800117 	ldw	r2,4(r2)
 8031188:	10000826 	beq	r2,zero,80311ac <m_free+0xd0>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803118c:	01000084 	movi	r4,2
 8031190:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
 8031194:	e0bffe17 	ldw	r2,-8(fp)
 8031198:	10800117 	ldw	r2,4(r2)
 803119c:	1009883a 	mov	r4,r2
 80311a0:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80311a4:	01000084 	movi	r4,2
 80311a8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
 80311ac:	d0a0aa17 	ldw	r2,-32088(gp)
 80311b0:	10800044 	addi	r2,r2,1
 80311b4:	d0a0aa15 	stw	r2,-32088(gp)
   putq(&mfreeq, (qp)m);
 80311b8:	e17ffe17 	ldw	r5,-8(fp)
 80311bc:	010201b4 	movhi	r4,2054
 80311c0:	213f2404 	addi	r4,r4,-880
 80311c4:	802fb8c0 	call	802fb8c <putq>
   return nextptr;
 80311c8:	e0bfff17 	ldw	r2,-4(fp)
}
 80311cc:	e037883a 	mov	sp,fp
 80311d0:	dfc00117 	ldw	ra,4(sp)
 80311d4:	df000017 	ldw	fp,0(sp)
 80311d8:	dec00204 	addi	sp,sp,8
 80311dc:	f800283a 	ret

080311e0 <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
 80311e0:	defffd04 	addi	sp,sp,-12
 80311e4:	dfc00215 	stw	ra,8(sp)
 80311e8:	df000115 	stw	fp,4(sp)
 80311ec:	df000104 	addi	fp,sp,4
 80311f0:	e13fff15 	stw	r4,-4(fp)
   while (m != NULL)
 80311f4:	00000306 	br	8031204 <m_freem+0x24>
      m = m_free(m);
 80311f8:	e13fff17 	ldw	r4,-4(fp)
 80311fc:	80310dc0 	call	80310dc <m_free>
 8031200:	e0bfff15 	stw	r2,-4(fp)
   while (m != NULL)
 8031204:	e0bfff17 	ldw	r2,-4(fp)
 8031208:	103ffb1e 	bne	r2,zero,80311f8 <m_freem+0x18>
}
 803120c:	0001883a 	nop
 8031210:	0001883a 	nop
 8031214:	e037883a 	mov	sp,fp
 8031218:	dfc00117 	ldw	ra,4(sp)
 803121c:	df000017 	ldw	fp,0(sp)
 8031220:	dec00204 	addi	sp,sp,8
 8031224:	f800283a 	ret

08031228 <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
 8031228:	defff704 	addi	sp,sp,-36
 803122c:	dfc00815 	stw	ra,32(sp)
 8031230:	df000715 	stw	fp,28(sp)
 8031234:	df000704 	addi	fp,sp,28
 8031238:	e13ffb15 	stw	r4,-20(fp)
 803123c:	e17ffa15 	stw	r5,-24(fp)
 8031240:	e1bff915 	stw	r6,-28(fp)
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
 8031244:	e0bff917 	ldw	r2,-28(fp)
 8031248:	1000021e 	bne	r2,zero,8031254 <m_copy+0x2c>
      return NULL;
 803124c:	0005883a 	mov	r2,zero
 8031250:	0000a606 	br	80314ec <m_copy+0x2c4>

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
 8031254:	e0bffa17 	ldw	r2,-24(fp)
 8031258:	10000516 	blt	r2,zero,8031270 <m_copy+0x48>
 803125c:	e0bff917 	ldw	r2,-28(fp)
 8031260:	1000180e 	bge	r2,zero,80312c4 <m_copy+0x9c>
 8031264:	e0bff917 	ldw	r2,-28(fp)
 8031268:	10bfffe0 	cmpeqi	r2,r2,-1
 803126c:	1000151e 	bne	r2,zero,80312c4 <m_copy+0x9c>
   {
      dtrap();
 8031270:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 8031274:	0005883a 	mov	r2,zero
 8031278:	00009c06 	br	80314ec <m_copy+0x2c4>
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   {
      if (!m)
 803127c:	e0bffb17 	ldw	r2,-20(fp)
 8031280:	1000031e 	bne	r2,zero,8031290 <m_copy+0x68>
      {
         dtrap();
 8031284:	80301a80 	call	80301a8 <dtrap>
         return NULL;
 8031288:	0005883a 	mov	r2,zero
 803128c:	00009706 	br	80314ec <m_copy+0x2c4>
      }
      if (off < (int)m->m_len)
 8031290:	e0bffb17 	ldw	r2,-20(fp)
 8031294:	10800217 	ldw	r2,8(r2)
 8031298:	1007883a 	mov	r3,r2
 803129c:	e0bffa17 	ldw	r2,-24(fp)
 80312a0:	10c00b16 	blt	r2,r3,80312d0 <m_copy+0xa8>
         break;
      off -= m->m_len;
 80312a4:	e0fffa17 	ldw	r3,-24(fp)
 80312a8:	e0bffb17 	ldw	r2,-20(fp)
 80312ac:	10800217 	ldw	r2,8(r2)
 80312b0:	1885c83a 	sub	r2,r3,r2
 80312b4:	e0bffa15 	stw	r2,-24(fp)
      m = m->m_next;
 80312b8:	e0bffb17 	ldw	r2,-20(fp)
 80312bc:	10800617 	ldw	r2,24(r2)
 80312c0:	e0bffb15 	stw	r2,-20(fp)
   while (off > 0) 
 80312c4:	e0bffa17 	ldw	r2,-24(fp)
 80312c8:	00bfec16 	blt	zero,r2,803127c <m_copy+0x54>
 80312cc:	00000106 	br	80312d4 <m_copy+0xac>
         break;
 80312d0:	0001883a 	nop
   }

   head = tail = NULL;
 80312d4:	e03ffd15 	stw	zero,-12(fp)
 80312d8:	e0bffd17 	ldw	r2,-12(fp)
 80312dc:	e0bffe15 	stw	r2,-8(fp)

   while (len > 0)
 80312e0:	00007806 	br	80314c4 <m_copy+0x29c>
   {
      if (m == NULL) /* at end of queue? */
 80312e4:	e0bffb17 	ldw	r2,-20(fp)
 80312e8:	1000051e 	bne	r2,zero,8031300 <m_copy+0xd8>
      {
         panic("m_copy: bad len");
 80312ec:	01020174 	movhi	r4,2053
 80312f0:	210ef204 	addi	r4,r4,15304
 80312f4:	802bd8c0 	call	802bd8c <panic>
         return NULL;
 80312f8:	0005883a 	mov	r2,zero
 80312fc:	00007b06 	br	80314ec <m_copy+0x2c4>
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
 8031300:	e0bffb17 	ldw	r2,-20(fp)
 8031304:	10c00217 	ldw	r3,8(r2)
 8031308:	e0bffa17 	ldw	r2,-24(fp)
 803130c:	1885c83a 	sub	r2,r3,r2
 8031310:	1007883a 	mov	r3,r2
 8031314:	e0bff917 	ldw	r2,-28(fp)
 8031318:	1880010e 	bge	r3,r2,8031320 <m_copy+0xf8>
 803131c:	1805883a 	mov	r2,r3
 8031320:	e0bffc15 	stw	r2,-16(fp)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
 8031324:	e0bffa17 	ldw	r2,-24(fp)
 8031328:	108000cc 	andi	r2,r2,3
 803132c:	1000051e 	bne	r2,zero,8031344 <m_copy+0x11c>
          (m->pkt->inuse != 1))
 8031330:	e0bffb17 	ldw	r2,-20(fp)
 8031334:	10800117 	ldw	r2,4(r2)
 8031338:	10800917 	ldw	r2,36(r2)
      if ((off & (ALIGN_TYPE - 1)) ||
 803133c:	10800060 	cmpeqi	r2,r2,1
 8031340:	1000211e 	bne	r2,zero,80313c8 <m_copy+0x1a0>
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
 8031344:	e0bffb17 	ldw	r2,-20(fp)
 8031348:	10800817 	ldw	r2,32(r2)
 803134c:	e17ffc17 	ldw	r5,-16(fp)
 8031350:	1009883a 	mov	r4,r2
 8031354:	8030f540 	call	8030f54 <m_getnbuf>
 8031358:	e0bfff15 	stw	r2,-4(fp)
 803135c:	e0bfff17 	ldw	r2,-4(fp)
 8031360:	10005c26 	beq	r2,zero,80314d4 <m_copy+0x2ac>
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
 8031364:	e0bfff17 	ldw	r2,-4(fp)
 8031368:	11000317 	ldw	r4,12(r2)
 803136c:	e0bffb17 	ldw	r2,-20(fp)
 8031370:	10c00317 	ldw	r3,12(r2)
 8031374:	e0bffa17 	ldw	r2,-24(fp)
 8031378:	1885883a 	add	r2,r3,r2
 803137c:	e0fffc17 	ldw	r3,-16(fp)
 8031380:	180d883a 	mov	r6,r3
 8031384:	100b883a 	mov	r5,r2
 8031388:	80037cc0 	call	80037cc <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
 803138c:	e0fffc17 	ldw	r3,-16(fp)
 8031390:	e0bfff17 	ldw	r2,-4(fp)
 8031394:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mcopies++;
 8031398:	008201b4 	movhi	r2,2054
 803139c:	10bf6c17 	ldw	r2,-592(r2)
 80313a0:	10c00044 	addi	r3,r2,1
 80313a4:	008201b4 	movhi	r2,2054
 80313a8:	10ff6c15 	stw	r3,-592(r2)
         tcpstat.tcps_mcopiedbytes += tocopy;
 80313ac:	008201b4 	movhi	r2,2054
 80313b0:	10ff6e17 	ldw	r3,-584(r2)
 80313b4:	e0bffc17 	ldw	r2,-16(fp)
 80313b8:	1887883a 	add	r3,r3,r2
 80313bc:	008201b4 	movhi	r2,2054
 80313c0:	10ff6e15 	stw	r3,-584(r2)
 80313c4:	00002d06 	br	803147c <m_copy+0x254>
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
 80313c8:	e0bffb17 	ldw	r2,-20(fp)
 80313cc:	10800817 	ldw	r2,32(r2)
 80313d0:	000b883a 	mov	r5,zero
 80313d4:	1009883a 	mov	r4,r2
 80313d8:	8030f540 	call	8030f54 <m_getnbuf>
 80313dc:	e0bfff15 	stw	r2,-4(fp)
 80313e0:	e0bfff17 	ldw	r2,-4(fp)
 80313e4:	10003d26 	beq	r2,zero,80314dc <m_copy+0x2b4>
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 80313e8:	e0bffb17 	ldw	r2,-20(fp)
 80313ec:	10800117 	ldw	r2,4(r2)
 80313f0:	10c00917 	ldw	r3,36(r2)
 80313f4:	18c00044 	addi	r3,r3,1
 80313f8:	10c00915 	stw	r3,36(r2)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
 80313fc:	e0bffb17 	ldw	r2,-20(fp)
 8031400:	10c00117 	ldw	r3,4(r2)
 8031404:	e0bfff17 	ldw	r2,-4(fp)
 8031408:	10c00115 	stw	r3,4(r2)
         nb->m_base = m->m_base;
 803140c:	e0bffb17 	ldw	r2,-20(fp)
 8031410:	10c00417 	ldw	r3,16(r2)
 8031414:	e0bfff17 	ldw	r2,-4(fp)
 8031418:	10c00415 	stw	r3,16(r2)
         nb->m_memsz = m->m_memsz;
 803141c:	e0bffb17 	ldw	r2,-20(fp)
 8031420:	10c00517 	ldw	r3,20(r2)
 8031424:	e0bfff17 	ldw	r2,-4(fp)
 8031428:	10c00515 	stw	r3,20(r2)
         nb->m_data = m->m_data + off;
 803142c:	e0bffb17 	ldw	r2,-20(fp)
 8031430:	10c00317 	ldw	r3,12(r2)
 8031434:	e0bffa17 	ldw	r2,-24(fp)
 8031438:	1887883a 	add	r3,r3,r2
 803143c:	e0bfff17 	ldw	r2,-4(fp)
 8031440:	10c00315 	stw	r3,12(r2)
         nb->m_len = tocopy;
 8031444:	e0fffc17 	ldw	r3,-16(fp)
 8031448:	e0bfff17 	ldw	r2,-4(fp)
 803144c:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mclones++;
 8031450:	008201b4 	movhi	r2,2054
 8031454:	10bf6d17 	ldw	r2,-588(r2)
 8031458:	10c00044 	addi	r3,r2,1
 803145c:	008201b4 	movhi	r2,2054
 8031460:	10ff6d15 	stw	r3,-588(r2)
         tcpstat.tcps_mclonedbytes += tocopy;
 8031464:	008201b4 	movhi	r2,2054
 8031468:	10ff6f17 	ldw	r3,-580(r2)
 803146c:	e0bffc17 	ldw	r2,-16(fp)
 8031470:	1887883a 	add	r3,r3,r2
 8031474:	008201b4 	movhi	r2,2054
 8031478:	10ff6f15 	stw	r3,-580(r2)
      }

      len -= tocopy;
 803147c:	e0fff917 	ldw	r3,-28(fp)
 8031480:	e0bffc17 	ldw	r2,-16(fp)
 8031484:	1885c83a 	sub	r2,r3,r2
 8031488:	e0bff915 	stw	r2,-28(fp)
      off = 0;
 803148c:	e03ffa15 	stw	zero,-24(fp)
      if (tail)      /* head & tail are set by first pass thru loop */
 8031490:	e0bffd17 	ldw	r2,-12(fp)
 8031494:	10000426 	beq	r2,zero,80314a8 <m_copy+0x280>
         tail->m_next = nb;
 8031498:	e0bffd17 	ldw	r2,-12(fp)
 803149c:	e0ffff17 	ldw	r3,-4(fp)
 80314a0:	10c00615 	stw	r3,24(r2)
 80314a4:	00000206 	br	80314b0 <m_copy+0x288>
      else
         head = nb;
 80314a8:	e0bfff17 	ldw	r2,-4(fp)
 80314ac:	e0bffe15 	stw	r2,-8(fp)
      tail = nb;     /* always make new mbuf the tail */
 80314b0:	e0bfff17 	ldw	r2,-4(fp)
 80314b4:	e0bffd15 	stw	r2,-12(fp)
      m = m->m_next;
 80314b8:	e0bffb17 	ldw	r2,-20(fp)
 80314bc:	10800617 	ldw	r2,24(r2)
 80314c0:	e0bffb15 	stw	r2,-20(fp)
   while (len > 0)
 80314c4:	e0bff917 	ldw	r2,-28(fp)
 80314c8:	00bf8616 	blt	zero,r2,80312e4 <m_copy+0xbc>

   }

   return head;
 80314cc:	e0bffe17 	ldw	r2,-8(fp)
 80314d0:	00000606 	br	80314ec <m_copy+0x2c4>
            goto nospace;
 80314d4:	0001883a 	nop
 80314d8:	00000106 	br	80314e0 <m_copy+0x2b8>
            goto nospace;
 80314dc:	0001883a 	nop

nospace:
   m_freem (head);
 80314e0:	e13ffe17 	ldw	r4,-8(fp)
 80314e4:	80311e00 	call	80311e0 <m_freem>
   return NULL;
 80314e8:	0005883a 	mov	r2,zero
}
 80314ec:	e037883a 	mov	sp,fp
 80314f0:	dfc00117 	ldw	ra,4(sp)
 80314f4:	df000017 	ldw	fp,0(sp)
 80314f8:	dec00204 	addi	sp,sp,8
 80314fc:	f800283a 	ret

08031500 <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
 8031500:	defffb04 	addi	sp,sp,-20
 8031504:	df000415 	stw	fp,16(sp)
 8031508:	df000404 	addi	fp,sp,16
 803150c:	e13ffd15 	stw	r4,-12(fp)
 8031510:	e17ffc15 	stw	r5,-16(fp)
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
 8031514:	e0bffd17 	ldw	r2,-12(fp)
 8031518:	e0bfff15 	stw	r2,-4(fp)
 803151c:	e0bfff17 	ldw	r2,-4(fp)
 8031520:	10006226 	beq	r2,zero,80316ac <m_adj+0x1ac>
      return;

   if (len >= 0) 
 8031524:	e0bffc17 	ldw	r2,-16(fp)
 8031528:	10002216 	blt	r2,zero,80315b4 <m_adj+0xb4>
   {
      while (m != NULL && len > 0) 
 803152c:	00001c06 	br	80315a0 <m_adj+0xa0>
      {
         if (m->m_len <= (unsigned)len)
 8031530:	e0bfff17 	ldw	r2,-4(fp)
 8031534:	10800217 	ldw	r2,8(r2)
 8031538:	e0fffc17 	ldw	r3,-16(fp)
 803153c:	18800b36 	bltu	r3,r2,803156c <m_adj+0x6c>
         {
            len -= m->m_len;
 8031540:	e0fffc17 	ldw	r3,-16(fp)
 8031544:	e0bfff17 	ldw	r2,-4(fp)
 8031548:	10800217 	ldw	r2,8(r2)
 803154c:	1885c83a 	sub	r2,r3,r2
 8031550:	e0bffc15 	stw	r2,-16(fp)
            m->m_len = 0;
 8031554:	e0bfff17 	ldw	r2,-4(fp)
 8031558:	10000215 	stw	zero,8(r2)
            m = m->m_next;
 803155c:	e0bfff17 	ldw	r2,-4(fp)
 8031560:	10800617 	ldw	r2,24(r2)
 8031564:	e0bfff15 	stw	r2,-4(fp)
 8031568:	00000d06 	br	80315a0 <m_adj+0xa0>
         }
         else
         {
            m->m_len -= len;
 803156c:	e0bfff17 	ldw	r2,-4(fp)
 8031570:	10c00217 	ldw	r3,8(r2)
 8031574:	e0bffc17 	ldw	r2,-16(fp)
 8031578:	1887c83a 	sub	r3,r3,r2
 803157c:	e0bfff17 	ldw	r2,-4(fp)
 8031580:	10c00215 	stw	r3,8(r2)
            m->m_data += len;
 8031584:	e0bfff17 	ldw	r2,-4(fp)
 8031588:	10c00317 	ldw	r3,12(r2)
 803158c:	e0bffc17 	ldw	r2,-16(fp)
 8031590:	1887883a 	add	r3,r3,r2
 8031594:	e0bfff17 	ldw	r2,-4(fp)
 8031598:	10c00315 	stw	r3,12(r2)
            break;
 803159c:	00004406 	br	80316b0 <m_adj+0x1b0>
      while (m != NULL && len > 0) 
 80315a0:	e0bfff17 	ldw	r2,-4(fp)
 80315a4:	10004226 	beq	r2,zero,80316b0 <m_adj+0x1b0>
 80315a8:	e0bffc17 	ldw	r2,-16(fp)
 80315ac:	00bfe016 	blt	zero,r2,8031530 <m_adj+0x30>
 80315b0:	00003f06 	br	80316b0 <m_adj+0x1b0>
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
 80315b4:	e0bffc17 	ldw	r2,-16(fp)
 80315b8:	0085c83a 	sub	r2,zero,r2
 80315bc:	e0bffc15 	stw	r2,-16(fp)
      count = 0;
 80315c0:	e03ffe15 	stw	zero,-8(fp)
      for (;;) 
      {
         count += m->m_len;
 80315c4:	e0bfff17 	ldw	r2,-4(fp)
 80315c8:	10c00217 	ldw	r3,8(r2)
 80315cc:	e0bffe17 	ldw	r2,-8(fp)
 80315d0:	1885883a 	add	r2,r3,r2
 80315d4:	e0bffe15 	stw	r2,-8(fp)
         if (m->m_next == (struct mbuf *)0)
 80315d8:	e0bfff17 	ldw	r2,-4(fp)
 80315dc:	10800617 	ldw	r2,24(r2)
 80315e0:	10000426 	beq	r2,zero,80315f4 <m_adj+0xf4>
            break;
         m = m->m_next;
 80315e4:	e0bfff17 	ldw	r2,-4(fp)
 80315e8:	10800617 	ldw	r2,24(r2)
 80315ec:	e0bfff15 	stw	r2,-4(fp)
         count += m->m_len;
 80315f0:	003ff406 	br	80315c4 <m_adj+0xc4>
            break;
 80315f4:	0001883a 	nop
      }
      if (m->m_len >= (unsigned)len)
 80315f8:	e0bfff17 	ldw	r2,-4(fp)
 80315fc:	10c00217 	ldw	r3,8(r2)
 8031600:	e0bffc17 	ldw	r2,-16(fp)
 8031604:	18800736 	bltu	r3,r2,8031624 <m_adj+0x124>
      {
         m->m_len -= len;
 8031608:	e0bfff17 	ldw	r2,-4(fp)
 803160c:	10c00217 	ldw	r3,8(r2)
 8031610:	e0bffc17 	ldw	r2,-16(fp)
 8031614:	1887c83a 	sub	r3,r3,r2
 8031618:	e0bfff17 	ldw	r2,-4(fp)
 803161c:	10c00215 	stw	r3,8(r2)
         return;
 8031620:	00002306 	br	80316b0 <m_adj+0x1b0>
      }
      count -= len;
 8031624:	e0fffe17 	ldw	r3,-8(fp)
 8031628:	e0bffc17 	ldw	r2,-16(fp)
 803162c:	1885c83a 	sub	r2,r3,r2
 8031630:	e0bffe15 	stw	r2,-8(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 8031634:	e0bffd17 	ldw	r2,-12(fp)
 8031638:	e0bfff15 	stw	r2,-4(fp)
 803163c:	00001006 	br	8031680 <m_adj+0x180>
      {
         if (m->m_len >= (unsigned)count)
 8031640:	e0bfff17 	ldw	r2,-4(fp)
 8031644:	10c00217 	ldw	r3,8(r2)
 8031648:	e0bffe17 	ldw	r2,-8(fp)
 803164c:	18800436 	bltu	r3,r2,8031660 <m_adj+0x160>
         {
            m->m_len = count;
 8031650:	e0fffe17 	ldw	r3,-8(fp)
 8031654:	e0bfff17 	ldw	r2,-4(fp)
 8031658:	10c00215 	stw	r3,8(r2)
            break;
 803165c:	00000a06 	br	8031688 <m_adj+0x188>
         }
         count -= m->m_len;
 8031660:	e0fffe17 	ldw	r3,-8(fp)
 8031664:	e0bfff17 	ldw	r2,-4(fp)
 8031668:	10800217 	ldw	r2,8(r2)
 803166c:	1885c83a 	sub	r2,r3,r2
 8031670:	e0bffe15 	stw	r2,-8(fp)
      for (m = mp; m; m = m->m_next)
 8031674:	e0bfff17 	ldw	r2,-4(fp)
 8031678:	10800617 	ldw	r2,24(r2)
 803167c:	e0bfff15 	stw	r2,-4(fp)
 8031680:	e0bfff17 	ldw	r2,-4(fp)
 8031684:	103fee1e 	bne	r2,zero,8031640 <m_adj+0x140>
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 8031688:	00000206 	br	8031694 <m_adj+0x194>
         m->m_len = 0;
 803168c:	e0bfff17 	ldw	r2,-4(fp)
 8031690:	10000215 	stw	zero,8(r2)
      while ((m = m->m_next) != (struct mbuf *)NULL)
 8031694:	e0bfff17 	ldw	r2,-4(fp)
 8031698:	10800617 	ldw	r2,24(r2)
 803169c:	e0bfff15 	stw	r2,-4(fp)
 80316a0:	e0bfff17 	ldw	r2,-4(fp)
 80316a4:	103ff91e 	bne	r2,zero,803168c <m_adj+0x18c>
 80316a8:	00000106 	br	80316b0 <m_adj+0x1b0>
      return;
 80316ac:	0001883a 	nop
   }
}
 80316b0:	e037883a 	mov	sp,fp
 80316b4:	df000017 	ldw	fp,0(sp)
 80316b8:	dec00104 	addi	sp,sp,4
 80316bc:	f800283a 	ret

080316c0 <mbuf_len>:
 * RETURNS: 
 */

int
mbuf_len (struct mbuf * m)
{
 80316c0:	defffd04 	addi	sp,sp,-12
 80316c4:	df000215 	stw	fp,8(sp)
 80316c8:	df000204 	addi	fp,sp,8
 80316cc:	e13ffe15 	stw	r4,-8(fp)
   int   len   =  0;
 80316d0:	e03fff15 	stw	zero,-4(fp)

   while (m)
 80316d4:	00000806 	br	80316f8 <mbuf_len+0x38>
   {
      len += m->m_len;
 80316d8:	e0bffe17 	ldw	r2,-8(fp)
 80316dc:	10c00217 	ldw	r3,8(r2)
 80316e0:	e0bfff17 	ldw	r2,-4(fp)
 80316e4:	1885883a 	add	r2,r3,r2
 80316e8:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
 80316ec:	e0bffe17 	ldw	r2,-8(fp)
 80316f0:	10800617 	ldw	r2,24(r2)
 80316f4:	e0bffe15 	stw	r2,-8(fp)
   while (m)
 80316f8:	e0bffe17 	ldw	r2,-8(fp)
 80316fc:	103ff61e 	bne	r2,zero,80316d8 <mbuf_len+0x18>
   }
   return len;
 8031700:	e0bfff17 	ldw	r2,-4(fp)
}
 8031704:	e037883a 	mov	sp,fp
 8031708:	df000017 	ldw	fp,0(sp)
 803170c:	dec00104 	addi	sp,sp,4
 8031710:	f800283a 	ret

08031714 <dtom>:
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
 8031714:	defffb04 	addi	sp,sp,-20
 8031718:	dfc00415 	stw	ra,16(sp)
 803171c:	df000315 	stw	fp,12(sp)
 8031720:	df000304 	addi	fp,sp,12
 8031724:	e13ffd15 	stw	r4,-12(fp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 8031728:	008201b4 	movhi	r2,2054
 803172c:	10bf1f17 	ldw	r2,-900(r2)
 8031730:	e0bfff15 	stw	r2,-4(fp)
 8031734:	00001206 	br	8031780 <dtom+0x6c>
   {
      m = (struct mbuf *)qptr;
 8031738:	e0bfff17 	ldw	r2,-4(fp)
 803173c:	e0bffe15 	stw	r2,-8(fp)

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
 8031740:	e0bffe17 	ldw	r2,-8(fp)
 8031744:	10800417 	ldw	r2,16(r2)
 8031748:	e0fffd17 	ldw	r3,-12(fp)
 803174c:	18800936 	bltu	r3,r2,8031774 <dtom+0x60>
 8031750:	e0bffe17 	ldw	r2,-8(fp)
 8031754:	10c00417 	ldw	r3,16(r2)
 8031758:	e0bffe17 	ldw	r2,-8(fp)
 803175c:	10800517 	ldw	r2,20(r2)
 8031760:	1885883a 	add	r2,r3,r2
 8031764:	e0fffd17 	ldw	r3,-12(fp)
 8031768:	1880022e 	bgeu	r3,r2,8031774 <dtom+0x60>
         return (struct mbuf *)qptr;
 803176c:	e0bfff17 	ldw	r2,-4(fp)
 8031770:	00000906 	br	8031798 <dtom+0x84>
   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 8031774:	e0bfff17 	ldw	r2,-4(fp)
 8031778:	10800017 	ldw	r2,0(r2)
 803177c:	e0bfff15 	stw	r2,-4(fp)
 8031780:	e0bfff17 	ldw	r2,-4(fp)
 8031784:	103fec1e 	bne	r2,zero,8031738 <dtom+0x24>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
 8031788:	01020174 	movhi	r4,2053
 803178c:	210ef604 	addi	r4,r4,15320
 8031790:	802bd8c0 	call	802bd8c <panic>
   return NULL;
 8031794:	0005883a 	mov	r2,zero
}
 8031798:	e037883a 	mov	sp,fp
 803179c:	dfc00117 	ldw	ra,4(sp)
 80317a0:	df000017 	ldw	fp,0(sp)
 80317a4:	dec00204 	addi	sp,sp,8
 80317a8:	f800283a 	ret

080317ac <remque>:
};


void
remque (void * arg)
{
 80317ac:	defffd04 	addi	sp,sp,-12
 80317b0:	df000215 	stw	fp,8(sp)
 80317b4:	df000204 	addi	fp,sp,8
 80317b8:	e13ffe15 	stw	r4,-8(fp)
   struct bsdq *  old;

   old = (struct bsdq *)arg;
 80317bc:	e0bffe17 	ldw	r2,-8(fp)
 80317c0:	e0bfff15 	stw	r2,-4(fp)
   if (!old->prev) return;
 80317c4:	e0bfff17 	ldw	r2,-4(fp)
 80317c8:	10800117 	ldw	r2,4(r2)
 80317cc:	10000e26 	beq	r2,zero,8031808 <remque+0x5c>
      old->prev->next = old->next;
 80317d0:	e0bfff17 	ldw	r2,-4(fp)
 80317d4:	10800117 	ldw	r2,4(r2)
 80317d8:	e0ffff17 	ldw	r3,-4(fp)
 80317dc:	18c00017 	ldw	r3,0(r3)
 80317e0:	10c00015 	stw	r3,0(r2)
   if (old->next)
 80317e4:	e0bfff17 	ldw	r2,-4(fp)
 80317e8:	10800017 	ldw	r2,0(r2)
 80317ec:	10000726 	beq	r2,zero,803180c <remque+0x60>
      old->next->prev = old->prev;
 80317f0:	e0bfff17 	ldw	r2,-4(fp)
 80317f4:	10800017 	ldw	r2,0(r2)
 80317f8:	e0ffff17 	ldw	r3,-4(fp)
 80317fc:	18c00117 	ldw	r3,4(r3)
 8031800:	10c00115 	stw	r3,4(r2)
 8031804:	00000106 	br	803180c <remque+0x60>
   if (!old->prev) return;
 8031808:	0001883a 	nop
}
 803180c:	e037883a 	mov	sp,fp
 8031810:	df000017 	ldw	fp,0(sp)
 8031814:	dec00104 	addi	sp,sp,4
 8031818:	f800283a 	ret

0803181c <insque>:
 * RETURNS: 
 */

void
insque(void * n, void * p)
{
 803181c:	defffb04 	addi	sp,sp,-20
 8031820:	df000415 	stw	fp,16(sp)
 8031824:	df000404 	addi	fp,sp,16
 8031828:	e13ffd15 	stw	r4,-12(fp)
 803182c:	e17ffc15 	stw	r5,-16(fp)
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
 8031830:	e0bffd17 	ldw	r2,-12(fp)
 8031834:	e0bfff15 	stw	r2,-4(fp)
   prev = (struct bsdq *)p;
 8031838:	e0bffc17 	ldw	r2,-16(fp)
 803183c:	e0bffe15 	stw	r2,-8(fp)
   newe->next = prev->next;
 8031840:	e0bffe17 	ldw	r2,-8(fp)
 8031844:	10c00017 	ldw	r3,0(r2)
 8031848:	e0bfff17 	ldw	r2,-4(fp)
 803184c:	10c00015 	stw	r3,0(r2)
   newe->prev = prev;
 8031850:	e0bfff17 	ldw	r2,-4(fp)
 8031854:	e0fffe17 	ldw	r3,-8(fp)
 8031858:	10c00115 	stw	r3,4(r2)
   prev->next = newe;
 803185c:	e0bffe17 	ldw	r2,-8(fp)
 8031860:	e0ffff17 	ldw	r3,-4(fp)
 8031864:	10c00015 	stw	r3,0(r2)
   if (newe->next)
 8031868:	e0bfff17 	ldw	r2,-4(fp)
 803186c:	10800017 	ldw	r2,0(r2)
 8031870:	10000426 	beq	r2,zero,8031884 <insque+0x68>
      newe->next->prev = newe;
 8031874:	e0bfff17 	ldw	r2,-4(fp)
 8031878:	10800017 	ldw	r2,0(r2)
 803187c:	e0ffff17 	ldw	r3,-4(fp)
 8031880:	10c00115 	stw	r3,4(r2)
}
 8031884:	0001883a 	nop
 8031888:	e037883a 	mov	sp,fp
 803188c:	df000017 	ldw	fp,0(sp)
 8031890:	dec00104 	addi	sp,sp,4
 8031894:	f800283a 	ret

08031898 <nptcp_init>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
 8031898:	defffb04 	addi	sp,sp,-20
 803189c:	dfc00415 	stw	ra,16(sp)
 80318a0:	df000315 	stw	fp,12(sp)
 80318a4:	df000304 	addi	fp,sp,12
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 80318a8:	d0e03217 	ldw	r3,-32568(gp)
 80318ac:	d0a03417 	ldw	r2,-32560(gp)
 80318b0:	1885883a 	add	r2,r3,r2
 80318b4:	1085883a 	add	r2,r2,r2
 80318b8:	108000c4 	addi	r2,r2,3
 80318bc:	e0bffe15 	stw	r2,-8(fp)
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 80318c0:	01800504 	movi	r6,20
 80318c4:	000b883a 	mov	r5,zero
 80318c8:	010201b4 	movhi	r4,2054
 80318cc:	213f0b04 	addi	r4,r4,-980
 80318d0:	80038cc0 	call	80038cc <memset>
   MEMSET(&mbufq, 0, sizeof(mbufq));
 80318d4:	01800504 	movi	r6,20
 80318d8:	000b883a 	mov	r5,zero
 80318dc:	010201b4 	movhi	r4,2054
 80318e0:	213f1f04 	addi	r4,r4,-900
 80318e4:	80038cc0 	call	80038cc <memset>
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
 80318e8:	01800504 	movi	r6,20
 80318ec:	000b883a 	mov	r5,zero
 80318f0:	010201b4 	movhi	r4,2054
 80318f4:	213f2404 	addi	r4,r4,-880
 80318f8:	80038cc0 	call	80038cc <memset>
   for (i = 0; i < (int)bufcount; i++)
 80318fc:	e03fff15 	stw	zero,-4(fp)
 8031900:	00001506 	br	8031958 <nptcp_init+0xc0>
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
 8031904:	01000904 	movi	r4,36
 8031908:	8030d080 	call	8030d08 <npalloc>
 803190c:	e0bffd15 	stw	r2,-12(fp)
      if (!m)  /* malloc error, bail out */
 8031910:	e0bffd17 	ldw	r2,-12(fp)
 8031914:	1000031e 	bne	r2,zero,8031924 <nptcp_init+0x8c>
         panic("tcpinit");
 8031918:	01020174 	movhi	r4,2053
 803191c:	210ef804 	addi	r4,r4,15328
 8031920:	802bd8c0 	call	802bd8c <panic>
      m->m_type = MT_FREE;
 8031924:	e0bffd17 	ldw	r2,-12(fp)
 8031928:	10000815 	stw	zero,32(r2)
      m->m_len = 0;
 803192c:	e0bffd17 	ldw	r2,-12(fp)
 8031930:	10000215 	stw	zero,8(r2)
      m->m_data = NULL;
 8031934:	e0bffd17 	ldw	r2,-12(fp)
 8031938:	10000315 	stw	zero,12(r2)
      putq(&mfreeq, (qp)m);
 803193c:	e17ffd17 	ldw	r5,-12(fp)
 8031940:	010201b4 	movhi	r4,2054
 8031944:	213f2404 	addi	r4,r4,-880
 8031948:	802fb8c0 	call	802fb8c <putq>
   for (i = 0; i < (int)bufcount; i++)
 803194c:	e0bfff17 	ldw	r2,-4(fp)
 8031950:	10800044 	addi	r2,r2,1
 8031954:	e0bfff15 	stw	r2,-4(fp)
 8031958:	e0bffe17 	ldw	r2,-8(fp)
 803195c:	e0ffff17 	ldw	r3,-4(fp)
 8031960:	18bfe816 	blt	r3,r2,8031904 <nptcp_init+0x6c>
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
 8031964:	e0fffe17 	ldw	r3,-8(fp)
 8031968:	008201b4 	movhi	r2,2054
 803196c:	10ff2815 	stw	r3,-864(r2)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
 8031970:	803bfd00 	call	803bfd0 <tcp_init>

#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
 8031974:	0005883a 	mov	r2,zero
}
 8031978:	e037883a 	mov	sp,fp
 803197c:	dfc00117 	ldw	ra,4(sp)
 8031980:	df000017 	ldw	fp,0(sp)
 8031984:	dec00204 	addi	sp,sp,8
 8031988:	f800283a 	ret

0803198c <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 803198c:	defff904 	addi	sp,sp,-28
 8031990:	dfc00615 	stw	ra,24(sp)
 8031994:	df000515 	stw	fp,20(sp)
 8031998:	df000504 	addi	fp,sp,20
 803199c:	e13ffb15 	stw	r4,-20(fp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
 80319a0:	e0bffb17 	ldw	r2,-20(fp)
 80319a4:	10800317 	ldw	r2,12(r2)
 80319a8:	e0bfff15 	stw	r2,-4(fp)
   len = ntohs(bip->ip_len);  /* get length in local endian */
 80319ac:	e0bfff17 	ldw	r2,-4(fp)
 80319b0:	1080008b 	ldhu	r2,2(r2)
 80319b4:	10bfffcc 	andi	r2,r2,65535
 80319b8:	1004d23a 	srli	r2,r2,8
 80319bc:	1007883a 	mov	r3,r2
 80319c0:	e0bfff17 	ldw	r2,-4(fp)
 80319c4:	1080008b 	ldhu	r2,2(r2)
 80319c8:	10bfffcc 	andi	r2,r2,65535
 80319cc:	1004923a 	slli	r2,r2,8
 80319d0:	1884b03a 	or	r2,r3,r2
 80319d4:	e0bffe8d 	sth	r2,-6(fp)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
 80319d8:	e0bfff17 	ldw	r2,-4(fp)
 80319dc:	10800003 	ldbu	r2,0(r2)
 80319e0:	10803fcc 	andi	r2,r2,255
 80319e4:	100490ba 	slli	r2,r2,2
 80319e8:	10800f0c 	andi	r2,r2,60
 80319ec:	e0ffff17 	ldw	r3,-4(fp)
 80319f0:	1885883a 	add	r2,r3,r2
 80319f4:	e0bffd15 	stw	r2,-12(fp)
   if (tcp_cksum(bip) != tcpp->th_sum)
 80319f8:	e13fff17 	ldw	r4,-4(fp)
 80319fc:	804a6800 	call	804a680 <tcp_cksum>
 8031a00:	1007883a 	mov	r3,r2
 8031a04:	e0bffd17 	ldw	r2,-12(fp)
 8031a08:	1080040b 	ldhu	r2,16(r2)
 8031a0c:	18ffffcc 	andi	r3,r3,65535
 8031a10:	10bfffcc 	andi	r2,r2,65535
 8031a14:	18801226 	beq	r3,r2,8031a60 <tcp_rcv+0xd4>
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 8031a18:	008201b4 	movhi	r2,2054
 8031a1c:	10bf1d17 	ldw	r2,-908(r2)
 8031a20:	10c00044 	addi	r3,r2,1
 8031a24:	008201b4 	movhi	r2,2054
 8031a28:	10ff1d15 	stw	r3,-908(r2)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 8031a2c:	008201b4 	movhi	r2,2054
 8031a30:	10bf5a17 	ldw	r2,-664(r2)
 8031a34:	10c00044 	addi	r3,r2,1
 8031a38:	008201b4 	movhi	r2,2054
 8031a3c:	10ff5a15 	stw	r3,-664(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8031a40:	01000084 	movi	r4,2
 8031a44:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
 8031a48:	e13ffb17 	ldw	r4,-20(fp)
 8031a4c:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8031a50:	01000084 	movi	r4,2
 8031a54:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 8031a58:	00bff804 	movi	r2,-32
 8031a5c:	00003306 	br	8031b2c <tcp_rcv+0x1a0>
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
 8031a60:	000b883a 	mov	r5,zero
 8031a64:	01000044 	movi	r4,1
 8031a68:	8030f540 	call	8030f54 <m_getnbuf>
 8031a6c:	e0bffc15 	stw	r2,-16(fp)
   if (!m_in){
 8031a70:	e0bffc17 	ldw	r2,-16(fp)
 8031a74:	1000081e 	bne	r2,zero,8031a98 <tcp_rcv+0x10c>
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8031a78:	01000084 	movi	r4,2
 8031a7c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 8031a80:	e13ffb17 	ldw	r4,-20(fp)
 8031a84:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8031a88:	01000084 	movi	r4,2
 8031a8c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;  
 8031a90:	00bffa84 	movi	r2,-22
 8031a94:	00002506 	br	8031b2c <tcp_rcv+0x1a0>
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
 8031a98:	e0bfff17 	ldw	r2,-4(fp)
 8031a9c:	10800003 	ldbu	r2,0(r2)
 8031aa0:	10803fcc 	andi	r2,r2,255
 8031aa4:	100490ba 	slli	r2,r2,2
 8031aa8:	10800f0c 	andi	r2,r2,60
 8031aac:	1007883a 	mov	r3,r2
 8031ab0:	e0bffe8b 	ldhu	r2,-6(fp)
 8031ab4:	10c5c83a 	sub	r2,r2,r3
 8031ab8:	e0bffe8d 	sth	r2,-6(fp)
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 8031abc:	e0bfff17 	ldw	r2,-4(fp)
 8031ac0:	e0fffe8b 	ldhu	r3,-6(fp)
 8031ac4:	10c0008d 	sth	r3,2(r2)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
 8031ac8:	e0bffc17 	ldw	r2,-16(fp)
 8031acc:	e0fffb17 	ldw	r3,-20(fp)
 8031ad0:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
 8031ad4:	e0bffb17 	ldw	r2,-20(fp)
 8031ad8:	10c00317 	ldw	r3,12(r2)
 8031adc:	e0bffc17 	ldw	r2,-16(fp)
 8031ae0:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 8031ae4:	e0bffb17 	ldw	r2,-20(fp)
 8031ae8:	10c00417 	ldw	r3,16(r2)
 8031aec:	e0bffc17 	ldw	r2,-16(fp)
 8031af0:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;     /* ??? */
 8031af4:	e0bffb17 	ldw	r2,-20(fp)
 8031af8:	10c00117 	ldw	r3,4(r2)
 8031afc:	e0bffc17 	ldw	r2,-16(fp)
 8031b00:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
 8031b04:	e0bffb17 	ldw	r2,-20(fp)
 8031b08:	10c00217 	ldw	r3,8(r2)
 8031b0c:	e0bffc17 	ldw	r2,-16(fp)
 8031b10:	10c00515 	stw	r3,20(r2)

   tcp_input(m_in, pkt->net);
 8031b14:	e0bffb17 	ldw	r2,-20(fp)
 8031b18:	10800617 	ldw	r2,24(r2)
 8031b1c:	100b883a 	mov	r5,r2
 8031b20:	e13ffc17 	ldw	r4,-16(fp)
 8031b24:	80386280 	call	8038628 <tcp_input>

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
 8031b28:	0005883a 	mov	r2,zero
}
 8031b2c:	e037883a 	mov	sp,fp
 8031b30:	dfc00117 	ldw	ra,4(sp)
 8031b34:	df000017 	ldw	fp,0(sp)
 8031b38:	dec00204 	addi	sp,sp,8
 8031b3c:	f800283a 	ret

08031b40 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
 8031b40:	defff404 	addi	sp,sp,-48
 8031b44:	dfc00b15 	stw	ra,44(sp)
 8031b48:	df000a15 	stw	fp,40(sp)
 8031b4c:	df000a04 	addi	fp,sp,40
 8031b50:	e13ff715 	stw	r4,-36(fp)
 8031b54:	e17ff615 	stw	r5,-40(fp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
 8031b58:	e0bff717 	ldw	r2,-36(fp)
 8031b5c:	10800617 	ldw	r2,24(r2)
 8031b60:	10010226 	beq	r2,zero,8031f6c <ip_output+0x42c>
   {
      m1 = data;
 8031b64:	e0bff717 	ldw	r2,-36(fp)
 8031b68:	e0bfff15 	stw	r2,-4(fp)
      m2 = data->m_next;
 8031b6c:	e0bff717 	ldw	r2,-36(fp)
 8031b70:	10800617 	ldw	r2,24(r2)
 8031b74:	e0bffe15 	stw	r2,-8(fp)

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 8031b78:	00003306 	br	8031c48 <ip_output+0x108>
      {
         pkt = m1->pkt;
 8031b7c:	e0bfff17 	ldw	r2,-4(fp)
 8031b80:	10800117 	ldw	r2,4(r2)
 8031b84:	e0bffb15 	stw	r2,-20(fp)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 8031b88:	e0bffb17 	ldw	r2,-20(fp)
 8031b8c:	10c00117 	ldw	r3,4(r2)
 8031b90:	e0bffb17 	ldw	r2,-20(fp)
 8031b94:	10800217 	ldw	r2,8(r2)
 8031b98:	1885883a 	add	r2,r3,r2
             (m1->m_data + m1->m_len + m2->m_len))
 8031b9c:	e0ffff17 	ldw	r3,-4(fp)
 8031ba0:	19000317 	ldw	r4,12(r3)
 8031ba4:	e0ffff17 	ldw	r3,-4(fp)
 8031ba8:	19400217 	ldw	r5,8(r3)
 8031bac:	e0fffe17 	ldw	r3,-8(fp)
 8031bb0:	18c00217 	ldw	r3,8(r3)
 8031bb4:	28c7883a 	add	r3,r5,r3
 8031bb8:	20c7883a 	add	r3,r4,r3
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 8031bbc:	1880292e 	bgeu	r3,r2,8031c64 <ip_output+0x124>
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 8031bc0:	e0bfff17 	ldw	r2,-4(fp)
 8031bc4:	10c00317 	ldw	r3,12(r2)
 8031bc8:	e0bfff17 	ldw	r2,-4(fp)
 8031bcc:	10800217 	ldw	r2,8(r2)
 8031bd0:	1887883a 	add	r3,r3,r2
 8031bd4:	e0bffe17 	ldw	r2,-8(fp)
 8031bd8:	11000317 	ldw	r4,12(r2)
 8031bdc:	e0bffe17 	ldw	r2,-8(fp)
 8031be0:	10800217 	ldw	r2,8(r2)
 8031be4:	100d883a 	mov	r6,r2
 8031be8:	200b883a 	mov	r5,r4
 8031bec:	1809883a 	mov	r4,r3
 8031bf0:	80037cc0 	call	80037cc <memcpy>
            m1->m_len += m2->m_len;
 8031bf4:	e0bfff17 	ldw	r2,-4(fp)
 8031bf8:	10c00217 	ldw	r3,8(r2)
 8031bfc:	e0bffe17 	ldw	r2,-8(fp)
 8031c00:	10800217 	ldw	r2,8(r2)
 8031c04:	1887883a 	add	r3,r3,r2
 8031c08:	e0bfff17 	ldw	r2,-4(fp)
 8031c0c:	10c00215 	stw	r3,8(r2)
            m1->m_next = m2->m_next;
 8031c10:	e0bffe17 	ldw	r2,-8(fp)
 8031c14:	10c00617 	ldw	r3,24(r2)
 8031c18:	e0bfff17 	ldw	r2,-4(fp)
 8031c1c:	10c00615 	stw	r3,24(r2)
            m_free(m2);    /* free this m2.... */
 8031c20:	e13ffe17 	ldw	r4,-8(fp)
 8031c24:	80310dc0 	call	80310dc <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
 8031c28:	e0bfff17 	ldw	r2,-4(fp)
 8031c2c:	10800617 	ldw	r2,24(r2)
 8031c30:	e0bffe15 	stw	r2,-8(fp)
            tcpstat.tcps_oappends++;
 8031c34:	008201b4 	movhi	r2,2054
 8031c38:	10bf7117 	ldw	r2,-572(r2)
 8031c3c:	10c00044 	addi	r3,r2,1
 8031c40:	008201b4 	movhi	r2,2054
 8031c44:	10ff7115 	stw	r3,-572(r2)
      while (m2 && (m2->m_len < 10))
 8031c48:	e0bffe17 	ldw	r2,-8(fp)
 8031c4c:	10005726 	beq	r2,zero,8031dac <ip_output+0x26c>
 8031c50:	e0bffe17 	ldw	r2,-8(fp)
 8031c54:	10800217 	ldw	r2,8(r2)
 8031c58:	108002b0 	cmpltui	r2,r2,10
 8031c5c:	103fc71e 	bne	r2,zero,8031b7c <ip_output+0x3c>
 8031c60:	00005206 	br	8031dac <ip_output+0x26c>
         }
         else     /* if won't fit, fall to next copy */
            break;
 8031c64:	0001883a 	nop
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 8031c68:	00005006 	br	8031dac <ip_output+0x26c>
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 8031c6c:	e0bffe17 	ldw	r2,-8(fp)
 8031c70:	10c00317 	ldw	r3,12(r2)
 8031c74:	e0bffe17 	ldw	r2,-8(fp)
 8031c78:	10800117 	ldw	r2,4(r2)
 8031c7c:	10800117 	ldw	r2,4(r2)
 8031c80:	1885c83a 	sub	r2,r3,r2
 8031c84:	e0bffa15 	stw	r2,-24(fp)
         if (e < MaxLnh)
 8031c88:	d0a07c17 	ldw	r2,-32272(gp)
 8031c8c:	e0fffa17 	ldw	r3,-24(fp)
 8031c90:	1880090e 	bge	r3,r2,8031cb8 <ip_output+0x178>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 8031c94:	d0a07c17 	ldw	r2,-32272(gp)
 8031c98:	e1bffa17 	ldw	r6,-24(fp)
 8031c9c:	100b883a 	mov	r5,r2
 8031ca0:	01020174 	movhi	r4,2053
 8031ca4:	210efa04 	addi	r4,r4,15336
 8031ca8:	8003b840 	call	8003b84 <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
 8031cac:	01020174 	movhi	r4,2053
 8031cb0:	210f0004 	addi	r4,r4,15360
 8031cb4:	802bd8c0 	call	802bd8c <panic>
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 8031cb8:	e0bfff17 	ldw	r2,-4(fp)
 8031cbc:	10800217 	ldw	r2,8(r2)
 8031cc0:	d0e07c17 	ldw	r3,-32272(gp)
 8031cc4:	e13ffa17 	ldw	r4,-24(fp)
 8031cc8:	20c7c83a 	sub	r3,r4,r3
 8031ccc:	10c0392e 	bgeu	r2,r3,8031db4 <ip_output+0x274>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
 8031cd0:	e0bfff17 	ldw	r2,-4(fp)
 8031cd4:	10800217 	ldw	r2,8(r2)
 8031cd8:	108000cc 	andi	r2,r2,3
 8031cdc:	1000351e 	bne	r2,zero,8031db4 <ip_output+0x274>
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
 8031ce0:	e0bffe17 	ldw	r2,-8(fp)
 8031ce4:	10c00317 	ldw	r3,12(r2)
 8031ce8:	e0bffe17 	ldw	r2,-8(fp)
 8031cec:	10800117 	ldw	r2,4(r2)
 8031cf0:	10800117 	ldw	r2,4(r2)
 8031cf4:	1885c83a 	sub	r2,r3,r2
 8031cf8:	10800e18 	cmpnei	r2,r2,56
 8031cfc:	10002d1e 	bne	r2,zero,8031db4 <ip_output+0x274>
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 8031d00:	e0bffe17 	ldw	r2,-8(fp)
 8031d04:	10c00317 	ldw	r3,12(r2)
 8031d08:	e0bfff17 	ldw	r2,-4(fp)
 8031d0c:	10800217 	ldw	r2,8(r2)
 8031d10:	0085c83a 	sub	r2,zero,r2
 8031d14:	1887883a 	add	r3,r3,r2
 8031d18:	e0bfff17 	ldw	r2,-4(fp)
 8031d1c:	11000317 	ldw	r4,12(r2)
 8031d20:	e0bfff17 	ldw	r2,-4(fp)
 8031d24:	10800217 	ldw	r2,8(r2)
 8031d28:	100d883a 	mov	r6,r2
 8031d2c:	200b883a 	mov	r5,r4
 8031d30:	1809883a 	mov	r4,r3
 8031d34:	80037cc0 	call	80037cc <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 8031d38:	e0bffe17 	ldw	r2,-8(fp)
 8031d3c:	10c00317 	ldw	r3,12(r2)
 8031d40:	e0bfff17 	ldw	r2,-4(fp)
 8031d44:	10800217 	ldw	r2,8(r2)
 8031d48:	0085c83a 	sub	r2,zero,r2
 8031d4c:	1887883a 	add	r3,r3,r2
 8031d50:	e0bffe17 	ldw	r2,-8(fp)
 8031d54:	10c00315 	stw	r3,12(r2)
            m2->m_len += m1->m_len;
 8031d58:	e0bffe17 	ldw	r2,-8(fp)
 8031d5c:	10c00217 	ldw	r3,8(r2)
 8031d60:	e0bfff17 	ldw	r2,-4(fp)
 8031d64:	10800217 	ldw	r2,8(r2)
 8031d68:	1887883a 	add	r3,r3,r2
 8031d6c:	e0bffe17 	ldw	r2,-8(fp)
 8031d70:	10c00215 	stw	r3,8(r2)
            m_free(m1);    /* free head (copied) mbuf */
 8031d74:	e13fff17 	ldw	r4,-4(fp)
 8031d78:	80310dc0 	call	80310dc <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
 8031d7c:	e0bffe17 	ldw	r2,-8(fp)
 8031d80:	e0bfff15 	stw	r2,-4(fp)
 8031d84:	e0bfff17 	ldw	r2,-4(fp)
 8031d88:	e0bff715 	stw	r2,-36(fp)
            m2 = m2->m_next;  /* loop to while(m2) test */
 8031d8c:	e0bffe17 	ldw	r2,-8(fp)
 8031d90:	10800617 	ldw	r2,24(r2)
 8031d94:	e0bffe15 	stw	r2,-8(fp)
            tcpstat.tcps_oprepends++;
 8031d98:	008201b4 	movhi	r2,2054
 8031d9c:	10bf7017 	ldw	r2,-576(r2)
 8031da0:	10c00044 	addi	r3,r2,1
 8031da4:	008201b4 	movhi	r2,2054
 8031da8:	10ff7015 	stw	r3,-576(r2)
      while (m2)  /* If we still have two or more buffers, more copying: */
 8031dac:	e0bffe17 	ldw	r2,-8(fp)
 8031db0:	103fae1e 	bne	r2,zero,8031c6c <ip_output+0x12c>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      if (m2)  /* If all else fails, brute force copy: */
 8031db4:	e0bffe17 	ldw	r2,-8(fp)
 8031db8:	10006c26 	beq	r2,zero,8031f6c <ip_output+0x42c>
      {
         total = 0;
 8031dbc:	e03ffc15 	stw	zero,-16(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 8031dc0:	e0bfff17 	ldw	r2,-4(fp)
 8031dc4:	e0bffd15 	stw	r2,-12(fp)
 8031dc8:	00000806 	br	8031dec <ip_output+0x2ac>
            total += mtmp->m_len;
 8031dcc:	e0bffd17 	ldw	r2,-12(fp)
 8031dd0:	10c00217 	ldw	r3,8(r2)
 8031dd4:	e0bffc17 	ldw	r2,-16(fp)
 8031dd8:	1885883a 	add	r2,r3,r2
 8031ddc:	e0bffc15 	stw	r2,-16(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 8031de0:	e0bffd17 	ldw	r2,-12(fp)
 8031de4:	10800617 	ldw	r2,24(r2)
 8031de8:	e0bffd15 	stw	r2,-12(fp)
 8031dec:	e0bffd17 	ldw	r2,-12(fp)
 8031df0:	103ff61e 	bne	r2,zero,8031dcc <ip_output+0x28c>
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8031df4:	01000084 	movi	r4,2
 8031df8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
 8031dfc:	e0bffc17 	ldw	r2,-16(fp)
 8031e00:	10800e04 	addi	r2,r2,56
 8031e04:	1009883a 	mov	r4,r2
 8031e08:	802f6300 	call	802f630 <pk_alloc>
 8031e0c:	e0bffb15 	stw	r2,-20(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8031e10:	01000084 	movi	r4,2
 8031e14:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         if (!pkt)
 8031e18:	e0bffb17 	ldw	r2,-20(fp)
 8031e1c:	1000021e 	bne	r2,zero,8031e28 <ip_output+0x2e8>
            return ENOBUFS;
 8031e20:	00801a44 	movi	r2,105
 8031e24:	0000a306 	br	80320b4 <ip_output+0x574>
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
 8031e28:	e0bffb17 	ldw	r2,-20(fp)
 8031e2c:	10800117 	ldw	r2,4(r2)
 8031e30:	d0e07c17 	ldw	r3,-32272(gp)
 8031e34:	10c7883a 	add	r3,r2,r3
 8031e38:	e0bffb17 	ldw	r2,-20(fp)
 8031e3c:	10c00315 	stw	r3,12(r2)

         mtmp = m1;
 8031e40:	e0bfff17 	ldw	r2,-4(fp)
 8031e44:	e0bffd15 	stw	r2,-12(fp)
         while (mtmp)
 8031e48:	00002706 	br	8031ee8 <ip_output+0x3a8>
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
 8031e4c:	e0bffb17 	ldw	r2,-20(fp)
 8031e50:	10c00317 	ldw	r3,12(r2)
 8031e54:	e0bffd17 	ldw	r2,-12(fp)
 8031e58:	11000317 	ldw	r4,12(r2)
 8031e5c:	e0bffd17 	ldw	r2,-12(fp)
 8031e60:	10800217 	ldw	r2,8(r2)
 8031e64:	100d883a 	mov	r6,r2
 8031e68:	200b883a 	mov	r5,r4
 8031e6c:	1809883a 	mov	r4,r3
 8031e70:	80037cc0 	call	80037cc <memcpy>
            pkt->nb_prot += mtmp->m_len;
 8031e74:	e0bffb17 	ldw	r2,-20(fp)
 8031e78:	10c00317 	ldw	r3,12(r2)
 8031e7c:	e0bffd17 	ldw	r2,-12(fp)
 8031e80:	10800217 	ldw	r2,8(r2)
 8031e84:	1887883a 	add	r3,r3,r2
 8031e88:	e0bffb17 	ldw	r2,-20(fp)
 8031e8c:	10c00315 	stw	r3,12(r2)
            pkt->nb_plen += mtmp->m_len;
 8031e90:	e0bffb17 	ldw	r2,-20(fp)
 8031e94:	10c00417 	ldw	r3,16(r2)
 8031e98:	e0bffd17 	ldw	r2,-12(fp)
 8031e9c:	10800217 	ldw	r2,8(r2)
 8031ea0:	1887883a 	add	r3,r3,r2
 8031ea4:	e0bffb17 	ldw	r2,-20(fp)
 8031ea8:	10c00415 	stw	r3,16(r2)
            m2 = mtmp;
 8031eac:	e0bffd17 	ldw	r2,-12(fp)
 8031eb0:	e0bffe15 	stw	r2,-8(fp)
            mtmp = mtmp->m_next;
 8031eb4:	e0bffd17 	ldw	r2,-12(fp)
 8031eb8:	10800617 	ldw	r2,24(r2)
 8031ebc:	e0bffd15 	stw	r2,-12(fp)
            if (m2 != data)   /* save original head */
 8031ec0:	e0fffe17 	ldw	r3,-8(fp)
 8031ec4:	e0bff717 	ldw	r2,-36(fp)
 8031ec8:	18800226 	beq	r3,r2,8031ed4 <ip_output+0x394>
               m_free(m2);
 8031ecc:	e13ffe17 	ldw	r4,-8(fp)
 8031ed0:	80310dc0 	call	80310dc <m_free>
            tcpstat.tcps_ocopies++;
 8031ed4:	008201b4 	movhi	r2,2054
 8031ed8:	10bf7217 	ldw	r2,-568(r2)
 8031edc:	10c00044 	addi	r3,r2,1
 8031ee0:	008201b4 	movhi	r2,2054
 8031ee4:	10ff7215 	stw	r3,-568(r2)
         while (mtmp)
 8031ee8:	e0bffd17 	ldw	r2,-12(fp)
 8031eec:	103fd71e 	bne	r2,zero,8031e4c <ip_output+0x30c>
         }
         pkt->nb_prot -= total;     /* fix data pointer */
 8031ef0:	e0bffb17 	ldw	r2,-20(fp)
 8031ef4:	10c00317 	ldw	r3,12(r2)
 8031ef8:	e0bffc17 	ldw	r2,-16(fp)
 8031efc:	0085c83a 	sub	r2,zero,r2
 8031f00:	1887883a 	add	r3,r3,r2
 8031f04:	e0bffb17 	ldw	r2,-20(fp)
 8031f08:	10c00315 	stw	r3,12(r2)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8031f0c:	01000084 	movi	r4,2
 8031f10:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
 8031f14:	e0bff717 	ldw	r2,-36(fp)
 8031f18:	10800117 	ldw	r2,4(r2)
 8031f1c:	1009883a 	mov	r4,r2
 8031f20:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8031f24:	01000084 	movi	r4,2
 8031f28:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
 8031f2c:	e0bff717 	ldw	r2,-36(fp)
 8031f30:	e0fffb17 	ldw	r3,-20(fp)
 8031f34:	10c00115 	stw	r3,4(r2)
         data->m_len = pkt->nb_plen;
 8031f38:	e0bffb17 	ldw	r2,-20(fp)
 8031f3c:	10c00417 	ldw	r3,16(r2)
 8031f40:	e0bff717 	ldw	r2,-36(fp)
 8031f44:	10c00215 	stw	r3,8(r2)
         data->m_next = NULL;
 8031f48:	e0bff717 	ldw	r2,-36(fp)
 8031f4c:	10000615 	stw	zero,24(r2)
         data->m_data = pkt->nb_prot;
 8031f50:	e0bffb17 	ldw	r2,-20(fp)
 8031f54:	10c00317 	ldw	r3,12(r2)
 8031f58:	e0bff717 	ldw	r2,-36(fp)
 8031f5c:	10c00315 	stw	r3,12(r2)
         data->m_len = total;
 8031f60:	e0fffc17 	ldw	r3,-16(fp)
 8031f64:	e0bff717 	ldw	r2,-36(fp)
 8031f68:	10c00215 	stw	r3,8(r2)
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
 8031f6c:	e0bff717 	ldw	r2,-36(fp)
 8031f70:	10c00317 	ldw	r3,12(r2)
 8031f74:	e0bff717 	ldw	r2,-36(fp)
 8031f78:	10800117 	ldw	r2,4(r2)
 8031f7c:	10800117 	ldw	r2,4(r2)
 8031f80:	d1207c17 	ldw	r4,-32272(gp)
 8031f84:	1105883a 	add	r2,r2,r4
 8031f88:	1880032e 	bgeu	r3,r2,8031f98 <ip_output+0x458>
      panic("ip_output: overflow");
 8031f8c:	01020174 	movhi	r4,2053
 8031f90:	210f0504 	addi	r4,r4,15380
 8031f94:	802bd8c0 	call	802bd8c <panic>

   pkt = data->pkt;
 8031f98:	e0bff717 	ldw	r2,-36(fp)
 8031f9c:	10800117 	ldw	r2,4(r2)
 8031fa0:	e0bffb15 	stw	r2,-20(fp)

   /* do we have options? */
   if (so_optsPack)
 8031fa4:	e0bff617 	ldw	r2,-40(fp)
 8031fa8:	10000326 	beq	r2,zero,8031fb8 <ip_output+0x478>
	   pkt->soxopts = so_optsPack;   /* yup */
 8031fac:	e0bffb17 	ldw	r2,-20(fp)
 8031fb0:	e0fff617 	ldw	r3,-40(fp)
 8031fb4:	10c00c15 	stw	r3,48(r2)
      panic("ip_output: no so_optsPack for the IPv6 scope");     
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
 8031fb8:	e0bff717 	ldw	r2,-36(fp)
 8031fbc:	10800317 	ldw	r2,12(r2)
 8031fc0:	e0bff915 	stw	r2,-28(fp)
   pkt->fhost = bip->ip_dest;
 8031fc4:	e0bff917 	ldw	r2,-28(fp)
 8031fc8:	10c00417 	ldw	r3,16(r2)
 8031fcc:	e0bffb17 	ldw	r2,-20(fp)
 8031fd0:	10c00715 	stw	r3,28(r2)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
 8031fd4:	e0bff917 	ldw	r2,-28(fp)
 8031fd8:	00c01144 	movi	r3,69
 8031fdc:	10c00005 	stb	r3,0(r2)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 8031fe0:	e0bff917 	ldw	r2,-28(fp)
 8031fe4:	1080008b 	ldhu	r2,2(r2)
 8031fe8:	10bfffcc 	andi	r2,r2,65535
 8031fec:	1004d23a 	srli	r2,r2,8
 8031ff0:	1007883a 	mov	r3,r2
 8031ff4:	e0bff917 	ldw	r2,-28(fp)
 8031ff8:	1080008b 	ldhu	r2,2(r2)
 8031ffc:	10bfffcc 	andi	r2,r2,65535
 8032000:	1004923a 	slli	r2,r2,8
 8032004:	1884b03a 	or	r2,r3,r2
 8032008:	1007883a 	mov	r3,r2
 803200c:	e0bff917 	ldw	r2,-28(fp)
 8032010:	10c0008d 	sth	r3,2(r2)
   tcpp = (struct tcphdr *)ip_data(bip);
 8032014:	e0bff917 	ldw	r2,-28(fp)
 8032018:	10800003 	ldbu	r2,0(r2)
 803201c:	10803fcc 	andi	r2,r2,255
 8032020:	100490ba 	slli	r2,r2,2
 8032024:	10800f0c 	andi	r2,r2,60
 8032028:	e0fff917 	ldw	r3,-28(fp)
 803202c:	1885883a 	add	r2,r3,r2
 8032030:	e0bff815 	stw	r2,-32(fp)
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
 8032034:	e13ff917 	ldw	r4,-28(fp)
 8032038:	804a6800 	call	804a680 <tcp_cksum>
 803203c:	1007883a 	mov	r3,r2
 8032040:	e0bff817 	ldw	r2,-32(fp)
 8032044:	10c0040d 	sth	r3,16(r2)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
 8032048:	e0bff917 	ldw	r2,-28(fp)
 803204c:	10c00504 	addi	r3,r2,20
 8032050:	e0bffb17 	ldw	r2,-20(fp)
 8032054:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 8032058:	e0bff717 	ldw	r2,-36(fp)
 803205c:	10800217 	ldw	r2,8(r2)
 8032060:	10fffb04 	addi	r3,r2,-20
 8032064:	e0bffb17 	ldw	r2,-20(fp)
 8032068:	10c00415 	stw	r3,16(r2)

   e = ip_write(IPPROTO_TCP, pkt);
 803206c:	e17ffb17 	ldw	r5,-20(fp)
 8032070:	01000184 	movi	r4,6
 8032074:	80427300 	call	8042730 <ip_write>
 8032078:	e0bffa15 	stw	r2,-24(fp)

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
 803207c:	e0bff717 	ldw	r2,-36(fp)
 8032080:	10000115 	stw	zero,4(r2)
   m_freem(data);
 8032084:	e13ff717 	ldw	r4,-36(fp)
 8032088:	80311e00 	call	80311e0 <m_freem>

   if (e < 0)
 803208c:	e0bffa17 	ldw	r2,-24(fp)
 8032090:	1000070e 	bge	r2,zero,80320b0 <ip_output+0x570>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 8032094:	e0bffa17 	ldw	r2,-24(fp)
 8032098:	10bffa98 	cmpnei	r2,r2,-22
 803209c:	1000021e 	bne	r2,zero,80320a8 <ip_output+0x568>
         return 0;
 80320a0:	0005883a 	mov	r2,zero
 80320a4:	00000306 	br	80320b4 <ip_output+0x574>
      return e;
 80320a8:	e0bffa17 	ldw	r2,-24(fp)
 80320ac:	00000106 	br	80320b4 <ip_output+0x574>
   }
   else
      return 0;
 80320b0:	0005883a 	mov	r2,zero
}
 80320b4:	e037883a 	mov	sp,fp
 80320b8:	dfc00117 	ldw	ra,4(sp)
 80320bc:	df000017 	ldw	fp,0(sp)
 80320c0:	dec00204 	addi	sp,sp,8
 80320c4:	f800283a 	ret

080320c8 <in_broadcast>:
 * RETURNS: TRUE if broadcast, else FALSE
 */

int
in_broadcast(u_long ipaddr)   /* passed in net endian */
{
 80320c8:	defffe04 	addi	sp,sp,-8
 80320cc:	df000115 	stw	fp,4(sp)
 80320d0:	df000104 	addi	fp,sp,4
 80320d4:	e13fff15 	stw	r4,-4(fp)
   if (ipaddr == 0xffffffff)
 80320d8:	e0bfff17 	ldw	r2,-4(fp)
 80320dc:	10bfffd8 	cmpnei	r2,r2,-1
 80320e0:	1000021e 	bne	r2,zero,80320ec <in_broadcast+0x24>
      return TRUE;
 80320e4:	00800044 	movi	r2,1
 80320e8:	00000106 	br	80320f0 <in_broadcast+0x28>

   return FALSE;
 80320ec:	0005883a 	mov	r2,zero
}
 80320f0:	e037883a 	mov	sp,fp
 80320f4:	df000017 	ldw	fp,0(sp)
 80320f8:	dec00104 	addi	sp,sp,4
 80320fc:	f800283a 	ret

08032100 <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 8032100:	defffb04 	addi	sp,sp,-20
 8032104:	dfc00415 	stw	ra,16(sp)
 8032108:	df000315 	stw	fp,12(sp)
 803210c:	df000304 	addi	fp,sp,12
 8032110:	e13ffe15 	stw	r4,-8(fp)
 8032114:	e17ffd15 	stw	r5,-12(fp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
 8032118:	e0bffe17 	ldw	r2,-8(fp)
 803211c:	10800003 	ldbu	r2,0(r2)
 8032120:	10803fcc 	andi	r2,r2,255
 8032124:	100490ba 	slli	r2,r2,2
 8032128:	10800f0c 	andi	r2,r2,60
 803212c:	e0bfff15 	stw	r2,-4(fp)

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
 8032130:	e0bfff17 	ldw	r2,-4(fp)
 8032134:	10800548 	cmpgei	r2,r2,21
 8032138:	10002726 	beq	r2,zero,80321d8 <np_stripoptions+0xd8>
      return;

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
 803213c:	e0bfff17 	ldw	r2,-4(fp)
 8032140:	10bffb04 	addi	r2,r2,-20
 8032144:	e0bfff15 	stw	r2,-4(fp)

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
 8032148:	e0bffe17 	ldw	r2,-8(fp)
 803214c:	1080008b 	ldhu	r2,2(r2)
 8032150:	e0ffff17 	ldw	r3,-4(fp)
 8032154:	10c5c83a 	sub	r2,r2,r3
 8032158:	1007883a 	mov	r3,r2
 803215c:	e0bffe17 	ldw	r2,-8(fp)
 8032160:	10c0008d 	sth	r3,2(r2)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 8032164:	e0bffe17 	ldw	r2,-8(fp)
 8032168:	10800003 	ldbu	r2,0(r2)
 803216c:	1007883a 	mov	r3,r2
 8032170:	00bffc04 	movi	r2,-16
 8032174:	1884703a 	and	r2,r3,r2
 8032178:	10800154 	ori	r2,r2,5
 803217c:	1007883a 	mov	r3,r2
 8032180:	e0bffe17 	ldw	r2,-8(fp)
 8032184:	10c00005 	stb	r3,0(r2)

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 8032188:	e0bfff17 	ldw	r2,-4(fp)
 803218c:	e0fffe17 	ldw	r3,-8(fp)
 8032190:	1885883a 	add	r2,r3,r2
 8032194:	01800504 	movi	r6,20
 8032198:	e17ffe17 	ldw	r5,-8(fp)
 803219c:	1009883a 	mov	r4,r2
 80321a0:	800c1f00 	call	800c1f0 <memmove>
   m->m_len -= ihlen;
 80321a4:	e0bffd17 	ldw	r2,-12(fp)
 80321a8:	10c00217 	ldw	r3,8(r2)
 80321ac:	e0bfff17 	ldw	r2,-4(fp)
 80321b0:	1887c83a 	sub	r3,r3,r2
 80321b4:	e0bffd17 	ldw	r2,-12(fp)
 80321b8:	10c00215 	stw	r3,8(r2)
   m->m_data += ihlen;
 80321bc:	e0bffd17 	ldw	r2,-12(fp)
 80321c0:	10c00317 	ldw	r3,12(r2)
 80321c4:	e0bfff17 	ldw	r2,-4(fp)
 80321c8:	1887883a 	add	r3,r3,r2
 80321cc:	e0bffd17 	ldw	r2,-12(fp)
 80321d0:	10c00315 	stw	r3,12(r2)
 80321d4:	00000106 	br	80321dc <np_stripoptions+0xdc>
      return;
 80321d8:	0001883a 	nop
}
 80321dc:	e037883a 	mov	sp,fp
 80321e0:	dfc00117 	ldw	ra,4(sp)
 80321e4:	df000017 	ldw	fp,0(sp)
 80321e8:	dec00204 	addi	sp,sp,8
 80321ec:	f800283a 	ret

080321f0 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
 80321f0:	defff304 	addi	sp,sp,-52
 80321f4:	dfc00c15 	stw	ra,48(sp)
 80321f8:	df000b15 	stw	fp,44(sp)
 80321fc:	df000b04 	addi	fp,sp,44
 8032200:	e13ff815 	stw	r4,-32(fp)
 8032204:	e17ff715 	stw	r5,-36(fp)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 8032208:	e0bff717 	ldw	r2,-36(fp)
 803220c:	10800617 	ldw	r2,24(r2)
 8032210:	1006d63a 	srli	r3,r2,24
 8032214:	e0bff717 	ldw	r2,-36(fp)
 8032218:	10800617 	ldw	r2,24(r2)
 803221c:	1004d23a 	srli	r2,r2,8
 8032220:	10bfc00c 	andi	r2,r2,65280
 8032224:	1886b03a 	or	r3,r3,r2
 8032228:	e0bff717 	ldw	r2,-36(fp)
 803222c:	10800617 	ldw	r2,24(r2)
 8032230:	1004923a 	slli	r2,r2,8
 8032234:	10803fec 	andhi	r2,r2,255
 8032238:	1886b03a 	or	r3,r3,r2
 803223c:	e0bff717 	ldw	r2,-36(fp)
 8032240:	10800617 	ldw	r2,24(r2)
 8032244:	1004963a 	slli	r2,r2,24
 8032248:	1884b03a 	or	r2,r3,r2
 803224c:	e0bffe15 	stw	r2,-8(fp)
   lhost = htonl(pdp->dip.ip_src);
 8032250:	e0bff717 	ldw	r2,-36(fp)
 8032254:	10800517 	ldw	r2,20(r2)
 8032258:	1006d63a 	srli	r3,r2,24
 803225c:	e0bff717 	ldw	r2,-36(fp)
 8032260:	10800517 	ldw	r2,20(r2)
 8032264:	1004d23a 	srli	r2,r2,8
 8032268:	10bfc00c 	andi	r2,r2,65280
 803226c:	1886b03a 	or	r3,r3,r2
 8032270:	e0bff717 	ldw	r2,-36(fp)
 8032274:	10800517 	ldw	r2,20(r2)
 8032278:	1004923a 	slli	r2,r2,8
 803227c:	10803fec 	andhi	r2,r2,255
 8032280:	1886b03a 	or	r3,r3,r2
 8032284:	e0bff717 	ldw	r2,-36(fp)
 8032288:	10800517 	ldw	r2,20(r2)
 803228c:	1004963a 	slli	r2,r2,24
 8032290:	1884b03a 	or	r2,r3,r2
 8032294:	e0bffd15 	stw	r2,-12(fp)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 8032298:	e0bff717 	ldw	r2,-36(fp)
 803229c:	10800704 	addi	r2,r2,28
 80322a0:	1080000b 	ldhu	r2,0(r2)
 80322a4:	10bfffcc 	andi	r2,r2,65535
 80322a8:	1004d23a 	srli	r2,r2,8
 80322ac:	1007883a 	mov	r3,r2
 80322b0:	e0bff717 	ldw	r2,-36(fp)
 80322b4:	10800704 	addi	r2,r2,28
 80322b8:	1080000b 	ldhu	r2,0(r2)
 80322bc:	10bfffcc 	andi	r2,r2,65535
 80322c0:	1004923a 	slli	r2,r2,8
 80322c4:	1884b03a 	or	r2,r3,r2
 80322c8:	e0bffc8d 	sth	r2,-14(fp)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 80322cc:	e0bff717 	ldw	r2,-36(fp)
 80322d0:	10800784 	addi	r2,r2,30
 80322d4:	1080000b 	ldhu	r2,0(r2)
 80322d8:	10bfffcc 	andi	r2,r2,65535
 80322dc:	1004d23a 	srli	r2,r2,8
 80322e0:	1007883a 	mov	r3,r2
 80322e4:	e0bff717 	ldw	r2,-36(fp)
 80322e8:	10800784 	addi	r2,r2,30
 80322ec:	1080000b 	ldhu	r2,0(r2)
 80322f0:	10bfffcc 	andi	r2,r2,65535
 80322f4:	1004923a 	slli	r2,r2,8
 80322f8:	1884b03a 	or	r2,r3,r2
 80322fc:	e0bffc0d 	sth	r2,-16(fp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
 8032300:	e0bff717 	ldw	r2,-36(fp)
 8032304:	10800043 	ldbu	r2,1(r2)
 8032308:	10803fcc 	andi	r2,r2,255
 803230c:	1080201c 	xori	r2,r2,128
 8032310:	10bfe004 	addi	r2,r2,-128
 8032314:	10800118 	cmpnei	r2,r2,4
 8032318:	10006e26 	beq	r2,zero,80324d4 <so_icmpdu+0x2e4>
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 803231c:	e0bff717 	ldw	r2,-36(fp)
 8032320:	10800443 	ldbu	r2,17(r2)
 8032324:	10803fcc 	andi	r2,r2,255
 8032328:	10800198 	cmpnei	r2,r2,6
 803232c:	1000221e 	bne	r2,zero,80323b8 <so_icmpdu+0x1c8>
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
 8032330:	e13ffc0b 	ldhu	r4,-16(fp)
 8032334:	e0bffc8b 	ldhu	r2,-14(fp)
 8032338:	00c00044 	movi	r3,1
 803233c:	d8c00115 	stw	r3,4(sp)
 8032340:	d8800015 	stw	r2,0(sp)
 8032344:	e1fffd17 	ldw	r7,-12(fp)
 8032348:	200d883a 	mov	r6,r4
 803234c:	e17ffe17 	ldw	r5,-8(fp)
 8032350:	010201b4 	movhi	r4,2054
 8032354:	213f3304 	addi	r4,r4,-820
 8032358:	804ae480 	call	804ae48 <in_pcblookup>
 803235c:	e0bffa15 	stw	r2,-24(fp)
      if (inp == 0)
 8032360:	e0bffa17 	ldw	r2,-24(fp)
 8032364:	10005d26 	beq	r2,zero,80324dc <so_icmpdu+0x2ec>
         goto done;
      so = inp->inp_socket;
 8032368:	e0bffa17 	ldw	r2,-24(fp)
 803236c:	10800817 	ldw	r2,32(r2)
 8032370:	e0bffb15 	stw	r2,-20(fp)
      if (so == 0)
 8032374:	e0bffb17 	ldw	r2,-20(fp)
 8032378:	10005a26 	beq	r2,zero,80324e4 <so_icmpdu+0x2f4>
         goto done;
      tp = intotcpcb(inp);
 803237c:	e0bffa17 	ldw	r2,-24(fp)
 8032380:	10800917 	ldw	r2,36(r2)
 8032384:	e0bff915 	stw	r2,-28(fp)
      if (tp)
 8032388:	e0bff917 	ldw	r2,-28(fp)
 803238c:	10000626 	beq	r2,zero,80323a8 <so_icmpdu+0x1b8>
      {
         if (tp->t_state <= TCPS_LISTEN)
 8032390:	e0bff917 	ldw	r2,-28(fp)
 8032394:	10800217 	ldw	r2,8(r2)
 8032398:	10800088 	cmpgei	r2,r2,2
 803239c:	10005326 	beq	r2,zero,80324ec <so_icmpdu+0x2fc>
               goto done;
        }
   }
#endif

         tcp_close(tp);
 80323a0:	e13ff917 	ldw	r4,-28(fp)
 80323a4:	803c6bc0 	call	803c6bc <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 80323a8:	e0bffb17 	ldw	r2,-20(fp)
 80323ac:	00c01bc4 	movi	r3,111
 80323b0:	10c00615 	stw	r3,24(r2)
 80323b4:	00005406 	br	8032508 <so_icmpdu+0x318>
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
 80323b8:	e0bff717 	ldw	r2,-36(fp)
 80323bc:	10800443 	ldbu	r2,17(r2)
 80323c0:	10803fcc 	andi	r2,r2,255
 80323c4:	10800458 	cmpnei	r2,r2,17
 80323c8:	10004a1e 	bne	r2,zero,80324f4 <so_icmpdu+0x304>
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 80323cc:	d0a09717 	ldw	r2,-32164(gp)
 80323d0:	e0bfff15 	stw	r2,-4(fp)
 80323d4:	00002106 	br	803245c <so_icmpdu+0x26c>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 80323d8:	e0bfff17 	ldw	r2,-4(fp)
 80323dc:	1080020b 	ldhu	r2,8(r2)
 80323e0:	e0fffc0b 	ldhu	r3,-16(fp)
 80323e4:	10bfffcc 	andi	r2,r2,65535
 80323e8:	18800426 	beq	r3,r2,80323fc <so_icmpdu+0x20c>
 80323ec:	e0bfff17 	ldw	r2,-4(fp)
 80323f0:	1080020b 	ldhu	r2,8(r2)
 80323f4:	10bfffcc 	andi	r2,r2,65535
 80323f8:	1000151e 	bne	r2,zero,8032450 <so_icmpdu+0x260>
             (tmp->u_fhost == htonl(fhost)) &&
 80323fc:	e0bfff17 	ldw	r2,-4(fp)
 8032400:	10c00417 	ldw	r3,16(r2)
 8032404:	e0bffe17 	ldw	r2,-8(fp)
 8032408:	1008d63a 	srli	r4,r2,24
 803240c:	e0bffe17 	ldw	r2,-8(fp)
 8032410:	1004d23a 	srli	r2,r2,8
 8032414:	10bfc00c 	andi	r2,r2,65280
 8032418:	2088b03a 	or	r4,r4,r2
 803241c:	e0bffe17 	ldw	r2,-8(fp)
 8032420:	1004923a 	slli	r2,r2,8
 8032424:	10803fec 	andhi	r2,r2,255
 8032428:	2088b03a 	or	r4,r4,r2
 803242c:	e0bffe17 	ldw	r2,-8(fp)
 8032430:	1004963a 	slli	r2,r2,24
 8032434:	2084b03a 	or	r2,r4,r2
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 8032438:	1880051e 	bne	r3,r2,8032450 <so_icmpdu+0x260>
             (tmp->u_lport == lport))
 803243c:	e0bfff17 	ldw	r2,-4(fp)
 8032440:	1080018b 	ldhu	r2,6(r2)
             (tmp->u_fhost == htonl(fhost)) &&
 8032444:	e0fffc8b 	ldhu	r3,-14(fp)
 8032448:	10bfffcc 	andi	r2,r2,65535
 803244c:	18800626 	beq	r3,r2,8032468 <so_icmpdu+0x278>
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8032450:	e0bfff17 	ldw	r2,-4(fp)
 8032454:	10800017 	ldw	r2,0(r2)
 8032458:	e0bfff15 	stw	r2,-4(fp)
 803245c:	e0bfff17 	ldw	r2,-4(fp)
 8032460:	103fdd1e 	bne	r2,zero,80323d8 <so_icmpdu+0x1e8>
 8032464:	00000106 	br	803246c <so_icmpdu+0x27c>
         {
            break;   /* found our UDP table entry */
 8032468:	0001883a 	nop
         }
      if (!tmp) 
 803246c:	e0bfff17 	ldw	r2,-4(fp)
 8032470:	10002226 	beq	r2,zero,80324fc <so_icmpdu+0x30c>
         goto done;
      so = (struct socket *)tmp->u_data;
 8032474:	e0bfff17 	ldw	r2,-4(fp)
 8032478:	10800617 	ldw	r2,24(r2)
 803247c:	e0bffb15 	stw	r2,-20(fp)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
 8032480:	e0bffb17 	ldw	r2,-20(fp)
 8032484:	10800983 	ldbu	r2,38(r2)
 8032488:	10803fcc 	andi	r2,r2,255
 803248c:	1080201c 	xori	r2,r2,128
 8032490:	10bfe004 	addi	r2,r2,-128
 8032494:	108000a0 	cmpeqi	r2,r2,2
 8032498:	10001a26 	beq	r2,zero,8032504 <so_icmpdu+0x314>
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 803249c:	e0bffb17 	ldw	r2,-20(fp)
 80324a0:	00c01bc4 	movi	r3,111
 80324a4:	10c00615 	stw	r3,24(r2)
      /* do a select() notify on socket here */
      sorwakeup(so);
 80324a8:	e0bffb17 	ldw	r2,-20(fp)
 80324ac:	10800a04 	addi	r2,r2,40
 80324b0:	100b883a 	mov	r5,r2
 80324b4:	e13ffb17 	ldw	r4,-20(fp)
 80324b8:	8036f040 	call	8036f04 <sbwakeup>
      sowwakeup(so);
 80324bc:	e0bffb17 	ldw	r2,-20(fp)
 80324c0:	10801204 	addi	r2,r2,72
 80324c4:	100b883a 	mov	r5,r2
 80324c8:	e13ffb17 	ldw	r4,-20(fp)
 80324cc:	8036f040 	call	8036f04 <sbwakeup>
 80324d0:	00000d06 	br	8032508 <so_icmpdu+0x318>
       goto done;
 80324d4:	0001883a 	nop
 80324d8:	00000b06 	br	8032508 <so_icmpdu+0x318>
         goto done;
 80324dc:	0001883a 	nop
 80324e0:	00000906 	br	8032508 <so_icmpdu+0x318>
         goto done;
 80324e4:	0001883a 	nop
 80324e8:	00000706 	br	8032508 <so_icmpdu+0x318>
            goto done;
 80324ec:	0001883a 	nop
 80324f0:	00000506 	br	8032508 <so_icmpdu+0x318>
   }
#endif   /* UDP_SOCKETS */
   else
      goto done;
 80324f4:	0001883a 	nop
 80324f8:	00000306 	br	8032508 <so_icmpdu+0x318>
         goto done;
 80324fc:	0001883a 	nop
 8032500:	00000106 	br	8032508 <so_icmpdu+0x318>
         goto done;
 8032504:	0001883a 	nop
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8032508:	01000084 	movi	r4,2
 803250c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
 8032510:	e13ff817 	ldw	r4,-32(fp)
 8032514:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8032518:	01000084 	movi	r4,2
 803251c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return;
 8032520:	0001883a 	nop
}
 8032524:	e037883a 	mov	sp,fp
 8032528:	dfc00117 	ldw	ra,4(sp)
 803252c:	df000017 	ldw	fp,0(sp)
 8032530:	dec00204 	addi	sp,sp,8
 8032534:	f800283a 	ret

08032538 <tcp_tick>:
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
 8032538:	defffe04 	addi	sp,sp,-8
 803253c:	dfc00115 	stw	ra,4(sp)
 8032540:	df000015 	stw	fp,0(sp)
 8032544:	d839883a 	mov	fp,sp
   /* guard against re-entry */
   if (in_tcptick)
 8032548:	d0a0a817 	ldw	r2,-32096(gp)
 803254c:	1000121e 	bne	r2,zero,8032598 <tcp_tick+0x60>
      return;
   in_tcptick++;
 8032550:	d0a0a817 	ldw	r2,-32096(gp)
 8032554:	10800044 	addi	r2,r2,1
 8032558:	d0a0a815 	stw	r2,-32096(gp)

   LOCK_NET_RESOURCE(NET_RESID);
 803255c:	0009883a 	mov	r4,zero
 8032560:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
 8032564:	d0e0a317 	ldw	r3,-32116(gp)
 8032568:	d0a0a717 	ldw	r2,-32100(gp)
 803256c:	18800436 	bltu	r3,r2,8032580 <tcp_tick+0x48>
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
 8032570:	803c8dc0 	call	803c8dc <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
 8032574:	d0a0a317 	ldw	r2,-32116(gp)
 8032578:	10800c84 	addi	r2,r2,50
 803257c:	d0a0a715 	stw	r2,-32100(gp)

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
 8032580:	0009883a 	mov	r4,zero
 8032584:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   in_tcptick--;
 8032588:	d0a0a817 	ldw	r2,-32096(gp)
 803258c:	10bfffc4 	addi	r2,r2,-1
 8032590:	d0a0a815 	stw	r2,-32096(gp)
 8032594:	00000106 	br	803259c <tcp_tick+0x64>
      return;
 8032598:	0001883a 	nop
}
 803259c:	e037883a 	mov	sp,fp
 80325a0:	dfc00117 	ldw	ra,4(sp)
 80325a4:	df000017 	ldw	fp,0(sp)
 80325a8:	dec00204 	addi	sp,sp,8
 80325ac:	f800283a 	ret

080325b0 <rawip_lookup>:
 *          or NULL if no matching raw IP endpoint is found.
 */

struct ipraw_ep *
rawip_lookup(struct socket * so)
{
 80325b0:	defffd04 	addi	sp,sp,-12
 80325b4:	df000215 	stw	fp,8(sp)
 80325b8:	df000204 	addi	fp,sp,8
 80325bc:	e13ffe15 	stw	r4,-8(fp)
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 80325c0:	d0a0ca17 	ldw	r2,-31960(gp)
 80325c4:	e0bfff15 	stw	r2,-4(fp)
 80325c8:	00000906 	br	80325f0 <rawip_lookup+0x40>
      if (tmp->ipr_data == (void*)so)
 80325cc:	e0bfff17 	ldw	r2,-4(fp)
 80325d0:	10800417 	ldw	r2,16(r2)
 80325d4:	e0fffe17 	ldw	r3,-8(fp)
 80325d8:	1880021e 	bne	r3,r2,80325e4 <rawip_lookup+0x34>
      return (tmp);
 80325dc:	e0bfff17 	ldw	r2,-4(fp)
 80325e0:	00000606 	br	80325fc <rawip_lookup+0x4c>
   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 80325e4:	e0bfff17 	ldw	r2,-4(fp)
 80325e8:	10800017 	ldw	r2,0(r2)
 80325ec:	e0bfff15 	stw	r2,-4(fp)
 80325f0:	e0bfff17 	ldw	r2,-4(fp)
 80325f4:	103ff51e 	bne	r2,zero,80325cc <rawip_lookup+0x1c>

   return NULL;   /* didn't find it */
 80325f8:	0005883a 	mov	r2,zero
}
 80325fc:	e037883a 	mov	sp,fp
 8032600:	df000017 	ldw	fp,0(sp)
 8032604:	dec00104 	addi	sp,sp,4
 8032608:	f800283a 	ret

0803260c <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
 803260c:	defff504 	addi	sp,sp,-44
 8032610:	dfc00a15 	stw	ra,40(sp)
 8032614:	df000915 	stw	fp,36(sp)
 8032618:	df000904 	addi	fp,sp,36
 803261c:	e13ff815 	stw	r4,-32(fp)
 8032620:	e17ff715 	stw	r5,-36(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 8032624:	e0bff717 	ldw	r2,-36(fp)
 8032628:	e0bfff15 	stw	r2,-4(fp)
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
 803262c:	0009883a 	mov	r4,zero
 8032630:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 8032634:	e0bfff17 	ldw	r2,-4(fp)
 8032638:	10c00a17 	ldw	r3,40(r2)
 803263c:	e0bff817 	ldw	r2,-32(fp)
 8032640:	10800417 	ldw	r2,16(r2)
 8032644:	1887883a 	add	r3,r3,r2
 8032648:	e0bfff17 	ldw	r2,-4(fp)
 803264c:	10800b17 	ldw	r2,44(r2)
 8032650:	18800436 	bltu	r3,r2,8032664 <rawip_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 8032654:	0009883a 	mov	r4,zero
 8032658:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 803265c:	00801a44 	movi	r2,105
 8032660:	00005606 	br	80327bc <rawip_soinput+0x1b0>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 8032664:	000b883a 	mov	r5,zero
 8032668:	01000044 	movi	r4,1
 803266c:	8030f540 	call	8030f54 <m_getnbuf>
 8032670:	e0bffe15 	stw	r2,-8(fp)
   if (!m_in)
 8032674:	e0bffe17 	ldw	r2,-8(fp)
 8032678:	1000041e 	bne	r2,zero,803268c <rawip_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 803267c:	0009883a 	mov	r4,zero
 8032680:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 8032684:	00801a44 	movi	r2,105
 8032688:	00004c06 	br	80327bc <rawip_soinput+0x1b0>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
 803268c:	e0bffe17 	ldw	r2,-8(fp)
 8032690:	e0fff817 	ldw	r3,-32(fp)
 8032694:	10c00115 	stw	r3,4(r2)
   m_in->m_base = pkt->nb_buff;
 8032698:	e0bff817 	ldw	r2,-32(fp)
 803269c:	10c00117 	ldw	r3,4(r2)
 80326a0:	e0bffe17 	ldw	r2,-8(fp)
 80326a4:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 80326a8:	e0bff817 	ldw	r2,-32(fp)
 80326ac:	10c00217 	ldw	r3,8(r2)
 80326b0:	e0bffe17 	ldw	r2,-8(fp)
 80326b4:	10c00515 	stw	r3,20(r2)
   m_in->m_data = pkt->nb_prot;
 80326b8:	e0bff817 	ldw	r2,-32(fp)
 80326bc:	10c00317 	ldw	r3,12(r2)
 80326c0:	e0bffe17 	ldw	r2,-8(fp)
 80326c4:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 80326c8:	e0bff817 	ldw	r2,-32(fp)
 80326cc:	10c00417 	ldw	r3,16(r2)
 80326d0:	e0bffe17 	ldw	r2,-8(fp)
 80326d4:	10c00215 	stw	r3,8(r2)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 80326d8:	e0bfff17 	ldw	r2,-4(fp)
 80326dc:	10800417 	ldw	r2,16(r2)
 80326e0:	1088000c 	andi	r2,r2,8192
 80326e4:	1000131e 	bne	r2,zero,8032734 <rawip_soinput+0x128>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
 80326e8:	e0bff817 	ldw	r2,-32(fp)
 80326ec:	10800317 	ldw	r2,12(r2)
 80326f0:	10800003 	ldbu	r2,0(r2)
 80326f4:	10803fcc 	andi	r2,r2,255
 80326f8:	100490ba 	slli	r2,r2,2
      unsigned int ihl = 
 80326fc:	10800f0c 	andi	r2,r2,60
 8032700:	e0bffd15 	stw	r2,-12(fp)
      m_in->m_data += ihl;
 8032704:	e0bffe17 	ldw	r2,-8(fp)
 8032708:	10c00317 	ldw	r3,12(r2)
 803270c:	e0bffd17 	ldw	r2,-12(fp)
 8032710:	1887883a 	add	r3,r3,r2
 8032714:	e0bffe17 	ldw	r2,-8(fp)
 8032718:	10c00315 	stw	r3,12(r2)
      m_in->m_len -= ihl;
 803271c:	e0bffe17 	ldw	r2,-8(fp)
 8032720:	10c00217 	ldw	r3,8(r2)
 8032724:	e0bffd17 	ldw	r2,-12(fp)
 8032728:	1887c83a 	sub	r3,r3,r2
 803272c:	e0bffe17 	ldw	r2,-8(fp)
 8032730:	10c00215 	stw	r3,8(r2)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 8032734:	e0bff817 	ldw	r2,-32(fp)
 8032738:	10800717 	ldw	r2,28(r2)
 803273c:	e0bffa15 	stw	r2,-24(fp)
   sin.sin_port = 0;
 8032740:	e03ff98d 	sth	zero,-26(fp)
   sin.sin_family = AF_INET;
 8032744:	00800084 	movi	r2,2
 8032748:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 803274c:	e0bfff17 	ldw	r2,-4(fp)
 8032750:	10800a04 	addi	r2,r2,40
 8032754:	e0fff904 	addi	r3,fp,-28
 8032758:	e1bffe17 	ldw	r6,-8(fp)
 803275c:	180b883a 	mov	r5,r3
 8032760:	1009883a 	mov	r4,r2
 8032764:	803722c0 	call	803722c <sbappendaddr>
 8032768:	1000081e 	bne	r2,zero,803278c <rawip_soinput+0x180>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
 803276c:	e0bffe17 	ldw	r2,-8(fp)
 8032770:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 8032774:	e13ffe17 	ldw	r4,-8(fp)
 8032778:	80310dc0 	call	80310dc <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 803277c:	0009883a 	mov	r4,zero
 8032780:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 8032784:	00801a44 	movi	r2,105
 8032788:	00000c06 	br	80327bc <rawip_soinput+0x1b0>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 803278c:	e0bfff17 	ldw	r2,-4(fp)
 8032790:	10800a04 	addi	r2,r2,40
 8032794:	1009883a 	mov	r4,r2
 8032798:	802c7b80 	call	802c7b8 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 803279c:	e0bfff17 	ldw	r2,-4(fp)
 80327a0:	10800a04 	addi	r2,r2,40
 80327a4:	100b883a 	mov	r5,r2
 80327a8:	e13fff17 	ldw	r4,-4(fp)
 80327ac:	8036f040 	call	8036f04 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 80327b0:	0009883a 	mov	r4,zero
 80327b4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return 0;
 80327b8:	0005883a 	mov	r2,zero
}
 80327bc:	e037883a 	mov	sp,fp
 80327c0:	dfc00117 	ldw	ra,4(sp)
 80327c4:	df000017 	ldw	fp,0(sp)
 80327c8:	dec00204 	addi	sp,sp,8
 80327cc:	f800283a 	ret

080327d0 <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 80327d0:	deffef04 	addi	sp,sp,-68
 80327d4:	dfc01015 	stw	ra,64(sp)
 80327d8:	df000f15 	stw	fp,60(sp)
 80327dc:	dc000e15 	stw	r16,56(sp)
 80327e0:	df000f04 	addi	fp,sp,60
 80327e4:	e13ff415 	stw	r4,-48(fp)
 80327e8:	e17ff315 	stw	r5,-52(fp)
 80327ec:	e1bff215 	stw	r6,-56(fp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
 80327f0:	e0bff417 	ldw	r2,-48(fp)
 80327f4:	10800717 	ldw	r2,28(r2)
 80327f8:	e0bffa15 	stw	r2,-24(fp)
 80327fc:	e0bffa17 	ldw	r2,-24(fp)
 8032800:	10800468 	cmpgeui	r2,r2,17
 8032804:	1001b91e 	bne	r2,zero,8032eec <rawip_usrreq+0x71c>
 8032808:	e0bffa17 	ldw	r2,-24(fp)
 803280c:	100690ba 	slli	r3,r2,2
 8032810:	008200f4 	movhi	r2,2051
 8032814:	1885883a 	add	r2,r3,r2
 8032818:	108a0817 	ldw	r2,10272(r2)
 803281c:	1000683a 	jmp	r2
 8032820:	08032864 	muli	zero,at,3233
 8032824:	080328ec 	andhi	zero,at,3235
 8032828:	08032928 	cmpgeui	zero,at,3236
 803282c:	08032eec 	andhi	zero,at,3259
 8032830:	08032928 	cmpgeui	zero,at,3236
 8032834:	08032eec 	andhi	zero,at,3259
 8032838:	08032ee0 	cmpeqi	zero,at,3259
 803283c:	08032eec 	andhi	zero,at,3259
 8032840:	08032ee0 	cmpeqi	zero,at,3259
 8032844:	08032ab0 	cmpltui	zero,at,3242
 8032848:	08032eec 	andhi	zero,at,3259
 803284c:	08032eec 	andhi	zero,at,3259
 8032850:	08032eec 	andhi	zero,at,3259
 8032854:	08032eec 	andhi	zero,at,3259
 8032858:	08032eec 	andhi	zero,at,3259
 803285c:	08032e4c 	andi	zero,at,3257
 8032860:	08032e4c 	andi	zero,at,3257
   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 8032864:	e0bff417 	ldw	r2,-48(fp)
 8032868:	10800417 	ldw	r2,16(r2)
 803286c:	1088000c 	andi	r2,r2,8192
 8032870:	1009883a 	mov	r4,r2
 8032874:	8046d740 	call	8046d74 <ip_raw_maxalloc>
 8032878:	1007883a 	mov	r3,r2
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
 803287c:	e0bff417 	ldw	r2,-48(fp)
 8032880:	10c01315 	stw	r3,76(r2)
 8032884:	e0bff417 	ldw	r2,-48(fp)
 8032888:	10c01317 	ldw	r3,76(r2)
 803288c:	e0bff417 	ldw	r2,-48(fp)
 8032890:	10c00b15 	stw	r3,44(r2)
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
 8032894:	e0bff217 	ldw	r2,-56(fp)
 8032898:	e0bff5c5 	stb	r2,-41(fp)
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 803289c:	0009883a 	mov	r4,zero
 80328a0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
 80328a4:	e0fff5c3 	ldbu	r3,-41(fp)
 80328a8:	e0bff417 	ldw	r2,-48(fp)
 80328ac:	d8800015 	stw	r2,0(sp)
 80328b0:	01c200f4 	movhi	r7,2051
 80328b4:	39c98304 	addi	r7,r7,9740
 80328b8:	000d883a 	mov	r6,zero
 80328bc:	000b883a 	mov	r5,zero
 80328c0:	1809883a 	mov	r4,r3
 80328c4:	80468d00 	call	80468d0 <ip_raw_open>
 80328c8:	e0bff815 	stw	r2,-32(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 80328cc:	0009883a 	mov	r4,zero
 80328d0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      if (!ep)
 80328d4:	e0bff817 	ldw	r2,-32(fp)
 80328d8:	1000021e 	bne	r2,zero,80328e4 <rawip_usrreq+0x114>
         return(EINVAL);
 80328dc:	00800584 	movi	r2,22
 80328e0:	00018306 	br	8032ef0 <rawip_usrreq+0x720>
      return 0;
 80328e4:	0005883a 	mov	r2,zero
 80328e8:	00018106 	br	8032ef0 <rawip_usrreq+0x720>
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
 80328ec:	e13ff417 	ldw	r4,-48(fp)
 80328f0:	80325b00 	call	80325b0 <rawip_lookup>
 80328f4:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 80328f8:	e0bff817 	ldw	r2,-32(fp)
 80328fc:	1000021e 	bne	r2,zero,8032908 <rawip_usrreq+0x138>
         return(EINVAL);
 8032900:	00800584 	movi	r2,22
 8032904:	00017a06 	br	8032ef0 <rawip_usrreq+0x720>
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8032908:	0009883a 	mov	r4,zero
 803290c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
 8032910:	e13ff817 	ldw	r4,-32(fp)
 8032914:	80469a80 	call	80469a8 <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
 8032918:	0009883a 	mov	r4,zero
 803291c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      return 0;
 8032920:	0005883a 	mov	r2,zero
 8032924:	00017206 	br	8032ef0 <rawip_usrreq+0x720>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 8032928:	e0bff217 	ldw	r2,-56(fp)
 803292c:	1000021e 	bne	r2,zero,8032938 <rawip_usrreq+0x168>
         return(EINVAL);
 8032930:	00800584 	movi	r2,22
 8032934:	00016e06 	br	8032ef0 <rawip_usrreq+0x720>
      sin = mtod(nam, struct sockaddr_in *);
 8032938:	e0bff217 	ldw	r2,-56(fp)
 803293c:	10800317 	ldw	r2,12(r2)
 8032940:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 8032944:	e0bff917 	ldw	r2,-28(fp)
 8032948:	1000021e 	bne	r2,zero,8032954 <rawip_usrreq+0x184>
         return(EINVAL);
 803294c:	00800584 	movi	r2,22
 8032950:	00016706 	br	8032ef0 <rawip_usrreq+0x720>
      if (nam->m_len != sizeof (*sin))
 8032954:	e0bff217 	ldw	r2,-56(fp)
 8032958:	10800217 	ldw	r2,8(r2)
 803295c:	10800420 	cmpeqi	r2,r2,16
 8032960:	1000021e 	bne	r2,zero,803296c <rawip_usrreq+0x19c>
         return(EINVAL);
 8032964:	00800584 	movi	r2,22
 8032968:	00016106 	br	8032ef0 <rawip_usrreq+0x720>
      ep = rawip_lookup(so);
 803296c:	e13ff417 	ldw	r4,-48(fp)
 8032970:	80325b00 	call	80325b0 <rawip_lookup>
 8032974:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 8032978:	e0bff817 	ldw	r2,-32(fp)
 803297c:	1000021e 	bne	r2,zero,8032988 <rawip_usrreq+0x1b8>
         return(EINVAL);
 8032980:	00800584 	movi	r2,22
 8032984:	00015a06 	br	8032ef0 <rawip_usrreq+0x720>
      if (req == PRU_BIND)
 8032988:	e0bffa17 	ldw	r2,-24(fp)
 803298c:	10800098 	cmpnei	r2,r2,2
 8032990:	10001f1e 	bne	r2,zero,8032a10 <rawip_usrreq+0x240>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 8032994:	e0bff917 	ldw	r2,-28(fp)
 8032998:	10800117 	ldw	r2,4(r2)
 803299c:	1000021e 	bne	r2,zero,80329a8 <rawip_usrreq+0x1d8>
         {
            lhost = 0L;
 80329a0:	e03ffc15 	stw	zero,-16(fp)
 80329a4:	00001606 	br	8032a00 <rawip_usrreq+0x230>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
 80329a8:	e0bff917 	ldw	r2,-28(fp)
 80329ac:	10800117 	ldw	r2,4(r2)
 80329b0:	e0bffc15 	stw	r2,-16(fp)
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 80329b4:	008201b4 	movhi	r2,2054
 80329b8:	10800f17 	ldw	r2,60(r2)
 80329bc:	e0bffb15 	stw	r2,-20(fp)
 80329c0:	00000706 	br	80329e0 <rawip_usrreq+0x210>
               if (ifp->n_ipaddr == lhost)
 80329c4:	e0bffb17 	ldw	r2,-20(fp)
 80329c8:	10800a17 	ldw	r2,40(r2)
 80329cc:	e0fffc17 	ldw	r3,-16(fp)
 80329d0:	18800626 	beq	r3,r2,80329ec <rawip_usrreq+0x21c>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 80329d4:	e0bffb17 	ldw	r2,-20(fp)
 80329d8:	10800017 	ldw	r2,0(r2)
 80329dc:	e0bffb15 	stw	r2,-20(fp)
 80329e0:	e0bffb17 	ldw	r2,-20(fp)
 80329e4:	103ff71e 	bne	r2,zero,80329c4 <rawip_usrreq+0x1f4>
 80329e8:	00000106 	br	80329f0 <rawip_usrreq+0x220>
                  break;
 80329ec:	0001883a 	nop
            if (ifp == NULL)
 80329f0:	e0bffb17 	ldw	r2,-20(fp)
 80329f4:	1000021e 	bne	r2,zero,8032a00 <rawip_usrreq+0x230>
               return(EADDRNOTAVAIL);
 80329f8:	00801f44 	movi	r2,125
 80329fc:	00013c06 	br	8032ef0 <rawip_usrreq+0x720>
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
 8032a00:	e0bff817 	ldw	r2,-32(fp)
 8032a04:	e0fffc17 	ldw	r3,-16(fp)
 8032a08:	10c00115 	stw	r3,4(r2)
 8032a0c:	00002606 	br	8032aa8 <rawip_usrreq+0x2d8>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 8032a10:	e0bff917 	ldw	r2,-28(fp)
 8032a14:	10800117 	ldw	r2,4(r2)
 8032a18:	1000021e 	bne	r2,zero,8032a24 <rawip_usrreq+0x254>
            fhost = 0L;
 8032a1c:	e03ffd15 	stw	zero,-12(fp)
 8032a20:	00000306 	br	8032a30 <rawip_usrreq+0x260>
         else
            fhost = sin->sin_addr.s_addr;
 8032a24:	e0bff917 	ldw	r2,-28(fp)
 8032a28:	10800117 	ldw	r2,4(r2)
 8032a2c:	e0bffd15 	stw	r2,-12(fp)
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
 8032a30:	e0bff817 	ldw	r2,-32(fp)
 8032a34:	e0fffd17 	ldw	r3,-12(fp)
 8032a38:	10c00215 	stw	r3,8(r2)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
 8032a3c:	e0bffd17 	ldw	r2,-12(fp)
 8032a40:	10000e26 	beq	r2,zero,8032a7c <rawip_usrreq+0x2ac>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 8032a44:	e0bff417 	ldw	r2,-48(fp)
 8032a48:	10c0088b 	ldhu	r3,34(r2)
 8032a4c:	00bffcc4 	movi	r2,-13
 8032a50:	1884703a 	and	r2,r3,r2
 8032a54:	1007883a 	mov	r3,r2
 8032a58:	e0bff417 	ldw	r2,-48(fp)
 8032a5c:	10c0088d 	sth	r3,34(r2)
            so->so_state |= SS_ISCONNECTED;
 8032a60:	e0bff417 	ldw	r2,-48(fp)
 8032a64:	1080088b 	ldhu	r2,34(r2)
 8032a68:	10800094 	ori	r2,r2,2
 8032a6c:	1007883a 	mov	r3,r2
 8032a70:	e0bff417 	ldw	r2,-48(fp)
 8032a74:	10c0088d 	sth	r3,34(r2)
 8032a78:	00000706 	br	8032a98 <rawip_usrreq+0x2c8>
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
 8032a7c:	e0bff417 	ldw	r2,-48(fp)
 8032a80:	10c0088b 	ldhu	r3,34(r2)
 8032a84:	00bfff44 	movi	r2,-3
 8032a88:	1884703a 	and	r2,r3,r2
 8032a8c:	1007883a 	mov	r3,r2
 8032a90:	e0bff417 	ldw	r2,-48(fp)
 8032a94:	10c0088d 	sth	r3,34(r2)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 8032a98:	e0bff417 	ldw	r2,-48(fp)
 8032a9c:	10800a04 	addi	r2,r2,40
 8032aa0:	1009883a 	mov	r4,r2
 8032aa4:	80375e80 	call	80375e8 <sbflush>
      }
      return 0;
 8032aa8:	0005883a 	mov	r2,zero
 8032aac:	00011006 	br	8032ef0 <rawip_usrreq+0x720>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 8032ab0:	e0bff317 	ldw	r2,-52(fp)
 8032ab4:	1000021e 	bne	r2,zero,8032ac0 <rawip_usrreq+0x2f0>
         return(EINVAL);
 8032ab8:	00800584 	movi	r2,22
 8032abc:	00010c06 	br	8032ef0 <rawip_usrreq+0x720>

      ep = rawip_lookup(so);
 8032ac0:	e13ff417 	ldw	r4,-48(fp)
 8032ac4:	80325b00 	call	80325b0 <rawip_lookup>
 8032ac8:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 8032acc:	e0bff817 	ldw	r2,-32(fp)
 8032ad0:	1000041e 	bne	r2,zero,8032ae4 <rawip_usrreq+0x314>
      {
         m_free(m);
 8032ad4:	e13ff317 	ldw	r4,-52(fp)
 8032ad8:	80310dc0 	call	80310dc <m_free>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
 8032adc:	00801bc4 	movi	r2,111
 8032ae0:	00010306 	br	8032ef0 <rawip_usrreq+0x720>
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
 8032ae4:	e0bff217 	ldw	r2,-56(fp)
 8032ae8:	10000b1e 	bne	r2,zero,8032b18 <rawip_usrreq+0x348>
      {
         if (!(so->so_state & SS_ISCONNECTED))
 8032aec:	e0bff417 	ldw	r2,-48(fp)
 8032af0:	1080088b 	ldhu	r2,34(r2)
 8032af4:	10bfffcc 	andi	r2,r2,65535
 8032af8:	1080008c 	andi	r2,r2,2
 8032afc:	1000021e 	bne	r2,zero,8032b08 <rawip_usrreq+0x338>
            return (ENOTCONN);
 8032b00:	00802004 	movi	r2,128
 8032b04:	0000fa06 	br	8032ef0 <rawip_usrreq+0x720>
         fhost = ep->ipr_faddr;
 8032b08:	e0bff817 	ldw	r2,-32(fp)
 8032b0c:	10800217 	ldw	r2,8(r2)
 8032b10:	e0bffd15 	stw	r2,-12(fp)
 8032b14:	00001406 	br	8032b68 <rawip_usrreq+0x398>
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
 8032b18:	e0bff417 	ldw	r2,-48(fp)
 8032b1c:	1080088b 	ldhu	r2,34(r2)
 8032b20:	10bfffcc 	andi	r2,r2,65535
 8032b24:	1080008c 	andi	r2,r2,2
 8032b28:	10000226 	beq	r2,zero,8032b34 <rawip_usrreq+0x364>
            return (EISCONN);
 8032b2c:	00801fc4 	movi	r2,127
 8032b30:	0000ef06 	br	8032ef0 <rawip_usrreq+0x720>
         if (nam->m_len != sizeof (*sin))
 8032b34:	e0bff217 	ldw	r2,-56(fp)
 8032b38:	10800217 	ldw	r2,8(r2)
 8032b3c:	10800420 	cmpeqi	r2,r2,16
 8032b40:	1000031e 	bne	r2,zero,8032b50 <rawip_usrreq+0x380>
         {
            dtrap();
 8032b44:	80301a80 	call	80301a8 <dtrap>
            return (EINVAL);
 8032b48:	00800584 	movi	r2,22
 8032b4c:	0000e806 	br	8032ef0 <rawip_usrreq+0x720>
         }
         sin = mtod(nam, struct sockaddr_in *);
 8032b50:	e0bff217 	ldw	r2,-56(fp)
 8032b54:	10800317 	ldw	r2,12(r2)
 8032b58:	e0bff915 	stw	r2,-28(fp)
         fhost = sin->sin_addr.s_addr;
 8032b5c:	e0bff917 	ldw	r2,-28(fp)
 8032b60:	10800117 	ldw	r2,4(r2)
 8032b64:	e0bffd15 	stw	r2,-12(fp)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
 8032b68:	e0bff317 	ldw	r2,-52(fp)
 8032b6c:	14000217 	ldw	r16,8(r2)
 8032b70:	e0bff417 	ldw	r2,-48(fp)
 8032b74:	10800417 	ldw	r2,16(r2)
 8032b78:	1088000c 	andi	r2,r2,8192
 8032b7c:	1009883a 	mov	r4,r2
 8032b80:	8046d740 	call	8046d74 <ip_raw_maxalloc>
 8032b84:	1400032e 	bgeu	r2,r16,8032b94 <rawip_usrreq+0x3c4>
      {
         dtrap(); /* should never happen */
 8032b88:	80301a80 	call	80301a8 <dtrap>
         return EMSGSIZE;  /* try to recover */
 8032b8c:	00801e84 	movi	r2,122
 8032b90:	0000d706 	br	8032ef0 <rawip_usrreq+0x720>
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
 8032b94:	e0bff317 	ldw	r2,-52(fp)
 8032b98:	10800217 	ldw	r2,8(r2)
 8032b9c:	1007883a 	mov	r3,r2
 8032ba0:	e0bff417 	ldw	r2,-48(fp)
 8032ba4:	10800417 	ldw	r2,16(r2)
 8032ba8:	1088000c 	andi	r2,r2,8192
 8032bac:	100b883a 	mov	r5,r2
 8032bb0:	1809883a 	mov	r4,r3
 8032bb4:	8046c780 	call	8046c78 <ip_raw_alloc>
 8032bb8:	e0bff715 	stw	r2,-36(fp)
      if (!pkt)
 8032bbc:	e0bff717 	ldw	r2,-36(fp)
 8032bc0:	1000041e 	bne	r2,zero,8032bd4 <rawip_usrreq+0x404>
      {
         m_free(m);
 8032bc4:	e13ff317 	ldw	r4,-52(fp)
 8032bc8:	80310dc0 	call	80310dc <m_free>
         return ENOBUFS;   /* report buffer shortages */
 8032bcc:	00801a44 	movi	r2,105
 8032bd0:	0000c706 	br	8032ef0 <rawip_usrreq+0x720>
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 8032bd4:	e0bff717 	ldw	r2,-36(fp)
 8032bd8:	10c00317 	ldw	r3,12(r2)
 8032bdc:	e0bff317 	ldw	r2,-52(fp)
 8032be0:	11000317 	ldw	r4,12(r2)
 8032be4:	e0bff317 	ldw	r2,-52(fp)
 8032be8:	10800217 	ldw	r2,8(r2)
 8032bec:	100d883a 	mov	r6,r2
 8032bf0:	200b883a 	mov	r5,r4
 8032bf4:	1809883a 	mov	r4,r3
 8032bf8:	80037cc0 	call	80037cc <memcpy>
      pkt->nb_plen = m->m_len;
 8032bfc:	e0bff317 	ldw	r2,-52(fp)
 8032c00:	10c00217 	ldw	r3,8(r2)
 8032c04:	e0bff717 	ldw	r2,-36(fp)
 8032c08:	10c00415 	stw	r3,16(r2)
      /* finished with mbuf, free it now */
      m_free(m);
 8032c0c:	e13ff317 	ldw	r4,-52(fp)
 8032c10:	80310dc0 	call	80310dc <m_free>
      pkt->fhost = fhost;
 8032c14:	e0bff717 	ldw	r2,-36(fp)
 8032c18:	e0fffd17 	ldw	r3,-12(fp)
 8032c1c:	10c00715 	stw	r3,28(r2)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
 8032c20:	e0bffd17 	ldw	r2,-12(fp)
 8032c24:	10bfffd8 	cmpnei	r2,r2,-1
 8032c28:	1000471e 	bne	r2,zero,8032d48 <rawip_usrreq+0x578>
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
 8032c2c:	e0bff817 	ldw	r2,-32(fp)
 8032c30:	10800117 	ldw	r2,4(r2)
 8032c34:	10000f26 	beq	r2,zero,8032c74 <rawip_usrreq+0x4a4>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032c38:	008201b4 	movhi	r2,2054
 8032c3c:	10800f17 	ldw	r2,60(r2)
 8032c40:	e0bffb15 	stw	r2,-20(fp)
 8032c44:	00000806 	br	8032c68 <rawip_usrreq+0x498>
               if (ifp->n_ipaddr == ep->ipr_laddr)
 8032c48:	e0bffb17 	ldw	r2,-20(fp)
 8032c4c:	10c00a17 	ldw	r3,40(r2)
 8032c50:	e0bff817 	ldw	r2,-32(fp)
 8032c54:	10800117 	ldw	r2,4(r2)
 8032c58:	18801c26 	beq	r3,r2,8032ccc <rawip_usrreq+0x4fc>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032c5c:	e0bffb17 	ldw	r2,-20(fp)
 8032c60:	10800017 	ldw	r2,0(r2)
 8032c64:	e0bffb15 	stw	r2,-20(fp)
 8032c68:	e0bffb17 	ldw	r2,-20(fp)
 8032c6c:	103ff61e 	bne	r2,zero,8032c48 <rawip_usrreq+0x478>
 8032c70:	00001906 	br	8032cd8 <rawip_usrreq+0x508>
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032c74:	008201b4 	movhi	r2,2054
 8032c78:	10800f17 	ldw	r2,60(r2)
 8032c7c:	e0bffb15 	stw	r2,-20(fp)
 8032c80:	00000f06 	br	8032cc0 <rawip_usrreq+0x4f0>
               if ((ifp->n_flags & NF_BCAST) &&
 8032c84:	e0bffb17 	ldw	r2,-20(fp)
 8032c88:	10802a17 	ldw	r2,168(r2)
 8032c8c:	1080004c 	andi	r2,r2,1
 8032c90:	10000826 	beq	r2,zero,8032cb4 <rawip_usrreq+0x4e4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 8032c94:	e0bffb17 	ldw	r2,-20(fp)
 8032c98:	10802717 	ldw	r2,156(r2)
               if ((ifp->n_flags & NF_BCAST) &&
 8032c9c:	10000526 	beq	r2,zero,8032cb4 <rawip_usrreq+0x4e4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 8032ca0:	e0bffb17 	ldw	r2,-20(fp)
 8032ca4:	10802717 	ldw	r2,156(r2)
 8032ca8:	10800617 	ldw	r2,24(r2)
 8032cac:	10800058 	cmpnei	r2,r2,1
 8032cb0:	10000826 	beq	r2,zero,8032cd4 <rawip_usrreq+0x504>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032cb4:	e0bffb17 	ldw	r2,-20(fp)
 8032cb8:	10800017 	ldw	r2,0(r2)
 8032cbc:	e0bffb15 	stw	r2,-20(fp)
 8032cc0:	e0bffb17 	ldw	r2,-20(fp)
 8032cc4:	103fef1e 	bne	r2,zero,8032c84 <rawip_usrreq+0x4b4>
 8032cc8:	00000306 	br	8032cd8 <rawip_usrreq+0x508>
                  break;
 8032ccc:	0001883a 	nop
 8032cd0:	00000106 	br	8032cd8 <rawip_usrreq+0x508>
                  break;
 8032cd4:	0001883a 	nop
         }
         if (ifp == NULL)
 8032cd8:	e0bffb17 	ldw	r2,-20(fp)
 8032cdc:	1000171e 	bne	r2,zero,8032d3c <rawip_usrreq+0x56c>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032ce0:	008201b4 	movhi	r2,2054
 8032ce4:	10800f17 	ldw	r2,60(r2)
 8032ce8:	e0bffb15 	stw	r2,-20(fp)
 8032cec:	00000b06 	br	8032d1c <rawip_usrreq+0x54c>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 8032cf0:	e0bffb17 	ldw	r2,-20(fp)
 8032cf4:	10802717 	ldw	r2,156(r2)
 8032cf8:	10000526 	beq	r2,zero,8032d10 <rawip_usrreq+0x540>
 8032cfc:	e0bffb17 	ldw	r2,-20(fp)
 8032d00:	10802717 	ldw	r2,156(r2)
 8032d04:	10800617 	ldw	r2,24(r2)
 8032d08:	10800058 	cmpnei	r2,r2,1
 8032d0c:	10000626 	beq	r2,zero,8032d28 <rawip_usrreq+0x558>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8032d10:	e0bffb17 	ldw	r2,-20(fp)
 8032d14:	10800017 	ldw	r2,0(r2)
 8032d18:	e0bffb15 	stw	r2,-20(fp)
 8032d1c:	e0bffb17 	ldw	r2,-20(fp)
 8032d20:	103ff31e 	bne	r2,zero,8032cf0 <rawip_usrreq+0x520>
 8032d24:	00000106 	br	8032d2c <rawip_usrreq+0x55c>
                  break;
 8032d28:	0001883a 	nop
            if (ifp == NULL)
 8032d2c:	e0bffb17 	ldw	r2,-20(fp)
 8032d30:	1000021e 	bne	r2,zero,8032d3c <rawip_usrreq+0x56c>
               return(EADDRNOTAVAIL);
 8032d34:	00801f44 	movi	r2,125
 8032d38:	00006d06 	br	8032ef0 <rawip_usrreq+0x720>
         }
         pkt->net = ifp;
 8032d3c:	e0bff717 	ldw	r2,-36(fp)
 8032d40:	e0fffb17 	ldw	r3,-20(fp)
 8032d44:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
 8032d48:	e0bff417 	ldw	r2,-48(fp)
 8032d4c:	10800317 	ldw	r2,12(r2)
 8032d50:	10000426 	beq	r2,zero,8032d64 <rawip_usrreq+0x594>
         pkt->imo = so->inp_moptions;
 8032d54:	e0bff417 	ldw	r2,-48(fp)
 8032d58:	10c00317 	ldw	r3,12(r2)
 8032d5c:	e0bff717 	ldw	r2,-36(fp)
 8032d60:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
 8032d64:	e0bff417 	ldw	r2,-48(fp)
 8032d68:	10800417 	ldw	r2,16(r2)
 8032d6c:	1088000c 	andi	r2,r2,8192
 8032d70:	10000826 	beq	r2,zero,8032d94 <rawip_usrreq+0x5c4>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 8032d74:	0009883a 	mov	r4,zero
 8032d78:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
 8032d7c:	e13ff717 	ldw	r4,-36(fp)
 8032d80:	8042cb40 	call	8042cb4 <ip_raw_write>
 8032d84:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 8032d88:	0009883a 	mov	r4,zero
 8032d8c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
 8032d90:	00002806 	br	8032e34 <rawip_usrreq+0x664>
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
 8032d94:	e0bff717 	ldw	r2,-36(fp)
 8032d98:	10800317 	ldw	r2,12(r2)
 8032d9c:	10bffb04 	addi	r2,r2,-20
 8032da0:	e0bff615 	stw	r2,-40(fp)
         if (ep->ipr_laddr)
 8032da4:	e0bff817 	ldw	r2,-32(fp)
 8032da8:	10800117 	ldw	r2,4(r2)
 8032dac:	10000526 	beq	r2,zero,8032dc4 <rawip_usrreq+0x5f4>
            pip->ip_src = ep->ipr_laddr;
 8032db0:	e0bff817 	ldw	r2,-32(fp)
 8032db4:	10c00117 	ldw	r3,4(r2)
 8032db8:	e0bff617 	ldw	r2,-40(fp)
 8032dbc:	10c00315 	stw	r3,12(r2)
 8032dc0:	00000e06 	br	8032dfc <rawip_usrreq+0x62c>
         else
         {
            if (fhost == 0xffffffff)
 8032dc4:	e0bffd17 	ldw	r2,-12(fp)
 8032dc8:	10bfffd8 	cmpnei	r2,r2,-1
 8032dcc:	1000061e 	bne	r2,zero,8032de8 <rawip_usrreq+0x618>
               pip->ip_src = pkt->net->n_ipaddr;
 8032dd0:	e0bff717 	ldw	r2,-36(fp)
 8032dd4:	10800617 	ldw	r2,24(r2)
 8032dd8:	10c00a17 	ldw	r3,40(r2)
 8032ddc:	e0bff617 	ldw	r2,-40(fp)
 8032de0:	10c00315 	stw	r3,12(r2)
 8032de4:	00000506 	br	8032dfc <rawip_usrreq+0x62c>
            else
               pip->ip_src = ip_mymach(fhost);
 8032de8:	e13ffd17 	ldw	r4,-12(fp)
 8032dec:	804370c0 	call	804370c <ip_mymach>
 8032df0:	1007883a 	mov	r3,r2
 8032df4:	e0bff617 	ldw	r2,-40(fp)
 8032df8:	10c00315 	stw	r3,12(r2)
         }
         pip->ip_dest = fhost;
 8032dfc:	e0bff617 	ldw	r2,-40(fp)
 8032e00:	e0fffd17 	ldw	r3,-12(fp)
 8032e04:	10c00415 	stw	r3,16(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
 8032e08:	0009883a 	mov	r4,zero
 8032e0c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
 8032e10:	e0bff817 	ldw	r2,-32(fp)
 8032e14:	10800503 	ldbu	r2,20(r2)
 8032e18:	10803fcc 	andi	r2,r2,255
 8032e1c:	e17ff717 	ldw	r5,-36(fp)
 8032e20:	1009883a 	mov	r4,r2
 8032e24:	80427300 	call	8042730 <ip_write>
 8032e28:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 8032e2c:	0009883a 	mov	r4,zero
 8032e30:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      }         
      if (e < 0) 
 8032e34:	e0bffe17 	ldw	r2,-8(fp)
 8032e38:	1000020e 	bge	r2,zero,8032e44 <rawip_usrreq+0x674>
         return(e);
 8032e3c:	e0bffe17 	ldw	r2,-8(fp)
 8032e40:	00002b06 	br	8032ef0 <rawip_usrreq+0x720>
      return 0;
 8032e44:	0005883a 	mov	r2,zero
 8032e48:	00002906 	br	8032ef0 <rawip_usrreq+0x720>
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 8032e4c:	e0bff217 	ldw	r2,-56(fp)
 8032e50:	1000021e 	bne	r2,zero,8032e5c <rawip_usrreq+0x68c>
         return(EINVAL);
 8032e54:	00800584 	movi	r2,22
 8032e58:	00002506 	br	8032ef0 <rawip_usrreq+0x720>
      sin = mtod(nam, struct sockaddr_in *);
 8032e5c:	e0bff217 	ldw	r2,-56(fp)
 8032e60:	10800317 	ldw	r2,12(r2)
 8032e64:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 8032e68:	e0bff917 	ldw	r2,-28(fp)
 8032e6c:	1000021e 	bne	r2,zero,8032e78 <rawip_usrreq+0x6a8>
         return(EINVAL);
 8032e70:	00800584 	movi	r2,22
 8032e74:	00001e06 	br	8032ef0 <rawip_usrreq+0x720>
      ep = rawip_lookup(so);
 8032e78:	e13ff417 	ldw	r4,-48(fp)
 8032e7c:	80325b00 	call	80325b0 <rawip_lookup>
 8032e80:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 8032e84:	e0bff817 	ldw	r2,-32(fp)
 8032e88:	1000021e 	bne	r2,zero,8032e94 <rawip_usrreq+0x6c4>
         return(EINVAL);
 8032e8c:	00800584 	movi	r2,22
 8032e90:	00001706 	br	8032ef0 <rawip_usrreq+0x720>
      sin->sin_port = 0;
 8032e94:	e0bff917 	ldw	r2,-28(fp)
 8032e98:	1000008d 	sth	zero,2(r2)
      nam->m_len = sizeof(*sin);
 8032e9c:	e0bff217 	ldw	r2,-56(fp)
 8032ea0:	00c00404 	movi	r3,16
 8032ea4:	10c00215 	stw	r3,8(r2)
      if (req == PRU_SOCKADDR)
 8032ea8:	e0bffa17 	ldw	r2,-24(fp)
 8032eac:	108003d8 	cmpnei	r2,r2,15
 8032eb0:	1000051e 	bne	r2,zero,8032ec8 <rawip_usrreq+0x6f8>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
 8032eb4:	e0bff817 	ldw	r2,-32(fp)
 8032eb8:	10c00117 	ldw	r3,4(r2)
 8032ebc:	e0bff917 	ldw	r2,-28(fp)
 8032ec0:	10c00115 	stw	r3,4(r2)
 8032ec4:	00000406 	br	8032ed8 <rawip_usrreq+0x708>
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
 8032ec8:	e0bff817 	ldw	r2,-32(fp)
 8032ecc:	10c00217 	ldw	r3,8(r2)
 8032ed0:	e0bff917 	ldw	r2,-28(fp)
 8032ed4:	10c00115 	stw	r3,4(r2)
      }
      return 0;
 8032ed8:	0005883a 	mov	r2,zero
 8032edc:	00000406 	br	8032ef0 <rawip_usrreq+0x720>
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 8032ee0:	80301a80 	call	80301a8 <dtrap>
      return 0;
 8032ee4:	0005883a 	mov	r2,zero
 8032ee8:	00000106 	br	8032ef0 <rawip_usrreq+0x720>
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 8032eec:	008017c4 	movi	r2,95
   }
}
 8032ef0:	e6ffff04 	addi	sp,fp,-4
 8032ef4:	dfc00217 	ldw	ra,8(sp)
 8032ef8:	df000117 	ldw	fp,4(sp)
 8032efc:	dc000017 	ldw	r16,0(sp)
 8032f00:	dec00304 	addi	sp,sp,12
 8032f04:	f800283a 	ret

08032f08 <DOMAIN_CHECK>:
 */

#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
 8032f08:	defffc04 	addi	sp,sp,-16
 8032f0c:	dfc00315 	stw	ra,12(sp)
 8032f10:	df000215 	stw	fp,8(sp)
 8032f14:	df000204 	addi	fp,sp,8
 8032f18:	e13fff15 	stw	r4,-4(fp)
 8032f1c:	e17ffe15 	stw	r5,-8(fp)
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
 8032f20:	e0bfff17 	ldw	r2,-4(fp)
 8032f24:	10800517 	ldw	r2,20(r2)
 8032f28:	10800098 	cmpnei	r2,r2,2
 8032f2c:	1000041e 	bne	r2,zero,8032f40 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
 8032f30:	e0bffe17 	ldw	r2,-8(fp)
   if((so->so_domain == AF_INET) &&
 8032f34:	10800428 	cmpgeui	r2,r2,16
 8032f38:	1000011e 	bne	r2,zero,8032f40 <DOMAIN_CHECK+0x38>
   {
      dtrap(); /* programmer passed wrong structure */
 8032f3c:	80301a80 	call	80301a8 <dtrap>
      (size != sizeof(struct sockaddr_in6)))
   {
      dtrap(); /* programmer passed wrong structure */
   }
#endif   /* IP_V6 */
}
 8032f40:	0001883a 	nop
 8032f44:	e037883a 	mov	sp,fp
 8032f48:	dfc00117 	ldw	ra,4(sp)
 8032f4c:	df000017 	ldw	fp,0(sp)
 8032f50:	dec00204 	addi	sp,sp,8
 8032f54:	f800283a 	ret

08032f58 <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
 8032f58:	defffa04 	addi	sp,sp,-24
 8032f5c:	dfc00515 	stw	ra,20(sp)
 8032f60:	df000415 	stw	fp,16(sp)
 8032f64:	df000404 	addi	fp,sp,16
 8032f68:	e13ffe15 	stw	r4,-8(fp)
 8032f6c:	e17ffd15 	stw	r5,-12(fp)
 8032f70:	e1bffc15 	stw	r6,-16(fp)
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
 8032f74:	0009883a 	mov	r4,zero
 8032f78:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
 8032f7c:	e1bffc17 	ldw	r6,-16(fp)
 8032f80:	e17ffd17 	ldw	r5,-12(fp)
 8032f84:	e13ffe17 	ldw	r4,-8(fp)
 8032f88:	80345440 	call	8034544 <socreate>
 8032f8c:	e0bfff15 	stw	r2,-4(fp)
 8032f90:	e0bfff17 	ldw	r2,-4(fp)
 8032f94:	1000041e 	bne	r2,zero,8032fa8 <t_socket+0x50>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8032f98:	0009883a 	mov	r4,zero
 8032f9c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 8032fa0:	00bfffc4 	movi	r2,-1
 8032fa4:	00000706 	br	8032fc4 <t_socket+0x6c>
   }
   SOC_RANGE(so);
   so->so_error = 0;
 8032fa8:	e0bfff17 	ldw	r2,-4(fp)
 8032fac:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8032fb0:	0009883a 	mov	r4,zero
 8032fb4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
 8032fb8:	e0bfff17 	ldw	r2,-4(fp)
 8032fbc:	1004d0ba 	srli	r2,r2,2
 8032fc0:	10800804 	addi	r2,r2,32
}
 8032fc4:	e037883a 	mov	sp,fp
 8032fc8:	dfc00117 	ldw	ra,4(sp)
 8032fcc:	df000017 	ldw	fp,0(sp)
 8032fd0:	dec00204 	addi	sp,sp,8
 8032fd4:	f800283a 	ret

08032fd8 <t_bind>:

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 8032fd8:	defff204 	addi	sp,sp,-56
 8032fdc:	dfc00d15 	stw	ra,52(sp)
 8032fe0:	df000c15 	stw	fp,48(sp)
 8032fe4:	df000c04 	addi	fp,sp,48
 8032fe8:	e13ff615 	stw	r4,-40(fp)
 8032fec:	e17ff515 	stw	r5,-44(fp)
 8032ff0:	e1bff415 	stw	r6,-48(fp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 8032ff4:	e0bff617 	ldw	r2,-40(fp)
 8032ff8:	10bff804 	addi	r2,r2,-32
 8032ffc:	100490ba 	slli	r2,r2,2
 8033000:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 8033004:	008201b4 	movhi	r2,2054
 8033008:	10bf0b04 	addi	r2,r2,-980
 803300c:	e0bffe15 	stw	r2,-8(fp)
 8033010:	00000606 	br	803302c <t_bind+0x54>
 8033014:	e0fffe17 	ldw	r3,-8(fp)
 8033018:	e0bffd17 	ldw	r2,-12(fp)
 803301c:	18800626 	beq	r3,r2,8033038 <t_bind+0x60>
 8033020:	e0bffe17 	ldw	r2,-8(fp)
 8033024:	10800017 	ldw	r2,0(r2)
 8033028:	e0bffe15 	stw	r2,-8(fp)
 803302c:	e0bffe17 	ldw	r2,-8(fp)
 8033030:	103ff81e 	bne	r2,zero,8033014 <t_bind+0x3c>
 8033034:	00000106 	br	803303c <t_bind+0x64>
 8033038:	0001883a 	nop
 803303c:	e0fffe17 	ldw	r3,-8(fp)
 8033040:	e0bffd17 	ldw	r2,-12(fp)
 8033044:	18800326 	beq	r3,r2,8033054 <t_bind+0x7c>
 8033048:	80301a80 	call	80301a8 <dtrap>
 803304c:	00bfffc4 	movi	r2,-1
 8033050:	00003406 	br	8033124 <t_bind+0x14c>
   DOMAIN_CHECK(so, addrlen);
 8033054:	e17ff417 	ldw	r5,-48(fp)
 8033058:	e13ffd17 	ldw	r4,-12(fp)
 803305c:	8032f080 	call	8032f08 <DOMAIN_CHECK>

   so->so_error = 0;
 8033060:	e0bffd17 	ldw	r2,-12(fp)
 8033064:	10000615 	stw	zero,24(r2)
   if (addr == (struct sockaddr *)NULL) 
 8033068:	e0bff517 	ldw	r2,-44(fp)
 803306c:	10000d1e 	bne	r2,zero,80330a4 <t_bind+0xcc>
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
 8033070:	e0bff704 	addi	r2,fp,-36
 8033074:	01800404 	movi	r6,16
 8033078:	000b883a 	mov	r5,zero
 803307c:	1009883a 	mov	r4,r2
 8033080:	80038cc0 	call	80038cc <memset>
      addrlen = sizeof(sa);
 8033084:	00800404 	movi	r2,16
 8033088:	e0bff415 	stw	r2,-48(fp)
      sa.sa_family = so->so_domain;
 803308c:	e0bffd17 	ldw	r2,-12(fp)
 8033090:	10800517 	ldw	r2,20(r2)
 8033094:	e0bff70d 	sth	r2,-36(fp)
      sap = &sa;
 8033098:	e0bff704 	addi	r2,fp,-36
 803309c:	e0bfff15 	stw	r2,-4(fp)
 80330a0:	00000206 	br	80330ac <t_bind+0xd4>
   } else
      sap = addr;
 80330a4:	e0bff517 	ldw	r2,-44(fp)
 80330a8:	e0bfff15 	stw	r2,-4(fp)

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
 80330ac:	01800244 	movi	r6,9
 80330b0:	e17ff417 	ldw	r5,-48(fp)
 80330b4:	e13fff17 	ldw	r4,-4(fp)
 80330b8:	80344240 	call	8034424 <sockargs>
 80330bc:	e0bffc15 	stw	r2,-16(fp)
 80330c0:	e0bffc17 	ldw	r2,-16(fp)
 80330c4:	1000051e 	bne	r2,zero,80330dc <t_bind+0x104>
   {
      so->so_error = ENOMEM;
 80330c8:	e0bffd17 	ldw	r2,-12(fp)
 80330cc:	00c00304 	movi	r3,12
 80330d0:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80330d4:	00bfffc4 	movi	r2,-1
 80330d8:	00001206 	br	8033124 <t_bind+0x14c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 80330dc:	0009883a 	mov	r4,zero
 80330e0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
 80330e4:	e17ffc17 	ldw	r5,-16(fp)
 80330e8:	e13ffd17 	ldw	r4,-12(fp)
 80330ec:	80346ec0 	call	80346ec <sobind>
 80330f0:	e0bffb15 	stw	r2,-20(fp)
   m_freem(nam);
 80330f4:	e13ffc17 	ldw	r4,-16(fp)
 80330f8:	80311e00 	call	80311e0 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 80330fc:	0009883a 	mov	r4,zero
 8033100:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (err) 
 8033104:	e0bffb17 	ldw	r2,-20(fp)
 8033108:	10000526 	beq	r2,zero,8033120 <t_bind+0x148>
   {
      so->so_error = err;
 803310c:	e0bffd17 	ldw	r2,-12(fp)
 8033110:	e0fffb17 	ldw	r3,-20(fp)
 8033114:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033118:	00bfffc4 	movi	r2,-1
 803311c:	00000106 	br	8033124 <t_bind+0x14c>
   }
   return 0;
 8033120:	0005883a 	mov	r2,zero
}
 8033124:	e037883a 	mov	sp,fp
 8033128:	dfc00117 	ldw	ra,4(sp)
 803312c:	df000017 	ldw	fp,0(sp)
 8033130:	dec00204 	addi	sp,sp,8
 8033134:	f800283a 	ret

08033138 <t_listen>:
 */

int
t_listen(long s, 
   int   backlog)
{
 8033138:	defff904 	addi	sp,sp,-28
 803313c:	dfc00615 	stw	ra,24(sp)
 8033140:	df000515 	stw	fp,20(sp)
 8033144:	df000504 	addi	fp,sp,20
 8033148:	e13ffc15 	stw	r4,-16(fp)
 803314c:	e17ffb15 	stw	r5,-20(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 8033150:	e0bffc17 	ldw	r2,-16(fp)
 8033154:	10bff804 	addi	r2,r2,-32
 8033158:	100490ba 	slli	r2,r2,2
 803315c:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033160:	008201b4 	movhi	r2,2054
 8033164:	10bf0b04 	addi	r2,r2,-980
 8033168:	e0bfff15 	stw	r2,-4(fp)
 803316c:	00000606 	br	8033188 <t_listen+0x50>
 8033170:	e0ffff17 	ldw	r3,-4(fp)
 8033174:	e0bffe17 	ldw	r2,-8(fp)
 8033178:	18800626 	beq	r3,r2,8033194 <t_listen+0x5c>
 803317c:	e0bfff17 	ldw	r2,-4(fp)
 8033180:	10800017 	ldw	r2,0(r2)
 8033184:	e0bfff15 	stw	r2,-4(fp)
 8033188:	e0bfff17 	ldw	r2,-4(fp)
 803318c:	103ff81e 	bne	r2,zero,8033170 <t_listen+0x38>
 8033190:	00000106 	br	8033198 <t_listen+0x60>
 8033194:	0001883a 	nop
 8033198:	e0ffff17 	ldw	r3,-4(fp)
 803319c:	e0bffe17 	ldw	r2,-8(fp)
 80331a0:	18800326 	beq	r3,r2,80331b0 <t_listen+0x78>
 80331a4:	80301a80 	call	80301a8 <dtrap>
 80331a8:	00bfffc4 	movi	r2,-1
 80331ac:	00001206 	br	80331f8 <t_listen+0xc0>
   so->so_error = 0;
 80331b0:	e0bffe17 	ldw	r2,-8(fp)
 80331b4:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
 80331b8:	0009883a 	mov	r4,zero
 80331bc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
 80331c0:	e17ffb17 	ldw	r5,-20(fp)
 80331c4:	e13ffe17 	ldw	r4,-8(fp)
 80331c8:	80347480 	call	8034748 <solisten>
 80331cc:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 80331d0:	0009883a 	mov	r4,zero
 80331d4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 80331d8:	e0bffd17 	ldw	r2,-12(fp)
 80331dc:	10000526 	beq	r2,zero,80331f4 <t_listen+0xbc>
   {
      so->so_error = err;
 80331e0:	e0bffe17 	ldw	r2,-8(fp)
 80331e4:	e0fffd17 	ldw	r3,-12(fp)
 80331e8:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80331ec:	00bfffc4 	movi	r2,-1
 80331f0:	00000106 	br	80331f8 <t_listen+0xc0>
   }
   return 0;
 80331f4:	0005883a 	mov	r2,zero
}
 80331f8:	e037883a 	mov	sp,fp
 80331fc:	dfc00117 	ldw	ra,4(sp)
 8033200:	df000017 	ldw	fp,0(sp)
 8033204:	dec00204 	addi	sp,sp,8
 8033208:	f800283a 	ret

0803320c <t_accept>:

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 803320c:	defff704 	addi	sp,sp,-36
 8033210:	dfc00815 	stw	ra,32(sp)
 8033214:	df000715 	stw	fp,28(sp)
 8033218:	df000704 	addi	fp,sp,28
 803321c:	e13ffb15 	stw	r4,-20(fp)
 8033220:	e17ffa15 	stw	r5,-24(fp)
 8033224:	e1bff915 	stw	r6,-28(fp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 8033228:	e0bffb17 	ldw	r2,-20(fp)
 803322c:	10bff804 	addi	r2,r2,-32
 8033230:	100490ba 	slli	r2,r2,2
 8033234:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033238:	008201b4 	movhi	r2,2054
 803323c:	10bf0b04 	addi	r2,r2,-980
 8033240:	e0bfff15 	stw	r2,-4(fp)
 8033244:	00000606 	br	8033260 <t_accept+0x54>
 8033248:	e0ffff17 	ldw	r3,-4(fp)
 803324c:	e0bffe17 	ldw	r2,-8(fp)
 8033250:	18800626 	beq	r3,r2,803326c <t_accept+0x60>
 8033254:	e0bfff17 	ldw	r2,-4(fp)
 8033258:	10800017 	ldw	r2,0(r2)
 803325c:	e0bfff15 	stw	r2,-4(fp)
 8033260:	e0bfff17 	ldw	r2,-4(fp)
 8033264:	103ff81e 	bne	r2,zero,8033248 <t_accept+0x3c>
 8033268:	00000106 	br	8033270 <t_accept+0x64>
 803326c:	0001883a 	nop
 8033270:	e0ffff17 	ldw	r3,-4(fp)
 8033274:	e0bffe17 	ldw	r2,-8(fp)
 8033278:	18800326 	beq	r3,r2,8033288 <t_accept+0x7c>
 803327c:	80301a80 	call	80301a8 <dtrap>
 8033280:	00bfffc4 	movi	r2,-1
 8033284:	00007006 	br	8033448 <t_accept+0x23c>
   DOMAIN_CHECK(so, *addrlen);
 8033288:	e0bff917 	ldw	r2,-28(fp)
 803328c:	10800017 	ldw	r2,0(r2)
 8033290:	100b883a 	mov	r5,r2
 8033294:	e13ffe17 	ldw	r4,-8(fp)
 8033298:	8032f080 	call	8032f08 <DOMAIN_CHECK>

   so->so_error = 0;
 803329c:	e0bffe17 	ldw	r2,-8(fp)
 80332a0:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
 80332a4:	e0bffe17 	ldw	r2,-8(fp)
 80332a8:	10800417 	ldw	r2,16(r2)
 80332ac:	1080008c 	andi	r2,r2,2
 80332b0:	1000051e 	bne	r2,zero,80332c8 <t_accept+0xbc>
   {
      so->so_error = EINVAL;
 80332b4:	e0bffe17 	ldw	r2,-8(fp)
 80332b8:	00c00584 	movi	r3,22
 80332bc:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 80332c0:	00bfffc4 	movi	r2,-1
 80332c4:	00006006 	br	8033448 <t_accept+0x23c>
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
 80332c8:	e0bffe17 	ldw	r2,-8(fp)
 80332cc:	1080088b 	ldhu	r2,34(r2)
 80332d0:	10bfffcc 	andi	r2,r2,65535
 80332d4:	1080400c 	andi	r2,r2,256
 80332d8:	10000b26 	beq	r2,zero,8033308 <t_accept+0xfc>
 80332dc:	e0bffe17 	ldw	r2,-8(fp)
 80332e0:	10801e43 	ldbu	r2,121(r2)
 80332e4:	10803fcc 	andi	r2,r2,255
 80332e8:	1080201c 	xori	r2,r2,128
 80332ec:	10bfe004 	addi	r2,r2,-128
 80332f0:	1000051e 	bne	r2,zero,8033308 <t_accept+0xfc>
   {
      so->so_error = EWOULDBLOCK;
 80332f4:	e0bffe17 	ldw	r2,-8(fp)
 80332f8:	00c002c4 	movi	r3,11
 80332fc:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 8033300:	00bfffc4 	movi	r2,-1
 8033304:	00005006 	br	8033448 <t_accept+0x23c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 8033308:	0009883a 	mov	r4,zero
 803330c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
 8033310:	00001006 	br	8033354 <t_accept+0x148>
   {
      if (so->so_state & SS_CANTRCVMORE)
 8033314:	e0bffe17 	ldw	r2,-8(fp)
 8033318:	1080088b 	ldhu	r2,34(r2)
 803331c:	10bfffcc 	andi	r2,r2,65535
 8033320:	1080080c 	andi	r2,r2,32
 8033324:	10000726 	beq	r2,zero,8033344 <t_accept+0x138>
      {
         so->so_error = ECONNABORTED;
 8033328:	e0bffe17 	ldw	r2,-8(fp)
 803332c:	00c01c44 	movi	r3,113
 8033330:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
 8033334:	0009883a 	mov	r4,zero
 8033338:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 803333c:	00bfffc4 	movi	r2,-1
 8033340:	00004106 	br	8033448 <t_accept+0x23c>
      }
      tcp_sleep ((char *)&so->so_timeo);
 8033344:	e0bffe17 	ldw	r2,-8(fp)
 8033348:	10800904 	addi	r2,r2,36
 803334c:	1009883a 	mov	r4,r2
 8033350:	802c66c0 	call	802c66c <tcp_sleep>
   while (so->so_qlen == 0 && so->so_error == 0)
 8033354:	e0bffe17 	ldw	r2,-8(fp)
 8033358:	10801e43 	ldbu	r2,121(r2)
 803335c:	10803fcc 	andi	r2,r2,255
 8033360:	1080201c 	xori	r2,r2,128
 8033364:	10bfe004 	addi	r2,r2,-128
 8033368:	1000031e 	bne	r2,zero,8033378 <t_accept+0x16c>
 803336c:	e0bffe17 	ldw	r2,-8(fp)
 8033370:	10800617 	ldw	r2,24(r2)
 8033374:	103fe726 	beq	r2,zero,8033314 <t_accept+0x108>
   }
   if (so->so_error)
 8033378:	e0bffe17 	ldw	r2,-8(fp)
 803337c:	10800617 	ldw	r2,24(r2)
 8033380:	10000426 	beq	r2,zero,8033394 <t_accept+0x188>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 8033384:	0009883a 	mov	r4,zero
 8033388:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 803338c:	00bfffc4 	movi	r2,-1
 8033390:	00002d06 	br	8033448 <t_accept+0x23c>
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 8033394:	01400404 	movi	r5,16
 8033398:	01000244 	movi	r4,9
 803339c:	8030f540 	call	8030f54 <m_getnbuf>
 80333a0:	e0bffd15 	stw	r2,-12(fp)
   if (nam == NULL) 
 80333a4:	e0bffd17 	ldw	r2,-12(fp)
 80333a8:	1000071e 	bne	r2,zero,80333c8 <t_accept+0x1bc>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 80333ac:	0009883a 	mov	r4,zero
 80333b0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
 80333b4:	e0bffe17 	ldw	r2,-8(fp)
 80333b8:	00c00304 	movi	r3,12
 80333bc:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 80333c0:	00bfffc4 	movi	r2,-1
 80333c4:	00002006 	br	8033448 <t_accept+0x23c>
   }
   { 
      struct socket *aso = so->so_q;
 80333c8:	e0bffe17 	ldw	r2,-8(fp)
 80333cc:	10801d17 	ldw	r2,116(r2)
 80333d0:	e0bffc15 	stw	r2,-16(fp)
      if (soqremque (aso, 1) == 0)
 80333d4:	01400044 	movi	r5,1
 80333d8:	e13ffc17 	ldw	r4,-16(fp)
 80333dc:	8036ca40 	call	8036ca4 <soqremque>
 80333e0:	1000031e 	bne	r2,zero,80333f0 <t_accept+0x1e4>
         panic("accept");
 80333e4:	01020174 	movhi	r4,2053
 80333e8:	210f0a04 	addi	r4,r4,15400
 80333ec:	802bd8c0 	call	802bd8c <panic>
      so = aso;
 80333f0:	e0bffc17 	ldw	r2,-16(fp)
 80333f4:	e0bffe15 	stw	r2,-8(fp)
   }
   (void)soaccept (so, nam);
 80333f8:	e17ffd17 	ldw	r5,-12(fp)
 80333fc:	e13ffe17 	ldw	r4,-8(fp)
 8033400:	8034c400 	call	8034c40 <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
 8033404:	e0bffa17 	ldw	r2,-24(fp)
 8033408:	10000826 	beq	r2,zero,803342c <t_accept+0x220>
      MEMCPY(addr, nam->m_data, *addrlen);
 803340c:	e0bffd17 	ldw	r2,-12(fp)
 8033410:	10c00317 	ldw	r3,12(r2)
 8033414:	e0bff917 	ldw	r2,-28(fp)
 8033418:	10800017 	ldw	r2,0(r2)
 803341c:	100d883a 	mov	r6,r2
 8033420:	180b883a 	mov	r5,r3
 8033424:	e13ffa17 	ldw	r4,-24(fp)
 8033428:	80037cc0 	call	80037cc <memcpy>
   m_freem (nam);
 803342c:	e13ffd17 	ldw	r4,-12(fp)
 8033430:	80311e00 	call	80311e0 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 8033434:	0009883a 	mov	r4,zero
 8033438:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
 803343c:	e0bffe17 	ldw	r2,-8(fp)
 8033440:	1004d0ba 	srli	r2,r2,2
 8033444:	10800804 	addi	r2,r2,32
}
 8033448:	e037883a 	mov	sp,fp
 803344c:	dfc00117 	ldw	ra,4(sp)
 8033450:	df000017 	ldw	fp,0(sp)
 8033454:	dec00204 	addi	sp,sp,8
 8033458:	f800283a 	ret

0803345c <t_connect>:

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 803345c:	defff804 	addi	sp,sp,-32
 8033460:	dfc00715 	stw	ra,28(sp)
 8033464:	df000615 	stw	fp,24(sp)
 8033468:	df000604 	addi	fp,sp,24
 803346c:	e13ffc15 	stw	r4,-16(fp)
 8033470:	e17ffb15 	stw	r5,-20(fp)
 8033474:	e1bffa15 	stw	r6,-24(fp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 8033478:	e0bffc17 	ldw	r2,-16(fp)
 803347c:	10bff804 	addi	r2,r2,-32
 8033480:	100490ba 	slli	r2,r2,2
 8033484:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033488:	008201b4 	movhi	r2,2054
 803348c:	10bf0b04 	addi	r2,r2,-980
 8033490:	e0bfff15 	stw	r2,-4(fp)
 8033494:	00000606 	br	80334b0 <t_connect+0x54>
 8033498:	e0ffff17 	ldw	r3,-4(fp)
 803349c:	e0bffe17 	ldw	r2,-8(fp)
 80334a0:	18800626 	beq	r3,r2,80334bc <t_connect+0x60>
 80334a4:	e0bfff17 	ldw	r2,-4(fp)
 80334a8:	10800017 	ldw	r2,0(r2)
 80334ac:	e0bfff15 	stw	r2,-4(fp)
 80334b0:	e0bfff17 	ldw	r2,-4(fp)
 80334b4:	103ff81e 	bne	r2,zero,8033498 <t_connect+0x3c>
 80334b8:	00000106 	br	80334c0 <t_connect+0x64>
 80334bc:	0001883a 	nop
 80334c0:	e0ffff17 	ldw	r3,-4(fp)
 80334c4:	e0bffe17 	ldw	r2,-8(fp)
 80334c8:	18800326 	beq	r3,r2,80334d8 <t_connect+0x7c>
 80334cc:	80301a80 	call	80301a8 <dtrap>
 80334d0:	00bfffc4 	movi	r2,-1
 80334d4:	00007806 	br	80336b8 <t_connect+0x25c>
   DOMAIN_CHECK(so, addrlen);
 80334d8:	e17ffa17 	ldw	r5,-24(fp)
 80334dc:	e13ffe17 	ldw	r4,-8(fp)
 80334e0:	8032f080 	call	8032f08 <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
 80334e4:	e0bffe17 	ldw	r2,-8(fp)
 80334e8:	1080088b 	ldhu	r2,34(r2)
 80334ec:	10bfffcc 	andi	r2,r2,65535
 80334f0:	1080400c 	andi	r2,r2,256
 80334f4:	10002426 	beq	r2,zero,8033588 <t_connect+0x12c>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
 80334f8:	e0bffe17 	ldw	r2,-8(fp)
 80334fc:	1080088b 	ldhu	r2,34(r2)
 8033500:	10bfffcc 	andi	r2,r2,65535
 8033504:	1080010c 	andi	r2,r2,4
 8033508:	10000526 	beq	r2,zero,8033520 <t_connect+0xc4>
      {
         so->so_error = EINPROGRESS;
 803350c:	e0bffe17 	ldw	r2,-8(fp)
 8033510:	00c01dc4 	movi	r3,119
 8033514:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 8033518:	00bfffc4 	movi	r2,-1
 803351c:	00006606 	br	80336b8 <t_connect+0x25c>
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
 8033520:	e0bffe17 	ldw	r2,-8(fp)
 8033524:	1080088b 	ldhu	r2,34(r2)
 8033528:	10bfffcc 	andi	r2,r2,65535
 803352c:	1080008c 	andi	r2,r2,2
 8033530:	10000426 	beq	r2,zero,8033544 <t_connect+0xe8>
      {
         so->so_error = 0;
 8033534:	e0bffe17 	ldw	r2,-8(fp)
 8033538:	10000615 	stw	zero,24(r2)
         return 0;
 803353c:	0005883a 	mov	r2,zero
 8033540:	00005d06 	br	80336b8 <t_connect+0x25c>
      }
      if (so->so_state & SS_WASCONNECTING)
 8033544:	e0bffe17 	ldw	r2,-8(fp)
 8033548:	1080088b 	ldhu	r2,34(r2)
 803354c:	10bfffcc 	andi	r2,r2,65535
 8033550:	1088000c 	andi	r2,r2,8192
 8033554:	10000c26 	beq	r2,zero,8033588 <t_connect+0x12c>
      {
         so->so_state &= ~SS_WASCONNECTING;
 8033558:	e0bffe17 	ldw	r2,-8(fp)
 803355c:	10c0088b 	ldhu	r3,34(r2)
 8033560:	00b7ffc4 	movi	r2,-8193
 8033564:	1884703a 	and	r2,r3,r2
 8033568:	1007883a 	mov	r3,r2
 803356c:	e0bffe17 	ldw	r2,-8(fp)
 8033570:	10c0088d 	sth	r3,34(r2)
         if (so->so_error) /* connect error - maybe timeout */
 8033574:	e0bffe17 	ldw	r2,-8(fp)
 8033578:	10800617 	ldw	r2,24(r2)
 803357c:	10000226 	beq	r2,zero,8033588 <t_connect+0x12c>
            return SOCKET_ERROR;
 8033580:	00bfffc4 	movi	r2,-1
 8033584:	00004c06 	br	80336b8 <t_connect+0x25c>
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
 8033588:	e0bffe17 	ldw	r2,-8(fp)
 803358c:	10000615 	stw	zero,24(r2)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
 8033590:	01800244 	movi	r6,9
 8033594:	e17ffa17 	ldw	r5,-24(fp)
 8033598:	e13ffb17 	ldw	r4,-20(fp)
 803359c:	80344240 	call	8034424 <sockargs>
 80335a0:	e0bffd15 	stw	r2,-12(fp)
 80335a4:	e0bffd17 	ldw	r2,-12(fp)
 80335a8:	1000051e 	bne	r2,zero,80335c0 <t_connect+0x164>
       == NULL)
   {
      so->so_error = ENOMEM;
 80335ac:	e0bffe17 	ldw	r2,-8(fp)
 80335b0:	00c00304 	movi	r3,12
 80335b4:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80335b8:	00bfffc4 	movi	r2,-1
 80335bc:	00003e06 	br	80336b8 <t_connect+0x25c>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 80335c0:	0009883a 	mov	r4,zero
 80335c4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
 80335c8:	e17ffd17 	ldw	r5,-12(fp)
 80335cc:	e13ffe17 	ldw	r4,-8(fp)
 80335d0:	8034cd80 	call	8034cd8 <soconnect>
 80335d4:	1007883a 	mov	r3,r2
 80335d8:	e0bffe17 	ldw	r2,-8(fp)
 80335dc:	10c00615 	stw	r3,24(r2)
 80335e0:	e0bffe17 	ldw	r2,-8(fp)
 80335e4:	10800617 	ldw	r2,24(r2)
 80335e8:	10001b1e 	bne	r2,zero,8033658 <t_connect+0x1fc>
      goto bad;

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
 80335ec:	e0bffe17 	ldw	r2,-8(fp)
 80335f0:	1080088b 	ldhu	r2,34(r2)
 80335f4:	10bfffcc 	andi	r2,r2,65535
 80335f8:	1080400c 	andi	r2,r2,256
 80335fc:	10000d26 	beq	r2,zero,8033634 <t_connect+0x1d8>
 8033600:	e0bffe17 	ldw	r2,-8(fp)
 8033604:	1080088b 	ldhu	r2,34(r2)
 8033608:	10bfffcc 	andi	r2,r2,65535
 803360c:	1080010c 	andi	r2,r2,4
 8033610:	10000826 	beq	r2,zero,8033634 <t_connect+0x1d8>
   {
      so->so_error = EINPROGRESS;
 8033614:	e0bffe17 	ldw	r2,-8(fp)
 8033618:	00c01dc4 	movi	r3,119
 803361c:	10c00615 	stw	r3,24(r2)
      goto bad;
 8033620:	00001006 	br	8033664 <t_connect+0x208>
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   {
      tcp_sleep ((char *)&so->so_timeo);
 8033624:	e0bffe17 	ldw	r2,-8(fp)
 8033628:	10800904 	addi	r2,r2,36
 803362c:	1009883a 	mov	r4,r2
 8033630:	802c66c0 	call	802c66c <tcp_sleep>
   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
 8033634:	e0bffe17 	ldw	r2,-8(fp)
 8033638:	1080088b 	ldhu	r2,34(r2)
 803363c:	10bfffcc 	andi	r2,r2,65535
 8033640:	1080010c 	andi	r2,r2,4
 8033644:	10000626 	beq	r2,zero,8033660 <t_connect+0x204>
 8033648:	e0bffe17 	ldw	r2,-8(fp)
 803364c:	10800617 	ldw	r2,24(r2)
 8033650:	103ff426 	beq	r2,zero,8033624 <t_connect+0x1c8>
   }
bad:
 8033654:	00000206 	br	8033660 <t_connect+0x204>
      goto bad;
 8033658:	0001883a 	nop
 803365c:	00000106 	br	8033664 <t_connect+0x208>
bad:
 8033660:	0001883a 	nop
   if (so->so_error != EINPROGRESS)
 8033664:	e0bffe17 	ldw	r2,-8(fp)
 8033668:	10800617 	ldw	r2,24(r2)
 803366c:	10801de0 	cmpeqi	r2,r2,119
 8033670:	1000071e 	bne	r2,zero,8033690 <t_connect+0x234>
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
 8033674:	e0bffe17 	ldw	r2,-8(fp)
 8033678:	10c0088b 	ldhu	r3,34(r2)
 803367c:	00b7fec4 	movi	r2,-8197
 8033680:	1884703a 	and	r2,r3,r2
 8033684:	1007883a 	mov	r3,r2
 8033688:	e0bffe17 	ldw	r2,-8(fp)
 803368c:	10c0088d 	sth	r3,34(r2)
   m_freem (nam);
 8033690:	e13ffd17 	ldw	r4,-12(fp)
 8033694:	80311e00 	call	80311e0 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 8033698:	0009883a 	mov	r4,zero
 803369c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (so->so_error)
 80336a0:	e0bffe17 	ldw	r2,-8(fp)
 80336a4:	10800617 	ldw	r2,24(r2)
 80336a8:	10000226 	beq	r2,zero,80336b4 <t_connect+0x258>
   {
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;
 80336ac:	00bfffc4 	movi	r2,-1
 80336b0:	00000106 	br	80336b8 <t_connect+0x25c>

   }
      return 0;
 80336b4:	0005883a 	mov	r2,zero
}
 80336b8:	e037883a 	mov	sp,fp
 80336bc:	dfc00117 	ldw	ra,4(sp)
 80336c0:	df000017 	ldw	fp,0(sp)
 80336c4:	dec00204 	addi	sp,sp,8
 80336c8:	f800283a 	ret

080336cc <t_getpeername>:
 * RETURNS: 
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
 80336cc:	defffb04 	addi	sp,sp,-20
 80336d0:	dfc00415 	stw	ra,16(sp)
 80336d4:	df000315 	stw	fp,12(sp)
 80336d8:	df000304 	addi	fp,sp,12
 80336dc:	e13fff15 	stw	r4,-4(fp)
 80336e0:	e17ffe15 	stw	r5,-8(fp)
 80336e4:	e1bffd15 	stw	r6,-12(fp)
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
 80336e8:	01c00404 	movi	r7,16
 80336ec:	e1bffd17 	ldw	r6,-12(fp)
 80336f0:	e17ffe17 	ldw	r5,-8(fp)
 80336f4:	e13fff17 	ldw	r4,-4(fp)
 80336f8:	80337540 	call	8033754 <t_getname>
}
 80336fc:	e037883a 	mov	sp,fp
 8033700:	dfc00117 	ldw	ra,4(sp)
 8033704:	df000017 	ldw	fp,0(sp)
 8033708:	dec00204 	addi	sp,sp,8
 803370c:	f800283a 	ret

08033710 <t_getsockname>:
 * RETURNS: 
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
 8033710:	defffb04 	addi	sp,sp,-20
 8033714:	dfc00415 	stw	ra,16(sp)
 8033718:	df000315 	stw	fp,12(sp)
 803371c:	df000304 	addi	fp,sp,12
 8033720:	e13fff15 	stw	r4,-4(fp)
 8033724:	e17ffe15 	stw	r5,-8(fp)
 8033728:	e1bffd15 	stw	r6,-12(fp)
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
 803372c:	01c003c4 	movi	r7,15
 8033730:	e1bffd17 	ldw	r6,-12(fp)
 8033734:	e17ffe17 	ldw	r5,-8(fp)
 8033738:	e13fff17 	ldw	r4,-4(fp)
 803373c:	80337540 	call	8033754 <t_getname>
}
 8033740:	e037883a 	mov	sp,fp
 8033744:	dfc00117 	ldw	ra,4(sp)
 8033748:	df000017 	ldw	fp,0(sp)
 803374c:	dec00204 	addi	sp,sp,8
 8033750:	f800283a 	ret

08033754 <t_getname>:
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 8033754:	defff604 	addi	sp,sp,-40
 8033758:	dfc00915 	stw	ra,36(sp)
 803375c:	df000815 	stw	fp,32(sp)
 8033760:	df000804 	addi	fp,sp,32
 8033764:	e13ffb15 	stw	r4,-20(fp)
 8033768:	e17ffa15 	stw	r5,-24(fp)
 803376c:	e1bff915 	stw	r6,-28(fp)
 8033770:	e1fff815 	stw	r7,-32(fp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 8033774:	e0bffb17 	ldw	r2,-20(fp)
 8033778:	10bff804 	addi	r2,r2,-32
 803377c:	100490ba 	slli	r2,r2,2
 8033780:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033784:	008201b4 	movhi	r2,2054
 8033788:	10bf0b04 	addi	r2,r2,-980
 803378c:	e0bfff15 	stw	r2,-4(fp)
 8033790:	00000606 	br	80337ac <t_getname+0x58>
 8033794:	e0ffff17 	ldw	r3,-4(fp)
 8033798:	e0bffe17 	ldw	r2,-8(fp)
 803379c:	18800626 	beq	r3,r2,80337b8 <t_getname+0x64>
 80337a0:	e0bfff17 	ldw	r2,-4(fp)
 80337a4:	10800017 	ldw	r2,0(r2)
 80337a8:	e0bfff15 	stw	r2,-4(fp)
 80337ac:	e0bfff17 	ldw	r2,-4(fp)
 80337b0:	103ff81e 	bne	r2,zero,8033794 <t_getname+0x40>
 80337b4:	00000106 	br	80337bc <t_getname+0x68>
 80337b8:	0001883a 	nop
 80337bc:	e0ffff17 	ldw	r3,-4(fp)
 80337c0:	e0bffe17 	ldw	r2,-8(fp)
 80337c4:	18800326 	beq	r3,r2,80337d4 <t_getname+0x80>
 80337c8:	80301a80 	call	80301a8 <dtrap>
 80337cc:	00bfffc4 	movi	r2,-1
 80337d0:	00005306 	br	8033920 <t_getname+0x1cc>

   so->so_error = 0;
 80337d4:	e0bffe17 	ldw	r2,-8(fp)
 80337d8:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 80337dc:	e0bff817 	ldw	r2,-32(fp)
 80337e0:	10800418 	cmpnei	r2,r2,16
 80337e4:	10000a1e 	bne	r2,zero,8033810 <t_getname+0xbc>
 80337e8:	e0bffe17 	ldw	r2,-8(fp)
 80337ec:	1080088b 	ldhu	r2,34(r2)
 80337f0:	10bfffcc 	andi	r2,r2,65535
 80337f4:	1080008c 	andi	r2,r2,2
 80337f8:	1000051e 	bne	r2,zero,8033810 <t_getname+0xbc>
   {
      so->so_error = ENOTCONN;
 80337fc:	e0bffe17 	ldw	r2,-8(fp)
 8033800:	00c02004 	movi	r3,128
 8033804:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033808:	00bfffc4 	movi	r2,-1
 803380c:	00004406 	br	8033920 <t_getname+0x1cc>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 8033810:	0009883a 	mov	r4,zero
 8033814:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 8033818:	01400404 	movi	r5,16
 803381c:	01000244 	movi	r4,9
 8033820:	8030f540 	call	8030f54 <m_getnbuf>
 8033824:	e0bffd15 	stw	r2,-12(fp)
   if (m == NULL) 
 8033828:	e0bffd17 	ldw	r2,-12(fp)
 803382c:	1000071e 	bne	r2,zero,803384c <t_getname+0xf8>
   {
      so->so_error = ENOMEM;
 8033830:	e0bffe17 	ldw	r2,-8(fp)
 8033834:	00c00304 	movi	r3,12
 8033838:	10c00615 	stw	r3,24(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
 803383c:	0009883a 	mov	r4,zero
 8033840:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 8033844:	00bfffc4 	movi	r2,-1
 8033848:	00003506 	br	8033920 <t_getname+0x1cc>
   }
   so->so_req = opcode;
 803384c:	e0bffe17 	ldw	r2,-8(fp)
 8033850:	e0fff817 	ldw	r3,-32(fp)
 8033854:	10c00715 	stw	r3,28(r2)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
 8033858:	e0bffe17 	ldw	r2,-8(fp)
 803385c:	10800217 	ldw	r2,8(r2)
 8033860:	10800317 	ldw	r2,12(r2)
 8033864:	e1bffd17 	ldw	r6,-12(fp)
 8033868:	000b883a 	mov	r5,zero
 803386c:	e13ffe17 	ldw	r4,-8(fp)
 8033870:	103ee83a 	callr	r2
 8033874:	e0bffc15 	stw	r2,-16(fp)
 8033878:	e0bffc17 	ldw	r2,-16(fp)
 803387c:	1000191e 	bne	r2,zero,80338e4 <t_getname+0x190>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
 8033880:	e0bffe17 	ldw	r2,-8(fp)
 8033884:	10800517 	ldw	r2,20(r2)
 8033888:	10800098 	cmpnei	r2,r2,2
 803388c:	1000171e 	bne	r2,zero,80338ec <t_getname+0x198>
   {
      if(*addrlen < sizeof(struct sockaddr_in))
 8033890:	e0bff917 	ldw	r2,-28(fp)
 8033894:	10800017 	ldw	r2,0(r2)
 8033898:	10800428 	cmpgeui	r2,r2,16
 803389c:	1000071e 	bne	r2,zero,80338bc <t_getname+0x168>
      {
         dtrap();    /* programming error */
 80338a0:	80301a80 	call	80301a8 <dtrap>
         m_freem(m);
 80338a4:	e13ffd17 	ldw	r4,-12(fp)
 80338a8:	80311e00 	call	80311e0 <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
 80338ac:	0009883a 	mov	r4,zero
 80338b0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return EINVAL;
 80338b4:	00800584 	movi	r2,22
 80338b8:	00001906 	br	8033920 <t_getname+0x1cc>
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
 80338bc:	e0bffd17 	ldw	r2,-12(fp)
 80338c0:	10800317 	ldw	r2,12(r2)
 80338c4:	01800404 	movi	r6,16
 80338c8:	100b883a 	mov	r5,r2
 80338cc:	e13ffa17 	ldw	r4,-24(fp)
 80338d0:	80037cc0 	call	80037cc <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
 80338d4:	e0bff917 	ldw	r2,-28(fp)
 80338d8:	00c00404 	movi	r3,16
 80338dc:	10c00015 	stw	r3,0(r2)
 80338e0:	00000306 	br	80338f0 <t_getname+0x19c>
      goto bad;
 80338e4:	0001883a 	nop
 80338e8:	00000106 	br	80338f0 <t_getname+0x19c>
      *addrlen = sizeof(struct sockaddr_in6);
   }
#endif   /* IP_V6 */


bad:
 80338ec:	0001883a 	nop
   m_freem(m);
 80338f0:	e13ffd17 	ldw	r4,-12(fp)
 80338f4:	80311e00 	call	80311e0 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 80338f8:	0009883a 	mov	r4,zero
 80338fc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (err) 
 8033900:	e0bffc17 	ldw	r2,-16(fp)
 8033904:	10000526 	beq	r2,zero,803391c <t_getname+0x1c8>
   {
      so->so_error = err;
 8033908:	e0bffe17 	ldw	r2,-8(fp)
 803390c:	e0fffc17 	ldw	r3,-16(fp)
 8033910:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033914:	00bfffc4 	movi	r2,-1
 8033918:	00000106 	br	8033920 <t_getname+0x1cc>
   }
   return 0;
 803391c:	0005883a 	mov	r2,zero
}
 8033920:	e037883a 	mov	sp,fp
 8033924:	dfc00117 	ldw	ra,4(sp)
 8033928:	df000017 	ldw	fp,0(sp)
 803392c:	dec00204 	addi	sp,sp,8
 8033930:	f800283a 	ret

08033934 <t_setsockopt>:
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 8033934:	defff704 	addi	sp,sp,-36
 8033938:	dfc00815 	stw	ra,32(sp)
 803393c:	df000715 	stw	fp,28(sp)
 8033940:	df000704 	addi	fp,sp,28
 8033944:	e13ffc15 	stw	r4,-16(fp)
 8033948:	e17ffb15 	stw	r5,-20(fp)
 803394c:	e1bffa15 	stw	r6,-24(fp)
 8033950:	e1fff915 	stw	r7,-28(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 8033954:	e0bffc17 	ldw	r2,-16(fp)
 8033958:	10bff804 	addi	r2,r2,-32
 803395c:	100490ba 	slli	r2,r2,2
 8033960:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033964:	008201b4 	movhi	r2,2054
 8033968:	10bf0b04 	addi	r2,r2,-980
 803396c:	e0bfff15 	stw	r2,-4(fp)
 8033970:	00000606 	br	803398c <t_setsockopt+0x58>
 8033974:	e0ffff17 	ldw	r3,-4(fp)
 8033978:	e0bffe17 	ldw	r2,-8(fp)
 803397c:	18800626 	beq	r3,r2,8033998 <t_setsockopt+0x64>
 8033980:	e0bfff17 	ldw	r2,-4(fp)
 8033984:	10800017 	ldw	r2,0(r2)
 8033988:	e0bfff15 	stw	r2,-4(fp)
 803398c:	e0bfff17 	ldw	r2,-4(fp)
 8033990:	103ff81e 	bne	r2,zero,8033974 <t_setsockopt+0x40>
 8033994:	00000106 	br	803399c <t_setsockopt+0x68>
 8033998:	0001883a 	nop
 803399c:	e0ffff17 	ldw	r3,-4(fp)
 80339a0:	e0bffe17 	ldw	r2,-8(fp)
 80339a4:	18800326 	beq	r3,r2,80339b4 <t_setsockopt+0x80>
 80339a8:	80301a80 	call	80301a8 <dtrap>
 80339ac:	00bfffc4 	movi	r2,-1
 80339b0:	00004b06 	br	8033ae0 <t_setsockopt+0x1ac>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 80339b4:	0009883a 	mov	r4,zero
 80339b8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   so->so_error = 0;
 80339bc:	e0bffe17 	ldw	r2,-8(fp)
 80339c0:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 80339c4:	e0bffb17 	ldw	r2,-20(fp)
 80339c8:	10800060 	cmpeqi	r2,r2,1
 80339cc:	10000e1e 	bne	r2,zero,8033a08 <t_setsockopt+0xd4>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
 80339d0:	e1bff917 	ldw	r6,-28(fp)
 80339d4:	e17ffa17 	ldw	r5,-24(fp)
 80339d8:	e13ffe17 	ldw	r4,-8(fp)
 80339dc:	8035c740 	call	8035c74 <sosetopt>
 80339e0:	e0bffd15 	stw	r2,-12(fp)
 80339e4:	e0bffd17 	ldw	r2,-12(fp)
 80339e8:	10003a26 	beq	r2,zero,8033ad4 <t_setsockopt+0x1a0>
      {
         so->so_error = err;
 80339ec:	e0bffe17 	ldw	r2,-8(fp)
 80339f0:	e0fffd17 	ldw	r3,-12(fp)
 80339f4:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
 80339f8:	0009883a 	mov	r4,zero
 80339fc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 8033a00:	00bfffc4 	movi	r2,-1
 8033a04:	00003606 	br	8033ae0 <t_setsockopt+0x1ac>
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
 8033a08:	e0bffe17 	ldw	r2,-8(fp)
 8033a0c:	10801f17 	ldw	r2,124(r2)
 8033a10:	10000f1e 	bne	r2,zero,8033a50 <t_setsockopt+0x11c>
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
 8033a14:	01000104 	movi	r4,4
 8033a18:	8030d080 	call	8030d08 <npalloc>
 8033a1c:	1007883a 	mov	r3,r2
 8033a20:	e0bffe17 	ldw	r2,-8(fp)
 8033a24:	10c01f15 	stw	r3,124(r2)
         if (!so->so_optsPack) 
 8033a28:	e0bffe17 	ldw	r2,-8(fp)
 8033a2c:	10801f17 	ldw	r2,124(r2)
 8033a30:	1000071e 	bne	r2,zero,8033a50 <t_setsockopt+0x11c>
         {
            so->so_error = ENOMEM;
 8033a34:	e0bffe17 	ldw	r2,-8(fp)
 8033a38:	00c00304 	movi	r3,12
 8033a3c:	10c00615 	stw	r3,24(r2)
            UNLOCK_NET_RESOURCE (NET_RESID);
 8033a40:	0009883a 	mov	r4,zero
 8033a44:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            return SOCKET_ERROR;
 8033a48:	00bfffc4 	movi	r2,-1
 8033a4c:	00002406 	br	8033ae0 <t_setsockopt+0x1ac>
         }
      }
      
      if (name == IP_TTL_OPT)
 8033a50:	e0bffa17 	ldw	r2,-24(fp)
 8033a54:	10800118 	cmpnei	r2,r2,4
 8033a58:	1000061e 	bne	r2,zero,8033a74 <t_setsockopt+0x140>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
 8033a5c:	e0bff917 	ldw	r2,-28(fp)
 8033a60:	10c00017 	ldw	r3,0(r2)
 8033a64:	e0bffe17 	ldw	r2,-8(fp)
 8033a68:	10801f17 	ldw	r2,124(r2)
 8033a6c:	10c00045 	stb	r3,1(r2)
 8033a70:	00001806 	br	8033ad4 <t_setsockopt+0x1a0>
      else
      if (name == IP_TOS)
 8033a74:	e0bffa17 	ldw	r2,-24(fp)
 8033a78:	108000d8 	cmpnei	r2,r2,3
 8033a7c:	1000061e 	bne	r2,zero,8033a98 <t_setsockopt+0x164>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
 8033a80:	e0bff917 	ldw	r2,-28(fp)
 8033a84:	10c00017 	ldw	r3,0(r2)
 8033a88:	e0bffe17 	ldw	r2,-8(fp)
 8033a8c:	10801f17 	ldw	r2,124(r2)
 8033a90:	10c00005 	stb	r3,0(r2)
 8033a94:	00000f06 	br	8033ad4 <t_setsockopt+0x1a0>
	   else
	   if (name == IP_SCOPEID)
 8033a98:	e0bffa17 	ldw	r2,-24(fp)
 8033a9c:	10800398 	cmpnei	r2,r2,14
 8033aa0:	1000081e 	bne	r2,zero,8033ac4 <t_setsockopt+0x190>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
 8033aa4:	e0bff917 	ldw	r2,-28(fp)
 8033aa8:	10800017 	ldw	r2,0(r2)
 8033aac:	1007883a 	mov	r3,r2
 8033ab0:	e0bffe17 	ldw	r2,-8(fp)
 8033ab4:	10801f17 	ldw	r2,124(r2)
 8033ab8:	18c03fcc 	andi	r3,r3,255
 8033abc:	10c00115 	stw	r3,4(r2)
 8033ac0:	00000406 	br	8033ad4 <t_setsockopt+0x1a0>
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 8033ac4:	0009883a 	mov	r4,zero
 8033ac8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 8033acc:	00bfffc4 	movi	r2,-1
 8033ad0:	00000306 	br	8033ae0 <t_setsockopt+0x1ac>
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
 8033ad4:	0009883a 	mov	r4,zero
 8033ad8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return 0;
 8033adc:	0005883a 	mov	r2,zero
}
 8033ae0:	e037883a 	mov	sp,fp
 8033ae4:	dfc00117 	ldw	ra,4(sp)
 8033ae8:	df000017 	ldw	fp,0(sp)
 8033aec:	dec00204 	addi	sp,sp,8
 8033af0:	f800283a 	ret

08033af4 <t_getsockopt>:
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 8033af4:	defff704 	addi	sp,sp,-36
 8033af8:	dfc00815 	stw	ra,32(sp)
 8033afc:	df000715 	stw	fp,28(sp)
 8033b00:	df000704 	addi	fp,sp,28
 8033b04:	e13ffc15 	stw	r4,-16(fp)
 8033b08:	e17ffb15 	stw	r5,-20(fp)
 8033b0c:	e1bffa15 	stw	r6,-24(fp)
 8033b10:	e1fff915 	stw	r7,-28(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 8033b14:	e0bffc17 	ldw	r2,-16(fp)
 8033b18:	10bff804 	addi	r2,r2,-32
 8033b1c:	100490ba 	slli	r2,r2,2
 8033b20:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8033b24:	008201b4 	movhi	r2,2054
 8033b28:	10bf0b04 	addi	r2,r2,-980
 8033b2c:	e0bfff15 	stw	r2,-4(fp)
 8033b30:	00000606 	br	8033b4c <t_getsockopt+0x58>
 8033b34:	e0ffff17 	ldw	r3,-4(fp)
 8033b38:	e0bffe17 	ldw	r2,-8(fp)
 8033b3c:	18800626 	beq	r3,r2,8033b58 <t_getsockopt+0x64>
 8033b40:	e0bfff17 	ldw	r2,-4(fp)
 8033b44:	10800017 	ldw	r2,0(r2)
 8033b48:	e0bfff15 	stw	r2,-4(fp)
 8033b4c:	e0bfff17 	ldw	r2,-4(fp)
 8033b50:	103ff81e 	bne	r2,zero,8033b34 <t_getsockopt+0x40>
 8033b54:	00000106 	br	8033b5c <t_getsockopt+0x68>
 8033b58:	0001883a 	nop
 8033b5c:	e0ffff17 	ldw	r3,-4(fp)
 8033b60:	e0bffe17 	ldw	r2,-8(fp)
 8033b64:	18800326 	beq	r3,r2,8033b74 <t_getsockopt+0x80>
 8033b68:	80301a80 	call	80301a8 <dtrap>
 8033b6c:	00bfffc4 	movi	r2,-1
 8033b70:	00003d06 	br	8033c68 <t_getsockopt+0x174>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 8033b74:	0009883a 	mov	r4,zero
 8033b78:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 8033b7c:	e0bffb17 	ldw	r2,-20(fp)
 8033b80:	10800060 	cmpeqi	r2,r2,1
 8033b84:	10000e1e 	bne	r2,zero,8033bc0 <t_getsockopt+0xcc>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
 8033b88:	e1bff917 	ldw	r6,-28(fp)
 8033b8c:	e17ffa17 	ldw	r5,-24(fp)
 8033b90:	e13ffe17 	ldw	r4,-8(fp)
 8033b94:	803619c0 	call	803619c <sogetopt>
 8033b98:	e0bffd15 	stw	r2,-12(fp)
 8033b9c:	e0bffd17 	ldw	r2,-12(fp)
 8033ba0:	10002c26 	beq	r2,zero,8033c54 <t_getsockopt+0x160>
      {
         so->so_error = err;
 8033ba4:	e0bffe17 	ldw	r2,-8(fp)
 8033ba8:	e0fffd17 	ldw	r3,-12(fp)
 8033bac:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
 8033bb0:	0009883a 	mov	r4,zero
 8033bb4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 8033bb8:	00bfffc4 	movi	r2,-1
 8033bbc:	00002a06 	br	8033c68 <t_getsockopt+0x174>
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
 8033bc0:	e0bffa17 	ldw	r2,-24(fp)
 8033bc4:	10800118 	cmpnei	r2,r2,4
 8033bc8:	10000e1e 	bne	r2,zero,8033c04 <t_getsockopt+0x110>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
 8033bcc:	e0bffe17 	ldw	r2,-8(fp)
 8033bd0:	10801f17 	ldw	r2,124(r2)
 8033bd4:	1000041e 	bne	r2,zero,8033be8 <t_getsockopt+0xf4>
 8033bd8:	e0bff917 	ldw	r2,-28(fp)
 8033bdc:	00c01004 	movi	r3,64
 8033be0:	10c00015 	stw	r3,0(r2)
 8033be4:	00001b06 	br	8033c54 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
 8033be8:	e0bffe17 	ldw	r2,-8(fp)
 8033bec:	10801f17 	ldw	r2,124(r2)
 8033bf0:	10800043 	ldbu	r2,1(r2)
 8033bf4:	10c03fcc 	andi	r3,r2,255
 8033bf8:	e0bff917 	ldw	r2,-28(fp)
 8033bfc:	10c00015 	stw	r3,0(r2)
 8033c00:	00001406 	br	8033c54 <t_getsockopt+0x160>
      }
      else if (name == IP_TOS)
 8033c04:	e0bffa17 	ldw	r2,-24(fp)
 8033c08:	108000d8 	cmpnei	r2,r2,3
 8033c0c:	10000d1e 	bne	r2,zero,8033c44 <t_getsockopt+0x150>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
 8033c10:	e0bffe17 	ldw	r2,-8(fp)
 8033c14:	10801f17 	ldw	r2,124(r2)
 8033c18:	1000031e 	bne	r2,zero,8033c28 <t_getsockopt+0x134>
 8033c1c:	e0bff917 	ldw	r2,-28(fp)
 8033c20:	10000015 	stw	zero,0(r2)
 8033c24:	00000b06 	br	8033c54 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
 8033c28:	e0bffe17 	ldw	r2,-8(fp)
 8033c2c:	10801f17 	ldw	r2,124(r2)
 8033c30:	10800003 	ldbu	r2,0(r2)
 8033c34:	10c03fcc 	andi	r3,r2,255
 8033c38:	e0bff917 	ldw	r2,-28(fp)
 8033c3c:	10c00015 	stw	r3,0(r2)
 8033c40:	00000406 	br	8033c54 <t_getsockopt+0x160>
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 8033c44:	0009883a 	mov	r4,zero
 8033c48:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 8033c4c:	00bfffc4 	movi	r2,-1
 8033c50:	00000506 	br	8033c68 <t_getsockopt+0x174>
      }
   }   
   so->so_error = 0;
 8033c54:	e0bffe17 	ldw	r2,-8(fp)
 8033c58:	10000615 	stw	zero,24(r2)

   UNLOCK_NET_RESOURCE (NET_RESID);
 8033c5c:	0009883a 	mov	r4,zero
 8033c60:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return 0;
 8033c64:	0005883a 	mov	r2,zero
}
 8033c68:	e037883a 	mov	sp,fp
 8033c6c:	dfc00117 	ldw	ra,4(sp)
 8033c70:	df000017 	ldw	fp,0(sp)
 8033c74:	dec00204 	addi	sp,sp,8
 8033c78:	f800283a 	ret

08033c7c <t_recv>:
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 8033c7c:	defff604 	addi	sp,sp,-40
 8033c80:	dfc00915 	stw	ra,36(sp)
 8033c84:	df000815 	stw	fp,32(sp)
 8033c88:	df000804 	addi	fp,sp,32
 8033c8c:	e13ffc15 	stw	r4,-16(fp)
 8033c90:	e17ffb15 	stw	r5,-20(fp)
 8033c94:	e1bffa15 	stw	r6,-24(fp)
 8033c98:	e1fff915 	stw	r7,-28(fp)
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
 8033c9c:	e0bffa17 	ldw	r2,-24(fp)
 8033ca0:	e0bfff15 	stw	r2,-4(fp)

   so = LONG2SO(s);
 8033ca4:	e0bffc17 	ldw	r2,-16(fp)
 8033ca8:	10bff804 	addi	r2,r2,-32
 8033cac:	100490ba 	slli	r2,r2,2
 8033cb0:	e0bffe15 	stw	r2,-8(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 8033cb4:	e0bffe17 	ldw	r2,-8(fp)
 8033cb8:	1080088b 	ldhu	r2,34(r2)
 8033cbc:	10bfffcc 	andi	r2,r2,65535
 8033cc0:	1080038c 	andi	r2,r2,14
 8033cc4:	108000a0 	cmpeqi	r2,r2,2
 8033cc8:	1000051e 	bne	r2,zero,8033ce0 <t_recv+0x64>
   {
      so->so_error = EPIPE;
 8033ccc:	e0bffe17 	ldw	r2,-8(fp)
 8033cd0:	00c00804 	movi	r3,32
 8033cd4:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 8033cd8:	00bfffc4 	movi	r2,-1
 8033cdc:	00001906 	br	8033d44 <t_recv+0xc8>
   }
   so->so_error = 0;
 8033ce0:	e0bffe17 	ldw	r2,-8(fp)
 8033ce4:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 8033ce8:	0009883a 	mov	r4,zero
 8033cec:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
 8033cf0:	e0fffa04 	addi	r3,fp,-24
 8033cf4:	e0bff917 	ldw	r2,-28(fp)
 8033cf8:	d8800015 	stw	r2,0(sp)
 8033cfc:	180f883a 	mov	r7,r3
 8033d00:	e1bffb17 	ldw	r6,-20(fp)
 8033d04:	000b883a 	mov	r5,zero
 8033d08:	e13ffe17 	ldw	r4,-8(fp)
 8033d0c:	80353880 	call	8035388 <soreceive>
 8033d10:	e0bffd15 	stw	r2,-12(fp)
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
 8033d14:	0009883a 	mov	r4,zero
 8033d18:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if(err)
 8033d1c:	e0bffd17 	ldw	r2,-12(fp)
 8033d20:	10000526 	beq	r2,zero,8033d38 <t_recv+0xbc>
   {
      so->so_error = err;
 8033d24:	e0bffe17 	ldw	r2,-8(fp)
 8033d28:	e0fffd17 	ldw	r3,-12(fp)
 8033d2c:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 8033d30:	00bfffc4 	movi	r2,-1
 8033d34:	00000306 	br	8033d44 <t_recv+0xc8>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
 8033d38:	e0bffa17 	ldw	r2,-24(fp)
 8033d3c:	e0ffff17 	ldw	r3,-4(fp)
 8033d40:	1885c83a 	sub	r2,r3,r2
}
 8033d44:	e037883a 	mov	sp,fp
 8033d48:	dfc00117 	ldw	ra,4(sp)
 8033d4c:	df000017 	ldw	fp,0(sp)
 8033d50:	dec00204 	addi	sp,sp,8
 8033d54:	f800283a 	ret

08033d58 <t_recvfrom>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 8033d58:	defff404 	addi	sp,sp,-48
 8033d5c:	dfc00b15 	stw	ra,44(sp)
 8033d60:	df000a15 	stw	fp,40(sp)
 8033d64:	df000a04 	addi	fp,sp,40
 8033d68:	e13ffa15 	stw	r4,-24(fp)
 8033d6c:	e17ff915 	stw	r5,-28(fp)
 8033d70:	e1bff815 	stw	r6,-32(fp)
 8033d74:	e1fff715 	stw	r7,-36(fp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
 8033d78:	e03ffb15 	stw	zero,-20(fp)
   int   err;
   int   sendlen = len;
 8033d7c:	e0bff817 	ldw	r2,-32(fp)
 8033d80:	e0bffe15 	stw	r2,-8(fp)

   so = LONG2SO(s);
 8033d84:	e0bffa17 	ldw	r2,-24(fp)
 8033d88:	10bff804 	addi	r2,r2,-32
 8033d8c:	100490ba 	slli	r2,r2,2
 8033d90:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 8033d94:	008201b4 	movhi	r2,2054
 8033d98:	10bf0b04 	addi	r2,r2,-980
 8033d9c:	e0bfff15 	stw	r2,-4(fp)
 8033da0:	00000606 	br	8033dbc <t_recvfrom+0x64>
 8033da4:	e0ffff17 	ldw	r3,-4(fp)
 8033da8:	e0bffd17 	ldw	r2,-12(fp)
 8033dac:	18800626 	beq	r3,r2,8033dc8 <t_recvfrom+0x70>
 8033db0:	e0bfff17 	ldw	r2,-4(fp)
 8033db4:	10800017 	ldw	r2,0(r2)
 8033db8:	e0bfff15 	stw	r2,-4(fp)
 8033dbc:	e0bfff17 	ldw	r2,-4(fp)
 8033dc0:	103ff81e 	bne	r2,zero,8033da4 <t_recvfrom+0x4c>
 8033dc4:	00000106 	br	8033dcc <t_recvfrom+0x74>
 8033dc8:	0001883a 	nop
 8033dcc:	e0ffff17 	ldw	r3,-4(fp)
 8033dd0:	e0bffd17 	ldw	r2,-12(fp)
 8033dd4:	18800326 	beq	r3,r2,8033de4 <t_recvfrom+0x8c>
 8033dd8:	80301a80 	call	80301a8 <dtrap>
 8033ddc:	00bfffc4 	movi	r2,-1
 8033de0:	00002706 	br	8033e80 <t_recvfrom+0x128>
   so->so_error = 0;
 8033de4:	e0bffd17 	ldw	r2,-12(fp)
 8033de8:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 8033dec:	0009883a 	mov	r4,zero
 8033df0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
 8033df4:	e13ff804 	addi	r4,fp,-32
 8033df8:	e0fffb04 	addi	r3,fp,-20
 8033dfc:	e0bff717 	ldw	r2,-36(fp)
 8033e00:	d8800015 	stw	r2,0(sp)
 8033e04:	200f883a 	mov	r7,r4
 8033e08:	e1bff917 	ldw	r6,-28(fp)
 8033e0c:	180b883a 	mov	r5,r3
 8033e10:	e13ffd17 	ldw	r4,-12(fp)
 8033e14:	80353880 	call	8035388 <soreceive>
 8033e18:	e0bffc15 	stw	r2,-16(fp)

   /* copy sender info from mbuf to sockaddr */
   if (sender)
 8033e1c:	e0bffb17 	ldw	r2,-20(fp)
 8033e20:	10000b26 	beq	r2,zero,8033e50 <t_recvfrom+0xf8>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
 8033e24:	e0bffb17 	ldw	r2,-20(fp)
 8033e28:	10c00317 	ldw	r3,12(r2)
 8033e2c:	e0800317 	ldw	r2,12(fp)
 8033e30:	10800017 	ldw	r2,0(r2)
 8033e34:	100d883a 	mov	r6,r2
 8033e38:	180b883a 	mov	r5,r3
 8033e3c:	e1000217 	ldw	r4,8(fp)
 8033e40:	80037cc0 	call	80037cc <memcpy>
      m_freem (sender);
 8033e44:	e0bffb17 	ldw	r2,-20(fp)
 8033e48:	1009883a 	mov	r4,r2
 8033e4c:	80311e00 	call	80311e0 <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 8033e50:	0009883a 	mov	r4,zero
 8033e54:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if(err)
 8033e58:	e0bffc17 	ldw	r2,-16(fp)
 8033e5c:	10000526 	beq	r2,zero,8033e74 <t_recvfrom+0x11c>
   {
      so->so_error = err;
 8033e60:	e0bffd17 	ldw	r2,-12(fp)
 8033e64:	e0fffc17 	ldw	r3,-16(fp)
 8033e68:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033e6c:	00bfffc4 	movi	r2,-1
 8033e70:	00000306 	br	8033e80 <t_recvfrom+0x128>
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
 8033e74:	e0bff817 	ldw	r2,-32(fp)
 8033e78:	e0fffe17 	ldw	r3,-8(fp)
 8033e7c:	1885c83a 	sub	r2,r3,r2
}
 8033e80:	e037883a 	mov	sp,fp
 8033e84:	dfc00117 	ldw	ra,4(sp)
 8033e88:	df000017 	ldw	fp,0(sp)
 8033e8c:	dec00204 	addi	sp,sp,8
 8033e90:	f800283a 	ret

08033e94 <t_sendto>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 8033e94:	defff404 	addi	sp,sp,-48
 8033e98:	dfc00b15 	stw	ra,44(sp)
 8033e9c:	df000a15 	stw	fp,40(sp)
 8033ea0:	df000a04 	addi	fp,sp,40
 8033ea4:	e13ffa15 	stw	r4,-24(fp)
 8033ea8:	e17ff915 	stw	r5,-28(fp)
 8033eac:	e1bff815 	stw	r6,-32(fp)
 8033eb0:	e1fff715 	stw	r7,-36(fp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 8033eb4:	e0bffa17 	ldw	r2,-24(fp)
 8033eb8:	10bff804 	addi	r2,r2,-32
 8033ebc:	100490ba 	slli	r2,r2,2
 8033ec0:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 8033ec4:	008201b4 	movhi	r2,2054
 8033ec8:	10bf0b04 	addi	r2,r2,-980
 8033ecc:	e0bffe15 	stw	r2,-8(fp)
 8033ed0:	00000606 	br	8033eec <t_sendto+0x58>
 8033ed4:	e0fffe17 	ldw	r3,-8(fp)
 8033ed8:	e0bffd17 	ldw	r2,-12(fp)
 8033edc:	18800626 	beq	r3,r2,8033ef8 <t_sendto+0x64>
 8033ee0:	e0bffe17 	ldw	r2,-8(fp)
 8033ee4:	10800017 	ldw	r2,0(r2)
 8033ee8:	e0bffe15 	stw	r2,-8(fp)
 8033eec:	e0bffe17 	ldw	r2,-8(fp)
 8033ef0:	103ff81e 	bne	r2,zero,8033ed4 <t_sendto+0x40>
 8033ef4:	00000106 	br	8033efc <t_sendto+0x68>
 8033ef8:	0001883a 	nop
 8033efc:	e0fffe17 	ldw	r3,-8(fp)
 8033f00:	e0bffd17 	ldw	r2,-12(fp)
 8033f04:	18800326 	beq	r3,r2,8033f14 <t_sendto+0x80>
 8033f08:	80301a80 	call	80301a8 <dtrap>
 8033f0c:	00bfffc4 	movi	r2,-1
 8033f10:	00005a06 	br	803407c <t_sendto+0x1e8>
   so->so_error = 0;
 8033f14:	e0bffd17 	ldw	r2,-12(fp)
 8033f18:	10000615 	stw	zero,24(r2)

   switch (so->so_type)
 8033f1c:	e0bffd17 	ldw	r2,-12(fp)
 8033f20:	10800983 	ldbu	r2,38(r2)
 8033f24:	10803fcc 	andi	r2,r2,255
 8033f28:	1080201c 	xori	r2,r2,128
 8033f2c:	10bfe004 	addi	r2,r2,-128
 8033f30:	10c000e0 	cmpeqi	r3,r2,3
 8033f34:	1800101e 	bne	r3,zero,8033f78 <t_sendto+0xe4>
 8033f38:	10c00108 	cmpgei	r3,r2,4
 8033f3c:	1800151e 	bne	r3,zero,8033f94 <t_sendto+0x100>
 8033f40:	10c00060 	cmpeqi	r3,r2,1
 8033f44:	1800031e 	bne	r3,zero,8033f54 <t_sendto+0xc0>
 8033f48:	108000a0 	cmpeqi	r2,r2,2
 8033f4c:	1000071e 	bne	r2,zero,8033f6c <t_sendto+0xd8>
 8033f50:	00001006 	br	8033f94 <t_sendto+0x100>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
 8033f54:	e1fff717 	ldw	r7,-36(fp)
 8033f58:	e1bff817 	ldw	r6,-32(fp)
 8033f5c:	e17ff917 	ldw	r5,-28(fp)
 8033f60:	e13ffa17 	ldw	r4,-24(fp)
 8033f64:	80340900 	call	8034090 <t_send>
 8033f68:	00004406 	br	803407c <t_sendto+0x1e8>
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
 8033f6c:	80480280 	call	8048028 <udp_maxalloc>
 8033f70:	e0bffb15 	stw	r2,-20(fp)
      break;
 8033f74:	00000d06 	br	8033fac <t_sendto+0x118>
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 8033f78:	e0bffd17 	ldw	r2,-12(fp)
 8033f7c:	10800417 	ldw	r2,16(r2)
 8033f80:	1088000c 	andi	r2,r2,8192
 8033f84:	1009883a 	mov	r4,r2
 8033f88:	8046d740 	call	8046d74 <ip_raw_maxalloc>
 8033f8c:	e0bffb15 	stw	r2,-20(fp)
      break;
 8033f90:	00000606 	br	8033fac <t_sendto+0x118>
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
 8033f94:	80301a80 	call	80301a8 <dtrap>
      so->so_error = EFAULT;
 8033f98:	e0bffd17 	ldw	r2,-12(fp)
 8033f9c:	00c00384 	movi	r3,14
 8033fa0:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033fa4:	00bfffc4 	movi	r2,-1
 8033fa8:	00003406 	br	803407c <t_sendto+0x1e8>
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
 8033fac:	e0fffb17 	ldw	r3,-20(fp)
 8033fb0:	e0bff817 	ldw	r2,-32(fp)
 8033fb4:	1880050e 	bge	r3,r2,8033fcc <t_sendto+0x138>
   {
      so->so_error = EMSGSIZE;
 8033fb8:	e0bffd17 	ldw	r2,-12(fp)
 8033fbc:	00c01e84 	movi	r3,122
 8033fc0:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8033fc4:	00bfffc4 	movi	r2,-1
 8033fc8:	00002c06 	br	803407c <t_sendto+0x1e8>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
 8033fcc:	e0800217 	ldw	r2,8(fp)
 8033fd0:	10000c26 	beq	r2,zero,8034004 <t_sendto+0x170>
   {
      name = sockargs(to, tolen, MT_SONAME);
 8033fd4:	01800244 	movi	r6,9
 8033fd8:	e1400317 	ldw	r5,12(fp)
 8033fdc:	e1000217 	ldw	r4,8(fp)
 8033fe0:	80344240 	call	8034424 <sockargs>
 8033fe4:	e0bfff15 	stw	r2,-4(fp)
      if(name == NULL)
 8033fe8:	e0bfff17 	ldw	r2,-4(fp)
 8033fec:	1000061e 	bne	r2,zero,8034008 <t_sendto+0x174>
      {
         so->so_error = ENOMEM;
 8033ff0:	e0bffd17 	ldw	r2,-12(fp)
 8033ff4:	00c00304 	movi	r3,12
 8033ff8:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 8033ffc:	00bfffc4 	movi	r2,-1
 8034000:	00001e06 	br	803407c <t_sendto+0x1e8>
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
 8034004:	e03fff15 	stw	zero,-4(fp)
   
   sendlen = len;
 8034008:	e0bff817 	ldw	r2,-32(fp)
 803400c:	e0bffb15 	stw	r2,-20(fp)

   LOCK_NET_RESOURCE(NET_RESID);
 8034010:	0009883a 	mov	r4,zero
 8034014:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
 8034018:	e0fffb04 	addi	r3,fp,-20
 803401c:	e0bff717 	ldw	r2,-36(fp)
 8034020:	d8800015 	stw	r2,0(sp)
 8034024:	180f883a 	mov	r7,r3
 8034028:	e1bff917 	ldw	r6,-28(fp)
 803402c:	e17fff17 	ldw	r5,-4(fp)
 8034030:	e13ffd17 	ldw	r4,-12(fp)
 8034034:	8034e280 	call	8034e28 <sosend>
 8034038:	e0bffc15 	stw	r2,-16(fp)

   if (name)
 803403c:	e0bfff17 	ldw	r2,-4(fp)
 8034040:	10000226 	beq	r2,zero,803404c <t_sendto+0x1b8>
      m_freem(name);
 8034044:	e13fff17 	ldw	r4,-4(fp)
 8034048:	80311e00 	call	80311e0 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 803404c:	0009883a 	mov	r4,zero
 8034050:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (err != 0)
 8034054:	e0bffc17 	ldw	r2,-16(fp)
 8034058:	10000526 	beq	r2,zero,8034070 <t_sendto+0x1dc>
   {
      so->so_error = err;
 803405c:	e0bffd17 	ldw	r2,-12(fp)
 8034060:	e0fffc17 	ldw	r3,-16(fp)
 8034064:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8034068:	00bfffc4 	movi	r2,-1
 803406c:	00000306 	br	803407c <t_sendto+0x1e8>
   }

   return (len - sendlen);
 8034070:	e0bffb17 	ldw	r2,-20(fp)
 8034074:	e0fff817 	ldw	r3,-32(fp)
 8034078:	1885c83a 	sub	r2,r3,r2
}
 803407c:	e037883a 	mov	sp,fp
 8034080:	dfc00117 	ldw	ra,4(sp)
 8034084:	df000017 	ldw	fp,0(sp)
 8034088:	dec00204 	addi	sp,sp,8
 803408c:	f800283a 	ret

08034090 <t_send>:
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 8034090:	defff104 	addi	sp,sp,-60
 8034094:	dfc00e15 	stw	ra,56(sp)
 8034098:	df000d15 	stw	fp,52(sp)
 803409c:	df000d04 	addi	fp,sp,52
 80340a0:	e13ff815 	stw	r4,-32(fp)
 80340a4:	e17ff715 	stw	r5,-36(fp)
 80340a8:	e1bff615 	stw	r6,-40(fp)
 80340ac:	e1fff515 	stw	r7,-44(fp)
   struct socket *   so;
   int   e;       /* error holder */
   int   total_sent  =  0;
 80340b0:	e03fff15 	stw	zero,-4(fp)
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 80340b4:	e0bff817 	ldw	r2,-32(fp)
 80340b8:	10bff804 	addi	r2,r2,-32
 80340bc:	100490ba 	slli	r2,r2,2
 80340c0:	e0bffd15 	stw	r2,-12(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 80340c4:	e0bffd17 	ldw	r2,-12(fp)
 80340c8:	1080088b 	ldhu	r2,34(r2)
 80340cc:	10bfffcc 	andi	r2,r2,65535
 80340d0:	1080038c 	andi	r2,r2,14
 80340d4:	108000a0 	cmpeqi	r2,r2,2
 80340d8:	1000051e 	bne	r2,zero,80340f0 <t_send+0x60>
   {
      so->so_error = EPIPE;
 80340dc:	e0bffd17 	ldw	r2,-12(fp)
 80340e0:	00c00804 	movi	r3,32
 80340e4:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80340e8:	00bfffc4 	movi	r2,-1
 80340ec:	00006306 	br	803427c <t_send+0x1ec>
   }
   so->so_error = 0;
 80340f0:	e0bffd17 	ldw	r2,-12(fp)
 80340f4:	10000615 	stw	zero,24(r2)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
 80340f8:	e0bffd17 	ldw	r2,-12(fp)
 80340fc:	10800983 	ldbu	r2,38(r2)
 8034100:	10803fcc 	andi	r2,r2,255
 8034104:	1080201c 	xori	r2,r2,128
 8034108:	10bfe004 	addi	r2,r2,-128
 803410c:	10800060 	cmpeqi	r2,r2,1
 8034110:	1000081e 	bne	r2,zero,8034134 <t_send+0xa4>
      return(t_sendto(s, buf, len, flags, NULL, 0));
 8034114:	d8000115 	stw	zero,4(sp)
 8034118:	d8000015 	stw	zero,0(sp)
 803411c:	e1fff517 	ldw	r7,-44(fp)
 8034120:	e1bff617 	ldw	r6,-40(fp)
 8034124:	e17ff717 	ldw	r5,-36(fp)
 8034128:	e13ff817 	ldw	r4,-32(fp)
 803412c:	8033e940 	call	8033e94 <t_sendto>
 8034130:	00005206 	br	803427c <t_send+0x1ec>

   maxpkt = TCP_MSS;
 8034134:	00816d04 	movi	r2,1460
 8034138:	e0bffe15 	stw	r2,-8(fp)
   if(so->so_pcb)
 803413c:	e0bffd17 	ldw	r2,-12(fp)
 8034140:	10800117 	ldw	r2,4(r2)
 8034144:	10004826 	beq	r2,zero,8034268 <t_send+0x1d8>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
 8034148:	e0bffd17 	ldw	r2,-12(fp)
 803414c:	10800117 	ldw	r2,4(r2)
 8034150:	10800917 	ldw	r2,36(r2)
 8034154:	e0bffc15 	stw	r2,-16(fp)
      if(tp->t_maxseg)              /* Make sure it's set */
 8034158:	e0bffc17 	ldw	r2,-16(fp)
 803415c:	10800a0b 	ldhu	r2,40(r2)
 8034160:	10bfffcc 	andi	r2,r2,65535
 8034164:	10004026 	beq	r2,zero,8034268 <t_send+0x1d8>
         maxpkt = tp->t_maxseg;
 8034168:	e0bffc17 	ldw	r2,-16(fp)
 803416c:	10800a0b 	ldhu	r2,40(r2)
 8034170:	10bfffcc 	andi	r2,r2,65535
 8034174:	e0bffe15 	stw	r2,-8(fp)
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 8034178:	00003b06 	br	8034268 <t_send+0x1d8>
   {
      if (len > maxpkt)
 803417c:	e0bff617 	ldw	r2,-40(fp)
 8034180:	e0fffe17 	ldw	r3,-8(fp)
 8034184:	1880030e 	bge	r3,r2,8034194 <t_send+0x104>
         sendlen = maxpkt;  /* take biggest block we can */
 8034188:	e0bffe17 	ldw	r2,-8(fp)
 803418c:	e0bff915 	stw	r2,-28(fp)
 8034190:	00000206 	br	803419c <t_send+0x10c>
      else
         sendlen = len;
 8034194:	e0bff617 	ldw	r2,-40(fp)
 8034198:	e0bff915 	stw	r2,-28(fp)
      sent = sendlen;
 803419c:	e0bff917 	ldw	r2,-28(fp)
 80341a0:	e0bffb15 	stw	r2,-20(fp)

      LOCK_NET_RESOURCE(NET_RESID);
 80341a4:	0009883a 	mov	r4,zero
 80341a8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
 80341ac:	e0fff904 	addi	r3,fp,-28
 80341b0:	e0bff517 	ldw	r2,-44(fp)
 80341b4:	d8800015 	stw	r2,0(sp)
 80341b8:	180f883a 	mov	r7,r3
 80341bc:	e1bff717 	ldw	r6,-36(fp)
 80341c0:	000b883a 	mov	r5,zero
 80341c4:	e13ffd17 	ldw	r4,-12(fp)
 80341c8:	8034e280 	call	8034e28 <sosend>
 80341cc:	e0bffa15 	stw	r2,-24(fp)
      UNLOCK_NET_RESOURCE(NET_RESID);
 80341d0:	0009883a 	mov	r4,zero
 80341d4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
 80341d8:	e0bffa17 	ldw	r2,-24(fp)
 80341dc:	10001026 	beq	r2,zero,8034220 <t_send+0x190>
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
 80341e0:	e0bffa17 	ldw	r2,-24(fp)
 80341e4:	10801a60 	cmpeqi	r2,r2,105
 80341e8:	1000031e 	bne	r2,zero,80341f8 <t_send+0x168>
 80341ec:	e0bffa17 	ldw	r2,-24(fp)
 80341f0:	108002d8 	cmpnei	r2,r2,11
 80341f4:	1000051e 	bne	r2,zero,803420c <t_send+0x17c>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
 80341f8:	e0bfff17 	ldw	r2,-4(fp)
 80341fc:	10000326 	beq	r2,zero,803420c <t_send+0x17c>
            {
               so->so_error = 0;
 8034200:	e0bffd17 	ldw	r2,-12(fp)
 8034204:	10000615 	stw	zero,24(r2)
               break;      /* break out of while(len) loop */
 8034208:	00001b06 	br	8034278 <t_send+0x1e8>
            }
         }
         so->so_error = e;
 803420c:	e0bffd17 	ldw	r2,-12(fp)
 8034210:	e0fffa17 	ldw	r3,-24(fp)
 8034214:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 8034218:	00bfffc4 	movi	r2,-1
 803421c:	00001706 	br	803427c <t_send+0x1ec>
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
 8034220:	e0bff917 	ldw	r2,-28(fp)
 8034224:	1000131e 	bne	r2,zero,8034274 <t_send+0x1e4>
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
 8034228:	e0bff917 	ldw	r2,-28(fp)
 803422c:	e0fffb17 	ldw	r3,-20(fp)
 8034230:	1885c83a 	sub	r2,r3,r2
 8034234:	e0bffb15 	stw	r2,-20(fp)
      buf += sent;
 8034238:	e0bffb17 	ldw	r2,-20(fp)
 803423c:	e0fff717 	ldw	r3,-36(fp)
 8034240:	1885883a 	add	r2,r3,r2
 8034244:	e0bff715 	stw	r2,-36(fp)
      len -= sent;
 8034248:	e0fff617 	ldw	r3,-40(fp)
 803424c:	e0bffb17 	ldw	r2,-20(fp)
 8034250:	1885c83a 	sub	r2,r3,r2
 8034254:	e0bff615 	stw	r2,-40(fp)
      total_sent += sent;
 8034258:	e0ffff17 	ldw	r3,-4(fp)
 803425c:	e0bffb17 	ldw	r2,-20(fp)
 8034260:	1885883a 	add	r2,r3,r2
 8034264:	e0bfff15 	stw	r2,-4(fp)
   while (len)
 8034268:	e0bff617 	ldw	r2,-40(fp)
 803426c:	103fc31e 	bne	r2,zero,803417c <t_send+0xec>
 8034270:	00000106 	br	8034278 <t_send+0x1e8>
         break;         /* break out of while(len) loop */
 8034274:	0001883a 	nop
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
 8034278:	e0bfff17 	ldw	r2,-4(fp)
}
 803427c:	e037883a 	mov	sp,fp
 8034280:	dfc00117 	ldw	ra,4(sp)
 8034284:	df000017 	ldw	fp,0(sp)
 8034288:	dec00204 	addi	sp,sp,8
 803428c:	f800283a 	ret

08034290 <t_shutdown>:
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 8034290:	defff904 	addi	sp,sp,-28
 8034294:	dfc00615 	stw	ra,24(sp)
 8034298:	df000515 	stw	fp,20(sp)
 803429c:	df000504 	addi	fp,sp,20
 80342a0:	e13ffc15 	stw	r4,-16(fp)
 80342a4:	e17ffb15 	stw	r5,-20(fp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 80342a8:	e0bffc17 	ldw	r2,-16(fp)
 80342ac:	10bff804 	addi	r2,r2,-32
 80342b0:	100490ba 	slli	r2,r2,2
 80342b4:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 80342b8:	008201b4 	movhi	r2,2054
 80342bc:	10bf0b04 	addi	r2,r2,-980
 80342c0:	e0bfff15 	stw	r2,-4(fp)
 80342c4:	00000606 	br	80342e0 <t_shutdown+0x50>
 80342c8:	e0ffff17 	ldw	r3,-4(fp)
 80342cc:	e0bffe17 	ldw	r2,-8(fp)
 80342d0:	18800626 	beq	r3,r2,80342ec <t_shutdown+0x5c>
 80342d4:	e0bfff17 	ldw	r2,-4(fp)
 80342d8:	10800017 	ldw	r2,0(r2)
 80342dc:	e0bfff15 	stw	r2,-4(fp)
 80342e0:	e0bfff17 	ldw	r2,-4(fp)
 80342e4:	103ff81e 	bne	r2,zero,80342c8 <t_shutdown+0x38>
 80342e8:	00000106 	br	80342f0 <t_shutdown+0x60>
 80342ec:	0001883a 	nop
 80342f0:	e0ffff17 	ldw	r3,-4(fp)
 80342f4:	e0bffe17 	ldw	r2,-8(fp)
 80342f8:	18800326 	beq	r3,r2,8034308 <t_shutdown+0x78>
 80342fc:	80301a80 	call	80301a8 <dtrap>
 8034300:	00bfffc4 	movi	r2,-1
 8034304:	00001206 	br	8034350 <t_shutdown+0xc0>
   so->so_error = 0;
 8034308:	e0bffe17 	ldw	r2,-8(fp)
 803430c:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
 8034310:	0009883a 	mov	r4,zero
 8034314:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
 8034318:	e17ffb17 	ldw	r5,-20(fp)
 803431c:	e13ffe17 	ldw	r4,-8(fp)
 8034320:	8035ae00 	call	8035ae0 <soshutdown>
 8034324:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8034328:	0009883a 	mov	r4,zero
 803432c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (err != 0)
 8034330:	e0bffd17 	ldw	r2,-12(fp)
 8034334:	10000526 	beq	r2,zero,803434c <t_shutdown+0xbc>
   {
      so->so_error = err;
 8034338:	e0bffe17 	ldw	r2,-8(fp)
 803433c:	e0fffd17 	ldw	r3,-12(fp)
 8034340:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8034344:	00bfffc4 	movi	r2,-1
 8034348:	00000106 	br	8034350 <t_shutdown+0xc0>
   }
   return 0;
 803434c:	0005883a 	mov	r2,zero
}
 8034350:	e037883a 	mov	sp,fp
 8034354:	dfc00117 	ldw	ra,4(sp)
 8034358:	df000017 	ldw	fp,0(sp)
 803435c:	dec00204 	addi	sp,sp,8
 8034360:	f800283a 	ret

08034364 <t_socketclose>:
 * RETURNS: 
 */

int
t_socketclose(long s)
{
 8034364:	defffa04 	addi	sp,sp,-24
 8034368:	dfc00515 	stw	ra,20(sp)
 803436c:	df000415 	stw	fp,16(sp)
 8034370:	df000404 	addi	fp,sp,16
 8034374:	e13ffc15 	stw	r4,-16(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 8034378:	e0bffc17 	ldw	r2,-16(fp)
 803437c:	10bff804 	addi	r2,r2,-32
 8034380:	100490ba 	slli	r2,r2,2
 8034384:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8034388:	008201b4 	movhi	r2,2054
 803438c:	10bf0b04 	addi	r2,r2,-980
 8034390:	e0bfff15 	stw	r2,-4(fp)
 8034394:	00000606 	br	80343b0 <t_socketclose+0x4c>
 8034398:	e0ffff17 	ldw	r3,-4(fp)
 803439c:	e0bffe17 	ldw	r2,-8(fp)
 80343a0:	18800626 	beq	r3,r2,80343bc <t_socketclose+0x58>
 80343a4:	e0bfff17 	ldw	r2,-4(fp)
 80343a8:	10800017 	ldw	r2,0(r2)
 80343ac:	e0bfff15 	stw	r2,-4(fp)
 80343b0:	e0bfff17 	ldw	r2,-4(fp)
 80343b4:	103ff81e 	bne	r2,zero,8034398 <t_socketclose+0x34>
 80343b8:	00000106 	br	80343c0 <t_socketclose+0x5c>
 80343bc:	0001883a 	nop
 80343c0:	e0ffff17 	ldw	r3,-4(fp)
 80343c4:	e0bffe17 	ldw	r2,-8(fp)
 80343c8:	18800326 	beq	r3,r2,80343d8 <t_socketclose+0x74>
 80343cc:	80301a80 	call	80301a8 <dtrap>
 80343d0:	00bfffc4 	movi	r2,-1
 80343d4:	00000e06 	br	8034410 <t_socketclose+0xac>
   so->so_error = 0;
 80343d8:	e0bffe17 	ldw	r2,-8(fp)
 80343dc:	10000615 	stw	zero,24(r2)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
 80343e0:	0009883a 	mov	r4,zero
 80343e4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   err = soclose(so);
 80343e8:	e13ffe17 	ldw	r4,-8(fp)
 80343ec:	80349280 	call	8034928 <soclose>
 80343f0:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 80343f4:	0009883a 	mov	r4,zero
 80343f8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 80343fc:	e0bffd17 	ldw	r2,-12(fp)
 8034400:	10000226 	beq	r2,zero,803440c <t_socketclose+0xa8>
   {
      /* do not do the following assignment since the socket structure
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
 8034404:	00bfffc4 	movi	r2,-1
 8034408:	00000106 	br	8034410 <t_socketclose+0xac>
   }
   return 0;
 803440c:	0005883a 	mov	r2,zero
}
 8034410:	e037883a 	mov	sp,fp
 8034414:	dfc00117 	ldw	ra,4(sp)
 8034418:	df000017 	ldw	fp,0(sp)
 803441c:	dec00204 	addi	sp,sp,8
 8034420:	f800283a 	ret

08034424 <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
 8034424:	defffa04 	addi	sp,sp,-24
 8034428:	dfc00515 	stw	ra,20(sp)
 803442c:	df000415 	stw	fp,16(sp)
 8034430:	df000404 	addi	fp,sp,16
 8034434:	e13ffe15 	stw	r4,-8(fp)
 8034438:	e17ffd15 	stw	r5,-12(fp)
 803443c:	e1bffc15 	stw	r6,-16(fp)
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
 8034440:	0009883a 	mov	r4,zero
 8034444:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
 8034448:	e17ffd17 	ldw	r5,-12(fp)
 803444c:	e13ffc17 	ldw	r4,-16(fp)
 8034450:	8030f540 	call	8030f54 <m_getnbuf>
 8034454:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8034458:	0009883a 	mov	r4,zero
 803445c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (m == NULL)
 8034460:	e0bfff17 	ldw	r2,-4(fp)
 8034464:	1000021e 	bne	r2,zero,8034470 <sockargs+0x4c>
      return NULL;
 8034468:	0005883a 	mov	r2,zero
 803446c:	00000b06 	br	803449c <sockargs+0x78>
   m->m_len = arglen;
 8034470:	e0fffd17 	ldw	r3,-12(fp)
 8034474:	e0bfff17 	ldw	r2,-4(fp)
 8034478:	10c00215 	stw	r3,8(r2)
   MEMCPY(mtod (m, char *), arg, arglen);
 803447c:	e0bfff17 	ldw	r2,-4(fp)
 8034480:	10800317 	ldw	r2,12(r2)
 8034484:	e0fffd17 	ldw	r3,-12(fp)
 8034488:	180d883a 	mov	r6,r3
 803448c:	e17ffe17 	ldw	r5,-8(fp)
 8034490:	1009883a 	mov	r4,r2
 8034494:	80037cc0 	call	80037cc <memcpy>
   return m;
 8034498:	e0bfff17 	ldw	r2,-4(fp)
}
 803449c:	e037883a 	mov	sp,fp
 80344a0:	dfc00117 	ldw	ra,4(sp)
 80344a4:	df000017 	ldw	fp,0(sp)
 80344a8:	dec00204 	addi	sp,sp,8
 80344ac:	f800283a 	ret

080344b0 <t_errno>:
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
 80344b0:	defffa04 	addi	sp,sp,-24
 80344b4:	dfc00515 	stw	ra,20(sp)
 80344b8:	df000415 	stw	fp,16(sp)
 80344bc:	df000404 	addi	fp,sp,16
 80344c0:	e13ffc15 	stw	r4,-16(fp)
   struct socket *so = LONG2SO(s);
 80344c4:	e0bffc17 	ldw	r2,-16(fp)
 80344c8:	10bff804 	addi	r2,r2,-32
 80344cc:	100490ba 	slli	r2,r2,2
 80344d0:	e0bffd15 	stw	r2,-12(fp)
   struct socket *tmp;
   int errcode = ENOTSOCK;
 80344d4:	00801b04 	movi	r2,108
 80344d8:	e0bffe15 	stw	r2,-8(fp)

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
 80344dc:	0009883a 	mov	r4,zero
 80344e0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 80344e4:	008201b4 	movhi	r2,2054
 80344e8:	10bf0b04 	addi	r2,r2,-980
 80344ec:	e0bfff15 	stw	r2,-4(fp)
 80344f0:	00000a06 	br	803451c <t_errno+0x6c>
   {
      if (tmp == so)  /* found socket, return error */
 80344f4:	e0ffff17 	ldw	r3,-4(fp)
 80344f8:	e0bffd17 	ldw	r2,-12(fp)
 80344fc:	1880041e 	bne	r3,r2,8034510 <t_errno+0x60>
      {
         errcode = so->so_error;
 8034500:	e0bffd17 	ldw	r2,-12(fp)
 8034504:	10800617 	ldw	r2,24(r2)
 8034508:	e0bffe15 	stw	r2,-8(fp)
         break;
 803450c:	00000506 	br	8034524 <t_errno+0x74>
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 8034510:	e0bfff17 	ldw	r2,-4(fp)
 8034514:	10800017 	ldw	r2,0(r2)
 8034518:	e0bfff15 	stw	r2,-4(fp)
 803451c:	e0bfff17 	ldw	r2,-4(fp)
 8034520:	103ff41e 	bne	r2,zero,80344f4 <t_errno+0x44>
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 8034524:	0009883a 	mov	r4,zero
 8034528:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   return errcode;
 803452c:	e0bffe17 	ldw	r2,-8(fp)
}
 8034530:	e037883a 	mov	sp,fp
 8034534:	dfc00117 	ldw	ra,4(sp)
 8034538:	df000017 	ldw	fp,0(sp)
 803453c:	dec00204 	addi	sp,sp,8
 8034540:	f800283a 	ret

08034544 <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
 8034544:	defff704 	addi	sp,sp,-36
 8034548:	dfc00815 	stw	ra,32(sp)
 803454c:	df000715 	stw	fp,28(sp)
 8034550:	df000704 	addi	fp,sp,28
 8034554:	e13ffb15 	stw	r4,-20(fp)
 8034558:	e17ffa15 	stw	r5,-24(fp)
 803455c:	e1bff915 	stw	r6,-28(fp)
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
 8034560:	e0bff917 	ldw	r2,-28(fp)
 8034564:	10000626 	beq	r2,zero,8034580 <socreate+0x3c>
      prp = pffindproto(dom, proto, type);
 8034568:	e1bffa17 	ldw	r6,-24(fp)
 803456c:	e17ff917 	ldw	r5,-28(fp)
 8034570:	e13ffb17 	ldw	r4,-20(fp)
 8034574:	8030e800 	call	8030e80 <pffindproto>
 8034578:	e0bfff15 	stw	r2,-4(fp)
 803457c:	00000406 	br	8034590 <socreate+0x4c>
   else
      prp = pffindtype(dom, type);
 8034580:	e17ffa17 	ldw	r5,-24(fp)
 8034584:	e13ffb17 	ldw	r4,-20(fp)
 8034588:	8030df00 	call	8030df0 <pffindtype>
 803458c:	e0bfff15 	stw	r2,-4(fp)
   if (prp == 0)
 8034590:	e0bfff17 	ldw	r2,-4(fp)
 8034594:	1000021e 	bne	r2,zero,80345a0 <socreate+0x5c>
      return NULL;
 8034598:	0005883a 	mov	r2,zero
 803459c:	00004e06 	br	80346d8 <socreate+0x194>
   if (prp->pr_type != type)
 80345a0:	e0bfff17 	ldw	r2,-4(fp)
 80345a4:	1080000b 	ldhu	r2,0(r2)
 80345a8:	10bfffcc 	andi	r2,r2,65535
 80345ac:	10a0001c 	xori	r2,r2,32768
 80345b0:	10a00004 	addi	r2,r2,-32768
 80345b4:	e0fffa17 	ldw	r3,-24(fp)
 80345b8:	18800226 	beq	r3,r2,80345c4 <socreate+0x80>
      return NULL;
 80345bc:	0005883a 	mov	r2,zero
 80345c0:	00004506 	br	80346d8 <socreate+0x194>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 80345c4:	01002104 	movi	r4,132
 80345c8:	8030d080 	call	8030d08 <npalloc>
 80345cc:	e0bffe15 	stw	r2,-8(fp)
 80345d0:	e0bffe17 	ldw	r2,-8(fp)
 80345d4:	1000021e 	bne	r2,zero,80345e0 <socreate+0x9c>
      return NULL;
 80345d8:	0005883a 	mov	r2,zero
 80345dc:	00003e06 	br	80346d8 <socreate+0x194>
   so->next = NULL;
 80345e0:	e0bffe17 	ldw	r2,-8(fp)
 80345e4:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
 80345e8:	e17ffe17 	ldw	r5,-8(fp)
 80345ec:	010201b4 	movhi	r4,2054
 80345f0:	213f0b04 	addi	r4,r4,-980
 80345f4:	802fb8c0 	call	802fb8c <putq>

   so->so_options = socket_defaults;
 80345f8:	d0a0380b 	ldhu	r2,-32544(gp)
 80345fc:	10ffffcc 	andi	r3,r2,65535
 8034600:	e0bffe17 	ldw	r2,-8(fp)
 8034604:	10c00415 	stw	r3,16(r2)
   so->so_domain = dom;
 8034608:	e0bffe17 	ldw	r2,-8(fp)
 803460c:	e0fffb17 	ldw	r3,-20(fp)
 8034610:	10c00515 	stw	r3,20(r2)
   so->so_state = 0;
 8034614:	e0bffe17 	ldw	r2,-8(fp)
 8034618:	1000088d 	sth	zero,34(r2)
   so->so_type = (char)type;
 803461c:	e0bffa17 	ldw	r2,-24(fp)
 8034620:	1007883a 	mov	r3,r2
 8034624:	e0bffe17 	ldw	r2,-8(fp)
 8034628:	10c00985 	stb	r3,38(r2)
   so->so_proto = prp;
 803462c:	e0bffe17 	ldw	r2,-8(fp)
 8034630:	e0ffff17 	ldw	r3,-4(fp)
 8034634:	10c00215 	stw	r3,8(r2)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
 8034638:	e0bffe17 	ldw	r2,-8(fp)
 803463c:	10000315 	stw	zero,12(r2)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
 8034640:	e0bffe17 	ldw	r2,-8(fp)
 8034644:	10000715 	stw	zero,28(r2)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
 8034648:	e0bfff17 	ldw	r2,-4(fp)
 803464c:	10800317 	ldw	r2,12(r2)
 8034650:	e0fff917 	ldw	r3,-28(fp)
 8034654:	180d883a 	mov	r6,r3
 8034658:	000b883a 	mov	r5,zero
 803465c:	e13ffe17 	ldw	r4,-8(fp)
 8034660:	103ee83a 	callr	r2
 8034664:	e0bffd15 	stw	r2,-12(fp)
   if (error) goto bad;
 8034668:	e0bffd17 	ldw	r2,-12(fp)
 803466c:	10000a1e 	bne	r2,zero,8034698 <socreate+0x154>

   if (so_evtmap)
 8034670:	d0a0c903 	ldbu	r2,-31964(gp)
 8034674:	10803fcc 	andi	r2,r2,255
 8034678:	10001626 	beq	r2,zero,80346d4 <socreate+0x190>
   {                       
      rc = (*so_evtmap_create) (so);
 803467c:	d0a0c717 	ldw	r2,-31972(gp)
 8034680:	e13ffe17 	ldw	r4,-8(fp)
 8034684:	103ee83a 	callr	r2
 8034688:	e0bffc15 	stw	r2,-16(fp)
      if (rc != 0)
 803468c:	e0bffc17 	ldw	r2,-16(fp)
 8034690:	10000c26 	beq	r2,zero,80346c4 <socreate+0x180>
      {
bad:   
 8034694:	00000106 	br	803469c <socreate+0x158>
   if (error) goto bad;
 8034698:	0001883a 	nop
         so->so_state |= SS_NOFDREF;
 803469c:	e0bffe17 	ldw	r2,-8(fp)
 80346a0:	1080088b 	ldhu	r2,34(r2)
 80346a4:	10800054 	ori	r2,r2,1
 80346a8:	1007883a 	mov	r3,r2
 80346ac:	e0bffe17 	ldw	r2,-8(fp)
 80346b0:	10c0088d 	sth	r3,34(r2)
         sofree (so);
 80346b4:	e13ffe17 	ldw	r4,-8(fp)
 80346b8:	80348180 	call	8034818 <sofree>
         return NULL;   
 80346bc:	0005883a 	mov	r2,zero
 80346c0:	00000506 	br	80346d8 <socreate+0x194>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
 80346c4:	802c8900 	call	802c890 <TK_OSTaskQuery>
 80346c8:	1007883a 	mov	r3,r2
 80346cc:	e0bffe17 	ldw	r2,-8(fp)
 80346d0:	10c02005 	stb	r3,128(r2)
   }

   return so;
 80346d4:	e0bffe17 	ldw	r2,-8(fp)
}
 80346d8:	e037883a 	mov	sp,fp
 80346dc:	dfc00117 	ldw	ra,4(sp)
 80346e0:	df000017 	ldw	fp,0(sp)
 80346e4:	dec00204 	addi	sp,sp,8
 80346e8:	f800283a 	ret

080346ec <sobind>:
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
 80346ec:	defffb04 	addi	sp,sp,-20
 80346f0:	dfc00415 	stw	ra,16(sp)
 80346f4:	df000315 	stw	fp,12(sp)
 80346f8:	df000304 	addi	fp,sp,12
 80346fc:	e13ffe15 	stw	r4,-8(fp)
 8034700:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_BIND;
 8034704:	e0bffe17 	ldw	r2,-8(fp)
 8034708:	00c00084 	movi	r3,2
 803470c:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8034710:	e0bffe17 	ldw	r2,-8(fp)
 8034714:	10800217 	ldw	r2,8(r2)
 8034718:	10800317 	ldw	r2,12(r2)
 803471c:	e1bffd17 	ldw	r6,-12(fp)
 8034720:	000b883a 	mov	r5,zero
 8034724:	e13ffe17 	ldw	r4,-8(fp)
 8034728:	103ee83a 	callr	r2
 803472c:	e0bfff15 	stw	r2,-4(fp)
   return (error);
 8034730:	e0bfff17 	ldw	r2,-4(fp)
}
 8034734:	e037883a 	mov	sp,fp
 8034738:	dfc00117 	ldw	ra,4(sp)
 803473c:	df000017 	ldw	fp,0(sp)
 8034740:	dec00204 	addi	sp,sp,8
 8034744:	f800283a 	ret

08034748 <solisten>:
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 8034748:	defffb04 	addi	sp,sp,-20
 803474c:	dfc00415 	stw	ra,16(sp)
 8034750:	df000315 	stw	fp,12(sp)
 8034754:	df000304 	addi	fp,sp,12
 8034758:	e13ffe15 	stw	r4,-8(fp)
 803475c:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_LISTEN;
 8034760:	e0bffe17 	ldw	r2,-8(fp)
 8034764:	00c000c4 	movi	r3,3
 8034768:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so,
 803476c:	e0bffe17 	ldw	r2,-8(fp)
 8034770:	10800217 	ldw	r2,8(r2)
 8034774:	10800317 	ldw	r2,12(r2)
 8034778:	000d883a 	mov	r6,zero
 803477c:	000b883a 	mov	r5,zero
 8034780:	e13ffe17 	ldw	r4,-8(fp)
 8034784:	103ee83a 	callr	r2
 8034788:	e0bfff15 	stw	r2,-4(fp)
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
 803478c:	e0bfff17 	ldw	r2,-4(fp)
 8034790:	10000226 	beq	r2,zero,803479c <solisten+0x54>
   {
      return (error);
 8034794:	e0bfff17 	ldw	r2,-4(fp)
 8034798:	00001a06 	br	8034804 <solisten+0xbc>
   }
   if (so->so_q == 0) 
 803479c:	e0bffe17 	ldw	r2,-8(fp)
 80347a0:	10801d17 	ldw	r2,116(r2)
 80347a4:	10000b1e 	bne	r2,zero,80347d4 <solisten+0x8c>
   {
      so->so_q = so;
 80347a8:	e0bffe17 	ldw	r2,-8(fp)
 80347ac:	e0fffe17 	ldw	r3,-8(fp)
 80347b0:	10c01d15 	stw	r3,116(r2)
      so->so_q0 = so;
 80347b4:	e0bffe17 	ldw	r2,-8(fp)
 80347b8:	e0fffe17 	ldw	r3,-8(fp)
 80347bc:	10c01c15 	stw	r3,112(r2)
      so->so_options |= SO_ACCEPTCONN;
 80347c0:	e0bffe17 	ldw	r2,-8(fp)
 80347c4:	10800417 	ldw	r2,16(r2)
 80347c8:	10c00094 	ori	r3,r2,2
 80347cc:	e0bffe17 	ldw	r2,-8(fp)
 80347d0:	10c00415 	stw	r3,16(r2)
   }
   if (backlog < 0)
 80347d4:	e0bffd17 	ldw	r2,-12(fp)
 80347d8:	1000010e 	bge	r2,zero,80347e0 <solisten+0x98>
      backlog = 0;
 80347dc:	e03ffd15 	stw	zero,-12(fp)
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 80347e0:	e0bffd17 	ldw	r2,-12(fp)
 80347e4:	10800188 	cmpgei	r2,r2,6
 80347e8:	1000021e 	bne	r2,zero,80347f4 <solisten+0xac>
 80347ec:	e0bffd17 	ldw	r2,-12(fp)
 80347f0:	00000106 	br	80347f8 <solisten+0xb0>
 80347f4:	00800144 	movi	r2,5
 80347f8:	e0fffe17 	ldw	r3,-8(fp)
 80347fc:	18801e85 	stb	r2,122(r3)
   return 0;
 8034800:	0005883a 	mov	r2,zero
}
 8034804:	e037883a 	mov	sp,fp
 8034808:	dfc00117 	ldw	ra,4(sp)
 803480c:	df000017 	ldw	fp,0(sp)
 8034810:	dec00204 	addi	sp,sp,8
 8034814:	f800283a 	ret

08034818 <sofree>:
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
 8034818:	defffd04 	addi	sp,sp,-12
 803481c:	dfc00215 	stw	ra,8(sp)
 8034820:	df000115 	stw	fp,4(sp)
 8034824:	df000104 	addi	fp,sp,4
 8034828:	e13fff15 	stw	r4,-4(fp)
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 803482c:	e0bfff17 	ldw	r2,-4(fp)
 8034830:	10800117 	ldw	r2,4(r2)
 8034834:	1000361e 	bne	r2,zero,8034910 <sofree+0xf8>
 8034838:	e0bfff17 	ldw	r2,-4(fp)
 803483c:	1080088b 	ldhu	r2,34(r2)
 8034840:	10bfffcc 	andi	r2,r2,65535
 8034844:	1080004c 	andi	r2,r2,1
 8034848:	10003126 	beq	r2,zero,8034910 <sofree+0xf8>
      return;
   if (so->so_head) 
 803484c:	e0bfff17 	ldw	r2,-4(fp)
 8034850:	10801b17 	ldw	r2,108(r2)
 8034854:	10000d26 	beq	r2,zero,803488c <sofree+0x74>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
 8034858:	000b883a 	mov	r5,zero
 803485c:	e13fff17 	ldw	r4,-4(fp)
 8034860:	8036ca40 	call	8036ca4 <soqremque>
 8034864:	1000071e 	bne	r2,zero,8034884 <sofree+0x6c>
 8034868:	01400044 	movi	r5,1
 803486c:	e13fff17 	ldw	r4,-4(fp)
 8034870:	8036ca40 	call	8036ca4 <soqremque>
 8034874:	1000031e 	bne	r2,zero,8034884 <sofree+0x6c>
         panic("sofree");
 8034878:	01020174 	movhi	r4,2053
 803487c:	210f0c04 	addi	r4,r4,15408
 8034880:	802bd8c0 	call	802bd8c <panic>
      so->so_head = 0;
 8034884:	e0bfff17 	ldw	r2,-4(fp)
 8034888:	10001b15 	stw	zero,108(r2)
   }
   sbrelease(&so->so_snd);
 803488c:	e0bfff17 	ldw	r2,-4(fp)
 8034890:	10801204 	addi	r2,r2,72
 8034894:	1009883a 	mov	r4,r2
 8034898:	80370680 	call	8037068 <sbrelease>
   sorflush(so);
 803489c:	e13fff17 	ldw	r4,-4(fp)
 80348a0:	8035b780 	call	8035b78 <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
 80348a4:	e0bfff17 	ldw	r2,-4(fp)
 80348a8:	10800317 	ldw	r2,12(r2)
 80348ac:	10000426 	beq	r2,zero,80348c0 <sofree+0xa8>
	   ip_freemoptions(so->inp_moptions);
 80348b0:	e0bfff17 	ldw	r2,-4(fp)
 80348b4:	10800317 	ldw	r2,12(r2)
 80348b8:	1009883a 	mov	r4,r2
 80348bc:	80491280 	call	8049128 <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
 80348c0:	e0bfff17 	ldw	r2,-4(fp)
 80348c4:	10801f17 	ldw	r2,124(r2)
 80348c8:	10000426 	beq	r2,zero,80348dc <sofree+0xc4>
      SOCOPT_FREE(so->so_optsPack);
 80348cc:	e0bfff17 	ldw	r2,-4(fp)
 80348d0:	10801f17 	ldw	r2,124(r2)
 80348d4:	1009883a 	mov	r4,r2
 80348d8:	8030d3c0 	call	8030d3c <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 80348dc:	e17fff17 	ldw	r5,-4(fp)
 80348e0:	010201b4 	movhi	r4,2054
 80348e4:	213f0b04 	addi	r4,r4,-980
 80348e8:	802fc3c0 	call	802fc3c <qdel>
   
   if (so_evtmap)  
 80348ec:	d0a0c903 	ldbu	r2,-31964(gp)
 80348f0:	10803fcc 	andi	r2,r2,255
 80348f4:	10000326 	beq	r2,zero,8034904 <sofree+0xec>
      (*so_evtmap_delete) (so);
 80348f8:	d0a0c817 	ldw	r2,-31968(gp)
 80348fc:	e13fff17 	ldw	r4,-4(fp)
 8034900:	103ee83a 	callr	r2
   
   SOC_FREE(so);
 8034904:	e13fff17 	ldw	r4,-4(fp)
 8034908:	8030d3c0 	call	8030d3c <npfree>
 803490c:	00000106 	br	8034914 <sofree+0xfc>
      return;
 8034910:	0001883a 	nop
}
 8034914:	e037883a 	mov	sp,fp
 8034918:	dfc00117 	ldw	ra,4(sp)
 803491c:	df000017 	ldw	fp,0(sp)
 8034920:	dec00204 	addi	sp,sp,8
 8034924:	f800283a 	ret

08034928 <soclose>:
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
 8034928:	defff904 	addi	sp,sp,-28
 803492c:	dfc00615 	stw	ra,24(sp)
 8034930:	df000515 	stw	fp,20(sp)
 8034934:	df000504 	addi	fp,sp,20
 8034938:	e13ffb15 	stw	r4,-20(fp)
   int   error =  0;
 803493c:	e03fff15 	stw	zero,-4(fp)
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 8034940:	008201b4 	movhi	r2,2054
 8034944:	10bf0b17 	ldw	r2,-980(r2)
 8034948:	e0bffe15 	stw	r2,-8(fp)
 803494c:	00000606 	br	8034968 <soclose+0x40>
   {
      if (so == tmpso)
 8034950:	e0fffb17 	ldw	r3,-20(fp)
 8034954:	e0bffe17 	ldw	r2,-8(fp)
 8034958:	18800626 	beq	r3,r2,8034974 <soclose+0x4c>
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 803495c:	e0bffe17 	ldw	r2,-8(fp)
 8034960:	10800017 	ldw	r2,0(r2)
 8034964:	e0bffe15 	stw	r2,-8(fp)
 8034968:	e0bffe17 	ldw	r2,-8(fp)
 803496c:	103ff81e 	bne	r2,zero,8034950 <soclose+0x28>
 8034970:	00000106 	br	8034978 <soclose+0x50>
         break;
 8034974:	0001883a 	nop
   }
   if ( tmpso == NULL)
 8034978:	e0bffe17 	ldw	r2,-8(fp)
 803497c:	1000021e 	bne	r2,zero,8034988 <soclose+0x60>
      return EINVAL;
 8034980:	00800584 	movi	r2,22
 8034984:	00009506 	br	8034bdc <soclose+0x2b4>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
 8034988:	e0bffb17 	ldw	r2,-20(fp)
 803498c:	10800417 	ldw	r2,16(r2)
 8034990:	1080008c 	andi	r2,r2,2
 8034994:	10001226 	beq	r2,zero,80349e0 <soclose+0xb8>
   {
      while (so->so_q0 != so)
 8034998:	00000406 	br	80349ac <soclose+0x84>
         (void) soabort(so->so_q0);
 803499c:	e0bffb17 	ldw	r2,-20(fp)
 80349a0:	10801c17 	ldw	r2,112(r2)
 80349a4:	1009883a 	mov	r4,r2
 80349a8:	8034bf00 	call	8034bf0 <soabort>
      while (so->so_q0 != so)
 80349ac:	e0bffb17 	ldw	r2,-20(fp)
 80349b0:	10801c17 	ldw	r2,112(r2)
 80349b4:	e0fffb17 	ldw	r3,-20(fp)
 80349b8:	18bff81e 	bne	r3,r2,803499c <soclose+0x74>
      while (so->so_q != so)
 80349bc:	00000406 	br	80349d0 <soclose+0xa8>
         (void) soabort(so->so_q);
 80349c0:	e0bffb17 	ldw	r2,-20(fp)
 80349c4:	10801d17 	ldw	r2,116(r2)
 80349c8:	1009883a 	mov	r4,r2
 80349cc:	8034bf00 	call	8034bf0 <soabort>
      while (so->so_q != so)
 80349d0:	e0bffb17 	ldw	r2,-20(fp)
 80349d4:	10801d17 	ldw	r2,116(r2)
 80349d8:	e0fffb17 	ldw	r3,-20(fp)
 80349dc:	18bff81e 	bne	r3,r2,80349c0 <soclose+0x98>
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
 80349e0:	e0bffb17 	ldw	r2,-20(fp)
 80349e4:	10800983 	ldbu	r2,38(r2)
 80349e8:	10803fcc 	andi	r2,r2,255
 80349ec:	1080201c 	xori	r2,r2,128
 80349f0:	10bfe004 	addi	r2,r2,-128
 80349f4:	10800060 	cmpeqi	r2,r2,1
 80349f8:	10000c1e 	bne	r2,zero,8034a2c <soclose+0x104>
   { 
      so->so_req = PRU_DETACH;
 80349fc:	e0bffb17 	ldw	r2,-20(fp)
 8034a00:	00c00044 	movi	r3,1
 8034a04:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so,
 8034a08:	e0bffb17 	ldw	r2,-20(fp)
 8034a0c:	10800217 	ldw	r2,8(r2)
 8034a10:	10800317 	ldw	r2,12(r2)
 8034a14:	000d883a 	mov	r6,zero
 8034a18:	000b883a 	mov	r5,zero
 8034a1c:	e13ffb17 	ldw	r4,-20(fp)
 8034a20:	103ee83a 	callr	r2
 8034a24:	e0bfff15 	stw	r2,-4(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
 8034a28:	00005d06 	br	8034ba0 <soclose+0x278>
   }

   if (so->so_pcb == 0)
 8034a2c:	e0bffb17 	ldw	r2,-20(fp)
 8034a30:	10800117 	ldw	r2,4(r2)
 8034a34:	10005726 	beq	r2,zero,8034b94 <soclose+0x26c>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
 8034a38:	e0bffb17 	ldw	r2,-20(fp)
 8034a3c:	1080088b 	ldhu	r2,34(r2)
 8034a40:	10bfffcc 	andi	r2,r2,65535
 8034a44:	1080008c 	andi	r2,r2,2
 8034a48:	10003a26 	beq	r2,zero,8034b34 <soclose+0x20c>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
 8034a4c:	e0bffb17 	ldw	r2,-20(fp)
 8034a50:	1080088b 	ldhu	r2,34(r2)
 8034a54:	10bfffcc 	andi	r2,r2,65535
 8034a58:	1080020c 	andi	r2,r2,8
 8034a5c:	1000051e 	bne	r2,zero,8034a74 <soclose+0x14c>
      {
         error = sodisconnect(so);
 8034a60:	e13ffb17 	ldw	r4,-20(fp)
 8034a64:	8034d900 	call	8034d90 <sodisconnect>
 8034a68:	e0bfff15 	stw	r2,-4(fp)
         if (error)
 8034a6c:	e0bfff17 	ldw	r2,-4(fp)
 8034a70:	1000321e 	bne	r2,zero,8034b3c <soclose+0x214>
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
 8034a74:	e0bffb17 	ldw	r2,-20(fp)
 8034a78:	10800417 	ldw	r2,16(r2)
 8034a7c:	1080200c 	andi	r2,r2,128
 8034a80:	10002126 	beq	r2,zero,8034b08 <soclose+0x1e0>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
 8034a84:	e0bffb17 	ldw	r2,-20(fp)
 8034a88:	1080088b 	ldhu	r2,34(r2)
 8034a8c:	10bfffcc 	andi	r2,r2,65535
 8034a90:	1080020c 	andi	r2,r2,8
 8034a94:	10000526 	beq	r2,zero,8034aac <soclose+0x184>
             (so->so_state & SS_NBIO))
 8034a98:	e0bffb17 	ldw	r2,-20(fp)
 8034a9c:	1080088b 	ldhu	r2,34(r2)
 8034aa0:	10bfffcc 	andi	r2,r2,65535
 8034aa4:	1080400c 	andi	r2,r2,256
         if ((so->so_state & SS_ISDISCONNECTING) &&
 8034aa8:	1000261e 	bne	r2,zero,8034b44 <soclose+0x21c>
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
 8034aac:	e0bffb17 	ldw	r2,-20(fp)
 8034ab0:	1080080b 	ldhu	r2,32(r2)
 8034ab4:	10bfffcc 	andi	r2,r2,65535
 8034ab8:	10a0001c 	xori	r2,r2,32768
 8034abc:	10a00004 	addi	r2,r2,-32768
 8034ac0:	10c01924 	muli	r3,r2,100
 8034ac4:	d0a0a317 	ldw	r2,-32116(gp)
 8034ac8:	1885883a 	add	r2,r3,r2
 8034acc:	e0bffd15 	stw	r2,-12(fp)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 8034ad0:	00000406 	br	8034ae4 <soclose+0x1bc>
         {
            tcp_sleep((char *)&so->so_timeo);
 8034ad4:	e0bffb17 	ldw	r2,-20(fp)
 8034ad8:	10800904 	addi	r2,r2,36
 8034adc:	1009883a 	mov	r4,r2
 8034ae0:	802c66c0 	call	802c66c <tcp_sleep>
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 8034ae4:	e0bffb17 	ldw	r2,-20(fp)
 8034ae8:	1080088b 	ldhu	r2,34(r2)
 8034aec:	10bfffcc 	andi	r2,r2,65535
 8034af0:	1080008c 	andi	r2,r2,2
 8034af4:	10001426 	beq	r2,zero,8034b48 <soclose+0x220>
 8034af8:	d0e0a317 	ldw	r3,-32116(gp)
 8034afc:	e0bffd17 	ldw	r2,-12(fp)
 8034b00:	18bff436 	bltu	r3,r2,8034ad4 <soclose+0x1ac>
 8034b04:	00001006 	br	8034b48 <soclose+0x220>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
 8034b08:	e0bffb17 	ldw	r2,-20(fp)
 8034b0c:	10801217 	ldw	r2,72(r2)
 8034b10:	10000826 	beq	r2,zero,8034b34 <soclose+0x20c>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
 8034b14:	e0bffb17 	ldw	r2,-20(fp)
 8034b18:	1080088b 	ldhu	r2,34(r2)
 8034b1c:	10800054 	ori	r2,r2,1
 8034b20:	1007883a 	mov	r3,r2
 8034b24:	e0bffb17 	ldw	r2,-20(fp)
 8034b28:	10c0088d 	sth	r3,34(r2)
            return 0;
 8034b2c:	0005883a 	mov	r2,zero
 8034b30:	00002a06 	br	8034bdc <soclose+0x2b4>
         }
      }
   }
drop:
 8034b34:	0001883a 	nop
 8034b38:	00000306 	br	8034b48 <soclose+0x220>
            goto drop;
 8034b3c:	0001883a 	nop
 8034b40:	00000106 	br	8034b48 <soclose+0x220>
            goto drop;
 8034b44:	0001883a 	nop
   if (so->so_pcb) 
 8034b48:	e0bffb17 	ldw	r2,-20(fp)
 8034b4c:	10800117 	ldw	r2,4(r2)
 8034b50:	10001226 	beq	r2,zero,8034b9c <soclose+0x274>
   {
      int   error2;
      so->so_req = PRU_DETACH;
 8034b54:	e0bffb17 	ldw	r2,-20(fp)
 8034b58:	00c00044 	movi	r3,1
 8034b5c:	10c00715 	stw	r3,28(r2)
      error2 = (*so->so_proto->pr_usrreq)(so,
 8034b60:	e0bffb17 	ldw	r2,-20(fp)
 8034b64:	10800217 	ldw	r2,8(r2)
 8034b68:	10800317 	ldw	r2,12(r2)
 8034b6c:	000d883a 	mov	r6,zero
 8034b70:	000b883a 	mov	r5,zero
 8034b74:	e13ffb17 	ldw	r4,-20(fp)
 8034b78:	103ee83a 	callr	r2
 8034b7c:	e0bffc15 	stw	r2,-16(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
 8034b80:	e0bfff17 	ldw	r2,-4(fp)
 8034b84:	1000051e 	bne	r2,zero,8034b9c <soclose+0x274>
         error = error2;
 8034b88:	e0bffc17 	ldw	r2,-16(fp)
 8034b8c:	e0bfff15 	stw	r2,-4(fp)
 8034b90:	00000306 	br	8034ba0 <soclose+0x278>
      goto discard;
 8034b94:	0001883a 	nop
 8034b98:	00000106 	br	8034ba0 <soclose+0x278>
   }
discard:
 8034b9c:	0001883a 	nop
   if (so->so_state & SS_NOFDREF)
 8034ba0:	e0bffb17 	ldw	r2,-20(fp)
 8034ba4:	1080088b 	ldhu	r2,34(r2)
 8034ba8:	10bfffcc 	andi	r2,r2,65535
 8034bac:	1080004c 	andi	r2,r2,1
 8034bb0:	10000126 	beq	r2,zero,8034bb8 <soclose+0x290>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
 8034bb4:	80301a80 	call	80301a8 <dtrap>
   }
   so->so_state |= SS_NOFDREF;
 8034bb8:	e0bffb17 	ldw	r2,-20(fp)
 8034bbc:	1080088b 	ldhu	r2,34(r2)
 8034bc0:	10800054 	ori	r2,r2,1
 8034bc4:	1007883a 	mov	r3,r2
 8034bc8:	e0bffb17 	ldw	r2,-20(fp)
 8034bcc:	10c0088d 	sth	r3,34(r2)
   sofree(so);
 8034bd0:	e13ffb17 	ldw	r4,-20(fp)
 8034bd4:	80348180 	call	8034818 <sofree>
   return (error);
 8034bd8:	e0bfff17 	ldw	r2,-4(fp)
}
 8034bdc:	e037883a 	mov	sp,fp
 8034be0:	dfc00117 	ldw	ra,4(sp)
 8034be4:	df000017 	ldw	fp,0(sp)
 8034be8:	dec00204 	addi	sp,sp,8
 8034bec:	f800283a 	ret

08034bf0 <soabort>:
 * RETURNS: 
 */

int
soabort(struct socket * so)
{
 8034bf0:	defffd04 	addi	sp,sp,-12
 8034bf4:	dfc00215 	stw	ra,8(sp)
 8034bf8:	df000115 	stw	fp,4(sp)
 8034bfc:	df000104 	addi	fp,sp,4
 8034c00:	e13fff15 	stw	r4,-4(fp)
   so->so_req = PRU_ABORT;
 8034c04:	e0bfff17 	ldw	r2,-4(fp)
 8034c08:	00c00284 	movi	r3,10
 8034c0c:	10c00715 	stw	r3,28(r2)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 8034c10:	e0bfff17 	ldw	r2,-4(fp)
 8034c14:	10800217 	ldw	r2,8(r2)
 8034c18:	10800317 	ldw	r2,12(r2)
 8034c1c:	000d883a 	mov	r6,zero
 8034c20:	000b883a 	mov	r5,zero
 8034c24:	e13fff17 	ldw	r4,-4(fp)
 8034c28:	103ee83a 	callr	r2
}
 8034c2c:	e037883a 	mov	sp,fp
 8034c30:	dfc00117 	ldw	ra,4(sp)
 8034c34:	df000017 	ldw	fp,0(sp)
 8034c38:	dec00204 	addi	sp,sp,8
 8034c3c:	f800283a 	ret

08034c40 <soaccept>:
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
 8034c40:	defffb04 	addi	sp,sp,-20
 8034c44:	dfc00415 	stw	ra,16(sp)
 8034c48:	df000315 	stw	fp,12(sp)
 8034c4c:	df000304 	addi	fp,sp,12
 8034c50:	e13ffe15 	stw	r4,-8(fp)
 8034c54:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 8034c58:	e0bffe17 	ldw	r2,-8(fp)
 8034c5c:	1080088b 	ldhu	r2,34(r2)
 8034c60:	10bfffcc 	andi	r2,r2,65535
 8034c64:	1080004c 	andi	r2,r2,1
 8034c68:	1000031e 	bne	r2,zero,8034c78 <soaccept+0x38>
      panic("soaccept");
 8034c6c:	01020174 	movhi	r4,2053
 8034c70:	210f0e04 	addi	r4,r4,15416
 8034c74:	802bd8c0 	call	802bd8c <panic>
   so->so_state &= ~SS_NOFDREF;
 8034c78:	e0bffe17 	ldw	r2,-8(fp)
 8034c7c:	10c0088b 	ldhu	r3,34(r2)
 8034c80:	00bfff84 	movi	r2,-2
 8034c84:	1884703a 	and	r2,r3,r2
 8034c88:	1007883a 	mov	r3,r2
 8034c8c:	e0bffe17 	ldw	r2,-8(fp)
 8034c90:	10c0088d 	sth	r3,34(r2)
   so->so_req = PRU_ACCEPT;
 8034c94:	e0bffe17 	ldw	r2,-8(fp)
 8034c98:	00c00144 	movi	r3,5
 8034c9c:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8034ca0:	e0bffe17 	ldw	r2,-8(fp)
 8034ca4:	10800217 	ldw	r2,8(r2)
 8034ca8:	10800317 	ldw	r2,12(r2)
 8034cac:	e1bffd17 	ldw	r6,-12(fp)
 8034cb0:	000b883a 	mov	r5,zero
 8034cb4:	e13ffe17 	ldw	r4,-8(fp)
 8034cb8:	103ee83a 	callr	r2
 8034cbc:	e0bfff15 	stw	r2,-4(fp)

   return (error);
 8034cc0:	e0bfff17 	ldw	r2,-4(fp)
}
 8034cc4:	e037883a 	mov	sp,fp
 8034cc8:	dfc00117 	ldw	ra,4(sp)
 8034ccc:	df000017 	ldw	fp,0(sp)
 8034cd0:	dec00204 	addi	sp,sp,8
 8034cd4:	f800283a 	ret

08034cd8 <soconnect>:
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 8034cd8:	defffb04 	addi	sp,sp,-20
 8034cdc:	dfc00415 	stw	ra,16(sp)
 8034ce0:	df000315 	stw	fp,12(sp)
 8034ce4:	df000304 	addi	fp,sp,12
 8034ce8:	e13ffe15 	stw	r4,-8(fp)
 8034cec:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 8034cf0:	e0bffe17 	ldw	r2,-8(fp)
 8034cf4:	10800417 	ldw	r2,16(r2)
 8034cf8:	1080008c 	andi	r2,r2,2
 8034cfc:	10000226 	beq	r2,zero,8034d08 <soconnect+0x30>
      return (EOPNOTSUPP);
 8034d00:	008017c4 	movi	r2,95
 8034d04:	00001d06 	br	8034d7c <soconnect+0xa4>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 8034d08:	e0bffe17 	ldw	r2,-8(fp)
 8034d0c:	1080088b 	ldhu	r2,34(r2)
 8034d10:	10bfffcc 	andi	r2,r2,65535
 8034d14:	1080018c 	andi	r2,r2,6
 8034d18:	10000c26 	beq	r2,zero,8034d4c <soconnect+0x74>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
 8034d1c:	e0bffe17 	ldw	r2,-8(fp)
 8034d20:	10800217 	ldw	r2,8(r2)
 8034d24:	1080010b 	ldhu	r2,4(r2)
 8034d28:	10bfffcc 	andi	r2,r2,65535
 8034d2c:	1080010c 	andi	r2,r2,4
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 8034d30:	1000031e 	bne	r2,zero,8034d40 <soconnect+0x68>
       (sodisconnect(so) != 0)))
 8034d34:	e13ffe17 	ldw	r4,-8(fp)
 8034d38:	8034d900 	call	8034d90 <sodisconnect>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
 8034d3c:	10000326 	beq	r2,zero,8034d4c <soconnect+0x74>
   {
      error = EISCONN;
 8034d40:	00801fc4 	movi	r2,127
 8034d44:	e0bfff15 	stw	r2,-4(fp)
 8034d48:	00000b06 	br	8034d78 <soconnect+0xa0>
   }
   else
   {
      so->so_req = PRU_CONNECT;
 8034d4c:	e0bffe17 	ldw	r2,-8(fp)
 8034d50:	00c00104 	movi	r3,4
 8034d54:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8034d58:	e0bffe17 	ldw	r2,-8(fp)
 8034d5c:	10800217 	ldw	r2,8(r2)
 8034d60:	10800317 	ldw	r2,12(r2)
 8034d64:	e1bffd17 	ldw	r6,-12(fp)
 8034d68:	000b883a 	mov	r5,zero
 8034d6c:	e13ffe17 	ldw	r4,-8(fp)
 8034d70:	103ee83a 	callr	r2
 8034d74:	e0bfff15 	stw	r2,-4(fp)
   }
   return error;
 8034d78:	e0bfff17 	ldw	r2,-4(fp)
}
 8034d7c:	e037883a 	mov	sp,fp
 8034d80:	dfc00117 	ldw	ra,4(sp)
 8034d84:	df000017 	ldw	fp,0(sp)
 8034d88:	dec00204 	addi	sp,sp,8
 8034d8c:	f800283a 	ret

08034d90 <sodisconnect>:
 * RETURNS: 
 */

int
sodisconnect(struct socket * so)
{
 8034d90:	defffc04 	addi	sp,sp,-16
 8034d94:	dfc00315 	stw	ra,12(sp)
 8034d98:	df000215 	stw	fp,8(sp)
 8034d9c:	df000204 	addi	fp,sp,8
 8034da0:	e13ffe15 	stw	r4,-8(fp)
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
 8034da4:	e0bffe17 	ldw	r2,-8(fp)
 8034da8:	1080088b 	ldhu	r2,34(r2)
 8034dac:	10bfffcc 	andi	r2,r2,65535
 8034db0:	1080008c 	andi	r2,r2,2
 8034db4:	1000031e 	bne	r2,zero,8034dc4 <sodisconnect+0x34>
   {
      error = ENOTCONN;
 8034db8:	00802004 	movi	r2,128
 8034dbc:	e0bfff15 	stw	r2,-4(fp)
      goto bad;
 8034dc0:	00001306 	br	8034e10 <sodisconnect+0x80>
   }
   if (so->so_state & SS_ISDISCONNECTING) 
 8034dc4:	e0bffe17 	ldw	r2,-8(fp)
 8034dc8:	1080088b 	ldhu	r2,34(r2)
 8034dcc:	10bfffcc 	andi	r2,r2,65535
 8034dd0:	1080020c 	andi	r2,r2,8
 8034dd4:	10000326 	beq	r2,zero,8034de4 <sodisconnect+0x54>
   {
      error = EALREADY;
 8034dd8:	00801e04 	movi	r2,120
 8034ddc:	e0bfff15 	stw	r2,-4(fp)
      goto bad;
 8034de0:	00000b06 	br	8034e10 <sodisconnect+0x80>
   }
   so->so_req = PRU_DISCONNECT;
 8034de4:	e0bffe17 	ldw	r2,-8(fp)
 8034de8:	00c00184 	movi	r3,6
 8034dec:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 8034df0:	e0bffe17 	ldw	r2,-8(fp)
 8034df4:	10800217 	ldw	r2,8(r2)
 8034df8:	10800317 	ldw	r2,12(r2)
 8034dfc:	000d883a 	mov	r6,zero
 8034e00:	000b883a 	mov	r5,zero
 8034e04:	e13ffe17 	ldw	r4,-8(fp)
 8034e08:	103ee83a 	callr	r2
 8034e0c:	e0bfff15 	stw	r2,-4(fp)

bad:
   return (error);
 8034e10:	e0bfff17 	ldw	r2,-4(fp)
}
 8034e14:	e037883a 	mov	sp,fp
 8034e18:	dfc00117 	ldw	ra,4(sp)
 8034e1c:	df000017 	ldw	fp,0(sp)
 8034e20:	dec00204 	addi	sp,sp,8
 8034e24:	f800283a 	ret

08034e28 <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
 8034e28:	defff204 	addi	sp,sp,-56
 8034e2c:	dfc00d15 	stw	ra,52(sp)
 8034e30:	df000c15 	stw	fp,48(sp)
 8034e34:	df000c04 	addi	fp,sp,48
 8034e38:	e13ff715 	stw	r4,-36(fp)
 8034e3c:	e17ff615 	stw	r5,-40(fp)
 8034e40:	e1bff515 	stw	r6,-44(fp)
 8034e44:	e1fff415 	stw	r7,-48(fp)
   struct mbuf *head = (struct mbuf *)NULL;
 8034e48:	e03fff15 	stw	zero,-4(fp)
   struct mbuf *m;
   int   space;
   int   resid;
   int   len;
   int   error = 0;
 8034e4c:	e03ffb15 	stw	zero,-20(fp)
   int   dontroute;
   int   first = 1;
 8034e50:	00800044 	movi	r2,1
 8034e54:	e0bffa15 	stw	r2,-24(fp)

   resid = *data_length;
 8034e58:	e0bff417 	ldw	r2,-48(fp)
 8034e5c:	10800017 	ldw	r2,0(r2)
 8034e60:	e0bffc15 	stw	r2,-16(fp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
 8034e64:	e0bffc17 	ldw	r2,-16(fp)
 8034e68:	1000020e 	bge	r2,zero,8034e74 <sosend+0x4c>
      return (EINVAL);
 8034e6c:	00800584 	movi	r2,22
 8034e70:	00014006 	br	8035374 <sosend+0x54c>

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
 8034e74:	e0bff717 	ldw	r2,-36(fp)
 8034e78:	10800217 	ldw	r2,8(r2)
 8034e7c:	1080010b 	ldhu	r2,4(r2)
 8034e80:	10bfffcc 	andi	r2,r2,65535
 8034e84:	1080004c 	andi	r2,r2,1
 8034e88:	10000726 	beq	r2,zero,8034ea8 <sosend+0x80>
 8034e8c:	e0bff717 	ldw	r2,-36(fp)
 8034e90:	10801317 	ldw	r2,76(r2)
 8034e94:	1007883a 	mov	r3,r2
 8034e98:	e0bffc17 	ldw	r2,-16(fp)
 8034e9c:	1880020e 	bge	r3,r2,8034ea8 <sosend+0x80>
      return (EMSGSIZE);
 8034ea0:	00801e84 	movi	r2,122
 8034ea4:	00013306 	br	8035374 <sosend+0x54c>

   dontroute = (flags & MSG_DONTROUTE) &&
 8034ea8:	e0800217 	ldw	r2,8(fp)
 8034eac:	1080010c 	andi	r2,r2,4
               ((so->so_options & SO_DONTROUTE) == 0) &&
 8034eb0:	10000c26 	beq	r2,zero,8034ee4 <sosend+0xbc>
 8034eb4:	e0bff717 	ldw	r2,-36(fp)
 8034eb8:	10800417 	ldw	r2,16(r2)
 8034ebc:	1080040c 	andi	r2,r2,16
   dontroute = (flags & MSG_DONTROUTE) &&
 8034ec0:	1000081e 	bne	r2,zero,8034ee4 <sosend+0xbc>
               (so->so_proto->pr_flags & PR_ATOMIC);
 8034ec4:	e0bff717 	ldw	r2,-36(fp)
 8034ec8:	10800217 	ldw	r2,8(r2)
 8034ecc:	1080010b 	ldhu	r2,4(r2)
 8034ed0:	10bfffcc 	andi	r2,r2,65535
 8034ed4:	1080004c 	andi	r2,r2,1
               ((so->so_options & SO_DONTROUTE) == 0) &&
 8034ed8:	10000226 	beq	r2,zero,8034ee4 <sosend+0xbc>
 8034edc:	00800044 	movi	r2,1
 8034ee0:	00000106 	br	8034ee8 <sosend+0xc0>
 8034ee4:	0005883a 	mov	r2,zero
   dontroute = (flags & MSG_DONTROUTE) &&
 8034ee8:	e0bff915 	stw	r2,-28(fp)

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 8034eec:	00000406 	br	8034f00 <sosend+0xd8>
 8034ef0:	e0bff717 	ldw	r2,-36(fp)
 8034ef4:	10801904 	addi	r2,r2,100
 8034ef8:	1009883a 	mov	r4,r2
 8034efc:	802c66c0 	call	802c66c <tcp_sleep>
 8034f00:	e0bff717 	ldw	r2,-36(fp)
 8034f04:	1080190b 	ldhu	r2,100(r2)
 8034f08:	10bfffcc 	andi	r2,r2,65535
 8034f0c:	1080004c 	andi	r2,r2,1
 8034f10:	103ff71e 	bne	r2,zero,8034ef0 <sosend+0xc8>
 8034f14:	e0bff717 	ldw	r2,-36(fp)
 8034f18:	1080190b 	ldhu	r2,100(r2)
 8034f1c:	10800054 	ori	r2,r2,1
 8034f20:	1007883a 	mov	r3,r2
 8034f24:	e0bff717 	ldw	r2,-36(fp)
 8034f28:	10c0190d 	sth	r3,100(r2)
   do 
   {
      if (so->so_error) 
 8034f2c:	e0bff717 	ldw	r2,-36(fp)
 8034f30:	10800617 	ldw	r2,24(r2)
 8034f34:	10000626 	beq	r2,zero,8034f50 <sosend+0x128>
      {
         error = so->so_error;
 8034f38:	e0bff717 	ldw	r2,-36(fp)
 8034f3c:	10800617 	ldw	r2,24(r2)
 8034f40:	e0bffb15 	stw	r2,-20(fp)
         so->so_error = 0;          /* ??? */
 8034f44:	e0bff717 	ldw	r2,-36(fp)
 8034f48:	10000615 	stw	zero,24(r2)
         goto release;
 8034f4c:	0000f906 	br	8035334 <sosend+0x50c>
      }
      if (so->so_state & SS_CANTSENDMORE)
 8034f50:	e0bff717 	ldw	r2,-36(fp)
 8034f54:	1080088b 	ldhu	r2,34(r2)
 8034f58:	10bfffcc 	andi	r2,r2,65535
 8034f5c:	1080040c 	andi	r2,r2,16
 8034f60:	10000326 	beq	r2,zero,8034f70 <sosend+0x148>
         snderr(EPIPE);
 8034f64:	00800804 	movi	r2,32
 8034f68:	e0bffb15 	stw	r2,-20(fp)
 8034f6c:	0000f106 	br	8035334 <sosend+0x50c>
      if ((so->so_state & SS_ISCONNECTED) == 0) 
 8034f70:	e0bff717 	ldw	r2,-36(fp)
 8034f74:	1080088b 	ldhu	r2,34(r2)
 8034f78:	10bfffcc 	andi	r2,r2,65535
 8034f7c:	1080008c 	andi	r2,r2,2
 8034f80:	10000e1e 	bne	r2,zero,8034fbc <sosend+0x194>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
 8034f84:	e0bff717 	ldw	r2,-36(fp)
 8034f88:	10800217 	ldw	r2,8(r2)
 8034f8c:	1080010b 	ldhu	r2,4(r2)
 8034f90:	10bfffcc 	andi	r2,r2,65535
 8034f94:	1080010c 	andi	r2,r2,4
 8034f98:	10000326 	beq	r2,zero,8034fa8 <sosend+0x180>
            snderr(ENOTCONN);
 8034f9c:	00802004 	movi	r2,128
 8034fa0:	e0bffb15 	stw	r2,-20(fp)
 8034fa4:	0000e306 	br	8035334 <sosend+0x50c>
         if (nam == 0)
 8034fa8:	e0bff617 	ldw	r2,-40(fp)
 8034fac:	1000031e 	bne	r2,zero,8034fbc <sosend+0x194>
            snderr(EDESTADDRREQ);
 8034fb0:	00801e44 	movi	r2,121
 8034fb4:	e0bffb15 	stw	r2,-20(fp)
 8034fb8:	0000de06 	br	8035334 <sosend+0x50c>
      }
      if (flags & MSG_OOB)
 8034fbc:	e0800217 	ldw	r2,8(fp)
 8034fc0:	1080004c 	andi	r2,r2,1
 8034fc4:	10000326 	beq	r2,zero,8034fd4 <sosend+0x1ac>
         space = 1024;
 8034fc8:	00810004 	movi	r2,1024
 8034fcc:	e0bffd15 	stw	r2,-12(fp)
 8034fd0:	00004706 	br	80350f0 <sosend+0x2c8>
      else 
      {
         space = (int)sbspace(&so->so_snd);
 8034fd4:	e0bff717 	ldw	r2,-36(fp)
 8034fd8:	10801317 	ldw	r2,76(r2)
 8034fdc:	1007883a 	mov	r3,r2
 8034fe0:	e0bff717 	ldw	r2,-36(fp)
 8034fe4:	10801217 	ldw	r2,72(r2)
 8034fe8:	1885c83a 	sub	r2,r3,r2
 8034fec:	10000616 	blt	r2,zero,8035008 <sosend+0x1e0>
 8034ff0:	e0bff717 	ldw	r2,-36(fp)
 8034ff4:	10c01317 	ldw	r3,76(r2)
 8034ff8:	e0bff717 	ldw	r2,-36(fp)
 8034ffc:	10801217 	ldw	r2,72(r2)
 8035000:	1885c83a 	sub	r2,r3,r2
 8035004:	00000106 	br	803500c <sosend+0x1e4>
 8035008:	0005883a 	mov	r2,zero
 803500c:	e0bffd15 	stw	r2,-12(fp)
         if ((sosendallatonce(so) && (space < resid)) ||
 8035010:	e0bff717 	ldw	r2,-36(fp)
 8035014:	10800217 	ldw	r2,8(r2)
 8035018:	1080010b 	ldhu	r2,4(r2)
 803501c:	10bfffcc 	andi	r2,r2,65535
 8035020:	1080004c 	andi	r2,r2,1
 8035024:	10000326 	beq	r2,zero,8035034 <sosend+0x20c>
 8035028:	e0fffd17 	ldw	r3,-12(fp)
 803502c:	e0bffc17 	ldw	r2,-16(fp)
 8035030:	18801216 	blt	r3,r2,803507c <sosend+0x254>
 8035034:	e0bffc17 	ldw	r2,-16(fp)
 8035038:	10815e10 	cmplti	r2,r2,1400
 803503c:	10002c1e 	bne	r2,zero,80350f0 <sosend+0x2c8>
             ((resid >= CLBYTES) && (space < CLBYTES) &&
 8035040:	e0bffd17 	ldw	r2,-12(fp)
 8035044:	10815e08 	cmpgei	r2,r2,1400
 8035048:	1000291e 	bne	r2,zero,80350f0 <sosend+0x2c8>
              (so->so_snd.sb_cc >= CLBYTES) &&
 803504c:	e0bff717 	ldw	r2,-36(fp)
 8035050:	10801217 	ldw	r2,72(r2)
             ((resid >= CLBYTES) && (space < CLBYTES) &&
 8035054:	10815e30 	cmpltui	r2,r2,1400
 8035058:	1000251e 	bne	r2,zero,80350f0 <sosend+0x2c8>
              ((so->so_state & SS_NBIO) == 0) &&
 803505c:	e0bff717 	ldw	r2,-36(fp)
 8035060:	1080088b 	ldhu	r2,34(r2)
 8035064:	10bfffcc 	andi	r2,r2,65535
 8035068:	1080400c 	andi	r2,r2,256
              (so->so_snd.sb_cc >= CLBYTES) &&
 803506c:	1000201e 	bne	r2,zero,80350f0 <sosend+0x2c8>
              ((flags & MSG_DONTWAIT) == 0)))
 8035070:	e0800217 	ldw	r2,8(fp)
 8035074:	1080080c 	andi	r2,r2,32
              ((so->so_state & SS_NBIO) == 0) &&
 8035078:	10001d1e 	bne	r2,zero,80350f0 <sosend+0x2c8>
         {
            if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 803507c:	e0bff717 	ldw	r2,-36(fp)
 8035080:	1080088b 	ldhu	r2,34(r2)
 8035084:	10bfffcc 	andi	r2,r2,65535
 8035088:	1080400c 	andi	r2,r2,256
 803508c:	1000031e 	bne	r2,zero,803509c <sosend+0x274>
 8035090:	e0800217 	ldw	r2,8(fp)
 8035094:	1080080c 	andi	r2,r2,32
 8035098:	10000526 	beq	r2,zero,80350b0 <sosend+0x288>
            {
               if (first)
 803509c:	e0bffa17 	ldw	r2,-24(fp)
 80350a0:	10009d26 	beq	r2,zero,8035318 <sosend+0x4f0>
                  error = EWOULDBLOCK;
 80350a4:	008002c4 	movi	r2,11
 80350a8:	e0bffb15 	stw	r2,-20(fp)
               goto release;
 80350ac:	00009a06 	br	8035318 <sosend+0x4f0>
            }
            sbunlock(&so->so_snd);
 80350b0:	e0bff717 	ldw	r2,-36(fp)
 80350b4:	10c0190b 	ldhu	r3,100(r2)
 80350b8:	00bfff84 	movi	r2,-2
 80350bc:	1884703a 	and	r2,r3,r2
 80350c0:	1007883a 	mov	r3,r2
 80350c4:	e0bff717 	ldw	r2,-36(fp)
 80350c8:	10c0190d 	sth	r3,100(r2)
 80350cc:	e0bff717 	ldw	r2,-36(fp)
 80350d0:	10801904 	addi	r2,r2,100
 80350d4:	1009883a 	mov	r4,r2
 80350d8:	802c7b80 	call	802c7b8 <tcp_wakeup>
            sbwait(&so->so_snd);
 80350dc:	e0bff717 	ldw	r2,-36(fp)
 80350e0:	10801204 	addi	r2,r2,72
 80350e4:	1009883a 	mov	r4,r2
 80350e8:	8036e980 	call	8036e98 <sbwait>
            goto restart;
 80350ec:	003f7f06 	br	8034eec <sosend+0xc4>
         }
      }
      if ( space <= 0 ) 
 80350f0:	e0bffd17 	ldw	r2,-12(fp)
 80350f4:	00805e16 	blt	zero,r2,8035270 <sosend+0x448>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 80350f8:	e0bff717 	ldw	r2,-36(fp)
 80350fc:	1080088b 	ldhu	r2,34(r2)
 8035100:	10bfffcc 	andi	r2,r2,65535
 8035104:	1080400c 	andi	r2,r2,256
 8035108:	1000031e 	bne	r2,zero,8035118 <sosend+0x2f0>
 803510c:	e0800217 	ldw	r2,8(fp)
 8035110:	1080080c 	andi	r2,r2,32
 8035114:	10000526 	beq	r2,zero,803512c <sosend+0x304>
         {
            if (first)     /* report first error */
 8035118:	e0bffa17 	ldw	r2,-24(fp)
 803511c:	10008026 	beq	r2,zero,8035320 <sosend+0x4f8>
               error = EWOULDBLOCK;
 8035120:	008002c4 	movi	r2,11
 8035124:	e0bffb15 	stw	r2,-20(fp)
            goto release;
 8035128:	00007d06 	br	8035320 <sosend+0x4f8>
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
 803512c:	e0bff717 	ldw	r2,-36(fp)
 8035130:	10c0190b 	ldhu	r3,100(r2)
 8035134:	00bfff84 	movi	r2,-2
 8035138:	1884703a 	and	r2,r3,r2
 803513c:	1007883a 	mov	r3,r2
 8035140:	e0bff717 	ldw	r2,-36(fp)
 8035144:	10c0190d 	sth	r3,100(r2)
 8035148:	e0bff717 	ldw	r2,-36(fp)
 803514c:	10801904 	addi	r2,r2,100
 8035150:	1009883a 	mov	r4,r2
 8035154:	802c7b80 	call	802c7b8 <tcp_wakeup>
         sbwait(&so->so_snd);
 8035158:	e0bff717 	ldw	r2,-36(fp)
 803515c:	10801204 	addi	r2,r2,72
 8035160:	1009883a 	mov	r4,r2
 8035164:	8036e980 	call	8036e98 <sbwait>
         goto restart;
 8035168:	003f6006 	br	8034eec <sosend+0xc4>
      }

      while (space > 0) 
      {
         len = resid;
 803516c:	e0bffc17 	ldw	r2,-16(fp)
 8035170:	e0bff815 	stw	r2,-32(fp)
         if ( so->so_type == SOCK_STREAM )
 8035174:	e0bff717 	ldw	r2,-36(fp)
 8035178:	10800983 	ldbu	r2,38(r2)
 803517c:	10803fcc 	andi	r2,r2,255
 8035180:	1080201c 	xori	r2,r2,128
 8035184:	10bfe004 	addi	r2,r2,-128
 8035188:	10800058 	cmpnei	r2,r2,1
 803518c:	1000171e 	bne	r2,zero,80351ec <sosend+0x3c4>
         {
            m = m_getwithdata(MT_TXDATA, len);
 8035190:	e17ff817 	ldw	r5,-32(fp)
 8035194:	01000084 	movi	r4,2
 8035198:	8030f540 	call	8030f54 <m_getnbuf>
 803519c:	e0bffe15 	stw	r2,-8(fp)
            if (!m)   
 80351a0:	e0bffe17 	ldw	r2,-8(fp)
 80351a4:	1000031e 	bne	r2,zero,80351b4 <sosend+0x38c>
               snderr(ENOBUFS);
 80351a8:	00801a44 	movi	r2,105
 80351ac:	e0bffb15 	stw	r2,-20(fp)
 80351b0:	00006006 	br	8035334 <sosend+0x50c>
            MEMCPY(m->m_data, data, len);
 80351b4:	e0bffe17 	ldw	r2,-8(fp)
 80351b8:	10800317 	ldw	r2,12(r2)
 80351bc:	e0fff817 	ldw	r3,-32(fp)
 80351c0:	180d883a 	mov	r6,r3
 80351c4:	e17ff517 	ldw	r5,-44(fp)
 80351c8:	1009883a 	mov	r4,r2
 80351cc:	80037cc0 	call	80037cc <memcpy>
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 80351d0:	e0bff717 	ldw	r2,-36(fp)
 80351d4:	1080190b 	ldhu	r2,100(r2)
 80351d8:	10802014 	ori	r2,r2,128
 80351dc:	1007883a 	mov	r3,r2
 80351e0:	e0bff717 	ldw	r2,-36(fp)
 80351e4:	10c0190d 	sth	r3,100(r2)
 80351e8:	00000706 	br	8035208 <sosend+0x3e0>
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
 80351ec:	000b883a 	mov	r5,zero
 80351f0:	01000084 	movi	r4,2
 80351f4:	8030f540 	call	8030f54 <m_getnbuf>
 80351f8:	e0bffe15 	stw	r2,-8(fp)
            m->m_data = data;
 80351fc:	e0bffe17 	ldw	r2,-8(fp)
 8035200:	e0fff517 	ldw	r3,-44(fp)
 8035204:	10c00315 	stw	r3,12(r2)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 8035208:	e0bff417 	ldw	r2,-48(fp)
 803520c:	10c00017 	ldw	r3,0(r2)
 8035210:	e0bff817 	ldw	r2,-32(fp)
 8035214:	1887c83a 	sub	r3,r3,r2
 8035218:	e0bff417 	ldw	r2,-48(fp)
 803521c:	10c00015 	stw	r3,0(r2)
         resid -= len;
 8035220:	e0fffc17 	ldw	r3,-16(fp)
 8035224:	e0bff817 	ldw	r2,-32(fp)
 8035228:	1885c83a 	sub	r2,r3,r2
 803522c:	e0bffc15 	stw	r2,-16(fp)
         data += len;
 8035230:	e0bff817 	ldw	r2,-32(fp)
 8035234:	e0fff517 	ldw	r3,-44(fp)
 8035238:	1885883a 	add	r2,r3,r2
 803523c:	e0bff515 	stw	r2,-44(fp)
         m->m_len = len;
 8035240:	e0fff817 	ldw	r3,-32(fp)
 8035244:	e0bffe17 	ldw	r2,-8(fp)
 8035248:	10c00215 	stw	r3,8(r2)
         if (head == (struct mbuf *)NULL)
 803524c:	e0bfff17 	ldw	r2,-4(fp)
 8035250:	1000021e 	bne	r2,zero,803525c <sosend+0x434>
            head = m;
 8035254:	e0bffe17 	ldw	r2,-8(fp)
 8035258:	e0bfff15 	stw	r2,-4(fp)
         if (error)
 803525c:	e0bffb17 	ldw	r2,-20(fp)
 8035260:	1000311e 	bne	r2,zero,8035328 <sosend+0x500>
            goto release;
         if (*data_length <= 0)
 8035264:	e0bff417 	ldw	r2,-48(fp)
 8035268:	10800017 	ldw	r2,0(r2)
 803526c:	0080030e 	bge	zero,r2,803527c <sosend+0x454>
      while (space > 0) 
 8035270:	e0bffd17 	ldw	r2,-12(fp)
 8035274:	00bfbd16 	blt	zero,r2,803516c <sosend+0x344>
 8035278:	00000106 	br	8035280 <sosend+0x458>
            break;
 803527c:	0001883a 	nop
      }

      if (dontroute)
 8035280:	e0bff917 	ldw	r2,-28(fp)
 8035284:	10000526 	beq	r2,zero,803529c <sosend+0x474>
         so->so_options |= SO_DONTROUTE;
 8035288:	e0bff717 	ldw	r2,-36(fp)
 803528c:	10800417 	ldw	r2,16(r2)
 8035290:	10c00414 	ori	r3,r2,16
 8035294:	e0bff717 	ldw	r2,-36(fp)
 8035298:	10c00415 	stw	r3,16(r2)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 803529c:	e0800217 	ldw	r2,8(fp)
 80352a0:	1080004c 	andi	r2,r2,1
 80352a4:	10000226 	beq	r2,zero,80352b0 <sosend+0x488>
 80352a8:	00800384 	movi	r2,14
 80352ac:	00000106 	br	80352b4 <sosend+0x48c>
 80352b0:	00800244 	movi	r2,9
 80352b4:	e0fff717 	ldw	r3,-36(fp)
 80352b8:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
 80352bc:	e0bff717 	ldw	r2,-36(fp)
 80352c0:	10800217 	ldw	r2,8(r2)
 80352c4:	10800317 	ldw	r2,12(r2)
 80352c8:	e1bff617 	ldw	r6,-40(fp)
 80352cc:	e17fff17 	ldw	r5,-4(fp)
 80352d0:	e13ff717 	ldw	r4,-36(fp)
 80352d4:	103ee83a 	callr	r2
 80352d8:	e0bffb15 	stw	r2,-20(fp)

      if (dontroute)
 80352dc:	e0bff917 	ldw	r2,-28(fp)
 80352e0:	10000626 	beq	r2,zero,80352fc <sosend+0x4d4>
         so->so_options &= ~SO_DONTROUTE;
 80352e4:	e0bff717 	ldw	r2,-36(fp)
 80352e8:	10c00417 	ldw	r3,16(r2)
 80352ec:	00bffbc4 	movi	r2,-17
 80352f0:	1886703a 	and	r3,r3,r2
 80352f4:	e0bff717 	ldw	r2,-36(fp)
 80352f8:	10c00415 	stw	r3,16(r2)

      head = (struct mbuf *)NULL;
 80352fc:	e03fff15 	stw	zero,-4(fp)
      first = 0;
 8035300:	e03ffa15 	stw	zero,-24(fp)
   } while ((resid != 0) && (error == 0));
 8035304:	e0bffc17 	ldw	r2,-16(fp)
 8035308:	10000926 	beq	r2,zero,8035330 <sosend+0x508>
 803530c:	e0bffb17 	ldw	r2,-20(fp)
 8035310:	103f0626 	beq	r2,zero,8034f2c <sosend+0x104>

release:
 8035314:	00000606 	br	8035330 <sosend+0x508>
               goto release;
 8035318:	0001883a 	nop
 803531c:	00000506 	br	8035334 <sosend+0x50c>
            goto release;
 8035320:	0001883a 	nop
 8035324:	00000306 	br	8035334 <sosend+0x50c>
            goto release;
 8035328:	0001883a 	nop
 803532c:	00000106 	br	8035334 <sosend+0x50c>
release:
 8035330:	0001883a 	nop
   sbunlock(&so->so_snd);  
 8035334:	e0bff717 	ldw	r2,-36(fp)
 8035338:	10c0190b 	ldhu	r3,100(r2)
 803533c:	00bfff84 	movi	r2,-2
 8035340:	1884703a 	and	r2,r3,r2
 8035344:	1007883a 	mov	r3,r2
 8035348:	e0bff717 	ldw	r2,-36(fp)
 803534c:	10c0190d 	sth	r3,100(r2)
 8035350:	e0bff717 	ldw	r2,-36(fp)
 8035354:	10801904 	addi	r2,r2,100
 8035358:	1009883a 	mov	r4,r2
 803535c:	802c7b80 	call	802c7b8 <tcp_wakeup>
   if (head)
 8035360:	e0bfff17 	ldw	r2,-4(fp)
 8035364:	10000226 	beq	r2,zero,8035370 <sosend+0x548>
      m_freem(head);
 8035368:	e13fff17 	ldw	r4,-4(fp)
 803536c:	80311e00 	call	80311e0 <m_freem>
   return error;
 8035370:	e0bffb17 	ldw	r2,-20(fp)
}
 8035374:	e037883a 	mov	sp,fp
 8035378:	dfc00117 	ldw	ra,4(sp)
 803537c:	df000017 	ldw	fp,0(sp)
 8035380:	dec00204 	addi	sp,sp,8
 8035384:	f800283a 	ret

08035388 <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
 8035388:	defff204 	addi	sp,sp,-56
 803538c:	dfc00d15 	stw	ra,52(sp)
 8035390:	df000c15 	stw	fp,48(sp)
 8035394:	df000c04 	addi	fp,sp,48
 8035398:	e13ff715 	stw	r4,-36(fp)
 803539c:	e17ff615 	stw	r5,-40(fp)
 80353a0:	e1bff515 	stw	r6,-44(fp)
 80353a4:	e1fff415 	stw	r7,-48(fp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
 80353a8:	e03ffd15 	stw	zero,-12(fp)
   int   offset;
   struct protosw *  pr =  so->so_proto;
 80353ac:	e0bff717 	ldw	r2,-36(fp)
 80353b0:	10800217 	ldw	r2,8(r2)
 80353b4:	e0bff915 	stw	r2,-28(fp)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
 80353b8:	e0bff617 	ldw	r2,-40(fp)
 80353bc:	10000226 	beq	r2,zero,80353c8 <soreceive+0x40>
      *aname = 0;
 80353c0:	e0bff617 	ldw	r2,-40(fp)
 80353c4:	10000015 	stw	zero,0(r2)
   if (flags & MSG_OOB) 
 80353c8:	e0800217 	ldw	r2,8(fp)
 80353cc:	1080004c 	andi	r2,r2,1
 80353d0:	10004126 	beq	r2,zero,80354d8 <soreceive+0x150>
   {
      m = m_get (M_WAIT, MT_RXDATA);
 80353d4:	000b883a 	mov	r5,zero
 80353d8:	01000044 	movi	r4,1
 80353dc:	8030f540 	call	8030f54 <m_getnbuf>
 80353e0:	e0bfff15 	stw	r2,-4(fp)
      if (m == NULL)
 80353e4:	e0bfff17 	ldw	r2,-4(fp)
 80353e8:	1000021e 	bne	r2,zero,80353f4 <soreceive+0x6c>
         return ENOBUFS;
 80353ec:	00801a44 	movi	r2,105
 80353f0:	0001b606 	br	8035acc <soreceive+0x744>
      lflags = flags & MSG_PEEK;
 80353f4:	e0800217 	ldw	r2,8(fp)
 80353f8:	1080008c 	andi	r2,r2,2
 80353fc:	e0bff815 	stw	r2,-32(fp)

      so->so_req = PRU_RCVOOB;
 8035400:	e0bff717 	ldw	r2,-36(fp)
 8035404:	00c00344 	movi	r3,13
 8035408:	10c00715 	stw	r3,28(r2)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
 803540c:	e0bff917 	ldw	r2,-28(fp)
 8035410:	10800317 	ldw	r2,12(r2)
 8035414:	e0fff817 	ldw	r3,-32(fp)
 8035418:	180d883a 	mov	r6,r3
 803541c:	e17fff17 	ldw	r5,-4(fp)
 8035420:	e13ff717 	ldw	r4,-36(fp)
 8035424:	103ee83a 	callr	r2
 8035428:	e0bffd15 	stw	r2,-12(fp)
      if (error == 0)
 803542c:	e0bffd17 	ldw	r2,-12(fp)
 8035430:	1000231e 	bne	r2,zero,80354c0 <soreceive+0x138>
      {
         do 
         {
            len = *datalen;
 8035434:	e0bff417 	ldw	r2,-48(fp)
 8035438:	10800017 	ldw	r2,0(r2)
 803543c:	e0bffe15 	stw	r2,-8(fp)
            if (len > (int)m->m_len)
 8035440:	e0bfff17 	ldw	r2,-4(fp)
 8035444:	10800217 	ldw	r2,8(r2)
 8035448:	1007883a 	mov	r3,r2
 803544c:	e0bffe17 	ldw	r2,-8(fp)
 8035450:	1880030e 	bge	r3,r2,8035460 <soreceive+0xd8>
               len = m->m_len;
 8035454:	e0bfff17 	ldw	r2,-4(fp)
 8035458:	10800217 	ldw	r2,8(r2)
 803545c:	e0bffe15 	stw	r2,-8(fp)

            MEMCPY(data, mtod(m, char*), len);
 8035460:	e0bfff17 	ldw	r2,-4(fp)
 8035464:	10800317 	ldw	r2,12(r2)
 8035468:	e0fffe17 	ldw	r3,-8(fp)
 803546c:	180d883a 	mov	r6,r3
 8035470:	100b883a 	mov	r5,r2
 8035474:	e13ff517 	ldw	r4,-44(fp)
 8035478:	80037cc0 	call	80037cc <memcpy>
            data += len;
 803547c:	e0bffe17 	ldw	r2,-8(fp)
 8035480:	e0fff517 	ldw	r3,-44(fp)
 8035484:	1885883a 	add	r2,r3,r2
 8035488:	e0bff515 	stw	r2,-44(fp)
            *datalen = len;
 803548c:	e0bff417 	ldw	r2,-48(fp)
 8035490:	e0fffe17 	ldw	r3,-8(fp)
 8035494:	10c00015 	stw	r3,0(r2)
            m = m_free(m);
 8035498:	e13fff17 	ldw	r4,-4(fp)
 803549c:	80310dc0 	call	80310dc <m_free>
 80354a0:	e0bfff15 	stw	r2,-4(fp)
         } while (*datalen && (error == 0) && m);
 80354a4:	e0bff417 	ldw	r2,-48(fp)
 80354a8:	10800017 	ldw	r2,0(r2)
 80354ac:	10000426 	beq	r2,zero,80354c0 <soreceive+0x138>
 80354b0:	e0bffd17 	ldw	r2,-12(fp)
 80354b4:	1000021e 	bne	r2,zero,80354c0 <soreceive+0x138>
 80354b8:	e0bfff17 	ldw	r2,-4(fp)
 80354bc:	103fdd1e 	bne	r2,zero,8035434 <soreceive+0xac>
      }

      if (m)
 80354c0:	e0bfff17 	ldw	r2,-4(fp)
 80354c4:	10000226 	beq	r2,zero,80354d0 <soreceive+0x148>
         m_freem(m);
 80354c8:	e13fff17 	ldw	r4,-4(fp)
 80354cc:	80311e00 	call	80311e0 <m_freem>
      return (error);
 80354d0:	e0bffd17 	ldw	r2,-12(fp)
 80354d4:	00017d06 	br	8035acc <soreceive+0x744>
   }

restart:
 80354d8:	0001883a 	nop
   sblock (&so->so_rcv);
 80354dc:	00000406 	br	80354f0 <soreceive+0x168>
 80354e0:	e0bff717 	ldw	r2,-36(fp)
 80354e4:	10801104 	addi	r2,r2,68
 80354e8:	1009883a 	mov	r4,r2
 80354ec:	802c66c0 	call	802c66c <tcp_sleep>
 80354f0:	e0bff717 	ldw	r2,-36(fp)
 80354f4:	1080110b 	ldhu	r2,68(r2)
 80354f8:	10bfffcc 	andi	r2,r2,65535
 80354fc:	1080004c 	andi	r2,r2,1
 8035500:	103ff71e 	bne	r2,zero,80354e0 <soreceive+0x158>
 8035504:	e0bff717 	ldw	r2,-36(fp)
 8035508:	1080110b 	ldhu	r2,68(r2)
 803550c:	10800054 	ori	r2,r2,1
 8035510:	1007883a 	mov	r3,r2
 8035514:	e0bff717 	ldw	r2,-36(fp)
 8035518:	10c0110d 	sth	r3,68(r2)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
 803551c:	e0bff717 	ldw	r2,-36(fp)
 8035520:	10800a17 	ldw	r2,40(r2)
 8035524:	10003a1e 	bne	r2,zero,8035610 <soreceive+0x288>
   {
      if (so->so_error) 
 8035528:	e0bff717 	ldw	r2,-36(fp)
 803552c:	10800617 	ldw	r2,24(r2)
 8035530:	10000626 	beq	r2,zero,803554c <soreceive+0x1c4>
      {
         error = so->so_error;
 8035534:	e0bff717 	ldw	r2,-36(fp)
 8035538:	10800617 	ldw	r2,24(r2)
 803553c:	e0bffd15 	stw	r2,-12(fp)
         so->so_error = 0;
 8035540:	e0bff717 	ldw	r2,-36(fp)
 8035544:	10000615 	stw	zero,24(r2)
         goto release;
 8035548:	00015406 	br	8035a9c <soreceive+0x714>
      }
      if (so->so_state & SS_CANTRCVMORE)
 803554c:	e0bff717 	ldw	r2,-36(fp)
 8035550:	1080088b 	ldhu	r2,34(r2)
 8035554:	10bfffcc 	andi	r2,r2,65535
 8035558:	1080080c 	andi	r2,r2,32
 803555c:	10014a1e 	bne	r2,zero,8035a88 <soreceive+0x700>
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 8035560:	e0bff717 	ldw	r2,-36(fp)
 8035564:	1080088b 	ldhu	r2,34(r2)
 8035568:	10bfffcc 	andi	r2,r2,65535
 803556c:	1080008c 	andi	r2,r2,2
 8035570:	1000091e 	bne	r2,zero,8035598 <soreceive+0x210>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
 8035574:	e0bff717 	ldw	r2,-36(fp)
 8035578:	10800217 	ldw	r2,8(r2)
 803557c:	1080010b 	ldhu	r2,4(r2)
 8035580:	10bfffcc 	andi	r2,r2,65535
 8035584:	1080010c 	andi	r2,r2,4
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 8035588:	10000326 	beq	r2,zero,8035598 <soreceive+0x210>
      {
         error = ENOTCONN;
 803558c:	00802004 	movi	r2,128
 8035590:	e0bffd15 	stw	r2,-12(fp)
         goto release;
 8035594:	00014106 	br	8035a9c <soreceive+0x714>
      }
      if (*datalen == 0)
 8035598:	e0bff417 	ldw	r2,-48(fp)
 803559c:	10800017 	ldw	r2,0(r2)
 80355a0:	10013b26 	beq	r2,zero,8035a90 <soreceive+0x708>
         goto release;
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
 80355a4:	e0bff717 	ldw	r2,-36(fp)
 80355a8:	1080088b 	ldhu	r2,34(r2)
 80355ac:	10bfffcc 	andi	r2,r2,65535
 80355b0:	1080400c 	andi	r2,r2,256
 80355b4:	1000031e 	bne	r2,zero,80355c4 <soreceive+0x23c>
 80355b8:	e0800217 	ldw	r2,8(fp)
 80355bc:	1080080c 	andi	r2,r2,32
 80355c0:	10000326 	beq	r2,zero,80355d0 <soreceive+0x248>
      {
         error = EWOULDBLOCK;
 80355c4:	008002c4 	movi	r2,11
 80355c8:	e0bffd15 	stw	r2,-12(fp)
         goto release;
 80355cc:	00013306 	br	8035a9c <soreceive+0x714>
      }
      sbunlock(&so->so_rcv);
 80355d0:	e0bff717 	ldw	r2,-36(fp)
 80355d4:	10c0110b 	ldhu	r3,68(r2)
 80355d8:	00bfff84 	movi	r2,-2
 80355dc:	1884703a 	and	r2,r3,r2
 80355e0:	1007883a 	mov	r3,r2
 80355e4:	e0bff717 	ldw	r2,-36(fp)
 80355e8:	10c0110d 	sth	r3,68(r2)
 80355ec:	e0bff717 	ldw	r2,-36(fp)
 80355f0:	10801104 	addi	r2,r2,68
 80355f4:	1009883a 	mov	r4,r2
 80355f8:	802c7b80 	call	802c7b8 <tcp_wakeup>
      sbwait(&so->so_rcv);
 80355fc:	e0bff717 	ldw	r2,-36(fp)
 8035600:	10800a04 	addi	r2,r2,40
 8035604:	1009883a 	mov	r4,r2
 8035608:	8036e980 	call	8036e98 <sbwait>
      goto restart;
 803560c:	003fb306 	br	80354dc <soreceive+0x154>
   }
   m = so->so_rcv.sb_mb;
 8035610:	e0bff717 	ldw	r2,-36(fp)
 8035614:	10801017 	ldw	r2,64(r2)
 8035618:	e0bfff15 	stw	r2,-4(fp)
   if (m == 0)
 803561c:	e0bfff17 	ldw	r2,-4(fp)
 8035620:	1000031e 	bne	r2,zero,8035630 <soreceive+0x2a8>
      panic("sorecv 1");
 8035624:	01020174 	movhi	r4,2053
 8035628:	210f1104 	addi	r4,r4,15428
 803562c:	802bd8c0 	call	802bd8c <panic>
   nextrecord = m->m_act;
 8035630:	e0bfff17 	ldw	r2,-4(fp)
 8035634:	10800717 	ldw	r2,28(r2)
 8035638:	e0bffb15 	stw	r2,-20(fp)
   if (pr->pr_flags & PR_ADDR) 
 803563c:	e0bff917 	ldw	r2,-28(fp)
 8035640:	1080010b 	ldhu	r2,4(r2)
 8035644:	10bfffcc 	andi	r2,r2,65535
 8035648:	1080008c 	andi	r2,r2,2
 803564c:	10004226 	beq	r2,zero,8035758 <soreceive+0x3d0>
   {
      if (m->m_type != MT_SONAME) 
 8035650:	e0bfff17 	ldw	r2,-4(fp)
 8035654:	10800817 	ldw	r2,32(r2)
 8035658:	10800260 	cmpeqi	r2,r2,9
 803565c:	1000091e 	bne	r2,zero,8035684 <soreceive+0x2fc>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
 8035660:	e0bfff17 	ldw	r2,-4(fp)
 8035664:	10800817 	ldw	r2,32(r2)
 8035668:	100b883a 	mov	r5,r2
 803566c:	01020174 	movhi	r4,2053
 8035670:	210f1404 	addi	r4,r4,15440
 8035674:	8003b840 	call	8003b84 <printf>
         panic("sorecv 2");
 8035678:	01020174 	movhi	r4,2053
 803567c:	210f1a04 	addi	r4,r4,15464
 8035680:	802bd8c0 	call	802bd8c <panic>
      }
      if (flags & MSG_PEEK) 
 8035684:	e0800217 	ldw	r2,8(fp)
 8035688:	1080008c 	andi	r2,r2,2
 803568c:	10000f26 	beq	r2,zero,80356cc <soreceive+0x344>
      {
         if (aname)
 8035690:	e0bff617 	ldw	r2,-40(fp)
 8035694:	10000926 	beq	r2,zero,80356bc <soreceive+0x334>
            *aname = m_copy (m, 0, m->m_len);
 8035698:	e0bfff17 	ldw	r2,-4(fp)
 803569c:	10800217 	ldw	r2,8(r2)
 80356a0:	100d883a 	mov	r6,r2
 80356a4:	000b883a 	mov	r5,zero
 80356a8:	e13fff17 	ldw	r4,-4(fp)
 80356ac:	80312280 	call	8031228 <m_copy>
 80356b0:	1007883a 	mov	r3,r2
 80356b4:	e0bff617 	ldw	r2,-40(fp)
 80356b8:	10c00015 	stw	r3,0(r2)
         m = m->m_next;
 80356bc:	e0bfff17 	ldw	r2,-4(fp)
 80356c0:	10800617 	ldw	r2,24(r2)
 80356c4:	e0bfff15 	stw	r2,-4(fp)
 80356c8:	00002306 	br	8035758 <soreceive+0x3d0>
      } else 
      {
         sbfree (&so->so_rcv, m);
 80356cc:	e0bff717 	ldw	r2,-36(fp)
 80356d0:	10c00a17 	ldw	r3,40(r2)
 80356d4:	e0bfff17 	ldw	r2,-4(fp)
 80356d8:	10800217 	ldw	r2,8(r2)
 80356dc:	1887c83a 	sub	r3,r3,r2
 80356e0:	e0bff717 	ldw	r2,-36(fp)
 80356e4:	10c00a15 	stw	r3,40(r2)
         if (aname) 
 80356e8:	e0bff617 	ldw	r2,-40(fp)
 80356ec:	10000d26 	beq	r2,zero,8035724 <soreceive+0x39c>
         {
            *aname = m;
 80356f0:	e0bff617 	ldw	r2,-40(fp)
 80356f4:	e0ffff17 	ldw	r3,-4(fp)
 80356f8:	10c00015 	stw	r3,0(r2)
            m = m->m_next;
 80356fc:	e0bfff17 	ldw	r2,-4(fp)
 8035700:	10800617 	ldw	r2,24(r2)
 8035704:	e0bfff15 	stw	r2,-4(fp)
            (*aname)->m_next = 0;
 8035708:	e0bff617 	ldw	r2,-40(fp)
 803570c:	10800017 	ldw	r2,0(r2)
 8035710:	10000615 	stw	zero,24(r2)
            so->so_rcv.sb_mb = m;
 8035714:	e0bff717 	ldw	r2,-36(fp)
 8035718:	e0ffff17 	ldw	r3,-4(fp)
 803571c:	10c01015 	stw	r3,64(r2)
 8035720:	00000806 	br	8035744 <soreceive+0x3bc>
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
 8035724:	e13fff17 	ldw	r4,-4(fp)
 8035728:	80310dc0 	call	80310dc <m_free>
 803572c:	1007883a 	mov	r3,r2
 8035730:	e0bff717 	ldw	r2,-36(fp)
 8035734:	10c01015 	stw	r3,64(r2)
            m = so->so_rcv.sb_mb;
 8035738:	e0bff717 	ldw	r2,-36(fp)
 803573c:	10801017 	ldw	r2,64(r2)
 8035740:	e0bfff15 	stw	r2,-4(fp)
         }
         if (m)
 8035744:	e0bfff17 	ldw	r2,-4(fp)
 8035748:	10000326 	beq	r2,zero,8035758 <soreceive+0x3d0>
            m->m_act = nextrecord;
 803574c:	e0bfff17 	ldw	r2,-4(fp)
 8035750:	e0fffb17 	ldw	r3,-20(fp)
 8035754:	10c00715 	stw	r3,28(r2)
      }
   }
   moff = 0;
 8035758:	e03ffa15 	stw	zero,-24(fp)
   offset = 0;
 803575c:	e03ffc15 	stw	zero,-16(fp)
   while (m && (*datalen > 0) && (error == 0))
 8035760:	00009e06 	br	80359dc <soreceive+0x654>
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
 8035764:	e0bfff17 	ldw	r2,-4(fp)
 8035768:	10800817 	ldw	r2,32(r2)
 803576c:	10800060 	cmpeqi	r2,r2,1
 8035770:	1000071e 	bne	r2,zero,8035790 <soreceive+0x408>
 8035774:	e0bfff17 	ldw	r2,-4(fp)
 8035778:	10800817 	ldw	r2,32(r2)
 803577c:	108000e0 	cmpeqi	r2,r2,3
 8035780:	1000031e 	bne	r2,zero,8035790 <soreceive+0x408>
         panic("sorecv 3");
 8035784:	01020174 	movhi	r4,2053
 8035788:	210f1d04 	addi	r4,r4,15476
 803578c:	802bd8c0 	call	802bd8c <panic>
      len = *datalen;
 8035790:	e0bff417 	ldw	r2,-48(fp)
 8035794:	10800017 	ldw	r2,0(r2)
 8035798:	e0bffe15 	stw	r2,-8(fp)
      so->so_state &= ~SS_RCVATMARK;
 803579c:	e0bff717 	ldw	r2,-36(fp)
 80357a0:	10c0088b 	ldhu	r3,34(r2)
 80357a4:	00bfefc4 	movi	r2,-65
 80357a8:	1884703a 	and	r2,r3,r2
 80357ac:	1007883a 	mov	r3,r2
 80357b0:	e0bff717 	ldw	r2,-36(fp)
 80357b4:	10c0088d 	sth	r3,34(r2)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
 80357b8:	e0bff717 	ldw	r2,-36(fp)
 80357bc:	10801a17 	ldw	r2,104(r2)
 80357c0:	10000c26 	beq	r2,zero,80357f4 <soreceive+0x46c>
 80357c4:	e0bff717 	ldw	r2,-36(fp)
 80357c8:	10c01a17 	ldw	r3,104(r2)
 80357cc:	e0bffc17 	ldw	r2,-16(fp)
 80357d0:	1885c83a 	sub	r2,r3,r2
 80357d4:	1007883a 	mov	r3,r2
 80357d8:	e0bffe17 	ldw	r2,-8(fp)
 80357dc:	1880050e 	bge	r3,r2,80357f4 <soreceive+0x46c>
         len = (int)(so->so_oobmark - offset);
 80357e0:	e0bff717 	ldw	r2,-36(fp)
 80357e4:	10c01a17 	ldw	r3,104(r2)
 80357e8:	e0bffc17 	ldw	r2,-16(fp)
 80357ec:	1885c83a 	sub	r2,r3,r2
 80357f0:	e0bffe15 	stw	r2,-8(fp)
      if (len > (int)(m->m_len - moff))
 80357f4:	e0bfff17 	ldw	r2,-4(fp)
 80357f8:	10c00217 	ldw	r3,8(r2)
 80357fc:	e0bffa17 	ldw	r2,-24(fp)
 8035800:	1885c83a 	sub	r2,r3,r2
 8035804:	1007883a 	mov	r3,r2
 8035808:	e0bffe17 	ldw	r2,-8(fp)
 803580c:	1880050e 	bge	r3,r2,8035824 <soreceive+0x49c>
         len = m->m_len - moff;
 8035810:	e0bfff17 	ldw	r2,-4(fp)
 8035814:	10c00217 	ldw	r3,8(r2)
 8035818:	e0bffa17 	ldw	r2,-24(fp)
 803581c:	1885c83a 	sub	r2,r3,r2
 8035820:	e0bffe15 	stw	r2,-8(fp)
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
 8035824:	e0bfff17 	ldw	r2,-4(fp)
 8035828:	10c00317 	ldw	r3,12(r2)
 803582c:	e0bffa17 	ldw	r2,-24(fp)
 8035830:	1885883a 	add	r2,r3,r2
 8035834:	e0fffe17 	ldw	r3,-8(fp)
 8035838:	180d883a 	mov	r6,r3
 803583c:	100b883a 	mov	r5,r2
 8035840:	e13ff517 	ldw	r4,-44(fp)
 8035844:	80037cc0 	call	80037cc <memcpy>
      data += len;
 8035848:	e0bffe17 	ldw	r2,-8(fp)
 803584c:	e0fff517 	ldw	r3,-44(fp)
 8035850:	1885883a 	add	r2,r3,r2
 8035854:	e0bff515 	stw	r2,-44(fp)
      *datalen -= len;
 8035858:	e0bff417 	ldw	r2,-48(fp)
 803585c:	10c00017 	ldw	r3,0(r2)
 8035860:	e0bffe17 	ldw	r2,-8(fp)
 8035864:	1887c83a 	sub	r3,r3,r2
 8035868:	e0bff417 	ldw	r2,-48(fp)
 803586c:	10c00015 	stw	r3,0(r2)

      if (len == (int)(m->m_len - moff))
 8035870:	e0bfff17 	ldw	r2,-4(fp)
 8035874:	10c00217 	ldw	r3,8(r2)
 8035878:	e0bffa17 	ldw	r2,-24(fp)
 803587c:	1885c83a 	sub	r2,r3,r2
 8035880:	1007883a 	mov	r3,r2
 8035884:	e0bffe17 	ldw	r2,-8(fp)
 8035888:	10c0201e 	bne	r2,r3,803590c <soreceive+0x584>
      {
         if (flags & MSG_PEEK) 
 803588c:	e0800217 	ldw	r2,8(fp)
 8035890:	1080008c 	andi	r2,r2,2
 8035894:	10000526 	beq	r2,zero,80358ac <soreceive+0x524>
         {
            m = m->m_next;
 8035898:	e0bfff17 	ldw	r2,-4(fp)
 803589c:	10800617 	ldw	r2,24(r2)
 80358a0:	e0bfff15 	stw	r2,-4(fp)
            moff = 0;
 80358a4:	e03ffa15 	stw	zero,-24(fp)
 80358a8:	00003206 	br	8035974 <soreceive+0x5ec>
         } else 
         {
            nextrecord = m->m_act;
 80358ac:	e0bfff17 	ldw	r2,-4(fp)
 80358b0:	10800717 	ldw	r2,28(r2)
 80358b4:	e0bffb15 	stw	r2,-20(fp)
            sbfree(&so->so_rcv, m);
 80358b8:	e0bff717 	ldw	r2,-36(fp)
 80358bc:	10c00a17 	ldw	r3,40(r2)
 80358c0:	e0bfff17 	ldw	r2,-4(fp)
 80358c4:	10800217 	ldw	r2,8(r2)
 80358c8:	1887c83a 	sub	r3,r3,r2
 80358cc:	e0bff717 	ldw	r2,-36(fp)
 80358d0:	10c00a15 	stw	r3,40(r2)
            {
               MFREE(m, so->so_rcv.sb_mb);
 80358d4:	e13fff17 	ldw	r4,-4(fp)
 80358d8:	80310dc0 	call	80310dc <m_free>
 80358dc:	1007883a 	mov	r3,r2
 80358e0:	e0bff717 	ldw	r2,-36(fp)
 80358e4:	10c01015 	stw	r3,64(r2)
               m = so->so_rcv.sb_mb;
 80358e8:	e0bff717 	ldw	r2,-36(fp)
 80358ec:	10801017 	ldw	r2,64(r2)
 80358f0:	e0bfff15 	stw	r2,-4(fp)
            }
            if (m)
 80358f4:	e0bfff17 	ldw	r2,-4(fp)
 80358f8:	10001e26 	beq	r2,zero,8035974 <soreceive+0x5ec>
               m->m_act = nextrecord;
 80358fc:	e0bfff17 	ldw	r2,-4(fp)
 8035900:	e0fffb17 	ldw	r3,-20(fp)
 8035904:	10c00715 	stw	r3,28(r2)
 8035908:	00001a06 	br	8035974 <soreceive+0x5ec>
         }
      } else 
      {
         if (flags & MSG_PEEK)
 803590c:	e0800217 	ldw	r2,8(fp)
 8035910:	1080008c 	andi	r2,r2,2
 8035914:	10000526 	beq	r2,zero,803592c <soreceive+0x5a4>
            moff += len;
 8035918:	e0fffa17 	ldw	r3,-24(fp)
 803591c:	e0bffe17 	ldw	r2,-8(fp)
 8035920:	1885883a 	add	r2,r3,r2
 8035924:	e0bffa15 	stw	r2,-24(fp)
 8035928:	00001206 	br	8035974 <soreceive+0x5ec>
         else 
         {
            m->m_data += len;
 803592c:	e0bfff17 	ldw	r2,-4(fp)
 8035930:	10c00317 	ldw	r3,12(r2)
 8035934:	e0bffe17 	ldw	r2,-8(fp)
 8035938:	1887883a 	add	r3,r3,r2
 803593c:	e0bfff17 	ldw	r2,-4(fp)
 8035940:	10c00315 	stw	r3,12(r2)
            m->m_len -= len;
 8035944:	e0bfff17 	ldw	r2,-4(fp)
 8035948:	10c00217 	ldw	r3,8(r2)
 803594c:	e0bffe17 	ldw	r2,-8(fp)
 8035950:	1887c83a 	sub	r3,r3,r2
 8035954:	e0bfff17 	ldw	r2,-4(fp)
 8035958:	10c00215 	stw	r3,8(r2)
            so->so_rcv.sb_cc -= len;
 803595c:	e0bff717 	ldw	r2,-36(fp)
 8035960:	10c00a17 	ldw	r3,40(r2)
 8035964:	e0bffe17 	ldw	r2,-8(fp)
 8035968:	1887c83a 	sub	r3,r3,r2
 803596c:	e0bff717 	ldw	r2,-36(fp)
 8035970:	10c00a15 	stw	r3,40(r2)
         }
      }
      if (so->so_oobmark) 
 8035974:	e0bff717 	ldw	r2,-36(fp)
 8035978:	10801a17 	ldw	r2,104(r2)
 803597c:	10001726 	beq	r2,zero,80359dc <soreceive+0x654>
      {
         if ((flags & MSG_PEEK) == 0) 
 8035980:	e0800217 	ldw	r2,8(fp)
 8035984:	1080008c 	andi	r2,r2,2
 8035988:	1000101e 	bne	r2,zero,80359cc <soreceive+0x644>
         {
            so->so_oobmark -= len;
 803598c:	e0bff717 	ldw	r2,-36(fp)
 8035990:	10c01a17 	ldw	r3,104(r2)
 8035994:	e0bffe17 	ldw	r2,-8(fp)
 8035998:	1887c83a 	sub	r3,r3,r2
 803599c:	e0bff717 	ldw	r2,-36(fp)
 80359a0:	10c01a15 	stw	r3,104(r2)
            if (so->so_oobmark == 0) 
 80359a4:	e0bff717 	ldw	r2,-36(fp)
 80359a8:	10801a17 	ldw	r2,104(r2)
 80359ac:	10000b1e 	bne	r2,zero,80359dc <soreceive+0x654>
            {
               so->so_state |= SS_RCVATMARK;
 80359b0:	e0bff717 	ldw	r2,-36(fp)
 80359b4:	1080088b 	ldhu	r2,34(r2)
 80359b8:	10801014 	ori	r2,r2,64
 80359bc:	1007883a 	mov	r3,r2
 80359c0:	e0bff717 	ldw	r2,-36(fp)
 80359c4:	10c0088d 	sth	r3,34(r2)
               break;
 80359c8:	00000b06 	br	80359f8 <soreceive+0x670>
            }
         } else
            offset += len;
 80359cc:	e0fffc17 	ldw	r3,-16(fp)
 80359d0:	e0bffe17 	ldw	r2,-8(fp)
 80359d4:	1885883a 	add	r2,r3,r2
 80359d8:	e0bffc15 	stw	r2,-16(fp)
   while (m && (*datalen > 0) && (error == 0))
 80359dc:	e0bfff17 	ldw	r2,-4(fp)
 80359e0:	10000526 	beq	r2,zero,80359f8 <soreceive+0x670>
 80359e4:	e0bff417 	ldw	r2,-48(fp)
 80359e8:	10800017 	ldw	r2,0(r2)
 80359ec:	0080020e 	bge	zero,r2,80359f8 <soreceive+0x670>
 80359f0:	e0bffd17 	ldw	r2,-12(fp)
 80359f4:	103f5b26 	beq	r2,zero,8035764 <soreceive+0x3dc>
      }
   }

   if ((flags & MSG_PEEK) == 0) 
 80359f8:	e0800217 	ldw	r2,8(fp)
 80359fc:	1080008c 	andi	r2,r2,2
 8035a00:	1000251e 	bne	r2,zero,8035a98 <soreceive+0x710>
   {
      if (m == 0)
 8035a04:	e0bfff17 	ldw	r2,-4(fp)
 8035a08:	1000041e 	bne	r2,zero,8035a1c <soreceive+0x694>
         so->so_rcv.sb_mb = nextrecord;
 8035a0c:	e0bff717 	ldw	r2,-36(fp)
 8035a10:	e0fffb17 	ldw	r3,-20(fp)
 8035a14:	10c01015 	stw	r3,64(r2)
 8035a18:	00000906 	br	8035a40 <soreceive+0x6b8>
      else if (pr->pr_flags & PR_ATOMIC)
 8035a1c:	e0bff917 	ldw	r2,-28(fp)
 8035a20:	1080010b 	ldhu	r2,4(r2)
 8035a24:	10bfffcc 	andi	r2,r2,65535
 8035a28:	1080004c 	andi	r2,r2,1
 8035a2c:	10000426 	beq	r2,zero,8035a40 <soreceive+0x6b8>
         (void) sbdroprecord(&so->so_rcv);
 8035a30:	e0bff717 	ldw	r2,-36(fp)
 8035a34:	10800a04 	addi	r2,r2,40
 8035a38:	1009883a 	mov	r4,r2
 8035a3c:	80379240 	call	8037924 <sbdroprecord>
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
 8035a40:	e0bff917 	ldw	r2,-28(fp)
 8035a44:	1080010b 	ldhu	r2,4(r2)
 8035a48:	10bfffcc 	andi	r2,r2,65535
 8035a4c:	1080020c 	andi	r2,r2,8
 8035a50:	10001126 	beq	r2,zero,8035a98 <soreceive+0x710>
 8035a54:	e0bff717 	ldw	r2,-36(fp)
 8035a58:	10800117 	ldw	r2,4(r2)
 8035a5c:	10000e26 	beq	r2,zero,8035a98 <soreceive+0x710>
      {
         so->so_req = PRU_RCVD;
 8035a60:	e0bff717 	ldw	r2,-36(fp)
 8035a64:	00c00204 	movi	r3,8
 8035a68:	10c00715 	stw	r3,28(r2)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
 8035a6c:	e0bff917 	ldw	r2,-28(fp)
 8035a70:	10800317 	ldw	r2,12(r2)
 8035a74:	000d883a 	mov	r6,zero
 8035a78:	000b883a 	mov	r5,zero
 8035a7c:	e13ff717 	ldw	r4,-36(fp)
 8035a80:	103ee83a 	callr	r2
 8035a84:	00000506 	br	8035a9c <soreceive+0x714>
         goto release;
 8035a88:	0001883a 	nop
 8035a8c:	00000306 	br	8035a9c <soreceive+0x714>
         goto release;
 8035a90:	0001883a 	nop
 8035a94:	00000106 	br	8035a9c <soreceive+0x714>
          (struct mbuf *)0);
      }
   }
release:
 8035a98:	0001883a 	nop
   sbunlock(&so->so_rcv);
 8035a9c:	e0bff717 	ldw	r2,-36(fp)
 8035aa0:	10c0110b 	ldhu	r3,68(r2)
 8035aa4:	00bfff84 	movi	r2,-2
 8035aa8:	1884703a 	and	r2,r3,r2
 8035aac:	1007883a 	mov	r3,r2
 8035ab0:	e0bff717 	ldw	r2,-36(fp)
 8035ab4:	10c0110d 	sth	r3,68(r2)
 8035ab8:	e0bff717 	ldw	r2,-36(fp)
 8035abc:	10801104 	addi	r2,r2,68
 8035ac0:	1009883a 	mov	r4,r2
 8035ac4:	802c7b80 	call	802c7b8 <tcp_wakeup>
   return (error);
 8035ac8:	e0bffd17 	ldw	r2,-12(fp)
}
 8035acc:	e037883a 	mov	sp,fp
 8035ad0:	dfc00117 	ldw	ra,4(sp)
 8035ad4:	df000017 	ldw	fp,0(sp)
 8035ad8:	dec00204 	addi	sp,sp,8
 8035adc:	f800283a 	ret

08035ae0 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
 8035ae0:	defffc04 	addi	sp,sp,-16
 8035ae4:	dfc00315 	stw	ra,12(sp)
 8035ae8:	df000215 	stw	fp,8(sp)
 8035aec:	df000204 	addi	fp,sp,8
 8035af0:	e13fff15 	stw	r4,-4(fp)
 8035af4:	e17ffe15 	stw	r5,-8(fp)
   how++;   /* convert 0,1,2 into 1,2,3 */
 8035af8:	e0bffe17 	ldw	r2,-8(fp)
 8035afc:	10800044 	addi	r2,r2,1
 8035b00:	e0bffe15 	stw	r2,-8(fp)
   if (how & 1)   /* caller wanted READ or BOTH */
 8035b04:	e0bffe17 	ldw	r2,-8(fp)
 8035b08:	1080004c 	andi	r2,r2,1
 8035b0c:	10000226 	beq	r2,zero,8035b18 <soshutdown+0x38>
      sorflush(so);
 8035b10:	e13fff17 	ldw	r4,-4(fp)
 8035b14:	8035b780 	call	8035b78 <sorflush>

   if (how & 2)   /* caller wanted WRITE or BOTH */
 8035b18:	e0bffe17 	ldw	r2,-8(fp)
 8035b1c:	1080008c 	andi	r2,r2,2
 8035b20:	10000f26 	beq	r2,zero,8035b60 <soshutdown+0x80>
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
 8035b24:	e0bfff17 	ldw	r2,-4(fp)
 8035b28:	10801204 	addi	r2,r2,72
 8035b2c:	1009883a 	mov	r4,r2
 8035b30:	80375e80 	call	80375e8 <sbflush>
      so->so_req = PRU_SHUTDOWN;
 8035b34:	e0bfff17 	ldw	r2,-4(fp)
 8035b38:	00c001c4 	movi	r3,7
 8035b3c:	10c00715 	stw	r3,28(r2)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 8035b40:	e0bfff17 	ldw	r2,-4(fp)
 8035b44:	10800217 	ldw	r2,8(r2)
 8035b48:	10800317 	ldw	r2,12(r2)
 8035b4c:	000d883a 	mov	r6,zero
 8035b50:	000b883a 	mov	r5,zero
 8035b54:	e13fff17 	ldw	r4,-4(fp)
 8035b58:	103ee83a 	callr	r2
 8035b5c:	00000106 	br	8035b64 <soshutdown+0x84>
   }

   return 0;
 8035b60:	0005883a 	mov	r2,zero
}
 8035b64:	e037883a 	mov	sp,fp
 8035b68:	dfc00117 	ldw	ra,4(sp)
 8035b6c:	df000017 	ldw	fp,0(sp)
 8035b70:	dec00204 	addi	sp,sp,8
 8035b74:	f800283a 	ret

08035b78 <sorflush>:
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
 8035b78:	defffb04 	addi	sp,sp,-20
 8035b7c:	dfc00415 	stw	ra,16(sp)
 8035b80:	df000315 	stw	fp,12(sp)
 8035b84:	df000304 	addi	fp,sp,12
 8035b88:	e13ffd15 	stw	r4,-12(fp)
   struct sockbuf *sb =  &so->so_rcv;
 8035b8c:	e0bffd17 	ldw	r2,-12(fp)
 8035b90:	10800a04 	addi	r2,r2,40
 8035b94:	e0bfff15 	stw	r2,-4(fp)
   int   s;

   sblock(sb);
 8035b98:	00000406 	br	8035bac <sorflush+0x34>
 8035b9c:	e0bfff17 	ldw	r2,-4(fp)
 8035ba0:	10800704 	addi	r2,r2,28
 8035ba4:	1009883a 	mov	r4,r2
 8035ba8:	802c66c0 	call	802c66c <tcp_sleep>
 8035bac:	e0bfff17 	ldw	r2,-4(fp)
 8035bb0:	1080070b 	ldhu	r2,28(r2)
 8035bb4:	10bfffcc 	andi	r2,r2,65535
 8035bb8:	1080004c 	andi	r2,r2,1
 8035bbc:	103ff71e 	bne	r2,zero,8035b9c <sorflush+0x24>
 8035bc0:	e0bfff17 	ldw	r2,-4(fp)
 8035bc4:	1080070b 	ldhu	r2,28(r2)
 8035bc8:	10800054 	ori	r2,r2,1
 8035bcc:	1007883a 	mov	r3,r2
 8035bd0:	e0bfff17 	ldw	r2,-4(fp)
 8035bd4:	10c0070d 	sth	r3,28(r2)
   socantrcvmore(so);
 8035bd8:	e13ffd17 	ldw	r4,-12(fp)
 8035bdc:	8036e040 	call	8036e04 <socantrcvmore>
   sbunlock(sb);
 8035be0:	e0bfff17 	ldw	r2,-4(fp)
 8035be4:	10c0070b 	ldhu	r3,28(r2)
 8035be8:	00bfff84 	movi	r2,-2
 8035bec:	1884703a 	and	r2,r3,r2
 8035bf0:	1007883a 	mov	r3,r2
 8035bf4:	e0bfff17 	ldw	r2,-4(fp)
 8035bf8:	10c0070d 	sth	r3,28(r2)
 8035bfc:	e0bfff17 	ldw	r2,-4(fp)
 8035c00:	10800704 	addi	r2,r2,28
 8035c04:	1009883a 	mov	r4,r2
 8035c08:	802c7b80 	call	802c7b8 <tcp_wakeup>
   sbrelease(sb);
 8035c0c:	e13fff17 	ldw	r4,-4(fp)
 8035c10:	80370680 	call	8037068 <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
 8035c14:	01800804 	movi	r6,32
 8035c18:	000b883a 	mov	r5,zero
 8035c1c:	e13fff17 	ldw	r4,-4(fp)
 8035c20:	80038cc0 	call	80038cc <memset>
   s = so->so_error;
 8035c24:	e0bffd17 	ldw	r2,-12(fp)
 8035c28:	10800617 	ldw	r2,24(r2)
 8035c2c:	e0bffe15 	stw	r2,-8(fp)
   so->so_error = ESHUTDOWN;
 8035c30:	e0bffd17 	ldw	r2,-12(fp)
 8035c34:	00c01b84 	movi	r3,110
 8035c38:	10c00615 	stw	r3,24(r2)
   sorwakeup(so);
 8035c3c:	e0bffd17 	ldw	r2,-12(fp)
 8035c40:	10800a04 	addi	r2,r2,40
 8035c44:	100b883a 	mov	r5,r2
 8035c48:	e13ffd17 	ldw	r4,-12(fp)
 8035c4c:	8036f040 	call	8036f04 <sbwakeup>
   so->so_error = s;
 8035c50:	e0bffd17 	ldw	r2,-12(fp)
 8035c54:	e0fffe17 	ldw	r3,-8(fp)
 8035c58:	10c00615 	stw	r3,24(r2)
}
 8035c5c:	0001883a 	nop
 8035c60:	e037883a 	mov	sp,fp
 8035c64:	dfc00117 	ldw	ra,4(sp)
 8035c68:	df000017 	ldw	fp,0(sp)
 8035c6c:	dec00204 	addi	sp,sp,8
 8035c70:	f800283a 	ret

08035c74 <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
 8035c74:	defff604 	addi	sp,sp,-40
 8035c78:	dfc00915 	stw	ra,36(sp)
 8035c7c:	df000815 	stw	fp,32(sp)
 8035c80:	df000804 	addi	fp,sp,32
 8035c84:	e13ffa15 	stw	r4,-24(fp)
 8035c88:	e17ff915 	stw	r5,-28(fp)
 8035c8c:	e1bff815 	stw	r6,-32(fp)
   int   error =  0;
 8035c90:	e03fff15 	stw	zero,-4(fp)

   switch (optname) 
 8035c94:	e0bff917 	ldw	r2,-28(fp)
 8035c98:	10900020 	cmpeqi	r2,r2,16384
 8035c9c:	1000791e 	bne	r2,zero,8035e84 <sosetopt+0x210>
 8035ca0:	e0bff917 	ldw	r2,-28(fp)
 8035ca4:	10900048 	cmpgei	r2,r2,16385
 8035ca8:	1001321e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035cac:	e0bff917 	ldw	r2,-28(fp)
 8035cb0:	10880120 	cmpeqi	r2,r2,8196
 8035cb4:	1000dc1e 	bne	r2,zero,8036028 <sosetopt+0x3b4>
 8035cb8:	e0bff917 	ldw	r2,-28(fp)
 8035cbc:	10880148 	cmpgei	r2,r2,8197
 8035cc0:	10012c1e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035cc4:	e0bff917 	ldw	r2,-28(fp)
 8035cc8:	108800e0 	cmpeqi	r2,r2,8195
 8035ccc:	1001021e 	bne	r2,zero,80360d8 <sosetopt+0x464>
 8035cd0:	e0bff917 	ldw	r2,-28(fp)
 8035cd4:	10880108 	cmpgei	r2,r2,8196
 8035cd8:	1001261e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035cdc:	e0bff917 	ldw	r2,-28(fp)
 8035ce0:	108405c8 	cmpgei	r2,r2,4119
 8035ce4:	1001231e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035ce8:	e0bff917 	ldw	r2,-28(fp)
 8035cec:	10840048 	cmpgei	r2,r2,4097
 8035cf0:	1000131e 	bne	r2,zero,8035d40 <sosetopt+0xcc>
 8035cf4:	e0bff917 	ldw	r2,-28(fp)
 8035cf8:	10808020 	cmpeqi	r2,r2,512
 8035cfc:	1000611e 	bne	r2,zero,8035e84 <sosetopt+0x210>
 8035d00:	e0bff917 	ldw	r2,-28(fp)
 8035d04:	10808048 	cmpgei	r2,r2,513
 8035d08:	10011a1e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035d0c:	e0bff917 	ldw	r2,-28(fp)
 8035d10:	10804020 	cmpeqi	r2,r2,256
 8035d14:	10005b1e 	bne	r2,zero,8035e84 <sosetopt+0x210>
 8035d18:	e0bff917 	ldw	r2,-28(fp)
 8035d1c:	10804048 	cmpgei	r2,r2,257
 8035d20:	1001141e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035d24:	e0bff917 	ldw	r2,-28(fp)
 8035d28:	10800848 	cmpgei	r2,r2,33
 8035d2c:	10004d1e 	bne	r2,zero,8035e64 <sosetopt+0x1f0>
 8035d30:	e0bff917 	ldw	r2,-28(fp)
 8035d34:	10800088 	cmpgei	r2,r2,2
 8035d38:	1000201e 	bne	r2,zero,8035dbc <sosetopt+0x148>
 8035d3c:	00010d06 	br	8036174 <sosetopt+0x500>
 8035d40:	e0bff917 	ldw	r2,-28(fp)
 8035d44:	10bbffc4 	addi	r2,r2,-4097
 8035d48:	10c005a8 	cmpgeui	r3,r2,22
 8035d4c:	1801091e 	bne	r3,zero,8036174 <sosetopt+0x500>
 8035d50:	100690ba 	slli	r3,r2,2
 8035d54:	008200f4 	movhi	r2,2051
 8035d58:	1885883a 	add	r2,r3,r2
 8035d5c:	10975917 	ldw	r2,23908(r2)
 8035d60:	1000683a 	jmp	r2
 8035d64:	08035ecc 	andi	zero,at,3451
 8035d68:	08035ecc 	andi	zero,at,3451
 8035d6c:	08036174 	orhi	zero,at,3461
 8035d70:	08036174 	orhi	zero,at,3461
 8035d74:	08036174 	orhi	zero,at,3461
 8035d78:	08035f10 	cmplti	zero,at,3452
 8035d7c:	08036174 	orhi	zero,at,3461
 8035d80:	08036174 	orhi	zero,at,3461
 8035d84:	08036174 	orhi	zero,at,3461
 8035d88:	08036174 	orhi	zero,at,3461
 8035d8c:	08036174 	orhi	zero,at,3461
 8035d90:	08036174 	orhi	zero,at,3461
 8035d94:	08036174 	orhi	zero,at,3461
 8035d98:	08036174 	orhi	zero,at,3461
 8035d9c:	08036174 	orhi	zero,at,3461
 8035da0:	080360d8 	cmpnei	zero,at,3459
 8035da4:	08036174 	orhi	zero,at,3461
 8035da8:	08036174 	orhi	zero,at,3461
 8035dac:	08036174 	orhi	zero,at,3461
 8035db0:	08035f24 	muli	zero,at,3452
 8035db4:	08035f40 	call	8035f4 <OSCtxSw_SWITCH_PC+0x8035b4>
 8035db8:	08035f60 	cmpeqi	zero,at,3453
 8035dbc:	e0bff917 	ldw	r2,-28(fp)
 8035dc0:	10800868 	cmpgeui	r2,r2,33
 8035dc4:	1000eb1e 	bne	r2,zero,8036174 <sosetopt+0x500>
 8035dc8:	e0bff917 	ldw	r2,-28(fp)
 8035dcc:	100690ba 	slli	r3,r2,2
 8035dd0:	008200f4 	movhi	r2,2051
 8035dd4:	1885883a 	add	r2,r3,r2
 8035dd8:	10977817 	ldw	r2,24032(r2)
 8035ddc:	1000683a 	jmp	r2
 8035de0:	08036174 	orhi	zero,at,3461
 8035de4:	08036174 	orhi	zero,at,3461
 8035de8:	08035fd4 	ori	zero,at,3455
 8035dec:	08036174 	orhi	zero,at,3461
 8035df0:	08035e84 	addi	zero,at,3450
 8035df4:	08036174 	orhi	zero,at,3461
 8035df8:	08036174 	orhi	zero,at,3461
 8035dfc:	08036174 	orhi	zero,at,3461
 8035e00:	08035e84 	addi	zero,at,3450
 8035e04:	08035fbc 	xorhi	zero,at,3454
 8035e08:	08035fbc 	xorhi	zero,at,3454
 8035e0c:	08035fbc 	xorhi	zero,at,3454
 8035e10:	08035fbc 	xorhi	zero,at,3454
 8035e14:	08035fbc 	xorhi	zero,at,3454
 8035e18:	08036174 	orhi	zero,at,3461
 8035e1c:	08036174 	orhi	zero,at,3461
 8035e20:	08035e84 	addi	zero,at,3450
 8035e24:	08036174 	orhi	zero,at,3461
 8035e28:	08036174 	orhi	zero,at,3461
 8035e2c:	08036174 	orhi	zero,at,3461
 8035e30:	08036174 	orhi	zero,at,3461
 8035e34:	08036174 	orhi	zero,at,3461
 8035e38:	08036174 	orhi	zero,at,3461
 8035e3c:	08036174 	orhi	zero,at,3461
 8035e40:	08036174 	orhi	zero,at,3461
 8035e44:	08036174 	orhi	zero,at,3461
 8035e48:	08036174 	orhi	zero,at,3461
 8035e4c:	08036174 	orhi	zero,at,3461
 8035e50:	08036174 	orhi	zero,at,3461
 8035e54:	08036174 	orhi	zero,at,3461
 8035e58:	08036174 	orhi	zero,at,3461
 8035e5c:	08036174 	orhi	zero,at,3461
 8035e60:	08035e84 	addi	zero,at,3450
 8035e64:	e0bff917 	ldw	r2,-28(fp)
 8035e68:	10802018 	cmpnei	r2,r2,128
 8035e6c:	1000c11e 	bne	r2,zero,8036174 <sosetopt+0x500>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
 8035e70:	e0bff817 	ldw	r2,-32(fp)
 8035e74:	10800117 	ldw	r2,4(r2)
 8035e78:	1007883a 	mov	r3,r2
 8035e7c:	e0bffa17 	ldw	r2,-24(fp)
 8035e80:	10c0080d 	sth	r3,32(r2)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
 8035e84:	e0bff817 	ldw	r2,-32(fp)
 8035e88:	10800017 	ldw	r2,0(r2)
 8035e8c:	10000726 	beq	r2,zero,8035eac <sosetopt+0x238>
         so->so_options |= optname;
 8035e90:	e0bffa17 	ldw	r2,-24(fp)
 8035e94:	10c00417 	ldw	r3,16(r2)
 8035e98:	e0bff917 	ldw	r2,-28(fp)
 8035e9c:	1886b03a 	or	r3,r3,r2
 8035ea0:	e0bffa17 	ldw	r2,-24(fp)
 8035ea4:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~optname;
      break;
 8035ea8:	0000b606 	br	8036184 <sosetopt+0x510>
         so->so_options &= ~optname;
 8035eac:	e0bffa17 	ldw	r2,-24(fp)
 8035eb0:	10800417 	ldw	r2,16(r2)
 8035eb4:	e0fff917 	ldw	r3,-28(fp)
 8035eb8:	00c6303a 	nor	r3,zero,r3
 8035ebc:	10c6703a 	and	r3,r2,r3
 8035ec0:	e0bffa17 	ldw	r2,-24(fp)
 8035ec4:	10c00415 	stw	r3,16(r2)
      break;
 8035ec8:	0000ae06 	br	8036184 <sosetopt+0x510>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 8035ecc:	e0bff917 	ldw	r2,-28(fp)
 8035ed0:	10840058 	cmpnei	r2,r2,4097
 8035ed4:	1000031e 	bne	r2,zero,8035ee4 <sosetopt+0x270>
 8035ed8:	e0bffa17 	ldw	r2,-24(fp)
 8035edc:	10801204 	addi	r2,r2,72
 8035ee0:	00000206 	br	8035eec <sosetopt+0x278>
 8035ee4:	e0bffa17 	ldw	r2,-24(fp)
 8035ee8:	10800a04 	addi	r2,r2,40
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
 8035eec:	e0fff817 	ldw	r3,-32(fp)
 8035ef0:	18c00017 	ldw	r3,0(r3)
      if (sbreserve(optname == SO_SNDBUF ?
 8035ef4:	180b883a 	mov	r5,r3
 8035ef8:	1009883a 	mov	r4,r2
 8035efc:	80370180 	call	8037018 <sbreserve>
 8035f00:	10009f1e 	bne	r2,zero,8036180 <sosetopt+0x50c>
      {
         error = ENOBUFS;
 8035f04:	00801a44 	movi	r2,105
 8035f08:	e0bfff15 	stw	r2,-4(fp)
         goto bad;
 8035f0c:	00009d06 	br	8036184 <sosetopt+0x510>
      }
      break;

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
 8035f10:	e0bff817 	ldw	r2,-32(fp)
 8035f14:	10c0000b 	ldhu	r3,0(r2)
 8035f18:	e0bffa17 	ldw	r2,-24(fp)
 8035f1c:	10c0118d 	sth	r3,70(r2)
      break;
 8035f20:	00009806 	br	8036184 <sosetopt+0x510>

   case SO_NBIO:     /* set socket into NON-blocking mode */
      so->so_state |= SS_NBIO;
 8035f24:	e0bffa17 	ldw	r2,-24(fp)
 8035f28:	1080088b 	ldhu	r2,34(r2)
 8035f2c:	10804014 	ori	r2,r2,256
 8035f30:	1007883a 	mov	r3,r2
 8035f34:	e0bffa17 	ldw	r2,-24(fp)
 8035f38:	10c0088d 	sth	r3,34(r2)
      break;
 8035f3c:	00009106 	br	8036184 <sosetopt+0x510>

   case SO_BIO:   /* set socket into blocking mode */
      so->so_state &= ~SS_NBIO;
 8035f40:	e0bffa17 	ldw	r2,-24(fp)
 8035f44:	10c0088b 	ldhu	r3,34(r2)
 8035f48:	00bfbfc4 	movi	r2,-257
 8035f4c:	1884703a 	and	r2,r3,r2
 8035f50:	1007883a 	mov	r3,r2
 8035f54:	e0bffa17 	ldw	r2,-24(fp)
 8035f58:	10c0088d 	sth	r3,34(r2)
      break;
 8035f5c:	00008906 	br	8036184 <sosetopt+0x510>

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
 8035f60:	e0bff817 	ldw	r2,-32(fp)
 8035f64:	1000031e 	bne	r2,zero,8035f74 <sosetopt+0x300>
      {
         error = ENP_PARAM;
 8035f68:	00bffd84 	movi	r2,-10
 8035f6c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8035f70:	00008406 	br	8036184 <sosetopt+0x510>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 8035f74:	e0bff817 	ldw	r2,-32(fp)
 8035f78:	10800017 	ldw	r2,0(r2)
 8035f7c:	10000726 	beq	r2,zero,8035f9c <sosetopt+0x328>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
 8035f80:	e0bffa17 	ldw	r2,-24(fp)
 8035f84:	1080088b 	ldhu	r2,34(r2)
 8035f88:	10804014 	ori	r2,r2,256
 8035f8c:	1007883a 	mov	r3,r2
 8035f90:	e0bffa17 	ldw	r2,-24(fp)
 8035f94:	10c0088d 	sth	r3,34(r2)
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
      break;
 8035f98:	00007a06 	br	8036184 <sosetopt+0x510>
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
 8035f9c:	e0bffa17 	ldw	r2,-24(fp)
 8035fa0:	10c0088b 	ldhu	r3,34(r2)
 8035fa4:	00bfbfc4 	movi	r2,-257
 8035fa8:	1884703a 	and	r2,r3,r2
 8035fac:	1007883a 	mov	r3,r2
 8035fb0:	e0bffa17 	ldw	r2,-24(fp)
 8035fb4:	10c0088d 	sth	r3,34(r2)
      break;
 8035fb8:	00007206 	br	8036184 <sosetopt+0x510>
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
 8035fbc:	e1bff817 	ldw	r6,-32(fp)
 8035fc0:	e17ffa17 	ldw	r5,-24(fp)
 8035fc4:	e13ff917 	ldw	r4,-28(fp)
 8035fc8:	8048a680 	call	8048a68 <ip_setmoptions>
 8035fcc:	e0bfff15 	stw	r2,-4(fp)
      break;
 8035fd0:	00006c06 	br	8036184 <sosetopt+0x510>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 8035fd4:	e0bff817 	ldw	r2,-32(fp)
 8035fd8:	1000031e 	bne	r2,zero,8035fe8 <sosetopt+0x374>
      {
         error = ENP_PARAM;
 8035fdc:	00bffd84 	movi	r2,-10
 8035fe0:	e0bfff15 	stw	r2,-4(fp)
         break;
 8035fe4:	00006706 	br	8036184 <sosetopt+0x510>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
 8035fe8:	e0bff817 	ldw	r2,-32(fp)
 8035fec:	10800017 	ldw	r2,0(r2)
 8035ff0:	10000626 	beq	r2,zero,803600c <sosetopt+0x398>
         so->so_options |= SO_HDRINCL;
 8035ff4:	e0bffa17 	ldw	r2,-24(fp)
 8035ff8:	10800417 	ldw	r2,16(r2)
 8035ffc:	10c80014 	ori	r3,r2,8192
 8036000:	e0bffa17 	ldw	r2,-24(fp)
 8036004:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~SO_HDRINCL;
      break;
 8036008:	00005e06 	br	8036184 <sosetopt+0x510>
         so->so_options &= ~SO_HDRINCL;
 803600c:	e0bffa17 	ldw	r2,-24(fp)
 8036010:	10c00417 	ldw	r3,16(r2)
 8036014:	00b7ffc4 	movi	r2,-8193
 8036018:	1886703a 	and	r3,r3,r2
 803601c:	e0bffa17 	ldw	r2,-24(fp)
 8036020:	10c00415 	stw	r3,16(r2)
      break;
 8036024:	00005706 	br	8036184 <sosetopt+0x510>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 8036028:	e0bffa17 	ldw	r2,-24(fp)
 803602c:	10800983 	ldbu	r2,38(r2)
 8036030:	10803fcc 	andi	r2,r2,255
 8036034:	1080201c 	xori	r2,r2,128
 8036038:	10bfe004 	addi	r2,r2,-128
 803603c:	10800060 	cmpeqi	r2,r2,1
 8036040:	1000031e 	bne	r2,zero,8036050 <sosetopt+0x3dc>
      {
         error = EINVAL;
 8036044:	00800584 	movi	r2,22
 8036048:	e0bfff15 	stw	r2,-4(fp)
         break;
 803604c:	00004d06 	br	8036184 <sosetopt+0x510>
      }
      inp = (struct inpcb *)(so->so_pcb);
 8036050:	e0bffa17 	ldw	r2,-24(fp)
 8036054:	10800117 	ldw	r2,4(r2)
 8036058:	e0bffe15 	stw	r2,-8(fp)
      tp = intotcpcb(inp);
 803605c:	e0bffe17 	ldw	r2,-8(fp)
 8036060:	10800917 	ldw	r2,36(r2)
 8036064:	e0bffd15 	stw	r2,-12(fp)
      if(!tp)
 8036068:	e0bffd17 	ldw	r2,-12(fp)
 803606c:	1000031e 	bne	r2,zero,803607c <sosetopt+0x408>
      {
         error = ENOTCONN;
 8036070:	00802004 	movi	r2,128
 8036074:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036078:	00004206 	br	8036184 <sosetopt+0x510>
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 803607c:	e0bff817 	ldw	r2,-32(fp)
 8036080:	1000031e 	bne	r2,zero,8036090 <sosetopt+0x41c>
      {
         error = ENP_PARAM;
 8036084:	00bffd84 	movi	r2,-10
 8036088:	e0bfff15 	stw	r2,-4(fp)
         break;
 803608c:	00003d06 	br	8036184 <sosetopt+0x510>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 8036090:	e0bff817 	ldw	r2,-32(fp)
 8036094:	10800017 	ldw	r2,0(r2)
 8036098:	10000726 	beq	r2,zero,80360b8 <sosetopt+0x444>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
 803609c:	e0bffd17 	ldw	r2,-12(fp)
 80360a0:	10800b0b 	ldhu	r2,44(r2)
 80360a4:	10800114 	ori	r2,r2,4
 80360a8:	1007883a 	mov	r3,r2
 80360ac:	e0bffd17 	ldw	r2,-12(fp)
 80360b0:	10c00b0d 	sth	r3,44(r2)
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */

      break;
 80360b4:	00003306 	br	8036184 <sosetopt+0x510>
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
 80360b8:	e0bffd17 	ldw	r2,-12(fp)
 80360bc:	10c00b0b 	ldhu	r3,44(r2)
 80360c0:	00bffec4 	movi	r2,-5
 80360c4:	1884703a 	and	r2,r3,r2
 80360c8:	1007883a 	mov	r3,r2
 80360cc:	e0bffd17 	ldw	r2,-12(fp)
 80360d0:	10c00b0d 	sth	r3,44(r2)
      break;
 80360d4:	00002b06 	br	8036184 <sosetopt+0x510>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 80360d8:	e0bffa17 	ldw	r2,-24(fp)
 80360dc:	10800983 	ldbu	r2,38(r2)
 80360e0:	10803fcc 	andi	r2,r2,255
 80360e4:	1080201c 	xori	r2,r2,128
 80360e8:	10bfe004 	addi	r2,r2,-128
 80360ec:	10800060 	cmpeqi	r2,r2,1
 80360f0:	1000031e 	bne	r2,zero,8036100 <sosetopt+0x48c>
      {
         error = EINVAL;
 80360f4:	00800584 	movi	r2,22
 80360f8:	e0bfff15 	stw	r2,-4(fp)
         break;
 80360fc:	00002106 	br	8036184 <sosetopt+0x510>
      }
      inp = (struct inpcb *)(so->so_pcb);
 8036100:	e0bffa17 	ldw	r2,-24(fp)
 8036104:	10800117 	ldw	r2,4(r2)
 8036108:	e0bffc15 	stw	r2,-16(fp)
      tp = intotcpcb(inp);
 803610c:	e0bffc17 	ldw	r2,-16(fp)
 8036110:	10800917 	ldw	r2,36(r2)
 8036114:	e0bffb15 	stw	r2,-20(fp)
      if(!tp)
 8036118:	e0bffb17 	ldw	r2,-20(fp)
 803611c:	1000031e 	bne	r2,zero,803612c <sosetopt+0x4b8>
      {
         error = ENOTCONN;
 8036120:	00802004 	movi	r2,128
 8036124:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036128:	00001606 	br	8036184 <sosetopt+0x510>
      }
      if (tp->t_state != TCPS_CLOSED)
 803612c:	e0bffb17 	ldw	r2,-20(fp)
 8036130:	10800217 	ldw	r2,8(r2)
 8036134:	10000326 	beq	r2,zero,8036144 <sosetopt+0x4d0>
      {
         error = EINVAL;
 8036138:	00800584 	movi	r2,22
 803613c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036140:	00001006 	br	8036184 <sosetopt+0x510>
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
 8036144:	e0bff817 	ldw	r2,-32(fp)
 8036148:	10800017 	ldw	r2,0(r2)
 803614c:	1007883a 	mov	r3,r2
 8036150:	e0bffb17 	ldw	r2,-20(fp)
 8036154:	10c00a0d 	sth	r3,40(r2)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
 8036158:	e0bffb17 	ldw	r2,-20(fp)
 803615c:	10800b0b 	ldhu	r2,44(r2)
 8036160:	10810014 	ori	r2,r2,1024
 8036164:	1007883a 	mov	r3,r2
 8036168:	e0bffb17 	ldw	r2,-20(fp)
 803616c:	10c00b0d 	sth	r3,44(r2)
      break;
 8036170:	00000406 	br	8036184 <sosetopt+0x510>
   }
   default:
      error = ENOPROTOOPT;
 8036174:	00801b44 	movi	r2,109
 8036178:	e0bfff15 	stw	r2,-4(fp)
      break;
 803617c:	00000106 	br	8036184 <sosetopt+0x510>
      break;
 8036180:	0001883a 	nop
   }
bad:
   return (error);
 8036184:	e0bfff17 	ldw	r2,-4(fp)
}
 8036188:	e037883a 	mov	sp,fp
 803618c:	dfc00117 	ldw	ra,4(sp)
 8036190:	df000017 	ldw	fp,0(sp)
 8036194:	dec00204 	addi	sp,sp,8
 8036198:	f800283a 	ret

0803619c <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
 803619c:	defff504 	addi	sp,sp,-44
 80361a0:	dfc00a15 	stw	ra,40(sp)
 80361a4:	df000915 	stw	fp,36(sp)
 80361a8:	df000904 	addi	fp,sp,36
 80361ac:	e13ff915 	stw	r4,-28(fp)
 80361b0:	e17ff815 	stw	r5,-32(fp)
 80361b4:	e1bff715 	stw	r6,-36(fp)
   int   error =  0;
 80361b8:	e03fff15 	stw	zero,-4(fp)

   /* sanity check the val parameter */
   if (!val)
 80361bc:	e0bff717 	ldw	r2,-36(fp)
 80361c0:	1000021e 	bne	r2,zero,80361cc <sogetopt+0x30>
   {
      return ENP_PARAM;
 80361c4:	00bffd84 	movi	r2,-10
 80361c8:	00014106 	br	80366d0 <sogetopt+0x534>
   }

   switch (optname) 
 80361cc:	e0bff817 	ldw	r2,-32(fp)
 80361d0:	10880120 	cmpeqi	r2,r2,8196
 80361d4:	1001151e 	bne	r2,zero,803662c <sogetopt+0x490>
 80361d8:	e0bff817 	ldw	r2,-32(fp)
 80361dc:	10880148 	cmpgei	r2,r2,8197
 80361e0:	1001381e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 80361e4:	e0bff817 	ldw	r2,-32(fp)
 80361e8:	108800e0 	cmpeqi	r2,r2,8195
 80361ec:	1000c51e 	bne	r2,zero,8036504 <sogetopt+0x368>
 80361f0:	e0bff817 	ldw	r2,-32(fp)
 80361f4:	10880108 	cmpgei	r2,r2,8196
 80361f8:	1001321e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 80361fc:	e0bff817 	ldw	r2,-32(fp)
 8036200:	108405c8 	cmpgei	r2,r2,4119
 8036204:	10012f1e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 8036208:	e0bff817 	ldw	r2,-32(fp)
 803620c:	10840048 	cmpgei	r2,r2,4097
 8036210:	1000131e 	bne	r2,zero,8036260 <sogetopt+0xc4>
 8036214:	e0bff817 	ldw	r2,-32(fp)
 8036218:	10808020 	cmpeqi	r2,r2,512
 803621c:	10007e1e 	bne	r2,zero,8036418 <sogetopt+0x27c>
 8036220:	e0bff817 	ldw	r2,-32(fp)
 8036224:	10808048 	cmpgei	r2,r2,513
 8036228:	1001261e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 803622c:	e0bff817 	ldw	r2,-32(fp)
 8036230:	10804020 	cmpeqi	r2,r2,256
 8036234:	1000781e 	bne	r2,zero,8036418 <sogetopt+0x27c>
 8036238:	e0bff817 	ldw	r2,-32(fp)
 803623c:	10804048 	cmpgei	r2,r2,257
 8036240:	1001201e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 8036244:	e0bff817 	ldw	r2,-32(fp)
 8036248:	10800848 	cmpgei	r2,r2,33
 803624c:	10004d1e 	bne	r2,zero,8036384 <sogetopt+0x1e8>
 8036250:	e0bff817 	ldw	r2,-32(fp)
 8036254:	10800088 	cmpgei	r2,r2,2
 8036258:	1000201e 	bne	r2,zero,80362dc <sogetopt+0x140>
 803625c:	00011906 	br	80366c4 <sogetopt+0x528>
 8036260:	e0bff817 	ldw	r2,-32(fp)
 8036264:	10bbffc4 	addi	r2,r2,-4097
 8036268:	10c005a8 	cmpgeui	r3,r2,22
 803626c:	1801151e 	bne	r3,zero,80366c4 <sogetopt+0x528>
 8036270:	100690ba 	slli	r3,r2,2
 8036274:	008200f4 	movhi	r2,2051
 8036278:	1885883a 	add	r2,r3,r2
 803627c:	1098a117 	ldw	r2,25220(r2)
 8036280:	1000683a 	jmp	r2
 8036284:	08036468 	cmpgeui	zero,at,3473
 8036288:	08036480 	call	803648 <OSCtxSw_SWITCH_PC+0x803608>
 803628c:	08036438 	rdprs	zero,at,3472
 8036290:	08036450 	cmplti	zero,at,3473
 8036294:	08036570 	cmpltui	zero,at,3477
 8036298:	08036584 	addi	zero,at,3478
 803629c:	080364e8 	cmpgeui	zero,at,3475
 80362a0:	080364c8 	cmpgei	zero,at,3475
 80362a4:	08036598 	cmpnei	zero,at,3478
 80362a8:	080366c4 	addi	zero,at,3483
 80362ac:	080366c4 	addi	zero,at,3483
 80362b0:	080366c4 	addi	zero,at,3483
 80362b4:	080366c4 	addi	zero,at,3483
 80362b8:	080366c4 	addi	zero,at,3483
 80362bc:	080366c4 	addi	zero,at,3483
 80362c0:	08036504 	addi	zero,at,3476
 80362c4:	08036498 	cmpnei	zero,at,3474
 80362c8:	080364b0 	cmpltui	zero,at,3474
 80362cc:	08036394 	ori	zero,at,3470
 80362d0:	080366c4 	addi	zero,at,3483
 80362d4:	080366c4 	addi	zero,at,3483
 80362d8:	080365b8 	rdprs	zero,at,3478
 80362dc:	e0bff817 	ldw	r2,-32(fp)
 80362e0:	10800868 	cmpgeui	r2,r2,33
 80362e4:	1000f71e 	bne	r2,zero,80366c4 <sogetopt+0x528>
 80362e8:	e0bff817 	ldw	r2,-32(fp)
 80362ec:	100690ba 	slli	r3,r2,2
 80362f0:	008200f4 	movhi	r2,2051
 80362f4:	1885883a 	add	r2,r3,r2
 80362f8:	1098c017 	ldw	r2,25344(r2)
 80362fc:	1000683a 	jmp	r2
 8036300:	080366c4 	addi	zero,at,3483
 8036304:	080366c4 	addi	zero,at,3483
 8036308:	08036600 	call	803660 <OSCtxSw_SWITCH_PC+0x803620>
 803630c:	080366c4 	addi	zero,at,3483
 8036310:	08036418 	cmpnei	zero,at,3472
 8036314:	080366c4 	addi	zero,at,3483
 8036318:	080366c4 	addi	zero,at,3483
 803631c:	080366c4 	addi	zero,at,3483
 8036320:	08036418 	cmpnei	zero,at,3472
 8036324:	080365e8 	cmpgeui	zero,at,3479
 8036328:	080365e8 	cmpgeui	zero,at,3479
 803632c:	080365e8 	cmpgeui	zero,at,3479
 8036330:	080366c4 	addi	zero,at,3483
 8036334:	080366c4 	addi	zero,at,3483
 8036338:	080366c4 	addi	zero,at,3483
 803633c:	080366c4 	addi	zero,at,3483
 8036340:	08036418 	cmpnei	zero,at,3472
 8036344:	080366c4 	addi	zero,at,3483
 8036348:	080366c4 	addi	zero,at,3483
 803634c:	080366c4 	addi	zero,at,3483
 8036350:	080366c4 	addi	zero,at,3483
 8036354:	080366c4 	addi	zero,at,3483
 8036358:	080366c4 	addi	zero,at,3483
 803635c:	080366c4 	addi	zero,at,3483
 8036360:	080366c4 	addi	zero,at,3483
 8036364:	080366c4 	addi	zero,at,3483
 8036368:	080366c4 	addi	zero,at,3483
 803636c:	080366c4 	addi	zero,at,3483
 8036370:	080366c4 	addi	zero,at,3483
 8036374:	080366c4 	addi	zero,at,3483
 8036378:	080366c4 	addi	zero,at,3483
 803637c:	080366c4 	addi	zero,at,3483
 8036380:	08036418 	cmpnei	zero,at,3472
 8036384:	e0bff817 	ldw	r2,-32(fp)
 8036388:	10802020 	cmpeqi	r2,r2,128
 803638c:	1000131e 	bne	r2,zero,80363dc <sogetopt+0x240>
 8036390:	0000cc06 	br	80366c4 <sogetopt+0x528>
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
 8036394:	e0bff917 	ldw	r2,-28(fp)
 8036398:	1080088b 	ldhu	r2,34(r2)
 803639c:	10bfffcc 	andi	r2,r2,65535
 80363a0:	1080008c 	andi	r2,r2,2
 80363a4:	10000726 	beq	r2,zero,80363c4 <sogetopt+0x228>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
 80363a8:	e0bff917 	ldw	r2,-28(fp)
 80363ac:	10800117 	ldw	r2,4(r2)
 80363b0:	10800a17 	ldw	r2,40(r2)
 80363b4:	10c00a17 	ldw	r3,40(r2)
 80363b8:	e0bff717 	ldw	r2,-36(fp)
 80363bc:	10c00015 	stw	r3,0(r2)
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
 80363c0:	0000c206 	br	80366cc <sogetopt+0x530>
         *(u_long *)val = nets[0]->n_ipaddr;
 80363c4:	008201b4 	movhi	r2,2054
 80363c8:	10bdce17 	ldw	r2,-2248(r2)
 80363cc:	10c00a17 	ldw	r3,40(r2)
 80363d0:	e0bff717 	ldw	r2,-36(fp)
 80363d4:	10c00015 	stw	r3,0(r2)
      break;
 80363d8:	0000bc06 	br	80366cc <sogetopt+0x530>
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
 80363dc:	e0bff717 	ldw	r2,-36(fp)
 80363e0:	e0bffa15 	stw	r2,-24(fp)
         l->l_onoff = so->so_options & SO_LINGER;
 80363e4:	e0bff917 	ldw	r2,-28(fp)
 80363e8:	10800417 	ldw	r2,16(r2)
 80363ec:	10c0200c 	andi	r3,r2,128
 80363f0:	e0bffa17 	ldw	r2,-24(fp)
 80363f4:	10c00015 	stw	r3,0(r2)
         l->l_linger = so->so_linger;
 80363f8:	e0bff917 	ldw	r2,-28(fp)
 80363fc:	1080080b 	ldhu	r2,32(r2)
 8036400:	10ffffcc 	andi	r3,r2,65535
 8036404:	18e0001c 	xori	r3,r3,32768
 8036408:	18e00004 	addi	r3,r3,-32768
 803640c:	e0bffa17 	ldw	r2,-24(fp)
 8036410:	10c00115 	stw	r3,4(r2)
      }
      break;
 8036414:	0000ad06 	br	80366cc <sogetopt+0x530>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
 8036418:	e0bff917 	ldw	r2,-28(fp)
 803641c:	10c00417 	ldw	r3,16(r2)
 8036420:	e0bff817 	ldw	r2,-32(fp)
 8036424:	1884703a 	and	r2,r3,r2
 8036428:	1007883a 	mov	r3,r2
 803642c:	e0bff717 	ldw	r2,-36(fp)
 8036430:	10c00015 	stw	r3,0(r2)
      break;
 8036434:	0000a506 	br	80366cc <sogetopt+0x530>

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
 8036438:	e0bff917 	ldw	r2,-28(fp)
 803643c:	10801617 	ldw	r2,88(r2)
 8036440:	1007883a 	mov	r3,r2
 8036444:	e0bff717 	ldw	r2,-36(fp)
 8036448:	10c00015 	stw	r3,0(r2)
      break;
 803644c:	00009f06 	br	80366cc <sogetopt+0x530>

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
 8036450:	e0bff917 	ldw	r2,-28(fp)
 8036454:	10800e17 	ldw	r2,56(r2)
 8036458:	1007883a 	mov	r3,r2
 803645c:	e0bff717 	ldw	r2,-36(fp)
 8036460:	10c00015 	stw	r3,0(r2)
      break;
 8036464:	00009906 	br	80366cc <sogetopt+0x530>

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
 8036468:	e0bff917 	ldw	r2,-28(fp)
 803646c:	10801317 	ldw	r2,76(r2)
 8036470:	1007883a 	mov	r3,r2
 8036474:	e0bff717 	ldw	r2,-36(fp)
 8036478:	10c00015 	stw	r3,0(r2)
      break;
 803647c:	00009306 	br	80366cc <sogetopt+0x530>

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
 8036480:	e0bff917 	ldw	r2,-28(fp)
 8036484:	10800b17 	ldw	r2,44(r2)
 8036488:	1007883a 	mov	r3,r2
 803648c:	e0bff717 	ldw	r2,-36(fp)
 8036490:	10c00015 	stw	r3,0(r2)
      break;
 8036494:	00008d06 	br	80366cc <sogetopt+0x530>

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
 8036498:	e0bff917 	ldw	r2,-28(fp)
 803649c:	10800a17 	ldw	r2,40(r2)
 80364a0:	1007883a 	mov	r3,r2
 80364a4:	e0bff717 	ldw	r2,-36(fp)
 80364a8:	10c00015 	stw	r3,0(r2)
      break;
 80364ac:	00008706 	br	80366cc <sogetopt+0x530>

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
 80364b0:	e0bff917 	ldw	r2,-28(fp)
 80364b4:	10801217 	ldw	r2,72(r2)
 80364b8:	1007883a 	mov	r3,r2
 80364bc:	e0bff717 	ldw	r2,-36(fp)
 80364c0:	10c00015 	stw	r3,0(r2)
      break;
 80364c4:	00008106 	br	80366cc <sogetopt+0x530>

   case SO_TYPE:
      *(int *)val = so->so_type;
 80364c8:	e0bff917 	ldw	r2,-28(fp)
 80364cc:	10800983 	ldbu	r2,38(r2)
 80364d0:	10c03fcc 	andi	r3,r2,255
 80364d4:	18c0201c 	xori	r3,r3,128
 80364d8:	18ffe004 	addi	r3,r3,-128
 80364dc:	e0bff717 	ldw	r2,-36(fp)
 80364e0:	10c00015 	stw	r3,0(r2)
      break;
 80364e4:	00007906 	br	80366cc <sogetopt+0x530>

   case SO_ERROR:
      *(int *)val = so->so_error;
 80364e8:	e0bff917 	ldw	r2,-28(fp)
 80364ec:	10c00617 	ldw	r3,24(r2)
 80364f0:	e0bff717 	ldw	r2,-36(fp)
 80364f4:	10c00015 	stw	r3,0(r2)
      so->so_error = 0;
 80364f8:	e0bff917 	ldw	r2,-28(fp)
 80364fc:	10000615 	stw	zero,24(r2)
      break;
 8036500:	00007206 	br	80366cc <sogetopt+0x530>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 8036504:	e0bff917 	ldw	r2,-28(fp)
 8036508:	10800983 	ldbu	r2,38(r2)
 803650c:	10803fcc 	andi	r2,r2,255
 8036510:	1080201c 	xori	r2,r2,128
 8036514:	10bfe004 	addi	r2,r2,-128
 8036518:	10800060 	cmpeqi	r2,r2,1
 803651c:	1000031e 	bne	r2,zero,803652c <sogetopt+0x390>
      {
         error = EINVAL;
 8036520:	00800584 	movi	r2,22
 8036524:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036528:	00006806 	br	80366cc <sogetopt+0x530>
      }
      inp = (struct inpcb *)(so->so_pcb);
 803652c:	e0bff917 	ldw	r2,-28(fp)
 8036530:	10800117 	ldw	r2,4(r2)
 8036534:	e0bffc15 	stw	r2,-16(fp)
      tp = intotcpcb(inp);
 8036538:	e0bffc17 	ldw	r2,-16(fp)
 803653c:	10800917 	ldw	r2,36(r2)
 8036540:	e0bffb15 	stw	r2,-20(fp)
      if(!tp)
 8036544:	e0bffb17 	ldw	r2,-20(fp)
 8036548:	1000031e 	bne	r2,zero,8036558 <sogetopt+0x3bc>
      {
         error = ENOTCONN;
 803654c:	00802004 	movi	r2,128
 8036550:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036554:	00005d06 	br	80366cc <sogetopt+0x530>
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
 8036558:	e0bffb17 	ldw	r2,-20(fp)
 803655c:	10800a0b 	ldhu	r2,40(r2)
 8036560:	10ffffcc 	andi	r3,r2,65535
 8036564:	e0bff717 	ldw	r2,-36(fp)
 8036568:	10c00015 	stw	r3,0(r2)
      break;
 803656c:	00005706 	br	80366cc <sogetopt+0x530>
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
 8036570:	e0bff917 	ldw	r2,-28(fp)
 8036574:	10c0198b 	ldhu	r3,102(r2)
 8036578:	e0bff717 	ldw	r2,-36(fp)
 803657c:	10c0000d 	sth	r3,0(r2)
      break;
 8036580:	00005206 	br	80366cc <sogetopt+0x530>

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
 8036584:	e0bff917 	ldw	r2,-28(fp)
 8036588:	10c0118b 	ldhu	r3,70(r2)
 803658c:	e0bff717 	ldw	r2,-36(fp)
 8036590:	10c0000d 	sth	r3,0(r2)
      break;
 8036594:	00004d06 	br	80366cc <sogetopt+0x530>

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
 8036598:	e0bff917 	ldw	r2,-28(fp)
 803659c:	108009c3 	ldbu	r2,39(r2)
 80365a0:	10c03fcc 	andi	r3,r2,255
 80365a4:	18c0201c 	xori	r3,r3,128
 80365a8:	18ffe004 	addi	r3,r3,-128
 80365ac:	e0bff717 	ldw	r2,-36(fp)
 80365b0:	10c00015 	stw	r3,0(r2)
      break;
 80365b4:	00004506 	br	80366cc <sogetopt+0x530>

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
 80365b8:	e0bff917 	ldw	r2,-28(fp)
 80365bc:	1080088b 	ldhu	r2,34(r2)
 80365c0:	10bfffcc 	andi	r2,r2,65535
 80365c4:	1080400c 	andi	r2,r2,256
 80365c8:	10000426 	beq	r2,zero,80365dc <sogetopt+0x440>
         *(int *)val = 1;   /* return 1 in val */
 80365cc:	e0bff717 	ldw	r2,-36(fp)
 80365d0:	00c00044 	movi	r3,1
 80365d4:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;     /* return 0 in val */
      break;
 80365d8:	00003c06 	br	80366cc <sogetopt+0x530>
         *(int *)val = 0;     /* return 0 in val */
 80365dc:	e0bff717 	ldw	r2,-36(fp)
 80365e0:	10000015 	stw	zero,0(r2)
      break;
 80365e4:	00003906 	br	80366cc <sogetopt+0x530>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
 80365e8:	e1bff717 	ldw	r6,-36(fp)
 80365ec:	e17ff917 	ldw	r5,-28(fp)
 80365f0:	e13ff817 	ldw	r4,-32(fp)
 80365f4:	80490080 	call	8049008 <ip_getmoptions>
 80365f8:	e0bfff15 	stw	r2,-4(fp)
      break;
 80365fc:	00003306 	br	80366cc <sogetopt+0x530>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
 8036600:	e0bff917 	ldw	r2,-28(fp)
 8036604:	10800417 	ldw	r2,16(r2)
 8036608:	1088000c 	andi	r2,r2,8192
 803660c:	10000426 	beq	r2,zero,8036620 <sogetopt+0x484>
         *(int *)val = 1;
 8036610:	e0bff717 	ldw	r2,-36(fp)
 8036614:	00c00044 	movi	r3,1
 8036618:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;
      break;
 803661c:	00002b06 	br	80366cc <sogetopt+0x530>
         *(int *)val = 0;
 8036620:	e0bff717 	ldw	r2,-36(fp)
 8036624:	10000015 	stw	zero,0(r2)
      break;
 8036628:	00002806 	br	80366cc <sogetopt+0x530>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 803662c:	e0bff917 	ldw	r2,-28(fp)
 8036630:	10800983 	ldbu	r2,38(r2)
 8036634:	10803fcc 	andi	r2,r2,255
 8036638:	1080201c 	xori	r2,r2,128
 803663c:	10bfe004 	addi	r2,r2,-128
 8036640:	10800060 	cmpeqi	r2,r2,1
 8036644:	1000031e 	bne	r2,zero,8036654 <sogetopt+0x4b8>
      {
         error = EINVAL;
 8036648:	00800584 	movi	r2,22
 803664c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036650:	00001e06 	br	80366cc <sogetopt+0x530>
      }
      inp = (struct inpcb *)(so->so_pcb);
 8036654:	e0bff917 	ldw	r2,-28(fp)
 8036658:	10800117 	ldw	r2,4(r2)
 803665c:	e0bffe15 	stw	r2,-8(fp)
      tp = intotcpcb(inp);
 8036660:	e0bffe17 	ldw	r2,-8(fp)
 8036664:	10800917 	ldw	r2,36(r2)
 8036668:	e0bffd15 	stw	r2,-12(fp)
      if (!tp)
 803666c:	e0bffd17 	ldw	r2,-12(fp)
 8036670:	1000031e 	bne	r2,zero,8036680 <sogetopt+0x4e4>
      {
         error = ENOTCONN;
 8036674:	00802004 	movi	r2,128
 8036678:	e0bfff15 	stw	r2,-4(fp)
         break;
 803667c:	00001306 	br	80366cc <sogetopt+0x530>
      }
      /* try to make sure that the argument pointer is valid */
      if (val == NULL)
 8036680:	e0bff717 	ldw	r2,-36(fp)
 8036684:	1000031e 	bne	r2,zero,8036694 <sogetopt+0x4f8>
      {
         error = ENP_PARAM;
 8036688:	00bffd84 	movi	r2,-10
 803668c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8036690:	00000e06 	br	80366cc <sogetopt+0x530>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
 8036694:	e0bffd17 	ldw	r2,-12(fp)
 8036698:	10800b0b 	ldhu	r2,44(r2)
 803669c:	10bfffcc 	andi	r2,r2,65535
 80366a0:	1080010c 	andi	r2,r2,4
 80366a4:	10000426 	beq	r2,zero,80366b8 <sogetopt+0x51c>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
 80366a8:	e0bff717 	ldw	r2,-36(fp)
 80366ac:	00c00044 	movi	r3,1
 80366b0:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */

      break;
 80366b4:	00000506 	br	80366cc <sogetopt+0x530>
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
 80366b8:	e0bff717 	ldw	r2,-36(fp)
 80366bc:	10000015 	stw	zero,0(r2)
      break;
 80366c0:	00000206 	br	80366cc <sogetopt+0x530>
   }

   default:
      return ENOPROTOOPT;
 80366c4:	00801b44 	movi	r2,109
 80366c8:	00000106 	br	80366d0 <sogetopt+0x534>
   }
   return error;     /* no error */
 80366cc:	e0bfff17 	ldw	r2,-4(fp)
}
 80366d0:	e037883a 	mov	sp,fp
 80366d4:	dfc00117 	ldw	ra,4(sp)
 80366d8:	df000017 	ldw	fp,0(sp)
 80366dc:	dec00204 	addi	sp,sp,8
 80366e0:	f800283a 	ret

080366e4 <sohasoutofband>:
 * RETURNS: 
 */

void
sohasoutofband(struct socket * so)
{
 80366e4:	defffd04 	addi	sp,sp,-12
 80366e8:	dfc00215 	stw	ra,8(sp)
 80366ec:	df000115 	stw	fp,4(sp)
 80366f0:	df000104 	addi	fp,sp,4
 80366f4:	e13fff15 	stw	r4,-4(fp)
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
 80366f8:	e0bfff17 	ldw	r2,-4(fp)
 80366fc:	00c03644 	movi	r3,217
 8036700:	10c00615 	stw	r3,24(r2)
   sorwakeup (so);
 8036704:	e0bfff17 	ldw	r2,-4(fp)
 8036708:	10800a04 	addi	r2,r2,40
 803670c:	100b883a 	mov	r5,r2
 8036710:	e13fff17 	ldw	r4,-4(fp)
 8036714:	8036f040 	call	8036f04 <sbwakeup>
}
 8036718:	0001883a 	nop
 803671c:	e037883a 	mov	sp,fp
 8036720:	dfc00117 	ldw	ra,4(sp)
 8036724:	df000017 	ldw	fp,0(sp)
 8036728:	dec00204 	addi	sp,sp,8
 803672c:	f800283a 	ret

08036730 <soisconnecting>:
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
 8036730:	defffd04 	addi	sp,sp,-12
 8036734:	dfc00215 	stw	ra,8(sp)
 8036738:	df000115 	stw	fp,4(sp)
 803673c:	df000104 	addi	fp,sp,4
 8036740:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
 8036744:	e0bfff17 	ldw	r2,-4(fp)
 8036748:	10c0088b 	ldhu	r3,34(r2)
 803674c:	00bffd44 	movi	r2,-11
 8036750:	1884703a 	and	r2,r3,r2
 8036754:	1007883a 	mov	r3,r2
 8036758:	e0bfff17 	ldw	r2,-4(fp)
 803675c:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTING;
 8036760:	e0bfff17 	ldw	r2,-4(fp)
 8036764:	1080088b 	ldhu	r2,34(r2)
 8036768:	10800114 	ori	r2,r2,4
 803676c:	1007883a 	mov	r3,r2
 8036770:	e0bfff17 	ldw	r2,-4(fp)
 8036774:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 8036778:	e0bfff17 	ldw	r2,-4(fp)
 803677c:	10800904 	addi	r2,r2,36
 8036780:	1009883a 	mov	r4,r2
 8036784:	802c7b80 	call	802c7b8 <tcp_wakeup>
}
 8036788:	0001883a 	nop
 803678c:	e037883a 	mov	sp,fp
 8036790:	dfc00117 	ldw	ra,4(sp)
 8036794:	df000017 	ldw	fp,0(sp)
 8036798:	dec00204 	addi	sp,sp,8
 803679c:	f800283a 	ret

080367a0 <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
 80367a0:	defffc04 	addi	sp,sp,-16
 80367a4:	dfc00315 	stw	ra,12(sp)
 80367a8:	df000215 	stw	fp,8(sp)
 80367ac:	df000204 	addi	fp,sp,8
 80367b0:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   head  =  so->so_head;
 80367b4:	e0bffe17 	ldw	r2,-8(fp)
 80367b8:	10801b17 	ldw	r2,108(r2)
 80367bc:	e0bfff15 	stw	r2,-4(fp)

   if (head) 
 80367c0:	e0bfff17 	ldw	r2,-4(fp)
 80367c4:	10001426 	beq	r2,zero,8036818 <soisconnected+0x78>
   {
      if (soqremque(so, 0) == 0)
 80367c8:	000b883a 	mov	r5,zero
 80367cc:	e13ffe17 	ldw	r4,-8(fp)
 80367d0:	8036ca40 	call	8036ca4 <soqremque>
 80367d4:	1000031e 	bne	r2,zero,80367e4 <soisconnected+0x44>
         panic("soisconnected");
 80367d8:	01020174 	movhi	r4,2053
 80367dc:	210f2004 	addi	r4,r4,15488
 80367e0:	802bd8c0 	call	802bd8c <panic>
      soqinsque(head, so, 1);
 80367e4:	01800044 	movi	r6,1
 80367e8:	e17ffe17 	ldw	r5,-8(fp)
 80367ec:	e13fff17 	ldw	r4,-4(fp)
 80367f0:	8036bf80 	call	8036bf8 <soqinsque>
      sorwakeup(head);
 80367f4:	e0bfff17 	ldw	r2,-4(fp)
 80367f8:	10800a04 	addi	r2,r2,40
 80367fc:	100b883a 	mov	r5,r2
 8036800:	e13fff17 	ldw	r4,-4(fp)
 8036804:	8036f040 	call	8036f04 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
 8036808:	e0bfff17 	ldw	r2,-4(fp)
 803680c:	10800904 	addi	r2,r2,36
 8036810:	1009883a 	mov	r4,r2
 8036814:	802c7b80 	call	802c7b8 <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 8036818:	e0bffe17 	ldw	r2,-8(fp)
 803681c:	10c0088b 	ldhu	r3,34(r2)
 8036820:	00bffcc4 	movi	r2,-13
 8036824:	1884703a 	and	r2,r3,r2
 8036828:	1007883a 	mov	r3,r2
 803682c:	e0bffe17 	ldw	r2,-8(fp)
 8036830:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTED;
 8036834:	e0bffe17 	ldw	r2,-8(fp)
 8036838:	1080088b 	ldhu	r2,34(r2)
 803683c:	10800094 	ori	r2,r2,2
 8036840:	1007883a 	mov	r3,r2
 8036844:	e0bffe17 	ldw	r2,-8(fp)
 8036848:	10c0088d 	sth	r3,34(r2)
   so->so_error = 0;
 803684c:	e0bffe17 	ldw	r2,-8(fp)
 8036850:	10000615 	stw	zero,24(r2)
   tcp_wakeup  ((char *)&so->so_timeo);
 8036854:	e0bffe17 	ldw	r2,-8(fp)
 8036858:	10800904 	addi	r2,r2,36
 803685c:	1009883a 	mov	r4,r2
 8036860:	802c7b80 	call	802c7b8 <tcp_wakeup>
   sorwakeup (so);
 8036864:	e0bffe17 	ldw	r2,-8(fp)
 8036868:	10800a04 	addi	r2,r2,40
 803686c:	100b883a 	mov	r5,r2
 8036870:	e13ffe17 	ldw	r4,-8(fp)
 8036874:	8036f040 	call	8036f04 <sbwakeup>
   sowwakeup (so);
 8036878:	e0bffe17 	ldw	r2,-8(fp)
 803687c:	10801204 	addi	r2,r2,72
 8036880:	100b883a 	mov	r5,r2
 8036884:	e13ffe17 	ldw	r4,-8(fp)
 8036888:	8036f040 	call	8036f04 <sbwakeup>
}
 803688c:	0001883a 	nop
 8036890:	e037883a 	mov	sp,fp
 8036894:	dfc00117 	ldw	ra,4(sp)
 8036898:	df000017 	ldw	fp,0(sp)
 803689c:	dec00204 	addi	sp,sp,8
 80368a0:	f800283a 	ret

080368a4 <soisdisconnecting>:
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 80368a4:	defffd04 	addi	sp,sp,-12
 80368a8:	dfc00215 	stw	ra,8(sp)
 80368ac:	df000115 	stw	fp,4(sp)
 80368b0:	df000104 	addi	fp,sp,4
 80368b4:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~SS_ISCONNECTING;
 80368b8:	e0bfff17 	ldw	r2,-4(fp)
 80368bc:	10c0088b 	ldhu	r3,34(r2)
 80368c0:	00bffec4 	movi	r2,-5
 80368c4:	1884703a 	and	r2,r3,r2
 80368c8:	1007883a 	mov	r3,r2
 80368cc:	e0bfff17 	ldw	r2,-4(fp)
 80368d0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 80368d4:	e0bfff17 	ldw	r2,-4(fp)
 80368d8:	1080088b 	ldhu	r2,34(r2)
 80368dc:	10800e14 	ori	r2,r2,56
 80368e0:	1007883a 	mov	r3,r2
 80368e4:	e0bfff17 	ldw	r2,-4(fp)
 80368e8:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup  ((char *)&so->so_timeo);   
 80368ec:	e0bfff17 	ldw	r2,-4(fp)
 80368f0:	10800904 	addi	r2,r2,36
 80368f4:	1009883a 	mov	r4,r2
 80368f8:	802c7b80 	call	802c7b8 <tcp_wakeup>
   sowwakeup (so);
 80368fc:	e0bfff17 	ldw	r2,-4(fp)
 8036900:	10801204 	addi	r2,r2,72
 8036904:	100b883a 	mov	r5,r2
 8036908:	e13fff17 	ldw	r4,-4(fp)
 803690c:	8036f040 	call	8036f04 <sbwakeup>
   sorwakeup (so);
 8036910:	e0bfff17 	ldw	r2,-4(fp)
 8036914:	10800a04 	addi	r2,r2,40
 8036918:	100b883a 	mov	r5,r2
 803691c:	e13fff17 	ldw	r4,-4(fp)
 8036920:	8036f040 	call	8036f04 <sbwakeup>
}
 8036924:	0001883a 	nop
 8036928:	e037883a 	mov	sp,fp
 803692c:	dfc00117 	ldw	ra,4(sp)
 8036930:	df000017 	ldw	fp,0(sp)
 8036934:	dec00204 	addi	sp,sp,8
 8036938:	f800283a 	ret

0803693c <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
 803693c:	defffd04 	addi	sp,sp,-12
 8036940:	dfc00215 	stw	ra,8(sp)
 8036944:	df000115 	stw	fp,4(sp)
 8036948:	df000104 	addi	fp,sp,4
 803694c:	e13fff15 	stw	r4,-4(fp)
   if (so->so_state & SS_ISCONNECTING)
 8036950:	e0bfff17 	ldw	r2,-4(fp)
 8036954:	1080088b 	ldhu	r2,34(r2)
 8036958:	10bfffcc 	andi	r2,r2,65535
 803695c:	1080010c 	andi	r2,r2,4
 8036960:	10000626 	beq	r2,zero,803697c <soisdisconnected+0x40>
      so->so_state |= SS_WASCONNECTING;
 8036964:	e0bfff17 	ldw	r2,-4(fp)
 8036968:	1080088b 	ldhu	r2,34(r2)
 803696c:	10880014 	ori	r2,r2,8192
 8036970:	1007883a 	mov	r3,r2
 8036974:	e0bfff17 	ldw	r2,-4(fp)
 8036978:	10c0088d 	sth	r3,34(r2)
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
 803697c:	e0bfff17 	ldw	r2,-4(fp)
 8036980:	10c0088b 	ldhu	r3,34(r2)
 8036984:	00bffc44 	movi	r2,-15
 8036988:	1884703a 	and	r2,r3,r2
 803698c:	1007883a 	mov	r3,r2
 8036990:	e0bfff17 	ldw	r2,-4(fp)
 8036994:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
 8036998:	e0bfff17 	ldw	r2,-4(fp)
 803699c:	1080088b 	ldhu	r2,34(r2)
 80369a0:	10800c14 	ori	r2,r2,48
 80369a4:	1007883a 	mov	r3,r2
 80369a8:	e0bfff17 	ldw	r2,-4(fp)
 80369ac:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 80369b0:	e0bfff17 	ldw	r2,-4(fp)
 80369b4:	10800904 	addi	r2,r2,36
 80369b8:	1009883a 	mov	r4,r2
 80369bc:	802c7b80 	call	802c7b8 <tcp_wakeup>
   sowwakeup (so);
 80369c0:	e0bfff17 	ldw	r2,-4(fp)
 80369c4:	10801204 	addi	r2,r2,72
 80369c8:	100b883a 	mov	r5,r2
 80369cc:	e13fff17 	ldw	r4,-4(fp)
 80369d0:	8036f040 	call	8036f04 <sbwakeup>
   sorwakeup (so);
 80369d4:	e0bfff17 	ldw	r2,-4(fp)
 80369d8:	10800a04 	addi	r2,r2,40
 80369dc:	100b883a 	mov	r5,r2
 80369e0:	e13fff17 	ldw	r4,-4(fp)
 80369e4:	8036f040 	call	8036f04 <sbwakeup>
}
 80369e8:	0001883a 	nop
 80369ec:	e037883a 	mov	sp,fp
 80369f0:	dfc00117 	ldw	ra,4(sp)
 80369f4:	df000017 	ldw	fp,0(sp)
 80369f8:	dec00204 	addi	sp,sp,8
 80369fc:	f800283a 	ret

08036a00 <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
 8036a00:	defffb04 	addi	sp,sp,-20
 8036a04:	dfc00415 	stw	ra,16(sp)
 8036a08:	df000315 	stw	fp,12(sp)
 8036a0c:	df000304 	addi	fp,sp,12
 8036a10:	e13ffd15 	stw	r4,-12(fp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 8036a14:	e0bffd17 	ldw	r2,-12(fp)
 8036a18:	10801e43 	ldbu	r2,121(r2)
 8036a1c:	10c03fcc 	andi	r3,r2,255
 8036a20:	18c0201c 	xori	r3,r3,128
 8036a24:	18ffe004 	addi	r3,r3,-128
 8036a28:	e0bffd17 	ldw	r2,-12(fp)
 8036a2c:	10801e03 	ldbu	r2,120(r2)
 8036a30:	10803fcc 	andi	r2,r2,255
 8036a34:	1080201c 	xori	r2,r2,128
 8036a38:	10bfe004 	addi	r2,r2,-128
 8036a3c:	1887883a 	add	r3,r3,r2
 8036a40:	e0bffd17 	ldw	r2,-12(fp)
 8036a44:	10801e83 	ldbu	r2,122(r2)
 8036a48:	10803fcc 	andi	r2,r2,255
 8036a4c:	1080201c 	xori	r2,r2,128
 8036a50:	10bfe004 	addi	r2,r2,-128
 8036a54:	108000e4 	muli	r2,r2,3
 8036a58:	1008d7fa 	srli	r4,r2,31
 8036a5c:	2085883a 	add	r2,r4,r2
 8036a60:	1005d07a 	srai	r2,r2,1
 8036a64:	10c05b16 	blt	r2,r3,8036bd4 <sonewconn+0x1d4>
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 8036a68:	01002104 	movi	r4,132
 8036a6c:	8030d080 	call	8030d08 <npalloc>
 8036a70:	e0bfff15 	stw	r2,-4(fp)
 8036a74:	e0bfff17 	ldw	r2,-4(fp)
 8036a78:	10005826 	beq	r2,zero,8036bdc <sonewconn+0x1dc>
      goto bad;
   so->next = NULL;
 8036a7c:	e0bfff17 	ldw	r2,-4(fp)
 8036a80:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 8036a84:	e17fff17 	ldw	r5,-4(fp)
 8036a88:	010201b4 	movhi	r4,2054
 8036a8c:	213f0b04 	addi	r4,r4,-980
 8036a90:	802fb8c0 	call	802fb8c <putq>
   so->so_type = head->so_type;
 8036a94:	e0bffd17 	ldw	r2,-12(fp)
 8036a98:	10c00983 	ldbu	r3,38(r2)
 8036a9c:	e0bfff17 	ldw	r2,-4(fp)
 8036aa0:	10c00985 	stb	r3,38(r2)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 8036aa4:	e0bffd17 	ldw	r2,-12(fp)
 8036aa8:	10c00417 	ldw	r3,16(r2)
 8036aac:	00bfff44 	movi	r2,-3
 8036ab0:	1886703a 	and	r3,r3,r2
 8036ab4:	e0bfff17 	ldw	r2,-4(fp)
 8036ab8:	10c00415 	stw	r3,16(r2)
   so->so_linger = head->so_linger;
 8036abc:	e0bffd17 	ldw	r2,-12(fp)
 8036ac0:	10c0080b 	ldhu	r3,32(r2)
 8036ac4:	e0bfff17 	ldw	r2,-4(fp)
 8036ac8:	10c0080d 	sth	r3,32(r2)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 8036acc:	e0bffd17 	ldw	r2,-12(fp)
 8036ad0:	1080088b 	ldhu	r2,34(r2)
 8036ad4:	10800054 	ori	r2,r2,1
 8036ad8:	1007883a 	mov	r3,r2
 8036adc:	e0bfff17 	ldw	r2,-4(fp)
 8036ae0:	10c0088d 	sth	r3,34(r2)
   so->so_proto = head->so_proto;
 8036ae4:	e0bffd17 	ldw	r2,-12(fp)
 8036ae8:	10c00217 	ldw	r3,8(r2)
 8036aec:	e0bfff17 	ldw	r2,-4(fp)
 8036af0:	10c00215 	stw	r3,8(r2)
   so->so_timeo = head->so_timeo;
 8036af4:	e0bffd17 	ldw	r2,-12(fp)
 8036af8:	10c0090b 	ldhu	r3,36(r2)
 8036afc:	e0bfff17 	ldw	r2,-4(fp)
 8036b00:	10c0090d 	sth	r3,36(r2)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 8036b04:	d0e03d17 	ldw	r3,-32524(gp)
 8036b08:	e0bfff17 	ldw	r2,-4(fp)
 8036b0c:	10c00b15 	stw	r3,44(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 8036b10:	d0e03c17 	ldw	r3,-32528(gp)
 8036b14:	e0bfff17 	ldw	r2,-4(fp)
 8036b18:	10c01315 	stw	r3,76(r2)
   soqinsque (head, so, 0);
 8036b1c:	000d883a 	mov	r6,zero
 8036b20:	e17fff17 	ldw	r5,-4(fp)
 8036b24:	e13ffd17 	ldw	r4,-12(fp)
 8036b28:	8036bf80 	call	8036bf8 <soqinsque>
   so->so_req = PRU_ATTACH;
 8036b2c:	e0bfff17 	ldw	r2,-4(fp)
 8036b30:	10000715 	stw	zero,28(r2)
   so->so_domain = head->so_domain;
 8036b34:	e0bffd17 	ldw	r2,-12(fp)
 8036b38:	10c00517 	ldw	r3,20(r2)
 8036b3c:	e0bfff17 	ldw	r2,-4(fp)
 8036b40:	10c00515 	stw	r3,20(r2)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 8036b44:	e0bfff17 	ldw	r2,-4(fp)
 8036b48:	10800217 	ldw	r2,8(r2)
 8036b4c:	10800317 	ldw	r2,12(r2)
 8036b50:	000d883a 	mov	r6,zero
 8036b54:	000b883a 	mov	r5,zero
 8036b58:	e13fff17 	ldw	r4,-4(fp)
 8036b5c:	103ee83a 	callr	r2
 8036b60:	10000f1e 	bne	r2,zero,8036ba0 <sonewconn+0x1a0>
      goto bad2;
   if (so_evtmap)
 8036b64:	d0a0c903 	ldbu	r2,-31964(gp)
 8036b68:	10803fcc 	andi	r2,r2,255
 8036b6c:	10000a26 	beq	r2,zero,8036b98 <sonewconn+0x198>
   {
      rc = (*so_evtmap_create) (so);                       
 8036b70:	d0a0c717 	ldw	r2,-31972(gp)
 8036b74:	e13fff17 	ldw	r4,-4(fp)
 8036b78:	103ee83a 	callr	r2
 8036b7c:	e0bffe15 	stw	r2,-8(fp)
      if (rc != 0) goto bad2;
 8036b80:	e0bffe17 	ldw	r2,-8(fp)
 8036b84:	1000081e 	bne	r2,zero,8036ba8 <sonewconn+0x1a8>
      so->owner = head->owner;
 8036b88:	e0bffd17 	ldw	r2,-12(fp)
 8036b8c:	10c02003 	ldbu	r3,128(r2)
 8036b90:	e0bfff17 	ldw	r2,-4(fp)
 8036b94:	10c02005 	stb	r3,128(r2)
   }
   return (so);
 8036b98:	e0bfff17 	ldw	r2,-4(fp)
 8036b9c:	00001106 	br	8036be4 <sonewconn+0x1e4>
      goto bad2;
 8036ba0:	0001883a 	nop
 8036ba4:	00000106 	br	8036bac <sonewconn+0x1ac>
      if (rc != 0) goto bad2;
 8036ba8:	0001883a 	nop
   
bad2:
   (void) soqremque (so, 0);
 8036bac:	000b883a 	mov	r5,zero
 8036bb0:	e13fff17 	ldw	r4,-4(fp)
 8036bb4:	8036ca40 	call	8036ca4 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 8036bb8:	e17fff17 	ldw	r5,-4(fp)
 8036bbc:	010201b4 	movhi	r4,2054
 8036bc0:	213f0b04 	addi	r4,r4,-980
 8036bc4:	802fc3c0 	call	802fc3c <qdel>
   SOC_FREE(so);  /* Free the socket structure */
 8036bc8:	e13fff17 	ldw	r4,-4(fp)
 8036bcc:	8030d3c0 	call	8030d3c <npfree>
 8036bd0:	00000306 	br	8036be0 <sonewconn+0x1e0>
      goto bad;
 8036bd4:	0001883a 	nop
 8036bd8:	00000106 	br	8036be0 <sonewconn+0x1e0>
      goto bad;
 8036bdc:	0001883a 	nop
bad:
   return ((struct socket *)0);
 8036be0:	0005883a 	mov	r2,zero
}
 8036be4:	e037883a 	mov	sp,fp
 8036be8:	dfc00117 	ldw	ra,4(sp)
 8036bec:	df000017 	ldw	fp,0(sp)
 8036bf0:	dec00204 	addi	sp,sp,8
 8036bf4:	f800283a 	ret

08036bf8 <soqinsque>:

void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
 8036bf8:	defffc04 	addi	sp,sp,-16
 8036bfc:	df000315 	stw	fp,12(sp)
 8036c00:	df000304 	addi	fp,sp,12
 8036c04:	e13fff15 	stw	r4,-4(fp)
 8036c08:	e17ffe15 	stw	r5,-8(fp)
 8036c0c:	e1bffd15 	stw	r6,-12(fp)
   so->so_head = head;
 8036c10:	e0bffe17 	ldw	r2,-8(fp)
 8036c14:	e0ffff17 	ldw	r3,-4(fp)
 8036c18:	10c01b15 	stw	r3,108(r2)
   if (q == 0) 
 8036c1c:	e0bffd17 	ldw	r2,-12(fp)
 8036c20:	10000e1e 	bne	r2,zero,8036c5c <soqinsque+0x64>
   {
      head->so_q0len++;
 8036c24:	e0bfff17 	ldw	r2,-4(fp)
 8036c28:	10801e03 	ldbu	r2,120(r2)
 8036c2c:	10800044 	addi	r2,r2,1
 8036c30:	1007883a 	mov	r3,r2
 8036c34:	e0bfff17 	ldw	r2,-4(fp)
 8036c38:	10c01e05 	stb	r3,120(r2)
      so->so_q0 = head->so_q0;
 8036c3c:	e0bfff17 	ldw	r2,-4(fp)
 8036c40:	10c01c17 	ldw	r3,112(r2)
 8036c44:	e0bffe17 	ldw	r2,-8(fp)
 8036c48:	10c01c15 	stw	r3,112(r2)
      head->so_q0 = so;
 8036c4c:	e0bfff17 	ldw	r2,-4(fp)
 8036c50:	e0fffe17 	ldw	r3,-8(fp)
 8036c54:	10c01c15 	stw	r3,112(r2)
   {
      head->so_qlen++;
      so->so_q = head->so_q;
      head->so_q = so;
   }
}
 8036c58:	00000d06 	br	8036c90 <soqinsque+0x98>
      head->so_qlen++;
 8036c5c:	e0bfff17 	ldw	r2,-4(fp)
 8036c60:	10801e43 	ldbu	r2,121(r2)
 8036c64:	10800044 	addi	r2,r2,1
 8036c68:	1007883a 	mov	r3,r2
 8036c6c:	e0bfff17 	ldw	r2,-4(fp)
 8036c70:	10c01e45 	stb	r3,121(r2)
      so->so_q = head->so_q;
 8036c74:	e0bfff17 	ldw	r2,-4(fp)
 8036c78:	10c01d17 	ldw	r3,116(r2)
 8036c7c:	e0bffe17 	ldw	r2,-8(fp)
 8036c80:	10c01d15 	stw	r3,116(r2)
      head->so_q = so;
 8036c84:	e0bfff17 	ldw	r2,-4(fp)
 8036c88:	e0fffe17 	ldw	r3,-8(fp)
 8036c8c:	10c01d15 	stw	r3,116(r2)
}
 8036c90:	0001883a 	nop
 8036c94:	e037883a 	mov	sp,fp
 8036c98:	df000017 	ldw	fp,0(sp)
 8036c9c:	dec00104 	addi	sp,sp,4
 8036ca0:	f800283a 	ret

08036ca4 <soqremque>:
 * RETURNS: 
 */

int
soqremque(struct socket * so, int q)
{
 8036ca4:	defffa04 	addi	sp,sp,-24
 8036ca8:	df000515 	stw	fp,20(sp)
 8036cac:	df000504 	addi	fp,sp,20
 8036cb0:	e13ffc15 	stw	r4,-16(fp)
 8036cb4:	e17ffb15 	stw	r5,-20(fp)
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
 8036cb8:	e0bffc17 	ldw	r2,-16(fp)
 8036cbc:	10801b17 	ldw	r2,108(r2)
 8036cc0:	e0bffe15 	stw	r2,-8(fp)
   prev = head;
 8036cc4:	e0bffe17 	ldw	r2,-8(fp)
 8036cc8:	e0bfff15 	stw	r2,-4(fp)
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
 8036ccc:	e0bffb17 	ldw	r2,-20(fp)
 8036cd0:	10000326 	beq	r2,zero,8036ce0 <soqremque+0x3c>
 8036cd4:	e0bfff17 	ldw	r2,-4(fp)
 8036cd8:	10801d17 	ldw	r2,116(r2)
 8036cdc:	00000206 	br	8036ce8 <soqremque+0x44>
 8036ce0:	e0bfff17 	ldw	r2,-4(fp)
 8036ce4:	10801c17 	ldw	r2,112(r2)
 8036ce8:	e0bffd15 	stw	r2,-12(fp)
      if (next == so)
 8036cec:	e0fffd17 	ldw	r3,-12(fp)
 8036cf0:	e0bffc17 	ldw	r2,-16(fp)
 8036cf4:	18800826 	beq	r3,r2,8036d18 <soqremque+0x74>
         break;
      if (next == head)
 8036cf8:	e0fffd17 	ldw	r3,-12(fp)
 8036cfc:	e0bffe17 	ldw	r2,-8(fp)
 8036d00:	1880021e 	bne	r3,r2,8036d0c <soqremque+0x68>
         return (0);
 8036d04:	0005883a 	mov	r2,zero
 8036d08:	00002406 	br	8036d9c <soqremque+0xf8>
      prev = next;
 8036d0c:	e0bffd17 	ldw	r2,-12(fp)
 8036d10:	e0bfff15 	stw	r2,-4(fp)
      next = q ? prev->so_q : prev->so_q0;
 8036d14:	003fed06 	br	8036ccc <soqremque+0x28>
         break;
 8036d18:	0001883a 	nop
   }
   if (q == 0) 
 8036d1c:	e0bffb17 	ldw	r2,-20(fp)
 8036d20:	10000b1e 	bne	r2,zero,8036d50 <soqremque+0xac>
   {
      prev->so_q0 = next->so_q0;
 8036d24:	e0bffd17 	ldw	r2,-12(fp)
 8036d28:	10c01c17 	ldw	r3,112(r2)
 8036d2c:	e0bfff17 	ldw	r2,-4(fp)
 8036d30:	10c01c15 	stw	r3,112(r2)
      head->so_q0len--;
 8036d34:	e0bffe17 	ldw	r2,-8(fp)
 8036d38:	10801e03 	ldbu	r2,120(r2)
 8036d3c:	10bfffc4 	addi	r2,r2,-1
 8036d40:	1007883a 	mov	r3,r2
 8036d44:	e0bffe17 	ldw	r2,-8(fp)
 8036d48:	10c01e05 	stb	r3,120(r2)
 8036d4c:	00000a06 	br	8036d78 <soqremque+0xd4>
   } else 
   {
      prev->so_q = next->so_q;
 8036d50:	e0bffd17 	ldw	r2,-12(fp)
 8036d54:	10c01d17 	ldw	r3,116(r2)
 8036d58:	e0bfff17 	ldw	r2,-4(fp)
 8036d5c:	10c01d15 	stw	r3,116(r2)
      head->so_qlen--;
 8036d60:	e0bffe17 	ldw	r2,-8(fp)
 8036d64:	10801e43 	ldbu	r2,121(r2)
 8036d68:	10bfffc4 	addi	r2,r2,-1
 8036d6c:	1007883a 	mov	r3,r2
 8036d70:	e0bffe17 	ldw	r2,-8(fp)
 8036d74:	10c01e45 	stb	r3,121(r2)
   }
   next->so_q0 = next->so_q = 0;
 8036d78:	e0bffd17 	ldw	r2,-12(fp)
 8036d7c:	10001d15 	stw	zero,116(r2)
 8036d80:	e0bffd17 	ldw	r2,-12(fp)
 8036d84:	10c01d17 	ldw	r3,116(r2)
 8036d88:	e0bffd17 	ldw	r2,-12(fp)
 8036d8c:	10c01c15 	stw	r3,112(r2)
   next->so_head = 0;
 8036d90:	e0bffd17 	ldw	r2,-12(fp)
 8036d94:	10001b15 	stw	zero,108(r2)
   return 1;
 8036d98:	00800044 	movi	r2,1
}
 8036d9c:	e037883a 	mov	sp,fp
 8036da0:	df000017 	ldw	fp,0(sp)
 8036da4:	dec00104 	addi	sp,sp,4
 8036da8:	f800283a 	ret

08036dac <socantsendmore>:
 * RETURNS: 
 */

void
socantsendmore(struct socket * so)
{
 8036dac:	defffd04 	addi	sp,sp,-12
 8036db0:	dfc00215 	stw	ra,8(sp)
 8036db4:	df000115 	stw	fp,4(sp)
 8036db8:	df000104 	addi	fp,sp,4
 8036dbc:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTSENDMORE;
 8036dc0:	e0bfff17 	ldw	r2,-4(fp)
 8036dc4:	1080088b 	ldhu	r2,34(r2)
 8036dc8:	10800414 	ori	r2,r2,16
 8036dcc:	1007883a 	mov	r3,r2
 8036dd0:	e0bfff17 	ldw	r2,-4(fp)
 8036dd4:	10c0088d 	sth	r3,34(r2)
   sowwakeup(so);
 8036dd8:	e0bfff17 	ldw	r2,-4(fp)
 8036ddc:	10801204 	addi	r2,r2,72
 8036de0:	100b883a 	mov	r5,r2
 8036de4:	e13fff17 	ldw	r4,-4(fp)
 8036de8:	8036f040 	call	8036f04 <sbwakeup>
}
 8036dec:	0001883a 	nop
 8036df0:	e037883a 	mov	sp,fp
 8036df4:	dfc00117 	ldw	ra,4(sp)
 8036df8:	df000017 	ldw	fp,0(sp)
 8036dfc:	dec00204 	addi	sp,sp,8
 8036e00:	f800283a 	ret

08036e04 <socantrcvmore>:
 * RETURNS: 
 */

void
socantrcvmore(struct socket * so)
{
 8036e04:	defffd04 	addi	sp,sp,-12
 8036e08:	dfc00215 	stw	ra,8(sp)
 8036e0c:	df000115 	stw	fp,4(sp)
 8036e10:	df000104 	addi	fp,sp,4
 8036e14:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTRCVMORE;
 8036e18:	e0bfff17 	ldw	r2,-4(fp)
 8036e1c:	1080088b 	ldhu	r2,34(r2)
 8036e20:	10800814 	ori	r2,r2,32
 8036e24:	1007883a 	mov	r3,r2
 8036e28:	e0bfff17 	ldw	r2,-4(fp)
 8036e2c:	10c0088d 	sth	r3,34(r2)
   sorwakeup(so);
 8036e30:	e0bfff17 	ldw	r2,-4(fp)
 8036e34:	10800a04 	addi	r2,r2,40
 8036e38:	100b883a 	mov	r5,r2
 8036e3c:	e13fff17 	ldw	r4,-4(fp)
 8036e40:	8036f040 	call	8036f04 <sbwakeup>
}
 8036e44:	0001883a 	nop
 8036e48:	e037883a 	mov	sp,fp
 8036e4c:	dfc00117 	ldw	ra,4(sp)
 8036e50:	df000017 	ldw	fp,0(sp)
 8036e54:	dec00204 	addi	sp,sp,8
 8036e58:	f800283a 	ret

08036e5c <sbselqueue>:
 * RETURNS: 
 */

void
sbselqueue(struct sockbuf * sb)
{
 8036e5c:	defffe04 	addi	sp,sp,-8
 8036e60:	df000115 	stw	fp,4(sp)
 8036e64:	df000104 	addi	fp,sp,4
 8036e68:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_SEL;
 8036e6c:	e0bfff17 	ldw	r2,-4(fp)
 8036e70:	1080070b 	ldhu	r2,28(r2)
 8036e74:	10800214 	ori	r2,r2,8
 8036e78:	1007883a 	mov	r3,r2
 8036e7c:	e0bfff17 	ldw	r2,-4(fp)
 8036e80:	10c0070d 	sth	r3,28(r2)
}
 8036e84:	0001883a 	nop
 8036e88:	e037883a 	mov	sp,fp
 8036e8c:	df000017 	ldw	fp,0(sp)
 8036e90:	dec00104 	addi	sp,sp,4
 8036e94:	f800283a 	ret

08036e98 <sbwait>:
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 8036e98:	defffd04 	addi	sp,sp,-12
 8036e9c:	dfc00215 	stw	ra,8(sp)
 8036ea0:	df000115 	stw	fp,4(sp)
 8036ea4:	df000104 	addi	fp,sp,4
 8036ea8:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_WAIT;
 8036eac:	e0bfff17 	ldw	r2,-4(fp)
 8036eb0:	1080070b 	ldhu	r2,28(r2)
 8036eb4:	10800114 	ori	r2,r2,4
 8036eb8:	1007883a 	mov	r3,r2
 8036ebc:	e0bfff17 	ldw	r2,-4(fp)
 8036ec0:	10c0070d 	sth	r3,28(r2)
   tcp_sleep ((char *)&sb->sb_cc);
 8036ec4:	e0bfff17 	ldw	r2,-4(fp)
 8036ec8:	1009883a 	mov	r4,r2
 8036ecc:	802c66c0 	call	802c66c <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
 8036ed0:	e0bfff17 	ldw	r2,-4(fp)
 8036ed4:	10c0070b 	ldhu	r3,28(r2)
 8036ed8:	00bffec4 	movi	r2,-5
 8036edc:	1884703a 	and	r2,r3,r2
 8036ee0:	1007883a 	mov	r3,r2
 8036ee4:	e0bfff17 	ldw	r2,-4(fp)
 8036ee8:	10c0070d 	sth	r3,28(r2)
}
 8036eec:	0001883a 	nop
 8036ef0:	e037883a 	mov	sp,fp
 8036ef4:	dfc00117 	ldw	ra,4(sp)
 8036ef8:	df000017 	ldw	fp,0(sp)
 8036efc:	dec00204 	addi	sp,sp,8
 8036f00:	f800283a 	ret

08036f04 <sbwakeup>:
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
 8036f04:	defffc04 	addi	sp,sp,-16
 8036f08:	dfc00315 	stw	ra,12(sp)
 8036f0c:	df000215 	stw	fp,8(sp)
 8036f10:	df000204 	addi	fp,sp,8
 8036f14:	e13fff15 	stw	r4,-4(fp)
 8036f18:	e17ffe15 	stw	r5,-8(fp)
   if (sb->sb_flags & SB_SEL) 
 8036f1c:	e0bffe17 	ldw	r2,-8(fp)
 8036f20:	1080070b 	ldhu	r2,28(r2)
 8036f24:	10bfffcc 	andi	r2,r2,65535
 8036f28:	1080020c 	andi	r2,r2,8
 8036f2c:	10000a26 	beq	r2,zero,8036f58 <sbwakeup+0x54>
   {
      select_wait = 0;
 8036f30:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
 8036f34:	d120ab04 	addi	r4,gp,-32084
 8036f38:	802c7b80 	call	802c7b8 <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
 8036f3c:	e0bffe17 	ldw	r2,-8(fp)
 8036f40:	10c0070b 	ldhu	r3,28(r2)
 8036f44:	00bffdc4 	movi	r2,-9
 8036f48:	1884703a 	and	r2,r3,r2
 8036f4c:	1007883a 	mov	r3,r2
 8036f50:	e0bffe17 	ldw	r2,-8(fp)
 8036f54:	10c0070d 	sth	r3,28(r2)
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
 8036f58:	e0bffe17 	ldw	r2,-8(fp)
 8036f5c:	1080070b 	ldhu	r2,28(r2)
 8036f60:	10bfffcc 	andi	r2,r2,65535
 8036f64:	1080010c 	andi	r2,r2,4
 8036f68:	10000326 	beq	r2,zero,8036f78 <sbwakeup+0x74>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
 8036f6c:	e0bffe17 	ldw	r2,-8(fp)
 8036f70:	1009883a 	mov	r4,r2
 8036f74:	802c7b80 	call	802c7b8 <tcp_wakeup>
   }
#endif   /* SOCK_WAKEALWAYS */
}
 8036f78:	0001883a 	nop
 8036f7c:	e037883a 	mov	sp,fp
 8036f80:	dfc00117 	ldw	ra,4(sp)
 8036f84:	df000017 	ldw	fp,0(sp)
 8036f88:	dec00204 	addi	sp,sp,8
 8036f8c:	f800283a 	ret

08036f90 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 8036f90:	defffb04 	addi	sp,sp,-20
 8036f94:	dfc00415 	stw	ra,16(sp)
 8036f98:	df000315 	stw	fp,12(sp)
 8036f9c:	df000304 	addi	fp,sp,12
 8036fa0:	e13fff15 	stw	r4,-4(fp)
 8036fa4:	e17ffe15 	stw	r5,-8(fp)
 8036fa8:	e1bffd15 	stw	r6,-12(fp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
 8036fac:	e0bfff17 	ldw	r2,-4(fp)
 8036fb0:	10801204 	addi	r2,r2,72
 8036fb4:	e17ffe17 	ldw	r5,-8(fp)
 8036fb8:	1009883a 	mov	r4,r2
 8036fbc:	80370180 	call	8037018 <sbreserve>
 8036fc0:	10000e26 	beq	r2,zero,8036ffc <soreserve+0x6c>
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 8036fc4:	e0bfff17 	ldw	r2,-4(fp)
 8036fc8:	10800a04 	addi	r2,r2,40
 8036fcc:	e17ffd17 	ldw	r5,-12(fp)
 8036fd0:	1009883a 	mov	r4,r2
 8036fd4:	80370180 	call	8037018 <sbreserve>
 8036fd8:	10000226 	beq	r2,zero,8036fe4 <soreserve+0x54>
      goto bad2;
   return (0);
 8036fdc:	0005883a 	mov	r2,zero
 8036fe0:	00000806 	br	8037004 <soreserve+0x74>
      goto bad2;
 8036fe4:	0001883a 	nop
bad2:
   sbrelease(&so->so_snd);
 8036fe8:	e0bfff17 	ldw	r2,-4(fp)
 8036fec:	10801204 	addi	r2,r2,72
 8036ff0:	1009883a 	mov	r4,r2
 8036ff4:	80370680 	call	8037068 <sbrelease>
 8036ff8:	00000106 	br	8037000 <soreserve+0x70>
      goto bad;
 8036ffc:	0001883a 	nop
bad:
   return (ENOBUFS);
 8037000:	00801a44 	movi	r2,105
}
 8037004:	e037883a 	mov	sp,fp
 8037008:	dfc00117 	ldw	ra,4(sp)
 803700c:	df000017 	ldw	fp,0(sp)
 8037010:	dec00204 	addi	sp,sp,8
 8037014:	f800283a 	ret

08037018 <sbreserve>:
 * RETURNS: 
 */

int
sbreserve(struct sockbuf * sb, u_long cc)
{
 8037018:	defffd04 	addi	sp,sp,-12
 803701c:	df000215 	stw	fp,8(sp)
 8037020:	df000204 	addi	fp,sp,8
 8037024:	e13fff15 	stw	r4,-4(fp)
 8037028:	e17ffe15 	stw	r5,-8(fp)
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
 803702c:	e0bfff17 	ldw	r2,-4(fp)
 8037030:	e0fffe17 	ldw	r3,-8(fp)
 8037034:	10c00115 	stw	r3,4(r2)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
 8037038:	e0bffe17 	ldw	r2,-8(fp)
 803703c:	1085883a 	add	r2,r2,r2
 8037040:	10d00070 	cmpltui	r3,r2,16385
 8037044:	1800011e 	bne	r3,zero,803704c <sbreserve+0x34>
 8037048:	00900004 	movi	r2,16384
 803704c:	e0ffff17 	ldw	r3,-4(fp)
 8037050:	18800315 	stw	r2,12(r3)
   return (1);
 8037054:	00800044 	movi	r2,1
}
 8037058:	e037883a 	mov	sp,fp
 803705c:	df000017 	ldw	fp,0(sp)
 8037060:	dec00104 	addi	sp,sp,4
 8037064:	f800283a 	ret

08037068 <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
 8037068:	defffd04 	addi	sp,sp,-12
 803706c:	dfc00215 	stw	ra,8(sp)
 8037070:	df000115 	stw	fp,4(sp)
 8037074:	df000104 	addi	fp,sp,4
 8037078:	e13fff15 	stw	r4,-4(fp)
   sbflush(sb);
 803707c:	e13fff17 	ldw	r4,-4(fp)
 8037080:	80375e80 	call	80375e8 <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
 8037084:	e0bfff17 	ldw	r2,-4(fp)
 8037088:	10000315 	stw	zero,12(r2)
 803708c:	e0bfff17 	ldw	r2,-4(fp)
 8037090:	10c00317 	ldw	r3,12(r2)
 8037094:	e0bfff17 	ldw	r2,-4(fp)
 8037098:	10c00115 	stw	r3,4(r2)
}
 803709c:	0001883a 	nop
 80370a0:	e037883a 	mov	sp,fp
 80370a4:	dfc00117 	ldw	ra,4(sp)
 80370a8:	df000017 	ldw	fp,0(sp)
 80370ac:	dec00204 	addi	sp,sp,8
 80370b0:	f800283a 	ret

080370b4 <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
 80370b4:	defffb04 	addi	sp,sp,-20
 80370b8:	dfc00415 	stw	ra,16(sp)
 80370bc:	df000315 	stw	fp,12(sp)
 80370c0:	df000304 	addi	fp,sp,12
 80370c4:	e13ffe15 	stw	r4,-8(fp)
 80370c8:	e17ffd15 	stw	r5,-12(fp)
   struct mbuf *  n;

   if (m == 0)
 80370cc:	e0bffd17 	ldw	r2,-12(fp)
 80370d0:	10001a26 	beq	r2,zero,803713c <sbappend+0x88>
      return;
   ENTER_CRIT_SECTION(sb);
 80370d4:	80303680 	call	8030368 <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
 80370d8:	e0bffe17 	ldw	r2,-8(fp)
 80370dc:	10800617 	ldw	r2,24(r2)
 80370e0:	e0bfff15 	stw	r2,-4(fp)
 80370e4:	e0bfff17 	ldw	r2,-4(fp)
 80370e8:	10000e26 	beq	r2,zero,8037124 <sbappend+0x70>
   {
      while (n->m_act)
 80370ec:	00000306 	br	80370fc <sbappend+0x48>
         n = n->m_act;
 80370f0:	e0bfff17 	ldw	r2,-4(fp)
 80370f4:	10800717 	ldw	r2,28(r2)
 80370f8:	e0bfff15 	stw	r2,-4(fp)
      while (n->m_act)
 80370fc:	e0bfff17 	ldw	r2,-4(fp)
 8037100:	10800717 	ldw	r2,28(r2)
 8037104:	103ffa1e 	bne	r2,zero,80370f0 <sbappend+0x3c>
      while (n->m_next)
 8037108:	00000306 	br	8037118 <sbappend+0x64>
         n = n->m_next;
 803710c:	e0bfff17 	ldw	r2,-4(fp)
 8037110:	10800617 	ldw	r2,24(r2)
 8037114:	e0bfff15 	stw	r2,-4(fp)
      while (n->m_next)
 8037118:	e0bfff17 	ldw	r2,-4(fp)
 803711c:	10800617 	ldw	r2,24(r2)
 8037120:	103ffa1e 	bne	r2,zero,803710c <sbappend+0x58>
   }
   sbcompress(sb, m, n);
 8037124:	e1bfff17 	ldw	r6,-4(fp)
 8037128:	e17ffd17 	ldw	r5,-12(fp)
 803712c:	e13ffe17 	ldw	r4,-8(fp)
 8037130:	80374080 	call	8037408 <sbcompress>
   EXIT_CRIT_SECTION(sb);
 8037134:	80303c80 	call	80303c8 <irq_Unmask>
 8037138:	00000106 	br	8037140 <sbappend+0x8c>
      return;
 803713c:	0001883a 	nop
}
 8037140:	e037883a 	mov	sp,fp
 8037144:	dfc00117 	ldw	ra,4(sp)
 8037148:	df000017 	ldw	fp,0(sp)
 803714c:	dec00204 	addi	sp,sp,8
 8037150:	f800283a 	ret

08037154 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
 8037154:	defffb04 	addi	sp,sp,-20
 8037158:	dfc00415 	stw	ra,16(sp)
 803715c:	df000315 	stw	fp,12(sp)
 8037160:	df000304 	addi	fp,sp,12
 8037164:	e13ffe15 	stw	r4,-8(fp)
 8037168:	e17ffd15 	stw	r5,-12(fp)
   struct mbuf *  m;

   if (m0 == 0)
 803716c:	e0bffd17 	ldw	r2,-12(fp)
 8037170:	10002826 	beq	r2,zero,8037214 <sbappendrecord+0xc0>
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
 8037174:	80303680 	call	8030368 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 8037178:	e0bffe17 	ldw	r2,-8(fp)
 803717c:	10800617 	ldw	r2,24(r2)
 8037180:	e0bfff15 	stw	r2,-4(fp)
 8037184:	e0bfff17 	ldw	r2,-4(fp)
 8037188:	10000726 	beq	r2,zero,80371a8 <sbappendrecord+0x54>
      while (m->m_act)
 803718c:	00000306 	br	803719c <sbappendrecord+0x48>
      m = m->m_act;
 8037190:	e0bfff17 	ldw	r2,-4(fp)
 8037194:	10800717 	ldw	r2,28(r2)
 8037198:	e0bfff15 	stw	r2,-4(fp)
      while (m->m_act)
 803719c:	e0bfff17 	ldw	r2,-4(fp)
 80371a0:	10800717 	ldw	r2,28(r2)
 80371a4:	103ffa1e 	bne	r2,zero,8037190 <sbappendrecord+0x3c>
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 80371a8:	e0bffe17 	ldw	r2,-8(fp)
 80371ac:	10c00017 	ldw	r3,0(r2)
 80371b0:	e0bffd17 	ldw	r2,-12(fp)
 80371b4:	10800217 	ldw	r2,8(r2)
 80371b8:	1887883a 	add	r3,r3,r2
 80371bc:	e0bffe17 	ldw	r2,-8(fp)
 80371c0:	10c00015 	stw	r3,0(r2)
   if (m)
 80371c4:	e0bfff17 	ldw	r2,-4(fp)
 80371c8:	10000426 	beq	r2,zero,80371dc <sbappendrecord+0x88>
      m->m_act = m0;
 80371cc:	e0bfff17 	ldw	r2,-4(fp)
 80371d0:	e0fffd17 	ldw	r3,-12(fp)
 80371d4:	10c00715 	stw	r3,28(r2)
 80371d8:	00000306 	br	80371e8 <sbappendrecord+0x94>
   else
      sb->sb_mb = m0;
 80371dc:	e0bffe17 	ldw	r2,-8(fp)
 80371e0:	e0fffd17 	ldw	r3,-12(fp)
 80371e4:	10c00615 	stw	r3,24(r2)
   m = m0->m_next;
 80371e8:	e0bffd17 	ldw	r2,-12(fp)
 80371ec:	10800617 	ldw	r2,24(r2)
 80371f0:	e0bfff15 	stw	r2,-4(fp)
   m0->m_next = 0;
 80371f4:	e0bffd17 	ldw	r2,-12(fp)
 80371f8:	10000615 	stw	zero,24(r2)
   sbcompress(sb, m, m0);
 80371fc:	e1bffd17 	ldw	r6,-12(fp)
 8037200:	e17fff17 	ldw	r5,-4(fp)
 8037204:	e13ffe17 	ldw	r4,-8(fp)
 8037208:	80374080 	call	8037408 <sbcompress>
   EXIT_CRIT_SECTION(sb);
 803720c:	80303c80 	call	80303c8 <irq_Unmask>
 8037210:	00000106 	br	8037218 <sbappendrecord+0xc4>
      return;
 8037214:	0001883a 	nop
}
 8037218:	e037883a 	mov	sp,fp
 803721c:	dfc00117 	ldw	ra,4(sp)
 8037220:	df000017 	ldw	fp,0(sp)
 8037224:	dec00204 	addi	sp,sp,8
 8037228:	f800283a 	ret

0803722c <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
 803722c:	defff804 	addi	sp,sp,-32
 8037230:	dfc00715 	stw	ra,28(sp)
 8037234:	df000615 	stw	fp,24(sp)
 8037238:	df000604 	addi	fp,sp,24
 803723c:	e13ffc15 	stw	r4,-16(fp)
 8037240:	e17ffb15 	stw	r5,-20(fp)
 8037244:	e1bffa15 	stw	r6,-24(fp)
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);
 8037248:	00800404 	movi	r2,16
 803724c:	e0bffd15 	stw	r2,-12(fp)

   ENTER_CRIT_SECTION(sb);
 8037250:	80303680 	call	8030368 <irq_Mask>
   for (m = m0; m; m = m->m_next)
 8037254:	e0bffa17 	ldw	r2,-24(fp)
 8037258:	e0bfff15 	stw	r2,-4(fp)
 803725c:	00000806 	br	8037280 <sbappendaddr+0x54>
      space += m->m_len;
 8037260:	e0bfff17 	ldw	r2,-4(fp)
 8037264:	10c00217 	ldw	r3,8(r2)
 8037268:	e0bffd17 	ldw	r2,-12(fp)
 803726c:	1885883a 	add	r2,r3,r2
 8037270:	e0bffd15 	stw	r2,-12(fp)
   for (m = m0; m; m = m->m_next)
 8037274:	e0bfff17 	ldw	r2,-4(fp)
 8037278:	10800617 	ldw	r2,24(r2)
 803727c:	e0bfff15 	stw	r2,-4(fp)
 8037280:	e0bfff17 	ldw	r2,-4(fp)
 8037284:	103ff61e 	bne	r2,zero,8037260 <sbappendaddr+0x34>
   if (space > (int)sbspace(sb))
 8037288:	e0bffc17 	ldw	r2,-16(fp)
 803728c:	10800117 	ldw	r2,4(r2)
 8037290:	1007883a 	mov	r3,r2
 8037294:	e0bffc17 	ldw	r2,-16(fp)
 8037298:	10800017 	ldw	r2,0(r2)
 803729c:	1885c83a 	sub	r2,r3,r2
 80372a0:	10000716 	blt	r2,zero,80372c0 <sbappendaddr+0x94>
 80372a4:	e0bffc17 	ldw	r2,-16(fp)
 80372a8:	10c00117 	ldw	r3,4(r2)
 80372ac:	e0bffc17 	ldw	r2,-16(fp)
 80372b0:	10800017 	ldw	r2,0(r2)
 80372b4:	1885c83a 	sub	r2,r3,r2
 80372b8:	1007883a 	mov	r3,r2
 80372bc:	00000106 	br	80372c4 <sbappendaddr+0x98>
 80372c0:	0007883a 	mov	r3,zero
 80372c4:	e0bffd17 	ldw	r2,-12(fp)
 80372c8:	1880030e 	bge	r3,r2,80372d8 <sbappendaddr+0xac>
   {
      EXIT_CRIT_SECTION(sb);
 80372cc:	80303c80 	call	80303c8 <irq_Unmask>
      return (0);
 80372d0:	0005883a 	mov	r2,zero
 80372d4:	00004706 	br	80373f4 <sbappendaddr+0x1c8>
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
 80372d8:	01400404 	movi	r5,16
 80372dc:	01000244 	movi	r4,9
 80372e0:	8030f540 	call	8030f54 <m_getnbuf>
 80372e4:	e0bfff15 	stw	r2,-4(fp)
 80372e8:	e0bfff17 	ldw	r2,-4(fp)
 80372ec:	1000031e 	bne	r2,zero,80372fc <sbappendaddr+0xd0>
   {
      EXIT_CRIT_SECTION(sb);
 80372f0:	80303c80 	call	80303c8 <irq_Unmask>
      return 0;
 80372f4:	0005883a 	mov	r2,zero
 80372f8:	00003e06 	br	80373f4 <sbappendaddr+0x1c8>
   }
   *mtod(m, struct sockaddr *) = *asa;
 80372fc:	e0bfff17 	ldw	r2,-4(fp)
 8037300:	10800317 	ldw	r2,12(r2)
 8037304:	e0fffb17 	ldw	r3,-20(fp)
 8037308:	1900000b 	ldhu	r4,0(r3)
 803730c:	1100000d 	sth	r4,0(r2)
 8037310:	1900008b 	ldhu	r4,2(r3)
 8037314:	1100008d 	sth	r4,2(r2)
 8037318:	1900010b 	ldhu	r4,4(r3)
 803731c:	1100010d 	sth	r4,4(r2)
 8037320:	1900018b 	ldhu	r4,6(r3)
 8037324:	1100018d 	sth	r4,6(r2)
 8037328:	1900020b 	ldhu	r4,8(r3)
 803732c:	1100020d 	sth	r4,8(r2)
 8037330:	1900028b 	ldhu	r4,10(r3)
 8037334:	1100028d 	sth	r4,10(r2)
 8037338:	1900030b 	ldhu	r4,12(r3)
 803733c:	1100030d 	sth	r4,12(r2)
 8037340:	18c0038b 	ldhu	r3,14(r3)
 8037344:	10c0038d 	sth	r3,14(r2)
   m->m_len = sizeof (*asa);
 8037348:	e0bfff17 	ldw	r2,-4(fp)
 803734c:	00c00404 	movi	r3,16
 8037350:	10c00215 	stw	r3,8(r2)
   sballoc (sb, m);
 8037354:	e0bffc17 	ldw	r2,-16(fp)
 8037358:	10c00017 	ldw	r3,0(r2)
 803735c:	e0bfff17 	ldw	r2,-4(fp)
 8037360:	10800217 	ldw	r2,8(r2)
 8037364:	1887883a 	add	r3,r3,r2
 8037368:	e0bffc17 	ldw	r2,-16(fp)
 803736c:	10c00015 	stw	r3,0(r2)
   if ((n = sb->sb_mb) != NULL) 
 8037370:	e0bffc17 	ldw	r2,-16(fp)
 8037374:	10800617 	ldw	r2,24(r2)
 8037378:	e0bffe15 	stw	r2,-8(fp)
 803737c:	e0bffe17 	ldw	r2,-8(fp)
 8037380:	10000b26 	beq	r2,zero,80373b0 <sbappendaddr+0x184>
   {
      while (n->m_act)
 8037384:	00000306 	br	8037394 <sbappendaddr+0x168>
         n = n->m_act;
 8037388:	e0bffe17 	ldw	r2,-8(fp)
 803738c:	10800717 	ldw	r2,28(r2)
 8037390:	e0bffe15 	stw	r2,-8(fp)
      while (n->m_act)
 8037394:	e0bffe17 	ldw	r2,-8(fp)
 8037398:	10800717 	ldw	r2,28(r2)
 803739c:	103ffa1e 	bne	r2,zero,8037388 <sbappendaddr+0x15c>
      n->m_act = m;
 80373a0:	e0bffe17 	ldw	r2,-8(fp)
 80373a4:	e0ffff17 	ldw	r3,-4(fp)
 80373a8:	10c00715 	stw	r3,28(r2)
 80373ac:	00000306 	br	80373bc <sbappendaddr+0x190>
   } else
      sb->sb_mb = m;
 80373b0:	e0bffc17 	ldw	r2,-16(fp)
 80373b4:	e0ffff17 	ldw	r3,-4(fp)
 80373b8:	10c00615 	stw	r3,24(r2)
   if (m->m_next)
 80373bc:	e0bfff17 	ldw	r2,-4(fp)
 80373c0:	10800617 	ldw	r2,24(r2)
 80373c4:	10000326 	beq	r2,zero,80373d4 <sbappendaddr+0x1a8>
      m = m->m_next;
 80373c8:	e0bfff17 	ldw	r2,-4(fp)
 80373cc:	10800617 	ldw	r2,24(r2)
 80373d0:	e0bfff15 	stw	r2,-4(fp)
   if (m0)
 80373d4:	e0bffa17 	ldw	r2,-24(fp)
 80373d8:	10000426 	beq	r2,zero,80373ec <sbappendaddr+0x1c0>
      sbcompress(sb, m0, m);
 80373dc:	e1bfff17 	ldw	r6,-4(fp)
 80373e0:	e17ffa17 	ldw	r5,-24(fp)
 80373e4:	e13ffc17 	ldw	r4,-16(fp)
 80373e8:	80374080 	call	8037408 <sbcompress>

   EXIT_CRIT_SECTION(sb);
 80373ec:	80303c80 	call	80303c8 <irq_Unmask>
   return (1);
 80373f0:	00800044 	movi	r2,1
}
 80373f4:	e037883a 	mov	sp,fp
 80373f8:	dfc00117 	ldw	ra,4(sp)
 80373fc:	df000017 	ldw	fp,0(sp)
 8037400:	dec00204 	addi	sp,sp,8
 8037404:	f800283a 	ret

08037408 <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
 8037408:	defffb04 	addi	sp,sp,-20
 803740c:	dfc00415 	stw	ra,16(sp)
 8037410:	df000315 	stw	fp,12(sp)
 8037414:	df000304 	addi	fp,sp,12
 8037418:	e13fff15 	stw	r4,-4(fp)
 803741c:	e17ffe15 	stw	r5,-8(fp)
 8037420:	e1bffd15 	stw	r6,-12(fp)

   while (m) 
 8037424:	00006706 	br	80375c4 <sbcompress+0x1bc>
   {
      if (m->m_len == 0) 
 8037428:	e0bffe17 	ldw	r2,-8(fp)
 803742c:	10800217 	ldw	r2,8(r2)
 8037430:	1000041e 	bne	r2,zero,8037444 <sbcompress+0x3c>
      {
         m = m_free(m);
 8037434:	e13ffe17 	ldw	r4,-8(fp)
 8037438:	80310dc0 	call	80310dc <m_free>
 803743c:	e0bffe15 	stw	r2,-8(fp)
         continue;
 8037440:	00006006 	br	80375c4 <sbcompress+0x1bc>
      }
      if (m->m_type != MT_RXDATA && 
 8037444:	e0bffe17 	ldw	r2,-8(fp)
 8037448:	10800817 	ldw	r2,32(r2)
 803744c:	10800060 	cmpeqi	r2,r2,1
 8037450:	1000111e 	bne	r2,zero,8037498 <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
 8037454:	e0bffe17 	ldw	r2,-8(fp)
 8037458:	10800817 	ldw	r2,32(r2)
      if (m->m_type != MT_RXDATA && 
 803745c:	108000a0 	cmpeqi	r2,r2,2
 8037460:	10000d1e 	bne	r2,zero,8037498 <sbcompress+0x90>
          m->m_type != MT_SONAME) 
 8037464:	e0bffe17 	ldw	r2,-8(fp)
 8037468:	10800817 	ldw	r2,32(r2)
          m->m_type != MT_TXDATA && 
 803746c:	10800260 	cmpeqi	r2,r2,9
 8037470:	1000091e 	bne	r2,zero,8037498 <sbcompress+0x90>
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
 8037474:	e0bffe17 	ldw	r2,-8(fp)
 8037478:	10800817 	ldw	r2,32(r2)
 803747c:	100b883a 	mov	r5,r2
 8037480:	01020174 	movhi	r4,2053
 8037484:	210f2404 	addi	r4,r4,15504
 8037488:	8003b840 	call	8003b84 <printf>
         panic ("sbcomp:bad");
 803748c:	01020174 	movhi	r4,2053
 8037490:	210f2904 	addi	r4,r4,15524
 8037494:	802bd8c0 	call	802bd8c <panic>
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 8037498:	e0bffd17 	ldw	r2,-12(fp)
 803749c:	10003226 	beq	r2,zero,8037568 <sbcompress+0x160>
 80374a0:	e0bfff17 	ldw	r2,-4(fp)
 80374a4:	1080070b 	ldhu	r2,28(r2)
 80374a8:	10bfffcc 	andi	r2,r2,65535
 80374ac:	1080200c 	andi	r2,r2,128
 80374b0:	10002d26 	beq	r2,zero,8037568 <sbcompress+0x160>
          ((n->m_len + m->m_len) <
 80374b4:	e0bffd17 	ldw	r2,-12(fp)
 80374b8:	10c00217 	ldw	r3,8(r2)
 80374bc:	e0bffe17 	ldw	r2,-8(fp)
 80374c0:	10800217 	ldw	r2,8(r2)
 80374c4:	1887883a 	add	r3,r3,r2
          n->m_memsz - (n->m_data - n->m_base) ) ) 
 80374c8:	e0bffd17 	ldw	r2,-12(fp)
 80374cc:	10800517 	ldw	r2,20(r2)
 80374d0:	e13ffd17 	ldw	r4,-12(fp)
 80374d4:	21400317 	ldw	r5,12(r4)
 80374d8:	e13ffd17 	ldw	r4,-12(fp)
 80374dc:	21000417 	ldw	r4,16(r4)
 80374e0:	2909c83a 	sub	r4,r5,r4
 80374e4:	1105c83a 	sub	r2,r2,r4
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 80374e8:	18801f2e 	bgeu	r3,r2,8037568 <sbcompress+0x160>
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
 80374ec:	e0bffd17 	ldw	r2,-12(fp)
 80374f0:	10c00317 	ldw	r3,12(r2)
 80374f4:	e0bffd17 	ldw	r2,-12(fp)
 80374f8:	10800217 	ldw	r2,8(r2)
 80374fc:	1887883a 	add	r3,r3,r2
 8037500:	e0bffe17 	ldw	r2,-8(fp)
 8037504:	11000317 	ldw	r4,12(r2)
 8037508:	e0bffe17 	ldw	r2,-8(fp)
 803750c:	10800217 	ldw	r2,8(r2)
 8037510:	100d883a 	mov	r6,r2
 8037514:	200b883a 	mov	r5,r4
 8037518:	1809883a 	mov	r4,r3
 803751c:	80037cc0 	call	80037cc <memcpy>
         sballoc(sb, m);
 8037520:	e0bfff17 	ldw	r2,-4(fp)
 8037524:	10c00017 	ldw	r3,0(r2)
 8037528:	e0bffe17 	ldw	r2,-8(fp)
 803752c:	10800217 	ldw	r2,8(r2)
 8037530:	1887883a 	add	r3,r3,r2
 8037534:	e0bfff17 	ldw	r2,-4(fp)
 8037538:	10c00015 	stw	r3,0(r2)
         n->m_len += m->m_len;
 803753c:	e0bffd17 	ldw	r2,-12(fp)
 8037540:	10c00217 	ldw	r3,8(r2)
 8037544:	e0bffe17 	ldw	r2,-8(fp)
 8037548:	10800217 	ldw	r2,8(r2)
 803754c:	1887883a 	add	r3,r3,r2
 8037550:	e0bffd17 	ldw	r2,-12(fp)
 8037554:	10c00215 	stw	r3,8(r2)
         m = m_free(m);
 8037558:	e13ffe17 	ldw	r4,-8(fp)
 803755c:	80310dc0 	call	80310dc <m_free>
 8037560:	e0bffe15 	stw	r2,-8(fp)
         continue;
 8037564:	00001706 	br	80375c4 <sbcompress+0x1bc>
      }
      sballoc(sb, m);
 8037568:	e0bfff17 	ldw	r2,-4(fp)
 803756c:	10c00017 	ldw	r3,0(r2)
 8037570:	e0bffe17 	ldw	r2,-8(fp)
 8037574:	10800217 	ldw	r2,8(r2)
 8037578:	1887883a 	add	r3,r3,r2
 803757c:	e0bfff17 	ldw	r2,-4(fp)
 8037580:	10c00015 	stw	r3,0(r2)
      if (n)
 8037584:	e0bffd17 	ldw	r2,-12(fp)
 8037588:	10000426 	beq	r2,zero,803759c <sbcompress+0x194>
         n->m_next = m;
 803758c:	e0bffd17 	ldw	r2,-12(fp)
 8037590:	e0fffe17 	ldw	r3,-8(fp)
 8037594:	10c00615 	stw	r3,24(r2)
 8037598:	00000306 	br	80375a8 <sbcompress+0x1a0>
      else
         sb->sb_mb = m;
 803759c:	e0bfff17 	ldw	r2,-4(fp)
 80375a0:	e0fffe17 	ldw	r3,-8(fp)
 80375a4:	10c00615 	stw	r3,24(r2)
      n = m;
 80375a8:	e0bffe17 	ldw	r2,-8(fp)
 80375ac:	e0bffd15 	stw	r2,-12(fp)
      m = m->m_next;
 80375b0:	e0bffe17 	ldw	r2,-8(fp)
 80375b4:	10800617 	ldw	r2,24(r2)
 80375b8:	e0bffe15 	stw	r2,-8(fp)
      n->m_next = 0;
 80375bc:	e0bffd17 	ldw	r2,-12(fp)
 80375c0:	10000615 	stw	zero,24(r2)
   while (m) 
 80375c4:	e0bffe17 	ldw	r2,-8(fp)
 80375c8:	103f971e 	bne	r2,zero,8037428 <sbcompress+0x20>
   }
}
 80375cc:	0001883a 	nop
 80375d0:	0001883a 	nop
 80375d4:	e037883a 	mov	sp,fp
 80375d8:	dfc00117 	ldw	ra,4(sp)
 80375dc:	df000017 	ldw	fp,0(sp)
 80375e0:	dec00204 	addi	sp,sp,8
 80375e4:	f800283a 	ret

080375e8 <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
 80375e8:	defffd04 	addi	sp,sp,-12
 80375ec:	dfc00215 	stw	ra,8(sp)
 80375f0:	df000115 	stw	fp,4(sp)
 80375f4:	df000104 	addi	fp,sp,4
 80375f8:	e13fff15 	stw	r4,-4(fp)
   ENTER_CRIT_SECTION(sb);
 80375fc:	80303680 	call	8030368 <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
 8037600:	e0bfff17 	ldw	r2,-4(fp)
 8037604:	1080070b 	ldhu	r2,28(r2)
 8037608:	10bfffcc 	andi	r2,r2,65535
 803760c:	1080004c 	andi	r2,r2,1
 8037610:	10000926 	beq	r2,zero,8037638 <sbflush+0x50>
      panic("sbflush");
 8037614:	01020174 	movhi	r4,2053
 8037618:	210f2c04 	addi	r4,r4,15536
 803761c:	802bd8c0 	call	802bd8c <panic>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 8037620:	00000506 	br	8037638 <sbflush+0x50>
      sbdrop (sb, (int)sb->sb_cc);
 8037624:	e0bfff17 	ldw	r2,-4(fp)
 8037628:	10800017 	ldw	r2,0(r2)
 803762c:	100b883a 	mov	r5,r2
 8037630:	e13fff17 	ldw	r4,-4(fp)
 8037634:	803766c0 	call	803766c <sbdrop>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 8037638:	e0bfff17 	ldw	r2,-4(fp)
 803763c:	10800217 	ldw	r2,8(r2)
 8037640:	103ff81e 	bne	r2,zero,8037624 <sbflush+0x3c>
 8037644:	e0bfff17 	ldw	r2,-4(fp)
 8037648:	10800017 	ldw	r2,0(r2)
 803764c:	103ff51e 	bne	r2,zero,8037624 <sbflush+0x3c>
   EXIT_CRIT_SECTION(sb);
 8037650:	80303c80 	call	80303c8 <irq_Unmask>
}
 8037654:	0001883a 	nop
 8037658:	e037883a 	mov	sp,fp
 803765c:	dfc00117 	ldw	ra,4(sp)
 8037660:	df000017 	ldw	fp,0(sp)
 8037664:	dec00204 	addi	sp,sp,8
 8037668:	f800283a 	ret

0803766c <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
 803766c:	defff904 	addi	sp,sp,-28
 8037670:	dfc00615 	stw	ra,24(sp)
 8037674:	df000515 	stw	fp,20(sp)
 8037678:	df000504 	addi	fp,sp,20
 803767c:	e13ffc15 	stw	r4,-16(fp)
 8037680:	e17ffb15 	stw	r5,-20(fp)
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
 8037684:	80303680 	call	8030368 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 8037688:	e0bffc17 	ldw	r2,-16(fp)
 803768c:	10800617 	ldw	r2,24(r2)
 8037690:	e0bfff15 	stw	r2,-4(fp)
 8037694:	e0bfff17 	ldw	r2,-4(fp)
 8037698:	10000426 	beq	r2,zero,80376ac <sbdrop+0x40>
      next = m->m_act;
 803769c:	e0bfff17 	ldw	r2,-4(fp)
 80376a0:	10800717 	ldw	r2,28(r2)
 80376a4:	e0bffe15 	stw	r2,-8(fp)
 80376a8:	00003706 	br	8037788 <sbdrop+0x11c>
   else
      next = NULL;
 80376ac:	e03ffe15 	stw	zero,-8(fp)
   while (len > 0) 
 80376b0:	00003506 	br	8037788 <sbdrop+0x11c>
   {
      if (m == 0) 
 80376b4:	e0bfff17 	ldw	r2,-4(fp)
 80376b8:	10000b1e 	bne	r2,zero,80376e8 <sbdrop+0x7c>
      {
         if (next == 0)
 80376bc:	e0bffe17 	ldw	r2,-8(fp)
 80376c0:	1000031e 	bne	r2,zero,80376d0 <sbdrop+0x64>
            panic("sbdrop");
 80376c4:	01020174 	movhi	r4,2053
 80376c8:	210f2e04 	addi	r4,r4,15544
 80376cc:	802bd8c0 	call	802bd8c <panic>
         m = next;
 80376d0:	e0bffe17 	ldw	r2,-8(fp)
 80376d4:	e0bfff15 	stw	r2,-4(fp)
         next = m->m_act;
 80376d8:	e0bfff17 	ldw	r2,-4(fp)
 80376dc:	10800717 	ldw	r2,28(r2)
 80376e0:	e0bffe15 	stw	r2,-8(fp)
         continue;
 80376e4:	00002806 	br	8037788 <sbdrop+0x11c>
      }
      if (m->m_len > (unsigned)len) 
 80376e8:	e0bfff17 	ldw	r2,-4(fp)
 80376ec:	10800217 	ldw	r2,8(r2)
 80376f0:	e0fffb17 	ldw	r3,-20(fp)
 80376f4:	1880132e 	bgeu	r3,r2,8037744 <sbdrop+0xd8>
      {
         m->m_len -= len;
 80376f8:	e0bfff17 	ldw	r2,-4(fp)
 80376fc:	10c00217 	ldw	r3,8(r2)
 8037700:	e0bffb17 	ldw	r2,-20(fp)
 8037704:	1887c83a 	sub	r3,r3,r2
 8037708:	e0bfff17 	ldw	r2,-4(fp)
 803770c:	10c00215 	stw	r3,8(r2)
         m->m_data += len;
 8037710:	e0bfff17 	ldw	r2,-4(fp)
 8037714:	10c00317 	ldw	r3,12(r2)
 8037718:	e0bffb17 	ldw	r2,-20(fp)
 803771c:	1887883a 	add	r3,r3,r2
 8037720:	e0bfff17 	ldw	r2,-4(fp)
 8037724:	10c00315 	stw	r3,12(r2)
         sb->sb_cc -= len;
 8037728:	e0bffc17 	ldw	r2,-16(fp)
 803772c:	10c00017 	ldw	r3,0(r2)
 8037730:	e0bffb17 	ldw	r2,-20(fp)
 8037734:	1887c83a 	sub	r3,r3,r2
 8037738:	e0bffc17 	ldw	r2,-16(fp)
 803773c:	10c00015 	stw	r3,0(r2)
         break;
 8037740:	00001306 	br	8037790 <sbdrop+0x124>
      }
      len -= m->m_len;
 8037744:	e0fffb17 	ldw	r3,-20(fp)
 8037748:	e0bfff17 	ldw	r2,-4(fp)
 803774c:	10800217 	ldw	r2,8(r2)
 8037750:	1885c83a 	sub	r2,r3,r2
 8037754:	e0bffb15 	stw	r2,-20(fp)
      sbfree (sb, m);
 8037758:	e0bffc17 	ldw	r2,-16(fp)
 803775c:	10c00017 	ldw	r3,0(r2)
 8037760:	e0bfff17 	ldw	r2,-4(fp)
 8037764:	10800217 	ldw	r2,8(r2)
 8037768:	1887c83a 	sub	r3,r3,r2
 803776c:	e0bffc17 	ldw	r2,-16(fp)
 8037770:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 8037774:	e13fff17 	ldw	r4,-4(fp)
 8037778:	80310dc0 	call	80310dc <m_free>
 803777c:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
 8037780:	e0bffd17 	ldw	r2,-12(fp)
 8037784:	e0bfff15 	stw	r2,-4(fp)
   while (len > 0) 
 8037788:	e0bffb17 	ldw	r2,-20(fp)
 803778c:	00bfc916 	blt	zero,r2,80376b4 <sbdrop+0x48>
   }
   while (m && m->m_len == 0) 
 8037790:	00000c06 	br	80377c4 <sbdrop+0x158>
   {
      sbfree(sb, m);
 8037794:	e0bffc17 	ldw	r2,-16(fp)
 8037798:	10c00017 	ldw	r3,0(r2)
 803779c:	e0bfff17 	ldw	r2,-4(fp)
 80377a0:	10800217 	ldw	r2,8(r2)
 80377a4:	1887c83a 	sub	r3,r3,r2
 80377a8:	e0bffc17 	ldw	r2,-16(fp)
 80377ac:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 80377b0:	e13fff17 	ldw	r4,-4(fp)
 80377b4:	80310dc0 	call	80310dc <m_free>
 80377b8:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
 80377bc:	e0bffd17 	ldw	r2,-12(fp)
 80377c0:	e0bfff15 	stw	r2,-4(fp)
   while (m && m->m_len == 0) 
 80377c4:	e0bfff17 	ldw	r2,-4(fp)
 80377c8:	10000326 	beq	r2,zero,80377d8 <sbdrop+0x16c>
 80377cc:	e0bfff17 	ldw	r2,-4(fp)
 80377d0:	10800217 	ldw	r2,8(r2)
 80377d4:	103fef26 	beq	r2,zero,8037794 <sbdrop+0x128>
   }
   if (m) 
 80377d8:	e0bfff17 	ldw	r2,-4(fp)
 80377dc:	10000726 	beq	r2,zero,80377fc <sbdrop+0x190>
   {
      sb->sb_mb = m;
 80377e0:	e0bffc17 	ldw	r2,-16(fp)
 80377e4:	e0ffff17 	ldw	r3,-4(fp)
 80377e8:	10c00615 	stw	r3,24(r2)
      m->m_act = next;
 80377ec:	e0bfff17 	ldw	r2,-4(fp)
 80377f0:	e0fffe17 	ldw	r3,-8(fp)
 80377f4:	10c00715 	stw	r3,28(r2)
 80377f8:	00000306 	br	8037808 <sbdrop+0x19c>
   } else
      sb->sb_mb = next;
 80377fc:	e0bffc17 	ldw	r2,-16(fp)
 8037800:	e0fffe17 	ldw	r3,-8(fp)
 8037804:	10c00615 	stw	r3,24(r2)
   EXIT_CRIT_SECTION(sb);
 8037808:	80303c80 	call	80303c8 <irq_Unmask>
}
 803780c:	0001883a 	nop
 8037810:	e037883a 	mov	sp,fp
 8037814:	dfc00117 	ldw	ra,4(sp)
 8037818:	df000017 	ldw	fp,0(sp)
 803781c:	dec00204 	addi	sp,sp,8
 8037820:	f800283a 	ret

08037824 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
 8037824:	defff904 	addi	sp,sp,-28
 8037828:	dfc00615 	stw	ra,24(sp)
 803782c:	df000515 	stw	fp,20(sp)
 8037830:	df000504 	addi	fp,sp,20
 8037834:	e13ffc15 	stw	r4,-16(fp)
 8037838:	e17ffb15 	stw	r5,-20(fp)
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
 803783c:	80303680 	call	8030368 <irq_Mask>
   len = mbuf_len(m);
 8037840:	e13ffb17 	ldw	r4,-20(fp)
 8037844:	80316c00 	call	80316c0 <mbuf_len>
 8037848:	e0bffd15 	stw	r2,-12(fp)
   if (len > 0)
 803784c:	e0bffd17 	ldw	r2,-12(fp)
 8037850:	0080070e 	bge	zero,r2,8037870 <sbdropend+0x4c>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
 8037854:	e0bffc17 	ldw	r2,-16(fp)
 8037858:	10c00617 	ldw	r3,24(r2)
 803785c:	e0bffd17 	ldw	r2,-12(fp)
 8037860:	0085c83a 	sub	r2,zero,r2
 8037864:	100b883a 	mov	r5,r2
 8037868:	1809883a 	mov	r4,r3
 803786c:	80315000 	call	8031500 <m_adj>
   nmb = sb->sb_mb;
 8037870:	e0bffc17 	ldw	r2,-16(fp)
 8037874:	10800617 	ldw	r2,24(r2)
 8037878:	e0bfff15 	stw	r2,-4(fp)
   pmb = NULL;
 803787c:	e03ffe15 	stw	zero,-8(fp)
   if (sb->sb_mb->m_len == 0)
 8037880:	e0bffc17 	ldw	r2,-16(fp)
 8037884:	10800617 	ldw	r2,24(r2)
 8037888:	10800217 	ldw	r2,8(r2)
 803788c:	1000081e 	bne	r2,zero,80378b0 <sbdropend+0x8c>
      sb->sb_mb = NULL;
 8037890:	e0bffc17 	ldw	r2,-16(fp)
 8037894:	10000615 	stw	zero,24(r2)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 8037898:	00000506 	br	80378b0 <sbdropend+0x8c>
   {
      pmb = nmb;  /* Remember previous */
 803789c:	e0bfff17 	ldw	r2,-4(fp)
 80378a0:	e0bffe15 	stw	r2,-8(fp)
      nmb = nmb->m_next;    
 80378a4:	e0bfff17 	ldw	r2,-4(fp)
 80378a8:	10800617 	ldw	r2,24(r2)
 80378ac:	e0bfff15 	stw	r2,-4(fp)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 80378b0:	e0bfff17 	ldw	r2,-4(fp)
 80378b4:	10000326 	beq	r2,zero,80378c4 <sbdropend+0xa0>
 80378b8:	e0bfff17 	ldw	r2,-4(fp)
 80378bc:	10800217 	ldw	r2,8(r2)
 80378c0:	103ff61e 	bne	r2,zero,803789c <sbdropend+0x78>
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
 80378c4:	e0bfff17 	ldw	r2,-4(fp)
 80378c8:	10000926 	beq	r2,zero,80378f0 <sbdropend+0xcc>
 80378cc:	e0bfff17 	ldw	r2,-4(fp)
 80378d0:	10800217 	ldw	r2,8(r2)
 80378d4:	1000061e 	bne	r2,zero,80378f0 <sbdropend+0xcc>
   {                             /* are zeroes */ 
      if (pmb != NULL)
 80378d8:	e0bffe17 	ldw	r2,-8(fp)
 80378dc:	10000226 	beq	r2,zero,80378e8 <sbdropend+0xc4>
         pmb->m_next = NULL;
 80378e0:	e0bffe17 	ldw	r2,-8(fp)
 80378e4:	10000615 	stw	zero,24(r2)
      m_freem(nmb);            
 80378e8:	e13fff17 	ldw	r4,-4(fp)
 80378ec:	80311e00 	call	80311e0 <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
 80378f0:	e0bffc17 	ldw	r2,-16(fp)
 80378f4:	10c00017 	ldw	r3,0(r2)
 80378f8:	e0bffd17 	ldw	r2,-12(fp)
 80378fc:	1887c83a 	sub	r3,r3,r2
 8037900:	e0bffc17 	ldw	r2,-16(fp)
 8037904:	10c00015 	stw	r3,0(r2)
   EXIT_CRIT_SECTION(sb);
 8037908:	80303c80 	call	80303c8 <irq_Unmask>
}
 803790c:	0001883a 	nop
 8037910:	e037883a 	mov	sp,fp
 8037914:	dfc00117 	ldw	ra,4(sp)
 8037918:	df000017 	ldw	fp,0(sp)
 803791c:	dec00204 	addi	sp,sp,8
 8037920:	f800283a 	ret

08037924 <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
 8037924:	defffb04 	addi	sp,sp,-20
 8037928:	dfc00415 	stw	ra,16(sp)
 803792c:	df000315 	stw	fp,12(sp)
 8037930:	df000304 	addi	fp,sp,12
 8037934:	e13ffd15 	stw	r4,-12(fp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
 8037938:	80303680 	call	8030368 <irq_Mask>
   m = sb->sb_mb;
 803793c:	e0bffd17 	ldw	r2,-12(fp)
 8037940:	10800617 	ldw	r2,24(r2)
 8037944:	e0bfff15 	stw	r2,-4(fp)
   if (m)
 8037948:	e0bfff17 	ldw	r2,-4(fp)
 803794c:	10001226 	beq	r2,zero,8037998 <sbdroprecord+0x74>
   {  sb->sb_mb = m->m_act;
 8037950:	e0bfff17 	ldw	r2,-4(fp)
 8037954:	10c00717 	ldw	r3,28(r2)
 8037958:	e0bffd17 	ldw	r2,-12(fp)
 803795c:	10c00615 	stw	r3,24(r2)
      do 
      {  sbfree(sb, m);
 8037960:	e0bffd17 	ldw	r2,-12(fp)
 8037964:	10c00017 	ldw	r3,0(r2)
 8037968:	e0bfff17 	ldw	r2,-4(fp)
 803796c:	10800217 	ldw	r2,8(r2)
 8037970:	1887c83a 	sub	r3,r3,r2
 8037974:	e0bffd17 	ldw	r2,-12(fp)
 8037978:	10c00015 	stw	r3,0(r2)
         MFREE(m, mn);
 803797c:	e13fff17 	ldw	r4,-4(fp)
 8037980:	80310dc0 	call	80310dc <m_free>
 8037984:	e0bffe15 	stw	r2,-8(fp)
      } while ((m = mn) != NULL);
 8037988:	e0bffe17 	ldw	r2,-8(fp)
 803798c:	e0bfff15 	stw	r2,-4(fp)
 8037990:	e0bfff17 	ldw	r2,-4(fp)
 8037994:	103ff21e 	bne	r2,zero,8037960 <sbdroprecord+0x3c>
         }
   EXIT_CRIT_SECTION(sb);
 8037998:	80303c80 	call	80303c8 <irq_Unmask>
}
 803799c:	0001883a 	nop
 80379a0:	e037883a 	mov	sp,fp
 80379a4:	dfc00117 	ldw	ra,4(sp)
 80379a8:	df000017 	ldw	fp,0(sp)
 80379ac:	dec00204 	addi	sp,sp,8
 80379b0:	f800283a 	ret

080379b4 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 80379b4:	defe7204 	addi	sp,sp,-1592
 80379b8:	dfc18d15 	stw	ra,1588(sp)
 80379bc:	df018c15 	stw	fp,1584(sp)
 80379c0:	df018c04 	addi	fp,sp,1584
 80379c4:	e13e7715 	stw	r4,-1572(fp)
 80379c8:	e17e7615 	stw	r5,-1576(fp)
 80379cc:	e1be7515 	stw	r6,-1580(fp)
 80379d0:	e1fe7415 	stw	r7,-1584(fp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;
 80379d4:	e03fff15 	stw	zero,-4(fp)

   MEMSET(&obits, 0, sizeof(obits));
 80379d8:	e0bf3b04 	addi	r2,fp,-788
 80379dc:	0180c304 	movi	r6,780
 80379e0:	000b883a 	mov	r5,zero
 80379e4:	1009883a 	mov	r4,r2
 80379e8:	80038cc0 	call	80038cc <memset>
   MEMSET(&ibits, 0, sizeof(ibits));
 80379ec:	e0be7804 	addi	r2,fp,-1568
 80379f0:	0180c304 	movi	r6,780
 80379f4:	000b883a 	mov	r5,zero
 80379f8:	1009883a 	mov	r4,r2
 80379fc:	80038cc0 	call	80038cc <memset>

   if (in)
 8037a00:	e0be7717 	ldw	r2,-1572(fp)
 8037a04:	10000526 	beq	r2,zero,8037a1c <t_select+0x68>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
 8037a08:	e0be7804 	addi	r2,fp,-1568
 8037a0c:	01804104 	movi	r6,260
 8037a10:	e17e7717 	ldw	r5,-1572(fp)
 8037a14:	1009883a 	mov	r4,r2
 8037a18:	80037cc0 	call	80037cc <memcpy>
   if (out)
 8037a1c:	e0be7617 	ldw	r2,-1576(fp)
 8037a20:	10000626 	beq	r2,zero,8037a3c <t_select+0x88>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
 8037a24:	e0be7804 	addi	r2,fp,-1568
 8037a28:	10804104 	addi	r2,r2,260
 8037a2c:	01804104 	movi	r6,260
 8037a30:	e17e7617 	ldw	r5,-1576(fp)
 8037a34:	1009883a 	mov	r4,r2
 8037a38:	80037cc0 	call	80037cc <memcpy>
   if (ex)
 8037a3c:	e0be7517 	ldw	r2,-1580(fp)
 8037a40:	10000626 	beq	r2,zero,8037a5c <t_select+0xa8>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
 8037a44:	e0be7804 	addi	r2,fp,-1568
 8037a48:	10808204 	addi	r2,r2,520
 8037a4c:	01804104 	movi	r6,260
 8037a50:	e17e7517 	ldw	r5,-1580(fp)
 8037a54:	1009883a 	mov	r4,r2
 8037a58:	80037cc0 	call	80037cc <memcpy>
   tmo = cticks + tv;
 8037a5c:	d0e0a317 	ldw	r3,-32116(gp)
 8037a60:	e0be7417 	ldw	r2,-1584(fp)
 8037a64:	1885883a 	add	r2,r3,r2
 8037a68:	e0bffe15 	stw	r2,-8(fp)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 8037a6c:	e0be7817 	ldw	r2,-1568(fp)
 8037a70:	10000c1e 	bne	r2,zero,8037aa4 <t_select+0xf0>
 8037a74:	e0beb917 	ldw	r2,-1308(fp)
 8037a78:	10000a1e 	bne	r2,zero,8037aa4 <t_select+0xf0>
       (ibits[2].fd_count == 0))
 8037a7c:	e0befa17 	ldw	r2,-1048(fp)
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 8037a80:	1000081e 	bne	r2,zero,8037aa4 <t_select+0xf0>
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
 8037a84:	e0be7417 	ldw	r2,-1584(fp)
 8037a88:	00801f0e 	bge	zero,r2,8037b08 <t_select+0x154>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
 8037a8c:	e0be7417 	ldw	r2,-1584(fp)
 8037a90:	10800044 	addi	r2,r2,1
 8037a94:	10bfffcc 	andi	r2,r2,65535
 8037a98:	1009883a 	mov	r4,r2
 8037a9c:	801c4780 	call	801c478 <OSTimeDly>
      if (tv > 0)      /* make sure we don't block on nothing forever */
 8037aa0:	00001906 	br	8037b08 <t_select+0x154>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
 8037aa4:	0009883a 	mov	r4,zero
 8037aa8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      while ((retval = sock_selscan(ibits, obits)) == 0)
 8037aac:	00000a06 	br	8037ad8 <t_select+0x124>
      {
         if (tv != -1L) 
 8037ab0:	e0be7417 	ldw	r2,-1584(fp)
 8037ab4:	10bfffe0 	cmpeqi	r2,r2,-1
 8037ab8:	1000031e 	bne	r2,zero,8037ac8 <t_select+0x114>
         {
            if (tmo <= cticks)
 8037abc:	d0e0a317 	ldw	r3,-32116(gp)
 8037ac0:	e0bffe17 	ldw	r2,-8(fp)
 8037ac4:	18800d2e 	bgeu	r3,r2,8037afc <t_select+0x148>
               break;
         }
         select_wait = 1;
 8037ac8:	00800044 	movi	r2,1
 8037acc:	d0a0ab0d 	sth	r2,-32084(gp)
         tcp_sleep (&select_wait);
 8037ad0:	d120ab04 	addi	r4,gp,-32084
 8037ad4:	802c66c0 	call	802c66c <tcp_sleep>
      while ((retval = sock_selscan(ibits, obits)) == 0)
 8037ad8:	e0ff3b04 	addi	r3,fp,-788
 8037adc:	e0be7804 	addi	r2,fp,-1568
 8037ae0:	180b883a 	mov	r5,r3
 8037ae4:	1009883a 	mov	r4,r2
 8037ae8:	8037b840 	call	8037b84 <sock_selscan>
 8037aec:	e0bfff15 	stw	r2,-4(fp)
 8037af0:	e0bfff17 	ldw	r2,-4(fp)
 8037af4:	103fee26 	beq	r2,zero,8037ab0 <t_select+0xfc>
 8037af8:	00000106 	br	8037b00 <t_select+0x14c>
               break;
 8037afc:	0001883a 	nop
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
 8037b00:	0009883a 	mov	r4,zero
 8037b04:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
 8037b08:	e0bfff17 	ldw	r2,-4(fp)
 8037b0c:	10001716 	blt	r2,zero,8037b6c <t_select+0x1b8>
   {
      if (in)
 8037b10:	e0be7717 	ldw	r2,-1572(fp)
 8037b14:	10000526 	beq	r2,zero,8037b2c <t_select+0x178>
         MEMCPY(in, &obits[0], sizeof(fd_set));
 8037b18:	e0bf3b04 	addi	r2,fp,-788
 8037b1c:	01804104 	movi	r6,260
 8037b20:	100b883a 	mov	r5,r2
 8037b24:	e13e7717 	ldw	r4,-1572(fp)
 8037b28:	80037cc0 	call	80037cc <memcpy>
      if (out)
 8037b2c:	e0be7617 	ldw	r2,-1576(fp)
 8037b30:	10000626 	beq	r2,zero,8037b4c <t_select+0x198>
         MEMCPY(out, &obits[1], sizeof(fd_set));
 8037b34:	e0bf3b04 	addi	r2,fp,-788
 8037b38:	10804104 	addi	r2,r2,260
 8037b3c:	01804104 	movi	r6,260
 8037b40:	100b883a 	mov	r5,r2
 8037b44:	e13e7617 	ldw	r4,-1576(fp)
 8037b48:	80037cc0 	call	80037cc <memcpy>
      if (ex)
 8037b4c:	e0be7517 	ldw	r2,-1580(fp)
 8037b50:	10000626 	beq	r2,zero,8037b6c <t_select+0x1b8>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
 8037b54:	e0bf3b04 	addi	r2,fp,-788
 8037b58:	10808204 	addi	r2,r2,520
 8037b5c:	01804104 	movi	r6,260
 8037b60:	100b883a 	mov	r5,r2
 8037b64:	e13e7517 	ldw	r4,-1580(fp)
 8037b68:	80037cc0 	call	80037cc <memcpy>
   }
   return retval;
 8037b6c:	e0bfff17 	ldw	r2,-4(fp)
}
 8037b70:	e037883a 	mov	sp,fp
 8037b74:	dfc00117 	ldw	ra,4(sp)
 8037b78:	df000017 	ldw	fp,0(sp)
 8037b7c:	dec00204 	addi	sp,sp,8
 8037b80:	f800283a 	ret

08037b84 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
 8037b84:	defff604 	addi	sp,sp,-40
 8037b88:	dfc00915 	stw	ra,36(sp)
 8037b8c:	df000815 	stw	fp,32(sp)
 8037b90:	df000804 	addi	fp,sp,32
 8037b94:	e13ff915 	stw	r4,-28(fp)
 8037b98:	e17ff815 	stw	r5,-32(fp)
   fd_set *in, *out;
   int   which;
   int   sock;
   int   flag  =  0;
 8037b9c:	e03ffd15 	stw	zero,-12(fp)
   int   num_sel  =  0;
 8037ba0:	e03ffc15 	stw	zero,-16(fp)

   for (which = 0; which < 3; which++)
 8037ba4:	e03fff15 	stw	zero,-4(fp)
 8037ba8:	00004106 	br	8037cb0 <sock_selscan+0x12c>
   {
      switch (which)
 8037bac:	e0bfff17 	ldw	r2,-4(fp)
 8037bb0:	108000a0 	cmpeqi	r2,r2,2
 8037bb4:	10000f1e 	bne	r2,zero,8037bf4 <sock_selscan+0x70>
 8037bb8:	e0bfff17 	ldw	r2,-4(fp)
 8037bbc:	108000c8 	cmpgei	r2,r2,3
 8037bc0:	10000e1e 	bne	r2,zero,8037bfc <sock_selscan+0x78>
 8037bc4:	e0bfff17 	ldw	r2,-4(fp)
 8037bc8:	10000426 	beq	r2,zero,8037bdc <sock_selscan+0x58>
 8037bcc:	e0bfff17 	ldw	r2,-4(fp)
 8037bd0:	10800060 	cmpeqi	r2,r2,1
 8037bd4:	1000041e 	bne	r2,zero,8037be8 <sock_selscan+0x64>
 8037bd8:	00000806 	br	8037bfc <sock_selscan+0x78>
      {
      case 0:
         flag = SOREAD; break;
 8037bdc:	00800044 	movi	r2,1
 8037be0:	e0bffd15 	stw	r2,-12(fp)
 8037be4:	00000506 	br	8037bfc <sock_selscan+0x78>

      case 1:
         flag = SOWRITE; break;
 8037be8:	00800084 	movi	r2,2
 8037bec:	e0bffd15 	stw	r2,-12(fp)
 8037bf0:	00000206 	br	8037bfc <sock_selscan+0x78>

      case 2:
         flag = 0; break;
 8037bf4:	e03ffd15 	stw	zero,-12(fp)
 8037bf8:	0001883a 	nop
      }
      in = &ibits [which];
 8037bfc:	e0bfff17 	ldw	r2,-4(fp)
 8037c00:	10804124 	muli	r2,r2,260
 8037c04:	e0fff917 	ldw	r3,-28(fp)
 8037c08:	1885883a 	add	r2,r3,r2
 8037c0c:	e0bffb15 	stw	r2,-20(fp)
      out = &obits [which];
 8037c10:	e0bfff17 	ldw	r2,-4(fp)
 8037c14:	10804124 	muli	r2,r2,260
 8037c18:	e0fff817 	ldw	r3,-32(fp)
 8037c1c:	1885883a 	add	r2,r3,r2
 8037c20:	e0bffa15 	stw	r2,-24(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
 8037c24:	e03ffe15 	stw	zero,-8(fp)
 8037c28:	00001906 	br	8037c90 <sock_selscan+0x10c>
      {
         if (sock_select (in->fd_array[sock], flag))
 8037c2c:	e0fffb17 	ldw	r3,-20(fp)
 8037c30:	e0bffe17 	ldw	r2,-8(fp)
 8037c34:	10800044 	addi	r2,r2,1
 8037c38:	100490ba 	slli	r2,r2,2
 8037c3c:	1885883a 	add	r2,r3,r2
 8037c40:	10800017 	ldw	r2,0(r2)
 8037c44:	e17ffd17 	ldw	r5,-12(fp)
 8037c48:	1009883a 	mov	r4,r2
 8037c4c:	8037cd40 	call	8037cd4 <sock_select>
 8037c50:	10000c26 	beq	r2,zero,8037c84 <sock_selscan+0x100>
         {
            FD_SET(in->fd_array[sock], out);
 8037c54:	e0fffb17 	ldw	r3,-20(fp)
 8037c58:	e0bffe17 	ldw	r2,-8(fp)
 8037c5c:	10800044 	addi	r2,r2,1
 8037c60:	100490ba 	slli	r2,r2,2
 8037c64:	1885883a 	add	r2,r3,r2
 8037c68:	10800017 	ldw	r2,0(r2)
 8037c6c:	e17ffa17 	ldw	r5,-24(fp)
 8037c70:	1009883a 	mov	r4,r2
 8037c74:	80380f00 	call	80380f0 <ifd_set>
            num_sel++;
 8037c78:	e0bffc17 	ldw	r2,-16(fp)
 8037c7c:	10800044 	addi	r2,r2,1
 8037c80:	e0bffc15 	stw	r2,-16(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
 8037c84:	e0bffe17 	ldw	r2,-8(fp)
 8037c88:	10800044 	addi	r2,r2,1
 8037c8c:	e0bffe15 	stw	r2,-8(fp)
 8037c90:	e0bffb17 	ldw	r2,-20(fp)
 8037c94:	10800017 	ldw	r2,0(r2)
 8037c98:	1007883a 	mov	r3,r2
 8037c9c:	e0bffe17 	ldw	r2,-8(fp)
 8037ca0:	10ffe216 	blt	r2,r3,8037c2c <sock_selscan+0xa8>
   for (which = 0; which < 3; which++)
 8037ca4:	e0bfff17 	ldw	r2,-4(fp)
 8037ca8:	10800044 	addi	r2,r2,1
 8037cac:	e0bfff15 	stw	r2,-4(fp)
 8037cb0:	e0bfff17 	ldw	r2,-4(fp)
 8037cb4:	108000d0 	cmplti	r2,r2,3
 8037cb8:	103fbc1e 	bne	r2,zero,8037bac <sock_selscan+0x28>
         }
      }
   }
   return num_sel;
 8037cbc:	e0bffc17 	ldw	r2,-16(fp)
}
 8037cc0:	e037883a 	mov	sp,fp
 8037cc4:	dfc00117 	ldw	ra,4(sp)
 8037cc8:	df000017 	ldw	fp,0(sp)
 8037ccc:	dec00204 	addi	sp,sp,8
 8037cd0:	f800283a 	ret

08037cd4 <sock_select>:
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
 8037cd4:	defffa04 	addi	sp,sp,-24
 8037cd8:	dfc00515 	stw	ra,20(sp)
 8037cdc:	df000415 	stw	fp,16(sp)
 8037ce0:	df000404 	addi	fp,sp,16
 8037ce4:	e13ffd15 	stw	r4,-12(fp)
 8037ce8:	e17ffc15 	stw	r5,-16(fp)
   struct socket *   so;
   int   ready =  0;
 8037cec:	e03fff15 	stw	zero,-4(fp)

   so = LONG2SO(sock);
 8037cf0:	e0bffd17 	ldw	r2,-12(fp)
 8037cf4:	10bff804 	addi	r2,r2,-32
 8037cf8:	100490ba 	slli	r2,r2,2
 8037cfc:	e0bffe15 	stw	r2,-8(fp)

   switch (flag) 
 8037d00:	e0bffc17 	ldw	r2,-16(fp)
 8037d04:	108000a0 	cmpeqi	r2,r2,2
 8037d08:	1000261e 	bne	r2,zero,8037da4 <sock_select+0xd0>
 8037d0c:	e0bffc17 	ldw	r2,-16(fp)
 8037d10:	108000c8 	cmpgei	r2,r2,3
 8037d14:	1000651e 	bne	r2,zero,8037eac <sock_select+0x1d8>
 8037d18:	e0bffc17 	ldw	r2,-16(fp)
 8037d1c:	10004526 	beq	r2,zero,8037e34 <sock_select+0x160>
 8037d20:	e0bffc17 	ldw	r2,-16(fp)
 8037d24:	10800058 	cmpnei	r2,r2,1
 8037d28:	1000601e 	bne	r2,zero,8037eac <sock_select+0x1d8>
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
 8037d2c:	e0bffe17 	ldw	r2,-8(fp)
 8037d30:	10800a17 	ldw	r2,40(r2)
 8037d34:	10000326 	beq	r2,zero,8037d44 <sock_select+0x70>
      {
         ready = 1;
 8037d38:	00800044 	movi	r2,1
 8037d3c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037d40:	00005a06 	br	8037eac <sock_select+0x1d8>
      }
      if (so->so_state & SS_CANTRCVMORE)
 8037d44:	e0bffe17 	ldw	r2,-8(fp)
 8037d48:	1080088b 	ldhu	r2,34(r2)
 8037d4c:	10bfffcc 	andi	r2,r2,65535
 8037d50:	1080080c 	andi	r2,r2,32
 8037d54:	10000326 	beq	r2,zero,8037d64 <sock_select+0x90>
      {  ready = 1;
 8037d58:	00800044 	movi	r2,1
 8037d5c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037d60:	00005206 	br	8037eac <sock_select+0x1d8>
      }
      if (so->so_qlen)  /* attach is ready */
 8037d64:	e0bffe17 	ldw	r2,-8(fp)
 8037d68:	10801e43 	ldbu	r2,121(r2)
 8037d6c:	10803fcc 	andi	r2,r2,255
 8037d70:	1080201c 	xori	r2,r2,128
 8037d74:	10bfe004 	addi	r2,r2,-128
 8037d78:	10000326 	beq	r2,zero,8037d88 <sock_select+0xb4>
      {
         ready = 1;
 8037d7c:	00800044 	movi	r2,1
 8037d80:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037d84:	00004906 	br	8037eac <sock_select+0x1d8>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
 8037d88:	e0bffe17 	ldw	r2,-8(fp)
 8037d8c:	1080110b 	ldhu	r2,68(r2)
 8037d90:	10800214 	ori	r2,r2,8
 8037d94:	1007883a 	mov	r3,r2
 8037d98:	e0bffe17 	ldw	r2,-8(fp)
 8037d9c:	10c0110d 	sth	r3,68(r2)
      break;
 8037da0:	00004206 	br	8037eac <sock_select+0x1d8>

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
 8037da4:	e0bffe17 	ldw	r2,-8(fp)
 8037da8:	10801317 	ldw	r2,76(r2)
 8037dac:	1007883a 	mov	r3,r2
 8037db0:	e0bffe17 	ldw	r2,-8(fp)
 8037db4:	10801217 	ldw	r2,72(r2)
 8037db8:	1885c83a 	sub	r2,r3,r2
 8037dbc:	10001816 	blt	r2,zero,8037e20 <sock_select+0x14c>
 8037dc0:	e0bffe17 	ldw	r2,-8(fp)
 8037dc4:	10c01317 	ldw	r3,76(r2)
 8037dc8:	e0bffe17 	ldw	r2,-8(fp)
 8037dcc:	10801217 	ldw	r2,72(r2)
 8037dd0:	18801326 	beq	r3,r2,8037e20 <sock_select+0x14c>
          ((((so)->so_state&SS_ISCONNECTED) || 
 8037dd4:	e0bffe17 	ldw	r2,-8(fp)
 8037dd8:	1080088b 	ldhu	r2,34(r2)
 8037ddc:	10bfffcc 	andi	r2,r2,65535
 8037de0:	1080008c 	andi	r2,r2,2
      if ((sbspace(&(so)->so_snd) > 0) && 
 8037de4:	10000b1e 	bne	r2,zero,8037e14 <sock_select+0x140>
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
 8037de8:	e0bffe17 	ldw	r2,-8(fp)
 8037dec:	10800217 	ldw	r2,8(r2)
 8037df0:	1080010b 	ldhu	r2,4(r2)
 8037df4:	10bfffcc 	andi	r2,r2,65535
 8037df8:	1080010c 	andi	r2,r2,4
          ((((so)->so_state&SS_ISCONNECTED) || 
 8037dfc:	10000526 	beq	r2,zero,8037e14 <sock_select+0x140>
           ((so)->so_state & SS_CANTSENDMORE)))
 8037e00:	e0bffe17 	ldw	r2,-8(fp)
 8037e04:	1080088b 	ldhu	r2,34(r2)
 8037e08:	10bfffcc 	andi	r2,r2,65535
 8037e0c:	1080040c 	andi	r2,r2,16
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
 8037e10:	10000326 	beq	r2,zero,8037e20 <sock_select+0x14c>
      {
         ready = 1;
 8037e14:	00800044 	movi	r2,1
 8037e18:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037e1c:	00002306 	br	8037eac <sock_select+0x1d8>
      }
      sbselqueue (&so->so_snd);
 8037e20:	e0bffe17 	ldw	r2,-8(fp)
 8037e24:	10801204 	addi	r2,r2,72
 8037e28:	1009883a 	mov	r4,r2
 8037e2c:	8036e5c0 	call	8036e5c <sbselqueue>
      break;
 8037e30:	00001e06 	br	8037eac <sock_select+0x1d8>

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
 8037e34:	e0bffe17 	ldw	r2,-8(fp)
 8037e38:	10801a17 	ldw	r2,104(r2)
 8037e3c:	1000051e 	bne	r2,zero,8037e54 <sock_select+0x180>
 8037e40:	e0bffe17 	ldw	r2,-8(fp)
 8037e44:	1080088b 	ldhu	r2,34(r2)
 8037e48:	10bfffcc 	andi	r2,r2,65535
 8037e4c:	1080100c 	andi	r2,r2,64
 8037e50:	10000326 	beq	r2,zero,8037e60 <sock_select+0x18c>
      {
         ready = 1;
 8037e54:	00800044 	movi	r2,1
 8037e58:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037e5c:	00001306 	br	8037eac <sock_select+0x1d8>
      }
      if (so->so_error &&
 8037e60:	e0bffe17 	ldw	r2,-8(fp)
 8037e64:	10800617 	ldw	r2,24(r2)
 8037e68:	10000b26 	beq	r2,zero,8037e98 <sock_select+0x1c4>
          (so->so_error != EINPROGRESS) &&
 8037e6c:	e0bffe17 	ldw	r2,-8(fp)
 8037e70:	10800617 	ldw	r2,24(r2)
      if (so->so_error &&
 8037e74:	10801de0 	cmpeqi	r2,r2,119
 8037e78:	1000071e 	bne	r2,zero,8037e98 <sock_select+0x1c4>
          (so->so_error != EWOULDBLOCK))
 8037e7c:	e0bffe17 	ldw	r2,-8(fp)
 8037e80:	10800617 	ldw	r2,24(r2)
          (so->so_error != EINPROGRESS) &&
 8037e84:	108002e0 	cmpeqi	r2,r2,11
 8037e88:	1000031e 	bne	r2,zero,8037e98 <sock_select+0x1c4>
      {
         ready = 1;
 8037e8c:	00800044 	movi	r2,1
 8037e90:	e0bfff15 	stw	r2,-4(fp)
         break;
 8037e94:	00000506 	br	8037eac <sock_select+0x1d8>
      }
      sbselqueue(&so->so_rcv);
 8037e98:	e0bffe17 	ldw	r2,-8(fp)
 8037e9c:	10800a04 	addi	r2,r2,40
 8037ea0:	1009883a 	mov	r4,r2
 8037ea4:	8036e5c0 	call	8036e5c <sbselqueue>
      break;
 8037ea8:	0001883a 	nop
   }

   return ready;
 8037eac:	e0bfff17 	ldw	r2,-4(fp)
}
 8037eb0:	e037883a 	mov	sp,fp
 8037eb4:	dfc00117 	ldw	ra,4(sp)
 8037eb8:	df000017 	ldw	fp,0(sp)
 8037ebc:	dec00204 	addi	sp,sp,8
 8037ec0:	f800283a 	ret

08037ec4 <in_pcbnotify>:
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
 8037ec4:	defff804 	addi	sp,sp,-32
 8037ec8:	dfc00715 	stw	ra,28(sp)
 8037ecc:	df000615 	stw	fp,24(sp)
 8037ed0:	df000604 	addi	fp,sp,24
 8037ed4:	e13ffd15 	stw	r4,-12(fp)
 8037ed8:	e17ffc15 	stw	r5,-16(fp)
 8037edc:	e1bffb15 	stw	r6,-20(fp)
 8037ee0:	e1fffa15 	stw	r7,-24(fp)
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 8037ee4:	e0bffd17 	ldw	r2,-12(fp)
 8037ee8:	10800017 	ldw	r2,0(r2)
 8037eec:	e0bfff15 	stw	r2,-4(fp)
 8037ef0:	00001c06 	br	8037f64 <in_pcbnotify+0xa0>
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 8037ef4:	e0bfff17 	ldw	r2,-4(fp)
 8037ef8:	10c00317 	ldw	r3,12(r2)
 8037efc:	e0bffc17 	ldw	r2,-16(fp)
 8037f00:	10800017 	ldw	r2,0(r2)
 8037f04:	1880031e 	bne	r3,r2,8037f14 <in_pcbnotify+0x50>
          inp->inp_socket == 0) 
 8037f08:	e0bfff17 	ldw	r2,-4(fp)
 8037f0c:	10800817 	ldw	r2,32(r2)
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 8037f10:	1000041e 	bne	r2,zero,8037f24 <in_pcbnotify+0x60>
      {
         inp = inp->inp_next;
 8037f14:	e0bfff17 	ldw	r2,-4(fp)
 8037f18:	10800017 	ldw	r2,0(r2)
 8037f1c:	e0bfff15 	stw	r2,-4(fp)
         continue;
 8037f20:	00001006 	br	8037f64 <in_pcbnotify+0xa0>
      }
      if (errnum) 
 8037f24:	e0bffb17 	ldw	r2,-20(fp)
 8037f28:	10000426 	beq	r2,zero,8037f3c <in_pcbnotify+0x78>
         inp->inp_socket->so_error = errnum;
 8037f2c:	e0bfff17 	ldw	r2,-4(fp)
 8037f30:	10800817 	ldw	r2,32(r2)
 8037f34:	e0fffb17 	ldw	r3,-20(fp)
 8037f38:	10c00615 	stw	r3,24(r2)
      oinp = inp;
 8037f3c:	e0bfff17 	ldw	r2,-4(fp)
 8037f40:	e0bffe15 	stw	r2,-8(fp)
      inp = inp->inp_next;
 8037f44:	e0bfff17 	ldw	r2,-4(fp)
 8037f48:	10800017 	ldw	r2,0(r2)
 8037f4c:	e0bfff15 	stw	r2,-4(fp)
      if (notify)
 8037f50:	e0bffa17 	ldw	r2,-24(fp)
 8037f54:	10000326 	beq	r2,zero,8037f64 <in_pcbnotify+0xa0>
         (*notify)(oinp);
 8037f58:	e0bffa17 	ldw	r2,-24(fp)
 8037f5c:	e13ffe17 	ldw	r4,-8(fp)
 8037f60:	103ee83a 	callr	r2
   for (inp = head->inp_next; inp != head;) 
 8037f64:	e0ffff17 	ldw	r3,-4(fp)
 8037f68:	e0bffd17 	ldw	r2,-12(fp)
 8037f6c:	18bfe11e 	bne	r3,r2,8037ef4 <in_pcbnotify+0x30>
   }
}
 8037f70:	0001883a 	nop
 8037f74:	0001883a 	nop
 8037f78:	e037883a 	mov	sp,fp
 8037f7c:	dfc00117 	ldw	ra,4(sp)
 8037f80:	df000017 	ldw	fp,0(sp)
 8037f84:	dec00204 	addi	sp,sp,8
 8037f88:	f800283a 	ret

08037f8c <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
 8037f8c:	defffd04 	addi	sp,sp,-12
 8037f90:	dfc00215 	stw	ra,8(sp)
 8037f94:	df000115 	stw	fp,4(sp)
 8037f98:	df000104 	addi	fp,sp,4
 8037f9c:	e13fff15 	stw	r4,-4(fp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
 8037fa0:	e0bfff17 	ldw	r2,-4(fp)
 8037fa4:	10800817 	ldw	r2,32(r2)
 8037fa8:	10800904 	addi	r2,r2,36
 8037fac:	1009883a 	mov	r4,r2
 8037fb0:	802c7b80 	call	802c7b8 <tcp_wakeup>
   sorwakeup(inp->inp_socket);
 8037fb4:	e0bfff17 	ldw	r2,-4(fp)
 8037fb8:	10c00817 	ldw	r3,32(r2)
 8037fbc:	e0bfff17 	ldw	r2,-4(fp)
 8037fc0:	10800817 	ldw	r2,32(r2)
 8037fc4:	10800a04 	addi	r2,r2,40
 8037fc8:	100b883a 	mov	r5,r2
 8037fcc:	1809883a 	mov	r4,r3
 8037fd0:	8036f040 	call	8036f04 <sbwakeup>
   sowwakeup(inp->inp_socket);
 8037fd4:	e0bfff17 	ldw	r2,-4(fp)
 8037fd8:	10c00817 	ldw	r3,32(r2)
 8037fdc:	e0bfff17 	ldw	r2,-4(fp)
 8037fe0:	10800817 	ldw	r2,32(r2)
 8037fe4:	10801204 	addi	r2,r2,72
 8037fe8:	100b883a 	mov	r5,r2
 8037fec:	1809883a 	mov	r4,r3
 8037ff0:	8036f040 	call	8036f04 <sbwakeup>
}
 8037ff4:	0001883a 	nop
 8037ff8:	e037883a 	mov	sp,fp
 8037ffc:	dfc00117 	ldw	ra,4(sp)
 8038000:	df000017 	ldw	fp,0(sp)
 8038004:	dec00204 	addi	sp,sp,8
 8038008:	f800283a 	ret

0803800c <ifd_clr>:
 * compacts the fd_set.
 */

void
ifd_clr(long sock, fd_set *set)
{
 803800c:	defffb04 	addi	sp,sp,-20
 8038010:	dfc00415 	stw	ra,16(sp)
 8038014:	df000315 	stw	fp,12(sp)
 8038018:	df000304 	addi	fp,sp,12
 803801c:	e13ffe15 	stw	r4,-8(fp)
 8038020:	e17ffd15 	stw	r5,-12(fp)
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 8038024:	e03fff15 	stw	zero,-4(fp)
 8038028:	00002706 	br	80380c8 <ifd_clr+0xbc>
   {
      if (set->fd_array[i] == sock)
 803802c:	e0fffd17 	ldw	r3,-12(fp)
 8038030:	e0bfff17 	ldw	r2,-4(fp)
 8038034:	10800044 	addi	r2,r2,1
 8038038:	100490ba 	slli	r2,r2,2
 803803c:	1885883a 	add	r2,r3,r2
 8038040:	10800017 	ldw	r2,0(r2)
 8038044:	e0fffe17 	ldw	r3,-8(fp)
 8038048:	18801c1e 	bne	r3,r2,80380bc <ifd_clr+0xb0>
      {
         while (i + 1 < set->fd_count)
 803804c:	00001006 	br	8038090 <ifd_clr+0x84>
         {
            set->fd_array[i] = set->fd_array[i + 1];
 8038050:	e0bfff17 	ldw	r2,-4(fp)
 8038054:	10800044 	addi	r2,r2,1
 8038058:	e0fffd17 	ldw	r3,-12(fp)
 803805c:	10800044 	addi	r2,r2,1
 8038060:	100490ba 	slli	r2,r2,2
 8038064:	1885883a 	add	r2,r3,r2
 8038068:	10c00017 	ldw	r3,0(r2)
 803806c:	e13ffd17 	ldw	r4,-12(fp)
 8038070:	e0bfff17 	ldw	r2,-4(fp)
 8038074:	10800044 	addi	r2,r2,1
 8038078:	100490ba 	slli	r2,r2,2
 803807c:	2085883a 	add	r2,r4,r2
 8038080:	10c00015 	stw	r3,0(r2)
            i++;
 8038084:	e0bfff17 	ldw	r2,-4(fp)
 8038088:	10800044 	addi	r2,r2,1
 803808c:	e0bfff15 	stw	r2,-4(fp)
         while (i + 1 < set->fd_count)
 8038090:	e0bfff17 	ldw	r2,-4(fp)
 8038094:	10c00044 	addi	r3,r2,1
 8038098:	e0bffd17 	ldw	r2,-12(fp)
 803809c:	10800017 	ldw	r2,0(r2)
 80380a0:	18bfeb36 	bltu	r3,r2,8038050 <ifd_clr+0x44>
         }
         set->fd_count--;
 80380a4:	e0bffd17 	ldw	r2,-12(fp)
 80380a8:	10800017 	ldw	r2,0(r2)
 80380ac:	10ffffc4 	addi	r3,r2,-1
 80380b0:	e0bffd17 	ldw	r2,-12(fp)
 80380b4:	10c00015 	stw	r3,0(r2)
         return;
 80380b8:	00000806 	br	80380dc <ifd_clr+0xd0>
   for (i = 0; i < set->fd_count ; i++) 
 80380bc:	e0bfff17 	ldw	r2,-4(fp)
 80380c0:	10800044 	addi	r2,r2,1
 80380c4:	e0bfff15 	stw	r2,-4(fp)
 80380c8:	e0bffd17 	ldw	r2,-12(fp)
 80380cc:	10800017 	ldw	r2,0(r2)
 80380d0:	e0ffff17 	ldw	r3,-4(fp)
 80380d4:	18bfd536 	bltu	r3,r2,803802c <ifd_clr+0x20>
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
 80380d8:	80301a80 	call	80301a8 <dtrap>
#endif
}
 80380dc:	e037883a 	mov	sp,fp
 80380e0:	dfc00117 	ldw	ra,4(sp)
 80380e4:	df000017 	ldw	fp,0(sp)
 80380e8:	dec00204 	addi	sp,sp,8
 80380ec:	f800283a 	ret

080380f0 <ifd_set>:
 * called if the fd_set structure is already full.
 */

void
ifd_set(long sock, fd_set *set)
{
 80380f0:	defffc04 	addi	sp,sp,-16
 80380f4:	dfc00315 	stw	ra,12(sp)
 80380f8:	df000215 	stw	fp,8(sp)
 80380fc:	df000204 	addi	fp,sp,8
 8038100:	e13fff15 	stw	r4,-4(fp)
 8038104:	e17ffe15 	stw	r5,-8(fp)
   if (set->fd_count < FD_SETSIZE)
 8038108:	e0bffe17 	ldw	r2,-8(fp)
 803810c:	10800017 	ldw	r2,0(r2)
 8038110:	10801028 	cmpgeui	r2,r2,64
 8038114:	10000c1e 	bne	r2,zero,8038148 <ifd_set+0x58>
      set->fd_array[set->fd_count++] = sock;
 8038118:	e0bffe17 	ldw	r2,-8(fp)
 803811c:	10800017 	ldw	r2,0(r2)
 8038120:	11000044 	addi	r4,r2,1
 8038124:	e0fffe17 	ldw	r3,-8(fp)
 8038128:	19000015 	stw	r4,0(r3)
 803812c:	e0fffe17 	ldw	r3,-8(fp)
 8038130:	10800044 	addi	r2,r2,1
 8038134:	100490ba 	slli	r2,r2,2
 8038138:	1885883a 	add	r2,r3,r2
 803813c:	e0ffff17 	ldw	r3,-4(fp)
 8038140:	10c00015 	stw	r3,0(r2)
#ifdef NPDEBUG
   else
      dtrap();
#endif
}
 8038144:	00000106 	br	803814c <ifd_set+0x5c>
      dtrap();
 8038148:	80301a80 	call	80301a8 <dtrap>
}
 803814c:	0001883a 	nop
 8038150:	e037883a 	mov	sp,fp
 8038154:	dfc00117 	ldw	ra,4(sp)
 8038158:	df000017 	ldw	fp,0(sp)
 803815c:	dec00204 	addi	sp,sp,8
 8038160:	f800283a 	ret

08038164 <ifd_isset>:
 * Tests if a socket is a member of a file descriptor set.
 */

int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
 8038164:	defffc04 	addi	sp,sp,-16
 8038168:	df000315 	stw	fp,12(sp)
 803816c:	df000304 	addi	fp,sp,12
 8038170:	e13ffe15 	stw	r4,-8(fp)
 8038174:	e17ffd15 	stw	r5,-12(fp)
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 8038178:	e03fff15 	stw	zero,-4(fp)
 803817c:	00000d06 	br	80381b4 <ifd_isset+0x50>
   {
      if (set->fd_array[i] == sock)
 8038180:	e0fffd17 	ldw	r3,-12(fp)
 8038184:	e0bfff17 	ldw	r2,-4(fp)
 8038188:	10800044 	addi	r2,r2,1
 803818c:	100490ba 	slli	r2,r2,2
 8038190:	1885883a 	add	r2,r3,r2
 8038194:	10800017 	ldw	r2,0(r2)
 8038198:	e0fffe17 	ldw	r3,-8(fp)
 803819c:	1880021e 	bne	r3,r2,80381a8 <ifd_isset+0x44>
         return TRUE;
 80381a0:	00800044 	movi	r2,1
 80381a4:	00000806 	br	80381c8 <ifd_isset+0x64>
   for (i = 0; i < set->fd_count ; i++)
 80381a8:	e0bfff17 	ldw	r2,-4(fp)
 80381ac:	10800044 	addi	r2,r2,1
 80381b0:	e0bfff15 	stw	r2,-4(fp)
 80381b4:	e0bffd17 	ldw	r2,-12(fp)
 80381b8:	10800017 	ldw	r2,0(r2)
 80381bc:	e0ffff17 	ldw	r3,-4(fp)
 80381c0:	18bfef36 	bltu	r3,r2,8038180 <ifd_isset+0x1c>
   }
   return FALSE;
 80381c4:	0005883a 	mov	r2,zero
}
 80381c8:	e037883a 	mov	sp,fp
 80381cc:	df000017 	ldw	fp,0(sp)
 80381d0:	dec00104 	addi	sp,sp,4
 80381d4:	f800283a 	ret

080381d8 <ifd_get>:
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
 80381d8:	defffc04 	addi	sp,sp,-16
 80381dc:	dfc00315 	stw	ra,12(sp)
 80381e0:	df000215 	stw	fp,8(sp)
 80381e4:	df000204 	addi	fp,sp,8
 80381e8:	e13fff15 	stw	r4,-4(fp)
 80381ec:	e17ffe15 	stw	r5,-8(fp)
   if (i < set->fd_count)
 80381f0:	e0bffe17 	ldw	r2,-8(fp)
 80381f4:	10800017 	ldw	r2,0(r2)
 80381f8:	e0ffff17 	ldw	r3,-4(fp)
 80381fc:	1880072e 	bgeu	r3,r2,803821c <ifd_get+0x44>
      return set->fd_array[i];
 8038200:	e0fffe17 	ldw	r3,-8(fp)
 8038204:	e0bfff17 	ldw	r2,-4(fp)
 8038208:	10800044 	addi	r2,r2,1
 803820c:	100490ba 	slli	r2,r2,2
 8038210:	1885883a 	add	r2,r3,r2
 8038214:	10800017 	ldw	r2,0(r2)
 8038218:	00000206 	br	8038224 <ifd_get+0x4c>
   else
   {
#ifdef NPDEBUG
      dtrap();
 803821c:	80301a80 	call	80301a8 <dtrap>
#endif
      return INVALID_SOCKET;
 8038220:	00bfffc4 	movi	r2,-1
   }
}
 8038224:	e037883a 	mov	sp,fp
 8038228:	dfc00117 	ldw	ra,4(sp)
 803822c:	df000017 	ldw	fp,0(sp)
 8038230:	dec00204 	addi	sp,sp,8
 8038234:	f800283a 	ret

08038238 <tcp_reass>:

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
 8038238:	defff504 	addi	sp,sp,-44
 803823c:	dfc00a15 	stw	ra,40(sp)
 8038240:	df000915 	stw	fp,36(sp)
 8038244:	df000904 	addi	fp,sp,36
 8038248:	e13ff915 	stw	r4,-28(fp)
 803824c:	e17ff815 	stw	r5,-32(fp)
 8038250:	e1bff715 	stw	r6,-36(fp)
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
 8038254:	e0bff917 	ldw	r2,-28(fp)
 8038258:	10800d17 	ldw	r2,52(r2)
 803825c:	10800817 	ldw	r2,32(r2)
 8038260:	e0bffe15 	stw	r2,-8(fp)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
 8038264:	e0bff817 	ldw	r2,-32(fp)
 8038268:	10009c26 	beq	r2,zero,80384dc <tcp_reass+0x2a4>
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 803826c:	e0bff917 	ldw	r2,-28(fp)
 8038270:	10800017 	ldw	r2,0(r2)
 8038274:	e0bfff15 	stw	r2,-4(fp)
 8038278:	00000906 	br	80382a0 <tcp_reass+0x68>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
 803827c:	e0bfff17 	ldw	r2,-4(fp)
 8038280:	10c00617 	ldw	r3,24(r2)
 8038284:	e0bff817 	ldw	r2,-32(fp)
 8038288:	10800617 	ldw	r2,24(r2)
 803828c:	1885c83a 	sub	r2,r3,r2
 8038290:	00800716 	blt	zero,r2,80382b0 <tcp_reass+0x78>
       q = (struct tcpiphdr *)q->ti_next)
 8038294:	e0bfff17 	ldw	r2,-4(fp)
 8038298:	10800017 	ldw	r2,0(r2)
 803829c:	e0bfff15 	stw	r2,-4(fp)
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 80382a0:	e0ffff17 	ldw	r3,-4(fp)
 80382a4:	e0bff917 	ldw	r2,-28(fp)
 80382a8:	18bff41e 	bne	r3,r2,803827c <tcp_reass+0x44>
 80382ac:	00000106 	br	80382b4 <tcp_reass+0x7c>
      break;
 80382b0:	0001883a 	nop
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
 80382b4:	e0bfff17 	ldw	r2,-4(fp)
 80382b8:	10800117 	ldw	r2,4(r2)
 80382bc:	e0fff917 	ldw	r3,-28(fp)
 80382c0:	18803b26 	beq	r3,r2,80383b0 <tcp_reass+0x178>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
 80382c4:	e0bfff17 	ldw	r2,-4(fp)
 80382c8:	10800117 	ldw	r2,4(r2)
 80382cc:	e0bfff15 	stw	r2,-4(fp)
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
 80382d0:	e0bfff17 	ldw	r2,-4(fp)
 80382d4:	10c00617 	ldw	r3,24(r2)
 80382d8:	e0bfff17 	ldw	r2,-4(fp)
 80382dc:	1080028b 	ldhu	r2,10(r2)
 80382e0:	10bfffcc 	andi	r2,r2,65535
 80382e4:	1887883a 	add	r3,r3,r2
 80382e8:	e0bff817 	ldw	r2,-32(fp)
 80382ec:	10800617 	ldw	r2,24(r2)
 80382f0:	1885c83a 	sub	r2,r3,r2
 80382f4:	e0bffd15 	stw	r2,-12(fp)
      if (i > 0) 
 80382f8:	e0bffd17 	ldw	r2,-12(fp)
 80382fc:	0080290e 	bge	zero,r2,80383a4 <tcp_reass+0x16c>
      {
         if (i >= (long)ti->ti_len) 
 8038300:	e0bff817 	ldw	r2,-32(fp)
 8038304:	1080028b 	ldhu	r2,10(r2)
 8038308:	10bfffcc 	andi	r2,r2,65535
 803830c:	e0fffd17 	ldw	r3,-12(fp)
 8038310:	18801416 	blt	r3,r2,8038364 <tcp_reass+0x12c>
         {
            tcpstat.tcps_rcvduppack++;
 8038314:	008201b4 	movhi	r2,2054
 8038318:	10bf5d17 	ldw	r2,-652(r2)
 803831c:	10c00044 	addi	r3,r2,1
 8038320:	008201b4 	movhi	r2,2054
 8038324:	10ff5d15 	stw	r3,-652(r2)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
 8038328:	008201b4 	movhi	r2,2054
 803832c:	10ff5e17 	ldw	r3,-648(r2)
 8038330:	e0bff817 	ldw	r2,-32(fp)
 8038334:	1080028b 	ldhu	r2,10(r2)
 8038338:	10bfffcc 	andi	r2,r2,65535
 803833c:	1887883a 	add	r3,r3,r2
 8038340:	008201b4 	movhi	r2,2054
 8038344:	10ff5e15 	stw	r3,-648(r2)
            GOTO_DROP;
 8038348:	008025c4 	movi	r2,151
 803834c:	d0a0ad15 	stw	r2,-32076(gp)
 8038350:	0001883a 	nop
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
 8038354:	e13ff717 	ldw	r4,-36(fp)
 8038358:	80311e00 	call	80311e0 <m_freem>
   return (0);
 803835c:	0005883a 	mov	r2,zero
 8038360:	0000ac06 	br	8038614 <tcp_reass+0x3dc>
         m_adj (ti_mbuf, (int)i);
 8038364:	e17ffd17 	ldw	r5,-12(fp)
 8038368:	e13ff717 	ldw	r4,-36(fp)
 803836c:	80315000 	call	8031500 <m_adj>
         ti->ti_len -= (short)i;
 8038370:	e0bff817 	ldw	r2,-32(fp)
 8038374:	1080028b 	ldhu	r2,10(r2)
 8038378:	e0fffd17 	ldw	r3,-12(fp)
 803837c:	10c5c83a 	sub	r2,r2,r3
 8038380:	1007883a 	mov	r3,r2
 8038384:	e0bff817 	ldw	r2,-32(fp)
 8038388:	10c0028d 	sth	r3,10(r2)
         ti->ti_seq += (tcp_seq)i;
 803838c:	e0bff817 	ldw	r2,-32(fp)
 8038390:	10c00617 	ldw	r3,24(r2)
 8038394:	e0bffd17 	ldw	r2,-12(fp)
 8038398:	1887883a 	add	r3,r3,r2
 803839c:	e0bff817 	ldw	r2,-32(fp)
 80383a0:	10c00615 	stw	r3,24(r2)
      q = (struct tcpiphdr *)(q->ti_next);
 80383a4:	e0bfff17 	ldw	r2,-4(fp)
 80383a8:	10800017 	ldw	r2,0(r2)
 80383ac:	e0bfff15 	stw	r2,-4(fp)
   tcpstat.tcps_rcvoopack++;
 80383b0:	008201b4 	movhi	r2,2054
 80383b4:	10bf6117 	ldw	r2,-636(r2)
 80383b8:	10c00044 	addi	r3,r2,1
 80383bc:	008201b4 	movhi	r2,2054
 80383c0:	10ff6115 	stw	r3,-636(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
 80383c4:	008201b4 	movhi	r2,2054
 80383c8:	10ff6217 	ldw	r3,-632(r2)
 80383cc:	e0bff817 	ldw	r2,-32(fp)
 80383d0:	1080028b 	ldhu	r2,10(r2)
 80383d4:	10bfffcc 	andi	r2,r2,65535
 80383d8:	1887883a 	add	r3,r3,r2
 80383dc:	008201b4 	movhi	r2,2054
 80383e0:	10ff6215 	stw	r3,-632(r2)
   while (q != (struct tcpiphdr *)tp) 
 80383e4:	00003206 	br	80384b0 <tcp_reass+0x278>
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
 80383e8:	e0bff817 	ldw	r2,-32(fp)
 80383ec:	10c00617 	ldw	r3,24(r2)
 80383f0:	e0bff817 	ldw	r2,-32(fp)
 80383f4:	1080028b 	ldhu	r2,10(r2)
 80383f8:	10bfffcc 	andi	r2,r2,65535
 80383fc:	1887883a 	add	r3,r3,r2
 8038400:	e0bfff17 	ldw	r2,-4(fp)
 8038404:	10800617 	ldw	r2,24(r2)
 8038408:	1885c83a 	sub	r2,r3,r2
 803840c:	e0bffc15 	stw	r2,-16(fp)
      if (i <= 0)
 8038410:	e0bffc17 	ldw	r2,-16(fp)
 8038414:	00802a0e 	bge	zero,r2,80384c0 <tcp_reass+0x288>
      if (i < (int)(q->ti_len))
 8038418:	e0bfff17 	ldw	r2,-4(fp)
 803841c:	1080028b 	ldhu	r2,10(r2)
 8038420:	10bfffcc 	andi	r2,r2,65535
 8038424:	e0fffc17 	ldw	r3,-16(fp)
 8038428:	1880130e 	bge	r3,r2,8038478 <tcp_reass+0x240>
         q->ti_seq += i;
 803842c:	e0bfff17 	ldw	r2,-4(fp)
 8038430:	10c00617 	ldw	r3,24(r2)
 8038434:	e0bffc17 	ldw	r2,-16(fp)
 8038438:	1887883a 	add	r3,r3,r2
 803843c:	e0bfff17 	ldw	r2,-4(fp)
 8038440:	10c00615 	stw	r3,24(r2)
         q->ti_len -= (u_short)i;
 8038444:	e0bfff17 	ldw	r2,-4(fp)
 8038448:	1080028b 	ldhu	r2,10(r2)
 803844c:	e0fffc17 	ldw	r3,-16(fp)
 8038450:	10c5c83a 	sub	r2,r2,r3
 8038454:	1007883a 	mov	r3,r2
 8038458:	e0bfff17 	ldw	r2,-4(fp)
 803845c:	10c0028d 	sth	r3,10(r2)
         m_adj (dtom(q), (int)i);
 8038460:	e13fff17 	ldw	r4,-4(fp)
 8038464:	80317140 	call	8031714 <dtom>
 8038468:	e17ffc17 	ldw	r5,-16(fp)
 803846c:	1009883a 	mov	r4,r2
 8038470:	80315000 	call	8031500 <m_adj>
         break;
 8038474:	00001306 	br	80384c4 <tcp_reass+0x28c>
      q = (struct tcpiphdr *)q->ti_next;
 8038478:	e0bfff17 	ldw	r2,-4(fp)
 803847c:	10800017 	ldw	r2,0(r2)
 8038480:	e0bfff15 	stw	r2,-4(fp)
      m = dtom(q->ti_prev);
 8038484:	e0bfff17 	ldw	r2,-4(fp)
 8038488:	10800117 	ldw	r2,4(r2)
 803848c:	1009883a 	mov	r4,r2
 8038490:	80317140 	call	8031714 <dtom>
 8038494:	e0bffb15 	stw	r2,-20(fp)
      remque (q->ti_prev);
 8038498:	e0bfff17 	ldw	r2,-4(fp)
 803849c:	10800117 	ldw	r2,4(r2)
 80384a0:	1009883a 	mov	r4,r2
 80384a4:	80317ac0 	call	80317ac <remque>
      m_freem (m);
 80384a8:	e13ffb17 	ldw	r4,-20(fp)
 80384ac:	80311e00 	call	80311e0 <m_freem>
   while (q != (struct tcpiphdr *)tp) 
 80384b0:	e0ffff17 	ldw	r3,-4(fp)
 80384b4:	e0bff917 	ldw	r2,-28(fp)
 80384b8:	18bfcb1e 	bne	r3,r2,80383e8 <tcp_reass+0x1b0>
 80384bc:	00000106 	br	80384c4 <tcp_reass+0x28c>
         break;
 80384c0:	0001883a 	nop
   insque(ti, q->ti_prev);
 80384c4:	e0bfff17 	ldw	r2,-4(fp)
 80384c8:	10800117 	ldw	r2,4(r2)
 80384cc:	100b883a 	mov	r5,r2
 80384d0:	e13ff817 	ldw	r4,-32(fp)
 80384d4:	803181c0 	call	803181c <insque>
 80384d8:	00000106 	br	80384e0 <tcp_reass+0x2a8>
      goto present;
 80384dc:	0001883a 	nop
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
 80384e0:	e0bff917 	ldw	r2,-28(fp)
 80384e4:	10800217 	ldw	r2,8(r2)
 80384e8:	108000c8 	cmpgei	r2,r2,3
 80384ec:	1000021e 	bne	r2,zero,80384f8 <tcp_reass+0x2c0>
      return (0);
 80384f0:	0005883a 	mov	r2,zero
 80384f4:	00004706 	br	8038614 <tcp_reass+0x3dc>
   ti = tp->seg_next;
 80384f8:	e0bff917 	ldw	r2,-28(fp)
 80384fc:	10800017 	ldw	r2,0(r2)
 8038500:	e0bff815 	stw	r2,-32(fp)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
 8038504:	e0fff817 	ldw	r3,-32(fp)
 8038508:	e0bff917 	ldw	r2,-28(fp)
 803850c:	18800526 	beq	r3,r2,8038524 <tcp_reass+0x2ec>
 8038510:	e0bff817 	ldw	r2,-32(fp)
 8038514:	10c00617 	ldw	r3,24(r2)
 8038518:	e0bff917 	ldw	r2,-28(fp)
 803851c:	10801617 	ldw	r2,88(r2)
 8038520:	18800226 	beq	r3,r2,803852c <tcp_reass+0x2f4>
      return (0);
 8038524:	0005883a 	mov	r2,zero
 8038528:	00003a06 	br	8038614 <tcp_reass+0x3dc>
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
 803852c:	e0bff917 	ldw	r2,-28(fp)
 8038530:	10800217 	ldw	r2,8(r2)
 8038534:	108000d8 	cmpnei	r2,r2,3
 8038538:	1000061e 	bne	r2,zero,8038554 <tcp_reass+0x31c>
 803853c:	e0bff817 	ldw	r2,-32(fp)
 8038540:	1080028b 	ldhu	r2,10(r2)
 8038544:	10bfffcc 	andi	r2,r2,65535
 8038548:	10000226 	beq	r2,zero,8038554 <tcp_reass+0x31c>
      return (0);
 803854c:	0005883a 	mov	r2,zero
 8038550:	00003006 	br	8038614 <tcp_reass+0x3dc>
      tp->rcv_nxt += ti->ti_len;
 8038554:	e0bff917 	ldw	r2,-28(fp)
 8038558:	10c01617 	ldw	r3,88(r2)
 803855c:	e0bff817 	ldw	r2,-32(fp)
 8038560:	1080028b 	ldhu	r2,10(r2)
 8038564:	10bfffcc 	andi	r2,r2,65535
 8038568:	1887883a 	add	r3,r3,r2
 803856c:	e0bff917 	ldw	r2,-28(fp)
 8038570:	10c01615 	stw	r3,88(r2)
      flags = ti->ti_flags & TH_FIN;
 8038574:	e0bff817 	ldw	r2,-32(fp)
 8038578:	10800843 	ldbu	r2,33(r2)
 803857c:	10803fcc 	andi	r2,r2,255
 8038580:	1080004c 	andi	r2,r2,1
 8038584:	e0bffa15 	stw	r2,-24(fp)
      remque(ti);
 8038588:	e13ff817 	ldw	r4,-32(fp)
 803858c:	80317ac0 	call	80317ac <remque>
      m = dtom(ti);
 8038590:	e13ff817 	ldw	r4,-32(fp)
 8038594:	80317140 	call	8031714 <dtom>
 8038598:	e0bffb15 	stw	r2,-20(fp)
      ti = (struct tcpiphdr *)ti->ti_next;
 803859c:	e0bff817 	ldw	r2,-32(fp)
 80385a0:	10800017 	ldw	r2,0(r2)
 80385a4:	e0bff815 	stw	r2,-32(fp)
      if (so->so_state & SS_CANTRCVMORE)
 80385a8:	e0bffe17 	ldw	r2,-8(fp)
 80385ac:	1080088b 	ldhu	r2,34(r2)
 80385b0:	10bfffcc 	andi	r2,r2,65535
 80385b4:	1080080c 	andi	r2,r2,32
 80385b8:	10000326 	beq	r2,zero,80385c8 <tcp_reass+0x390>
         m_freem (m);
 80385bc:	e13ffb17 	ldw	r4,-20(fp)
 80385c0:	80311e00 	call	80311e0 <m_freem>
 80385c4:	00000506 	br	80385dc <tcp_reass+0x3a4>
         sbappend (&so->so_rcv, m);
 80385c8:	e0bffe17 	ldw	r2,-8(fp)
 80385cc:	10800a04 	addi	r2,r2,40
 80385d0:	e17ffb17 	ldw	r5,-20(fp)
 80385d4:	1009883a 	mov	r4,r2
 80385d8:	80370b40 	call	80370b4 <sbappend>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
 80385dc:	e0fff817 	ldw	r3,-32(fp)
 80385e0:	e0bff917 	ldw	r2,-28(fp)
 80385e4:	18800526 	beq	r3,r2,80385fc <tcp_reass+0x3c4>
 80385e8:	e0bff817 	ldw	r2,-32(fp)
 80385ec:	10c00617 	ldw	r3,24(r2)
 80385f0:	e0bff917 	ldw	r2,-28(fp)
 80385f4:	10801617 	ldw	r2,88(r2)
 80385f8:	18bfd626 	beq	r3,r2,8038554 <tcp_reass+0x31c>
      sorwakeup(so);
 80385fc:	e0bffe17 	ldw	r2,-8(fp)
 8038600:	10800a04 	addi	r2,r2,40
 8038604:	100b883a 	mov	r5,r2
 8038608:	e13ffe17 	ldw	r4,-8(fp)
 803860c:	8036f040 	call	8036f04 <sbwakeup>
   return (flags);
 8038610:	e0bffa17 	ldw	r2,-24(fp)
}
 8038614:	e037883a 	mov	sp,fp
 8038618:	dfc00117 	ldw	ra,4(sp)
 803861c:	df000017 	ldw	fp,0(sp)
 8038620:	dec00204 	addi	sp,sp,8
 8038624:	f800283a 	ret

08038628 <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 8038628:	deffdf04 	addi	sp,sp,-132
 803862c:	dfc02015 	stw	ra,128(sp)
 8038630:	df001f15 	stw	fp,124(sp)
 8038634:	df001f04 	addi	fp,sp,124
 8038638:	e13fe415 	stw	r4,-112(fp)
 803863c:	e17fe315 	stw	r5,-116(fp)
   ip6_addr    ip6_src;
   ip6_addr    ip6_dst;
#endif   /* IP_V6 */
   struct tcpiphdr * ti;
   struct inpcb * inp;
   struct mbuf *  om =  0;
 8038640:	e03ffd15 	stw	zero,-12(fp)
   int   len,  tlen, off;
   struct tcpcb * tp =  0;
 8038644:	e03ffc15 	stw	zero,-16(fp)
   int   tiflags;
   struct socket *   so =  NULL;
 8038648:	e03ffa15 	stw	zero,-24(fp)
   int   todrop,  acked,   ourfinisacked, needoutput  =  0;
 803864c:	e03ff715 	stw	zero,-36(fp)
   int   dropsocket  =  0;
 8038650:	e03ff615 	stw	zero,-40(fp)
   long  iss   =  0;
 8038654:	e03ff515 	stw	zero,-44(fp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 8038658:	008201b4 	movhi	r2,2054
 803865c:	10bf5717 	ldw	r2,-676(r2)
 8038660:	10c00044 	addi	r3,r2,1
 8038664:	008201b4 	movhi	r2,2054
 8038668:	10ff5715 	stw	r3,-676(r2)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 803866c:	008201b4 	movhi	r2,2054
 8038670:	10bf1917 	ldw	r2,-924(r2)
 8038674:	10c00044 	addi	r3,r2,1
 8038678:	008201b4 	movhi	r2,2054
 803867c:	10ff1915 	stw	r3,-924(r2)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
 8038680:	e0bfe417 	ldw	r2,-112(fp)
 8038684:	10800317 	ldw	r2,12(r2)
 8038688:	e0bfff15 	stw	r2,-4(fp)
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
 803868c:	e0bfff17 	ldw	r2,-4(fp)
 8038690:	10800003 	ldbu	r2,0(r2)
 8038694:	10803fcc 	andi	r2,r2,255
 8038698:	108011b0 	cmpltui	r2,r2,70
 803869c:	1000061e 	bne	r2,zero,80386b8 <tcp_input+0x90>
      {
         np_stripoptions(pip, (struct mbuf *)m);
 80386a0:	e17fe417 	ldw	r5,-112(fp)
 80386a4:	e13fff17 	ldw	r4,-4(fp)
 80386a8:	80321000 	call	8032100 <np_stripoptions>
         pip = mtod(m, struct ip *);
 80386ac:	e0bfe417 	ldw	r2,-112(fp)
 80386b0:	10800317 	ldw	r2,12(r2)
 80386b4:	e0bfff15 	stw	r2,-4(fp)
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
 80386b8:	e0bfe417 	ldw	r2,-112(fp)
 80386bc:	10800217 	ldw	r2,8(r2)
 80386c0:	10800a28 	cmpgeui	r2,r2,40
 80386c4:	1000061e 	bne	r2,zero,80386e0 <tcp_input+0xb8>
      {
         tcpstat.tcps_rcvshort++;
 80386c8:	008201b4 	movhi	r2,2054
 80386cc:	10bf5c17 	ldw	r2,-656(r2)
 80386d0:	10c00044 	addi	r3,r2,1
 80386d4:	008201b4 	movhi	r2,2054
 80386d8:	10ff5c15 	stw	r3,-656(r2)
         return;
 80386dc:	00085306 	br	803a82c <tcp_input+0x2204>
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
 80386e0:	e0bfff17 	ldw	r2,-4(fp)
 80386e4:	1080008b 	ldhu	r2,2(r2)
 80386e8:	10bfffcc 	andi	r2,r2,65535
 80386ec:	e0bff115 	stw	r2,-60(fp)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
 80386f0:	e0bfe417 	ldw	r2,-112(fp)
 80386f4:	10800317 	ldw	r2,12(r2)
 80386f8:	e0bff015 	stw	r2,-64(fp)
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
 80386fc:	e0bfe417 	ldw	r2,-112(fp)
 8038700:	10800117 	ldw	r2,4(r2)
 8038704:	10800117 	ldw	r2,4(r2)
 8038708:	e0fff017 	ldw	r3,-64(fp)
 803870c:	1880032e 	bgeu	r3,r2,803871c <tcp_input+0xf4>
      {
         panic("tcp_input");
 8038710:	01020174 	movhi	r4,2053
 8038714:	210f3004 	addi	r4,r4,15552
 8038718:	802bd8c0 	call	802bd8c <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 803871c:	e0bff017 	ldw	r2,-64(fp)
 8038720:	10800803 	ldbu	r2,32(r2)
 8038724:	10803fcc 	andi	r2,r2,255
 8038728:	1004d13a 	srli	r2,r2,4
 803872c:	10803fcc 	andi	r2,r2,255
 8038730:	100490ba 	slli	r2,r2,2
 8038734:	e0bfef15 	stw	r2,-68(fp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
 8038738:	e0bfef17 	ldw	r2,-68(fp)
 803873c:	10800530 	cmpltui	r2,r2,20
 8038740:	1000031e 	bne	r2,zero,8038750 <tcp_input+0x128>
 8038744:	e0bfef17 	ldw	r2,-68(fp)
 8038748:	e0fff117 	ldw	r3,-60(fp)
 803874c:	18800d0e 	bge	r3,r2,8038784 <tcp_input+0x15c>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 8038750:	008201b4 	movhi	r2,2054
 8038754:	10bf5b17 	ldw	r2,-660(r2)
 8038758:	10c00044 	addi	r3,r2,1
 803875c:	008201b4 	movhi	r2,2054
 8038760:	10ff5b15 	stw	r3,-660(r2)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 8038764:	008201b4 	movhi	r2,2054
 8038768:	10bf1d17 	ldw	r2,-908(r2)
 803876c:	10c00044 	addi	r3,r2,1
 8038770:	008201b4 	movhi	r2,2054
 8038774:	10ff1d15 	stw	r3,-908(r2)
      GOTO_DROP;
 8038778:	00805784 	movi	r2,350
 803877c:	d0a0ad15 	stw	r2,-32076(gp)
 8038780:	00081606 	br	803a7dc <tcp_input+0x21b4>
   }
   tlen -= (int)off;
 8038784:	e0fff117 	ldw	r3,-60(fp)
 8038788:	e0bfef17 	ldw	r2,-68(fp)
 803878c:	1885c83a 	sub	r2,r3,r2
 8038790:	e0bff115 	stw	r2,-60(fp)
   ti->ti_len = (u_short)tlen;
 8038794:	e0bff117 	ldw	r2,-60(fp)
 8038798:	1007883a 	mov	r3,r2
 803879c:	e0bff017 	ldw	r2,-64(fp)
 80387a0:	10c0028d 	sth	r3,10(r2)
   if (off > sizeof (struct tcphdr)) 
 80387a4:	e0bfef17 	ldw	r2,-68(fp)
 80387a8:	10800570 	cmpltui	r2,r2,21
 80387ac:	1000331e 	bne	r2,zero,803887c <tcp_input+0x254>
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
 80387b0:	e0bfef17 	ldw	r2,-68(fp)
 80387b4:	10bffb04 	addi	r2,r2,-20
 80387b8:	e0bfee15 	stw	r2,-72(fp)
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
 80387bc:	e17fee17 	ldw	r5,-72(fp)
 80387c0:	01000044 	movi	r4,1
 80387c4:	8030f540 	call	8030f54 <m_getnbuf>
 80387c8:	e0bffd15 	stw	r2,-12(fp)
      if (om == 0)
 80387cc:	e0bffd17 	ldw	r2,-12(fp)
 80387d0:	1000031e 	bne	r2,zero,80387e0 <tcp_input+0x1b8>
         GOTO_DROP;
 80387d4:	00805a84 	movi	r2,362
 80387d8:	d0a0ad15 	stw	r2,-32076(gp)
 80387dc:	0007ff06 	br	803a7dc <tcp_input+0x21b4>
      om->m_len = olen;       /* set mbuf length */
 80387e0:	e0ffee17 	ldw	r3,-72(fp)
 80387e4:	e0bffd17 	ldw	r2,-12(fp)
 80387e8:	10c00215 	stw	r3,8(r2)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 80387ec:	e0bfe417 	ldw	r2,-112(fp)
 80387f0:	10800117 	ldw	r2,4(r2)
 80387f4:	1080080b 	ldhu	r2,32(r2)
 80387f8:	10ffffcc 	andi	r3,r2,65535
 80387fc:	00b76194 	movui	r2,56710
 8038800:	1880051e 	bne	r3,r2,8038818 <tcp_input+0x1f0>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
 8038804:	e0bfe417 	ldw	r2,-112(fp)
 8038808:	10800317 	ldw	r2,12(r2)
 803880c:	10800504 	addi	r2,r2,20
 8038810:	e0bff415 	stw	r2,-48(fp)
 8038814:	00000406 	br	8038828 <tcp_input+0x200>
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
 8038818:	e0bfe417 	ldw	r2,-112(fp)
 803881c:	10800317 	ldw	r2,12(r2)
 8038820:	10800a04 	addi	r2,r2,40
 8038824:	e0bff415 	stw	r2,-48(fp)
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
 8038828:	e0bffd17 	ldw	r2,-12(fp)
 803882c:	10800317 	ldw	r2,12(r2)
 8038830:	e0ffee17 	ldw	r3,-72(fp)
 8038834:	180d883a 	mov	r6,r3
 8038838:	e17ff417 	ldw	r5,-48(fp)
 803883c:	1009883a 	mov	r4,r2
 8038840:	80037cc0 	call	80037cc <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 8038844:	e0bfe417 	ldw	r2,-112(fp)
 8038848:	10c00317 	ldw	r3,12(r2)
 803884c:	e0bffd17 	ldw	r2,-12(fp)
 8038850:	10800217 	ldw	r2,8(r2)
 8038854:	1887883a 	add	r3,r3,r2
 8038858:	e0bfe417 	ldw	r2,-112(fp)
 803885c:	10c00315 	stw	r3,12(r2)
      m->m_len -= om->m_len;
 8038860:	e0bfe417 	ldw	r2,-112(fp)
 8038864:	10c00217 	ldw	r3,8(r2)
 8038868:	e0bffd17 	ldw	r2,-12(fp)
 803886c:	10800217 	ldw	r2,8(r2)
 8038870:	1887c83a 	sub	r3,r3,r2
 8038874:	e0bfe417 	ldw	r2,-112(fp)
 8038878:	10c00215 	stw	r3,8(r2)
   }
   tiflags = ti->ti_flags;
 803887c:	e0bff017 	ldw	r2,-64(fp)
 8038880:	10800843 	ldbu	r2,33(r2)
 8038884:	10803fcc 	andi	r2,r2,255
 8038888:	e0bffb15 	stw	r2,-20(fp)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 803888c:	e0bff017 	ldw	r2,-64(fp)
 8038890:	10800617 	ldw	r2,24(r2)
 8038894:	1006d63a 	srli	r3,r2,24
 8038898:	e0bff017 	ldw	r2,-64(fp)
 803889c:	10800617 	ldw	r2,24(r2)
 80388a0:	1004d23a 	srli	r2,r2,8
 80388a4:	10bfc00c 	andi	r2,r2,65280
 80388a8:	1886b03a 	or	r3,r3,r2
 80388ac:	e0bff017 	ldw	r2,-64(fp)
 80388b0:	10800617 	ldw	r2,24(r2)
 80388b4:	1004923a 	slli	r2,r2,8
 80388b8:	10803fec 	andhi	r2,r2,255
 80388bc:	1886b03a 	or	r3,r3,r2
 80388c0:	e0bff017 	ldw	r2,-64(fp)
 80388c4:	10800617 	ldw	r2,24(r2)
 80388c8:	1004963a 	slli	r2,r2,24
 80388cc:	1886b03a 	or	r3,r3,r2
 80388d0:	e0bff017 	ldw	r2,-64(fp)
 80388d4:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = ntohl(ti->ti_ack);
 80388d8:	e0bff017 	ldw	r2,-64(fp)
 80388dc:	10800717 	ldw	r2,28(r2)
 80388e0:	1006d63a 	srli	r3,r2,24
 80388e4:	e0bff017 	ldw	r2,-64(fp)
 80388e8:	10800717 	ldw	r2,28(r2)
 80388ec:	1004d23a 	srli	r2,r2,8
 80388f0:	10bfc00c 	andi	r2,r2,65280
 80388f4:	1886b03a 	or	r3,r3,r2
 80388f8:	e0bff017 	ldw	r2,-64(fp)
 80388fc:	10800717 	ldw	r2,28(r2)
 8038900:	1004923a 	slli	r2,r2,8
 8038904:	10803fec 	andhi	r2,r2,255
 8038908:	1886b03a 	or	r3,r3,r2
 803890c:	e0bff017 	ldw	r2,-64(fp)
 8038910:	10800717 	ldw	r2,28(r2)
 8038914:	1004963a 	slli	r2,r2,24
 8038918:	1886b03a 	or	r3,r3,r2
 803891c:	e0bff017 	ldw	r2,-64(fp)
 8038920:	10c00715 	stw	r3,28(r2)
   ti->ti_urp = ntohs(ti->ti_urp);
 8038924:	e0bff017 	ldw	r2,-64(fp)
 8038928:	1080098b 	ldhu	r2,38(r2)
 803892c:	10bfffcc 	andi	r2,r2,65535
 8038930:	1004d23a 	srli	r2,r2,8
 8038934:	1007883a 	mov	r3,r2
 8038938:	e0bff017 	ldw	r2,-64(fp)
 803893c:	1080098b 	ldhu	r2,38(r2)
 8038940:	10bfffcc 	andi	r2,r2,65535
 8038944:	1004923a 	slli	r2,r2,8
 8038948:	1884b03a 	or	r2,r3,r2
 803894c:	1007883a 	mov	r3,r2
 8038950:	e0bff017 	ldw	r2,-64(fp)
 8038954:	10c0098d 	sth	r3,38(r2)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
 8038958:	e0bfe417 	ldw	r2,-112(fp)
 803895c:	10800117 	ldw	r2,4(r2)
 8038960:	1080080b 	ldhu	r2,32(r2)
 8038964:	10bfffcc 	andi	r2,r2,65535
 8038968:	10800218 	cmpnei	r2,r2,8
 803896c:	1000221e 	bne	r2,zero,80389f8 <tcp_input+0x3d0>
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 8038970:	e0bfe417 	ldw	r2,-112(fp)
 8038974:	10800317 	ldw	r2,12(r2)
 8038978:	10c00a04 	addi	r3,r2,40
 803897c:	e0bfe417 	ldw	r2,-112(fp)
 8038980:	10c00315 	stw	r3,12(r2)
      m->m_len -= 40;
 8038984:	e0bfe417 	ldw	r2,-112(fp)
 8038988:	10800217 	ldw	r2,8(r2)
 803898c:	10fff604 	addi	r3,r2,-40
 8038990:	e0bfe417 	ldw	r2,-112(fp)
 8038994:	10c00215 	stw	r3,8(r2)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 8038998:	e0bff017 	ldw	r2,-64(fp)
 803899c:	11000317 	ldw	r4,12(r2)
 80389a0:	e0bff017 	ldw	r2,-64(fp)
 80389a4:	1080050b 	ldhu	r2,20(r2)
 80389a8:	117fffcc 	andi	r5,r2,65535
 80389ac:	e0bff017 	ldw	r2,-64(fp)
 80389b0:	11800417 	ldw	r6,16(r2)
         ti->ti_dst.s_addr, ti->ti_dport, INPLOOKUP_WILDCARD);
 80389b4:	e0bff017 	ldw	r2,-64(fp)
 80389b8:	1080058b 	ldhu	r2,22(r2)
      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 80389bc:	10bfffcc 	andi	r2,r2,65535
 80389c0:	00c00044 	movi	r3,1
 80389c4:	d8c00115 	stw	r3,4(sp)
 80389c8:	d8800015 	stw	r2,0(sp)
 80389cc:	300f883a 	mov	r7,r6
 80389d0:	280d883a 	mov	r6,r5
 80389d4:	200b883a 	mov	r5,r4
 80389d8:	010201b4 	movhi	r4,2054
 80389dc:	213f3304 	addi	r4,r4,-820
 80389e0:	804ae480 	call	804ae48 <in_pcblookup>
 80389e4:	e0bffe15 	stw	r2,-8(fp)
      break;
 80389e8:	0001883a 	nop
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
 80389ec:	e0bffe17 	ldw	r2,-8(fp)
 80389f0:	1000061e 	bne	r2,zero,8038a0c <tcp_input+0x3e4>
 80389f4:	00000206 	br	8038a00 <tcp_input+0x3d8>
      dtrap();
 80389f8:	80301a80 	call	80301a8 <dtrap>
      return;
 80389fc:	00078b06 	br	803a82c <tcp_input+0x2204>
      GOTO_DROPWITHRESET;
 8038a00:	00806b04 	movi	r2,428
 8038a04:	d0a0ad15 	stw	r2,-32076(gp)
 8038a08:	00073506 	br	803a6e0 <tcp_input+0x20b8>
   tp = intotcpcb (inp);
 8038a0c:	e0bffe17 	ldw	r2,-8(fp)
 8038a10:	10800917 	ldw	r2,36(r2)
 8038a14:	e0bffc15 	stw	r2,-16(fp)
   if (tp == 0)
 8038a18:	e0bffc17 	ldw	r2,-16(fp)
 8038a1c:	1000031e 	bne	r2,zero,8038a2c <tcp_input+0x404>
      GOTO_DROPWITHRESET;
 8038a20:	00806bc4 	movi	r2,431
 8038a24:	d0a0ad15 	stw	r2,-32076(gp)
 8038a28:	00072d06 	br	803a6e0 <tcp_input+0x20b8>
   if (tp->t_state == TCPS_CLOSED)
 8038a2c:	e0bffc17 	ldw	r2,-16(fp)
 8038a30:	10800217 	ldw	r2,8(r2)
 8038a34:	1000031e 	bne	r2,zero,8038a44 <tcp_input+0x41c>
      GOTO_DROP;
 8038a38:	00806c44 	movi	r2,433
 8038a3c:	d0a0ad15 	stw	r2,-32076(gp)
 8038a40:	00076606 	br	803a7dc <tcp_input+0x21b4>
   so = inp->inp_socket;
 8038a44:	e0bffe17 	ldw	r2,-8(fp)
 8038a48:	10800817 	ldw	r2,32(r2)
 8038a4c:	e0bffa15 	stw	r2,-24(fp)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 8038a50:	e0bff017 	ldw	r2,-64(fp)
 8038a54:	1080088b 	ldhu	r2,34(r2)
 8038a58:	10bfffcc 	andi	r2,r2,65535
 8038a5c:	1004d23a 	srli	r2,r2,8
 8038a60:	10bfffcc 	andi	r2,r2,65535
 8038a64:	10c03fcc 	andi	r3,r2,255
 8038a68:	e0bff017 	ldw	r2,-64(fp)
 8038a6c:	1080088b 	ldhu	r2,34(r2)
 8038a70:	10bfffcc 	andi	r2,r2,65535
 8038a74:	1004923a 	slli	r2,r2,8
 8038a78:	10bfffcc 	andi	r2,r2,65535
 8038a7c:	1884b03a 	or	r2,r3,r2
 8038a80:	e0bfed15 	stw	r2,-76(fp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
 8038a84:	e0bffa17 	ldw	r2,-24(fp)
 8038a88:	10800417 	ldw	r2,16(r2)
 8038a8c:	1080008c 	andi	r2,r2,2
 8038a90:	10002c26 	beq	r2,zero,8038b44 <tcp_input+0x51c>
   {
      so = sonewconn(so);
 8038a94:	e13ffa17 	ldw	r4,-24(fp)
 8038a98:	8036a000 	call	8036a00 <sonewconn>
 8038a9c:	e0bffa15 	stw	r2,-24(fp)
      if (so == 0)
 8038aa0:	e0bffa17 	ldw	r2,-24(fp)
 8038aa4:	1000031e 	bne	r2,zero,8038ab4 <tcp_input+0x48c>
         GOTO_DROP;
 8038aa8:	00807344 	movi	r2,461
 8038aac:	d0a0ad15 	stw	r2,-32076(gp)
 8038ab0:	00074a06 	br	803a7dc <tcp_input+0x21b4>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 8038ab4:	e0bff617 	ldw	r2,-40(fp)
 8038ab8:	10800044 	addi	r2,r2,1
 8038abc:	e0bff615 	stw	r2,-40(fp)

      inp = (struct inpcb *)so->so_pcb;
 8038ac0:	e0bffa17 	ldw	r2,-24(fp)
 8038ac4:	10800117 	ldw	r2,4(r2)
 8038ac8:	e0bffe15 	stw	r2,-8(fp)
      inp->ifp = ifp;      /* save iface to peer */
 8038acc:	e0bffe17 	ldw	r2,-8(fp)
 8038ad0:	e0ffe317 	ldw	r3,-116(fp)
 8038ad4:	10c00a15 	stw	r3,40(r2)

      switch(so->so_domain)
 8038ad8:	e0bffa17 	ldw	r2,-24(fp)
 8038adc:	10800517 	ldw	r2,20(r2)
 8038ae0:	10800098 	cmpnei	r2,r2,2
 8038ae4:	10000d1e 	bne	r2,zero,8038b1c <tcp_input+0x4f4>
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
 8038ae8:	e0bffe17 	ldw	r2,-8(fp)
 8038aec:	e0fff017 	ldw	r3,-64(fp)
 8038af0:	18c00417 	ldw	r3,16(r3)
 8038af4:	10c00415 	stw	r3,16(r2)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 8038af8:	e0bfe317 	ldw	r2,-116(fp)
 8038afc:	10c00917 	ldw	r3,36(r2)
 8038b00:	e0bfe317 	ldw	r2,-116(fp)
 8038b04:	10800817 	ldw	r2,32(r2)
 8038b08:	10800a04 	addi	r2,r2,40
 8038b0c:	1887c83a 	sub	r3,r3,r2
 8038b10:	e0bffe17 	ldw	r2,-8(fp)
 8038b14:	10c00615 	stw	r3,24(r2)
#endif   /* IP_PMTU */
         break;
 8038b18:	0001883a 	nop
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
 8038b1c:	e0bff017 	ldw	r2,-64(fp)
 8038b20:	10c0058b 	ldhu	r3,22(r2)
 8038b24:	e0bffe17 	ldw	r2,-8(fp)
 8038b28:	10c0078d 	sth	r3,30(r2)
      tp = intotcpcb(inp);
 8038b2c:	e0bffe17 	ldw	r2,-8(fp)
 8038b30:	10800917 	ldw	r2,36(r2)
 8038b34:	e0bffc15 	stw	r2,-16(fp)
      tp->t_state = TCPS_LISTEN;
 8038b38:	e0bffc17 	ldw	r2,-16(fp)
 8038b3c:	00c00044 	movi	r3,1
 8038b40:	10c00215 	stw	r3,8(r2)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
 8038b44:	e0bffc17 	ldw	r2,-16(fp)
 8038b48:	10001d15 	stw	zero,116(r2)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
 8038b4c:	d0e03a17 	ldw	r3,-32536(gp)
 8038b50:	e0bffc17 	ldw	r2,-16(fp)
 8038b54:	10c00515 	stw	r3,20(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
 8038b58:	e0bffd17 	ldw	r2,-12(fp)
 8038b5c:	10000926 	beq	r2,zero,8038b84 <tcp_input+0x55c>
 8038b60:	e0bffc17 	ldw	r2,-16(fp)
 8038b64:	10800217 	ldw	r2,8(r2)
 8038b68:	10800060 	cmpeqi	r2,r2,1
 8038b6c:	1000051e 	bne	r2,zero,8038b84 <tcp_input+0x55c>
   {
      tcp_dooptions(tp, om, ti);
 8038b70:	e1bff017 	ldw	r6,-64(fp)
 8038b74:	e17ffd17 	ldw	r5,-12(fp)
 8038b78:	e13ffc17 	ldw	r4,-16(fp)
 8038b7c:	803a8400 	call	803a840 <tcp_dooptions>
      om = 0;
 8038b80:	e03ffd15 	stw	zero,-12(fp)
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
 8038b84:	e0bff017 	ldw	r2,-64(fp)
 8038b88:	10c00717 	ldw	r3,28(r2)
 8038b8c:	e0bffc17 	ldw	r2,-16(fp)
 8038b90:	10800e17 	ldw	r2,56(r2)
 8038b94:	1885c83a 	sub	r2,r3,r2
 8038b98:	e0bfec15 	stw	r2,-80(fp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 8038b9c:	e0bffa17 	ldw	r2,-24(fp)
 8038ba0:	10800b17 	ldw	r2,44(r2)
 8038ba4:	1007883a 	mov	r3,r2
 8038ba8:	e0bffa17 	ldw	r2,-24(fp)
 8038bac:	10800a17 	ldw	r2,40(r2)
 8038bb0:	1885c83a 	sub	r2,r3,r2
 8038bb4:	10000616 	blt	r2,zero,8038bd0 <tcp_input+0x5a8>
 8038bb8:	e0bffa17 	ldw	r2,-24(fp)
 8038bbc:	10c00b17 	ldw	r3,44(r2)
 8038bc0:	e0bffa17 	ldw	r2,-24(fp)
 8038bc4:	10800a17 	ldw	r2,40(r2)
 8038bc8:	1885c83a 	sub	r2,r3,r2
 8038bcc:	00000106 	br	8038bd4 <tcp_input+0x5ac>
 8038bd0:	0005883a 	mov	r2,zero
 8038bd4:	e0bff315 	stw	r2,-52(fp)
      if (win < 0)
 8038bd8:	e0bff317 	ldw	r2,-52(fp)
 8038bdc:	1000010e 	bge	r2,zero,8038be4 <tcp_input+0x5bc>
         win = 0;
 8038be0:	e03ff315 	stw	zero,-52(fp)
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 8038be4:	e0bffc17 	ldw	r2,-16(fp)
 8038be8:	10c01917 	ldw	r3,100(r2)
 8038bec:	e0bffc17 	ldw	r2,-16(fp)
 8038bf0:	10801617 	ldw	r2,88(r2)
 8038bf4:	1885c83a 	sub	r2,r3,r2
 8038bf8:	e0fff317 	ldw	r3,-52(fp)
 8038bfc:	10c0012e 	bgeu	r2,r3,8038c04 <tcp_input+0x5dc>
 8038c00:	1805883a 	mov	r2,r3
 8038c04:	e0fffc17 	ldw	r3,-16(fp)
 8038c08:	18801515 	stw	r2,84(r3)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 8038c0c:	e0bffc17 	ldw	r2,-16(fp)
 8038c10:	10800217 	ldw	r2,8(r2)
 8038c14:	10800118 	cmpnei	r2,r2,4
 8038c18:	1000f41e 	bne	r2,zero,8038fec <tcp_input+0x9c4>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
 8038c1c:	e0bffb17 	ldw	r2,-20(fp)
 8038c20:	10800dcc 	andi	r2,r2,55
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 8038c24:	10800418 	cmpnei	r2,r2,16
 8038c28:	1000f01e 	bne	r2,zero,8038fec <tcp_input+0x9c4>
       (ti->ti_seq == tp->rcv_nxt) &&
 8038c2c:	e0bff017 	ldw	r2,-64(fp)
 8038c30:	10c00617 	ldw	r3,24(r2)
 8038c34:	e0bffc17 	ldw	r2,-16(fp)
 8038c38:	10801617 	ldw	r2,88(r2)
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
 8038c3c:	1880eb1e 	bne	r3,r2,8038fec <tcp_input+0x9c4>
       (ti->ti_seq == tp->rcv_nxt) &&
 8038c40:	e0bfed17 	ldw	r2,-76(fp)
 8038c44:	1000e926 	beq	r2,zero,8038fec <tcp_input+0x9c4>
       (rx_win && rx_win == tp->snd_wnd) &&
 8038c48:	e0bffc17 	ldw	r2,-16(fp)
 8038c4c:	10801417 	ldw	r2,80(r2)
 8038c50:	e0ffed17 	ldw	r3,-76(fp)
 8038c54:	1880e51e 	bne	r3,r2,8038fec <tcp_input+0x9c4>
       (tp->snd_nxt == tp->snd_max))
 8038c58:	e0bffc17 	ldw	r2,-16(fp)
 8038c5c:	10c00f17 	ldw	r3,60(r2)
 8038c60:	e0bffc17 	ldw	r2,-16(fp)
 8038c64:	10801a17 	ldw	r2,104(r2)
       (rx_win && rx_win == tp->snd_wnd) &&
 8038c68:	1880e01e 	bne	r3,r2,8038fec <tcp_input+0x9c4>
   {
      if (ti->ti_len == 0)
 8038c6c:	e0bff017 	ldw	r2,-64(fp)
 8038c70:	1080028b 	ldhu	r2,10(r2)
 8038c74:	10bfffcc 	andi	r2,r2,65535
 8038c78:	10005b1e 	bne	r2,zero,8038de8 <tcp_input+0x7c0>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 8038c7c:	e0bff017 	ldw	r2,-64(fp)
 8038c80:	10c00717 	ldw	r3,28(r2)
 8038c84:	e0bffc17 	ldw	r2,-16(fp)
 8038c88:	10800e17 	ldw	r2,56(r2)
 8038c8c:	1885c83a 	sub	r2,r3,r2
 8038c90:	0080d60e 	bge	zero,r2,8038fec <tcp_input+0x9c4>
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
 8038c94:	e0bff017 	ldw	r2,-64(fp)
 8038c98:	10c00717 	ldw	r3,28(r2)
 8038c9c:	e0bffc17 	ldw	r2,-16(fp)
 8038ca0:	10801a17 	ldw	r2,104(r2)
 8038ca4:	1885c83a 	sub	r2,r3,r2
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 8038ca8:	0080d016 	blt	zero,r2,8038fec <tcp_input+0x9c4>
             tp->snd_cwnd >= tp->snd_wnd) 
 8038cac:	e0bffc17 	ldw	r2,-16(fp)
 8038cb0:	10c01b17 	ldw	r3,108(r2)
 8038cb4:	e0bffc17 	ldw	r2,-16(fp)
 8038cb8:	10801417 	ldw	r2,80(r2)
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
 8038cbc:	1880cb36 	bltu	r3,r2,8038fec <tcp_input+0x9c4>
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
 8038cc0:	008201b4 	movhi	r2,2054
 8038cc4:	10bf7317 	ldw	r2,-564(r2)
 8038cc8:	10c00044 	addi	r3,r2,1
 8038ccc:	008201b4 	movhi	r2,2054
 8038cd0:	10ff7315 	stw	r3,-564(r2)
            if (tp->t_rttick && 
 8038cd4:	e0bffc17 	ldw	r2,-16(fp)
 8038cd8:	10801e17 	ldw	r2,120(r2)
 8038cdc:	10000826 	beq	r2,zero,8038d00 <tcp_input+0x6d8>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
 8038ce0:	e0bff017 	ldw	r2,-64(fp)
 8038ce4:	10c00717 	ldw	r3,28(r2)
 8038ce8:	e0bffc17 	ldw	r2,-16(fp)
 8038cec:	10801f17 	ldw	r2,124(r2)
 8038cf0:	1885c83a 	sub	r2,r3,r2
            if (tp->t_rttick && 
 8038cf4:	0080020e 	bge	zero,r2,8038d00 <tcp_input+0x6d8>
            {
               tcp_xmit_timer(tp);
 8038cf8:	e13ffc17 	ldw	r4,-16(fp)
 8038cfc:	803aaf40 	call	803aaf4 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
 8038d00:	008201b4 	movhi	r2,2054
 8038d04:	10bf6917 	ldw	r2,-604(r2)
 8038d08:	10c00044 	addi	r3,r2,1
 8038d0c:	008201b4 	movhi	r2,2054
 8038d10:	10ff6915 	stw	r3,-604(r2)
            tcpstat.tcps_rcvackbyte += acked;
 8038d14:	008201b4 	movhi	r2,2054
 8038d18:	10ff6a17 	ldw	r3,-600(r2)
 8038d1c:	e0bfec17 	ldw	r2,-80(fp)
 8038d20:	1887883a 	add	r3,r3,r2
 8038d24:	008201b4 	movhi	r2,2054
 8038d28:	10ff6a15 	stw	r3,-600(r2)
            sbdrop(&so->so_snd, acked);
 8038d2c:	e0bffa17 	ldw	r2,-24(fp)
 8038d30:	10801204 	addi	r2,r2,72
 8038d34:	e17fec17 	ldw	r5,-80(fp)
 8038d38:	1009883a 	mov	r4,r2
 8038d3c:	803766c0 	call	803766c <sbdrop>
            tp->snd_una = ti->ti_ack;
 8038d40:	e0bff017 	ldw	r2,-64(fp)
 8038d44:	10c00717 	ldw	r3,28(r2)
 8038d48:	e0bffc17 	ldw	r2,-16(fp)
 8038d4c:	10c00e15 	stw	r3,56(r2)
            m_freem(m);
 8038d50:	e13fe417 	ldw	r4,-112(fp)
 8038d54:	80311e00 	call	80311e0 <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
 8038d58:	e0bffc17 	ldw	r2,-16(fp)
 8038d5c:	10c00e17 	ldw	r3,56(r2)
 8038d60:	e0bffc17 	ldw	r2,-16(fp)
 8038d64:	10801a17 	ldw	r2,104(r2)
 8038d68:	1880031e 	bne	r3,r2,8038d78 <tcp_input+0x750>
               tp->t_timer[TCPT_REXMT] = 0;
 8038d6c:	e0bffc17 	ldw	r2,-16(fp)
 8038d70:	10000315 	stw	zero,12(r2)
 8038d74:	00000706 	br	8038d94 <tcp_input+0x76c>
            else if (tp->t_timer[TCPT_PERSIST] == 0)
 8038d78:	e0bffc17 	ldw	r2,-16(fp)
 8038d7c:	10800417 	ldw	r2,16(r2)
 8038d80:	1000041e 	bne	r2,zero,8038d94 <tcp_input+0x76c>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 8038d84:	e0bffc17 	ldw	r2,-16(fp)
 8038d88:	10c00817 	ldw	r3,32(r2)
 8038d8c:	e0bffc17 	ldw	r2,-16(fp)
 8038d90:	10c00315 	stw	r3,12(r2)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 8038d94:	e0bffa17 	ldw	r2,-24(fp)
 8038d98:	1080190b 	ldhu	r2,100(r2)
 8038d9c:	10bfffcc 	andi	r2,r2,65535
 8038da0:	1080030c 	andi	r2,r2,12
 8038da4:	10000526 	beq	r2,zero,8038dbc <tcp_input+0x794>
               sowwakeup(so);
 8038da8:	e0bffa17 	ldw	r2,-24(fp)
 8038dac:	10801204 	addi	r2,r2,72
 8038db0:	100b883a 	mov	r5,r2
 8038db4:	e13ffa17 	ldw	r4,-24(fp)
 8038db8:	8036f040 	call	8036f04 <sbwakeup>

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
 8038dbc:	e0bffa17 	ldw	r2,-24(fp)
 8038dc0:	10801217 	ldw	r2,72(r2)
 8038dc4:	e0fffc17 	ldw	r3,-16(fp)
 8038dc8:	19000f17 	ldw	r4,60(r3)
 8038dcc:	e0fffc17 	ldw	r3,-16(fp)
 8038dd0:	18c00e17 	ldw	r3,56(r3)
 8038dd4:	20c7c83a 	sub	r3,r4,r3
 8038dd8:	18868b2e 	bgeu	r3,r2,803a808 <tcp_input+0x21e0>
               (void) tcp_output(tp);
 8038ddc:	e13ffc17 	ldw	r4,-16(fp)
 8038de0:	803ae700 	call	803ae70 <tcp_output>
            return;
 8038de4:	00068806 	br	803a808 <tcp_input+0x21e0>
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
 8038de8:	e0bff017 	ldw	r2,-64(fp)
 8038dec:	10c00717 	ldw	r3,28(r2)
 8038df0:	e0bffc17 	ldw	r2,-16(fp)
 8038df4:	10800e17 	ldw	r2,56(r2)
 8038df8:	18807c1e 	bne	r3,r2,8038fec <tcp_input+0x9c4>
          tp->seg_next == (struct tcpiphdr *)tp &&
 8038dfc:	e0bffc17 	ldw	r2,-16(fp)
 8038e00:	10800017 	ldw	r2,0(r2)
      else if (ti->ti_ack == tp->snd_una &&
 8038e04:	e0fffc17 	ldw	r3,-16(fp)
 8038e08:	1880781e 	bne	r3,r2,8038fec <tcp_input+0x9c4>
          ti->ti_len <= sbspace(&so->so_rcv))
 8038e0c:	e0bff017 	ldw	r2,-64(fp)
 8038e10:	1080028b 	ldhu	r2,10(r2)
 8038e14:	10ffffcc 	andi	r3,r2,65535
 8038e18:	e0bffa17 	ldw	r2,-24(fp)
 8038e1c:	10800b17 	ldw	r2,44(r2)
 8038e20:	1009883a 	mov	r4,r2
 8038e24:	e0bffa17 	ldw	r2,-24(fp)
 8038e28:	10800a17 	ldw	r2,40(r2)
 8038e2c:	2085c83a 	sub	r2,r4,r2
 8038e30:	10000616 	blt	r2,zero,8038e4c <tcp_input+0x824>
 8038e34:	e0bffa17 	ldw	r2,-24(fp)
 8038e38:	11000b17 	ldw	r4,44(r2)
 8038e3c:	e0bffa17 	ldw	r2,-24(fp)
 8038e40:	10800a17 	ldw	r2,40(r2)
 8038e44:	2085c83a 	sub	r2,r4,r2
 8038e48:	00000106 	br	8038e50 <tcp_input+0x828>
 8038e4c:	0005883a 	mov	r2,zero
          tp->seg_next == (struct tcpiphdr *)tp &&
 8038e50:	10c06636 	bltu	r2,r3,8038fec <tcp_input+0x9c4>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
 8038e54:	e0bffc17 	ldw	r2,-16(fp)
 8038e58:	10801517 	ldw	r2,84(r2)
 8038e5c:	10000a1e 	bne	r2,zero,8038e88 <tcp_input+0x860>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
 8038e60:	008201b4 	movhi	r2,2054
 8038e64:	10bf6617 	ldw	r2,-616(r2)
 8038e68:	10c00044 	addi	r3,r2,1
 8038e6c:	008201b4 	movhi	r2,2054
 8038e70:	10ff6615 	stw	r3,-616(r2)
            m_freem (m);      /* free the received mbuf */
 8038e74:	e13fe417 	ldw	r4,-112(fp)
 8038e78:	80311e00 	call	80311e0 <m_freem>
            tcp_output(tp);   /* send the ack now... */
 8038e7c:	e13ffc17 	ldw	r4,-16(fp)
 8038e80:	803ae700 	call	803ae70 <tcp_output>
            return;
 8038e84:	00066906 	br	803a82c <tcp_input+0x2204>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
 8038e88:	008201b4 	movhi	r2,2054
 8038e8c:	10bf7417 	ldw	r2,-560(r2)
 8038e90:	10c00044 	addi	r3,r2,1
 8038e94:	008201b4 	movhi	r2,2054
 8038e98:	10ff7415 	stw	r3,-560(r2)
         tp->rcv_nxt += ti->ti_len;
 8038e9c:	e0bffc17 	ldw	r2,-16(fp)
 8038ea0:	10c01617 	ldw	r3,88(r2)
 8038ea4:	e0bff017 	ldw	r2,-64(fp)
 8038ea8:	1080028b 	ldhu	r2,10(r2)
 8038eac:	10bfffcc 	andi	r2,r2,65535
 8038eb0:	1887883a 	add	r3,r3,r2
 8038eb4:	e0bffc17 	ldw	r2,-16(fp)
 8038eb8:	10c01615 	stw	r3,88(r2)
         tcpstat.tcps_rcvpack++;
 8038ebc:	008201b4 	movhi	r2,2054
 8038ec0:	10bf5817 	ldw	r2,-672(r2)
 8038ec4:	10c00044 	addi	r3,r2,1
 8038ec8:	008201b4 	movhi	r2,2054
 8038ecc:	10ff5815 	stw	r3,-672(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 8038ed0:	008201b4 	movhi	r2,2054
 8038ed4:	10ff5917 	ldw	r3,-668(r2)
 8038ed8:	e0bff017 	ldw	r2,-64(fp)
 8038edc:	1080028b 	ldhu	r2,10(r2)
 8038ee0:	10bfffcc 	andi	r2,r2,65535
 8038ee4:	1887883a 	add	r3,r3,r2
 8038ee8:	008201b4 	movhi	r2,2054
 8038eec:	10ff5915 	stw	r3,-668(r2)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 8038ef0:	e0bffa17 	ldw	r2,-24(fp)
 8038ef4:	10800a04 	addi	r2,r2,40
 8038ef8:	e17fe417 	ldw	r5,-112(fp)
 8038efc:	1009883a 	mov	r4,r2
 8038f00:	80370b40 	call	80370b4 <sbappend>
         sorwakeup(so);
 8038f04:	e0bffa17 	ldw	r2,-24(fp)
 8038f08:	10800a04 	addi	r2,r2,40
 8038f0c:	100b883a 	mov	r5,r2
 8038f10:	e13ffa17 	ldw	r4,-24(fp)
 8038f14:	8036f040 	call	8036f04 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
 8038f18:	e0bffb17 	ldw	r2,-20(fp)
 8038f1c:	1080020c 	andi	r2,r2,8
 8038f20:	10000726 	beq	r2,zero,8038f40 <tcp_input+0x918>
            tp->t_flags |= TF_ACKNOW;
 8038f24:	e0bffc17 	ldw	r2,-16(fp)
 8038f28:	10800b0b 	ldhu	r2,44(r2)
 8038f2c:	10800054 	ori	r2,r2,1
 8038f30:	1007883a 	mov	r3,r2
 8038f34:	e0bffc17 	ldw	r2,-16(fp)
 8038f38:	10c00b0d 	sth	r3,44(r2)
 8038f3c:	00000606 	br	8038f58 <tcp_input+0x930>
         else
            tp->t_flags |= TF_DELACK;
 8038f40:	e0bffc17 	ldw	r2,-16(fp)
 8038f44:	10800b0b 	ldhu	r2,44(r2)
 8038f48:	10800094 	ori	r2,r2,2
 8038f4c:	1007883a 	mov	r3,r2
 8038f50:	e0bffc17 	ldw	r2,-16(fp)
 8038f54:	10c00b0d 	sth	r3,44(r2)

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));
 8038f58:	e0bffc17 	ldw	r2,-16(fp)
 8038f5c:	10c01517 	ldw	r3,84(r2)
 8038f60:	e0bffc17 	ldw	r2,-16(fp)
 8038f64:	11001617 	ldw	r4,88(r2)
 8038f68:	e0bffc17 	ldw	r2,-16(fp)
 8038f6c:	10801917 	ldw	r2,100(r2)
 8038f70:	2085c83a 	sub	r2,r4,r2
 8038f74:	1885883a 	add	r2,r3,r2
 8038f78:	e0bfeb15 	stw	r2,-84(fp)

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 8038f7c:	e0bffc17 	ldw	r2,-16(fp)
 8038f80:	10800a0b 	ldhu	r2,40(r2)
 8038f84:	10bfffcc 	andi	r2,r2,65535
 8038f88:	1085883a 	add	r2,r2,r2
 8038f8c:	1007883a 	mov	r3,r2
 8038f90:	e0bfeb17 	ldw	r2,-84(fp)
 8038f94:	10c0050e 	bge	r2,r3,8038fac <tcp_input+0x984>
             (tp->t_flags & TF_ACKNOW))
 8038f98:	e0bffc17 	ldw	r2,-16(fp)
 8038f9c:	10800b0b 	ldhu	r2,44(r2)
 8038fa0:	10bfffcc 	andi	r2,r2,65535
 8038fa4:	1080004c 	andi	r2,r2,1
         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 8038fa8:	10061926 	beq	r2,zero,803a810 <tcp_input+0x21e8>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
 8038fac:	e0bffc17 	ldw	r2,-16(fp)
 8038fb0:	10800b0b 	ldhu	r2,44(r2)
 8038fb4:	10800054 	ori	r2,r2,1
 8038fb8:	1007883a 	mov	r3,r2
 8038fbc:	e0bffc17 	ldw	r2,-16(fp)
 8038fc0:	10c00b0d 	sth	r3,44(r2)
            tp->t_flags &= ~TF_DELACK;
 8038fc4:	e0bffc17 	ldw	r2,-16(fp)
 8038fc8:	10c00b0b 	ldhu	r3,44(r2)
 8038fcc:	00bfff44 	movi	r2,-3
 8038fd0:	1884703a 	and	r2,r3,r2
 8038fd4:	1007883a 	mov	r3,r2
 8038fd8:	e0bffc17 	ldw	r2,-16(fp)
 8038fdc:	10c00b0d 	sth	r3,44(r2)
            tcp_output(tp);   /* send the ack now... */
 8038fe0:	e13ffc17 	ldw	r4,-16(fp)
 8038fe4:	803ae700 	call	803ae70 <tcp_output>
         }

         return;
 8038fe8:	00060906 	br	803a810 <tcp_input+0x21e8>
      }
   }

   switch (tp->t_state) 
 8038fec:	e0bffc17 	ldw	r2,-16(fp)
 8038ff0:	10800217 	ldw	r2,8(r2)
 8038ff4:	10c00060 	cmpeqi	r3,r2,1
 8038ff8:	1800031e 	bne	r3,zero,8039008 <tcp_input+0x9e0>
 8038ffc:	108000a0 	cmpeqi	r2,r2,2
 8039000:	1000a81e 	bne	r2,zero,80392a4 <tcp_input+0xc7c>
 8039004:	00017606 	br	80395e0 <tcp_input+0xfb8>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
 8039008:	e0bffb17 	ldw	r2,-20(fp)
 803900c:	1080010c 	andi	r2,r2,4
 8039010:	10000326 	beq	r2,zero,8039020 <tcp_input+0x9f8>
            GOTO_DROP;
 8039014:	0080bec4 	movi	r2,763
 8039018:	d0a0ad15 	stw	r2,-32076(gp)
 803901c:	0005ef06 	br	803a7dc <tcp_input+0x21b4>
         if (tiflags & TH_ACK)
 8039020:	e0bffb17 	ldw	r2,-20(fp)
 8039024:	1080040c 	andi	r2,r2,16
 8039028:	10000326 	beq	r2,zero,8039038 <tcp_input+0xa10>
            GOTO_DROPWITHRESET;
 803902c:	0080bf44 	movi	r2,765
 8039030:	d0a0ad15 	stw	r2,-32076(gp)
 8039034:	0005aa06 	br	803a6e0 <tcp_input+0x20b8>
         if ((tiflags & TH_SYN) == 0)
 8039038:	e0bffb17 	ldw	r2,-20(fp)
 803903c:	1080008c 	andi	r2,r2,2
 8039040:	1000031e 	bne	r2,zero,8039050 <tcp_input+0xa28>
            GOTO_DROP;
 8039044:	0080bfc4 	movi	r2,767
 8039048:	d0a0ad15 	stw	r2,-32076(gp)
 803904c:	0005e306 	br	803a7dc <tcp_input+0x21b4>
         if(in_broadcast(ti->ti_dst.s_addr))
 8039050:	e0bff017 	ldw	r2,-64(fp)
 8039054:	10800417 	ldw	r2,16(r2)
 8039058:	1009883a 	mov	r4,r2
 803905c:	80320c80 	call	80320c8 <in_broadcast>
 8039060:	10000326 	beq	r2,zero,8039070 <tcp_input+0xa48>
            GOTO_DROP;
 8039064:	0080c044 	movi	r2,769
 8039068:	d0a0ad15 	stw	r2,-32076(gp)
 803906c:	0005db06 	br	803a7dc <tcp_input+0x21b4>
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 8039070:	01400404 	movi	r5,16
 8039074:	01000244 	movi	r4,9
 8039078:	8030f540 	call	8030f54 <m_getnbuf>
 803907c:	e0bfea15 	stw	r2,-88(fp)
         if (am == NULL)
 8039080:	e0bfea17 	ldw	r2,-88(fp)
 8039084:	1000031e 	bne	r2,zero,8039094 <tcp_input+0xa6c>
            GOTO_DROP;
 8039088:	0080c104 	movi	r2,772
 803908c:	d0a0ad15 	stw	r2,-32076(gp)
 8039090:	0005d206 	br	803a7dc <tcp_input+0x21b4>

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
 8039094:	e0bffe17 	ldw	r2,-8(fp)
 8039098:	10800817 	ldw	r2,32(r2)
 803909c:	10800517 	ldw	r2,20(r2)
 80390a0:	10800098 	cmpnei	r2,r2,2
 80390a4:	10002c1e 	bne	r2,zero,8039158 <tcp_input+0xb30>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
 80390a8:	e0bfea17 	ldw	r2,-88(fp)
 80390ac:	00c00404 	movi	r3,16
 80390b0:	10c00215 	stw	r3,8(r2)
         sin = mtod(am, struct sockaddr_in *);
 80390b4:	e0bfea17 	ldw	r2,-88(fp)
 80390b8:	10800317 	ldw	r2,12(r2)
 80390bc:	e0bfe915 	stw	r2,-92(fp)
         sin->sin_family = AF_INET;
 80390c0:	e0bfe917 	ldw	r2,-92(fp)
 80390c4:	00c00084 	movi	r3,2
 80390c8:	10c0000d 	sth	r3,0(r2)
         sin->sin_addr = ti->ti_src;
 80390cc:	e0bfe917 	ldw	r2,-92(fp)
 80390d0:	e0fff017 	ldw	r3,-64(fp)
 80390d4:	18c00317 	ldw	r3,12(r3)
 80390d8:	10c00115 	stw	r3,4(r2)
         sin->sin_port = ti->ti_sport;
 80390dc:	e0bff017 	ldw	r2,-64(fp)
 80390e0:	10c0050b 	ldhu	r3,20(r2)
 80390e4:	e0bfe917 	ldw	r2,-92(fp)
 80390e8:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
 80390ec:	e0bffe17 	ldw	r2,-8(fp)
 80390f0:	10800417 	ldw	r2,16(r2)
 80390f4:	e0bfe515 	stw	r2,-108(fp)
         if (inp->inp_laddr.s_addr == INADDR_ANY)
 80390f8:	e0bffe17 	ldw	r2,-8(fp)
 80390fc:	10800417 	ldw	r2,16(r2)
 8039100:	1000041e 	bne	r2,zero,8039114 <tcp_input+0xaec>
            inp->inp_laddr = ti->ti_dst;
 8039104:	e0bffe17 	ldw	r2,-8(fp)
 8039108:	e0fff017 	ldw	r3,-64(fp)
 803910c:	18c00417 	ldw	r3,16(r3)
 8039110:	10c00415 	stw	r3,16(r2)
         if (in_pcbconnect (inp, am)) 
 8039114:	e17fea17 	ldw	r5,-88(fp)
 8039118:	e13ffe17 	ldw	r4,-8(fp)
 803911c:	804ab040 	call	804ab04 <in_pcbconnect>
 8039120:	10000826 	beq	r2,zero,8039144 <tcp_input+0xb1c>
         {
            inp->inp_laddr = laddr;
 8039124:	e0bffe17 	ldw	r2,-8(fp)
 8039128:	e0ffe517 	ldw	r3,-108(fp)
 803912c:	10c00415 	stw	r3,16(r2)
            (void) m_free(am);
 8039130:	e13fea17 	ldw	r4,-88(fp)
 8039134:	80310dc0 	call	80310dc <m_free>
            GOTO_DROP;
 8039138:	0080c684 	movi	r2,794
 803913c:	d0a0ad15 	stw	r2,-32076(gp)
 8039140:	0005a606 	br	803a7dc <tcp_input+0x21b4>
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
 8039144:	e0bffe17 	ldw	r2,-8(fp)
 8039148:	e0ffe317 	ldw	r3,-116(fp)
 803914c:	10c00a15 	stw	r3,40(r2)
         
         (void) m_free (am);
 8039150:	e13fea17 	ldw	r4,-88(fp)
 8039154:	80310dc0 	call	80310dc <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
 8039158:	e13ffc17 	ldw	r4,-16(fp)
 803915c:	803c0180 	call	803c018 <tcp_template>
 8039160:	1007883a 	mov	r3,r2
 8039164:	e0bffc17 	ldw	r2,-16(fp)
 8039168:	10c00c15 	stw	r3,48(r2)
         if (tp->t_template == 0) 
 803916c:	e0bffc17 	ldw	r2,-16(fp)
 8039170:	10800c17 	ldw	r2,48(r2)
 8039174:	1000071e 	bne	r2,zero,8039194 <tcp_input+0xb6c>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
 8039178:	01401a44 	movi	r5,105
 803917c:	e13ffc17 	ldw	r4,-16(fp)
 8039180:	803c6200 	call	803c620 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
 8039184:	e03ff615 	stw	zero,-40(fp)
            GOTO_DROP;
 8039188:	0080d1c4 	movi	r2,839
 803918c:	d0a0ad15 	stw	r2,-32076(gp)
 8039190:	00059206 	br	803a7dc <tcp_input+0x21b4>
         }
         if (om) 
 8039194:	e0bffd17 	ldw	r2,-12(fp)
 8039198:	10000526 	beq	r2,zero,80391b0 <tcp_input+0xb88>
         {
            tcp_dooptions(tp, om, ti);
 803919c:	e1bff017 	ldw	r6,-64(fp)
 80391a0:	e17ffd17 	ldw	r5,-12(fp)
 80391a4:	e13ffc17 	ldw	r4,-16(fp)
 80391a8:	803a8400 	call	803a840 <tcp_dooptions>
            om = 0;
 80391ac:	e03ffd15 	stw	zero,-12(fp)
         }
         if (iss)
 80391b0:	e0bff517 	ldw	r2,-44(fp)
 80391b4:	10000426 	beq	r2,zero,80391c8 <tcp_input+0xba0>
            tp->iss = iss;
 80391b8:	e0fff517 	ldw	r3,-44(fp)
 80391bc:	e0bffc17 	ldw	r2,-16(fp)
 80391c0:	10c01315 	stw	r3,76(r2)
 80391c4:	00000306 	br	80391d4 <tcp_input+0xbac>
         else
            tp->iss = tcp_iss;
 80391c8:	d0e0b017 	ldw	r3,-32064(gp)
 80391cc:	e0bffc17 	ldw	r2,-16(fp)
 80391d0:	10c01315 	stw	r3,76(r2)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
 80391d4:	d0e0b017 	ldw	r3,-32064(gp)
 80391d8:	00be9fd4 	movui	r2,64127
 80391dc:	1885883a 	add	r2,r3,r2
 80391e0:	d0a0b015 	stw	r2,-32064(gp)
         tp->irs = ti->ti_seq;
 80391e4:	e0bff017 	ldw	r2,-64(fp)
 80391e8:	10c00617 	ldw	r3,24(r2)
 80391ec:	e0bffc17 	ldw	r2,-16(fp)
 80391f0:	10c01815 	stw	r3,96(r2)
         tcp_sendseqinit(tp);
 80391f4:	e0bffc17 	ldw	r2,-16(fp)
 80391f8:	10c01317 	ldw	r3,76(r2)
 80391fc:	e0bffc17 	ldw	r2,-16(fp)
 8039200:	10c01015 	stw	r3,64(r2)
 8039204:	e0bffc17 	ldw	r2,-16(fp)
 8039208:	10c01017 	ldw	r3,64(r2)
 803920c:	e0bffc17 	ldw	r2,-16(fp)
 8039210:	10c01a15 	stw	r3,104(r2)
 8039214:	e0bffc17 	ldw	r2,-16(fp)
 8039218:	10c01a17 	ldw	r3,104(r2)
 803921c:	e0bffc17 	ldw	r2,-16(fp)
 8039220:	10c00f15 	stw	r3,60(r2)
 8039224:	e0bffc17 	ldw	r2,-16(fp)
 8039228:	10c00f17 	ldw	r3,60(r2)
 803922c:	e0bffc17 	ldw	r2,-16(fp)
 8039230:	10c00e15 	stw	r3,56(r2)
         tcp_rcvseqinit(tp);
 8039234:	e0bffc17 	ldw	r2,-16(fp)
 8039238:	10801817 	ldw	r2,96(r2)
 803923c:	10c00044 	addi	r3,r2,1
 8039240:	e0bffc17 	ldw	r2,-16(fp)
 8039244:	10c01615 	stw	r3,88(r2)
 8039248:	e0bffc17 	ldw	r2,-16(fp)
 803924c:	10c01617 	ldw	r3,88(r2)
 8039250:	e0bffc17 	ldw	r2,-16(fp)
 8039254:	10c01915 	stw	r3,100(r2)
         tp->t_flags |= TF_ACKNOW;
 8039258:	e0bffc17 	ldw	r2,-16(fp)
 803925c:	10800b0b 	ldhu	r2,44(r2)
 8039260:	10800054 	ori	r2,r2,1
 8039264:	1007883a 	mov	r3,r2
 8039268:	e0bffc17 	ldw	r2,-16(fp)
 803926c:	10c00b0d 	sth	r3,44(r2)
         tp->t_state = TCPS_SYN_RECEIVED;
 8039270:	e0bffc17 	ldw	r2,-16(fp)
 8039274:	00c000c4 	movi	r3,3
 8039278:	10c00215 	stw	r3,8(r2)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 803927c:	e0bffc17 	ldw	r2,-16(fp)
 8039280:	00c02584 	movi	r3,150
 8039284:	10c00515 	stw	r3,20(r2)
         dropsocket = 0;      /* committed to socket */
 8039288:	e03ff615 	stw	zero,-40(fp)
         tcpstat.tcps_accepts++;
 803928c:	008201b4 	movhi	r2,2054
 8039290:	10bf3f17 	ldw	r2,-772(r2)
 8039294:	10c00044 	addi	r3,r2,1
 8039298:	008201b4 	movhi	r2,2054
 803929c:	10ff3f15 	stw	r3,-772(r2)
         goto trimthenstep6;
 80392a0:	00008e06 	br	80394dc <tcp_input+0xeb4>
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
 80392a4:	e0bffe17 	ldw	r2,-8(fp)
 80392a8:	e0ffe317 	ldw	r3,-116(fp)
 80392ac:	10c00a15 	stw	r3,40(r2)
      if ((tiflags & TH_ACK) &&
 80392b0:	e0bffb17 	ldw	r2,-20(fp)
 80392b4:	1080040c 	andi	r2,r2,16
 80392b8:	10000f26 	beq	r2,zero,80392f8 <tcp_input+0xcd0>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
 80392bc:	e0bff017 	ldw	r2,-64(fp)
 80392c0:	10c00717 	ldw	r3,28(r2)
 80392c4:	e0bffc17 	ldw	r2,-16(fp)
 80392c8:	10801317 	ldw	r2,76(r2)
 80392cc:	1885c83a 	sub	r2,r3,r2
      if ((tiflags & TH_ACK) &&
 80392d0:	0080060e 	bge	zero,r2,80392ec <tcp_input+0xcc4>
          SEQ_GT(ti->ti_ack, tp->snd_max)))
 80392d4:	e0bff017 	ldw	r2,-64(fp)
 80392d8:	10c00717 	ldw	r3,28(r2)
 80392dc:	e0bffc17 	ldw	r2,-16(fp)
 80392e0:	10801a17 	ldw	r2,104(r2)
 80392e4:	1885c83a 	sub	r2,r3,r2
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
 80392e8:	0080030e 	bge	zero,r2,80392f8 <tcp_input+0xcd0>
      {
         GOTO_DROPWITHRESET;
 80392ec:	0080dc04 	movi	r2,880
 80392f0:	d0a0ad15 	stw	r2,-32076(gp)
 80392f4:	0004fa06 	br	803a6e0 <tcp_input+0x20b8>
      }
      if (tiflags & TH_RST) 
 80392f8:	e0bffb17 	ldw	r2,-20(fp)
 80392fc:	1080010c 	andi	r2,r2,4
 8039300:	10000926 	beq	r2,zero,8039328 <tcp_input+0xd00>
      {
         if (tiflags & TH_ACK)
 8039304:	e0bffb17 	ldw	r2,-20(fp)
 8039308:	1080040c 	andi	r2,r2,16
 803930c:	10000326 	beq	r2,zero,803931c <tcp_input+0xcf4>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
 8039310:	01401bc4 	movi	r5,111
 8039314:	e13ffc17 	ldw	r4,-16(fp)
 8039318:	803c6200 	call	803c620 <tcp_drop>
         GOTO_DROP;
 803931c:	0080dd84 	movi	r2,886
 8039320:	d0a0ad15 	stw	r2,-32076(gp)
 8039324:	00052d06 	br	803a7dc <tcp_input+0x21b4>
      }
      if ((tiflags & TH_SYN) == 0)
 8039328:	e0bffb17 	ldw	r2,-20(fp)
 803932c:	1080008c 	andi	r2,r2,2
 8039330:	1000031e 	bne	r2,zero,8039340 <tcp_input+0xd18>
         GOTO_DROP;
 8039334:	0080de44 	movi	r2,889
 8039338:	d0a0ad15 	stw	r2,-32076(gp)
 803933c:	00052706 	br	803a7dc <tcp_input+0x21b4>
      if (tiflags & TH_ACK) 
 8039340:	e0bffb17 	ldw	r2,-20(fp)
 8039344:	1080040c 	andi	r2,r2,16
 8039348:	10000e26 	beq	r2,zero,8039384 <tcp_input+0xd5c>
      {
         tp->snd_una = ti->ti_ack;
 803934c:	e0bff017 	ldw	r2,-64(fp)
 8039350:	10c00717 	ldw	r3,28(r2)
 8039354:	e0bffc17 	ldw	r2,-16(fp)
 8039358:	10c00e15 	stw	r3,56(r2)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 803935c:	e0bffc17 	ldw	r2,-16(fp)
 8039360:	10c00f17 	ldw	r3,60(r2)
 8039364:	e0bffc17 	ldw	r2,-16(fp)
 8039368:	10800e17 	ldw	r2,56(r2)
 803936c:	1885c83a 	sub	r2,r3,r2
 8039370:	1000040e 	bge	r2,zero,8039384 <tcp_input+0xd5c>
            tp->snd_nxt = tp->snd_una;
 8039374:	e0bffc17 	ldw	r2,-16(fp)
 8039378:	10c00e17 	ldw	r3,56(r2)
 803937c:	e0bffc17 	ldw	r2,-16(fp)
 8039380:	10c00f15 	stw	r3,60(r2)
      }
      tp->t_timer[TCPT_REXMT] = 0;
 8039384:	e0bffc17 	ldw	r2,-16(fp)
 8039388:	10000315 	stw	zero,12(r2)
      tp->irs = ti->ti_seq;
 803938c:	e0bff017 	ldw	r2,-64(fp)
 8039390:	10c00617 	ldw	r3,24(r2)
 8039394:	e0bffc17 	ldw	r2,-16(fp)
 8039398:	10c01815 	stw	r3,96(r2)
      tcp_rcvseqinit(tp);
 803939c:	e0bffc17 	ldw	r2,-16(fp)
 80393a0:	10801817 	ldw	r2,96(r2)
 80393a4:	10c00044 	addi	r3,r2,1
 80393a8:	e0bffc17 	ldw	r2,-16(fp)
 80393ac:	10c01615 	stw	r3,88(r2)
 80393b0:	e0bffc17 	ldw	r2,-16(fp)
 80393b4:	10c01617 	ldw	r3,88(r2)
 80393b8:	e0bffc17 	ldw	r2,-16(fp)
 80393bc:	10c01915 	stw	r3,100(r2)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
 80393c0:	e0bffe17 	ldw	r2,-8(fp)
 80393c4:	10c00417 	ldw	r3,16(r2)
 80393c8:	e0bff017 	ldw	r2,-64(fp)
 80393cc:	10800417 	ldw	r2,16(r2)
 80393d0:	18801726 	beq	r3,r2,8039430 <tcp_input+0xe08>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
 80393d4:	e0bfe417 	ldw	r2,-112(fp)
 80393d8:	10800117 	ldw	r2,4(r2)
 80393dc:	10800617 	ldw	r2,24(r2)
 80393e0:	10001326 	beq	r2,zero,8039430 <tcp_input+0xe08>
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
 80393e4:	e0bfe417 	ldw	r2,-112(fp)
 80393e8:	10800117 	ldw	r2,4(r2)
 80393ec:	10800617 	ldw	r2,24(r2)
 80393f0:	10c00a17 	ldw	r3,40(r2)
 80393f4:	e0bff017 	ldw	r2,-64(fp)
 80393f8:	10800417 	ldw	r2,16(r2)
 80393fc:	18800c1e 	bne	r3,r2,8039430 <tcp_input+0xe08>
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
 8039400:	e0bffe17 	ldw	r2,-8(fp)
 8039404:	e0fff017 	ldw	r3,-64(fp)
 8039408:	18c00417 	ldw	r3,16(r3)
 803940c:	10c00415 	stw	r3,16(r2)
            if (tp->t_template != NULL)
 8039410:	e0bffc17 	ldw	r2,-16(fp)
 8039414:	10800c17 	ldw	r2,48(r2)
 8039418:	10000526 	beq	r2,zero,8039430 <tcp_input+0xe08>
               tp->t_template->ti_src = ti->ti_dst;
 803941c:	e0bffc17 	ldw	r2,-16(fp)
 8039420:	10800c17 	ldw	r2,48(r2)
 8039424:	e0fff017 	ldw	r3,-64(fp)
 8039428:	18c00417 	ldw	r3,16(r3)
 803942c:	10c00315 	stw	r3,12(r2)
         }
      }
      tp->t_flags |= TF_ACKNOW;
 8039430:	e0bffc17 	ldw	r2,-16(fp)
 8039434:	10800b0b 	ldhu	r2,44(r2)
 8039438:	10800054 	ori	r2,r2,1
 803943c:	1007883a 	mov	r3,r2
 8039440:	e0bffc17 	ldw	r2,-16(fp)
 8039444:	10c00b0d 	sth	r3,44(r2)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
 8039448:	e0bffb17 	ldw	r2,-20(fp)
 803944c:	1080040c 	andi	r2,r2,16
 8039450:	10001f26 	beq	r2,zero,80394d0 <tcp_input+0xea8>
 8039454:	e0bffc17 	ldw	r2,-16(fp)
 8039458:	10c00e17 	ldw	r3,56(r2)
 803945c:	e0bffc17 	ldw	r2,-16(fp)
 8039460:	10801317 	ldw	r2,76(r2)
 8039464:	1885c83a 	sub	r2,r3,r2
 8039468:	0080190e 	bge	zero,r2,80394d0 <tcp_input+0xea8>
      {
         tcpstat.tcps_connects++;
 803946c:	008201b4 	movhi	r2,2054
 8039470:	10bf4017 	ldw	r2,-768(r2)
 8039474:	10c00044 	addi	r3,r2,1
 8039478:	008201b4 	movhi	r2,2054
 803947c:	10ff4015 	stw	r3,-768(r2)
         tp->t_state = TCPS_ESTABLISHED;
 8039480:	e0bffc17 	ldw	r2,-16(fp)
 8039484:	00c00104 	movi	r3,4
 8039488:	10c00215 	stw	r3,8(r2)
         soisconnected (so);
 803948c:	e13ffa17 	ldw	r4,-24(fp)
 8039490:	80367a00 	call	80367a0 <soisconnected>
         tp->t_maxseg = tcp_mss(so);
 8039494:	e13ffa17 	ldw	r4,-24(fp)
 8039498:	803ad780 	call	803ad78 <tcp_mss>
 803949c:	1007883a 	mov	r3,r2
 80394a0:	e0bffc17 	ldw	r2,-16(fp)
 80394a4:	10c00a0d 	sth	r3,40(r2)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
 80394a8:	e1bfe417 	ldw	r6,-112(fp)
 80394ac:	000b883a 	mov	r5,zero
 80394b0:	e13ffc17 	ldw	r4,-16(fp)
 80394b4:	80382380 	call	8038238 <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
 80394b8:	e0bffc17 	ldw	r2,-16(fp)
 80394bc:	10801e17 	ldw	r2,120(r2)
 80394c0:	10000626 	beq	r2,zero,80394dc <tcp_input+0xeb4>
         {
            tcp_xmit_timer(tp);
 80394c4:	e13ffc17 	ldw	r4,-16(fp)
 80394c8:	803aaf40 	call	803aaf4 <tcp_xmit_timer>
         if (tp->t_rttick) 
 80394cc:	00000306 	br	80394dc <tcp_input+0xeb4>
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
 80394d0:	e0bffc17 	ldw	r2,-16(fp)
 80394d4:	00c000c4 	movi	r3,3
 80394d8:	10c00215 	stw	r3,8(r2)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
 80394dc:	e0bff017 	ldw	r2,-64(fp)
 80394e0:	10800617 	ldw	r2,24(r2)
 80394e4:	10c00044 	addi	r3,r2,1
 80394e8:	e0bff017 	ldw	r2,-64(fp)
 80394ec:	10c00615 	stw	r3,24(r2)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
 80394f0:	e0bff017 	ldw	r2,-64(fp)
 80394f4:	1080028b 	ldhu	r2,10(r2)
 80394f8:	10bfffcc 	andi	r2,r2,65535
 80394fc:	e0fffc17 	ldw	r3,-16(fp)
 8039500:	18c01517 	ldw	r3,84(r3)
 8039504:	18802c2e 	bgeu	r3,r2,80395b8 <tcp_input+0xf90>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
 8039508:	e0bff017 	ldw	r2,-64(fp)
 803950c:	1080028b 	ldhu	r2,10(r2)
 8039510:	10ffffcc 	andi	r3,r2,65535
 8039514:	e0bffc17 	ldw	r2,-16(fp)
 8039518:	10801517 	ldw	r2,84(r2)
 803951c:	10bfffcc 	andi	r2,r2,65535
 8039520:	1885c83a 	sub	r2,r3,r2
 8039524:	e0bff915 	stw	r2,-28(fp)
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
 8039528:	e0bfe417 	ldw	r2,-112(fp)
 803952c:	10800217 	ldw	r2,8(r2)
 8039530:	10000626 	beq	r2,zero,803954c <tcp_input+0xf24>
         {
            m_adj(m, -todrop);
 8039534:	e0bff917 	ldw	r2,-28(fp)
 8039538:	0085c83a 	sub	r2,zero,r2
 803953c:	100b883a 	mov	r5,r2
 8039540:	e13fe417 	ldw	r4,-112(fp)
 8039544:	80315000 	call	8031500 <m_adj>
 8039548:	00000706 	br	8039568 <tcp_input+0xf40>
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
 803954c:	e0bfe417 	ldw	r2,-112(fp)
 8039550:	10c00617 	ldw	r3,24(r2)
 8039554:	e0bff917 	ldw	r2,-28(fp)
 8039558:	0085c83a 	sub	r2,zero,r2
 803955c:	100b883a 	mov	r5,r2
 8039560:	1809883a 	mov	r4,r3
 8039564:	80315000 	call	8031500 <m_adj>
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
 8039568:	e0bffc17 	ldw	r2,-16(fp)
 803956c:	10801517 	ldw	r2,84(r2)
 8039570:	1007883a 	mov	r3,r2
 8039574:	e0bff017 	ldw	r2,-64(fp)
 8039578:	10c0028d 	sth	r3,10(r2)
         tiflags &= ~TH_FIN;
 803957c:	e0fffb17 	ldw	r3,-20(fp)
 8039580:	00bfff84 	movi	r2,-2
 8039584:	1884703a 	and	r2,r3,r2
 8039588:	e0bffb15 	stw	r2,-20(fp)
         tcpstat.tcps_rcvpackafterwin++;
 803958c:	008201b4 	movhi	r2,2054
 8039590:	10bf6317 	ldw	r2,-628(r2)
 8039594:	10c00044 	addi	r3,r2,1
 8039598:	008201b4 	movhi	r2,2054
 803959c:	10ff6315 	stw	r3,-628(r2)
         tcpstat.tcps_rcvbyteafterwin += todrop;
 80395a0:	008201b4 	movhi	r2,2054
 80395a4:	10ff6417 	ldw	r3,-624(r2)
 80395a8:	e0bff917 	ldw	r2,-28(fp)
 80395ac:	1887883a 	add	r3,r3,r2
 80395b0:	008201b4 	movhi	r2,2054
 80395b4:	10ff6415 	stw	r3,-624(r2)
      }
      tp->snd_wl1 = ti->ti_seq - 1;
 80395b8:	e0bff017 	ldw	r2,-64(fp)
 80395bc:	10800617 	ldw	r2,24(r2)
 80395c0:	10ffffc4 	addi	r3,r2,-1
 80395c4:	e0bffc17 	ldw	r2,-16(fp)
 80395c8:	10c01115 	stw	r3,68(r2)
      tp->rcv_up = ti->ti_seq;
 80395cc:	e0bff017 	ldw	r2,-64(fp)
 80395d0:	10c00617 	ldw	r3,24(r2)
 80395d4:	e0bffc17 	ldw	r2,-16(fp)
 80395d8:	10c01715 	stw	r3,92(r2)
      goto step6;
 80395dc:	0002cd06 	br	803a114 <tcp_input+0x1aec>
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
 80395e0:	e0bffc17 	ldw	r2,-16(fp)
 80395e4:	10c01617 	ldw	r3,88(r2)
 80395e8:	e0bff017 	ldw	r2,-64(fp)
 80395ec:	10800617 	ldw	r2,24(r2)
 80395f0:	1885c83a 	sub	r2,r3,r2
 80395f4:	e0bff915 	stw	r2,-28(fp)
   if (todrop > 0) 
 80395f8:	e0bff917 	ldw	r2,-28(fp)
 80395fc:	0080890e 	bge	zero,r2,8039824 <tcp_input+0x11fc>
   {
      if (tiflags & TH_SYN) 
 8039600:	e0bffb17 	ldw	r2,-20(fp)
 8039604:	1080008c 	andi	r2,r2,2
 8039608:	10001c26 	beq	r2,zero,803967c <tcp_input+0x1054>
      {
         tiflags &= ~TH_SYN;
 803960c:	e0fffb17 	ldw	r3,-20(fp)
 8039610:	00bfff44 	movi	r2,-3
 8039614:	1884703a 	and	r2,r3,r2
 8039618:	e0bffb15 	stw	r2,-20(fp)
         ti->ti_seq++;
 803961c:	e0bff017 	ldw	r2,-64(fp)
 8039620:	10800617 	ldw	r2,24(r2)
 8039624:	10c00044 	addi	r3,r2,1
 8039628:	e0bff017 	ldw	r2,-64(fp)
 803962c:	10c00615 	stw	r3,24(r2)
         if (ti->ti_urp > 1) 
 8039630:	e0bff017 	ldw	r2,-64(fp)
 8039634:	1080098b 	ldhu	r2,38(r2)
 8039638:	10bfffcc 	andi	r2,r2,65535
 803963c:	108000b0 	cmpltui	r2,r2,2
 8039640:	1000071e 	bne	r2,zero,8039660 <tcp_input+0x1038>
            ti->ti_urp--;
 8039644:	e0bff017 	ldw	r2,-64(fp)
 8039648:	1080098b 	ldhu	r2,38(r2)
 803964c:	10bfffc4 	addi	r2,r2,-1
 8039650:	1007883a 	mov	r3,r2
 8039654:	e0bff017 	ldw	r2,-64(fp)
 8039658:	10c0098d 	sth	r3,38(r2)
 803965c:	00000406 	br	8039670 <tcp_input+0x1048>
         else
            tiflags &= ~TH_URG;
 8039660:	e0fffb17 	ldw	r3,-20(fp)
 8039664:	00bff7c4 	movi	r2,-33
 8039668:	1884703a 	and	r2,r3,r2
 803966c:	e0bffb15 	stw	r2,-20(fp)
         todrop--;
 8039670:	e0bff917 	ldw	r2,-28(fp)
 8039674:	10bfffc4 	addi	r2,r2,-1
 8039678:	e0bff915 	stw	r2,-28(fp)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 803967c:	e0bff017 	ldw	r2,-64(fp)
 8039680:	1080028b 	ldhu	r2,10(r2)
 8039684:	10ffffcc 	andi	r3,r2,65535
 8039688:	e0bff917 	ldw	r2,-28(fp)
 803968c:	18800816 	blt	r3,r2,80396b0 <tcp_input+0x1088>
          ((todrop == (int)ti->ti_len) && 
 8039690:	e0bff017 	ldw	r2,-64(fp)
 8039694:	1080028b 	ldhu	r2,10(r2)
 8039698:	10bfffcc 	andi	r2,r2,65535
      if ((todrop > (int)ti->ti_len) ||
 803969c:	e0fff917 	ldw	r3,-28(fp)
 80396a0:	1880311e 	bne	r3,r2,8039768 <tcp_input+0x1140>
          (tiflags&TH_FIN) == 0)) 
 80396a4:	e0bffb17 	ldw	r2,-20(fp)
 80396a8:	1080004c 	andi	r2,r2,1
          ((todrop == (int)ti->ti_len) && 
 80396ac:	10002e1e 	bne	r2,zero,8039768 <tcp_input+0x1140>
      {
         tcpstat.tcps_rcvduppack++;
 80396b0:	008201b4 	movhi	r2,2054
 80396b4:	10bf5d17 	ldw	r2,-652(r2)
 80396b8:	10c00044 	addi	r3,r2,1
 80396bc:	008201b4 	movhi	r2,2054
 80396c0:	10ff5d15 	stw	r3,-652(r2)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 80396c4:	008201b4 	movhi	r2,2054
 80396c8:	10ff5e17 	ldw	r3,-648(r2)
 80396cc:	e0bff017 	ldw	r2,-64(fp)
 80396d0:	1080028b 	ldhu	r2,10(r2)
 80396d4:	10bfffcc 	andi	r2,r2,65535
 80396d8:	1887883a 	add	r3,r3,r2
 80396dc:	008201b4 	movhi	r2,2054
 80396e0:	10ff5e15 	stw	r3,-648(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 80396e4:	e0bffb17 	ldw	r2,-20(fp)
 80396e8:	1080004c 	andi	r2,r2,1
 80396ec:	10000626 	beq	r2,zero,8039708 <tcp_input+0x10e0>
 80396f0:	e0bff017 	ldw	r2,-64(fp)
 80396f4:	1080028b 	ldhu	r2,10(r2)
 80396f8:	10bfffcc 	andi	r2,r2,65535
 80396fc:	10800044 	addi	r2,r2,1
 8039700:	e0fff917 	ldw	r3,-28(fp)
 8039704:	18800926 	beq	r3,r2,803972c <tcp_input+0x1104>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
 8039708:	e0bffb17 	ldw	r2,-20(fp)
 803970c:	1080010c 	andi	r2,r2,4
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 8039710:	1003df26 	beq	r2,zero,803a690 <tcp_input+0x2068>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
 8039714:	e0bff017 	ldw	r2,-64(fp)
 8039718:	10c00617 	ldw	r3,24(r2)
 803971c:	e0bffc17 	ldw	r2,-16(fp)
 8039720:	10801617 	ldw	r2,88(r2)
 8039724:	10bfffc4 	addi	r2,r2,-1
 8039728:	1883d91e 	bne	r3,r2,803a690 <tcp_input+0x2068>
         {
            todrop = ti->ti_len;
 803972c:	e0bff017 	ldw	r2,-64(fp)
 8039730:	1080028b 	ldhu	r2,10(r2)
 8039734:	10bfffcc 	andi	r2,r2,65535
 8039738:	e0bff915 	stw	r2,-28(fp)
            tiflags &= ~TH_FIN;
 803973c:	e0fffb17 	ldw	r3,-20(fp)
 8039740:	00bfff84 	movi	r2,-2
 8039744:	1884703a 	and	r2,r3,r2
 8039748:	e0bffb15 	stw	r2,-20(fp)
            tp->t_flags |= TF_ACKNOW;
 803974c:	e0bffc17 	ldw	r2,-16(fp)
 8039750:	10800b0b 	ldhu	r2,44(r2)
 8039754:	10800054 	ori	r2,r2,1
 8039758:	1007883a 	mov	r3,r2
 803975c:	e0bffc17 	ldw	r2,-16(fp)
 8039760:	10c00b0d 	sth	r3,44(r2)
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 8039764:	00000b06 	br	8039794 <tcp_input+0x116c>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 8039768:	008201b4 	movhi	r2,2054
 803976c:	10bf5f17 	ldw	r2,-644(r2)
 8039770:	10c00044 	addi	r3,r2,1
 8039774:	008201b4 	movhi	r2,2054
 8039778:	10ff5f15 	stw	r3,-644(r2)
         tcpstat.tcps_rcvpartdupbyte += todrop;
 803977c:	008201b4 	movhi	r2,2054
 8039780:	10ff6017 	ldw	r3,-640(r2)
 8039784:	e0bff917 	ldw	r2,-28(fp)
 8039788:	1887883a 	add	r3,r3,r2
 803978c:	008201b4 	movhi	r2,2054
 8039790:	10ff6015 	stw	r3,-640(r2)
      }
      m_adj(m, todrop);
 8039794:	e17ff917 	ldw	r5,-28(fp)
 8039798:	e13fe417 	ldw	r4,-112(fp)
 803979c:	80315000 	call	8031500 <m_adj>
      ti->ti_seq += todrop;
 80397a0:	e0bff017 	ldw	r2,-64(fp)
 80397a4:	10c00617 	ldw	r3,24(r2)
 80397a8:	e0bff917 	ldw	r2,-28(fp)
 80397ac:	1887883a 	add	r3,r3,r2
 80397b0:	e0bff017 	ldw	r2,-64(fp)
 80397b4:	10c00615 	stw	r3,24(r2)
      ti->ti_len -= (u_short)todrop;
 80397b8:	e0bff017 	ldw	r2,-64(fp)
 80397bc:	1080028b 	ldhu	r2,10(r2)
 80397c0:	e0fff917 	ldw	r3,-28(fp)
 80397c4:	10c5c83a 	sub	r2,r2,r3
 80397c8:	1007883a 	mov	r3,r2
 80397cc:	e0bff017 	ldw	r2,-64(fp)
 80397d0:	10c0028d 	sth	r3,10(r2)
      if (ti->ti_urp > (u_short)todrop)
 80397d4:	e0bff017 	ldw	r2,-64(fp)
 80397d8:	1080098b 	ldhu	r2,38(r2)
 80397dc:	e0fff917 	ldw	r3,-28(fp)
 80397e0:	10bfffcc 	andi	r2,r2,65535
 80397e4:	18ffffcc 	andi	r3,r3,65535
 80397e8:	1880082e 	bgeu	r3,r2,803980c <tcp_input+0x11e4>
         ti->ti_urp -= (u_short)todrop;
 80397ec:	e0bff017 	ldw	r2,-64(fp)
 80397f0:	1080098b 	ldhu	r2,38(r2)
 80397f4:	e0fff917 	ldw	r3,-28(fp)
 80397f8:	10c5c83a 	sub	r2,r2,r3
 80397fc:	1007883a 	mov	r3,r2
 8039800:	e0bff017 	ldw	r2,-64(fp)
 8039804:	10c0098d 	sth	r3,38(r2)
 8039808:	00000606 	br	8039824 <tcp_input+0x11fc>
      else 
      {
         tiflags &= ~TH_URG;
 803980c:	e0fffb17 	ldw	r3,-20(fp)
 8039810:	00bff7c4 	movi	r2,-33
 8039814:	1884703a 	and	r2,r3,r2
 8039818:	e0bffb15 	stw	r2,-20(fp)
         ti->ti_urp = 0;
 803981c:	e0bff017 	ldw	r2,-64(fp)
 8039820:	1000098d 	sth	zero,38(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
 8039824:	e0bffa17 	ldw	r2,-24(fp)
 8039828:	1080088b 	ldhu	r2,34(r2)
 803982c:	10bfffcc 	andi	r2,r2,65535
 8039830:	1080004c 	andi	r2,r2,1
 8039834:	10001326 	beq	r2,zero,8039884 <tcp_input+0x125c>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
 8039838:	e0bffc17 	ldw	r2,-16(fp)
 803983c:	10800217 	ldw	r2,8(r2)
   if ((so->so_state & SS_NOFDREF) &&
 8039840:	10800190 	cmplti	r2,r2,6
 8039844:	10000f1e 	bne	r2,zero,8039884 <tcp_input+0x125c>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
 8039848:	e0bff017 	ldw	r2,-64(fp)
 803984c:	1080028b 	ldhu	r2,10(r2)
 8039850:	10bfffcc 	andi	r2,r2,65535
 8039854:	10000b26 	beq	r2,zero,8039884 <tcp_input+0x125c>
   {
      tp = tcp_close(tp);
 8039858:	e13ffc17 	ldw	r4,-16(fp)
 803985c:	803c6bc0 	call	803c6bc <tcp_close>
 8039860:	e0bffc15 	stw	r2,-16(fp)
      tcpstat.tcps_rcvafterclose++;
 8039864:	008201b4 	movhi	r2,2054
 8039868:	10bf6517 	ldw	r2,-620(r2)
 803986c:	10c00044 	addi	r3,r2,1
 8039870:	008201b4 	movhi	r2,2054
 8039874:	10ff6515 	stw	r3,-620(r2)
      GOTO_DROPWITHRESET;
 8039878:	00810444 	movi	r2,1041
 803987c:	d0a0ad15 	stw	r2,-32076(gp)
 8039880:	00039706 	br	803a6e0 <tcp_input+0x20b8>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
 8039884:	e0bff017 	ldw	r2,-64(fp)
 8039888:	10c00617 	ldw	r3,24(r2)
 803988c:	e0bff017 	ldw	r2,-64(fp)
 8039890:	1080028b 	ldhu	r2,10(r2)
 8039894:	10bfffcc 	andi	r2,r2,65535
 8039898:	10a0001c 	xori	r2,r2,32768
 803989c:	10a00004 	addi	r2,r2,-32768
 80398a0:	1887883a 	add	r3,r3,r2
 80398a4:	e0bffc17 	ldw	r2,-16(fp)
 80398a8:	11001617 	ldw	r4,88(r2)
 80398ac:	e0bffc17 	ldw	r2,-16(fp)
 80398b0:	10801517 	ldw	r2,84(r2)
 80398b4:	2085883a 	add	r2,r4,r2
 80398b8:	1885c83a 	sub	r2,r3,r2
 80398bc:	e0bff915 	stw	r2,-28(fp)
   if (todrop > 0) 
 80398c0:	e0bff917 	ldw	r2,-28(fp)
 80398c4:	0080610e 	bge	zero,r2,8039a4c <tcp_input+0x1424>
   {
      tcpstat.tcps_rcvpackafterwin++;
 80398c8:	008201b4 	movhi	r2,2054
 80398cc:	10bf6317 	ldw	r2,-628(r2)
 80398d0:	10c00044 	addi	r3,r2,1
 80398d4:	008201b4 	movhi	r2,2054
 80398d8:	10ff6315 	stw	r3,-628(r2)
      if (todrop >= (int)ti->ti_len) 
 80398dc:	e0bff017 	ldw	r2,-64(fp)
 80398e0:	1080028b 	ldhu	r2,10(r2)
 80398e4:	10bfffcc 	andi	r2,r2,65535
 80398e8:	e0fff917 	ldw	r3,-28(fp)
 80398ec:	18803616 	blt	r3,r2,80399c8 <tcp_input+0x13a0>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
 80398f0:	008201b4 	movhi	r2,2054
 80398f4:	10ff6417 	ldw	r3,-624(r2)
 80398f8:	e0bff017 	ldw	r2,-64(fp)
 80398fc:	1080028b 	ldhu	r2,10(r2)
 8039900:	10bfffcc 	andi	r2,r2,65535
 8039904:	1887883a 	add	r3,r3,r2
 8039908:	008201b4 	movhi	r2,2054
 803990c:	10ff6415 	stw	r3,-624(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
 8039910:	e0bffb17 	ldw	r2,-20(fp)
 8039914:	1080008c 	andi	r2,r2,2
 8039918:	10001726 	beq	r2,zero,8039978 <tcp_input+0x1350>
             tp->t_state == TCPS_TIME_WAIT &&
 803991c:	e0bffc17 	ldw	r2,-16(fp)
 8039920:	10800217 	ldw	r2,8(r2)
         if (tiflags & TH_SYN &&
 8039924:	10800298 	cmpnei	r2,r2,10
 8039928:	1000131e 	bne	r2,zero,8039978 <tcp_input+0x1350>
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
 803992c:	e0bff017 	ldw	r2,-64(fp)
 8039930:	10c00617 	ldw	r3,24(r2)
 8039934:	e0bffc17 	ldw	r2,-16(fp)
 8039938:	10801617 	ldw	r2,88(r2)
 803993c:	1885c83a 	sub	r2,r3,r2
             tp->t_state == TCPS_TIME_WAIT &&
 8039940:	00800d0e 	bge	zero,r2,8039978 <tcp_input+0x1350>
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
 8039944:	e0bffc17 	ldw	r2,-16(fp)
 8039948:	10c01617 	ldw	r3,88(r2)
 803994c:	008000b4 	movhi	r2,2
 8039950:	10bd3fc4 	addi	r2,r2,-2817
 8039954:	1885883a 	add	r2,r3,r2
 8039958:	e0bff515 	stw	r2,-44(fp)
            if (iss & 0xff000000)
 803995c:	e0bff517 	ldw	r2,-44(fp)
 8039960:	10bfc02c 	andhi	r2,r2,65280
 8039964:	10000126 	beq	r2,zero,803996c <tcp_input+0x1344>
            {
               iss = 0L;
 8039968:	e03ff515 	stw	zero,-44(fp)
            }
            (void) tcp_close(tp);
 803996c:	e13ffc17 	ldw	r4,-16(fp)
 8039970:	803c6bc0 	call	803c6bc <tcp_close>
            goto findpcb;
 8039974:	003bf806 	br	8038958 <tcp_input+0x330>
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
 8039978:	e0bffc17 	ldw	r2,-16(fp)
 803997c:	10801517 	ldw	r2,84(r2)
 8039980:	1003451e 	bne	r2,zero,803a698 <tcp_input+0x2070>
 8039984:	e0bff017 	ldw	r2,-64(fp)
 8039988:	10c00617 	ldw	r3,24(r2)
 803998c:	e0bffc17 	ldw	r2,-16(fp)
 8039990:	10801617 	ldw	r2,88(r2)
 8039994:	1883401e 	bne	r3,r2,803a698 <tcp_input+0x2070>
         {
            tp->t_flags |= TF_ACKNOW;
 8039998:	e0bffc17 	ldw	r2,-16(fp)
 803999c:	10800b0b 	ldhu	r2,44(r2)
 80399a0:	10800054 	ori	r2,r2,1
 80399a4:	1007883a 	mov	r3,r2
 80399a8:	e0bffc17 	ldw	r2,-16(fp)
 80399ac:	10c00b0d 	sth	r3,44(r2)
            tcpstat.tcps_rcvwinprobe++;
 80399b0:	008201b4 	movhi	r2,2054
 80399b4:	10bf6617 	ldw	r2,-616(r2)
 80399b8:	10c00044 	addi	r3,r2,1
 80399bc:	008201b4 	movhi	r2,2054
 80399c0:	10ff6615 	stw	r3,-616(r2)
 80399c4:	00000606 	br	80399e0 <tcp_input+0x13b8>
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
 80399c8:	008201b4 	movhi	r2,2054
 80399cc:	10ff6417 	ldw	r3,-624(r2)
 80399d0:	e0bff917 	ldw	r2,-28(fp)
 80399d4:	1887883a 	add	r3,r3,r2
 80399d8:	008201b4 	movhi	r2,2054
 80399dc:	10ff6415 	stw	r3,-624(r2)
      /* XXX work around m_adj bug */
      if (m->m_len) 
 80399e0:	e0bfe417 	ldw	r2,-112(fp)
 80399e4:	10800217 	ldw	r2,8(r2)
 80399e8:	10000626 	beq	r2,zero,8039a04 <tcp_input+0x13dc>
      {
         m_adj(m, -todrop);
 80399ec:	e0bff917 	ldw	r2,-28(fp)
 80399f0:	0085c83a 	sub	r2,zero,r2
 80399f4:	100b883a 	mov	r5,r2
 80399f8:	e13fe417 	ldw	r4,-112(fp)
 80399fc:	80315000 	call	8031500 <m_adj>
 8039a00:	00000706 	br	8039a20 <tcp_input+0x13f8>
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
 8039a04:	e0bfe417 	ldw	r2,-112(fp)
 8039a08:	10c00617 	ldw	r3,24(r2)
 8039a0c:	e0bff917 	ldw	r2,-28(fp)
 8039a10:	0085c83a 	sub	r2,zero,r2
 8039a14:	100b883a 	mov	r5,r2
 8039a18:	1809883a 	mov	r4,r3
 8039a1c:	80315000 	call	8031500 <m_adj>
      }
      ti->ti_len -= (u_short)todrop;
 8039a20:	e0bff017 	ldw	r2,-64(fp)
 8039a24:	1080028b 	ldhu	r2,10(r2)
 8039a28:	e0fff917 	ldw	r3,-28(fp)
 8039a2c:	10c5c83a 	sub	r2,r2,r3
 8039a30:	1007883a 	mov	r3,r2
 8039a34:	e0bff017 	ldw	r2,-64(fp)
 8039a38:	10c0028d 	sth	r3,10(r2)
      tiflags &= ~(TH_PUSH|TH_FIN);
 8039a3c:	e0fffb17 	ldw	r3,-20(fp)
 8039a40:	00bffd84 	movi	r2,-10
 8039a44:	1884703a 	and	r2,r3,r2
 8039a48:	e0bffb15 	stw	r2,-20(fp)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
 8039a4c:	e0bffb17 	ldw	r2,-20(fp)
 8039a50:	1080010c 	andi	r2,r2,4
 8039a54:	10002f26 	beq	r2,zero,8039b14 <tcp_input+0x14ec>
   {
      switch (tp->t_state) 
 8039a58:	e0bffc17 	ldw	r2,-16(fp)
 8039a5c:	10800217 	ldw	r2,8(r2)
 8039a60:	10bfff44 	addi	r2,r2,-3
 8039a64:	10c00228 	cmpgeui	r3,r2,8
 8039a68:	18002a1e 	bne	r3,zero,8039b14 <tcp_input+0x14ec>
 8039a6c:	100690ba 	slli	r3,r2,2
 8039a70:	00820134 	movhi	r2,2052
 8039a74:	1885883a 	add	r2,r3,r2
 8039a78:	10a6a017 	ldw	r2,-25984(r2)
 8039a7c:	1000683a 	jmp	r2
 8039a80:	08039aa0 	cmpeqi	zero,at,3690
 8039a84:	08039ab0 	cmpltui	zero,at,3690
 8039a88:	08039ac4 	addi	zero,at,3691
 8039a8c:	08039ac4 	addi	zero,at,3691
 8039a90:	08039b00 	call	8039b0 <OSCtxSw_SWITCH_PC+0x803970>
 8039a94:	08039b00 	call	8039b0 <OSCtxSw_SWITCH_PC+0x803970>
 8039a98:	08039ac4 	addi	zero,at,3691
 8039a9c:	08039b00 	call	8039b0 <OSCtxSw_SWITCH_PC+0x803970>
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
 8039aa0:	e0bffa17 	ldw	r2,-24(fp)
 8039aa4:	00c01bc4 	movi	r3,111
 8039aa8:	10c00615 	stw	r3,24(r2)
         goto close;
 8039aac:	00000806 	br	8039ad0 <tcp_input+0x14a8>
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 8039ab0:	008201b4 	movhi	r2,2054
 8039ab4:	10bf1717 	ldw	r2,-932(r2)
 8039ab8:	10c00044 	addi	r3,r2,1
 8039abc:	008201b4 	movhi	r2,2054
 8039ac0:	10ff1715 	stw	r3,-932(r2)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
 8039ac4:	e0bffa17 	ldw	r2,-24(fp)
 8039ac8:	00c01a04 	movi	r3,104
 8039acc:	10c00615 	stw	r3,24(r2)
         close:
         tp->t_state = TCPS_CLOSED;
 8039ad0:	e0bffc17 	ldw	r2,-16(fp)
 8039ad4:	10000215 	stw	zero,8(r2)
         tcpstat.tcps_drops++;
 8039ad8:	008201b4 	movhi	r2,2054
 8039adc:	10bf4117 	ldw	r2,-764(r2)
 8039ae0:	10c00044 	addi	r3,r2,1
 8039ae4:	008201b4 	movhi	r2,2054
 8039ae8:	10ff4115 	stw	r3,-764(r2)
         SETTP(tp, tcp_close(tp));
 8039aec:	e13ffc17 	ldw	r4,-16(fp)
 8039af0:	803c6bc0 	call	803c6bc <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
 8039af4:	00812204 	movi	r2,1160
 8039af8:	d0a0ad15 	stw	r2,-32076(gp)
 8039afc:	00033706 	br	803a7dc <tcp_input+0x21b4>
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
 8039b00:	e13ffc17 	ldw	r4,-16(fp)
 8039b04:	803c6bc0 	call	803c6bc <tcp_close>
         GOTO_DROP;
 8039b08:	00812384 	movi	r2,1166
 8039b0c:	d0a0ad15 	stw	r2,-32076(gp)
 8039b10:	00033206 	br	803a7dc <tcp_input+0x21b4>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
 8039b14:	e0bffb17 	ldw	r2,-20(fp)
 8039b18:	1080008c 	andi	r2,r2,2
 8039b1c:	10000726 	beq	r2,zero,8039b3c <tcp_input+0x1514>
   {
      tp = tcp_drop(tp, ECONNRESET);
 8039b20:	01401a04 	movi	r5,104
 8039b24:	e13ffc17 	ldw	r4,-16(fp)
 8039b28:	803c6200 	call	803c620 <tcp_drop>
 8039b2c:	e0bffc15 	stw	r2,-16(fp)
      GOTO_DROPWITHRESET;
 8039b30:	00812b04 	movi	r2,1196
 8039b34:	d0a0ad15 	stw	r2,-32076(gp)
 8039b38:	0002e906 	br	803a6e0 <tcp_input+0x20b8>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
 8039b3c:	e0bffb17 	ldw	r2,-20(fp)
 8039b40:	1080040c 	andi	r2,r2,16
 8039b44:	1000031e 	bne	r2,zero,8039b54 <tcp_input+0x152c>
      GOTO_DROP;
 8039b48:	00812d04 	movi	r2,1204
 8039b4c:	d0a0ad15 	stw	r2,-32076(gp)
 8039b50:	00032206 	br	803a7dc <tcp_input+0x21b4>

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
 8039b54:	e0bffc17 	ldw	r2,-16(fp)
 8039b58:	10800217 	ldw	r2,8(r2)
 8039b5c:	10c000e0 	cmpeqi	r3,r2,3
 8039b60:	1800061e 	bne	r3,zero,8039b7c <tcp_input+0x1554>
 8039b64:	10c000d0 	cmplti	r3,r2,3
 8039b68:	18016a1e 	bne	r3,zero,803a114 <tcp_input+0x1aec>
 8039b6c:	10bfff04 	addi	r2,r2,-4
 8039b70:	108001e8 	cmpgeui	r2,r2,7
 8039b74:	1001671e 	bne	r2,zero,803a114 <tcp_input+0x1aec>
 8039b78:	00002c06 	br	8039c2c <tcp_input+0x1604>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 8039b7c:	e0bffc17 	ldw	r2,-16(fp)
 8039b80:	10c00e17 	ldw	r3,56(r2)
 8039b84:	e0bff017 	ldw	r2,-64(fp)
 8039b88:	10800717 	ldw	r2,28(r2)
 8039b8c:	1885c83a 	sub	r2,r3,r2
 8039b90:	00800616 	blt	zero,r2,8039bac <tcp_input+0x1584>
          SEQ_GT(ti->ti_ack, tp->snd_max))
 8039b94:	e0bff017 	ldw	r2,-64(fp)
 8039b98:	10c00717 	ldw	r3,28(r2)
 8039b9c:	e0bffc17 	ldw	r2,-16(fp)
 8039ba0:	10801a17 	ldw	r2,104(r2)
 8039ba4:	1885c83a 	sub	r2,r3,r2
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 8039ba8:	0080080e 	bge	zero,r2,8039bcc <tcp_input+0x15a4>
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 8039bac:	008201b4 	movhi	r2,2054
 8039bb0:	10bf1717 	ldw	r2,-932(r2)
 8039bb4:	10c00044 	addi	r3,r2,1
 8039bb8:	008201b4 	movhi	r2,2054
 8039bbc:	10ff1715 	stw	r3,-932(r2)
         GOTO_DROPWITHRESET;
 8039bc0:	00813184 	movi	r2,1222
 8039bc4:	d0a0ad15 	stw	r2,-32076(gp)
 8039bc8:	0002c506 	br	803a6e0 <tcp_input+0x20b8>
      }
      tcpstat.tcps_connects++;
 8039bcc:	008201b4 	movhi	r2,2054
 8039bd0:	10bf4017 	ldw	r2,-768(r2)
 8039bd4:	10c00044 	addi	r3,r2,1
 8039bd8:	008201b4 	movhi	r2,2054
 8039bdc:	10ff4015 	stw	r3,-768(r2)
      tp->t_state = TCPS_ESTABLISHED;
 8039be0:	e0bffc17 	ldw	r2,-16(fp)
 8039be4:	00c00104 	movi	r3,4
 8039be8:	10c00215 	stw	r3,8(r2)
      soisconnected(so);
 8039bec:	e13ffa17 	ldw	r4,-24(fp)
 8039bf0:	80367a00 	call	80367a0 <soisconnected>
      tp->t_maxseg = tcp_mss(so);
 8039bf4:	e13ffa17 	ldw	r4,-24(fp)
 8039bf8:	803ad780 	call	803ad78 <tcp_mss>
 8039bfc:	1007883a 	mov	r3,r2
 8039c00:	e0bffc17 	ldw	r2,-16(fp)
 8039c04:	10c00a0d 	sth	r3,40(r2)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
 8039c08:	e1bfe417 	ldw	r6,-112(fp)
 8039c0c:	000b883a 	mov	r5,zero
 8039c10:	e13ffc17 	ldw	r4,-16(fp)
 8039c14:	80382380 	call	8038238 <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
 8039c18:	e0bff017 	ldw	r2,-64(fp)
 8039c1c:	10800617 	ldw	r2,24(r2)
 8039c20:	10ffffc4 	addi	r3,r2,-1
 8039c24:	e0bffc17 	ldw	r2,-16(fp)
 8039c28:	10c01115 	stw	r3,68(r2)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
 8039c2c:	e0bff017 	ldw	r2,-64(fp)
 8039c30:	10c00717 	ldw	r3,28(r2)
 8039c34:	e0bffc17 	ldw	r2,-16(fp)
 8039c38:	10800e17 	ldw	r2,56(r2)
 8039c3c:	1885c83a 	sub	r2,r3,r2
 8039c40:	00806116 	blt	zero,r2,8039dc8 <tcp_input+0x17a0>
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
 8039c44:	e0bff017 	ldw	r2,-64(fp)
 8039c48:	1080028b 	ldhu	r2,10(r2)
 8039c4c:	10bfffcc 	andi	r2,r2,65535
 8039c50:	1000581e 	bne	r2,zero,8039db4 <tcp_input+0x178c>
 8039c54:	e0bffc17 	ldw	r2,-16(fp)
 8039c58:	10801417 	ldw	r2,80(r2)
 8039c5c:	e0ffed17 	ldw	r3,-76(fp)
 8039c60:	1880541e 	bne	r3,r2,8039db4 <tcp_input+0x178c>
         {
            tcpstat.tcps_rcvdupack++;
 8039c64:	008201b4 	movhi	r2,2054
 8039c68:	10bf6717 	ldw	r2,-612(r2)
 8039c6c:	10c00044 	addi	r3,r2,1
 8039c70:	008201b4 	movhi	r2,2054
 8039c74:	10ff6715 	stw	r3,-612(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8039c78:	e0bffc17 	ldw	r2,-16(fp)
 8039c7c:	10800317 	ldw	r2,12(r2)
 8039c80:	10000526 	beq	r2,zero,8039c98 <tcp_input+0x1670>
                ti->ti_ack != tp->snd_una)
 8039c84:	e0bff017 	ldw	r2,-64(fp)
 8039c88:	10c00717 	ldw	r3,28(r2)
 8039c8c:	e0bffc17 	ldw	r2,-16(fp)
 8039c90:	10800e17 	ldw	r2,56(r2)
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8039c94:	18800326 	beq	r3,r2,8039ca4 <tcp_input+0x167c>
            {
               tp->t_dupacks = 0;
 8039c98:	e0bffc17 	ldw	r2,-16(fp)
 8039c9c:	10000915 	stw	zero,36(r2)
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8039ca0:	00004706 	br	8039dc0 <tcp_input+0x1798>
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
 8039ca4:	e0bffc17 	ldw	r2,-16(fp)
 8039ca8:	10800917 	ldw	r2,36(r2)
 8039cac:	10c00044 	addi	r3,r2,1
 8039cb0:	e0bffc17 	ldw	r2,-16(fp)
 8039cb4:	10c00915 	stw	r3,36(r2)
 8039cb8:	e0bffc17 	ldw	r2,-16(fp)
 8039cbc:	10c00917 	ldw	r3,36(r2)
 8039cc0:	d0a03883 	ldbu	r2,-32542(gp)
 8039cc4:	10803fcc 	andi	r2,r2,255
 8039cc8:	1080201c 	xori	r2,r2,128
 8039ccc:	10bfe004 	addi	r2,r2,-128
 8039cd0:	18803b1e 	bne	r3,r2,8039dc0 <tcp_input+0x1798>
            {
               tcp_seq onxt = tp->snd_nxt;
 8039cd4:	e0bffc17 	ldw	r2,-16(fp)
 8039cd8:	10800f17 	ldw	r2,60(r2)
 8039cdc:	e0bfe715 	stw	r2,-100(fp)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
 8039ce0:	e0bffc17 	ldw	r2,-16(fp)
 8039ce4:	11001417 	ldw	r4,80(r2)
 8039ce8:	e0bffc17 	ldw	r2,-16(fp)
 8039cec:	10c01b17 	ldw	r3,108(r2)
 8039cf0:	2005883a 	mov	r2,r4
 8039cf4:	1880012e 	bgeu	r3,r2,8039cfc <tcp_input+0x16d4>
 8039cf8:	1805883a 	mov	r2,r3
 8039cfc:	1006d07a 	srli	r3,r2,1
               tp->t_maxseg;
 8039d00:	e0bffc17 	ldw	r2,-16(fp)
 8039d04:	10800a0b 	ldhu	r2,40(r2)
 8039d08:	10bfffcc 	andi	r2,r2,65535
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
 8039d0c:	100b883a 	mov	r5,r2
 8039d10:	1809883a 	mov	r4,r3
 8039d14:	8011fdc0 	call	8011fdc <__udivsi3>
               u_short  win   =
 8039d18:	e0bff28d 	sth	r2,-54(fp)

               if (win < 2)
 8039d1c:	e0bff28b 	ldhu	r2,-54(fp)
 8039d20:	108000a8 	cmpgeui	r2,r2,2
 8039d24:	1000021e 	bne	r2,zero,8039d30 <tcp_input+0x1708>
                  win = 2;
 8039d28:	00800084 	movi	r2,2
 8039d2c:	e0bff28d 	sth	r2,-54(fp)
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
 8039d30:	e0bffc17 	ldw	r2,-16(fp)
 8039d34:	10800a0b 	ldhu	r2,40(r2)
 8039d38:	e0fff28b 	ldhu	r3,-54(fp)
 8039d3c:	1885383a 	mul	r2,r3,r2
 8039d40:	10ffffcc 	andi	r3,r2,65535
 8039d44:	e0bffc17 	ldw	r2,-16(fp)
 8039d48:	10c01c15 	stw	r3,112(r2)

               tp->t_timer[TCPT_REXMT] = 0;
 8039d4c:	e0bffc17 	ldw	r2,-16(fp)
 8039d50:	10000315 	stw	zero,12(r2)
               tp->t_rttick = 0;
 8039d54:	e0bffc17 	ldw	r2,-16(fp)
 8039d58:	10001e15 	stw	zero,120(r2)
               tp->snd_nxt = ti->ti_ack;
 8039d5c:	e0bff017 	ldw	r2,-64(fp)
 8039d60:	10c00717 	ldw	r3,28(r2)
 8039d64:	e0bffc17 	ldw	r2,-16(fp)
 8039d68:	10c00f15 	stw	r3,60(r2)
               tp->snd_cwnd = tp->t_maxseg;
 8039d6c:	e0bffc17 	ldw	r2,-16(fp)
 8039d70:	10800a0b 	ldhu	r2,40(r2)
 8039d74:	10ffffcc 	andi	r3,r2,65535
 8039d78:	e0bffc17 	ldw	r2,-16(fp)
 8039d7c:	10c01b15 	stw	r3,108(r2)
               (void) tcp_output(tp);
 8039d80:	e13ffc17 	ldw	r4,-16(fp)
 8039d84:	803ae700 	call	803ae70 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
 8039d88:	e0bffc17 	ldw	r2,-16(fp)
 8039d8c:	10800f17 	ldw	r2,60(r2)
 8039d90:	e0ffe717 	ldw	r3,-100(fp)
 8039d94:	1885c83a 	sub	r2,r3,r2
 8039d98:	0080030e 	bge	zero,r2,8039da8 <tcp_input+0x1780>
                  tp->snd_nxt = onxt;
 8039d9c:	e0bffc17 	ldw	r2,-16(fp)
 8039da0:	e0ffe717 	ldw	r3,-100(fp)
 8039da4:	10c00f15 	stw	r3,60(r2)
               GOTO_DROP;
 8039da8:	00814544 	movi	r2,1301
 8039dac:	d0a0ad15 	stw	r2,-32076(gp)
 8039db0:	00028a06 	br	803a7dc <tcp_input+0x21b4>
            }
         } else
            tp->t_dupacks = 0;
 8039db4:	e0bffc17 	ldw	r2,-16(fp)
 8039db8:	10000915 	stw	zero,36(r2)
         break;
 8039dbc:	0000d506 	br	803a114 <tcp_input+0x1aec>
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8039dc0:	0001883a 	nop
         break;
 8039dc4:	0000d306 	br	803a114 <tcp_input+0x1aec>
      }
      tp->t_dupacks = 0;
 8039dc8:	e0bffc17 	ldw	r2,-16(fp)
 8039dcc:	10000915 	stw	zero,36(r2)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
 8039dd0:	e0bff017 	ldw	r2,-64(fp)
 8039dd4:	10c00717 	ldw	r3,28(r2)
 8039dd8:	e0bffc17 	ldw	r2,-16(fp)
 8039ddc:	10801a17 	ldw	r2,104(r2)
 8039de0:	1885c83a 	sub	r2,r3,r2
 8039de4:	0080060e 	bge	zero,r2,8039e00 <tcp_input+0x17d8>
      {
         tcpstat.tcps_rcvacktoomuch++;
 8039de8:	008201b4 	movhi	r2,2054
 8039dec:	10bf6817 	ldw	r2,-608(r2)
 8039df0:	10c00044 	addi	r3,r2,1
 8039df4:	008201b4 	movhi	r2,2054
 8039df8:	10ff6815 	stw	r3,-608(r2)
         goto dropafterack;
 8039dfc:	00022706 	br	803a69c <tcp_input+0x2074>
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
 8039e00:	e0bff017 	ldw	r2,-64(fp)
 8039e04:	10c00717 	ldw	r3,28(r2)
 8039e08:	e0bffc17 	ldw	r2,-16(fp)
 8039e0c:	10800e17 	ldw	r2,56(r2)
 8039e10:	1885c83a 	sub	r2,r3,r2
 8039e14:	e0bfec15 	stw	r2,-80(fp)
      tcpstat.tcps_rcvackpack++;
 8039e18:	008201b4 	movhi	r2,2054
 8039e1c:	10bf6917 	ldw	r2,-604(r2)
 8039e20:	10c00044 	addi	r3,r2,1
 8039e24:	008201b4 	movhi	r2,2054
 8039e28:	10ff6915 	stw	r3,-604(r2)
      tcpstat.tcps_rcvackbyte += acked;
 8039e2c:	008201b4 	movhi	r2,2054
 8039e30:	10ff6a17 	ldw	r3,-600(r2)
 8039e34:	e0bfec17 	ldw	r2,-80(fp)
 8039e38:	1887883a 	add	r3,r3,r2
 8039e3c:	008201b4 	movhi	r2,2054
 8039e40:	10ff6a15 	stw	r3,-600(r2)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
 8039e44:	e0bffc17 	ldw	r2,-16(fp)
 8039e48:	10801e17 	ldw	r2,120(r2)
 8039e4c:	10000826 	beq	r2,zero,8039e70 <tcp_input+0x1848>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
 8039e50:	e0bff017 	ldw	r2,-64(fp)
 8039e54:	10c00717 	ldw	r3,28(r2)
 8039e58:	e0bffc17 	ldw	r2,-16(fp)
 8039e5c:	10801f17 	ldw	r2,124(r2)
 8039e60:	1885c83a 	sub	r2,r3,r2
      if((tp->t_rttick) && 
 8039e64:	0080020e 	bge	zero,r2,8039e70 <tcp_input+0x1848>
         tcp_xmit_timer(tp);
 8039e68:	e13ffc17 	ldw	r4,-16(fp)
 8039e6c:	803aaf40 	call	803aaf4 <tcp_xmit_timer>
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
 8039e70:	e0bff017 	ldw	r2,-64(fp)
 8039e74:	10c00717 	ldw	r3,28(r2)
 8039e78:	e0bffc17 	ldw	r2,-16(fp)
 8039e7c:	10801a17 	ldw	r2,104(r2)
 8039e80:	1880051e 	bne	r3,r2,8039e98 <tcp_input+0x1870>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 8039e84:	e0bffc17 	ldw	r2,-16(fp)
 8039e88:	10000315 	stw	zero,12(r2)
         needoutput = 1;
 8039e8c:	00800044 	movi	r2,1
 8039e90:	e0bff715 	stw	r2,-36(fp)
 8039e94:	00000706 	br	8039eb4 <tcp_input+0x188c>
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
 8039e98:	e0bffc17 	ldw	r2,-16(fp)
 8039e9c:	10800417 	ldw	r2,16(r2)
 8039ea0:	1000041e 	bne	r2,zero,8039eb4 <tcp_input+0x188c>
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 8039ea4:	e0bffc17 	ldw	r2,-16(fp)
 8039ea8:	10c00817 	ldw	r3,32(r2)
 8039eac:	e0bffc17 	ldw	r2,-16(fp)
 8039eb0:	10c00315 	stw	r3,12(r2)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
 8039eb4:	e0bffc17 	ldw	r2,-16(fp)
 8039eb8:	10801b17 	ldw	r2,108(r2)
 8039ebc:	e0bfe815 	stw	r2,-96(fp)
         u_short  incr  =  tp->t_maxseg;
 8039ec0:	e0bffc17 	ldw	r2,-16(fp)
 8039ec4:	10800a0b 	ldhu	r2,40(r2)
 8039ec8:	e0bff20d 	sth	r2,-56(fp)

         if (cw > tp->snd_ssthresh)
 8039ecc:	e0bffc17 	ldw	r2,-16(fp)
 8039ed0:	10c01c17 	ldw	r3,112(r2)
 8039ed4:	e0bfe817 	ldw	r2,-96(fp)
 8039ed8:	18800a2e 	bgeu	r3,r2,8039f04 <tcp_input+0x18dc>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
 8039edc:	e0fff20b 	ldhu	r3,-56(fp)
 8039ee0:	e0bff20b 	ldhu	r2,-56(fp)
 8039ee4:	1885383a 	mul	r2,r3,r2
 8039ee8:	e17fe817 	ldw	r5,-96(fp)
 8039eec:	1009883a 	mov	r4,r2
 8039ef0:	8011fdc0 	call	8011fdc <__udivsi3>
 8039ef4:	10c00428 	cmpgeui	r3,r2,16
 8039ef8:	1800011e 	bne	r3,zero,8039f00 <tcp_input+0x18d8>
 8039efc:	00800404 	movi	r2,16
 8039f00:	e0bff20d 	sth	r2,-56(fp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
 8039f04:	e0fff20b 	ldhu	r3,-56(fp)
 8039f08:	e0bfe817 	ldw	r2,-96(fp)
 8039f0c:	1885883a 	add	r2,r3,r2
 8039f10:	10d80070 	cmpltui	r3,r2,24577
 8039f14:	1800011e 	bne	r3,zero,8039f1c <tcp_input+0x18f4>
 8039f18:	00980004 	movi	r2,24576
 8039f1c:	e0fffc17 	ldw	r3,-16(fp)
 8039f20:	18801b15 	stw	r2,108(r3)
      }
      if (acked > (int)so->so_snd.sb_cc) 
 8039f24:	e0bffa17 	ldw	r2,-24(fp)
 8039f28:	10801217 	ldw	r2,72(r2)
 8039f2c:	1007883a 	mov	r3,r2
 8039f30:	e0bfec17 	ldw	r2,-80(fp)
 8039f34:	1880120e 	bge	r3,r2,8039f80 <tcp_input+0x1958>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 8039f38:	e0bffc17 	ldw	r2,-16(fp)
 8039f3c:	10c01417 	ldw	r3,80(r2)
 8039f40:	e0bffa17 	ldw	r2,-24(fp)
 8039f44:	10801217 	ldw	r2,72(r2)
 8039f48:	10bfffcc 	andi	r2,r2,65535
 8039f4c:	1887c83a 	sub	r3,r3,r2
 8039f50:	e0bffc17 	ldw	r2,-16(fp)
 8039f54:	10c01415 	stw	r3,80(r2)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 8039f58:	e0bffa17 	ldw	r2,-24(fp)
 8039f5c:	10c01204 	addi	r3,r2,72
 8039f60:	e0bffa17 	ldw	r2,-24(fp)
 8039f64:	10801217 	ldw	r2,72(r2)
 8039f68:	100b883a 	mov	r5,r2
 8039f6c:	1809883a 	mov	r4,r3
 8039f70:	803766c0 	call	803766c <sbdrop>
         ourfinisacked = 1;
 8039f74:	00800044 	movi	r2,1
 8039f78:	e0bff815 	stw	r2,-32(fp)
 8039f7c:	00000d06 	br	8039fb4 <tcp_input+0x198c>
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
 8039f80:	e0bffa17 	ldw	r2,-24(fp)
 8039f84:	10801204 	addi	r2,r2,72
 8039f88:	e17fec17 	ldw	r5,-80(fp)
 8039f8c:	1009883a 	mov	r4,r2
 8039f90:	803766c0 	call	803766c <sbdrop>
         tp->snd_wnd -= (u_short)acked;
 8039f94:	e0bffc17 	ldw	r2,-16(fp)
 8039f98:	10c01417 	ldw	r3,80(r2)
 8039f9c:	e0bfec17 	ldw	r2,-80(fp)
 8039fa0:	10bfffcc 	andi	r2,r2,65535
 8039fa4:	1887c83a 	sub	r3,r3,r2
 8039fa8:	e0bffc17 	ldw	r2,-16(fp)
 8039fac:	10c01415 	stw	r3,80(r2)
         ourfinisacked = 0;
 8039fb0:	e03ff815 	stw	zero,-32(fp)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 8039fb4:	e0bffa17 	ldw	r2,-24(fp)
 8039fb8:	1080190b 	ldhu	r2,100(r2)
 8039fbc:	10bfffcc 	andi	r2,r2,65535
 8039fc0:	1080030c 	andi	r2,r2,12
 8039fc4:	10000526 	beq	r2,zero,8039fdc <tcp_input+0x19b4>
         sowwakeup(so);
 8039fc8:	e0bffa17 	ldw	r2,-24(fp)
 8039fcc:	10801204 	addi	r2,r2,72
 8039fd0:	100b883a 	mov	r5,r2
 8039fd4:	e13ffa17 	ldw	r4,-24(fp)
 8039fd8:	8036f040 	call	8036f04 <sbwakeup>

      tp->snd_una = ti->ti_ack;
 8039fdc:	e0bff017 	ldw	r2,-64(fp)
 8039fe0:	10c00717 	ldw	r3,28(r2)
 8039fe4:	e0bffc17 	ldw	r2,-16(fp)
 8039fe8:	10c00e15 	stw	r3,56(r2)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 8039fec:	e0bffc17 	ldw	r2,-16(fp)
 8039ff0:	10c00f17 	ldw	r3,60(r2)
 8039ff4:	e0bffc17 	ldw	r2,-16(fp)
 8039ff8:	10800e17 	ldw	r2,56(r2)
 8039ffc:	1885c83a 	sub	r2,r3,r2
 803a000:	1000040e 	bge	r2,zero,803a014 <tcp_input+0x19ec>
         tp->snd_nxt = tp->snd_una;
 803a004:	e0bffc17 	ldw	r2,-16(fp)
 803a008:	10c00e17 	ldw	r3,56(r2)
 803a00c:	e0bffc17 	ldw	r2,-16(fp)
 803a010:	10c00f15 	stw	r3,60(r2)


      switch (tp->t_state) 
 803a014:	e0bffc17 	ldw	r2,-16(fp)
 803a018:	10800217 	ldw	r2,8(r2)
 803a01c:	10c002a0 	cmpeqi	r3,r2,10
 803a020:	1800311e 	bne	r3,zero,803a0e8 <tcp_input+0x1ac0>
 803a024:	10c002c8 	cmpgei	r3,r2,11
 803a028:	18003a1e 	bne	r3,zero,803a114 <tcp_input+0x1aec>
 803a02c:	10c00220 	cmpeqi	r3,r2,8
 803a030:	1800261e 	bne	r3,zero,803a0cc <tcp_input+0x1aa4>
 803a034:	10c00248 	cmpgei	r3,r2,9
 803a038:	1800361e 	bne	r3,zero,803a114 <tcp_input+0x1aec>
 803a03c:	10c001a0 	cmpeqi	r3,r2,6
 803a040:	1800031e 	bne	r3,zero,803a050 <tcp_input+0x1a28>
 803a044:	108001e0 	cmpeqi	r2,r2,7
 803a048:	1000111e 	bne	r2,zero,803a090 <tcp_input+0x1a68>
 803a04c:	00003106 	br	803a114 <tcp_input+0x1aec>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
 803a050:	e0bff817 	ldw	r2,-32(fp)
 803a054:	10002a26 	beq	r2,zero,803a100 <tcp_input+0x1ad8>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
 803a058:	e0bffa17 	ldw	r2,-24(fp)
 803a05c:	1080088b 	ldhu	r2,34(r2)
 803a060:	10bfffcc 	andi	r2,r2,65535
 803a064:	1080080c 	andi	r2,r2,32
 803a068:	10000526 	beq	r2,zero,803a080 <tcp_input+0x1a58>
            {
               soisdisconnected(so);
 803a06c:	e13ffa17 	ldw	r4,-24(fp)
 803a070:	803693c0 	call	803693c <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
 803a074:	d0e0af17 	ldw	r3,-32068(gp)
 803a078:	e0bffc17 	ldw	r2,-16(fp)
 803a07c:	10c00615 	stw	r3,24(r2)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
 803a080:	e0bffc17 	ldw	r2,-16(fp)
 803a084:	00c00244 	movi	r3,9
 803a088:	10c00215 	stw	r3,8(r2)
         }
         break;
 803a08c:	00001c06 	br	803a100 <tcp_input+0x1ad8>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
 803a090:	e0bff817 	ldw	r2,-32(fp)
 803a094:	10001c26 	beq	r2,zero,803a108 <tcp_input+0x1ae0>
         {
            tp->t_state = TCPS_TIME_WAIT;
 803a098:	e0bffc17 	ldw	r2,-16(fp)
 803a09c:	00c00284 	movi	r3,10
 803a0a0:	10c00215 	stw	r3,8(r2)
            tcp_canceltimers(tp);
 803a0a4:	e13ffc17 	ldw	r4,-16(fp)
 803a0a8:	803cb380 	call	803cb38 <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 803a0ac:	d0a03717 	ldw	r2,-32548(gp)
 803a0b0:	1085883a 	add	r2,r2,r2
 803a0b4:	1007883a 	mov	r3,r2
 803a0b8:	e0bffc17 	ldw	r2,-16(fp)
 803a0bc:	10c00615 	stw	r3,24(r2)
            soisdisconnected(so);
 803a0c0:	e13ffa17 	ldw	r4,-24(fp)
 803a0c4:	803693c0 	call	803693c <soisdisconnected>
         }
         break;
 803a0c8:	00000f06 	br	803a108 <tcp_input+0x1ae0>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
 803a0cc:	e0bff817 	ldw	r2,-32(fp)
 803a0d0:	10000f26 	beq	r2,zero,803a110 <tcp_input+0x1ae8>
         {
            SETTP(tp, tcp_close(tp));
 803a0d4:	e13ffc17 	ldw	r4,-16(fp)
 803a0d8:	803c6bc0 	call	803c6bc <tcp_close>
            GOTO_DROP;
 803a0dc:	00816644 	movi	r2,1433
 803a0e0:	d0a0ad15 	stw	r2,-32076(gp)
 803a0e4:	0001bd06 	br	803a7dc <tcp_input+0x21b4>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 803a0e8:	d0a03717 	ldw	r2,-32548(gp)
 803a0ec:	1085883a 	add	r2,r2,r2
 803a0f0:	1007883a 	mov	r3,r2
 803a0f4:	e0bffc17 	ldw	r2,-16(fp)
 803a0f8:	10c00615 	stw	r3,24(r2)
         goto dropafterack;
 803a0fc:	00016706 	br	803a69c <tcp_input+0x2074>
         break;
 803a100:	0001883a 	nop
 803a104:	00000306 	br	803a114 <tcp_input+0x1aec>
         break;
 803a108:	0001883a 	nop
 803a10c:	00000106 	br	803a114 <tcp_input+0x1aec>
         break;
 803a110:	0001883a 	nop
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
 803a114:	e0bffb17 	ldw	r2,-20(fp)
 803a118:	1080040c 	andi	r2,r2,16
 803a11c:	10004226 	beq	r2,zero,803a228 <tcp_input+0x1c00>
       /*
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 803a120:	e0bffc17 	ldw	r2,-16(fp)
 803a124:	10c01117 	ldw	r3,68(r2)
 803a128:	e0bff017 	ldw	r2,-64(fp)
 803a12c:	10800617 	ldw	r2,24(r2)
 803a130:	1885c83a 	sub	r2,r3,r2
   if ((tiflags & TH_ACK) &&
 803a134:	10001416 	blt	r2,zero,803a188 <tcp_input+0x1b60>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 803a138:	e0bffc17 	ldw	r2,-16(fp)
 803a13c:	10c01117 	ldw	r3,68(r2)
 803a140:	e0bff017 	ldw	r2,-64(fp)
 803a144:	10800617 	ldw	r2,24(r2)
 803a148:	1880371e 	bne	r3,r2,803a228 <tcp_input+0x1c00>
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
 803a14c:	e0bffc17 	ldw	r2,-16(fp)
 803a150:	10c01217 	ldw	r3,72(r2)
 803a154:	e0bff017 	ldw	r2,-64(fp)
 803a158:	10800717 	ldw	r2,28(r2)
 803a15c:	1885c83a 	sub	r2,r3,r2
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 803a160:	10000916 	blt	r2,zero,803a188 <tcp_input+0x1b60>
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
 803a164:	e0bffc17 	ldw	r2,-16(fp)
 803a168:	10c01217 	ldw	r3,72(r2)
 803a16c:	e0bff017 	ldw	r2,-64(fp)
 803a170:	10800717 	ldw	r2,28(r2)
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
 803a174:	18802c1e 	bne	r3,r2,803a228 <tcp_input+0x1c00>
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
 803a178:	e0bffc17 	ldw	r2,-16(fp)
 803a17c:	10c01417 	ldw	r3,80(r2)
 803a180:	e0bfed17 	ldw	r2,-76(fp)
 803a184:	1880282e 	bgeu	r3,r2,803a228 <tcp_input+0x1c00>
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
 803a188:	e0bff017 	ldw	r2,-64(fp)
 803a18c:	1080028b 	ldhu	r2,10(r2)
 803a190:	10bfffcc 	andi	r2,r2,65535
 803a194:	10000e1e 	bne	r2,zero,803a1d0 <tcp_input+0x1ba8>
          (tp->snd_wl2 == ti->ti_ack) &&
 803a198:	e0bffc17 	ldw	r2,-16(fp)
 803a19c:	10c01217 	ldw	r3,72(r2)
 803a1a0:	e0bff017 	ldw	r2,-64(fp)
 803a1a4:	10800717 	ldw	r2,28(r2)
      if ((ti->ti_len == 0) &&
 803a1a8:	1880091e 	bne	r3,r2,803a1d0 <tcp_input+0x1ba8>
          (rx_win > tp->snd_wnd))
 803a1ac:	e0bffc17 	ldw	r2,-16(fp)
 803a1b0:	10c01417 	ldw	r3,80(r2)
          (tp->snd_wl2 == ti->ti_ack) &&
 803a1b4:	e0bfed17 	ldw	r2,-76(fp)
 803a1b8:	1880052e 	bgeu	r3,r2,803a1d0 <tcp_input+0x1ba8>
      {
         tcpstat.tcps_rcvwinupd++;
 803a1bc:	008201b4 	movhi	r2,2054
 803a1c0:	10bf6b17 	ldw	r2,-596(r2)
 803a1c4:	10c00044 	addi	r3,r2,1
 803a1c8:	008201b4 	movhi	r2,2054
 803a1cc:	10ff6b15 	stw	r3,-596(r2)
      }
      tp->snd_wnd = rx_win;
 803a1d0:	e0bffc17 	ldw	r2,-16(fp)
 803a1d4:	e0ffed17 	ldw	r3,-76(fp)
 803a1d8:	10c01415 	stw	r3,80(r2)
      tp->snd_wl1 = ti->ti_seq;
 803a1dc:	e0bff017 	ldw	r2,-64(fp)
 803a1e0:	10c00617 	ldw	r3,24(r2)
 803a1e4:	e0bffc17 	ldw	r2,-16(fp)
 803a1e8:	10c01115 	stw	r3,68(r2)
      tp->snd_wl2 = ti->ti_ack;
 803a1ec:	e0bff017 	ldw	r2,-64(fp)
 803a1f0:	10c00717 	ldw	r3,28(r2)
 803a1f4:	e0bffc17 	ldw	r2,-16(fp)
 803a1f8:	10c01215 	stw	r3,72(r2)
      if (tp->snd_wnd > tp->max_sndwnd)
 803a1fc:	e0bffc17 	ldw	r2,-16(fp)
 803a200:	10801417 	ldw	r2,80(r2)
 803a204:	e0fffc17 	ldw	r3,-16(fp)
 803a208:	18c02317 	ldw	r3,140(r3)
 803a20c:	1880042e 	bgeu	r3,r2,803a220 <tcp_input+0x1bf8>
         tp->max_sndwnd = tp->snd_wnd;
 803a210:	e0bffc17 	ldw	r2,-16(fp)
 803a214:	10c01417 	ldw	r3,80(r2)
 803a218:	e0bffc17 	ldw	r2,-16(fp)
 803a21c:	10c02315 	stw	r3,140(r2)
      needoutput = 1;
 803a220:	00800044 	movi	r2,1
 803a224:	e0bff715 	stw	r2,-36(fp)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
 803a228:	e0bffb17 	ldw	r2,-20(fp)
 803a22c:	1080080c 	andi	r2,r2,32
 803a230:	10005626 	beq	r2,zero,803a38c <tcp_input+0x1d64>
 803a234:	e0bff017 	ldw	r2,-64(fp)
 803a238:	1080098b 	ldhu	r2,38(r2)
 803a23c:	10bfffcc 	andi	r2,r2,65535
 803a240:	10005226 	beq	r2,zero,803a38c <tcp_input+0x1d64>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 803a244:	e0bffc17 	ldw	r2,-16(fp)
 803a248:	10800217 	ldw	r2,8(r2)
   if ((tiflags & TH_URG) && ti->ti_urp &&
 803a24c:	10800288 	cmpgei	r2,r2,10
 803a250:	10004e1e 	bne	r2,zero,803a38c <tcp_input+0x1d64>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
 803a254:	e0bff017 	ldw	r2,-64(fp)
 803a258:	1080098b 	ldhu	r2,38(r2)
 803a25c:	10ffffcc 	andi	r3,r2,65535
 803a260:	e0bffa17 	ldw	r2,-24(fp)
 803a264:	10800a17 	ldw	r2,40(r2)
 803a268:	1885883a 	add	r2,r3,r2
 803a26c:	10900070 	cmpltui	r2,r2,16385
 803a270:	1000071e 	bne	r2,zero,803a290 <tcp_input+0x1c68>
      {
         ti->ti_urp = 0;         /* XXX */
 803a274:	e0bff017 	ldw	r2,-64(fp)
 803a278:	1000098d 	sth	zero,38(r2)
         tiflags &= ~TH_URG;     /* XXX */
 803a27c:	e0fffb17 	ldw	r3,-20(fp)
 803a280:	00bff7c4 	movi	r2,-33
 803a284:	1884703a 	and	r2,r3,r2
 803a288:	e0bffb15 	stw	r2,-20(fp)
         goto dodata;         /* XXX */
 803a28c:	00004d06 	br	803a3c4 <tcp_input+0x1d9c>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
 803a290:	e0bff017 	ldw	r2,-64(fp)
 803a294:	10c00617 	ldw	r3,24(r2)
 803a298:	e0bff017 	ldw	r2,-64(fp)
 803a29c:	1080098b 	ldhu	r2,38(r2)
 803a2a0:	10bfffcc 	andi	r2,r2,65535
 803a2a4:	1887883a 	add	r3,r3,r2
 803a2a8:	e0bffc17 	ldw	r2,-16(fp)
 803a2ac:	10801717 	ldw	r2,92(r2)
 803a2b0:	1885c83a 	sub	r2,r3,r2
 803a2b4:	0080250e 	bge	zero,r2,803a34c <tcp_input+0x1d24>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
 803a2b8:	e0bff017 	ldw	r2,-64(fp)
 803a2bc:	10c00617 	ldw	r3,24(r2)
 803a2c0:	e0bff017 	ldw	r2,-64(fp)
 803a2c4:	1080098b 	ldhu	r2,38(r2)
 803a2c8:	10bfffcc 	andi	r2,r2,65535
 803a2cc:	1887883a 	add	r3,r3,r2
 803a2d0:	e0bffc17 	ldw	r2,-16(fp)
 803a2d4:	10c01715 	stw	r3,92(r2)
         so->so_oobmark = so->so_rcv.sb_cc +
 803a2d8:	e0bffa17 	ldw	r2,-24(fp)
 803a2dc:	10c00a17 	ldw	r3,40(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
 803a2e0:	e0bffc17 	ldw	r2,-16(fp)
 803a2e4:	11001717 	ldw	r4,92(r2)
 803a2e8:	e0bffc17 	ldw	r2,-16(fp)
 803a2ec:	10801617 	ldw	r2,88(r2)
 803a2f0:	2085c83a 	sub	r2,r4,r2
         so->so_oobmark = so->so_rcv.sb_cc +
 803a2f4:	1885883a 	add	r2,r3,r2
         (tp->rcv_up - tp->rcv_nxt) - 1;
 803a2f8:	10ffffc4 	addi	r3,r2,-1
         so->so_oobmark = so->so_rcv.sb_cc +
 803a2fc:	e0bffa17 	ldw	r2,-24(fp)
 803a300:	10c01a15 	stw	r3,104(r2)
         if (so->so_oobmark == 0)
 803a304:	e0bffa17 	ldw	r2,-24(fp)
 803a308:	10801a17 	ldw	r2,104(r2)
 803a30c:	1000061e 	bne	r2,zero,803a328 <tcp_input+0x1d00>
            so->so_state |= SS_RCVATMARK;
 803a310:	e0bffa17 	ldw	r2,-24(fp)
 803a314:	1080088b 	ldhu	r2,34(r2)
 803a318:	10801014 	ori	r2,r2,64
 803a31c:	1007883a 	mov	r3,r2
 803a320:	e0bffa17 	ldw	r2,-24(fp)
 803a324:	10c0088d 	sth	r3,34(r2)
         sohasoutofband(so);
 803a328:	e13ffa17 	ldw	r4,-24(fp)
 803a32c:	80366e40 	call	80366e4 <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 803a330:	e0bffc17 	ldw	r2,-16(fp)
 803a334:	10c02403 	ldbu	r3,144(r2)
 803a338:	00bfff04 	movi	r2,-4
 803a33c:	1884703a 	and	r2,r3,r2
 803a340:	1007883a 	mov	r3,r2
 803a344:	e0bffc17 	ldw	r2,-16(fp)
 803a348:	10c02405 	stb	r3,144(r2)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
 803a34c:	e0bff017 	ldw	r2,-64(fp)
 803a350:	1100098b 	ldhu	r4,38(r2)
 803a354:	e0bff017 	ldw	r2,-64(fp)
 803a358:	10c0028b 	ldhu	r3,10(r2)
 803a35c:	20bfffcc 	andi	r2,r4,65535
 803a360:	18ffffcc 	andi	r3,r3,65535
 803a364:	18801436 	bltu	r3,r2,803a3b8 <tcp_input+0x1d90>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
 803a368:	e0bffa17 	ldw	r2,-24(fp)
 803a36c:	10800417 	ldw	r2,16(r2)
 803a370:	1080400c 	andi	r2,r2,256
 803a374:	1000101e 	bne	r2,zero,803a3b8 <tcp_input+0x1d90>
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
 803a378:	e1bfe417 	ldw	r6,-112(fp)
 803a37c:	e17ff017 	ldw	r5,-64(fp)
 803a380:	e13ffa17 	ldw	r4,-24(fp)
 803a384:	803a9c80 	call	803a9c8 <tcp_pulloutofband>
      if ( (ti->ti_urp <= ti->ti_len)
 803a388:	00000b06 	br	803a3b8 <tcp_input+0x1d90>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
 803a38c:	e0bffc17 	ldw	r2,-16(fp)
 803a390:	10c01617 	ldw	r3,88(r2)
 803a394:	e0bffc17 	ldw	r2,-16(fp)
 803a398:	10801717 	ldw	r2,92(r2)
 803a39c:	1885c83a 	sub	r2,r3,r2
 803a3a0:	0080070e 	bge	zero,r2,803a3c0 <tcp_input+0x1d98>
      tp->rcv_up = tp->rcv_nxt;
 803a3a4:	e0bffc17 	ldw	r2,-16(fp)
 803a3a8:	10c01617 	ldw	r3,88(r2)
 803a3ac:	e0bffc17 	ldw	r2,-16(fp)
 803a3b0:	10c01715 	stw	r3,92(r2)
 803a3b4:	00000306 	br	803a3c4 <tcp_input+0x1d9c>
      if ( (ti->ti_urp <= ti->ti_len)
 803a3b8:	0001883a 	nop
 803a3bc:	00000106 	br	803a3c4 <tcp_input+0x1d9c>
dodata:                       /* XXX */
 803a3c0:	0001883a 	nop
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 803a3c4:	e0bff017 	ldw	r2,-64(fp)
 803a3c8:	1080028b 	ldhu	r2,10(r2)
 803a3cc:	10bfffcc 	andi	r2,r2,65535
 803a3d0:	1000031e 	bne	r2,zero,803a3e0 <tcp_input+0x1db8>
 803a3d4:	e0bffb17 	ldw	r2,-20(fp)
 803a3d8:	1080004c 	andi	r2,r2,1
 803a3dc:	10005a26 	beq	r2,zero,803a548 <tcp_input+0x1f20>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 803a3e0:	e0bffc17 	ldw	r2,-16(fp)
 803a3e4:	10800217 	ldw	r2,8(r2)
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 803a3e8:	10800288 	cmpgei	r2,r2,10
 803a3ec:	1000561e 	bne	r2,zero,803a548 <tcp_input+0x1f20>
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 803a3f0:	e0bff017 	ldw	r2,-64(fp)
 803a3f4:	10c00617 	ldw	r3,24(r2)
 803a3f8:	e0bffc17 	ldw	r2,-16(fp)
 803a3fc:	10801617 	ldw	r2,88(r2)
 803a400:	1880331e 	bne	r3,r2,803a4d0 <tcp_input+0x1ea8>
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
 803a404:	e0bffc17 	ldw	r2,-16(fp)
 803a408:	10800017 	ldw	r2,0(r2)
      if((ti->ti_seq == tp->rcv_nxt) &&
 803a40c:	e0fffc17 	ldw	r3,-16(fp)
 803a410:	18802f1e 	bne	r3,r2,803a4d0 <tcp_input+0x1ea8>
         (tp->t_state == TCPS_ESTABLISHED))
 803a414:	e0bffc17 	ldw	r2,-16(fp)
 803a418:	10800217 	ldw	r2,8(r2)
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
 803a41c:	10800118 	cmpnei	r2,r2,4
 803a420:	10002b1e 	bne	r2,zero,803a4d0 <tcp_input+0x1ea8>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
 803a424:	e0bffc17 	ldw	r2,-16(fp)
 803a428:	10800b0b 	ldhu	r2,44(r2)
 803a42c:	10800054 	ori	r2,r2,1
 803a430:	1007883a 	mov	r3,r2
 803a434:	e0bffc17 	ldw	r2,-16(fp)
 803a438:	10c00b0d 	sth	r3,44(r2)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
 803a43c:	e0bffc17 	ldw	r2,-16(fp)
 803a440:	10c01617 	ldw	r3,88(r2)
 803a444:	e0bff017 	ldw	r2,-64(fp)
 803a448:	1080028b 	ldhu	r2,10(r2)
 803a44c:	10bfffcc 	andi	r2,r2,65535
 803a450:	1887883a 	add	r3,r3,r2
 803a454:	e0bffc17 	ldw	r2,-16(fp)
 803a458:	10c01615 	stw	r3,88(r2)
         tiflags = ti->ti_flags & TH_FIN;
 803a45c:	e0bff017 	ldw	r2,-64(fp)
 803a460:	10800843 	ldbu	r2,33(r2)
 803a464:	10803fcc 	andi	r2,r2,255
 803a468:	1080004c 	andi	r2,r2,1
 803a46c:	e0bffb15 	stw	r2,-20(fp)
         tcpstat.tcps_rcvpack++;
 803a470:	008201b4 	movhi	r2,2054
 803a474:	10bf5817 	ldw	r2,-672(r2)
 803a478:	10c00044 	addi	r3,r2,1
 803a47c:	008201b4 	movhi	r2,2054
 803a480:	10ff5815 	stw	r3,-672(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 803a484:	008201b4 	movhi	r2,2054
 803a488:	10ff5917 	ldw	r3,-668(r2)
 803a48c:	e0bff017 	ldw	r2,-64(fp)
 803a490:	1080028b 	ldhu	r2,10(r2)
 803a494:	10bfffcc 	andi	r2,r2,65535
 803a498:	1887883a 	add	r3,r3,r2
 803a49c:	008201b4 	movhi	r2,2054
 803a4a0:	10ff5915 	stw	r3,-668(r2)
         sbappend(&so->so_rcv, (m));
 803a4a4:	e0bffa17 	ldw	r2,-24(fp)
 803a4a8:	10800a04 	addi	r2,r2,40
 803a4ac:	e17fe417 	ldw	r5,-112(fp)
 803a4b0:	1009883a 	mov	r4,r2
 803a4b4:	80370b40 	call	80370b4 <sbappend>
         sorwakeup(so);
 803a4b8:	e0bffa17 	ldw	r2,-24(fp)
 803a4bc:	10800a04 	addi	r2,r2,40
 803a4c0:	100b883a 	mov	r5,r2
 803a4c4:	e13ffa17 	ldw	r4,-24(fp)
 803a4c8:	8036f040 	call	8036f04 <sbwakeup>
 803a4cc:	00000b06 	br	803a4fc <tcp_input+0x1ed4>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
 803a4d0:	e1bfe417 	ldw	r6,-112(fp)
 803a4d4:	e17ff017 	ldw	r5,-64(fp)
 803a4d8:	e13ffc17 	ldw	r4,-16(fp)
 803a4dc:	80382380 	call	8038238 <tcp_reass>
 803a4e0:	e0bffb15 	stw	r2,-20(fp)
         tp->t_flags |= TF_ACKNOW;
 803a4e4:	e0bffc17 	ldw	r2,-16(fp)
 803a4e8:	10800b0b 	ldhu	r2,44(r2)
 803a4ec:	10800054 	ori	r2,r2,1
 803a4f0:	1007883a 	mov	r3,r2
 803a4f4:	e0bffc17 	ldw	r2,-16(fp)
 803a4f8:	10c00b0d 	sth	r3,44(r2)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
 803a4fc:	e0bffa17 	ldw	r2,-24(fp)
 803a500:	10c00b17 	ldw	r3,44(r2)
 803a504:	e0bffc17 	ldw	r2,-16(fp)
 803a508:	11001617 	ldw	r4,88(r2)
 803a50c:	e0bffc17 	ldw	r2,-16(fp)
 803a510:	10801917 	ldw	r2,100(r2)
 803a514:	2085c83a 	sub	r2,r4,r2
 803a518:	1885883a 	add	r2,r3,r2
 803a51c:	e0bfe615 	stw	r2,-104(fp)
      if (len > (int)tp->max_rcvd)
 803a520:	e0bffc17 	ldw	r2,-16(fp)
 803a524:	10802217 	ldw	r2,136(r2)
 803a528:	1007883a 	mov	r3,r2
 803a52c:	e0bfe617 	ldw	r2,-104(fp)
 803a530:	18800b0e 	bge	r3,r2,803a560 <tcp_input+0x1f38>
         tp->max_rcvd = (u_short)len;
 803a534:	e0bfe617 	ldw	r2,-104(fp)
 803a538:	10ffffcc 	andi	r3,r2,65535
 803a53c:	e0bffc17 	ldw	r2,-16(fp)
 803a540:	10c02215 	stw	r3,136(r2)
      if (len > (int)tp->max_rcvd)
 803a544:	00000606 	br	803a560 <tcp_input+0x1f38>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
 803a548:	e13fe417 	ldw	r4,-112(fp)
 803a54c:	80311e00 	call	80311e0 <m_freem>
      tiflags &= ~TH_FIN;
 803a550:	e0fffb17 	ldw	r3,-20(fp)
 803a554:	00bfff84 	movi	r2,-2
 803a558:	1884703a 	and	r2,r3,r2
 803a55c:	e0bffb15 	stw	r2,-20(fp)

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
 803a560:	e0bffb17 	ldw	r2,-20(fp)
 803a564:	1080004c 	andi	r2,r2,1
 803a568:	10003e26 	beq	r2,zero,803a664 <tcp_input+0x203c>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 803a56c:	e0bffc17 	ldw	r2,-16(fp)
 803a570:	10800217 	ldw	r2,8(r2)
 803a574:	10800288 	cmpgei	r2,r2,10
 803a578:	10000d1e 	bne	r2,zero,803a5b0 <tcp_input+0x1f88>
      {
         socantrcvmore(so);
 803a57c:	e13ffa17 	ldw	r4,-24(fp)
 803a580:	8036e040 	call	8036e04 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
 803a584:	e0bffc17 	ldw	r2,-16(fp)
 803a588:	10800b0b 	ldhu	r2,44(r2)
 803a58c:	10800054 	ori	r2,r2,1
 803a590:	1007883a 	mov	r3,r2
 803a594:	e0bffc17 	ldw	r2,-16(fp)
 803a598:	10c00b0d 	sth	r3,44(r2)
         tp->rcv_nxt++;
 803a59c:	e0bffc17 	ldw	r2,-16(fp)
 803a5a0:	10801617 	ldw	r2,88(r2)
 803a5a4:	10c00044 	addi	r3,r2,1
 803a5a8:	e0bffc17 	ldw	r2,-16(fp)
 803a5ac:	10c01615 	stw	r3,88(r2)
      }
      switch (tp->t_state) 
 803a5b0:	e0bffc17 	ldw	r2,-16(fp)
 803a5b4:	10800217 	ldw	r2,8(r2)
 803a5b8:	10c002a0 	cmpeqi	r3,r2,10
 803a5bc:	1800231e 	bne	r3,zero,803a64c <tcp_input+0x2024>
 803a5c0:	10c002c8 	cmpgei	r3,r2,11
 803a5c4:	1800281e 	bne	r3,zero,803a668 <tcp_input+0x2040>
 803a5c8:	10c00260 	cmpeqi	r3,r2,9
 803a5cc:	1800121e 	bne	r3,zero,803a618 <tcp_input+0x1ff0>
 803a5d0:	10c00288 	cmpgei	r3,r2,10
 803a5d4:	1800241e 	bne	r3,zero,803a668 <tcp_input+0x2040>
 803a5d8:	10c00148 	cmpgei	r3,r2,5
 803a5dc:	1800031e 	bne	r3,zero,803a5ec <tcp_input+0x1fc4>
 803a5e0:	108000c8 	cmpgei	r2,r2,3
 803a5e4:	1000041e 	bne	r2,zero,803a5f8 <tcp_input+0x1fd0>
 803a5e8:	00001f06 	br	803a668 <tcp_input+0x2040>
 803a5ec:	108001a0 	cmpeqi	r2,r2,6
 803a5f0:	1000051e 	bne	r2,zero,803a608 <tcp_input+0x1fe0>
 803a5f4:	00001c06 	br	803a668 <tcp_input+0x2040>
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
 803a5f8:	e0bffc17 	ldw	r2,-16(fp)
 803a5fc:	00c00144 	movi	r3,5
 803a600:	10c00215 	stw	r3,8(r2)
         break;
 803a604:	00001806 	br	803a668 <tcp_input+0x2040>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
 803a608:	e0bffc17 	ldw	r2,-16(fp)
 803a60c:	00c001c4 	movi	r3,7
 803a610:	10c00215 	stw	r3,8(r2)
         break;
 803a614:	00001406 	br	803a668 <tcp_input+0x2040>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
 803a618:	e0bffc17 	ldw	r2,-16(fp)
 803a61c:	00c00284 	movi	r3,10
 803a620:	10c00215 	stw	r3,8(r2)
         tcp_canceltimers(tp);
 803a624:	e13ffc17 	ldw	r4,-16(fp)
 803a628:	803cb380 	call	803cb38 <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 803a62c:	d0a03717 	ldw	r2,-32548(gp)
 803a630:	1085883a 	add	r2,r2,r2
 803a634:	1007883a 	mov	r3,r2
 803a638:	e0bffc17 	ldw	r2,-16(fp)
 803a63c:	10c00615 	stw	r3,24(r2)
         soisdisconnected(so);
 803a640:	e13ffa17 	ldw	r4,-24(fp)
 803a644:	803693c0 	call	803693c <soisdisconnected>
         break;
 803a648:	00000706 	br	803a668 <tcp_input+0x2040>

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 803a64c:	d0a03717 	ldw	r2,-32548(gp)
 803a650:	1085883a 	add	r2,r2,r2
 803a654:	1007883a 	mov	r3,r2
 803a658:	e0bffc17 	ldw	r2,-16(fp)
 803a65c:	10c00615 	stw	r3,24(r2)
         break;
 803a660:	00000106 	br	803a668 <tcp_input+0x2040>
      }
   }
 803a664:	0001883a 	nop
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
 803a668:	e0bff717 	ldw	r2,-36(fp)
 803a66c:	1000051e 	bne	r2,zero,803a684 <tcp_input+0x205c>
 803a670:	e0bffc17 	ldw	r2,-16(fp)
 803a674:	10800b0b 	ldhu	r2,44(r2)
 803a678:	10bfffcc 	andi	r2,r2,65535
 803a67c:	1080004c 	andi	r2,r2,1
 803a680:	10006526 	beq	r2,zero,803a818 <tcp_input+0x21f0>
      (void) tcp_output(tp);
 803a684:	e13ffc17 	ldw	r4,-16(fp)
 803a688:	803ae700 	call	803ae70 <tcp_output>
   return;
 803a68c:	00006206 	br	803a818 <tcp_input+0x21f0>
            goto dropafterack;
 803a690:	0001883a 	nop
 803a694:	00000106 	br	803a69c <tcp_input+0x2074>
            goto dropafterack;
 803a698:	0001883a 	nop
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
 803a69c:	e0bffb17 	ldw	r2,-20(fp)
 803a6a0:	1080010c 	andi	r2,r2,4
 803a6a4:	10000326 	beq	r2,zero,803a6b4 <tcp_input+0x208c>
      GOTO_DROP;
 803a6a8:	0081a904 	movi	r2,1700
 803a6ac:	d0a0ad15 	stw	r2,-32076(gp)
 803a6b0:	00004a06 	br	803a7dc <tcp_input+0x21b4>
   m_freem (m);
 803a6b4:	e13fe417 	ldw	r4,-112(fp)
 803a6b8:	80311e00 	call	80311e0 <m_freem>
   tp->t_flags |= TF_ACKNOW;
 803a6bc:	e0bffc17 	ldw	r2,-16(fp)
 803a6c0:	10800b0b 	ldhu	r2,44(r2)
 803a6c4:	10800054 	ori	r2,r2,1
 803a6c8:	1007883a 	mov	r3,r2
 803a6cc:	e0bffc17 	ldw	r2,-16(fp)
 803a6d0:	10c00b0d 	sth	r3,44(r2)
   (void) tcp_output (tp);
 803a6d4:	e13ffc17 	ldw	r4,-16(fp)
 803a6d8:	803ae700 	call	803ae70 <tcp_output>
   return;
 803a6dc:	00005306 	br	803a82c <tcp_input+0x2204>

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 803a6e0:	008201b4 	movhi	r2,2054
 803a6e4:	10bf1d17 	ldw	r2,-908(r2)
 803a6e8:	10c00044 	addi	r3,r2,1
 803a6ec:	008201b4 	movhi	r2,2054
 803a6f0:	10ff1d15 	stw	r3,-908(r2)
   if (om) 
 803a6f4:	e0bffd17 	ldw	r2,-12(fp)
 803a6f8:	10000326 	beq	r2,zero,803a708 <tcp_input+0x20e0>
   {
      (void) m_free(om);
 803a6fc:	e13ffd17 	ldw	r4,-12(fp)
 803a700:	80310dc0 	call	80310dc <m_free>
      om = 0;
 803a704:	e03ffd15 	stw	zero,-12(fp)
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
 803a708:	e0bffb17 	ldw	r2,-20(fp)
 803a70c:	1080010c 	andi	r2,r2,4
 803a710:	10000326 	beq	r2,zero,803a720 <tcp_input+0x20f8>
      GOTO_DROP;
 803a714:	0081ad04 	movi	r2,1716
 803a718:	d0a0ad15 	stw	r2,-32076(gp)
 803a71c:	00002f06 	br	803a7dc <tcp_input+0x21b4>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
 803a720:	e0bff017 	ldw	r2,-64(fp)
 803a724:	10800417 	ldw	r2,16(r2)
 803a728:	1009883a 	mov	r4,r2
 803a72c:	80320c80 	call	80320c8 <in_broadcast>
 803a730:	10000326 	beq	r2,zero,803a740 <tcp_input+0x2118>
      GOTO_DROP;
 803a734:	0081af44 	movi	r2,1725
 803a738:	d0a0ad15 	stw	r2,-32076(gp)
 803a73c:	00002706 	br	803a7dc <tcp_input+0x21b4>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
 803a740:	e0bffb17 	ldw	r2,-20(fp)
 803a744:	1080040c 	andi	r2,r2,16
 803a748:	10000c26 	beq	r2,zero,803a77c <tcp_input+0x2154>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
 803a74c:	e0bff017 	ldw	r2,-64(fp)
 803a750:	10c00717 	ldw	r3,28(r2)
 803a754:	e0bfe417 	ldw	r2,-112(fp)
 803a758:	d8800115 	stw	r2,4(sp)
 803a75c:	00800104 	movi	r2,4
 803a760:	d8800015 	stw	r2,0(sp)
 803a764:	180f883a 	mov	r7,r3
 803a768:	000d883a 	mov	r6,zero
 803a76c:	e17ff017 	ldw	r5,-64(fp)
 803a770:	e13ffc17 	ldw	r4,-16(fp)
 803a774:	803c1200 	call	803c120 <tcp_respond>
 803a778:	00001306 	br	803a7c8 <tcp_input+0x21a0>
   else
   {
      if (tiflags & TH_SYN)
 803a77c:	e0bffb17 	ldw	r2,-20(fp)
 803a780:	1080008c 	andi	r2,r2,2
 803a784:	10000526 	beq	r2,zero,803a79c <tcp_input+0x2174>
         ti->ti_seq++;
 803a788:	e0bff017 	ldw	r2,-64(fp)
 803a78c:	10800617 	ldw	r2,24(r2)
 803a790:	10c00044 	addi	r3,r2,1
 803a794:	e0bff017 	ldw	r2,-64(fp)
 803a798:	10c00615 	stw	r3,24(r2)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
 803a79c:	e0bff017 	ldw	r2,-64(fp)
 803a7a0:	10c00617 	ldw	r3,24(r2)
 803a7a4:	e0bfe417 	ldw	r2,-112(fp)
 803a7a8:	d8800115 	stw	r2,4(sp)
 803a7ac:	00800504 	movi	r2,20
 803a7b0:	d8800015 	stw	r2,0(sp)
 803a7b4:	000f883a 	mov	r7,zero
 803a7b8:	180d883a 	mov	r6,r3
 803a7bc:	e17ff017 	ldw	r5,-64(fp)
 803a7c0:	e13ffc17 	ldw	r4,-16(fp)
 803a7c4:	803c1200 	call	803c120 <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
 803a7c8:	e0bff617 	ldw	r2,-40(fp)
 803a7cc:	10001426 	beq	r2,zero,803a820 <tcp_input+0x21f8>
      (void) soabort(so);
 803a7d0:	e13ffa17 	ldw	r4,-24(fp)
 803a7d4:	8034bf00 	call	8034bf0 <soabort>
   return;
 803a7d8:	00001106 	br	803a820 <tcp_input+0x21f8>

drop:
   if (om)
 803a7dc:	e0bffd17 	ldw	r2,-12(fp)
 803a7e0:	10000226 	beq	r2,zero,803a7ec <tcp_input+0x21c4>
      (void) m_free(om);
 803a7e4:	e13ffd17 	ldw	r4,-12(fp)
 803a7e8:	80310dc0 	call	80310dc <m_free>
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
 803a7ec:	e13fe417 	ldw	r4,-112(fp)
 803a7f0:	80311e00 	call	80311e0 <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
 803a7f4:	e0bff617 	ldw	r2,-40(fp)
 803a7f8:	10000b26 	beq	r2,zero,803a828 <tcp_input+0x2200>
      (void) soabort(so);
 803a7fc:	e13ffa17 	ldw	r4,-24(fp)
 803a800:	8034bf00 	call	8034bf0 <soabort>
   return;
 803a804:	00000806 	br	803a828 <tcp_input+0x2200>
            return;
 803a808:	0001883a 	nop
 803a80c:	00000706 	br	803a82c <tcp_input+0x2204>
         return;
 803a810:	0001883a 	nop
 803a814:	00000506 	br	803a82c <tcp_input+0x2204>
   return;
 803a818:	0001883a 	nop
 803a81c:	00000306 	br	803a82c <tcp_input+0x2204>
   return;
 803a820:	0001883a 	nop
 803a824:	00000106 	br	803a82c <tcp_input+0x2204>
   return;
 803a828:	0001883a 	nop
}
 803a82c:	e037883a 	mov	sp,fp
 803a830:	dfc00117 	ldw	ra,4(sp)
 803a834:	df000017 	ldw	fp,0(sp)
 803a838:	dec00204 	addi	sp,sp,8
 803a83c:	f800283a 	ret

0803a840 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 803a840:	defff504 	addi	sp,sp,-44
 803a844:	dfc00a15 	stw	ra,40(sp)
 803a848:	df000915 	stw	fp,36(sp)
 803a84c:	df000904 	addi	fp,sp,36
 803a850:	e13ff915 	stw	r4,-28(fp)
 803a854:	e17ff815 	stw	r5,-32(fp)
 803a858:	e1bff715 	stw	r6,-36(fp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
 803a85c:	e0bff917 	ldw	r2,-28(fp)
 803a860:	10800d17 	ldw	r2,52(r2)
 803a864:	10800817 	ldw	r2,32(r2)
 803a868:	e0bffc15 	stw	r2,-16(fp)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
 803a86c:	e0bff817 	ldw	r2,-32(fp)
 803a870:	10800317 	ldw	r2,12(r2)
 803a874:	e0bfff15 	stw	r2,-4(fp)
   cnt = om->m_len;
 803a878:	e0bff817 	ldw	r2,-32(fp)
 803a87c:	10800217 	ldw	r2,8(r2)
 803a880:	e0bffd15 	stw	r2,-12(fp)
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 803a884:	00004206 	br	803a990 <tcp_dooptions+0x150>
   {
      opt = cp[0];
 803a888:	e0bfff17 	ldw	r2,-4(fp)
 803a88c:	10800003 	ldbu	r2,0(r2)
 803a890:	10803fcc 	andi	r2,r2,255
 803a894:	e0bffb15 	stw	r2,-20(fp)
      if (opt == TCPOPT_EOL)
 803a898:	e0bffb17 	ldw	r2,-20(fp)
 803a89c:	10003f26 	beq	r2,zero,803a99c <tcp_dooptions+0x15c>
         break;
      if (opt == TCPOPT_NOP)
 803a8a0:	e0bffb17 	ldw	r2,-20(fp)
 803a8a4:	10800058 	cmpnei	r2,r2,1
 803a8a8:	1000031e 	bne	r2,zero,803a8b8 <tcp_dooptions+0x78>
         optlen = 1;
 803a8ac:	00800044 	movi	r2,1
 803a8b0:	e0bffe15 	stw	r2,-8(fp)
 803a8b4:	00000706 	br	803a8d4 <tcp_dooptions+0x94>
      else 
      {
         optlen = cp[1];
 803a8b8:	e0bfff17 	ldw	r2,-4(fp)
 803a8bc:	10800044 	addi	r2,r2,1
 803a8c0:	10800003 	ldbu	r2,0(r2)
 803a8c4:	10803fcc 	andi	r2,r2,255
 803a8c8:	e0bffe15 	stw	r2,-8(fp)
         if (optlen <= 0)
 803a8cc:	e0bffe17 	ldw	r2,-8(fp)
 803a8d0:	0080340e 	bge	zero,r2,803a9a4 <tcp_dooptions+0x164>
            break;
      }

      switch (opt) 
 803a8d4:	e0bffb17 	ldw	r2,-20(fp)
 803a8d8:	10800098 	cmpnei	r2,r2,2
 803a8dc:	10001f1e 	bne	r2,zero,803a95c <tcp_dooptions+0x11c>
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
 803a8e0:	e0bffe17 	ldw	r2,-8(fp)
 803a8e4:	10800120 	cmpeqi	r2,r2,4
 803a8e8:	10001e26 	beq	r2,zero,803a964 <tcp_dooptions+0x124>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
 803a8ec:	e0bff717 	ldw	r2,-36(fp)
 803a8f0:	10800843 	ldbu	r2,33(r2)
 803a8f4:	10803fcc 	andi	r2,r2,255
 803a8f8:	1080008c 	andi	r2,r2,2
 803a8fc:	10001b26 	beq	r2,zero,803a96c <tcp_dooptions+0x12c>
            continue;
         mssval = *(u_short *)(cp + 2);
 803a900:	e0bfff17 	ldw	r2,-4(fp)
 803a904:	1080008b 	ldhu	r2,2(r2)
 803a908:	e0bffa8d 	sth	r2,-22(fp)
         mssval = ntohs(mssval);
 803a90c:	e0bffa8b 	ldhu	r2,-22(fp)
 803a910:	1004d23a 	srli	r2,r2,8
 803a914:	1007883a 	mov	r3,r2
 803a918:	e0bffa8b 	ldhu	r2,-22(fp)
 803a91c:	1004923a 	slli	r2,r2,8
 803a920:	1884b03a 	or	r2,r3,r2
 803a924:	e0bffa8d 	sth	r2,-22(fp)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 803a928:	e13ffc17 	ldw	r4,-16(fp)
 803a92c:	803ad780 	call	803ad78 <tcp_mss>
 803a930:	1007883a 	mov	r3,r2
 803a934:	e0bffa8b 	ldhu	r2,-22(fp)
 803a938:	18ffffcc 	andi	r3,r3,65535
 803a93c:	1880032e 	bgeu	r3,r2,803a94c <tcp_dooptions+0x10c>
 803a940:	e13ffc17 	ldw	r4,-16(fp)
 803a944:	803ad780 	call	803ad78 <tcp_mss>
 803a948:	00000106 	br	803a950 <tcp_dooptions+0x110>
 803a94c:	e0bffa8b 	ldhu	r2,-22(fp)
 803a950:	e0fff917 	ldw	r3,-28(fp)
 803a954:	18800a0d 	sth	r2,40(r3)
         break;
 803a958:	00000506 	br	803a970 <tcp_dooptions+0x130>
         }
         break;
#endif   /* TCP_TIMESTAMP */

      default:
         break;
 803a95c:	0001883a 	nop
 803a960:	00000306 	br	803a970 <tcp_dooptions+0x130>
            continue;
 803a964:	0001883a 	nop
 803a968:	00000106 	br	803a970 <tcp_dooptions+0x130>
            continue;
 803a96c:	0001883a 	nop
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 803a970:	e0fffd17 	ldw	r3,-12(fp)
 803a974:	e0bffe17 	ldw	r2,-8(fp)
 803a978:	1885c83a 	sub	r2,r3,r2
 803a97c:	e0bffd15 	stw	r2,-12(fp)
 803a980:	e0bffe17 	ldw	r2,-8(fp)
 803a984:	e0ffff17 	ldw	r3,-4(fp)
 803a988:	1885883a 	add	r2,r3,r2
 803a98c:	e0bfff15 	stw	r2,-4(fp)
 803a990:	e0bffd17 	ldw	r2,-12(fp)
 803a994:	00bfbc16 	blt	zero,r2,803a888 <tcp_dooptions+0x48>
 803a998:	00000306 	br	803a9a8 <tcp_dooptions+0x168>
         break;
 803a99c:	0001883a 	nop
 803a9a0:	00000106 	br	803a9a8 <tcp_dooptions+0x168>
            break;
 803a9a4:	0001883a 	nop
      }
   }
   (void) m_free(om);
 803a9a8:	e13ff817 	ldw	r4,-32(fp)
 803a9ac:	80310dc0 	call	80310dc <m_free>
      if(!gotstamp)
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
 803a9b0:	0001883a 	nop
}
 803a9b4:	e037883a 	mov	sp,fp
 803a9b8:	dfc00117 	ldw	ra,4(sp)
 803a9bc:	df000017 	ldw	fp,0(sp)
 803a9c0:	dec00204 	addi	sp,sp,8
 803a9c4:	f800283a 	ret

0803a9c8 <tcp_pulloutofband>:

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
 803a9c8:	defff804 	addi	sp,sp,-32
 803a9cc:	dfc00715 	stw	ra,28(sp)
 803a9d0:	df000615 	stw	fp,24(sp)
 803a9d4:	df000604 	addi	fp,sp,24
 803a9d8:	e13ffc15 	stw	r4,-16(fp)
 803a9dc:	e17ffb15 	stw	r5,-20(fp)
 803a9e0:	e1bffa15 	stw	r6,-24(fp)
   int   cnt   =  ti->ti_urp  -  1;
 803a9e4:	e0bffb17 	ldw	r2,-20(fp)
 803a9e8:	1080098b 	ldhu	r2,38(r2)
 803a9ec:	10bfffcc 	andi	r2,r2,65535
 803a9f0:	10bfffc4 	addi	r2,r2,-1
 803a9f4:	e0bfff15 	stw	r2,-4(fp)

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 803a9f8:	00003206 	br	803aac4 <tcp_pulloutofband+0xfc>
   {
      if (m->m_len > (unsigned)cnt) 
 803a9fc:	e0bffa17 	ldw	r2,-24(fp)
 803aa00:	10800217 	ldw	r2,8(r2)
 803aa04:	e0ffff17 	ldw	r3,-4(fp)
 803aa08:	1880242e 	bgeu	r3,r2,803aa9c <tcp_pulloutofband+0xd4>
      {
         char *   cp =  mtod(m,  char *) +  cnt;
 803aa0c:	e0bffa17 	ldw	r2,-24(fp)
 803aa10:	10c00317 	ldw	r3,12(r2)
 803aa14:	e0bfff17 	ldw	r2,-4(fp)
 803aa18:	1885883a 	add	r2,r3,r2
 803aa1c:	e0bffe15 	stw	r2,-8(fp)
         struct tcpcb * tp =  sototcpcb(so);
 803aa20:	e0bffc17 	ldw	r2,-16(fp)
 803aa24:	10800117 	ldw	r2,4(r2)
 803aa28:	10800917 	ldw	r2,36(r2)
 803aa2c:	e0bffd15 	stw	r2,-12(fp)

         tp->t_iobc = *cp;
 803aa30:	e0bffe17 	ldw	r2,-8(fp)
 803aa34:	10c00003 	ldbu	r3,0(r2)
 803aa38:	e0bffd17 	ldw	r2,-12(fp)
 803aa3c:	10c02445 	stb	r3,145(r2)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
 803aa40:	e0bffd17 	ldw	r2,-12(fp)
 803aa44:	10802403 	ldbu	r2,144(r2)
 803aa48:	10800054 	ori	r2,r2,1
 803aa4c:	1007883a 	mov	r3,r2
 803aa50:	e0bffd17 	ldw	r2,-12(fp)
 803aa54:	10c02405 	stb	r3,144(r2)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
 803aa58:	e0bffe17 	ldw	r2,-8(fp)
 803aa5c:	11000044 	addi	r4,r2,1
 803aa60:	e0bffa17 	ldw	r2,-24(fp)
 803aa64:	10c00217 	ldw	r3,8(r2)
 803aa68:	e0bfff17 	ldw	r2,-4(fp)
 803aa6c:	1885c83a 	sub	r2,r3,r2
 803aa70:	10bfffc4 	addi	r2,r2,-1
 803aa74:	100d883a 	mov	r6,r2
 803aa78:	200b883a 	mov	r5,r4
 803aa7c:	e13ffe17 	ldw	r4,-8(fp)
 803aa80:	80037cc0 	call	80037cc <memcpy>
         m->m_len--;
 803aa84:	e0bffa17 	ldw	r2,-24(fp)
 803aa88:	10800217 	ldw	r2,8(r2)
 803aa8c:	10ffffc4 	addi	r3,r2,-1
 803aa90:	e0bffa17 	ldw	r2,-24(fp)
 803aa94:	10c00215 	stw	r3,8(r2)
         return;
 803aa98:	00001106 	br	803aae0 <tcp_pulloutofband+0x118>
      }
      cnt -= m->m_len;
 803aa9c:	e0ffff17 	ldw	r3,-4(fp)
 803aaa0:	e0bffa17 	ldw	r2,-24(fp)
 803aaa4:	10800217 	ldw	r2,8(r2)
 803aaa8:	1885c83a 	sub	r2,r3,r2
 803aaac:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
 803aab0:	e0bffa17 	ldw	r2,-24(fp)
 803aab4:	10800617 	ldw	r2,24(r2)
 803aab8:	e0bffa15 	stw	r2,-24(fp)
      if (m == 0)
 803aabc:	e0bffa17 	ldw	r2,-24(fp)
 803aac0:	10000326 	beq	r2,zero,803aad0 <tcp_pulloutofband+0x108>
   while (cnt >= 0) 
 803aac4:	e0bfff17 	ldw	r2,-4(fp)
 803aac8:	103fcc0e 	bge	r2,zero,803a9fc <tcp_pulloutofband+0x34>
 803aacc:	00000106 	br	803aad4 <tcp_pulloutofband+0x10c>
         break;
 803aad0:	0001883a 	nop
   }
   panic("tcp_pulloutofband");
 803aad4:	01020174 	movhi	r4,2053
 803aad8:	210f3304 	addi	r4,r4,15564
 803aadc:	802bd8c0 	call	802bd8c <panic>
}
 803aae0:	e037883a 	mov	sp,fp
 803aae4:	dfc00117 	ldw	ra,4(sp)
 803aae8:	df000017 	ldw	fp,0(sp)
 803aaec:	dec00204 	addi	sp,sp,8
 803aaf0:	f800283a 	ret

0803aaf4 <tcp_xmit_timer>:
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
 803aaf4:	defffb04 	addi	sp,sp,-20
 803aaf8:	dfc00415 	stw	ra,16(sp)
 803aafc:	df000315 	stw	fp,12(sp)
 803ab00:	df000304 	addi	fp,sp,12
 803ab04:	e13ffd15 	stw	r4,-12(fp)
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 803ab08:	e0bffd17 	ldw	r2,-12(fp)
 803ab0c:	10801e17 	ldw	r2,120(r2)
 803ab10:	1000021e 	bne	r2,zero,803ab1c <tcp_xmit_timer+0x28>
 803ab14:	80301a80 	call	80301a8 <dtrap>
 803ab18:	00008006 	br	803ad1c <tcp_xmit_timer+0x228>
#endif

   tcpstat.tcps_rttupdated++;
 803ab1c:	008201b4 	movhi	r2,2054
 803ab20:	10bf4517 	ldw	r2,-748(r2)
 803ab24:	10c00044 	addi	r3,r2,1
 803ab28:	008201b4 	movhi	r2,2054
 803ab2c:	10ff4515 	stw	r3,-748(r2)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 803ab30:	d0e0a317 	ldw	r3,-32116(gp)
 803ab34:	e0bffd17 	ldw	r2,-12(fp)
 803ab38:	10801e17 	ldw	r2,120(r2)
 803ab3c:	1885c83a 	sub	r2,r3,r2
 803ab40:	01400c84 	movi	r5,50
 803ab44:	1009883a 	mov	r4,r2
 803ab48:	8011fdc0 	call	8011fdc <__udivsi3>
 803ab4c:	e0bffe15 	stw	r2,-8(fp)
   if(tp->t_srtt != 0)
 803ab50:	e0bffd17 	ldw	r2,-12(fp)
 803ab54:	10802017 	ldw	r2,128(r2)
 803ab58:	10004426 	beq	r2,zero,803ac6c <tcp_xmit_timer+0x178>
   {
      if(rtt == 0)      /* fast path for small round trip */
 803ab5c:	e0bffe17 	ldw	r2,-8(fp)
 803ab60:	1000131e 	bne	r2,zero,803abb0 <tcp_xmit_timer+0xbc>
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
 803ab64:	e0bffd17 	ldw	r2,-12(fp)
 803ab68:	10802017 	ldw	r2,128(r2)
 803ab6c:	10800090 	cmplti	r2,r2,2
 803ab70:	1000051e 	bne	r2,zero,803ab88 <tcp_xmit_timer+0x94>
            tp->t_srtt--;
 803ab74:	e0bffd17 	ldw	r2,-12(fp)
 803ab78:	10802017 	ldw	r2,128(r2)
 803ab7c:	10ffffc4 	addi	r3,r2,-1
 803ab80:	e0bffd17 	ldw	r2,-12(fp)
 803ab84:	10c02015 	stw	r3,128(r2)
         if(tp->t_rttvar > 1)
 803ab88:	e0bffd17 	ldw	r2,-12(fp)
 803ab8c:	10802117 	ldw	r2,132(r2)
 803ab90:	10800090 	cmplti	r2,r2,2
 803ab94:	1000421e 	bne	r2,zero,803aca0 <tcp_xmit_timer+0x1ac>
            tp->t_rttvar--;
 803ab98:	e0bffd17 	ldw	r2,-12(fp)
 803ab9c:	10802117 	ldw	r2,132(r2)
 803aba0:	10ffffc4 	addi	r3,r2,-1
 803aba4:	e0bffd17 	ldw	r2,-12(fp)
 803aba8:	10c02115 	stw	r3,132(r2)
 803abac:	00003c06 	br	803aca0 <tcp_xmit_timer+0x1ac>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
 803abb0:	e0bffe17 	ldw	r2,-8(fp)
 803abb4:	10bfffc4 	addi	r2,r2,-1
 803abb8:	100690ba 	slli	r3,r2,2
 803abbc:	e0bffd17 	ldw	r2,-12(fp)
 803abc0:	10802017 	ldw	r2,128(r2)
 803abc4:	1005d0fa 	srai	r2,r2,3
 803abc8:	1885c83a 	sub	r2,r3,r2
 803abcc:	e0bfff15 	stw	r2,-4(fp)
      if ((tp->t_srtt += delta) <= 0)
 803abd0:	e0bffd17 	ldw	r2,-12(fp)
 803abd4:	10c02017 	ldw	r3,128(r2)
 803abd8:	e0bfff17 	ldw	r2,-4(fp)
 803abdc:	1887883a 	add	r3,r3,r2
 803abe0:	e0bffd17 	ldw	r2,-12(fp)
 803abe4:	10c02015 	stw	r3,128(r2)
 803abe8:	e0bffd17 	ldw	r2,-12(fp)
 803abec:	10802017 	ldw	r2,128(r2)
 803abf0:	00800316 	blt	zero,r2,803ac00 <tcp_xmit_timer+0x10c>
         tp->t_srtt = 1;
 803abf4:	e0bffd17 	ldw	r2,-12(fp)
 803abf8:	00c00044 	movi	r3,1
 803abfc:	10c02015 	stw	r3,128(r2)
       * (scaled by 4).  The following is equivalent
       * to rfc793 smoothing with an alpha of .75
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
 803ac00:	e0bfff17 	ldw	r2,-4(fp)
 803ac04:	1000030e 	bge	r2,zero,803ac14 <tcp_xmit_timer+0x120>
         delta = -delta;
 803ac08:	e0bfff17 	ldw	r2,-4(fp)
 803ac0c:	0085c83a 	sub	r2,zero,r2
 803ac10:	e0bfff15 	stw	r2,-4(fp)
      delta -= (short)(tp->t_rttvar >> 1);
 803ac14:	e0bffd17 	ldw	r2,-12(fp)
 803ac18:	10802117 	ldw	r2,132(r2)
 803ac1c:	1005d07a 	srai	r2,r2,1
 803ac20:	10bfffcc 	andi	r2,r2,65535
 803ac24:	10a0001c 	xori	r2,r2,32768
 803ac28:	10a00004 	addi	r2,r2,-32768
 803ac2c:	e0ffff17 	ldw	r3,-4(fp)
 803ac30:	1885c83a 	sub	r2,r3,r2
 803ac34:	e0bfff15 	stw	r2,-4(fp)
      if ((tp->t_rttvar += delta) <= 0)
 803ac38:	e0bffd17 	ldw	r2,-12(fp)
 803ac3c:	10c02117 	ldw	r3,132(r2)
 803ac40:	e0bfff17 	ldw	r2,-4(fp)
 803ac44:	1887883a 	add	r3,r3,r2
 803ac48:	e0bffd17 	ldw	r2,-12(fp)
 803ac4c:	10c02115 	stw	r3,132(r2)
 803ac50:	e0bffd17 	ldw	r2,-12(fp)
 803ac54:	10802117 	ldw	r2,132(r2)
 803ac58:	00801116 	blt	zero,r2,803aca0 <tcp_xmit_timer+0x1ac>
         tp->t_rttvar = 1;
 803ac5c:	e0bffd17 	ldw	r2,-12(fp)
 803ac60:	00c00044 	movi	r3,1
 803ac64:	10c02115 	stw	r3,132(r2)
 803ac68:	00000d06 	br	803aca0 <tcp_xmit_timer+0x1ac>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
 803ac6c:	e0bffe17 	ldw	r2,-8(fp)
 803ac70:	00800216 	blt	zero,r2,803ac7c <tcp_xmit_timer+0x188>
         rtt = 1;
 803ac74:	00800044 	movi	r2,1
 803ac78:	e0bffe15 	stw	r2,-8(fp)
      tp->t_srtt = rtt << 3;
 803ac7c:	e0bffe17 	ldw	r2,-8(fp)
 803ac80:	100690fa 	slli	r3,r2,3
 803ac84:	e0bffd17 	ldw	r2,-12(fp)
 803ac88:	10c02015 	stw	r3,128(r2)
      tp->t_rttvar = rtt << 1;
 803ac8c:	e0bffe17 	ldw	r2,-8(fp)
 803ac90:	1085883a 	add	r2,r2,r2
 803ac94:	1007883a 	mov	r3,r2
 803ac98:	e0bffd17 	ldw	r2,-12(fp)
 803ac9c:	10c02115 	stw	r3,132(r2)
   }
   tp->t_rttick = 0;       /* clear RT timer */
 803aca0:	e0bffd17 	ldw	r2,-12(fp)
 803aca4:	10001e15 	stw	zero,120(r2)
   tp->t_rxtshift = 0;
 803aca8:	e0bffd17 	ldw	r2,-12(fp)
 803acac:	10000715 	stw	zero,28(r2)
   TCPT_RANGESET(tp->t_rxtcur, 
 803acb0:	e0bffd17 	ldw	r2,-12(fp)
 803acb4:	10802017 	ldw	r2,128(r2)
 803acb8:	1007d0ba 	srai	r3,r2,2
 803acbc:	e0bffd17 	ldw	r2,-12(fp)
 803acc0:	10802117 	ldw	r2,132(r2)
 803acc4:	1885883a 	add	r2,r3,r2
 803acc8:	1005d07a 	srai	r2,r2,1
 803accc:	10ffffcc 	andi	r3,r2,65535
 803acd0:	18e0001c 	xori	r3,r3,32768
 803acd4:	18e00004 	addi	r3,r3,-32768
 803acd8:	e0bffd17 	ldw	r2,-12(fp)
 803acdc:	10c00815 	stw	r3,32(r2)
 803ace0:	e0bffd17 	ldw	r2,-12(fp)
 803ace4:	10800817 	ldw	r2,32(r2)
 803ace8:	10800088 	cmpgei	r2,r2,2
 803acec:	1000041e 	bne	r2,zero,803ad00 <tcp_xmit_timer+0x20c>
 803acf0:	e0bffd17 	ldw	r2,-12(fp)
 803acf4:	00c00084 	movi	r3,2
 803acf8:	10c00815 	stw	r3,32(r2)
 803acfc:	00000706 	br	803ad1c <tcp_xmit_timer+0x228>
 803ad00:	e0bffd17 	ldw	r2,-12(fp)
 803ad04:	10800817 	ldw	r2,32(r2)
 803ad08:	10802050 	cmplti	r2,r2,129
 803ad0c:	1000031e 	bne	r2,zero,803ad1c <tcp_xmit_timer+0x228>
 803ad10:	e0bffd17 	ldw	r2,-12(fp)
 803ad14:	00c02004 	movi	r3,128
 803ad18:	10c00815 	stw	r3,32(r2)
    ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1,
    TCPTV_MIN, TCPTV_REXMTMAX);
}
 803ad1c:	e037883a 	mov	sp,fp
 803ad20:	dfc00117 	ldw	ra,4(sp)
 803ad24:	df000017 	ldw	fp,0(sp)
 803ad28:	dec00204 	addi	sp,sp,8
 803ad2c:	f800283a 	ret

0803ad30 <ip4_tcpmss>:


#ifdef IP_V4
int
ip4_tcpmss(struct socket * so)
{
 803ad30:	defffd04 	addi	sp,sp,-12
 803ad34:	df000215 	stw	fp,8(sp)
 803ad38:	df000204 	addi	fp,sp,8
 803ad3c:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   ifp = so->so_pcb->ifp;
 803ad40:	e0bffe17 	ldw	r2,-8(fp)
 803ad44:	10800117 	ldw	r2,4(r2)
 803ad48:	10800a17 	ldw	r2,40(r2)
 803ad4c:	e0bfff15 	stw	r2,-4(fp)
   return(ifp->n_mtu - (40 + ifp->n_lnh));
 803ad50:	e0bfff17 	ldw	r2,-4(fp)
 803ad54:	10c00917 	ldw	r3,36(r2)
 803ad58:	e0bfff17 	ldw	r2,-4(fp)
 803ad5c:	10800817 	ldw	r2,32(r2)
 803ad60:	10800a04 	addi	r2,r2,40
 803ad64:	1885c83a 	sub	r2,r3,r2
}
 803ad68:	e037883a 	mov	sp,fp
 803ad6c:	df000017 	ldw	fp,0(sp)
 803ad70:	dec00104 	addi	sp,sp,4
 803ad74:	f800283a 	ret

0803ad78 <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
 803ad78:	defffa04 	addi	sp,sp,-24
 803ad7c:	dfc00515 	stw	ra,20(sp)
 803ad80:	df000415 	stw	fp,16(sp)
 803ad84:	df000404 	addi	fp,sp,16
 803ad88:	e13ffc15 	stw	r4,-16(fp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
 803ad8c:	e0bffc17 	ldw	r2,-16(fp)
 803ad90:	10000726 	beq	r2,zero,803adb0 <tcp_mss+0x38>
       (so->so_pcb == NULL) ||
 803ad94:	e0bffc17 	ldw	r2,-16(fp)
 803ad98:	10800117 	ldw	r2,4(r2)
   if ((so == NULL) ||
 803ad9c:	10000426 	beq	r2,zero,803adb0 <tcp_mss+0x38>
       (so->so_pcb->ifp == NULL))
 803ada0:	e0bffc17 	ldw	r2,-16(fp)
 803ada4:	10800117 	ldw	r2,4(r2)
 803ada8:	10800a17 	ldw	r2,40(r2)
       (so->so_pcb == NULL) ||
 803adac:	1000061e 	bne	r2,zero,803adc8 <tcp_mss+0x50>
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
 803adb0:	e0bffc17 	ldw	r2,-16(fp)
 803adb4:	10800517 	ldw	r2,20(r2)
 803adb8:	10800098 	cmpnei	r2,r2,2
 803adbc:	1000021e 	bne	r2,zero,803adc8 <tcp_mss+0x50>
         return TCP_MSS;            /* user defined */
 803adc0:	00816d04 	movi	r2,1460
 803adc4:	00002506 	br	803ae5c <tcp_mss+0xe4>
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
 803adc8:	e13ffc17 	ldw	r4,-16(fp)
 803adcc:	803ad300 	call	803ad30 <ip4_tcpmss>
 803add0:	e0bfff15 	stw	r2,-4(fp)
#endif         /* end of dual mode */
#else          /* no IP_v4, assume V6 only */
      mss = ip6_tcpmss(so, ifp);
#endif         /* end messy domain defines */

   if (mss > TCP_MSS)    /* check upper limit from compile */
 803add4:	e0bfff17 	ldw	r2,-4(fp)
 803add8:	10816d50 	cmplti	r2,r2,1461
 803addc:	1000021e 	bne	r2,zero,803ade8 <tcp_mss+0x70>
      mss = TCP_MSS;
 803ade0:	00816d04 	movi	r2,1460
 803ade4:	e0bfff15 	stw	r2,-4(fp)

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
 803ade8:	e0bffc17 	ldw	r2,-16(fp)
 803adec:	10800117 	ldw	r2,4(r2)
 803adf0:	e0bffe15 	stw	r2,-8(fp)
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
 803adf4:	e0bffe17 	ldw	r2,-8(fp)
 803adf8:	10800917 	ldw	r2,36(r2)
 803adfc:	e0bffd15 	stw	r2,-12(fp)
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
 803ae00:	e0bffd17 	ldw	r2,-12(fp)
 803ae04:	10800b0b 	ldhu	r2,44(r2)
 803ae08:	10bfffcc 	andi	r2,r2,65535
 803ae0c:	1081000c 	andi	r2,r2,1024
 803ae10:	10000426 	beq	r2,zero,803ae24 <tcp_mss+0xac>
      return tp->t_maxseg;    /* yup */
 803ae14:	e0bffd17 	ldw	r2,-12(fp)
 803ae18:	10800a0b 	ldhu	r2,40(r2)
 803ae1c:	10bfffcc 	andi	r2,r2,65535
 803ae20:	00000e06 	br	803ae5c <tcp_mss+0xe4>
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
 803ae24:	e0bffd17 	ldw	r2,-12(fp)
 803ae28:	10800a0b 	ldhu	r2,40(r2)
 803ae2c:	10bfffcc 	andi	r2,r2,65535
 803ae30:	10000926 	beq	r2,zero,803ae58 <tcp_mss+0xe0>
 803ae34:	e0bffd17 	ldw	r2,-12(fp)
 803ae38:	10800a0b 	ldhu	r2,40(r2)
 803ae3c:	10ffffcc 	andi	r3,r2,65535
 803ae40:	e0bfff17 	ldw	r2,-4(fp)
 803ae44:	1880040e 	bge	r3,r2,803ae58 <tcp_mss+0xe0>
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
 803ae48:	e0bffd17 	ldw	r2,-12(fp)
 803ae4c:	10800a0b 	ldhu	r2,40(r2)
 803ae50:	10bfffcc 	andi	r2,r2,65535
 803ae54:	e0bfff15 	stw	r2,-4(fp)
   }

   return mss;
 803ae58:	e0bfff17 	ldw	r2,-4(fp)
}
 803ae5c:	e037883a 	mov	sp,fp
 803ae60:	dfc00117 	ldw	ra,4(sp)
 803ae64:	df000017 	ldw	fp,0(sp)
 803ae68:	dec00204 	addi	sp,sp,8
 803ae6c:	f800283a 	ret

0803ae70 <tcp_output>:
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 803ae70:	deffe804 	addi	sp,sp,-96
 803ae74:	dfc01715 	stw	ra,92(sp)
 803ae78:	df001615 	stw	fp,88(sp)
 803ae7c:	df001604 	addi	fp,sp,88
 803ae80:	e13fea15 	stw	r4,-88(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 803ae84:	e0bfea17 	ldw	r2,-88(fp)
 803ae88:	10800d17 	ldw	r2,52(r2)
 803ae8c:	10800817 	ldw	r2,32(r2)
 803ae90:	e0bff715 	stw	r2,-36(fp)
   int   len;
   long  win;
   int   off,  flags,   error;
   struct mbuf *  m;
   struct tcpiphdr * ti;
   unsigned optlen = 0;
 803ae94:	e03ffb15 	stw	zero,-20(fp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 803ae98:	e0bfea17 	ldw	r2,-88(fp)
 803ae9c:	10c01a17 	ldw	r3,104(r2)
 803aea0:	e0bfea17 	ldw	r2,-88(fp)
 803aea4:	10800e17 	ldw	r2,56(r2)
 803aea8:	1885003a 	cmpeq	r2,r3,r2
 803aeac:	10803fcc 	andi	r2,r2,255
 803aeb0:	e0bff615 	stw	r2,-40(fp)

again:
   sendalot = 0;
 803aeb4:	e03ffa15 	stw	zero,-24(fp)
   off = (int)(tp->snd_nxt - tp->snd_una);
 803aeb8:	e0bfea17 	ldw	r2,-88(fp)
 803aebc:	10c00f17 	ldw	r3,60(r2)
 803aec0:	e0bfea17 	ldw	r2,-88(fp)
 803aec4:	10800e17 	ldw	r2,56(r2)
 803aec8:	1885c83a 	sub	r2,r3,r2
 803aecc:	e0bff515 	stw	r2,-44(fp)
   win = (long)tp->snd_wnd;   /* set basic send window */
 803aed0:	e0bfea17 	ldw	r2,-88(fp)
 803aed4:	10801417 	ldw	r2,80(r2)
 803aed8:	e0bffe15 	stw	r2,-8(fp)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
 803aedc:	e0bfea17 	ldw	r2,-88(fp)
 803aee0:	10801b17 	ldw	r2,108(r2)
 803aee4:	1007883a 	mov	r3,r2
 803aee8:	e0bffe17 	ldw	r2,-8(fp)
 803aeec:	1880060e 	bge	r3,r2,803af08 <tcp_output+0x98>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
 803aef0:	e0bfea17 	ldw	r2,-88(fp)
 803aef4:	10801b17 	ldw	r2,108(r2)
 803aef8:	1007883a 	mov	r3,r2
 803aefc:	00bfff04 	movi	r2,-4
 803af00:	1884703a 	and	r2,r3,r2
 803af04:	e0bffe15 	stw	r2,-8(fp)
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
 803af08:	e0bfea17 	ldw	r2,-88(fp)
 803af0c:	10800a83 	ldbu	r2,42(r2)
 803af10:	10803fcc 	andi	r2,r2,255
 803af14:	1080201c 	xori	r2,r2,128
 803af18:	10bfe004 	addi	r2,r2,-128
 803af1c:	10000926 	beq	r2,zero,803af44 <tcp_output+0xd4>
   {
      if (win == 0)
 803af20:	e0bffe17 	ldw	r2,-8(fp)
 803af24:	1000031e 	bne	r2,zero,803af34 <tcp_output+0xc4>
         win = 1;
 803af28:	00800044 	movi	r2,1
 803af2c:	e0bffe15 	stw	r2,-8(fp)
 803af30:	00000406 	br	803af44 <tcp_output+0xd4>
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
 803af34:	e0bfea17 	ldw	r2,-88(fp)
 803af38:	10000415 	stw	zero,16(r2)
         tp->t_rxtshift = 0;
 803af3c:	e0bfea17 	ldw	r2,-88(fp)
 803af40:	10000715 	stw	zero,28(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 803af44:	e0bff717 	ldw	r2,-36(fp)
 803af48:	10801217 	ldw	r2,72(r2)
 803af4c:	e0fffe17 	ldw	r3,-8(fp)
 803af50:	1880012e 	bgeu	r3,r2,803af58 <tcp_output+0xe8>
 803af54:	1805883a 	mov	r2,r3
 803af58:	1007883a 	mov	r3,r2
 803af5c:	e0bff517 	ldw	r2,-44(fp)
 803af60:	1885c83a 	sub	r2,r3,r2
 803af64:	e0bfff15 	stw	r2,-4(fp)
   }

   flags = tcp_outflags[tp->t_state];
 803af68:	e0bfea17 	ldw	r2,-88(fp)
 803af6c:	10c00217 	ldw	r3,8(r2)
 803af70:	00820174 	movhi	r2,2053
 803af74:	1885883a 	add	r2,r3,r2
 803af78:	109afe03 	ldbu	r2,27640(r2)
 803af7c:	10803fcc 	andi	r2,r2,255
 803af80:	e0bffd15 	stw	r2,-12(fp)
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
 803af84:	e0bffd17 	ldw	r2,-12(fp)
 803af88:	1080008c 	andi	r2,r2,2
 803af8c:	10000926 	beq	r2,zero,803afb4 <tcp_output+0x144>
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
 803af90:	e0fffb17 	ldw	r3,-20(fp)
 803af94:	d0a0ae04 	addi	r2,gp,-32072
 803af98:	1885883a 	add	r2,r3,r2
 803af9c:	e1fff717 	ldw	r7,-36(fp)
 803afa0:	e1bffd17 	ldw	r6,-12(fp)
 803afa4:	100b883a 	mov	r5,r2
 803afa8:	e13fea17 	ldw	r4,-88(fp)
 803afac:	803bf040 	call	803bf04 <bld_options>
 803afb0:	e0bffb15 	stw	r2,-20(fp)
   }
#endif

   if (len < 0)
 803afb4:	e0bfff17 	ldw	r2,-4(fp)
 803afb8:	1000090e 	bge	r2,zero,803afe0 <tcp_output+0x170>
       * cancel pending retransmit and pull snd_nxt
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
 803afbc:	e03fff15 	stw	zero,-4(fp)
      if (win == 0) 
 803afc0:	e0bffe17 	ldw	r2,-8(fp)
 803afc4:	1000061e 	bne	r2,zero,803afe0 <tcp_output+0x170>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 803afc8:	e0bfea17 	ldw	r2,-88(fp)
 803afcc:	10000315 	stw	zero,12(r2)
         tp->snd_nxt = tp->snd_una;
 803afd0:	e0bfea17 	ldw	r2,-88(fp)
 803afd4:	10c00e17 	ldw	r3,56(r2)
 803afd8:	e0bfea17 	ldw	r2,-88(fp)
 803afdc:	10c00f15 	stw	r3,60(r2)
      }
   }

   if (len > (int)tp->t_maxseg)
 803afe0:	e0bfea17 	ldw	r2,-88(fp)
 803afe4:	10800a0b 	ldhu	r2,40(r2)
 803afe8:	10ffffcc 	andi	r3,r2,65535
 803afec:	e0bfff17 	ldw	r2,-4(fp)
 803aff0:	1880060e 	bge	r3,r2,803b00c <tcp_output+0x19c>
   {
      len = tp->t_maxseg;
 803aff4:	e0bfea17 	ldw	r2,-88(fp)
 803aff8:	10800a0b 	ldhu	r2,40(r2)
 803affc:	10bfffcc 	andi	r2,r2,65535
 803b000:	e0bfff15 	stw	r2,-4(fp)
      sendalot = 1;
 803b004:	00800044 	movi	r2,1
 803b008:	e0bffa15 	stw	r2,-24(fp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 803b00c:	e0bfea17 	ldw	r2,-88(fp)
 803b010:	10c00f17 	ldw	r3,60(r2)
 803b014:	e0bfff17 	ldw	r2,-4(fp)
 803b018:	1887883a 	add	r3,r3,r2
 803b01c:	e0bfea17 	ldw	r2,-88(fp)
 803b020:	11000e17 	ldw	r4,56(r2)
 803b024:	e0bff717 	ldw	r2,-36(fp)
 803b028:	10801217 	ldw	r2,72(r2)
 803b02c:	2085883a 	add	r2,r4,r2
 803b030:	1885c83a 	sub	r2,r3,r2
 803b034:	1000040e 	bge	r2,zero,803b048 <tcp_output+0x1d8>
      flags &= ~TH_FIN;
 803b038:	e0fffd17 	ldw	r3,-12(fp)
 803b03c:	00bfff84 	movi	r2,-2
 803b040:	1884703a 	and	r2,r3,r2
 803b044:	e0bffd15 	stw	r2,-12(fp)
   win = (long)(sbspace(&so->so_rcv));
 803b048:	e0bff717 	ldw	r2,-36(fp)
 803b04c:	10800b17 	ldw	r2,44(r2)
 803b050:	1007883a 	mov	r3,r2
 803b054:	e0bff717 	ldw	r2,-36(fp)
 803b058:	10800a17 	ldw	r2,40(r2)
 803b05c:	1885c83a 	sub	r2,r3,r2
 803b060:	10000616 	blt	r2,zero,803b07c <tcp_output+0x20c>
 803b064:	e0bff717 	ldw	r2,-36(fp)
 803b068:	10c00b17 	ldw	r3,44(r2)
 803b06c:	e0bff717 	ldw	r2,-36(fp)
 803b070:	10800a17 	ldw	r2,40(r2)
 803b074:	1885c83a 	sub	r2,r3,r2
 803b078:	00000106 	br	803b080 <tcp_output+0x210>
 803b07c:	0005883a 	mov	r2,zero
 803b080:	e0bffe15 	stw	r2,-8(fp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
 803b084:	e0bffd17 	ldw	r2,-12(fp)
 803b088:	1080004c 	andi	r2,r2,1
 803b08c:	10000d26 	beq	r2,zero,803b0c4 <tcp_output+0x254>
       (so->so_snd.sb_cc == 0) &&
 803b090:	e0bff717 	ldw	r2,-36(fp)
 803b094:	10801217 	ldw	r2,72(r2)
   if ((flags & TH_FIN) &&
 803b098:	10000a1e 	bne	r2,zero,803b0c4 <tcp_output+0x254>
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
 803b09c:	e0bfea17 	ldw	r2,-88(fp)
 803b0a0:	10800b0b 	ldhu	r2,44(r2)
 803b0a4:	10bfffcc 	andi	r2,r2,65535
 803b0a8:	1080040c 	andi	r2,r2,16
       (so->so_snd.sb_cc == 0) &&
 803b0ac:	10006626 	beq	r2,zero,803b248 <tcp_output+0x3d8>
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
 803b0b0:	e0bfea17 	ldw	r2,-88(fp)
 803b0b4:	10c00f17 	ldw	r3,60(r2)
 803b0b8:	e0bfea17 	ldw	r2,-88(fp)
 803b0bc:	10800e17 	ldw	r2,56(r2)
 803b0c0:	18806126 	beq	r3,r2,803b248 <tcp_output+0x3d8>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
 803b0c4:	e0bfea17 	ldw	r2,-88(fp)
 803b0c8:	10800b0b 	ldhu	r2,44(r2)
 803b0cc:	10bfffcc 	andi	r2,r2,65535
 803b0d0:	1080004c 	andi	r2,r2,1
 803b0d4:	10005e1e 	bne	r2,zero,803b250 <tcp_output+0x3e0>
      goto send;
   if (flags & (TH_SYN|TH_RST))
 803b0d8:	e0bffd17 	ldw	r2,-12(fp)
 803b0dc:	1080018c 	andi	r2,r2,6
 803b0e0:	10005d1e 	bne	r2,zero,803b258 <tcp_output+0x3e8>
      goto send;
   if (SEQ_GT(tp->snd_up, tp->snd_una))
 803b0e4:	e0bfea17 	ldw	r2,-88(fp)
 803b0e8:	10c01017 	ldw	r3,64(r2)
 803b0ec:	e0bfea17 	ldw	r2,-88(fp)
 803b0f0:	10800e17 	ldw	r2,56(r2)
 803b0f4:	1885c83a 	sub	r2,r3,r2
 803b0f8:	00805916 	blt	zero,r2,803b260 <tcp_output+0x3f0>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
 803b0fc:	e0bfff17 	ldw	r2,-4(fp)
 803b100:	10002426 	beq	r2,zero,803b194 <tcp_output+0x324>
   {
      if (len == (int)tp->t_maxseg)
 803b104:	e0bfea17 	ldw	r2,-88(fp)
 803b108:	10800a0b 	ldhu	r2,40(r2)
 803b10c:	10bfffcc 	andi	r2,r2,65535
 803b110:	e0ffff17 	ldw	r3,-4(fp)
 803b114:	18805426 	beq	r3,r2,803b268 <tcp_output+0x3f8>
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
 803b118:	e0bff617 	ldw	r2,-40(fp)
 803b11c:	1000051e 	bne	r2,zero,803b134 <tcp_output+0x2c4>
 803b120:	e0bfea17 	ldw	r2,-88(fp)
 803b124:	10800b0b 	ldhu	r2,44(r2)
 803b128:	10bfffcc 	andi	r2,r2,65535
 803b12c:	1080010c 	andi	r2,r2,4
 803b130:	10000626 	beq	r2,zero,803b14c <tcp_output+0x2dc>
          len + off >= (int)so->so_snd.sb_cc)
 803b134:	e0ffff17 	ldw	r3,-4(fp)
 803b138:	e0bff517 	ldw	r2,-44(fp)
 803b13c:	1885883a 	add	r2,r3,r2
 803b140:	e0fff717 	ldw	r3,-36(fp)
 803b144:	18c01217 	ldw	r3,72(r3)
      if ((idle || tp->t_flags & TF_NODELAY) &&
 803b148:	10c0490e 	bge	r2,r3,803b270 <tcp_output+0x400>
      {
         goto send;
      }
      if (tp->t_force)
 803b14c:	e0bfea17 	ldw	r2,-88(fp)
 803b150:	10800a83 	ldbu	r2,42(r2)
 803b154:	10803fcc 	andi	r2,r2,255
 803b158:	1080201c 	xori	r2,r2,128
 803b15c:	10bfe004 	addi	r2,r2,-128
 803b160:	1000451e 	bne	r2,zero,803b278 <tcp_output+0x408>
         goto send;
      if (len >= (int)(tp->max_sndwnd / 2))
 803b164:	e0bfea17 	ldw	r2,-88(fp)
 803b168:	10802317 	ldw	r2,140(r2)
 803b16c:	1004d07a 	srli	r2,r2,1
 803b170:	1007883a 	mov	r3,r2
 803b174:	e0bfff17 	ldw	r2,-4(fp)
 803b178:	10c0410e 	bge	r2,r3,803b280 <tcp_output+0x410>
         goto send;
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
 803b17c:	e0bfea17 	ldw	r2,-88(fp)
 803b180:	10c00f17 	ldw	r3,60(r2)
 803b184:	e0bfea17 	ldw	r2,-88(fp)
 803b188:	10801a17 	ldw	r2,104(r2)
 803b18c:	1885c83a 	sub	r2,r3,r2
 803b190:	10003d16 	blt	r2,zero,803b288 <tcp_output+0x418>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
 803b194:	e0bffe17 	ldw	r2,-8(fp)
 803b198:	00801c0e 	bge	zero,r2,803b20c <tcp_output+0x39c>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
 803b19c:	e0bfea17 	ldw	r2,-88(fp)
 803b1a0:	10c01917 	ldw	r3,100(r2)
 803b1a4:	e0bfea17 	ldw	r2,-88(fp)
 803b1a8:	10801617 	ldw	r2,88(r2)
 803b1ac:	1885c83a 	sub	r2,r3,r2
 803b1b0:	1007883a 	mov	r3,r2
 803b1b4:	e0bffe17 	ldw	r2,-8(fp)
 803b1b8:	10c5c83a 	sub	r2,r2,r3
 803b1bc:	e0bff415 	stw	r2,-48(fp)

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
 803b1c0:	e0bff717 	ldw	r2,-36(fp)
 803b1c4:	10800a17 	ldw	r2,40(r2)
 803b1c8:	1000071e 	bne	r2,zero,803b1e8 <tcp_output+0x378>
 803b1cc:	e0bfea17 	ldw	r2,-88(fp)
 803b1d0:	10800a0b 	ldhu	r2,40(r2)
 803b1d4:	10bfffcc 	andi	r2,r2,65535
 803b1d8:	1085883a 	add	r2,r2,r2
 803b1dc:	1007883a 	mov	r3,r2
 803b1e0:	e0bff417 	ldw	r2,-48(fp)
 803b1e4:	10c02a0e 	bge	r2,r3,803b290 <tcp_output+0x420>
         goto send;
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
 803b1e8:	e0bff417 	ldw	r2,-48(fp)
 803b1ec:	10c01924 	muli	r3,r2,100
 803b1f0:	e0bff717 	ldw	r2,-36(fp)
 803b1f4:	10800b17 	ldw	r2,44(r2)
 803b1f8:	100b883a 	mov	r5,r2
 803b1fc:	1809883a 	mov	r4,r3
 803b200:	8011fdc0 	call	8011fdc <__udivsi3>
 803b204:	108008f0 	cmpltui	r2,r2,35
 803b208:	10002326 	beq	r2,zero,803b298 <tcp_output+0x428>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 803b20c:	e0bff717 	ldw	r2,-36(fp)
 803b210:	10801217 	ldw	r2,72(r2)
 803b214:	10000a26 	beq	r2,zero,803b240 <tcp_output+0x3d0>
 803b218:	e0bfea17 	ldw	r2,-88(fp)
 803b21c:	10800317 	ldw	r2,12(r2)
 803b220:	1000071e 	bne	r2,zero,803b240 <tcp_output+0x3d0>
       tp->t_timer[TCPT_PERSIST] == 0) 
 803b224:	e0bfea17 	ldw	r2,-88(fp)
 803b228:	10800417 	ldw	r2,16(r2)
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 803b22c:	1000041e 	bne	r2,zero,803b240 <tcp_output+0x3d0>
   {
      tp->t_rxtshift = 0;
 803b230:	e0bfea17 	ldw	r2,-88(fp)
 803b234:	10000715 	stw	zero,28(r2)
      tcp_setpersist(tp);
 803b238:	e13fea17 	ldw	r4,-88(fp)
 803b23c:	803be080 	call	803be08 <tcp_setpersist>
   }

   /*
    * No reason to send a segment, just return.
    */
   return (0);
 803b240:	0005883a 	mov	r2,zero
 803b244:	0002eb06 	br	803bdf4 <tcp_output+0xf84>
      goto send;
 803b248:	0001883a 	nop
 803b24c:	00001306 	br	803b29c <tcp_output+0x42c>
      goto send;
 803b250:	0001883a 	nop
 803b254:	00001106 	br	803b29c <tcp_output+0x42c>
      goto send;
 803b258:	0001883a 	nop
 803b25c:	00000f06 	br	803b29c <tcp_output+0x42c>
      goto send;
 803b260:	0001883a 	nop
 803b264:	00000d06 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b268:	0001883a 	nop
 803b26c:	00000b06 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b270:	0001883a 	nop
 803b274:	00000906 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b278:	0001883a 	nop
 803b27c:	00000706 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b280:	0001883a 	nop
 803b284:	00000506 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b288:	0001883a 	nop
 803b28c:	00000306 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b290:	0001883a 	nop
 803b294:	00000106 	br	803b29c <tcp_output+0x42c>
         goto send;
 803b298:	0001883a 	nop

send:
   ENTER_CRIT_SECTION(tp);
 803b29c:	80303680 	call	8030368 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
 803b2a0:	e0bff517 	ldw	r2,-44(fp)
 803b2a4:	e0bff815 	stw	r2,-32(fp)
   sendm = so->so_snd.sb_mb;
 803b2a8:	e0bff717 	ldw	r2,-36(fp)
 803b2ac:	10801817 	ldw	r2,96(r2)
 803b2b0:	e0bff915 	stw	r2,-28(fp)
   if (len)
 803b2b4:	e0bfff17 	ldw	r2,-4(fp)
 803b2b8:	10005526 	beq	r2,zero,803b410 <tcp_output+0x5a0>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 803b2bc:	00000a06 	br	803b2e8 <tcp_output+0x478>
      {
         bufoff -= sendm->m_len;
 803b2c0:	e0fff817 	ldw	r3,-32(fp)
 803b2c4:	e0bff917 	ldw	r2,-28(fp)
 803b2c8:	10800217 	ldw	r2,8(r2)
 803b2cc:	1885c83a 	sub	r2,r3,r2
 803b2d0:	e0bff815 	stw	r2,-32(fp)
         if (bufoff < 0)   /* if off is in this buffer, break */
 803b2d4:	e0bff817 	ldw	r2,-32(fp)
 803b2d8:	10000616 	blt	r2,zero,803b2f4 <tcp_output+0x484>
            break;
         sendm = sendm->m_next;
 803b2dc:	e0bff917 	ldw	r2,-28(fp)
 803b2e0:	10800617 	ldw	r2,24(r2)
 803b2e4:	e0bff915 	stw	r2,-28(fp)
      while (sendm)  /* loop through socket send list */
 803b2e8:	e0bff917 	ldw	r2,-28(fp)
 803b2ec:	103ff41e 	bne	r2,zero,803b2c0 <tcp_output+0x450>
 803b2f0:	00000106 	br	803b2f8 <tcp_output+0x488>
            break;
 803b2f4:	0001883a 	nop
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
 803b2f8:	e0bff917 	ldw	r2,-28(fp)
 803b2fc:	1000011e 	bne	r2,zero,803b304 <tcp_output+0x494>
 803b300:	80301a80 	call	80301a8 <dtrap>
      bufoff += sendm->m_len; /* index to next data to send in msend */
 803b304:	e0bff917 	ldw	r2,-28(fp)
 803b308:	10c00217 	ldw	r3,8(r2)
 803b30c:	e0bff817 	ldw	r2,-32(fp)
 803b310:	1885883a 	add	r2,r3,r2
 803b314:	e0bff815 	stw	r2,-32(fp)

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
 803b318:	e0bff917 	ldw	r2,-28(fp)
 803b31c:	10800617 	ldw	r2,24(r2)
 803b320:	10000b26 	beq	r2,zero,803b350 <tcp_output+0x4e0>
 803b324:	e0bff917 	ldw	r2,-28(fp)
 803b328:	10800217 	ldw	r2,8(r2)
 803b32c:	1007883a 	mov	r3,r2
 803b330:	e0bfff17 	ldw	r2,-4(fp)
 803b334:	1880060e 	bge	r3,r2,803b350 <tcp_output+0x4e0>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 803b338:	e0fffd17 	ldw	r3,-12(fp)
 803b33c:	00bfff84 	movi	r2,-2
 803b340:	1884703a 	and	r2,r3,r2
 803b344:	e0bffd15 	stw	r2,-12(fp)
         sendalot = 1;     /* set to send more segments */
 803b348:	00800044 	movi	r2,1
 803b34c:	e0bffa15 	stw	r2,-24(fp)
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
 803b350:	e0bffd17 	ldw	r2,-12(fp)
 803b354:	1080004c 	andi	r2,r2,1
 803b358:	10000826 	beq	r2,zero,803b37c <tcp_output+0x50c>
 803b35c:	e0bff717 	ldw	r2,-36(fp)
 803b360:	10801217 	ldw	r2,72(r2)
 803b364:	e0ffff17 	ldw	r3,-4(fp)
 803b368:	1880042e 	bgeu	r3,r2,803b37c <tcp_output+0x50c>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 803b36c:	e0fffd17 	ldw	r3,-12(fp)
 803b370:	00bfff84 	movi	r2,-2
 803b374:	1884703a 	and	r2,r3,r2
 803b378:	e0bffd15 	stw	r2,-12(fp)
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
 803b37c:	e0bff917 	ldw	r2,-28(fp)
 803b380:	10800217 	ldw	r2,8(r2)
 803b384:	1007883a 	mov	r3,r2
 803b388:	e0bfff17 	ldw	r2,-4(fp)
 803b38c:	1880010e 	bge	r3,r2,803b394 <tcp_output+0x524>
 803b390:	1805883a 	mov	r2,r3
 803b394:	e0bfff15 	stw	r2,-4(fp)
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 803b398:	e0bff817 	ldw	r2,-32(fp)
 803b39c:	1000071e 	bne	r2,zero,803b3bc <tcp_output+0x54c>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
 803b3a0:	e0bff917 	ldw	r2,-28(fp)
 803b3a4:	10c00317 	ldw	r3,12(r2)
 803b3a8:	e0bff917 	ldw	r2,-28(fp)
 803b3ac:	10800417 	ldw	r2,16(r2)
 803b3b0:	1885c83a 	sub	r2,r3,r2
 803b3b4:	108000cc 	andi	r2,r2,3
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 803b3b8:	10001526 	beq	r2,zero,803b410 <tcp_output+0x5a0>
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
 803b3bc:	e0bff917 	ldw	r2,-28(fp)
 803b3c0:	10c00217 	ldw	r3,8(r2)
 803b3c4:	e0bff817 	ldw	r2,-32(fp)
 803b3c8:	1885c83a 	sub	r2,r3,r2
 803b3cc:	1007883a 	mov	r3,r2
 803b3d0:	e0bfff17 	ldw	r2,-4(fp)
 803b3d4:	1880010e 	bge	r3,r2,803b3dc <tcp_output+0x56c>
 803b3d8:	1805883a 	mov	r2,r3
 803b3dc:	e0bfff15 	stw	r2,-4(fp)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 803b3e0:	d0a03317 	ldw	r2,-32564(gp)
 803b3e4:	10bff204 	addi	r2,r2,-56
 803b3e8:	1007883a 	mov	r3,r2
 803b3ec:	e0bfff17 	ldw	r2,-4(fp)
 803b3f0:	1880070e 	bge	r3,r2,803b410 <tcp_output+0x5a0>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
 803b3f4:	008201b4 	movhi	r2,2054
 803b3f8:	10be7717 	ldw	r2,-1572(r2)
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 803b3fc:	10800088 	cmpgei	r2,r2,2
 803b400:	1000031e 	bne	r2,zero,803b410 <tcp_output+0x5a0>
         {
            len = lilbufsiz - HDRSLEN;
 803b404:	d0a03317 	ldw	r2,-32564(gp)
 803b408:	10bff204 	addi	r2,r2,-56
 803b40c:	e0bfff15 	stw	r2,-4(fp)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
 803b410:	e0bfff17 	ldw	r2,-4(fp)
 803b414:	10003526 	beq	r2,zero,803b4ec <tcp_output+0x67c>
 803b418:	e0bff817 	ldw	r2,-32(fp)
 803b41c:	1000331e 	bne	r2,zero,803b4ec <tcp_output+0x67c>
       (sendm->pkt->inuse == 1) &&
 803b420:	e0bff917 	ldw	r2,-28(fp)
 803b424:	10800117 	ldw	r2,4(r2)
 803b428:	10800917 	ldw	r2,36(r2)
   if (len && (bufoff == 0) && 
 803b42c:	10800058 	cmpnei	r2,r2,1
 803b430:	10002e1e 	bne	r2,zero,803b4ec <tcp_output+0x67c>
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
 803b434:	e0bff917 	ldw	r2,-28(fp)
 803b438:	10c00317 	ldw	r3,12(r2)
 803b43c:	e0bff917 	ldw	r2,-28(fp)
 803b440:	10800417 	ldw	r2,16(r2)
 803b444:	1885c83a 	sub	r2,r3,r2
 803b448:	108000cc 	andi	r2,r2,3
       (sendm->pkt->inuse == 1) &&
 803b44c:	1000271e 	bne	r2,zero,803b4ec <tcp_output+0x67c>
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
 803b450:	e0bffb17 	ldw	r2,-20(fp)
 803b454:	1000251e 	bne	r2,zero,803b4ec <tcp_output+0x67c>
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
 803b458:	000b883a 	mov	r5,zero
 803b45c:	01000084 	movi	r4,2
 803b460:	8030f540 	call	8030f54 <m_getnbuf>
 803b464:	e0bffc15 	stw	r2,-16(fp)
      if (!m)
 803b468:	e0bffc17 	ldw	r2,-16(fp)
 803b46c:	1000031e 	bne	r2,zero,803b47c <tcp_output+0x60c>
      {
         EXIT_CRIT_SECTION(tp);
 803b470:	80303c80 	call	80303c8 <irq_Unmask>
         return (ENOBUFS);
 803b474:	00801a44 	movi	r2,105
 803b478:	00025e06 	br	803bdf4 <tcp_output+0xf84>
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
 803b47c:	e0bff917 	ldw	r2,-28(fp)
 803b480:	10c00117 	ldw	r3,4(r2)
 803b484:	e0bffc17 	ldw	r2,-16(fp)
 803b488:	10c00115 	stw	r3,4(r2)
      m->pkt->inuse++;     /* bump packet's use count */
 803b48c:	e0bffc17 	ldw	r2,-16(fp)
 803b490:	10800117 	ldw	r2,4(r2)
 803b494:	10c00917 	ldw	r3,36(r2)
 803b498:	18c00044 	addi	r3,r3,1
 803b49c:	10c00915 	stw	r3,36(r2)
      m->m_base = sendm->m_base; /* clone mbuf members */
 803b4a0:	e0bff917 	ldw	r2,-28(fp)
 803b4a4:	10c00417 	ldw	r3,16(r2)
 803b4a8:	e0bffc17 	ldw	r2,-16(fp)
 803b4ac:	10c00415 	stw	r3,16(r2)
      m->m_memsz = sendm->m_memsz;
 803b4b0:	e0bff917 	ldw	r2,-28(fp)
 803b4b4:	10c00517 	ldw	r3,20(r2)
 803b4b8:	e0bffc17 	ldw	r2,-16(fp)
 803b4bc:	10c00515 	stw	r3,20(r2)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
 803b4c0:	e0bfff17 	ldw	r2,-4(fp)
 803b4c4:	10800a04 	addi	r2,r2,40
 803b4c8:	1007883a 	mov	r3,r2
 803b4cc:	e0bffc17 	ldw	r2,-16(fp)
 803b4d0:	10c00215 	stw	r3,8(r2)
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 803b4d4:	e0bff917 	ldw	r2,-28(fp)
 803b4d8:	10800317 	ldw	r2,12(r2)
 803b4dc:	10fff604 	addi	r3,r2,-40
 803b4e0:	e0bffc17 	ldw	r2,-16(fp)
 803b4e4:	10c00315 	stw	r3,12(r2)
 803b4e8:	00002706 	br	803b588 <tcp_output+0x718>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
 803b4ec:	d0a07c17 	ldw	r2,-32272(gp)
 803b4f0:	10800a04 	addi	r2,r2,40
 803b4f4:	100b883a 	mov	r5,r2
 803b4f8:	010000c4 	movi	r4,3
 803b4fc:	8030f540 	call	8030f54 <m_getnbuf>
 803b500:	e0bffc15 	stw	r2,-16(fp)
      if (m ==(struct mbuf *)NULL)
 803b504:	e0bffc17 	ldw	r2,-16(fp)
 803b508:	1000031e 	bne	r2,zero,803b518 <tcp_output+0x6a8>
      {
         EXIT_CRIT_SECTION(tp);
 803b50c:	80303c80 	call	80303c8 <irq_Unmask>
         return ENOBUFS;
 803b510:	00801a44 	movi	r2,105
 803b514:	00023706 	br	803bdf4 <tcp_output+0xf84>
      }

      m->m_len = TCPIPHDRSZ;
 803b518:	e0bffc17 	ldw	r2,-16(fp)
 803b51c:	00c00a04 	movi	r3,40
 803b520:	10c00215 	stw	r3,8(r2)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 803b524:	e0bffc17 	ldw	r2,-16(fp)
 803b528:	10800317 	ldw	r2,12(r2)
 803b52c:	d0e07c17 	ldw	r3,-32272(gp)
 803b530:	10c7883a 	add	r3,r2,r3
 803b534:	e0bffc17 	ldw	r2,-16(fp)
 803b538:	10c00315 	stw	r3,12(r2)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
 803b53c:	e0bfff17 	ldw	r2,-4(fp)
 803b540:	10001126 	beq	r2,zero,803b588 <tcp_output+0x718>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
 803b544:	e0bff717 	ldw	r2,-36(fp)
 803b548:	10801817 	ldw	r2,96(r2)
 803b54c:	e1bfff17 	ldw	r6,-4(fp)
 803b550:	e17ff517 	ldw	r5,-44(fp)
 803b554:	1009883a 	mov	r4,r2
 803b558:	80312280 	call	8031228 <m_copy>
 803b55c:	1007883a 	mov	r3,r2
 803b560:	e0bffc17 	ldw	r2,-16(fp)
 803b564:	10c00615 	stw	r3,24(r2)
         if (m->m_next == 0)
 803b568:	e0bffc17 	ldw	r2,-16(fp)
 803b56c:	10800617 	ldw	r2,24(r2)
 803b570:	1000051e 	bne	r2,zero,803b588 <tcp_output+0x718>
         {
            m_freem(m);
 803b574:	e13ffc17 	ldw	r4,-16(fp)
 803b578:	80311e00 	call	80311e0 <m_freem>
            EXIT_CRIT_SECTION(tp);
 803b57c:	80303c80 	call	80303c8 <irq_Unmask>
            return ENOBUFS;
 803b580:	00801a44 	movi	r2,105
 803b584:	00021b06 	br	803bdf4 <tcp_output+0xf84>
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
 803b588:	80303c80 	call	80303c8 <irq_Unmask>

   if (len) 
 803b58c:	e0bfff17 	ldw	r2,-4(fp)
 803b590:	10002d26 	beq	r2,zero,803b648 <tcp_output+0x7d8>
   {
      if (tp->t_force && len == 1)
 803b594:	e0bfea17 	ldw	r2,-88(fp)
 803b598:	10800a83 	ldbu	r2,42(r2)
 803b59c:	10803fcc 	andi	r2,r2,255
 803b5a0:	1080201c 	xori	r2,r2,128
 803b5a4:	10bfe004 	addi	r2,r2,-128
 803b5a8:	10000926 	beq	r2,zero,803b5d0 <tcp_output+0x760>
 803b5ac:	e0bfff17 	ldw	r2,-4(fp)
 803b5b0:	10800058 	cmpnei	r2,r2,1
 803b5b4:	1000061e 	bne	r2,zero,803b5d0 <tcp_output+0x760>
         tcpstat.tcps_sndprobe++;
 803b5b8:	008201b4 	movhi	r2,2054
 803b5bc:	10bf5317 	ldw	r2,-692(r2)
 803b5c0:	10c00044 	addi	r3,r2,1
 803b5c4:	008201b4 	movhi	r2,2054
 803b5c8:	10ff5315 	stw	r3,-692(r2)
 803b5cc:	00004306 	br	803b6dc <tcp_output+0x86c>
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
 803b5d0:	e0bfea17 	ldw	r2,-88(fp)
 803b5d4:	10c00f17 	ldw	r3,60(r2)
 803b5d8:	e0bfea17 	ldw	r2,-88(fp)
 803b5dc:	10801a17 	ldw	r2,104(r2)
 803b5e0:	1885c83a 	sub	r2,r3,r2
 803b5e4:	10000c0e 	bge	r2,zero,803b618 <tcp_output+0x7a8>
      {
         tcpstat.tcps_sndrexmitpack++;
 803b5e8:	008201b4 	movhi	r2,2054
 803b5ec:	10bf5017 	ldw	r2,-704(r2)
 803b5f0:	10c00044 	addi	r3,r2,1
 803b5f4:	008201b4 	movhi	r2,2054
 803b5f8:	10ff5015 	stw	r3,-704(r2)
         tcpstat.tcps_sndrexmitbyte += len;
 803b5fc:	008201b4 	movhi	r2,2054
 803b600:	10ff5117 	ldw	r3,-700(r2)
 803b604:	e0bfff17 	ldw	r2,-4(fp)
 803b608:	1887883a 	add	r3,r3,r2
 803b60c:	008201b4 	movhi	r2,2054
 803b610:	10ff5115 	stw	r3,-700(r2)
 803b614:	00003106 	br	803b6dc <tcp_output+0x86c>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 803b618:	008201b4 	movhi	r2,2054
 803b61c:	10bf4e17 	ldw	r2,-712(r2)
 803b620:	10c00044 	addi	r3,r2,1
 803b624:	008201b4 	movhi	r2,2054
 803b628:	10ff4e15 	stw	r3,-712(r2)
         tcpstat.tcps_sndbyte += len;
 803b62c:	008201b4 	movhi	r2,2054
 803b630:	10ff4f17 	ldw	r3,-708(r2)
 803b634:	e0bfff17 	ldw	r2,-4(fp)
 803b638:	1887883a 	add	r3,r3,r2
 803b63c:	008201b4 	movhi	r2,2054
 803b640:	10ff4f15 	stw	r3,-708(r2)
 803b644:	00002506 	br	803b6dc <tcp_output+0x86c>
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
 803b648:	e0bfea17 	ldw	r2,-88(fp)
 803b64c:	10800b0b 	ldhu	r2,44(r2)
 803b650:	10bfffcc 	andi	r2,r2,65535
 803b654:	1080004c 	andi	r2,r2,1
 803b658:	10000626 	beq	r2,zero,803b674 <tcp_output+0x804>
   {
      tcpstat.tcps_sndacks++;
 803b65c:	008201b4 	movhi	r2,2054
 803b660:	10bf5217 	ldw	r2,-696(r2)
 803b664:	10c00044 	addi	r3,r2,1
 803b668:	008201b4 	movhi	r2,2054
 803b66c:	10ff5215 	stw	r3,-696(r2)
 803b670:	00001a06 	br	803b6dc <tcp_output+0x86c>
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
 803b674:	e0bffd17 	ldw	r2,-12(fp)
 803b678:	108001cc 	andi	r2,r2,7
 803b67c:	10000626 	beq	r2,zero,803b698 <tcp_output+0x828>
      tcpstat.tcps_sndctrl++;
 803b680:	008201b4 	movhi	r2,2054
 803b684:	10bf5617 	ldw	r2,-680(r2)
 803b688:	10c00044 	addi	r3,r2,1
 803b68c:	008201b4 	movhi	r2,2054
 803b690:	10ff5615 	stw	r3,-680(r2)
 803b694:	00001106 	br	803b6dc <tcp_output+0x86c>
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
 803b698:	e0bfea17 	ldw	r2,-88(fp)
 803b69c:	10c01017 	ldw	r3,64(r2)
 803b6a0:	e0bfea17 	ldw	r2,-88(fp)
 803b6a4:	10800e17 	ldw	r2,56(r2)
 803b6a8:	1885c83a 	sub	r2,r3,r2
 803b6ac:	0080060e 	bge	zero,r2,803b6c8 <tcp_output+0x858>
      tcpstat.tcps_sndurg++;
 803b6b0:	008201b4 	movhi	r2,2054
 803b6b4:	10bf5417 	ldw	r2,-688(r2)
 803b6b8:	10c00044 	addi	r3,r2,1
 803b6bc:	008201b4 	movhi	r2,2054
 803b6c0:	10ff5415 	stw	r3,-688(r2)
 803b6c4:	00000506 	br	803b6dc <tcp_output+0x86c>
   else
      tcpstat.tcps_sndwinup++;
 803b6c8:	008201b4 	movhi	r2,2054
 803b6cc:	10bf5517 	ldw	r2,-684(r2)
 803b6d0:	10c00044 	addi	r3,r2,1
 803b6d4:	008201b4 	movhi	r2,2054
 803b6d8:	10ff5515 	stw	r3,-684(r2)

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
 803b6dc:	e0bffc17 	ldw	r2,-16(fp)
 803b6e0:	10800317 	ldw	r2,12(r2)
 803b6e4:	e0bff315 	stw	r2,-52(fp)
   if ((char *)ti < m->pkt->nb_buff)
 803b6e8:	e0bffc17 	ldw	r2,-16(fp)
 803b6ec:	10800117 	ldw	r2,4(r2)
 803b6f0:	10800117 	ldw	r2,4(r2)
 803b6f4:	e0fff317 	ldw	r3,-52(fp)
 803b6f8:	1880032e 	bgeu	r3,r2,803b708 <tcp_output+0x898>
   {
      panic("tcp_out- packet ptr underflow\n");
 803b6fc:	01020174 	movhi	r4,2053
 803b700:	210f3804 	addi	r4,r4,15584
 803b704:	802bd8c0 	call	802bd8c <panic>
   }
   tcp_mbuf = m;        /* flag TCP header mbuf */
 803b708:	e0bffc17 	ldw	r2,-16(fp)
 803b70c:	e0bff215 	stw	r2,-56(fp)
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
 803b710:	e0bfea17 	ldw	r2,-88(fp)
 803b714:	10800c17 	ldw	r2,48(r2)
 803b718:	1000031e 	bne	r2,zero,803b728 <tcp_output+0x8b8>
      panic("tcp_output");
 803b71c:	01020174 	movhi	r4,2053
 803b720:	210f4004 	addi	r4,r4,15616
 803b724:	802bd8c0 	call	802bd8c <panic>

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 803b728:	e0bfea17 	ldw	r2,-88(fp)
 803b72c:	10800c17 	ldw	r2,48(r2)
 803b730:	01800a04 	movi	r6,40
 803b734:	100b883a 	mov	r5,r2
 803b738:	e13ff317 	ldw	r4,-52(fp)
 803b73c:	80037cc0 	call	80037cc <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 803b740:	e0bffd17 	ldw	r2,-12(fp)
 803b744:	1080004c 	andi	r2,r2,1
 803b748:	10000f26 	beq	r2,zero,803b788 <tcp_output+0x918>
 803b74c:	e0bfea17 	ldw	r2,-88(fp)
 803b750:	10800b0b 	ldhu	r2,44(r2)
 803b754:	10bfffcc 	andi	r2,r2,65535
 803b758:	1080040c 	andi	r2,r2,16
 803b75c:	10000a26 	beq	r2,zero,803b788 <tcp_output+0x918>
       tp->snd_nxt == tp->snd_max)
 803b760:	e0bfea17 	ldw	r2,-88(fp)
 803b764:	10c00f17 	ldw	r3,60(r2)
 803b768:	e0bfea17 	ldw	r2,-88(fp)
 803b76c:	10801a17 	ldw	r2,104(r2)
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 803b770:	1880051e 	bne	r3,r2,803b788 <tcp_output+0x918>
   {
      tp->snd_nxt--;
 803b774:	e0bfea17 	ldw	r2,-88(fp)
 803b778:	10800f17 	ldw	r2,60(r2)
 803b77c:	10ffffc4 	addi	r3,r2,-1
 803b780:	e0bfea17 	ldw	r2,-88(fp)
 803b784:	10c00f15 	stw	r3,60(r2)
   }

   ti->ti_seq = htonl(tp->snd_nxt);
 803b788:	e0bfea17 	ldw	r2,-88(fp)
 803b78c:	10800f17 	ldw	r2,60(r2)
 803b790:	1006d63a 	srli	r3,r2,24
 803b794:	e0bfea17 	ldw	r2,-88(fp)
 803b798:	10800f17 	ldw	r2,60(r2)
 803b79c:	1004d23a 	srli	r2,r2,8
 803b7a0:	10bfc00c 	andi	r2,r2,65280
 803b7a4:	1886b03a 	or	r3,r3,r2
 803b7a8:	e0bfea17 	ldw	r2,-88(fp)
 803b7ac:	10800f17 	ldw	r2,60(r2)
 803b7b0:	1004923a 	slli	r2,r2,8
 803b7b4:	10803fec 	andhi	r2,r2,255
 803b7b8:	1886b03a 	or	r3,r3,r2
 803b7bc:	e0bfea17 	ldw	r2,-88(fp)
 803b7c0:	10800f17 	ldw	r2,60(r2)
 803b7c4:	1004963a 	slli	r2,r2,24
 803b7c8:	1886b03a 	or	r3,r3,r2
 803b7cc:	e0bff317 	ldw	r2,-52(fp)
 803b7d0:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(tp->rcv_nxt);
 803b7d4:	e0bfea17 	ldw	r2,-88(fp)
 803b7d8:	10801617 	ldw	r2,88(r2)
 803b7dc:	1006d63a 	srli	r3,r2,24
 803b7e0:	e0bfea17 	ldw	r2,-88(fp)
 803b7e4:	10801617 	ldw	r2,88(r2)
 803b7e8:	1004d23a 	srli	r2,r2,8
 803b7ec:	10bfc00c 	andi	r2,r2,65280
 803b7f0:	1886b03a 	or	r3,r3,r2
 803b7f4:	e0bfea17 	ldw	r2,-88(fp)
 803b7f8:	10801617 	ldw	r2,88(r2)
 803b7fc:	1004923a 	slli	r2,r2,8
 803b800:	10803fec 	andhi	r2,r2,255
 803b804:	1886b03a 	or	r3,r3,r2
 803b808:	e0bfea17 	ldw	r2,-88(fp)
 803b80c:	10801617 	ldw	r2,88(r2)
 803b810:	1004963a 	slli	r2,r2,24
 803b814:	1886b03a 	or	r3,r3,r2
 803b818:	e0bff317 	ldw	r2,-52(fp)
 803b81c:	10c00715 	stw	r3,28(r2)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 803b820:	e0bffd17 	ldw	r2,-12(fp)
 803b824:	1080008c 	andi	r2,r2,2
 803b828:	10002226 	beq	r2,zero,803b8b4 <tcp_output+0xa44>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
 803b82c:	e0bff717 	ldw	r2,-36(fp)
 803b830:	10800117 	ldw	r2,4(r2)
 803b834:	e0bff115 	stw	r2,-60(fp)

      switch(so->so_domain)
 803b838:	e0bff717 	ldw	r2,-36(fp)
 803b83c:	10800517 	ldw	r2,20(r2)
 803b840:	10800098 	cmpnei	r2,r2,2
 803b844:	1000191e 	bne	r2,zero,803b8ac <tcp_output+0xa3c>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
 803b848:	e0bffd17 	ldw	r2,-12(fp)
 803b84c:	1080040c 	andi	r2,r2,16
 803b850:	10001a1e 	bne	r2,zero,803b8bc <tcp_output+0xa4c>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
 803b854:	e0bff317 	ldw	r2,-52(fp)
 803b858:	10800417 	ldw	r2,16(r2)
 803b85c:	e0ffeb04 	addi	r3,fp,-84
 803b860:	180b883a 	mov	r5,r3
 803b864:	1009883a 	mov	r4,r2
 803b868:	8043a540 	call	8043a54 <iproute>
 803b86c:	e0bff015 	stw	r2,-64(fp)
               if(ifp)
 803b870:	e0bff017 	ldw	r2,-64(fp)
 803b874:	10000926 	beq	r2,zero,803b89c <tcp_output+0xa2c>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 803b878:	e0bff017 	ldw	r2,-64(fp)
 803b87c:	10c00917 	ldw	r3,36(r2)
 803b880:	e0bff017 	ldw	r2,-64(fp)
 803b884:	10800817 	ldw	r2,32(r2)
 803b888:	10800a04 	addi	r2,r2,40
 803b88c:	1887c83a 	sub	r3,r3,r2
 803b890:	e0bff117 	ldw	r2,-60(fp)
 803b894:	10c00615 	stw	r3,24(r2)
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
            }
#endif   /* IP_PMTU */
         }
         break;
 803b898:	00000806 	br	803b8bc <tcp_output+0xa4c>
                  inp->inp_pmtu = 580;  /* Ugh. */
 803b89c:	e0bff117 	ldw	r2,-60(fp)
 803b8a0:	00c09104 	movi	r3,580
 803b8a4:	10c00615 	stw	r3,24(r2)
         break;
 803b8a8:	00000406 	br	803b8bc <tcp_output+0xa4c>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
 803b8ac:	80301a80 	call	80301a8 <dtrap>
 803b8b0:	00000306 	br	803b8c0 <tcp_output+0xa50>
      }
   }
 803b8b4:	0001883a 	nop
 803b8b8:	00000106 	br	803b8c0 <tcp_output+0xa50>
         break;
 803b8bc:	0001883a 	nop

   /* fill in options if any are set */
   if (optlen)
 803b8c0:	e0bffb17 	ldw	r2,-20(fp)
 803b8c4:	10002b26 	beq	r2,zero,803b974 <tcp_output+0xb04>
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
 803b8c8:	01404004 	movi	r5,256
 803b8cc:	01000084 	movi	r4,2
 803b8d0:	8030f540 	call	8030f54 <m_getnbuf>
 803b8d4:	e0bfef15 	stw	r2,-68(fp)
      if (mopt == NULL) 
 803b8d8:	e0bfef17 	ldw	r2,-68(fp)
 803b8dc:	1000041e 	bne	r2,zero,803b8f0 <tcp_output+0xa80>
      {
         m_freem(m);
 803b8e0:	e13ffc17 	ldw	r4,-16(fp)
 803b8e4:	80311e00 	call	80311e0 <m_freem>
         return (ENOBUFS);
 803b8e8:	00801a44 	movi	r2,105
 803b8ec:	00014106 	br	803bdf4 <tcp_output+0xf84>
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
 803b8f0:	e0bff217 	ldw	r2,-56(fp)
 803b8f4:	10c00617 	ldw	r3,24(r2)
 803b8f8:	e0bfef17 	ldw	r2,-68(fp)
 803b8fc:	10c00615 	stw	r3,24(r2)
      tcp_mbuf->m_next = mopt;
 803b900:	e0bff217 	ldw	r2,-56(fp)
 803b904:	e0ffef17 	ldw	r3,-68(fp)
 803b908:	10c00615 	stw	r3,24(r2)

      /* extend options to aligned address */
      while(optlen & 0x03)
 803b90c:	00000606 	br	803b928 <tcp_output+0xab8>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
 803b910:	e0bffb17 	ldw	r2,-20(fp)
 803b914:	10c00044 	addi	r3,r2,1
 803b918:	e0fffb15 	stw	r3,-20(fp)
 803b91c:	d0e0ae04 	addi	r3,gp,-32072
 803b920:	10c5883a 	add	r2,r2,r3
 803b924:	10000005 	stb	zero,0(r2)
      while(optlen & 0x03)
 803b928:	e0bffb17 	ldw	r2,-20(fp)
 803b92c:	108000cc 	andi	r2,r2,3
 803b930:	103ff71e 	bne	r2,zero,803b910 <tcp_output+0xaa0>

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
 803b934:	e0bfef17 	ldw	r2,-68(fp)
 803b938:	10800317 	ldw	r2,12(r2)
 803b93c:	e1bffb17 	ldw	r6,-20(fp)
 803b940:	d160ae04 	addi	r5,gp,-32072
 803b944:	1009883a 	mov	r4,r2
 803b948:	80037cc0 	call	80037cc <memcpy>
      mopt->m_len = optlen;
 803b94c:	e0bfef17 	ldw	r2,-68(fp)
 803b950:	e0fffb17 	ldw	r3,-20(fp)
 803b954:	10c00215 	stw	r3,8(r2)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
 803b958:	e0bffb17 	ldw	r2,-20(fp)
 803b95c:	10800504 	addi	r2,r2,20
 803b960:	1004d0ba 	srli	r2,r2,2
 803b964:	1004913a 	slli	r2,r2,4
 803b968:	1007883a 	mov	r3,r2
 803b96c:	e0bff317 	ldw	r2,-52(fp)
 803b970:	10c00805 	stb	r3,32(r2)
   }

   ti->ti_flags = (u_char)flags;
 803b974:	e0bffd17 	ldw	r2,-12(fp)
 803b978:	1007883a 	mov	r3,r2
 803b97c:	e0bff317 	ldw	r2,-52(fp)
 803b980:	10c00845 	stb	r3,33(r2)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
 803b984:	e0bff717 	ldw	r2,-36(fp)
 803b988:	10800b17 	ldw	r2,44(r2)
 803b98c:	1004d0ba 	srli	r2,r2,2
 803b990:	1007883a 	mov	r3,r2
 803b994:	e0bffe17 	ldw	r2,-8(fp)
 803b998:	10c0060e 	bge	r2,r3,803b9b4 <tcp_output+0xb44>
 803b99c:	e0bfea17 	ldw	r2,-88(fp)
 803b9a0:	10800a0b 	ldhu	r2,40(r2)
 803b9a4:	10bfffcc 	andi	r2,r2,65535
 803b9a8:	e0fffe17 	ldw	r3,-8(fp)
 803b9ac:	1880010e 	bge	r3,r2,803b9b4 <tcp_output+0xb44>
      win = 0;
 803b9b0:	e03ffe15 	stw	zero,-8(fp)
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
 803b9b4:	e0bfea17 	ldw	r2,-88(fp)
 803b9b8:	10c01917 	ldw	r3,100(r2)
 803b9bc:	e0bfea17 	ldw	r2,-88(fp)
 803b9c0:	10801617 	ldw	r2,88(r2)
 803b9c4:	1885c83a 	sub	r2,r3,r2
 803b9c8:	1007883a 	mov	r3,r2
 803b9cc:	e0bffe17 	ldw	r2,-8(fp)
 803b9d0:	10c0060e 	bge	r2,r3,803b9ec <tcp_output+0xb7c>
      win = (long)(tp->rcv_adv - tp->rcv_nxt);
 803b9d4:	e0bfea17 	ldw	r2,-88(fp)
 803b9d8:	10c01917 	ldw	r3,100(r2)
 803b9dc:	e0bfea17 	ldw	r2,-88(fp)
 803b9e0:	10801617 	ldw	r2,88(r2)
 803b9e4:	1885c83a 	sub	r2,r3,r2
 803b9e8:	e0bffe15 	stw	r2,-8(fp)

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 803b9ec:	008201b4 	movhi	r2,2054
 803b9f0:	10be7717 	ldw	r2,-1572(r2)
 803b9f4:	1000021e 	bne	r2,zero,803ba00 <tcp_output+0xb90>
   {
      win = 0;
 803b9f8:	e03ffe15 	stw	zero,-8(fp)
 803b9fc:	00000e06 	br	803ba38 <tcp_output+0xbc8>
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
 803ba00:	008201b4 	movhi	r2,2054
 803ba04:	10be7717 	ldw	r2,-1572(r2)
 803ba08:	10bfffc4 	addi	r2,r2,-1
 803ba0c:	d0e03517 	ldw	r3,-32556(gp)
 803ba10:	10c7383a 	mul	r3,r2,r3
 803ba14:	e0bffe17 	ldw	r2,-8(fp)
 803ba18:	1880070e 	bge	r3,r2,803ba38 <tcp_output+0xbc8>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
 803ba1c:	008201b4 	movhi	r2,2054
 803ba20:	10be7717 	ldw	r2,-1572(r2)
 803ba24:	10bfffc4 	addi	r2,r2,-1
 803ba28:	1007883a 	mov	r3,r2
 803ba2c:	d0a03517 	ldw	r2,-32556(gp)
 803ba30:	1885383a 	mul	r2,r3,r2
 803ba34:	e0bffe15 	stw	r2,-8(fp)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
 803ba38:	e0bffe17 	ldw	r2,-8(fp)
 803ba3c:	10bfffcc 	andi	r2,r2,65535
 803ba40:	1004d23a 	srli	r2,r2,8
 803ba44:	1007883a 	mov	r3,r2
 803ba48:	e0bffe17 	ldw	r2,-8(fp)
 803ba4c:	10bfffcc 	andi	r2,r2,65535
 803ba50:	1004923a 	slli	r2,r2,8
 803ba54:	1884b03a 	or	r2,r3,r2
 803ba58:	1007883a 	mov	r3,r2
 803ba5c:	e0bff317 	ldw	r2,-52(fp)
 803ba60:	10c0088d 	sth	r3,34(r2)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 803ba64:	e0bfea17 	ldw	r2,-88(fp)
 803ba68:	10c01017 	ldw	r3,64(r2)
 803ba6c:	e0bfea17 	ldw	r2,-88(fp)
 803ba70:	10800f17 	ldw	r2,60(r2)
 803ba74:	1885c83a 	sub	r2,r3,r2
 803ba78:	00801c0e 	bge	zero,r2,803baec <tcp_output+0xc7c>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 803ba7c:	e0bfea17 	ldw	r2,-88(fp)
 803ba80:	10801017 	ldw	r2,64(r2)
 803ba84:	1007883a 	mov	r3,r2
 803ba88:	e0bfea17 	ldw	r2,-88(fp)
 803ba8c:	10800f17 	ldw	r2,60(r2)
 803ba90:	1885c83a 	sub	r2,r3,r2
 803ba94:	10bfffcc 	andi	r2,r2,65535
 803ba98:	1004d23a 	srli	r2,r2,8
 803ba9c:	1007883a 	mov	r3,r2
 803baa0:	e0bfea17 	ldw	r2,-88(fp)
 803baa4:	10801017 	ldw	r2,64(r2)
 803baa8:	1009883a 	mov	r4,r2
 803baac:	e0bfea17 	ldw	r2,-88(fp)
 803bab0:	10800f17 	ldw	r2,60(r2)
 803bab4:	2085c83a 	sub	r2,r4,r2
 803bab8:	10bfffcc 	andi	r2,r2,65535
 803babc:	1004923a 	slli	r2,r2,8
 803bac0:	1884b03a 	or	r2,r3,r2
 803bac4:	1007883a 	mov	r3,r2
 803bac8:	e0bff317 	ldw	r2,-52(fp)
 803bacc:	10c0098d 	sth	r3,38(r2)
      ti->ti_flags |= TH_URG;
 803bad0:	e0bff317 	ldw	r2,-52(fp)
 803bad4:	10800843 	ldbu	r2,33(r2)
 803bad8:	10800814 	ori	r2,r2,32
 803badc:	1007883a 	mov	r3,r2
 803bae0:	e0bff317 	ldw	r2,-52(fp)
 803bae4:	10c00845 	stb	r3,33(r2)
 803bae8:	00000406 	br	803bafc <tcp_output+0xc8c>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
 803baec:	e0bfea17 	ldw	r2,-88(fp)
 803baf0:	10c00e17 	ldw	r3,56(r2)
 803baf4:	e0bfea17 	ldw	r2,-88(fp)
 803baf8:	10c01015 	stw	r3,64(r2)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
 803bafc:	e0bfff17 	ldw	r2,-4(fp)
 803bb00:	10000c26 	beq	r2,zero,803bb34 <tcp_output+0xcc4>
 803bb04:	e0fff517 	ldw	r3,-44(fp)
 803bb08:	e0bfff17 	ldw	r2,-4(fp)
 803bb0c:	1885883a 	add	r2,r3,r2
 803bb10:	e0fff717 	ldw	r3,-36(fp)
 803bb14:	18c01217 	ldw	r3,72(r3)
 803bb18:	10c0061e 	bne	r2,r3,803bb34 <tcp_output+0xcc4>
      ti->ti_flags |= TH_PUSH;
 803bb1c:	e0bff317 	ldw	r2,-52(fp)
 803bb20:	10800843 	ldbu	r2,33(r2)
 803bb24:	10800214 	ori	r2,r2,8
 803bb28:	1007883a 	mov	r3,r2
 803bb2c:	e0bff317 	ldw	r2,-52(fp)
 803bb30:	10c00845 	stb	r3,33(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
 803bb34:	e0bfea17 	ldw	r2,-88(fp)
 803bb38:	10800a83 	ldbu	r2,42(r2)
 803bb3c:	10803fcc 	andi	r2,r2,255
 803bb40:	1080201c 	xori	r2,r2,128
 803bb44:	10bfe004 	addi	r2,r2,-128
 803bb48:	10000326 	beq	r2,zero,803bb58 <tcp_output+0xce8>
 803bb4c:	e0bfea17 	ldw	r2,-88(fp)
 803bb50:	10800417 	ldw	r2,16(r2)
 803bb54:	10004b1e 	bne	r2,zero,803bc84 <tcp_output+0xe14>
   {
      tcp_seq startseq = tp->snd_nxt;
 803bb58:	e0bfea17 	ldw	r2,-88(fp)
 803bb5c:	10800f17 	ldw	r2,60(r2)
 803bb60:	e0bfee15 	stw	r2,-72(fp)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
 803bb64:	e0bffd17 	ldw	r2,-12(fp)
 803bb68:	1080008c 	andi	r2,r2,2
 803bb6c:	10000526 	beq	r2,zero,803bb84 <tcp_output+0xd14>
         tp->snd_nxt++;
 803bb70:	e0bfea17 	ldw	r2,-88(fp)
 803bb74:	10800f17 	ldw	r2,60(r2)
 803bb78:	10c00044 	addi	r3,r2,1
 803bb7c:	e0bfea17 	ldw	r2,-88(fp)
 803bb80:	10c00f15 	stw	r3,60(r2)

      if (flags & TH_FIN)
 803bb84:	e0bffd17 	ldw	r2,-12(fp)
 803bb88:	1080004c 	andi	r2,r2,1
 803bb8c:	10000b26 	beq	r2,zero,803bbbc <tcp_output+0xd4c>
      {
         tp->snd_nxt++;
 803bb90:	e0bfea17 	ldw	r2,-88(fp)
 803bb94:	10800f17 	ldw	r2,60(r2)
 803bb98:	10c00044 	addi	r3,r2,1
 803bb9c:	e0bfea17 	ldw	r2,-88(fp)
 803bba0:	10c00f15 	stw	r3,60(r2)
         tp->t_flags |= TF_SENTFIN;
 803bba4:	e0bfea17 	ldw	r2,-88(fp)
 803bba8:	10800b0b 	ldhu	r2,44(r2)
 803bbac:	10800414 	ori	r2,r2,16
 803bbb0:	1007883a 	mov	r3,r2
 803bbb4:	e0bfea17 	ldw	r2,-88(fp)
 803bbb8:	10c00b0d 	sth	r3,44(r2)
      }
      tp->snd_nxt += len;
 803bbbc:	e0bfea17 	ldw	r2,-88(fp)
 803bbc0:	10c00f17 	ldw	r3,60(r2)
 803bbc4:	e0bfff17 	ldw	r2,-4(fp)
 803bbc8:	1887883a 	add	r3,r3,r2
 803bbcc:	e0bfea17 	ldw	r2,-88(fp)
 803bbd0:	10c00f15 	stw	r3,60(r2)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
 803bbd4:	e0bfea17 	ldw	r2,-88(fp)
 803bbd8:	10c00f17 	ldw	r3,60(r2)
 803bbdc:	e0bfea17 	ldw	r2,-88(fp)
 803bbe0:	10801a17 	ldw	r2,104(r2)
 803bbe4:	1885c83a 	sub	r2,r3,r2
 803bbe8:	0080120e 	bge	zero,r2,803bc34 <tcp_output+0xdc4>
      {
         tp->snd_max = tp->snd_nxt;
 803bbec:	e0bfea17 	ldw	r2,-88(fp)
 803bbf0:	10c00f17 	ldw	r3,60(r2)
 803bbf4:	e0bfea17 	ldw	r2,-88(fp)
 803bbf8:	10c01a15 	stw	r3,104(r2)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
 803bbfc:	e0bfea17 	ldw	r2,-88(fp)
 803bc00:	10801e17 	ldw	r2,120(r2)
 803bc04:	10000b1e 	bne	r2,zero,803bc34 <tcp_output+0xdc4>
         {
            tp->t_rttick = cticks;
 803bc08:	d0e0a317 	ldw	r3,-32116(gp)
 803bc0c:	e0bfea17 	ldw	r2,-88(fp)
 803bc10:	10c01e15 	stw	r3,120(r2)
            tp->t_rtseq = startseq;
 803bc14:	e0bfea17 	ldw	r2,-88(fp)
 803bc18:	e0ffee17 	ldw	r3,-72(fp)
 803bc1c:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_segstimed++;
 803bc20:	008201b4 	movhi	r2,2054
 803bc24:	10bf4417 	ldw	r2,-752(r2)
 803bc28:	10c00044 	addi	r3,r2,1
 803bc2c:	008201b4 	movhi	r2,2054
 803bc30:	10ff4415 	stw	r3,-752(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 803bc34:	e0bfea17 	ldw	r2,-88(fp)
 803bc38:	10800317 	ldw	r2,12(r2)
 803bc3c:	1000201e 	bne	r2,zero,803bcc0 <tcp_output+0xe50>
          tp->snd_nxt != tp->snd_una) 
 803bc40:	e0bfea17 	ldw	r2,-88(fp)
 803bc44:	10c00f17 	ldw	r3,60(r2)
 803bc48:	e0bfea17 	ldw	r2,-88(fp)
 803bc4c:	10800e17 	ldw	r2,56(r2)
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 803bc50:	18801b26 	beq	r3,r2,803bcc0 <tcp_output+0xe50>
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 803bc54:	e0bfea17 	ldw	r2,-88(fp)
 803bc58:	10c00817 	ldw	r3,32(r2)
 803bc5c:	e0bfea17 	ldw	r2,-88(fp)
 803bc60:	10c00315 	stw	r3,12(r2)
         if (tp->t_timer[TCPT_PERSIST]) 
 803bc64:	e0bfea17 	ldw	r2,-88(fp)
 803bc68:	10800417 	ldw	r2,16(r2)
 803bc6c:	10001426 	beq	r2,zero,803bcc0 <tcp_output+0xe50>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
 803bc70:	e0bfea17 	ldw	r2,-88(fp)
 803bc74:	10000415 	stw	zero,16(r2)
            tp->t_rxtshift = 0;
 803bc78:	e0bfea17 	ldw	r2,-88(fp)
 803bc7c:	10000715 	stw	zero,28(r2)
   {
 803bc80:	00000f06 	br	803bcc0 <tcp_output+0xe50>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
 803bc84:	e0bfea17 	ldw	r2,-88(fp)
 803bc88:	10c00f17 	ldw	r3,60(r2)
 803bc8c:	e0bfff17 	ldw	r2,-4(fp)
 803bc90:	1887883a 	add	r3,r3,r2
 803bc94:	e0bfea17 	ldw	r2,-88(fp)
 803bc98:	10801a17 	ldw	r2,104(r2)
 803bc9c:	1885c83a 	sub	r2,r3,r2
 803bca0:	0080080e 	bge	zero,r2,803bcc4 <tcp_output+0xe54>
         tp->snd_max = tp->snd_nxt + len;
 803bca4:	e0bfea17 	ldw	r2,-88(fp)
 803bca8:	10c00f17 	ldw	r3,60(r2)
 803bcac:	e0bfff17 	ldw	r2,-4(fp)
 803bcb0:	1887883a 	add	r3,r3,r2
 803bcb4:	e0bfea17 	ldw	r2,-88(fp)
 803bcb8:	10c01a15 	stw	r3,104(r2)
 803bcbc:	00000106 	br	803bcc4 <tcp_output+0xe54>
   {
 803bcc0:	0001883a 	nop
   tcp_trace("tcp_output: sending, state %d, tcpcb: %x",
    tp->t_state, tp );
#endif

#ifdef MUTE_WARNS
   error = 0;
 803bcc4:	e03fed15 	stw	zero,-76(fp)
   if(so->so_domain != AF_INET6)
#endif   /* IP_V6 */
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
 803bcc8:	e0bffc17 	ldw	r2,-16(fp)
 803bccc:	10800317 	ldw	r2,12(r2)
 803bcd0:	e0bfec15 	stw	r2,-80(fp)
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
 803bcd4:	e0bffb17 	ldw	r2,-20(fp)
 803bcd8:	1007883a 	mov	r3,r2
 803bcdc:	e0bfff17 	ldw	r2,-4(fp)
 803bce0:	1885883a 	add	r2,r3,r2
 803bce4:	10800a04 	addi	r2,r2,40
 803bce8:	1007883a 	mov	r3,r2
 803bcec:	e0bfec17 	ldw	r2,-80(fp)
 803bcf0:	10c0008d 	sth	r3,2(r2)
      error = ip_output(m, so->so_optsPack);
 803bcf4:	e0bff717 	ldw	r2,-36(fp)
 803bcf8:	10801f17 	ldw	r2,124(r2)
 803bcfc:	100b883a 	mov	r5,r2
 803bd00:	e13ffc17 	ldw	r4,-16(fp)
 803bd04:	8031b400 	call	8031b40 <ip_output>
 803bd08:	e0bfed15 	stw	r2,-76(fp)
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
 803bd0c:	e0bfed17 	ldw	r2,-76(fp)
 803bd10:	10001326 	beq	r2,zero,803bd60 <tcp_output+0xef0>
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
 803bd14:	e0bfed17 	ldw	r2,-76(fp)
 803bd18:	10801a58 	cmpnei	r2,r2,105
 803bd1c:	10000e1e 	bne	r2,zero,803bd58 <tcp_output+0xee8>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
 803bd20:	e0bffc17 	ldw	r2,-16(fp)
 803bd24:	10800817 	ldw	r2,32(r2)
 803bd28:	1000031e 	bne	r2,zero,803bd38 <tcp_output+0xec8>
            m = m->m_next;
 803bd2c:	e0bffc17 	ldw	r2,-16(fp)
 803bd30:	10800617 	ldw	r2,24(r2)
 803bd34:	e0bffc15 	stw	r2,-16(fp)
         m_freem(m); /* free the mbuf chain */
 803bd38:	e13ffc17 	ldw	r4,-16(fp)
 803bd3c:	80311e00 	call	80311e0 <m_freem>
         tcp_quench(tp->t_inpcb);
 803bd40:	e0bfea17 	ldw	r2,-88(fp)
 803bd44:	10800d17 	ldw	r2,52(r2)
 803bd48:	1009883a 	mov	r4,r2
 803bd4c:	803c7a40 	call	803c7a4 <tcp_quench>
         return (error);
 803bd50:	e0bfed17 	ldw	r2,-76(fp)
 803bd54:	00002706 	br	803bdf4 <tcp_output+0xf84>
      }
      return (error);
 803bd58:	e0bfed17 	ldw	r2,-76(fp)
 803bd5c:	00002506 	br	803bdf4 <tcp_output+0xf84>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 803bd60:	008201b4 	movhi	r2,2054
 803bd64:	10bf1a17 	ldw	r2,-920(r2)
 803bd68:	10c00044 	addi	r3,r2,1
 803bd6c:	008201b4 	movhi	r2,2054
 803bd70:	10ff1a15 	stw	r3,-920(r2)
   tcpstat.tcps_sndtotal++;
 803bd74:	008201b4 	movhi	r2,2054
 803bd78:	10bf4d17 	ldw	r2,-716(r2)
 803bd7c:	10c00044 	addi	r3,r2,1
 803bd80:	008201b4 	movhi	r2,2054
 803bd84:	10ff4d15 	stw	r3,-716(r2)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
 803bd88:	e0bffe17 	ldw	r2,-8(fp)
 803bd8c:	00800e0e 	bge	zero,r2,803bdc8 <tcp_output+0xf58>
 803bd90:	e0bfea17 	ldw	r2,-88(fp)
 803bd94:	10c01617 	ldw	r3,88(r2)
 803bd98:	e0bffe17 	ldw	r2,-8(fp)
 803bd9c:	1887883a 	add	r3,r3,r2
 803bda0:	e0bfea17 	ldw	r2,-88(fp)
 803bda4:	10801917 	ldw	r2,100(r2)
 803bda8:	1885c83a 	sub	r2,r3,r2
 803bdac:	0080060e 	bge	zero,r2,803bdc8 <tcp_output+0xf58>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
 803bdb0:	e0bfea17 	ldw	r2,-88(fp)
 803bdb4:	10c01617 	ldw	r3,88(r2)
 803bdb8:	e0bffe17 	ldw	r2,-8(fp)
 803bdbc:	1887883a 	add	r3,r3,r2
 803bdc0:	e0bfea17 	ldw	r2,-88(fp)
 803bdc4:	10c01915 	stw	r3,100(r2)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 803bdc8:	e0bfea17 	ldw	r2,-88(fp)
 803bdcc:	10c00b0b 	ldhu	r3,44(r2)
 803bdd0:	00bfef04 	movi	r2,-68
 803bdd4:	1884703a 	and	r2,r3,r2
 803bdd8:	1007883a 	mov	r3,r2
 803bddc:	e0bfea17 	ldw	r2,-88(fp)
 803bde0:	10c00b0d 	sth	r3,44(r2)
   if (sendalot)
 803bde4:	e0bffa17 	ldw	r2,-24(fp)
 803bde8:	10000126 	beq	r2,zero,803bdf0 <tcp_output+0xf80>
      goto again;
 803bdec:	003c3106 	br	803aeb4 <tcp_output+0x44>
   return (0);
 803bdf0:	0005883a 	mov	r2,zero
}
 803bdf4:	e037883a 	mov	sp,fp
 803bdf8:	dfc00117 	ldw	ra,4(sp)
 803bdfc:	df000017 	ldw	fp,0(sp)
 803be00:	dec00204 	addi	sp,sp,8
 803be04:	f800283a 	ret

0803be08 <tcp_setpersist>:
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
 803be08:	defffc04 	addi	sp,sp,-16
 803be0c:	dfc00315 	stw	ra,12(sp)
 803be10:	df000215 	stw	fp,8(sp)
 803be14:	df000204 	addi	fp,sp,8
 803be18:	e13ffe15 	stw	r4,-8(fp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 803be1c:	e0bffe17 	ldw	r2,-8(fp)
 803be20:	10802017 	ldw	r2,128(r2)
 803be24:	1007d0ba 	srai	r3,r2,2
 803be28:	e0bffe17 	ldw	r2,-8(fp)
 803be2c:	10802117 	ldw	r2,132(r2)
 803be30:	1885883a 	add	r2,r3,r2
 803be34:	1005d07a 	srai	r2,r2,1
 803be38:	e0bfff15 	stw	r2,-4(fp)

   if (tp->t_timer[TCPT_REXMT])
 803be3c:	e0bffe17 	ldw	r2,-8(fp)
 803be40:	10800317 	ldw	r2,12(r2)
 803be44:	10000326 	beq	r2,zero,803be54 <tcp_setpersist+0x4c>
      panic("tcp_output REXMT");
 803be48:	01020174 	movhi	r4,2053
 803be4c:	210f4304 	addi	r4,r4,15628
 803be50:	802bd8c0 	call	802bd8c <panic>
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
 803be54:	e0bfff17 	ldw	r2,-4(fp)
 803be58:	1009883a 	mov	r4,r2
 803be5c:	e0bffe17 	ldw	r2,-8(fp)
 803be60:	10c00717 	ldw	r3,28(r2)
 803be64:	00820174 	movhi	r2,2053
 803be68:	1885883a 	add	r2,r3,r2
 803be6c:	109b0103 	ldbu	r2,27652(r2)
 803be70:	10803fcc 	andi	r2,r2,255
 803be74:	2085383a 	mul	r2,r4,r2
 803be78:	10ffffcc 	andi	r3,r2,65535
 803be7c:	18e0001c 	xori	r3,r3,32768
 803be80:	18e00004 	addi	r3,r3,-32768
 803be84:	e0bffe17 	ldw	r2,-8(fp)
 803be88:	10c00415 	stw	r3,16(r2)
 803be8c:	e0bffe17 	ldw	r2,-8(fp)
 803be90:	10800417 	ldw	r2,16(r2)
 803be94:	10800288 	cmpgei	r2,r2,10
 803be98:	1000041e 	bne	r2,zero,803beac <tcp_setpersist+0xa4>
 803be9c:	e0bffe17 	ldw	r2,-8(fp)
 803bea0:	00c00284 	movi	r3,10
 803bea4:	10c00415 	stw	r3,16(r2)
 803bea8:	00000706 	br	803bec8 <tcp_setpersist+0xc0>
 803beac:	e0bffe17 	ldw	r2,-8(fp)
 803beb0:	10800417 	ldw	r2,16(r2)
 803beb4:	10801e50 	cmplti	r2,r2,121
 803beb8:	1000031e 	bne	r2,zero,803bec8 <tcp_setpersist+0xc0>
 803bebc:	e0bffe17 	ldw	r2,-8(fp)
 803bec0:	00c01e04 	movi	r3,120
 803bec4:	10c00415 	stw	r3,16(r2)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
 803bec8:	e0bffe17 	ldw	r2,-8(fp)
 803becc:	10800717 	ldw	r2,28(r2)
 803bed0:	10800308 	cmpgei	r2,r2,12
 803bed4:	1000051e 	bne	r2,zero,803beec <tcp_setpersist+0xe4>
      tp->t_rxtshift++;
 803bed8:	e0bffe17 	ldw	r2,-8(fp)
 803bedc:	10800717 	ldw	r2,28(r2)
 803bee0:	10c00044 	addi	r3,r2,1
 803bee4:	e0bffe17 	ldw	r2,-8(fp)
 803bee8:	10c00715 	stw	r3,28(r2)

}
 803beec:	0001883a 	nop
 803bef0:	e037883a 	mov	sp,fp
 803bef4:	dfc00117 	ldw	ra,4(sp)
 803bef8:	df000017 	ldw	fp,0(sp)
 803befc:	dec00204 	addi	sp,sp,8
 803bf00:	f800283a 	ret

0803bf04 <bld_options>:
 * RETURNS: length of option data added to buffer
 */

static int
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
 803bf04:	defff804 	addi	sp,sp,-32
 803bf08:	dfc00715 	stw	ra,28(sp)
 803bf0c:	df000615 	stw	fp,24(sp)
 803bf10:	df000604 	addi	fp,sp,24
 803bf14:	e13ffd15 	stw	r4,-12(fp)
 803bf18:	e17ffc15 	stw	r5,-16(fp)
 803bf1c:	e1bffb15 	stw	r6,-20(fp)
 803bf20:	e1fffa15 	stw	r7,-24(fp)
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
 803bf24:	e0bffd17 	ldw	r2,-12(fp)
 803bf28:	10800b0b 	ldhu	r2,44(r2)
 803bf2c:	10bfffcc 	andi	r2,r2,65535
 803bf30:	1080020c 	andi	r2,r2,8
 803bf34:	10000226 	beq	r2,zero,803bf40 <bld_options+0x3c>
      return 0;
 803bf38:	0005883a 	mov	r2,zero
 803bf3c:	00001f06 	br	803bfbc <bld_options+0xb8>

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
 803bf40:	e0bffb17 	ldw	r2,-20(fp)
 803bf44:	1080008c 	andi	r2,r2,2
 803bf48:	10001a26 	beq	r2,zero,803bfb4 <bld_options+0xb0>
   {
      mss   =  (u_short)tcp_mss(so);
 803bf4c:	e13ffa17 	ldw	r4,-24(fp)
 803bf50:	803ad780 	call	803ad78 <tcp_mss>
 803bf54:	e0bffe8d 	sth	r2,-6(fp)

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
 803bf58:	e0bffc17 	ldw	r2,-16(fp)
 803bf5c:	00c00084 	movi	r3,2
 803bf60:	10c00005 	stb	r3,0(r2)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
 803bf64:	e0bffc17 	ldw	r2,-16(fp)
 803bf68:	10800044 	addi	r2,r2,1
 803bf6c:	00c00104 	movi	r3,4
 803bf70:	10c00005 	stb	r3,0(r2)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
 803bf74:	e0bffe8b 	ldhu	r2,-6(fp)
 803bf78:	1004d23a 	srli	r2,r2,8
 803bf7c:	1007883a 	mov	r3,r2
 803bf80:	e0bffc17 	ldw	r2,-16(fp)
 803bf84:	10800084 	addi	r2,r2,2
 803bf88:	10c00005 	stb	r3,0(r2)
      *(cp + 3)  = (u_char) (mss & 0xff);
 803bf8c:	e0bffc17 	ldw	r2,-16(fp)
 803bf90:	108000c4 	addi	r2,r2,3
 803bf94:	e0fffe8b 	ldhu	r3,-6(fp)
 803bf98:	10c00005 	stb	r3,0(r2)
      len = 4;
 803bf9c:	00800104 	movi	r2,4
 803bfa0:	e0bfff15 	stw	r2,-4(fp)
      cp += 4;
 803bfa4:	e0bffc17 	ldw	r2,-16(fp)
 803bfa8:	10800104 	addi	r2,r2,4
 803bfac:	e0bffc15 	stw	r2,-16(fp)
 803bfb0:	00000106 	br	803bfb8 <bld_options+0xb4>
   }
   else
      len = 0;
 803bfb4:	e03fff15 	stw	zero,-4(fp)
      len += 10;
   }
#endif   /* TCP_TIMESTAMP */

   USE_ARG(so);
   return len;
 803bfb8:	e0bfff17 	ldw	r2,-4(fp)
}
 803bfbc:	e037883a 	mov	sp,fp
 803bfc0:	dfc00117 	ldw	ra,4(sp)
 803bfc4:	df000017 	ldw	fp,0(sp)
 803bfc8:	dec00204 	addi	sp,sp,8
 803bfcc:	f800283a 	ret

0803bfd0 <tcp_init>:
 * RETURNS: 
 */

void
tcp_init()
{
 803bfd0:	deffff04 	addi	sp,sp,-4
 803bfd4:	df000015 	stw	fp,0(sp)
 803bfd8:	d839883a 	mov	fp,sp
   tcp_iss = 1;      /* wrong */
 803bfdc:	00800044 	movi	r2,1
 803bfe0:	d0a0b015 	stw	r2,-32064(gp)
   tcb.inp_next = tcb.inp_prev = &tcb;
 803bfe4:	008201b4 	movhi	r2,2054
 803bfe8:	10bf3304 	addi	r2,r2,-820
 803bfec:	00c201b4 	movhi	r3,2054
 803bff0:	18bf3415 	stw	r2,-816(r3)
 803bff4:	008201b4 	movhi	r2,2054
 803bff8:	10ff3417 	ldw	r3,-816(r2)
 803bffc:	008201b4 	movhi	r2,2054
 803c000:	10ff3315 	stw	r3,-820(r2)
}
 803c004:	0001883a 	nop
 803c008:	e037883a 	mov	sp,fp
 803c00c:	df000017 	ldw	fp,0(sp)
 803c010:	dec00104 	addi	sp,sp,4
 803c014:	f800283a 	ret

0803c018 <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
 803c018:	defffb04 	addi	sp,sp,-20
 803c01c:	dfc00415 	stw	ra,16(sp)
 803c020:	df000315 	stw	fp,12(sp)
 803c024:	df000304 	addi	fp,sp,12
 803c028:	e13ffd15 	stw	r4,-12(fp)
   struct inpcb * inp   =  tp->t_inpcb;
 803c02c:	e0bffd17 	ldw	r2,-12(fp)
 803c030:	10800d17 	ldw	r2,52(r2)
 803c034:	e0bffe15 	stw	r2,-8(fp)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
 803c038:	e0bffd17 	ldw	r2,-12(fp)
 803c03c:	10800c17 	ldw	r2,48(r2)
 803c040:	e0bfff15 	stw	r2,-4(fp)
 803c044:	e0bfff17 	ldw	r2,-4(fp)
 803c048:	1000071e 	bne	r2,zero,803c068 <tcp_template+0x50>
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 803c04c:	01000a04 	movi	r4,40
 803c050:	8030d080 	call	8030d08 <npalloc>
 803c054:	e0bfff15 	stw	r2,-4(fp)
      if (n == NULL)
 803c058:	e0bfff17 	ldw	r2,-4(fp)
 803c05c:	1000021e 	bne	r2,zero,803c068 <tcp_template+0x50>
         return (0);
 803c060:	0005883a 	mov	r2,zero
 803c064:	00002906 	br	803c10c <tcp_template+0xf4>
   }
   n->ti_next = n->ti_prev = 0;
 803c068:	e0bfff17 	ldw	r2,-4(fp)
 803c06c:	10000115 	stw	zero,4(r2)
 803c070:	e0bfff17 	ldw	r2,-4(fp)
 803c074:	10c00117 	ldw	r3,4(r2)
 803c078:	e0bfff17 	ldw	r2,-4(fp)
 803c07c:	10c00015 	stw	r3,0(r2)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
 803c080:	e0bfff17 	ldw	r2,-4(fp)
 803c084:	00c50004 	movi	r3,5120
 803c088:	10c0028d 	sth	r3,10(r2)
   n->ti_src = inp->inp_laddr;
 803c08c:	e0bfff17 	ldw	r2,-4(fp)
 803c090:	e0fffe17 	ldw	r3,-8(fp)
 803c094:	18c00417 	ldw	r3,16(r3)
 803c098:	10c00315 	stw	r3,12(r2)
   n->ti_dst = inp->inp_faddr;
 803c09c:	e0bfff17 	ldw	r2,-4(fp)
 803c0a0:	e0fffe17 	ldw	r3,-8(fp)
 803c0a4:	18c00317 	ldw	r3,12(r3)
 803c0a8:	10c00415 	stw	r3,16(r2)
   n->ti_sport = inp->inp_lport;
 803c0ac:	e0bffe17 	ldw	r2,-8(fp)
 803c0b0:	10c0078b 	ldhu	r3,30(r2)
 803c0b4:	e0bfff17 	ldw	r2,-4(fp)
 803c0b8:	10c0050d 	sth	r3,20(r2)
   n->ti_dport = inp->inp_fport;
 803c0bc:	e0bffe17 	ldw	r2,-8(fp)
 803c0c0:	10c0070b 	ldhu	r3,28(r2)
 803c0c4:	e0bfff17 	ldw	r2,-4(fp)
 803c0c8:	10c0058d 	sth	r3,22(r2)
   n->ti_seq = 0;
 803c0cc:	e0bfff17 	ldw	r2,-4(fp)
 803c0d0:	10000615 	stw	zero,24(r2)
   n->ti_ack = 0;
 803c0d4:	e0bfff17 	ldw	r2,-4(fp)
 803c0d8:	10000715 	stw	zero,28(r2)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
 803c0dc:	e0bfff17 	ldw	r2,-4(fp)
 803c0e0:	00c01404 	movi	r3,80
 803c0e4:	10c00805 	stb	r3,32(r2)
   n->ti_flags = 0;
 803c0e8:	e0bfff17 	ldw	r2,-4(fp)
 803c0ec:	10000845 	stb	zero,33(r2)
   n->ti_win = 0;
 803c0f0:	e0bfff17 	ldw	r2,-4(fp)
 803c0f4:	1000088d 	sth	zero,34(r2)
   n->ti_sum = 0;
 803c0f8:	e0bfff17 	ldw	r2,-4(fp)
 803c0fc:	1000090d 	sth	zero,36(r2)
   n->ti_urp = 0;
 803c100:	e0bfff17 	ldw	r2,-4(fp)
 803c104:	1000098d 	sth	zero,38(r2)
   return (n);
 803c108:	e0bfff17 	ldw	r2,-4(fp)
}
 803c10c:	e037883a 	mov	sp,fp
 803c110:	dfc00117 	ldw	ra,4(sp)
 803c114:	df000017 	ldw	fp,0(sp)
 803c118:	dec00204 	addi	sp,sp,8
 803c11c:	f800283a 	ret

0803c120 <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
 803c120:	defff204 	addi	sp,sp,-56
 803c124:	dfc00d15 	stw	ra,52(sp)
 803c128:	df000c15 	stw	fp,48(sp)
 803c12c:	df000c04 	addi	fp,sp,48
 803c130:	e13ff715 	stw	r4,-36(fp)
 803c134:	e17ff615 	stw	r5,-40(fp)
 803c138:	e1bff515 	stw	r6,-44(fp)
 803c13c:	e1fff415 	stw	r7,-48(fp)
   int      tlen;       /* tcp data len - 0 or 1 */
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
 803c140:	e03ffd15 	stw	zero,-12(fp)
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
 803c144:	e0bff717 	ldw	r2,-36(fp)
 803c148:	10001726 	beq	r2,zero,803c1a8 <tcp_respond+0x88>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
 803c14c:	e0bff717 	ldw	r2,-36(fp)
 803c150:	10800d17 	ldw	r2,52(r2)
 803c154:	10800817 	ldw	r2,32(r2)
 803c158:	10800b17 	ldw	r2,44(r2)
 803c15c:	1007883a 	mov	r3,r2
 803c160:	e0bff717 	ldw	r2,-36(fp)
 803c164:	10800d17 	ldw	r2,52(r2)
 803c168:	10800817 	ldw	r2,32(r2)
 803c16c:	10800a17 	ldw	r2,40(r2)
 803c170:	1885c83a 	sub	r2,r3,r2
 803c174:	10000a16 	blt	r2,zero,803c1a0 <tcp_respond+0x80>
 803c178:	e0bff717 	ldw	r2,-36(fp)
 803c17c:	10800d17 	ldw	r2,52(r2)
 803c180:	10800817 	ldw	r2,32(r2)
 803c184:	10c00b17 	ldw	r3,44(r2)
 803c188:	e0bff717 	ldw	r2,-36(fp)
 803c18c:	10800d17 	ldw	r2,52(r2)
 803c190:	10800817 	ldw	r2,32(r2)
 803c194:	10800a17 	ldw	r2,40(r2)
 803c198:	1885c83a 	sub	r2,r3,r2
 803c19c:	00000106 	br	803c1a4 <tcp_respond+0x84>
 803c1a0:	0005883a 	mov	r2,zero
 803c1a4:	e0bffd15 	stw	r2,-12(fp)

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
 803c1a8:	e0800217 	ldw	r2,8(fp)
 803c1ac:	1000261e 	bne	r2,zero,803c248 <tcp_respond+0x128>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
 803c1b0:	01401004 	movi	r5,64
 803c1b4:	010000c4 	movi	r4,3
 803c1b8:	8030f540 	call	8030f54 <m_getnbuf>
 803c1bc:	e0bffc15 	stw	r2,-16(fp)
      if (m == NULL)
 803c1c0:	e0bffc17 	ldw	r2,-16(fp)
 803c1c4:	1000cd26 	beq	r2,zero,803c4fc <tcp_respond+0x3dc>
         return;
      tlen = 1;   /* Keepalives have one byte of data */
 803c1c8:	00800044 	movi	r2,1
 803c1cc:	e0bfff15 	stw	r2,-4(fp)
      m->m_len = TCPIPHDRSZ + tlen;
 803c1d0:	e0bfff17 	ldw	r2,-4(fp)
 803c1d4:	10800a04 	addi	r2,r2,40
 803c1d8:	1007883a 	mov	r3,r2
 803c1dc:	e0bffc17 	ldw	r2,-16(fp)
 803c1e0:	10c00215 	stw	r3,8(r2)
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
 803c1e4:	e0bffc17 	ldw	r2,-16(fp)
 803c1e8:	10800317 	ldw	r2,12(r2)
 803c1ec:	e0bff915 	stw	r2,-28(fp)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 803c1f0:	e0bffc17 	ldw	r2,-16(fp)
 803c1f4:	10800117 	ldw	r2,4(r2)
 803c1f8:	10800117 	ldw	r2,4(r2)
 803c1fc:	e0fff917 	ldw	r3,-28(fp)
 803c200:	1880032e 	bgeu	r3,r2,803c210 <tcp_respond+0xf0>
      {
         panic("tcp_respond- packet ptr underflow\n");
 803c204:	01020174 	movhi	r4,2053
 803c208:	210f4804 	addi	r4,r4,15648
 803c20c:	802bd8c0 	call	802bd8c <panic>
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 803c210:	01800a04 	movi	r6,40
 803c214:	e17ff617 	ldw	r5,-40(fp)
 803c218:	e13ff917 	ldw	r4,-28(fp)
 803c21c:	80037cc0 	call	80037cc <memcpy>
      ti = tmp_thdr;
 803c220:	e0bff917 	ldw	r2,-28(fp)
 803c224:	e0bff615 	stw	r2,-40(fp)
      flags = TH_ACK;
 803c228:	00800404 	movi	r2,16
 803c22c:	e0800215 	stw	r2,8(fp)
      domain = tp->t_inpcb->inp_socket->so_domain;
 803c230:	e0bff717 	ldw	r2,-36(fp)
 803c234:	10800d17 	ldw	r2,52(r2)
 803c238:	10800817 	ldw	r2,32(r2)
 803c23c:	10800517 	ldw	r2,20(r2)
 803c240:	e0bffe15 	stw	r2,-8(fp)
 803c244:	00003906 	br	803c32c <tcp_respond+0x20c>
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
 803c248:	e0800317 	ldw	r2,12(fp)
 803c24c:	e0bffc15 	stw	r2,-16(fp)
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 803c250:	e0bffc17 	ldw	r2,-16(fp)
 803c254:	10800117 	ldw	r2,4(r2)
 803c258:	1080080b 	ldhu	r2,32(r2)
 803c25c:	10bfffcc 	andi	r2,r2,65535
 803c260:	10800218 	cmpnei	r2,r2,8
 803c264:	1000031e 	bne	r2,zero,803c274 <tcp_respond+0x154>
         domain = AF_INET;
 803c268:	00800084 	movi	r2,2
 803c26c:	e0bffe15 	stw	r2,-8(fp)
 803c270:	00000206 	br	803c27c <tcp_respond+0x15c>
      else
         domain = AF_INET6;
 803c274:	008000c4 	movi	r2,3
 803c278:	e0bffe15 	stw	r2,-8(fp)

      m_freem(m->m_next);
 803c27c:	e0bffc17 	ldw	r2,-16(fp)
 803c280:	10800617 	ldw	r2,24(r2)
 803c284:	1009883a 	mov	r4,r2
 803c288:	80311e00 	call	80311e0 <m_freem>
      m->m_next = 0;
 803c28c:	e0bffc17 	ldw	r2,-16(fp)
 803c290:	10000615 	stw	zero,24(r2)
      tlen = 0;         /* NO data */
 803c294:	e03fff15 	stw	zero,-4(fp)
      m->m_len = TCPIPHDRSZ;
 803c298:	e0bffc17 	ldw	r2,-16(fp)
 803c29c:	00c00a04 	movi	r3,40
 803c2a0:	10c00215 	stw	r3,8(r2)
      xchg(ti->ti_dport, ti->ti_sport, u_short);
 803c2a4:	e0bff617 	ldw	r2,-40(fp)
 803c2a8:	1080058b 	ldhu	r2,22(r2)
 803c2ac:	e0bffb8d 	sth	r2,-18(fp)
 803c2b0:	e0bff617 	ldw	r2,-40(fp)
 803c2b4:	10c0050b 	ldhu	r3,20(r2)
 803c2b8:	e0bff617 	ldw	r2,-40(fp)
 803c2bc:	10c0058d 	sth	r3,22(r2)
 803c2c0:	e0bff617 	ldw	r2,-40(fp)
 803c2c4:	e0fffb8b 	ldhu	r3,-18(fp)
 803c2c8:	10c0050d 	sth	r3,20(r2)
      if(m->pkt->type == IPTP)
 803c2cc:	e0bffc17 	ldw	r2,-16(fp)
 803c2d0:	10800117 	ldw	r2,4(r2)
 803c2d4:	1080080b 	ldhu	r2,32(r2)
 803c2d8:	10bfffcc 	andi	r2,r2,65535
 803c2dc:	10800218 	cmpnei	r2,r2,8
 803c2e0:	10000a1e 	bne	r2,zero,803c30c <tcp_respond+0x1ec>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
 803c2e4:	e0bff617 	ldw	r2,-40(fp)
 803c2e8:	10800417 	ldw	r2,16(r2)
 803c2ec:	e0bffa15 	stw	r2,-24(fp)
 803c2f0:	e0bff617 	ldw	r2,-40(fp)
 803c2f4:	10c00317 	ldw	r3,12(r2)
 803c2f8:	e0bff617 	ldw	r2,-40(fp)
 803c2fc:	10c00415 	stw	r3,16(r2)
 803c300:	e0bff617 	ldw	r2,-40(fp)
 803c304:	e0fffa17 	ldw	r3,-24(fp)
 803c308:	10c00315 	stw	r3,12(r2)
      if (flags & TH_RST)  /* count resets in MIB */
 803c30c:	e0800217 	ldw	r2,8(fp)
 803c310:	1080010c 	andi	r2,r2,4
 803c314:	10000526 	beq	r2,zero,803c32c <tcp_respond+0x20c>
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
 803c318:	008201b4 	movhi	r2,2054
 803c31c:	10bf1e17 	ldw	r2,-904(r2)
 803c320:	10c00044 	addi	r3,r2,1
 803c324:	008201b4 	movhi	r2,2054
 803c328:	10ff1e15 	stw	r3,-904(r2)
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 803c32c:	e0bff417 	ldw	r2,-48(fp)
 803c330:	1006d63a 	srli	r3,r2,24
 803c334:	e0bff417 	ldw	r2,-48(fp)
 803c338:	1004d23a 	srli	r2,r2,8
 803c33c:	10bfc00c 	andi	r2,r2,65280
 803c340:	1886b03a 	or	r3,r3,r2
 803c344:	e0bff417 	ldw	r2,-48(fp)
 803c348:	1004923a 	slli	r2,r2,8
 803c34c:	10803fec 	andhi	r2,r2,255
 803c350:	1886b03a 	or	r3,r3,r2
 803c354:	e0bff417 	ldw	r2,-48(fp)
 803c358:	1004963a 	slli	r2,r2,24
 803c35c:	1886b03a 	or	r3,r3,r2
 803c360:	e0bff617 	ldw	r2,-40(fp)
 803c364:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(ack);
 803c368:	e0bff517 	ldw	r2,-44(fp)
 803c36c:	1006d63a 	srli	r3,r2,24
 803c370:	e0bff517 	ldw	r2,-44(fp)
 803c374:	1004d23a 	srli	r2,r2,8
 803c378:	10bfc00c 	andi	r2,r2,65280
 803c37c:	1886b03a 	or	r3,r3,r2
 803c380:	e0bff517 	ldw	r2,-44(fp)
 803c384:	1004923a 	slli	r2,r2,8
 803c388:	10803fec 	andhi	r2,r2,255
 803c38c:	1886b03a 	or	r3,r3,r2
 803c390:	e0bff517 	ldw	r2,-44(fp)
 803c394:	1004963a 	slli	r2,r2,24
 803c398:	1886b03a 	or	r3,r3,r2
 803c39c:	e0bff617 	ldw	r2,-40(fp)
 803c3a0:	10c00715 	stw	r3,28(r2)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
 803c3a4:	e0bff617 	ldw	r2,-40(fp)
 803c3a8:	00c01404 	movi	r3,80
 803c3ac:	10c00805 	stb	r3,32(r2)
   ti->ti_flags = (u_char)flags;
 803c3b0:	e0800217 	ldw	r2,8(fp)
 803c3b4:	1007883a 	mov	r3,r2
 803c3b8:	e0bff617 	ldw	r2,-40(fp)
 803c3bc:	10c00845 	stb	r3,33(r2)
   ti->ti_win = htons((u_short)win);
 803c3c0:	e0bffd17 	ldw	r2,-12(fp)
 803c3c4:	10bfffcc 	andi	r2,r2,65535
 803c3c8:	1004d23a 	srli	r2,r2,8
 803c3cc:	1007883a 	mov	r3,r2
 803c3d0:	e0bffd17 	ldw	r2,-12(fp)
 803c3d4:	10bfffcc 	andi	r2,r2,65535
 803c3d8:	1004923a 	slli	r2,r2,8
 803c3dc:	1884b03a 	or	r2,r3,r2
 803c3e0:	1007883a 	mov	r3,r2
 803c3e4:	e0bff617 	ldw	r2,-40(fp)
 803c3e8:	10c0088d 	sth	r3,34(r2)
   ti->ti_urp = 0;
 803c3ec:	e0bff617 	ldw	r2,-40(fp)
 803c3f0:	1000098d 	sth	zero,38(r2)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
 803c3f4:	e0bffe17 	ldw	r2,-8(fp)
 803c3f8:	10800098 	cmpnei	r2,r2,2
 803c3fc:	10003c1e 	bne	r2,zero,803c4f0 <tcp_respond+0x3d0>
#ifdef IP_V4
      case AF_INET:
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));
 803c400:	e0bff617 	ldw	r2,-40(fp)
 803c404:	e0bff815 	stw	r2,-32(fp)

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
 803c408:	e0bfff17 	ldw	r2,-4(fp)
 803c40c:	10800a04 	addi	r2,r2,40
 803c410:	1007883a 	mov	r3,r2
 803c414:	e0bff817 	ldw	r2,-32(fp)
 803c418:	10c0008d 	sth	r3,2(r2)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
 803c41c:	e0bffc17 	ldw	r2,-16(fp)
 803c420:	10800117 	ldw	r2,4(r2)
 803c424:	10800117 	ldw	r2,4(r2)
 803c428:	d0e07c17 	ldw	r3,-32272(gp)
 803c42c:	10c5883a 	add	r2,r2,r3
 803c430:	e0fff817 	ldw	r3,-32(fp)
 803c434:	18800436 	bltu	r3,r2,803c448 <tcp_respond+0x328>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
 803c438:	e0bffc17 	ldw	r2,-16(fp)
 803c43c:	e0fff817 	ldw	r3,-32(fp)
 803c440:	10c00315 	stw	r3,12(r2)
 803c444:	00001206 	br	803c490 <tcp_respond+0x370>
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
 803c448:	e0bffc17 	ldw	r2,-16(fp)
 803c44c:	10800117 	ldw	r2,4(r2)
 803c450:	10c00117 	ldw	r3,4(r2)
 803c454:	d0a07c17 	ldw	r2,-32272(gp)
 803c458:	1009883a 	mov	r4,r2
 803c45c:	e0bffc17 	ldw	r2,-16(fp)
 803c460:	10800117 	ldw	r2,4(r2)
 803c464:	1907883a 	add	r3,r3,r4
 803c468:	10c00315 	stw	r3,12(r2)
 803c46c:	10c00317 	ldw	r3,12(r2)
 803c470:	e0bffc17 	ldw	r2,-16(fp)
 803c474:	10c00315 	stw	r3,12(r2)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
 803c478:	e0bffc17 	ldw	r2,-16(fp)
 803c47c:	10800317 	ldw	r2,12(r2)
 803c480:	01800a04 	movi	r6,40
 803c484:	e17ff817 	ldw	r5,-32(fp)
 803c488:	1009883a 	mov	r4,r2
 803c48c:	800c1f00 	call	800c1f0 <memmove>

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
 803c490:	e0bff717 	ldw	r2,-36(fp)
 803c494:	1000031e 	bne	r2,zero,803c4a4 <tcp_respond+0x384>
              m_freem(m);
 803c498:	e13ffc17 	ldw	r4,-16(fp)
 803c49c:	80311e00 	call	80311e0 <m_freem>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
		 }

         break;
 803c4a0:	00001506 	br	803c4f8 <tcp_respond+0x3d8>
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
 803c4a4:	e0bff717 	ldw	r2,-36(fp)
 803c4a8:	10800d17 	ldw	r2,52(r2)
 803c4ac:	10000c26 	beq	r2,zero,803c4e0 <tcp_respond+0x3c0>
 803c4b0:	e0bff717 	ldw	r2,-36(fp)
 803c4b4:	10800d17 	ldw	r2,52(r2)
 803c4b8:	10800817 	ldw	r2,32(r2)
 803c4bc:	10000826 	beq	r2,zero,803c4e0 <tcp_respond+0x3c0>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
 803c4c0:	e0bff717 	ldw	r2,-36(fp)
 803c4c4:	10800d17 	ldw	r2,52(r2)
 803c4c8:	10800817 	ldw	r2,32(r2)
 803c4cc:	10801f17 	ldw	r2,124(r2)
 803c4d0:	100b883a 	mov	r5,r2
 803c4d4:	e13ffc17 	ldw	r4,-16(fp)
 803c4d8:	8031b400 	call	8031b40 <ip_output>
         break;
 803c4dc:	00000606 	br	803c4f8 <tcp_respond+0x3d8>
				ip_output(m, (struct   ip_socopts *)NULL);
 803c4e0:	000b883a 	mov	r5,zero
 803c4e4:	e13ffc17 	ldw	r4,-16(fp)
 803c4e8:	8031b400 	call	8031b40 <ip_output>
         break;
 803c4ec:	00000206 	br	803c4f8 <tcp_respond+0x3d8>

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
 803c4f0:	80301a80 	call	80301a8 <dtrap>
         break;
 803c4f4:	0001883a 	nop
   }
   return;
 803c4f8:	00000106 	br	803c500 <tcp_respond+0x3e0>
         return;
 803c4fc:	0001883a 	nop
}
 803c500:	e037883a 	mov	sp,fp
 803c504:	dfc00117 	ldw	ra,4(sp)
 803c508:	df000017 	ldw	fp,0(sp)
 803c50c:	dec00204 	addi	sp,sp,8
 803c510:	f800283a 	ret

0803c514 <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
 803c514:	defffb04 	addi	sp,sp,-20
 803c518:	dfc00415 	stw	ra,16(sp)
 803c51c:	df000315 	stw	fp,12(sp)
 803c520:	df000304 	addi	fp,sp,12
 803c524:	e13ffd15 	stw	r4,-12(fp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
 803c528:	01002504 	movi	r4,148
 803c52c:	8030d080 	call	8030d08 <npalloc>
 803c530:	e0bfff15 	stw	r2,-4(fp)
   if (tp == NULL)
 803c534:	e0bfff17 	ldw	r2,-4(fp)
 803c538:	1000021e 	bne	r2,zero,803c544 <tcp_newtcpcb+0x30>
      return (struct tcpcb *)NULL;
 803c53c:	0005883a 	mov	r2,zero
 803c540:	00003206 	br	803c60c <tcp_newtcpcb+0xf8>
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
 803c544:	e0bfff17 	ldw	r2,-4(fp)
 803c548:	e0ffff17 	ldw	r3,-4(fp)
 803c54c:	10c00115 	stw	r3,4(r2)
 803c550:	e0bfff17 	ldw	r2,-4(fp)
 803c554:	10c00117 	ldw	r3,4(r2)
 803c558:	e0bfff17 	ldw	r2,-4(fp)
 803c55c:	10c00015 	stw	r3,0(r2)
   tp->t_maxseg = TCP_MSS;
 803c560:	e0bfff17 	ldw	r2,-4(fp)
 803c564:	00c16d04 	movi	r3,1460
 803c568:	10c00a0d 	sth	r3,40(r2)
   tp->t_flags = 0;        /* sends options! */
 803c56c:	e0bfff17 	ldw	r2,-4(fp)
 803c570:	10000b0d 	sth	zero,44(r2)
   tp->t_inpcb = inp;
 803c574:	e0bfff17 	ldw	r2,-4(fp)
 803c578:	e0fffd17 	ldw	r3,-12(fp)
 803c57c:	10c00d15 	stw	r3,52(r2)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
 803c580:	e0bfff17 	ldw	r2,-4(fp)
 803c584:	10002015 	stw	zero,128(r2)
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
 803c588:	e0bfff17 	ldw	r2,-4(fp)
 803c58c:	00c00604 	movi	r3,24
 803c590:	10c02115 	stw	r3,132(r2)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
 803c594:	00800304 	movi	r2,12
 803c598:	e0bffe8d 	sth	r2,-6(fp)
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
 803c59c:	e0fffe8f 	ldh	r3,-6(fp)
 803c5a0:	e0bfff17 	ldw	r2,-4(fp)
 803c5a4:	10c00815 	stw	r3,32(r2)
 803c5a8:	e0bfff17 	ldw	r2,-4(fp)
 803c5ac:	10800817 	ldw	r2,32(r2)
 803c5b0:	10800088 	cmpgei	r2,r2,2
 803c5b4:	1000041e 	bne	r2,zero,803c5c8 <tcp_newtcpcb+0xb4>
 803c5b8:	e0bfff17 	ldw	r2,-4(fp)
 803c5bc:	00c00084 	movi	r3,2
 803c5c0:	10c00815 	stw	r3,32(r2)
 803c5c4:	00000706 	br	803c5e4 <tcp_newtcpcb+0xd0>
 803c5c8:	e0bfff17 	ldw	r2,-4(fp)
 803c5cc:	10800817 	ldw	r2,32(r2)
 803c5d0:	10802050 	cmplti	r2,r2,129
 803c5d4:	1000031e 	bne	r2,zero,803c5e4 <tcp_newtcpcb+0xd0>
 803c5d8:	e0bfff17 	ldw	r2,-4(fp)
 803c5dc:	00c02004 	movi	r3,128
 803c5e0:	10c00815 	stw	r3,32(r2)

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
 803c5e4:	e0bfff17 	ldw	r2,-4(fp)
 803c5e8:	00c2da04 	movi	r3,2920
 803c5ec:	10c01b15 	stw	r3,108(r2)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
 803c5f0:	e0bfff17 	ldw	r2,-4(fp)
 803c5f4:	00ffffd4 	movui	r3,65535
 803c5f8:	10c01c15 	stw	r3,112(r2)

   inp->inp_ppcb = (char *)tp;
 803c5fc:	e0bffd17 	ldw	r2,-12(fp)
 803c600:	e0ffff17 	ldw	r3,-4(fp)
 803c604:	10c00915 	stw	r3,36(r2)
   return (tp);
 803c608:	e0bfff17 	ldw	r2,-4(fp)
}
 803c60c:	e037883a 	mov	sp,fp
 803c610:	dfc00117 	ldw	ra,4(sp)
 803c614:	df000017 	ldw	fp,0(sp)
 803c618:	dec00204 	addi	sp,sp,8
 803c61c:	f800283a 	ret

0803c620 <tcp_drop>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 803c620:	defffb04 	addi	sp,sp,-20
 803c624:	dfc00415 	stw	ra,16(sp)
 803c628:	df000315 	stw	fp,12(sp)
 803c62c:	df000304 	addi	fp,sp,12
 803c630:	e13ffe15 	stw	r4,-8(fp)
 803c634:	e17ffd15 	stw	r5,-12(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 803c638:	e0bffe17 	ldw	r2,-8(fp)
 803c63c:	10800d17 	ldw	r2,52(r2)
 803c640:	10800817 	ldw	r2,32(r2)
 803c644:	e0bfff15 	stw	r2,-4(fp)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 803c648:	e0bffe17 	ldw	r2,-8(fp)
 803c64c:	10800217 	ldw	r2,8(r2)
 803c650:	108000d0 	cmplti	r2,r2,3
 803c654:	10000a1e 	bne	r2,zero,803c680 <tcp_drop+0x60>
   {
      tp->t_state = TCPS_CLOSED;
 803c658:	e0bffe17 	ldw	r2,-8(fp)
 803c65c:	10000215 	stw	zero,8(r2)
      (void) tcp_output(tp);
 803c660:	e13ffe17 	ldw	r4,-8(fp)
 803c664:	803ae700 	call	803ae70 <tcp_output>
      tcpstat.tcps_drops++;
 803c668:	008201b4 	movhi	r2,2054
 803c66c:	10bf4117 	ldw	r2,-764(r2)
 803c670:	10c00044 	addi	r3,r2,1
 803c674:	008201b4 	movhi	r2,2054
 803c678:	10ff4115 	stw	r3,-764(r2)
 803c67c:	00000506 	br	803c694 <tcp_drop+0x74>
   }
   else
      tcpstat.tcps_conndrops++;
 803c680:	008201b4 	movhi	r2,2054
 803c684:	10bf4217 	ldw	r2,-760(r2)
 803c688:	10c00044 	addi	r3,r2,1
 803c68c:	008201b4 	movhi	r2,2054
 803c690:	10ff4215 	stw	r3,-760(r2)
   so->so_error = err;
 803c694:	e0bfff17 	ldw	r2,-4(fp)
 803c698:	e0fffd17 	ldw	r3,-12(fp)
 803c69c:	10c00615 	stw	r3,24(r2)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 803c6a0:	e13ffe17 	ldw	r4,-8(fp)
 803c6a4:	803c6bc0 	call	803c6bc <tcp_close>
}
 803c6a8:	e037883a 	mov	sp,fp
 803c6ac:	dfc00117 	ldw	ra,4(sp)
 803c6b0:	df000017 	ldw	fp,0(sp)
 803c6b4:	dec00204 	addi	sp,sp,8
 803c6b8:	f800283a 	ret

0803c6bc <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
 803c6bc:	defff904 	addi	sp,sp,-28
 803c6c0:	dfc00615 	stw	ra,24(sp)
 803c6c4:	df000515 	stw	fp,20(sp)
 803c6c8:	df000504 	addi	fp,sp,20
 803c6cc:	e13ffb15 	stw	r4,-20(fp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
 803c6d0:	e0bffb17 	ldw	r2,-20(fp)
 803c6d4:	10800d17 	ldw	r2,52(r2)
 803c6d8:	e0bffe15 	stw	r2,-8(fp)
   struct socket *   so =  inp->inp_socket;
 803c6dc:	e0bffe17 	ldw	r2,-8(fp)
 803c6e0:	10800817 	ldw	r2,32(r2)
 803c6e4:	e0bffd15 	stw	r2,-12(fp)
   struct mbuf *  m;

   t = tp->seg_next;
 803c6e8:	e0bffb17 	ldw	r2,-20(fp)
 803c6ec:	10800017 	ldw	r2,0(r2)
 803c6f0:	e0bfff15 	stw	r2,-4(fp)
   while (t != (struct tcpiphdr *)tp) 
 803c6f4:	00000e06 	br	803c730 <tcp_close+0x74>
   {
      t = (struct tcpiphdr *)t->ti_next;
 803c6f8:	e0bfff17 	ldw	r2,-4(fp)
 803c6fc:	10800017 	ldw	r2,0(r2)
 803c700:	e0bfff15 	stw	r2,-4(fp)
      m = dtom(t->ti_prev);
 803c704:	e0bfff17 	ldw	r2,-4(fp)
 803c708:	10800117 	ldw	r2,4(r2)
 803c70c:	1009883a 	mov	r4,r2
 803c710:	80317140 	call	8031714 <dtom>
 803c714:	e0bffc15 	stw	r2,-16(fp)
      remque(t->ti_prev);
 803c718:	e0bfff17 	ldw	r2,-4(fp)
 803c71c:	10800117 	ldw	r2,4(r2)
 803c720:	1009883a 	mov	r4,r2
 803c724:	80317ac0 	call	80317ac <remque>
      m_freem (m);
 803c728:	e13ffc17 	ldw	r4,-16(fp)
 803c72c:	80311e00 	call	80311e0 <m_freem>
   while (t != (struct tcpiphdr *)tp) 
 803c730:	e0ffff17 	ldw	r3,-4(fp)
 803c734:	e0bffb17 	ldw	r2,-20(fp)
 803c738:	18bfef1e 	bne	r3,r2,803c6f8 <tcp_close+0x3c>
   }
   if (tp->t_template)
 803c73c:	e0bffb17 	ldw	r2,-20(fp)
 803c740:	10800c17 	ldw	r2,48(r2)
 803c744:	10000426 	beq	r2,zero,803c758 <tcp_close+0x9c>
      TPH_FREE (tp->t_template);
 803c748:	e0bffb17 	ldw	r2,-20(fp)
 803c74c:	10800c17 	ldw	r2,48(r2)
 803c750:	1009883a 	mov	r4,r2
 803c754:	8030d3c0 	call	8030d3c <npfree>
   TCB_FREE (tp);
 803c758:	e13ffb17 	ldw	r4,-20(fp)
 803c75c:	8030d3c0 	call	8030d3c <npfree>
   inp->inp_ppcb = 0;
 803c760:	e0bffe17 	ldw	r2,-8(fp)
 803c764:	10000915 	stw	zero,36(r2)
   soisdisconnected(so);
 803c768:	e13ffd17 	ldw	r4,-12(fp)
 803c76c:	803693c0 	call	803693c <soisdisconnected>
   in_pcbdetach(inp);
 803c770:	e13ffe17 	ldw	r4,-8(fp)
 803c774:	804a89c0 	call	804a89c <in_pcbdetach>
   tcpstat.tcps_closed++;
 803c778:	008201b4 	movhi	r2,2054
 803c77c:	10bf4317 	ldw	r2,-756(r2)
 803c780:	10c00044 	addi	r3,r2,1
 803c784:	008201b4 	movhi	r2,2054
 803c788:	10ff4315 	stw	r3,-756(r2)
   return ((struct tcpcb *)0);
 803c78c:	0005883a 	mov	r2,zero
}
 803c790:	e037883a 	mov	sp,fp
 803c794:	dfc00117 	ldw	ra,4(sp)
 803c798:	df000017 	ldw	fp,0(sp)
 803c79c:	dec00204 	addi	sp,sp,8
 803c7a0:	f800283a 	ret

0803c7a4 <tcp_quench>:
 * RETURNS: 
 */

void
tcp_quench(struct inpcb * inp)
{
 803c7a4:	defffd04 	addi	sp,sp,-12
 803c7a8:	df000215 	stw	fp,8(sp)
 803c7ac:	df000204 	addi	fp,sp,8
 803c7b0:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp =  intotcpcb(inp);
 803c7b4:	e0bffe17 	ldw	r2,-8(fp)
 803c7b8:	10800917 	ldw	r2,36(r2)
 803c7bc:	e0bfff15 	stw	r2,-4(fp)

   if (tp)
 803c7c0:	e0bfff17 	ldw	r2,-4(fp)
 803c7c4:	10000526 	beq	r2,zero,803c7dc <tcp_quench+0x38>
      tp->snd_cwnd = tp->t_maxseg;
 803c7c8:	e0bfff17 	ldw	r2,-4(fp)
 803c7cc:	10800a0b 	ldhu	r2,40(r2)
 803c7d0:	10ffffcc 	andi	r3,r2,65535
 803c7d4:	e0bfff17 	ldw	r2,-4(fp)
 803c7d8:	10c01b15 	stw	r3,108(r2)
}
 803c7dc:	0001883a 	nop
 803c7e0:	e037883a 	mov	sp,fp
 803c7e4:	df000017 	ldw	fp,0(sp)
 803c7e8:	dec00104 	addi	sp,sp,4
 803c7ec:	f800283a 	ret

0803c7f0 <tcp_putseq>:

/* tcp_putseq()  */

u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
 803c7f0:	defffc04 	addi	sp,sp,-16
 803c7f4:	df000315 	stw	fp,12(sp)
 803c7f8:	df000304 	addi	fp,sp,12
 803c7fc:	e13ffe15 	stw	r4,-8(fp)
 803c800:	e17ffd15 	stw	r5,-12(fp)
   int   i;

   cp += 3;                /* do low byte first */
 803c804:	e0bffe17 	ldw	r2,-8(fp)
 803c808:	108000c4 	addi	r2,r2,3
 803c80c:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 803c810:	e03fff15 	stw	zero,-4(fp)
 803c814:	00000b06 	br	803c844 <tcp_putseq+0x54>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
 803c818:	e0bffe17 	ldw	r2,-8(fp)
 803c81c:	10ffffc4 	addi	r3,r2,-1
 803c820:	e0fffe15 	stw	r3,-8(fp)
 803c824:	e0fffd17 	ldw	r3,-12(fp)
 803c828:	10c00005 	stb	r3,0(r2)
      seq >>= 8;
 803c82c:	e0bffd17 	ldw	r2,-12(fp)
 803c830:	1004d23a 	srli	r2,r2,8
 803c834:	e0bffd15 	stw	r2,-12(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 803c838:	e0bfff17 	ldw	r2,-4(fp)
 803c83c:	10800044 	addi	r2,r2,1
 803c840:	e0bfff15 	stw	r2,-4(fp)
 803c844:	e0bfff17 	ldw	r2,-4(fp)
 803c848:	10800110 	cmplti	r2,r2,4
 803c84c:	103ff21e 	bne	r2,zero,803c818 <tcp_putseq+0x28>
   }
   return (cp + 5);
 803c850:	e0bffe17 	ldw	r2,-8(fp)
 803c854:	10800144 	addi	r2,r2,5
}
 803c858:	e037883a 	mov	sp,fp
 803c85c:	df000017 	ldw	fp,0(sp)
 803c860:	dec00104 	addi	sp,sp,4
 803c864:	f800283a 	ret

0803c868 <tcp_getseq>:
 * RETURNS: a long in local endian
 */

u_long
tcp_getseq(u_char * cp)
{
 803c868:	defffc04 	addi	sp,sp,-16
 803c86c:	df000315 	stw	fp,12(sp)
 803c870:	df000304 	addi	fp,sp,12
 803c874:	e13ffd15 	stw	r4,-12(fp)
   int i;
   ulong seq = 0;
 803c878:	e03ffe15 	stw	zero,-8(fp)

   for(i = 0; i < 4; i++)
 803c87c:	e03fff15 	stw	zero,-4(fp)
 803c880:	00000e06 	br	803c8bc <tcp_getseq+0x54>
   {
      seq <<= 8;
 803c884:	e0bffe17 	ldw	r2,-8(fp)
 803c888:	1004923a 	slli	r2,r2,8
 803c88c:	e0bffe15 	stw	r2,-8(fp)
      seq += (u_long)*(cp++);
 803c890:	e0bffd17 	ldw	r2,-12(fp)
 803c894:	10c00044 	addi	r3,r2,1
 803c898:	e0fffd15 	stw	r3,-12(fp)
 803c89c:	10800003 	ldbu	r2,0(r2)
 803c8a0:	10803fcc 	andi	r2,r2,255
 803c8a4:	e0fffe17 	ldw	r3,-8(fp)
 803c8a8:	1885883a 	add	r2,r3,r2
 803c8ac:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i < 4; i++)
 803c8b0:	e0bfff17 	ldw	r2,-4(fp)
 803c8b4:	10800044 	addi	r2,r2,1
 803c8b8:	e0bfff15 	stw	r2,-4(fp)
 803c8bc:	e0bfff17 	ldw	r2,-4(fp)
 803c8c0:	10800110 	cmplti	r2,r2,4
 803c8c4:	103fef1e 	bne	r2,zero,803c884 <tcp_getseq+0x1c>
   }
   return seq;
 803c8c8:	e0bffe17 	ldw	r2,-8(fp)
}
 803c8cc:	e037883a 	mov	sp,fp
 803c8d0:	df000017 	ldw	fp,0(sp)
 803c8d4:	dec00104 	addi	sp,sp,4
 803c8d8:	f800283a 	ret

0803c8dc <tcp_slowtimo>:
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
 803c8dc:	defff704 	addi	sp,sp,-36
 803c8e0:	dfc00815 	stw	ra,32(sp)
 803c8e4:	df000715 	stw	fp,28(sp)
 803c8e8:	df000704 	addi	fp,sp,28
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 803c8ec:	d0a03b17 	ldw	r2,-32532(gp)
 803c8f0:	100490fa 	slli	r2,r2,3
 803c8f4:	d0a0af15 	stw	r2,-32068(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 803c8f8:	008201b4 	movhi	r2,2054
 803c8fc:	10bf0b17 	ldw	r2,-980(r2)
 803c900:	e0bffe15 	stw	r2,-8(fp)
 803c904:	00007c06 	br	803caf8 <tcp_slowtimo+0x21c>
   {
      sonext = so->next;
 803c908:	e0bffe17 	ldw	r2,-8(fp)
 803c90c:	10800017 	ldw	r2,0(r2)
 803c910:	e0bffd15 	stw	r2,-12(fp)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
 803c914:	e0bffe17 	ldw	r2,-8(fp)
 803c918:	10800983 	ldbu	r2,38(r2)
 803c91c:	10803fcc 	andi	r2,r2,255
 803c920:	1080201c 	xori	r2,r2,128
 803c924:	10bfe004 	addi	r2,r2,-128
 803c928:	10800058 	cmpnei	r2,r2,1
 803c92c:	1000421e 	bne	r2,zero,803ca38 <tcp_slowtimo+0x15c>
      {
         ip = so->so_pcb;
 803c930:	e0bffe17 	ldw	r2,-8(fp)
 803c934:	10800117 	ldw	r2,4(r2)
 803c938:	e0bffc15 	stw	r2,-16(fp)
         if (!ip)
 803c93c:	e0bffc17 	ldw	r2,-16(fp)
 803c940:	10006626 	beq	r2,zero,803cadc <tcp_slowtimo+0x200>
            continue;
         ipnxt = ip->inp_next;
 803c944:	e0bffc17 	ldw	r2,-16(fp)
 803c948:	10800017 	ldw	r2,0(r2)
 803c94c:	e0bffb15 	stw	r2,-20(fp)

         tp = intotcpcb(so->so_pcb);
 803c950:	e0bffe17 	ldw	r2,-8(fp)
 803c954:	10800117 	ldw	r2,4(r2)
 803c958:	10800917 	ldw	r2,36(r2)
 803c95c:	e0bffa15 	stw	r2,-24(fp)
         if (!tp)
 803c960:	e0bffa17 	ldw	r2,-24(fp)
 803c964:	10005f26 	beq	r2,zero,803cae4 <tcp_slowtimo+0x208>
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
 803c968:	e03fff15 	stw	zero,-4(fp)
 803c96c:	00002a06 	br	803ca18 <tcp_slowtimo+0x13c>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
 803c970:	e0fffa17 	ldw	r3,-24(fp)
 803c974:	e0bfff17 	ldw	r2,-4(fp)
 803c978:	108000c4 	addi	r2,r2,3
 803c97c:	100490ba 	slli	r2,r2,2
 803c980:	1885883a 	add	r2,r3,r2
 803c984:	10800017 	ldw	r2,0(r2)
 803c988:	10002026 	beq	r2,zero,803ca0c <tcp_slowtimo+0x130>
 803c98c:	e0fffa17 	ldw	r3,-24(fp)
 803c990:	e0bfff17 	ldw	r2,-4(fp)
 803c994:	108000c4 	addi	r2,r2,3
 803c998:	100490ba 	slli	r2,r2,2
 803c99c:	1885883a 	add	r2,r3,r2
 803c9a0:	10800017 	ldw	r2,0(r2)
 803c9a4:	10ffffc4 	addi	r3,r2,-1
 803c9a8:	e13ffa17 	ldw	r4,-24(fp)
 803c9ac:	e0bfff17 	ldw	r2,-4(fp)
 803c9b0:	108000c4 	addi	r2,r2,3
 803c9b4:	100490ba 	slli	r2,r2,2
 803c9b8:	2085883a 	add	r2,r4,r2
 803c9bc:	10c00015 	stw	r3,0(r2)
 803c9c0:	e0fffa17 	ldw	r3,-24(fp)
 803c9c4:	e0bfff17 	ldw	r2,-4(fp)
 803c9c8:	108000c4 	addi	r2,r2,3
 803c9cc:	100490ba 	slli	r2,r2,2
 803c9d0:	1885883a 	add	r2,r3,r2
 803c9d4:	10800017 	ldw	r2,0(r2)
 803c9d8:	10000c1e 	bne	r2,zero,803ca0c <tcp_slowtimo+0x130>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
 803c9dc:	e0bffe17 	ldw	r2,-8(fp)
 803c9e0:	00c004c4 	movi	r3,19
 803c9e4:	10c00715 	stw	r3,28(r2)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
 803c9e8:	e0bfff17 	ldw	r2,-4(fp)
 803c9ec:	100d883a 	mov	r6,r2
 803c9f0:	000b883a 	mov	r5,zero
 803c9f4:	e13ffe17 	ldw	r4,-8(fp)
 803c9f8:	803cff80 	call	803cff8 <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
 803c9fc:	e0bffb17 	ldw	r2,-20(fp)
 803ca00:	10800117 	ldw	r2,4(r2)
 803ca04:	e0fffc17 	ldw	r3,-16(fp)
 803ca08:	1880381e 	bne	r3,r2,803caec <tcp_slowtimo+0x210>
         for (i = 0; i < TCPT_NTIMERS; i++) 
 803ca0c:	e0bfff17 	ldw	r2,-4(fp)
 803ca10:	10800044 	addi	r2,r2,1
 803ca14:	e0bfff15 	stw	r2,-4(fp)
 803ca18:	e0bfff17 	ldw	r2,-4(fp)
 803ca1c:	10800110 	cmplti	r2,r2,4
 803ca20:	103fd31e 	bne	r2,zero,803c970 <tcp_slowtimo+0x94>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
 803ca24:	e0bffa17 	ldw	r2,-24(fp)
 803ca28:	10801d17 	ldw	r2,116(r2)
 803ca2c:	10c00044 	addi	r3,r2,1
 803ca30:	e0bffa17 	ldw	r2,-24(fp)
 803ca34:	10c01d15 	stw	r3,116(r2)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
 803ca38:	e0bffe17 	ldw	r2,-8(fp)
 803ca3c:	10800a04 	addi	r2,r2,40
 803ca40:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 803ca44:	e0bff917 	ldw	r2,-28(fp)
 803ca48:	1080070b 	ldhu	r2,28(r2)
 803ca4c:	10bfffcc 	andi	r2,r2,65535
 803ca50:	1080020c 	andi	r2,r2,8
 803ca54:	10000a26 	beq	r2,zero,803ca80 <tcp_slowtimo+0x1a4>
      {
         select_wait = 0;
 803ca58:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 803ca5c:	d120ab04 	addi	r4,gp,-32084
 803ca60:	802c7b80 	call	802c7b8 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 803ca64:	e0bff917 	ldw	r2,-28(fp)
 803ca68:	10c0070b 	ldhu	r3,28(r2)
 803ca6c:	00bffdc4 	movi	r2,-9
 803ca70:	1884703a 	and	r2,r3,r2
 803ca74:	1007883a 	mov	r3,r2
 803ca78:	e0bff917 	ldw	r2,-28(fp)
 803ca7c:	10c0070d 	sth	r3,28(r2)
      }
      sb = &so->so_snd;
 803ca80:	e0bffe17 	ldw	r2,-8(fp)
 803ca84:	10801204 	addi	r2,r2,72
 803ca88:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 803ca8c:	e0bff917 	ldw	r2,-28(fp)
 803ca90:	1080070b 	ldhu	r2,28(r2)
 803ca94:	10bfffcc 	andi	r2,r2,65535
 803ca98:	1080020c 	andi	r2,r2,8
 803ca9c:	10000a26 	beq	r2,zero,803cac8 <tcp_slowtimo+0x1ec>
      {
         select_wait = 0;         
 803caa0:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 803caa4:	d120ab04 	addi	r4,gp,-32084
 803caa8:	802c7b80 	call	802c7b8 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 803caac:	e0bff917 	ldw	r2,-28(fp)
 803cab0:	10c0070b 	ldhu	r3,28(r2)
 803cab4:	00bffdc4 	movi	r2,-9
 803cab8:	1884703a 	and	r2,r3,r2
 803cabc:	1007883a 	mov	r3,r2
 803cac0:	e0bff917 	ldw	r2,-28(fp)
 803cac4:	10c0070d 	sth	r3,28(r2)
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
 803cac8:	e0bffe17 	ldw	r2,-8(fp)
 803cacc:	10800904 	addi	r2,r2,36
 803cad0:	1009883a 	mov	r4,r2
 803cad4:	802c7b80 	call	802c7b8 <tcp_wakeup>
 803cad8:	00000506 	br	803caf0 <tcp_slowtimo+0x214>
            continue;
 803cadc:	0001883a 	nop
 803cae0:	00000306 	br	803caf0 <tcp_slowtimo+0x214>
            continue;
 803cae4:	0001883a 	nop
 803cae8:	00000106 	br	803caf0 <tcp_slowtimo+0x214>
                  goto tpgone;
 803caec:	0001883a 	nop
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 803caf0:	e0bffd17 	ldw	r2,-12(fp)
 803caf4:	e0bffe15 	stw	r2,-8(fp)
 803caf8:	e0bffe17 	ldw	r2,-8(fp)
 803cafc:	103f821e 	bne	r2,zero,803c908 <tcp_slowtimo+0x2c>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
 803cb00:	d0e0b017 	ldw	r3,-32064(gp)
 803cb04:	00be9fd4 	movui	r2,64127
 803cb08:	1885883a 	add	r2,r3,r2
 803cb0c:	d0a0b015 	stw	r2,-32064(gp)

   if (tcp_iss & 0xff000000)
 803cb10:	d0a0b017 	ldw	r2,-32064(gp)
 803cb14:	10bfc02c 	andhi	r2,r2,65280
 803cb18:	10000126 	beq	r2,zero,803cb20 <tcp_slowtimo+0x244>
      tcp_iss = 0L;
 803cb1c:	d020b015 	stw	zero,-32064(gp)
}
 803cb20:	0001883a 	nop
 803cb24:	e037883a 	mov	sp,fp
 803cb28:	dfc00117 	ldw	ra,4(sp)
 803cb2c:	df000017 	ldw	fp,0(sp)
 803cb30:	dec00204 	addi	sp,sp,8
 803cb34:	f800283a 	ret

0803cb38 <tcp_canceltimers>:
 * RETURNS: 
 */

void
tcp_canceltimers(struct tcpcb * tp)
{
 803cb38:	defffd04 	addi	sp,sp,-12
 803cb3c:	df000215 	stw	fp,8(sp)
 803cb40:	df000204 	addi	fp,sp,8
 803cb44:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
 803cb48:	e03fff15 	stw	zero,-4(fp)
 803cb4c:	00000906 	br	803cb74 <tcp_canceltimers+0x3c>
      tp->t_timer[i] = 0;
 803cb50:	e0fffe17 	ldw	r3,-8(fp)
 803cb54:	e0bfff17 	ldw	r2,-4(fp)
 803cb58:	108000c4 	addi	r2,r2,3
 803cb5c:	100490ba 	slli	r2,r2,2
 803cb60:	1885883a 	add	r2,r3,r2
 803cb64:	10000015 	stw	zero,0(r2)
   for (i = 0; i < TCPT_NTIMERS; i++)
 803cb68:	e0bfff17 	ldw	r2,-4(fp)
 803cb6c:	10800044 	addi	r2,r2,1
 803cb70:	e0bfff15 	stw	r2,-4(fp)
 803cb74:	e0bfff17 	ldw	r2,-4(fp)
 803cb78:	10800110 	cmplti	r2,r2,4
 803cb7c:	103ff41e 	bne	r2,zero,803cb50 <tcp_canceltimers+0x18>
}
 803cb80:	0001883a 	nop
 803cb84:	0001883a 	nop
 803cb88:	e037883a 	mov	sp,fp
 803cb8c:	df000017 	ldw	fp,0(sp)
 803cb90:	dec00104 	addi	sp,sp,4
 803cb94:	f800283a 	ret

0803cb98 <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
 803cb98:	defff804 	addi	sp,sp,-32
 803cb9c:	dfc00715 	stw	ra,28(sp)
 803cba0:	df000615 	stw	fp,24(sp)
 803cba4:	df000604 	addi	fp,sp,24
 803cba8:	e13ffd15 	stw	r4,-12(fp)
 803cbac:	e17ffc15 	stw	r5,-16(fp)
   int   rexmt;

   switch (timer) 
 803cbb0:	e0bffc17 	ldw	r2,-16(fp)
 803cbb4:	108000e0 	cmpeqi	r2,r2,3
 803cbb8:	10000f1e 	bne	r2,zero,803cbf8 <tcp_timers+0x60>
 803cbbc:	e0bffc17 	ldw	r2,-16(fp)
 803cbc0:	10800108 	cmpgei	r2,r2,4
 803cbc4:	1001061e 	bne	r2,zero,803cfe0 <tcp_timers+0x448>
 803cbc8:	e0bffc17 	ldw	r2,-16(fp)
 803cbcc:	108000a0 	cmpeqi	r2,r2,2
 803cbd0:	1000bb1e 	bne	r2,zero,803cec0 <tcp_timers+0x328>
 803cbd4:	e0bffc17 	ldw	r2,-16(fp)
 803cbd8:	108000c8 	cmpgei	r2,r2,3
 803cbdc:	1001001e 	bne	r2,zero,803cfe0 <tcp_timers+0x448>
 803cbe0:	e0bffc17 	ldw	r2,-16(fp)
 803cbe4:	10001726 	beq	r2,zero,803cc44 <tcp_timers+0xac>
 803cbe8:	e0bffc17 	ldw	r2,-16(fp)
 803cbec:	10800060 	cmpeqi	r2,r2,1
 803cbf0:	1000a41e 	bne	r2,zero,803ce84 <tcp_timers+0x2ec>
 803cbf4:	0000fa06 	br	803cfe0 <tcp_timers+0x448>
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
 803cbf8:	e0bffd17 	ldw	r2,-12(fp)
 803cbfc:	10800217 	ldw	r2,8(r2)
 803cc00:	108002a0 	cmpeqi	r2,r2,10
 803cc04:	10000b1e 	bne	r2,zero,803cc34 <tcp_timers+0x9c>
          tp->t_idle <= tcp_maxidle)
 803cc08:	e0bffd17 	ldw	r2,-12(fp)
 803cc0c:	10801d17 	ldw	r2,116(r2)
 803cc10:	d0e0af17 	ldw	r3,-32068(gp)
      if (tp->t_state != TCPS_TIME_WAIT &&
 803cc14:	18800716 	blt	r3,r2,803cc34 <tcp_timers+0x9c>
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
 803cc18:	d0a03b17 	ldw	r2,-32532(gp)
 803cc1c:	10ffffcc 	andi	r3,r2,65535
 803cc20:	18e0001c 	xori	r3,r3,32768
 803cc24:	18e00004 	addi	r3,r3,-32768
 803cc28:	e0bffd17 	ldw	r2,-12(fp)
 803cc2c:	10c00615 	stw	r3,24(r2)
      }
      else
         tp = tcp_close(tp);
      break;
 803cc30:	0000eb06 	br	803cfe0 <tcp_timers+0x448>
         tp = tcp_close(tp);
 803cc34:	e13ffd17 	ldw	r4,-12(fp)
 803cc38:	803c6bc0 	call	803c6bc <tcp_close>
 803cc3c:	e0bffd15 	stw	r2,-12(fp)
      break;
 803cc40:	0000e706 	br	803cfe0 <tcp_timers+0x448>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 803cc44:	008201b4 	movhi	r2,2054
 803cc48:	10bf1b17 	ldw	r2,-916(r2)
 803cc4c:	10c00044 	addi	r3,r2,1
 803cc50:	008201b4 	movhi	r2,2054
 803cc54:	10ff1b15 	stw	r3,-916(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 803cc58:	e0bffd17 	ldw	r2,-12(fp)
 803cc5c:	10800717 	ldw	r2,28(r2)
 803cc60:	10c00044 	addi	r3,r2,1
 803cc64:	e0bffd17 	ldw	r2,-12(fp)
 803cc68:	10c00715 	stw	r3,28(r2)
 803cc6c:	e0bffd17 	ldw	r2,-12(fp)
 803cc70:	10800717 	ldw	r2,28(r2)
 803cc74:	10800350 	cmplti	r2,r2,13
 803cc78:	10000d1e 	bne	r2,zero,803ccb0 <tcp_timers+0x118>
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
 803cc7c:	e0bffd17 	ldw	r2,-12(fp)
 803cc80:	00c00304 	movi	r3,12
 803cc84:	10c00715 	stw	r3,28(r2)
         tcpstat.tcps_timeoutdrop++;
 803cc88:	008201b4 	movhi	r2,2054
 803cc8c:	10bf4717 	ldw	r2,-740(r2)
 803cc90:	10c00044 	addi	r3,r2,1
 803cc94:	008201b4 	movhi	r2,2054
 803cc98:	10ff4715 	stw	r3,-740(r2)
         tp = tcp_drop(tp, ETIMEDOUT);
 803cc9c:	01401d04 	movi	r5,116
 803cca0:	e13ffd17 	ldw	r4,-12(fp)
 803cca4:	803c6200 	call	803c620 <tcp_drop>
 803cca8:	e0bffd15 	stw	r2,-12(fp)
         break;
 803ccac:	0000cc06 	br	803cfe0 <tcp_timers+0x448>
      }
      tcpstat.tcps_rexmttimeo++;
 803ccb0:	008201b4 	movhi	r2,2054
 803ccb4:	10bf4817 	ldw	r2,-736(r2)
 803ccb8:	10c00044 	addi	r3,r2,1
 803ccbc:	008201b4 	movhi	r2,2054
 803ccc0:	10ff4815 	stw	r3,-736(r2)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 803ccc4:	e0bffd17 	ldw	r2,-12(fp)
 803ccc8:	10802017 	ldw	r2,128(r2)
 803cccc:	1007d0ba 	srai	r3,r2,2
 803ccd0:	e0bffd17 	ldw	r2,-12(fp)
 803ccd4:	10802117 	ldw	r2,132(r2)
 803ccd8:	1885883a 	add	r2,r3,r2
 803ccdc:	1005d07a 	srai	r2,r2,1
 803cce0:	e0bffe15 	stw	r2,-8(fp)
      rexmt *= tcp_backoff[tp->t_rxtshift];
 803cce4:	e0bffd17 	ldw	r2,-12(fp)
 803cce8:	10c00717 	ldw	r3,28(r2)
 803ccec:	00820174 	movhi	r2,2053
 803ccf0:	1885883a 	add	r2,r3,r2
 803ccf4:	109b0103 	ldbu	r2,27652(r2)
 803ccf8:	10803fcc 	andi	r2,r2,255
 803ccfc:	e0fffe17 	ldw	r3,-8(fp)
 803cd00:	1885383a 	mul	r2,r3,r2
 803cd04:	e0bffe15 	stw	r2,-8(fp)
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 803cd08:	e0bffe17 	ldw	r2,-8(fp)
 803cd0c:	10ffffcc 	andi	r3,r2,65535
 803cd10:	18e0001c 	xori	r3,r3,32768
 803cd14:	18e00004 	addi	r3,r3,-32768
 803cd18:	e0bffd17 	ldw	r2,-12(fp)
 803cd1c:	10c00815 	stw	r3,32(r2)
 803cd20:	e0bffd17 	ldw	r2,-12(fp)
 803cd24:	10800817 	ldw	r2,32(r2)
 803cd28:	10800088 	cmpgei	r2,r2,2
 803cd2c:	1000041e 	bne	r2,zero,803cd40 <tcp_timers+0x1a8>
 803cd30:	e0bffd17 	ldw	r2,-12(fp)
 803cd34:	00c00084 	movi	r3,2
 803cd38:	10c00815 	stw	r3,32(r2)
 803cd3c:	00000706 	br	803cd5c <tcp_timers+0x1c4>
 803cd40:	e0bffd17 	ldw	r2,-12(fp)
 803cd44:	10800817 	ldw	r2,32(r2)
 803cd48:	10802050 	cmplti	r2,r2,129
 803cd4c:	1000031e 	bne	r2,zero,803cd5c <tcp_timers+0x1c4>
 803cd50:	e0bffd17 	ldw	r2,-12(fp)
 803cd54:	00c02004 	movi	r3,128
 803cd58:	10c00815 	stw	r3,32(r2)
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 803cd5c:	e0bffd17 	ldw	r2,-12(fp)
 803cd60:	10c00817 	ldw	r3,32(r2)
 803cd64:	e0bffd17 	ldw	r2,-12(fp)
 803cd68:	10c00315 	stw	r3,12(r2)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 803cd6c:	e0bffd17 	ldw	r2,-12(fp)
 803cd70:	10800717 	ldw	r2,28(r2)
 803cd74:	10800110 	cmplti	r2,r2,4
 803cd78:	10000f1e 	bne	r2,zero,803cdb8 <tcp_timers+0x220>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
 803cd7c:	e0bffd17 	ldw	r2,-12(fp)
 803cd80:	10800b0b 	ldhu	r2,44(r2)
 803cd84:	10bfffcc 	andi	r2,r2,65535
 803cd88:	1080400c 	andi	r2,r2,256
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 803cd8c:	10000a1e 	bne	r2,zero,803cdb8 <tcp_timers+0x220>
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
 803cd90:	e0bffd17 	ldw	r2,-12(fp)
 803cd94:	10c02117 	ldw	r3,132(r2)
 803cd98:	e0bffd17 	ldw	r2,-12(fp)
 803cd9c:	10802017 	ldw	r2,128(r2)
 803cda0:	1005d0ba 	srai	r2,r2,2
 803cda4:	1887883a 	add	r3,r3,r2
 803cda8:	e0bffd17 	ldw	r2,-12(fp)
 803cdac:	10c02115 	stw	r3,132(r2)
         tp->t_srtt = 0;
 803cdb0:	e0bffd17 	ldw	r2,-12(fp)
 803cdb4:	10002015 	stw	zero,128(r2)
      }
      tp->snd_nxt = tp->snd_una;
 803cdb8:	e0bffd17 	ldw	r2,-12(fp)
 803cdbc:	10c00e17 	ldw	r3,56(r2)
 803cdc0:	e0bffd17 	ldw	r2,-12(fp)
 803cdc4:	10c00f15 	stw	r3,60(r2)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
 803cdc8:	e0bffd17 	ldw	r2,-12(fp)
 803cdcc:	10001e15 	stw	zero,120(r2)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 803cdd0:	e0bffd17 	ldw	r2,-12(fp)
 803cdd4:	10800d17 	ldw	r2,52(r2)
 803cdd8:	10800817 	ldw	r2,32(r2)
 803cddc:	10800417 	ldw	r2,16(r2)
 803cde0:	1090000c 	andi	r2,r2,16384
 803cde4:	1000241e 	bne	r2,zero,803ce78 <tcp_timers+0x2e0>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
 803cde8:	e0bffd17 	ldw	r2,-12(fp)
 803cdec:	11001417 	ldw	r4,80(r2)
 803cdf0:	e0bffd17 	ldw	r2,-12(fp)
 803cdf4:	10c01b17 	ldw	r3,108(r2)
 803cdf8:	2005883a 	mov	r2,r4
 803cdfc:	1880012e 	bgeu	r3,r2,803ce04 <tcp_timers+0x26c>
 803ce00:	1805883a 	mov	r2,r3
 803ce04:	e0bfff15 	stw	r2,-4(fp)
         win = win / 2 / tp->t_maxseg;
 803ce08:	e0bfff17 	ldw	r2,-4(fp)
 803ce0c:	1006d07a 	srli	r3,r2,1
 803ce10:	e0bffd17 	ldw	r2,-12(fp)
 803ce14:	10800a0b 	ldhu	r2,40(r2)
 803ce18:	10bfffcc 	andi	r2,r2,65535
 803ce1c:	100b883a 	mov	r5,r2
 803ce20:	1809883a 	mov	r4,r3
 803ce24:	8011fdc0 	call	8011fdc <__udivsi3>
 803ce28:	e0bfff15 	stw	r2,-4(fp)
         if (win < 2)
 803ce2c:	e0bfff17 	ldw	r2,-4(fp)
 803ce30:	108000a8 	cmpgeui	r2,r2,2
 803ce34:	1000021e 	bne	r2,zero,803ce40 <tcp_timers+0x2a8>
            win = 2;
 803ce38:	00800084 	movi	r2,2
 803ce3c:	e0bfff15 	stw	r2,-4(fp)
         tp->snd_cwnd = tp->t_maxseg;
 803ce40:	e0bffd17 	ldw	r2,-12(fp)
 803ce44:	10800a0b 	ldhu	r2,40(r2)
 803ce48:	10ffffcc 	andi	r3,r2,65535
 803ce4c:	e0bffd17 	ldw	r2,-12(fp)
 803ce50:	10c01b15 	stw	r3,108(r2)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
 803ce54:	e0bfff17 	ldw	r2,-4(fp)
 803ce58:	10ffffcc 	andi	r3,r2,65535
 803ce5c:	e0bffd17 	ldw	r2,-12(fp)
 803ce60:	10800a0b 	ldhu	r2,40(r2)
 803ce64:	10bfffcc 	andi	r2,r2,65535
 803ce68:	1885383a 	mul	r2,r3,r2
 803ce6c:	1007883a 	mov	r3,r2
 803ce70:	e0bffd17 	ldw	r2,-12(fp)
 803ce74:	10c01c15 	stw	r3,112(r2)
      }
      (void) tcp_output(tp);
 803ce78:	e13ffd17 	ldw	r4,-12(fp)
 803ce7c:	803ae700 	call	803ae70 <tcp_output>
      break;
 803ce80:	00005706 	br	803cfe0 <tcp_timers+0x448>
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
 803ce84:	008201b4 	movhi	r2,2054
 803ce88:	10bf4917 	ldw	r2,-732(r2)
 803ce8c:	10c00044 	addi	r3,r2,1
 803ce90:	008201b4 	movhi	r2,2054
 803ce94:	10ff4915 	stw	r3,-732(r2)
      tcp_setpersist(tp);
 803ce98:	e13ffd17 	ldw	r4,-12(fp)
 803ce9c:	803be080 	call	803be08 <tcp_setpersist>
      tp->t_force = 1;
 803cea0:	e0bffd17 	ldw	r2,-12(fp)
 803cea4:	00c00044 	movi	r3,1
 803cea8:	10c00a85 	stb	r3,42(r2)
      (void) tcp_output(tp);
 803ceac:	e13ffd17 	ldw	r4,-12(fp)
 803ceb0:	803ae700 	call	803ae70 <tcp_output>
      tp->t_force = 0;
 803ceb4:	e0bffd17 	ldw	r2,-12(fp)
 803ceb8:	10000a85 	stb	zero,42(r2)
      break;
 803cebc:	00004806 	br	803cfe0 <tcp_timers+0x448>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
 803cec0:	008201b4 	movhi	r2,2054
 803cec4:	10bf4a17 	ldw	r2,-728(r2)
 803cec8:	10c00044 	addi	r3,r2,1
 803cecc:	008201b4 	movhi	r2,2054
 803ced0:	10ff4a15 	stw	r3,-728(r2)
      if (tp->t_state < TCPS_ESTABLISHED)
 803ced4:	e0bffd17 	ldw	r2,-12(fp)
 803ced8:	10800217 	ldw	r2,8(r2)
 803cedc:	10800108 	cmpgei	r2,r2,4
 803cee0:	10003226 	beq	r2,zero,803cfac <tcp_timers+0x414>
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 803cee4:	e0bffd17 	ldw	r2,-12(fp)
 803cee8:	10800d17 	ldw	r2,52(r2)
 803ceec:	10800817 	ldw	r2,32(r2)
 803cef0:	10800417 	ldw	r2,16(r2)
 803cef4:	1080020c 	andi	r2,r2,8
 803cef8:	10002526 	beq	r2,zero,803cf90 <tcp_timers+0x3f8>
          tp->t_state <= TCPS_CLOSE_WAIT) 
 803cefc:	e0bffd17 	ldw	r2,-12(fp)
 803cf00:	10800217 	ldw	r2,8(r2)
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 803cf04:	10800188 	cmpgei	r2,r2,6
 803cf08:	1000211e 	bne	r2,zero,803cf90 <tcp_timers+0x3f8>
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
 803cf0c:	e0bffd17 	ldw	r2,-12(fp)
 803cf10:	10c01d17 	ldw	r3,116(r2)
 803cf14:	d1203a17 	ldw	r4,-32536(gp)
 803cf18:	d0a0af17 	ldw	r2,-32068(gp)
 803cf1c:	2085883a 	add	r2,r4,r2
 803cf20:	1880240e 	bge	r3,r2,803cfb4 <tcp_timers+0x41c>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
 803cf24:	008201b4 	movhi	r2,2054
 803cf28:	10bf4b17 	ldw	r2,-724(r2)
 803cf2c:	10c00044 	addi	r3,r2,1
 803cf30:	008201b4 	movhi	r2,2054
 803cf34:	10ff4b15 	stw	r3,-724(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 803cf38:	e0bffd17 	ldw	r2,-12(fp)
 803cf3c:	10c00c17 	ldw	r3,48(r2)
 803cf40:	e0bffd17 	ldw	r2,-12(fp)
 803cf44:	10801617 	ldw	r2,88(r2)
 803cf48:	113fffc4 	addi	r4,r2,-1
            tp->snd_una - 1, 0, (struct mbuf *)NULL);
 803cf4c:	e0bffd17 	ldw	r2,-12(fp)
 803cf50:	10800e17 	ldw	r2,56(r2)
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 803cf54:	10bfffc4 	addi	r2,r2,-1
 803cf58:	d8000115 	stw	zero,4(sp)
 803cf5c:	d8000015 	stw	zero,0(sp)
 803cf60:	100f883a 	mov	r7,r2
 803cf64:	200d883a 	mov	r6,r4
 803cf68:	180b883a 	mov	r5,r3
 803cf6c:	e13ffd17 	ldw	r4,-12(fp)
 803cf70:	803c1200 	call	803c120 <tcp_respond>

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
 803cf74:	d0a03b17 	ldw	r2,-32532(gp)
 803cf78:	10ffffcc 	andi	r3,r2,65535
 803cf7c:	18e0001c 	xori	r3,r3,32768
 803cf80:	18e00004 	addi	r3,r3,-32768
 803cf84:	e0bffd17 	ldw	r2,-12(fp)
 803cf88:	10c00515 	stw	r3,20(r2)
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
 803cf8c:	00001406 	br	803cfe0 <tcp_timers+0x448>
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
 803cf90:	d0a03a17 	ldw	r2,-32536(gp)
 803cf94:	10ffffcc 	andi	r3,r2,65535
 803cf98:	18e0001c 	xori	r3,r3,32768
 803cf9c:	18e00004 	addi	r3,r3,-32768
 803cfa0:	e0bffd17 	ldw	r2,-12(fp)
 803cfa4:	10c00515 	stw	r3,20(r2)
      break;
 803cfa8:	00000d06 	br	803cfe0 <tcp_timers+0x448>
         goto dropit;
 803cfac:	0001883a 	nop
 803cfb0:	00000106 	br	803cfb8 <tcp_timers+0x420>
            goto dropit;
 803cfb4:	0001883a 	nop
      dropit:
      tcpstat.tcps_keepdrops++;
 803cfb8:	008201b4 	movhi	r2,2054
 803cfbc:	10bf4c17 	ldw	r2,-720(r2)
 803cfc0:	10c00044 	addi	r3,r2,1
 803cfc4:	008201b4 	movhi	r2,2054
 803cfc8:	10ff4c15 	stw	r3,-720(r2)
      tp = tcp_drop (tp, ETIMEDOUT);
 803cfcc:	01401d04 	movi	r5,116
 803cfd0:	e13ffd17 	ldw	r4,-12(fp)
 803cfd4:	803c6200 	call	803c620 <tcp_drop>
 803cfd8:	e0bffd15 	stw	r2,-12(fp)
      break;
 803cfdc:	0001883a 	nop
   }
   return tp;
 803cfe0:	e0bffd17 	ldw	r2,-12(fp)
}
 803cfe4:	e037883a 	mov	sp,fp
 803cfe8:	dfc00117 	ldw	ra,4(sp)
 803cfec:	df000017 	ldw	fp,0(sp)
 803cff0:	dec00204 	addi	sp,sp,8
 803cff4:	f800283a 	ret

0803cff8 <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 803cff8:	defff604 	addi	sp,sp,-40
 803cffc:	dfc00915 	stw	ra,36(sp)
 803d000:	df000815 	stw	fp,32(sp)
 803d004:	df000804 	addi	fp,sp,32
 803d008:	e13ffa15 	stw	r4,-24(fp)
 803d00c:	e17ff915 	stw	r5,-28(fp)
 803d010:	e1bff815 	stw	r6,-32(fp)
   struct inpcb * inp;
   struct tcpcb * tp;
   int   error =  0;
 803d014:	e03ffe15 	stw	zero,-8(fp)

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
 803d018:	e0bffa17 	ldw	r2,-24(fp)
 803d01c:	10800717 	ldw	r2,28(r2)
 803d020:	e0bffd15 	stw	r2,-12(fp)
   inp = sotoinpcb(so);
 803d024:	e0bffa17 	ldw	r2,-24(fp)
 803d028:	10800117 	ldw	r2,4(r2)
 803d02c:	e0bffc15 	stw	r2,-16(fp)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
 803d030:	e0bffc17 	ldw	r2,-16(fp)
 803d034:	1000041e 	bne	r2,zero,803d048 <tcp_usrreq+0x50>
 803d038:	e0bffd17 	ldw	r2,-12(fp)
 803d03c:	10000226 	beq	r2,zero,803d048 <tcp_usrreq+0x50>
   {
      return (EINVAL);
 803d040:	00800584 	movi	r2,22
 803d044:	00019506 	br	803d69c <tcp_usrreq+0x6a4>
   }

   if (inp)
 803d048:	e0bffc17 	ldw	r2,-16(fp)
 803d04c:	10000426 	beq	r2,zero,803d060 <tcp_usrreq+0x68>
      tp = intotcpcb(inp);
 803d050:	e0bffc17 	ldw	r2,-16(fp)
 803d054:	10800917 	ldw	r2,36(r2)
 803d058:	e0bfff15 	stw	r2,-4(fp)
 803d05c:	00000706 	br	803d07c <tcp_usrreq+0x84>
   else  /* inp and tp not set, make sure this is OK: */
   { 
      if (req == PRU_ATTACH)
 803d060:	e0bffd17 	ldw	r2,-12(fp)
 803d064:	1000021e 	bne	r2,zero,803d070 <tcp_usrreq+0x78>
         tp = NULL;  /* stifle compiler warnings about using unassigned tp*/
 803d068:	e03fff15 	stw	zero,-4(fp)
 803d06c:	00000306 	br	803d07c <tcp_usrreq+0x84>
      else
      {
         dtrap(); /* programming error? */
 803d070:	80301a80 	call	80301a8 <dtrap>
         return EINVAL;
 803d074:	00800584 	movi	r2,22
 803d078:	00018806 	br	803d69c <tcp_usrreq+0x6a4>
 803d07c:	e0bffd17 	ldw	r2,-12(fp)
 803d080:	10800528 	cmpgeui	r2,r2,20
 803d084:	10016f1e 	bne	r2,zero,803d644 <tcp_usrreq+0x64c>
 803d088:	e0bffd17 	ldw	r2,-12(fp)
 803d08c:	100690ba 	slli	r3,r2,2
 803d090:	00820134 	movhi	r2,2052
 803d094:	1885883a 	add	r2,r3,r2
 803d098:	10b42817 	ldw	r2,-12128(r2)
 803d09c:	1000683a 	jmp	r2
 803d0a0:	0803d0f0 	cmpltui	zero,at,3907
 803d0a4:	0803d150 	cmplti	zero,at,3909
 803d0a8:	0803d178 	rdprs	zero,at,3909
 803d0ac:	0803d1b0 	cmpltui	zero,at,3910
 803d0b0:	0803d1e8 	cmpgeui	zero,at,3911
 803d0b4:	0803d330 	cmpltui	zero,at,3916
 803d0b8:	0803d324 	muli	zero,at,3916
 803d0bc:	0803d3d8 	cmpnei	zero,at,3919
 803d0c0:	0803d404 	addi	zero,at,3920
 803d0c4:	0803d410 	cmplti	zero,at,3920
 803d0c8:	0803d46c 	andhi	zero,at,3921
 803d0cc:	0803d644 	addi	zero,at,3929
 803d0d0:	0803d47c 	xorhi	zero,at,3921
 803d0d4:	0803d488 	cmpgei	zero,at,3922
 803d0d8:	0803d540 	call	803d54 <OSCtxSw_SWITCH_PC+0x803d14>
 803d0dc:	0803d610 	cmplti	zero,at,3928
 803d0e0:	0803d620 	cmpeqi	zero,at,3928
 803d0e4:	0803d318 	cmpnei	zero,at,3916
 803d0e8:	0803d644 	addi	zero,at,3929
 803d0ec:	0803d630 	cmpltui	zero,at,3928
   /*
    * TCP attaches to socket via PRU_ATTACH, reserving space,
    * and an internet control block.
    */
   case PRU_ATTACH:
      if (inp) 
 803d0f0:	e0bffc17 	ldw	r2,-16(fp)
 803d0f4:	10000326 	beq	r2,zero,803d104 <tcp_usrreq+0x10c>
      {
         error = EISCONN;
 803d0f8:	00801fc4 	movi	r2,127
 803d0fc:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d100:	00016506 	br	803d698 <tcp_usrreq+0x6a0>
      }
      error = tcp_attach(so);
 803d104:	e13ffa17 	ldw	r4,-24(fp)
 803d108:	803d6b00 	call	803d6b0 <tcp_attach>
 803d10c:	e0bffe15 	stw	r2,-8(fp)
      if (error)
 803d110:	e0bffe17 	ldw	r2,-8(fp)
 803d114:	10014f1e 	bne	r2,zero,803d654 <tcp_usrreq+0x65c>
         break;
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 803d118:	e0bffa17 	ldw	r2,-24(fp)
 803d11c:	10800417 	ldw	r2,16(r2)
 803d120:	1080200c 	andi	r2,r2,128
 803d124:	10014d26 	beq	r2,zero,803d65c <tcp_usrreq+0x664>
 803d128:	e0bffa17 	ldw	r2,-24(fp)
 803d12c:	1080080b 	ldhu	r2,32(r2)
 803d130:	10bfffcc 	andi	r2,r2,65535
 803d134:	10a0001c 	xori	r2,r2,32768
 803d138:	10a00004 	addi	r2,r2,-32768
 803d13c:	1001471e 	bne	r2,zero,803d65c <tcp_usrreq+0x664>
         so->so_linger = TCP_LINGERTIME;
 803d140:	e0bffa17 	ldw	r2,-24(fp)
 803d144:	00c01e04 	movi	r3,120
 803d148:	10c0080d 	sth	r3,32(r2)
#ifdef   DO_TCPTRACE
      SETTP(tp, sototcpcb(so));
#endif
      break;
 803d14c:	00014306 	br	803d65c <tcp_usrreq+0x664>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
 803d150:	e0bfff17 	ldw	r2,-4(fp)
 803d154:	10800217 	ldw	r2,8(r2)
 803d158:	10800090 	cmplti	r2,r2,2
 803d15c:	1000031e 	bne	r2,zero,803d16c <tcp_usrreq+0x174>
         SETTP(tp, tcp_disconnect(tp));
 803d160:	e13fff17 	ldw	r4,-4(fp)
 803d164:	803d7c80 	call	803d7c8 <tcp_disconnect>
      else
         SETTP(tp, tcp_close(tp));
      break;
 803d168:	00014b06 	br	803d698 <tcp_usrreq+0x6a0>
         SETTP(tp, tcp_close(tp));
 803d16c:	e13fff17 	ldw	r4,-4(fp)
 803d170:	803c6bc0 	call	803c6bc <tcp_close>
      break;
 803d174:	00014806 	br	803d698 <tcp_usrreq+0x6a0>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
 803d178:	e0bffc17 	ldw	r2,-16(fp)
 803d17c:	10800817 	ldw	r2,32(r2)
 803d180:	10800517 	ldw	r2,20(r2)
 803d184:	10800098 	cmpnei	r2,r2,2
 803d188:	1000051e 	bne	r2,zero,803d1a0 <tcp_usrreq+0x1a8>
      {
         error = in_pcbbind(inp, nam);
 803d18c:	e17ff817 	ldw	r5,-32(fp)
 803d190:	e13ffc17 	ldw	r4,-16(fp)
 803d194:	804a8f40 	call	804a8f4 <in_pcbbind>
 803d198:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d19c:	00013e06 	br	803d698 <tcp_usrreq+0x6a0>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
 803d1a0:	80301a80 	call	80301a8 <dtrap>
      error = EINVAL;
 803d1a4:	00800584 	movi	r2,22
 803d1a8:	e0bffe15 	stw	r2,-8(fp)
      break;
 803d1ac:	00013a06 	br	803d698 <tcp_usrreq+0x6a0>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
 803d1b0:	e0bffc17 	ldw	r2,-16(fp)
 803d1b4:	1080078b 	ldhu	r2,30(r2)
 803d1b8:	10bfffcc 	andi	r2,r2,65535
 803d1bc:	1000041e 	bne	r2,zero,803d1d0 <tcp_usrreq+0x1d8>
         error = in_pcbbind(inp, (struct mbuf *)0);
 803d1c0:	000b883a 	mov	r5,zero
 803d1c4:	e13ffc17 	ldw	r4,-16(fp)
 803d1c8:	804a8f40 	call	804a8f4 <in_pcbbind>
 803d1cc:	e0bffe15 	stw	r2,-8(fp)
      if (error == 0)
 803d1d0:	e0bffe17 	ldw	r2,-8(fp)
 803d1d4:	1001231e 	bne	r2,zero,803d664 <tcp_usrreq+0x66c>
         tp->t_state = TCPS_LISTEN;
 803d1d8:	e0bfff17 	ldw	r2,-4(fp)
 803d1dc:	00c00044 	movi	r3,1
 803d1e0:	10c00215 	stw	r3,8(r2)
      break;
 803d1e4:	00011f06 	br	803d664 <tcp_usrreq+0x66c>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
 803d1e8:	e0bffc17 	ldw	r2,-16(fp)
 803d1ec:	1080078b 	ldhu	r2,30(r2)
 803d1f0:	10bfffcc 	andi	r2,r2,65535
 803d1f4:	1000061e 	bne	r2,zero,803d210 <tcp_usrreq+0x218>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
 803d1f8:	000b883a 	mov	r5,zero
 803d1fc:	e13ffc17 	ldw	r4,-16(fp)
 803d200:	804a8f40 	call	804a8f4 <in_pcbbind>
 803d204:	e0bffe15 	stw	r2,-8(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
 803d208:	e0bffe17 	ldw	r2,-8(fp)
 803d20c:	1001171e 	bne	r2,zero,803d66c <tcp_usrreq+0x674>
            break;
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
 803d210:	e17ff817 	ldw	r5,-32(fp)
 803d214:	e13ffc17 	ldw	r4,-16(fp)
 803d218:	804ab040 	call	804ab04 <in_pcbconnect>
 803d21c:	e0bffe15 	stw	r2,-8(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
 803d220:	e0bffe17 	ldw	r2,-8(fp)
 803d224:	1001131e 	bne	r2,zero,803d674 <tcp_usrreq+0x67c>
         break;
      tp->t_template = tcp_template(tp);
 803d228:	e13fff17 	ldw	r4,-4(fp)
 803d22c:	803c0180 	call	803c018 <tcp_template>
 803d230:	1007883a 	mov	r3,r2
 803d234:	e0bfff17 	ldw	r2,-4(fp)
 803d238:	10c00c15 	stw	r3,48(r2)
      if (tp->t_template == 0) 
 803d23c:	e0bfff17 	ldw	r2,-4(fp)
 803d240:	10800c17 	ldw	r2,48(r2)
 803d244:	1000051e 	bne	r2,zero,803d25c <tcp_usrreq+0x264>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
 803d248:	e13ffc17 	ldw	r4,-16(fp)
 803d24c:	804ace40 	call	804ace4 <in_pcbdisconnect>
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
         ip6_pcbdisconnect(inp);
#endif   /* end v6 only */

         error = ENOBUFS;
 803d250:	00801a44 	movi	r2,105
 803d254:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d258:	00010f06 	br	803d698 <tcp_usrreq+0x6a0>
      }

      soisconnecting(so);
 803d25c:	e13ffa17 	ldw	r4,-24(fp)
 803d260:	80367300 	call	8036730 <soisconnecting>
      tcpstat.tcps_connattempt++;
 803d264:	008201b4 	movhi	r2,2054
 803d268:	10bf3e17 	ldw	r2,-776(r2)
 803d26c:	10c00044 	addi	r3,r2,1
 803d270:	008201b4 	movhi	r2,2054
 803d274:	10ff3e15 	stw	r3,-776(r2)
      tp->t_state = TCPS_SYN_SENT;
 803d278:	e0bfff17 	ldw	r2,-4(fp)
 803d27c:	00c00084 	movi	r3,2
 803d280:	10c00215 	stw	r3,8(r2)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 803d284:	e0bfff17 	ldw	r2,-4(fp)
 803d288:	00c02584 	movi	r3,150
 803d28c:	10c00515 	stw	r3,20(r2)
      tp->iss = tcp_iss; 
 803d290:	d0e0b017 	ldw	r3,-32064(gp)
 803d294:	e0bfff17 	ldw	r2,-4(fp)
 803d298:	10c01315 	stw	r3,76(r2)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
 803d29c:	d0e0b017 	ldw	r3,-32064(gp)
 803d2a0:	00be9fd4 	movui	r2,64127
 803d2a4:	1885883a 	add	r2,r3,r2
 803d2a8:	d0a0b015 	stw	r2,-32064(gp)
      tcp_sendseqinit(tp);
 803d2ac:	e0bfff17 	ldw	r2,-4(fp)
 803d2b0:	10c01317 	ldw	r3,76(r2)
 803d2b4:	e0bfff17 	ldw	r2,-4(fp)
 803d2b8:	10c01015 	stw	r3,64(r2)
 803d2bc:	e0bfff17 	ldw	r2,-4(fp)
 803d2c0:	10c01017 	ldw	r3,64(r2)
 803d2c4:	e0bfff17 	ldw	r2,-4(fp)
 803d2c8:	10c01a15 	stw	r3,104(r2)
 803d2cc:	e0bfff17 	ldw	r2,-4(fp)
 803d2d0:	10c01a17 	ldw	r3,104(r2)
 803d2d4:	e0bfff17 	ldw	r2,-4(fp)
 803d2d8:	10c00f15 	stw	r3,60(r2)
 803d2dc:	e0bfff17 	ldw	r2,-4(fp)
 803d2e0:	10c00f17 	ldw	r3,60(r2)
 803d2e4:	e0bfff17 	ldw	r2,-4(fp)
 803d2e8:	10c00e15 	stw	r3,56(r2)
      error = tcp_output(tp);
 803d2ec:	e13fff17 	ldw	r4,-4(fp)
 803d2f0:	803ae700 	call	803ae70 <tcp_output>
 803d2f4:	e0bffe15 	stw	r2,-8(fp)
      if (!error)
 803d2f8:	e0bffe17 	ldw	r2,-8(fp)
 803d2fc:	1000df1e 	bne	r2,zero,803d67c <tcp_usrreq+0x684>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
 803d300:	008201b4 	movhi	r2,2054
 803d304:	10bf1417 	ldw	r2,-944(r2)
 803d308:	10c00044 	addi	r3,r2,1
 803d30c:	008201b4 	movhi	r2,2054
 803d310:	10ff1415 	stw	r3,-944(r2)
      break;
 803d314:	0000d906 	br	803d67c <tcp_usrreq+0x684>

   /*
    * Create a TCP connection between two sockets.
    */
   case PRU_CONNECT2:
      error = EOPNOTSUPP;
 803d318:	008017c4 	movi	r2,95
 803d31c:	e0bffe15 	stw	r2,-8(fp)
      break;
 803d320:	0000dd06 	br	803d698 <tcp_usrreq+0x6a0>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
 803d324:	e13fff17 	ldw	r4,-4(fp)
 803d328:	803d7c80 	call	803d7c8 <tcp_disconnect>
      break;
 803d32c:	0000da06 	br	803d698 <tcp_usrreq+0x6a0>
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 803d330:	e0bff817 	ldw	r2,-32(fp)
 803d334:	10800317 	ldw	r2,12(r2)
 803d338:	e0bffb15 	stw	r2,-20(fp)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
 803d33c:	e0bffa17 	ldw	r2,-24(fp)
 803d340:	10800517 	ldw	r2,20(r2)
 803d344:	10800098 	cmpnei	r2,r2,2
 803d348:	10000e1e 	bne	r2,zero,803d384 <tcp_usrreq+0x38c>
         {
            nam->m_len = sizeof (struct sockaddr_in);
 803d34c:	e0bff817 	ldw	r2,-32(fp)
 803d350:	00c00404 	movi	r3,16
 803d354:	10c00215 	stw	r3,8(r2)
            sin->sin_family = AF_INET;
 803d358:	e0bffb17 	ldw	r2,-20(fp)
 803d35c:	00c00084 	movi	r3,2
 803d360:	10c0000d 	sth	r3,0(r2)
            sin->sin_port = inp->inp_fport;
 803d364:	e0bffc17 	ldw	r2,-16(fp)
 803d368:	10c0070b 	ldhu	r3,28(r2)
 803d36c:	e0bffb17 	ldw	r2,-20(fp)
 803d370:	10c0008d 	sth	r3,2(r2)
            sin->sin_addr = inp->inp_faddr;
 803d374:	e0bffb17 	ldw	r2,-20(fp)
 803d378:	e0fffc17 	ldw	r3,-16(fp)
 803d37c:	18c00317 	ldw	r3,12(r3)
 803d380:	10c00115 	stw	r3,4(r2)
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
 803d384:	e0bffa17 	ldw	r2,-24(fp)
 803d388:	10800517 	ldw	r2,20(r2)
 803d38c:	108000a0 	cmpeqi	r2,r2,2
 803d390:	10000b1e 	bne	r2,zero,803d3c0 <tcp_usrreq+0x3c8>
              !(so->so_domain == AF_INET6)
 803d394:	e0bffa17 	ldw	r2,-24(fp)
 803d398:	10800517 	ldw	r2,20(r2)
         if ( !(so->so_domain == AF_INET) &&
 803d39c:	108000e0 	cmpeqi	r2,r2,3
 803d3a0:	1000071e 	bne	r2,zero,803d3c0 <tcp_usrreq+0x3c8>
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
 803d3a4:	e0bffa17 	ldw	r2,-24(fp)
 803d3a8:	10800517 	ldw	r2,20(r2)
 803d3ac:	100b883a 	mov	r5,r2
 803d3b0:	01020174 	movhi	r4,2053
 803d3b4:	210f5104 	addi	r4,r4,15684
 803d3b8:	8003b840 	call	8003b84 <printf>
            dtrap();
 803d3bc:	80301a80 	call	80301a8 <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
 803d3c0:	008201b4 	movhi	r2,2054
 803d3c4:	10bf1517 	ldw	r2,-940(r2)
 803d3c8:	10c00044 	addi	r3,r2,1
 803d3cc:	008201b4 	movhi	r2,2054
 803d3d0:	10ff1515 	stw	r3,-940(r2)
         break;
 803d3d4:	0000b006 	br	803d698 <tcp_usrreq+0x6a0>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
 803d3d8:	e13ffa17 	ldw	r4,-24(fp)
 803d3dc:	8036dac0 	call	8036dac <socantsendmore>
      tp = tcp_usrclosed(tp);
 803d3e0:	e13fff17 	ldw	r4,-4(fp)
 803d3e4:	803d8940 	call	803d894 <tcp_usrclosed>
 803d3e8:	e0bfff15 	stw	r2,-4(fp)
      if (tp)
 803d3ec:	e0bfff17 	ldw	r2,-4(fp)
 803d3f0:	1000a426 	beq	r2,zero,803d684 <tcp_usrreq+0x68c>
         error = tcp_output(tp);
 803d3f4:	e13fff17 	ldw	r4,-4(fp)
 803d3f8:	803ae700 	call	803ae70 <tcp_output>
 803d3fc:	e0bffe15 	stw	r2,-8(fp)
      break;
 803d400:	0000a006 	br	803d684 <tcp_usrreq+0x68c>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
 803d404:	e13fff17 	ldw	r4,-4(fp)
 803d408:	803ae700 	call	803ae70 <tcp_output>
      break;
 803d40c:	0000a206 	br	803d698 <tcp_usrreq+0x6a0>
   /*
    * Do a send by putting data in output queue and updating urgent
    * marker if URG set.  Possibly send more data.
    */
   case PRU_SEND:
      if (so->so_pcb == NULL)
 803d410:	e0bffa17 	ldw	r2,-24(fp)
 803d414:	10800117 	ldw	r2,4(r2)
 803d418:	1000031e 	bne	r2,zero,803d428 <tcp_usrreq+0x430>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 803d41c:	00800804 	movi	r2,32
 803d420:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d424:	00009c06 	br	803d698 <tcp_usrreq+0x6a0>
      }
      sbappend(&so->so_snd, m);
 803d428:	e0bffa17 	ldw	r2,-24(fp)
 803d42c:	10801204 	addi	r2,r2,72
 803d430:	e17ff917 	ldw	r5,-28(fp)
 803d434:	1009883a 	mov	r4,r2
 803d438:	80370b40 	call	80370b4 <sbappend>
      error = tcp_output(tp);
 803d43c:	e13fff17 	ldw	r4,-4(fp)
 803d440:	803ae700 	call	803ae70 <tcp_output>
 803d444:	e0bffe15 	stw	r2,-8(fp)
      if (error == ENOBUFS)
 803d448:	e0bffe17 	ldw	r2,-8(fp)
 803d44c:	10801a58 	cmpnei	r2,r2,105
 803d450:	10008e1e 	bne	r2,zero,803d68c <tcp_usrreq+0x694>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 803d454:	e0bffa17 	ldw	r2,-24(fp)
 803d458:	10801204 	addi	r2,r2,72
 803d45c:	e17ff917 	ldw	r5,-28(fp)
 803d460:	1009883a 	mov	r4,r2
 803d464:	80378240 	call	8037824 <sbdropend>
      break;
 803d468:	00008806 	br	803d68c <tcp_usrreq+0x694>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
 803d46c:	01401c44 	movi	r5,113
 803d470:	e13fff17 	ldw	r4,-4(fp)
 803d474:	803c6200 	call	803c620 <tcp_drop>
      break;
 803d478:	00008706 	br	803d698 <tcp_usrreq+0x6a0>

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
 803d47c:	80301a80 	call	80301a8 <dtrap>
      return (0);
 803d480:	0005883a 	mov	r2,zero
 803d484:	00008506 	br	803d69c <tcp_usrreq+0x6a4>

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
 803d488:	e0bffa17 	ldw	r2,-24(fp)
 803d48c:	10801a17 	ldw	r2,104(r2)
 803d490:	1000051e 	bne	r2,zero,803d4a8 <tcp_usrreq+0x4b0>
          (so->so_state & SS_RCVATMARK) == 0) ||
 803d494:	e0bffa17 	ldw	r2,-24(fp)
 803d498:	1080088b 	ldhu	r2,34(r2)
 803d49c:	10bfffcc 	andi	r2,r2,65535
 803d4a0:	1080100c 	andi	r2,r2,64
      if ((so->so_oobmark == 0 &&
 803d4a4:	10000926 	beq	r2,zero,803d4cc <tcp_usrreq+0x4d4>
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
 803d4a8:	e0bffa17 	ldw	r2,-24(fp)
 803d4ac:	10800417 	ldw	r2,16(r2)
 803d4b0:	1080400c 	andi	r2,r2,256
          (so->so_state & SS_RCVATMARK) == 0) ||
 803d4b4:	1000051e 	bne	r2,zero,803d4cc <tcp_usrreq+0x4d4>
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
 803d4b8:	e0bfff17 	ldw	r2,-4(fp)
 803d4bc:	10802403 	ldbu	r2,144(r2)
 803d4c0:	10803fcc 	andi	r2,r2,255
 803d4c4:	1080008c 	andi	r2,r2,2
       so->so_options & SO_OOBINLINE ||
 803d4c8:	10000326 	beq	r2,zero,803d4d8 <tcp_usrreq+0x4e0>
       {
         error = EINVAL;
 803d4cc:	00800584 	movi	r2,22
 803d4d0:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d4d4:	00007006 	br	803d698 <tcp_usrreq+0x6a0>
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
 803d4d8:	e0bfff17 	ldw	r2,-4(fp)
 803d4dc:	10802403 	ldbu	r2,144(r2)
 803d4e0:	10803fcc 	andi	r2,r2,255
 803d4e4:	1080004c 	andi	r2,r2,1
 803d4e8:	1000031e 	bne	r2,zero,803d4f8 <tcp_usrreq+0x500>
      {
         error = EWOULDBLOCK;
 803d4ec:	008002c4 	movi	r2,11
 803d4f0:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d4f4:	00006806 	br	803d698 <tcp_usrreq+0x6a0>
      }
      m->m_len = 1;
 803d4f8:	e0bff917 	ldw	r2,-28(fp)
 803d4fc:	00c00044 	movi	r3,1
 803d500:	10c00215 	stw	r3,8(r2)
      *mtod(m, char *) = tp->t_iobc;
 803d504:	e0bff917 	ldw	r2,-28(fp)
 803d508:	10800317 	ldw	r2,12(r2)
 803d50c:	e0ffff17 	ldw	r3,-4(fp)
 803d510:	18c02443 	ldbu	r3,145(r3)
 803d514:	10c00005 	stb	r3,0(r2)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
 803d518:	e0bff817 	ldw	r2,-32(fp)
 803d51c:	1080008c 	andi	r2,r2,2
 803d520:	10005c1e 	bne	r2,zero,803d694 <tcp_usrreq+0x69c>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 803d524:	e0bfff17 	ldw	r2,-4(fp)
 803d528:	10802403 	ldbu	r2,144(r2)
 803d52c:	108000dc 	xori	r2,r2,3
 803d530:	1007883a 	mov	r3,r2
 803d534:	e0bfff17 	ldw	r2,-4(fp)
 803d538:	10c02405 	stb	r3,144(r2)
      break;
 803d53c:	00005506 	br	803d694 <tcp_usrreq+0x69c>

   case PRU_SENDOOB:
      if (so->so_pcb == NULL)
 803d540:	e0bffa17 	ldw	r2,-24(fp)
 803d544:	10800117 	ldw	r2,4(r2)
 803d548:	1000031e 	bne	r2,zero,803d558 <tcp_usrreq+0x560>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 803d54c:	00800804 	movi	r2,32
 803d550:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d554:	00005006 	br	803d698 <tcp_usrreq+0x6a0>
      }
      if (sbspace(&so->so_snd) == 0) 
 803d558:	e0bffa17 	ldw	r2,-24(fp)
 803d55c:	10801317 	ldw	r2,76(r2)
 803d560:	1007883a 	mov	r3,r2
 803d564:	e0bffa17 	ldw	r2,-24(fp)
 803d568:	10801217 	ldw	r2,72(r2)
 803d56c:	1885c83a 	sub	r2,r3,r2
 803d570:	10000516 	blt	r2,zero,803d588 <tcp_usrreq+0x590>
 803d574:	e0bffa17 	ldw	r2,-24(fp)
 803d578:	10c01317 	ldw	r3,76(r2)
 803d57c:	e0bffa17 	ldw	r2,-24(fp)
 803d580:	10801217 	ldw	r2,72(r2)
 803d584:	1880051e 	bne	r3,r2,803d59c <tcp_usrreq+0x5a4>
      {
         m_freem(m);
 803d588:	e13ff917 	ldw	r4,-28(fp)
 803d58c:	80311e00 	call	80311e0 <m_freem>
         error = ENOBUFS;
 803d590:	00801a44 	movi	r2,105
 803d594:	e0bffe15 	stw	r2,-8(fp)
         break;
 803d598:	00003f06 	br	803d698 <tcp_usrreq+0x6a0>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
 803d59c:	e0bffa17 	ldw	r2,-24(fp)
 803d5a0:	10801204 	addi	r2,r2,72
 803d5a4:	e17ff917 	ldw	r5,-28(fp)
 803d5a8:	1009883a 	mov	r4,r2
 803d5ac:	80370b40 	call	80370b4 <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
 803d5b0:	e0bfff17 	ldw	r2,-4(fp)
 803d5b4:	10c00e17 	ldw	r3,56(r2)
 803d5b8:	e0bffa17 	ldw	r2,-24(fp)
 803d5bc:	10801217 	ldw	r2,72(r2)
 803d5c0:	1887883a 	add	r3,r3,r2
 803d5c4:	e0bfff17 	ldw	r2,-4(fp)
 803d5c8:	10c01015 	stw	r3,64(r2)
      tp->t_force = 1;
 803d5cc:	e0bfff17 	ldw	r2,-4(fp)
 803d5d0:	00c00044 	movi	r3,1
 803d5d4:	10c00a85 	stb	r3,42(r2)
      error = tcp_output(tp);
 803d5d8:	e13fff17 	ldw	r4,-4(fp)
 803d5dc:	803ae700 	call	803ae70 <tcp_output>
 803d5e0:	e0bffe15 	stw	r2,-8(fp)
      if (error == ENOBUFS)
 803d5e4:	e0bffe17 	ldw	r2,-8(fp)
 803d5e8:	10801a58 	cmpnei	r2,r2,105
 803d5ec:	1000051e 	bne	r2,zero,803d604 <tcp_usrreq+0x60c>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 803d5f0:	e0bffa17 	ldw	r2,-24(fp)
 803d5f4:	10801204 	addi	r2,r2,72
 803d5f8:	e17ff917 	ldw	r5,-28(fp)
 803d5fc:	1009883a 	mov	r4,r2
 803d600:	80378240 	call	8037824 <sbdropend>
      tp->t_force = 0;
 803d604:	e0bfff17 	ldw	r2,-4(fp)
 803d608:	10000a85 	stb	zero,42(r2)
      break;
 803d60c:	00002206 	br	803d698 <tcp_usrreq+0x6a0>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
 803d610:	e17ff817 	ldw	r5,-32(fp)
 803d614:	e13ffc17 	ldw	r4,-16(fp)
 803d618:	804ad400 	call	804ad40 <in_setsockaddr>
         in_setsockaddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setsockaddr(inp, nam);
#endif
      break;         
 803d61c:	00001e06 	br	803d698 <tcp_usrreq+0x6a0>

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
 803d620:	e17ff817 	ldw	r5,-32(fp)
 803d624:	e13ffc17 	ldw	r4,-16(fp)
 803d628:	804adc40 	call	804adc4 <in_setpeeraddr>
         in_setpeeraddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setpeeraddr(inp, nam);
#endif
      break;
 803d62c:	00001a06 	br	803d698 <tcp_usrreq+0x6a0>

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
 803d630:	e0bff817 	ldw	r2,-32(fp)
 803d634:	100b883a 	mov	r5,r2
 803d638:	e13fff17 	ldw	r4,-4(fp)
 803d63c:	803cb980 	call	803cb98 <tcp_timers>
#ifdef DO_TCPTRACE
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;
 803d640:	00001506 	br	803d698 <tcp_usrreq+0x6a0>

      default:
      panic("tcp_usrreq");
 803d644:	01020174 	movhi	r4,2053
 803d648:	210f5904 	addi	r4,r4,15716
 803d64c:	802bd8c0 	call	802bd8c <panic>
 803d650:	00001106 	br	803d698 <tcp_usrreq+0x6a0>
         break;
 803d654:	0001883a 	nop
 803d658:	00000f06 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d65c:	0001883a 	nop
 803d660:	00000d06 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d664:	0001883a 	nop
 803d668:	00000b06 	br	803d698 <tcp_usrreq+0x6a0>
            break;
 803d66c:	0001883a 	nop
 803d670:	00000906 	br	803d698 <tcp_usrreq+0x6a0>
         break;
 803d674:	0001883a 	nop
 803d678:	00000706 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d67c:	0001883a 	nop
 803d680:	00000506 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d684:	0001883a 	nop
 803d688:	00000306 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d68c:	0001883a 	nop
 803d690:	00000106 	br	803d698 <tcp_usrreq+0x6a0>
      break;
 803d694:	0001883a 	nop
#ifdef DO_TCPTRACE
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
 803d698:	e0bffe17 	ldw	r2,-8(fp)
}
 803d69c:	e037883a 	mov	sp,fp
 803d6a0:	dfc00117 	ldw	ra,4(sp)
 803d6a4:	df000017 	ldw	fp,0(sp)
 803d6a8:	dec00204 	addi	sp,sp,8
 803d6ac:	f800283a 	ret

0803d6b0 <tcp_attach>:
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
 803d6b0:	defff904 	addi	sp,sp,-28
 803d6b4:	dfc00615 	stw	ra,24(sp)
 803d6b8:	df000515 	stw	fp,20(sp)
 803d6bc:	df000504 	addi	fp,sp,20
 803d6c0:	e13ffb15 	stw	r4,-20(fp)
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
 803d6c4:	e0bffb17 	ldw	r2,-20(fp)
 803d6c8:	10801317 	ldw	r2,76(r2)
 803d6cc:	10000326 	beq	r2,zero,803d6dc <tcp_attach+0x2c>
 803d6d0:	e0bffb17 	ldw	r2,-20(fp)
 803d6d4:	10800b17 	ldw	r2,44(r2)
 803d6d8:	10000b1e 	bne	r2,zero,803d708 <tcp_attach+0x58>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
 803d6dc:	d0a03c17 	ldw	r2,-32528(gp)
 803d6e0:	d0e03d17 	ldw	r3,-32524(gp)
 803d6e4:	180d883a 	mov	r6,r3
 803d6e8:	100b883a 	mov	r5,r2
 803d6ec:	e13ffb17 	ldw	r4,-20(fp)
 803d6f0:	8036f900 	call	8036f90 <soreserve>
 803d6f4:	e0bfff15 	stw	r2,-4(fp)
      if (error)
 803d6f8:	e0bfff17 	ldw	r2,-4(fp)
 803d6fc:	10000226 	beq	r2,zero,803d708 <tcp_attach+0x58>
         return (error);
 803d700:	e0bfff17 	ldw	r2,-4(fp)
 803d704:	00002b06 	br	803d7b4 <tcp_attach+0x104>
   }
   error = in_pcballoc(so, &tcb);
 803d708:	014201b4 	movhi	r5,2054
 803d70c:	297f3304 	addi	r5,r5,-820
 803d710:	e13ffb17 	ldw	r4,-20(fp)
 803d714:	804a8140 	call	804a814 <in_pcballoc>
 803d718:	e0bfff15 	stw	r2,-4(fp)
   if (error)
 803d71c:	e0bfff17 	ldw	r2,-4(fp)
 803d720:	10000226 	beq	r2,zero,803d72c <tcp_attach+0x7c>
      return (error);
 803d724:	e0bfff17 	ldw	r2,-4(fp)
 803d728:	00002206 	br	803d7b4 <tcp_attach+0x104>
   inp = sotoinpcb(so);
 803d72c:	e0bffb17 	ldw	r2,-20(fp)
 803d730:	10800117 	ldw	r2,4(r2)
 803d734:	e0bffe15 	stw	r2,-8(fp)
   tp = tcp_newtcpcb(inp);
 803d738:	e13ffe17 	ldw	r4,-8(fp)
 803d73c:	803c5140 	call	803c514 <tcp_newtcpcb>
 803d740:	e0bffd15 	stw	r2,-12(fp)
   if (tp == 0) 
 803d744:	e0bffd17 	ldw	r2,-12(fp)
 803d748:	1000171e 	bne	r2,zero,803d7a8 <tcp_attach+0xf8>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
 803d74c:	e0bffb17 	ldw	r2,-20(fp)
 803d750:	1080088b 	ldhu	r2,34(r2)
 803d754:	10bfffcc 	andi	r2,r2,65535
 803d758:	1080004c 	andi	r2,r2,1
 803d75c:	e0bffc15 	stw	r2,-16(fp)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
 803d760:	e0bffb17 	ldw	r2,-20(fp)
 803d764:	10c0088b 	ldhu	r3,34(r2)
 803d768:	00bfff84 	movi	r2,-2
 803d76c:	1884703a 	and	r2,r3,r2
 803d770:	1007883a 	mov	r3,r2
 803d774:	e0bffb17 	ldw	r2,-20(fp)
 803d778:	10c0088d 	sth	r3,34(r2)
      in_pcbdetach(inp);
 803d77c:	e13ffe17 	ldw	r4,-8(fp)
 803d780:	804a89c0 	call	804a89c <in_pcbdetach>
      so->so_state |= nofd;
 803d784:	e0bffb17 	ldw	r2,-20(fp)
 803d788:	1080088b 	ldhu	r2,34(r2)
 803d78c:	e0fffc17 	ldw	r3,-16(fp)
 803d790:	10c4b03a 	or	r2,r2,r3
 803d794:	1007883a 	mov	r3,r2
 803d798:	e0bffb17 	ldw	r2,-20(fp)
 803d79c:	10c0088d 	sth	r3,34(r2)
      return (ENOBUFS);
 803d7a0:	00801a44 	movi	r2,105
 803d7a4:	00000306 	br	803d7b4 <tcp_attach+0x104>
   }
   tp->t_state = TCPS_CLOSED;
 803d7a8:	e0bffd17 	ldw	r2,-12(fp)
 803d7ac:	10000215 	stw	zero,8(r2)
   return (0);
 803d7b0:	0005883a 	mov	r2,zero
}
 803d7b4:	e037883a 	mov	sp,fp
 803d7b8:	dfc00117 	ldw	ra,4(sp)
 803d7bc:	df000017 	ldw	fp,0(sp)
 803d7c0:	dec00204 	addi	sp,sp,8
 803d7c4:	f800283a 	ret

0803d7c8 <tcp_disconnect>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
 803d7c8:	defffc04 	addi	sp,sp,-16
 803d7cc:	dfc00315 	stw	ra,12(sp)
 803d7d0:	df000215 	stw	fp,8(sp)
 803d7d4:	df000204 	addi	fp,sp,8
 803d7d8:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 803d7dc:	e0bffe17 	ldw	r2,-8(fp)
 803d7e0:	10800d17 	ldw	r2,52(r2)
 803d7e4:	10800817 	ldw	r2,32(r2)
 803d7e8:	e0bfff15 	stw	r2,-4(fp)

   if (tp->t_state < TCPS_ESTABLISHED)
 803d7ec:	e0bffe17 	ldw	r2,-8(fp)
 803d7f0:	10800217 	ldw	r2,8(r2)
 803d7f4:	10800108 	cmpgei	r2,r2,4
 803d7f8:	1000041e 	bne	r2,zero,803d80c <tcp_disconnect+0x44>
      tp = tcp_close(tp);
 803d7fc:	e13ffe17 	ldw	r4,-8(fp)
 803d800:	803c6bc0 	call	803c6bc <tcp_close>
 803d804:	e0bffe15 	stw	r2,-8(fp)
 803d808:	00001c06 	br	803d87c <tcp_disconnect+0xb4>
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 803d80c:	e0bfff17 	ldw	r2,-4(fp)
 803d810:	10800417 	ldw	r2,16(r2)
 803d814:	1080200c 	andi	r2,r2,128
 803d818:	10000b26 	beq	r2,zero,803d848 <tcp_disconnect+0x80>
 803d81c:	e0bfff17 	ldw	r2,-4(fp)
 803d820:	1080080b 	ldhu	r2,32(r2)
 803d824:	10bfffcc 	andi	r2,r2,65535
 803d828:	10a0001c 	xori	r2,r2,32768
 803d82c:	10a00004 	addi	r2,r2,-32768
 803d830:	1000051e 	bne	r2,zero,803d848 <tcp_disconnect+0x80>
      tp = tcp_drop(tp, 0);
 803d834:	000b883a 	mov	r5,zero
 803d838:	e13ffe17 	ldw	r4,-8(fp)
 803d83c:	803c6200 	call	803c620 <tcp_drop>
 803d840:	e0bffe15 	stw	r2,-8(fp)
 803d844:	00000d06 	br	803d87c <tcp_disconnect+0xb4>
   else 
   {
      soisdisconnecting(so);
 803d848:	e13fff17 	ldw	r4,-4(fp)
 803d84c:	80368a40 	call	80368a4 <soisdisconnecting>
      sbflush(&so->so_rcv);
 803d850:	e0bfff17 	ldw	r2,-4(fp)
 803d854:	10800a04 	addi	r2,r2,40
 803d858:	1009883a 	mov	r4,r2
 803d85c:	80375e80 	call	80375e8 <sbflush>
      tp = tcp_usrclosed(tp);
 803d860:	e13ffe17 	ldw	r4,-8(fp)
 803d864:	803d8940 	call	803d894 <tcp_usrclosed>
 803d868:	e0bffe15 	stw	r2,-8(fp)
      if (tp)
 803d86c:	e0bffe17 	ldw	r2,-8(fp)
 803d870:	10000226 	beq	r2,zero,803d87c <tcp_disconnect+0xb4>
         (void) tcp_output(tp);
 803d874:	e13ffe17 	ldw	r4,-8(fp)
 803d878:	803ae700 	call	803ae70 <tcp_output>
   }
   return (tp);
 803d87c:	e0bffe17 	ldw	r2,-8(fp)
}
 803d880:	e037883a 	mov	sp,fp
 803d884:	dfc00117 	ldw	ra,4(sp)
 803d888:	df000017 	ldw	fp,0(sp)
 803d88c:	dec00204 	addi	sp,sp,8
 803d890:	f800283a 	ret

0803d894 <tcp_usrclosed>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
 803d894:	defffd04 	addi	sp,sp,-12
 803d898:	dfc00215 	stw	ra,8(sp)
 803d89c:	df000115 	stw	fp,4(sp)
 803d8a0:	df000104 	addi	fp,sp,4
 803d8a4:	e13fff15 	stw	r4,-4(fp)

   switch (tp->t_state) 
 803d8a8:	e0bfff17 	ldw	r2,-4(fp)
 803d8ac:	10800217 	ldw	r2,8(r2)
 803d8b0:	10c00160 	cmpeqi	r3,r2,5
 803d8b4:	1800141e 	bne	r3,zero,803d908 <tcp_usrclosed+0x74>
 803d8b8:	10c00188 	cmpgei	r3,r2,6
 803d8bc:	1800161e 	bne	r3,zero,803d918 <tcp_usrclosed+0x84>
 803d8c0:	10c000c8 	cmpgei	r3,r2,3
 803d8c4:	1800021e 	bne	r3,zero,803d8d0 <tcp_usrclosed+0x3c>
 803d8c8:	1000050e 	bge	r2,zero,803d8e0 <tcp_usrclosed+0x4c>
 803d8cc:	00001206 	br	803d918 <tcp_usrclosed+0x84>
 803d8d0:	10bfff44 	addi	r2,r2,-3
 803d8d4:	108000a8 	cmpgeui	r2,r2,2
 803d8d8:	10000f1e 	bne	r2,zero,803d918 <tcp_usrclosed+0x84>
 803d8dc:	00000606 	br	803d8f8 <tcp_usrclosed+0x64>
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
 803d8e0:	e0bfff17 	ldw	r2,-4(fp)
 803d8e4:	10000215 	stw	zero,8(r2)
      tp = tcp_close(tp);
 803d8e8:	e13fff17 	ldw	r4,-4(fp)
 803d8ec:	803c6bc0 	call	803c6bc <tcp_close>
 803d8f0:	e0bfff15 	stw	r2,-4(fp)
      break;
 803d8f4:	00000806 	br	803d918 <tcp_usrclosed+0x84>

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
 803d8f8:	e0bfff17 	ldw	r2,-4(fp)
 803d8fc:	00c00184 	movi	r3,6
 803d900:	10c00215 	stw	r3,8(r2)
      break;
 803d904:	00000406 	br	803d918 <tcp_usrclosed+0x84>

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
 803d908:	e0bfff17 	ldw	r2,-4(fp)
 803d90c:	00c00204 	movi	r3,8
 803d910:	10c00215 	stw	r3,8(r2)
      break;
 803d914:	0001883a 	nop
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
 803d918:	e0bfff17 	ldw	r2,-4(fp)
 803d91c:	10000926 	beq	r2,zero,803d944 <tcp_usrclosed+0xb0>
 803d920:	e0bfff17 	ldw	r2,-4(fp)
 803d924:	10800217 	ldw	r2,8(r2)
 803d928:	10800250 	cmplti	r2,r2,9
 803d92c:	1000051e 	bne	r2,zero,803d944 <tcp_usrclosed+0xb0>
      soisdisconnected(tp->t_inpcb->inp_socket);
 803d930:	e0bfff17 	ldw	r2,-4(fp)
 803d934:	10800d17 	ldw	r2,52(r2)
 803d938:	10800817 	ldw	r2,32(r2)
 803d93c:	1009883a 	mov	r4,r2
 803d940:	803693c0 	call	803693c <soisdisconnected>
   return (tp);
 803d944:	e0bfff17 	ldw	r2,-4(fp)
}
 803d948:	e037883a 	mov	sp,fp
 803d94c:	dfc00117 	ldw	ra,4(sp)
 803d950:	df000017 	ldw	fp,0(sp)
 803d954:	dec00204 	addi	sp,sp,8
 803d958:	f800283a 	ret

0803d95c <tcpinit>:
 * RETURNS: 0 if OK, else one of the ENP_ error codes
 */

int
tcpinit(void)
{
 803d95c:	defffd04 	addi	sp,sp,-12
 803d960:	dfc00215 	stw	ra,8(sp)
 803d964:	df000115 	stw	fp,4(sp)
 803d968:	df000104 	addi	fp,sp,4
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
 803d96c:	80318980 	call	8031898 <nptcp_init>
 803d970:	e0bfff15 	stw	r2,-4(fp)
   if (e)
 803d974:	e0bfff17 	ldw	r2,-4(fp)
 803d978:	10000226 	beq	r2,zero,803d984 <tcpinit+0x28>
      return e;
 803d97c:	e0bfff17 	ldw	r2,-4(fp)
 803d980:	00000106 	br	803d988 <tcpinit+0x2c>

   return 0;   /* good return */
 803d984:	0005883a 	mov	r2,zero
}
 803d988:	e037883a 	mov	sp,fp
 803d98c:	dfc00117 	ldw	ra,4(sp)
 803d990:	df000017 	ldw	fp,0(sp)
 803d994:	dec00204 	addi	sp,sp,8
 803d998:	f800283a 	ret

0803d99c <udp_lookup>:
 * RETURNS: 
 */

UDPCONN
udp_lookup(struct socket * so)
{
 803d99c:	defffd04 	addi	sp,sp,-12
 803d9a0:	df000215 	stw	fp,8(sp)
 803d9a4:	df000204 	addi	fp,sp,8
 803d9a8:	e13ffe15 	stw	r4,-8(fp)
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 803d9ac:	d0a09717 	ldw	r2,-32164(gp)
 803d9b0:	e0bfff15 	stw	r2,-4(fp)
 803d9b4:	00000906 	br	803d9dc <udp_lookup+0x40>
      if (tmp->u_data == (void*)so)
 803d9b8:	e0bfff17 	ldw	r2,-4(fp)
 803d9bc:	10800617 	ldw	r2,24(r2)
 803d9c0:	e0fffe17 	ldw	r3,-8(fp)
 803d9c4:	1880021e 	bne	r3,r2,803d9d0 <udp_lookup+0x34>
      return (tmp);
 803d9c8:	e0bfff17 	ldw	r2,-4(fp)
 803d9cc:	00000606 	br	803d9e8 <udp_lookup+0x4c>
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 803d9d0:	e0bfff17 	ldw	r2,-4(fp)
 803d9d4:	10800017 	ldw	r2,0(r2)
 803d9d8:	e0bfff15 	stw	r2,-4(fp)
 803d9dc:	e0bfff17 	ldw	r2,-4(fp)
 803d9e0:	103ff51e 	bne	r2,zero,803d9b8 <udp_lookup+0x1c>

   return NULL;   /* didn't find it */
 803d9e4:	0005883a 	mov	r2,zero
}
 803d9e8:	e037883a 	mov	sp,fp
 803d9ec:	df000017 	ldw	fp,0(sp)
 803d9f0:	dec00104 	addi	sp,sp,4
 803d9f4:	f800283a 	ret

0803d9f8 <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
 803d9f8:	defff504 	addi	sp,sp,-44
 803d9fc:	dfc00a15 	stw	ra,40(sp)
 803da00:	df000915 	stw	fp,36(sp)
 803da04:	df000904 	addi	fp,sp,36
 803da08:	e13ff815 	stw	r4,-32(fp)
 803da0c:	e17ff715 	stw	r5,-36(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 803da10:	e0bff717 	ldw	r2,-36(fp)
 803da14:	e0bfff15 	stw	r2,-4(fp)
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
 803da18:	0009883a 	mov	r4,zero
 803da1c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 803da20:	e0bfff17 	ldw	r2,-4(fp)
 803da24:	10c00a17 	ldw	r3,40(r2)
 803da28:	e0bff817 	ldw	r2,-32(fp)
 803da2c:	10800417 	ldw	r2,16(r2)
 803da30:	1887883a 	add	r3,r3,r2
 803da34:	e0bfff17 	ldw	r2,-4(fp)
 803da38:	10800b17 	ldw	r2,44(r2)
 803da3c:	18800436 	bltu	r3,r2,803da50 <udp_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 803da40:	0009883a 	mov	r4,zero
 803da44:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 803da48:	00801a44 	movi	r2,105
 803da4c:	00004d06 	br	803db84 <udp_soinput+0x18c>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 803da50:	000b883a 	mov	r5,zero
 803da54:	01000044 	movi	r4,1
 803da58:	8030f540 	call	8030f54 <m_getnbuf>
 803da5c:	e0bffe15 	stw	r2,-8(fp)
   if (!m_in)
 803da60:	e0bffe17 	ldw	r2,-8(fp)
 803da64:	1000041e 	bne	r2,zero,803da78 <udp_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 803da68:	0009883a 	mov	r4,zero
 803da6c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 803da70:	00801a44 	movi	r2,105
 803da74:	00004306 	br	803db84 <udp_soinput+0x18c>
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
 803da78:	e0bffe17 	ldw	r2,-8(fp)
 803da7c:	e0fff817 	ldw	r3,-32(fp)
 803da80:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
 803da84:	e0bff817 	ldw	r2,-32(fp)
 803da88:	10c00317 	ldw	r3,12(r2)
 803da8c:	e0bffe17 	ldw	r2,-8(fp)
 803da90:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 803da94:	e0bff817 	ldw	r2,-32(fp)
 803da98:	10c00417 	ldw	r3,16(r2)
 803da9c:	e0bffe17 	ldw	r2,-8(fp)
 803daa0:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;
 803daa4:	e0bff817 	ldw	r2,-32(fp)
 803daa8:	10c00117 	ldw	r3,4(r2)
 803daac:	e0bffe17 	ldw	r2,-8(fp)
 803dab0:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 803dab4:	e0bff817 	ldw	r2,-32(fp)
 803dab8:	10c00217 	ldw	r3,8(r2)
 803dabc:	e0bffe17 	ldw	r2,-8(fp)
 803dac0:	10c00515 	stw	r3,20(r2)

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 803dac4:	e0bff817 	ldw	r2,-32(fp)
 803dac8:	10800717 	ldw	r2,28(r2)
 803dacc:	e0bffa15 	stw	r2,-24(fp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
 803dad0:	e0bff817 	ldw	r2,-32(fp)
 803dad4:	10800317 	ldw	r2,12(r2)
 803dad8:	10bffe04 	addi	r2,r2,-8
 803dadc:	e0bffd15 	stw	r2,-12(fp)
   sin.sin_port = htons(udpp->ud_srcp);
 803dae0:	e0bffd17 	ldw	r2,-12(fp)
 803dae4:	1080000b 	ldhu	r2,0(r2)
 803dae8:	10bfffcc 	andi	r2,r2,65535
 803daec:	1004d23a 	srli	r2,r2,8
 803daf0:	1007883a 	mov	r3,r2
 803daf4:	e0bffd17 	ldw	r2,-12(fp)
 803daf8:	1080000b 	ldhu	r2,0(r2)
 803dafc:	10bfffcc 	andi	r2,r2,65535
 803db00:	1004923a 	slli	r2,r2,8
 803db04:	1884b03a 	or	r2,r3,r2
 803db08:	e0bff98d 	sth	r2,-26(fp)
   sin.sin_family = AF_INET;
 803db0c:	00800084 	movi	r2,2
 803db10:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 803db14:	e0bfff17 	ldw	r2,-4(fp)
 803db18:	10800a04 	addi	r2,r2,40
 803db1c:	e0fff904 	addi	r3,fp,-28
 803db20:	e1bffe17 	ldw	r6,-8(fp)
 803db24:	180b883a 	mov	r5,r3
 803db28:	1009883a 	mov	r4,r2
 803db2c:	803722c0 	call	803722c <sbappendaddr>
 803db30:	1000081e 	bne	r2,zero,803db54 <udp_soinput+0x15c>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
 803db34:	e0bffe17 	ldw	r2,-8(fp)
 803db38:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 803db3c:	e13ffe17 	ldw	r4,-8(fp)
 803db40:	80310dc0 	call	80310dc <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 803db44:	0009883a 	mov	r4,zero
 803db48:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 803db4c:	00801a44 	movi	r2,105
 803db50:	00000c06 	br	803db84 <udp_soinput+0x18c>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 803db54:	e0bfff17 	ldw	r2,-4(fp)
 803db58:	10800a04 	addi	r2,r2,40
 803db5c:	1009883a 	mov	r4,r2
 803db60:	802c7b80 	call	802c7b8 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 803db64:	e0bfff17 	ldw	r2,-4(fp)
 803db68:	10800a04 	addi	r2,r2,40
 803db6c:	100b883a 	mov	r5,r2
 803db70:	e13fff17 	ldw	r4,-4(fp)
 803db74:	8036f040 	call	8036f04 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 803db78:	0009883a 	mov	r4,zero
 803db7c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return 0;
 803db80:	0005883a 	mov	r2,zero
}
 803db84:	e037883a 	mov	sp,fp
 803db88:	dfc00117 	ldw	ra,4(sp)
 803db8c:	df000017 	ldw	fp,0(sp)
 803db90:	dec00204 	addi	sp,sp,8
 803db94:	f800283a 	ret

0803db98 <udp_usrreq>:

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 803db98:	defff804 	addi	sp,sp,-32
 803db9c:	dfc00715 	stw	ra,28(sp)
 803dba0:	df000615 	stw	fp,24(sp)
 803dba4:	df000604 	addi	fp,sp,24
 803dba8:	e13ffd15 	stw	r4,-12(fp)
 803dbac:	e17ffc15 	stw	r5,-16(fp)
 803dbb0:	e1bffb15 	stw	r6,-20(fp)
   UDPCONN udpconn = (UDPCONN)NULL;
 803dbb4:	e03fff15 	stw	zero,-4(fp)
   int   req;

   req = so->so_req;    /* get request from socket struct */
 803dbb8:	e0bffd17 	ldw	r2,-12(fp)
 803dbbc:	10800717 	ldw	r2,28(r2)
 803dbc0:	e0bffe15 	stw	r2,-8(fp)
 803dbc4:	e0bffe17 	ldw	r2,-8(fp)
 803dbc8:	10800468 	cmpgeui	r2,r2,17
 803dbcc:	10007a1e 	bne	r2,zero,803ddb8 <udp_usrreq+0x220>
 803dbd0:	e0bffe17 	ldw	r2,-8(fp)
 803dbd4:	100690ba 	slli	r3,r2,2
 803dbd8:	00820134 	movhi	r2,2052
 803dbdc:	1885883a 	add	r2,r3,r2
 803dbe0:	10b6fa17 	ldw	r2,-9240(r2)
 803dbe4:	1000683a 	jmp	r2
 803dbe8:	0803dc2c 	andhi	zero,at,3952
 803dbec:	0803dcb0 	cmpltui	zero,at,3954
 803dbf0:	0803dcec 	andhi	zero,at,3955
 803dbf4:	0803ddb8 	rdprs	zero,at,3958
 803dbf8:	0803dcec 	andhi	zero,at,3955
 803dbfc:	0803ddb8 	rdprs	zero,at,3958
 803dc00:	0803ddac 	andhi	zero,at,3958
 803dc04:	0803ddb8 	rdprs	zero,at,3958
 803dc08:	0803ddac 	andhi	zero,at,3958
 803dc0c:	0803dd2c 	andhi	zero,at,3956
 803dc10:	0803ddb8 	rdprs	zero,at,3958
 803dc14:	0803ddb8 	rdprs	zero,at,3958
 803dc18:	0803ddb8 	rdprs	zero,at,3958
 803dc1c:	0803ddb8 	rdprs	zero,at,3958
 803dc20:	0803ddb8 	rdprs	zero,at,3958
 803dc24:	0803dd6c 	andhi	zero,at,3957
 803dc28:	0803dd6c 	andhi	zero,at,3957

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
 803dc2c:	80480280 	call	8048028 <udp_maxalloc>
 803dc30:	1007883a 	mov	r3,r2
 803dc34:	e0bffd17 	ldw	r2,-12(fp)
 803dc38:	10c01315 	stw	r3,76(r2)
 803dc3c:	e0bffd17 	ldw	r2,-12(fp)
 803dc40:	10c01317 	ldw	r3,76(r2)
 803dc44:	e0bffd17 	ldw	r2,-12(fp)
 803dc48:	10c00b15 	stw	r3,44(r2)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
 803dc4c:	e0bffd17 	ldw	r2,-12(fp)
 803dc50:	10800517 	ldw	r2,20(r2)
 803dc54:	10800098 	cmpnei	r2,r2,2
 803dc58:	10000f1e 	bne	r2,zero,803dc98 <udp_usrreq+0x100>
        UNLOCK_NET_RESOURCE(NET_RESID);
 803dc5c:	0009883a 	mov	r4,zero
 803dc60:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
 803dc64:	8047ebc0 	call	8047ebc <udp_socket>
 803dc68:	10ffffcc 	andi	r3,r2,65535
 803dc6c:	e0bffd17 	ldw	r2,-12(fp)
 803dc70:	d8800015 	stw	r2,0(sp)
 803dc74:	01c20134 	movhi	r7,2052
 803dc78:	39f67e04 	addi	r7,r7,-9736
 803dc7c:	180d883a 	mov	r6,r3
 803dc80:	000b883a 	mov	r5,zero
 803dc84:	0009883a 	mov	r4,zero
 803dc88:	802fd3c0 	call	802fd3c <udp_open>
 803dc8c:	e0bfff15 	stw	r2,-4(fp)
        LOCK_NET_RESOURCE(NET_RESID);
 803dc90:	0009883a 	mov	r4,zero
 803dc94:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
 803dc98:	e0bfff17 	ldw	r2,-4(fp)
 803dc9c:	1000021e 	bne	r2,zero,803dca8 <udp_usrreq+0x110>
         return(EINVAL);
 803dca0:	00800584 	movi	r2,22
 803dca4:	00004506 	br	803ddbc <udp_usrreq+0x224>
      return 0;
 803dca8:	0005883a 	mov	r2,zero
 803dcac:	00004306 	br	803ddbc <udp_usrreq+0x224>
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
 803dcb0:	e13ffd17 	ldw	r4,-12(fp)
 803dcb4:	803d99c0 	call	803d99c <udp_lookup>
 803dcb8:	e0bfff15 	stw	r2,-4(fp)
      if (!udpconn)
 803dcbc:	e0bfff17 	ldw	r2,-4(fp)
 803dcc0:	1000021e 	bne	r2,zero,803dccc <udp_usrreq+0x134>
         return(EINVAL);
 803dcc4:	00800584 	movi	r2,22
 803dcc8:	00003c06 	br	803ddbc <udp_usrreq+0x224>
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 803dccc:	0009883a 	mov	r4,zero
 803dcd0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
 803dcd4:	e13fff17 	ldw	r4,-4(fp)
 803dcd8:	802ff3c0 	call	802ff3c <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
 803dcdc:	0009883a 	mov	r4,zero
 803dce0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      return 0;
 803dce4:	0005883a 	mov	r2,zero
 803dce8:	00003406 	br	803ddbc <udp_usrreq+0x224>
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 803dcec:	e0bffb17 	ldw	r2,-20(fp)
 803dcf0:	1000021e 	bne	r2,zero,803dcfc <udp_usrreq+0x164>
         return(EINVAL);
 803dcf4:	00800584 	movi	r2,22
 803dcf8:	00003006 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 803dcfc:	e0bffd17 	ldw	r2,-12(fp)
 803dd00:	10800517 	ldw	r2,20(r2)
 803dd04:	10800098 	cmpnei	r2,r2,2
 803dd08:	1000051e 	bne	r2,zero,803dd20 <udp_usrreq+0x188>
        return udp4_sockbind(so, nam, req );
 803dd0c:	e1bffe17 	ldw	r6,-8(fp)
 803dd10:	e17ffb17 	ldw	r5,-20(fp)
 803dd14:	e13ffd17 	ldw	r4,-12(fp)
 803dd18:	803ddd00 	call	803ddd0 <udp4_sockbind>
 803dd1c:	00002706 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockbind(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 803dd20:	80301a80 	call	80301a8 <dtrap>
      return EINVAL;
 803dd24:	00800584 	movi	r2,22
 803dd28:	00002406 	br	803ddbc <udp_usrreq+0x224>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 803dd2c:	e0bffc17 	ldw	r2,-16(fp)
 803dd30:	1000021e 	bne	r2,zero,803dd3c <udp_usrreq+0x1a4>
         return(EINVAL);
 803dd34:	00800584 	movi	r2,22
 803dd38:	00002006 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 803dd3c:	e0bffd17 	ldw	r2,-12(fp)
 803dd40:	10800517 	ldw	r2,20(r2)
 803dd44:	10800098 	cmpnei	r2,r2,2
 803dd48:	1000051e 	bne	r2,zero,803dd60 <udp_usrreq+0x1c8>
        return udp4_socksend(so, m, nam );
 803dd4c:	e1bffb17 	ldw	r6,-20(fp)
 803dd50:	e17ffc17 	ldw	r5,-16(fp)
 803dd54:	e13ffd17 	ldw	r4,-12(fp)
 803dd58:	803e0a00 	call	803e0a0 <udp4_socksend>
 803dd5c:	00001706 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_socksend(so, m, nam);
      }
#endif
      dtrap();   /* invalid address */
 803dd60:	80301a80 	call	80301a8 <dtrap>
      return EINVAL;
 803dd64:	00800584 	movi	r2,22
 803dd68:	00001406 	br	803ddbc <udp_usrreq+0x224>

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 803dd6c:	e0bffb17 	ldw	r2,-20(fp)
 803dd70:	1000021e 	bne	r2,zero,803dd7c <udp_usrreq+0x1e4>
         return(EINVAL);
 803dd74:	00800584 	movi	r2,22
 803dd78:	00001006 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 803dd7c:	e0bffd17 	ldw	r2,-12(fp)
 803dd80:	10800517 	ldw	r2,20(r2)
 803dd84:	10800098 	cmpnei	r2,r2,2
 803dd88:	1000051e 	bne	r2,zero,803dda0 <udp_usrreq+0x208>
        return udp4_sockaddr(so, nam, req );
 803dd8c:	e1bffe17 	ldw	r6,-8(fp)
 803dd90:	e17ffb17 	ldw	r5,-20(fp)
 803dd94:	e13ffd17 	ldw	r4,-12(fp)
 803dd98:	803e4140 	call	803e414 <udp4_sockaddr>
 803dd9c:	00000706 	br	803ddbc <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 803dda0:	80301a80 	call	80301a8 <dtrap>
      return EINVAL;
 803dda4:	00800584 	movi	r2,22
 803dda8:	00000406 	br	803ddbc <udp_usrreq+0x224>

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 803ddac:	80301a80 	call	80301a8 <dtrap>
      return 0;
 803ddb0:	0005883a 	mov	r2,zero
 803ddb4:	00000106 	br	803ddbc <udp_usrreq+0x224>
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 803ddb8:	008017c4 	movi	r2,95
   }
}
 803ddbc:	e037883a 	mov	sp,fp
 803ddc0:	dfc00117 	ldw	ra,4(sp)
 803ddc4:	df000017 	ldw	fp,0(sp)
 803ddc8:	dec00204 	addi	sp,sp,8
 803ddcc:	f800283a 	ret

0803ddd0 <udp4_sockbind>:

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
 803ddd0:	defff304 	addi	sp,sp,-52
 803ddd4:	dfc00c15 	stw	ra,48(sp)
 803ddd8:	df000b15 	stw	fp,44(sp)
 803dddc:	df000b04 	addi	fp,sp,44
 803dde0:	e13ff715 	stw	r4,-36(fp)
 803dde4:	e17ff615 	stw	r5,-40(fp)
 803dde8:	e1bff515 	stw	r6,-44(fp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
 803ddec:	e0bff617 	ldw	r2,-40(fp)
 803ddf0:	10800317 	ldw	r2,12(r2)
 803ddf4:	e0bffa15 	stw	r2,-24(fp)
  if (sin == NULL)
 803ddf8:	e0bffa17 	ldw	r2,-24(fp)
 803ddfc:	1000021e 	bne	r2,zero,803de08 <udp4_sockbind+0x38>
    return(EINVAL);
 803de00:	00800584 	movi	r2,22
 803de04:	0000a106 	br	803e08c <udp4_sockbind+0x2bc>
  if (nam->m_len != sizeof (*sin))
 803de08:	e0bff617 	ldw	r2,-40(fp)
 803de0c:	10800217 	ldw	r2,8(r2)
 803de10:	10800420 	cmpeqi	r2,r2,16
 803de14:	1000021e 	bne	r2,zero,803de20 <udp4_sockbind+0x50>
    return(EINVAL);
 803de18:	00800584 	movi	r2,22
 803de1c:	00009b06 	br	803e08c <udp4_sockbind+0x2bc>
  udpconn = udp_lookup(so);
 803de20:	e13ff717 	ldw	r4,-36(fp)
 803de24:	803d99c0 	call	803d99c <udp_lookup>
 803de28:	e0bff915 	stw	r2,-28(fp)
  if (!udpconn)
 803de2c:	e0bff917 	ldw	r2,-28(fp)
 803de30:	1000021e 	bne	r2,zero,803de3c <udp4_sockbind+0x6c>
     return(EINVAL);
 803de34:	00800584 	movi	r2,22
 803de38:	00009406 	br	803e08c <udp4_sockbind+0x2bc>
  if (req == PRU_BIND)
 803de3c:	e0bff517 	ldw	r2,-44(fp)
 803de40:	10800098 	cmpnei	r2,r2,2
 803de44:	1000521e 	bne	r2,zero,803df90 <udp4_sockbind+0x1c0>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
 803de48:	e0bffa17 	ldw	r2,-24(fp)
 803de4c:	1080008b 	ldhu	r2,2(r2)
 803de50:	10bfffcc 	andi	r2,r2,65535
 803de54:	10000b1e 	bne	r2,zero,803de84 <udp4_sockbind+0xb4>
    {
      if (udpconn->u_lport != 0)
 803de58:	e0bff917 	ldw	r2,-28(fp)
 803de5c:	1080018b 	ldhu	r2,6(r2)
 803de60:	10bfffcc 	andi	r2,r2,65535
 803de64:	10000426 	beq	r2,zero,803de78 <udp4_sockbind+0xa8>
        lport = udpconn->u_lport;
 803de68:	e0bff917 	ldw	r2,-28(fp)
 803de6c:	1080018b 	ldhu	r2,6(r2)
 803de70:	e0bffe8d 	sth	r2,-6(fp)
 803de74:	00000e06 	br	803deb0 <udp4_sockbind+0xe0>
      else
        lport = udp_socket();
 803de78:	8047ebc0 	call	8047ebc <udp_socket>
 803de7c:	e0bffe8d 	sth	r2,-6(fp)
 803de80:	00000b06 	br	803deb0 <udp4_sockbind+0xe0>
    }
    else
    {
      lport = ntohs(sin->sin_port);
 803de84:	e0bffa17 	ldw	r2,-24(fp)
 803de88:	1080008b 	ldhu	r2,2(r2)
 803de8c:	10bfffcc 	andi	r2,r2,65535
 803de90:	1004d23a 	srli	r2,r2,8
 803de94:	1007883a 	mov	r3,r2
 803de98:	e0bffa17 	ldw	r2,-24(fp)
 803de9c:	1080008b 	ldhu	r2,2(r2)
 803dea0:	10bfffcc 	andi	r2,r2,65535
 803dea4:	1004923a 	slli	r2,r2,8
 803dea8:	1884b03a 	or	r2,r3,r2
 803deac:	e0bffe8d 	sth	r2,-6(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 803deb0:	e0bffa17 	ldw	r2,-24(fp)
 803deb4:	10800117 	ldw	r2,4(r2)
 803deb8:	1000021e 	bne	r2,zero,803dec4 <udp4_sockbind+0xf4>
    {
      lhost = 0L;
 803debc:	e03ffc15 	stw	zero,-16(fp)
 803dec0:	00001606 	br	803df1c <udp4_sockbind+0x14c>
    }
    else
    {
      lhost = sin->sin_addr.s_addr;
 803dec4:	e0bffa17 	ldw	r2,-24(fp)
 803dec8:	10800117 	ldw	r2,4(r2)
 803decc:	e0bffc15 	stw	r2,-16(fp)
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803ded0:	008201b4 	movhi	r2,2054
 803ded4:	10800f17 	ldw	r2,60(r2)
 803ded8:	e0bffb15 	stw	r2,-20(fp)
 803dedc:	00000706 	br	803defc <udp4_sockbind+0x12c>
        if (ifp->n_ipaddr == lhost)
 803dee0:	e0bffb17 	ldw	r2,-20(fp)
 803dee4:	10800a17 	ldw	r2,40(r2)
 803dee8:	e0fffc17 	ldw	r3,-16(fp)
 803deec:	18800626 	beq	r3,r2,803df08 <udp4_sockbind+0x138>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803def0:	e0bffb17 	ldw	r2,-20(fp)
 803def4:	10800017 	ldw	r2,0(r2)
 803def8:	e0bffb15 	stw	r2,-20(fp)
 803defc:	e0bffb17 	ldw	r2,-20(fp)
 803df00:	103ff71e 	bne	r2,zero,803dee0 <udp4_sockbind+0x110>
 803df04:	00000106 	br	803df0c <udp4_sockbind+0x13c>
          break;
 803df08:	0001883a 	nop
      if (ifp == NULL)
 803df0c:	e0bffb17 	ldw	r2,-20(fp)
 803df10:	1000021e 	bne	r2,zero,803df1c <udp4_sockbind+0x14c>
        return(EADDRNOTAVAIL);
 803df14:	00801f44 	movi	r2,125
 803df18:	00005c06 	br	803e08c <udp4_sockbind+0x2bc>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
 803df1c:	e0bff717 	ldw	r2,-36(fp)
 803df20:	10800417 	ldw	r2,16(r2)
 803df24:	1080010c 	andi	r2,r2,4
 803df28:	1000121e 	bne	r2,zero,803df74 <udp4_sockbind+0x1a4>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 803df2c:	d0a09717 	ldw	r2,-32164(gp)
 803df30:	e0bfff15 	stw	r2,-4(fp)
 803df34:	00000d06 	br	803df6c <udp4_sockbind+0x19c>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
 803df38:	e0bfff17 	ldw	r2,-4(fp)
 803df3c:	1080018b 	ldhu	r2,6(r2)
 803df40:	e0fffe8b 	ldhu	r3,-6(fp)
 803df44:	10bfffcc 	andi	r2,r2,65535
 803df48:	1880051e 	bne	r3,r2,803df60 <udp4_sockbind+0x190>
 803df4c:	e0ffff17 	ldw	r3,-4(fp)
 803df50:	e0bff917 	ldw	r2,-28(fp)
 803df54:	18800226 	beq	r3,r2,803df60 <udp4_sockbind+0x190>
          return(EADDRINUSE);
 803df58:	00801c04 	movi	r2,112
 803df5c:	00004b06 	br	803e08c <udp4_sockbind+0x2bc>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 803df60:	e0bfff17 	ldw	r2,-4(fp)
 803df64:	10800017 	ldw	r2,0(r2)
 803df68:	e0bfff15 	stw	r2,-4(fp)
 803df6c:	e0bfff17 	ldw	r2,-4(fp)
 803df70:	103ff11e 	bne	r2,zero,803df38 <udp4_sockbind+0x168>
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
 803df74:	e0bff917 	ldw	r2,-28(fp)
 803df78:	e0fffe8b 	ldhu	r3,-6(fp)
 803df7c:	10c0018d 	sth	r3,6(r2)
    udpconn->u_lhost = lhost;
 803df80:	e0bff917 	ldw	r2,-28(fp)
 803df84:	e0fffc17 	ldw	r3,-16(fp)
 803df88:	10c00315 	stw	r3,12(r2)
 803df8c:	00003e06 	br	803e088 <udp4_sockbind+0x2b8>
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
 803df90:	e0bffa17 	ldw	r2,-24(fp)
 803df94:	1080008b 	ldhu	r2,2(r2)
 803df98:	10bfffcc 	andi	r2,r2,65535
 803df9c:	1004d23a 	srli	r2,r2,8
 803dfa0:	1007883a 	mov	r3,r2
 803dfa4:	e0bffa17 	ldw	r2,-24(fp)
 803dfa8:	1080008b 	ldhu	r2,2(r2)
 803dfac:	10bfffcc 	andi	r2,r2,65535
 803dfb0:	1004923a 	slli	r2,r2,8
 803dfb4:	1884b03a 	or	r2,r3,r2
 803dfb8:	e0bff88d 	sth	r2,-30(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 803dfbc:	e0bffa17 	ldw	r2,-24(fp)
 803dfc0:	10800117 	ldw	r2,4(r2)
 803dfc4:	1000021e 	bne	r2,zero,803dfd0 <udp4_sockbind+0x200>
      fhost = 0L;
 803dfc8:	e03ffd15 	stw	zero,-12(fp)
 803dfcc:	00000306 	br	803dfdc <udp4_sockbind+0x20c>
    else
      fhost = sin->sin_addr.s_addr;
 803dfd0:	e0bffa17 	ldw	r2,-24(fp)
 803dfd4:	10800117 	ldw	r2,4(r2)
 803dfd8:	e0bffd15 	stw	r2,-12(fp)
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
 803dfdc:	e13ffd17 	ldw	r4,-12(fp)
 803dfe0:	804370c0 	call	804370c <ip_mymach>
 803dfe4:	e0bffc15 	stw	r2,-16(fp)
    if (lhost == 0)
 803dfe8:	e0bffc17 	ldw	r2,-16(fp)
 803dfec:	1000021e 	bne	r2,zero,803dff8 <udp4_sockbind+0x228>
      return(ENETUNREACH);
 803dff0:	00801c84 	movi	r2,114
 803dff4:	00002506 	br	803e08c <udp4_sockbind+0x2bc>
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
 803dff8:	e0bff917 	ldw	r2,-28(fp)
 803dffc:	1080018b 	ldhu	r2,6(r2)
 803e000:	e0bffe8d 	sth	r2,-6(fp)
    if (lport == 0)
 803e004:	e0bffe8b 	ldhu	r2,-6(fp)
 803e008:	1000021e 	bne	r2,zero,803e014 <udp4_sockbind+0x244>
      lport = udp_socket();
 803e00c:	8047ebc0 	call	8047ebc <udp_socket>
 803e010:	e0bffe8d 	sth	r2,-6(fp)
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
 803e014:	e0bff917 	ldw	r2,-28(fp)
 803e018:	e0fffc17 	ldw	r3,-16(fp)
 803e01c:	10c00315 	stw	r3,12(r2)
    udpconn->u_lport = lport;
 803e020:	e0bff917 	ldw	r2,-28(fp)
 803e024:	e0fffe8b 	ldhu	r3,-6(fp)
 803e028:	10c0018d 	sth	r3,6(r2)
    udpconn->u_fhost = fhost;
 803e02c:	e0bff917 	ldw	r2,-28(fp)
 803e030:	e0fffd17 	ldw	r3,-12(fp)
 803e034:	10c00415 	stw	r3,16(r2)
    udpconn->u_fport = fport;
 803e038:	e0bff917 	ldw	r2,-28(fp)
 803e03c:	e0fff88b 	ldhu	r3,-30(fp)
 803e040:	10c0020d 	sth	r3,8(r2)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 803e044:	e0bff717 	ldw	r2,-36(fp)
 803e048:	10c0088b 	ldhu	r3,34(r2)
 803e04c:	00bffcc4 	movi	r2,-13
 803e050:	1884703a 	and	r2,r3,r2
 803e054:	1007883a 	mov	r3,r2
 803e058:	e0bff717 	ldw	r2,-36(fp)
 803e05c:	10c0088d 	sth	r3,34(r2)
    so->so_state |= SS_ISCONNECTED;
 803e060:	e0bff717 	ldw	r2,-36(fp)
 803e064:	1080088b 	ldhu	r2,34(r2)
 803e068:	10800094 	ori	r2,r2,2
 803e06c:	1007883a 	mov	r3,r2
 803e070:	e0bff717 	ldw	r2,-36(fp)
 803e074:	10c0088d 	sth	r3,34(r2)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 803e078:	e0bff717 	ldw	r2,-36(fp)
 803e07c:	10800a04 	addi	r2,r2,40
 803e080:	1009883a 	mov	r4,r2
 803e084:	80375e80 	call	80375e8 <sbflush>
  }
  return 0;
 803e088:	0005883a 	mov	r2,zero
}
 803e08c:	e037883a 	mov	sp,fp
 803e090:	dfc00117 	ldw	ra,4(sp)
 803e094:	df000017 	ldw	fp,0(sp)
 803e098:	dec00204 	addi	sp,sp,8
 803e09c:	f800283a 	ret

0803e0a0 <udp4_socksend>:

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
 803e0a0:	defff304 	addi	sp,sp,-52
 803e0a4:	dfc00c15 	stw	ra,48(sp)
 803e0a8:	df000b15 	stw	fp,44(sp)
 803e0ac:	dc000a15 	stw	r16,40(sp)
 803e0b0:	df000b04 	addi	fp,sp,44
 803e0b4:	e13ff715 	stw	r4,-36(fp)
 803e0b8:	e17ff615 	stw	r5,-40(fp)
 803e0bc:	e1bff515 	stw	r6,-44(fp)
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
 803e0c0:	e13ff717 	ldw	r4,-36(fp)
 803e0c4:	803d99c0 	call	803d99c <udp_lookup>
 803e0c8:	e0bffb15 	stw	r2,-20(fp)
  if (!udpconn)
 803e0cc:	e0bffb17 	ldw	r2,-20(fp)
 803e0d0:	1000041e 	bne	r2,zero,803e0e4 <udp4_socksend+0x44>
  {
    m_free(m);
 803e0d4:	e13ff617 	ldw	r4,-40(fp)
 803e0d8:	80310dc0 	call	80310dc <m_free>
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
 803e0dc:	00801bc4 	movi	r2,111
 803e0e0:	0000c606 	br	803e3fc <udp4_socksend+0x35c>
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
 803e0e4:	e0bff517 	ldw	r2,-44(fp)
 803e0e8:	10000e1e 	bne	r2,zero,803e124 <udp4_socksend+0x84>
  { 
    if (so->so_state & SS_ISCONNECTED)
 803e0ec:	e0bff717 	ldw	r2,-36(fp)
 803e0f0:	1080088b 	ldhu	r2,34(r2)
 803e0f4:	10bfffcc 	andi	r2,r2,65535
 803e0f8:	1080008c 	andi	r2,r2,2
 803e0fc:	10000726 	beq	r2,zero,803e11c <udp4_socksend+0x7c>
    {
      fport = udpconn->u_fport;
 803e100:	e0bffb17 	ldw	r2,-20(fp)
 803e104:	1080020b 	ldhu	r2,8(r2)
 803e108:	e0bffe8d 	sth	r2,-6(fp)
      fhost = udpconn->u_fhost;
 803e10c:	e0bffb17 	ldw	r2,-20(fp)
 803e110:	10800417 	ldw	r2,16(r2)
 803e114:	e0bffd15 	stw	r2,-12(fp)
 803e118:	00002806 	br	803e1bc <udp4_socksend+0x11c>
    }
    else
      return (EINVAL);
 803e11c:	00800584 	movi	r2,22
 803e120:	0000b606 	br	803e3fc <udp4_socksend+0x35c>
  }
  else if(nam->m_len != sizeof (*sin))
 803e124:	e0bff517 	ldw	r2,-44(fp)
 803e128:	10800217 	ldw	r2,8(r2)
 803e12c:	10800420 	cmpeqi	r2,r2,16
 803e130:	1000031e 	bne	r2,zero,803e140 <udp4_socksend+0xa0>
  {
    dtrap();
 803e134:	80301a80 	call	80301a8 <dtrap>
    return (EINVAL);
 803e138:	00800584 	movi	r2,22
 803e13c:	0000af06 	br	803e3fc <udp4_socksend+0x35c>
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
 803e140:	e0bff517 	ldw	r2,-44(fp)
 803e144:	10800317 	ldw	r2,12(r2)
 803e148:	e0bffa15 	stw	r2,-24(fp)
    fhost = sin->sin_addr.s_addr;
 803e14c:	e0bffa17 	ldw	r2,-24(fp)
 803e150:	10800117 	ldw	r2,4(r2)
 803e154:	e0bffd15 	stw	r2,-12(fp)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
 803e158:	e0bffa17 	ldw	r2,-24(fp)
 803e15c:	1080008b 	ldhu	r2,2(r2)
 803e160:	10bfffcc 	andi	r2,r2,65535
 803e164:	10000c26 	beq	r2,zero,803e198 <udp4_socksend+0xf8>
      fport = ntohs(sin->sin_port);
 803e168:	e0bffa17 	ldw	r2,-24(fp)
 803e16c:	1080008b 	ldhu	r2,2(r2)
 803e170:	10bfffcc 	andi	r2,r2,65535
 803e174:	1004d23a 	srli	r2,r2,8
 803e178:	1007883a 	mov	r3,r2
 803e17c:	e0bffa17 	ldw	r2,-24(fp)
 803e180:	1080008b 	ldhu	r2,2(r2)
 803e184:	10bfffcc 	andi	r2,r2,65535
 803e188:	1004923a 	slli	r2,r2,8
 803e18c:	1884b03a 	or	r2,r3,r2
 803e190:	e0bffe8d 	sth	r2,-6(fp)
 803e194:	00000906 	br	803e1bc <udp4_socksend+0x11c>
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
 803e198:	e0bffb17 	ldw	r2,-20(fp)
 803e19c:	1080020b 	ldhu	r2,8(r2)
 803e1a0:	10bfffcc 	andi	r2,r2,65535
 803e1a4:	1000021e 	bne	r2,zero,803e1b0 <udp4_socksend+0x110>
        return (EINVAL);
 803e1a8:	00800584 	movi	r2,22
 803e1ac:	00009306 	br	803e3fc <udp4_socksend+0x35c>
      fport = udpconn->u_fport;
 803e1b0:	e0bffb17 	ldw	r2,-20(fp)
 803e1b4:	1080020b 	ldhu	r2,8(r2)
 803e1b8:	e0bffe8d 	sth	r2,-6(fp)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
 803e1bc:	e0bff617 	ldw	r2,-40(fp)
 803e1c0:	14000217 	ldw	r16,8(r2)
 803e1c4:	80480280 	call	8048028 <udp_maxalloc>
 803e1c8:	1400032e 	bgeu	r2,r16,803e1d8 <udp4_socksend+0x138>
  {
    dtrap(); /* should never happen */
 803e1cc:	80301a80 	call	80301a8 <dtrap>
    return EMSGSIZE;  /* try to recover */
 803e1d0:	00801e84 	movi	r2,122
 803e1d4:	00008906 	br	803e3fc <udp4_socksend+0x35c>
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
 803e1d8:	e0bff617 	ldw	r2,-40(fp)
 803e1dc:	10800217 	ldw	r2,8(r2)
 803e1e0:	000b883a 	mov	r5,zero
 803e1e4:	1009883a 	mov	r4,r2
 803e1e8:	8047f6c0 	call	8047f6c <udp_alloc>
 803e1ec:	e0bff915 	stw	r2,-28(fp)
  if (!pkt)
 803e1f0:	e0bff917 	ldw	r2,-28(fp)
 803e1f4:	1000041e 	bne	r2,zero,803e208 <udp4_socksend+0x168>
  {
    m_free(m);
 803e1f8:	e13ff617 	ldw	r4,-40(fp)
 803e1fc:	80310dc0 	call	80310dc <m_free>
    return ENOBUFS;   /* report buffer shortages */
 803e200:	00801a44 	movi	r2,105
 803e204:	00007d06 	br	803e3fc <udp4_socksend+0x35c>
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 803e208:	e0bff917 	ldw	r2,-28(fp)
 803e20c:	10c00317 	ldw	r3,12(r2)
 803e210:	e0bff617 	ldw	r2,-40(fp)
 803e214:	11000317 	ldw	r4,12(r2)
 803e218:	e0bff617 	ldw	r2,-40(fp)
 803e21c:	10800217 	ldw	r2,8(r2)
 803e220:	100d883a 	mov	r6,r2
 803e224:	200b883a 	mov	r5,r4
 803e228:	1809883a 	mov	r4,r3
 803e22c:	80037cc0 	call	80037cc <memcpy>
  pkt->nb_plen = m->m_len;
 803e230:	e0bff617 	ldw	r2,-40(fp)
 803e234:	10c00217 	ldw	r3,8(r2)
 803e238:	e0bff917 	ldw	r2,-28(fp)
 803e23c:	10c00415 	stw	r3,16(r2)
  /* finished with mbuf, free it now */
  m_free(m);
 803e240:	e13ff617 	ldw	r4,-40(fp)
 803e244:	80310dc0 	call	80310dc <m_free>
  pkt->fhost = fhost;
 803e248:	e0bff917 	ldw	r2,-28(fp)
 803e24c:	e0fffd17 	ldw	r3,-12(fp)
 803e250:	10c00715 	stw	r3,28(r2)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
 803e254:	e0bffd17 	ldw	r2,-12(fp)
 803e258:	10bfffd8 	cmpnei	r2,r2,-1
 803e25c:	1000471e 	bne	r2,zero,803e37c <udp4_socksend+0x2dc>
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
 803e260:	e0bffb17 	ldw	r2,-20(fp)
 803e264:	10800317 	ldw	r2,12(r2)
 803e268:	10000f26 	beq	r2,zero,803e2a8 <udp4_socksend+0x208>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e26c:	008201b4 	movhi	r2,2054
 803e270:	10800f17 	ldw	r2,60(r2)
 803e274:	e0bffc15 	stw	r2,-16(fp)
 803e278:	00000806 	br	803e29c <udp4_socksend+0x1fc>
        if (ifp->n_ipaddr == udpconn->u_lhost)
 803e27c:	e0bffc17 	ldw	r2,-16(fp)
 803e280:	10c00a17 	ldw	r3,40(r2)
 803e284:	e0bffb17 	ldw	r2,-20(fp)
 803e288:	10800317 	ldw	r2,12(r2)
 803e28c:	18801c26 	beq	r3,r2,803e300 <udp4_socksend+0x260>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e290:	e0bffc17 	ldw	r2,-16(fp)
 803e294:	10800017 	ldw	r2,0(r2)
 803e298:	e0bffc15 	stw	r2,-16(fp)
 803e29c:	e0bffc17 	ldw	r2,-16(fp)
 803e2a0:	103ff61e 	bne	r2,zero,803e27c <udp4_socksend+0x1dc>
 803e2a4:	00001906 	br	803e30c <udp4_socksend+0x26c>
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e2a8:	008201b4 	movhi	r2,2054
 803e2ac:	10800f17 	ldw	r2,60(r2)
 803e2b0:	e0bffc15 	stw	r2,-16(fp)
 803e2b4:	00000f06 	br	803e2f4 <udp4_socksend+0x254>
        if ((ifp->n_flags & NF_BCAST) &&
 803e2b8:	e0bffc17 	ldw	r2,-16(fp)
 803e2bc:	10802a17 	ldw	r2,168(r2)
 803e2c0:	1080004c 	andi	r2,r2,1
 803e2c4:	10000826 	beq	r2,zero,803e2e8 <udp4_socksend+0x248>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803e2c8:	e0bffc17 	ldw	r2,-16(fp)
 803e2cc:	10802717 	ldw	r2,156(r2)
        if ((ifp->n_flags & NF_BCAST) &&
 803e2d0:	10000526 	beq	r2,zero,803e2e8 <udp4_socksend+0x248>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803e2d4:	e0bffc17 	ldw	r2,-16(fp)
 803e2d8:	10802717 	ldw	r2,156(r2)
 803e2dc:	10800617 	ldw	r2,24(r2)
 803e2e0:	10800058 	cmpnei	r2,r2,1
 803e2e4:	10000826 	beq	r2,zero,803e308 <udp4_socksend+0x268>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e2e8:	e0bffc17 	ldw	r2,-16(fp)
 803e2ec:	10800017 	ldw	r2,0(r2)
 803e2f0:	e0bffc15 	stw	r2,-16(fp)
 803e2f4:	e0bffc17 	ldw	r2,-16(fp)
 803e2f8:	103fef1e 	bne	r2,zero,803e2b8 <udp4_socksend+0x218>
 803e2fc:	00000306 	br	803e30c <udp4_socksend+0x26c>
          break;
 803e300:	0001883a 	nop
 803e304:	00000106 	br	803e30c <udp4_socksend+0x26c>
           break;
 803e308:	0001883a 	nop
    }
    if (ifp == NULL)
 803e30c:	e0bffc17 	ldw	r2,-16(fp)
 803e310:	1000171e 	bne	r2,zero,803e370 <udp4_socksend+0x2d0>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e314:	008201b4 	movhi	r2,2054
 803e318:	10800f17 	ldw	r2,60(r2)
 803e31c:	e0bffc15 	stw	r2,-16(fp)
 803e320:	00000b06 	br	803e350 <udp4_socksend+0x2b0>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803e324:	e0bffc17 	ldw	r2,-16(fp)
 803e328:	10802717 	ldw	r2,156(r2)
 803e32c:	10000526 	beq	r2,zero,803e344 <udp4_socksend+0x2a4>
 803e330:	e0bffc17 	ldw	r2,-16(fp)
 803e334:	10802717 	ldw	r2,156(r2)
 803e338:	10800617 	ldw	r2,24(r2)
 803e33c:	10800058 	cmpnei	r2,r2,1
 803e340:	10000626 	beq	r2,zero,803e35c <udp4_socksend+0x2bc>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803e344:	e0bffc17 	ldw	r2,-16(fp)
 803e348:	10800017 	ldw	r2,0(r2)
 803e34c:	e0bffc15 	stw	r2,-16(fp)
 803e350:	e0bffc17 	ldw	r2,-16(fp)
 803e354:	103ff31e 	bne	r2,zero,803e324 <udp4_socksend+0x284>
 803e358:	00000106 	br	803e360 <udp4_socksend+0x2c0>
          break;
 803e35c:	0001883a 	nop
      if (ifp == NULL)
 803e360:	e0bffc17 	ldw	r2,-16(fp)
 803e364:	1000021e 	bne	r2,zero,803e370 <udp4_socksend+0x2d0>
        return(EADDRNOTAVAIL);
 803e368:	00801f44 	movi	r2,125
 803e36c:	00002306 	br	803e3fc <udp4_socksend+0x35c>
    }
    pkt->net = ifp;
 803e370:	e0bff917 	ldw	r2,-28(fp)
 803e374:	e0fffc17 	ldw	r3,-16(fp)
 803e378:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
 803e37c:	e0bff717 	ldw	r2,-36(fp)
 803e380:	10800317 	ldw	r2,12(r2)
 803e384:	10000426 	beq	r2,zero,803e398 <udp4_socksend+0x2f8>
     pkt->imo = so->inp_moptions;
 803e388:	e0bff717 	ldw	r2,-36(fp)
 803e38c:	10c00317 	ldw	r3,12(r2)
 803e390:	e0bff917 	ldw	r2,-28(fp)
 803e394:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
 803e398:	e0bff717 	ldw	r2,-36(fp)
 803e39c:	10801f17 	ldw	r2,124(r2)
 803e3a0:	10000426 	beq	r2,zero,803e3b4 <udp4_socksend+0x314>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
 803e3a4:	e0bff717 	ldw	r2,-36(fp)
 803e3a8:	10c01f17 	ldw	r3,124(r2)
 803e3ac:	e0bff917 	ldw	r2,-28(fp)
 803e3b0:	10c00c15 	stw	r3,48(r2)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
 803e3b4:	0009883a 	mov	r4,zero
 803e3b8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
 803e3bc:	e0fffe8b 	ldhu	r3,-6(fp)
 803e3c0:	e0bffb17 	ldw	r2,-20(fp)
 803e3c4:	1080018b 	ldhu	r2,6(r2)
 803e3c8:	10bfffcc 	andi	r2,r2,65535
 803e3cc:	e1bff917 	ldw	r6,-28(fp)
 803e3d0:	100b883a 	mov	r5,r2
 803e3d4:	1809883a 	mov	r4,r3
 803e3d8:	8047b340 	call	8047b34 <udp_send>
 803e3dc:	e0bff815 	stw	r2,-32(fp)
  LOCK_NET_RESOURCE(NET_RESID);
 803e3e0:	0009883a 	mov	r4,zero
 803e3e4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
  if (e < 0) 
 803e3e8:	e0bff817 	ldw	r2,-32(fp)
 803e3ec:	1000020e 	bge	r2,zero,803e3f8 <udp4_socksend+0x358>
     return(e);
 803e3f0:	e0bff817 	ldw	r2,-32(fp)
 803e3f4:	00000106 	br	803e3fc <udp4_socksend+0x35c>
  return 0;
 803e3f8:	0005883a 	mov	r2,zero
}
 803e3fc:	e6ffff04 	addi	sp,fp,-4
 803e400:	dfc00217 	ldw	ra,8(sp)
 803e404:	df000117 	ldw	fp,4(sp)
 803e408:	dc000017 	ldw	r16,0(sp)
 803e40c:	dec00304 	addi	sp,sp,12
 803e410:	f800283a 	ret

0803e414 <udp4_sockaddr>:

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
 803e414:	defff904 	addi	sp,sp,-28
 803e418:	dfc00615 	stw	ra,24(sp)
 803e41c:	df000515 	stw	fp,20(sp)
 803e420:	df000504 	addi	fp,sp,20
 803e424:	e13ffd15 	stw	r4,-12(fp)
 803e428:	e17ffc15 	stw	r5,-16(fp)
 803e42c:	e1bffb15 	stw	r6,-20(fp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
 803e430:	e0bffc17 	ldw	r2,-16(fp)
 803e434:	10800317 	ldw	r2,12(r2)
 803e438:	e0bfff15 	stw	r2,-4(fp)
  if (sin == NULL)
 803e43c:	e0bfff17 	ldw	r2,-4(fp)
 803e440:	1000021e 	bne	r2,zero,803e44c <udp4_sockaddr+0x38>
     return(EINVAL);
 803e444:	00800584 	movi	r2,22
 803e448:	00003706 	br	803e528 <udp4_sockaddr+0x114>
  udpconn = udp_lookup(so);
 803e44c:	e13ffd17 	ldw	r4,-12(fp)
 803e450:	803d99c0 	call	803d99c <udp_lookup>
 803e454:	e0bffe15 	stw	r2,-8(fp)
  if (!udpconn)
 803e458:	e0bffe17 	ldw	r2,-8(fp)
 803e45c:	1000021e 	bne	r2,zero,803e468 <udp4_sockaddr+0x54>
     return(EINVAL);
 803e460:	00800584 	movi	r2,22
 803e464:	00003006 	br	803e528 <udp4_sockaddr+0x114>
  nam->m_len = sizeof(*sin);
 803e468:	e0bffc17 	ldw	r2,-16(fp)
 803e46c:	00c00404 	movi	r3,16
 803e470:	10c00215 	stw	r3,8(r2)
  if (req == PRU_SOCKADDR)
 803e474:	e0bffb17 	ldw	r2,-20(fp)
 803e478:	108003d8 	cmpnei	r2,r2,15
 803e47c:	1000151e 	bne	r2,zero,803e4d4 <udp4_sockaddr+0xc0>
  {
     sin->sin_family = AF_INET;
 803e480:	e0bfff17 	ldw	r2,-4(fp)
 803e484:	00c00084 	movi	r3,2
 803e488:	10c0000d 	sth	r3,0(r2)
     sin->sin_port = htons(udpconn->u_lport);
 803e48c:	e0bffe17 	ldw	r2,-8(fp)
 803e490:	1080018b 	ldhu	r2,6(r2)
 803e494:	10bfffcc 	andi	r2,r2,65535
 803e498:	1004d23a 	srli	r2,r2,8
 803e49c:	1007883a 	mov	r3,r2
 803e4a0:	e0bffe17 	ldw	r2,-8(fp)
 803e4a4:	1080018b 	ldhu	r2,6(r2)
 803e4a8:	10bfffcc 	andi	r2,r2,65535
 803e4ac:	1004923a 	slli	r2,r2,8
 803e4b0:	1884b03a 	or	r2,r3,r2
 803e4b4:	1007883a 	mov	r3,r2
 803e4b8:	e0bfff17 	ldw	r2,-4(fp)
 803e4bc:	10c0008d 	sth	r3,2(r2)
     sin->sin_addr.s_addr = udpconn->u_lhost;
 803e4c0:	e0bffe17 	ldw	r2,-8(fp)
 803e4c4:	10c00317 	ldw	r3,12(r2)
 803e4c8:	e0bfff17 	ldw	r2,-4(fp)
 803e4cc:	10c00115 	stw	r3,4(r2)
 803e4d0:	00001406 	br	803e524 <udp4_sockaddr+0x110>
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
 803e4d4:	e0bfff17 	ldw	r2,-4(fp)
 803e4d8:	00c00084 	movi	r3,2
 803e4dc:	10c0000d 	sth	r3,0(r2)
    sin->sin_port = htons(udpconn->u_fport);
 803e4e0:	e0bffe17 	ldw	r2,-8(fp)
 803e4e4:	1080020b 	ldhu	r2,8(r2)
 803e4e8:	10bfffcc 	andi	r2,r2,65535
 803e4ec:	1004d23a 	srli	r2,r2,8
 803e4f0:	1007883a 	mov	r3,r2
 803e4f4:	e0bffe17 	ldw	r2,-8(fp)
 803e4f8:	1080020b 	ldhu	r2,8(r2)
 803e4fc:	10bfffcc 	andi	r2,r2,65535
 803e500:	1004923a 	slli	r2,r2,8
 803e504:	1884b03a 	or	r2,r3,r2
 803e508:	1007883a 	mov	r3,r2
 803e50c:	e0bfff17 	ldw	r2,-4(fp)
 803e510:	10c0008d 	sth	r3,2(r2)
    sin->sin_addr.s_addr = udpconn->u_fhost;
 803e514:	e0bffe17 	ldw	r2,-8(fp)
 803e518:	10c00417 	ldw	r3,16(r2)
 803e51c:	e0bfff17 	ldw	r2,-4(fp)
 803e520:	10c00115 	stw	r3,4(r2)
  }
  return 0;
 803e524:	0005883a 	mov	r2,zero
}
 803e528:	e037883a 	mov	sp,fp
 803e52c:	dfc00117 	ldw	ra,4(sp)
 803e530:	df000017 	ldw	fp,0(sp)
 803e534:	dec00204 	addi	sp,sp,8
 803e538:	f800283a 	ret

0803e53c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 803e53c:	defff504 	addi	sp,sp,-44
 803e540:	df000a15 	stw	fp,40(sp)
 803e544:	df000a04 	addi	fp,sp,40
 803e548:	e13ff915 	stw	r4,-28(fp)
 803e54c:	e17ff815 	stw	r5,-32(fp)
 803e550:	e1bff715 	stw	r6,-36(fp)
 803e554:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 803e558:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 803e55c:	d0a0b317 	ldw	r2,-32052(gp)
  
  if (alt_ticks_per_second ())
 803e560:	10003e26 	beq	r2,zero,803e65c <alt_alarm_start+0x120>
  {
    if (alarm)
 803e564:	e0bff917 	ldw	r2,-28(fp)
 803e568:	10003a26 	beq	r2,zero,803e654 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 803e56c:	e0bff917 	ldw	r2,-28(fp)
 803e570:	e0fff717 	ldw	r3,-36(fp)
 803e574:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 803e578:	e0bff917 	ldw	r2,-28(fp)
 803e57c:	e0fff617 	ldw	r3,-40(fp)
 803e580:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 803e584:	0005303a 	rdctl	r2,status
 803e588:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803e58c:	e0fffd17 	ldw	r3,-12(fp)
 803e590:	00bfff84 	movi	r2,-2
 803e594:	1884703a 	and	r2,r3,r2
 803e598:	1001703a 	wrctl	status,r2
  return context;
 803e59c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 803e5a0:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 803e5a4:	d0a0b417 	ldw	r2,-32048(gp)
      
      current_nticks = alt_nticks();
 803e5a8:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 803e5ac:	e0fff817 	ldw	r3,-32(fp)
 803e5b0:	e0bfff17 	ldw	r2,-4(fp)
 803e5b4:	1885883a 	add	r2,r3,r2
 803e5b8:	10c00044 	addi	r3,r2,1
 803e5bc:	e0bff917 	ldw	r2,-28(fp)
 803e5c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 803e5c4:	e0bff917 	ldw	r2,-28(fp)
 803e5c8:	10c00217 	ldw	r3,8(r2)
 803e5cc:	e0bfff17 	ldw	r2,-4(fp)
 803e5d0:	1880042e 	bgeu	r3,r2,803e5e4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 803e5d4:	e0bff917 	ldw	r2,-28(fp)
 803e5d8:	00c00044 	movi	r3,1
 803e5dc:	10c00405 	stb	r3,16(r2)
 803e5e0:	00000206 	br	803e5ec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 803e5e4:	e0bff917 	ldw	r2,-28(fp)
 803e5e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 803e5ec:	e0bff917 	ldw	r2,-28(fp)
 803e5f0:	d0e04704 	addi	r3,gp,-32484
 803e5f4:	e0fffb15 	stw	r3,-20(fp)
 803e5f8:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 803e5fc:	e0bffa17 	ldw	r2,-24(fp)
 803e600:	e0fffb17 	ldw	r3,-20(fp)
 803e604:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803e608:	e0bffb17 	ldw	r2,-20(fp)
 803e60c:	10c00017 	ldw	r3,0(r2)
 803e610:	e0bffa17 	ldw	r2,-24(fp)
 803e614:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 803e618:	e0bffb17 	ldw	r2,-20(fp)
 803e61c:	10800017 	ldw	r2,0(r2)
 803e620:	e0fffa17 	ldw	r3,-24(fp)
 803e624:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803e628:	e0bffb17 	ldw	r2,-20(fp)
 803e62c:	e0fffa17 	ldw	r3,-24(fp)
 803e630:	10c00015 	stw	r3,0(r2)
}
 803e634:	0001883a 	nop
 803e638:	e0bffe17 	ldw	r2,-8(fp)
 803e63c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803e640:	e0bffc17 	ldw	r2,-16(fp)
 803e644:	1001703a 	wrctl	status,r2
}
 803e648:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 803e64c:	0005883a 	mov	r2,zero
 803e650:	00000306 	br	803e660 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 803e654:	00bffa84 	movi	r2,-22
 803e658:	00000106 	br	803e660 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 803e65c:	00bfde84 	movi	r2,-134
  }
}
 803e660:	e037883a 	mov	sp,fp
 803e664:	df000017 	ldw	fp,0(sp)
 803e668:	dec00104 	addi	sp,sp,4
 803e66c:	f800283a 	ret

0803e670 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 803e670:	defffa04 	addi	sp,sp,-24
 803e674:	dfc00515 	stw	ra,20(sp)
 803e678:	df000415 	stw	fp,16(sp)
 803e67c:	df000404 	addi	fp,sp,16
 803e680:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 803e684:	008000c4 	movi	r2,3
 803e688:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 803e68c:	e0fffe17 	ldw	r3,-8(fp)
 803e690:	008003f4 	movhi	r2,15
 803e694:	10909004 	addi	r2,r2,16960
 803e698:	1885383a 	mul	r2,r3,r2
 803e69c:	100b883a 	mov	r5,r2
 803e6a0:	0100bef4 	movhi	r4,763
 803e6a4:	213c2004 	addi	r4,r4,-3968
 803e6a8:	8011fdc0 	call	8011fdc <__udivsi3>
  big_loops = us / (INT_MAX/
 803e6ac:	100b883a 	mov	r5,r2
 803e6b0:	01200034 	movhi	r4,32768
 803e6b4:	213fffc4 	addi	r4,r4,-1
 803e6b8:	8011fdc0 	call	8011fdc <__udivsi3>
 803e6bc:	100b883a 	mov	r5,r2
 803e6c0:	e13ffc17 	ldw	r4,-16(fp)
 803e6c4:	8011fdc0 	call	8011fdc <__udivsi3>
 803e6c8:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 803e6cc:	e0bffd17 	ldw	r2,-12(fp)
 803e6d0:	10002a26 	beq	r2,zero,803e77c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 803e6d4:	e03fff15 	stw	zero,-4(fp)
 803e6d8:	00001706 	br	803e738 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 803e6dc:	00a00034 	movhi	r2,32768
 803e6e0:	10bfffc4 	addi	r2,r2,-1
 803e6e4:	10bfffc4 	addi	r2,r2,-1
 803e6e8:	103ffe1e 	bne	r2,zero,803e6e4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 803e6ec:	e0fffe17 	ldw	r3,-8(fp)
 803e6f0:	008003f4 	movhi	r2,15
 803e6f4:	10909004 	addi	r2,r2,16960
 803e6f8:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
 803e6fc:	100b883a 	mov	r5,r2
 803e700:	0100bef4 	movhi	r4,763
 803e704:	213c2004 	addi	r4,r4,-3968
 803e708:	8011fdc0 	call	8011fdc <__udivsi3>
 803e70c:	100b883a 	mov	r5,r2
 803e710:	01200034 	movhi	r4,32768
 803e714:	213fffc4 	addi	r4,r4,-1
 803e718:	8011fdc0 	call	8011fdc <__udivsi3>
 803e71c:	1007883a 	mov	r3,r2
 803e720:	e0bffc17 	ldw	r2,-16(fp)
 803e724:	10c5c83a 	sub	r2,r2,r3
 803e728:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 803e72c:	e0bfff17 	ldw	r2,-4(fp)
 803e730:	10800044 	addi	r2,r2,1
 803e734:	e0bfff15 	stw	r2,-4(fp)
 803e738:	e0ffff17 	ldw	r3,-4(fp)
 803e73c:	e0bffd17 	ldw	r2,-12(fp)
 803e740:	18bfe616 	blt	r3,r2,803e6dc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803e744:	e0fffe17 	ldw	r3,-8(fp)
 803e748:	008003f4 	movhi	r2,15
 803e74c:	10909004 	addi	r2,r2,16960
 803e750:	1885383a 	mul	r2,r3,r2
 803e754:	100b883a 	mov	r5,r2
 803e758:	0100bef4 	movhi	r4,763
 803e75c:	213c2004 	addi	r4,r4,-3968
 803e760:	8011fdc0 	call	8011fdc <__udivsi3>
 803e764:	1007883a 	mov	r3,r2
 803e768:	e0bffc17 	ldw	r2,-16(fp)
 803e76c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 803e770:	10bfffc4 	addi	r2,r2,-1
 803e774:	103ffe1e 	bne	r2,zero,803e770 <alt_busy_sleep+0x100>
 803e778:	00000d06 	br	803e7b0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803e77c:	e0fffe17 	ldw	r3,-8(fp)
 803e780:	008003f4 	movhi	r2,15
 803e784:	10909004 	addi	r2,r2,16960
 803e788:	1885383a 	mul	r2,r3,r2
 803e78c:	100b883a 	mov	r5,r2
 803e790:	0100bef4 	movhi	r4,763
 803e794:	213c2004 	addi	r4,r4,-3968
 803e798:	8011fdc0 	call	8011fdc <__udivsi3>
 803e79c:	1007883a 	mov	r3,r2
 803e7a0:	e0bffc17 	ldw	r2,-16(fp)
 803e7a4:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 803e7a8:	10bfffc4 	addi	r2,r2,-1
 803e7ac:	00bffe16 	blt	zero,r2,803e7a8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 803e7b0:	0005883a 	mov	r2,zero
}
 803e7b4:	e037883a 	mov	sp,fp
 803e7b8:	dfc00117 	ldw	ra,4(sp)
 803e7bc:	df000017 	ldw	fp,0(sp)
 803e7c0:	dec00204 	addi	sp,sp,8
 803e7c4:	f800283a 	ret

0803e7c8 <alt_get_errno>:
{
 803e7c8:	defffe04 	addi	sp,sp,-8
 803e7cc:	dfc00115 	stw	ra,4(sp)
 803e7d0:	df000015 	stw	fp,0(sp)
 803e7d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803e7d8:	d0a04317 	ldw	r2,-32500(gp)
 803e7dc:	10000326 	beq	r2,zero,803e7ec <alt_get_errno+0x24>
 803e7e0:	d0a04317 	ldw	r2,-32500(gp)
 803e7e4:	103ee83a 	callr	r2
 803e7e8:	00000106 	br	803e7f0 <alt_get_errno+0x28>
 803e7ec:	d0a05a04 	addi	r2,gp,-32408
}
 803e7f0:	e037883a 	mov	sp,fp
 803e7f4:	dfc00117 	ldw	ra,4(sp)
 803e7f8:	df000017 	ldw	fp,0(sp)
 803e7fc:	dec00204 	addi	sp,sp,8
 803e800:	f800283a 	ret

0803e804 <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 803e804:	defffb04 	addi	sp,sp,-20
 803e808:	dfc00415 	stw	ra,16(sp)
 803e80c:	df000315 	stw	fp,12(sp)
 803e810:	df000304 	addi	fp,sp,12
 803e814:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 803e818:	e0bffd17 	ldw	r2,-12(fp)
 803e81c:	10000616 	blt	r2,zero,803e838 <alt_close+0x34>
 803e820:	e0bffd17 	ldw	r2,-12(fp)
 803e824:	10c00324 	muli	r3,r2,12
 803e828:	00820174 	movhi	r2,2053
 803e82c:	109b0f04 	addi	r2,r2,27708
 803e830:	1885883a 	add	r2,r3,r2
 803e834:	00000106 	br	803e83c <alt_close+0x38>
 803e838:	0005883a 	mov	r2,zero
 803e83c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 803e840:	e0bfff17 	ldw	r2,-4(fp)
 803e844:	10001926 	beq	r2,zero,803e8ac <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 803e848:	e0bfff17 	ldw	r2,-4(fp)
 803e84c:	10800017 	ldw	r2,0(r2)
 803e850:	10800417 	ldw	r2,16(r2)
 803e854:	10000626 	beq	r2,zero,803e870 <alt_close+0x6c>
 803e858:	e0bfff17 	ldw	r2,-4(fp)
 803e85c:	10800017 	ldw	r2,0(r2)
 803e860:	10800417 	ldw	r2,16(r2)
 803e864:	e13fff17 	ldw	r4,-4(fp)
 803e868:	103ee83a 	callr	r2
 803e86c:	00000106 	br	803e874 <alt_close+0x70>
 803e870:	0005883a 	mov	r2,zero
 803e874:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 803e878:	e13ffd17 	ldw	r4,-12(fp)
 803e87c:	803f6100 	call	803f610 <alt_release_fd>
    if (rval < 0)
 803e880:	e0bffe17 	ldw	r2,-8(fp)
 803e884:	1000070e 	bge	r2,zero,803e8a4 <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
 803e888:	803e7c80 	call	803e7c8 <alt_get_errno>
 803e88c:	1007883a 	mov	r3,r2
 803e890:	e0bffe17 	ldw	r2,-8(fp)
 803e894:	0085c83a 	sub	r2,zero,r2
 803e898:	18800015 	stw	r2,0(r3)
      return -1;
 803e89c:	00bfffc4 	movi	r2,-1
 803e8a0:	00000706 	br	803e8c0 <alt_close+0xbc>
    }
    return 0;
 803e8a4:	0005883a 	mov	r2,zero
 803e8a8:	00000506 	br	803e8c0 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 803e8ac:	803e7c80 	call	803e7c8 <alt_get_errno>
 803e8b0:	1007883a 	mov	r3,r2
 803e8b4:	00801444 	movi	r2,81
 803e8b8:	18800015 	stw	r2,0(r3)
    return -1;
 803e8bc:	00bfffc4 	movi	r2,-1
  }
}
 803e8c0:	e037883a 	mov	sp,fp
 803e8c4:	dfc00117 	ldw	ra,4(sp)
 803e8c8:	df000017 	ldw	fp,0(sp)
 803e8cc:	dec00204 	addi	sp,sp,8
 803e8d0:	f800283a 	ret

0803e8d4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 803e8d4:	defffb04 	addi	sp,sp,-20
 803e8d8:	df000415 	stw	fp,16(sp)
 803e8dc:	df000404 	addi	fp,sp,16
 803e8e0:	e13ffd15 	stw	r4,-12(fp)
 803e8e4:	e17ffc15 	stw	r5,-16(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 803e8e8:	e0fffd17 	ldw	r3,-12(fp)
 803e8ec:	e0bffc17 	ldw	r2,-16(fp)
 803e8f0:	1885883a 	add	r2,r3,r2
 803e8f4:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 803e8f8:	e0bffd17 	ldw	r2,-12(fp)
 803e8fc:	e0bfff15 	stw	r2,-4(fp)
 803e900:	00000506 	br	803e918 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 803e904:	e0bfff17 	ldw	r2,-4(fp)
 803e908:	1000001b 	flushda	0(r2)
  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 803e90c:	e0bfff17 	ldw	r2,-4(fp)
 803e910:	10800804 	addi	r2,r2,32
 803e914:	e0bfff15 	stw	r2,-4(fp)
 803e918:	e0ffff17 	ldw	r3,-4(fp)
 803e91c:	e0bffe17 	ldw	r2,-8(fp)
 803e920:	18bff836 	bltu	r3,r2,803e904 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 803e924:	e0bffd17 	ldw	r2,-12(fp)
 803e928:	108007cc 	andi	r2,r2,31
 803e92c:	10000226 	beq	r2,zero,803e938 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 803e930:	e0bfff17 	ldw	r2,-4(fp)
 803e934:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 803e938:	0001883a 	nop
 803e93c:	e037883a 	mov	sp,fp
 803e940:	df000017 	ldw	fp,0(sp)
 803e944:	dec00104 	addi	sp,sp,4
 803e948:	f800283a 	ret

0803e94c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 803e94c:	defffc04 	addi	sp,sp,-16
 803e950:	df000315 	stw	fp,12(sp)
 803e954:	df000304 	addi	fp,sp,12
 803e958:	e13fff15 	stw	r4,-4(fp)
 803e95c:	e17ffe15 	stw	r5,-8(fp)
 803e960:	e1bffd15 	stw	r6,-12(fp)
  return len;
 803e964:	e0bffd17 	ldw	r2,-12(fp)
}
 803e968:	e037883a 	mov	sp,fp
 803e96c:	df000017 	ldw	fp,0(sp)
 803e970:	dec00104 	addi	sp,sp,4
 803e974:	f800283a 	ret

0803e978 <alt_get_errno>:
{
 803e978:	defffe04 	addi	sp,sp,-8
 803e97c:	dfc00115 	stw	ra,4(sp)
 803e980:	df000015 	stw	fp,0(sp)
 803e984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803e988:	d0a04317 	ldw	r2,-32500(gp)
 803e98c:	10000326 	beq	r2,zero,803e99c <alt_get_errno+0x24>
 803e990:	d0a04317 	ldw	r2,-32500(gp)
 803e994:	103ee83a 	callr	r2
 803e998:	00000106 	br	803e9a0 <alt_get_errno+0x28>
 803e99c:	d0a05a04 	addi	r2,gp,-32408
}
 803e9a0:	e037883a 	mov	sp,fp
 803e9a4:	dfc00117 	ldw	ra,4(sp)
 803e9a8:	df000017 	ldw	fp,0(sp)
 803e9ac:	dec00204 	addi	sp,sp,8
 803e9b0:	f800283a 	ret

0803e9b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 803e9b4:	defffa04 	addi	sp,sp,-24
 803e9b8:	dfc00515 	stw	ra,20(sp)
 803e9bc:	df000415 	stw	fp,16(sp)
 803e9c0:	df000404 	addi	fp,sp,16
 803e9c4:	e13ffd15 	stw	r4,-12(fp)
 803e9c8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 803e9cc:	e0bffd17 	ldw	r2,-12(fp)
 803e9d0:	10000326 	beq	r2,zero,803e9e0 <alt_dev_llist_insert+0x2c>
 803e9d4:	e0bffd17 	ldw	r2,-12(fp)
 803e9d8:	10800217 	ldw	r2,8(r2)
 803e9dc:	1000061e 	bne	r2,zero,803e9f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 803e9e0:	803e9780 	call	803e978 <alt_get_errno>
 803e9e4:	1007883a 	mov	r3,r2
 803e9e8:	00800584 	movi	r2,22
 803e9ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 803e9f0:	00bffa84 	movi	r2,-22
 803e9f4:	00001406 	br	803ea48 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 803e9f8:	e0bffd17 	ldw	r2,-12(fp)
 803e9fc:	e0fffc17 	ldw	r3,-16(fp)
 803ea00:	e0ffff15 	stw	r3,-4(fp)
 803ea04:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 803ea08:	e0bffe17 	ldw	r2,-8(fp)
 803ea0c:	e0ffff17 	ldw	r3,-4(fp)
 803ea10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803ea14:	e0bfff17 	ldw	r2,-4(fp)
 803ea18:	10c00017 	ldw	r3,0(r2)
 803ea1c:	e0bffe17 	ldw	r2,-8(fp)
 803ea20:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 803ea24:	e0bfff17 	ldw	r2,-4(fp)
 803ea28:	10800017 	ldw	r2,0(r2)
 803ea2c:	e0fffe17 	ldw	r3,-8(fp)
 803ea30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803ea34:	e0bfff17 	ldw	r2,-4(fp)
 803ea38:	e0fffe17 	ldw	r3,-8(fp)
 803ea3c:	10c00015 	stw	r3,0(r2)
}
 803ea40:	0001883a 	nop

  return 0;  
 803ea44:	0005883a 	mov	r2,zero
}
 803ea48:	e037883a 	mov	sp,fp
 803ea4c:	dfc00117 	ldw	ra,4(sp)
 803ea50:	df000017 	ldw	fp,0(sp)
 803ea54:	dec00204 	addi	sp,sp,8
 803ea58:	f800283a 	ret

0803ea5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 803ea5c:	defffd04 	addi	sp,sp,-12
 803ea60:	dfc00215 	stw	ra,8(sp)
 803ea64:	df000115 	stw	fp,4(sp)
 803ea68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803ea6c:	00820174 	movhi	r2,2053
 803ea70:	10ba0904 	addi	r2,r2,-6108
 803ea74:	e0bfff15 	stw	r2,-4(fp)
 803ea78:	00000606 	br	803ea94 <_do_ctors+0x38>
        (*ctor) (); 
 803ea7c:	e0bfff17 	ldw	r2,-4(fp)
 803ea80:	10800017 	ldw	r2,0(r2)
 803ea84:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803ea88:	e0bfff17 	ldw	r2,-4(fp)
 803ea8c:	10bfff04 	addi	r2,r2,-4
 803ea90:	e0bfff15 	stw	r2,-4(fp)
 803ea94:	e0ffff17 	ldw	r3,-4(fp)
 803ea98:	00820174 	movhi	r2,2053
 803ea9c:	10ba0a04 	addi	r2,r2,-6104
 803eaa0:	18bff62e 	bgeu	r3,r2,803ea7c <_do_ctors+0x20>
}
 803eaa4:	0001883a 	nop
 803eaa8:	0001883a 	nop
 803eaac:	e037883a 	mov	sp,fp
 803eab0:	dfc00117 	ldw	ra,4(sp)
 803eab4:	df000017 	ldw	fp,0(sp)
 803eab8:	dec00204 	addi	sp,sp,8
 803eabc:	f800283a 	ret

0803eac0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 803eac0:	defffd04 	addi	sp,sp,-12
 803eac4:	dfc00215 	stw	ra,8(sp)
 803eac8:	df000115 	stw	fp,4(sp)
 803eacc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803ead0:	00820174 	movhi	r2,2053
 803ead4:	10ba0904 	addi	r2,r2,-6108
 803ead8:	e0bfff15 	stw	r2,-4(fp)
 803eadc:	00000606 	br	803eaf8 <_do_dtors+0x38>
        (*dtor) (); 
 803eae0:	e0bfff17 	ldw	r2,-4(fp)
 803eae4:	10800017 	ldw	r2,0(r2)
 803eae8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803eaec:	e0bfff17 	ldw	r2,-4(fp)
 803eaf0:	10bfff04 	addi	r2,r2,-4
 803eaf4:	e0bfff15 	stw	r2,-4(fp)
 803eaf8:	e0ffff17 	ldw	r3,-4(fp)
 803eafc:	00820174 	movhi	r2,2053
 803eb00:	10ba0a04 	addi	r2,r2,-6104
 803eb04:	18bff62e 	bgeu	r3,r2,803eae0 <_do_dtors+0x20>
}
 803eb08:	0001883a 	nop
 803eb0c:	0001883a 	nop
 803eb10:	e037883a 	mov	sp,fp
 803eb14:	dfc00117 	ldw	ra,4(sp)
 803eb18:	df000017 	ldw	fp,0(sp)
 803eb1c:	dec00204 	addi	sp,sp,8
 803eb20:	f800283a 	ret

0803eb24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 803eb24:	defffa04 	addi	sp,sp,-24
 803eb28:	dfc00515 	stw	ra,20(sp)
 803eb2c:	df000415 	stw	fp,16(sp)
 803eb30:	df000404 	addi	fp,sp,16
 803eb34:	e13ffd15 	stw	r4,-12(fp)
 803eb38:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 803eb3c:	e0bffc17 	ldw	r2,-16(fp)
 803eb40:	10800017 	ldw	r2,0(r2)
 803eb44:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 803eb48:	e13ffd17 	ldw	r4,-12(fp)
 803eb4c:	80044880 	call	8004488 <strlen>
 803eb50:	10800044 	addi	r2,r2,1
 803eb54:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 803eb58:	00000d06 	br	803eb90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 803eb5c:	e0bfff17 	ldw	r2,-4(fp)
 803eb60:	10800217 	ldw	r2,8(r2)
 803eb64:	e0fffe17 	ldw	r3,-8(fp)
 803eb68:	180d883a 	mov	r6,r3
 803eb6c:	e17ffd17 	ldw	r5,-12(fp)
 803eb70:	1009883a 	mov	r4,r2
 803eb74:	80037540 	call	8003754 <memcmp>
 803eb78:	1000021e 	bne	r2,zero,803eb84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 803eb7c:	e0bfff17 	ldw	r2,-4(fp)
 803eb80:	00000706 	br	803eba0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 803eb84:	e0bfff17 	ldw	r2,-4(fp)
 803eb88:	10800017 	ldw	r2,0(r2)
 803eb8c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 803eb90:	e0ffff17 	ldw	r3,-4(fp)
 803eb94:	e0bffc17 	ldw	r2,-16(fp)
 803eb98:	18bff01e 	bne	r3,r2,803eb5c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 803eb9c:	0005883a 	mov	r2,zero
}
 803eba0:	e037883a 	mov	sp,fp
 803eba4:	dfc00117 	ldw	ra,4(sp)
 803eba8:	df000017 	ldw	fp,0(sp)
 803ebac:	dec00204 	addi	sp,sp,8
 803ebb0:	f800283a 	ret

0803ebb4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 803ebb4:	defffc04 	addi	sp,sp,-16
 803ebb8:	dfc00315 	stw	ra,12(sp)
 803ebbc:	df000215 	stw	fp,8(sp)
 803ebc0:	df000204 	addi	fp,sp,8
 803ebc4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 803ebc8:	d1604404 	addi	r5,gp,-32496
 803ebcc:	e13ffe17 	ldw	r4,-8(fp)
 803ebd0:	803eb240 	call	803eb24 <alt_find_dev>
 803ebd4:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
 803ebd8:	e0bfff17 	ldw	r2,-4(fp)
 803ebdc:	10000926 	beq	r2,zero,803ec04 <alt_flash_open_dev+0x50>
 803ebe0:	e0bfff17 	ldw	r2,-4(fp)
 803ebe4:	10800317 	ldw	r2,12(r2)
 803ebe8:	10000626 	beq	r2,zero,803ec04 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 803ebec:	e0bfff17 	ldw	r2,-4(fp)
 803ebf0:	10800317 	ldw	r2,12(r2)
 803ebf4:	e17ffe17 	ldw	r5,-8(fp)
 803ebf8:	e13fff17 	ldw	r4,-4(fp)
 803ebfc:	103ee83a 	callr	r2
 803ec00:	00000106 	br	803ec08 <alt_flash_open_dev+0x54>
  }

  return dev;
 803ec04:	e0bfff17 	ldw	r2,-4(fp)
}
 803ec08:	e037883a 	mov	sp,fp
 803ec0c:	dfc00117 	ldw	ra,4(sp)
 803ec10:	df000017 	ldw	fp,0(sp)
 803ec14:	dec00204 	addi	sp,sp,8
 803ec18:	f800283a 	ret

0803ec1c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 803ec1c:	defffd04 	addi	sp,sp,-12
 803ec20:	dfc00215 	stw	ra,8(sp)
 803ec24:	df000115 	stw	fp,4(sp)
 803ec28:	df000104 	addi	fp,sp,4
 803ec2c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 803ec30:	e0bfff17 	ldw	r2,-4(fp)
 803ec34:	10000826 	beq	r2,zero,803ec58 <alt_flash_close_dev+0x3c>
 803ec38:	e0bfff17 	ldw	r2,-4(fp)
 803ec3c:	10800417 	ldw	r2,16(r2)
 803ec40:	10000526 	beq	r2,zero,803ec58 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 803ec44:	e0bfff17 	ldw	r2,-4(fp)
 803ec48:	10800417 	ldw	r2,16(r2)
 803ec4c:	e13fff17 	ldw	r4,-4(fp)
 803ec50:	103ee83a 	callr	r2
  }
  return;
 803ec54:	0001883a 	nop
 803ec58:	0001883a 	nop
}
 803ec5c:	e037883a 	mov	sp,fp
 803ec60:	dfc00117 	ldw	ra,4(sp)
 803ec64:	df000017 	ldw	fp,0(sp)
 803ec68:	dec00204 	addi	sp,sp,8
 803ec6c:	f800283a 	ret

0803ec70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803ec70:	defff904 	addi	sp,sp,-28
 803ec74:	dfc00615 	stw	ra,24(sp)
 803ec78:	df000515 	stw	fp,20(sp)
 803ec7c:	df000504 	addi	fp,sp,20
 803ec80:	e13fff15 	stw	r4,-4(fp)
 803ec84:	e17ffe15 	stw	r5,-8(fp)
 803ec88:	e1bffd15 	stw	r6,-12(fp)
 803ec8c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 803ec90:	e0800217 	ldw	r2,8(fp)
 803ec94:	d8800015 	stw	r2,0(sp)
 803ec98:	e1fffc17 	ldw	r7,-16(fp)
 803ec9c:	e1bffd17 	ldw	r6,-12(fp)
 803eca0:	e17ffe17 	ldw	r5,-8(fp)
 803eca4:	e13fff17 	ldw	r4,-4(fp)
 803eca8:	803ee200 	call	803ee20 <alt_iic_isr_register>
}  
 803ecac:	e037883a 	mov	sp,fp
 803ecb0:	dfc00117 	ldw	ra,4(sp)
 803ecb4:	df000017 	ldw	fp,0(sp)
 803ecb8:	dec00204 	addi	sp,sp,8
 803ecbc:	f800283a 	ret

0803ecc0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 803ecc0:	defff904 	addi	sp,sp,-28
 803ecc4:	df000615 	stw	fp,24(sp)
 803ecc8:	df000604 	addi	fp,sp,24
 803eccc:	e13ffb15 	stw	r4,-20(fp)
 803ecd0:	e17ffa15 	stw	r5,-24(fp)
 803ecd4:	e0bffa17 	ldw	r2,-24(fp)
 803ecd8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 803ecdc:	0005303a 	rdctl	r2,status
 803ece0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803ece4:	e0fffe17 	ldw	r3,-8(fp)
 803ece8:	00bfff84 	movi	r2,-2
 803ecec:	1884703a 	and	r2,r3,r2
 803ecf0:	1001703a 	wrctl	status,r2
  return context;
 803ecf4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 803ecf8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 803ecfc:	00c00044 	movi	r3,1
 803ed00:	e0bfff17 	ldw	r2,-4(fp)
 803ed04:	1884983a 	sll	r2,r3,r2
 803ed08:	1007883a 	mov	r3,r2
 803ed0c:	d0a0b217 	ldw	r2,-32056(gp)
 803ed10:	1884b03a 	or	r2,r3,r2
 803ed14:	d0a0b215 	stw	r2,-32056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803ed18:	d0a0b217 	ldw	r2,-32056(gp)
 803ed1c:	100170fa 	wrctl	ienable,r2
 803ed20:	e0bffd17 	ldw	r2,-12(fp)
 803ed24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803ed28:	e0bffc17 	ldw	r2,-16(fp)
 803ed2c:	1001703a 	wrctl	status,r2
}
 803ed30:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 803ed34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 803ed38:	e037883a 	mov	sp,fp
 803ed3c:	df000017 	ldw	fp,0(sp)
 803ed40:	dec00104 	addi	sp,sp,4
 803ed44:	f800283a 	ret

0803ed48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 803ed48:	defff904 	addi	sp,sp,-28
 803ed4c:	df000615 	stw	fp,24(sp)
 803ed50:	df000604 	addi	fp,sp,24
 803ed54:	e13ffb15 	stw	r4,-20(fp)
 803ed58:	e17ffa15 	stw	r5,-24(fp)
 803ed5c:	e0bffa17 	ldw	r2,-24(fp)
 803ed60:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 803ed64:	0005303a 	rdctl	r2,status
 803ed68:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803ed6c:	e0fffe17 	ldw	r3,-8(fp)
 803ed70:	00bfff84 	movi	r2,-2
 803ed74:	1884703a 	and	r2,r3,r2
 803ed78:	1001703a 	wrctl	status,r2
  return context;
 803ed7c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 803ed80:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 803ed84:	00c00044 	movi	r3,1
 803ed88:	e0bfff17 	ldw	r2,-4(fp)
 803ed8c:	1884983a 	sll	r2,r3,r2
 803ed90:	0084303a 	nor	r2,zero,r2
 803ed94:	1007883a 	mov	r3,r2
 803ed98:	d0a0b217 	ldw	r2,-32056(gp)
 803ed9c:	1884703a 	and	r2,r3,r2
 803eda0:	d0a0b215 	stw	r2,-32056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803eda4:	d0a0b217 	ldw	r2,-32056(gp)
 803eda8:	100170fa 	wrctl	ienable,r2
 803edac:	e0bffd17 	ldw	r2,-12(fp)
 803edb0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803edb4:	e0bffc17 	ldw	r2,-16(fp)
 803edb8:	1001703a 	wrctl	status,r2
}
 803edbc:	0001883a 	nop
  return 0;
 803edc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 803edc4:	e037883a 	mov	sp,fp
 803edc8:	df000017 	ldw	fp,0(sp)
 803edcc:	dec00104 	addi	sp,sp,4
 803edd0:	f800283a 	ret

0803edd4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 803edd4:	defffc04 	addi	sp,sp,-16
 803edd8:	df000315 	stw	fp,12(sp)
 803eddc:	df000304 	addi	fp,sp,12
 803ede0:	e13ffe15 	stw	r4,-8(fp)
 803ede4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 803ede8:	000530fa 	rdctl	r2,ienable
 803edec:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 803edf0:	00c00044 	movi	r3,1
 803edf4:	e0bffd17 	ldw	r2,-12(fp)
 803edf8:	1884983a 	sll	r2,r3,r2
 803edfc:	1007883a 	mov	r3,r2
 803ee00:	e0bfff17 	ldw	r2,-4(fp)
 803ee04:	1884703a 	and	r2,r3,r2
 803ee08:	1004c03a 	cmpne	r2,r2,zero
 803ee0c:	10803fcc 	andi	r2,r2,255
}
 803ee10:	e037883a 	mov	sp,fp
 803ee14:	df000017 	ldw	fp,0(sp)
 803ee18:	dec00104 	addi	sp,sp,4
 803ee1c:	f800283a 	ret

0803ee20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803ee20:	defff504 	addi	sp,sp,-44
 803ee24:	dfc00a15 	stw	ra,40(sp)
 803ee28:	df000915 	stw	fp,36(sp)
 803ee2c:	df000904 	addi	fp,sp,36
 803ee30:	e13ffa15 	stw	r4,-24(fp)
 803ee34:	e17ff915 	stw	r5,-28(fp)
 803ee38:	e1bff815 	stw	r6,-32(fp)
 803ee3c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 803ee40:	00bffa84 	movi	r2,-22
 803ee44:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 803ee48:	e0bff917 	ldw	r2,-28(fp)
 803ee4c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 803ee50:	e0bffe17 	ldw	r2,-8(fp)
 803ee54:	10800808 	cmpgei	r2,r2,32
 803ee58:	1000251e 	bne	r2,zero,803eef0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 803ee5c:	0005303a 	rdctl	r2,status
 803ee60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803ee64:	e0fffc17 	ldw	r3,-16(fp)
 803ee68:	00bfff84 	movi	r2,-2
 803ee6c:	1884703a 	and	r2,r3,r2
 803ee70:	1001703a 	wrctl	status,r2
  return context;
 803ee74:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 803ee78:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 803ee7c:	e0bffe17 	ldw	r2,-8(fp)
 803ee80:	100890fa 	slli	r4,r2,3
 803ee84:	e0fff817 	ldw	r3,-32(fp)
 803ee88:	008201b4 	movhi	r2,2054
 803ee8c:	2085883a 	add	r2,r4,r2
 803ee90:	10ff7615 	stw	r3,-552(r2)
    alt_irq[id].context = isr_context;
 803ee94:	e0bffe17 	ldw	r2,-8(fp)
 803ee98:	100890fa 	slli	r4,r2,3
 803ee9c:	e0fff717 	ldw	r3,-36(fp)
 803eea0:	008201b4 	movhi	r2,2054
 803eea4:	2085883a 	add	r2,r4,r2
 803eea8:	10ff7715 	stw	r3,-548(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 803eeac:	e0bff817 	ldw	r2,-32(fp)
 803eeb0:	10000526 	beq	r2,zero,803eec8 <alt_iic_isr_register+0xa8>
 803eeb4:	e0bffe17 	ldw	r2,-8(fp)
 803eeb8:	100b883a 	mov	r5,r2
 803eebc:	e13ffa17 	ldw	r4,-24(fp)
 803eec0:	803ecc00 	call	803ecc0 <alt_ic_irq_enable>
 803eec4:	00000406 	br	803eed8 <alt_iic_isr_register+0xb8>
 803eec8:	e0bffe17 	ldw	r2,-8(fp)
 803eecc:	100b883a 	mov	r5,r2
 803eed0:	e13ffa17 	ldw	r4,-24(fp)
 803eed4:	803ed480 	call	803ed48 <alt_ic_irq_disable>
 803eed8:	e0bfff15 	stw	r2,-4(fp)
 803eedc:	e0bffd17 	ldw	r2,-12(fp)
 803eee0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 803eee4:	e0bffb17 	ldw	r2,-20(fp)
 803eee8:	1001703a 	wrctl	status,r2
}
 803eeec:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 803eef0:	e0bfff17 	ldw	r2,-4(fp)
}
 803eef4:	e037883a 	mov	sp,fp
 803eef8:	dfc00117 	ldw	ra,4(sp)
 803eefc:	df000017 	ldw	fp,0(sp)
 803ef00:	dec00204 	addi	sp,sp,8
 803ef04:	f800283a 	ret

0803ef08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 803ef08:	defff904 	addi	sp,sp,-28
 803ef0c:	dfc00615 	stw	ra,24(sp)
 803ef10:	df000515 	stw	fp,20(sp)
 803ef14:	df000504 	addi	fp,sp,20
 803ef18:	e13ffe15 	stw	r4,-8(fp)
 803ef1c:	e17ffd15 	stw	r5,-12(fp)
 803ef20:	e1bffc15 	stw	r6,-16(fp)
 803ef24:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 803ef28:	e1bffb17 	ldw	r6,-20(fp)
 803ef2c:	e17ffc17 	ldw	r5,-16(fp)
 803ef30:	e13ffd17 	ldw	r4,-12(fp)
 803ef34:	803f1280 	call	803f128 <open>
 803ef38:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 803ef3c:	e0bfff17 	ldw	r2,-4(fp)
 803ef40:	10001716 	blt	r2,zero,803efa0 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
 803ef44:	e0bfff17 	ldw	r2,-4(fp)
 803ef48:	10c00324 	muli	r3,r2,12
 803ef4c:	00820174 	movhi	r2,2053
 803ef50:	1885883a 	add	r2,r3,r2
 803ef54:	10db0f17 	ldw	r3,27708(r2)
 803ef58:	e0bffe17 	ldw	r2,-8(fp)
 803ef5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 803ef60:	e0bfff17 	ldw	r2,-4(fp)
 803ef64:	10c00324 	muli	r3,r2,12
 803ef68:	00820174 	movhi	r2,2053
 803ef6c:	1885883a 	add	r2,r3,r2
 803ef70:	10db1017 	ldw	r3,27712(r2)
 803ef74:	e0bffe17 	ldw	r2,-8(fp)
 803ef78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 803ef7c:	e0bfff17 	ldw	r2,-4(fp)
 803ef80:	10c00324 	muli	r3,r2,12
 803ef84:	00820174 	movhi	r2,2053
 803ef88:	1885883a 	add	r2,r3,r2
 803ef8c:	10db1117 	ldw	r3,27716(r2)
 803ef90:	e0bffe17 	ldw	r2,-8(fp)
 803ef94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 803ef98:	e13fff17 	ldw	r4,-4(fp)
 803ef9c:	803f6100 	call	803f610 <alt_release_fd>
  }
} 
 803efa0:	0001883a 	nop
 803efa4:	e037883a 	mov	sp,fp
 803efa8:	dfc00117 	ldw	ra,4(sp)
 803efac:	df000017 	ldw	fp,0(sp)
 803efb0:	dec00204 	addi	sp,sp,8
 803efb4:	f800283a 	ret

0803efb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 803efb8:	defffb04 	addi	sp,sp,-20
 803efbc:	dfc00415 	stw	ra,16(sp)
 803efc0:	df000315 	stw	fp,12(sp)
 803efc4:	df000304 	addi	fp,sp,12
 803efc8:	e13fff15 	stw	r4,-4(fp)
 803efcc:	e17ffe15 	stw	r5,-8(fp)
 803efd0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 803efd4:	01c07fc4 	movi	r7,511
 803efd8:	01800044 	movi	r6,1
 803efdc:	e17fff17 	ldw	r5,-4(fp)
 803efe0:	01020174 	movhi	r4,2053
 803efe4:	211b1204 	addi	r4,r4,27720
 803efe8:	803ef080 	call	803ef08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 803efec:	01c07fc4 	movi	r7,511
 803eff0:	000d883a 	mov	r6,zero
 803eff4:	e17ffe17 	ldw	r5,-8(fp)
 803eff8:	01020174 	movhi	r4,2053
 803effc:	211b0f04 	addi	r4,r4,27708
 803f000:	803ef080 	call	803ef08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 803f004:	01c07fc4 	movi	r7,511
 803f008:	01800044 	movi	r6,1
 803f00c:	e17ffd17 	ldw	r5,-12(fp)
 803f010:	01020174 	movhi	r4,2053
 803f014:	211b1504 	addi	r4,r4,27732
 803f018:	803ef080 	call	803ef08 <alt_open_fd>
}  
 803f01c:	0001883a 	nop
 803f020:	e037883a 	mov	sp,fp
 803f024:	dfc00117 	ldw	ra,4(sp)
 803f028:	df000017 	ldw	fp,0(sp)
 803f02c:	dec00204 	addi	sp,sp,8
 803f030:	f800283a 	ret

0803f034 <alt_get_errno>:
{
 803f034:	defffe04 	addi	sp,sp,-8
 803f038:	dfc00115 	stw	ra,4(sp)
 803f03c:	df000015 	stw	fp,0(sp)
 803f040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803f044:	d0a04317 	ldw	r2,-32500(gp)
 803f048:	10000326 	beq	r2,zero,803f058 <alt_get_errno+0x24>
 803f04c:	d0a04317 	ldw	r2,-32500(gp)
 803f050:	103ee83a 	callr	r2
 803f054:	00000106 	br	803f05c <alt_get_errno+0x28>
 803f058:	d0a05a04 	addi	r2,gp,-32408
}
 803f05c:	e037883a 	mov	sp,fp
 803f060:	dfc00117 	ldw	ra,4(sp)
 803f064:	df000017 	ldw	fp,0(sp)
 803f068:	dec00204 	addi	sp,sp,8
 803f06c:	f800283a 	ret

0803f070 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 803f070:	defffd04 	addi	sp,sp,-12
 803f074:	df000215 	stw	fp,8(sp)
 803f078:	df000204 	addi	fp,sp,8
 803f07c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 803f080:	e0bffe17 	ldw	r2,-8(fp)
 803f084:	10800217 	ldw	r2,8(r2)
 803f088:	10d00034 	orhi	r3,r2,16384
 803f08c:	e0bffe17 	ldw	r2,-8(fp)
 803f090:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 803f094:	e03fff15 	stw	zero,-4(fp)
 803f098:	00001a06 	br	803f104 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 803f09c:	e0bfff17 	ldw	r2,-4(fp)
 803f0a0:	10c00324 	muli	r3,r2,12
 803f0a4:	00820174 	movhi	r2,2053
 803f0a8:	1885883a 	add	r2,r3,r2
 803f0ac:	10db0f17 	ldw	r3,27708(r2)
 803f0b0:	e0bffe17 	ldw	r2,-8(fp)
 803f0b4:	10800017 	ldw	r2,0(r2)
 803f0b8:	18800f1e 	bne	r3,r2,803f0f8 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803f0bc:	e0bfff17 	ldw	r2,-4(fp)
 803f0c0:	10c00324 	muli	r3,r2,12
 803f0c4:	00820174 	movhi	r2,2053
 803f0c8:	1885883a 	add	r2,r3,r2
 803f0cc:	109b1117 	ldw	r2,27716(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
 803f0d0:	1000090e 	bge	r2,zero,803f0f8 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
 803f0d4:	e0bfff17 	ldw	r2,-4(fp)
 803f0d8:	10c00324 	muli	r3,r2,12
 803f0dc:	00820174 	movhi	r2,2053
 803f0e0:	109b0f04 	addi	r2,r2,27708
 803f0e4:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803f0e8:	e0fffe17 	ldw	r3,-8(fp)
 803f0ec:	18800226 	beq	r3,r2,803f0f8 <alt_file_locked+0x88>
    {
      return -EACCES;
 803f0f0:	00bffcc4 	movi	r2,-13
 803f0f4:	00000806 	br	803f118 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
 803f0f8:	e0bfff17 	ldw	r2,-4(fp)
 803f0fc:	10800044 	addi	r2,r2,1
 803f100:	e0bfff15 	stw	r2,-4(fp)
 803f104:	d0a04217 	ldw	r2,-32504(gp)
 803f108:	1007883a 	mov	r3,r2
 803f10c:	e0bfff17 	ldw	r2,-4(fp)
 803f110:	18bfe22e 	bgeu	r3,r2,803f09c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 803f114:	0005883a 	mov	r2,zero
}
 803f118:	e037883a 	mov	sp,fp
 803f11c:	df000017 	ldw	fp,0(sp)
 803f120:	dec00104 	addi	sp,sp,4
 803f124:	f800283a 	ret

0803f128 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 803f128:	defff604 	addi	sp,sp,-40
 803f12c:	dfc00915 	stw	ra,36(sp)
 803f130:	df000815 	stw	fp,32(sp)
 803f134:	df000804 	addi	fp,sp,32
 803f138:	e13ffa15 	stw	r4,-24(fp)
 803f13c:	e17ff915 	stw	r5,-28(fp)
 803f140:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 803f144:	00bfffc4 	movi	r2,-1
 803f148:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 803f14c:	00bffb44 	movi	r2,-19
 803f150:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 803f154:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 803f158:	d1604004 	addi	r5,gp,-32512
 803f15c:	e13ffa17 	ldw	r4,-24(fp)
 803f160:	803eb240 	call	803eb24 <alt_find_dev>
 803f164:	e0bfff15 	stw	r2,-4(fp)
 803f168:	e0bfff17 	ldw	r2,-4(fp)
 803f16c:	1000051e 	bne	r2,zero,803f184 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 803f170:	e13ffa17 	ldw	r4,-24(fp)
 803f174:	804cb100 	call	804cb10 <alt_find_file>
 803f178:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 803f17c:	00800044 	movi	r2,1
 803f180:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 803f184:	e0bfff17 	ldw	r2,-4(fp)
 803f188:	10002926 	beq	r2,zero,803f230 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 803f18c:	e13fff17 	ldw	r4,-4(fp)
 803f190:	804cc180 	call	804cc18 <alt_get_fd>
 803f194:	e0bffe15 	stw	r2,-8(fp)
 803f198:	e0bffe17 	ldw	r2,-8(fp)
 803f19c:	1000030e 	bge	r2,zero,803f1ac <open+0x84>
    {
      status = index;
 803f1a0:	e0bffe17 	ldw	r2,-8(fp)
 803f1a4:	e0bffd15 	stw	r2,-12(fp)
 803f1a8:	00002306 	br	803f238 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 803f1ac:	e0bffe17 	ldw	r2,-8(fp)
 803f1b0:	10c00324 	muli	r3,r2,12
 803f1b4:	00820174 	movhi	r2,2053
 803f1b8:	109b0f04 	addi	r2,r2,27708
 803f1bc:	1885883a 	add	r2,r3,r2
 803f1c0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 803f1c4:	e0fff917 	ldw	r3,-28(fp)
 803f1c8:	00900034 	movhi	r2,16384
 803f1cc:	10bfffc4 	addi	r2,r2,-1
 803f1d0:	1886703a 	and	r3,r3,r2
 803f1d4:	e0bffb17 	ldw	r2,-20(fp)
 803f1d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 803f1dc:	e0bffc17 	ldw	r2,-16(fp)
 803f1e0:	1000051e 	bne	r2,zero,803f1f8 <open+0xd0>
 803f1e4:	e13ffb17 	ldw	r4,-20(fp)
 803f1e8:	803f0700 	call	803f070 <alt_file_locked>
 803f1ec:	e0bffd15 	stw	r2,-12(fp)
 803f1f0:	e0bffd17 	ldw	r2,-12(fp)
 803f1f4:	10001016 	blt	r2,zero,803f238 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 803f1f8:	e0bfff17 	ldw	r2,-4(fp)
 803f1fc:	10800317 	ldw	r2,12(r2)
 803f200:	10000826 	beq	r2,zero,803f224 <open+0xfc>
 803f204:	e0bfff17 	ldw	r2,-4(fp)
 803f208:	10800317 	ldw	r2,12(r2)
 803f20c:	e1fff817 	ldw	r7,-32(fp)
 803f210:	e1bff917 	ldw	r6,-28(fp)
 803f214:	e17ffa17 	ldw	r5,-24(fp)
 803f218:	e13ffb17 	ldw	r4,-20(fp)
 803f21c:	103ee83a 	callr	r2
 803f220:	00000106 	br	803f228 <open+0x100>
 803f224:	0005883a 	mov	r2,zero
 803f228:	e0bffd15 	stw	r2,-12(fp)
 803f22c:	00000206 	br	803f238 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 803f230:	00bffb44 	movi	r2,-19
 803f234:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 803f238:	e0bffd17 	ldw	r2,-12(fp)
 803f23c:	1000090e 	bge	r2,zero,803f264 <open+0x13c>
  {
    alt_release_fd (index);  
 803f240:	e13ffe17 	ldw	r4,-8(fp)
 803f244:	803f6100 	call	803f610 <alt_release_fd>
    ALT_ERRNO = -status;
 803f248:	803f0340 	call	803f034 <alt_get_errno>
 803f24c:	1007883a 	mov	r3,r2
 803f250:	e0bffd17 	ldw	r2,-12(fp)
 803f254:	0085c83a 	sub	r2,zero,r2
 803f258:	18800015 	stw	r2,0(r3)
    return -1;
 803f25c:	00bfffc4 	movi	r2,-1
 803f260:	00000106 	br	803f268 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 803f264:	e0bffe17 	ldw	r2,-8(fp)
}
 803f268:	e037883a 	mov	sp,fp
 803f26c:	dfc00117 	ldw	ra,4(sp)
 803f270:	df000017 	ldw	fp,0(sp)
 803f274:	dec00204 	addi	sp,sp,8
 803f278:	f800283a 	ret

0803f27c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 803f27c:	defff204 	addi	sp,sp,-56
 803f280:	dfc00a15 	stw	ra,40(sp)
 803f284:	df000915 	stw	fp,36(sp)
 803f288:	df000904 	addi	fp,sp,36
 803f28c:	e13ff715 	stw	r4,-36(fp)
 803f290:	e1400215 	stw	r5,8(fp)
 803f294:	e1800315 	stw	r6,12(fp)
 803f298:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 803f29c:	e0800204 	addi	r2,fp,8
 803f2a0:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 803f2a4:	e0bff717 	ldw	r2,-36(fp)
 803f2a8:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
 803f2ac:	00006f06 	br	803f46c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 803f2b0:	e0bffec7 	ldb	r2,-5(fp)
 803f2b4:	10800960 	cmpeqi	r2,r2,37
 803f2b8:	1000041e 	bne	r2,zero,803f2cc <alt_printf+0x50>
        {
            alt_putchar(c);
 803f2bc:	e0bffec7 	ldb	r2,-5(fp)
 803f2c0:	1009883a 	mov	r4,r2
 803f2c4:	803f4a80 	call	803f4a8 <alt_putchar>
 803f2c8:	00006806 	br	803f46c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 803f2cc:	e0bfff17 	ldw	r2,-4(fp)
 803f2d0:	10c00044 	addi	r3,r2,1
 803f2d4:	e0ffff15 	stw	r3,-4(fp)
 803f2d8:	10800003 	ldbu	r2,0(r2)
 803f2dc:	e0bffec5 	stb	r2,-5(fp)
 803f2e0:	e0bffec7 	ldb	r2,-5(fp)
 803f2e4:	10006926 	beq	r2,zero,803f48c <alt_printf+0x210>
            {
                if (c == '%')
 803f2e8:	e0bffec7 	ldb	r2,-5(fp)
 803f2ec:	10800958 	cmpnei	r2,r2,37
 803f2f0:	1000041e 	bne	r2,zero,803f304 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 803f2f4:	e0bffec7 	ldb	r2,-5(fp)
 803f2f8:	1009883a 	mov	r4,r2
 803f2fc:	803f4a80 	call	803f4a8 <alt_putchar>
 803f300:	00005a06 	br	803f46c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 803f304:	e0bffec7 	ldb	r2,-5(fp)
 803f308:	108018d8 	cmpnei	r2,r2,99
 803f30c:	1000081e 	bne	r2,zero,803f330 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 803f310:	e0bff817 	ldw	r2,-32(fp)
 803f314:	10c00104 	addi	r3,r2,4
 803f318:	e0fff815 	stw	r3,-32(fp)
 803f31c:	10800017 	ldw	r2,0(r2)
 803f320:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
 803f324:	e13ff917 	ldw	r4,-28(fp)
 803f328:	803f4a80 	call	803f4a8 <alt_putchar>
 803f32c:	00004f06 	br	803f46c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 803f330:	e0bffec7 	ldb	r2,-5(fp)
 803f334:	10801e18 	cmpnei	r2,r2,120
 803f338:	1000341e 	bne	r2,zero,803f40c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 803f33c:	e0bff817 	ldw	r2,-32(fp)
 803f340:	10c00104 	addi	r3,r2,4
 803f344:	e0fff815 	stw	r3,-32(fp)
 803f348:	10800017 	ldw	r2,0(r2)
 803f34c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 803f350:	e0bffb17 	ldw	r2,-20(fp)
 803f354:	1000031e 	bne	r2,zero,803f364 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 803f358:	01000c04 	movi	r4,48
 803f35c:	803f4a80 	call	803f4a8 <alt_putchar>
                        continue;
 803f360:	00004206 	br	803f46c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 803f364:	00800704 	movi	r2,28
 803f368:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 803f36c:	00000306 	br	803f37c <alt_printf+0x100>
                        digit_shift -= 4;
 803f370:	e0bffd17 	ldw	r2,-12(fp)
 803f374:	10bfff04 	addi	r2,r2,-4
 803f378:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 803f37c:	00c003c4 	movi	r3,15
 803f380:	e0bffd17 	ldw	r2,-12(fp)
 803f384:	1884983a 	sll	r2,r3,r2
 803f388:	1007883a 	mov	r3,r2
 803f38c:	e0bffb17 	ldw	r2,-20(fp)
 803f390:	1884703a 	and	r2,r3,r2
 803f394:	103ff626 	beq	r2,zero,803f370 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 803f398:	00001906 	br	803f400 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 803f39c:	00c003c4 	movi	r3,15
 803f3a0:	e0bffd17 	ldw	r2,-12(fp)
 803f3a4:	1884983a 	sll	r2,r3,r2
 803f3a8:	1007883a 	mov	r3,r2
 803f3ac:	e0bffb17 	ldw	r2,-20(fp)
 803f3b0:	1886703a 	and	r3,r3,r2
 803f3b4:	e0bffd17 	ldw	r2,-12(fp)
 803f3b8:	1884d83a 	srl	r2,r3,r2
 803f3bc:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
 803f3c0:	e0bffa17 	ldw	r2,-24(fp)
 803f3c4:	108002a8 	cmpgeui	r2,r2,10
 803f3c8:	1000041e 	bne	r2,zero,803f3dc <alt_printf+0x160>
                            c = '0' + digit;
 803f3cc:	e0bffa17 	ldw	r2,-24(fp)
 803f3d0:	10800c04 	addi	r2,r2,48
 803f3d4:	e0bffec5 	stb	r2,-5(fp)
 803f3d8:	00000306 	br	803f3e8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 803f3dc:	e0bffa17 	ldw	r2,-24(fp)
 803f3e0:	108015c4 	addi	r2,r2,87
 803f3e4:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
 803f3e8:	e0bffec7 	ldb	r2,-5(fp)
 803f3ec:	1009883a 	mov	r4,r2
 803f3f0:	803f4a80 	call	803f4a8 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
 803f3f4:	e0bffd17 	ldw	r2,-12(fp)
 803f3f8:	10bfff04 	addi	r2,r2,-4
 803f3fc:	e0bffd15 	stw	r2,-12(fp)
 803f400:	e0bffd17 	ldw	r2,-12(fp)
 803f404:	103fe50e 	bge	r2,zero,803f39c <alt_printf+0x120>
 803f408:	00001806 	br	803f46c <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
 803f40c:	e0bffec7 	ldb	r2,-5(fp)
 803f410:	10801cd8 	cmpnei	r2,r2,115
 803f414:	1000151e 	bne	r2,zero,803f46c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 803f418:	e0bff817 	ldw	r2,-32(fp)
 803f41c:	10c00104 	addi	r3,r2,4
 803f420:	e0fff815 	stw	r3,-32(fp)
 803f424:	10800017 	ldw	r2,0(r2)
 803f428:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
 803f42c:	00000906 	br	803f454 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 803f430:	e0bffc17 	ldw	r2,-16(fp)
 803f434:	10c00044 	addi	r3,r2,1
 803f438:	e0fffc15 	stw	r3,-16(fp)
 803f43c:	10800003 	ldbu	r2,0(r2)
 803f440:	10803fcc 	andi	r2,r2,255
 803f444:	1080201c 	xori	r2,r2,128
 803f448:	10bfe004 	addi	r2,r2,-128
 803f44c:	1009883a 	mov	r4,r2
 803f450:	803f4a80 	call	803f4a8 <alt_putchar>
                    while(*s)
 803f454:	e0bffc17 	ldw	r2,-16(fp)
 803f458:	10800003 	ldbu	r2,0(r2)
 803f45c:	10803fcc 	andi	r2,r2,255
 803f460:	1080201c 	xori	r2,r2,128
 803f464:	10bfe004 	addi	r2,r2,-128
 803f468:	103ff11e 	bne	r2,zero,803f430 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
 803f46c:	e0bfff17 	ldw	r2,-4(fp)
 803f470:	10c00044 	addi	r3,r2,1
 803f474:	e0ffff15 	stw	r3,-4(fp)
 803f478:	10800003 	ldbu	r2,0(r2)
 803f47c:	e0bffec5 	stb	r2,-5(fp)
 803f480:	e0bffec7 	ldb	r2,-5(fp)
 803f484:	103f8a1e 	bne	r2,zero,803f2b0 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 803f488:	00000106 	br	803f490 <alt_printf+0x214>
                break;
 803f48c:	0001883a 	nop
}
 803f490:	0001883a 	nop
 803f494:	e037883a 	mov	sp,fp
 803f498:	dfc00117 	ldw	ra,4(sp)
 803f49c:	df000017 	ldw	fp,0(sp)
 803f4a0:	dec00504 	addi	sp,sp,20
 803f4a4:	f800283a 	ret

0803f4a8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 803f4a8:	defffd04 	addi	sp,sp,-12
 803f4ac:	dfc00215 	stw	ra,8(sp)
 803f4b0:	df000115 	stw	fp,4(sp)
 803f4b4:	df000104 	addi	fp,sp,4
 803f4b8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 803f4bc:	e13fff17 	ldw	r4,-4(fp)
 803f4c0:	8003bc40 	call	8003bc4 <putchar>
#endif
#endif
}
 803f4c4:	e037883a 	mov	sp,fp
 803f4c8:	dfc00117 	ldw	ra,4(sp)
 803f4cc:	df000017 	ldw	fp,0(sp)
 803f4d0:	dec00204 	addi	sp,sp,8
 803f4d4:	f800283a 	ret

0803f4d8 <alt_get_errno>:
{
 803f4d8:	defffe04 	addi	sp,sp,-8
 803f4dc:	dfc00115 	stw	ra,4(sp)
 803f4e0:	df000015 	stw	fp,0(sp)
 803f4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803f4e8:	d0a04317 	ldw	r2,-32500(gp)
 803f4ec:	10000326 	beq	r2,zero,803f4fc <alt_get_errno+0x24>
 803f4f0:	d0a04317 	ldw	r2,-32500(gp)
 803f4f4:	103ee83a 	callr	r2
 803f4f8:	00000106 	br	803f500 <alt_get_errno+0x28>
 803f4fc:	d0a05a04 	addi	r2,gp,-32408
}
 803f500:	e037883a 	mov	sp,fp
 803f504:	dfc00117 	ldw	ra,4(sp)
 803f508:	df000017 	ldw	fp,0(sp)
 803f50c:	dec00204 	addi	sp,sp,8
 803f510:	f800283a 	ret

0803f514 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 803f514:	defff904 	addi	sp,sp,-28
 803f518:	dfc00615 	stw	ra,24(sp)
 803f51c:	df000515 	stw	fp,20(sp)
 803f520:	df000504 	addi	fp,sp,20
 803f524:	e13ffd15 	stw	r4,-12(fp)
 803f528:	e17ffc15 	stw	r5,-16(fp)
 803f52c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803f530:	e0bffd17 	ldw	r2,-12(fp)
 803f534:	10000616 	blt	r2,zero,803f550 <alt_read+0x3c>
 803f538:	e0bffd17 	ldw	r2,-12(fp)
 803f53c:	10c00324 	muli	r3,r2,12
 803f540:	00820174 	movhi	r2,2053
 803f544:	109b0f04 	addi	r2,r2,27708
 803f548:	1885883a 	add	r2,r3,r2
 803f54c:	00000106 	br	803f554 <alt_read+0x40>
 803f550:	0005883a 	mov	r2,zero
 803f554:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 803f558:	e0bfff17 	ldw	r2,-4(fp)
 803f55c:	10002226 	beq	r2,zero,803f5e8 <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803f560:	e0bfff17 	ldw	r2,-4(fp)
 803f564:	10800217 	ldw	r2,8(r2)
 803f568:	108000cc 	andi	r2,r2,3
 803f56c:	10800060 	cmpeqi	r2,r2,1
 803f570:	1000181e 	bne	r2,zero,803f5d4 <alt_read+0xc0>
        (fd->dev->read))
 803f574:	e0bfff17 	ldw	r2,-4(fp)
 803f578:	10800017 	ldw	r2,0(r2)
 803f57c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803f580:	10001426 	beq	r2,zero,803f5d4 <alt_read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 803f584:	e0bfff17 	ldw	r2,-4(fp)
 803f588:	10800017 	ldw	r2,0(r2)
 803f58c:	10800517 	ldw	r2,20(r2)
 803f590:	e0fffb17 	ldw	r3,-20(fp)
 803f594:	180d883a 	mov	r6,r3
 803f598:	e17ffc17 	ldw	r5,-16(fp)
 803f59c:	e13fff17 	ldw	r4,-4(fp)
 803f5a0:	103ee83a 	callr	r2
 803f5a4:	e0bffe15 	stw	r2,-8(fp)
 803f5a8:	e0bffe17 	ldw	r2,-8(fp)
 803f5ac:	1000070e 	bge	r2,zero,803f5cc <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
 803f5b0:	803f4d80 	call	803f4d8 <alt_get_errno>
 803f5b4:	1007883a 	mov	r3,r2
 803f5b8:	e0bffe17 	ldw	r2,-8(fp)
 803f5bc:	0085c83a 	sub	r2,zero,r2
 803f5c0:	18800015 	stw	r2,0(r3)
          return -1;
 803f5c4:	00bfffc4 	movi	r2,-1
 803f5c8:	00000c06 	br	803f5fc <alt_read+0xe8>
        }
        return rval;
 803f5cc:	e0bffe17 	ldw	r2,-8(fp)
 803f5d0:	00000a06 	br	803f5fc <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 803f5d4:	803f4d80 	call	803f4d8 <alt_get_errno>
 803f5d8:	1007883a 	mov	r3,r2
 803f5dc:	00800344 	movi	r2,13
 803f5e0:	18800015 	stw	r2,0(r3)
 803f5e4:	00000406 	br	803f5f8 <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 803f5e8:	803f4d80 	call	803f4d8 <alt_get_errno>
 803f5ec:	1007883a 	mov	r3,r2
 803f5f0:	00801444 	movi	r2,81
 803f5f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 803f5f8:	00bfffc4 	movi	r2,-1
}
 803f5fc:	e037883a 	mov	sp,fp
 803f600:	dfc00117 	ldw	ra,4(sp)
 803f604:	df000017 	ldw	fp,0(sp)
 803f608:	dec00204 	addi	sp,sp,8
 803f60c:	f800283a 	ret

0803f610 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 803f610:	defffe04 	addi	sp,sp,-8
 803f614:	df000115 	stw	fp,4(sp)
 803f618:	df000104 	addi	fp,sp,4
 803f61c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 803f620:	e0bfff17 	ldw	r2,-4(fp)
 803f624:	108000d0 	cmplti	r2,r2,3
 803f628:	10000a1e 	bne	r2,zero,803f654 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
 803f62c:	e0bfff17 	ldw	r2,-4(fp)
 803f630:	10c00324 	muli	r3,r2,12
 803f634:	00820174 	movhi	r2,2053
 803f638:	1885883a 	add	r2,r3,r2
 803f63c:	101b1115 	stw	zero,27716(r2)
    alt_fd_list[fd].dev      = 0;
 803f640:	e0bfff17 	ldw	r2,-4(fp)
 803f644:	10c00324 	muli	r3,r2,12
 803f648:	00820174 	movhi	r2,2053
 803f64c:	1885883a 	add	r2,r3,r2
 803f650:	101b0f15 	stw	zero,27708(r2)
  }
}
 803f654:	0001883a 	nop
 803f658:	e037883a 	mov	sp,fp
 803f65c:	df000017 	ldw	fp,0(sp)
 803f660:	dec00104 	addi	sp,sp,4
 803f664:	f800283a 	ret

0803f668 <alt_remap_cached>:
 * Return a pointer that should be used to access the cached memory.
 */

void* 
alt_remap_cached(volatile void* ptr, alt_u32 len)
{
 803f668:	defffd04 	addi	sp,sp,-12
 803f66c:	df000215 	stw	fp,8(sp)
 803f670:	df000204 	addi	fp,sp,8
 803f674:	e13fff15 	stw	r4,-4(fp)
 803f678:	e17ffe15 	stw	r5,-8(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  return (void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK);
 803f67c:	e0ffff17 	ldw	r3,-4(fp)
 803f680:	00a00034 	movhi	r2,32768
 803f684:	10bfffc4 	addi	r2,r2,-1
 803f688:	1884703a 	and	r2,r3,r2
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  return (void*) ptr;
#endif /* No data cache */
}
 803f68c:	e037883a 	mov	sp,fp
 803f690:	df000017 	ldw	fp,0(sp)
 803f694:	dec00104 	addi	sp,sp,4
 803f698:	f800283a 	ret

0803f69c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 803f69c:	defffa04 	addi	sp,sp,-24
 803f6a0:	df000515 	stw	fp,20(sp)
 803f6a4:	df000504 	addi	fp,sp,20
 803f6a8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 803f6ac:	0005303a 	rdctl	r2,status
 803f6b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803f6b4:	e0fffc17 	ldw	r3,-16(fp)
 803f6b8:	00bfff84 	movi	r2,-2
 803f6bc:	1884703a 	and	r2,r3,r2
 803f6c0:	1001703a 	wrctl	status,r2
  return context;
 803f6c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 803f6c8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 803f6cc:	e0bffb17 	ldw	r2,-20(fp)
 803f6d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 803f6d4:	e0bffd17 	ldw	r2,-12(fp)
 803f6d8:	10800017 	ldw	r2,0(r2)
 803f6dc:	e0fffd17 	ldw	r3,-12(fp)
 803f6e0:	18c00117 	ldw	r3,4(r3)
 803f6e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 803f6e8:	e0bffd17 	ldw	r2,-12(fp)
 803f6ec:	10800117 	ldw	r2,4(r2)
 803f6f0:	e0fffd17 	ldw	r3,-12(fp)
 803f6f4:	18c00017 	ldw	r3,0(r3)
 803f6f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 803f6fc:	e0bffd17 	ldw	r2,-12(fp)
 803f700:	e0fffd17 	ldw	r3,-12(fp)
 803f704:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 803f708:	e0bffd17 	ldw	r2,-12(fp)
 803f70c:	e0fffd17 	ldw	r3,-12(fp)
 803f710:	10c00015 	stw	r3,0(r2)
} 
 803f714:	0001883a 	nop
 803f718:	e0bfff17 	ldw	r2,-4(fp)
 803f71c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 803f720:	e0bffe17 	ldw	r2,-8(fp)
 803f724:	1001703a 	wrctl	status,r2
}
 803f728:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 803f72c:	0001883a 	nop
 803f730:	e037883a 	mov	sp,fp
 803f734:	df000017 	ldw	fp,0(sp)
 803f738:	dec00104 	addi	sp,sp,4
 803f73c:	f800283a 	ret

0803f740 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 803f740:	defffb04 	addi	sp,sp,-20
 803f744:	dfc00415 	stw	ra,16(sp)
 803f748:	df000315 	stw	fp,12(sp)
 803f74c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 803f750:	d0a04717 	ldw	r2,-32484(gp)
 803f754:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 803f758:	d0a0b417 	ldw	r2,-32048(gp)
 803f75c:	10800044 	addi	r2,r2,1
 803f760:	d0a0b415 	stw	r2,-32048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 803f764:	00002e06 	br	803f820 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 803f768:	e0bfff17 	ldw	r2,-4(fp)
 803f76c:	10800017 	ldw	r2,0(r2)
 803f770:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 803f774:	e0bfff17 	ldw	r2,-4(fp)
 803f778:	10800403 	ldbu	r2,16(r2)
 803f77c:	10803fcc 	andi	r2,r2,255
 803f780:	10000426 	beq	r2,zero,803f794 <alt_tick+0x54>
 803f784:	d0a0b417 	ldw	r2,-32048(gp)
 803f788:	1000021e 	bne	r2,zero,803f794 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 803f78c:	e0bfff17 	ldw	r2,-4(fp)
 803f790:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 803f794:	e0bfff17 	ldw	r2,-4(fp)
 803f798:	10800217 	ldw	r2,8(r2)
 803f79c:	d0e0b417 	ldw	r3,-32048(gp)
 803f7a0:	18801d36 	bltu	r3,r2,803f818 <alt_tick+0xd8>
 803f7a4:	e0bfff17 	ldw	r2,-4(fp)
 803f7a8:	10800403 	ldbu	r2,16(r2)
 803f7ac:	10803fcc 	andi	r2,r2,255
 803f7b0:	1000191e 	bne	r2,zero,803f818 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 803f7b4:	e0bfff17 	ldw	r2,-4(fp)
 803f7b8:	10800317 	ldw	r2,12(r2)
 803f7bc:	e0ffff17 	ldw	r3,-4(fp)
 803f7c0:	18c00517 	ldw	r3,20(r3)
 803f7c4:	1809883a 	mov	r4,r3
 803f7c8:	103ee83a 	callr	r2
 803f7cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 803f7d0:	e0bffd17 	ldw	r2,-12(fp)
 803f7d4:	1000031e 	bne	r2,zero,803f7e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 803f7d8:	e13fff17 	ldw	r4,-4(fp)
 803f7dc:	803f69c0 	call	803f69c <alt_alarm_stop>
 803f7e0:	00000d06 	br	803f818 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 803f7e4:	e0bfff17 	ldw	r2,-4(fp)
 803f7e8:	10c00217 	ldw	r3,8(r2)
 803f7ec:	e0bffd17 	ldw	r2,-12(fp)
 803f7f0:	1887883a 	add	r3,r3,r2
 803f7f4:	e0bfff17 	ldw	r2,-4(fp)
 803f7f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 803f7fc:	e0bfff17 	ldw	r2,-4(fp)
 803f800:	10c00217 	ldw	r3,8(r2)
 803f804:	d0a0b417 	ldw	r2,-32048(gp)
 803f808:	1880032e 	bgeu	r3,r2,803f818 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 803f80c:	e0bfff17 	ldw	r2,-4(fp)
 803f810:	00c00044 	movi	r3,1
 803f814:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 803f818:	e0bffe17 	ldw	r2,-8(fp)
 803f81c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 803f820:	e0ffff17 	ldw	r3,-4(fp)
 803f824:	d0a04704 	addi	r2,gp,-32484
 803f828:	18bfcf1e 	bne	r3,r2,803f768 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 803f82c:	8015cec0 	call	8015cec <OSTimeTick>
}
 803f830:	0001883a 	nop
 803f834:	e037883a 	mov	sp,fp
 803f838:	dfc00117 	ldw	ra,4(sp)
 803f83c:	df000017 	ldw	fp,0(sp)
 803f840:	dec00204 	addi	sp,sp,8
 803f844:	f800283a 	ret

0803f848 <alt_uncached_free>:
 * Free a block of uncached memory.
 */

void 
alt_uncached_free(volatile void* ptr)
{
 803f848:	defffd04 	addi	sp,sp,-12
 803f84c:	dfc00215 	stw	ra,8(sp)
 803f850:	df000115 	stw	fp,4(sp)
 803f854:	df000104 	addi	fp,sp,4
 803f858:	e13fff15 	stw	r4,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
 803f85c:	e0ffff17 	ldw	r3,-4(fp)
 803f860:	00a00034 	movhi	r2,32768
 803f864:	10bfffc4 	addi	r2,r2,-1
 803f868:	1884703a 	and	r2,r3,r2
 803f86c:	1009883a 	mov	r4,r2
 803f870:	804e0940 	call	804e094 <free>
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  free((void*)ptr);
#endif /* No data cache */
}
 803f874:	0001883a 	nop
 803f878:	e037883a 	mov	sp,fp
 803f87c:	dfc00117 	ldw	ra,4(sp)
 803f880:	df000017 	ldw	fp,0(sp)
 803f884:	dec00204 	addi	sp,sp,8
 803f888:	f800283a 	ret

0803f88c <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 803f88c:	defffa04 	addi	sp,sp,-24
 803f890:	dfc00515 	stw	ra,20(sp)
 803f894:	df000415 	stw	fp,16(sp)
 803f898:	df000404 	addi	fp,sp,16
 803f89c:	e13ffc15 	stw	r4,-16(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
 803f8a0:	e0bffc17 	ldw	r2,-16(fp)
 803f8a4:	108007c4 	addi	r2,r2,31
 803f8a8:	1004d17a 	srli	r2,r2,5
 803f8ac:	e0bfff15 	stw	r2,-4(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
 803f8b0:	e0bfff17 	ldw	r2,-4(fp)
 803f8b4:	1004917a 	slli	r2,r2,5
 803f8b8:	e0bffe15 	stw	r2,-8(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
 803f8bc:	e17ffe17 	ldw	r5,-8(fp)
 803f8c0:	01000804 	movi	r4,32
 803f8c4:	804ded80 	call	804ded8 <memalign>
 803f8c8:	e0bffd15 	stw	r2,-12(fp)

  if (ptr == NULL) {
 803f8cc:	e0bffd17 	ldw	r2,-12(fp)
 803f8d0:	1000021e 	bne	r2,zero,803f8dc <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
 803f8d4:	0005883a 	mov	r2,zero
 803f8d8:	00000506 	br	803f8f0 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
 803f8dc:	e17ffe17 	ldw	r5,-8(fp)
 803f8e0:	e13ffd17 	ldw	r4,-12(fp)
 803f8e4:	803e8d40 	call	803e8d4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
 803f8e8:	e0bffd17 	ldw	r2,-12(fp)
 803f8ec:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
 803f8f0:	e037883a 	mov	sp,fp
 803f8f4:	dfc00117 	ldw	ra,4(sp)
 803f8f8:	df000017 	ldw	fp,0(sp)
 803f8fc:	dec00204 	addi	sp,sp,8
 803f900:	f800283a 	ret

0803f904 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 803f904:	defffa04 	addi	sp,sp,-24
 803f908:	dfc00515 	stw	ra,20(sp)
 803f90c:	df000415 	stw	fp,16(sp)
 803f910:	dc000315 	stw	r16,12(sp)
 803f914:	df000404 	addi	fp,sp,16
 803f918:	e13ffc15 	stw	r4,-16(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 803f91c:	d0a06643 	ldbu	r2,-32359(gp)
 803f920:	10803fcc 	andi	r2,r2,255
 803f924:	1000031e 	bne	r2,zero,803f934 <usleep+0x30>
  {
    return alt_busy_sleep (us);
 803f928:	e13ffc17 	ldw	r4,-16(fp)
 803f92c:	803e6700 	call	803e670 <alt_busy_sleep>
 803f930:	00003306 	br	803fa00 <usleep+0xfc>
  return _alt_tick_rate;
 803f934:	d0a0b317 	ldw	r2,-32052(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 803f938:	e0bffd15 	stw	r2,-12(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 803f93c:	e0bffc17 	ldw	r2,-16(fp)
 803f940:	014003f4 	movhi	r5,15
 803f944:	29509004 	addi	r5,r5,16960
 803f948:	1009883a 	mov	r4,r2
 803f94c:	8011fdc0 	call	8011fdc <__udivsi3>
 803f950:	1007883a 	mov	r3,r2
 803f954:	e0bffd17 	ldw	r2,-12(fp)
 803f958:	18a1383a 	mul	r16,r3,r2
 803f95c:	e0bffc17 	ldw	r2,-16(fp)
 803f960:	014003f4 	movhi	r5,15
 803f964:	29509004 	addi	r5,r5,16960
 803f968:	1009883a 	mov	r4,r2
 803f96c:	80120400 	call	8012040 <__umodsi3>
 803f970:	1007883a 	mov	r3,r2
 803f974:	e0bffd17 	ldw	r2,-12(fp)
 803f978:	1885383a 	mul	r2,r3,r2
 803f97c:	014003f4 	movhi	r5,15
 803f980:	29509004 	addi	r5,r5,16960
 803f984:	1009883a 	mov	r4,r2
 803f988:	8011fdc0 	call	8011fdc <__udivsi3>
 803f98c:	8085883a 	add	r2,r16,r2
 803f990:	e0bffe15 	stw	r2,-8(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 803f994:	00000706 	br	803f9b4 <usleep+0xb0>
  {
    OSTimeDly(0xffff);
 803f998:	013fffd4 	movui	r4,65535
 803f99c:	801c4780 	call	801c478 <OSTimeDly>
    ticks -= 0xffff;
 803f9a0:	e0fffe17 	ldw	r3,-8(fp)
 803f9a4:	00bffff4 	movhi	r2,65535
 803f9a8:	10800044 	addi	r2,r2,1
 803f9ac:	1885883a 	add	r2,r3,r2
 803f9b0:	e0bffe15 	stw	r2,-8(fp)
  while (ticks > 0xffff)
 803f9b4:	e0bffe17 	ldw	r2,-8(fp)
 803f9b8:	00ffffd4 	movui	r3,65535
 803f9bc:	18bff636 	bltu	r3,r2,803f998 <usleep+0x94>
  }

  OSTimeDly ((INT16U) (ticks));
 803f9c0:	e0bffe17 	ldw	r2,-8(fp)
 803f9c4:	10bfffcc 	andi	r2,r2,65535
 803f9c8:	1009883a 	mov	r4,r2
 803f9cc:	801c4780 	call	801c478 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 803f9d0:	e17ffd17 	ldw	r5,-12(fp)
 803f9d4:	010003f4 	movhi	r4,15
 803f9d8:	21109004 	addi	r4,r4,16960
 803f9dc:	8011fdc0 	call	8011fdc <__udivsi3>
 803f9e0:	1007883a 	mov	r3,r2
 803f9e4:	e0bffc17 	ldw	r2,-16(fp)
 803f9e8:	180b883a 	mov	r5,r3
 803f9ec:	1009883a 	mov	r4,r2
 803f9f0:	80120400 	call	8012040 <__umodsi3>
 803f9f4:	1009883a 	mov	r4,r2
 803f9f8:	803e6700 	call	803e670 <alt_busy_sleep>

  return 0;  
 803f9fc:	0005883a 	mov	r2,zero
}
 803fa00:	e6ffff04 	addi	sp,fp,-4
 803fa04:	dfc00217 	ldw	ra,8(sp)
 803fa08:	df000117 	ldw	fp,4(sp)
 803fa0c:	dc000017 	ldw	r16,0(sp)
 803fa10:	dec00304 	addi	sp,sp,12
 803fa14:	f800283a 	ret

0803fa18 <alt_get_errno>:
{
 803fa18:	defffe04 	addi	sp,sp,-8
 803fa1c:	dfc00115 	stw	ra,4(sp)
 803fa20:	df000015 	stw	fp,0(sp)
 803fa24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803fa28:	d0a04317 	ldw	r2,-32500(gp)
 803fa2c:	10000326 	beq	r2,zero,803fa3c <alt_get_errno+0x24>
 803fa30:	d0a04317 	ldw	r2,-32500(gp)
 803fa34:	103ee83a 	callr	r2
 803fa38:	00000106 	br	803fa40 <alt_get_errno+0x28>
 803fa3c:	d0a05a04 	addi	r2,gp,-32408
}
 803fa40:	e037883a 	mov	sp,fp
 803fa44:	dfc00117 	ldw	ra,4(sp)
 803fa48:	df000017 	ldw	fp,0(sp)
 803fa4c:	dec00204 	addi	sp,sp,8
 803fa50:	f800283a 	ret

0803fa54 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 803fa54:	defff904 	addi	sp,sp,-28
 803fa58:	dfc00615 	stw	ra,24(sp)
 803fa5c:	df000515 	stw	fp,20(sp)
 803fa60:	df000504 	addi	fp,sp,20
 803fa64:	e13ffd15 	stw	r4,-12(fp)
 803fa68:	e17ffc15 	stw	r5,-16(fp)
 803fa6c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803fa70:	e0bffd17 	ldw	r2,-12(fp)
 803fa74:	10000616 	blt	r2,zero,803fa90 <alt_write+0x3c>
 803fa78:	e0bffd17 	ldw	r2,-12(fp)
 803fa7c:	10c00324 	muli	r3,r2,12
 803fa80:	00820174 	movhi	r2,2053
 803fa84:	109b0f04 	addi	r2,r2,27708
 803fa88:	1885883a 	add	r2,r3,r2
 803fa8c:	00000106 	br	803fa94 <alt_write+0x40>
 803fa90:	0005883a 	mov	r2,zero
 803fa94:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 803fa98:	e0bfff17 	ldw	r2,-4(fp)
 803fa9c:	10002126 	beq	r2,zero,803fb24 <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 803faa0:	e0bfff17 	ldw	r2,-4(fp)
 803faa4:	10800217 	ldw	r2,8(r2)
 803faa8:	108000cc 	andi	r2,r2,3
 803faac:	10001826 	beq	r2,zero,803fb10 <alt_write+0xbc>
 803fab0:	e0bfff17 	ldw	r2,-4(fp)
 803fab4:	10800017 	ldw	r2,0(r2)
 803fab8:	10800617 	ldw	r2,24(r2)
 803fabc:	10001426 	beq	r2,zero,803fb10 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 803fac0:	e0bfff17 	ldw	r2,-4(fp)
 803fac4:	10800017 	ldw	r2,0(r2)
 803fac8:	10800617 	ldw	r2,24(r2)
 803facc:	e0fffb17 	ldw	r3,-20(fp)
 803fad0:	180d883a 	mov	r6,r3
 803fad4:	e17ffc17 	ldw	r5,-16(fp)
 803fad8:	e13fff17 	ldw	r4,-4(fp)
 803fadc:	103ee83a 	callr	r2
 803fae0:	e0bffe15 	stw	r2,-8(fp)
 803fae4:	e0bffe17 	ldw	r2,-8(fp)
 803fae8:	1000070e 	bge	r2,zero,803fb08 <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
 803faec:	803fa180 	call	803fa18 <alt_get_errno>
 803faf0:	1007883a 	mov	r3,r2
 803faf4:	e0bffe17 	ldw	r2,-8(fp)
 803faf8:	0085c83a 	sub	r2,zero,r2
 803fafc:	18800015 	stw	r2,0(r3)
        return -1;
 803fb00:	00bfffc4 	movi	r2,-1
 803fb04:	00000c06 	br	803fb38 <alt_write+0xe4>
      }
      return rval;
 803fb08:	e0bffe17 	ldw	r2,-8(fp)
 803fb0c:	00000a06 	br	803fb38 <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 803fb10:	803fa180 	call	803fa18 <alt_get_errno>
 803fb14:	1007883a 	mov	r3,r2
 803fb18:	00800344 	movi	r2,13
 803fb1c:	18800015 	stw	r2,0(r3)
 803fb20:	00000406 	br	803fb34 <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 803fb24:	803fa180 	call	803fa18 <alt_get_errno>
 803fb28:	1007883a 	mov	r3,r2
 803fb2c:	00801444 	movi	r2,81
 803fb30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 803fb34:	00bfffc4 	movi	r2,-1
}
 803fb38:	e037883a 	mov	sp,fp
 803fb3c:	dfc00117 	ldw	ra,4(sp)
 803fb40:	df000017 	ldw	fp,0(sp)
 803fb44:	dec00204 	addi	sp,sp,8
 803fb48:	f800283a 	ret

0803fb4c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 803fb4c:	deffff04 	addi	sp,sp,-4
 803fb50:	df000015 	stw	fp,0(sp)
 803fb54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 803fb58:	000170fa 	wrctl	ienable,zero
}
 803fb5c:	0001883a 	nop
 803fb60:	e037883a 	mov	sp,fp
 803fb64:	df000017 	ldw	fp,0(sp)
 803fb68:	dec00104 	addi	sp,sp,4
 803fb6c:	f800283a 	ret

0803fb70 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 803fb70:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 803fb74:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 803fb78:	d1207517 	ldw	r4,-32300(gp)

      stw ra,  0(sp)
 803fb7c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 803fb80:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 803fb84:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 803fb88:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 803fb8c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 803fb90:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 803fb94:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 803fb98:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 803fb9c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 803fba0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 803fba4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 803fba8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 803fbac:	803fdd40 	call	803fdd4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 803fbb0:	d1207017 	ldw	r4,-32320(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 803fbb4:	d1606807 	ldb	r5,-32352(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 803fbb8:	d1207515 	stw	r4,-32300(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 803fbbc:	d1606845 	stb	r5,-32351(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 803fbc0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 803fbc4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 803fbc8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 803fbcc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 803fbd0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 803fbd4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 803fbd8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 803fbdc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 803fbe0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 803fbe4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 803fbe8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 803fbec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 803fbf0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 803fbf4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 803fbf8:	f800283a 	ret

0803fbfc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 803fbfc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 803fc00:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 803fc04:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 803fc08:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 803fc0c:	803fdd40 	call	803fdd4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 803fc10:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 803fc14:	d4a06645 	stb	r18,-32359(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 803fc18:	003fe506 	br	803fbb0 <OSCtxSw+0x40>

0803fc1c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 803fc1c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 803fc20:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 803fc24:	10800054 	ori	r2,r2,1
      wrctl status, r2
 803fc28:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 803fc2c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 803fc30:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 803fc34:	dec00204 	addi	sp,sp,8

      callr r2
 803fc38:	103ee83a 	callr	r2

      nop
 803fc3c:	0001883a 	nop

0803fc40 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 803fc40:	defff704 	addi	sp,sp,-36
 803fc44:	dfc00815 	stw	ra,32(sp)
 803fc48:	df000715 	stw	fp,28(sp)
 803fc4c:	df000704 	addi	fp,sp,28
 803fc50:	e13ffc15 	stw	r4,-16(fp)
 803fc54:	e17ffb15 	stw	r5,-20(fp)
 803fc58:	e1bffa15 	stw	r6,-24(fp)
 803fc5c:	3805883a 	mov	r2,r7
 803fc60:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 803fc64:	e0fffa17 	ldw	r3,-24(fp)
 803fc68:	00bfff04 	movi	r2,-4
 803fc6c:	1884703a 	and	r2,r3,r2
 803fc70:	10bef704 	addi	r2,r2,-1060
 803fc74:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 803fc78:	01810904 	movi	r6,1060
 803fc7c:	000b883a 	mov	r5,zero
 803fc80:	e13fff17 	ldw	r4,-4(fp)
 803fc84:	80038cc0 	call	80038cc <memset>
 803fc88:	e0bfff17 	ldw	r2,-4(fp)
 803fc8c:	10c0bb04 	addi	r3,r2,748
 803fc90:	e0bfff17 	ldw	r2,-4(fp)
 803fc94:	10c00115 	stw	r3,4(r2)
 803fc98:	e0bfff17 	ldw	r2,-4(fp)
 803fc9c:	10c0d504 	addi	r3,r2,852
 803fca0:	e0bfff17 	ldw	r2,-4(fp)
 803fca4:	10c00215 	stw	r3,8(r2)
 803fca8:	e0bfff17 	ldw	r2,-4(fp)
 803fcac:	10c0ef04 	addi	r3,r2,956
 803fcb0:	e0bfff17 	ldw	r2,-4(fp)
 803fcb4:	10c00315 	stw	r3,12(r2)
 803fcb8:	e0bfff17 	ldw	r2,-4(fp)
 803fcbc:	00c00044 	movi	r3,1
 803fcc0:	10c02915 	stw	r3,164(r2)
 803fcc4:	10002a15 	stw	zero,168(r2)
 803fcc8:	e0bfff17 	ldw	r2,-4(fp)
 803fccc:	00ccc384 	movi	r3,13070
 803fcd0:	10c02b0d 	sth	r3,172(r2)
 803fcd4:	e0bfff17 	ldw	r2,-4(fp)
 803fcd8:	00eaf344 	movi	r3,-21555
 803fcdc:	10c02b8d 	sth	r3,174(r2)
 803fce0:	e0bfff17 	ldw	r2,-4(fp)
 803fce4:	00c48d04 	movi	r3,4660
 803fce8:	10c02c0d 	sth	r3,176(r2)
 803fcec:	e0bfff17 	ldw	r2,-4(fp)
 803fcf0:	00f99b44 	movi	r3,-6547
 803fcf4:	10c02c8d 	sth	r3,178(r2)
 803fcf8:	e0bfff17 	ldw	r2,-4(fp)
 803fcfc:	00f7bb04 	movi	r3,-8468
 803fd00:	10c02d0d 	sth	r3,180(r2)
 803fd04:	e0bfff17 	ldw	r2,-4(fp)
 803fd08:	00c00144 	movi	r3,5
 803fd0c:	10c02d8d 	sth	r3,182(r2)
 803fd10:	e0bfff17 	ldw	r2,-4(fp)
 803fd14:	00c002c4 	movi	r3,11
 803fd18:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 803fd1c:	e0bfff17 	ldw	r2,-4(fp)
 803fd20:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 803fd24:	e0bffe17 	ldw	r2,-8(fp)
 803fd28:	10bff304 	addi	r2,r2,-52
 803fd2c:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 803fd30:	e0bffd17 	ldw	r2,-12(fp)
 803fd34:	10800c04 	addi	r2,r2,48
 803fd38:	e0fffc17 	ldw	r3,-16(fp)
 803fd3c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 803fd40:	e0bffd17 	ldw	r2,-12(fp)
 803fd44:	10800b04 	addi	r2,r2,44
 803fd48:	e0fffb17 	ldw	r3,-20(fp)
 803fd4c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 803fd50:	e0bffd17 	ldw	r2,-12(fp)
 803fd54:	10800a04 	addi	r2,r2,40
 803fd58:	e0ffff17 	ldw	r3,-4(fp)
 803fd5c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 803fd60:	00820134 	movhi	r2,2052
 803fd64:	10bf0704 	addi	r2,r2,-996
 803fd68:	10c00104 	addi	r3,r2,4
 803fd6c:	e0bffd17 	ldw	r2,-12(fp)
 803fd70:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 803fd74:	e0bffd17 	ldw	r2,-12(fp)
}
 803fd78:	e037883a 	mov	sp,fp
 803fd7c:	dfc00117 	ldw	ra,4(sp)
 803fd80:	df000017 	ldw	fp,0(sp)
 803fd84:	dec00204 	addi	sp,sp,8
 803fd88:	f800283a 	ret

0803fd8c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 803fd8c:	defffe04 	addi	sp,sp,-8
 803fd90:	df000115 	stw	fp,4(sp)
 803fd94:	df000104 	addi	fp,sp,4
 803fd98:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 803fd9c:	0001883a 	nop
 803fda0:	e037883a 	mov	sp,fp
 803fda4:	df000017 	ldw	fp,0(sp)
 803fda8:	dec00104 	addi	sp,sp,4
 803fdac:	f800283a 	ret

0803fdb0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 803fdb0:	defffe04 	addi	sp,sp,-8
 803fdb4:	df000115 	stw	fp,4(sp)
 803fdb8:	df000104 	addi	fp,sp,4
 803fdbc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 803fdc0:	0001883a 	nop
 803fdc4:	e037883a 	mov	sp,fp
 803fdc8:	df000017 	ldw	fp,0(sp)
 803fdcc:	dec00104 	addi	sp,sp,4
 803fdd0:	f800283a 	ret

0803fdd4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 803fdd4:	deffff04 	addi	sp,sp,-4
 803fdd8:	df000015 	stw	fp,0(sp)
 803fddc:	d839883a 	mov	fp,sp
}
 803fde0:	0001883a 	nop
 803fde4:	e037883a 	mov	sp,fp
 803fde8:	df000017 	ldw	fp,0(sp)
 803fdec:	dec00104 	addi	sp,sp,4
 803fdf0:	f800283a 	ret

0803fdf4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 803fdf4:	deffff04 	addi	sp,sp,-4
 803fdf8:	df000015 	stw	fp,0(sp)
 803fdfc:	d839883a 	mov	fp,sp
}
 803fe00:	0001883a 	nop
 803fe04:	e037883a 	mov	sp,fp
 803fe08:	df000017 	ldw	fp,0(sp)
 803fe0c:	dec00104 	addi	sp,sp,4
 803fe10:	f800283a 	ret

0803fe14 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 803fe14:	defffe04 	addi	sp,sp,-8
 803fe18:	dfc00115 	stw	ra,4(sp)
 803fe1c:	df000015 	stw	fp,0(sp)
 803fe20:	d839883a 	mov	fp,sp
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
 803fe24:	803030c0 	call	803030c <cticks_hook>
#endif
}
 803fe28:	0001883a 	nop
 803fe2c:	e037883a 	mov	sp,fp
 803fe30:	dfc00117 	ldw	ra,4(sp)
 803fe34:	df000017 	ldw	fp,0(sp)
 803fe38:	dec00204 	addi	sp,sp,8
 803fe3c:	f800283a 	ret

0803fe40 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 803fe40:	deffff04 	addi	sp,sp,-4
 803fe44:	df000015 	stw	fp,0(sp)
 803fe48:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 803fe4c:	0001883a 	nop
 803fe50:	e037883a 	mov	sp,fp
 803fe54:	df000017 	ldw	fp,0(sp)
 803fe58:	dec00104 	addi	sp,sp,4
 803fe5c:	f800283a 	ret

0803fe60 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 803fe60:	deffff04 	addi	sp,sp,-4
 803fe64:	df000015 	stw	fp,0(sp)
 803fe68:	d839883a 	mov	fp,sp
}
 803fe6c:	0001883a 	nop
 803fe70:	e037883a 	mov	sp,fp
 803fe74:	df000017 	ldw	fp,0(sp)
 803fe78:	dec00104 	addi	sp,sp,4
 803fe7c:	f800283a 	ret

0803fe80 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 803fe80:	deffff04 	addi	sp,sp,-4
 803fe84:	df000015 	stw	fp,0(sp)
 803fe88:	d839883a 	mov	fp,sp
}
 803fe8c:	0001883a 	nop
 803fe90:	e037883a 	mov	sp,fp
 803fe94:	df000017 	ldw	fp,0(sp)
 803fe98:	dec00104 	addi	sp,sp,4
 803fe9c:	f800283a 	ret

0803fea0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 803fea0:	defffe04 	addi	sp,sp,-8
 803fea4:	df000115 	stw	fp,4(sp)
 803fea8:	df000104 	addi	fp,sp,4
 803feac:	e13fff15 	stw	r4,-4(fp)
}
 803feb0:	0001883a 	nop
 803feb4:	e037883a 	mov	sp,fp
 803feb8:	df000017 	ldw	fp,0(sp)
 803febc:	dec00104 	addi	sp,sp,4
 803fec0:	f800283a 	ret

0803fec4 <netmain_init>:
 * RETURNS: 
 */

void 
netmain_init(void)
{
 803fec4:	defffb04 	addi	sp,sp,-20
 803fec8:	dfc00415 	stw	ra,16(sp)
 803fecc:	df000315 	stw	fp,12(sp)
 803fed0:	dc000215 	stw	r16,8(sp)
 803fed4:	df000304 	addi	fp,sp,12
   int   e = 0;
 803fed8:	e03ffe15 	stw	zero,-8(fp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
 803fedc:	d0a04917 	ldw	r2,-32476(gp)
 803fee0:	1009883a 	mov	r4,r2
 803fee4:	8003ca80 	call	8003ca8 <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
 803fee8:	01020174 	movhi	r4,2053
 803feec:	210f6a04 	addi	r4,r4,15784
 803fef0:	8003ca80 	call	8003ca8 <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
 803fef4:	8030a780 	call	8030a78 <pre_task_setup>
 803fef8:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803fefc:	e0bffd17 	ldw	r2,-12(fp)
 803ff00:	10000226 	beq	r2,zero,803ff0c <netmain_init+0x48>
      panic(msg);
 803ff04:	e13ffd17 	ldw	r4,-12(fp)
 803ff08:	802bd8c0 	call	802bd8c <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
 803ff0c:	8029b440 	call	8029b44 <ip_startup>
 803ff10:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803ff14:	e0bffd17 	ldw	r2,-12(fp)
 803ff18:	10000726 	beq	r2,zero,803ff38 <netmain_init+0x74>
   {
      printf("inet startup error: %s\n", msg);
 803ff1c:	e17ffd17 	ldw	r5,-12(fp)
 803ff20:	01020174 	movhi	r4,2053
 803ff24:	210f7c04 	addi	r4,r4,15856
 803ff28:	8003b840 	call	8003b84 <printf>
      panic("IP");
 803ff2c:	01020174 	movhi	r4,2053
 803ff30:	210f8204 	addi	r4,r4,15880
 803ff34:	802bd8c0 	call	802bd8c <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
 803ff38:	8049b580 	call	8049b58 <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
 803ff3c:	80491ac0 	call	80491ac <u_mctest_init>

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
 803ff40:	d0207e15 	stw	zero,-32264(gp)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 803ff44:	008201b4 	movhi	r2,2054
 803ff48:	10800f17 	ldw	r2,60(r2)
 803ff4c:	14000104 	addi	r16,r2,4
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 803ff50:	008201b4 	movhi	r2,2054
 803ff54:	10800f17 	ldw	r2,60(r2)
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 803ff58:	10800a17 	ldw	r2,40(r2)
 803ff5c:	1009883a 	mov	r4,r2
 803ff60:	802bbd00 	call	802bbd0 <print_ipad>
 803ff64:	100d883a 	mov	r6,r2
 803ff68:	800b883a 	mov	r5,r16
 803ff6c:	01020174 	movhi	r4,2053
 803ff70:	210f8304 	addi	r4,r4,15884
 803ff74:	8003b840 	call	8003b84 <printf>
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
 803ff78:	8030ac40 	call	8030ac4 <post_task_setup>
 803ff7c:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803ff80:	e0bffd17 	ldw	r2,-12(fp)
 803ff84:	10000226 	beq	r2,zero,803ff90 <netmain_init+0xcc>
      panic(msg);
 803ff88:	e13ffd17 	ldw	r4,-12(fp)
 803ff8c:	802bd8c0 	call	802bd8c <panic>
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
 803ff90:	804984c0 	call	804984c <dhc_setup>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
 803ff94:	0001883a 	nop
 803ff98:	e6ffff04 	addi	sp,fp,-4
 803ff9c:	dfc00217 	ldw	ra,8(sp)
 803ffa0:	df000117 	ldw	fp,4(sp)
 803ffa4:	dc000017 	ldw	r16,0(sp)
 803ffa8:	dec00304 	addi	sp,sp,12
 803ffac:	f800283a 	ret

0803ffb0 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
 803ffb0:	defffb04 	addi	sp,sp,-20
 803ffb4:	dfc00415 	stw	ra,16(sp)
 803ffb8:	df000315 	stw	fp,12(sp)
 803ffbc:	dc000215 	stw	r16,8(sp)
 803ffc0:	df000304 	addi	fp,sp,12
 803ffc4:	e13ffe15 	stw	r4,-8(fp)
 803ffc8:	e17ffd15 	stw	r5,-12(fp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
 803ffcc:	e0bffd17 	ldw	r2,-12(fp)
 803ffd0:	10800003 	ldbu	r2,0(r2)
 803ffd4:	10803fcc 	andi	r2,r2,255
 803ffd8:	1080201c 	xori	r2,r2,128
 803ffdc:	10bfe004 	addi	r2,r2,-128
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
 803ffe0:	100690ba 	slli	r3,r2,2
 803ffe4:	00820174 	movhi	r2,2053
 803ffe8:	1885883a 	add	r2,r3,r2
 803ffec:	141b6f17 	ldw	r16,28092(r2)
 803fff0:	e0bffe17 	ldw	r2,-8(fp)
 803fff4:	10800717 	ldw	r2,28(r2)
 803fff8:	1009883a 	mov	r4,r2
 803fffc:	802bbd00 	call	802bbd0 <print_ipad>
 8040000:	100d883a 	mov	r6,r2
 8040004:	800b883a 	mov	r5,r16
 8040008:	01020174 	movhi	r4,2053
 804000c:	210f9304 	addi	r4,r4,15948
 8040010:	8003b840 	call	8003b84 <printf>
   dprintf(prompt);
 8040014:	d0a04a17 	ldw	r2,-32472(gp)
 8040018:	1009883a 	mov	r4,r2
 804001c:	8003b840 	call	8003b84 <printf>
}
 8040020:	0001883a 	nop
 8040024:	e6ffff04 	addi	sp,fp,-4
 8040028:	dfc00217 	ldw	ra,8(sp)
 804002c:	df000117 	ldw	fp,4(sp)
 8040030:	dc000017 	ldw	r16,0(sp)
 8040034:	dec00304 	addi	sp,sp,12
 8040038:	f800283a 	ret

0804003c <station_state>:
 * RETURNS: 
 */

int
station_state(void * pio)
{
 804003c:	defff904 	addi	sp,sp,-28
 8040040:	dfc00615 	stw	ra,24(sp)
 8040044:	df000515 	stw	fp,20(sp)
 8040048:	dc000415 	stw	r16,16(sp)
 804004c:	df000504 	addi	fp,sp,20
 8040050:	e13ffc15 	stw	r4,-16(fp)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 8040054:	e03ffe15 	stw	zero,-8(fp)
 8040058:	008201b4 	movhi	r2,2054
 804005c:	10800f17 	ldw	r2,60(r2)
 8040060:	e0bffd15 	stw	r2,-12(fp)
 8040064:	00002506 	br	80400fc <station_state+0xc0>
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
 8040068:	e0bffd17 	ldw	r2,-12(fp)
 804006c:	14000104 	addi	r16,r2,4
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
 8040070:	e0bffd17 	ldw	r2,-12(fp)
 8040074:	10800a17 	ldw	r2,40(r2)
 8040078:	1009883a 	mov	r4,r2
 804007c:	802bbd00 	call	802bbd0 <print_ipad>
 8040080:	d8800015 	stw	r2,0(sp)
 8040084:	800f883a 	mov	r7,r16
 8040088:	e1bffe17 	ldw	r6,-8(fp)
 804008c:	01420174 	movhi	r5,2053
 8040090:	294f9c04 	addi	r5,r5,15984
 8040094:	e13ffc17 	ldw	r4,-16(fp)
 8040098:	802bfa40 	call	802bfa4 <ns_printf>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
 804009c:	e0bffd17 	ldw	r2,-12(fp)
 80400a0:	10800c17 	ldw	r2,48(r2)
 80400a4:	1009883a 	mov	r4,r2
 80400a8:	802bbd00 	call	802bbd0 <print_ipad>
 80400ac:	100d883a 	mov	r6,r2
 80400b0:	01420174 	movhi	r5,2053
 80400b4:	294fa304 	addi	r5,r5,16012
 80400b8:	e13ffc17 	ldw	r4,-16(fp)
 80400bc:	802bfa40 	call	802bfa4 <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
 80400c0:	e0bffd17 	ldw	r2,-12(fp)
 80400c4:	10800d17 	ldw	r2,52(r2)
 80400c8:	1009883a 	mov	r4,r2
 80400cc:	802bbd00 	call	802bbd0 <print_ipad>
 80400d0:	100d883a 	mov	r6,r2
 80400d4:	01420174 	movhi	r5,2053
 80400d8:	294fa604 	addi	r5,r5,16024
 80400dc:	e13ffc17 	ldw	r4,-16(fp)
 80400e0:	802bfa40 	call	802bfa4 <ns_printf>
   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 80400e4:	e0bffd17 	ldw	r2,-12(fp)
 80400e8:	10800017 	ldw	r2,0(r2)
 80400ec:	e0bffd15 	stw	r2,-12(fp)
 80400f0:	e0bffe17 	ldw	r2,-8(fp)
 80400f4:	10800044 	addi	r2,r2,1
 80400f8:	e0bffe15 	stw	r2,-8(fp)
 80400fc:	e0bffd17 	ldw	r2,-12(fp)
 8040100:	103fd91e 	bne	r2,zero,8040068 <station_state+0x2c>
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
 8040104:	d0a0a317 	ldw	r2,-32116(gp)
 8040108:	100d883a 	mov	r6,r2
 804010c:	01420174 	movhi	r5,2053
 8040110:	294fa904 	addi	r5,r5,16036
 8040114:	e13ffc17 	ldw	r4,-16(fp)
 8040118:	802bfa40 	call	802bfa4 <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
 804011c:	d0e04b17 	ldw	r3,-32468(gp)
 8040120:	d0a04b17 	ldw	r2,-32468(gp)
 8040124:	108002a4 	muli	r2,r2,10
 8040128:	100f883a 	mov	r7,r2
 804012c:	180d883a 	mov	r6,r3
 8040130:	01420174 	movhi	r5,2053
 8040134:	294faf04 	addi	r5,r5,16060
 8040138:	e13ffc17 	ldw	r4,-16(fp)
 804013c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
 8040140:	d0a0b517 	ldw	r2,-32044(gp)
 8040144:	1009883a 	mov	r4,r2
 8040148:	802bbd00 	call	802bbd0 <print_ipad>
 804014c:	100d883a 	mov	r6,r2
 8040150:	01420174 	movhi	r5,2053
 8040154:	294fbb04 	addi	r5,r5,16108
 8040158:	e13ffc17 	ldw	r4,-16(fp)
 804015c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
 8040160:	d0a04c17 	ldw	r2,-32464(gp)
 8040164:	100d883a 	mov	r6,r2
 8040168:	01420174 	movhi	r5,2053
 804016c:	294fc204 	addi	r5,r5,16136
 8040170:	e13ffc17 	ldw	r4,-16(fp)
 8040174:	802bfa40 	call	802bfa4 <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
 8040178:	e13ffc17 	ldw	r4,-16(fp)
 804017c:	804065c0 	call	804065c <task_stats>

   return 0;
 8040180:	0005883a 	mov	r2,zero
}
 8040184:	e6ffff04 	addi	sp,fp,-4
 8040188:	dfc00217 	ldw	ra,8(sp)
 804018c:	df000117 	ldw	fp,4(sp)
 8040190:	dc000017 	ldw	r16,0(sp)
 8040194:	dec00304 	addi	sp,sp,12
 8040198:	f800283a 	ret

0804019c <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
 804019c:	defffe04 	addi	sp,sp,-8
 80401a0:	dfc00115 	stw	ra,4(sp)
 80401a4:	df000015 	stw	fp,0(sp)
 80401a8:	d839883a 	mov	fp,sp
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
 80401ac:	d0a0a317 	ldw	r2,-32116(gp)
 80401b0:	01401904 	movi	r5,100
 80401b4:	1009883a 	mov	r4,r2
 80401b8:	8011fdc0 	call	8011fdc <__udivsi3>
 80401bc:	10801924 	muli	r2,r2,100
}
 80401c0:	e037883a 	mov	sp,fp
 80401c4:	dfc00117 	ldw	ra,4(sp)
 80401c8:	df000017 	ldw	fp,0(sp)
 80401cc:	dec00204 	addi	sp,sp,8
 80401d0:	f800283a 	ret

080401d4 <packet_check>:

static int inside_pktdemux = 0; 

void
packet_check(void)
{
 80401d4:	defffe04 	addi	sp,sp,-8
 80401d8:	dfc00115 	stw	ra,4(sp)
 80401dc:	df000015 	stw	fp,0(sp)
 80401e0:	d839883a 	mov	fp,sp
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
 80401e4:	d0a0b617 	ldw	r2,-32040(gp)
 80401e8:	1000081e 	bne	r2,zero,804020c <packet_check+0x38>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   inside_pktdemux++;   /* set re-entrany flag */
 80401ec:	d0a0b617 	ldw	r2,-32040(gp)
 80401f0:	10800044 	addi	r2,r2,1
 80401f4:	d0a0b615 	stw	r2,-32040(gp)
   pktdemux();          /* process low level packet input */
 80401f8:	80295840 	call	8029584 <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
 80401fc:	d0a0b617 	ldw	r2,-32040(gp)
 8040200:	10bfffc4 	addi	r2,r2,-1
 8040204:	d0a0b615 	stw	r2,-32040(gp)
 8040208:	00000106 	br	8040210 <packet_check+0x3c>
      return;           /* do not re-enter pktdemux(), packet will wait... */
 804020c:	0001883a 	nop
}
 8040210:	e037883a 	mov	sp,fp
 8040214:	dfc00117 	ldw	ra,4(sp)
 8040218:	df000017 	ldw	fp,0(sp)
 804021c:	dec00204 	addi	sp,sp,8
 8040220:	f800283a 	ret

08040224 <mcastlist>:
 * RETURNS: 
 */

int
mcastlist(struct in_multi * multi_ptr)
{
 8040224:	defffe04 	addi	sp,sp,-8
 8040228:	df000115 	stw	fp,4(sp)
 804022c:	df000104 	addi	fp,sp,4
 8040230:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(multi_ptr);

   return 0;
 8040234:	0005883a 	mov	r2,zero
}
 8040238:	e037883a 	mov	sp,fp
 804023c:	df000017 	ldw	fp,0(sp)
 8040240:	dec00104 	addi	sp,sp,4
 8040244:	f800283a 	ret

08040248 <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
 8040248:	defffd04 	addi	sp,sp,-12
 804024c:	dfc00215 	stw	ra,8(sp)
 8040250:	df000115 	stw	fp,4(sp)
 8040254:	df000104 	addi	fp,sp,4
#ifdef IP_V6
   ip6_addr host;
   int i;
#endif

int e = 0;
 8040258:	e03fff15 	stw	zero,-4(fp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
 804025c:	804c98c0 	call	804c98c <prep_vfs>
 8040260:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0)
 8040264:	e0bfff17 	ldw	r2,-4(fp)
 8040268:	10000626 	beq	r2,zero,8040284 <prep_modules+0x3c>
   {
      dprintf("VFS Module prep failed\n");
 804026c:	01020174 	movhi	r4,2053
 8040270:	210fca04 	addi	r4,r4,16168
 8040274:	8003ca80 	call	8003ca8 <puts>
      panic("prep_modules");
 8040278:	01020174 	movhi	r4,2053
 804027c:	210fd004 	addi	r4,r4,16192
 8040280:	802bd8c0 	call	802bd8c <panic>
   {
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
 8040284:	0005883a 	mov	r2,zero
}
 8040288:	e037883a 	mov	sp,fp
 804028c:	dfc00117 	ldw	ra,4(sp)
 8040290:	df000017 	ldw	fp,0(sp)
 8040294:	dec00204 	addi	sp,sp,8
 8040298:	f800283a 	ret

0804029c <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
 804029c:	defffe04 	addi	sp,sp,-8
 80402a0:	dfc00115 	stw	ra,4(sp)
 80402a4:	df000015 	stw	fp,0(sp)
 80402a8:	d839883a 	mov	fp,sp
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
 80402ac:	d0e0c417 	ldw	r3,-31984(gp)
 80402b0:	d0a0a317 	ldw	r2,-32116(gp)
 80402b4:	1880012e 	bgeu	r3,r2,80402bc <inet_timer+0x20>
      ip_reasm_process_timer_tick ();
 80402b8:	80451940 	call	8045194 <ip_reasm_process_timer_tick>
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
 80402bc:	80325380 	call	8032538 <tcp_tick>
#endif

#ifdef INICHE_TIMERS    /* interval timers? */
   check_interval_timers();
 80402c0:	80403280 	call	8040328 <check_interval_timers>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
 80402c4:	d0e08217 	ldw	r3,-32248(gp)
 80402c8:	d0a0a317 	ldw	r2,-32116(gp)
 80402cc:	1880012e 	bgeu	r3,r2,80402d4 <inet_timer+0x38>
      igmp_fasttimo();
 80402d0:	802a0b40 	call	802a0b4 <igmp_fasttimo>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 80402d4:	d0e0b717 	ldw	r3,-32036(gp)
 80402d8:	d0a0a317 	ldw	r2,-32116(gp)
 80402dc:	18800436 	bltu	r3,r2,80402f0 <inet_timer+0x54>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
 80402e0:	d0a0a317 	ldw	r2,-32116(gp)
 80402e4:	10c0fa04 	addi	r3,r2,1000
 80402e8:	d0a0b717 	ldw	r2,-32036(gp)
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 80402ec:	1880082e 	bgeu	r3,r2,8040310 <inet_timer+0x74>
   {
      nextppp = cticks + TPS;
 80402f0:	d0a0a317 	ldw	r2,-32116(gp)
 80402f4:	10801904 	addi	r2,r2,100
 80402f8:	d0a0b715 	stw	r2,-32036(gp)

      if (port_1s_callout != NULL)
 80402fc:	d0a0b817 	ldw	r2,-32032(gp)
 8040300:	10000226 	beq	r2,zero,804030c <inet_timer+0x70>
         (*port_1s_callout)();
 8040304:	d0a0b817 	ldw	r2,-32032(gp)
 8040308:	103ee83a 	callr	r2

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
 804030c:	802ea7c0 	call	802ea7c <dhc_second>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
 8040310:	0001883a 	nop
 8040314:	e037883a 	mov	sp,fp
 8040318:	dfc00117 	ldw	ra,4(sp)
 804031c:	df000017 	ldw	fp,0(sp)
 8040320:	dec00204 	addi	sp,sp,8
 8040324:	f800283a 	ret

08040328 <check_interval_timers>:

static int numtimers = 0;     /* number of active timers */

static void
check_interval_timers(void)
{
 8040328:	defffc04 	addi	sp,sp,-16
 804032c:	dfc00315 	stw	ra,12(sp)
 8040330:	df000215 	stw	fp,8(sp)
 8040334:	df000204 	addi	fp,sp,8
   int   i;
   int   found = 0;  /* number of valid timers found */
 8040338:	e03ffe15 	stw	zero,-8(fp)

   /* if no timers, just return */
   if (numtimers > 0)
 804033c:	d0a0b917 	ldw	r2,-32028(gp)
 8040340:	0080460e 	bge	zero,r2,804045c <check_interval_timers+0x134>
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
 8040344:	e03fff15 	stw	zero,-4(fp)
 8040348:	00003f06 	br	8040448 <check_interval_timers+0x120>
      {
         if (intimers[i].callback)   /* is this timer active? */
 804034c:	e0bfff17 	ldw	r2,-4(fp)
 8040350:	10c00524 	muli	r3,r2,20
 8040354:	008201b4 	movhi	r2,2054
 8040358:	1885883a 	add	r2,r3,r2
 804035c:	10bfb617 	ldw	r2,-296(r2)
 8040360:	10003626 	beq	r2,zero,804043c <check_interval_timers+0x114>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
 8040364:	e0bfff17 	ldw	r2,-4(fp)
 8040368:	10c00524 	muli	r3,r2,20
 804036c:	008201b4 	movhi	r2,2054
 8040370:	1885883a 	add	r2,r3,r2
 8040374:	10ffb917 	ldw	r3,-284(r2)
 8040378:	d0a0a317 	ldw	r2,-32116(gp)
 804037c:	1880292e 	bgeu	r3,r2,8040424 <check_interval_timers+0xfc>
 8040380:	e0bfff17 	ldw	r2,-4(fp)
 8040384:	10c00524 	muli	r3,r2,20
 8040388:	008201b4 	movhi	r2,2054
 804038c:	1885883a 	add	r2,r3,r2
 8040390:	10bfba17 	ldw	r2,-280(r2)
 8040394:	1000231e 	bne	r2,zero,8040424 <check_interval_timers+0xfc>
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
 8040398:	e0bfff17 	ldw	r2,-4(fp)
 804039c:	10c00524 	muli	r3,r2,20
 80403a0:	008201b4 	movhi	r2,2054
 80403a4:	1885883a 	add	r2,r3,r2
 80403a8:	10ffb817 	ldw	r3,-288(r2)
 80403ac:	d0a0a317 	ldw	r2,-32116(gp)
 80403b0:	1887883a 	add	r3,r3,r2
 80403b4:	e0bfff17 	ldw	r2,-4(fp)
 80403b8:	11000524 	muli	r4,r2,20
 80403bc:	008201b4 	movhi	r2,2054
 80403c0:	2085883a 	add	r2,r4,r2
 80403c4:	10ffb915 	stw	r3,-284(r2)
               intimers[i].inuse = TRUE;
 80403c8:	e0bfff17 	ldw	r2,-4(fp)
 80403cc:	11000524 	muli	r4,r2,20
 80403d0:	00c00044 	movi	r3,1
 80403d4:	008201b4 	movhi	r2,2054
 80403d8:	2085883a 	add	r2,r4,r2
 80403dc:	10ffba15 	stw	r3,-280(r2)
               intimers[i].callback(intimers[i].parm);      /* call user routine */
 80403e0:	e0bfff17 	ldw	r2,-4(fp)
 80403e4:	10c00524 	muli	r3,r2,20
 80403e8:	008201b4 	movhi	r2,2054
 80403ec:	1885883a 	add	r2,r3,r2
 80403f0:	10ffb617 	ldw	r3,-296(r2)
 80403f4:	e0bfff17 	ldw	r2,-4(fp)
 80403f8:	11000524 	muli	r4,r2,20
 80403fc:	008201b4 	movhi	r2,2054
 8040400:	2085883a 	add	r2,r4,r2
 8040404:	10bfb717 	ldw	r2,-292(r2)
 8040408:	1009883a 	mov	r4,r2
 804040c:	183ee83a 	callr	r3
               intimers[i].inuse = FALSE;
 8040410:	e0bfff17 	ldw	r2,-4(fp)
 8040414:	10c00524 	muli	r3,r2,20
 8040418:	008201b4 	movhi	r2,2054
 804041c:	1885883a 	add	r2,r3,r2
 8040420:	103fba15 	stw	zero,-280(r2)
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
 8040424:	e0bffe17 	ldw	r2,-8(fp)
 8040428:	10800044 	addi	r2,r2,1
 804042c:	e0bffe15 	stw	r2,-8(fp)
 8040430:	d0a0b917 	ldw	r2,-32028(gp)
 8040434:	e0fffe17 	ldw	r3,-8(fp)
 8040438:	1880070e 	bge	r3,r2,8040458 <check_interval_timers+0x130>
      for (i = 0; i < NUM_INTIMERS; i++)
 804043c:	e0bfff17 	ldw	r2,-4(fp)
 8040440:	10800044 	addi	r2,r2,1
 8040444:	e0bfff15 	stw	r2,-4(fp)
 8040448:	e0bfff17 	ldw	r2,-4(fp)
 804044c:	10800150 	cmplti	r2,r2,5
 8040450:	103fbe1e 	bne	r2,zero,804034c <check_interval_timers+0x24>
               break;
         }
      }
   }
}
 8040454:	00000106 	br	804045c <check_interval_timers+0x134>
               break;
 8040458:	0001883a 	nop
}
 804045c:	0001883a 	nop
 8040460:	e037883a 	mov	sp,fp
 8040464:	dfc00117 	ldw	ra,4(sp)
 8040468:	df000017 	ldw	fp,0(sp)
 804046c:	dec00204 	addi	sp,sp,8
 8040470:	f800283a 	ret

08040474 <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
 8040474:	defffa04 	addi	sp,sp,-24
 8040478:	dfc00515 	stw	ra,20(sp)
 804047c:	df000415 	stw	fp,16(sp)
 8040480:	df000404 	addi	fp,sp,16
 8040484:	e13ffe15 	stw	r4,-8(fp)
 8040488:	e17ffd15 	stw	r5,-12(fp)
 804048c:	e1bffc15 	stw	r6,-16(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 8040490:	e03fff15 	stw	zero,-4(fp)
 8040494:	00003906 	br	804057c <in_timerset+0x108>
   {
      if(intimers[i].callback == NULL)
 8040498:	e0bfff17 	ldw	r2,-4(fp)
 804049c:	10c00524 	muli	r3,r2,20
 80404a0:	008201b4 	movhi	r2,2054
 80404a4:	1885883a 	add	r2,r3,r2
 80404a8:	10bfb617 	ldw	r2,-296(r2)
 80404ac:	1000301e 	bne	r2,zero,8040570 <in_timerset+0xfc>
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
 80404b0:	e0bfff17 	ldw	r2,-4(fp)
 80404b4:	11000524 	muli	r4,r2,20
 80404b8:	e0fffe17 	ldw	r3,-8(fp)
 80404bc:	008201b4 	movhi	r2,2054
 80404c0:	2085883a 	add	r2,r4,r2
 80404c4:	10ffb615 	stw	r3,-296(r2)
         intimers[i].parm = parm;
 80404c8:	e0bfff17 	ldw	r2,-4(fp)
 80404cc:	11000524 	muli	r4,r2,20
 80404d0:	e0fffc17 	ldw	r3,-16(fp)
 80404d4:	008201b4 	movhi	r2,2054
 80404d8:	2085883a 	add	r2,r4,r2
 80404dc:	10ffb715 	stw	r3,-292(r2)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
 80404e0:	e0bffd17 	ldw	r2,-12(fp)
 80404e4:	01400284 	movi	r5,10
 80404e8:	1009883a 	mov	r4,r2
 80404ec:	8011ee80 	call	8011ee8 <__divsi3>
 80404f0:	1009883a 	mov	r4,r2
 80404f4:	e0bfff17 	ldw	r2,-4(fp)
 80404f8:	10c00524 	muli	r3,r2,20
 80404fc:	008201b4 	movhi	r2,2054
 8040500:	1885883a 	add	r2,r3,r2
 8040504:	113fb815 	stw	r4,-288(r2)
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
 8040508:	e0bfff17 	ldw	r2,-4(fp)
 804050c:	10c00524 	muli	r3,r2,20
 8040510:	008201b4 	movhi	r2,2054
 8040514:	1885883a 	add	r2,r3,r2
 8040518:	10ffb817 	ldw	r3,-288(r2)
 804051c:	d0a0a317 	ldw	r2,-32116(gp)
 8040520:	1887883a 	add	r3,r3,r2
 8040524:	e0bfff17 	ldw	r2,-4(fp)
 8040528:	11000524 	muli	r4,r2,20
 804052c:	008201b4 	movhi	r2,2054
 8040530:	2085883a 	add	r2,r4,r2
 8040534:	10ffb915 	stw	r3,-284(r2)
		 intimers[i].inuse = FALSE;
 8040538:	e0bfff17 	ldw	r2,-4(fp)
 804053c:	10c00524 	muli	r3,r2,20
 8040540:	008201b4 	movhi	r2,2054
 8040544:	1885883a 	add	r2,r3,r2
 8040548:	103fba15 	stw	zero,-280(r2)
         numtimers++;
 804054c:	d0a0b917 	ldw	r2,-32028(gp)
 8040550:	10800044 	addi	r2,r2,1
 8040554:	d0a0b915 	stw	r2,-32028(gp)
         return (long)&intimers[i];
 8040558:	e0bfff17 	ldw	r2,-4(fp)
 804055c:	10c00524 	muli	r3,r2,20
 8040560:	008201b4 	movhi	r2,2054
 8040564:	10bfb604 	addi	r2,r2,-296
 8040568:	1885883a 	add	r2,r3,r2
 804056c:	00000706 	br	804058c <in_timerset+0x118>
   for(i = 0; i < NUM_INTIMERS; i++)
 8040570:	e0bfff17 	ldw	r2,-4(fp)
 8040574:	10800044 	addi	r2,r2,1
 8040578:	e0bfff15 	stw	r2,-4(fp)
 804057c:	e0bfff17 	ldw	r2,-4(fp)
 8040580:	10800150 	cmplti	r2,r2,5
 8040584:	103fc41e 	bne	r2,zero,8040498 <in_timerset+0x24>
      }
   }
   return 0;
 8040588:	0005883a 	mov	r2,zero
}
 804058c:	e037883a 	mov	sp,fp
 8040590:	dfc00117 	ldw	ra,4(sp)
 8040594:	df000017 	ldw	fp,0(sp)
 8040598:	dec00204 	addi	sp,sp,8
 804059c:	f800283a 	ret

080405a0 <in_timerkill>:
 */


int
in_timerkill(long timer)
{
 80405a0:	defffc04 	addi	sp,sp,-16
 80405a4:	dfc00315 	stw	ra,12(sp)
 80405a8:	df000215 	stw	fp,8(sp)
 80405ac:	df000204 	addi	fp,sp,8
 80405b0:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 80405b4:	e03fff15 	stw	zero,-4(fp)
 80405b8:	00001506 	br	8040610 <in_timerkill+0x70>
   {
      if(timer == (long)&intimers[i])
 80405bc:	e0bfff17 	ldw	r2,-4(fp)
 80405c0:	10c00524 	muli	r3,r2,20
 80405c4:	008201b4 	movhi	r2,2054
 80405c8:	10bfb604 	addi	r2,r2,-296
 80405cc:	1885883a 	add	r2,r3,r2
 80405d0:	1007883a 	mov	r3,r2
 80405d4:	e0bffe17 	ldw	r2,-8(fp)
 80405d8:	10c00a1e 	bne	r2,r3,8040604 <in_timerkill+0x64>
      {
         intimers[i].callback = NULL;
 80405dc:	e0bfff17 	ldw	r2,-4(fp)
 80405e0:	10c00524 	muli	r3,r2,20
 80405e4:	008201b4 	movhi	r2,2054
 80405e8:	1885883a 	add	r2,r3,r2
 80405ec:	103fb615 	stw	zero,-296(r2)
         numtimers--;
 80405f0:	d0a0b917 	ldw	r2,-32028(gp)
 80405f4:	10bfffc4 	addi	r2,r2,-1
 80405f8:	d0a0b915 	stw	r2,-32028(gp)
         return 0;      /* OK return */
 80405fc:	0005883a 	mov	r2,zero
 8040600:	00000806 	br	8040624 <in_timerkill+0x84>
   for(i = 0; i < NUM_INTIMERS; i++)
 8040604:	e0bfff17 	ldw	r2,-4(fp)
 8040608:	10800044 	addi	r2,r2,1
 804060c:	e0bfff15 	stw	r2,-4(fp)
 8040610:	e0bfff17 	ldw	r2,-4(fp)
 8040614:	10800150 	cmplti	r2,r2,5
 8040618:	103fe81e 	bne	r2,zero,80405bc <in_timerkill+0x1c>
      }
   }
   dtrap();    /* timer to kill not found */
 804061c:	80301a80 	call	80301a8 <dtrap>
   return ENP_PARAM;
 8040620:	00bffd84 	movi	r2,-10
}
 8040624:	e037883a 	mov	sp,fp
 8040628:	dfc00117 	ldw	ra,4(sp)
 804062c:	df000017 	ldw	fp,0(sp)
 8040630:	dec00204 	addi	sp,sp,8
 8040634:	f800283a 	ret

08040638 <create_apptasks>:
#endif
/* per-application thread definitions */

int
create_apptasks(void)
{
 8040638:	defffe04 	addi	sp,sp,-8
 804063c:	df000115 	stw	fp,4(sp)
 8040640:	df000104 	addi	fp,sp,4
int e = 0;
 8040644:	e03fff15 	stw	zero,-4(fp)
#endif
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
 8040648:	e0bfff17 	ldw	r2,-4(fp)
}
 804064c:	e037883a 	mov	sp,fp
 8040650:	df000017 	ldw	fp,0(sp)
 8040654:	dec00104 	addi	sp,sp,4
 8040658:	f800283a 	ret

0804065c <task_stats>:
 */


void
task_stats(void * pio)
{
 804065c:	defffd04 	addi	sp,sp,-12
 8040660:	dfc00215 	stw	ra,8(sp)
 8040664:	df000115 	stw	fp,4(sp)
 8040668:	df000104 	addi	fp,sp,4
 804066c:	e13fff15 	stw	r4,-4(fp)
   ns_printf(pio, "Task wakeups:");
 8040670:	01420174 	movhi	r5,2053
 8040674:	294fd404 	addi	r5,r5,16208
 8040678:	e13fff17 	ldw	r4,-4(fp)
 804067c:	802bfa40 	call	802bfa4 <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
 8040680:	d0a08517 	ldw	r2,-32236(gp)
 8040684:	100d883a 	mov	r6,r2
 8040688:	01420174 	movhi	r5,2053
 804068c:	294fd804 	addi	r5,r5,16224
 8040690:	e13fff17 	ldw	r4,-4(fp)
 8040694:	802bfa40 	call	802bfa4 <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
 8040698:	d0a08617 	ldw	r2,-32232(gp)
 804069c:	100d883a 	mov	r6,r2
 80406a0:	01420174 	movhi	r5,2053
 80406a4:	294fdc04 	addi	r5,r5,16240
 80406a8:	e13fff17 	ldw	r4,-4(fp)
 80406ac:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
 80406b0:	01420174 	movhi	r5,2053
 80406b4:	294fe004 	addi	r5,r5,16256
 80406b8:	e13fff17 	ldw	r4,-4(fp)
 80406bc:	802bfa40 	call	802bfa4 <ns_printf>
}
 80406c0:	0001883a 	nop
 80406c4:	e037883a 	mov	sp,fp
 80406c8:	dfc00117 	ldw	ra,4(sp)
 80406cc:	df000017 	ldw	fp,0(sp)
 80406d0:	dec00204 	addi	sp,sp,8
 80406d4:	f800283a 	ret

080406d8 <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
 80406d8:	defff804 	addi	sp,sp,-32
 80406dc:	dfc00515 	stw	ra,20(sp)
 80406e0:	df000415 	stw	fp,16(sp)
 80406e4:	df000404 	addi	fp,sp,16
 80406e8:	e13ffd15 	stw	r4,-12(fp)
 80406ec:	e17ffc15 	stw	r5,-16(fp)
 80406f0:	e1800215 	stw	r6,8(fp)
 80406f4:	e1c00315 	stw	r7,12(fp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
 80406f8:	e0bffd17 	ldw	r2,-12(fp)
 80406fc:	10800808 	cmpgei	r2,r2,32
 8040700:	10000c1e 	bne	r2,zero,8040734 <fcntl+0x5c>
  {
    va_start(argp, cmd);
 8040704:	e0800204 	addi	r2,fp,8
 8040708:	e0bffe15 	stw	r2,-8(fp)
    flags = va_arg(argp, long);
 804070c:	e0bffe17 	ldw	r2,-8(fp)
 8040710:	10c00104 	addi	r3,r2,4
 8040714:	e0fffe15 	stw	r3,-8(fp)
 8040718:	10800017 	ldw	r2,0(r2)
 804071c:	e0bfff15 	stw	r2,-4(fp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
 8040720:	e1bfff17 	ldw	r6,-4(fp)
 8040724:	e17ffc17 	ldw	r5,-16(fp)
 8040728:	e13ffd17 	ldw	r4,-12(fp)
 804072c:	804c9ec0 	call	804c9ec <alt_fcntl>
 8040730:	00000c06 	br	8040764 <fcntl+0x8c>
  }
  else
  {
    va_start(argp, cmd);
 8040734:	e0800204 	addi	r2,fp,8
 8040738:	e0bffe15 	stw	r2,-8(fp)
    flags = va_arg(argp, long);
 804073c:	e0bffe17 	ldw	r2,-8(fp)
 8040740:	10c00104 	addi	r3,r2,4
 8040744:	e0fffe15 	stw	r3,-8(fp)
 8040748:	10800017 	ldw	r2,0(r2)
 804074c:	e0bfff15 	stw	r2,-4(fp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
 8040750:	e0bffc17 	ldw	r2,-16(fp)
 8040754:	e1bfff17 	ldw	r6,-4(fp)
 8040758:	100b883a 	mov	r5,r2
 804075c:	e13ffd17 	ldw	r4,-12(fp)
 8040760:	802b41c0 	call	802b41c <bsd_ioctl>
  }
}
 8040764:	e037883a 	mov	sp,fp
 8040768:	dfc00117 	ldw	ra,4(sp)
 804076c:	df000017 	ldw	fp,0(sp)
 8040770:	dec00404 	addi	sp,sp,16
 8040774:	f800283a 	ret

08040778 <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
 8040778:	defffe04 	addi	sp,sp,-8
 804077c:	dfc00115 	stw	ra,4(sp)
 8040780:	df000015 	stw	fp,0(sp)
 8040784:	d839883a 	mov	fp,sp
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 8040788:	01018204 	movi	r4,1544
 804078c:	8041ca00 	call	8041ca0 <reg_type>
 8040790:	10000526 	beq	r2,zero,80407a8 <etainit+0x30>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
 8040794:	01020174 	movhi	r4,2053
 8040798:	210fe104 	addi	r4,r4,16260
 804079c:	8003ca80 	call	8003ca8 <puts>
#endif
      return (1);
 80407a0:	00800044 	movi	r2,1
 80407a4:	00000106 	br	80407ac <etainit+0x34>
   }
   return (0);
 80407a8:	0005883a 	mov	r2,zero
}
 80407ac:	e037883a 	mov	sp,fp
 80407b0:	dfc00117 	ldw	ra,4(sp)
 80407b4:	df000017 	ldw	fp,0(sp)
 80407b8:	dec00204 	addi	sp,sp,8
 80407bc:	f800283a 	ret

080407c0 <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 80407c0:	defff904 	addi	sp,sp,-28
 80407c4:	dfc00615 	stw	ra,24(sp)
 80407c8:	df000515 	stw	fp,20(sp)
 80407cc:	df000504 	addi	fp,sp,20
 80407d0:	e13ffc15 	stw	r4,-16(fp)
 80407d4:	e17ffb15 	stw	r5,-20(fp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 80407d8:	e0bffc17 	ldw	r2,-16(fp)
 80407dc:	10800617 	ldw	r2,24(r2)
 80407e0:	10802717 	ldw	r2,156(r2)
 80407e4:	e0bffe15 	stw	r2,-8(fp)
   int err;

   tp->lasttime = cticks;
 80407e8:	d0e0a317 	ldw	r3,-32116(gp)
 80407ec:	e0bffb17 	ldw	r2,-20(fp)
 80407f0:	10c00615 	stw	r3,24(r2)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 80407f4:	e0bffc17 	ldw	r2,-16(fp)
 80407f8:	10800317 	ldw	r2,12(r2)
 80407fc:	10fffc04 	addi	r3,r2,-16
 8040800:	e0bffc17 	ldw	r2,-16(fp)
 8040804:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen += ETHHDR_SIZE;
 8040808:	e0bffc17 	ldw	r2,-16(fp)
 804080c:	10800417 	ldw	r2,16(r2)
 8040810:	10c00404 	addi	r3,r2,16
 8040814:	e0bffc17 	ldw	r2,-16(fp)
 8040818:	10c00415 	stw	r3,16(r2)
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
 804081c:	e0bffc17 	ldw	r2,-16(fp)
 8040820:	10800317 	ldw	r2,12(r2)
 8040824:	10800084 	addi	r2,r2,2
 8040828:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
 804082c:	e0bffc17 	ldw	r2,-16(fp)
 8040830:	10800117 	ldw	r2,4(r2)
 8040834:	e0fffd17 	ldw	r3,-12(fp)
 8040838:	1880032e 	bgeu	r3,r2,8040848 <et_send+0x88>
      panic("et_send: prepend");
 804083c:	01020174 	movhi	r4,2053
 8040840:	210fed04 	addi	r4,r4,16308
 8040844:	802bd8c0 	call	802bd8c <panic>

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
 8040848:	e0bffb17 	ldw	r2,-20(fp)
 804084c:	10800104 	addi	r2,r2,4
 8040850:	01800184 	movi	r6,6
 8040854:	100b883a 	mov	r5,r2
 8040858:	e13ffd17 	ldw	r4,-12(fp)
 804085c:	800c1f00 	call	800c1f0 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
 8040860:	e0bffd17 	ldw	r2,-12(fp)
 8040864:	10c00184 	addi	r3,r2,6
 8040868:	e0bffe17 	ldw	r2,-8(fp)
 804086c:	10800517 	ldw	r2,20(r2)
 8040870:	01800184 	movi	r6,6
 8040874:	100b883a 	mov	r5,r2
 8040878:	1809883a 	mov	r4,r3
 804087c:	800c1f00 	call	800c1f0 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
 8040880:	e0bffb17 	ldw	r2,-20(fp)
 8040884:	1080070b 	ldhu	r2,28(r2)
 8040888:	10bfffcc 	andi	r2,r2,65535
 804088c:	108000cc 	andi	r2,r2,3
 8040890:	108000a0 	cmpeqi	r2,r2,2
 8040894:	1000041e 	bne	r2,zero,80408a8 <et_send+0xe8>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
 8040898:	e0bffd17 	ldw	r2,-12(fp)
 804089c:	10800304 	addi	r2,r2,12
 80408a0:	00c00204 	movi	r3,8
 80408a4:	10c00005 	stb	r3,0(r2)
 80408a8:	e0bffd17 	ldw	r2,-12(fp)
 80408ac:	10800344 	addi	r2,r2,13
 80408b0:	10000005 	stb	zero,0(r2)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
 80408b4:	e0bffc17 	ldw	r2,-16(fp)
 80408b8:	10800617 	ldw	r2,24(r2)
 80408bc:	10800417 	ldw	r2,16(r2)
 80408c0:	10000726 	beq	r2,zero,80408e0 <et_send+0x120>
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
 80408c4:	e0bffc17 	ldw	r2,-16(fp)
 80408c8:	10800617 	ldw	r2,24(r2)
 80408cc:	10800417 	ldw	r2,16(r2)
 80408d0:	e13ffc17 	ldw	r4,-16(fp)
 80408d4:	103ee83a 	callr	r2
 80408d8:	e0bfff15 	stw	r2,-4(fp)
 80408dc:	00001206 	br	8040928 <et_send+0x168>
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 80408e0:	e0bffc17 	ldw	r2,-16(fp)
 80408e4:	10800617 	ldw	r2,24(r2)
 80408e8:	10800317 	ldw	r2,12(r2)
 80408ec:	e0fffc17 	ldw	r3,-16(fp)
 80408f0:	19000617 	ldw	r4,24(r3)
 80408f4:	e0fffc17 	ldw	r3,-16(fp)
 80408f8:	19400317 	ldw	r5,12(r3)
 80408fc:	e0fffc17 	ldw	r3,-16(fp)
 8040900:	18c00417 	ldw	r3,16(r3)
 8040904:	180d883a 	mov	r6,r3
 8040908:	103ee83a 	callr	r2
 804090c:	e0bfff15 	stw	r2,-4(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8040910:	01000084 	movi	r4,2
 8040914:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 8040918:	e13ffc17 	ldw	r4,-16(fp)
 804091c:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8040920:	01000084 	movi	r4,2
 8040924:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   }

   return (err);
 8040928:	e0bfff17 	ldw	r2,-4(fp)
}
 804092c:	e037883a 	mov	sp,fp
 8040930:	dfc00117 	ldw	ra,4(sp)
 8040934:	df000017 	ldw	fp,0(sp)
 8040938:	dec00204 	addi	sp,sp,8
 804093c:	f800283a 	ret

08040940 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 8040940:	defffb04 	addi	sp,sp,-20
 8040944:	dfc00415 	stw	ra,16(sp)
 8040948:	df000315 	stw	fp,12(sp)
 804094c:	df000304 	addi	fp,sp,12
 8040950:	e13ffd15 	stw	r4,-12(fp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
 8040954:	e0bffd17 	ldw	r2,-12(fp)
 8040958:	10800417 	ldw	r2,16(r2)
 804095c:	e0bfff15 	stw	r2,-4(fp)
   entry->pending = (PACKET)NULL;
 8040960:	e0bffd17 	ldw	r2,-12(fp)
 8040964:	10000415 	stw	zero,16(r2)

   LOCK_NET_RESOURCE(FREEQ_RESID);
 8040968:	01000084 	movi	r4,2
 804096c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
 8040970:	00000906 	br	8040998 <arp_free_pending+0x58>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
 8040974:	e0bfff17 	ldw	r2,-4(fp)
 8040978:	10800017 	ldw	r2,0(r2)
 804097c:	e0bffe15 	stw	r2,-8(fp)
      tmppkt->next = (PACKET)NULL;
 8040980:	e0bfff17 	ldw	r2,-4(fp)
 8040984:	10000015 	stw	zero,0(r2)
      pk_free(tmppkt);               /* free current packet */
 8040988:	e13fff17 	ldw	r4,-4(fp)
 804098c:	802f9440 	call	802f944 <pk_free>
      tmppkt = nextpkt;              /* process the next packet */
 8040990:	e0bffe17 	ldw	r2,-8(fp)
 8040994:	e0bfff15 	stw	r2,-4(fp)
   while (tmppkt)
 8040998:	e0bfff17 	ldw	r2,-4(fp)
 804099c:	103ff51e 	bne	r2,zero,8040974 <arp_free_pending+0x34>
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
 80409a0:	e0bffd17 	ldw	r2,-12(fp)
 80409a4:	10000015 	stw	zero,0(r2)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80409a8:	01000084 	movi	r4,2
 80409ac:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
}
 80409b0:	0001883a 	nop
 80409b4:	e037883a 	mov	sp,fp
 80409b8:	dfc00117 	ldw	ra,4(sp)
 80409bc:	df000017 	ldw	fp,0(sp)
 80409c0:	dec00204 	addi	sp,sp,8
 80409c4:	f800283a 	ret

080409c8 <arp_send_pending>:
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
 80409c8:	defffc04 	addi	sp,sp,-16
 80409cc:	dfc00315 	stw	ra,12(sp)
 80409d0:	df000215 	stw	fp,8(sp)
 80409d4:	df000204 	addi	fp,sp,8
 80409d8:	e13ffe15 	stw	r4,-8(fp)
   PACKET tmppkt = entry->pending;
 80409dc:	e0bffe17 	ldw	r2,-8(fp)
 80409e0:	10800417 	ldw	r2,16(r2)
 80409e4:	e0bfff15 	stw	r2,-4(fp)

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 80409e8:	00000906 	br	8040a10 <arp_send_pending+0x48>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
 80409ec:	e0bfff17 	ldw	r2,-4(fp)
 80409f0:	10c00017 	ldw	r3,0(r2)
 80409f4:	e0bffe17 	ldw	r2,-8(fp)
 80409f8:	10c00415 	stw	r3,16(r2)
      tmppkt->next = (PACKET)NULL;
 80409fc:	e0bfff17 	ldw	r2,-4(fp)
 8040a00:	10000015 	stw	zero,0(r2)
      et_send(tmppkt, entry);          /* try send again */
 8040a04:	e17ffe17 	ldw	r5,-8(fp)
 8040a08:	e13fff17 	ldw	r4,-4(fp)
 8040a0c:	80407c00 	call	80407c0 <et_send>
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 8040a10:	e0bffe17 	ldw	r2,-8(fp)
 8040a14:	10800417 	ldw	r2,16(r2)
 8040a18:	e0bfff15 	stw	r2,-4(fp)
 8040a1c:	e0bfff17 	ldw	r2,-4(fp)
 8040a20:	103ff21e 	bne	r2,zero,80409ec <arp_send_pending+0x24>
   }
}
 8040a24:	0001883a 	nop
 8040a28:	0001883a 	nop
 8040a2c:	e037883a 	mov	sp,fp
 8040a30:	dfc00117 	ldw	ra,4(sp)
 8040a34:	df000017 	ldw	fp,0(sp)
 8040a38:	dec00204 	addi	sp,sp,8
 8040a3c:	f800283a 	ret

08040a40 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
 8040a40:	defff404 	addi	sp,sp,-48
 8040a44:	dfc00b15 	stw	ra,44(sp)
 8040a48:	df000a15 	stw	fp,40(sp)
 8040a4c:	df000a04 	addi	fp,sp,40
 8040a50:	e13ff715 	stw	r4,-36(fp)
 8040a54:	e17ff615 	stw	r5,-40(fp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
 8040a58:	e0bff717 	ldw	r2,-36(fp)
 8040a5c:	10800617 	ldw	r2,24(r2)
 8040a60:	e0bfff15 	stw	r2,-4(fp)
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 8040a64:	e0bff717 	ldw	r2,-36(fp)
 8040a68:	10800617 	ldw	r2,24(r2)
 8040a6c:	10802717 	ldw	r2,156(r2)
 8040a70:	e0bffe15 	stw	r2,-8(fp)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
 8040a74:	e0bff617 	ldw	r2,-40(fp)
 8040a78:	10bfffe0 	cmpeqi	r2,r2,-1
 8040a7c:	1000191e 	bne	r2,zero,8040ae4 <send_arp+0xa4>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask)))
 8040a80:	e0bfff17 	ldw	r2,-4(fp)
 8040a84:	10800c17 	ldw	r2,48(r2)
 8040a88:	0086303a 	nor	r3,zero,r2
 8040a8c:	e0bff617 	ldw	r2,-40(fp)
 8040a90:	1886703a 	and	r3,r3,r2
 8040a94:	e0bfff17 	ldw	r2,-4(fp)
 8040a98:	10800c17 	ldw	r2,48(r2)
 8040a9c:	0084303a 	nor	r2,zero,r2
   if ((dest_ip == 0xFFFFFFFF) ||  
 8040aa0:	18801026 	beq	r3,r2,8040ae4 <send_arp+0xa4>
       || (IN_MULTICAST(ntohl(dest_ip)) ))
 8040aa4:	e0bff617 	ldw	r2,-40(fp)
 8040aa8:	1006d63a 	srli	r3,r2,24
 8040aac:	e0bff617 	ldw	r2,-40(fp)
 8040ab0:	1004d23a 	srli	r2,r2,8
 8040ab4:	10bfc00c 	andi	r2,r2,65280
 8040ab8:	1886b03a 	or	r3,r3,r2
 8040abc:	e0bff617 	ldw	r2,-40(fp)
 8040ac0:	1004923a 	slli	r2,r2,8
 8040ac4:	10803fec 	andhi	r2,r2,255
 8040ac8:	1886b03a 	or	r3,r3,r2
 8040acc:	e0bff617 	ldw	r2,-40(fp)
 8040ad0:	1004963a 	slli	r2,r2,24
 8040ad4:	1884b03a 	or	r2,r3,r2
 8040ad8:	10fc002c 	andhi	r3,r2,61440
 8040adc:	00b80034 	movhi	r2,57344
 8040ae0:	1880391e 	bne	r3,r2,8040bc8 <send_arp+0x188>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
 8040ae4:	e0bff717 	ldw	r2,-36(fp)
 8040ae8:	10800617 	ldw	r2,24(r2)
 8040aec:	100b883a 	mov	r5,r2
 8040af0:	e13ff617 	ldw	r4,-40(fp)
 8040af4:	80410000 	call	8041000 <make_arp_entry>
 8040af8:	e0bffc15 	stw	r2,-16(fp)

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
 8040afc:	e0bffc17 	ldw	r2,-16(fp)
 8040b00:	10800104 	addi	r2,r2,4
 8040b04:	01800184 	movi	r6,6
 8040b08:	01403fc4 	movi	r5,255
 8040b0c:	1009883a 	mov	r4,r2
 8040b10:	80038cc0 	call	80038cc <memset>
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
 8040b14:	e0bff717 	ldw	r2,-36(fp)
 8040b18:	10800617 	ldw	r2,24(r2)
 8040b1c:	10802b17 	ldw	r2,172(r2)
 8040b20:	10002526 	beq	r2,zero,8040bb8 <send_arp+0x178>
 8040b24:	e0bff617 	ldw	r2,-40(fp)
 8040b28:	1006d63a 	srli	r3,r2,24
 8040b2c:	e0bff617 	ldw	r2,-40(fp)
 8040b30:	1004d23a 	srli	r2,r2,8
 8040b34:	10bfc00c 	andi	r2,r2,65280
 8040b38:	1886b03a 	or	r3,r3,r2
 8040b3c:	e0bff617 	ldw	r2,-40(fp)
 8040b40:	1004923a 	slli	r2,r2,8
 8040b44:	10803fec 	andhi	r2,r2,255
 8040b48:	1886b03a 	or	r3,r3,r2
 8040b4c:	e0bff617 	ldw	r2,-40(fp)
 8040b50:	1004963a 	slli	r2,r2,24
 8040b54:	1884b03a 	or	r2,r3,r2
 8040b58:	10fc002c 	andhi	r3,r2,61440
 8040b5c:	00b80034 	movhi	r2,57344
 8040b60:	1880151e 	bne	r3,r2,8040bb8 <send_arp+0x178>
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
 8040b64:	e0bff617 	ldw	r2,-40(fp)
 8040b68:	e0bff815 	stw	r2,-32(fp)
         oldest->t_phy_addr[0] = 0x01;
 8040b6c:	e0bffc17 	ldw	r2,-16(fp)
 8040b70:	00c00044 	movi	r3,1
 8040b74:	10c00105 	stb	r3,4(r2)
         oldest->t_phy_addr[1] = 0x00;
 8040b78:	e0bffc17 	ldw	r2,-16(fp)
 8040b7c:	10000145 	stb	zero,5(r2)
         oldest->t_phy_addr[2] = 0x5e;
 8040b80:	e0bffc17 	ldw	r2,-16(fp)
 8040b84:	00c01784 	movi	r3,94
 8040b88:	10c00185 	stb	r3,6(r2)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
 8040b8c:	e0bff843 	ldbu	r2,-31(fp)
 8040b90:	10801fcc 	andi	r2,r2,127
 8040b94:	1007883a 	mov	r3,r2
 8040b98:	e0bffc17 	ldw	r2,-16(fp)
 8040b9c:	10c001c5 	stb	r3,7(r2)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
 8040ba0:	e0fff883 	ldbu	r3,-30(fp)
 8040ba4:	e0bffc17 	ldw	r2,-16(fp)
 8040ba8:	10c00205 	stb	r3,8(r2)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
 8040bac:	e0fff8c3 	ldbu	r3,-29(fp)
 8040bb0:	e0bffc17 	ldw	r2,-16(fp)
 8040bb4:	10c00245 	stb	r3,9(r2)
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
 8040bb8:	e17ffc17 	ldw	r5,-16(fp)
 8040bbc:	e13ff717 	ldw	r4,-36(fp)
 8040bc0:	80407c00 	call	80407c0 <et_send>
 8040bc4:	0000ae06 	br	8040e80 <send_arp+0x440>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 8040bc8:	e0bff717 	ldw	r2,-36(fp)
 8040bcc:	10c00717 	ldw	r3,28(r2)
 8040bd0:	e0bff717 	ldw	r2,-36(fp)
 8040bd4:	10800617 	ldw	r2,24(r2)
 8040bd8:	10800a17 	ldw	r2,40(r2)
 8040bdc:	18800d1e 	bne	r3,r2,8040c14 <send_arp+0x1d4>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
 8040be0:	e0bff717 	ldw	r2,-36(fp)
 8040be4:	10800717 	ldw	r2,28(r2)
 8040be8:	10803fcc 	andi	r2,r2,255
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 8040bec:	10801fe0 	cmpeqi	r2,r2,127
 8040bf0:	1000081e 	bne	r2,zero,8040c14 <send_arp+0x1d4>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8040bf4:	01000084 	movi	r4,2
 8040bf8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 8040bfc:	e13ff717 	ldw	r4,-36(fp)
 8040c00:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8040c04:	01000084 	movi	r4,2
 8040c08:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_NO_ROUTE;
 8040c0c:	00bff7c4 	movi	r2,-33
 8040c10:	00009b06 	br	8040e80 <send_arp+0x440>
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 8040c14:	01000084 	movi	r4,2
 8040c18:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 8040c1c:	01000c04 	movi	r4,48
 8040c20:	802f6300 	call	802f630 <pk_alloc>
 8040c24:	e0bffd15 	stw	r2,-12(fp)
   if (!arppkt)
 8040c28:	e0bffd17 	ldw	r2,-12(fp)
 8040c2c:	1000061e 	bne	r2,zero,8040c48 <send_arp+0x208>
   {
      pk_free(pkt);
 8040c30:	e13ff717 	ldw	r4,-36(fp)
 8040c34:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8040c38:	01000084 	movi	r4,2
 8040c3c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 8040c40:	00bffa84 	movi	r2,-22
 8040c44:	00008e06 	br	8040e80 <send_arp+0x440>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8040c48:	01000084 	movi	r4,2
 8040c4c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 8040c50:	e0bffd17 	ldw	r2,-12(fp)
 8040c54:	10c00117 	ldw	r3,4(r2)
 8040c58:	e0bffd17 	ldw	r2,-12(fp)
 8040c5c:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 8040c60:	e0bffd17 	ldw	r2,-12(fp)
 8040c64:	00c00c04 	movi	r3,48
 8040c68:	10c00415 	stw	r3,16(r2)
   arppkt->net = pkt->net;
 8040c6c:	e0bff717 	ldw	r2,-36(fp)
 8040c70:	10c00617 	ldw	r3,24(r2)
 8040c74:	e0bffd17 	ldw	r2,-12(fp)
 8040c78:	10c00615 	stw	r3,24(r2)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 8040c7c:	e0bff717 	ldw	r2,-36(fp)
 8040c80:	10800617 	ldw	r2,24(r2)
 8040c84:	100b883a 	mov	r5,r2
 8040c88:	e13ff617 	ldw	r4,-40(fp)
 8040c8c:	80410000 	call	8041000 <make_arp_entry>
 8040c90:	e0bffc15 	stw	r2,-16(fp)

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
 8040c94:	e0bffc17 	ldw	r2,-16(fp)
 8040c98:	e0fff717 	ldw	r3,-36(fp)
 8040c9c:	10c00415 	stw	r3,16(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 8040ca0:	e0bffd17 	ldw	r2,-12(fp)
 8040ca4:	10800117 	ldw	r2,4(r2)
 8040ca8:	10800084 	addi	r2,r2,2
 8040cac:	e0bffb15 	stw	r2,-20(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 8040cb0:	e0bffd17 	ldw	r2,-12(fp)
 8040cb4:	10800117 	ldw	r2,4(r2)
 8040cb8:	10800404 	addi	r2,r2,16
 8040cbc:	e0bffa15 	stw	r2,-24(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 8040cc0:	e0bffa17 	ldw	r2,-24(fp)
 8040cc4:	00c04004 	movi	r3,256
 8040cc8:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 8040ccc:	e0bffa17 	ldw	r2,-24(fp)
 8040cd0:	00c00204 	movi	r3,8
 8040cd4:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
 8040cd8:	e0bffa17 	ldw	r2,-24(fp)
 8040cdc:	00c00184 	movi	r3,6
 8040ce0:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
 8040ce4:	e0bffa17 	ldw	r2,-24(fp)
 8040ce8:	00c00104 	movi	r3,4
 8040cec:	10c00145 	stb	r3,5(r2)
   arphdr->ar_op = ARREQ;
 8040cf0:	e0bffa17 	ldw	r2,-24(fp)
 8040cf4:	00c04004 	movi	r3,256
 8040cf8:	10c0018d 	sth	r3,6(r2)
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
 8040cfc:	e0bffa17 	ldw	r2,-24(fp)
 8040d00:	e0fff617 	ldw	r3,-40(fp)
 8040d04:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 8040d08:	e0bff717 	ldw	r2,-36(fp)
 8040d0c:	10800617 	ldw	r2,24(r2)
 8040d10:	10c00a17 	ldw	r3,40(r2)
 8040d14:	e0bffa17 	ldw	r2,-24(fp)
 8040d18:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 8040d1c:	e0bffa17 	ldw	r2,-24(fp)
 8040d20:	10c00204 	addi	r3,r2,8
 8040d24:	e0bffe17 	ldw	r2,-8(fp)
 8040d28:	10800517 	ldw	r2,20(r2)
 8040d2c:	01800184 	movi	r6,6
 8040d30:	100b883a 	mov	r5,r2
 8040d34:	1809883a 	mov	r4,r3
 8040d38:	800c1f00 	call	800c1f0 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 8040d3c:	01800184 	movi	r6,6
 8040d40:	01403fc4 	movi	r5,255
 8040d44:	e13ffb17 	ldw	r4,-20(fp)
 8040d48:	80038cc0 	call	80038cc <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 8040d4c:	e0bffb17 	ldw	r2,-20(fp)
 8040d50:	10c00184 	addi	r3,r2,6
 8040d54:	e0bffe17 	ldw	r2,-8(fp)
 8040d58:	10800517 	ldw	r2,20(r2)
 8040d5c:	01800184 	movi	r6,6
 8040d60:	100b883a 	mov	r5,r2
 8040d64:	1809883a 	mov	r4,r3
 8040d68:	800c1f00 	call	800c1f0 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 8040d6c:	e0bffb17 	ldw	r2,-20(fp)
 8040d70:	10800304 	addi	r2,r2,12
 8040d74:	00c00204 	movi	r3,8
 8040d78:	10c00005 	stb	r3,0(r2)
 8040d7c:	e0bffb17 	ldw	r2,-20(fp)
 8040d80:	10800344 	addi	r2,r2,13
 8040d84:	00c00184 	movi	r3,6
 8040d88:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 8040d8c:	e0bffa17 	ldw	r2,-24(fp)
 8040d90:	e0bff915 	stw	r2,-28(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 8040d94:	e0bff917 	ldw	r2,-28(fp)
 8040d98:	10c00204 	addi	r3,r2,8
 8040d9c:	e0bffa17 	ldw	r2,-24(fp)
 8040da0:	10800204 	addi	r2,r2,8
 8040da4:	01800184 	movi	r6,6
 8040da8:	100b883a 	mov	r5,r2
 8040dac:	1809883a 	mov	r4,r3
 8040db0:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 8040db4:	e0bff917 	ldw	r2,-28(fp)
 8040db8:	10c00384 	addi	r3,r2,14
 8040dbc:	e0bffa17 	ldw	r2,-24(fp)
 8040dc0:	10800404 	addi	r2,r2,16
 8040dc4:	01800104 	movi	r6,4
 8040dc8:	100b883a 	mov	r5,r2
 8040dcc:	1809883a 	mov	r4,r3
 8040dd0:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 8040dd4:	e0bff917 	ldw	r2,-28(fp)
 8040dd8:	10c00484 	addi	r3,r2,18
 8040ddc:	e0bffa17 	ldw	r2,-24(fp)
 8040de0:	10800504 	addi	r2,r2,20
 8040de4:	01800184 	movi	r6,6
 8040de8:	100b883a 	mov	r5,r2
 8040dec:	1809883a 	mov	r4,r3
 8040df0:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 8040df4:	e0bff917 	ldw	r2,-28(fp)
 8040df8:	10c00604 	addi	r3,r2,24
 8040dfc:	e0bffa17 	ldw	r2,-24(fp)
 8040e00:	10800704 	addi	r2,r2,28
 8040e04:	01800104 	movi	r6,4
 8040e08:	100b883a 	mov	r5,r2
 8040e0c:	1809883a 	mov	r4,r3
 8040e10:	800c1f00 	call	800c1f0 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 8040e14:	e0bfff17 	ldw	r2,-4(fp)
 8040e18:	10800417 	ldw	r2,16(r2)
 8040e1c:	10000526 	beq	r2,zero,8040e34 <send_arp+0x3f4>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 8040e20:	e0bfff17 	ldw	r2,-4(fp)
 8040e24:	10800417 	ldw	r2,16(r2)
 8040e28:	e13ffd17 	ldw	r4,-12(fp)
 8040e2c:	103ee83a 	callr	r2
 8040e30:	00000f06 	br	8040e70 <send_arp+0x430>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 8040e34:	e0bfff17 	ldw	r2,-4(fp)
 8040e38:	10800317 	ldw	r2,12(r2)
 8040e3c:	e0fffd17 	ldw	r3,-12(fp)
 8040e40:	19000617 	ldw	r4,24(r3)
 8040e44:	e0fffd17 	ldw	r3,-12(fp)
 8040e48:	18c00117 	ldw	r3,4(r3)
 8040e4c:	01800c04 	movi	r6,48
 8040e50:	180b883a 	mov	r5,r3
 8040e54:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8040e58:	01000084 	movi	r4,2
 8040e5c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 8040e60:	e13ffd17 	ldw	r4,-12(fp)
 8040e64:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8040e68:	01000084 	movi	r4,2
 8040e6c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 8040e70:	d0a0be17 	ldw	r2,-32008(gp)
 8040e74:	10800044 	addi	r2,r2,1
 8040e78:	d0a0be15 	stw	r2,-32008(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 8040e7c:	00800044 	movi	r2,1
}
 8040e80:	e037883a 	mov	sp,fp
 8040e84:	dfc00117 	ldw	ra,4(sp)
 8040e88:	df000017 	ldw	fp,0(sp)
 8040e8c:	dec00204 	addi	sp,sp,8
 8040e90:	f800283a 	ret

08040e94 <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 8040e94:	defff804 	addi	sp,sp,-32
 8040e98:	dfc00715 	stw	ra,28(sp)
 8040e9c:	df000615 	stw	fp,24(sp)
 8040ea0:	df000604 	addi	fp,sp,24
 8040ea4:	e13ffa15 	stw	r4,-24(fp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
 8040ea8:	e03ffe15 	stw	zero,-8(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
 8040eac:	e03ffd15 	stw	zero,-12(fp)
   struct arptabent *empty  = (struct arptabent *)NULL;
 8040eb0:	e03ffc15 	stw	zero,-16(fp)
   unsigned long lticks = cticks;
 8040eb4:	d0a0a317 	ldw	r2,-32116(gp)
 8040eb8:	e0bffb15 	stw	r2,-20(fp)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 8040ebc:	008201b4 	movhi	r2,2054
 8040ec0:	10bfcf04 	addi	r2,r2,-196
 8040ec4:	e0bfff15 	stw	r2,-4(fp)
 8040ec8:	00003b06 	br	8040fb8 <find_oldest_arp+0x124>
   {
      /* age out old, pending entries */
      if (tp->pending)
 8040ecc:	e0bfff17 	ldw	r2,-4(fp)
 8040ed0:	10800417 	ldw	r2,16(r2)
 8040ed4:	10000b26 	beq	r2,zero,8040f04 <find_oldest_arp+0x70>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
 8040ed8:	e0bfff17 	ldw	r2,-4(fp)
 8040edc:	10800517 	ldw	r2,20(r2)
 8040ee0:	e0fffb17 	ldw	r3,-20(fp)
 8040ee4:	1885c83a 	sub	r2,r3,r2
 8040ee8:	10801970 	cmpltui	r2,r2,101
 8040eec:	1000171e 	bne	r2,zero,8040f4c <find_oldest_arp+0xb8>
         {
            arp_free_pending(tp);   /* free pending packets */
 8040ef0:	e13fff17 	ldw	r4,-4(fp)
 8040ef4:	80409400 	call	8040940 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 8040ef8:	e0bfff17 	ldw	r2,-4(fp)
 8040efc:	10000015 	stw	zero,0(r2)
 8040f00:	00001206 	br	8040f4c <find_oldest_arp+0xb8>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
 8040f04:	e0bfff17 	ldw	r2,-4(fp)
 8040f08:	10800017 	ldw	r2,0(r2)
 8040f0c:	10000f26 	beq	r2,zero,8040f4c <find_oldest_arp+0xb8>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
 8040f10:	e0bfff17 	ldw	r2,-4(fp)
 8040f14:	10800517 	ldw	r2,20(r2)
 8040f18:	e0fffb17 	ldw	r3,-20(fp)
 8040f1c:	1885c83a 	sub	r2,r3,r2
 8040f20:	1007883a 	mov	r3,r2
 8040f24:	d0a04d17 	ldw	r2,-32460(gp)
      else if ((tp->t_pro_addr != 0) &&
 8040f28:	18800816 	blt	r3,r2,8040f4c <find_oldest_arp+0xb8>
               ((int)(lticks - tp->lasttime)   >= TPS))
 8040f2c:	e0bfff17 	ldw	r2,-4(fp)
 8040f30:	10800617 	ldw	r2,24(r2)
 8040f34:	e0fffb17 	ldw	r3,-20(fp)
 8040f38:	1885c83a 	sub	r2,r3,r2
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
 8040f3c:	10801910 	cmplti	r2,r2,100
 8040f40:	1000021e 	bne	r2,zero,8040f4c <find_oldest_arp+0xb8>
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
 8040f44:	e0bfff17 	ldw	r2,-4(fp)
 8040f48:	10000015 	stw	zero,0(r2)
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
 8040f4c:	e0bfff17 	ldw	r2,-4(fp)
 8040f50:	10800017 	ldw	r2,0(r2)
 8040f54:	e0fffa17 	ldw	r3,-24(fp)
 8040f58:	1880031e 	bne	r3,r2,8040f68 <find_oldest_arp+0xd4>
      {
         exact = tp;
 8040f5c:	e0bfff17 	ldw	r2,-4(fp)
 8040f60:	e0bffe15 	stw	r2,-8(fp)
 8040f64:	00001106 	br	8040fac <find_oldest_arp+0x118>
      }
      else if (tp->t_pro_addr != 0)
 8040f68:	e0bfff17 	ldw	r2,-4(fp)
 8040f6c:	10800017 	ldw	r2,0(r2)
 8040f70:	10000a26 	beq	r2,zero,8040f9c <find_oldest_arp+0x108>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
 8040f74:	e0bffd17 	ldw	r2,-12(fp)
 8040f78:	10000526 	beq	r2,zero,8040f90 <find_oldest_arp+0xfc>
 8040f7c:	e0bfff17 	ldw	r2,-4(fp)
 8040f80:	10c00617 	ldw	r3,24(r2)
 8040f84:	e0bffd17 	ldw	r2,-12(fp)
 8040f88:	10800617 	ldw	r2,24(r2)
 8040f8c:	1880072e 	bgeu	r3,r2,8040fac <find_oldest_arp+0x118>
            oldest = tp;
 8040f90:	e0bfff17 	ldw	r2,-4(fp)
 8040f94:	e0bffd15 	stw	r2,-12(fp)
 8040f98:	00000406 	br	8040fac <find_oldest_arp+0x118>
      }
      else if (!empty)
 8040f9c:	e0bffc17 	ldw	r2,-16(fp)
 8040fa0:	1000021e 	bne	r2,zero,8040fac <find_oldest_arp+0x118>
         empty = tp;          /* grab first empty slot */
 8040fa4:	e0bfff17 	ldw	r2,-4(fp)
 8040fa8:	e0bffc15 	stw	r2,-16(fp)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 8040fac:	e0bfff17 	ldw	r2,-4(fp)
 8040fb0:	10800804 	addi	r2,r2,32
 8040fb4:	e0bfff15 	stw	r2,-4(fp)
 8040fb8:	e0ffff17 	ldw	r3,-4(fp)
 8040fbc:	008201b4 	movhi	r2,2054
 8040fc0:	10800f04 	addi	r2,r2,60
 8040fc4:	18bfc136 	bltu	r3,r2,8040ecc <find_oldest_arp+0x38>
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
 8040fc8:	e0bffe17 	ldw	r2,-8(fp)
 8040fcc:	1000061e 	bne	r2,zero,8040fe8 <find_oldest_arp+0x154>
 8040fd0:	e0bffc17 	ldw	r2,-16(fp)
 8040fd4:	10000226 	beq	r2,zero,8040fe0 <find_oldest_arp+0x14c>
 8040fd8:	e0bffc17 	ldw	r2,-16(fp)
 8040fdc:	00000306 	br	8040fec <find_oldest_arp+0x158>
 8040fe0:	e0bffd17 	ldw	r2,-12(fp)
 8040fe4:	00000106 	br	8040fec <find_oldest_arp+0x158>
 8040fe8:	e0bffe17 	ldw	r2,-8(fp)
}
 8040fec:	e037883a 	mov	sp,fp
 8040ff0:	dfc00117 	ldw	ra,4(sp)
 8040ff4:	df000017 	ldw	fp,0(sp)
 8040ff8:	dec00204 	addi	sp,sp,8
 8040ffc:	f800283a 	ret

08041000 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 8041000:	defffa04 	addi	sp,sp,-24
 8041004:	dfc00515 	stw	ra,20(sp)
 8041008:	df000415 	stw	fp,16(sp)
 804100c:	df000404 	addi	fp,sp,16
 8041010:	e13ffd15 	stw	r4,-12(fp)
 8041014:	e17ffc15 	stw	r5,-16(fp)
   struct arptabent *oldest;
   unsigned long lticks = cticks;
 8041018:	d0a0a317 	ldw	r2,-32116(gp)
 804101c:	e0bfff15 	stw	r2,-4(fp)

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
 8041020:	e13ffd17 	ldw	r4,-12(fp)
 8041024:	8040e940 	call	8040e94 <find_oldest_arp>
 8041028:	e0bffe15 	stw	r2,-8(fp)

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
 804102c:	e0bffe17 	ldw	r2,-8(fp)
 8041030:	10800417 	ldw	r2,16(r2)
 8041034:	10000626 	beq	r2,zero,8041050 <make_arp_entry+0x50>
 8041038:	e0bffe17 	ldw	r2,-8(fp)
 804103c:	10800017 	ldw	r2,0(r2)
 8041040:	e0fffd17 	ldw	r3,-12(fp)
 8041044:	18800226 	beq	r3,r2,8041050 <make_arp_entry+0x50>
   {
      arp_free_pending(oldest);
 8041048:	e13ffe17 	ldw	r4,-8(fp)
 804104c:	80409400 	call	8040940 <arp_free_pending>
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
 8041050:	e0bffe17 	ldw	r2,-8(fp)
 8041054:	e0fffd17 	ldw	r3,-12(fp)
 8041058:	10c00015 	stw	r3,0(r2)
   oldest->net = net;
 804105c:	e0bffe17 	ldw	r2,-8(fp)
 8041060:	e0fffc17 	ldw	r3,-16(fp)
 8041064:	10c00315 	stw	r3,12(r2)
   oldest->flags = 0;
 8041068:	e0bffe17 	ldw	r2,-8(fp)
 804106c:	1000070d 	sth	zero,28(r2)
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
 8041070:	e0bffe17 	ldw	r2,-8(fp)
 8041074:	10800104 	addi	r2,r2,4
 8041078:	01800184 	movi	r6,6
 804107c:	000b883a 	mov	r5,zero
 8041080:	1009883a 	mov	r4,r2
 8041084:	80038cc0 	call	80038cc <memset>
   oldest->createtime = oldest->lasttime = lticks;
 8041088:	e0bffe17 	ldw	r2,-8(fp)
 804108c:	e0ffff17 	ldw	r3,-4(fp)
 8041090:	10c00615 	stw	r3,24(r2)
 8041094:	e0bffe17 	ldw	r2,-8(fp)
 8041098:	10c00617 	ldw	r3,24(r2)
 804109c:	e0bffe17 	ldw	r2,-8(fp)
 80410a0:	10c00515 	stw	r3,20(r2)

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
 80410a4:	d0a0ba17 	ldw	r2,-32024(gp)
 80410a8:	1000071e 	bne	r2,zero,80410c8 <make_arp_entry+0xc8>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
 80410ac:	000d883a 	mov	r6,zero
 80410b0:	0149c404 	movi	r5,10000
 80410b4:	01020134 	movhi	r4,2052
 80410b8:	2105e704 	addi	r4,r4,6044
 80410bc:	80404740 	call	8040474 <in_timerset>
 80410c0:	d0a0ba15 	stw	r2,-32024(gp)
 80410c4:	00000706 	br	80410e4 <make_arp_entry+0xe4>
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
              ((struct intimer *)arp_timer)->interval + lticks;
 80410c8:	d0a0ba17 	ldw	r2,-32024(gp)
 80410cc:	10c00217 	ldw	r3,8(r2)
      ((struct intimer *)arp_timer)->tmo =
 80410d0:	d0a0ba17 	ldw	r2,-32024(gp)
 80410d4:	1009883a 	mov	r4,r2
              ((struct intimer *)arp_timer)->interval + lticks;
 80410d8:	e0bfff17 	ldw	r2,-4(fp)
 80410dc:	1885883a 	add	r2,r3,r2
      ((struct intimer *)arp_timer)->tmo =
 80410e0:	20800315 	stw	r2,12(r4)
   }

   return oldest;
 80410e4:	e0bffe17 	ldw	r2,-8(fp)
}
 80410e8:	e037883a 	mov	sp,fp
 80410ec:	dfc00117 	ldw	ra,4(sp)
 80410f0:	df000017 	ldw	fp,0(sp)
 80410f4:	dec00204 	addi	sp,sp,8
 80410f8:	f800283a 	ret

080410fc <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 80410fc:	defff704 	addi	sp,sp,-36
 8041100:	dfc00815 	stw	ra,32(sp)
 8041104:	df000715 	stw	fp,28(sp)
 8041108:	df000704 	addi	fp,sp,28
 804110c:	e13ff915 	stw	r4,-28(fp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 8041110:	01000084 	movi	r4,2
 8041114:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
 8041118:	01000c04 	movi	r4,48
 804111c:	802f6300 	call	802f630 <pk_alloc>
 8041120:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041124:	01000084 	movi	r4,2
 8041128:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (!outpkt)
 804112c:	e0bfff17 	ldw	r2,-4(fp)
 8041130:	1000021e 	bne	r2,zero,804113c <arpReply+0x40>
   {
      dtrap();
 8041134:	80301a80 	call	80301a8 <dtrap>
      return;
 8041138:	00009b06 	br	80413a8 <arpReply+0x2ac>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
 804113c:	e0bff917 	ldw	r2,-28(fp)
 8041140:	10c00617 	ldw	r3,24(r2)
 8041144:	e0bfff17 	ldw	r2,-4(fp)
 8041148:	10c00615 	stw	r3,24(r2)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 804114c:	e0bff917 	ldw	r2,-28(fp)
 8041150:	10800317 	ldw	r2,12(r2)
 8041154:	10bffc84 	addi	r2,r2,-14
 8041158:	e0bffe15 	stw	r2,-8(fp)
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
 804115c:	e0bfff17 	ldw	r2,-4(fp)
 8041160:	10800117 	ldw	r2,4(r2)
 8041164:	10800084 	addi	r2,r2,2
 8041168:	e0bffd15 	stw	r2,-12(fp)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 804116c:	e0bffd17 	ldw	r2,-12(fp)
 8041170:	10800304 	addi	r2,r2,12
 8041174:	00c00204 	movi	r3,8
 8041178:	10c00005 	stb	r3,0(r2)
 804117c:	e0bffd17 	ldw	r2,-12(fp)
 8041180:	10800344 	addi	r2,r2,13
 8041184:	00c00184 	movi	r3,6
 8041188:	10c00005 	stb	r3,0(r2)
      in = (struct arp_hdr *)(pkt->nb_prot);
 804118c:	e0bff917 	ldw	r2,-28(fp)
 8041190:	10800317 	ldw	r2,12(r2)
 8041194:	e0bffc15 	stw	r2,-16(fp)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
 8041198:	e0bfff17 	ldw	r2,-4(fp)
 804119c:	10800117 	ldw	r2,4(r2)
 80411a0:	10800404 	addi	r2,r2,16
 80411a4:	e0bffb15 	stw	r2,-20(fp)
      outpkt->nb_plen = arpsize;
 80411a8:	e0bfff17 	ldw	r2,-4(fp)
 80411ac:	00c00c04 	movi	r3,48
 80411b0:	10c00415 	stw	r3,16(r2)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 80411b4:	e0bffb17 	ldw	r2,-20(fp)
 80411b8:	00c04004 	movi	r3,256
 80411bc:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
 80411c0:	e0bffb17 	ldw	r2,-20(fp)
 80411c4:	00c00204 	movi	r3,8
 80411c8:	10c0008d 	sth	r3,2(r2)
   out->ar_hln = 6;
 80411cc:	e0bffb17 	ldw	r2,-20(fp)
 80411d0:	00c00184 	movi	r3,6
 80411d4:	10c00105 	stb	r3,4(r2)
   out->ar_pln = 4;
 80411d8:	e0bffb17 	ldw	r2,-20(fp)
 80411dc:	00c00104 	movi	r3,4
 80411e0:	10c00145 	stb	r3,5(r2)
   out->ar_op = ARREP;
 80411e4:	e0bffb17 	ldw	r2,-20(fp)
 80411e8:	00c08004 	movi	r3,512
 80411ec:	10c0018d 	sth	r3,6(r2)
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
 80411f0:	e0bffc17 	ldw	r2,-16(fp)
 80411f4:	10c00417 	ldw	r3,16(r2)
 80411f8:	e0bffb17 	ldw	r2,-20(fp)
 80411fc:	10c00715 	stw	r3,28(r2)
   out->ar_spa = in->ar_tpa;
 8041200:	e0bffc17 	ldw	r2,-16(fp)
 8041204:	10c00717 	ldw	r3,28(r2)
 8041208:	e0bffb17 	ldw	r2,-20(fp)
 804120c:	10c00415 	stw	r3,16(r2)
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 8041210:	e0bffb17 	ldw	r2,-20(fp)
 8041214:	10c00504 	addi	r3,r2,20
 8041218:	e0bffc17 	ldw	r2,-16(fp)
 804121c:	10800204 	addi	r2,r2,8
 8041220:	01800184 	movi	r6,6
 8041224:	100b883a 	mov	r5,r2
 8041228:	1809883a 	mov	r4,r3
 804122c:	800c1f00 	call	800c1f0 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
 8041230:	e0bffb17 	ldw	r2,-20(fp)
 8041234:	10c00204 	addi	r3,r2,8
 8041238:	e0bfff17 	ldw	r2,-4(fp)
 804123c:	10800617 	ldw	r2,24(r2)
 8041240:	10802717 	ldw	r2,156(r2)
 8041244:	10800517 	ldw	r2,20(r2)
 8041248:	01800184 	movi	r6,6
 804124c:	100b883a 	mov	r5,r2
 8041250:	1809883a 	mov	r4,r3
 8041254:	800c1f00 	call	800c1f0 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
 8041258:	e0bffe17 	ldw	r2,-8(fp)
 804125c:	10800184 	addi	r2,r2,6
 8041260:	01800184 	movi	r6,6
 8041264:	100b883a 	mov	r5,r2
 8041268:	e13ffd17 	ldw	r4,-12(fp)
 804126c:	800c1f00 	call	800c1f0 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
 8041270:	e0bffd17 	ldw	r2,-12(fp)
 8041274:	10c00184 	addi	r3,r2,6
 8041278:	e0bfff17 	ldw	r2,-4(fp)
 804127c:	10800617 	ldw	r2,24(r2)
 8041280:	10802717 	ldw	r2,156(r2)
 8041284:	10800517 	ldw	r2,20(r2)
 8041288:	01800184 	movi	r6,6
 804128c:	100b883a 	mov	r5,r2
 8041290:	1809883a 	mov	r4,r3
 8041294:	800c1f00 	call	800c1f0 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
 8041298:	e0bffb17 	ldw	r2,-20(fp)
 804129c:	e0bffa15 	stw	r2,-24(fp)
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
 80412a0:	e0bffa17 	ldw	r2,-24(fp)
 80412a4:	10c00204 	addi	r3,r2,8
 80412a8:	e0bffb17 	ldw	r2,-20(fp)
 80412ac:	10800204 	addi	r2,r2,8
 80412b0:	01800184 	movi	r6,6
 80412b4:	100b883a 	mov	r5,r2
 80412b8:	1809883a 	mov	r4,r3
 80412bc:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
 80412c0:	e0bffa17 	ldw	r2,-24(fp)
 80412c4:	10c00384 	addi	r3,r2,14
 80412c8:	e0bffb17 	ldw	r2,-20(fp)
 80412cc:	10800404 	addi	r2,r2,16
 80412d0:	01800104 	movi	r6,4
 80412d4:	100b883a 	mov	r5,r2
 80412d8:	1809883a 	mov	r4,r3
 80412dc:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
 80412e0:	e0bffa17 	ldw	r2,-24(fp)
 80412e4:	10c00484 	addi	r3,r2,18
 80412e8:	e0bffb17 	ldw	r2,-20(fp)
 80412ec:	10800504 	addi	r2,r2,20
 80412f0:	01800184 	movi	r6,6
 80412f4:	100b883a 	mov	r5,r2
 80412f8:	1809883a 	mov	r4,r3
 80412fc:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
 8041300:	e0bffa17 	ldw	r2,-24(fp)
 8041304:	10c00604 	addi	r3,r2,24
 8041308:	e0bffb17 	ldw	r2,-20(fp)
 804130c:	10800704 	addi	r2,r2,28
 8041310:	01800104 	movi	r6,4
 8041314:	100b883a 	mov	r5,r2
 8041318:	1809883a 	mov	r4,r3
 804131c:	800c1f00 	call	800c1f0 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
 8041320:	e0bfff17 	ldw	r2,-4(fp)
 8041324:	10800617 	ldw	r2,24(r2)
 8041328:	10800417 	ldw	r2,16(r2)
 804132c:	10000a26 	beq	r2,zero,8041358 <arpReply+0x25c>
   {
      outpkt->nb_prot = outpkt->nb_buff;
 8041330:	e0bfff17 	ldw	r2,-4(fp)
 8041334:	10c00117 	ldw	r3,4(r2)
 8041338:	e0bfff17 	ldw	r2,-4(fp)
 804133c:	10c00315 	stw	r3,12(r2)
      outpkt->net->pkt_send(outpkt);
 8041340:	e0bfff17 	ldw	r2,-4(fp)
 8041344:	10800617 	ldw	r2,24(r2)
 8041348:	10800417 	ldw	r2,16(r2)
 804134c:	e13fff17 	ldw	r4,-4(fp)
 8041350:	103ee83a 	callr	r2
 8041354:	00001106 	br	804139c <arpReply+0x2a0>
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
 8041358:	e0bfff17 	ldw	r2,-4(fp)
 804135c:	10800617 	ldw	r2,24(r2)
 8041360:	10800317 	ldw	r2,12(r2)
 8041364:	e0fff917 	ldw	r3,-28(fp)
 8041368:	19000617 	ldw	r4,24(r3)
 804136c:	e0ffff17 	ldw	r3,-4(fp)
 8041370:	19400117 	ldw	r5,4(r3)
 8041374:	e0ffff17 	ldw	r3,-4(fp)
 8041378:	18c00417 	ldw	r3,16(r3)
 804137c:	180d883a 	mov	r6,r3
 8041380:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041384:	01000084 	movi	r4,2
 8041388:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
 804138c:	e13fff17 	ldw	r4,-4(fp)
 8041390:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041394:	01000084 	movi	r4,2
 8041398:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
 804139c:	d0a0c017 	ldw	r2,-32000(gp)
 80413a0:	10800044 	addi	r2,r2,1
 80413a4:	d0a0c015 	stw	r2,-32000(gp)
}
 80413a8:	e037883a 	mov	sp,fp
 80413ac:	dfc00117 	ldw	ra,4(sp)
 80413b0:	df000017 	ldw	fp,0(sp)
 80413b4:	dec00204 	addi	sp,sp,8
 80413b8:	f800283a 	ret

080413bc <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 80413bc:	defff904 	addi	sp,sp,-28
 80413c0:	dfc00615 	stw	ra,24(sp)
 80413c4:	df000515 	stw	fp,20(sp)
 80413c8:	df000504 	addi	fp,sp,20
 80413cc:	e13ffb15 	stw	r4,-20(fp)
   char *eth;
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 80413d0:	e0bffb17 	ldw	r2,-20(fp)
 80413d4:	10800317 	ldw	r2,12(r2)
 80413d8:	10bffc84 	addi	r2,r2,-14
 80413dc:	e0bffe15 	stw	r2,-8(fp)
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
 80413e0:	e0bffb17 	ldw	r2,-20(fp)
 80413e4:	10800317 	ldw	r2,12(r2)
 80413e8:	e0bffd15 	stw	r2,-12(fp)
#endif   /* IEEE_802_3_ONLY */
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 80413ec:	e0bffd17 	ldw	r2,-12(fp)
 80413f0:	e0bffc15 	stw	r2,-16(fp)
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 80413f4:	e0bffd17 	ldw	r2,-12(fp)
 80413f8:	10c00704 	addi	r3,r2,28
 80413fc:	e0bffc17 	ldw	r2,-16(fp)
 8041400:	10800604 	addi	r2,r2,24
 8041404:	01800104 	movi	r6,4
 8041408:	100b883a 	mov	r5,r2
 804140c:	1809883a 	mov	r4,r3
 8041410:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
 8041414:	e0bffd17 	ldw	r2,-12(fp)
 8041418:	10c00504 	addi	r3,r2,20
 804141c:	e0bffc17 	ldw	r2,-16(fp)
 8041420:	10800484 	addi	r2,r2,18
 8041424:	01800184 	movi	r6,6
 8041428:	100b883a 	mov	r5,r2
 804142c:	1809883a 	mov	r4,r3
 8041430:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
 8041434:	e0bffd17 	ldw	r2,-12(fp)
 8041438:	10c00404 	addi	r3,r2,16
 804143c:	e0bffc17 	ldw	r2,-16(fp)
 8041440:	10800384 	addi	r2,r2,14
 8041444:	01800104 	movi	r6,4
 8041448:	100b883a 	mov	r5,r2
 804144c:	1809883a 	mov	r4,r3
 8041450:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
 8041454:	e0bffd17 	ldw	r2,-12(fp)
 8041458:	10c00204 	addi	r3,r2,8
 804145c:	e0bffc17 	ldw	r2,-16(fp)
 8041460:	10800204 	addi	r2,r2,8
 8041464:	01800184 	movi	r6,6
 8041468:	100b883a 	mov	r5,r2
 804146c:	1809883a 	mov	r4,r3
 8041470:	800c1f00 	call	800c1f0 <memmove>
#endif
   USE_ARG(eth);

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 8041474:	e0bffd17 	ldw	r2,-12(fp)
 8041478:	10c00717 	ldw	r3,28(r2)
 804147c:	e0bffb17 	ldw	r2,-20(fp)
 8041480:	10800617 	ldw	r2,24(r2)
 8041484:	10800a17 	ldw	r2,40(r2)
 8041488:	18801c26 	beq	r3,r2,80414fc <arprcv+0x140>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
 804148c:	e0bffd17 	ldw	r2,-12(fp)
 8041490:	10800717 	ldw	r2,28(r2)
 8041494:	1006d63a 	srli	r3,r2,24
 8041498:	e0bffd17 	ldw	r2,-12(fp)
 804149c:	10800717 	ldw	r2,28(r2)
 80414a0:	1004d23a 	srli	r2,r2,8
 80414a4:	10bfc00c 	andi	r2,r2,65280
 80414a8:	1886b03a 	or	r3,r3,r2
 80414ac:	e0bffd17 	ldw	r2,-12(fp)
 80414b0:	10800717 	ldw	r2,28(r2)
 80414b4:	1004923a 	slli	r2,r2,8
 80414b8:	10803fec 	andhi	r2,r2,255
 80414bc:	1886b03a 	or	r3,r3,r2
 80414c0:	e0bffd17 	ldw	r2,-12(fp)
 80414c4:	10800717 	ldw	r2,28(r2)
 80414c8:	1004963a 	slli	r2,r2,24
 80414cc:	1884b03a 	or	r2,r3,r2
 80414d0:	10fc002c 	andhi	r3,r2,61440
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 80414d4:	00b80034 	movhi	r2,57344
 80414d8:	18800826 	beq	r3,r2,80414fc <arprcv+0x140>
#else
   if (arphdr->ar_tpa != pkt->net->n_ipaddr)
#endif /* IP_MULTICAST */
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80414dc:	01000084 	movi	r4,2
 80414e0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
 80414e4:	e13ffb17 	ldw	r4,-20(fp)
 80414e8:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80414ec:	01000084 	movi	r4,2
 80414f0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return (ENP_NOT_MINE);
 80414f4:	00800084 	movi	r2,2
 80414f8:	00004406 	br	804160c <arprcv+0x250>
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
 80414fc:	e0bffd17 	ldw	r2,-12(fp)
 8041500:	1080018b 	ldhu	r2,6(r2)
 8041504:	10bfffcc 	andi	r2,r2,65535
 8041508:	10804018 	cmpnei	r2,r2,256
 804150c:	10000d1e 	bne	r2,zero,8041544 <arprcv+0x188>
   {
      arpReqsIn++;   /* count these */
 8041510:	d0a0bd17 	ldw	r2,-32012(gp)
 8041514:	10800044 	addi	r2,r2,1
 8041518:	d0a0bd15 	stw	r2,-32012(gp)
      arpReply(pkt); /* send arp reply */
 804151c:	e13ffb17 	ldw	r4,-20(fp)
 8041520:	80410fc0 	call	80410fc <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
 8041524:	e0bffd17 	ldw	r2,-12(fp)
 8041528:	10c00417 	ldw	r3,16(r2)
 804152c:	e0bffb17 	ldw	r2,-20(fp)
 8041530:	10800617 	ldw	r2,24(r2)
 8041534:	100b883a 	mov	r5,r2
 8041538:	1809883a 	mov	r4,r3
 804153c:	80410000 	call	8041000 <make_arp_entry>
 8041540:	00000306 	br	8041550 <arprcv+0x194>
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
 8041544:	d0a0bf17 	ldw	r2,-32004(gp)
 8041548:	10800044 	addi	r2,r2,1
 804154c:	d0a0bf15 	stw	r2,-32004(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 8041550:	008201b4 	movhi	r2,2054
 8041554:	10bfcf04 	addi	r2,r2,-196
 8041558:	e0bfff15 	stw	r2,-4(fp)
 804155c:	00002006 	br	80415e0 <arprcv+0x224>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 8041560:	e0bfff17 	ldw	r2,-4(fp)
 8041564:	10c00017 	ldw	r3,0(r2)
 8041568:	e0bffd17 	ldw	r2,-12(fp)
 804156c:	10800417 	ldw	r2,16(r2)
 8041570:	1880181e 	bne	r3,r2,80415d4 <arprcv+0x218>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
 8041574:	e0bfff17 	ldw	r2,-4(fp)
 8041578:	10c00104 	addi	r3,r2,4
 804157c:	e0bffd17 	ldw	r2,-12(fp)
 8041580:	10800204 	addi	r2,r2,8
 8041584:	01800184 	movi	r6,6
 8041588:	100b883a 	mov	r5,r2
 804158c:	1809883a 	mov	r4,r3
 8041590:	800c1f00 	call	800c1f0 <memmove>
         tp->lasttime = cticks;
 8041594:	d0e0a317 	ldw	r3,-32116(gp)
 8041598:	e0bfff17 	ldw	r2,-4(fp)
 804159c:	10c00615 	stw	r3,24(r2)
         if (tp->pending)     /* packet waiting for this IP entry? */
 80415a0:	e0bfff17 	ldw	r2,-4(fp)
 80415a4:	10800417 	ldw	r2,16(r2)
 80415a8:	10000226 	beq	r2,zero,80415b4 <arprcv+0x1f8>
         {
            arp_send_pending(tp);
 80415ac:	e13fff17 	ldw	r4,-4(fp)
 80415b0:	80409c80 	call	80409c8 <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80415b4:	01000084 	movi	r4,2
 80415b8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 80415bc:	e13ffb17 	ldw	r4,-20(fp)
 80415c0:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80415c4:	01000084 	movi	r4,2
 80415c8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

         return (0);
 80415cc:	0005883a 	mov	r2,zero
 80415d0:	00000e06 	br	804160c <arprcv+0x250>
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 80415d4:	e0bfff17 	ldw	r2,-4(fp)
 80415d8:	10800804 	addi	r2,r2,32
 80415dc:	e0bfff15 	stw	r2,-4(fp)
 80415e0:	e0ffff17 	ldw	r3,-4(fp)
 80415e4:	008201b4 	movhi	r2,2054
 80415e8:	10800f04 	addi	r2,r2,60
 80415ec:	18bfdc36 	bltu	r3,r2,8041560 <arprcv+0x1a4>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80415f0:	01000084 	movi	r4,2
 80415f4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(pkt);
 80415f8:	e13ffb17 	ldw	r4,-20(fp)
 80415fc:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041600:	01000084 	movi	r4,2
 8041604:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   return ENP_NOT_MINE;
 8041608:	00800084 	movi	r2,2
}
 804160c:	e037883a 	mov	sp,fp
 8041610:	dfc00117 	ldw	ra,4(sp)
 8041614:	df000017 	ldw	fp,0(sp)
 8041618:	dec00204 	addi	sp,sp,8
 804161c:	f800283a 	ret

08041620 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
 8041620:	defff804 	addi	sp,sp,-32
 8041624:	dfc00715 	stw	ra,28(sp)
 8041628:	df000615 	stw	fp,24(sp)
 804162c:	df000604 	addi	fp,sp,24
 8041630:	e13ffb15 	stw	r4,-20(fp)
 8041634:	e17ffa15 	stw	r5,-24(fp)
   struct arptabent *tp;
   unsigned long lticks = cticks;
 8041638:	d0a0a317 	ldw	r2,-32116(gp)
 804163c:	e0bffc15 	stw	r2,-16(fp)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
 8041640:	e0bffa17 	ldw	r2,-24(fp)
 8041644:	1000081e 	bne	r2,zero,8041668 <send_via_arp+0x48>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041648:	01000084 	movi	r4,2
 804164c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 8041650:	e13ffb17 	ldw	r4,-20(fp)
 8041654:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041658:	01000084 	movi	r4,2
 804165c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return SEND_DROPPED; 
 8041660:	00bffa84 	movi	r2,-22
 8041664:	00004806 	br	8041788 <send_via_arp+0x168>
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
 8041668:	d0a0bc17 	ldw	r2,-32016(gp)
 804166c:	e0fffc17 	ldw	r3,-16(fp)
 8041670:	1885c83a 	sub	r2,r3,r2
 8041674:	10801970 	cmpltui	r2,r2,101
 8041678:	1000011e 	bne	r2,zero,8041680 <send_via_arp+0x60>
      arpcache = (struct arptabent *)NULL;
 804167c:	d020bb15 	stw	zero,-32020(gp)

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
 8041680:	d0a0bb17 	ldw	r2,-32020(gp)
 8041684:	10000726 	beq	r2,zero,80416a4 <send_via_arp+0x84>
 8041688:	d0a0bb17 	ldw	r2,-32020(gp)
 804168c:	10800017 	ldw	r2,0(r2)
 8041690:	e0fffa17 	ldw	r3,-24(fp)
 8041694:	1880031e 	bne	r3,r2,80416a4 <send_via_arp+0x84>
      tp = arpcache;
 8041698:	d0a0bb17 	ldw	r2,-32020(gp)
 804169c:	e0bfff15 	stw	r2,-4(fp)
 80416a0:	00000306 	br	80416b0 <send_via_arp+0x90>
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
 80416a4:	e13ffa17 	ldw	r4,-24(fp)
 80416a8:	8040e940 	call	8040e94 <find_oldest_arp>
 80416ac:	e0bfff15 	stw	r2,-4(fp)
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
 80416b0:	e0bfff17 	ldw	r2,-4(fp)
 80416b4:	10800017 	ldw	r2,0(r2)
 80416b8:	e0fffa17 	ldw	r3,-24(fp)
 80416bc:	18802d1e 	bne	r3,r2,8041774 <send_via_arp+0x154>
   {
      if (tp->pending)  /* arp already pending for this IP? */
 80416c0:	e0bfff17 	ldw	r2,-4(fp)
 80416c4:	10800417 	ldw	r2,16(r2)
 80416c8:	10002126 	beq	r2,zero,8041750 <send_via_arp+0x130>
      {
         if (lilfreeq.q_len < 2)
 80416cc:	008201b4 	movhi	r2,2054
 80416d0:	10be3217 	ldw	r2,-1848(r2)
 80416d4:	10800088 	cmpgei	r2,r2,2
 80416d8:	1000091e 	bne	r2,zero,8041700 <send_via_arp+0xe0>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 80416dc:	01000084 	movi	r4,2
 80416e0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
 80416e4:	e13ffb17 	ldw	r4,-20(fp)
 80416e8:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80416ec:	01000084 	movi	r4,2
 80416f0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            err = SEND_DROPPED;    /* pkts already waiting for this IP entry */
 80416f4:	00bffa84 	movi	r2,-22
 80416f8:	e0bffe15 	stw	r2,-8(fp)
 80416fc:	00002106 	br	8041784 <send_via_arp+0x164>
         }
         else
         {
            PACKET tmppkt=tp->pending;
 8041700:	e0bfff17 	ldw	r2,-4(fp)
 8041704:	10800417 	ldw	r2,16(r2)
 8041708:	e0bffd15 	stw	r2,-12(fp)

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
 804170c:	00000306 	br	804171c <send_via_arp+0xfc>
               tmppkt = tmppkt->next;
 8041710:	e0bffd17 	ldw	r2,-12(fp)
 8041714:	10800017 	ldw	r2,0(r2)
 8041718:	e0bffd15 	stw	r2,-12(fp)
            while (tmppkt->next)     /* traverse to the last packet */
 804171c:	e0bffd17 	ldw	r2,-12(fp)
 8041720:	10800017 	ldw	r2,0(r2)
 8041724:	103ffa1e 	bne	r2,zero,8041710 <send_via_arp+0xf0>
            tmppkt->next = pkt;      /* add new pkt to end of list */
 8041728:	e0bffd17 	ldw	r2,-12(fp)
 804172c:	e0fffb17 	ldw	r3,-20(fp)
 8041730:	10c00015 	stw	r3,0(r2)
            if (pkt->next)
 8041734:	e0bffb17 	ldw	r2,-20(fp)
 8041738:	10800017 	ldw	r2,0(r2)
 804173c:	10000126 	beq	r2,zero,8041744 <send_via_arp+0x124>
            {
               dtrap();              /* chain of pkts to be sent ??? */
 8041740:	80301a80 	call	80301a8 <dtrap>
            }
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
 8041744:	00800044 	movi	r2,1
 8041748:	e0bffe15 	stw	r2,-8(fp)
 804174c:	00000d06 	br	8041784 <send_via_arp+0x164>
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
 8041750:	e0bfff17 	ldw	r2,-4(fp)
 8041754:	d0a0bb15 	stw	r2,-32020(gp)
         cachetime = lticks;  /* mark time we cached */
 8041758:	e0bffc17 	ldw	r2,-16(fp)
 804175c:	d0a0bc15 	stw	r2,-32016(gp)
         err = et_send(pkt, tp);
 8041760:	e17fff17 	ldw	r5,-4(fp)
 8041764:	e13ffb17 	ldw	r4,-20(fp)
 8041768:	80407c00 	call	80407c0 <et_send>
 804176c:	e0bffe15 	stw	r2,-8(fp)
 8041770:	00000406 	br	8041784 <send_via_arp+0x164>
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
 8041774:	e17ffa17 	ldw	r5,-24(fp)
 8041778:	e13ffb17 	ldw	r4,-20(fp)
 804177c:	8040a400 	call	8040a40 <send_arp>
 8041780:	e0bffe15 	stw	r2,-8(fp)

   return (err);
 8041784:	e0bffe17 	ldw	r2,-8(fp)
}
 8041788:	e037883a 	mov	sp,fp
 804178c:	dfc00117 	ldw	ra,4(sp)
 8041790:	df000017 	ldw	fp,0(sp)
 8041794:	dec00204 	addi	sp,sp,8
 8041798:	f800283a 	ret

0804179c <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 804179c:	defffa04 	addi	sp,sp,-24
 80417a0:	dfc00515 	stw	ra,20(sp)
 80417a4:	df000415 	stw	fp,16(sp)
 80417a8:	df000404 	addi	fp,sp,16
 80417ac:	e13ffc15 	stw	r4,-16(fp)
   struct arptabent *tp;
   int arp_count = 0;
 80417b0:	e03ffe15 	stw	zero,-8(fp)
   unsigned long lticks = cticks;
 80417b4:	d0a0a317 	ldw	r2,-32116(gp)
 80417b8:	e0bffd15 	stw	r2,-12(fp)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 80417bc:	008201b4 	movhi	r2,2054
 80417c0:	10bfcf04 	addi	r2,r2,-196
 80417c4:	e0bfff15 	stw	r2,-4(fp)
 80417c8:	00002706 	br	8041868 <cb_arpent_tmo+0xcc>
   {
      if (tp->t_pro_addr != 0)
 80417cc:	e0bfff17 	ldw	r2,-4(fp)
 80417d0:	10800017 	ldw	r2,0(r2)
 80417d4:	10002126 	beq	r2,zero,804185c <cb_arpent_tmo+0xc0>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 80417d8:	e0bfff17 	ldw	r2,-4(fp)
 80417dc:	10800417 	ldw	r2,16(r2)
 80417e0:	10000b26 	beq	r2,zero,8041810 <cb_arpent_tmo+0x74>
 80417e4:	e0bfff17 	ldw	r2,-4(fp)
 80417e8:	10800517 	ldw	r2,20(r2)
 80417ec:	e0fffd17 	ldw	r3,-12(fp)
 80417f0:	1885c83a 	sub	r2,r3,r2
 80417f4:	10801970 	cmpltui	r2,r2,101
 80417f8:	1000051e 	bne	r2,zero,8041810 <cb_arpent_tmo+0x74>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
 80417fc:	e13fff17 	ldw	r4,-4(fp)
 8041800:	80409400 	call	8040940 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 8041804:	e0bfff17 	ldw	r2,-4(fp)
 8041808:	10000015 	stw	zero,0(r2)
 804180c:	00001306 	br	804185c <cb_arpent_tmo+0xc0>
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 8041810:	e0bfff17 	ldw	r2,-4(fp)
 8041814:	10800517 	ldw	r2,20(r2)
 8041818:	e0fffd17 	ldw	r3,-12(fp)
 804181c:	1885c83a 	sub	r2,r3,r2
 8041820:	1007883a 	mov	r3,r2
 8041824:	d0a04d17 	ldw	r2,-32460(gp)
 8041828:	18800916 	blt	r3,r2,8041850 <cb_arpent_tmo+0xb4>
                  ((int)(lticks - tp->lasttime)   >= TPS))
 804182c:	e0bfff17 	ldw	r2,-4(fp)
 8041830:	10800617 	ldw	r2,24(r2)
 8041834:	e0fffd17 	ldw	r3,-12(fp)
 8041838:	1885c83a 	sub	r2,r3,r2
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 804183c:	10801910 	cmplti	r2,r2,100
 8041840:	1000031e 	bne	r2,zero,8041850 <cb_arpent_tmo+0xb4>
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 8041844:	e0bfff17 	ldw	r2,-4(fp)
 8041848:	10000015 	stw	zero,0(r2)
 804184c:	00000306 	br	804185c <cb_arpent_tmo+0xc0>
         }
         else
            arp_count++;
 8041850:	e0bffe17 	ldw	r2,-8(fp)
 8041854:	10800044 	addi	r2,r2,1
 8041858:	e0bffe15 	stw	r2,-8(fp)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 804185c:	e0bfff17 	ldw	r2,-4(fp)
 8041860:	10800804 	addi	r2,r2,32
 8041864:	e0bfff15 	stw	r2,-4(fp)
 8041868:	e0ffff17 	ldw	r3,-4(fp)
 804186c:	008201b4 	movhi	r2,2054
 8041870:	10800f04 	addi	r2,r2,60
 8041874:	18bfd536 	bltu	r3,r2,80417cc <cb_arpent_tmo+0x30>
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
 8041878:	e0bffe17 	ldw	r2,-8(fp)
 804187c:	1000041e 	bne	r2,zero,8041890 <cb_arpent_tmo+0xf4>
   {
      in_timerkill(arp_timer);
 8041880:	d0a0ba17 	ldw	r2,-32024(gp)
 8041884:	1009883a 	mov	r4,r2
 8041888:	80405a00 	call	80405a0 <in_timerkill>
      arp_timer = 0;
 804188c:	d020ba15 	stw	zero,-32024(gp)
   }
      
   USE_ARG(arg);
}
 8041890:	0001883a 	nop
 8041894:	e037883a 	mov	sp,fp
 8041898:	dfc00117 	ldw	ra,4(sp)
 804189c:	df000017 	ldw	fp,0(sp)
 80418a0:	dec00204 	addi	sp,sp,8
 80418a4:	f800283a 	ret

080418a8 <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
 80418a8:	defff704 	addi	sp,sp,-36
 80418ac:	dfc00815 	stw	ra,32(sp)
 80418b0:	df000715 	stw	fp,28(sp)
 80418b4:	df000704 	addi	fp,sp,28
 80418b8:	e13ffa15 	stw	r4,-24(fp)
 80418bc:	e17ff915 	stw	r5,-28(fp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
 80418c0:	e0bffa17 	ldw	r2,-24(fp)
 80418c4:	10802717 	ldw	r2,156(r2)
 80418c8:	e0bfff15 	stw	r2,-4(fp)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 80418cc:	01000084 	movi	r4,2
 80418d0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 80418d4:	01000c04 	movi	r4,48
 80418d8:	802f6300 	call	802f630 <pk_alloc>
 80418dc:	e0bffe15 	stw	r2,-8(fp)
   if (!arppkt)
 80418e0:	e0bffe17 	ldw	r2,-8(fp)
 80418e4:	1000041e 	bne	r2,zero,80418f8 <grat_arp+0x50>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80418e8:	01000084 	movi	r4,2
 80418ec:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 80418f0:	00bffa84 	movi	r2,-22
 80418f4:	00009506 	br	8041b4c <grat_arp+0x2a4>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80418f8:	01000084 	movi	r4,2
 80418fc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 8041900:	e0bffe17 	ldw	r2,-8(fp)
 8041904:	10c00117 	ldw	r3,4(r2)
 8041908:	e0bffe17 	ldw	r2,-8(fp)
 804190c:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 8041910:	e0bffe17 	ldw	r2,-8(fp)
 8041914:	00c00c04 	movi	r3,48
 8041918:	10c00415 	stw	r3,16(r2)
   arppkt->net = net;
 804191c:	e0bffe17 	ldw	r2,-8(fp)
 8041920:	e0fffa17 	ldw	r3,-24(fp)
 8041924:	10c00615 	stw	r3,24(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 8041928:	e0bffe17 	ldw	r2,-8(fp)
 804192c:	10800117 	ldw	r2,4(r2)
 8041930:	10800084 	addi	r2,r2,2
 8041934:	e0bffd15 	stw	r2,-12(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 8041938:	e0bffe17 	ldw	r2,-8(fp)
 804193c:	10800117 	ldw	r2,4(r2)
 8041940:	10800404 	addi	r2,r2,16
 8041944:	e0bffc15 	stw	r2,-16(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 8041948:	e0bffc17 	ldw	r2,-16(fp)
 804194c:	00c04004 	movi	r3,256
 8041950:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 8041954:	e0bffc17 	ldw	r2,-16(fp)
 8041958:	00c00204 	movi	r3,8
 804195c:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
 8041960:	e0bffc17 	ldw	r2,-16(fp)
 8041964:	00c00184 	movi	r3,6
 8041968:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
 804196c:	e0bffc17 	ldw	r2,-16(fp)
 8041970:	00c00104 	movi	r3,4
 8041974:	10c00145 	stb	r3,5(r2)
   
   /* ARP req? */
   if (flag == 0)
 8041978:	e0bff917 	ldw	r2,-28(fp)
 804197c:	1000041e 	bne	r2,zero,8041990 <grat_arp+0xe8>
      /* yup */
      arphdr->ar_op = ARREQ;
 8041980:	e0bffc17 	ldw	r2,-16(fp)
 8041984:	00c04004 	movi	r3,256
 8041988:	10c0018d 	sth	r3,6(r2)
 804198c:	00000306 	br	804199c <grat_arp+0xf4>
   else
     /* nope */
      arphdr->ar_op = ARREP;
 8041990:	e0bffc17 	ldw	r2,-16(fp)
 8041994:	00c08004 	movi	r3,512
 8041998:	10c0018d 	sth	r3,6(r2)
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
 804199c:	e0bffa17 	ldw	r2,-24(fp)
 80419a0:	10c00a17 	ldw	r3,40(r2)
 80419a4:	e0bffc17 	ldw	r2,-16(fp)
 80419a8:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
 80419ac:	e0bffa17 	ldw	r2,-24(fp)
 80419b0:	10c00a17 	ldw	r3,40(r2)
 80419b4:	e0bffc17 	ldw	r2,-16(fp)
 80419b8:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 80419bc:	e0bffc17 	ldw	r2,-16(fp)
 80419c0:	10c00204 	addi	r3,r2,8
 80419c4:	e0bfff17 	ldw	r2,-4(fp)
 80419c8:	10800517 	ldw	r2,20(r2)
 80419cc:	01800184 	movi	r6,6
 80419d0:	100b883a 	mov	r5,r2
 80419d4:	1809883a 	mov	r4,r3
 80419d8:	800c1f00 	call	800c1f0 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 80419dc:	01800184 	movi	r6,6
 80419e0:	01403fc4 	movi	r5,255
 80419e4:	e13ffd17 	ldw	r4,-12(fp)
 80419e8:	80038cc0 	call	80038cc <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 80419ec:	e0bffd17 	ldw	r2,-12(fp)
 80419f0:	10c00184 	addi	r3,r2,6
 80419f4:	e0bfff17 	ldw	r2,-4(fp)
 80419f8:	10800517 	ldw	r2,20(r2)
 80419fc:	01800184 	movi	r6,6
 8041a00:	100b883a 	mov	r5,r2
 8041a04:	1809883a 	mov	r4,r3
 8041a08:	800c1f00 	call	800c1f0 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 8041a0c:	e0bffd17 	ldw	r2,-12(fp)
 8041a10:	10800304 	addi	r2,r2,12
 8041a14:	00c00204 	movi	r3,8
 8041a18:	10c00005 	stb	r3,0(r2)
 8041a1c:	e0bffd17 	ldw	r2,-12(fp)
 8041a20:	10800344 	addi	r2,r2,13
 8041a24:	00c00184 	movi	r3,6
 8041a28:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 8041a2c:	e0bffc17 	ldw	r2,-16(fp)
 8041a30:	e0bffb15 	stw	r2,-20(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 8041a34:	e0bffb17 	ldw	r2,-20(fp)
 8041a38:	10c00204 	addi	r3,r2,8
 8041a3c:	e0bffc17 	ldw	r2,-16(fp)
 8041a40:	10800204 	addi	r2,r2,8
 8041a44:	01800184 	movi	r6,6
 8041a48:	100b883a 	mov	r5,r2
 8041a4c:	1809883a 	mov	r4,r3
 8041a50:	800c1f00 	call	800c1f0 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 8041a54:	e0bffb17 	ldw	r2,-20(fp)
 8041a58:	10c00384 	addi	r3,r2,14
 8041a5c:	e0bffc17 	ldw	r2,-16(fp)
 8041a60:	10800404 	addi	r2,r2,16
 8041a64:	01800104 	movi	r6,4
 8041a68:	100b883a 	mov	r5,r2
 8041a6c:	1809883a 	mov	r4,r3
 8041a70:	800c1f00 	call	800c1f0 <memmove>

   /* ARP req? */
   if (flag == 0)
 8041a74:	e0bff917 	ldw	r2,-28(fp)
 8041a78:	1000091e 	bne	r2,zero,8041aa0 <grat_arp+0x1f8>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 8041a7c:	e0bffb17 	ldw	r2,-20(fp)
 8041a80:	10c00484 	addi	r3,r2,18
 8041a84:	e0bffc17 	ldw	r2,-16(fp)
 8041a88:	10800504 	addi	r2,r2,20
 8041a8c:	01800184 	movi	r6,6
 8041a90:	100b883a 	mov	r5,r2
 8041a94:	1809883a 	mov	r4,r3
 8041a98:	800c1f00 	call	800c1f0 <memmove>
 8041a9c:	00000806 	br	8041ac0 <grat_arp+0x218>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
 8041aa0:	e0bffb17 	ldw	r2,-20(fp)
 8041aa4:	10c00484 	addi	r3,r2,18
 8041aa8:	e0bffc17 	ldw	r2,-16(fp)
 8041aac:	10800204 	addi	r2,r2,8
 8041ab0:	01800184 	movi	r6,6
 8041ab4:	100b883a 	mov	r5,r2
 8041ab8:	1809883a 	mov	r4,r3
 8041abc:	800c1f00 	call	800c1f0 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 8041ac0:	e0bffb17 	ldw	r2,-20(fp)
 8041ac4:	10c00604 	addi	r3,r2,24
 8041ac8:	e0bffc17 	ldw	r2,-16(fp)
 8041acc:	10800704 	addi	r2,r2,28
 8041ad0:	01800104 	movi	r6,4
 8041ad4:	100b883a 	mov	r5,r2
 8041ad8:	1809883a 	mov	r4,r3
 8041adc:	800c1f00 	call	800c1f0 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 8041ae0:	e0bffa17 	ldw	r2,-24(fp)
 8041ae4:	10800417 	ldw	r2,16(r2)
 8041ae8:	10000526 	beq	r2,zero,8041b00 <grat_arp+0x258>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 8041aec:	e0bffa17 	ldw	r2,-24(fp)
 8041af0:	10800417 	ldw	r2,16(r2)
 8041af4:	e13ffe17 	ldw	r4,-8(fp)
 8041af8:	103ee83a 	callr	r2
 8041afc:	00000f06 	br	8041b3c <grat_arp+0x294>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 8041b00:	e0bffa17 	ldw	r2,-24(fp)
 8041b04:	10800317 	ldw	r2,12(r2)
 8041b08:	e0fffe17 	ldw	r3,-8(fp)
 8041b0c:	19000617 	ldw	r4,24(r3)
 8041b10:	e0fffe17 	ldw	r3,-8(fp)
 8041b14:	18c00117 	ldw	r3,4(r3)
 8041b18:	01800c04 	movi	r6,48
 8041b1c:	180b883a 	mov	r5,r3
 8041b20:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041b24:	01000084 	movi	r4,2
 8041b28:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 8041b2c:	e13ffe17 	ldw	r4,-8(fp)
 8041b30:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041b34:	01000084 	movi	r4,2
 8041b38:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 8041b3c:	d0a0be17 	ldw	r2,-32008(gp)
 8041b40:	10800044 	addi	r2,r2,1
 8041b44:	d0a0be15 	stw	r2,-32008(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 8041b48:	00800044 	movi	r2,1
}
 8041b4c:	e037883a 	mov	sp,fp
 8041b50:	dfc00117 	ldw	ra,4(sp)
 8041b54:	df000017 	ldw	fp,0(sp)
 8041b58:	dec00204 	addi	sp,sp,8
 8041b5c:	f800283a 	ret

08041b60 <if_getbynum>:
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
 8041b60:	defffc04 	addi	sp,sp,-16
 8041b64:	dfc00315 	stw	ra,12(sp)
 8041b68:	df000215 	stw	fp,8(sp)
 8041b6c:	df000204 	addi	fp,sp,8
 8041b70:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8041b74:	008201b4 	movhi	r2,2054
 8041b78:	10800f17 	ldw	r2,60(r2)
 8041b7c:	e0bfff15 	stw	r2,-4(fp)
 8041b80:	00000906 	br	8041ba8 <if_getbynum+0x48>
   {
      if(ifnum-- == 0)
 8041b84:	e0bffe17 	ldw	r2,-8(fp)
 8041b88:	10ffffc4 	addi	r3,r2,-1
 8041b8c:	e0fffe15 	stw	r3,-8(fp)
 8041b90:	1000021e 	bne	r2,zero,8041b9c <if_getbynum+0x3c>
         return ifp;
 8041b94:	e0bfff17 	ldw	r2,-4(fp)
 8041b98:	00000706 	br	8041bb8 <if_getbynum+0x58>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8041b9c:	e0bfff17 	ldw	r2,-4(fp)
 8041ba0:	10800017 	ldw	r2,0(r2)
 8041ba4:	e0bfff15 	stw	r2,-4(fp)
 8041ba8:	e0bfff17 	ldw	r2,-4(fp)
 8041bac:	103ff51e 	bne	r2,zero,8041b84 <if_getbynum+0x24>
   }
   dtrap();
 8041bb0:	80301a80 	call	80301a8 <dtrap>
   return NULL;   /* list is not long enough */
 8041bb4:	0005883a 	mov	r2,zero
}
 8041bb8:	e037883a 	mov	sp,fp
 8041bbc:	dfc00117 	ldw	ra,4(sp)
 8041bc0:	df000017 	ldw	fp,0(sp)
 8041bc4:	dec00204 	addi	sp,sp,8
 8041bc8:	f800283a 	ret

08041bcc <isbcast>:
 * RETURNS:  Returns TRUE if broadcast, else false. 
 */

int
isbcast(NET ifc, unsigned char * addr)
{
 8041bcc:	defffd04 	addi	sp,sp,-12
 8041bd0:	df000215 	stw	fp,8(sp)
 8041bd4:	df000204 	addi	fp,sp,8
 8041bd8:	e13fff15 	stw	r4,-4(fp)
 8041bdc:	e17ffe15 	stw	r5,-8(fp)
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
 8041be0:	e0bffe17 	ldw	r2,-8(fp)
 8041be4:	108000cc 	andi	r2,r2,3
 8041be8:	10000e26 	beq	r2,zero,8041c24 <isbcast+0x58>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
 8041bec:	e0bffe17 	ldw	r2,-8(fp)
 8041bf0:	1080000b 	ldhu	r2,0(r2)
 8041bf4:	10ffffcc 	andi	r3,r2,65535
 8041bf8:	00bfffd4 	movui	r2,65535
 8041bfc:	18800226 	beq	r3,r2,8041c08 <isbcast+0x3c>
         return(FALSE);
 8041c00:	0005883a 	mov	r2,zero
 8041c04:	00002206 	br	8041c90 <isbcast+0xc4>
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
 8041c08:	e0bffe17 	ldw	r2,-8(fp)
 8041c0c:	10800084 	addi	r2,r2,2
 8041c10:	10800017 	ldw	r2,0(r2)
 8041c14:	10bfffe0 	cmpeqi	r2,r2,-1
 8041c18:	1000101e 	bne	r2,zero,8041c5c <isbcast+0x90>
         return FALSE;
 8041c1c:	0005883a 	mov	r2,zero
 8041c20:	00001b06 	br	8041c90 <isbcast+0xc4>
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
 8041c24:	e0bffe17 	ldw	r2,-8(fp)
 8041c28:	10800017 	ldw	r2,0(r2)
 8041c2c:	10bfffe0 	cmpeqi	r2,r2,-1
 8041c30:	1000021e 	bne	r2,zero,8041c3c <isbcast+0x70>
         return FALSE;
 8041c34:	0005883a 	mov	r2,zero
 8041c38:	00001506 	br	8041c90 <isbcast+0xc4>

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
 8041c3c:	e0bffe17 	ldw	r2,-8(fp)
 8041c40:	10800104 	addi	r2,r2,4
 8041c44:	1080000b 	ldhu	r2,0(r2)
 8041c48:	10ffffcc 	andi	r3,r2,65535
 8041c4c:	00bfffd4 	movui	r2,65535
 8041c50:	18800226 	beq	r3,r2,8041c5c <isbcast+0x90>
         return(FALSE);
 8041c54:	0005883a 	mov	r2,zero
 8041c58:	00000d06 	br	8041c90 <isbcast+0xc4>
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 8041c5c:	e0bfff17 	ldw	r2,-4(fp)
 8041c60:	10802717 	ldw	r2,156(r2)
 8041c64:	10800217 	ldw	r2,8(r2)
 8041c68:	108005e0 	cmpeqi	r2,r2,23
 8041c6c:	1000051e 	bne	r2,zero,8041c84 <isbcast+0xb8>
       (ifc->n_mib->ifType == SLIP))
 8041c70:	e0bfff17 	ldw	r2,-4(fp)
 8041c74:	10802717 	ldw	r2,156(r2)
 8041c78:	10800217 	ldw	r2,8(r2)
   if ((ifc->n_mib->ifType == PPP) ||
 8041c7c:	10800718 	cmpnei	r2,r2,28
 8041c80:	1000021e 	bne	r2,zero,8041c8c <isbcast+0xc0>
   {
      return FALSE;
 8041c84:	0005883a 	mov	r2,zero
 8041c88:	00000106 	br	8041c90 <isbcast+0xc4>
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
 8041c8c:	00800044 	movi	r2,1
}
 8041c90:	e037883a 	mov	sp,fp
 8041c94:	df000017 	ldw	fp,0(sp)
 8041c98:	dec00104 	addi	sp,sp,4
 8041c9c:	f800283a 	ret

08041ca0 <reg_type>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
 8041ca0:	defffb04 	addi	sp,sp,-20
 8041ca4:	dfc00415 	stw	ra,16(sp)
 8041ca8:	df000315 	stw	fp,12(sp)
 8041cac:	df000304 	addi	fp,sp,12
 8041cb0:	2005883a 	mov	r2,r4
 8041cb4:	e0bffd0d 	sth	r2,-12(fp)
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8041cb8:	008201b4 	movhi	r2,2054
 8041cbc:	10800f17 	ldw	r2,60(r2)
 8041cc0:	e0bfff15 	stw	r2,-4(fp)
 8041cc4:	00001106 	br	8041d0c <reg_type+0x6c>
   {
      if (ifp->n_reg_type)    /* make sure call exists */
 8041cc8:	e0bfff17 	ldw	r2,-4(fp)
 8041ccc:	10800617 	ldw	r2,24(r2)
 8041cd0:	10000b26 	beq	r2,zero,8041d00 <reg_type+0x60>
      {
         e = (ifp->n_reg_type)(type, ifp);
 8041cd4:	e0bfff17 	ldw	r2,-4(fp)
 8041cd8:	10800617 	ldw	r2,24(r2)
 8041cdc:	e0fffd0b 	ldhu	r3,-12(fp)
 8041ce0:	e17fff17 	ldw	r5,-4(fp)
 8041ce4:	1809883a 	mov	r4,r3
 8041ce8:	103ee83a 	callr	r2
 8041cec:	e0bffe15 	stw	r2,-8(fp)
         if (e)
 8041cf0:	e0bffe17 	ldw	r2,-8(fp)
 8041cf4:	10000226 	beq	r2,zero,8041d00 <reg_type+0x60>
            return e;   /* bails out if error */
 8041cf8:	e0bffe17 	ldw	r2,-8(fp)
 8041cfc:	00000606 	br	8041d18 <reg_type+0x78>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8041d00:	e0bfff17 	ldw	r2,-4(fp)
 8041d04:	10800017 	ldw	r2,0(r2)
 8041d08:	e0bfff15 	stw	r2,-4(fp)
 8041d0c:	e0bfff17 	ldw	r2,-4(fp)
 8041d10:	103fed1e 	bne	r2,zero,8041cc8 <reg_type+0x28>
      }
   }
   return 0;   /* OK code */
 8041d14:	0005883a 	mov	r2,zero
}
 8041d18:	e037883a 	mov	sp,fp
 8041d1c:	dfc00117 	ldw	ra,4(sp)
 8041d20:	df000017 	ldw	fp,0(sp)
 8041d24:	dec00204 	addi	sp,sp,8
 8041d28:	f800283a 	ret

08041d2c <if_killsocks>:
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
 8041d2c:	defffa04 	addi	sp,sp,-24
 8041d30:	dfc00515 	stw	ra,20(sp)
 8041d34:	df000415 	stw	fp,16(sp)
 8041d38:	df000404 	addi	fp,sp,16
 8041d3c:	e13ffc15 	stw	r4,-16(fp)
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
 8041d40:	008201b4 	movhi	r2,2054
 8041d44:	10bf0b17 	ldw	r2,-980(r2)
 8041d48:	e0bfff15 	stw	r2,-4(fp)
   while(so)
 8041d4c:	00001306 	br	8041d9c <if_killsocks+0x70>
   {
      if(so->so_pcb)
 8041d50:	e0bfff17 	ldw	r2,-4(fp)
 8041d54:	10800117 	ldw	r2,4(r2)
 8041d58:	10000526 	beq	r2,zero,8041d70 <if_killsocks+0x44>
         so_ifp = so->so_pcb->ifp;
 8041d5c:	e0bfff17 	ldw	r2,-4(fp)
 8041d60:	10800117 	ldw	r2,4(r2)
 8041d64:	10800a17 	ldw	r2,40(r2)
 8041d68:	e0bffe15 	stw	r2,-8(fp)
 8041d6c:	00000106 	br	8041d74 <if_killsocks+0x48>
      else
         so_ifp = NULL;
 8041d70:	e03ffe15 	stw	zero,-8(fp)
      next = (struct socket *)so->next;
 8041d74:	e0bfff17 	ldw	r2,-4(fp)
 8041d78:	10800017 	ldw	r2,0(r2)
 8041d7c:	e0bffd15 	stw	r2,-12(fp)
      if (so_ifp == ifp)
 8041d80:	e0fffe17 	ldw	r3,-8(fp)
 8041d84:	e0bffc17 	ldw	r2,-16(fp)
 8041d88:	1880021e 	bne	r3,r2,8041d94 <if_killsocks+0x68>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 8041d8c:	e13fff17 	ldw	r4,-4(fp)
 8041d90:	8034bf00 	call	8034bf0 <soabort>
      }
      so = next;
 8041d94:	e0bffd17 	ldw	r2,-12(fp)
 8041d98:	e0bfff15 	stw	r2,-4(fp)
   while(so)
 8041d9c:	e0bfff17 	ldw	r2,-4(fp)
 8041da0:	103feb1e 	bne	r2,zero,8041d50 <if_killsocks+0x24>
   }
}
 8041da4:	0001883a 	nop
 8041da8:	0001883a 	nop
 8041dac:	e037883a 	mov	sp,fp
 8041db0:	dfc00117 	ldw	ra,4(sp)
 8041db4:	df000017 	ldw	fp,0(sp)
 8041db8:	dec00204 	addi	sp,sp,8
 8041dbc:	f800283a 	ret

08041dc0 <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
 8041dc0:	defffe04 	addi	sp,sp,-8
 8041dc4:	dfc00115 	stw	ra,4(sp)
 8041dc8:	df000015 	stw	fp,0(sp)
 8041dcc:	d839883a 	mov	fp,sp

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 8041dd0:	01000204 	movi	r4,8
 8041dd4:	8041ca00 	call	8041ca0 <reg_type>
 8041dd8:	10000526 	beq	r2,zero,8041df0 <ip_init+0x30>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
 8041ddc:	01020174 	movhi	r4,2053
 8041de0:	210ff204 	addi	r4,r4,16328
 8041de4:	8003ca80 	call	8003ca8 <puts>
#endif
      return(1);
 8041de8:	00800044 	movi	r2,1
 8041dec:	00002506 	br	8041e84 <ip_init+0xc4>
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 8041df0:	01801404 	movi	r6,80
 8041df4:	000b883a 	mov	r5,zero
 8041df8:	010201b4 	movhi	r4,2054
 8041dfc:	21001404 	addi	r4,r4,80
 8041e00:	80038cc0 	call	80038cc <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
 8041e04:	00c00084 	movi	r3,2
 8041e08:	008201b4 	movhi	r2,2054
 8041e0c:	10c01415 	stw	r3,80(r2)
   ip_mib.ipDefaultTTL = IP_TTL;
 8041e10:	00c01004 	movi	r3,64
 8041e14:	008201b4 	movhi	r2,2054
 8041e18:	10c01515 	stw	r3,84(r2)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 8041e1c:	d0a04f17 	ldw	r2,-32452(gp)
 8041e20:	10800f24 	muli	r2,r2,60
 8041e24:	1009883a 	mov	r4,r2
 8041e28:	8030d080 	call	8030d08 <npalloc>
 8041e2c:	d0a0c115 	stw	r2,-31996(gp)
   if (!rt_mib)
 8041e30:	d0a0c117 	ldw	r2,-31996(gp)
 8041e34:	1000051e 	bne	r2,zero,8041e4c <ip_init+0x8c>
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
 8041e38:	01020174 	movhi	r4,2053
 8041e3c:	210fff04 	addi	r4,r4,16380
 8041e40:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
 8041e44:	00bffb04 	movi	r2,-20
 8041e48:	00000e06 	br	8041e84 <ip_init+0xc4>
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
 8041e4c:	d0e0c117 	ldw	r3,-31996(gp)
 8041e50:	d0a04f17 	ldw	r2,-32452(gp)
 8041e54:	10800f24 	muli	r2,r2,60
 8041e58:	100d883a 	mov	r6,r2
 8041e5c:	000b883a 	mov	r5,zero
 8041e60:	1809883a 	mov	r4,r3
 8041e64:	80038cc0 	call	80038cc <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
 8041e68:	00c00044 	movi	r3,1
 8041e6c:	008201b4 	movhi	r2,2054
 8041e70:	10c01415 	stw	r3,80(r2)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
 8041e74:	00c01e04 	movi	r3,120
 8041e78:	008201b4 	movhi	r2,2054
 8041e7c:	10c02015 	stw	r3,128(r2)
      return(1);
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
 8041e80:	0005883a 	mov	r2,zero
}
 8041e84:	e037883a 	mov	sp,fp
 8041e88:	dfc00117 	ldw	ra,4(sp)
 8041e8c:	df000017 	ldw	fp,0(sp)
 8041e90:	dec00204 	addi	sp,sp,8
 8041e94:	f800283a 	ret

08041e98 <ip_bldhead>:
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
 8041e98:	defff804 	addi	sp,sp,-32
 8041e9c:	dfc00715 	stw	ra,28(sp)
 8041ea0:	df000615 	stw	fp,24(sp)
 8041ea4:	df000604 	addi	fp,sp,24
 8041ea8:	e13ffd15 	stw	r4,-12(fp)
 8041eac:	e17ffc15 	stw	r5,-16(fp)
 8041eb0:	3005883a 	mov	r2,r6
 8041eb4:	3807883a 	mov	r3,r7
 8041eb8:	e0bffb05 	stb	r2,-20(fp)
 8041ebc:	1805883a 	mov	r2,r3
 8041ec0:	e0bffa0d 	sth	r2,-24(fp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 8041ec4:	e0bffd17 	ldw	r2,-12(fp)
 8041ec8:	10800317 	ldw	r2,12(r2)
 8041ecc:	10fffb04 	addi	r3,r2,-20
 8041ed0:	e0bffd17 	ldw	r2,-12(fp)
 8041ed4:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 8041ed8:	e0bffd17 	ldw	r2,-12(fp)
 8041edc:	10800417 	ldw	r2,16(r2)
 8041ee0:	10c00504 	addi	r3,r2,20
 8041ee4:	e0bffd17 	ldw	r2,-12(fp)
 8041ee8:	10c00415 	stw	r3,16(r2)

   pip = (struct ip*)p->nb_prot;
 8041eec:	e0bffd17 	ldw	r2,-12(fp)
 8041ef0:	10800317 	ldw	r2,12(r2)
 8041ef4:	e0bfff15 	stw	r2,-4(fp)

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 8041ef8:	e0bfff17 	ldw	r2,-4(fp)
 8041efc:	00c01144 	movi	r3,69
 8041f00:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
 8041f04:	e0bfff17 	ldw	r2,-4(fp)
 8041f08:	e0fffa0b 	ldhu	r3,-24(fp)
 8041f0c:	10c0018d 	sth	r3,6(r2)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 8041f10:	e0bffc17 	ldw	r2,-16(fp)
 8041f14:	10bfffcc 	andi	r2,r2,65535
 8041f18:	1004d23a 	srli	r2,r2,8
 8041f1c:	1007883a 	mov	r3,r2
 8041f20:	e0bffc17 	ldw	r2,-16(fp)
 8041f24:	10bfffcc 	andi	r2,r2,65535
 8041f28:	1004923a 	slli	r2,r2,8
 8041f2c:	1884b03a 	or	r2,r3,r2
 8041f30:	1007883a 	mov	r3,r2
 8041f34:	e0bfff17 	ldw	r2,-4(fp)
 8041f38:	10c0010d 	sth	r3,4(r2)
   pip->ip_len = htons((unshort)p->nb_plen);
 8041f3c:	e0bffd17 	ldw	r2,-12(fp)
 8041f40:	10800417 	ldw	r2,16(r2)
 8041f44:	10bfffcc 	andi	r2,r2,65535
 8041f48:	1004d23a 	srli	r2,r2,8
 8041f4c:	1007883a 	mov	r3,r2
 8041f50:	e0bffd17 	ldw	r2,-12(fp)
 8041f54:	10800417 	ldw	r2,16(r2)
 8041f58:	10bfffcc 	andi	r2,r2,65535
 8041f5c:	1004923a 	slli	r2,r2,8
 8041f60:	1884b03a 	or	r2,r3,r2
 8041f64:	1007883a 	mov	r3,r2
 8041f68:	e0bfff17 	ldw	r2,-4(fp)
 8041f6c:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
 8041f70:	e0bfff17 	ldw	r2,-4(fp)
 8041f74:	e0fffb03 	ldbu	r3,-20(fp)
 8041f78:	10c00245 	stb	r3,9(r2)

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 8041f7c:	e0bffd17 	ldw	r2,-12(fp)
 8041f80:	10800c17 	ldw	r2,48(r2)
 8041f84:	e0bffe15 	stw	r2,-8(fp)
 8041f88:	e0bffe17 	ldw	r2,-8(fp)
 8041f8c:	10001126 	beq	r2,zero,8041fd4 <ip_bldhead+0x13c>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 8041f90:	e0bffe17 	ldw	r2,-8(fp)
 8041f94:	10800043 	ldbu	r2,1(r2)
 8041f98:	10803fcc 	andi	r2,r2,255
 8041f9c:	10000526 	beq	r2,zero,8041fb4 <ip_bldhead+0x11c>
         pip->ip_time = sopts->ip_ttl;
 8041fa0:	e0bffe17 	ldw	r2,-8(fp)
 8041fa4:	10c00043 	ldbu	r3,1(r2)
 8041fa8:	e0bfff17 	ldw	r2,-4(fp)
 8041fac:	10c00205 	stb	r3,8(r2)
 8041fb0:	00000306 	br	8041fc0 <ip_bldhead+0x128>
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
 8041fb4:	e0bfff17 	ldw	r2,-4(fp)
 8041fb8:	00c01004 	movi	r3,64
 8041fbc:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 8041fc0:	e0bffe17 	ldw	r2,-8(fp)
 8041fc4:	10c00003 	ldbu	r3,0(r2)
 8041fc8:	e0bfff17 	ldw	r2,-4(fp)
 8041fcc:	10c00045 	stb	r3,1(r2)
 8041fd0:	00000506 	br	8041fe8 <ip_bldhead+0x150>
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
 8041fd4:	e0bfff17 	ldw	r2,-4(fp)
 8041fd8:	00c01004 	movi	r3,64
 8041fdc:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 8041fe0:	e0bfff17 	ldw	r2,-4(fp)
 8041fe4:	10000045 	stb	zero,1(r2)
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
 8041fe8:	e0bfff17 	ldw	r2,-4(fp)
 8041fec:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 8041ff0:	01400284 	movi	r5,10
 8041ff4:	e13fff17 	ldw	r4,-4(fp)
 8041ff8:	802b98c0 	call	802b98c <cksum>
 8041ffc:	0084303a 	nor	r2,zero,r2
 8042000:	1007883a 	mov	r3,r2
 8042004:	e0bfff17 	ldw	r2,-4(fp)
 8042008:	10c0028d 	sth	r3,10(r2)
}
 804200c:	0001883a 	nop
 8042010:	e037883a 	mov	sp,fp
 8042014:	dfc00117 	ldw	ra,4(sp)
 8042018:	df000017 	ldw	fp,0(sp)
 804201c:	dec00204 	addi	sp,sp,8
 8042020:	f800283a 	ret

08042024 <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 8042024:	defff004 	addi	sp,sp,-64
 8042028:	dfc00f15 	stw	ra,60(sp)
 804202c:	df000e15 	stw	fp,56(sp)
 8042030:	df000e04 	addi	fp,sp,56
 8042034:	e13ff515 	stw	r4,-44(fp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 8042038:	e0bff517 	ldw	r2,-44(fp)
 804203c:	10800717 	ldw	r2,28(r2)
 8042040:	1006d63a 	srli	r3,r2,24
 8042044:	e0bff517 	ldw	r2,-44(fp)
 8042048:	10800717 	ldw	r2,28(r2)
 804204c:	1004d23a 	srli	r2,r2,8
 8042050:	10bfc00c 	andi	r2,r2,65280
 8042054:	1886b03a 	or	r3,r3,r2
 8042058:	e0bff517 	ldw	r2,-44(fp)
 804205c:	10800717 	ldw	r2,28(r2)
 8042060:	1004923a 	slli	r2,r2,8
 8042064:	10803fec 	andhi	r2,r2,255
 8042068:	1886b03a 	or	r3,r3,r2
 804206c:	e0bff517 	ldw	r2,-44(fp)
 8042070:	10800717 	ldw	r2,28(r2)
 8042074:	1004963a 	slli	r2,r2,24
 8042078:	1884b03a 	or	r2,r3,r2
 804207c:	10fc002c 	andhi	r3,r2,61440
 8042080:	00b80034 	movhi	r2,57344
 8042084:	1880a21e 	bne	r3,r2,8042310 <ip_write_internal+0x2ec>
   {
      if (p->imo != NULL)
 8042088:	e0bff517 	ldw	r2,-44(fp)
 804208c:	10800b17 	ldw	r2,44(r2)
 8042090:	10001426 	beq	r2,zero,80420e4 <ip_write_internal+0xc0>
         if (p->imo->imo_multicast_netp)
 8042094:	e0bff517 	ldw	r2,-44(fp)
 8042098:	10800b17 	ldw	r2,44(r2)
 804209c:	10800017 	ldw	r2,0(r2)
 80420a0:	10000626 	beq	r2,zero,80420bc <ip_write_internal+0x98>
            p->net = p->imo->imo_multicast_netp;
 80420a4:	e0bff517 	ldw	r2,-44(fp)
 80420a8:	10800b17 	ldw	r2,44(r2)
 80420ac:	10c00017 	ldw	r3,0(r2)
 80420b0:	e0bff517 	ldw	r2,-44(fp)
 80420b4:	10c00615 	stw	r3,24(r2)
 80420b8:	00002106 	br	8042140 <ip_write_internal+0x11c>
         else
            p->net = iproute(p->fhost, &firsthop);
 80420bc:	e0bff517 	ldw	r2,-44(fp)
 80420c0:	10800717 	ldw	r2,28(r2)
 80420c4:	e0fff604 	addi	r3,fp,-40
 80420c8:	180b883a 	mov	r5,r3
 80420cc:	1009883a 	mov	r4,r2
 80420d0:	8043a540 	call	8043a54 <iproute>
 80420d4:	1007883a 	mov	r3,r2
 80420d8:	e0bff517 	ldw	r2,-44(fp)
 80420dc:	10c00615 	stw	r3,24(r2)
 80420e0:	00001706 	br	8042140 <ip_write_internal+0x11c>
      else
      {
         for (i = 0; i < ifNumber; i++)
 80420e4:	e03fff15 	stw	zero,-4(fp)
 80420e8:	00001206 	br	8042134 <ip_write_internal+0x110>
            if (nets[i]->n_mcastlist)
 80420ec:	e0bfff17 	ldw	r2,-4(fp)
 80420f0:	100690ba 	slli	r3,r2,2
 80420f4:	008201b4 	movhi	r2,2054
 80420f8:	1885883a 	add	r2,r3,r2
 80420fc:	10bdce17 	ldw	r2,-2248(r2)
 8042100:	10802b17 	ldw	r2,172(r2)
 8042104:	10000826 	beq	r2,zero,8042128 <ip_write_internal+0x104>
            {
               p->net = nets[i];
 8042108:	e0bfff17 	ldw	r2,-4(fp)
 804210c:	100690ba 	slli	r3,r2,2
 8042110:	008201b4 	movhi	r2,2054
 8042114:	1885883a 	add	r2,r3,r2
 8042118:	10fdce17 	ldw	r3,-2248(r2)
 804211c:	e0bff517 	ldw	r2,-44(fp)
 8042120:	10c00615 	stw	r3,24(r2)
               break;
 8042124:	00000606 	br	8042140 <ip_write_internal+0x11c>
         for (i = 0; i < ifNumber; i++)
 8042128:	e0bfff17 	ldw	r2,-4(fp)
 804212c:	10800044 	addi	r2,r2,1
 8042130:	e0bfff15 	stw	r2,-4(fp)
 8042134:	d0a07f17 	ldw	r2,-32260(gp)
 8042138:	e0ffff17 	ldw	r3,-4(fp)
 804213c:	18bfeb36 	bltu	r3,r2,80420ec <ip_write_internal+0xc8>
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
 8042140:	e0bff517 	ldw	r2,-44(fp)
 8042144:	10800617 	ldw	r2,24(r2)
 8042148:	10000426 	beq	r2,zero,804215c <ip_write_internal+0x138>
 804214c:	e0bff517 	ldw	r2,-44(fp)
 8042150:	10800617 	ldw	r2,24(r2)
 8042154:	10802b17 	ldw	r2,172(r2)
 8042158:	10002a1e 	bne	r2,zero,8042204 <ip_write_internal+0x1e0>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 804215c:	d0a07e17 	ldw	r2,-32264(gp)
 8042160:	1080840c 	andi	r2,r2,528
 8042164:	10001a26 	beq	r2,zero,80421d0 <ip_write_internal+0x1ac>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 8042168:	e0bff517 	ldw	r2,-44(fp)
 804216c:	11400417 	ldw	r5,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 8042170:	e0bff517 	ldw	r2,-44(fp)
 8042174:	10800717 	ldw	r2,28(r2)
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 8042178:	11803fcc 	andi	r6,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 804217c:	e0bff517 	ldw	r2,-44(fp)
 8042180:	10800717 	ldw	r2,28(r2)
 8042184:	1004d23a 	srli	r2,r2,8
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 8042188:	10803fcc 	andi	r2,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 804218c:	e0fff517 	ldw	r3,-44(fp)
 8042190:	18c00717 	ldw	r3,28(r3)
 8042194:	1806d43a 	srli	r3,r3,16
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 8042198:	18c03fcc 	andi	r3,r3,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 804219c:	e13ff517 	ldw	r4,-44(fp)
 80421a0:	21000717 	ldw	r4,28(r4)
 80421a4:	2008d63a 	srli	r4,r4,24
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 80421a8:	d9000215 	stw	r4,8(sp)
 80421ac:	d8c00115 	stw	r3,4(sp)
 80421b0:	d8800015 	stw	r2,0(sp)
 80421b4:	300f883a 	mov	r7,r6
 80421b8:	280d883a 	mov	r6,r5
 80421bc:	e17ff517 	ldw	r5,-44(fp)
 80421c0:	01020174 	movhi	r4,2053
 80421c4:	21100904 	addi	r4,r4,16420
 80421c8:	8003b840 	call	8003b84 <printf>
            dtrap();
 80421cc:	80301a80 	call	80301a8 <dtrap>
         }
#endif
         ip_mib.ipOutNoRoutes++;
 80421d0:	008201b4 	movhi	r2,2054
 80421d4:	10801f17 	ldw	r2,124(r2)
 80421d8:	10c00044 	addi	r3,r2,1
 80421dc:	008201b4 	movhi	r2,2054
 80421e0:	10c01f15 	stw	r3,124(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80421e4:	01000084 	movi	r4,2
 80421e8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 80421ec:	e13ff517 	ldw	r4,-44(fp)
 80421f0:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80421f4:	01000084 	movi	r4,2
 80421f8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 80421fc:	00bff7c4 	movi	r2,-33
 8042200:	00014606 	br	804271c <ip_write_internal+0x6f8>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
 8042204:	e0bff517 	ldw	r2,-44(fp)
 8042208:	10c00717 	ldw	r3,28(r2)
 804220c:	e0bff517 	ldw	r2,-44(fp)
 8042210:	10800617 	ldw	r2,24(r2)
 8042214:	100b883a 	mov	r5,r2
 8042218:	1809883a 	mov	r4,r3
 804221c:	80467980 	call	8046798 <lookup_mcast>
 8042220:	e0bffd15 	stw	r2,-12(fp)
      if ((inm != NULL) &&
 8042224:	e0bffd17 	ldw	r2,-12(fp)
 8042228:	10001b26 	beq	r2,zero,8042298 <ip_write_internal+0x274>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
 804222c:	e0bff517 	ldw	r2,-44(fp)
 8042230:	10800b17 	ldw	r2,44(r2)
      if ((inm != NULL) &&
 8042234:	10000526 	beq	r2,zero,804224c <ip_write_internal+0x228>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
 8042238:	e0bff517 	ldw	r2,-44(fp)
 804223c:	10800b17 	ldw	r2,44(r2)
 8042240:	10800143 	ldbu	r2,5(r2)
 8042244:	10803fcc 	andi	r2,r2,255
 8042248:	10001326 	beq	r2,zero,8042298 <ip_write_internal+0x274>
      {
         p->type = IPTP;
 804224c:	e0bff517 	ldw	r2,-44(fp)
 8042250:	00c00204 	movi	r3,8
 8042254:	10c0080d 	sth	r3,32(r2)
         pkt2 = ip_copypkt(p);
 8042258:	e13ff517 	ldw	r4,-44(fp)
 804225c:	8043c200 	call	8043c20 <ip_copypkt>
 8042260:	e0bffc15 	stw	r2,-16(fp)
         if (pkt2)
 8042264:	e0bffc17 	ldw	r2,-16(fp)
 8042268:	10000b26 	beq	r2,zero,8042298 <ip_write_internal+0x274>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
 804226c:	01000044 	movi	r4,1
 8042270:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
 8042274:	e17ffc17 	ldw	r5,-16(fp)
 8042278:	010201b4 	movhi	r4,2054
 804227c:	213d0904 	addi	r4,r4,-3036
 8042280:	802fb8c0 	call	802fb8c <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
 8042284:	01000044 	movi	r4,1
 8042288:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
 804228c:	d0a0a617 	ldw	r2,-32104(gp)
 8042290:	1009883a 	mov	r4,r2
 8042294:	801a9f80 	call	801a9f8 <OSSemPost>
       * Also, multicasts addressed to the loopback interface
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
 8042298:	e0bff517 	ldw	r2,-44(fp)
 804229c:	10800317 	ldw	r2,12(r2)
 80422a0:	e0bffb15 	stw	r2,-20(fp)
      if ((pip->ip_time == 0) || 
 80422a4:	e0bffb17 	ldw	r2,-20(fp)
 80422a8:	10800203 	ldbu	r2,8(r2)
 80422ac:	10803fcc 	andi	r2,r2,255
 80422b0:	10000b26 	beq	r2,zero,80422e0 <ip_write_internal+0x2bc>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
 80422b4:	e0bff517 	ldw	r2,-44(fp)
 80422b8:	10800717 	ldw	r2,28(r2)
 80422bc:	10803fcc 	andi	r2,r2,255
      if ((pip->ip_time == 0) || 
 80422c0:	10801fe0 	cmpeqi	r2,r2,127
 80422c4:	1000061e 	bne	r2,zero,80422e0 <ip_write_internal+0x2bc>
          (p->fhost == p->net->n_ipaddr))
 80422c8:	e0bff517 	ldw	r2,-44(fp)
 80422cc:	10c00717 	ldw	r3,28(r2)
 80422d0:	e0bff517 	ldw	r2,-44(fp)
 80422d4:	10800617 	ldw	r2,24(r2)
 80422d8:	10800a17 	ldw	r2,40(r2)
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
 80422dc:	1880081e 	bne	r3,r2,8042300 <ip_write_internal+0x2dc>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80422e0:	01000084 	movi	r4,2
 80422e4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 80422e8:	e13ff517 	ldw	r4,-44(fp)
 80422ec:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80422f0:	01000084 	movi	r4,2
 80422f4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return(SUCCESS);
 80422f8:	0005883a 	mov	r2,zero
 80422fc:	00010706 	br	804271c <ip_write_internal+0x6f8>
      }

      firsthop = p->fhost;
 8042300:	e0bff517 	ldw	r2,-44(fp)
 8042304:	10800717 	ldw	r2,28(r2)
 8042308:	e0bff615 	stw	r2,-40(fp)

      goto sendit;
 804230c:	00003f06 	br	804240c <ip_write_internal+0x3e8>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
 8042310:	e0bff517 	ldw	r2,-44(fp)
 8042314:	10800717 	ldw	r2,28(r2)
 8042318:	10bfffd8 	cmpnei	r2,r2,-1
 804231c:	1000041e 	bne	r2,zero,8042330 <ip_write_internal+0x30c>
   {
      firsthop = p->fhost;
 8042320:	e0bff517 	ldw	r2,-44(fp)
 8042324:	10800717 	ldw	r2,28(r2)
 8042328:	e0bff615 	stw	r2,-40(fp)
 804232c:	00003706 	br	804240c <ip_write_internal+0x3e8>
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
 8042330:	e0bff517 	ldw	r2,-44(fp)
 8042334:	10800717 	ldw	r2,28(r2)
 8042338:	e0fff604 	addi	r3,fp,-40
 804233c:	180b883a 	mov	r5,r3
 8042340:	1009883a 	mov	r4,r2
 8042344:	8043a540 	call	8043a54 <iproute>
 8042348:	1007883a 	mov	r3,r2
 804234c:	e0bff517 	ldw	r2,-44(fp)
 8042350:	10c00615 	stw	r3,24(r2)
      if (p->net == NULL)
 8042354:	e0bff517 	ldw	r2,-44(fp)
 8042358:	10800617 	ldw	r2,24(r2)
 804235c:	10002a1e 	bne	r2,zero,8042408 <ip_write_internal+0x3e4>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 8042360:	d0a07e17 	ldw	r2,-32264(gp)
 8042364:	1080840c 	andi	r2,r2,528
 8042368:	10001a26 	beq	r2,zero,80423d4 <ip_write_internal+0x3b0>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 804236c:	e0bff517 	ldw	r2,-44(fp)
 8042370:	11400417 	ldw	r5,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 8042374:	e0bff517 	ldw	r2,-44(fp)
 8042378:	10800717 	ldw	r2,28(r2)
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 804237c:	11803fcc 	andi	r6,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 8042380:	e0bff517 	ldw	r2,-44(fp)
 8042384:	10800717 	ldw	r2,28(r2)
 8042388:	1004d23a 	srli	r2,r2,8
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 804238c:	10803fcc 	andi	r2,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 8042390:	e0fff517 	ldw	r3,-44(fp)
 8042394:	18c00717 	ldw	r3,28(r3)
 8042398:	1806d43a 	srli	r3,r3,16
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 804239c:	18c03fcc 	andi	r3,r3,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 80423a0:	e13ff517 	ldw	r4,-44(fp)
 80423a4:	21000717 	ldw	r4,28(r4)
 80423a8:	2008d63a 	srli	r4,r4,24
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 80423ac:	d9000215 	stw	r4,8(sp)
 80423b0:	d8c00115 	stw	r3,4(sp)
 80423b4:	d8800015 	stw	r2,0(sp)
 80423b8:	300f883a 	mov	r7,r6
 80423bc:	280d883a 	mov	r6,r5
 80423c0:	e17ff517 	ldw	r5,-44(fp)
 80423c4:	01020174 	movhi	r4,2053
 80423c8:	21100904 	addi	r4,r4,16420
 80423cc:	8003b840 	call	8003b84 <printf>
            dtrap();
 80423d0:	80301a80 	call	80301a8 <dtrap>
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
 80423d4:	008201b4 	movhi	r2,2054
 80423d8:	10801f17 	ldw	r2,124(r2)
 80423dc:	10c00044 	addi	r3,r2,1
 80423e0:	008201b4 	movhi	r2,2054
 80423e4:	10c01f15 	stw	r3,124(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80423e8:	01000084 	movi	r4,2
 80423ec:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 80423f0:	e13ff517 	ldw	r4,-44(fp)
 80423f4:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80423f8:	01000084 	movi	r4,2
 80423fc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 8042400:	00bff7c4 	movi	r2,-33
 8042404:	0000c506 	br	804271c <ip_write_internal+0x6f8>
      }
   }

#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
 8042408:	0001883a 	nop
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 804240c:	d0a07e17 	ldw	r2,-32264(gp)
 8042410:	1080800c 	andi	r2,r2,512
 8042414:	10002926 	beq	r2,zero,80424bc <ip_write_internal+0x498>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 8042418:	e0bff517 	ldw	r2,-44(fp)
 804241c:	11000417 	ldw	r4,16(r2)
       p->nb_plen, PUSH_IPADDR(p->fhost));
 8042420:	e0bff517 	ldw	r2,-44(fp)
 8042424:	10800717 	ldw	r2,28(r2)
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 8042428:	11403fcc 	andi	r5,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 804242c:	e0bff517 	ldw	r2,-44(fp)
 8042430:	10800717 	ldw	r2,28(r2)
 8042434:	1004d23a 	srli	r2,r2,8
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 8042438:	11803fcc 	andi	r6,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 804243c:	e0bff517 	ldw	r2,-44(fp)
 8042440:	10800717 	ldw	r2,28(r2)
 8042444:	1004d43a 	srli	r2,r2,16
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 8042448:	10803fcc 	andi	r2,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 804244c:	e0fff517 	ldw	r3,-44(fp)
 8042450:	18c00717 	ldw	r3,28(r3)
 8042454:	1806d63a 	srli	r3,r3,24
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 8042458:	d8c00115 	stw	r3,4(sp)
 804245c:	d8800015 	stw	r2,0(sp)
 8042460:	300f883a 	mov	r7,r6
 8042464:	280d883a 	mov	r6,r5
 8042468:	200b883a 	mov	r5,r4
 804246c:	01020174 	movhi	r4,2053
 8042470:	21101904 	addi	r4,r4,16484
 8042474:	8003b840 	call	8003b84 <printf>
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
 8042478:	e0bff617 	ldw	r2,-40(fp)
 804247c:	10c03fcc 	andi	r3,r2,255
 8042480:	e0bff617 	ldw	r2,-40(fp)
 8042484:	1004d23a 	srli	r2,r2,8
 8042488:	11003fcc 	andi	r4,r2,255
 804248c:	e0bff617 	ldw	r2,-40(fp)
 8042490:	1004d43a 	srli	r2,r2,16
 8042494:	11403fcc 	andi	r5,r2,255
 8042498:	e0bff617 	ldw	r2,-40(fp)
 804249c:	1004d63a 	srli	r2,r2,24
 80424a0:	d8800015 	stw	r2,0(sp)
 80424a4:	280f883a 	mov	r7,r5
 80424a8:	200d883a 	mov	r6,r4
 80424ac:	180b883a 	mov	r5,r3
 80424b0:	01020174 	movhi	r4,2053
 80424b4:	21102204 	addi	r4,r4,16520
 80424b8:	8003b840 	call	8003b84 <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
 80424bc:	e0bff517 	ldw	r2,-44(fp)
 80424c0:	10800617 	ldw	r2,24(r2)
 80424c4:	10c00a17 	ldw	r3,40(r2)
 80424c8:	e0bff517 	ldw	r2,-44(fp)
 80424cc:	10800717 	ldw	r2,28(r2)
 80424d0:	1880271e 	bne	r3,r2,8042570 <ip_write_internal+0x54c>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
 80424d4:	e0bff517 	ldw	r2,-44(fp)
 80424d8:	10800717 	ldw	r2,28(r2)
 80424dc:	10803fcc 	andi	r2,r2,255
   if ((p->net->n_ipaddr == p->fhost) &&
 80424e0:	10801fe0 	cmpeqi	r2,r2,127
 80424e4:	1000221e 	bne	r2,zero,8042570 <ip_write_internal+0x54c>
   {
      if (!(p->net->n_flags & NF_NBPROT))
 80424e8:	e0bff517 	ldw	r2,-44(fp)
 80424ec:	10800617 	ldw	r2,24(r2)
 80424f0:	10802a17 	ldw	r2,168(r2)
 80424f4:	1080020c 	andi	r2,r2,8
 80424f8:	1000091e 	bne	r2,zero,8042520 <ip_write_internal+0x4fc>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
 80424fc:	80301a80 	call	80301a8 <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8042500:	01000084 	movi	r4,2
 8042504:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 8042508:	e13ff517 	ldw	r4,-44(fp)
 804250c:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042510:	01000084 	movi	r4,2
 8042514:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
 8042518:	00bffd44 	movi	r2,-11
 804251c:	00007f06 	br	804271c <ip_write_internal+0x6f8>
      }
      p->type = IPTP;
 8042520:	e0bff517 	ldw	r2,-44(fp)
 8042524:	00c00204 	movi	r3,8
 8042528:	10c0080d 	sth	r3,32(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
 804252c:	0009883a 	mov	r4,zero
 8042530:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
 8042534:	01000044 	movi	r4,1
 8042538:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
 804253c:	e17ff517 	ldw	r5,-44(fp)
 8042540:	010201b4 	movhi	r4,2054
 8042544:	213d0904 	addi	r4,r4,-3036
 8042548:	802fb8c0 	call	802fb8c <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 804254c:	01000044 	movi	r4,1
 8042550:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
 8042554:	0009883a 	mov	r4,zero
 8042558:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
 804255c:	d0a0a617 	ldw	r2,-32104(gp)
 8042560:	1009883a 	mov	r4,r2
 8042564:	801a9f80 	call	801a9f8 <OSSemPost>

      return SUCCESS;
 8042568:	0005883a 	mov	r2,zero
 804256c:	00006b06 	br	804271c <ip_write_internal+0x6f8>
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
 8042570:	e0bff517 	ldw	r2,-44(fp)
 8042574:	10800a17 	ldw	r2,40(r2)
 8042578:	1080040c 	andi	r2,r2,16
 804257c:	1005003a 	cmpeq	r2,r2,zero
 8042580:	e0bffac5 	stb	r2,-21(fp)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
 8042584:	802f9f00 	call	802f9f0 <pk_get_max_intrsafe_buf_len>
 8042588:	e0bff915 	stw	r2,-28(fp)
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
 804258c:	e0bffac3 	ldbu	r2,-21(fp)
 8042590:	1000091e 	bne	r2,zero,80425b8 <ip_write_internal+0x594>
       limit = MIN(maxbuflen,p->net->n_mtu);
 8042594:	e0bff517 	ldw	r2,-44(fp)
 8042598:	10800617 	ldw	r2,24(r2)
 804259c:	10800917 	ldw	r2,36(r2)
 80425a0:	1007883a 	mov	r3,r2
 80425a4:	e0bff917 	ldw	r2,-28(fp)
 80425a8:	1880012e 	bgeu	r3,r2,80425b0 <ip_write_internal+0x58c>
 80425ac:	1805883a 	mov	r2,r3
 80425b0:	e0bffe15 	stw	r2,-8(fp)
 80425b4:	00000406 	br	80425c8 <ip_write_internal+0x5a4>
   else
       limit = p->net->n_mtu;
 80425b8:	e0bff517 	ldw	r2,-44(fp)
 80425bc:	10800617 	ldw	r2,24(r2)
 80425c0:	10800917 	ldw	r2,36(r2)
 80425c4:	e0bffe15 	stw	r2,-8(fp)

   if ((p->nb_plen + p->net->n_lnh) > limit)
 80425c8:	e0bff517 	ldw	r2,-44(fp)
 80425cc:	10800417 	ldw	r2,16(r2)
 80425d0:	e0fff517 	ldw	r3,-44(fp)
 80425d4:	18c00617 	ldw	r3,24(r3)
 80425d8:	18c00817 	ldw	r3,32(r3)
 80425dc:	10c5883a 	add	r2,r2,r3
 80425e0:	e0fffe17 	ldw	r3,-8(fp)
 80425e4:	1880072e 	bgeu	r3,r2,8042604 <ip_write_internal+0x5e0>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
 80425e8:	e0bff617 	ldw	r2,-40(fp)
 80425ec:	100b883a 	mov	r5,r2
 80425f0:	e13ff517 	ldw	r4,-44(fp)
 80425f4:	80431700 	call	8043170 <ip_fragment>
 80425f8:	e0bff715 	stw	r2,-36(fp)
      IN_PROFILER(PF_IP, PF_EXIT);
      return(err);
 80425fc:	e0bff717 	ldw	r2,-36(fp)
 8042600:	00004606 	br	804271c <ip_write_internal+0x6f8>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
 8042604:	e0bffac3 	ldbu	r2,-21(fp)
 8042608:	1000401e 	bne	r2,zero,804270c <ip_write_internal+0x6e8>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 804260c:	01000084 	movi	r4,2
 8042610:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
 8042614:	e0bff517 	ldw	r2,-44(fp)
 8042618:	10800417 	ldw	r2,16(r2)
 804261c:	e0fff517 	ldw	r3,-44(fp)
 8042620:	18c00617 	ldw	r3,24(r3)
 8042624:	18c00817 	ldw	r3,32(r3)
 8042628:	10c5883a 	add	r2,r2,r3
 804262c:	1009883a 	mov	r4,r2
 8042630:	802f6300 	call	802f630 <pk_alloc>
 8042634:	e0bff815 	stw	r2,-32(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042638:	01000084 	movi	r4,2
 804263c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
 8042640:	e0bff817 	ldw	r2,-32(fp)
 8042644:	1000081e 	bne	r2,zero,8042668 <ip_write_internal+0x644>
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 8042648:	01000084 	movi	r4,2
 804264c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 8042650:	e13ff517 	ldw	r4,-44(fp)
 8042654:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042658:	01000084 	movi	r4,2
 804265c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NOBUFFER;
 8042660:	00bffac4 	movi	r2,-21
 8042664:	00002d06 	br	804271c <ip_write_internal+0x6f8>
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
 8042668:	e0bff817 	ldw	r2,-32(fp)
 804266c:	10800117 	ldw	r2,4(r2)
 8042670:	e0fff517 	ldw	r3,-44(fp)
 8042674:	18c00617 	ldw	r3,24(r3)
 8042678:	18c00817 	ldw	r3,32(r3)
 804267c:	10c7883a 	add	r3,r2,r3
 8042680:	e0bff817 	ldw	r2,-32(fp)
 8042684:	10c00315 	stw	r3,12(r2)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
 8042688:	e0bff817 	ldw	r2,-32(fp)
 804268c:	10c00317 	ldw	r3,12(r2)
 8042690:	e0bff517 	ldw	r2,-44(fp)
 8042694:	11000317 	ldw	r4,12(r2)
 8042698:	e0bff517 	ldw	r2,-44(fp)
 804269c:	10800417 	ldw	r2,16(r2)
 80426a0:	100d883a 	mov	r6,r2
 80426a4:	200b883a 	mov	r5,r4
 80426a8:	1809883a 	mov	r4,r3
 80426ac:	80037cc0 	call	80037cc <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
 80426b0:	e0bff517 	ldw	r2,-44(fp)
 80426b4:	10c00417 	ldw	r3,16(r2)
 80426b8:	e0bff817 	ldw	r2,-32(fp)
 80426bc:	10c00415 	stw	r3,16(r2)
            newpkt->net = p->net;
 80426c0:	e0bff517 	ldw	r2,-44(fp)
 80426c4:	10c00617 	ldw	r3,24(r2)
 80426c8:	e0bff817 	ldw	r2,-32(fp)
 80426cc:	10c00615 	stw	r3,24(r2)
            newpkt->fhost = p->fhost;
 80426d0:	e0bff517 	ldw	r2,-44(fp)
 80426d4:	10c00717 	ldw	r3,28(r2)
 80426d8:	e0bff817 	ldw	r2,-32(fp)
 80426dc:	10c00715 	stw	r3,28(r2)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 80426e0:	01000084 	movi	r4,2
 80426e4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 80426e8:	e13ff517 	ldw	r4,-44(fp)
 80426ec:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80426f0:	01000084 	movi	r4,2
 80426f4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
 80426f8:	e0bff617 	ldw	r2,-40(fp)
 80426fc:	100b883a 	mov	r5,r2
 8042700:	e13ff817 	ldw	r4,-32(fp)
 8042704:	80299b80 	call	80299b8 <ip2mac>
 8042708:	00000406 	br	804271c <ip_write_internal+0x6f8>
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
 804270c:	e0bff617 	ldw	r2,-40(fp)
 8042710:	100b883a 	mov	r5,r2
 8042714:	e13ff517 	ldw	r4,-44(fp)
 8042718:	80299b80 	call	80299b8 <ip2mac>
      }
   }
}
 804271c:	e037883a 	mov	sp,fp
 8042720:	dfc00117 	ldw	ra,4(sp)
 8042724:	df000017 	ldw	fp,0(sp)
 8042728:	dec00204 	addi	sp,sp,8
 804272c:	f800283a 	ret

08042730 <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 8042730:	defff904 	addi	sp,sp,-28
 8042734:	dfc00615 	stw	ra,24(sp)
 8042738:	df000515 	stw	fp,20(sp)
 804273c:	df000504 	addi	fp,sp,20
 8042740:	2005883a 	mov	r2,r4
 8042744:	e17ffb15 	stw	r5,-20(fp)
 8042748:	e0bffc05 	stb	r2,-16(fp)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 804274c:	008201b4 	movhi	r2,2054
 8042750:	10801d17 	ldw	r2,116(r2)
 8042754:	10c00044 	addi	r3,r2,1
 8042758:	008201b4 	movhi	r2,2054
 804275c:	10c01d15 	stw	r3,116(r2)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 8042760:	e0bffb17 	ldw	r2,-20(fp)
 8042764:	10800317 	ldw	r2,12(r2)
 8042768:	10fffb04 	addi	r3,r2,-20
 804276c:	e0bffb17 	ldw	r2,-20(fp)
 8042770:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 8042774:	e0bffb17 	ldw	r2,-20(fp)
 8042778:	10800417 	ldw	r2,16(r2)
 804277c:	10c00504 	addi	r3,r2,20
 8042780:	e0bffb17 	ldw	r2,-20(fp)
 8042784:	10c00415 	stw	r3,16(r2)
   pip = (struct ip*)(p->nb_prot);
 8042788:	e0bffb17 	ldw	r2,-20(fp)
 804278c:	10800317 	ldw	r2,12(r2)
 8042790:	e0bffe15 	stw	r2,-8(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 8042794:	e0bffe17 	ldw	r2,-8(fp)
 8042798:	00c01144 	movi	r3,69
 804279c:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
 80427a0:	e0bffe17 	ldw	r2,-8(fp)
 80427a4:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 80427a8:	d0a04e17 	ldw	r2,-32456(gp)
 80427ac:	10bfffcc 	andi	r2,r2,65535
 80427b0:	1004d23a 	srli	r2,r2,8
 80427b4:	1007883a 	mov	r3,r2
 80427b8:	d0a04e17 	ldw	r2,-32456(gp)
 80427bc:	10bfffcc 	andi	r2,r2,65535
 80427c0:	1004923a 	slli	r2,r2,8
 80427c4:	1884b03a 	or	r2,r3,r2
 80427c8:	1007883a 	mov	r3,r2
 80427cc:	e0bffe17 	ldw	r2,-8(fp)
 80427d0:	10c0010d 	sth	r3,4(r2)
   uid++;
 80427d4:	d0a04e17 	ldw	r2,-32456(gp)
 80427d8:	10800044 	addi	r2,r2,1
 80427dc:	d0a04e15 	stw	r2,-32456(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 80427e0:	e0bffb17 	ldw	r2,-20(fp)
 80427e4:	10800417 	ldw	r2,16(r2)
 80427e8:	10bfffcc 	andi	r2,r2,65535
 80427ec:	1004d23a 	srli	r2,r2,8
 80427f0:	1007883a 	mov	r3,r2
 80427f4:	e0bffb17 	ldw	r2,-20(fp)
 80427f8:	10800417 	ldw	r2,16(r2)
 80427fc:	10bfffcc 	andi	r2,r2,65535
 8042800:	1004923a 	slli	r2,r2,8
 8042804:	1884b03a 	or	r2,r3,r2
 8042808:	1007883a 	mov	r3,r2
 804280c:	e0bffe17 	ldw	r2,-8(fp)
 8042810:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 8042814:	e0bffe17 	ldw	r2,-8(fp)
 8042818:	e0fffc03 	ldbu	r3,-16(fp)
 804281c:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 8042820:	e0bffe17 	ldw	r2,-8(fp)
 8042824:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 8042828:	00801004 	movi	r2,64
 804282c:	e0bfffc5 	stb	r2,-1(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 8042830:	e0bffb17 	ldw	r2,-20(fp)
 8042834:	10800717 	ldw	r2,28(r2)
 8042838:	1006d63a 	srli	r3,r2,24
 804283c:	e0bffb17 	ldw	r2,-20(fp)
 8042840:	10800717 	ldw	r2,28(r2)
 8042844:	1004d23a 	srli	r2,r2,8
 8042848:	10bfc00c 	andi	r2,r2,65280
 804284c:	1886b03a 	or	r3,r3,r2
 8042850:	e0bffb17 	ldw	r2,-20(fp)
 8042854:	10800717 	ldw	r2,28(r2)
 8042858:	1004923a 	slli	r2,r2,8
 804285c:	10803fec 	andhi	r2,r2,255
 8042860:	1886b03a 	or	r3,r3,r2
 8042864:	e0bffb17 	ldw	r2,-20(fp)
 8042868:	10800717 	ldw	r2,28(r2)
 804286c:	1004963a 	slli	r2,r2,24
 8042870:	1884b03a 	or	r2,r3,r2
 8042874:	10fc002c 	andhi	r3,r2,61440
 8042878:	00b80034 	movhi	r2,57344
 804287c:	1880071e 	bne	r3,r2,804289c <ip_write+0x16c>
 8042880:	e0bffb17 	ldw	r2,-20(fp)
 8042884:	10800b17 	ldw	r2,44(r2)
 8042888:	10000426 	beq	r2,zero,804289c <ip_write+0x16c>
      ttl = p->imo->imo_multicast_ttl;
 804288c:	e0bffb17 	ldw	r2,-20(fp)
 8042890:	10800b17 	ldw	r2,44(r2)
 8042894:	10800103 	ldbu	r2,4(r2)
 8042898:	e0bfffc5 	stb	r2,-1(fp)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 804289c:	e0bffb17 	ldw	r2,-20(fp)
 80428a0:	10800c17 	ldw	r2,48(r2)
 80428a4:	e0bffd15 	stw	r2,-12(fp)
 80428a8:	e0bffd17 	ldw	r2,-12(fp)
 80428ac:	10001126 	beq	r2,zero,80428f4 <ip_write+0x1c4>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 80428b0:	e0bffd17 	ldw	r2,-12(fp)
 80428b4:	10800043 	ldbu	r2,1(r2)
 80428b8:	10803fcc 	andi	r2,r2,255
 80428bc:	10000526 	beq	r2,zero,80428d4 <ip_write+0x1a4>
         pip->ip_time = sopts->ip_ttl;
 80428c0:	e0bffd17 	ldw	r2,-12(fp)
 80428c4:	10c00043 	ldbu	r3,1(r2)
 80428c8:	e0bffe17 	ldw	r2,-8(fp)
 80428cc:	10c00205 	stb	r3,8(r2)
 80428d0:	00000306 	br	80428e0 <ip_write+0x1b0>
	  else
         pip->ip_time = ttl;
 80428d4:	e0bffe17 	ldw	r2,-8(fp)
 80428d8:	e0ffffc3 	ldbu	r3,-1(fp)
 80428dc:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 80428e0:	e0bffd17 	ldw	r2,-12(fp)
 80428e4:	10c00003 	ldbu	r3,0(r2)
 80428e8:	e0bffe17 	ldw	r2,-8(fp)
 80428ec:	10c00045 	stb	r3,1(r2)
 80428f0:	00000506 	br	8042908 <ip_write+0x1d8>
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
 80428f4:	e0bffe17 	ldw	r2,-8(fp)
 80428f8:	e0ffffc3 	ldbu	r3,-1(fp)
 80428fc:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 8042900:	e0bffe17 	ldw	r2,-8(fp)
 8042904:	10000045 	stb	zero,1(r2)
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
 8042908:	01400284 	movi	r5,10
 804290c:	e13ffe17 	ldw	r4,-8(fp)
 8042910:	802b98c0 	call	802b98c <cksum>
 8042914:	0084303a 	nor	r2,zero,r2
 8042918:	1007883a 	mov	r3,r2
 804291c:	e0bffe17 	ldw	r2,-8(fp)
 8042920:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 8042924:	e13ffb17 	ldw	r4,-20(fp)
 8042928:	80420240 	call	8042024 <ip_write_internal>
}
 804292c:	e037883a 	mov	sp,fp
 8042930:	dfc00117 	ldw	ra,4(sp)
 8042934:	df000017 	ldw	fp,0(sp)
 8042938:	dec00204 	addi	sp,sp,8
 804293c:	f800283a 	ret

08042940 <ip_write2>:
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 8042940:	defff604 	addi	sp,sp,-40
 8042944:	dfc00915 	stw	ra,36(sp)
 8042948:	df000815 	stw	fp,32(sp)
 804294c:	df000804 	addi	fp,sp,32
 8042950:	2005883a 	mov	r2,r4
 8042954:	e17ff915 	stw	r5,-28(fp)
 8042958:	e1bff815 	stw	r6,-32(fp)
 804295c:	e0bffa05 	stb	r2,-24(fp)
   struct ip * pip;
   u_char ttl;
   struct ip_socopts * sopts;
   u_char iphlen = sizeof (struct ip);
 8042960:	00800504 	movi	r2,20
 8042964:	e0bfff85 	stb	r2,-2(fp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 8042968:	008201b4 	movhi	r2,2054
 804296c:	10801d17 	ldw	r2,116(r2)
 8042970:	10c00044 	addi	r3,r2,1
 8042974:	008201b4 	movhi	r2,2054
 8042978:	10c01d15 	stw	r3,116(r2)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 804297c:	e0bff817 	ldw	r2,-32(fp)
 8042980:	e0bffe15 	stw	r2,-8(fp)
 8042984:	00000d06 	br	80429bc <ip_write2+0x7c>
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
 8042988:	e0bffe17 	ldw	r2,-8(fp)
 804298c:	10800003 	ldbu	r2,0(r2)
 8042990:	10803fcc 	andi	r2,r2,255
 8042994:	10800518 	cmpnei	r2,r2,20
 8042998:	1000041e 	bne	r2,zero,80429ac <ip_write2+0x6c>
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
 804299c:	e0bfff83 	ldbu	r2,-2(fp)
 80429a0:	10800104 	addi	r2,r2,4
 80429a4:	e0bfff85 	stb	r2,-2(fp)
            break;
 80429a8:	00000106 	br	80429b0 <ip_write2+0x70>
         default:
            break;
 80429ac:	0001883a 	nop
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 80429b0:	e0bffe17 	ldw	r2,-8(fp)
 80429b4:	10800044 	addi	r2,r2,1
 80429b8:	e0bffe15 	stw	r2,-8(fp)
 80429bc:	e0bffe17 	ldw	r2,-8(fp)
 80429c0:	10800003 	ldbu	r2,0(r2)
 80429c4:	10803fcc 	andi	r2,r2,255
 80429c8:	103fef1e 	bne	r2,zero,8042988 <ip_write2+0x48>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
 80429cc:	e0bfff83 	ldbu	r2,-2(fp)
 80429d0:	108000cc 	andi	r2,r2,3
 80429d4:	10000726 	beq	r2,zero,80429f4 <ip_write2+0xb4>
      iphlen_pad = 4 - (iphlen & 0x3);
 80429d8:	e0bfff83 	ldbu	r2,-2(fp)
 80429dc:	108000cc 	andi	r2,r2,3
 80429e0:	1007883a 	mov	r3,r2
 80429e4:	00800104 	movi	r2,4
 80429e8:	10c5c83a 	sub	r2,r2,r3
 80429ec:	e0bffdc5 	stb	r2,-9(fp)
 80429f0:	00000106 	br	80429f8 <ip_write2+0xb8>
   else iphlen_pad = 0; /* no header padding required */
 80429f4:	e03ffdc5 	stb	zero,-9(fp)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 80429f8:	e0bff917 	ldw	r2,-28(fp)
 80429fc:	10c00317 	ldw	r3,12(r2)
 8042a00:	e13fff83 	ldbu	r4,-2(fp)
 8042a04:	e0bffdc3 	ldbu	r2,-9(fp)
 8042a08:	2085883a 	add	r2,r4,r2
 8042a0c:	0085c83a 	sub	r2,zero,r2
 8042a10:	1887883a 	add	r3,r3,r2
 8042a14:	e0bff917 	ldw	r2,-28(fp)
 8042a18:	10c00315 	stw	r3,12(r2)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 8042a1c:	e0bff917 	ldw	r2,-28(fp)
 8042a20:	10800417 	ldw	r2,16(r2)
 8042a24:	e13fff83 	ldbu	r4,-2(fp)
 8042a28:	e0fffdc3 	ldbu	r3,-9(fp)
 8042a2c:	20c7883a 	add	r3,r4,r3
 8042a30:	10c7883a 	add	r3,r2,r3
 8042a34:	e0bff917 	ldw	r2,-28(fp)
 8042a38:	10c00415 	stw	r3,16(r2)
   pip = (struct ip *) (p->nb_prot);
 8042a3c:	e0bff917 	ldw	r2,-28(fp)
 8042a40:	10800317 	ldw	r2,12(r2)
 8042a44:	e0bffc15 	stw	r2,-16(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
 8042a48:	e0ffff83 	ldbu	r3,-2(fp)
 8042a4c:	e0bffdc3 	ldbu	r2,-9(fp)
 8042a50:	1885883a 	add	r2,r3,r2
 8042a54:	1005d0ba 	srai	r2,r2,2
 8042a58:	10801014 	ori	r2,r2,64
 8042a5c:	1007883a 	mov	r3,r2
 8042a60:	e0bffc17 	ldw	r2,-16(fp)
 8042a64:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
 8042a68:	e0bffc17 	ldw	r2,-16(fp)
 8042a6c:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 8042a70:	d0a04e17 	ldw	r2,-32456(gp)
 8042a74:	10bfffcc 	andi	r2,r2,65535
 8042a78:	1004d23a 	srli	r2,r2,8
 8042a7c:	1007883a 	mov	r3,r2
 8042a80:	d0a04e17 	ldw	r2,-32456(gp)
 8042a84:	10bfffcc 	andi	r2,r2,65535
 8042a88:	1004923a 	slli	r2,r2,8
 8042a8c:	1884b03a 	or	r2,r3,r2
 8042a90:	1007883a 	mov	r3,r2
 8042a94:	e0bffc17 	ldw	r2,-16(fp)
 8042a98:	10c0010d 	sth	r3,4(r2)
   uid++;
 8042a9c:	d0a04e17 	ldw	r2,-32456(gp)
 8042aa0:	10800044 	addi	r2,r2,1
 8042aa4:	d0a04e15 	stw	r2,-32456(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 8042aa8:	e0bff917 	ldw	r2,-28(fp)
 8042aac:	10800417 	ldw	r2,16(r2)
 8042ab0:	10bfffcc 	andi	r2,r2,65535
 8042ab4:	1004d23a 	srli	r2,r2,8
 8042ab8:	1007883a 	mov	r3,r2
 8042abc:	e0bff917 	ldw	r2,-28(fp)
 8042ac0:	10800417 	ldw	r2,16(r2)
 8042ac4:	10bfffcc 	andi	r2,r2,65535
 8042ac8:	1004923a 	slli	r2,r2,8
 8042acc:	1884b03a 	or	r2,r3,r2
 8042ad0:	1007883a 	mov	r3,r2
 8042ad4:	e0bffc17 	ldw	r2,-16(fp)
 8042ad8:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 8042adc:	e0bffc17 	ldw	r2,-16(fp)
 8042ae0:	e0fffa03 	ldbu	r3,-24(fp)
 8042ae4:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 8042ae8:	e0bffc17 	ldw	r2,-16(fp)
 8042aec:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 8042af0:	00801004 	movi	r2,64
 8042af4:	e0bfffc5 	stb	r2,-1(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 8042af8:	e0bff917 	ldw	r2,-28(fp)
 8042afc:	10800717 	ldw	r2,28(r2)
 8042b00:	1006d63a 	srli	r3,r2,24
 8042b04:	e0bff917 	ldw	r2,-28(fp)
 8042b08:	10800717 	ldw	r2,28(r2)
 8042b0c:	1004d23a 	srli	r2,r2,8
 8042b10:	10bfc00c 	andi	r2,r2,65280
 8042b14:	1886b03a 	or	r3,r3,r2
 8042b18:	e0bff917 	ldw	r2,-28(fp)
 8042b1c:	10800717 	ldw	r2,28(r2)
 8042b20:	1004923a 	slli	r2,r2,8
 8042b24:	10803fec 	andhi	r2,r2,255
 8042b28:	1886b03a 	or	r3,r3,r2
 8042b2c:	e0bff917 	ldw	r2,-28(fp)
 8042b30:	10800717 	ldw	r2,28(r2)
 8042b34:	1004963a 	slli	r2,r2,24
 8042b38:	1884b03a 	or	r2,r3,r2
 8042b3c:	10fc002c 	andhi	r3,r2,61440
 8042b40:	00b80034 	movhi	r2,57344
 8042b44:	1880071e 	bne	r3,r2,8042b64 <ip_write2+0x224>
 8042b48:	e0bff917 	ldw	r2,-28(fp)
 8042b4c:	10800b17 	ldw	r2,44(r2)
 8042b50:	10000426 	beq	r2,zero,8042b64 <ip_write2+0x224>
      ttl = p->imo->imo_multicast_ttl;
 8042b54:	e0bff917 	ldw	r2,-28(fp)
 8042b58:	10800b17 	ldw	r2,44(r2)
 8042b5c:	10800103 	ldbu	r2,4(r2)
 8042b60:	e0bfffc5 	stb	r2,-1(fp)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 8042b64:	e0bff917 	ldw	r2,-28(fp)
 8042b68:	10800c17 	ldw	r2,48(r2)
 8042b6c:	e0bffb15 	stw	r2,-20(fp)
 8042b70:	e0bffb17 	ldw	r2,-20(fp)
 8042b74:	10001126 	beq	r2,zero,8042bbc <ip_write2+0x27c>
   {
      if (sopts->ip_ttl)
 8042b78:	e0bffb17 	ldw	r2,-20(fp)
 8042b7c:	10800043 	ldbu	r2,1(r2)
 8042b80:	10803fcc 	andi	r2,r2,255
 8042b84:	10000526 	beq	r2,zero,8042b9c <ip_write2+0x25c>
         pip->ip_time = sopts->ip_ttl;
 8042b88:	e0bffb17 	ldw	r2,-20(fp)
 8042b8c:	10c00043 	ldbu	r3,1(r2)
 8042b90:	e0bffc17 	ldw	r2,-16(fp)
 8042b94:	10c00205 	stb	r3,8(r2)
 8042b98:	00000306 	br	8042ba8 <ip_write2+0x268>
      else
         pip->ip_time = ttl;
 8042b9c:	e0bffc17 	ldw	r2,-16(fp)
 8042ba0:	e0ffffc3 	ldbu	r3,-1(fp)
 8042ba4:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 8042ba8:	e0bffb17 	ldw	r2,-20(fp)
 8042bac:	10c00003 	ldbu	r3,0(r2)
 8042bb0:	e0bffc17 	ldw	r2,-16(fp)
 8042bb4:	10c00045 	stb	r3,1(r2)
 8042bb8:	00000506 	br	8042bd0 <ip_write2+0x290>
   }
   else
   {
      pip->ip_time = ttl;
 8042bbc:	e0bffc17 	ldw	r2,-16(fp)
 8042bc0:	e0ffffc3 	ldbu	r3,-1(fp)
 8042bc4:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 8042bc8:	e0bffc17 	ldw	r2,-16(fp)
 8042bcc:	10000045 	stb	zero,1(r2)
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 8042bd0:	e0bff917 	ldw	r2,-28(fp)
 8042bd4:	10800317 	ldw	r2,12(r2)
 8042bd8:	10800504 	addi	r2,r2,20
 8042bdc:	e0bffe15 	stw	r2,-8(fp)
 8042be0:	00001006 	br	8042c24 <ip_write2+0x2e4>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
 8042be4:	e0bff817 	ldw	r2,-32(fp)
 8042be8:	10800003 	ldbu	r2,0(r2)
 8042bec:	10803fcc 	andi	r2,r2,255
 8042bf0:	10800518 	cmpnei	r2,r2,20
 8042bf4:	1000071e 	bne	r2,zero,8042c14 <ip_write2+0x2d4>
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
 8042bf8:	e0bffe17 	ldw	r2,-8(fp)
 8042bfc:	00c12504 	movi	r3,1172
 8042c00:	10c00015 	stw	r3,0(r2)
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
 8042c04:	e0bffe17 	ldw	r2,-8(fp)
 8042c08:	10800104 	addi	r2,r2,4
 8042c0c:	e0bffe15 	stw	r2,-8(fp)
            break;
 8042c10:	00000106 	br	8042c18 <ip_write2+0x2d8>
         default:
            break;
 8042c14:	0001883a 	nop
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 8042c18:	e0bff817 	ldw	r2,-32(fp)
 8042c1c:	10800044 	addi	r2,r2,1
 8042c20:	e0bff815 	stw	r2,-32(fp)
 8042c24:	e0bff817 	ldw	r2,-32(fp)
 8042c28:	10800003 	ldbu	r2,0(r2)
 8042c2c:	10803fcc 	andi	r2,r2,255
 8042c30:	103fec1e 	bne	r2,zero,8042be4 <ip_write2+0x2a4>
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
 8042c34:	e03ffd85 	stb	zero,-10(fp)
 8042c38:	00000706 	br	8042c58 <ip_write2+0x318>
 8042c3c:	e0bffd83 	ldbu	r2,-10(fp)
 8042c40:	e0fffe17 	ldw	r3,-8(fp)
 8042c44:	1885883a 	add	r2,r3,r2
 8042c48:	10000005 	stb	zero,0(r2)
 8042c4c:	e0bffd83 	ldbu	r2,-10(fp)
 8042c50:	10800044 	addi	r2,r2,1
 8042c54:	e0bffd85 	stb	r2,-10(fp)
 8042c58:	e0fffd83 	ldbu	r3,-10(fp)
 8042c5c:	e0bffdc3 	ldbu	r2,-9(fp)
 8042c60:	18bff636 	bltu	r3,r2,8042c3c <ip_write2+0x2fc>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
 8042c64:	e0ffff83 	ldbu	r3,-2(fp)
 8042c68:	e0bffdc3 	ldbu	r2,-9(fp)
 8042c6c:	1885883a 	add	r2,r3,r2
 8042c70:	1006d7fa 	srli	r3,r2,31
 8042c74:	1885883a 	add	r2,r3,r2
 8042c78:	1005d07a 	srai	r2,r2,1
 8042c7c:	100b883a 	mov	r5,r2
 8042c80:	e13ffc17 	ldw	r4,-16(fp)
 8042c84:	802b98c0 	call	802b98c <cksum>
 8042c88:	0084303a 	nor	r2,zero,r2
 8042c8c:	1007883a 	mov	r3,r2
 8042c90:	e0bffc17 	ldw	r2,-16(fp)
 8042c94:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal (p));
 8042c98:	e13ff917 	ldw	r4,-28(fp)
 8042c9c:	80420240 	call	8042024 <ip_write_internal>
}
 8042ca0:	e037883a 	mov	sp,fp
 8042ca4:	dfc00117 	ldw	ra,4(sp)
 8042ca8:	df000017 	ldw	fp,0(sp)
 8042cac:	dec00204 	addi	sp,sp,8
 8042cb0:	f800283a 	ret

08042cb4 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 8042cb4:	defffc04 	addi	sp,sp,-16
 8042cb8:	dfc00315 	stw	ra,12(sp)
 8042cbc:	df000215 	stw	fp,8(sp)
 8042cc0:	df000204 	addi	fp,sp,8
 8042cc4:	e13ffe15 	stw	r4,-8(fp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 8042cc8:	008201b4 	movhi	r2,2054
 8042ccc:	10801d17 	ldw	r2,116(r2)
 8042cd0:	10c00044 	addi	r3,r2,1
 8042cd4:	008201b4 	movhi	r2,2054
 8042cd8:	10c01d15 	stw	r3,116(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
 8042cdc:	e0bffe17 	ldw	r2,-8(fp)
 8042ce0:	10800317 	ldw	r2,12(r2)
 8042ce4:	e0bfff15 	stw	r2,-4(fp)
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
 8042ce8:	e0bfff17 	ldw	r2,-4(fp)
 8042cec:	1080010b 	ldhu	r2,4(r2)
 8042cf0:	10bfffcc 	andi	r2,r2,65535
 8042cf4:	10000e1e 	bne	r2,zero,8042d30 <ip_raw_write+0x7c>
   {
      pip->ip_id = htons((unshort)uid);
 8042cf8:	d0a04e17 	ldw	r2,-32456(gp)
 8042cfc:	10bfffcc 	andi	r2,r2,65535
 8042d00:	1004d23a 	srli	r2,r2,8
 8042d04:	1007883a 	mov	r3,r2
 8042d08:	d0a04e17 	ldw	r2,-32456(gp)
 8042d0c:	10bfffcc 	andi	r2,r2,65535
 8042d10:	1004923a 	slli	r2,r2,8
 8042d14:	1884b03a 	or	r2,r3,r2
 8042d18:	1007883a 	mov	r3,r2
 8042d1c:	e0bfff17 	ldw	r2,-4(fp)
 8042d20:	10c0010d 	sth	r3,4(r2)
      uid++;
 8042d24:	d0a04e17 	ldw	r2,-32456(gp)
 8042d28:	10800044 	addi	r2,r2,1
 8042d2c:	d0a04e15 	stw	r2,-32456(gp)
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 8042d30:	e0bfff17 	ldw	r2,-4(fp)
 8042d34:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 8042d38:	01400284 	movi	r5,10
 8042d3c:	e13fff17 	ldw	r4,-4(fp)
 8042d40:	802b98c0 	call	802b98c <cksum>
 8042d44:	0084303a 	nor	r2,zero,r2
 8042d48:	1007883a 	mov	r3,r2
 8042d4c:	e0bfff17 	ldw	r2,-4(fp)
 8042d50:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 8042d54:	e13ffe17 	ldw	r4,-8(fp)
 8042d58:	80420240 	call	8042024 <ip_write_internal>
}
 8042d5c:	e037883a 	mov	sp,fp
 8042d60:	dfc00117 	ldw	ra,4(sp)
 8042d64:	df000017 	ldw	fp,0(sp)
 8042d68:	dec00204 	addi	sp,sp,8
 8042d6c:	f800283a 	ret

08042d70 <ip_fragment_lc>:
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 8042d70:	defff104 	addi	sp,sp,-60
 8042d74:	dfc00e15 	stw	ra,56(sp)
 8042d78:	df000d15 	stw	fp,52(sp)
 8042d7c:	df000d04 	addi	fp,sp,52
 8042d80:	e13ff415 	stw	r4,-48(fp)
 8042d84:	e17ff315 	stw	r5,-52(fp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 8042d88:	008201b4 	movhi	r2,2054
 8042d8c:	10802417 	ldw	r2,144(r2)
 8042d90:	10c00044 	addi	r3,r2,1
 8042d94:	008201b4 	movhi	r2,2054
 8042d98:	10c02415 	stw	r3,144(r2)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
 8042d9c:	e0bff417 	ldw	r2,-48(fp)
 8042da0:	10800317 	ldw	r2,12(r2)
 8042da4:	e0bffa15 	stw	r2,-24(fp)
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 8042da8:	e0bffa17 	ldw	r2,-24(fp)
 8042dac:	10800003 	ldbu	r2,0(r2)
 8042db0:	10803fcc 	andi	r2,r2,255
 8042db4:	100490ba 	slli	r2,r2,2
 8042db8:	10800f0c 	andi	r2,r2,60
 8042dbc:	e0bff915 	stw	r2,-28(fp)
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
 8042dc0:	e0bff417 	ldw	r2,-48(fp)
 8042dc4:	10800417 	ldw	r2,16(r2)
 8042dc8:	1007883a 	mov	r3,r2
 8042dcc:	e0bff917 	ldw	r2,-28(fp)
 8042dd0:	1885c83a 	sub	r2,r3,r2
 8042dd4:	e0bffd15 	stw	r2,-12(fp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 8042dd8:	e0bff417 	ldw	r2,-48(fp)
 8042ddc:	10800617 	ldw	r2,24(r2)
 8042de0:	10c00917 	ldw	r3,36(r2)
 8042de4:	e0bff417 	ldw	r2,-48(fp)
 8042de8:	10800617 	ldw	r2,24(r2)
 8042dec:	11000817 	ldw	r4,32(r2)
 8042df0:	e0bff917 	ldw	r2,-28(fp)
 8042df4:	2085883a 	add	r2,r4,r2
 8042df8:	10800204 	addi	r2,r2,8
 8042dfc:	1885c83a 	sub	r2,r3,r2
 8042e00:	e0bff815 	stw	r2,-32(fp)
   if (maxipsize < 64)  /* to small to use */
 8042e04:	e0bff817 	ldw	r2,-32(fp)
 8042e08:	10801028 	cmpgeui	r2,r2,64
 8042e0c:	1000031e 	bne	r2,zero,8042e1c <ip_fragment_lc+0xac>
   {
      dtrap();    /* probably bad programming */
 8042e10:	80301a80 	call	80301a8 <dtrap>
      return ENP_LOGIC;
 8042e14:	00bffd44 	movi	r2,-11
 8042e18:	0000d006 	br	804315c <ip_fragment_lc+0x3ec>
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
 8042e1c:	e0bff417 	ldw	r2,-48(fp)
 8042e20:	10800417 	ldw	r2,16(r2)
 8042e24:	e17ff817 	ldw	r5,-32(fp)
 8042e28:	1009883a 	mov	r4,r2
 8042e2c:	8011fdc0 	call	8011fdc <__udivsi3>
 8042e30:	10800044 	addi	r2,r2,1
 8042e34:	e0bff715 	stw	r2,-36(fp)
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
 8042e38:	e0bff417 	ldw	r2,-48(fp)
 8042e3c:	10c00417 	ldw	r3,16(r2)
 8042e40:	e0bff717 	ldw	r2,-36(fp)
 8042e44:	1885883a 	add	r2,r3,r2
 8042e48:	10bfffc4 	addi	r2,r2,-1
 8042e4c:	e17ff717 	ldw	r5,-36(fp)
 8042e50:	1009883a 	mov	r4,r2
 8042e54:	8011fdc0 	call	8011fdc <__udivsi3>
 8042e58:	10c001c4 	addi	r3,r2,7
 8042e5c:	00bffe04 	movi	r2,-8
 8042e60:	1884703a 	and	r2,r3,r2
 8042e64:	e0bff615 	stw	r2,-40(fp)
   foffset = 0;
 8042e68:	e03fff15 	stw	zero,-4(fp)

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
 8042e6c:	e0bffa17 	ldw	r2,-24(fp)
 8042e70:	1080018b 	ldhu	r2,6(r2)
 8042e74:	10bfffcc 	andi	r2,r2,65535
 8042e78:	1004d23a 	srli	r2,r2,8
 8042e7c:	1007883a 	mov	r3,r2
 8042e80:	e0bffa17 	ldw	r2,-24(fp)
 8042e84:	1080018b 	ldhu	r2,6(r2)
 8042e88:	10bfffcc 	andi	r2,r2,65535
 8042e8c:	1004923a 	slli	r2,r2,8
 8042e90:	1884b03a 	or	r2,r3,r2
 8042e94:	e0bff58d 	sth	r2,-42(fp)
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
 8042e98:	e0fff58b 	ldhu	r3,-42(fp)
 8042e9c:	00bffff4 	movhi	r2,65535
 8042ea0:	1087ffc4 	addi	r2,r2,8191
 8042ea4:	1884703a 	and	r2,r3,r2
 8042ea8:	10000826 	beq	r2,zero,8042ecc <ip_fragment_lc+0x15c>
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
 8042eac:	e0fff58b 	ldhu	r3,-42(fp)
 8042eb0:	00bffff4 	movhi	r2,65535
 8042eb4:	1087ffc4 	addi	r2,r2,8191
 8042eb8:	1884703a 	and	r2,r3,r2
 8042ebc:	e0bfff15 	stw	r2,-4(fp)
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
 8042ec0:	e0bfff17 	ldw	r2,-4(fp)
 8042ec4:	100490fa 	slli	r2,r2,3
 8042ec8:	e0bfff15 	stw	r2,-4(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
 8042ecc:	e0bff417 	ldw	r2,-48(fp)
 8042ed0:	e0bffc15 	stw	r2,-16(fp)
   e = 0;
 8042ed4:	e03ffb15 	stw	zero,-20(fp)
   while (left > 1)  /* more data left to send? */
 8042ed8:	00009c06 	br	804314c <ip_fragment_lc+0x3dc>
   {
      p = pkt2;  /* move next fragment up */
 8042edc:	e0bffc17 	ldw	r2,-16(fp)
 8042ee0:	e0bff415 	stw	r2,-48(fp)
      pip = (struct ip *)(p->nb_prot);
 8042ee4:	e0bff417 	ldw	r2,-48(fp)
 8042ee8:	10800317 	ldw	r2,12(r2)
 8042eec:	e0bffa15 	stw	r2,-24(fp)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 8042ef0:	e0fff617 	ldw	r3,-40(fp)
 8042ef4:	e0bffd17 	ldw	r2,-12(fp)
 8042ef8:	1880010e 	bge	r3,r2,8042f00 <ip_fragment_lc+0x190>
 8042efc:	1805883a 	mov	r2,r3
 8042f00:	e0fff917 	ldw	r3,-28(fp)
 8042f04:	10c5883a 	add	r2,r2,r3
 8042f08:	1007883a 	mov	r3,r2
 8042f0c:	e0bff417 	ldw	r2,-48(fp)
 8042f10:	10c00415 	stw	r3,16(r2)
      left -= fragsize; /* decrement count of bytes left to send */
 8042f14:	e0fffd17 	ldw	r3,-12(fp)
 8042f18:	e0bff617 	ldw	r2,-40(fp)
 8042f1c:	1885c83a 	sub	r2,r3,r2
 8042f20:	e0bffd15 	stw	r2,-12(fp)

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
 8042f24:	e0bff417 	ldw	r2,-48(fp)
 8042f28:	10800417 	ldw	r2,16(r2)
 8042f2c:	10bfffcc 	andi	r2,r2,65535
 8042f30:	1004d23a 	srli	r2,r2,8
 8042f34:	1007883a 	mov	r3,r2
 8042f38:	e0bff417 	ldw	r2,-48(fp)
 8042f3c:	10800417 	ldw	r2,16(r2)
 8042f40:	10bfffcc 	andi	r2,r2,65535
 8042f44:	1004923a 	slli	r2,r2,8
 8042f48:	1884b03a 	or	r2,r3,r2
 8042f4c:	1007883a 	mov	r3,r2
 8042f50:	e0bffa17 	ldw	r2,-24(fp)
 8042f54:	10c0008d 	sth	r3,2(r2)

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
 8042f58:	e0bfff17 	ldw	r2,-4(fp)
 8042f5c:	1004d0fa 	srli	r2,r2,3
 8042f60:	e0bffe8d 	sth	r2,-6(fp)
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 8042f64:	e0bffd17 	ldw	r2,-12(fp)
 8042f68:	10800090 	cmplti	r2,r2,2
 8042f6c:	1000021e 	bne	r2,zero,8042f78 <ip_fragment_lc+0x208>
 8042f70:	00880004 	movi	r2,8192
 8042f74:	00000106 	br	8042f7c <ip_fragment_lc+0x20c>
 8042f78:	0005883a 	mov	r2,zero
 8042f7c:	e0fffe8b 	ldhu	r3,-6(fp)
 8042f80:	10c4b03a 	or	r2,r2,r3
 8042f84:	e0bffe8d 	sth	r2,-6(fp)

      if ( tmp_fraginfo & IP_FLG_MF )             
 8042f88:	e0bff58b 	ldhu	r2,-42(fp)
 8042f8c:	1088000c 	andi	r2,r2,8192
 8042f90:	10000326 	beq	r2,zero,8042fa0 <ip_fragment_lc+0x230>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
 8042f94:	e0bffe8b 	ldhu	r2,-6(fp)
 8042f98:	10880014 	ori	r2,r2,8192
 8042f9c:	e0bffe8d 	sth	r2,-6(fp)
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
 8042fa0:	e0bffe8b 	ldhu	r2,-6(fp)
 8042fa4:	1004d23a 	srli	r2,r2,8
 8042fa8:	1007883a 	mov	r3,r2
 8042fac:	e0bffe8b 	ldhu	r2,-6(fp)
 8042fb0:	1004923a 	slli	r2,r2,8
 8042fb4:	1884b03a 	or	r2,r3,r2
 8042fb8:	1007883a 	mov	r3,r2
 8042fbc:	e0bffa17 	ldw	r2,-24(fp)
 8042fc0:	10c0018d 	sth	r3,6(r2)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
 8042fc4:	e0bffd17 	ldw	r2,-12(fp)
 8042fc8:	10800090 	cmplti	r2,r2,2
 8042fcc:	10003c1e 	bne	r2,zero,80430c0 <ip_fragment_lc+0x350>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8042fd0:	01000084 	movi	r4,2
 8042fd4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
 8042fd8:	e0fffd17 	ldw	r3,-12(fp)
 8042fdc:	e0bff917 	ldw	r2,-28(fp)
 8042fe0:	1887883a 	add	r3,r3,r2
 8042fe4:	d0a07c17 	ldw	r2,-32272(gp)
 8042fe8:	1885883a 	add	r2,r3,r2
 8042fec:	1009883a 	mov	r4,r2
 8042ff0:	802f6300 	call	802f630 <pk_alloc>
 8042ff4:	e0bffc15 	stw	r2,-16(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042ff8:	01000084 	movi	r4,2
 8042ffc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         if (!pkt2)
 8043000:	e0bffc17 	ldw	r2,-16(fp)
 8043004:	10000e1e 	bne	r2,zero,8043040 <ip_fragment_lc+0x2d0>
         {
            dtrap();
 8043008:	80301a80 	call	80301a8 <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 804300c:	01000084 	movi	r4,2
 8043010:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 8043014:	e13ff417 	ldw	r4,-48(fp)
 8043018:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804301c:	01000084 	movi	r4,2
 8043020:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 8043024:	008201b4 	movhi	r2,2054
 8043028:	10802517 	ldw	r2,148(r2)
 804302c:	10c00044 	addi	r3,r2,1
 8043030:	008201b4 	movhi	r2,2054
 8043034:	10c02515 	stw	r3,148(r2)
            return ENP_RESOURCE;
 8043038:	00bffa84 	movi	r2,-22
 804303c:	00004706 	br	804315c <ip_fragment_lc+0x3ec>
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
 8043040:	e0bff417 	ldw	r2,-48(fp)
 8043044:	10c00617 	ldw	r3,24(r2)
 8043048:	e0bffc17 	ldw	r2,-16(fp)
 804304c:	10c00615 	stw	r3,24(r2)
         pkt2->fhost = p->fhost;
 8043050:	e0bff417 	ldw	r2,-48(fp)
 8043054:	10c00717 	ldw	r3,28(r2)
 8043058:	e0bffc17 	ldw	r2,-16(fp)
 804305c:	10c00715 	stw	r3,28(r2)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
 8043060:	e0bffc17 	ldw	r2,-16(fp)
 8043064:	10c00317 	ldw	r3,12(r2)
 8043068:	e0bff417 	ldw	r2,-48(fp)
 804306c:	10800317 	ldw	r2,12(r2)
 8043070:	e13ff917 	ldw	r4,-28(fp)
 8043074:	200d883a 	mov	r6,r4
 8043078:	100b883a 	mov	r5,r2
 804307c:	1809883a 	mov	r4,r3
 8043080:	80037cc0 	call	80037cc <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
 8043084:	e0bffc17 	ldw	r2,-16(fp)
 8043088:	10c00317 	ldw	r3,12(r2)
 804308c:	e0bff917 	ldw	r2,-28(fp)
 8043090:	188f883a 	add	r7,r3,r2
 8043094:	e0bff417 	ldw	r2,-48(fp)
 8043098:	10c00317 	ldw	r3,12(r2)
 804309c:	e13ff917 	ldw	r4,-28(fp)
 80430a0:	e0bff617 	ldw	r2,-40(fp)
 80430a4:	2085883a 	add	r2,r4,r2
 80430a8:	1885883a 	add	r2,r3,r2
 80430ac:	e0fffd17 	ldw	r3,-12(fp)
 80430b0:	180d883a 	mov	r6,r3
 80430b4:	100b883a 	mov	r5,r2
 80430b8:	3809883a 	mov	r4,r7
 80430bc:	80037cc0 	call	80037cc <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
 80430c0:	e0bffa17 	ldw	r2,-24(fp)
 80430c4:	1000028d 	sth	zero,10(r2)
      pip->ip_chksum = ~cksum(pip, 10);
 80430c8:	01400284 	movi	r5,10
 80430cc:	e13ffa17 	ldw	r4,-24(fp)
 80430d0:	802b98c0 	call	802b98c <cksum>
 80430d4:	0084303a 	nor	r2,zero,r2
 80430d8:	1007883a 	mov	r3,r2
 80430dc:	e0bffa17 	ldw	r2,-24(fp)
 80430e0:	10c0028d 	sth	r3,10(r2)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 80430e4:	e17ff317 	ldw	r5,-52(fp)
 80430e8:	e13ff417 	ldw	r4,-48(fp)
 80430ec:	80299b80 	call	80299b8 <ip2mac>
 80430f0:	e0bffb15 	stw	r2,-20(fp)
      ip_mib.ipFragCreates++;
 80430f4:	008201b4 	movhi	r2,2054
 80430f8:	10802617 	ldw	r2,152(r2)
 80430fc:	10c00044 	addi	r3,r2,1
 8043100:	008201b4 	movhi	r2,2054
 8043104:	10c02615 	stw	r3,152(r2)
      if (e < 0)
 8043108:	e0bffb17 	ldw	r2,-20(fp)
 804310c:	10000b0e 	bge	r2,zero,804313c <ip_fragment_lc+0x3cc>
      {
         if (left > 1) 
 8043110:	e0bffd17 	ldw	r2,-12(fp)
 8043114:	10800090 	cmplti	r2,r2,2
 8043118:	1000061e 	bne	r2,zero,8043134 <ip_fragment_lc+0x3c4>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 804311c:	01000084 	movi	r4,2
 8043120:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
 8043124:	e13ffc17 	ldw	r4,-16(fp)
 8043128:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804312c:	01000084 	movi	r4,2
 8043130:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         }
         return e;
 8043134:	e0bffb17 	ldw	r2,-20(fp)
 8043138:	00000806 	br	804315c <ip_fragment_lc+0x3ec>
      }
      foffset += fragsize;    /* offset for next fragment */
 804313c:	e0ffff17 	ldw	r3,-4(fp)
 8043140:	e0bff617 	ldw	r2,-40(fp)
 8043144:	1885883a 	add	r2,r3,r2
 8043148:	e0bfff15 	stw	r2,-4(fp)
   while (left > 1)  /* more data left to send? */
 804314c:	e0bffd17 	ldw	r2,-12(fp)
 8043150:	10800088 	cmpgei	r2,r2,2
 8043154:	103f611e 	bne	r2,zero,8042edc <ip_fragment_lc+0x16c>
   }
   return e;
 8043158:	e0bffb17 	ldw	r2,-20(fp)
}
 804315c:	e037883a 	mov	sp,fp
 8043160:	dfc00117 	ldw	ra,4(sp)
 8043164:	df000017 	ldw	fp,0(sp)
 8043168:	dec00204 	addi	sp,sp,8
 804316c:	f800283a 	ret

08043170 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 8043170:	defff004 	addi	sp,sp,-64
 8043174:	dfc00f15 	stw	ra,60(sp)
 8043178:	df000e15 	stw	fp,56(sp)
 804317c:	df000e04 	addi	fp,sp,56
 8043180:	e13ff415 	stw	r4,-48(fp)
 8043184:	e17ff315 	stw	r5,-52(fp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
 8043188:	e0bff417 	ldw	r2,-48(fp)
 804318c:	10800317 	ldw	r2,12(r2)
 8043190:	e0bffd15 	stw	r2,-12(fp)
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 8043194:	e0bffd17 	ldw	r2,-12(fp)
 8043198:	1080018b 	ldhu	r2,6(r2)
 804319c:	10bfffcc 	andi	r2,r2,65535
 80431a0:	1004d23a 	srli	r2,r2,8
 80431a4:	10bfffcc 	andi	r2,r2,65535
 80431a8:	10c03fcc 	andi	r3,r2,255
 80431ac:	e0bffd17 	ldw	r2,-12(fp)
 80431b0:	1080018b 	ldhu	r2,6(r2)
 80431b4:	10bfffcc 	andi	r2,r2,65535
 80431b8:	1004923a 	slli	r2,r2,8
 80431bc:	10bfffcc 	andi	r2,r2,65535
 80431c0:	1884b03a 	or	r2,r3,r2
 80431c4:	1090000c 	andi	r2,r2,16384
 80431c8:	10001a26 	beq	r2,zero,8043234 <ip_fragment+0xc4>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80431cc:	01000084 	movi	r4,2
 80431d0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 80431d4:	e13ff417 	ldw	r4,-48(fp)
 80431d8:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80431dc:	01000084 	movi	r4,2
 80431e0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
 80431e4:	008201b4 	movhi	r2,2054
 80431e8:	10802517 	ldw	r2,148(r2)
 80431ec:	10c00044 	addi	r3,r2,1
 80431f0:	008201b4 	movhi	r2,2054
 80431f4:	10c02515 	stw	r3,148(r2)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 80431f8:	e0bffd17 	ldw	r2,-12(fp)
 80431fc:	10c00317 	ldw	r3,12(r2)
 8043200:	e0bff417 	ldw	r2,-48(fp)
 8043204:	10800617 	ldw	r2,24(r2)
 8043208:	11000a17 	ldw	r4,40(r2)
 804320c:	e0bff417 	ldw	r2,-48(fp)
 8043210:	10800617 	ldw	r2,24(r2)
 8043214:	d8800015 	stw	r2,0(sp)
 8043218:	01c00104 	movi	r7,4
 804321c:	e1bffd17 	ldw	r6,-12(fp)
 8043220:	200b883a 	mov	r5,r4
 8043224:	1809883a 	mov	r4,r3
 8043228:	804d8640 	call	804d864 <icmp_destun>
#endif   /* FULL_ICMP */
      return 0;
 804322c:	0005883a 	mov	r2,zero
 8043230:	00013106 	br	80436f8 <ip_fragment+0x588>
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
 8043234:	802f9f00 	call	802f9f0 <pk_get_max_intrsafe_buf_len>
 8043238:	e0bffc15 	stw	r2,-16(fp)

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
 804323c:	e0bff417 	ldw	r2,-48(fp)
 8043240:	10800617 	ldw	r2,24(r2)
 8043244:	10800917 	ldw	r2,36(r2)
 8043248:	1007883a 	mov	r3,r2
 804324c:	e0bffc17 	ldw	r2,-16(fp)
 8043250:	10c0022e 	bgeu	r2,r3,804325c <ip_fragment+0xec>
 8043254:	e0bffc17 	ldw	r2,-16(fp)
 8043258:	00000306 	br	8043268 <ip_fragment+0xf8>
 804325c:	e0bff417 	ldw	r2,-48(fp)
 8043260:	10800617 	ldw	r2,24(r2)
 8043264:	10800917 	ldw	r2,36(r2)
 8043268:	e0bffb8d 	sth	r2,-18(fp)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
 804326c:	e0bffd17 	ldw	r2,-12(fp)
 8043270:	10800003 	ldbu	r2,0(r2)
 8043274:	10803fcc 	andi	r2,r2,255
 8043278:	100490ba 	slli	r2,r2,2
 804327c:	10800f0c 	andi	r2,r2,60
 8043280:	e0bffb45 	stb	r2,-19(fp)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
 8043284:	e0bff417 	ldw	r2,-48(fp)
 8043288:	10800617 	ldw	r2,24(r2)
 804328c:	10800817 	ldw	r2,32(r2)
 8043290:	e0bffb05 	stb	r2,-20(fp)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 8043294:	e0bffb43 	ldbu	r2,-19(fp)
 8043298:	e0fffb8b 	ldhu	r3,-18(fp)
 804329c:	1885c83a 	sub	r2,r3,r2
 80432a0:	1007883a 	mov	r3,r2
 80432a4:	e0bffb03 	ldbu	r2,-20(fp)
 80432a8:	1885c83a 	sub	r2,r3,r2
 80432ac:	e0bffa8d 	sth	r2,-22(fp)

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 80432b0:	e0fffa8b 	ldhu	r3,-22(fp)
 80432b4:	00bffe04 	movi	r2,-8
 80432b8:	1884703a 	and	r2,r3,r2
 80432bc:	e0bffa8d 	sth	r2,-22(fp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 80432c0:	e0bffd17 	ldw	r2,-12(fp)
 80432c4:	1080008b 	ldhu	r2,2(r2)
 80432c8:	10bfffcc 	andi	r2,r2,65535
 80432cc:	1004d23a 	srli	r2,r2,8
 80432d0:	1007883a 	mov	r3,r2
 80432d4:	e0bffd17 	ldw	r2,-12(fp)
 80432d8:	1080008b 	ldhu	r2,2(r2)
 80432dc:	10bfffcc 	andi	r2,r2,65535
 80432e0:	1004923a 	slli	r2,r2,8
 80432e4:	1884b03a 	or	r2,r3,r2
 80432e8:	1007883a 	mov	r3,r2
 80432ec:	e0bffb43 	ldbu	r2,-19(fp)
 80432f0:	1885c83a 	sub	r2,r3,r2
 80432f4:	e0bffa0d 	sth	r2,-24(fp)
   num_frags = (total_payload_len / useable_payload_len);
 80432f8:	e0bffa0b 	ldhu	r2,-24(fp)
 80432fc:	e0fffa8b 	ldhu	r3,-22(fp)
 8043300:	180b883a 	mov	r5,r3
 8043304:	1009883a 	mov	r4,r2
 8043308:	8011fdc0 	call	8011fdc <__udivsi3>
 804330c:	e0bfff8d 	sth	r2,-2(fp)
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
 8043310:	e0bffa0b 	ldhu	r2,-24(fp)
 8043314:	e0fffa8b 	ldhu	r3,-22(fp)
 8043318:	180b883a 	mov	r5,r3
 804331c:	1009883a 	mov	r4,r2
 8043320:	80120400 	call	8012040 <__umodsi3>
 8043324:	e0bff98d 	sth	r2,-26(fp)
 8043328:	e0bff98b 	ldhu	r2,-26(fp)
 804332c:	10000326 	beq	r2,zero,804333c <ip_fragment+0x1cc>
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
 8043330:	e0bfff8b 	ldhu	r2,-2(fp)
 8043334:	10800044 	addi	r2,r2,1
 8043338:	e0bfff8d 	sth	r2,-2(fp)
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
 804333c:	e0bfff8b 	ldhu	r2,-2(fp)
 8043340:	10800128 	cmpgeui	r2,r2,4
 8043344:	1000081e 	bne	r2,zero,8043368 <ip_fragment+0x1f8>
 8043348:	e0bff417 	ldw	r2,-48(fp)
 804334c:	10800a17 	ldw	r2,40(r2)
 8043350:	1080040c 	andi	r2,r2,16
 8043354:	1000041e 	bne	r2,zero,8043368 <ip_fragment+0x1f8>
   {
      return (ip_fragment_lc (p, firsthop));
 8043358:	e17ff317 	ldw	r5,-52(fp)
 804335c:	e13ff417 	ldw	r4,-48(fp)
 8043360:	8042d700 	call	8042d70 <ip_fragment_lc>
 8043364:	0000e406 	br	80436f8 <ip_fragment+0x588>
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 8043368:	e0bffd17 	ldw	r2,-12(fp)
 804336c:	1080018b 	ldhu	r2,6(r2)
 8043370:	10bfffcc 	andi	r2,r2,65535
 8043374:	1004d23a 	srli	r2,r2,8
 8043378:	10bfffcc 	andi	r2,r2,65535
 804337c:	10c03fcc 	andi	r3,r2,255
 8043380:	e0bffd17 	ldw	r2,-12(fp)
 8043384:	1080018b 	ldhu	r2,6(r2)
 8043388:	10bfffcc 	andi	r2,r2,65535
 804338c:	1004923a 	slli	r2,r2,8
 8043390:	10bfffcc 	andi	r2,r2,65535
 8043394:	1884b03a 	or	r2,r3,r2
 8043398:	100490fa 	slli	r2,r2,3
 804339c:	e0bff90d 	sth	r2,-28(fp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
 80433a0:	e0bffd17 	ldw	r2,-12(fp)
 80433a4:	1080018b 	ldhu	r2,6(r2)
 80433a8:	10bfffcc 	andi	r2,r2,65535
 80433ac:	1004d23a 	srli	r2,r2,8
 80433b0:	1007883a 	mov	r3,r2
 80433b4:	e0bffd17 	ldw	r2,-12(fp)
 80433b8:	1080018b 	ldhu	r2,6(r2)
 80433bc:	10bfffcc 	andi	r2,r2,65535
 80433c0:	1004923a 	slli	r2,r2,8
 80433c4:	1884b03a 	or	r2,r3,r2
 80433c8:	1088000c 	andi	r2,r2,8192
 80433cc:	e0bff88d 	sth	r2,-30(fp)
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 80433d0:	e03fff0d 	sth	zero,-4(fp)
 80433d4:	0000b906 	br	80436bc <ip_fragment+0x54c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80433d8:	01000084 	movi	r4,2
 80433dc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
 80433e0:	e0fffa8b 	ldhu	r3,-22(fp)
 80433e4:	e0bffb43 	ldbu	r2,-19(fp)
 80433e8:	1887883a 	add	r3,r3,r2
 80433ec:	e0bffb03 	ldbu	r2,-20(fp)
 80433f0:	1885883a 	add	r2,r3,r2
 80433f4:	1009883a 	mov	r4,r2
 80433f8:	802f6300 	call	802f630 <pk_alloc>
 80433fc:	e0bff715 	stw	r2,-36(fp)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8043400:	01000084 	movi	r4,2
 8043404:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
 8043408:	e0bff717 	ldw	r2,-36(fp)
 804340c:	10000d1e 	bne	r2,zero,8043444 <ip_fragment+0x2d4>
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8043410:	01000084 	movi	r4,2
 8043414:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 8043418:	e13ff417 	ldw	r4,-48(fp)
 804341c:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8043420:	01000084 	movi	r4,2
 8043424:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
 8043428:	008201b4 	movhi	r2,2054
 804342c:	10802517 	ldw	r2,148(r2)
 8043430:	10c00044 	addi	r3,r2,1
 8043434:	008201b4 	movhi	r2,2054
 8043438:	10c02515 	stw	r3,148(r2)
         return ENP_NOBUFFER;
 804343c:	00bffac4 	movi	r2,-21
 8043440:	0000ad06 	br	80436f8 <ip_fragment+0x588>
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
 8043444:	e0bff717 	ldw	r2,-36(fp)
 8043448:	10c00117 	ldw	r3,4(r2)
 804344c:	e0bffb03 	ldbu	r2,-20(fp)
 8043450:	1887883a 	add	r3,r3,r2
 8043454:	e0bff417 	ldw	r2,-48(fp)
 8043458:	10800317 	ldw	r2,12(r2)
 804345c:	e13ffb43 	ldbu	r4,-19(fp)
 8043460:	200d883a 	mov	r6,r4
 8043464:	100b883a 	mov	r5,r2
 8043468:	1809883a 	mov	r4,r3
 804346c:	80037cc0 	call	80037cc <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
 8043470:	e0ffff0b 	ldhu	r3,-4(fp)
 8043474:	e0bfff8b 	ldhu	r2,-2(fp)
 8043478:	10bfffc4 	addi	r2,r2,-1
 804347c:	1880030e 	bge	r3,r2,804348c <ip_fragment+0x31c>
         {
            amt_to_copy = useable_payload_len;
 8043480:	e0bffa8b 	ldhu	r2,-22(fp)
 8043484:	e0bffe8d 	sth	r2,-6(fp)
 8043488:	00000606 	br	80434a4 <ip_fragment+0x334>
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
 804348c:	e0bff98b 	ldhu	r2,-26(fp)
 8043490:	1000021e 	bne	r2,zero,804349c <ip_fragment+0x32c>
 8043494:	e0bffa8b 	ldhu	r2,-22(fp)
 8043498:	00000106 	br	80434a0 <ip_fragment+0x330>
 804349c:	e0bff98b 	ldhu	r2,-26(fp)
 80434a0:	e0bffe8d 	sth	r2,-6(fp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
 80434a4:	e0bff717 	ldw	r2,-36(fp)
 80434a8:	10c00117 	ldw	r3,4(r2)
 80434ac:	e13ffb03 	ldbu	r4,-20(fp)
 80434b0:	e0bffb43 	ldbu	r2,-19(fp)
 80434b4:	2085883a 	add	r2,r4,r2
 80434b8:	188f883a 	add	r7,r3,r2
 80434bc:	e0bff417 	ldw	r2,-48(fp)
 80434c0:	10c00317 	ldw	r3,12(r2)
 80434c4:	e0bffb43 	ldbu	r2,-19(fp)
 80434c8:	e17ffa8b 	ldhu	r5,-22(fp)
 80434cc:	e13fff0b 	ldhu	r4,-4(fp)
 80434d0:	2909383a 	mul	r4,r5,r4
 80434d4:	1105883a 	add	r2,r2,r4
 80434d8:	1885883a 	add	r2,r3,r2
 80434dc:	e0fffe8b 	ldhu	r3,-6(fp)
 80434e0:	180d883a 	mov	r6,r3
 80434e4:	100b883a 	mov	r5,r2
 80434e8:	3809883a 	mov	r4,r7
 80434ec:	80037cc0 	call	80037cc <memcpy>

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 80434f0:	e0bff717 	ldw	r2,-36(fp)
 80434f4:	10c00117 	ldw	r3,4(r2)
 80434f8:	e0bffb03 	ldbu	r2,-20(fp)
 80434fc:	1887883a 	add	r3,r3,r2
 8043500:	e0bff717 	ldw	r2,-36(fp)
 8043504:	10c00315 	stw	r3,12(r2)
         newpkt->nb_plen = iphlen + amt_to_copy;
 8043508:	e0fffb43 	ldbu	r3,-19(fp)
 804350c:	e0bffe8b 	ldhu	r2,-6(fp)
 8043510:	1885883a 	add	r2,r3,r2
 8043514:	1007883a 	mov	r3,r2
 8043518:	e0bff717 	ldw	r2,-36(fp)
 804351c:	10c00415 	stw	r3,16(r2)
         newpkt->net = p->net;
 8043520:	e0bff417 	ldw	r2,-48(fp)
 8043524:	10c00617 	ldw	r3,24(r2)
 8043528:	e0bff717 	ldw	r2,-36(fp)
 804352c:	10c00615 	stw	r3,24(r2)
         newpkt->fhost = p->fhost;
 8043530:	e0bff417 	ldw	r2,-48(fp)
 8043534:	10c00717 	ldw	r3,28(r2)
 8043538:	e0bff717 	ldw	r2,-36(fp)
 804353c:	10c00715 	stw	r3,28(r2)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
 8043540:	e0bff717 	ldw	r2,-36(fp)
 8043544:	00c20004 	movi	r3,2048
 8043548:	10c0080d 	sth	r3,32(r2)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
 804354c:	e0bff717 	ldw	r2,-36(fp)
 8043550:	10800317 	ldw	r2,12(r2)
 8043554:	e0bff615 	stw	r2,-40(fp)
         newpip->ip_len = htons(newpkt->nb_plen);
 8043558:	e0bff717 	ldw	r2,-36(fp)
 804355c:	10800417 	ldw	r2,16(r2)
 8043560:	1004d23a 	srli	r2,r2,8
 8043564:	10803fcc 	andi	r2,r2,255
 8043568:	1007883a 	mov	r3,r2
 804356c:	e0bff717 	ldw	r2,-36(fp)
 8043570:	10800417 	ldw	r2,16(r2)
 8043574:	1004923a 	slli	r2,r2,8
 8043578:	1884b03a 	or	r2,r3,r2
 804357c:	1007883a 	mov	r3,r2
 8043580:	e0bff617 	ldw	r2,-40(fp)
 8043584:	10c0008d 	sth	r3,2(r2)
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 8043588:	e0fff90b 	ldhu	r3,-28(fp)
 804358c:	e13ffa8b 	ldhu	r4,-22(fp)
 8043590:	e0bfff0b 	ldhu	r2,-4(fp)
 8043594:	2085383a 	mul	r2,r4,r2
 8043598:	1885883a 	add	r2,r3,r2
 804359c:	1005d2fa 	srai	r2,r2,11
 80435a0:	10803fcc 	andi	r2,r2,255
 80435a4:	100b883a 	mov	r5,r2
 80435a8:	e0fff90b 	ldhu	r3,-28(fp)
 80435ac:	e13ffa8b 	ldhu	r4,-22(fp)
 80435b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80435b4:	2085383a 	mul	r2,r4,r2
 80435b8:	1885883a 	add	r2,r3,r2
 80435bc:	1005d0fa 	srai	r2,r2,3
 80435c0:	1004923a 	slli	r2,r2,8
 80435c4:	2884b03a 	or	r2,r5,r2
 80435c8:	1007883a 	mov	r3,r2
 80435cc:	e0bff617 	ldw	r2,-40(fp)
 80435d0:	10c0018d 	sth	r3,6(r2)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
 80435d4:	e0ffff0b 	ldhu	r3,-4(fp)
 80435d8:	e0bfff8b 	ldhu	r2,-2(fp)
 80435dc:	10bfffc4 	addi	r2,r2,-1
 80435e0:	1880070e 	bge	r3,r2,8043600 <ip_fragment+0x490>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 80435e4:	e0bff617 	ldw	r2,-40(fp)
 80435e8:	1080018b 	ldhu	r2,6(r2)
 80435ec:	10800814 	ori	r2,r2,32
 80435f0:	1007883a 	mov	r3,r2
 80435f4:	e0bff617 	ldw	r2,-40(fp)
 80435f8:	10c0018d 	sth	r3,6(r2)
 80435fc:	00000806 	br	8043620 <ip_fragment+0x4b0>
         }
         else
         {
            if (parent_mf)
 8043600:	e0bff88b 	ldhu	r2,-30(fp)
 8043604:	10000626 	beq	r2,zero,8043620 <ip_fragment+0x4b0>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 8043608:	e0bff617 	ldw	r2,-40(fp)
 804360c:	1080018b 	ldhu	r2,6(r2)
 8043610:	10800814 	ori	r2,r2,32
 8043614:	1007883a 	mov	r3,r2
 8043618:	e0bff617 	ldw	r2,-40(fp)
 804361c:	10c0018d 	sth	r3,6(r2)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
 8043620:	e0bff617 	ldw	r2,-40(fp)
 8043624:	1000028d 	sth	zero,10(r2)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 8043628:	e0bffb43 	ldbu	r2,-19(fp)
 804362c:	1004d07a 	srli	r2,r2,1
 8043630:	10803fcc 	andi	r2,r2,255
 8043634:	100b883a 	mov	r5,r2
 8043638:	e13ff617 	ldw	r4,-40(fp)
 804363c:	802b98c0 	call	802b98c <cksum>
 8043640:	0084303a 	nor	r2,zero,r2
 8043644:	1007883a 	mov	r3,r2
 8043648:	e0bff617 	ldw	r2,-40(fp)
 804364c:	10c0028d 	sth	r3,10(r2)

         ip_mib.ipFragCreates++;
 8043650:	008201b4 	movhi	r2,2054
 8043654:	10802617 	ldw	r2,152(r2)
 8043658:	10c00044 	addi	r3,r2,1
 804365c:	008201b4 	movhi	r2,2054
 8043660:	10c02615 	stw	r3,152(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 8043664:	e17ff317 	ldw	r5,-52(fp)
 8043668:	e13ff717 	ldw	r4,-36(fp)
 804366c:	80299b80 	call	80299b8 <ip2mac>
 8043670:	e0bff515 	stw	r2,-44(fp)
         if (e < 0)
 8043674:	e0bff517 	ldw	r2,-44(fp)
 8043678:	10000d0e 	bge	r2,zero,80436b0 <ip_fragment+0x540>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 804367c:	01000084 	movi	r4,2
 8043680:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 8043684:	e13ff417 	ldw	r4,-48(fp)
 8043688:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804368c:	01000084 	movi	r4,2
 8043690:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 8043694:	008201b4 	movhi	r2,2054
 8043698:	10802517 	ldw	r2,148(r2)
 804369c:	10c00044 	addi	r3,r2,1
 80436a0:	008201b4 	movhi	r2,2054
 80436a4:	10c02515 	stw	r3,148(r2)
            return e;
 80436a8:	e0bff517 	ldw	r2,-44(fp)
 80436ac:	00001206 	br	80436f8 <ip_fragment+0x588>
   for (i = 0; i < num_frags; ++i)
 80436b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80436b4:	10800044 	addi	r2,r2,1
 80436b8:	e0bfff0d 	sth	r2,-4(fp)
 80436bc:	e0ffff0b 	ldhu	r3,-4(fp)
 80436c0:	e0bfff8b 	ldhu	r2,-2(fp)
 80436c4:	18bf4436 	bltu	r3,r2,80433d8 <ip_fragment+0x268>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80436c8:	01000084 	movi	r4,2
 80436cc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 80436d0:	e13ff417 	ldw	r4,-48(fp)
 80436d4:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80436d8:	01000084 	movi	r4,2
 80436dc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 80436e0:	008201b4 	movhi	r2,2054
 80436e4:	10802417 	ldw	r2,144(r2)
 80436e8:	10c00044 	addi	r3,r2,1
 80436ec:	008201b4 	movhi	r2,2054
 80436f0:	10c02415 	stw	r3,144(r2)

   return 0;
 80436f4:	0005883a 	mov	r2,zero
}
 80436f8:	e037883a 	mov	sp,fp
 80436fc:	dfc00117 	ldw	ra,4(sp)
 8043700:	df000017 	ldw	fp,0(sp)
 8043704:	dec00204 	addi	sp,sp,8
 8043708:	f800283a 	ret

0804370c <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
 804370c:	defffa04 	addi	sp,sp,-24
 8043710:	dfc00515 	stw	ra,20(sp)
 8043714:	df000415 	stw	fp,16(sp)
 8043718:	df000404 	addi	fp,sp,16
 804371c:	e13ffd15 	stw	r4,-12(fp)

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
 8043720:	e0bffe04 	addi	r2,fp,-8
 8043724:	100b883a 	mov	r5,r2
 8043728:	e13ffd17 	ldw	r4,-12(fp)
 804372c:	8043a540 	call	8043a54 <iproute>
 8043730:	e0bfff15 	stw	r2,-4(fp)
   if (tnet == 0)
 8043734:	e0bfff17 	ldw	r2,-4(fp)
 8043738:	1000161e 	bne	r2,zero,8043794 <ip_mymach+0x88>
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 804373c:	d0a07e17 	ldw	r2,-32264(gp)
 8043740:	1080050c 	andi	r2,r2,20
 8043744:	10001126 	beq	r2,zero,804378c <ip_mymach+0x80>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 8043748:	e0bffd17 	ldw	r2,-12(fp)
 804374c:	10c03fcc 	andi	r3,r2,255
 8043750:	e0bffd17 	ldw	r2,-12(fp)
 8043754:	1004d23a 	srli	r2,r2,8
 8043758:	11003fcc 	andi	r4,r2,255
 804375c:	e0bffd17 	ldw	r2,-12(fp)
 8043760:	1004d43a 	srli	r2,r2,16
 8043764:	11403fcc 	andi	r5,r2,255
 8043768:	e0bffd17 	ldw	r2,-12(fp)
 804376c:	1004d63a 	srli	r2,r2,24
 8043770:	d8800015 	stw	r2,0(sp)
 8043774:	280f883a 	mov	r7,r5
 8043778:	200d883a 	mov	r6,r4
 804377c:	180b883a 	mov	r5,r3
 8043780:	01020174 	movhi	r4,2053
 8043784:	21102704 	addi	r4,r4,16540
 8043788:	8003b840 	call	8003b84 <printf>
#endif   /* NPDEBUG */
      return 0L;
 804378c:	0005883a 	mov	r2,zero
 8043790:	00000206 	br	804379c <ip_mymach+0x90>
   }
   return tnet->n_ipaddr;
 8043794:	e0bfff17 	ldw	r2,-4(fp)
 8043798:	10800a17 	ldw	r2,40(r2)
#endif /* MULTI_HOMED */
}
 804379c:	e037883a 	mov	sp,fp
 80437a0:	dfc00117 	ldw	ra,4(sp)
 80437a4:	df000017 	ldw	fp,0(sp)
 80437a8:	dec00204 	addi	sp,sp,8
 80437ac:	f800283a 	ret

080437b0 <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
 80437b0:	defff704 	addi	sp,sp,-36
 80437b4:	dfc00815 	stw	ra,32(sp)
 80437b8:	df000715 	stw	fp,28(sp)
 80437bc:	df000704 	addi	fp,sp,28
 80437c0:	e13ffc15 	stw	r4,-16(fp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
 80437c4:	e0bffc17 	ldw	r2,-16(fp)
 80437c8:	10800317 	ldw	r2,12(r2)
 80437cc:	e0bfff15 	stw	r2,-4(fp)
   osum = pip->ip_chksum;
 80437d0:	e0bfff17 	ldw	r2,-4(fp)
 80437d4:	1080028b 	ldhu	r2,10(r2)
 80437d8:	e0bffe8d 	sth	r2,-6(fp)
   pip->ip_chksum = 0;
 80437dc:	e0bfff17 	ldw	r2,-4(fp)
 80437e0:	1000028d 	sth	zero,10(r2)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 80437e4:	e0bfff17 	ldw	r2,-4(fp)
 80437e8:	10800003 	ldbu	r2,0(r2)
 80437ec:	10803fcc 	andi	r2,r2,255
 80437f0:	100490ba 	slli	r2,r2,2
 80437f4:	1005d07a 	srai	r2,r2,1
 80437f8:	1080078c 	andi	r2,r2,30
 80437fc:	100b883a 	mov	r5,r2
 8043800:	e13fff17 	ldw	r4,-4(fp)
 8043804:	802b98c0 	call	802b98c <cksum>
 8043808:	0084303a 	nor	r2,zero,r2
 804380c:	e0bffe0d 	sth	r2,-8(fp)

   if (osum != xsum)          /* trap here if checksum is wrong */
 8043810:	e0fffe8b 	ldhu	r3,-6(fp)
 8043814:	e0bffe0b 	ldhu	r2,-8(fp)
 8043818:	18800126 	beq	r3,r2,8043820 <ip_dump+0x70>
   {
      dtrap();
 804381c:	80301a80 	call	80301a8 <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
 8043820:	01420174 	movhi	r5,2053
 8043824:	29503004 	addi	r5,r5,16576
 8043828:	0009883a 	mov	r4,zero
 804382c:	802bfa40 	call	802bfa4 <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
 8043830:	e0bfff17 	ldw	r2,-4(fp)
 8043834:	e0bffd15 	stw	r2,-12(fp)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 8043838:	e0bffd17 	ldw	r2,-12(fp)
 804383c:	10800003 	ldbu	r2,0(r2)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 8043840:	11403fcc 	andi	r5,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 8043844:	e0bffd17 	ldw	r2,-12(fp)
 8043848:	10800044 	addi	r2,r2,1
 804384c:	10800003 	ldbu	r2,0(r2)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 8043850:	11803fcc 	andi	r6,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 8043854:	e0bfff17 	ldw	r2,-4(fp)
 8043858:	1080008b 	ldhu	r2,2(r2)
 804385c:	10bfffcc 	andi	r2,r2,65535
 8043860:	1004d23a 	srli	r2,r2,8
 8043864:	10bfffcc 	andi	r2,r2,65535
 8043868:	10c03fcc 	andi	r3,r2,255
 804386c:	e0bfff17 	ldw	r2,-4(fp)
 8043870:	1080008b 	ldhu	r2,2(r2)
 8043874:	10bfffcc 	andi	r2,r2,65535
 8043878:	1004923a 	slli	r2,r2,8
 804387c:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 8043880:	1884b03a 	or	r2,r3,r2
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 8043884:	e0ffff17 	ldw	r3,-4(fp)
 8043888:	18c0010b 	ldhu	r3,4(r3)
 804388c:	18ffffcc 	andi	r3,r3,65535
 8043890:	1806d23a 	srli	r3,r3,8
 8043894:	18ffffcc 	andi	r3,r3,65535
 8043898:	19003fcc 	andi	r4,r3,255
 804389c:	e0ffff17 	ldw	r3,-4(fp)
 80438a0:	18c0010b 	ldhu	r3,4(r3)
 80438a4:	18ffffcc 	andi	r3,r3,65535
 80438a8:	1806923a 	slli	r3,r3,8
 80438ac:	18ffffcc 	andi	r3,r3,65535
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 80438b0:	20c6b03a 	or	r3,r4,r3
 80438b4:	d8c00115 	stw	r3,4(sp)
 80438b8:	d8800015 	stw	r2,0(sp)
 80438bc:	300f883a 	mov	r7,r6
 80438c0:	280d883a 	mov	r6,r5
 80438c4:	01420174 	movhi	r5,2053
 80438c8:	29503504 	addi	r5,r5,16596
 80438cc:	0009883a 	mov	r4,zero
 80438d0:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 80438d4:	e0bffd17 	ldw	r2,-12(fp)
 80438d8:	10800184 	addi	r2,r2,6
 80438dc:	1080000b 	ldhu	r2,0(r2)
 80438e0:	10bfffcc 	andi	r2,r2,65535
 80438e4:	1004d23a 	srli	r2,r2,8
 80438e8:	10bfffcc 	andi	r2,r2,65535
 80438ec:	10c03fcc 	andi	r3,r2,255
 80438f0:	e0bffd17 	ldw	r2,-12(fp)
 80438f4:	10800184 	addi	r2,r2,6
 80438f8:	1080000b 	ldhu	r2,0(r2)
 80438fc:	10bfffcc 	andi	r2,r2,65535
 8043900:	1004923a 	slli	r2,r2,8
 8043904:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 8043908:	188cb03a 	or	r6,r3,r2
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 804390c:	e0bfff17 	ldw	r2,-4(fp)
 8043910:	10800203 	ldbu	r2,8(r2)
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 8043914:	11c03fcc 	andi	r7,r2,255
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 8043918:	e0bfff17 	ldw	r2,-4(fp)
 804391c:	10800243 	ldbu	r2,9(r2)
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 8043920:	10c03fcc 	andi	r3,r2,255
    htons(osum), (osum==xsum)?"ok":"bad");
 8043924:	e0bffe8b 	ldhu	r2,-6(fp)
 8043928:	1004d23a 	srli	r2,r2,8
 804392c:	10bfffcc 	andi	r2,r2,65535
 8043930:	11003fcc 	andi	r4,r2,255
 8043934:	e0bffe8b 	ldhu	r2,-6(fp)
 8043938:	1004923a 	slli	r2,r2,8
 804393c:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 8043940:	2088b03a 	or	r4,r4,r2
 8043944:	e17ffe8b 	ldhu	r5,-6(fp)
 8043948:	e0bffe0b 	ldhu	r2,-8(fp)
 804394c:	2880031e 	bne	r5,r2,804395c <ip_dump+0x1ac>
 8043950:	00820174 	movhi	r2,2053
 8043954:	10904104 	addi	r2,r2,16644
 8043958:	00000206 	br	8043964 <ip_dump+0x1b4>
 804395c:	00820174 	movhi	r2,2053
 8043960:	10904204 	addi	r2,r2,16648
 8043964:	d8800215 	stw	r2,8(sp)
 8043968:	d9000115 	stw	r4,4(sp)
 804396c:	d8c00015 	stw	r3,0(sp)
 8043970:	01420174 	movhi	r5,2053
 8043974:	29504304 	addi	r5,r5,16652
 8043978:	0009883a 	mov	r4,zero
 804397c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
 8043980:	e0bfff17 	ldw	r2,-4(fp)
 8043984:	10800317 	ldw	r2,12(r2)
 8043988:	11003fcc 	andi	r4,r2,255
 804398c:	e0bfff17 	ldw	r2,-4(fp)
 8043990:	10800317 	ldw	r2,12(r2)
 8043994:	1004d23a 	srli	r2,r2,8
 8043998:	11403fcc 	andi	r5,r2,255
 804399c:	e0bfff17 	ldw	r2,-4(fp)
 80439a0:	10800317 	ldw	r2,12(r2)
 80439a4:	1004d43a 	srli	r2,r2,16
 80439a8:	10803fcc 	andi	r2,r2,255
 80439ac:	e0ffff17 	ldw	r3,-4(fp)
 80439b0:	18c00317 	ldw	r3,12(r3)
 80439b4:	1806d63a 	srli	r3,r3,24
 80439b8:	d8c00115 	stw	r3,4(sp)
 80439bc:	d8800015 	stw	r2,0(sp)
 80439c0:	280f883a 	mov	r7,r5
 80439c4:	200d883a 	mov	r6,r4
 80439c8:	01420174 	movhi	r5,2053
 80439cc:	29505304 	addi	r5,r5,16716
 80439d0:	0009883a 	mov	r4,zero
 80439d4:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
 80439d8:	e0bfff17 	ldw	r2,-4(fp)
 80439dc:	10800417 	ldw	r2,16(r2)
 80439e0:	11003fcc 	andi	r4,r2,255
 80439e4:	e0bfff17 	ldw	r2,-4(fp)
 80439e8:	10800417 	ldw	r2,16(r2)
 80439ec:	1004d23a 	srli	r2,r2,8
 80439f0:	11403fcc 	andi	r5,r2,255
 80439f4:	e0bfff17 	ldw	r2,-4(fp)
 80439f8:	10800417 	ldw	r2,16(r2)
 80439fc:	1004d43a 	srli	r2,r2,16
 8043a00:	10803fcc 	andi	r2,r2,255
 8043a04:	e0ffff17 	ldw	r3,-4(fp)
 8043a08:	18c00417 	ldw	r3,16(r3)
 8043a0c:	1806d63a 	srli	r3,r3,24
 8043a10:	d8c00115 	stw	r3,4(sp)
 8043a14:	d8800015 	stw	r2,0(sp)
 8043a18:	280f883a 	mov	r7,r5
 8043a1c:	200d883a 	mov	r6,r4
 8043a20:	01420174 	movhi	r5,2053
 8043a24:	29505804 	addi	r5,r5,16736
 8043a28:	0009883a 	mov	r4,zero
 8043a2c:	802bfa40 	call	802bfa4 <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
 8043a30:	e0bfff17 	ldw	r2,-4(fp)
 8043a34:	e0fffe8b 	ldhu	r3,-6(fp)
 8043a38:	10c0028d 	sth	r3,10(r2)
}
 8043a3c:	0001883a 	nop
 8043a40:	e037883a 	mov	sp,fp
 8043a44:	dfc00117 	ldw	ra,4(sp)
 8043a48:	df000017 	ldw	fp,0(sp)
 8043a4c:	dec00204 	addi	sp,sp,8
 8043a50:	f800283a 	ret

08043a54 <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
 8043a54:	defff804 	addi	sp,sp,-32
 8043a58:	dfc00715 	stw	ra,28(sp)
 8043a5c:	df000615 	stw	fp,24(sp)
 8043a60:	df000604 	addi	fp,sp,24
 8043a64:	e13ffc15 	stw	r4,-16(fp)
 8043a68:	e17ffb15 	stw	r5,-20(fp)
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
 8043a6c:	e0bffc17 	ldw	r2,-16(fp)
 8043a70:	1000021e 	bne	r2,zero,8043a7c <iproute+0x28>
      return NULL;
 8043a74:	0005883a 	mov	r2,zero
 8043a78:	00006406 	br	8043c0c <iproute+0x1b8>
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
 8043a7c:	d0a0c117 	ldw	r2,-31996(gp)
 8043a80:	1000021e 	bne	r2,zero,8043a8c <iproute+0x38>
      return NULL;
 8043a84:	0005883a 	mov	r2,zero
 8043a88:	00006006 	br	8043c0c <iproute+0x1b8>
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
 8043a8c:	d0a0cb17 	ldw	r2,-31956(gp)
 8043a90:	10000e26 	beq	r2,zero,8043acc <iproute+0x78>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
 8043a94:	d0a0cb17 	ldw	r2,-31956(gp)
 8043a98:	10800017 	ldw	r2,0(r2)
 8043a9c:	e0fffc17 	ldw	r3,-16(fp)
 8043aa0:	18800a1e 	bne	r3,r2,8043acc <iproute+0x78>
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
 8043aa4:	d0a0cb17 	ldw	r2,-31956(gp)
 8043aa8:	10c00617 	ldw	r3,24(r2)
 8043aac:	e0bffb17 	ldw	r2,-20(fp)
 8043ab0:	10c00015 	stw	r3,0(r2)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
 8043ab4:	d0a0cb17 	ldw	r2,-31956(gp)
 8043ab8:	d0e0a317 	ldw	r3,-32116(gp)
 8043abc:	10c00915 	stw	r3,36(r2)
         return(cachedRoute->ifp); /* net to send on */
 8043ac0:	d0a0cb17 	ldw	r2,-31956(gp)
 8043ac4:	10800e17 	ldw	r2,56(r2)
 8043ac8:	00005006 	br	8043c0c <iproute+0x1b8>
      }
   }

   rtp = rt_lookup(host);
 8043acc:	e13ffc17 	ldw	r4,-16(fp)
 8043ad0:	8046dbc0 	call	8046dbc <rt_lookup>
 8043ad4:	e0bffd15 	stw	r2,-12(fp)
   if(rtp)
 8043ad8:	e0bffd17 	ldw	r2,-12(fp)
 8043adc:	10000926 	beq	r2,zero,8043b04 <iproute+0xb0>
   {
      cachedRoute = rtp;
 8043ae0:	e0bffd17 	ldw	r2,-12(fp)
 8043ae4:	d0a0cb15 	stw	r2,-31956(gp)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
 8043ae8:	e0bffd17 	ldw	r2,-12(fp)
 8043aec:	10c00617 	ldw	r3,24(r2)
 8043af0:	e0bffb17 	ldw	r2,-20(fp)
 8043af4:	10c00015 	stw	r3,0(r2)
      return(rtp->ifp);             /* return pointer to net */
 8043af8:	e0bffd17 	ldw	r2,-12(fp)
 8043afc:	10800e17 	ldw	r2,56(r2)
 8043b00:	00004206 	br	8043c0c <iproute+0x1b8>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
 8043b04:	008201b4 	movhi	r2,2054
 8043b08:	10800f17 	ldw	r2,60(r2)
 8043b0c:	e0bffe15 	stw	r2,-8(fp)
   i = 0;
 8043b10:	e03fff15 	stw	zero,-4(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 8043b14:	00002406 	br	8043ba8 <iproute+0x154>
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 8043b18:	e0bffe17 	ldw	r2,-8(fp)
 8043b1c:	10800c17 	ldw	r2,48(r2)
 8043b20:	10001b26 	beq	r2,zero,8043b90 <iproute+0x13c>
         (ifp->n_ipaddr != 0) && 
 8043b24:	e0bffe17 	ldw	r2,-8(fp)
 8043b28:	10800a17 	ldw	r2,40(r2)
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 8043b2c:	10001826 	beq	r2,zero,8043b90 <iproute+0x13c>
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
 8043b30:	e0bffe17 	ldw	r2,-8(fp)
 8043b34:	10c00a17 	ldw	r3,40(r2)
 8043b38:	e0bffc17 	ldw	r2,-16(fp)
 8043b3c:	1886f03a 	xor	r3,r3,r2
 8043b40:	e0bffe17 	ldw	r2,-8(fp)
 8043b44:	10800c17 	ldw	r2,48(r2)
 8043b48:	1884703a 	and	r2,r3,r2
         (ifp->n_ipaddr != 0) && 
 8043b4c:	1000101e 	bne	r2,zero,8043b90 <iproute+0x13c>
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
 8043b50:	00800044 	movi	r2,1
 8043b54:	d8800015 	stw	r2,0(sp)
 8043b58:	e1ffff17 	ldw	r7,-4(fp)
 8043b5c:	e1bffc17 	ldw	r6,-16(fp)
 8043b60:	017fffc4 	movi	r5,-1
 8043b64:	e13ffc17 	ldw	r4,-16(fp)
 8043b68:	8046f100 	call	8046f10 <add_route>
 8043b6c:	d0a0cb15 	stw	r2,-31956(gp)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
 8043b70:	d0a0cb17 	ldw	r2,-31956(gp)
 8043b74:	1000011e 	bne	r2,zero,8043b7c <iproute+0x128>
            dtrap();
 8043b78:	80301a80 	call	80301a8 <dtrap>
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
 8043b7c:	e0bffb17 	ldw	r2,-20(fp)
 8043b80:	e0fffc17 	ldw	r3,-16(fp)
 8043b84:	10c00015 	stw	r3,0(r2)
         return ifp;
 8043b88:	e0bffe17 	ldw	r2,-8(fp)
 8043b8c:	00001f06 	br	8043c0c <iproute+0x1b8>
   for(; ifp; ifp = ifp->n_next, i++)
 8043b90:	e0bffe17 	ldw	r2,-8(fp)
 8043b94:	10800017 	ldw	r2,0(r2)
 8043b98:	e0bffe15 	stw	r2,-8(fp)
 8043b9c:	e0bfff17 	ldw	r2,-4(fp)
 8043ba0:	10800044 	addi	r2,r2,1
 8043ba4:	e0bfff15 	stw	r2,-4(fp)
 8043ba8:	e0bffe17 	ldw	r2,-8(fp)
 8043bac:	103fda1e 	bne	r2,zero,8043b18 <iproute+0xc4>
#endif   /* IP_LOOPBACK */

   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
 8043bb0:	008201b4 	movhi	r2,2054
 8043bb4:	10800f17 	ldw	r2,60(r2)
 8043bb8:	e0bffe15 	stw	r2,-8(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
 8043bbc:	00000c06 	br	8043bf0 <iproute+0x19c>
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 8043bc0:	e0bffe17 	ldw	r2,-8(fp)
 8043bc4:	10800d17 	ldw	r2,52(r2)
 8043bc8:	10000626 	beq	r2,zero,8043be4 <iproute+0x190>
      {
         *hop1 = ifp->n_defgw;
 8043bcc:	e0bffe17 	ldw	r2,-8(fp)
 8043bd0:	10c00d17 	ldw	r3,52(r2)
 8043bd4:	e0bffb17 	ldw	r2,-20(fp)
 8043bd8:	10c00015 	stw	r3,0(r2)
         return ifp;
 8043bdc:	e0bffe17 	ldw	r2,-8(fp)
 8043be0:	00000a06 	br	8043c0c <iproute+0x1b8>
   for(; ifp; ifp = ifp->n_next)
 8043be4:	e0bffe17 	ldw	r2,-8(fp)
 8043be8:	10800017 	ldw	r2,0(r2)
 8043bec:	e0bffe15 	stw	r2,-8(fp)
 8043bf0:	e0bffe17 	ldw	r2,-8(fp)
 8043bf4:	103ff21e 	bne	r2,zero,8043bc0 <iproute+0x16c>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
 8043bf8:	e0bffb17 	ldw	r2,-20(fp)
 8043bfc:	e0fffc17 	ldw	r3,-16(fp)
 8043c00:	10c00015 	stw	r3,0(r2)
   return((NET)(netlist.q_head));
 8043c04:	008201b4 	movhi	r2,2054
 8043c08:	10800f17 	ldw	r2,60(r2)
#endif   /* STRICT_SUBNETTING */
}
 8043c0c:	e037883a 	mov	sp,fp
 8043c10:	dfc00117 	ldw	ra,4(sp)
 8043c14:	df000017 	ldw	fp,0(sp)
 8043c18:	dec00204 	addi	sp,sp,8
 8043c1c:	f800283a 	ret

08043c20 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 8043c20:	defffb04 	addi	sp,sp,-20
 8043c24:	dfc00415 	stw	ra,16(sp)
 8043c28:	df000315 	stw	fp,12(sp)
 8043c2c:	df000304 	addi	fp,sp,12
 8043c30:	e13ffd15 	stw	r4,-12(fp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 8043c34:	e0bffd17 	ldw	r2,-12(fp)
 8043c38:	10800417 	ldw	r2,16(r2)
 8043c3c:	e0fffd17 	ldw	r3,-12(fp)
 8043c40:	19000317 	ldw	r4,12(r3)
 8043c44:	e0fffd17 	ldw	r3,-12(fp)
 8043c48:	18c00117 	ldw	r3,4(r3)
 8043c4c:	20c7c83a 	sub	r3,r4,r3
 8043c50:	10c5883a 	add	r2,r2,r3
 8043c54:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8043c58:	01000084 	movi	r4,2
 8043c5c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
 8043c60:	e0bfff17 	ldw	r2,-4(fp)
 8043c64:	1009883a 	mov	r4,r2
 8043c68:	802f6300 	call	802f630 <pk_alloc>
 8043c6c:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8043c70:	01000084 	movi	r4,2
 8043c74:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (np == NULL)
 8043c78:	e0bffe17 	ldw	r2,-8(fp)
 8043c7c:	1000061e 	bne	r2,zero,8043c98 <ip_copypkt+0x78>
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
 8043c80:	e17fff17 	ldw	r5,-4(fp)
 8043c84:	01020174 	movhi	r4,2053
 8043c88:	21105d04 	addi	r4,r4,16756
 8043c8c:	8003b840 	call	8003b84 <printf>
#endif
      return NULL;
 8043c90:	0005883a 	mov	r2,zero
 8043c94:	00002806 	br	8043d38 <ip_copypkt+0x118>
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
 8043c98:	e0bffe17 	ldw	r2,-8(fp)
 8043c9c:	10c00117 	ldw	r3,4(r2)
 8043ca0:	e0bffd17 	ldw	r2,-12(fp)
 8043ca4:	10800117 	ldw	r2,4(r2)
 8043ca8:	e13fff17 	ldw	r4,-4(fp)
 8043cac:	200d883a 	mov	r6,r4
 8043cb0:	100b883a 	mov	r5,r2
 8043cb4:	1809883a 	mov	r4,r3
 8043cb8:	80037cc0 	call	80037cc <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
 8043cbc:	e0bffe17 	ldw	r2,-8(fp)
 8043cc0:	10800117 	ldw	r2,4(r2)
 8043cc4:	e0fffd17 	ldw	r3,-12(fp)
 8043cc8:	19000317 	ldw	r4,12(r3)
 8043ccc:	e0fffd17 	ldw	r3,-12(fp)
 8043cd0:	18c00117 	ldw	r3,4(r3)
 8043cd4:	20c7c83a 	sub	r3,r4,r3
 8043cd8:	10c7883a 	add	r3,r2,r3
 8043cdc:	e0bffe17 	ldw	r2,-8(fp)
 8043ce0:	10c00315 	stw	r3,12(r2)
   np->nb_plen = p->nb_plen;
 8043ce4:	e0bffd17 	ldw	r2,-12(fp)
 8043ce8:	10c00417 	ldw	r3,16(r2)
 8043cec:	e0bffe17 	ldw	r2,-8(fp)
 8043cf0:	10c00415 	stw	r3,16(r2)
   np->net = p->net;
 8043cf4:	e0bffd17 	ldw	r2,-12(fp)
 8043cf8:	10c00617 	ldw	r3,24(r2)
 8043cfc:	e0bffe17 	ldw	r2,-8(fp)
 8043d00:	10c00615 	stw	r3,24(r2)
   np->fhost = p->fhost;
 8043d04:	e0bffd17 	ldw	r2,-12(fp)
 8043d08:	10c00717 	ldw	r3,28(r2)
 8043d0c:	e0bffe17 	ldw	r2,-8(fp)
 8043d10:	10c00715 	stw	r3,28(r2)
   np->type = p->type;
 8043d14:	e0bffd17 	ldw	r2,-12(fp)
 8043d18:	10c0080b 	ldhu	r3,32(r2)
 8043d1c:	e0bffe17 	ldw	r2,-8(fp)
 8043d20:	10c0080d 	sth	r3,32(r2)
   np->nb_tstamp = p->nb_tstamp;
 8043d24:	e0bffd17 	ldw	r2,-12(fp)
 8043d28:	10c00517 	ldw	r3,20(r2)
 8043d2c:	e0bffe17 	ldw	r2,-8(fp)
 8043d30:	10c00515 	stw	r3,20(r2)

   /* return pointer to the copy */
   return np;
 8043d34:	e0bffe17 	ldw	r2,-8(fp)
}
 8043d38:	e037883a 	mov	sp,fp
 8043d3c:	dfc00117 	ldw	ra,4(sp)
 8043d40:	df000017 	ldw	fp,0(sp)
 8043d44:	dec00204 	addi	sp,sp,8
 8043d48:	f800283a 	ret

08043d4c <ip_reasm_match_frag_with_ire>:
packet being processed.  If no such entry is found, this function returns 
NULL.
*/

IREP ip_reasm_match_frag_with_ire (struct ip * pip)
{
 8043d4c:	defffa04 	addi	sp,sp,-24
 8043d50:	df000515 	stw	fp,20(sp)
 8043d54:	df000504 	addi	fp,sp,20
 8043d58:	e13ffb15 	stw	r4,-20(fp)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
 8043d5c:	e0bffb17 	ldw	r2,-20(fp)
 8043d60:	10800317 	ldw	r2,12(r2)
 8043d64:	e0bffe15 	stw	r2,-8(fp)
   dest = pip->ip_dest;
 8043d68:	e0bffb17 	ldw	r2,-20(fp)
 8043d6c:	10800417 	ldw	r2,16(r2)
 8043d70:	e0bffd15 	stw	r2,-12(fp)
   prot = pip->ip_prot;
 8043d74:	e0bffb17 	ldw	r2,-20(fp)
 8043d78:	10800243 	ldbu	r2,9(r2)
 8043d7c:	e0bffcc5 	stb	r2,-13(fp)
   id = pip->ip_id;
 8043d80:	e0bffb17 	ldw	r2,-20(fp)
 8043d84:	1080010b 	ldhu	r2,4(r2)
 8043d88:	e0bffc0d 	sth	r2,-16(fp)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8043d8c:	d0a0c317 	ldw	r2,-31988(gp)
 8043d90:	e0bfff15 	stw	r2,-4(fp)
 8043d94:	00001706 	br	8043df4 <ip_reasm_match_frag_with_ire+0xa8>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 8043d98:	e0bfff17 	ldw	r2,-4(fp)
 8043d9c:	10800117 	ldw	r2,4(r2)
 8043da0:	e0fffe17 	ldw	r3,-8(fp)
 8043da4:	1880101e 	bne	r3,r2,8043de8 <ip_reasm_match_frag_with_ire+0x9c>
 8043da8:	e0bfff17 	ldw	r2,-4(fp)
 8043dac:	10800217 	ldw	r2,8(r2)
 8043db0:	e0fffd17 	ldw	r3,-12(fp)
 8043db4:	18800c1e 	bne	r3,r2,8043de8 <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
 8043db8:	e0bfff17 	ldw	r2,-4(fp)
 8043dbc:	10800383 	ldbu	r2,14(r2)
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 8043dc0:	e0fffcc3 	ldbu	r3,-13(fp)
 8043dc4:	10803fcc 	andi	r2,r2,255
 8043dc8:	1880071e 	bne	r3,r2,8043de8 <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
 8043dcc:	e0bfff17 	ldw	r2,-4(fp)
 8043dd0:	1080030b 	ldhu	r2,12(r2)
 8043dd4:	e0fffc0b 	ldhu	r3,-16(fp)
 8043dd8:	10bfffcc 	andi	r2,r2,65535
 8043ddc:	1880021e 	bne	r3,r2,8043de8 <ip_reasm_match_frag_with_ire+0x9c>
         {
         return tmpp; /* we've found a match */
 8043de0:	e0bfff17 	ldw	r2,-4(fp)
 8043de4:	00000606 	br	8043e00 <ip_reasm_match_frag_with_ire+0xb4>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8043de8:	e0bfff17 	ldw	r2,-4(fp)
 8043dec:	10800017 	ldw	r2,0(r2)
 8043df0:	e0bfff15 	stw	r2,-4(fp)
 8043df4:	e0bfff17 	ldw	r2,-4(fp)
 8043df8:	103fe71e 	bne	r2,zero,8043d98 <ip_reasm_match_frag_with_ire+0x4c>
         }
      }

   /* no match found */
   return NULL;
 8043dfc:	0005883a 	mov	r2,zero
}
 8043e00:	e037883a 	mov	sp,fp
 8043e04:	df000017 	ldw	fp,0(sp)
 8043e08:	dec00104 	addi	sp,sp,4
 8043e0c:	f800283a 	ret

08043e10 <ip_reasm_determine_type_of_frag>:
OUTPUT: One of the various IP_FRAGTYPE values (IP_CP, IP_FF, IP_MF, 
or IP_LF)
*/

IP_FRAGTYPE ip_reasm_determine_type_of_frag (struct ip * pip)
{
 8043e10:	defffc04 	addi	sp,sp,-16
 8043e14:	df000315 	stw	fp,12(sp)
 8043e18:	df000304 	addi	fp,sp,12
 8043e1c:	e13ffd15 	stw	r4,-12(fp)
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
 8043e20:	e0bffd17 	ldw	r2,-12(fp)
 8043e24:	1080018b 	ldhu	r2,6(r2)
 8043e28:	10bfffcc 	andi	r2,r2,65535
 8043e2c:	1004d23a 	srli	r2,r2,8
 8043e30:	10bfffcc 	andi	r2,r2,65535
 8043e34:	10c03fcc 	andi	r3,r2,255
 8043e38:	e0bffd17 	ldw	r2,-12(fp)
 8043e3c:	1080018b 	ldhu	r2,6(r2)
 8043e40:	10bfffcc 	andi	r2,r2,65535
 8043e44:	1004923a 	slli	r2,r2,8
 8043e48:	10bfffcc 	andi	r2,r2,65535
 8043e4c:	1884b03a 	or	r2,r3,r2
 8043e50:	1005d37a 	srai	r2,r2,13
 8043e54:	1080004c 	andi	r2,r2,1
 8043e58:	e0bffe8d 	sth	r2,-6(fp)
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
 8043e5c:	e0bffd17 	ldw	r2,-12(fp)
 8043e60:	1080018b 	ldhu	r2,6(r2)
 8043e64:	10bfffcc 	andi	r2,r2,65535
 8043e68:	1004d23a 	srli	r2,r2,8
 8043e6c:	1007883a 	mov	r3,r2
 8043e70:	e0bffd17 	ldw	r2,-12(fp)
 8043e74:	1080018b 	ldhu	r2,6(r2)
 8043e78:	10bfffcc 	andi	r2,r2,65535
 8043e7c:	1004923a 	slli	r2,r2,8
 8043e80:	1884b03a 	or	r2,r3,r2
 8043e84:	1087ffcc 	andi	r2,r2,8191
 8043e88:	e0bffe0d 	sth	r2,-8(fp)

  if (mf == 0)
 8043e8c:	e0bffe8b 	ldhu	r2,-6(fp)
 8043e90:	1000071e 	bne	r2,zero,8043eb0 <ip_reasm_determine_type_of_frag+0xa0>
     {
     if (foff == 0) {rc = IP_CP;}
 8043e94:	e0bffe0b 	ldhu	r2,-8(fp)
 8043e98:	1000021e 	bne	r2,zero,8043ea4 <ip_reasm_determine_type_of_frag+0x94>
 8043e9c:	e03fff15 	stw	zero,-4(fp)
 8043ea0:	00000a06 	br	8043ecc <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_LF;}
 8043ea4:	00800144 	movi	r2,5
 8043ea8:	e0bfff15 	stw	r2,-4(fp)
 8043eac:	00000706 	br	8043ecc <ip_reasm_determine_type_of_frag+0xbc>
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
 8043eb0:	e0bffe0b 	ldhu	r2,-8(fp)
 8043eb4:	1000031e 	bne	r2,zero,8043ec4 <ip_reasm_determine_type_of_frag+0xb4>
 8043eb8:	00800044 	movi	r2,1
 8043ebc:	e0bfff15 	stw	r2,-4(fp)
 8043ec0:	00000206 	br	8043ecc <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_MF;}
 8043ec4:	008000c4 	movi	r2,3
 8043ec8:	e0bfff15 	stw	r2,-4(fp)
     }

  return rc;
 8043ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 8043ed0:	e037883a 	mov	sp,fp
 8043ed4:	df000017 	ldw	fp,0(sp)
 8043ed8:	dec00104 	addi	sp,sp,4
 8043edc:	f800283a 	ret

08043ee0 <ip_reasm_check_mem_useage>:
OUTPUT: ENP_RESOURCE, if the increment request can't be allowed; 
otherwise it returns IPREASM_OK.
*/

int ip_reasm_check_mem_useage (u_short increment)
{
 8043ee0:	defffe04 	addi	sp,sp,-8
 8043ee4:	df000115 	stw	fp,4(sp)
 8043ee8:	df000104 	addi	fp,sp,4
 8043eec:	2005883a 	mov	r2,r4
 8043ef0:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 8043ef4:	d0a0c217 	ldw	r2,-31992(gp)
 8043ef8:	00c001b4 	movhi	r3,6
 8043efc:	1880052e 	bgeu	r3,r2,8043f14 <ip_reasm_check_mem_useage+0x34>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 8043f00:	008201b4 	movhi	r2,2054
 8043f04:	10802a17 	ldw	r2,168(r2)
 8043f08:	10c00044 	addi	r3,r2,1
 8043f0c:	008201b4 	movhi	r2,2054
 8043f10:	10c02a15 	stw	r3,168(r2)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 8043f14:	d0e0c217 	ldw	r3,-31992(gp)
 8043f18:	008001b4 	movhi	r2,6
 8043f1c:	18800526 	beq	r3,r2,8043f34 <ip_reasm_check_mem_useage+0x54>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
 8043f20:	e0ffff0b 	ldhu	r3,-4(fp)
 8043f24:	d0a0c217 	ldw	r2,-31992(gp)
 8043f28:	1885883a 	add	r2,r3,r2
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 8043f2c:	00c001b4 	movhi	r3,6
 8043f30:	1880072e 	bgeu	r3,r2,8043f50 <ip_reasm_check_mem_useage+0x70>
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
 8043f34:	008201b4 	movhi	r2,2054
 8043f38:	10802b17 	ldw	r2,172(r2)
 8043f3c:	10c00044 	addi	r3,r2,1
 8043f40:	008201b4 	movhi	r2,2054
 8043f44:	10c02b15 	stw	r3,172(r2)
      return ENP_RESOURCE;
 8043f48:	00bffa84 	movi	r2,-22
 8043f4c:	00000106 	br	8043f54 <ip_reasm_check_mem_useage+0x74>
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
 8043f50:	0005883a 	mov	r2,zero
}
 8043f54:	e037883a 	mov	sp,fp
 8043f58:	df000017 	ldw	fp,0(sp)
 8043f5c:	dec00104 	addi	sp,sp,4
 8043f60:	f800283a 	ret

08043f64 <ip_reasm_incr_mem_useage>:
system exceeding the maximum limit or if the system has already exceeded 
the prespecified limit for memory useage; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
 8043f64:	defffe04 	addi	sp,sp,-8
 8043f68:	df000115 	stw	fp,4(sp)
 8043f6c:	df000104 	addi	fp,sp,4
 8043f70:	2005883a 	mov	r2,r4
 8043f74:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 8043f78:	d0a0c217 	ldw	r2,-31992(gp)
 8043f7c:	00c001b4 	movhi	r3,6
 8043f80:	1880072e 	bgeu	r3,r2,8043fa0 <ip_reasm_incr_mem_useage+0x3c>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 8043f84:	008201b4 	movhi	r2,2054
 8043f88:	10802a17 	ldw	r2,168(r2)
 8043f8c:	10c00044 	addi	r3,r2,1
 8043f90:	008201b4 	movhi	r2,2054
 8043f94:	10c02a15 	stw	r3,168(r2)
      return ENP_RESOURCE;
 8043f98:	00bffa84 	movi	r2,-22
 8043f9c:	00001106 	br	8043fe4 <ip_reasm_incr_mem_useage+0x80>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 8043fa0:	e0ffff0b 	ldhu	r3,-4(fp)
 8043fa4:	d0a0c217 	ldw	r2,-31992(gp)
 8043fa8:	1885883a 	add	r2,r3,r2
 8043fac:	00c001b4 	movhi	r3,6
 8043fb0:	1880072e 	bgeu	r3,r2,8043fd0 <ip_reasm_incr_mem_useage+0x6c>
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
 8043fb4:	008201b4 	movhi	r2,2054
 8043fb8:	10802c17 	ldw	r2,176(r2)
 8043fbc:	10c00044 	addi	r3,r2,1
 8043fc0:	008201b4 	movhi	r2,2054
 8043fc4:	10c02c15 	stw	r3,176(r2)
      return ENP_RESOURCE;
 8043fc8:	00bffa84 	movi	r2,-22
 8043fcc:	00000506 	br	8043fe4 <ip_reasm_incr_mem_useage+0x80>
   }

   ipr_curr_mem += increment;
 8043fd0:	e0ffff0b 	ldhu	r3,-4(fp)
 8043fd4:	d0a0c217 	ldw	r2,-31992(gp)
 8043fd8:	1885883a 	add	r2,r3,r2
 8043fdc:	d0a0c215 	stw	r2,-31992(gp)

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
 8043fe0:	0005883a 	mov	r2,zero
}
 8043fe4:	e037883a 	mov	sp,fp
 8043fe8:	df000017 	ldw	fp,0(sp)
 8043fec:	dec00104 	addi	sp,sp,4
 8043ff0:	f800283a 	ret

08043ff4 <ip_reasm_decr_mem_useage>:
exceeded the prespecified limit for memory useage; otherwise, it returns 
IPREASM_OK.
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
 8043ff4:	defffe04 	addi	sp,sp,-8
 8043ff8:	df000115 	stw	fp,4(sp)
 8043ffc:	df000104 	addi	fp,sp,4
 8044000:	2005883a 	mov	r2,r4
 8044004:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 8044008:	d0a0c217 	ldw	r2,-31992(gp)
 804400c:	00c001b4 	movhi	r3,6
 8044010:	1880072e 	bgeu	r3,r2,8044030 <ip_reasm_decr_mem_useage+0x3c>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 8044014:	008201b4 	movhi	r2,2054
 8044018:	10802a17 	ldw	r2,168(r2)
 804401c:	10c00044 	addi	r3,r2,1
 8044020:	008201b4 	movhi	r2,2054
 8044024:	10c02a15 	stw	r3,168(r2)
      return ENP_RESOURCE;
 8044028:	00bffa84 	movi	r2,-22
 804402c:	00000f06 	br	804406c <ip_reasm_decr_mem_useage+0x78>
   }
   if (ipr_curr_mem < decrement)
 8044030:	e0bfff0b 	ldhu	r2,-4(fp)
 8044034:	d0e0c217 	ldw	r3,-31992(gp)
 8044038:	1880072e 	bgeu	r3,r2,8044058 <ip_reasm_decr_mem_useage+0x64>
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 804403c:	008201b4 	movhi	r2,2054
 8044040:	10802d17 	ldw	r2,180(r2)
 8044044:	10c00044 	addi	r3,r2,1
 8044048:	008201b4 	movhi	r2,2054
 804404c:	10c02d15 	stw	r3,180(r2)
      return ENP_RESOURCE;
 8044050:	00bffa84 	movi	r2,-22
 8044054:	00000506 	br	804406c <ip_reasm_decr_mem_useage+0x78>
   }

   ipr_curr_mem -= decrement;
 8044058:	d0e0c217 	ldw	r3,-31992(gp)
 804405c:	e0bfff0b 	ldhu	r2,-4(fp)
 8044060:	1885c83a 	sub	r2,r3,r2
 8044064:	d0a0c215 	stw	r2,-31992(gp)

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
 8044068:	0005883a 	mov	r2,zero
}
 804406c:	e037883a 	mov	sp,fp
 8044070:	df000017 	ldw	fp,0(sp)
 8044074:	dec00104 	addi	sp,sp,4
 8044078:	f800283a 	ret

0804407c <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 804407c:	defff704 	addi	sp,sp,-36
 8044080:	dfc00815 	stw	ra,32(sp)
 8044084:	df000715 	stw	fp,28(sp)
 8044088:	df000704 	addi	fp,sp,28
 804408c:	e13ff915 	stw	r4,-28(fp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 8044090:	e0bff917 	ldw	r2,-28(fp)
 8044094:	10800217 	ldw	r2,8(r2)
 8044098:	10802204 	addi	r2,r2,136
 804409c:	10bfffcc 	andi	r2,r2,65535
 80440a0:	1009883a 	mov	r4,r2
 80440a4:	8043ee00 	call	8043ee0 <ip_reasm_check_mem_useage>
 80440a8:	e0bfff15 	stw	r2,-4(fp)
 80440ac:	e0bfff17 	ldw	r2,-4(fp)
 80440b0:	10000d26 	beq	r2,zero,80440e8 <ip_reasm_process_first_fragment+0x6c>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 80440b4:	01000084 	movi	r4,2
 80440b8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free (p);
 80440bc:	e13ff917 	ldw	r4,-28(fp)
 80440c0:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 80440c4:	01000084 	movi	r4,2
 80440c8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 80440cc:	008201b4 	movhi	r2,2054
 80440d0:	10802317 	ldw	r2,140(r2)
 80440d4:	10c00044 	addi	r3,r2,1
 80440d8:	008201b4 	movhi	r2,2054
 80440dc:	10c02315 	stw	r3,140(r2)
      return rc;
 80440e0:	e0bfff17 	ldw	r2,-4(fp)
 80440e4:	00008a06 	br	8044310 <ip_reasm_process_first_fragment+0x294>
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
 80440e8:	01002204 	movi	r4,136
 80440ec:	8030d080 	call	8030d08 <npalloc>
 80440f0:	e0bffe15 	stw	r2,-8(fp)
   if (irep == 0) 
 80440f4:	e0bffe17 	ldw	r2,-8(fp)
 80440f8:	10000d1e 	bne	r2,zero,8044130 <ip_reasm_process_first_fragment+0xb4>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 80440fc:	01000084 	movi	r4,2
 8044100:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free (p);
 8044104:	e13ff917 	ldw	r4,-28(fp)
 8044108:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 804410c:	01000084 	movi	r4,2
 8044110:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 8044114:	008201b4 	movhi	r2,2054
 8044118:	10802317 	ldw	r2,140(r2)
 804411c:	10c00044 	addi	r3,r2,1
 8044120:	008201b4 	movhi	r2,2054
 8044124:	10c02315 	stw	r3,140(r2)
      return ENP_RESOURCE;
 8044128:	00bffa84 	movi	r2,-22
 804412c:	00007806 	br	8044310 <ip_reasm_process_first_fragment+0x294>
   }

   pip = ip_head(p);
 8044130:	e0bff917 	ldw	r2,-28(fp)
 8044134:	10800317 	ldw	r2,12(r2)
 8044138:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen(pip);
 804413c:	e0bffd17 	ldw	r2,-12(fp)
 8044140:	10800003 	ldbu	r2,0(r2)
 8044144:	10803fcc 	andi	r2,r2,255
 8044148:	100490ba 	slli	r2,r2,2
 804414c:	10800f0c 	andi	r2,r2,60
 8044150:	e0bffcc5 	stb	r2,-13(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 8044154:	e13ffd17 	ldw	r4,-12(fp)
 8044158:	8043e100 	call	8043e10 <ip_reasm_determine_type_of_frag>
 804415c:	e0bffb15 	stw	r2,-20(fp)
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 8044160:	e0bffd17 	ldw	r2,-12(fp)
 8044164:	1080018b 	ldhu	r2,6(r2)
 8044168:	10bfffcc 	andi	r2,r2,65535
 804416c:	1004d23a 	srli	r2,r2,8
 8044170:	10bfffcc 	andi	r2,r2,65535
 8044174:	10c03fcc 	andi	r3,r2,255
 8044178:	e0bffd17 	ldw	r2,-12(fp)
 804417c:	1080018b 	ldhu	r2,6(r2)
 8044180:	10bfffcc 	andi	r2,r2,65535
 8044184:	1004923a 	slli	r2,r2,8
 8044188:	10bfffcc 	andi	r2,r2,65535
 804418c:	1884b03a 	or	r2,r3,r2
 8044190:	100490fa 	slli	r2,r2,3
 8044194:	e0bffa8d 	sth	r2,-22(fp)
   total_len = ntohs(pip->ip_len);
 8044198:	e0bffd17 	ldw	r2,-12(fp)
 804419c:	1080008b 	ldhu	r2,2(r2)
 80441a0:	10bfffcc 	andi	r2,r2,65535
 80441a4:	1004d23a 	srli	r2,r2,8
 80441a8:	1007883a 	mov	r3,r2
 80441ac:	e0bffd17 	ldw	r2,-12(fp)
 80441b0:	1080008b 	ldhu	r2,2(r2)
 80441b4:	10bfffcc 	andi	r2,r2,65535
 80441b8:	1004923a 	slli	r2,r2,8
 80441bc:	1884b03a 	or	r2,r3,r2
 80441c0:	e0bffa0d 	sth	r2,-24(fp)

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
 80441c4:	e0bffd17 	ldw	r2,-12(fp)
 80441c8:	10c00317 	ldw	r3,12(r2)
 80441cc:	e0bffe17 	ldw	r2,-8(fp)
 80441d0:	10c00115 	stw	r3,4(r2)
   irep->dest = pip->ip_dest;
 80441d4:	e0bffd17 	ldw	r2,-12(fp)
 80441d8:	10c00417 	ldw	r3,16(r2)
 80441dc:	e0bffe17 	ldw	r2,-8(fp)
 80441e0:	10c00215 	stw	r3,8(r2)
   irep->prot = pip->ip_prot;
 80441e4:	e0bffd17 	ldw	r2,-12(fp)
 80441e8:	10c00243 	ldbu	r3,9(r2)
 80441ec:	e0bffe17 	ldw	r2,-8(fp)
 80441f0:	10c00385 	stb	r3,14(r2)
   irep->id = pip->ip_id;
 80441f4:	e0bffd17 	ldw	r2,-12(fp)
 80441f8:	10c0010b 	ldhu	r3,4(r2)
 80441fc:	e0bffe17 	ldw	r2,-8(fp)
 8044200:	10c0030d 	sth	r3,12(r2)
   if (ftype == IP_LF)
 8044204:	e0bffb17 	ldw	r2,-20(fp)
 8044208:	10800158 	cmpnei	r2,r2,5
 804420c:	10000a1e 	bne	r2,zero,8044238 <ip_reasm_process_first_fragment+0x1bc>
      {
      irep->length = frag_offset + (total_len - iphlen);
 8044210:	e0bffcc3 	ldbu	r2,-13(fp)
 8044214:	e0fffa0b 	ldhu	r3,-24(fp)
 8044218:	1885c83a 	sub	r2,r3,r2
 804421c:	1007883a 	mov	r3,r2
 8044220:	e0bffa8b 	ldhu	r2,-22(fp)
 8044224:	10c5883a 	add	r2,r2,r3
 8044228:	1007883a 	mov	r3,r2
 804422c:	e0bffe17 	ldw	r2,-8(fp)
 8044230:	10c0040d 	sth	r3,16(r2)
 8044234:	00000a06 	br	8044260 <ip_reasm_process_first_fragment+0x1e4>
      }
   else if (ftype == IP_FF)
 8044238:	e0bffb17 	ldw	r2,-20(fp)
 804423c:	10800058 	cmpnei	r2,r2,1
 8044240:	1000071e 	bne	r2,zero,8044260 <ip_reasm_process_first_fragment+0x1e4>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
 8044244:	e0bff917 	ldw	r2,-28(fp)
 8044248:	10c00117 	ldw	r3,4(r2)
 804424c:	e0bffe17 	ldw	r2,-8(fp)
 8044250:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 8044254:	e0bffe17 	ldw	r2,-8(fp)
 8044258:	e0fffd17 	ldw	r3,-12(fp)
 804425c:	10c02015 	stw	r3,128(r2)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
 8044260:	e0bffcc3 	ldbu	r2,-13(fp)
 8044264:	e0fffa0b 	ldhu	r3,-24(fp)
 8044268:	1885c83a 	sub	r2,r3,r2
 804426c:	1007883a 	mov	r3,r2
 8044270:	e0bffe17 	ldw	r2,-8(fp)
 8044274:	10c0048d 	sth	r3,18(r2)
   irep->age = 0;
 8044278:	e0bffe17 	ldw	r2,-8(fp)
 804427c:	10000515 	stw	zero,20(r2)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
 8044280:	e0bffe17 	ldw	r2,-8(fp)
 8044284:	10802103 	ldbu	r2,132(r2)
 8044288:	10800054 	ori	r2,r2,1
 804428c:	1007883a 	mov	r3,r2
 8044290:	e0bffe17 	ldw	r2,-8(fp)
 8044294:	10c02105 	stb	r3,132(r2)

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
 8044298:	e0bffe17 	ldw	r2,-8(fp)
 804429c:	e0fff917 	ldw	r3,-28(fp)
 80442a0:	10c00715 	stw	r3,28(r2)
   irep->rfq.frag_offset[0] = frag_offset;
 80442a4:	e0bffe17 	ldw	r2,-8(fp)
 80442a8:	e0fffa8b 	ldhu	r3,-22(fp)
 80442ac:	10c0170d 	sth	r3,92(r2)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 80442b0:	e0bff917 	ldw	r2,-28(fp)
 80442b4:	10c00317 	ldw	r3,12(r2)
 80442b8:	e0bffcc3 	ldbu	r2,-13(fp)
 80442bc:	1887883a 	add	r3,r3,r2
 80442c0:	e0bff917 	ldw	r2,-28(fp)
 80442c4:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 80442c8:	e0bff917 	ldw	r2,-28(fp)
 80442cc:	10c00417 	ldw	r3,16(r2)
 80442d0:	e0bffcc3 	ldbu	r2,-13(fp)
 80442d4:	1887c83a 	sub	r3,r3,r2
 80442d8:	e0bff917 	ldw	r2,-28(fp)
 80442dc:	10c00415 	stw	r3,16(r2)

   /* insert at start of global IRE list */
   irep->next = h_ireq;
 80442e0:	d0e0c317 	ldw	r3,-31988(gp)
 80442e4:	e0bffe17 	ldw	r2,-8(fp)
 80442e8:	10c00015 	stw	r3,0(r2)
   h_ireq = irep;
 80442ec:	e0bffe17 	ldw	r2,-8(fp)
 80442f0:	d0a0c315 	stw	r2,-31988(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 80442f4:	e0bff917 	ldw	r2,-28(fp)
 80442f8:	10800217 	ldw	r2,8(r2)
 80442fc:	10802204 	addi	r2,r2,136
 8044300:	10bfffcc 	andi	r2,r2,65535
 8044304:	1009883a 	mov	r4,r2
 8044308:	8043f640 	call	8043f64 <ip_reasm_incr_mem_useage>

   return IPREASM_OK;
 804430c:	0005883a 	mov	r2,zero
}
 8044310:	e037883a 	mov	sp,fp
 8044314:	dfc00117 	ldw	ra,4(sp)
 8044318:	df000017 	ldw	fp,0(sp)
 804431c:	dec00204 	addi	sp,sp,8
 8044320:	f800283a 	ret

08044324 <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
 8044324:	defff904 	addi	sp,sp,-28
 8044328:	dfc00615 	stw	ra,24(sp)
 804432c:	df000515 	stw	fp,20(sp)
 8044330:	df000504 	addi	fp,sp,20
 8044334:	e13ffb15 	stw	r4,-20(fp)
   IREP irep;
   struct ip * pip;
   int rc1, rc2;

   pip = ip_head(p);
 8044338:	e0bffb17 	ldw	r2,-20(fp)
 804433c:	10800317 	ldw	r2,12(r2)
 8044340:	e0bfff15 	stw	r2,-4(fp)

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
 8044344:	e13fff17 	ldw	r4,-4(fp)
 8044348:	8043d4c0 	call	8043d4c <ip_reasm_match_frag_with_ire>
 804434c:	e0bffe15 	stw	r2,-8(fp)

   if (!irep)
 8044350:	e0bffe17 	ldw	r2,-8(fp)
 8044354:	1000071e 	bne	r2,zero,8044374 <ip_reassm+0x50>
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
 8044358:	e13ffb17 	ldw	r4,-20(fp)
 804435c:	804407c0 	call	804407c <ip_reasm_process_first_fragment>
 8044360:	e0bffc15 	stw	r2,-16(fp)
 8044364:	e0bffc17 	ldw	r2,-16(fp)
 8044368:	10000a26 	beq	r2,zero,8044394 <ip_reassm+0x70>
      {
         /* ip_reasm_process_first_fragment () will free the packet */
         return rc1;
 804436c:	e0bffc17 	ldw	r2,-16(fp)
 8044370:	00000906 	br	8044398 <ip_reassm+0x74>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 8044374:	e17ffe17 	ldw	r5,-8(fp)
 8044378:	e13ffb17 	ldw	r4,-20(fp)
 804437c:	80449000 	call	8044900 <ip_reasm_process_subsequent_fragments>
 8044380:	e0bffd15 	stw	r2,-12(fp)
 8044384:	e0bffd17 	ldw	r2,-12(fp)
 8044388:	10000226 	beq	r2,zero,8044394 <ip_reassm+0x70>
      {
         /* ip_reasm_process_subsequent_fragments () has already deleted the IRE entry */
         return rc2;
 804438c:	e0bffd17 	ldw	r2,-12(fp)
 8044390:	00000106 	br	8044398 <ip_reassm+0x74>
      }
   }

   return IPREASM_OK;
 8044394:	0005883a 	mov	r2,zero
}
 8044398:	e037883a 	mov	sp,fp
 804439c:	dfc00117 	ldw	ra,4(sp)
 80443a0:	df000017 	ldw	fp,0(sp)
 80443a4:	dec00204 	addi	sp,sp,8
 80443a8:	f800283a 	ret

080443ac <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
 80443ac:	defff204 	addi	sp,sp,-56
 80443b0:	dfc00d15 	stw	ra,52(sp)
 80443b4:	df000c15 	stw	fp,48(sp)
 80443b8:	df000c04 	addi	fp,sp,48
 80443bc:	e13ff715 	stw	r4,-36(fp)
 80443c0:	e17ff615 	stw	r5,-40(fp)
 80443c4:	e1bff515 	stw	r6,-44(fp)
 80443c8:	e1fff415 	stw	r7,-48(fp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 80443cc:	e13ff617 	ldw	r4,-40(fp)
 80443d0:	8044e000 	call	8044e00 <ip_reasm_find_ire>
 80443d4:	10803fcc 	andi	r2,r2,255
 80443d8:	10800060 	cmpeqi	r2,r2,1
 80443dc:	10000d1e 	bne	r2,zero,8044414 <ip_reasm_compute_overlap+0x68>
      {
      ++ire_stats.bad_irep;
 80443e0:	008201b4 	movhi	r2,2054
 80443e4:	10802817 	ldw	r2,160(r2)
 80443e8:	10c00044 	addi	r3,r2,1
 80443ec:	008201b4 	movhi	r2,2054
 80443f0:	10c02815 	stw	r3,160(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 80443f4:	01000084 	movi	r4,2
 80443f8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free (p);
 80443fc:	e13ff717 	ldw	r4,-36(fp)
 8044400:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044404:	01000084 	movi	r4,2
 8044408:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return IPREASM_DROP_FRAG_BAD_PARAM;
 804440c:	00800044 	movi	r2,1
 8044410:	00013606 	br	80448ec <ip_reasm_compute_overlap+0x540>
      }

   jrip = ip_head(p);
 8044414:	e0bff717 	ldw	r2,-36(fp)
 8044418:	10800317 	ldw	r2,12(r2)
 804441c:	e0bffc15 	stw	r2,-16(fp)
   iphlen = ip_hlen (jrip);
 8044420:	e0bffc17 	ldw	r2,-16(fp)
 8044424:	10800003 	ldbu	r2,0(r2)
 8044428:	10803fcc 	andi	r2,r2,255
 804442c:	100490ba 	slli	r2,r2,2
 8044430:	10800f0c 	andi	r2,r2,60
 8044434:	e0bffbc5 	stb	r2,-17(fp)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 8044438:	e0bffc17 	ldw	r2,-16(fp)
 804443c:	1080018b 	ldhu	r2,6(r2)
 8044440:	10bfffcc 	andi	r2,r2,65535
 8044444:	1004d23a 	srli	r2,r2,8
 8044448:	10bfffcc 	andi	r2,r2,65535
 804444c:	10c03fcc 	andi	r3,r2,255
 8044450:	e0bffc17 	ldw	r2,-16(fp)
 8044454:	1080018b 	ldhu	r2,6(r2)
 8044458:	10bfffcc 	andi	r2,r2,65535
 804445c:	1004923a 	slli	r2,r2,8
 8044460:	10bfffcc 	andi	r2,r2,65535
 8044464:	1884b03a 	or	r2,r3,r2
 8044468:	100490fa 	slli	r2,r2,3
 804446c:	e0bffe8d 	sth	r2,-6(fp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
 8044470:	e0bffc17 	ldw	r2,-16(fp)
 8044474:	1080008b 	ldhu	r2,2(r2)
 8044478:	10bfffcc 	andi	r2,r2,65535
 804447c:	1004d23a 	srli	r2,r2,8
 8044480:	1007883a 	mov	r3,r2
 8044484:	e0bffc17 	ldw	r2,-16(fp)
 8044488:	1080008b 	ldhu	r2,2(r2)
 804448c:	10bfffcc 	andi	r2,r2,65535
 8044490:	1004923a 	slli	r2,r2,8
 8044494:	1884b03a 	or	r2,r3,r2
 8044498:	1007883a 	mov	r3,r2
 804449c:	e0bffbc3 	ldbu	r2,-17(fp)
 80444a0:	1885c83a 	sub	r2,r3,r2
 80444a4:	1007883a 	mov	r3,r2
 80444a8:	e0bffe8b 	ldhu	r2,-6(fp)
 80444ac:	10c5883a 	add	r2,r2,r3
 80444b0:	10bfffc4 	addi	r2,r2,-1
 80444b4:	e0bffe0d 	sth	r2,-8(fp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 80444b8:	e0bff717 	ldw	r2,-36(fp)
 80444bc:	10c00317 	ldw	r3,12(r2)
 80444c0:	e0bffbc3 	ldbu	r2,-17(fp)
 80444c4:	1887883a 	add	r3,r3,r2
 80444c8:	e0bff717 	ldw	r2,-36(fp)
 80444cc:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 80444d0:	e0bff717 	ldw	r2,-36(fp)
 80444d4:	10c00417 	ldw	r3,16(r2)
 80444d8:	e0bffbc3 	ldbu	r2,-17(fp)
 80444dc:	1887c83a 	sub	r3,r3,r2
 80444e0:	e0bff717 	ldw	r2,-36(fp)
 80444e4:	10c00415 	stw	r3,16(r2)

   *frag_offsetp = jrstart;
 80444e8:	e0800217 	ldw	r2,8(fp)
 80444ec:	e0fffe8b 	ldhu	r3,-6(fp)
 80444f0:	10c0000d 	sth	r3,0(r2)
   *indexp = INVALID_FRAG_INDEX;
 80444f4:	e0bff517 	ldw	r2,-44(fp)
 80444f8:	00c00404 	movi	r3,16
 80444fc:	10c0000d 	sth	r3,0(r2)
   *last_rfqpp = 0;
 8044500:	e0bff417 	ldw	r2,-48(fp)
 8044504:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
 8044508:	e0800317 	ldw	r2,12(fp)
 804450c:	10000005 	stb	zero,0(r2)

   rfqp = &(irep->rfq);
 8044510:	e0bff617 	ldw	r2,-40(fp)
 8044514:	10800604 	addi	r2,r2,24
 8044518:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 804451c:	0000ed06 	br	80448d4 <ip_reasm_compute_overlap+0x528>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8044520:	e03ffd8d 	sth	zero,-10(fp)
 8044524:	0000db06 	br	8044894 <ip_reasm_compute_overlap+0x4e8>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
 8044528:	e0bffd8b 	ldhu	r2,-10(fp)
 804452c:	e0ffff17 	ldw	r3,-4(fp)
 8044530:	10800044 	addi	r2,r2,1
 8044534:	100490ba 	slli	r2,r2,2
 8044538:	1885883a 	add	r2,r3,r2
 804453c:	10800017 	ldw	r2,0(r2)
 8044540:	e0bffa15 	stw	r2,-24(fp)
 8044544:	e0bffa17 	ldw	r2,-24(fp)
 8044548:	1000bf26 	beq	r2,zero,8044848 <ip_reasm_compute_overlap+0x49c>
            {
            currstart = rfqp->frag_offset[i];
 804454c:	e0bffd8b 	ldhu	r2,-10(fp)
 8044550:	e0ffff17 	ldw	r3,-4(fp)
 8044554:	10800884 	addi	r2,r2,34
 8044558:	1085883a 	add	r2,r2,r2
 804455c:	1885883a 	add	r2,r3,r2
 8044560:	1080000b 	ldhu	r2,0(r2)
 8044564:	e0bff98d 	sth	r2,-26(fp)
            currend = currstart + currpkt->nb_plen - 1;
 8044568:	e0bffa17 	ldw	r2,-24(fp)
 804456c:	10800417 	ldw	r2,16(r2)
 8044570:	1007883a 	mov	r3,r2
 8044574:	e0bff98b 	ldhu	r2,-26(fp)
 8044578:	10c5883a 	add	r2,r2,r3
 804457c:	10bfffc4 	addi	r2,r2,-1
 8044580:	e0bff90d 	sth	r2,-28(fp)

            if (currstart < jrstart)
 8044584:	e0fff98b 	ldhu	r3,-26(fp)
 8044588:	e0bffe8b 	ldhu	r2,-6(fp)
 804458c:	18802b2e 	bgeu	r3,r2,804463c <ip_reasm_compute_overlap+0x290>
               {
               if (currend < jrend) /* cases A1 and A2 */
 8044590:	e0fff90b 	ldhu	r3,-28(fp)
 8044594:	e0bffe0b 	ldhu	r2,-8(fp)
 8044598:	1880202e 	bgeu	r3,r2,804461c <ip_reasm_compute_overlap+0x270>
                  {
                  if (currend < jrstart) /* A1 */
 804459c:	e0fff90b 	ldhu	r3,-28(fp)
 80445a0:	e0bffe8b 	ldhu	r2,-6(fp)
 80445a4:	1880b836 	bltu	r3,r2,8044888 <ip_reasm_compute_overlap+0x4dc>
                     {
                     /* the just received fragment partially overlaps current 
                      * fragment on the latter's right; increment start 
                      * pointer and decrement length of just received fragment.
                      * Move on to the next fragment in the RFQ. */
                     drop_len = (currend - jrstart) + 1;
 80445a8:	e0fff90b 	ldhu	r3,-28(fp)
 80445ac:	e0bffe8b 	ldhu	r2,-6(fp)
 80445b0:	1885c83a 	sub	r2,r3,r2
 80445b4:	10800044 	addi	r2,r2,1
 80445b8:	e0bff88d 	sth	r2,-30(fp)
                     p->nb_prot += drop_len;
 80445bc:	e0bff717 	ldw	r2,-36(fp)
 80445c0:	10c00317 	ldw	r3,12(r2)
 80445c4:	e0bff88b 	ldhu	r2,-30(fp)
 80445c8:	1887883a 	add	r3,r3,r2
 80445cc:	e0bff717 	ldw	r2,-36(fp)
 80445d0:	10c00315 	stw	r3,12(r2)
                     p->nb_plen -= drop_len;
 80445d4:	e0bff717 	ldw	r2,-36(fp)
 80445d8:	10c00417 	ldw	r3,16(r2)
 80445dc:	e0bff88b 	ldhu	r2,-30(fp)
 80445e0:	1887c83a 	sub	r3,r3,r2
 80445e4:	e0bff717 	ldw	r2,-36(fp)
 80445e8:	10c00415 	stw	r3,16(r2)
                     jrstart += drop_len;
 80445ec:	e0fffe8b 	ldhu	r3,-6(fp)
 80445f0:	e0bff88b 	ldhu	r2,-30(fp)
 80445f4:	1885883a 	add	r2,r3,r2
 80445f8:	e0bffe8d 	sth	r2,-6(fp)
                     jrend = jrstart + p->nb_plen - 1;
 80445fc:	e0bff717 	ldw	r2,-36(fp)
 8044600:	10800417 	ldw	r2,16(r2)
 8044604:	1007883a 	mov	r3,r2
 8044608:	e0bffe8b 	ldhu	r2,-6(fp)
 804460c:	10c5883a 	add	r2,r2,r3
 8044610:	10bfffc4 	addi	r2,r2,-1
 8044614:	e0bffe0d 	sth	r2,-8(fp)
 8044618:	00009b06 	br	8044888 <ip_reasm_compute_overlap+0x4dc>
               else
                  {
                  /* currend is greater than or equal to jrend (cases E1 and E2).
                   * The current fragment is a superset of the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 804461c:	01000084 	movi	r4,2
 8044620:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
                  pk_free (p);
 8044624:	e13ff717 	ldw	r4,-36(fp)
 8044628:	802f9440 	call	802f944 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 804462c:	01000084 	movi	r4,2
 8044630:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 8044634:	0005883a 	mov	r2,zero
 8044638:	0000ac06 	br	80448ec <ip_reasm_compute_overlap+0x540>
                  }
               }
            else if (currstart > jrstart)
 804463c:	e0bff98b 	ldhu	r2,-26(fp)
 8044640:	e0fffe8b 	ldhu	r3,-6(fp)
 8044644:	18804d2e 	bgeu	r3,r2,804477c <ip_reasm_compute_overlap+0x3d0>
               {
               if (currend > jrend) /* cases B1 and B2 */
 8044648:	e0bff90b 	ldhu	r2,-28(fp)
 804464c:	e0fffe0b 	ldhu	r3,-8(fp)
 8044650:	1880112e 	bgeu	r3,r2,8044698 <ip_reasm_compute_overlap+0x2ec>
                  {
                  if (currstart > jrend) /* B1 */
 8044654:	e0bff98b 	ldhu	r2,-26(fp)
 8044658:	e0fffe0b 	ldhu	r3,-8(fp)
 804465c:	18808a36 	bltu	r3,r2,8044888 <ip_reasm_compute_overlap+0x4dc>
                     {
                     /* just received fragment partially overlaps current 
                      * fragment on the latter's left; decrement length of 
                      * just received fragment.  Move on to the next fragment 
                      * in the RFQ. */
                     p->nb_plen = currstart - jrstart;
 8044660:	e0fff98b 	ldhu	r3,-26(fp)
 8044664:	e0bffe8b 	ldhu	r2,-6(fp)
 8044668:	1885c83a 	sub	r2,r3,r2
 804466c:	1007883a 	mov	r3,r2
 8044670:	e0bff717 	ldw	r2,-36(fp)
 8044674:	10c00415 	stw	r3,16(r2)
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
 8044678:	e0bff717 	ldw	r2,-36(fp)
 804467c:	10800417 	ldw	r2,16(r2)
 8044680:	1007883a 	mov	r3,r2
 8044684:	e0bffe8b 	ldhu	r2,-6(fp)
 8044688:	10c5883a 	add	r2,r2,r3
 804468c:	10bfffc4 	addi	r2,r2,-1
 8044690:	e0bffe0d 	sth	r2,-8(fp)
 8044694:	00007c06 	br	8044888 <ip_reasm_compute_overlap+0x4dc>
                     }
                  }
               else if (currend == jrend) /* F1 */
 8044698:	e0fff90b 	ldhu	r3,-28(fp)
 804469c:	e0bffe0b 	ldhu	r2,-8(fp)
 80446a0:	18800e1e 	bne	r3,r2,80446dc <ip_reasm_compute_overlap+0x330>
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
 80446a4:	e0fff98b 	ldhu	r3,-26(fp)
 80446a8:	e0bffe8b 	ldhu	r2,-6(fp)
 80446ac:	1885c83a 	sub	r2,r3,r2
 80446b0:	1007883a 	mov	r3,r2
 80446b4:	e0bff717 	ldw	r2,-36(fp)
 80446b8:	10c00415 	stw	r3,16(r2)
                  jrend = jrstart + p->nb_plen - 1;
 80446bc:	e0bff717 	ldw	r2,-36(fp)
 80446c0:	10800417 	ldw	r2,16(r2)
 80446c4:	1007883a 	mov	r3,r2
 80446c8:	e0bffe8b 	ldhu	r2,-6(fp)
 80446cc:	10c5883a 	add	r2,r2,r3
 80446d0:	10bfffc4 	addi	r2,r2,-1
 80446d4:	e0bffe0d 	sth	r2,-8(fp)
 80446d8:	00006b06 	br	8044888 <ip_reasm_compute_overlap+0x4dc>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
 80446dc:	e0bffa17 	ldw	r2,-24(fp)
 80446e0:	10800217 	ldw	r2,8(r2)
 80446e4:	10bfffcc 	andi	r2,r2,65535
 80446e8:	1009883a 	mov	r4,r2
 80446ec:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
 80446f0:	e0bff617 	ldw	r2,-40(fp)
 80446f4:	1080048b 	ldhu	r2,18(r2)
 80446f8:	e0fffa17 	ldw	r3,-24(fp)
 80446fc:	18c00417 	ldw	r3,16(r3)
 8044700:	10c5c83a 	sub	r2,r2,r3
 8044704:	1007883a 	mov	r3,r2
 8044708:	e0bff617 	ldw	r2,-40(fp)
 804470c:	10c0048d 	sth	r3,18(r2)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 8044710:	01000084 	movi	r4,2
 8044714:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
 8044718:	e13ffa17 	ldw	r4,-24(fp)
 804471c:	802f9440 	call	802f944 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044720:	01000084 	movi	r4,2
 8044724:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
 8044728:	e0bffd8b 	ldhu	r2,-10(fp)
 804472c:	e0ffff17 	ldw	r3,-4(fp)
 8044730:	10800044 	addi	r2,r2,1
 8044734:	100490ba 	slli	r2,r2,2
 8044738:	1885883a 	add	r2,r3,r2
 804473c:	10000015 	stw	zero,0(r2)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
 8044740:	e0bff517 	ldw	r2,-44(fp)
 8044744:	1080000b 	ldhu	r2,0(r2)
 8044748:	10bfffcc 	andi	r2,r2,65535
 804474c:	10800418 	cmpnei	r2,r2,16
 8044750:	1000061e 	bne	r2,zero,804476c <ip_reasm_compute_overlap+0x3c0>
                     {
                     *indexp = i;
 8044754:	e0bff517 	ldw	r2,-44(fp)
 8044758:	e0fffd8b 	ldhu	r3,-10(fp)
 804475c:	10c0000d 	sth	r3,0(r2)
                     *last_rfqpp = rfqp;
 8044760:	e0bff417 	ldw	r2,-48(fp)
 8044764:	e0ffff17 	ldw	r3,-4(fp)
 8044768:	10c00015 	stw	r3,0(r2)
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
 804476c:	e0800317 	ldw	r2,12(fp)
 8044770:	00c00044 	movi	r3,1
 8044774:	10c00005 	stb	r3,0(r2)
 8044778:	00004306 	br	8044888 <ip_reasm_compute_overlap+0x4dc>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
 804477c:	e0fff90b 	ldhu	r3,-28(fp)
 8044780:	e0bffe0b 	ldhu	r2,-8(fp)
 8044784:	1880081e 	bne	r3,r2,80447a8 <ip_reasm_compute_overlap+0x3fc>
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 8044788:	01000084 	movi	r4,2
 804478c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
                  pk_free (p);
 8044790:	e13ff717 	ldw	r4,-36(fp)
 8044794:	802f9440 	call	802f944 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044798:	01000084 	movi	r4,2
 804479c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 80447a0:	0005883a 	mov	r2,zero
 80447a4:	00005106 	br	80448ec <ip_reasm_compute_overlap+0x540>
                  }
               else if (currend > jrend) /* case D1 */
 80447a8:	e0bff90b 	ldhu	r2,-28(fp)
 80447ac:	e0fffe0b 	ldhu	r3,-8(fp)
 80447b0:	1880082e 	bgeu	r3,r2,80447d4 <ip_reasm_compute_overlap+0x428>
                  {
                  /* current fragment is a superset of just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 80447b4:	01000084 	movi	r4,2
 80447b8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
                  pk_free (p);
 80447bc:	e13ff717 	ldw	r4,-36(fp)
 80447c0:	802f9440 	call	802f944 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 80447c4:	01000084 	movi	r4,2
 80447c8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 80447cc:	0005883a 	mov	r2,zero
 80447d0:	00004606 	br	80448ec <ip_reasm_compute_overlap+0x540>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
 80447d4:	e0fff90b 	ldhu	r3,-28(fp)
 80447d8:	e0bffe8b 	ldhu	r2,-6(fp)
 80447dc:	1885c83a 	sub	r2,r3,r2
 80447e0:	10800044 	addi	r2,r2,1
 80447e4:	e0bff88d 	sth	r2,-30(fp)
                  p->nb_prot += drop_len;
 80447e8:	e0bff717 	ldw	r2,-36(fp)
 80447ec:	10c00317 	ldw	r3,12(r2)
 80447f0:	e0bff88b 	ldhu	r2,-30(fp)
 80447f4:	1887883a 	add	r3,r3,r2
 80447f8:	e0bff717 	ldw	r2,-36(fp)
 80447fc:	10c00315 	stw	r3,12(r2)
                  p->nb_plen -= drop_len;
 8044800:	e0bff717 	ldw	r2,-36(fp)
 8044804:	10c00417 	ldw	r3,16(r2)
 8044808:	e0bff88b 	ldhu	r2,-30(fp)
 804480c:	1887c83a 	sub	r3,r3,r2
 8044810:	e0bff717 	ldw	r2,-36(fp)
 8044814:	10c00415 	stw	r3,16(r2)
                  jrstart += drop_len;
 8044818:	e0fffe8b 	ldhu	r3,-6(fp)
 804481c:	e0bff88b 	ldhu	r2,-30(fp)
 8044820:	1885883a 	add	r2,r3,r2
 8044824:	e0bffe8d 	sth	r2,-6(fp)
                  jrend = jrstart + p->nb_plen - 1;
 8044828:	e0bff717 	ldw	r2,-36(fp)
 804482c:	10800417 	ldw	r2,16(r2)
 8044830:	1007883a 	mov	r3,r2
 8044834:	e0bffe8b 	ldhu	r2,-6(fp)
 8044838:	10c5883a 	add	r2,r2,r3
 804483c:	10bfffc4 	addi	r2,r2,-1
 8044840:	e0bffe0d 	sth	r2,-8(fp)
 8044844:	00001006 	br	8044888 <ip_reasm_compute_overlap+0x4dc>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
 8044848:	e0bff517 	ldw	r2,-44(fp)
 804484c:	1080000b 	ldhu	r2,0(r2)
 8044850:	10bfffcc 	andi	r2,r2,65535
 8044854:	10800418 	cmpnei	r2,r2,16
 8044858:	1000061e 	bne	r2,zero,8044874 <ip_reasm_compute_overlap+0x4c8>
               {
               *indexp = i;
 804485c:	e0bff517 	ldw	r2,-44(fp)
 8044860:	e0fffd8b 	ldhu	r3,-10(fp)
 8044864:	10c0000d 	sth	r3,0(r2)
               *last_rfqpp = rfqp;               
 8044868:	e0bff417 	ldw	r2,-48(fp)
 804486c:	e0ffff17 	ldw	r3,-4(fp)
 8044870:	10c00015 	stw	r3,0(r2)
               }
            if (irep->flags & IPR_RFQ_COMPACT)
 8044874:	e0bff617 	ldw	r2,-40(fp)
 8044878:	10802103 	ldbu	r2,132(r2)
 804487c:	10803fcc 	andi	r2,r2,255
 8044880:	1080004c 	andi	r2,r2,1
 8044884:	1000071e 	bne	r2,zero,80448a4 <ip_reasm_compute_overlap+0x4f8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8044888:	e0bffd8b 	ldhu	r2,-10(fp)
 804488c:	10800044 	addi	r2,r2,1
 8044890:	e0bffd8d 	sth	r2,-10(fp)
 8044894:	e0bffd8b 	ldhu	r2,-10(fp)
 8044898:	10800430 	cmpltui	r2,r2,16
 804489c:	103f221e 	bne	r2,zero,8044528 <ip_reasm_compute_overlap+0x17c>
 80448a0:	00000106 	br	80448a8 <ip_reasm_compute_overlap+0x4fc>
               {
               break;
 80448a4:	0001883a 	nop
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
 80448a8:	e0bff517 	ldw	r2,-44(fp)
 80448ac:	1080000b 	ldhu	r2,0(r2)
 80448b0:	10bfffcc 	andi	r2,r2,65535
 80448b4:	10800418 	cmpnei	r2,r2,16
 80448b8:	1000031e 	bne	r2,zero,80448c8 <ip_reasm_compute_overlap+0x51c>
         {
         *last_rfqpp = rfqp;
 80448bc:	e0bff417 	ldw	r2,-48(fp)
 80448c0:	e0ffff17 	ldw	r3,-4(fp)
 80448c4:	10c00015 	stw	r3,0(r2)
         }
      rfqp = rfqp->next;
 80448c8:	e0bfff17 	ldw	r2,-4(fp)
 80448cc:	10800017 	ldw	r2,0(r2)
 80448d0:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 80448d4:	e0bfff17 	ldw	r2,-4(fp)
 80448d8:	103f111e 	bne	r2,zero,8044520 <ip_reasm_compute_overlap+0x174>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
 80448dc:	e0800217 	ldw	r2,8(fp)
 80448e0:	e0fffe8b 	ldhu	r3,-6(fp)
 80448e4:	10c0000d 	sth	r3,0(r2)

   return IPREASM_ACCEPT_FRAG;
 80448e8:	00800084 	movi	r2,2
}
 80448ec:	e037883a 	mov	sp,fp
 80448f0:	dfc00117 	ldw	ra,4(sp)
 80448f4:	df000017 	ldw	fp,0(sp)
 80448f8:	dec00204 	addi	sp,sp,8
 80448fc:	f800283a 	ret

08044900 <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
 8044900:	defff104 	addi	sp,sp,-60
 8044904:	dfc00e15 	stw	ra,56(sp)
 8044908:	df000d15 	stw	fp,52(sp)
 804490c:	df000d04 	addi	fp,sp,52
 8044910:	e13ff615 	stw	r4,-40(fp)
 8044914:	e17ff515 	stw	r5,-44(fp)
   PACKET reassy_pkt;
   struct ip * pip;
   RFQP new_rfqp = 0;
 8044918:	e03fff15 	stw	zero,-4(fp)
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 804491c:	e13ff517 	ldw	r4,-44(fp)
 8044920:	8044e000 	call	8044e00 <ip_reasm_find_ire>
 8044924:	10803fcc 	andi	r2,r2,255
 8044928:	10800060 	cmpeqi	r2,r2,1
 804492c:	1000121e 	bne	r2,zero,8044978 <ip_reasm_process_subsequent_fragments+0x78>
      {
      ++ire_stats.bad_irep;
 8044930:	008201b4 	movhi	r2,2054
 8044934:	10802817 	ldw	r2,160(r2)
 8044938:	10c00044 	addi	r3,r2,1
 804493c:	008201b4 	movhi	r2,2054
 8044940:	10c02815 	stw	r3,160(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8044944:	01000084 	movi	r4,2
 8044948:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free (p);
 804494c:	e13ff617 	ldw	r4,-40(fp)
 8044950:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044954:	01000084 	movi	r4,2
 8044958:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 804495c:	008201b4 	movhi	r2,2054
 8044960:	10802317 	ldw	r2,140(r2)
 8044964:	10c00044 	addi	r3,r2,1
 8044968:	008201b4 	movhi	r2,2054
 804496c:	10c02315 	stw	r3,140(r2)
      return ENP_PARAM;
 8044970:	00bffd84 	movi	r2,-10
 8044974:	00011d06 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
      }

   pip = ip_head(p);
 8044978:	e0bff617 	ldw	r2,-40(fp)
 804497c:	10800317 	ldw	r2,12(r2)
 8044980:	e0bffe15 	stw	r2,-8(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 8044984:	e13ffe17 	ldw	r4,-8(fp)
 8044988:	8043e100 	call	8043e10 <ip_reasm_determine_type_of_frag>
 804498c:	e0bffd15 	stw	r2,-12(fp)
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
 8044990:	e0bffd17 	ldw	r2,-12(fp)
 8044994:	10800158 	cmpnei	r2,r2,5
 8044998:	1000241e 	bne	r2,zero,8044a2c <ip_reasm_process_subsequent_fragments+0x12c>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
 804499c:	e0bffe17 	ldw	r2,-8(fp)
 80449a0:	1080018b 	ldhu	r2,6(r2)
 80449a4:	10bfffcc 	andi	r2,r2,65535
 80449a8:	1004d23a 	srli	r2,r2,8
 80449ac:	10bfffcc 	andi	r2,r2,65535
 80449b0:	10c03fcc 	andi	r3,r2,255
 80449b4:	e0bffe17 	ldw	r2,-8(fp)
 80449b8:	1080018b 	ldhu	r2,6(r2)
 80449bc:	10bfffcc 	andi	r2,r2,65535
 80449c0:	1004923a 	slli	r2,r2,8
 80449c4:	10bfffcc 	andi	r2,r2,65535
 80449c8:	1884b03a 	or	r2,r3,r2
 80449cc:	100490fa 	slli	r2,r2,3
 80449d0:	1007883a 	mov	r3,r2
 80449d4:	e0bffe17 	ldw	r2,-8(fp)
 80449d8:	1080008b 	ldhu	r2,2(r2)
 80449dc:	10bfffcc 	andi	r2,r2,65535
 80449e0:	1004d23a 	srli	r2,r2,8
 80449e4:	1009883a 	mov	r4,r2
 80449e8:	e0bffe17 	ldw	r2,-8(fp)
 80449ec:	1080008b 	ldhu	r2,2(r2)
 80449f0:	10bfffcc 	andi	r2,r2,65535
 80449f4:	1004923a 	slli	r2,r2,8
 80449f8:	2084b03a 	or	r2,r4,r2
 80449fc:	1009883a 	mov	r4,r2
 8044a00:	e0bffe17 	ldw	r2,-8(fp)
 8044a04:	10800003 	ldbu	r2,0(r2)
 8044a08:	10803fcc 	andi	r2,r2,255
 8044a0c:	100490ba 	slli	r2,r2,2
 8044a10:	10800f0c 	andi	r2,r2,60
 8044a14:	2085c83a 	sub	r2,r4,r2
 8044a18:	1885883a 	add	r2,r3,r2
 8044a1c:	1007883a 	mov	r3,r2
 8044a20:	e0bff517 	ldw	r2,-44(fp)
 8044a24:	10c0040d 	sth	r3,16(r2)
 8044a28:	00000a06 	br	8044a54 <ip_reasm_process_subsequent_fragments+0x154>
      }
   else if (ftype == IP_FF)
 8044a2c:	e0bffd17 	ldw	r2,-12(fp)
 8044a30:	10800058 	cmpnei	r2,r2,1
 8044a34:	1000071e 	bne	r2,zero,8044a54 <ip_reasm_process_subsequent_fragments+0x154>
      {
      irep->l2_hdr = p->nb_buff;
 8044a38:	e0bff617 	ldw	r2,-40(fp)
 8044a3c:	10c00117 	ldw	r3,4(r2)
 8044a40:	e0bff517 	ldw	r2,-44(fp)
 8044a44:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 8044a48:	e0bff517 	ldw	r2,-44(fp)
 8044a4c:	e0fffe17 	ldw	r3,-8(fp)
 8044a50:	10c02015 	stw	r3,128(r2)
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
 8044a54:	e13ff804 	addi	r4,fp,-32
 8044a58:	e0fff984 	addi	r3,fp,-26
 8044a5c:	e0bff744 	addi	r2,fp,-35
 8044a60:	d8800115 	stw	r2,4(sp)
 8044a64:	e0bff784 	addi	r2,fp,-34
 8044a68:	d8800015 	stw	r2,0(sp)
 8044a6c:	200f883a 	mov	r7,r4
 8044a70:	180d883a 	mov	r6,r3
 8044a74:	e17ff517 	ldw	r5,-44(fp)
 8044a78:	e13ff617 	ldw	r4,-40(fp)
 8044a7c:	80443ac0 	call	80443ac <ip_reasm_compute_overlap>
 8044a80:	e0bffc15 	stw	r2,-16(fp)
 8044a84:	e0bffc17 	ldw	r2,-16(fp)
 8044a88:	108000a0 	cmpeqi	r2,r2,2
 8044a8c:	1000111e 	bne	r2,zero,8044ad4 <ip_reasm_process_subsequent_fragments+0x1d4>
      {
      switch (rc2)
 8044a90:	e0bffc17 	ldw	r2,-16(fp)
 8044a94:	108000a0 	cmpeqi	r2,r2,2
 8044a98:	10000d1e 	bne	r2,zero,8044ad0 <ip_reasm_process_subsequent_fragments+0x1d0>
 8044a9c:	e0bffc17 	ldw	r2,-16(fp)
 8044aa0:	108000e8 	cmpgeui	r2,r2,3
 8044aa4:	10000b1e 	bne	r2,zero,8044ad4 <ip_reasm_process_subsequent_fragments+0x1d4>
 8044aa8:	e0bffc17 	ldw	r2,-16(fp)
 8044aac:	10000426 	beq	r2,zero,8044ac0 <ip_reasm_process_subsequent_fragments+0x1c0>
 8044ab0:	e0bffc17 	ldw	r2,-16(fp)
 8044ab4:	10800060 	cmpeqi	r2,r2,1
 8044ab8:	1000031e 	bne	r2,zero,8044ac8 <ip_reasm_process_subsequent_fragments+0x1c8>
 8044abc:	00000506 	br	8044ad4 <ip_reasm_process_subsequent_fragments+0x1d4>
         {
         case IPREASM_DROP_FRAG_DUPLICATE:
            /* this isn't really an error, since it indicates that the received 
             * fragment's information is a duplicate of what is present in the 
             * already queued fragments */
            return IPREASM_OK;
 8044ac0:	0005883a 	mov	r2,zero
 8044ac4:	0000c906 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
         case IPREASM_DROP_FRAG_BAD_PARAM:
            /* this is a real error */
            return ENP_PARAM;
 8044ac8:	00bffd84 	movi	r2,-10
 8044acc:	0000c706 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
          * Altera Niche Stack Nios port modification:
          * Handle IPREASM_ACCEPT_FRAG case (will never
          * get here per if() above) to remove build warning.
          */
         case IPREASM_ACCEPT_FRAG:
            while(0);
 8044ad0:	0001883a 	nop
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
 8044ad4:	e0bff617 	ldw	r2,-40(fp)
 8044ad8:	10800217 	ldw	r2,8(r2)
 8044adc:	10bfffcc 	andi	r2,r2,65535
 8044ae0:	1009883a 	mov	r4,r2
 8044ae4:	8043ee00 	call	8043ee0 <ip_reasm_check_mem_useage>
 8044ae8:	e0bffb15 	stw	r2,-20(fp)
 8044aec:	e0bffb17 	ldw	r2,-20(fp)
 8044af0:	10000f26 	beq	r2,zero,8044b30 <ip_reasm_process_subsequent_fragments+0x230>
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8044af4:	01000084 	movi	r4,2
 8044af8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free (p);
 8044afc:	e13ff617 	ldw	r4,-40(fp)
 8044b00:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044b04:	01000084 	movi	r4,2
 8044b08:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
 8044b0c:	e13ff517 	ldw	r4,-44(fp)
 8044b10:	804525c0 	call	804525c <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
 8044b14:	008201b4 	movhi	r2,2054
 8044b18:	10802317 	ldw	r2,140(r2)
 8044b1c:	10c00044 	addi	r3,r2,1
 8044b20:	008201b4 	movhi	r2,2054
 8044b24:	10c02315 	stw	r3,140(r2)
      return rc;
 8044b28:	e0bffb17 	ldw	r2,-20(fp)
 8044b2c:	0000af06 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
 8044b30:	e0bff98b 	ldhu	r2,-26(fp)
 8044b34:	10bfffcc 	andi	r2,r2,65535
 8044b38:	10800420 	cmpeqi	r2,r2,16
 8044b3c:	1000111e 	bne	r2,zero,8044b84 <ip_reasm_process_subsequent_fragments+0x284>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 8044b40:	e0fff817 	ldw	r3,-32(fp)
 8044b44:	e0bff98b 	ldhu	r2,-26(fp)
 8044b48:	10bfffcc 	andi	r2,r2,65535
 8044b4c:	10800044 	addi	r2,r2,1
 8044b50:	100490ba 	slli	r2,r2,2
 8044b54:	1885883a 	add	r2,r3,r2
 8044b58:	e0fff617 	ldw	r3,-40(fp)
 8044b5c:	10c00015 	stw	r3,0(r2)
      rfqp->frag_offset[index] = frag_offset;
 8044b60:	e13ff817 	ldw	r4,-32(fp)
 8044b64:	e0bff98b 	ldhu	r2,-26(fp)
 8044b68:	10bfffcc 	andi	r2,r2,65535
 8044b6c:	e0fff78b 	ldhu	r3,-34(fp)
 8044b70:	10800884 	addi	r2,r2,34
 8044b74:	1085883a 	add	r2,r2,r2
 8044b78:	2085883a 	add	r2,r4,r2
 8044b7c:	10c0000d 	sth	r3,0(r2)
 8044b80:	00003506 	br	8044c58 <ip_reasm_process_subsequent_fragments+0x358>
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
 8044b84:	e0bff617 	ldw	r2,-40(fp)
 8044b88:	10800217 	ldw	r2,8(r2)
 8044b8c:	10801904 	addi	r2,r2,100
 8044b90:	10bfffcc 	andi	r2,r2,65535
 8044b94:	1009883a 	mov	r4,r2
 8044b98:	8043ee00 	call	8043ee0 <ip_reasm_check_mem_useage>
 8044b9c:	e0bffb15 	stw	r2,-20(fp)
 8044ba0:	e0bffb17 	ldw	r2,-20(fp)
 8044ba4:	10000f26 	beq	r2,zero,8044be4 <ip_reasm_process_subsequent_fragments+0x2e4>
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8044ba8:	01000084 	movi	r4,2
 8044bac:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free (p);
 8044bb0:	e13ff617 	ldw	r4,-40(fp)
 8044bb4:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044bb8:	01000084 	movi	r4,2
 8044bbc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 8044bc0:	e13ff517 	ldw	r4,-44(fp)
 8044bc4:	804525c0 	call	804525c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 8044bc8:	008201b4 	movhi	r2,2054
 8044bcc:	10802317 	ldw	r2,140(r2)
 8044bd0:	10c00044 	addi	r3,r2,1
 8044bd4:	008201b4 	movhi	r2,2054
 8044bd8:	10c02315 	stw	r3,140(r2)
         return rc;
 8044bdc:	e0bffb17 	ldw	r2,-20(fp)
 8044be0:	00008206 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
 8044be4:	01001904 	movi	r4,100
 8044be8:	8030d080 	call	8030d08 <npalloc>
 8044bec:	e0bfff15 	stw	r2,-4(fp)
      if (new_rfqp == 0)
 8044bf0:	e0bfff17 	ldw	r2,-4(fp)
 8044bf4:	10000f1e 	bne	r2,zero,8044c34 <ip_reasm_process_subsequent_fragments+0x334>
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8044bf8:	01000084 	movi	r4,2
 8044bfc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free (p);
 8044c00:	e13ff617 	ldw	r4,-40(fp)
 8044c04:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044c08:	01000084 	movi	r4,2
 8044c0c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 8044c10:	e13ff517 	ldw	r4,-44(fp)
 8044c14:	804525c0 	call	804525c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 8044c18:	008201b4 	movhi	r2,2054
 8044c1c:	10802317 	ldw	r2,140(r2)
 8044c20:	10c00044 	addi	r3,r2,1
 8044c24:	008201b4 	movhi	r2,2054
 8044c28:	10c02315 	stw	r3,140(r2)
         return ENP_RESOURCE;
 8044c2c:	00bffa84 	movi	r2,-22
 8044c30:	00006e06 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
         }
      else
         {
         new_rfqp->bufp[0] = p;
 8044c34:	e0bfff17 	ldw	r2,-4(fp)
 8044c38:	e0fff617 	ldw	r3,-40(fp)
 8044c3c:	10c00115 	stw	r3,4(r2)
         new_rfqp->frag_offset[0] = frag_offset;
 8044c40:	e0fff78b 	ldhu	r3,-34(fp)
 8044c44:	e0bfff17 	ldw	r2,-4(fp)
 8044c48:	10c0110d 	sth	r3,68(r2)
         rfqp->next = new_rfqp;
 8044c4c:	e0bff817 	ldw	r2,-32(fp)
 8044c50:	e0ffff17 	ldw	r3,-4(fp)
 8044c54:	10c00015 	stw	r3,0(r2)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
 8044c58:	e0bff743 	ldbu	r2,-35(fp)
 8044c5c:	10803fcc 	andi	r2,r2,255
 8044c60:	10001226 	beq	r2,zero,8044cac <ip_reasm_process_subsequent_fragments+0x3ac>
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
 8044c64:	e13ff517 	ldw	r4,-44(fp)
 8044c68:	80454040 	call	8045404 <ip_reasm_mark_compact_rfq>
 8044c6c:	e0bffb15 	stw	r2,-20(fp)
 8044c70:	e0bffb17 	ldw	r2,-20(fp)
 8044c74:	10000d26 	beq	r2,zero,8044cac <ip_reasm_process_subsequent_fragments+0x3ac>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
 8044c78:	01000084 	movi	r4,2
 8044c7c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free (p);
 8044c80:	e13ff617 	ldw	r4,-40(fp)
 8044c84:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044c88:	01000084 	movi	r4,2
 8044c8c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
 8044c90:	008201b4 	movhi	r2,2054
 8044c94:	10802317 	ldw	r2,140(r2)
 8044c98:	10c00044 	addi	r3,r2,1
 8044c9c:	008201b4 	movhi	r2,2054
 8044ca0:	10c02315 	stw	r3,140(r2)
            return rc;
 8044ca4:	e0bffb17 	ldw	r2,-20(fp)
 8044ca8:	00005006 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
 8044cac:	e0bff517 	ldw	r2,-44(fp)
 8044cb0:	1080048b 	ldhu	r2,18(r2)
 8044cb4:	e0fff617 	ldw	r3,-40(fp)
 8044cb8:	18c00417 	ldw	r3,16(r3)
 8044cbc:	10c5883a 	add	r2,r2,r3
 8044cc0:	1007883a 	mov	r3,r2
 8044cc4:	e0bff517 	ldw	r2,-44(fp)
 8044cc8:	10c0048d 	sth	r3,18(r2)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 8044ccc:	e0bff617 	ldw	r2,-40(fp)
 8044cd0:	10800217 	ldw	r2,8(r2)
 8044cd4:	1007883a 	mov	r3,r2
 8044cd8:	e0bfff17 	ldw	r2,-4(fp)
 8044cdc:	1000021e 	bne	r2,zero,8044ce8 <ip_reasm_process_subsequent_fragments+0x3e8>
 8044ce0:	0005883a 	mov	r2,zero
 8044ce4:	00000106 	br	8044cec <ip_reasm_process_subsequent_fragments+0x3ec>
 8044ce8:	00801904 	movi	r2,100
 8044cec:	10c5883a 	add	r2,r2,r3
 8044cf0:	10bfffcc 	andi	r2,r2,65535
 8044cf4:	1009883a 	mov	r4,r2
 8044cf8:	8043f640 	call	8043f64 <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
 8044cfc:	e0bff517 	ldw	r2,-44(fp)
 8044d00:	1080040b 	ldhu	r2,16(r2)
 8044d04:	10bfffcc 	andi	r2,r2,65535
 8044d08:	10003726 	beq	r2,zero,8044de8 <ip_reasm_process_subsequent_fragments+0x4e8>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
 8044d0c:	e0bff517 	ldw	r2,-44(fp)
 8044d10:	10c0048b 	ldhu	r3,18(r2)
 8044d14:	e0bff517 	ldw	r2,-44(fp)
 8044d18:	1080040b 	ldhu	r2,16(r2)
 8044d1c:	18ffffcc 	andi	r3,r3,65535
 8044d20:	10bfffcc 	andi	r2,r2,65535
 8044d24:	1880301e 	bne	r3,r2,8044de8 <ip_reasm_process_subsequent_fragments+0x4e8>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
 8044d28:	e0bff517 	ldw	r2,-44(fp)
 8044d2c:	10802017 	ldw	r2,128(r2)
 8044d30:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8044d34:	01000084 	movi	r4,2
 8044d38:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
 8044d3c:	e0bff517 	ldw	r2,-44(fp)
 8044d40:	1080040b 	ldhu	r2,16(r2)
 8044d44:	10ffffcc 	andi	r3,r2,65535
 8044d48:	e0bff517 	ldw	r2,-44(fp)
 8044d4c:	11002017 	ldw	r4,128(r2)
 8044d50:	e0bff517 	ldw	r2,-44(fp)
 8044d54:	10801f17 	ldw	r2,124(r2)
 8044d58:	2085c83a 	sub	r2,r4,r2
 8044d5c:	1887883a 	add	r3,r3,r2
 8044d60:	e0bffe17 	ldw	r2,-8(fp)
 8044d64:	10800003 	ldbu	r2,0(r2)
 8044d68:	10803fcc 	andi	r2,r2,255
 8044d6c:	100490ba 	slli	r2,r2,2
 8044d70:	10800f0c 	andi	r2,r2,60
 8044d74:	1885883a 	add	r2,r3,r2
 8044d78:	1009883a 	mov	r4,r2
 8044d7c:	802f6300 	call	802f630 <pk_alloc>
 8044d80:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044d84:	01000084 	movi	r4,2
 8044d88:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
 8044d8c:	e0bffa17 	ldw	r2,-24(fp)
 8044d90:	1000091e 	bne	r2,zero,8044db8 <ip_reasm_process_subsequent_fragments+0x4b8>
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
 8044d94:	e13ff517 	ldw	r4,-44(fp)
 8044d98:	804525c0 	call	804525c <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
 8044d9c:	008201b4 	movhi	r2,2054
 8044da0:	10802317 	ldw	r2,140(r2)
 8044da4:	10c00044 	addi	r3,r2,1
 8044da8:	008201b4 	movhi	r2,2054
 8044dac:	10c02315 	stw	r3,140(r2)
            return ENP_NOBUFFER;
 8044db0:	00bffac4 	movi	r2,-21
 8044db4:	00000d06 	br	8044dec <ip_reasm_process_subsequent_fragments+0x4ec>
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
 8044db8:	e17ff517 	ldw	r5,-44(fp)
 8044dbc:	e13ffa17 	ldw	r4,-24(fp)
 8044dc0:	8044e580 	call	8044e58 <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
 8044dc4:	e13ff517 	ldw	r4,-44(fp)
 8044dc8:	804525c0 	call	804525c <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
 8044dcc:	008201b4 	movhi	r2,2054
 8044dd0:	10802217 	ldw	r2,136(r2)
 8044dd4:	10c00044 	addi	r3,r2,1
 8044dd8:	008201b4 	movhi	r2,2054
 8044ddc:	10c02215 	stw	r3,136(r2)
            ip_demux (reassy_pkt);
 8044de0:	e13ffa17 	ldw	r4,-24(fp)
 8044de4:	80461940 	call	8046194 <ip_demux>
      {
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
 8044de8:	0005883a 	mov	r2,zero
}
 8044dec:	e037883a 	mov	sp,fp
 8044df0:	dfc00117 	ldw	ra,4(sp)
 8044df4:	df000017 	ldw	fp,0(sp)
 8044df8:	dec00204 	addi	sp,sp,8
 8044dfc:	f800283a 	ret

08044e00 <ip_reasm_find_ire>:
OUTPUT: This function returns a IPREASM_TRUE if the IRE exists in the master 
IRE list; otherwise, it returns a IPREASM_FALSE.
*/

u_char ip_reasm_find_ire (IREP irep)
{
 8044e00:	defffd04 	addi	sp,sp,-12
 8044e04:	df000215 	stw	fp,8(sp)
 8044e08:	df000204 	addi	fp,sp,8
 8044e0c:	e13ffe15 	stw	r4,-8(fp)
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8044e10:	d0a0c317 	ldw	r2,-31988(gp)
 8044e14:	e0bfff15 	stw	r2,-4(fp)
 8044e18:	00000806 	br	8044e3c <ip_reasm_find_ire+0x3c>
      {
      if (tmpp == irep) 
 8044e1c:	e0ffff17 	ldw	r3,-4(fp)
 8044e20:	e0bffe17 	ldw	r2,-8(fp)
 8044e24:	1880021e 	bne	r3,r2,8044e30 <ip_reasm_find_ire+0x30>
         {
         return IPREASM_TRUE;
 8044e28:	00800044 	movi	r2,1
 8044e2c:	00000606 	br	8044e48 <ip_reasm_find_ire+0x48>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8044e30:	e0bfff17 	ldw	r2,-4(fp)
 8044e34:	10800017 	ldw	r2,0(r2)
 8044e38:	e0bfff15 	stw	r2,-4(fp)
 8044e3c:	e0bfff17 	ldw	r2,-4(fp)
 8044e40:	103ff61e 	bne	r2,zero,8044e1c <ip_reasm_find_ire+0x1c>
         }
      }

   return IPREASM_FALSE;
 8044e44:	0005883a 	mov	r2,zero
}
 8044e48:	e037883a 	mov	sp,fp
 8044e4c:	df000017 	ldw	fp,0(sp)
 8044e50:	dec00104 	addi	sp,sp,4
 8044e54:	f800283a 	ret

08044e58 <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 8044e58:	defff504 	addi	sp,sp,-44
 8044e5c:	dfc00a15 	stw	ra,40(sp)
 8044e60:	df000915 	stw	fp,36(sp)
 8044e64:	df000904 	addi	fp,sp,36
 8044e68:	e13ff815 	stw	r4,-32(fp)
 8044e6c:	e17ff715 	stw	r5,-36(fp)
   RFQP rfqp;
   u_short i;
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;
 8044e70:	e03ffd15 	stw	zero,-12(fp)

   pip = (struct ip *) irep->l3_hdr;
 8044e74:	e0bff717 	ldw	r2,-36(fp)
 8044e78:	10802017 	ldw	r2,128(r2)
 8044e7c:	e0bffc15 	stw	r2,-16(fp)
   iphlen = ip_hlen (pip);
 8044e80:	e0bffc17 	ldw	r2,-16(fp)
 8044e84:	10800003 	ldbu	r2,0(r2)
 8044e88:	10803fcc 	andi	r2,r2,255
 8044e8c:	100490ba 	slli	r2,r2,2
 8044e90:	10800f0c 	andi	r2,r2,60
 8044e94:	e0bffbc5 	stb	r2,-17(fp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 8044e98:	e0bff717 	ldw	r2,-36(fp)
 8044e9c:	10c02017 	ldw	r3,128(r2)
 8044ea0:	e0bff717 	ldw	r2,-36(fp)
 8044ea4:	10801f17 	ldw	r2,124(r2)
 8044ea8:	1885c83a 	sub	r2,r3,r2
 8044eac:	1007883a 	mov	r3,r2
 8044eb0:	e0bffbc3 	ldbu	r2,-17(fp)
 8044eb4:	10c5883a 	add	r2,r2,r3
 8044eb8:	e0bffb85 	stb	r2,-18(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
 8044ebc:	e0bff817 	ldw	r2,-32(fp)
 8044ec0:	10c00117 	ldw	r3,4(r2)
 8044ec4:	e0bff717 	ldw	r2,-36(fp)
 8044ec8:	10801f17 	ldw	r2,124(r2)
 8044ecc:	e13ffb83 	ldbu	r4,-18(fp)
 8044ed0:	200d883a 	mov	r6,r4
 8044ed4:	100b883a 	mov	r5,r2
 8044ed8:	1809883a 	mov	r4,r3
 8044edc:	80037cc0 	call	80037cc <memcpy>

   rfqp = &(irep->rfq);
 8044ee0:	e0bff717 	ldw	r2,-36(fp)
 8044ee4:	10800604 	addi	r2,r2,24
 8044ee8:	e0bfff15 	stw	r2,-4(fp)
   writep = reassy_pkt->nb_buff + offset;
 8044eec:	e0bff817 	ldw	r2,-32(fp)
 8044ef0:	10c00117 	ldw	r3,4(r2)
 8044ef4:	e0bffb83 	ldbu	r2,-18(fp)
 8044ef8:	1885883a 	add	r2,r3,r2
 8044efc:	e0bffa15 	stw	r2,-24(fp)

   while (rfqp)
 8044f00:	00004306 	br	8045010 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1b8>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8044f04:	e03ffe8d 	sth	zero,-6(fp)
 8044f08:	00003906 	br	8044ff0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x198>
         {
         if ((p = rfqp->bufp [i]) != 0)
 8044f0c:	e0bffe8b 	ldhu	r2,-6(fp)
 8044f10:	e0ffff17 	ldw	r3,-4(fp)
 8044f14:	10800044 	addi	r2,r2,1
 8044f18:	100490ba 	slli	r2,r2,2
 8044f1c:	1885883a 	add	r2,r3,r2
 8044f20:	10800017 	ldw	r2,0(r2)
 8044f24:	e0bff915 	stw	r2,-28(fp)
 8044f28:	e0bff917 	ldw	r2,-28(fp)
 8044f2c:	10002826 	beq	r2,zero,8044fd0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x178>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
 8044f30:	e0bffe8b 	ldhu	r2,-6(fp)
 8044f34:	e0ffff17 	ldw	r3,-4(fp)
 8044f38:	10800884 	addi	r2,r2,34
 8044f3c:	1085883a 	add	r2,r2,r2
 8044f40:	1885883a 	add	r2,r3,r2
 8044f44:	1080000b 	ldhu	r2,0(r2)
 8044f48:	10bfffcc 	andi	r2,r2,65535
 8044f4c:	e0fffa17 	ldw	r3,-24(fp)
 8044f50:	1887883a 	add	r3,r3,r2
 8044f54:	e0bff917 	ldw	r2,-28(fp)
 8044f58:	11000317 	ldw	r4,12(r2)
 8044f5c:	e0bff917 	ldw	r2,-28(fp)
 8044f60:	10800417 	ldw	r2,16(r2)
 8044f64:	100d883a 	mov	r6,r2
 8044f68:	200b883a 	mov	r5,r4
 8044f6c:	1809883a 	mov	r4,r3
 8044f70:	80037cc0 	call	80037cc <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
 8044f74:	e0bffd17 	ldw	r2,-12(fp)
 8044f78:	1000031e 	bne	r2,zero,8044f88 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x130>
 8044f7c:	e0bff917 	ldw	r2,-28(fp)
 8044f80:	e0bffd15 	stw	r2,-12(fp)
 8044f84:	00000b06 	br	8044fb4 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x15c>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
 8044f88:	e0bff917 	ldw	r2,-28(fp)
 8044f8c:	10800217 	ldw	r2,8(r2)
 8044f90:	10bfffcc 	andi	r2,r2,65535
 8044f94:	1009883a 	mov	r4,r2
 8044f98:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
 8044f9c:	01000084 	movi	r4,2
 8044fa0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
               pk_free (p);
 8044fa4:	e13ff917 	ldw	r4,-28(fp)
 8044fa8:	802f9440 	call	802f944 <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8044fac:	01000084 	movi	r4,2
 8044fb0:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
 8044fb4:	e0bffe8b 	ldhu	r2,-6(fp)
 8044fb8:	e0ffff17 	ldw	r3,-4(fp)
 8044fbc:	10800044 	addi	r2,r2,1
 8044fc0:	100490ba 	slli	r2,r2,2
 8044fc4:	1885883a 	add	r2,r3,r2
 8044fc8:	10000015 	stw	zero,0(r2)
 8044fcc:	00000506 	br	8044fe4 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x18c>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 8044fd0:	e0bff717 	ldw	r2,-36(fp)
 8044fd4:	10802103 	ldbu	r2,132(r2)
 8044fd8:	10803fcc 	andi	r2,r2,255
 8044fdc:	1080004c 	andi	r2,r2,1
 8044fe0:	1000071e 	bne	r2,zero,8045000 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1a8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8044fe4:	e0bffe8b 	ldhu	r2,-6(fp)
 8044fe8:	10800044 	addi	r2,r2,1
 8044fec:	e0bffe8d 	sth	r2,-6(fp)
 8044ff0:	e0bffe8b 	ldhu	r2,-6(fp)
 8044ff4:	10800430 	cmpltui	r2,r2,16
 8044ff8:	103fc41e 	bne	r2,zero,8044f0c <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xb4>
 8044ffc:	00000106 	br	8045004 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1ac>
               {
               break;
 8045000:	0001883a 	nop
               }
            }
          }

      rfqp = rfqp->next;
 8045004:	e0bfff17 	ldw	r2,-4(fp)
 8045008:	10800017 	ldw	r2,0(r2)
 804500c:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 8045010:	e0bfff17 	ldw	r2,-4(fp)
 8045014:	103fbb1e 	bne	r2,zero,8044f04 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xac>
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 8045018:	e0bff817 	ldw	r2,-32(fp)
 804501c:	10800117 	ldw	r2,4(r2)
 8045020:	e0fff717 	ldw	r3,-36(fp)
 8045024:	19002017 	ldw	r4,128(r3)
 8045028:	e0fff717 	ldw	r3,-36(fp)
 804502c:	18c01f17 	ldw	r3,124(r3)
 8045030:	20c7c83a 	sub	r3,r4,r3
 8045034:	10c7883a 	add	r3,r2,r3
 8045038:	e0bff817 	ldw	r2,-32(fp)
 804503c:	10c00315 	stw	r3,12(r2)
   reassy_pkt->nb_plen = irep->length + iphlen;
 8045040:	e0bff717 	ldw	r2,-36(fp)
 8045044:	1080040b 	ldhu	r2,16(r2)
 8045048:	10ffffcc 	andi	r3,r2,65535
 804504c:	e0bffbc3 	ldbu	r2,-17(fp)
 8045050:	1885883a 	add	r2,r3,r2
 8045054:	1007883a 	mov	r3,r2
 8045058:	e0bff817 	ldw	r2,-32(fp)
 804505c:	10c00415 	stw	r3,16(r2)
   reassy_pkt->nb_tstamp = cticks;
 8045060:	d0a0a317 	ldw	r2,-32116(gp)
 8045064:	1007883a 	mov	r3,r2
 8045068:	e0bff817 	ldw	r2,-32(fp)
 804506c:	10c00515 	stw	r3,20(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 8045070:	e0bff817 	ldw	r2,-32(fp)
 8045074:	10c00a17 	ldw	r3,40(r2)
 8045078:	e0bffd17 	ldw	r2,-12(fp)
 804507c:	10800a17 	ldw	r2,40(r2)
 8045080:	108000cc 	andi	r2,r2,3
 8045084:	1886b03a 	or	r3,r3,r2
 8045088:	e0bff817 	ldw	r2,-32(fp)
 804508c:	10c00a15 	stw	r3,40(r2)
   reassy_pkt->net = sav_pkt->net;
 8045090:	e0bffd17 	ldw	r2,-12(fp)
 8045094:	10c00617 	ldw	r3,24(r2)
 8045098:	e0bff817 	ldw	r2,-32(fp)
 804509c:	10c00615 	stw	r3,24(r2)
   reassy_pkt->type = sav_pkt->type;
 80450a0:	e0bffd17 	ldw	r2,-12(fp)
 80450a4:	10c0080b 	ldhu	r3,32(r2)
 80450a8:	e0bff817 	ldw	r2,-32(fp)
 80450ac:	10c0080d 	sth	r3,32(r2)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
 80450b0:	e0bffd17 	ldw	r2,-12(fp)
 80450b4:	10800217 	ldw	r2,8(r2)
 80450b8:	10bfffcc 	andi	r2,r2,65535
 80450bc:	1009883a 	mov	r4,r2
 80450c0:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
 80450c4:	01000084 	movi	r4,2
 80450c8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
 80450cc:	e13ffd17 	ldw	r4,-12(fp)
 80450d0:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 80450d4:	01000084 	movi	r4,2
 80450d8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
 80450dc:	e0bff817 	ldw	r2,-32(fp)
 80450e0:	10800317 	ldw	r2,12(r2)
 80450e4:	e0bffc15 	stw	r2,-16(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
 80450e8:	e0bff817 	ldw	r2,-32(fp)
 80450ec:	10800417 	ldw	r2,16(r2)
 80450f0:	1004d23a 	srli	r2,r2,8
 80450f4:	10803fcc 	andi	r2,r2,255
 80450f8:	1007883a 	mov	r3,r2
 80450fc:	e0bff817 	ldw	r2,-32(fp)
 8045100:	10800417 	ldw	r2,16(r2)
 8045104:	1004923a 	slli	r2,r2,8
 8045108:	1884b03a 	or	r2,r3,r2
 804510c:	1007883a 	mov	r3,r2
 8045110:	e0bffc17 	ldw	r2,-16(fp)
 8045114:	10c0008d 	sth	r3,2(r2)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
 8045118:	e0bffc17 	ldw	r2,-16(fp)
 804511c:	10c0018b 	ldhu	r3,6(r2)
 8045120:	00bff7c4 	movi	r2,-33
 8045124:	1884703a 	and	r2,r3,r2
 8045128:	1007883a 	mov	r3,r2
 804512c:	e0bffc17 	ldw	r2,-16(fp)
 8045130:	10c0018d 	sth	r3,6(r2)
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 8045134:	e0bffc17 	ldw	r2,-16(fp)
 8045138:	1080018b 	ldhu	r2,6(r2)
 804513c:	1080380c 	andi	r2,r2,224
 8045140:	1007883a 	mov	r3,r2
 8045144:	e0bffc17 	ldw	r2,-16(fp)
 8045148:	10c0018d 	sth	r3,6(r2)
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
 804514c:	e0bffc17 	ldw	r2,-16(fp)
 8045150:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 8045154:	e0bffbc3 	ldbu	r2,-17(fp)
 8045158:	1004d07a 	srli	r2,r2,1
 804515c:	10803fcc 	andi	r2,r2,255
 8045160:	100b883a 	mov	r5,r2
 8045164:	e13ffc17 	ldw	r4,-16(fp)
 8045168:	802b98c0 	call	802b98c <cksum>
 804516c:	0084303a 	nor	r2,zero,r2
 8045170:	1007883a 	mov	r3,r2
 8045174:	e0bffc17 	ldw	r2,-16(fp)
 8045178:	10c0028d 	sth	r3,10(r2)

   return IPREASM_OK;
 804517c:	0005883a 	mov	r2,zero
}
 8045180:	e037883a 	mov	sp,fp
 8045184:	dfc00117 	ldw	ra,4(sp)
 8045188:	df000017 	ldw	fp,0(sp)
 804518c:	dec00204 	addi	sp,sp,8
 8045190:	f800283a 	ret

08045194 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
 8045194:	defffc04 	addi	sp,sp,-16
 8045198:	dfc00315 	stw	ra,12(sp)
 804519c:	df000215 	stw	fp,8(sp)
 80451a0:	df000204 	addi	fp,sp,8
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 80451a4:	0009883a 	mov	r4,zero
 80451a8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 80451ac:	d0a0c317 	ldw	r2,-31988(gp)
 80451b0:	e0bfff15 	stw	r2,-4(fp)
 80451b4:	00001c06 	br	8045228 <ip_reasm_process_timer_tick+0x94>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
 80451b8:	e0bfff17 	ldw	r2,-4(fp)
 80451bc:	10800017 	ldw	r2,0(r2)
 80451c0:	e0bffe15 	stw	r2,-8(fp)
      ++tmpp->age;
 80451c4:	e0bfff17 	ldw	r2,-4(fp)
 80451c8:	10800517 	ldw	r2,20(r2)
 80451cc:	10c00044 	addi	r3,r2,1
 80451d0:	e0bfff17 	ldw	r2,-4(fp)
 80451d4:	10c00515 	stw	r3,20(r2)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
 80451d8:	e0bfff17 	ldw	r2,-4(fp)
 80451dc:	10800517 	ldw	r2,20(r2)
 80451e0:	10801e18 	cmpnei	r2,r2,120
 80451e4:	10000e1e 	bne	r2,zero,8045220 <ip_reasm_process_timer_tick+0x8c>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
 80451e8:	008201b4 	movhi	r2,2054
 80451ec:	10802917 	ldw	r2,164(r2)
 80451f0:	10c00044 	addi	r3,r2,1
 80451f4:	008201b4 	movhi	r2,2054
 80451f8:	10c02915 	stw	r3,164(r2)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
 80451fc:	e13fff17 	ldw	r4,-4(fp)
 8045200:	80458500 	call	8045850 <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
 8045204:	e13fff17 	ldw	r4,-4(fp)
 8045208:	804525c0 	call	804525c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 804520c:	008201b4 	movhi	r2,2054
 8045210:	10802317 	ldw	r2,140(r2)
 8045214:	10c00044 	addi	r3,r2,1
 8045218:	008201b4 	movhi	r2,2054
 804521c:	10c02315 	stw	r3,140(r2)
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 8045220:	e0bffe17 	ldw	r2,-8(fp)
 8045224:	e0bfff15 	stw	r2,-4(fp)
 8045228:	e0bfff17 	ldw	r2,-4(fp)
 804522c:	103fe21e 	bne	r2,zero,80451b8 <ip_reasm_process_timer_tick+0x24>
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
 8045230:	d0a0a317 	ldw	r2,-32116(gp)
 8045234:	10801904 	addi	r2,r2,100
 8045238:	d0a0c415 	stw	r2,-31984(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 804523c:	0009883a 	mov	r4,zero
 8045240:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
 8045244:	0005883a 	mov	r2,zero
}
 8045248:	e037883a 	mov	sp,fp
 804524c:	dfc00117 	ldw	ra,4(sp)
 8045250:	df000017 	ldw	fp,0(sp)
 8045254:	dec00204 	addi	sp,sp,8
 8045258:	f800283a 	ret

0804525c <ip_reasm_delete_ire>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
 804525c:	defff604 	addi	sp,sp,-40
 8045260:	dfc00915 	stw	ra,36(sp)
 8045264:	df000815 	stw	fp,32(sp)
 8045268:	df000804 	addi	fp,sp,32
 804526c:	e13ff815 	stw	r4,-32(fp)
   RFQP rfqp, first_rfqp, prev_rfqp;
   u_short i;
   PACKET p;
   IREP tmpp;
   IREP prev_tmpp = 0;
 8045270:	e03ffc15 	stw	zero,-16(fp)

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8045274:	d0a0c317 	ldw	r2,-31988(gp)
 8045278:	e0bffd15 	stw	r2,-12(fp)
 804527c:	00001406 	br	80452d0 <ip_reasm_delete_ire+0x74>
      {
      if (tmpp == irep) 
 8045280:	e0fffd17 	ldw	r3,-12(fp)
 8045284:	e0bff817 	ldw	r2,-32(fp)
 8045288:	18800c1e 	bne	r3,r2,80452bc <ip_reasm_delete_ire+0x60>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
 804528c:	d0a0c317 	ldw	r2,-31988(gp)
 8045290:	e0fffd17 	ldw	r3,-12(fp)
 8045294:	1880041e 	bne	r3,r2,80452a8 <ip_reasm_delete_ire+0x4c>
 8045298:	e0bff817 	ldw	r2,-32(fp)
 804529c:	10800017 	ldw	r2,0(r2)
 80452a0:	d0a0c315 	stw	r2,-31988(gp)
         else prev_tmpp->next = irep->next;
         break;
 80452a4:	00000c06 	br	80452d8 <ip_reasm_delete_ire+0x7c>
         else prev_tmpp->next = irep->next;
 80452a8:	e0bff817 	ldw	r2,-32(fp)
 80452ac:	10c00017 	ldw	r3,0(r2)
 80452b0:	e0bffc17 	ldw	r2,-16(fp)
 80452b4:	10c00015 	stw	r3,0(r2)
         break;
 80452b8:	00000706 	br	80452d8 <ip_reasm_delete_ire+0x7c>
         }
      prev_tmpp = tmpp;
 80452bc:	e0bffd17 	ldw	r2,-12(fp)
 80452c0:	e0bffc15 	stw	r2,-16(fp)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 80452c4:	e0bffd17 	ldw	r2,-12(fp)
 80452c8:	10800017 	ldw	r2,0(r2)
 80452cc:	e0bffd15 	stw	r2,-12(fp)
 80452d0:	e0bffd17 	ldw	r2,-12(fp)
 80452d4:	103fea1e 	bne	r2,zero,8045280 <ip_reasm_delete_ire+0x24>
      }

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
 80452d8:	e0bffd17 	ldw	r2,-12(fp)
 80452dc:	1000071e 	bne	r2,zero,80452fc <ip_reasm_delete_ire+0xa0>
      {
      ++ire_stats.bad_irep;
 80452e0:	008201b4 	movhi	r2,2054
 80452e4:	10802817 	ldw	r2,160(r2)
 80452e8:	10c00044 	addi	r3,r2,1
 80452ec:	008201b4 	movhi	r2,2054
 80452f0:	10c02815 	stw	r3,160(r2)
      return ENP_PARAM;
 80452f4:	00bffd84 	movi	r2,-10
 80452f8:	00003d06 	br	80453f0 <ip_reasm_delete_ire+0x194>
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
 80452fc:	e0bff817 	ldw	r2,-32(fp)
 8045300:	10800604 	addi	r2,r2,24
 8045304:	e0bffb15 	stw	r2,-20(fp)
 8045308:	e0bffb17 	ldw	r2,-20(fp)
 804530c:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 8045310:	00003006 	br	80453d4 <ip_reasm_delete_ire+0x178>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8045314:	e03ffe8d 	sth	zero,-6(fp)
 8045318:	00001d06 	br	8045390 <ip_reasm_delete_ire+0x134>
         {
         if ((p = rfqp->bufp [i]) != 0)
 804531c:	e0bffe8b 	ldhu	r2,-6(fp)
 8045320:	e0ffff17 	ldw	r3,-4(fp)
 8045324:	10800044 	addi	r2,r2,1
 8045328:	100490ba 	slli	r2,r2,2
 804532c:	1885883a 	add	r2,r3,r2
 8045330:	10800017 	ldw	r2,0(r2)
 8045334:	e0bffa15 	stw	r2,-24(fp)
 8045338:	e0bffa17 	ldw	r2,-24(fp)
 804533c:	10000c26 	beq	r2,zero,8045370 <ip_reasm_delete_ire+0x114>
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
 8045340:	e0bffa17 	ldw	r2,-24(fp)
 8045344:	10800217 	ldw	r2,8(r2)
 8045348:	10bfffcc 	andi	r2,r2,65535
 804534c:	1009883a 	mov	r4,r2
 8045350:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
 8045354:	01000084 	movi	r4,2
 8045358:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free (p);
 804535c:	e13ffa17 	ldw	r4,-24(fp)
 8045360:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
 8045364:	01000084 	movi	r4,2
 8045368:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
 804536c:	00000506 	br	8045384 <ip_reasm_delete_ire+0x128>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 8045370:	e0bff817 	ldw	r2,-32(fp)
 8045374:	10802103 	ldbu	r2,132(r2)
 8045378:	10803fcc 	andi	r2,r2,255
 804537c:	1080004c 	andi	r2,r2,1
 8045380:	1000071e 	bne	r2,zero,80453a0 <ip_reasm_delete_ire+0x144>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8045384:	e0bffe8b 	ldhu	r2,-6(fp)
 8045388:	10800044 	addi	r2,r2,1
 804538c:	e0bffe8d 	sth	r2,-6(fp)
 8045390:	e0bffe8b 	ldhu	r2,-6(fp)
 8045394:	10800430 	cmpltui	r2,r2,16
 8045398:	103fe01e 	bne	r2,zero,804531c <ip_reasm_delete_ire+0xc0>
 804539c:	00000106 	br	80453a4 <ip_reasm_delete_ire+0x148>
               {
               break;
 80453a0:	0001883a 	nop
               }
            }
          }

       prev_rfqp = rfqp;
 80453a4:	e0bfff17 	ldw	r2,-4(fp)
 80453a8:	e0bff915 	stw	r2,-28(fp)
       rfqp = rfqp->next;
 80453ac:	e0bfff17 	ldw	r2,-4(fp)
 80453b0:	10800017 	ldw	r2,0(r2)
 80453b4:	e0bfff15 	stw	r2,-4(fp)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
 80453b8:	e0fff917 	ldw	r3,-28(fp)
 80453bc:	e0bffb17 	ldw	r2,-20(fp)
 80453c0:	18800426 	beq	r3,r2,80453d4 <ip_reasm_delete_ire+0x178>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
 80453c4:	01001904 	movi	r4,100
 80453c8:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
 80453cc:	e13ff917 	ldw	r4,-28(fp)
 80453d0:	8030d3c0 	call	8030d3c <npfree>
   while (rfqp)
 80453d4:	e0bfff17 	ldw	r2,-4(fp)
 80453d8:	103fce1e 	bne	r2,zero,8045314 <ip_reasm_delete_ire+0xb8>
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
 80453dc:	01002204 	movi	r4,136
 80453e0:	8043ff40 	call	8043ff4 <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
 80453e4:	e13ff817 	ldw	r4,-32(fp)
 80453e8:	8030d3c0 	call	8030d3c <npfree>

   return IPREASM_OK;
 80453ec:	0005883a 	mov	r2,zero
}
 80453f0:	e037883a 	mov	sp,fp
 80453f4:	dfc00117 	ldw	ra,4(sp)
 80453f8:	df000017 	ldw	fp,0(sp)
 80453fc:	dec00204 	addi	sp,sp,8
 8045400:	f800283a 	ret

08045404 <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
 8045404:	defffb04 	addi	sp,sp,-20
 8045408:	dfc00415 	stw	ra,16(sp)
 804540c:	df000315 	stw	fp,12(sp)
 8045410:	df000304 	addi	fp,sp,12
 8045414:	e13ffd15 	stw	r4,-12(fp)
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
 8045418:	e03ffe45 	stb	zero,-7(fp)
   u_char compact = IPREASM_TRUE;
 804541c:	00800044 	movi	r2,1
 8045420:	e0bffe05 	stb	r2,-8(fp)

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 8045424:	e13ffd17 	ldw	r4,-12(fp)
 8045428:	8044e000 	call	8044e00 <ip_reasm_find_ire>
 804542c:	10803fcc 	andi	r2,r2,255
 8045430:	10800060 	cmpeqi	r2,r2,1
 8045434:	1000071e 	bne	r2,zero,8045454 <ip_reasm_mark_compact_rfq+0x50>
   {
      ++ire_stats.bad_irep;
 8045438:	008201b4 	movhi	r2,2054
 804543c:	10802817 	ldw	r2,160(r2)
 8045440:	10c00044 	addi	r3,r2,1
 8045444:	008201b4 	movhi	r2,2054
 8045448:	10c02815 	stw	r3,160(r2)
      return ENP_PARAM;
 804544c:	00bffd84 	movi	r2,-10
 8045450:	00003006 	br	8045514 <ip_reasm_mark_compact_rfq+0x110>
   }

   rfqp = &(irep->rfq);
 8045454:	e0bffd17 	ldw	r2,-12(fp)
 8045458:	10800604 	addi	r2,r2,24
 804545c:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 8045460:	00001906 	br	80454c8 <ip_reasm_mark_compact_rfq+0xc4>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8045464:	e03ffe8d 	sth	zero,-6(fp)
 8045468:	00001106 	br	80454b0 <ip_reasm_mark_compact_rfq+0xac>
         {
         if (rfqp->bufp [i] == 0)
 804546c:	e0bffe8b 	ldhu	r2,-6(fp)
 8045470:	e0ffff17 	ldw	r3,-4(fp)
 8045474:	10800044 	addi	r2,r2,1
 8045478:	100490ba 	slli	r2,r2,2
 804547c:	1885883a 	add	r2,r3,r2
 8045480:	10800017 	ldw	r2,0(r2)
 8045484:	1000031e 	bne	r2,zero,8045494 <ip_reasm_mark_compact_rfq+0x90>
            {            
            empty_slot_discovered = IPREASM_TRUE;
 8045488:	00800044 	movi	r2,1
 804548c:	e0bffe45 	stb	r2,-7(fp)
 8045490:	00000406 	br	80454a4 <ip_reasm_mark_compact_rfq+0xa0>
            }
         else
            {
            if (empty_slot_discovered) 
 8045494:	e0bffe43 	ldbu	r2,-7(fp)
 8045498:	10000226 	beq	r2,zero,80454a4 <ip_reasm_mark_compact_rfq+0xa0>
               {
               compact = IPREASM_FALSE;
 804549c:	e03ffe05 	stb	zero,-8(fp)
               break;
 80454a0:	00000606 	br	80454bc <ip_reasm_mark_compact_rfq+0xb8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 80454a4:	e0bffe8b 	ldhu	r2,-6(fp)
 80454a8:	10800044 	addi	r2,r2,1
 80454ac:	e0bffe8d 	sth	r2,-6(fp)
 80454b0:	e0bffe8b 	ldhu	r2,-6(fp)
 80454b4:	10800430 	cmpltui	r2,r2,16
 80454b8:	103fec1e 	bne	r2,zero,804546c <ip_reasm_mark_compact_rfq+0x68>
               }
            }
          }
       rfqp = rfqp->next;
 80454bc:	e0bfff17 	ldw	r2,-4(fp)
 80454c0:	10800017 	ldw	r2,0(r2)
 80454c4:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 80454c8:	e0bfff17 	ldw	r2,-4(fp)
 80454cc:	103fe51e 	bne	r2,zero,8045464 <ip_reasm_mark_compact_rfq+0x60>
      }

   if (compact) 
 80454d0:	e0bffe03 	ldbu	r2,-8(fp)
 80454d4:	10000726 	beq	r2,zero,80454f4 <ip_reasm_mark_compact_rfq+0xf0>
      {
      irep->flags |= IPR_RFQ_COMPACT;
 80454d8:	e0bffd17 	ldw	r2,-12(fp)
 80454dc:	10802103 	ldbu	r2,132(r2)
 80454e0:	10800054 	ori	r2,r2,1
 80454e4:	1007883a 	mov	r3,r2
 80454e8:	e0bffd17 	ldw	r2,-12(fp)
 80454ec:	10c02105 	stb	r3,132(r2)
 80454f0:	00000706 	br	8045510 <ip_reasm_mark_compact_rfq+0x10c>
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
 80454f4:	e0bffd17 	ldw	r2,-12(fp)
 80454f8:	10c02103 	ldbu	r3,132(r2)
 80454fc:	00bfff84 	movi	r2,-2
 8045500:	1884703a 	and	r2,r3,r2
 8045504:	1007883a 	mov	r3,r2
 8045508:	e0bffd17 	ldw	r2,-12(fp)
 804550c:	10c02105 	stb	r3,132(r2)
      }

   return IPREASM_OK;
 8045510:	0005883a 	mov	r2,zero
}
 8045514:	e037883a 	mov	sp,fp
 8045518:	dfc00117 	ldw	ra,4(sp)
 804551c:	df000017 	ldw	fp,0(sp)
 8045520:	dec00204 	addi	sp,sp,8
 8045524:	f800283a 	ret

08045528 <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 8045528:	deffec04 	addi	sp,sp,-80
 804552c:	dfc01315 	stw	ra,76(sp)
 8045530:	df001215 	stw	fp,72(sp)
 8045534:	dc001115 	stw	r16,68(sp)
 8045538:	df001204 	addi	fp,sp,72
 804553c:	e13ff815 	stw	r4,-32(fp)
   unsigned long ticks_elapsed = cticks;
 8045540:	d0a0a317 	ldw	r2,-32116(gp)
 8045544:	e0bffa15 	stw	r2,-24(fp)
   u_short size_ire = sizeof(IRE);
 8045548:	00802204 	movi	r2,136
 804554c:	e0bff98d 	sth	r2,-26(fp)
   u_short size_rfq = sizeof(RFQ);
 8045550:	00801904 	movi	r2,100
 8045554:	e0bff90d 	sth	r2,-28(fp)
   IREP tmpp;
   u_short count = 0;
 8045558:	e03ffd8d 	sth	zero,-10(fp)
   RFQP rfqp;
   u_short frag_count = 0;
 804555c:	e03ffb8d 	sth	zero,-18(fp)
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
 8045560:	01420174 	movhi	r5,2053
 8045564:	29506904 	addi	r5,r5,16804
 8045568:	e13ff817 	ldw	r4,-32(fp)
 804556c:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
 8045570:	d420c217 	ldw	r16,-31992(gp)
 8045574:	e0bffa17 	ldw	r2,-24(fp)
 8045578:	01401904 	movi	r5,100
 804557c:	1009883a 	mov	r4,r2
 8045580:	8011fdc0 	call	8011fdc <__udivsi3>
 8045584:	1009883a 	mov	r4,r2
 8045588:	e0bff98b 	ldhu	r2,-26(fp)
 804558c:	e0fff90b 	ldhu	r3,-28(fp)
 8045590:	d8c00215 	stw	r3,8(sp)
 8045594:	d8800115 	stw	r2,4(sp)
 8045598:	d9000015 	stw	r4,0(sp)
 804559c:	e1fffa17 	ldw	r7,-24(fp)
 80455a0:	800d883a 	mov	r6,r16
 80455a4:	01420174 	movhi	r5,2053
 80455a8:	29507004 	addi	r5,r5,16832
 80455ac:	e13ff817 	ldw	r4,-32(fp)
 80455b0:	802bfa40 	call	802bfa4 <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
 80455b4:	008201b4 	movhi	r2,2054
 80455b8:	11802917 	ldw	r6,164(r2)
 80455bc:	008201b4 	movhi	r2,2054
 80455c0:	11c02817 	ldw	r7,160(r2)
 80455c4:	008201b4 	movhi	r2,2054
 80455c8:	10802a17 	ldw	r2,168(r2)
 80455cc:	00c201b4 	movhi	r3,2054
 80455d0:	18c02b17 	ldw	r3,172(r3)
 80455d4:	010201b4 	movhi	r4,2054
 80455d8:	21002c17 	ldw	r4,176(r4)
 80455dc:	014201b4 	movhi	r5,2054
 80455e0:	29402d17 	ldw	r5,180(r5)
 80455e4:	d9400315 	stw	r5,12(sp)
 80455e8:	d9000215 	stw	r4,8(sp)
 80455ec:	d8c00115 	stw	r3,4(sp)
 80455f0:	d8800015 	stw	r2,0(sp)
 80455f4:	01420174 	movhi	r5,2053
 80455f8:	29508004 	addi	r5,r5,16896
 80455fc:	e13ff817 	ldw	r4,-32(fp)
 8045600:	802bfa40 	call	802bfa4 <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
 8045604:	d0a0c317 	ldw	r2,-31988(gp)
 8045608:	100d883a 	mov	r6,r2
 804560c:	01420174 	movhi	r5,2053
 8045610:	29509504 	addi	r5,r5,16980
 8045614:	e13ff817 	ldw	r4,-32(fp)
 8045618:	802bfa40 	call	802bfa4 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 804561c:	d0a0c317 	ldw	r2,-31988(gp)
 8045620:	e0bffe15 	stw	r2,-8(fp)
 8045624:	00007b06 	br	8045814 <ipr_stats+0x2ec>
      {
      ++count;
 8045628:	e0bffd8b 	ldhu	r2,-10(fp)
 804562c:	10800044 	addi	r2,r2,1
 8045630:	e0bffd8d 	sth	r2,-10(fp)
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
 8045634:	e0bffe17 	ldw	r2,-8(fp)
 8045638:	10800604 	addi	r2,r2,24
 804563c:	e0bffc15 	stw	r2,-16(fp)
      while (rfqp)
 8045640:	00001d06 	br	80456b8 <ipr_stats+0x190>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8045644:	e03ffb0d 	sth	zero,-20(fp)
 8045648:	00001306 	br	8045698 <ipr_stats+0x170>
            {
            if (rfqp->bufp [i] != 0)
 804564c:	e0bffb0b 	ldhu	r2,-20(fp)
 8045650:	e0fffc17 	ldw	r3,-16(fp)
 8045654:	10800044 	addi	r2,r2,1
 8045658:	100490ba 	slli	r2,r2,2
 804565c:	1885883a 	add	r2,r3,r2
 8045660:	10800017 	ldw	r2,0(r2)
 8045664:	10000426 	beq	r2,zero,8045678 <ipr_stats+0x150>
               {
               ++frag_count;            
 8045668:	e0bffb8b 	ldhu	r2,-18(fp)
 804566c:	10800044 	addi	r2,r2,1
 8045670:	e0bffb8d 	sth	r2,-18(fp)
 8045674:	00000506 	br	804568c <ipr_stats+0x164>
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
 8045678:	e0bffe17 	ldw	r2,-8(fp)
 804567c:	10802103 	ldbu	r2,132(r2)
 8045680:	10803fcc 	andi	r2,r2,255
 8045684:	1080004c 	andi	r2,r2,1
 8045688:	1000071e 	bne	r2,zero,80456a8 <ipr_stats+0x180>
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 804568c:	e0bffb0b 	ldhu	r2,-20(fp)
 8045690:	10800044 	addi	r2,r2,1
 8045694:	e0bffb0d 	sth	r2,-20(fp)
 8045698:	e0bffb0b 	ldhu	r2,-20(fp)
 804569c:	10800430 	cmpltui	r2,r2,16
 80456a0:	103fea1e 	bne	r2,zero,804564c <ipr_stats+0x124>
 80456a4:	00000106 	br	80456ac <ipr_stats+0x184>
                  {
                  break;
 80456a8:	0001883a 	nop
                  }
               }
            }
         rfqp = rfqp->next;
 80456ac:	e0bffc17 	ldw	r2,-16(fp)
 80456b0:	10800017 	ldw	r2,0(r2)
 80456b4:	e0bffc15 	stw	r2,-16(fp)
      while (rfqp)
 80456b8:	e0bffc17 	ldw	r2,-16(fp)
 80456bc:	103fe11e 	bne	r2,zero,8045644 <ipr_stats+0x11c>
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
 80456c0:	e33ffb8b 	ldhu	r12,-18(fp)
 80456c4:	e0bffe17 	ldw	r2,-8(fp)
 80456c8:	10800117 	ldw	r2,4(r2)
 80456cc:	1006d63a 	srli	r3,r2,24
 80456d0:	e0bffe17 	ldw	r2,-8(fp)
 80456d4:	10800117 	ldw	r2,4(r2)
 80456d8:	1004d23a 	srli	r2,r2,8
 80456dc:	10bfc00c 	andi	r2,r2,65280
 80456e0:	1886b03a 	or	r3,r3,r2
 80456e4:	e0bffe17 	ldw	r2,-8(fp)
 80456e8:	10800117 	ldw	r2,4(r2)
 80456ec:	1004923a 	slli	r2,r2,8
 80456f0:	10803fec 	andhi	r2,r2,255
 80456f4:	1886b03a 	or	r3,r3,r2
 80456f8:	e0bffe17 	ldw	r2,-8(fp)
 80456fc:	10800117 	ldw	r2,4(r2)
 8045700:	1004963a 	slli	r2,r2,24
 8045704:	1884b03a 	or	r2,r3,r2
 8045708:	e0fffe17 	ldw	r3,-8(fp)
 804570c:	18c00217 	ldw	r3,8(r3)
 8045710:	1808d63a 	srli	r4,r3,24
 8045714:	e0fffe17 	ldw	r3,-8(fp)
 8045718:	18c00217 	ldw	r3,8(r3)
 804571c:	1806d23a 	srli	r3,r3,8
 8045720:	18ffc00c 	andi	r3,r3,65280
 8045724:	20c8b03a 	or	r4,r4,r3
 8045728:	e0fffe17 	ldw	r3,-8(fp)
 804572c:	18c00217 	ldw	r3,8(r3)
 8045730:	1806923a 	slli	r3,r3,8
 8045734:	18c03fec 	andhi	r3,r3,255
 8045738:	20c8b03a 	or	r4,r4,r3
 804573c:	e0fffe17 	ldw	r3,-8(fp)
 8045740:	18c00217 	ldw	r3,8(r3)
 8045744:	1806963a 	slli	r3,r3,24
 8045748:	20c6b03a 	or	r3,r4,r3
 804574c:	e13ffe17 	ldw	r4,-8(fp)
 8045750:	21000383 	ldbu	r4,14(r4)
 8045754:	21003fcc 	andi	r4,r4,255
 8045758:	e17ffe17 	ldw	r5,-8(fp)
 804575c:	2940030b 	ldhu	r5,12(r5)
 8045760:	297fffcc 	andi	r5,r5,65535
 8045764:	280ad23a 	srli	r5,r5,8
 8045768:	297fffcc 	andi	r5,r5,65535
 804576c:	29803fcc 	andi	r6,r5,255
 8045770:	e17ffe17 	ldw	r5,-8(fp)
 8045774:	2940030b 	ldhu	r5,12(r5)
 8045778:	297fffcc 	andi	r5,r5,65535
 804577c:	280a923a 	slli	r5,r5,8
 8045780:	297fffcc 	andi	r5,r5,65535
 8045784:	314ab03a 	or	r5,r6,r5
 8045788:	e1bffe17 	ldw	r6,-8(fp)
 804578c:	3180040b 	ldhu	r6,16(r6)
 8045790:	31bfffcc 	andi	r6,r6,65535
 8045794:	e1fffe17 	ldw	r7,-8(fp)
 8045798:	39c0048b 	ldhu	r7,18(r7)
 804579c:	39ffffcc 	andi	r7,r7,65535
 80457a0:	e23ffe17 	ldw	r8,-8(fp)
 80457a4:	42000517 	ldw	r8,20(r8)
 80457a8:	e27ffe17 	ldw	r9,-8(fp)
 80457ac:	4a401f17 	ldw	r9,124(r9)
 80457b0:	e2bffe17 	ldw	r10,-8(fp)
 80457b4:	52802017 	ldw	r10,128(r10)
 80457b8:	e2fffe17 	ldw	r11,-8(fp)
 80457bc:	5ac02103 	ldbu	r11,132(r11)
 80457c0:	5ac03fcc 	andi	r11,r11,255
 80457c4:	5ac0004c 	andi	r11,r11,1
 80457c8:	dac00915 	stw	r11,36(sp)
 80457cc:	da800815 	stw	r10,32(sp)
 80457d0:	da400715 	stw	r9,28(sp)
 80457d4:	da000615 	stw	r8,24(sp)
 80457d8:	d9c00515 	stw	r7,20(sp)
 80457dc:	d9800415 	stw	r6,16(sp)
 80457e0:	d9400315 	stw	r5,12(sp)
 80457e4:	d9000215 	stw	r4,8(sp)
 80457e8:	d8c00115 	stw	r3,4(sp)
 80457ec:	d8800015 	stw	r2,0(sp)
 80457f0:	600f883a 	mov	r7,r12
 80457f4:	e1bffe17 	ldw	r6,-8(fp)
 80457f8:	01420174 	movhi	r5,2053
 80457fc:	29509b04 	addi	r5,r5,17004
 8045800:	e13ff817 	ldw	r4,-32(fp)
 8045804:	802bfa40 	call	802bfa4 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8045808:	e0bffe17 	ldw	r2,-8(fp)
 804580c:	10800017 	ldw	r2,0(r2)
 8045810:	e0bffe15 	stw	r2,-8(fp)
 8045814:	e0bffe17 	ldw	r2,-8(fp)
 8045818:	103f831e 	bne	r2,zero,8045628 <ipr_stats+0x100>
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
 804581c:	e0bffd8b 	ldhu	r2,-10(fp)
 8045820:	100d883a 	mov	r6,r2
 8045824:	01420174 	movhi	r5,2053
 8045828:	2950b604 	addi	r5,r5,17112
 804582c:	e13ff817 	ldw	r4,-32(fp)
 8045830:	802bfa40 	call	802bfa4 <ns_printf>

   return IPREASM_OK;
 8045834:	0005883a 	mov	r2,zero
}
 8045838:	e6ffff04 	addi	sp,fp,-4
 804583c:	dfc00217 	ldw	ra,8(sp)
 8045840:	df000117 	ldw	fp,4(sp)
 8045844:	dc000017 	ldw	r16,0(sp)
 8045848:	dec00304 	addi	sp,sp,12
 804584c:	f800283a 	ret

08045850 <ip_reasm_send_icmp_timex>:
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
 8045850:	defffc04 	addi	sp,sp,-16
 8045854:	dfc00315 	stw	ra,12(sp)
 8045858:	df000215 	stw	fp,8(sp)
 804585c:	df000204 	addi	fp,sp,8
 8045860:	e13ffe15 	stw	r4,-8(fp)

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
 8045864:	e0bffe17 	ldw	r2,-8(fp)
 8045868:	10801f17 	ldw	r2,124(r2)
 804586c:	10000626 	beq	r2,zero,8045888 <ip_reasm_send_icmp_timex+0x38>
      {
      pip = (struct ip *) irep->l3_hdr;
 8045870:	e0bffe17 	ldw	r2,-8(fp)
 8045874:	10802017 	ldw	r2,128(r2)
 8045878:	e0bfff15 	stw	r2,-4(fp)
      icmp_timex (pip, TIMEX_REASSY_FAILED);
 804587c:	01400044 	movi	r5,1
 8045880:	e13fff17 	ldw	r4,-4(fp)
 8045884:	804db380 	call	804db38 <icmp_timex>
      }

   return IPREASM_OK;
 8045888:	0005883a 	mov	r2,zero
}
 804588c:	e037883a 	mov	sp,fp
 8045890:	dfc00117 	ldw	ra,4(sp)
 8045894:	df000017 	ldw	fp,0(sp)
 8045898:	dec00204 	addi	sp,sp,8
 804589c:	f800283a 	ret

080458a0 <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 80458a0:	defff404 	addi	sp,sp,-48
 80458a4:	dfc00b15 	stw	ra,44(sp)
 80458a8:	df000a15 	stw	fp,40(sp)
 80458ac:	dc000915 	stw	r16,36(sp)
 80458b0:	df000a04 	addi	fp,sp,40
 80458b4:	e13ff615 	stw	r4,-40(fp)
   unsigned hdrlen;  /* length of IP header including options */
   unsigned len;     /* total length including IP header */
   unsigned short int num_pkts;
   PACKET * pktp;
   unsigned char i;
   int rcvrc = -1;
 80458b8:	00bfffc4 	movi	r2,-1
 80458bc:	e0bffd15 	stw	r2,-12(fp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 80458c0:	d0a07e17 	ldw	r2,-32264(gp)
 80458c4:	1081000c 	andi	r2,r2,1024
 80458c8:	10000e26 	beq	r2,zero,8045904 <ip_rcv+0x64>
 80458cc:	d0a07e17 	ldw	r2,-32264(gp)
 80458d0:	1080800c 	andi	r2,r2,512
 80458d4:	10000b26 	beq	r2,zero,8045904 <ip_rcv+0x64>
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
         p->nb_plen, net_num(p->net));
 80458d8:	e0bff617 	ldw	r2,-40(fp)
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 80458dc:	14000417 	ldw	r16,16(r2)
         p->nb_plen, net_num(p->net));
 80458e0:	e0bff617 	ldw	r2,-40(fp)
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 80458e4:	10800617 	ldw	r2,24(r2)
 80458e8:	1009883a 	mov	r4,r2
 80458ec:	8029ec40 	call	8029ec4 <if_netnumber>
 80458f0:	100d883a 	mov	r6,r2
 80458f4:	800b883a 	mov	r5,r16
 80458f8:	01020174 	movhi	r4,2053
 80458fc:	2110bf04 	addi	r4,r4,17148
 8045900:	8003b840 	call	8003b84 <printf>
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   ip_mib.ipInReceives++;
 8045904:	008201b4 	movhi	r2,2054
 8045908:	10801617 	ldw	r2,88(r2)
 804590c:	10c00044 	addi	r3,r2,1
 8045910:	008201b4 	movhi	r2,2054
 8045914:	10c01615 	stw	r3,88(r2)
   pip = ip_head(p);
 8045918:	e0bff617 	ldw	r2,-40(fp)
 804591c:	10800317 	ldw	r2,12(r2)
 8045920:	e0bffc15 	stw	r2,-16(fp)

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 8045924:	e0bff617 	ldw	r2,-40(fp)
 8045928:	10800417 	ldw	r2,16(r2)
 804592c:	e0fffc17 	ldw	r3,-16(fp)
 8045930:	18c0008b 	ldhu	r3,2(r3)
 8045934:	18ffffcc 	andi	r3,r3,65535
 8045938:	1806d23a 	srli	r3,r3,8
 804593c:	18ffffcc 	andi	r3,r3,65535
 8045940:	19003fcc 	andi	r4,r3,255
 8045944:	e0fffc17 	ldw	r3,-16(fp)
 8045948:	18c0008b 	ldhu	r3,2(r3)
 804594c:	18ffffcc 	andi	r3,r3,65535
 8045950:	1806923a 	slli	r3,r3,8
 8045954:	18ffffcc 	andi	r3,r3,65535
 8045958:	20c6b03a 	or	r3,r4,r3
 804595c:	10c01d2e 	bgeu	r2,r3,80459d4 <ip_rcv+0x134>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8045960:	d0a07e17 	ldw	r2,-32264(gp)
 8045964:	1081000c 	andi	r2,r2,1024
 8045968:	10000c26 	beq	r2,zero,804599c <ip_rcv+0xfc>
 804596c:	d0a07e17 	ldw	r2,-32264(gp)
 8045970:	1080800c 	andi	r2,r2,512
 8045974:	10000926 	beq	r2,zero,804599c <ip_rcv+0xfc>
      {
         dprintf("ip_rcv: bad pkt len\n");
 8045978:	01020174 	movhi	r4,2053
 804597c:	2110c804 	addi	r4,r4,17184
 8045980:	8003ca80 	call	8003ca8 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8045984:	d0a07e17 	ldw	r2,-32264(gp)
 8045988:	1080008c 	andi	r2,r2,2
 804598c:	10000326 	beq	r2,zero,804599c <ip_rcv+0xfc>
 8045990:	e0bff617 	ldw	r2,-40(fp)
 8045994:	1009883a 	mov	r4,r2
 8045998:	80437b00 	call	80437b0 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 804599c:	008201b4 	movhi	r2,2054
 80459a0:	10801717 	ldw	r2,92(r2)
 80459a4:	10c00044 	addi	r3,r2,1
 80459a8:	008201b4 	movhi	r2,2054
 80459ac:	10c01715 	stw	r3,92(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80459b0:	01000084 	movi	r4,2
 80459b4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 80459b8:	e0bff617 	ldw	r2,-40(fp)
 80459bc:	1009883a 	mov	r4,r2
 80459c0:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80459c4:	01000084 	movi	r4,2
 80459c8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 80459cc:	00bff804 	movi	r2,-32
 80459d0:	00008206 	br	8045bdc <ip_rcv+0x33c>
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
 80459d4:	e0bffc17 	ldw	r2,-16(fp)
 80459d8:	1080008b 	ldhu	r2,2(r2)
 80459dc:	10bfffcc 	andi	r2,r2,65535
 80459e0:	1004d23a 	srli	r2,r2,8
 80459e4:	10bfffcc 	andi	r2,r2,65535
 80459e8:	10c03fcc 	andi	r3,r2,255
 80459ec:	e0bffc17 	ldw	r2,-16(fp)
 80459f0:	1080008b 	ldhu	r2,2(r2)
 80459f4:	10bfffcc 	andi	r2,r2,65535
 80459f8:	1004923a 	slli	r2,r2,8
 80459fc:	10bfffcc 	andi	r2,r2,65535
 8045a00:	1884b03a 	or	r2,r3,r2
 8045a04:	e0bffb15 	stw	r2,-20(fp)
   p->nb_plen = len;       /* fix pkt len */
 8045a08:	e0bff617 	ldw	r2,-40(fp)
 8045a0c:	e0fffb17 	ldw	r3,-20(fp)
 8045a10:	10c00415 	stw	r3,16(r2)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
 8045a14:	e0bffc17 	ldw	r2,-16(fp)
 8045a18:	10800003 	ldbu	r2,0(r2)
 8045a1c:	10803fcc 	andi	r2,r2,255
 8045a20:	1004d13a 	srli	r2,r2,4
 8045a24:	10803fcc 	andi	r2,r2,255
 8045a28:	10800120 	cmpeqi	r2,r2,4
 8045a2c:	10001d1e 	bne	r2,zero,8045aa4 <ip_rcv+0x204>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8045a30:	d0a07e17 	ldw	r2,-32264(gp)
 8045a34:	1081000c 	andi	r2,r2,1024
 8045a38:	10000c26 	beq	r2,zero,8045a6c <ip_rcv+0x1cc>
 8045a3c:	d0a07e17 	ldw	r2,-32264(gp)
 8045a40:	1080800c 	andi	r2,r2,512
 8045a44:	10000926 	beq	r2,zero,8045a6c <ip_rcv+0x1cc>
      {
         dprintf("ip_rcv: bad version number\n");
 8045a48:	01020174 	movhi	r4,2053
 8045a4c:	2110cd04 	addi	r4,r4,17204
 8045a50:	8003ca80 	call	8003ca8 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8045a54:	d0a07e17 	ldw	r2,-32264(gp)
 8045a58:	1080008c 	andi	r2,r2,2
 8045a5c:	10000326 	beq	r2,zero,8045a6c <ip_rcv+0x1cc>
 8045a60:	e0bff617 	ldw	r2,-40(fp)
 8045a64:	1009883a 	mov	r4,r2
 8045a68:	80437b00 	call	80437b0 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 8045a6c:	008201b4 	movhi	r2,2054
 8045a70:	10801717 	ldw	r2,92(r2)
 8045a74:	10c00044 	addi	r3,r2,1
 8045a78:	008201b4 	movhi	r2,2054
 8045a7c:	10c01715 	stw	r3,92(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8045a80:	01000084 	movi	r4,2
 8045a84:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 8045a88:	e0bff617 	ldw	r2,-40(fp)
 8045a8c:	1009883a 	mov	r4,r2
 8045a90:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045a94:	01000084 	movi	r4,2
 8045a98:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 8045a9c:	00bff804 	movi	r2,-32
 8045aa0:	00004e06 	br	8045bdc <ip_rcv+0x33c>
   }

   csum = pip->ip_chksum;
 8045aa4:	e0bffc17 	ldw	r2,-16(fp)
 8045aa8:	1080028b 	ldhu	r2,10(r2)
 8045aac:	e0bffa8d 	sth	r2,-22(fp)
   pip->ip_chksum = 0;
 8045ab0:	e0bffc17 	ldw	r2,-16(fp)
 8045ab4:	1000028d 	sth	zero,10(r2)
   hdrlen = ip_hlen(pip);
 8045ab8:	e0bffc17 	ldw	r2,-16(fp)
 8045abc:	10800003 	ldbu	r2,0(r2)
 8045ac0:	10803fcc 	andi	r2,r2,255
 8045ac4:	100490ba 	slli	r2,r2,2
 8045ac8:	10800f0c 	andi	r2,r2,60
 8045acc:	e0bff915 	stw	r2,-28(fp)
   tempsum = ~cksum(pip, hdrlen >> 1);
 8045ad0:	e0bff917 	ldw	r2,-28(fp)
 8045ad4:	1004d07a 	srli	r2,r2,1
 8045ad8:	100b883a 	mov	r5,r2
 8045adc:	e13ffc17 	ldw	r4,-16(fp)
 8045ae0:	802b98c0 	call	802b98c <cksum>
 8045ae4:	0084303a 	nor	r2,zero,r2
 8045ae8:	e0bff88d 	sth	r2,-30(fp)

   if (csum != tempsum)
 8045aec:	e0fffa8b 	ldhu	r3,-22(fp)
 8045af0:	e0bff88b 	ldhu	r2,-30(fp)
 8045af4:	18802026 	beq	r3,r2,8045b78 <ip_rcv+0x2d8>
   {
      pip->ip_chksum = csum;
 8045af8:	e0bffc17 	ldw	r2,-16(fp)
 8045afc:	e0fffa8b 	ldhu	r3,-22(fp)
 8045b00:	10c0028d 	sth	r3,10(r2)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8045b04:	d0a07e17 	ldw	r2,-32264(gp)
 8045b08:	1081000c 	andi	r2,r2,1024
 8045b0c:	10000c26 	beq	r2,zero,8045b40 <ip_rcv+0x2a0>
 8045b10:	d0a07e17 	ldw	r2,-32264(gp)
 8045b14:	1080800c 	andi	r2,r2,512
 8045b18:	10000926 	beq	r2,zero,8045b40 <ip_rcv+0x2a0>
      {
         dprintf("ip_rcv: bad xsum\n");
 8045b1c:	01020174 	movhi	r4,2053
 8045b20:	2110d404 	addi	r4,r4,17232
 8045b24:	8003ca80 	call	8003ca8 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8045b28:	d0a07e17 	ldw	r2,-32264(gp)
 8045b2c:	1080008c 	andi	r2,r2,2
 8045b30:	10000326 	beq	r2,zero,8045b40 <ip_rcv+0x2a0>
 8045b34:	e0bff617 	ldw	r2,-40(fp)
 8045b38:	1009883a 	mov	r4,r2
 8045b3c:	80437b00 	call	80437b0 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 8045b40:	008201b4 	movhi	r2,2054
 8045b44:	10801717 	ldw	r2,92(r2)
 8045b48:	10c00044 	addi	r3,r2,1
 8045b4c:	008201b4 	movhi	r2,2054
 8045b50:	10c01715 	stw	r3,92(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8045b54:	01000084 	movi	r4,2
 8045b58:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 8045b5c:	e0bff617 	ldw	r2,-40(fp)
 8045b60:	1009883a 	mov	r4,r2
 8045b64:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045b68:	01000084 	movi	r4,2
 8045b6c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 8045b70:	00bff804 	movi	r2,-32
 8045b74:	00001906 	br	8045bdc <ip_rcv+0x33c>
   }

   pip->ip_chksum = csum;
 8045b78:	e0bffc17 	ldw	r2,-16(fp)
 8045b7c:	e0fffa8b 	ldhu	r3,-22(fp)
 8045b80:	10c0028d 	sth	r3,10(r2)
#endif

    /* start off by assuming that we will only process the "current" packet;
     * these values may get overwritten by the NAT module if it returns
     * more than one packet back to this function (ip_rcv ()) */
    num_pkts = 1;
 8045b84:	00800044 	movi	r2,1
 8045b88:	e0bff80d 	sth	r2,-32(fp)
    pktp = &p;
 8045b8c:	e0bff604 	addi	r2,fp,-40
 8045b90:	e0bff715 	stw	r2,-36(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
 8045b94:	e03ffec5 	stb	zero,-5(fp)
 8045b98:	00000b06 	br	8045bc8 <ip_rcv+0x328>
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
 8045b9c:	e0bffec3 	ldbu	r2,-5(fp)
 8045ba0:	100490ba 	slli	r2,r2,2
 8045ba4:	e0fff717 	ldw	r3,-36(fp)
 8045ba8:	1885883a 	add	r2,r3,r2
 8045bac:	10800017 	ldw	r2,0(r2)
 8045bb0:	1009883a 	mov	r4,r2
 8045bb4:	8045bf40 	call	8045bf4 <ip_rcv_phase2>
 8045bb8:	e0bffd15 	stw	r2,-12(fp)
   for (i = 0; i < num_pkts; ++i)
 8045bbc:	e0bffec3 	ldbu	r2,-5(fp)
 8045bc0:	10800044 	addi	r2,r2,1
 8045bc4:	e0bffec5 	stb	r2,-5(fp)
 8045bc8:	e0fffec3 	ldbu	r3,-5(fp)
 8045bcc:	e0bff80b 	ldhu	r2,-32(fp)
 8045bd0:	18ffffcc 	andi	r3,r3,65535
 8045bd4:	18bff136 	bltu	r3,r2,8045b9c <ip_rcv+0x2fc>
   if (pktp != &p) nat_free (pktp);
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
 8045bd8:	e0bffd17 	ldw	r2,-12(fp)
}
 8045bdc:	e6ffff04 	addi	sp,fp,-4
 8045be0:	dfc00217 	ldw	ra,8(sp)
 8045be4:	df000117 	ldw	fp,4(sp)
 8045be8:	dc000017 	ldw	r16,0(sp)
 8045bec:	dec00304 	addi	sp,sp,12
 8045bf0:	f800283a 	ret

08045bf4 <ip_rcv_phase2>:


int ip_rcv_phase2 (PACKET p)
{
 8045bf4:	defff504 	addi	sp,sp,-44
 8045bf8:	dfc00a15 	stw	ra,40(sp)
 8045bfc:	df000915 	stw	fp,36(sp)
 8045c00:	df000904 	addi	fp,sp,36
 8045c04:	e13ff815 	stw	r4,-32(fp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
 8045c08:	e0bff817 	ldw	r2,-32(fp)
 8045c0c:	10800317 	ldw	r2,12(r2)
 8045c10:	e0bfff15 	stw	r2,-4(fp)
   nt = p->net;      /* which interface it came in on */
 8045c14:	e0bff817 	ldw	r2,-32(fp)
 8045c18:	10800617 	ldw	r2,24(r2)
 8045c1c:	e0bffe15 	stw	r2,-8(fp)

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 8045c20:	e0bfff17 	ldw	r2,-4(fp)
 8045c24:	10800417 	ldw	r2,16(r2)
 8045c28:	1006d63a 	srli	r3,r2,24
 8045c2c:	e0bfff17 	ldw	r2,-4(fp)
 8045c30:	10800417 	ldw	r2,16(r2)
 8045c34:	1004d23a 	srli	r2,r2,8
 8045c38:	10bfc00c 	andi	r2,r2,65280
 8045c3c:	1886b03a 	or	r3,r3,r2
 8045c40:	e0bfff17 	ldw	r2,-4(fp)
 8045c44:	10800417 	ldw	r2,16(r2)
 8045c48:	1004923a 	slli	r2,r2,8
 8045c4c:	10803fec 	andhi	r2,r2,255
 8045c50:	1886b03a 	or	r3,r3,r2
 8045c54:	e0bfff17 	ldw	r2,-4(fp)
 8045c58:	10800417 	ldw	r2,16(r2)
 8045c5c:	1004963a 	slli	r2,r2,24
 8045c60:	1884b03a 	or	r2,r3,r2
 8045c64:	10fc002c 	andhi	r3,r2,61440
 8045c68:	00b80034 	movhi	r2,57344
 8045c6c:	1880151e 	bne	r3,r2,8045cc4 <ip_rcv_phase2+0xd0>
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
 8045c70:	e0bfff17 	ldw	r2,-4(fp)
 8045c74:	10800417 	ldw	r2,16(r2)
 8045c78:	e17ffe17 	ldw	r5,-8(fp)
 8045c7c:	1009883a 	mov	r4,r2
 8045c80:	80467980 	call	8046798 <lookup_mcast>
 8045c84:	e0bffb15 	stw	r2,-20(fp)
      if (inm == NULL) 
 8045c88:	e0bffb17 	ldw	r2,-20(fp)
 8045c8c:	1000fb1e 	bne	r2,zero,804607c <ip_rcv_phase2+0x488>
      {
         ip_mib.ipOutNoRoutes++;
 8045c90:	008201b4 	movhi	r2,2054
 8045c94:	10801f17 	ldw	r2,124(r2)
 8045c98:	10c00044 	addi	r3,r2,1
 8045c9c:	008201b4 	movhi	r2,2054
 8045ca0:	10c01f15 	stw	r3,124(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8045ca4:	01000084 	movi	r4,2
 8045ca8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 8045cac:	e13ff817 	ldw	r4,-32(fp)
 8045cb0:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045cb4:	01000084 	movi	r4,2
 8045cb8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NOT_MINE);
 8045cbc:	00800084 	movi	r2,2
 8045cc0:	00012f06 	br	8046180 <ip_rcv_phase2+0x58c>
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 8045cc4:	e0bfff17 	ldw	r2,-4(fp)
 8045cc8:	10c00417 	ldw	r3,16(r2)
 8045ccc:	e0bffe17 	ldw	r2,-8(fp)
 8045cd0:	10800a17 	ldw	r2,40(r2)
 8045cd4:	1880eb26 	beq	r3,r2,8046084 <ip_rcv_phase2+0x490>
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8045cd8:	e0bfff17 	ldw	r2,-4(fp)
 8045cdc:	10800417 	ldw	r2,16(r2)
   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 8045ce0:	10bfffe0 	cmpeqi	r2,r2,-1
 8045ce4:	1000e71e 	bne	r2,zero,8046084 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
 8045ce8:	e0bfff17 	ldw	r2,-4(fp)
 8045cec:	10c00417 	ldw	r3,16(r2)
 8045cf0:	e0bffe17 	ldw	r2,-8(fp)
 8045cf4:	10800e17 	ldw	r2,56(r2)
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8045cf8:	1880e226 	beq	r3,r2,8046084 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8045cfc:	e0bfff17 	ldw	r2,-4(fp)
 8045d00:	10c00417 	ldw	r3,16(r2)
 8045d04:	e0bffe17 	ldw	r2,-8(fp)
 8045d08:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
 8045d0c:	1880dd26 	beq	r3,r2,8046084 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
 8045d10:	e0bfff17 	ldw	r2,-4(fp)
 8045d14:	10c00417 	ldw	r3,16(r2)
 8045d18:	e0bffe17 	ldw	r2,-8(fp)
 8045d1c:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8045d20:	1880d826 	beq	r3,r2,8046084 <ip_rcv_phase2+0x490>
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
 8045d24:	e0bffe17 	ldw	r2,-8(fp)
 8045d28:	10c00a17 	ldw	r3,40(r2)
 8045d2c:	e0bffe17 	ldw	r2,-8(fp)
 8045d30:	10800c17 	ldw	r2,48(r2)
 8045d34:	0084303a 	nor	r2,zero,r2
 8045d38:	1884703a 	and	r2,r3,r2
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
 8045d3c:	1000d126 	beq	r2,zero,8046084 <ip_rcv_phase2+0x490>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8045d40:	d0a07e17 	ldw	r2,-32264(gp)
 8045d44:	1081000c 	andi	r2,r2,1024
 8045d48:	10001826 	beq	r2,zero,8045dac <ip_rcv_phase2+0x1b8>
 8045d4c:	d0a07e17 	ldw	r2,-32264(gp)
 8045d50:	1080800c 	andi	r2,r2,512
 8045d54:	10001526 	beq	r2,zero,8045dac <ip_rcv_phase2+0x1b8>
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
       PUSH_IPADDR(pip->ip_dest));
 8045d58:	e0bfff17 	ldw	r2,-4(fp)
 8045d5c:	10800417 	ldw	r2,16(r2)
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8045d60:	10c03fcc 	andi	r3,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8045d64:	e0bfff17 	ldw	r2,-4(fp)
 8045d68:	10800417 	ldw	r2,16(r2)
 8045d6c:	1004d23a 	srli	r2,r2,8
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8045d70:	11003fcc 	andi	r4,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8045d74:	e0bfff17 	ldw	r2,-4(fp)
 8045d78:	10800417 	ldw	r2,16(r2)
 8045d7c:	1004d43a 	srli	r2,r2,16
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8045d80:	11403fcc 	andi	r5,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8045d84:	e0bfff17 	ldw	r2,-4(fp)
 8045d88:	10800417 	ldw	r2,16(r2)
 8045d8c:	1004d63a 	srli	r2,r2,24
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8045d90:	d8800015 	stw	r2,0(sp)
 8045d94:	280f883a 	mov	r7,r5
 8045d98:	200d883a 	mov	r6,r4
 8045d9c:	180b883a 	mov	r5,r3
 8045da0:	01020174 	movhi	r4,2053
 8045da4:	2110d904 	addi	r4,r4,17252
 8045da8:	8003b840 	call	8003b84 <printf>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
 8045dac:	008201b4 	movhi	r2,2054
 8045db0:	10801417 	ldw	r2,80(r2)
 8045db4:	10800098 	cmpnei	r2,r2,2
 8045db8:	10000d1e 	bne	r2,zero,8045df0 <ip_rcv_phase2+0x1fc>
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 8045dbc:	008201b4 	movhi	r2,2054
 8045dc0:	10801e17 	ldw	r2,120(r2)
 8045dc4:	10c00044 	addi	r3,r2,1
 8045dc8:	008201b4 	movhi	r2,2054
 8045dcc:	10c01e15 	stw	r3,120(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8045dd0:	01000084 	movi	r4,2
 8045dd4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
         pk_free(p);
 8045dd8:	e13ff817 	ldw	r4,-32(fp)
 8045ddc:	802f9440 	call	802f944 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045de0:	01000084 	movi	r4,2
 8045de4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_NO_ROUTE;
 8045de8:	00bff7c4 	movi	r2,-33
 8045dec:	0000e406 	br	8046180 <ip_rcv_phase2+0x58c>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
 8045df0:	008201b4 	movhi	r2,2054
 8045df4:	10801917 	ldw	r2,100(r2)
 8045df8:	10c00044 	addi	r3,r2,1
 8045dfc:	008201b4 	movhi	r2,2054
 8045e00:	10c01915 	stw	r3,100(r2)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
 8045e04:	e0bfff17 	ldw	r2,-4(fp)
 8045e08:	10800203 	ldbu	r2,8(r2)
 8045e0c:	10803fcc 	andi	r2,r2,255
 8045e10:	108000a8 	cmpgeui	r2,r2,2
 8045e14:	10001a1e 	bne	r2,zero,8045e80 <ip_rcv_phase2+0x28c>
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 8045e18:	008201b4 	movhi	r2,2054
 8045e1c:	10801e17 	ldw	r2,120(r2)
 8045e20:	10c00044 	addi	r3,r2,1
 8045e24:	008201b4 	movhi	r2,2054
 8045e28:	10c01e15 	stw	r3,120(r2)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
 8045e2c:	e0bfff17 	ldw	r2,-4(fp)
 8045e30:	10c00317 	ldw	r3,12(r2)
 8045e34:	e0bff817 	ldw	r2,-32(fp)
 8045e38:	10800617 	ldw	r2,24(r2)
 8045e3c:	11000a17 	ldw	r4,40(r2)
 8045e40:	e0bff817 	ldw	r2,-32(fp)
 8045e44:	10800617 	ldw	r2,24(r2)
 8045e48:	d8800015 	stw	r2,0(sp)
 8045e4c:	01c2c004 	movi	r7,2816
 8045e50:	e1bfff17 	ldw	r6,-4(fp)
 8045e54:	200b883a 	mov	r5,r4
 8045e58:	1809883a 	mov	r4,r3
 8045e5c:	804d8640 	call	804d864 <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 8045e60:	01000084 	movi	r4,2
 8045e64:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 8045e68:	e13ff817 	ldw	r4,-32(fp)
 8045e6c:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045e70:	01000084 	movi	r4,2
 8045e74:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 8045e78:	00bff7c4 	movi	r2,-33
 8045e7c:	0000c006 	br	8046180 <ip_rcv_phase2+0x58c>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
 8045e80:	e0bfff17 	ldw	r2,-4(fp)
 8045e84:	10c00417 	ldw	r3,16(r2)
 8045e88:	e0bff817 	ldw	r2,-32(fp)
 8045e8c:	10c00715 	stw	r3,28(r2)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
 8045e90:	e0bff817 	ldw	r2,-32(fp)
 8045e94:	10800717 	ldw	r2,28(r2)
 8045e98:	e0fff904 	addi	r3,fp,-28
 8045e9c:	180b883a 	mov	r5,r3
 8045ea0:	1009883a 	mov	r4,r2
 8045ea4:	8043a540 	call	8043a54 <iproute>
 8045ea8:	e0bffd15 	stw	r2,-12(fp)
 8045eac:	e0bffd17 	ldw	r2,-12(fp)
 8045eb0:	10000d1e 	bne	r2,zero,8045ee8 <ip_rcv_phase2+0x2f4>
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
 8045eb4:	008201b4 	movhi	r2,2054
 8045eb8:	10801f17 	ldw	r2,124(r2)
 8045ebc:	10c00044 	addi	r3,r2,1
 8045ec0:	008201b4 	movhi	r2,2054
 8045ec4:	10c01f15 	stw	r3,124(r2)
            LOCK_NET_RESOURCE(FREEQ_RESID);
 8045ec8:	01000084 	movi	r4,2
 8045ecc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
            pk_free(p);
 8045ed0:	e13ff817 	ldw	r4,-32(fp)
 8045ed4:	802f9440 	call	802f944 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045ed8:	01000084 	movi	r4,2
 8045edc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 8045ee0:	00bff7c4 	movi	r2,-33
 8045ee4:	0000a606 	br	8046180 <ip_rcv_phase2+0x58c>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
 8045ee8:	e0bfff17 	ldw	r2,-4(fp)
 8045eec:	10c00417 	ldw	r3,16(r2)
 8045ef0:	e0bffd17 	ldw	r2,-12(fp)
 8045ef4:	10800a17 	ldw	r2,40(r2)
 8045ef8:	18806426 	beq	r3,r2,804608c <ip_rcv_phase2+0x498>
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
 8045efc:	e0bfff17 	ldw	r2,-4(fp)
 8045f00:	10c00417 	ldw	r3,16(r2)
 8045f04:	e0bffd17 	ldw	r2,-12(fp)
 8045f08:	10800e17 	ldw	r2,56(r2)
 8045f0c:	18806126 	beq	r3,r2,8046094 <ip_rcv_phase2+0x4a0>
            (pip->ip_dest == p->net->n_netbr))
 8045f10:	e0bfff17 	ldw	r2,-4(fp)
 8045f14:	10c00417 	ldw	r3,16(r2)
 8045f18:	e0bff817 	ldw	r2,-32(fp)
 8045f1c:	10800617 	ldw	r2,24(r2)
 8045f20:	10800e17 	ldw	r2,56(r2)
         if((pip->ip_dest == outnet->n_netbr) ||
 8045f24:	18805b26 	beq	r3,r2,8046094 <ip_rcv_phase2+0x4a0>
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
 8045f28:	e0bff817 	ldw	r2,-32(fp)
 8045f2c:	e0fffd17 	ldw	r3,-12(fp)
 8045f30:	10c00615 	stw	r3,24(r2)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
 8045f34:	e0bff817 	ldw	r2,-32(fp)
 8045f38:	10800417 	ldw	r2,16(r2)
 8045f3c:	e0fff817 	ldw	r3,-32(fp)
 8045f40:	18c00617 	ldw	r3,24(r3)
 8045f44:	18c00817 	ldw	r3,32(r3)
 8045f48:	10c5883a 	add	r2,r2,r3
 8045f4c:	e0fffd17 	ldw	r3,-12(fp)
 8045f50:	18c00917 	ldw	r3,36(r3)
 8045f54:	1880352e 	bgeu	r3,r2,804602c <ip_rcv_phase2+0x438>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
 8045f58:	e0bfff17 	ldw	r2,-4(fp)
 8045f5c:	1080018b 	ldhu	r2,6(r2)
 8045f60:	10bfffcc 	andi	r2,r2,65535
 8045f64:	1004d23a 	srli	r2,r2,8
 8045f68:	10bfffcc 	andi	r2,r2,65535
 8045f6c:	10c03fcc 	andi	r3,r2,255
 8045f70:	e0bfff17 	ldw	r2,-4(fp)
 8045f74:	1080018b 	ldhu	r2,6(r2)
 8045f78:	10bfffcc 	andi	r2,r2,65535
 8045f7c:	1004923a 	slli	r2,r2,8
 8045f80:	10bfffcc 	andi	r2,r2,65535
 8045f84:	1884b03a 	or	r2,r3,r2
 8045f88:	1090000c 	andi	r2,r2,16384
 8045f8c:	10001a26 	beq	r2,zero,8045ff8 <ip_rcv_phase2+0x404>
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 8045f90:	e0bfff17 	ldw	r2,-4(fp)
 8045f94:	10c00317 	ldw	r3,12(r2)
 8045f98:	e0bff817 	ldw	r2,-32(fp)
 8045f9c:	10800617 	ldw	r2,24(r2)
 8045fa0:	11000a17 	ldw	r4,40(r2)
 8045fa4:	e0bff817 	ldw	r2,-32(fp)
 8045fa8:	10800617 	ldw	r2,24(r2)
 8045fac:	d8800015 	stw	r2,0(sp)
 8045fb0:	01c00104 	movi	r7,4
 8045fb4:	e1bfff17 	ldw	r6,-4(fp)
 8045fb8:	200b883a 	mov	r5,r4
 8045fbc:	1809883a 	mov	r4,r3
 8045fc0:	804d8640 	call	804d864 <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
 8045fc4:	008201b4 	movhi	r2,2054
 8045fc8:	10802517 	ldw	r2,148(r2)
 8045fcc:	10c00044 	addi	r3,r2,1
 8045fd0:	008201b4 	movhi	r2,2054
 8045fd4:	10c02515 	stw	r3,148(r2)
               LOCK_NET_RESOURCE(FREEQ_RESID);
 8045fd8:	01000084 	movi	r4,2
 8045fdc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
               pk_free(p);
 8045fe0:	e13ff817 	ldw	r4,-32(fp)
 8045fe4:	802f9440 	call	802f944 <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8045fe8:	01000084 	movi	r4,2
 8045fec:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
 8045ff0:	00bffd44 	movi	r2,-11
 8045ff4:	00006206 	br	8046180 <ip_rcv_phase2+0x58c>
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
 8045ff8:	e0bfff17 	ldw	r2,-4(fp)
 8045ffc:	10800203 	ldbu	r2,8(r2)
 8046000:	10bfffc4 	addi	r2,r2,-1
 8046004:	1007883a 	mov	r3,r2
 8046008:	e0bfff17 	ldw	r2,-4(fp)
 804600c:	10c00205 	stb	r3,8(r2)
            err = ip_fragment(p, firsthop);
 8046010:	e0bff917 	ldw	r2,-28(fp)
 8046014:	100b883a 	mov	r5,r2
 8046018:	e13ff817 	ldw	r4,-32(fp)
 804601c:	80431700 	call	8043170 <ip_fragment>
 8046020:	e0bffc15 	stw	r2,-16(fp)
            IN_PROFILER(PF_IP, PF_EXIT);
            return(err);
 8046024:	e0bffc17 	ldw	r2,-16(fp)
 8046028:	00005506 	br	8046180 <ip_rcv_phase2+0x58c>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
 804602c:	e0bfff17 	ldw	r2,-4(fp)
 8046030:	10800203 	ldbu	r2,8(r2)
 8046034:	10bfffc4 	addi	r2,r2,-1
 8046038:	1007883a 	mov	r3,r2
 804603c:	e0bfff17 	ldw	r2,-4(fp)
 8046040:	10c00205 	stb	r3,8(r2)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
 8046044:	e0bfff17 	ldw	r2,-4(fp)
 8046048:	1000028d 	sth	zero,10(r2)
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 804604c:	01400284 	movi	r5,10
 8046050:	e13fff17 	ldw	r4,-4(fp)
 8046054:	802b98c0 	call	802b98c <cksum>
 8046058:	0084303a 	nor	r2,zero,r2
 804605c:	1007883a 	mov	r3,r2
 8046060:	e0bfff17 	ldw	r2,-4(fp)
 8046064:	10c0028d 	sth	r3,10(r2)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
 8046068:	e0bff917 	ldw	r2,-28(fp)
 804606c:	100b883a 	mov	r5,r2
 8046070:	e13ff817 	ldw	r4,-32(fp)
 8046074:	80299b80 	call	80299b8 <ip2mac>
 8046078:	00004106 	br	8046180 <ip_rcv_phase2+0x58c>
         goto ours;
 804607c:	0001883a 	nop
 8046080:	00000506 	br	8046098 <ip_rcv_phase2+0x4a4>
      return(ENP_NOT_MINE);
#endif
   }

#if defined (IP_MULTICAST) || defined (IP_ROUTING)
ours:
 8046084:	0001883a 	nop
 8046088:	00000306 	br	8046098 <ip_rcv_phase2+0x4a4>
            goto ours;
 804608c:	0001883a 	nop
 8046090:	00000106 	br	8046098 <ip_rcv_phase2+0x4a4>
            goto ours;            
 8046094:	0001883a 	nop
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
 8046098:	e0bfff17 	ldw	r2,-4(fp)
 804609c:	1080018b 	ldhu	r2,6(r2)
 80460a0:	10bfffcc 	andi	r2,r2,65535
 80460a4:	1004d23a 	srli	r2,r2,8
 80460a8:	1007883a 	mov	r3,r2
 80460ac:	e0bfff17 	ldw	r2,-4(fp)
 80460b0:	1080018b 	ldhu	r2,6(r2)
 80460b4:	10bfffcc 	andi	r2,r2,65535
 80460b8:	1004923a 	slli	r2,r2,8
 80460bc:	1884b03a 	or	r2,r3,r2
 80460c0:	e0bffa8d 	sth	r2,-22(fp)
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 80460c4:	e0bffa8b 	ldhu	r2,-22(fp)
 80460c8:	1088000c 	andi	r2,r2,8192
 80460cc:	1000051e 	bne	r2,zero,80460e4 <ip_rcv_phase2+0x4f0>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
 80460d0:	e0fffa8b 	ldhu	r3,-22(fp)
 80460d4:	00bffff4 	movhi	r2,65535
 80460d8:	1087ffc4 	addi	r2,r2,8191
 80460dc:	1884703a 	and	r2,r3,r2
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 80460e0:	10002526 	beq	r2,zero,8046178 <ip_rcv_phase2+0x584>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 80460e4:	d0a07e17 	ldw	r2,-32264(gp)
 80460e8:	1081000c 	andi	r2,r2,1024
 80460ec:	10001a26 	beq	r2,zero,8046158 <ip_rcv_phase2+0x564>
 80460f0:	d0a07e17 	ldw	r2,-32264(gp)
 80460f4:	1080800c 	andi	r2,r2,512
 80460f8:	10001726 	beq	r2,zero,8046158 <ip_rcv_phase2+0x564>
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
          PUSH_IPADDR(pip->ip_src));
 80460fc:	e0bfff17 	ldw	r2,-4(fp)
 8046100:	10800317 	ldw	r2,12(r2)
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8046104:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(pip->ip_src));
 8046108:	e0bfff17 	ldw	r2,-4(fp)
 804610c:	10800317 	ldw	r2,12(r2)
 8046110:	1004d23a 	srli	r2,r2,8
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8046114:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(pip->ip_src));
 8046118:	e0bfff17 	ldw	r2,-4(fp)
 804611c:	10800317 	ldw	r2,12(r2)
 8046120:	1004d43a 	srli	r2,r2,16
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8046124:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(pip->ip_src));
 8046128:	e0bfff17 	ldw	r2,-4(fp)
 804612c:	10800317 	ldw	r2,12(r2)
 8046130:	1004d63a 	srli	r2,r2,24
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8046134:	d8800015 	stw	r2,0(sp)
 8046138:	280f883a 	mov	r7,r5
 804613c:	200d883a 	mov	r6,r4
 8046140:	180b883a 	mov	r5,r3
 8046144:	01020174 	movhi	r4,2053
 8046148:	2110e504 	addi	r4,r4,17300
 804614c:	8003b840 	call	8003b84 <printf>
         ip_dump(p);
 8046150:	e13ff817 	ldw	r4,-32(fp)
 8046154:	80437b00 	call	80437b0 <ip_dump>
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
 8046158:	008201b4 	movhi	r2,2054
 804615c:	10802117 	ldw	r2,132(r2)
 8046160:	10c00044 	addi	r3,r2,1
 8046164:	008201b4 	movhi	r2,2054
 8046168:	10c02115 	stw	r3,132(r2)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
 804616c:	e13ff817 	ldw	r4,-32(fp)
 8046170:	80443240 	call	8044324 <ip_reassm>
 8046174:	00000206 	br	8046180 <ip_rcv_phase2+0x58c>
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
 8046178:	e13ff817 	ldw	r4,-32(fp)
 804617c:	80461940 	call	8046194 <ip_demux>
}
 8046180:	e037883a 	mov	sp,fp
 8046184:	dfc00117 	ldw	ra,4(sp)
 8046188:	df000017 	ldw	fp,0(sp)
 804618c:	dec00204 	addi	sp,sp,8
 8046190:	f800283a 	ret

08046194 <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 8046194:	defff904 	addi	sp,sp,-28
 8046198:	dfc00615 	stw	ra,24(sp)
 804619c:	df000515 	stw	fp,20(sp)
 80461a0:	df000504 	addi	fp,sp,20
 80461a4:	e13ffd15 	stw	r4,-12(fp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
 80461a8:	e0bffd17 	ldw	r2,-12(fp)
 80461ac:	10800317 	ldw	r2,12(r2)
 80461b0:	e0bffe15 	stw	r2,-8(fp)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
 80461b4:	e0bffe17 	ldw	r2,-8(fp)
 80461b8:	10800003 	ldbu	r2,0(r2)
 80461bc:	10803fcc 	andi	r2,r2,255
 80461c0:	10801160 	cmpeqi	r2,r2,69
 80461c4:	1000131e 	bne	r2,zero,8046214 <ip_demux+0x80>
   {
      if((pip->ip_ver_ihl < 0x45) ||
 80461c8:	e0bffe17 	ldw	r2,-8(fp)
 80461cc:	10800003 	ldbu	r2,0(r2)
 80461d0:	10803fcc 	andi	r2,r2,255
 80461d4:	10801170 	cmpltui	r2,r2,69
 80461d8:	1000051e 	bne	r2,zero,80461f0 <ip_demux+0x5c>
         (pip->ip_ver_ihl > 0x47))
 80461dc:	e0bffe17 	ldw	r2,-8(fp)
 80461e0:	10800003 	ldbu	r2,0(r2)
      if((pip->ip_ver_ihl < 0x45) ||
 80461e4:	10803fcc 	andi	r2,r2,255
 80461e8:	10801230 	cmpltui	r2,r2,72
 80461ec:	1000091e 	bne	r2,zero,8046214 <ip_demux+0x80>
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
 80461f0:	e0bffe17 	ldw	r2,-8(fp)
 80461f4:	10800003 	ldbu	r2,0(r2)
 80461f8:	10803fcc 	andi	r2,r2,255
 80461fc:	100b883a 	mov	r5,r2
 8046200:	01020174 	movhi	r4,2053
 8046204:	2110ee04 	addi	r4,r4,17336
 8046208:	8003b840 	call	8003b84 <printf>
         return ENP_LOGIC;
 804620c:	00bffd44 	movi	r2,-11
 8046210:	0000c606 	br	804652c <ip_demux+0x398>

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
 8046214:	e0bffe17 	ldw	r2,-8(fp)
 8046218:	10c00317 	ldw	r3,12(r2)
 804621c:	e0bffd17 	ldw	r2,-12(fp)
 8046220:	10c00715 	stw	r3,28(r2)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8046224:	d0a07e17 	ldw	r2,-32264(gp)
 8046228:	1081000c 	andi	r2,r2,1024
 804622c:	10002126 	beq	r2,zero,80462b4 <ip_demux+0x120>
 8046230:	d0a07e17 	ldw	r2,-32264(gp)
 8046234:	1080800c 	andi	r2,r2,512
 8046238:	10001e26 	beq	r2,zero,80462b4 <ip_demux+0x120>
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 804623c:	e0bffe17 	ldw	r2,-8(fp)
 8046240:	10800243 	ldbu	r2,9(r2)
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8046244:	11003fcc 	andi	r4,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 8046248:	e0bffe17 	ldw	r2,-8(fp)
 804624c:	10800317 	ldw	r2,12(r2)
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8046250:	11403fcc 	andi	r5,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 8046254:	e0bffe17 	ldw	r2,-8(fp)
 8046258:	10800317 	ldw	r2,12(r2)
 804625c:	1004d23a 	srli	r2,r2,8
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8046260:	11803fcc 	andi	r6,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 8046264:	e0bffe17 	ldw	r2,-8(fp)
 8046268:	10800317 	ldw	r2,12(r2)
 804626c:	1004d43a 	srli	r2,r2,16
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8046270:	10803fcc 	andi	r2,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 8046274:	e0fffe17 	ldw	r3,-8(fp)
 8046278:	18c00317 	ldw	r3,12(r3)
 804627c:	1806d63a 	srli	r3,r3,24
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8046280:	d8c00115 	stw	r3,4(sp)
 8046284:	d8800015 	stw	r2,0(sp)
 8046288:	300f883a 	mov	r7,r6
 804628c:	280d883a 	mov	r6,r5
 8046290:	200b883a 	mov	r5,r4
 8046294:	01020174 	movhi	r4,2053
 8046298:	2110f504 	addi	r4,r4,17364
 804629c:	8003b840 	call	8003b84 <printf>
      if (NDEBUG & DUMP) ip_dump(p);
 80462a0:	d0a07e17 	ldw	r2,-32264(gp)
 80462a4:	1080008c 	andi	r2,r2,2
 80462a8:	10000226 	beq	r2,zero,80462b4 <ip_demux+0x120>
 80462ac:	e13ffd17 	ldw	r4,-12(fp)
 80462b0:	80437b00 	call	80437b0 <ip_dump>
   }
#endif

   switch (pip->ip_prot)
 80462b4:	e0bffe17 	ldw	r2,-8(fp)
 80462b8:	10800243 	ldbu	r2,9(r2)
 80462bc:	10803fcc 	andi	r2,r2,255
 80462c0:	10c00460 	cmpeqi	r3,r2,17
 80462c4:	18000b1e 	bne	r3,zero,80462f4 <ip_demux+0x160>
 80462c8:	10c00488 	cmpgei	r3,r2,18
 80462cc:	18002d1e 	bne	r3,zero,8046384 <ip_demux+0x1f0>
 80462d0:	10c001a0 	cmpeqi	r3,r2,6
 80462d4:	1800221e 	bne	r3,zero,8046360 <ip_demux+0x1cc>
 80462d8:	10c001c8 	cmpgei	r3,r2,7
 80462dc:	1800291e 	bne	r3,zero,8046384 <ip_demux+0x1f0>
 80462e0:	10c00060 	cmpeqi	r3,r2,1
 80462e4:	18000c1e 	bne	r3,zero,8046318 <ip_demux+0x184>
 80462e8:	108000a0 	cmpeqi	r2,r2,2
 80462ec:	1000131e 	bne	r2,zero,804633c <ip_demux+0x1a8>
 80462f0:	00002406 	br	8046384 <ip_demux+0x1f0>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
 80462f4:	008201b4 	movhi	r2,2054
 80462f8:	10801c17 	ldw	r2,112(r2)
 80462fc:	10c00044 	addi	r3,r2,1
 8046300:	008201b4 	movhi	r2,2054
 8046304:	10c01c15 	stw	r3,112(r2)
      err = udpdemux(p);
 8046308:	e13ffd17 	ldw	r4,-12(fp)
 804630c:	80473c80 	call	80473c8 <udpdemux>
 8046310:	e0bfff15 	stw	r2,-4(fp)
      break;
 8046314:	00002406 	br	80463a8 <ip_demux+0x214>
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
 8046318:	008201b4 	movhi	r2,2054
 804631c:	10801c17 	ldw	r2,112(r2)
 8046320:	10c00044 	addi	r3,r2,1
 8046324:	008201b4 	movhi	r2,2054
 8046328:	10c01c15 	stw	r3,112(r2)
      err = icmprcv(p);
 804632c:	e13ffd17 	ldw	r4,-12(fp)
 8046330:	804cd880 	call	804cd88 <icmprcv>
 8046334:	e0bfff15 	stw	r2,-4(fp)
      break;
 8046338:	00001b06 	br	80463a8 <ip_demux+0x214>
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
 804633c:	008201b4 	movhi	r2,2054
 8046340:	10801c17 	ldw	r2,112(r2)
 8046344:	10c00044 	addi	r3,r2,1
 8046348:	008201b4 	movhi	r2,2054
 804634c:	10c01c15 	stw	r3,112(r2)
      err = igmp_input(p);
 8046350:	e13ffd17 	ldw	r4,-12(fp)
 8046354:	8029fe40 	call	8029fe4 <igmp_input>
 8046358:	e0bfff15 	stw	r2,-4(fp)
      break;
 804635c:	00001206 	br	80463a8 <ip_demux+0x214>
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
 8046360:	008201b4 	movhi	r2,2054
 8046364:	10801c17 	ldw	r2,112(r2)
 8046368:	10c00044 	addi	r3,r2,1
 804636c:	008201b4 	movhi	r2,2054
 8046370:	10c01c15 	stw	r3,112(r2)
      err = tcp_rcv(p);
 8046374:	e13ffd17 	ldw	r4,-12(fp)
 8046378:	803198c0 	call	803198c <tcp_rcv>
 804637c:	e0bfff15 	stw	r2,-4(fp)
      break;
 8046380:	00000906 	br	80463a8 <ip_demux+0x214>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
 8046384:	008201b4 	movhi	r2,2054
 8046388:	10801c17 	ldw	r2,112(r2)
 804638c:	10c00044 	addi	r3,r2,1
 8046390:	008201b4 	movhi	r2,2054
 8046394:	10c01c15 	stw	r3,112(r2)
      err = ip_raw_input(p);
 8046398:	e13ffd17 	ldw	r4,-12(fp)
 804639c:	8046a640 	call	8046a64 <ip_raw_input>
 80463a0:	e0bfff15 	stw	r2,-4(fp)
      break;
 80463a4:	0001883a 	nop
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
 80463a8:	e0bfff17 	ldw	r2,-4(fp)
 80463ac:	10bffda0 	cmpeqi	r2,r2,-10
 80463b0:	1000021e 	bne	r2,zero,80463bc <ip_demux+0x228>
   {
      return err;
 80463b4:	e0bfff17 	ldw	r2,-4(fp)
 80463b8:	00005c06 	br	804652c <ip_demux+0x398>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 80463bc:	e0bffe17 	ldw	r2,-8(fp)
 80463c0:	10800417 	ldw	r2,16(r2)
 80463c4:	10bfffe0 	cmpeqi	r2,r2,-1
 80463c8:	10004c1e 	bne	r2,zero,80464fc <ip_demux+0x368>
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
 80463cc:	e0bffe17 	ldw	r2,-8(fp)
 80463d0:	10800417 	ldw	r2,16(r2)
 80463d4:	1006d63a 	srli	r3,r2,24
 80463d8:	e0bffe17 	ldw	r2,-8(fp)
 80463dc:	10800417 	ldw	r2,16(r2)
 80463e0:	1004d23a 	srli	r2,r2,8
 80463e4:	10bfc00c 	andi	r2,r2,65280
 80463e8:	1886b03a 	or	r3,r3,r2
 80463ec:	e0bffe17 	ldw	r2,-8(fp)
 80463f0:	10800417 	ldw	r2,16(r2)
 80463f4:	1004923a 	slli	r2,r2,8
 80463f8:	10803fec 	andhi	r2,r2,255
 80463fc:	1886b03a 	or	r3,r3,r2
 8046400:	e0bffe17 	ldw	r2,-8(fp)
 8046404:	10800417 	ldw	r2,16(r2)
 8046408:	1004963a 	slli	r2,r2,24
 804640c:	1884b03a 	or	r2,r3,r2
 8046410:	10fc002c 	andhi	r3,r2,61440
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8046414:	00b80034 	movhi	r2,57344
 8046418:	18803826 	beq	r3,r2,80464fc <ip_demux+0x368>
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
 804641c:	e0bffe17 	ldw	r2,-8(fp)
 8046420:	10c00417 	ldw	r3,16(r2)
 8046424:	e0bffd17 	ldw	r2,-12(fp)
 8046428:	10800617 	ldw	r2,24(r2)
 804642c:	10800e17 	ldw	r2,56(r2)
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
 8046430:	18803226 	beq	r3,r2,80464fc <ip_demux+0x368>
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8046434:	e0bffe17 	ldw	r2,-8(fp)
 8046438:	10c00417 	ldw	r3,16(r2)
 804643c:	e0bffd17 	ldw	r2,-12(fp)
 8046440:	10800617 	ldw	r2,24(r2)
 8046444:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
 8046448:	18802c26 	beq	r3,r2,80464fc <ip_demux+0x368>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
 804644c:	e0bffe17 	ldw	r2,-8(fp)
 8046450:	10c00417 	ldw	r3,16(r2)
 8046454:	e0bffd17 	ldw	r2,-12(fp)
 8046458:	10800617 	ldw	r2,24(r2)
 804645c:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8046460:	18802626 	beq	r3,r2,80464fc <ip_demux+0x368>
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
 8046464:	e0bffd17 	ldw	r2,-12(fp)
 8046468:	10800617 	ldw	r2,24(r2)
 804646c:	10c00a17 	ldw	r3,40(r2)
 8046470:	e0bffd17 	ldw	r2,-12(fp)
 8046474:	10800617 	ldw	r2,24(r2)
 8046478:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
 804647c:	18801f26 	beq	r3,r2,80464fc <ip_demux+0x368>
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8046480:	d0a07e17 	ldw	r2,-32264(gp)
 8046484:	1081000c 	andi	r2,r2,1024
 8046488:	10000f26 	beq	r2,zero,80464c8 <ip_demux+0x334>
 804648c:	d0a07e17 	ldw	r2,-32264(gp)
 8046490:	1080800c 	andi	r2,r2,512
 8046494:	10000c26 	beq	r2,zero,80464c8 <ip_demux+0x334>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
 8046498:	e0bffe17 	ldw	r2,-8(fp)
 804649c:	10800243 	ldbu	r2,9(r2)
 80464a0:	10803fcc 	andi	r2,r2,255
 80464a4:	100b883a 	mov	r5,r2
 80464a8:	01020174 	movhi	r4,2053
 80464ac:	2110ff04 	addi	r4,r4,17404
 80464b0:	8003b840 	call	8003b84 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 80464b4:	d0a07e17 	ldw	r2,-32264(gp)
 80464b8:	1080008c 	andi	r2,r2,2
 80464bc:	10000226 	beq	r2,zero,80464c8 <ip_demux+0x334>
 80464c0:	e13ffd17 	ldw	r4,-12(fp)
 80464c4:	80437b00 	call	80437b0 <ip_dump>
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
 80464c8:	e0bffe17 	ldw	r2,-8(fp)
 80464cc:	10c00317 	ldw	r3,12(r2)
 80464d0:	e0bffd17 	ldw	r2,-12(fp)
 80464d4:	10800617 	ldw	r2,24(r2)
 80464d8:	11000a17 	ldw	r4,40(r2)
 80464dc:	e0bffd17 	ldw	r2,-12(fp)
 80464e0:	10800617 	ldw	r2,24(r2)
 80464e4:	d8800015 	stw	r2,0(sp)
 80464e8:	01c00084 	movi	r7,2
 80464ec:	e1bffe17 	ldw	r6,-8(fp)
 80464f0:	200b883a 	mov	r5,r4
 80464f4:	1809883a 	mov	r4,r3
 80464f8:	804d8640 	call	804d864 <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
 80464fc:	008201b4 	movhi	r2,2054
 8046500:	10801a17 	ldw	r2,104(r2)
 8046504:	10c00044 	addi	r3,r2,1
 8046508:	008201b4 	movhi	r2,2054
 804650c:	10c01a15 	stw	r3,104(r2)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8046510:	01000084 	movi	r4,2
 8046514:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 8046518:	e13ffd17 	ldw	r4,-12(fp)
 804651c:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8046520:	01000084 	movi	r4,2
 8046524:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return ENP_NOT_MINE;
 8046528:	00800084 	movi	r2,2
}
 804652c:	e037883a 	mov	sp,fp
 8046530:	dfc00117 	ldw	ra,4(sp)
 8046534:	df000017 	ldw	fp,0(sp)
 8046538:	dec00204 	addi	sp,sp,8
 804653c:	f800283a 	ret

08046540 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
 8046540:	defff904 	addi	sp,sp,-28
 8046544:	dfc00615 	stw	ra,24(sp)
 8046548:	df000515 	stw	fp,20(sp)
 804654c:	df000504 	addi	fp,sp,20
 8046550:	e13ffd15 	stw	r4,-12(fp)
 8046554:	e17ffc15 	stw	r5,-16(fp)
 8046558:	e1bffb15 	stw	r6,-20(fp)
   struct in_multi *inm = (struct in_multi *)NULL;
 804655c:	e03fff15 	stw	zero,-4(fp)
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
 8046560:	e0bffd17 	ldw	r2,-12(fp)
 8046564:	10000326 	beq	r2,zero,8046574 <in_addmulti+0x34>
 8046568:	e0bffd17 	ldw	r2,-12(fp)
 804656c:	10800017 	ldw	r2,0(r2)
 8046570:	1000021e 	bne	r2,zero,804657c <in_addmulti+0x3c>
      return ((struct in_multi *)NULL);  
 8046574:	0005883a 	mov	r2,zero
 8046578:	00003f06 	br	8046678 <in_addmulti+0x138>

   ENTER_CRIT_SECTION(netp);
 804657c:	80303680 	call	8030368 <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
 8046580:	e0bffb17 	ldw	r2,-20(fp)
 8046584:	108001a0 	cmpeqi	r2,r2,6
 8046588:	1000061e 	bne	r2,zero,80465a4 <in_addmulti+0x64>
      inm = lookup_mcast(*ap, netp);
 804658c:	e0bffd17 	ldw	r2,-12(fp)
 8046590:	10800017 	ldw	r2,0(r2)
 8046594:	e17ffc17 	ldw	r5,-16(fp)
 8046598:	1009883a 	mov	r4,r2
 804659c:	80467980 	call	8046798 <lookup_mcast>
 80465a0:	e0bfff15 	stw	r2,-4(fp)
#endif

   if (inm != (struct in_multi *)NULL) 
 80465a4:	e0bfff17 	ldw	r2,-4(fp)
 80465a8:	10000626 	beq	r2,zero,80465c4 <in_addmulti+0x84>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
 80465ac:	e0bfff17 	ldw	r2,-4(fp)
 80465b0:	10800217 	ldw	r2,8(r2)
 80465b4:	10c00044 	addi	r3,r2,1
 80465b8:	e0bfff17 	ldw	r2,-4(fp)
 80465bc:	10c00215 	stw	r3,8(r2)
 80465c0:	00002b06 	br	8046670 <in_addmulti+0x130>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
 80465c4:	01000604 	movi	r4,24
 80465c8:	8030d080 	call	8030d08 <npalloc>
 80465cc:	e0bfff15 	stw	r2,-4(fp)

      if (inm == (struct in_multi *)NULL) 
 80465d0:	e0bfff17 	ldw	r2,-4(fp)
 80465d4:	1000031e 	bne	r2,zero,80465e4 <in_addmulti+0xa4>
      {
         EXIT_CRIT_SECTION(netp);
 80465d8:	80303c80 	call	80303c8 <irq_Unmask>
         return ((struct in_multi *)NULL);
 80465dc:	0005883a 	mov	r2,zero
 80465e0:	00002506 	br	8046678 <in_addmulti+0x138>
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
 80465e4:	e0bffb17 	ldw	r2,-20(fp)
 80465e8:	108001a0 	cmpeqi	r2,r2,6
 80465ec:	1000041e 	bne	r2,zero,8046600 <in_addmulti+0xc0>
         inm->inm_addr = *ap;
 80465f0:	e0bffd17 	ldw	r2,-12(fp)
 80465f4:	10c00017 	ldw	r3,0(r2)
 80465f8:	e0bfff17 	ldw	r2,-4(fp)
 80465fc:	10c00015 	stw	r3,0(r2)
#endif
      inm->inm_netp = netp;
 8046600:	e0bfff17 	ldw	r2,-4(fp)
 8046604:	e0fffc17 	ldw	r3,-16(fp)
 8046608:	10c00115 	stw	r3,4(r2)
      inm->inm_refcount = 1;
 804660c:	e0bfff17 	ldw	r2,-4(fp)
 8046610:	00c00044 	movi	r3,1
 8046614:	10c00215 	stw	r3,8(r2)
      inm->inm_next = netp->mc_list;
 8046618:	e0bffc17 	ldw	r2,-16(fp)
 804661c:	10c02c17 	ldw	r3,176(r2)
 8046620:	e0bfff17 	ldw	r2,-4(fp)
 8046624:	10c00515 	stw	r3,20(r2)
      netp->mc_list = inm;
 8046628:	e0bffc17 	ldw	r2,-16(fp)
 804662c:	e0ffff17 	ldw	r3,-4(fp)
 8046630:	10c02c15 	stw	r3,176(r2)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
 8046634:	e0bffc17 	ldw	r2,-16(fp)
 8046638:	10802b17 	ldw	r2,172(r2)
 804663c:	10000626 	beq	r2,zero,8046658 <in_addmulti+0x118>
         error = netp->n_mcastlist(inm);
 8046640:	e0bffc17 	ldw	r2,-16(fp)
 8046644:	10802b17 	ldw	r2,172(r2)
 8046648:	e13fff17 	ldw	r4,-4(fp)
 804664c:	103ee83a 	callr	r2
 8046650:	e0bffe15 	stw	r2,-8(fp)
 8046654:	00000106 	br	804665c <in_addmulti+0x11c>
      else
         error = 0;
 8046658:	e03ffe15 	stw	zero,-8(fp)
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
 804665c:	e0bfff17 	ldw	r2,-4(fp)
 8046660:	10800017 	ldw	r2,0(r2)
 8046664:	10000226 	beq	r2,zero,8046670 <in_addmulti+0x130>
 8046668:	e13fff17 	ldw	r4,-4(fp)
 804666c:	802a49c0 	call	802a49c <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
 8046670:	80303c80 	call	80303c8 <irq_Unmask>
   USE_ARG(error);

   return (inm);
 8046674:	e0bfff17 	ldw	r2,-4(fp)
}
 8046678:	e037883a 	mov	sp,fp
 804667c:	dfc00117 	ldw	ra,4(sp)
 8046680:	df000017 	ldw	fp,0(sp)
 8046684:	dec00204 	addi	sp,sp,8
 8046688:	f800283a 	ret

0804668c <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
 804668c:	defffa04 	addi	sp,sp,-24
 8046690:	dfc00515 	stw	ra,20(sp)
 8046694:	df000415 	stw	fp,16(sp)
 8046698:	df000404 	addi	fp,sp,16
 804669c:	e13ffc15 	stw	r4,-16(fp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
 80466a0:	e0bffc17 	ldw	r2,-16(fp)
 80466a4:	10800117 	ldw	r2,4(r2)
 80466a8:	e0bffd15 	stw	r2,-12(fp)
   int error;

   ENTER_CRIT_SECTION(inm);
 80466ac:	80303680 	call	8030368 <irq_Mask>
   if (--inm->inm_refcount == 0) 
 80466b0:	e0bffc17 	ldw	r2,-16(fp)
 80466b4:	10800217 	ldw	r2,8(r2)
 80466b8:	10ffffc4 	addi	r3,r2,-1
 80466bc:	e0bffc17 	ldw	r2,-16(fp)
 80466c0:	10c00215 	stw	r3,8(r2)
 80466c4:	e0bffc17 	ldw	r2,-16(fp)
 80466c8:	10800217 	ldw	r2,8(r2)
 80466cc:	10002b1e 	bne	r2,zero,804677c <in_delmulti+0xf0>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 80466d0:	e0bffd17 	ldw	r2,-12(fp)
 80466d4:	10802c17 	ldw	r2,176(r2)
 80466d8:	e0bfff15 	stw	r2,-4(fp)
 80466dc:	00001406 	br	8046730 <in_delmulti+0xa4>
      {
         if(p == inm)   /* inm is first in mc_list */
 80466e0:	e0ffff17 	ldw	r3,-4(fp)
 80466e4:	e0bffc17 	ldw	r2,-16(fp)
 80466e8:	1880051e 	bne	r3,r2,8046700 <in_delmulti+0x74>
         {
            netp->mc_list = p->inm_next;  /* unlink */
 80466ec:	e0bfff17 	ldw	r2,-4(fp)
 80466f0:	10c00517 	ldw	r3,20(r2)
 80466f4:	e0bffd17 	ldw	r2,-12(fp)
 80466f8:	10c02c15 	stw	r3,176(r2)
            break;
 80466fc:	00000e06 	br	8046738 <in_delmulti+0xac>
         }
         else if(p->inm_next == inm)   /* inm is next */
 8046700:	e0bfff17 	ldw	r2,-4(fp)
 8046704:	10800517 	ldw	r2,20(r2)
 8046708:	e0fffc17 	ldw	r3,-16(fp)
 804670c:	1880051e 	bne	r3,r2,8046724 <in_delmulti+0x98>
         {
            p->inm_next = inm->inm_next;  /* unlink */
 8046710:	e0bffc17 	ldw	r2,-16(fp)
 8046714:	10c00517 	ldw	r3,20(r2)
 8046718:	e0bfff17 	ldw	r2,-4(fp)
 804671c:	10c00515 	stw	r3,20(r2)
            break;
 8046720:	00000506 	br	8046738 <in_delmulti+0xac>
      for (p = netp->mc_list; p; p = p->inm_next)
 8046724:	e0bfff17 	ldw	r2,-4(fp)
 8046728:	10800517 	ldw	r2,20(r2)
 804672c:	e0bfff15 	stw	r2,-4(fp)
 8046730:	e0bfff17 	ldw	r2,-4(fp)
 8046734:	103fea1e 	bne	r2,zero,80466e0 <in_delmulti+0x54>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 8046738:	e0bffd17 	ldw	r2,-12(fp)
 804673c:	10802b17 	ldw	r2,172(r2)
 8046740:	10000626 	beq	r2,zero,804675c <in_delmulti+0xd0>
         error = netp->n_mcastlist(inm);
 8046744:	e0bffd17 	ldw	r2,-12(fp)
 8046748:	10802b17 	ldw	r2,172(r2)
 804674c:	e13ffc17 	ldw	r4,-16(fp)
 8046750:	103ee83a 	callr	r2
 8046754:	e0bffe15 	stw	r2,-8(fp)
 8046758:	00000106 	br	8046760 <in_delmulti+0xd4>
      else
         error = 0;
 804675c:	e03ffe15 	stw	zero,-8(fp)
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
 8046760:	e0bffc17 	ldw	r2,-16(fp)
 8046764:	10800017 	ldw	r2,0(r2)
 8046768:	10000226 	beq	r2,zero,8046774 <in_delmulti+0xe8>
 804676c:	e13ffc17 	ldw	r4,-16(fp)
 8046770:	802a6c80 	call	802a6c8 <igmp_leavegroup>
#endif      

      IM_FREE(inm);
 8046774:	e13ffc17 	ldw	r4,-16(fp)
 8046778:	8030d3c0 	call	8030d3c <npfree>
   }

   EXIT_CRIT_SECTION(inm);
 804677c:	80303c80 	call	80303c8 <irq_Unmask>
   USE_ARG(error);
}
 8046780:	0001883a 	nop
 8046784:	e037883a 	mov	sp,fp
 8046788:	dfc00117 	ldw	ra,4(sp)
 804678c:	df000017 	ldw	fp,0(sp)
 8046790:	dec00204 	addi	sp,sp,8
 8046794:	f800283a 	ret

08046798 <lookup_mcast>:
 * RETURNS: pointer to mcast addr structure, or NULL if not found.
 */

struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
 8046798:	defffc04 	addi	sp,sp,-16
 804679c:	df000315 	stw	fp,12(sp)
 80467a0:	df000304 	addi	fp,sp,12
 80467a4:	e13ffe15 	stw	r4,-8(fp)
 80467a8:	e17ffd15 	stw	r5,-12(fp)
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 80467ac:	e0bffd17 	ldw	r2,-12(fp)
 80467b0:	10802c17 	ldw	r2,176(r2)
 80467b4:	e0bfff15 	stw	r2,-4(fp)
 80467b8:	00000906 	br	80467e0 <lookup_mcast+0x48>
   {
      if(imp->inm_addr == addr)
 80467bc:	e0bfff17 	ldw	r2,-4(fp)
 80467c0:	10800017 	ldw	r2,0(r2)
 80467c4:	e0fffe17 	ldw	r3,-8(fp)
 80467c8:	1880021e 	bne	r3,r2,80467d4 <lookup_mcast+0x3c>
         return imp;
 80467cc:	e0bfff17 	ldw	r2,-4(fp)
 80467d0:	00000606 	br	80467ec <lookup_mcast+0x54>
   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 80467d4:	e0bfff17 	ldw	r2,-4(fp)
 80467d8:	10800517 	ldw	r2,20(r2)
 80467dc:	e0bfff15 	stw	r2,-4(fp)
 80467e0:	e0bfff17 	ldw	r2,-4(fp)
 80467e4:	103ff51e 	bne	r2,zero,80467bc <lookup_mcast+0x24>
   }
   return NULL;   /* addr not found in mcast list */
 80467e8:	0005883a 	mov	r2,zero
}
 80467ec:	e037883a 	mov	sp,fp
 80467f0:	df000017 	ldw	fp,0(sp)
 80467f4:	dec00104 	addi	sp,sp,4
 80467f8:	f800283a 	ret

080467fc <prep_ifaces>:
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
 80467fc:	defffd04 	addi	sp,sp,-12
 8046800:	dfc00215 	stw	ra,8(sp)
 8046804:	df000115 	stw	fp,4(sp)
 8046808:	df000104 	addi	fp,sp,4
 804680c:	e13fff15 	stw	r4,-4(fp)
   if (port_prep)
 8046810:	d0a0c517 	ldw	r2,-31980(gp)
 8046814:	10000426 	beq	r2,zero,8046828 <prep_ifaces+0x2c>
      ifaces_found = port_prep(ifaces_found);
 8046818:	d0a0c517 	ldw	r2,-31980(gp)
 804681c:	e13fff17 	ldw	r4,-4(fp)
 8046820:	103ee83a 	callr	r2
 8046824:	e0bfff15 	stw	r2,-4(fp)

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
 8046828:	e0bfff17 	ldw	r2,-4(fp)
 804682c:	d0a07f15 	stw	r2,-32260(gp)

   initmsg("prepped %u interface%s, initializing...\n", 
 8046830:	e0bfff17 	ldw	r2,-4(fp)
 8046834:	10800058 	cmpnei	r2,r2,1
 8046838:	1000031e 	bne	r2,zero,8046848 <prep_ifaces+0x4c>
 804683c:	00820174 	movhi	r2,2053
 8046840:	10910704 	addi	r2,r2,17436
 8046844:	00000206 	br	8046850 <prep_ifaces+0x54>
 8046848:	00820174 	movhi	r2,2053
 804684c:	10910804 	addi	r2,r2,17440
 8046850:	100d883a 	mov	r6,r2
 8046854:	e17fff17 	ldw	r5,-4(fp)
 8046858:	01020174 	movhi	r4,2053
 804685c:	21110904 	addi	r4,r4,17444
 8046860:	8003b840 	call	8003b84 <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
 8046864:	e0bfff17 	ldw	r2,-4(fp)
}
 8046868:	e037883a 	mov	sp,fp
 804686c:	dfc00117 	ldw	ra,4(sp)
 8046870:	df000017 	ldw	fp,0(sp)
 8046874:	dec00204 	addi	sp,sp,8
 8046878:	f800283a 	ret

0804687c <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
 804687c:	defffd04 	addi	sp,sp,-12
 8046880:	dfc00215 	stw	ra,8(sp)
 8046884:	df000115 	stw	fp,4(sp)
 8046888:	df000104 	addi	fp,sp,4
 804688c:	e13fff15 	stw	r4,-4(fp)
   net_system_exit = TRUE; /* set flag for shutting down */
 8046890:	00800044 	movi	r2,1
 8046894:	d0a0c615 	stw	r2,-31976(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
 8046898:	8029e100 	call	8029e10 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
 804689c:	e13fff17 	ldw	r4,-4(fp)
 80468a0:	804dea40 	call	804dea4 <exit>

080468a4 <evtmap_setup>:
 * INPUT: None.
 * OUTPUT: None
 */
 
void evtmap_setup (void)
{
 80468a4:	deffff04 	addi	sp,sp,-4
 80468a8:	df000015 	stw	fp,0(sp)
 80468ac:	d839883a 	mov	fp,sp
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
 80468b0:	d020c905 	stb	zero,-31964(gp)
   so_evtmap_create = 0;
 80468b4:	d020c715 	stw	zero,-31972(gp)
   so_evtmap_delete = 0;
 80468b8:	d020c815 	stw	zero,-31968(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
 80468bc:	0001883a 	nop
 80468c0:	e037883a 	mov	sp,fp
 80468c4:	df000017 	ldw	fp,0(sp)
 80468c8:	dec00104 	addi	sp,sp,4
 80468cc:	f800283a 	ret

080468d0 <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
 80468d0:	defff904 	addi	sp,sp,-28
 80468d4:	dfc00615 	stw	ra,24(sp)
 80468d8:	df000515 	stw	fp,20(sp)
 80468dc:	df000504 	addi	fp,sp,20
 80468e0:	2005883a 	mov	r2,r4
 80468e4:	e17ffd15 	stw	r5,-12(fp)
 80468e8:	e1bffc15 	stw	r6,-16(fp)
 80468ec:	e1fffb15 	stw	r7,-20(fp)
 80468f0:	e0bffe05 	stb	r2,-8(fp)
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
 80468f4:	0009883a 	mov	r4,zero
 80468f8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
 80468fc:	01000604 	movi	r4,24
 8046900:	8030d080 	call	8030d08 <npalloc>
 8046904:	e0bfff15 	stw	r2,-4(fp)
   if (ep == NULL)
 8046908:	e0bfff17 	ldw	r2,-4(fp)
 804690c:	10000a1e 	bne	r2,zero,8046938 <ip_raw_open+0x68>
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
 8046910:	d0a07e17 	ldw	r2,-32264(gp)
 8046914:	1080010c 	andi	r2,r2,4
 8046918:	10000326 	beq	r2,zero,8046928 <ip_raw_open+0x58>
         dprintf("IP: Couldn't allocate ep storage.\n");
 804691c:	01020174 	movhi	r4,2053
 8046920:	21111404 	addi	r4,r4,17488
 8046924:	8003ca80 	call	8003ca8 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 8046928:	0009883a 	mov	r4,zero
 804692c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ep;
 8046930:	e0bfff17 	ldw	r2,-4(fp)
 8046934:	00001706 	br	8046994 <ip_raw_open+0xc4>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
 8046938:	e0bfff17 	ldw	r2,-4(fp)
 804693c:	e0fffd17 	ldw	r3,-12(fp)
 8046940:	10c00115 	stw	r3,4(r2)
   ep->ipr_faddr = faddr;
 8046944:	e0bfff17 	ldw	r2,-4(fp)
 8046948:	e0fffc17 	ldw	r3,-16(fp)
 804694c:	10c00215 	stw	r3,8(r2)
   ep->ipr_prot = prot;
 8046950:	e0bfff17 	ldw	r2,-4(fp)
 8046954:	e0fffe03 	ldbu	r3,-8(fp)
 8046958:	10c00505 	stb	r3,20(r2)
   ep->ipr_rcv = handler;
 804695c:	e0bfff17 	ldw	r2,-4(fp)
 8046960:	e0fffb17 	ldw	r3,-20(fp)
 8046964:	10c00315 	stw	r3,12(r2)
   ep->ipr_data = data;
 8046968:	e0bfff17 	ldw	r2,-4(fp)
 804696c:	e0c00217 	ldw	r3,8(fp)
 8046970:	10c00415 	stw	r3,16(r2)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
 8046974:	d0e0ca17 	ldw	r3,-31960(gp)
 8046978:	e0bfff17 	ldw	r2,-4(fp)
 804697c:	10c00015 	stw	r3,0(r2)
   ipraw_eps = ep;
 8046980:	e0bfff17 	ldw	r2,-4(fp)
 8046984:	d0a0ca15 	stw	r2,-31960(gp)

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
 8046988:	0009883a 	mov	r4,zero
 804698c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return ep;
 8046990:	e0bfff17 	ldw	r2,-4(fp)
}
 8046994:	e037883a 	mov	sp,fp
 8046998:	dfc00117 	ldw	ra,4(sp)
 804699c:	df000017 	ldw	fp,0(sp)
 80469a0:	dec00204 	addi	sp,sp,8
 80469a4:	f800283a 	ret

080469a8 <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
 80469a8:	defffb04 	addi	sp,sp,-20
 80469ac:	dfc00415 	stw	ra,16(sp)
 80469b0:	df000315 	stw	fp,12(sp)
 80469b4:	df000304 	addi	fp,sp,12
 80469b8:	e13ffd15 	stw	r4,-12(fp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
 80469bc:	0009883a 	mov	r4,zero
 80469c0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 80469c4:	e03fff15 	stw	zero,-4(fp)
 80469c8:	d0a0ca17 	ldw	r2,-31960(gp)
 80469cc:	e0bffe15 	stw	r2,-8(fp)
 80469d0:	00000806 	br	80469f4 <ip_raw_close+0x4c>
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
 80469d4:	e0fffe17 	ldw	r3,-8(fp)
 80469d8:	e0bffd17 	ldw	r2,-12(fp)
 80469dc:	18800826 	beq	r3,r2,8046a00 <ip_raw_close+0x58>
         break;
      prev_ep = curr_ep;
 80469e0:	e0bffe17 	ldw	r2,-8(fp)
 80469e4:	e0bfff15 	stw	r2,-4(fp)
        curr_ep = curr_ep->ipr_next)
 80469e8:	e0bffe17 	ldw	r2,-8(fp)
 80469ec:	10800017 	ldw	r2,0(r2)
 80469f0:	e0bffe15 	stw	r2,-8(fp)
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 80469f4:	e0bffe17 	ldw	r2,-8(fp)
 80469f8:	103ff61e 	bne	r2,zero,80469d4 <ip_raw_close+0x2c>
 80469fc:	00000106 	br	8046a04 <ip_raw_close+0x5c>
         break;
 8046a00:	0001883a 	nop
   }

   /* if we didn't find it, we can't close it, so just return */
   if (curr_ep == NULL)
 8046a04:	e0bffe17 	ldw	r2,-8(fp)
 8046a08:	1000041e 	bne	r2,zero,8046a1c <ip_raw_close+0x74>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
 8046a0c:	80301a80 	call	80301a8 <dtrap>
#endif /* NPDEBUG */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8046a10:	0009883a 	mov	r4,zero
 8046a14:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return;
 8046a18:	00000d06 	br	8046a50 <ip_raw_close+0xa8>
   }

   /* unlink it from the list */
   if (prev_ep)
 8046a1c:	e0bfff17 	ldw	r2,-4(fp)
 8046a20:	10000426 	beq	r2,zero,8046a34 <ip_raw_close+0x8c>
      prev_ep = curr_ep->ipr_next;
 8046a24:	e0bffe17 	ldw	r2,-8(fp)
 8046a28:	10800017 	ldw	r2,0(r2)
 8046a2c:	e0bfff15 	stw	r2,-4(fp)
 8046a30:	00000306 	br	8046a40 <ip_raw_close+0x98>
   else
      ipraw_eps = curr_ep->ipr_next;
 8046a34:	e0bffe17 	ldw	r2,-8(fp)
 8046a38:	10800017 	ldw	r2,0(r2)
 8046a3c:	d0a0ca15 	stw	r2,-31960(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
 8046a40:	e13ffe17 	ldw	r4,-8(fp)
 8046a44:	8030d3c0 	call	8030d3c <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 8046a48:	0009883a 	mov	r4,zero
 8046a4c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
}
 8046a50:	e037883a 	mov	sp,fp
 8046a54:	dfc00117 	ldw	ra,4(sp)
 8046a58:	df000017 	ldw	fp,0(sp)
 8046a5c:	dec00204 	addi	sp,sp,8
 8046a60:	f800283a 	ret

08046a64 <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
 8046a64:	defff604 	addi	sp,sp,-40
 8046a68:	dfc00915 	stw	ra,36(sp)
 8046a6c:	df000815 	stw	fp,32(sp)
 8046a70:	df000804 	addi	fp,sp,32
 8046a74:	e13ff815 	stw	r4,-32(fp)
   struct ip * pip;              /* the internet header */
   struct ipraw_ep * ep;
   struct ipraw_ep * next_ep;
   struct ipraw_ep * matched_ep = NULL;
 8046a78:	e03ffe15 	stw	zero,-8(fp)
   int err;
   int delivered;

   /* start out expecting to not deliver the packet */
   delivered = 0;
 8046a7c:	e03ffc15 	stw	zero,-16(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
 8046a80:	e0bff817 	ldw	r2,-32(fp)
 8046a84:	10800317 	ldw	r2,12(r2)
 8046a88:	e0bffb15 	stw	r2,-20(fp)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 8046a8c:	d0a0ca17 	ldw	r2,-31960(gp)
 8046a90:	e0bfff15 	stw	r2,-4(fp)
 8046a94:	00004c06 	br	8046bc8 <ip_raw_input+0x164>
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
 8046a98:	e0bfff17 	ldw	r2,-4(fp)
 8046a9c:	10800017 	ldw	r2,0(r2)
 8046aa0:	e0bffa15 	stw	r2,-24(fp)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 8046aa4:	e0bfff17 	ldw	r2,-4(fp)
 8046aa8:	10800503 	ldbu	r2,20(r2)
 8046aac:	10803fcc 	andi	r2,r2,255
 8046ab0:	10000726 	beq	r2,zero,8046ad0 <ip_raw_input+0x6c>
 8046ab4:	e0bfff17 	ldw	r2,-4(fp)
 8046ab8:	10c00503 	ldbu	r3,20(r2)
 8046abc:	e0bffb17 	ldw	r2,-20(fp)
 8046ac0:	10800243 	ldbu	r2,9(r2)
 8046ac4:	18c03fcc 	andi	r3,r3,255
 8046ac8:	10803fcc 	andi	r2,r2,255
 8046acc:	1880371e 	bne	r3,r2,8046bac <ip_raw_input+0x148>
         continue;
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
 8046ad0:	e0bfff17 	ldw	r2,-4(fp)
 8046ad4:	10800117 	ldw	r2,4(r2)
 8046ad8:	10000526 	beq	r2,zero,8046af0 <ip_raw_input+0x8c>
 8046adc:	e0bfff17 	ldw	r2,-4(fp)
 8046ae0:	10c00117 	ldw	r3,4(r2)
 8046ae4:	e0bffb17 	ldw	r2,-20(fp)
 8046ae8:	10800417 	ldw	r2,16(r2)
 8046aec:	1880311e 	bne	r3,r2,8046bb4 <ip_raw_input+0x150>
         continue;
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
 8046af0:	e0bfff17 	ldw	r2,-4(fp)
 8046af4:	10800217 	ldw	r2,8(r2)
 8046af8:	10000526 	beq	r2,zero,8046b10 <ip_raw_input+0xac>
 8046afc:	e0bfff17 	ldw	r2,-4(fp)
 8046b00:	10c00217 	ldw	r3,8(r2)
 8046b04:	e0bffb17 	ldw	r2,-20(fp)
 8046b08:	10800317 	ldw	r2,12(r2)
 8046b0c:	18802b1e 	bne	r3,r2,8046bbc <ip_raw_input+0x158>
         continue;

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
 8046b10:	e0bfff17 	ldw	r2,-4(fp)
 8046b14:	10800317 	ldw	r2,12(r2)
 8046b18:	10002926 	beq	r2,zero,8046bc0 <ip_raw_input+0x15c>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 8046b1c:	e0bffe17 	ldw	r2,-8(fp)
 8046b20:	10001f26 	beq	r2,zero,8046ba0 <ip_raw_input+0x13c>
 8046b24:	e0bffe17 	ldw	r2,-8(fp)
 8046b28:	10800317 	ldw	r2,12(r2)
 8046b2c:	10001c26 	beq	r2,zero,8046ba0 <ip_raw_input+0x13c>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
 8046b30:	e13ff817 	ldw	r4,-32(fp)
 8046b34:	8043c200 	call	8043c20 <ip_copypkt>
 8046b38:	e0bff915 	stw	r2,-28(fp)
            if (p2)
 8046b3c:	e0bff917 	ldw	r2,-28(fp)
 8046b40:	10001726 	beq	r2,zero,8046ba0 <ip_raw_input+0x13c>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
 8046b44:	0009883a 	mov	r4,zero
 8046b48:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
 8046b4c:	e0bffe17 	ldw	r2,-8(fp)
 8046b50:	10800317 	ldw	r2,12(r2)
 8046b54:	e0fffe17 	ldw	r3,-8(fp)
 8046b58:	18c00417 	ldw	r3,16(r3)
 8046b5c:	180b883a 	mov	r5,r3
 8046b60:	e13ff917 	ldw	r4,-28(fp)
 8046b64:	103ee83a 	callr	r2
 8046b68:	e0bffd15 	stw	r2,-12(fp)
               LOCK_NET_RESOURCE(NET_RESID);
 8046b6c:	0009883a 	mov	r4,zero
 8046b70:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
               if (err)
 8046b74:	e0bffd17 	ldw	r2,-12(fp)
 8046b78:	10000726 	beq	r2,zero,8046b98 <ip_raw_input+0x134>
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
 8046b7c:	01000084 	movi	r4,2
 8046b80:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
                  pk_free(p2);
 8046b84:	e13ff917 	ldw	r4,-28(fp)
 8046b88:	802f9440 	call	802f944 <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8046b8c:	01000084 	movi	r4,2
 8046b90:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
 8046b94:	00000206 	br	8046ba0 <ip_raw_input+0x13c>
               }
               else
                  delivered = 1;
 8046b98:	00800044 	movi	r2,1
 8046b9c:	e0bffc15 	stw	r2,-16(fp)
            }
         }
         matched_ep = ep;
 8046ba0:	e0bfff17 	ldw	r2,-4(fp)
 8046ba4:	e0bffe15 	stw	r2,-8(fp)
 8046ba8:	00000506 	br	8046bc0 <ip_raw_input+0x15c>
         continue;
 8046bac:	0001883a 	nop
 8046bb0:	00000306 	br	8046bc0 <ip_raw_input+0x15c>
         continue;
 8046bb4:	0001883a 	nop
 8046bb8:	00000106 	br	8046bc0 <ip_raw_input+0x15c>
         continue;
 8046bbc:	0001883a 	nop
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 8046bc0:	e0bffa17 	ldw	r2,-24(fp)
 8046bc4:	e0bfff15 	stw	r2,-4(fp)
 8046bc8:	e0bfff17 	ldw	r2,-4(fp)
 8046bcc:	103fb21e 	bne	r2,zero,8046a98 <ip_raw_input+0x34>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 8046bd0:	e0bffe17 	ldw	r2,-8(fp)
 8046bd4:	10001426 	beq	r2,zero,8046c28 <ip_raw_input+0x1c4>
 8046bd8:	e0bffe17 	ldw	r2,-8(fp)
 8046bdc:	10800317 	ldw	r2,12(r2)
 8046be0:	10001126 	beq	r2,zero,8046c28 <ip_raw_input+0x1c4>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 8046be4:	0009883a 	mov	r4,zero
 8046be8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
 8046bec:	e0bffe17 	ldw	r2,-8(fp)
 8046bf0:	10800317 	ldw	r2,12(r2)
 8046bf4:	e0fffe17 	ldw	r3,-8(fp)
 8046bf8:	18c00417 	ldw	r3,16(r3)
 8046bfc:	180b883a 	mov	r5,r3
 8046c00:	e13ff817 	ldw	r4,-32(fp)
 8046c04:	103ee83a 	callr	r2
 8046c08:	e0bffd15 	stw	r2,-12(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 8046c0c:	0009883a 	mov	r4,zero
 8046c10:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      if (err == 0)
 8046c14:	e0bffd17 	ldw	r2,-12(fp)
 8046c18:	10000a1e 	bne	r2,zero,8046c44 <ip_raw_input+0x1e0>
         delivered = 1;
 8046c1c:	00800044 	movi	r2,1
 8046c20:	e0bffc15 	stw	r2,-16(fp)
      if (err == 0)
 8046c24:	00000706 	br	8046c44 <ip_raw_input+0x1e0>
   }
   else
   {
      err = ENP_PARAM;
 8046c28:	00bffd84 	movi	r2,-10
 8046c2c:	e0bffd15 	stw	r2,-12(fp)
      ip_mib.ipUnknownProtos++;
 8046c30:	008201b4 	movhi	r2,2054
 8046c34:	10801a17 	ldw	r2,104(r2)
 8046c38:	10c00044 	addi	r3,r2,1
 8046c3c:	008201b4 	movhi	r2,2054
 8046c40:	10c01a15 	stw	r3,104(r2)
   }

   if (!delivered)
 8046c44:	e0bffc17 	ldw	r2,-16(fp)
 8046c48:	1000051e 	bne	r2,zero,8046c60 <ip_raw_input+0x1fc>
      ip_mib.ipInDelivers--;
 8046c4c:	008201b4 	movhi	r2,2054
 8046c50:	10801c17 	ldw	r2,112(r2)
 8046c54:	10ffffc4 	addi	r3,r2,-1
 8046c58:	008201b4 	movhi	r2,2054
 8046c5c:	10c01c15 	stw	r3,112(r2)

   return err;
 8046c60:	e0bffd17 	ldw	r2,-12(fp)
}
 8046c64:	e037883a 	mov	sp,fp
 8046c68:	dfc00117 	ldw	ra,4(sp)
 8046c6c:	df000017 	ldw	fp,0(sp)
 8046c70:	dec00204 	addi	sp,sp,8
 8046c74:	f800283a 	ret

08046c78 <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 8046c78:	defffa04 	addi	sp,sp,-24
 8046c7c:	dfc00515 	stw	ra,20(sp)
 8046c80:	df000415 	stw	fp,16(sp)
 8046c84:	df000404 	addi	fp,sp,16
 8046c88:	e13ffd15 	stw	r4,-12(fp)
 8046c8c:	e17ffc15 	stw	r5,-16(fp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 8046c90:	e0bffd17 	ldw	r2,-12(fp)
 8046c94:	10c00044 	addi	r3,r2,1
 8046c98:	00bfff84 	movi	r2,-2
 8046c9c:	1884703a 	and	r2,r3,r2
 8046ca0:	e0bfff15 	stw	r2,-4(fp)
   if (!hdrincl)
 8046ca4:	e0bffc17 	ldw	r2,-16(fp)
 8046ca8:	1000031e 	bne	r2,zero,8046cb8 <ip_raw_alloc+0x40>
      len += IPHSIZ;
 8046cac:	e0bfff17 	ldw	r2,-4(fp)
 8046cb0:	10800504 	addi	r2,r2,20
 8046cb4:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8046cb8:	01000084 	movi	r4,2
 8046cbc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
 8046cc0:	d0e07c17 	ldw	r3,-32272(gp)
 8046cc4:	e0bfff17 	ldw	r2,-4(fp)
 8046cc8:	1885883a 	add	r2,r3,r2
 8046ccc:	1009883a 	mov	r4,r2
 8046cd0:	802f6300 	call	802f630 <pk_alloc>
 8046cd4:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8046cd8:	01000084 	movi	r4,2
 8046cdc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   if (p)
 8046ce0:	e0bffe17 	ldw	r2,-8(fp)
 8046ce4:	10000c26 	beq	r2,zero,8046d18 <ip_raw_alloc+0xa0>
   {
      if (!hdrincl)
 8046ce8:	e0bffc17 	ldw	r2,-16(fp)
 8046cec:	10000a1e 	bne	r2,zero,8046d18 <ip_raw_alloc+0xa0>
      {
         p->nb_prot += IPHSIZ;
 8046cf0:	e0bffe17 	ldw	r2,-8(fp)
 8046cf4:	10800317 	ldw	r2,12(r2)
 8046cf8:	10c00504 	addi	r3,r2,20
 8046cfc:	e0bffe17 	ldw	r2,-8(fp)
 8046d00:	10c00315 	stw	r3,12(r2)
         p->nb_plen -= IPHSIZ;
 8046d04:	e0bffe17 	ldw	r2,-8(fp)
 8046d08:	10800417 	ldw	r2,16(r2)
 8046d0c:	10fffb04 	addi	r3,r2,-20
 8046d10:	e0bffe17 	ldw	r2,-8(fp)
 8046d14:	10c00415 	stw	r3,16(r2)
      }
   }
   return p;
 8046d18:	e0bffe17 	ldw	r2,-8(fp)
}
 8046d1c:	e037883a 	mov	sp,fp
 8046d20:	dfc00117 	ldw	ra,4(sp)
 8046d24:	df000017 	ldw	fp,0(sp)
 8046d28:	dec00204 	addi	sp,sp,8
 8046d2c:	f800283a 	ret

08046d30 <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 8046d30:	defffd04 	addi	sp,sp,-12
 8046d34:	dfc00215 	stw	ra,8(sp)
 8046d38:	df000115 	stw	fp,4(sp)
 8046d3c:	df000104 	addi	fp,sp,4
 8046d40:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8046d44:	01000084 	movi	r4,2
 8046d48:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 8046d4c:	e13fff17 	ldw	r4,-4(fp)
 8046d50:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8046d54:	01000084 	movi	r4,2
 8046d58:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
}
 8046d5c:	0001883a 	nop
 8046d60:	e037883a 	mov	sp,fp
 8046d64:	dfc00117 	ldw	ra,4(sp)
 8046d68:	df000017 	ldw	fp,0(sp)
 8046d6c:	dec00204 	addi	sp,sp,8
 8046d70:	f800283a 	ret

08046d74 <ip_raw_maxalloc>:
 *          for 
 */

int
ip_raw_maxalloc(int hdrincl)
{
 8046d74:	defffd04 	addi	sp,sp,-12
 8046d78:	df000215 	stw	fp,8(sp)
 8046d7c:	df000204 	addi	fp,sp,8
 8046d80:	e13ffe15 	stw	r4,-8(fp)
   int len;

   len = bigbufsiz - MaxLnh;
 8046d84:	d0a03517 	ldw	r2,-32556(gp)
 8046d88:	d0e07c17 	ldw	r3,-32272(gp)
 8046d8c:	10c5c83a 	sub	r2,r2,r3
 8046d90:	e0bfff15 	stw	r2,-4(fp)
   if (!hdrincl)
 8046d94:	e0bffe17 	ldw	r2,-8(fp)
 8046d98:	1000031e 	bne	r2,zero,8046da8 <ip_raw_maxalloc+0x34>
      len -= IPHSIZ;
 8046d9c:	e0bfff17 	ldw	r2,-4(fp)
 8046da0:	10bffb04 	addi	r2,r2,-20
 8046da4:	e0bfff15 	stw	r2,-4(fp)
   return len;
 8046da8:	e0bfff17 	ldw	r2,-4(fp)
}
 8046dac:	e037883a 	mov	sp,fp
 8046db0:	df000017 	ldw	fp,0(sp)
 8046db4:	dec00104 	addi	sp,sp,4
 8046db8:	f800283a 	ret

08046dbc <rt_lookup>:
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
 8046dbc:	defff804 	addi	sp,sp,-32
 8046dc0:	df000715 	stw	fp,28(sp)
 8046dc4:	df000704 	addi	fp,sp,28
 8046dc8:	e13ff915 	stw	r4,-28(fp)
   RTMIB    rtp;
   RTMIB    netmatch;
   unsigned char max_bits_matched = 0;
 8046dcc:	e03ffdc5 	stb	zero,-9(fp)
   unsigned char curr_bits_matched;
   ip_addr  entry_mask;
   unsigned long int bitcount_mask;
   unsigned long int extracted_bit;

   netmatch = NULL;
 8046dd0:	e03ffe15 	stw	zero,-8(fp)

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8046dd4:	d0a0c117 	ldw	r2,-31996(gp)
 8046dd8:	e0bfff15 	stw	r2,-4(fp)
 8046ddc:	00003a06 	br	8046ec8 <rt_lookup+0x10c>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
 8046de0:	e0bfff17 	ldw	r2,-4(fp)
 8046de4:	10800617 	ldw	r2,24(r2)
 8046de8:	10003326 	beq	r2,zero,8046eb8 <rt_lookup+0xfc>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
 8046dec:	e0bfff17 	ldw	r2,-4(fp)
 8046df0:	10800a17 	ldw	r2,40(r2)
 8046df4:	e0bffb15 	stw	r2,-20(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
 8046df8:	e0bfff17 	ldw	r2,-4(fp)
 8046dfc:	10c00017 	ldw	r3,0(r2)
 8046e00:	e0bff917 	ldw	r2,-28(fp)
 8046e04:	1886f03a 	xor	r3,r3,r2
 8046e08:	e0bffb17 	ldw	r2,-20(fp)
 8046e0c:	1884703a 	and	r2,r3,r2
 8046e10:	10002a1e 	bne	r2,zero,8046ebc <rt_lookup+0x100>
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 8046e14:	e03ffd85 	stb	zero,-10(fp)
 8046e18:	00a00034 	movhi	r2,32768
 8046e1c:	e0bffc15 	stw	r2,-16(fp)
 8046e20:	00001806 	br	8046e84 <rt_lookup+0xc8>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
 8046e24:	e0bffb17 	ldw	r2,-20(fp)
 8046e28:	1006d63a 	srli	r3,r2,24
 8046e2c:	e0bffb17 	ldw	r2,-20(fp)
 8046e30:	1004d23a 	srli	r2,r2,8
 8046e34:	10bfc00c 	andi	r2,r2,65280
 8046e38:	1886b03a 	or	r3,r3,r2
 8046e3c:	e0bffb17 	ldw	r2,-20(fp)
 8046e40:	1004923a 	slli	r2,r2,8
 8046e44:	10803fec 	andhi	r2,r2,255
 8046e48:	1886b03a 	or	r3,r3,r2
 8046e4c:	e0bffb17 	ldw	r2,-20(fp)
 8046e50:	1004963a 	slli	r2,r2,24
 8046e54:	1884b03a 	or	r2,r3,r2
 8046e58:	e0fffc17 	ldw	r3,-16(fp)
 8046e5c:	1884703a 	and	r2,r3,r2
 8046e60:	e0bffa15 	stw	r2,-24(fp)
            if (extracted_bit) ++curr_bits_matched;
 8046e64:	e0bffa17 	ldw	r2,-24(fp)
 8046e68:	10000326 	beq	r2,zero,8046e78 <rt_lookup+0xbc>
 8046e6c:	e0bffd83 	ldbu	r2,-10(fp)
 8046e70:	10800044 	addi	r2,r2,1
 8046e74:	e0bffd85 	stb	r2,-10(fp)
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 8046e78:	e0bffc17 	ldw	r2,-16(fp)
 8046e7c:	1004d07a 	srli	r2,r2,1
 8046e80:	e0bffc15 	stw	r2,-16(fp)
 8046e84:	e0bffc17 	ldw	r2,-16(fp)
 8046e88:	103fe61e 	bne	r2,zero,8046e24 <rt_lookup+0x68>
         }
         if (curr_bits_matched > max_bits_matched)
 8046e8c:	e0bffd83 	ldbu	r2,-10(fp)
 8046e90:	e0fffdc3 	ldbu	r3,-9(fp)
 8046e94:	1880092e 	bgeu	r3,r2,8046ebc <rt_lookup+0x100>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
 8046e98:	e0bffd83 	ldbu	r2,-10(fp)
 8046e9c:	e0bffdc5 	stb	r2,-9(fp)
            netmatch = rtp;
 8046ea0:	e0bfff17 	ldw	r2,-4(fp)
 8046ea4:	e0bffe15 	stw	r2,-8(fp)
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 8046ea8:	e0bffdc3 	ldbu	r2,-9(fp)
 8046eac:	10800818 	cmpnei	r2,r2,32
 8046eb0:	10000c26 	beq	r2,zero,8046ee4 <rt_lookup+0x128>
 8046eb4:	00000106 	br	8046ebc <rt_lookup+0x100>
         continue;
 8046eb8:	0001883a 	nop
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8046ebc:	e0bfff17 	ldw	r2,-4(fp)
 8046ec0:	10800f04 	addi	r2,r2,60
 8046ec4:	e0bfff15 	stw	r2,-4(fp)
 8046ec8:	d0e0c117 	ldw	r3,-31996(gp)
 8046ecc:	d0a04f17 	ldw	r2,-32452(gp)
 8046ed0:	10800f24 	muli	r2,r2,60
 8046ed4:	1885883a 	add	r2,r3,r2
 8046ed8:	e0ffff17 	ldw	r3,-4(fp)
 8046edc:	18bfc036 	bltu	r3,r2,8046de0 <rt_lookup+0x24>
 8046ee0:	00000106 	br	8046ee8 <rt_lookup+0x12c>
               break;
 8046ee4:	0001883a 	nop
         }
      }
   }

   if (netmatch)
 8046ee8:	e0bffe17 	ldw	r2,-8(fp)
 8046eec:	10000326 	beq	r2,zero,8046efc <rt_lookup+0x140>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
 8046ef0:	d0e0a317 	ldw	r3,-32116(gp)
 8046ef4:	e0bffe17 	ldw	r2,-8(fp)
 8046ef8:	10c00915 	stw	r3,36(r2)

   return netmatch;
 8046efc:	e0bffe17 	ldw	r2,-8(fp)
}
 8046f00:	e037883a 	mov	sp,fp
 8046f04:	df000017 	ldw	fp,0(sp)
 8046f08:	dec00104 	addi	sp,sp,4
 8046f0c:	f800283a 	ret

08046f10 <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
 8046f10:	defff704 	addi	sp,sp,-36
 8046f14:	dfc00815 	stw	ra,32(sp)
 8046f18:	df000715 	stw	fp,28(sp)
 8046f1c:	df000704 	addi	fp,sp,28
 8046f20:	e13ffc15 	stw	r4,-16(fp)
 8046f24:	e17ffb15 	stw	r5,-20(fp)
 8046f28:	e1bffa15 	stw	r6,-24(fp)
 8046f2c:	e1fff915 	stw	r7,-28(fp)
   RTMIB rtp;           /* scratch route table entrry pointer */
   RTMIB newrt;         /* best entry for new route */
   struct net * ifp;    /* interface (net) for nexthop */

   newrt = NULL;     /* may be replaced with empty or more expendable entry */
 8046f30:	e03ffe15 	stw	zero,-8(fp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
 8046f34:	e13ff917 	ldw	r4,-28(fp)
 8046f38:	8041b600 	call	8041b60 <if_getbynum>
 8046f3c:	e0bffd15 	stw	r2,-12(fp)
   if(!ifp)
 8046f40:	e0bffd17 	ldw	r2,-12(fp)
 8046f44:	1000021e 	bne	r2,zero,8046f50 <add_route+0x40>
      return NULL;
 8046f48:	0005883a 	mov	r2,zero
 8046f4c:	0000d406 	br	80472a0 <add_route+0x390>

   if (rt_mib == NULL)
 8046f50:	d0a0c117 	ldw	r2,-31996(gp)
 8046f54:	1000021e 	bne	r2,zero,8046f60 <add_route+0x50>
      return NULL;
 8046f58:	0005883a 	mov	r2,zero
 8046f5c:	0000d006 	br	80472a0 <add_route+0x390>

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
 8046f60:	e0bffc17 	ldw	r2,-16(fp)
 8046f64:	10000226 	beq	r2,zero,8046f70 <add_route+0x60>
 8046f68:	e0bffb17 	ldw	r2,-20(fp)
 8046f6c:	1000221e 	bne	r2,zero,8046ff8 <add_route+0xe8>
   {
      dtrap();    /* bad configuration? */
 8046f70:	80301a80 	call	80301a8 <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
	      htonl(dest), htonl(mask) );
 8046f74:	e0bffc17 	ldw	r2,-16(fp)
 8046f78:	1006d63a 	srli	r3,r2,24
 8046f7c:	e0bffc17 	ldw	r2,-16(fp)
 8046f80:	1004d23a 	srli	r2,r2,8
 8046f84:	10bfc00c 	andi	r2,r2,65280
 8046f88:	1886b03a 	or	r3,r3,r2
 8046f8c:	e0bffc17 	ldw	r2,-16(fp)
 8046f90:	1004923a 	slli	r2,r2,8
 8046f94:	10803fec 	andhi	r2,r2,255
 8046f98:	1886b03a 	or	r3,r3,r2
 8046f9c:	e0bffc17 	ldw	r2,-16(fp)
 8046fa0:	1004963a 	slli	r2,r2,24
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 8046fa4:	1888b03a 	or	r4,r3,r2
	      htonl(dest), htonl(mask) );
 8046fa8:	e0bffb17 	ldw	r2,-20(fp)
 8046fac:	1006d63a 	srli	r3,r2,24
 8046fb0:	e0bffb17 	ldw	r2,-20(fp)
 8046fb4:	1004d23a 	srli	r2,r2,8
 8046fb8:	10bfc00c 	andi	r2,r2,65280
 8046fbc:	1886b03a 	or	r3,r3,r2
 8046fc0:	e0bffb17 	ldw	r2,-20(fp)
 8046fc4:	1004923a 	slli	r2,r2,8
 8046fc8:	10803fec 	andhi	r2,r2,255
 8046fcc:	1886b03a 	or	r3,r3,r2
 8046fd0:	e0bffb17 	ldw	r2,-20(fp)
 8046fd4:	1004963a 	slli	r2,r2,24
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 8046fd8:	1884b03a 	or	r2,r3,r2
 8046fdc:	100d883a 	mov	r6,r2
 8046fe0:	200b883a 	mov	r5,r4
 8046fe4:	01020174 	movhi	r4,2053
 8046fe8:	21111d04 	addi	r4,r4,17524
 8046fec:	8003b840 	call	8003b84 <printf>
      return NULL;
 8046ff0:	0005883a 	mov	r2,zero
 8046ff4:	0000aa06 	br	80472a0 <add_route+0x390>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8046ff8:	d0a0c117 	ldw	r2,-31996(gp)
 8046ffc:	e0bfff15 	stw	r2,-4(fp)
 8047000:	00006406 	br	8047194 <add_route+0x284>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
 8047004:	e0bfff17 	ldw	r2,-4(fp)
 8047008:	10800017 	ldw	r2,0(r2)
 804700c:	e0fffc17 	ldw	r3,-16(fp)
 8047010:	1880151e 	bne	r3,r2,8047068 <add_route+0x158>
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
 8047014:	e0bfff17 	ldw	r2,-4(fp)
 8047018:	e0fffa17 	ldw	r3,-24(fp)
 804701c:	10c00615 	stw	r3,24(r2)
         rtp->ipRouteAge = cticks;           /* timestamp it */
 8047020:	d0e0a317 	ldw	r3,-32116(gp)
 8047024:	e0bfff17 	ldw	r2,-4(fp)
 8047028:	10c00915 	stw	r3,36(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
 804702c:	e0bff917 	ldw	r2,-28(fp)
 8047030:	10c00044 	addi	r3,r2,1
 8047034:	e0bfff17 	ldw	r2,-4(fp)
 8047038:	10c00115 	stw	r3,4(r2)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
 804703c:	e0bfff17 	ldw	r2,-4(fp)
 8047040:	e0c00217 	ldw	r3,8(fp)
 8047044:	10c00815 	stw	r3,32(r2)
         rtp->ipRouteMask = mask;
 8047048:	e0bfff17 	ldw	r2,-4(fp)
 804704c:	e0fffb17 	ldw	r3,-20(fp)
 8047050:	10c00a15 	stw	r3,40(r2)
         rtp->ifp = ifp;
 8047054:	e0bfff17 	ldw	r2,-4(fp)
 8047058:	e0fffd17 	ldw	r3,-12(fp)
 804705c:	10c00e15 	stw	r3,56(r2)
         return(rtp);   /* just update and exit */
 8047060:	e0bfff17 	ldw	r2,-4(fp)
 8047064:	00008e06 	br	80472a0 <add_route+0x390>
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
 8047068:	e0bffe17 	ldw	r2,-8(fp)
 804706c:	10000326 	beq	r2,zero,804707c <add_route+0x16c>
 8047070:	e0bffe17 	ldw	r2,-8(fp)
 8047074:	10800817 	ldw	r2,32(r2)
 8047078:	10004326 	beq	r2,zero,8047188 <add_route+0x278>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
 804707c:	e0bfff17 	ldw	r2,-4(fp)
 8047080:	10800617 	ldw	r2,24(r2)
 8047084:	1000051e 	bne	r2,zero,804709c <add_route+0x18c>
         {
            newrt = rtp;   /* record empty route for use */
 8047088:	e0bfff17 	ldw	r2,-4(fp)
 804708c:	e0bffe15 	stw	r2,-8(fp)
            newrt->ipRouteProto = 0;
 8047090:	e0bffe17 	ldw	r2,-8(fp)
 8047094:	10000815 	stw	zero,32(r2)
            continue;
 8047098:	00003b06 	br	8047188 <add_route+0x278>
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
 804709c:	e0c00217 	ldw	r3,8(fp)
 80470a0:	00820174 	movhi	r2,2053
 80470a4:	1885883a 	add	r2,r3,r2
 80470a8:	111b7503 	ldbu	r4,28116(r2)
 80470ac:	e0bfff17 	ldw	r2,-4(fp)
 80470b0:	10c00817 	ldw	r3,32(r2)
 80470b4:	00820174 	movhi	r2,2053
 80470b8:	1885883a 	add	r2,r3,r2
 80470bc:	109b7503 	ldbu	r2,28116(r2)
 80470c0:	20c03fcc 	andi	r3,r4,255
 80470c4:	10803fcc 	andi	r2,r2,255
 80470c8:	18802f36 	bltu	r3,r2,8047188 <add_route+0x278>
         {
            if (!newrt)
 80470cc:	e0bffe17 	ldw	r2,-8(fp)
 80470d0:	1000031e 	bne	r2,zero,80470e0 <add_route+0x1d0>
            {
               newrt = rtp;
 80470d4:	e0bfff17 	ldw	r2,-4(fp)
 80470d8:	e0bffe15 	stw	r2,-8(fp)
               continue;
 80470dc:	00002a06 	br	8047188 <add_route+0x278>
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
 80470e0:	e0bfff17 	ldw	r2,-4(fp)
 80470e4:	10c00817 	ldw	r3,32(r2)
 80470e8:	00820174 	movhi	r2,2053
 80470ec:	1885883a 	add	r2,r3,r2
 80470f0:	111b7503 	ldbu	r4,28116(r2)
                rtp_priority[newrt->ipRouteProto])
 80470f4:	e0bffe17 	ldw	r2,-8(fp)
 80470f8:	10c00817 	ldw	r3,32(r2)
 80470fc:	00820174 	movhi	r2,2053
 8047100:	1885883a 	add	r2,r3,r2
 8047104:	109b7503 	ldbu	r2,28116(r2)
            if (rtp_priority[rtp->ipRouteProto] < 
 8047108:	20c03fcc 	andi	r3,r4,255
 804710c:	10803fcc 	andi	r2,r2,255
 8047110:	1880032e 	bgeu	r3,r2,8047120 <add_route+0x210>
            {
               newrt = rtp;   /* save lower priority entry for recycle */
 8047114:	e0bfff17 	ldw	r2,-4(fp)
 8047118:	e0bffe15 	stw	r2,-8(fp)
 804711c:	00001a06 	br	8047188 <add_route+0x278>
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
 8047120:	e0bfff17 	ldw	r2,-4(fp)
 8047124:	10c00817 	ldw	r3,32(r2)
 8047128:	00820174 	movhi	r2,2053
 804712c:	1885883a 	add	r2,r3,r2
 8047130:	111b7503 	ldbu	r4,28116(r2)
                rtp_priority[newrt->ipRouteProto])
 8047134:	e0bffe17 	ldw	r2,-8(fp)
 8047138:	10c00817 	ldw	r3,32(r2)
 804713c:	00820174 	movhi	r2,2053
 8047140:	1885883a 	add	r2,r3,r2
 8047144:	109b7503 	ldbu	r2,28116(r2)
            else if(rtp_priority[rtp->ipRouteProto] == 
 8047148:	20c03fcc 	andi	r3,r4,255
 804714c:	10803fcc 	andi	r2,r2,255
 8047150:	18800d1e 	bne	r3,r2,8047188 <add_route+0x278>
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
 8047154:	e0bfff17 	ldw	r2,-4(fp)
 8047158:	10c00917 	ldw	r3,36(r2)
 804715c:	e0bffe17 	ldw	r2,-8(fp)
 8047160:	10800917 	ldw	r2,36(r2)
 8047164:	100b883a 	mov	r5,r2
 8047168:	1809883a 	mov	r4,r3
 804716c:	80299280 	call	8029928 <c_older>
 8047170:	1007883a 	mov	r3,r2
 8047174:	e0bfff17 	ldw	r2,-4(fp)
 8047178:	10800917 	ldw	r2,36(r2)
 804717c:	1880021e 	bne	r3,r2,8047188 <add_route+0x278>
                  newrt = rtp;   /* got an older one */
 8047180:	e0bfff17 	ldw	r2,-4(fp)
 8047184:	e0bffe15 	stw	r2,-8(fp)
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8047188:	e0bfff17 	ldw	r2,-4(fp)
 804718c:	10800f04 	addi	r2,r2,60
 8047190:	e0bfff15 	stw	r2,-4(fp)
 8047194:	d0e0c117 	ldw	r3,-31996(gp)
 8047198:	d0a04f17 	ldw	r2,-32452(gp)
 804719c:	10800f24 	muli	r2,r2,60
 80471a0:	1885883a 	add	r2,r3,r2
 80471a4:	e0ffff17 	ldw	r3,-4(fp)
 80471a8:	18bf9636 	bltu	r3,r2,8047004 <add_route+0xf4>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
 80471ac:	e0bffe17 	ldw	r2,-8(fp)
 80471b0:	10002826 	beq	r2,zero,8047254 <add_route+0x344>
      rtp = newrt;   /* create new entry in lowest priority slot */
 80471b4:	e0bffe17 	ldw	r2,-8(fp)
 80471b8:	e0bfff15 	stw	r2,-4(fp)
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
 80471bc:	e0bfff17 	ldw	r2,-4(fp)
 80471c0:	e0fffd17 	ldw	r3,-12(fp)
 80471c4:	10c00e15 	stw	r3,56(r2)
   rtp->ipRouteDest = dest;
 80471c8:	e0bfff17 	ldw	r2,-4(fp)
 80471cc:	e0fffc17 	ldw	r3,-16(fp)
 80471d0:	10c00015 	stw	r3,0(r2)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
 80471d4:	e13ffd17 	ldw	r4,-12(fp)
 80471d8:	8029ec40 	call	8029ec4 <if_netnumber>
 80471dc:	10c00044 	addi	r3,r2,1
 80471e0:	e0bfff17 	ldw	r2,-4(fp)
 80471e4:	10c00115 	stw	r3,4(r2)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
 80471e8:	008201b4 	movhi	r2,2054
 80471ec:	10801517 	ldw	r2,84(r2)
 80471f0:	1007883a 	mov	r3,r2
 80471f4:	e0bfff17 	ldw	r2,-4(fp)
 80471f8:	10c00215 	stw	r3,8(r2)
   rtp->ipRouteMetric2 = -1;
 80471fc:	e0bfff17 	ldw	r2,-4(fp)
 8047200:	00ffffc4 	movi	r3,-1
 8047204:	10c00315 	stw	r3,12(r2)
   rtp->ipRouteMetric3 = -1;
 8047208:	e0bfff17 	ldw	r2,-4(fp)
 804720c:	00ffffc4 	movi	r3,-1
 8047210:	10c00415 	stw	r3,16(r2)
   rtp->ipRouteMetric4 = -1;
 8047214:	e0bfff17 	ldw	r2,-4(fp)
 8047218:	00ffffc4 	movi	r3,-1
 804721c:	10c00515 	stw	r3,20(r2)
   rtp->ipRouteNextHop = nexthop;
 8047220:	e0bfff17 	ldw	r2,-4(fp)
 8047224:	e0fffa17 	ldw	r3,-24(fp)
 8047228:	10c00615 	stw	r3,24(r2)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
 804722c:	e0bfff17 	ldw	r2,-4(fp)
 8047230:	e0c00217 	ldw	r3,8(fp)
 8047234:	10c00815 	stw	r3,32(r2)

   if ((dest & mask) == (nexthop & mask))
 8047238:	e0fffc17 	ldw	r3,-16(fp)
 804723c:	e0bffa17 	ldw	r2,-24(fp)
 8047240:	1886f03a 	xor	r3,r3,r2
 8047244:	e0bffb17 	ldw	r2,-20(fp)
 8047248:	1884703a 	and	r2,r3,r2
 804724c:	1000071e 	bne	r2,zero,804726c <add_route+0x35c>
 8047250:	00000206 	br	804725c <add_route+0x34c>
      return NULL;
 8047254:	0005883a 	mov	r2,zero
 8047258:	00001106 	br	80472a0 <add_route+0x390>
      rtp->ipRouteType = IPRT_DIRECT;
 804725c:	e0bfff17 	ldw	r2,-4(fp)
 8047260:	00c000c4 	movi	r3,3
 8047264:	10c00715 	stw	r3,28(r2)
 8047268:	00000306 	br	8047278 <add_route+0x368>
   else
      rtp->ipRouteType = IPRT_INDIRECT;
 804726c:	e0bfff17 	ldw	r2,-4(fp)
 8047270:	00c00104 	movi	r3,4
 8047274:	10c00715 	stw	r3,28(r2)

   rtp->ipRouteAge = cticks;        /* timestamp it */
 8047278:	d0e0a317 	ldw	r3,-32116(gp)
 804727c:	e0bfff17 	ldw	r2,-4(fp)
 8047280:	10c00915 	stw	r3,36(r2)
   rtp->ipRouteMask = mask;
 8047284:	e0bfff17 	ldw	r2,-4(fp)
 8047288:	e0fffb17 	ldw	r3,-20(fp)
 804728c:	10c00a15 	stw	r3,40(r2)
   rtp->ipRouteMetric5 = -1;
 8047290:	e0bfff17 	ldw	r2,-4(fp)
 8047294:	00ffffc4 	movi	r3,-1
 8047298:	10c00b15 	stw	r3,44(r2)
   return(rtp);
 804729c:	e0bfff17 	ldw	r2,-4(fp)
}
 80472a0:	e037883a 	mov	sp,fp
 80472a4:	dfc00117 	ldw	ra,4(sp)
 80472a8:	df000017 	ldw	fp,0(sp)
 80472ac:	dec00204 	addi	sp,sp,8
 80472b0:	f800283a 	ret

080472b4 <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
 80472b4:	defff804 	addi	sp,sp,-32
 80472b8:	dfc00715 	stw	ra,28(sp)
 80472bc:	df000615 	stw	fp,24(sp)
 80472c0:	df000604 	addi	fp,sp,24
 80472c4:	e13ffc15 	stw	r4,-16(fp)
 80472c8:	e17ffb15 	stw	r5,-20(fp)
 80472cc:	e1bffa15 	stw	r6,-24(fp)
   RTMIB rtp;
   int   retval   =  0;
 80472d0:	e03ffe15 	stw	zero,-8(fp)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 80472d4:	e0bffa17 	ldw	r2,-24(fp)
 80472d8:	10bfffd8 	cmpnei	r2,r2,-1
 80472dc:	1000021e 	bne	r2,zero,80472e8 <del_route+0x34>
      ifp = NULL;    /* wildcard */
 80472e0:	e03ffd15 	stw	zero,-12(fp)
 80472e4:	00000306 	br	80472f4 <del_route+0x40>
   else
      ifp = if_getbynum(iface);
 80472e8:	e13ffa17 	ldw	r4,-24(fp)
 80472ec:	8041b600 	call	8041b60 <if_getbynum>
 80472f0:	e0bffd15 	stw	r2,-12(fp)

   if (rt_mib == NULL)     /* Make sure we're up */
 80472f4:	d0a0c117 	ldw	r2,-31996(gp)
 80472f8:	1000021e 	bne	r2,zero,8047304 <del_route+0x50>
      return 0;
 80472fc:	0005883a 	mov	r2,zero
 8047300:	00002c06 	br	80473b4 <del_route+0x100>

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8047304:	d0a0c117 	ldw	r2,-31996(gp)
 8047308:	e0bfff15 	stw	r2,-4(fp)
 804730c:	00002206 	br	8047398 <del_route+0xe4>
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
 8047310:	e0bfff17 	ldw	r2,-4(fp)
 8047314:	10800617 	ldw	r2,24(r2)
 8047318:	10001926 	beq	r2,zero,8047380 <del_route+0xcc>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
 804731c:	e0bffd17 	ldw	r2,-12(fp)
 8047320:	10000426 	beq	r2,zero,8047334 <del_route+0x80>
 8047324:	e0bfff17 	ldw	r2,-4(fp)
 8047328:	10800e17 	ldw	r2,56(r2)
 804732c:	e0fffd17 	ldw	r3,-12(fp)
 8047330:	1880151e 	bne	r3,r2,8047388 <del_route+0xd4>
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 8047334:	e0bfff17 	ldw	r2,-4(fp)
 8047338:	10c00017 	ldw	r3,0(r2)
 804733c:	e0bffc17 	ldw	r2,-16(fp)
 8047340:	1886f03a 	xor	r3,r3,r2
 8047344:	e0bffb17 	ldw	r2,-20(fp)
 8047348:	1884703a 	and	r2,r3,r2
 804734c:	1000071e 	bne	r2,zero,804736c <del_route+0xb8>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 8047350:	01800f04 	movi	r6,60
 8047354:	000b883a 	mov	r5,zero
 8047358:	e13fff17 	ldw	r4,-4(fp)
 804735c:	80038cc0 	call	80038cc <memset>
         retval++;
 8047360:	e0bffe17 	ldw	r2,-8(fp)
 8047364:	10800044 	addi	r2,r2,1
 8047368:	e0bffe15 	stw	r2,-8(fp)
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
 804736c:	d0a0cb17 	ldw	r2,-31956(gp)
 8047370:	e0ffff17 	ldw	r3,-4(fp)
 8047374:	1880051e 	bne	r3,r2,804738c <del_route+0xd8>
         cachedRoute = NULL;
 8047378:	d020cb15 	stw	zero,-31956(gp)
 804737c:	00000306 	br	804738c <del_route+0xd8>
         continue;
 8047380:	0001883a 	nop
 8047384:	00000106 	br	804738c <del_route+0xd8>
         continue;   /* interface didn't match */
 8047388:	0001883a 	nop
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 804738c:	e0bfff17 	ldw	r2,-4(fp)
 8047390:	10800f04 	addi	r2,r2,60
 8047394:	e0bfff15 	stw	r2,-4(fp)
 8047398:	d0e0c117 	ldw	r3,-31996(gp)
 804739c:	d0a04f17 	ldw	r2,-32452(gp)
 80473a0:	10800f24 	muli	r2,r2,60
 80473a4:	1885883a 	add	r2,r3,r2
 80473a8:	e0ffff17 	ldw	r3,-4(fp)
 80473ac:	18bfd836 	bltu	r3,r2,8047310 <del_route+0x5c>
   }
   return retval;
 80473b0:	e0bffe17 	ldw	r2,-8(fp)
}
 80473b4:	e037883a 	mov	sp,fp
 80473b8:	dfc00117 	ldw	ra,4(sp)
 80473bc:	df000017 	ldw	fp,0(sp)
 80473c0:	dec00204 	addi	sp,sp,8
 80473c4:	f800283a 	ret

080473c8 <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 80473c8:	deffec04 	addi	sp,sp,-80
 80473cc:	dfc01315 	stw	ra,76(sp)
 80473d0:	df001215 	stw	fp,72(sp)
 80473d4:	df001204 	addi	fp,sp,72
 80473d8:	e13ff215 	stw	r4,-56(fp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
 80473dc:	e0bff217 	ldw	r2,-56(fp)
 80473e0:	10800317 	ldw	r2,12(r2)
 80473e4:	e0bffb15 	stw	r2,-20(fp)
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
 80473e8:	e0bffb17 	ldw	r2,-20(fp)
 80473ec:	10800003 	ldbu	r2,0(r2)
 80473f0:	10803fcc 	andi	r2,r2,255
 80473f4:	100490ba 	slli	r2,r2,2
 80473f8:	10800f0c 	andi	r2,r2,60
 80473fc:	e0fffb17 	ldw	r3,-20(fp)
 8047400:	1885883a 	add	r2,r3,r2
 8047404:	e0bffa15 	stw	r2,-24(fp)
   plen = htons(pup->ud_len);
 8047408:	e0bffa17 	ldw	r2,-24(fp)
 804740c:	1080010b 	ldhu	r2,4(r2)
 8047410:	10bfffcc 	andi	r2,r2,65535
 8047414:	1004d23a 	srli	r2,r2,8
 8047418:	10bfffcc 	andi	r2,r2,65535
 804741c:	10c03fcc 	andi	r3,r2,255
 8047420:	e0bffa17 	ldw	r2,-24(fp)
 8047424:	1080010b 	ldhu	r2,4(r2)
 8047428:	10bfffcc 	andi	r2,r2,65535
 804742c:	1004923a 	slli	r2,r2,8
 8047430:	10bfffcc 	andi	r2,r2,65535
 8047434:	1884b03a 	or	r2,r3,r2
 8047438:	e0bff915 	stw	r2,-28(fp)

   if (plen > p->nb_plen)
 804743c:	e0bff217 	ldw	r2,-56(fp)
 8047440:	10c00417 	ldw	r3,16(r2)
 8047444:	e0bff917 	ldw	r2,-28(fp)
 8047448:	1880232e 	bgeu	r3,r2,80474d8 <udpdemux+0x110>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 804744c:	d0a07e17 	ldw	r2,-32264(gp)
 8047450:	1081000c 	andi	r2,r2,1024
 8047454:	10001726 	beq	r2,zero,80474b4 <udpdemux+0xec>
 8047458:	d0a07e17 	ldw	r2,-32264(gp)
 804745c:	1080400c 	andi	r2,r2,256
 8047460:	10001426 	beq	r2,zero,80474b4 <udpdemux+0xec>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 8047464:	e0bff217 	ldw	r2,-56(fp)
 8047468:	11000417 	ldw	r4,16(r2)
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
 804746c:	e0bffa17 	ldw	r2,-24(fp)
 8047470:	1080010b 	ldhu	r2,4(r2)
 8047474:	10bfffcc 	andi	r2,r2,65535
 8047478:	1004d23a 	srli	r2,r2,8
 804747c:	10bfffcc 	andi	r2,r2,65535
 8047480:	10c03fcc 	andi	r3,r2,255
 8047484:	e0bffa17 	ldw	r2,-24(fp)
 8047488:	1080010b 	ldhu	r2,4(r2)
 804748c:	10bfffcc 	andi	r2,r2,65535
 8047490:	1004923a 	slli	r2,r2,8
 8047494:	10bfffcc 	andi	r2,r2,65535
 8047498:	1884b03a 	or	r2,r3,r2
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 804749c:	10800204 	addi	r2,r2,8
 80474a0:	100d883a 	mov	r6,r2
 80474a4:	200b883a 	mov	r5,r4
 80474a8:	01020174 	movhi	r4,2053
 80474ac:	21112b04 	addi	r4,r4,17580
 80474b0:	8003b840 	call	8003b84 <printf>
#endif
      udp_mib.udpInErrors++;
 80474b4:	008201b4 	movhi	r2,2054
 80474b8:	10803017 	ldw	r2,192(r2)
 80474bc:	10c00044 	addi	r3,r2,1
 80474c0:	008201b4 	movhi	r2,2054
 80474c4:	10c03015 	stw	r3,192(r2)
      udp_free(p);
 80474c8:	e13ff217 	ldw	r4,-56(fp)
 80474cc:	804804c0 	call	804804c <udp_free>
      return ENP_BAD_HEADER;
 80474d0:	00bff804 	movi	r2,-32
 80474d4:	00019206 	br	8047b20 <udpdemux+0x758>
   }

   osum = pup->ud_cksum;
 80474d8:	e0bffa17 	ldw	r2,-24(fp)
 80474dc:	1080018b 	ldhu	r2,6(r2)
 80474e0:	e0bff88d 	sth	r2,-30(fp)
   /* did other guy use checksumming? */
   if (osum)
 80474e4:	e0bff88b 	ldhu	r2,-30(fp)
 80474e8:	10005626 	beq	r2,zero,8047644 <udpdemux+0x27c>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
 80474ec:	e0bff917 	ldw	r2,-28(fp)
 80474f0:	1080004c 	andi	r2,r2,1
 80474f4:	10000426 	beq	r2,zero,8047508 <udpdemux+0x140>
 80474f8:	e0fffa17 	ldw	r3,-24(fp)
 80474fc:	e0bff917 	ldw	r2,-28(fp)
 8047500:	1885883a 	add	r2,r3,r2
 8047504:	10000005 	stb	zero,0(r2)
         php.ph_src = p->fhost;
 8047508:	e0bff217 	ldw	r2,-56(fp)
 804750c:	10800717 	ldw	r2,28(r2)
 8047510:	e0bff315 	stw	r2,-52(fp)
      php.ph_dest = pip->ip_dest;
 8047514:	e0bffb17 	ldw	r2,-20(fp)
 8047518:	10800417 	ldw	r2,16(r2)
 804751c:	e0bff415 	stw	r2,-48(fp)
      php.ph_zero = 0;
 8047520:	e03ff505 	stb	zero,-44(fp)
      php.ph_prot = UDP_PROT;
 8047524:	00800444 	movi	r2,17
 8047528:	e0bff545 	stb	r2,-43(fp)
      php.ph_len  = pup->ud_len;
 804752c:	e0bffa17 	ldw	r2,-24(fp)
 8047530:	1080010b 	ldhu	r2,4(r2)
 8047534:	e0bff58d 	sth	r2,-42(fp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 8047538:	e0bff304 	addi	r2,fp,-52
 804753c:	01400184 	movi	r5,6
 8047540:	1009883a 	mov	r4,r2
 8047544:	802b98c0 	call	802b98c <cksum>
 8047548:	1007883a 	mov	r3,r2
 804754c:	e0bffa17 	ldw	r2,-24(fp)
 8047550:	10c0018d 	sth	r3,6(r2)
      xsum = ~cksum(pup, (plen+1)>>1);
 8047554:	e0bff917 	ldw	r2,-28(fp)
 8047558:	10800044 	addi	r2,r2,1
 804755c:	1004d07a 	srli	r2,r2,1
 8047560:	100b883a 	mov	r5,r2
 8047564:	e13ffa17 	ldw	r4,-24(fp)
 8047568:	802b98c0 	call	802b98c <cksum>
 804756c:	0084303a 	nor	r2,zero,r2
 8047570:	e0bffe8d 	sth	r2,-6(fp)
      if (!xsum)
 8047574:	e0bffe8b 	ldhu	r2,-6(fp)
 8047578:	1000021e 	bne	r2,zero,8047584 <udpdemux+0x1bc>
         xsum = 0xffff;
 804757c:	00bfffc4 	movi	r2,-1
 8047580:	e0bffe8d 	sth	r2,-6(fp)
      pup->ud_cksum = osum;
 8047584:	e0bffa17 	ldw	r2,-24(fp)
 8047588:	e0fff88b 	ldhu	r3,-30(fp)
 804758c:	10c0018d 	sth	r3,6(r2)
      if (xsum != osum)
 8047590:	e0fffe8b 	ldhu	r3,-6(fp)
 8047594:	e0bff88b 	ldhu	r2,-30(fp)
 8047598:	18802a26 	beq	r3,r2,8047644 <udpdemux+0x27c>
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 804759c:	d0a07e17 	ldw	r2,-32264(gp)
 80475a0:	1081000c 	andi	r2,r2,1024
 80475a4:	10001e26 	beq	r2,zero,8047620 <udpdemux+0x258>
 80475a8:	d0a07e17 	ldw	r2,-32264(gp)
 80475ac:	1080400c 	andi	r2,r2,256
 80475b0:	10001b26 	beq	r2,zero,8047620 <udpdemux+0x258>
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 80475b4:	e17ff88b 	ldhu	r5,-30(fp)
 80475b8:	e1bffe8b 	ldhu	r6,-6(fp)
                    osum, xsum, PUSH_IPADDR(p->fhost));
 80475bc:	e0bff217 	ldw	r2,-56(fp)
 80475c0:	10800717 	ldw	r2,28(r2)
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 80475c4:	11c03fcc 	andi	r7,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 80475c8:	e0bff217 	ldw	r2,-56(fp)
 80475cc:	10800717 	ldw	r2,28(r2)
 80475d0:	1004d23a 	srli	r2,r2,8
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 80475d4:	10803fcc 	andi	r2,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 80475d8:	e0fff217 	ldw	r3,-56(fp)
 80475dc:	18c00717 	ldw	r3,28(r3)
 80475e0:	1806d43a 	srli	r3,r3,16
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 80475e4:	18c03fcc 	andi	r3,r3,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 80475e8:	e13ff217 	ldw	r4,-56(fp)
 80475ec:	21000717 	ldw	r4,28(r4)
 80475f0:	2008d63a 	srli	r4,r4,24
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 80475f4:	d9000215 	stw	r4,8(sp)
 80475f8:	d8c00115 	stw	r3,4(sp)
 80475fc:	d8800015 	stw	r2,0(sp)
 8047600:	01020174 	movhi	r4,2053
 8047604:	21113504 	addi	r4,r4,17620
 8047608:	8003b840 	call	8003b84 <printf>
            if (NDEBUG & DUMP)
 804760c:	d0a07e17 	ldw	r2,-32264(gp)
 8047610:	1080008c 	andi	r2,r2,2
 8047614:	10000226 	beq	r2,zero,8047620 <udpdemux+0x258>
               ip_dump(p);
 8047618:	e13ff217 	ldw	r4,-56(fp)
 804761c:	80437b00 	call	80437b0 <ip_dump>
         }
#endif
         udp_mib.udpInErrors++;
 8047620:	008201b4 	movhi	r2,2054
 8047624:	10803017 	ldw	r2,192(r2)
 8047628:	10c00044 	addi	r3,r2,1
 804762c:	008201b4 	movhi	r2,2054
 8047630:	10c03015 	stw	r3,192(r2)
         udp_free(p);
 8047634:	e13ff217 	ldw	r4,-56(fp)
 8047638:	804804c0 	call	804804c <udp_free>
         return ENP_BAD_HEADER;
 804763c:	00bff804 	movi	r2,-32
 8047640:	00013706 	br	8047b20 <udpdemux+0x758>
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8047644:	e13ffa17 	ldw	r4,-24(fp)
 8047648:	8047dc80 	call	8047dc8 <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
 804764c:	e0bffb17 	ldw	r2,-20(fp)
 8047650:	10800003 	ldbu	r2,0(r2)
 8047654:	10803fcc 	andi	r2,r2,255
 8047658:	100490ba 	slli	r2,r2,2
 804765c:	10800f0c 	andi	r2,r2,60
 8047660:	10800204 	addi	r2,r2,8
 8047664:	e0bffd15 	stw	r2,-12(fp)
   p->nb_plen -= e;
 8047668:	e0bff217 	ldw	r2,-56(fp)
 804766c:	10c00417 	ldw	r3,16(r2)
 8047670:	e0bffd17 	ldw	r2,-12(fp)
 8047674:	1887c83a 	sub	r3,r3,r2
 8047678:	e0bff217 	ldw	r2,-56(fp)
 804767c:	10c00415 	stw	r3,16(r2)
   p->nb_prot += e;
 8047680:	e0bff217 	ldw	r2,-56(fp)
 8047684:	10c00317 	ldw	r3,12(r2)
 8047688:	e0bffd17 	ldw	r2,-12(fp)
 804768c:	1887883a 	add	r3,r3,r2
 8047690:	e0bff217 	ldw	r2,-56(fp)
 8047694:	10c00315 	stw	r3,12(r2)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 8047698:	d0a07e17 	ldw	r2,-32264(gp)
 804769c:	1081000c 	andi	r2,r2,1024
 80476a0:	10001f26 	beq	r2,zero,8047720 <udpdemux+0x358>
 80476a4:	d0a07e17 	ldw	r2,-32264(gp)
 80476a8:	1080400c 	andi	r2,r2,256
 80476ac:	10001c26 	beq	r2,zero,8047720 <udpdemux+0x358>
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 80476b0:	e0bff217 	ldw	r2,-56(fp)
 80476b4:	10800717 	ldw	r2,28(r2)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 80476b8:	11803fcc 	andi	r6,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 80476bc:	e0bff217 	ldw	r2,-56(fp)
 80476c0:	10800717 	ldw	r2,28(r2)
 80476c4:	1004d23a 	srli	r2,r2,8
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 80476c8:	11c03fcc 	andi	r7,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 80476cc:	e0bff217 	ldw	r2,-56(fp)
 80476d0:	10800717 	ldw	r2,28(r2)
 80476d4:	1004d43a 	srli	r2,r2,16
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 80476d8:	10803fcc 	andi	r2,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 80476dc:	e0fff217 	ldw	r3,-56(fp)
 80476e0:	18c00717 	ldw	r3,28(r3)
 80476e4:	1806d63a 	srli	r3,r3,24
 80476e8:	e13ffa17 	ldw	r4,-24(fp)
 80476ec:	2100000b 	ldhu	r4,0(r4)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 80476f0:	213fffcc 	andi	r4,r4,65535
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 80476f4:	e17ffa17 	ldw	r5,-24(fp)
 80476f8:	2940008b 	ldhu	r5,2(r5)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 80476fc:	297fffcc 	andi	r5,r5,65535
 8047700:	d9400315 	stw	r5,12(sp)
 8047704:	d9000215 	stw	r4,8(sp)
 8047708:	d8c00115 	stw	r3,4(sp)
 804770c:	d8800015 	stw	r2,0(sp)
 8047710:	e17ff917 	ldw	r5,-28(fp)
 8047714:	01020174 	movhi	r4,2053
 8047718:	21114304 	addi	r4,r4,17676
 804771c:	8003b840 	call	8003b84 <printf>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 8047720:	d0a09717 	ldw	r2,-32164(gp)
 8047724:	e0bfff15 	stw	r2,-4(fp)
 8047728:	0000aa06 	br	80479d4 <udpdemux+0x60c>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
 804772c:	e0bfff17 	ldw	r2,-4(fp)
 8047730:	1080018b 	ldhu	r2,6(r2)
 8047734:	10bfffcc 	andi	r2,r2,65535
 8047738:	10000726 	beq	r2,zero,8047758 <udpdemux+0x390>
 804773c:	e0bfff17 	ldw	r2,-4(fp)
 8047740:	10c0018b 	ldhu	r3,6(r2)
 8047744:	e0bffa17 	ldw	r2,-24(fp)
 8047748:	1080008b 	ldhu	r2,2(r2)
 804774c:	18ffffcc 	andi	r3,r3,65535
 8047750:	10bfffcc 	andi	r2,r2,65535
 8047754:	1880951e 	bne	r3,r2,80479ac <udpdemux+0x5e4>
         continue;
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
 8047758:	e0bfff17 	ldw	r2,-4(fp)
 804775c:	1080020b 	ldhu	r2,8(r2)
 8047760:	10bfffcc 	andi	r2,r2,65535
 8047764:	10000726 	beq	r2,zero,8047784 <udpdemux+0x3bc>
 8047768:	e0bfff17 	ldw	r2,-4(fp)
 804776c:	10c0020b 	ldhu	r3,8(r2)
 8047770:	e0bffa17 	ldw	r2,-24(fp)
 8047774:	1080000b 	ldhu	r2,0(r2)
 8047778:	18ffffcc 	andi	r3,r3,65535
 804777c:	10bfffcc 	andi	r2,r2,65535
 8047780:	18808c1e 	bne	r3,r2,80479b4 <udpdemux+0x5ec>
         continue;
      if (con->u_fhost && (con->u_fhost != p->fhost))
 8047784:	e0bfff17 	ldw	r2,-4(fp)
 8047788:	10800417 	ldw	r2,16(r2)
 804778c:	10000526 	beq	r2,zero,80477a4 <udpdemux+0x3dc>
 8047790:	e0bfff17 	ldw	r2,-4(fp)
 8047794:	10c00417 	ldw	r3,16(r2)
 8047798:	e0bff217 	ldw	r2,-56(fp)
 804779c:	10800717 	ldw	r2,28(r2)
 80477a0:	1880861e 	bne	r3,r2,80479bc <udpdemux+0x5f4>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
 80477a4:	e0bffb17 	ldw	r2,-20(fp)
 80477a8:	10800417 	ldw	r2,16(r2)
 80477ac:	1006d63a 	srli	r3,r2,24
 80477b0:	e0bffb17 	ldw	r2,-20(fp)
 80477b4:	10800417 	ldw	r2,16(r2)
 80477b8:	1004d23a 	srli	r2,r2,8
 80477bc:	10bfc00c 	andi	r2,r2,65280
 80477c0:	1886b03a 	or	r3,r3,r2
 80477c4:	e0bffb17 	ldw	r2,-20(fp)
 80477c8:	10800417 	ldw	r2,16(r2)
 80477cc:	1004923a 	slli	r2,r2,8
 80477d0:	10803fec 	andhi	r2,r2,255
 80477d4:	1886b03a 	or	r3,r3,r2
 80477d8:	e0bffb17 	ldw	r2,-20(fp)
 80477dc:	10800417 	ldw	r2,16(r2)
 80477e0:	1004963a 	slli	r2,r2,24
 80477e4:	1884b03a 	or	r2,r3,r2
 80477e8:	10fc002c 	andhi	r3,r2,61440
 80477ec:	00b80034 	movhi	r2,57344
 80477f0:	18802d1e 	bne	r3,r2,80478a8 <udpdemux+0x4e0>
      {
         struct socket *soptr = (struct socket *)con->u_data;
 80477f4:	e0bfff17 	ldw	r2,-4(fp)
 80477f8:	10800617 	ldw	r2,24(r2)
 80477fc:	e0bff715 	stw	r2,-36(fp)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
 8047800:	e0bfff17 	ldw	r2,-4(fp)
 8047804:	10c00517 	ldw	r3,20(r2)
 8047808:	00820134 	movhi	r2,2052
 804780c:	10b67e04 	addi	r2,r2,-9736
 8047810:	1880251e 	bne	r3,r2,80478a8 <udpdemux+0x4e0>
 8047814:	e0bff717 	ldw	r2,-36(fp)
 8047818:	10800317 	ldw	r2,12(r2)
 804781c:	10002226 	beq	r2,zero,80478a8 <udpdemux+0x4e0>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;
 8047820:	e0bff717 	ldw	r2,-36(fp)
 8047824:	10800317 	ldw	r2,12(r2)
 8047828:	e0bff615 	stw	r2,-40(fp)

            for (i = 0; i < imo->imo_num_memberships; ++i)
 804782c:	e03ffc8d 	sth	zero,-14(fp)
 8047830:	00001706 	br	8047890 <udpdemux+0x4c8>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 8047834:	e0bffc8b 	ldhu	r2,-14(fp)
 8047838:	e0fff617 	ldw	r3,-40(fp)
 804783c:	10800084 	addi	r2,r2,2
 8047840:	100490ba 	slli	r2,r2,2
 8047844:	1885883a 	add	r2,r3,r2
 8047848:	10800017 	ldw	r2,0(r2)
 804784c:	10c00117 	ldw	r3,4(r2)
 8047850:	e0bff217 	ldw	r2,-56(fp)
 8047854:	10800617 	ldw	r2,24(r2)
 8047858:	18800a1e 	bne	r3,r2,8047884 <udpdemux+0x4bc>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
 804785c:	e0bffc8b 	ldhu	r2,-14(fp)
 8047860:	e0fff617 	ldw	r3,-40(fp)
 8047864:	10800084 	addi	r2,r2,2
 8047868:	100490ba 	slli	r2,r2,2
 804786c:	1885883a 	add	r2,r3,r2
 8047870:	10800017 	ldw	r2,0(r2)
 8047874:	10c00017 	ldw	r3,0(r2)
 8047878:	e0bffb17 	ldw	r2,-20(fp)
 804787c:	10800417 	ldw	r2,16(r2)
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 8047880:	18800b26 	beq	r3,r2,80478b0 <udpdemux+0x4e8>
            for (i = 0; i < imo->imo_num_memberships; ++i)
 8047884:	e0bffc8b 	ldhu	r2,-14(fp)
 8047888:	10800044 	addi	r2,r2,1
 804788c:	e0bffc8d 	sth	r2,-14(fp)
 8047890:	e0bff617 	ldw	r2,-40(fp)
 8047894:	1080018b 	ldhu	r2,6(r2)
 8047898:	e0fffc8b 	ldhu	r3,-14(fp)
 804789c:	10bfffcc 	andi	r2,r2,65535
 80478a0:	18bfe436 	bltu	r3,r2,8047834 <udpdemux+0x46c>
               {
                  goto found;
               }
            }
            continue;
 80478a4:	00004806 	br	80479c8 <udpdemux+0x600>
         }
      }
      found:
 80478a8:	0001883a 	nop
 80478ac:	00000106 	br	80478b4 <udpdemux+0x4ec>
                  goto found;
 80478b0:	0001883a 	nop
#endif /* INCLUDE_TCP */

      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
 80478b4:	e0bffb17 	ldw	r2,-20(fp)
 80478b8:	10800417 	ldw	r2,16(r2)
 80478bc:	1006d63a 	srli	r3,r2,24
 80478c0:	e0bffb17 	ldw	r2,-20(fp)
 80478c4:	10800417 	ldw	r2,16(r2)
 80478c8:	1004d23a 	srli	r2,r2,8
 80478cc:	10bfc00c 	andi	r2,r2,65280
 80478d0:	1886b03a 	or	r3,r3,r2
 80478d4:	e0bffb17 	ldw	r2,-20(fp)
 80478d8:	10800417 	ldw	r2,16(r2)
 80478dc:	1004923a 	slli	r2,r2,8
 80478e0:	10803fec 	andhi	r2,r2,255
 80478e4:	1886b03a 	or	r3,r3,r2
 80478e8:	e0bffb17 	ldw	r2,-20(fp)
 80478ec:	10800417 	ldw	r2,16(r2)
 80478f0:	1004963a 	slli	r2,r2,24
 80478f4:	1884b03a 	or	r2,r3,r2
 80478f8:	10fc002c 	andhi	r3,r2,61440
 80478fc:	00b80034 	movhi	r2,57344
 8047900:	18800826 	beq	r3,r2,8047924 <udpdemux+0x55c>
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
 8047904:	e0bfff17 	ldw	r2,-4(fp)
 8047908:	10800317 	ldw	r2,12(r2)
 804790c:	10000526 	beq	r2,zero,8047924 <udpdemux+0x55c>
 8047910:	e0bfff17 	ldw	r2,-4(fp)
 8047914:	10c00317 	ldw	r3,12(r2)
 8047918:	e0bffb17 	ldw	r2,-20(fp)
 804791c:	10800417 	ldw	r2,16(r2)
 8047920:	1880281e 	bne	r3,r2,80479c4 <udpdemux+0x5fc>
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
 8047924:	008201b4 	movhi	r2,2054
 8047928:	10802e17 	ldw	r2,184(r2)
 804792c:	10c00044 	addi	r3,r2,1
 8047930:	008201b4 	movhi	r2,2054
 8047934:	10c02e15 	stw	r3,184(r2)
      if (con->u_rcv)         /* if upcall address is set... */
 8047938:	e0bfff17 	ldw	r2,-4(fp)
 804793c:	10800517 	ldw	r2,20(r2)
 8047940:	10000d26 	beq	r2,zero,8047978 <udpdemux+0x5b0>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 8047944:	0009883a 	mov	r4,zero
 8047948:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
 804794c:	e0bfff17 	ldw	r2,-4(fp)
 8047950:	10800517 	ldw	r2,20(r2)
 8047954:	e0ffff17 	ldw	r3,-4(fp)
 8047958:	18c00617 	ldw	r3,24(r3)
 804795c:	180b883a 	mov	r5,r3
 8047960:	e13ff217 	ldw	r4,-56(fp)
 8047964:	103ee83a 	callr	r2
 8047968:	e0bffd15 	stw	r2,-12(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 804796c:	0009883a 	mov	r4,zero
 8047970:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
 8047974:	00000206 	br	8047980 <udpdemux+0x5b8>
      }
      else
         e = ENP_LOGIC;
 8047978:	00bffd44 	movi	r2,-11
 804797c:	e0bffd15 	stw	r2,-12(fp)

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
 8047980:	e0bffd17 	ldw	r2,-12(fp)
 8047984:	10000726 	beq	r2,zero,80479a4 <udpdemux+0x5dc>
      {
         udp_mib.udpInErrors++;
 8047988:	008201b4 	movhi	r2,2054
 804798c:	10803017 	ldw	r2,192(r2)
 8047990:	10c00044 	addi	r3,r2,1
 8047994:	008201b4 	movhi	r2,2054
 8047998:	10c03015 	stw	r3,192(r2)
         udp_free(p);
 804799c:	e13ff217 	ldw	r4,-56(fp)
 80479a0:	804804c0 	call	804804c <udp_free>
      }

      return(e);
 80479a4:	e0bffd17 	ldw	r2,-12(fp)
 80479a8:	00005d06 	br	8047b20 <udpdemux+0x758>
         continue;
 80479ac:	0001883a 	nop
 80479b0:	00000506 	br	80479c8 <udpdemux+0x600>
         continue;
 80479b4:	0001883a 	nop
 80479b8:	00000306 	br	80479c8 <udpdemux+0x600>
         continue;
 80479bc:	0001883a 	nop
 80479c0:	00000106 	br	80479c8 <udpdemux+0x600>
            continue;
 80479c4:	0001883a 	nop
   for (con = firstudp; con; con = con->u_next)
 80479c8:	e0bfff17 	ldw	r2,-4(fp)
 80479cc:	10800017 	ldw	r2,0(r2)
 80479d0:	e0bfff15 	stw	r2,-4(fp)
 80479d4:	e0bfff17 	ldw	r2,-4(fp)
 80479d8:	103f541e 	bne	r2,zero,804772c <udpdemux+0x364>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 80479dc:	e0bffb17 	ldw	r2,-20(fp)
 80479e0:	10800417 	ldw	r2,16(r2)
 80479e4:	10bfffe0 	cmpeqi	r2,r2,-1
 80479e8:	1000121e 	bne	r2,zero,8047a34 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
 80479ec:	e0bffb17 	ldw	r2,-20(fp)
 80479f0:	10c00417 	ldw	r3,16(r2)
 80479f4:	e0bff217 	ldw	r2,-56(fp)
 80479f8:	10800617 	ldw	r2,24(r2)
 80479fc:	10800e17 	ldw	r2,56(r2)
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 8047a00:	18800c26 	beq	r3,r2,8047a34 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
 8047a04:	e0bffb17 	ldw	r2,-20(fp)
 8047a08:	10c00417 	ldw	r3,16(r2)
 8047a0c:	e0bff217 	ldw	r2,-56(fp)
 8047a10:	10800617 	ldw	r2,24(r2)
 8047a14:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
 8047a18:	18800626 	beq	r3,r2,8047a34 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
 8047a1c:	e0bffb17 	ldw	r2,-20(fp)
 8047a20:	10c00417 	ldw	r3,16(r2)
 8047a24:	e0bff217 	ldw	r2,-56(fp)
 8047a28:	10800617 	ldw	r2,24(r2)
 8047a2c:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
 8047a30:	1880121e 	bne	r3,r2,8047a7c <udpdemux+0x6b4>
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 8047a34:	d0a07e17 	ldw	r2,-32264(gp)
 8047a38:	1081000c 	andi	r2,r2,1024
 8047a3c:	10000626 	beq	r2,zero,8047a58 <udpdemux+0x690>
 8047a40:	d0a07e17 	ldw	r2,-32264(gp)
 8047a44:	1080400c 	andi	r2,r2,256
 8047a48:	10000326 	beq	r2,zero,8047a58 <udpdemux+0x690>
         dprintf("UDP: ignoring ip broadcast\n");
 8047a4c:	01020174 	movhi	r4,2053
 8047a50:	21114d04 	addi	r4,r4,17716
 8047a54:	8003ca80 	call	8003ca8 <puts>
#endif
      udp_mib.udpInErrors++;
 8047a58:	008201b4 	movhi	r2,2054
 8047a5c:	10803017 	ldw	r2,192(r2)
 8047a60:	10c00044 	addi	r3,r2,1
 8047a64:	008201b4 	movhi	r2,2054
 8047a68:	10c03015 	stw	r3,192(r2)
      udp_free(p);
 8047a6c:	e13ff217 	ldw	r4,-56(fp)
 8047a70:	804804c0 	call	804804c <udp_free>
      return ENP_NOT_MINE;
 8047a74:	00800084 	movi	r2,2
 8047a78:	00002906 	br	8047b20 <udpdemux+0x758>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 8047a7c:	d0a07e17 	ldw	r2,-32264(gp)
 8047a80:	1081000c 	andi	r2,r2,1024
 8047a84:	10000f26 	beq	r2,zero,8047ac4 <udpdemux+0x6fc>
 8047a88:	d0a07e17 	ldw	r2,-32264(gp)
 8047a8c:	1080400c 	andi	r2,r2,256
 8047a90:	10000c26 	beq	r2,zero,8047ac4 <udpdemux+0x6fc>
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
 8047a94:	e0bffa17 	ldw	r2,-24(fp)
 8047a98:	1080008b 	ldhu	r2,2(r2)
 8047a9c:	10bfffcc 	andi	r2,r2,65535
 8047aa0:	100b883a 	mov	r5,r2
 8047aa4:	01020174 	movhi	r4,2053
 8047aa8:	21115404 	addi	r4,r4,17744
 8047aac:	8003b840 	call	8003b84 <printf>
      if (NDEBUG & DUMP) 
 8047ab0:	d0a07e17 	ldw	r2,-32264(gp)
 8047ab4:	1080008c 	andi	r2,r2,2
 8047ab8:	10000226 	beq	r2,zero,8047ac4 <udpdemux+0x6fc>
         ip_dump(p);
 8047abc:	e13ff217 	ldw	r4,-56(fp)
 8047ac0:	80437b00 	call	80437b0 <ip_dump>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8047ac4:	e13ffa17 	ldw	r4,-24(fp)
 8047ac8:	8047dc80 	call	8047dc8 <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
 8047acc:	e0bff217 	ldw	r2,-56(fp)
 8047ad0:	10c00717 	ldw	r3,28(r2)
 8047ad4:	e0bff217 	ldw	r2,-56(fp)
 8047ad8:	10800617 	ldw	r2,24(r2)
 8047adc:	11000a17 	ldw	r4,40(r2)
 8047ae0:	e0bff217 	ldw	r2,-56(fp)
 8047ae4:	10800617 	ldw	r2,24(r2)
 8047ae8:	d8800015 	stw	r2,0(sp)
 8047aec:	01c000c4 	movi	r7,3
 8047af0:	e1bffb17 	ldw	r6,-20(fp)
 8047af4:	200b883a 	mov	r5,r4
 8047af8:	1809883a 	mov	r4,r3
 8047afc:	804d8640 	call	804d864 <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
 8047b00:	008201b4 	movhi	r2,2054
 8047b04:	10802f17 	ldw	r2,188(r2)
 8047b08:	10c00044 	addi	r3,r2,1
 8047b0c:	008201b4 	movhi	r2,2054
 8047b10:	10c02f15 	stw	r3,188(r2)
   udp_free(p);
 8047b14:	e13ff217 	ldw	r4,-56(fp)
 8047b18:	804804c0 	call	804804c <udp_free>
   return ENP_NOT_MINE;
 8047b1c:	00800084 	movi	r2,2
}
 8047b20:	e037883a 	mov	sp,fp
 8047b24:	dfc00117 	ldw	ra,4(sp)
 8047b28:	df000017 	ldw	fp,0(sp)
 8047b2c:	dec00204 	addi	sp,sp,8
 8047b30:	f800283a 	ret

08047b34 <udp_send>:
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
 8047b34:	deffef04 	addi	sp,sp,-68
 8047b38:	dfc01015 	stw	ra,64(sp)
 8047b3c:	df000f15 	stw	fp,60(sp)
 8047b40:	df000f04 	addi	fp,sp,60
 8047b44:	2005883a 	mov	r2,r4
 8047b48:	2807883a 	mov	r3,r5
 8047b4c:	e1bff515 	stw	r6,-44(fp)
 8047b50:	e0bff70d 	sth	r2,-36(fp)
 8047b54:	1805883a 	mov	r2,r3
 8047b58:	e0bff60d 	sth	r2,-40(fp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 8047b5c:	d0a07e17 	ldw	r2,-32264(gp)
 8047b60:	1080410c 	andi	r2,r2,260
 8047b64:	10001a26 	beq	r2,zero,8047bd0 <udp_send+0x9c>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8047b68:	e0bff517 	ldw	r2,-44(fp)
 8047b6c:	12000417 	ldw	r8,16(r2)
 8047b70:	e1bff60b 	ldhu	r6,-40(fp)
    PUSH_IPADDR(p->fhost), fport);
 8047b74:	e0bff517 	ldw	r2,-44(fp)
 8047b78:	10800717 	ldw	r2,28(r2)
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8047b7c:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(p->fhost), fport);
 8047b80:	e0bff517 	ldw	r2,-44(fp)
 8047b84:	10800717 	ldw	r2,28(r2)
 8047b88:	1004d23a 	srli	r2,r2,8
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8047b8c:	10803fcc 	andi	r2,r2,255
    PUSH_IPADDR(p->fhost), fport);
 8047b90:	e0fff517 	ldw	r3,-44(fp)
 8047b94:	18c00717 	ldw	r3,28(r3)
 8047b98:	1806d43a 	srli	r3,r3,16
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8047b9c:	18c03fcc 	andi	r3,r3,255
    PUSH_IPADDR(p->fhost), fport);
 8047ba0:	e13ff517 	ldw	r4,-44(fp)
 8047ba4:	21000717 	ldw	r4,28(r4)
 8047ba8:	2008d63a 	srli	r4,r4,24
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8047bac:	e17ff70b 	ldhu	r5,-36(fp)
 8047bb0:	d9400315 	stw	r5,12(sp)
 8047bb4:	d9000215 	stw	r4,8(sp)
 8047bb8:	d8c00115 	stw	r3,4(sp)
 8047bbc:	d8800015 	stw	r2,0(sp)
 8047bc0:	400b883a 	mov	r5,r8
 8047bc4:	01020174 	movhi	r4,2053
 8047bc8:	21115b04 	addi	r4,r4,17772
 8047bcc:	8003b840 	call	8003b84 <printf>
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 8047bd0:	0009883a 	mov	r4,zero
 8047bd4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 8047bd8:	e0bff517 	ldw	r2,-44(fp)
 8047bdc:	10800317 	ldw	r2,12(r2)
 8047be0:	10fffe04 	addi	r3,r2,-8
 8047be4:	e0bff517 	ldw	r2,-44(fp)
 8047be8:	10c00315 	stw	r3,12(r2)
   pup = (struct udp*)p->nb_prot;
 8047bec:	e0bff517 	ldw	r2,-44(fp)
 8047bf0:	10800317 	ldw	r2,12(r2)
 8047bf4:	e0bffe15 	stw	r2,-8(fp)
   udplen = p->nb_plen + sizeof(struct udp);
 8047bf8:	e0bff517 	ldw	r2,-44(fp)
 8047bfc:	10800417 	ldw	r2,16(r2)
 8047c00:	10800204 	addi	r2,r2,8
 8047c04:	e0bffd15 	stw	r2,-12(fp)
   p->nb_plen = udplen;
 8047c08:	e0fffd17 	ldw	r3,-12(fp)
 8047c0c:	e0bff517 	ldw	r2,-44(fp)
 8047c10:	10c00415 	stw	r3,16(r2)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 8047c14:	e0bffd17 	ldw	r2,-12(fp)
 8047c18:	1080004c 	andi	r2,r2,1
 8047c1c:	10000426 	beq	r2,zero,8047c30 <udp_send+0xfc>
 8047c20:	e0bffd17 	ldw	r2,-12(fp)
 8047c24:	e0fffe17 	ldw	r3,-8(fp)
 8047c28:	1885883a 	add	r2,r3,r2
 8047c2c:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
 8047c30:	e0bffd17 	ldw	r2,-12(fp)
 8047c34:	1007883a 	mov	r3,r2
 8047c38:	e0bffe17 	ldw	r2,-8(fp)
 8047c3c:	10c0010d 	sth	r3,4(r2)
   pup->ud_srcp = lport;
 8047c40:	e0bffe17 	ldw	r2,-8(fp)
 8047c44:	e0fff60b 	ldhu	r3,-40(fp)
 8047c48:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = fport;
 8047c4c:	e0bffe17 	ldw	r2,-8(fp)
 8047c50:	e0fff70b 	ldhu	r3,-36(fp)
 8047c54:	10c0008d 	sth	r3,2(r2)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8047c58:	e13ffe17 	ldw	r4,-8(fp)
 8047c5c:	8047dc80 	call	8047dc8 <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
 8047c60:	e0bff517 	ldw	r2,-44(fp)
 8047c64:	10800717 	ldw	r2,28(r2)
 8047c68:	10bfffd8 	cmpnei	r2,r2,-1
 8047c6c:	10000f1e 	bne	r2,zero,8047cac <udp_send+0x178>
   {
      if (!p->net)
 8047c70:	e0bff517 	ldw	r2,-44(fp)
 8047c74:	10800617 	ldw	r2,24(r2)
 8047c78:	1000071e 	bne	r2,zero,8047c98 <udp_send+0x164>
      {
         dtrap();    /* programmer forgot to select iface */
 8047c7c:	80301a80 	call	80301a8 <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
 8047c80:	e13ff517 	ldw	r4,-44(fp)
 8047c84:	804804c0 	call	804804c <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
 8047c88:	0009883a 	mov	r4,zero
 8047c8c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
         return ENP_NO_IFACE;
 8047c90:	00bff784 	movi	r2,-34
 8047c94:	00004706 	br	8047db4 <udp_send+0x280>
      }
      src_ip = p->net->n_ipaddr;
 8047c98:	e0bff517 	ldw	r2,-44(fp)
 8047c9c:	10800617 	ldw	r2,24(r2)
 8047ca0:	10800a17 	ldw	r2,40(r2)
 8047ca4:	e0bfff15 	stw	r2,-4(fp)
 8047ca8:	00000506 	br	8047cc0 <udp_send+0x18c>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
 8047cac:	e0bff517 	ldw	r2,-44(fp)
 8047cb0:	10800717 	ldw	r2,28(r2)
 8047cb4:	1009883a 	mov	r4,r2
 8047cb8:	804370c0 	call	804370c <ip_mymach>
 8047cbc:	e0bfff15 	stw	r2,-4(fp)
   php.ph_src = src_ip;
 8047cc0:	e0bfff17 	ldw	r2,-4(fp)
 8047cc4:	e0bff815 	stw	r2,-32(fp)
   php.ph_dest = p->fhost;
 8047cc8:	e0bff517 	ldw	r2,-44(fp)
 8047ccc:	10800717 	ldw	r2,28(r2)
 8047cd0:	e0bff915 	stw	r2,-28(fp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
 8047cd4:	e03ffa05 	stb	zero,-24(fp)
   php.ph_prot = UDP_PROT;
 8047cd8:	00800444 	movi	r2,17
 8047cdc:	e0bffa45 	stb	r2,-23(fp)
   php.ph_len = pup->ud_len;
 8047ce0:	e0bffe17 	ldw	r2,-8(fp)
 8047ce4:	1080010b 	ldhu	r2,4(r2)
 8047ce8:	e0bffa8d 	sth	r2,-22(fp)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 8047cec:	e0bff804 	addi	r2,fp,-32
 8047cf0:	01400184 	movi	r5,6
 8047cf4:	1009883a 	mov	r4,r2
 8047cf8:	802b98c0 	call	802b98c <cksum>
 8047cfc:	1007883a 	mov	r3,r2
 8047d00:	e0bffe17 	ldw	r2,-8(fp)
 8047d04:	10c0018d 	sth	r3,6(r2)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 8047d08:	e0bffd17 	ldw	r2,-12(fp)
 8047d0c:	10800044 	addi	r2,r2,1
 8047d10:	1005d07a 	srai	r2,r2,1
 8047d14:	100b883a 	mov	r5,r2
 8047d18:	e13ffe17 	ldw	r4,-8(fp)
 8047d1c:	802b98c0 	call	802b98c <cksum>
 8047d20:	0084303a 	nor	r2,zero,r2
 8047d24:	1007883a 	mov	r3,r2
 8047d28:	e0bffe17 	ldw	r2,-8(fp)
 8047d2c:	10c0018d 	sth	r3,6(r2)
   if (pup->ud_cksum == 0)
 8047d30:	e0bffe17 	ldw	r2,-8(fp)
 8047d34:	1080018b 	ldhu	r2,6(r2)
 8047d38:	10bfffcc 	andi	r2,r2,65535
 8047d3c:	1000031e 	bne	r2,zero,8047d4c <udp_send+0x218>
      pup->ud_cksum = 0xffff;
 8047d40:	e0bffe17 	ldw	r2,-8(fp)
 8047d44:	00ffffc4 	movi	r3,-1
 8047d48:	10c0018d 	sth	r3,6(r2)
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
 8047d4c:	e0bff517 	ldw	r2,-44(fp)
 8047d50:	10800317 	ldw	r2,12(r2)
 8047d54:	10bffb04 	addi	r2,r2,-20
 8047d58:	e0bffc15 	stw	r2,-16(fp)
   pip->ip_src = src_ip;
 8047d5c:	e0bffc17 	ldw	r2,-16(fp)
 8047d60:	e0ffff17 	ldw	r3,-4(fp)
 8047d64:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = p->fhost;
 8047d68:	e0bff517 	ldw	r2,-44(fp)
 8047d6c:	10c00717 	ldw	r3,28(r2)
 8047d70:	e0bffc17 	ldw	r2,-16(fp)
 8047d74:	10c00415 	stw	r3,16(r2)

   udp_mib.udpOutDatagrams++;
 8047d78:	008201b4 	movhi	r2,2054
 8047d7c:	10803117 	ldw	r2,196(r2)
 8047d80:	10c00044 	addi	r3,r2,1
 8047d84:	008201b4 	movhi	r2,2054
 8047d88:	10c03115 	stw	r3,196(r2)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
 8047d8c:	e0fffd17 	ldw	r3,-12(fp)
 8047d90:	e0bff517 	ldw	r2,-44(fp)
 8047d94:	10c00415 	stw	r3,16(r2)
   e = ip_write(UDP_PROT, p);
 8047d98:	e17ff517 	ldw	r5,-44(fp)
 8047d9c:	01000444 	movi	r4,17
 8047da0:	80427300 	call	8042730 <ip_write>
 8047da4:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8047da8:	0009883a 	mov	r4,zero
 8047dac:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   return e;
 8047db0:	e0bffb17 	ldw	r2,-20(fp)
}
 8047db4:	e037883a 	mov	sp,fp
 8047db8:	dfc00117 	ldw	ra,4(sp)
 8047dbc:	df000017 	ldw	fp,0(sp)
 8047dc0:	dec00204 	addi	sp,sp,8
 8047dc4:	f800283a 	ret

08047dc8 <udpswap>:
 */

#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{
 8047dc8:	defffe04 	addi	sp,sp,-8
 8047dcc:	df000115 	stw	fp,4(sp)
 8047dd0:	df000104 	addi	fp,sp,4
 8047dd4:	e13fff15 	stw	r4,-4(fp)

   pup->ud_srcp = htons(pup->ud_srcp);
 8047dd8:	e0bfff17 	ldw	r2,-4(fp)
 8047ddc:	1080000b 	ldhu	r2,0(r2)
 8047de0:	10bfffcc 	andi	r2,r2,65535
 8047de4:	1004d23a 	srli	r2,r2,8
 8047de8:	1007883a 	mov	r3,r2
 8047dec:	e0bfff17 	ldw	r2,-4(fp)
 8047df0:	1080000b 	ldhu	r2,0(r2)
 8047df4:	10bfffcc 	andi	r2,r2,65535
 8047df8:	1004923a 	slli	r2,r2,8
 8047dfc:	1884b03a 	or	r2,r3,r2
 8047e00:	1007883a 	mov	r3,r2
 8047e04:	e0bfff17 	ldw	r2,-4(fp)
 8047e08:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = htons(pup->ud_dstp);
 8047e0c:	e0bfff17 	ldw	r2,-4(fp)
 8047e10:	1080008b 	ldhu	r2,2(r2)
 8047e14:	10bfffcc 	andi	r2,r2,65535
 8047e18:	1004d23a 	srli	r2,r2,8
 8047e1c:	1007883a 	mov	r3,r2
 8047e20:	e0bfff17 	ldw	r2,-4(fp)
 8047e24:	1080008b 	ldhu	r2,2(r2)
 8047e28:	10bfffcc 	andi	r2,r2,65535
 8047e2c:	1004923a 	slli	r2,r2,8
 8047e30:	1884b03a 	or	r2,r3,r2
 8047e34:	1007883a 	mov	r3,r2
 8047e38:	e0bfff17 	ldw	r2,-4(fp)
 8047e3c:	10c0008d 	sth	r3,2(r2)
   pup->ud_len = htons(pup->ud_len);
 8047e40:	e0bfff17 	ldw	r2,-4(fp)
 8047e44:	1080010b 	ldhu	r2,4(r2)
 8047e48:	10bfffcc 	andi	r2,r2,65535
 8047e4c:	1004d23a 	srli	r2,r2,8
 8047e50:	1007883a 	mov	r3,r2
 8047e54:	e0bfff17 	ldw	r2,-4(fp)
 8047e58:	1080010b 	ldhu	r2,4(r2)
 8047e5c:	10bfffcc 	andi	r2,r2,65535
 8047e60:	1004923a 	slli	r2,r2,8
 8047e64:	1884b03a 	or	r2,r3,r2
 8047e68:	1007883a 	mov	r3,r2
 8047e6c:	e0bfff17 	ldw	r2,-4(fp)
 8047e70:	10c0010d 	sth	r3,4(r2)
   pup->ud_cksum = htons(pup->ud_cksum);
 8047e74:	e0bfff17 	ldw	r2,-4(fp)
 8047e78:	1080018b 	ldhu	r2,6(r2)
 8047e7c:	10bfffcc 	andi	r2,r2,65535
 8047e80:	1004d23a 	srli	r2,r2,8
 8047e84:	1007883a 	mov	r3,r2
 8047e88:	e0bfff17 	ldw	r2,-4(fp)
 8047e8c:	1080018b 	ldhu	r2,6(r2)
 8047e90:	10bfffcc 	andi	r2,r2,65535
 8047e94:	1004923a 	slli	r2,r2,8
 8047e98:	1884b03a 	or	r2,r3,r2
 8047e9c:	1007883a 	mov	r3,r2
 8047ea0:	e0bfff17 	ldw	r2,-4(fp)
 8047ea4:	10c0018d 	sth	r3,6(r2)
}
 8047ea8:	0001883a 	nop
 8047eac:	e037883a 	mov	sp,fp
 8047eb0:	df000017 	ldw	fp,0(sp)
 8047eb4:	dec00104 	addi	sp,sp,4
 8047eb8:	f800283a 	ret

08047ebc <udp_socket>:
#define  MINSOCKET   1200
static unshort usocket = 0;   /* next socket to grab */

unshort
udp_socket(void)
{
 8047ebc:	defffe04 	addi	sp,sp,-8
 8047ec0:	df000115 	stw	fp,4(sp)
 8047ec4:	df000104 	addi	fp,sp,4
   UDPCONN tmp;

   if (usocket < MINSOCKET)
 8047ec8:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047ecc:	10bfffcc 	andi	r2,r2,65535
 8047ed0:	10812c28 	cmpgeui	r2,r2,1200
 8047ed4:	10000a1e 	bne	r2,zero,8047f00 <udp_socket+0x44>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
 8047ed8:	d0a0a317 	ldw	r2,-32116(gp)
 8047edc:	109fffcc 	andi	r2,r2,32767
 8047ee0:	d0a0cc0d 	sth	r2,-31952(gp)
      if (usocket < MINSOCKET)
 8047ee4:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047ee8:	10bfffcc 	andi	r2,r2,65535
 8047eec:	10812c28 	cmpgeui	r2,r2,1200
 8047ef0:	1000031e 	bne	r2,zero,8047f00 <udp_socket+0x44>
         usocket += MINSOCKET;
 8047ef4:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047ef8:	10812c04 	addi	r2,r2,1200
 8047efc:	d0a0cc0d 	sth	r2,-31952(gp)
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8047f00:	d0a09717 	ldw	r2,-32164(gp)
 8047f04:	e0bfff15 	stw	r2,-4(fp)
 8047f08:	00000f06 	br	8047f48 <udp_socket+0x8c>
   {
      if (tmp->u_lport == usocket)
 8047f0c:	e0bfff17 	ldw	r2,-4(fp)
 8047f10:	10c0018b 	ldhu	r3,6(r2)
 8047f14:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047f18:	18ffffcc 	andi	r3,r3,65535
 8047f1c:	10bfffcc 	andi	r2,r2,65535
 8047f20:	1880061e 	bne	r3,r2,8047f3c <udp_socket+0x80>
      {
         usocket++;     /* bump socket number */
 8047f24:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047f28:	10800044 	addi	r2,r2,1
 8047f2c:	d0a0cc0d 	sth	r2,-31952(gp)
         tmp = firstudp;   /* restart scan */
 8047f30:	d0a09717 	ldw	r2,-32164(gp)
 8047f34:	e0bfff15 	stw	r2,-4(fp)
         continue;
 8047f38:	0001883a 	nop
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8047f3c:	e0bfff17 	ldw	r2,-4(fp)
 8047f40:	10800017 	ldw	r2,0(r2)
 8047f44:	e0bfff15 	stw	r2,-4(fp)
 8047f48:	e0bfff17 	ldw	r2,-4(fp)
 8047f4c:	103fef1e 	bne	r2,zero,8047f0c <udp_socket+0x50>
      }
   }
   return usocket++;
 8047f50:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8047f54:	10c00044 	addi	r3,r2,1
 8047f58:	d0e0cc0d 	sth	r3,-31952(gp)
}
 8047f5c:	e037883a 	mov	sp,fp
 8047f60:	df000017 	ldw	fp,0(sp)
 8047f64:	dec00104 	addi	sp,sp,4
 8047f68:	f800283a 	ret

08047f6c <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
 8047f6c:	defffa04 	addi	sp,sp,-24
 8047f70:	dfc00515 	stw	ra,20(sp)
 8047f74:	df000415 	stw	fp,16(sp)
 8047f78:	df000404 	addi	fp,sp,16
 8047f7c:	e13ffd15 	stw	r4,-12(fp)
 8047f80:	e17ffc15 	stw	r5,-16(fp)
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
 8047f84:	e0bffd17 	ldw	r2,-12(fp)
 8047f88:	10800244 	addi	r2,r2,9
 8047f8c:	1007883a 	mov	r3,r2
 8047f90:	00bfff84 	movi	r2,-2
 8047f94:	1884703a 	and	r2,r3,r2
 8047f98:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8047f9c:	01000084 	movi	r4,2
 8047fa0:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
 8047fa4:	e0bfff17 	ldw	r2,-4(fp)
 8047fa8:	10c00904 	addi	r3,r2,36
 8047fac:	e0bffc17 	ldw	r2,-16(fp)
 8047fb0:	1885883a 	add	r2,r3,r2
 8047fb4:	1009883a 	mov	r4,r2
 8047fb8:	802f6300 	call	802f630 <pk_alloc>
 8047fbc:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8047fc0:	01000084 	movi	r4,2
 8047fc4:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
 8047fc8:	e0bffe17 	ldw	r2,-8(fp)
 8047fcc:	10001026 	beq	r2,zero,8048010 <udp_alloc+0xa4>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
 8047fd0:	e0bffc17 	ldw	r2,-16(fp)
 8047fd4:	1005d0ba 	srai	r2,r2,2
 8047fd8:	10800704 	addi	r2,r2,28
 8047fdc:	e0bfff15 	stw	r2,-4(fp)
      p->nb_prot += len;
 8047fe0:	e0bffe17 	ldw	r2,-8(fp)
 8047fe4:	10c00317 	ldw	r3,12(r2)
 8047fe8:	e0bfff17 	ldw	r2,-4(fp)
 8047fec:	1887883a 	add	r3,r3,r2
 8047ff0:	e0bffe17 	ldw	r2,-8(fp)
 8047ff4:	10c00315 	stw	r3,12(r2)
      p->nb_plen -= len;
 8047ff8:	e0bffe17 	ldw	r2,-8(fp)
 8047ffc:	10c00417 	ldw	r3,16(r2)
 8048000:	e0bfff17 	ldw	r2,-4(fp)
 8048004:	1887c83a 	sub	r3,r3,r2
 8048008:	e0bffe17 	ldw	r2,-8(fp)
 804800c:	10c00415 	stw	r3,16(r2)
   }

   return (p);
 8048010:	e0bffe17 	ldw	r2,-8(fp)
}
 8048014:	e037883a 	mov	sp,fp
 8048018:	dfc00117 	ldw	ra,4(sp)
 804801c:	df000017 	ldw	fp,0(sp)
 8048020:	dec00204 	addi	sp,sp,8
 8048024:	f800283a 	ret

08048028 <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
 8048028:	deffff04 	addi	sp,sp,-4
 804802c:	df000015 	stw	fp,0(sp)
 8048030:	d839883a 	mov	fp,sp
    * created is ((2^16 - 1) - (size of IP and UDP headers)) */
   return (0xFFFF - (sizeof (struct ip) + sizeof (struct udp)));
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
 8048034:	d0a03517 	ldw	r2,-32556(gp)
 8048038:	10bff704 	addi	r2,r2,-36
#endif
}
 804803c:	e037883a 	mov	sp,fp
 8048040:	df000017 	ldw	fp,0(sp)
 8048044:	dec00104 	addi	sp,sp,4
 8048048:	f800283a 	ret

0804804c <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 804804c:	defffd04 	addi	sp,sp,-12
 8048050:	dfc00215 	stw	ra,8(sp)
 8048054:	df000115 	stw	fp,4(sp)
 8048058:	df000104 	addi	fp,sp,4
 804805c:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8048060:	01000084 	movi	r4,2
 8048064:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 8048068:	e13fff17 	ldw	r4,-4(fp)
 804806c:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8048070:	01000084 	movi	r4,2
 8048074:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
}
 8048078:	0001883a 	nop
 804807c:	e037883a 	mov	sp,fp
 8048080:	dfc00117 	ldw	ra,4(sp)
 8048084:	df000017 	ldw	fp,0(sp)
 8048088:	dec00204 	addi	sp,sp,8
 804808c:	f800283a 	ret

08048090 <igmpv1_input>:
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
 8048090:	defff804 	addi	sp,sp,-32
 8048094:	dfc00715 	stw	ra,28(sp)
 8048098:	df000615 	stw	fp,24(sp)
 804809c:	df000604 	addi	fp,sp,24
 80480a0:	e13ffa15 	stw	r4,-24(fp)
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
 80480a4:	e0bffa17 	ldw	r2,-24(fp)
 80480a8:	10800617 	ldw	r2,24(r2)
 80480ac:	e0bffd15 	stw	r2,-12(fp)
   int rc;
         
   pip = ip_head (p);
 80480b0:	e0bffa17 	ldw	r2,-24(fp)
 80480b4:	10800317 	ldw	r2,12(r2)
 80480b8:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
 80480bc:	e0bffc17 	ldw	r2,-16(fp)
 80480c0:	10800003 	ldbu	r2,0(r2)
 80480c4:	10803fcc 	andi	r2,r2,255
 80480c8:	100490ba 	slli	r2,r2,2
 80480cc:	10800f0c 	andi	r2,r2,60
 80480d0:	e0fffc17 	ldw	r3,-16(fp)
 80480d4:	1885883a 	add	r2,r3,r2
 80480d8:	e0bffb15 	stw	r2,-20(fp)

   switch (igmp->igmp_type) 
 80480dc:	e0bffb17 	ldw	r2,-20(fp)
 80480e0:	10800003 	ldbu	r2,0(r2)
 80480e4:	10803fcc 	andi	r2,r2,255
 80480e8:	10c00460 	cmpeqi	r3,r2,17
 80480ec:	1800031e 	bne	r3,zero,80480fc <igmpv1_input+0x6c>
 80480f0:	108004a0 	cmpeqi	r2,r2,18
 80480f4:	1000501e 	bne	r2,zero,8048238 <igmpv1_input+0x1a8>
 80480f8:	00006b06 	br	80482a8 <igmpv1_input+0x218>
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
 80480fc:	008201b4 	movhi	r2,2054
 8048100:	10bdd317 	ldw	r2,-2228(r2)
 8048104:	10c00044 	addi	r3,r2,1
 8048108:	008201b4 	movhi	r2,2054
 804810c:	10fdd315 	stw	r3,-2228(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8048110:	e0bffd17 	ldw	r2,-12(fp)
 8048114:	10802c17 	ldw	r2,176(r2)
 8048118:	e0bfff15 	stw	r2,-4(fp)
 804811c:	00004206 	br	8048228 <igmpv1_input+0x198>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
 8048120:	e0bfff17 	ldw	r2,-4(fp)
 8048124:	10800017 	ldw	r2,0(r2)
 8048128:	10003b26 	beq	r2,zero,8048218 <igmpv1_input+0x188>
            continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 804812c:	e0bfff17 	ldw	r2,-4(fp)
 8048130:	10c00017 	ldw	r3,0(r2)
 8048134:	d0a08317 	ldw	r2,-32244(gp)
 8048138:	18803826 	beq	r3,r2,804821c <igmpv1_input+0x18c>
         {
            if (inm->inm_timer == 0)
 804813c:	e0bfff17 	ldw	r2,-4(fp)
 8048140:	10800317 	ldw	r2,12(r2)
 8048144:	1000351e 	bne	r2,zero,804821c <igmpv1_input+0x18c>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 8048148:	008201b4 	movhi	r2,2054
 804814c:	10c01617 	ldw	r3,88(r2)
 8048150:	008201b4 	movhi	r2,2054
 8048154:	10bdce17 	ldw	r2,-2248(r2)
 8048158:	10800a17 	ldw	r2,40(r2)
 804815c:	1008d63a 	srli	r4,r2,24
 8048160:	008201b4 	movhi	r2,2054
 8048164:	10bdce17 	ldw	r2,-2248(r2)
 8048168:	10800a17 	ldw	r2,40(r2)
 804816c:	1004d23a 	srli	r2,r2,8
 8048170:	10bfc00c 	andi	r2,r2,65280
 8048174:	2088b03a 	or	r4,r4,r2
 8048178:	008201b4 	movhi	r2,2054
 804817c:	10bdce17 	ldw	r2,-2248(r2)
 8048180:	10800a17 	ldw	r2,40(r2)
 8048184:	1004923a 	slli	r2,r2,8
 8048188:	10803fec 	andhi	r2,r2,255
 804818c:	2088b03a 	or	r4,r4,r2
 8048190:	008201b4 	movhi	r2,2054
 8048194:	10bdce17 	ldw	r2,-2248(r2)
 8048198:	10800a17 	ldw	r2,40(r2)
 804819c:	1004963a 	slli	r2,r2,24
 80481a0:	2084b03a 	or	r2,r4,r2
 80481a4:	1887883a 	add	r3,r3,r2
 80481a8:	e0bfff17 	ldw	r2,-4(fp)
 80481ac:	10800017 	ldw	r2,0(r2)
 80481b0:	1008d63a 	srli	r4,r2,24
 80481b4:	e0bfff17 	ldw	r2,-4(fp)
 80481b8:	10800017 	ldw	r2,0(r2)
 80481bc:	1004d23a 	srli	r2,r2,8
 80481c0:	10bfc00c 	andi	r2,r2,65280
 80481c4:	2088b03a 	or	r4,r4,r2
 80481c8:	e0bfff17 	ldw	r2,-4(fp)
 80481cc:	10800017 	ldw	r2,0(r2)
 80481d0:	1004923a 	slli	r2,r2,8
 80481d4:	10803fec 	andhi	r2,r2,255
 80481d8:	2088b03a 	or	r4,r4,r2
 80481dc:	e0bfff17 	ldw	r2,-4(fp)
 80481e0:	10800017 	ldw	r2,0(r2)
 80481e4:	1004963a 	slli	r2,r2,24
 80481e8:	2084b03a 	or	r2,r4,r2
 80481ec:	1885883a 	add	r2,r3,r2
 80481f0:	01400c84 	movi	r5,50
 80481f4:	1009883a 	mov	r4,r2
 80481f8:	80120400 	call	8012040 <__umodsi3>
 80481fc:	10c00044 	addi	r3,r2,1
 8048200:	e0bfff17 	ldw	r2,-4(fp)
 8048204:	10c00315 	stw	r3,12(r2)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
 8048208:	d0a08117 	ldw	r2,-32252(gp)
 804820c:	10800044 	addi	r2,r2,1
 8048210:	d0a08115 	stw	r2,-32252(gp)
 8048214:	00000106 	br	804821c <igmpv1_input+0x18c>
            continue;
 8048218:	0001883a 	nop
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 804821c:	e0bfff17 	ldw	r2,-4(fp)
 8048220:	10800517 	ldw	r2,20(r2)
 8048224:	e0bfff15 	stw	r2,-4(fp)
 8048228:	e0bfff17 	ldw	r2,-4(fp)
 804822c:	103fbc1e 	bne	r2,zero,8048120 <igmpv1_input+0x90>
            }   
         }
      }
      rc = IGMP_OK;
 8048230:	e03ffe15 	stw	zero,-8(fp)
      break;
 8048234:	00002406 	br	80482c8 <igmpv1_input+0x238>

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
 8048238:	008201b4 	movhi	r2,2054
 804823c:	10bdd417 	ldw	r2,-2224(r2)
 8048240:	10c00044 	addi	r3,r2,1
 8048244:	008201b4 	movhi	r2,2054
 8048248:	10fdd415 	stw	r3,-2224(r2)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
 804824c:	e0bffb17 	ldw	r2,-20(fp)
 8048250:	10800117 	ldw	r2,4(r2)
 8048254:	e17ffd17 	ldw	r5,-12(fp)
 8048258:	1009883a 	mov	r4,r2
 804825c:	80467980 	call	8046798 <lookup_mcast>
 8048260:	e0bfff15 	stw	r2,-4(fp)
      if (inm != NULL) 
 8048264:	e0bfff17 	ldw	r2,-4(fp)
 8048268:	10000d26 	beq	r2,zero,80482a0 <igmpv1_input+0x210>
      {
         if (inm->inm_timer > 0)
 804826c:	e0bfff17 	ldw	r2,-4(fp)
 8048270:	10800317 	ldw	r2,12(r2)
 8048274:	10000a26 	beq	r2,zero,80482a0 <igmpv1_input+0x210>
         {
            inm->inm_timer = 0;
 8048278:	e0bfff17 	ldw	r2,-4(fp)
 804827c:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 8048280:	d0a08117 	ldw	r2,-32252(gp)
 8048284:	10bfffc4 	addi	r2,r2,-1
 8048288:	d0a08115 	stw	r2,-32252(gp)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 804828c:	008201b4 	movhi	r2,2054
 8048290:	10bdd517 	ldw	r2,-2220(r2)
 8048294:	10c00044 	addi	r3,r2,1
 8048298:	008201b4 	movhi	r2,2054
 804829c:	10fdd515 	stw	r3,-2220(r2)
         }
      }
      rc = IGMP_OK;
 80482a0:	e03ffe15 	stw	zero,-8(fp)
      break;
 80482a4:	00000806 	br	80482c8 <igmpv1_input+0x238>
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
 80482a8:	008201b4 	movhi	r2,2054
 80482ac:	10bde217 	ldw	r2,-2168(r2)
 80482b0:	10c00044 	addi	r3,r2,1
 80482b4:	008201b4 	movhi	r2,2054
 80482b8:	10fde215 	stw	r3,-2168(r2)
      rc = IGMP_ERR;
 80482bc:	00bfffc4 	movi	r2,-1
 80482c0:	e0bffe15 	stw	r2,-8(fp)
      break;   
 80482c4:	0001883a 	nop
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80482c8:	01000084 	movi	r4,2
 80482cc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 80482d0:	e13ffa17 	ldw	r4,-24(fp)
 80482d4:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80482d8:	01000084 	movi	r4,2
 80482dc:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      
   return rc;
 80482e0:	e0bffe17 	ldw	r2,-8(fp)
}
 80482e4:	e037883a 	mov	sp,fp
 80482e8:	dfc00117 	ldw	ra,4(sp)
 80482ec:	df000017 	ldw	fp,0(sp)
 80482f0:	dec00204 	addi	sp,sp,8
 80482f4:	f800283a 	ret

080482f8 <igmpv2_input>:
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
 80482f8:	defff904 	addi	sp,sp,-28
 80482fc:	dfc00615 	stw	ra,24(sp)
 8048300:	df000515 	stw	fp,20(sp)
 8048304:	df000504 	addi	fp,sp,20
 8048308:	e13ffb15 	stw	r4,-20(fp)
   struct igmp * igmp;
   struct ip * pip;
   u_char type;
   int rc;

   pip = ip_head (p);    
 804830c:	e0bffb17 	ldw	r2,-20(fp)
 8048310:	10800317 	ldw	r2,12(r2)
 8048314:	e0bffe15 	stw	r2,-8(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 8048318:	e0bffe17 	ldw	r2,-8(fp)
 804831c:	10800003 	ldbu	r2,0(r2)
 8048320:	10803fcc 	andi	r2,r2,255
 8048324:	100490ba 	slli	r2,r2,2
 8048328:	10800f0c 	andi	r2,r2,60
 804832c:	e0fffe17 	ldw	r3,-8(fp)
 8048330:	1885883a 	add	r2,r3,r2
 8048334:	e0bffd15 	stw	r2,-12(fp)
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;
 8048338:	e0bffd17 	ldw	r2,-12(fp)
 804833c:	10800003 	ldbu	r2,0(r2)
 8048340:	e0bffcc5 	stb	r2,-13(fp)

   switch (type) 
 8048344:	e0bffcc3 	ldbu	r2,-13(fp)
 8048348:	10c005e0 	cmpeqi	r3,r2,23
 804834c:	1800131e 	bne	r3,zero,804839c <igmpv2_input+0xa4>
 8048350:	10c00608 	cmpgei	r3,r2,24
 8048354:	1800181e 	bne	r3,zero,80483b8 <igmpv2_input+0xc0>
 8048358:	10c005a0 	cmpeqi	r3,r2,22
 804835c:	18000b1e 	bne	r3,zero,804838c <igmpv2_input+0x94>
 8048360:	10c005c8 	cmpgei	r3,r2,23
 8048364:	1800141e 	bne	r3,zero,80483b8 <igmpv2_input+0xc0>
 8048368:	10c00460 	cmpeqi	r3,r2,17
 804836c:	1800031e 	bne	r3,zero,804837c <igmpv2_input+0x84>
 8048370:	108004a0 	cmpeqi	r2,r2,18
 8048374:	1000051e 	bne	r2,zero,804838c <igmpv2_input+0x94>
 8048378:	00000f06 	br	80483b8 <igmpv2_input+0xc0>
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
 804837c:	e13ffb17 	ldw	r4,-20(fp)
 8048380:	804851c0 	call	804851c <igmpv2_process_query>
 8048384:	e0bfff15 	stw	r2,-4(fp)
         break;
 8048388:	00001306 	br	80483d8 <igmpv2_input+0xe0>

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
 804838c:	e13ffb17 	ldw	r4,-20(fp)
 8048390:	80484080 	call	8048408 <igmpv2_process_report>
 8048394:	e0bfff15 	stw	r2,-4(fp)
         break;
 8048398:	00000f06 	br	80483d8 <igmpv2_input+0xe0>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
 804839c:	008201b4 	movhi	r2,2054
 80483a0:	10bddb17 	ldw	r2,-2196(r2)
 80483a4:	10c00044 	addi	r3,r2,1
 80483a8:	008201b4 	movhi	r2,2054
 80483ac:	10fddb15 	stw	r3,-2196(r2)
         rc = IGMP_OK;
 80483b0:	e03fff15 	stw	zero,-4(fp)
         break;               
 80483b4:	00000806 	br	80483d8 <igmpv2_input+0xe0>

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
 80483b8:	008201b4 	movhi	r2,2054
 80483bc:	10bde717 	ldw	r2,-2148(r2)
 80483c0:	10c00044 	addi	r3,r2,1
 80483c4:	008201b4 	movhi	r2,2054
 80483c8:	10fde715 	stw	r3,-2148(r2)
         rc = IGMP_ERR;         
 80483cc:	00bfffc4 	movi	r2,-1
 80483d0:	e0bfff15 	stw	r2,-4(fp)
         break;
 80483d4:	0001883a 	nop
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80483d8:	01000084 	movi	r4,2
 80483dc:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   pk_free(p);
 80483e0:	e13ffb17 	ldw	r4,-20(fp)
 80483e4:	802f9440 	call	802f944 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80483e8:	01000084 	movi	r4,2
 80483ec:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
   
   return rc;
 80483f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80483f4:	e037883a 	mov	sp,fp
 80483f8:	dfc00117 	ldw	ra,4(sp)
 80483fc:	df000017 	ldw	fp,0(sp)
 8048400:	dec00204 	addi	sp,sp,8
 8048404:	f800283a 	ret

08048408 <igmpv2_process_report>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
 8048408:	defff904 	addi	sp,sp,-28
 804840c:	dfc00615 	stw	ra,24(sp)
 8048410:	df000515 	stw	fp,20(sp)
 8048414:	df000504 	addi	fp,sp,20
 8048418:	e13ffb15 	stw	r4,-20(fp)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
 804841c:	e0bffb17 	ldw	r2,-20(fp)
 8048420:	10800617 	ldw	r2,24(r2)
 8048424:	e0bfff15 	stw	r2,-4(fp)
   pip = ip_head (p);
 8048428:	e0bffb17 	ldw	r2,-20(fp)
 804842c:	10800317 	ldw	r2,12(r2)
 8048430:	e0bffe15 	stw	r2,-8(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 8048434:	e0bffe17 	ldw	r2,-8(fp)
 8048438:	10800003 	ldbu	r2,0(r2)
 804843c:	10803fcc 	andi	r2,r2,255
 8048440:	100490ba 	slli	r2,r2,2
 8048444:	10800f0c 	andi	r2,r2,60
 8048448:	e0fffe17 	ldw	r3,-8(fp)
 804844c:	1885883a 	add	r2,r3,r2
 8048450:	e0bffd15 	stw	r2,-12(fp)
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
 8048454:	e0bffd17 	ldw	r2,-12(fp)
 8048458:	10800117 	ldw	r2,4(r2)
 804845c:	e17fff17 	ldw	r5,-4(fp)
 8048460:	1009883a 	mov	r4,r2
 8048464:	80467980 	call	8046798 <lookup_mcast>
 8048468:	e0bffc15 	stw	r2,-16(fp)
   if (inm != NULL) 
 804846c:	e0bffc17 	ldw	r2,-16(fp)
 8048470:	10001f26 	beq	r2,zero,80484f0 <igmpv2_process_report+0xe8>
   {
      if (inm->inm_timer != 0)
 8048474:	e0bffc17 	ldw	r2,-16(fp)
 8048478:	10800317 	ldw	r2,12(r2)
 804847c:	10001626 	beq	r2,zero,80484d8 <igmpv2_process_report+0xd0>
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
 8048480:	e0bfff17 	ldw	r2,-4(fp)
 8048484:	10802d03 	ldbu	r2,180(r2)
 8048488:	10803fcc 	andi	r2,r2,255
 804848c:	10000526 	beq	r2,zero,80484a4 <igmpv2_process_report+0x9c>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
 8048490:	e0bffd17 	ldw	r2,-12(fp)
 8048494:	10800003 	ldbu	r2,0(r2)
         if (!(netp->igmpv1_rtr_present && 
 8048498:	10803fcc 	andi	r2,r2,255
 804849c:	108005a0 	cmpeqi	r2,r2,22
 80484a0:	1000181e 	bne	r2,zero,8048504 <igmpv2_process_report+0xfc>
         {
            /* cancel timer */
            inm->inm_timer = 0;
 80484a4:	e0bffc17 	ldw	r2,-16(fp)
 80484a8:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 80484ac:	d0a08117 	ldw	r2,-32252(gp)
 80484b0:	10bfffc4 	addi	r2,r2,-1
 80484b4:	d0a08115 	stw	r2,-32252(gp)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
 80484b8:	e0bffc17 	ldw	r2,-16(fp)
 80484bc:	10000405 	stb	zero,16(r2)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
 80484c0:	008201b4 	movhi	r2,2054
 80484c4:	10bdd917 	ldw	r2,-2204(r2)
 80484c8:	10c00044 	addi	r3,r2,1
 80484cc:	008201b4 	movhi	r2,2054
 80484d0:	10fdd915 	stw	r3,-2204(r2)
 80484d4:	00000b06 	br	8048504 <igmpv2_process_report+0xfc>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
 80484d8:	008201b4 	movhi	r2,2054
 80484dc:	10bdda17 	ldw	r2,-2200(r2)
 80484e0:	10c00044 	addi	r3,r2,1
 80484e4:	008201b4 	movhi	r2,2054
 80484e8:	10fdda15 	stw	r3,-2200(r2)
 80484ec:	00000506 	br	8048504 <igmpv2_process_report+0xfc>
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
 80484f0:	008201b4 	movhi	r2,2054
 80484f4:	10bde517 	ldw	r2,-2156(r2)
 80484f8:	10c00044 	addi	r3,r2,1
 80484fc:	008201b4 	movhi	r2,2054
 8048500:	10fde515 	stw	r3,-2156(r2)
   }
   
   return IGMP_OK;   
 8048504:	0005883a 	mov	r2,zero
}
 8048508:	e037883a 	mov	sp,fp
 804850c:	dfc00117 	ldw	ra,4(sp)
 8048510:	df000017 	ldw	fp,0(sp)
 8048514:	dec00204 	addi	sp,sp,8
 8048518:	f800283a 	ret

0804851c <igmpv2_process_query>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
 804851c:	defff804 	addi	sp,sp,-32
 8048520:	dfc00715 	stw	ra,28(sp)
 8048524:	df000615 	stw	fp,24(sp)
 8048528:	df000604 	addi	fp,sp,24
 804852c:	e13ffa15 	stw	r4,-24(fp)
   NET netp;
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;

   netp = p->net;
 8048530:	e0bffa17 	ldw	r2,-24(fp)
 8048534:	10800617 	ldw	r2,24(r2)
 8048538:	e0bffd15 	stw	r2,-12(fp)
   pip = ip_head (p);
 804853c:	e0bffa17 	ldw	r2,-24(fp)
 8048540:	10800317 	ldw	r2,12(r2)
 8048544:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
 8048548:	e0bffc17 	ldw	r2,-16(fp)
 804854c:	10800003 	ldbu	r2,0(r2)
 8048550:	10803fcc 	andi	r2,r2,255
 8048554:	100490ba 	slli	r2,r2,2
 8048558:	10800f0c 	andi	r2,r2,60
 804855c:	e0fffc17 	ldw	r3,-16(fp)
 8048560:	1885883a 	add	r2,r3,r2
 8048564:	e0bffb15 	stw	r2,-20(fp)

   if (igmp->igmp_code == 0)
 8048568:	e0bffb17 	ldw	r2,-20(fp)
 804856c:	10800043 	ldbu	r2,1(r2)
 8048570:	10803fcc 	andi	r2,r2,255
 8048574:	1000101e 	bne	r2,zero,80485b8 <igmpv2_process_query+0x9c>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
 8048578:	e0bffd17 	ldw	r2,-12(fp)
 804857c:	00c00044 	movi	r3,1
 8048580:	10c02d05 	stb	r3,180(r2)
      netp->igmpv1_query_rcvd_time = cticks;      
 8048584:	d0e0a317 	ldw	r3,-32116(gp)
 8048588:	e0bffd17 	ldw	r2,-12(fp)
 804858c:	10c02e15 	stw	r3,184(r2)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
 8048590:	008201b4 	movhi	r2,2054
 8048594:	10bdd617 	ldw	r2,-2216(r2)
 8048598:	10c00044 	addi	r3,r2,1
 804859c:	008201b4 	movhi	r2,2054
 80485a0:	10fdd615 	stw	r3,-2216(r2)
      /* set maximum time to respond to the equivalent of 10 
       * seconds worth of "ticks" (the timeout routine is
       * intended to be invoked PR_FASTHZ (5) times a second,
       * so each tick is equal to 200 ms) */
      max_resp_time = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;
 80485a4:	00800c84 	movi	r2,50
 80485a8:	e0bfff8d 	sth	r2,-2(fp)
      process_all = IGMP_TRUE;
 80485ac:	00800044 	movi	r2,1
 80485b0:	e0bfff45 	stb	r2,-3(fp)
 80485b4:	00001806 	br	8048618 <igmpv2_process_query+0xfc>
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
 80485b8:	e0bffb17 	ldw	r2,-20(fp)
 80485bc:	10800117 	ldw	r2,4(r2)
 80485c0:	1000081e 	bne	r2,zero,80485e4 <igmpv2_process_query+0xc8>
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
 80485c4:	008201b4 	movhi	r2,2054
 80485c8:	10bdd717 	ldw	r2,-2212(r2)
 80485cc:	10c00044 	addi	r3,r2,1
 80485d0:	008201b4 	movhi	r2,2054
 80485d4:	10fdd715 	stw	r3,-2212(r2)
         process_all = IGMP_TRUE;
 80485d8:	00800044 	movi	r2,1
 80485dc:	e0bfff45 	stb	r2,-3(fp)
 80485e0:	00000606 	br	80485fc <igmpv2_process_query+0xe0>
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
 80485e4:	008201b4 	movhi	r2,2054
 80485e8:	10bdd817 	ldw	r2,-2208(r2)
 80485ec:	10c00044 	addi	r3,r2,1
 80485f0:	008201b4 	movhi	r2,2054
 80485f4:	10fdd815 	stw	r3,-2208(r2)
         process_all = IGMP_FALSE;
 80485f8:	e03fff45 	stb	zero,-3(fp)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
 80485fc:	e0bffb17 	ldw	r2,-20(fp)
 8048600:	10800043 	ldbu	r2,1(r2)
 8048604:	10803fcc 	andi	r2,r2,255
 8048608:	1006d7fa 	srli	r3,r2,31
 804860c:	1885883a 	add	r2,r3,r2
 8048610:	1005d07a 	srai	r2,r2,1
 8048614:	e0bfff8d 	sth	r2,-2(fp)
   
   /* process all entries in a link's multicast address linked
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
 8048618:	e0bfff43 	ldbu	r2,-3(fp)
 804861c:	10001726 	beq	r2,zero,804867c <igmpv2_process_query+0x160>
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8048620:	e0bffd17 	ldw	r2,-12(fp)
 8048624:	10802c17 	ldw	r2,176(r2)
 8048628:	e0bffe15 	stw	r2,-8(fp)
 804862c:	00001006 	br	8048670 <igmpv2_process_query+0x154>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
 8048630:	e0bffe17 	ldw	r2,-8(fp)
 8048634:	10800017 	ldw	r2,0(r2)
 8048638:	10000926 	beq	r2,zero,8048660 <igmpv2_process_query+0x144>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 804863c:	e0bffe17 	ldw	r2,-8(fp)
 8048640:	10c00017 	ldw	r3,0(r2)
 8048644:	d0a08317 	ldw	r2,-32244(gp)
 8048648:	18800626 	beq	r3,r2,8048664 <igmpv2_process_query+0x148>
            igmpv2_chk_set_timer (inm, max_resp_time);
 804864c:	e0bfff8b 	ldhu	r2,-2(fp)
 8048650:	100b883a 	mov	r5,r2
 8048654:	e13ffe17 	ldw	r4,-8(fp)
 8048658:	80486dc0 	call	80486dc <igmpv2_chk_set_timer>
 804865c:	00000106 	br	8048664 <igmpv2_process_query+0x148>
         if (!(inm->inm_addr)) continue;
 8048660:	0001883a 	nop
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8048664:	e0bffe17 	ldw	r2,-8(fp)
 8048668:	10800517 	ldw	r2,20(r2)
 804866c:	e0bffe15 	stw	r2,-8(fp)
 8048670:	e0bffe17 	ldw	r2,-8(fp)
 8048674:	103fee1e 	bne	r2,zero,8048630 <igmpv2_process_query+0x114>
 8048678:	00001206 	br	80486c4 <igmpv2_process_query+0x1a8>
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 804867c:	e0bffb17 	ldw	r2,-20(fp)
 8048680:	10800117 	ldw	r2,4(r2)
 8048684:	e17ffd17 	ldw	r5,-12(fp)
 8048688:	1009883a 	mov	r4,r2
 804868c:	80467980 	call	8046798 <lookup_mcast>
 8048690:	e0bffe15 	stw	r2,-8(fp)
      if (inm != NULL)
 8048694:	e0bffe17 	ldw	r2,-8(fp)
 8048698:	10000526 	beq	r2,zero,80486b0 <igmpv2_process_query+0x194>
         igmpv2_chk_set_timer (inm, max_resp_time);
 804869c:	e0bfff8b 	ldhu	r2,-2(fp)
 80486a0:	100b883a 	mov	r5,r2
 80486a4:	e13ffe17 	ldw	r4,-8(fp)
 80486a8:	80486dc0 	call	80486dc <igmpv2_chk_set_timer>
 80486ac:	00000506 	br	80486c4 <igmpv2_process_query+0x1a8>
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
 80486b0:	008201b4 	movhi	r2,2054
 80486b4:	10bde417 	ldw	r2,-2160(r2)
 80486b8:	10c00044 	addi	r3,r2,1
 80486bc:	008201b4 	movhi	r2,2054
 80486c0:	10fde415 	stw	r3,-2160(r2)
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
 80486c4:	0005883a 	mov	r2,zero
}
 80486c8:	e037883a 	mov	sp,fp
 80486cc:	dfc00117 	ldw	ra,4(sp)
 80486d0:	df000017 	ldw	fp,0(sp)
 80486d4:	dec00204 	addi	sp,sp,8
 80486d8:	f800283a 	ret

080486dc <igmpv2_chk_set_timer>:
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
 80486dc:	defffc04 	addi	sp,sp,-16
 80486e0:	dfc00315 	stw	ra,12(sp)
 80486e4:	df000215 	stw	fp,8(sp)
 80486e8:	df000204 	addi	fp,sp,8
 80486ec:	e13fff15 	stw	r4,-4(fp)
 80486f0:	2805883a 	mov	r2,r5
 80486f4:	e0bffe0d 	sth	r2,-8(fp)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
 80486f8:	e0bfff17 	ldw	r2,-4(fp)
 80486fc:	10800317 	ldw	r2,12(r2)
 8048700:	e0fffe0b 	ldhu	r3,-8(fp)
 8048704:	18800336 	bltu	r3,r2,8048714 <igmpv2_chk_set_timer+0x38>
       (inm->inm_timer == 0))
 8048708:	e0bfff17 	ldw	r2,-4(fp)
 804870c:	10800317 	ldw	r2,12(r2)
   if ((inm->inm_timer > max_resp_time) ||
 8048710:	1000381e 	bne	r2,zero,80487f4 <igmpv2_chk_set_timer+0x118>
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 8048714:	e0bfff17 	ldw	r2,-4(fp)
 8048718:	10800317 	ldw	r2,12(r2)
 804871c:	1000031e 	bne	r2,zero,804872c <igmpv2_chk_set_timer+0x50>
 8048720:	d0a08117 	ldw	r2,-32252(gp)
 8048724:	10800044 	addi	r2,r2,1
 8048728:	d0a08115 	stw	r2,-32252(gp)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
 804872c:	008201b4 	movhi	r2,2054
 8048730:	10c01617 	ldw	r3,88(r2)
 8048734:	008201b4 	movhi	r2,2054
 8048738:	10bdce17 	ldw	r2,-2248(r2)
 804873c:	10800a17 	ldw	r2,40(r2)
 8048740:	1008d63a 	srli	r4,r2,24
 8048744:	008201b4 	movhi	r2,2054
 8048748:	10bdce17 	ldw	r2,-2248(r2)
 804874c:	10800a17 	ldw	r2,40(r2)
 8048750:	1004d23a 	srli	r2,r2,8
 8048754:	10bfc00c 	andi	r2,r2,65280
 8048758:	2088b03a 	or	r4,r4,r2
 804875c:	008201b4 	movhi	r2,2054
 8048760:	10bdce17 	ldw	r2,-2248(r2)
 8048764:	10800a17 	ldw	r2,40(r2)
 8048768:	1004923a 	slli	r2,r2,8
 804876c:	10803fec 	andhi	r2,r2,255
 8048770:	2088b03a 	or	r4,r4,r2
 8048774:	008201b4 	movhi	r2,2054
 8048778:	10bdce17 	ldw	r2,-2248(r2)
 804877c:	10800a17 	ldw	r2,40(r2)
 8048780:	1004963a 	slli	r2,r2,24
 8048784:	2084b03a 	or	r2,r4,r2
 8048788:	1887883a 	add	r3,r3,r2
 804878c:	e0bfff17 	ldw	r2,-4(fp)
 8048790:	10800017 	ldw	r2,0(r2)
 8048794:	1008d63a 	srli	r4,r2,24
 8048798:	e0bfff17 	ldw	r2,-4(fp)
 804879c:	10800017 	ldw	r2,0(r2)
 80487a0:	1004d23a 	srli	r2,r2,8
 80487a4:	10bfc00c 	andi	r2,r2,65280
 80487a8:	2088b03a 	or	r4,r4,r2
 80487ac:	e0bfff17 	ldw	r2,-4(fp)
 80487b0:	10800017 	ldw	r2,0(r2)
 80487b4:	1004923a 	slli	r2,r2,8
 80487b8:	10803fec 	andhi	r2,r2,255
 80487bc:	2088b03a 	or	r4,r4,r2
 80487c0:	e0bfff17 	ldw	r2,-4(fp)
 80487c4:	10800017 	ldw	r2,0(r2)
 80487c8:	1004963a 	slli	r2,r2,24
 80487cc:	2084b03a 	or	r2,r4,r2
 80487d0:	1885883a 	add	r2,r3,r2
 80487d4:	e0fffe0b 	ldhu	r3,-8(fp)
 80487d8:	180b883a 	mov	r5,r3
 80487dc:	1009883a 	mov	r4,r2
 80487e0:	80120400 	call	8012040 <__umodsi3>
 80487e4:	10c00044 	addi	r3,r2,1
 80487e8:	e0bfff17 	ldw	r2,-4(fp)
 80487ec:	10c00315 	stw	r3,12(r2)
   }

   return;
 80487f0:	0001883a 	nop
 80487f4:	0001883a 	nop
}
 80487f8:	e037883a 	mov	sp,fp
 80487fc:	dfc00117 	ldw	ra,4(sp)
 8048800:	df000017 	ldw	fp,0(sp)
 8048804:	dec00204 	addi	sp,sp,8
 8048808:	f800283a 	ret

0804880c <igmpv2_chk4_rtr_alert_opt>:
 *         the IP Router Alert option in the received
 *         packet, and IGMP_FALSE otherwise.
 */

u_char igmpv2_chk4_rtr_alert_opt (struct ip * pip)
{
 804880c:	defffb04 	addi	sp,sp,-20
 8048810:	df000415 	stw	fp,16(sp)
 8048814:	df000404 	addi	fp,sp,16
 8048818:	e13ffc15 	stw	r4,-16(fp)
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
 804881c:	e0bffc17 	ldw	r2,-16(fp)
 8048820:	10800003 	ldbu	r2,0(r2)
 8048824:	100490ba 	slli	r2,r2,2
 8048828:	10800f0c 	andi	r2,r2,60
 804882c:	10bffb04 	addi	r2,r2,-20
 8048830:	e0bffec5 	stb	r2,-5(fp)

   if (total_optlen > 0)
 8048834:	e0bffec3 	ldbu	r2,-5(fp)
 8048838:	10004126 	beq	r2,zero,8048940 <igmpv2_chk4_rtr_alert_opt+0x134>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
 804883c:	e0bffc17 	ldw	r2,-16(fp)
 8048840:	10800504 	addi	r2,r2,20
 8048844:	e0bfff15 	stw	r2,-4(fp)
  
      while (total_optlen > 0)
 8048848:	00003b06 	br	8048938 <igmpv2_chk4_rtr_alert_opt+0x12c>
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
 804884c:	e0bfff17 	ldw	r2,-4(fp)
 8048850:	10800003 	ldbu	r2,0(r2)
 8048854:	108007cc 	andi	r2,r2,31
 8048858:	e0bffe45 	stb	r2,-7(fp)
         switch (optval)
 804885c:	e0bffe43 	ldbu	r2,-7(fp)
 8048860:	10c00520 	cmpeqi	r3,r2,20
 8048864:	18000d1e 	bne	r3,zero,804889c <igmpv2_chk4_rtr_alert_opt+0x90>
 8048868:	10c00548 	cmpgei	r3,r2,21
 804886c:	1800241e 	bne	r3,zero,8048900 <igmpv2_chk4_rtr_alert_opt+0xf4>
 8048870:	10000326 	beq	r2,zero,8048880 <igmpv2_chk4_rtr_alert_opt+0x74>
 8048874:	10800060 	cmpeqi	r2,r2,1
 8048878:	1000051e 	bne	r2,zero,8048890 <igmpv2_chk4_rtr_alert_opt+0x84>
 804887c:	00002006 	br	8048900 <igmpv2_chk4_rtr_alert_opt+0xf4>
         {
            case EOL_OPT:
               /* we've encountered the End of Option List option, 
                * and so setting optlen isn't necessary */
               optlen = 1;
 8048880:	00800044 	movi	r2,1
 8048884:	e0bffe85 	stb	r2,-6(fp)
               /* we're done - we couldn't locate the IP Router Alert 
                * option in this IP header */
               return IGMP_FALSE;
 8048888:	0005883a 	mov	r2,zero
 804888c:	00002d06 	br	8048944 <igmpv2_chk4_rtr_alert_opt+0x138>
         
            case NOOP_OPT:
               /* skip past the one byte of the No Operation option */
               optlen = 1;
 8048890:	00800044 	movi	r2,1
 8048894:	e0bffe85 	stb	r2,-6(fp)
               break;
 8048898:	00001f06 	br	8048918 <igmpv2_chk4_rtr_alert_opt+0x10c>
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
 804889c:	e0bfff17 	ldw	r2,-4(fp)
 80488a0:	e0bffd15 	stw	r2,-12(fp)
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
 80488a4:	e0bffd17 	ldw	r2,-12(fp)
 80488a8:	10800017 	ldw	r2,0(r2)
 80488ac:	1006d63a 	srli	r3,r2,24
 80488b0:	e0bffd17 	ldw	r2,-12(fp)
 80488b4:	10800017 	ldw	r2,0(r2)
 80488b8:	1004d23a 	srli	r2,r2,8
 80488bc:	10bfc00c 	andi	r2,r2,65280
 80488c0:	1886b03a 	or	r3,r3,r2
 80488c4:	e0bffd17 	ldw	r2,-12(fp)
 80488c8:	10800017 	ldw	r2,0(r2)
 80488cc:	1004923a 	slli	r2,r2,8
 80488d0:	10803fec 	andhi	r2,r2,255
 80488d4:	1886b03a 	or	r3,r3,r2
 80488d8:	e0bffd17 	ldw	r2,-12(fp)
 80488dc:	10800017 	ldw	r2,0(r2)
 80488e0:	1004963a 	slli	r2,r2,24
 80488e4:	1886b03a 	or	r3,r3,r2
 80488e8:	00a50134 	movhi	r2,37892
 80488ec:	1880021e 	bne	r3,r2,80488f8 <igmpv2_chk4_rtr_alert_opt+0xec>
                  /* found the option, return success */
                  return IGMP_TRUE;
 80488f0:	00800044 	movi	r2,1
 80488f4:	00001306 	br	8048944 <igmpv2_chk4_rtr_alert_opt+0x138>
               else return IGMP_FALSE;
 80488f8:	0005883a 	mov	r2,zero
 80488fc:	00001106 	br	8048944 <igmpv2_chk4_rtr_alert_opt+0x138>
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
 8048900:	e0bfff17 	ldw	r2,-4(fp)
 8048904:	10800044 	addi	r2,r2,1
 8048908:	10800003 	ldbu	r2,0(r2)
 804890c:	10800084 	addi	r2,r2,2
 8048910:	e0bffe85 	stb	r2,-6(fp)
               break;
 8048914:	0001883a 	nop
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
 8048918:	e0bffe83 	ldbu	r2,-6(fp)
 804891c:	e0ffff17 	ldw	r3,-4(fp)
 8048920:	1885883a 	add	r2,r3,r2
 8048924:	e0bfff15 	stw	r2,-4(fp)
         total_optlen -= optlen;
 8048928:	e0fffec3 	ldbu	r3,-5(fp)
 804892c:	e0bffe83 	ldbu	r2,-6(fp)
 8048930:	1885c83a 	sub	r2,r3,r2
 8048934:	e0bffec5 	stb	r2,-5(fp)
      while (total_optlen > 0)
 8048938:	e0bffec3 	ldbu	r2,-5(fp)
 804893c:	103fc31e 	bne	r2,zero,804884c <igmpv2_chk4_rtr_alert_opt+0x40>
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
 8048940:	0005883a 	mov	r2,zero
}
 8048944:	e037883a 	mov	sp,fp
 8048948:	df000017 	ldw	fp,0(sp)
 804894c:	dec00104 	addi	sp,sp,4
 8048950:	f800283a 	ret

08048954 <IPADDR_TO_NETP>:
 * RETURNS: 
 */

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
 8048954:	defffc04 	addi	sp,sp,-16
 8048958:	df000315 	stw	fp,12(sp)
 804895c:	df000304 	addi	fp,sp,12
 8048960:	e13ffe15 	stw	r4,-8(fp)
 8048964:	e17ffd15 	stw	r5,-12(fp)
   u_short  idx   =  0;
 8048968:	e03fff8d 	sth	zero,-2(fp)
   *netp = nets[idx];
 804896c:	e0bfff8b 	ldhu	r2,-2(fp)
 8048970:	100690ba 	slli	r3,r2,2
 8048974:	008201b4 	movhi	r2,2054
 8048978:	1885883a 	add	r2,r3,r2
 804897c:	10fdce17 	ldw	r3,-2248(r2)
 8048980:	e0bffd17 	ldw	r2,-12(fp)
 8048984:	10c00015 	stw	r3,0(r2)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
 8048988:	e0bffe17 	ldw	r2,-8(fp)
 804898c:	1000281e 	bne	r2,zero,8048a30 <IPADDR_TO_NETP+0xdc>
   {
      for (idx = 0; idx < ifNumber; idx++)
 8048990:	e03fff8d 	sth	zero,-2(fp)
 8048994:	00001206 	br	80489e0 <IPADDR_TO_NETP+0x8c>
      {
         if (nets[idx]->n_mcastlist)
 8048998:	e0bfff8b 	ldhu	r2,-2(fp)
 804899c:	100690ba 	slli	r3,r2,2
 80489a0:	008201b4 	movhi	r2,2054
 80489a4:	1885883a 	add	r2,r3,r2
 80489a8:	10bdce17 	ldw	r2,-2248(r2)
 80489ac:	10802b17 	ldw	r2,172(r2)
 80489b0:	10000826 	beq	r2,zero,80489d4 <IPADDR_TO_NETP+0x80>
         {
            *netp = nets[idx];
 80489b4:	e0bfff8b 	ldhu	r2,-2(fp)
 80489b8:	100690ba 	slli	r3,r2,2
 80489bc:	008201b4 	movhi	r2,2054
 80489c0:	1885883a 	add	r2,r3,r2
 80489c4:	10fdce17 	ldw	r3,-2248(r2)
 80489c8:	e0bffd17 	ldw	r2,-12(fp)
 80489cc:	10c00015 	stw	r3,0(r2)
            break;
 80489d0:	00002006 	br	8048a54 <IPADDR_TO_NETP+0x100>
      for (idx = 0; idx < ifNumber; idx++)
 80489d4:	e0bfff8b 	ldhu	r2,-2(fp)
 80489d8:	10800044 	addi	r2,r2,1
 80489dc:	e0bfff8d 	sth	r2,-2(fp)
 80489e0:	e0ffff8b 	ldhu	r3,-2(fp)
 80489e4:	d0a07f17 	ldw	r2,-32260(gp)
 80489e8:	18bfeb36 	bltu	r3,r2,8048998 <IPADDR_TO_NETP+0x44>
         }
         else
            *netp = nets[idx];
      }
   }
}
 80489ec:	00001906 	br	8048a54 <IPADDR_TO_NETP+0x100>
         idx++;
 80489f0:	e0bfff8b 	ldhu	r2,-2(fp)
 80489f4:	10800044 	addi	r2,r2,1
 80489f8:	e0bfff8d 	sth	r2,-2(fp)
         if (idx >= ifNumber)
 80489fc:	e0ffff8b 	ldhu	r3,-2(fp)
 8048a00:	d0a07f17 	ldw	r2,-32260(gp)
 8048a04:	18800336 	bltu	r3,r2,8048a14 <IPADDR_TO_NETP+0xc0>
            *netp = NULL;
 8048a08:	e0bffd17 	ldw	r2,-12(fp)
 8048a0c:	10000015 	stw	zero,0(r2)
            break;
 8048a10:	00001006 	br	8048a54 <IPADDR_TO_NETP+0x100>
            *netp = nets[idx];
 8048a14:	e0bfff8b 	ldhu	r2,-2(fp)
 8048a18:	100690ba 	slli	r3,r2,2
 8048a1c:	008201b4 	movhi	r2,2054
 8048a20:	1885883a 	add	r2,r3,r2
 8048a24:	10fdce17 	ldw	r3,-2248(r2)
 8048a28:	e0bffd17 	ldw	r2,-12(fp)
 8048a2c:	10c00015 	stw	r3,0(r2)
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 8048a30:	e0bffd17 	ldw	r2,-12(fp)
 8048a34:	10800017 	ldw	r2,0(r2)
 8048a38:	10000626 	beq	r2,zero,8048a54 <IPADDR_TO_NETP+0x100>
 8048a3c:	e0bffd17 	ldw	r2,-12(fp)
 8048a40:	10800017 	ldw	r2,0(r2)
 8048a44:	10800a17 	ldw	r2,40(r2)
 8048a48:	e0fffe17 	ldw	r3,-8(fp)
 8048a4c:	18bfe81e 	bne	r3,r2,80489f0 <IPADDR_TO_NETP+0x9c>
}
 8048a50:	00000006 	br	8048a54 <IPADDR_TO_NETP+0x100>
 8048a54:	0001883a 	nop
 8048a58:	e037883a 	mov	sp,fp
 8048a5c:	df000017 	ldw	fp,0(sp)
 8048a60:	dec00104 	addi	sp,sp,4
 8048a64:	f800283a 	ret

08048a68 <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
 8048a68:	defff304 	addi	sp,sp,-52
 8048a6c:	dfc00c15 	stw	ra,48(sp)
 8048a70:	df000b15 	stw	fp,44(sp)
 8048a74:	dc000a15 	stw	r16,40(sp)
 8048a78:	df000b04 	addi	fp,sp,44
 8048a7c:	e13ff715 	stw	r4,-36(fp)
 8048a80:	e17ff615 	stw	r5,-40(fp)
 8048a84:	e1bff515 	stw	r6,-44(fp)
   int   error =  0;
 8048a88:	e03ffe15 	stw	zero,-8(fp)
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
 8048a8c:	e03ff815 	stw	zero,-32(fp)
   struct ip_moptions * imo   =  so->inp_moptions;
 8048a90:	e0bff617 	ldw	r2,-40(fp)
 8048a94:	10800317 	ldw	r2,12(r2)
 8048a98:	e0bffc15 	stw	r2,-16(fp)
   struct ip_moptions **imop  =  &so->inp_moptions;
 8048a9c:	e0bff617 	ldw	r2,-40(fp)
 8048aa0:	10800304 	addi	r2,r2,12
 8048aa4:	e0bffb15 	stw	r2,-20(fp)
   ip_addr addr;


   if (imo == NULL) 
 8048aa8:	e0bffc17 	ldw	r2,-16(fp)
 8048aac:	1000141e 	bne	r2,zero,8048b00 <ip_setmoptions+0x98>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
 8048ab0:	01001604 	movi	r4,88
 8048ab4:	8030d080 	call	8030d08 <npalloc>
 8048ab8:	e0bffc15 	stw	r2,-16(fp)

      if (imo == NULL)
 8048abc:	e0bffc17 	ldw	r2,-16(fp)
 8048ac0:	1000021e 	bne	r2,zero,8048acc <ip_setmoptions+0x64>
         return (ENOBUFS);
 8048ac4:	00801a44 	movi	r2,105
 8048ac8:	00014906 	br	8048ff0 <ip_setmoptions+0x588>
      *imop = imo;
 8048acc:	e0bffb17 	ldw	r2,-20(fp)
 8048ad0:	e0fffc17 	ldw	r3,-16(fp)
 8048ad4:	10c00015 	stw	r3,0(r2)
      imo->imo_multicast_netp = NULL;
 8048ad8:	e0bffc17 	ldw	r2,-16(fp)
 8048adc:	10000015 	stw	zero,0(r2)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
 8048ae0:	e0bffc17 	ldw	r2,-16(fp)
 8048ae4:	00c00044 	movi	r3,1
 8048ae8:	10c00105 	stb	r3,4(r2)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
 8048aec:	e0bffc17 	ldw	r2,-16(fp)
 8048af0:	00c00044 	movi	r3,1
 8048af4:	10c00145 	stb	r3,5(r2)
      imo->imo_num_memberships = 0;
 8048af8:	e0bffc17 	ldw	r2,-16(fp)
 8048afc:	1000018d 	sth	zero,6(r2)
 8048b00:	e0bff717 	ldw	r2,-36(fp)
 8048b04:	10bffdc4 	addi	r2,r2,-9
 8048b08:	10c00168 	cmpgeui	r3,r2,5
 8048b0c:	18011c1e 	bne	r3,zero,8048f80 <ip_setmoptions+0x518>
 8048b10:	100690ba 	slli	r3,r2,2
 8048b14:	00820174 	movhi	r2,2053
 8048b18:	1885883a 	add	r2,r3,r2
 8048b1c:	10a2c917 	ldw	r2,-29916(r2)
 8048b20:	1000683a 	jmp	r2
 8048b24:	08048b38 	rdprs	zero,at,4652
 8048b28:	08048ba0 	cmpeqi	zero,at,4654
 8048b2c:	08048bb4 	orhi	zero,at,4654
 8048b30:	08048be8 	cmpgeui	zero,at,4655
 8048b34:	08048dac 	andhi	zero,at,4662

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
 8048b38:	e0bff517 	ldw	r2,-44(fp)
 8048b3c:	10800017 	ldw	r2,0(r2)
 8048b40:	e0bff915 	stw	r2,-28(fp)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
 8048b44:	e0bff917 	ldw	r2,-28(fp)
 8048b48:	1000031e 	bne	r2,zero,8048b58 <ip_setmoptions+0xf0>
      {
         imo->imo_multicast_netp = NULL;
 8048b4c:	e0bffc17 	ldw	r2,-16(fp)
 8048b50:	10000015 	stw	zero,0(r2)
         break;
 8048b54:	00010e06 	br	8048f90 <ip_setmoptions+0x528>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
 8048b58:	e0bff804 	addi	r2,fp,-32
 8048b5c:	100b883a 	mov	r5,r2
 8048b60:	e13ff917 	ldw	r4,-28(fp)
 8048b64:	80489540 	call	8048954 <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
 8048b68:	e0bff817 	ldw	r2,-32(fp)
 8048b6c:	10000326 	beq	r2,zero,8048b7c <ip_setmoptions+0x114>
 8048b70:	e0bff817 	ldw	r2,-32(fp)
 8048b74:	10802b17 	ldw	r2,172(r2)
 8048b78:	1000031e 	bne	r2,zero,8048b88 <ip_setmoptions+0x120>
      {
         error = EADDRNOTAVAIL;
 8048b7c:	00801f44 	movi	r2,125
 8048b80:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048b84:	00010206 	br	8048f90 <ip_setmoptions+0x528>
      }
      if (addr != AADDR) 
 8048b88:	e0bff917 	ldw	r2,-28(fp)
 8048b8c:	1000ff26 	beq	r2,zero,8048f8c <ip_setmoptions+0x524>
         imo->imo_multicast_netp = netp;
 8048b90:	e0fff817 	ldw	r3,-32(fp)
 8048b94:	e0bffc17 	ldw	r2,-16(fp)
 8048b98:	10c00015 	stw	r3,0(r2)
      break;
 8048b9c:	0000fb06 	br	8048f8c <ip_setmoptions+0x524>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
 8048ba0:	e0bff517 	ldw	r2,-44(fp)
 8048ba4:	10c00003 	ldbu	r3,0(r2)
 8048ba8:	e0bffc17 	ldw	r2,-16(fp)
 8048bac:	10c00105 	stb	r3,4(r2)
      break;
 8048bb0:	0000f706 	br	8048f90 <ip_setmoptions+0x528>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
 8048bb4:	e0bff517 	ldw	r2,-44(fp)
 8048bb8:	10800003 	ldbu	r2,0(r2)
 8048bbc:	10803fcc 	andi	r2,r2,255
 8048bc0:	108000b0 	cmpltui	r2,r2,2
 8048bc4:	1000031e 	bne	r2,zero,8048bd4 <ip_setmoptions+0x16c>
      {
         error = EINVAL;
 8048bc8:	00800584 	movi	r2,22
 8048bcc:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048bd0:	0000ef06 	br	8048f90 <ip_setmoptions+0x528>
      }
      imo->imo_multicast_loop = *(u_char *)(val);
 8048bd4:	e0bff517 	ldw	r2,-44(fp)
 8048bd8:	10c00003 	ldbu	r3,0(r2)
 8048bdc:	e0bffc17 	ldw	r2,-16(fp)
 8048be0:	10c00145 	stb	r3,5(r2)
      break;
 8048be4:	0000ea06 	br	8048f90 <ip_setmoptions+0x528>
   case IP_ADD_MEMBERSHIP:
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 8048be8:	e0bff517 	ldw	r2,-44(fp)
 8048bec:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 8048bf0:	e0bffa17 	ldw	r2,-24(fp)
 8048bf4:	10800017 	ldw	r2,0(r2)
 8048bf8:	1006d63a 	srli	r3,r2,24
 8048bfc:	e0bffa17 	ldw	r2,-24(fp)
 8048c00:	10800017 	ldw	r2,0(r2)
 8048c04:	1004d23a 	srli	r2,r2,8
 8048c08:	10bfc00c 	andi	r2,r2,65280
 8048c0c:	1886b03a 	or	r3,r3,r2
 8048c10:	e0bffa17 	ldw	r2,-24(fp)
 8048c14:	10800017 	ldw	r2,0(r2)
 8048c18:	1004923a 	slli	r2,r2,8
 8048c1c:	10803fec 	andhi	r2,r2,255
 8048c20:	1886b03a 	or	r3,r3,r2
 8048c24:	e0bffa17 	ldw	r2,-24(fp)
 8048c28:	10800017 	ldw	r2,0(r2)
 8048c2c:	1004963a 	slli	r2,r2,24
 8048c30:	1884b03a 	or	r2,r3,r2
 8048c34:	10fc002c 	andhi	r3,r2,61440
 8048c38:	00b80034 	movhi	r2,57344
 8048c3c:	18800326 	beq	r3,r2,8048c4c <ip_setmoptions+0x1e4>
      {
         error = EINVAL;
 8048c40:	00800584 	movi	r2,22
 8048c44:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048c48:	0000d106 	br	8048f90 <ip_setmoptions+0x528>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 8048c4c:	e0bffa17 	ldw	r2,-24(fp)
 8048c50:	10800117 	ldw	r2,4(r2)
 8048c54:	e0fff804 	addi	r3,fp,-32
 8048c58:	180b883a 	mov	r5,r3
 8048c5c:	1009883a 	mov	r4,r2
 8048c60:	80489540 	call	8048954 <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
 8048c64:	e0bff817 	ldw	r2,-32(fp)
 8048c68:	10000326 	beq	r2,zero,8048c78 <ip_setmoptions+0x210>
 8048c6c:	e0bff817 	ldw	r2,-32(fp)
 8048c70:	10802b17 	ldw	r2,172(r2)
 8048c74:	1000031e 	bne	r2,zero,8048c84 <ip_setmoptions+0x21c>
      {
         error = EADDRNOTAVAIL;
 8048c78:	00801f44 	movi	r2,125
 8048c7c:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048c80:	0000c306 	br	8048f90 <ip_setmoptions+0x528>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8048c84:	e03ffd8d 	sth	zero,-10(fp)
 8048c88:	00001606 	br	8048ce4 <ip_setmoptions+0x27c>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
 8048c8c:	e0bffd8b 	ldhu	r2,-10(fp)
 8048c90:	e0fffc17 	ldw	r3,-16(fp)
 8048c94:	10800084 	addi	r2,r2,2
 8048c98:	100490ba 	slli	r2,r2,2
 8048c9c:	1885883a 	add	r2,r3,r2
 8048ca0:	10800017 	ldw	r2,0(r2)
 8048ca4:	10c00117 	ldw	r3,4(r2)
 8048ca8:	e0bff817 	ldw	r2,-32(fp)
 8048cac:	18800a1e 	bne	r3,r2,8048cd8 <ip_setmoptions+0x270>
             imo->imo_membership[i]->inm_addr
 8048cb0:	e0bffd8b 	ldhu	r2,-10(fp)
 8048cb4:	e0fffc17 	ldw	r3,-16(fp)
 8048cb8:	10800084 	addi	r2,r2,2
 8048cbc:	100490ba 	slli	r2,r2,2
 8048cc0:	1885883a 	add	r2,r3,r2
 8048cc4:	10800017 	ldw	r2,0(r2)
 8048cc8:	10c00017 	ldw	r3,0(r2)
             == mreq->imr_multiaddr)
 8048ccc:	e0bffa17 	ldw	r2,-24(fp)
 8048cd0:	10800017 	ldw	r2,0(r2)
         if (imo->imo_membership[i]->inm_netp == netp &&
 8048cd4:	18800926 	beq	r3,r2,8048cfc <ip_setmoptions+0x294>
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8048cd8:	e0bffd8b 	ldhu	r2,-10(fp)
 8048cdc:	10800044 	addi	r2,r2,1
 8048ce0:	e0bffd8d 	sth	r2,-10(fp)
 8048ce4:	e0bffc17 	ldw	r2,-16(fp)
 8048ce8:	1080018b 	ldhu	r2,6(r2)
 8048cec:	e0fffd8b 	ldhu	r3,-10(fp)
 8048cf0:	10bfffcc 	andi	r2,r2,65535
 8048cf4:	18bfe536 	bltu	r3,r2,8048c8c <ip_setmoptions+0x224>
 8048cf8:	00000106 	br	8048d00 <ip_setmoptions+0x298>
         {
            break;
 8048cfc:	0001883a 	nop
         }
      }
      if (i < imo->imo_num_memberships) 
 8048d00:	e0bffc17 	ldw	r2,-16(fp)
 8048d04:	1080018b 	ldhu	r2,6(r2)
 8048d08:	e0fffd8b 	ldhu	r3,-10(fp)
 8048d0c:	10bfffcc 	andi	r2,r2,65535
 8048d10:	1880032e 	bgeu	r3,r2,8048d20 <ip_setmoptions+0x2b8>
      {
         error = EADDRINUSE;
 8048d14:	00801c04 	movi	r2,112
 8048d18:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048d1c:	00009c06 	br	8048f90 <ip_setmoptions+0x528>
      }
      if (i == IP_MAX_MEMBERSHIPS) 
 8048d20:	e0bffd8b 	ldhu	r2,-10(fp)
 8048d24:	10800518 	cmpnei	r2,r2,20
 8048d28:	1000031e 	bne	r2,zero,8048d38 <ip_setmoptions+0x2d0>
      {
         error = ETOOMANYREFS;
 8048d2c:	00802044 	movi	r2,129
 8048d30:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048d34:	00009606 	br	8048f90 <ip_setmoptions+0x528>
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
 8048d38:	e0bffa17 	ldw	r2,-24(fp)
 8048d3c:	e0fff817 	ldw	r3,-32(fp)
      if ((imo->imo_membership[i] =
 8048d40:	e43ffd8b 	ldhu	r16,-10(fp)
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
 8048d44:	01800104 	movi	r6,4
 8048d48:	180b883a 	mov	r5,r3
 8048d4c:	1009883a 	mov	r4,r2
 8048d50:	80465400 	call	8046540 <in_addmulti>
 8048d54:	1009883a 	mov	r4,r2
      if ((imo->imo_membership[i] =
 8048d58:	e0fffc17 	ldw	r3,-16(fp)
 8048d5c:	80800084 	addi	r2,r16,2
 8048d60:	100490ba 	slli	r2,r2,2
 8048d64:	1885883a 	add	r2,r3,r2
 8048d68:	11000015 	stw	r4,0(r2)
 8048d6c:	e0fffc17 	ldw	r3,-16(fp)
 8048d70:	80800084 	addi	r2,r16,2
 8048d74:	100490ba 	slli	r2,r2,2
 8048d78:	1885883a 	add	r2,r3,r2
 8048d7c:	10800017 	ldw	r2,0(r2)
 8048d80:	1000031e 	bne	r2,zero,8048d90 <ip_setmoptions+0x328>
      {
         error = ENOBUFS;
 8048d84:	00801a44 	movi	r2,105
 8048d88:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048d8c:	00008006 	br	8048f90 <ip_setmoptions+0x528>
      }
      ++imo->imo_num_memberships;
 8048d90:	e0bffc17 	ldw	r2,-16(fp)
 8048d94:	1080018b 	ldhu	r2,6(r2)
 8048d98:	10800044 	addi	r2,r2,1
 8048d9c:	1007883a 	mov	r3,r2
 8048da0:	e0bffc17 	ldw	r2,-16(fp)
 8048da4:	10c0018d 	sth	r3,6(r2)
      break;
 8048da8:	00007906 	br	8048f90 <ip_setmoptions+0x528>
   case IP_DROP_MEMBERSHIP:
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 8048dac:	e0bff517 	ldw	r2,-44(fp)
 8048db0:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 8048db4:	e0bffa17 	ldw	r2,-24(fp)
 8048db8:	10800017 	ldw	r2,0(r2)
 8048dbc:	1006d63a 	srli	r3,r2,24
 8048dc0:	e0bffa17 	ldw	r2,-24(fp)
 8048dc4:	10800017 	ldw	r2,0(r2)
 8048dc8:	1004d23a 	srli	r2,r2,8
 8048dcc:	10bfc00c 	andi	r2,r2,65280
 8048dd0:	1886b03a 	or	r3,r3,r2
 8048dd4:	e0bffa17 	ldw	r2,-24(fp)
 8048dd8:	10800017 	ldw	r2,0(r2)
 8048ddc:	1004923a 	slli	r2,r2,8
 8048de0:	10803fec 	andhi	r2,r2,255
 8048de4:	1886b03a 	or	r3,r3,r2
 8048de8:	e0bffa17 	ldw	r2,-24(fp)
 8048dec:	10800017 	ldw	r2,0(r2)
 8048df0:	1004963a 	slli	r2,r2,24
 8048df4:	1884b03a 	or	r2,r3,r2
 8048df8:	10fc002c 	andhi	r3,r2,61440
 8048dfc:	00b80034 	movhi	r2,57344
 8048e00:	18800326 	beq	r3,r2,8048e10 <ip_setmoptions+0x3a8>
      {
         error = EINVAL;
 8048e04:	00800584 	movi	r2,22
 8048e08:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048e0c:	00006006 	br	8048f90 <ip_setmoptions+0x528>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 8048e10:	e0bffa17 	ldw	r2,-24(fp)
 8048e14:	10800117 	ldw	r2,4(r2)
 8048e18:	e0fff804 	addi	r3,fp,-32
 8048e1c:	180b883a 	mov	r5,r3
 8048e20:	1009883a 	mov	r4,r2
 8048e24:	80489540 	call	8048954 <IPADDR_TO_NETP>
      if (netp == NULL) 
 8048e28:	e0bff817 	ldw	r2,-32(fp)
 8048e2c:	1000031e 	bne	r2,zero,8048e3c <ip_setmoptions+0x3d4>
      {
         error = EADDRNOTAVAIL;
 8048e30:	00801f44 	movi	r2,125
 8048e34:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048e38:	00005506 	br	8048f90 <ip_setmoptions+0x528>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8048e3c:	e03ffd8d 	sth	zero,-10(fp)
 8048e40:	00001806 	br	8048ea4 <ip_setmoptions+0x43c>
      {
         if ((netp == NULL ||
 8048e44:	e0bff817 	ldw	r2,-32(fp)
 8048e48:	10000926 	beq	r2,zero,8048e70 <ip_setmoptions+0x408>
             imo->imo_membership[i]->inm_netp == netp) &&
 8048e4c:	e0bffd8b 	ldhu	r2,-10(fp)
 8048e50:	e0fffc17 	ldw	r3,-16(fp)
 8048e54:	10800084 	addi	r2,r2,2
 8048e58:	100490ba 	slli	r2,r2,2
 8048e5c:	1885883a 	add	r2,r3,r2
 8048e60:	10800017 	ldw	r2,0(r2)
 8048e64:	10c00117 	ldw	r3,4(r2)
 8048e68:	e0bff817 	ldw	r2,-32(fp)
         if ((netp == NULL ||
 8048e6c:	18800a1e 	bne	r3,r2,8048e98 <ip_setmoptions+0x430>
             imo->imo_membership[i]->inm_addr ==
 8048e70:	e0bffd8b 	ldhu	r2,-10(fp)
 8048e74:	e0fffc17 	ldw	r3,-16(fp)
 8048e78:	10800084 	addi	r2,r2,2
 8048e7c:	100490ba 	slli	r2,r2,2
 8048e80:	1885883a 	add	r2,r3,r2
 8048e84:	10800017 	ldw	r2,0(r2)
 8048e88:	10c00017 	ldw	r3,0(r2)
             mreq->imr_multiaddr)
 8048e8c:	e0bffa17 	ldw	r2,-24(fp)
 8048e90:	10800017 	ldw	r2,0(r2)
             imo->imo_membership[i]->inm_netp == netp) &&
 8048e94:	18800926 	beq	r3,r2,8048ebc <ip_setmoptions+0x454>
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8048e98:	e0bffd8b 	ldhu	r2,-10(fp)
 8048e9c:	10800044 	addi	r2,r2,1
 8048ea0:	e0bffd8d 	sth	r2,-10(fp)
 8048ea4:	e0bffc17 	ldw	r2,-16(fp)
 8048ea8:	1080018b 	ldhu	r2,6(r2)
 8048eac:	e0fffd8b 	ldhu	r3,-10(fp)
 8048eb0:	10bfffcc 	andi	r2,r2,65535
 8048eb4:	18bfe336 	bltu	r3,r2,8048e44 <ip_setmoptions+0x3dc>
 8048eb8:	00000106 	br	8048ec0 <ip_setmoptions+0x458>
         {
            break;
 8048ebc:	0001883a 	nop
         }
      }
      if (i == imo->imo_num_memberships) 
 8048ec0:	e0bffc17 	ldw	r2,-16(fp)
 8048ec4:	1080018b 	ldhu	r2,6(r2)
 8048ec8:	e0fffd8b 	ldhu	r3,-10(fp)
 8048ecc:	10bfffcc 	andi	r2,r2,65535
 8048ed0:	1880031e 	bne	r3,r2,8048ee0 <ip_setmoptions+0x478>
      {
         error = EADDRNOTAVAIL;
 8048ed4:	00801f44 	movi	r2,125
 8048ed8:	e0bffe15 	stw	r2,-8(fp)
         break;
 8048edc:	00002c06 	br	8048f90 <ip_setmoptions+0x528>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
 8048ee0:	e0bffd8b 	ldhu	r2,-10(fp)
 8048ee4:	e0fffc17 	ldw	r3,-16(fp)
 8048ee8:	10800084 	addi	r2,r2,2
 8048eec:	100490ba 	slli	r2,r2,2
 8048ef0:	1885883a 	add	r2,r3,r2
 8048ef4:	10800017 	ldw	r2,0(r2)
 8048ef8:	1009883a 	mov	r4,r2
 8048efc:	804668c0 	call	804668c <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 8048f00:	e0bffd8b 	ldhu	r2,-10(fp)
 8048f04:	10800044 	addi	r2,r2,1
 8048f08:	e0bffd8d 	sth	r2,-10(fp)
 8048f0c:	00001006 	br	8048f50 <ip_setmoptions+0x4e8>
         imo->imo_membership[i-1] = imo->imo_membership[i];
 8048f10:	e0fffd8b 	ldhu	r3,-10(fp)
 8048f14:	e0bffd8b 	ldhu	r2,-10(fp)
 8048f18:	10bfffc4 	addi	r2,r2,-1
 8048f1c:	e13ffc17 	ldw	r4,-16(fp)
 8048f20:	18c00084 	addi	r3,r3,2
 8048f24:	180690ba 	slli	r3,r3,2
 8048f28:	20c7883a 	add	r3,r4,r3
 8048f2c:	18c00017 	ldw	r3,0(r3)
 8048f30:	e13ffc17 	ldw	r4,-16(fp)
 8048f34:	10800084 	addi	r2,r2,2
 8048f38:	100490ba 	slli	r2,r2,2
 8048f3c:	2085883a 	add	r2,r4,r2
 8048f40:	10c00015 	stw	r3,0(r2)
      for (++i; i < imo->imo_num_memberships; ++i)
 8048f44:	e0bffd8b 	ldhu	r2,-10(fp)
 8048f48:	10800044 	addi	r2,r2,1
 8048f4c:	e0bffd8d 	sth	r2,-10(fp)
 8048f50:	e0bffc17 	ldw	r2,-16(fp)
 8048f54:	1080018b 	ldhu	r2,6(r2)
 8048f58:	e0fffd8b 	ldhu	r3,-10(fp)
 8048f5c:	10bfffcc 	andi	r2,r2,65535
 8048f60:	18bfeb36 	bltu	r3,r2,8048f10 <ip_setmoptions+0x4a8>
      --imo->imo_num_memberships;
 8048f64:	e0bffc17 	ldw	r2,-16(fp)
 8048f68:	1080018b 	ldhu	r2,6(r2)
 8048f6c:	10bfffc4 	addi	r2,r2,-1
 8048f70:	1007883a 	mov	r3,r2
 8048f74:	e0bffc17 	ldw	r2,-16(fp)
 8048f78:	10c0018d 	sth	r3,6(r2)
      break;
 8048f7c:	00000406 	br	8048f90 <ip_setmoptions+0x528>

      default:
      error = EOPNOTSUPP;
 8048f80:	008017c4 	movi	r2,95
 8048f84:	e0bffe15 	stw	r2,-8(fp)
      break;
 8048f88:	00000106 	br	8048f90 <ip_setmoptions+0x528>
      break;
 8048f8c:	0001883a 	nop
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
 8048f90:	e0bffc17 	ldw	r2,-16(fp)
 8048f94:	10800017 	ldw	r2,0(r2)
 8048f98:	1000141e 	bne	r2,zero,8048fec <ip_setmoptions+0x584>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
 8048f9c:	e0bffc17 	ldw	r2,-16(fp)
 8048fa0:	10800103 	ldbu	r2,4(r2)
   if (imo->imo_multicast_netp == NULL &&
 8048fa4:	10803fcc 	andi	r2,r2,255
 8048fa8:	10800058 	cmpnei	r2,r2,1
 8048fac:	10000f1e 	bne	r2,zero,8048fec <ip_setmoptions+0x584>
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
 8048fb0:	e0bffc17 	ldw	r2,-16(fp)
 8048fb4:	10800143 	ldbu	r2,5(r2)
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
 8048fb8:	10803fcc 	andi	r2,r2,255
 8048fbc:	10800058 	cmpnei	r2,r2,1
 8048fc0:	10000a1e 	bne	r2,zero,8048fec <ip_setmoptions+0x584>
       imo->imo_num_memberships == 0) 
 8048fc4:	e0bffc17 	ldw	r2,-16(fp)
 8048fc8:	1080018b 	ldhu	r2,6(r2)
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
 8048fcc:	10bfffcc 	andi	r2,r2,65535
 8048fd0:	1000061e 	bne	r2,zero,8048fec <ip_setmoptions+0x584>
   {
      IM_FREE(*imop);
 8048fd4:	e0bffb17 	ldw	r2,-20(fp)
 8048fd8:	10800017 	ldw	r2,0(r2)
 8048fdc:	1009883a 	mov	r4,r2
 8048fe0:	8030d3c0 	call	8030d3c <npfree>
      *imop = NULL;
 8048fe4:	e0bffb17 	ldw	r2,-20(fp)
 8048fe8:	10000015 	stw	zero,0(r2)
   }
   return (error);
 8048fec:	e0bffe17 	ldw	r2,-8(fp)
}
 8048ff0:	e6ffff04 	addi	sp,fp,-4
 8048ff4:	dfc00217 	ldw	ra,8(sp)
 8048ff8:	df000117 	ldw	fp,4(sp)
 8048ffc:	dc000017 	ldw	r16,0(sp)
 8049000:	dec00304 	addi	sp,sp,12
 8049004:	f800283a 	ret

08049008 <ip_getmoptions>:
 * RETURNS: 
 */

int
ip_getmoptions(int optname, struct socket * so, void * val)
{
 8049008:	defff804 	addi	sp,sp,-32
 804900c:	df000715 	stw	fp,28(sp)
 8049010:	df000704 	addi	fp,sp,28
 8049014:	e13ffb15 	stw	r4,-20(fp)
 8049018:	e17ffa15 	stw	r5,-24(fp)
 804901c:	e1bff915 	stw	r6,-28(fp)
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
 8049020:	e0bffa17 	ldw	r2,-24(fp)
 8049024:	10800317 	ldw	r2,12(r2)
 8049028:	e0bfff15 	stw	r2,-4(fp)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 804902c:	e0bffb17 	ldw	r2,-20(fp)
 8049030:	108002e0 	cmpeqi	r2,r2,11
 8049034:	1000291e 	bne	r2,zero,80490dc <ip_getmoptions+0xd4>
 8049038:	e0bffb17 	ldw	r2,-20(fp)
 804903c:	10800308 	cmpgei	r2,r2,12
 8049040:	1000341e 	bne	r2,zero,8049114 <ip_getmoptions+0x10c>
 8049044:	e0bffb17 	ldw	r2,-20(fp)
 8049048:	10800260 	cmpeqi	r2,r2,9
 804904c:	1000041e 	bne	r2,zero,8049060 <ip_getmoptions+0x58>
 8049050:	e0bffb17 	ldw	r2,-20(fp)
 8049054:	108002a0 	cmpeqi	r2,r2,10
 8049058:	1000121e 	bne	r2,zero,80490a4 <ip_getmoptions+0x9c>
 804905c:	00002d06 	br	8049114 <ip_getmoptions+0x10c>
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
 8049060:	e0bff917 	ldw	r2,-28(fp)
 8049064:	e0bffc15 	stw	r2,-16(fp)
      if (imo == NULL || imo->imo_multicast_netp == NULL)
 8049068:	e0bfff17 	ldw	r2,-4(fp)
 804906c:	10000326 	beq	r2,zero,804907c <ip_getmoptions+0x74>
 8049070:	e0bfff17 	ldw	r2,-4(fp)
 8049074:	10800017 	ldw	r2,0(r2)
 8049078:	1000031e 	bne	r2,zero,8049088 <ip_getmoptions+0x80>
         *addr = AADDR;
 804907c:	e0bffc17 	ldw	r2,-16(fp)
 8049080:	10000015 	stw	zero,0(r2)
 8049084:	00000506 	br	804909c <ip_getmoptions+0x94>
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
 8049088:	e0bfff17 	ldw	r2,-4(fp)
 804908c:	10800017 	ldw	r2,0(r2)
 8049090:	10c00a17 	ldw	r3,40(r2)
 8049094:	e0bffc17 	ldw	r2,-16(fp)
 8049098:	10c00015 	stw	r3,0(r2)
      return (0);
 804909c:	0005883a 	mov	r2,zero
 80490a0:	00001d06 	br	8049118 <ip_getmoptions+0x110>

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
 80490a4:	e0bff917 	ldw	r2,-28(fp)
 80490a8:	e0bffd15 	stw	r2,-12(fp)
      if (imo == NULL)
 80490ac:	e0bfff17 	ldw	r2,-4(fp)
 80490b0:	1000041e 	bne	r2,zero,80490c4 <ip_getmoptions+0xbc>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
 80490b4:	e0bffd17 	ldw	r2,-12(fp)
 80490b8:	00c00044 	movi	r3,1
 80490bc:	10c00005 	stb	r3,0(r2)
 80490c0:	00000406 	br	80490d4 <ip_getmoptions+0xcc>
      else
         *ttl = imo->imo_multicast_ttl;
 80490c4:	e0bfff17 	ldw	r2,-4(fp)
 80490c8:	10c00103 	ldbu	r3,4(r2)
 80490cc:	e0bffd17 	ldw	r2,-12(fp)
 80490d0:	10c00005 	stb	r3,0(r2)
      return (0);
 80490d4:	0005883a 	mov	r2,zero
 80490d8:	00000f06 	br	8049118 <ip_getmoptions+0x110>

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
 80490dc:	e0bff917 	ldw	r2,-28(fp)
 80490e0:	e0bffe15 	stw	r2,-8(fp)
      if (imo == NULL)
 80490e4:	e0bfff17 	ldw	r2,-4(fp)
 80490e8:	1000041e 	bne	r2,zero,80490fc <ip_getmoptions+0xf4>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
 80490ec:	e0bffe17 	ldw	r2,-8(fp)
 80490f0:	00c00044 	movi	r3,1
 80490f4:	10c00005 	stb	r3,0(r2)
 80490f8:	00000406 	br	804910c <ip_getmoptions+0x104>
      else
         *loop = imo->imo_multicast_loop;
 80490fc:	e0bfff17 	ldw	r2,-4(fp)
 8049100:	10c00143 	ldbu	r3,5(r2)
 8049104:	e0bffe17 	ldw	r2,-8(fp)
 8049108:	10c00005 	stb	r3,0(r2)
      return (0);
 804910c:	0005883a 	mov	r2,zero
 8049110:	00000106 	br	8049118 <ip_getmoptions+0x110>

      default:
      return (EOPNOTSUPP);
 8049114:	008017c4 	movi	r2,95
   }
}
 8049118:	e037883a 	mov	sp,fp
 804911c:	df000017 	ldw	fp,0(sp)
 8049120:	dec00104 	addi	sp,sp,4
 8049124:	f800283a 	ret

08049128 <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
 8049128:	defffc04 	addi	sp,sp,-16
 804912c:	dfc00315 	stw	ra,12(sp)
 8049130:	df000215 	stw	fp,8(sp)
 8049134:	df000204 	addi	fp,sp,8
 8049138:	e13ffe15 	stw	r4,-8(fp)
   u_short  i;

   if (imo != NULL) 
 804913c:	e0bffe17 	ldw	r2,-8(fp)
 8049140:	10001426 	beq	r2,zero,8049194 <ip_freemoptions+0x6c>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 8049144:	e03fff8d 	sth	zero,-2(fp)
 8049148:	00000b06 	br	8049178 <ip_freemoptions+0x50>
         in_delmulti(imo->imo_membership[i]);
 804914c:	e0bfff8b 	ldhu	r2,-2(fp)
 8049150:	e0fffe17 	ldw	r3,-8(fp)
 8049154:	10800084 	addi	r2,r2,2
 8049158:	100490ba 	slli	r2,r2,2
 804915c:	1885883a 	add	r2,r3,r2
 8049160:	10800017 	ldw	r2,0(r2)
 8049164:	1009883a 	mov	r4,r2
 8049168:	804668c0 	call	804668c <in_delmulti>
      for (i = 0; i < imo->imo_num_memberships; ++i)
 804916c:	e0bfff8b 	ldhu	r2,-2(fp)
 8049170:	10800044 	addi	r2,r2,1
 8049174:	e0bfff8d 	sth	r2,-2(fp)
 8049178:	e0bffe17 	ldw	r2,-8(fp)
 804917c:	1080018b 	ldhu	r2,6(r2)
 8049180:	e0ffff8b 	ldhu	r3,-2(fp)
 8049184:	10bfffcc 	andi	r2,r2,65535
 8049188:	18bff036 	bltu	r3,r2,804914c <ip_freemoptions+0x24>
      npfree(imo);
 804918c:	e13ffe17 	ldw	r4,-8(fp)
 8049190:	8030d3c0 	call	8030d3c <npfree>
   }
}
 8049194:	0001883a 	nop
 8049198:	e037883a 	mov	sp,fp
 804919c:	dfc00117 	ldw	ra,4(sp)
 80491a0:	df000017 	ldw	fp,0(sp)
 80491a4:	dec00204 	addi	sp,sp,8
 80491a8:	f800283a 	ret

080491ac <u_mctest_init>:
 *
 * RETURNS: 
 */

void u_mctest_init()
{
 80491ac:	defffe04 	addi	sp,sp,-8
 80491b0:	dfc00115 	stw	ra,4(sp)
 80491b4:	df000015 	stw	fp,0(sp)
 80491b8:	d839883a 	mov	fp,sp
   printf("mctest init called\n");
 80491bc:	01020174 	movhi	r4,2053
 80491c0:	21116504 	addi	r4,r4,17812
 80491c4:	8003ca80 	call	8003ca8 <puts>
// altera changes end (cadler@altera.com)
   install_menu(u_mctest_menu);
// altera changes begin (cadler@altera.com)
#endif //IN_MENUS
// altera changes end (cadler@altera.com)
}
 80491c8:	0001883a 	nop
 80491cc:	e037883a 	mov	sp,fp
 80491d0:	dfc00117 	ldw	ra,4(sp)
 80491d4:	df000017 	ldw	fp,0(sp)
 80491d8:	dec00204 	addi	sp,sp,8
 80491dc:	f800283a 	ret

080491e0 <u_mctest_run>:
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 80491e0:	defede04 	addi	sp,sp,-1160
 80491e4:	dfc12115 	stw	ra,1156(sp)
 80491e8:	df012015 	stw	fp,1152(sp)
 80491ec:	df012004 	addi	fp,sp,1152
 80491f0:	e13ee215 	stw	r4,-1144(fp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 80491f4:	e0fee884 	addi	r3,fp,-1118
 80491f8:	00820174 	movhi	r2,2053
 80491fc:	10921104 	addi	r2,r2,18500
 8049200:	01000784 	movi	r4,30
 8049204:	200d883a 	mov	r6,r4
 8049208:	100b883a 	mov	r5,r2
 804920c:	1809883a 	mov	r4,r3
 8049210:	80037cc0 	call	80037cc <memcpy>
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 8049214:	000d883a 	mov	r6,zero
 8049218:	01400084 	movi	r5,2
 804921c:	01000084 	movi	r4,2
 8049220:	8032f580 	call	8032f58 <t_socket>
 8049224:	e0bffe15 	stw	r2,-8(fp)

   if (s == INVALID_SOCKET) 
 8049228:	e0bffe17 	ldw	r2,-8(fp)
 804922c:	10bfffd8 	cmpnei	r2,r2,-1
 8049230:	1000091e 	bne	r2,zero,8049258 <u_mctest_run+0x78>
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
 8049234:	e13ffe17 	ldw	r4,-8(fp)
 8049238:	80344b00 	call	80344b0 <t_errno>
 804923c:	100d883a 	mov	r6,r2
 8049240:	01420174 	movhi	r5,2053
 8049244:	29516a04 	addi	r5,r5,17832
 8049248:	e13ee217 	ldw	r4,-1144(fp)
 804924c:	802bfa40 	call	802bfa4 <ns_printf>
      exit(1);
 8049250:	01000044 	movi	r4,1
 8049254:	804dea40 	call	804dea4 <exit>
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
 8049258:	00800044 	movi	r2,1
 804925c:	e0bee715 	stw	r2,-1124(fp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 8049260:	e0fee704 	addi	r3,fp,-1124
 8049264:	00800104 	movi	r2,4
 8049268:	d8800015 	stw	r2,0(sp)
 804926c:	180f883a 	mov	r7,r3
 8049270:	01800104 	movi	r6,4
 8049274:	017fffc4 	movi	r5,-1
 8049278:	e13ffe17 	ldw	r4,-8(fp)
 804927c:	80339340 	call	8033934 <t_setsockopt>
 8049280:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 8049284:	e0bffd17 	ldw	r2,-12(fp)
 8049288:	10bfffd8 	cmpnei	r2,r2,-1
 804928c:	1000071e 	bne	r2,zero,80492ac <u_mctest_run+0xcc>
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
 8049290:	e13ffe17 	ldw	r4,-8(fp)
 8049294:	80344b00 	call	80344b0 <t_errno>
 8049298:	100d883a 	mov	r6,r2
 804929c:	01420174 	movhi	r5,2053
 80492a0:	29517104 	addi	r5,r5,17860
 80492a4:	e13ee217 	ldw	r4,-1144(fp)
 80492a8:	802bfa40 	call	802bfa4 <ns_printf>
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
 80492ac:	00800084 	movi	r2,2
 80492b0:	e0bff80d 	sth	r2,-32(fp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
 80492b4:	e03ff915 	stw	zero,-28(fp)
   stLocal.sin_port =   htons(TEST_PORT);
 80492b8:	00a00344 	movi	r2,-32755
 80492bc:	e0bff88d 	sth	r2,-30(fp)
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
 80492c0:	e0bff804 	addi	r2,fp,-32
 80492c4:	01800404 	movi	r6,16
 80492c8:	100b883a 	mov	r5,r2
 80492cc:	e13ffe17 	ldw	r4,-8(fp)
 80492d0:	8032fd80 	call	8032fd8 <t_bind>
 80492d4:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 80492d8:	e0bffd17 	ldw	r2,-12(fp)
 80492dc:	10bfffd8 	cmpnei	r2,r2,-1
 80492e0:	1000061e 	bne	r2,zero,80492fc <u_mctest_run+0x11c>
   {
      printf ("t_bind() failed, Err: %d\n",
 80492e4:	e13ffe17 	ldw	r4,-8(fp)
 80492e8:	80344b00 	call	80344b0 <t_errno>
 80492ec:	100b883a 	mov	r5,r2
 80492f0:	01020174 	movhi	r4,2053
 80492f4:	21117d04 	addi	r4,r4,17908
 80492f8:	8003b840 	call	8003b84 <printf>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
 80492fc:	01820174 	movhi	r6,2053
 8049300:	31918404 	addi	r6,r6,17936
 8049304:	01420174 	movhi	r5,2053
 8049308:	29518704 	addi	r5,r5,17948
 804930c:	e13ee217 	ldw	r4,-1144(fp)
 8049310:	802bfa40 	call	802bfa4 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 8049314:	01020174 	movhi	r4,2053
 8049318:	21118404 	addi	r4,r4,17936
 804931c:	804a1f80 	call	804a1f8 <inet_addr>
 8049320:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 8049324:	008201b4 	movhi	r2,2054
 8049328:	10bd1817 	ldw	r2,-2976(r2)
 804932c:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 8049330:	e0fee504 	addi	r3,fp,-1132
 8049334:	00800204 	movi	r2,8
 8049338:	d8800015 	stw	r2,0(sp)
 804933c:	180f883a 	mov	r7,r3
 8049340:	01800304 	movi	r6,12
 8049344:	000b883a 	mov	r5,zero
 8049348:	e13ffe17 	ldw	r4,-8(fp)
 804934c:	80339340 	call	8033934 <t_setsockopt>
 8049350:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 8049354:	e0bffd17 	ldw	r2,-12(fp)
 8049358:	10bfffd8 	cmpnei	r2,r2,-1
 804935c:	1000071e 	bne	r2,zero,804937c <u_mctest_run+0x19c>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 8049360:	e13ffe17 	ldw	r4,-8(fp)
 8049364:	80344b00 	call	80344b0 <t_errno>
 8049368:	100d883a 	mov	r6,r2
 804936c:	01420174 	movhi	r5,2053
 8049370:	29518f04 	addi	r5,r5,17980
 8049374:	e13ee217 	ldw	r4,-1144(fp)
 8049378:	802bfa40 	call	802bfa4 <ns_printf>
                     t_errno(s));
   } 
   tk_yield();
 804937c:	802c8fc0 	call	802c8fc <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
 8049380:	01820174 	movhi	r6,2053
 8049384:	31919c04 	addi	r6,r6,18032
 8049388:	01420174 	movhi	r5,2053
 804938c:	29518704 	addi	r5,r5,17948
 8049390:	e13ee217 	ldw	r4,-1144(fp)
 8049394:	802bfa40 	call	802bfa4 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
 8049398:	01020174 	movhi	r4,2053
 804939c:	21119c04 	addi	r4,r4,18032
 80493a0:	804a1f80 	call	804a1f8 <inet_addr>
 80493a4:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 80493a8:	008201b4 	movhi	r2,2054
 80493ac:	10bd1817 	ldw	r2,-2976(r2)
 80493b0:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 80493b4:	e0fee504 	addi	r3,fp,-1132
 80493b8:	00800204 	movi	r2,8
 80493bc:	d8800015 	stw	r2,0(sp)
 80493c0:	180f883a 	mov	r7,r3
 80493c4:	01800304 	movi	r6,12
 80493c8:	000b883a 	mov	r5,zero
 80493cc:	e13ffe17 	ldw	r4,-8(fp)
 80493d0:	80339340 	call	8033934 <t_setsockopt>
 80493d4:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 80493d8:	e0bffd17 	ldw	r2,-12(fp)
 80493dc:	10bfffd8 	cmpnei	r2,r2,-1
 80493e0:	1000071e 	bne	r2,zero,8049400 <u_mctest_run+0x220>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 80493e4:	e13ffe17 	ldw	r4,-8(fp)
 80493e8:	80344b00 	call	80344b0 <t_errno>
 80493ec:	100d883a 	mov	r6,r2
 80493f0:	01420174 	movhi	r5,2053
 80493f4:	29518f04 	addi	r5,r5,17980
 80493f8:	e13ee217 	ldw	r4,-1144(fp)
 80493fc:	802bfa40 	call	802bfa4 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 8049400:	802c8fc0 	call	802c8fc <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
 8049404:	01820174 	movhi	r6,2053
 8049408:	31919f04 	addi	r6,r6,18044
 804940c:	01420174 	movhi	r5,2053
 8049410:	29518704 	addi	r5,r5,17948
 8049414:	e13ee217 	ldw	r4,-1144(fp)
 8049418:	802bfa40 	call	802bfa4 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
 804941c:	01020174 	movhi	r4,2053
 8049420:	21119f04 	addi	r4,r4,18044
 8049424:	804a1f80 	call	804a1f8 <inet_addr>
 8049428:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 804942c:	008201b4 	movhi	r2,2054
 8049430:	10bd1817 	ldw	r2,-2976(r2)
 8049434:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 8049438:	e0fee504 	addi	r3,fp,-1132
 804943c:	00800204 	movi	r2,8
 8049440:	d8800015 	stw	r2,0(sp)
 8049444:	180f883a 	mov	r7,r3
 8049448:	01800304 	movi	r6,12
 804944c:	000b883a 	mov	r5,zero
 8049450:	e13ffe17 	ldw	r4,-8(fp)
 8049454:	80339340 	call	8033934 <t_setsockopt>
 8049458:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 804945c:	e0bffd17 	ldw	r2,-12(fp)
 8049460:	10bfffd8 	cmpnei	r2,r2,-1
 8049464:	1000071e 	bne	r2,zero,8049484 <u_mctest_run+0x2a4>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 8049468:	e13ffe17 	ldw	r4,-8(fp)
 804946c:	80344b00 	call	80344b0 <t_errno>
 8049470:	100d883a 	mov	r6,r2
 8049474:	01420174 	movhi	r5,2053
 8049478:	29518f04 	addi	r5,r5,17980
 804947c:	e13ee217 	ldw	r4,-1144(fp)
 8049480:	802bfa40 	call	802bfa4 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 8049484:	802c8fc0 	call	802c8fc <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
 8049488:	00800084 	movi	r2,2
 804948c:	e0bee4c5 	stb	r2,-1133(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
 8049490:	e0fee4c4 	addi	r3,fp,-1133
 8049494:	00800044 	movi	r2,1
 8049498:	d8800015 	stw	r2,0(sp)
 804949c:	180f883a 	mov	r7,r3
 80494a0:	01800284 	movi	r6,10
 80494a4:	000b883a 	mov	r5,zero
 80494a8:	e13ffe17 	ldw	r4,-8(fp)
 80494ac:	80339340 	call	8033934 <t_setsockopt>
 80494b0:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 80494b4:	e0bffd17 	ldw	r2,-12(fp)
 80494b8:	10bfffd8 	cmpnei	r2,r2,-1
 80494bc:	1000071e 	bne	r2,zero,80494dc <u_mctest_run+0x2fc>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
 80494c0:	e13ffe17 	ldw	r4,-8(fp)
 80494c4:	80344b00 	call	80344b0 <t_errno>
 80494c8:	100d883a 	mov	r6,r2
 80494cc:	01420174 	movhi	r5,2053
 80494d0:	2951a204 	addi	r5,r5,18056
 80494d4:	e13ee217 	ldw	r4,-1144(fp)
 80494d8:	802bfa40 	call	802bfa4 <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
 80494dc:	00800044 	movi	r2,1
 80494e0:	e0bee4c5 	stb	r2,-1133(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 80494e4:	e0fee4c4 	addi	r3,fp,-1133
 80494e8:	00800044 	movi	r2,1
 80494ec:	d8800015 	stw	r2,0(sp)
 80494f0:	180f883a 	mov	r7,r3
 80494f4:	018002c4 	movi	r6,11
 80494f8:	000b883a 	mov	r5,zero
 80494fc:	e13ffe17 	ldw	r4,-8(fp)
 8049500:	80339340 	call	8033934 <t_setsockopt>
 8049504:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 8049508:	e0bffd17 	ldw	r2,-12(fp)
 804950c:	10bfffd8 	cmpnei	r2,r2,-1
 8049510:	1000071e 	bne	r2,zero,8049530 <u_mctest_run+0x350>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
 8049514:	e13ffe17 	ldw	r4,-8(fp)
 8049518:	80344b00 	call	80344b0 <t_errno>
 804951c:	100d883a 	mov	r6,r2
 8049520:	01420174 	movhi	r5,2053
 8049524:	2951af04 	addi	r5,r5,18108
 8049528:	e13ee217 	ldw	r4,-1144(fp)
 804952c:	802bfa40 	call	802bfa4 <ns_printf>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
 8049530:	00800084 	movi	r2,2
 8049534:	e0bff40d 	sth	r2,-48(fp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 8049538:	01020174 	movhi	r4,2053
 804953c:	21119c04 	addi	r4,r4,18032
 8049540:	804a1f80 	call	804a1f8 <inet_addr>
 8049544:	e0bff515 	stw	r2,-44(fp)
   stTo.sin_port =        htons(TEST_PORT);
 8049548:	00a00344 	movi	r2,-32755
 804954c:	e0bff48d 	sth	r2,-46(fp)
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
 8049550:	01820174 	movhi	r6,2053
 8049554:	31919c04 	addi	r6,r6,18032
 8049558:	01420174 	movhi	r5,2053
 804955c:	2951bc04 	addi	r5,r5,18160
 8049560:	e13ee217 	ldw	r4,-1144(fp)
 8049564:	802bfa40 	call	802bfa4 <ns_printf>
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
 8049568:	e03fff15 	stw	zero,-4(fp)
 804956c:	00008606 	br	8049788 <u_mctest_run+0x5a8>
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
 8049570:	d0a05017 	ldw	r2,-32448(gp)
 8049574:	10c00044 	addi	r3,r2,1
 8049578:	d0e05015 	stw	r3,-32448(gp)
 804957c:	e0fee884 	addi	r3,fp,-1118
 8049580:	18c00404 	addi	r3,r3,16
 8049584:	100d883a 	mov	r6,r2
 8049588:	01420174 	movhi	r5,2053
 804958c:	2951cb04 	addi	r5,r5,18220
 8049590:	1809883a 	mov	r4,r3
 8049594:	8003d0c0 	call	8003d0c <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
 8049598:	e0fee884 	addi	r3,fp,-1118
 804959c:	00800404 	movi	r2,16
 80495a0:	d8800115 	stw	r2,4(sp)
 80495a4:	e0bff404 	addi	r2,fp,-48
 80495a8:	d8800015 	stw	r2,0(sp)
 80495ac:	000f883a 	mov	r7,zero
 80495b0:	01800784 	movi	r6,30
 80495b4:	180b883a 	mov	r5,r3
 80495b8:	e13ffe17 	ldw	r4,-8(fp)
 80495bc:	8033e940 	call	8033e94 <t_sendto>
 80495c0:	e0bffd15 	stw	r2,-12(fp)
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
 80495c4:	e0bffd17 	ldw	r2,-12(fp)
 80495c8:	1000080e 	bge	r2,zero,80495ec <u_mctest_run+0x40c>
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
 80495cc:	e13ffe17 	ldw	r4,-8(fp)
 80495d0:	80344b00 	call	80344b0 <t_errno>
 80495d4:	100d883a 	mov	r6,r2
 80495d8:	01420174 	movhi	r5,2053
 80495dc:	2951cc04 	addi	r5,r5,18224
 80495e0:	e13ee217 	ldw	r4,-1144(fp)
 80495e4:	802bfa40 	call	802bfa4 <ns_printf>
         /*     exit(1); */
         goto exitloop;
 80495e8:	00006b06 	br	8049798 <u_mctest_run+0x5b8>
      }

      /* make the socket non-blocking */
      iTmp = 1;
 80495ec:	00800044 	movi	r2,1
 80495f0:	e0bee715 	stw	r2,-1124(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
 80495f4:	e0fee704 	addi	r3,fp,-1124
 80495f8:	00800104 	movi	r2,4
 80495fc:	d8800015 	stw	r2,0(sp)
 8049600:	180f883a 	mov	r7,r3
 8049604:	01840584 	movi	r6,4118
 8049608:	017fffc4 	movi	r5,-1
 804960c:	e13ffe17 	ldw	r4,-8(fp)
 8049610:	80339340 	call	8033934 <t_setsockopt>
 8049614:	e0bffd15 	stw	r2,-12(fp)
      if (iRet == SOCKET_ERROR) 
 8049618:	e0bffd17 	ldw	r2,-12(fp)
 804961c:	10bfffd8 	cmpnei	r2,r2,-1
 8049620:	1000071e 	bne	r2,zero,8049640 <u_mctest_run+0x460>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
 8049624:	e13ffe17 	ldw	r4,-8(fp)
 8049628:	80344b00 	call	80344b0 <t_errno>
 804962c:	100d883a 	mov	r6,r2
 8049630:	01420174 	movhi	r5,2053
 8049634:	2951d404 	addi	r5,r5,18256
 8049638:	e13ee217 	ldw	r4,-1144(fp)
 804963c:	802bfa40 	call	802bfa4 <ns_printf>
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
 8049640:	d0a0a317 	ldw	r2,-32116(gp)
 8049644:	10807d04 	addi	r2,r2,500
 8049648:	e0bffc15 	stw	r2,-16(fp)

      while (cticks < endtime)
 804964c:	00003406 	br	8049720 <u_mctest_run+0x540>
      {
         int sa_size = sizeof(struct sockaddr_in);
 8049650:	00800404 	movi	r2,16
 8049654:	e0bee315 	stw	r2,-1140(fp)
         tk_yield();
 8049658:	802c8fc0 	call	802c8fc <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
 804965c:	e0fef004 	addi	r3,fp,-1088
 8049660:	e0bee304 	addi	r2,fp,-1140
 8049664:	d8800115 	stw	r2,4(sp)
 8049668:	e0bff004 	addi	r2,fp,-64
 804966c:	d8800015 	stw	r2,0(sp)
 8049670:	000f883a 	mov	r7,zero
 8049674:	01810004 	movi	r6,1024
 8049678:	180b883a 	mov	r5,r3
 804967c:	e13ffe17 	ldw	r4,-8(fp)
 8049680:	8033d580 	call	8033d58 <t_recvfrom>
 8049684:	e0bffd15 	stw	r2,-12(fp)
         if (iRet < 0) 
 8049688:	e0bffd17 	ldw	r2,-12(fp)
 804968c:	10000c0e 	bge	r2,zero,80496c0 <u_mctest_run+0x4e0>
         {
            if (t_errno(s) != EWOULDBLOCK)
 8049690:	e13ffe17 	ldw	r4,-8(fp)
 8049694:	80344b00 	call	80344b0 <t_errno>
 8049698:	108002e0 	cmpeqi	r2,r2,11
 804969c:	1000081e 	bne	r2,zero,80496c0 <u_mctest_run+0x4e0>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
 80496a0:	e13ffe17 	ldw	r4,-8(fp)
 80496a4:	80344b00 	call	80344b0 <t_errno>
 80496a8:	100d883a 	mov	r6,r2
 80496ac:	01420174 	movhi	r5,2053
 80496b0:	2951e004 	addi	r5,r5,18304
 80496b4:	e13ee217 	ldw	r4,-1144(fp)
 80496b8:	802bfa40 	call	802bfa4 <ns_printf>
 80496bc:	00003606 	br	8049798 <u_mctest_run+0x5b8>
               /*     exit(1); */
               goto exitloop;
            }
         }
         if (iRet > 0)
 80496c0:	e0bffd17 	ldw	r2,-12(fp)
 80496c4:	0080160e 	bge	zero,r2,8049720 <u_mctest_run+0x540>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
 80496c8:	e0bff117 	ldw	r2,-60(fp)
 80496cc:	1009883a 	mov	r4,r2
 80496d0:	802bbd00 	call	802bbd0 <print_ipad>
 80496d4:	1009883a 	mov	r4,r2
             print_ipad(stFrom.sin_addr.s_addr),
             ntohs(stFrom.sin_port), achIn);
 80496d8:	e0bff08b 	ldhu	r2,-62(fp)
 80496dc:	10bfffcc 	andi	r2,r2,65535
 80496e0:	1004d23a 	srli	r2,r2,8
 80496e4:	10bfffcc 	andi	r2,r2,65535
 80496e8:	10c03fcc 	andi	r3,r2,255
 80496ec:	e0bff08b 	ldhu	r2,-62(fp)
 80496f0:	10bfffcc 	andi	r2,r2,65535
 80496f4:	1004923a 	slli	r2,r2,8
 80496f8:	10bfffcc 	andi	r2,r2,65535
            ns_printf(pio,"From host:%s port:%d, %s\n",
 80496fc:	1886b03a 	or	r3,r3,r2
 8049700:	e0bef004 	addi	r2,fp,-1088
 8049704:	d8800015 	stw	r2,0(sp)
 8049708:	180f883a 	mov	r7,r3
 804970c:	200d883a 	mov	r6,r4
 8049710:	01420174 	movhi	r5,2053
 8049714:	2951e804 	addi	r5,r5,18336
 8049718:	e13ee217 	ldw	r4,-1144(fp)
 804971c:	802bfa40 	call	802bfa4 <ns_printf>
      while (cticks < endtime)
 8049720:	d0e0a317 	ldw	r3,-32116(gp)
 8049724:	e0bffc17 	ldw	r2,-16(fp)
 8049728:	18bfc936 	bltu	r3,r2,8049650 <u_mctest_run+0x470>
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
 804972c:	e03ee4c5 	stb	zero,-1133(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
 8049730:	e0fee4c4 	addi	r3,fp,-1133
 8049734:	00800044 	movi	r2,1
 8049738:	d8800015 	stw	r2,0(sp)
 804973c:	180f883a 	mov	r7,r3
 8049740:	01840584 	movi	r6,4118
 8049744:	017fffc4 	movi	r5,-1
 8049748:	e13ffe17 	ldw	r4,-8(fp)
 804974c:	80339340 	call	8033934 <t_setsockopt>
 8049750:	e0bffd15 	stw	r2,-12(fp)
      if (iRet == SOCKET_ERROR) 
 8049754:	e0bffd17 	ldw	r2,-12(fp)
 8049758:	10bfffd8 	cmpnei	r2,r2,-1
 804975c:	1000071e 	bne	r2,zero,804977c <u_mctest_run+0x59c>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
 8049760:	e13ffe17 	ldw	r4,-8(fp)
 8049764:	80344b00 	call	80344b0 <t_errno>
 8049768:	100d883a 	mov	r6,r2
 804976c:	01420174 	movhi	r5,2053
 8049770:	2951ef04 	addi	r5,r5,18364
 8049774:	e13ee217 	ldw	r4,-1144(fp)
 8049778:	802bfa40 	call	802bfa4 <ns_printf>
   for (i = 0; i < LOOPMAX; i++)
 804977c:	e0bfff17 	ldw	r2,-4(fp)
 8049780:	10800044 	addi	r2,r2,1
 8049784:	e0bfff15 	stw	r2,-4(fp)
 8049788:	e0bfff17 	ldw	r2,-4(fp)
 804978c:	108000d0 	cmplti	r2,r2,3
 8049790:	103f771e 	bne	r2,zero,8049570 <u_mctest_run+0x390>
                        t_errno(s));
      }
   }   /* end for(;;) */

exitloop:
 8049794:	0001883a 	nop
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 8049798:	01020174 	movhi	r4,2053
 804979c:	21118404 	addi	r4,r4,17936
 80497a0:	804a1f80 	call	804a1f8 <inet_addr>
 80497a4:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 80497a8:	008201b4 	movhi	r2,2054
 80497ac:	10bd1817 	ldw	r2,-2976(r2)
 80497b0:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 80497b4:	e0fee504 	addi	r3,fp,-1132
 80497b8:	00800204 	movi	r2,8
 80497bc:	d8800015 	stw	r2,0(sp)
 80497c0:	180f883a 	mov	r7,r3
 80497c4:	01800344 	movi	r6,13
 80497c8:	000b883a 	mov	r5,zero
 80497cc:	e13ffe17 	ldw	r4,-8(fp)
 80497d0:	80339340 	call	8033934 <t_setsockopt>
 80497d4:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 80497d8:	e0bffd17 	ldw	r2,-12(fp)
 80497dc:	10bfffd8 	cmpnei	r2,r2,-1
 80497e0:	1000071e 	bne	r2,zero,8049800 <u_mctest_run+0x620>
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
 80497e4:	e13ffe17 	ldw	r4,-8(fp)
 80497e8:	80344b00 	call	80344b0 <t_errno>
 80497ec:	100d883a 	mov	r6,r2
 80497f0:	01420174 	movhi	r5,2053
 80497f4:	2951fb04 	addi	r5,r5,18412
 80497f8:	e13ee217 	ldw	r4,-1144(fp)
 80497fc:	802bfa40 	call	802bfa4 <ns_printf>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
 8049800:	e13ffe17 	ldw	r4,-8(fp)
 8049804:	80343640 	call	8034364 <t_socketclose>
 8049808:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 804980c:	e0bffd17 	ldw	r2,-12(fp)
 8049810:	10bfffd8 	cmpnei	r2,r2,-1
 8049814:	1000071e 	bne	r2,zero,8049834 <u_mctest_run+0x654>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
 8049818:	e13ffe17 	ldw	r4,-8(fp)
 804981c:	80344b00 	call	80344b0 <t_errno>
 8049820:	100d883a 	mov	r6,r2
 8049824:	01420174 	movhi	r5,2053
 8049828:	29520804 	addi	r5,r5,18464
 804982c:	e13ee217 	ldw	r4,-1144(fp)
 8049830:	802bfa40 	call	802bfa4 <ns_printf>
   }

   return(0);
 8049834:	0005883a 	mov	r2,zero
}  /* end main() */  
 8049838:	e037883a 	mov	sp,fp
 804983c:	dfc00117 	ldw	ra,4(sp)
 8049840:	df000017 	ldw	fp,0(sp)
 8049844:	dec00204 	addi	sp,sp,8
 8049848:	f800283a 	ret

0804984c <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
 804984c:	defff604 	addi	sp,sp,-40
 8049850:	dfc00915 	stw	ra,36(sp)
 8049854:	df000815 	stw	fp,32(sp)
 8049858:	df000804 	addi	fp,sp,32
   int      iface;
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */
 804985c:	e03ffe15 	stw	zero,-8(fp)

   e = dhc_init();
 8049860:	802cbac0 	call	802cbac <dhc_init>
 8049864:	e0bffd15 	stw	r2,-12(fp)

   if (e)
 8049868:	e0bffd17 	ldw	r2,-12(fp)
 804986c:	10000526 	beq	r2,zero,8049884 <dhc_setup+0x38>
   {
      printf("Error starting DHCP client code.\n");
 8049870:	01020174 	movhi	r4,2053
 8049874:	21121904 	addi	r4,r4,18532
 8049878:	8003ca80 	call	8003ca8 <puts>
      netexit(1);
 804987c:	01000044 	movi	r4,1
 8049880:	804687c0 	call	804687c <netexit>
   }

   dhcp_started = cticks;  /* init timeout */
 8049884:	d0a0a317 	ldw	r2,-32116(gp)
 8049888:	e0bffc15 	stw	r2,-16(fp)

   for (iface = 0; iface < STATIC_NETS; iface++)
 804988c:	e03fff15 	stw	zero,-4(fp)
 8049890:	00004206 	br	804999c <dhc_setup+0x150>
   {
      if (!nets[iface])
 8049894:	e0bfff17 	ldw	r2,-4(fp)
 8049898:	100690ba 	slli	r3,r2,2
 804989c:	008201b4 	movhi	r2,2054
 80498a0:	1885883a 	add	r2,r3,r2
 80498a4:	10bdce17 	ldw	r2,-2248(r2)
 80498a8:	10003626 	beq	r2,zero,8049984 <dhc_setup+0x138>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
 80498ac:	e0bfff17 	ldw	r2,-4(fp)
 80498b0:	100690ba 	slli	r3,r2,2
 80498b4:	008201b4 	movhi	r2,2054
 80498b8:	1885883a 	add	r2,r3,r2
 80498bc:	10bdce17 	ldw	r2,-2248(r2)
 80498c0:	10802a17 	ldw	r2,168(r2)
 80498c4:	1080400c 	andi	r2,r2,256
 80498c8:	10003026 	beq	r2,zero,804998c <dhc_setup+0x140>
         continue;

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
 80498cc:	e0bfff17 	ldw	r2,-4(fp)
 80498d0:	10c00f24 	muli	r3,r2,60
 80498d4:	008201b4 	movhi	r2,2054
 80498d8:	1885883a 	add	r2,r3,r2
 80498dc:	10be0217 	ldw	r2,-2040(r2)
 80498e0:	1000041e 	bne	r2,zero,80498f4 <dhc_setup+0xa8>
      {
         dhc_set_callback(iface, dhc_main_ipset);
 80498e4:	01420174 	movhi	r5,2053
 80498e8:	29669904 	addi	r5,r5,-26012
 80498ec:	e13fff17 	ldw	r4,-4(fp)
 80498f0:	802cc500 	call	802cc50 <dhc_set_callback>
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
 80498f4:	e0bfff17 	ldw	r2,-4(fp)
 80498f8:	100690ba 	slli	r3,r2,2
 80498fc:	008201b4 	movhi	r2,2054
 8049900:	1885883a 	add	r2,r3,r2
 8049904:	10bdce17 	ldw	r2,-2248(r2)
 8049908:	10c00a17 	ldw	r3,40(r2)
 804990c:	e0bfff17 	ldw	r2,-4(fp)
 8049910:	100490ba 	slli	r2,r2,2
 8049914:	e085883a 	add	r2,fp,r2
 8049918:	10fff815 	stw	r3,-32(r2)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
 804991c:	e0bfff17 	ldw	r2,-4(fp)
 8049920:	100490ba 	slli	r2,r2,2
 8049924:	e085883a 	add	r2,fp,r2
 8049928:	10bff817 	ldw	r2,-32(r2)
 804992c:	1000041e 	bne	r2,zero,8049940 <dhc_setup+0xf4>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
 8049930:	01400044 	movi	r5,1
 8049934:	e13fff17 	ldw	r4,-4(fp)
 8049938:	802f1180 	call	802f118 <dhc_state_init>
 804993c:	00000306 	br	804994c <dhc_setup+0x100>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
 8049940:	000b883a 	mov	r5,zero
 8049944:	e13fff17 	ldw	r4,-4(fp)
 8049948:	802f1180 	call	802f118 <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
 804994c:	802ea7c0 	call	802ea7c <dhc_second>
 8049950:	e0bffd15 	stw	r2,-12(fp)
      if (e)
 8049954:	e0bffd17 	ldw	r2,-12(fp)
 8049958:	10000626 	beq	r2,zero,8049974 <dhc_setup+0x128>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
 804995c:	e17fff17 	ldw	r5,-4(fp)
 8049960:	01020174 	movhi	r4,2053
 8049964:	21122204 	addi	r4,r4,18568
 8049968:	8003b840 	call	8003b84 <printf>
         netexit(1);
 804996c:	01000044 	movi	r4,1
 8049970:	804687c0 	call	804687c <netexit>
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
 8049974:	e0bffe17 	ldw	r2,-8(fp)
 8049978:	10800044 	addi	r2,r2,1
 804997c:	e0bffe15 	stw	r2,-8(fp)
 8049980:	00000306 	br	8049990 <dhc_setup+0x144>
         continue; /* no valid iface for this network */
 8049984:	0001883a 	nop
 8049988:	00000106 	br	8049990 <dhc_setup+0x144>
         continue;
 804998c:	0001883a 	nop
   for (iface = 0; iface < STATIC_NETS; iface++)
 8049990:	e0bfff17 	ldw	r2,-4(fp)
 8049994:	10800044 	addi	r2,r2,1
 8049998:	e0bfff15 	stw	r2,-4(fp)
 804999c:	e0bfff17 	ldw	r2,-4(fp)
 80499a0:	10800110 	cmplti	r2,r2,4
 80499a4:	103fbb1e 	bne	r2,zero,8049894 <dhc_setup+0x48>
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
 80499a8:	e0bffe17 	ldw	r2,-8(fp)
 80499ac:	10002726 	beq	r2,zero,8049a4c <dhc_setup+0x200>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 80499b0:	00000206 	br	80499bc <dhc_setup+0x170>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
 80499b4:	802c8fc0 	call	802c8fc <tk_yield>
      pktdemux();
 80499b8:	80295840 	call	8029584 <pktdemux>
   while (((cticks - dhcp_started) < (130*TPS)) &&
 80499bc:	d0e0a317 	ldw	r3,-32116(gp)
 80499c0:	e0bffc17 	ldw	r2,-16(fp)
 80499c4:	1885c83a 	sub	r2,r3,r2
 80499c8:	108cb228 	cmpgeui	r2,r2,13000
 80499cc:	1000021e 	bne	r2,zero,80499d8 <dhc_setup+0x18c>
      (dhc_alldone() == FALSE))
 80499d0:	802f1700 	call	802f170 <dhc_alldone>
   while (((cticks - dhcp_started) < (130*TPS)) &&
 80499d4:	103ff726 	beq	r2,zero,80499b4 <dhc_setup+0x168>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
 80499d8:	802f1700 	call	802f170 <dhc_alldone>
 80499dc:	10001c1e 	bne	r2,zero,8049a50 <dhc_setup+0x204>
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 80499e0:	01020174 	movhi	r4,2053
 80499e4:	21122c04 	addi	r4,r4,18608
 80499e8:	8003ca80 	call	8003ca8 <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 80499ec:	e03fff15 	stw	zero,-4(fp)
 80499f0:	00001206 	br	8049a3c <dhc_setup+0x1f0>
      {
         if (dhc_ifacedone(iface) == FALSE)
 80499f4:	e13fff17 	ldw	r4,-4(fp)
 80499f8:	802f1f00 	call	802f1f0 <dhc_ifacedone>
 80499fc:	10000c1e 	bne	r2,zero,8049a30 <dhc_setup+0x1e4>
         {
            dhc_halt(iface);
 8049a00:	e13fff17 	ldw	r4,-4(fp)
 8049a04:	802ef3c0 	call	802ef3c <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
 8049a08:	e0bfff17 	ldw	r2,-4(fp)
 8049a0c:	100690ba 	slli	r3,r2,2
 8049a10:	008201b4 	movhi	r2,2054
 8049a14:	1885883a 	add	r2,r3,r2
 8049a18:	10bdce17 	ldw	r2,-2248(r2)
 8049a1c:	e0ffff17 	ldw	r3,-4(fp)
 8049a20:	180690ba 	slli	r3,r3,2
 8049a24:	e0c7883a 	add	r3,fp,r3
 8049a28:	18fff817 	ldw	r3,-32(r3)
 8049a2c:	10c00a15 	stw	r3,40(r2)
      for (iface = 0; iface < STATIC_NETS; iface++)
 8049a30:	e0bfff17 	ldw	r2,-4(fp)
 8049a34:	10800044 	addi	r2,r2,1
 8049a38:	e0bfff15 	stw	r2,-4(fp)
 8049a3c:	e0bfff17 	ldw	r2,-4(fp)
 8049a40:	10800110 	cmplti	r2,r2,4
 8049a44:	103feb1e 	bne	r2,zero,80499f4 <dhc_setup+0x1a8>
 8049a48:	00000106 	br	8049a50 <dhc_setup+0x204>
      return;
 8049a4c:	0001883a 	nop
         }
      }
   }
}
 8049a50:	e037883a 	mov	sp,fp
 8049a54:	dfc00117 	ldw	ra,4(sp)
 8049a58:	df000017 	ldw	fp,0(sp)
 8049a5c:	dec00204 	addi	sp,sp,8
 8049a60:	f800283a 	ret

08049a64 <dhc_main_ipset>:
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 8049a64:	defffc04 	addi	sp,sp,-16
 8049a68:	dfc00315 	stw	ra,12(sp)
 8049a6c:	df000215 	stw	fp,8(sp)
 8049a70:	df000204 	addi	fp,sp,8
 8049a74:	e13fff15 	stw	r4,-4(fp)
 8049a78:	e17ffe15 	stw	r5,-8(fp)
   if ( state == DHCS_BOUND )
 8049a7c:	e0bffe17 	ldw	r2,-8(fp)
 8049a80:	10800198 	cmpnei	r2,r2,6
 8049a84:	10002e1e 	bne	r2,zero,8049b40 <dhc_main_ipset+0xdc>
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
              nets[iface]->name);
 8049a88:	e0bfff17 	ldw	r2,-4(fp)
 8049a8c:	100690ba 	slli	r3,r2,2
 8049a90:	008201b4 	movhi	r2,2054
 8049a94:	1885883a 	add	r2,r3,r2
 8049a98:	10bdce17 	ldw	r2,-2248(r2)
 8049a9c:	10800104 	addi	r2,r2,4
      printf("Acquired IP address via DHCP client for interface: %s\n",
 8049aa0:	100b883a 	mov	r5,r2
 8049aa4:	01020174 	movhi	r4,2053
 8049aa8:	21123a04 	addi	r4,r4,18664
 8049aac:	8003b840 	call	8003b84 <printf>

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
 8049ab0:	e0bfff17 	ldw	r2,-4(fp)
 8049ab4:	100690ba 	slli	r3,r2,2
 8049ab8:	008201b4 	movhi	r2,2054
 8049abc:	1885883a 	add	r2,r3,r2
 8049ac0:	10bdce17 	ldw	r2,-2248(r2)
 8049ac4:	10800a17 	ldw	r2,40(r2)
 8049ac8:	1009883a 	mov	r4,r2
 8049acc:	802bbd00 	call	802bbd0 <print_ipad>
 8049ad0:	100b883a 	mov	r5,r2
 8049ad4:	01020174 	movhi	r4,2053
 8049ad8:	21124804 	addi	r4,r4,18720
 8049adc:	8003b840 	call	8003b84 <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
 8049ae0:	e0bfff17 	ldw	r2,-4(fp)
 8049ae4:	100690ba 	slli	r3,r2,2
 8049ae8:	008201b4 	movhi	r2,2054
 8049aec:	1885883a 	add	r2,r3,r2
 8049af0:	10bdce17 	ldw	r2,-2248(r2)
 8049af4:	10800c17 	ldw	r2,48(r2)
 8049af8:	1009883a 	mov	r4,r2
 8049afc:	802bbd00 	call	802bbd0 <print_ipad>
 8049b00:	100b883a 	mov	r5,r2
 8049b04:	01020174 	movhi	r4,2053
 8049b08:	21124d04 	addi	r4,r4,18740
 8049b0c:	8003b840 	call	8003b84 <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
 8049b10:	e0bfff17 	ldw	r2,-4(fp)
 8049b14:	100690ba 	slli	r3,r2,2
 8049b18:	008201b4 	movhi	r2,2054
 8049b1c:	1885883a 	add	r2,r3,r2
 8049b20:	10bdce17 	ldw	r2,-2248(r2)
 8049b24:	10800d17 	ldw	r2,52(r2)
 8049b28:	1009883a 	mov	r4,r2
 8049b2c:	802bbd00 	call	802bbd0 <print_ipad>
 8049b30:	100b883a 	mov	r5,r2
 8049b34:	01020174 	movhi	r4,2053
 8049b38:	21125204 	addi	r4,r4,18760
 8049b3c:	8003b840 	call	8003b84 <printf>
   }
   return 0;
 8049b40:	0005883a 	mov	r2,zero
}
 8049b44:	e037883a 	mov	sp,fp
 8049b48:	dfc00117 	ldw	ra,4(sp)
 8049b4c:	df000017 	ldw	fp,0(sp)
 8049b50:	dec00204 	addi	sp,sp,8
 8049b54:	f800283a 	ret

08049b58 <init_memdev>:
 * RETURNS: 
 */

int
init_memdev(void)
{
 8049b58:	deffff04 	addi	sp,sp,-4
 8049b5c:	df000015 	stw	fp,0(sp)
 8049b60:	d839883a 	mov	fp,sp
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 8049b64:	d0e0cf17 	ldw	r3,-31940(gp)
 8049b68:	00820174 	movhi	r2,2053
 8049b6c:	10db7815 	stw	r3,28128(r2)
   vfsystems = &mdio;
 8049b70:	00820174 	movhi	r2,2053
 8049b74:	109b7804 	addi	r2,r2,28128
 8049b78:	d0a0cf15 	stw	r2,-31940(gp)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 8049b7c:	d0e0d117 	ldw	r3,-31932(gp)
 8049b80:	00820174 	movhi	r2,2053
 8049b84:	10db8115 	stw	r3,28164(r2)
   vfsfiles = &mdlist[3];
 8049b88:	00820174 	movhi	r2,2053
 8049b8c:	109ba204 	addi	r2,r2,28296
 8049b90:	d0a0d115 	stw	r2,-31932(gp)

   return 0;
 8049b94:	0005883a 	mov	r2,zero
}
 8049b98:	e037883a 	mov	sp,fp
 8049b9c:	df000017 	ldw	fp,0(sp)
 8049ba0:	dec00104 	addi	sp,sp,4
 8049ba4:	f800283a 	ret

08049ba8 <md_fopen>:
 * RETURNS: 
 */

VFILE* 
md_fopen(char * name, char * mode)
{
 8049ba8:	defffd04 	addi	sp,sp,-12
 8049bac:	df000215 	stw	fp,8(sp)
 8049bb0:	df000204 	addi	fp,sp,8
 8049bb4:	e13fff15 	stw	r4,-4(fp)
 8049bb8:	e17ffe15 	stw	r5,-8(fp)
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
 8049bbc:	0005883a 	mov	r2,zero
}
 8049bc0:	e037883a 	mov	sp,fp
 8049bc4:	df000017 	ldw	fp,0(sp)
 8049bc8:	dec00104 	addi	sp,sp,4
 8049bcc:	f800283a 	ret

08049bd0 <md_fclose>:
 * RETURNS: 
 */

void   
md_fclose(VFILE * vfd)
{
 8049bd0:	defffe04 	addi	sp,sp,-8
 8049bd4:	df000115 	stw	fp,4(sp)
 8049bd8:	df000104 	addi	fp,sp,4
 8049bdc:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);
}
 8049be0:	0001883a 	nop
 8049be4:	e037883a 	mov	sp,fp
 8049be8:	df000017 	ldw	fp,0(sp)
 8049bec:	dec00104 	addi	sp,sp,4
 8049bf0:	f800283a 	ret

08049bf4 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8049bf4:	defff704 	addi	sp,sp,-36
 8049bf8:	dfc00815 	stw	ra,32(sp)
 8049bfc:	df000715 	stw	fp,28(sp)
 8049c00:	df000704 	addi	fp,sp,28
 8049c04:	e13ffc15 	stw	r4,-16(fp)
 8049c08:	e17ffb15 	stw	r5,-20(fp)
 8049c0c:	e1bffa15 	stw	r6,-24(fp)
 8049c10:	e1fff915 	stw	r7,-28(fp)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
 8049c14:	00800834 	movhi	r2,32
 8049c18:	e0bffe15 	stw	r2,-8(fp)
   if(vfd && vfd->file)
 8049c1c:	e0bff917 	ldw	r2,-28(fp)
 8049c20:	10000726 	beq	r2,zero,8049c40 <md_fread+0x4c>
 8049c24:	e0bff917 	ldw	r2,-28(fp)
 8049c28:	10800117 	ldw	r2,4(r2)
 8049c2c:	10000426 	beq	r2,zero,8049c40 <md_fread+0x4c>
   {
      file_size = vfd->file->real_size; 
 8049c30:	e0bff917 	ldw	r2,-28(fp)
 8049c34:	10800117 	ldw	r2,4(r2)
 8049c38:	10800717 	ldw	r2,28(r2)
 8049c3c:	e0bffe15 	stw	r2,-8(fp)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
 8049c40:	e0bff917 	ldw	r2,-28(fp)
 8049c44:	10c00217 	ldw	r3,8(r2)
 8049c48:	e0bff917 	ldw	r2,-28(fp)
 8049c4c:	10800117 	ldw	r2,4(r2)
 8049c50:	10800617 	ldw	r2,24(r2)
 8049c54:	1885c83a 	sub	r2,r3,r2
 8049c58:	e0bffd15 	stw	r2,-12(fp)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
 8049c5c:	e0fffa17 	ldw	r3,-24(fp)
 8049c60:	e0bffb17 	ldw	r2,-20(fp)
 8049c64:	1885383a 	mul	r2,r3,r2
 8049c68:	e0bfff15 	stw	r2,-4(fp)

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
 8049c6c:	e0fffd17 	ldw	r3,-12(fp)
 8049c70:	e0bfff17 	ldw	r2,-4(fp)
 8049c74:	1885883a 	add	r2,r3,r2
 8049c78:	e0fffe17 	ldw	r3,-8(fp)
 8049c7c:	1880042e 	bgeu	r3,r2,8049c90 <md_fread+0x9c>
      bcount = ((u_long)file_size - location);
 8049c80:	e0fffe17 	ldw	r3,-8(fp)
 8049c84:	e0bffd17 	ldw	r2,-12(fp)
 8049c88:	1885c83a 	sub	r2,r3,r2
 8049c8c:	e0bfff15 	stw	r2,-4(fp)

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
 8049c90:	e0fffd17 	ldw	r3,-12(fp)
 8049c94:	e0bffe17 	ldw	r2,-8(fp)
 8049c98:	1880052e 	bgeu	r3,r2,8049cb0 <md_fread+0xbc>
      (bcount  & 0xFFFF0000) ||
 8049c9c:	e0bfff17 	ldw	r2,-4(fp)
 8049ca0:	10bfffec 	andhi	r2,r2,65535
   if((location >= file_size) ||
 8049ca4:	1000021e 	bne	r2,zero,8049cb0 <md_fread+0xbc>
      (bcount  & 0xFFFF0000) ||
 8049ca8:	e0bfff17 	ldw	r2,-4(fp)
 8049cac:	1000021e 	bne	r2,zero,8049cb8 <md_fread+0xc4>
      (bcount == 0))
   {
      return 0;
 8049cb0:	0005883a 	mov	r2,zero
 8049cb4:	00002006 	br	8049d38 <md_fread+0x144>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
 8049cb8:	e0bff917 	ldw	r2,-28(fp)
 8049cbc:	10800117 	ldw	r2,4(r2)
 8049cc0:	1080058b 	ldhu	r2,22(r2)
 8049cc4:	10bfffcc 	andi	r2,r2,65535
 8049cc8:	10a0001c 	xori	r2,r2,32768
 8049ccc:	10a00004 	addi	r2,r2,-32768
 8049cd0:	10001016 	blt	r2,zero,8049d14 <md_fread+0x120>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 8049cd4:	e0bff917 	ldw	r2,-28(fp)
 8049cd8:	10800117 	ldw	r2,4(r2)
 8049cdc:	10800103 	ldbu	r2,4(r2)
 8049ce0:	10803fcc 	andi	r2,r2,255
 8049ce4:	1080201c 	xori	r2,r2,128
 8049ce8:	10bfe004 	addi	r2,r2,-128
 8049cec:	10801b58 	cmpnei	r2,r2,109
 8049cf0:	1000081e 	bne	r2,zero,8049d14 <md_fread+0x120>
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
 8049cf4:	e0bff917 	ldw	r2,-28(fp)
 8049cf8:	10c00217 	ldw	r3,8(r2)
 8049cfc:	00800834 	movhi	r2,32
 8049d00:	1885883a 	add	r2,r3,r2
 8049d04:	e1bfff17 	ldw	r6,-4(fp)
 8049d08:	100b883a 	mov	r5,r2
 8049d0c:	e13ffc17 	ldw	r4,-16(fp)
 8049d10:	80037cc0 	call	80037cc <memcpy>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
 8049d14:	e0bff917 	ldw	r2,-28(fp)
 8049d18:	10c00217 	ldw	r3,8(r2)
 8049d1c:	e0bfff17 	ldw	r2,-4(fp)
 8049d20:	1887883a 	add	r3,r3,r2
 8049d24:	e0bff917 	ldw	r2,-28(fp)
 8049d28:	10c00215 	stw	r3,8(r2)
#endif
   
   return ((int)bcount/size);
 8049d2c:	e17ffb17 	ldw	r5,-20(fp)
 8049d30:	e13fff17 	ldw	r4,-4(fp)
 8049d34:	8011fdc0 	call	8011fdc <__udivsi3>
}
 8049d38:	e037883a 	mov	sp,fp
 8049d3c:	dfc00117 	ldw	ra,4(sp)
 8049d40:	df000017 	ldw	fp,0(sp)
 8049d44:	dec00204 	addi	sp,sp,8
 8049d48:	f800283a 	ret

08049d4c <md_fwrite>:
 * RETURNS: 
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8049d4c:	defffb04 	addi	sp,sp,-20
 8049d50:	df000415 	stw	fp,16(sp)
 8049d54:	df000404 	addi	fp,sp,16
 8049d58:	e13fff15 	stw	r4,-4(fp)
 8049d5c:	e17ffe15 	stw	r5,-8(fp)
 8049d60:	e1bffd15 	stw	r6,-12(fp)
 8049d64:	e1fffc15 	stw	r7,-16(fp)
   if (vfd->file->name[0] == 'm')   /* memory device */
 8049d68:	e0bffc17 	ldw	r2,-16(fp)
 8049d6c:	10800117 	ldw	r2,4(r2)
 8049d70:	10800103 	ldbu	r2,4(r2)
 8049d74:	10803fcc 	andi	r2,r2,255
 8049d78:	1080201c 	xori	r2,r2,128
 8049d7c:	10bfe004 	addi	r2,r2,-128
 8049d80:	10801b58 	cmpnei	r2,r2,109
 8049d84:	1000021e 	bne	r2,zero,8049d90 <md_fwrite+0x44>
      return 0;   /* not writable device */
 8049d88:	0005883a 	mov	r2,zero
 8049d8c:	00000906 	br	8049db4 <md_fwrite+0x68>

   vfd->cmploc += (items * size);   /* adjust location */
 8049d90:	e0bffc17 	ldw	r2,-16(fp)
 8049d94:	10c00217 	ldw	r3,8(r2)
 8049d98:	e13ffd17 	ldw	r4,-12(fp)
 8049d9c:	e0bffe17 	ldw	r2,-8(fp)
 8049da0:	2085383a 	mul	r2,r4,r2
 8049da4:	1887883a 	add	r3,r3,r2
 8049da8:	e0bffc17 	ldw	r2,-16(fp)
 8049dac:	10c00215 	stw	r3,8(r2)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
 8049db0:	e0bffd17 	ldw	r2,-12(fp)
}
 8049db4:	e037883a 	mov	sp,fp
 8049db8:	df000017 	ldw	fp,0(sp)
 8049dbc:	dec00104 	addi	sp,sp,4
 8049dc0:	f800283a 	ret

08049dc4 <md_fseek>:
 * RETURNS: 
 */

int
md_fseek(VFILE * vfd, long offset, int mode)
{
 8049dc4:	defffc04 	addi	sp,sp,-16
 8049dc8:	df000315 	stw	fp,12(sp)
 8049dcc:	df000304 	addi	fp,sp,12
 8049dd0:	e13fff15 	stw	r4,-4(fp)
 8049dd4:	e17ffe15 	stw	r5,-8(fp)
 8049dd8:	e1bffd15 	stw	r6,-12(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
 8049ddc:	0005883a 	mov	r2,zero
}
 8049de0:	e037883a 	mov	sp,fp
 8049de4:	df000017 	ldw	fp,0(sp)
 8049de8:	dec00104 	addi	sp,sp,4
 8049dec:	f800283a 	ret

08049df0 <md_ftell>:
 * RETURNS: 
 */

long   
md_ftell(VFILE * vfd)
{
 8049df0:	defffe04 	addi	sp,sp,-8
 8049df4:	df000115 	stw	fp,4(sp)
 8049df8:	df000104 	addi	fp,sp,4
 8049dfc:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
 8049e00:	00800834 	movhi	r2,32
}
 8049e04:	e037883a 	mov	sp,fp
 8049e08:	df000017 	ldw	fp,0(sp)
 8049e0c:	dec00104 	addi	sp,sp,4
 8049e10:	f800283a 	ret

08049e14 <md_fgetc>:
 * RETURNS: 
 */

int    
md_fgetc(VFILE * vfd)
{
 8049e14:	defffc04 	addi	sp,sp,-16
 8049e18:	df000315 	stw	fp,12(sp)
 8049e1c:	df000304 	addi	fp,sp,12
 8049e20:	e13ffd15 	stw	r4,-12(fp)
   unsigned location;   /* current offset infile */
   int   retval   =  0;
 8049e24:	e03fff15 	stw	zero,-4(fp)

   location = vfd->cmploc - vfd->file->data;
 8049e28:	e0bffd17 	ldw	r2,-12(fp)
 8049e2c:	10c00217 	ldw	r3,8(r2)
 8049e30:	e0bffd17 	ldw	r2,-12(fp)
 8049e34:	10800117 	ldw	r2,4(r2)
 8049e38:	10800617 	ldw	r2,24(r2)
 8049e3c:	1885c83a 	sub	r2,r3,r2
 8049e40:	e0bffe15 	stw	r2,-8(fp)
   if (location >= vfd->file->real_size)     /* at end of file? */
 8049e44:	e0bffd17 	ldw	r2,-12(fp)
 8049e48:	10800117 	ldw	r2,4(r2)
 8049e4c:	10800717 	ldw	r2,28(r2)
 8049e50:	e0fffe17 	ldw	r3,-8(fp)
 8049e54:	18800236 	bltu	r3,r2,8049e60 <md_fgetc+0x4c>
      return EOF;
 8049e58:	00bfffc4 	movi	r2,-1
 8049e5c:	00001a06 	br	8049ec8 <md_fgetc+0xb4>

   if (!(vfd->file->flags & VF_NODATA))
 8049e60:	e0bffd17 	ldw	r2,-12(fp)
 8049e64:	10800117 	ldw	r2,4(r2)
 8049e68:	1080058b 	ldhu	r2,22(r2)
 8049e6c:	10bfffcc 	andi	r2,r2,65535
 8049e70:	10a0001c 	xori	r2,r2,32768
 8049e74:	10a00004 	addi	r2,r2,-32768
 8049e78:	10000d16 	blt	r2,zero,8049eb0 <md_fgetc+0x9c>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 8049e7c:	e0bffd17 	ldw	r2,-12(fp)
 8049e80:	10800117 	ldw	r2,4(r2)
 8049e84:	10800103 	ldbu	r2,4(r2)
 8049e88:	10803fcc 	andi	r2,r2,255
 8049e8c:	1080201c 	xori	r2,r2,128
 8049e90:	10bfe004 	addi	r2,r2,-128
 8049e94:	10801b58 	cmpnei	r2,r2,109
 8049e98:	1000051e 	bne	r2,zero,8049eb0 <md_fgetc+0x9c>
         retval = (int)(*vfd->cmploc) & 0xFF ;
 8049e9c:	e0bffd17 	ldw	r2,-12(fp)
 8049ea0:	10800217 	ldw	r2,8(r2)
 8049ea4:	10800003 	ldbu	r2,0(r2)
 8049ea8:	10803fcc 	andi	r2,r2,255
 8049eac:	e0bfff15 	stw	r2,-4(fp)
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
 8049eb0:	e0bffd17 	ldw	r2,-12(fp)
 8049eb4:	10800217 	ldw	r2,8(r2)
 8049eb8:	10c00044 	addi	r3,r2,1
 8049ebc:	e0bffd17 	ldw	r2,-12(fp)
 8049ec0:	10c00215 	stw	r3,8(r2)
   return retval;
 8049ec4:	e0bfff17 	ldw	r2,-4(fp)
}
 8049ec8:	e037883a 	mov	sp,fp
 8049ecc:	df000017 	ldw	fp,0(sp)
 8049ed0:	dec00104 	addi	sp,sp,4
 8049ed4:	f800283a 	ret

08049ed8 <md_unlink>:
 * RETURNS: 
 */

int    
md_unlink(char * filename)
{
 8049ed8:	defffe04 	addi	sp,sp,-8
 8049edc:	df000115 	stw	fp,4(sp)
 8049ee0:	df000104 	addi	fp,sp,4
 8049ee4:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
 8049ee8:	0005883a 	mov	r2,zero
}
 8049eec:	e037883a 	mov	sp,fp
 8049ef0:	df000017 	ldw	fp,0(sp)
 8049ef4:	dec00104 	addi	sp,sp,4
 8049ef8:	f800283a 	ret

08049efc <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 8049efc:	defff604 	addi	sp,sp,-40
 8049f00:	dfc00915 	stw	ra,36(sp)
 8049f04:	df000815 	stw	fp,32(sp)
 8049f08:	df000804 	addi	fp,sp,32
 8049f0c:	e13ffa15 	stw	r4,-24(fp)
 8049f10:	e17ff915 	stw	r5,-28(fp)
 8049f14:	e1bff815 	stw	r6,-32(fp)
   char *   cp;
   int   dots  =  0; /* periods imbedded in input string */
 8049f18:	e03ffe15 	stw	zero,-8(fp)
   union   
   {
      u_char   c[4];
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";
 8049f1c:	00820174 	movhi	r2,2053
 8049f20:	10925704 	addi	r2,r2,18780
 8049f24:	e0bffd15 	stw	r2,-12(fp)

   cp = stringin;
 8049f28:	e0bff817 	ldw	r2,-32(fp)
 8049f2c:	e0bfff15 	stw	r2,-4(fp)
   while (*cp)
 8049f30:	00002506 	br	8049fc8 <parse_ipad+0xcc>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 8049f34:	e0bfff17 	ldw	r2,-4(fp)
 8049f38:	10800003 	ldbu	r2,0(r2)
 8049f3c:	10803fcc 	andi	r2,r2,255
 8049f40:	1080201c 	xori	r2,r2,128
 8049f44:	10bfe004 	addi	r2,r2,-128
 8049f48:	10800e88 	cmpgei	r2,r2,58
 8049f4c:	10000e1e 	bne	r2,zero,8049f88 <parse_ipad+0x8c>
 8049f50:	e0bfff17 	ldw	r2,-4(fp)
 8049f54:	10800003 	ldbu	r2,0(r2)
 8049f58:	10803fcc 	andi	r2,r2,255
 8049f5c:	1080201c 	xori	r2,r2,128
 8049f60:	10bfe004 	addi	r2,r2,-128
 8049f64:	10800b90 	cmplti	r2,r2,46
 8049f68:	1000071e 	bne	r2,zero,8049f88 <parse_ipad+0x8c>
 8049f6c:	e0bfff17 	ldw	r2,-4(fp)
 8049f70:	10800003 	ldbu	r2,0(r2)
 8049f74:	10803fcc 	andi	r2,r2,255
 8049f78:	1080201c 	xori	r2,r2,128
 8049f7c:	10bfe004 	addi	r2,r2,-128
 8049f80:	10800bd8 	cmpnei	r2,r2,47
 8049f84:	1000031e 	bne	r2,zero,8049f94 <parse_ipad+0x98>
         return("all chars must be digits (0-9) or dots (.)");
 8049f88:	00820174 	movhi	r2,2053
 8049f8c:	10926004 	addi	r2,r2,18816
 8049f90:	00009406 	br	804a1e4 <parse_ipad+0x2e8>
      if (*cp == '.')dots++;
 8049f94:	e0bfff17 	ldw	r2,-4(fp)
 8049f98:	10800003 	ldbu	r2,0(r2)
 8049f9c:	10803fcc 	andi	r2,r2,255
 8049fa0:	1080201c 	xori	r2,r2,128
 8049fa4:	10bfe004 	addi	r2,r2,-128
 8049fa8:	10800b98 	cmpnei	r2,r2,46
 8049fac:	1000031e 	bne	r2,zero,8049fbc <parse_ipad+0xc0>
 8049fb0:	e0bffe17 	ldw	r2,-8(fp)
 8049fb4:	10800044 	addi	r2,r2,1
 8049fb8:	e0bffe15 	stw	r2,-8(fp)
         cp++;
 8049fbc:	e0bfff17 	ldw	r2,-4(fp)
 8049fc0:	10800044 	addi	r2,r2,1
 8049fc4:	e0bfff15 	stw	r2,-4(fp)
   while (*cp)
 8049fc8:	e0bfff17 	ldw	r2,-4(fp)
 8049fcc:	10800003 	ldbu	r2,0(r2)
 8049fd0:	10803fcc 	andi	r2,r2,255
 8049fd4:	1080201c 	xori	r2,r2,128
 8049fd8:	10bfe004 	addi	r2,r2,-128
 8049fdc:	103fd51e 	bne	r2,zero,8049f34 <parse_ipad+0x38>
   }

   if ( dots < 1 || dots > 3 )
 8049fe0:	e0bffe17 	ldw	r2,-8(fp)
 8049fe4:	0080030e 	bge	zero,r2,8049ff4 <parse_ipad+0xf8>
 8049fe8:	e0bffe17 	ldw	r2,-8(fp)
 8049fec:	10800110 	cmplti	r2,r2,4
 8049ff0:	1000031e 	bne	r2,zero,804a000 <parse_ipad+0x104>
      return("string must contain 1 - 3 dots (.)");
 8049ff4:	00820174 	movhi	r2,2053
 8049ff8:	10926b04 	addi	r2,r2,18860
 8049ffc:	00007906 	br	804a1e4 <parse_ipad+0x2e8>

   cp = stringin;
 804a000:	e0bff817 	ldw	r2,-32(fp)
 804a004:	e0bfff15 	stw	r2,-4(fp)
   if ((number = atoi(cp)) > 255)   /* set net number */
 804a008:	e13fff17 	ldw	r4,-4(fp)
 804a00c:	804de8c0 	call	804de8c <atoi>
 804a010:	e0bffc15 	stw	r2,-16(fp)
 804a014:	e0bffc17 	ldw	r2,-16(fp)
 804a018:	10804010 	cmplti	r2,r2,256
 804a01c:	1000021e 	bne	r2,zero,804a028 <parse_ipad+0x12c>
      return(toobig);
 804a020:	e0bffd17 	ldw	r2,-12(fp)
 804a024:	00006f06 	br	804a1e4 <parse_ipad+0x2e8>

   retval.c[0] = (u_char)number;
 804a028:	e0bffc17 	ldw	r2,-16(fp)
 804a02c:	e0bffb05 	stb	r2,-20(fp)

   while (*cp != '.')cp++; /* find dot (end of number) */
 804a030:	00000306 	br	804a040 <parse_ipad+0x144>
 804a034:	e0bfff17 	ldw	r2,-4(fp)
 804a038:	10800044 	addi	r2,r2,1
 804a03c:	e0bfff15 	stw	r2,-4(fp)
 804a040:	e0bfff17 	ldw	r2,-4(fp)
 804a044:	10800003 	ldbu	r2,0(r2)
 804a048:	10803fcc 	andi	r2,r2,255
 804a04c:	1080201c 	xori	r2,r2,128
 804a050:	10bfe004 	addi	r2,r2,-128
 804a054:	10800b98 	cmpnei	r2,r2,46
 804a058:	103ff61e 	bne	r2,zero,804a034 <parse_ipad+0x138>
      cp++;             /* point past dot */
 804a05c:	e0bfff17 	ldw	r2,-4(fp)
 804a060:	10800044 	addi	r2,r2,1
 804a064:	e0bfff15 	stw	r2,-4(fp)

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 804a068:	e0bffe17 	ldw	r2,-8(fp)
 804a06c:	10800060 	cmpeqi	r2,r2,1
 804a070:	1000031e 	bne	r2,zero,804a080 <parse_ipad+0x184>
 804a074:	e0bffe17 	ldw	r2,-8(fp)
 804a078:	10800098 	cmpnei	r2,r2,2
 804a07c:	1000021e 	bne	r2,zero,804a088 <parse_ipad+0x18c>
 804a080:	e03ffb45 	stb	zero,-19(fp)
 804a084:	00001806 	br	804a0e8 <parse_ipad+0x1ec>
      else
   {
      number = atoi(cp);
 804a088:	e13fff17 	ldw	r4,-4(fp)
 804a08c:	804de8c0 	call	804de8c <atoi>
 804a090:	e0bffc15 	stw	r2,-16(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 804a094:	00000306 	br	804a0a4 <parse_ipad+0x1a8>
 804a098:	e0bfff17 	ldw	r2,-4(fp)
 804a09c:	10800044 	addi	r2,r2,1
 804a0a0:	e0bfff15 	stw	r2,-4(fp)
 804a0a4:	e0bfff17 	ldw	r2,-4(fp)
 804a0a8:	10800003 	ldbu	r2,0(r2)
 804a0ac:	10803fcc 	andi	r2,r2,255
 804a0b0:	1080201c 	xori	r2,r2,128
 804a0b4:	10bfe004 	addi	r2,r2,-128
 804a0b8:	10800b98 	cmpnei	r2,r2,46
 804a0bc:	103ff61e 	bne	r2,zero,804a098 <parse_ipad+0x19c>
         cp++;             /* point past dot */
 804a0c0:	e0bfff17 	ldw	r2,-4(fp)
 804a0c4:	10800044 	addi	r2,r2,1
 804a0c8:	e0bfff15 	stw	r2,-4(fp)
      if (number > 255) return(toobig);
 804a0cc:	e0bffc17 	ldw	r2,-16(fp)
 804a0d0:	10804010 	cmplti	r2,r2,256
 804a0d4:	1000021e 	bne	r2,zero,804a0e0 <parse_ipad+0x1e4>
 804a0d8:	e0bffd17 	ldw	r2,-12(fp)
 804a0dc:	00004106 	br	804a1e4 <parse_ipad+0x2e8>
         retval.c[1] = (u_char)number;
 804a0e0:	e0bffc17 	ldw	r2,-16(fp)
 804a0e4:	e0bffb45 	stb	r2,-19(fp)
   }

   if (dots == 1) retval.c[2] = 0;
 804a0e8:	e0bffe17 	ldw	r2,-8(fp)
 804a0ec:	10800058 	cmpnei	r2,r2,1
 804a0f0:	1000021e 	bne	r2,zero,804a0fc <parse_ipad+0x200>
 804a0f4:	e03ffb85 	stb	zero,-18(fp)
 804a0f8:	00001806 	br	804a15c <parse_ipad+0x260>
      else
   {
      number = atoi(cp);
 804a0fc:	e13fff17 	ldw	r4,-4(fp)
 804a100:	804de8c0 	call	804de8c <atoi>
 804a104:	e0bffc15 	stw	r2,-16(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 804a108:	00000306 	br	804a118 <parse_ipad+0x21c>
 804a10c:	e0bfff17 	ldw	r2,-4(fp)
 804a110:	10800044 	addi	r2,r2,1
 804a114:	e0bfff15 	stw	r2,-4(fp)
 804a118:	e0bfff17 	ldw	r2,-4(fp)
 804a11c:	10800003 	ldbu	r2,0(r2)
 804a120:	10803fcc 	andi	r2,r2,255
 804a124:	1080201c 	xori	r2,r2,128
 804a128:	10bfe004 	addi	r2,r2,-128
 804a12c:	10800b98 	cmpnei	r2,r2,46
 804a130:	103ff61e 	bne	r2,zero,804a10c <parse_ipad+0x210>
         cp++;             /* point past dot */
 804a134:	e0bfff17 	ldw	r2,-4(fp)
 804a138:	10800044 	addi	r2,r2,1
 804a13c:	e0bfff15 	stw	r2,-4(fp)
      if (number > 255) return(toobig);
 804a140:	e0bffc17 	ldw	r2,-16(fp)
 804a144:	10804010 	cmplti	r2,r2,256
 804a148:	1000021e 	bne	r2,zero,804a154 <parse_ipad+0x258>
 804a14c:	e0bffd17 	ldw	r2,-12(fp)
 804a150:	00002406 	br	804a1e4 <parse_ipad+0x2e8>
         retval.c[2] = (u_char)number;
 804a154:	e0bffc17 	ldw	r2,-16(fp)
 804a158:	e0bffb85 	stb	r2,-18(fp)
   }

   if ((number = atoi(cp)) > 255)
 804a15c:	e13fff17 	ldw	r4,-4(fp)
 804a160:	804de8c0 	call	804de8c <atoi>
 804a164:	e0bffc15 	stw	r2,-16(fp)
 804a168:	e0bffc17 	ldw	r2,-16(fp)
 804a16c:	10804010 	cmplti	r2,r2,256
 804a170:	1000021e 	bne	r2,zero,804a17c <parse_ipad+0x280>
      return(toobig);
 804a174:	e0bffd17 	ldw	r2,-12(fp)
 804a178:	00001a06 	br	804a1e4 <parse_ipad+0x2e8>
   retval.c[3] = (u_char)number;
 804a17c:	e0bffc17 	ldw	r2,-16(fp)
 804a180:	e0bffbc5 	stb	r2,-17(fp)

   if (retval.c[0] < 128) *sbits = 8;
 804a184:	e0bffb03 	ldbu	r2,-20(fp)
 804a188:	10803fcc 	andi	r2,r2,255
 804a18c:	1080201c 	xori	r2,r2,128
 804a190:	10bfe004 	addi	r2,r2,-128
 804a194:	10000416 	blt	r2,zero,804a1a8 <parse_ipad+0x2ac>
 804a198:	e0bff917 	ldw	r2,-28(fp)
 804a19c:	00c00204 	movi	r3,8
 804a1a0:	10c00015 	stw	r3,0(r2)
 804a1a4:	00000b06 	br	804a1d4 <parse_ipad+0x2d8>
      else if(retval.c[0] < 192) *sbits = 16;
 804a1a8:	e0bffb03 	ldbu	r2,-20(fp)
 804a1ac:	10803fcc 	andi	r2,r2,255
 804a1b0:	10803028 	cmpgeui	r2,r2,192
 804a1b4:	1000041e 	bne	r2,zero,804a1c8 <parse_ipad+0x2cc>
 804a1b8:	e0bff917 	ldw	r2,-28(fp)
 804a1bc:	00c00404 	movi	r3,16
 804a1c0:	10c00015 	stw	r3,0(r2)
 804a1c4:	00000306 	br	804a1d4 <parse_ipad+0x2d8>
      else *sbits = 24;
 804a1c8:	e0bff917 	ldw	r2,-28(fp)
 804a1cc:	00c00604 	movi	r3,24
 804a1d0:	10c00015 	stw	r3,0(r2)

      *ipout = retval.l;      /* everything went OK, return number */
 804a1d4:	e0fffb17 	ldw	r3,-20(fp)
 804a1d8:	e0bffa17 	ldw	r2,-24(fp)
 804a1dc:	10c00015 	stw	r3,0(r2)
   return(NULL);        /* return OK code (no error string) */
 804a1e0:	0005883a 	mov	r2,zero
}
 804a1e4:	e037883a 	mov	sp,fp
 804a1e8:	dfc00117 	ldw	ra,4(sp)
 804a1ec:	df000017 	ldw	fp,0(sp)
 804a1f0:	dec00204 	addi	sp,sp,8
 804a1f4:	f800283a 	ret

0804a1f8 <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
 804a1f8:	defffb04 	addi	sp,sp,-20
 804a1fc:	dfc00415 	stw	ra,16(sp)
 804a200:	df000315 	stw	fp,12(sp)
 804a204:	df000304 	addi	fp,sp,12
 804a208:	e13ffd15 	stw	r4,-12(fp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
 804a20c:	e17ffd17 	ldw	r5,-12(fp)
 804a210:	01020174 	movhi	r4,2053
 804a214:	211db204 	addi	r4,r4,30408
 804a218:	8003d700 	call	8003d70 <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
 804a21c:	e0fffe04 	addi	r3,fp,-8
 804a220:	e0bfff04 	addi	r2,fp,-4
 804a224:	01820174 	movhi	r6,2053
 804a228:	319db204 	addi	r6,r6,30408
 804a22c:	180b883a 	mov	r5,r3
 804a230:	1009883a 	mov	r4,r2
 804a234:	8049efc0 	call	8049efc <parse_ipad>
 804a238:	1000021e 	bne	r2,zero,804a244 <inet_addr+0x4c>
   {
      return ipaddr ;
 804a23c:	e0bfff17 	ldw	r2,-4(fp)
 804a240:	00000106 	br	804a248 <inet_addr+0x50>
   }
   else
   {
      return (u_long)NULL ;
 804a244:	0005883a 	mov	r2,zero
   }
}
 804a248:	e037883a 	mov	sp,fp
 804a24c:	dfc00117 	ldw	ra,4(sp)
 804a250:	df000017 	ldw	fp,0(sp)
 804a254:	dec00204 	addi	sp,sp,8
 804a258:	f800283a 	ret

0804a25c <hextoa>:
 * RETURNS: character 0-9 or A-F
 */

char
hextoa(int val)
{
 804a25c:	defffe04 	addi	sp,sp,-8
 804a260:	df000115 	stw	fp,4(sp)
 804a264:	df000104 	addi	fp,sp,4
 804a268:	e13fff15 	stw	r4,-4(fp)
   val &= 0x0f;
 804a26c:	e0bfff17 	ldw	r2,-4(fp)
 804a270:	108003cc 	andi	r2,r2,15
 804a274:	e0bfff15 	stw	r2,-4(fp)
   if(val < 10)
 804a278:	e0bfff17 	ldw	r2,-4(fp)
 804a27c:	10800288 	cmpgei	r2,r2,10
 804a280:	1000031e 	bne	r2,zero,804a290 <hextoa+0x34>
      return (char)(val + '0');
 804a284:	e0bfff17 	ldw	r2,-4(fp)
 804a288:	10800c04 	addi	r2,r2,48
 804a28c:	00000206 	br	804a298 <hextoa+0x3c>
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
 804a290:	e0bfff17 	ldw	r2,-4(fp)
 804a294:	10800dc4 	addi	r2,r2,55
}
 804a298:	e037883a 	mov	sp,fp
 804a29c:	df000017 	ldw	fp,0(sp)
 804a2a0:	dec00104 	addi	sp,sp,4
 804a2a4:	f800283a 	ret

0804a2a8 <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 804a2a8:	defff804 	addi	sp,sp,-32
 804a2ac:	dfc00715 	stw	ra,28(sp)
 804a2b0:	df000615 	stw	fp,24(sp)
 804a2b4:	df000604 	addi	fp,sp,24
 804a2b8:	e13ffc15 	stw	r4,-16(fp)
 804a2bc:	e17ffb15 	stw	r5,-20(fp)
 804a2c0:	e1bffa15 	stw	r6,-24(fp)
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 804a2c4:	e0bffc17 	ldw	r2,-16(fp)
 804a2c8:	10800098 	cmpnei	r2,r2,2
 804a2cc:	1000151e 	bne	r2,zero,804a324 <inet_pton+0x7c>
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
 804a2d0:	e0fffd04 	addi	r3,fp,-12
 804a2d4:	e0bffe04 	addi	r2,fp,-8
 804a2d8:	e1bffb17 	ldw	r6,-20(fp)
 804a2dc:	180b883a 	mov	r5,r3
 804a2e0:	1009883a 	mov	r4,r2
 804a2e4:	8049efc0 	call	8049efc <parse_ipad>
 804a2e8:	e0bfff15 	stw	r2,-4(fp)
      if(err == NULL)
 804a2ec:	e0bfff17 	ldw	r2,-4(fp)
 804a2f0:	1000071e 	bne	r2,zero,804a310 <inet_pton+0x68>
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
 804a2f4:	e0bffe04 	addi	r2,fp,-8
 804a2f8:	01800104 	movi	r6,4
 804a2fc:	100b883a 	mov	r5,r2
 804a300:	e13ffa17 	ldw	r4,-24(fp)
 804a304:	80037cc0 	call	80037cc <memcpy>
         return 0;
 804a308:	0005883a 	mov	r2,zero
 804a30c:	00000606 	br	804a328 <inet_pton+0x80>
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
 804a310:	00820174 	movhi	r2,2053
 804a314:	10927504 	addi	r2,r2,18900
 804a318:	d0a05215 	stw	r2,-32440(gp)
         return 1;
 804a31c:	00800044 	movi	r2,1
 804a320:	00000106 	br	804a328 <inet_pton+0x80>
      pton_error = "too short - missing colon?";
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
 804a324:	0005883a 	mov	r2,zero
}
 804a328:	e037883a 	mov	sp,fp
 804a32c:	dfc00117 	ldw	ra,4(sp)
 804a330:	df000017 	ldw	fp,0(sp)
 804a334:	dec00204 	addi	sp,sp,8
 804a338:	f800283a 	ret

0804a33c <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
 804a33c:	defff804 	addi	sp,sp,-32
 804a340:	dfc00715 	stw	ra,28(sp)
 804a344:	df000615 	stw	fp,24(sp)
 804a348:	df000604 	addi	fp,sp,24
 804a34c:	e13ffd15 	stw	r4,-12(fp)
 804a350:	e17ffc15 	stw	r5,-16(fp)
 804a354:	e1bffb15 	stw	r6,-20(fp)
 804a358:	e1fffa15 	stw	r7,-24(fp)
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
 804a35c:	e0bffd17 	ldw	r2,-12(fp)
 804a360:	10800098 	cmpnei	r2,r2,2
 804a364:	1000101e 	bne	r2,zero,804a3a8 <inet_ntop+0x6c>
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
 804a368:	e0bffc17 	ldw	r2,-16(fp)
 804a36c:	10800017 	ldw	r2,0(r2)
 804a370:	e0bfff15 	stw	r2,-4(fp)
      cp = print_ipad(ip4addr);
 804a374:	e13fff17 	ldw	r4,-4(fp)
 804a378:	802bbd00 	call	802bbd0 <print_ipad>
 804a37c:	e0bffe15 	stw	r2,-8(fp)
      if (strlen(cp) < size)
 804a380:	e13ffe17 	ldw	r4,-8(fp)
 804a384:	80044880 	call	8004488 <strlen>
 804a388:	1007883a 	mov	r3,r2
 804a38c:	e0bffa17 	ldw	r2,-24(fp)
 804a390:	1880052e 	bgeu	r3,r2,804a3a8 <inet_ntop+0x6c>
      {
         strcpy(str, cp);
 804a394:	e17ffe17 	ldw	r5,-8(fp)
 804a398:	e13ffb17 	ldw	r4,-20(fp)
 804a39c:	8003d700 	call	8003d70 <strcpy>
         return (str);
 804a3a0:	e0bffb17 	ldw	r2,-20(fp)
 804a3a4:	00000106 	br	804a3ac <inet_ntop+0x70>
         return (str);
      }
   }
#endif

   return ((const char *)NULL);
 804a3a8:	0005883a 	mov	r2,zero
}
 804a3ac:	e037883a 	mov	sp,fp
 804a3b0:	dfc00117 	ldw	ra,4(sp)
 804a3b4:	df000017 	ldw	fp,0(sp)
 804a3b8:	dec00204 	addi	sp,sp,8
 804a3bc:	f800283a 	ret

0804a3c0 <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
 804a3c0:	defffc04 	addi	sp,sp,-16
 804a3c4:	dfc00315 	stw	ra,12(sp)
 804a3c8:	df000215 	stw	fp,8(sp)
 804a3cc:	df000204 	addi	fp,sp,8
 804a3d0:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr->sa_family == AF_INET)
 804a3d4:	e0bffe17 	ldw	r2,-8(fp)
 804a3d8:	1080000b 	ldhu	r2,0(r2)
 804a3dc:	10bfffcc 	andi	r2,r2,65535
 804a3e0:	10800098 	cmpnei	r2,r2,2
 804a3e4:	1000071e 	bne	r2,zero,804a404 <print46_addr+0x44>
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
 804a3e8:	e0bffe17 	ldw	r2,-8(fp)
 804a3ec:	e0bfff15 	stw	r2,-4(fp)
      return print_ipad(addr->sin_addr.s_addr);
 804a3f0:	e0bfff17 	ldw	r2,-4(fp)
 804a3f4:	10800117 	ldw	r2,4(r2)
 804a3f8:	1009883a 	mov	r4,r2
 804a3fc:	802bbd00 	call	802bbd0 <print_ipad>
 804a400:	00000106 	br	804a408 <print46_addr+0x48>
      static char namebuf[46];  /* max len of IPv6 addr */
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
 804a404:	0005883a 	mov	r2,zero
}
 804a408:	e037883a 	mov	sp,fp
 804a40c:	dfc00117 	ldw	ra,4(sp)
 804a410:	df000017 	ldw	fp,0(sp)
 804a414:	dec00204 	addi	sp,sp,8
 804a418:	f800283a 	ret

0804a41c <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 804a41c:	defffb04 	addi	sp,sp,-20
 804a420:	dfc00415 	stw	ra,16(sp)
 804a424:	df000315 	stw	fp,12(sp)
 804a428:	df000304 	addi	fp,sp,12
 804a42c:	e13ffe15 	stw	r4,-8(fp)
 804a430:	e17ffd15 	stw	r5,-12(fp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
 804a434:	e0bffd17 	ldw	r2,-12(fp)
 804a438:	00c00084 	movi	r3,2
 804a43c:	10c0000d 	sth	r3,0(r2)

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
 804a440:	e0bffe17 	ldw	r2,-8(fp)
 804a444:	10800044 	addi	r2,r2,1
 804a448:	10800003 	ldbu	r2,0(r2)
 804a44c:	10803fcc 	andi	r2,r2,255
 804a450:	1080201c 	xori	r2,r2,128
 804a454:	10bfe004 	addi	r2,r2,-128
 804a458:	10800ba0 	cmpeqi	r2,r2,46
 804a45c:	1000101e 	bne	r2,zero,804a4a0 <inet46_addr+0x84>
 804a460:	e0bffe17 	ldw	r2,-8(fp)
 804a464:	10800084 	addi	r2,r2,2
 804a468:	10800003 	ldbu	r2,0(r2)
 804a46c:	10803fcc 	andi	r2,r2,255
 804a470:	1080201c 	xori	r2,r2,128
 804a474:	10bfe004 	addi	r2,r2,-128
 804a478:	10800ba0 	cmpeqi	r2,r2,46
 804a47c:	1000081e 	bne	r2,zero,804a4a0 <inet46_addr+0x84>
 804a480:	e0bffe17 	ldw	r2,-8(fp)
 804a484:	108000c4 	addi	r2,r2,3
 804a488:	10800003 	ldbu	r2,0(r2)
 804a48c:	10803fcc 	andi	r2,r2,255
 804a490:	1080201c 	xori	r2,r2,128
 804a494:	10bfe004 	addi	r2,r2,-128
 804a498:	10800b98 	cmpnei	r2,r2,46
 804a49c:	10000a1e 	bne	r2,zero,804a4c8 <inet46_addr+0xac>
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
 804a4a0:	e0bffd17 	ldw	r2,-12(fp)
 804a4a4:	e0bfff15 	stw	r2,-4(fp)
      addr->sin_addr.s_addr = inet_addr(str);
 804a4a8:	e13ffe17 	ldw	r4,-8(fp)
 804a4ac:	804a1f80 	call	804a1f8 <inet_addr>
 804a4b0:	1007883a 	mov	r3,r2
 804a4b4:	e0bfff17 	ldw	r2,-4(fp)
 804a4b8:	10c00115 	stw	r3,4(r2)
      addr->sin_family = AF_INET;
 804a4bc:	e0bfff17 	ldw	r2,-4(fp)
 804a4c0:	00c00084 	movi	r3,2
 804a4c4:	10c0000d 	sth	r3,0(r2)
      inet_pton(AF_INET6, str, &addr->sin6_addr);
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
 804a4c8:	0005883a 	mov	r2,zero
}
 804a4cc:	e037883a 	mov	sp,fp
 804a4d0:	dfc00117 	ldw	ra,4(sp)
 804a4d4:	df000017 	ldw	fp,0(sp)
 804a4d8:	dec00204 	addi	sp,sp,8
 804a4dc:	f800283a 	ret

0804a4e0 <inet_setport>:
 *
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
 804a4e0:	defffc04 	addi	sp,sp,-16
 804a4e4:	df000315 	stw	fp,12(sp)
 804a4e8:	df000304 	addi	fp,sp,12
 804a4ec:	e13ffe15 	stw	r4,-8(fp)
 804a4f0:	e17ffd15 	stw	r5,-12(fp)
   if (addr->sa_family == AF_INET)
 804a4f4:	e0bffe17 	ldw	r2,-8(fp)
 804a4f8:	1080000b 	ldhu	r2,0(r2)
 804a4fc:	10bfffcc 	andi	r2,r2,65535
 804a500:	10800098 	cmpnei	r2,r2,2
 804a504:	10000c1e 	bne	r2,zero,804a538 <inet_setport+0x58>
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
 804a508:	e0bffe17 	ldw	r2,-8(fp)
 804a50c:	e0bfff15 	stw	r2,-4(fp)
      si->sin_port = htons(port);  
 804a510:	e0bffd17 	ldw	r2,-12(fp)
 804a514:	1005d23a 	srai	r2,r2,8
 804a518:	10803fcc 	andi	r2,r2,255
 804a51c:	1007883a 	mov	r3,r2
 804a520:	e0bffd17 	ldw	r2,-12(fp)
 804a524:	1004923a 	slli	r2,r2,8
 804a528:	1884b03a 	or	r2,r3,r2
 804a52c:	1007883a 	mov	r3,r2
 804a530:	e0bfff17 	ldw	r2,-4(fp)
 804a534:	10c0008d 	sth	r3,2(r2)
      struct sockaddr_in6 *si = (struct sockaddr_in6 *)addr;
      si->sin6_port = htons(port);
   }
#endif

}
 804a538:	0001883a 	nop
 804a53c:	e037883a 	mov	sp,fp
 804a540:	df000017 	ldw	fp,0(sp)
 804a544:	dec00104 	addi	sp,sp,4
 804a548:	f800283a 	ret

0804a54c <convert_ip>:
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
 804a54c:	defff904 	addi	sp,sp,-28
 804a550:	df000615 	stw	fp,24(sp)
 804a554:	df000604 	addi	fp,sp,24
 804a558:	e13ffa15 	stw	r4,-24(fp)
   const char *cp = p;
 804a55c:	e0bffa17 	ldw	r2,-24(fp)
 804a560:	e0bfff15 	stw	r2,-4(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
 804a564:	e0bffb04 	addi	r2,fp,-20
 804a568:	e0bffc15 	stw	r2,-16(fp)
   int n = 0;
 804a56c:	e03ffe15 	stw	zero,-8(fp)
   unsigned short v = 0;
 804a570:	e03ffd8d 	sth	zero,-10(fp)
   dw = 0;
 804a574:	e03ffb15 	stw	zero,-20(fp)
   while(*cp)
 804a578:	00003106 	br	804a640 <convert_ip+0xf4>
   {
      if( *cp == '.')
 804a57c:	e0bfff17 	ldw	r2,-4(fp)
 804a580:	10800003 	ldbu	r2,0(r2)
 804a584:	10803fcc 	andi	r2,r2,255
 804a588:	1080201c 	xori	r2,r2,128
 804a58c:	10bfe004 	addi	r2,r2,-128
 804a590:	10800b98 	cmpnei	r2,r2,46
 804a594:	10000e1e 	bne	r2,zero,804a5d0 <convert_ip+0x84>
      {
         lpb[n] = (unsigned char) v;
 804a598:	e0bffe17 	ldw	r2,-8(fp)
 804a59c:	e0fffc17 	ldw	r3,-16(fp)
 804a5a0:	1885883a 	add	r2,r3,r2
 804a5a4:	e0fffd8b 	ldhu	r3,-10(fp)
 804a5a8:	10c00005 	stb	r3,0(r2)
         v = 0;
 804a5ac:	e03ffd8d 	sth	zero,-10(fp)
         n++;
 804a5b0:	e0bffe17 	ldw	r2,-8(fp)
 804a5b4:	10800044 	addi	r2,r2,1
 804a5b8:	e0bffe15 	stw	r2,-8(fp)
         if(n > 3)
 804a5bc:	e0bffe17 	ldw	r2,-8(fp)
 804a5c0:	10800110 	cmplti	r2,r2,4
 804a5c4:	10001b1e 	bne	r2,zero,804a634 <convert_ip+0xe8>
         {
            return dw;
 804a5c8:	e0bffb17 	ldw	r2,-20(fp)
 804a5cc:	00002806 	br	804a670 <convert_ip+0x124>
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
 804a5d0:	e0bfff17 	ldw	r2,-4(fp)
 804a5d4:	10800003 	ldbu	r2,0(r2)
 804a5d8:	10803fcc 	andi	r2,r2,255
 804a5dc:	1080201c 	xori	r2,r2,128
 804a5e0:	10bfe004 	addi	r2,r2,-128
 804a5e4:	10800c10 	cmplti	r2,r2,48
 804a5e8:	1000121e 	bne	r2,zero,804a634 <convert_ip+0xe8>
 804a5ec:	e0bfff17 	ldw	r2,-4(fp)
 804a5f0:	10800003 	ldbu	r2,0(r2)
 804a5f4:	10803fcc 	andi	r2,r2,255
 804a5f8:	1080201c 	xori	r2,r2,128
 804a5fc:	10bfe004 	addi	r2,r2,-128
 804a600:	10800e88 	cmpgei	r2,r2,58
 804a604:	10000b1e 	bne	r2,zero,804a634 <convert_ip+0xe8>
      {
         v = (v * 10) + (*cp - '0');
 804a608:	e0bffd8b 	ldhu	r2,-10(fp)
 804a60c:	108002a4 	muli	r2,r2,10
 804a610:	1007883a 	mov	r3,r2
 804a614:	e0bfff17 	ldw	r2,-4(fp)
 804a618:	10800003 	ldbu	r2,0(r2)
 804a61c:	10803fcc 	andi	r2,r2,255
 804a620:	1080201c 	xori	r2,r2,128
 804a624:	10bfe004 	addi	r2,r2,-128
 804a628:	1885883a 	add	r2,r3,r2
 804a62c:	10bff404 	addi	r2,r2,-48
 804a630:	e0bffd8d 	sth	r2,-10(fp)
      }
      cp++;
 804a634:	e0bfff17 	ldw	r2,-4(fp)
 804a638:	10800044 	addi	r2,r2,1
 804a63c:	e0bfff15 	stw	r2,-4(fp)
   while(*cp)
 804a640:	e0bfff17 	ldw	r2,-4(fp)
 804a644:	10800003 	ldbu	r2,0(r2)
 804a648:	10803fcc 	andi	r2,r2,255
 804a64c:	1080201c 	xori	r2,r2,128
 804a650:	10bfe004 	addi	r2,r2,-128
 804a654:	103fc91e 	bne	r2,zero,804a57c <convert_ip+0x30>
   }
   lpb[n] = (unsigned char) v;
 804a658:	e0bffe17 	ldw	r2,-8(fp)
 804a65c:	e0fffc17 	ldw	r3,-16(fp)
 804a660:	1885883a 	add	r2,r3,r2
 804a664:	e0fffd8b 	ldhu	r3,-10(fp)
 804a668:	10c00005 	stb	r3,0(r2)
   return dw;
 804a66c:	e0bffb17 	ldw	r2,-20(fp)
}  /* convert_ip() */
 804a670:	e037883a 	mov	sp,fp
 804a674:	df000017 	ldw	fp,0(sp)
 804a678:	dec00104 	addi	sp,sp,4
 804a67c:	f800283a 	ret

0804a680 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 804a680:	defff704 	addi	sp,sp,-36
 804a684:	dfc00815 	stw	ra,32(sp)
 804a688:	df000715 	stw	fp,28(sp)
 804a68c:	df000704 	addi	fp,sp,28
 804a690:	e13ff915 	stw	r4,-28(fp)
   unshort  oldsum;
   unshort  newsum;
   struct tcphdr * tp;

#ifdef MUTE_WARNS    /* stifle compiler warnings */
   tcpdata = (char *)NULL;
 804a694:	e03ffe15 	stw	zero,-8(fp)
#endif   /* MUTE_WARNS */

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;
 804a698:	e03ffdc5 	stb	zero,-9(fp)

   iphlen = (unshort)ip_hlen(pip);
 804a69c:	e0bff917 	ldw	r2,-28(fp)
 804a6a0:	10800003 	ldbu	r2,0(r2)
 804a6a4:	10803fcc 	andi	r2,r2,255
 804a6a8:	100490ba 	slli	r2,r2,2
 804a6ac:	10800f0c 	andi	r2,r2,60
 804a6b0:	e0bffc8d 	sth	r2,-14(fp)
   tcplen = htons(pip->ip_len) - iphlen;
 804a6b4:	e0bff917 	ldw	r2,-28(fp)
 804a6b8:	1080008b 	ldhu	r2,2(r2)
 804a6bc:	10bfffcc 	andi	r2,r2,65535
 804a6c0:	1004d23a 	srli	r2,r2,8
 804a6c4:	1007883a 	mov	r3,r2
 804a6c8:	e0bff917 	ldw	r2,-28(fp)
 804a6cc:	1080008b 	ldhu	r2,2(r2)
 804a6d0:	10bfffcc 	andi	r2,r2,65535
 804a6d4:	1004923a 	slli	r2,r2,8
 804a6d8:	1884b03a 	or	r2,r3,r2
 804a6dc:	1007883a 	mov	r3,r2
 804a6e0:	e0bffc8b 	ldhu	r2,-14(fp)
 804a6e4:	1885c83a 	sub	r2,r3,r2
 804a6e8:	e0bfff8d 	sth	r2,-2(fp)

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
 804a6ec:	e0bff917 	ldw	r2,-28(fp)
 804a6f0:	10800003 	ldbu	r2,0(r2)
 804a6f4:	10803fcc 	andi	r2,r2,255
 804a6f8:	100490ba 	slli	r2,r2,2
 804a6fc:	10800f0c 	andi	r2,r2,60
 804a700:	e0fff917 	ldw	r3,-28(fp)
 804a704:	1885883a 	add	r2,r3,r2
 804a708:	e0bffb15 	stw	r2,-20(fp)
   oldsum = tp->th_sum;       /* Save passed checksum */
 804a70c:	e0bffb17 	ldw	r2,-20(fp)
 804a710:	1080040b 	ldhu	r2,16(r2)
 804a714:	e0bffa8d 	sth	r2,-22(fp)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 804a718:	e0bfff8b 	ldhu	r2,-2(fp)
 804a71c:	10800184 	addi	r2,r2,6
 804a720:	1005d23a 	srai	r2,r2,8
 804a724:	10803fcc 	andi	r2,r2,255
 804a728:	1007883a 	mov	r3,r2
 804a72c:	e0bfff8b 	ldhu	r2,-2(fp)
 804a730:	10800184 	addi	r2,r2,6
 804a734:	1004923a 	slli	r2,r2,8
 804a738:	1884b03a 	or	r2,r3,r2
 804a73c:	1007883a 	mov	r3,r2
 804a740:	e0bffb17 	ldw	r2,-20(fp)
 804a744:	10c0040d 	sth	r3,16(r2)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
 804a748:	e0bfff8b 	ldhu	r2,-2(fp)
 804a74c:	1080004c 	andi	r2,r2,1
 804a750:	10000e26 	beq	r2,zero,804a78c <tcp_cksum+0x10c>
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
 804a754:	e0fffc8b 	ldhu	r3,-14(fp)
 804a758:	e0bfff8b 	ldhu	r2,-2(fp)
 804a75c:	1885883a 	add	r2,r3,r2
 804a760:	e0fff917 	ldw	r3,-28(fp)
 804a764:	1885883a 	add	r2,r3,r2
 804a768:	e0bffe15 	stw	r2,-8(fp)
      oddchar = *tcpdata;
 804a76c:	e0bffe17 	ldw	r2,-8(fp)
 804a770:	10800003 	ldbu	r2,0(r2)
 804a774:	e0bffdc5 	stb	r2,-9(fp)
      *tcpdata = '\0';        /* zero out pad byte */
 804a778:	e0bffe17 	ldw	r2,-8(fp)
 804a77c:	10000005 	stb	zero,0(r2)
      tcplen++;               /* bump length to pass to cksum() */
 804a780:	e0bfff8b 	ldhu	r2,-2(fp)
 804a784:	10800044 	addi	r2,r2,1
 804a788:	e0bfff8d 	sth	r2,-2(fp)

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
 804a78c:	e0bffb17 	ldw	r2,-20(fp)
 804a790:	10fffe04 	addi	r3,r2,-8
 804a794:	e0bfff8b 	ldhu	r2,-2(fp)
 804a798:	10800204 	addi	r2,r2,8
 804a79c:	1005d07a 	srai	r2,r2,1
 804a7a0:	100b883a 	mov	r5,r2
 804a7a4:	1809883a 	mov	r4,r3
 804a7a8:	802b98c0 	call	802b98c <cksum>
 804a7ac:	0084303a 	nor	r2,zero,r2
 804a7b0:	e0bffd0d 	sth	r2,-12(fp)

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
 804a7b4:	e0fffd0b 	ldhu	r3,-12(fp)
 804a7b8:	e0bffa8b 	ldhu	r2,-22(fp)
 804a7bc:	18800726 	beq	r3,r2,804a7dc <tcp_cksum+0x15c>
 804a7c0:	e0fffa8b 	ldhu	r3,-22(fp)
 804a7c4:	00bfffd4 	movui	r2,65535
 804a7c8:	1880041e 	bne	r3,r2,804a7dc <tcp_cksum+0x15c>
 804a7cc:	e0bffd0b 	ldhu	r2,-12(fp)
 804a7d0:	1000021e 	bne	r2,zero,804a7dc <tcp_cksum+0x15c>
      newsum = 0xffff;
 804a7d4:	00bfffc4 	movi	r2,-1
 804a7d8:	e0bffd0d 	sth	r2,-12(fp)

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
 804a7dc:	e0bffb17 	ldw	r2,-20(fp)
 804a7e0:	e0fffa8b 	ldhu	r3,-22(fp)
 804a7e4:	10c0040d 	sth	r3,16(r2)
   if (oddchar)
 804a7e8:	e0bffdc7 	ldb	r2,-9(fp)
 804a7ec:	10000326 	beq	r2,zero,804a7fc <tcp_cksum+0x17c>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
 804a7f0:	e0bffe17 	ldw	r2,-8(fp)
 804a7f4:	e0fffdc3 	ldbu	r3,-9(fp)
 804a7f8:	10c00005 	stb	r3,0(r2)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
 804a7fc:	e0bffd0b 	ldhu	r2,-12(fp)
}
 804a800:	e037883a 	mov	sp,fp
 804a804:	dfc00117 	ldw	ra,4(sp)
 804a808:	df000017 	ldw	fp,0(sp)
 804a80c:	dec00204 	addi	sp,sp,8
 804a810:	f800283a 	ret

0804a814 <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
 804a814:	defffb04 	addi	sp,sp,-20
 804a818:	dfc00415 	stw	ra,16(sp)
 804a81c:	df000315 	stw	fp,12(sp)
 804a820:	df000304 	addi	fp,sp,12
 804a824:	e13ffe15 	stw	r4,-8(fp)
 804a828:	e17ffd15 	stw	r5,-12(fp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
 804a82c:	01000b04 	movi	r4,44
 804a830:	8030d080 	call	8030d08 <npalloc>
 804a834:	e0bfff15 	stw	r2,-4(fp)
   if (inp == 0)
 804a838:	e0bfff17 	ldw	r2,-4(fp)
 804a83c:	1000021e 	bne	r2,zero,804a848 <in_pcballoc+0x34>
      return ENOMEM;
 804a840:	00800304 	movi	r2,12
 804a844:	00001006 	br	804a888 <in_pcballoc+0x74>
   inp->inp_head = head;
 804a848:	e0bfff17 	ldw	r2,-4(fp)
 804a84c:	e0fffd17 	ldw	r3,-12(fp)
 804a850:	10c00215 	stw	r3,8(r2)
   inp->inp_socket = so;
 804a854:	e0bfff17 	ldw	r2,-4(fp)
 804a858:	e0fffe17 	ldw	r3,-8(fp)
 804a85c:	10c00815 	stw	r3,32(r2)

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
 804a860:	e0bfff17 	ldw	r2,-4(fp)
 804a864:	00c08004 	movi	r3,512
 804a868:	10c00615 	stw	r3,24(r2)
   insque(inp, head);
 804a86c:	e17ffd17 	ldw	r5,-12(fp)
 804a870:	e13fff17 	ldw	r4,-4(fp)
 804a874:	803181c0 	call	803181c <insque>
   so->so_pcb = inp;
 804a878:	e0bffe17 	ldw	r2,-8(fp)
 804a87c:	e0ffff17 	ldw	r3,-4(fp)
 804a880:	10c00115 	stw	r3,4(r2)
   return 0;
 804a884:	0005883a 	mov	r2,zero
}
 804a888:	e037883a 	mov	sp,fp
 804a88c:	dfc00117 	ldw	ra,4(sp)
 804a890:	df000017 	ldw	fp,0(sp)
 804a894:	dec00204 	addi	sp,sp,8
 804a898:	f800283a 	ret

0804a89c <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
 804a89c:	defffc04 	addi	sp,sp,-16
 804a8a0:	dfc00315 	stw	ra,12(sp)
 804a8a4:	df000215 	stw	fp,8(sp)
 804a8a8:	df000204 	addi	fp,sp,8
 804a8ac:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so =  inp->inp_socket;
 804a8b0:	e0bffe17 	ldw	r2,-8(fp)
 804a8b4:	10800817 	ldw	r2,32(r2)
 804a8b8:	e0bfff15 	stw	r2,-4(fp)

   so->so_pcb = 0;
 804a8bc:	e0bfff17 	ldw	r2,-4(fp)
 804a8c0:	10000115 	stw	zero,4(r2)
   sofree(so);
 804a8c4:	e13fff17 	ldw	r4,-4(fp)
 804a8c8:	80348180 	call	8034818 <sofree>
   remque(inp);
 804a8cc:	e13ffe17 	ldw	r4,-8(fp)
 804a8d0:	80317ac0 	call	80317ac <remque>
   INP_FREE (inp);
 804a8d4:	e13ffe17 	ldw	r4,-8(fp)
 804a8d8:	8030d3c0 	call	8030d3c <npfree>
}
 804a8dc:	0001883a 	nop
 804a8e0:	e037883a 	mov	sp,fp
 804a8e4:	dfc00117 	ldw	ra,4(sp)
 804a8e8:	df000017 	ldw	fp,0(sp)
 804a8ec:	dec00204 	addi	sp,sp,8
 804a8f0:	f800283a 	ret

0804a8f4 <in_pcbbind>:

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 804a8f4:	defff504 	addi	sp,sp,-44
 804a8f8:	dfc00a15 	stw	ra,40(sp)
 804a8fc:	df000915 	stw	fp,36(sp)
 804a900:	df000904 	addi	fp,sp,36
 804a904:	e13ffa15 	stw	r4,-24(fp)
 804a908:	e17ff915 	stw	r5,-28(fp)
   struct socket *   so =  inp->inp_socket;
 804a90c:	e0bffa17 	ldw	r2,-24(fp)
 804a910:	10800817 	ldw	r2,32(r2)
 804a914:	e0bffd15 	stw	r2,-12(fp)
   struct inpcb * head  =  inp->inp_head;
 804a918:	e0bffa17 	ldw	r2,-24(fp)
 804a91c:	10800217 	ldw	r2,8(r2)
 804a920:	e0bffc15 	stw	r2,-16(fp)
   struct sockaddr_in * sin;
   u_short  lport =  0;
 804a924:	e03fff8d 	sth	zero,-2(fp)


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
 804a928:	e0bffa17 	ldw	r2,-24(fp)
 804a92c:	1080078b 	ldhu	r2,30(r2)
 804a930:	10bfffcc 	andi	r2,r2,65535
 804a934:	1000031e 	bne	r2,zero,804a944 <in_pcbbind+0x50>
 804a938:	e0bffa17 	ldw	r2,-24(fp)
 804a93c:	10800417 	ldw	r2,16(r2)
 804a940:	10000226 	beq	r2,zero,804a94c <in_pcbbind+0x58>
      return (EINVAL);
 804a944:	00800584 	movi	r2,22
 804a948:	00006906 	br	804aaf0 <in_pcbbind+0x1fc>
   if (nam == 0)
 804a94c:	e0bff917 	ldw	r2,-28(fp)
 804a950:	10003926 	beq	r2,zero,804aa38 <in_pcbbind+0x144>
      goto noname;
   sin = mtod(nam, struct sockaddr_in *);
 804a954:	e0bff917 	ldw	r2,-28(fp)
 804a958:	10800317 	ldw	r2,12(r2)
 804a95c:	e0bffb15 	stw	r2,-20(fp)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
 804a960:	e0bffb17 	ldw	r2,-20(fp)
 804a964:	10800117 	ldw	r2,4(r2)
 804a968:	10000a26 	beq	r2,zero,804a994 <in_pcbbind+0xa0>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
 804a96c:	e0bffb17 	ldw	r2,-20(fp)
 804a970:	10800117 	ldw	r2,4(r2)
 804a974:	1009883a 	mov	r4,r2
 804a978:	804370c0 	call	804370c <ip_mymach>
 804a97c:	1007883a 	mov	r3,r2
 804a980:	e0bffb17 	ldw	r2,-20(fp)
 804a984:	10800117 	ldw	r2,4(r2)
 804a988:	18800226 	beq	r3,r2,804a994 <in_pcbbind+0xa0>
      return (EADDRNOTAVAIL);
 804a98c:	00801f44 	movi	r2,125
 804a990:	00005706 	br	804aaf0 <in_pcbbind+0x1fc>
   }
   lport = sin->sin_port;
 804a994:	e0bffb17 	ldw	r2,-20(fp)
 804a998:	1080008b 	ldhu	r2,2(r2)
 804a99c:	e0bfff8d 	sth	r2,-2(fp)
   if (lport) 
 804a9a0:	e0bfff8b 	ldhu	r2,-2(fp)
 804a9a4:	10001f26 	beq	r2,zero,804aa24 <in_pcbbind+0x130>
   {
      int   wild  =  0;
 804a9a8:	e03ffe15 	stw	zero,-8(fp)

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 804a9ac:	e0bffd17 	ldw	r2,-12(fp)
 804a9b0:	10800417 	ldw	r2,16(r2)
 804a9b4:	1080010c 	andi	r2,r2,4
 804a9b8:	10000c1e 	bne	r2,zero,804a9ec <in_pcbbind+0xf8>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
 804a9bc:	e0bffd17 	ldw	r2,-12(fp)
 804a9c0:	10800217 	ldw	r2,8(r2)
 804a9c4:	1080010b 	ldhu	r2,4(r2)
 804a9c8:	10bfffcc 	andi	r2,r2,65535
 804a9cc:	1080010c 	andi	r2,r2,4
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 804a9d0:	10000426 	beq	r2,zero,804a9e4 <in_pcbbind+0xf0>
          (so->so_options & SO_ACCEPTCONN) == 0))
 804a9d4:	e0bffd17 	ldw	r2,-12(fp)
 804a9d8:	10800417 	ldw	r2,16(r2)
 804a9dc:	1080008c 	andi	r2,r2,2
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
 804a9e0:	1000021e 	bne	r2,zero,804a9ec <in_pcbbind+0xf8>
      {
         wild = INPLOOKUP_WILDCARD;
 804a9e4:	00800044 	movi	r2,1
 804a9e8:	e0bffe15 	stw	r2,-8(fp)
      }
      if (in_pcblookup(head,
 804a9ec:	e0bffb17 	ldw	r2,-20(fp)
 804a9f0:	11000117 	ldw	r4,4(r2)
 804a9f4:	e0bfff8b 	ldhu	r2,-2(fp)
 804a9f8:	e0fffe17 	ldw	r3,-8(fp)
 804a9fc:	d8c00115 	stw	r3,4(sp)
 804aa00:	d8800015 	stw	r2,0(sp)
 804aa04:	200f883a 	mov	r7,r4
 804aa08:	000d883a 	mov	r6,zero
 804aa0c:	000b883a 	mov	r5,zero
 804aa10:	e13ffc17 	ldw	r4,-16(fp)
 804aa14:	804ae480 	call	804ae48 <in_pcblookup>
 804aa18:	10000226 	beq	r2,zero,804aa24 <in_pcbbind+0x130>
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
 804aa1c:	00801c04 	movi	r2,112
 804aa20:	00003306 	br	804aaf0 <in_pcbbind+0x1fc>
      }
   }
   inp->inp_laddr = sin->sin_addr;
 804aa24:	e0bffa17 	ldw	r2,-24(fp)
 804aa28:	e0fffb17 	ldw	r3,-20(fp)
 804aa2c:	18c00117 	ldw	r3,4(r3)
 804aa30:	10c00415 	stw	r3,16(r2)
 804aa34:	00000106 	br	804aa3c <in_pcbbind+0x148>
      goto noname;
 804aa38:	0001883a 	nop
noname:
   if (lport == 0)
 804aa3c:	e0bfff8b 	ldhu	r2,-2(fp)
 804aa40:	1000271e 	bne	r2,zero,804aae0 <in_pcbbind+0x1ec>
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 804aa44:	e0bffc17 	ldw	r2,-16(fp)
 804aa48:	1080078b 	ldhu	r2,30(r2)
 804aa4c:	10c00044 	addi	r3,r2,1
 804aa50:	1809883a 	mov	r4,r3
 804aa54:	e0fffc17 	ldw	r3,-16(fp)
 804aa58:	1900078d 	sth	r4,30(r3)
 804aa5c:	10bfffcc 	andi	r2,r2,65535
 804aa60:	10810030 	cmpltui	r2,r2,1024
 804aa64:	1000051e 	bne	r2,zero,804aa7c <in_pcbbind+0x188>
             head->inp_lport > IPPORT_USERRESERVED)
 804aa68:	e0bffc17 	ldw	r2,-16(fp)
 804aa6c:	1080078b 	ldhu	r2,30(r2)
         if (head->inp_lport++ < IPPORT_RESERVED ||
 804aa70:	10bfffcc 	andi	r2,r2,65535
 804aa74:	1084e270 	cmpltui	r2,r2,5001
 804aa78:	1000031e 	bne	r2,zero,804aa88 <in_pcbbind+0x194>
         {
            head->inp_lport = IPPORT_RESERVED;
 804aa7c:	e0bffc17 	ldw	r2,-16(fp)
 804aa80:	00c10004 	movi	r3,1024
 804aa84:	10c0078d 	sth	r3,30(r2)
         }
         lport = htons(head->inp_lport);
 804aa88:	e0bffc17 	ldw	r2,-16(fp)
 804aa8c:	1080078b 	ldhu	r2,30(r2)
 804aa90:	10bfffcc 	andi	r2,r2,65535
 804aa94:	1004d23a 	srli	r2,r2,8
 804aa98:	1007883a 	mov	r3,r2
 804aa9c:	e0bffc17 	ldw	r2,-16(fp)
 804aaa0:	1080078b 	ldhu	r2,30(r2)
 804aaa4:	10bfffcc 	andi	r2,r2,65535
 804aaa8:	1004923a 	slli	r2,r2,8
 804aaac:	1884b03a 	or	r2,r3,r2
 804aab0:	e0bfff8d 	sth	r2,-2(fp)
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 804aab4:	e0bffa17 	ldw	r2,-24(fp)
 804aab8:	10c00417 	ldw	r3,16(r2)
 804aabc:	e0bfff8b 	ldhu	r2,-2(fp)
 804aac0:	d8000115 	stw	zero,4(sp)
 804aac4:	d8800015 	stw	r2,0(sp)
 804aac8:	180f883a 	mov	r7,r3
 804aacc:	000d883a 	mov	r6,zero
 804aad0:	000b883a 	mov	r5,zero
 804aad4:	e13ffc17 	ldw	r4,-16(fp)
 804aad8:	804ae480 	call	804ae48 <in_pcblookup>
 804aadc:	103fd91e 	bne	r2,zero,804aa44 <in_pcbbind+0x150>
   }
   inp->inp_lport = lport;
 804aae0:	e0bffa17 	ldw	r2,-24(fp)
 804aae4:	e0ffff8b 	ldhu	r3,-2(fp)
 804aae8:	10c0078d 	sth	r3,30(r2)
   return (0);
 804aaec:	0005883a 	mov	r2,zero
}
 804aaf0:	e037883a 	mov	sp,fp
 804aaf4:	dfc00117 	ldw	ra,4(sp)
 804aaf8:	df000017 	ldw	fp,0(sp)
 804aafc:	dec00204 	addi	sp,sp,8
 804ab00:	f800283a 	ret

0804ab04 <in_pcbconnect>:
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
 804ab04:	defff604 	addi	sp,sp,-40
 804ab08:	dfc00915 	stw	ra,36(sp)
 804ab0c:	df000815 	stw	fp,32(sp)
 804ab10:	df000804 	addi	fp,sp,32
 804ab14:	e13ffb15 	stw	r4,-20(fp)
 804ab18:	e17ffa15 	stw	r5,-24(fp)
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 804ab1c:	e0bffa17 	ldw	r2,-24(fp)
 804ab20:	10800317 	ldw	r2,12(r2)
 804ab24:	e0bffe15 	stw	r2,-8(fp)

   if (nam->m_len < sizeof (*sin))
 804ab28:	e0bffa17 	ldw	r2,-24(fp)
 804ab2c:	10800217 	ldw	r2,8(r2)
 804ab30:	10800428 	cmpgeui	r2,r2,16
 804ab34:	1000021e 	bne	r2,zero,804ab40 <in_pcbconnect+0x3c>
      return (EINVAL);
 804ab38:	00800584 	movi	r2,22
 804ab3c:	00006406 	br	804acd0 <in_pcbconnect+0x1cc>
   if (sin->sin_family != AF_INET)
 804ab40:	e0bffe17 	ldw	r2,-8(fp)
 804ab44:	1080000b 	ldhu	r2,0(r2)
 804ab48:	10bfffcc 	andi	r2,r2,65535
 804ab4c:	10a0001c 	xori	r2,r2,32768
 804ab50:	10a00004 	addi	r2,r2,-32768
 804ab54:	108000a0 	cmpeqi	r2,r2,2
 804ab58:	1000021e 	bne	r2,zero,804ab64 <in_pcbconnect+0x60>
      return (EAFNOSUPPORT);
 804ab5c:	00801a84 	movi	r2,106
 804ab60:	00005b06 	br	804acd0 <in_pcbconnect+0x1cc>
   if (sin->sin_port == 0)
 804ab64:	e0bffe17 	ldw	r2,-8(fp)
 804ab68:	1080008b 	ldhu	r2,2(r2)
 804ab6c:	10bfffcc 	andi	r2,r2,65535
 804ab70:	1000021e 	bne	r2,zero,804ab7c <in_pcbconnect+0x78>
      return (EADDRNOTAVAIL);
 804ab74:	00801f44 	movi	r2,125
 804ab78:	00005506 	br	804acd0 <in_pcbconnect+0x1cc>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
 804ab7c:	e0bffe17 	ldw	r2,-8(fp)
 804ab80:	10800117 	ldw	r2,4(r2)
 804ab84:	10000d1e 	bne	r2,zero,804abbc <in_pcbconnect+0xb8>
   {
      if (inp && inp->ifp)
 804ab88:	e0bffb17 	ldw	r2,-20(fp)
 804ab8c:	10000926 	beq	r2,zero,804abb4 <in_pcbconnect+0xb0>
 804ab90:	e0bffb17 	ldw	r2,-20(fp)
 804ab94:	10800a17 	ldw	r2,40(r2)
 804ab98:	10000626 	beq	r2,zero,804abb4 <in_pcbconnect+0xb0>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
 804ab9c:	e0bffb17 	ldw	r2,-20(fp)
 804aba0:	10800a17 	ldw	r2,40(r2)
 804aba4:	10c00a17 	ldw	r3,40(r2)
 804aba8:	e0bffe17 	ldw	r2,-8(fp)
 804abac:	10c00115 	stw	r3,4(r2)
 804abb0:	00000806 	br	804abd4 <in_pcbconnect+0xd0>
      else
         return (EADDRNOTAVAIL);
 804abb4:	00801f44 	movi	r2,125
 804abb8:	00004506 	br	804acd0 <in_pcbconnect+0x1cc>
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
 804abbc:	e0bffe17 	ldw	r2,-8(fp)
 804abc0:	10800117 	ldw	r2,4(r2)
 804abc4:	10bfffd8 	cmpnei	r2,r2,-1
 804abc8:	1000021e 	bne	r2,zero,804abd4 <in_pcbconnect+0xd0>
      return (EADDRNOTAVAIL);
 804abcc:	00801f44 	movi	r2,125
 804abd0:	00003f06 	br	804acd0 <in_pcbconnect+0x1cc>


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 804abd4:	e0bffb17 	ldw	r2,-20(fp)
 804abd8:	10800417 	ldw	r2,16(r2)
 804abdc:	10000f1e 	bne	r2,zero,804ac1c <in_pcbconnect+0x118>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
 804abe0:	e0bffe17 	ldw	r2,-8(fp)
 804abe4:	10800117 	ldw	r2,4(r2)
 804abe8:	e0fffc04 	addi	r3,fp,-16
 804abec:	180b883a 	mov	r5,r3
 804abf0:	1009883a 	mov	r4,r2
 804abf4:	8043a540 	call	8043a54 <iproute>
 804abf8:	e0bffd15 	stw	r2,-12(fp)
      if (!npnet)
 804abfc:	e0bffd17 	ldw	r2,-12(fp)
 804ac00:	1000021e 	bne	r2,zero,804ac0c <in_pcbconnect+0x108>
         return EADDRNOTAVAIL;
 804ac04:	00801f44 	movi	r2,125
 804ac08:	00003106 	br	804acd0 <in_pcbconnect+0x1cc>
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
 804ac0c:	e0bffd17 	ldw	r2,-12(fp)
 804ac10:	10800a17 	ldw	r2,40(r2)
 804ac14:	e0bfff15 	stw	r2,-4(fp)
 804ac18:	00000306 	br	804ac28 <in_pcbconnect+0x124>
#else    /* not netport MULTI_HOMED, use 0th (only) iface */
      ifaddr = nets[0]->n_ipaddr;
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */
 804ac1c:	e0bffb17 	ldw	r2,-20(fp)
 804ac20:	10800417 	ldw	r2,16(r2)
 804ac24:	e0bfff15 	stw	r2,-4(fp)

   if (in_pcblookup(inp->inp_head,
 804ac28:	e0bffb17 	ldw	r2,-20(fp)
 804ac2c:	10c00217 	ldw	r3,8(r2)
 804ac30:	e0bffe17 	ldw	r2,-8(fp)
 804ac34:	11000117 	ldw	r4,4(r2)
       sin->sin_addr.s_addr,
       sin->sin_port,
 804ac38:	e0bffe17 	ldw	r2,-8(fp)
 804ac3c:	1080008b 	ldhu	r2,2(r2)
   if (in_pcblookup(inp->inp_head,
 804ac40:	117fffcc 	andi	r5,r2,65535
       ifaddr,
       inp->inp_lport,
 804ac44:	e0bffb17 	ldw	r2,-20(fp)
 804ac48:	1080078b 	ldhu	r2,30(r2)
   if (in_pcblookup(inp->inp_head,
 804ac4c:	10bfffcc 	andi	r2,r2,65535
 804ac50:	d8000115 	stw	zero,4(sp)
 804ac54:	d8800015 	stw	r2,0(sp)
 804ac58:	e1ffff17 	ldw	r7,-4(fp)
 804ac5c:	280d883a 	mov	r6,r5
 804ac60:	200b883a 	mov	r5,r4
 804ac64:	1809883a 	mov	r4,r3
 804ac68:	804ae480 	call	804ae48 <in_pcblookup>
 804ac6c:	10000226 	beq	r2,zero,804ac78 <in_pcbconnect+0x174>
       0))
   {
      return (EADDRINUSE);
 804ac70:	00801c04 	movi	r2,112
 804ac74:	00001606 	br	804acd0 <in_pcbconnect+0x1cc>
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 804ac78:	e0bffb17 	ldw	r2,-20(fp)
 804ac7c:	10800417 	ldw	r2,16(r2)
 804ac80:	10000a1e 	bne	r2,zero,804acac <in_pcbconnect+0x1a8>
   {
      if (inp->inp_lport == 0)
 804ac84:	e0bffb17 	ldw	r2,-20(fp)
 804ac88:	1080078b 	ldhu	r2,30(r2)
 804ac8c:	10bfffcc 	andi	r2,r2,65535
 804ac90:	1000031e 	bne	r2,zero,804aca0 <in_pcbconnect+0x19c>
         (void)in_pcbbind(inp, (struct mbuf *)0);
 804ac94:	000b883a 	mov	r5,zero
 804ac98:	e13ffb17 	ldw	r4,-20(fp)
 804ac9c:	804a8f40 	call	804a8f4 <in_pcbbind>
      inp->inp_laddr.s_addr = ifaddr;
 804aca0:	e0bffb17 	ldw	r2,-20(fp)
 804aca4:	e0ffff17 	ldw	r3,-4(fp)
 804aca8:	10c00415 	stw	r3,16(r2)
   }
   inp->inp_faddr = sin->sin_addr;
 804acac:	e0bffb17 	ldw	r2,-20(fp)
 804acb0:	e0fffe17 	ldw	r3,-8(fp)
 804acb4:	18c00117 	ldw	r3,4(r3)
 804acb8:	10c00315 	stw	r3,12(r2)
   inp->inp_fport = sin->sin_port;
 804acbc:	e0bffe17 	ldw	r2,-8(fp)
 804acc0:	10c0008b 	ldhu	r3,2(r2)
 804acc4:	e0bffb17 	ldw	r2,-20(fp)
 804acc8:	10c0070d 	sth	r3,28(r2)
   return 0;
 804accc:	0005883a 	mov	r2,zero
}
 804acd0:	e037883a 	mov	sp,fp
 804acd4:	dfc00117 	ldw	ra,4(sp)
 804acd8:	df000017 	ldw	fp,0(sp)
 804acdc:	dec00204 	addi	sp,sp,8
 804ace0:	f800283a 	ret

0804ace4 <in_pcbdisconnect>:
 * RETURNS: 
 */

void
in_pcbdisconnect(struct inpcb * inp)
{
 804ace4:	defffd04 	addi	sp,sp,-12
 804ace8:	dfc00215 	stw	ra,8(sp)
 804acec:	df000115 	stw	fp,4(sp)
 804acf0:	df000104 	addi	fp,sp,4
 804acf4:	e13fff15 	stw	r4,-4(fp)

   inp->inp_faddr.s_addr = INADDR_ANY;
 804acf8:	e0bfff17 	ldw	r2,-4(fp)
 804acfc:	10000315 	stw	zero,12(r2)
   inp->inp_fport = 0;
 804ad00:	e0bfff17 	ldw	r2,-4(fp)
 804ad04:	1000070d 	sth	zero,28(r2)
   if (inp->inp_socket->so_state & SS_NOFDREF)
 804ad08:	e0bfff17 	ldw	r2,-4(fp)
 804ad0c:	10800817 	ldw	r2,32(r2)
 804ad10:	1080088b 	ldhu	r2,34(r2)
 804ad14:	10bfffcc 	andi	r2,r2,65535
 804ad18:	1080004c 	andi	r2,r2,1
 804ad1c:	10000226 	beq	r2,zero,804ad28 <in_pcbdisconnect+0x44>
      in_pcbdetach (inp);
 804ad20:	e13fff17 	ldw	r4,-4(fp)
 804ad24:	804a89c0 	call	804a89c <in_pcbdetach>
}
 804ad28:	0001883a 	nop
 804ad2c:	e037883a 	mov	sp,fp
 804ad30:	dfc00117 	ldw	ra,4(sp)
 804ad34:	df000017 	ldw	fp,0(sp)
 804ad38:	dec00204 	addi	sp,sp,8
 804ad3c:	f800283a 	ret

0804ad40 <in_setsockaddr>:
 */

void
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
 804ad40:	defffb04 	addi	sp,sp,-20
 804ad44:	dfc00415 	stw	ra,16(sp)
 804ad48:	df000315 	stw	fp,12(sp)
 804ad4c:	df000304 	addi	fp,sp,12
 804ad50:	e13ffe15 	stw	r4,-8(fp)
 804ad54:	e17ffd15 	stw	r5,-12(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 804ad58:	e0bffd17 	ldw	r2,-12(fp)
 804ad5c:	00c00404 	movi	r3,16
 804ad60:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
 804ad64:	e0bffd17 	ldw	r2,-12(fp)
 804ad68:	10800317 	ldw	r2,12(r2)
 804ad6c:	e0bfff15 	stw	r2,-4(fp)
   MEMSET(sin, 0, sizeof (*sin));
 804ad70:	01800404 	movi	r6,16
 804ad74:	000b883a 	mov	r5,zero
 804ad78:	e13fff17 	ldw	r4,-4(fp)
 804ad7c:	80038cc0 	call	80038cc <memset>
   sin->sin_family = AF_INET;
 804ad80:	e0bfff17 	ldw	r2,-4(fp)
 804ad84:	00c00084 	movi	r3,2
 804ad88:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_lport;
 804ad8c:	e0bffe17 	ldw	r2,-8(fp)
 804ad90:	10c0078b 	ldhu	r3,30(r2)
 804ad94:	e0bfff17 	ldw	r2,-4(fp)
 804ad98:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_laddr;
 804ad9c:	e0bfff17 	ldw	r2,-4(fp)
 804ada0:	e0fffe17 	ldw	r3,-8(fp)
 804ada4:	18c00417 	ldw	r3,16(r3)
 804ada8:	10c00115 	stw	r3,4(r2)
}
 804adac:	0001883a 	nop
 804adb0:	e037883a 	mov	sp,fp
 804adb4:	dfc00117 	ldw	ra,4(sp)
 804adb8:	df000017 	ldw	fp,0(sp)
 804adbc:	dec00204 	addi	sp,sp,8
 804adc0:	f800283a 	ret

0804adc4 <in_setpeeraddr>:

void
in_setpeeraddr(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 804adc4:	defffb04 	addi	sp,sp,-20
 804adc8:	dfc00415 	stw	ra,16(sp)
 804adcc:	df000315 	stw	fp,12(sp)
 804add0:	df000304 	addi	fp,sp,12
 804add4:	e13ffe15 	stw	r4,-8(fp)
 804add8:	e17ffd15 	stw	r5,-12(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 804addc:	e0bffd17 	ldw	r2,-12(fp)
 804ade0:	00c00404 	movi	r3,16
 804ade4:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
 804ade8:	e0bffd17 	ldw	r2,-12(fp)
 804adec:	10800317 	ldw	r2,12(r2)
 804adf0:	e0bfff15 	stw	r2,-4(fp)
   MEMSET(sin, 0, sizeof (*sin));
 804adf4:	01800404 	movi	r6,16
 804adf8:	000b883a 	mov	r5,zero
 804adfc:	e13fff17 	ldw	r4,-4(fp)
 804ae00:	80038cc0 	call	80038cc <memset>
   sin->sin_family = AF_INET;
 804ae04:	e0bfff17 	ldw	r2,-4(fp)
 804ae08:	00c00084 	movi	r3,2
 804ae0c:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_fport;
 804ae10:	e0bffe17 	ldw	r2,-8(fp)
 804ae14:	10c0070b 	ldhu	r3,28(r2)
 804ae18:	e0bfff17 	ldw	r2,-4(fp)
 804ae1c:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_faddr;
 804ae20:	e0bfff17 	ldw	r2,-4(fp)
 804ae24:	e0fffe17 	ldw	r3,-8(fp)
 804ae28:	18c00317 	ldw	r3,12(r3)
 804ae2c:	10c00115 	stw	r3,4(r2)
}
 804ae30:	0001883a 	nop
 804ae34:	e037883a 	mov	sp,fp
 804ae38:	dfc00117 	ldw	ra,4(sp)
 804ae3c:	df000017 	ldw	fp,0(sp)
 804ae40:	dec00204 	addi	sp,sp,8
 804ae44:	f800283a 	ret

0804ae48 <in_pcblookup>:
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
 804ae48:	defff504 	addi	sp,sp,-44
 804ae4c:	df000a15 	stw	fp,40(sp)
 804ae50:	df000a04 	addi	fp,sp,40
 804ae54:	e13ffa15 	stw	r4,-24(fp)
 804ae58:	e17ff915 	stw	r5,-28(fp)
 804ae5c:	3007883a 	mov	r3,r6
 804ae60:	e1fff715 	stw	r7,-36(fp)
 804ae64:	e0800117 	ldw	r2,4(fp)
 804ae68:	e0fff80d 	sth	r3,-32(fp)
 804ae6c:	e0bff60d 	sth	r2,-40(fp)
   struct inpcb * inp, *   match =  0;
 804ae70:	e03ffe15 	stw	zero,-8(fp)
   unshort  fport =  xfport; 
 804ae74:	e0bff80b 	ldhu	r2,-32(fp)
 804ae78:	e0bffb8d 	sth	r2,-18(fp)
   unshort  lport =  xlport;
 804ae7c:	e0bff60b 	ldhu	r2,-40(fp)
 804ae80:	e0bffb0d 	sth	r2,-20(fp)
   int   matchwild   =  3;
 804ae84:	008000c4 	movi	r2,3
 804ae88:	e0bffd15 	stw	r2,-12(fp)
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 804ae8c:	e0bffa17 	ldw	r2,-24(fp)
 804ae90:	10800017 	ldw	r2,0(r2)
 804ae94:	e0bfff15 	stw	r2,-4(fp)
 804ae98:	00004f06 	br	804afd8 <in_pcblookup+0x190>
   {
      if (inp->inp_lport != lport)
 804ae9c:	e0bfff17 	ldw	r2,-4(fp)
 804aea0:	1080078b 	ldhu	r2,30(r2)
 804aea4:	e0fffb0b 	ldhu	r3,-20(fp)
 804aea8:	10bfffcc 	andi	r2,r2,65535
 804aeac:	1880401e 	bne	r3,r2,804afb0 <in_pcblookup+0x168>
         continue;

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
 804aeb0:	e0bfff17 	ldw	r2,-4(fp)
 804aeb4:	10800817 	ldw	r2,32(r2)
 804aeb8:	10800517 	ldw	r2,20(r2)
 804aebc:	108000a0 	cmpeqi	r2,r2,2
 804aec0:	10003d26 	beq	r2,zero,804afb8 <in_pcblookup+0x170>
         continue;

      wildcard = 0;
 804aec4:	e03ffc15 	stw	zero,-16(fp)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
 804aec8:	e0bfff17 	ldw	r2,-4(fp)
 804aecc:	10800417 	ldw	r2,16(r2)
 804aed0:	10000b26 	beq	r2,zero,804af00 <in_pcblookup+0xb8>
      {
         if (laddr == INADDR_ANY)
 804aed4:	e0bff717 	ldw	r2,-36(fp)
 804aed8:	1000041e 	bne	r2,zero,804aeec <in_pcblookup+0xa4>
            wildcard++;
 804aedc:	e0bffc17 	ldw	r2,-16(fp)
 804aee0:	10800044 	addi	r2,r2,1
 804aee4:	e0bffc15 	stw	r2,-16(fp)
 804aee8:	00000a06 	br	804af14 <in_pcblookup+0xcc>
         else if (inp->inp_laddr.s_addr != laddr)
 804aeec:	e0bfff17 	ldw	r2,-4(fp)
 804aef0:	10800417 	ldw	r2,16(r2)
 804aef4:	e0fff717 	ldw	r3,-36(fp)
 804aef8:	18800626 	beq	r3,r2,804af14 <in_pcblookup+0xcc>
            continue;
 804aefc:	00003306 	br	804afcc <in_pcblookup+0x184>
      }
      else 
      {
         if (laddr != INADDR_ANY)
 804af00:	e0bff717 	ldw	r2,-36(fp)
 804af04:	10000326 	beq	r2,zero,804af14 <in_pcblookup+0xcc>
            wildcard++;
 804af08:	e0bffc17 	ldw	r2,-16(fp)
 804af0c:	10800044 	addi	r2,r2,1
 804af10:	e0bffc15 	stw	r2,-16(fp)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 804af14:	e0bfff17 	ldw	r2,-4(fp)
 804af18:	10800317 	ldw	r2,12(r2)
 804af1c:	10001026 	beq	r2,zero,804af60 <in_pcblookup+0x118>
      {
         if (faddr == INADDR_ANY)
 804af20:	e0bff917 	ldw	r2,-28(fp)
 804af24:	1000041e 	bne	r2,zero,804af38 <in_pcblookup+0xf0>
            wildcard++;
 804af28:	e0bffc17 	ldw	r2,-16(fp)
 804af2c:	10800044 	addi	r2,r2,1
 804af30:	e0bffc15 	stw	r2,-16(fp)
 804af34:	00000f06 	br	804af74 <in_pcblookup+0x12c>
         else if (inp->inp_faddr.s_addr != faddr ||
 804af38:	e0bfff17 	ldw	r2,-4(fp)
 804af3c:	10800317 	ldw	r2,12(r2)
 804af40:	e0fff917 	ldw	r3,-28(fp)
 804af44:	18801e1e 	bne	r3,r2,804afc0 <in_pcblookup+0x178>
             inp->inp_fport != fport)
 804af48:	e0bfff17 	ldw	r2,-4(fp)
 804af4c:	1080070b 	ldhu	r2,28(r2)
         else if (inp->inp_faddr.s_addr != faddr ||
 804af50:	e0fffb8b 	ldhu	r3,-18(fp)
 804af54:	10bfffcc 	andi	r2,r2,65535
 804af58:	18800626 	beq	r3,r2,804af74 <in_pcblookup+0x12c>
         {
            continue;
 804af5c:	00001806 	br	804afc0 <in_pcblookup+0x178>
         }
      } else 
      {
         if (faddr != INADDR_ANY)
 804af60:	e0bff917 	ldw	r2,-28(fp)
 804af64:	10000326 	beq	r2,zero,804af74 <in_pcblookup+0x12c>
            wildcard++;
 804af68:	e0bffc17 	ldw	r2,-16(fp)
 804af6c:	10800044 	addi	r2,r2,1
 804af70:	e0bffc15 	stw	r2,-16(fp)
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 804af74:	e0bffc17 	ldw	r2,-16(fp)
 804af78:	10000326 	beq	r2,zero,804af88 <in_pcblookup+0x140>
 804af7c:	e0800217 	ldw	r2,8(fp)
 804af80:	1080004c 	andi	r2,r2,1
 804af84:	10001026 	beq	r2,zero,804afc8 <in_pcblookup+0x180>
         continue;
      if (wildcard < matchwild) 
 804af88:	e0fffc17 	ldw	r3,-16(fp)
 804af8c:	e0bffd17 	ldw	r2,-12(fp)
 804af90:	18800e0e 	bge	r3,r2,804afcc <in_pcblookup+0x184>
      {
         match = inp;
 804af94:	e0bfff17 	ldw	r2,-4(fp)
 804af98:	e0bffe15 	stw	r2,-8(fp)
         matchwild = wildcard;
 804af9c:	e0bffc17 	ldw	r2,-16(fp)
 804afa0:	e0bffd15 	stw	r2,-12(fp)
         if (matchwild == 0)
 804afa4:	e0bffd17 	ldw	r2,-12(fp)
 804afa8:	10000f26 	beq	r2,zero,804afe8 <in_pcblookup+0x1a0>
 804afac:	00000706 	br	804afcc <in_pcblookup+0x184>
         continue;
 804afb0:	0001883a 	nop
 804afb4:	00000506 	br	804afcc <in_pcblookup+0x184>
         continue;
 804afb8:	0001883a 	nop
 804afbc:	00000306 	br	804afcc <in_pcblookup+0x184>
            continue;
 804afc0:	0001883a 	nop
 804afc4:	00000106 	br	804afcc <in_pcblookup+0x184>
         continue;
 804afc8:	0001883a 	nop
   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 804afcc:	e0bfff17 	ldw	r2,-4(fp)
 804afd0:	10800017 	ldw	r2,0(r2)
 804afd4:	e0bfff15 	stw	r2,-4(fp)
 804afd8:	e0ffff17 	ldw	r3,-4(fp)
 804afdc:	e0bffa17 	ldw	r2,-24(fp)
 804afe0:	18bfae1e 	bne	r3,r2,804ae9c <in_pcblookup+0x54>
 804afe4:	00000106 	br	804afec <in_pcblookup+0x1a4>
            break;
 804afe8:	0001883a 	nop
      }
   }
   if (match == NULL)
 804afec:	e0bffe17 	ldw	r2,-8(fp)
 804aff0:	1000021e 	bne	r2,zero,804affc <in_pcblookup+0x1b4>
      return match;
 804aff4:	e0bffe17 	ldw	r2,-8(fp)
 804aff8:	00002406 	br	804b08c <in_pcblookup+0x244>

   if (head->inp_next == match)  /* got cache hit? */
 804affc:	e0bffa17 	ldw	r2,-24(fp)
 804b000:	10800017 	ldw	r2,0(r2)
 804b004:	e0fffe17 	ldw	r3,-8(fp)
 804b008:	1880041e 	bne	r3,r2,804b01c <in_pcblookup+0x1d4>
   {
      inpcb_cachehits++;
 804b00c:	d0a0cd17 	ldw	r2,-31948(gp)
 804b010:	10800044 	addi	r2,r2,1
 804b014:	d0a0cd15 	stw	r2,-31948(gp)
 804b018:	00001b06 	br	804b088 <in_pcblookup+0x240>
   }
   else
   {
      inpcb_cachemiss++;
 804b01c:	d0a0ce17 	ldw	r2,-31944(gp)
 804b020:	10800044 	addi	r2,r2,1
 804b024:	d0a0ce15 	stw	r2,-31944(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
 804b028:	e0bffe17 	ldw	r2,-8(fp)
 804b02c:	10800017 	ldw	r2,0(r2)
 804b030:	e0fffe17 	ldw	r3,-8(fp)
 804b034:	18c00117 	ldw	r3,4(r3)
 804b038:	10c00115 	stw	r3,4(r2)
      match->inp_prev->inp_next = match->inp_next;
 804b03c:	e0bffe17 	ldw	r2,-8(fp)
 804b040:	10800117 	ldw	r2,4(r2)
 804b044:	e0fffe17 	ldw	r3,-8(fp)
 804b048:	18c00017 	ldw	r3,0(r3)
 804b04c:	10c00015 	stw	r3,0(r2)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
 804b050:	e0bffa17 	ldw	r2,-24(fp)
 804b054:	10c00017 	ldw	r3,0(r2)
 804b058:	e0bffe17 	ldw	r2,-8(fp)
 804b05c:	10c00015 	stw	r3,0(r2)
      head->inp_next = match;
 804b060:	e0bffa17 	ldw	r2,-24(fp)
 804b064:	e0fffe17 	ldw	r3,-8(fp)
 804b068:	10c00015 	stw	r3,0(r2)
      match->inp_prev = head;
 804b06c:	e0bffe17 	ldw	r2,-8(fp)
 804b070:	e0fffa17 	ldw	r3,-24(fp)
 804b074:	10c00115 	stw	r3,4(r2)
      match->inp_next->inp_prev = match;
 804b078:	e0bffe17 	ldw	r2,-8(fp)
 804b07c:	10800017 	ldw	r2,0(r2)
 804b080:	e0fffe17 	ldw	r3,-8(fp)
 804b084:	10c00115 	stw	r3,4(r2)
   }
   return (match);
 804b088:	e0bffe17 	ldw	r2,-8(fp)
}
 804b08c:	e037883a 	mov	sp,fp
 804b090:	df000017 	ldw	fp,0(sp)
 804b094:	dec00104 	addi	sp,sp,4
 804b098:	f800283a 	ret

0804b09c <set_vfopen_error>:
 *
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
 804b09c:	defffe04 	addi	sp,sp,-8
 804b0a0:	df000115 	stw	fp,4(sp)
 804b0a4:	df000104 	addi	fp,sp,4
 804b0a8:	e13fff15 	stw	r4,-4(fp)
   vfopen_error = error;
 804b0ac:	e0bfff17 	ldw	r2,-4(fp)
 804b0b0:	d0a0d215 	stw	r2,-31928(gp)
}
 804b0b4:	0001883a 	nop
 804b0b8:	e037883a 	mov	sp,fp
 804b0bc:	df000017 	ldw	fp,0(sp)
 804b0c0:	dec00104 	addi	sp,sp,4
 804b0c4:	f800283a 	ret

0804b0c8 <get_vfopen_error>:
 *
 * RETURNS: 
 */

int get_vfopen_error()
{
 804b0c8:	deffff04 	addi	sp,sp,-4
 804b0cc:	df000015 	stw	fp,0(sp)
 804b0d0:	d839883a 	mov	fp,sp
   return vfopen_error;
 804b0d4:	d0a0d217 	ldw	r2,-31928(gp)
}
 804b0d8:	e037883a 	mov	sp,fp
 804b0dc:	df000017 	ldw	fp,0(sp)
 804b0e0:	dec00104 	addi	sp,sp,4
 804b0e4:	f800283a 	ret

0804b0e8 <vf_alloc_and_link_vop>:
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
 804b0e8:	defffd04 	addi	sp,sp,-12
 804b0ec:	dfc00215 	stw	ra,8(sp)
 804b0f0:	df000115 	stw	fp,4(sp)
 804b0f4:	df000104 	addi	fp,sp,4
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 804b0f8:	d0a0d417 	ldw	r2,-31920(gp)
 804b0fc:	10803ff0 	cmpltui	r2,r2,255
 804b100:	1000021e 	bne	r2,zero,804b10c <vf_alloc_and_link_vop+0x24>
   {
#ifdef VFS_VERBOSE
      dprintf("vfs_open_files too big (%ld) in vf_alloc_and_link_vop()\n",
       vfs_open_files);
#endif   /* VFS_VERBOSE */
      return NULL;
 804b104:	0005883a 	mov	r2,zero
 804b108:	00000e06 	br	804b144 <vf_alloc_and_link_vop+0x5c>
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
 804b10c:	01000504 	movi	r4,20
 804b110:	8030d080 	call	8030d08 <npalloc>
 804b114:	e0bfff15 	stw	r2,-4(fp)

   /* if the allocation succeeded */
   if (vop)
 804b118:	e0bfff17 	ldw	r2,-4(fp)
 804b11c:	10000826 	beq	r2,zero,804b140 <vf_alloc_and_link_vop+0x58>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
 804b120:	d0e0d017 	ldw	r3,-31936(gp)
 804b124:	e0bfff17 	ldw	r2,-4(fp)
 804b128:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
 804b12c:	e0bfff17 	ldw	r2,-4(fp)
 804b130:	d0a0d015 	stw	r2,-31936(gp)
      /* increment the count of open files */
      vfs_open_files++;
 804b134:	d0a0d417 	ldw	r2,-31920(gp)
 804b138:	10800044 	addi	r2,r2,1
 804b13c:	d0a0d415 	stw	r2,-31920(gp)
#ifdef VFS_VERBOSE
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
 804b140:	e0bfff17 	ldw	r2,-4(fp)
}
 804b144:	e037883a 	mov	sp,fp
 804b148:	dfc00117 	ldw	ra,4(sp)
 804b14c:	df000017 	ldw	fp,0(sp)
 804b150:	dec00204 	addi	sp,sp,8
 804b154:	f800283a 	ret

0804b158 <vf_alloc_buffer>:
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
 804b158:	defff904 	addi	sp,sp,-28
 804b15c:	dfc00615 	stw	ra,24(sp)
 804b160:	df000515 	stw	fp,20(sp)
 804b164:	df000504 	addi	fp,sp,20
 804b168:	e13ffb15 	stw	r4,-20(fp)
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 804b16c:	d0e0d517 	ldw	r3,-31916(gp)
 804b170:	e0bffb17 	ldw	r2,-20(fp)
 804b174:	1885883a 	add	r2,r3,r2
 804b178:	00ffffd4 	movui	r3,65535
 804b17c:	1880022e 	bgeu	r3,r2,804b188 <vf_alloc_buffer+0x30>
      return NULL;
 804b180:	0005883a 	mov	r2,zero
 804b184:	00002106 	br	804b20c <vf_alloc_buffer+0xb4>
    * any bigger than what will fit in an unsigned int 
    */
#ifdef MUTE_WARNS
   /* the idiotic hoops you got to jump through to suppress compiler
      warnings */
   long_size   =  sizeof(unsigned   long);
 804b188:	00800104 	movi	r2,4
 804b18c:	e0bfff15 	stw	r2,-4(fp)
   int_size = sizeof(unsigned int);
 804b190:	00800104 	movi	r2,4
 804b194:	e0bffe15 	stw	r2,-8(fp)
   if (long_size > int_size)
 804b198:	e0bfff17 	ldw	r2,-4(fp)
 804b19c:	e0fffe17 	ldw	r3,-8(fp)
 804b1a0:	1880102e 	bgeu	r3,r2,804b1e4 <vf_alloc_buffer+0x8c>
       * most systems where this "if" expression will evaluate to 
       * true (2 byte ints, 4 byte longs). if any of those upper bits 
       * are on in your requested size, you otta luck.
       */
#ifdef MUTE_WARNS
      switch (int_size)
 804b1a4:	e0bffe17 	ldw	r2,-8(fp)
 804b1a8:	10800098 	cmpnei	r2,r2,2
 804b1ac:	1000081e 	bne	r2,zero,804b1d0 <vf_alloc_buffer+0x78>
#else
      switch (sizeof(unsigned int))
#endif   /* MUTE_WARNS */
      {
      case 2 :
         mem_mask = 0xffff0000;
 804b1b0:	00bffff4 	movhi	r2,65535
 804b1b4:	e0bffd15 	stw	r2,-12(fp)
         break;
 804b1b8:	0001883a 	nop
         default :
            dtrap();    /* you have a weird compiler */
         return NULL;
      }

      if (size & mem_mask)
 804b1bc:	e0fffb17 	ldw	r3,-20(fp)
 804b1c0:	e0bffd17 	ldw	r2,-12(fp)
 804b1c4:	1884703a 	and	r2,r3,r2
 804b1c8:	10000626 	beq	r2,zero,804b1e4 <vf_alloc_buffer+0x8c>
 804b1cc:	00000306 	br	804b1dc <vf_alloc_buffer+0x84>
            dtrap();    /* you have a weird compiler */
 804b1d0:	80301a80 	call	80301a8 <dtrap>
         return NULL;
 804b1d4:	0005883a 	mov	r2,zero
 804b1d8:	00000c06 	br	804b20c <vf_alloc_buffer+0xb4>
         return NULL;
 804b1dc:	0005883a 	mov	r2,zero
 804b1e0:	00000a06 	br	804b20c <vf_alloc_buffer+0xb4>
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
 804b1e4:	e13ffb17 	ldw	r4,-20(fp)
 804b1e8:	8030d080 	call	8030d08 <npalloc>
 804b1ec:	e0bffc15 	stw	r2,-16(fp)

   /* if the allocation succeeded */
   if (buffer)
 804b1f0:	e0bffc17 	ldw	r2,-16(fp)
 804b1f4:	10000426 	beq	r2,zero,804b208 <vf_alloc_buffer+0xb0>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
 804b1f8:	d0e0d517 	ldw	r3,-31916(gp)
 804b1fc:	e0bffb17 	ldw	r2,-20(fp)
 804b200:	1885883a 	add	r2,r3,r2
 804b204:	d0a0d515 	stw	r2,-31916(gp)
   }

   return buffer;
 804b208:	e0bffc17 	ldw	r2,-16(fp)
}
 804b20c:	e037883a 	mov	sp,fp
 804b210:	dfc00117 	ldw	ra,4(sp)
 804b214:	df000017 	ldw	fp,0(sp)
 804b218:	dec00204 	addi	sp,sp,8
 804b21c:	f800283a 	ret

0804b220 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
 804b220:	defffc04 	addi	sp,sp,-16
 804b224:	dfc00315 	stw	ra,12(sp)
 804b228:	df000215 	stw	fp,8(sp)
 804b22c:	df000204 	addi	fp,sp,8
 804b230:	e13fff15 	stw	r4,-4(fp)
 804b234:	e17ffe15 	stw	r5,-8(fp)
   /* free the buffer */
   if (buffer)
 804b238:	e0bfff17 	ldw	r2,-4(fp)
 804b23c:	10000226 	beq	r2,zero,804b248 <vf_free_buffer+0x28>
      npfree(buffer);
 804b240:	e13fff17 	ldw	r4,-4(fp)
 804b244:	8030d3c0 	call	8030d3c <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
 804b248:	d0e0d517 	ldw	r3,-31916(gp)
 804b24c:	e0bffe17 	ldw	r2,-8(fp)
 804b250:	1885c83a 	sub	r2,r3,r2
 804b254:	d0a0d515 	stw	r2,-31916(gp)
}
 804b258:	0001883a 	nop
 804b25c:	e037883a 	mov	sp,fp
 804b260:	dfc00117 	ldw	ra,4(sp)
 804b264:	df000017 	ldw	fp,0(sp)
 804b268:	dec00204 	addi	sp,sp,8
 804b26c:	f800283a 	ret

0804b270 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
 804b270:	defff904 	addi	sp,sp,-28
 804b274:	dfc00615 	stw	ra,24(sp)
 804b278:	df000515 	stw	fp,20(sp)
 804b27c:	df000504 	addi	fp,sp,20
 804b280:	e13ffc15 	stw	r4,-16(fp)
 804b284:	e17ffb15 	stw	r5,-20(fp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
 804b288:	0009883a 	mov	r4,zero
 804b28c:	804b09c0 	call	804b09c <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
 804b290:	01400fc4 	movi	r5,63
 804b294:	e13ffc17 	ldw	r4,-16(fp)
 804b298:	804e0a40 	call	804e0a4 <strchr>
 804b29c:	10000326 	beq	r2,zero,804b2ac <vfopen_locked+0x3c>
   {
      dtrap();
 804b2a0:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 804b2a4:	0005883a 	mov	r2,zero
 804b2a8:	0000ba06 	br	804b594 <vfopen_locked+0x324>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
 804b2ac:	e13ffc17 	ldw	r4,-16(fp)
 804b2b0:	804c5000 	call	804c500 <vfslookup_locked>
 804b2b4:	e0bffe15 	stw	r2,-8(fp)

   /* if the file exists */
   if (vfp)
 804b2b8:	e0bffe17 	ldw	r2,-8(fp)
 804b2bc:	10004a26 	beq	r2,zero,804b3e8 <vfopen_locked+0x178>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
 804b2c0:	e0bffb17 	ldw	r2,-20(fp)
 804b2c4:	10800003 	ldbu	r2,0(r2)
 804b2c8:	10803fcc 	andi	r2,r2,255
 804b2cc:	1080201c 	xori	r2,r2,128
 804b2d0:	10bfe004 	addi	r2,r2,-128
 804b2d4:	10801dd8 	cmpnei	r2,r2,119
 804b2d8:	1000091e 	bne	r2,zero,804b300 <vfopen_locked+0x90>
 804b2dc:	e0bffe17 	ldw	r2,-8(fp)
 804b2e0:	1080058b 	ldhu	r2,22(r2)
 804b2e4:	10bfffcc 	andi	r2,r2,65535
 804b2e8:	1080080c 	andi	r2,r2,32
 804b2ec:	1000041e 	bne	r2,zero,804b300 <vfopen_locked+0x90>
      {
         set_vfopen_error(ENP_FILEIO);
 804b2f0:	013ff984 	movi	r4,-26
 804b2f4:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("mode w with no VF_WRITE\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b2f8:	0005883a 	mov	r2,zero
 804b2fc:	0000a506 	br	804b594 <vfopen_locked+0x324>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 804b300:	804b0e80 	call	804b0e8 <vf_alloc_and_link_vop>
 804b304:	e0bffd15 	stw	r2,-12(fp)

      /* check for failure */
      if (!vop)
 804b308:	e0bffd17 	ldw	r2,-12(fp)
 804b30c:	1000041e 	bne	r2,zero,804b320 <vfopen_locked+0xb0>
      {
         set_vfopen_error(ENP_NOMEM);
 804b310:	013ffb04 	movi	r4,-20
 804b314:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 1\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b318:	0005883a 	mov	r2,zero
 804b31c:	00009d06 	br	804b594 <vfopen_locked+0x324>
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
 804b320:	e0bffd17 	ldw	r2,-12(fp)
 804b324:	e0fffe17 	ldw	r3,-8(fp)
 804b328:	10c00115 	stw	r3,4(r2)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
 804b32c:	e0bffe17 	ldw	r2,-8(fp)
 804b330:	10c00617 	ldw	r3,24(r2)
 804b334:	e0bffd17 	ldw	r2,-12(fp)
 804b338:	10c00215 	stw	r3,8(r2)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
 804b33c:	e0bffb17 	ldw	r2,-20(fp)
 804b340:	10800003 	ldbu	r2,0(r2)
 804b344:	10803fcc 	andi	r2,r2,255
 804b348:	1080201c 	xori	r2,r2,128
 804b34c:	10bfe004 	addi	r2,r2,-128
 804b350:	10801858 	cmpnei	r2,r2,97
 804b354:	10000a1e 	bne	r2,zero,804b380 <vfopen_locked+0x110>
      {
         if (vfp->data)
 804b358:	e0bffe17 	ldw	r2,-8(fp)
 804b35c:	10800617 	ldw	r2,24(r2)
 804b360:	10000726 	beq	r2,zero,804b380 <vfopen_locked+0x110>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
 804b364:	e0bffe17 	ldw	r2,-8(fp)
 804b368:	10c00617 	ldw	r3,24(r2)
 804b36c:	e0bffe17 	ldw	r2,-8(fp)
 804b370:	10800817 	ldw	r2,32(r2)
 804b374:	1887883a 	add	r3,r3,r2
 804b378:	e0bffd17 	ldw	r2,-12(fp)
 804b37c:	10c00215 	stw	r3,8(r2)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
 804b380:	e0bffb17 	ldw	r2,-20(fp)
 804b384:	10800003 	ldbu	r2,0(r2)
 804b388:	10803fcc 	andi	r2,r2,255
 804b38c:	1080201c 	xori	r2,r2,128
 804b390:	10bfe004 	addi	r2,r2,-128
 804b394:	10801dd8 	cmpnei	r2,r2,119
 804b398:	1000111e 	bne	r2,zero,804b3e0 <vfopen_locked+0x170>
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
 804b39c:	e0bffe17 	ldw	r2,-8(fp)
 804b3a0:	10000715 	stw	zero,28(r2)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
 804b3a4:	e0bffe17 	ldw	r2,-8(fp)
 804b3a8:	10000815 	stw	zero,32(r2)
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
 804b3ac:	e0bffe17 	ldw	r2,-8(fp)
 804b3b0:	1080058b 	ldhu	r2,22(r2)
 804b3b4:	10808014 	ori	r2,r2,512
 804b3b8:	1007883a 	mov	r3,r2
 804b3bc:	e0bffe17 	ldw	r2,-8(fp)
 804b3c0:	10c0058d 	sth	r3,22(r2)

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
 804b3c4:	e0bffe17 	ldw	r2,-8(fp)
 804b3c8:	10c0058b 	ldhu	r3,22(r2)
 804b3cc:	00bfff84 	movi	r2,-2
 804b3d0:	1884703a 	and	r2,r3,r2
 804b3d4:	1007883a 	mov	r3,r2
 804b3d8:	e0bffe17 	ldw	r2,-8(fp)
 804b3dc:	10c0058d 	sth	r3,22(r2)
      }

#endif   /* HT_RWVFS */

      return vop;
 804b3e0:	e0bffd17 	ldw	r2,-12(fp)
 804b3e4:	00006b06 	br	804b594 <vfopen_locked+0x324>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 804b3e8:	e0bffb17 	ldw	r2,-20(fp)
 804b3ec:	10800003 	ldbu	r2,0(r2)
 804b3f0:	10803fcc 	andi	r2,r2,255
 804b3f4:	1080201c 	xori	r2,r2,128
 804b3f8:	10bfe004 	addi	r2,r2,-128
 804b3fc:	10801ca0 	cmpeqi	r2,r2,114
 804b400:	1000121e 	bne	r2,zero,804b44c <vfopen_locked+0x1dc>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
 804b404:	d0a0cf17 	ldw	r2,-31940(gp)
 804b408:	e0bfff15 	stw	r2,-4(fp)
 804b40c:	00000d06 	br	804b444 <vfopen_locked+0x1d4>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
 804b410:	e0bfff17 	ldw	r2,-4(fp)
 804b414:	10800117 	ldw	r2,4(r2)
 804b418:	e17ffb17 	ldw	r5,-20(fp)
 804b41c:	e13ffc17 	ldw	r4,-16(fp)
 804b420:	103ee83a 	callr	r2
 804b424:	e0bffd15 	stw	r2,-12(fp)
 804b428:	e0bffd17 	ldw	r2,-12(fp)
 804b42c:	10000226 	beq	r2,zero,804b438 <vfopen_locked+0x1c8>
         {
            return vop;
 804b430:	e0bffd17 	ldw	r2,-12(fp)
 804b434:	00005706 	br	804b594 <vfopen_locked+0x324>
      for (vfs = vfsystems; vfs; vfs = vfs->next)
 804b438:	e0bfff17 	ldw	r2,-4(fp)
 804b43c:	10800017 	ldw	r2,0(r2)
 804b440:	e0bfff15 	stw	r2,-4(fp)
 804b444:	e0bfff17 	ldw	r2,-4(fp)
 804b448:	103ff11e 	bne	r2,zero,804b410 <vfopen_locked+0x1a0>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 804b44c:	e0bffb17 	ldw	r2,-20(fp)
 804b450:	10800003 	ldbu	r2,0(r2)
 804b454:	10803fcc 	andi	r2,r2,255
 804b458:	1080201c 	xori	r2,r2,128
 804b45c:	10bfe004 	addi	r2,r2,-128
 804b460:	10801ca0 	cmpeqi	r2,r2,114
 804b464:	1000481e 	bne	r2,zero,804b588 <vfopen_locked+0x318>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
 804b468:	d0a0d617 	ldw	r2,-31912(gp)
 804b46c:	10803ff0 	cmpltui	r2,r2,255
 804b470:	1000041e 	bne	r2,zero,804b484 <vfopen_locked+0x214>
      {
         set_vfopen_error(ENP_NOMEM);
 804b474:	013ffb04 	movi	r4,-20
 804b478:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_total_dyna_files too big in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b47c:	0005883a 	mov	r2,zero
 804b480:	00004406 	br	804b594 <vfopen_locked+0x324>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
 804b484:	e13ffc17 	ldw	r4,-16(fp)
 804b488:	80044880 	call	8004488 <strlen>
 804b48c:	10800470 	cmpltui	r2,r2,17
 804b490:	1000041e 	bne	r2,zero,804b4a4 <vfopen_locked+0x234>
      {
         set_vfopen_error(ENP_PARAM);
 804b494:	013ffd84 	movi	r4,-10
 804b498:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("file name too long in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b49c:	0005883a 	mov	r2,zero
 804b4a0:	00003c06 	br	804b594 <vfopen_locked+0x324>
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
 804b4a4:	01000b04 	movi	r4,44
 804b4a8:	8030d080 	call	8030d08 <npalloc>
 804b4ac:	e0bffe15 	stw	r2,-8(fp)

      /* check for memory allocation failure */
      if (!vfp)
 804b4b0:	e0bffe17 	ldw	r2,-8(fp)
 804b4b4:	1000041e 	bne	r2,zero,804b4c8 <vfopen_locked+0x258>
      {
         set_vfopen_error(ENP_NOMEM);
 804b4b8:	013ffb04 	movi	r4,-20
 804b4bc:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("VFS_VFS_FILE_ALLOC() failed in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b4c0:	0005883a 	mov	r2,zero
 804b4c4:	00003306 	br	804b594 <vfopen_locked+0x324>
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 804b4c8:	804b0e80 	call	804b0e8 <vf_alloc_and_link_vop>
 804b4cc:	e0bffd15 	stw	r2,-12(fp)

      /* check for memory allocation failure */
      if (!vop)
 804b4d0:	e0bffd17 	ldw	r2,-12(fp)
 804b4d4:	1000061e 	bne	r2,zero,804b4f0 <vfopen_locked+0x280>
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
 804b4d8:	e13ffe17 	ldw	r4,-8(fp)
 804b4dc:	8030d3c0 	call	8030d3c <npfree>
         set_vfopen_error(ENP_NOMEM);
 804b4e0:	013ffb04 	movi	r4,-20
 804b4e4:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 2\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804b4e8:	0005883a 	mov	r2,zero
 804b4ec:	00002906 	br	804b594 <vfopen_locked+0x324>
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
 804b4f0:	d0e0d117 	ldw	r3,-31932(gp)
 804b4f4:	e0bffe17 	ldw	r2,-8(fp)
 804b4f8:	10c00015 	stw	r3,0(r2)
      vfsfiles = vfp;
 804b4fc:	e0bffe17 	ldw	r2,-8(fp)
 804b500:	d0a0d115 	stw	r2,-31932(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;
 804b504:	d0a0d617 	ldw	r2,-31912(gp)
 804b508:	10800044 	addi	r2,r2,1
 804b50c:	d0a0d615 	stw	r2,-31912(gp)

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
 804b510:	e0bffc17 	ldw	r2,-16(fp)
 804b514:	10800003 	ldbu	r2,0(r2)
 804b518:	10803fcc 	andi	r2,r2,255
 804b51c:	1080201c 	xori	r2,r2,128
 804b520:	10bfe004 	addi	r2,r2,-128
 804b524:	10800be0 	cmpeqi	r2,r2,47
 804b528:	1000071e 	bne	r2,zero,804b548 <vfopen_locked+0x2d8>
 804b52c:	e0bffc17 	ldw	r2,-16(fp)
 804b530:	10800003 	ldbu	r2,0(r2)
 804b534:	10803fcc 	andi	r2,r2,255
 804b538:	1080201c 	xori	r2,r2,128
 804b53c:	10bfe004 	addi	r2,r2,-128
 804b540:	10801718 	cmpnei	r2,r2,92
 804b544:	1000031e 	bne	r2,zero,804b554 <vfopen_locked+0x2e4>
         name++;
 804b548:	e0bffc17 	ldw	r2,-16(fp)
 804b54c:	10800044 	addi	r2,r2,1
 804b550:	e0bffc15 	stw	r2,-16(fp)

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
 804b554:	e0bffe17 	ldw	r2,-8(fp)
 804b558:	10800104 	addi	r2,r2,4
 804b55c:	e17ffc17 	ldw	r5,-16(fp)
 804b560:	1009883a 	mov	r4,r2
 804b564:	8003d700 	call	8003d70 <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
 804b568:	e0bffe17 	ldw	r2,-8(fp)
 804b56c:	00c0d804 	movi	r3,864
 804b570:	10c0058d 	sth	r3,22(r2)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
 804b574:	e0bffd17 	ldw	r2,-12(fp)
 804b578:	e0fffe17 	ldw	r3,-8(fp)
 804b57c:	10c00115 	stw	r3,4(r2)
      /* the cmploc and tag fields of the vop retain their NULLs from 
       * npalloc(). cmploc contains NULL because there is no data 
       * buffer to point to yet. tag contains NULL because no 
       * decompression operation has started yet
       */
      return vop;
 804b580:	e0bffd17 	ldw	r2,-12(fp)
 804b584:	00000306 	br	804b594 <vfopen_locked+0x324>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
 804b588:	013ff9c4 	movi	r4,-25
 804b58c:	804b09c0 	call	804b09c <set_vfopen_error>
#ifdef VFS_VERBOSE
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;
 804b590:	0005883a 	mov	r2,zero

#endif   /* HT_LOCALFS */
}
 804b594:	e037883a 	mov	sp,fp
 804b598:	dfc00117 	ldw	ra,4(sp)
 804b59c:	df000017 	ldw	fp,0(sp)
 804b5a0:	dec00204 	addi	sp,sp,8
 804b5a4:	f800283a 	ret

0804b5a8 <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 804b5a8:	defffb04 	addi	sp,sp,-20
 804b5ac:	dfc00415 	stw	ra,16(sp)
 804b5b0:	df000315 	stw	fp,12(sp)
 804b5b4:	df000304 	addi	fp,sp,12
 804b5b8:	e13ffe15 	stw	r4,-8(fp)
 804b5bc:	e17ffd15 	stw	r5,-12(fp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 804b5c0:	01000144 	movi	r4,5
 804b5c4:	80307900 	call	8030790 <wait_app_sem>

   vfd = vfopen_locked(name,mode);
 804b5c8:	e17ffd17 	ldw	r5,-12(fp)
 804b5cc:	e13ffe17 	ldw	r4,-8(fp)
 804b5d0:	804b2700 	call	804b270 <vfopen_locked>
 804b5d4:	e0bfff15 	stw	r2,-4(fp)

   vfs_unlock();
 804b5d8:	01000144 	movi	r4,5
 804b5dc:	80308440 	call	8030844 <post_app_sem>

   return vfd;
 804b5e0:	e0bfff17 	ldw	r2,-4(fp)
}
 804b5e4:	e037883a 	mov	sp,fp
 804b5e8:	dfc00117 	ldw	ra,4(sp)
 804b5ec:	df000017 	ldw	fp,0(sp)
 804b5f0:	dec00204 	addi	sp,sp,8
 804b5f4:	f800283a 	ret

0804b5f8 <vfclose_locked>:
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
 804b5f8:	defff804 	addi	sp,sp,-32
 804b5fc:	dfc00715 	stw	ra,28(sp)
 804b600:	df000615 	stw	fp,24(sp)
 804b604:	df000604 	addi	fp,sp,24
 804b608:	e13ffa15 	stw	r4,-24(fp)
   VFILE * vtmp;
   VFILE * vlast;

   vlast = NULL;
 804b60c:	e03ffe15 	stw	zero,-8(fp)

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
 804b610:	d0a0d017 	ldw	r2,-31936(gp)
 804b614:	e0bfff15 	stw	r2,-4(fp)
   while (vtmp)
 804b618:	00000806 	br	804b63c <vfclose_locked+0x44>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 804b61c:	e0fffa17 	ldw	r3,-24(fp)
 804b620:	e0bfff17 	ldw	r2,-4(fp)
 804b624:	18800826 	beq	r3,r2,804b648 <vfclose_locked+0x50>
         break;

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
 804b628:	e0bfff17 	ldw	r2,-4(fp)
 804b62c:	e0bffe15 	stw	r2,-8(fp)
      vtmp = vtmp->next;
 804b630:	e0bfff17 	ldw	r2,-4(fp)
 804b634:	10800017 	ldw	r2,0(r2)
 804b638:	e0bfff15 	stw	r2,-4(fp)
   while (vtmp)
 804b63c:	e0bfff17 	ldw	r2,-4(fp)
 804b640:	103ff61e 	bne	r2,zero,804b61c <vfclose_locked+0x24>
 804b644:	00000106 	br	804b64c <vfclose_locked+0x54>
         break;
 804b648:	0001883a 	nop
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
 804b64c:	e0fffa17 	ldw	r3,-24(fp)
 804b650:	e0bfff17 	ldw	r2,-4(fp)
 804b654:	1880501e 	bne	r3,r2,804b798 <vfclose_locked+0x1a0>

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
 804b658:	e0bffa17 	ldw	r2,-24(fp)
 804b65c:	10800117 	ldw	r2,4(r2)
 804b660:	e0bffd15 	stw	r2,-12(fp)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
 804b664:	e0bffd17 	ldw	r2,-12(fp)
 804b668:	10003826 	beq	r2,zero,804b74c <vfclose_locked+0x154>
         break;
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 804b66c:	e0bffd17 	ldw	r2,-12(fp)
 804b670:	10800a17 	ldw	r2,40(r2)
 804b674:	10000826 	beq	r2,zero,804b698 <vfclose_locked+0xa0>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);
 804b678:	e0bffd17 	ldw	r2,-12(fp)
 804b67c:	10800a17 	ldw	r2,40(r2)
 804b680:	e0bffb15 	stw	r2,-20(fp)

         vfs->r_fclose(vfd);
 804b684:	e0bffb17 	ldw	r2,-20(fp)
 804b688:	10800217 	ldw	r2,8(r2)
 804b68c:	e13ffa17 	ldw	r4,-24(fp)
 804b690:	103ee83a 	callr	r2
         break;   /* break to list deletion code after end of phoney loop */
 804b694:	00003006 	br	804b758 <vfclose_locked+0x160>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
 804b698:	e0bffd17 	ldw	r2,-12(fp)
 804b69c:	1080058b 	ldhu	r2,22(r2)
 804b6a0:	10bfffcc 	andi	r2,r2,65535
 804b6a4:	1080200c 	andi	r2,r2,128
 804b6a8:	10002a26 	beq	r2,zero,804b754 <vfclose_locked+0x15c>
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
 804b6ac:	e0bffd17 	ldw	r2,-12(fp)
 804b6b0:	10c00917 	ldw	r3,36(r2)
 804b6b4:	e0bffd17 	ldw	r2,-12(fp)
 804b6b8:	10800817 	ldw	r2,32(r2)
 804b6bc:	1885c83a 	sub	r2,r3,r2
      if ((vfp->flags & VF_DYNAMICDATA) &&
 804b6c0:	10804030 	cmpltui	r2,r2,256
 804b6c4:	1000231e 	bne	r2,zero,804b754 <vfclose_locked+0x15c>
          vfp->data) /* this last test is a sanity check */
 804b6c8:	e0bffd17 	ldw	r2,-12(fp)
 804b6cc:	10800617 	ldw	r2,24(r2)
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
 804b6d0:	10002026 	beq	r2,zero,804b754 <vfclose_locked+0x15c>
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
 804b6d4:	e0bffd17 	ldw	r2,-12(fp)
 804b6d8:	10800817 	ldw	r2,32(r2)
 804b6dc:	1009883a 	mov	r4,r2
 804b6e0:	804b1580 	call	804b158 <vf_alloc_buffer>
 804b6e4:	e0bffc15 	stw	r2,-16(fp)

         /* if the allocation worked */
         if (new_buffer)
 804b6e8:	e0bffc17 	ldw	r2,-16(fp)
 804b6ec:	10001926 	beq	r2,zero,804b754 <vfclose_locked+0x15c>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 804b6f0:	e0bffd17 	ldw	r2,-12(fp)
 804b6f4:	10c00617 	ldw	r3,24(r2)
 804b6f8:	e0bffd17 	ldw	r2,-12(fp)
 804b6fc:	10800817 	ldw	r2,32(r2)
 804b700:	100d883a 	mov	r6,r2
 804b704:	180b883a 	mov	r5,r3
 804b708:	e13ffc17 	ldw	r4,-16(fp)
 804b70c:	80037cc0 	call	80037cc <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
 804b710:	e0bffd17 	ldw	r2,-12(fp)
 804b714:	10c00617 	ldw	r3,24(r2)
 804b718:	e0bffd17 	ldw	r2,-12(fp)
 804b71c:	10800917 	ldw	r2,36(r2)
 804b720:	100b883a 	mov	r5,r2
 804b724:	1809883a 	mov	r4,r3
 804b728:	804b2200 	call	804b220 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
 804b72c:	e0bffd17 	ldw	r2,-12(fp)
 804b730:	e0fffc17 	ldw	r3,-16(fp)
 804b734:	10c00615 	stw	r3,24(r2)
            vfp->buf_size = vfp->comp_size;
 804b738:	e0bffd17 	ldw	r2,-12(fp)
 804b73c:	10c00817 	ldw	r3,32(r2)
 804b740:	e0bffd17 	ldw	r2,-12(fp)
 804b744:	10c00915 	stw	r3,36(r2)
#endif   /* VFS_AUTO_SYNC */

#endif   /* HT_RWVFS */

      /* break to list deletion code below */
      break;
 804b748:	00000206 	br	804b754 <vfclose_locked+0x15c>
         break;
 804b74c:	0001883a 	nop
 804b750:	00000106 	br	804b758 <vfclose_locked+0x160>
      break;
 804b754:	0001883a 	nop

   }

   if (vlast)  /* unlink from list of open files */
 804b758:	e0bffe17 	ldw	r2,-8(fp)
 804b75c:	10000526 	beq	r2,zero,804b774 <vfclose_locked+0x17c>
      vlast->next = vtmp->next;
 804b760:	e0bfff17 	ldw	r2,-4(fp)
 804b764:	10c00017 	ldw	r3,0(r2)
 804b768:	e0bffe17 	ldw	r2,-8(fp)
 804b76c:	10c00015 	stw	r3,0(r2)
 804b770:	00000306 	br	804b780 <vfclose_locked+0x188>
   else
      vfiles = vtmp->next;
 804b774:	e0bfff17 	ldw	r2,-4(fp)
 804b778:	10800017 	ldw	r2,0(r2)
 804b77c:	d0a0d015 	stw	r2,-31936(gp)

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
 804b780:	e13fff17 	ldw	r4,-4(fp)
 804b784:	8030d3c0 	call	8030d3c <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
 804b788:	d0a0d417 	ldw	r2,-31920(gp)
 804b78c:	10bfffc4 	addi	r2,r2,-1
 804b790:	d0a0d415 	stw	r2,-31920(gp)
   return;
 804b794:	00000106 	br	804b79c <vfclose_locked+0x1a4>
      return;
 804b798:	0001883a 	nop
}
 804b79c:	e037883a 	mov	sp,fp
 804b7a0:	dfc00117 	ldw	ra,4(sp)
 804b7a4:	df000017 	ldw	fp,0(sp)
 804b7a8:	dec00204 	addi	sp,sp,8
 804b7ac:	f800283a 	ret

0804b7b0 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 804b7b0:	defffd04 	addi	sp,sp,-12
 804b7b4:	dfc00215 	stw	ra,8(sp)
 804b7b8:	df000115 	stw	fp,4(sp)
 804b7bc:	df000104 	addi	fp,sp,4
 804b7c0:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 804b7c4:	01000144 	movi	r4,5
 804b7c8:	80307900 	call	8030790 <wait_app_sem>

   vfclose_locked(vfd);
 804b7cc:	e13fff17 	ldw	r4,-4(fp)
 804b7d0:	804b5f80 	call	804b5f8 <vfclose_locked>

   vfs_unlock();
 804b7d4:	01000144 	movi	r4,5
 804b7d8:	80308440 	call	8030844 <post_app_sem>
}
 804b7dc:	0001883a 	nop
 804b7e0:	e037883a 	mov	sp,fp
 804b7e4:	dfc00117 	ldw	ra,4(sp)
 804b7e8:	df000017 	ldw	fp,0(sp)
 804b7ec:	dec00204 	addi	sp,sp,8
 804b7f0:	f800283a 	ret

0804b7f4 <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
 804b7f4:	defffd04 	addi	sp,sp,-12
 804b7f8:	dfc00215 	stw	ra,8(sp)
 804b7fc:	df000115 	stw	fp,4(sp)
 804b800:	df000104 	addi	fp,sp,4
 804b804:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 804b808:	01000144 	movi	r4,5
 804b80c:	80307900 	call	8030790 <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
 804b810:	01020174 	movhi	r4,2053
 804b814:	21127c04 	addi	r4,r4,18928
 804b818:	8003ca80 	call	8003ca8 <puts>

   vfs_unlock();
 804b81c:	01000144 	movi	r4,5
 804b820:	80308440 	call	8030844 <post_app_sem>
   return(0);
 804b824:	0005883a 	mov	r2,zero
}
 804b828:	e037883a 	mov	sp,fp
 804b82c:	dfc00117 	ldw	ra,4(sp)
 804b830:	df000017 	ldw	fp,0(sp)
 804b834:	dec00204 	addi	sp,sp,8
 804b838:	f800283a 	ret

0804b83c <vfgets>:

char * vfgets(char * s, int lim, VFILE * fp) 
{
 804b83c:	defff904 	addi	sp,sp,-28
 804b840:	dfc00615 	stw	ra,24(sp)
 804b844:	df000515 	stw	fp,20(sp)
 804b848:	df000504 	addi	fp,sp,20
 804b84c:	e13ffd15 	stw	r4,-12(fp)
 804b850:	e17ffc15 	stw	r5,-16(fp)
 804b854:	e1bffb15 	stw	r6,-20(fp)
   int   c   = EOF;
 804b858:	00bfffc4 	movi	r2,-1
 804b85c:	e0bfff15 	stw	r2,-4(fp)
   char* ret = s;
 804b860:	e0bffd17 	ldw	r2,-12(fp)
 804b864:	e0bffe15 	stw	r2,-8(fp)

   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 804b868:	00000b06 	br	804b898 <vfgets+0x5c>
      if (( *ret ++ = c) == '\n')
 804b86c:	e0bffe17 	ldw	r2,-8(fp)
 804b870:	10c00044 	addi	r3,r2,1
 804b874:	e0fffe15 	stw	r3,-8(fp)
 804b878:	e0ffff17 	ldw	r3,-4(fp)
 804b87c:	10c00005 	stb	r3,0(r2)
 804b880:	10800003 	ldbu	r2,0(r2)
 804b884:	10803fcc 	andi	r2,r2,255
 804b888:	1080201c 	xori	r2,r2,128
 804b88c:	10bfe004 	addi	r2,r2,-128
 804b890:	10800298 	cmpnei	r2,r2,10
 804b894:	10000c26 	beq	r2,zero,804b8c8 <vfgets+0x8c>
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 804b898:	e0bffc17 	ldw	r2,-16(fp)
 804b89c:	10bfffc4 	addi	r2,r2,-1
 804b8a0:	e0bffc15 	stw	r2,-16(fp)
 804b8a4:	e0bffc17 	ldw	r2,-16(fp)
 804b8a8:	0080080e 	bge	zero,r2,804b8cc <vfgets+0x90>
 804b8ac:	e13ffb17 	ldw	r4,-20(fp)
 804b8b0:	804c4b80 	call	804c4b8 <vgetc>
 804b8b4:	e0bfff15 	stw	r2,-4(fp)
 804b8b8:	e0bfff17 	ldw	r2,-4(fp)
 804b8bc:	10bfffd8 	cmpnei	r2,r2,-1
 804b8c0:	103fea1e 	bne	r2,zero,804b86c <vfgets+0x30>
 804b8c4:	00000106 	br	804b8cc <vfgets+0x90>
         break;
 804b8c8:	0001883a 	nop
   *ret = '\0';
 804b8cc:	e0bffe17 	ldw	r2,-8(fp)
 804b8d0:	10000005 	stb	zero,0(r2)
   return ( c == EOF && ret == s) ? NULL : s;
 804b8d4:	e0bfff17 	ldw	r2,-4(fp)
 804b8d8:	10bfffd8 	cmpnei	r2,r2,-1
 804b8dc:	1000031e 	bne	r2,zero,804b8ec <vfgets+0xb0>
 804b8e0:	e0fffe17 	ldw	r3,-8(fp)
 804b8e4:	e0bffd17 	ldw	r2,-12(fp)
 804b8e8:	18800226 	beq	r3,r2,804b8f4 <vfgets+0xb8>
 804b8ec:	e0bffd17 	ldw	r2,-12(fp)
 804b8f0:	00000106 	br	804b8f8 <vfgets+0xbc>
 804b8f4:	0005883a 	mov	r2,zero
}
 804b8f8:	e037883a 	mov	sp,fp
 804b8fc:	dfc00117 	ldw	ra,4(sp)
 804b900:	df000017 	ldw	fp,0(sp)
 804b904:	dec00204 	addi	sp,sp,8
 804b908:	f800283a 	ret

0804b90c <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
 804b90c:	defffc04 	addi	sp,sp,-16
 804b910:	dfc00315 	stw	ra,12(sp)
 804b914:	df000215 	stw	fp,8(sp)
 804b918:	df000204 	addi	fp,sp,8
 804b91c:	e13ffe15 	stw	r4,-8(fp)
   int c = 0;
 804b920:	e03fff15 	stw	zero,-4(fp)

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
 804b924:	e13ffe17 	ldw	r4,-8(fp)
 804b928:	804c4b80 	call	804c4b8 <vgetc>
 804b92c:	e0bfff15 	stw	r2,-4(fp)
 804b930:	e0bfff17 	ldw	r2,-4(fp)
 804b934:	10bfffd8 	cmpnei	r2,r2,-1
 804b938:	1000021e 	bne	r2,zero,804b944 <vfeof+0x38>
   {
      return 1;
 804b93c:	00800044 	movi	r2,1
 804b940:	00000106 	br	804b948 <vfeof+0x3c>
   }   
   return 0;
 804b944:	0005883a 	mov	r2,zero
}
 804b948:	e037883a 	mov	sp,fp
 804b94c:	dfc00117 	ldw	ra,4(sp)
 804b950:	df000017 	ldw	fp,0(sp)
 804b954:	dec00204 	addi	sp,sp,8
 804b958:	f800283a 	ret

0804b95c <vunlink_flag_open_files>:
 *
 * RETURNS: 
 */

void vunlink_flag_open_files(struct vfs_file * vfp)
{
 804b95c:	defffd04 	addi	sp,sp,-12
 804b960:	df000215 	stw	fp,8(sp)
 804b964:	df000204 	addi	fp,sp,8
 804b968:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 804b96c:	d0a0d017 	ldw	r2,-31936(gp)
 804b970:	e0bfff15 	stw	r2,-4(fp)
 804b974:	00000906 	br	804b99c <vunlink_flag_open_files+0x40>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
 804b978:	e0bfff17 	ldw	r2,-4(fp)
 804b97c:	10800117 	ldw	r2,4(r2)
 804b980:	e0fffe17 	ldw	r3,-8(fp)
 804b984:	1880021e 	bne	r3,r2,804b990 <vunlink_flag_open_files+0x34>
         vtmp->file = NULL;
 804b988:	e0bfff17 	ldw	r2,-4(fp)
 804b98c:	10000115 	stw	zero,4(r2)
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 804b990:	e0bfff17 	ldw	r2,-4(fp)
 804b994:	10800017 	ldw	r2,0(r2)
 804b998:	e0bfff15 	stw	r2,-4(fp)
 804b99c:	e0bfff17 	ldw	r2,-4(fp)
 804b9a0:	103ff51e 	bne	r2,zero,804b978 <vunlink_flag_open_files+0x1c>
   }
}
 804b9a4:	0001883a 	nop
 804b9a8:	0001883a 	nop
 804b9ac:	e037883a 	mov	sp,fp
 804b9b0:	df000017 	ldw	fp,0(sp)
 804b9b4:	dec00104 	addi	sp,sp,4
 804b9b8:	f800283a 	ret

0804b9bc <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
 804b9bc:	defff604 	addi	sp,sp,-40
 804b9c0:	dfc00915 	stw	ra,36(sp)
 804b9c4:	df000815 	stw	fp,32(sp)
 804b9c8:	df000804 	addi	fp,sp,32
 804b9cc:	e13ff815 	stw	r4,-32(fp)
   struct vfs_file * vfp;
   int   rc =  0;
 804b9d0:	e03fff15 	stw	zero,-4(fp)
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name)+1);
 804b9d4:	e13ff817 	ldw	r4,-32(fp)
 804b9d8:	80044880 	call	8004488 <strlen>
 804b9dc:	10800044 	addi	r2,r2,1
 804b9e0:	1009883a 	mov	r4,r2
 804b9e4:	804e0840 	call	804e084 <malloc>
 804b9e8:	e0bffc15 	stw	r2,-16(fp)
   strcpy(name, const_name);
 804b9ec:	e17ff817 	ldw	r5,-32(fp)
 804b9f0:	e13ffc17 	ldw	r4,-16(fp)
 804b9f4:	8003d700 	call	8003d70 <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 804b9f8:	01000144 	movi	r4,5
 804b9fc:	80307900 	call	8030790 <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
 804ba00:	e13ffc17 	ldw	r4,-16(fp)
 804ba04:	804c5000 	call	804c500 <vfslookup_locked>
 804ba08:	e0bffb15 	stw	r2,-20(fp)
 804ba0c:	e0bffb17 	ldw	r2,-20(fp)
 804ba10:	1000061e 	bne	r2,zero,804ba2c <vunlink+0x70>
   {
      vfs_unlock();
 804ba14:	01000144 	movi	r4,5
 804ba18:	80308440 	call	8030844 <post_app_sem>
#ifdef HT_LOCALFS
      /* default to call on local system */
      return remove(name);
#else
      /* no local file system, so return error condition */
      free(name);
 804ba1c:	e13ffc17 	ldw	r4,-16(fp)
 804ba20:	804e0940 	call	804e094 <free>
      return -1;
 804ba24:	00bfffc4 	movi	r2,-1
 804ba28:	00005f06 	br	804bba8 <vunlink+0x1ec>
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
 804ba2c:	e0bffb17 	ldw	r2,-20(fp)
 804ba30:	10800017 	ldw	r2,0(r2)
 804ba34:	e0bffa15 	stw	r2,-24(fp)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
 804ba38:	e03ffd15 	stw	zero,-12(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 804ba3c:	d0a0d117 	ldw	r2,-31932(gp)
 804ba40:	e0bffe15 	stw	r2,-8(fp)
 804ba44:	00000806 	br	804ba68 <vunlink+0xac>
   {
      if (vtmp == vfp)
 804ba48:	e0fffe17 	ldw	r3,-8(fp)
 804ba4c:	e0bffb17 	ldw	r2,-20(fp)
 804ba50:	18800826 	beq	r3,r2,804ba74 <vunlink+0xb8>
         break;
      vflast = vtmp;
 804ba54:	e0bffe17 	ldw	r2,-8(fp)
 804ba58:	e0bffd15 	stw	r2,-12(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 804ba5c:	e0bffe17 	ldw	r2,-8(fp)
 804ba60:	10800017 	ldw	r2,0(r2)
 804ba64:	e0bffe15 	stw	r2,-8(fp)
 804ba68:	e0bffe17 	ldw	r2,-8(fp)
 804ba6c:	103ff61e 	bne	r2,zero,804ba48 <vunlink+0x8c>
 804ba70:	00000106 	br	804ba78 <vunlink+0xbc>
         break;
 804ba74:	0001883a 	nop
   }

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
 804ba78:	e0bffe17 	ldw	r2,-8(fp)
 804ba7c:	1000071e 	bne	r2,zero,804ba9c <vunlink+0xe0>
   {
      dtrap();
 804ba80:	80301a80 	call	80301a8 <dtrap>
      vfs_unlock();
 804ba84:	01000144 	movi	r4,5
 804ba88:	80308440 	call	8030844 <post_app_sem>
      free(name);
 804ba8c:	e13ffc17 	ldw	r4,-16(fp)
 804ba90:	804e0940 	call	804e094 <free>
      return -1;
 804ba94:	00bfffc4 	movi	r2,-1
 804ba98:	00004306 	br	804bba8 <vunlink+0x1ec>
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 804ba9c:	e0bffb17 	ldw	r2,-20(fp)
 804baa0:	10800a17 	ldw	r2,40(r2)
 804baa4:	10000926 	beq	r2,zero,804bacc <vunlink+0x110>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);
 804baa8:	e0bffb17 	ldw	r2,-20(fp)
 804baac:	10800a17 	ldw	r2,40(r2)
 804bab0:	e0bff915 	stw	r2,-28(fp)

         rc = vfs->r_unlink(name);
 804bab4:	e0bff917 	ldw	r2,-28(fp)
 804bab8:	10800817 	ldw	r2,32(r2)
 804babc:	e13ffc17 	ldw	r4,-16(fp)
 804bac0:	103ee83a 	callr	r2
 804bac4:	e0bfff15 	stw	r2,-4(fp)
         break;   /* break to list deletion code after end of phoney loop */
 804bac8:	00002606 	br	804bb64 <vunlink+0x1a8>
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
 804bacc:	e0bffb17 	ldw	r2,-20(fp)
 804bad0:	1080058b 	ldhu	r2,22(r2)
 804bad4:	10bfffcc 	andi	r2,r2,65535
 804bad8:	1080080c 	andi	r2,r2,32
 804badc:	1000061e 	bne	r2,zero,804baf8 <vunlink+0x13c>
      {
         vfs_unlock();
 804bae0:	01000144 	movi	r4,5
 804bae4:	80308440 	call	8030844 <post_app_sem>
         free(name);
 804bae8:	e13ffc17 	ldw	r4,-16(fp)
 804baec:	804e0940 	call	804e094 <free>
         return -1;
 804baf0:	00bfffc4 	movi	r2,-1
 804baf4:	00002c06 	br	804bba8 <vunlink+0x1ec>
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
 804baf8:	e0bffb17 	ldw	r2,-20(fp)
 804bafc:	1080058b 	ldhu	r2,22(r2)
 804bb00:	10bfffcc 	andi	r2,r2,65535
 804bb04:	1080200c 	andi	r2,r2,128
 804bb08:	10000a26 	beq	r2,zero,804bb34 <vunlink+0x178>
 804bb0c:	e0bffb17 	ldw	r2,-20(fp)
 804bb10:	10800617 	ldw	r2,24(r2)
 804bb14:	10000726 	beq	r2,zero,804bb34 <vunlink+0x178>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
 804bb18:	e0bffb17 	ldw	r2,-20(fp)
 804bb1c:	10c00617 	ldw	r3,24(r2)
 804bb20:	e0bffb17 	ldw	r2,-20(fp)
 804bb24:	10800917 	ldw	r2,36(r2)
 804bb28:	100b883a 	mov	r5,r2
 804bb2c:	1809883a 	mov	r4,r3
 804bb30:	804b2200 	call	804b220 <vf_free_buffer>
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
 804bb34:	e0bffb17 	ldw	r2,-20(fp)
 804bb38:	1080058b 	ldhu	r2,22(r2)
 804bb3c:	10bfffcc 	andi	r2,r2,65535
 804bb40:	1080100c 	andi	r2,r2,64
 804bb44:	10000526 	beq	r2,zero,804bb5c <vunlink+0x1a0>
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
 804bb48:	d0a0d617 	ldw	r2,-31912(gp)
 804bb4c:	10bfffc4 	addi	r2,r2,-1
 804bb50:	d0a0d615 	stw	r2,-31912(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
 804bb54:	e13ffb17 	ldw	r4,-20(fp)
 804bb58:	8030d3c0 	call	8030d3c <npfree>
         the vfs_file has been deleted from the list */
#ifdef VFS_AUTO_SYNC
      do_sync = 1;
#endif
      /* we were successful at our unlink */
      rc = 0;
 804bb5c:	e03fff15 	stw	zero,-4(fp)

      break;
 804bb60:	0001883a 	nop
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
 804bb64:	e0bffd17 	ldw	r2,-12(fp)
 804bb68:	10000426 	beq	r2,zero,804bb7c <vunlink+0x1c0>
      vflast->next = vfnext;
 804bb6c:	e0bffd17 	ldw	r2,-12(fp)
 804bb70:	e0fffa17 	ldw	r3,-24(fp)
 804bb74:	10c00015 	stw	r3,0(r2)
 804bb78:	00000206 	br	804bb84 <vunlink+0x1c8>
   else
      vfsfiles = vfnext;
 804bb7c:	e0bffa17 	ldw	r2,-24(fp)
 804bb80:	d0a0d115 	stw	r2,-31932(gp)

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
 804bb84:	e13ffb17 	ldw	r4,-20(fp)
 804bb88:	804b95c0 	call	804b95c <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
 804bb8c:	00800044 	movi	r2,1
 804bb90:	d0a0d315 	stw	r2,-31924(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
 804bb94:	01000144 	movi	r4,5
 804bb98:	80308440 	call	8030844 <post_app_sem>
   free(name);
 804bb9c:	e13ffc17 	ldw	r4,-16(fp)
 804bba0:	804e0940 	call	804e094 <free>
   return rc;
 804bba4:	e0bfff17 	ldw	r2,-4(fp)
}
 804bba8:	e037883a 	mov	sp,fp
 804bbac:	dfc00117 	ldw	ra,4(sp)
 804bbb0:	df000017 	ldw	fp,0(sp)
 804bbb4:	dec00204 	addi	sp,sp,8
 804bbb8:	f800283a 	ret

0804bbbc <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 804bbbc:	defff604 	addi	sp,sp,-40
 804bbc0:	dfc00915 	stw	ra,36(sp)
 804bbc4:	df000815 	stw	fp,32(sp)
 804bbc8:	df000804 	addi	fp,sp,32
 804bbcc:	e13ffb15 	stw	r4,-20(fp)
 804bbd0:	e17ffa15 	stw	r5,-24(fp)
 804bbd4:	e1bff915 	stw	r6,-28(fp)
 804bbd8:	e1fff815 	stw	r7,-32(fp)
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 804bbdc:	01000144 	movi	r4,5
 804bbe0:	80307900 	call	8030790 <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
 804bbe4:	e13ff817 	ldw	r4,-32(fp)
 804bbe8:	804c8380 	call	804c838 <isvfile_locked>
 804bbec:	10004d26 	beq	r2,zero,804bd24 <vfread+0x168>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
 804bbf0:	e0bff817 	ldw	r2,-32(fp)
 804bbf4:	10800117 	ldw	r2,4(r2)
 804bbf8:	1000041e 	bne	r2,zero,804bc0c <vfread+0x50>
      {
         vfs_unlock();
 804bbfc:	01000144 	movi	r4,5
 804bc00:	80308440 	call	8030844 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 804bc04:	0005883a 	mov	r2,zero
 804bc08:	00004906 	br	804bd30 <vfread+0x174>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
 804bc0c:	e0bff817 	ldw	r2,-32(fp)
 804bc10:	10800117 	ldw	r2,4(r2)
 804bc14:	10800a17 	ldw	r2,40(r2)
 804bc18:	10001026 	beq	r2,zero,804bc5c <vfread+0xa0>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 804bc1c:	e0bff817 	ldw	r2,-32(fp)
 804bc20:	10800117 	ldw	r2,4(r2)
 804bc24:	10800a17 	ldw	r2,40(r2)
 804bc28:	e0bffd15 	stw	r2,-12(fp)
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
 804bc2c:	e0bffd17 	ldw	r2,-12(fp)
 804bc30:	10800317 	ldw	r2,12(r2)
 804bc34:	e1fff817 	ldw	r7,-32(fp)
 804bc38:	e1bff917 	ldw	r6,-28(fp)
 804bc3c:	e17ffa17 	ldw	r5,-24(fp)
 804bc40:	e13ffb17 	ldw	r4,-20(fp)
 804bc44:	103ee83a 	callr	r2
 804bc48:	e0bffc15 	stw	r2,-16(fp)
         vfs_unlock();
 804bc4c:	01000144 	movi	r4,5
 804bc50:	80308440 	call	8030844 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return rc;
 804bc54:	e0bffc17 	ldw	r2,-16(fp)
 804bc58:	00003506 	br	804bd30 <vfread+0x174>
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
 804bc5c:	e0bff817 	ldw	r2,-32(fp)
 804bc60:	10800117 	ldw	r2,4(r2)
 804bc64:	10800617 	ldw	r2,24(r2)
 804bc68:	1000041e 	bne	r2,zero,804bc7c <vfread+0xc0>
      {
         vfs_unlock();
 804bc6c:	01000144 	movi	r4,5
 804bc70:	80308440 	call	8030844 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 804bc74:	0005883a 	mov	r2,zero
 804bc78:	00002d06 	br	804bd30 <vfread+0x174>
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
 804bc7c:	e0fff917 	ldw	r3,-28(fp)
 804bc80:	e0bffa17 	ldw	r2,-24(fp)
 804bc84:	1885383a 	mul	r2,r3,r2
 804bc88:	e0bfff15 	stw	r2,-4(fp)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
 804bc8c:	e0bff817 	ldw	r2,-32(fp)
 804bc90:	10c00217 	ldw	r3,8(r2)
 804bc94:	e0bff817 	ldw	r2,-32(fp)
 804bc98:	10800117 	ldw	r2,4(r2)
 804bc9c:	10800617 	ldw	r2,24(r2)
 804bca0:	1885c83a 	sub	r2,r3,r2
 804bca4:	e0bffe15 	stw	r2,-8(fp)

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
 804bca8:	e0fffe17 	ldw	r3,-8(fp)
 804bcac:	e0bfff17 	ldw	r2,-4(fp)
 804bcb0:	1885883a 	add	r2,r3,r2
 804bcb4:	e0fff817 	ldw	r3,-32(fp)
 804bcb8:	18c00117 	ldw	r3,4(r3)
 804bcbc:	18c00817 	ldw	r3,32(r3)
 804bcc0:	1880062e 	bgeu	r3,r2,804bcdc <vfread+0x120>
            bcount = (unsigned)(vfd->file->comp_size - location);
 804bcc4:	e0bff817 	ldw	r2,-32(fp)
 804bcc8:	10800117 	ldw	r2,4(r2)
 804bccc:	10c00817 	ldw	r3,32(r2)
 804bcd0:	e0bffe17 	ldw	r2,-8(fp)
 804bcd4:	1885c83a 	sub	r2,r3,r2
 804bcd8:	e0bfff15 	stw	r2,-4(fp)
         MEMCPY(buf, vfd->cmploc, bcount);
 804bcdc:	e0bff817 	ldw	r2,-32(fp)
 804bce0:	10800217 	ldw	r2,8(r2)
 804bce4:	e1bfff17 	ldw	r6,-4(fp)
 804bce8:	100b883a 	mov	r5,r2
 804bcec:	e13ffb17 	ldw	r4,-20(fp)
 804bcf0:	80037cc0 	call	80037cc <memcpy>
         vfd->cmploc += bcount;
 804bcf4:	e0bff817 	ldw	r2,-32(fp)
 804bcf8:	10c00217 	ldw	r3,8(r2)
 804bcfc:	e0bfff17 	ldw	r2,-4(fp)
 804bd00:	1887883a 	add	r3,r3,r2
 804bd04:	e0bff817 	ldw	r2,-32(fp)
 804bd08:	10c00215 	stw	r3,8(r2)
      }
      vfs_unlock();
 804bd0c:	01000144 	movi	r4,5
 804bd10:	80308440 	call	8030844 <post_app_sem>
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
 804bd14:	e17ffa17 	ldw	r5,-24(fp)
 804bd18:	e13fff17 	ldw	r4,-4(fp)
 804bd1c:	8011fdc0 	call	8011fdc <__udivsi3>
 804bd20:	00000306 	br	804bd30 <vfread+0x174>
   }

   vfs_unlock();
 804bd24:	01000144 	movi	r4,5
 804bd28:	80308440 	call	8030844 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
 804bd2c:	0005883a 	mov	r2,zero
#endif   /* HT_LOCALFS */
}
 804bd30:	e037883a 	mov	sp,fp
 804bd34:	dfc00117 	ldw	ra,4(sp)
 804bd38:	df000017 	ldw	fp,0(sp)
 804bd3c:	dec00204 	addi	sp,sp,8
 804bd40:	f800283a 	ret

0804bd44 <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 804bd44:	defff204 	addi	sp,sp,-56
 804bd48:	dfc00d15 	stw	ra,52(sp)
 804bd4c:	df000c15 	stw	fp,48(sp)
 804bd50:	df000c04 	addi	fp,sp,48
 804bd54:	e13ff715 	stw	r4,-36(fp)
 804bd58:	e17ff615 	stw	r5,-40(fp)
 804bd5c:	e1bff515 	stw	r6,-44(fp)
 804bd60:	e1fff415 	stw	r7,-48(fp)
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 804bd64:	e13ff417 	ldw	r4,-48(fp)
 804bd68:	804c8380 	call	804c838 <isvfile_locked>
 804bd6c:	1000021e 	bne	r2,zero,804bd78 <vfwrite_locked+0x34>
   {
#ifdef HT_LOCALFS
      /* default to call on local system */
      return(fwrite(buf, size, items, (FILE*)vfd));
#else
      return EBADF;
 804bd70:	00800244 	movi	r2,9
 804bd74:	0000d906 	br	804c0dc <vfwrite_locked+0x398>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
 804bd78:	e0bff417 	ldw	r2,-48(fp)
 804bd7c:	10800117 	ldw	r2,4(r2)
 804bd80:	10800a17 	ldw	r2,40(r2)
 804bd84:	10000e26 	beq	r2,zero,804bdc0 <vfwrite_locked+0x7c>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 804bd88:	e0bff417 	ldw	r2,-48(fp)
 804bd8c:	10800117 	ldw	r2,4(r2)
 804bd90:	10800a17 	ldw	r2,40(r2)
 804bd94:	e0bff915 	stw	r2,-28(fp)
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
 804bd98:	e0bff917 	ldw	r2,-28(fp)
 804bd9c:	10800417 	ldw	r2,16(r2)
 804bda0:	e1fff417 	ldw	r7,-48(fp)
 804bda4:	e1bff517 	ldw	r6,-44(fp)
 804bda8:	e17ff617 	ldw	r5,-40(fp)
 804bdac:	e13ff717 	ldw	r4,-36(fp)
 804bdb0:	103ee83a 	callr	r2
 804bdb4:	e0bff815 	stw	r2,-32(fp)
      return rc;
 804bdb8:	e0bff817 	ldw	r2,-32(fp)
 804bdbc:	0000c706 	br	804c0dc <vfwrite_locked+0x398>

#else    /* HT_RWVFS */

   /* the caller is trying to write to a file that's been deleted,
      so he writes 0 data */
   if (vfd->file == NULL)
 804bdc0:	e0bff417 	ldw	r2,-48(fp)
 804bdc4:	10800117 	ldw	r2,4(r2)
 804bdc8:	1000021e 	bne	r2,zero,804bdd4 <vfwrite_locked+0x90>
   {
      return 0;
 804bdcc:	0005883a 	mov	r2,zero
 804bdd0:	0000c206 	br	804c0dc <vfwrite_locked+0x398>
   }

   vfp = vfd->file;
 804bdd4:	e0bff417 	ldw	r2,-48(fp)
 804bdd8:	10800117 	ldw	r2,4(r2)
 804bddc:	e0bfff15 	stw	r2,-4(fp)

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
 804bde0:	e0bfff17 	ldw	r2,-4(fp)
 804bde4:	1080058b 	ldhu	r2,22(r2)
 804bde8:	10bfffcc 	andi	r2,r2,65535
 804bdec:	1080080c 	andi	r2,r2,32
 804bdf0:	1000051e 	bne	r2,zero,804be08 <vfwrite_locked+0xc4>
   {
      vfd->error = ENP_FILEIO;
 804bdf4:	e0bff417 	ldw	r2,-48(fp)
 804bdf8:	00fff984 	movi	r3,-26
 804bdfc:	10c00415 	stw	r3,16(r2)
      return 0;
 804be00:	0005883a 	mov	r2,zero
 804be04:	0000b506 	br	804c0dc <vfwrite_locked+0x398>
   }

   /* compute number of bytes to write */
   bcount = size * items;
 804be08:	e0fff617 	ldw	r3,-40(fp)
 804be0c:	e0bff517 	ldw	r2,-44(fp)
 804be10:	1885383a 	mul	r2,r3,r2
 804be14:	e0bffe15 	stw	r2,-8(fp)

   /* get rid of this degenerate case up front */
   if (bcount == 0)
 804be18:	e0bffe17 	ldw	r2,-8(fp)
 804be1c:	1000021e 	bne	r2,zero,804be28 <vfwrite_locked+0xe4>
   {
      return 0;
 804be20:	0005883a 	mov	r2,zero
 804be24:	0000ad06 	br	804c0dc <vfwrite_locked+0x398>
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
 804be28:	e0bfff17 	ldw	r2,-4(fp)
 804be2c:	10800617 	ldw	r2,24(r2)
 804be30:	10003d1e 	bne	r2,zero,804bf28 <vfwrite_locked+0x1e4>
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
 804be34:	e0bffe17 	ldw	r2,-8(fp)
 804be38:	10bfffc4 	addi	r2,r2,-1
 804be3c:	1004d37a 	srli	r2,r2,13
 804be40:	10800044 	addi	r2,r2,1
 804be44:	1004937a 	slli	r2,r2,13
 804be48:	e0bffa15 	stw	r2,-24(fp)

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
 804be4c:	e13ffa17 	ldw	r4,-24(fp)
 804be50:	804b1580 	call	804b158 <vf_alloc_buffer>
 804be54:	1007883a 	mov	r3,r2
 804be58:	e0bfff17 	ldw	r2,-4(fp)
 804be5c:	10c00615 	stw	r3,24(r2)

      /* if the allocation failed */
      if (!(vfp->data))
 804be60:	e0bfff17 	ldw	r2,-4(fp)
 804be64:	10800617 	ldw	r2,24(r2)
 804be68:	1000051e 	bne	r2,zero,804be80 <vfwrite_locked+0x13c>
      {
         vfd->error = ENP_NOMEM;
 804be6c:	e0bff417 	ldw	r2,-48(fp)
 804be70:	00fffb04 	movi	r3,-20
 804be74:	10c00415 	stw	r3,16(r2)
         return 0;
 804be78:	0005883a 	mov	r2,zero
 804be7c:	00009706 	br	804c0dc <vfwrite_locked+0x398>
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
 804be80:	e0bfff17 	ldw	r2,-4(fp)
 804be84:	e0fffa17 	ldw	r3,-24(fp)
 804be88:	10c00915 	stw	r3,36(r2)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
 804be8c:	e0bfff17 	ldw	r2,-4(fp)
 804be90:	e0fffe17 	ldw	r3,-8(fp)
 804be94:	10c00715 	stw	r3,28(r2)
      vfp->comp_size = bcount;
 804be98:	e0bfff17 	ldw	r2,-4(fp)
 804be9c:	e0fffe17 	ldw	r3,-8(fp)
 804bea0:	10c00815 	stw	r3,32(r2)

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
 804bea4:	e0bfff17 	ldw	r2,-4(fp)
 804bea8:	10c00617 	ldw	r3,24(r2)
 804beac:	e0bffe17 	ldw	r2,-8(fp)
 804beb0:	1887883a 	add	r3,r3,r2
 804beb4:	e0bff417 	ldw	r2,-48(fp)
 804beb8:	10c00215 	stw	r3,8(r2)

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
 804bebc:	e0bfff17 	ldw	r2,-4(fp)
 804bec0:	10c0058b 	ldhu	r3,22(r2)
 804bec4:	00bfff84 	movi	r2,-2
 804bec8:	1884703a 	and	r2,r3,r2
 804becc:	1007883a 	mov	r3,r2
 804bed0:	e0bfff17 	ldw	r2,-4(fp)
 804bed4:	10c0058d 	sth	r3,22(r2)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;
 804bed8:	e0bfff17 	ldw	r2,-4(fp)
 804bedc:	1080058b 	ldhu	r2,22(r2)
 804bee0:	10808014 	ori	r2,r2,512
 804bee4:	1007883a 	mov	r3,r2
 804bee8:	e0bfff17 	ldw	r2,-4(fp)
 804beec:	10c0058d 	sth	r3,22(r2)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 804bef0:	e0bfff17 	ldw	r2,-4(fp)
 804bef4:	1080058b 	ldhu	r2,22(r2)
 804bef8:	10802014 	ori	r2,r2,128
 804befc:	1007883a 	mov	r3,r2
 804bf00:	e0bfff17 	ldw	r2,-4(fp)
 804bf04:	10c0058d 	sth	r3,22(r2)

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
 804bf08:	e0bfff17 	ldw	r2,-4(fp)
 804bf0c:	10800617 	ldw	r2,24(r2)
 804bf10:	e1bffe17 	ldw	r6,-8(fp)
 804bf14:	e17ff717 	ldw	r5,-36(fp)
 804bf18:	1009883a 	mov	r4,r2
 804bf1c:	80037cc0 	call	80037cc <memcpy>

      /* return the number of "items" written */
      return items;
 804bf20:	e0bff517 	ldw	r2,-44(fp)
 804bf24:	00006d06 	br	804c0dc <vfwrite_locked+0x398>
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
 804bf28:	e0bff417 	ldw	r2,-48(fp)
 804bf2c:	10c00217 	ldw	r3,8(r2)
 804bf30:	e0bfff17 	ldw	r2,-4(fp)
 804bf34:	10800617 	ldw	r2,24(r2)
 804bf38:	1885c83a 	sub	r2,r3,r2
 804bf3c:	e0bffd15 	stw	r2,-12(fp)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
 804bf40:	e0fffd17 	ldw	r3,-12(fp)
 804bf44:	e0bffe17 	ldw	r2,-8(fp)
 804bf48:	1885883a 	add	r2,r3,r2
 804bf4c:	e0ffff17 	ldw	r3,-4(fp)
 804bf50:	18c00917 	ldw	r3,36(r3)
 804bf54:	1880382e 	bgeu	r3,r2,804c038 <vfwrite_locked+0x2f4>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
 804bf58:	e0fffd17 	ldw	r3,-12(fp)
 804bf5c:	e0bffe17 	ldw	r2,-8(fp)
 804bf60:	1885883a 	add	r2,r3,r2
 804bf64:	10bfffc4 	addi	r2,r2,-1
 804bf68:	1004d37a 	srli	r2,r2,13
 804bf6c:	10800044 	addi	r2,r2,1
 804bf70:	1004937a 	slli	r2,r2,13
 804bf74:	e0bffc15 	stw	r2,-16(fp)
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
 804bf78:	e13ffc17 	ldw	r4,-16(fp)
 804bf7c:	804b1580 	call	804b158 <vf_alloc_buffer>
 804bf80:	e0bffb15 	stw	r2,-20(fp)

      /* check for allocation failure */
      if (!new_buffer)
 804bf84:	e0bffb17 	ldw	r2,-20(fp)
 804bf88:	1000051e 	bne	r2,zero,804bfa0 <vfwrite_locked+0x25c>
      {
         vfd->error = ENP_NOMEM;
 804bf8c:	e0bff417 	ldw	r2,-48(fp)
 804bf90:	00fffb04 	movi	r3,-20
 804bf94:	10c00415 	stw	r3,16(r2)
         return 0;
 804bf98:	0005883a 	mov	r2,zero
 804bf9c:	00004f06 	br	804c0dc <vfwrite_locked+0x398>
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 804bfa0:	e0bfff17 	ldw	r2,-4(fp)
 804bfa4:	10c00617 	ldw	r3,24(r2)
 804bfa8:	e0bfff17 	ldw	r2,-4(fp)
 804bfac:	10800817 	ldw	r2,32(r2)
 804bfb0:	100d883a 	mov	r6,r2
 804bfb4:	180b883a 	mov	r5,r3
 804bfb8:	e13ffb17 	ldw	r4,-20(fp)
 804bfbc:	80037cc0 	call	80037cc <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
 804bfc0:	e0bfff17 	ldw	r2,-4(fp)
 804bfc4:	1080058b 	ldhu	r2,22(r2)
 804bfc8:	10bfffcc 	andi	r2,r2,65535
 804bfcc:	1080200c 	andi	r2,r2,128
 804bfd0:	10000726 	beq	r2,zero,804bff0 <vfwrite_locked+0x2ac>
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
 804bfd4:	e0bfff17 	ldw	r2,-4(fp)
 804bfd8:	10c00617 	ldw	r3,24(r2)
 804bfdc:	e0bfff17 	ldw	r2,-4(fp)
 804bfe0:	10800917 	ldw	r2,36(r2)
 804bfe4:	100b883a 	mov	r5,r2
 804bfe8:	1809883a 	mov	r4,r3
 804bfec:	804b2200 	call	804b220 <vf_free_buffer>
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
 804bff0:	e0bfff17 	ldw	r2,-4(fp)
 804bff4:	e0fffb17 	ldw	r3,-20(fp)
 804bff8:	10c00615 	stw	r3,24(r2)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
 804bffc:	e0bfff17 	ldw	r2,-4(fp)
 804c000:	e0fffc17 	ldw	r3,-16(fp)
 804c004:	10c00915 	stw	r3,36(r2)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 804c008:	e0bfff17 	ldw	r2,-4(fp)
 804c00c:	1080058b 	ldhu	r2,22(r2)
 804c010:	10802014 	ori	r2,r2,128
 804c014:	1007883a 	mov	r3,r2
 804c018:	e0bfff17 	ldw	r2,-4(fp)
 804c01c:	10c0058d 	sth	r3,22(r2)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
 804c020:	e0bfff17 	ldw	r2,-4(fp)
 804c024:	10c00617 	ldw	r3,24(r2)
 804c028:	e0bffd17 	ldw	r2,-12(fp)
 804c02c:	1887883a 	add	r3,r3,r2
 804c030:	e0bff417 	ldw	r2,-48(fp)
 804c034:	10c00215 	stw	r3,8(r2)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
 804c038:	e0bff417 	ldw	r2,-48(fp)
 804c03c:	10800217 	ldw	r2,8(r2)
 804c040:	e1bffe17 	ldw	r6,-8(fp)
 804c044:	e17ff717 	ldw	r5,-36(fp)
 804c048:	1009883a 	mov	r4,r2
 804c04c:	80037cc0 	call	80037cc <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
 804c050:	e0bff417 	ldw	r2,-48(fp)
 804c054:	10c00217 	ldw	r3,8(r2)
 804c058:	e0bffe17 	ldw	r2,-8(fp)
 804c05c:	1887883a 	add	r3,r3,r2
 804c060:	e0bff417 	ldw	r2,-48(fp)
 804c064:	10c00215 	stw	r3,8(r2)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
 804c068:	e0fffd17 	ldw	r3,-12(fp)
 804c06c:	e0bffe17 	ldw	r2,-8(fp)
 804c070:	1885883a 	add	r2,r3,r2
 804c074:	e0ffff17 	ldw	r3,-4(fp)
 804c078:	18c00817 	ldw	r3,32(r3)
 804c07c:	1880052e 	bgeu	r3,r2,804c094 <vfwrite_locked+0x350>
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
 804c080:	e0fffd17 	ldw	r3,-12(fp)
 804c084:	e0bffe17 	ldw	r2,-8(fp)
 804c088:	1887883a 	add	r3,r3,r2
 804c08c:	e0bfff17 	ldw	r2,-4(fp)
 804c090:	10c00815 	stw	r3,32(r2)
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
 804c094:	e0bfff17 	ldw	r2,-4(fp)
 804c098:	10c00817 	ldw	r3,32(r2)
 804c09c:	e0bfff17 	ldw	r2,-4(fp)
 804c0a0:	10c00715 	stw	r3,28(r2)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
 804c0a4:	e0bfff17 	ldw	r2,-4(fp)
 804c0a8:	10c0058b 	ldhu	r3,22(r2)
 804c0ac:	00bfff84 	movi	r2,-2
 804c0b0:	1884703a 	and	r2,r3,r2
 804c0b4:	1007883a 	mov	r3,r2
 804c0b8:	e0bfff17 	ldw	r2,-4(fp)
 804c0bc:	10c0058d 	sth	r3,22(r2)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 804c0c0:	e0bfff17 	ldw	r2,-4(fp)
 804c0c4:	1080058b 	ldhu	r2,22(r2)
 804c0c8:	10808014 	ori	r2,r2,512
 804c0cc:	1007883a 	mov	r3,r2
 804c0d0:	e0bfff17 	ldw	r2,-4(fp)
 804c0d4:	10c0058d 	sth	r3,22(r2)

   /* return the number of "items" written */
   return items;
 804c0d8:	e0bff517 	ldw	r2,-44(fp)

#endif   /* HT_RWVFS */
}
 804c0dc:	e037883a 	mov	sp,fp
 804c0e0:	dfc00117 	ldw	ra,4(sp)
 804c0e4:	df000017 	ldw	fp,0(sp)
 804c0e8:	dec00204 	addi	sp,sp,8
 804c0ec:	f800283a 	ret

0804c0f0 <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 804c0f0:	defff904 	addi	sp,sp,-28
 804c0f4:	dfc00615 	stw	ra,24(sp)
 804c0f8:	df000515 	stw	fp,20(sp)
 804c0fc:	df000504 	addi	fp,sp,20
 804c100:	e13ffe15 	stw	r4,-8(fp)
 804c104:	e17ffd15 	stw	r5,-12(fp)
 804c108:	e1bffc15 	stw	r6,-16(fp)
 804c10c:	e1fffb15 	stw	r7,-20(fp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 804c110:	01000144 	movi	r4,5
 804c114:	80307900 	call	8030790 <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
 804c118:	e1fffb17 	ldw	r7,-20(fp)
 804c11c:	e1bffc17 	ldw	r6,-16(fp)
 804c120:	e17ffd17 	ldw	r5,-12(fp)
 804c124:	e13ffe17 	ldw	r4,-8(fp)
 804c128:	804bd440 	call	804bd44 <vfwrite_locked>
 804c12c:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 804c130:	01000144 	movi	r4,5
 804c134:	80308440 	call	8030844 <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
 804c138:	e0bfff17 	ldw	r2,-4(fp)
}
 804c13c:	e037883a 	mov	sp,fp
 804c140:	dfc00117 	ldw	ra,4(sp)
 804c144:	df000017 	ldw	fp,0(sp)
 804c148:	dec00204 	addi	sp,sp,8
 804c14c:	f800283a 	ret

0804c150 <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
 804c150:	defff904 	addi	sp,sp,-28
 804c154:	dfc00615 	stw	ra,24(sp)
 804c158:	df000515 	stw	fp,20(sp)
 804c15c:	df000504 	addi	fp,sp,20
 804c160:	e13ffd15 	stw	r4,-12(fp)
 804c164:	e17ffc15 	stw	r5,-16(fp)
 804c168:	e1bffb15 	stw	r6,-20(fp)
   /* lock the VFS */
   vfs_lock();
 804c16c:	01000144 	movi	r4,5
 804c170:	80307900 	call	8030790 <wait_app_sem>

   if (isvfile_locked(vfd))
 804c174:	e13ffd17 	ldw	r4,-12(fp)
 804c178:	804c8380 	call	804c838 <isvfile_locked>
 804c17c:	10004526 	beq	r2,zero,804c294 <vfseek+0x144>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
 804c180:	e0bffd17 	ldw	r2,-12(fp)
 804c184:	10800117 	ldw	r2,4(r2)
 804c188:	1000041e 	bne	r2,zero,804c19c <vfseek+0x4c>
      {
         vfs_unlock();
 804c18c:	01000144 	movi	r4,5
 804c190:	80308440 	call	8030844 <post_app_sem>
         return -1;
 804c194:	00bfffc4 	movi	r2,-1
 804c198:	00004106 	br	804c2a0 <vfseek+0x150>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 804c19c:	e0bffd17 	ldw	r2,-12(fp)
 804c1a0:	10800117 	ldw	r2,4(r2)
 804c1a4:	10800a17 	ldw	r2,40(r2)
 804c1a8:	10000f26 	beq	r2,zero,804c1e8 <vfseek+0x98>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
 804c1ac:	e0bffd17 	ldw	r2,-12(fp)
 804c1b0:	10800117 	ldw	r2,4(r2)
 804c1b4:	10800a17 	ldw	r2,40(r2)
 804c1b8:	e0bfff15 	stw	r2,-4(fp)
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
 804c1bc:	e0bfff17 	ldw	r2,-4(fp)
 804c1c0:	10800517 	ldw	r2,20(r2)
 804c1c4:	e1bffb17 	ldw	r6,-20(fp)
 804c1c8:	e17ffc17 	ldw	r5,-16(fp)
 804c1cc:	e13ffd17 	ldw	r4,-12(fp)
 804c1d0:	103ee83a 	callr	r2
 804c1d4:	e0bffe15 	stw	r2,-8(fp)
         vfs_unlock();
 804c1d8:	01000144 	movi	r4,5
 804c1dc:	80308440 	call	8030844 <post_app_sem>
         return rc;
 804c1e0:	e0bffe17 	ldw	r2,-8(fp)
 804c1e4:	00002e06 	br	804c2a0 <vfseek+0x150>
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
 804c1e8:	e0bffb17 	ldw	r2,-20(fp)
 804c1ec:	108000a0 	cmpeqi	r2,r2,2
 804c1f0:	1000181e 	bne	r2,zero,804c254 <vfseek+0x104>
 804c1f4:	e0bffb17 	ldw	r2,-20(fp)
 804c1f8:	108000c8 	cmpgei	r2,r2,3
 804c1fc:	1000211e 	bne	r2,zero,804c284 <vfseek+0x134>
 804c200:	e0bffb17 	ldw	r2,-20(fp)
 804c204:	10000426 	beq	r2,zero,804c218 <vfseek+0xc8>
 804c208:	e0bffb17 	ldw	r2,-20(fp)
 804c20c:	10800060 	cmpeqi	r2,r2,1
 804c210:	1000091e 	bne	r2,zero,804c238 <vfseek+0xe8>
 804c214:	00001b06 	br	804c284 <vfseek+0x134>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
 804c218:	e0bffd17 	ldw	r2,-12(fp)
 804c21c:	10800117 	ldw	r2,4(r2)
 804c220:	10c00617 	ldw	r3,24(r2)
 804c224:	e0bffc17 	ldw	r2,-16(fp)
 804c228:	1887883a 	add	r3,r3,r2
 804c22c:	e0bffd17 	ldw	r2,-12(fp)
 804c230:	10c00215 	stw	r3,8(r2)
         break;
 804c234:	00001306 	br	804c284 <vfseek+0x134>
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
 804c238:	e0bffd17 	ldw	r2,-12(fp)
 804c23c:	10c00217 	ldw	r3,8(r2)
 804c240:	e0bffc17 	ldw	r2,-16(fp)
 804c244:	1887883a 	add	r3,r3,r2
 804c248:	e0bffd17 	ldw	r2,-12(fp)
 804c24c:	10c00215 	stw	r3,8(r2)
         break;
 804c250:	00000c06 	br	804c284 <vfseek+0x134>
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
 804c254:	e0bffd17 	ldw	r2,-12(fp)
 804c258:	10800117 	ldw	r2,4(r2)
 804c25c:	10c00617 	ldw	r3,24(r2)
 804c260:	e0bffd17 	ldw	r2,-12(fp)
 804c264:	10800117 	ldw	r2,4(r2)
 804c268:	11000817 	ldw	r4,32(r2)
 804c26c:	e0bffc17 	ldw	r2,-16(fp)
 804c270:	2085883a 	add	r2,r4,r2
 804c274:	1887883a 	add	r3,r3,r2
 804c278:	e0bffd17 	ldw	r2,-12(fp)
 804c27c:	10c00215 	stw	r3,8(r2)
         break;
 804c280:	0001883a 	nop
      }
      vfs_unlock();
 804c284:	01000144 	movi	r4,5
 804c288:	80308440 	call	8030844 <post_app_sem>
      return(0);
 804c28c:	0005883a 	mov	r2,zero
 804c290:	00000306 	br	804c2a0 <vfseek+0x150>
   }

   vfs_unlock();
 804c294:	01000144 	movi	r4,5
 804c298:	80308440 	call	8030844 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
 804c29c:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 804c2a0:	e037883a 	mov	sp,fp
 804c2a4:	dfc00117 	ldw	ra,4(sp)
 804c2a8:	df000017 	ldw	fp,0(sp)
 804c2ac:	dec00204 	addi	sp,sp,8
 804c2b0:	f800283a 	ret

0804c2b4 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
 804c2b4:	defffb04 	addi	sp,sp,-20
 804c2b8:	dfc00415 	stw	ra,16(sp)
 804c2bc:	df000315 	stw	fp,12(sp)
 804c2c0:	df000304 	addi	fp,sp,12
 804c2c4:	e13ffd15 	stw	r4,-12(fp)
   /* lock the VFS */
   vfs_lock();
 804c2c8:	01000144 	movi	r4,5
 804c2cc:	80307900 	call	8030790 <wait_app_sem>

   if (isvfile_locked(vfd))
 804c2d0:	e13ffd17 	ldw	r4,-12(fp)
 804c2d4:	804c8380 	call	804c838 <isvfile_locked>
 804c2d8:	10003126 	beq	r2,zero,804c3a0 <vftell+0xec>
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
 804c2dc:	e0bffd17 	ldw	r2,-12(fp)
 804c2e0:	10800117 	ldw	r2,4(r2)
 804c2e4:	1000041e 	bne	r2,zero,804c2f8 <vftell+0x44>
      {
         vfs_unlock();
 804c2e8:	01000144 	movi	r4,5
 804c2ec:	80308440 	call	8030844 <post_app_sem>
         return -1;
 804c2f0:	00bfffc4 	movi	r2,-1
 804c2f4:	00002d06 	br	804c3ac <vftell+0xf8>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 804c2f8:	e0bffd17 	ldw	r2,-12(fp)
 804c2fc:	10800117 	ldw	r2,4(r2)
 804c300:	10800a17 	ldw	r2,40(r2)
 804c304:	10000d26 	beq	r2,zero,804c33c <vftell+0x88>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 804c308:	e0bffd17 	ldw	r2,-12(fp)
 804c30c:	10800117 	ldw	r2,4(r2)
 804c310:	10800a17 	ldw	r2,40(r2)
 804c314:	e0bfff15 	stw	r2,-4(fp)
         long  rc;

         rc = vfp->r_ftell(vfd);
 804c318:	e0bfff17 	ldw	r2,-4(fp)
 804c31c:	10800617 	ldw	r2,24(r2)
 804c320:	e13ffd17 	ldw	r4,-12(fp)
 804c324:	103ee83a 	callr	r2
 804c328:	e0bffe15 	stw	r2,-8(fp)
         vfs_unlock();
 804c32c:	01000144 	movi	r4,5
 804c330:	80308440 	call	8030844 <post_app_sem>
         return rc;
 804c334:	e0bffe17 	ldw	r2,-8(fp)
 804c338:	00001c06 	br	804c3ac <vftell+0xf8>
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
 804c33c:	e0bffd17 	ldw	r2,-12(fp)
 804c340:	10c00217 	ldw	r3,8(r2)
 804c344:	e0bffd17 	ldw	r2,-12(fp)
 804c348:	10800117 	ldw	r2,4(r2)
 804c34c:	11000617 	ldw	r4,24(r2)
 804c350:	e0bffd17 	ldw	r2,-12(fp)
 804c354:	10800117 	ldw	r2,4(r2)
 804c358:	10800817 	ldw	r2,32(r2)
 804c35c:	2085883a 	add	r2,r4,r2
 804c360:	1880061e 	bne	r3,r2,804c37c <vftell+0xc8>
      {
         vfs_unlock();
 804c364:	01000144 	movi	r4,5
 804c368:	80308440 	call	8030844 <post_app_sem>

         return vfd->file->comp_size;
 804c36c:	e0bffd17 	ldw	r2,-12(fp)
 804c370:	10800117 	ldw	r2,4(r2)
 804c374:	10800817 	ldw	r2,32(r2)
 804c378:	00000c06 	br	804c3ac <vftell+0xf8>
      }
      else
      {
         vfs_unlock();
 804c37c:	01000144 	movi	r4,5
 804c380:	80308440 	call	8030844 <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
 804c384:	e0bffd17 	ldw	r2,-12(fp)
 804c388:	10c00217 	ldw	r3,8(r2)
 804c38c:	e0bffd17 	ldw	r2,-12(fp)
 804c390:	10800117 	ldw	r2,4(r2)
 804c394:	10800617 	ldw	r2,24(r2)
 804c398:	1885c83a 	sub	r2,r3,r2
 804c39c:	00000306 	br	804c3ac <vftell+0xf8>
      }
   }

   vfs_unlock();
 804c3a0:	01000144 	movi	r4,5
 804c3a4:	80308440 	call	8030844 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
 804c3a8:	00800244 	movi	r2,9
#endif   /* HT_LOCALFS */
}
 804c3ac:	e037883a 	mov	sp,fp
 804c3b0:	dfc00117 	ldw	ra,4(sp)
 804c3b4:	df000017 	ldw	fp,0(sp)
 804c3b8:	dec00204 	addi	sp,sp,8
 804c3bc:	f800283a 	ret

0804c3c0 <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
 804c3c0:	defffb04 	addi	sp,sp,-20
 804c3c4:	dfc00415 	stw	ra,16(sp)
 804c3c8:	df000315 	stw	fp,12(sp)
 804c3cc:	df000304 	addi	fp,sp,12
 804c3d0:	e13ffd15 	stw	r4,-12(fp)
   int   chr;

   if (isvfile_locked(vfd))
 804c3d4:	e13ffd17 	ldw	r4,-12(fp)
 804c3d8:	804c8380 	call	804c838 <isvfile_locked>
 804c3dc:	10002f26 	beq	r2,zero,804c49c <vgetc_locked+0xdc>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
 804c3e0:	e0bffd17 	ldw	r2,-12(fp)
 804c3e4:	10800117 	ldw	r2,4(r2)
 804c3e8:	1000021e 	bne	r2,zero,804c3f4 <vgetc_locked+0x34>
      {
         return EOF;
 804c3ec:	00bfffc4 	movi	r2,-1
 804c3f0:	00002c06 	br	804c4a4 <vgetc_locked+0xe4>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 804c3f4:	e0bffd17 	ldw	r2,-12(fp)
 804c3f8:	10800117 	ldw	r2,4(r2)
 804c3fc:	10800a17 	ldw	r2,40(r2)
 804c400:	10000926 	beq	r2,zero,804c428 <vgetc_locked+0x68>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 804c404:	e0bffd17 	ldw	r2,-12(fp)
 804c408:	10800117 	ldw	r2,4(r2)
 804c40c:	10800a17 	ldw	r2,40(r2)
 804c410:	e0bffe15 	stw	r2,-8(fp)
         return (vfp->r_fgetc(vfd));
 804c414:	e0bffe17 	ldw	r2,-8(fp)
 804c418:	10800717 	ldw	r2,28(r2)
 804c41c:	e13ffd17 	ldw	r4,-12(fp)
 804c420:	103ee83a 	callr	r2
 804c424:	00001f06 	br	804c4a4 <vgetc_locked+0xe4>
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
 804c428:	e0bffd17 	ldw	r2,-12(fp)
 804c42c:	10800117 	ldw	r2,4(r2)
 804c430:	10800617 	ldw	r2,24(r2)
 804c434:	1000021e 	bne	r2,zero,804c440 <vgetc_locked+0x80>
         return EOF;
 804c438:	00bfffc4 	movi	r2,-1
 804c43c:	00001906 	br	804c4a4 <vgetc_locked+0xe4>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
 804c440:	e0bffd17 	ldw	r2,-12(fp)
 804c444:	10c00217 	ldw	r3,8(r2)
 804c448:	e0bffd17 	ldw	r2,-12(fp)
 804c44c:	10800117 	ldw	r2,4(r2)
 804c450:	11000617 	ldw	r4,24(r2)
 804c454:	e0bffd17 	ldw	r2,-12(fp)
 804c458:	10800117 	ldw	r2,4(r2)
 804c45c:	10800817 	ldw	r2,32(r2)
 804c460:	2085883a 	add	r2,r4,r2
 804c464:	18800336 	bltu	r3,r2,804c474 <vgetc_locked+0xb4>
            chr = EOF;
 804c468:	00bfffc4 	movi	r2,-1
 804c46c:	e0bfff15 	stw	r2,-4(fp)
 804c470:	00000806 	br	804c494 <vgetc_locked+0xd4>
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
 804c474:	e0bffd17 	ldw	r2,-12(fp)
 804c478:	10800217 	ldw	r2,8(r2)
 804c47c:	11000044 	addi	r4,r2,1
 804c480:	e0fffd17 	ldw	r3,-12(fp)
 804c484:	19000215 	stw	r4,8(r3)
 804c488:	10800003 	ldbu	r2,0(r2)
 804c48c:	10803fcc 	andi	r2,r2,255
 804c490:	e0bfff15 	stw	r2,-4(fp)
#ifdef HTML_COMPRESSION
      }  /* need to close brace form if...else; */
#endif   /* HTML_COMPRESSION */

      return chr;
 804c494:	e0bfff17 	ldw	r2,-4(fp)
 804c498:	00000206 	br	804c4a4 <vgetc_locked+0xe4>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
 804c49c:	80301a80 	call	80301a8 <dtrap>
   return EOF;
 804c4a0:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 804c4a4:	e037883a 	mov	sp,fp
 804c4a8:	dfc00117 	ldw	ra,4(sp)
 804c4ac:	df000017 	ldw	fp,0(sp)
 804c4b0:	dec00204 	addi	sp,sp,8
 804c4b4:	f800283a 	ret

0804c4b8 <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 804c4b8:	defffc04 	addi	sp,sp,-16
 804c4bc:	dfc00315 	stw	ra,12(sp)
 804c4c0:	df000215 	stw	fp,8(sp)
 804c4c4:	df000204 	addi	fp,sp,8
 804c4c8:	e13ffe15 	stw	r4,-8(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 804c4cc:	01000144 	movi	r4,5
 804c4d0:	80307900 	call	8030790 <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
 804c4d4:	e13ffe17 	ldw	r4,-8(fp)
 804c4d8:	804c3c00 	call	804c3c0 <vgetc_locked>
 804c4dc:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 804c4e0:	01000144 	movi	r4,5
 804c4e4:	80308440 	call	8030844 <post_app_sem>
   return rc;
 804c4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 804c4ec:	e037883a 	mov	sp,fp
 804c4f0:	dfc00117 	ldw	ra,4(sp)
 804c4f4:	df000017 	ldw	fp,0(sp)
 804c4f8:	dec00204 	addi	sp,sp,8
 804c4fc:	f800283a 	ret

0804c500 <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
 804c500:	defffb04 	addi	sp,sp,-20
 804c504:	dfc00415 	stw	ra,16(sp)
 804c508:	df000315 	stw	fp,12(sp)
 804c50c:	df000304 	addi	fp,sp,12
 804c510:	e13ffd15 	stw	r4,-12(fp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
 804c514:	e0bffd17 	ldw	r2,-12(fp)
 804c518:	10800003 	ldbu	r2,0(r2)
 804c51c:	10803fcc 	andi	r2,r2,255
 804c520:	1080201c 	xori	r2,r2,128
 804c524:	10bfe004 	addi	r2,r2,-128
 804c528:	10800be0 	cmpeqi	r2,r2,47
 804c52c:	1000071e 	bne	r2,zero,804c54c <vfslookup_locked+0x4c>
 804c530:	e0bffd17 	ldw	r2,-12(fp)
 804c534:	10800003 	ldbu	r2,0(r2)
 804c538:	10803fcc 	andi	r2,r2,255
 804c53c:	1080201c 	xori	r2,r2,128
 804c540:	10bfe004 	addi	r2,r2,-128
 804c544:	10801718 	cmpnei	r2,r2,92
 804c548:	1000191e 	bne	r2,zero,804c5b0 <vfslookup_locked+0xb0>
   {
      cp = strippath(name);
 804c54c:	e13ffd17 	ldw	r4,-12(fp)
 804c550:	804c66c0 	call	804c66c <strippath>
 804c554:	e0bffe15 	stw	r2,-8(fp)

      if (!cp) /* strippath coundn't match our path */
 804c558:	e0bffe17 	ldw	r2,-8(fp)
 804c55c:	1000121e 	bne	r2,zero,804c5a8 <vfslookup_locked+0xa8>
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
 804c560:	e0bffd17 	ldw	r2,-12(fp)
 804c564:	10800003 	ldbu	r2,0(r2)
 804c568:	10803fcc 	andi	r2,r2,255
 804c56c:	1080201c 	xori	r2,r2,128
 804c570:	10bfe004 	addi	r2,r2,-128
 804c574:	10800be0 	cmpeqi	r2,r2,47
 804c578:	1000071e 	bne	r2,zero,804c598 <vfslookup_locked+0x98>
 804c57c:	e0bffd17 	ldw	r2,-12(fp)
 804c580:	10800003 	ldbu	r2,0(r2)
 804c584:	10803fcc 	andi	r2,r2,255
 804c588:	1080201c 	xori	r2,r2,128
 804c58c:	10bfe004 	addi	r2,r2,-128
 804c590:	10801718 	cmpnei	r2,r2,92
 804c594:	1000061e 	bne	r2,zero,804c5b0 <vfslookup_locked+0xb0>
            name++;
 804c598:	e0bffd17 	ldw	r2,-12(fp)
 804c59c:	10800044 	addi	r2,r2,1
 804c5a0:	e0bffd15 	stw	r2,-12(fp)
 804c5a4:	00000206 	br	804c5b0 <vfslookup_locked+0xb0>
      }
      else
         name = cp ;
 804c5a8:	e0bffe17 	ldw	r2,-8(fp)
 804c5ac:	e0bffd15 	stw	r2,-12(fp)
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
 804c5b0:	01400fc4 	movi	r5,63
 804c5b4:	e13ffd17 	ldw	r4,-12(fp)
 804c5b8:	804e0a40 	call	804e0a4 <strchr>
 804c5bc:	10000326 	beq	r2,zero,804c5cc <vfslookup_locked+0xcc>
   {
      dtrap(); /* is this still allowed? */
 804c5c0:	80301a80 	call	80301a8 <dtrap>
      return NULL;
 804c5c4:	0005883a 	mov	r2,zero
 804c5c8:	00001106 	br	804c610 <vfslookup_locked+0x110>
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 804c5cc:	d0a0d117 	ldw	r2,-31932(gp)
 804c5d0:	e0bfff15 	stw	r2,-4(fp)
 804c5d4:	00000b06 	br	804c604 <vfslookup_locked+0x104>
   {
      if (strcmp(name, vp->name) == 0)
 804c5d8:	e0bfff17 	ldw	r2,-4(fp)
 804c5dc:	10800104 	addi	r2,r2,4
 804c5e0:	100b883a 	mov	r5,r2
 804c5e4:	e13ffd17 	ldw	r4,-12(fp)
 804c5e8:	8010f080 	call	8010f08 <strcmp>
 804c5ec:	1000021e 	bne	r2,zero,804c5f8 <vfslookup_locked+0xf8>
         return vp;
 804c5f0:	e0bfff17 	ldw	r2,-4(fp)
 804c5f4:	00000606 	br	804c610 <vfslookup_locked+0x110>
   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 804c5f8:	e0bfff17 	ldw	r2,-4(fp)
 804c5fc:	10800017 	ldw	r2,0(r2)
 804c600:	e0bfff15 	stw	r2,-4(fp)
 804c604:	e0bfff17 	ldw	r2,-4(fp)
 804c608:	103ff31e 	bne	r2,zero,804c5d8 <vfslookup_locked+0xd8>
   }

   return NULL;   /* fall to here if not found in for loop */
 804c60c:	0005883a 	mov	r2,zero
}
 804c610:	e037883a 	mov	sp,fp
 804c614:	dfc00117 	ldw	ra,4(sp)
 804c618:	df000017 	ldw	fp,0(sp)
 804c61c:	dec00204 	addi	sp,sp,8
 804c620:	f800283a 	ret

0804c624 <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 804c624:	defffc04 	addi	sp,sp,-16
 804c628:	dfc00315 	stw	ra,12(sp)
 804c62c:	df000215 	stw	fp,8(sp)
 804c630:	df000204 	addi	fp,sp,8
 804c634:	e13ffe15 	stw	r4,-8(fp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 804c638:	01000144 	movi	r4,5
 804c63c:	80307900 	call	8030790 <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
 804c640:	e13ffe17 	ldw	r4,-8(fp)
 804c644:	804c5000 	call	804c500 <vfslookup_locked>
 804c648:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 804c64c:	01000144 	movi	r4,5
 804c650:	80308440 	call	8030844 <post_app_sem>
   return vp;
 804c654:	e0bfff17 	ldw	r2,-4(fp)
}
 804c658:	e037883a 	mov	sp,fp
 804c65c:	dfc00117 	ldw	ra,4(sp)
 804c660:	df000017 	ldw	fp,0(sp)
 804c664:	dec00204 	addi	sp,sp,8
 804c668:	f800283a 	ret

0804c66c <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
 804c66c:	defff904 	addi	sp,sp,-28
 804c670:	dfc00615 	stw	ra,24(sp)
 804c674:	df000515 	stw	fp,20(sp)
 804c678:	df000504 	addi	fp,sp,20
 804c67c:	e13ffb15 	stw	r4,-20(fp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
 804c680:	e13ffb17 	ldw	r4,-20(fp)
 804c684:	802bf280 	call	802bf28 <uslash>
 804c688:	e0bffe15 	stw	r2,-8(fp)
   path = http_root_path; /* The servers root path, at least one UNIX slash */
 804c68c:	d0a05317 	ldw	r2,-32436(gp)
 804c690:	e0bfff15 	stw	r2,-4(fp)
   while (*path && *ntmp)
 804c694:	00003a06 	br	804c780 <strippath+0x114>
   {
      while (*path == '/') path++;   /* strip leading slash */
 804c698:	e0bfff17 	ldw	r2,-4(fp)
 804c69c:	10800044 	addi	r2,r2,1
 804c6a0:	e0bfff15 	stw	r2,-4(fp)
 804c6a4:	e0bfff17 	ldw	r2,-4(fp)
 804c6a8:	10800003 	ldbu	r2,0(r2)
 804c6ac:	10803fcc 	andi	r2,r2,255
 804c6b0:	1080201c 	xori	r2,r2,128
 804c6b4:	10bfe004 	addi	r2,r2,-128
 804c6b8:	10800be0 	cmpeqi	r2,r2,47
 804c6bc:	103ff61e 	bne	r2,zero,804c698 <strippath+0x2c>
         if (*path == 0)
 804c6c0:	e0bfff17 	ldw	r2,-4(fp)
 804c6c4:	10800003 	ldbu	r2,0(r2)
 804c6c8:	10803fcc 	andi	r2,r2,255
 804c6cc:	1080201c 	xori	r2,r2,128
 804c6d0:	10bfe004 	addi	r2,r2,-128
 804c6d4:	10003726 	beq	r2,zero,804c7b4 <strippath+0x148>
         break;
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
 804c6d8:	01400bc4 	movi	r5,47
 804c6dc:	e13fff17 	ldw	r4,-4(fp)
 804c6e0:	804e0a40 	call	804e0a4 <strchr>
 804c6e4:	e0bffc15 	stw	r2,-16(fp)
      if (ptmp)
 804c6e8:	e0bffc17 	ldw	r2,-16(fp)
 804c6ec:	10000526 	beq	r2,zero,804c704 <strippath+0x98>
         dirlen = ptmp - path;
 804c6f0:	e0fffc17 	ldw	r3,-16(fp)
 804c6f4:	e0bfff17 	ldw	r2,-4(fp)
 804c6f8:	1885c83a 	sub	r2,r3,r2
 804c6fc:	e0bffd15 	stw	r2,-12(fp)
 804c700:	00000706 	br	804c720 <strippath+0xb4>
      else
         dirlen = strlen(path);
 804c704:	e13fff17 	ldw	r4,-4(fp)
 804c708:	80044880 	call	8004488 <strlen>
 804c70c:	e0bffd15 	stw	r2,-12(fp)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
 804c710:	00000306 	br	804c720 <strippath+0xb4>
 804c714:	e0bffe17 	ldw	r2,-8(fp)
 804c718:	10800044 	addi	r2,r2,1
 804c71c:	e0bffe15 	stw	r2,-8(fp)
 804c720:	e0bffe17 	ldw	r2,-8(fp)
 804c724:	10800003 	ldbu	r2,0(r2)
 804c728:	10803fcc 	andi	r2,r2,255
 804c72c:	1080201c 	xori	r2,r2,128
 804c730:	10bfe004 	addi	r2,r2,-128
 804c734:	10800be0 	cmpeqi	r2,r2,47
 804c738:	103ff61e 	bne	r2,zero,804c714 <strippath+0xa8>
         if (strncmp(ntmp, path, dirlen) == 0)
 804c73c:	e0bffd17 	ldw	r2,-12(fp)
 804c740:	100d883a 	mov	r6,r2
 804c744:	e17fff17 	ldw	r5,-4(fp)
 804c748:	e13ffe17 	ldw	r4,-8(fp)
 804c74c:	804e2000 	call	804e200 <strncmp>
 804c750:	1000091e 	bne	r2,zero,804c778 <strippath+0x10c>
      {
         path += dirlen;
 804c754:	e0bffd17 	ldw	r2,-12(fp)
 804c758:	e0ffff17 	ldw	r3,-4(fp)
 804c75c:	1885883a 	add	r2,r3,r2
 804c760:	e0bfff15 	stw	r2,-4(fp)
         ntmp += dirlen;
 804c764:	e0bffd17 	ldw	r2,-12(fp)
 804c768:	e0fffe17 	ldw	r3,-8(fp)
 804c76c:	1885883a 	add	r2,r3,r2
 804c770:	e0bffe15 	stw	r2,-8(fp)
 804c774:	00000206 	br	804c780 <strippath+0x114>
      }
      else
         return NULL;   /* didn't match */
 804c778:	0005883a 	mov	r2,zero
 804c77c:	00002906 	br	804c824 <strippath+0x1b8>
   while (*path && *ntmp)
 804c780:	e0bfff17 	ldw	r2,-4(fp)
 804c784:	10800003 	ldbu	r2,0(r2)
 804c788:	10803fcc 	andi	r2,r2,255
 804c78c:	1080201c 	xori	r2,r2,128
 804c790:	10bfe004 	addi	r2,r2,-128
 804c794:	10000826 	beq	r2,zero,804c7b8 <strippath+0x14c>
 804c798:	e0bffe17 	ldw	r2,-8(fp)
 804c79c:	10800003 	ldbu	r2,0(r2)
 804c7a0:	10803fcc 	andi	r2,r2,255
 804c7a4:	1080201c 	xori	r2,r2,128
 804c7a8:	10bfe004 	addi	r2,r2,-128
 804c7ac:	103fbd1e 	bne	r2,zero,804c6a4 <strippath+0x38>
 804c7b0:	00000106 	br	804c7b8 <strippath+0x14c>
         break;
 804c7b4:	0001883a 	nop
   }
   if (*path == '\0')
 804c7b8:	e0bfff17 	ldw	r2,-4(fp)
 804c7bc:	10800003 	ldbu	r2,0(r2)
 804c7c0:	10803fcc 	andi	r2,r2,255
 804c7c4:	1080201c 	xori	r2,r2,128
 804c7c8:	10bfe004 	addi	r2,r2,-128
 804c7cc:	1000141e 	bne	r2,zero,804c820 <strippath+0x1b4>
   {
      while (*ntmp == '\\' || *ntmp == '/')
 804c7d0:	00000306 	br	804c7e0 <strippath+0x174>
         ntmp++;
 804c7d4:	e0bffe17 	ldw	r2,-8(fp)
 804c7d8:	10800044 	addi	r2,r2,1
 804c7dc:	e0bffe15 	stw	r2,-8(fp)
      while (*ntmp == '\\' || *ntmp == '/')
 804c7e0:	e0bffe17 	ldw	r2,-8(fp)
 804c7e4:	10800003 	ldbu	r2,0(r2)
 804c7e8:	10803fcc 	andi	r2,r2,255
 804c7ec:	1080201c 	xori	r2,r2,128
 804c7f0:	10bfe004 	addi	r2,r2,-128
 804c7f4:	10801720 	cmpeqi	r2,r2,92
 804c7f8:	103ff61e 	bne	r2,zero,804c7d4 <strippath+0x168>
 804c7fc:	e0bffe17 	ldw	r2,-8(fp)
 804c800:	10800003 	ldbu	r2,0(r2)
 804c804:	10803fcc 	andi	r2,r2,255
 804c808:	1080201c 	xori	r2,r2,128
 804c80c:	10bfe004 	addi	r2,r2,-128
 804c810:	10800be0 	cmpeqi	r2,r2,47
 804c814:	103fef1e 	bne	r2,zero,804c7d4 <strippath+0x168>
      return ntmp;
 804c818:	e0bffe17 	ldw	r2,-8(fp)
 804c81c:	00000106 	br	804c824 <strippath+0x1b8>
   }
   else
      return NULL;
 804c820:	0005883a 	mov	r2,zero
}
 804c824:	e037883a 	mov	sp,fp
 804c828:	dfc00117 	ldw	ra,4(sp)
 804c82c:	df000017 	ldw	fp,0(sp)
 804c830:	dec00204 	addi	sp,sp,8
 804c834:	f800283a 	ret

0804c838 <isvfile_locked>:
 * RETURNS: 
 */

int
isvfile_locked(VFILE * vfp)
{
 804c838:	defffd04 	addi	sp,sp,-12
 804c83c:	df000215 	stw	fp,8(sp)
 804c840:	df000204 	addi	fp,sp,8
 804c844:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 804c848:	d0a0d017 	ldw	r2,-31936(gp)
 804c84c:	e0bfff15 	stw	r2,-4(fp)
 804c850:	00000806 	br	804c874 <isvfile_locked+0x3c>
      if (vtmp == vfp)
 804c854:	e0ffff17 	ldw	r3,-4(fp)
 804c858:	e0bffe17 	ldw	r2,-8(fp)
 804c85c:	1880021e 	bne	r3,r2,804c868 <isvfile_locked+0x30>
      return TRUE;
 804c860:	00800044 	movi	r2,1
 804c864:	00000606 	br	804c880 <isvfile_locked+0x48>
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 804c868:	e0bfff17 	ldw	r2,-4(fp)
 804c86c:	10800017 	ldw	r2,0(r2)
 804c870:	e0bfff15 	stw	r2,-4(fp)
 804c874:	e0bfff17 	ldw	r2,-4(fp)
 804c878:	103ff61e 	bne	r2,zero,804c854 <isvfile_locked+0x1c>

   return FALSE;  /* passed pointer not found in list */
 804c87c:	0005883a 	mov	r2,zero
}
 804c880:	e037883a 	mov	sp,fp
 804c884:	df000017 	ldw	fp,0(sp)
 804c888:	dec00104 	addi	sp,sp,4
 804c88c:	f800283a 	ret

0804c890 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 804c890:	defffc04 	addi	sp,sp,-16
 804c894:	dfc00315 	stw	ra,12(sp)
 804c898:	df000215 	stw	fp,8(sp)
 804c89c:	df000204 	addi	fp,sp,8
 804c8a0:	e13ffe15 	stw	r4,-8(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 804c8a4:	01000144 	movi	r4,5
 804c8a8:	80307900 	call	8030790 <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
 804c8ac:	e13ffe17 	ldw	r4,-8(fp)
 804c8b0:	804c8380 	call	804c838 <isvfile_locked>
 804c8b4:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 804c8b8:	01000144 	movi	r4,5
 804c8bc:	80308440 	call	8030844 <post_app_sem>
   return rc;
 804c8c0:	e0bfff17 	ldw	r2,-4(fp)
}
 804c8c4:	e037883a 	mov	sp,fp
 804c8c8:	dfc00117 	ldw	ra,4(sp)
 804c8cc:	df000017 	ldw	fp,0(sp)
 804c8d0:	dec00204 	addi	sp,sp,8
 804c8d4:	f800283a 	ret

0804c8d8 <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
 804c8d8:	defffd04 	addi	sp,sp,-12
 804c8dc:	dfc00215 	stw	ra,8(sp)
 804c8e0:	df000115 	stw	fp,4(sp)
 804c8e4:	df000104 	addi	fp,sp,4
 804c8e8:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
 804c8ec:	01000144 	movi	r4,5
 804c8f0:	80307900 	call	8030790 <wait_app_sem>

   if (isvfile_locked(vfd))
 804c8f4:	e13fff17 	ldw	r4,-4(fp)
 804c8f8:	804c8380 	call	804c838 <isvfile_locked>
 804c8fc:	10000526 	beq	r2,zero,804c914 <vferror+0x3c>
   {
      vfs_unlock();
 804c900:	01000144 	movi	r4,5
 804c904:	80308440 	call	8030844 <post_app_sem>

      return vfd->error;
 804c908:	e0bfff17 	ldw	r2,-4(fp)
 804c90c:	10800417 	ldw	r2,16(r2)
 804c910:	00000306 	br	804c920 <vferror+0x48>
   }

   vfs_unlock();
 804c914:	01000144 	movi	r4,5
 804c918:	80308440 	call	8030844 <post_app_sem>

#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
 804c91c:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 804c920:	e037883a 	mov	sp,fp
 804c924:	dfc00117 	ldw	ra,4(sp)
 804c928:	df000017 	ldw	fp,0(sp)
 804c92c:	dec00204 	addi	sp,sp,8
 804c930:	f800283a 	ret

0804c934 <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
 804c934:	defffd04 	addi	sp,sp,-12
 804c938:	dfc00215 	stw	ra,8(sp)
 804c93c:	df000115 	stw	fp,4(sp)
 804c940:	df000104 	addi	fp,sp,4
 804c944:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
 804c948:	01000144 	movi	r4,5
 804c94c:	80307900 	call	8030790 <wait_app_sem>

   if (isvfile_locked(vfd))
 804c950:	e13fff17 	ldw	r4,-4(fp)
 804c954:	804c8380 	call	804c838 <isvfile_locked>
 804c958:	10000526 	beq	r2,zero,804c970 <vclearerr+0x3c>
   {
      vfs_unlock();
 804c95c:	01000144 	movi	r4,5
 804c960:	80308440 	call	8030844 <post_app_sem>

      vfd->error = 0;
 804c964:	e0bfff17 	ldw	r2,-4(fp)
 804c968:	10000415 	stw	zero,16(r2)
      return;
 804c96c:	00000206 	br	804c978 <vclearerr+0x44>
   }

   vfs_unlock();
 804c970:	01000144 	movi	r4,5
 804c974:	80308440 	call	8030844 <post_app_sem>

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
 804c978:	e037883a 	mov	sp,fp
 804c97c:	dfc00117 	ldw	ra,4(sp)
 804c980:	df000017 	ldw	fp,0(sp)
 804c984:	dec00204 	addi	sp,sp,8
 804c988:	f800283a 	ret

0804c98c <prep_vfs>:
 * PARAMS: NONE
 *
 * RETURNS: Error Code or 0 for OK
 */
int prep_vfs(void)
{
 804c98c:	defffe04 	addi	sp,sp,-8
 804c990:	df000115 	stw	fp,4(sp)
 804c994:	df000104 	addi	fp,sp,4
int e = 0;
 804c998:	e03fff15 	stw	zero,-4(fp)
   {
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
 804c99c:	e0bfff17 	ldw	r2,-4(fp)
}
 804c9a0:	e037883a 	mov	sp,fp
 804c9a4:	df000017 	ldw	fp,0(sp)
 804c9a8:	dec00104 	addi	sp,sp,4
 804c9ac:	f800283a 	ret

0804c9b0 <alt_get_errno>:
{
 804c9b0:	defffe04 	addi	sp,sp,-8
 804c9b4:	dfc00115 	stw	ra,4(sp)
 804c9b8:	df000015 	stw	fp,0(sp)
 804c9bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804c9c0:	d0a04317 	ldw	r2,-32500(gp)
 804c9c4:	10000326 	beq	r2,zero,804c9d4 <alt_get_errno+0x24>
 804c9c8:	d0a04317 	ldw	r2,-32500(gp)
 804c9cc:	103ee83a 	callr	r2
 804c9d0:	00000106 	br	804c9d8 <alt_get_errno+0x28>
 804c9d4:	d0a05a04 	addi	r2,gp,-32408
}
 804c9d8:	e037883a 	mov	sp,fp
 804c9dc:	dfc00117 	ldw	ra,4(sp)
 804c9e0:	df000017 	ldw	fp,0(sp)
 804c9e4:	dec00204 	addi	sp,sp,8
 804c9e8:	f800283a 	ret

0804c9ec <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 804c9ec:	defff704 	addi	sp,sp,-36
 804c9f0:	dfc00615 	stw	ra,24(sp)
 804c9f4:	df000515 	stw	fp,20(sp)
 804c9f8:	df000504 	addi	fp,sp,20
 804c9fc:	e13ffc15 	stw	r4,-16(fp)
 804ca00:	e17ffb15 	stw	r5,-20(fp)
 804ca04:	e1800215 	stw	r6,8(fp)
 804ca08:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804ca0c:	e0bffc17 	ldw	r2,-16(fp)
 804ca10:	10000616 	blt	r2,zero,804ca2c <alt_fcntl+0x40>
 804ca14:	e0bffc17 	ldw	r2,-16(fp)
 804ca18:	10c00324 	muli	r3,r2,12
 804ca1c:	00820174 	movhi	r2,2053
 804ca20:	109b0f04 	addi	r2,r2,27708
 804ca24:	1885883a 	add	r2,r3,r2
 804ca28:	00000106 	br	804ca30 <alt_fcntl+0x44>
 804ca2c:	0005883a 	mov	r2,zero
 804ca30:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 804ca34:	e0bfff17 	ldw	r2,-4(fp)
 804ca38:	10002b26 	beq	r2,zero,804cae8 <alt_fcntl+0xfc>
  {
    switch (cmd)
 804ca3c:	e0bffb17 	ldw	r2,-20(fp)
 804ca40:	108000e0 	cmpeqi	r2,r2,3
 804ca44:	1000041e 	bne	r2,zero,804ca58 <alt_fcntl+0x6c>
 804ca48:	e0bffb17 	ldw	r2,-20(fp)
 804ca4c:	10800120 	cmpeqi	r2,r2,4
 804ca50:	1000071e 	bne	r2,zero,804ca70 <alt_fcntl+0x84>
 804ca54:	00001e06 	br	804cad0 <alt_fcntl+0xe4>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 804ca58:	e0bfff17 	ldw	r2,-4(fp)
 804ca5c:	10c00217 	ldw	r3,8(r2)
 804ca60:	00900034 	movhi	r2,16384
 804ca64:	10bfffc4 	addi	r2,r2,-1
 804ca68:	1884703a 	and	r2,r3,r2
 804ca6c:	00002306 	br	804cafc <alt_fcntl+0x110>
    case F_SETFL:
      va_start(argp, cmd);
 804ca70:	e0800204 	addi	r2,fp,8
 804ca74:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
 804ca78:	e0bffd17 	ldw	r2,-12(fp)
 804ca7c:	10c00104 	addi	r3,r2,4
 804ca80:	e0fffd15 	stw	r3,-12(fp)
 804ca84:	10800017 	ldw	r2,0(r2)
 804ca88:	e0bffe15 	stw	r2,-8(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 804ca8c:	e0bfff17 	ldw	r2,-4(fp)
 804ca90:	10c00217 	ldw	r3,8(r2)
 804ca94:	00affdc4 	movi	r2,-16393
 804ca98:	1886703a 	and	r3,r3,r2
 804ca9c:	e0bfff17 	ldw	r2,-4(fp)
 804caa0:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 804caa4:	e0bfff17 	ldw	r2,-4(fp)
 804caa8:	10800217 	ldw	r2,8(r2)
 804caac:	1007883a 	mov	r3,r2
 804cab0:	e0bffe17 	ldw	r2,-8(fp)
 804cab4:	1090020c 	andi	r2,r2,16392
 804cab8:	1884b03a 	or	r2,r3,r2
 804cabc:	1007883a 	mov	r3,r2
 804cac0:	e0bfff17 	ldw	r2,-4(fp)
 804cac4:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
 804cac8:	0005883a 	mov	r2,zero
 804cacc:	00000b06 	br	804cafc <alt_fcntl+0x110>
    default:
      ALT_ERRNO = EINVAL;
 804cad0:	804c9b00 	call	804c9b0 <alt_get_errno>
 804cad4:	1007883a 	mov	r3,r2
 804cad8:	00800584 	movi	r2,22
 804cadc:	18800015 	stw	r2,0(r3)
      return -1;
 804cae0:	00bfffc4 	movi	r2,-1
 804cae4:	00000506 	br	804cafc <alt_fcntl+0x110>
    }
  }

  ALT_ERRNO = EBADFD;
 804cae8:	804c9b00 	call	804c9b0 <alt_get_errno>
 804caec:	1007883a 	mov	r3,r2
 804caf0:	00801444 	movi	r2,81
 804caf4:	18800015 	stw	r2,0(r3)
  return -1;
 804caf8:	00bfffc4 	movi	r2,-1
}
 804cafc:	e037883a 	mov	sp,fp
 804cb00:	dfc00117 	ldw	ra,4(sp)
 804cb04:	df000017 	ldw	fp,0(sp)
 804cb08:	dec00404 	addi	sp,sp,16
 804cb0c:	f800283a 	ret

0804cb10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 804cb10:	defffb04 	addi	sp,sp,-20
 804cb14:	dfc00415 	stw	ra,16(sp)
 804cb18:	df000315 	stw	fp,12(sp)
 804cb1c:	df000304 	addi	fp,sp,12
 804cb20:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 804cb24:	d0a03e17 	ldw	r2,-32520(gp)
 804cb28:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 804cb2c:	00003106 	br	804cbf4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 804cb30:	e0bfff17 	ldw	r2,-4(fp)
 804cb34:	10800217 	ldw	r2,8(r2)
 804cb38:	1009883a 	mov	r4,r2
 804cb3c:	80044880 	call	8004488 <strlen>
 804cb40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 804cb44:	e0bfff17 	ldw	r2,-4(fp)
 804cb48:	10c00217 	ldw	r3,8(r2)
 804cb4c:	e0bffe17 	ldw	r2,-8(fp)
 804cb50:	10bfffc4 	addi	r2,r2,-1
 804cb54:	1885883a 	add	r2,r3,r2
 804cb58:	10800003 	ldbu	r2,0(r2)
 804cb5c:	10803fcc 	andi	r2,r2,255
 804cb60:	1080201c 	xori	r2,r2,128
 804cb64:	10bfe004 	addi	r2,r2,-128
 804cb68:	10800bd8 	cmpnei	r2,r2,47
 804cb6c:	1000031e 	bne	r2,zero,804cb7c <alt_find_file+0x6c>
    {
      len -= 1;
 804cb70:	e0bffe17 	ldw	r2,-8(fp)
 804cb74:	10bfffc4 	addi	r2,r2,-1
 804cb78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 804cb7c:	e0bffe17 	ldw	r2,-8(fp)
 804cb80:	e0fffd17 	ldw	r3,-12(fp)
 804cb84:	1885883a 	add	r2,r3,r2
 804cb88:	10800003 	ldbu	r2,0(r2)
 804cb8c:	10803fcc 	andi	r2,r2,255
 804cb90:	1080201c 	xori	r2,r2,128
 804cb94:	10bfe004 	addi	r2,r2,-128
 804cb98:	10800be0 	cmpeqi	r2,r2,47
 804cb9c:	1000081e 	bne	r2,zero,804cbc0 <alt_find_file+0xb0>
 804cba0:	e0bffe17 	ldw	r2,-8(fp)
 804cba4:	e0fffd17 	ldw	r3,-12(fp)
 804cba8:	1885883a 	add	r2,r3,r2
 804cbac:	10800003 	ldbu	r2,0(r2)
 804cbb0:	10803fcc 	andi	r2,r2,255
 804cbb4:	1080201c 	xori	r2,r2,128
 804cbb8:	10bfe004 	addi	r2,r2,-128
 804cbbc:	10000a1e 	bne	r2,zero,804cbe8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 804cbc0:	e0bfff17 	ldw	r2,-4(fp)
 804cbc4:	10800217 	ldw	r2,8(r2)
 804cbc8:	e0fffe17 	ldw	r3,-8(fp)
 804cbcc:	180d883a 	mov	r6,r3
 804cbd0:	e17ffd17 	ldw	r5,-12(fp)
 804cbd4:	1009883a 	mov	r4,r2
 804cbd8:	80037540 	call	8003754 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 804cbdc:	1000021e 	bne	r2,zero,804cbe8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 804cbe0:	e0bfff17 	ldw	r2,-4(fp)
 804cbe4:	00000706 	br	804cc04 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 804cbe8:	e0bfff17 	ldw	r2,-4(fp)
 804cbec:	10800017 	ldw	r2,0(r2)
 804cbf0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 804cbf4:	e0ffff17 	ldw	r3,-4(fp)
 804cbf8:	d0a03e04 	addi	r2,gp,-32520
 804cbfc:	18bfcc1e 	bne	r3,r2,804cb30 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 804cc00:	0005883a 	mov	r2,zero
}
 804cc04:	e037883a 	mov	sp,fp
 804cc08:	dfc00117 	ldw	ra,4(sp)
 804cc0c:	df000017 	ldw	fp,0(sp)
 804cc10:	dec00204 	addi	sp,sp,8
 804cc14:	f800283a 	ret

0804cc18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 804cc18:	defff904 	addi	sp,sp,-28
 804cc1c:	dfc00615 	stw	ra,24(sp)
 804cc20:	df000515 	stw	fp,20(sp)
 804cc24:	df000504 	addi	fp,sp,20
 804cc28:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
 804cc2c:	00bffa04 	movi	r2,-24
 804cc30:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 804cc34:	d0a0b117 	ldw	r2,-32060(gp)
 804cc38:	e0bffd15 	stw	r2,-12(fp)
 804cc3c:	e03ffc8d 	sth	zero,-14(fp)
  OSSemPend (sem, timeout, &err);
 804cc40:	e0bffc8b 	ldhu	r2,-14(fp)
 804cc44:	e0fffc44 	addi	r3,fp,-15
 804cc48:	180d883a 	mov	r6,r3
 804cc4c:	100b883a 	mov	r5,r2
 804cc50:	e13ffd17 	ldw	r4,-12(fp)
 804cc54:	801a6700 	call	801a670 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 804cc58:	e03fff15 	stw	zero,-4(fp)
 804cc5c:	00001706 	br	804ccbc <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 804cc60:	e0bfff17 	ldw	r2,-4(fp)
 804cc64:	10c00324 	muli	r3,r2,12
 804cc68:	00820174 	movhi	r2,2053
 804cc6c:	1885883a 	add	r2,r3,r2
 804cc70:	109b0f17 	ldw	r2,27708(r2)
 804cc74:	10000e1e 	bne	r2,zero,804ccb0 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 804cc78:	e0bfff17 	ldw	r2,-4(fp)
 804cc7c:	11000324 	muli	r4,r2,12
 804cc80:	e0fffb17 	ldw	r3,-20(fp)
 804cc84:	00820174 	movhi	r2,2053
 804cc88:	2085883a 	add	r2,r4,r2
 804cc8c:	10db0f15 	stw	r3,27708(r2)
      if (i > alt_max_fd)
 804cc90:	d0e04217 	ldw	r3,-32504(gp)
 804cc94:	e0bfff17 	ldw	r2,-4(fp)
 804cc98:	1880020e 	bge	r3,r2,804cca4 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 804cc9c:	e0bfff17 	ldw	r2,-4(fp)
 804cca0:	d0a04215 	stw	r2,-32504(gp)
      }
      rc = i;
 804cca4:	e0bfff17 	ldw	r2,-4(fp)
 804cca8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 804ccac:	00000706 	br	804cccc <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
 804ccb0:	e0bfff17 	ldw	r2,-4(fp)
 804ccb4:	10800044 	addi	r2,r2,1
 804ccb8:	e0bfff15 	stw	r2,-4(fp)
 804ccbc:	e0bfff17 	ldw	r2,-4(fp)
 804ccc0:	10800810 	cmplti	r2,r2,32
 804ccc4:	103fe61e 	bne	r2,zero,804cc60 <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
 804ccc8:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 804cccc:	d0a0b117 	ldw	r2,-32060(gp)
 804ccd0:	1009883a 	mov	r4,r2
 804ccd4:	801a9f80 	call	801a9f8 <OSSemPost>

  return rc;
 804ccd8:	e0bffe17 	ldw	r2,-8(fp)
}
 804ccdc:	e037883a 	mov	sp,fp
 804cce0:	dfc00117 	ldw	ra,4(sp)
 804cce4:	df000017 	ldw	fp,0(sp)
 804cce8:	dec00204 	addi	sp,sp,8
 804ccec:	f800283a 	ret

0804ccf0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 804ccf0:	defffe04 	addi	sp,sp,-8
 804ccf4:	df000115 	stw	fp,4(sp)
 804ccf8:	df000104 	addi	fp,sp,4
 804ccfc:	e13fff15 	stw	r4,-4(fp)
 804cd00:	e0bfff17 	ldw	r2,-4(fp)
 804cd04:	10bffe84 	addi	r2,r2,-6
 804cd08:	10c00428 	cmpgeui	r3,r2,16
 804cd0c:	1800191e 	bne	r3,zero,804cd74 <alt_exception_cause_generated_bad_addr+0x84>
 804cd10:	100690ba 	slli	r3,r2,2
 804cd14:	00820174 	movhi	r2,2053
 804cd18:	1885883a 	add	r2,r3,r2
 804cd1c:	10b34917 	ldw	r2,-13020(r2)
 804cd20:	1000683a 	jmp	r2
 804cd24:	0804cd64 	muli	zero,at,4917
 804cd28:	0804cd64 	muli	zero,at,4917
 804cd2c:	0804cd74 	orhi	zero,at,4917
 804cd30:	0804cd74 	orhi	zero,at,4917
 804cd34:	0804cd74 	orhi	zero,at,4917
 804cd38:	0804cd64 	muli	zero,at,4917
 804cd3c:	0804cd6c 	andhi	zero,at,4917
 804cd40:	0804cd74 	orhi	zero,at,4917
 804cd44:	0804cd64 	muli	zero,at,4917
 804cd48:	0804cd64 	muli	zero,at,4917
 804cd4c:	0804cd74 	orhi	zero,at,4917
 804cd50:	0804cd64 	muli	zero,at,4917
 804cd54:	0804cd6c 	andhi	zero,at,4917
 804cd58:	0804cd74 	orhi	zero,at,4917
 804cd5c:	0804cd74 	orhi	zero,at,4917
 804cd60:	0804cd64 	muli	zero,at,4917
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 804cd64:	00800044 	movi	r2,1
 804cd68:	00000306 	br	804cd78 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 804cd6c:	0005883a 	mov	r2,zero
 804cd70:	00000106 	br	804cd78 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 804cd74:	0005883a 	mov	r2,zero
  }
}
 804cd78:	e037883a 	mov	sp,fp
 804cd7c:	df000017 	ldw	fp,0(sp)
 804cd80:	dec00104 	addi	sp,sp,4
 804cd84:	f800283a 	ret

0804cd88 <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 804cd88:	deffef04 	addi	sp,sp,-68
 804cd8c:	dfc01015 	stw	ra,64(sp)
 804cd90:	df000f15 	stw	fp,60(sp)
 804cd94:	dc400e15 	stw	r17,56(sp)
 804cd98:	dc000d15 	stw	r16,52(sp)
 804cd9c:	df000f04 	addi	fp,sp,60
 804cda0:	e13ff315 	stw	r4,-52(fp)
   unsigned short xsum;
#ifdef FULL_ICMP
   struct redirect * rd;
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
 804cda4:	e03ffdc5 	stb	zero,-9(fp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
 804cda8:	008201b4 	movhi	r2,2054
 804cdac:	10803217 	ldw	r2,200(r2)
 804cdb0:	10c00044 	addi	r3,r2,1
 804cdb4:	008201b4 	movhi	r2,2054
 804cdb8:	10c03215 	stw	r3,200(r2)

   pip = ip_head(p);                      /* find IP header */
 804cdbc:	e0bff317 	ldw	r2,-52(fp)
 804cdc0:	10800317 	ldw	r2,12(r2)
 804cdc4:	e0bffc15 	stw	r2,-16(fp)
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
 804cdc8:	e0bff317 	ldw	r2,-52(fp)
 804cdcc:	10c00417 	ldw	r3,16(r2)
 804cdd0:	e0bffc17 	ldw	r2,-16(fp)
 804cdd4:	10800003 	ldbu	r2,0(r2)
 804cdd8:	10803fcc 	andi	r2,r2,255
 804cddc:	100490ba 	slli	r2,r2,2
 804cde0:	10800f0c 	andi	r2,r2,60
 804cde4:	1885c83a 	sub	r2,r3,r2
 804cde8:	e0bffb15 	stw	r2,-20(fp)
   host = p->fhost;                       /* filled in by IP layer */
 804cdec:	e0bff317 	ldw	r2,-52(fp)
 804cdf0:	10800717 	ldw	r2,28(r2)
 804cdf4:	e0bffa15 	stw	r2,-24(fp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 804cdf8:	d0a07e17 	ldw	r2,-32264(gp)
 804cdfc:	1081000c 	andi	r2,r2,1024
 804ce00:	10001526 	beq	r2,zero,804ce58 <icmprcv+0xd0>
 804ce04:	d0a07e17 	ldw	r2,-32264(gp)
 804ce08:	1080800c 	andi	r2,r2,512
 804ce0c:	10001226 	beq	r2,zero,804ce58 <icmprcv+0xd0>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
 804ce10:	e0bffa17 	ldw	r2,-24(fp)
 804ce14:	11003fcc 	andi	r4,r2,255
 804ce18:	e0bffa17 	ldw	r2,-24(fp)
 804ce1c:	1004d23a 	srli	r2,r2,8
 804ce20:	11403fcc 	andi	r5,r2,255
 804ce24:	e0bffa17 	ldw	r2,-24(fp)
 804ce28:	1004d43a 	srli	r2,r2,16
 804ce2c:	10803fcc 	andi	r2,r2,255
 804ce30:	e0fffa17 	ldw	r3,-24(fp)
 804ce34:	1806d63a 	srli	r3,r3,24
 804ce38:	d8c00115 	stw	r3,4(sp)
 804ce3c:	d8800015 	stw	r2,0(sp)
 804ce40:	280f883a 	mov	r7,r5
 804ce44:	200d883a 	mov	r6,r4
 804ce48:	e17ffb17 	ldw	r5,-20(fp)
 804ce4c:	01020174 	movhi	r4,2053
 804ce50:	21128904 	addi	r4,r4,18980
 804ce54:	8003b840 	call	8003b84 <printf>
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
 804ce58:	e0bffc17 	ldw	r2,-16(fp)
 804ce5c:	10800003 	ldbu	r2,0(r2)
 804ce60:	10803fcc 	andi	r2,r2,255
 804ce64:	100490ba 	slli	r2,r2,2
 804ce68:	10800f0c 	andi	r2,r2,60
 804ce6c:	e0fffc17 	ldw	r3,-16(fp)
 804ce70:	1885883a 	add	r2,r3,r2
 804ce74:	e0bff915 	stw	r2,-28(fp)

   osum = e->pchksum;
 804ce78:	e0bff917 	ldw	r2,-28(fp)
 804ce7c:	1080008b 	ldhu	r2,2(r2)
 804ce80:	e0bff88d 	sth	r2,-30(fp)
   e->pchksum = 0;
 804ce84:	e0bff917 	ldw	r2,-28(fp)
 804ce88:	1000008d 	sth	zero,2(r2)

   if (len&1)
 804ce8c:	e0bffb17 	ldw	r2,-20(fp)
 804ce90:	1080004c 	andi	r2,r2,1
 804ce94:	10000926 	beq	r2,zero,804cebc <icmprcv+0x134>
   {
      sav_ch = *(((char *) e) + len);
 804ce98:	e0fff917 	ldw	r3,-28(fp)
 804ce9c:	e0bffb17 	ldw	r2,-20(fp)
 804cea0:	1885883a 	add	r2,r3,r2
 804cea4:	10800003 	ldbu	r2,0(r2)
 804cea8:	e0bffdc5 	stb	r2,-9(fp)
      ((char *)e)[len] = 0;
 804ceac:	e0fff917 	ldw	r3,-28(fp)
 804ceb0:	e0bffb17 	ldw	r2,-20(fp)
 804ceb4:	1885883a 	add	r2,r3,r2
 804ceb8:	10000005 	stb	zero,0(r2)
   }

   xsum = ~cksum(e, (len+1)>>1);
 804cebc:	e0bffb17 	ldw	r2,-20(fp)
 804cec0:	10800044 	addi	r2,r2,1
 804cec4:	1004d07a 	srli	r2,r2,1
 804cec8:	100b883a 	mov	r5,r2
 804cecc:	e13ff917 	ldw	r4,-28(fp)
 804ced0:	802b98c0 	call	802b98c <cksum>
 804ced4:	0084303a 	nor	r2,zero,r2
 804ced8:	e0bff80d 	sth	r2,-32(fp)
   if (len&1) *(((char *) e) + len) = sav_ch;
 804cedc:	e0bffb17 	ldw	r2,-20(fp)
 804cee0:	1080004c 	andi	r2,r2,1
 804cee4:	10000526 	beq	r2,zero,804cefc <icmprcv+0x174>
 804cee8:	e0fff917 	ldw	r3,-28(fp)
 804ceec:	e0bffb17 	ldw	r2,-20(fp)
 804cef0:	1885883a 	add	r2,r3,r2
 804cef4:	e0fffdc3 	ldbu	r3,-9(fp)
 804cef8:	10c00005 	stb	r3,0(r2)
   if (xsum != osum)
 804cefc:	e0fff80b 	ldhu	r3,-32(fp)
 804cf00:	e0bff88b 	ldhu	r2,-30(fp)
 804cf04:	18802226 	beq	r3,r2,804cf90 <icmprcv+0x208>
   {
      e->pchksum = osum;
 804cf08:	e0bff917 	ldw	r2,-28(fp)
 804cf0c:	e0fff88b 	ldhu	r3,-30(fp)
 804cf10:	10c0008d 	sth	r3,2(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 804cf14:	d0a07e17 	ldw	r2,-32264(gp)
 804cf18:	1081000c 	andi	r2,r2,1024
 804cf1c:	10000f26 	beq	r2,zero,804cf5c <icmprcv+0x1d4>
 804cf20:	d0a07e17 	ldw	r2,-32264(gp)
 804cf24:	1080800c 	andi	r2,r2,512
 804cf28:	10000c26 	beq	r2,zero,804cf5c <icmprcv+0x1d4>
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
 804cf2c:	e0bff88b 	ldhu	r2,-30(fp)
 804cf30:	e0fff80b 	ldhu	r3,-32(fp)
 804cf34:	180d883a 	mov	r6,r3
 804cf38:	100b883a 	mov	r5,r2
 804cf3c:	01020174 	movhi	r4,2053
 804cf40:	21129104 	addi	r4,r4,19012
 804cf44:	8003b840 	call	8003b84 <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
 804cf48:	d0a07e17 	ldw	r2,-32264(gp)
 804cf4c:	1080008c 	andi	r2,r2,2
 804cf50:	10000226 	beq	r2,zero,804cf5c <icmprcv+0x1d4>
 804cf54:	e13ff317 	ldw	r4,-52(fp)
 804cf58:	80437b00 	call	80437b0 <ip_dump>
      }
#endif
      icmp_mib.icmpInErrors++;
 804cf5c:	008201b4 	movhi	r2,2054
 804cf60:	10803317 	ldw	r2,204(r2)
 804cf64:	10c00044 	addi	r3,r2,1
 804cf68:	008201b4 	movhi	r2,2054
 804cf6c:	10c03315 	stw	r3,204(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804cf70:	01000084 	movi	r4,2
 804cf74:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804cf78:	e13ff317 	ldw	r4,-52(fp)
 804cf7c:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804cf80:	01000084 	movi	r4,2
 804cf84:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 804cf88:	00bff804 	movi	r2,-32
 804cf8c:	00022e06 	br	804d848 <icmprcv+0xac0>
   }

   e->pchksum = osum;
 804cf90:	e0bff917 	ldw	r2,-28(fp)
 804cf94:	e0fff88b 	ldhu	r3,-30(fp)
 804cf98:	10c0008d 	sth	r3,2(r2)

   switch (e->ptype) 
 804cf9c:	e0bff917 	ldw	r2,-28(fp)
 804cfa0:	10800003 	ldbu	r2,0(r2)
 804cfa4:	10803fcc 	andi	r2,r2,255
 804cfa8:	1080201c 	xori	r2,r2,128
 804cfac:	10bfe004 	addi	r2,r2,-128
 804cfb0:	10c00428 	cmpgeui	r3,r2,16
 804cfb4:	18020a1e 	bne	r3,zero,804d7e0 <icmprcv+0xa58>
 804cfb8:	100690ba 	slli	r3,r2,2
 804cfbc:	00820174 	movhi	r2,2053
 804cfc0:	1885883a 	add	r2,r3,r2
 804cfc4:	10b3f317 	ldw	r2,-12340(r2)
 804cfc8:	1000683a 	jmp	r2
 804cfcc:	0804d264 	muli	zero,at,4937
 804cfd0:	0804d7e0 	cmpeqi	zero,at,4959
 804cfd4:	0804d7e0 	cmpeqi	zero,at,4959
 804cfd8:	0804d284 	addi	zero,at,4938
 804cfdc:	0804d378 	rdprs	zero,at,4941
 804cfe0:	0804d40c 	andi	zero,at,4944
 804cfe4:	0804d7e0 	cmpeqi	zero,at,4959
 804cfe8:	0804d7e0 	cmpeqi	zero,at,4959
 804cfec:	0804d00c 	andi	zero,at,4928
 804cff0:	0804d7e0 	cmpeqi	zero,at,4959
 804cff4:	0804d7e0 	cmpeqi	zero,at,4959
 804cff8:	0804d538 	rdprs	zero,at,4948
 804cffc:	0804d638 	rdprs	zero,at,4952
 804d000:	0804d694 	ori	zero,at,4954
 804d004:	0804d7e0 	cmpeqi	zero,at,4959
 804d008:	0804d7ac 	andhi	zero,at,4958
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 804d00c:	008201b4 	movhi	r2,2054
 804d010:	10803917 	ldw	r2,228(r2)
 804d014:	10c00044 	addi	r3,r2,1
 804d018:	008201b4 	movhi	r2,2054
 804d01c:	10c03915 	stw	r3,228(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 804d020:	d0a07e17 	ldw	r2,-32264(gp)
 804d024:	1081000c 	andi	r2,r2,1024
 804d028:	10001426 	beq	r2,zero,804d07c <icmprcv+0x2f4>
 804d02c:	d0a07e17 	ldw	r2,-32264(gp)
 804d030:	1080800c 	andi	r2,r2,512
 804d034:	10001126 	beq	r2,zero,804d07c <icmprcv+0x2f4>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 804d038:	e0bffa17 	ldw	r2,-24(fp)
 804d03c:	10c03fcc 	andi	r3,r2,255
 804d040:	e0bffa17 	ldw	r2,-24(fp)
 804d044:	1004d23a 	srli	r2,r2,8
 804d048:	11003fcc 	andi	r4,r2,255
 804d04c:	e0bffa17 	ldw	r2,-24(fp)
 804d050:	1004d43a 	srli	r2,r2,16
 804d054:	11403fcc 	andi	r5,r2,255
 804d058:	e0bffa17 	ldw	r2,-24(fp)
 804d05c:	1004d63a 	srli	r2,r2,24
 804d060:	d8800015 	stw	r2,0(sp)
 804d064:	280f883a 	mov	r7,r5
 804d068:	200d883a 	mov	r6,r4
 804d06c:	180b883a 	mov	r5,r3
 804d070:	01020174 	movhi	r4,2053
 804d074:	21129c04 	addi	r4,r4,19056
 804d078:	8003b840 	call	8003b84 <printf>
#endif
      e->ptype = ECHOREP;
 804d07c:	e0bff917 	ldw	r2,-28(fp)
 804d080:	10000005 	stb	zero,0(r2)
      e->pchksum = 0;
 804d084:	e0bff917 	ldw	r2,-28(fp)
 804d088:	1000008d 	sth	zero,2(r2)
      if (len&1)  /* pad odd length packets for checksum routine */
 804d08c:	e0bffb17 	ldw	r2,-20(fp)
 804d090:	1080004c 	andi	r2,r2,1
 804d094:	10000926 	beq	r2,zero,804d0bc <icmprcv+0x334>
      {
         sav_ch = *(((char *) e) + len);
 804d098:	e0fff917 	ldw	r3,-28(fp)
 804d09c:	e0bffb17 	ldw	r2,-20(fp)
 804d0a0:	1885883a 	add	r2,r3,r2
 804d0a4:	10800003 	ldbu	r2,0(r2)
 804d0a8:	e0bffdc5 	stb	r2,-9(fp)
         ((char *)e)[len] = 0;
 804d0ac:	e0fff917 	ldw	r3,-28(fp)
 804d0b0:	e0bffb17 	ldw	r2,-20(fp)
 804d0b4:	1885883a 	add	r2,r3,r2
 804d0b8:	10000005 	stb	zero,0(r2)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 804d0bc:	e0bffb17 	ldw	r2,-20(fp)
 804d0c0:	10800044 	addi	r2,r2,1
 804d0c4:	1004d07a 	srli	r2,r2,1
 804d0c8:	100b883a 	mov	r5,r2
 804d0cc:	e13ff917 	ldw	r4,-28(fp)
 804d0d0:	802b98c0 	call	802b98c <cksum>
 804d0d4:	0084303a 	nor	r2,zero,r2
 804d0d8:	1007883a 	mov	r3,r2
 804d0dc:	e0bff917 	ldw	r2,-28(fp)
 804d0e0:	10c0008d 	sth	r3,2(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
 804d0e4:	e0bffb17 	ldw	r2,-20(fp)
 804d0e8:	1080004c 	andi	r2,r2,1
 804d0ec:	10000526 	beq	r2,zero,804d104 <icmprcv+0x37c>
 804d0f0:	e0fff917 	ldw	r3,-28(fp)
 804d0f4:	e0bffb17 	ldw	r2,-20(fp)
 804d0f8:	1885883a 	add	r2,r3,r2
 804d0fc:	e0fffdc3 	ldbu	r3,-9(fp)
 804d100:	10c00005 	stb	r3,0(r2)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
 804d104:	e0bffc17 	ldw	r2,-16(fp)
 804d108:	10800417 	ldw	r2,16(r2)
 804d10c:	10bfffe0 	cmpeqi	r2,r2,-1
 804d110:	10001f1e 	bne	r2,zero,804d190 <icmprcv+0x408>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
 804d114:	e0bffc17 	ldw	r2,-16(fp)
 804d118:	10800417 	ldw	r2,16(r2)
 804d11c:	1006d63a 	srli	r3,r2,24
 804d120:	e0bffc17 	ldw	r2,-16(fp)
 804d124:	10800417 	ldw	r2,16(r2)
 804d128:	1004d23a 	srli	r2,r2,8
 804d12c:	10bfc00c 	andi	r2,r2,65280
 804d130:	1886b03a 	or	r3,r3,r2
 804d134:	e0bffc17 	ldw	r2,-16(fp)
 804d138:	10800417 	ldw	r2,16(r2)
 804d13c:	1004923a 	slli	r2,r2,8
 804d140:	10803fec 	andhi	r2,r2,255
 804d144:	1886b03a 	or	r3,r3,r2
 804d148:	e0bffc17 	ldw	r2,-16(fp)
 804d14c:	10800417 	ldw	r2,16(r2)
 804d150:	1004963a 	slli	r2,r2,24
 804d154:	1884b03a 	or	r2,r3,r2
 804d158:	10fc002c 	andhi	r3,r2,61440
      if ((pip->ip_dest == 0xffffffff) || 
 804d15c:	00b80034 	movhi	r2,57344
 804d160:	18800b26 	beq	r3,r2,804d190 <icmprcv+0x408>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
 804d164:	e0bffc17 	ldw	r2,-16(fp)
 804d168:	10c00417 	ldw	r3,16(r2)
 804d16c:	e0bff317 	ldw	r2,-52(fp)
 804d170:	10800617 	ldw	r2,24(r2)
 804d174:	11000a17 	ldw	r4,40(r2)
 804d178:	e0bff317 	ldw	r2,-52(fp)
 804d17c:	10800617 	ldw	r2,24(r2)
 804d180:	10800c17 	ldw	r2,48(r2)
 804d184:	0084303a 	nor	r2,zero,r2
 804d188:	2084b03a 	or	r2,r4,r2
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
 804d18c:	1880061e 	bne	r3,r2,804d1a8 <icmprcv+0x420>
      {
         pip->ip_src = p->net->n_ipaddr;
 804d190:	e0bff317 	ldw	r2,-52(fp)
 804d194:	10800617 	ldw	r2,24(r2)
 804d198:	10c00a17 	ldw	r3,40(r2)
 804d19c:	e0bffc17 	ldw	r2,-16(fp)
 804d1a0:	10c00315 	stw	r3,12(r2)
 804d1a4:	00000406 	br	804d1b8 <icmprcv+0x430>
      }
      else pip->ip_src = pip->ip_dest;
 804d1a8:	e0bffc17 	ldw	r2,-16(fp)
 804d1ac:	10c00417 	ldw	r3,16(r2)
 804d1b0:	e0bffc17 	ldw	r2,-16(fp)
 804d1b4:	10c00315 	stw	r3,12(r2)

      pip->ip_dest = host;
 804d1b8:	e0bffc17 	ldw	r2,-16(fp)
 804d1bc:	e0fffa17 	ldw	r3,-24(fp)
 804d1c0:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutEchoReps++;
 804d1c4:	008201b4 	movhi	r2,2054
 804d1c8:	10804717 	ldw	r2,284(r2)
 804d1cc:	10c00044 	addi	r3,r2,1
 804d1d0:	008201b4 	movhi	r2,2054
 804d1d4:	10c04715 	stw	r3,284(r2)
      icmp_mib.icmpOutMsgs++;
 804d1d8:	008201b4 	movhi	r2,2054
 804d1dc:	10803f17 	ldw	r2,252(r2)
 804d1e0:	10c00044 	addi	r3,r2,1
 804d1e4:	008201b4 	movhi	r2,2054
 804d1e8:	10c03f15 	stw	r3,252(r2)
      p->fhost = host;
 804d1ec:	e0bff317 	ldw	r2,-52(fp)
 804d1f0:	e0fffa17 	ldw	r3,-24(fp)
 804d1f4:	10c00715 	stw	r3,28(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 804d1f8:	e0bff317 	ldw	r2,-52(fp)
 804d1fc:	10c00317 	ldw	r3,12(r2)
 804d200:	e0bffc17 	ldw	r2,-16(fp)
 804d204:	10800003 	ldbu	r2,0(r2)
 804d208:	10803fcc 	andi	r2,r2,255
 804d20c:	100490ba 	slli	r2,r2,2
 804d210:	10800f0c 	andi	r2,r2,60
 804d214:	1887883a 	add	r3,r3,r2
 804d218:	e0bff317 	ldw	r2,-52(fp)
 804d21c:	10c00315 	stw	r3,12(r2)
      p->nb_plen = len;
 804d220:	e0bff317 	ldw	r2,-52(fp)
 804d224:	e0fffb17 	ldw	r3,-20(fp)
 804d228:	10c00415 	stw	r3,16(r2)

      i = ip_write(ICMP_PROT, p);
 804d22c:	e17ff317 	ldw	r5,-52(fp)
 804d230:	01000044 	movi	r4,1
 804d234:	80427300 	call	8042730 <ip_write>
 804d238:	e0bff715 	stw	r2,-36(fp)
      if (i < 0)
 804d23c:	e0bff717 	ldw	r2,-36(fp)
 804d240:	1000060e 	bge	r2,zero,804d25c <icmprcv+0x4d4>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
 804d244:	d0a07e17 	ldw	r2,-32264(gp)
 804d248:	1081000c 	andi	r2,r2,1024
 804d24c:	10000326 	beq	r2,zero,804d25c <icmprcv+0x4d4>
            dprintf("icmp: reply failed\n");
 804d250:	01020174 	movhi	r4,2053
 804d254:	2112a504 	addi	r4,r4,19092
 804d258:	8003ca80 	call	8003ca8 <puts>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
 804d25c:	0005883a 	mov	r2,zero
 804d260:	00017906 	br	804d848 <icmprcv+0xac0>
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
 804d264:	008201b4 	movhi	r2,2054
 804d268:	10803a17 	ldw	r2,232(r2)
 804d26c:	10c00044 	addi	r3,r2,1
 804d270:	008201b4 	movhi	r2,2054
 804d274:	10c03a15 	stw	r3,232(r2)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
 804d278:	e13ff317 	ldw	r4,-52(fp)
 804d27c:	8046a640 	call	8046a64 <ip_raw_input>
 804d280:	00017106 	br	804d848 <icmprcv+0xac0>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 804d284:	008201b4 	movhi	r2,2054
 804d288:	10803417 	ldw	r2,208(r2)
 804d28c:	10c00044 	addi	r3,r2,1
 804d290:	008201b4 	movhi	r2,2054
 804d294:	10c03415 	stw	r3,208(r2)
      pdp = (struct destun *)e;
 804d298:	e0bff917 	ldw	r2,-28(fp)
 804d29c:	e0bff415 	stw	r2,-48(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d2a0:	d0a07e17 	ldw	r2,-32264(gp)
 804d2a4:	1081000c 	andi	r2,r2,1024
 804d2a8:	10002f26 	beq	r2,zero,804d368 <icmprcv+0x5e0>
      {
         dprintf("ICMP: got dest unreachable type ");
 804d2ac:	01020174 	movhi	r4,2053
 804d2b0:	2112aa04 	addi	r4,r4,19112
 804d2b4:	8003b840 	call	8003b84 <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804d2b8:	e0bff417 	ldw	r2,-48(fp)
 804d2bc:	10800043 	ldbu	r2,1(r2)
 804d2c0:	11003fcc 	andi	r4,r2,255
 804d2c4:	2100201c 	xori	r4,r4,128
 804d2c8:	213fe004 	addi	r4,r4,-128
          PUSH_IPADDR(pdp->dip.ip_dest));
 804d2cc:	e0bff417 	ldw	r2,-48(fp)
 804d2d0:	10800617 	ldw	r2,24(r2)
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804d2d4:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804d2d8:	e0bff417 	ldw	r2,-48(fp)
 804d2dc:	10800617 	ldw	r2,24(r2)
 804d2e0:	1004d23a 	srli	r2,r2,8
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804d2e4:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804d2e8:	e0bff417 	ldw	r2,-48(fp)
 804d2ec:	10800617 	ldw	r2,24(r2)
 804d2f0:	1004d43a 	srli	r2,r2,16
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804d2f4:	10803fcc 	andi	r2,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804d2f8:	e0fff417 	ldw	r3,-48(fp)
 804d2fc:	18c00617 	ldw	r3,24(r3)
 804d300:	1806d63a 	srli	r3,r3,24
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804d304:	d8c00115 	stw	r3,4(sp)
 804d308:	d8800015 	stw	r2,0(sp)
 804d30c:	300f883a 	mov	r7,r6
 804d310:	280d883a 	mov	r6,r5
 804d314:	200b883a 	mov	r5,r4
 804d318:	01020174 	movhi	r4,2053
 804d31c:	2112b304 	addi	r4,r4,19148
 804d320:	8003b840 	call	8003b84 <printf>
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 804d324:	e0bffa17 	ldw	r2,-24(fp)
 804d328:	10c03fcc 	andi	r3,r2,255
 804d32c:	e0bffa17 	ldw	r2,-24(fp)
 804d330:	1004d23a 	srli	r2,r2,8
 804d334:	11003fcc 	andi	r4,r2,255
 804d338:	e0bffa17 	ldw	r2,-24(fp)
 804d33c:	1004d43a 	srli	r2,r2,16
 804d340:	11403fcc 	andi	r5,r2,255
 804d344:	e0bffa17 	ldw	r2,-24(fp)
 804d348:	1004d63a 	srli	r2,r2,24
 804d34c:	d8800015 	stw	r2,0(sp)
 804d350:	280f883a 	mov	r7,r5
 804d354:	200d883a 	mov	r6,r4
 804d358:	180b883a 	mov	r5,r3
 804d35c:	01020174 	movhi	r4,2053
 804d360:	2112b804 	addi	r4,r4,19168
 804d364:	8003b840 	call	8003b84 <printf>
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
 804d368:	e17ff417 	ldw	r5,-48(fp)
 804d36c:	e13ff317 	ldw	r4,-52(fp)
 804d370:	804de240 	call	804de24 <icmp_du>
      break;
 804d374:	00013306 	br	804d844 <icmprcv+0xabc>
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
 804d378:	008201b4 	movhi	r2,2054
 804d37c:	10803717 	ldw	r2,220(r2)
 804d380:	10c00044 	addi	r3,r2,1
 804d384:	008201b4 	movhi	r2,2054
 804d388:	10c03715 	stw	r3,220(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d38c:	d0a07e17 	ldw	r2,-32264(gp)
 804d390:	1081000c 	andi	r2,r2,1024
 804d394:	10001626 	beq	r2,zero,804d3f0 <icmprcv+0x668>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 804d398:	e0bffa17 	ldw	r2,-24(fp)
 804d39c:	10c03fcc 	andi	r3,r2,255
 804d3a0:	e0bffa17 	ldw	r2,-24(fp)
 804d3a4:	1004d23a 	srli	r2,r2,8
 804d3a8:	11003fcc 	andi	r4,r2,255
 804d3ac:	e0bffa17 	ldw	r2,-24(fp)
 804d3b0:	1004d43a 	srli	r2,r2,16
 804d3b4:	11403fcc 	andi	r5,r2,255
 804d3b8:	e0bffa17 	ldw	r2,-24(fp)
 804d3bc:	1004d63a 	srli	r2,r2,24
 804d3c0:	d8800015 	stw	r2,0(sp)
 804d3c4:	280f883a 	mov	r7,r5
 804d3c8:	200d883a 	mov	r6,r4
 804d3cc:	180b883a 	mov	r5,r3
 804d3d0:	01020174 	movhi	r4,2053
 804d3d4:	2112bd04 	addi	r4,r4,19188
 804d3d8:	8003b840 	call	8003b84 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 804d3dc:	d0a07e17 	ldw	r2,-32264(gp)
 804d3e0:	1080008c 	andi	r2,r2,2
 804d3e4:	10000226 	beq	r2,zero,804d3f0 <icmprcv+0x668>
 804d3e8:	e13ff317 	ldw	r4,-52(fp)
 804d3ec:	80437b00 	call	80437b0 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d3f0:	01000084 	movi	r4,2
 804d3f4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d3f8:	e13ff317 	ldw	r4,-52(fp)
 804d3fc:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d400:	01000084 	movi	r4,2
 804d404:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      break;
 804d408:	00010e06 	br	804d844 <icmprcv+0xabc>
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 804d40c:	008201b4 	movhi	r2,2054
 804d410:	10803817 	ldw	r2,224(r2)
 804d414:	10c00044 	addi	r3,r2,1
 804d418:	008201b4 	movhi	r2,2054
 804d41c:	10c03815 	stw	r3,224(r2)
      rd = (struct redirect *)e;
 804d420:	e0bff917 	ldw	r2,-28(fp)
 804d424:	e0bff515 	stw	r2,-44(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d428:	d0a07e17 	ldw	r2,-32264(gp)
 804d42c:	1081000c 	andi	r2,r2,1024
 804d430:	10002a26 	beq	r2,zero,804d4dc <icmprcv+0x754>
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
          PUSH_IPADDR(rd->rdip.ip_dest));
 804d434:	e0bff517 	ldw	r2,-44(fp)
 804d438:	10800617 	ldw	r2,24(r2)
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 804d43c:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 804d440:	e0bff517 	ldw	r2,-44(fp)
 804d444:	10800617 	ldw	r2,24(r2)
 804d448:	1004d23a 	srli	r2,r2,8
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 804d44c:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 804d450:	e0bff517 	ldw	r2,-44(fp)
 804d454:	10800617 	ldw	r2,24(r2)
 804d458:	1004d43a 	srli	r2,r2,16
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 804d45c:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 804d460:	e0bff517 	ldw	r2,-44(fp)
 804d464:	10800617 	ldw	r2,24(r2)
 804d468:	1004d63a 	srli	r2,r2,24
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 804d46c:	d8800015 	stw	r2,0(sp)
 804d470:	280f883a 	mov	r7,r5
 804d474:	200d883a 	mov	r6,r4
 804d478:	180b883a 	mov	r5,r3
 804d47c:	01020174 	movhi	r4,2053
 804d480:	2112c704 	addi	r4,r4,19228
 804d484:	8003b840 	call	8003b84 <printf>
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
 804d488:	e0bff517 	ldw	r2,-44(fp)
 804d48c:	10800117 	ldw	r2,4(r2)
 804d490:	10c03fcc 	andi	r3,r2,255
 804d494:	e0bff517 	ldw	r2,-44(fp)
 804d498:	10800117 	ldw	r2,4(r2)
 804d49c:	1004d23a 	srli	r2,r2,8
 804d4a0:	11003fcc 	andi	r4,r2,255
 804d4a4:	e0bff517 	ldw	r2,-44(fp)
 804d4a8:	10800117 	ldw	r2,4(r2)
 804d4ac:	1004d43a 	srli	r2,r2,16
 804d4b0:	11403fcc 	andi	r5,r2,255
 804d4b4:	e0bff517 	ldw	r2,-44(fp)
 804d4b8:	10800117 	ldw	r2,4(r2)
 804d4bc:	1004d63a 	srli	r2,r2,24
 804d4c0:	d8800015 	stw	r2,0(sp)
 804d4c4:	280f883a 	mov	r7,r5
 804d4c8:	200d883a 	mov	r6,r4
 804d4cc:	180b883a 	mov	r5,r3
 804d4d0:	01020174 	movhi	r4,2053
 804d4d4:	2112d104 	addi	r4,r4,19268
 804d4d8:	8003b840 	call	8003b84 <printf>
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
 804d4dc:	e0bff517 	ldw	r2,-44(fp)
 804d4e0:	14000617 	ldw	r16,24(r2)
 804d4e4:	e0bff517 	ldw	r2,-44(fp)
 804d4e8:	14400117 	ldw	r17,4(r2)
 804d4ec:	e0bff317 	ldw	r2,-52(fp)
 804d4f0:	10800617 	ldw	r2,24(r2)
 804d4f4:	1009883a 	mov	r4,r2
 804d4f8:	8029ec40 	call	8029ec4 <if_netnumber>
 804d4fc:	1007883a 	mov	r3,r2
 804d500:	00800104 	movi	r2,4
 804d504:	d8800015 	stw	r2,0(sp)
 804d508:	180f883a 	mov	r7,r3
 804d50c:	880d883a 	mov	r6,r17
 804d510:	017fffc4 	movi	r5,-1
 804d514:	8009883a 	mov	r4,r16
 804d518:	8046f100 	call	8046f10 <add_route>
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d51c:	01000084 	movi	r4,2
 804d520:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d524:	e13ff317 	ldw	r4,-52(fp)
 804d528:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d52c:	01000084 	movi	r4,2
 804d530:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      break;
 804d534:	0000c306 	br	804d844 <icmprcv+0xabc>
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 804d538:	008201b4 	movhi	r2,2054
 804d53c:	10803517 	ldw	r2,212(r2)
 804d540:	10c00044 	addi	r3,r2,1
 804d544:	008201b4 	movhi	r2,2054
 804d548:	10c03515 	stw	r3,212(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d54c:	d0a07e17 	ldw	r2,-32264(gp)
 804d550:	1081000c 	andi	r2,r2,1024
 804d554:	10003126 	beq	r2,zero,804d61c <icmprcv+0x894>
      {
         struct timex * pt =  (struct  timex *)e;
 804d558:	e0bff917 	ldw	r2,-28(fp)
 804d55c:	e0bff615 	stw	r2,-40(fp)

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
          PUSH_IPADDR(p->fhost));
 804d560:	e0bff317 	ldw	r2,-52(fp)
 804d564:	10800717 	ldw	r2,28(r2)
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 804d568:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(p->fhost));
 804d56c:	e0bff317 	ldw	r2,-52(fp)
 804d570:	10800717 	ldw	r2,28(r2)
 804d574:	1004d23a 	srli	r2,r2,8
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 804d578:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(p->fhost));
 804d57c:	e0bff317 	ldw	r2,-52(fp)
 804d580:	10800717 	ldw	r2,28(r2)
 804d584:	1004d43a 	srli	r2,r2,16
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 804d588:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(p->fhost));
 804d58c:	e0bff317 	ldw	r2,-52(fp)
 804d590:	10800717 	ldw	r2,28(r2)
 804d594:	1004d63a 	srli	r2,r2,24
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 804d598:	d8800015 	stw	r2,0(sp)
 804d59c:	280f883a 	mov	r7,r5
 804d5a0:	200d883a 	mov	r6,r4
 804d5a4:	180b883a 	mov	r5,r3
 804d5a8:	01020174 	movhi	r4,2053
 804d5ac:	2112d504 	addi	r4,r4,19284
 804d5b0:	8003b840 	call	8003b84 <printf>
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
 804d5b4:	e0bff617 	ldw	r2,-40(fp)
 804d5b8:	10800617 	ldw	r2,24(r2)
 804d5bc:	10c03fcc 	andi	r3,r2,255
 804d5c0:	e0bff617 	ldw	r2,-40(fp)
 804d5c4:	10800617 	ldw	r2,24(r2)
 804d5c8:	1004d23a 	srli	r2,r2,8
 804d5cc:	11003fcc 	andi	r4,r2,255
 804d5d0:	e0bff617 	ldw	r2,-40(fp)
 804d5d4:	10800617 	ldw	r2,24(r2)
 804d5d8:	1004d43a 	srli	r2,r2,16
 804d5dc:	11403fcc 	andi	r5,r2,255
 804d5e0:	e0bff617 	ldw	r2,-40(fp)
 804d5e4:	10800617 	ldw	r2,24(r2)
 804d5e8:	1004d63a 	srli	r2,r2,24
 804d5ec:	d8800015 	stw	r2,0(sp)
 804d5f0:	280f883a 	mov	r7,r5
 804d5f4:	200d883a 	mov	r6,r4
 804d5f8:	180b883a 	mov	r5,r3
 804d5fc:	01020174 	movhi	r4,2053
 804d600:	2112de04 	addi	r4,r4,19320
 804d604:	8003b840 	call	8003b84 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 804d608:	d0a07e17 	ldw	r2,-32264(gp)
 804d60c:	1080008c 	andi	r2,r2,2
 804d610:	10000226 	beq	r2,zero,804d61c <icmprcv+0x894>
 804d614:	e13ff317 	ldw	r4,-52(fp)
 804d618:	80437b00 	call	80437b0 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d61c:	01000084 	movi	r4,2
 804d620:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d624:	e13ff317 	ldw	r4,-52(fp)
 804d628:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d62c:	01000084 	movi	r4,2
 804d630:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      break;
 804d634:	00008306 	br	804d844 <icmprcv+0xabc>
   case PARAM:
      icmp_mib.icmpInParmProbs++;
 804d638:	008201b4 	movhi	r2,2054
 804d63c:	10803617 	ldw	r2,216(r2)
 804d640:	10c00044 	addi	r3,r2,1
 804d644:	008201b4 	movhi	r2,2054
 804d648:	10c03615 	stw	r3,216(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d64c:	d0a07e17 	ldw	r2,-32264(gp)
 804d650:	1081000c 	andi	r2,r2,1024
 804d654:	10000326 	beq	r2,zero,804d664 <icmprcv+0x8dc>
         dprintf("ICMP: got param problem message\n");
 804d658:	01020174 	movhi	r4,2053
 804d65c:	2112e304 	addi	r4,r4,19340
 804d660:	8003ca80 	call	8003ca8 <puts>
      if (NDEBUG & DUMP)
 804d664:	d0a07e17 	ldw	r2,-32264(gp)
 804d668:	1080008c 	andi	r2,r2,2
 804d66c:	10000226 	beq	r2,zero,804d678 <icmprcv+0x8f0>
      {
         ip_dump(p);
 804d670:	e13ff317 	ldw	r4,-52(fp)
 804d674:	80437b00 	call	80437b0 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d678:	01000084 	movi	r4,2
 804d67c:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d680:	e13ff317 	ldw	r4,-52(fp)
 804d684:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d688:	01000084 	movi	r4,2
 804d68c:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      break;
 804d690:	00006c06 	br	804d844 <icmprcv+0xabc>
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 804d694:	008201b4 	movhi	r2,2054
 804d698:	10803b17 	ldw	r2,236(r2)
 804d69c:	10c00044 	addi	r3,r2,1
 804d6a0:	008201b4 	movhi	r2,2054
 804d6a4:	10c03b15 	stw	r3,236(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d6a8:	d0a07e17 	ldw	r2,-32264(gp)
 804d6ac:	1081000c 	andi	r2,r2,1024
 804d6b0:	10000326 	beq	r2,zero,804d6c0 <icmprcv+0x938>
         dprintf("ICMP: got timestamp request\n");
 804d6b4:	01020174 	movhi	r4,2053
 804d6b8:	2112eb04 	addi	r4,r4,19372
 804d6bc:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
 804d6c0:	e0bff917 	ldw	r2,-28(fp)
 804d6c4:	00c00384 	movi	r3,14
 804d6c8:	10c00005 	stb	r3,0(r2)
      e->pchksum = 0;
 804d6cc:	e0bff917 	ldw	r2,-28(fp)
 804d6d0:	1000008d 	sth	zero,2(r2)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 804d6d4:	01400284 	movi	r5,10
 804d6d8:	e13ff917 	ldw	r4,-28(fp)
 804d6dc:	802b98c0 	call	802b98c <cksum>
 804d6e0:	0084303a 	nor	r2,zero,r2
 804d6e4:	1007883a 	mov	r3,r2
 804d6e8:	e0bff917 	ldw	r2,-28(fp)
 804d6ec:	10c0008d 	sth	r3,2(r2)
      pip->ip_src = pip->ip_dest;
 804d6f0:	e0bffc17 	ldw	r2,-16(fp)
 804d6f4:	10c00417 	ldw	r3,16(r2)
 804d6f8:	e0bffc17 	ldw	r2,-16(fp)
 804d6fc:	10c00315 	stw	r3,12(r2)
      pip->ip_dest = host;
 804d700:	e0bffc17 	ldw	r2,-16(fp)
 804d704:	e0fffa17 	ldw	r3,-24(fp)
 804d708:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutMsgs++;
 804d70c:	008201b4 	movhi	r2,2054
 804d710:	10803f17 	ldw	r2,252(r2)
 804d714:	10c00044 	addi	r3,r2,1
 804d718:	008201b4 	movhi	r2,2054
 804d71c:	10c03f15 	stw	r3,252(r2)
      icmp_mib.icmpOutTimestampReps++;
 804d720:	008201b4 	movhi	r2,2054
 804d724:	10804917 	ldw	r2,292(r2)
 804d728:	10c00044 	addi	r3,r2,1
 804d72c:	008201b4 	movhi	r2,2054
 804d730:	10c04915 	stw	r3,292(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 804d734:	e0bff317 	ldw	r2,-52(fp)
 804d738:	10c00317 	ldw	r3,12(r2)
 804d73c:	e0bffc17 	ldw	r2,-16(fp)
 804d740:	10800003 	ldbu	r2,0(r2)
 804d744:	10803fcc 	andi	r2,r2,255
 804d748:	100490ba 	slli	r2,r2,2
 804d74c:	10800f0c 	andi	r2,r2,60
 804d750:	1887883a 	add	r3,r3,r2
 804d754:	e0bff317 	ldw	r2,-52(fp)
 804d758:	10c00315 	stw	r3,12(r2)
      p->nb_plen = sizeof(struct tstamp);
 804d75c:	e0bff317 	ldw	r2,-52(fp)
 804d760:	00c00504 	movi	r3,20
 804d764:	10c00415 	stw	r3,16(r2)
      p->fhost = host;
 804d768:	e0bff317 	ldw	r2,-52(fp)
 804d76c:	e0fffa17 	ldw	r3,-24(fp)
 804d770:	10c00715 	stw	r3,28(r2)
      i = ip_write(ICMP_PROT, p);
 804d774:	e17ff317 	ldw	r5,-52(fp)
 804d778:	01000044 	movi	r4,1
 804d77c:	80427300 	call	8042730 <ip_write>
 804d780:	e0bff715 	stw	r2,-36(fp)
      if (i < 0)
 804d784:	e0bff717 	ldw	r2,-36(fp)
 804d788:	1000060e 	bge	r2,zero,804d7a4 <icmprcv+0xa1c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
 804d78c:	d0a07e17 	ldw	r2,-32264(gp)
 804d790:	1081000c 	andi	r2,r2,1024
 804d794:	10000326 	beq	r2,zero,804d7a4 <icmprcv+0xa1c>
            dprintf("icmp: can't send timestamp reply\n");
 804d798:	01020174 	movhi	r4,2053
 804d79c:	2112f204 	addi	r4,r4,19400
 804d7a0:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
 804d7a4:	0005883a 	mov	r2,zero
 804d7a8:	00002706 	br	804d848 <icmprcv+0xac0>
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d7ac:	d0a07e17 	ldw	r2,-32264(gp)
 804d7b0:	1081000c 	andi	r2,r2,1024
 804d7b4:	10000326 	beq	r2,zero,804d7c4 <icmprcv+0xa3c>
         dprintf("icmp: got info request\n");
 804d7b8:	01020174 	movhi	r4,2053
 804d7bc:	2112fb04 	addi	r4,r4,19436
 804d7c0:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d7c4:	01000084 	movi	r4,2
 804d7c8:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d7cc:	e13ff317 	ldw	r4,-52(fp)
 804d7d0:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d7d4:	01000084 	movi	r4,2
 804d7d8:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      break;
 804d7dc:	00001906 	br	804d844 <icmprcv+0xabc>
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804d7e0:	d0a07e17 	ldw	r2,-32264(gp)
 804d7e4:	1081000c 	andi	r2,r2,1024
 804d7e8:	10000e26 	beq	r2,zero,804d824 <icmprcv+0xa9c>
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
 804d7ec:	e0bff917 	ldw	r2,-28(fp)
 804d7f0:	10800003 	ldbu	r2,0(r2)
 804d7f4:	10803fcc 	andi	r2,r2,255
 804d7f8:	1080201c 	xori	r2,r2,128
 804d7fc:	10bfe004 	addi	r2,r2,-128
 804d800:	100b883a 	mov	r5,r2
 804d804:	01020174 	movhi	r4,2053
 804d808:	21130104 	addi	r4,r4,19460
 804d80c:	8003b840 	call	8003b84 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 804d810:	d0a07e17 	ldw	r2,-32264(gp)
 804d814:	1080008c 	andi	r2,r2,2
 804d818:	10000226 	beq	r2,zero,804d824 <icmprcv+0xa9c>
 804d81c:	e13ff317 	ldw	r4,-52(fp)
 804d820:	80437b00 	call	80437b0 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 804d824:	01000084 	movi	r4,2
 804d828:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
      pk_free(p);
 804d82c:	e13ff317 	ldw	r4,-52(fp)
 804d830:	802f9440 	call	802f944 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d834:	01000084 	movi	r4,2
 804d838:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>
      return ENP_NOT_MINE;
 804d83c:	00800084 	movi	r2,2
 804d840:	00000106 	br	804d848 <icmprcv+0xac0>
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
 804d844:	00800084 	movi	r2,2
#endif   /* FULL_ICMP */
}
 804d848:	e6fffe04 	addi	sp,fp,-8
 804d84c:	dfc00317 	ldw	ra,12(sp)
 804d850:	df000217 	ldw	fp,8(sp)
 804d854:	dc400117 	ldw	r17,4(sp)
 804d858:	dc000017 	ldw	r16,0(sp)
 804d85c:	dec00404 	addi	sp,sp,16
 804d860:	f800283a 	ret

0804d864 <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 804d864:	defff404 	addi	sp,sp,-48
 804d868:	dfc00b15 	stw	ra,44(sp)
 804d86c:	df000a15 	stw	fp,40(sp)
 804d870:	df000a04 	addi	fp,sp,40
 804d874:	e13ffb15 	stw	r4,-20(fp)
 804d878:	e17ffa15 	stw	r5,-24(fp)
 804d87c:	e1bff915 	stw	r6,-28(fp)
 804d880:	e1fff815 	stw	r7,-32(fp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 804d884:	d0a07e17 	ldw	r2,-32264(gp)
 804d888:	1080040c 	andi	r2,r2,16
 804d88c:	10001826 	beq	r2,zero,804d8f0 <icmp_destun+0x8c>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 804d890:	e0bff817 	ldw	r2,-32(fp)
 804d894:	10803fcc 	andi	r2,r2,255
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 804d898:	100690ba 	slli	r3,r2,2
 804d89c:	00820174 	movhi	r2,2053
 804d8a0:	1885883a 	add	r2,r3,r2
 804d8a4:	111bcd17 	ldw	r4,28468(r2)
 804d8a8:	e0bffb17 	ldw	r2,-20(fp)
 804d8ac:	11403fcc 	andi	r5,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 804d8b0:	e0bffb17 	ldw	r2,-20(fp)
 804d8b4:	1004d23a 	srli	r2,r2,8
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 804d8b8:	11803fcc 	andi	r6,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 804d8bc:	e0bffb17 	ldw	r2,-20(fp)
 804d8c0:	1004d43a 	srli	r2,r2,16
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 804d8c4:	10803fcc 	andi	r2,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 804d8c8:	e0fffb17 	ldw	r3,-20(fp)
 804d8cc:	1806d63a 	srli	r3,r3,24
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 804d8d0:	d8c00115 	stw	r3,4(sp)
 804d8d4:	d8800015 	stw	r2,0(sp)
 804d8d8:	300f883a 	mov	r7,r6
 804d8dc:	280d883a 	mov	r6,r5
 804d8e0:	200b883a 	mov	r5,r4
 804d8e4:	01020174 	movhi	r4,2053
 804d8e8:	21131b04 	addi	r4,r4,19564
 804d8ec:	8003b840 	call	8003b84 <printf>
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
 804d8f0:	01000084 	movi	r4,2
 804d8f4:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
 804d8f8:	01008504 	movi	r4,532
 804d8fc:	802f6300 	call	802f630 <pk_alloc>
 804d900:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804d904:	01000084 	movi	r4,2
 804d908:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 804d90c:	e0bfff17 	ldw	r2,-4(fp)
 804d910:	10000c1e 	bne	r2,zero,804d944 <icmp_destun+0xe0>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 804d914:	d0a07e17 	ldw	r2,-32264(gp)
 804d918:	1080800c 	andi	r2,r2,512
 804d91c:	10000326 	beq	r2,zero,804d92c <icmp_destun+0xc8>
         dprintf("icmp: can't alloc pkt\n");
 804d920:	01020174 	movhi	r4,2053
 804d924:	21132804 	addi	r4,r4,19616
 804d928:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 804d92c:	008201b4 	movhi	r2,2054
 804d930:	10804017 	ldw	r2,256(r2)
 804d934:	10c00044 	addi	r3,r2,1
 804d938:	008201b4 	movhi	r2,2054
 804d93c:	10c04015 	stw	r3,256(r2)
      return;
 804d940:	00007806 	br	804db24 <icmp_destun+0x2c0>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 804d944:	e0bfff17 	ldw	r2,-4(fp)
 804d948:	10800317 	ldw	r2,12(r2)
 804d94c:	e0bffe15 	stw	r2,-8(fp)
   pip->ip_src = src_addr;
 804d950:	e0bffe17 	ldw	r2,-8(fp)
 804d954:	e0fffa17 	ldw	r3,-24(fp)
 804d958:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = host;
 804d95c:	e0bffe17 	ldw	r2,-8(fp)
 804d960:	e0fffb17 	ldw	r3,-20(fp)
 804d964:	10c00415 	stw	r3,16(r2)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
 804d968:	e0bfff17 	ldw	r2,-4(fp)
 804d96c:	10800317 	ldw	r2,12(r2)
 804d970:	10c00504 	addi	r3,r2,20
 804d974:	e0bfff17 	ldw	r2,-4(fp)
 804d978:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= sizeof(struct ip);
 804d97c:	e0bfff17 	ldw	r2,-4(fp)
 804d980:	10800417 	ldw	r2,16(r2)
 804d984:	10fffb04 	addi	r3,r2,-20
 804d988:	e0bfff17 	ldw	r2,-4(fp)
 804d98c:	10c00415 	stw	r3,16(r2)
   p->net = net;     /* Put in the interface that this packet came in on */
 804d990:	e0bfff17 	ldw	r2,-4(fp)
 804d994:	e0c00217 	ldw	r3,8(fp)
 804d998:	10c00615 	stw	r3,24(r2)

   d = (struct destun *)p->nb_prot;
 804d99c:	e0bfff17 	ldw	r2,-4(fp)
 804d9a0:	10800317 	ldw	r2,12(r2)
 804d9a4:	e0bffd15 	stw	r2,-12(fp)

   if (typecode & 0xFF00)               /* if the type was sent */
 804d9a8:	e0bff817 	ldw	r2,-32(fp)
 804d9ac:	10bfc00c 	andi	r2,r2,65280
 804d9b0:	10000626 	beq	r2,zero,804d9cc <icmp_destun+0x168>
      d->dtype = (char)(typecode >>8);  /* then use it */
 804d9b4:	e0bff817 	ldw	r2,-32(fp)
 804d9b8:	1004d23a 	srli	r2,r2,8
 804d9bc:	1007883a 	mov	r3,r2
 804d9c0:	e0bffd17 	ldw	r2,-12(fp)
 804d9c4:	10c00005 	stb	r3,0(r2)
 804d9c8:	00000306 	br	804d9d8 <icmp_destun+0x174>
   else                                 /* else use default */
      d->dtype = DESTIN;
 804d9cc:	e0bffd17 	ldw	r2,-12(fp)
 804d9d0:	00c000c4 	movi	r3,3
 804d9d4:	10c00005 	stb	r3,0(r2)
   d->dcode = (char)(typecode & 0xFF);
 804d9d8:	e0bff817 	ldw	r2,-32(fp)
 804d9dc:	1007883a 	mov	r3,r2
 804d9e0:	e0bffd17 	ldw	r2,-12(fp)
 804d9e4:	10c00045 	stb	r3,1(r2)
   d->dno1 = d->dno2 = 0;
 804d9e8:	e0bffd17 	ldw	r2,-12(fp)
 804d9ec:	1000018d 	sth	zero,6(r2)
 804d9f0:	e0bffd17 	ldw	r2,-12(fp)
 804d9f4:	10c0018b 	ldhu	r3,6(r2)
 804d9f8:	e0bffd17 	ldw	r2,-12(fp)
 804d9fc:	10c0010d 	sth	r3,4(r2)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 804da00:	e0bff817 	ldw	r2,-32(fp)
 804da04:	10803fcc 	andi	r2,r2,255
 804da08:	10800118 	cmpnei	r2,r2,4
 804da0c:	1000121e 	bne	r2,zero,804da58 <icmp_destun+0x1f4>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
 804da10:	e0800217 	ldw	r2,8(fp)
 804da14:	10c00917 	ldw	r3,36(r2)
 804da18:	e0800217 	ldw	r2,8(fp)
 804da1c:	10800817 	ldw	r2,32(r2)
 804da20:	1885c83a 	sub	r2,r3,r2
 804da24:	1005d23a 	srai	r2,r2,8
 804da28:	10803fcc 	andi	r2,r2,255
 804da2c:	1009883a 	mov	r4,r2
 804da30:	e0800217 	ldw	r2,8(fp)
 804da34:	10c00917 	ldw	r3,36(r2)
 804da38:	e0800217 	ldw	r2,8(fp)
 804da3c:	10800817 	ldw	r2,32(r2)
 804da40:	1885c83a 	sub	r2,r3,r2
 804da44:	1004923a 	slli	r2,r2,8
 804da48:	2084b03a 	or	r2,r4,r2
 804da4c:	1007883a 	mov	r3,r2
 804da50:	e0bffd17 	ldw	r2,-12(fp)
 804da54:	10c0018d 	sth	r3,6(r2)
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 804da58:	e0bffd17 	ldw	r2,-12(fp)
 804da5c:	10800204 	addi	r2,r2,8
 804da60:	01800704 	movi	r6,28
 804da64:	e17ff917 	ldw	r5,-28(fp)
 804da68:	1009883a 	mov	r4,r2
 804da6c:	80037cc0 	call	80037cc <memcpy>

   d->dchksum = 0;
 804da70:	e0bffd17 	ldw	r2,-12(fp)
 804da74:	1000008d 	sth	zero,2(r2)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 804da78:	01400484 	movi	r5,18
 804da7c:	e13ffd17 	ldw	r4,-12(fp)
 804da80:	802b98c0 	call	802b98c <cksum>
 804da84:	0084303a 	nor	r2,zero,r2
 804da88:	1007883a 	mov	r3,r2
 804da8c:	e0bffd17 	ldw	r2,-12(fp)
 804da90:	10c0008d 	sth	r3,2(r2)

   p->nb_plen =  sizeof(struct destun);
 804da94:	e0bfff17 	ldw	r2,-4(fp)
 804da98:	00c00904 	movi	r3,36
 804da9c:	10c00415 	stw	r3,16(r2)
   p->fhost = host;
 804daa0:	e0bfff17 	ldw	r2,-4(fp)
 804daa4:	e0fffb17 	ldw	r3,-20(fp)
 804daa8:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
 804daac:	e17fff17 	ldw	r5,-4(fp)
 804dab0:	01000044 	movi	r4,1
 804dab4:	80427300 	call	8042730 <ip_write>
 804dab8:	e0bffc15 	stw	r2,-16(fp)
   if (i < 0)
 804dabc:	e0bffc17 	ldw	r2,-16(fp)
 804dac0:	10000c0e 	bge	r2,zero,804daf4 <icmp_destun+0x290>
   {
      icmp_mib.icmpOutErrors++;
 804dac4:	008201b4 	movhi	r2,2054
 804dac8:	10804017 	ldw	r2,256(r2)
 804dacc:	10c00044 	addi	r3,r2,1
 804dad0:	008201b4 	movhi	r2,2054
 804dad4:	10c04015 	stw	r3,256(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 804dad8:	d0a07e17 	ldw	r2,-32264(gp)
 804dadc:	1080860c 	andi	r2,r2,536
 804dae0:	10000f26 	beq	r2,zero,804db20 <icmp_destun+0x2bc>
         dprintf("ICMP: Can't send dest unreachable\n");
 804dae4:	01020174 	movhi	r4,2053
 804dae8:	21132e04 	addi	r4,r4,19640
 804daec:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG  */
      return;
 804daf0:	00000b06 	br	804db20 <icmp_destun+0x2bc>
   }
   icmp_mib.icmpOutMsgs++;
 804daf4:	008201b4 	movhi	r2,2054
 804daf8:	10803f17 	ldw	r2,252(r2)
 804dafc:	10c00044 	addi	r3,r2,1
 804db00:	008201b4 	movhi	r2,2054
 804db04:	10c03f15 	stw	r3,252(r2)
   icmp_mib.icmpOutDestUnreachs++;
 804db08:	008201b4 	movhi	r2,2054
 804db0c:	10804117 	ldw	r2,260(r2)
 804db10:	10c00044 	addi	r3,r2,1
 804db14:	008201b4 	movhi	r2,2054
 804db18:	10c04115 	stw	r3,260(r2)
   return;
 804db1c:	00000106 	br	804db24 <icmp_destun+0x2c0>
      return;
 804db20:	0001883a 	nop
}
 804db24:	e037883a 	mov	sp,fp
 804db28:	dfc00117 	ldw	ra,4(sp)
 804db2c:	df000017 	ldw	fp,0(sp)
 804db30:	dec00204 	addi	sp,sp,8
 804db34:	f800283a 	ret

0804db38 <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 804db38:	defff504 	addi	sp,sp,-44
 804db3c:	dfc00a15 	stw	ra,40(sp)
 804db40:	df000915 	stw	fp,36(sp)
 804db44:	df000904 	addi	fp,sp,36
 804db48:	e13ffa15 	stw	r4,-24(fp)
 804db4c:	2805883a 	mov	r2,r5
 804db50:	e0bff905 	stb	r2,-28(fp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 804db54:	d0a07e17 	ldw	r2,-32264(gp)
 804db58:	1080040c 	andi	r2,r2,16
 804db5c:	10003026 	beq	r2,zero,804dc20 <icmp_timex+0xe8>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 804db60:	e17ff907 	ldb	r5,-28(fp)
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 804db64:	e0bffa17 	ldw	r2,-24(fp)
 804db68:	10800317 	ldw	r2,12(r2)
 804db6c:	1004d23a 	srli	r2,r2,8
 804db70:	10c03fcc 	andi	r3,r2,255
 804db74:	e0bffa17 	ldw	r2,-24(fp)
 804db78:	10800317 	ldw	r2,12(r2)
 804db7c:	1004923a 	slli	r2,r2,8
 804db80:	10bfffcc 	andi	r2,r2,65535
 804db84:	1884b03a 	or	r2,r3,r2
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 804db88:	11803fcc 	andi	r6,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 804db8c:	e0bffa17 	ldw	r2,-24(fp)
 804db90:	10800317 	ldw	r2,12(r2)
 804db94:	1004d23a 	srli	r2,r2,8
 804db98:	10c03fcc 	andi	r3,r2,255
 804db9c:	e0bffa17 	ldw	r2,-24(fp)
 804dba0:	10800317 	ldw	r2,12(r2)
 804dba4:	1004923a 	slli	r2,r2,8
 804dba8:	10bfffcc 	andi	r2,r2,65535
 804dbac:	1884b03a 	or	r2,r3,r2
 804dbb0:	1004d23a 	srli	r2,r2,8
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 804dbb4:	11c03fcc 	andi	r7,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 804dbb8:	e0bffa17 	ldw	r2,-24(fp)
 804dbbc:	10800317 	ldw	r2,12(r2)
 804dbc0:	1004d23a 	srli	r2,r2,8
 804dbc4:	10c03fcc 	andi	r3,r2,255
 804dbc8:	e0bffa17 	ldw	r2,-24(fp)
 804dbcc:	10800317 	ldw	r2,12(r2)
 804dbd0:	1004923a 	slli	r2,r2,8
 804dbd4:	10bfffcc 	andi	r2,r2,65535
 804dbd8:	1884b03a 	or	r2,r3,r2
 804dbdc:	1004d43a 	srli	r2,r2,16
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 804dbe0:	10803fcc 	andi	r2,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 804dbe4:	e0fffa17 	ldw	r3,-24(fp)
 804dbe8:	18c00317 	ldw	r3,12(r3)
 804dbec:	1806d23a 	srli	r3,r3,8
 804dbf0:	19003fcc 	andi	r4,r3,255
 804dbf4:	e0fffa17 	ldw	r3,-24(fp)
 804dbf8:	18c00317 	ldw	r3,12(r3)
 804dbfc:	1806923a 	slli	r3,r3,8
 804dc00:	18ffffcc 	andi	r3,r3,65535
 804dc04:	20c6b03a 	or	r3,r4,r3
 804dc08:	1806d63a 	srli	r3,r3,24
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 804dc0c:	d8c00115 	stw	r3,4(sp)
 804dc10:	d8800015 	stw	r2,0(sp)
 804dc14:	01020174 	movhi	r4,2053
 804dc18:	21133704 	addi	r4,r4,19676
 804dc1c:	8003b840 	call	8003b84 <printf>
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 804dc20:	e0bffa17 	ldw	r2,-24(fp)
 804dc24:	10800003 	ldbu	r2,0(r2)
 804dc28:	10803fcc 	andi	r2,r2,255
 804dc2c:	100490ba 	slli	r2,r2,2
 804dc30:	10800f0c 	andi	r2,r2,60
 804dc34:	10800404 	addi	r2,r2,16
 804dc38:	e0bfffc5 	stb	r2,-1(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 804dc3c:	01000084 	movi	r4,2
 804dc40:	80304100 	call	8030410 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 804dc44:	e0bfffc3 	ldbu	r2,-1(fp)
 804dc48:	d0e07c17 	ldw	r3,-32272(gp)
 804dc4c:	10c5883a 	add	r2,r2,r3
 804dc50:	10800504 	addi	r2,r2,20
 804dc54:	1009883a 	mov	r4,r2
 804dc58:	802f6300 	call	802f630 <pk_alloc>
 804dc5c:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804dc60:	01000084 	movi	r4,2
 804dc64:	80304cc0 	call	80304cc <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 804dc68:	e0bffe17 	ldw	r2,-8(fp)
 804dc6c:	10000c1e 	bne	r2,zero,804dca0 <icmp_timex+0x168>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 804dc70:	d0a07e17 	ldw	r2,-32264(gp)
 804dc74:	1080800c 	andi	r2,r2,512
 804dc78:	10000326 	beq	r2,zero,804dc88 <icmp_timex+0x150>
         dprintf("icmp: can't alloc pkt\n");
 804dc7c:	01020174 	movhi	r4,2053
 804dc80:	21132804 	addi	r4,r4,19616
 804dc84:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 804dc88:	008201b4 	movhi	r2,2054
 804dc8c:	10804017 	ldw	r2,256(r2)
 804dc90:	10c00044 	addi	r3,r2,1
 804dc94:	008201b4 	movhi	r2,2054
 804dc98:	10c04015 	stw	r3,256(r2)
      return;
 804dc9c:	00005c06 	br	804de10 <icmp_timex+0x2d8>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 804dca0:	e0bffe17 	ldw	r2,-8(fp)
 804dca4:	10800317 	ldw	r2,12(r2)
 804dca8:	e0bffd15 	stw	r2,-12(fp)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
 804dcac:	e0bffa17 	ldw	r2,-24(fp)
 804dcb0:	10c00417 	ldw	r3,16(r2)
 804dcb4:	e0bffd17 	ldw	r2,-12(fp)
 804dcb8:	10c00315 	stw	r3,12(r2)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
 804dcbc:	e0bffa17 	ldw	r2,-24(fp)
 804dcc0:	10c00317 	ldw	r3,12(r2)
 804dcc4:	e0bffd17 	ldw	r2,-12(fp)
 804dcc8:	10c00415 	stw	r3,16(r2)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
 804dccc:	e0bffe17 	ldw	r2,-8(fp)
 804dcd0:	10800317 	ldw	r2,12(r2)
 804dcd4:	10c00504 	addi	r3,r2,20
 804dcd8:	e0bffe17 	ldw	r2,-8(fp)
 804dcdc:	10c00315 	stw	r3,12(r2)

   tx = (struct timex *) p->nb_prot;
 804dce0:	e0bffe17 	ldw	r2,-8(fp)
 804dce4:	10800317 	ldw	r2,12(r2)
 804dce8:	e0bffc15 	stw	r2,-16(fp)

   tx->ttype = TIMEX;
 804dcec:	e0bffc17 	ldw	r2,-16(fp)
 804dcf0:	00c002c4 	movi	r3,11
 804dcf4:	10c00005 	stb	r3,0(r2)
   tx->tcode = code;
 804dcf8:	e0bffc17 	ldw	r2,-16(fp)
 804dcfc:	e0fff903 	ldbu	r3,-28(fp)
 804dd00:	10c00045 	stb	r3,1(r2)
   tx->tno1 = tx->tno2 = 0;
 804dd04:	e0bffc17 	ldw	r2,-16(fp)
 804dd08:	1000018d 	sth	zero,6(r2)
 804dd0c:	e0bffc17 	ldw	r2,-16(fp)
 804dd10:	10c0018b 	ldhu	r3,6(r2)
 804dd14:	e0bffc17 	ldw	r2,-16(fp)
 804dd18:	10c0010d 	sth	r3,4(r2)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
 804dd1c:	e0bffc17 	ldw	r2,-16(fp)
 804dd20:	10c00204 	addi	r3,r2,8
 804dd24:	e0bffa17 	ldw	r2,-24(fp)
 804dd28:	10800003 	ldbu	r2,0(r2)
 804dd2c:	10803fcc 	andi	r2,r2,255
 804dd30:	100490ba 	slli	r2,r2,2
 804dd34:	10800f0c 	andi	r2,r2,60
 804dd38:	10800204 	addi	r2,r2,8
 804dd3c:	100d883a 	mov	r6,r2
 804dd40:	e17ffa17 	ldw	r5,-24(fp)
 804dd44:	1809883a 	mov	r4,r3
 804dd48:	80037cc0 	call	80037cc <memcpy>

   tx->tchksum = 0;
 804dd4c:	e0bffc17 	ldw	r2,-16(fp)
 804dd50:	1000008d 	sth	zero,2(r2)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 804dd54:	e0bfffc3 	ldbu	r2,-1(fp)
 804dd58:	1004d07a 	srli	r2,r2,1
 804dd5c:	10803fcc 	andi	r2,r2,255
 804dd60:	100b883a 	mov	r5,r2
 804dd64:	e13ffc17 	ldw	r4,-16(fp)
 804dd68:	802b98c0 	call	802b98c <cksum>
 804dd6c:	0084303a 	nor	r2,zero,r2
 804dd70:	1007883a 	mov	r3,r2
 804dd74:	e0bffc17 	ldw	r2,-16(fp)
 804dd78:	10c0008d 	sth	r3,2(r2)

   p->nb_plen = icmp_pkt_len;
 804dd7c:	e0ffffc3 	ldbu	r3,-1(fp)
 804dd80:	e0bffe17 	ldw	r2,-8(fp)
 804dd84:	10c00415 	stw	r3,16(r2)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
 804dd88:	e0bffd17 	ldw	r2,-12(fp)
 804dd8c:	10c00417 	ldw	r3,16(r2)
 804dd90:	e0bffe17 	ldw	r2,-8(fp)
 804dd94:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
 804dd98:	e17ffe17 	ldw	r5,-8(fp)
 804dd9c:	01000044 	movi	r4,1
 804dda0:	80427300 	call	8042730 <ip_write>
 804dda4:	e0bffb15 	stw	r2,-20(fp)
   if (i < 0)
 804dda8:	e0bffb17 	ldw	r2,-20(fp)
 804ddac:	10000c0e 	bge	r2,zero,804dde0 <icmp_timex+0x2a8>
   {
      icmp_mib.icmpOutErrors++;
 804ddb0:	008201b4 	movhi	r2,2054
 804ddb4:	10804017 	ldw	r2,256(r2)
 804ddb8:	10c00044 	addi	r3,r2,1
 804ddbc:	008201b4 	movhi	r2,2054
 804ddc0:	10c04015 	stw	r3,256(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 804ddc4:	d0a07e17 	ldw	r2,-32264(gp)
 804ddc8:	1080860c 	andi	r2,r2,536
 804ddcc:	10000f26 	beq	r2,zero,804de0c <icmp_timex+0x2d4>
         dprintf("ICMP: Can't send Time Exceeded\n");
 804ddd0:	01020174 	movhi	r4,2053
 804ddd4:	21134704 	addi	r4,r4,19740
 804ddd8:	8003ca80 	call	8003ca8 <puts>
#endif   /* NPDEBUG  */
      return;
 804dddc:	00000b06 	br	804de0c <icmp_timex+0x2d4>
   }
   icmp_mib.icmpOutMsgs++;
 804dde0:	008201b4 	movhi	r2,2054
 804dde4:	10803f17 	ldw	r2,252(r2)
 804dde8:	10c00044 	addi	r3,r2,1
 804ddec:	008201b4 	movhi	r2,2054
 804ddf0:	10c03f15 	stw	r3,252(r2)
   icmp_mib.icmpOutTimeExcds++;
 804ddf4:	008201b4 	movhi	r2,2054
 804ddf8:	10804217 	ldw	r2,264(r2)
 804ddfc:	10c00044 	addi	r3,r2,1
 804de00:	008201b4 	movhi	r2,2054
 804de04:	10c04215 	stw	r3,264(r2)
   return;
 804de08:	00000106 	br	804de10 <icmp_timex+0x2d8>
      return;
 804de0c:	0001883a 	nop
}
 804de10:	e037883a 	mov	sp,fp
 804de14:	dfc00117 	ldw	ra,4(sp)
 804de18:	df000017 	ldw	fp,0(sp)
 804de1c:	dec00204 	addi	sp,sp,8
 804de20:	f800283a 	ret

0804de24 <icmp_du>:
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
 804de24:	defffc04 	addi	sp,sp,-16
 804de28:	dfc00315 	stw	ra,12(sp)
 804de2c:	df000215 	stw	fp,8(sp)
 804de30:	df000204 	addi	fp,sp,8
 804de34:	e13fff15 	stw	r4,-4(fp)
 804de38:	e17ffe15 	stw	r5,-8(fp)
   /* see if user app wants notification first */
   if (icmpdu_hook)
 804de3c:	d0a0d817 	ldw	r2,-31904(gp)
 804de40:	10000426 	beq	r2,zero,804de54 <icmp_du+0x30>
      icmpdu_hook(p, pdp);
 804de44:	d0a0d817 	ldw	r2,-31904(gp)
 804de48:	e17ffe17 	ldw	r5,-8(fp)
 804de4c:	e13fff17 	ldw	r4,-4(fp)
 804de50:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
 804de54:	e17ffe17 	ldw	r5,-8(fp)
 804de58:	e13fff17 	ldw	r4,-4(fp)
 804de5c:	80321f00 	call	80321f0 <so_icmpdu>
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
 804de60:	0001883a 	nop
 804de64:	e037883a 	mov	sp,fp
 804de68:	dfc00117 	ldw	ra,4(sp)
 804de6c:	df000017 	ldw	fp,0(sp)
 804de70:	dec00204 	addi	sp,sp,8
 804de74:	f800283a 	ret

0804de78 <atexit>:
 804de78:	200b883a 	mov	r5,r4
 804de7c:	000f883a 	mov	r7,zero
 804de80:	000d883a 	mov	r6,zero
 804de84:	0009883a 	mov	r4,zero
 804de88:	804e6741 	jmpi	804e674 <__register_exitproc>

0804de8c <atoi>:
 804de8c:	01800284 	movi	r6,10
 804de90:	000b883a 	mov	r5,zero
 804de94:	804e5c01 	jmpi	804e5c0 <strtol>

0804de98 <_atoi_r>:
 804de98:	01c00284 	movi	r7,10
 804de9c:	000d883a 	mov	r6,zero
 804dea0:	804e5a01 	jmpi	804e5a0 <_strtol_r>

0804dea4 <exit>:
 804dea4:	defffe04 	addi	sp,sp,-8
 804dea8:	000b883a 	mov	r5,zero
 804deac:	dc000015 	stw	r16,0(sp)
 804deb0:	dfc00115 	stw	ra,4(sp)
 804deb4:	2021883a 	mov	r16,r4
 804deb8:	804e7040 	call	804e704 <__call_exitprocs>
 804debc:	00820174 	movhi	r2,2053
 804dec0:	111bd317 	ldw	r4,28492(r2)
 804dec4:	20800f17 	ldw	r2,60(r4)
 804dec8:	10000126 	beq	r2,zero,804ded0 <exit+0x2c>
 804decc:	103ee83a 	callr	r2
 804ded0:	8009883a 	mov	r4,r16
 804ded4:	80146ec0 	call	80146ec <_exit>

0804ded8 <memalign>:
 804ded8:	00c20174 	movhi	r3,2053
 804dedc:	2005883a 	mov	r2,r4
 804dee0:	191bd417 	ldw	r4,28496(r3)
 804dee4:	280d883a 	mov	r6,r5
 804dee8:	100b883a 	mov	r5,r2
 804deec:	804def01 	jmpi	804def0 <_memalign_r>

0804def0 <_memalign_r>:
 804def0:	28800268 	cmpgeui	r2,r5,9
 804def4:	10005226 	beq	r2,zero,804e040 <_memalign_r+0x150>
 804def8:	defffa04 	addi	sp,sp,-24
 804defc:	dc800215 	stw	r18,8(sp)
 804df00:	348002c4 	addi	r18,r6,11
 804df04:	dcc00315 	stw	r19,12(sp)
 804df08:	dc000015 	stw	r16,0(sp)
 804df0c:	dfc00515 	stw	ra,20(sp)
 804df10:	dd000415 	stw	r20,16(sp)
 804df14:	dc400115 	stw	r17,4(sp)
 804df18:	908005f0 	cmpltui	r2,r18,23
 804df1c:	2821883a 	mov	r16,r5
 804df20:	2027883a 	mov	r19,r4
 804df24:	1000381e 	bne	r2,zero,804e008 <_memalign_r+0x118>
 804df28:	00bffe04 	movi	r2,-8
 804df2c:	90a4703a 	and	r18,r18,r2
 804df30:	90003716 	blt	r18,zero,804e010 <_memalign_r+0x120>
 804df34:	91803636 	bltu	r18,r6,804e010 <_memalign_r+0x120>
 804df38:	80800428 	cmpgeui	r2,r16,16
 804df3c:	1000011e 	bne	r2,zero,804df44 <_memalign_r+0x54>
 804df40:	04000404 	movi	r16,16
 804df44:	81400404 	addi	r5,r16,16
 804df48:	2c8b883a 	add	r5,r5,r18
 804df4c:	9809883a 	mov	r4,r19
 804df50:	800b93c0 	call	800b93c <_malloc_r>
 804df54:	1023883a 	mov	r17,r2
 804df58:	10003026 	beq	r2,zero,804e01c <_memalign_r+0x12c>
 804df5c:	9809883a 	mov	r4,r19
 804df60:	8014e200 	call	8014e20 <__malloc_lock>
 804df64:	800b883a 	mov	r5,r16
 804df68:	8809883a 	mov	r4,r17
 804df6c:	80120400 	call	8012040 <__umodsi3>
 804df70:	8d3ffe04 	addi	r20,r17,-8
 804df74:	10001b26 	beq	r2,zero,804dfe4 <_memalign_r+0xf4>
 804df78:	80bfffc4 	addi	r2,r16,-1
 804df7c:	0407c83a 	sub	r3,zero,r16
 804df80:	8885883a 	add	r2,r17,r2
 804df84:	10c4703a 	and	r2,r2,r3
 804df88:	10bffe04 	addi	r2,r2,-8
 804df8c:	1507c83a 	sub	r3,r2,r20
 804df90:	19000408 	cmpgei	r4,r3,16
 804df94:	20002c26 	beq	r4,zero,804e048 <_memalign_r+0x158>
 804df98:	1029883a 	mov	r20,r2
 804df9c:	88bfff17 	ldw	r2,-4(r17)
 804dfa0:	013fff04 	movi	r4,-4
 804dfa4:	880b883a 	mov	r5,r17
 804dfa8:	1104703a 	and	r2,r2,r4
 804dfac:	10c5c83a 	sub	r2,r2,r3
 804dfb0:	11000054 	ori	r4,r2,1
 804dfb4:	a1000115 	stw	r4,4(r20)
 804dfb8:	a085883a 	add	r2,r20,r2
 804dfbc:	11800117 	ldw	r6,4(r2)
 804dfc0:	9809883a 	mov	r4,r19
 804dfc4:	31800054 	ori	r6,r6,1
 804dfc8:	11800115 	stw	r6,4(r2)
 804dfcc:	88bfff17 	ldw	r2,-4(r17)
 804dfd0:	1080004c 	andi	r2,r2,1
 804dfd4:	10c4b03a 	or	r2,r2,r3
 804dfd8:	88bfff15 	stw	r2,-4(r17)
 804dfdc:	800ad400 	call	800ad40 <_free_r>
 804dfe0:	a4400204 	addi	r17,r20,8
 804dfe4:	a0800117 	ldw	r2,4(r20)
 804dfe8:	00ffff04 	movi	r3,-4
 804dfec:	10c4703a 	and	r2,r2,r3
 804dff0:	1485c83a 	sub	r2,r2,r18
 804dff4:	10c00410 	cmplti	r3,r2,16
 804dff8:	18001726 	beq	r3,zero,804e058 <_memalign_r+0x168>
 804dffc:	9809883a 	mov	r4,r19
 804e000:	8014f480 	call	8014f48 <__malloc_unlock>
 804e004:	00000506 	br	804e01c <_memalign_r+0x12c>
 804e008:	04800404 	movi	r18,16
 804e00c:	91bfca2e 	bgeu	r18,r6,804df38 <_memalign_r+0x48>
 804e010:	00800304 	movi	r2,12
 804e014:	98800015 	stw	r2,0(r19)
 804e018:	0023883a 	mov	r17,zero
 804e01c:	8805883a 	mov	r2,r17
 804e020:	dfc00517 	ldw	ra,20(sp)
 804e024:	dd000417 	ldw	r20,16(sp)
 804e028:	dcc00317 	ldw	r19,12(sp)
 804e02c:	dc800217 	ldw	r18,8(sp)
 804e030:	dc400117 	ldw	r17,4(sp)
 804e034:	dc000017 	ldw	r16,0(sp)
 804e038:	dec00604 	addi	sp,sp,24
 804e03c:	f800283a 	ret
 804e040:	300b883a 	mov	r5,r6
 804e044:	800b93c1 	jmpi	800b93c <_malloc_r>
 804e048:	1421883a 	add	r16,r2,r16
 804e04c:	8507c83a 	sub	r3,r16,r20
 804e050:	8029883a 	mov	r20,r16
 804e054:	003fd106 	br	804df9c <_memalign_r+0xac>
 804e058:	a48b883a 	add	r5,r20,r18
 804e05c:	10800054 	ori	r2,r2,1
 804e060:	28800115 	stw	r2,4(r5)
 804e064:	a0800117 	ldw	r2,4(r20)
 804e068:	29400204 	addi	r5,r5,8
 804e06c:	9809883a 	mov	r4,r19
 804e070:	1080004c 	andi	r2,r2,1
 804e074:	14a4b03a 	or	r18,r2,r18
 804e078:	a4800115 	stw	r18,4(r20)
 804e07c:	800ad400 	call	800ad40 <_free_r>
 804e080:	003fde06 	br	804dffc <_memalign_r+0x10c>

0804e084 <malloc>:
 804e084:	00820174 	movhi	r2,2053
 804e088:	200b883a 	mov	r5,r4
 804e08c:	111bd417 	ldw	r4,28496(r2)
 804e090:	800b93c1 	jmpi	800b93c <_malloc_r>

0804e094 <free>:
 804e094:	00820174 	movhi	r2,2053
 804e098:	200b883a 	mov	r5,r4
 804e09c:	111bd417 	ldw	r4,28496(r2)
 804e0a0:	800ad401 	jmpi	800ad40 <_free_r>

0804e0a4 <strchr>:
 804e0a4:	28803fcc 	andi	r2,r5,255
 804e0a8:	2811883a 	mov	r8,r5
 804e0ac:	218000cc 	andi	r6,r4,3
 804e0b0:	10003226 	beq	r2,zero,804e17c <strchr+0xd8>
 804e0b4:	1007883a 	mov	r3,r2
 804e0b8:	30002d1e 	bne	r6,zero,804e170 <strchr+0xcc>
 804e0bc:	29403fcc 	andi	r5,r5,255
 804e0c0:	2804923a 	slli	r2,r5,8
 804e0c4:	20c00017 	ldw	r3,0(r4)
 804e0c8:	01ffbff4 	movhi	r7,65279
 804e0cc:	288ab03a 	or	r5,r5,r2
 804e0d0:	2814943a 	slli	r10,r5,16
 804e0d4:	39ffbfc4 	addi	r7,r7,-257
 804e0d8:	00c4303a 	nor	r2,zero,r3
 804e0dc:	5154b03a 	or	r10,r10,r5
 804e0e0:	50caf03a 	xor	r5,r10,r3
 804e0e4:	29cd883a 	add	r6,r5,r7
 804e0e8:	19c7883a 	add	r3,r3,r7
 804e0ec:	014a303a 	nor	r5,zero,r5
 804e0f0:	10c4703a 	and	r2,r2,r3
 804e0f4:	314a703a 	and	r5,r6,r5
 804e0f8:	02602074 	movhi	r9,32897
 804e0fc:	1144b03a 	or	r2,r2,r5
 804e100:	4a602004 	addi	r9,r9,-32640
 804e104:	1244703a 	and	r2,r2,r9
 804e108:	10000c1e 	bne	r2,zero,804e13c <strchr+0x98>
 804e10c:	20c00117 	ldw	r3,4(r4)
 804e110:	21000104 	addi	r4,r4,4
 804e114:	1a8af03a 	xor	r5,r3,r10
 804e118:	19c5883a 	add	r2,r3,r7
 804e11c:	29cd883a 	add	r6,r5,r7
 804e120:	00c6303a 	nor	r3,zero,r3
 804e124:	014a303a 	nor	r5,zero,r5
 804e128:	10c4703a 	and	r2,r2,r3
 804e12c:	314a703a 	and	r5,r6,r5
 804e130:	1144b03a 	or	r2,r2,r5
 804e134:	1244703a 	and	r2,r2,r9
 804e138:	103ff426 	beq	r2,zero,804e10c <strchr+0x68>
 804e13c:	20800003 	ldbu	r2,0(r4)
 804e140:	40c03fcc 	andi	r3,r8,255
 804e144:	10002d26 	beq	r2,zero,804e1fc <strchr+0x158>
 804e148:	18802326 	beq	r3,r2,804e1d8 <strchr+0x134>
 804e14c:	20800043 	ldbu	r2,1(r4)
 804e150:	21000044 	addi	r4,r4,1
 804e154:	103ffc1e 	bne	r2,zero,804e148 <strchr+0xa4>
 804e158:	0005883a 	mov	r2,zero
 804e15c:	f800283a 	ret
 804e160:	10c01d26 	beq	r2,r3,804e1d8 <strchr+0x134>
 804e164:	21000044 	addi	r4,r4,1
 804e168:	208000cc 	andi	r2,r4,3
 804e16c:	103fd326 	beq	r2,zero,804e0bc <strchr+0x18>
 804e170:	20800003 	ldbu	r2,0(r4)
 804e174:	103ffa1e 	bne	r2,zero,804e160 <strchr+0xbc>
 804e178:	003ff706 	br	804e158 <strchr+0xb4>
 804e17c:	30001b1e 	bne	r6,zero,804e1ec <strchr+0x148>
 804e180:	20c00017 	ldw	r3,0(r4)
 804e184:	01bfbff4 	movhi	r6,65279
 804e188:	31bfbfc4 	addi	r6,r6,-257
 804e18c:	1985883a 	add	r2,r3,r6
 804e190:	01602074 	movhi	r5,32897
 804e194:	00c6303a 	nor	r3,zero,r3
 804e198:	10c4703a 	and	r2,r2,r3
 804e19c:	29602004 	addi	r5,r5,-32640
 804e1a0:	1144703a 	and	r2,r2,r5
 804e1a4:	1000071e 	bne	r2,zero,804e1c4 <strchr+0x120>
 804e1a8:	20c00117 	ldw	r3,4(r4)
 804e1ac:	21000104 	addi	r4,r4,4
 804e1b0:	1985883a 	add	r2,r3,r6
 804e1b4:	00c6303a 	nor	r3,zero,r3
 804e1b8:	10c4703a 	and	r2,r2,r3
 804e1bc:	1144703a 	and	r2,r2,r5
 804e1c0:	103ff926 	beq	r2,zero,804e1a8 <strchr+0x104>
 804e1c4:	20800003 	ldbu	r2,0(r4)
 804e1c8:	10000326 	beq	r2,zero,804e1d8 <strchr+0x134>
 804e1cc:	20800043 	ldbu	r2,1(r4)
 804e1d0:	21000044 	addi	r4,r4,1
 804e1d4:	103ffd1e 	bne	r2,zero,804e1cc <strchr+0x128>
 804e1d8:	2005883a 	mov	r2,r4
 804e1dc:	f800283a 	ret
 804e1e0:	21000044 	addi	r4,r4,1
 804e1e4:	208000cc 	andi	r2,r4,3
 804e1e8:	103fe526 	beq	r2,zero,804e180 <strchr+0xdc>
 804e1ec:	20800003 	ldbu	r2,0(r4)
 804e1f0:	103ffb1e 	bne	r2,zero,804e1e0 <strchr+0x13c>
 804e1f4:	2005883a 	mov	r2,r4
 804e1f8:	f800283a 	ret
 804e1fc:	f800283a 	ret

0804e200 <strncmp>:
 804e200:	30002926 	beq	r6,zero,804e2a8 <strncmp+0xa8>
 804e204:	2144b03a 	or	r2,r4,r5
 804e208:	108000cc 	andi	r2,r2,3
 804e20c:	1000151e 	bne	r2,zero,804e264 <strncmp+0x64>
 804e210:	30800128 	cmpgeui	r2,r6,4
 804e214:	10001326 	beq	r2,zero,804e264 <strncmp+0x64>
 804e218:	02bfbff4 	movhi	r10,65279
 804e21c:	02602074 	movhi	r9,32897
 804e220:	52bfbfc4 	addi	r10,r10,-257
 804e224:	4a602004 	addi	r9,r9,-32640
 804e228:	00000706 	br	804e248 <strncmp+0x48>
 804e22c:	31bfff04 	addi	r6,r6,-4
 804e230:	30c00130 	cmpltui	r3,r6,4
 804e234:	30001c26 	beq	r6,zero,804e2a8 <strncmp+0xa8>
 804e238:	10001b1e 	bne	r2,zero,804e2a8 <strncmp+0xa8>
 804e23c:	21000104 	addi	r4,r4,4
 804e240:	29400104 	addi	r5,r5,4
 804e244:	1800071e 	bne	r3,zero,804e264 <strncmp+0x64>
 804e248:	20c00017 	ldw	r3,0(r4)
 804e24c:	29c00017 	ldw	r7,0(r5)
 804e250:	1a85883a 	add	r2,r3,r10
 804e254:	00d0303a 	nor	r8,zero,r3
 804e258:	1204703a 	and	r2,r2,r8
 804e25c:	1244703a 	and	r2,r2,r9
 804e260:	19fff226 	beq	r3,r7,804e22c <strncmp+0x2c>
 804e264:	21c00007 	ldb	r7,0(r4)
 804e268:	28800007 	ldb	r2,0(r5)
 804e26c:	3880101e 	bne	r7,r2,804e2b0 <strncmp+0xb0>
 804e270:	30800060 	cmpeqi	r2,r6,1
 804e274:	10000c1e 	bne	r2,zero,804e2a8 <strncmp+0xa8>
 804e278:	2807883a 	mov	r3,r5
 804e27c:	00000406 	br	804e290 <strncmp+0x90>
 804e280:	21c00007 	ldb	r7,0(r4)
 804e284:	1a000007 	ldb	r8,0(r3)
 804e288:	3a000a1e 	bne	r7,r8,804e2b4 <strncmp+0xb4>
 804e28c:	10000626 	beq	r2,zero,804e2a8 <strncmp+0xa8>
 804e290:	18c00044 	addi	r3,r3,1
 804e294:	00c4303a 	nor	r2,zero,r3
 804e298:	1185883a 	add	r2,r2,r6
 804e29c:	21000044 	addi	r4,r4,1
 804e2a0:	2885883a 	add	r2,r5,r2
 804e2a4:	383ff61e 	bne	r7,zero,804e280 <strncmp+0x80>
 804e2a8:	0005883a 	mov	r2,zero
 804e2ac:	f800283a 	ret
 804e2b0:	2807883a 	mov	r3,r5
 804e2b4:	20800003 	ldbu	r2,0(r4)
 804e2b8:	18c00003 	ldbu	r3,0(r3)
 804e2bc:	10c5c83a 	sub	r2,r2,r3
 804e2c0:	f800283a 	ret

0804e2c4 <strncpy>:
 804e2c4:	2906b03a 	or	r3,r5,r4
 804e2c8:	18c000cc 	andi	r3,r3,3
 804e2cc:	2005883a 	mov	r2,r4
 804e2d0:	1800021e 	bne	r3,zero,804e2dc <strncpy+0x18>
 804e2d4:	30c00128 	cmpgeui	r3,r6,4
 804e2d8:	18000f1e 	bne	r3,zero,804e318 <strncpy+0x54>
 804e2dc:	1011883a 	mov	r8,r2
 804e2e0:	00000906 	br	804e308 <strncpy+0x44>
 804e2e4:	29ffffc3 	ldbu	r7,-1(r5)
 804e2e8:	327fffc4 	addi	r9,r6,-1
 804e2ec:	19ffffc5 	stb	r7,-1(r3)
 804e2f0:	39c03fcc 	andi	r7,r7,255
 804e2f4:	39c0201c 	xori	r7,r7,128
 804e2f8:	39ffe004 	addi	r7,r7,-128
 804e2fc:	38001826 	beq	r7,zero,804e360 <strncpy+0x9c>
 804e300:	1811883a 	mov	r8,r3
 804e304:	480d883a 	mov	r6,r9
 804e308:	29400044 	addi	r5,r5,1
 804e30c:	40c00044 	addi	r3,r8,1
 804e310:	303ff41e 	bne	r6,zero,804e2e4 <strncpy+0x20>
 804e314:	f800283a 	ret
 804e318:	02bfbff4 	movhi	r10,65279
 804e31c:	02602074 	movhi	r9,32897
 804e320:	2011883a 	mov	r8,r4
 804e324:	52bfbfc4 	addi	r10,r10,-257
 804e328:	4a602004 	addi	r9,r9,-32640
 804e32c:	29c00017 	ldw	r7,0(r5)
 804e330:	3a87883a 	add	r3,r7,r10
 804e334:	01c8303a 	nor	r4,zero,r7
 804e338:	1906703a 	and	r3,r3,r4
 804e33c:	1a46703a 	and	r3,r3,r9
 804e340:	183ff11e 	bne	r3,zero,804e308 <strncpy+0x44>
 804e344:	31bfff04 	addi	r6,r6,-4
 804e348:	41c00015 	stw	r7,0(r8)
 804e34c:	30c00130 	cmpltui	r3,r6,4
 804e350:	42000104 	addi	r8,r8,4
 804e354:	29400104 	addi	r5,r5,4
 804e358:	183ff426 	beq	r3,zero,804e32c <strncpy+0x68>
 804e35c:	003fea06 	br	804e308 <strncpy+0x44>
 804e360:	418d883a 	add	r6,r8,r6
 804e364:	48000426 	beq	r9,zero,804e378 <strncpy+0xb4>
 804e368:	18c00044 	addi	r3,r3,1
 804e36c:	183fffc5 	stb	zero,-1(r3)
 804e370:	19bffd1e 	bne	r3,r6,804e368 <strncpy+0xa4>
 804e374:	f800283a 	ret
 804e378:	f800283a 	ret

0804e37c <_strtol_l.isra.0>:
 804e37c:	defff504 	addi	sp,sp,-44
 804e380:	dd800715 	stw	r22,28(sp)
 804e384:	dd400615 	stw	r21,24(sp)
 804e388:	dd000515 	stw	r20,20(sp)
 804e38c:	dc000115 	stw	r16,4(sp)
 804e390:	dfc00a15 	stw	ra,40(sp)
 804e394:	df000915 	stw	fp,36(sp)
 804e398:	ddc00815 	stw	r23,32(sp)
 804e39c:	dcc00415 	stw	r19,16(sp)
 804e3a0:	dc800315 	stw	r18,12(sp)
 804e3a4:	dc400215 	stw	r17,8(sp)
 804e3a8:	2829883a 	mov	r20,r5
 804e3ac:	d9000015 	stw	r4,0(sp)
 804e3b0:	302d883a 	mov	r22,r6
 804e3b4:	382b883a 	mov	r21,r7
 804e3b8:	2821883a 	mov	r16,r5
 804e3bc:	80c00003 	ldbu	r3,0(r16)
 804e3c0:	00820174 	movhi	r2,2053
 804e3c4:	8009883a 	mov	r4,r16
 804e3c8:	1885883a 	add	r2,r3,r2
 804e3cc:	10bef043 	ldbu	r2,-1087(r2)
 804e3d0:	84000044 	addi	r16,r16,1
 804e3d4:	1080020c 	andi	r2,r2,8
 804e3d8:	103ff81e 	bne	r2,zero,804e3bc <_strtol_l.isra.0+0x40>
 804e3dc:	18800b58 	cmpnei	r2,r3,45
 804e3e0:	10005226 	beq	r2,zero,804e52c <_strtol_l.isra.0+0x1b0>
 804e3e4:	18800ae0 	cmpeqi	r2,r3,43
 804e3e8:	05e00034 	movhi	r23,32768
 804e3ec:	1000231e 	bne	r2,zero,804e47c <_strtol_l.isra.0+0x100>
 804e3f0:	1823883a 	mov	r17,r3
 804e3f4:	bdffffc4 	addi	r23,r23,-1
 804e3f8:	0027883a 	mov	r19,zero
 804e3fc:	a8002426 	beq	r21,zero,804e490 <_strtol_l.isra.0+0x114>
 804e400:	a8800420 	cmpeqi	r2,r21,16
 804e404:	10004e1e 	bne	r2,zero,804e540 <_strtol_l.isra.0+0x1c4>
 804e408:	a825883a 	mov	r18,r21
 804e40c:	900b883a 	mov	r5,r18
 804e410:	b809883a 	mov	r4,r23
 804e414:	80120400 	call	8012040 <__umodsi3>
 804e418:	900b883a 	mov	r5,r18
 804e41c:	b809883a 	mov	r4,r23
 804e420:	1039883a 	mov	fp,r2
 804e424:	8011fdc0 	call	8011fdc <__udivsi3>
 804e428:	100d883a 	mov	r6,r2
 804e42c:	0013883a 	mov	r9,zero
 804e430:	0005883a 	mov	r2,zero
 804e434:	88fff404 	addi	r3,r17,-48
 804e438:	1a0002a8 	cmpgeui	r8,r3,10
 804e43c:	40000426 	beq	r8,zero,804e450 <_strtol_l.isra.0+0xd4>
 804e440:	88ffefc4 	addi	r3,r17,-65
 804e444:	18c006a8 	cmpgeui	r3,r3,26
 804e448:	1800191e 	bne	r3,zero,804e4b0 <_strtol_l.isra.0+0x134>
 804e44c:	88fff244 	addi	r3,r17,-55
 804e450:	1d401c0e 	bge	r3,r21,804e4c4 <_strtol_l.isra.0+0x148>
 804e454:	4a3fffe0 	cmpeqi	r8,r9,-1
 804e458:	4000051e 	bne	r8,zero,804e470 <_strtol_l.isra.0+0xf4>
 804e45c:	30801236 	bltu	r6,r2,804e4a8 <_strtol_l.isra.0+0x12c>
 804e460:	30801026 	beq	r6,r2,804e4a4 <_strtol_l.isra.0+0x128>
 804e464:	1485383a 	mul	r2,r2,r18
 804e468:	02400044 	movi	r9,1
 804e46c:	1885883a 	add	r2,r3,r2
 804e470:	84000044 	addi	r16,r16,1
 804e474:	847fffc3 	ldbu	r17,-1(r16)
 804e478:	003fee06 	br	804e434 <_strtol_l.isra.0+0xb8>
 804e47c:	84400003 	ldbu	r17,0(r16)
 804e480:	bdffffc4 	addi	r23,r23,-1
 804e484:	24000084 	addi	r16,r4,2
 804e488:	0027883a 	mov	r19,zero
 804e48c:	a83fdc1e 	bne	r21,zero,804e400 <_strtol_l.isra.0+0x84>
 804e490:	88800c20 	cmpeqi	r2,r17,48
 804e494:	1000371e 	bne	r2,zero,804e574 <_strtol_l.isra.0+0x1f8>
 804e498:	04800284 	movi	r18,10
 804e49c:	05400284 	movi	r21,10
 804e4a0:	003fda06 	br	804e40c <_strtol_l.isra.0+0x90>
 804e4a4:	e0ffef0e 	bge	fp,r3,804e464 <_strtol_l.isra.0+0xe8>
 804e4a8:	027fffc4 	movi	r9,-1
 804e4ac:	003ff006 	br	804e470 <_strtol_l.isra.0+0xf4>
 804e4b0:	88ffe7c4 	addi	r3,r17,-97
 804e4b4:	18c006a8 	cmpgeui	r3,r3,26
 804e4b8:	1800021e 	bne	r3,zero,804e4c4 <_strtol_l.isra.0+0x148>
 804e4bc:	88ffea44 	addi	r3,r17,-87
 804e4c0:	1d7fe416 	blt	r3,r21,804e454 <_strtol_l.isra.0+0xd8>
 804e4c4:	48ffffd8 	cmpnei	r3,r9,-1
 804e4c8:	18001126 	beq	r3,zero,804e510 <_strtol_l.isra.0+0x194>
 804e4cc:	98000126 	beq	r19,zero,804e4d4 <_strtol_l.isra.0+0x158>
 804e4d0:	0085c83a 	sub	r2,zero,r2
 804e4d4:	b0000226 	beq	r22,zero,804e4e0 <_strtol_l.isra.0+0x164>
 804e4d8:	48002f1e 	bne	r9,zero,804e598 <_strtol_l.isra.0+0x21c>
 804e4dc:	b5000015 	stw	r20,0(r22)
 804e4e0:	dfc00a17 	ldw	ra,40(sp)
 804e4e4:	df000917 	ldw	fp,36(sp)
 804e4e8:	ddc00817 	ldw	r23,32(sp)
 804e4ec:	dd800717 	ldw	r22,28(sp)
 804e4f0:	dd400617 	ldw	r21,24(sp)
 804e4f4:	dd000517 	ldw	r20,20(sp)
 804e4f8:	dcc00417 	ldw	r19,16(sp)
 804e4fc:	dc800317 	ldw	r18,12(sp)
 804e500:	dc400217 	ldw	r17,8(sp)
 804e504:	dc000117 	ldw	r16,4(sp)
 804e508:	dec00b04 	addi	sp,sp,44
 804e50c:	f800283a 	ret
 804e510:	d8c00017 	ldw	r3,0(sp)
 804e514:	00800884 	movi	r2,34
 804e518:	18800015 	stw	r2,0(r3)
 804e51c:	b0001c26 	beq	r22,zero,804e590 <_strtol_l.isra.0+0x214>
 804e520:	853fffc4 	addi	r20,r16,-1
 804e524:	b805883a 	mov	r2,r23
 804e528:	003fec06 	br	804e4dc <_strtol_l.isra.0+0x160>
 804e52c:	84400003 	ldbu	r17,0(r16)
 804e530:	05e00034 	movhi	r23,32768
 804e534:	24000084 	addi	r16,r4,2
 804e538:	04c00044 	movi	r19,1
 804e53c:	003faf06 	br	804e3fc <_strtol_l.isra.0+0x80>
 804e540:	88800c18 	cmpnei	r2,r17,48
 804e544:	1000041e 	bne	r2,zero,804e558 <_strtol_l.isra.0+0x1dc>
 804e548:	80800003 	ldbu	r2,0(r16)
 804e54c:	108037cc 	andi	r2,r2,223
 804e550:	10801620 	cmpeqi	r2,r2,88
 804e554:	1000021e 	bne	r2,zero,804e560 <_strtol_l.isra.0+0x1e4>
 804e558:	04800404 	movi	r18,16
 804e55c:	003fab06 	br	804e40c <_strtol_l.isra.0+0x90>
 804e560:	84400043 	ldbu	r17,1(r16)
 804e564:	04800404 	movi	r18,16
 804e568:	84000084 	addi	r16,r16,2
 804e56c:	05400404 	movi	r21,16
 804e570:	003fa606 	br	804e40c <_strtol_l.isra.0+0x90>
 804e574:	80800003 	ldbu	r2,0(r16)
 804e578:	108037cc 	andi	r2,r2,223
 804e57c:	10801620 	cmpeqi	r2,r2,88
 804e580:	103ff71e 	bne	r2,zero,804e560 <_strtol_l.isra.0+0x1e4>
 804e584:	04800204 	movi	r18,8
 804e588:	05400204 	movi	r21,8
 804e58c:	003f9f06 	br	804e40c <_strtol_l.isra.0+0x90>
 804e590:	b805883a 	mov	r2,r23
 804e594:	003fd206 	br	804e4e0 <_strtol_l.isra.0+0x164>
 804e598:	102f883a 	mov	r23,r2
 804e59c:	003fe006 	br	804e520 <_strtol_l.isra.0+0x1a4>

0804e5a0 <_strtol_r>:
 804e5a0:	804e37c1 	jmpi	804e37c <_strtol_l.isra.0>

0804e5a4 <strtol_l>:
 804e5a4:	00c20174 	movhi	r3,2053
 804e5a8:	2005883a 	mov	r2,r4
 804e5ac:	191bd417 	ldw	r4,28496(r3)
 804e5b0:	300f883a 	mov	r7,r6
 804e5b4:	280d883a 	mov	r6,r5
 804e5b8:	100b883a 	mov	r5,r2
 804e5bc:	804e37c1 	jmpi	804e37c <_strtol_l.isra.0>

0804e5c0 <strtol>:
 804e5c0:	00c20174 	movhi	r3,2053
 804e5c4:	2005883a 	mov	r2,r4
 804e5c8:	191bd417 	ldw	r4,28496(r3)
 804e5cc:	300f883a 	mov	r7,r6
 804e5d0:	280d883a 	mov	r6,r5
 804e5d4:	100b883a 	mov	r5,r2
 804e5d8:	804e37c1 	jmpi	804e37c <_strtol_l.isra.0>

0804e5dc <vprintf>:
 804e5dc:	00820174 	movhi	r2,2053
 804e5e0:	109bd417 	ldw	r2,28496(r2)
 804e5e4:	280f883a 	mov	r7,r5
 804e5e8:	200d883a 	mov	r6,r4
 804e5ec:	11400217 	ldw	r5,8(r2)
 804e5f0:	1009883a 	mov	r4,r2
 804e5f4:	804e8241 	jmpi	804e824 <_vfprintf_r>

0804e5f8 <_vprintf_r>:
 804e5f8:	2805883a 	mov	r2,r5
 804e5fc:	21400217 	ldw	r5,8(r4)
 804e600:	300f883a 	mov	r7,r6
 804e604:	100d883a 	mov	r6,r2
 804e608:	804e8241 	jmpi	804e824 <_vfprintf_r>

0804e60c <_vsprintf_r>:
 804e60c:	deffe504 	addi	sp,sp,-108
 804e610:	00a00034 	movhi	r2,32768
 804e614:	023ffff4 	movhi	r8,65535
 804e618:	2807883a 	mov	r3,r5
 804e61c:	10bfffc4 	addi	r2,r2,-1
 804e620:	42008204 	addi	r8,r8,520
 804e624:	d80b883a 	mov	r5,sp
 804e628:	dfc01a15 	stw	ra,104(sp)
 804e62c:	d8c00015 	stw	r3,0(sp)
 804e630:	d8c00415 	stw	r3,16(sp)
 804e634:	d8800515 	stw	r2,20(sp)
 804e638:	d8800215 	stw	r2,8(sp)
 804e63c:	da000315 	stw	r8,12(sp)
 804e640:	80048640 	call	8004864 <___svfprintf_internal_r>
 804e644:	d8c00017 	ldw	r3,0(sp)
 804e648:	18000005 	stb	zero,0(r3)
 804e64c:	dfc01a17 	ldw	ra,104(sp)
 804e650:	dec01b04 	addi	sp,sp,108
 804e654:	f800283a 	ret

0804e658 <vsprintf>:
 804e658:	00c20174 	movhi	r3,2053
 804e65c:	2005883a 	mov	r2,r4
 804e660:	191bd417 	ldw	r4,28496(r3)
 804e664:	300f883a 	mov	r7,r6
 804e668:	280d883a 	mov	r6,r5
 804e66c:	100b883a 	mov	r5,r2
 804e670:	804e60c1 	jmpi	804e60c <_vsprintf_r>

0804e674 <__register_exitproc>:
 804e674:	00820174 	movhi	r2,2053
 804e678:	10dbd317 	ldw	r3,28492(r2)
 804e67c:	18805217 	ldw	r2,328(r3)
 804e680:	10001726 	beq	r2,zero,804e6e0 <__register_exitproc+0x6c>
 804e684:	10c00117 	ldw	r3,4(r2)
 804e688:	1a000808 	cmpgei	r8,r3,32
 804e68c:	40001b1e 	bne	r8,zero,804e6fc <__register_exitproc+0x88>
 804e690:	20000b26 	beq	r4,zero,804e6c0 <__register_exitproc+0x4c>
 804e694:	181090ba 	slli	r8,r3,2
 804e698:	02400044 	movi	r9,1
 804e69c:	48d2983a 	sll	r9,r9,r3
 804e6a0:	1211883a 	add	r8,r2,r8
 804e6a4:	41802215 	stw	r6,136(r8)
 804e6a8:	11806217 	ldw	r6,392(r2)
 804e6ac:	21000098 	cmpnei	r4,r4,2
 804e6b0:	324cb03a 	or	r6,r6,r9
 804e6b4:	11806215 	stw	r6,392(r2)
 804e6b8:	41c04215 	stw	r7,264(r8)
 804e6bc:	20000b26 	beq	r4,zero,804e6ec <__register_exitproc+0x78>
 804e6c0:	19000084 	addi	r4,r3,2
 804e6c4:	200890ba 	slli	r4,r4,2
 804e6c8:	18c00044 	addi	r3,r3,1
 804e6cc:	10c00115 	stw	r3,4(r2)
 804e6d0:	1105883a 	add	r2,r2,r4
 804e6d4:	11400015 	stw	r5,0(r2)
 804e6d8:	0005883a 	mov	r2,zero
 804e6dc:	f800283a 	ret
 804e6e0:	18805304 	addi	r2,r3,332
 804e6e4:	18805215 	stw	r2,328(r3)
 804e6e8:	003fe606 	br	804e684 <__register_exitproc+0x10>
 804e6ec:	11006317 	ldw	r4,396(r2)
 804e6f0:	2252b03a 	or	r9,r4,r9
 804e6f4:	12406315 	stw	r9,396(r2)
 804e6f8:	003ff106 	br	804e6c0 <__register_exitproc+0x4c>
 804e6fc:	00bfffc4 	movi	r2,-1
 804e700:	f800283a 	ret

0804e704 <__call_exitprocs>:
 804e704:	defff704 	addi	sp,sp,-36
 804e708:	00820174 	movhi	r2,2053
 804e70c:	dcc00315 	stw	r19,12(sp)
 804e710:	14dbd317 	ldw	r19,28492(r2)
 804e714:	dc800215 	stw	r18,8(sp)
 804e718:	dfc00815 	stw	ra,32(sp)
 804e71c:	9c805217 	ldw	r18,328(r19)
 804e720:	ddc00715 	stw	r23,28(sp)
 804e724:	dd800615 	stw	r22,24(sp)
 804e728:	dd400515 	stw	r21,20(sp)
 804e72c:	dd000415 	stw	r20,16(sp)
 804e730:	dc400115 	stw	r17,4(sp)
 804e734:	dc000015 	stw	r16,0(sp)
 804e738:	90001026 	beq	r18,zero,804e77c <__call_exitprocs+0x78>
 804e73c:	202b883a 	mov	r21,r4
 804e740:	282d883a 	mov	r22,r5
 804e744:	05000044 	movi	r20,1
 804e748:	94000117 	ldw	r16,4(r18)
 804e74c:	847fffc4 	addi	r17,r16,-1
 804e750:	88000a16 	blt	r17,zero,804e77c <__call_exitprocs+0x78>
 804e754:	84000044 	addi	r16,r16,1
 804e758:	802090ba 	slli	r16,r16,2
 804e75c:	9421883a 	add	r16,r18,r16
 804e760:	b0001126 	beq	r22,zero,804e7a8 <__call_exitprocs+0xa4>
 804e764:	80804017 	ldw	r2,256(r16)
 804e768:	15800f26 	beq	r2,r22,804e7a8 <__call_exitprocs+0xa4>
 804e76c:	8c7fffc4 	addi	r17,r17,-1
 804e770:	88bfffd8 	cmpnei	r2,r17,-1
 804e774:	843fff04 	addi	r16,r16,-4
 804e778:	103ff91e 	bne	r2,zero,804e760 <__call_exitprocs+0x5c>
 804e77c:	dfc00817 	ldw	ra,32(sp)
 804e780:	ddc00717 	ldw	r23,28(sp)
 804e784:	dd800617 	ldw	r22,24(sp)
 804e788:	dd400517 	ldw	r21,20(sp)
 804e78c:	dd000417 	ldw	r20,16(sp)
 804e790:	dcc00317 	ldw	r19,12(sp)
 804e794:	dc800217 	ldw	r18,8(sp)
 804e798:	dc400117 	ldw	r17,4(sp)
 804e79c:	dc000017 	ldw	r16,0(sp)
 804e7a0:	dec00904 	addi	sp,sp,36
 804e7a4:	f800283a 	ret
 804e7a8:	90800117 	ldw	r2,4(r18)
 804e7ac:	81800017 	ldw	r6,0(r16)
 804e7b0:	10bfffc4 	addi	r2,r2,-1
 804e7b4:	14401726 	beq	r2,r17,804e814 <__call_exitprocs+0x110>
 804e7b8:	80000015 	stw	zero,0(r16)
 804e7bc:	303feb26 	beq	r6,zero,804e76c <__call_exitprocs+0x68>
 804e7c0:	a446983a 	sll	r3,r20,r17
 804e7c4:	90806217 	ldw	r2,392(r18)
 804e7c8:	95c00117 	ldw	r23,4(r18)
 804e7cc:	1884703a 	and	r2,r3,r2
 804e7d0:	1000081e 	bne	r2,zero,804e7f4 <__call_exitprocs+0xf0>
 804e7d4:	303ee83a 	callr	r6
 804e7d8:	90c00117 	ldw	r3,4(r18)
 804e7dc:	98805217 	ldw	r2,328(r19)
 804e7e0:	1dc0011e 	bne	r3,r23,804e7e8 <__call_exitprocs+0xe4>
 804e7e4:	90bfe126 	beq	r18,r2,804e76c <__call_exitprocs+0x68>
 804e7e8:	103fe426 	beq	r2,zero,804e77c <__call_exitprocs+0x78>
 804e7ec:	1025883a 	mov	r18,r2
 804e7f0:	003fd506 	br	804e748 <__call_exitprocs+0x44>
 804e7f4:	90806317 	ldw	r2,396(r18)
 804e7f8:	81002017 	ldw	r4,128(r16)
 804e7fc:	1886703a 	and	r3,r3,r2
 804e800:	1800061e 	bne	r3,zero,804e81c <__call_exitprocs+0x118>
 804e804:	200b883a 	mov	r5,r4
 804e808:	a809883a 	mov	r4,r21
 804e80c:	303ee83a 	callr	r6
 804e810:	003ff106 	br	804e7d8 <__call_exitprocs+0xd4>
 804e814:	94400115 	stw	r17,4(r18)
 804e818:	003fe806 	br	804e7bc <__call_exitprocs+0xb8>
 804e81c:	303ee83a 	callr	r6
 804e820:	003fed06 	br	804e7d8 <__call_exitprocs+0xd4>

0804e824 <_vfprintf_r>:
 804e824:	80069081 	jmpi	8006908 <___vfprintf_internal_r>
