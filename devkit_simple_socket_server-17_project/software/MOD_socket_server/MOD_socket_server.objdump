
MOD_socket_server.elf:     file format elf32-littlenios2
MOD_socket_server.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000338

Program Header:
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x000564cc memsz 0x0005f560 flags rwx
    LOAD off    0x00057000 vaddr 0x14430000 paddr 0x14430000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  14430000  14430000  00057000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  08000120  08000120  00000120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0004dbc8  08000338  08000338  00000338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006264  0804df00  0804df00  0004df00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000235c  08054170  08054170  00054170  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009094  080564cc  080564cc  000564cc  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_ddr3_emif_0 00000000  0805f560  0805f560  00057000  2**0
                  CONTENTS
  7 .ext_flash_avl_mem 00000000  14430020  14430020  00057000  2**0
                  CONTENTS
  8 .descriptor_memory 00000000  18000000  18000000  00057000  2**0
                  CONTENTS
  9 .onchip_ram   00000000  18002800  18002800  00057000  2**0
                  CONTENTS
 10 .comment      0000002c  00000000  00000000  00057000  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001fd0  00000000  00000000  00057030  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0011fa1e  00000000  00000000  00059000  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0002476a  00000000  00000000  00178a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00043b32  00000000  00000000  0019d188  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000976c  00000000  00000000  001e0cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000daf8  00000000  00000000  001ea428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000262d0  00000000  00000000  001f7f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000050  00000000  00000000  0021e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002478  00000000  00000000  0021e240  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000006  00000000  00000000  0022c222  2**0
                  CONTENTS, READONLY
 21 .cpu          00000003  00000000  00000000  0022c228  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0022c22b  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0022c22c  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0022c22d  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0022c231  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0022c235  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   00000009  00000000  00000000  0022c239  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    00000009  00000000  00000000  0022c242  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   00000009  00000000  00000000  0022c24b  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 00000005  00000000  00000000  0022c254  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000039  00000000  00000000  0022c259  2**0
                  CONTENTS, READONLY
 32 .jdi          000047e1  00000000  00000000  0022c292  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     0012f331  00000000  00000000  00230a73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
14430000 l    d  .entry	00000000 .entry
08000120 l    d  .exceptions	00000000 .exceptions
08000338 l    d  .text	00000000 .text
0804df00 l    d  .rodata	00000000 .rodata
08054170 l    d  .rwdata	00000000 .rwdata
080564cc l    d  .bss	00000000 .bss
0805f560 l    d  .mem_if_ddr3_emif_0	00000000 .mem_if_ddr3_emif_0
14430020 l    d  .ext_flash_avl_mem	00000000 .ext_flash_avl_mem
18000000 l    d  .descriptor_memory	00000000 .descriptor_memory
18002800 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MOD_socket_server_bsp//obj/HAL/src/crt0.o
0800037c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 DELHProtocol.c
080566e0 l     O .bss	0000039c Connections
080564cc l     O .bss	00000004 LEDCommand
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 iniche_init.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 simple_socket_server.c
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getchar.c
00000000 l    df *ABS*	00000000 impure.c
080542b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003b74 l     F .text	00000248 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08005ef8 l     F .text	000000c0 __sbprintf
0804f9c8 l     O .rodata	00000010 blanks.5176
0804f9b8 l     O .rodata	00000010 zeroes.5177
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08006178 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fileno.c
00000000 l    df *ABS*	00000000 findfp.c
08007dd8 l     F .text	00000008 __fp_lock
08007dec l     F .text	00000168 __sinit.part.0
08007f54 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0804fa74 l     O .rodata	0000000c p05.3991
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800b1dc l     F .text	000000f4 __sprint_r.part.0
0800c608 l     F .text	000000c0 __sbprintf
0804fba8 l     O .rodata	00000010 blanks.5153
0804fb98 l     O .rodata	00000010 zeroes.5154
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 refill.c
0800cf74 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
0800d360 l     F .text	0000004c _init_signal_r.part.0
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08010978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08010a84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
08010b64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
08010ccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0805638c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
08056390 l     O .rwdata	00000004 lockid
08056504 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
08056394 l     O .rwdata	00000004 lockid
0805650c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
08012884 l     F .text	00000048 OS_InitMisc
080128cc l     F .text	0000006c OS_InitRdyList
08012a40 l     F .text	000000e4 OS_InitTCBList
080127a4 l     F .text	000000e0 OS_InitEventList
08012938 l     F .text	00000084 OS_InitTaskIdle
080129bc l     F .text	00000084 OS_InitTaskStat
08012cb4 l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
08014a78 l     F .text	000000f4 OS_FlagTaskRdy
08014834 l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08018bd8 l     F .text	00000034 alt_dev_reg
08054c50 l     O .rwdata	0000003c i2c_ckm_c0
08054c8c l     O .rwdata	0000003c i2c_ckm_c1
08054cc8 l     O .rwdata	0000003c i2c_ckm_id
08054d04 l     O .rwdata	0000003c i2c_rxm_ctrl
08054d40 l     O .rwdata	0000003c i2c_rxm_id
08054d7c l     O .rwdata	0000106c jtag_uart
08055de8 l     O .rwdata	000000dc ext_flash
08055ed0 l     O .rwdata	00000070 msgdma_rx
08055f40 l     O .rwdata	00000070 msgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08018eac l     F .text	00000110 optional_irq_callback
0801900c l     F .text	000000a0 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801adb4 l     F .text	000002ac altera_avalon_jtag_uart_irq
0801b060 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801b860 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
08056566 l     O .bss	00000001 tse_system_count.5300
08056567 l     O .bss	00000001 is_init.5382
00000000 l    df *ABS*	00000000 altera_generic_quad_spi_controller.c
08020880 l     F .text	00000034 alt_flash_device_register
08021318 l     F .text	0000008c alt_qspi_poll_for_write_in_progress
0802127c l     F .text	0000009c alt_qspi_validate_read_write_arguments
00000000 l    df *ABS*	00000000 altera_msgdma.c
080213a4 l     F .text	0000003c alt_get_errno
080213e0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
08021474 l     F .text	0000012c alt_msgdma_write_extended_descriptor
080215a0 l     F .text	00000188 alt_msgdma_irq
08021728 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
080217b4 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
08021908 l     F .text	00000344 alt_msgdma_descriptor_async_transfer
08021c4c l     F .text	00000410 alt_msgdma_descriptor_sync_transfer
0802232c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
080223d0 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
08056aa4 l     O .bss	0000003c closers
0805657c l     O .bss	00000004 nclosers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
08056430 l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
08056ae0 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
0802a9d0 l     F .text	000000ac dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
00000000 l    df *ABS*	00000000 asm_cksum.o
0802c3f8 l       .text	00000000 done
0802c288 l       .text	00000000 asm1
0802c3b4 l       .text	00000000 loop0
0802c2b0 l       .text	00000000 loop
0802c3d0 l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
080565e8 l     O .bss	00000004 kbd_init.4473
080565e4 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
0805661c l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
08030678 l     F .text	0000008c sockargs
0802f9a8 l     F .text	000001e0 t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
08038158 l     F .text	000000cc bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0803aa1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0803aba0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0803abcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0803b15c l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0803b288 l     F .text	0000003c alt_get_errno
0803b2c4 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0803b72c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0803bc6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
08056654 l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
0803c57c l     F .text	0000014c check_interval_timers
08056660 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
08056664 l     O .bss	00000004 arp_timer
0805666c l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
080564b4 l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
080566ac l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
080564bc l     O .rwdata	00000004 iCounter.5275
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
08056af8 l     O .bss	0000001e nearBuf.4902
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
08048c04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 icmp.c
08056364 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
0804a714 l     F .text	00000224 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
08054134 l     O .rodata	00000010 blanks.5157
08054124 l     O .rodata	00000010 zeroes.5158
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintf.c
08054154 l     O .rodata	00000010 blanks.5137
08054144 l     O .rodata	00000010 zeroes.5138
00000000 l    df *ABS*	00000000 vfprintfr_1.c
080566d8 g     O .bss	00000004 alt_instruction_exception_handler
0802340c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
0800329c g     F .text	00000018 putchar
0805f05c g     O .bss	00000014 soq
0800a774 g     F .text	00000070 _mprec_log10
0801ca5c g     F .text	000000cc alt_tse_get_mac_info
080563e2 g     O .rwdata	00000002 OSTaskNameSize
0800a850 g     F .text	00000060 __any_on
0800cd6c g     F .text	00000058 _isatty_r
0804fa80 g     O .rodata	00000028 __mprec_tinytens
0803e278 g     F .text	0000070c ip_write_internal
08010ddc g     F .text	000000c0 alt_main
0804a50c g     F .text	0000008c strcpy
0802bb98 g     F .text	000000ac pk_free
080032b4 g     F .text	000000cc _puts_r
0805f208 g     O .bss	00000100 alt_irq
08056204 g     O .rwdata	00000009 rtp_priority
0800ce5c g     F .text	00000064 _lseek_r
08049d8c g     F .text	000002ec icmp_timex
0802d434 g     F .text	00000048 m_freem
0804870c g     F .text	00000048 vgetc
0802c540 g     F .text	00000020 clock_c
08056634 g     O .bss	00000004 tcp_optionbuf
0803ddb4 g     F .text	0000006c if_getbynum
080152bc g     F .text	000000cc OS_MemInit
080565d4 g     O .bss	00000004 dsc_rlyerrs
080565c4 g     O .bss	00000004 dsc_releases
08028ae4 g     F .text	0000006c TK_OSTaskQuery
0802c268 g       .text	00000000 asm_cksum
0802061c g     F .text	000000f0 marvell_cfg_rgmii
08018b74 g     F .text	00000064 OSTimeSet
08048614 g     F .text	000000f8 vgetc_locked
0802cd18 g     F .text	00000020 post_task_setup
0804177c g     F .text	00000328 ipr_stats
08039904 g     F .text	00000118 tcp_attach
08056440 g     O .rwdata	00000004 reqlist_len
0802e78c g     F .text	00000078 tcp_tick
08027e24 g     F .text	0000007c print_ipad
08028a0c g     F .text	000000d8 tcp_wakeup
0800f4c8 g     F .text	00000080 .hidden __eqdf2
080564d4 g     O .bss	00000004 last_flash_sector_offset
08056580 g     O .bss	00000004 igmp_timers_are_running
08002498 g     F .text	000000f0 led_bit_toggle
08036c1c g     F .text	0000012c tcp_pulloutofband
0802210c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
08000710 g     F .text	00000090 allListeners
0801dc70 g     F .text	000001d0 alt_tse_phy_print_profile
080114dc g     F .text	00000638 OSEventPendMulti
0805f560 g       *ABS*	00000000 __alt_heap_start
0803bfe0 g     F .text	00000024 OSTaskCreateHook
08003b6c g     F .text	00000008 strtok_r
0802b444 g     F .text	00000060 dhc_ifacedone
080203bc g     F .text	00000098 marvell_phy_cfg
08041af4 g     F .text	00000354 ip_rcv
080483a4 g     F .text	00000164 vfseek
08032ef8 g     F .text	00000108 soqremque
0800d614 g     F .text	00000060 _kill_r
0804361c g     F .text	0000076c udpdemux
08024db8 g     F .text	000000dc tse_mac_close
0800325c g     F .text	00000038 printf
08056680 g     O .bss	00000004 rt_mib
080563ba g     O .rwdata	00000002 OSMboxEn
0802b36c g     F .text	00000058 dhc_state_init
0804ca8c g     F .text	0000001c vsprintf
08011b6c g     F .text	0000004c OSIntEnter
0800d218 g     F .text	0000006c _wcrtomb_r
0800d3c0 g     F .text	00000084 _signal_r
0800b178 g     F .text	0000005c __sseek
080080d4 g     F .text	00000010 __sinit
080428e0 g     F .text	0000010c in_delmulti
0800c6c8 g     F .text	00000148 __swbuf_r
08020784 g     F .text	0000005c PEF7071_config
08056698 g     O .bss	00000004 so_evtmap_create
080563ca g     O .rwdata	00000002 OSQEn
08046a68 g     F .text	00000088 in_pcballoc
0805645c g     O .rwdata	00000002 socket_defaults
0800cdc4 g     F .text	00000074 _setlocale_r
0803cc94 g     F .text	00000454 send_arp
08007f5c g     F .text	00000068 __sfmoreglue
0801974c g     F .text	000000a8 alt_avalon_i2c_rx_read
080474c4 g     F .text	00000338 vfopen_locked
080564dc g     O .bss	00000004 SSSLEDCommandQ
0801119c g     F .text	000000d4 __malloc_unlock
0805e484 g     O .bss	000000e0 eth_tse_if
0803c048 g     F .text	00000020 OSTaskStatHook
0803c49c g     F .text	00000054 prep_modules
0802738c g     F .text	000001dc bsd_i_sockoptlen
08056514 g     O .bss	00000001 OSLockNesting
08021018 g     F .text	00000264 altera_qspi_controller_init
08056438 g     O .rwdata	00000004 xids
0801a95c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
080039ec g     F .text	00000018 strerror
0801cc94 g     F .text	00000a78 getPHYSpeed
08047a04 g     F .text	00000044 vfclose
0805f0fc g     O .bss	0000002c tcb
08056408 g     O .rwdata	00000002 OSDataSize
0803b8bc g     F .text	00000034 alt_remap_cached
08056515 g     O .bss	00000001 OSRunning
0803dafc g     F .text	000002b8 grat_arp
08002634 g     F .text	0000005c get_ip_addr
080464fc g     F .text	00000094 inet_pton
0803def4 g     F .text	0000008c reg_type
0805ec00 g     O .bss	000000f0 dhc_states
08026308 g     F .text	00000170 igmp_fasttimo
08047bb0 g     F .text	00000060 vunlink_flag_open_files
0802b190 g     F .text	0000007c dhc_halt
080194cc g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
080565b8 g     O .bss	00000004 dsc_acks
0805f128 g     O .bss	000000e0 tcpstat
080410ac g     F .text	0000033c ip_reasm_copy_queued_fragments_into_reassy_buffer
0802d968 g     F .text	00000098 dtom
0803805c g     F .text	000000fc tcp_setpersist
0802fd48 g     F .text	00000188 t_getsockopt
080096e8 g     F .text	0000012c memmove
08001458 g     F .text	00000310 initItfcMap
080565c8 g     O .bss	00000004 dsc_naks
0802dd94 g     F .text	00000588 ip_output
0803c094 g     F .text	00000020 OSInitHookBegin
0804a078 g     F .text	00000054 icmp_du
08056434 g     O .rwdata	00000004 num_net_tasks
080566bc g     O .bss	00000004 vfiles
08056400 g     O .rwdata	00000002 OSTmrSize
08045cb8 g     F .text	000000f4 dhc_main_ipset
080080c0 g     F .text	00000014 _cleanup
080402d0 g     F .text	000002a8 ip_reasm_process_first_fragment
0801a1b0 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
08009814 g     F .text	000000a4 _Balloc
08003ac8 g     F .text	000000a4 __strtok_r
080029a8 g     F .text	0000002c get_board_mac_addr
0802205c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
08056518 g     O .bss	00000004 OSIdleCtr
0801f630 g     F .text	000001c4 alt_tse_phy_set_adv_1000
08056418 g     O .rwdata	00000001 max_mac_system
08044cbc g     F .text	000005a0 ip_setmoptions
0801be78 g     F .text	000008c4 alt_tse_system_add_sys
0800f548 g     F .text	000000f0 .hidden __gtdf2
08046018 g     F .text	0000002c md_fseek
0803bda0 g     F .text	00000024 altera_nios2_gen2_irq_init
0803be70 g       .text	00000000 OSStartTsk
08012fdc g     F .text	000002e0 OS_TCBInit
08040578 g     F .text	00000088 ip_reassm
0802b20c g     F .text	00000160 dhc_reclaim
0805f4e8 g     O .bss	00000010 udp_mib
14430000 g     F .entry	00000000 __reset
080304e4 g     F .text	000000d4 t_shutdown
08008c3c g     F .text	00000008 __localeconv_l
0802ffac g     F .text	0000013c t_recvfrom
08056406 g     O .rwdata	00000002 OSTmrWheelTblSize
08045434 g     F .text	0000066c u_mctest_run
08042a50 g     F .text	00000080 prep_ifaces
0805659c g     O .bss	00000001 to_netmain
0802b884 g     F .text	000000c0 pk_alloc
080563a6 g     O .rwdata	00000002 OSEventSize
08002100 g     F .text	000002a8 alt_SSSErrorHandler
0805651c g     O .bss	00000001 OSPrioHighRdy
0800cd0c g     F .text	00000060 _fstat_r
08054188 g     O .rwdata	00000130 tse_mac_device
080287d4 g     F .text	00000048 tk_nettick
0803c004 g     F .text	00000024 OSTaskDelHook
080564e4 g     O .bss	00000004 errno
0800b034 g     F .text	00000010 __srget
08034118 g     F .text	000000c8 in_pcbnotify
0800b0f0 g     F .text	00000008 __seofread
0803be50 g       .text	00000000 OSStartHighRdy
0805ecf0 g     O .bss	00000014 lilfreeq
080017f0 g     F .text	0000069c alt_uCOSIIErrorHandler
08042af8 g     F .text	0000002c evtmap_setup
080175e4 g     F .text	000001dc OSTaskCreateExt
080565a0 g     O .bss	00000004 tcp_sleep_timeout
080338c0 g     F .text	000001b8 sbdrop
08056694 g     O .bss	00000004 net_system_exit
0804ce18 g     F .text	000010e4 ___svfiprintf_internal_r
0805f4f8 g     O .bss	00000068 icmp_mib
08038abc g     F .text	00000074 tcp_getseq
08042ecc g     F .text	000000b8 ip_raw_alloc
0801ff0c g     F .text	000004b0 alt_tse_phy_set_common_speed
08020b74 g     F .text	00000210 alt_qspi_controller_write_block
0801435c g     F .text	00000064 OSFlagPendGetFlagsRdy
080563e6 g     O .rwdata	00000002 OSTaskStatStkSize
0805e564 g     O .bss	00000010 pmac_groups
08029ca4 g     F .text	0000098c dhc_request
080315dc g     F .text	00000758 soreceive
0801344c g     F .text	00000324 OSFlagAccept
0801590c g     F .text	000000bc OSQFlush
08015388 g     F .text	00000144 OSQAccept
080564fc g     O .bss	00000004 alt_argv
0805e37c g       *ABS*	00000000 _gp
08041aa4 g     F .text	00000050 ip_reasm_send_icmp_timex
0803bb58 g     F .text	00000114 usleep
0801a9a0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
08047a48 g     F .text	00000048 vfflush
0805f004 g     O .bss	00000040 resid_semaphore
08027cdc g     F .text	00000148 hexdump
080401b8 g     F .text	00000090 ip_reasm_incr_mem_useage
0802691c g     F .text	00000080 igmp_leavegroup
08017440 g     F .text	000001a4 OSTaskCreate
08016f7c g     F .text	000004c4 OSTaskChangePrio
08056510 g     O .bss	00000004 alt_heapsem
08010a64 g     F .text	00000020 getpid
08038910 g     F .text	000000e8 tcp_close
080132bc g     F .text	00000190 OSDebugInit
080177c0 g     F .text	00000344 OSTaskDel
08048b2c g     F .text	0000005c vferror
0803bae0 g     F .text	00000078 alt_uncached_malloc
0801965c g     F .text	00000044 alt_avalon_i2c_is_busy
0801b990 g     F .text	00000060 tse_mac_initTransInfo2
08022bf4 g     F .text	0000014c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
080441c0 g     F .text	000000bc udp_alloc
0805606c g     O .rwdata	00000180 alt_fd_list
0805b260 g     O .bss	00000370 OSFlagTbl
08056620 g     O .bss	00000008 mbstat
08008b30 g     F .text	0000007c _getc_r
08008bac g     F .text	00000090 getc
08003294 g     F .text	00000008 _putchar_r
08019400 g     F .text	000000cc alt_avalon_i2c_master_config_set
0801258c g     F .text	000000b0 OS_EventTaskRemove
08044930 g     F .text	00000130 igmpv2_chk_set_timer
0802881c g     F .text	00000030 TK_OSTimeDly
0803ad78 g     F .text	00000090 alt_find_dev
08000df8 g     F .text	00000044 TrafficChanMessage
08002ea4 g     F .text	00000100 memcpy
0801bc20 g     F .text	00000054 tse_mac_setMIImode
080565d0 g     O .bss	00000004 dsc_rebind
0803c8b0 g     F .text	0000007c task_stats
0802f15c g     F .text	00000050 DOMAIN_CHECK
0802e31c g     F .text	00000038 in_broadcast
080563d0 g     O .rwdata	00000002 OSRdyTblSize
080003f4 g     F .text	000000a8 addChan
0801d70c g     F .text	00000048 alt_tse_phy_rd_mdio_addr
080566b8 g     O .bss	00000004 vfsystems
08044110 g     F .text	000000b0 udp_socket
08056570 g     O .bss	00000004 MaxMtu
08033dd8 g     F .text	00000150 sock_selscan
08007de0 g     F .text	0000000c _cleanup_r
080107a0 g     F .text	000000bc .hidden __floatsidf
0803ffa0 g     F .text	000000c4 ip_reasm_match_frag_with_ire
08033058 g     F .text	00000058 socantrcvmore
0801b9f0 g     F .text	000000c8 tse_mac_sTxWrite
0800321c g     F .text	00000010 perror
0803b20c g     F .text	0000007c alt_io_redirect
0800f638 g     F .text	000000f0 .hidden __ltdf2
080565fc g     O .bss	00000004 netq_intmask
080464b0 g     F .text	0000004c hextoa
0804df00 g       *ABS*	00000000 __DTOR_END__
08023108 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_extd_desc_list
08023448 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
080302e4 g     F .text	00000200 t_send
0803aa58 g     F .text	000000d0 alt_close
080233b8 g     F .text	00000054 alt_msgdma_register_callback
08019ff4 g     F .text	000001bc alt_avalon_i2c_master_transmit
08056628 g     O .bss	00000002 select_wait
08003380 g     F .text	00000010 puts
08028368 g     F .text	00000044 std_out
08048f44 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0805e594 g     O .bss	00000030 tse_iniche_dev_driver_data
08048754 g     F .text	00000124 vfslookup_locked
08030e94 g     F .text	00000098 soaccept
08011270 g     F .text	00000124 OSEventNameGet
080563b4 g     O .rwdata	00000002 OSFlagMax
08003390 g     F .text	0000065c _strerror_r
0805f070 g     O .bss	0000003c tcpmib
08030704 g     F .text	00000094 t_errno
08042b24 g     F .text	000000d8 ip_raw_open
0802a8d0 g     F .text	00000100 dhc_decline
0800a6cc g     F .text	000000a8 __ratio
08011bb8 g     F .text	000000f4 OSIntExit
080564b8 g     O .rwdata	00000004 ipRoutes
08047b60 g     F .text	00000050 vfeof
0800c5ec g     F .text	0000001c __vfiprintf_internal
08038d8c g     F .text	00000060 tcp_canceltimers
080295cc g     F .text	000001bc dhc_buildheader
080563ee g     O .rwdata	00000002 OSTCBSize
0805651d g     O .bss	00000001 OSPrioCur
0801b2c8 g     F .text	000002c8 altera_avalon_jtag_uart_read
0804a2d8 g     F .text	00000010 malloc
080566b4 g     O .bss	00000004 inpcb_cachemiss
0802285c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
0800322c g     F .text	00000030 _printf_r
08046670 g     F .text	000000c4 inet46_addr
080566b0 g     O .bss	00000004 inpcb_cachehits
0800e230 g     F .text	00000064 .hidden __udivsi3
08056028 g     O .rwdata	0000000b tcp_outflags
0805e5c4 g     O .bss	00000290 tse
08010ac0 g     F .text	000000a4 isatty
0801c73c g     F .text	00000144 alt_tse_sys_enable_mdio_sharing
0800d444 g     F .text	000000c4 _raise_r
080563d4 g     O .rwdata	00000002 OSStkWidth
0800c880 g     F .text	00000064 __assert_func
08023870 g     F .text	0000007c msgdma_reset
0804fad0 g     O .rodata	000000c8 __mprec_tens
0804733c g     F .text	00000070 vf_alloc_and_link_vop
080563c8 g     O .rwdata	00000002 OSPtrSize
08056684 g     O .bss	00000004 ipr_curr_mem
08025ffc g     F .text	00000068 exit_hook
08056584 g     O .bss	00000004 igmp_cticks
0801c9e0 g     F .text	0000007c alt_tse_get_mac_info_index
08056610 g     O .bss	00000004 mheap_sem_ptr
08036f84 g     F .text	00000048 ip4_tcpmss
080563a8 g     O .rwdata	00000002 OSEventTblSize
080005c4 g     F .text	000000b8 findExistingChan
0805f46c g     O .bss	00000014 netlist
08031d34 g     F .text	00000098 soshutdown
0803bdc4 g       .text	00000000 OSCtxSw
0803c428 g     F .text	00000050 packet_check
0802a630 g     F .text	000001ec dhc_setip
0805f0ac g     O .bss	00000014 mbufq
08030e44 g     F .text	00000050 soabort
0801926c g     F .text	00000098 alt_avalon_i2c_enable
080564f0 g     O .bss	00000004 __malloc_top_pad
08056520 g     O .bss	00000004 OSTCBList
0800d674 g     F .text	00000004 _getpid_r
0802be90 g     F .text	00000100 qdel
0803c290 g     F .text	00000160 station_state
08043010 g     F .text	00000154 rt_lookup
08056640 g     O .bss	00000004 alt_fd_list_lock
08003ddc g     F .text	0000001c strtoul
0801a888 g     F .text	0000006c alt_avalon_i2c_int_disable
0802699c g     F .text	000002dc igmp_validate
08020f6c g     F .text	000000ac alt_qspi_controller_read
08008c44 g     F .text	0000000c _localeconv_r
08025d98 g     F .text	00000264 ip_startup
08024644 g     F .text	00000198 tse_msgdmaRx_isr
0802f460 g     F .text	00000250 t_accept
08032af8 g     F .text	00000098 soisdisconnecting
08009c60 g     F .text	00000054 __i2b
08008534 g     F .text	000004bc __sfvwrite_r
0800d508 g     F .text	000000b8 __sigtramp_r
080257d8 g     F .text	000003a4 pktdemux
0805b5d0 g     O .bss	00000c30 OSMemTbl
08056524 g     O .bss	00000001 OSTickStepState
0801d7ac g     F .text	0000012c alt_tse_phy_wr_mdio_reg
0802c430 g     F .text	00000088 kbhit
0802fb88 g     F .text	000001c0 t_setsockopt
0800b044 g     F .text	00000058 _sbrk_r
080561ec g     O .rwdata	00000018 icmpdu_types
0801de40 g     F .text	000006a8 alt_tse_mac_group_init
08047c10 g     F .text	00000200 vunlink
080238ec g     F .text	00000a64 tse_mac_init
14000000 g       *ABS*	00000000 __alt_mem_ext_flash_avl_mem
080563cc g     O .rwdata	00000002 OSQMax
08027b3c g     F .text	000000a4 ccksum
080473ac g     F .text	000000c8 vf_alloc_buffer
080566a8 g     O .bss	00000004 cachedRoute
08056444 g     O .rwdata	00000004 lilbufs
0805c200 g     O .bss	00000800 OSTaskStatStk
08046044 g     F .text	00000024 md_ftell
08027be0 g     F .text	00000054 cksum
08014ee0 g     F .text	000000f4 OSMemNameGet
08030a6c g     F .text	00000110 sofree
08056578 g     O .bss	00000004 ifNumber
080563ac g     O .rwdata	00000002 OSFlagEn
0800cf10 g     F .text	00000064 _read_r
080563f2 g     O .rwdata	00000002 OSTimeTickHookEn
0803ab28 g     F .text	00000078 alt_dcache_flush
08014b6c g     F .text	000000a4 OS_FlagUnlink
08015dd4 g     F .text	00000174 OSQPost
08056484 g     O .rwdata	00000004 alt_max_fd
08012b7c g     F .text	0000006c OS_MemCopy
0805644c g     O .rwdata	00000004 bigbufs
0801bb28 g     F .text	00000070 tse_mac_aTxWrite
08039a1c g     F .text	000000cc tcp_disconnect
08012be8 g     F .text	000000cc OS_Sched
0800c9ac g     F .text	000000f8 _fclose_r
08014de8 g     F .text	000000f8 OSMemGet
08017df8 g     F .text	000001bc OSTaskNameSet
08007d4c g     F .text	00000028 fflush
080564ec g     O .bss	00000004 __malloc_max_sbrked_mem
08056528 g     O .bss	00000004 OSCtxSwCtr
0805eb78 g     O .bss	00000064 igmpstats
0803c068 g     F .text	0000002c OSTimeTickHook
08029bd0 g     F .text	000000d4 dhc_rx_offer
08027568 g     F .text	00000108 bsd_getsockopt
080563b6 g     O .rwdata	00000002 OSFlagNameSize
0805f4d0 g     O .bss	00000018 ire_stats
0801a3b8 g     F .text	0000020c alt_avalon_i2c_master_receive
08002588 g     F .text	00000058 LEDManagementTask
08039c4c g     F .text	000001a0 udp_soinput
0802bde0 g     F .text	000000b0 putq
0801263c g     F .text	000000fc OS_EventTaskRemoveMulti
08056598 g     O .bss	00000004 iniche_net_ready
0800e2f0 g     F .text	00000978 .hidden __adddf3
08012444 g     F .text	00000148 OS_EventTaskWaitMulti
08048ae4 g     F .text	00000048 isvfile
08031ec8 g     F .text	00000528 sosetopt
0802867c g     F .text	000000e0 netmain
08036fcc g     F .text	000000f8 tcp_mss
0800a464 g     F .text	00000104 __b2d
08046150 g     F .text	000002fc parse_ipad
0804731c g     F .text	00000020 get_vfopen_error
080225bc g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
080563ce g     O .rwdata	00000002 OSQSize
0800dc08 g     F .text	00000534 .hidden __umoddi3
08010d08 g     F .text	000000d4 lseek
0803c4f0 g     F .text	0000008c inet_timer
080168c4 g     F .text	00000214 OSSemPend
0801d9a8 g     F .text	000002c8 alt_tse_phy_add_profile_default
0801a8f4 g     F .text	00000068 alt_avalon_i2c_int_enable
0801f0a4 g     F .text	0000058c alt_tse_phy_get_cap
0800067c g     F .text	00000094 buildaddChan
0805637c g     O .rwdata	00000004 _global_impure_ptr
08028028 g     F .text	00000154 print_eth
080477fc g     F .text	00000050 vfopen
0803b768 g     F .text	000000fc alt_read
0800aa5c g     F .text	00000564 _realloc_r
08001e8c g     F .text	00000274 alt_NetworkErrorHandler
080563b8 g     O .rwdata	00000002 OSLowestPrio
0805f560 g       *ABS*	00000000 __bss_end
0803b074 g     F .text	000000e8 alt_iic_isr_register
0802d330 g     F .text	00000104 m_free
0804a93c g     F .text	0000001c strtol_l
0803c0f4 g     F .text	00000024 OSTCBInitHook
08024d78 g     F .text	00000040 tse_mac_stats
0802b944 g     F .text	00000254 pk_validate
080563fe g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0803b994 g     F .text	00000108 alt_tick
0804709c g     F .text	00000254 in_pcblookup
0802b538 g     F .text	000000c0 find_opt
08023210 g     F .text	000001a8 alt_msgdma_init
0800d678 g     F .text	00000590 .hidden __udivdi3
0802d1a8 g     F .text	00000188 m_getnbuf
0801a7b0 g     F .text	00000058 alt_avalon_i2c_int_status_get
0802bc64 g     F .text	000000c4 dump_buf_estats
0800cc70 g     F .text	00000024 _fputwc_r
0801ef1c g     F .text	00000188 alt_tse_phy_check_link
0805667c g     O .bss	00000004 arpRepsOut
080563a0 g     O .rwdata	00000002 OSEventEn
0804faa8 g     O .rodata	00000028 __mprec_bigtens
08009a14 g     F .text	00000138 __s2b
080563fa g     O .rwdata	00000002 OSTmrCfgNameSize
0800d348 g     F .text	00000018 abort
0801085c g     F .text	00000090 .hidden __floatunsidf
0803c118 g     F .text	000000ec netmain_init
08020538 g     F .text	000000e4 marvell_cfg_sgmii
0801ed58 g     F .text	000001c4 alt_tse_phy_restart_an
0800a184 g     F .text	00000058 __mcmp
080234c0 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
080565b4 g     O .bss	00000004 dsc_requests
08038374 g     F .text	000003f4 tcp_respond
0803a024 g     F .text	000002d0 udp4_sockbind
08056600 g     O .bss	00000004 old_mode
080266f0 g     F .text	0000022c igmp_joingroup
0802e444 g     F .text	00000348 so_icmpdu
080080f4 g     F .text	00000014 __fp_lock_all
080566c8 g     O .bss	00000004 vfs_dir_stale
0803b028 g     F .text	0000004c alt_ic_irq_enabled
0805e574 g     O .bss	00000020 pphy_profiles
080413e8 g     F .text	000000c8 ip_reasm_process_timer_tick
08048b88 g     F .text	00000058 vclearerr
08027a60 g     F .text	000000dc bsd_setsockopt
0802d914 g     F .text	00000054 mbuf_len
08014998 g     F .text	000000e0 OS_FlagInit
0803b8f0 g     F .text	000000a4 alt_alarm_stop
080488c0 g     F .text	000001cc strippath
0805643c g     O .rwdata	00000004 reqlist
080288c0 g     F .text	0000014c tcp_sleep
0804a958 g     F .text	0000001c strtol
08028ee4 g     F .text	000006e8 dhc_upcall
08039ae8 g     F .text	000000c8 tcp_usrclosed
18000000 g       *ABS*	00000000 __alt_mem_descriptor_memory
080565ec g     O .bss	00000004 cticks_factor
080190ac g     F .text	00000054 alt_avalon_i2c_register_callback
080563dc g     O .rwdata	00000002 OSTaskIdleStkSize
08046b48 g     F .text	00000210 in_pcbbind
08056644 g     O .bss	00000004 alt_irq_active
08019100 g     F .text	0000012c alt_avalon_i2c_init
080164e4 g     F .text	000000b4 OSSemAccept
080150f0 g     F .text	000000e0 OSMemPut
08014c10 g     F .text	000001d8 OSMemCreate
0805652c g     O .bss	00000004 OSIdleCtrMax
080001fc g     F .exceptions	000000c8 alt_irq_handler
08056044 g     O .rwdata	00000028 alt_dev_null
080221f4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
0805645e g     O .rwdata	00000001 tcprexmtthresh
080563f0 g     O .rwdata	00000002 OSTicksPerSec
0803df80 g     F .text	00000094 if_killsocks
0803e984 g     F .text	00000210 ip_write
08041e48 g     F .text	000005a0 ip_rcv_phase2
0802f964 g     F .text	00000044 t_getsockname
0802f6b0 g     F .text	00000270 t_connect
08056458 g     O .rwdata	00000004 TCPTV_MSL
0805ed04 g     O .bss	00000010 memestats
0801ec4c g     F .text	0000010c alt_tse_phy_init
0802c4b8 g     F .text	00000050 getch
080562e4 g     O .rwdata	00000080 vfs_root_path
0802f920 g     F .text	00000044 t_getpeername
08040248 g     F .text	00000088 ip_reasm_decr_mem_useage
080331e4 g     F .text	00000088 soreserve
0803bdc4 g       .text	00000000 OSIntCtxSw
0802cf5c g     F .text	00000034 npalloc
08023058 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_std_desc_list
08009b4c g     F .text	00000064 __hi0bits
080566a4 g     O .bss	00000004 ipraw_eps
0802b5f8 g     F .text	0000028c pk_init
08045e48 g     F .text	00000158 md_fread
08024470 g     F .text	000001d4 tse_mac_raw_send
08010720 g     F .text	00000080 .hidden __fixdfsi
08000db4 g     F .text	00000044 ConfigChanMessage
0805f308 g     O .bss	00000064 intimers
080332bc g     F .text	0000004c sbrelease
08034260 g     F .text	000000e4 ifd_clr
08033b78 g     F .text	00000090 sbdroprecord
0802817c g     F .text	0000007c uslash
0803bca8 g     F .text	000000f8 alt_write
08056678 g     O .bss	00000004 arpRepsIn
08028d78 g     F .text	00000088 dhc_get_srv_ipaddr
0803c6c8 g     F .text	0000012c in_timerset
08056530 g     O .bss	00000004 OSTCBFreeList
08016ad8 g     F .text	00000174 OSSemPendAbort
080370c4 g     F .text	00000f98 tcp_output
08056650 g     O .bss	00000004 activehost
0805647c g     O .rwdata	00000008 alt_dev_list
08028484 g     F .text	000001f8 parse_args
08056604 g     O .bss	00000004 global_TCPwakeup_setIndx
0802508c g     F .text	00000068 write
0802cf90 g     F .text	00000040 npfree
0800a8b0 g     F .text	000000cc _putc_r
08019a88 g     F .text	0000004c alt_avalon_i2c_check_arblost
0803d350 g     F .text	000002c0 arpReply
08027c60 g     F .text	0000007c nextarg
080563f4 g     O .rwdata	00000002 OSVersionNbr
08040b54 g     F .text	00000500 ip_reasm_process_subsequent_fragments
08003a04 g     F .text	00000018 strerror_l
080564c4 g     O .rwdata	00000004 pton_error
080565a8 g     O .bss	00000004 dsc_errors
0801a84c g     F .text	0000003c alt_avalon_i2c_int_clear
080571e8 g     O .bss	00002000 SSSInitialTaskStk
0805e854 g     O .bss	00000014 rcvdq
080341e0 g     F .text	00000080 tcp_notify
080109b4 g     F .text	000000b0 fstat
08002cf8 g     F .text	00000024 fprintf
08030f2c g     F .text	000000b8 soconnect
08042fc8 g     F .text	00000048 ip_raw_maxalloc
08010ba0 g     F .text	0000012c kill
0800f638 g     F .text	000000f0 .hidden __ledf2
0802070c g     F .text	00000078 DP83848C_link_status_read
08029788 g     F .text	00000448 dhc_discover
08056410 g     O .rwdata	00000008 alt_avalon_i2c_list
08002a00 g     F .text	00000084 SSSCreateOSDataStructs
08047018 g     F .text	00000084 in_setpeeraddr
0805639c g     O .rwdata	00000004 OSEndiannessTest
0802c508 g     F .text	00000038 clock_init
08047a90 g     F .text	000000d0 vfgets
0803ca14 g     F .text	00000180 et_send
08009ee4 g     F .text	00000118 __pow5mult
0800b2e8 g     F .text	00001304 ___vfiprintf_internal_r
0800e294 g     F .text	0000005c .hidden __umodsi3
0804644c g     F .text	00000064 inet_addr
08040134 g     F .text	00000084 ip_reasm_check_mem_useage
08031dcc g     F .text	000000fc sorflush
0804ca10 g     F .text	0000001c vprintf
0805ee18 g     O .bss	000000fc global_tcb_ext
0803efc4 g     F .text	00000400 ip_fragment_lc
0805e868 g     O .bss	00000300 netstatic
0802f22c g     F .text	00000160 t_bind
080563ae g     O .rwdata	00000002 OSFlagGrpSize
0802c190 g     F .text	000000d8 udp_close
08022614 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
0802cb0c g     F .text	000001c0 alt_iniche_init
0805f560 g       *ABS*	00000000 end
0802c720 g     F .text	00000084 UNLOCK_NET_RESOURCE
0802fed0 g     F .text	000000dc t_recv
08023644 g     F .text	0000022c prep_tse_mac
08047e10 g     F .text	00000188 vfread
080256f4 g     F .text	000000e4 netclose
08002b00 g     F .text	000001d0 SSSSimpleSocketServerTask
0804a0ec g     F .text	0000000c _atoi_r
0801bcc4 g     F .text	000001b4 alt_tse_phy_add_profile
08056468 g     O .rwdata	00000004 tcp_keepintvl
0801ac64 g     F .text	00000150 altera_avalon_jtag_uart_init
08012e48 g     F .text	000000d0 OS_TaskStat
080565ac g     O .bss	00000004 dsc_discovers
080002c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0801922c g     F .text	00000040 alt_avalon_i2c_open
08055fe0 g     O .rwdata	00000018 tcp_protosw
0804df00 g       *ABS*	00000000 __CTOR_LIST__
080566c4 g     O .bss	00000004 vfopen_error
10000000 g       *ABS*	00000000 __alt_stack_pointer
08019c08 g     F .text	000000e8 alt_avalon_i2c_master_tx
08056638 g     O .bss	00000004 tcp_maxidle
080565d8 g     O .bss	00000004 firstudp
0801b8dc g     F .text	00000084 alt_avalon_timer_sc_init
080108ec g     F .text	00000054 .hidden __clzsi2
0801b590 g     F .text	000002d0 altera_avalon_jtag_uart_write
080080e4 g     F .text	00000004 __sfp_lock_acquire
08009614 g     F .text	000000d4 memchr
08012b24 g     F .text	00000058 OS_MemClr
08003e00 g     F .text	000020dc ___vfprintf_internal_r
0803be94 g     F .text	0000014c OSTaskStkInit
0804a2f8 g     F .text	00000054 _sprintf_r
08008238 g     F .text	000002fc _free_r
08044a60 g     F .text	00000148 igmpv2_chk4_rtr_alert_opt
0803b4d0 g     F .text	0000022c alt_printf
0804f0ec g     O .rodata	00000180 _ctype_b
0800ce38 g     F .text	0000000c __locale_mb_cur_max
080305b8 g     F .text	000000c0 t_socketclose
080121b4 g     F .text	00000188 OS_EventTaskRdy
0804cb38 g     F .text	00000120 __call_exitprocs
0800afc0 g     F .text	00000074 __srget_r
08056534 g     O .bss	00000001 OSCPUUsage
0805eb68 g     O .bss	00000010 nets
0802c664 g     F .text	000000bc LOCK_NET_RESOURCE
0802a81c g     F .text	000000b4 dhc_resetip
08018fbc g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
080247dc g     F .text	00000060 tse_msgdmaTx_isr
08024c2c g     F .text	0000014c tse_mac_rcv
0802f1ac g     F .text	00000080 t_socket
08056384 g     O .rwdata	00000004 __malloc_sbrk_base
08000338 g     F .text	00000048 _start
0803c9cc g     F .text	00000048 etainit
08056648 g     O .bss	00000004 _alt_tick_rate
0803c478 g     F .text	00000024 mcastlist
080159c8 g     F .text	00000298 OSQPend
0805ed14 g     O .bss	000000f0 pktlog
0804465c g     F .text	00000114 igmpv2_process_report
080343b8 g     F .text	00000074 ifd_isset
080209c4 g     F .text	0000008c alt_qspi_controller_get_info
08043508 g     F .text	00000114 del_route
08003df8 g     F .text	00000008 _user_strerror
080186cc g     F .text	00000108 OSTimeDly
0801a5c4 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0801a9ec g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
080025e0 g     F .text	00000054 get_mac_addr
0803099c g     F .text	000000d0 solisten
08009ffc g     F .text	00000188 __lshift
0805664c g     O .bss	00000004 _alt_nticks
080220b4 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
0801d8d8 g     F .text	000000d0 alt_tse_phy_rd_mdio_reg
0800d5d0 g     F .text	00000018 signal
0802501c g     F .text	00000070 read
08018c48 g     F .text	00000264 alt_sys_init
0804cc58 g     F .text	000001c0 __ssprint_r
080389f8 g     F .text	0000004c tcp_quench
080281f8 g     F .text	00000170 ns_printf
0803de20 g     F .text	000000d4 isbcast
0802c7a4 g     F .text	00000240 TK_NEWTASK
08000c70 g     F .text	00000144 ProvChanMessage
0804caa8 g     F .text	00000090 __register_exitproc
08056535 g     O .bss	00000001 OSTaskCtr
08056b18 g     O .bss	000005dd buffer
08040064 g     F .text	000000d0 ip_reasm_determine_type_of_frag
08056564 g     O .bss	00000001 phy_profile_count
0804a598 g     F .text	000000c4 strncmp
0801c974 g     F .text	0000006c alt_tse_get_mac_group_index
08019e2c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
080187d4 g     F .text	00000160 OSTimeDlyHMSM
08042bfc g     F .text	000000bc ip_raw_close
08009cb4 g     F .text	00000230 __multiply
08056234 g     O .rwdata	000000b0 mdlist
0801b16c g     F .text	00000068 altera_avalon_jtag_uart_close
08026238 g     F .text	000000d0 igmp_input
0803ef08 g     F .text	000000bc ip_raw_write
08047f98 g     F .text	000003ac vfwrite_locked
0804a65c g     F .text	000000b8 strncpy
080565b0 g     O .bss	00000004 dsc_offers
08056a7c g     O .bss	00000028 __malloc_current_mallinfo
080563a2 g     O .rwdata	00000002 OSEventMax
08046734 g     F .text	0000006c inet_setport
0800a568 g     F .text	00000164 __d2b
08016c4c g     F .text	0000011c OSSemPost
08036a94 g     F .text	00000188 tcp_dooptions
080564e0 g     O .bss	00000004 SSSLEDEventFlag
080329f4 g     F .text	00000104 soisconnected
08011d3c g     F .text	000000e4 OSSchedUnlock
08042ad0 g     F .text	00000028 netexit
08002690 g     F .text	00000194 get_serial_number
08056594 g     O .bss	00000004 nettick_wakes
0801d754 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
0805662c g     O .bss	00000001 tcpprintfs
0803c7f4 g     F .text	00000098 in_timerkill
0804454c g     F .text	00000110 igmpv2_input
080565c0 g     O .bss	00000004 dsc_declines
0801ab00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08003dbc g     F .text	00000004 _strtoul_r
08027c34 g     F .text	0000002c do_trap
08048e6c g     F .text	000000d8 alt_get_fd
08027670 g     F .text	000000f0 bsd_ioctl
08056538 g     O .bss	00000004 OSMemFreeList
08011e88 g     F .text	000000b8 OSStatInit
0802dbe0 g     F .text	000001b4 tcp_rcv
08027fe0 g     F .text	00000048 panic
080566cc g     O .bss	00000004 vfs_open_files
08025c0c g     F .text	0000018c ip2mac
0803a8c4 g     F .text	00000158 alt_busy_sleep
0801476c g     F .text	000000c8 OSFlagQuery
08033f28 g     F .text	000001f0 sock_select
08045aa0 g     F .text	00000218 dhc_setup
08038224 g     F .text	00000048 tcp_init
08056608 g     O .bss	00000004 cticks
080007a0 g     F .text	00000174 ProcessRxPacket
0805659d g     O .bss	00000001 to_nettick
080563d8 g     O .rwdata	00000002 OSTaskCreateExtEn
0800c828 g     F .text	00000058 _close_r
080250f4 g     F .text	000004d0 Netinit
0802cd38 g     F .text	00000038 prep_armintcp
08042794 g     F .text	0000014c in_addmulti
08000e3c g     F .text	00000228 ProvisioningLEDCommand
0803826c g     F .text	00000108 tcp_template
0801fbf0 g     F .text	0000031c alt_tse_phy_get_common_speed
0802da00 g     F .text	00000070 remque
08003ab4 g     F .text	00000014 strtok
0804ca2c g     F .text	00000014 _vprintf_r
0803448c g     F .text	000003f0 tcp_reass
080468d4 g     F .text	00000194 tcp_cksum
0803a2f4 g     F .text	00000374 udp4_socksend
08022564 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
0804784c g     F .text	000001b8 vfclose_locked
08034344 g     F .text	00000074 ifd_set
080196a0 g     F .text	000000ac alt_avalon_i2c_rx_read_available
08002e2c g     F .text	00000078 memcmp
08012194 g     F .text	00000020 OS_Dummy
0801abc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802b4a4 g     F .text	00000094 dhc_set_state
08056574 g     O .bss	00000004 NDEBUG
0805f560 g       *ABS*	00000000 __alt_stack_base
080564d8 g     O .bss	00000004 last_flash_sector
0801ac10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0803326c g     F .text	00000050 sbreserve
08056565 g     O .bss	00000001 mac_group_count
08042cb8 g     F .text	00000214 ip_raw_input
08002d1c g     F .text	000000c4 _fwrite_r
08056448 g     O .rwdata	00000004 lilbufsiz
0803442c g     F .text	00000060 ifd_get
08033158 g     F .text	0000008c sbwakeup
0802266c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
08001768 g     F .text	00000088 FindItfcIndex
0800601c g     F .text	0000015c __swsetup_r
080234fc g     F .text	00000148 altera_eth_tse_init
0805ca00 g     O .bss	000001e0 OSQTbl
08036d48 g     F .text	0000023c tcp_xmit_timer
0800ec68 g     F .text	00000860 .hidden __divdf3
08007fc4 g     F .text	000000fc __sfp
08002878 g     F .text	00000130 generate_mac_addr
0803e0ec g     F .text	0000018c ip_bldhead
0800a7e4 g     F .text	0000006c __copybits
08033308 g     F .text	000000a0 sbappend
080546dc g     O .rwdata	00000408 __malloc_av_
080080f0 g     F .text	00000004 __sinit_lock_release
0805653c g     O .bss	00000004 OSTCBHighRdy
0800f728 g     F .text	00000670 .hidden __muldf3
0803eb94 g     F .text	00000374 ip_write2
0800b09c g     F .text	00000054 __sread
080564b0 g     O .rwdata	00000004 arp_ageout
08056540 g     O .bss	00000004 OSQFreeList
0801e4e8 g     F .text	000003fc alt_tse_mac_get_phy
0803e014 g     F .text	000000d8 ip_init
08048d64 g     F .text	00000108 alt_find_file
08042f84 g     F .text	00000044 ip_raw_free
080208b4 g     F .text	00000110 alt_qspi_controller_lock
0803d254 g     F .text	000000fc make_arp_entry
0803ac08 g     F .text	000000a8 alt_dev_llist_insert
08011074 g     F .text	00000128 __malloc_lock
08002cd0 g     F .text	00000028 _fprintf_r
08010e9c g     F .text	000000b8 sbrk
0804a974 g     F .text	0000209c ___svfprintf_internal_r
08039bf0 g     F .text	0000005c udp_lookup
08019ad4 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
08019a3c g     F .text	0000004c alt_avalon_i2c_check_nack
08011394 g     F .text	00000148 OSEventNameSet
08007cec g     F .text	00000060 _fflush_r
0801cc08 g     F .text	0000008c alt_tse_mac_set_duplex
0800c8f8 g     F .text	000000b4 _calloc_r
0802ce7c g     F .text	000000e0 npfree_base
08056544 g     O .bss	00000001 OSRdyGrp
08045dfc g     F .text	00000028 md_fopen
08055ff8 g     O .rwdata	00000018 udp_protosw
0805648c g     O .rwdata	00000008 alt_flash_dev_list
08024350 g     F .text	00000120 tse_msgdma_write_init
08046f94 g     F .text	00000084 in_setsockaddr
080564cc g       *ABS*	00000000 __bss_start
080333a8 g     F .text	000000d8 sbappendrecord
0805f480 g     O .bss	00000050 ip_mib
08002fa4 g     F .text	000000f0 memset
080231b8 g     F .text	00000058 alt_msgdma_open
08030fe4 g     F .text	00000098 sodisconnect
08002418 g     F .text	00000080 main
08019a08 g     F .text	00000034 alt_avalon_i2c_master_target_set
08056500 g     O .bss	00000004 alt_envp
080564e8 g     O .bss	00000004 __malloc_max_total_mem
0802294c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
0802d754 g     F .text	000001c0 m_adj
0801ab60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800c810 g     F .text	00000018 __swbuf
08046068 g     F .text	000000c4 md_fgetc
0801a808 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0804fd18 g     O .rodata	00000100 OSUnMapTbl
0803fa04 g     F .text	000002a4 ip_dump
08028b80 g     F .text	000001f8 tk_stats
08056424 g     O .rwdata	00000008 alt_iniche_dev_list
080591e8 g     O .bss	00000078 SSSLEDCommandQTbl
080563d2 g     O .rwdata	00000002 OSSemEn
080565f0 g     O .bss	00000004 OS_TPS
0802ea24 g     F .text	00000738 rawip_usrreq
080143c0 g     F .text	000003ac OSFlagPost
0800b1d4 g     F .text	00000008 __sclose
08046614 g     F .text	0000005c print46_addr
10000000 g       *ABS*	00000000 __alt_heap_limit
0800caa4 g     F .text	00000010 fclose
0801233c g     F .text	00000108 OS_EventTaskWait
0804a938 g     F .text	00000004 _strtol_r
08002e1c g     F .text	00000010 getchar
08027ea0 g     F .text	00000140 print_uptime
08012f18 g     F .text	000000c4 OS_TaskStatStkChk
08017b04 g     F .text	00000158 OSTaskDelReq
08006374 g     F .text	00001750 _dtoa_r
08022d40 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
08008e34 g     F .text	000007e0 _malloc_r
0804612c g     F .text	00000024 md_unlink
0801bb98 g     F .text	00000088 tse_mac_SwReset
0800d318 g     F .text	00000030 __ascii_wctomb
08046af0 g     F .text	00000058 in_pcbdetach
08056488 g     O .rwdata	00000004 alt_errno
080564c0 g     O .rwdata	00000004 mdlist_size
080227a4 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
08011e20 g     F .text	00000068 OSStart
0800cab4 g     F .text	00000020 _fiprintf_r
08045400 g     F .text	00000034 u_mctest_init
0800d5e8 g     F .text	0000001c _init_signal
08011014 g     F .text	00000060 __env_unlock
08001064 g     F .text	000003f4 ProvisioningModuleRegisterCommand
080089f0 g     F .text	00000098 _fwalk
08017fb4 g     F .text	000001e0 OSTaskResume
080151d0 g     F .text	000000ec OSMemQuery
080467a0 g     F .text	00000134 convert_ip
0803d0e8 g     F .text	0000016c find_oldest_arp
080563e4 g     O .rwdata	00000002 OSTaskStatEn
08056670 g     O .bss	00000004 arpReqsIn
08047474 g     F .text	00000050 vf_free_buffer
0800cec0 g     F .text	0000000c _mbtowc_r
08048c40 g     F .text	00000124 alt_fcntl
080563be g     O .rwdata	00000002 OSMemMax
08015f48 g     F .text	0000017c OSQPostFront
0802c3fc g     F .text	00000034 dtrap
08056454 g     O .rwdata	00000004 kb_last
0800a97c g     F .text	000000e0 putc
0800e13c g     F .text	00000080 .hidden __divsi3
0801c8c0 g     F .text	00000048 alt_tse_mac_set_common_speed
08056545 g     O .bss	00000003 OSRdyTbl
08056398 g     O .rwdata	00000002 OSDebugEn
0802cd70 g     F .text	0000010c npalloc_base
08026064 g     F .text	000000b4 ip_exit
0800811c g     F .text	0000011c _malloc_trim_r
0804df00 g       *ABS*	00000000 __CTOR_END__
080563b0 g     O .rwdata	00000002 OSFlagNodeSize
080565a4 g     O .bss	00000004 dhc_conn
0802c560 g     F .text	0000005c cticks_hook
080563f8 g     O .rwdata	00000002 OSTmrCfgMax
0803c3f0 g     F .text	00000038 sysuptime
0800d15c g     F .text	000000b8 strcmp
08002824 g     F .text	00000054 generate_and_store_mac_addr
080414b0 g     F .text	000001a8 ip_reasm_delete_ire
080154cc g     F .text	000001b0 OSQCreate
0802c5bc g     F .text	00000060 irq_Mask
08017c5c g     F .text	0000019c OSTaskNameGet
08056658 g     O .bss	00000004 nextppp
080565e0 g     O .bss	00000004 irq_level
080255c4 g     F .text	00000130 fixup_subnet_mask
080160c4 g     F .text	00000218 OSQPostOpt
08011f40 g     F .text	00000234 OSTimeTick
0803fe74 g     F .text	0000012c ip_copypkt
0802b3c4 g     F .text	00000080 dhc_alldone
080563e0 g     O .rwdata	00000002 OSTaskMax
0804df00 g       *ABS*	00000000 __DTOR_LIST__
08016598 g     F .text	000000dc OSSemCreate
08056588 g     O .bss	00000004 igmp_all_hosts_group
08056404 g     O .rwdata	00000002 OSTmrWheelSize
080330b0 g     F .text	0000003c sbselqueue
08056590 g     O .bss	00000004 netmain_wakes
0803d610 g     F .text	00000264 arprcv
08003dc0 g     F .text	0000001c strtoul_l
0802884c g     F .text	00000074 TK_OSTaskResume
08026c78 g     F .text	000003b4 igmp_print_stats
0800f4c8 g     F .text	00000080 .hidden __nedf2
0802d044 g     F .text	00000090 pffindtype
080563da g     O .rwdata	00000002 OSTaskDelEn
0805646c g     O .rwdata	00000004 tcp_sendspace
08048508 g     F .text	0000010c vftell
0805ebdc g     O .bss	00000012 eth_prt_buf
08016d68 g     F .text	00000114 OSSemQuery
0801567c g     F .text	00000290 OSQDel
08015c60 g     F .text	00000174 OSQPendAbort
08018c0c g     F .text	0000003c alt_irq_init
0801c880 g     F .text	00000040 alt_tse_mac_get_common_speed
0805f044 g     O .bss	00000018 app_semaphore
0803b864 g     F .text	00000058 alt_release_fd
08023484 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
0802ca98 g     F .text	00000074 post_app_sem
08026198 g     F .text	000000a0 igmp_init
0804a12c g     F .text	00000018 memalign
0804a34c g     F .text	00000064 sprintf
0804fc08 g     O .rodata	00000100 .hidden __clz_tab
0800049c g     F .text	000000b0 delChan
080565cc g     O .bss	00000004 dsc_renew
08000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif_0
08045fa0 g     F .text	00000078 md_fwrite
080564f4 g     O .bss	00000004 _PathLocale
080565f4 g     O .bss	00000004 tcp_sleep_count
0802da70 g     F .text	0000007c insque
0804a0cc g     F .text	00000014 atexit
080566c0 g     O .bss	00000004 vfsfiles
08005fb8 g     F .text	00000064 _write_r
0804ca40 g     F .text	0000004c _vsprintf_r
08043d88 g     F .text	00000294 udp_send
08011cac g     F .text	00000090 OSSchedLock
08026478 g     F .text	00000278 igmp_send
0800ce44 g     F .text	00000018 setlocale
0802270c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
08013770 g     F .text	00000110 OSFlagCreate
08059260 g     O .bss	00002000 LEDManagementTaskStk
0802c61c g     F .text	00000048 irq_Unmask
0802f38c g     F .text	000000d4 t_listen
080207e0 g     F .text	000000a0 PEF7071_link_status_read
08056380 g     O .rwdata	00000004 _impure_ptr
08054170 g     O .rwdata	00000018 ssstask
080564f8 g     O .bss	00000004 alt_argc
0803924c g     F .text	000006b8 tcp_usrreq
08039dec g     F .text	00000238 udp_usrreq
0802cfd0 g     F .text	00000034 ncpalloc
08007ac4 g     F .text	00000228 __sflush_r
0803ad14 g     F .text	00000064 _do_dtors
080563aa g     O .rwdata	00000002 OSEventMultiEn
080564a8 g     O .rwdata	00000004 pingdelay
080199d0 g     F .text	00000038 alt_avalon_i2c_master_target_get
0803cc1c g     F .text	00000078 arp_send_pending
080198e0 g     F .text	000000f0 alt_avalon_i2c_send_address
080442e4 g     F .text	00000268 igmpv1_input
0800cf90 g     F .text	000001cc __srefill_r
0802cccc g     F .text	0000004c pre_task_setup
08056614 g     O .bss	00000004 rcvdq_sem_ptr
0802726c g     F .text	00000120 bsd_getsockname
08041658 g     F .text	00000124 ip_reasm_mark_compact_rfq
080029d4 g     F .text	0000002c FindLastFlashSectorOffset
08013880 g     F .text	00000258 OSFlagDel
08056548 g     O .bss	00000004 OSEventFreeList
08028ea4 g     F .text	00000040 dhc_set_callback
08000120 g       .exceptions	00000000 alt_irq_entry
08056668 g     O .bss	00000004 arpcache
08049ab8 g     F .text	000002d4 icmp_destun
0800cecc g     F .text	00000044 __ascii_mbtowc
080429ec g     F .text	00000064 lookup_mcast
08048878 g     F .text	00000048 vfslookup
080423e8 g     F .text	000003ac ip_demux
0800a408 g     F .text	0000005c __ulp
080565f8 g     O .bss	00000004 tcp_wakeup_count
08013d5c g     F .text	00000600 OSFlagPend
080563f6 g     O .rwdata	00000002 OSTmrEn
08008108 g     F .text	00000014 __fp_unlock_all
0802c9e4 g     F .text	000000b4 wait_app_sem
0800054c g     F .text	00000078 findfdChan
0805642c g     O .rwdata	00000004 ipmcfail_str
0805660c g     O .bss	00000004 memtrapsize
0802d47c g     F .text	000002d8 m_copy
08056474 g     O .rwdata	00000008 alt_fs_list
0805f0c0 g     O .bss	00000014 mfreeq
08020a50 g     F .text	00000124 alt_qspi_controller_erase_block
08012d20 g     F .text	00000074 OS_StrCopy
08030940 g     F .text	0000005c sobind
0805640c g     O .rwdata	00000004 eth_tse_name
08045dac g     F .text	00000050 init_memdev
080564d0 g     O .bss	00000001 to_ssstask
0802daec g     F .text	000000f4 nptcp_init
080563c0 g     O .rwdata	00000002 OSMemNameSize
0805ef14 g     O .bss	000000f0 global_TCPwakeup_set
0803c0b4 g     F .text	00000020 OSInitHookEnd
08032b90 g     F .text	000000c4 soisdisconnected
0803cb94 g     F .text	00000088 arp_free_pending
080563ec g     O .rwdata	00000002 OSTCBPrioTblMax
08008c50 g     F .text	0000000c localeconv
08030b7c g     F .text	000002c8 soclose
08000380 g     F .text	00000074 initChan
0805ee04 g     O .bss	00000014 bigfreeq
08008c5c g     F .text	00000098 __swhatbuf_r
080563e8 g     O .rwdata	00000002 OSTaskStatStkChkEn
080564a4 g     O .rwdata	00000004 prompt
0801aa9c g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08056464 g     O .rwdata	00000004 tcp_keepidle
0801fa48 g     F .text	000001a8 alt_tse_phy_set_adv_10
0802e860 g     F .text	000001c4 rawip_soinput
0803aec4 g     F .text	00000050 alt_ic_isr_register
08019304 g     F .text	0000004c alt_avalon_i2c_disable
08048344 g     F .text	00000060 vfwrite
080563bc g     O .rwdata	00000002 OSMemEn
08032e4c g     F .text	000000ac soqinsque
0805669c g     O .bss	00000004 so_evtmap_delete
08002de0 g     F .text	00000034 fwrite
080563c6 g     O .rwdata	00000002 OSMutexEn
08056688 g     O .bss	00000004 h_ireq
080564cc g       *ABS*	00000000 _edata
0803f3c4 g     F .text	0000059c ip_fragment
08024edc g     F .text	00000140 iniche_devices_init
0805f0d4 g     O .bss	00000028 tcp_saveti
080283ac g     F .text	000000d8 con_page
0805f560 g       *ABS*	00000000 _end
080323f0 g     F .text	00000548 sogetopt
0803ae08 g     F .text	00000068 alt_flash_open_dev
0805654c g     O .bss	00000001 OSIntNesting
08002e14 g     F .text	00000008 _getchar_r
0801e8e4 g     F .text	00000240 alt_tse_mac_associate_phy
08055fb0 g     O .rwdata	00000030 nettasks
0802bc44 g     F .text	00000020 pk_get_max_intrsafe_buf_len
0800cb0c g     F .text	00000164 __fputwc
0803fca8 g     F .text	000001cc iproute
0802e354 g     F .text	000000f0 np_stripoptions
080566a0 g     O .bss	00000001 so_evtmap
0801b1d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08018934 g     F .text	000001e0 OSTimeDlyResume
08002a84 g     F .text	0000007c SSSCreateTasks
08043164 g     F .text	000003a4 add_route
08013c08 g     F .text	00000154 OSFlagNameSet
08025b7c g     F .text	00000090 c_older
0803383c g     F .text	00000084 sbflush
08045e24 g     F .text	00000024 md_fclose
08028b50 g     F .text	00000030 tk_yield
08019350 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08018194 g     F .text	000001b8 OSTaskStkChk
0803af9c g     F .text	0000008c alt_ic_irq_disable
0803107c g     F .text	00000560 sosend
080563c2 g     O .rwdata	00000002 OSMemSize
0803f960 g     F .text	000000a4 ip_mymach
0800b0f8 g     F .text	00000080 __swrite
080565dc g     O .bss	00000004 cticks_initialized
080564ac g     O .rwdata	00000004 deflength
08056388 g     O .rwdata	00000004 __malloc_trim_threshold
080300e8 g     F .text	000001fc t_sendto
08003094 g     F .text	00000188 _perror_r
08056550 g     O .bss	00000004 OSTCBCur
08030798 g     F .text	000001a8 socreate
0804a0f8 g     F .text	00000034 exit
0805f36c g     O .bss	00000100 arp_table
0800cad4 g     F .text	00000038 fiprintf
0800d214 g     F .text	00000004 _vfiprintf_r
080566dc g     O .bss	00000004 icmpdu_hook
080563c4 g     O .rwdata	00000002 OSMemTblSize
08008a88 g     F .text	000000a8 _fwalk_reent
08022ae4 g     F .text	00000110 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
0803c88c g     F .text	00000024 create_apptasks
08056460 g     O .rwdata	00000004 tcp_ttl
0800a1dc g     F .text	0000022c __mdiff
0803ae70 g     F .text	00000054 alt_flash_close_dev
0802d004 g     F .text	00000040 ncpfree
0800e1bc g     F .text	00000074 .hidden __modsi3
0804a144 g     F .text	00000194 _memalign_r
0805656c g     O .bss	00000004 MaxLnh
0801bc74 g     F .text	00000050 tse_mac_setGMIImode
08046590 g     F .text	00000084 inet_ntop
0804427c g     F .text	00000024 udp_maxalloc
08020454 g     F .text	000000e4 marvell_cfg_gmii
10000000 g       *ABS*	00000000 __alt_data_end
08000120 g     F .exceptions	00000000 alt_exception
080080e8 g     F .text	00000004 __sfp_lock_release
08011b14 g     F .text	00000058 OSInit
08022284 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
0801eb24 g     F .text	00000128 alt_tse_phy_cfg_pcs
08018534 g     F .text	00000128 OSTaskQuery
0803c204 g     F .text	0000008c icmp_port_du
0805663c g     O .bss	00000004 tcp_iss
0801643c g     F .text	000000a8 OS_QInit
0804a0e0 g     F .text	0000000c atoi
08056450 g     O .rwdata	00000004 bigbufsiz
08012d94 g     F .text	00000054 OS_StrLen
08019560 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08038a44 g     F .text	00000078 tcp_putseq
08014fd4 g     F .text	0000011c OSMemNameSet
0804efe8 g     O .rodata	00000101 _ctype_
18002800 g       *ABS*	00000000 __alt_mem_onchip_ram
08033480 g     F .text	000001dc sbappendaddr
080566d0 g     O .bss	00000004 vfs_total_rw_space
080197f4 g     F .text	000000ec alt_avalon_i2c_cmd_write
080570f8 g     O .bss	000000f0 ItfcTable
080106cc g     F .text	00000054 .hidden __unorddf2
0804525c g     F .text	00000120 ip_getmoptions
08007d74 g     F .text	00000064 fileno
080563de g     O .rwdata	00000002 OSTaskProfileEn
08022164 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
0804401c g     F .text	000000f4 udpswap
08056554 g     O .bss	00000004 OSTime
08056618 g     O .bss	00000004 nextslow
08038b30 g     F .text	0000025c tcp_slowtimo
08038768 g     F .text	0000010c tcp_newtcpcb
0803d874 g     F .text	0000017c send_via_arp
08028e00 g     F .text	000000a4 dhc_init
08041054 g     F .text	00000058 ip_reasm_find_ire
0805cbe0 g     O .bss	00000800 OSTaskIdleStk
08048a8c g     F .text	00000058 isvfile_locked
08010940 g     F .text	00000038 _exit
080278d8 g     F .text	00000188 bsd_select
0803a790 g     F .text	00000134 alt_alarm_start
08013ad8 g     F .text	00000130 OSFlagNameGet
080442a0 g     F .text	00000044 udp_free
0802bd28 g     F .text	000000b8 getq
08048be0 g     F .text	00000024 prep_vfs
08018b14 g     F .text	00000060 OSTimeGet
080564a0 g     O .rwdata	00000004 name
08033a78 g     F .text	00000100 sbdropend
08008cf4 g     F .text	00000140 __smakebuf_r
0803d9f0 g     F .text	0000010c cb_arpent_tmo
0805641c g     O .rwdata	00000008 alt_msgdma_list
08003a1c g     F .text	00000098 strlen
08044ba8 g     F .text	00000114 IPADDR_TO_NETP
08027760 g     F .text	00000034 bsd_inet_ntoa
0800d3ac g     F .text	00000014 _init_signal_r
0803c028 g     F .text	00000020 OSTaskSwHook
0803b37c g     F .text	00000154 open
0802bf90 g     F .text	00000200 udp_open
0805d3e0 g     O .bss	00000b40 OSEventTbl
08033000 g     F .text	00000058 socantsendmore
080566d4 g     O .bss	00000004 vfs_total_dyna_files
0800f548 g     F .text	000000f0 .hidden __gedf2
0803ba9c g     F .text	00000044 alt_uncached_free
0803b6fc g     F .text	00000030 alt_putchar
0805df20 g     O .bss	00000510 OSTCBTbl
08056674 g     O .bss	00000004 arpReqsOut
08016e7c g     F .text	00000100 OSSemSet
080564c8 g     O .rwdata	00000004 http_root_path
0802aa7c g     F .text	00000254 dhc_extract_opts
08040600 g     F .text	00000554 ip_reasm_compute_overlap
0800c8e4 g     F .text	00000014 __assert
08020d84 g     F .text	000001e8 alt_qspi_controller_write
0800b2d0 g     F .text	00000018 __sprint_r
0801bab8 g     F .text	00000070 tse_mac_aRxRead
0804a3b0 g     F .text	0000015c strchr
0805ebee g     O .bss	00000012 ipreturn
08056690 g     O .bss	00000004 port_prep
08056034 g     O .rwdata	0000000d tcp_backoff
08032984 g     F .text	00000070 soisconnecting
080023a8 g     F .text	00000070 SSSInitialTask
08024af4 g     F .text	00000138 allocate_rx_descriptor_chain
08056494 g     O .rwdata	00000004 alt_priority_mask
08044770 g     F .text	000001c0 igmpv2_process_query
08033c08 g     F .text	000001d0 t_select
08016674 g     F .text	00000250 OSSemDel
0803a668 g     F .text	00000128 udp4_sockaddr
08056558 g     O .bss	00000004 OSFlagFreeList
08046d58 g     F .text	000001e0 in_pcbconnect
08056630 g     O .bss	00000004 dropline
0805668c g     O .bss	00000004 ire_cticks
0803af14 g     F .text	00000088 alt_ic_irq_enable
080563a4 g     O .rwdata	00000002 OSEventNameSize
08005edc g     F .text	0000001c __vfprintf_internal
0802875c g     F .text	00000078 tk_netmain
08046f38 g     F .text	0000005c in_pcbdisconnect
0805655c g     O .bss	00000001 OSStatRdy
0805e430 g     O .bss	00000054 OSTCBPrioTbl
0800d30c g     F .text	0000000c _wctomb_r
08010f54 g     F .text	000000c0 __env_lock
080563ea g     O .rwdata	00000002 OSTaskSwHookEn
08056210 g     O .rwdata	00000024 mdio
0801cb28 g     F .text	000000e0 alt_tse_mac_set_speed
0802702c g     F .text	00000120 bsd_accept
08000914 g     F .text	0000035c DiscChanMessage
08056470 g     O .rwdata	00000004 tcp_recvspace
0800fd98 g     F .text	00000934 .hidden __subdf3
0804defc g     F .text	00000004 _vfprintf_r
08039bb0 g     F .text	00000040 tcpinit
0805658c g     O .bss	00000004 igmp_all_rtrs_group
0802e804 g     F .text	0000005c rawip_lookup
0803c92c g     F .text	000000a0 fcntl
08009bb0 g     F .text	000000b0 __lo0bits
0803365c g     F .text	000001e0 sbcompress
08056498 g     O .rwdata	00000008 alt_alarm_list
08038874 g     F .text	0000009c tcp_drop
080563b2 g     O .rwdata	00000002 OSFlagWidth
0803acb0 g     F .text	00000064 _do_ctors
0800d604 g     F .text	00000010 __sigtramp
0801f7f4 g     F .text	00000254 alt_tse_phy_set_adv_100
08038dec g     F .text	00000460 tcp_timers
08026118 g     F .text	00000080 if_netnumber
0804537c g     F .text	00000084 ip_freemoptions
08032938 g     F .text	0000004c sohasoutofband
0800d284 g     F .text	00000088 wcrtomb
0803487c g     F .text	00002218 tcp_input
0802714c g     F .text	00000120 bsd_getpeername
08027794 g     F .text	00000144 bsd_recvfrom
08024e94 g     F .text	00000048 close
080565bc g     O .bss	00000004 dsc_bpreplys
08056508 g     O .bss	00000004 alt_envsem
08056560 g     O .bss	00000004 OSIdleCtrRun
08054ae4 g     O .rwdata	0000016c __global_locale
0801aa50 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08012174 g     F .text	00000020 OSVersion
080563fc g     O .rwdata	00000002 OSTmrCfgWheelSize
0801865c g     F .text	00000070 OS_TaskStkClr
080472f0 g     F .text	0000002c set_vfopen_error
08019cf0 g     F .text	0000013c alt_avalon_i2c_master_rx
080563d6 g     O .rwdata	00000002 OSTaskCreateEn
0802483c g     F .text	000002b8 tse_msgdma_read_init
0801c908 g     F .text	0000006c alt_tse_get_system_index
08056010 g     O .rwdata	00000018 rawip_protosw
080330ec g     F .text	0000006c sbwait
08012738 g     F .text	0000006c OS_EventWaitListInit
0802acd0 g     F .text	000004c0 dhc_second
0805665c g     O .bss	00000004 port_1s_callout
0800cc94 g     F .text	00000078 fputwc
0800d5c0 g     F .text	00000010 raise
0803c0d4 g     F .text	00000020 OSTaskIdleHook
0804a2e8 g     F .text	00000010 free
080080ec g     F .text	00000004 __sinit_lock_acquire
08056568 g     O .bss	00000001 number_of_tse_mac
080098dc g     F .text	00000138 __multadd
0801834c g     F .text	000001e8 OSTaskSuspend
080098b8 g     F .text	00000024 _Bfree
0801b960 g     F .text	00000030 no_printf
08032c54 g     F .text	000001f8 sonewconn
08048fdc g     F .text	00000adc icmprcv
0802d0d4 g     F .text	000000d4 pffindproto
08012de8 g     F .text	00000060 OS_TaskIdle
08056402 g     O .rwdata	00000002 OSTmrTblSize
080162dc g     F .text	00000160 OSQQuery



Disassembly of section .exceptions:

08000120 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000120:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000124:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000128:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800012c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000130:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000134:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000138:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800013c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000140:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000144:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000148:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800014c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000150:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000154:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000158:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800015c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000160:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000164:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000168:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800016c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000170:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000174:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000178:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800017c:	10000326 	beq	r2,zero,800018c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000180:	20000226 	beq	r4,zero,800018c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000184:	80001fc0 	call	80001fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000188:	00000706 	br	80001a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800018c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000190:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000194:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000198:	80002c40 	call	80002c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800019c:	1000021e 	bne	r2,zero,80001a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80001a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80001a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80001a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80001ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80001b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80001b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80001b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80001bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80001c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80001c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80001c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80001cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80001d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80001d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80001d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80001dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80001e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80001e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80001e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80001ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80001f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80001f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80001f8:	ef80083a 	eret

080001fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80001fc:	defff904 	addi	sp,sp,-28
 8000200:	dfc00615 	stw	ra,24(sp)
 8000204:	df000515 	stw	fp,20(sp)
 8000208:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800020c:	8011b6c0 	call	8011b6c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000210:	0005313a 	rdctl	r2,ipending
 8000214:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000218:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800021c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000220:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000224:	00800044 	movi	r2,1
 8000228:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800022c:	e0ffff17 	ldw	r3,-4(fp)
 8000230:	e0bffe17 	ldw	r2,-8(fp)
 8000234:	1884703a 	and	r2,r3,r2
 8000238:	10001126 	beq	r2,zero,8000280 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800023c:	e0bffd17 	ldw	r2,-12(fp)
 8000240:	100690fa 	slli	r3,r2,3
 8000244:	008201b4 	movhi	r2,2054
 8000248:	1885883a 	add	r2,r3,r2
 800024c:	10fc8217 	ldw	r3,-3576(r2)
 8000250:	e0bffd17 	ldw	r2,-12(fp)
 8000254:	100890fa 	slli	r4,r2,3
 8000258:	008201b4 	movhi	r2,2054
 800025c:	2085883a 	add	r2,r4,r2
 8000260:	10bc8317 	ldw	r2,-3572(r2)
 8000264:	1009883a 	mov	r4,r2
 8000268:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800026c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000270:	0005313a 	rdctl	r2,ipending
 8000274:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000278:	e0bffb17 	ldw	r2,-20(fp)
 800027c:	00000706 	br	800029c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000280:	e0bffe17 	ldw	r2,-8(fp)
 8000284:	1085883a 	add	r2,r2,r2
 8000288:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800028c:	e0bffd17 	ldw	r2,-12(fp)
 8000290:	10800044 	addi	r2,r2,1
 8000294:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000298:	003fe406 	br	800022c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800029c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80002a0:	e0bfff17 	ldw	r2,-4(fp)
 80002a4:	103fde1e 	bne	r2,zero,8000220 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80002a8:	8011bb80 	call	8011bb8 <OSIntExit>
}
 80002ac:	0001883a 	nop
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	dfc00117 	ldw	ra,4(sp)
 80002b8:	df000017 	ldw	fp,0(sp)
 80002bc:	dec00204 	addi	sp,sp,8
 80002c0:	f800283a 	ret

080002c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80002c4:	defffb04 	addi	sp,sp,-20
 80002c8:	dfc00415 	stw	ra,16(sp)
 80002cc:	df000315 	stw	fp,12(sp)
 80002d0:	df000304 	addi	fp,sp,12
 80002d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80002d8:	000531fa 	rdctl	r2,exception
 80002dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80002e0:	e0bfff17 	ldw	r2,-4(fp)
 80002e4:	1004d0ba 	srli	r2,r2,2
 80002e8:	108007cc 	andi	r2,r2,31
 80002ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80002f0:	0005333a 	rdctl	r2,badaddr
 80002f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80002f8:	d0a0d717 	ldw	r2,-31908(gp)
 80002fc:	10000726 	beq	r2,zero,800031c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8000300:	d0a0d717 	ldw	r2,-31908(gp)
 8000304:	e0ffff17 	ldw	r3,-4(fp)
 8000308:	e1bffe17 	ldw	r6,-8(fp)
 800030c:	e17ffd17 	ldw	r5,-12(fp)
 8000310:	1809883a 	mov	r4,r3
 8000314:	103ee83a 	callr	r2
 8000318:	00000206 	br	8000324 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 800031c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000320:	0005883a 	mov	r2,zero
}
 8000324:	e037883a 	mov	sp,fp
 8000328:	dfc00117 	ldw	ra,4(sp)
 800032c:	df000017 	ldw	fp,0(sp)
 8000330:	dec00204 	addi	sp,sp,8
 8000334:	f800283a 	ret

Disassembly of section .text:

08000338 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000338:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
 800033c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000340:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000344:	00bffd16 	blt	zero,r2,800033c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000348:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 800034c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000350:	06820174 	movhi	gp,2053
    ori gp, gp, %lo(_gp)
 8000354:	d6b8df14 	ori	gp,gp,58236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000358:	00820174 	movhi	r2,2053
    ori r2, r2, %lo(__bss_start)
 800035c:	10993314 	ori	r2,r2,25804

    movhi r3, %hi(__bss_end)
 8000360:	00c20174 	movhi	r3,2053
    ori r3, r3, %lo(__bss_end)
 8000364:	18fd5814 	ori	r3,r3,62816

    beq r2, r3, 1f
 8000368:	10c00326 	beq	r2,r3,8000378 <_start+0x40>

0:
    stw zero, (r2)
 800036c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000370:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000374:	10fffd36 	bltu	r2,r3,800036c <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000378:	8010ddc0 	call	8010ddc <alt_main>

0800037c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800037c:	003fff06 	br	800037c <alt_after_alt_main>

08000380 <initChan>:
 *
 * NOTE: fd = 0 could be stdin or stdout ?
 */

void initChan()
{
 8000380:	defffe04 	addi	sp,sp,-8
 8000384:	df000115 	stw	fp,4(sp)
 8000388:	df000104 	addi	fp,sp,4
	for (int i=0; i < MAXUDPCHAN; i++)
 800038c:	e03fff15 	stw	zero,-4(fp)
 8000390:	00000f06 	br	80003d0 <initChan+0x50>
	{
		Connections[i].fd = -1;
 8000394:	e0bfff17 	ldw	r2,-4(fp)
 8000398:	11000b24 	muli	r4,r2,44
 800039c:	00ffffc4 	movi	r3,-1
 80003a0:	00820174 	movhi	r2,2053
 80003a4:	2085883a 	add	r2,r4,r2
 80003a8:	10d9b815 	stw	r3,26336(r2)
		Connections[i].chantype = 'I';	// Inactive
 80003ac:	e0bfff17 	ldw	r2,-4(fp)
 80003b0:	11000b24 	muli	r4,r2,44
 80003b4:	00c01244 	movi	r3,73
 80003b8:	00820174 	movhi	r2,2053
 80003bc:	2085883a 	add	r2,r4,r2
 80003c0:	10d9b905 	stb	r3,26340(r2)
	for (int i=0; i < MAXUDPCHAN; i++)
 80003c4:	e0bfff17 	ldw	r2,-4(fp)
 80003c8:	10800044 	addi	r2,r2,1
 80003cc:	e0bfff15 	stw	r2,-4(fp)
 80003d0:	e0bfff17 	ldw	r2,-4(fp)
 80003d4:	10800550 	cmplti	r2,r2,21
 80003d8:	103fee1e 	bne	r2,zero,8000394 <initChan+0x14>
	}
};
 80003dc:	0001883a 	nop
 80003e0:	0001883a 	nop
 80003e4:	e037883a 	mov	sp,fp
 80003e8:	df000017 	ldw	fp,0(sp)
 80003ec:	dec00104 	addi	sp,sp,4
 80003f0:	f800283a 	ret

080003f4 <addChan>:

int addChan(struct UDPCHAN * Conn)
{
 80003f4:	defffc04 	addi	sp,sp,-16
 80003f8:	dfc00315 	stw	ra,12(sp)
 80003fc:	df000215 	stw	fp,8(sp)
 8000400:	df000204 	addi	fp,sp,8
 8000404:	e13ffe15 	stw	r4,-8(fp)
	if (Conn->fd < 0)
 8000408:	e0bffe17 	ldw	r2,-8(fp)
 800040c:	10800017 	ldw	r2,0(r2)
 8000410:	1000020e 	bge	r2,zero,800041c <addChan+0x28>
		return(-2);	// bad fd value to add.
 8000414:	00bfff84 	movi	r2,-2
 8000418:	00001b06 	br	8000488 <addChan+0x94>

	for (int i=0; i < MAXUDPCHAN; i++)
 800041c:	e03fff15 	stw	zero,-4(fp)
 8000420:	00001506 	br	8000478 <addChan+0x84>
	{
		if (Connections[i].fd == -1)
 8000424:	e0bfff17 	ldw	r2,-4(fp)
 8000428:	10c00b24 	muli	r3,r2,44
 800042c:	00820174 	movhi	r2,2053
 8000430:	1885883a 	add	r2,r3,r2
 8000434:	1099b817 	ldw	r2,26336(r2)
 8000438:	10bfffd8 	cmpnei	r2,r2,-1
 800043c:	10000b1e 	bne	r2,zero,800046c <addChan+0x78>
		{
			memcpy(&Connections[i], Conn, sizeof(struct UDPCHAN));
 8000440:	e0bfff17 	ldw	r2,-4(fp)
 8000444:	10c00b24 	muli	r3,r2,44
 8000448:	00820174 	movhi	r2,2053
 800044c:	1099b804 	addi	r2,r2,26336
 8000450:	1885883a 	add	r2,r3,r2
 8000454:	01800b04 	movi	r6,44
 8000458:	e17ffe17 	ldw	r5,-8(fp)
 800045c:	1009883a 	mov	r4,r2
 8000460:	8002ea40 	call	8002ea4 <memcpy>
			return(i);
 8000464:	e0bfff17 	ldw	r2,-4(fp)
 8000468:	00000706 	br	8000488 <addChan+0x94>
	for (int i=0; i < MAXUDPCHAN; i++)
 800046c:	e0bfff17 	ldw	r2,-4(fp)
 8000470:	10800044 	addi	r2,r2,1
 8000474:	e0bfff15 	stw	r2,-4(fp)
 8000478:	e0bfff17 	ldw	r2,-4(fp)
 800047c:	10800550 	cmplti	r2,r2,21
 8000480:	103fe81e 	bne	r2,zero,8000424 <addChan+0x30>
		}
	}

	return(-1);  // out of space in the table
 8000484:	00bfffc4 	movi	r2,-1
};
 8000488:	e037883a 	mov	sp,fp
 800048c:	dfc00117 	ldw	ra,4(sp)
 8000490:	df000017 	ldw	fp,0(sp)
 8000494:	dec00204 	addi	sp,sp,8
 8000498:	f800283a 	ret

0800049c <delChan>:

int delChan(struct UDPCHAN * Conn)
{
 800049c:	defffd04 	addi	sp,sp,-12
 80004a0:	df000215 	stw	fp,8(sp)
 80004a4:	df000204 	addi	fp,sp,8
 80004a8:	e13ffe15 	stw	r4,-8(fp)
	if (Conn->fd < 0)
 80004ac:	e0bffe17 	ldw	r2,-8(fp)
 80004b0:	10800017 	ldw	r2,0(r2)
 80004b4:	1000020e 	bge	r2,zero,80004c0 <delChan+0x24>
		return(-2);	// bad fd value to delete.
 80004b8:	00bfff84 	movi	r2,-2
 80004bc:	00001f06 	br	800053c <delChan+0xa0>

	for (int i=0; i < MAXUDPCHAN; i++)
 80004c0:	e03fff15 	stw	zero,-4(fp)
 80004c4:	00001906 	br	800052c <delChan+0x90>
	{
		if (Connections[i].fd == Conn->fd)
 80004c8:	e0bfff17 	ldw	r2,-4(fp)
 80004cc:	10c00b24 	muli	r3,r2,44
 80004d0:	00820174 	movhi	r2,2053
 80004d4:	1885883a 	add	r2,r3,r2
 80004d8:	10d9b817 	ldw	r3,26336(r2)
 80004dc:	e0bffe17 	ldw	r2,-8(fp)
 80004e0:	10800017 	ldw	r2,0(r2)
 80004e4:	18800e1e 	bne	r3,r2,8000520 <delChan+0x84>
		{
			Connections[i].fd = -1;
 80004e8:	e0bfff17 	ldw	r2,-4(fp)
 80004ec:	11000b24 	muli	r4,r2,44
 80004f0:	00ffffc4 	movi	r3,-1
 80004f4:	00820174 	movhi	r2,2053
 80004f8:	2085883a 	add	r2,r4,r2
 80004fc:	10d9b815 	stw	r3,26336(r2)
			Connections[i].chantype = 'I';
 8000500:	e0bfff17 	ldw	r2,-4(fp)
 8000504:	11000b24 	muli	r4,r2,44
 8000508:	00c01244 	movi	r3,73
 800050c:	00820174 	movhi	r2,2053
 8000510:	2085883a 	add	r2,r4,r2
 8000514:	10d9b905 	stb	r3,26340(r2)
			return(i);
 8000518:	e0bfff17 	ldw	r2,-4(fp)
 800051c:	00000706 	br	800053c <delChan+0xa0>
	for (int i=0; i < MAXUDPCHAN; i++)
 8000520:	e0bfff17 	ldw	r2,-4(fp)
 8000524:	10800044 	addi	r2,r2,1
 8000528:	e0bfff15 	stw	r2,-4(fp)
 800052c:	e0bfff17 	ldw	r2,-4(fp)
 8000530:	10800550 	cmplti	r2,r2,21
 8000534:	103fe41e 	bne	r2,zero,80004c8 <delChan+0x2c>
		}
	}

	return(-1);  // didn't find in the table
 8000538:	00bfffc4 	movi	r2,-1
};
 800053c:	e037883a 	mov	sp,fp
 8000540:	df000017 	ldw	fp,0(sp)
 8000544:	dec00104 	addi	sp,sp,4
 8000548:	f800283a 	ret

0800054c <findfdChan>:

int findfdChan(int fd)
{
 800054c:	defffd04 	addi	sp,sp,-12
 8000550:	df000215 	stw	fp,8(sp)
 8000554:	df000204 	addi	fp,sp,8
 8000558:	e13ffe15 	stw	r4,-8(fp)
	if (fd < 0)
 800055c:	e0bffe17 	ldw	r2,-8(fp)
 8000560:	1000020e 	bge	r2,zero,800056c <findfdChan+0x20>
		return(-2);	// bad fd value to search for.
 8000564:	00bfff84 	movi	r2,-2
 8000568:	00001206 	br	80005b4 <findfdChan+0x68>

	for (int i=0; i < MAXUDPCHAN; i++)
 800056c:	e03fff15 	stw	zero,-4(fp)
 8000570:	00000c06 	br	80005a4 <findfdChan+0x58>
	{

		if (Connections[i].fd == fd)
 8000574:	e0bfff17 	ldw	r2,-4(fp)
 8000578:	10c00b24 	muli	r3,r2,44
 800057c:	00820174 	movhi	r2,2053
 8000580:	1885883a 	add	r2,r3,r2
 8000584:	1099b817 	ldw	r2,26336(r2)
 8000588:	e0fffe17 	ldw	r3,-8(fp)
 800058c:	1880021e 	bne	r3,r2,8000598 <findfdChan+0x4c>
			return(i);  // index of the matching connection
 8000590:	e0bfff17 	ldw	r2,-4(fp)
 8000594:	00000706 	br	80005b4 <findfdChan+0x68>
	for (int i=0; i < MAXUDPCHAN; i++)
 8000598:	e0bfff17 	ldw	r2,-4(fp)
 800059c:	10800044 	addi	r2,r2,1
 80005a0:	e0bfff15 	stw	r2,-4(fp)
 80005a4:	e0bfff17 	ldw	r2,-4(fp)
 80005a8:	10800550 	cmplti	r2,r2,21
 80005ac:	103ff11e 	bne	r2,zero,8000574 <findfdChan+0x28>
	}

	return(-1);  // didn't find in the table
 80005b0:	00bfffc4 	movi	r2,-1
};
 80005b4:	e037883a 	mov	sp,fp
 80005b8:	df000017 	ldw	fp,0(sp)
 80005bc:	dec00104 	addi	sp,sp,4
 80005c0:	f800283a 	ret

080005c4 <findExistingChan>:

int findExistingChan(char chantype, struct sockaddr_in * client)
{
 80005c4:	defffb04 	addi	sp,sp,-20
 80005c8:	dfc00415 	stw	ra,16(sp)
 80005cc:	df000315 	stw	fp,12(sp)
 80005d0:	df000304 	addi	fp,sp,12
 80005d4:	2005883a 	mov	r2,r4
 80005d8:	e17ffd15 	stw	r5,-12(fp)
 80005dc:	e0bffe05 	stb	r2,-8(fp)
	// See if we already have a channel to the client IP

	for (int i=0; i < MAXUDPCHAN; i++)
 80005e0:	e03fff15 	stw	zero,-4(fp)
 80005e4:	00001c06 	br	8000658 <findExistingChan+0x94>
	{
		if ((Connections[i].chantype == chantype)      &&
 80005e8:	e0bfff17 	ldw	r2,-4(fp)
 80005ec:	10c00b24 	muli	r3,r2,44
 80005f0:	00820174 	movhi	r2,2053
 80005f4:	1885883a 	add	r2,r3,r2
 80005f8:	1099b903 	ldbu	r2,26340(r2)
 80005fc:	e0fffe07 	ldb	r3,-8(fp)
 8000600:	10803fcc 	andi	r2,r2,255
 8000604:	1080201c 	xori	r2,r2,128
 8000608:	10bfe004 	addi	r2,r2,-128
 800060c:	18800f1e 	bne	r3,r2,800064c <findExistingChan+0x88>
		   (memcmp(&(Connections[i].client_ip.sin_addr), &(client->sin_addr), sizeof(struct in_addr) ) == 0))
 8000610:	e0bfff17 	ldw	r2,-4(fp)
 8000614:	10800b24 	muli	r2,r2,44
 8000618:	10c00704 	addi	r3,r2,28
 800061c:	00820174 	movhi	r2,2053
 8000620:	1099b804 	addi	r2,r2,26336
 8000624:	1887883a 	add	r3,r3,r2
 8000628:	e0bffd17 	ldw	r2,-12(fp)
 800062c:	10800104 	addi	r2,r2,4
 8000630:	01800104 	movi	r6,4
 8000634:	100b883a 	mov	r5,r2
 8000638:	1809883a 	mov	r4,r3
 800063c:	8002e2c0 	call	8002e2c <memcmp>
		if ((Connections[i].chantype == chantype)      &&
 8000640:	1000021e 	bne	r2,zero,800064c <findExistingChan+0x88>
		{
			return(i);	// have existing channel
 8000644:	e0bfff17 	ldw	r2,-4(fp)
 8000648:	00000706 	br	8000668 <findExistingChan+0xa4>
	for (int i=0; i < MAXUDPCHAN; i++)
 800064c:	e0bfff17 	ldw	r2,-4(fp)
 8000650:	10800044 	addi	r2,r2,1
 8000654:	e0bfff15 	stw	r2,-4(fp)
 8000658:	e0bfff17 	ldw	r2,-4(fp)
 800065c:	10800550 	cmplti	r2,r2,21
 8000660:	103fe11e 	bne	r2,zero,80005e8 <findExistingChan+0x24>
		}
	}

	return(-1);		// didn't find in the table
 8000664:	00bfffc4 	movi	r2,-1

}
 8000668:	e037883a 	mov	sp,fp
 800066c:	dfc00117 	ldw	ra,4(sp)
 8000670:	df000017 	ldw	fp,0(sp)
 8000674:	dec00204 	addi	sp,sp,8
 8000678:	f800283a 	ret

0800067c <buildaddChan>:

int buildaddChan(int fd, char type, struct sockaddr_in * host, struct sockaddr_in * client)
{
 800067c:	deffef04 	addi	sp,sp,-68
 8000680:	dfc01015 	stw	ra,64(sp)
 8000684:	df000f15 	stw	fp,60(sp)
 8000688:	df000f04 	addi	fp,sp,60
 800068c:	e13ff415 	stw	r4,-48(fp)
 8000690:	2805883a 	mov	r2,r5
 8000694:	e1bff215 	stw	r6,-56(fp)
 8000698:	e1fff115 	stw	r7,-60(fp)
 800069c:	e0bff305 	stb	r2,-52(fp)
	struct UDPCHAN conn;

	if (fd < 0)
 80006a0:	e0bff417 	ldw	r2,-48(fp)
 80006a4:	1000020e 	bge	r2,zero,80006b0 <buildaddChan+0x34>
		return(-2);	// bad fd value
 80006a8:	00bfff84 	movi	r2,-2
 80006ac:	00001306 	br	80006fc <buildaddChan+0x80>

	conn.fd = fd;
 80006b0:	e0bff417 	ldw	r2,-48(fp)
 80006b4:	e0bff515 	stw	r2,-44(fp)
	conn.chantype = type;
 80006b8:	e0bff303 	ldbu	r2,-52(fp)
 80006bc:	e0bff605 	stb	r2,-40(fp)
	memcpy(&conn.host_ip, host, sizeof(struct sockaddr_in));
 80006c0:	e0bff504 	addi	r2,fp,-44
 80006c4:	10800204 	addi	r2,r2,8
 80006c8:	01800404 	movi	r6,16
 80006cc:	e17ff217 	ldw	r5,-56(fp)
 80006d0:	1009883a 	mov	r4,r2
 80006d4:	8002ea40 	call	8002ea4 <memcpy>
	memcpy(&conn.client_ip, client, sizeof(struct sockaddr_in));
 80006d8:	e0bff504 	addi	r2,fp,-44
 80006dc:	10800604 	addi	r2,r2,24
 80006e0:	01800404 	movi	r6,16
 80006e4:	e17ff117 	ldw	r5,-60(fp)
 80006e8:	1009883a 	mov	r4,r2
 80006ec:	8002ea40 	call	8002ea4 <memcpy>

	return addChan(&conn);
 80006f0:	e0bff504 	addi	r2,fp,-44
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	80003f40 	call	80003f4 <addChan>
};
 80006fc:	e037883a 	mov	sp,fp
 8000700:	dfc00117 	ldw	ra,4(sp)
 8000704:	df000017 	ldw	fp,0(sp)
 8000708:	dec00204 	addi	sp,sp,8
 800070c:	f800283a 	ret

08000710 <allListeners>:

int allListeners(int * theList)			// return array of active channels to listen for
{
 8000710:	defffc04 	addi	sp,sp,-16
 8000714:	df000315 	stw	fp,12(sp)
 8000718:	df000304 	addi	fp,sp,12
 800071c:	e13ffd15 	stw	r4,-12(fp)
	int count = 0;
 8000720:	e03fff15 	stw	zero,-4(fp)

	//memset(theList, -1, MAXUDPCHAN);	// clear the returned list

	for(int i=0; i<MAXUDPCHAN; i++)
 8000724:	e03ffe15 	stw	zero,-8(fp)
 8000728:	00001506 	br	8000780 <allListeners+0x70>
		if (Connections[i].fd > 0)		// valid fd
 800072c:	e0bffe17 	ldw	r2,-8(fp)
 8000730:	10c00b24 	muli	r3,r2,44
 8000734:	00820174 	movhi	r2,2053
 8000738:	1885883a 	add	r2,r3,r2
 800073c:	1099b817 	ldw	r2,26336(r2)
 8000740:	00800c0e 	bge	zero,r2,8000774 <allListeners+0x64>
			theList[count++] = Connections[i].fd;
 8000744:	e0bfff17 	ldw	r2,-4(fp)
 8000748:	10c00044 	addi	r3,r2,1
 800074c:	e0ffff15 	stw	r3,-4(fp)
 8000750:	100490ba 	slli	r2,r2,2
 8000754:	e0fffd17 	ldw	r3,-12(fp)
 8000758:	1887883a 	add	r3,r3,r2
 800075c:	e0bffe17 	ldw	r2,-8(fp)
 8000760:	11000b24 	muli	r4,r2,44
 8000764:	00820174 	movhi	r2,2053
 8000768:	2085883a 	add	r2,r4,r2
 800076c:	1099b817 	ldw	r2,26336(r2)
 8000770:	18800015 	stw	r2,0(r3)
	for(int i=0; i<MAXUDPCHAN; i++)
 8000774:	e0bffe17 	ldw	r2,-8(fp)
 8000778:	10800044 	addi	r2,r2,1
 800077c:	e0bffe15 	stw	r2,-8(fp)
 8000780:	e0bffe17 	ldw	r2,-8(fp)
 8000784:	10800550 	cmplti	r2,r2,21
 8000788:	103fe81e 	bne	r2,zero,800072c <allListeners+0x1c>

	return count;
 800078c:	e0bfff17 	ldw	r2,-4(fp)
};
 8000790:	e037883a 	mov	sp,fp
 8000794:	df000017 	ldw	fp,0(sp)
 8000798:	dec00104 	addi	sp,sp,4
 800079c:	f800283a 	ret

080007a0 <ProcessRxPacket>:
#define MAXLINE 1500
unsigned char buffer[MAXLINE+1];  // room to hold string terminating \0


int ProcessRxPacket(int index)
{
 80007a0:	defff504 	addi	sp,sp,-44
 80007a4:	dfc00a15 	stw	ra,40(sp)
 80007a8:	df000915 	stw	fp,36(sp)
 80007ac:	df000904 	addi	fp,sp,36
 80007b0:	e13ff915 	stw	r4,-28(fp)
    int                 len, bufflen;
    struct sockaddr_in  client_addr;

	// Discovery channel has to process the receive buffer itself

	if (Connections[index].chantype == 'D')  // Discovery
 80007b4:	e0bff917 	ldw	r2,-28(fp)
 80007b8:	10c00b24 	muli	r3,r2,44
 80007bc:	00820174 	movhi	r2,2053
 80007c0:	1885883a 	add	r2,r3,r2
 80007c4:	1099b903 	ldbu	r2,26340(r2)
 80007c8:	10803fcc 	andi	r2,r2,255
 80007cc:	1080201c 	xori	r2,r2,128
 80007d0:	10bfe004 	addi	r2,r2,-128
 80007d4:	10801118 	cmpnei	r2,r2,68
 80007d8:	1000031e 	bne	r2,zero,80007e8 <ProcessRxPacket+0x48>
		return DiscChanMessage(index);
 80007dc:	e13ff917 	ldw	r4,-28(fp)
 80007e0:	80009140 	call	8000914 <DiscChanMessage>
 80007e4:	00004606 	br	8000900 <ProcessRxPacket+0x160>

	// Get the received buffer
    memset(&client_addr, 0, sizeof(struct sockaddr_in));
 80007e8:	e0bffa04 	addi	r2,fp,-24
 80007ec:	01800404 	movi	r6,16
 80007f0:	000b883a 	mov	r5,zero
 80007f4:	1009883a 	mov	r4,r2
 80007f8:	8002fa40 	call	8002fa4 <memset>

    len = sizeof(struct sockaddr_in);
 80007fc:	00800404 	movi	r2,16
 8000800:	e0bffe15 	stw	r2,-8(fp)
	bufflen = recvfrom(Connections[index].fd, (char *)buffer, MAXLINE,
 8000804:	e0bff917 	ldw	r2,-28(fp)
 8000808:	10c00b24 	muli	r3,r2,44
 800080c:	00820174 	movhi	r2,2053
 8000810:	1885883a 	add	r2,r3,r2
 8000814:	10d9b817 	ldw	r3,26336(r2)
 8000818:	e0bffe04 	addi	r2,fp,-8
 800081c:	d8800115 	stw	r2,4(sp)
 8000820:	e0bffa04 	addi	r2,fp,-24
 8000824:	d8800015 	stw	r2,0(sp)
 8000828:	000f883a 	mov	r7,zero
 800082c:	01817704 	movi	r6,1500
 8000830:	01420174 	movhi	r5,2053
 8000834:	295ac604 	addi	r5,r5,27416
 8000838:	1809883a 	mov	r4,r3
 800083c:	80277940 	call	8027794 <bsd_recvfrom>
 8000840:	e0bfff15 	stw	r2,-4(fp)
			/*MSG_WAITALL*/ 0, (struct sockaddr *) &client_addr, &len);
	buffer[bufflen] = '\0';
 8000844:	e0ffff17 	ldw	r3,-4(fp)
 8000848:	00820174 	movhi	r2,2053
 800084c:	1885883a 	add	r2,r3,r2
 8000850:	101ac605 	stb	zero,27416(r2)

	if (Connections[index].chantype == 'P')  // Provisioning
 8000854:	e0bff917 	ldw	r2,-28(fp)
 8000858:	10c00b24 	muli	r3,r2,44
 800085c:	00820174 	movhi	r2,2053
 8000860:	1885883a 	add	r2,r3,r2
 8000864:	1099b903 	ldbu	r2,26340(r2)
 8000868:	10803fcc 	andi	r2,r2,255
 800086c:	1080201c 	xori	r2,r2,128
 8000870:	10bfe004 	addi	r2,r2,-128
 8000874:	10801418 	cmpnei	r2,r2,80
 8000878:	1000041e 	bne	r2,zero,800088c <ProcessRxPacket+0xec>
		return ProvChanMessage(index, bufflen);
 800087c:	e17fff17 	ldw	r5,-4(fp)
 8000880:	e13ff917 	ldw	r4,-28(fp)
 8000884:	8000c700 	call	8000c70 <ProvChanMessage>
 8000888:	00001d06 	br	8000900 <ProcessRxPacket+0x160>

	if (Connections[index].chantype == 'C')  // Configuration
 800088c:	e0bff917 	ldw	r2,-28(fp)
 8000890:	10c00b24 	muli	r3,r2,44
 8000894:	00820174 	movhi	r2,2053
 8000898:	1885883a 	add	r2,r3,r2
 800089c:	1099b903 	ldbu	r2,26340(r2)
 80008a0:	10803fcc 	andi	r2,r2,255
 80008a4:	1080201c 	xori	r2,r2,128
 80008a8:	10bfe004 	addi	r2,r2,-128
 80008ac:	108010d8 	cmpnei	r2,r2,67
 80008b0:	1000041e 	bne	r2,zero,80008c4 <ProcessRxPacket+0x124>
		return ConfigChanMessage(index, bufflen);
 80008b4:	e17fff17 	ldw	r5,-4(fp)
 80008b8:	e13ff917 	ldw	r4,-28(fp)
 80008bc:	8000db40 	call	8000db4 <ConfigChanMessage>
 80008c0:	00000f06 	br	8000900 <ProcessRxPacket+0x160>

	if (Connections[index].chantype == 'T')  // Traffic (Data rx'd from Ethernet to be RF transmitted)
 80008c4:	e0bff917 	ldw	r2,-28(fp)
 80008c8:	10c00b24 	muli	r3,r2,44
 80008cc:	00820174 	movhi	r2,2053
 80008d0:	1885883a 	add	r2,r3,r2
 80008d4:	1099b903 	ldbu	r2,26340(r2)
 80008d8:	10803fcc 	andi	r2,r2,255
 80008dc:	1080201c 	xori	r2,r2,128
 80008e0:	10bfe004 	addi	r2,r2,-128
 80008e4:	10801518 	cmpnei	r2,r2,84
 80008e8:	1000041e 	bne	r2,zero,80008fc <ProcessRxPacket+0x15c>
		return TrafficChanMessage(index, bufflen);
 80008ec:	e17fff17 	ldw	r5,-4(fp)
 80008f0:	e13ff917 	ldw	r4,-28(fp)
 80008f4:	8000df80 	call	8000df8 <TrafficChanMessage>
 80008f8:	00000106 	br	8000900 <ProcessRxPacket+0x160>

	return -1;		// unknown or Idle chantype
 80008fc:	00bfffc4 	movi	r2,-1
};
 8000900:	e037883a 	mov	sp,fp
 8000904:	dfc00117 	ldw	ra,4(sp)
 8000908:	df000017 	ldw	fp,0(sp)
 800090c:	dec00204 	addi	sp,sp,8
 8000910:	f800283a 	ret

08000914 <DiscChanMessage>:


int DiscChanMessage(int index)
{
 8000914:	deffdd04 	addi	sp,sp,-140
 8000918:	dfc02215 	stw	ra,136(sp)
 800091c:	df002115 	stw	fp,132(sp)
 8000920:	df002104 	addi	fp,sp,132
 8000924:	e13fe115 	stw	r4,-124(fp)
     */

    int                 len, n, fd_prov_tx;
    struct sockaddr_in  client_addr, host_addr;

    memset(&client_addr, 0, sizeof(struct sockaddr_in));
 8000928:	e0bff604 	addi	r2,fp,-40
 800092c:	01800404 	movi	r6,16
 8000930:	000b883a 	mov	r5,zero
 8000934:	1009883a 	mov	r4,r2
 8000938:	8002fa40 	call	8002fa4 <memset>
    memset(&host_addr, 0, sizeof(struct sockaddr_in));
 800093c:	e0bff204 	addi	r2,fp,-56
 8000940:	01800404 	movi	r6,16
 8000944:	000b883a 	mov	r5,zero
 8000948:	1009883a 	mov	r4,r2
 800094c:	8002fa40 	call	8002fa4 <memset>

    /* Discovery reply format:
     * 0xEF 0xFE 0x02 (not sending data yet) 6-byte ourMACaddress code_ver
     * board_id (0x07 from TSDR)
     */
    uint8_t disc_resp[64] = { 0xfe, 0xef, 0x02, 0x00, 0x07, 0xed, 0x2a, 0x22, 0x16, 0x07 };
 8000950:	008000f4 	movhi	r2,3
 8000954:	10bbff84 	addi	r2,r2,-4098
 8000958:	e0bfe215 	stw	r2,-120(fp)
 800095c:	00888af4 	movhi	r2,8747
 8000960:	10bb41c4 	addi	r2,r2,-4857
 8000964:	e0bfe315 	stw	r2,-116(fp)
 8000968:	0081c584 	movi	r2,1814
 800096c:	e0bfe415 	stw	r2,-112(fp)
 8000970:	e03fe515 	stw	zero,-108(fp)
 8000974:	e03fe615 	stw	zero,-104(fp)
 8000978:	e03fe715 	stw	zero,-100(fp)
 800097c:	e03fe815 	stw	zero,-96(fp)
 8000980:	e03fe915 	stw	zero,-92(fp)
 8000984:	e03fea15 	stw	zero,-88(fp)
 8000988:	e03feb15 	stw	zero,-84(fp)
 800098c:	e03fec15 	stw	zero,-80(fp)
 8000990:	e03fed15 	stw	zero,-76(fp)
 8000994:	e03fee15 	stw	zero,-72(fp)
 8000998:	e03fef15 	stw	zero,-68(fp)
 800099c:	e03ff015 	stw	zero,-64(fp)
 80009a0:	e03ff115 	stw	zero,-60(fp)
    memset(&disc_resp[10], 0, 54);  // discovery reply is padded with zeros
 80009a4:	e0bfe204 	addi	r2,fp,-120
 80009a8:	10800284 	addi	r2,r2,10
 80009ac:	01800d84 	movi	r6,54
 80009b0:	000b883a 	mov	r5,zero
 80009b4:	1009883a 	mov	r4,r2
 80009b8:	8002fa40 	call	8002fa4 <memset>

    len = sizeof(struct sockaddr_in);
 80009bc:	00800404 	movi	r2,16
 80009c0:	e0bffa15 	stw	r2,-24(fp)
	n = recvfrom(Connections[index].fd, (char *)buffer, MAXLINE,
 80009c4:	e0bfe117 	ldw	r2,-124(fp)
 80009c8:	10c00b24 	muli	r3,r2,44
 80009cc:	00820174 	movhi	r2,2053
 80009d0:	1885883a 	add	r2,r3,r2
 80009d4:	10d9b817 	ldw	r3,26336(r2)
 80009d8:	e0bffa04 	addi	r2,fp,-24
 80009dc:	d8800115 	stw	r2,4(sp)
 80009e0:	e0bff604 	addi	r2,fp,-40
 80009e4:	d8800015 	stw	r2,0(sp)
 80009e8:	000f883a 	mov	r7,zero
 80009ec:	01817704 	movi	r6,1500
 80009f0:	01420174 	movhi	r5,2053
 80009f4:	295ac604 	addi	r5,r5,27416
 80009f8:	1809883a 	mov	r4,r3
 80009fc:	80277940 	call	8027794 <bsd_recvfrom>
 8000a00:	e0bfff15 	stw	r2,-4(fp)
			/*MSG_WAITALL*/ 0, (struct sockaddr *) &client_addr, &len);
	buffer[n] = '\0';
 8000a04:	e0ffff17 	ldw	r3,-4(fp)
 8000a08:	00820174 	movhi	r2,2053
 8000a0c:	1885883a 	add	r2,r3,r2
 8000a10:	101ac605 	stb	zero,27416(r2)

    /* check for 0xef 0xfe 0x02 signifying discovery request */
	if ((buffer[0] == 0xef) && (buffer[1] == 0xfe) && (buffer[2] == 0x02))
 8000a14:	00820174 	movhi	r2,2053
 8000a18:	109ac603 	ldbu	r2,27416(r2)
 8000a1c:	10803fcc 	andi	r2,r2,255
 8000a20:	10803bd8 	cmpnei	r2,r2,239
 8000a24:	10003a1e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
 8000a28:	00820174 	movhi	r2,2053
 8000a2c:	109ac643 	ldbu	r2,27417(r2)
 8000a30:	10803fcc 	andi	r2,r2,255
 8000a34:	10803f98 	cmpnei	r2,r2,254
 8000a38:	1000351e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
 8000a3c:	00820174 	movhi	r2,2053
 8000a40:	109ac683 	ldbu	r2,27418(r2)
 8000a44:	10803fcc 	andi	r2,r2,255
 8000a48:	10800098 	cmpnei	r2,r2,2
 8000a4c:	1000301e 	bne	r2,zero,8000b10 <DiscChanMessage+0x1fc>
	  printf("Valid OpenHPSDR Discovery request received\n");
 8000a50:	01020174 	movhi	r4,2053
 8000a54:	2137c004 	addi	r4,r4,-8448
 8000a58:	80033800 	call	8003380 <puts>
	else
		return -1;	// unknown discovery message - throw away

	printf("From: %s   Port: %u\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
 8000a5c:	e13ff717 	ldw	r4,-36(fp)
 8000a60:	80277600 	call	8027760 <bsd_inet_ntoa>
 8000a64:	1009883a 	mov	r4,r2
 8000a68:	e0bff68b 	ldhu	r2,-38(fp)
 8000a6c:	10bfffcc 	andi	r2,r2,65535
 8000a70:	1004d23a 	srli	r2,r2,8
 8000a74:	10bfffcc 	andi	r2,r2,65535
 8000a78:	10c03fcc 	andi	r3,r2,255
 8000a7c:	e0bff68b 	ldhu	r2,-38(fp)
 8000a80:	10bfffcc 	andi	r2,r2,65535
 8000a84:	1004923a 	slli	r2,r2,8
 8000a88:	10bfffcc 	andi	r2,r2,65535
 8000a8c:	1884b03a 	or	r2,r3,r2
 8000a90:	100d883a 	mov	r6,r2
 8000a94:	200b883a 	mov	r5,r4
 8000a98:	01020174 	movhi	r4,2053
 8000a9c:	2137cb04 	addi	r4,r4,-8404
 8000aa0:	800325c0 	call	800325c <printf>
	printf("Received buffer : 0x%2x 0x%2x 0x%2x 0x%2x\n", buffer[0], buffer[1], buffer[2], buffer[3]);
 8000aa4:	00820174 	movhi	r2,2053
 8000aa8:	109ac603 	ldbu	r2,27416(r2)
 8000aac:	10c03fcc 	andi	r3,r2,255
 8000ab0:	00820174 	movhi	r2,2053
 8000ab4:	109ac643 	ldbu	r2,27417(r2)
 8000ab8:	11003fcc 	andi	r4,r2,255
 8000abc:	00820174 	movhi	r2,2053
 8000ac0:	109ac683 	ldbu	r2,27418(r2)
 8000ac4:	11403fcc 	andi	r5,r2,255
 8000ac8:	00820174 	movhi	r2,2053
 8000acc:	109ac6c3 	ldbu	r2,27419(r2)
 8000ad0:	10803fcc 	andi	r2,r2,255
 8000ad4:	d8800015 	stw	r2,0(sp)
 8000ad8:	280f883a 	mov	r7,r5
 8000adc:	200d883a 	mov	r6,r4
 8000ae0:	180b883a 	mov	r5,r3
 8000ae4:	01020174 	movhi	r4,2053
 8000ae8:	2137d104 	addi	r4,r4,-8380
 8000aec:	800325c0 	call	800325c <printf>

    // See if we already have a Provisioning Channel open from this client

    int existingIndex = findExistingChan('P', &client_addr);
 8000af0:	e0bff604 	addi	r2,fp,-40
 8000af4:	100b883a 	mov	r5,r2
 8000af8:	01001404 	movi	r4,80
 8000afc:	80005c40 	call	80005c4 <findExistingChan>
 8000b00:	e0bffe15 	stw	r2,-8(fp)
    if (existingIndex >= 0)		// Have an existing provisioning channel - send a duplicate reply
 8000b04:	e0bffe17 	ldw	r2,-8(fp)
 8000b08:	1000030e 	bge	r2,zero,8000b18 <DiscChanMessage+0x204>
 8000b0c:	00001406 	br	8000b60 <DiscChanMessage+0x24c>
		return -1;	// unknown discovery message - throw away
 8000b10:	00bfffc4 	movi	r2,-1
 8000b14:	00005106 	br	8000c5c <DiscChanMessage+0x348>
    {
    	int result = sendto(Connections[existingIndex].fd, (void *)disc_resp, sizeof(disc_resp),
 8000b18:	e0bffe17 	ldw	r2,-8(fp)
 8000b1c:	10c00b24 	muli	r3,r2,44
 8000b20:	00820174 	movhi	r2,2053
 8000b24:	1885883a 	add	r2,r3,r2
 8000b28:	10d9b817 	ldw	r3,26336(r2)
 8000b2c:	e13fe204 	addi	r4,fp,-120
 8000b30:	00800404 	movi	r2,16
 8000b34:	d8800115 	stw	r2,4(sp)
 8000b38:	e0bff604 	addi	r2,fp,-40
 8000b3c:	d8800015 	stw	r2,0(sp)
 8000b40:	000f883a 	mov	r7,zero
 8000b44:	01801004 	movi	r6,64
 8000b48:	200b883a 	mov	r5,r4
 8000b4c:	1809883a 	mov	r4,r3
 8000b50:	80300e80 	call	80300e8 <t_sendto>
 8000b54:	e0bffb15 	stw	r2,-20(fp)
				/*MSG_CONFIRM*/ 0, (struct sockaddr *) &client_addr, sizeof(struct sockaddr_in));
    	return result;
 8000b58:	e0bffb17 	ldw	r2,-20(fp)
 8000b5c:	00003f06 	br	8000c5c <DiscChanMessage+0x348>
    }

    // Don't have an existing channel. Create a new Provisioning channel to send the discovery reply

    if ((fd_prov_tx = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 8000b60:	000d883a 	mov	r6,zero
 8000b64:	01400084 	movi	r5,2
 8000b68:	01000084 	movi	r4,2
 8000b6c:	802f1ac0 	call	802f1ac <t_socket>
 8000b70:	e0bffd15 	stw	r2,-12(fp)
 8000b74:	e0bffd17 	ldw	r2,-12(fp)
 8000b78:	1000040e 	bge	r2,zero,8000b8c <DiscChanMessage+0x278>
    {
      alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Provisioning Socket creation failed");
 8000b7c:	01420174 	movhi	r5,2053
 8000b80:	2977dc04 	addi	r5,r5,-8336
 8000b84:	01003fc4 	movi	r4,255
 8000b88:	8001e8c0 	call	8001e8c <alt_NetworkErrorHandler>
    }

    // Use a new sending socket. sendto implicitly binds a new (random) receive port number

    sendto(fd_prov_tx, (void *)disc_resp, sizeof(disc_resp),
 8000b8c:	e0ffe204 	addi	r3,fp,-120
 8000b90:	00800404 	movi	r2,16
 8000b94:	d8800115 	stw	r2,4(sp)
 8000b98:	e0bff604 	addi	r2,fp,-40
 8000b9c:	d8800015 	stw	r2,0(sp)
 8000ba0:	000f883a 	mov	r7,zero
 8000ba4:	01801004 	movi	r6,64
 8000ba8:	180b883a 	mov	r5,r3
 8000bac:	e13ffd17 	ldw	r4,-12(fp)
 8000bb0:	80300e80 	call	80300e8 <t_sendto>
    		/*MSG_CONFIRM*/ 0, (struct sockaddr *) &client_addr, sizeof(struct sockaddr_in));

    len = sizeof(struct sockaddr_in);
 8000bb4:	00800404 	movi	r2,16
 8000bb8:	e0bffa15 	stw	r2,-24(fp)
    if (getsockname(fd_prov_tx, (struct sockaddr *)&host_addr, &len) == -1)
 8000bbc:	e0fffa04 	addi	r3,fp,-24
 8000bc0:	e0bff204 	addi	r2,fp,-56
 8000bc4:	180d883a 	mov	r6,r3
 8000bc8:	100b883a 	mov	r5,r2
 8000bcc:	e13ffd17 	ldw	r4,-12(fp)
 8000bd0:	802726c0 	call	802726c <bsd_getsockname>
 8000bd4:	10bfffd8 	cmpnei	r2,r2,-1
 8000bd8:	1000051e 	bne	r2,zero,8000bf0 <DiscChanMessage+0x2dc>
    {
    	perror("getsockname() error\n");
 8000bdc:	01020174 	movhi	r4,2053
 8000be0:	2137e804 	addi	r4,r4,-8288
 8000be4:	800321c0 	call	800321c <perror>
    	return -1;	// Error
 8000be8:	00bfffc4 	movi	r2,-1
 8000bec:	00001b06 	br	8000c5c <DiscChanMessage+0x348>
    }
    else
    {
    	printf("Provisioning port number: %d\n", ntohs(host_addr.sin_port));
 8000bf0:	e0bff28b 	ldhu	r2,-54(fp)
 8000bf4:	10bfffcc 	andi	r2,r2,65535
 8000bf8:	1004d23a 	srli	r2,r2,8
 8000bfc:	10bfffcc 	andi	r2,r2,65535
 8000c00:	10c03fcc 	andi	r3,r2,255
 8000c04:	e0bff28b 	ldhu	r2,-54(fp)
 8000c08:	10bfffcc 	andi	r2,r2,65535
 8000c0c:	1004923a 	slli	r2,r2,8
 8000c10:	10bfffcc 	andi	r2,r2,65535
 8000c14:	1884b03a 	or	r2,r3,r2
 8000c18:	100b883a 	mov	r5,r2
 8000c1c:	01020174 	movhi	r4,2053
 8000c20:	2137ee04 	addi	r4,r4,-8264
 8000c24:	800325c0 	call	800325c <printf>
    	int addresult = buildaddChan(fd_prov_tx, 'P', &host_addr, &client_addr);
 8000c28:	e0fff604 	addi	r3,fp,-40
 8000c2c:	e0bff204 	addi	r2,fp,-56
 8000c30:	180f883a 	mov	r7,r3
 8000c34:	100d883a 	mov	r6,r2
 8000c38:	01401404 	movi	r5,80
 8000c3c:	e13ffd17 	ldw	r4,-12(fp)
 8000c40:	800067c0 	call	800067c <buildaddChan>
 8000c44:	e0bffc15 	stw	r2,-16(fp)
    	printf("Result of adding new provisioning channel to table: %u\n", addresult);
 8000c48:	e17ffc17 	ldw	r5,-16(fp)
 8000c4c:	01020174 	movhi	r4,2053
 8000c50:	2137f604 	addi	r4,r4,-8232
 8000c54:	800325c0 	call	800325c <printf>
    	return addresult;   // return the result of adding the channel to the table
 8000c58:	e0bffc17 	ldw	r2,-16(fp)
    }
};
 8000c5c:	e037883a 	mov	sp,fp
 8000c60:	dfc00117 	ldw	ra,4(sp)
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00204 	addi	sp,sp,8
 8000c6c:	f800283a 	ret

08000c70 <ProvChanMessage>:

int ProvChanMessage(int index, int bufflen)
{
 8000c70:	defff904 	addi	sp,sp,-28
 8000c74:	dfc00615 	stw	ra,24(sp)
 8000c78:	df000515 	stw	fp,20(sp)
 8000c7c:	df000504 	addi	fp,sp,20
 8000c80:	e13ffe15 	stw	r4,-8(fp)
 8000c84:	e17ffd15 	stw	r5,-12(fp)
	 * Xn - Turn off LED n
	 */

	int result;

	printf("Received Provisioning Channel Message: %s\n", buffer);
 8000c88:	01420174 	movhi	r5,2053
 8000c8c:	295ac604 	addi	r5,r5,27416
 8000c90:	01020174 	movhi	r4,2053
 8000c94:	21380404 	addi	r4,r4,-8176
 8000c98:	800325c0 	call	800325c <printf>

	if (buffer[0] == 'Y' || buffer[0] == 'X')
 8000c9c:	00820174 	movhi	r2,2053
 8000ca0:	109ac603 	ldbu	r2,27416(r2)
 8000ca4:	10803fcc 	andi	r2,r2,255
 8000ca8:	10801660 	cmpeqi	r2,r2,89
 8000cac:	1000051e 	bne	r2,zero,8000cc4 <ProvChanMessage+0x54>
 8000cb0:	00820174 	movhi	r2,2053
 8000cb4:	109ac603 	ldbu	r2,27416(r2)
 8000cb8:	10803fcc 	andi	r2,r2,255
 8000cbc:	10801618 	cmpnei	r2,r2,88
 8000cc0:	1000041e 	bne	r2,zero,8000cd4 <ProvChanMessage+0x64>
		result = ProvisioningLEDCommand(index, bufflen);
 8000cc4:	e17ffd17 	ldw	r5,-12(fp)
 8000cc8:	e13ffe17 	ldw	r4,-8(fp)
 8000ccc:	8000e3c0 	call	8000e3c <ProvisioningLEDCommand>
 8000cd0:	e0bfff15 	stw	r2,-4(fp)

	if (buffer[0] == 'M')
 8000cd4:	00820174 	movhi	r2,2053
 8000cd8:	109ac603 	ldbu	r2,27416(r2)
 8000cdc:	10803fcc 	andi	r2,r2,255
 8000ce0:	10801358 	cmpnei	r2,r2,77
 8000ce4:	1000041e 	bne	r2,zero,8000cf8 <ProvChanMessage+0x88>
		result = ProvisioningModuleRegisterCommand(index, bufflen);
 8000ce8:	e17ffd17 	ldw	r5,-12(fp)
 8000cec:	e13ffe17 	ldw	r4,-8(fp)
 8000cf0:	80010640 	call	8001064 <ProvisioningModuleRegisterCommand>
 8000cf4:	e0bfff15 	stw	r2,-4(fp)

	if (result >= 0)
 8000cf8:	e0bfff17 	ldw	r2,-4(fp)
 8000cfc:	10001416 	blt	r2,zero,8000d50 <ProvChanMessage+0xe0>
	    sendto(Connections[index].fd, (void *)"AK\n", 4, 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
 8000d00:	e0bffe17 	ldw	r2,-8(fp)
 8000d04:	10c00b24 	muli	r3,r2,44
 8000d08:	00820174 	movhi	r2,2053
 8000d0c:	1885883a 	add	r2,r3,r2
 8000d10:	1119b817 	ldw	r4,26336(r2)
 8000d14:	e0bffe17 	ldw	r2,-8(fp)
 8000d18:	10800b24 	muli	r2,r2,44
 8000d1c:	10c00604 	addi	r3,r2,24
 8000d20:	00820174 	movhi	r2,2053
 8000d24:	1099b804 	addi	r2,r2,26336
 8000d28:	1885883a 	add	r2,r3,r2
 8000d2c:	00c00404 	movi	r3,16
 8000d30:	d8c00115 	stw	r3,4(sp)
 8000d34:	d8800015 	stw	r2,0(sp)
 8000d38:	000f883a 	mov	r7,zero
 8000d3c:	01800104 	movi	r6,4
 8000d40:	01420174 	movhi	r5,2053
 8000d44:	29780f04 	addi	r5,r5,-8132
 8000d48:	80300e80 	call	80300e8 <t_sendto>
 8000d4c:	00001306 	br	8000d9c <ProvChanMessage+0x12c>
	else
        sendto(Connections[index].fd, (void *)"NAK\n", 4, 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
 8000d50:	e0bffe17 	ldw	r2,-8(fp)
 8000d54:	10c00b24 	muli	r3,r2,44
 8000d58:	00820174 	movhi	r2,2053
 8000d5c:	1885883a 	add	r2,r3,r2
 8000d60:	1119b817 	ldw	r4,26336(r2)
 8000d64:	e0bffe17 	ldw	r2,-8(fp)
 8000d68:	10800b24 	muli	r2,r2,44
 8000d6c:	10c00604 	addi	r3,r2,24
 8000d70:	00820174 	movhi	r2,2053
 8000d74:	1099b804 	addi	r2,r2,26336
 8000d78:	1885883a 	add	r2,r3,r2
 8000d7c:	00c00404 	movi	r3,16
 8000d80:	d8c00115 	stw	r3,4(sp)
 8000d84:	d8800015 	stw	r2,0(sp)
 8000d88:	000f883a 	mov	r7,zero
 8000d8c:	01800104 	movi	r6,4
 8000d90:	01420174 	movhi	r5,2053
 8000d94:	29781004 	addi	r5,r5,-8128
 8000d98:	80300e80 	call	80300e8 <t_sendto>

	return result;
 8000d9c:	e0bfff17 	ldw	r2,-4(fp)
};
 8000da0:	e037883a 	mov	sp,fp
 8000da4:	dfc00117 	ldw	ra,4(sp)
 8000da8:	df000017 	ldw	fp,0(sp)
 8000dac:	dec00204 	addi	sp,sp,8
 8000db0:	f800283a 	ret

08000db4 <ConfigChanMessage>:

int ConfigChanMessage(int index, int bufflen)
{
 8000db4:	defffc04 	addi	sp,sp,-16
 8000db8:	dfc00315 	stw	ra,12(sp)
 8000dbc:	df000215 	stw	fp,8(sp)
 8000dc0:	df000204 	addi	fp,sp,8
 8000dc4:	e13fff15 	stw	r4,-4(fp)
 8000dc8:	e17ffe15 	stw	r5,-8(fp)
    // Received Configuration Channel message

	printf("Received Configuration Channel Message: %s\n", buffer);
 8000dcc:	01420174 	movhi	r5,2053
 8000dd0:	295ac604 	addi	r5,r5,27416
 8000dd4:	01020174 	movhi	r4,2053
 8000dd8:	21381204 	addi	r4,r4,-8120
 8000ddc:	800325c0 	call	800325c <printf>
	return -2;	// not yet implemented
 8000de0:	00bfff84 	movi	r2,-2
};
 8000de4:	e037883a 	mov	sp,fp
 8000de8:	dfc00117 	ldw	ra,4(sp)
 8000dec:	df000017 	ldw	fp,0(sp)
 8000df0:	dec00204 	addi	sp,sp,8
 8000df4:	f800283a 	ret

08000df8 <TrafficChanMessage>:

int TrafficChanMessage(int index, int bufflen)
{
 8000df8:	defffc04 	addi	sp,sp,-16
 8000dfc:	dfc00315 	stw	ra,12(sp)
 8000e00:	df000215 	stw	fp,8(sp)
 8000e04:	df000204 	addi	fp,sp,8
 8000e08:	e13fff15 	stw	r4,-4(fp)
 8000e0c:	e17ffe15 	stw	r5,-8(fp)
    // Received Traffic (Data) Channel message

	printf("Received Traffic Channel Message: %s\n",buffer);
 8000e10:	01420174 	movhi	r5,2053
 8000e14:	295ac604 	addi	r5,r5,27416
 8000e18:	01020174 	movhi	r4,2053
 8000e1c:	21381d04 	addi	r4,r4,-8076
 8000e20:	800325c0 	call	800325c <printf>
	return -2;	// not yet implemented
 8000e24:	00bfff84 	movi	r2,-2
};
 8000e28:	e037883a 	mov	sp,fp
 8000e2c:	dfc00117 	ldw	ra,4(sp)
 8000e30:	df000017 	ldw	fp,0(sp)
 8000e34:	dec00204 	addi	sp,sp,8
 8000e38:	f800283a 	ret

08000e3c <ProvisioningLEDCommand>:


int ProvisioningLEDCommand(int index, int bufflen)
{
 8000e3c:	defffc04 	addi	sp,sp,-16
 8000e40:	dfc00315 	stw	ra,12(sp)
 8000e44:	df000215 	stw	fp,8(sp)
 8000e48:	df000204 	addi	fp,sp,8
 8000e4c:	e13fff15 	stw	r4,-4(fp)
 8000e50:	e17ffe15 	stw	r5,-8(fp)
	if (buffer[0] == 'Y')	// Turn on LED0 - 3
 8000e54:	00820174 	movhi	r2,2053
 8000e58:	109ac603 	ldbu	r2,27416(r2)
 8000e5c:	10803fcc 	andi	r2,r2,255
 8000e60:	10801658 	cmpnei	r2,r2,89
 8000e64:	10003a1e 	bne	r2,zero,8000f50 <ProvisioningLEDCommand+0x114>
	{
		if (buffer[1] == '0')
 8000e68:	00820174 	movhi	r2,2053
 8000e6c:	109ac643 	ldbu	r2,27417(r2)
 8000e70:	10803fcc 	andi	r2,r2,255
 8000e74:	10800c18 	cmpnei	r2,r2,48
 8000e78:	1000091e 	bne	r2,zero,8000ea0 <ProvisioningLEDCommand+0x64>
		{
			LEDCommand = 0x01;
 8000e7c:	00800044 	movi	r2,1
 8000e80:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000e84:	d0a05817 	ldw	r2,-32416(gp)
 8000e88:	d0e05417 	ldw	r3,-32432(gp)
 8000e8c:	180b883a 	mov	r5,r3
 8000e90:	1009883a 	mov	r4,r2
 8000e94:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000e98:	0005883a 	mov	r2,zero
 8000e9c:	00006c06 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '1')
 8000ea0:	00820174 	movhi	r2,2053
 8000ea4:	109ac643 	ldbu	r2,27417(r2)
 8000ea8:	10803fcc 	andi	r2,r2,255
 8000eac:	10800c58 	cmpnei	r2,r2,49
 8000eb0:	1000091e 	bne	r2,zero,8000ed8 <ProvisioningLEDCommand+0x9c>
		{
			LEDCommand = 0x02;
 8000eb4:	00800084 	movi	r2,2
 8000eb8:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000ebc:	d0a05817 	ldw	r2,-32416(gp)
 8000ec0:	d0e05417 	ldw	r3,-32432(gp)
 8000ec4:	180b883a 	mov	r5,r3
 8000ec8:	1009883a 	mov	r4,r2
 8000ecc:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000ed0:	0005883a 	mov	r2,zero
 8000ed4:	00005e06 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '2')
 8000ed8:	00820174 	movhi	r2,2053
 8000edc:	109ac643 	ldbu	r2,27417(r2)
 8000ee0:	10803fcc 	andi	r2,r2,255
 8000ee4:	10800c98 	cmpnei	r2,r2,50
 8000ee8:	1000091e 	bne	r2,zero,8000f10 <ProvisioningLEDCommand+0xd4>
		{
			LEDCommand = 0x04;
 8000eec:	00800104 	movi	r2,4
 8000ef0:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000ef4:	d0a05817 	ldw	r2,-32416(gp)
 8000ef8:	d0e05417 	ldw	r3,-32432(gp)
 8000efc:	180b883a 	mov	r5,r3
 8000f00:	1009883a 	mov	r4,r2
 8000f04:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000f08:	0005883a 	mov	r2,zero
 8000f0c:	00005006 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '3')
 8000f10:	00820174 	movhi	r2,2053
 8000f14:	109ac643 	ldbu	r2,27417(r2)
 8000f18:	10803fcc 	andi	r2,r2,255
 8000f1c:	10800cd8 	cmpnei	r2,r2,51
 8000f20:	1000091e 	bne	r2,zero,8000f48 <ProvisioningLEDCommand+0x10c>
		{
			LEDCommand = 0x08;
 8000f24:	00800204 	movi	r2,8
 8000f28:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000f2c:	d0a05817 	ldw	r2,-32416(gp)
 8000f30:	d0e05417 	ldw	r3,-32432(gp)
 8000f34:	180b883a 	mov	r5,r3
 8000f38:	1009883a 	mov	r4,r2
 8000f3c:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000f40:	0005883a 	mov	r2,zero
 8000f44:	00004206 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		return -1;	// unknown LED number
 8000f48:	00bfffc4 	movi	r2,-1
 8000f4c:	00004006 	br	8001050 <ProvisioningLEDCommand+0x214>
	}

	if (buffer[0] == 'X')	// Turn off LED0 - 3
 8000f50:	00820174 	movhi	r2,2053
 8000f54:	109ac603 	ldbu	r2,27416(r2)
 8000f58:	10803fcc 	andi	r2,r2,255
 8000f5c:	10801618 	cmpnei	r2,r2,88
 8000f60:	10003a1e 	bne	r2,zero,800104c <ProvisioningLEDCommand+0x210>
	{
		if (buffer[1] == '0')
 8000f64:	00820174 	movhi	r2,2053
 8000f68:	109ac643 	ldbu	r2,27417(r2)
 8000f6c:	10803fcc 	andi	r2,r2,255
 8000f70:	10800c18 	cmpnei	r2,r2,48
 8000f74:	1000091e 	bne	r2,zero,8000f9c <ProvisioningLEDCommand+0x160>
		{
			LEDCommand = 0x10;
 8000f78:	00800404 	movi	r2,16
 8000f7c:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000f80:	d0a05817 	ldw	r2,-32416(gp)
 8000f84:	d0e05417 	ldw	r3,-32432(gp)
 8000f88:	180b883a 	mov	r5,r3
 8000f8c:	1009883a 	mov	r4,r2
 8000f90:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000f94:	0005883a 	mov	r2,zero
 8000f98:	00002d06 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '1')
 8000f9c:	00820174 	movhi	r2,2053
 8000fa0:	109ac643 	ldbu	r2,27417(r2)
 8000fa4:	10803fcc 	andi	r2,r2,255
 8000fa8:	10800c58 	cmpnei	r2,r2,49
 8000fac:	1000091e 	bne	r2,zero,8000fd4 <ProvisioningLEDCommand+0x198>
		{
			LEDCommand = 0x20;
 8000fb0:	00800804 	movi	r2,32
 8000fb4:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000fb8:	d0a05817 	ldw	r2,-32416(gp)
 8000fbc:	d0e05417 	ldw	r3,-32432(gp)
 8000fc0:	180b883a 	mov	r5,r3
 8000fc4:	1009883a 	mov	r4,r2
 8000fc8:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8000fcc:	0005883a 	mov	r2,zero
 8000fd0:	00001f06 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '2')
 8000fd4:	00820174 	movhi	r2,2053
 8000fd8:	109ac643 	ldbu	r2,27417(r2)
 8000fdc:	10803fcc 	andi	r2,r2,255
 8000fe0:	10800c98 	cmpnei	r2,r2,50
 8000fe4:	1000091e 	bne	r2,zero,800100c <ProvisioningLEDCommand+0x1d0>
		{
			LEDCommand = 0x40;
 8000fe8:	00801004 	movi	r2,64
 8000fec:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8000ff0:	d0a05817 	ldw	r2,-32416(gp)
 8000ff4:	d0e05417 	ldw	r3,-32432(gp)
 8000ff8:	180b883a 	mov	r5,r3
 8000ffc:	1009883a 	mov	r4,r2
 8001000:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 8001004:	0005883a 	mov	r2,zero
 8001008:	00001106 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		if (buffer[1] == '3')
 800100c:	00820174 	movhi	r2,2053
 8001010:	109ac643 	ldbu	r2,27417(r2)
 8001014:	10803fcc 	andi	r2,r2,255
 8001018:	10800cd8 	cmpnei	r2,r2,51
 800101c:	1000091e 	bne	r2,zero,8001044 <ProvisioningLEDCommand+0x208>
		{
			LEDCommand = 0x80;
 8001020:	00802004 	movi	r2,128
 8001024:	d0a05415 	stw	r2,-32432(gp)
			OSQPost(SSSLEDCommandQ, (void *) LEDCommand);
 8001028:	d0a05817 	ldw	r2,-32416(gp)
 800102c:	d0e05417 	ldw	r3,-32432(gp)
 8001030:	180b883a 	mov	r5,r3
 8001034:	1009883a 	mov	r4,r2
 8001038:	8015dd40 	call	8015dd4 <OSQPost>
			return 0;
 800103c:	0005883a 	mov	r2,zero
 8001040:	00000306 	br	8001050 <ProvisioningLEDCommand+0x214>
		}
		return -1;	// unknown LED number
 8001044:	00bfffc4 	movi	r2,-1
 8001048:	00000106 	br	8001050 <ProvisioningLEDCommand+0x214>
	}
	return -2;		// How did we get here?
 800104c:	00bfff84 	movi	r2,-2

};
 8001050:	e037883a 	mov	sp,fp
 8001054:	dfc00117 	ldw	ra,4(sp)
 8001058:	df000017 	ldw	fp,0(sp)
 800105c:	dec00204 	addi	sp,sp,8
 8001060:	f800283a 	ret

08001064 <ProvisioningModuleRegisterCommand>:

int ProvisioningModuleRegisterCommand(int index, int bufflen)
{
 8001064:	deffea04 	addi	sp,sp,-88
 8001068:	dfc01515 	stw	ra,84(sp)
 800106c:	df001415 	stw	fp,80(sp)
 8001070:	df001404 	addi	fp,sp,80
 8001074:	e13fed15 	stw	r4,-76(fp)
 8001078:	e17fec15 	stw	r5,-80(fp)
	// Note: buffer gets modified by strtok(), so don't further reuse it.
	//              Cmd  Slot# Intfc#  Addr   Data
	// Module Read:  MR 0xssss 0xiiii 0xaaaa
	// Module Write: MW 0xssss 0xiiii 0xaaaa 0xZZZZ

	char * cmd = strtok((char *)buffer, " ");
 800107c:	01420174 	movhi	r5,2053
 8001080:	29782704 	addi	r5,r5,-8036
 8001084:	01020174 	movhi	r4,2053
 8001088:	211ac604 	addi	r4,r4,27416
 800108c:	8003ab40 	call	8003ab4 <strtok>
 8001090:	e0bffd15 	stw	r2,-12(fp)
	char * module = strtok(NULL, " ");
 8001094:	01420174 	movhi	r5,2053
 8001098:	29782704 	addi	r5,r5,-8036
 800109c:	0009883a 	mov	r4,zero
 80010a0:	8003ab40 	call	8003ab4 <strtok>
 80010a4:	e0bffc15 	stw	r2,-16(fp)
	char * slot = strtok(NULL, " ");
 80010a8:	01420174 	movhi	r5,2053
 80010ac:	29782704 	addi	r5,r5,-8036
 80010b0:	0009883a 	mov	r4,zero
 80010b4:	8003ab40 	call	8003ab4 <strtok>
 80010b8:	e0bffb15 	stw	r2,-20(fp)
	char * regaddr = strtok(NULL, " ");
 80010bc:	01420174 	movhi	r5,2053
 80010c0:	29782704 	addi	r5,r5,-8036
 80010c4:	0009883a 	mov	r4,zero
 80010c8:	8003ab40 	call	8003ab4 <strtok>
 80010cc:	e0bffa15 	stw	r2,-24(fp)
	char * regdata = strtok(NULL, " ");
 80010d0:	01420174 	movhi	r5,2053
 80010d4:	29782704 	addi	r5,r5,-8036
 80010d8:	0009883a 	mov	r4,zero
 80010dc:	8003ab40 	call	8003ab4 <strtok>
 80010e0:	e0bff915 	stw	r2,-28(fp)

	int moduleint, slotint, regaddrint, regdataint;

	char * ptr;		// dummy used to make strtoul work

	moduleint = strtoul(module, &ptr, 0);
 80010e4:	e0bfef04 	addi	r2,fp,-68
 80010e8:	000d883a 	mov	r6,zero
 80010ec:	100b883a 	mov	r5,r2
 80010f0:	e13ffc17 	ldw	r4,-16(fp)
 80010f4:	8003ddc0 	call	8003ddc <strtoul>
 80010f8:	e0bff815 	stw	r2,-32(fp)
	slotint = strtoul(slot, &ptr, 0);
 80010fc:	e0bfef04 	addi	r2,fp,-68
 8001100:	000d883a 	mov	r6,zero
 8001104:	100b883a 	mov	r5,r2
 8001108:	e13ffb17 	ldw	r4,-20(fp)
 800110c:	8003ddc0 	call	8003ddc <strtoul>
 8001110:	e0bff715 	stw	r2,-36(fp)
	regaddrint = strtoul(regaddr, &ptr, 0);
 8001114:	e0bfef04 	addi	r2,fp,-68
 8001118:	000d883a 	mov	r6,zero
 800111c:	100b883a 	mov	r5,r2
 8001120:	e13ffa17 	ldw	r4,-24(fp)
 8001124:	8003ddc0 	call	8003ddc <strtoul>
 8001128:	e0bff615 	stw	r2,-40(fp)
	if (regdata != NULL)
 800112c:	e0bff917 	ldw	r2,-28(fp)
 8001130:	10000726 	beq	r2,zero,8001150 <ProvisioningModuleRegisterCommand+0xec>
		regdataint = strtoul(regdata, &ptr, 0);
 8001134:	e0bfef04 	addi	r2,fp,-68
 8001138:	000d883a 	mov	r6,zero
 800113c:	100b883a 	mov	r5,r2
 8001140:	e13ff917 	ldw	r4,-28(fp)
 8001144:	8003ddc0 	call	8003ddc <strtoul>
 8001148:	e0bfff15 	stw	r2,-4(fp)
 800114c:	00000106 	br	8001154 <ProvisioningModuleRegisterCommand+0xf0>
	else
		regdataint = 0;
 8001150:	e03fff15 	stw	zero,-4(fp)



	int itfcindex = FindItfcIndex(moduleint, slotint);	// Find index of requested interface
 8001154:	e17ff717 	ldw	r5,-36(fp)
 8001158:	e13ff817 	ldw	r4,-32(fp)
 800115c:	80017680 	call	8001768 <FindItfcIndex>
 8001160:	e0bff515 	stw	r2,-44(fp)

	if (itfcindex == -1)	// Not found
 8001164:	e0bff517 	ldw	r2,-44(fp)
 8001168:	10bfffd8 	cmpnei	r2,r2,-1
 800116c:	1000021e 	bne	r2,zero,8001178 <ProvisioningModuleRegisterCommand+0x114>
		return -1;		// Unknown Module / Slot combination
 8001170:	00bfffc4 	movi	r2,-1
 8001174:	0000b306 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>


	// Module Read command
	// Reply with either NAK or AK and RR 0xssss 0xiiii 0xaaaa 0xZZ   (ZZ = data read)
	if (cmd[1] == 'R')
 8001178:	e0bffd17 	ldw	r2,-12(fp)
 800117c:	10800044 	addi	r2,r2,1
 8001180:	10800003 	ldbu	r2,0(r2)
 8001184:	10803fcc 	andi	r2,r2,255
 8001188:	1080201c 	xori	r2,r2,128
 800118c:	10bfe004 	addi	r2,r2,-128
 8001190:	10801498 	cmpnei	r2,r2,82
 8001194:	10003c1e 	bne	r2,zero,8001288 <ProvisioningModuleRegisterCommand+0x224>
		// It requires a special wake-up sequence from power-down.
		// It needs a 100 Khz speed to wake up.
		//


		if (ItfcTable[itfcindex].IFtype == 'I')	// I2C
 8001198:	e0bff517 	ldw	r2,-44(fp)
 800119c:	10c00a24 	muli	r3,r2,40
 80011a0:	00820174 	movhi	r2,2053
 80011a4:	1885883a 	add	r2,r3,r2
 80011a8:	109c4703 	ldbu	r2,28956(r2)
 80011ac:	10803fcc 	andi	r2,r2,255
 80011b0:	1080201c 	xori	r2,r2,128
 80011b4:	10bfe004 	addi	r2,r2,-128
 80011b8:	10801258 	cmpnei	r2,r2,73
 80011bc:	1000321e 	bne	r2,zero,8001288 <ProvisioningModuleRegisterCommand+0x224>
		{
			ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
			ALT_AVALON_I2C_STATUS_CODE status;

			i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 80011c0:	e0bff517 	ldw	r2,-44(fp)
 80011c4:	10800a24 	muli	r2,r2,40
 80011c8:	10c00304 	addi	r3,r2,12
 80011cc:	00820174 	movhi	r2,2053
 80011d0:	109c3e04 	addi	r2,r2,28920
 80011d4:	1885883a 	add	r2,r3,r2
 80011d8:	1009883a 	mov	r4,r2
 80011dc:	801922c0 	call	801922c <alt_avalon_i2c_open>
 80011e0:	e0bff415 	stw	r2,-48(fp)

			if (NULL==i2c_dev)
 80011e4:	e0bff417 	ldw	r2,-48(fp)
 80011e8:	10000c1e 	bne	r2,zero,800121c <ProvisioningModuleRegisterCommand+0x1b8>
			{
				printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 80011ec:	e0bff517 	ldw	r2,-44(fp)
 80011f0:	10800a24 	muli	r2,r2,40
 80011f4:	10c00304 	addi	r3,r2,12
 80011f8:	00820174 	movhi	r2,2053
 80011fc:	109c3e04 	addi	r2,r2,28920
 8001200:	1885883a 	add	r2,r3,r2
 8001204:	100b883a 	mov	r5,r2
 8001208:	01020174 	movhi	r4,2053
 800120c:	21382804 	addi	r4,r4,-8032
 8001210:	800325c0 	call	800325c <printf>
				return -1;
 8001214:	00bfffc4 	movi	r2,-1
 8001218:	00008a06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
			}

			if (ItfcTable[itfcindex].devtype == 1)		// ID_EPROM
 800121c:	e0bff517 	ldw	r2,-44(fp)
 8001220:	10c00a24 	muli	r3,r2,40
 8001224:	00820174 	movhi	r2,2053
 8001228:	1885883a 	add	r2,r3,r2
 800122c:	109c478b 	ldhu	r2,28958(r2)
 8001230:	10bfffcc 	andi	r2,r2,65535
 8001234:	10800058 	cmpnei	r2,r2,1
 8001238:	1000071e 	bne	r2,zero,8001258 <ProvisioningModuleRegisterCommand+0x1f4>
			{


				//set the slave address of the ID_EPROM device
				unsigned long slave_addr = 0x51;
 800123c:	00801444 	movi	r2,81
 8001240:	e0bff315 	stw	r2,-52(fp)
				alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 8001244:	e17ff317 	ldw	r5,-52(fp)
 8001248:	e13ff417 	ldw	r4,-48(fp)
 800124c:	8019a080 	call	8019a08 <alt_avalon_i2c_master_target_set>
				// via 32-bit reads ???

				// Can we send back a string or just a sequence of bytes?


				return 0;		// OK
 8001250:	0005883a 	mov	r2,zero
 8001254:	00007b06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>

			};

			if (ItfcTable[itfcindex].devtype == 2)		// 2 -> TI PCF8574 I/O latch
 8001258:	e0bff517 	ldw	r2,-44(fp)
 800125c:	10c00a24 	muli	r3,r2,40
 8001260:	00820174 	movhi	r2,2053
 8001264:	1885883a 	add	r2,r3,r2
 8001268:	109c478b 	ldhu	r2,28958(r2)
 800126c:	10bfffcc 	andi	r2,r2,65535
 8001270:	10800098 	cmpnei	r2,r2,2
 8001274:	1000021e 	bne	r2,zero,8001280 <ProvisioningModuleRegisterCommand+0x21c>
			{
				// null since we don't read this register on the receiver
				return 0;		// OK
 8001278:	0005883a 	mov	r2,zero
 800127c:	00007106 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
			status = alt_avalon_i2c_master_rx(i2c_dev, rxbuffer, 0x1, ALT_AVALON_I2C_NO_INTERRUPTS);

			if (status!=ALT_AVALON_I2C_SUCCESS)
				return -1; //FAIL
*/
			return -1;  // Got some unknown device type to read
 8001280:	00bfffc4 	movi	r2,-1
 8001284:	00006f06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
		}
	}

	// Module Write command
	// Reply with either NAK or AK
	if (cmd[1] == 'W')
 8001288:	e0bffd17 	ldw	r2,-12(fp)
 800128c:	10800044 	addi	r2,r2,1
 8001290:	10800003 	ldbu	r2,0(r2)
 8001294:	10803fcc 	andi	r2,r2,255
 8001298:	1080201c 	xori	r2,r2,128
 800129c:	10bfe004 	addi	r2,r2,-128
 80012a0:	108015d8 	cmpnei	r2,r2,87
 80012a4:	1000661e 	bne	r2,zero,8001440 <ProvisioningModuleRegisterCommand+0x3dc>
	{
		ALT_AVALON_I2C_DEV_t *i2c_dev; 		//pointer to instance structure
		ALT_AVALON_I2C_STATUS_CODE status;

		i2c_dev = alt_avalon_i2c_open(ItfcTable[itfcindex].name);
 80012a8:	e0bff517 	ldw	r2,-44(fp)
 80012ac:	10800a24 	muli	r2,r2,40
 80012b0:	10c00304 	addi	r3,r2,12
 80012b4:	00820174 	movhi	r2,2053
 80012b8:	109c3e04 	addi	r2,r2,28920
 80012bc:	1885883a 	add	r2,r3,r2
 80012c0:	1009883a 	mov	r4,r2
 80012c4:	801922c0 	call	801922c <alt_avalon_i2c_open>
 80012c8:	e0bff215 	stw	r2,-56(fp)

		if (NULL==i2c_dev)
 80012cc:	e0bff217 	ldw	r2,-56(fp)
 80012d0:	10000c1e 	bne	r2,zero,8001304 <ProvisioningModuleRegisterCommand+0x2a0>
		{
			printf("Device Error: Cannot find: %s\n", ItfcTable[itfcindex].name);
 80012d4:	e0bff517 	ldw	r2,-44(fp)
 80012d8:	10800a24 	muli	r2,r2,40
 80012dc:	10c00304 	addi	r3,r2,12
 80012e0:	00820174 	movhi	r2,2053
 80012e4:	109c3e04 	addi	r2,r2,28920
 80012e8:	1885883a 	add	r2,r3,r2
 80012ec:	100b883a 	mov	r5,r2
 80012f0:	01020174 	movhi	r4,2053
 80012f4:	21382804 	addi	r4,r4,-8032
 80012f8:	800325c0 	call	800325c <printf>
			return -1;
 80012fc:	00bfffc4 	movi	r2,-1
 8001300:	00005006 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
		}


		if (ItfcTable[itfcindex].IFtype == 'I')	// I2C
 8001304:	e0bff517 	ldw	r2,-44(fp)
 8001308:	10c00a24 	muli	r3,r2,40
 800130c:	00820174 	movhi	r2,2053
 8001310:	1885883a 	add	r2,r3,r2
 8001314:	109c4703 	ldbu	r2,28956(r2)
 8001318:	10803fcc 	andi	r2,r2,255
 800131c:	1080201c 	xori	r2,r2,128
 8001320:	10bfe004 	addi	r2,r2,-128
 8001324:	10801258 	cmpnei	r2,r2,73
 8001328:	1000391e 	bne	r2,zero,8001410 <ProvisioningModuleRegisterCommand+0x3ac>
		{

			if (ItfcTable[itfcindex].devtype == 1)		// ID_EPROM
 800132c:	e0bff517 	ldw	r2,-44(fp)
 8001330:	10c00a24 	muli	r3,r2,40
 8001334:	00820174 	movhi	r2,2053
 8001338:	1885883a 	add	r2,r3,r2
 800133c:	109c478b 	ldhu	r2,28958(r2)
 8001340:	10bfffcc 	andi	r2,r2,65535
 8001344:	10800058 	cmpnei	r2,r2,1
 8001348:	1000021e 	bne	r2,zero,8001354 <ProvisioningModuleRegisterCommand+0x2f0>
			{
				// right now null since we don't write this device on receiver or clock
				return 0;		// OK
 800134c:	0005883a 	mov	r2,zero
 8001350:	00003c06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>

			};


			if (ItfcTable[itfcindex].devtype == 2)		// 2 -> TI PCF8574 I/O latch write
 8001354:	e0bff517 	ldw	r2,-44(fp)
 8001358:	10c00a24 	muli	r3,r2,40
 800135c:	00820174 	movhi	r2,2053
 8001360:	1885883a 	add	r2,r3,r2
 8001364:	109c478b 	ldhu	r2,28958(r2)
 8001368:	10bfffcc 	andi	r2,r2,65535
 800136c:	10800098 	cmpnei	r2,r2,2
 8001370:	1000271e 	bne	r2,zero,8001410 <ProvisioningModuleRegisterCommand+0x3ac>
			{
				// regdataint is an integer of the data to write

				alt_u8 txdata = (alt_u8)regdataint;
 8001374:	e0bfff17 	ldw	r2,-4(fp)
 8001378:	e0bfeec5 	stb	r2,-69(fp)
				alt_u32 count = 0x01;				// num bytes to send
 800137c:	00800044 	movi	r2,1
 8001380:	e0bff115 	stw	r2,-60(fp)
				// Bit7 = Red LED   		Bit6 = Green LED  		Bit5 = Ch2 20dB Atten  	Bit4 = Ch2 10 dB Atten
				// Bit3 = Ch2 Noise Enable 	Bit2 = Ch1 20 dB Atten  Bit1 = Ch1 10 dB Atten  Bit0 = Ch1 Noise Enable

				//set the slave address
//				alt_u32 slave_addr_write = 0x70;  // PCF8574 Write address (0x71 is the corresponding read addr)
				alt_u32 slave_addr = 0x38;  	  // PCF8574 address - the i2c driver left shifts then appends 0 for
 8001384:	00800e04 	movi	r2,56
 8001388:	e0bff015 	stw	r2,-64(fp)
												  // write or 1 for read translating this to 0x70 for write, 0x71 for read

				alt_avalon_i2c_master_target_set(i2c_dev, slave_addr);
 800138c:	e17ff017 	ldw	r5,-64(fp)
 8001390:	e13ff217 	ldw	r4,-56(fp)
 8001394:	8019a080 	call	8019a08 <alt_avalon_i2c_master_target_set>

				status = alt_avalon_i2c_master_tx(i2c_dev, &txdata, count, ALT_AVALON_I2C_NO_INTERRUPTS);
 8001398:	e0bfeec4 	addi	r2,fp,-69
 800139c:	000f883a 	mov	r7,zero
 80013a0:	e1bff117 	ldw	r6,-60(fp)
 80013a4:	100b883a 	mov	r5,r2
 80013a8:	e13ff217 	ldw	r4,-56(fp)
 80013ac:	8019c080 	call	8019c08 <alt_avalon_i2c_master_tx>
 80013b0:	e0bffe15 	stw	r2,-8(fp)

				if (status == ALT_AVALON_I2C_NACK_ERR)		// retry the write
 80013b4:	e0bffe17 	ldw	r2,-8(fp)
 80013b8:	10bffed8 	cmpnei	r2,r2,-5
 80013bc:	10000a1e 	bne	r2,zero,80013e8 <ProvisioningModuleRegisterCommand+0x384>
				{
					printf("Received NACK error from I2C device. Retry once\n");
 80013c0:	01020174 	movhi	r4,2053
 80013c4:	21383004 	addi	r4,r4,-8000
 80013c8:	80033800 	call	8003380 <puts>
					status = alt_avalon_i2c_master_tx(i2c_dev, &txdata, count, ALT_AVALON_I2C_NO_INTERRUPTS);
 80013cc:	e0bfeec4 	addi	r2,fp,-69
 80013d0:	000f883a 	mov	r7,zero
 80013d4:	e1bff117 	ldw	r6,-60(fp)
 80013d8:	100b883a 	mov	r5,r2
 80013dc:	e13ff217 	ldw	r4,-56(fp)
 80013e0:	8019c080 	call	8019c08 <alt_avalon_i2c_master_tx>
 80013e4:	e0bffe15 	stw	r2,-8(fp)
				}


				if (status != ALT_AVALON_I2C_SUCCESS)
 80013e8:	e0bffe17 	ldw	r2,-8(fp)
 80013ec:	10000626 	beq	r2,zero,8001408 <ProvisioningModuleRegisterCommand+0x3a4>
				{
					printf("i2c_master_tx: error = %ld\n", status);
 80013f0:	e17ffe17 	ldw	r5,-8(fp)
 80013f4:	01020174 	movhi	r4,2053
 80013f8:	21383c04 	addi	r4,r4,-7952
 80013fc:	800325c0 	call	800325c <printf>
					return -1; //FAIL
 8001400:	00bfffc4 	movi	r2,-1
 8001404:	00000f06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
				}

				return 0;		// OK
 8001408:	0005883a 	mov	r2,zero
 800140c:	00000d06 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>

			};

		}
		if (ItfcTable[itfcindex].IFtype == 'S')	// SPI
 8001410:	e0bff517 	ldw	r2,-44(fp)
 8001414:	10c00a24 	muli	r3,r2,40
 8001418:	00820174 	movhi	r2,2053
 800141c:	1885883a 	add	r2,r3,r2
 8001420:	109c4703 	ldbu	r2,28956(r2)
 8001424:	10803fcc 	andi	r2,r2,255
 8001428:	1080201c 	xori	r2,r2,128
 800142c:	10bfe004 	addi	r2,r2,-128
 8001430:	108014d8 	cmpnei	r2,r2,83
 8001434:	1000021e 	bne	r2,zero,8001440 <ProvisioningModuleRegisterCommand+0x3dc>
		{
			return -1;	// CHANGE THIS once SPI is implemented
 8001438:	00bfffc4 	movi	r2,-1
 800143c:	00000106 	br	8001444 <ProvisioningModuleRegisterCommand+0x3e0>
		}
	}

	// Unknown module register sub-command
//	sendto(Connections[index].fd, (void *)"NAK\n", 4, 0, (struct sockaddr *) &Connections[index].client_ip, sizeof(struct sockaddr_in));
	return -2;
 8001440:	00bfff84 	movi	r2,-2
};
 8001444:	e037883a 	mov	sp,fp
 8001448:	dfc00117 	ldw	ra,4(sp)
 800144c:	df000017 	ldw	fp,0(sp)
 8001450:	dec00204 	addi	sp,sp,8
 8001454:	f800283a 	ret

08001458 <initItfcMap>:
 * 4 =
 */

// Initialize the Interface Map Table.
void initItfcMap()
{
 8001458:	deffff04 	addi	sp,sp,-4
 800145c:	df000015 	stw	fp,0(sp)
 8001460:	d839883a 	mov	fp,sp
	ItfcTable[0].module = 0;	// CKM_C0
 8001464:	00820174 	movhi	r2,2053
 8001468:	101c3e15 	stw	zero,28920(r2)
	ItfcTable[0].slot = 0;
 800146c:	00820174 	movhi	r2,2053
 8001470:	101c3f15 	stw	zero,28924(r2)
	ItfcTable[0].base = I2C_CKM_C0_BASE;
 8001474:	00860034 	movhi	r2,6144
 8001478:	108f6004 	addi	r2,r2,15744
 800147c:	00c20174 	movhi	r3,2053
 8001480:	189c4015 	stw	r2,28928(r3)
	strcpy(&ItfcTable[0].name[0], I2C_CKM_C0_NAME);
 8001484:	009d9974 	movhi	r2,30309
 8001488:	10990bc4 	addi	r2,r2,25647
 800148c:	00c20174 	movhi	r3,2053
 8001490:	189c4115 	stw	r2,28932(r3)
 8001494:	0098ccb4 	movhi	r2,25394
 8001498:	109a4bc4 	addi	r2,r2,26927
 800149c:	00c20174 	movhi	r3,2053
 80014a0:	189c4215 	stw	r2,28936(r3)
 80014a4:	009b5af4 	movhi	r2,28011
 80014a8:	1098d7c4 	addi	r2,r2,25439
 80014ac:	00c20174 	movhi	r3,2053
 80014b0:	189c4315 	stw	r2,28940(r3)
 80014b4:	00800c34 	movhi	r2,48
 80014b8:	1098d7c4 	addi	r2,r2,25439
 80014bc:	00c20174 	movhi	r3,2053
 80014c0:	189c4415 	stw	r2,28944(r3)
	ItfcTable[0].IFtype = 'I';
 80014c4:	00c01244 	movi	r3,73
 80014c8:	00820174 	movhi	r2,2053
 80014cc:	10dc4705 	stb	r3,28956(r2)
	ItfcTable[0].devtype = 2;
 80014d0:	00c00084 	movi	r3,2
 80014d4:	00820174 	movhi	r2,2053
 80014d8:	10dc478d 	sth	r3,28958(r2)

	ItfcTable[1].module = 0;	// CKM_C1
 80014dc:	00820174 	movhi	r2,2053
 80014e0:	101c4815 	stw	zero,28960(r2)
	ItfcTable[1].slot = 1;
 80014e4:	00c00044 	movi	r3,1
 80014e8:	00820174 	movhi	r2,2053
 80014ec:	10dc4915 	stw	r3,28964(r2)
	ItfcTable[1].base = I2C_CKM_C1_BASE;
 80014f0:	00860034 	movhi	r2,6144
 80014f4:	108f5004 	addi	r2,r2,15680
 80014f8:	00c20174 	movhi	r3,2053
 80014fc:	189c4a15 	stw	r2,28968(r3)
	strcpy(&ItfcTable[1].name[0], I2C_CKM_C1_NAME);
 8001500:	009d9974 	movhi	r2,30309
 8001504:	10990bc4 	addi	r2,r2,25647
 8001508:	00c20174 	movhi	r3,2053
 800150c:	189c4b15 	stw	r2,28972(r3)
 8001510:	0098ccb4 	movhi	r2,25394
 8001514:	109a4bc4 	addi	r2,r2,26927
 8001518:	00c20174 	movhi	r3,2053
 800151c:	189c4c15 	stw	r2,28976(r3)
 8001520:	009b5af4 	movhi	r2,28011
 8001524:	1098d7c4 	addi	r2,r2,25439
 8001528:	00c20174 	movhi	r3,2053
 800152c:	189c4d15 	stw	r2,28980(r3)
 8001530:	00800c74 	movhi	r2,49
 8001534:	1098d7c4 	addi	r2,r2,25439
 8001538:	00c20174 	movhi	r3,2053
 800153c:	189c4e15 	stw	r2,28984(r3)
	ItfcTable[1].IFtype = 'I';
 8001540:	00c01244 	movi	r3,73
 8001544:	00820174 	movhi	r2,2053
 8001548:	10dc5105 	stb	r3,28996(r2)
	ItfcTable[1].devtype = 2;
 800154c:	00c00084 	movi	r3,2
 8001550:	00820174 	movhi	r2,2053
 8001554:	10dc518d 	sth	r3,28998(r2)

	ItfcTable[2].module = 0;	// CKM_ID
 8001558:	00820174 	movhi	r2,2053
 800155c:	101c5215 	stw	zero,29000(r2)
	ItfcTable[2].slot = 2;
 8001560:	00c00084 	movi	r3,2
 8001564:	00820174 	movhi	r2,2053
 8001568:	10dc5315 	stw	r3,29004(r2)
	ItfcTable[2].base = I2C_CKM_ID_BASE;
 800156c:	00860034 	movhi	r2,6144
 8001570:	108f7004 	addi	r2,r2,15808
 8001574:	00c20174 	movhi	r3,2053
 8001578:	189c5415 	stw	r2,29008(r3)
	strcpy(&ItfcTable[2].name[0], I2C_CKM_ID_NAME);
 800157c:	009d9974 	movhi	r2,30309
 8001580:	10990bc4 	addi	r2,r2,25647
 8001584:	00c20174 	movhi	r3,2053
 8001588:	189c5515 	stw	r2,29012(r3)
 800158c:	0098ccb4 	movhi	r2,25394
 8001590:	109a4bc4 	addi	r2,r2,26927
 8001594:	00c20174 	movhi	r3,2053
 8001598:	189c5615 	stw	r2,29016(r3)
 800159c:	009b5af4 	movhi	r2,28011
 80015a0:	1098d7c4 	addi	r2,r2,25439
 80015a4:	00c20174 	movhi	r3,2053
 80015a8:	189c5715 	stw	r2,29020(r3)
 80015ac:	00801934 	movhi	r2,100
 80015b0:	109a57c4 	addi	r2,r2,26975
 80015b4:	00c20174 	movhi	r3,2053
 80015b8:	189c5815 	stw	r2,29024(r3)
	ItfcTable[2].IFtype = 'I';
 80015bc:	00c01244 	movi	r3,73
 80015c0:	00820174 	movhi	r2,2053
 80015c4:	10dc5b05 	stb	r3,29036(r2)
	ItfcTable[2].devtype = 1;
 80015c8:	00c00044 	movi	r3,1
 80015cc:	00820174 	movhi	r2,2053
 80015d0:	10dc5b8d 	sth	r3,29038(r2)

	ItfcTable[3].module = 1;	// RXM_CTRL
 80015d4:	00c00044 	movi	r3,1
 80015d8:	00820174 	movhi	r2,2053
 80015dc:	10dc5c15 	stw	r3,29040(r2)
	ItfcTable[3].slot = 0;
 80015e0:	00820174 	movhi	r2,2053
 80015e4:	101c5d15 	stw	zero,29044(r2)
	ItfcTable[3].base = I2C_RXM_CTRL_BASE;
 80015e8:	00860034 	movhi	r2,6144
 80015ec:	108f8004 	addi	r2,r2,15872
 80015f0:	00c20174 	movhi	r3,2053
 80015f4:	189c5e15 	stw	r2,29048(r3)
	strcpy(&ItfcTable[3].name[0], I2C_RXM_CTRL_NAME);
 80015f8:	009d9974 	movhi	r2,30309
 80015fc:	10990bc4 	addi	r2,r2,25647
 8001600:	00c20174 	movhi	r3,2053
 8001604:	189c5f15 	stw	r2,29052(r3)
 8001608:	0098ccb4 	movhi	r2,25394
 800160c:	109a4bc4 	addi	r2,r2,26927
 8001610:	00c20174 	movhi	r3,2053
 8001614:	189c6015 	stw	r2,29056(r3)
 8001618:	009b5e34 	movhi	r2,28024
 800161c:	109c97c4 	addi	r2,r2,29279
 8001620:	00c20174 	movhi	r3,2053
 8001624:	189c6115 	stw	r2,29060(r3)
 8001628:	009c9d34 	movhi	r2,29300
 800162c:	1098d7c4 	addi	r2,r2,25439
 8001630:	00c20174 	movhi	r3,2053
 8001634:	189c6215 	stw	r2,29064(r3)
 8001638:	00c01b04 	movi	r3,108
 800163c:	00820174 	movhi	r2,2053
 8001640:	10dc630d 	sth	r3,29068(r2)
	ItfcTable[3].IFtype = 'I';
 8001644:	00c01244 	movi	r3,73
 8001648:	00820174 	movhi	r2,2053
 800164c:	10dc6505 	stb	r3,29076(r2)
	ItfcTable[3].devtype = 2;
 8001650:	00c00084 	movi	r3,2
 8001654:	00820174 	movhi	r2,2053
 8001658:	10dc658d 	sth	r3,29078(r2)

	ItfcTable[4].module = 1;	// RXM_ID
 800165c:	00c00044 	movi	r3,1
 8001660:	00820174 	movhi	r2,2053
 8001664:	10dc6615 	stw	r3,29080(r2)
	ItfcTable[4].slot = 1;
 8001668:	00c00044 	movi	r3,1
 800166c:	00820174 	movhi	r2,2053
 8001670:	10dc6715 	stw	r3,29084(r2)
	ItfcTable[4].base = I2C_RXM_ID_BASE;
 8001674:	00860034 	movhi	r2,6144
 8001678:	108f9004 	addi	r2,r2,15936
 800167c:	00c20174 	movhi	r3,2053
 8001680:	189c6815 	stw	r2,29088(r3)
	strcpy(&ItfcTable[4].name[0], I2C_RXM_ID_NAME);
 8001684:	009d9974 	movhi	r2,30309
 8001688:	10990bc4 	addi	r2,r2,25647
 800168c:	00c20174 	movhi	r3,2053
 8001690:	189c6915 	stw	r2,29092(r3)
 8001694:	0098ccb4 	movhi	r2,25394
 8001698:	109a4bc4 	addi	r2,r2,26927
 800169c:	00c20174 	movhi	r3,2053
 80016a0:	189c6a15 	stw	r2,29096(r3)
 80016a4:	009b5e34 	movhi	r2,28024
 80016a8:	109c97c4 	addi	r2,r2,29279
 80016ac:	00c20174 	movhi	r3,2053
 80016b0:	189c6b15 	stw	r2,29100(r3)
 80016b4:	00801934 	movhi	r2,100
 80016b8:	109a57c4 	addi	r2,r2,26975
 80016bc:	00c20174 	movhi	r3,2053
 80016c0:	189c6c15 	stw	r2,29104(r3)
	ItfcTable[4].IFtype = 'I';
 80016c4:	00c01244 	movi	r3,73
 80016c8:	00820174 	movhi	r2,2053
 80016cc:	10dc6f05 	stb	r3,29116(r2)
	ItfcTable[4].devtype = 1;
 80016d0:	00c00044 	movi	r3,1
 80016d4:	00820174 	movhi	r2,2053
 80016d8:	10dc6f8d 	sth	r3,29118(r2)

	ItfcTable[5].module = 1;	// RXM_SPI_ADC
 80016dc:	00c00044 	movi	r3,1
 80016e0:	00820174 	movhi	r2,2053
 80016e4:	10dc7015 	stw	r3,29120(r2)
	ItfcTable[5].slot = 2;
 80016e8:	00c00084 	movi	r3,2
 80016ec:	00820174 	movhi	r2,2053
 80016f0:	10dc7115 	stw	r3,29124(r2)
	ItfcTable[5].base = SPI_RXM_BASE;
 80016f4:	00860034 	movhi	r2,6144
 80016f8:	108fb804 	addi	r2,r2,16096
 80016fc:	00c20174 	movhi	r3,2053
 8001700:	189c7215 	stw	r2,29128(r3)
	strcpy(&ItfcTable[5].name[0], SPI_RXM_NAME);
 8001704:	009d9974 	movhi	r2,30309
 8001708:	10990bc4 	addi	r2,r2,25647
 800170c:	00c20174 	movhi	r3,2053
 8001710:	189c7315 	stw	r2,29132(r3)
 8001714:	009a5c34 	movhi	r2,26992
 8001718:	109ccbc4 	addi	r2,r2,29487
 800171c:	00c20174 	movhi	r3,2053
 8001720:	189c7415 	stw	r2,29136(r3)
 8001724:	009b5e34 	movhi	r2,28024
 8001728:	109c97c4 	addi	r2,r2,29279
 800172c:	00c20174 	movhi	r3,2053
 8001730:	189c7515 	stw	r2,29140(r3)
 8001734:	00820174 	movhi	r2,2053
 8001738:	101c7605 	stb	zero,29144(r2)
	ItfcTable[5].IFtype = 'S';
 800173c:	00c014c4 	movi	r3,83
 8001740:	00820174 	movhi	r2,2053
 8001744:	10dc7905 	stb	r3,29156(r2)
	ItfcTable[5].devtype = 3;
 8001748:	00c000c4 	movi	r3,3
 800174c:	00820174 	movhi	r2,2053
 8001750:	10dc798d 	sth	r3,29158(r2)
};
 8001754:	0001883a 	nop
 8001758:	e037883a 	mov	sp,fp
 800175c:	df000017 	ldw	fp,0(sp)
 8001760:	dec00104 	addi	sp,sp,4
 8001764:	f800283a 	ret

08001768 <FindItfcIndex>:

// Find the index of the Module / Slot in the Interface Map table
int FindItfcIndex(int module, int slot)
{
 8001768:	defffc04 	addi	sp,sp,-16
 800176c:	df000315 	stw	fp,12(sp)
 8001770:	df000304 	addi	fp,sp,12
 8001774:	e13ffe15 	stw	r4,-8(fp)
 8001778:	e17ffd15 	stw	r5,-12(fp)
	for (int i=0; i< MAXITFC; i++)		if ((module == ItfcTable[i].module) && (slot == ItfcTable[i].slot))
 800177c:	e03fff15 	stw	zero,-4(fp)
 8001780:	00001306 	br	80017d0 <FindItfcIndex+0x68>
 8001784:	e0bfff17 	ldw	r2,-4(fp)
 8001788:	10c00a24 	muli	r3,r2,40
 800178c:	00820174 	movhi	r2,2053
 8001790:	1885883a 	add	r2,r3,r2
 8001794:	10dc3e17 	ldw	r3,28920(r2)
 8001798:	e0bffe17 	ldw	r2,-8(fp)
 800179c:	1880091e 	bne	r3,r2,80017c4 <FindItfcIndex+0x5c>
 80017a0:	e0bfff17 	ldw	r2,-4(fp)
 80017a4:	10c00a24 	muli	r3,r2,40
 80017a8:	00820174 	movhi	r2,2053
 80017ac:	1885883a 	add	r2,r3,r2
 80017b0:	10dc3f17 	ldw	r3,28924(r2)
 80017b4:	e0bffd17 	ldw	r2,-12(fp)
 80017b8:	1880021e 	bne	r3,r2,80017c4 <FindItfcIndex+0x5c>
			return i;
 80017bc:	e0bfff17 	ldw	r2,-4(fp)
 80017c0:	00000706 	br	80017e0 <FindItfcIndex+0x78>
	for (int i=0; i< MAXITFC; i++)		if ((module == ItfcTable[i].module) && (slot == ItfcTable[i].slot))
 80017c4:	e0bfff17 	ldw	r2,-4(fp)
 80017c8:	10800044 	addi	r2,r2,1
 80017cc:	e0bfff15 	stw	r2,-4(fp)
 80017d0:	e0bfff17 	ldw	r2,-4(fp)
 80017d4:	10800190 	cmplti	r2,r2,6
 80017d8:	103fea1e 	bne	r2,zero,8001784 <FindItfcIndex+0x1c>

	return -1;	// Didn't find it in the table
 80017dc:	00bfffc4 	movi	r2,-1
};
 80017e0:	e037883a 	mov	sp,fp
 80017e4:	df000017 	ldw	fp,0(sp)
 80017e8:	dec00104 	addi	sp,sp,4
 80017ec:	f800283a 	ret

080017f0 <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 80017f0:	defffb04 	addi	sp,sp,-20
 80017f4:	dfc00415 	stw	ra,16(sp)
 80017f8:	df000315 	stw	fp,12(sp)
 80017fc:	df000304 	addi	fp,sp,12
 8001800:	2005883a 	mov	r2,r4
 8001804:	e17ffd15 	stw	r5,-12(fp)
 8001808:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
 800180c:	e0bffe03 	ldbu	r2,-8(fp)
 8001810:	10019826 	beq	r2,zero,8001e74 <alt_uCOSIIErrorHandler+0x684>
   {
      return;
   }
   
   fault_level = SYSTEM;  
 8001814:	00800084 	movi	r2,2
 8001818:	e0bfff15 	stw	r2,-4(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 800181c:	8011cac0 	call	8011cac <OSSchedLock>
      
   switch (error_code)
 8001820:	e0bffe03 	ldbu	r2,-8(fp)
 8001824:	10c01948 	cmpgei	r3,r2,101
 8001828:	18006d1e 	bne	r3,zero,80019e0 <alt_uCOSIIErrorHandler+0x1f0>
 800182c:	0081120e 	bge	zero,r2,8001c78 <alt_uCOSIIErrorHandler+0x488>
 8001830:	10c01968 	cmpgeui	r3,r2,101
 8001834:	1801101e 	bne	r3,zero,8001c78 <alt_uCOSIIErrorHandler+0x488>
 8001838:	100690ba 	slli	r3,r2,2
 800183c:	00820034 	movhi	r2,2048
 8001840:	1885883a 	add	r2,r3,r2
 8001844:	10861317 	ldw	r2,6220(r2)
 8001848:	1000683a 	jmp	r2
 800184c:	08001c78 	rdprs	zero,at,113
 8001850:	08001ab8 	rdprs	zero,at,106
 8001854:	08001b5c 	xori	zero,at,109
 8001858:	08001b08 	cmpgei	zero,at,108
 800185c:	08001ae4 	muli	zero,at,107
 8001860:	08001c78 	rdprs	zero,at,113
 8001864:	08001c78 	rdprs	zero,at,113
 8001868:	08001c78 	rdprs	zero,at,113
 800186c:	08001c78 	rdprs	zero,at,113
 8001870:	08001c78 	rdprs	zero,at,113
 8001874:	08001b34 	orhi	zero,at,108
 8001878:	08001c78 	rdprs	zero,at,113
 800187c:	08001c78 	rdprs	zero,at,113
 8001880:	08001c78 	rdprs	zero,at,113
 8001884:	08001c78 	rdprs	zero,at,113
 8001888:	08001c78 	rdprs	zero,at,113
 800188c:	08001c78 	rdprs	zero,at,113
 8001890:	08001c78 	rdprs	zero,at,113
 8001894:	08001c78 	rdprs	zero,at,113
 8001898:	08001c78 	rdprs	zero,at,113
 800189c:	08001a90 	cmplti	zero,at,106
 80018a0:	08001c78 	rdprs	zero,at,113
 80018a4:	08001c78 	rdprs	zero,at,113
 80018a8:	08001c78 	rdprs	zero,at,113
 80018ac:	08001c78 	rdprs	zero,at,113
 80018b0:	08001c78 	rdprs	zero,at,113
 80018b4:	08001c78 	rdprs	zero,at,113
 80018b8:	08001c78 	rdprs	zero,at,113
 80018bc:	08001c78 	rdprs	zero,at,113
 80018c0:	08001c78 	rdprs	zero,at,113
 80018c4:	08001bf0 	cmpltui	zero,at,111
 80018c8:	08001c78 	rdprs	zero,at,113
 80018cc:	08001c78 	rdprs	zero,at,113
 80018d0:	08001c78 	rdprs	zero,at,113
 80018d4:	08001c78 	rdprs	zero,at,113
 80018d8:	08001c78 	rdprs	zero,at,113
 80018dc:	08001c78 	rdprs	zero,at,113
 80018e0:	08001c78 	rdprs	zero,at,113
 80018e4:	08001c78 	rdprs	zero,at,113
 80018e8:	08001c78 	rdprs	zero,at,113
 80018ec:	080019ec 	andhi	zero,at,103
 80018f0:	08001c78 	rdprs	zero,at,113
 80018f4:	08001a10 	cmplti	zero,at,104
 80018f8:	08001c78 	rdprs	zero,at,113
 80018fc:	08001c78 	rdprs	zero,at,113
 8001900:	08001c78 	rdprs	zero,at,113
 8001904:	08001c78 	rdprs	zero,at,113
 8001908:	08001c78 	rdprs	zero,at,113
 800190c:	08001c78 	rdprs	zero,at,113
 8001910:	08001c78 	rdprs	zero,at,113
 8001914:	08001c78 	rdprs	zero,at,113
 8001918:	08001c78 	rdprs	zero,at,113
 800191c:	08001c78 	rdprs	zero,at,113
 8001920:	08001c78 	rdprs	zero,at,113
 8001924:	08001c78 	rdprs	zero,at,113
 8001928:	08001c78 	rdprs	zero,at,113
 800192c:	08001c78 	rdprs	zero,at,113
 8001930:	08001c78 	rdprs	zero,at,113
 8001934:	08001c78 	rdprs	zero,at,113
 8001938:	08001c78 	rdprs	zero,at,113
 800193c:	08001c78 	rdprs	zero,at,113
 8001940:	08001ba4 	muli	zero,at,110
 8001944:	08001b80 	call	8001b8 <OSCtxSw_SWITCH_PC+0x800178>
 8001948:	08001c78 	rdprs	zero,at,113
 800194c:	08001bcc 	andi	zero,at,111
 8001950:	08001c78 	rdprs	zero,at,113
 8001954:	08001a50 	cmplti	zero,at,105
 8001958:	08001c78 	rdprs	zero,at,113
 800195c:	08001c78 	rdprs	zero,at,113
 8001960:	08001c78 	rdprs	zero,at,113
 8001964:	08001c78 	rdprs	zero,at,113
 8001968:	08001c78 	rdprs	zero,at,113
 800196c:	08001c78 	rdprs	zero,at,113
 8001970:	08001c78 	rdprs	zero,at,113
 8001974:	08001c78 	rdprs	zero,at,113
 8001978:	08001c78 	rdprs	zero,at,113
 800197c:	08001c78 	rdprs	zero,at,113
 8001980:	08001c78 	rdprs	zero,at,113
 8001984:	08001c78 	rdprs	zero,at,113
 8001988:	08001c78 	rdprs	zero,at,113
 800198c:	08001c78 	rdprs	zero,at,113
 8001990:	08001c78 	rdprs	zero,at,113
 8001994:	08001c78 	rdprs	zero,at,113
 8001998:	08001c78 	rdprs	zero,at,113
 800199c:	08001c78 	rdprs	zero,at,113
 80019a0:	08001c78 	rdprs	zero,at,113
 80019a4:	08001c78 	rdprs	zero,at,113
 80019a8:	08001c78 	rdprs	zero,at,113
 80019ac:	08001c78 	rdprs	zero,at,113
 80019b0:	08001c78 	rdprs	zero,at,113
 80019b4:	08001c78 	rdprs	zero,at,113
 80019b8:	08001c78 	rdprs	zero,at,113
 80019bc:	08001c78 	rdprs	zero,at,113
 80019c0:	08001c78 	rdprs	zero,at,113
 80019c4:	08001c78 	rdprs	zero,at,113
 80019c8:	08001c78 	rdprs	zero,at,113
 80019cc:	08001c78 	rdprs	zero,at,113
 80019d0:	08001c78 	rdprs	zero,at,113
 80019d4:	08001c78 	rdprs	zero,at,113
 80019d8:	08001c78 	rdprs	zero,at,113
 80019dc:	08001c18 	cmpnei	zero,at,112
 80019e0:	10803fe0 	cmpeqi	r2,r2,255
 80019e4:	1000971e 	bne	r2,zero,8001c44 <alt_uCOSIIErrorHandler+0x454>
 80019e8:	0000a306 	br	8001c78 <alt_uCOSIIErrorHandler+0x488>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
 80019ec:	d0a00117 	ldw	r2,-32764(gp)
 80019f0:	10800317 	ldw	r2,12(r2)
 80019f4:	100f883a 	mov	r7,r2
 80019f8:	01800c44 	movi	r6,49
 80019fc:	01400044 	movi	r5,1
 8001a00:	01020174 	movhi	r4,2053
 8001a04:	21384304 	addi	r4,r4,-7924
 8001a08:	8002de00 	call	8002de0 <fwrite>
         break;
 8001a0c:	0000b106 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
 8001a10:	d0a00117 	ldw	r2,-32764(gp)
 8001a14:	10800317 	ldw	r2,12(r2)
 8001a18:	100f883a 	mov	r7,r2
 8001a1c:	01800c44 	movi	r6,49
 8001a20:	01400044 	movi	r5,1
 8001a24:	01020174 	movhi	r4,2053
 8001a28:	21385004 	addi	r4,r4,-7872
 8001a2c:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
 8001a30:	d0a00117 	ldw	r2,-32764(gp)
 8001a34:	10800317 	ldw	r2,12(r2)
 8001a38:	01800504 	movi	r6,20
 8001a3c:	01420174 	movhi	r5,2053
 8001a40:	29785d04 	addi	r5,r5,-7820
 8001a44:	1009883a 	mov	r4,r2
 8001a48:	8002cf80 	call	8002cf8 <fprintf>
            OS_LOWEST_PRIO);
         break;
 8001a4c:	0000a106 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
 8001a50:	d0a00117 	ldw	r2,-32764(gp)
 8001a54:	10800317 	ldw	r2,12(r2)
 8001a58:	100f883a 	mov	r7,r2
 8001a5c:	01800a04 	movi	r6,40
 8001a60:	01400044 	movi	r5,1
 8001a64:	01020174 	movhi	r4,2053
 8001a68:	21386a04 	addi	r4,r4,-7768
 8001a6c:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
 8001a70:	d0a00117 	ldw	r2,-32764(gp)
 8001a74:	10800317 	ldw	r2,12(r2)
 8001a78:	01800284 	movi	r6,10
 8001a7c:	01420174 	movhi	r5,2053
 8001a80:	29787504 	addi	r5,r5,-7724
 8001a84:	1009883a 	mov	r4,r2
 8001a88:	8002cf80 	call	8002cf8 <fprintf>
         break;
 8001a8c:	00009106 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_MBOX_FULL:
         fault_level = NONE;
 8001a90:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
 8001a94:	d0a00117 	ldw	r2,-32764(gp)
 8001a98:	10800317 	ldw	r2,12(r2)
 8001a9c:	100f883a 	mov	r7,r2
 8001aa0:	01800c84 	movi	r6,50
 8001aa4:	01400044 	movi	r5,1
 8001aa8:	01020174 	movhi	r4,2053
 8001aac:	21387e04 	addi	r4,r4,-7688
 8001ab0:	8002de00 	call	8002de0 <fwrite>
         break;
 8001ab4:	00008706 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
 8001ab8:	00800044 	movi	r2,1
 8001abc:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, 
 8001ac0:	d0a00117 	ldw	r2,-32764(gp)
 8001ac4:	10800317 	ldw	r2,12(r2)
 8001ac8:	100f883a 	mov	r7,r2
 8001acc:	01801244 	movi	r6,73
 8001ad0:	01400044 	movi	r5,1
 8001ad4:	01020174 	movhi	r4,2053
 8001ad8:	21388b04 	addi	r4,r4,-7636
 8001adc:	8002de00 	call	8002de0 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
 8001ae0:	00007c06 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
 8001ae4:	d0a00117 	ldw	r2,-32764(gp)
 8001ae8:	10800317 	ldw	r2,12(r2)
 8001aec:	100f883a 	mov	r7,r2
 8001af0:	01800c44 	movi	r6,49
 8001af4:	01400044 	movi	r5,1
 8001af8:	01020174 	movhi	r4,2053
 8001afc:	21389e04 	addi	r4,r4,-7560
 8001b00:	8002de00 	call	8002de0 <fwrite>
         break;
 8001b04:	00007306 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
 8001b08:	00800044 	movi	r2,1
 8001b0c:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
 8001b10:	d0a00117 	ldw	r2,-32764(gp)
 8001b14:	10800317 	ldw	r2,12(r2)
 8001b18:	100f883a 	mov	r7,r2
 8001b1c:	01800a44 	movi	r6,41
 8001b20:	01400044 	movi	r5,1
 8001b24:	01020174 	movhi	r4,2053
 8001b28:	2138ab04 	addi	r4,r4,-7508
 8001b2c:	8002de00 	call	8002de0 <fwrite>
         break;
 8001b30:	00006806 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TIMEOUT:
         fault_level = NONE;
 8001b34:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Resource not received in specified time\n");
 8001b38:	d0a00117 	ldw	r2,-32764(gp)
 8001b3c:	10800317 	ldw	r2,12(r2)
 8001b40:	100f883a 	mov	r7,r2
 8001b44:	01800a04 	movi	r6,40
 8001b48:	01400044 	movi	r5,1
 8001b4c:	01020174 	movhi	r4,2053
 8001b50:	2138b604 	addi	r4,r4,-7464
 8001b54:	8002de00 	call	8002de0 <fwrite>
         break;
 8001b58:	00005e06 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
 8001b5c:	d0a00117 	ldw	r2,-32764(gp)
 8001b60:	10800317 	ldw	r2,12(r2)
 8001b64:	100f883a 	mov	r7,r2
 8001b68:	01800b04 	movi	r6,44
 8001b6c:	01400044 	movi	r5,1
 8001b70:	01020174 	movhi	r4,2053
 8001b74:	2138c104 	addi	r4,r4,-7420
 8001b78:	8002de00 	call	8002de0 <fwrite>
         break;
 8001b7c:	00005506 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
 8001b80:	d0a00117 	ldw	r2,-32764(gp)
 8001b84:	10800317 	ldw	r2,12(r2)
 8001b88:	100f883a 	mov	r7,r2
 8001b8c:	01800884 	movi	r6,34
 8001b90:	01400044 	movi	r5,1
 8001b94:	01020174 	movhi	r4,2053
 8001b98:	2138cd04 	addi	r4,r4,-7372
 8001b9c:	8002de00 	call	8002de0 <fwrite>
         break;
 8001ba0:	00004c06 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
 8001ba4:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
 8001ba8:	d0a00117 	ldw	r2,-32764(gp)
 8001bac:	10800317 	ldw	r2,12(r2)
 8001bb0:	100f883a 	mov	r7,r2
 8001bb4:	01800bc4 	movi	r6,47
 8001bb8:	01400044 	movi	r5,1
 8001bbc:	01020174 	movhi	r4,2053
 8001bc0:	2138d604 	addi	r4,r4,-7336
 8001bc4:	8002de00 	call	8002de0 <fwrite>
         break;
 8001bc8:	00004206 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
 8001bcc:	d0a00117 	ldw	r2,-32764(gp)
 8001bd0:	10800317 	ldw	r2,12(r2)
 8001bd4:	100f883a 	mov	r7,r2
 8001bd8:	018009c4 	movi	r6,39
 8001bdc:	01400044 	movi	r5,1
 8001be0:	01020174 	movhi	r4,2053
 8001be4:	2138e204 	addi	r4,r4,-7288
 8001be8:	8002de00 	call	8002de0 <fwrite>
         break;
 8001bec:	00003906 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_Q_FULL:
         fault_level = NONE;
 8001bf0:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
 8001bf4:	d0a00117 	ldw	r2,-32764(gp)
 8001bf8:	10800317 	ldw	r2,12(r2)
 8001bfc:	100f883a 	mov	r7,r2
 8001c00:	01800a84 	movi	r6,42
 8001c04:	01400044 	movi	r5,1
 8001c08:	01020174 	movhi	r4,2053
 8001c0c:	2138ec04 	addi	r4,r4,-7248
 8001c10:	8002de00 	call	8002de0 <fwrite>
         break;
 8001c14:	00002f06 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
 8001c18:	00800044 	movi	r2,1
 8001c1c:	e0bfff15 	stw	r2,-4(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
 8001c20:	d0a00117 	ldw	r2,-32764(gp)
 8001c24:	10800317 	ldw	r2,12(r2)
 8001c28:	100f883a 	mov	r7,r2
 8001c2c:	01800c04 	movi	r6,48
 8001c30:	01400044 	movi	r5,1
 8001c34:	01020174 	movhi	r4,2053
 8001c38:	2138f704 	addi	r4,r4,-7204
 8001c3c:	8002de00 	call	8002de0 <fwrite>
         break;
 8001c40:	00002406 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 8001c44:	00800084 	movi	r2,2
 8001c48:	e0bfff15 	stw	r2,-4(fp)
         printf(
 8001c4c:	01020174 	movhi	r4,2053
 8001c50:	21390404 	addi	r4,r4,-7152
 8001c54:	800325c0 	call	800325c <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
 8001c58:	d0a00117 	ldw	r2,-32764(gp)
 8001c5c:	10800317 	ldw	r2,12(r2)
 8001c60:	e1bffd17 	ldw	r6,-12(fp)
 8001c64:	01420174 	movhi	r5,2053
 8001c68:	29791404 	addi	r5,r5,-7088
 8001c6c:	1009883a 	mov	r4,r2
 8001c70:	8002cf80 	call	8002cf8 <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
 8001c74:	00001706 	br	8001cd4 <alt_uCOSIIErrorHandler+0x4e4>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
 8001c78:	01020174 	movhi	r4,2053
 8001c7c:	21391f04 	addi	r4,r4,-7044
 8001c80:	80033800 	call	8003380 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
 8001c84:	d0a00117 	ldw	r2,-32764(gp)
 8001c88:	10800317 	ldw	r2,12(r2)
 8001c8c:	100f883a 	mov	r7,r2
 8001c90:	01800404 	movi	r6,16
 8001c94:	01400044 	movi	r5,1
 8001c98:	01020174 	movhi	r4,2053
 8001c9c:	21392d04 	addi	r4,r4,-6988
 8001ca0:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
 8001ca4:	d0a00117 	ldw	r2,-32764(gp)
 8001ca8:	10800317 	ldw	r2,12(r2)
 8001cac:	e0fffe03 	ldbu	r3,-8(fp)
 8001cb0:	180d883a 	mov	r6,r3
 8001cb4:	01420174 	movhi	r5,2053
 8001cb8:	29793204 	addi	r5,r5,-6968
 8001cbc:	1009883a 	mov	r4,r2
 8001cc0:	8002cf80 	call	8002cf8 <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
 8001cc4:	01020174 	movhi	r4,2053
 8001cc8:	21393704 	addi	r4,r4,-6948
 8001ccc:	800321c0 	call	800321c <perror>
         break;
 8001cd0:	0001883a 	nop

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
 8001cd4:	e0bfff17 	ldw	r2,-4(fp)
 8001cd8:	108000a0 	cmpeqi	r2,r2,2
 8001cdc:	1000231e 	bne	r2,zero,8001d6c <alt_uCOSIIErrorHandler+0x57c>
 8001ce0:	e0bfff17 	ldw	r2,-4(fp)
 8001ce4:	108000e8 	cmpgeui	r2,r2,3
 8001ce8:	1000561e 	bne	r2,zero,8001e44 <alt_uCOSIIErrorHandler+0x654>
 8001cec:	e0bfff17 	ldw	r2,-4(fp)
 8001cf0:	10003a26 	beq	r2,zero,8001ddc <alt_uCOSIIErrorHandler+0x5ec>
 8001cf4:	e0bfff17 	ldw	r2,-4(fp)
 8001cf8:	10800058 	cmpnei	r2,r2,1
 8001cfc:	1000511e 	bne	r2,zero,8001e44 <alt_uCOSIIErrorHandler+0x654>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
 8001d00:	01020174 	movhi	r4,2053
 8001d04:	21394504 	addi	r4,r4,-6892
 8001d08:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
 8001d0c:	d0a00117 	ldw	r2,-32764(gp)
 8001d10:	10800317 	ldw	r2,12(r2)
 8001d14:	100f883a 	mov	r7,r2
 8001d18:	01800904 	movi	r6,36
 8001d1c:	01400044 	movi	r5,1
 8001d20:	01020174 	movhi	r4,2053
 8001d24:	21395204 	addi	r4,r4,-6840
 8001d28:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
 8001d2c:	d0a00117 	ldw	r2,-32764(gp)
 8001d30:	10800317 	ldw	r2,12(r2)
 8001d34:	100f883a 	mov	r7,r2
 8001d38:	01800a04 	movi	r6,40
 8001d3c:	01400044 	movi	r5,1
 8001d40:	01020174 	movhi	r4,2053
 8001d44:	21395c04 	addi	r4,r4,-6800
 8001d48:	8002de00 	call	8002de0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 8001d4c:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 8001d50:	01003fc4 	movi	r4,255
 8001d54:	80177c00 	call	80177c0 <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 8001d58:	e0bffe03 	ldbu	r2,-8(fp)
 8001d5c:	000b883a 	mov	r5,zero
 8001d60:	1009883a 	mov	r4,r2
 8001d64:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
         break;
 8001d68:	00004106 	br	8001e70 <alt_uCOSIIErrorHandler+0x680>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8001d6c:	01020174 	movhi	r4,2053
 8001d70:	21396704 	addi	r4,r4,-6756
 8001d74:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
 8001d78:	d0a00117 	ldw	r2,-32764(gp)
 8001d7c:	10800317 	ldw	r2,12(r2)
 8001d80:	100f883a 	mov	r7,r2
 8001d84:	01800984 	movi	r6,38
 8001d88:	01400044 	movi	r5,1
 8001d8c:	01020174 	movhi	r4,2053
 8001d90:	21397504 	addi	r4,r4,-6700
 8001d94:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
 8001d98:	d0a00117 	ldw	r2,-32764(gp)
 8001d9c:	10800317 	ldw	r2,12(r2)
 8001da0:	100f883a 	mov	r7,r2
 8001da4:	01800bc4 	movi	r6,47
 8001da8:	01400044 	movi	r5,1
 8001dac:	01020174 	movhi	r4,2053
 8001db0:	21397f04 	addi	r4,r4,-6660
 8001db4:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
 8001db8:	d0a00117 	ldw	r2,-32764(gp)
 8001dbc:	10800317 	ldw	r2,12(r2)
 8001dc0:	100f883a 	mov	r7,r2
 8001dc4:	01800cc4 	movi	r6,51
 8001dc8:	01400044 	movi	r5,1
 8001dcc:	01020174 	movhi	r4,2053
 8001dd0:	21398b04 	addi	r4,r4,-6612
 8001dd4:	8002de00 	call	8002de0 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
 8001dd8:	003fff06 	br	8001dd8 <alt_uCOSIIErrorHandler+0x5e8>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
 8001ddc:	d0a00117 	ldw	r2,-32764(gp)
 8001de0:	10800317 	ldw	r2,12(r2)
 8001de4:	100f883a 	mov	r7,r2
 8001de8:	01800904 	movi	r6,36
 8001dec:	01400044 	movi	r5,1
 8001df0:	01020174 	movhi	r4,2053
 8001df4:	21399804 	addi	r4,r4,-6560
 8001df8:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
 8001dfc:	d0a00117 	ldw	r2,-32764(gp)
 8001e00:	10800317 	ldw	r2,12(r2)
 8001e04:	100f883a 	mov	r7,r2
 8001e08:	01800c84 	movi	r6,50
 8001e0c:	01400044 	movi	r5,1
 8001e10:	01020174 	movhi	r4,2053
 8001e14:	2139a204 	addi	r4,r4,-6520
 8001e18:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, 
 8001e1c:	d0a00117 	ldw	r2,-32764(gp)
 8001e20:	10800317 	ldw	r2,12(r2)
 8001e24:	100f883a 	mov	r7,r2
 8001e28:	01800f84 	movi	r6,62
 8001e2c:	01400044 	movi	r5,1
 8001e30:	01020174 	movhi	r4,2053
 8001e34:	2139af04 	addi	r4,r4,-6468
 8001e38:	8002de00 	call	8002de0 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
 8001e3c:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         return;   
 8001e40:	00000d06 	br	8001e78 <alt_uCOSIIErrorHandler+0x688>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
 8001e44:	01020174 	movhi	r4,2053
 8001e48:	2139bf04 	addi	r4,r4,-6404
 8001e4c:	80033800 	call	8003380 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
 8001e50:	d0a00117 	ldw	r2,-32764(gp)
 8001e54:	10800317 	ldw	r2,12(r2)
 8001e58:	100f883a 	mov	r7,r2
 8001e5c:	01800ac4 	movi	r6,43
 8001e60:	01400044 	movi	r5,1
 8001e64:	01020174 	movhi	r4,2053
 8001e68:	2139cd04 	addi	r4,r4,-6348
 8001e6c:	8002de00 	call	8002de0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 8001e70:	003fff06 	br	8001e70 <alt_uCOSIIErrorHandler+0x680>
      return;
 8001e74:	0001883a 	nop
}
 8001e78:	e037883a 	mov	sp,fp
 8001e7c:	dfc00117 	ldw	ra,4(sp)
 8001e80:	df000017 	ldw	fp,0(sp)
 8001e84:	dec00204 	addi	sp,sp,8
 8001e88:	f800283a 	ret

08001e8c <alt_NetworkErrorHandler>:

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 8001e8c:	defffb04 	addi	sp,sp,-20
 8001e90:	dfc00415 	stw	ra,16(sp)
 8001e94:	df000315 	stw	fp,12(sp)
 8001e98:	df000304 	addi	fp,sp,12
 8001e9c:	2005883a 	mov	r2,r4
 8001ea0:	e17ffd15 	stw	r5,-12(fp)
 8001ea4:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
 8001ea8:	e0bffe03 	ldbu	r2,-8(fp)
 8001eac:	10008e26 	beq	r2,zero,80020e8 <alt_NetworkErrorHandler+0x25c>
   {
      return;
   }

   fault_level = SYSTEM;   
 8001eb0:	00800084 	movi	r2,2
 8001eb4:	e0bfff15 	stw	r2,-4(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
 8001eb8:	8011cac0 	call	8011cac <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
 8001ebc:	e0bffe03 	ldbu	r2,-8(fp)
 8001ec0:	10803fd8 	cmpnei	r2,r2,255
 8001ec4:	1000101e 	bne	r2,zero,8001f08 <alt_NetworkErrorHandler+0x7c>
   {
      fault_level = SYSTEM;
 8001ec8:	00800084 	movi	r2,2
 8001ecc:	e0bfff15 	stw	r2,-4(fp)
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
 8001ed0:	01020174 	movhi	r4,2053
 8001ed4:	2139d804 	addi	r4,r4,-6304
 8001ed8:	800325c0 	call	800325c <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
 8001edc:	d0a00117 	ldw	r2,-32764(gp)
 8001ee0:	10800317 	ldw	r2,12(r2)
 8001ee4:	e1bffd17 	ldw	r6,-12(fp)
 8001ee8:	01420174 	movhi	r5,2053
 8001eec:	2979e704 	addi	r5,r5,-6244
 8001ef0:	1009883a 	mov	r4,r2
 8001ef4:	8002cf80 	call	8002cf8 <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
 8001ef8:	01020174 	movhi	r4,2053
 8001efc:	2139eb04 	addi	r4,r4,-6228
 8001f00:	800321c0 	call	800321c <perror>
 8001f04:	00001006 	br	8001f48 <alt_NetworkErrorHandler+0xbc>
   }
   else 
   {
      fault_level = TASK;
 8001f08:	00800044 	movi	r2,1
 8001f0c:	e0bfff15 	stw	r2,-4(fp)
      printf("\n[Network]: See STDERR.\n");    
 8001f10:	01020174 	movhi	r4,2053
 8001f14:	2139f104 	addi	r4,r4,-6204
 8001f18:	80033800 	call	8003380 <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
 8001f1c:	d0a00117 	ldw	r2,-32764(gp)
 8001f20:	10800317 	ldw	r2,12(r2)
 8001f24:	e0fffe03 	ldbu	r3,-8(fp)
 8001f28:	180d883a 	mov	r6,r3
 8001f2c:	01420174 	movhi	r5,2053
 8001f30:	2979f704 	addi	r5,r5,-6180
 8001f34:	1009883a 	mov	r4,r2
 8001f38:	8002cf80 	call	8002cf8 <fprintf>
      perror("\n[Network]:  ERRNO: ");
 8001f3c:	01020174 	movhi	r4,2053
 8001f40:	2139eb04 	addi	r4,r4,-6228
 8001f44:	800321c0 	call	800321c <perror>
   }

   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
 8001f48:	e0bfff17 	ldw	r2,-4(fp)
 8001f4c:	108000a0 	cmpeqi	r2,r2,2
 8001f50:	1000231e 	bne	r2,zero,8001fe0 <alt_NetworkErrorHandler+0x154>
 8001f54:	e0bfff17 	ldw	r2,-4(fp)
 8001f58:	108000e8 	cmpgeui	r2,r2,3
 8001f5c:	1000561e 	bne	r2,zero,80020b8 <alt_NetworkErrorHandler+0x22c>
 8001f60:	e0bfff17 	ldw	r2,-4(fp)
 8001f64:	10003a26 	beq	r2,zero,8002050 <alt_NetworkErrorHandler+0x1c4>
 8001f68:	e0bfff17 	ldw	r2,-4(fp)
 8001f6c:	10800058 	cmpnei	r2,r2,1
 8001f70:	1000511e 	bne	r2,zero,80020b8 <alt_NetworkErrorHandler+0x22c>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
 8001f74:	01020174 	movhi	r4,2053
 8001f78:	2139fe04 	addi	r4,r4,-6152
 8001f7c:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
 8001f80:	d0a00117 	ldw	r2,-32764(gp)
 8001f84:	10800317 	ldw	r2,12(r2)
 8001f88:	100f883a 	mov	r7,r2
 8001f8c:	018007c4 	movi	r6,31
 8001f90:	01400044 	movi	r5,1
 8001f94:	01020174 	movhi	r4,2053
 8001f98:	213a0a04 	addi	r4,r4,-6104
 8001f9c:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
 8001fa0:	d0a00117 	ldw	r2,-32764(gp)
 8001fa4:	10800317 	ldw	r2,12(r2)
 8001fa8:	100f883a 	mov	r7,r2
 8001fac:	018008c4 	movi	r6,35
 8001fb0:	01400044 	movi	r5,1
 8001fb4:	01020174 	movhi	r4,2053
 8001fb8:	213a1204 	addi	r4,r4,-6072
 8001fbc:	8002de00 	call	8002de0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 8001fc0:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 8001fc4:	01003fc4 	movi	r4,255
 8001fc8:	80177c00 	call	80177c0 <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 8001fcc:	e0bffe03 	ldbu	r2,-8(fp)
 8001fd0:	000b883a 	mov	r5,zero
 8001fd4:	1009883a 	mov	r4,r2
 8001fd8:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
         break;
 8001fdc:	00004106 	br	80020e4 <alt_NetworkErrorHandler+0x258>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8001fe0:	01020174 	movhi	r4,2053
 8001fe4:	213a1b04 	addi	r4,r4,-6036
 8001fe8:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
 8001fec:	d0a00117 	ldw	r2,-32764(gp)
 8001ff0:	10800317 	ldw	r2,12(r2)
 8001ff4:	100f883a 	mov	r7,r2
 8001ff8:	01800884 	movi	r6,34
 8001ffc:	01400044 	movi	r5,1
 8002000:	01020174 	movhi	r4,2053
 8002004:	213a2704 	addi	r4,r4,-5988
 8002008:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
 800200c:	d0a00117 	ldw	r2,-32764(gp)
 8002010:	10800317 	ldw	r2,12(r2)
 8002014:	100f883a 	mov	r7,r2
 8002018:	01800a84 	movi	r6,42
 800201c:	01400044 	movi	r5,1
 8002020:	01020174 	movhi	r4,2053
 8002024:	213a3004 	addi	r4,r4,-5952
 8002028:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
 800202c:	d0a00117 	ldw	r2,-32764(gp)
 8002030:	10800317 	ldw	r2,12(r2)
 8002034:	100f883a 	mov	r7,r2
 8002038:	01800b84 	movi	r6,46
 800203c:	01400044 	movi	r5,1
 8002040:	01020174 	movhi	r4,2053
 8002044:	213a3b04 	addi	r4,r4,-5908
 8002048:	8002de00 	call	8002de0 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 800204c:	003fff06 	br	800204c <alt_NetworkErrorHandler+0x1c0>
         break;
      case NONE:
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is NONE.");
 8002050:	d0a00117 	ldw	r2,-32764(gp)
 8002054:	10800317 	ldw	r2,12(r2)
 8002058:	100f883a 	mov	r7,r2
 800205c:	01800804 	movi	r6,32
 8002060:	01400044 	movi	r5,1
 8002064:	01020174 	movhi	r4,2053
 8002068:	213a4704 	addi	r4,r4,-5860
 800206c:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[Network]: Informational "
 8002070:	d0a00117 	ldw	r2,-32764(gp)
 8002074:	10800317 	ldw	r2,12(r2)
 8002078:	100f883a 	mov	r7,r2
 800207c:	01800d84 	movi	r6,54
 8002080:	01400044 	movi	r5,1
 8002084:	01020174 	movhi	r4,2053
 8002088:	213a5004 	addi	r4,r4,-5824
 800208c:	8002de00 	call	8002de0 <fwrite>
                         "error only, control returned");
         fprintf(stderr, 
 8002090:	d0a00117 	ldw	r2,-32764(gp)
 8002094:	10800317 	ldw	r2,12(r2)
 8002098:	100f883a 	mov	r7,r2
 800209c:	01800e44 	movi	r6,57
 80020a0:	01400044 	movi	r5,1
 80020a4:	01020174 	movhi	r4,2053
 80020a8:	213a5e04 	addi	r4,r4,-5768
 80020ac:	8002de00 	call	8002de0 <fwrite>
            "to task to complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 80020b0:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         return;
 80020b4:	00000d06 	br	80020ec <alt_NetworkErrorHandler+0x260>
         break;         
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
 80020b8:	01020174 	movhi	r4,2053
 80020bc:	213a6d04 	addi	r4,r4,-5708
 80020c0:	80033800 	call	8003380 <puts>
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
 80020c4:	d0a00117 	ldw	r2,-32764(gp)
 80020c8:	10800317 	ldw	r2,12(r2)
 80020cc:	100f883a 	mov	r7,r2
 80020d0:	01800984 	movi	r6,38
 80020d4:	01400044 	movi	r5,1
 80020d8:	01020174 	movhi	r4,2053
 80020dc:	213a7a04 	addi	r4,r4,-5656
 80020e0:	8002de00 	call	8002de0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 80020e4:	003fff06 	br	80020e4 <alt_NetworkErrorHandler+0x258>
      return;
 80020e8:	0001883a 	nop
}
 80020ec:	e037883a 	mov	sp,fp
 80020f0:	dfc00117 	ldw	ra,4(sp)
 80020f4:	df000017 	ldw	fp,0(sp)
 80020f8:	dec00204 	addi	sp,sp,8
 80020fc:	f800283a 	ret

08002100 <alt_SSSErrorHandler>:
   
   
void alt_SSSErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
 8002100:	defffb04 	addi	sp,sp,-20
 8002104:	dfc00415 	stw	ra,16(sp)
 8002108:	df000315 	stw	fp,12(sp)
 800210c:	df000304 	addi	fp,sp,12
 8002110:	2005883a 	mov	r2,r4
 8002114:	e17ffd15 	stw	r5,-12(fp)
 8002118:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
 800211c:	e0bffe03 	ldbu	r2,-8(fp)
 8002120:	10009b26 	beq	r2,zero,8002390 <alt_SSSErrorHandler+0x290>
   {
      return;
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
 8002124:	e0bffe03 	ldbu	r2,-8(fp)
 8002128:	1000021e 	bne	r2,zero,8002134 <alt_SSSErrorHandler+0x34>
 800212c:	0005883a 	mov	r2,zero
 8002130:	00000106 	br	8002138 <alt_SSSErrorHandler+0x38>
 8002134:	00800084 	movi	r2,2
 8002138:	e0bfff15 	stw	r2,-4(fp)
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 800213c:	8011cac0 	call	8011cac <OSSchedLock>
   switch (error_code)
 8002140:	e0bffe03 	ldbu	r2,-8(fp)
 8002144:	10c007a0 	cmpeqi	r3,r2,30
 8002148:	18000f1e 	bne	r3,zero,8002188 <alt_SSSErrorHandler+0x88>
 800214c:	10803fd8 	cmpnei	r2,r2,255
 8002150:	1000171e 	bne	r2,zero,80021b0 <alt_SSSErrorHandler+0xb0>
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 8002154:	00800084 	movi	r2,2
 8002158:	e0bfff15 	stw	r2,-4(fp)
         printf("\n[SSS]: See STDERR for expanded diagnosis translation.");    
 800215c:	01020174 	movhi	r4,2053
 8002160:	213a8404 	addi	r4,r4,-5616
 8002164:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[SSS]: %s", (char *)expanded_diagnosis_ptr);
 8002168:	d0a00117 	ldw	r2,-32764(gp)
 800216c:	10800317 	ldw	r2,12(r2)
 8002170:	e1bffd17 	ldw	r6,-12(fp)
 8002174:	01420174 	movhi	r5,2053
 8002178:	297a9204 	addi	r5,r5,-5560
 800217c:	1009883a 	mov	r4,r2
 8002180:	8002cf80 	call	8002cf8 <fprintf>
         break;
 8002184:	00001a06 	br	80021f0 <alt_SSSErrorHandler+0xf0>
         
      case OS_Q_FULL:
         fault_level = NONE;
 8002188:	e03fff15 	stw	zero,-4(fp)
         fprintf(stderr,"\n[SSS]: Attempted to post to a full message queue.");
 800218c:	d0a00117 	ldw	r2,-32764(gp)
 8002190:	10800317 	ldw	r2,12(r2)
 8002194:	100f883a 	mov	r7,r2
 8002198:	01800c84 	movi	r6,50
 800219c:	01400044 	movi	r5,1
 80021a0:	01020174 	movhi	r4,2053
 80021a4:	213a9504 	addi	r4,r4,-5548
 80021a8:	8002de00 	call	8002de0 <fwrite>
         break;
 80021ac:	00001006 	br	80021f0 <alt_SSSErrorHandler+0xf0>
      
      default:
         fault_level = SYSTEM;
 80021b0:	00800084 	movi	r2,2
 80021b4:	e0bfff15 	stw	r2,-4(fp)
         printf("\n[SSS]: See STDERR.\n");    
 80021b8:	01020174 	movhi	r4,2053
 80021bc:	213aa204 	addi	r4,r4,-5496
 80021c0:	80033800 	call	8003380 <puts>
         fprintf(stderr, "\n[SSS]: Error_code %d!", error_code);        
 80021c4:	d0a00117 	ldw	r2,-32764(gp)
 80021c8:	10800317 	ldw	r2,12(r2)
 80021cc:	e0fffe03 	ldbu	r3,-8(fp)
 80021d0:	180d883a 	mov	r6,r3
 80021d4:	01420174 	movhi	r5,2053
 80021d8:	297aa704 	addi	r5,r5,-5476
 80021dc:	1009883a 	mov	r4,r2
 80021e0:	8002cf80 	call	8002cf8 <fprintf>
         perror("\n[SSS]:  ERRNO: ");
 80021e4:	01020174 	movhi	r4,2053
 80021e8:	213aad04 	addi	r4,r4,-5452
 80021ec:	800321c0 	call	800321c <perror>
   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */     
   switch (fault_level) 
 80021f0:	e0bfff17 	ldw	r2,-4(fp)
 80021f4:	108000a0 	cmpeqi	r2,r2,2
 80021f8:	1000231e 	bne	r2,zero,8002288 <alt_SSSErrorHandler+0x188>
 80021fc:	e0bfff17 	ldw	r2,-4(fp)
 8002200:	108000e8 	cmpgeui	r2,r2,3
 8002204:	1000561e 	bne	r2,zero,8002360 <alt_SSSErrorHandler+0x260>
 8002208:	e0bfff17 	ldw	r2,-4(fp)
 800220c:	10003a26 	beq	r2,zero,80022f8 <alt_SSSErrorHandler+0x1f8>
 8002210:	e0bfff17 	ldw	r2,-4(fp)
 8002214:	10800058 	cmpnei	r2,r2,1
 8002218:	1000511e 	bne	r2,zero,8002360 <alt_SSSErrorHandler+0x260>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is TASK).");
 800221c:	01020174 	movhi	r4,2053
 8002220:	213ab204 	addi	r4,r4,-5432
 8002224:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is TASK");
 8002228:	d0a00117 	ldw	r2,-32764(gp)
 800222c:	10800317 	ldw	r2,12(r2)
 8002230:	100f883a 	mov	r7,r2
 8002234:	018006c4 	movi	r6,27
 8002238:	01400044 	movi	r5,1
 800223c:	01020174 	movhi	r4,2053
 8002240:	213abd04 	addi	r4,r4,-5388
 8002244:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[SSS]: Task is being deleted.\n");
 8002248:	d0a00117 	ldw	r2,-32764(gp)
 800224c:	10800317 	ldw	r2,12(r2)
 8002250:	100f883a 	mov	r7,r2
 8002254:	018007c4 	movi	r6,31
 8002258:	01400044 	movi	r5,1
 800225c:	01020174 	movhi	r4,2053
 8002260:	213ac404 	addi	r4,r4,-5360
 8002264:	8002de00 	call	8002de0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 8002268:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 800226c:	01003fc4 	movi	r4,255
 8002270:	80177c00 	call	80177c0 <OSTaskDel>
         /* Invoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 8002274:	e0bffe03 	ldbu	r2,-8(fp)
 8002278:	000b883a 	mov	r5,zero
 800227c:	1009883a 	mov	r4,r2
 8002280:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
         break;
 8002284:	00004106 	br	800238c <alt_SSSErrorHandler+0x28c>
      case SYSTEM:
          /* Total System Failure, Restart Required */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 8002288:	01020174 	movhi	r4,2053
 800228c:	213acc04 	addi	r4,r4,-5328
 8002290:	800325c0 	call	800325c <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is SYSTEM.");
 8002294:	d0a00117 	ldw	r2,-32764(gp)
 8002298:	10800317 	ldw	r2,12(r2)
 800229c:	100f883a 	mov	r7,r2
 80022a0:	01800784 	movi	r6,30
 80022a4:	01400044 	movi	r5,1
 80022a8:	01020174 	movhi	r4,2053
 80022ac:	213ad704 	addi	r4,r4,-5284
 80022b0:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[SSS]: FATAL Error, Restart required.");
 80022b4:	d0a00117 	ldw	r2,-32764(gp)
 80022b8:	10800317 	ldw	r2,12(r2)
 80022bc:	100f883a 	mov	r7,r2
 80022c0:	01800984 	movi	r6,38
 80022c4:	01400044 	movi	r5,1
 80022c8:	01020174 	movhi	r4,2053
 80022cc:	213adf04 	addi	r4,r4,-5252
 80022d0:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, "\n[SSS]: Locking scheduler - endless loop.\n");
 80022d4:	d0a00117 	ldw	r2,-32764(gp)
 80022d8:	10800317 	ldw	r2,12(r2)
 80022dc:	100f883a 	mov	r7,r2
 80022e0:	01800a84 	movi	r6,42
 80022e4:	01400044 	movi	r5,1
 80022e8:	01020174 	movhi	r4,2053
 80022ec:	213ae904 	addi	r4,r4,-5212
 80022f0:	8002de00 	call	8002de0 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 80022f4:	003fff06 	br	80022f4 <alt_SSSErrorHandler+0x1f4>
         break;
      case NONE:
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is NONE.");
 80022f8:	d0a00117 	ldw	r2,-32764(gp)
 80022fc:	10800317 	ldw	r2,12(r2)
 8002300:	100f883a 	mov	r7,r2
 8002304:	018006c4 	movi	r6,27
 8002308:	01400044 	movi	r5,1
 800230c:	01020174 	movhi	r4,2053
 8002310:	213af404 	addi	r4,r4,-5168
 8002314:	8002de00 	call	8002de0 <fwrite>
         fprintf(stderr, 
 8002318:	d0a00117 	ldw	r2,-32764(gp)
 800231c:	10800317 	ldw	r2,12(r2)
 8002320:	100f883a 	mov	r7,r2
 8002324:	01800f44 	movi	r6,61
 8002328:	01400044 	movi	r5,1
 800232c:	01020174 	movhi	r4,2053
 8002330:	213afb04 	addi	r4,r4,-5140
 8002334:	8002de00 	call	8002de0 <fwrite>
            "\n[SSS] Informational error only, control returned to task to ");
         fprintf(stderr,
 8002338:	d0a00117 	ldw	r2,-32764(gp)
 800233c:	10800317 	ldw	r2,12(r2)
 8002340:	100f883a 	mov	r7,r2
 8002344:	01800b84 	movi	r6,46
 8002348:	01400044 	movi	r5,1
 800234c:	01020174 	movhi	r4,2053
 8002350:	213b0b04 	addi	r4,r4,-5076
 8002354:	8002de00 	call	8002de0 <fwrite>
            "complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 8002358:	8011d3c0 	call	8011d3c <OSSchedUnlock>
         return;         
 800235c:	00000d06 	br	8002394 <alt_SSSErrorHandler+0x294>
         break;
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
 8002360:	01020174 	movhi	r4,2053
 8002364:	213b1704 	addi	r4,r4,-5028
 8002368:	80033800 	call	8003380 <puts>
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
 800236c:	d0a00117 	ldw	r2,-32764(gp)
 8002370:	10800317 	ldw	r2,12(r2)
 8002374:	100f883a 	mov	r7,r2
 8002378:	01800844 	movi	r6,33
 800237c:	01400044 	movi	r5,1
 8002380:	01020174 	movhi	r4,2053
 8002384:	213b2304 	addi	r4,r4,-4980
 8002388:	8002de00 	call	8002de0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 800238c:	003fff06 	br	800238c <alt_SSSErrorHandler+0x28c>
      return;
 8002390:	0001883a 	nop
}
 8002394:	e037883a 	mov	sp,fp
 8002398:	dfc00117 	ldw	ra,4(sp)
 800239c:	df000017 	ldw	fp,0(sp)
 80023a0:	dec00204 	addi	sp,sp,8
 80023a4:	f800283a 	ret

080023a8 <SSSInitialTask>:
/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
 80023a8:	defffc04 	addi	sp,sp,-16
 80023ac:	dfc00315 	stw	ra,12(sp)
 80023b0:	df000215 	stw	fp,8(sp)
 80023b4:	df000204 	addi	fp,sp,8
 80023b8:	e13ffe15 	stw	r4,-8(fp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
 80023bc:	802cb0c0 	call	802cb0c <alt_iniche_init>
  netmain(); 
 80023c0:	802867c0 	call	802867c <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 80023c4:	00000206 	br	80023d0 <SSSInitialTask+0x28>
    TK_SLEEP(1);
 80023c8:	01000084 	movi	r4,2
 80023cc:	80186cc0 	call	80186cc <OSTimeDly>
  while (!iniche_net_ready)
 80023d0:	d0a08717 	ldw	r2,-32228(gp)
 80023d4:	103ffc26 	beq	r2,zero,80023c8 <SSSInitialTask+0x20>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");
 80023d8:	01020174 	movhi	r4,2053
 80023dc:	213b3204 	addi	r4,r4,-4920
 80023e0:	80033800 	call	8003380 <puts>

  /* Create the main simple socket server task. */
  TK_NEWTASK(&ssstask);
 80023e4:	01020174 	movhi	r4,2053
 80023e8:	21105c04 	addi	r4,r4,16752
 80023ec:	802c7a40 	call	802c7a4 <TK_NEWTASK>
  
  /*create os data structures */
  SSSCreateOSDataStructs(); 
 80023f0:	8002a000 	call	8002a00 <SSSCreateOSDataStructs>

  /* create the other tasks */
  SSSCreateTasks();
 80023f4:	8002a840 	call	8002a84 <SSSCreateTasks>

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
 80023f8:	01003fc4 	movi	r4,255
 80023fc:	80177c00 	call	80177c0 <OSTaskDel>
 8002400:	e0bfffc5 	stb	r2,-1(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
 8002404:	e0bfffc3 	ldbu	r2,-1(fp)
 8002408:	000b883a 	mov	r5,zero
 800240c:	1009883a 	mov	r4,r2
 8002410:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
  
  while (1); /* Correct Program Flow should never get here */
 8002414:	003fff06 	br	8002414 <SSSInitialTask+0x6c>

08002418 <main>:

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
 8002418:	defff504 	addi	sp,sp,-44
 800241c:	dfc00a15 	stw	ra,40(sp)
 8002420:	df000915 	stw	fp,36(sp)
 8002424:	df000904 	addi	fp,sp,36
 8002428:	e13ffe15 	stw	r4,-8(fp)
 800242c:	e17ffd15 	stw	r5,-12(fp)
 8002430:	e1bffc15 	stw	r6,-16(fp)
  
  INT8U error_code;

  /* Clear the RTOS timer */
  OSTimeSet(0);
 8002434:	0009883a 	mov	r4,zero
 8002438:	8018b740 	call	8018b74 <OSTimeSet>

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(SSSInitialTask,
 800243c:	d8000415 	stw	zero,16(sp)
 8002440:	d8000315 	stw	zero,12(sp)
 8002444:	00820004 	movi	r2,2048
 8002448:	d8800215 	stw	r2,8(sp)
 800244c:	00820174 	movhi	r2,2053
 8002450:	109c7a04 	addi	r2,r2,29160
 8002454:	d8800115 	stw	r2,4(sp)
 8002458:	00800144 	movi	r2,5
 800245c:	d8800015 	stw	r2,0(sp)
 8002460:	01c00144 	movi	r7,5
 8002464:	018201b4 	movhi	r6,2054
 8002468:	31a47a04 	addi	r6,r6,-28184
 800246c:	000b883a 	mov	r5,zero
 8002470:	01020034 	movhi	r4,2048
 8002474:	2108ea04 	addi	r4,r4,9128
 8002478:	80175e40 	call	80175e4 <OSTaskCreateExt>
 800247c:	e0bfffc5 	stb	r2,-1(fp)
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
 8002480:	e0bfffc3 	ldbu	r2,-1(fp)
 8002484:	000b883a 	mov	r5,zero
 8002488:	1009883a 	mov	r4,r2
 800248c:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
 8002490:	8011e200 	call	8011e20 <OSStart>

  
  while(1); /* Correct Program Flow never gets here. */
 8002494:	003fff06 	br	8002494 <main+0x7c>

08002498 <led_bit_toggle>:
 * bit 0, 1, 2, 3 - clear LED0, 1, 2, or 3
 * bit 4, 5, 6, 7 - set   LED0, 1, 2, or 3
 */
 
void led_bit_toggle(OS_FLAGS bit)
{
 8002498:	defffc04 	addi	sp,sp,-16
 800249c:	dfc00315 	stw	ra,12(sp)
 80024a0:	df000215 	stw	fp,8(sp)
 80024a4:	df000204 	addi	fp,sp,8
 80024a8:	2005883a 	mov	r2,r4
 80024ac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAGS  led_4_val;
    INT8U error_code;
    
    led_4_val = OSFlagQuery(SSSLEDEventFlag, &error_code);
 80024b0:	d0a05917 	ldw	r2,-32412(gp)
 80024b4:	e0ffff44 	addi	r3,fp,-3
 80024b8:	180b883a 	mov	r5,r3
 80024bc:	1009883a 	mov	r4,r2
 80024c0:	801476c0 	call	801476c <OSFlagQuery>
 80024c4:	e0bfff8d 	sth	r2,-2(fp)
    alt_uCOSIIErrorHandler(error_code, 0);
 80024c8:	e0bfff43 	ldbu	r2,-3(fp)
 80024cc:	10803fcc 	andi	r2,r2,255
 80024d0:	000b883a 	mov	r5,zero
 80024d4:	1009883a 	mov	r4,r2
 80024d8:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>

    if ( bit < 16 )
 80024dc:	e0bffe0b 	ldhu	r2,-8(fp)
 80024e0:	10800428 	cmpgeui	r2,r2,16
 80024e4:	10000f1e 	bne	r2,zero,8002524 <led_bit_toggle+0x8c>
    {
        led_4_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_CLR, &error_code);
 80024e8:	d0a05917 	ldw	r2,-32412(gp)
 80024ec:	e0fffe0b 	ldhu	r3,-8(fp)
 80024f0:	e13fff44 	addi	r4,fp,-3
 80024f4:	200f883a 	mov	r7,r4
 80024f8:	000d883a 	mov	r6,zero
 80024fc:	180b883a 	mov	r5,r3
 8002500:	1009883a 	mov	r4,r2
 8002504:	80143c00 	call	80143c0 <OSFlagPost>
 8002508:	e0bfff8d 	sth	r2,-2(fp)
        alt_uCOSIIErrorHandler(error_code, 0);
 800250c:	e0bfff43 	ldbu	r2,-3(fp)
 8002510:	10803fcc 	andi	r2,r2,255
 8002514:	000b883a 	mov	r5,zero
 8002518:	1009883a 	mov	r4,r2
 800251c:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
 8002520:	00001006 	br	8002564 <led_bit_toggle+0xcc>
    }
    else
    {
        // shift the set bits into positions 0, 1, 2, or 3
        led_4_val = OSFlagPost(SSSLEDEventFlag, bit >> 4, OS_FLAG_SET, &error_code);
 8002524:	d0e05917 	ldw	r3,-32412(gp)
 8002528:	e0bffe0b 	ldhu	r2,-8(fp)
 800252c:	1004d13a 	srli	r2,r2,4
 8002530:	10bfffcc 	andi	r2,r2,65535
 8002534:	e13fff44 	addi	r4,fp,-3
 8002538:	200f883a 	mov	r7,r4
 800253c:	01800044 	movi	r6,1
 8002540:	100b883a 	mov	r5,r2
 8002544:	1809883a 	mov	r4,r3
 8002548:	80143c00 	call	80143c0 <OSFlagPost>
 800254c:	e0bfff8d 	sth	r2,-2(fp)
        alt_uCOSIIErrorHandler(error_code, 0);
 8002550:	e0bfff43 	ldbu	r2,-3(fp)
 8002554:	10803fcc 	andi	r2,r2,255
 8002558:	000b883a 	mov	r5,zero
 800255c:	1009883a 	mov	r4,r2
 8002560:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
    }

    #ifdef LED_PIO_BASE
       IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led_4_val);
 8002564:	e0ffff8b 	ldhu	r3,-2(fp)
 8002568:	00860034 	movhi	r2,6144
 800256c:	10cff835 	stwio	r3,16352(r2)
       //printf("Value for LED_PIO_BASE set to %d.\n", (INT8U)led_4_val);
    #endif
      
    return;
 8002570:	0001883a 	nop
    //    {
    //       led_4_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_SET, &error_code);
    //       alt_uCOSIIErrorHandler(error_code, 0);
    //    }

}
 8002574:	e037883a 	mov	sp,fp
 8002578:	dfc00117 	ldw	ra,4(sp)
 800257c:	df000017 	ldw	fp,0(sp)
 8002580:	dec00204 	addi	sp,sp,8
 8002584:	f800283a 	ret

08002588 <LEDManagementTask>:
 * The task will read the SSSLedCommandQ for an
 * in-coming message command from the SSSSimpleSocketServerTask.
 */

void LEDManagementTask()
{
 8002588:	defffc04 	addi	sp,sp,-16
 800258c:	dfc00315 	stw	ra,12(sp)
 8002590:	df000215 	stw	fp,8(sp)
 8002594:	df000204 	addi	fp,sp,8
  INT32U led_command;
  INT8U error_code;

  while(1)
  {
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
 8002598:	d0a05817 	ldw	r2,-32416(gp)
 800259c:	e0fffec4 	addi	r3,fp,-5
 80025a0:	180d883a 	mov	r6,r3
 80025a4:	000b883a 	mov	r5,zero
 80025a8:	1009883a 	mov	r4,r2
 80025ac:	80159c80 	call	80159c8 <OSQPend>
 80025b0:	e0bfff15 	stw	r2,-4(fp)

    alt_uCOSIIErrorHandler(error_code, 0);
 80025b4:	e0bffec3 	ldbu	r2,-5(fp)
 80025b8:	10803fcc 	andi	r2,r2,255
 80025bc:	000b883a 	mov	r5,zero
 80025c0:	1009883a 	mov	r4,r2
 80025c4:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>

    led_bit_toggle(led_command & 0xff);
 80025c8:	e0bfff17 	ldw	r2,-4(fp)
 80025cc:	10bfffcc 	andi	r2,r2,65535
 80025d0:	10803fcc 	andi	r2,r2,255
 80025d4:	1009883a 	mov	r4,r2
 80025d8:	80024980 	call	8002498 <led_bit_toggle>
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
 80025dc:	003fee06 	br	8002598 <LEDManagementTask+0x10>

080025e0 <get_mac_addr>:
* Read the MAC address in a board specific way. Prompt user to enter serial 
* number to generate MAC address if failed to read from flash.
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
 80025e0:	defffb04 	addi	sp,sp,-20
 80025e4:	dfc00415 	stw	ra,16(sp)
 80025e8:	df000315 	stw	fp,12(sp)
 80025ec:	df000304 	addi	fp,sp,12
 80025f0:	e13ffe15 	stw	r4,-8(fp)
 80025f4:	e17ffd15 	stw	r5,-12(fp)
    error_t error = 0;
 80025f8:	e03fff15 	stw	zero,-4(fp)
    
    error = get_board_mac_addr(mac_addr);
 80025fc:	e13ffd17 	ldw	r4,-12(fp)
 8002600:	80029a80 	call	80029a8 <get_board_mac_addr>
 8002604:	e0bfff15 	stw	r2,-4(fp)
    
    if(error)
 8002608:	e0bfff17 	ldw	r2,-4(fp)
 800260c:	10000326 	beq	r2,zero,800261c <get_mac_addr+0x3c>
    {
        /* Failed read MAC address from flash, prompt user to enter serial 
           number to generate MAC address. */
        error = generate_mac_addr(mac_addr);
 8002610:	e13ffd17 	ldw	r4,-12(fp)
 8002614:	80028780 	call	8002878 <generate_mac_addr>
 8002618:	e0bfff15 	stw	r2,-4(fp)
    }
    return error;
 800261c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002620:	e037883a 	mov	sp,fp
 8002624:	dfc00117 	ldw	ra,4(sp)
 8002628:	df000017 	ldw	fp,0(sp)
 800262c:	dec00204 	addi	sp,sp,8
 8002630:	f800283a 	ret

08002634 <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
 8002634:	defffb04 	addi	sp,sp,-20
 8002638:	df000415 	stw	fp,16(sp)
 800263c:	df000404 	addi	fp,sp,16
 8002640:	e13fff15 	stw	r4,-4(fp)
 8002644:	e17ffe15 	stw	r5,-8(fp)
 8002648:	e1bffd15 	stw	r6,-12(fp)
 800264c:	e1fffc15 	stw	r7,-16(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
 8002650:	e0bffe17 	ldw	r2,-8(fp)
 8002654:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
 8002658:	e0bffc17 	ldw	r2,-16(fp)
 800265c:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
 8002660:	e0fffd17 	ldw	r3,-12(fp)
 8002664:	00804034 	movhi	r2,256
 8002668:	10bfffc4 	addi	r2,r2,-1
 800266c:	18800015 	stw	r2,0(r3)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 8002670:	e0800117 	ldw	r2,4(fp)
 8002674:	00c00044 	movi	r3,1
 8002678:	10c00015 	stw	r3,0(r2)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
 800267c:	00800044 	movi	r2,1
}
 8002680:	e037883a 	mov	sp,fp
 8002684:	df000017 	ldw	fp,0(sp)
 8002688:	dec00104 	addi	sp,sp,4
 800268c:	f800283a 	ret

08002690 <get_serial_number>:
*
* Prompt user to enter 9-digit serial number. 
*
*/
alt_u32 get_serial_number (void)
{
 8002690:	defff904 	addi	sp,sp,-28
 8002694:	dfc00615 	stw	ra,24(sp)
 8002698:	df000515 	stw	fp,20(sp)
 800269c:	df000504 	addi	fp,sp,20
    alt_u32 ser_num = 0;
 80026a0:	e03fff15 	stw	zero,-4(fp)
    char serial_number[9];
    int i = 0;
 80026a4:	e03ffe15 	stw	zero,-8(fp)
    
    while(!ser_num)
 80026a8:	00005606 	br	8002804 <get_serial_number+0x174>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
 80026ac:	01020174 	movhi	r4,2053
 80026b0:	213b3b04 	addi	r4,r4,-4884
 80026b4:	80033800 	call	8003380 <puts>
        printf("label under your Nios dev. board. The first 3 digits of the \n");
 80026b8:	01020174 	movhi	r4,2053
 80026bc:	213b4b04 	addi	r4,r4,-4820
 80026c0:	80033800 	call	8003380 <puts>
        printf("label are ASJ and the serial number follows this.\n -->");
 80026c4:	01020174 	movhi	r4,2053
 80026c8:	213b5b04 	addi	r4,r4,-4756
 80026cc:	800325c0 	call	800325c <printf>
        
        for(i=0; i<9; i++)
 80026d0:	e03ffe15 	stw	zero,-8(fp)
 80026d4:	00001d06 	br	800274c <get_serial_number+0xbc>
        {
            serial_number[i] = getchar();
 80026d8:	8002e1c0 	call	8002e1c <getchar>
 80026dc:	1007883a 	mov	r3,r2
 80026e0:	e0bffe17 	ldw	r2,-8(fp)
 80026e4:	e085883a 	add	r2,fp,r2
 80026e8:	10fffbc5 	stb	r3,-17(r2)
            putchar(serial_number[i]);
 80026ec:	e0bffe17 	ldw	r2,-8(fp)
 80026f0:	e085883a 	add	r2,fp,r2
 80026f4:	10bffbc3 	ldbu	r2,-17(r2)
 80026f8:	10803fcc 	andi	r2,r2,255
 80026fc:	1080201c 	xori	r2,r2,128
 8002700:	10bfe004 	addi	r2,r2,-128
 8002704:	1009883a 	mov	r4,r2
 8002708:	800329c0 	call	800329c <putchar>
            
            /* Handle backspaces.  How civilized. */
            if ((serial_number[i] == 0x08) && (i >= 0)) 
 800270c:	e0bffe17 	ldw	r2,-8(fp)
 8002710:	e085883a 	add	r2,fp,r2
 8002714:	10bffbc3 	ldbu	r2,-17(r2)
 8002718:	10803fcc 	andi	r2,r2,255
 800271c:	1080201c 	xori	r2,r2,128
 8002720:	10bfe004 	addi	r2,r2,-128
 8002724:	10800218 	cmpnei	r2,r2,8
 8002728:	1000051e 	bne	r2,zero,8002740 <get_serial_number+0xb0>
 800272c:	e0bffe17 	ldw	r2,-8(fp)
 8002730:	10000316 	blt	r2,zero,8002740 <get_serial_number+0xb0>
            {
                i--;
 8002734:	e0bffe17 	ldw	r2,-8(fp)
 8002738:	10bfffc4 	addi	r2,r2,-1
 800273c:	e0bffe15 	stw	r2,-8(fp)
        for(i=0; i<9; i++)
 8002740:	e0bffe17 	ldw	r2,-8(fp)
 8002744:	10800044 	addi	r2,r2,1
 8002748:	e0bffe15 	stw	r2,-8(fp)
 800274c:	e0bffe17 	ldw	r2,-8(fp)
 8002750:	10800250 	cmplti	r2,r2,9
 8002754:	103fe01e 	bne	r2,zero,80026d8 <get_serial_number+0x48>
            }
        }
        printf("\n");
 8002758:	01000284 	movi	r4,10
 800275c:	800329c0 	call	800329c <putchar>
                
        for(i=0; i<9; i++)
 8002760:	e03ffe15 	stw	zero,-8(fp)
 8002764:	00002406 	br	80027f8 <get_serial_number+0x168>
        {
            if (isdigit(serial_number[i]))
 8002768:	e0bffe17 	ldw	r2,-8(fp)
 800276c:	e085883a 	add	r2,fp,r2
 8002770:	10bffbc3 	ldbu	r2,-17(r2)
 8002774:	10803fcc 	andi	r2,r2,255
 8002778:	1080201c 	xori	r2,r2,128
 800277c:	10bfe004 	addi	r2,r2,-128
 8002780:	10c00044 	addi	r3,r2,1
 8002784:	00820174 	movhi	r2,2053
 8002788:	10bbfa04 	addi	r2,r2,-4120
 800278c:	1885883a 	add	r2,r3,r2
 8002790:	10800003 	ldbu	r2,0(r2)
 8002794:	10803fcc 	andi	r2,r2,255
 8002798:	1080010c 	andi	r2,r2,4
 800279c:	10000e26 	beq	r2,zero,80027d8 <get_serial_number+0x148>
            {
                ser_num *= 10;
 80027a0:	e0bfff17 	ldw	r2,-4(fp)
 80027a4:	108002a4 	muli	r2,r2,10
 80027a8:	e0bfff15 	stw	r2,-4(fp)
                ser_num += serial_number[i] - '0';
 80027ac:	e0bffe17 	ldw	r2,-8(fp)
 80027b0:	e085883a 	add	r2,fp,r2
 80027b4:	10bffbc3 	ldbu	r2,-17(r2)
 80027b8:	10c03fcc 	andi	r3,r2,255
 80027bc:	18c0201c 	xori	r3,r3,128
 80027c0:	18ffe004 	addi	r3,r3,-128
 80027c4:	e0bfff17 	ldw	r2,-4(fp)
 80027c8:	1885883a 	add	r2,r3,r2
 80027cc:	10bff404 	addi	r2,r2,-48
 80027d0:	e0bfff15 	stw	r2,-4(fp)
 80027d4:	00000506 	br	80027ec <get_serial_number+0x15c>
            }
            else
            {
                ser_num = 0;
 80027d8:	e03fff15 	stw	zero,-4(fp)
                printf("Serial number only contains decimal digits and is non-zero\n");
 80027dc:	01020174 	movhi	r4,2053
 80027e0:	213b6904 	addi	r4,r4,-4700
 80027e4:	80033800 	call	8003380 <puts>
                break;
 80027e8:	00000606 	br	8002804 <get_serial_number+0x174>
        for(i=0; i<9; i++)
 80027ec:	e0bffe17 	ldw	r2,-8(fp)
 80027f0:	10800044 	addi	r2,r2,1
 80027f4:	e0bffe15 	stw	r2,-8(fp)
 80027f8:	e0bffe17 	ldw	r2,-8(fp)
 80027fc:	10800250 	cmplti	r2,r2,9
 8002800:	103fd91e 	bne	r2,zero,8002768 <get_serial_number+0xd8>
    while(!ser_num)
 8002804:	e0bfff17 	ldw	r2,-4(fp)
 8002808:	103fa826 	beq	r2,zero,80026ac <get_serial_number+0x1c>
            }
        }
    }
    
    return ser_num;
 800280c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002810:	e037883a 	mov	sp,fp
 8002814:	dfc00117 	ldw	ra,4(sp)
 8002818:	df000017 	ldw	fp,0(sp)
 800281c:	dec00204 	addi	sp,sp,8
 8002820:	f800283a 	ret

08002824 <generate_and_store_mac_addr>:
 * sections. These fail-safe static settings are compatible with previous
 * Nios Ethernet designs, and allow the "factory-safe" design to behave 
 * as expected if the last flash sector is erased.
 */
error_t generate_and_store_mac_addr()
{
 8002824:	defffc04 	addi	sp,sp,-16
 8002828:	dfc00315 	stw	ra,12(sp)
 800282c:	df000215 	stw	fp,8(sp)
 8002830:	df000204 	addi	fp,sp,8
    error_t error = -1;
 8002834:	00bfffc4 	movi	r2,-1
 8002838:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 ser_num = 0;
 800283c:	e03ffe15 	stw	zero,-8(fp)
#ifdef EXT_FLASH_NAME
    char flash_content[32]; 
    alt_flash_fd* flash_handle;
#endif
    
    printf("Can't read the MAC address from your board.\n");
 8002840:	01020174 	movhi	r4,2053
 8002844:	213b7804 	addi	r4,r4,-4640
 8002848:	80033800 	call	8003380 <puts>
    printf("A MAC address and static network settings will be assigned.\n");
 800284c:	01020174 	movhi	r4,2053
 8002850:	213b8304 	addi	r4,r4,-4596
 8002854:	80033800 	call	8003380 <puts>
    
    ser_num = get_serial_number();
 8002858:	80026900 	call	8002690 <get_serial_number>
 800285c:	e0bffe15 	stw	r2,-8(fp)
            error = 0;
        }
#endif          
    }

    return error;    
 8002860:	e0bfff17 	ldw	r2,-4(fp)
}
 8002864:	e037883a 	mov	sp,fp
 8002868:	dfc00117 	ldw	ra,4(sp)
 800286c:	df000017 	ldw	fp,0(sp)
 8002870:	dec00204 	addi	sp,sp,8
 8002874:	f800283a 	ret

08002878 <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
 8002878:	defff804 	addi	sp,sp,-32
 800287c:	dfc00715 	stw	ra,28(sp)
 8002880:	df000615 	stw	fp,24(sp)
 8002884:	df000604 	addi	fp,sp,24
 8002888:	e13ffd15 	stw	r4,-12(fp)
    error_t error = -1;
 800288c:	00bfffc4 	movi	r2,-1
 8002890:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 ser_num = 0;
 8002894:	e03ffe15 	stw	zero,-8(fp)
/* TCM 10-12-2021
 * The code below MODIFIED to not ask about serial number. Always return
 * specific (known good) MAC Address
 *   */

    printf("\nCan't read the MAC address from your board. We will assign you\n");
 8002898:	01020174 	movhi	r4,2053
 800289c:	213b9204 	addi	r4,r4,-4536
 80028a0:	80033800 	call	8003380 <puts>
    printf("a MAC address.\n\n");
 80028a4:	01020174 	movhi	r4,2053
 80028a8:	213ba204 	addi	r4,r4,-4472
 80028ac:	80033800 	call	8003380 <puts>
    
/*    ser_num = get_serial_number(); */
    ser_num = 1;
 80028b0:	00800044 	movi	r2,1
 80028b4:	e0bffe15 	stw	r2,-8(fp)
  
    if (ser_num)
 80028b8:	e0bffe17 	ldw	r2,-8(fp)
 80028bc:	10003426 	beq	r2,zero,8002990 <generate_mac_addr+0x118>
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
 80028c0:	e0bffd17 	ldw	r2,-12(fp)
 80028c4:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x7;
 80028c8:	e0bffd17 	ldw	r2,-12(fp)
 80028cc:	10800044 	addi	r2,r2,1
 80028d0:	00c001c4 	movi	r3,7
 80028d4:	10c00005 	stb	r3,0(r2)
        mac_addr[2] = 0xed;
 80028d8:	e0bffd17 	ldw	r2,-12(fp)
 80028dc:	10800084 	addi	r2,r2,2
 80028e0:	00fffb44 	movi	r3,-19
 80028e4:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
*/

		/* TCM - Force a valid MAC address */
        mac_addr[3] = 0x2A;
 80028e8:	e0bffd17 	ldw	r2,-12(fp)
 80028ec:	108000c4 	addi	r2,r2,3
 80028f0:	00c00a84 	movi	r3,42
 80028f4:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = 0x22;
 80028f8:	e0bffd17 	ldw	r2,-12(fp)
 80028fc:	10800104 	addi	r2,r2,4
 8002900:	00c00884 	movi	r3,34
 8002904:	10c00005 	stb	r3,0(r2)
        mac_addr[5] = 0x16;
 8002908:	e0bffd17 	ldw	r2,-12(fp)
 800290c:	10800144 	addi	r2,r2,5
 8002910:	00c00584 	movi	r3,22
 8002914:	10c00005 	stb	r3,0(r2)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
 8002918:	e0bffd17 	ldw	r2,-12(fp)
 800291c:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002920:	11403fcc 	andi	r5,r2,255
            mac_addr[1],
 8002924:	e0bffd17 	ldw	r2,-12(fp)
 8002928:	10800044 	addi	r2,r2,1
 800292c:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002930:	11803fcc 	andi	r6,r2,255
            mac_addr[2],
 8002934:	e0bffd17 	ldw	r2,-12(fp)
 8002938:	10800084 	addi	r2,r2,2
 800293c:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002940:	11c03fcc 	andi	r7,r2,255
            mac_addr[3],
 8002944:	e0bffd17 	ldw	r2,-12(fp)
 8002948:	108000c4 	addi	r2,r2,3
 800294c:	10800003 	ldbu	r2,0(r2)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002950:	10803fcc 	andi	r2,r2,255
            mac_addr[4],
 8002954:	e0fffd17 	ldw	r3,-12(fp)
 8002958:	18c00104 	addi	r3,r3,4
 800295c:	18c00003 	ldbu	r3,0(r3)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002960:	18c03fcc 	andi	r3,r3,255
            mac_addr[5]);
 8002964:	e13ffd17 	ldw	r4,-12(fp)
 8002968:	21000144 	addi	r4,r4,5
 800296c:	21000003 	ldbu	r4,0(r4)
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 8002970:	21003fcc 	andi	r4,r4,255
 8002974:	d9000215 	stw	r4,8(sp)
 8002978:	d8c00115 	stw	r3,4(sp)
 800297c:	d8800015 	stw	r2,0(sp)
 8002980:	01020174 	movhi	r4,2053
 8002984:	213ba604 	addi	r4,r4,-4456
 8002988:	800325c0 	call	800325c <printf>
        
        error = 0;
 800298c:	e03fff15 	stw	zero,-4(fp)
    }
  
    return error;    
 8002990:	e0bfff17 	ldw	r2,-4(fp)
}
 8002994:	e037883a 	mov	sp,fp
 8002998:	dfc00117 	ldw	ra,4(sp)
 800299c:	df000017 	ldw	fp,0(sp)
 80029a0:	dec00204 	addi	sp,sp,8
 80029a4:	f800283a 	ret

080029a8 <get_board_mac_addr>:
*
* Read the MAC address in a board specific way
*
*/
error_t get_board_mac_addr(unsigned char mac_addr[6])
{
 80029a8:	defffd04 	addi	sp,sp,-12
 80029ac:	df000215 	stw	fp,8(sp)
 80029b0:	df000204 	addi	fp,sp,8
 80029b4:	e13ffe15 	stw	r4,-8(fp)
    error_t error = -1;
 80029b8:	00bfffc4 	movi	r2,-1
 80029bc:	e0bfff15 	stw	r2,-4(fp)
            mac_addr[5]);
    
    }
#endif
    
    return error;
 80029c0:	e0bfff17 	ldw	r2,-4(fp)
}
 80029c4:	e037883a 	mov	sp,fp
 80029c8:	df000017 	ldw	fp,0(sp)
 80029cc:	dec00104 	addi	sp,sp,4
 80029d0:	f800283a 	ret

080029d4 <FindLastFlashSectorOffset>:
 * in pLastFlashSectorOffset.
 */

int FindLastFlashSectorOffset(
    alt_u32                     *pLastFlashSectorOffset)
{
 80029d4:	defffd04 	addi	sp,sp,-12
 80029d8:	df000215 	stw	fp,8(sp)
 80029dc:	df000204 	addi	fp,sp,8
 80029e0:	e13ffe15 	stw	r4,-8(fp)
    int                         error = -1;
 80029e4:	00bfffc4 	movi	r2,-1
 80029e8:	e0bfff15 	stw	r2,-4(fp)
    /* Return results. */
    if (!error)
        *pLastFlashSectorOffset = lastFlashSectorOffset;
#endif

    return (error);
 80029ec:	e0bfff17 	ldw	r2,-4(fp)
}
 80029f0:	e037883a 	mov	sp,fp
 80029f4:	df000017 	ldw	fp,0(sp)
 80029f8:	dec00104 	addi	sp,sp,4
 80029fc:	f800283a 	ret

08002a00 <SSSCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
 8002a00:	defffd04 	addi	sp,sp,-12
 8002a04:	dfc00215 	stw	ra,8(sp)
 8002a08:	df000115 	stw	fp,4(sp)
 8002a0c:	df000104 	addi	fp,sp,4
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
 8002a10:	01400784 	movi	r5,30
 8002a14:	010201b4 	movhi	r4,2054
 8002a18:	21247a04 	addi	r4,r4,-28184
 8002a1c:	80154cc0 	call	80154cc <OSQCreate>
 8002a20:	d0a05815 	stw	r2,-32416(gp)
  if (!SSSLEDCommandQ)
 8002a24:	d0a05817 	ldw	r2,-32416(gp)
 8002a28:	1000041e 	bne	r2,zero,8002a3c <SSSCreateOSDataStructs+0x3c>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 8002a2c:	01420174 	movhi	r5,2053
 8002a30:	297bb504 	addi	r5,r5,-4396
 8002a34:	01003fc4 	movi	r4,255
 8002a38:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
 8002a3c:	e0bfffc4 	addi	r2,fp,-1
 8002a40:	100b883a 	mov	r5,r2
 8002a44:	0009883a 	mov	r4,zero
 8002a48:	80137700 	call	8013770 <OSFlagCreate>
 8002a4c:	d0a05915 	stw	r2,-32412(gp)
  if (!SSSLEDEventFlag)
 8002a50:	d0a05917 	ldw	r2,-32412(gp)
 8002a54:	1000051e 	bne	r2,zero,8002a6c <SSSCreateOSDataStructs+0x6c>
  {
     alt_uCOSIIErrorHandler(error_code, 0);
 8002a58:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a5c:	10803fcc 	andi	r2,r2,255
 8002a60:	000b883a 	mov	r5,zero
 8002a64:	1009883a 	mov	r4,r2
 8002a68:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>
  }
}
 8002a6c:	0001883a 	nop
 8002a70:	e037883a 	mov	sp,fp
 8002a74:	dfc00117 	ldw	ra,4(sp)
 8002a78:	df000017 	ldw	fp,0(sp)
 8002a7c:	dec00204 	addi	sp,sp,8
 8002a80:	f800283a 	ret

08002a84 <SSSCreateTasks>:
/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */
 
void SSSCreateTasks(void)
{
 8002a84:	defff804 	addi	sp,sp,-32
 8002a88:	dfc00715 	stw	ra,28(sp)
 8002a8c:	df000615 	stw	fp,24(sp)
 8002a90:	df000604 	addi	fp,sp,24
   INT8U error_code;
  
   error_code = OSTaskCreateExt(LEDManagementTask,
 8002a94:	d8000415 	stw	zero,16(sp)
 8002a98:	d8000315 	stw	zero,12(sp)
 8002a9c:	00820004 	movi	r2,2048
 8002aa0:	d8800215 	stw	r2,8(sp)
 8002aa4:	008201b4 	movhi	r2,2054
 8002aa8:	10a49804 	addi	r2,r2,-28064
 8002aac:	d8800115 	stw	r2,4(sp)
 8002ab0:	008001c4 	movi	r2,7
 8002ab4:	d8800015 	stw	r2,0(sp)
 8002ab8:	01c001c4 	movi	r7,7
 8002abc:	018201b4 	movhi	r6,2054
 8002ac0:	31ac9704 	addi	r6,r6,-19876
 8002ac4:	000b883a 	mov	r5,zero
 8002ac8:	01020034 	movhi	r4,2048
 8002acc:	21096204 	addi	r4,r4,9608
 8002ad0:	80175e40 	call	80175e4 <OSTaskCreateExt>
 8002ad4:	e0bfffc5 	stb	r2,-1(fp)
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
 8002ad8:	e0bfffc3 	ldbu	r2,-1(fp)
 8002adc:	000b883a 	mov	r5,zero
 8002ae0:	1009883a 	mov	r4,r2
 8002ae4:	80017f00 	call	80017f0 <alt_uCOSIIErrorHandler>

}
 8002ae8:	0001883a 	nop
 8002aec:	e037883a 	mov	sp,fp
 8002af0:	dfc00117 	ldw	ra,4(sp)
 8002af4:	df000017 	ldw	fp,0(sp)
 8002af8:	dec00204 	addi	sp,sp,8
 8002afc:	f800283a 	ret

08002b00 <SSSSimpleSocketServerTask>:
 * OpenHPSDR discovery socket on port 1024. It listens for any received packet
 * on any established socket and dispatches it accordingly.
 *
 */
void SSSSimpleSocketServerTask()
{
 8002b00:	deff9904 	addi	sp,sp,-412
 8002b04:	dfc06615 	stw	ra,408(sp)
 8002b08:	df006515 	stw	fp,404(sp)
 8002b0c:	df006504 	addi	fp,sp,404
  int fd_disc_recv;		// file descriptor (fd) of the receive discovery socket
  struct sockaddr_in addrhost, nilclient;
  fd_set readfds;

  memset(&addrhost, 0, sizeof(struct sockaddr_in));
 8002b10:	e0bff604 	addi	r2,fp,-40
 8002b14:	01800404 	movi	r6,16
 8002b18:	000b883a 	mov	r5,zero
 8002b1c:	1009883a 	mov	r4,r2
 8002b20:	8002fa40 	call	8002fa4 <memset>
  memset(&nilclient, 0, sizeof(struct sockaddr_in));		// discovery request doesn't use client address / port
 8002b24:	e0bff204 	addi	r2,fp,-56
 8002b28:	01800404 	movi	r6,16
 8002b2c:	000b883a 	mov	r5,zero
 8002b30:	1009883a 	mov	r4,r2
 8002b34:	8002fa40 	call	8002fa4 <memset>
  
  initChan();		// Clear table of UDP Channels.
 8002b38:	80003800 	call	8000380 <initChan>
  initItfcMap();		// Build the Interface Map table.
 8002b3c:	80014580 	call	8001458 <initItfcMap>
   * protocol and address families respectively. However, there is usually only
   * 1 address per protocol family. Thus PF_INET and AF_INET can be interchanged.
   * In the case of NicheStack, only the use of AF_INET is supported.
   * PF_INET is not supported in NicheStack.
   */ 
  if ((fd_disc_recv = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 8002b40:	000d883a 	mov	r6,zero
 8002b44:	01400084 	movi	r5,2
 8002b48:	01000084 	movi	r4,2
 8002b4c:	802f1ac0 	call	802f1ac <t_socket>
 8002b50:	e0bffd15 	stw	r2,-12(fp)
 8002b54:	e0bffd17 	ldw	r2,-12(fp)
 8002b58:	1000040e 	bge	r2,zero,8002b6c <SSSSimpleSocketServerTask+0x6c>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Discovery Socket creation failed");
 8002b5c:	01420174 	movhi	r5,2053
 8002b60:	297bbe04 	addi	r5,r5,-4360
 8002b64:	01003fc4 	movi	r4,255
 8002b68:	8001e8c0 	call	8001e8c <alt_NetworkErrorHandler>
   * port and incoming address. In this case we're binding to SSS_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addrhost.sin_family = AF_INET;
 8002b6c:	00800084 	movi	r2,2
 8002b70:	e0bff60d 	sth	r2,-40(fp)
  addrhost.sin_port = htons(1024);
 8002b74:	00800104 	movi	r2,4
 8002b78:	e0bff68d 	sth	r2,-38(fp)
  addrhost.sin_addr.s_addr = INADDR_ANY;	//  any interface on our host
 8002b7c:	e03ff715 	stw	zero,-36(fp)
  
  if ((bind(fd_disc_recv, (struct sockaddr *)&addrhost, sizeof(addrhost))) < 0)
 8002b80:	e0bff604 	addi	r2,fp,-40
 8002b84:	01800404 	movi	r6,16
 8002b88:	100b883a 	mov	r5,r2
 8002b8c:	e13ffd17 	ldw	r4,-12(fp)
 8002b90:	802f22c0 	call	802f22c <t_bind>
 8002b94:	1000040e 	bge	r2,zero,8002ba8 <SSSSimpleSocketServerTask+0xa8>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[TSDR_task] Discovery Bind failed");
 8002b98:	01420174 	movhi	r5,2053
 8002b9c:	297bca04 	addi	r5,r5,-4312
 8002ba0:	01003fc4 	movi	r4,255
 8002ba4:	8001e8c0 	call	8001e8c <alt_NetworkErrorHandler>
  }

  int addresult = buildaddChan(fd_disc_recv, 'D', &addrhost, &nilclient);	// add discovery channel to table
 8002ba8:	e0fff204 	addi	r3,fp,-56
 8002bac:	e0bff604 	addi	r2,fp,-40
 8002bb0:	180f883a 	mov	r7,r3
 8002bb4:	100d883a 	mov	r6,r2
 8002bb8:	01401104 	movi	r5,68
 8002bbc:	e13ffd17 	ldw	r4,-12(fp)
 8002bc0:	800067c0 	call	800067c <buildaddChan>
 8002bc4:	e0bffc15 	stw	r2,-16(fp)
  if (addresult < 0)
 8002bc8:	e0bffc17 	ldw	r2,-16(fp)
 8002bcc:	1000030e 	bge	r2,zero,8002bdc <SSSSimpleSocketServerTask+0xdc>
  {
    printf("[FATAL] Could not add Discovery Channel.  We're probably dead.\n");
 8002bd0:	01020174 	movhi	r4,2053
 8002bd4:	213bd304 	addi	r4,r4,-4276
 8002bd8:	80033800 	call	8003380 <puts>
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
 8002bdc:	e03fb115 	stw	zero,-316(fp)

    int activelist[MAXUDPCHAN];							// list of active channels to retrieve
    int listenercount = allListeners(&activelist[0]);	// count of active channels retrieved
 8002be0:	e0bf9c04 	addi	r2,fp,-400
 8002be4:	1009883a 	mov	r4,r2
 8002be8:	80007100 	call	8000710 <allListeners>
 8002bec:	e0bffb15 	stw	r2,-20(fp)
    for(int i=0; i<listenercount; i++)
 8002bf0:	e03fff15 	stw	zero,-4(fp)
 8002bf4:	00000b06 	br	8002c24 <SSSSimpleSocketServerTask+0x124>
    	FD_SET(activelist[i], &readfds);	// add all active channels to select
 8002bf8:	e0bfff17 	ldw	r2,-4(fp)
 8002bfc:	100490ba 	slli	r2,r2,2
 8002c00:	e085883a 	add	r2,fp,r2
 8002c04:	10bf9c17 	ldw	r2,-400(r2)
 8002c08:	e0ffb104 	addi	r3,fp,-316
 8002c0c:	180b883a 	mov	r5,r3
 8002c10:	1009883a 	mov	r4,r2
 8002c14:	80343440 	call	8034344 <ifd_set>
    for(int i=0; i<listenercount; i++)
 8002c18:	e0bfff17 	ldw	r2,-4(fp)
 8002c1c:	10800044 	addi	r2,r2,1
 8002c20:	e0bfff15 	stw	r2,-4(fp)
 8002c24:	e0ffff17 	ldw	r3,-4(fp)
 8002c28:	e0bffb17 	ldw	r2,-20(fp)
 8002c2c:	18bff216 	blt	r3,r2,8002bf8 <SSSSimpleSocketServerTask+0xf8>

    select(MAXUDPCHAN, &readfds, NULL, NULL, NULL);
 8002c30:	e0bfb104 	addi	r2,fp,-316
 8002c34:	d8000015 	stw	zero,0(sp)
 8002c38:	000f883a 	mov	r7,zero
 8002c3c:	000d883a 	mov	r6,zero
 8002c40:	100b883a 	mov	r5,r2
 8002c44:	01000544 	movi	r4,21
 8002c48:	80278d80 	call	80278d8 <bsd_select>

    for(int i=0; i<listenercount; i++)
 8002c4c:	e03ffe15 	stw	zero,-8(fp)
 8002c50:	00001b06 	br	8002cc0 <SSSSimpleSocketServerTask+0x1c0>
    {
    	if (FD_ISSET(activelist[i], &readfds))		// if we got a packet for the listener
 8002c54:	e0bffe17 	ldw	r2,-8(fp)
 8002c58:	100490ba 	slli	r2,r2,2
 8002c5c:	e085883a 	add	r2,fp,r2
 8002c60:	10bf9c17 	ldw	r2,-400(r2)
 8002c64:	e0ffb104 	addi	r3,fp,-316
 8002c68:	180b883a 	mov	r5,r3
 8002c6c:	1009883a 	mov	r4,r2
 8002c70:	80343b80 	call	80343b8 <ifd_isset>
 8002c74:	10000f26 	beq	r2,zero,8002cb4 <SSSSimpleSocketServerTask+0x1b4>
    	{
    		int index = findfdChan(activelist[i]);
 8002c78:	e0bffe17 	ldw	r2,-8(fp)
 8002c7c:	100490ba 	slli	r2,r2,2
 8002c80:	e085883a 	add	r2,fp,r2
 8002c84:	10bf9c17 	ldw	r2,-400(r2)
 8002c88:	1009883a 	mov	r4,r2
 8002c8c:	800054c0 	call	800054c <findfdChan>
 8002c90:	e0bffa15 	stw	r2,-24(fp)
    		if (index >= 0)
 8002c94:	e0bffa17 	ldw	r2,-24(fp)
 8002c98:	10000316 	blt	r2,zero,8002ca8 <SSSSimpleSocketServerTask+0x1a8>
    			ProcessRxPacket(index);				// process the received packet, say which channel it's on
 8002c9c:	e13ffa17 	ldw	r4,-24(fp)
 8002ca0:	80007a00 	call	80007a0 <ProcessRxPacket>
 8002ca4:	00000306 	br	8002cb4 <SSSSimpleSocketServerTask+0x1b4>
    		else
    			printf("ERROR: Received a Packet but no connection found.\n");
 8002ca8:	01020174 	movhi	r4,2053
 8002cac:	213be304 	addi	r4,r4,-4212
 8002cb0:	80033800 	call	8003380 <puts>
    for(int i=0; i<listenercount; i++)
 8002cb4:	e0bffe17 	ldw	r2,-8(fp)
 8002cb8:	10800044 	addi	r2,r2,1
 8002cbc:	e0bffe15 	stw	r2,-8(fp)
 8002cc0:	e0fffe17 	ldw	r3,-8(fp)
 8002cc4:	e0bffb17 	ldw	r2,-20(fp)
 8002cc8:	18bfe216 	blt	r3,r2,8002c54 <SSSSimpleSocketServerTask+0x154>
  {
 8002ccc:	003fc306 	br	8002bdc <SSSSimpleSocketServerTask+0xdc>

08002cd0 <_fprintf_r>:
 8002cd0:	defffe04 	addi	sp,sp,-8
 8002cd4:	2809883a 	mov	r4,r5
 8002cd8:	300b883a 	mov	r5,r6
 8002cdc:	dfc00015 	stw	ra,0(sp)
 8002ce0:	d9c00115 	stw	r7,4(sp)
 8002ce4:	d9800104 	addi	r6,sp,4
 8002ce8:	8005edc0 	call	8005edc <__vfprintf_internal>
 8002cec:	dfc00017 	ldw	ra,0(sp)
 8002cf0:	dec00204 	addi	sp,sp,8
 8002cf4:	f800283a 	ret

08002cf8 <fprintf>:
 8002cf8:	defffd04 	addi	sp,sp,-12
 8002cfc:	dfc00015 	stw	ra,0(sp)
 8002d00:	d9800115 	stw	r6,4(sp)
 8002d04:	d9c00215 	stw	r7,8(sp)
 8002d08:	d9800104 	addi	r6,sp,4
 8002d0c:	8005edc0 	call	8005edc <__vfprintf_internal>
 8002d10:	dfc00017 	ldw	ra,0(sp)
 8002d14:	dec00304 	addi	sp,sp,12
 8002d18:	f800283a 	ret

08002d1c <_fwrite_r>:
 8002d1c:	defff604 	addi	sp,sp,-40
 8002d20:	dcc00815 	stw	r19,32(sp)
 8002d24:	39a7383a 	mul	r19,r7,r6
 8002d28:	00800044 	movi	r2,1
 8002d2c:	dc800715 	stw	r18,28(sp)
 8002d30:	dc400615 	stw	r17,24(sp)
 8002d34:	dc000515 	stw	r16,20(sp)
 8002d38:	d9400015 	stw	r5,0(sp)
 8002d3c:	dfc00915 	stw	ra,36(sp)
 8002d40:	dcc00115 	stw	r19,4(sp)
 8002d44:	dcc00415 	stw	r19,16(sp)
 8002d48:	dec00215 	stw	sp,8(sp)
 8002d4c:	d8800315 	stw	r2,12(sp)
 8002d50:	d9400a17 	ldw	r5,40(sp)
 8002d54:	3025883a 	mov	r18,r6
 8002d58:	3821883a 	mov	r16,r7
 8002d5c:	2023883a 	mov	r17,r4
 8002d60:	20000226 	beq	r4,zero,8002d6c <_fwrite_r+0x50>
 8002d64:	20800e17 	ldw	r2,56(r4)
 8002d68:	10001826 	beq	r2,zero,8002dcc <_fwrite_r+0xb0>
 8002d6c:	2880030b 	ldhu	r2,12(r5)
 8002d70:	10c8000c 	andi	r3,r2,8192
 8002d74:	1800061e 	bne	r3,zero,8002d90 <_fwrite_r+0x74>
 8002d78:	28c01917 	ldw	r3,100(r5)
 8002d7c:	0137ffc4 	movi	r4,-8193
 8002d80:	10880014 	ori	r2,r2,8192
 8002d84:	1906703a 	and	r3,r3,r4
 8002d88:	2880030d 	sth	r2,12(r5)
 8002d8c:	28c01915 	stw	r3,100(r5)
 8002d90:	d9800204 	addi	r6,sp,8
 8002d94:	8809883a 	mov	r4,r17
 8002d98:	80085340 	call	8008534 <__sfvwrite_r>
 8002d9c:	10000e26 	beq	r2,zero,8002dd8 <_fwrite_r+0xbc>
 8002da0:	d9000417 	ldw	r4,16(sp)
 8002da4:	900b883a 	mov	r5,r18
 8002da8:	9909c83a 	sub	r4,r19,r4
 8002dac:	800e2300 	call	800e230 <__udivsi3>
 8002db0:	dfc00917 	ldw	ra,36(sp)
 8002db4:	dcc00817 	ldw	r19,32(sp)
 8002db8:	dc800717 	ldw	r18,28(sp)
 8002dbc:	dc400617 	ldw	r17,24(sp)
 8002dc0:	dc000517 	ldw	r16,20(sp)
 8002dc4:	dec00a04 	addi	sp,sp,40
 8002dc8:	f800283a 	ret
 8002dcc:	80080d40 	call	80080d4 <__sinit>
 8002dd0:	d9400a17 	ldw	r5,40(sp)
 8002dd4:	003fe506 	br	8002d6c <_fwrite_r+0x50>
 8002dd8:	8005883a 	mov	r2,r16
 8002ddc:	003ff406 	br	8002db0 <_fwrite_r+0x94>

08002de0 <fwrite>:
 8002de0:	00c20174 	movhi	r3,2053
 8002de4:	2005883a 	mov	r2,r4
 8002de8:	1918e017 	ldw	r4,25472(r3)
 8002dec:	defffe04 	addi	sp,sp,-8
 8002df0:	d9c00015 	stw	r7,0(sp)
 8002df4:	300f883a 	mov	r7,r6
 8002df8:	280d883a 	mov	r6,r5
 8002dfc:	100b883a 	mov	r5,r2
 8002e00:	dfc00115 	stw	ra,4(sp)
 8002e04:	8002d1c0 	call	8002d1c <_fwrite_r>
 8002e08:	dfc00117 	ldw	ra,4(sp)
 8002e0c:	dec00204 	addi	sp,sp,8
 8002e10:	f800283a 	ret

08002e14 <_getchar_r>:
 8002e14:	21400117 	ldw	r5,4(r4)
 8002e18:	8008b301 	jmpi	8008b30 <_getc_r>

08002e1c <getchar>:
 8002e1c:	00820174 	movhi	r2,2053
 8002e20:	1118e017 	ldw	r4,25472(r2)
 8002e24:	21400117 	ldw	r5,4(r4)
 8002e28:	8008b301 	jmpi	8008b30 <_getc_r>

08002e2c <memcmp>:
 8002e2c:	30800130 	cmpltui	r2,r6,4
 8002e30:	10000b1e 	bne	r2,zero,8002e60 <memcmp+0x34>
 8002e34:	2144b03a 	or	r2,r4,r5
 8002e38:	108000cc 	andi	r2,r2,3
 8002e3c:	1000171e 	bne	r2,zero,8002e9c <memcmp+0x70>
 8002e40:	20c00017 	ldw	r3,0(r4)
 8002e44:	28800017 	ldw	r2,0(r5)
 8002e48:	1880141e 	bne	r3,r2,8002e9c <memcmp+0x70>
 8002e4c:	31bfff04 	addi	r6,r6,-4
 8002e50:	30800128 	cmpgeui	r2,r6,4
 8002e54:	21000104 	addi	r4,r4,4
 8002e58:	29400104 	addi	r5,r5,4
 8002e5c:	103ff81e 	bne	r2,zero,8002e40 <memcmp+0x14>
 8002e60:	30bfffc4 	addi	r2,r6,-1
 8002e64:	30000b26 	beq	r6,zero,8002e94 <memcmp+0x68>
 8002e68:	11800044 	addi	r6,r2,1
 8002e6c:	298d883a 	add	r6,r5,r6
 8002e70:	00000106 	br	8002e78 <memcmp+0x4c>
 8002e74:	29800726 	beq	r5,r6,8002e94 <memcmp+0x68>
 8002e78:	20800003 	ldbu	r2,0(r4)
 8002e7c:	28c00003 	ldbu	r3,0(r5)
 8002e80:	21000044 	addi	r4,r4,1
 8002e84:	29400044 	addi	r5,r5,1
 8002e88:	10fffa26 	beq	r2,r3,8002e74 <memcmp+0x48>
 8002e8c:	10c5c83a 	sub	r2,r2,r3
 8002e90:	f800283a 	ret
 8002e94:	0005883a 	mov	r2,zero
 8002e98:	f800283a 	ret
 8002e9c:	30bfffc4 	addi	r2,r6,-1
 8002ea0:	003ff106 	br	8002e68 <memcmp+0x3c>

08002ea4 <memcpy>:
 8002ea4:	30c00430 	cmpltui	r3,r6,16
 8002ea8:	2005883a 	mov	r2,r4
 8002eac:	18002d1e 	bne	r3,zero,8002f64 <memcpy+0xc0>
 8002eb0:	2906b03a 	or	r3,r5,r4
 8002eb4:	18c000cc 	andi	r3,r3,3
 8002eb8:	1800351e 	bne	r3,zero,8002f90 <memcpy+0xec>
 8002ebc:	32fffc04 	addi	r11,r6,-16
 8002ec0:	5816d13a 	srli	r11,r11,4
 8002ec4:	280f883a 	mov	r7,r5
 8002ec8:	2007883a 	mov	r3,r4
 8002ecc:	5ac00044 	addi	r11,r11,1
 8002ed0:	5816913a 	slli	r11,r11,4
 8002ed4:	22d5883a 	add	r10,r4,r11
 8002ed8:	39000117 	ldw	r4,4(r7)
 8002edc:	3a400017 	ldw	r9,0(r7)
 8002ee0:	3a000217 	ldw	r8,8(r7)
 8002ee4:	19000115 	stw	r4,4(r3)
 8002ee8:	39000317 	ldw	r4,12(r7)
 8002eec:	1a400015 	stw	r9,0(r3)
 8002ef0:	1a000215 	stw	r8,8(r3)
 8002ef4:	19000315 	stw	r4,12(r3)
 8002ef8:	18c00404 	addi	r3,r3,16
 8002efc:	39c00404 	addi	r7,r7,16
 8002f00:	50fff51e 	bne	r10,r3,8002ed8 <memcpy+0x34>
 8002f04:	3100030c 	andi	r4,r6,12
 8002f08:	2acb883a 	add	r5,r5,r11
 8002f0c:	320003cc 	andi	r8,r6,15
 8002f10:	20002226 	beq	r4,zero,8002f9c <memcpy+0xf8>
 8002f14:	280f883a 	mov	r7,r5
 8002f18:	1813883a 	mov	r9,r3
 8002f1c:	39c00104 	addi	r7,r7,4
 8002f20:	3abfff17 	ldw	r10,-4(r7)
 8002f24:	41c9c83a 	sub	r4,r8,r7
 8002f28:	2909883a 	add	r4,r5,r4
 8002f2c:	4a800015 	stw	r10,0(r9)
 8002f30:	21000128 	cmpgeui	r4,r4,4
 8002f34:	4a400104 	addi	r9,r9,4
 8002f38:	203ff81e 	bne	r4,zero,8002f1c <memcpy+0x78>
 8002f3c:	413fff04 	addi	r4,r8,-4
 8002f40:	2008d0ba 	srli	r4,r4,2
 8002f44:	318000cc 	andi	r6,r6,3
 8002f48:	31ffffc4 	addi	r7,r6,-1
 8002f4c:	21000044 	addi	r4,r4,1
 8002f50:	200890ba 	slli	r4,r4,2
 8002f54:	1907883a 	add	r3,r3,r4
 8002f58:	290b883a 	add	r5,r5,r4
 8002f5c:	3000041e 	bne	r6,zero,8002f70 <memcpy+0xcc>
 8002f60:	f800283a 	ret
 8002f64:	2007883a 	mov	r3,r4
 8002f68:	31ffffc4 	addi	r7,r6,-1
 8002f6c:	303ffc26 	beq	r6,zero,8002f60 <memcpy+0xbc>
 8002f70:	39c00044 	addi	r7,r7,1
 8002f74:	19cf883a 	add	r7,r3,r7
 8002f78:	29800003 	ldbu	r6,0(r5)
 8002f7c:	18c00044 	addi	r3,r3,1
 8002f80:	29400044 	addi	r5,r5,1
 8002f84:	19bfffc5 	stb	r6,-1(r3)
 8002f88:	38fffb1e 	bne	r7,r3,8002f78 <memcpy+0xd4>
 8002f8c:	f800283a 	ret
 8002f90:	31ffffc4 	addi	r7,r6,-1
 8002f94:	2007883a 	mov	r3,r4
 8002f98:	003ff506 	br	8002f70 <memcpy+0xcc>
 8002f9c:	400d883a 	mov	r6,r8
 8002fa0:	003ff106 	br	8002f68 <memcpy+0xc4>

08002fa4 <memset>:
 8002fa4:	20c000cc 	andi	r3,r4,3
 8002fa8:	2005883a 	mov	r2,r4
 8002fac:	18003626 	beq	r3,zero,8003088 <memset+0xe4>
 8002fb0:	31ffffc4 	addi	r7,r6,-1
 8002fb4:	30003326 	beq	r6,zero,8003084 <memset+0xe0>
 8002fb8:	2811883a 	mov	r8,r5
 8002fbc:	2007883a 	mov	r3,r4
 8002fc0:	00000306 	br	8002fd0 <memset+0x2c>
 8002fc4:	39ffffc4 	addi	r7,r7,-1
 8002fc8:	39bfffe0 	cmpeqi	r6,r7,-1
 8002fcc:	30002d1e 	bne	r6,zero,8003084 <memset+0xe0>
 8002fd0:	18c00044 	addi	r3,r3,1
 8002fd4:	198000cc 	andi	r6,r3,3
 8002fd8:	1a3fffc5 	stb	r8,-1(r3)
 8002fdc:	303ff91e 	bne	r6,zero,8002fc4 <memset+0x20>
 8002fe0:	39000130 	cmpltui	r4,r7,4
 8002fe4:	2000221e 	bne	r4,zero,8003070 <memset+0xcc>
 8002fe8:	29003fcc 	andi	r4,r5,255
 8002fec:	200c923a 	slli	r6,r4,8
 8002ff0:	3a000430 	cmpltui	r8,r7,16
 8002ff4:	3108b03a 	or	r4,r6,r4
 8002ff8:	200c943a 	slli	r6,r4,16
 8002ffc:	310cb03a 	or	r6,r6,r4
 8003000:	40000e1e 	bne	r8,zero,800303c <memset+0x98>
 8003004:	393ffc04 	addi	r4,r7,-16
 8003008:	2008d13a 	srli	r4,r4,4
 800300c:	21000044 	addi	r4,r4,1
 8003010:	2008913a 	slli	r4,r4,4
 8003014:	1909883a 	add	r4,r3,r4
 8003018:	19800015 	stw	r6,0(r3)
 800301c:	19800115 	stw	r6,4(r3)
 8003020:	19800215 	stw	r6,8(r3)
 8003024:	19800315 	stw	r6,12(r3)
 8003028:	18c00404 	addi	r3,r3,16
 800302c:	20fffa1e 	bne	r4,r3,8003018 <memset+0x74>
 8003030:	3900030c 	andi	r4,r7,12
 8003034:	39c003cc 	andi	r7,r7,15
 8003038:	20000d26 	beq	r4,zero,8003070 <memset+0xcc>
 800303c:	1811883a 	mov	r8,r3
 8003040:	42000104 	addi	r8,r8,4
 8003044:	3a09c83a 	sub	r4,r7,r8
 8003048:	1909883a 	add	r4,r3,r4
 800304c:	21000128 	cmpgeui	r4,r4,4
 8003050:	41bfff15 	stw	r6,-4(r8)
 8003054:	203ffa1e 	bne	r4,zero,8003040 <memset+0x9c>
 8003058:	393fff04 	addi	r4,r7,-4
 800305c:	2008d0ba 	srli	r4,r4,2
 8003060:	39c000cc 	andi	r7,r7,3
 8003064:	21000044 	addi	r4,r4,1
 8003068:	200890ba 	slli	r4,r4,2
 800306c:	1907883a 	add	r3,r3,r4
 8003070:	38000426 	beq	r7,zero,8003084 <memset+0xe0>
 8003074:	19cf883a 	add	r7,r3,r7
 8003078:	18c00044 	addi	r3,r3,1
 800307c:	197fffc5 	stb	r5,-1(r3)
 8003080:	38fffd1e 	bne	r7,r3,8003078 <memset+0xd4>
 8003084:	f800283a 	ret
 8003088:	2007883a 	mov	r3,r4
 800308c:	300f883a 	mov	r7,r6
 8003090:	003fd306 	br	8002fe0 <memset+0x3c>

08003094 <_perror_r>:
 8003094:	defffa04 	addi	sp,sp,-24
 8003098:	dcc00415 	stw	r19,16(sp)
 800309c:	dc400215 	stw	r17,8(sp)
 80030a0:	dc000115 	stw	r16,4(sp)
 80030a4:	dfc00515 	stw	ra,20(sp)
 80030a8:	dc800315 	stw	r18,12(sp)
 80030ac:	24c00317 	ldw	r19,12(r4)
 80030b0:	2023883a 	mov	r17,r4
 80030b4:	2821883a 	mov	r16,r5
 80030b8:	20000226 	beq	r4,zero,80030c4 <_perror_r+0x30>
 80030bc:	20800e17 	ldw	r2,56(r4)
 80030c0:	10005426 	beq	r2,zero,8003214 <_perror_r+0x180>
 80030c4:	980b883a 	mov	r5,r19
 80030c8:	8809883a 	mov	r4,r17
 80030cc:	8007cec0 	call	8007cec <_fflush_r>
 80030d0:	80000226 	beq	r16,zero,80030dc <_perror_r+0x48>
 80030d4:	80800007 	ldb	r2,0(r16)
 80030d8:	10002f1e 	bne	r2,zero,8003198 <_perror_r+0x104>
 80030dc:	89400017 	ldw	r5,0(r17)
 80030e0:	d80f883a 	mov	r7,sp
 80030e4:	01800044 	movi	r6,1
 80030e8:	8809883a 	mov	r4,r17
 80030ec:	80033900 	call	8003390 <_strerror_r>
 80030f0:	1025883a 	mov	r18,r2
 80030f4:	10001026 	beq	r2,zero,8003138 <_perror_r+0xa4>
 80030f8:	1009883a 	mov	r4,r2
 80030fc:	8003a1c0 	call	8003a1c <strlen>
 8003100:	1021883a 	mov	r16,r2
 8003104:	1000031e 	bne	r2,zero,8003114 <_perror_r+0x80>
 8003108:	00000b06 	br	8003138 <_perror_r+0xa4>
 800310c:	90a5883a 	add	r18,r18,r2
 8003110:	80000926 	beq	r16,zero,8003138 <_perror_r+0xa4>
 8003114:	9809883a 	mov	r4,r19
 8003118:	8007d740 	call	8007d74 <fileno>
 800311c:	800f883a 	mov	r7,r16
 8003120:	900d883a 	mov	r6,r18
 8003124:	100b883a 	mov	r5,r2
 8003128:	8809883a 	mov	r4,r17
 800312c:	8005fb80 	call	8005fb8 <_write_r>
 8003130:	80a1c83a 	sub	r16,r16,r2
 8003134:	103ff50e 	bge	r2,zero,800310c <_perror_r+0x78>
 8003138:	04820174 	movhi	r18,2053
 800313c:	04000044 	movi	r16,1
 8003140:	94bc9c04 	addi	r18,r18,-3472
 8003144:	9809883a 	mov	r4,r19
 8003148:	8007d740 	call	8007d74 <fileno>
 800314c:	800f883a 	mov	r7,r16
 8003150:	900d883a 	mov	r6,r18
 8003154:	100b883a 	mov	r5,r2
 8003158:	8809883a 	mov	r4,r17
 800315c:	8005fb80 	call	8005fb8 <_write_r>
 8003160:	80a1c83a 	sub	r16,r16,r2
 8003164:	10000216 	blt	r2,zero,8003170 <_perror_r+0xdc>
 8003168:	90a5883a 	add	r18,r18,r2
 800316c:	803ff51e 	bne	r16,zero,8003144 <_perror_r+0xb0>
 8003170:	9880030b 	ldhu	r2,12(r19)
 8003174:	10bbffcc 	andi	r2,r2,61439
 8003178:	9880030d 	sth	r2,12(r19)
 800317c:	dfc00517 	ldw	ra,20(sp)
 8003180:	dcc00417 	ldw	r19,16(sp)
 8003184:	dc800317 	ldw	r18,12(sp)
 8003188:	dc400217 	ldw	r17,8(sp)
 800318c:	dc000117 	ldw	r16,4(sp)
 8003190:	dec00604 	addi	sp,sp,24
 8003194:	f800283a 	ret
 8003198:	8009883a 	mov	r4,r16
 800319c:	8003a1c0 	call	8003a1c <strlen>
 80031a0:	1025883a 	mov	r18,r2
 80031a4:	1000031e 	bne	r2,zero,80031b4 <_perror_r+0x120>
 80031a8:	00000b06 	br	80031d8 <_perror_r+0x144>
 80031ac:	80a1883a 	add	r16,r16,r2
 80031b0:	90000926 	beq	r18,zero,80031d8 <_perror_r+0x144>
 80031b4:	9809883a 	mov	r4,r19
 80031b8:	8007d740 	call	8007d74 <fileno>
 80031bc:	900f883a 	mov	r7,r18
 80031c0:	800d883a 	mov	r6,r16
 80031c4:	100b883a 	mov	r5,r2
 80031c8:	8809883a 	mov	r4,r17
 80031cc:	8005fb80 	call	8005fb8 <_write_r>
 80031d0:	90a5c83a 	sub	r18,r18,r2
 80031d4:	103ff50e 	bge	r2,zero,80031ac <_perror_r+0x118>
 80031d8:	04820174 	movhi	r18,2053
 80031dc:	04000084 	movi	r16,2
 80031e0:	94bc9b04 	addi	r18,r18,-3476
 80031e4:	9809883a 	mov	r4,r19
 80031e8:	8007d740 	call	8007d74 <fileno>
 80031ec:	800f883a 	mov	r7,r16
 80031f0:	900d883a 	mov	r6,r18
 80031f4:	100b883a 	mov	r5,r2
 80031f8:	8809883a 	mov	r4,r17
 80031fc:	8005fb80 	call	8005fb8 <_write_r>
 8003200:	80a1c83a 	sub	r16,r16,r2
 8003204:	103fb516 	blt	r2,zero,80030dc <_perror_r+0x48>
 8003208:	90a5883a 	add	r18,r18,r2
 800320c:	803ff51e 	bne	r16,zero,80031e4 <_perror_r+0x150>
 8003210:	003fb206 	br	80030dc <_perror_r+0x48>
 8003214:	80080d40 	call	80080d4 <__sinit>
 8003218:	003faa06 	br	80030c4 <_perror_r+0x30>

0800321c <perror>:
 800321c:	00820174 	movhi	r2,2053
 8003220:	200b883a 	mov	r5,r4
 8003224:	1118e017 	ldw	r4,25472(r2)
 8003228:	80030941 	jmpi	8003094 <_perror_r>

0800322c <_printf_r>:
 800322c:	defffd04 	addi	sp,sp,-12
 8003230:	2805883a 	mov	r2,r5
 8003234:	dfc00015 	stw	ra,0(sp)
 8003238:	d9800115 	stw	r6,4(sp)
 800323c:	d9c00215 	stw	r7,8(sp)
 8003240:	21400217 	ldw	r5,8(r4)
 8003244:	d9c00104 	addi	r7,sp,4
 8003248:	100d883a 	mov	r6,r2
 800324c:	8003e000 	call	8003e00 <___vfprintf_internal_r>
 8003250:	dfc00017 	ldw	ra,0(sp)
 8003254:	dec00304 	addi	sp,sp,12
 8003258:	f800283a 	ret

0800325c <printf>:
 800325c:	defffc04 	addi	sp,sp,-16
 8003260:	dfc00015 	stw	ra,0(sp)
 8003264:	d9400115 	stw	r5,4(sp)
 8003268:	d9800215 	stw	r6,8(sp)
 800326c:	d9c00315 	stw	r7,12(sp)
 8003270:	00820174 	movhi	r2,2053
 8003274:	1098e017 	ldw	r2,25472(r2)
 8003278:	200b883a 	mov	r5,r4
 800327c:	d9800104 	addi	r6,sp,4
 8003280:	11000217 	ldw	r4,8(r2)
 8003284:	8005edc0 	call	8005edc <__vfprintf_internal>
 8003288:	dfc00017 	ldw	ra,0(sp)
 800328c:	dec00404 	addi	sp,sp,16
 8003290:	f800283a 	ret

08003294 <_putchar_r>:
 8003294:	21800217 	ldw	r6,8(r4)
 8003298:	800a8b01 	jmpi	800a8b0 <_putc_r>

0800329c <putchar>:
 800329c:	00820174 	movhi	r2,2053
 80032a0:	1098e017 	ldw	r2,25472(r2)
 80032a4:	200b883a 	mov	r5,r4
 80032a8:	11800217 	ldw	r6,8(r2)
 80032ac:	1009883a 	mov	r4,r2
 80032b0:	800a8b01 	jmpi	800a8b0 <_putc_r>

080032b4 <_puts_r>:
 80032b4:	defff504 	addi	sp,sp,-44
 80032b8:	dc000815 	stw	r16,32(sp)
 80032bc:	2021883a 	mov	r16,r4
 80032c0:	2809883a 	mov	r4,r5
 80032c4:	dc400915 	stw	r17,36(sp)
 80032c8:	dfc00a15 	stw	ra,40(sp)
 80032cc:	2823883a 	mov	r17,r5
 80032d0:	8003a1c0 	call	8003a1c <strlen>
 80032d4:	11000044 	addi	r4,r2,1
 80032d8:	d8800515 	stw	r2,20(sp)
 80032dc:	00800044 	movi	r2,1
 80032e0:	00c20174 	movhi	r3,2053
 80032e4:	d8800715 	stw	r2,28(sp)
 80032e8:	d8800404 	addi	r2,sp,16
 80032ec:	18fc9c04 	addi	r3,r3,-3472
 80032f0:	d8800115 	stw	r2,4(sp)
 80032f4:	00800084 	movi	r2,2
 80032f8:	dc400415 	stw	r17,16(sp)
 80032fc:	d8c00615 	stw	r3,24(sp)
 8003300:	d9000315 	stw	r4,12(sp)
 8003304:	d8800215 	stw	r2,8(sp)
 8003308:	81400217 	ldw	r5,8(r16)
 800330c:	80000226 	beq	r16,zero,8003318 <_puts_r+0x64>
 8003310:	80800e17 	ldw	r2,56(r16)
 8003314:	10001326 	beq	r2,zero,8003364 <_puts_r+0xb0>
 8003318:	2880030b 	ldhu	r2,12(r5)
 800331c:	10c8000c 	andi	r3,r2,8192
 8003320:	1800061e 	bne	r3,zero,800333c <_puts_r+0x88>
 8003324:	28c01917 	ldw	r3,100(r5)
 8003328:	0137ffc4 	movi	r4,-8193
 800332c:	10880014 	ori	r2,r2,8192
 8003330:	1906703a 	and	r3,r3,r4
 8003334:	2880030d 	sth	r2,12(r5)
 8003338:	28c01915 	stw	r3,100(r5)
 800333c:	d9800104 	addi	r6,sp,4
 8003340:	8009883a 	mov	r4,r16
 8003344:	80085340 	call	8008534 <__sfvwrite_r>
 8003348:	10000b1e 	bne	r2,zero,8003378 <_puts_r+0xc4>
 800334c:	00800284 	movi	r2,10
 8003350:	dfc00a17 	ldw	ra,40(sp)
 8003354:	dc400917 	ldw	r17,36(sp)
 8003358:	dc000817 	ldw	r16,32(sp)
 800335c:	dec00b04 	addi	sp,sp,44
 8003360:	f800283a 	ret
 8003364:	8009883a 	mov	r4,r16
 8003368:	d9400015 	stw	r5,0(sp)
 800336c:	80080d40 	call	80080d4 <__sinit>
 8003370:	d9400017 	ldw	r5,0(sp)
 8003374:	003fe806 	br	8003318 <_puts_r+0x64>
 8003378:	00bfffc4 	movi	r2,-1
 800337c:	003ff406 	br	8003350 <_puts_r+0x9c>

08003380 <puts>:
 8003380:	00820174 	movhi	r2,2053
 8003384:	200b883a 	mov	r5,r4
 8003388:	1118e017 	ldw	r4,25472(r2)
 800338c:	80032b41 	jmpi	80032b4 <_puts_r>

08003390 <_strerror_r>:
 8003390:	28c023e8 	cmpgeui	r3,r5,143
 8003394:	2805883a 	mov	r2,r5
 8003398:	300b883a 	mov	r5,r6
 800339c:	1800941e 	bne	r3,zero,80035f0 <_strerror_r+0x260>
 80033a0:	101090ba 	slli	r8,r2,2
 80033a4:	00c20034 	movhi	r3,2048
 80033a8:	40c7883a 	add	r3,r8,r3
 80033ac:	18cced17 	ldw	r3,13236(r3)
 80033b0:	1800683a 	jmp	r3
 80033b4:	080039c0 	call	80039c <OSCtxSw_SWITCH_PC+0x80035c>
 80033b8:	080039cc 	andi	zero,at,231
 80033bc:	080039b4 	orhi	zero,at,230
 80033c0:	080039a8 	cmpgeui	zero,at,230
 80033c4:	0800399c 	xori	zero,at,230
 80033c8:	08003990 	cmplti	zero,at,230
 80033cc:	08003984 	addi	zero,at,230
 80033d0:	08003978 	rdprs	zero,at,229
 80033d4:	0800396c 	andhi	zero,at,229
 80033d8:	08003960 	cmpeqi	zero,at,229
 80033dc:	08003954 	ori	zero,at,229
 80033e0:	08003948 	cmpgei	zero,at,229
 80033e4:	0800393c 	xorhi	zero,at,228
 80033e8:	08003930 	cmpltui	zero,at,228
 80033ec:	08003924 	muli	zero,at,228
 80033f0:	080035f0 	cmpltui	zero,at,215
 80033f4:	08003918 	cmpnei	zero,at,228
 80033f8:	0800390c 	andi	zero,at,228
 80033fc:	08003900 	call	800390 <OSCtxSw_SWITCH_PC+0x800350>
 8003400:	080038f4 	orhi	zero,at,227
 8003404:	080038e8 	cmpgeui	zero,at,227
 8003408:	080038dc 	xori	zero,at,227
 800340c:	080038d0 	cmplti	zero,at,227
 8003410:	080038c4 	addi	zero,at,227
 8003414:	080038b8 	rdprs	zero,at,226
 8003418:	080038ac 	andhi	zero,at,226
 800341c:	080038a0 	cmpeqi	zero,at,226
 8003420:	08003894 	ori	zero,at,226
 8003424:	08003888 	cmpgei	zero,at,226
 8003428:	0800387c 	xorhi	zero,at,225
 800342c:	08003870 	cmpltui	zero,at,225
 8003430:	08003864 	muli	zero,at,225
 8003434:	08003858 	cmpnei	zero,at,225
 8003438:	0800384c 	andi	zero,at,225
 800343c:	08003840 	call	800384 <OSCtxSw_SWITCH_PC+0x800344>
 8003440:	08003834 	orhi	zero,at,224
 8003444:	08003828 	cmpgeui	zero,at,224
 8003448:	080035f0 	cmpltui	zero,at,215
 800344c:	080035f0 	cmpltui	zero,at,215
 8003450:	080035f0 	cmpltui	zero,at,215
 8003454:	080035f0 	cmpltui	zero,at,215
 8003458:	080035f0 	cmpltui	zero,at,215
 800345c:	080035f0 	cmpltui	zero,at,215
 8003460:	080035f0 	cmpltui	zero,at,215
 8003464:	080035f0 	cmpltui	zero,at,215
 8003468:	0800381c 	xori	zero,at,224
 800346c:	08003810 	cmplti	zero,at,224
 8003470:	080035f0 	cmpltui	zero,at,215
 8003474:	080035f0 	cmpltui	zero,at,215
 8003478:	080035f0 	cmpltui	zero,at,215
 800347c:	080035f0 	cmpltui	zero,at,215
 8003480:	080035f0 	cmpltui	zero,at,215
 8003484:	080035f0 	cmpltui	zero,at,215
 8003488:	080035f0 	cmpltui	zero,at,215
 800348c:	080035f0 	cmpltui	zero,at,215
 8003490:	080035f0 	cmpltui	zero,at,215
 8003494:	080035f0 	cmpltui	zero,at,215
 8003498:	080035f0 	cmpltui	zero,at,215
 800349c:	080035f0 	cmpltui	zero,at,215
 80034a0:	080035f0 	cmpltui	zero,at,215
 80034a4:	08003804 	addi	zero,at,224
 80034a8:	080037f8 	rdprs	zero,at,223
 80034ac:	080037ec 	andhi	zero,at,223
 80034b0:	080037e0 	cmpeqi	zero,at,223
 80034b4:	080035f0 	cmpltui	zero,at,215
 80034b8:	080035f0 	cmpltui	zero,at,215
 80034bc:	080035f0 	cmpltui	zero,at,215
 80034c0:	080037d4 	ori	zero,at,223
 80034c4:	080035f0 	cmpltui	zero,at,215
 80034c8:	080035f0 	cmpltui	zero,at,215
 80034cc:	080035f0 	cmpltui	zero,at,215
 80034d0:	080037c8 	cmpgei	zero,at,223
 80034d4:	080035f0 	cmpltui	zero,at,215
 80034d8:	080035f0 	cmpltui	zero,at,215
 80034dc:	080037bc 	xorhi	zero,at,222
 80034e0:	080035f0 	cmpltui	zero,at,215
 80034e4:	080035f0 	cmpltui	zero,at,215
 80034e8:	080037b0 	cmpltui	zero,at,222
 80034ec:	080035f0 	cmpltui	zero,at,215
 80034f0:	080035f0 	cmpltui	zero,at,215
 80034f4:	080035f0 	cmpltui	zero,at,215
 80034f8:	080035f0 	cmpltui	zero,at,215
 80034fc:	080035f0 	cmpltui	zero,at,215
 8003500:	080035f0 	cmpltui	zero,at,215
 8003504:	080035f0 	cmpltui	zero,at,215
 8003508:	080035f0 	cmpltui	zero,at,215
 800350c:	080035f0 	cmpltui	zero,at,215
 8003510:	080035f0 	cmpltui	zero,at,215
 8003514:	080037a4 	muli	zero,at,222
 8003518:	080035f0 	cmpltui	zero,at,215
 800351c:	08003798 	cmpnei	zero,at,222
 8003520:	0800378c 	andi	zero,at,222
 8003524:	08003780 	call	800378 <OSCtxSw_SWITCH_PC+0x800338>
 8003528:	080035f0 	cmpltui	zero,at,215
 800352c:	080035f0 	cmpltui	zero,at,215
 8003530:	08003774 	orhi	zero,at,221
 8003534:	080035f0 	cmpltui	zero,at,215
 8003538:	080035f0 	cmpltui	zero,at,215
 800353c:	080035f0 	cmpltui	zero,at,215
 8003540:	080035f0 	cmpltui	zero,at,215
 8003544:	080035f0 	cmpltui	zero,at,215
 8003548:	080035f0 	cmpltui	zero,at,215
 800354c:	080035f0 	cmpltui	zero,at,215
 8003550:	080035f0 	cmpltui	zero,at,215
 8003554:	08003768 	cmpgeui	zero,at,221
 8003558:	0800375c 	xori	zero,at,221
 800355c:	08003750 	cmplti	zero,at,221
 8003560:	08003744 	addi	zero,at,221
 8003564:	08003738 	rdprs	zero,at,220
 8003568:	0800372c 	andhi	zero,at,220
 800356c:	080035f0 	cmpltui	zero,at,215
 8003570:	08003720 	cmpeqi	zero,at,220
 8003574:	08003714 	ori	zero,at,220
 8003578:	08003708 	cmpgei	zero,at,220
 800357c:	080036fc 	xorhi	zero,at,219
 8003580:	080036f0 	cmpltui	zero,at,219
 8003584:	080036e4 	muli	zero,at,219
 8003588:	080036d8 	cmpnei	zero,at,219
 800358c:	080036cc 	andi	zero,at,219
 8003590:	080036c0 	call	80036c <OSCtxSw_SWITCH_PC+0x80032c>
 8003594:	08003684 	addi	zero,at,218
 8003598:	08003678 	rdprs	zero,at,217
 800359c:	0800366c 	andhi	zero,at,217
 80035a0:	08003660 	cmpeqi	zero,at,217
 80035a4:	080035f0 	cmpltui	zero,at,215
 80035a8:	08003654 	ori	zero,at,217
 80035ac:	08003648 	cmpgei	zero,at,217
 80035b0:	0800363c 	xorhi	zero,at,216
 80035b4:	08003630 	cmpltui	zero,at,216
 80035b8:	080035f0 	cmpltui	zero,at,215
 80035bc:	080035f0 	cmpltui	zero,at,215
 80035c0:	080035f0 	cmpltui	zero,at,215
 80035c4:	080035f0 	cmpltui	zero,at,215
 80035c8:	080035f0 	cmpltui	zero,at,215
 80035cc:	080036b4 	orhi	zero,at,218
 80035d0:	080035f0 	cmpltui	zero,at,215
 80035d4:	080035f0 	cmpltui	zero,at,215
 80035d8:	080035f0 	cmpltui	zero,at,215
 80035dc:	080036a8 	cmpgeui	zero,at,218
 80035e0:	0800369c 	xori	zero,at,218
 80035e4:	08003690 	cmplti	zero,at,218
 80035e8:	08003624 	muli	zero,at,216
 80035ec:	08003618 	cmpnei	zero,at,216
 80035f0:	deffff04 	addi	sp,sp,-4
 80035f4:	dfc00015 	stw	ra,0(sp)
 80035f8:	3800fa26 	beq	r7,zero,80039e4 <_strerror_r+0x654>
 80035fc:	380d883a 	mov	r6,r7
 8003600:	1009883a 	mov	r4,r2
 8003604:	8003df80 	call	8003df8 <_user_strerror>
 8003608:	1000f326 	beq	r2,zero,80039d8 <_strerror_r+0x648>
 800360c:	dfc00017 	ldw	ra,0(sp)
 8003610:	dec00104 	addi	sp,sp,4
 8003614:	f800283a 	ret
 8003618:	00820174 	movhi	r2,2053
 800361c:	10be3804 	addi	r2,r2,-1824
 8003620:	f800283a 	ret
 8003624:	00820174 	movhi	r2,2053
 8003628:	10be3204 	addi	r2,r2,-1848
 800362c:	f800283a 	ret
 8003630:	00820174 	movhi	r2,2053
 8003634:	10be2004 	addi	r2,r2,-1920
 8003638:	f800283a 	ret
 800363c:	00820174 	movhi	r2,2053
 8003640:	10be2604 	addi	r2,r2,-1896
 8003644:	f800283a 	ret
 8003648:	00820174 	movhi	r2,2053
 800364c:	10bd2104 	addi	r2,r2,-2940
 8003650:	f800283a 	ret
 8003654:	00820174 	movhi	r2,2053
 8003658:	10be1104 	addi	r2,r2,-1980
 800365c:	f800283a 	ret
 8003660:	00820174 	movhi	r2,2053
 8003664:	10bdae04 	addi	r2,r2,-2376
 8003668:	f800283a 	ret
 800366c:	00820174 	movhi	r2,2053
 8003670:	10be5004 	addi	r2,r2,-1728
 8003674:	f800283a 	ret
 8003678:	00820174 	movhi	r2,2053
 800367c:	10bcd304 	addi	r2,r2,-3252
 8003680:	f800283a 	ret
 8003684:	00820174 	movhi	r2,2053
 8003688:	10bcc504 	addi	r2,r2,-3308
 800368c:	f800283a 	ret
 8003690:	00820174 	movhi	r2,2053
 8003694:	10be2d04 	addi	r2,r2,-1868
 8003698:	f800283a 	ret
 800369c:	00820174 	movhi	r2,2053
 80036a0:	10be4604 	addi	r2,r2,-1768
 80036a4:	f800283a 	ret
 80036a8:	00820174 	movhi	r2,2053
 80036ac:	10bd8404 	addi	r2,r2,-2544
 80036b0:	f800283a 	ret
 80036b4:	00820174 	movhi	r2,2053
 80036b8:	10bd5204 	addi	r2,r2,-2744
 80036bc:	f800283a 	ret
 80036c0:	00820174 	movhi	r2,2053
 80036c4:	10bd0704 	addi	r2,r2,-3044
 80036c8:	f800283a 	ret
 80036cc:	00820174 	movhi	r2,2053
 80036d0:	10bd4704 	addi	r2,r2,-2788
 80036d4:	f800283a 	ret
 80036d8:	00820174 	movhi	r2,2053
 80036dc:	10bd0304 	addi	r2,r2,-3060
 80036e0:	f800283a 	ret
 80036e4:	00820174 	movhi	r2,2053
 80036e8:	10be5504 	addi	r2,r2,-1708
 80036ec:	f800283a 	ret
 80036f0:	00820174 	movhi	r2,2053
 80036f4:	10bd1804 	addi	r2,r2,-2976
 80036f8:	f800283a 	ret
 80036fc:	00820174 	movhi	r2,2053
 8003700:	10bd8d04 	addi	r2,r2,-2508
 8003704:	f800283a 	ret
 8003708:	00820174 	movhi	r2,2053
 800370c:	10be1704 	addi	r2,r2,-1956
 8003710:	f800283a 	ret
 8003714:	00820174 	movhi	r2,2053
 8003718:	10be0b04 	addi	r2,r2,-2004
 800371c:	f800283a 	ret
 8003720:	00820174 	movhi	r2,2053
 8003724:	10bdff04 	addi	r2,r2,-2052
 8003728:	f800283a 	ret
 800372c:	00820174 	movhi	r2,2053
 8003730:	10bdf904 	addi	r2,r2,-2076
 8003734:	f800283a 	ret
 8003738:	00820174 	movhi	r2,2053
 800373c:	10bdf104 	addi	r2,r2,-2108
 8003740:	f800283a 	ret
 8003744:	00820174 	movhi	r2,2053
 8003748:	10bde904 	addi	r2,r2,-2140
 800374c:	f800283a 	ret
 8003750:	00820174 	movhi	r2,2053
 8003754:	10bddd04 	addi	r2,r2,-2188
 8003758:	f800283a 	ret
 800375c:	00820174 	movhi	r2,2053
 8003760:	10bdd404 	addi	r2,r2,-2224
 8003764:	f800283a 	ret
 8003768:	00820174 	movhi	r2,2053
 800376c:	10be0404 	addi	r2,r2,-2032
 8003770:	f800283a 	ret
 8003774:	00820174 	movhi	r2,2053
 8003778:	10be3d04 	addi	r2,r2,-1804
 800377c:	f800283a 	ret
 8003780:	00820174 	movhi	r2,2053
 8003784:	10bdce04 	addi	r2,r2,-2248
 8003788:	f800283a 	ret
 800378c:	00820174 	movhi	r2,2053
 8003790:	10bdc704 	addi	r2,r2,-2276
 8003794:	f800283a 	ret
 8003798:	00820174 	movhi	r2,2053
 800379c:	10bdc204 	addi	r2,r2,-2296
 80037a0:	f800283a 	ret
 80037a4:	00820174 	movhi	r2,2053
 80037a8:	10bdbb04 	addi	r2,r2,-2324
 80037ac:	f800283a 	ret
 80037b0:	00820174 	movhi	r2,2053
 80037b4:	10bdb804 	addi	r2,r2,-2336
 80037b8:	f800283a 	ret
 80037bc:	00820174 	movhi	r2,2053
 80037c0:	10bdb304 	addi	r2,r2,-2356
 80037c4:	f800283a 	ret
 80037c8:	00820174 	movhi	r2,2053
 80037cc:	10bdaa04 	addi	r2,r2,-2392
 80037d0:	f800283a 	ret
 80037d4:	00820174 	movhi	r2,2053
 80037d8:	10bda404 	addi	r2,r2,-2416
 80037dc:	f800283a 	ret
 80037e0:	00820174 	movhi	r2,2053
 80037e4:	10bd9f04 	addi	r2,r2,-2436
 80037e8:	f800283a 	ret
 80037ec:	00820174 	movhi	r2,2053
 80037f0:	10bd9904 	addi	r2,r2,-2460
 80037f4:	f800283a 	ret
 80037f8:	00820174 	movhi	r2,2053
 80037fc:	10bddb04 	addi	r2,r2,-2196
 8003800:	f800283a 	ret
 8003804:	00820174 	movhi	r2,2053
 8003808:	10bd9504 	addi	r2,r2,-2476
 800380c:	f800283a 	ret
 8003810:	00820174 	movhi	r2,2053
 8003814:	10bd9304 	addi	r2,r2,-2484
 8003818:	f800283a 	ret
 800381c:	00820174 	movhi	r2,2053
 8003820:	10bd8a04 	addi	r2,r2,-2520
 8003824:	f800283a 	ret
 8003828:	00820174 	movhi	r2,2053
 800382c:	10bd7f04 	addi	r2,r2,-2564
 8003830:	f800283a 	ret
 8003834:	00820174 	movhi	r2,2053
 8003838:	10bd7804 	addi	r2,r2,-2592
 800383c:	f800283a 	ret
 8003840:	00820174 	movhi	r2,2053
 8003844:	10bd7304 	addi	r2,r2,-2612
 8003848:	f800283a 	ret
 800384c:	00820174 	movhi	r2,2053
 8003850:	10bd6704 	addi	r2,r2,-2660
 8003854:	f800283a 	ret
 8003858:	00820174 	movhi	r2,2053
 800385c:	10bd6404 	addi	r2,r2,-2672
 8003860:	f800283a 	ret
 8003864:	00820174 	movhi	r2,2053
 8003868:	10bd6004 	addi	r2,r2,-2688
 800386c:	f800283a 	ret
 8003870:	00820174 	movhi	r2,2053
 8003874:	10bd5a04 	addi	r2,r2,-2712
 8003878:	f800283a 	ret
 800387c:	00820174 	movhi	r2,2053
 8003880:	10bd5604 	addi	r2,r2,-2728
 8003884:	f800283a 	ret
 8003888:	00820174 	movhi	r2,2053
 800388c:	10bd4c04 	addi	r2,r2,-2768
 8003890:	f800283a 	ret
 8003894:	00820174 	movhi	r2,2053
 8003898:	10bd4304 	addi	r2,r2,-2804
 800389c:	f800283a 	ret
 80038a0:	00820174 	movhi	r2,2053
 80038a4:	10bd3f04 	addi	r2,r2,-2820
 80038a8:	f800283a 	ret
 80038ac:	00820174 	movhi	r2,2053
 80038b0:	10bd3904 	addi	r2,r2,-2844
 80038b4:	f800283a 	ret
 80038b8:	00820174 	movhi	r2,2053
 80038bc:	10bd3104 	addi	r2,r2,-2876
 80038c0:	f800283a 	ret
 80038c4:	00820174 	movhi	r2,2053
 80038c8:	10bd2904 	addi	r2,r2,-2908
 80038cc:	f800283a 	ret
 80038d0:	00820174 	movhi	r2,2053
 80038d4:	10bd1304 	addi	r2,r2,-2996
 80038d8:	f800283a 	ret
 80038dc:	00820174 	movhi	r2,2053
 80038e0:	10bd0f04 	addi	r2,r2,-3012
 80038e4:	f800283a 	ret
 80038e8:	00820174 	movhi	r2,2053
 80038ec:	10bcff04 	addi	r2,r2,-3076
 80038f0:	f800283a 	ret
 80038f4:	00820174 	movhi	r2,2053
 80038f8:	10bcfb04 	addi	r2,r2,-3092
 80038fc:	f800283a 	ret
 8003900:	00820174 	movhi	r2,2053
 8003904:	10bcf604 	addi	r2,r2,-3112
 8003908:	f800283a 	ret
 800390c:	00820174 	movhi	r2,2053
 8003910:	10bcf304 	addi	r2,r2,-3124
 8003914:	f800283a 	ret
 8003918:	00820174 	movhi	r2,2053
 800391c:	10bced04 	addi	r2,r2,-3148
 8003920:	f800283a 	ret
 8003924:	00820174 	movhi	r2,2053
 8003928:	10bcea04 	addi	r2,r2,-3160
 800392c:	f800283a 	ret
 8003930:	00820174 	movhi	r2,2053
 8003934:	10bce504 	addi	r2,r2,-3180
 8003938:	f800283a 	ret
 800393c:	00820174 	movhi	r2,2053
 8003940:	10bce004 	addi	r2,r2,-3200
 8003944:	f800283a 	ret
 8003948:	00820174 	movhi	r2,2053
 800394c:	10bcdb04 	addi	r2,r2,-3220
 8003950:	f800283a 	ret
 8003954:	00820174 	movhi	r2,2053
 8003958:	10bcd004 	addi	r2,r2,-3264
 800395c:	f800283a 	ret
 8003960:	00820174 	movhi	r2,2053
 8003964:	10bccc04 	addi	r2,r2,-3280
 8003968:	f800283a 	ret
 800396c:	00820174 	movhi	r2,2053
 8003970:	10bcc004 	addi	r2,r2,-3328
 8003974:	f800283a 	ret
 8003978:	00820174 	movhi	r2,2053
 800397c:	10bcbb04 	addi	r2,r2,-3348
 8003980:	f800283a 	ret
 8003984:	00820174 	movhi	r2,2053
 8003988:	10bcb404 	addi	r2,r2,-3376
 800398c:	f800283a 	ret
 8003990:	00820174 	movhi	r2,2053
 8003994:	10bcb104 	addi	r2,r2,-3388
 8003998:	f800283a 	ret
 800399c:	00820174 	movhi	r2,2053
 80039a0:	10bcab04 	addi	r2,r2,-3412
 80039a4:	f800283a 	ret
 80039a8:	00820174 	movhi	r2,2053
 80039ac:	10bca704 	addi	r2,r2,-3428
 80039b0:	f800283a 	ret
 80039b4:	00820174 	movhi	r2,2053
 80039b8:	10bca004 	addi	r2,r2,-3456
 80039bc:	f800283a 	ret
 80039c0:	00820174 	movhi	r2,2053
 80039c4:	10be5b04 	addi	r2,r2,-1684
 80039c8:	f800283a 	ret
 80039cc:	00820174 	movhi	r2,2053
 80039d0:	10bc9d04 	addi	r2,r2,-3468
 80039d4:	f800283a 	ret
 80039d8:	00820174 	movhi	r2,2053
 80039dc:	10bef104 	addi	r2,r2,-1084
 80039e0:	003f0a06 	br	800360c <_strerror_r+0x27c>
 80039e4:	200f883a 	mov	r7,r4
 80039e8:	003f0406 	br	80035fc <_strerror_r+0x26c>

080039ec <strerror>:
 80039ec:	00820174 	movhi	r2,2053
 80039f0:	200b883a 	mov	r5,r4
 80039f4:	1118e017 	ldw	r4,25472(r2)
 80039f8:	000f883a 	mov	r7,zero
 80039fc:	000d883a 	mov	r6,zero
 8003a00:	80033901 	jmpi	8003390 <_strerror_r>

08003a04 <strerror_l>:
 8003a04:	00820174 	movhi	r2,2053
 8003a08:	200b883a 	mov	r5,r4
 8003a0c:	1118e017 	ldw	r4,25472(r2)
 8003a10:	000f883a 	mov	r7,zero
 8003a14:	000d883a 	mov	r6,zero
 8003a18:	80033901 	jmpi	8003390 <_strerror_r>

08003a1c <strlen>:
 8003a1c:	208000cc 	andi	r2,r4,3
 8003a20:	10000926 	beq	r2,zero,8003a48 <strlen+0x2c>
 8003a24:	2005883a 	mov	r2,r4
 8003a28:	00000306 	br	8003a38 <strlen+0x1c>
 8003a2c:	10800044 	addi	r2,r2,1
 8003a30:	10c000cc 	andi	r3,r2,3
 8003a34:	18000526 	beq	r3,zero,8003a4c <strlen+0x30>
 8003a38:	10c00007 	ldb	r3,0(r2)
 8003a3c:	183ffb1e 	bne	r3,zero,8003a2c <strlen+0x10>
 8003a40:	1105c83a 	sub	r2,r2,r4
 8003a44:	f800283a 	ret
 8003a48:	2005883a 	mov	r2,r4
 8003a4c:	11400017 	ldw	r5,0(r2)
 8003a50:	01ffbff4 	movhi	r7,65279
 8003a54:	39ffbfc4 	addi	r7,r7,-257
 8003a58:	29c7883a 	add	r3,r5,r7
 8003a5c:	01a02074 	movhi	r6,32897
 8003a60:	014a303a 	nor	r5,zero,r5
 8003a64:	1946703a 	and	r3,r3,r5
 8003a68:	31a02004 	addi	r6,r6,-32640
 8003a6c:	1986703a 	and	r3,r3,r6
 8003a70:	1800071e 	bne	r3,zero,8003a90 <strlen+0x74>
 8003a74:	11400117 	ldw	r5,4(r2)
 8003a78:	10800104 	addi	r2,r2,4
 8003a7c:	29c7883a 	add	r3,r5,r7
 8003a80:	014a303a 	nor	r5,zero,r5
 8003a84:	1946703a 	and	r3,r3,r5
 8003a88:	1986703a 	and	r3,r3,r6
 8003a8c:	183ff926 	beq	r3,zero,8003a74 <strlen+0x58>
 8003a90:	10c00007 	ldb	r3,0(r2)
 8003a94:	183fea26 	beq	r3,zero,8003a40 <strlen+0x24>
 8003a98:	10c00047 	ldb	r3,1(r2)
 8003a9c:	10800044 	addi	r2,r2,1
 8003aa0:	183fe726 	beq	r3,zero,8003a40 <strlen+0x24>
 8003aa4:	10c00047 	ldb	r3,1(r2)
 8003aa8:	10800044 	addi	r2,r2,1
 8003aac:	183ffa1e 	bne	r3,zero,8003a98 <strlen+0x7c>
 8003ab0:	003fe306 	br	8003a40 <strlen+0x24>

08003ab4 <strtok>:
 8003ab4:	00820174 	movhi	r2,2053
 8003ab8:	1198e017 	ldw	r6,25472(r2)
 8003abc:	01c00044 	movi	r7,1
 8003ac0:	31801704 	addi	r6,r6,92
 8003ac4:	8003ac81 	jmpi	8003ac8 <__strtok_r>

08003ac8 <__strtok_r>:
 8003ac8:	20001d26 	beq	r4,zero,8003b40 <__strtok_r+0x78>
 8003acc:	22400007 	ldb	r9,0(r4)
 8003ad0:	20800044 	addi	r2,r4,1
 8003ad4:	2807883a 	mov	r3,r5
 8003ad8:	00000106 	br	8003ae0 <__strtok_r+0x18>
 8003adc:	4a001126 	beq	r9,r8,8003b24 <__strtok_r+0x5c>
 8003ae0:	1a000007 	ldb	r8,0(r3)
 8003ae4:	18c00044 	addi	r3,r3,1
 8003ae8:	403ffc1e 	bne	r8,zero,8003adc <__strtok_r+0x14>
 8003aec:	48001826 	beq	r9,zero,8003b50 <__strtok_r+0x88>
 8003af0:	12000007 	ldb	r8,0(r2)
 8003af4:	2807883a 	mov	r3,r5
 8003af8:	10800044 	addi	r2,r2,1
 8003afc:	00000106 	br	8003b04 <__strtok_r+0x3c>
 8003b00:	383ffb26 	beq	r7,zero,8003af0 <__strtok_r+0x28>
 8003b04:	19c00007 	ldb	r7,0(r3)
 8003b08:	18c00044 	addi	r3,r3,1
 8003b0c:	41fffc1e 	bne	r8,r7,8003b00 <__strtok_r+0x38>
 8003b10:	40000726 	beq	r8,zero,8003b30 <__strtok_r+0x68>
 8003b14:	103fffc5 	stb	zero,-1(r2)
 8003b18:	30800015 	stw	r2,0(r6)
 8003b1c:	2005883a 	mov	r2,r4
 8003b20:	f800283a 	ret
 8003b24:	38000d26 	beq	r7,zero,8003b5c <__strtok_r+0x94>
 8003b28:	1009883a 	mov	r4,r2
 8003b2c:	003fe706 	br	8003acc <__strtok_r+0x4>
 8003b30:	0005883a 	mov	r2,zero
 8003b34:	30800015 	stw	r2,0(r6)
 8003b38:	2005883a 	mov	r2,r4
 8003b3c:	f800283a 	ret
 8003b40:	31000017 	ldw	r4,0(r6)
 8003b44:	203fe11e 	bne	r4,zero,8003acc <__strtok_r+0x4>
 8003b48:	0005883a 	mov	r2,zero
 8003b4c:	f800283a 	ret
 8003b50:	30000015 	stw	zero,0(r6)
 8003b54:	0005883a 	mov	r2,zero
 8003b58:	f800283a 	ret
 8003b5c:	30800015 	stw	r2,0(r6)
 8003b60:	20000005 	stb	zero,0(r4)
 8003b64:	2005883a 	mov	r2,r4
 8003b68:	f800283a 	ret

08003b6c <strtok_r>:
 8003b6c:	01c00044 	movi	r7,1
 8003b70:	8003ac81 	jmpi	8003ac8 <__strtok_r>

08003b74 <_strtoul_l.isra.0>:
 8003b74:	defff704 	addi	sp,sp,-36
 8003b78:	dd400515 	stw	r21,20(sp)
 8003b7c:	dd000415 	stw	r20,16(sp)
 8003b80:	dcc00315 	stw	r19,12(sp)
 8003b84:	dc800215 	stw	r18,8(sp)
 8003b88:	dc000015 	stw	r16,0(sp)
 8003b8c:	dfc00815 	stw	ra,32(sp)
 8003b90:	ddc00715 	stw	r23,28(sp)
 8003b94:	dd800615 	stw	r22,24(sp)
 8003b98:	dc400115 	stw	r17,4(sp)
 8003b9c:	2827883a 	mov	r19,r5
 8003ba0:	202b883a 	mov	r21,r4
 8003ba4:	3029883a 	mov	r20,r6
 8003ba8:	3825883a 	mov	r18,r7
 8003bac:	2821883a 	mov	r16,r5
 8003bb0:	80c00003 	ldbu	r3,0(r16)
 8003bb4:	00820174 	movhi	r2,2053
 8003bb8:	8009883a 	mov	r4,r16
 8003bbc:	1885883a 	add	r2,r3,r2
 8003bc0:	10bbfa43 	ldbu	r2,-4119(r2)
 8003bc4:	84000044 	addi	r16,r16,1
 8003bc8:	1080020c 	andi	r2,r2,8
 8003bcc:	103ff81e 	bne	r2,zero,8003bb0 <_strtoul_l.isra.0+0x3c>
 8003bd0:	18800b58 	cmpnei	r2,r3,45
 8003bd4:	10004e26 	beq	r2,zero,8003d10 <_strtoul_l.isra.0+0x19c>
 8003bd8:	18800ae0 	cmpeqi	r2,r3,43
 8003bdc:	1000211e 	bne	r2,zero,8003c64 <_strtoul_l.isra.0+0xf0>
 8003be0:	1823883a 	mov	r17,r3
 8003be4:	002f883a 	mov	r23,zero
 8003be8:	90002226 	beq	r18,zero,8003c74 <_strtoul_l.isra.0+0x100>
 8003bec:	90800420 	cmpeqi	r2,r18,16
 8003bf0:	10004b1e 	bne	r2,zero,8003d20 <_strtoul_l.isra.0+0x1ac>
 8003bf4:	900b883a 	mov	r5,r18
 8003bf8:	013fffc4 	movi	r4,-1
 8003bfc:	800e2300 	call	800e230 <__udivsi3>
 8003c00:	900b883a 	mov	r5,r18
 8003c04:	013fffc4 	movi	r4,-1
 8003c08:	102d883a 	mov	r22,r2
 8003c0c:	800e2940 	call	800e294 <__umodsi3>
 8003c10:	9009883a 	mov	r4,r18
 8003c14:	100b883a 	mov	r5,r2
 8003c18:	0011883a 	mov	r8,zero
 8003c1c:	0005883a 	mov	r2,zero
 8003c20:	88fff404 	addi	r3,r17,-48
 8003c24:	1a4002a8 	cmpgeui	r9,r3,10
 8003c28:	48000426 	beq	r9,zero,8003c3c <_strtoul_l.isra.0+0xc8>
 8003c2c:	88ffefc4 	addi	r3,r17,-65
 8003c30:	18c006a8 	cmpgeui	r3,r3,26
 8003c34:	18001a1e 	bne	r3,zero,8003ca0 <_strtoul_l.isra.0+0x12c>
 8003c38:	88fff244 	addi	r3,r17,-55
 8003c3c:	1c801d0e 	bge	r3,r18,8003cb4 <_strtoul_l.isra.0+0x140>
 8003c40:	40001516 	blt	r8,zero,8003c98 <_strtoul_l.isra.0+0x124>
 8003c44:	b0801436 	bltu	r22,r2,8003c98 <_strtoul_l.isra.0+0x124>
 8003c48:	15801226 	beq	r2,r22,8003c94 <_strtoul_l.isra.0+0x120>
 8003c4c:	2085383a 	mul	r2,r4,r2
 8003c50:	02000044 	movi	r8,1
 8003c54:	1885883a 	add	r2,r3,r2
 8003c58:	84000044 	addi	r16,r16,1
 8003c5c:	847fffc3 	ldbu	r17,-1(r16)
 8003c60:	003fef06 	br	8003c20 <_strtoul_l.isra.0+0xac>
 8003c64:	84400003 	ldbu	r17,0(r16)
 8003c68:	002f883a 	mov	r23,zero
 8003c6c:	24000084 	addi	r16,r4,2
 8003c70:	903fde1e 	bne	r18,zero,8003bec <_strtoul_l.isra.0+0x78>
 8003c74:	88800c20 	cmpeqi	r2,r17,48
 8003c78:	1000371e 	bne	r2,zero,8003d58 <_strtoul_l.isra.0+0x1e4>
 8003c7c:	058666b4 	movhi	r22,6554
 8003c80:	01400144 	movi	r5,5
 8003c84:	b5a66644 	addi	r22,r22,-26215
 8003c88:	01000284 	movi	r4,10
 8003c8c:	04800284 	movi	r18,10
 8003c90:	003fe106 	br	8003c18 <_strtoul_l.isra.0+0xa4>
 8003c94:	28ffed0e 	bge	r5,r3,8003c4c <_strtoul_l.isra.0+0xd8>
 8003c98:	023fffc4 	movi	r8,-1
 8003c9c:	003fee06 	br	8003c58 <_strtoul_l.isra.0+0xe4>
 8003ca0:	88ffe7c4 	addi	r3,r17,-97
 8003ca4:	18c006a8 	cmpgeui	r3,r3,26
 8003ca8:	1800021e 	bne	r3,zero,8003cb4 <_strtoul_l.isra.0+0x140>
 8003cac:	88ffea44 	addi	r3,r17,-87
 8003cb0:	1cbfe316 	blt	r3,r18,8003c40 <_strtoul_l.isra.0+0xcc>
 8003cb4:	40001016 	blt	r8,zero,8003cf8 <_strtoul_l.isra.0+0x184>
 8003cb8:	b8000126 	beq	r23,zero,8003cc0 <_strtoul_l.isra.0+0x14c>
 8003cbc:	0085c83a 	sub	r2,zero,r2
 8003cc0:	a0000226 	beq	r20,zero,8003ccc <_strtoul_l.isra.0+0x158>
 8003cc4:	4000101e 	bne	r8,zero,8003d08 <_strtoul_l.isra.0+0x194>
 8003cc8:	a4c00015 	stw	r19,0(r20)
 8003ccc:	dfc00817 	ldw	ra,32(sp)
 8003cd0:	ddc00717 	ldw	r23,28(sp)
 8003cd4:	dd800617 	ldw	r22,24(sp)
 8003cd8:	dd400517 	ldw	r21,20(sp)
 8003cdc:	dd000417 	ldw	r20,16(sp)
 8003ce0:	dcc00317 	ldw	r19,12(sp)
 8003ce4:	dc800217 	ldw	r18,8(sp)
 8003ce8:	dc400117 	ldw	r17,4(sp)
 8003cec:	dc000017 	ldw	r16,0(sp)
 8003cf0:	dec00904 	addi	sp,sp,36
 8003cf4:	f800283a 	ret
 8003cf8:	00800884 	movi	r2,34
 8003cfc:	a8800015 	stw	r2,0(r21)
 8003d00:	00bfffc4 	movi	r2,-1
 8003d04:	a03ff126 	beq	r20,zero,8003ccc <_strtoul_l.isra.0+0x158>
 8003d08:	84ffffc4 	addi	r19,r16,-1
 8003d0c:	003fee06 	br	8003cc8 <_strtoul_l.isra.0+0x154>
 8003d10:	84400003 	ldbu	r17,0(r16)
 8003d14:	05c00044 	movi	r23,1
 8003d18:	24000084 	addi	r16,r4,2
 8003d1c:	003fb206 	br	8003be8 <_strtoul_l.isra.0+0x74>
 8003d20:	88800c18 	cmpnei	r2,r17,48
 8003d24:	1000201e 	bne	r2,zero,8003da8 <_strtoul_l.isra.0+0x234>
 8003d28:	80800003 	ldbu	r2,0(r16)
 8003d2c:	108037cc 	andi	r2,r2,223
 8003d30:	10801620 	cmpeqi	r2,r2,88
 8003d34:	10001226 	beq	r2,zero,8003d80 <_strtoul_l.isra.0+0x20c>
 8003d38:	05840034 	movhi	r22,4096
 8003d3c:	84400043 	ldbu	r17,1(r16)
 8003d40:	014003c4 	movi	r5,15
 8003d44:	84000084 	addi	r16,r16,2
 8003d48:	b5bfffc4 	addi	r22,r22,-1
 8003d4c:	01000404 	movi	r4,16
 8003d50:	04800404 	movi	r18,16
 8003d54:	003fb006 	br	8003c18 <_strtoul_l.isra.0+0xa4>
 8003d58:	80800003 	ldbu	r2,0(r16)
 8003d5c:	108037cc 	andi	r2,r2,223
 8003d60:	10801618 	cmpnei	r2,r2,88
 8003d64:	103ff426 	beq	r2,zero,8003d38 <_strtoul_l.isra.0+0x1c4>
 8003d68:	05880034 	movhi	r22,8192
 8003d6c:	014001c4 	movi	r5,7
 8003d70:	b5bfffc4 	addi	r22,r22,-1
 8003d74:	01000204 	movi	r4,8
 8003d78:	04800204 	movi	r18,8
 8003d7c:	003fa606 	br	8003c18 <_strtoul_l.isra.0+0xa4>
 8003d80:	01400404 	movi	r5,16
 8003d84:	013fffc4 	movi	r4,-1
 8003d88:	800e2300 	call	800e230 <__udivsi3>
 8003d8c:	01400404 	movi	r5,16
 8003d90:	013fffc4 	movi	r4,-1
 8003d94:	102d883a 	mov	r22,r2
 8003d98:	800e2940 	call	800e294 <__umodsi3>
 8003d9c:	01000404 	movi	r4,16
 8003da0:	100b883a 	mov	r5,r2
 8003da4:	003f9c06 	br	8003c18 <_strtoul_l.isra.0+0xa4>
 8003da8:	05840034 	movhi	r22,4096
 8003dac:	014003c4 	movi	r5,15
 8003db0:	b5bfffc4 	addi	r22,r22,-1
 8003db4:	01000404 	movi	r4,16
 8003db8:	003f9706 	br	8003c18 <_strtoul_l.isra.0+0xa4>

08003dbc <_strtoul_r>:
 8003dbc:	8003b741 	jmpi	8003b74 <_strtoul_l.isra.0>

08003dc0 <strtoul_l>:
 8003dc0:	00c20174 	movhi	r3,2053
 8003dc4:	2005883a 	mov	r2,r4
 8003dc8:	1918e017 	ldw	r4,25472(r3)
 8003dcc:	300f883a 	mov	r7,r6
 8003dd0:	280d883a 	mov	r6,r5
 8003dd4:	100b883a 	mov	r5,r2
 8003dd8:	8003b741 	jmpi	8003b74 <_strtoul_l.isra.0>

08003ddc <strtoul>:
 8003ddc:	00c20174 	movhi	r3,2053
 8003de0:	2005883a 	mov	r2,r4
 8003de4:	1918e017 	ldw	r4,25472(r3)
 8003de8:	300f883a 	mov	r7,r6
 8003dec:	280d883a 	mov	r6,r5
 8003df0:	100b883a 	mov	r5,r2
 8003df4:	8003b741 	jmpi	8003b74 <_strtoul_l.isra.0>

08003df8 <_user_strerror>:
 8003df8:	0005883a 	mov	r2,zero
 8003dfc:	f800283a 	ret

08003e00 <___vfprintf_internal_r>:
 8003e00:	deffbf04 	addi	sp,sp,-260
 8003e04:	dfc04015 	stw	ra,256(sp)
 8003e08:	dd803d15 	stw	r22,244(sp)
 8003e0c:	dcc03a15 	stw	r19,232(sp)
 8003e10:	dc803915 	stw	r18,228(sp)
 8003e14:	2027883a 	mov	r19,r4
 8003e18:	2825883a 	mov	r18,r5
 8003e1c:	302d883a 	mov	r22,r6
 8003e20:	d9c00615 	stw	r7,24(sp)
 8003e24:	df003f15 	stw	fp,252(sp)
 8003e28:	ddc03e15 	stw	r23,248(sp)
 8003e2c:	dd403c15 	stw	r21,240(sp)
 8003e30:	dd003b15 	stw	r20,236(sp)
 8003e34:	dc403815 	stw	r17,224(sp)
 8003e38:	dc003715 	stw	r16,220(sp)
 8003e3c:	8008c440 	call	8008c44 <_localeconv_r>
 8003e40:	10800017 	ldw	r2,0(r2)
 8003e44:	1009883a 	mov	r4,r2
 8003e48:	d8800d15 	stw	r2,52(sp)
 8003e4c:	8003a1c0 	call	8003a1c <strlen>
 8003e50:	d8800b15 	stw	r2,44(sp)
 8003e54:	98000226 	beq	r19,zero,8003e60 <___vfprintf_internal_r+0x60>
 8003e58:	98800e17 	ldw	r2,56(r19)
 8003e5c:	1001d526 	beq	r2,zero,80045b4 <___vfprintf_internal_r+0x7b4>
 8003e60:	9080030b 	ldhu	r2,12(r18)
 8003e64:	10c8000c 	andi	r3,r2,8192
 8003e68:	1800061e 	bne	r3,zero,8003e84 <___vfprintf_internal_r+0x84>
 8003e6c:	90c01917 	ldw	r3,100(r18)
 8003e70:	0137ffc4 	movi	r4,-8193
 8003e74:	10880014 	ori	r2,r2,8192
 8003e78:	1906703a 	and	r3,r3,r4
 8003e7c:	9080030d 	sth	r2,12(r18)
 8003e80:	90c01915 	stw	r3,100(r18)
 8003e84:	10c0020c 	andi	r3,r2,8
 8003e88:	1800fa26 	beq	r3,zero,8004274 <___vfprintf_internal_r+0x474>
 8003e8c:	90c00417 	ldw	r3,16(r18)
 8003e90:	1800f826 	beq	r3,zero,8004274 <___vfprintf_internal_r+0x474>
 8003e94:	1080068c 	andi	r2,r2,26
 8003e98:	10800298 	cmpnei	r2,r2,10
 8003e9c:	1000fd26 	beq	r2,zero,8004294 <___vfprintf_internal_r+0x494>
 8003ea0:	d8802704 	addi	r2,sp,156
 8003ea4:	b02f883a 	mov	r23,r22
 8003ea8:	d8801a15 	stw	r2,104(sp)
 8003eac:	d8001c15 	stw	zero,112(sp)
 8003eb0:	d8001b15 	stw	zero,108(sp)
 8003eb4:	d8000815 	stw	zero,32(sp)
 8003eb8:	d8000915 	stw	zero,36(sp)
 8003ebc:	d8000a15 	stw	zero,40(sp)
 8003ec0:	d8000c15 	stw	zero,48(sp)
 8003ec4:	d8001015 	stw	zero,64(sp)
 8003ec8:	d8000515 	stw	zero,20(sp)
 8003ecc:	102d883a 	mov	r22,r2
 8003ed0:	b8800007 	ldb	r2,0(r23)
 8003ed4:	1000d526 	beq	r2,zero,800422c <___vfprintf_internal_r+0x42c>
 8003ed8:	b821883a 	mov	r16,r23
 8003edc:	00000306 	br	8003eec <___vfprintf_internal_r+0xec>
 8003ee0:	80800047 	ldb	r2,1(r16)
 8003ee4:	84000044 	addi	r16,r16,1
 8003ee8:	10011726 	beq	r2,zero,8004348 <___vfprintf_internal_r+0x548>
 8003eec:	10800958 	cmpnei	r2,r2,37
 8003ef0:	103ffb1e 	bne	r2,zero,8003ee0 <___vfprintf_internal_r+0xe0>
 8003ef4:	85e3c83a 	sub	r17,r16,r23
 8003ef8:	85c1151e 	bne	r16,r23,8004350 <___vfprintf_internal_r+0x550>
 8003efc:	80800003 	ldbu	r2,0(r16)
 8003f00:	10803fcc 	andi	r2,r2,255
 8003f04:	1080201c 	xori	r2,r2,128
 8003f08:	10bfe004 	addi	r2,r2,-128
 8003f0c:	1000c726 	beq	r2,zero,800422c <___vfprintf_internal_r+0x42c>
 8003f10:	82c00047 	ldb	r11,1(r16)
 8003f14:	85c00044 	addi	r23,r16,1
 8003f18:	d8001345 	stb	zero,77(sp)
 8003f1c:	0009883a 	mov	r4,zero
 8003f20:	000b883a 	mov	r5,zero
 8003f24:	023fffc4 	movi	r8,-1
 8003f28:	0021883a 	mov	r16,zero
 8003f2c:	0019883a 	mov	r12,zero
 8003f30:	bdc00044 	addi	r23,r23,1
 8003f34:	5839883a 	mov	fp,r11
 8003f38:	e0bff804 	addi	r2,fp,-32
 8003f3c:	10c01668 	cmpgeui	r3,r2,89
 8003f40:	18006a1e 	bne	r3,zero,80040ec <___vfprintf_internal_r+0x2ec>
 8003f44:	100490ba 	slli	r2,r2,2
 8003f48:	00c20034 	movhi	r3,2048
 8003f4c:	10c7883a 	add	r3,r2,r3
 8003f50:	188fd617 	ldw	r2,16216(r3)
 8003f54:	1000683a 	jmp	r2
 8003f58:	08004934 	orhi	zero,at,292
 8003f5c:	080040ec 	andhi	zero,at,259
 8003f60:	080040ec 	andhi	zero,at,259
 8003f64:	08004928 	cmpgeui	zero,at,292
 8003f68:	080040ec 	andhi	zero,at,259
 8003f6c:	080040ec 	andhi	zero,at,259
 8003f70:	080040ec 	andhi	zero,at,259
 8003f74:	080040ec 	andhi	zero,at,259
 8003f78:	080040ec 	andhi	zero,at,259
 8003f7c:	080040ec 	andhi	zero,at,259
 8003f80:	08004900 	call	800490 <OSCtxSw_SWITCH_PC+0x800450>
 8003f84:	080048f0 	cmpltui	zero,at,291
 8003f88:	080040ec 	andhi	zero,at,259
 8003f8c:	080048d8 	cmpnei	zero,at,291
 8003f90:	08004894 	ori	zero,at,290
 8003f94:	080040ec 	andhi	zero,at,259
 8003f98:	08004888 	cmpgei	zero,at,290
 8003f9c:	080040bc 	xorhi	zero,at,258
 8003fa0:	080040bc 	xorhi	zero,at,258
 8003fa4:	080040bc 	xorhi	zero,at,258
 8003fa8:	080040bc 	xorhi	zero,at,258
 8003fac:	080040bc 	xorhi	zero,at,258
 8003fb0:	080040bc 	xorhi	zero,at,258
 8003fb4:	080040bc 	xorhi	zero,at,258
 8003fb8:	080040bc 	xorhi	zero,at,258
 8003fbc:	080040bc 	xorhi	zero,at,258
 8003fc0:	080040ec 	andhi	zero,at,259
 8003fc4:	080040ec 	andhi	zero,at,259
 8003fc8:	080040ec 	andhi	zero,at,259
 8003fcc:	080040ec 	andhi	zero,at,259
 8003fd0:	080040ec 	andhi	zero,at,259
 8003fd4:	080040ec 	andhi	zero,at,259
 8003fd8:	080040ec 	andhi	zero,at,259
 8003fdc:	080040ec 	andhi	zero,at,259
 8003fe0:	080040ec 	andhi	zero,at,259
 8003fe4:	080040ec 	andhi	zero,at,259
 8003fe8:	0800477c 	xorhi	zero,at,285
 8003fec:	080043ac 	andhi	zero,at,270
 8003ff0:	080040ec 	andhi	zero,at,259
 8003ff4:	080043ac 	andhi	zero,at,270
 8003ff8:	080040ec 	andhi	zero,at,259
 8003ffc:	080040ec 	andhi	zero,at,259
 8004000:	080040ec 	andhi	zero,at,259
 8004004:	080040ec 	andhi	zero,at,259
 8004008:	08004960 	cmpeqi	zero,at,293
 800400c:	080040ec 	andhi	zero,at,259
 8004010:	080040ec 	andhi	zero,at,259
 8004014:	080042e0 	cmpeqi	zero,at,267
 8004018:	080040ec 	andhi	zero,at,259
 800401c:	080040ec 	andhi	zero,at,259
 8004020:	080040ec 	andhi	zero,at,259
 8004024:	080040ec 	andhi	zero,at,259
 8004028:	080040ec 	andhi	zero,at,259
 800402c:	080042b8 	rdprs	zero,at,266
 8004030:	080040ec 	andhi	zero,at,259
 8004034:	080040ec 	andhi	zero,at,259
 8004038:	08004994 	ori	zero,at,294
 800403c:	080040ec 	andhi	zero,at,259
 8004040:	080040ec 	andhi	zero,at,259
 8004044:	080040ec 	andhi	zero,at,259
 8004048:	080040ec 	andhi	zero,at,259
 800404c:	080040ec 	andhi	zero,at,259
 8004050:	080040ec 	andhi	zero,at,259
 8004054:	080040ec 	andhi	zero,at,259
 8004058:	080040ec 	andhi	zero,at,259
 800405c:	080040ec 	andhi	zero,at,259
 8004060:	080040ec 	andhi	zero,at,259
 8004064:	0800496c 	andhi	zero,at,293
 8004068:	080045c0 	call	80045c <OSCtxSw_SWITCH_PC+0x80041c>
 800406c:	080043ac 	andhi	zero,at,270
 8004070:	080043ac 	andhi	zero,at,270
 8004074:	080043ac 	andhi	zero,at,270
 8004078:	08004634 	orhi	zero,at,280
 800407c:	080045c0 	call	80045c <OSCtxSw_SWITCH_PC+0x80041c>
 8004080:	080040ec 	andhi	zero,at,259
 8004084:	080040ec 	andhi	zero,at,259
 8004088:	08004768 	cmpgeui	zero,at,285
 800408c:	080040ec 	andhi	zero,at,259
 8004090:	0800472c 	andhi	zero,at,284
 8004094:	080042e4 	muli	zero,at,267
 8004098:	080046ec 	andhi	zero,at,283
 800409c:	080046e0 	cmpeqi	zero,at,283
 80040a0:	080040ec 	andhi	zero,at,259
 80040a4:	08004688 	cmpgei	zero,at,282
 80040a8:	080040ec 	andhi	zero,at,259
 80040ac:	080042bc 	xorhi	zero,at,266
 80040b0:	080040ec 	andhi	zero,at,259
 80040b4:	080040ec 	andhi	zero,at,259
 80040b8:	08004640 	call	800464 <OSCtxSw_SWITCH_PC+0x800424>
 80040bc:	0021883a 	mov	r16,zero
 80040c0:	e0bff404 	addi	r2,fp,-48
 80040c4:	bf000007 	ldb	fp,0(r23)
 80040c8:	840002a4 	muli	r16,r16,10
 80040cc:	bdc00044 	addi	r23,r23,1
 80040d0:	1421883a 	add	r16,r2,r16
 80040d4:	e0bff404 	addi	r2,fp,-48
 80040d8:	10c002b0 	cmpltui	r3,r2,10
 80040dc:	183ff91e 	bne	r3,zero,80040c4 <___vfprintf_internal_r+0x2c4>
 80040e0:	e0bff804 	addi	r2,fp,-32
 80040e4:	10c01668 	cmpgeui	r3,r2,89
 80040e8:	183f9626 	beq	r3,zero,8003f44 <___vfprintf_internal_r+0x144>
 80040ec:	21003fcc 	andi	r4,r4,255
 80040f0:	20068d1e 	bne	r4,zero,8005b28 <___vfprintf_internal_r+0x1d28>
 80040f4:	e0004d26 	beq	fp,zero,800422c <___vfprintf_internal_r+0x42c>
 80040f8:	df001d05 	stb	fp,116(sp)
 80040fc:	d8001345 	stb	zero,77(sp)
 8004100:	05000044 	movi	r20,1
 8004104:	05400044 	movi	r21,1
 8004108:	dc401d04 	addi	r17,sp,116
 800410c:	db000415 	stw	r12,16(sp)
 8004110:	0011883a 	mov	r8,zero
 8004114:	d8000715 	stw	zero,28(sp)
 8004118:	d8800417 	ldw	r2,16(sp)
 800411c:	1380008c 	andi	r14,r2,2
 8004120:	70000126 	beq	r14,zero,8004128 <___vfprintf_internal_r+0x328>
 8004124:	a5000084 	addi	r20,r20,2
 8004128:	d8800417 	ldw	r2,16(sp)
 800412c:	d8c01c17 	ldw	r3,112(sp)
 8004130:	1340210c 	andi	r13,r2,132
 8004134:	6800021e 	bne	r13,zero,8004140 <___vfprintf_internal_r+0x340>
 8004138:	850fc83a 	sub	r7,r16,r20
 800413c:	01c35e16 	blt	zero,r7,8004eb8 <___vfprintf_internal_r+0x10b8>
 8004140:	d8801347 	ldb	r2,77(sp)
 8004144:	10000c26 	beq	r2,zero,8004178 <___vfprintf_internal_r+0x378>
 8004148:	d8801b17 	ldw	r2,108(sp)
 800414c:	d9001344 	addi	r4,sp,77
 8004150:	18c00044 	addi	r3,r3,1
 8004154:	10800044 	addi	r2,r2,1
 8004158:	b1000015 	stw	r4,0(r22)
 800415c:	01000044 	movi	r4,1
 8004160:	d8801b15 	stw	r2,108(sp)
 8004164:	b1000115 	stw	r4,4(r22)
 8004168:	d8c01c15 	stw	r3,112(sp)
 800416c:	10800208 	cmpgei	r2,r2,8
 8004170:	10039e1e 	bne	r2,zero,8004fec <___vfprintf_internal_r+0x11ec>
 8004174:	b5800204 	addi	r22,r22,8
 8004178:	70000c26 	beq	r14,zero,80041ac <___vfprintf_internal_r+0x3ac>
 800417c:	d8801b17 	ldw	r2,108(sp)
 8004180:	d9001384 	addi	r4,sp,78
 8004184:	18c00084 	addi	r3,r3,2
 8004188:	10800044 	addi	r2,r2,1
 800418c:	b1000015 	stw	r4,0(r22)
 8004190:	01000084 	movi	r4,2
 8004194:	d8801b15 	stw	r2,108(sp)
 8004198:	b1000115 	stw	r4,4(r22)
 800419c:	d8c01c15 	stw	r3,112(sp)
 80041a0:	10800208 	cmpgei	r2,r2,8
 80041a4:	1003851e 	bne	r2,zero,8004fbc <___vfprintf_internal_r+0x11bc>
 80041a8:	b5800204 	addi	r22,r22,8
 80041ac:	6b402018 	cmpnei	r13,r13,128
 80041b0:	68025026 	beq	r13,zero,8004af4 <___vfprintf_internal_r+0xcf4>
 80041b4:	4551c83a 	sub	r8,r8,r21
 80041b8:	02028816 	blt	zero,r8,8004bdc <___vfprintf_internal_r+0xddc>
 80041bc:	d8800417 	ldw	r2,16(sp)
 80041c0:	1080400c 	andi	r2,r2,256
 80041c4:	1002051e 	bne	r2,zero,80049dc <___vfprintf_internal_r+0xbdc>
 80041c8:	d8801b17 	ldw	r2,108(sp)
 80041cc:	1d47883a 	add	r3,r3,r21
 80041d0:	b4400015 	stw	r17,0(r22)
 80041d4:	10800044 	addi	r2,r2,1
 80041d8:	b5400115 	stw	r21,4(r22)
 80041dc:	d8801b15 	stw	r2,108(sp)
 80041e0:	d8c01c15 	stw	r3,112(sp)
 80041e4:	10800208 	cmpgei	r2,r2,8
 80041e8:	1002ec1e 	bne	r2,zero,8004d9c <___vfprintf_internal_r+0xf9c>
 80041ec:	b5800204 	addi	r22,r22,8
 80041f0:	d8800417 	ldw	r2,16(sp)
 80041f4:	1440010c 	andi	r17,r2,4
 80041f8:	88000226 	beq	r17,zero,8004204 <___vfprintf_internal_r+0x404>
 80041fc:	8523c83a 	sub	r17,r16,r20
 8004200:	0440bd16 	blt	zero,r17,80044f8 <___vfprintf_internal_r+0x6f8>
 8004204:	8500010e 	bge	r16,r20,800420c <___vfprintf_internal_r+0x40c>
 8004208:	a021883a 	mov	r16,r20
 800420c:	d8800517 	ldw	r2,20(sp)
 8004210:	1405883a 	add	r2,r2,r16
 8004214:	d8800515 	stw	r2,20(sp)
 8004218:	1802b71e 	bne	r3,zero,8004cf8 <___vfprintf_internal_r+0xef8>
 800421c:	b8800007 	ldb	r2,0(r23)
 8004220:	d8001b15 	stw	zero,108(sp)
 8004224:	dd802704 	addi	r22,sp,156
 8004228:	103f2b1e 	bne	r2,zero,8003ed8 <___vfprintf_internal_r+0xd8>
 800422c:	d8801c17 	ldw	r2,112(sp)
 8004230:	1006381e 	bne	r2,zero,8005b14 <___vfprintf_internal_r+0x1d14>
 8004234:	9080030b 	ldhu	r2,12(r18)
 8004238:	1080100c 	andi	r2,r2,64
 800423c:	1006c71e 	bne	r2,zero,8005d5c <___vfprintf_internal_r+0x1f5c>
 8004240:	d8800517 	ldw	r2,20(sp)
 8004244:	dfc04017 	ldw	ra,256(sp)
 8004248:	df003f17 	ldw	fp,252(sp)
 800424c:	ddc03e17 	ldw	r23,248(sp)
 8004250:	dd803d17 	ldw	r22,244(sp)
 8004254:	dd403c17 	ldw	r21,240(sp)
 8004258:	dd003b17 	ldw	r20,236(sp)
 800425c:	dcc03a17 	ldw	r19,232(sp)
 8004260:	dc803917 	ldw	r18,228(sp)
 8004264:	dc403817 	ldw	r17,224(sp)
 8004268:	dc003717 	ldw	r16,220(sp)
 800426c:	dec04104 	addi	sp,sp,260
 8004270:	f800283a 	ret
 8004274:	900b883a 	mov	r5,r18
 8004278:	9809883a 	mov	r4,r19
 800427c:	800601c0 	call	800601c <__swsetup_r>
 8004280:	1006b61e 	bne	r2,zero,8005d5c <___vfprintf_internal_r+0x1f5c>
 8004284:	9080030b 	ldhu	r2,12(r18)
 8004288:	1080068c 	andi	r2,r2,26
 800428c:	10800298 	cmpnei	r2,r2,10
 8004290:	103f031e 	bne	r2,zero,8003ea0 <___vfprintf_internal_r+0xa0>
 8004294:	9080038f 	ldh	r2,14(r18)
 8004298:	103f0116 	blt	r2,zero,8003ea0 <___vfprintf_internal_r+0xa0>
 800429c:	d9c00617 	ldw	r7,24(sp)
 80042a0:	b00d883a 	mov	r6,r22
 80042a4:	900b883a 	mov	r5,r18
 80042a8:	9809883a 	mov	r4,r19
 80042ac:	8005ef80 	call	8005ef8 <__sbprintf>
 80042b0:	d8800515 	stw	r2,20(sp)
 80042b4:	003fe206 	br	8004240 <___vfprintf_internal_r+0x440>
 80042b8:	63000414 	ori	r12,r12,16
 80042bc:	6080080c 	andi	r2,r12,32
 80042c0:	10008126 	beq	r2,zero,80044c8 <___vfprintf_internal_r+0x6c8>
 80042c4:	d8c00617 	ldw	r3,24(sp)
 80042c8:	00800044 	movi	r2,1
 80042cc:	1d000017 	ldw	r20,0(r3)
 80042d0:	1d400117 	ldw	r21,4(r3)
 80042d4:	18c00204 	addi	r3,r3,8
 80042d8:	d8c00615 	stw	r3,24(sp)
 80042dc:	00000906 	br	8004304 <___vfprintf_internal_r+0x504>
 80042e0:	63000414 	ori	r12,r12,16
 80042e4:	6080080c 	andi	r2,r12,32
 80042e8:	10006b26 	beq	r2,zero,8004498 <___vfprintf_internal_r+0x698>
 80042ec:	d8c00617 	ldw	r3,24(sp)
 80042f0:	0005883a 	mov	r2,zero
 80042f4:	1d000017 	ldw	r20,0(r3)
 80042f8:	1d400117 	ldw	r21,4(r3)
 80042fc:	18c00204 	addi	r3,r3,8
 8004300:	d8c00615 	stw	r3,24(sp)
 8004304:	d8001345 	stb	zero,77(sp)
 8004308:	40ffffe0 	cmpeqi	r3,r8,-1
 800430c:	001b883a 	mov	r13,zero
 8004310:	1801351e 	bne	r3,zero,80047e8 <___vfprintf_internal_r+0x9e8>
 8004314:	047fdfc4 	movi	r17,-129
 8004318:	6448703a 	and	r4,r12,r17
 800431c:	a546b03a 	or	r3,r20,r21
 8004320:	d9000415 	stw	r4,16(sp)
 8004324:	1802e21e 	bne	r3,zero,8004eb0 <___vfprintf_internal_r+0x10b0>
 8004328:	40025d1e 	bne	r8,zero,8004ca0 <___vfprintf_internal_r+0xea0>
 800432c:	1003a41e 	bne	r2,zero,80051c0 <___vfprintf_internal_r+0x13c0>
 8004330:	6540004c 	andi	r21,r12,1
 8004334:	a803d226 	beq	r21,zero,8005280 <___vfprintf_internal_r+0x1480>
 8004338:	00800c04 	movi	r2,48
 800433c:	d88026c5 	stb	r2,155(sp)
 8004340:	dc4026c4 	addi	r17,sp,155
 8004344:	00014606 	br	8004860 <___vfprintf_internal_r+0xa60>
 8004348:	85e3c83a 	sub	r17,r16,r23
 800434c:	85ffb726 	beq	r16,r23,800422c <___vfprintf_internal_r+0x42c>
 8004350:	d8c01c17 	ldw	r3,112(sp)
 8004354:	d8801b17 	ldw	r2,108(sp)
 8004358:	b5c00015 	stw	r23,0(r22)
 800435c:	1c47883a 	add	r3,r3,r17
 8004360:	10800044 	addi	r2,r2,1
 8004364:	d8801b15 	stw	r2,108(sp)
 8004368:	b4400115 	stw	r17,4(r22)
 800436c:	d8c01c15 	stw	r3,112(sp)
 8004370:	10800208 	cmpgei	r2,r2,8
 8004374:	1000061e 	bne	r2,zero,8004390 <___vfprintf_internal_r+0x590>
 8004378:	b5800204 	addi	r22,r22,8
 800437c:	d8c00517 	ldw	r3,20(sp)
 8004380:	80800003 	ldbu	r2,0(r16)
 8004384:	1c47883a 	add	r3,r3,r17
 8004388:	d8c00515 	stw	r3,20(sp)
 800438c:	003edc06 	br	8003f00 <___vfprintf_internal_r+0x100>
 8004390:	d9801a04 	addi	r6,sp,104
 8004394:	900b883a 	mov	r5,r18
 8004398:	9809883a 	mov	r4,r19
 800439c:	800b2d00 	call	800b2d0 <__sprint_r>
 80043a0:	103fa41e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 80043a4:	dd802704 	addi	r22,sp,156
 80043a8:	003ff406 	br	800437c <___vfprintf_internal_r+0x57c>
 80043ac:	21003fcc 	andi	r4,r4,255
 80043b0:	2006681e 	bne	r4,zero,8005d54 <___vfprintf_internal_r+0x1f54>
 80043b4:	d8c00617 	ldw	r3,24(sp)
 80043b8:	6080020c 	andi	r2,r12,8
 80043bc:	19000204 	addi	r4,r3,8
 80043c0:	d9000e15 	stw	r4,56(sp)
 80043c4:	1003ce1e 	bne	r2,zero,8005300 <___vfprintf_internal_r+0x1500>
 80043c8:	d8800617 	ldw	r2,24(sp)
 80043cc:	10c00017 	ldw	r3,0(r2)
 80043d0:	10800117 	ldw	r2,4(r2)
 80043d4:	d8c00915 	stw	r3,36(sp)
 80043d8:	d8800a15 	stw	r2,40(sp)
 80043dc:	dd400a17 	ldw	r21,40(sp)
 80043e0:	dd000917 	ldw	r20,36(sp)
 80043e4:	00a00034 	movhi	r2,32768
 80043e8:	10bfffc4 	addi	r2,r2,-1
 80043ec:	a8a2703a 	and	r17,r21,r2
 80043f0:	01dffc34 	movhi	r7,32752
 80043f4:	01bfffc4 	movi	r6,-1
 80043f8:	39ffffc4 	addi	r7,r7,-1
 80043fc:	a009883a 	mov	r4,r20
 8004400:	880b883a 	mov	r5,r17
 8004404:	da000615 	stw	r8,24(sp)
 8004408:	db000415 	stw	r12,16(sp)
 800440c:	80106cc0 	call	80106cc <__unorddf2>
 8004410:	db000417 	ldw	r12,16(sp)
 8004414:	da000617 	ldw	r8,24(sp)
 8004418:	10046e1e 	bne	r2,zero,80055d4 <___vfprintf_internal_r+0x17d4>
 800441c:	01dffc34 	movhi	r7,32752
 8004420:	01bfffc4 	movi	r6,-1
 8004424:	39ffffc4 	addi	r7,r7,-1
 8004428:	a009883a 	mov	r4,r20
 800442c:	880b883a 	mov	r5,r17
 8004430:	800f6380 	call	800f638 <__ledf2>
 8004434:	db000417 	ldw	r12,16(sp)
 8004438:	da000617 	ldw	r8,24(sp)
 800443c:	0084650e 	bge	zero,r2,80055d4 <___vfprintf_internal_r+0x17d4>
 8004440:	000d883a 	mov	r6,zero
 8004444:	000f883a 	mov	r7,zero
 8004448:	a009883a 	mov	r4,r20
 800444c:	a80b883a 	mov	r5,r21
 8004450:	800f6380 	call	800f638 <__ledf2>
 8004454:	db000417 	ldw	r12,16(sp)
 8004458:	10059b16 	blt	r2,zero,8005ac8 <___vfprintf_internal_r+0x1cc8>
 800445c:	db401343 	ldbu	r13,77(sp)
 8004460:	e0801210 	cmplti	r2,fp,72
 8004464:	1005721e 	bne	r2,zero,8005a30 <___vfprintf_internal_r+0x1c30>
 8004468:	04420174 	movhi	r17,2053
 800446c:	8c7e5e04 	addi	r17,r17,-1672
 8004470:	00bfdfc4 	movi	r2,-129
 8004474:	6084703a 	and	r2,r12,r2
 8004478:	d8800415 	stw	r2,16(sp)
 800447c:	d8800e17 	ldw	r2,56(sp)
 8004480:	050000c4 	movi	r20,3
 8004484:	054000c4 	movi	r21,3
 8004488:	d8800615 	stw	r2,24(sp)
 800448c:	0011883a 	mov	r8,zero
 8004490:	d8000715 	stw	zero,28(sp)
 8004494:	0000f606 	br	8004870 <___vfprintf_internal_r+0xa70>
 8004498:	d9000617 	ldw	r4,24(sp)
 800449c:	6080040c 	andi	r2,r12,16
 80044a0:	20c00104 	addi	r3,r4,4
 80044a4:	1003871e 	bne	r2,zero,80052c4 <___vfprintf_internal_r+0x14c4>
 80044a8:	6080100c 	andi	r2,r12,64
 80044ac:	10056926 	beq	r2,zero,8005a54 <___vfprintf_internal_r+0x1c54>
 80044b0:	d8800617 	ldw	r2,24(sp)
 80044b4:	002b883a 	mov	r21,zero
 80044b8:	d8c00615 	stw	r3,24(sp)
 80044bc:	1500000b 	ldhu	r20,0(r2)
 80044c0:	0005883a 	mov	r2,zero
 80044c4:	003f8f06 	br	8004304 <___vfprintf_internal_r+0x504>
 80044c8:	d9000617 	ldw	r4,24(sp)
 80044cc:	6080040c 	andi	r2,r12,16
 80044d0:	20c00104 	addi	r3,r4,4
 80044d4:	1003801e 	bne	r2,zero,80052d8 <___vfprintf_internal_r+0x14d8>
 80044d8:	6080100c 	andi	r2,r12,64
 80044dc:	10056326 	beq	r2,zero,8005a6c <___vfprintf_internal_r+0x1c6c>
 80044e0:	d8800617 	ldw	r2,24(sp)
 80044e4:	002b883a 	mov	r21,zero
 80044e8:	d8c00615 	stw	r3,24(sp)
 80044ec:	1500000b 	ldhu	r20,0(r2)
 80044f0:	00800044 	movi	r2,1
 80044f4:	003f8306 	br	8004304 <___vfprintf_internal_r+0x504>
 80044f8:	03020174 	movhi	r12,2053
 80044fc:	89000450 	cmplti	r4,r17,17
 8004500:	d8801b17 	ldw	r2,108(sp)
 8004504:	633e7204 	addi	r12,r12,-1592
 8004508:	20001b1e 	bne	r4,zero,8004578 <___vfprintf_internal_r+0x778>
 800450c:	05400404 	movi	r21,16
 8004510:	6039883a 	mov	fp,r12
 8004514:	00000406 	br	8004528 <___vfprintf_internal_r+0x728>
 8004518:	8c7ffc04 	addi	r17,r17,-16
 800451c:	89000448 	cmpgei	r4,r17,17
 8004520:	b5800204 	addi	r22,r22,8
 8004524:	20001326 	beq	r4,zero,8004574 <___vfprintf_internal_r+0x774>
 8004528:	10800044 	addi	r2,r2,1
 800452c:	18c00404 	addi	r3,r3,16
 8004530:	b7000015 	stw	fp,0(r22)
 8004534:	b5400115 	stw	r21,4(r22)
 8004538:	d8c01c15 	stw	r3,112(sp)
 800453c:	d8801b15 	stw	r2,108(sp)
 8004540:	11000208 	cmpgei	r4,r2,8
 8004544:	203ff426 	beq	r4,zero,8004518 <___vfprintf_internal_r+0x718>
 8004548:	d9801a04 	addi	r6,sp,104
 800454c:	900b883a 	mov	r5,r18
 8004550:	9809883a 	mov	r4,r19
 8004554:	800b2d00 	call	800b2d0 <__sprint_r>
 8004558:	103f361e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 800455c:	8c7ffc04 	addi	r17,r17,-16
 8004560:	89000448 	cmpgei	r4,r17,17
 8004564:	d8c01c17 	ldw	r3,112(sp)
 8004568:	d8801b17 	ldw	r2,108(sp)
 800456c:	dd802704 	addi	r22,sp,156
 8004570:	203fed1e 	bne	r4,zero,8004528 <___vfprintf_internal_r+0x728>
 8004574:	e019883a 	mov	r12,fp
 8004578:	10800044 	addi	r2,r2,1
 800457c:	1c47883a 	add	r3,r3,r17
 8004580:	d8801b15 	stw	r2,108(sp)
 8004584:	b3000015 	stw	r12,0(r22)
 8004588:	b4400115 	stw	r17,4(r22)
 800458c:	d8c01c15 	stw	r3,112(sp)
 8004590:	10800210 	cmplti	r2,r2,8
 8004594:	103f1b1e 	bne	r2,zero,8004204 <___vfprintf_internal_r+0x404>
 8004598:	d9801a04 	addi	r6,sp,104
 800459c:	900b883a 	mov	r5,r18
 80045a0:	9809883a 	mov	r4,r19
 80045a4:	800b2d00 	call	800b2d0 <__sprint_r>
 80045a8:	103f221e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 80045ac:	d8c01c17 	ldw	r3,112(sp)
 80045b0:	003f1406 	br	8004204 <___vfprintf_internal_r+0x404>
 80045b4:	9809883a 	mov	r4,r19
 80045b8:	80080d40 	call	80080d4 <__sinit>
 80045bc:	003e2806 	br	8003e60 <___vfprintf_internal_r+0x60>
 80045c0:	21003fcc 	andi	r4,r4,255
 80045c4:	2005d91e 	bne	r4,zero,8005d2c <___vfprintf_internal_r+0x1f2c>
 80045c8:	6080080c 	andi	r2,r12,32
 80045cc:	10007026 	beq	r2,zero,8004790 <___vfprintf_internal_r+0x990>
 80045d0:	d8c00617 	ldw	r3,24(sp)
 80045d4:	18800117 	ldw	r2,4(r3)
 80045d8:	1d000017 	ldw	r20,0(r3)
 80045dc:	18c00204 	addi	r3,r3,8
 80045e0:	d8c00615 	stw	r3,24(sp)
 80045e4:	102b883a 	mov	r21,r2
 80045e8:	10007516 	blt	r2,zero,80047c0 <___vfprintf_internal_r+0x9c0>
 80045ec:	40bfffd8 	cmpnei	r2,r8,-1
 80045f0:	10034826 	beq	r2,zero,8005314 <___vfprintf_internal_r+0x1514>
 80045f4:	047fdfc4 	movi	r17,-129
 80045f8:	6446703a 	and	r3,r12,r17
 80045fc:	a544b03a 	or	r2,r20,r21
 8004600:	d8c00415 	stw	r3,16(sp)
 8004604:	db401343 	ldbu	r13,77(sp)
 8004608:	1002ec26 	beq	r2,zero,80051bc <___vfprintf_internal_r+0x13bc>
 800460c:	db000417 	ldw	r12,16(sp)
 8004610:	a803421e 	bne	r21,zero,800531c <___vfprintf_internal_r+0x151c>
 8004614:	a08002a8 	cmpgeui	r2,r20,10
 8004618:	1003401e 	bne	r2,zero,800531c <___vfprintf_internal_r+0x151c>
 800461c:	a5000c04 	addi	r20,r20,48
 8004620:	dd0026c5 	stb	r20,155(sp)
 8004624:	db000415 	stw	r12,16(sp)
 8004628:	05400044 	movi	r21,1
 800462c:	dc4026c4 	addi	r17,sp,155
 8004630:	00008b06 	br	8004860 <___vfprintf_internal_r+0xa60>
 8004634:	bac00007 	ldb	r11,0(r23)
 8004638:	63001014 	ori	r12,r12,64
 800463c:	003e3c06 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004640:	21003fcc 	andi	r4,r4,255
 8004644:	2005bf1e 	bne	r4,zero,8005d44 <___vfprintf_internal_r+0x1f44>
 8004648:	00820174 	movhi	r2,2053
 800464c:	10be6604 	addi	r2,r2,-1640
 8004650:	d8800c15 	stw	r2,48(sp)
 8004654:	6080080c 	andi	r2,r12,32
 8004658:	1000d526 	beq	r2,zero,80049b0 <___vfprintf_internal_r+0xbb0>
 800465c:	d8800617 	ldw	r2,24(sp)
 8004660:	15000017 	ldw	r20,0(r2)
 8004664:	15400117 	ldw	r21,4(r2)
 8004668:	10800204 	addi	r2,r2,8
 800466c:	d8800615 	stw	r2,24(sp)
 8004670:	6080004c 	andi	r2,r12,1
 8004674:	10000226 	beq	r2,zero,8004680 <___vfprintf_internal_r+0x880>
 8004678:	a544b03a 	or	r2,r20,r21
 800467c:	1003071e 	bne	r2,zero,800529c <___vfprintf_internal_r+0x149c>
 8004680:	00800084 	movi	r2,2
 8004684:	003f1f06 	br	8004304 <___vfprintf_internal_r+0x504>
 8004688:	d8800617 	ldw	r2,24(sp)
 800468c:	d8001345 	stb	zero,77(sp)
 8004690:	14400017 	ldw	r17,0(r2)
 8004694:	10c00104 	addi	r3,r2,4
 8004698:	88037526 	beq	r17,zero,8005470 <___vfprintf_internal_r+0x1670>
 800469c:	40bfffe0 	cmpeqi	r2,r8,-1
 80046a0:	1004641e 	bne	r2,zero,8005834 <___vfprintf_internal_r+0x1a34>
 80046a4:	400d883a 	mov	r6,r8
 80046a8:	000b883a 	mov	r5,zero
 80046ac:	8809883a 	mov	r4,r17
 80046b0:	d8c00715 	stw	r3,28(sp)
 80046b4:	db000615 	stw	r12,24(sp)
 80046b8:	da000415 	stw	r8,16(sp)
 80046bc:	80096140 	call	8009614 <memchr>
 80046c0:	da000417 	ldw	r8,16(sp)
 80046c4:	db000617 	ldw	r12,24(sp)
 80046c8:	d8c00717 	ldw	r3,28(sp)
 80046cc:	10058726 	beq	r2,zero,8005cec <___vfprintf_internal_r+0x1eec>
 80046d0:	146bc83a 	sub	r21,r2,r17
 80046d4:	a829883a 	mov	r20,r21
 80046d8:	d8c00615 	stw	r3,24(sp)
 80046dc:	003e8b06 	br	800410c <___vfprintf_internal_r+0x30c>
 80046e0:	bac00007 	ldb	r11,0(r23)
 80046e4:	63000814 	ori	r12,r12,32
 80046e8:	003e1106 	br	8003f30 <___vfprintf_internal_r+0x130>
 80046ec:	d8c00617 	ldw	r3,24(sp)
 80046f0:	00800c04 	movi	r2,48
 80046f4:	d8801385 	stb	r2,78(sp)
 80046f8:	00801e04 	movi	r2,120
 80046fc:	01020174 	movhi	r4,2053
 8004700:	d88013c5 	stb	r2,79(sp)
 8004704:	18800104 	addi	r2,r3,4
 8004708:	d8800615 	stw	r2,24(sp)
 800470c:	20be6604 	addi	r2,r4,-1640
 8004710:	d8800c15 	stw	r2,48(sp)
 8004714:	1d000017 	ldw	r20,0(r3)
 8004718:	002b883a 	mov	r21,zero
 800471c:	63000094 	ori	r12,r12,2
 8004720:	00800084 	movi	r2,2
 8004724:	07001e04 	movi	fp,120
 8004728:	003ef606 	br	8004304 <___vfprintf_internal_r+0x504>
 800472c:	21003fcc 	andi	r4,r4,255
 8004730:	2005861e 	bne	r4,zero,8005d4c <___vfprintf_internal_r+0x1f4c>
 8004734:	d9000617 	ldw	r4,24(sp)
 8004738:	6080080c 	andi	r2,r12,32
 800473c:	20c00017 	ldw	r3,0(r4)
 8004740:	21000104 	addi	r4,r4,4
 8004744:	d9000615 	stw	r4,24(sp)
 8004748:	1002cf1e 	bne	r2,zero,8005288 <___vfprintf_internal_r+0x1488>
 800474c:	6080040c 	andi	r2,r12,16
 8004750:	10036d1e 	bne	r2,zero,8005508 <___vfprintf_internal_r+0x1708>
 8004754:	6300100c 	andi	r12,r12,64
 8004758:	60036b26 	beq	r12,zero,8005508 <___vfprintf_internal_r+0x1708>
 800475c:	d8800517 	ldw	r2,20(sp)
 8004760:	1880000d 	sth	r2,0(r3)
 8004764:	003dda06 	br	8003ed0 <___vfprintf_internal_r+0xd0>
 8004768:	bac00007 	ldb	r11,0(r23)
 800476c:	58801b18 	cmpnei	r2,r11,108
 8004770:	10032e26 	beq	r2,zero,800542c <___vfprintf_internal_r+0x162c>
 8004774:	63000414 	ori	r12,r12,16
 8004778:	003ded06 	br	8003f30 <___vfprintf_internal_r+0x130>
 800477c:	21003fcc 	andi	r4,r4,255
 8004780:	20056e1e 	bne	r4,zero,8005d3c <___vfprintf_internal_r+0x1f3c>
 8004784:	63000414 	ori	r12,r12,16
 8004788:	6080080c 	andi	r2,r12,32
 800478c:	103f901e 	bne	r2,zero,80045d0 <___vfprintf_internal_r+0x7d0>
 8004790:	d9000617 	ldw	r4,24(sp)
 8004794:	6080040c 	andi	r2,r12,16
 8004798:	20c00104 	addi	r3,r4,4
 800479c:	1002d31e 	bne	r2,zero,80052ec <___vfprintf_internal_r+0x14ec>
 80047a0:	6080100c 	andi	r2,r12,64
 80047a4:	1004a526 	beq	r2,zero,8005a3c <___vfprintf_internal_r+0x1c3c>
 80047a8:	d8800617 	ldw	r2,24(sp)
 80047ac:	d8c00615 	stw	r3,24(sp)
 80047b0:	1500000f 	ldh	r20,0(r2)
 80047b4:	a02bd7fa 	srai	r21,r20,31
 80047b8:	a805883a 	mov	r2,r21
 80047bc:	103f8b0e 	bge	r2,zero,80045ec <___vfprintf_internal_r+0x7ec>
 80047c0:	a004c03a 	cmpne	r2,r20,zero
 80047c4:	056bc83a 	sub	r21,zero,r21
 80047c8:	a8abc83a 	sub	r21,r21,r2
 80047cc:	00800b44 	movi	r2,45
 80047d0:	d8801345 	stb	r2,77(sp)
 80047d4:	40ffffe0 	cmpeqi	r3,r8,-1
 80047d8:	0529c83a 	sub	r20,zero,r20
 80047dc:	03400b44 	movi	r13,45
 80047e0:	00800044 	movi	r2,1
 80047e4:	183ecb26 	beq	r3,zero,8004314 <___vfprintf_internal_r+0x514>
 80047e8:	10c00060 	cmpeqi	r3,r2,1
 80047ec:	183f881e 	bne	r3,zero,8004610 <___vfprintf_internal_r+0x810>
 80047f0:	108000a0 	cmpeqi	r2,r2,2
 80047f4:	10012f1e 	bne	r2,zero,8004cb4 <___vfprintf_internal_r+0xeb4>
 80047f8:	dc402704 	addi	r17,sp,156
 80047fc:	a004d0fa 	srli	r2,r20,3
 8004800:	a806977a 	slli	r3,r21,29
 8004804:	a82ad0fa 	srli	r21,r21,3
 8004808:	a50001cc 	andi	r20,r20,7
 800480c:	a1000c04 	addi	r4,r20,48
 8004810:	18a8b03a 	or	r20,r3,r2
 8004814:	893fffc5 	stb	r4,-1(r17)
 8004818:	a544b03a 	or	r2,r20,r21
 800481c:	880b883a 	mov	r5,r17
 8004820:	8c7fffc4 	addi	r17,r17,-1
 8004824:	103ff51e 	bne	r2,zero,80047fc <___vfprintf_internal_r+0x9fc>
 8004828:	6080004c 	andi	r2,r12,1
 800482c:	10012e26 	beq	r2,zero,8004ce8 <___vfprintf_internal_r+0xee8>
 8004830:	21003fcc 	andi	r4,r4,255
 8004834:	2100201c 	xori	r4,r4,128
 8004838:	213fe004 	addi	r4,r4,-128
 800483c:	20800c18 	cmpnei	r2,r4,48
 8004840:	10012926 	beq	r2,zero,8004ce8 <___vfprintf_internal_r+0xee8>
 8004844:	00800c04 	movi	r2,48
 8004848:	297fff84 	addi	r5,r5,-2
 800484c:	88bfffc5 	stb	r2,-1(r17)
 8004850:	d8802704 	addi	r2,sp,156
 8004854:	116bc83a 	sub	r21,r2,r5
 8004858:	db000415 	stw	r12,16(sp)
 800485c:	2823883a 	mov	r17,r5
 8004860:	4029883a 	mov	r20,r8
 8004864:	4540010e 	bge	r8,r21,800486c <___vfprintf_internal_r+0xa6c>
 8004868:	a829883a 	mov	r20,r21
 800486c:	d8000715 	stw	zero,28(sp)
 8004870:	6b403fcc 	andi	r13,r13,255
 8004874:	6b40201c 	xori	r13,r13,128
 8004878:	6b7fe004 	addi	r13,r13,-128
 800487c:	683e2626 	beq	r13,zero,8004118 <___vfprintf_internal_r+0x318>
 8004880:	a5000044 	addi	r20,r20,1
 8004884:	003e2406 	br	8004118 <___vfprintf_internal_r+0x318>
 8004888:	bac00007 	ldb	r11,0(r23)
 800488c:	63002014 	ori	r12,r12,128
 8004890:	003da706 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004894:	bf000007 	ldb	fp,0(r23)
 8004898:	b8c00044 	addi	r3,r23,1
 800489c:	e0800aa0 	cmpeqi	r2,fp,42
 80048a0:	1005821e 	bne	r2,zero,8005eac <___vfprintf_internal_r+0x20ac>
 80048a4:	e0bff404 	addi	r2,fp,-48
 80048a8:	118002b0 	cmpltui	r6,r2,10
 80048ac:	182f883a 	mov	r23,r3
 80048b0:	0011883a 	mov	r8,zero
 80048b4:	303da026 	beq	r6,zero,8003f38 <___vfprintf_internal_r+0x138>
 80048b8:	bf000007 	ldb	fp,0(r23)
 80048bc:	420002a4 	muli	r8,r8,10
 80048c0:	bdc00044 	addi	r23,r23,1
 80048c4:	4091883a 	add	r8,r8,r2
 80048c8:	e0bff404 	addi	r2,fp,-48
 80048cc:	10c002b0 	cmpltui	r3,r2,10
 80048d0:	183ff91e 	bne	r3,zero,80048b8 <___vfprintf_internal_r+0xab8>
 80048d4:	003d9806 	br	8003f38 <___vfprintf_internal_r+0x138>
 80048d8:	bf000003 	ldbu	fp,0(r23)
 80048dc:	e2c03fcc 	andi	r11,fp,255
 80048e0:	5ac0201c 	xori	r11,r11,128
 80048e4:	63000114 	ori	r12,r12,4
 80048e8:	5affe004 	addi	r11,r11,-128
 80048ec:	003d9006 	br	8003f30 <___vfprintf_internal_r+0x130>
 80048f0:	bac00007 	ldb	r11,0(r23)
 80048f4:	01000044 	movi	r4,1
 80048f8:	01400ac4 	movi	r5,43
 80048fc:	003d8c06 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004900:	d8800617 	ldw	r2,24(sp)
 8004904:	bf000003 	ldbu	fp,0(r23)
 8004908:	14000017 	ldw	r16,0(r2)
 800490c:	10800104 	addi	r2,r2,4
 8004910:	8002aa16 	blt	r16,zero,80053bc <___vfprintf_internal_r+0x15bc>
 8004914:	d8800615 	stw	r2,24(sp)
 8004918:	e2c03fcc 	andi	r11,fp,255
 800491c:	5ac0201c 	xori	r11,r11,128
 8004920:	5affe004 	addi	r11,r11,-128
 8004924:	003d8206 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004928:	bac00007 	ldb	r11,0(r23)
 800492c:	63000054 	ori	r12,r12,1
 8004930:	003d7f06 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004934:	28803fcc 	andi	r2,r5,255
 8004938:	1080201c 	xori	r2,r2,128
 800493c:	10bfe004 	addi	r2,r2,-128
 8004940:	bf000003 	ldbu	fp,0(r23)
 8004944:	103ff41e 	bne	r2,zero,8004918 <___vfprintf_internal_r+0xb18>
 8004948:	e2c03fcc 	andi	r11,fp,255
 800494c:	5ac0201c 	xori	r11,r11,128
 8004950:	01000044 	movi	r4,1
 8004954:	01400804 	movi	r5,32
 8004958:	5affe004 	addi	r11,r11,-128
 800495c:	003d7406 	br	8003f30 <___vfprintf_internal_r+0x130>
 8004960:	bac00007 	ldb	r11,0(r23)
 8004964:	63000214 	ori	r12,r12,8
 8004968:	003d7106 	br	8003f30 <___vfprintf_internal_r+0x130>
 800496c:	d8c00617 	ldw	r3,24(sp)
 8004970:	d8001345 	stb	zero,77(sp)
 8004974:	05000044 	movi	r20,1
 8004978:	18800017 	ldw	r2,0(r3)
 800497c:	18c00104 	addi	r3,r3,4
 8004980:	d8c00615 	stw	r3,24(sp)
 8004984:	d8801d05 	stb	r2,116(sp)
 8004988:	05400044 	movi	r21,1
 800498c:	dc401d04 	addi	r17,sp,116
 8004990:	003dde06 	br	800410c <___vfprintf_internal_r+0x30c>
 8004994:	21003fcc 	andi	r4,r4,255
 8004998:	2004e61e 	bne	r4,zero,8005d34 <___vfprintf_internal_r+0x1f34>
 800499c:	00820174 	movhi	r2,2053
 80049a0:	10be6104 	addi	r2,r2,-1660
 80049a4:	d8800c15 	stw	r2,48(sp)
 80049a8:	6080080c 	andi	r2,r12,32
 80049ac:	103f2b1e 	bne	r2,zero,800465c <___vfprintf_internal_r+0x85c>
 80049b0:	d9000617 	ldw	r4,24(sp)
 80049b4:	6080040c 	andi	r2,r12,16
 80049b8:	20c00104 	addi	r3,r4,4
 80049bc:	10023d1e 	bne	r2,zero,80052b4 <___vfprintf_internal_r+0x14b4>
 80049c0:	6080100c 	andi	r2,r12,64
 80049c4:	10042f26 	beq	r2,zero,8005a84 <___vfprintf_internal_r+0x1c84>
 80049c8:	d8800617 	ldw	r2,24(sp)
 80049cc:	002b883a 	mov	r21,zero
 80049d0:	d8c00615 	stw	r3,24(sp)
 80049d4:	1500000b 	ldhu	r20,0(r2)
 80049d8:	003f2506 	br	8004670 <___vfprintf_internal_r+0x870>
 80049dc:	e2c01990 	cmplti	r11,fp,102
 80049e0:	5800f61e 	bne	r11,zero,8004dbc <___vfprintf_internal_r+0xfbc>
 80049e4:	d9000917 	ldw	r4,36(sp)
 80049e8:	d9400a17 	ldw	r5,40(sp)
 80049ec:	000d883a 	mov	r6,zero
 80049f0:	000f883a 	mov	r7,zero
 80049f4:	d8c00e15 	stw	r3,56(sp)
 80049f8:	800f4c80 	call	800f4c8 <__eqdf2>
 80049fc:	d8c00e17 	ldw	r3,56(sp)
 8004a00:	1001881e 	bne	r2,zero,8005024 <___vfprintf_internal_r+0x1224>
 8004a04:	d8801b17 	ldw	r2,108(sp)
 8004a08:	01020174 	movhi	r4,2053
 8004a0c:	213e6d04 	addi	r4,r4,-1612
 8004a10:	10800044 	addi	r2,r2,1
 8004a14:	18c00044 	addi	r3,r3,1
 8004a18:	b1000015 	stw	r4,0(r22)
 8004a1c:	01000044 	movi	r4,1
 8004a20:	d8801b15 	stw	r2,108(sp)
 8004a24:	b1000115 	stw	r4,4(r22)
 8004a28:	d8c01c15 	stw	r3,112(sp)
 8004a2c:	10800208 	cmpgei	r2,r2,8
 8004a30:	10036e1e 	bne	r2,zero,80057ec <___vfprintf_internal_r+0x19ec>
 8004a34:	b5800204 	addi	r22,r22,8
 8004a38:	d8801417 	ldw	r2,80(sp)
 8004a3c:	d9000817 	ldw	r4,32(sp)
 8004a40:	11020b0e 	bge	r2,r4,8005270 <___vfprintf_internal_r+0x1470>
 8004a44:	d8800d17 	ldw	r2,52(sp)
 8004a48:	d9000b17 	ldw	r4,44(sp)
 8004a4c:	b0800015 	stw	r2,0(r22)
 8004a50:	d8801b17 	ldw	r2,108(sp)
 8004a54:	1907883a 	add	r3,r3,r4
 8004a58:	b1000115 	stw	r4,4(r22)
 8004a5c:	10800044 	addi	r2,r2,1
 8004a60:	d8801b15 	stw	r2,108(sp)
 8004a64:	d8c01c15 	stw	r3,112(sp)
 8004a68:	10800208 	cmpgei	r2,r2,8
 8004a6c:	1002761e 	bne	r2,zero,8005448 <___vfprintf_internal_r+0x1648>
 8004a70:	b5800204 	addi	r22,r22,8
 8004a74:	d8800817 	ldw	r2,32(sp)
 8004a78:	157fffc4 	addi	r21,r2,-1
 8004a7c:	057ddc0e 	bge	zero,r21,80041f0 <___vfprintf_internal_r+0x3f0>
 8004a80:	01c20174 	movhi	r7,2053
 8004a84:	a9000450 	cmplti	r4,r21,17
 8004a88:	d8801b17 	ldw	r2,108(sp)
 8004a8c:	39fe6e04 	addi	r7,r7,-1608
 8004a90:	2003521e 	bne	r4,zero,80057dc <___vfprintf_internal_r+0x19dc>
 8004a94:	07000404 	movi	fp,16
 8004a98:	3823883a 	mov	r17,r7
 8004a9c:	00000406 	br	8004ab0 <___vfprintf_internal_r+0xcb0>
 8004aa0:	b5800204 	addi	r22,r22,8
 8004aa4:	ad7ffc04 	addi	r21,r21,-16
 8004aa8:	a9000448 	cmpgei	r4,r21,17
 8004aac:	20034a26 	beq	r4,zero,80057d8 <___vfprintf_internal_r+0x19d8>
 8004ab0:	10800044 	addi	r2,r2,1
 8004ab4:	18c00404 	addi	r3,r3,16
 8004ab8:	b4400015 	stw	r17,0(r22)
 8004abc:	b7000115 	stw	fp,4(r22)
 8004ac0:	d8c01c15 	stw	r3,112(sp)
 8004ac4:	d8801b15 	stw	r2,108(sp)
 8004ac8:	11000208 	cmpgei	r4,r2,8
 8004acc:	203ff426 	beq	r4,zero,8004aa0 <___vfprintf_internal_r+0xca0>
 8004ad0:	d9801a04 	addi	r6,sp,104
 8004ad4:	900b883a 	mov	r5,r18
 8004ad8:	9809883a 	mov	r4,r19
 8004adc:	800b2d00 	call	800b2d0 <__sprint_r>
 8004ae0:	103dd41e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004ae4:	d8c01c17 	ldw	r3,112(sp)
 8004ae8:	d8801b17 	ldw	r2,108(sp)
 8004aec:	dd802704 	addi	r22,sp,156
 8004af0:	003fec06 	br	8004aa4 <___vfprintf_internal_r+0xca4>
 8004af4:	8519c83a 	sub	r12,r16,r20
 8004af8:	033dae0e 	bge	zero,r12,80041b4 <___vfprintf_internal_r+0x3b4>
 8004afc:	01c20174 	movhi	r7,2053
 8004b00:	61000450 	cmplti	r4,r12,17
 8004b04:	d8801b17 	ldw	r2,108(sp)
 8004b08:	39fe6e04 	addi	r7,r7,-1608
 8004b0c:	2000281e 	bne	r4,zero,8004bb0 <___vfprintf_internal_r+0xdb0>
 8004b10:	dc400e15 	stw	r17,56(sp)
 8004b14:	dc000f15 	stw	r16,60(sp)
 8004b18:	b009883a 	mov	r4,r22
 8004b1c:	03400404 	movi	r13,16
 8004b20:	a02d883a 	mov	r22,r20
 8004b24:	6021883a 	mov	r16,r12
 8004b28:	4029883a 	mov	r20,r8
 8004b2c:	3823883a 	mov	r17,r7
 8004b30:	00000406 	br	8004b44 <___vfprintf_internal_r+0xd44>
 8004b34:	843ffc04 	addi	r16,r16,-16
 8004b38:	81400448 	cmpgei	r5,r16,17
 8004b3c:	21000204 	addi	r4,r4,8
 8004b40:	28001426 	beq	r5,zero,8004b94 <___vfprintf_internal_r+0xd94>
 8004b44:	10800044 	addi	r2,r2,1
 8004b48:	18c00404 	addi	r3,r3,16
 8004b4c:	24400015 	stw	r17,0(r4)
 8004b50:	23400115 	stw	r13,4(r4)
 8004b54:	d8c01c15 	stw	r3,112(sp)
 8004b58:	d8801b15 	stw	r2,108(sp)
 8004b5c:	11400208 	cmpgei	r5,r2,8
 8004b60:	283ff426 	beq	r5,zero,8004b34 <___vfprintf_internal_r+0xd34>
 8004b64:	d9801a04 	addi	r6,sp,104
 8004b68:	900b883a 	mov	r5,r18
 8004b6c:	9809883a 	mov	r4,r19
 8004b70:	800b2d00 	call	800b2d0 <__sprint_r>
 8004b74:	103daf1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004b78:	843ffc04 	addi	r16,r16,-16
 8004b7c:	81400448 	cmpgei	r5,r16,17
 8004b80:	d8c01c17 	ldw	r3,112(sp)
 8004b84:	d8801b17 	ldw	r2,108(sp)
 8004b88:	d9002704 	addi	r4,sp,156
 8004b8c:	03400404 	movi	r13,16
 8004b90:	283fec1e 	bne	r5,zero,8004b44 <___vfprintf_internal_r+0xd44>
 8004b94:	8019883a 	mov	r12,r16
 8004b98:	880f883a 	mov	r7,r17
 8004b9c:	dc000f17 	ldw	r16,60(sp)
 8004ba0:	dc400e17 	ldw	r17,56(sp)
 8004ba4:	a011883a 	mov	r8,r20
 8004ba8:	b029883a 	mov	r20,r22
 8004bac:	202d883a 	mov	r22,r4
 8004bb0:	10800044 	addi	r2,r2,1
 8004bb4:	1b07883a 	add	r3,r3,r12
 8004bb8:	d8801b15 	stw	r2,108(sp)
 8004bbc:	b1c00015 	stw	r7,0(r22)
 8004bc0:	b3000115 	stw	r12,4(r22)
 8004bc4:	d8c01c15 	stw	r3,112(sp)
 8004bc8:	10800208 	cmpgei	r2,r2,8
 8004bcc:	10030f1e 	bne	r2,zero,800580c <___vfprintf_internal_r+0x1a0c>
 8004bd0:	4551c83a 	sub	r8,r8,r21
 8004bd4:	b5800204 	addi	r22,r22,8
 8004bd8:	023d780e 	bge	zero,r8,80041bc <___vfprintf_internal_r+0x3bc>
 8004bdc:	01c20174 	movhi	r7,2053
 8004be0:	41000450 	cmplti	r4,r8,17
 8004be4:	d8801b17 	ldw	r2,108(sp)
 8004be8:	39fe6e04 	addi	r7,r7,-1608
 8004bec:	2000221e 	bne	r4,zero,8004c78 <___vfprintf_internal_r+0xe78>
 8004bf0:	dc400e15 	stw	r17,56(sp)
 8004bf4:	dc000f15 	stw	r16,60(sp)
 8004bf8:	03000404 	movi	r12,16
 8004bfc:	4021883a 	mov	r16,r8
 8004c00:	3823883a 	mov	r17,r7
 8004c04:	00000406 	br	8004c18 <___vfprintf_internal_r+0xe18>
 8004c08:	843ffc04 	addi	r16,r16,-16
 8004c0c:	81000448 	cmpgei	r4,r16,17
 8004c10:	b5800204 	addi	r22,r22,8
 8004c14:	20001426 	beq	r4,zero,8004c68 <___vfprintf_internal_r+0xe68>
 8004c18:	10800044 	addi	r2,r2,1
 8004c1c:	18c00404 	addi	r3,r3,16
 8004c20:	b4400015 	stw	r17,0(r22)
 8004c24:	b3000115 	stw	r12,4(r22)
 8004c28:	d8c01c15 	stw	r3,112(sp)
 8004c2c:	d8801b15 	stw	r2,108(sp)
 8004c30:	11000208 	cmpgei	r4,r2,8
 8004c34:	203ff426 	beq	r4,zero,8004c08 <___vfprintf_internal_r+0xe08>
 8004c38:	d9801a04 	addi	r6,sp,104
 8004c3c:	900b883a 	mov	r5,r18
 8004c40:	9809883a 	mov	r4,r19
 8004c44:	800b2d00 	call	800b2d0 <__sprint_r>
 8004c48:	103d7a1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004c4c:	843ffc04 	addi	r16,r16,-16
 8004c50:	81000448 	cmpgei	r4,r16,17
 8004c54:	d8c01c17 	ldw	r3,112(sp)
 8004c58:	d8801b17 	ldw	r2,108(sp)
 8004c5c:	dd802704 	addi	r22,sp,156
 8004c60:	03000404 	movi	r12,16
 8004c64:	203fec1e 	bne	r4,zero,8004c18 <___vfprintf_internal_r+0xe18>
 8004c68:	8011883a 	mov	r8,r16
 8004c6c:	880f883a 	mov	r7,r17
 8004c70:	dc000f17 	ldw	r16,60(sp)
 8004c74:	dc400e17 	ldw	r17,56(sp)
 8004c78:	10800044 	addi	r2,r2,1
 8004c7c:	1a07883a 	add	r3,r3,r8
 8004c80:	d8801b15 	stw	r2,108(sp)
 8004c84:	b1c00015 	stw	r7,0(r22)
 8004c88:	b2000115 	stw	r8,4(r22)
 8004c8c:	d8c01c15 	stw	r3,112(sp)
 8004c90:	10800208 	cmpgei	r2,r2,8
 8004c94:	10016e1e 	bne	r2,zero,8005250 <___vfprintf_internal_r+0x1450>
 8004c98:	b5800204 	addi	r22,r22,8
 8004c9c:	003d4706 	br	80041bc <___vfprintf_internal_r+0x3bc>
 8004ca0:	10c00060 	cmpeqi	r3,r2,1
 8004ca4:	1803c81e 	bne	r3,zero,8005bc8 <___vfprintf_internal_r+0x1dc8>
 8004ca8:	108000a0 	cmpeqi	r2,r2,2
 8004cac:	db000417 	ldw	r12,16(sp)
 8004cb0:	103ed126 	beq	r2,zero,80047f8 <___vfprintf_internal_r+0x9f8>
 8004cb4:	d9000c17 	ldw	r4,48(sp)
 8004cb8:	dc402704 	addi	r17,sp,156
 8004cbc:	a08003cc 	andi	r2,r20,15
 8004cc0:	a806973a 	slli	r3,r21,28
 8004cc4:	a028d13a 	srli	r20,r20,4
 8004cc8:	2085883a 	add	r2,r4,r2
 8004ccc:	10800003 	ldbu	r2,0(r2)
 8004cd0:	a82ad13a 	srli	r21,r21,4
 8004cd4:	1d28b03a 	or	r20,r3,r20
 8004cd8:	88bfffc5 	stb	r2,-1(r17)
 8004cdc:	a544b03a 	or	r2,r20,r21
 8004ce0:	8c7fffc4 	addi	r17,r17,-1
 8004ce4:	103ff51e 	bne	r2,zero,8004cbc <___vfprintf_internal_r+0xebc>
 8004ce8:	d8802704 	addi	r2,sp,156
 8004cec:	146bc83a 	sub	r21,r2,r17
 8004cf0:	db000415 	stw	r12,16(sp)
 8004cf4:	003eda06 	br	8004860 <___vfprintf_internal_r+0xa60>
 8004cf8:	d9801a04 	addi	r6,sp,104
 8004cfc:	900b883a 	mov	r5,r18
 8004d00:	9809883a 	mov	r4,r19
 8004d04:	800b2d00 	call	800b2d0 <__sprint_r>
 8004d08:	103d4426 	beq	r2,zero,800421c <___vfprintf_internal_r+0x41c>
 8004d0c:	003d4906 	br	8004234 <___vfprintf_internal_r+0x434>
 8004d10:	d9801a04 	addi	r6,sp,104
 8004d14:	900b883a 	mov	r5,r18
 8004d18:	9809883a 	mov	r4,r19
 8004d1c:	800b2d00 	call	800b2d0 <__sprint_r>
 8004d20:	103d441e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004d24:	d9401417 	ldw	r5,80(sp)
 8004d28:	d8c01c17 	ldw	r3,112(sp)
 8004d2c:	dd802704 	addi	r22,sp,156
 8004d30:	2802c81e 	bne	r5,zero,8005854 <___vfprintf_internal_r+0x1a54>
 8004d34:	d8800417 	ldw	r2,16(sp)
 8004d38:	d9000817 	ldw	r4,32(sp)
 8004d3c:	1080004c 	andi	r2,r2,1
 8004d40:	1104b03a 	or	r2,r2,r4
 8004d44:	103d2a26 	beq	r2,zero,80041f0 <___vfprintf_internal_r+0x3f0>
 8004d48:	d8800d17 	ldw	r2,52(sp)
 8004d4c:	d9000b17 	ldw	r4,44(sp)
 8004d50:	b0800015 	stw	r2,0(r22)
 8004d54:	d8801b17 	ldw	r2,108(sp)
 8004d58:	20c7883a 	add	r3,r4,r3
 8004d5c:	b1000115 	stw	r4,4(r22)
 8004d60:	10800044 	addi	r2,r2,1
 8004d64:	d8c01c15 	stw	r3,112(sp)
 8004d68:	d8801b15 	stw	r2,108(sp)
 8004d6c:	11000208 	cmpgei	r4,r2,8
 8004d70:	2003821e 	bne	r4,zero,8005b7c <___vfprintf_internal_r+0x1d7c>
 8004d74:	b5800204 	addi	r22,r22,8
 8004d78:	d9000817 	ldw	r4,32(sp)
 8004d7c:	10800044 	addi	r2,r2,1
 8004d80:	d8801b15 	stw	r2,108(sp)
 8004d84:	20c7883a 	add	r3,r4,r3
 8004d88:	b4400015 	stw	r17,0(r22)
 8004d8c:	b1000115 	stw	r4,4(r22)
 8004d90:	d8c01c15 	stw	r3,112(sp)
 8004d94:	10800208 	cmpgei	r2,r2,8
 8004d98:	103d1426 	beq	r2,zero,80041ec <___vfprintf_internal_r+0x3ec>
 8004d9c:	d9801a04 	addi	r6,sp,104
 8004da0:	900b883a 	mov	r5,r18
 8004da4:	9809883a 	mov	r4,r19
 8004da8:	800b2d00 	call	800b2d0 <__sprint_r>
 8004dac:	103d211e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004db0:	d8c01c17 	ldw	r3,112(sp)
 8004db4:	dd802704 	addi	r22,sp,156
 8004db8:	003d0d06 	br	80041f0 <___vfprintf_internal_r+0x3f0>
 8004dbc:	d8800817 	ldw	r2,32(sp)
 8004dc0:	da001b17 	ldw	r8,108(sp)
 8004dc4:	18c00044 	addi	r3,r3,1
 8004dc8:	10800088 	cmpgei	r2,r2,2
 8004dcc:	45400044 	addi	r21,r8,1
 8004dd0:	b7000204 	addi	fp,r22,8
 8004dd4:	1000ec26 	beq	r2,zero,8005188 <___vfprintf_internal_r+0x1388>
 8004dd8:	00800044 	movi	r2,1
 8004ddc:	b0800115 	stw	r2,4(r22)
 8004de0:	b4400015 	stw	r17,0(r22)
 8004de4:	d8c01c15 	stw	r3,112(sp)
 8004de8:	dd401b15 	stw	r21,108(sp)
 8004dec:	a8800210 	cmplti	r2,r21,8
 8004df0:	1001d126 	beq	r2,zero,8005538 <___vfprintf_internal_r+0x1738>
 8004df4:	d8800b17 	ldw	r2,44(sp)
 8004df8:	d9000d17 	ldw	r4,52(sp)
 8004dfc:	ad400044 	addi	r21,r21,1
 8004e00:	1887883a 	add	r3,r3,r2
 8004e04:	e0800115 	stw	r2,4(fp)
 8004e08:	e1000015 	stw	r4,0(fp)
 8004e0c:	d8c01c15 	stw	r3,112(sp)
 8004e10:	dd401b15 	stw	r21,108(sp)
 8004e14:	a8800208 	cmpgei	r2,r21,8
 8004e18:	1001be1e 	bne	r2,zero,8005514 <___vfprintf_internal_r+0x1714>
 8004e1c:	e7000204 	addi	fp,fp,8
 8004e20:	d9000917 	ldw	r4,36(sp)
 8004e24:	d9400a17 	ldw	r5,40(sp)
 8004e28:	aa000044 	addi	r8,r21,1
 8004e2c:	000d883a 	mov	r6,zero
 8004e30:	000f883a 	mov	r7,zero
 8004e34:	d8c00e15 	stw	r3,56(sp)
 8004e38:	da000715 	stw	r8,28(sp)
 8004e3c:	800f4c80 	call	800f4c8 <__eqdf2>
 8004e40:	d8c00817 	ldw	r3,32(sp)
 8004e44:	da000717 	ldw	r8,28(sp)
 8004e48:	e5800204 	addi	r22,fp,8
 8004e4c:	1affffc4 	addi	r11,r3,-1
 8004e50:	d8c00e17 	ldw	r3,56(sp)
 8004e54:	1000de26 	beq	r2,zero,80051d0 <___vfprintf_internal_r+0x13d0>
 8004e58:	8a400044 	addi	r9,r17,1
 8004e5c:	1ac7883a 	add	r3,r3,r11
 8004e60:	da001b15 	stw	r8,108(sp)
 8004e64:	e2400015 	stw	r9,0(fp)
 8004e68:	e2c00115 	stw	r11,4(fp)
 8004e6c:	d8c01c15 	stw	r3,112(sp)
 8004e70:	42000208 	cmpgei	r8,r8,8
 8004e74:	4001621e 	bne	r8,zero,8005400 <___vfprintf_internal_r+0x1600>
 8004e78:	e0800404 	addi	r2,fp,16
 8004e7c:	aa000084 	addi	r8,r21,2
 8004e80:	b039883a 	mov	fp,r22
 8004e84:	102d883a 	mov	r22,r2
 8004e88:	d9001017 	ldw	r4,64(sp)
 8004e8c:	d8801644 	addi	r2,sp,89
 8004e90:	da001b15 	stw	r8,108(sp)
 8004e94:	20c7883a 	add	r3,r4,r3
 8004e98:	e0800015 	stw	r2,0(fp)
 8004e9c:	e1000115 	stw	r4,4(fp)
 8004ea0:	d8c01c15 	stw	r3,112(sp)
 8004ea4:	42000210 	cmplti	r8,r8,8
 8004ea8:	403cd11e 	bne	r8,zero,80041f0 <___vfprintf_internal_r+0x3f0>
 8004eac:	003fbb06 	br	8004d9c <___vfprintf_internal_r+0xf9c>
 8004eb0:	db000417 	ldw	r12,16(sp)
 8004eb4:	003e4c06 	br	80047e8 <___vfprintf_internal_r+0x9e8>
 8004eb8:	03020174 	movhi	r12,2053
 8004ebc:	39000450 	cmplti	r4,r7,17
 8004ec0:	d8801b17 	ldw	r2,108(sp)
 8004ec4:	633e7204 	addi	r12,r12,-1592
 8004ec8:	2000321e 	bne	r4,zero,8004f94 <___vfprintf_internal_r+0x1194>
 8004ecc:	dc401115 	stw	r17,68(sp)
 8004ed0:	b009883a 	mov	r4,r22
 8004ed4:	9023883a 	mov	r17,r18
 8004ed8:	a82d883a 	mov	r22,r21
 8004edc:	ddc01215 	stw	r23,72(sp)
 8004ee0:	03c00404 	movi	r15,16
 8004ee4:	a02f883a 	mov	r23,r20
 8004ee8:	db800e15 	stw	r14,56(sp)
 8004eec:	8029883a 	mov	r20,r16
 8004ef0:	db400f15 	stw	r13,60(sp)
 8004ef4:	402b883a 	mov	r21,r8
 8004ef8:	3821883a 	mov	r16,r7
 8004efc:	6025883a 	mov	r18,r12
 8004f00:	00000406 	br	8004f14 <___vfprintf_internal_r+0x1114>
 8004f04:	843ffc04 	addi	r16,r16,-16
 8004f08:	81800448 	cmpgei	r6,r16,17
 8004f0c:	21000204 	addi	r4,r4,8
 8004f10:	30001426 	beq	r6,zero,8004f64 <___vfprintf_internal_r+0x1164>
 8004f14:	10800044 	addi	r2,r2,1
 8004f18:	18c00404 	addi	r3,r3,16
 8004f1c:	24800015 	stw	r18,0(r4)
 8004f20:	23c00115 	stw	r15,4(r4)
 8004f24:	d8c01c15 	stw	r3,112(sp)
 8004f28:	d8801b15 	stw	r2,108(sp)
 8004f2c:	11800208 	cmpgei	r6,r2,8
 8004f30:	303ff426 	beq	r6,zero,8004f04 <___vfprintf_internal_r+0x1104>
 8004f34:	d9801a04 	addi	r6,sp,104
 8004f38:	880b883a 	mov	r5,r17
 8004f3c:	9809883a 	mov	r4,r19
 8004f40:	800b2d00 	call	800b2d0 <__sprint_r>
 8004f44:	1001a11e 	bne	r2,zero,80055cc <___vfprintf_internal_r+0x17cc>
 8004f48:	843ffc04 	addi	r16,r16,-16
 8004f4c:	81800448 	cmpgei	r6,r16,17
 8004f50:	d8c01c17 	ldw	r3,112(sp)
 8004f54:	d8801b17 	ldw	r2,108(sp)
 8004f58:	d9002704 	addi	r4,sp,156
 8004f5c:	03c00404 	movi	r15,16
 8004f60:	303fec1e 	bne	r6,zero,8004f14 <___vfprintf_internal_r+0x1114>
 8004f64:	800f883a 	mov	r7,r16
 8004f68:	9019883a 	mov	r12,r18
 8004f6c:	a021883a 	mov	r16,r20
 8004f70:	8825883a 	mov	r18,r17
 8004f74:	b829883a 	mov	r20,r23
 8004f78:	db800e17 	ldw	r14,56(sp)
 8004f7c:	db400f17 	ldw	r13,60(sp)
 8004f80:	ddc01217 	ldw	r23,72(sp)
 8004f84:	dc401117 	ldw	r17,68(sp)
 8004f88:	a811883a 	mov	r8,r21
 8004f8c:	b02b883a 	mov	r21,r22
 8004f90:	202d883a 	mov	r22,r4
 8004f94:	10800044 	addi	r2,r2,1
 8004f98:	19c7883a 	add	r3,r3,r7
 8004f9c:	d8801b15 	stw	r2,108(sp)
 8004fa0:	b3000015 	stw	r12,0(r22)
 8004fa4:	b1c00115 	stw	r7,4(r22)
 8004fa8:	d8c01c15 	stw	r3,112(sp)
 8004fac:	10800208 	cmpgei	r2,r2,8
 8004fb0:	1001781e 	bne	r2,zero,8005594 <___vfprintf_internal_r+0x1794>
 8004fb4:	b5800204 	addi	r22,r22,8
 8004fb8:	003c6106 	br	8004140 <___vfprintf_internal_r+0x340>
 8004fbc:	d9801a04 	addi	r6,sp,104
 8004fc0:	900b883a 	mov	r5,r18
 8004fc4:	9809883a 	mov	r4,r19
 8004fc8:	da000f15 	stw	r8,60(sp)
 8004fcc:	db400e15 	stw	r13,56(sp)
 8004fd0:	800b2d00 	call	800b2d0 <__sprint_r>
 8004fd4:	103c971e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8004fd8:	d8c01c17 	ldw	r3,112(sp)
 8004fdc:	da000f17 	ldw	r8,60(sp)
 8004fe0:	db400e17 	ldw	r13,56(sp)
 8004fe4:	dd802704 	addi	r22,sp,156
 8004fe8:	003c7006 	br	80041ac <___vfprintf_internal_r+0x3ac>
 8004fec:	d9801a04 	addi	r6,sp,104
 8004ff0:	900b883a 	mov	r5,r18
 8004ff4:	9809883a 	mov	r4,r19
 8004ff8:	da001115 	stw	r8,68(sp)
 8004ffc:	db400f15 	stw	r13,60(sp)
 8005000:	db800e15 	stw	r14,56(sp)
 8005004:	800b2d00 	call	800b2d0 <__sprint_r>
 8005008:	103c8a1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 800500c:	d8c01c17 	ldw	r3,112(sp)
 8005010:	da001117 	ldw	r8,68(sp)
 8005014:	db400f17 	ldw	r13,60(sp)
 8005018:	db800e17 	ldw	r14,56(sp)
 800501c:	dd802704 	addi	r22,sp,156
 8005020:	003c5506 	br	8004178 <___vfprintf_internal_r+0x378>
 8005024:	d9401417 	ldw	r5,80(sp)
 8005028:	01414c0e 	bge	zero,r5,800555c <___vfprintf_internal_r+0x175c>
 800502c:	d8800717 	ldw	r2,28(sp)
 8005030:	d9000817 	ldw	r4,32(sp)
 8005034:	102b883a 	mov	r21,r2
 8005038:	2080e316 	blt	r4,r2,80053c8 <___vfprintf_internal_r+0x15c8>
 800503c:	05400a0e 	bge	zero,r21,8005068 <___vfprintf_internal_r+0x1268>
 8005040:	d8801b17 	ldw	r2,108(sp)
 8005044:	1d47883a 	add	r3,r3,r21
 8005048:	b4400015 	stw	r17,0(r22)
 800504c:	10800044 	addi	r2,r2,1
 8005050:	d8801b15 	stw	r2,108(sp)
 8005054:	b5400115 	stw	r21,4(r22)
 8005058:	d8c01c15 	stw	r3,112(sp)
 800505c:	10800208 	cmpgei	r2,r2,8
 8005060:	10030c1e 	bne	r2,zero,8005c94 <___vfprintf_internal_r+0x1e94>
 8005064:	b5800204 	addi	r22,r22,8
 8005068:	a800ff16 	blt	r21,zero,8005468 <___vfprintf_internal_r+0x1668>
 800506c:	d8800717 	ldw	r2,28(sp)
 8005070:	156bc83a 	sub	r21,r2,r21
 8005074:	05410616 	blt	zero,r21,8005490 <___vfprintf_internal_r+0x1690>
 8005078:	dd401417 	ldw	r21,80(sp)
 800507c:	d8800817 	ldw	r2,32(sp)
 8005080:	a880d40e 	bge	r21,r2,80053d4 <___vfprintf_internal_r+0x15d4>
 8005084:	d8800d17 	ldw	r2,52(sp)
 8005088:	d9000b17 	ldw	r4,44(sp)
 800508c:	b0800015 	stw	r2,0(r22)
 8005090:	d8801b17 	ldw	r2,108(sp)
 8005094:	1907883a 	add	r3,r3,r4
 8005098:	b1000115 	stw	r4,4(r22)
 800509c:	10800044 	addi	r2,r2,1
 80050a0:	d8801b15 	stw	r2,108(sp)
 80050a4:	d8c01c15 	stw	r3,112(sp)
 80050a8:	10800208 	cmpgei	r2,r2,8
 80050ac:	10028e1e 	bne	r2,zero,8005ae8 <___vfprintf_internal_r+0x1ce8>
 80050b0:	b5800204 	addi	r22,r22,8
 80050b4:	d9000817 	ldw	r4,32(sp)
 80050b8:	d9400717 	ldw	r5,28(sp)
 80050bc:	2545c83a 	sub	r2,r4,r21
 80050c0:	2149c83a 	sub	r4,r4,r5
 80050c4:	102b883a 	mov	r21,r2
 80050c8:	2080010e 	bge	r4,r2,80050d0 <___vfprintf_internal_r+0x12d0>
 80050cc:	202b883a 	mov	r21,r4
 80050d0:	05400c0e 	bge	zero,r21,8005104 <___vfprintf_internal_r+0x1304>
 80050d4:	d9000717 	ldw	r4,28(sp)
 80050d8:	1d47883a 	add	r3,r3,r21
 80050dc:	b5400115 	stw	r21,4(r22)
 80050e0:	8913883a 	add	r9,r17,r4
 80050e4:	d9001b17 	ldw	r4,108(sp)
 80050e8:	b2400015 	stw	r9,0(r22)
 80050ec:	d8c01c15 	stw	r3,112(sp)
 80050f0:	21000044 	addi	r4,r4,1
 80050f4:	d9001b15 	stw	r4,108(sp)
 80050f8:	21000208 	cmpgei	r4,r4,8
 80050fc:	2002f01e 	bne	r4,zero,8005cc0 <___vfprintf_internal_r+0x1ec0>
 8005100:	b5800204 	addi	r22,r22,8
 8005104:	a800010e 	bge	r21,zero,800510c <___vfprintf_internal_r+0x130c>
 8005108:	002b883a 	mov	r21,zero
 800510c:	156bc83a 	sub	r21,r2,r21
 8005110:	057c370e 	bge	zero,r21,80041f0 <___vfprintf_internal_r+0x3f0>
 8005114:	01c20174 	movhi	r7,2053
 8005118:	a9000450 	cmplti	r4,r21,17
 800511c:	d8801b17 	ldw	r2,108(sp)
 8005120:	39fe6e04 	addi	r7,r7,-1608
 8005124:	2001ad1e 	bne	r4,zero,80057dc <___vfprintf_internal_r+0x19dc>
 8005128:	07000404 	movi	fp,16
 800512c:	3823883a 	mov	r17,r7
 8005130:	00000406 	br	8005144 <___vfprintf_internal_r+0x1344>
 8005134:	b5800204 	addi	r22,r22,8
 8005138:	ad7ffc04 	addi	r21,r21,-16
 800513c:	a9000448 	cmpgei	r4,r21,17
 8005140:	2001a526 	beq	r4,zero,80057d8 <___vfprintf_internal_r+0x19d8>
 8005144:	10800044 	addi	r2,r2,1
 8005148:	18c00404 	addi	r3,r3,16
 800514c:	b4400015 	stw	r17,0(r22)
 8005150:	b7000115 	stw	fp,4(r22)
 8005154:	d8c01c15 	stw	r3,112(sp)
 8005158:	d8801b15 	stw	r2,108(sp)
 800515c:	11000208 	cmpgei	r4,r2,8
 8005160:	203ff426 	beq	r4,zero,8005134 <___vfprintf_internal_r+0x1334>
 8005164:	d9801a04 	addi	r6,sp,104
 8005168:	900b883a 	mov	r5,r18
 800516c:	9809883a 	mov	r4,r19
 8005170:	800b2d00 	call	800b2d0 <__sprint_r>
 8005174:	103c2f1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005178:	d8c01c17 	ldw	r3,112(sp)
 800517c:	d8801b17 	ldw	r2,108(sp)
 8005180:	dd802704 	addi	r22,sp,156
 8005184:	003fec06 	br	8005138 <___vfprintf_internal_r+0x1338>
 8005188:	d8800417 	ldw	r2,16(sp)
 800518c:	1080004c 	andi	r2,r2,1
 8005190:	103f111e 	bne	r2,zero,8004dd8 <___vfprintf_internal_r+0xfd8>
 8005194:	00800044 	movi	r2,1
 8005198:	dd401b15 	stw	r21,108(sp)
 800519c:	b4400015 	stw	r17,0(r22)
 80051a0:	b0800115 	stw	r2,4(r22)
 80051a4:	d8c01c15 	stw	r3,112(sp)
 80051a8:	ad400208 	cmpgei	r21,r21,8
 80051ac:	a800941e 	bne	r21,zero,8005400 <___vfprintf_internal_r+0x1600>
 80051b0:	42000084 	addi	r8,r8,2
 80051b4:	b5800404 	addi	r22,r22,16
 80051b8:	003f3306 	br	8004e88 <___vfprintf_internal_r+0x1088>
 80051bc:	4002821e 	bne	r8,zero,8005bc8 <___vfprintf_internal_r+0x1dc8>
 80051c0:	0011883a 	mov	r8,zero
 80051c4:	002b883a 	mov	r21,zero
 80051c8:	dc402704 	addi	r17,sp,156
 80051cc:	003da406 	br	8004860 <___vfprintf_internal_r+0xa60>
 80051d0:	02ff2d0e 	bge	zero,r11,8004e88 <___vfprintf_internal_r+0x1088>
 80051d4:	58800450 	cmplti	r2,r11,17
 80051d8:	01c20174 	movhi	r7,2053
 80051dc:	1003261e 	bne	r2,zero,8005e78 <___vfprintf_internal_r+0x2078>
 80051e0:	39fe6e04 	addi	r7,r7,-1608
 80051e4:	dc000715 	stw	r16,28(sp)
 80051e8:	05800404 	movi	r22,16
 80051ec:	5823883a 	mov	r17,r11
 80051f0:	3821883a 	mov	r16,r7
 80051f4:	402b883a 	mov	r21,r8
 80051f8:	00000506 	br	8005210 <___vfprintf_internal_r+0x1410>
 80051fc:	e7000204 	addi	fp,fp,8
 8005200:	8c7ffc04 	addi	r17,r17,-16
 8005204:	88800448 	cmpgei	r2,r17,17
 8005208:	1001be26 	beq	r2,zero,8005904 <___vfprintf_internal_r+0x1b04>
 800520c:	ad400044 	addi	r21,r21,1
 8005210:	18c00404 	addi	r3,r3,16
 8005214:	e4000015 	stw	r16,0(fp)
 8005218:	e5800115 	stw	r22,4(fp)
 800521c:	d8c01c15 	stw	r3,112(sp)
 8005220:	dd401b15 	stw	r21,108(sp)
 8005224:	a8800208 	cmpgei	r2,r21,8
 8005228:	103ff426 	beq	r2,zero,80051fc <___vfprintf_internal_r+0x13fc>
 800522c:	d9801a04 	addi	r6,sp,104
 8005230:	900b883a 	mov	r5,r18
 8005234:	9809883a 	mov	r4,r19
 8005238:	800b2d00 	call	800b2d0 <__sprint_r>
 800523c:	103bfd1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005240:	dd401b17 	ldw	r21,108(sp)
 8005244:	d8c01c17 	ldw	r3,112(sp)
 8005248:	df002704 	addi	fp,sp,156
 800524c:	003fec06 	br	8005200 <___vfprintf_internal_r+0x1400>
 8005250:	d9801a04 	addi	r6,sp,104
 8005254:	900b883a 	mov	r5,r18
 8005258:	9809883a 	mov	r4,r19
 800525c:	800b2d00 	call	800b2d0 <__sprint_r>
 8005260:	103bf41e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005264:	d8c01c17 	ldw	r3,112(sp)
 8005268:	dd802704 	addi	r22,sp,156
 800526c:	003bd306 	br	80041bc <___vfprintf_internal_r+0x3bc>
 8005270:	d8800417 	ldw	r2,16(sp)
 8005274:	1080004c 	andi	r2,r2,1
 8005278:	103bdd26 	beq	r2,zero,80041f0 <___vfprintf_internal_r+0x3f0>
 800527c:	003df106 	br	8004a44 <___vfprintf_internal_r+0xc44>
 8005280:	dc402704 	addi	r17,sp,156
 8005284:	003d7606 	br	8004860 <___vfprintf_internal_r+0xa60>
 8005288:	d9000517 	ldw	r4,20(sp)
 800528c:	2005d7fa 	srai	r2,r4,31
 8005290:	19000015 	stw	r4,0(r3)
 8005294:	18800115 	stw	r2,4(r3)
 8005298:	003b0d06 	br	8003ed0 <___vfprintf_internal_r+0xd0>
 800529c:	00800c04 	movi	r2,48
 80052a0:	d8801385 	stb	r2,78(sp)
 80052a4:	df0013c5 	stb	fp,79(sp)
 80052a8:	63000094 	ori	r12,r12,2
 80052ac:	00800084 	movi	r2,2
 80052b0:	003c1406 	br	8004304 <___vfprintf_internal_r+0x504>
 80052b4:	25000017 	ldw	r20,0(r4)
 80052b8:	002b883a 	mov	r21,zero
 80052bc:	d8c00615 	stw	r3,24(sp)
 80052c0:	003ceb06 	br	8004670 <___vfprintf_internal_r+0x870>
 80052c4:	25000017 	ldw	r20,0(r4)
 80052c8:	002b883a 	mov	r21,zero
 80052cc:	d8c00615 	stw	r3,24(sp)
 80052d0:	0005883a 	mov	r2,zero
 80052d4:	003c0b06 	br	8004304 <___vfprintf_internal_r+0x504>
 80052d8:	25000017 	ldw	r20,0(r4)
 80052dc:	002b883a 	mov	r21,zero
 80052e0:	d8c00615 	stw	r3,24(sp)
 80052e4:	00800044 	movi	r2,1
 80052e8:	003c0606 	br	8004304 <___vfprintf_internal_r+0x504>
 80052ec:	25000017 	ldw	r20,0(r4)
 80052f0:	d8c00615 	stw	r3,24(sp)
 80052f4:	a02bd7fa 	srai	r21,r20,31
 80052f8:	a805883a 	mov	r2,r21
 80052fc:	003cba06 	br	80045e8 <___vfprintf_internal_r+0x7e8>
 8005300:	18800017 	ldw	r2,0(r3)
 8005304:	d8800915 	stw	r2,36(sp)
 8005308:	18800117 	ldw	r2,4(r3)
 800530c:	d8800a15 	stw	r2,40(sp)
 8005310:	003c3206 	br	80043dc <___vfprintf_internal_r+0x5dc>
 8005314:	db401343 	ldbu	r13,77(sp)
 8005318:	a83cbe26 	beq	r21,zero,8004614 <___vfprintf_internal_r+0x814>
 800531c:	dc402704 	addi	r17,sp,156
 8005320:	a805883a 	mov	r2,r21
 8005324:	dc000715 	stw	r16,28(sp)
 8005328:	902b883a 	mov	r21,r18
 800532c:	8821883a 	mov	r16,r17
 8005330:	db000415 	stw	r12,16(sp)
 8005334:	a023883a 	mov	r17,r20
 8005338:	da000e15 	stw	r8,56(sp)
 800533c:	9829883a 	mov	r20,r19
 8005340:	1025883a 	mov	r18,r2
 8005344:	6827883a 	mov	r19,r13
 8005348:	8809883a 	mov	r4,r17
 800534c:	900b883a 	mov	r5,r18
 8005350:	01800284 	movi	r6,10
 8005354:	000f883a 	mov	r7,zero
 8005358:	800dc080 	call	800dc08 <__umoddi3>
 800535c:	10800c04 	addi	r2,r2,48
 8005360:	8809883a 	mov	r4,r17
 8005364:	900b883a 	mov	r5,r18
 8005368:	01800284 	movi	r6,10
 800536c:	000f883a 	mov	r7,zero
 8005370:	80bfffc5 	stb	r2,-1(r16)
 8005374:	800d6780 	call	800d678 <__udivdi3>
 8005378:	900d883a 	mov	r6,r18
 800537c:	880f883a 	mov	r7,r17
 8005380:	843fffc4 	addi	r16,r16,-1
 8005384:	1023883a 	mov	r17,r2
 8005388:	1825883a 	mov	r18,r3
 800538c:	303fee1e 	bne	r6,zero,8005348 <___vfprintf_internal_r+0x1548>
 8005390:	39c002a8 	cmpgeui	r7,r7,10
 8005394:	383fec1e 	bne	r7,zero,8005348 <___vfprintf_internal_r+0x1548>
 8005398:	8023883a 	mov	r17,r16
 800539c:	d8802704 	addi	r2,sp,156
 80053a0:	981b883a 	mov	r13,r19
 80053a4:	a825883a 	mov	r18,r21
 80053a8:	dc000717 	ldw	r16,28(sp)
 80053ac:	da000e17 	ldw	r8,56(sp)
 80053b0:	a027883a 	mov	r19,r20
 80053b4:	146bc83a 	sub	r21,r2,r17
 80053b8:	003d2906 	br	8004860 <___vfprintf_internal_r+0xa60>
 80053bc:	0421c83a 	sub	r16,zero,r16
 80053c0:	d8800615 	stw	r2,24(sp)
 80053c4:	003d4506 	br	80048dc <___vfprintf_internal_r+0xadc>
 80053c8:	202b883a 	mov	r21,r4
 80053cc:	057f1c16 	blt	zero,r21,8005040 <___vfprintf_internal_r+0x1240>
 80053d0:	003f2506 	br	8005068 <___vfprintf_internal_r+0x1268>
 80053d4:	d8800417 	ldw	r2,16(sp)
 80053d8:	1080004c 	andi	r2,r2,1
 80053dc:	103f291e 	bne	r2,zero,8005084 <___vfprintf_internal_r+0x1284>
 80053e0:	d9000817 	ldw	r4,32(sp)
 80053e4:	d9400717 	ldw	r5,28(sp)
 80053e8:	2545c83a 	sub	r2,r4,r21
 80053ec:	2179c83a 	sub	fp,r4,r5
 80053f0:	102b883a 	mov	r21,r2
 80053f4:	e0bf430e 	bge	fp,r2,8005104 <___vfprintf_internal_r+0x1304>
 80053f8:	e02b883a 	mov	r21,fp
 80053fc:	003f4106 	br	8005104 <___vfprintf_internal_r+0x1304>
 8005400:	d9801a04 	addi	r6,sp,104
 8005404:	900b883a 	mov	r5,r18
 8005408:	9809883a 	mov	r4,r19
 800540c:	800b2d00 	call	800b2d0 <__sprint_r>
 8005410:	103b881e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005414:	da001b17 	ldw	r8,108(sp)
 8005418:	d8c01c17 	ldw	r3,112(sp)
 800541c:	dd802904 	addi	r22,sp,164
 8005420:	42000044 	addi	r8,r8,1
 8005424:	df002704 	addi	fp,sp,156
 8005428:	003e9706 	br	8004e88 <___vfprintf_internal_r+0x1088>
 800542c:	bf000043 	ldbu	fp,1(r23)
 8005430:	63000814 	ori	r12,r12,32
 8005434:	bdc00044 	addi	r23,r23,1
 8005438:	e2c03fcc 	andi	r11,fp,255
 800543c:	5ac0201c 	xori	r11,r11,128
 8005440:	5affe004 	addi	r11,r11,-128
 8005444:	003aba06 	br	8003f30 <___vfprintf_internal_r+0x130>
 8005448:	d9801a04 	addi	r6,sp,104
 800544c:	900b883a 	mov	r5,r18
 8005450:	9809883a 	mov	r4,r19
 8005454:	800b2d00 	call	800b2d0 <__sprint_r>
 8005458:	103b761e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 800545c:	d8c01c17 	ldw	r3,112(sp)
 8005460:	dd802704 	addi	r22,sp,156
 8005464:	003d8306 	br	8004a74 <___vfprintf_internal_r+0xc74>
 8005468:	002b883a 	mov	r21,zero
 800546c:	003eff06 	br	800506c <___vfprintf_internal_r+0x126c>
 8005470:	408001f0 	cmpltui	r2,r8,7
 8005474:	402b883a 	mov	r21,r8
 8005478:	1001a426 	beq	r2,zero,8005b0c <___vfprintf_internal_r+0x1d0c>
 800547c:	04420174 	movhi	r17,2053
 8005480:	a829883a 	mov	r20,r21
 8005484:	d8c00615 	stw	r3,24(sp)
 8005488:	8c7e6b04 	addi	r17,r17,-1620
 800548c:	003b1f06 	br	800410c <___vfprintf_internal_r+0x30c>
 8005490:	01c20174 	movhi	r7,2053
 8005494:	a9000450 	cmplti	r4,r21,17
 8005498:	d8801b17 	ldw	r2,108(sp)
 800549c:	39fe6e04 	addi	r7,r7,-1608
 80054a0:	20017f1e 	bne	r4,zero,8005aa0 <___vfprintf_internal_r+0x1ca0>
 80054a4:	dc000e15 	stw	r16,56(sp)
 80054a8:	07000404 	movi	fp,16
 80054ac:	3821883a 	mov	r16,r7
 80054b0:	00000406 	br	80054c4 <___vfprintf_internal_r+0x16c4>
 80054b4:	b5800204 	addi	r22,r22,8
 80054b8:	ad7ffc04 	addi	r21,r21,-16
 80054bc:	a9000448 	cmpgei	r4,r21,17
 80054c0:	20017526 	beq	r4,zero,8005a98 <___vfprintf_internal_r+0x1c98>
 80054c4:	10800044 	addi	r2,r2,1
 80054c8:	18c00404 	addi	r3,r3,16
 80054cc:	b4000015 	stw	r16,0(r22)
 80054d0:	b7000115 	stw	fp,4(r22)
 80054d4:	d8c01c15 	stw	r3,112(sp)
 80054d8:	d8801b15 	stw	r2,108(sp)
 80054dc:	11000208 	cmpgei	r4,r2,8
 80054e0:	203ff426 	beq	r4,zero,80054b4 <___vfprintf_internal_r+0x16b4>
 80054e4:	d9801a04 	addi	r6,sp,104
 80054e8:	900b883a 	mov	r5,r18
 80054ec:	9809883a 	mov	r4,r19
 80054f0:	800b2d00 	call	800b2d0 <__sprint_r>
 80054f4:	103b4f1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 80054f8:	d8c01c17 	ldw	r3,112(sp)
 80054fc:	d8801b17 	ldw	r2,108(sp)
 8005500:	dd802704 	addi	r22,sp,156
 8005504:	003fec06 	br	80054b8 <___vfprintf_internal_r+0x16b8>
 8005508:	d8800517 	ldw	r2,20(sp)
 800550c:	18800015 	stw	r2,0(r3)
 8005510:	003a6f06 	br	8003ed0 <___vfprintf_internal_r+0xd0>
 8005514:	d9801a04 	addi	r6,sp,104
 8005518:	900b883a 	mov	r5,r18
 800551c:	9809883a 	mov	r4,r19
 8005520:	800b2d00 	call	800b2d0 <__sprint_r>
 8005524:	103b431e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005528:	d8c01c17 	ldw	r3,112(sp)
 800552c:	dd401b17 	ldw	r21,108(sp)
 8005530:	df002704 	addi	fp,sp,156
 8005534:	003e3a06 	br	8004e20 <___vfprintf_internal_r+0x1020>
 8005538:	d9801a04 	addi	r6,sp,104
 800553c:	900b883a 	mov	r5,r18
 8005540:	9809883a 	mov	r4,r19
 8005544:	800b2d00 	call	800b2d0 <__sprint_r>
 8005548:	103b3a1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 800554c:	d8c01c17 	ldw	r3,112(sp)
 8005550:	dd401b17 	ldw	r21,108(sp)
 8005554:	df002704 	addi	fp,sp,156
 8005558:	003e2606 	br	8004df4 <___vfprintf_internal_r+0xff4>
 800555c:	d8801b17 	ldw	r2,108(sp)
 8005560:	01020174 	movhi	r4,2053
 8005564:	213e6d04 	addi	r4,r4,-1612
 8005568:	10800044 	addi	r2,r2,1
 800556c:	18c00044 	addi	r3,r3,1
 8005570:	b1000015 	stw	r4,0(r22)
 8005574:	01000044 	movi	r4,1
 8005578:	d8801b15 	stw	r2,108(sp)
 800557c:	b1000115 	stw	r4,4(r22)
 8005580:	d8c01c15 	stw	r3,112(sp)
 8005584:	10800208 	cmpgei	r2,r2,8
 8005588:	103de11e 	bne	r2,zero,8004d10 <___vfprintf_internal_r+0xf10>
 800558c:	b5800204 	addi	r22,r22,8
 8005590:	003de706 	br	8004d30 <___vfprintf_internal_r+0xf30>
 8005594:	d9801a04 	addi	r6,sp,104
 8005598:	900b883a 	mov	r5,r18
 800559c:	9809883a 	mov	r4,r19
 80055a0:	da001115 	stw	r8,68(sp)
 80055a4:	db400f15 	stw	r13,60(sp)
 80055a8:	db800e15 	stw	r14,56(sp)
 80055ac:	800b2d00 	call	800b2d0 <__sprint_r>
 80055b0:	103b201e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 80055b4:	d8c01c17 	ldw	r3,112(sp)
 80055b8:	da001117 	ldw	r8,68(sp)
 80055bc:	db400f17 	ldw	r13,60(sp)
 80055c0:	db800e17 	ldw	r14,56(sp)
 80055c4:	dd802704 	addi	r22,sp,156
 80055c8:	003add06 	br	8004140 <___vfprintf_internal_r+0x340>
 80055cc:	8825883a 	mov	r18,r17
 80055d0:	003b1806 	br	8004234 <___vfprintf_internal_r+0x434>
 80055d4:	d9000917 	ldw	r4,36(sp)
 80055d8:	d9400a17 	ldw	r5,40(sp)
 80055dc:	da000615 	stw	r8,24(sp)
 80055e0:	200d883a 	mov	r6,r4
 80055e4:	280f883a 	mov	r7,r5
 80055e8:	db000415 	stw	r12,16(sp)
 80055ec:	80106cc0 	call	80106cc <__unorddf2>
 80055f0:	db000417 	ldw	r12,16(sp)
 80055f4:	da000617 	ldw	r8,24(sp)
 80055f8:	1002091e 	bne	r2,zero,8005e20 <___vfprintf_internal_r+0x2020>
 80055fc:	057ff7c4 	movi	r21,-33
 8005600:	40bfffe0 	cmpeqi	r2,r8,-1
 8005604:	e56a703a 	and	r21,fp,r21
 8005608:	1001ab1e 	bne	r2,zero,8005cb8 <___vfprintf_internal_r+0x1eb8>
 800560c:	a88011d8 	cmpnei	r2,r21,71
 8005610:	10015726 	beq	r2,zero,8005b70 <___vfprintf_internal_r+0x1d70>
 8005614:	60804014 	ori	r2,r12,256
 8005618:	d8800415 	stw	r2,16(sp)
 800561c:	d8800a17 	ldw	r2,40(sp)
 8005620:	10012d16 	blt	r2,zero,8005ad8 <___vfprintf_internal_r+0x1cd8>
 8005624:	dd000a17 	ldw	r20,40(sp)
 8005628:	d8000605 	stb	zero,24(sp)
 800562c:	e08019a0 	cmpeqi	r2,fp,102
 8005630:	d8800f15 	stw	r2,60(sp)
 8005634:	1000c31e 	bne	r2,zero,8005944 <___vfprintf_internal_r+0x1b44>
 8005638:	e08011a0 	cmpeqi	r2,fp,70
 800563c:	1000c11e 	bne	r2,zero,8005944 <___vfprintf_internal_r+0x1b44>
 8005640:	a8801158 	cmpnei	r2,r21,69
 8005644:	10016226 	beq	r2,zero,8005bd0 <___vfprintf_internal_r+0x1dd0>
 8005648:	d8801804 	addi	r2,sp,96
 800564c:	d8800315 	stw	r2,12(sp)
 8005650:	d9400917 	ldw	r5,36(sp)
 8005654:	d8801504 	addi	r2,sp,84
 8005658:	d8800215 	stw	r2,8(sp)
 800565c:	d8801404 	addi	r2,sp,80
 8005660:	da000015 	stw	r8,0(sp)
 8005664:	9809883a 	mov	r4,r19
 8005668:	d8800115 	stw	r2,4(sp)
 800566c:	01c00084 	movi	r7,2
 8005670:	a00d883a 	mov	r6,r20
 8005674:	db000815 	stw	r12,32(sp)
 8005678:	da000715 	stw	r8,28(sp)
 800567c:	80063740 	call	8006374 <_dtoa_r>
 8005680:	da000717 	ldw	r8,28(sp)
 8005684:	e10019d8 	cmpnei	r4,fp,103
 8005688:	db000817 	ldw	r12,32(sp)
 800568c:	1023883a 	mov	r17,r2
 8005690:	4007883a 	mov	r3,r8
 8005694:	2001621e 	bne	r4,zero,8005c20 <___vfprintf_internal_r+0x1e20>
 8005698:	6080004c 	andi	r2,r12,1
 800569c:	1001621e 	bne	r2,zero,8005c28 <___vfprintf_internal_r+0x1e28>
 80056a0:	d8801417 	ldw	r2,80(sp)
 80056a4:	ad4011e0 	cmpeqi	r21,r21,71
 80056a8:	d8800715 	stw	r2,28(sp)
 80056ac:	d8801817 	ldw	r2,96(sp)
 80056b0:	1445c83a 	sub	r2,r2,r17
 80056b4:	d8800815 	stw	r2,32(sp)
 80056b8:	a8000526 	beq	r21,zero,80056d0 <___vfprintf_internal_r+0x18d0>
 80056bc:	d8c00717 	ldw	r3,28(sp)
 80056c0:	18bfff50 	cmplti	r2,r3,-3
 80056c4:	1000011e 	bne	r2,zero,80056cc <___vfprintf_internal_r+0x18cc>
 80056c8:	40c1670e 	bge	r8,r3,8005c68 <___vfprintf_internal_r+0x1e68>
 80056cc:	e73fff84 	addi	fp,fp,-2
 80056d0:	d8800717 	ldw	r2,28(sp)
 80056d4:	df001645 	stb	fp,89(sp)
 80056d8:	157fffc4 	addi	r21,r2,-1
 80056dc:	dd401415 	stw	r21,80(sp)
 80056e0:	a801c316 	blt	r21,zero,8005df0 <___vfprintf_internal_r+0x1ff0>
 80056e4:	00800ac4 	movi	r2,43
 80056e8:	d8801685 	stb	r2,90(sp)
 80056ec:	a8800290 	cmplti	r2,r21,10
 80056f0:	1001b81e 	bne	r2,zero,8005dd4 <___vfprintf_internal_r+0x1fd4>
 80056f4:	d98019c4 	addi	r6,sp,103
 80056f8:	9029883a 	mov	r20,r18
 80056fc:	dc400715 	stw	r17,28(sp)
 8005700:	8025883a 	mov	r18,r16
 8005704:	db000f15 	stw	r12,60(sp)
 8005708:	3021883a 	mov	r16,r6
 800570c:	a809883a 	mov	r4,r21
 8005710:	01400284 	movi	r5,10
 8005714:	800e1bc0 	call	800e1bc <__modsi3>
 8005718:	10800c04 	addi	r2,r2,48
 800571c:	a809883a 	mov	r4,r21
 8005720:	80bfffc5 	stb	r2,-1(r16)
 8005724:	01400284 	movi	r5,10
 8005728:	800e13c0 	call	800e13c <__divsi3>
 800572c:	a9001908 	cmpgei	r4,r21,100
 8005730:	8023883a 	mov	r17,r16
 8005734:	102b883a 	mov	r21,r2
 8005738:	843fffc4 	addi	r16,r16,-1
 800573c:	203ff31e 	bne	r4,zero,800570c <___vfprintf_internal_r+0x190c>
 8005740:	800d883a 	mov	r6,r16
 8005744:	11000c04 	addi	r4,r2,48
 8005748:	9021883a 	mov	r16,r18
 800574c:	a025883a 	mov	r18,r20
 8005750:	8829883a 	mov	r20,r17
 8005754:	a0bfff84 	addi	r2,r20,-2
 8005758:	313fffc5 	stb	r4,-1(r6)
 800575c:	d8c019c4 	addi	r3,sp,103
 8005760:	db000f17 	ldw	r12,60(sp)
 8005764:	dc400717 	ldw	r17,28(sp)
 8005768:	10c1cd2e 	bgeu	r2,r3,8005ea0 <___vfprintf_internal_r+0x20a0>
 800576c:	d8c016c4 	addi	r3,sp,91
 8005770:	00000106 	br	8005778 <___vfprintf_internal_r+0x1978>
 8005774:	11000003 	ldbu	r4,0(r2)
 8005778:	19000005 	stb	r4,0(r3)
 800577c:	10800044 	addi	r2,r2,1
 8005780:	d90019c4 	addi	r4,sp,103
 8005784:	18c00044 	addi	r3,r3,1
 8005788:	113ffa1e 	bne	r2,r4,8005774 <___vfprintf_internal_r+0x1974>
 800578c:	d8801a44 	addi	r2,sp,105
 8005790:	d8c016c4 	addi	r3,sp,91
 8005794:	1505c83a 	sub	r2,r2,r20
 8005798:	1885883a 	add	r2,r3,r2
 800579c:	d8c01644 	addi	r3,sp,89
 80057a0:	10c5c83a 	sub	r2,r2,r3
 80057a4:	d8801015 	stw	r2,64(sp)
 80057a8:	d8c00817 	ldw	r3,32(sp)
 80057ac:	d9001017 	ldw	r4,64(sp)
 80057b0:	18800088 	cmpgei	r2,r3,2
 80057b4:	20eb883a 	add	r21,r4,r3
 80057b8:	10019226 	beq	r2,zero,8005e04 <___vfprintf_internal_r+0x2004>
 80057bc:	d8800b17 	ldw	r2,44(sp)
 80057c0:	a8ab883a 	add	r21,r21,r2
 80057c4:	a829883a 	mov	r20,r21
 80057c8:	a800010e 	bge	r21,zero,80057d0 <___vfprintf_internal_r+0x19d0>
 80057cc:	0029883a 	mov	r20,zero
 80057d0:	d8000715 	stw	zero,28(sp)
 80057d4:	00008e06 	br	8005a10 <___vfprintf_internal_r+0x1c10>
 80057d8:	880f883a 	mov	r7,r17
 80057dc:	10800044 	addi	r2,r2,1
 80057e0:	1d47883a 	add	r3,r3,r21
 80057e4:	b1c00015 	stw	r7,0(r22)
 80057e8:	003a7b06 	br	80041d8 <___vfprintf_internal_r+0x3d8>
 80057ec:	d9801a04 	addi	r6,sp,104
 80057f0:	900b883a 	mov	r5,r18
 80057f4:	9809883a 	mov	r4,r19
 80057f8:	800b2d00 	call	800b2d0 <__sprint_r>
 80057fc:	103a8d1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005800:	d8c01c17 	ldw	r3,112(sp)
 8005804:	dd802704 	addi	r22,sp,156
 8005808:	003c8b06 	br	8004a38 <___vfprintf_internal_r+0xc38>
 800580c:	d9801a04 	addi	r6,sp,104
 8005810:	900b883a 	mov	r5,r18
 8005814:	9809883a 	mov	r4,r19
 8005818:	da000e15 	stw	r8,56(sp)
 800581c:	800b2d00 	call	800b2d0 <__sprint_r>
 8005820:	103a841e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005824:	d8c01c17 	ldw	r3,112(sp)
 8005828:	da000e17 	ldw	r8,56(sp)
 800582c:	dd802704 	addi	r22,sp,156
 8005830:	003a6006 	br	80041b4 <___vfprintf_internal_r+0x3b4>
 8005834:	8809883a 	mov	r4,r17
 8005838:	db000415 	stw	r12,16(sp)
 800583c:	d8c00615 	stw	r3,24(sp)
 8005840:	8003a1c0 	call	8003a1c <strlen>
 8005844:	db000417 	ldw	r12,16(sp)
 8005848:	102b883a 	mov	r21,r2
 800584c:	1029883a 	mov	r20,r2
 8005850:	003a2e06 	br	800410c <___vfprintf_internal_r+0x30c>
 8005854:	d8800d17 	ldw	r2,52(sp)
 8005858:	d9000b17 	ldw	r4,44(sp)
 800585c:	b0800015 	stw	r2,0(r22)
 8005860:	d8801b17 	ldw	r2,108(sp)
 8005864:	20c7883a 	add	r3,r4,r3
 8005868:	b1000115 	stw	r4,4(r22)
 800586c:	10800044 	addi	r2,r2,1
 8005870:	d8c01c15 	stw	r3,112(sp)
 8005874:	d8801b15 	stw	r2,108(sp)
 8005878:	11000208 	cmpgei	r4,r2,8
 800587c:	2000bf1e 	bne	r4,zero,8005b7c <___vfprintf_internal_r+0x1d7c>
 8005880:	b5800204 	addi	r22,r22,8
 8005884:	283d3c0e 	bge	r5,zero,8004d78 <___vfprintf_internal_r+0xf78>
 8005888:	01c20174 	movhi	r7,2053
 800588c:	293ffc08 	cmpgei	r4,r5,-16
 8005890:	39fe6e04 	addi	r7,r7,-1608
 8005894:	0179c83a 	sub	fp,zero,r5
 8005898:	2001361e 	bne	r4,zero,8005d74 <___vfprintf_internal_r+0x1f74>
 800589c:	dc000715 	stw	r16,28(sp)
 80058a0:	05400404 	movi	r21,16
 80058a4:	9021883a 	mov	r16,r18
 80058a8:	3825883a 	mov	r18,r7
 80058ac:	00000406 	br	80058c0 <___vfprintf_internal_r+0x1ac0>
 80058b0:	b5800204 	addi	r22,r22,8
 80058b4:	e73ffc04 	addi	fp,fp,-16
 80058b8:	e1800448 	cmpgei	r6,fp,17
 80058bc:	30012a26 	beq	r6,zero,8005d68 <___vfprintf_internal_r+0x1f68>
 80058c0:	10800044 	addi	r2,r2,1
 80058c4:	18c00404 	addi	r3,r3,16
 80058c8:	b4800015 	stw	r18,0(r22)
 80058cc:	b5400115 	stw	r21,4(r22)
 80058d0:	d8c01c15 	stw	r3,112(sp)
 80058d4:	d8801b15 	stw	r2,108(sp)
 80058d8:	11800208 	cmpgei	r6,r2,8
 80058dc:	303ff426 	beq	r6,zero,80058b0 <___vfprintf_internal_r+0x1ab0>
 80058e0:	d9801a04 	addi	r6,sp,104
 80058e4:	800b883a 	mov	r5,r16
 80058e8:	9809883a 	mov	r4,r19
 80058ec:	800b2d00 	call	800b2d0 <__sprint_r>
 80058f0:	10015f1e 	bne	r2,zero,8005e70 <___vfprintf_internal_r+0x2070>
 80058f4:	d8c01c17 	ldw	r3,112(sp)
 80058f8:	d8801b17 	ldw	r2,108(sp)
 80058fc:	dd802704 	addi	r22,sp,156
 8005900:	003fec06 	br	80058b4 <___vfprintf_internal_r+0x1ab4>
 8005904:	800f883a 	mov	r7,r16
 8005908:	dc000717 	ldw	r16,28(sp)
 800590c:	8817883a 	mov	r11,r17
 8005910:	aa000044 	addi	r8,r21,1
 8005914:	e0800204 	addi	r2,fp,8
 8005918:	1ac7883a 	add	r3,r3,r11
 800591c:	e1c00015 	stw	r7,0(fp)
 8005920:	e2c00115 	stw	r11,4(fp)
 8005924:	d8c01c15 	stw	r3,112(sp)
 8005928:	da001b15 	stw	r8,108(sp)
 800592c:	41000208 	cmpgei	r4,r8,8
 8005930:	203eb31e 	bne	r4,zero,8005400 <___vfprintf_internal_r+0x1600>
 8005934:	42000044 	addi	r8,r8,1
 8005938:	15800204 	addi	r22,r2,8
 800593c:	1039883a 	mov	fp,r2
 8005940:	003d5106 	br	8004e88 <___vfprintf_internal_r+0x1088>
 8005944:	d8801804 	addi	r2,sp,96
 8005948:	d8800315 	stw	r2,12(sp)
 800594c:	d9400917 	ldw	r5,36(sp)
 8005950:	d8801504 	addi	r2,sp,84
 8005954:	d8800215 	stw	r2,8(sp)
 8005958:	d8801404 	addi	r2,sp,80
 800595c:	da000015 	stw	r8,0(sp)
 8005960:	d8800115 	stw	r2,4(sp)
 8005964:	01c000c4 	movi	r7,3
 8005968:	a00d883a 	mov	r6,r20
 800596c:	9809883a 	mov	r4,r19
 8005970:	db000815 	stw	r12,32(sp)
 8005974:	da000715 	stw	r8,28(sp)
 8005978:	80063740 	call	8006374 <_dtoa_r>
 800597c:	da000717 	ldw	r8,28(sp)
 8005980:	1023883a 	mov	r17,r2
 8005984:	db000817 	ldw	r12,32(sp)
 8005988:	1207883a 	add	r3,r2,r8
 800598c:	88800007 	ldb	r2,0(r17)
 8005990:	10800c20 	cmpeqi	r2,r2,48
 8005994:	1000661e 	bne	r2,zero,8005b30 <___vfprintf_internal_r+0x1d30>
 8005998:	d8801417 	ldw	r2,80(sp)
 800599c:	1893883a 	add	r9,r3,r2
 80059a0:	d9000917 	ldw	r4,36(sp)
 80059a4:	000d883a 	mov	r6,zero
 80059a8:	000f883a 	mov	r7,zero
 80059ac:	a00b883a 	mov	r5,r20
 80059b0:	da401115 	stw	r9,68(sp)
 80059b4:	da000815 	stw	r8,32(sp)
 80059b8:	db000715 	stw	r12,28(sp)
 80059bc:	800f4c80 	call	800f4c8 <__eqdf2>
 80059c0:	db000717 	ldw	r12,28(sp)
 80059c4:	da000817 	ldw	r8,32(sp)
 80059c8:	da401117 	ldw	r9,68(sp)
 80059cc:	1000981e 	bne	r2,zero,8005c30 <___vfprintf_internal_r+0x1e30>
 80059d0:	4805883a 	mov	r2,r9
 80059d4:	d8c01417 	ldw	r3,80(sp)
 80059d8:	1445c83a 	sub	r2,r2,r17
 80059dc:	ad4011d8 	cmpnei	r21,r21,71
 80059e0:	d8c00715 	stw	r3,28(sp)
 80059e4:	d8800815 	stw	r2,32(sp)
 80059e8:	a83f3426 	beq	r21,zero,80056bc <___vfprintf_internal_r+0x18bc>
 80059ec:	d8800f17 	ldw	r2,60(sp)
 80059f0:	103f3726 	beq	r2,zero,80056d0 <___vfprintf_internal_r+0x18d0>
 80059f4:	d8c00717 	ldw	r3,28(sp)
 80059f8:	6080004c 	andi	r2,r12,1
 80059fc:	1204b03a 	or	r2,r2,r8
 8005a00:	00c1130e 	bge	zero,r3,8005e50 <___vfprintf_internal_r+0x2050>
 8005a04:	10010e1e 	bne	r2,zero,8005e40 <___vfprintf_internal_r+0x2040>
 8005a08:	dd400717 	ldw	r21,28(sp)
 8005a0c:	a829883a 	mov	r20,r21
 8005a10:	d8800607 	ldb	r2,24(sp)
 8005a14:	10008f26 	beq	r2,zero,8005c54 <___vfprintf_internal_r+0x1e54>
 8005a18:	00800b44 	movi	r2,45
 8005a1c:	d8801345 	stb	r2,77(sp)
 8005a20:	d8800e17 	ldw	r2,56(sp)
 8005a24:	0011883a 	mov	r8,zero
 8005a28:	d8800615 	stw	r2,24(sp)
 8005a2c:	003b9406 	br	8004880 <___vfprintf_internal_r+0xa80>
 8005a30:	04420174 	movhi	r17,2053
 8005a34:	8c7e5d04 	addi	r17,r17,-1676
 8005a38:	003a8d06 	br	8004470 <___vfprintf_internal_r+0x670>
 8005a3c:	d8800617 	ldw	r2,24(sp)
 8005a40:	d8c00615 	stw	r3,24(sp)
 8005a44:	15000017 	ldw	r20,0(r2)
 8005a48:	a02bd7fa 	srai	r21,r20,31
 8005a4c:	a805883a 	mov	r2,r21
 8005a50:	003ae506 	br	80045e8 <___vfprintf_internal_r+0x7e8>
 8005a54:	d8800617 	ldw	r2,24(sp)
 8005a58:	002b883a 	mov	r21,zero
 8005a5c:	d8c00615 	stw	r3,24(sp)
 8005a60:	15000017 	ldw	r20,0(r2)
 8005a64:	0005883a 	mov	r2,zero
 8005a68:	003a2606 	br	8004304 <___vfprintf_internal_r+0x504>
 8005a6c:	d8800617 	ldw	r2,24(sp)
 8005a70:	002b883a 	mov	r21,zero
 8005a74:	d8c00615 	stw	r3,24(sp)
 8005a78:	15000017 	ldw	r20,0(r2)
 8005a7c:	00800044 	movi	r2,1
 8005a80:	003a2006 	br	8004304 <___vfprintf_internal_r+0x504>
 8005a84:	d8800617 	ldw	r2,24(sp)
 8005a88:	002b883a 	mov	r21,zero
 8005a8c:	d8c00615 	stw	r3,24(sp)
 8005a90:	15000017 	ldw	r20,0(r2)
 8005a94:	003af606 	br	8004670 <___vfprintf_internal_r+0x870>
 8005a98:	800f883a 	mov	r7,r16
 8005a9c:	dc000e17 	ldw	r16,56(sp)
 8005aa0:	10800044 	addi	r2,r2,1
 8005aa4:	1d47883a 	add	r3,r3,r21
 8005aa8:	d8801b15 	stw	r2,108(sp)
 8005aac:	b1c00015 	stw	r7,0(r22)
 8005ab0:	b5400115 	stw	r21,4(r22)
 8005ab4:	d8c01c15 	stw	r3,112(sp)
 8005ab8:	10800208 	cmpgei	r2,r2,8
 8005abc:	10003a1e 	bne	r2,zero,8005ba8 <___vfprintf_internal_r+0x1da8>
 8005ac0:	b5800204 	addi	r22,r22,8
 8005ac4:	003d6c06 	br	8005078 <___vfprintf_internal_r+0x1278>
 8005ac8:	00800b44 	movi	r2,45
 8005acc:	d8801345 	stb	r2,77(sp)
 8005ad0:	03400b44 	movi	r13,45
 8005ad4:	003a6206 	br	8004460 <___vfprintf_internal_r+0x660>
 8005ad8:	1520003c 	xorhi	r20,r2,32768
 8005adc:	00800b44 	movi	r2,45
 8005ae0:	d8800605 	stb	r2,24(sp)
 8005ae4:	003ed106 	br	800562c <___vfprintf_internal_r+0x182c>
 8005ae8:	d9801a04 	addi	r6,sp,104
 8005aec:	900b883a 	mov	r5,r18
 8005af0:	9809883a 	mov	r4,r19
 8005af4:	800b2d00 	call	800b2d0 <__sprint_r>
 8005af8:	1039ce1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005afc:	dd401417 	ldw	r21,80(sp)
 8005b00:	d8c01c17 	ldw	r3,112(sp)
 8005b04:	dd802704 	addi	r22,sp,156
 8005b08:	003d6a06 	br	80050b4 <___vfprintf_internal_r+0x12b4>
 8005b0c:	05400184 	movi	r21,6
 8005b10:	003e5a06 	br	800547c <___vfprintf_internal_r+0x167c>
 8005b14:	d9801a04 	addi	r6,sp,104
 8005b18:	900b883a 	mov	r5,r18
 8005b1c:	9809883a 	mov	r4,r19
 8005b20:	800b2d00 	call	800b2d0 <__sprint_r>
 8005b24:	0039c306 	br	8004234 <___vfprintf_internal_r+0x434>
 8005b28:	d9401345 	stb	r5,77(sp)
 8005b2c:	00397106 	br	80040f4 <___vfprintf_internal_r+0x2f4>
 8005b30:	d9000917 	ldw	r4,36(sp)
 8005b34:	000d883a 	mov	r6,zero
 8005b38:	000f883a 	mov	r7,zero
 8005b3c:	a00b883a 	mov	r5,r20
 8005b40:	d8c01115 	stw	r3,68(sp)
 8005b44:	da000815 	stw	r8,32(sp)
 8005b48:	db000715 	stw	r12,28(sp)
 8005b4c:	800f4c80 	call	800f4c8 <__eqdf2>
 8005b50:	db000717 	ldw	r12,28(sp)
 8005b54:	da000817 	ldw	r8,32(sp)
 8005b58:	d8c01117 	ldw	r3,68(sp)
 8005b5c:	103f8e26 	beq	r2,zero,8005998 <___vfprintf_internal_r+0x1b98>
 8005b60:	00800044 	movi	r2,1
 8005b64:	1205c83a 	sub	r2,r2,r8
 8005b68:	d8801415 	stw	r2,80(sp)
 8005b6c:	003f8b06 	br	800599c <___vfprintf_internal_r+0x1b9c>
 8005b70:	403ea81e 	bne	r8,zero,8005614 <___vfprintf_internal_r+0x1814>
 8005b74:	02000044 	movi	r8,1
 8005b78:	003ea606 	br	8005614 <___vfprintf_internal_r+0x1814>
 8005b7c:	d9801a04 	addi	r6,sp,104
 8005b80:	900b883a 	mov	r5,r18
 8005b84:	9809883a 	mov	r4,r19
 8005b88:	800b2d00 	call	800b2d0 <__sprint_r>
 8005b8c:	1039a91e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005b90:	d9401417 	ldw	r5,80(sp)
 8005b94:	d8c01c17 	ldw	r3,112(sp)
 8005b98:	d8801b17 	ldw	r2,108(sp)
 8005b9c:	dd802704 	addi	r22,sp,156
 8005ba0:	283c750e 	bge	r5,zero,8004d78 <___vfprintf_internal_r+0xf78>
 8005ba4:	003f3806 	br	8005888 <___vfprintf_internal_r+0x1a88>
 8005ba8:	d9801a04 	addi	r6,sp,104
 8005bac:	900b883a 	mov	r5,r18
 8005bb0:	9809883a 	mov	r4,r19
 8005bb4:	800b2d00 	call	800b2d0 <__sprint_r>
 8005bb8:	10399e1e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005bbc:	d8c01c17 	ldw	r3,112(sp)
 8005bc0:	dd802704 	addi	r22,sp,156
 8005bc4:	003d2c06 	br	8005078 <___vfprintf_internal_r+0x1278>
 8005bc8:	db000417 	ldw	r12,16(sp)
 8005bcc:	003a9306 	br	800461c <___vfprintf_internal_r+0x81c>
 8005bd0:	d8801804 	addi	r2,sp,96
 8005bd4:	d8800315 	stw	r2,12(sp)
 8005bd8:	d9400917 	ldw	r5,36(sp)
 8005bdc:	d8801504 	addi	r2,sp,84
 8005be0:	40c00044 	addi	r3,r8,1
 8005be4:	d8800215 	stw	r2,8(sp)
 8005be8:	d8801404 	addi	r2,sp,80
 8005bec:	d8c00015 	stw	r3,0(sp)
 8005bf0:	d8800115 	stw	r2,4(sp)
 8005bf4:	01c00084 	movi	r7,2
 8005bf8:	a00d883a 	mov	r6,r20
 8005bfc:	9809883a 	mov	r4,r19
 8005c00:	db001115 	stw	r12,68(sp)
 8005c04:	da000815 	stw	r8,32(sp)
 8005c08:	d8c00715 	stw	r3,28(sp)
 8005c0c:	80063740 	call	8006374 <_dtoa_r>
 8005c10:	d8c00717 	ldw	r3,28(sp)
 8005c14:	da000817 	ldw	r8,32(sp)
 8005c18:	db001117 	ldw	r12,68(sp)
 8005c1c:	1023883a 	mov	r17,r2
 8005c20:	e08011d8 	cmpnei	r2,fp,71
 8005c24:	103e9c26 	beq	r2,zero,8005698 <___vfprintf_internal_r+0x1898>
 8005c28:	88d3883a 	add	r9,r17,r3
 8005c2c:	003f5c06 	br	80059a0 <___vfprintf_internal_r+0x1ba0>
 8005c30:	d8801817 	ldw	r2,96(sp)
 8005c34:	127f672e 	bgeu	r2,r9,80059d4 <___vfprintf_internal_r+0x1bd4>
 8005c38:	01000c04 	movi	r4,48
 8005c3c:	10c00044 	addi	r3,r2,1
 8005c40:	d8c01815 	stw	r3,96(sp)
 8005c44:	11000005 	stb	r4,0(r2)
 8005c48:	d8801817 	ldw	r2,96(sp)
 8005c4c:	127ffb36 	bltu	r2,r9,8005c3c <___vfprintf_internal_r+0x1e3c>
 8005c50:	003f6006 	br	80059d4 <___vfprintf_internal_r+0x1bd4>
 8005c54:	d8800e17 	ldw	r2,56(sp)
 8005c58:	db401343 	ldbu	r13,77(sp)
 8005c5c:	0011883a 	mov	r8,zero
 8005c60:	d8800615 	stw	r2,24(sp)
 8005c64:	003b0206 	br	8004870 <___vfprintf_internal_r+0xa70>
 8005c68:	d8800717 	ldw	r2,28(sp)
 8005c6c:	d8c00817 	ldw	r3,32(sp)
 8005c70:	10c02216 	blt	r2,r3,8005cfc <___vfprintf_internal_r+0x1efc>
 8005c74:	6300004c 	andi	r12,r12,1
 8005c78:	60004f1e 	bne	r12,zero,8005db8 <___vfprintf_internal_r+0x1fb8>
 8005c7c:	1029883a 	mov	r20,r2
 8005c80:	1000010e 	bge	r2,zero,8005c88 <___vfprintf_internal_r+0x1e88>
 8005c84:	0029883a 	mov	r20,zero
 8005c88:	dd400717 	ldw	r21,28(sp)
 8005c8c:	070019c4 	movi	fp,103
 8005c90:	003f5f06 	br	8005a10 <___vfprintf_internal_r+0x1c10>
 8005c94:	d9801a04 	addi	r6,sp,104
 8005c98:	900b883a 	mov	r5,r18
 8005c9c:	9809883a 	mov	r4,r19
 8005ca0:	800b2d00 	call	800b2d0 <__sprint_r>
 8005ca4:	1039631e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005ca8:	d8c01c17 	ldw	r3,112(sp)
 8005cac:	dd802704 	addi	r22,sp,156
 8005cb0:	a83cee0e 	bge	r21,zero,800506c <___vfprintf_internal_r+0x126c>
 8005cb4:	003dec06 	br	8005468 <___vfprintf_internal_r+0x1668>
 8005cb8:	02000184 	movi	r8,6
 8005cbc:	003e5506 	br	8005614 <___vfprintf_internal_r+0x1814>
 8005cc0:	d9801a04 	addi	r6,sp,104
 8005cc4:	900b883a 	mov	r5,r18
 8005cc8:	9809883a 	mov	r4,r19
 8005ccc:	800b2d00 	call	800b2d0 <__sprint_r>
 8005cd0:	1039581e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005cd4:	d8801417 	ldw	r2,80(sp)
 8005cd8:	d9000817 	ldw	r4,32(sp)
 8005cdc:	d8c01c17 	ldw	r3,112(sp)
 8005ce0:	dd802704 	addi	r22,sp,156
 8005ce4:	2085c83a 	sub	r2,r4,r2
 8005ce8:	003d0606 	br	8005104 <___vfprintf_internal_r+0x1304>
 8005cec:	4029883a 	mov	r20,r8
 8005cf0:	d8c00615 	stw	r3,24(sp)
 8005cf4:	402b883a 	mov	r21,r8
 8005cf8:	00390406 	br	800410c <___vfprintf_internal_r+0x30c>
 8005cfc:	d8800817 	ldw	r2,32(sp)
 8005d00:	d8c00b17 	ldw	r3,44(sp)
 8005d04:	10eb883a 	add	r21,r2,r3
 8005d08:	d8800717 	ldw	r2,28(sp)
 8005d0c:	00800316 	blt	zero,r2,8005d1c <___vfprintf_internal_r+0x1f1c>
 8005d10:	d8800717 	ldw	r2,28(sp)
 8005d14:	a8abc83a 	sub	r21,r21,r2
 8005d18:	ad400044 	addi	r21,r21,1
 8005d1c:	a829883a 	mov	r20,r21
 8005d20:	a8002a16 	blt	r21,zero,8005dcc <___vfprintf_internal_r+0x1fcc>
 8005d24:	070019c4 	movi	fp,103
 8005d28:	003f3906 	br	8005a10 <___vfprintf_internal_r+0x1c10>
 8005d2c:	d9401345 	stb	r5,77(sp)
 8005d30:	003a2506 	br	80045c8 <___vfprintf_internal_r+0x7c8>
 8005d34:	d9401345 	stb	r5,77(sp)
 8005d38:	003b1806 	br	800499c <___vfprintf_internal_r+0xb9c>
 8005d3c:	d9401345 	stb	r5,77(sp)
 8005d40:	003a9006 	br	8004784 <___vfprintf_internal_r+0x984>
 8005d44:	d9401345 	stb	r5,77(sp)
 8005d48:	003a3f06 	br	8004648 <___vfprintf_internal_r+0x848>
 8005d4c:	d9401345 	stb	r5,77(sp)
 8005d50:	003a7806 	br	8004734 <___vfprintf_internal_r+0x934>
 8005d54:	d9401345 	stb	r5,77(sp)
 8005d58:	00399606 	br	80043b4 <___vfprintf_internal_r+0x5b4>
 8005d5c:	00bfffc4 	movi	r2,-1
 8005d60:	d8800515 	stw	r2,20(sp)
 8005d64:	00393606 	br	8004240 <___vfprintf_internal_r+0x440>
 8005d68:	900f883a 	mov	r7,r18
 8005d6c:	8025883a 	mov	r18,r16
 8005d70:	dc000717 	ldw	r16,28(sp)
 8005d74:	10800044 	addi	r2,r2,1
 8005d78:	1f07883a 	add	r3,r3,fp
 8005d7c:	b1c00015 	stw	r7,0(r22)
 8005d80:	b7000115 	stw	fp,4(r22)
 8005d84:	d8c01c15 	stw	r3,112(sp)
 8005d88:	d8801b15 	stw	r2,108(sp)
 8005d8c:	11000208 	cmpgei	r4,r2,8
 8005d90:	203bf826 	beq	r4,zero,8004d74 <___vfprintf_internal_r+0xf74>
 8005d94:	d9801a04 	addi	r6,sp,104
 8005d98:	900b883a 	mov	r5,r18
 8005d9c:	9809883a 	mov	r4,r19
 8005da0:	800b2d00 	call	800b2d0 <__sprint_r>
 8005da4:	1039231e 	bne	r2,zero,8004234 <___vfprintf_internal_r+0x434>
 8005da8:	d8c01c17 	ldw	r3,112(sp)
 8005dac:	d8801b17 	ldw	r2,108(sp)
 8005db0:	dd802704 	addi	r22,sp,156
 8005db4:	003bf006 	br	8004d78 <___vfprintf_internal_r+0xf78>
 8005db8:	d8800717 	ldw	r2,28(sp)
 8005dbc:	d8c00b17 	ldw	r3,44(sp)
 8005dc0:	10eb883a 	add	r21,r2,r3
 8005dc4:	a829883a 	mov	r20,r21
 8005dc8:	a83fd60e 	bge	r21,zero,8005d24 <___vfprintf_internal_r+0x1f24>
 8005dcc:	0029883a 	mov	r20,zero
 8005dd0:	003fd406 	br	8005d24 <___vfprintf_internal_r+0x1f24>
 8005dd4:	00800c04 	movi	r2,48
 8005dd8:	ad400c04 	addi	r21,r21,48
 8005ddc:	d88016c5 	stb	r2,91(sp)
 8005de0:	00800104 	movi	r2,4
 8005de4:	dd401705 	stb	r21,92(sp)
 8005de8:	d8801015 	stw	r2,64(sp)
 8005dec:	003e6e06 	br	80057a8 <___vfprintf_internal_r+0x19a8>
 8005df0:	05400044 	movi	r21,1
 8005df4:	a8abc83a 	sub	r21,r21,r2
 8005df8:	00800b44 	movi	r2,45
 8005dfc:	d8801685 	stb	r2,90(sp)
 8005e00:	003e3a06 	br	80056ec <___vfprintf_internal_r+0x18ec>
 8005e04:	6080004c 	andi	r2,r12,1
 8005e08:	d8800715 	stw	r2,28(sp)
 8005e0c:	103e6b1e 	bne	r2,zero,80057bc <___vfprintf_internal_r+0x19bc>
 8005e10:	a829883a 	mov	r20,r21
 8005e14:	a83efe0e 	bge	r21,zero,8005a10 <___vfprintf_internal_r+0x1c10>
 8005e18:	0029883a 	mov	r20,zero
 8005e1c:	003efc06 	br	8005a10 <___vfprintf_internal_r+0x1c10>
 8005e20:	d8800a17 	ldw	r2,40(sp)
 8005e24:	10001a16 	blt	r2,zero,8005e90 <___vfprintf_internal_r+0x2090>
 8005e28:	db401343 	ldbu	r13,77(sp)
 8005e2c:	e0801210 	cmplti	r2,fp,72
 8005e30:	1000141e 	bne	r2,zero,8005e84 <___vfprintf_internal_r+0x2084>
 8005e34:	04420174 	movhi	r17,2053
 8005e38:	8c7e6004 	addi	r17,r17,-1664
 8005e3c:	00398c06 	br	8004470 <___vfprintf_internal_r+0x670>
 8005e40:	d8800b17 	ldw	r2,44(sp)
 8005e44:	18ab883a 	add	r21,r3,r2
 8005e48:	aa2b883a 	add	r21,r21,r8
 8005e4c:	003ff006 	br	8005e10 <___vfprintf_internal_r+0x2010>
 8005e50:	1000031e 	bne	r2,zero,8005e60 <___vfprintf_internal_r+0x2060>
 8005e54:	05000044 	movi	r20,1
 8005e58:	05400044 	movi	r21,1
 8005e5c:	003eec06 	br	8005a10 <___vfprintf_internal_r+0x1c10>
 8005e60:	d8800b17 	ldw	r2,44(sp)
 8005e64:	15400044 	addi	r21,r2,1
 8005e68:	aa2b883a 	add	r21,r21,r8
 8005e6c:	003fe806 	br	8005e10 <___vfprintf_internal_r+0x2010>
 8005e70:	8025883a 	mov	r18,r16
 8005e74:	0038ef06 	br	8004234 <___vfprintf_internal_r+0x434>
 8005e78:	b005883a 	mov	r2,r22
 8005e7c:	39fe6e04 	addi	r7,r7,-1608
 8005e80:	003ea506 	br	8005918 <___vfprintf_internal_r+0x1b18>
 8005e84:	04420174 	movhi	r17,2053
 8005e88:	8c7e5f04 	addi	r17,r17,-1668
 8005e8c:	00397806 	br	8004470 <___vfprintf_internal_r+0x670>
 8005e90:	00800b44 	movi	r2,45
 8005e94:	d8801345 	stb	r2,77(sp)
 8005e98:	03400b44 	movi	r13,45
 8005e9c:	003fe306 	br	8005e2c <___vfprintf_internal_r+0x202c>
 8005ea0:	00800084 	movi	r2,2
 8005ea4:	d8801015 	stw	r2,64(sp)
 8005ea8:	003e3f06 	br	80057a8 <___vfprintf_internal_r+0x19a8>
 8005eac:	d8800617 	ldw	r2,24(sp)
 8005eb0:	12000017 	ldw	r8,0(r2)
 8005eb4:	10800104 	addi	r2,r2,4
 8005eb8:	4000010e 	bge	r8,zero,8005ec0 <___vfprintf_internal_r+0x20c0>
 8005ebc:	023fffc4 	movi	r8,-1
 8005ec0:	bf000043 	ldbu	fp,1(r23)
 8005ec4:	d8800615 	stw	r2,24(sp)
 8005ec8:	182f883a 	mov	r23,r3
 8005ecc:	e2c03fcc 	andi	r11,fp,255
 8005ed0:	5ac0201c 	xori	r11,r11,128
 8005ed4:	5affe004 	addi	r11,r11,-128
 8005ed8:	00381506 	br	8003f30 <___vfprintf_internal_r+0x130>

08005edc <__vfprintf_internal>:
 8005edc:	00c20174 	movhi	r3,2053
 8005ee0:	2005883a 	mov	r2,r4
 8005ee4:	1918e017 	ldw	r4,25472(r3)
 8005ee8:	300f883a 	mov	r7,r6
 8005eec:	280d883a 	mov	r6,r5
 8005ef0:	100b883a 	mov	r5,r2
 8005ef4:	8003e001 	jmpi	8003e00 <___vfprintf_internal_r>

08005ef8 <__sbprintf>:
 8005ef8:	2880030b 	ldhu	r2,12(r5)
 8005efc:	2b001917 	ldw	r12,100(r5)
 8005f00:	2ac0038b 	ldhu	r11,14(r5)
 8005f04:	2a800717 	ldw	r10,28(r5)
 8005f08:	2a400917 	ldw	r9,36(r5)
 8005f0c:	defee204 	addi	sp,sp,-1144
 8005f10:	da001a04 	addi	r8,sp,104
 8005f14:	00c10004 	movi	r3,1024
 8005f18:	dc011a15 	stw	r16,1128(sp)
 8005f1c:	10bfff4c 	andi	r2,r2,65533
 8005f20:	2821883a 	mov	r16,r5
 8005f24:	d80b883a 	mov	r5,sp
 8005f28:	dc811c15 	stw	r18,1136(sp)
 8005f2c:	dc411b15 	stw	r17,1132(sp)
 8005f30:	dfc11d15 	stw	ra,1140(sp)
 8005f34:	2025883a 	mov	r18,r4
 8005f38:	d880030d 	sth	r2,12(sp)
 8005f3c:	db001915 	stw	r12,100(sp)
 8005f40:	dac0038d 	sth	r11,14(sp)
 8005f44:	da800715 	stw	r10,28(sp)
 8005f48:	da400915 	stw	r9,36(sp)
 8005f4c:	da000015 	stw	r8,0(sp)
 8005f50:	da000415 	stw	r8,16(sp)
 8005f54:	d8c00215 	stw	r3,8(sp)
 8005f58:	d8c00515 	stw	r3,20(sp)
 8005f5c:	d8000615 	stw	zero,24(sp)
 8005f60:	8003e000 	call	8003e00 <___vfprintf_internal_r>
 8005f64:	1023883a 	mov	r17,r2
 8005f68:	10000d0e 	bge	r2,zero,8005fa0 <__sbprintf+0xa8>
 8005f6c:	d880030b 	ldhu	r2,12(sp)
 8005f70:	1080100c 	andi	r2,r2,64
 8005f74:	10000326 	beq	r2,zero,8005f84 <__sbprintf+0x8c>
 8005f78:	8080030b 	ldhu	r2,12(r16)
 8005f7c:	10801014 	ori	r2,r2,64
 8005f80:	8080030d 	sth	r2,12(r16)
 8005f84:	8805883a 	mov	r2,r17
 8005f88:	dfc11d17 	ldw	ra,1140(sp)
 8005f8c:	dc811c17 	ldw	r18,1136(sp)
 8005f90:	dc411b17 	ldw	r17,1132(sp)
 8005f94:	dc011a17 	ldw	r16,1128(sp)
 8005f98:	dec11e04 	addi	sp,sp,1144
 8005f9c:	f800283a 	ret
 8005fa0:	d80b883a 	mov	r5,sp
 8005fa4:	9009883a 	mov	r4,r18
 8005fa8:	8007cec0 	call	8007cec <_fflush_r>
 8005fac:	103fef26 	beq	r2,zero,8005f6c <__sbprintf+0x74>
 8005fb0:	047fffc4 	movi	r17,-1
 8005fb4:	003fed06 	br	8005f6c <__sbprintf+0x74>

08005fb8 <_write_r>:
 8005fb8:	2807883a 	mov	r3,r5
 8005fbc:	defffe04 	addi	sp,sp,-8
 8005fc0:	dc000015 	stw	r16,0(sp)
 8005fc4:	300b883a 	mov	r5,r6
 8005fc8:	00820174 	movhi	r2,2053
 8005fcc:	380d883a 	mov	r6,r7
 8005fd0:	2021883a 	mov	r16,r4
 8005fd4:	1809883a 	mov	r4,r3
 8005fd8:	dfc00115 	stw	ra,4(sp)
 8005fdc:	10193915 	stw	zero,25828(r2)
 8005fe0:	802508c0 	call	802508c <write>
 8005fe4:	10ffffd8 	cmpnei	r3,r2,-1
 8005fe8:	18000426 	beq	r3,zero,8005ffc <_write_r+0x44>
 8005fec:	dfc00117 	ldw	ra,4(sp)
 8005ff0:	dc000017 	ldw	r16,0(sp)
 8005ff4:	dec00204 	addi	sp,sp,8
 8005ff8:	f800283a 	ret
 8005ffc:	00c20174 	movhi	r3,2053
 8006000:	18d93917 	ldw	r3,25828(r3)
 8006004:	183ff926 	beq	r3,zero,8005fec <_write_r+0x34>
 8006008:	80c00015 	stw	r3,0(r16)
 800600c:	dfc00117 	ldw	ra,4(sp)
 8006010:	dc000017 	ldw	r16,0(sp)
 8006014:	dec00204 	addi	sp,sp,8
 8006018:	f800283a 	ret

0800601c <__swsetup_r>:
 800601c:	00820174 	movhi	r2,2053
 8006020:	1098e017 	ldw	r2,25472(r2)
 8006024:	defffd04 	addi	sp,sp,-12
 8006028:	dc400115 	stw	r17,4(sp)
 800602c:	dc000015 	stw	r16,0(sp)
 8006030:	dfc00215 	stw	ra,8(sp)
 8006034:	2023883a 	mov	r17,r4
 8006038:	2821883a 	mov	r16,r5
 800603c:	10000226 	beq	r2,zero,8006048 <__swsetup_r+0x2c>
 8006040:	10c00e17 	ldw	r3,56(r2)
 8006044:	18003326 	beq	r3,zero,8006114 <__swsetup_r+0xf8>
 8006048:	8180030b 	ldhu	r6,12(r16)
 800604c:	30c0020c 	andi	r3,r6,8
 8006050:	3005883a 	mov	r2,r6
 8006054:	18000f26 	beq	r3,zero,8006094 <__swsetup_r+0x78>
 8006058:	80c00417 	ldw	r3,16(r16)
 800605c:	18001626 	beq	r3,zero,80060b8 <__swsetup_r+0x9c>
 8006060:	1100004c 	andi	r4,r2,1
 8006064:	20001f1e 	bne	r4,zero,80060e4 <__swsetup_r+0xc8>
 8006068:	1100008c 	andi	r4,r2,2
 800606c:	20002c1e 	bne	r4,zero,8006120 <__swsetup_r+0x104>
 8006070:	81000517 	ldw	r4,20(r16)
 8006074:	81000215 	stw	r4,8(r16)
 8006078:	18001f26 	beq	r3,zero,80060f8 <__swsetup_r+0xdc>
 800607c:	0005883a 	mov	r2,zero
 8006080:	dfc00217 	ldw	ra,8(sp)
 8006084:	dc400117 	ldw	r17,4(sp)
 8006088:	dc000017 	ldw	r16,0(sp)
 800608c:	dec00304 	addi	sp,sp,12
 8006090:	f800283a 	ret
 8006094:	3080040c 	andi	r2,r6,16
 8006098:	10003126 	beq	r2,zero,8006160 <__swsetup_r+0x144>
 800609c:	3080010c 	andi	r2,r6,4
 80060a0:	1000211e 	bne	r2,zero,8006128 <__swsetup_r+0x10c>
 80060a4:	80c00417 	ldw	r3,16(r16)
 80060a8:	30800214 	ori	r2,r6,8
 80060ac:	8080030d 	sth	r2,12(r16)
 80060b0:	100d883a 	mov	r6,r2
 80060b4:	183fea1e 	bne	r3,zero,8006060 <__swsetup_r+0x44>
 80060b8:	1100a00c 	andi	r4,r2,640
 80060bc:	21008020 	cmpeqi	r4,r4,512
 80060c0:	203fe71e 	bne	r4,zero,8006060 <__swsetup_r+0x44>
 80060c4:	8809883a 	mov	r4,r17
 80060c8:	800b883a 	mov	r5,r16
 80060cc:	8008cf40 	call	8008cf4 <__smakebuf_r>
 80060d0:	8180030b 	ldhu	r6,12(r16)
 80060d4:	80c00417 	ldw	r3,16(r16)
 80060d8:	3005883a 	mov	r2,r6
 80060dc:	1100004c 	andi	r4,r2,1
 80060e0:	203fe126 	beq	r4,zero,8006068 <__swsetup_r+0x4c>
 80060e4:	81000517 	ldw	r4,20(r16)
 80060e8:	80000215 	stw	zero,8(r16)
 80060ec:	0109c83a 	sub	r4,zero,r4
 80060f0:	81000615 	stw	r4,24(r16)
 80060f4:	183fe11e 	bne	r3,zero,800607c <__swsetup_r+0x60>
 80060f8:	10c0200c 	andi	r3,r2,128
 80060fc:	0005883a 	mov	r2,zero
 8006100:	183fdf26 	beq	r3,zero,8006080 <__swsetup_r+0x64>
 8006104:	31801014 	ori	r6,r6,64
 8006108:	8180030d 	sth	r6,12(r16)
 800610c:	00bfffc4 	movi	r2,-1
 8006110:	003fdb06 	br	8006080 <__swsetup_r+0x64>
 8006114:	1009883a 	mov	r4,r2
 8006118:	80080d40 	call	80080d4 <__sinit>
 800611c:	003fca06 	br	8006048 <__swsetup_r+0x2c>
 8006120:	0009883a 	mov	r4,zero
 8006124:	003fd306 	br	8006074 <__swsetup_r+0x58>
 8006128:	81400c17 	ldw	r5,48(r16)
 800612c:	28000626 	beq	r5,zero,8006148 <__swsetup_r+0x12c>
 8006130:	80801004 	addi	r2,r16,64
 8006134:	28800326 	beq	r5,r2,8006144 <__swsetup_r+0x128>
 8006138:	8809883a 	mov	r4,r17
 800613c:	80082380 	call	8008238 <_free_r>
 8006140:	8180030b 	ldhu	r6,12(r16)
 8006144:	80000c15 	stw	zero,48(r16)
 8006148:	80c00417 	ldw	r3,16(r16)
 800614c:	00bff6c4 	movi	r2,-37
 8006150:	118c703a 	and	r6,r2,r6
 8006154:	80000115 	stw	zero,4(r16)
 8006158:	80c00015 	stw	r3,0(r16)
 800615c:	003fd206 	br	80060a8 <__swsetup_r+0x8c>
 8006160:	00800244 	movi	r2,9
 8006164:	88800015 	stw	r2,0(r17)
 8006168:	31801014 	ori	r6,r6,64
 800616c:	8180030d 	sth	r6,12(r16)
 8006170:	00bfffc4 	movi	r2,-1
 8006174:	003fc206 	br	8006080 <__swsetup_r+0x64>

08006178 <quorem>:
 8006178:	defff504 	addi	sp,sp,-44
 800617c:	dc800315 	stw	r18,12(sp)
 8006180:	20800417 	ldw	r2,16(r4)
 8006184:	2c800417 	ldw	r18,16(r5)
 8006188:	dfc00a15 	stw	ra,40(sp)
 800618c:	df000915 	stw	fp,36(sp)
 8006190:	ddc00815 	stw	r23,32(sp)
 8006194:	dd800715 	stw	r22,28(sp)
 8006198:	dd400615 	stw	r21,24(sp)
 800619c:	dd000515 	stw	r20,20(sp)
 80061a0:	dcc00415 	stw	r19,16(sp)
 80061a4:	dc400215 	stw	r17,8(sp)
 80061a8:	dc000115 	stw	r16,4(sp)
 80061ac:	14806f16 	blt	r2,r18,800636c <quorem+0x1f4>
 80061b0:	94bfffc4 	addi	r18,r18,-1
 80061b4:	902c90ba 	slli	r22,r18,2
 80061b8:	2c000504 	addi	r16,r5,20
 80061bc:	25000504 	addi	r20,r4,20
 80061c0:	85a7883a 	add	r19,r16,r22
 80061c4:	9f000017 	ldw	fp,0(r19)
 80061c8:	a5ad883a 	add	r22,r20,r22
 80061cc:	202b883a 	mov	r21,r4
 80061d0:	b1000017 	ldw	r4,0(r22)
 80061d4:	e7000044 	addi	fp,fp,1
 80061d8:	282f883a 	mov	r23,r5
 80061dc:	e00b883a 	mov	r5,fp
 80061e0:	d9000015 	stw	r4,0(sp)
 80061e4:	800e2300 	call	800e230 <__udivsi3>
 80061e8:	d9000017 	ldw	r4,0(sp)
 80061ec:	1023883a 	mov	r17,r2
 80061f0:	27002a36 	bltu	r4,fp,800629c <quorem+0x124>
 80061f4:	800b883a 	mov	r5,r16
 80061f8:	a009883a 	mov	r4,r20
 80061fc:	0013883a 	mov	r9,zero
 8006200:	0007883a 	mov	r3,zero
 8006204:	2a000017 	ldw	r8,0(r5)
 8006208:	21800017 	ldw	r6,0(r4)
 800620c:	21000104 	addi	r4,r4,4
 8006210:	40bfffcc 	andi	r2,r8,65535
 8006214:	1445383a 	mul	r2,r2,r17
 8006218:	400ed43a 	srli	r7,r8,16
 800621c:	32bfffcc 	andi	r10,r6,65535
 8006220:	1245883a 	add	r2,r2,r9
 8006224:	1012d43a 	srli	r9,r2,16
 8006228:	123fffcc 	andi	r8,r2,65535
 800622c:	3c4f383a 	mul	r7,r7,r17
 8006230:	1a07c83a 	sub	r3,r3,r8
 8006234:	1a91883a 	add	r8,r3,r10
 8006238:	3006d43a 	srli	r3,r6,16
 800623c:	4005d43a 	srai	r2,r8,16
 8006240:	3a4f883a 	add	r7,r7,r9
 8006244:	39bfffcc 	andi	r6,r7,65535
 8006248:	1987c83a 	sub	r3,r3,r6
 800624c:	1887883a 	add	r3,r3,r2
 8006250:	1804943a 	slli	r2,r3,16
 8006254:	423fffcc 	andi	r8,r8,65535
 8006258:	29400104 	addi	r5,r5,4
 800625c:	1210b03a 	or	r8,r2,r8
 8006260:	223fff15 	stw	r8,-4(r4)
 8006264:	3812d43a 	srli	r9,r7,16
 8006268:	1807d43a 	srai	r3,r3,16
 800626c:	997fe52e 	bgeu	r19,r5,8006204 <quorem+0x8c>
 8006270:	b0800017 	ldw	r2,0(r22)
 8006274:	1000091e 	bne	r2,zero,800629c <quorem+0x124>
 8006278:	b5bfff04 	addi	r22,r22,-4
 800627c:	a5800336 	bltu	r20,r22,800628c <quorem+0x114>
 8006280:	00000506 	br	8006298 <quorem+0x120>
 8006284:	94bfffc4 	addi	r18,r18,-1
 8006288:	a580032e 	bgeu	r20,r22,8006298 <quorem+0x120>
 800628c:	b0800017 	ldw	r2,0(r22)
 8006290:	b5bfff04 	addi	r22,r22,-4
 8006294:	103ffb26 	beq	r2,zero,8006284 <quorem+0x10c>
 8006298:	ac800415 	stw	r18,16(r21)
 800629c:	b80b883a 	mov	r5,r23
 80062a0:	a809883a 	mov	r4,r21
 80062a4:	800a1840 	call	800a184 <__mcmp>
 80062a8:	10002316 	blt	r2,zero,8006338 <quorem+0x1c0>
 80062ac:	8c400044 	addi	r17,r17,1
 80062b0:	a00d883a 	mov	r6,r20
 80062b4:	0007883a 	mov	r3,zero
 80062b8:	81000017 	ldw	r4,0(r16)
 80062bc:	31400017 	ldw	r5,0(r6)
 80062c0:	31800104 	addi	r6,r6,4
 80062c4:	20bfffcc 	andi	r2,r4,65535
 80062c8:	1887c83a 	sub	r3,r3,r2
 80062cc:	28bfffcc 	andi	r2,r5,65535
 80062d0:	1885883a 	add	r2,r3,r2
 80062d4:	2008d43a 	srli	r4,r4,16
 80062d8:	2806d43a 	srli	r3,r5,16
 80062dc:	100fd43a 	srai	r7,r2,16
 80062e0:	117fffcc 	andi	r5,r2,65535
 80062e4:	1907c83a 	sub	r3,r3,r4
 80062e8:	19c7883a 	add	r3,r3,r7
 80062ec:	1804943a 	slli	r2,r3,16
 80062f0:	84000104 	addi	r16,r16,4
 80062f4:	1807d43a 	srai	r3,r3,16
 80062f8:	1144b03a 	or	r2,r2,r5
 80062fc:	30bfff15 	stw	r2,-4(r6)
 8006300:	9c3fed2e 	bgeu	r19,r16,80062b8 <quorem+0x140>
 8006304:	900490ba 	slli	r2,r18,2
 8006308:	a085883a 	add	r2,r20,r2
 800630c:	10c00017 	ldw	r3,0(r2)
 8006310:	1800091e 	bne	r3,zero,8006338 <quorem+0x1c0>
 8006314:	10bfff04 	addi	r2,r2,-4
 8006318:	a0800336 	bltu	r20,r2,8006328 <quorem+0x1b0>
 800631c:	00000506 	br	8006334 <quorem+0x1bc>
 8006320:	94bfffc4 	addi	r18,r18,-1
 8006324:	a080032e 	bgeu	r20,r2,8006334 <quorem+0x1bc>
 8006328:	10c00017 	ldw	r3,0(r2)
 800632c:	10bfff04 	addi	r2,r2,-4
 8006330:	183ffb26 	beq	r3,zero,8006320 <quorem+0x1a8>
 8006334:	ac800415 	stw	r18,16(r21)
 8006338:	8805883a 	mov	r2,r17
 800633c:	dfc00a17 	ldw	ra,40(sp)
 8006340:	df000917 	ldw	fp,36(sp)
 8006344:	ddc00817 	ldw	r23,32(sp)
 8006348:	dd800717 	ldw	r22,28(sp)
 800634c:	dd400617 	ldw	r21,24(sp)
 8006350:	dd000517 	ldw	r20,20(sp)
 8006354:	dcc00417 	ldw	r19,16(sp)
 8006358:	dc800317 	ldw	r18,12(sp)
 800635c:	dc400217 	ldw	r17,8(sp)
 8006360:	dc000117 	ldw	r16,4(sp)
 8006364:	dec00b04 	addi	sp,sp,44
 8006368:	f800283a 	ret
 800636c:	0005883a 	mov	r2,zero
 8006370:	003ff206 	br	800633c <quorem+0x1c4>

08006374 <_dtoa_r>:
 8006374:	20801017 	ldw	r2,64(r4)
 8006378:	deffe204 	addi	sp,sp,-120
 800637c:	ddc01b15 	stw	r23,108(sp)
 8006380:	dd001815 	stw	r20,96(sp)
 8006384:	dc801615 	stw	r18,88(sp)
 8006388:	dc401515 	stw	r17,84(sp)
 800638c:	dc001415 	stw	r16,80(sp)
 8006390:	dfc01d15 	stw	ra,116(sp)
 8006394:	df001c15 	stw	fp,112(sp)
 8006398:	dd801a15 	stw	r22,104(sp)
 800639c:	dd401915 	stw	r21,100(sp)
 80063a0:	dcc01715 	stw	r19,92(sp)
 80063a4:	d9c00115 	stw	r7,4(sp)
 80063a8:	dc002017 	ldw	r16,128(sp)
 80063ac:	202f883a 	mov	r23,r4
 80063b0:	3025883a 	mov	r18,r6
 80063b4:	2829883a 	mov	r20,r5
 80063b8:	3023883a 	mov	r17,r6
 80063bc:	10000826 	beq	r2,zero,80063e0 <_dtoa_r+0x6c>
 80063c0:	21801117 	ldw	r6,68(r4)
 80063c4:	00c00044 	movi	r3,1
 80063c8:	100b883a 	mov	r5,r2
 80063cc:	1986983a 	sll	r3,r3,r6
 80063d0:	11800115 	stw	r6,4(r2)
 80063d4:	10c00215 	stw	r3,8(r2)
 80063d8:	80098b80 	call	80098b8 <_Bfree>
 80063dc:	b8001015 	stw	zero,64(r23)
 80063e0:	90018616 	blt	r18,zero,80069fc <_dtoa_r+0x688>
 80063e4:	80000015 	stw	zero,0(r16)
 80063e8:	909ffc2c 	andhi	r2,r18,32752
 80063ec:	00dffc34 	movhi	r3,32752
 80063f0:	10c18b26 	beq	r2,r3,8006a20 <_dtoa_r+0x6ac>
 80063f4:	000d883a 	mov	r6,zero
 80063f8:	000f883a 	mov	r7,zero
 80063fc:	a009883a 	mov	r4,r20
 8006400:	880b883a 	mov	r5,r17
 8006404:	800f4c80 	call	800f4c8 <__eqdf2>
 8006408:	1000181e 	bne	r2,zero,800646c <_dtoa_r+0xf8>
 800640c:	d8c01f17 	ldw	r3,124(sp)
 8006410:	00800044 	movi	r2,1
 8006414:	18800015 	stw	r2,0(r3)
 8006418:	d8802117 	ldw	r2,132(sp)
 800641c:	10030b26 	beq	r2,zero,800704c <_dtoa_r+0xcd8>
 8006420:	d8c02117 	ldw	r3,132(sp)
 8006424:	00820174 	movhi	r2,2053
 8006428:	10be6d44 	addi	r2,r2,-1611
 800642c:	07020174 	movhi	fp,2053
 8006430:	18800015 	stw	r2,0(r3)
 8006434:	e73e6d04 	addi	fp,fp,-1612
 8006438:	e005883a 	mov	r2,fp
 800643c:	dfc01d17 	ldw	ra,116(sp)
 8006440:	df001c17 	ldw	fp,112(sp)
 8006444:	ddc01b17 	ldw	r23,108(sp)
 8006448:	dd801a17 	ldw	r22,104(sp)
 800644c:	dd401917 	ldw	r21,100(sp)
 8006450:	dd001817 	ldw	r20,96(sp)
 8006454:	dcc01717 	ldw	r19,92(sp)
 8006458:	dc801617 	ldw	r18,88(sp)
 800645c:	dc401517 	ldw	r17,84(sp)
 8006460:	dc001417 	ldw	r16,80(sp)
 8006464:	dec01e04 	addi	sp,sp,120
 8006468:	f800283a 	ret
 800646c:	d8801204 	addi	r2,sp,72
 8006470:	9020d53a 	srli	r16,r18,20
 8006474:	d8800015 	stw	r2,0(sp)
 8006478:	d9c01304 	addi	r7,sp,76
 800647c:	a00b883a 	mov	r5,r20
 8006480:	880d883a 	mov	r6,r17
 8006484:	b809883a 	mov	r4,r23
 8006488:	800a5680 	call	800a568 <__d2b>
 800648c:	102d883a 	mov	r22,r2
 8006490:	8001741e 	bne	r16,zero,8006a64 <_dtoa_r+0x6f0>
 8006494:	df001217 	ldw	fp,72(sp)
 8006498:	dc001317 	ldw	r16,76(sp)
 800649c:	e421883a 	add	r16,fp,r16
 80064a0:	80810c84 	addi	r2,r16,1074
 80064a4:	10c00850 	cmplti	r3,r2,33
 80064a8:	1802f81e 	bne	r3,zero,800708c <_dtoa_r+0xd18>
 80064ac:	01001004 	movi	r4,64
 80064b0:	2085c83a 	sub	r2,r4,r2
 80064b4:	81010484 	addi	r4,r16,1042
 80064b8:	90a4983a 	sll	r18,r18,r2
 80064bc:	a108d83a 	srl	r4,r20,r4
 80064c0:	9108b03a 	or	r4,r18,r4
 80064c4:	801085c0 	call	801085c <__floatunsidf>
 80064c8:	1009883a 	mov	r4,r2
 80064cc:	017f8434 	movhi	r5,65040
 80064d0:	00800044 	movi	r2,1
 80064d4:	194b883a 	add	r5,r3,r5
 80064d8:	843fffc4 	addi	r16,r16,-1
 80064dc:	d8800915 	stw	r2,36(sp)
 80064e0:	000d883a 	mov	r6,zero
 80064e4:	01cffe34 	movhi	r7,16376
 80064e8:	800fd980 	call	800fd98 <__subdf3>
 80064ec:	0198dbf4 	movhi	r6,25455
 80064f0:	01cff4f4 	movhi	r7,16339
 80064f4:	3190d844 	addi	r6,r6,17249
 80064f8:	39e1e9c4 	addi	r7,r7,-30809
 80064fc:	1009883a 	mov	r4,r2
 8006500:	180b883a 	mov	r5,r3
 8006504:	800f7280 	call	800f728 <__muldf3>
 8006508:	01a2d874 	movhi	r6,35681
 800650c:	01cff1f4 	movhi	r7,16327
 8006510:	31b22cc4 	addi	r6,r6,-14157
 8006514:	39e28a04 	addi	r7,r7,-30168
 8006518:	180b883a 	mov	r5,r3
 800651c:	1009883a 	mov	r4,r2
 8006520:	800e2f00 	call	800e2f0 <__adddf3>
 8006524:	8009883a 	mov	r4,r16
 8006528:	1027883a 	mov	r19,r2
 800652c:	1825883a 	mov	r18,r3
 8006530:	80107a00 	call	80107a0 <__floatsidf>
 8006534:	019427f4 	movhi	r6,20639
 8006538:	01cff4f4 	movhi	r7,16339
 800653c:	319e7ec4 	addi	r6,r6,31227
 8006540:	39d104c4 	addi	r7,r7,17427
 8006544:	1009883a 	mov	r4,r2
 8006548:	180b883a 	mov	r5,r3
 800654c:	800f7280 	call	800f728 <__muldf3>
 8006550:	100d883a 	mov	r6,r2
 8006554:	180f883a 	mov	r7,r3
 8006558:	9809883a 	mov	r4,r19
 800655c:	900b883a 	mov	r5,r18
 8006560:	800e2f00 	call	800e2f0 <__adddf3>
 8006564:	1009883a 	mov	r4,r2
 8006568:	180b883a 	mov	r5,r3
 800656c:	1025883a 	mov	r18,r2
 8006570:	182b883a 	mov	r21,r3
 8006574:	80107200 	call	8010720 <__fixdfsi>
 8006578:	000d883a 	mov	r6,zero
 800657c:	000f883a 	mov	r7,zero
 8006580:	9009883a 	mov	r4,r18
 8006584:	a80b883a 	mov	r5,r21
 8006588:	1027883a 	mov	r19,r2
 800658c:	800f6380 	call	800f638 <__ledf2>
 8006590:	1002a416 	blt	r2,zero,8007024 <_dtoa_r+0xcb0>
 8006594:	e439c83a 	sub	fp,fp,r16
 8006598:	e0ffffc4 	addi	r3,fp,-1
 800659c:	988005e8 	cmpgeui	r2,r19,23
 80065a0:	d8c00215 	stw	r3,8(sp)
 80065a4:	1002961e 	bne	r2,zero,8007000 <_dtoa_r+0xc8c>
 80065a8:	980690fa 	slli	r3,r19,3
 80065ac:	00820174 	movhi	r2,2053
 80065b0:	10beb404 	addi	r2,r2,-1328
 80065b4:	10c5883a 	add	r2,r2,r3
 80065b8:	11800017 	ldw	r6,0(r2)
 80065bc:	11c00117 	ldw	r7,4(r2)
 80065c0:	a009883a 	mov	r4,r20
 80065c4:	880b883a 	mov	r5,r17
 80065c8:	800f6380 	call	800f638 <__ledf2>
 80065cc:	1002670e 	bge	r2,zero,8006f6c <_dtoa_r+0xbf8>
 80065d0:	d8000815 	stw	zero,32(sp)
 80065d4:	e0bfffc4 	addi	r2,fp,-1
 80065d8:	9cffffc4 	addi	r19,r19,-1
 80065dc:	10028c16 	blt	r2,zero,8007010 <_dtoa_r+0xc9c>
 80065e0:	d8000515 	stw	zero,20(sp)
 80065e4:	9802650e 	bge	r19,zero,8006f7c <_dtoa_r+0xc08>
 80065e8:	d8800517 	ldw	r2,20(sp)
 80065ec:	d8c00117 	ldw	r3,4(sp)
 80065f0:	dcc00315 	stw	r19,12(sp)
 80065f4:	14c5c83a 	sub	r2,r2,r19
 80065f8:	d8800515 	stw	r2,20(sp)
 80065fc:	04c5c83a 	sub	r2,zero,r19
 8006600:	d8800715 	stw	r2,28(sp)
 8006604:	188002a8 	cmpgeui	r2,r3,10
 8006608:	0027883a 	mov	r19,zero
 800660c:	1002631e 	bne	r2,zero,8006f9c <_dtoa_r+0xc28>
 8006610:	18800190 	cmplti	r2,r3,6
 8006614:	1002a11e 	bne	r2,zero,800709c <_dtoa_r+0xd28>
 8006618:	18bfff04 	addi	r2,r3,-4
 800661c:	d8800115 	stw	r2,4(sp)
 8006620:	0021883a 	mov	r16,zero
 8006624:	d8c00117 	ldw	r3,4(sp)
 8006628:	18800120 	cmpeqi	r2,r3,4
 800662c:	1003721e 	bne	r2,zero,80073f8 <_dtoa_r+0x1084>
 8006630:	18800160 	cmpeqi	r2,r3,5
 8006634:	10032f1e 	bne	r2,zero,80072f4 <_dtoa_r+0xf80>
 8006638:	188000a0 	cmpeqi	r2,r3,2
 800663c:	10026326 	beq	r2,zero,8006fcc <_dtoa_r+0xc58>
 8006640:	d8000615 	stw	zero,24(sp)
 8006644:	d8801e17 	ldw	r2,120(sp)
 8006648:	00833c0e 	bge	zero,r2,800733c <_dtoa_r+0xfc8>
 800664c:	d8800b15 	stw	r2,44(sp)
 8006650:	d8800415 	stw	r2,16(sp)
 8006654:	100d883a 	mov	r6,r2
 8006658:	b8001115 	stw	zero,68(r23)
 800665c:	30800610 	cmplti	r2,r6,24
 8006660:	1005161e 	bne	r2,zero,8007abc <_dtoa_r+0x1748>
 8006664:	00c00044 	movi	r3,1
 8006668:	00800104 	movi	r2,4
 800666c:	1085883a 	add	r2,r2,r2
 8006670:	11000504 	addi	r4,r2,20
 8006674:	180b883a 	mov	r5,r3
 8006678:	18c00044 	addi	r3,r3,1
 800667c:	313ffb2e 	bgeu	r6,r4,800666c <_dtoa_r+0x2f8>
 8006680:	b9401115 	stw	r5,68(r23)
 8006684:	b809883a 	mov	r4,r23
 8006688:	80098140 	call	8009814 <_Balloc>
 800668c:	1039883a 	mov	fp,r2
 8006690:	1004f526 	beq	r2,zero,8007a68 <_dtoa_r+0x16f4>
 8006694:	b8801015 	stw	r2,64(r23)
 8006698:	d8800417 	ldw	r2,16(sp)
 800669c:	108003e8 	cmpgeui	r2,r2,15
 80066a0:	10010b1e 	bne	r2,zero,8006ad0 <_dtoa_r+0x75c>
 80066a4:	80010a26 	beq	r16,zero,8006ad0 <_dtoa_r+0x75c>
 80066a8:	d9000317 	ldw	r4,12(sp)
 80066ac:	0103a30e 	bge	zero,r4,800753c <_dtoa_r+0x11c8>
 80066b0:	208003cc 	andi	r2,r4,15
 80066b4:	100690fa 	slli	r3,r2,3
 80066b8:	202bd13a 	srai	r21,r4,4
 80066bc:	00820174 	movhi	r2,2053
 80066c0:	10beb404 	addi	r2,r2,-1328
 80066c4:	10c5883a 	add	r2,r2,r3
 80066c8:	a8c0040c 	andi	r3,r21,16
 80066cc:	12800017 	ldw	r10,0(r2)
 80066d0:	12400117 	ldw	r9,4(r2)
 80066d4:	18034226 	beq	r3,zero,80073e0 <_dtoa_r+0x106c>
 80066d8:	00820174 	movhi	r2,2053
 80066dc:	10beaa04 	addi	r2,r2,-1368
 80066e0:	11800817 	ldw	r6,32(r2)
 80066e4:	11c00917 	ldw	r7,36(r2)
 80066e8:	a009883a 	mov	r4,r20
 80066ec:	880b883a 	mov	r5,r17
 80066f0:	da400e15 	stw	r9,56(sp)
 80066f4:	da800d15 	stw	r10,52(sp)
 80066f8:	800ec680 	call	800ec68 <__divdf3>
 80066fc:	da800d17 	ldw	r10,52(sp)
 8006700:	da400e17 	ldw	r9,56(sp)
 8006704:	ad4003cc 	andi	r21,r21,15
 8006708:	d8800a15 	stw	r2,40(sp)
 800670c:	d8c00c15 	stw	r3,48(sp)
 8006710:	040000c4 	movi	r16,3
 8006714:	a8001126 	beq	r21,zero,800675c <_dtoa_r+0x3e8>
 8006718:	04820174 	movhi	r18,2053
 800671c:	94beaa04 	addi	r18,r18,-1368
 8006720:	5009883a 	mov	r4,r10
 8006724:	480b883a 	mov	r5,r9
 8006728:	a980004c 	andi	r6,r21,1
 800672c:	30000626 	beq	r6,zero,8006748 <_dtoa_r+0x3d4>
 8006730:	91800017 	ldw	r6,0(r18)
 8006734:	91c00117 	ldw	r7,4(r18)
 8006738:	84000044 	addi	r16,r16,1
 800673c:	800f7280 	call	800f728 <__muldf3>
 8006740:	1009883a 	mov	r4,r2
 8006744:	180b883a 	mov	r5,r3
 8006748:	a82bd07a 	srai	r21,r21,1
 800674c:	94800204 	addi	r18,r18,8
 8006750:	a83ff51e 	bne	r21,zero,8006728 <_dtoa_r+0x3b4>
 8006754:	2015883a 	mov	r10,r4
 8006758:	2813883a 	mov	r9,r5
 800675c:	d9000a17 	ldw	r4,40(sp)
 8006760:	d9400c17 	ldw	r5,48(sp)
 8006764:	500d883a 	mov	r6,r10
 8006768:	480f883a 	mov	r7,r9
 800676c:	800ec680 	call	800ec68 <__divdf3>
 8006770:	1025883a 	mov	r18,r2
 8006774:	d8c00a15 	stw	r3,40(sp)
 8006778:	d8800817 	ldw	r2,32(sp)
 800677c:	10000726 	beq	r2,zero,800679c <_dtoa_r+0x428>
 8006780:	dd400a17 	ldw	r21,40(sp)
 8006784:	000d883a 	mov	r6,zero
 8006788:	01cffc34 	movhi	r7,16368
 800678c:	9009883a 	mov	r4,r18
 8006790:	a80b883a 	mov	r5,r21
 8006794:	800f6380 	call	800f638 <__ledf2>
 8006798:	10045516 	blt	r2,zero,80078f0 <_dtoa_r+0x157c>
 800679c:	8009883a 	mov	r4,r16
 80067a0:	80107a00 	call	80107a0 <__floatsidf>
 80067a4:	d9c00a17 	ldw	r7,40(sp)
 80067a8:	900d883a 	mov	r6,r18
 80067ac:	1009883a 	mov	r4,r2
 80067b0:	180b883a 	mov	r5,r3
 80067b4:	800f7280 	call	800f728 <__muldf3>
 80067b8:	000d883a 	mov	r6,zero
 80067bc:	01d00734 	movhi	r7,16412
 80067c0:	1009883a 	mov	r4,r2
 80067c4:	180b883a 	mov	r5,r3
 80067c8:	800e2f00 	call	800e2f0 <__adddf3>
 80067cc:	d8800c15 	stw	r2,48(sp)
 80067d0:	00bf3034 	movhi	r2,64704
 80067d4:	1885883a 	add	r2,r3,r2
 80067d8:	d8800d15 	stw	r2,52(sp)
 80067dc:	d8800417 	ldw	r2,16(sp)
 80067e0:	10033926 	beq	r2,zero,80074c8 <_dtoa_r+0x1154>
 80067e4:	d8800317 	ldw	r2,12(sp)
 80067e8:	d8801115 	stw	r2,68(sp)
 80067ec:	d8800417 	ldw	r2,16(sp)
 80067f0:	d8800e15 	stw	r2,56(sp)
 80067f4:	dc000a17 	ldw	r16,40(sp)
 80067f8:	9009883a 	mov	r4,r18
 80067fc:	800b883a 	mov	r5,r16
 8006800:	80107200 	call	8010720 <__fixdfsi>
 8006804:	d8c00e17 	ldw	r3,56(sp)
 8006808:	d8801015 	stw	r2,64(sp)
 800680c:	18ffffc4 	addi	r3,r3,-1
 8006810:	180890fa 	slli	r4,r3,3
 8006814:	00c20174 	movhi	r3,2053
 8006818:	18feb404 	addi	r3,r3,-1328
 800681c:	1907883a 	add	r3,r3,r4
 8006820:	1b000017 	ldw	r12,0(r3)
 8006824:	1b400117 	ldw	r13,4(r3)
 8006828:	1009883a 	mov	r4,r2
 800682c:	db000f15 	stw	r12,60(sp)
 8006830:	db400a15 	stw	r13,40(sp)
 8006834:	80107a00 	call	80107a0 <__floatsidf>
 8006838:	9009883a 	mov	r4,r18
 800683c:	800b883a 	mov	r5,r16
 8006840:	100d883a 	mov	r6,r2
 8006844:	180f883a 	mov	r7,r3
 8006848:	800fd980 	call	800fd98 <__subdf3>
 800684c:	dac01017 	ldw	r11,64(sp)
 8006850:	102b883a 	mov	r21,r2
 8006854:	d8800617 	ldw	r2,24(sp)
 8006858:	db400a17 	ldw	r13,40(sp)
 800685c:	db000f17 	ldw	r12,60(sp)
 8006860:	e4000044 	addi	r16,fp,1
 8006864:	1825883a 	mov	r18,r3
 8006868:	5ac00c04 	addi	r11,r11,48
 800686c:	1003c626 	beq	r2,zero,8007788 <_dtoa_r+0x1414>
 8006870:	600d883a 	mov	r6,r12
 8006874:	680f883a 	mov	r7,r13
 8006878:	0009883a 	mov	r4,zero
 800687c:	014ff834 	movhi	r5,16352
 8006880:	dac00f15 	stw	r11,60(sp)
 8006884:	800ec680 	call	800ec68 <__divdf3>
 8006888:	d9800c17 	ldw	r6,48(sp)
 800688c:	d9c00d17 	ldw	r7,52(sp)
 8006890:	1009883a 	mov	r4,r2
 8006894:	180b883a 	mov	r5,r3
 8006898:	800fd980 	call	800fd98 <__subdf3>
 800689c:	dac00f17 	ldw	r11,60(sp)
 80068a0:	a80d883a 	mov	r6,r21
 80068a4:	900f883a 	mov	r7,r18
 80068a8:	e2c00005 	stb	r11,0(fp)
 80068ac:	1009883a 	mov	r4,r2
 80068b0:	180b883a 	mov	r5,r3
 80068b4:	d8800a15 	stw	r2,40(sp)
 80068b8:	d8c00c15 	stw	r3,48(sp)
 80068bc:	800f5480 	call	800f548 <__gedf2>
 80068c0:	00844116 	blt	zero,r2,80079c8 <_dtoa_r+0x1654>
 80068c4:	0005883a 	mov	r2,zero
 80068c8:	dcc00f15 	stw	r19,60(sp)
 80068cc:	dd800d15 	stw	r22,52(sp)
 80068d0:	dcc00c17 	ldw	r19,48(sp)
 80068d4:	dd800e17 	ldw	r22,56(sp)
 80068d8:	dc400c15 	stw	r17,48(sp)
 80068dc:	ddc00e15 	stw	r23,56(sp)
 80068e0:	dc400a17 	ldw	r17,40(sp)
 80068e4:	dd000a15 	stw	r20,40(sp)
 80068e8:	1029883a 	mov	r20,r2
 80068ec:	00002606 	br	8006988 <_dtoa_r+0x614>
 80068f0:	a5000044 	addi	r20,r20,1
 80068f4:	a5843d0e 	bge	r20,r22,80079ec <_dtoa_r+0x1678>
 80068f8:	8809883a 	mov	r4,r17
 80068fc:	980b883a 	mov	r5,r19
 8006900:	000d883a 	mov	r6,zero
 8006904:	01d00934 	movhi	r7,16420
 8006908:	800f7280 	call	800f728 <__muldf3>
 800690c:	000d883a 	mov	r6,zero
 8006910:	01d00934 	movhi	r7,16420
 8006914:	a809883a 	mov	r4,r21
 8006918:	900b883a 	mov	r5,r18
 800691c:	1023883a 	mov	r17,r2
 8006920:	1827883a 	mov	r19,r3
 8006924:	800f7280 	call	800f728 <__muldf3>
 8006928:	180b883a 	mov	r5,r3
 800692c:	1009883a 	mov	r4,r2
 8006930:	1825883a 	mov	r18,r3
 8006934:	102b883a 	mov	r21,r2
 8006938:	80107200 	call	8010720 <__fixdfsi>
 800693c:	1009883a 	mov	r4,r2
 8006940:	102f883a 	mov	r23,r2
 8006944:	80107a00 	call	80107a0 <__floatsidf>
 8006948:	a809883a 	mov	r4,r21
 800694c:	900b883a 	mov	r5,r18
 8006950:	100d883a 	mov	r6,r2
 8006954:	180f883a 	mov	r7,r3
 8006958:	800fd980 	call	800fd98 <__subdf3>
 800695c:	84000044 	addi	r16,r16,1
 8006960:	ba000c04 	addi	r8,r23,48
 8006964:	823fffc5 	stb	r8,-1(r16)
 8006968:	880d883a 	mov	r6,r17
 800696c:	980f883a 	mov	r7,r19
 8006970:	1009883a 	mov	r4,r2
 8006974:	180b883a 	mov	r5,r3
 8006978:	102b883a 	mov	r21,r2
 800697c:	1825883a 	mov	r18,r3
 8006980:	800f6380 	call	800f638 <__ledf2>
 8006984:	10040e16 	blt	r2,zero,80079c0 <_dtoa_r+0x164c>
 8006988:	a80d883a 	mov	r6,r21
 800698c:	900f883a 	mov	r7,r18
 8006990:	0009883a 	mov	r4,zero
 8006994:	014ffc34 	movhi	r5,16368
 8006998:	800fd980 	call	800fd98 <__subdf3>
 800699c:	880d883a 	mov	r6,r17
 80069a0:	980f883a 	mov	r7,r19
 80069a4:	1009883a 	mov	r4,r2
 80069a8:	180b883a 	mov	r5,r3
 80069ac:	800f6380 	call	800f638 <__ledf2>
 80069b0:	103fcf0e 	bge	r2,zero,80068f0 <_dtoa_r+0x57c>
 80069b4:	dd800d17 	ldw	r22,52(sp)
 80069b8:	ddc00e17 	ldw	r23,56(sp)
 80069bc:	d8801117 	ldw	r2,68(sp)
 80069c0:	10800044 	addi	r2,r2,1
 80069c4:	d8800315 	stw	r2,12(sp)
 80069c8:	00000106 	br	80069d0 <_dtoa_r+0x65c>
 80069cc:	e403ee26 	beq	fp,r16,8007988 <_dtoa_r+0x1614>
 80069d0:	80ffffc3 	ldbu	r3,-1(r16)
 80069d4:	8025883a 	mov	r18,r16
 80069d8:	843fffc4 	addi	r16,r16,-1
 80069dc:	18803fcc 	andi	r2,r3,255
 80069e0:	1080201c 	xori	r2,r2,128
 80069e4:	10bfe004 	addi	r2,r2,-128
 80069e8:	10800e60 	cmpeqi	r2,r2,57
 80069ec:	103ff71e 	bne	r2,zero,80069cc <_dtoa_r+0x658>
 80069f0:	18c00044 	addi	r3,r3,1
 80069f4:	80c00005 	stb	r3,0(r16)
 80069f8:	00015106 	br	8006f40 <_dtoa_r+0xbcc>
 80069fc:	04600034 	movhi	r17,32768
 8006a00:	8c7fffc4 	addi	r17,r17,-1
 8006a04:	9462703a 	and	r17,r18,r17
 8006a08:	00800044 	movi	r2,1
 8006a0c:	8825883a 	mov	r18,r17
 8006a10:	80800015 	stw	r2,0(r16)
 8006a14:	00dffc34 	movhi	r3,32752
 8006a18:	909ffc2c 	andhi	r2,r18,32752
 8006a1c:	10fe751e 	bne	r2,r3,80063f4 <_dtoa_r+0x80>
 8006a20:	d8c01f17 	ldw	r3,124(sp)
 8006a24:	00800434 	movhi	r2,16
 8006a28:	10bfffc4 	addi	r2,r2,-1
 8006a2c:	90a4703a 	and	r18,r18,r2
 8006a30:	0089c3c4 	movi	r2,9999
 8006a34:	18800015 	stw	r2,0(r3)
 8006a38:	9528b03a 	or	r20,r18,r20
 8006a3c:	a000121e 	bne	r20,zero,8006a88 <_dtoa_r+0x714>
 8006a40:	d8802117 	ldw	r2,132(sp)
 8006a44:	07020174 	movhi	fp,2053
 8006a48:	10041526 	beq	r2,zero,8007aa0 <_dtoa_r+0x172c>
 8006a4c:	00820174 	movhi	r2,2053
 8006a50:	e73e7704 	addi	fp,fp,-1572
 8006a54:	10be7904 	addi	r2,r2,-1564
 8006a58:	d8c02117 	ldw	r3,132(sp)
 8006a5c:	18800015 	stw	r2,0(r3)
 8006a60:	003e7506 	br	8006438 <_dtoa_r+0xc4>
 8006a64:	01400434 	movhi	r5,16
 8006a68:	297fffc4 	addi	r5,r5,-1
 8006a6c:	894a703a 	and	r5,r17,r5
 8006a70:	df001217 	ldw	fp,72(sp)
 8006a74:	a009883a 	mov	r4,r20
 8006a78:	294ffc34 	orhi	r5,r5,16368
 8006a7c:	843f0044 	addi	r16,r16,-1023
 8006a80:	d8000915 	stw	zero,36(sp)
 8006a84:	003e9606 	br	80064e0 <_dtoa_r+0x16c>
 8006a88:	d8802117 	ldw	r2,132(sp)
 8006a8c:	07020174 	movhi	fp,2053
 8006a90:	1002141e 	bne	r2,zero,80072e4 <_dtoa_r+0xf70>
 8006a94:	e73e7604 	addi	fp,fp,-1576
 8006a98:	003e6706 	br	8006438 <_dtoa_r+0xc4>
 8006a9c:	b8001115 	stw	zero,68(r23)
 8006aa0:	000b883a 	mov	r5,zero
 8006aa4:	b809883a 	mov	r4,r23
 8006aa8:	80098140 	call	8009814 <_Balloc>
 8006aac:	1039883a 	mov	fp,r2
 8006ab0:	1003ed26 	beq	r2,zero,8007a68 <_dtoa_r+0x16f4>
 8006ab4:	b8801015 	stw	r2,64(r23)
 8006ab8:	00bfffc4 	movi	r2,-1
 8006abc:	d8800415 	stw	r2,16(sp)
 8006ac0:	d8800b15 	stw	r2,44(sp)
 8006ac4:	00800044 	movi	r2,1
 8006ac8:	d8001e15 	stw	zero,120(sp)
 8006acc:	d8800615 	stw	r2,24(sp)
 8006ad0:	d8801317 	ldw	r2,76(sp)
 8006ad4:	10007216 	blt	r2,zero,8006ca0 <_dtoa_r+0x92c>
 8006ad8:	d9000317 	ldw	r4,12(sp)
 8006adc:	20c003c8 	cmpgei	r3,r4,15
 8006ae0:	18006f1e 	bne	r3,zero,8006ca0 <_dtoa_r+0x92c>
 8006ae4:	200690fa 	slli	r3,r4,3
 8006ae8:	00820174 	movhi	r2,2053
 8006aec:	10beb404 	addi	r2,r2,-1328
 8006af0:	10c5883a 	add	r2,r2,r3
 8006af4:	10c00017 	ldw	r3,0(r2)
 8006af8:	14800117 	ldw	r18,4(r2)
 8006afc:	d8801e17 	ldw	r2,120(sp)
 8006b00:	d8c00115 	stw	r3,4(sp)
 8006b04:	1000150e 	bge	r2,zero,8006b5c <_dtoa_r+0x7e8>
 8006b08:	d8800417 	ldw	r2,16(sp)
 8006b0c:	00801316 	blt	zero,r2,8006b5c <_dtoa_r+0x7e8>
 8006b10:	d8800417 	ldw	r2,16(sp)
 8006b14:	1002801e 	bne	r2,zero,8007518 <_dtoa_r+0x11a4>
 8006b18:	d9000117 	ldw	r4,4(sp)
 8006b1c:	000d883a 	mov	r6,zero
 8006b20:	01d00534 	movhi	r7,16404
 8006b24:	900b883a 	mov	r5,r18
 8006b28:	800f7280 	call	800f728 <__muldf3>
 8006b2c:	100d883a 	mov	r6,r2
 8006b30:	180f883a 	mov	r7,r3
 8006b34:	a009883a 	mov	r4,r20
 8006b38:	880b883a 	mov	r5,r17
 8006b3c:	800f6380 	call	800f638 <__ledf2>
 8006b40:	002b883a 	mov	r21,zero
 8006b44:	0021883a 	mov	r16,zero
 8006b48:	00820f16 	blt	zero,r2,8007388 <_dtoa_r+0x1014>
 8006b4c:	d8801e17 	ldw	r2,120(sp)
 8006b50:	e025883a 	mov	r18,fp
 8006b54:	00a2303a 	nor	r17,zero,r2
 8006b58:	00021006 	br	800739c <_dtoa_r+0x1028>
 8006b5c:	dd400117 	ldw	r21,4(sp)
 8006b60:	900f883a 	mov	r7,r18
 8006b64:	a009883a 	mov	r4,r20
 8006b68:	a80d883a 	mov	r6,r21
 8006b6c:	880b883a 	mov	r5,r17
 8006b70:	800ec680 	call	800ec68 <__divdf3>
 8006b74:	180b883a 	mov	r5,r3
 8006b78:	1009883a 	mov	r4,r2
 8006b7c:	80107200 	call	8010720 <__fixdfsi>
 8006b80:	1009883a 	mov	r4,r2
 8006b84:	1027883a 	mov	r19,r2
 8006b88:	80107a00 	call	80107a0 <__floatsidf>
 8006b8c:	a80d883a 	mov	r6,r21
 8006b90:	900f883a 	mov	r7,r18
 8006b94:	1009883a 	mov	r4,r2
 8006b98:	180b883a 	mov	r5,r3
 8006b9c:	800f7280 	call	800f728 <__muldf3>
 8006ba0:	100d883a 	mov	r6,r2
 8006ba4:	a009883a 	mov	r4,r20
 8006ba8:	880b883a 	mov	r5,r17
 8006bac:	180f883a 	mov	r7,r3
 8006bb0:	800fd980 	call	800fd98 <__subdf3>
 8006bb4:	d9800417 	ldw	r6,16(sp)
 8006bb8:	1009883a 	mov	r4,r2
 8006bbc:	98800c04 	addi	r2,r19,48
 8006bc0:	e0800005 	stb	r2,0(fp)
 8006bc4:	30800060 	cmpeqi	r2,r6,1
 8006bc8:	180b883a 	mov	r5,r3
 8006bcc:	e4000044 	addi	r16,fp,1
 8006bd0:	1002a91e 	bne	r2,zero,8007678 <_dtoa_r+0x1304>
 8006bd4:	04400044 	movi	r17,1
 8006bd8:	3027883a 	mov	r19,r6
 8006bdc:	dd800215 	stw	r22,8(sp)
 8006be0:	ddc00415 	stw	r23,16(sp)
 8006be4:	00001c06 	br	8006c58 <_dtoa_r+0x8e4>
 8006be8:	a80d883a 	mov	r6,r21
 8006bec:	900f883a 	mov	r7,r18
 8006bf0:	b809883a 	mov	r4,r23
 8006bf4:	a00b883a 	mov	r5,r20
 8006bf8:	800ec680 	call	800ec68 <__divdf3>
 8006bfc:	180b883a 	mov	r5,r3
 8006c00:	1009883a 	mov	r4,r2
 8006c04:	80107200 	call	8010720 <__fixdfsi>
 8006c08:	1009883a 	mov	r4,r2
 8006c0c:	102d883a 	mov	r22,r2
 8006c10:	80107a00 	call	80107a0 <__floatsidf>
 8006c14:	a80d883a 	mov	r6,r21
 8006c18:	900f883a 	mov	r7,r18
 8006c1c:	1009883a 	mov	r4,r2
 8006c20:	180b883a 	mov	r5,r3
 8006c24:	800f7280 	call	800f728 <__muldf3>
 8006c28:	b809883a 	mov	r4,r23
 8006c2c:	a00b883a 	mov	r5,r20
 8006c30:	100d883a 	mov	r6,r2
 8006c34:	180f883a 	mov	r7,r3
 8006c38:	800fd980 	call	800fd98 <__subdf3>
 8006c3c:	b1000c04 	addi	r4,r22,48
 8006c40:	81000005 	stb	r4,0(r16)
 8006c44:	8c400044 	addi	r17,r17,1
 8006c48:	84000044 	addi	r16,r16,1
 8006c4c:	1009883a 	mov	r4,r2
 8006c50:	180b883a 	mov	r5,r3
 8006c54:	9c428526 	beq	r19,r17,800766c <_dtoa_r+0x12f8>
 8006c58:	000d883a 	mov	r6,zero
 8006c5c:	01d00934 	movhi	r7,16420
 8006c60:	800f7280 	call	800f728 <__muldf3>
 8006c64:	000d883a 	mov	r6,zero
 8006c68:	000f883a 	mov	r7,zero
 8006c6c:	1009883a 	mov	r4,r2
 8006c70:	180b883a 	mov	r5,r3
 8006c74:	102f883a 	mov	r23,r2
 8006c78:	1829883a 	mov	r20,r3
 8006c7c:	800f4c80 	call	800f4c8 <__eqdf2>
 8006c80:	103fd91e 	bne	r2,zero,8006be8 <_dtoa_r+0x874>
 8006c84:	d8800317 	ldw	r2,12(sp)
 8006c88:	dd800217 	ldw	r22,8(sp)
 8006c8c:	ddc00417 	ldw	r23,16(sp)
 8006c90:	10800044 	addi	r2,r2,1
 8006c94:	d8800315 	stw	r2,12(sp)
 8006c98:	8025883a 	mov	r18,r16
 8006c9c:	0000a806 	br	8006f40 <_dtoa_r+0xbcc>
 8006ca0:	d8c00617 	ldw	r3,24(sp)
 8006ca4:	1800ec26 	beq	r3,zero,8007058 <_dtoa_r+0xce4>
 8006ca8:	d8c00117 	ldw	r3,4(sp)
 8006cac:	18c00088 	cmpgei	r3,r3,2
 8006cb0:	1801e926 	beq	r3,zero,8007458 <_dtoa_r+0x10e4>
 8006cb4:	d8800417 	ldw	r2,16(sp)
 8006cb8:	157fffc4 	addi	r21,r2,-1
 8006cbc:	d8800717 	ldw	r2,28(sp)
 8006cc0:	1541c50e 	bge	r2,r21,80073d8 <_dtoa_r+0x1064>
 8006cc4:	d8800717 	ldw	r2,28(sp)
 8006cc8:	dd400715 	stw	r21,28(sp)
 8006ccc:	a885c83a 	sub	r2,r21,r2
 8006cd0:	98a7883a 	add	r19,r19,r2
 8006cd4:	002b883a 	mov	r21,zero
 8006cd8:	d8800417 	ldw	r2,16(sp)
 8006cdc:	10029516 	blt	r2,zero,8007734 <_dtoa_r+0x13c0>
 8006ce0:	d8c00517 	ldw	r3,20(sp)
 8006ce4:	d9000217 	ldw	r4,8(sp)
 8006ce8:	1825883a 	mov	r18,r3
 8006cec:	2089883a 	add	r4,r4,r2
 8006cf0:	10c5883a 	add	r2,r2,r3
 8006cf4:	d9000215 	stw	r4,8(sp)
 8006cf8:	d8800515 	stw	r2,20(sp)
 8006cfc:	01400044 	movi	r5,1
 8006d00:	b809883a 	mov	r4,r23
 8006d04:	8009c600 	call	8009c60 <__i2b>
 8006d08:	1021883a 	mov	r16,r2
 8006d0c:	04800b0e 	bge	zero,r18,8006d3c <_dtoa_r+0x9c8>
 8006d10:	d8c00217 	ldw	r3,8(sp)
 8006d14:	00c0090e 	bge	zero,r3,8006d3c <_dtoa_r+0x9c8>
 8006d18:	9005883a 	mov	r2,r18
 8006d1c:	1c81a616 	blt	r3,r18,80073b8 <_dtoa_r+0x1044>
 8006d20:	d8c00517 	ldw	r3,20(sp)
 8006d24:	90a5c83a 	sub	r18,r18,r2
 8006d28:	1887c83a 	sub	r3,r3,r2
 8006d2c:	d8c00515 	stw	r3,20(sp)
 8006d30:	d8c00217 	ldw	r3,8(sp)
 8006d34:	1885c83a 	sub	r2,r3,r2
 8006d38:	d8800215 	stw	r2,8(sp)
 8006d3c:	d8800717 	ldw	r2,28(sp)
 8006d40:	10001526 	beq	r2,zero,8006d98 <_dtoa_r+0xa24>
 8006d44:	d8800617 	ldw	r2,24(sp)
 8006d48:	1001f626 	beq	r2,zero,8007524 <_dtoa_r+0x11b0>
 8006d4c:	05400f0e 	bge	zero,r21,8006d8c <_dtoa_r+0xa18>
 8006d50:	800b883a 	mov	r5,r16
 8006d54:	a80d883a 	mov	r6,r21
 8006d58:	b809883a 	mov	r4,r23
 8006d5c:	8009ee40 	call	8009ee4 <__pow5mult>
 8006d60:	b00d883a 	mov	r6,r22
 8006d64:	100b883a 	mov	r5,r2
 8006d68:	b809883a 	mov	r4,r23
 8006d6c:	1021883a 	mov	r16,r2
 8006d70:	8009cb40 	call	8009cb4 <__multiply>
 8006d74:	b00b883a 	mov	r5,r22
 8006d78:	b809883a 	mov	r4,r23
 8006d7c:	d8800915 	stw	r2,36(sp)
 8006d80:	80098b80 	call	80098b8 <_Bfree>
 8006d84:	d8800917 	ldw	r2,36(sp)
 8006d88:	102d883a 	mov	r22,r2
 8006d8c:	d8800717 	ldw	r2,28(sp)
 8006d90:	154dc83a 	sub	r6,r2,r21
 8006d94:	1542621e 	bne	r2,r21,8007720 <_dtoa_r+0x13ac>
 8006d98:	01400044 	movi	r5,1
 8006d9c:	b809883a 	mov	r4,r23
 8006da0:	8009c600 	call	8009c60 <__i2b>
 8006da4:	102b883a 	mov	r21,r2
 8006da8:	04c0be16 	blt	zero,r19,80070a4 <_dtoa_r+0xd30>
 8006dac:	d8800117 	ldw	r2,4(sp)
 8006db0:	10800088 	cmpgei	r2,r2,2
 8006db4:	10015226 	beq	r2,zero,8007300 <_dtoa_r+0xf8c>
 8006db8:	0023883a 	mov	r17,zero
 8006dbc:	00800044 	movi	r2,1
 8006dc0:	9800c11e 	bne	r19,zero,80070c8 <_dtoa_r+0xd54>
 8006dc4:	d9400217 	ldw	r5,8(sp)
 8006dc8:	1145883a 	add	r2,r2,r5
 8006dcc:	108007cc 	andi	r2,r2,31
 8006dd0:	1000a526 	beq	r2,zero,8007068 <_dtoa_r+0xcf4>
 8006dd4:	00c00804 	movi	r3,32
 8006dd8:	1887c83a 	sub	r3,r3,r2
 8006ddc:	19000150 	cmplti	r4,r3,5
 8006de0:	2003311e 	bne	r4,zero,8007aa8 <_dtoa_r+0x1734>
 8006de4:	00c00704 	movi	r3,28
 8006de8:	1885c83a 	sub	r2,r3,r2
 8006dec:	d8c00517 	ldw	r3,20(sp)
 8006df0:	90a5883a 	add	r18,r18,r2
 8006df4:	1887883a 	add	r3,r3,r2
 8006df8:	2885883a 	add	r2,r5,r2
 8006dfc:	d8c00515 	stw	r3,20(sp)
 8006e00:	d8800215 	stw	r2,8(sp)
 8006e04:	d8800517 	ldw	r2,20(sp)
 8006e08:	0080050e 	bge	zero,r2,8006e20 <_dtoa_r+0xaac>
 8006e0c:	b00b883a 	mov	r5,r22
 8006e10:	100d883a 	mov	r6,r2
 8006e14:	b809883a 	mov	r4,r23
 8006e18:	8009ffc0 	call	8009ffc <__lshift>
 8006e1c:	102d883a 	mov	r22,r2
 8006e20:	d8800217 	ldw	r2,8(sp)
 8006e24:	0080050e 	bge	zero,r2,8006e3c <_dtoa_r+0xac8>
 8006e28:	a80b883a 	mov	r5,r21
 8006e2c:	100d883a 	mov	r6,r2
 8006e30:	b809883a 	mov	r4,r23
 8006e34:	8009ffc0 	call	8009ffc <__lshift>
 8006e38:	102b883a 	mov	r21,r2
 8006e3c:	d8800817 	ldw	r2,32(sp)
 8006e40:	1001161e 	bne	r2,zero,800729c <_dtoa_r+0xf28>
 8006e44:	d8800417 	ldw	r2,16(sp)
 8006e48:	0081040e 	bge	zero,r2,800725c <_dtoa_r+0xee8>
 8006e4c:	d8800617 	ldw	r2,24(sp)
 8006e50:	1000b01e 	bne	r2,zero,8007114 <_dtoa_r+0xda0>
 8006e54:	d8800317 	ldw	r2,12(sp)
 8006e58:	10800044 	addi	r2,r2,1
 8006e5c:	d8800315 	stw	r2,12(sp)
 8006e60:	dc800417 	ldw	r18,16(sp)
 8006e64:	04400044 	movi	r17,1
 8006e68:	00000706 	br	8006e88 <_dtoa_r+0xb14>
 8006e6c:	b00b883a 	mov	r5,r22
 8006e70:	000f883a 	mov	r7,zero
 8006e74:	01800284 	movi	r6,10
 8006e78:	b809883a 	mov	r4,r23
 8006e7c:	80098dc0 	call	80098dc <__multadd>
 8006e80:	102d883a 	mov	r22,r2
 8006e84:	8c400044 	addi	r17,r17,1
 8006e88:	a80b883a 	mov	r5,r21
 8006e8c:	b009883a 	mov	r4,r22
 8006e90:	80061780 	call	8006178 <quorem>
 8006e94:	10c00c04 	addi	r3,r2,48
 8006e98:	e445883a 	add	r2,fp,r17
 8006e9c:	10ffffc5 	stb	r3,-1(r2)
 8006ea0:	8cbff216 	blt	r17,r18,8006e6c <_dtoa_r+0xaf8>
 8006ea4:	d8800417 	ldw	r2,16(sp)
 8006ea8:	0081510e 	bge	zero,r2,80073f0 <_dtoa_r+0x107c>
 8006eac:	e0a5883a 	add	r18,fp,r2
 8006eb0:	0023883a 	mov	r17,zero
 8006eb4:	b00b883a 	mov	r5,r22
 8006eb8:	01800044 	movi	r6,1
 8006ebc:	b809883a 	mov	r4,r23
 8006ec0:	d8c00115 	stw	r3,4(sp)
 8006ec4:	8009ffc0 	call	8009ffc <__lshift>
 8006ec8:	1009883a 	mov	r4,r2
 8006ecc:	a80b883a 	mov	r5,r21
 8006ed0:	102d883a 	mov	r22,r2
 8006ed4:	800a1840 	call	800a184 <__mcmp>
 8006ed8:	913fffc3 	ldbu	r4,-1(r18)
 8006edc:	00800416 	blt	zero,r2,8006ef0 <_dtoa_r+0xb7c>
 8006ee0:	00014806 	br	8007404 <_dtoa_r+0x1090>
 8006ee4:	e0c15626 	beq	fp,r3,8007440 <_dtoa_r+0x10cc>
 8006ee8:	193fffc3 	ldbu	r4,-1(r3)
 8006eec:	1825883a 	mov	r18,r3
 8006ef0:	20803fcc 	andi	r2,r4,255
 8006ef4:	1080201c 	xori	r2,r2,128
 8006ef8:	10bfe004 	addi	r2,r2,-128
 8006efc:	10800e60 	cmpeqi	r2,r2,57
 8006f00:	90ffffc4 	addi	r3,r18,-1
 8006f04:	103ff71e 	bne	r2,zero,8006ee4 <_dtoa_r+0xb70>
 8006f08:	21000044 	addi	r4,r4,1
 8006f0c:	19000005 	stb	r4,0(r3)
 8006f10:	a80b883a 	mov	r5,r21
 8006f14:	b809883a 	mov	r4,r23
 8006f18:	80098b80 	call	80098b8 <_Bfree>
 8006f1c:	80000826 	beq	r16,zero,8006f40 <_dtoa_r+0xbcc>
 8006f20:	88000426 	beq	r17,zero,8006f34 <_dtoa_r+0xbc0>
 8006f24:	8c000326 	beq	r17,r16,8006f34 <_dtoa_r+0xbc0>
 8006f28:	880b883a 	mov	r5,r17
 8006f2c:	b809883a 	mov	r4,r23
 8006f30:	80098b80 	call	80098b8 <_Bfree>
 8006f34:	800b883a 	mov	r5,r16
 8006f38:	b809883a 	mov	r4,r23
 8006f3c:	80098b80 	call	80098b8 <_Bfree>
 8006f40:	b00b883a 	mov	r5,r22
 8006f44:	b809883a 	mov	r4,r23
 8006f48:	80098b80 	call	80098b8 <_Bfree>
 8006f4c:	d8801f17 	ldw	r2,124(sp)
 8006f50:	d8c00317 	ldw	r3,12(sp)
 8006f54:	90000005 	stb	zero,0(r18)
 8006f58:	10c00015 	stw	r3,0(r2)
 8006f5c:	d8802117 	ldw	r2,132(sp)
 8006f60:	103d3526 	beq	r2,zero,8006438 <_dtoa_r+0xc4>
 8006f64:	14800015 	stw	r18,0(r2)
 8006f68:	003d3306 	br	8006438 <_dtoa_r+0xc4>
 8006f6c:	e0bfffc4 	addi	r2,fp,-1
 8006f70:	d8000815 	stw	zero,32(sp)
 8006f74:	10002616 	blt	r2,zero,8007010 <_dtoa_r+0xc9c>
 8006f78:	d8000515 	stw	zero,20(sp)
 8006f7c:	d8800217 	ldw	r2,8(sp)
 8006f80:	d8c00117 	ldw	r3,4(sp)
 8006f84:	dcc00315 	stw	r19,12(sp)
 8006f88:	14c5883a 	add	r2,r2,r19
 8006f8c:	d8800215 	stw	r2,8(sp)
 8006f90:	d8000715 	stw	zero,28(sp)
 8006f94:	188002a8 	cmpgeui	r2,r3,10
 8006f98:	103d9d26 	beq	r2,zero,8006610 <_dtoa_r+0x29c>
 8006f9c:	00800044 	movi	r2,1
 8006fa0:	d8800615 	stw	r2,24(sp)
 8006fa4:	00bfffc4 	movi	r2,-1
 8006fa8:	04000044 	movi	r16,1
 8006fac:	d8000115 	stw	zero,4(sp)
 8006fb0:	d8800415 	stw	r2,16(sp)
 8006fb4:	d8001e15 	stw	zero,120(sp)
 8006fb8:	d8800417 	ldw	r2,16(sp)
 8006fbc:	b8001115 	stw	zero,68(r23)
 8006fc0:	000b883a 	mov	r5,zero
 8006fc4:	d8800b15 	stw	r2,44(sp)
 8006fc8:	003dae06 	br	8006684 <_dtoa_r+0x310>
 8006fcc:	188000e0 	cmpeqi	r2,r3,3
 8006fd0:	d8000615 	stw	zero,24(sp)
 8006fd4:	103eb126 	beq	r2,zero,8006a9c <_dtoa_r+0x728>
 8006fd8:	d8801e17 	ldw	r2,120(sp)
 8006fdc:	d8c00317 	ldw	r3,12(sp)
 8006fe0:	10c5883a 	add	r2,r2,r3
 8006fe4:	d8800b15 	stw	r2,44(sp)
 8006fe8:	10800044 	addi	r2,r2,1
 8006fec:	d8800415 	stw	r2,16(sp)
 8006ff0:	100d883a 	mov	r6,r2
 8006ff4:	00bd9816 	blt	zero,r2,8006658 <_dtoa_r+0x2e4>
 8006ff8:	01800044 	movi	r6,1
 8006ffc:	003d9606 	br	8006658 <_dtoa_r+0x2e4>
 8007000:	00800044 	movi	r2,1
 8007004:	d8800815 	stw	r2,32(sp)
 8007008:	e0bfffc4 	addi	r2,fp,-1
 800700c:	103d740e 	bge	r2,zero,80065e0 <_dtoa_r+0x26c>
 8007010:	00800044 	movi	r2,1
 8007014:	1705c83a 	sub	r2,r2,fp
 8007018:	d8800515 	stw	r2,20(sp)
 800701c:	d8000215 	stw	zero,8(sp)
 8007020:	003d7006 	br	80065e4 <_dtoa_r+0x270>
 8007024:	9809883a 	mov	r4,r19
 8007028:	80107a00 	call	80107a0 <__floatsidf>
 800702c:	900d883a 	mov	r6,r18
 8007030:	a80f883a 	mov	r7,r21
 8007034:	1009883a 	mov	r4,r2
 8007038:	180b883a 	mov	r5,r3
 800703c:	800f4c80 	call	800f4c8 <__eqdf2>
 8007040:	103d5426 	beq	r2,zero,8006594 <_dtoa_r+0x220>
 8007044:	9cffffc4 	addi	r19,r19,-1
 8007048:	003d5206 	br	8006594 <_dtoa_r+0x220>
 800704c:	07020174 	movhi	fp,2053
 8007050:	e73e6d04 	addi	fp,fp,-1612
 8007054:	003cf806 	br	8006438 <_dtoa_r+0xc4>
 8007058:	dd400717 	ldw	r21,28(sp)
 800705c:	dc800517 	ldw	r18,20(sp)
 8007060:	0021883a 	mov	r16,zero
 8007064:	003f2906 	br	8006d0c <_dtoa_r+0x998>
 8007068:	00800704 	movi	r2,28
 800706c:	d8c00517 	ldw	r3,20(sp)
 8007070:	90a5883a 	add	r18,r18,r2
 8007074:	1887883a 	add	r3,r3,r2
 8007078:	d8c00515 	stw	r3,20(sp)
 800707c:	d8c00217 	ldw	r3,8(sp)
 8007080:	1885883a 	add	r2,r3,r2
 8007084:	d8800215 	stw	r2,8(sp)
 8007088:	003f5e06 	br	8006e04 <_dtoa_r+0xa90>
 800708c:	01000804 	movi	r4,32
 8007090:	2089c83a 	sub	r4,r4,r2
 8007094:	a108983a 	sll	r4,r20,r4
 8007098:	003d0a06 	br	80064c4 <_dtoa_r+0x150>
 800709c:	04000044 	movi	r16,1
 80070a0:	003d6006 	br	8006624 <_dtoa_r+0x2b0>
 80070a4:	100b883a 	mov	r5,r2
 80070a8:	980d883a 	mov	r6,r19
 80070ac:	b809883a 	mov	r4,r23
 80070b0:	8009ee40 	call	8009ee4 <__pow5mult>
 80070b4:	d8c00117 	ldw	r3,4(sp)
 80070b8:	102b883a 	mov	r21,r2
 80070bc:	18c00090 	cmplti	r3,r3,2
 80070c0:	18014b1e 	bne	r3,zero,80075f0 <_dtoa_r+0x127c>
 80070c4:	0023883a 	mov	r17,zero
 80070c8:	a8800417 	ldw	r2,16(r21)
 80070cc:	10800104 	addi	r2,r2,4
 80070d0:	100490ba 	slli	r2,r2,2
 80070d4:	a885883a 	add	r2,r21,r2
 80070d8:	11000017 	ldw	r4,0(r2)
 80070dc:	8009b4c0 	call	8009b4c <__hi0bits>
 80070e0:	00c00804 	movi	r3,32
 80070e4:	1885c83a 	sub	r2,r3,r2
 80070e8:	003f3606 	br	8006dc4 <_dtoa_r+0xa50>
 80070ec:	800b883a 	mov	r5,r16
 80070f0:	000f883a 	mov	r7,zero
 80070f4:	01800284 	movi	r6,10
 80070f8:	b809883a 	mov	r4,r23
 80070fc:	80098dc0 	call	80098dc <__multadd>
 8007100:	1021883a 	mov	r16,r2
 8007104:	d8800b17 	ldw	r2,44(sp)
 8007108:	00824d0e 	bge	zero,r2,8007a40 <_dtoa_r+0x16cc>
 800710c:	dcc00315 	stw	r19,12(sp)
 8007110:	d8800415 	stw	r2,16(sp)
 8007114:	0480aa16 	blt	zero,r18,80073c0 <_dtoa_r+0x104c>
 8007118:	8801701e 	bne	r17,zero,80076dc <_dtoa_r+0x1368>
 800711c:	8027883a 	mov	r19,r16
 8007120:	d9000417 	ldw	r4,16(sp)
 8007124:	e0bfffc4 	addi	r2,fp,-1
 8007128:	a0c0004c 	andi	r3,r20,1
 800712c:	1105883a 	add	r2,r2,r4
 8007130:	d8800415 	stw	r2,16(sp)
 8007134:	d8800117 	ldw	r2,4(sp)
 8007138:	d8c00715 	stw	r3,28(sp)
 800713c:	e029883a 	mov	r20,fp
 8007140:	1884b03a 	or	r2,r3,r2
 8007144:	d8800615 	stw	r2,24(sp)
 8007148:	df000815 	stw	fp,32(sp)
 800714c:	00002906 	br	80071f4 <_dtoa_r+0xe80>
 8007150:	b009883a 	mov	r4,r22
 8007154:	800a1840 	call	800a184 <__mcmp>
 8007158:	900b883a 	mov	r5,r18
 800715c:	b809883a 	mov	r4,r23
 8007160:	d8800215 	stw	r2,8(sp)
 8007164:	80098b80 	call	80098b8 <_Bfree>
 8007168:	d8800217 	ldw	r2,8(sp)
 800716c:	1000021e 	bne	r2,zero,8007178 <_dtoa_r+0xe04>
 8007170:	d8c00617 	ldw	r3,24(sp)
 8007174:	18022326 	beq	r3,zero,8007a04 <_dtoa_r+0x1690>
 8007178:	a4800044 	addi	r18,r20,1
 800717c:	88012216 	blt	r17,zero,8007608 <_dtoa_r+0x1294>
 8007180:	d8c00117 	ldw	r3,4(sp)
 8007184:	1c62b03a 	or	r17,r3,r17
 8007188:	d8c00717 	ldw	r3,28(sp)
 800718c:	1c62b03a 	or	r17,r3,r17
 8007190:	88011d26 	beq	r17,zero,8007608 <_dtoa_r+0x1294>
 8007194:	00816b16 	blt	zero,r2,8007744 <_dtoa_r+0x13d0>
 8007198:	d8800417 	ldw	r2,16(sp)
 800719c:	a7000005 	stb	fp,0(r20)
 80071a0:	15017126 	beq	r2,r20,8007768 <_dtoa_r+0x13f4>
 80071a4:	b00b883a 	mov	r5,r22
 80071a8:	000f883a 	mov	r7,zero
 80071ac:	01800284 	movi	r6,10
 80071b0:	b809883a 	mov	r4,r23
 80071b4:	80098dc0 	call	80098dc <__multadd>
 80071b8:	102d883a 	mov	r22,r2
 80071bc:	800b883a 	mov	r5,r16
 80071c0:	000f883a 	mov	r7,zero
 80071c4:	01800284 	movi	r6,10
 80071c8:	b809883a 	mov	r4,r23
 80071cc:	84c01f26 	beq	r16,r19,800724c <_dtoa_r+0xed8>
 80071d0:	80098dc0 	call	80098dc <__multadd>
 80071d4:	980b883a 	mov	r5,r19
 80071d8:	000f883a 	mov	r7,zero
 80071dc:	01800284 	movi	r6,10
 80071e0:	b809883a 	mov	r4,r23
 80071e4:	1021883a 	mov	r16,r2
 80071e8:	80098dc0 	call	80098dc <__multadd>
 80071ec:	1027883a 	mov	r19,r2
 80071f0:	9029883a 	mov	r20,r18
 80071f4:	a80b883a 	mov	r5,r21
 80071f8:	b009883a 	mov	r4,r22
 80071fc:	80061780 	call	8006178 <quorem>
 8007200:	800b883a 	mov	r5,r16
 8007204:	b009883a 	mov	r4,r22
 8007208:	1039883a 	mov	fp,r2
 800720c:	d8800515 	stw	r2,20(sp)
 8007210:	800a1840 	call	800a184 <__mcmp>
 8007214:	a80b883a 	mov	r5,r21
 8007218:	980d883a 	mov	r6,r19
 800721c:	b809883a 	mov	r4,r23
 8007220:	1023883a 	mov	r17,r2
 8007224:	800a1dc0 	call	800a1dc <__mdiff>
 8007228:	1025883a 	mov	r18,r2
 800722c:	10800317 	ldw	r2,12(r2)
 8007230:	e7000c04 	addi	fp,fp,48
 8007234:	900b883a 	mov	r5,r18
 8007238:	103fc526 	beq	r2,zero,8007150 <_dtoa_r+0xddc>
 800723c:	b809883a 	mov	r4,r23
 8007240:	80098b80 	call	80098b8 <_Bfree>
 8007244:	00800044 	movi	r2,1
 8007248:	003fcb06 	br	8007178 <_dtoa_r+0xe04>
 800724c:	80098dc0 	call	80098dc <__multadd>
 8007250:	1021883a 	mov	r16,r2
 8007254:	1027883a 	mov	r19,r2
 8007258:	003fe506 	br	80071f0 <_dtoa_r+0xe7c>
 800725c:	d8800117 	ldw	r2,4(sp)
 8007260:	108000d0 	cmplti	r2,r2,3
 8007264:	10003c26 	beq	r2,zero,8007358 <_dtoa_r+0xfe4>
 8007268:	d8800617 	ldw	r2,24(sp)
 800726c:	103fa91e 	bne	r2,zero,8007114 <_dtoa_r+0xda0>
 8007270:	a80b883a 	mov	r5,r21
 8007274:	b009883a 	mov	r4,r22
 8007278:	80061780 	call	8006178 <quorem>
 800727c:	10c00c04 	addi	r3,r2,48
 8007280:	d8800317 	ldw	r2,12(sp)
 8007284:	e4800044 	addi	r18,fp,1
 8007288:	e0c00005 	stb	r3,0(fp)
 800728c:	10800044 	addi	r2,r2,1
 8007290:	d8800315 	stw	r2,12(sp)
 8007294:	0023883a 	mov	r17,zero
 8007298:	003f0606 	br	8006eb4 <_dtoa_r+0xb40>
 800729c:	a80b883a 	mov	r5,r21
 80072a0:	b009883a 	mov	r4,r22
 80072a4:	800a1840 	call	800a184 <__mcmp>
 80072a8:	103ee60e 	bge	r2,zero,8006e44 <_dtoa_r+0xad0>
 80072ac:	b00b883a 	mov	r5,r22
 80072b0:	000f883a 	mov	r7,zero
 80072b4:	01800284 	movi	r6,10
 80072b8:	b809883a 	mov	r4,r23
 80072bc:	80098dc0 	call	80098dc <__multadd>
 80072c0:	d8c00317 	ldw	r3,12(sp)
 80072c4:	102d883a 	mov	r22,r2
 80072c8:	d8800617 	ldw	r2,24(sp)
 80072cc:	1cffffc4 	addi	r19,r3,-1
 80072d0:	103f861e 	bne	r2,zero,80070ec <_dtoa_r+0xd78>
 80072d4:	d8800b17 	ldw	r2,44(sp)
 80072d8:	0081d40e 	bge	zero,r2,8007a2c <_dtoa_r+0x16b8>
 80072dc:	d8800415 	stw	r2,16(sp)
 80072e0:	003edf06 	br	8006e60 <_dtoa_r+0xaec>
 80072e4:	00820174 	movhi	r2,2053
 80072e8:	e73e7604 	addi	fp,fp,-1576
 80072ec:	10be76c4 	addi	r2,r2,-1573
 80072f0:	003dd906 	br	8006a58 <_dtoa_r+0x6e4>
 80072f4:	00800044 	movi	r2,1
 80072f8:	d8800615 	stw	r2,24(sp)
 80072fc:	003f3606 	br	8006fd8 <_dtoa_r+0xc64>
 8007300:	a03ead1e 	bne	r20,zero,8006db8 <_dtoa_r+0xa44>
 8007304:	00800434 	movhi	r2,16
 8007308:	10bfffc4 	addi	r2,r2,-1
 800730c:	8884703a 	and	r2,r17,r2
 8007310:	103ea91e 	bne	r2,zero,8006db8 <_dtoa_r+0xa44>
 8007314:	8c5ffc2c 	andhi	r17,r17,32752
 8007318:	883ea726 	beq	r17,zero,8006db8 <_dtoa_r+0xa44>
 800731c:	d8800517 	ldw	r2,20(sp)
 8007320:	04400044 	movi	r17,1
 8007324:	10800044 	addi	r2,r2,1
 8007328:	d8800515 	stw	r2,20(sp)
 800732c:	d8800217 	ldw	r2,8(sp)
 8007330:	10800044 	addi	r2,r2,1
 8007334:	d8800215 	stw	r2,8(sp)
 8007338:	003ea006 	br	8006dbc <_dtoa_r+0xa48>
 800733c:	00800044 	movi	r2,1
 8007340:	d8800415 	stw	r2,16(sp)
 8007344:	d8801e15 	stw	r2,120(sp)
 8007348:	003f1b06 	br	8006fb8 <_dtoa_r+0xc44>
 800734c:	d8800b17 	ldw	r2,44(sp)
 8007350:	dcc00315 	stw	r19,12(sp)
 8007354:	d8800415 	stw	r2,16(sp)
 8007358:	d8800417 	ldw	r2,16(sp)
 800735c:	103dfb1e 	bne	r2,zero,8006b4c <_dtoa_r+0x7d8>
 8007360:	a80b883a 	mov	r5,r21
 8007364:	b809883a 	mov	r4,r23
 8007368:	000f883a 	mov	r7,zero
 800736c:	01800144 	movi	r6,5
 8007370:	80098dc0 	call	80098dc <__multadd>
 8007374:	100b883a 	mov	r5,r2
 8007378:	b009883a 	mov	r4,r22
 800737c:	102b883a 	mov	r21,r2
 8007380:	800a1840 	call	800a184 <__mcmp>
 8007384:	00bdf10e 	bge	zero,r2,8006b4c <_dtoa_r+0x7d8>
 8007388:	00800c44 	movi	r2,49
 800738c:	e0800005 	stb	r2,0(fp)
 8007390:	d8800317 	ldw	r2,12(sp)
 8007394:	e4800044 	addi	r18,fp,1
 8007398:	14400044 	addi	r17,r2,1
 800739c:	a80b883a 	mov	r5,r21
 80073a0:	b809883a 	mov	r4,r23
 80073a4:	80098b80 	call	80098b8 <_Bfree>
 80073a8:	88800044 	addi	r2,r17,1
 80073ac:	d8800315 	stw	r2,12(sp)
 80073b0:	803ee01e 	bne	r16,zero,8006f34 <_dtoa_r+0xbc0>
 80073b4:	003ee206 	br	8006f40 <_dtoa_r+0xbcc>
 80073b8:	1805883a 	mov	r2,r3
 80073bc:	003e5806 	br	8006d20 <_dtoa_r+0x9ac>
 80073c0:	800b883a 	mov	r5,r16
 80073c4:	900d883a 	mov	r6,r18
 80073c8:	b809883a 	mov	r4,r23
 80073cc:	8009ffc0 	call	8009ffc <__lshift>
 80073d0:	1021883a 	mov	r16,r2
 80073d4:	003f5006 	br	8007118 <_dtoa_r+0xda4>
 80073d8:	156bc83a 	sub	r21,r2,r21
 80073dc:	003e3e06 	br	8006cd8 <_dtoa_r+0x964>
 80073e0:	dd000a15 	stw	r20,40(sp)
 80073e4:	dc400c15 	stw	r17,48(sp)
 80073e8:	04000084 	movi	r16,2
 80073ec:	003cc906 	br	8006714 <_dtoa_r+0x3a0>
 80073f0:	00800044 	movi	r2,1
 80073f4:	003ead06 	br	8006eac <_dtoa_r+0xb38>
 80073f8:	00800044 	movi	r2,1
 80073fc:	d8800615 	stw	r2,24(sp)
 8007400:	003c9006 	br	8006644 <_dtoa_r+0x2d0>
 8007404:	1000031e 	bne	r2,zero,8007414 <_dtoa_r+0x10a0>
 8007408:	d8c00117 	ldw	r3,4(sp)
 800740c:	18c0004c 	andi	r3,r3,1
 8007410:	183eb71e 	bne	r3,zero,8006ef0 <_dtoa_r+0xb7c>
 8007414:	2005883a 	mov	r2,r4
 8007418:	00000206 	br	8007424 <_dtoa_r+0x10b0>
 800741c:	90bfff83 	ldbu	r2,-2(r18)
 8007420:	1825883a 	mov	r18,r3
 8007424:	10803fcc 	andi	r2,r2,255
 8007428:	1080201c 	xori	r2,r2,128
 800742c:	10bfe004 	addi	r2,r2,-128
 8007430:	10800c18 	cmpnei	r2,r2,48
 8007434:	90ffffc4 	addi	r3,r18,-1
 8007438:	103ff826 	beq	r2,zero,800741c <_dtoa_r+0x10a8>
 800743c:	003eb406 	br	8006f10 <_dtoa_r+0xb9c>
 8007440:	00800c44 	movi	r2,49
 8007444:	e0800005 	stb	r2,0(fp)
 8007448:	d8800317 	ldw	r2,12(sp)
 800744c:	10800044 	addi	r2,r2,1
 8007450:	d8800315 	stw	r2,12(sp)
 8007454:	003eae06 	br	8006f10 <_dtoa_r+0xb9c>
 8007458:	d8c00917 	ldw	r3,36(sp)
 800745c:	18011826 	beq	r3,zero,80078c0 <_dtoa_r+0x154c>
 8007460:	d8c00517 	ldw	r3,20(sp)
 8007464:	d9000217 	ldw	r4,8(sp)
 8007468:	10810cc4 	addi	r2,r2,1075
 800746c:	dd400717 	ldw	r21,28(sp)
 8007470:	2089883a 	add	r4,r4,r2
 8007474:	1885883a 	add	r2,r3,r2
 8007478:	1825883a 	mov	r18,r3
 800747c:	d9000215 	stw	r4,8(sp)
 8007480:	d8800515 	stw	r2,20(sp)
 8007484:	003e1d06 	br	8006cfc <_dtoa_r+0x988>
 8007488:	8009883a 	mov	r4,r16
 800748c:	80107a00 	call	80107a0 <__floatsidf>
 8007490:	d9c00a17 	ldw	r7,40(sp)
 8007494:	900d883a 	mov	r6,r18
 8007498:	1009883a 	mov	r4,r2
 800749c:	180b883a 	mov	r5,r3
 80074a0:	800f7280 	call	800f728 <__muldf3>
 80074a4:	000d883a 	mov	r6,zero
 80074a8:	01d00734 	movhi	r7,16412
 80074ac:	1009883a 	mov	r4,r2
 80074b0:	180b883a 	mov	r5,r3
 80074b4:	800e2f00 	call	800e2f0 <__adddf3>
 80074b8:	d8800c15 	stw	r2,48(sp)
 80074bc:	00bf3034 	movhi	r2,64704
 80074c0:	1885883a 	add	r2,r3,r2
 80074c4:	d8800d15 	stw	r2,52(sp)
 80074c8:	d9400a17 	ldw	r5,40(sp)
 80074cc:	9009883a 	mov	r4,r18
 80074d0:	000d883a 	mov	r6,zero
 80074d4:	01d00534 	movhi	r7,16404
 80074d8:	800fd980 	call	800fd98 <__subdf3>
 80074dc:	dd400d17 	ldw	r21,52(sp)
 80074e0:	d9800c17 	ldw	r6,48(sp)
 80074e4:	1009883a 	mov	r4,r2
 80074e8:	a80f883a 	mov	r7,r21
 80074ec:	180b883a 	mov	r5,r3
 80074f0:	1025883a 	mov	r18,r2
 80074f4:	1821883a 	mov	r16,r3
 80074f8:	800f5480 	call	800f548 <__gedf2>
 80074fc:	00812d16 	blt	zero,r2,80079b4 <_dtoa_r+0x1640>
 8007500:	d9800c17 	ldw	r6,48(sp)
 8007504:	a9e0003c 	xorhi	r7,r21,32768
 8007508:	9009883a 	mov	r4,r18
 800750c:	800b883a 	mov	r5,r16
 8007510:	800f6380 	call	800f638 <__ledf2>
 8007514:	103d6e0e 	bge	r2,zero,8006ad0 <_dtoa_r+0x75c>
 8007518:	002b883a 	mov	r21,zero
 800751c:	0021883a 	mov	r16,zero
 8007520:	003d8a06 	br	8006b4c <_dtoa_r+0x7d8>
 8007524:	d9800717 	ldw	r6,28(sp)
 8007528:	b00b883a 	mov	r5,r22
 800752c:	b809883a 	mov	r4,r23
 8007530:	8009ee40 	call	8009ee4 <__pow5mult>
 8007534:	102d883a 	mov	r22,r2
 8007538:	003e1706 	br	8006d98 <_dtoa_r+0xa24>
 800753c:	d8800317 	ldw	r2,12(sp)
 8007540:	10010d26 	beq	r2,zero,8007978 <_dtoa_r+0x1604>
 8007544:	00abc83a 	sub	r21,zero,r2
 8007548:	a88003cc 	andi	r2,r21,15
 800754c:	100690fa 	slli	r3,r2,3
 8007550:	00820174 	movhi	r2,2053
 8007554:	10beb404 	addi	r2,r2,-1328
 8007558:	10c5883a 	add	r2,r2,r3
 800755c:	11800017 	ldw	r6,0(r2)
 8007560:	11c00117 	ldw	r7,4(r2)
 8007564:	a009883a 	mov	r4,r20
 8007568:	880b883a 	mov	r5,r17
 800756c:	a82bd13a 	srai	r21,r21,4
 8007570:	800f7280 	call	800f728 <__muldf3>
 8007574:	d8c00a15 	stw	r3,40(sp)
 8007578:	1025883a 	mov	r18,r2
 800757c:	a8013826 	beq	r21,zero,8007a60 <_dtoa_r+0x16ec>
 8007580:	02020174 	movhi	r8,2053
 8007584:	04000084 	movi	r16,2
 8007588:	423eaa04 	addi	r8,r8,-1368
 800758c:	180b883a 	mov	r5,r3
 8007590:	dc400c15 	stw	r17,48(sp)
 8007594:	1009883a 	mov	r4,r2
 8007598:	8023883a 	mov	r17,r16
 800759c:	0007883a 	mov	r3,zero
 80075a0:	4021883a 	mov	r16,r8
 80075a4:	a980004c 	andi	r6,r21,1
 80075a8:	30000726 	beq	r6,zero,80075c8 <_dtoa_r+0x1254>
 80075ac:	81800017 	ldw	r6,0(r16)
 80075b0:	81c00117 	ldw	r7,4(r16)
 80075b4:	8c400044 	addi	r17,r17,1
 80075b8:	800f7280 	call	800f728 <__muldf3>
 80075bc:	180b883a 	mov	r5,r3
 80075c0:	1009883a 	mov	r4,r2
 80075c4:	00c00044 	movi	r3,1
 80075c8:	a82bd07a 	srai	r21,r21,1
 80075cc:	84000204 	addi	r16,r16,8
 80075d0:	a83ff41e 	bne	r21,zero,80075a4 <_dtoa_r+0x1230>
 80075d4:	18c03fcc 	andi	r3,r3,255
 80075d8:	8821883a 	mov	r16,r17
 80075dc:	dc400c17 	ldw	r17,48(sp)
 80075e0:	183c6526 	beq	r3,zero,8006778 <_dtoa_r+0x404>
 80075e4:	2025883a 	mov	r18,r4
 80075e8:	d9400a15 	stw	r5,40(sp)
 80075ec:	003c6206 	br	8006778 <_dtoa_r+0x404>
 80075f0:	a03eb41e 	bne	r20,zero,80070c4 <_dtoa_r+0xd50>
 80075f4:	00800434 	movhi	r2,16
 80075f8:	10bfffc4 	addi	r2,r2,-1
 80075fc:	8884703a 	and	r2,r17,r2
 8007600:	103f4426 	beq	r2,zero,8007314 <_dtoa_r+0xfa0>
 8007604:	003eaf06 	br	80070c4 <_dtoa_r+0xd50>
 8007608:	d9000317 	ldw	r4,12(sp)
 800760c:	e007883a 	mov	r3,fp
 8007610:	df000817 	ldw	fp,32(sp)
 8007614:	21000044 	addi	r4,r4,1
 8007618:	d9000315 	stw	r4,12(sp)
 800761c:	00800f0e 	bge	zero,r2,800765c <_dtoa_r+0x12e8>
 8007620:	b00b883a 	mov	r5,r22
 8007624:	01800044 	movi	r6,1
 8007628:	b809883a 	mov	r4,r23
 800762c:	d8c00115 	stw	r3,4(sp)
 8007630:	8009ffc0 	call	8009ffc <__lshift>
 8007634:	a80b883a 	mov	r5,r21
 8007638:	1009883a 	mov	r4,r2
 800763c:	102d883a 	mov	r22,r2
 8007640:	800a1840 	call	800a184 <__mcmp>
 8007644:	d8c00117 	ldw	r3,4(sp)
 8007648:	0080e40e 	bge	zero,r2,80079dc <_dtoa_r+0x1668>
 800764c:	18c00e60 	cmpeqi	r3,r3,57
 8007650:	1800d21e 	bne	r3,zero,800799c <_dtoa_r+0x1628>
 8007654:	d8800517 	ldw	r2,20(sp)
 8007658:	10c00c44 	addi	r3,r2,49
 800765c:	8023883a 	mov	r17,r16
 8007660:	a0c00005 	stb	r3,0(r20)
 8007664:	9821883a 	mov	r16,r19
 8007668:	003e2906 	br	8006f10 <_dtoa_r+0xb9c>
 800766c:	b027883a 	mov	r19,r22
 8007670:	ddc00417 	ldw	r23,16(sp)
 8007674:	dd800217 	ldw	r22,8(sp)
 8007678:	200d883a 	mov	r6,r4
 800767c:	280f883a 	mov	r7,r5
 8007680:	800e2f00 	call	800e2f0 <__adddf3>
 8007684:	dd400117 	ldw	r21,4(sp)
 8007688:	180b883a 	mov	r5,r3
 800768c:	900f883a 	mov	r7,r18
 8007690:	a80d883a 	mov	r6,r21
 8007694:	1009883a 	mov	r4,r2
 8007698:	1823883a 	mov	r17,r3
 800769c:	1029883a 	mov	r20,r2
 80076a0:	800f5480 	call	800f548 <__gedf2>
 80076a4:	d8c00317 	ldw	r3,12(sp)
 80076a8:	18c00044 	addi	r3,r3,1
 80076ac:	d8c00315 	stw	r3,12(sp)
 80076b0:	00bcc716 	blt	zero,r2,80069d0 <_dtoa_r+0x65c>
 80076b4:	a80d883a 	mov	r6,r21
 80076b8:	900f883a 	mov	r7,r18
 80076bc:	a009883a 	mov	r4,r20
 80076c0:	880b883a 	mov	r5,r17
 80076c4:	800f4c80 	call	800f4c8 <__eqdf2>
 80076c8:	1000021e 	bne	r2,zero,80076d4 <_dtoa_r+0x1360>
 80076cc:	9cc0004c 	andi	r19,r19,1
 80076d0:	983cbf1e 	bne	r19,zero,80069d0 <_dtoa_r+0x65c>
 80076d4:	8025883a 	mov	r18,r16
 80076d8:	003e1906 	br	8006f40 <_dtoa_r+0xbcc>
 80076dc:	81400117 	ldw	r5,4(r16)
 80076e0:	b809883a 	mov	r4,r23
 80076e4:	80098140 	call	8009814 <_Balloc>
 80076e8:	1023883a 	mov	r17,r2
 80076ec:	1000e526 	beq	r2,zero,8007a84 <_dtoa_r+0x1710>
 80076f0:	81800417 	ldw	r6,16(r16)
 80076f4:	81400304 	addi	r5,r16,12
 80076f8:	11000304 	addi	r4,r2,12
 80076fc:	31800084 	addi	r6,r6,2
 8007700:	300c90ba 	slli	r6,r6,2
 8007704:	8002ea40 	call	8002ea4 <memcpy>
 8007708:	01800044 	movi	r6,1
 800770c:	880b883a 	mov	r5,r17
 8007710:	b809883a 	mov	r4,r23
 8007714:	8009ffc0 	call	8009ffc <__lshift>
 8007718:	1027883a 	mov	r19,r2
 800771c:	003e8006 	br	8007120 <_dtoa_r+0xdac>
 8007720:	b00b883a 	mov	r5,r22
 8007724:	b809883a 	mov	r4,r23
 8007728:	8009ee40 	call	8009ee4 <__pow5mult>
 800772c:	102d883a 	mov	r22,r2
 8007730:	003d9906 	br	8006d98 <_dtoa_r+0xa24>
 8007734:	d8800517 	ldw	r2,20(sp)
 8007738:	d8c00417 	ldw	r3,16(sp)
 800773c:	10e5c83a 	sub	r18,r2,r3
 8007740:	003d6e06 	br	8006cfc <_dtoa_r+0x988>
 8007744:	d9000317 	ldw	r4,12(sp)
 8007748:	e007883a 	mov	r3,fp
 800774c:	18800e58 	cmpnei	r2,r3,57
 8007750:	21000044 	addi	r4,r4,1
 8007754:	d9000315 	stw	r4,12(sp)
 8007758:	df000817 	ldw	fp,32(sp)
 800775c:	10008f26 	beq	r2,zero,800799c <_dtoa_r+0x1628>
 8007760:	18c00044 	addi	r3,r3,1
 8007764:	003fbd06 	br	800765c <_dtoa_r+0x12e8>
 8007768:	d8800317 	ldw	r2,12(sp)
 800776c:	e007883a 	mov	r3,fp
 8007770:	8023883a 	mov	r17,r16
 8007774:	10800044 	addi	r2,r2,1
 8007778:	df000817 	ldw	fp,32(sp)
 800777c:	d8800315 	stw	r2,12(sp)
 8007780:	9821883a 	mov	r16,r19
 8007784:	003dcb06 	br	8006eb4 <_dtoa_r+0xb40>
 8007788:	d9000c17 	ldw	r4,48(sp)
 800778c:	d9400d17 	ldw	r5,52(sp)
 8007790:	600d883a 	mov	r6,r12
 8007794:	680f883a 	mov	r7,r13
 8007798:	dac00a15 	stw	r11,40(sp)
 800779c:	800f7280 	call	800f728 <__muldf3>
 80077a0:	dac00a17 	ldw	r11,40(sp)
 80077a4:	d9400e17 	ldw	r5,56(sp)
 80077a8:	d8800a15 	stw	r2,40(sp)
 80077ac:	e2c00005 	stb	r11,0(fp)
 80077b0:	29000058 	cmpnei	r4,r5,1
 80077b4:	d8c00c15 	stw	r3,48(sp)
 80077b8:	e145883a 	add	r2,fp,r5
 80077bc:	20002126 	beq	r4,zero,8007844 <_dtoa_r+0x14d0>
 80077c0:	dc400e15 	stw	r17,56(sp)
 80077c4:	dcc00d15 	stw	r19,52(sp)
 80077c8:	8023883a 	mov	r17,r16
 80077cc:	a809883a 	mov	r4,r21
 80077d0:	900b883a 	mov	r5,r18
 80077d4:	1021883a 	mov	r16,r2
 80077d8:	000d883a 	mov	r6,zero
 80077dc:	01d00934 	movhi	r7,16420
 80077e0:	800f7280 	call	800f728 <__muldf3>
 80077e4:	180b883a 	mov	r5,r3
 80077e8:	1009883a 	mov	r4,r2
 80077ec:	182b883a 	mov	r21,r3
 80077f0:	1027883a 	mov	r19,r2
 80077f4:	80107200 	call	8010720 <__fixdfsi>
 80077f8:	1009883a 	mov	r4,r2
 80077fc:	1025883a 	mov	r18,r2
 8007800:	80107a00 	call	80107a0 <__floatsidf>
 8007804:	9809883a 	mov	r4,r19
 8007808:	a80b883a 	mov	r5,r21
 800780c:	100d883a 	mov	r6,r2
 8007810:	180f883a 	mov	r7,r3
 8007814:	8c400044 	addi	r17,r17,1
 8007818:	94800c04 	addi	r18,r18,48
 800781c:	800fd980 	call	800fd98 <__subdf3>
 8007820:	8cbfffc5 	stb	r18,-1(r17)
 8007824:	1009883a 	mov	r4,r2
 8007828:	180b883a 	mov	r5,r3
 800782c:	847fea1e 	bne	r16,r17,80077d8 <_dtoa_r+0x1464>
 8007830:	8821883a 	mov	r16,r17
 8007834:	dcc00d17 	ldw	r19,52(sp)
 8007838:	dc400e17 	ldw	r17,56(sp)
 800783c:	102b883a 	mov	r21,r2
 8007840:	1825883a 	mov	r18,r3
 8007844:	d9000a17 	ldw	r4,40(sp)
 8007848:	d9400c17 	ldw	r5,48(sp)
 800784c:	000d883a 	mov	r6,zero
 8007850:	01cff834 	movhi	r7,16352
 8007854:	800e2f00 	call	800e2f0 <__adddf3>
 8007858:	a80d883a 	mov	r6,r21
 800785c:	900f883a 	mov	r7,r18
 8007860:	1009883a 	mov	r4,r2
 8007864:	180b883a 	mov	r5,r3
 8007868:	800f6380 	call	800f638 <__ledf2>
 800786c:	103c5316 	blt	r2,zero,80069bc <_dtoa_r+0x648>
 8007870:	d9800a17 	ldw	r6,40(sp)
 8007874:	d9c00c17 	ldw	r7,48(sp)
 8007878:	0009883a 	mov	r4,zero
 800787c:	014ff834 	movhi	r5,16352
 8007880:	800fd980 	call	800fd98 <__subdf3>
 8007884:	a80d883a 	mov	r6,r21
 8007888:	900f883a 	mov	r7,r18
 800788c:	1009883a 	mov	r4,r2
 8007890:	180b883a 	mov	r5,r3
 8007894:	800f5480 	call	800f548 <__gedf2>
 8007898:	00bc8d0e 	bge	zero,r2,8006ad0 <_dtoa_r+0x75c>
 800789c:	80bfffc7 	ldb	r2,-1(r16)
 80078a0:	8025883a 	mov	r18,r16
 80078a4:	843fffc4 	addi	r16,r16,-1
 80078a8:	10800c20 	cmpeqi	r2,r2,48
 80078ac:	103ffb1e 	bne	r2,zero,800789c <_dtoa_r+0x1528>
 80078b0:	d8801117 	ldw	r2,68(sp)
 80078b4:	10800044 	addi	r2,r2,1
 80078b8:	d8800315 	stw	r2,12(sp)
 80078bc:	003da006 	br	8006f40 <_dtoa_r+0xbcc>
 80078c0:	d8c01217 	ldw	r3,72(sp)
 80078c4:	00800d84 	movi	r2,54
 80078c8:	d9000517 	ldw	r4,20(sp)
 80078cc:	10c5c83a 	sub	r2,r2,r3
 80078d0:	d8c00217 	ldw	r3,8(sp)
 80078d4:	dd400717 	ldw	r21,28(sp)
 80078d8:	2025883a 	mov	r18,r4
 80078dc:	1887883a 	add	r3,r3,r2
 80078e0:	2085883a 	add	r2,r4,r2
 80078e4:	d8c00215 	stw	r3,8(sp)
 80078e8:	d8800515 	stw	r2,20(sp)
 80078ec:	003d0306 	br	8006cfc <_dtoa_r+0x988>
 80078f0:	d8800417 	ldw	r2,16(sp)
 80078f4:	103ee426 	beq	r2,zero,8007488 <_dtoa_r+0x1114>
 80078f8:	d8800b17 	ldw	r2,44(sp)
 80078fc:	00bc740e 	bge	zero,r2,8006ad0 <_dtoa_r+0x75c>
 8007900:	a80b883a 	mov	r5,r21
 8007904:	9009883a 	mov	r4,r18
 8007908:	000d883a 	mov	r6,zero
 800790c:	01d00934 	movhi	r7,16420
 8007910:	800f7280 	call	800f728 <__muldf3>
 8007914:	81000044 	addi	r4,r16,1
 8007918:	1025883a 	mov	r18,r2
 800791c:	182b883a 	mov	r21,r3
 8007920:	d8c00a15 	stw	r3,40(sp)
 8007924:	80107a00 	call	80107a0 <__floatsidf>
 8007928:	900d883a 	mov	r6,r18
 800792c:	a80f883a 	mov	r7,r21
 8007930:	1009883a 	mov	r4,r2
 8007934:	180b883a 	mov	r5,r3
 8007938:	800f7280 	call	800f728 <__muldf3>
 800793c:	1009883a 	mov	r4,r2
 8007940:	000d883a 	mov	r6,zero
 8007944:	01d00734 	movhi	r7,16412
 8007948:	180b883a 	mov	r5,r3
 800794c:	800e2f00 	call	800e2f0 <__adddf3>
 8007950:	d9000317 	ldw	r4,12(sp)
 8007954:	d8800c15 	stw	r2,48(sp)
 8007958:	00bf3034 	movhi	r2,64704
 800795c:	1887883a 	add	r3,r3,r2
 8007960:	d8800b17 	ldw	r2,44(sp)
 8007964:	213fffc4 	addi	r4,r4,-1
 8007968:	d9001115 	stw	r4,68(sp)
 800796c:	d8c00d15 	stw	r3,52(sp)
 8007970:	d8800e15 	stw	r2,56(sp)
 8007974:	003b9f06 	br	80067f4 <_dtoa_r+0x480>
 8007978:	a025883a 	mov	r18,r20
 800797c:	dc400a15 	stw	r17,40(sp)
 8007980:	04000084 	movi	r16,2
 8007984:	003b7c06 	br	8006778 <_dtoa_r+0x404>
 8007988:	d8800317 	ldw	r2,12(sp)
 800798c:	00c00c44 	movi	r3,49
 8007990:	10800044 	addi	r2,r2,1
 8007994:	d8800315 	stw	r2,12(sp)
 8007998:	003c1606 	br	80069f4 <_dtoa_r+0x680>
 800799c:	00800e44 	movi	r2,57
 80079a0:	8023883a 	mov	r17,r16
 80079a4:	a0800005 	stb	r2,0(r20)
 80079a8:	9821883a 	mov	r16,r19
 80079ac:	01000e44 	movi	r4,57
 80079b0:	003d4f06 	br	8006ef0 <_dtoa_r+0xb7c>
 80079b4:	002b883a 	mov	r21,zero
 80079b8:	0021883a 	mov	r16,zero
 80079bc:	003e7206 	br	8007388 <_dtoa_r+0x1014>
 80079c0:	dd800d17 	ldw	r22,52(sp)
 80079c4:	ddc00e17 	ldw	r23,56(sp)
 80079c8:	d8801117 	ldw	r2,68(sp)
 80079cc:	8025883a 	mov	r18,r16
 80079d0:	10800044 	addi	r2,r2,1
 80079d4:	d8800315 	stw	r2,12(sp)
 80079d8:	003d5906 	br	8006f40 <_dtoa_r+0xbcc>
 80079dc:	103f1f1e 	bne	r2,zero,800765c <_dtoa_r+0x12e8>
 80079e0:	1880004c 	andi	r2,r3,1
 80079e4:	103f191e 	bne	r2,zero,800764c <_dtoa_r+0x12d8>
 80079e8:	003f1c06 	br	800765c <_dtoa_r+0x12e8>
 80079ec:	dcc00f17 	ldw	r19,60(sp)
 80079f0:	dd800d17 	ldw	r22,52(sp)
 80079f4:	ddc00e17 	ldw	r23,56(sp)
 80079f8:	dc400c17 	ldw	r17,48(sp)
 80079fc:	dd000a17 	ldw	r20,40(sp)
 8007a00:	003c3306 	br	8006ad0 <_dtoa_r+0x75c>
 8007a04:	d9000317 	ldw	r4,12(sp)
 8007a08:	e007883a 	mov	r3,fp
 8007a0c:	18800e60 	cmpeqi	r2,r3,57
 8007a10:	21000044 	addi	r4,r4,1
 8007a14:	d9000315 	stw	r4,12(sp)
 8007a18:	df000817 	ldw	fp,32(sp)
 8007a1c:	a4800044 	addi	r18,r20,1
 8007a20:	103fde1e 	bne	r2,zero,800799c <_dtoa_r+0x1628>
 8007a24:	047f0b16 	blt	zero,r17,8007654 <_dtoa_r+0x12e0>
 8007a28:	003f0c06 	br	800765c <_dtoa_r+0x12e8>
 8007a2c:	d8800117 	ldw	r2,4(sp)
 8007a30:	108000c8 	cmpgei	r2,r2,3
 8007a34:	103e451e 	bne	r2,zero,800734c <_dtoa_r+0xfd8>
 8007a38:	dcc00315 	stw	r19,12(sp)
 8007a3c:	003e0c06 	br	8007270 <_dtoa_r+0xefc>
 8007a40:	d8800117 	ldw	r2,4(sp)
 8007a44:	108000c8 	cmpgei	r2,r2,3
 8007a48:	103e401e 	bne	r2,zero,800734c <_dtoa_r+0xfd8>
 8007a4c:	d8800b17 	ldw	r2,44(sp)
 8007a50:	dcc00315 	stw	r19,12(sp)
 8007a54:	d8800415 	stw	r2,16(sp)
 8007a58:	04bdaf0e 	bge	zero,r18,8007118 <_dtoa_r+0xda4>
 8007a5c:	003e5806 	br	80073c0 <_dtoa_r+0x104c>
 8007a60:	04000084 	movi	r16,2
 8007a64:	003b4406 	br	8006778 <_dtoa_r+0x404>
 8007a68:	01c20174 	movhi	r7,2053
 8007a6c:	01020174 	movhi	r4,2053
 8007a70:	39fe7a04 	addi	r7,r7,-1560
 8007a74:	000d883a 	mov	r6,zero
 8007a78:	01406a84 	movi	r5,426
 8007a7c:	213e7f04 	addi	r4,r4,-1540
 8007a80:	800c8800 	call	800c880 <__assert_func>
 8007a84:	01c20174 	movhi	r7,2053
 8007a88:	01020174 	movhi	r4,2053
 8007a8c:	39fe7a04 	addi	r7,r7,-1560
 8007a90:	000d883a 	mov	r6,zero
 8007a94:	0140ba84 	movi	r5,746
 8007a98:	213e7f04 	addi	r4,r4,-1540
 8007a9c:	800c8800 	call	800c880 <__assert_func>
 8007aa0:	e73e7704 	addi	fp,fp,-1572
 8007aa4:	003a6406 	br	8006438 <_dtoa_r+0xc4>
 8007aa8:	18c00120 	cmpeqi	r3,r3,4
 8007aac:	183cd51e 	bne	r3,zero,8006e04 <_dtoa_r+0xa90>
 8007ab0:	00c00f04 	movi	r3,60
 8007ab4:	1885c83a 	sub	r2,r3,r2
 8007ab8:	003d6c06 	br	800706c <_dtoa_r+0xcf8>
 8007abc:	000b883a 	mov	r5,zero
 8007ac0:	003af006 	br	8006684 <_dtoa_r+0x310>

08007ac4 <__sflush_r>:
 8007ac4:	2880030b 	ldhu	r2,12(r5)
 8007ac8:	defffb04 	addi	sp,sp,-20
 8007acc:	dcc00315 	stw	r19,12(sp)
 8007ad0:	dc000015 	stw	r16,0(sp)
 8007ad4:	dfc00415 	stw	ra,16(sp)
 8007ad8:	dc800215 	stw	r18,8(sp)
 8007adc:	dc400115 	stw	r17,4(sp)
 8007ae0:	10c0020c 	andi	r3,r2,8
 8007ae4:	2821883a 	mov	r16,r5
 8007ae8:	2027883a 	mov	r19,r4
 8007aec:	18003f1e 	bne	r3,zero,8007bec <__sflush_r+0x128>
 8007af0:	28c00117 	ldw	r3,4(r5)
 8007af4:	10820014 	ori	r2,r2,2048
 8007af8:	2880030d 	sth	r2,12(r5)
 8007afc:	00c0550e 	bge	zero,r3,8007c54 <__sflush_r+0x190>
 8007b00:	82000a17 	ldw	r8,40(r16)
 8007b04:	40003126 	beq	r8,zero,8007bcc <__sflush_r+0x108>
 8007b08:	9c400017 	ldw	r17,0(r19)
 8007b0c:	1104000c 	andi	r4,r2,4096
 8007b10:	98000015 	stw	zero,0(r19)
 8007b14:	81400717 	ldw	r5,28(r16)
 8007b18:	1007883a 	mov	r3,r2
 8007b1c:	2000521e 	bne	r4,zero,8007c68 <__sflush_r+0x1a4>
 8007b20:	01c00044 	movi	r7,1
 8007b24:	000d883a 	mov	r6,zero
 8007b28:	9809883a 	mov	r4,r19
 8007b2c:	403ee83a 	callr	r8
 8007b30:	10ffffd8 	cmpnei	r3,r2,-1
 8007b34:	18005826 	beq	r3,zero,8007c98 <__sflush_r+0x1d4>
 8007b38:	80c0030b 	ldhu	r3,12(r16)
 8007b3c:	82000a17 	ldw	r8,40(r16)
 8007b40:	81400717 	ldw	r5,28(r16)
 8007b44:	18c0010c 	andi	r3,r3,4
 8007b48:	18000626 	beq	r3,zero,8007b64 <__sflush_r+0xa0>
 8007b4c:	81000117 	ldw	r4,4(r16)
 8007b50:	80c00c17 	ldw	r3,48(r16)
 8007b54:	1105c83a 	sub	r2,r2,r4
 8007b58:	18000226 	beq	r3,zero,8007b64 <__sflush_r+0xa0>
 8007b5c:	80c00f17 	ldw	r3,60(r16)
 8007b60:	10c5c83a 	sub	r2,r2,r3
 8007b64:	100d883a 	mov	r6,r2
 8007b68:	000f883a 	mov	r7,zero
 8007b6c:	9809883a 	mov	r4,r19
 8007b70:	403ee83a 	callr	r8
 8007b74:	10ffffd8 	cmpnei	r3,r2,-1
 8007b78:	18003d1e 	bne	r3,zero,8007c70 <__sflush_r+0x1ac>
 8007b7c:	99000017 	ldw	r4,0(r19)
 8007b80:	80c0030b 	ldhu	r3,12(r16)
 8007b84:	20004e26 	beq	r4,zero,8007cc0 <__sflush_r+0x1fc>
 8007b88:	21400760 	cmpeqi	r5,r4,29
 8007b8c:	2800021e 	bne	r5,zero,8007b98 <__sflush_r+0xd4>
 8007b90:	210005a0 	cmpeqi	r4,r4,22
 8007b94:	20002c26 	beq	r4,zero,8007c48 <__sflush_r+0x184>
 8007b98:	80800417 	ldw	r2,16(r16)
 8007b9c:	18fdffcc 	andi	r3,r3,63487
 8007ba0:	80c0030d 	sth	r3,12(r16)
 8007ba4:	80000115 	stw	zero,4(r16)
 8007ba8:	80800015 	stw	r2,0(r16)
 8007bac:	81400c17 	ldw	r5,48(r16)
 8007bb0:	9c400015 	stw	r17,0(r19)
 8007bb4:	28000526 	beq	r5,zero,8007bcc <__sflush_r+0x108>
 8007bb8:	80801004 	addi	r2,r16,64
 8007bbc:	28800226 	beq	r5,r2,8007bc8 <__sflush_r+0x104>
 8007bc0:	9809883a 	mov	r4,r19
 8007bc4:	80082380 	call	8008238 <_free_r>
 8007bc8:	80000c15 	stw	zero,48(r16)
 8007bcc:	0005883a 	mov	r2,zero
 8007bd0:	dfc00417 	ldw	ra,16(sp)
 8007bd4:	dcc00317 	ldw	r19,12(sp)
 8007bd8:	dc800217 	ldw	r18,8(sp)
 8007bdc:	dc400117 	ldw	r17,4(sp)
 8007be0:	dc000017 	ldw	r16,0(sp)
 8007be4:	dec00504 	addi	sp,sp,20
 8007be8:	f800283a 	ret
 8007bec:	2c800417 	ldw	r18,16(r5)
 8007bf0:	903ff626 	beq	r18,zero,8007bcc <__sflush_r+0x108>
 8007bf4:	2c400017 	ldw	r17,0(r5)
 8007bf8:	108000cc 	andi	r2,r2,3
 8007bfc:	2c800015 	stw	r18,0(r5)
 8007c00:	8ca3c83a 	sub	r17,r17,r18
 8007c04:	1000161e 	bne	r2,zero,8007c60 <__sflush_r+0x19c>
 8007c08:	28800517 	ldw	r2,20(r5)
 8007c0c:	80800215 	stw	r2,8(r16)
 8007c10:	04400316 	blt	zero,r17,8007c20 <__sflush_r+0x15c>
 8007c14:	003fed06 	br	8007bcc <__sflush_r+0x108>
 8007c18:	90a5883a 	add	r18,r18,r2
 8007c1c:	047feb0e 	bge	zero,r17,8007bcc <__sflush_r+0x108>
 8007c20:	80800917 	ldw	r2,36(r16)
 8007c24:	81400717 	ldw	r5,28(r16)
 8007c28:	880f883a 	mov	r7,r17
 8007c2c:	900d883a 	mov	r6,r18
 8007c30:	9809883a 	mov	r4,r19
 8007c34:	103ee83a 	callr	r2
 8007c38:	88a3c83a 	sub	r17,r17,r2
 8007c3c:	00bff616 	blt	zero,r2,8007c18 <__sflush_r+0x154>
 8007c40:	80c0030b 	ldhu	r3,12(r16)
 8007c44:	00bfffc4 	movi	r2,-1
 8007c48:	18c01014 	ori	r3,r3,64
 8007c4c:	80c0030d 	sth	r3,12(r16)
 8007c50:	003fdf06 	br	8007bd0 <__sflush_r+0x10c>
 8007c54:	28c00f17 	ldw	r3,60(r5)
 8007c58:	00ffa916 	blt	zero,r3,8007b00 <__sflush_r+0x3c>
 8007c5c:	003fdb06 	br	8007bcc <__sflush_r+0x108>
 8007c60:	0005883a 	mov	r2,zero
 8007c64:	003fe906 	br	8007c0c <__sflush_r+0x148>
 8007c68:	80801417 	ldw	r2,80(r16)
 8007c6c:	003fb506 	br	8007b44 <__sflush_r+0x80>
 8007c70:	80c0030b 	ldhu	r3,12(r16)
 8007c74:	81000417 	ldw	r4,16(r16)
 8007c78:	80000115 	stw	zero,4(r16)
 8007c7c:	197dffcc 	andi	r5,r3,63487
 8007c80:	8140030d 	sth	r5,12(r16)
 8007c84:	81000015 	stw	r4,0(r16)
 8007c88:	18c4000c 	andi	r3,r3,4096
 8007c8c:	183fc726 	beq	r3,zero,8007bac <__sflush_r+0xe8>
 8007c90:	80801415 	stw	r2,80(r16)
 8007c94:	003fc506 	br	8007bac <__sflush_r+0xe8>
 8007c98:	98c00017 	ldw	r3,0(r19)
 8007c9c:	183fa626 	beq	r3,zero,8007b38 <__sflush_r+0x74>
 8007ca0:	19000760 	cmpeqi	r4,r3,29
 8007ca4:	20000e1e 	bne	r4,zero,8007ce0 <__sflush_r+0x21c>
 8007ca8:	18c00598 	cmpnei	r3,r3,22
 8007cac:	18000c26 	beq	r3,zero,8007ce0 <__sflush_r+0x21c>
 8007cb0:	80c0030b 	ldhu	r3,12(r16)
 8007cb4:	18c01014 	ori	r3,r3,64
 8007cb8:	80c0030d 	sth	r3,12(r16)
 8007cbc:	003fc406 	br	8007bd0 <__sflush_r+0x10c>
 8007cc0:	81000417 	ldw	r4,16(r16)
 8007cc4:	197dffcc 	andi	r5,r3,63487
 8007cc8:	8140030d 	sth	r5,12(r16)
 8007ccc:	80000115 	stw	zero,4(r16)
 8007cd0:	81000015 	stw	r4,0(r16)
 8007cd4:	18c4000c 	andi	r3,r3,4096
 8007cd8:	183fb426 	beq	r3,zero,8007bac <__sflush_r+0xe8>
 8007cdc:	003fec06 	br	8007c90 <__sflush_r+0x1cc>
 8007ce0:	9c400015 	stw	r17,0(r19)
 8007ce4:	0005883a 	mov	r2,zero
 8007ce8:	003fb906 	br	8007bd0 <__sflush_r+0x10c>

08007cec <_fflush_r>:
 8007cec:	defffd04 	addi	sp,sp,-12
 8007cf0:	dc000115 	stw	r16,4(sp)
 8007cf4:	dfc00215 	stw	ra,8(sp)
 8007cf8:	2021883a 	mov	r16,r4
 8007cfc:	20000226 	beq	r4,zero,8007d08 <_fflush_r+0x1c>
 8007d00:	20800e17 	ldw	r2,56(r4)
 8007d04:	10000726 	beq	r2,zero,8007d24 <_fflush_r+0x38>
 8007d08:	2880030f 	ldh	r2,12(r5)
 8007d0c:	10000a1e 	bne	r2,zero,8007d38 <_fflush_r+0x4c>
 8007d10:	0005883a 	mov	r2,zero
 8007d14:	dfc00217 	ldw	ra,8(sp)
 8007d18:	dc000117 	ldw	r16,4(sp)
 8007d1c:	dec00304 	addi	sp,sp,12
 8007d20:	f800283a 	ret
 8007d24:	d9400015 	stw	r5,0(sp)
 8007d28:	80080d40 	call	80080d4 <__sinit>
 8007d2c:	d9400017 	ldw	r5,0(sp)
 8007d30:	2880030f 	ldh	r2,12(r5)
 8007d34:	103ff626 	beq	r2,zero,8007d10 <_fflush_r+0x24>
 8007d38:	8009883a 	mov	r4,r16
 8007d3c:	dfc00217 	ldw	ra,8(sp)
 8007d40:	dc000117 	ldw	r16,4(sp)
 8007d44:	dec00304 	addi	sp,sp,12
 8007d48:	8007ac41 	jmpi	8007ac4 <__sflush_r>

08007d4c <fflush>:
 8007d4c:	200b883a 	mov	r5,r4
 8007d50:	20000326 	beq	r4,zero,8007d60 <fflush+0x14>
 8007d54:	00820174 	movhi	r2,2053
 8007d58:	1118e017 	ldw	r4,25472(r2)
 8007d5c:	8007cec1 	jmpi	8007cec <_fflush_r>
 8007d60:	00820174 	movhi	r2,2053
 8007d64:	1118df17 	ldw	r4,25468(r2)
 8007d68:	01420034 	movhi	r5,2048
 8007d6c:	295f3b04 	addi	r5,r5,31980
 8007d70:	8008a881 	jmpi	8008a88 <_fwalk_reent>

08007d74 <fileno>:
 8007d74:	00820174 	movhi	r2,2053
 8007d78:	1098e017 	ldw	r2,25472(r2)
 8007d7c:	defffe04 	addi	sp,sp,-8
 8007d80:	dc000015 	stw	r16,0(sp)
 8007d84:	dfc00115 	stw	ra,4(sp)
 8007d88:	2021883a 	mov	r16,r4
 8007d8c:	10000226 	beq	r2,zero,8007d98 <fileno+0x24>
 8007d90:	10c00e17 	ldw	r3,56(r2)
 8007d94:	18000726 	beq	r3,zero,8007db4 <fileno+0x40>
 8007d98:	8080030f 	ldh	r2,12(r16)
 8007d9c:	10000826 	beq	r2,zero,8007dc0 <fileno+0x4c>
 8007da0:	8080038f 	ldh	r2,14(r16)
 8007da4:	dfc00117 	ldw	ra,4(sp)
 8007da8:	dc000017 	ldw	r16,0(sp)
 8007dac:	dec00204 	addi	sp,sp,8
 8007db0:	f800283a 	ret
 8007db4:	1009883a 	mov	r4,r2
 8007db8:	80080d40 	call	80080d4 <__sinit>
 8007dbc:	003ff606 	br	8007d98 <fileno+0x24>
 8007dc0:	00820174 	movhi	r2,2053
 8007dc4:	10d8e017 	ldw	r3,25472(r2)
 8007dc8:	01000244 	movi	r4,9
 8007dcc:	00bfffc4 	movi	r2,-1
 8007dd0:	19000015 	stw	r4,0(r3)
 8007dd4:	003ff306 	br	8007da4 <fileno+0x30>

08007dd8 <__fp_lock>:
 8007dd8:	0005883a 	mov	r2,zero
 8007ddc:	f800283a 	ret

08007de0 <_cleanup_r>:
 8007de0:	01420074 	movhi	r5,2049
 8007de4:	29726b04 	addi	r5,r5,-13908
 8007de8:	8008a881 	jmpi	8008a88 <_fwalk_reent>

08007dec <__sinit.part.0>:
 8007dec:	00c20034 	movhi	r3,2048
 8007df0:	20800117 	ldw	r2,4(r4)
 8007df4:	18df7804 	addi	r3,r3,32224
 8007df8:	20c00f15 	stw	r3,60(r4)
 8007dfc:	2140bb04 	addi	r5,r4,748
 8007e00:	00c000c4 	movi	r3,3
 8007e04:	20c0b915 	stw	r3,740(r4)
 8007e08:	2140ba15 	stw	r5,744(r4)
 8007e0c:	2000b815 	stw	zero,736(r4)
 8007e10:	10001705 	stb	zero,92(r2)
 8007e14:	10001745 	stb	zero,93(r2)
 8007e18:	10001785 	stb	zero,94(r2)
 8007e1c:	100017c5 	stb	zero,95(r2)
 8007e20:	10001805 	stb	zero,96(r2)
 8007e24:	10001845 	stb	zero,97(r2)
 8007e28:	10001885 	stb	zero,98(r2)
 8007e2c:	100018c5 	stb	zero,99(r2)
 8007e30:	00c00104 	movi	r3,4
 8007e34:	10c00315 	stw	r3,12(r2)
 8007e38:	02020074 	movhi	r8,2049
 8007e3c:	20c00217 	ldw	r3,8(r4)
 8007e40:	01c20074 	movhi	r7,2049
 8007e44:	01820074 	movhi	r6,2049
 8007e48:	01420074 	movhi	r5,2049
 8007e4c:	422c2704 	addi	r8,r8,-20324
 8007e50:	39ec3e04 	addi	r7,r7,-20232
 8007e54:	31ac5e04 	addi	r6,r6,-20104
 8007e58:	296c7504 	addi	r5,r5,-20012
 8007e5c:	02400074 	movhi	r9,1
 8007e60:	10001915 	stw	zero,100(r2)
 8007e64:	10000015 	stw	zero,0(r2)
 8007e68:	10000115 	stw	zero,4(r2)
 8007e6c:	10000215 	stw	zero,8(r2)
 8007e70:	10000415 	stw	zero,16(r2)
 8007e74:	10000515 	stw	zero,20(r2)
 8007e78:	10000615 	stw	zero,24(r2)
 8007e7c:	10800715 	stw	r2,28(r2)
 8007e80:	12000815 	stw	r8,32(r2)
 8007e84:	11c00915 	stw	r7,36(r2)
 8007e88:	11800a15 	stw	r6,40(r2)
 8007e8c:	11400b15 	stw	r5,44(r2)
 8007e90:	4a400284 	addi	r9,r9,10
 8007e94:	1a400315 	stw	r9,12(r3)
 8007e98:	18001915 	stw	zero,100(r3)
 8007e9c:	18000015 	stw	zero,0(r3)
 8007ea0:	18000115 	stw	zero,4(r3)
 8007ea4:	18000215 	stw	zero,8(r3)
 8007ea8:	18000415 	stw	zero,16(r3)
 8007eac:	18001705 	stb	zero,92(r3)
 8007eb0:	18001745 	stb	zero,93(r3)
 8007eb4:	18001785 	stb	zero,94(r3)
 8007eb8:	180017c5 	stb	zero,95(r3)
 8007ebc:	18001805 	stb	zero,96(r3)
 8007ec0:	18001845 	stb	zero,97(r3)
 8007ec4:	18001885 	stb	zero,98(r3)
 8007ec8:	180018c5 	stb	zero,99(r3)
 8007ecc:	20800317 	ldw	r2,12(r4)
 8007ed0:	024000b4 	movhi	r9,2
 8007ed4:	18000515 	stw	zero,20(r3)
 8007ed8:	18000615 	stw	zero,24(r3)
 8007edc:	18c00715 	stw	r3,28(r3)
 8007ee0:	1a000815 	stw	r8,32(r3)
 8007ee4:	19c00915 	stw	r7,36(r3)
 8007ee8:	19800a15 	stw	r6,40(r3)
 8007eec:	19400b15 	stw	r5,44(r3)
 8007ef0:	4a400484 	addi	r9,r9,18
 8007ef4:	10001915 	stw	zero,100(r2)
 8007ef8:	10000015 	stw	zero,0(r2)
 8007efc:	10000115 	stw	zero,4(r2)
 8007f00:	10000215 	stw	zero,8(r2)
 8007f04:	12400315 	stw	r9,12(r2)
 8007f08:	10000415 	stw	zero,16(r2)
 8007f0c:	10000515 	stw	zero,20(r2)
 8007f10:	10000615 	stw	zero,24(r2)
 8007f14:	10001705 	stb	zero,92(r2)
 8007f18:	10001745 	stb	zero,93(r2)
 8007f1c:	10001785 	stb	zero,94(r2)
 8007f20:	100017c5 	stb	zero,95(r2)
 8007f24:	10001805 	stb	zero,96(r2)
 8007f28:	10001845 	stb	zero,97(r2)
 8007f2c:	10001885 	stb	zero,98(r2)
 8007f30:	100018c5 	stb	zero,99(r2)
 8007f34:	10800715 	stw	r2,28(r2)
 8007f38:	12000815 	stw	r8,32(r2)
 8007f3c:	11c00915 	stw	r7,36(r2)
 8007f40:	11800a15 	stw	r6,40(r2)
 8007f44:	11400b15 	stw	r5,44(r2)
 8007f48:	00800044 	movi	r2,1
 8007f4c:	20800e15 	stw	r2,56(r4)
 8007f50:	f800283a 	ret

08007f54 <__fp_unlock>:
 8007f54:	0005883a 	mov	r2,zero
 8007f58:	f800283a 	ret

08007f5c <__sfmoreglue>:
 8007f5c:	defffc04 	addi	sp,sp,-16
 8007f60:	dc400115 	stw	r17,4(sp)
 8007f64:	2c7fffc4 	addi	r17,r5,-1
 8007f68:	8c401a24 	muli	r17,r17,104
 8007f6c:	dc800215 	stw	r18,8(sp)
 8007f70:	2825883a 	mov	r18,r5
 8007f74:	89401d04 	addi	r5,r17,116
 8007f78:	dc000015 	stw	r16,0(sp)
 8007f7c:	dfc00315 	stw	ra,12(sp)
 8007f80:	8008e340 	call	8008e34 <_malloc_r>
 8007f84:	1021883a 	mov	r16,r2
 8007f88:	10000726 	beq	r2,zero,8007fa8 <__sfmoreglue+0x4c>
 8007f8c:	11000304 	addi	r4,r2,12
 8007f90:	10000015 	stw	zero,0(r2)
 8007f94:	14800115 	stw	r18,4(r2)
 8007f98:	11000215 	stw	r4,8(r2)
 8007f9c:	89801a04 	addi	r6,r17,104
 8007fa0:	000b883a 	mov	r5,zero
 8007fa4:	8002fa40 	call	8002fa4 <memset>
 8007fa8:	8005883a 	mov	r2,r16
 8007fac:	dfc00317 	ldw	ra,12(sp)
 8007fb0:	dc800217 	ldw	r18,8(sp)
 8007fb4:	dc400117 	ldw	r17,4(sp)
 8007fb8:	dc000017 	ldw	r16,0(sp)
 8007fbc:	dec00404 	addi	sp,sp,16
 8007fc0:	f800283a 	ret

08007fc4 <__sfp>:
 8007fc4:	defffd04 	addi	sp,sp,-12
 8007fc8:	00820174 	movhi	r2,2053
 8007fcc:	dc000015 	stw	r16,0(sp)
 8007fd0:	1418df17 	ldw	r16,25468(r2)
 8007fd4:	dc400115 	stw	r17,4(sp)
 8007fd8:	dfc00215 	stw	ra,8(sp)
 8007fdc:	80800e17 	ldw	r2,56(r16)
 8007fe0:	2023883a 	mov	r17,r4
 8007fe4:	10002b26 	beq	r2,zero,8008094 <__sfp+0xd0>
 8007fe8:	8400b804 	addi	r16,r16,736
 8007fec:	80c00117 	ldw	r3,4(r16)
 8007ff0:	80800217 	ldw	r2,8(r16)
 8007ff4:	18ffffc4 	addi	r3,r3,-1
 8007ff8:	1800030e 	bge	r3,zero,8008008 <__sfp+0x44>
 8007ffc:	00002106 	br	8008084 <__sfp+0xc0>
 8008000:	10801a04 	addi	r2,r2,104
 8008004:	30001f26 	beq	r6,zero,8008084 <__sfp+0xc0>
 8008008:	1140030f 	ldh	r5,12(r2)
 800800c:	18ffffc4 	addi	r3,r3,-1
 8008010:	19bfffd8 	cmpnei	r6,r3,-1
 8008014:	283ffa1e 	bne	r5,zero,8008000 <__sfp+0x3c>
 8008018:	00fffff4 	movhi	r3,65535
 800801c:	18c00044 	addi	r3,r3,1
 8008020:	10001915 	stw	zero,100(r2)
 8008024:	10000015 	stw	zero,0(r2)
 8008028:	10000115 	stw	zero,4(r2)
 800802c:	10000215 	stw	zero,8(r2)
 8008030:	10c00315 	stw	r3,12(r2)
 8008034:	10000415 	stw	zero,16(r2)
 8008038:	10000515 	stw	zero,20(r2)
 800803c:	10000615 	stw	zero,24(r2)
 8008040:	10001705 	stb	zero,92(r2)
 8008044:	10001745 	stb	zero,93(r2)
 8008048:	10001785 	stb	zero,94(r2)
 800804c:	100017c5 	stb	zero,95(r2)
 8008050:	10001805 	stb	zero,96(r2)
 8008054:	10001845 	stb	zero,97(r2)
 8008058:	10001885 	stb	zero,98(r2)
 800805c:	100018c5 	stb	zero,99(r2)
 8008060:	10000c15 	stw	zero,48(r2)
 8008064:	10000d15 	stw	zero,52(r2)
 8008068:	10001115 	stw	zero,68(r2)
 800806c:	10001215 	stw	zero,72(r2)
 8008070:	dfc00217 	ldw	ra,8(sp)
 8008074:	dc400117 	ldw	r17,4(sp)
 8008078:	dc000017 	ldw	r16,0(sp)
 800807c:	dec00304 	addi	sp,sp,12
 8008080:	f800283a 	ret
 8008084:	80800017 	ldw	r2,0(r16)
 8008088:	10000526 	beq	r2,zero,80080a0 <__sfp+0xdc>
 800808c:	1021883a 	mov	r16,r2
 8008090:	003fd606 	br	8007fec <__sfp+0x28>
 8008094:	8009883a 	mov	r4,r16
 8008098:	8007dec0 	call	8007dec <__sinit.part.0>
 800809c:	003fd206 	br	8007fe8 <__sfp+0x24>
 80080a0:	01400104 	movi	r5,4
 80080a4:	8809883a 	mov	r4,r17
 80080a8:	8007f5c0 	call	8007f5c <__sfmoreglue>
 80080ac:	80800015 	stw	r2,0(r16)
 80080b0:	103ff61e 	bne	r2,zero,800808c <__sfp+0xc8>
 80080b4:	00c00304 	movi	r3,12
 80080b8:	88c00015 	stw	r3,0(r17)
 80080bc:	003fec06 	br	8008070 <__sfp+0xac>

080080c0 <_cleanup>:
 80080c0:	00820174 	movhi	r2,2053
 80080c4:	1118df17 	ldw	r4,25468(r2)
 80080c8:	01420074 	movhi	r5,2049
 80080cc:	29726b04 	addi	r5,r5,-13908
 80080d0:	8008a881 	jmpi	8008a88 <_fwalk_reent>

080080d4 <__sinit>:
 80080d4:	20800e17 	ldw	r2,56(r4)
 80080d8:	10000126 	beq	r2,zero,80080e0 <__sinit+0xc>
 80080dc:	f800283a 	ret
 80080e0:	8007dec1 	jmpi	8007dec <__sinit.part.0>

080080e4 <__sfp_lock_acquire>:
 80080e4:	f800283a 	ret

080080e8 <__sfp_lock_release>:
 80080e8:	f800283a 	ret

080080ec <__sinit_lock_acquire>:
 80080ec:	f800283a 	ret

080080f0 <__sinit_lock_release>:
 80080f0:	f800283a 	ret

080080f4 <__fp_lock_all>:
 80080f4:	00820174 	movhi	r2,2053
 80080f8:	1118e017 	ldw	r4,25472(r2)
 80080fc:	01420034 	movhi	r5,2048
 8008100:	295f7604 	addi	r5,r5,32216
 8008104:	80089f01 	jmpi	80089f0 <_fwalk>

08008108 <__fp_unlock_all>:
 8008108:	00820174 	movhi	r2,2053
 800810c:	1118e017 	ldw	r4,25472(r2)
 8008110:	01420034 	movhi	r5,2048
 8008114:	295fd504 	addi	r5,r5,32596
 8008118:	80089f01 	jmpi	80089f0 <_fwalk>

0800811c <_malloc_trim_r>:
 800811c:	defffb04 	addi	sp,sp,-20
 8008120:	dcc00315 	stw	r19,12(sp)
 8008124:	04c20174 	movhi	r19,2053
 8008128:	dc800215 	stw	r18,8(sp)
 800812c:	dc400115 	stw	r17,4(sp)
 8008130:	dc000015 	stw	r16,0(sp)
 8008134:	dfc00415 	stw	ra,16(sp)
 8008138:	2821883a 	mov	r16,r5
 800813c:	9cd1b704 	addi	r19,r19,18140
 8008140:	2025883a 	mov	r18,r4
 8008144:	80110740 	call	8011074 <__malloc_lock>
 8008148:	98800217 	ldw	r2,8(r19)
 800814c:	14400117 	ldw	r17,4(r2)
 8008150:	00bfff04 	movi	r2,-4
 8008154:	88a2703a 	and	r17,r17,r2
 8008158:	8c21c83a 	sub	r16,r17,r16
 800815c:	8403fbc4 	addi	r16,r16,4079
 8008160:	8020d33a 	srli	r16,r16,12
 8008164:	843fffc4 	addi	r16,r16,-1
 8008168:	8020933a 	slli	r16,r16,12
 800816c:	80840008 	cmpgei	r2,r16,4096
 8008170:	10000626 	beq	r2,zero,800818c <_malloc_trim_r+0x70>
 8008174:	000b883a 	mov	r5,zero
 8008178:	9009883a 	mov	r4,r18
 800817c:	800b0440 	call	800b044 <_sbrk_r>
 8008180:	98c00217 	ldw	r3,8(r19)
 8008184:	1c47883a 	add	r3,r3,r17
 8008188:	10c00a26 	beq	r2,r3,80081b4 <_malloc_trim_r+0x98>
 800818c:	9009883a 	mov	r4,r18
 8008190:	801119c0 	call	801119c <__malloc_unlock>
 8008194:	0005883a 	mov	r2,zero
 8008198:	dfc00417 	ldw	ra,16(sp)
 800819c:	dcc00317 	ldw	r19,12(sp)
 80081a0:	dc800217 	ldw	r18,8(sp)
 80081a4:	dc400117 	ldw	r17,4(sp)
 80081a8:	dc000017 	ldw	r16,0(sp)
 80081ac:	dec00504 	addi	sp,sp,20
 80081b0:	f800283a 	ret
 80081b4:	040bc83a 	sub	r5,zero,r16
 80081b8:	9009883a 	mov	r4,r18
 80081bc:	800b0440 	call	800b044 <_sbrk_r>
 80081c0:	10bfffd8 	cmpnei	r2,r2,-1
 80081c4:	10000d26 	beq	r2,zero,80081fc <_malloc_trim_r+0xe0>
 80081c8:	00820174 	movhi	r2,2053
 80081cc:	109a9f17 	ldw	r2,27260(r2)
 80081d0:	98c00217 	ldw	r3,8(r19)
 80081d4:	8c23c83a 	sub	r17,r17,r16
 80081d8:	8c400054 	ori	r17,r17,1
 80081dc:	1421c83a 	sub	r16,r2,r16
 80081e0:	1c400115 	stw	r17,4(r3)
 80081e4:	00820174 	movhi	r2,2053
 80081e8:	9009883a 	mov	r4,r18
 80081ec:	141a9f15 	stw	r16,27260(r2)
 80081f0:	801119c0 	call	801119c <__malloc_unlock>
 80081f4:	00800044 	movi	r2,1
 80081f8:	003fe706 	br	8008198 <_malloc_trim_r+0x7c>
 80081fc:	000b883a 	mov	r5,zero
 8008200:	9009883a 	mov	r4,r18
 8008204:	800b0440 	call	800b044 <_sbrk_r>
 8008208:	99000217 	ldw	r4,8(r19)
 800820c:	1107c83a 	sub	r3,r2,r4
 8008210:	19400410 	cmplti	r5,r3,16
 8008214:	283fdd1e 	bne	r5,zero,800818c <_malloc_trim_r+0x70>
 8008218:	01420174 	movhi	r5,2053
 800821c:	2958e117 	ldw	r5,25476(r5)
 8008220:	18c00054 	ori	r3,r3,1
 8008224:	20c00115 	stw	r3,4(r4)
 8008228:	1145c83a 	sub	r2,r2,r5
 800822c:	01420174 	movhi	r5,2053
 8008230:	289a9f15 	stw	r2,27260(r5)
 8008234:	003fd506 	br	800818c <_malloc_trim_r+0x70>

08008238 <_free_r>:
 8008238:	28004f26 	beq	r5,zero,8008378 <_free_r+0x140>
 800823c:	defffd04 	addi	sp,sp,-12
 8008240:	dc400115 	stw	r17,4(sp)
 8008244:	dc000015 	stw	r16,0(sp)
 8008248:	2023883a 	mov	r17,r4
 800824c:	2821883a 	mov	r16,r5
 8008250:	dfc00215 	stw	ra,8(sp)
 8008254:	80110740 	call	8011074 <__malloc_lock>
 8008258:	81ffff17 	ldw	r7,-4(r16)
 800825c:	00bfff84 	movi	r2,-2
 8008260:	80fffe04 	addi	r3,r16,-8
 8008264:	3884703a 	and	r2,r7,r2
 8008268:	01020174 	movhi	r4,2053
 800826c:	188d883a 	add	r6,r3,r2
 8008270:	2111b704 	addi	r4,r4,18140
 8008274:	31400117 	ldw	r5,4(r6)
 8008278:	22000217 	ldw	r8,8(r4)
 800827c:	027fff04 	movi	r9,-4
 8008280:	2a4a703a 	and	r5,r5,r9
 8008284:	41806426 	beq	r8,r6,8008418 <_free_r+0x1e0>
 8008288:	31400115 	stw	r5,4(r6)
 800828c:	39c0004c 	andi	r7,r7,1
 8008290:	3151883a 	add	r8,r6,r5
 8008294:	3800281e 	bne	r7,zero,8008338 <_free_r+0x100>
 8008298:	82bffe17 	ldw	r10,-8(r16)
 800829c:	42000117 	ldw	r8,4(r8)
 80082a0:	01c20174 	movhi	r7,2053
 80082a4:	1a87c83a 	sub	r3,r3,r10
 80082a8:	1a400217 	ldw	r9,8(r3)
 80082ac:	39d1b904 	addi	r7,r7,18148
 80082b0:	1285883a 	add	r2,r2,r10
 80082b4:	4200004c 	andi	r8,r8,1
 80082b8:	49c04c26 	beq	r9,r7,80083ec <_free_r+0x1b4>
 80082bc:	1a800317 	ldw	r10,12(r3)
 80082c0:	4a800315 	stw	r10,12(r9)
 80082c4:	52400215 	stw	r9,8(r10)
 80082c8:	40007126 	beq	r8,zero,8008490 <_free_r+0x258>
 80082cc:	11400054 	ori	r5,r2,1
 80082d0:	19400115 	stw	r5,4(r3)
 80082d4:	30800015 	stw	r2,0(r6)
 80082d8:	11408028 	cmpgeui	r5,r2,512
 80082dc:	28002c1e 	bne	r5,zero,8008390 <_free_r+0x158>
 80082e0:	100ad0fa 	srli	r5,r2,3
 80082e4:	100cd17a 	srli	r6,r2,5
 80082e8:	00800044 	movi	r2,1
 80082ec:	29400044 	addi	r5,r5,1
 80082f0:	280a90fa 	slli	r5,r5,3
 80082f4:	21c00117 	ldw	r7,4(r4)
 80082f8:	1184983a 	sll	r2,r2,r6
 80082fc:	214b883a 	add	r5,r4,r5
 8008300:	29800017 	ldw	r6,0(r5)
 8008304:	11c4b03a 	or	r2,r2,r7
 8008308:	29fffe04 	addi	r7,r5,-8
 800830c:	19c00315 	stw	r7,12(r3)
 8008310:	19800215 	stw	r6,8(r3)
 8008314:	20800115 	stw	r2,4(r4)
 8008318:	28c00015 	stw	r3,0(r5)
 800831c:	30c00315 	stw	r3,12(r6)
 8008320:	8809883a 	mov	r4,r17
 8008324:	dfc00217 	ldw	ra,8(sp)
 8008328:	dc400117 	ldw	r17,4(sp)
 800832c:	dc000017 	ldw	r16,0(sp)
 8008330:	dec00304 	addi	sp,sp,12
 8008334:	801119c1 	jmpi	801119c <__malloc_unlock>
 8008338:	41c00117 	ldw	r7,4(r8)
 800833c:	39c0004c 	andi	r7,r7,1
 8008340:	38000e1e 	bne	r7,zero,800837c <_free_r+0x144>
 8008344:	01c20174 	movhi	r7,2053
 8008348:	1145883a 	add	r2,r2,r5
 800834c:	39d1b904 	addi	r7,r7,18148
 8008350:	31400217 	ldw	r5,8(r6)
 8008354:	12400054 	ori	r9,r2,1
 8008358:	1891883a 	add	r8,r3,r2
 800835c:	29c05226 	beq	r5,r7,80084a8 <_free_r+0x270>
 8008360:	31800317 	ldw	r6,12(r6)
 8008364:	29800315 	stw	r6,12(r5)
 8008368:	31400215 	stw	r5,8(r6)
 800836c:	1a400115 	stw	r9,4(r3)
 8008370:	40800015 	stw	r2,0(r8)
 8008374:	003fd806 	br	80082d8 <_free_r+0xa0>
 8008378:	f800283a 	ret
 800837c:	11400054 	ori	r5,r2,1
 8008380:	817fff15 	stw	r5,-4(r16)
 8008384:	30800015 	stw	r2,0(r6)
 8008388:	11408028 	cmpgeui	r5,r2,512
 800838c:	283fd426 	beq	r5,zero,80082e0 <_free_r+0xa8>
 8008390:	100ad27a 	srli	r5,r2,9
 8008394:	29800168 	cmpgeui	r6,r5,5
 8008398:	3000341e 	bne	r6,zero,800846c <_free_r+0x234>
 800839c:	100ad1ba 	srli	r5,r2,6
 80083a0:	29800e44 	addi	r6,r5,57
 80083a4:	300c90fa 	slli	r6,r6,3
 80083a8:	29c00e04 	addi	r7,r5,56
 80083ac:	218d883a 	add	r6,r4,r6
 80083b0:	31400017 	ldw	r5,0(r6)
 80083b4:	31bffe04 	addi	r6,r6,-8
 80083b8:	31404226 	beq	r6,r5,80084c4 <_free_r+0x28c>
 80083bc:	01ffff04 	movi	r7,-4
 80083c0:	29000117 	ldw	r4,4(r5)
 80083c4:	21c8703a 	and	r4,r4,r7
 80083c8:	1100022e 	bgeu	r2,r4,80083d4 <_free_r+0x19c>
 80083cc:	29400217 	ldw	r5,8(r5)
 80083d0:	317ffb1e 	bne	r6,r5,80083c0 <_free_r+0x188>
 80083d4:	29800317 	ldw	r6,12(r5)
 80083d8:	19800315 	stw	r6,12(r3)
 80083dc:	19400215 	stw	r5,8(r3)
 80083e0:	30c00215 	stw	r3,8(r6)
 80083e4:	28c00315 	stw	r3,12(r5)
 80083e8:	003fcd06 	br	8008320 <_free_r+0xe8>
 80083ec:	40004d1e 	bne	r8,zero,8008524 <_free_r+0x2ec>
 80083f0:	31000317 	ldw	r4,12(r6)
 80083f4:	31800217 	ldw	r6,8(r6)
 80083f8:	2885883a 	add	r2,r5,r2
 80083fc:	11400054 	ori	r5,r2,1
 8008400:	31000315 	stw	r4,12(r6)
 8008404:	21800215 	stw	r6,8(r4)
 8008408:	19400115 	stw	r5,4(r3)
 800840c:	1887883a 	add	r3,r3,r2
 8008410:	18800015 	stw	r2,0(r3)
 8008414:	003fc206 	br	8008320 <_free_r+0xe8>
 8008418:	39c0004c 	andi	r7,r7,1
 800841c:	1145883a 	add	r2,r2,r5
 8008420:	3800071e 	bne	r7,zero,8008440 <_free_r+0x208>
 8008424:	81fffe17 	ldw	r7,-8(r16)
 8008428:	19c7c83a 	sub	r3,r3,r7
 800842c:	19400317 	ldw	r5,12(r3)
 8008430:	19800217 	ldw	r6,8(r3)
 8008434:	11c5883a 	add	r2,r2,r7
 8008438:	31400315 	stw	r5,12(r6)
 800843c:	29800215 	stw	r6,8(r5)
 8008440:	01420174 	movhi	r5,2053
 8008444:	11800054 	ori	r6,r2,1
 8008448:	2958e217 	ldw	r5,25480(r5)
 800844c:	19800115 	stw	r6,4(r3)
 8008450:	20c00215 	stw	r3,8(r4)
 8008454:	117fb236 	bltu	r2,r5,8008320 <_free_r+0xe8>
 8008458:	00820174 	movhi	r2,2053
 800845c:	11593c17 	ldw	r5,25840(r2)
 8008460:	8809883a 	mov	r4,r17
 8008464:	800811c0 	call	800811c <_malloc_trim_r>
 8008468:	003fad06 	br	8008320 <_free_r+0xe8>
 800846c:	29800568 	cmpgeui	r6,r5,21
 8008470:	30000926 	beq	r6,zero,8008498 <_free_r+0x260>
 8008474:	29801568 	cmpgeui	r6,r5,85
 8008478:	3000191e 	bne	r6,zero,80084e0 <_free_r+0x2a8>
 800847c:	100ad33a 	srli	r5,r2,12
 8008480:	29801bc4 	addi	r6,r5,111
 8008484:	300c90fa 	slli	r6,r6,3
 8008488:	29c01b84 	addi	r7,r5,110
 800848c:	003fc706 	br	80083ac <_free_r+0x174>
 8008490:	1145883a 	add	r2,r2,r5
 8008494:	003fae06 	br	8008350 <_free_r+0x118>
 8008498:	29801704 	addi	r6,r5,92
 800849c:	300c90fa 	slli	r6,r6,3
 80084a0:	29c016c4 	addi	r7,r5,91
 80084a4:	003fc106 	br	80083ac <_free_r+0x174>
 80084a8:	20c00515 	stw	r3,20(r4)
 80084ac:	20c00415 	stw	r3,16(r4)
 80084b0:	19c00315 	stw	r7,12(r3)
 80084b4:	19c00215 	stw	r7,8(r3)
 80084b8:	1a400115 	stw	r9,4(r3)
 80084bc:	40800015 	stw	r2,0(r8)
 80084c0:	003f9706 	br	8008320 <_free_r+0xe8>
 80084c4:	380fd0ba 	srai	r7,r7,2
 80084c8:	00800044 	movi	r2,1
 80084cc:	22000117 	ldw	r8,4(r4)
 80084d0:	11ce983a 	sll	r7,r2,r7
 80084d4:	3a0eb03a 	or	r7,r7,r8
 80084d8:	21c00115 	stw	r7,4(r4)
 80084dc:	003fbe06 	br	80083d8 <_free_r+0x1a0>
 80084e0:	29805568 	cmpgeui	r6,r5,341
 80084e4:	3000051e 	bne	r6,zero,80084fc <_free_r+0x2c4>
 80084e8:	100ad3fa 	srli	r5,r2,15
 80084ec:	29801e04 	addi	r6,r5,120
 80084f0:	300c90fa 	slli	r6,r6,3
 80084f4:	29c01dc4 	addi	r7,r5,119
 80084f8:	003fac06 	br	80083ac <_free_r+0x174>
 80084fc:	29415568 	cmpgeui	r5,r5,1365
 8008500:	2800051e 	bne	r5,zero,8008518 <_free_r+0x2e0>
 8008504:	100ad4ba 	srli	r5,r2,18
 8008508:	29801f44 	addi	r6,r5,125
 800850c:	300c90fa 	slli	r6,r6,3
 8008510:	29c01f04 	addi	r7,r5,124
 8008514:	003fa506 	br	80083ac <_free_r+0x174>
 8008518:	0180fe04 	movi	r6,1016
 800851c:	01c01f84 	movi	r7,126
 8008520:	003fa206 	br	80083ac <_free_r+0x174>
 8008524:	11000054 	ori	r4,r2,1
 8008528:	19000115 	stw	r4,4(r3)
 800852c:	30800015 	stw	r2,0(r6)
 8008530:	003f7b06 	br	8008320 <_free_r+0xe8>

08008534 <__sfvwrite_r>:
 8008534:	30800217 	ldw	r2,8(r6)
 8008538:	1000c726 	beq	r2,zero,8008858 <__sfvwrite_r+0x324>
 800853c:	29c0030b 	ldhu	r7,12(r5)
 8008540:	defff404 	addi	sp,sp,-48
 8008544:	dd800815 	stw	r22,32(sp)
 8008548:	dd400715 	stw	r21,28(sp)
 800854c:	dc000215 	stw	r16,8(sp)
 8008550:	dfc00b15 	stw	ra,44(sp)
 8008554:	df000a15 	stw	fp,40(sp)
 8008558:	ddc00915 	stw	r23,36(sp)
 800855c:	dd000615 	stw	r20,24(sp)
 8008560:	dcc00515 	stw	r19,20(sp)
 8008564:	dc800415 	stw	r18,16(sp)
 8008568:	dc400315 	stw	r17,12(sp)
 800856c:	3880020c 	andi	r2,r7,8
 8008570:	302d883a 	mov	r22,r6
 8008574:	202b883a 	mov	r21,r4
 8008578:	2821883a 	mov	r16,r5
 800857c:	10002226 	beq	r2,zero,8008608 <__sfvwrite_r+0xd4>
 8008580:	28800417 	ldw	r2,16(r5)
 8008584:	10002026 	beq	r2,zero,8008608 <__sfvwrite_r+0xd4>
 8008588:	3880008c 	andi	r2,r7,2
 800858c:	b4400017 	ldw	r17,0(r22)
 8008590:	10002526 	beq	r2,zero,8008628 <__sfvwrite_r+0xf4>
 8008594:	80800917 	ldw	r2,36(r16)
 8008598:	81400717 	ldw	r5,28(r16)
 800859c:	05200034 	movhi	r20,32768
 80085a0:	0027883a 	mov	r19,zero
 80085a4:	0025883a 	mov	r18,zero
 80085a8:	a53f0004 	addi	r20,r20,-1024
 80085ac:	980d883a 	mov	r6,r19
 80085b0:	a809883a 	mov	r4,r21
 80085b4:	90001026 	beq	r18,zero,80085f8 <__sfvwrite_r+0xc4>
 80085b8:	900f883a 	mov	r7,r18
 80085bc:	a480012e 	bgeu	r20,r18,80085c4 <__sfvwrite_r+0x90>
 80085c0:	a00f883a 	mov	r7,r20
 80085c4:	103ee83a 	callr	r2
 80085c8:	00809e0e 	bge	zero,r2,8008844 <__sfvwrite_r+0x310>
 80085cc:	b1000217 	ldw	r4,8(r22)
 80085d0:	98a7883a 	add	r19,r19,r2
 80085d4:	90a5c83a 	sub	r18,r18,r2
 80085d8:	2085c83a 	sub	r2,r4,r2
 80085dc:	b0800215 	stw	r2,8(r22)
 80085e0:	10006226 	beq	r2,zero,800876c <__sfvwrite_r+0x238>
 80085e4:	80800917 	ldw	r2,36(r16)
 80085e8:	81400717 	ldw	r5,28(r16)
 80085ec:	980d883a 	mov	r6,r19
 80085f0:	a809883a 	mov	r4,r21
 80085f4:	903ff01e 	bne	r18,zero,80085b8 <__sfvwrite_r+0x84>
 80085f8:	8cc00017 	ldw	r19,0(r17)
 80085fc:	8c800117 	ldw	r18,4(r17)
 8008600:	8c400204 	addi	r17,r17,8
 8008604:	003fe906 	br	80085ac <__sfvwrite_r+0x78>
 8008608:	800b883a 	mov	r5,r16
 800860c:	a809883a 	mov	r4,r21
 8008610:	800601c0 	call	800601c <__swsetup_r>
 8008614:	1000f41e 	bne	r2,zero,80089e8 <__sfvwrite_r+0x4b4>
 8008618:	81c0030b 	ldhu	r7,12(r16)
 800861c:	b4400017 	ldw	r17,0(r22)
 8008620:	3880008c 	andi	r2,r7,2
 8008624:	103fdb1e 	bne	r2,zero,8008594 <__sfvwrite_r+0x60>
 8008628:	3880004c 	andi	r2,r7,1
 800862c:	84800217 	ldw	r18,8(r16)
 8008630:	82000017 	ldw	r8,0(r16)
 8008634:	10008a1e 	bne	r2,zero,8008860 <__sfvwrite_r+0x32c>
 8008638:	00a00034 	movhi	r2,32768
 800863c:	10bfff84 	addi	r2,r2,-2
 8008640:	00e00034 	movhi	r3,32768
 8008644:	d8800015 	stw	r2,0(sp)
 8008648:	18bfffc4 	addi	r2,r3,-1
 800864c:	0039883a 	mov	fp,zero
 8008650:	0027883a 	mov	r19,zero
 8008654:	d8800115 	stw	r2,4(sp)
 8008658:	98004026 	beq	r19,zero,800875c <__sfvwrite_r+0x228>
 800865c:	3880800c 	andi	r2,r7,512
 8008660:	10009226 	beq	r2,zero,80088ac <__sfvwrite_r+0x378>
 8008664:	902f883a 	mov	r23,r18
 8008668:	9c80b636 	bltu	r19,r18,8008944 <__sfvwrite_r+0x410>
 800866c:	3881200c 	andi	r2,r7,1152
 8008670:	10002526 	beq	r2,zero,8008708 <__sfvwrite_r+0x1d4>
 8008674:	81000517 	ldw	r4,20(r16)
 8008678:	81400417 	ldw	r5,16(r16)
 800867c:	98800044 	addi	r2,r19,1
 8008680:	210000e4 	muli	r4,r4,3
 8008684:	4165c83a 	sub	r18,r8,r5
 8008688:	1485883a 	add	r2,r2,r18
 800868c:	2028d7fa 	srli	r20,r4,31
 8008690:	a109883a 	add	r4,r20,r4
 8008694:	2029d07a 	srai	r20,r4,1
 8008698:	a00d883a 	mov	r6,r20
 800869c:	a080022e 	bgeu	r20,r2,80086a8 <__sfvwrite_r+0x174>
 80086a0:	1029883a 	mov	r20,r2
 80086a4:	100d883a 	mov	r6,r2
 80086a8:	39c1000c 	andi	r7,r7,1024
 80086ac:	3800be26 	beq	r7,zero,80089a8 <__sfvwrite_r+0x474>
 80086b0:	a809883a 	mov	r4,r21
 80086b4:	300b883a 	mov	r5,r6
 80086b8:	8008e340 	call	8008e34 <_malloc_r>
 80086bc:	1009883a 	mov	r4,r2
 80086c0:	1000c526 	beq	r2,zero,80089d8 <__sfvwrite_r+0x4a4>
 80086c4:	81400417 	ldw	r5,16(r16)
 80086c8:	900d883a 	mov	r6,r18
 80086cc:	8002ea40 	call	8002ea4 <memcpy>
 80086d0:	1009883a 	mov	r4,r2
 80086d4:	8080030b 	ldhu	r2,12(r16)
 80086d8:	00fedfc4 	movi	r3,-1153
 80086dc:	10c4703a 	and	r2,r2,r3
 80086e0:	10802014 	ori	r2,r2,128
 80086e4:	8080030d 	sth	r2,12(r16)
 80086e8:	2491883a 	add	r8,r4,r18
 80086ec:	a485c83a 	sub	r2,r20,r18
 80086f0:	81000415 	stw	r4,16(r16)
 80086f4:	82000015 	stw	r8,0(r16)
 80086f8:	85000515 	stw	r20,20(r16)
 80086fc:	9825883a 	mov	r18,r19
 8008700:	80800215 	stw	r2,8(r16)
 8008704:	982f883a 	mov	r23,r19
 8008708:	4009883a 	mov	r4,r8
 800870c:	b80d883a 	mov	r6,r23
 8008710:	e00b883a 	mov	r5,fp
 8008714:	80096e80 	call	80096e8 <memmove>
 8008718:	81000217 	ldw	r4,8(r16)
 800871c:	80800017 	ldw	r2,0(r16)
 8008720:	9829883a 	mov	r20,r19
 8008724:	24a5c83a 	sub	r18,r4,r18
 8008728:	15c5883a 	add	r2,r2,r23
 800872c:	84800215 	stw	r18,8(r16)
 8008730:	80800015 	stw	r2,0(r16)
 8008734:	0027883a 	mov	r19,zero
 8008738:	b0800217 	ldw	r2,8(r22)
 800873c:	e539883a 	add	fp,fp,r20
 8008740:	1529c83a 	sub	r20,r2,r20
 8008744:	b5000215 	stw	r20,8(r22)
 8008748:	a0000826 	beq	r20,zero,800876c <__sfvwrite_r+0x238>
 800874c:	81c0030b 	ldhu	r7,12(r16)
 8008750:	84800217 	ldw	r18,8(r16)
 8008754:	82000017 	ldw	r8,0(r16)
 8008758:	983fc01e 	bne	r19,zero,800865c <__sfvwrite_r+0x128>
 800875c:	8f000017 	ldw	fp,0(r17)
 8008760:	8cc00117 	ldw	r19,4(r17)
 8008764:	8c400204 	addi	r17,r17,8
 8008768:	003fbb06 	br	8008658 <__sfvwrite_r+0x124>
 800876c:	0005883a 	mov	r2,zero
 8008770:	dfc00b17 	ldw	ra,44(sp)
 8008774:	df000a17 	ldw	fp,40(sp)
 8008778:	ddc00917 	ldw	r23,36(sp)
 800877c:	dd800817 	ldw	r22,32(sp)
 8008780:	dd400717 	ldw	r21,28(sp)
 8008784:	dd000617 	ldw	r20,24(sp)
 8008788:	dcc00517 	ldw	r19,20(sp)
 800878c:	dc800417 	ldw	r18,16(sp)
 8008790:	dc400317 	ldw	r17,12(sp)
 8008794:	dc000217 	ldw	r16,8(sp)
 8008798:	dec00c04 	addi	sp,sp,48
 800879c:	f800283a 	ret
 80087a0:	e1c07016 	blt	fp,r7,8008964 <__sfvwrite_r+0x430>
 80087a4:	80800917 	ldw	r2,36(r16)
 80087a8:	81400717 	ldw	r5,28(r16)
 80087ac:	b80d883a 	mov	r6,r23
 80087b0:	a809883a 	mov	r4,r21
 80087b4:	103ee83a 	callr	r2
 80087b8:	1025883a 	mov	r18,r2
 80087bc:	0080210e 	bge	zero,r2,8008844 <__sfvwrite_r+0x310>
 80087c0:	a4a9c83a 	sub	r20,r20,r18
 80087c4:	a0006226 	beq	r20,zero,8008950 <__sfvwrite_r+0x41c>
 80087c8:	00800044 	movi	r2,1
 80087cc:	b1800217 	ldw	r6,8(r22)
 80087d0:	bcaf883a 	add	r23,r23,r18
 80087d4:	9ca7c83a 	sub	r19,r19,r18
 80087d8:	34a5c83a 	sub	r18,r6,r18
 80087dc:	b4800215 	stw	r18,8(r22)
 80087e0:	903fe226 	beq	r18,zero,800876c <__sfvwrite_r+0x238>
 80087e4:	84800217 	ldw	r18,8(r16)
 80087e8:	82000017 	ldw	r8,0(r16)
 80087ec:	98002126 	beq	r19,zero,8008874 <__sfvwrite_r+0x340>
 80087f0:	10002426 	beq	r2,zero,8008884 <__sfvwrite_r+0x350>
 80087f4:	a005883a 	mov	r2,r20
 80087f8:	9839883a 	mov	fp,r19
 80087fc:	14c0012e 	bgeu	r2,r19,8008804 <__sfvwrite_r+0x2d0>
 8008800:	1039883a 	mov	fp,r2
 8008804:	80800417 	ldw	r2,16(r16)
 8008808:	81c00517 	ldw	r7,20(r16)
 800880c:	123fe42e 	bgeu	r2,r8,80087a0 <__sfvwrite_r+0x26c>
 8008810:	3ca5883a 	add	r18,r7,r18
 8008814:	973fe20e 	bge	r18,fp,80087a0 <__sfvwrite_r+0x26c>
 8008818:	b80b883a 	mov	r5,r23
 800881c:	4009883a 	mov	r4,r8
 8008820:	900d883a 	mov	r6,r18
 8008824:	80096e80 	call	80096e8 <memmove>
 8008828:	80800017 	ldw	r2,0(r16)
 800882c:	800b883a 	mov	r5,r16
 8008830:	a809883a 	mov	r4,r21
 8008834:	1485883a 	add	r2,r2,r18
 8008838:	80800015 	stw	r2,0(r16)
 800883c:	8007cec0 	call	8007cec <_fflush_r>
 8008840:	103fdf26 	beq	r2,zero,80087c0 <__sfvwrite_r+0x28c>
 8008844:	8080030b 	ldhu	r2,12(r16)
 8008848:	10801014 	ori	r2,r2,64
 800884c:	8080030d 	sth	r2,12(r16)
 8008850:	00bfffc4 	movi	r2,-1
 8008854:	003fc606 	br	8008770 <__sfvwrite_r+0x23c>
 8008858:	0005883a 	mov	r2,zero
 800885c:	f800283a 	ret
 8008860:	0027883a 	mov	r19,zero
 8008864:	0029883a 	mov	r20,zero
 8008868:	0005883a 	mov	r2,zero
 800886c:	002f883a 	mov	r23,zero
 8008870:	983fdf1e 	bne	r19,zero,80087f0 <__sfvwrite_r+0x2bc>
 8008874:	8cc00117 	ldw	r19,4(r17)
 8008878:	8dc00017 	ldw	r23,0(r17)
 800887c:	8c400204 	addi	r17,r17,8
 8008880:	983ffc26 	beq	r19,zero,8008874 <__sfvwrite_r+0x340>
 8008884:	980d883a 	mov	r6,r19
 8008888:	01400284 	movi	r5,10
 800888c:	b809883a 	mov	r4,r23
 8008890:	da000015 	stw	r8,0(sp)
 8008894:	80096140 	call	8009614 <memchr>
 8008898:	da000017 	ldw	r8,0(sp)
 800889c:	10003f26 	beq	r2,zero,800899c <__sfvwrite_r+0x468>
 80088a0:	10800044 	addi	r2,r2,1
 80088a4:	15e9c83a 	sub	r20,r2,r23
 80088a8:	003fd206 	br	80087f4 <__sfvwrite_r+0x2c0>
 80088ac:	80800417 	ldw	r2,16(r16)
 80088b0:	12001136 	bltu	r2,r8,80088f8 <__sfvwrite_r+0x3c4>
 80088b4:	85000517 	ldw	r20,20(r16)
 80088b8:	9d000f36 	bltu	r19,r20,80088f8 <__sfvwrite_r+0x3c4>
 80088bc:	d8800017 	ldw	r2,0(sp)
 80088c0:	14c0342e 	bgeu	r2,r19,8008994 <__sfvwrite_r+0x460>
 80088c4:	d9000117 	ldw	r4,4(sp)
 80088c8:	a00b883a 	mov	r5,r20
 80088cc:	800e13c0 	call	800e13c <__divsi3>
 80088d0:	150f383a 	mul	r7,r2,r20
 80088d4:	82000917 	ldw	r8,36(r16)
 80088d8:	81400717 	ldw	r5,28(r16)
 80088dc:	e00d883a 	mov	r6,fp
 80088e0:	a809883a 	mov	r4,r21
 80088e4:	403ee83a 	callr	r8
 80088e8:	1029883a 	mov	r20,r2
 80088ec:	00bfd50e 	bge	zero,r2,8008844 <__sfvwrite_r+0x310>
 80088f0:	9d27c83a 	sub	r19,r19,r20
 80088f4:	003f9006 	br	8008738 <__sfvwrite_r+0x204>
 80088f8:	9029883a 	mov	r20,r18
 80088fc:	9c80012e 	bgeu	r19,r18,8008904 <__sfvwrite_r+0x3d0>
 8008900:	9829883a 	mov	r20,r19
 8008904:	4009883a 	mov	r4,r8
 8008908:	a00d883a 	mov	r6,r20
 800890c:	e00b883a 	mov	r5,fp
 8008910:	80096e80 	call	80096e8 <memmove>
 8008914:	80800217 	ldw	r2,8(r16)
 8008918:	81000017 	ldw	r4,0(r16)
 800891c:	1505c83a 	sub	r2,r2,r20
 8008920:	2509883a 	add	r4,r4,r20
 8008924:	80800215 	stw	r2,8(r16)
 8008928:	81000015 	stw	r4,0(r16)
 800892c:	103ff01e 	bne	r2,zero,80088f0 <__sfvwrite_r+0x3bc>
 8008930:	800b883a 	mov	r5,r16
 8008934:	a809883a 	mov	r4,r21
 8008938:	8007cec0 	call	8007cec <_fflush_r>
 800893c:	103fec26 	beq	r2,zero,80088f0 <__sfvwrite_r+0x3bc>
 8008940:	003fc006 	br	8008844 <__sfvwrite_r+0x310>
 8008944:	9825883a 	mov	r18,r19
 8008948:	982f883a 	mov	r23,r19
 800894c:	003f6e06 	br	8008708 <__sfvwrite_r+0x1d4>
 8008950:	800b883a 	mov	r5,r16
 8008954:	a809883a 	mov	r4,r21
 8008958:	8007cec0 	call	8007cec <_fflush_r>
 800895c:	103f9b26 	beq	r2,zero,80087cc <__sfvwrite_r+0x298>
 8008960:	003fb806 	br	8008844 <__sfvwrite_r+0x310>
 8008964:	e00d883a 	mov	r6,fp
 8008968:	b80b883a 	mov	r5,r23
 800896c:	4009883a 	mov	r4,r8
 8008970:	80096e80 	call	80096e8 <memmove>
 8008974:	80800217 	ldw	r2,8(r16)
 8008978:	81800017 	ldw	r6,0(r16)
 800897c:	e025883a 	mov	r18,fp
 8008980:	1705c83a 	sub	r2,r2,fp
 8008984:	370d883a 	add	r6,r6,fp
 8008988:	80800215 	stw	r2,8(r16)
 800898c:	81800015 	stw	r6,0(r16)
 8008990:	003f8b06 	br	80087c0 <__sfvwrite_r+0x28c>
 8008994:	9809883a 	mov	r4,r19
 8008998:	003fcb06 	br	80088c8 <__sfvwrite_r+0x394>
 800899c:	98800044 	addi	r2,r19,1
 80089a0:	1029883a 	mov	r20,r2
 80089a4:	003f9406 	br	80087f8 <__sfvwrite_r+0x2c4>
 80089a8:	a809883a 	mov	r4,r21
 80089ac:	800aa5c0 	call	800aa5c <_realloc_r>
 80089b0:	1009883a 	mov	r4,r2
 80089b4:	103f4c1e 	bne	r2,zero,80086e8 <__sfvwrite_r+0x1b4>
 80089b8:	81400417 	ldw	r5,16(r16)
 80089bc:	a809883a 	mov	r4,r21
 80089c0:	80082380 	call	8008238 <_free_r>
 80089c4:	8080030b 	ldhu	r2,12(r16)
 80089c8:	00c00304 	movi	r3,12
 80089cc:	a8c00015 	stw	r3,0(r21)
 80089d0:	10bfdfcc 	andi	r2,r2,65407
 80089d4:	003f9c06 	br	8008848 <__sfvwrite_r+0x314>
 80089d8:	00c00304 	movi	r3,12
 80089dc:	8080030b 	ldhu	r2,12(r16)
 80089e0:	a8c00015 	stw	r3,0(r21)
 80089e4:	003f9806 	br	8008848 <__sfvwrite_r+0x314>
 80089e8:	00bfffc4 	movi	r2,-1
 80089ec:	003f6006 	br	8008770 <__sfvwrite_r+0x23c>

080089f0 <_fwalk>:
 80089f0:	defffa04 	addi	sp,sp,-24
 80089f4:	dd000415 	stw	r20,16(sp)
 80089f8:	dcc00315 	stw	r19,12(sp)
 80089fc:	dc800215 	stw	r18,8(sp)
 8008a00:	dfc00515 	stw	ra,20(sp)
 8008a04:	dc400115 	stw	r17,4(sp)
 8008a08:	dc000015 	stw	r16,0(sp)
 8008a0c:	2827883a 	mov	r19,r5
 8008a10:	2480b804 	addi	r18,r4,736
 8008a14:	0029883a 	mov	r20,zero
 8008a18:	94400117 	ldw	r17,4(r18)
 8008a1c:	94000217 	ldw	r16,8(r18)
 8008a20:	8c7fffc4 	addi	r17,r17,-1
 8008a24:	88000d16 	blt	r17,zero,8008a5c <_fwalk+0x6c>
 8008a28:	8080030b 	ldhu	r2,12(r16)
 8008a2c:	8c7fffc4 	addi	r17,r17,-1
 8008a30:	108000b0 	cmpltui	r2,r2,2
 8008a34:	1000061e 	bne	r2,zero,8008a50 <_fwalk+0x60>
 8008a38:	8080038f 	ldh	r2,14(r16)
 8008a3c:	8009883a 	mov	r4,r16
 8008a40:	10bfffe0 	cmpeqi	r2,r2,-1
 8008a44:	1000021e 	bne	r2,zero,8008a50 <_fwalk+0x60>
 8008a48:	983ee83a 	callr	r19
 8008a4c:	a0a8b03a 	or	r20,r20,r2
 8008a50:	88bfffd8 	cmpnei	r2,r17,-1
 8008a54:	84001a04 	addi	r16,r16,104
 8008a58:	103ff31e 	bne	r2,zero,8008a28 <_fwalk+0x38>
 8008a5c:	94800017 	ldw	r18,0(r18)
 8008a60:	903fed1e 	bne	r18,zero,8008a18 <_fwalk+0x28>
 8008a64:	a005883a 	mov	r2,r20
 8008a68:	dfc00517 	ldw	ra,20(sp)
 8008a6c:	dd000417 	ldw	r20,16(sp)
 8008a70:	dcc00317 	ldw	r19,12(sp)
 8008a74:	dc800217 	ldw	r18,8(sp)
 8008a78:	dc400117 	ldw	r17,4(sp)
 8008a7c:	dc000017 	ldw	r16,0(sp)
 8008a80:	dec00604 	addi	sp,sp,24
 8008a84:	f800283a 	ret

08008a88 <_fwalk_reent>:
 8008a88:	defff904 	addi	sp,sp,-28
 8008a8c:	dd400515 	stw	r21,20(sp)
 8008a90:	dd000415 	stw	r20,16(sp)
 8008a94:	dcc00315 	stw	r19,12(sp)
 8008a98:	dc800215 	stw	r18,8(sp)
 8008a9c:	dfc00615 	stw	ra,24(sp)
 8008aa0:	dc400115 	stw	r17,4(sp)
 8008aa4:	dc000015 	stw	r16,0(sp)
 8008aa8:	202b883a 	mov	r21,r4
 8008aac:	2827883a 	mov	r19,r5
 8008ab0:	2480b804 	addi	r18,r4,736
 8008ab4:	0029883a 	mov	r20,zero
 8008ab8:	94400117 	ldw	r17,4(r18)
 8008abc:	94000217 	ldw	r16,8(r18)
 8008ac0:	8c7fffc4 	addi	r17,r17,-1
 8008ac4:	88000e16 	blt	r17,zero,8008b00 <_fwalk_reent+0x78>
 8008ac8:	8080030b 	ldhu	r2,12(r16)
 8008acc:	8c7fffc4 	addi	r17,r17,-1
 8008ad0:	108000b0 	cmpltui	r2,r2,2
 8008ad4:	1000071e 	bne	r2,zero,8008af4 <_fwalk_reent+0x6c>
 8008ad8:	8080038f 	ldh	r2,14(r16)
 8008adc:	800b883a 	mov	r5,r16
 8008ae0:	a809883a 	mov	r4,r21
 8008ae4:	10bfffe0 	cmpeqi	r2,r2,-1
 8008ae8:	1000021e 	bne	r2,zero,8008af4 <_fwalk_reent+0x6c>
 8008aec:	983ee83a 	callr	r19
 8008af0:	a0a8b03a 	or	r20,r20,r2
 8008af4:	88bfffd8 	cmpnei	r2,r17,-1
 8008af8:	84001a04 	addi	r16,r16,104
 8008afc:	103ff21e 	bne	r2,zero,8008ac8 <_fwalk_reent+0x40>
 8008b00:	94800017 	ldw	r18,0(r18)
 8008b04:	903fec1e 	bne	r18,zero,8008ab8 <_fwalk_reent+0x30>
 8008b08:	a005883a 	mov	r2,r20
 8008b0c:	dfc00617 	ldw	ra,24(sp)
 8008b10:	dd400517 	ldw	r21,20(sp)
 8008b14:	dd000417 	ldw	r20,16(sp)
 8008b18:	dcc00317 	ldw	r19,12(sp)
 8008b1c:	dc800217 	ldw	r18,8(sp)
 8008b20:	dc400117 	ldw	r17,4(sp)
 8008b24:	dc000017 	ldw	r16,0(sp)
 8008b28:	dec00704 	addi	sp,sp,28
 8008b2c:	f800283a 	ret

08008b30 <_getc_r>:
 8008b30:	defffd04 	addi	sp,sp,-12
 8008b34:	dc000115 	stw	r16,4(sp)
 8008b38:	dfc00215 	stw	ra,8(sp)
 8008b3c:	2021883a 	mov	r16,r4
 8008b40:	20000226 	beq	r4,zero,8008b4c <_getc_r+0x1c>
 8008b44:	20800e17 	ldw	r2,56(r4)
 8008b48:	10000c26 	beq	r2,zero,8008b7c <_getc_r+0x4c>
 8008b4c:	28800117 	ldw	r2,4(r5)
 8008b50:	10bfffc4 	addi	r2,r2,-1
 8008b54:	28800115 	stw	r2,4(r5)
 8008b58:	10000f16 	blt	r2,zero,8008b98 <_getc_r+0x68>
 8008b5c:	28800017 	ldw	r2,0(r5)
 8008b60:	10c00044 	addi	r3,r2,1
 8008b64:	28c00015 	stw	r3,0(r5)
 8008b68:	10800003 	ldbu	r2,0(r2)
 8008b6c:	dfc00217 	ldw	ra,8(sp)
 8008b70:	dc000117 	ldw	r16,4(sp)
 8008b74:	dec00304 	addi	sp,sp,12
 8008b78:	f800283a 	ret
 8008b7c:	d9400015 	stw	r5,0(sp)
 8008b80:	80080d40 	call	80080d4 <__sinit>
 8008b84:	d9400017 	ldw	r5,0(sp)
 8008b88:	28800117 	ldw	r2,4(r5)
 8008b8c:	10bfffc4 	addi	r2,r2,-1
 8008b90:	28800115 	stw	r2,4(r5)
 8008b94:	103ff10e 	bge	r2,zero,8008b5c <_getc_r+0x2c>
 8008b98:	8009883a 	mov	r4,r16
 8008b9c:	dfc00217 	ldw	ra,8(sp)
 8008ba0:	dc000117 	ldw	r16,4(sp)
 8008ba4:	dec00304 	addi	sp,sp,12
 8008ba8:	800afc01 	jmpi	800afc0 <__srget_r>

08008bac <getc>:
 8008bac:	defffd04 	addi	sp,sp,-12
 8008bb0:	00820174 	movhi	r2,2053
 8008bb4:	dc400115 	stw	r17,4(sp)
 8008bb8:	1458e017 	ldw	r17,25472(r2)
 8008bbc:	dc000015 	stw	r16,0(sp)
 8008bc0:	dfc00215 	stw	ra,8(sp)
 8008bc4:	2021883a 	mov	r16,r4
 8008bc8:	88000226 	beq	r17,zero,8008bd4 <getc+0x28>
 8008bcc:	88800e17 	ldw	r2,56(r17)
 8008bd0:	10000d26 	beq	r2,zero,8008c08 <getc+0x5c>
 8008bd4:	80800117 	ldw	r2,4(r16)
 8008bd8:	10bfffc4 	addi	r2,r2,-1
 8008bdc:	80800115 	stw	r2,4(r16)
 8008be0:	10000f16 	blt	r2,zero,8008c20 <getc+0x74>
 8008be4:	80800017 	ldw	r2,0(r16)
 8008be8:	10c00044 	addi	r3,r2,1
 8008bec:	80c00015 	stw	r3,0(r16)
 8008bf0:	10800003 	ldbu	r2,0(r2)
 8008bf4:	dfc00217 	ldw	ra,8(sp)
 8008bf8:	dc400117 	ldw	r17,4(sp)
 8008bfc:	dc000017 	ldw	r16,0(sp)
 8008c00:	dec00304 	addi	sp,sp,12
 8008c04:	f800283a 	ret
 8008c08:	8809883a 	mov	r4,r17
 8008c0c:	80080d40 	call	80080d4 <__sinit>
 8008c10:	80800117 	ldw	r2,4(r16)
 8008c14:	10bfffc4 	addi	r2,r2,-1
 8008c18:	80800115 	stw	r2,4(r16)
 8008c1c:	103ff10e 	bge	r2,zero,8008be4 <getc+0x38>
 8008c20:	800b883a 	mov	r5,r16
 8008c24:	8809883a 	mov	r4,r17
 8008c28:	dfc00217 	ldw	ra,8(sp)
 8008c2c:	dc400117 	ldw	r17,4(sp)
 8008c30:	dc000017 	ldw	r16,0(sp)
 8008c34:	dec00304 	addi	sp,sp,12
 8008c38:	800afc01 	jmpi	800afc0 <__srget_r>

08008c3c <__localeconv_l>:
 8008c3c:	20803c04 	addi	r2,r4,240
 8008c40:	f800283a 	ret

08008c44 <_localeconv_r>:
 8008c44:	00820174 	movhi	r2,2053
 8008c48:	1092f504 	addi	r2,r2,19412
 8008c4c:	f800283a 	ret

08008c50 <localeconv>:
 8008c50:	00820174 	movhi	r2,2053
 8008c54:	1092f504 	addi	r2,r2,19412
 8008c58:	f800283a 	ret

08008c5c <__swhatbuf_r>:
 8008c5c:	deffea04 	addi	sp,sp,-88
 8008c60:	dc001215 	stw	r16,72(sp)
 8008c64:	2821883a 	mov	r16,r5
 8008c68:	2940038f 	ldh	r5,14(r5)
 8008c6c:	dc801415 	stw	r18,80(sp)
 8008c70:	dc401315 	stw	r17,76(sp)
 8008c74:	dfc01515 	stw	ra,84(sp)
 8008c78:	3023883a 	mov	r17,r6
 8008c7c:	3825883a 	mov	r18,r7
 8008c80:	28001016 	blt	r5,zero,8008cc4 <__swhatbuf_r+0x68>
 8008c84:	d80d883a 	mov	r6,sp
 8008c88:	800cd0c0 	call	800cd0c <_fstat_r>
 8008c8c:	10000d16 	blt	r2,zero,8008cc4 <__swhatbuf_r+0x68>
 8008c90:	d8c00117 	ldw	r3,4(sp)
 8008c94:	00820004 	movi	r2,2048
 8008c98:	18fc000c 	andi	r3,r3,61440
 8008c9c:	18c80020 	cmpeqi	r3,r3,8192
 8008ca0:	90c00015 	stw	r3,0(r18)
 8008ca4:	00c10004 	movi	r3,1024
 8008ca8:	88c00015 	stw	r3,0(r17)
 8008cac:	dfc01517 	ldw	ra,84(sp)
 8008cb0:	dc801417 	ldw	r18,80(sp)
 8008cb4:	dc401317 	ldw	r17,76(sp)
 8008cb8:	dc001217 	ldw	r16,72(sp)
 8008cbc:	dec01604 	addi	sp,sp,88
 8008cc0:	f800283a 	ret
 8008cc4:	8080030b 	ldhu	r2,12(r16)
 8008cc8:	90000015 	stw	zero,0(r18)
 8008ccc:	1080200c 	andi	r2,r2,128
 8008cd0:	10000426 	beq	r2,zero,8008ce4 <__swhatbuf_r+0x88>
 8008cd4:	00801004 	movi	r2,64
 8008cd8:	88800015 	stw	r2,0(r17)
 8008cdc:	0005883a 	mov	r2,zero
 8008ce0:	003ff206 	br	8008cac <__swhatbuf_r+0x50>
 8008ce4:	00810004 	movi	r2,1024
 8008ce8:	88800015 	stw	r2,0(r17)
 8008cec:	0005883a 	mov	r2,zero
 8008cf0:	003fee06 	br	8008cac <__swhatbuf_r+0x50>

08008cf4 <__smakebuf_r>:
 8008cf4:	2880030b 	ldhu	r2,12(r5)
 8008cf8:	defffa04 	addi	sp,sp,-24
 8008cfc:	dc000215 	stw	r16,8(sp)
 8008d00:	dfc00515 	stw	ra,20(sp)
 8008d04:	dc800415 	stw	r18,16(sp)
 8008d08:	dc400315 	stw	r17,12(sp)
 8008d0c:	1080008c 	andi	r2,r2,2
 8008d10:	2821883a 	mov	r16,r5
 8008d14:	10000b26 	beq	r2,zero,8008d44 <__smakebuf_r+0x50>
 8008d18:	288010c4 	addi	r2,r5,67
 8008d1c:	28800015 	stw	r2,0(r5)
 8008d20:	28800415 	stw	r2,16(r5)
 8008d24:	00800044 	movi	r2,1
 8008d28:	28800515 	stw	r2,20(r5)
 8008d2c:	dfc00517 	ldw	ra,20(sp)
 8008d30:	dc800417 	ldw	r18,16(sp)
 8008d34:	dc400317 	ldw	r17,12(sp)
 8008d38:	dc000217 	ldw	r16,8(sp)
 8008d3c:	dec00604 	addi	sp,sp,24
 8008d40:	f800283a 	ret
 8008d44:	d9c00104 	addi	r7,sp,4
 8008d48:	d80d883a 	mov	r6,sp
 8008d4c:	2023883a 	mov	r17,r4
 8008d50:	8008c5c0 	call	8008c5c <__swhatbuf_r>
 8008d54:	d9000117 	ldw	r4,4(sp)
 8008d58:	1025883a 	mov	r18,r2
 8008d5c:	2000131e 	bne	r4,zero,8008dac <__smakebuf_r+0xb8>
 8008d60:	d9400017 	ldw	r5,0(sp)
 8008d64:	8809883a 	mov	r4,r17
 8008d68:	8008e340 	call	8008e34 <_malloc_r>
 8008d6c:	10001c26 	beq	r2,zero,8008de0 <__smakebuf_r+0xec>
 8008d70:	01020034 	movhi	r4,2048
 8008d74:	211f7804 	addi	r4,r4,32224
 8008d78:	80c0030b 	ldhu	r3,12(r16)
 8008d7c:	89000f15 	stw	r4,60(r17)
 8008d80:	80800015 	stw	r2,0(r16)
 8008d84:	80800415 	stw	r2,16(r16)
 8008d88:	d8800017 	ldw	r2,0(sp)
 8008d8c:	d9400117 	ldw	r5,4(sp)
 8008d90:	18c02014 	ori	r3,r3,128
 8008d94:	80c0030d 	sth	r3,12(r16)
 8008d98:	80800515 	stw	r2,20(r16)
 8008d9c:	28001d1e 	bne	r5,zero,8008e14 <__smakebuf_r+0x120>
 8008da0:	90c6b03a 	or	r3,r18,r3
 8008da4:	80c0030d 	sth	r3,12(r16)
 8008da8:	003fe006 	br	8008d2c <__smakebuf_r+0x38>
 8008dac:	8140038f 	ldh	r5,14(r16)
 8008db0:	8809883a 	mov	r4,r17
 8008db4:	800cd6c0 	call	800cd6c <_isatty_r>
 8008db8:	103fe926 	beq	r2,zero,8008d60 <__smakebuf_r+0x6c>
 8008dbc:	8080030b 	ldhu	r2,12(r16)
 8008dc0:	80c010c4 	addi	r3,r16,67
 8008dc4:	80c00015 	stw	r3,0(r16)
 8008dc8:	10800054 	ori	r2,r2,1
 8008dcc:	8080030d 	sth	r2,12(r16)
 8008dd0:	00800044 	movi	r2,1
 8008dd4:	80c00415 	stw	r3,16(r16)
 8008dd8:	80800515 	stw	r2,20(r16)
 8008ddc:	003fe006 	br	8008d60 <__smakebuf_r+0x6c>
 8008de0:	8080030b 	ldhu	r2,12(r16)
 8008de4:	10c0800c 	andi	r3,r2,512
 8008de8:	183fd01e 	bne	r3,zero,8008d2c <__smakebuf_r+0x38>
 8008dec:	00ffff04 	movi	r3,-4
 8008df0:	10c4703a 	and	r2,r2,r3
 8008df4:	10800094 	ori	r2,r2,2
 8008df8:	80c010c4 	addi	r3,r16,67
 8008dfc:	8080030d 	sth	r2,12(r16)
 8008e00:	00800044 	movi	r2,1
 8008e04:	80c00015 	stw	r3,0(r16)
 8008e08:	80c00415 	stw	r3,16(r16)
 8008e0c:	80800515 	stw	r2,20(r16)
 8008e10:	003fc606 	br	8008d2c <__smakebuf_r+0x38>
 8008e14:	8140038f 	ldh	r5,14(r16)
 8008e18:	8809883a 	mov	r4,r17
 8008e1c:	800cd6c0 	call	800cd6c <_isatty_r>
 8008e20:	80c0030b 	ldhu	r3,12(r16)
 8008e24:	103fde26 	beq	r2,zero,8008da0 <__smakebuf_r+0xac>
 8008e28:	18ffff0c 	andi	r3,r3,65532
 8008e2c:	18c00054 	ori	r3,r3,1
 8008e30:	003fdb06 	br	8008da0 <__smakebuf_r+0xac>

08008e34 <_malloc_r>:
 8008e34:	defff604 	addi	sp,sp,-40
 8008e38:	dc400115 	stw	r17,4(sp)
 8008e3c:	2c4002c4 	addi	r17,r5,11
 8008e40:	dc800215 	stw	r18,8(sp)
 8008e44:	dfc00915 	stw	ra,36(sp)
 8008e48:	df000815 	stw	fp,32(sp)
 8008e4c:	ddc00715 	stw	r23,28(sp)
 8008e50:	dd800615 	stw	r22,24(sp)
 8008e54:	dd400515 	stw	r21,20(sp)
 8008e58:	dd000415 	stw	r20,16(sp)
 8008e5c:	dcc00315 	stw	r19,12(sp)
 8008e60:	dc000015 	stw	r16,0(sp)
 8008e64:	888005e8 	cmpgeui	r2,r17,23
 8008e68:	2025883a 	mov	r18,r4
 8008e6c:	10001b1e 	bne	r2,zero,8008edc <_malloc_r+0xa8>
 8008e70:	29400468 	cmpgeui	r5,r5,17
 8008e74:	2800821e 	bne	r5,zero,8009080 <_malloc_r+0x24c>
 8008e78:	80110740 	call	8011074 <__malloc_lock>
 8008e7c:	04400404 	movi	r17,16
 8008e80:	01c00084 	movi	r7,2
 8008e84:	00800604 	movi	r2,24
 8008e88:	04c20174 	movhi	r19,2053
 8008e8c:	9cd1b704 	addi	r19,r19,18140
 8008e90:	9885883a 	add	r2,r19,r2
 8008e94:	14000117 	ldw	r16,4(r2)
 8008e98:	10fffe04 	addi	r3,r2,-8
 8008e9c:	80c08b26 	beq	r16,r3,80090cc <_malloc_r+0x298>
 8008ea0:	80800117 	ldw	r2,4(r16)
 8008ea4:	81000317 	ldw	r4,12(r16)
 8008ea8:	00ffff04 	movi	r3,-4
 8008eac:	10c4703a 	and	r2,r2,r3
 8008eb0:	81400217 	ldw	r5,8(r16)
 8008eb4:	8085883a 	add	r2,r16,r2
 8008eb8:	10c00117 	ldw	r3,4(r2)
 8008ebc:	29000315 	stw	r4,12(r5)
 8008ec0:	21400215 	stw	r5,8(r4)
 8008ec4:	18c00054 	ori	r3,r3,1
 8008ec8:	10c00115 	stw	r3,4(r2)
 8008ecc:	9009883a 	mov	r4,r18
 8008ed0:	801119c0 	call	801119c <__malloc_unlock>
 8008ed4:	80800204 	addi	r2,r16,8
 8008ed8:	00006c06 	br	800908c <_malloc_r+0x258>
 8008edc:	00bffe04 	movi	r2,-8
 8008ee0:	88a2703a 	and	r17,r17,r2
 8008ee4:	88006616 	blt	r17,zero,8009080 <_malloc_r+0x24c>
 8008ee8:	89406536 	bltu	r17,r5,8009080 <_malloc_r+0x24c>
 8008eec:	80110740 	call	8011074 <__malloc_lock>
 8008ef0:	88807e28 	cmpgeui	r2,r17,504
 8008ef4:	10012226 	beq	r2,zero,8009380 <_malloc_r+0x54c>
 8008ef8:	8804d27a 	srli	r2,r17,9
 8008efc:	10006f26 	beq	r2,zero,80090bc <_malloc_r+0x288>
 8008f00:	10c00168 	cmpgeui	r3,r2,5
 8008f04:	1800fe1e 	bne	r3,zero,8009300 <_malloc_r+0x4cc>
 8008f08:	8804d1ba 	srli	r2,r17,6
 8008f0c:	11c00e44 	addi	r7,r2,57
 8008f10:	380890fa 	slli	r4,r7,3
 8008f14:	12000e04 	addi	r8,r2,56
 8008f18:	04c20174 	movhi	r19,2053
 8008f1c:	9cd1b704 	addi	r19,r19,18140
 8008f20:	9909883a 	add	r4,r19,r4
 8008f24:	24000117 	ldw	r16,4(r4)
 8008f28:	213ffe04 	addi	r4,r4,-8
 8008f2c:	24000b26 	beq	r4,r16,8008f5c <_malloc_r+0x128>
 8008f30:	01bfff04 	movi	r6,-4
 8008f34:	00000306 	br	8008f44 <_malloc_r+0x110>
 8008f38:	1800d60e 	bge	r3,zero,8009294 <_malloc_r+0x460>
 8008f3c:	84000317 	ldw	r16,12(r16)
 8008f40:	24000626 	beq	r4,r16,8008f5c <_malloc_r+0x128>
 8008f44:	80800117 	ldw	r2,4(r16)
 8008f48:	1184703a 	and	r2,r2,r6
 8008f4c:	1447c83a 	sub	r3,r2,r17
 8008f50:	19400408 	cmpgei	r5,r3,16
 8008f54:	283ff826 	beq	r5,zero,8008f38 <_malloc_r+0x104>
 8008f58:	400f883a 	mov	r7,r8
 8008f5c:	9c000417 	ldw	r16,16(r19)
 8008f60:	02420174 	movhi	r9,2053
 8008f64:	4a51b904 	addi	r9,r9,18148
 8008f68:	82405f26 	beq	r16,r9,80090e8 <_malloc_r+0x2b4>
 8008f6c:	80c00117 	ldw	r3,4(r16)
 8008f70:	00bfff04 	movi	r2,-4
 8008f74:	1884703a 	and	r2,r3,r2
 8008f78:	1447c83a 	sub	r3,r2,r17
 8008f7c:	19000410 	cmplti	r4,r3,16
 8008f80:	20010a26 	beq	r4,zero,80093ac <_malloc_r+0x578>
 8008f84:	9a400515 	stw	r9,20(r19)
 8008f88:	9a400415 	stw	r9,16(r19)
 8008f8c:	1800ff0e 	bge	r3,zero,800938c <_malloc_r+0x558>
 8008f90:	10c08028 	cmpgeui	r3,r2,512
 8008f94:	1800c11e 	bne	r3,zero,800929c <_malloc_r+0x468>
 8008f98:	1006d0fa 	srli	r3,r2,3
 8008f9c:	1008d17a 	srli	r4,r2,5
 8008fa0:	00800044 	movi	r2,1
 8008fa4:	18c00044 	addi	r3,r3,1
 8008fa8:	180690fa 	slli	r3,r3,3
 8008fac:	99400117 	ldw	r5,4(r19)
 8008fb0:	1104983a 	sll	r2,r2,r4
 8008fb4:	98c7883a 	add	r3,r19,r3
 8008fb8:	19000017 	ldw	r4,0(r3)
 8008fbc:	1144b03a 	or	r2,r2,r5
 8008fc0:	197ffe04 	addi	r5,r3,-8
 8008fc4:	81400315 	stw	r5,12(r16)
 8008fc8:	81000215 	stw	r4,8(r16)
 8008fcc:	98800115 	stw	r2,4(r19)
 8008fd0:	1c000015 	stw	r16,0(r3)
 8008fd4:	24000315 	stw	r16,12(r4)
 8008fd8:	3807d0ba 	srai	r3,r7,2
 8008fdc:	01000044 	movi	r4,1
 8008fe0:	20c8983a 	sll	r4,r4,r3
 8008fe4:	11004536 	bltu	r2,r4,80090fc <_malloc_r+0x2c8>
 8008fe8:	2086703a 	and	r3,r4,r2
 8008fec:	18000a1e 	bne	r3,zero,8009018 <_malloc_r+0x1e4>
 8008ff0:	00ffff04 	movi	r3,-4
 8008ff4:	2109883a 	add	r4,r4,r4
 8008ff8:	38ce703a 	and	r7,r7,r3
 8008ffc:	2086703a 	and	r3,r4,r2
 8009000:	39c00104 	addi	r7,r7,4
 8009004:	1800041e 	bne	r3,zero,8009018 <_malloc_r+0x1e4>
 8009008:	2109883a 	add	r4,r4,r4
 800900c:	2086703a 	and	r3,r4,r2
 8009010:	39c00104 	addi	r7,r7,4
 8009014:	183ffc26 	beq	r3,zero,8009008 <_malloc_r+0x1d4>
 8009018:	02bfff04 	movi	r10,-4
 800901c:	381690fa 	slli	r11,r7,3
 8009020:	3819883a 	mov	r12,r7
 8009024:	9ad7883a 	add	r11,r19,r11
 8009028:	5811883a 	mov	r8,r11
 800902c:	40800317 	ldw	r2,12(r8)
 8009030:	4080bc26 	beq	r8,r2,8009324 <_malloc_r+0x4f0>
 8009034:	10c00117 	ldw	r3,4(r2)
 8009038:	1021883a 	mov	r16,r2
 800903c:	10800317 	ldw	r2,12(r2)
 8009040:	1a86703a 	and	r3,r3,r10
 8009044:	1c4bc83a 	sub	r5,r3,r17
 8009048:	29800410 	cmplti	r6,r5,16
 800904c:	3000ba26 	beq	r6,zero,8009338 <_malloc_r+0x504>
 8009050:	283ff716 	blt	r5,zero,8009030 <_malloc_r+0x1fc>
 8009054:	80c7883a 	add	r3,r16,r3
 8009058:	19400117 	ldw	r5,4(r3)
 800905c:	81800217 	ldw	r6,8(r16)
 8009060:	9009883a 	mov	r4,r18
 8009064:	29400054 	ori	r5,r5,1
 8009068:	19400115 	stw	r5,4(r3)
 800906c:	30800315 	stw	r2,12(r6)
 8009070:	11800215 	stw	r6,8(r2)
 8009074:	801119c0 	call	801119c <__malloc_unlock>
 8009078:	80800204 	addi	r2,r16,8
 800907c:	00000306 	br	800908c <_malloc_r+0x258>
 8009080:	00800304 	movi	r2,12
 8009084:	90800015 	stw	r2,0(r18)
 8009088:	0005883a 	mov	r2,zero
 800908c:	dfc00917 	ldw	ra,36(sp)
 8009090:	df000817 	ldw	fp,32(sp)
 8009094:	ddc00717 	ldw	r23,28(sp)
 8009098:	dd800617 	ldw	r22,24(sp)
 800909c:	dd400517 	ldw	r21,20(sp)
 80090a0:	dd000417 	ldw	r20,16(sp)
 80090a4:	dcc00317 	ldw	r19,12(sp)
 80090a8:	dc800217 	ldw	r18,8(sp)
 80090ac:	dc400117 	ldw	r17,4(sp)
 80090b0:	dc000017 	ldw	r16,0(sp)
 80090b4:	dec00a04 	addi	sp,sp,40
 80090b8:	f800283a 	ret
 80090bc:	01008004 	movi	r4,512
 80090c0:	01c01004 	movi	r7,64
 80090c4:	02000fc4 	movi	r8,63
 80090c8:	003f9306 	br	8008f18 <_malloc_r+0xe4>
 80090cc:	14000317 	ldw	r16,12(r2)
 80090d0:	39c00084 	addi	r7,r7,2
 80090d4:	143f721e 	bne	r2,r16,8008ea0 <_malloc_r+0x6c>
 80090d8:	9c000417 	ldw	r16,16(r19)
 80090dc:	02420174 	movhi	r9,2053
 80090e0:	4a51b904 	addi	r9,r9,18148
 80090e4:	827fa11e 	bne	r16,r9,8008f6c <_malloc_r+0x138>
 80090e8:	3807d0ba 	srai	r3,r7,2
 80090ec:	01000044 	movi	r4,1
 80090f0:	98800117 	ldw	r2,4(r19)
 80090f4:	20c8983a 	sll	r4,r4,r3
 80090f8:	113fbb2e 	bgeu	r2,r4,8008fe8 <_malloc_r+0x1b4>
 80090fc:	9c000217 	ldw	r16,8(r19)
 8009100:	00bfff04 	movi	r2,-4
 8009104:	85400117 	ldw	r21,4(r16)
 8009108:	a8ac703a 	and	r22,r21,r2
 800910c:	b4400336 	bltu	r22,r17,800911c <_malloc_r+0x2e8>
 8009110:	b445c83a 	sub	r2,r22,r17
 8009114:	10c00408 	cmpgei	r3,r2,16
 8009118:	1800541e 	bne	r3,zero,800926c <_malloc_r+0x438>
 800911c:	00820174 	movhi	r2,2053
 8009120:	1098e117 	ldw	r2,25476(r2)
 8009124:	00c20174 	movhi	r3,2053
 8009128:	1d593c17 	ldw	r21,25840(r3)
 800912c:	10bfffd8 	cmpnei	r2,r2,-1
 8009130:	85b9883a 	add	fp,r16,r22
 8009134:	8d6b883a 	add	r21,r17,r21
 8009138:	1000d626 	beq	r2,zero,8009494 <_malloc_r+0x660>
 800913c:	ad4403c4 	addi	r21,r21,4111
 8009140:	00bc0004 	movi	r2,-4096
 8009144:	a8aa703a 	and	r21,r21,r2
 8009148:	a80b883a 	mov	r5,r21
 800914c:	9009883a 	mov	r4,r18
 8009150:	800b0440 	call	800b044 <_sbrk_r>
 8009154:	102f883a 	mov	r23,r2
 8009158:	10bfffd8 	cmpnei	r2,r2,-1
 800915c:	1000a826 	beq	r2,zero,8009400 <_malloc_r+0x5cc>
 8009160:	bf00a636 	bltu	r23,fp,80093fc <_malloc_r+0x5c8>
 8009164:	00820174 	movhi	r2,2053
 8009168:	151a9f17 	ldw	r20,27260(r2)
 800916c:	ad29883a 	add	r20,r21,r20
 8009170:	151a9f15 	stw	r20,27260(r2)
 8009174:	a007883a 	mov	r3,r20
 8009178:	e5c0ec26 	beq	fp,r23,800952c <_malloc_r+0x6f8>
 800917c:	00820174 	movhi	r2,2053
 8009180:	1098e117 	ldw	r2,25476(r2)
 8009184:	10bfffd8 	cmpnei	r2,r2,-1
 8009188:	1000ef26 	beq	r2,zero,8009548 <_malloc_r+0x714>
 800918c:	bf39c83a 	sub	fp,r23,fp
 8009190:	e0c7883a 	add	r3,fp,r3
 8009194:	00820174 	movhi	r2,2053
 8009198:	10da9f15 	stw	r3,27260(r2)
 800919c:	bf0001cc 	andi	fp,r23,7
 80091a0:	e000c526 	beq	fp,zero,80094b8 <_malloc_r+0x684>
 80091a4:	bf2fc83a 	sub	r23,r23,fp
 80091a8:	bdc00204 	addi	r23,r23,8
 80091ac:	05040204 	movi	r20,4104
 80091b0:	a729c83a 	sub	r20,r20,fp
 80091b4:	bd6b883a 	add	r21,r23,r21
 80091b8:	a569c83a 	sub	r20,r20,r21
 80091bc:	a503ffcc 	andi	r20,r20,4095
 80091c0:	a00b883a 	mov	r5,r20
 80091c4:	9009883a 	mov	r4,r18
 80091c8:	800b0440 	call	800b044 <_sbrk_r>
 80091cc:	10ffffe0 	cmpeqi	r3,r2,-1
 80091d0:	1800f31e 	bne	r3,zero,80095a0 <_malloc_r+0x76c>
 80091d4:	15c5c83a 	sub	r2,r2,r23
 80091d8:	152b883a 	add	r21,r2,r20
 80091dc:	00820174 	movhi	r2,2053
 80091e0:	115a9f17 	ldw	r5,27260(r2)
 80091e4:	9dc00215 	stw	r23,8(r19)
 80091e8:	ad400054 	ori	r21,r21,1
 80091ec:	a169883a 	add	r20,r20,r5
 80091f0:	151a9f15 	stw	r20,27260(r2)
 80091f4:	bd400115 	stw	r21,4(r23)
 80091f8:	84c0d626 	beq	r16,r19,8009554 <_malloc_r+0x720>
 80091fc:	b0800428 	cmpgeui	r2,r22,16
 8009200:	1000d626 	beq	r2,zero,800955c <_malloc_r+0x728>
 8009204:	80c00117 	ldw	r3,4(r16)
 8009208:	013ffe04 	movi	r4,-8
 800920c:	b0bffd04 	addi	r2,r22,-12
 8009210:	1104703a 	and	r2,r2,r4
 8009214:	18c0004c 	andi	r3,r3,1
 8009218:	1886b03a 	or	r3,r3,r2
 800921c:	80c00115 	stw	r3,4(r16)
 8009220:	01000144 	movi	r4,5
 8009224:	8087883a 	add	r3,r16,r2
 8009228:	19000115 	stw	r4,4(r3)
 800922c:	19000215 	stw	r4,8(r3)
 8009230:	10800428 	cmpgeui	r2,r2,16
 8009234:	1000df1e 	bne	r2,zero,80095b4 <_malloc_r+0x780>
 8009238:	bd400117 	ldw	r21,4(r23)
 800923c:	b821883a 	mov	r16,r23
 8009240:	00820174 	movhi	r2,2053
 8009244:	10993b17 	ldw	r2,25836(r2)
 8009248:	1500022e 	bgeu	r2,r20,8009254 <_malloc_r+0x420>
 800924c:	00820174 	movhi	r2,2053
 8009250:	15193b15 	stw	r20,25836(r2)
 8009254:	00820174 	movhi	r2,2053
 8009258:	10993a17 	ldw	r2,25832(r2)
 800925c:	15006a2e 	bgeu	r2,r20,8009408 <_malloc_r+0x5d4>
 8009260:	00820174 	movhi	r2,2053
 8009264:	15193a15 	stw	r20,25832(r2)
 8009268:	00006706 	br	8009408 <_malloc_r+0x5d4>
 800926c:	88c00054 	ori	r3,r17,1
 8009270:	80c00115 	stw	r3,4(r16)
 8009274:	8463883a 	add	r17,r16,r17
 8009278:	10800054 	ori	r2,r2,1
 800927c:	9c400215 	stw	r17,8(r19)
 8009280:	88800115 	stw	r2,4(r17)
 8009284:	9009883a 	mov	r4,r18
 8009288:	801119c0 	call	801119c <__malloc_unlock>
 800928c:	80800204 	addi	r2,r16,8
 8009290:	003f7e06 	br	800908c <_malloc_r+0x258>
 8009294:	81000317 	ldw	r4,12(r16)
 8009298:	003f0506 	br	8008eb0 <_malloc_r+0x7c>
 800929c:	1006d27a 	srli	r3,r2,9
 80092a0:	19000168 	cmpgeui	r4,r3,5
 80092a4:	20005026 	beq	r4,zero,80093e8 <_malloc_r+0x5b4>
 80092a8:	19000568 	cmpgeui	r4,r3,21
 80092ac:	20008c1e 	bne	r4,zero,80094e0 <_malloc_r+0x6ac>
 80092b0:	19401704 	addi	r5,r3,92
 80092b4:	280a90fa 	slli	r5,r5,3
 80092b8:	190016c4 	addi	r4,r3,91
 80092bc:	994b883a 	add	r5,r19,r5
 80092c0:	28c00017 	ldw	r3,0(r5)
 80092c4:	297ffe04 	addi	r5,r5,-8
 80092c8:	28c07426 	beq	r5,r3,800949c <_malloc_r+0x668>
 80092cc:	01bfff04 	movi	r6,-4
 80092d0:	19000117 	ldw	r4,4(r3)
 80092d4:	2188703a 	and	r4,r4,r6
 80092d8:	1100022e 	bgeu	r2,r4,80092e4 <_malloc_r+0x4b0>
 80092dc:	18c00217 	ldw	r3,8(r3)
 80092e0:	28fffb1e 	bne	r5,r3,80092d0 <_malloc_r+0x49c>
 80092e4:	19400317 	ldw	r5,12(r3)
 80092e8:	98800117 	ldw	r2,4(r19)
 80092ec:	81400315 	stw	r5,12(r16)
 80092f0:	80c00215 	stw	r3,8(r16)
 80092f4:	2c000215 	stw	r16,8(r5)
 80092f8:	1c000315 	stw	r16,12(r3)
 80092fc:	003f3606 	br	8008fd8 <_malloc_r+0x1a4>
 8009300:	10c00568 	cmpgeui	r3,r2,21
 8009304:	18004a26 	beq	r3,zero,8009430 <_malloc_r+0x5fc>
 8009308:	10c01568 	cmpgeui	r3,r2,85
 800930c:	18007b1e 	bne	r3,zero,80094fc <_malloc_r+0x6c8>
 8009310:	8804d33a 	srli	r2,r17,12
 8009314:	11c01bc4 	addi	r7,r2,111
 8009318:	380890fa 	slli	r4,r7,3
 800931c:	12001b84 	addi	r8,r2,110
 8009320:	003efd06 	br	8008f18 <_malloc_r+0xe4>
 8009324:	63000044 	addi	r12,r12,1
 8009328:	608000cc 	andi	r2,r12,3
 800932c:	42000204 	addi	r8,r8,8
 8009330:	103f3e1e 	bne	r2,zero,800902c <_malloc_r+0x1f8>
 8009334:	00004506 	br	800944c <_malloc_r+0x618>
 8009338:	81000217 	ldw	r4,8(r16)
 800933c:	89800054 	ori	r6,r17,1
 8009340:	81800115 	stw	r6,4(r16)
 8009344:	20800315 	stw	r2,12(r4)
 8009348:	11000215 	stw	r4,8(r2)
 800934c:	8463883a 	add	r17,r16,r17
 8009350:	9c400515 	stw	r17,20(r19)
 8009354:	9c400415 	stw	r17,16(r19)
 8009358:	28800054 	ori	r2,r5,1
 800935c:	88800115 	stw	r2,4(r17)
 8009360:	8a400315 	stw	r9,12(r17)
 8009364:	8a400215 	stw	r9,8(r17)
 8009368:	80c7883a 	add	r3,r16,r3
 800936c:	19400015 	stw	r5,0(r3)
 8009370:	9009883a 	mov	r4,r18
 8009374:	801119c0 	call	801119c <__malloc_unlock>
 8009378:	80800204 	addi	r2,r16,8
 800937c:	003f4306 	br	800908c <_malloc_r+0x258>
 8009380:	880ed0fa 	srli	r7,r17,3
 8009384:	88800204 	addi	r2,r17,8
 8009388:	003ebf06 	br	8008e88 <_malloc_r+0x54>
 800938c:	8085883a 	add	r2,r16,r2
 8009390:	10c00117 	ldw	r3,4(r2)
 8009394:	9009883a 	mov	r4,r18
 8009398:	18c00054 	ori	r3,r3,1
 800939c:	10c00115 	stw	r3,4(r2)
 80093a0:	801119c0 	call	801119c <__malloc_unlock>
 80093a4:	80800204 	addi	r2,r16,8
 80093a8:	003f3806 	br	800908c <_malloc_r+0x258>
 80093ac:	89000054 	ori	r4,r17,1
 80093b0:	81000115 	stw	r4,4(r16)
 80093b4:	8463883a 	add	r17,r16,r17
 80093b8:	9c400515 	stw	r17,20(r19)
 80093bc:	9c400415 	stw	r17,16(r19)
 80093c0:	19000054 	ori	r4,r3,1
 80093c4:	89000115 	stw	r4,4(r17)
 80093c8:	8085883a 	add	r2,r16,r2
 80093cc:	8a400315 	stw	r9,12(r17)
 80093d0:	8a400215 	stw	r9,8(r17)
 80093d4:	10c00015 	stw	r3,0(r2)
 80093d8:	9009883a 	mov	r4,r18
 80093dc:	801119c0 	call	801119c <__malloc_unlock>
 80093e0:	80800204 	addi	r2,r16,8
 80093e4:	003f2906 	br	800908c <_malloc_r+0x258>
 80093e8:	1006d1ba 	srli	r3,r2,6
 80093ec:	19400e44 	addi	r5,r3,57
 80093f0:	280a90fa 	slli	r5,r5,3
 80093f4:	19000e04 	addi	r4,r3,56
 80093f8:	003fb006 	br	80092bc <_malloc_r+0x488>
 80093fc:	84c04626 	beq	r16,r19,8009518 <_malloc_r+0x6e4>
 8009400:	9c000217 	ldw	r16,8(r19)
 8009404:	85400117 	ldw	r21,4(r16)
 8009408:	00bfff04 	movi	r2,-4
 800940c:	a8aa703a 	and	r21,r21,r2
 8009410:	ac45c83a 	sub	r2,r21,r17
 8009414:	ac400236 	bltu	r21,r17,8009420 <_malloc_r+0x5ec>
 8009418:	10c00408 	cmpgei	r3,r2,16
 800941c:	183f931e 	bne	r3,zero,800926c <_malloc_r+0x438>
 8009420:	9009883a 	mov	r4,r18
 8009424:	801119c0 	call	801119c <__malloc_unlock>
 8009428:	0005883a 	mov	r2,zero
 800942c:	003f1706 	br	800908c <_malloc_r+0x258>
 8009430:	11c01704 	addi	r7,r2,92
 8009434:	380890fa 	slli	r4,r7,3
 8009438:	120016c4 	addi	r8,r2,91
 800943c:	003eb606 	br	8008f18 <_malloc_r+0xe4>
 8009440:	58800217 	ldw	r2,8(r11)
 8009444:	39ffffc4 	addi	r7,r7,-1
 8009448:	12c0701e 	bne	r2,r11,800960c <_malloc_r+0x7d8>
 800944c:	388000cc 	andi	r2,r7,3
 8009450:	5afffe04 	addi	r11,r11,-8
 8009454:	103ffa1e 	bne	r2,zero,8009440 <_malloc_r+0x60c>
 8009458:	98c00117 	ldw	r3,4(r19)
 800945c:	0104303a 	nor	r2,zero,r4
 8009460:	10c4703a 	and	r2,r2,r3
 8009464:	98800115 	stw	r2,4(r19)
 8009468:	2109883a 	add	r4,r4,r4
 800946c:	113f2336 	bltu	r2,r4,80090fc <_malloc_r+0x2c8>
 8009470:	203f2226 	beq	r4,zero,80090fc <_malloc_r+0x2c8>
 8009474:	2086703a 	and	r3,r4,r2
 8009478:	1800041e 	bne	r3,zero,800948c <_malloc_r+0x658>
 800947c:	2109883a 	add	r4,r4,r4
 8009480:	2086703a 	and	r3,r4,r2
 8009484:	63000104 	addi	r12,r12,4
 8009488:	183ffc26 	beq	r3,zero,800947c <_malloc_r+0x648>
 800948c:	600f883a 	mov	r7,r12
 8009490:	003ee206 	br	800901c <_malloc_r+0x1e8>
 8009494:	ad400404 	addi	r21,r21,16
 8009498:	003f2b06 	br	8009148 <_malloc_r+0x314>
 800949c:	2009d0ba 	srai	r4,r4,2
 80094a0:	00800044 	movi	r2,1
 80094a4:	99800117 	ldw	r6,4(r19)
 80094a8:	1104983a 	sll	r2,r2,r4
 80094ac:	1184b03a 	or	r2,r2,r6
 80094b0:	98800115 	stw	r2,4(r19)
 80094b4:	003f8d06 	br	80092ec <_malloc_r+0x4b8>
 80094b8:	bd69883a 	add	r20,r23,r21
 80094bc:	0529c83a 	sub	r20,zero,r20
 80094c0:	a503ffcc 	andi	r20,r20,4095
 80094c4:	a00b883a 	mov	r5,r20
 80094c8:	9009883a 	mov	r4,r18
 80094cc:	800b0440 	call	800b044 <_sbrk_r>
 80094d0:	10ffffe0 	cmpeqi	r3,r2,-1
 80094d4:	183f3f26 	beq	r3,zero,80091d4 <_malloc_r+0x3a0>
 80094d8:	0029883a 	mov	r20,zero
 80094dc:	003f3f06 	br	80091dc <_malloc_r+0x3a8>
 80094e0:	19001568 	cmpgeui	r4,r3,85
 80094e4:	2000201e 	bne	r4,zero,8009568 <_malloc_r+0x734>
 80094e8:	1006d33a 	srli	r3,r2,12
 80094ec:	19401bc4 	addi	r5,r3,111
 80094f0:	280a90fa 	slli	r5,r5,3
 80094f4:	19001b84 	addi	r4,r3,110
 80094f8:	003f7006 	br	80092bc <_malloc_r+0x488>
 80094fc:	10c05568 	cmpgeui	r3,r2,341
 8009500:	1800201e 	bne	r3,zero,8009584 <_malloc_r+0x750>
 8009504:	8804d3fa 	srli	r2,r17,15
 8009508:	11c01e04 	addi	r7,r2,120
 800950c:	380890fa 	slli	r4,r7,3
 8009510:	12001dc4 	addi	r8,r2,119
 8009514:	003e8006 	br	8008f18 <_malloc_r+0xe4>
 8009518:	00820174 	movhi	r2,2053
 800951c:	10da9f17 	ldw	r3,27260(r2)
 8009520:	a8c7883a 	add	r3,r21,r3
 8009524:	10da9f15 	stw	r3,27260(r2)
 8009528:	003f1406 	br	800917c <_malloc_r+0x348>
 800952c:	e083ffcc 	andi	r2,fp,4095
 8009530:	103f121e 	bne	r2,zero,800917c <_malloc_r+0x348>
 8009534:	9c000217 	ldw	r16,8(r19)
 8009538:	b56b883a 	add	r21,r22,r21
 800953c:	ad400054 	ori	r21,r21,1
 8009540:	85400115 	stw	r21,4(r16)
 8009544:	003f3e06 	br	8009240 <_malloc_r+0x40c>
 8009548:	00820174 	movhi	r2,2053
 800954c:	15d8e115 	stw	r23,25476(r2)
 8009550:	003f1206 	br	800919c <_malloc_r+0x368>
 8009554:	b821883a 	mov	r16,r23
 8009558:	003f3906 	br	8009240 <_malloc_r+0x40c>
 800955c:	00800044 	movi	r2,1
 8009560:	b8800115 	stw	r2,4(r23)
 8009564:	003fae06 	br	8009420 <_malloc_r+0x5ec>
 8009568:	19005568 	cmpgeui	r4,r3,341
 800956c:	2000191e 	bne	r4,zero,80095d4 <_malloc_r+0x7a0>
 8009570:	1006d3fa 	srli	r3,r2,15
 8009574:	19401e04 	addi	r5,r3,120
 8009578:	280a90fa 	slli	r5,r5,3
 800957c:	19001dc4 	addi	r4,r3,119
 8009580:	003f4e06 	br	80092bc <_malloc_r+0x488>
 8009584:	10815568 	cmpgeui	r2,r2,1365
 8009588:	1000191e 	bne	r2,zero,80095f0 <_malloc_r+0x7bc>
 800958c:	8804d4ba 	srli	r2,r17,18
 8009590:	11c01f44 	addi	r7,r2,125
 8009594:	380890fa 	slli	r4,r7,3
 8009598:	12001f04 	addi	r8,r2,124
 800959c:	003e5e06 	br	8008f18 <_malloc_r+0xe4>
 80095a0:	e73ffe04 	addi	fp,fp,-8
 80095a4:	af2b883a 	add	r21,r21,fp
 80095a8:	adebc83a 	sub	r21,r21,r23
 80095ac:	0029883a 	mov	r20,zero
 80095b0:	003f0a06 	br	80091dc <_malloc_r+0x3a8>
 80095b4:	81400204 	addi	r5,r16,8
 80095b8:	9009883a 	mov	r4,r18
 80095bc:	80082380 	call	8008238 <_free_r>
 80095c0:	9c000217 	ldw	r16,8(r19)
 80095c4:	00820174 	movhi	r2,2053
 80095c8:	151a9f17 	ldw	r20,27260(r2)
 80095cc:	85400117 	ldw	r21,4(r16)
 80095d0:	003f1b06 	br	8009240 <_malloc_r+0x40c>
 80095d4:	18c15568 	cmpgeui	r3,r3,1365
 80095d8:	1800091e 	bne	r3,zero,8009600 <_malloc_r+0x7cc>
 80095dc:	1006d4ba 	srli	r3,r2,18
 80095e0:	19401f44 	addi	r5,r3,125
 80095e4:	280a90fa 	slli	r5,r5,3
 80095e8:	19001f04 	addi	r4,r3,124
 80095ec:	003f3306 	br	80092bc <_malloc_r+0x488>
 80095f0:	0100fe04 	movi	r4,1016
 80095f4:	01c01fc4 	movi	r7,127
 80095f8:	02001f84 	movi	r8,126
 80095fc:	003e4606 	br	8008f18 <_malloc_r+0xe4>
 8009600:	0140fe04 	movi	r5,1016
 8009604:	01001f84 	movi	r4,126
 8009608:	003f2c06 	br	80092bc <_malloc_r+0x488>
 800960c:	98800117 	ldw	r2,4(r19)
 8009610:	003f9506 	br	8009468 <_malloc_r+0x634>

08009614 <memchr>:
 8009614:	208000cc 	andi	r2,r4,3
 8009618:	280f883a 	mov	r7,r5
 800961c:	10000e26 	beq	r2,zero,8009658 <memchr+0x44>
 8009620:	30bfffc4 	addi	r2,r6,-1
 8009624:	30001726 	beq	r6,zero,8009684 <memchr+0x70>
 8009628:	29803fcc 	andi	r6,r5,255
 800962c:	00000606 	br	8009648 <memchr+0x34>
 8009630:	21000044 	addi	r4,r4,1
 8009634:	20c000cc 	andi	r3,r4,3
 8009638:	18000826 	beq	r3,zero,800965c <memchr+0x48>
 800963c:	10bfffc4 	addi	r2,r2,-1
 8009640:	10ffffe0 	cmpeqi	r3,r2,-1
 8009644:	18000f1e 	bne	r3,zero,8009684 <memchr+0x70>
 8009648:	20c00003 	ldbu	r3,0(r4)
 800964c:	19bff81e 	bne	r3,r6,8009630 <memchr+0x1c>
 8009650:	2005883a 	mov	r2,r4
 8009654:	f800283a 	ret
 8009658:	3005883a 	mov	r2,r6
 800965c:	10c00128 	cmpgeui	r3,r2,4
 8009660:	18000a1e 	bne	r3,zero,800968c <memchr+0x78>
 8009664:	10001f26 	beq	r2,zero,80096e4 <memchr+0xd0>
 8009668:	2087883a 	add	r3,r4,r2
 800966c:	39803fcc 	andi	r6,r7,255
 8009670:	2005883a 	mov	r2,r4
 8009674:	11000003 	ldbu	r4,0(r2)
 8009678:	21bff626 	beq	r4,r6,8009654 <memchr+0x40>
 800967c:	10800044 	addi	r2,r2,1
 8009680:	18bffc1e 	bne	r3,r2,8009674 <memchr+0x60>
 8009684:	0005883a 	mov	r2,zero
 8009688:	f800283a 	ret
 800968c:	2810923a 	slli	r8,r5,8
 8009690:	29403fcc 	andi	r5,r5,255
 8009694:	027fbff4 	movhi	r9,65279
 8009698:	423fffcc 	andi	r8,r8,65535
 800969c:	414ab03a 	or	r5,r8,r5
 80096a0:	2810943a 	slli	r8,r5,16
 80096a4:	01a02074 	movhi	r6,32897
 80096a8:	4a7fbfc4 	addi	r9,r9,-257
 80096ac:	4150b03a 	or	r8,r8,r5
 80096b0:	31a02004 	addi	r6,r6,-32640
 80096b4:	20c00017 	ldw	r3,0(r4)
 80096b8:	40c6f03a 	xor	r3,r8,r3
 80096bc:	1a4b883a 	add	r5,r3,r9
 80096c0:	00c6303a 	nor	r3,zero,r3
 80096c4:	28c6703a 	and	r3,r5,r3
 80096c8:	1986703a 	and	r3,r3,r6
 80096cc:	183fe61e 	bne	r3,zero,8009668 <memchr+0x54>
 80096d0:	10bfff04 	addi	r2,r2,-4
 80096d4:	10c00128 	cmpgeui	r3,r2,4
 80096d8:	21000104 	addi	r4,r4,4
 80096dc:	183ff51e 	bne	r3,zero,80096b4 <memchr+0xa0>
 80096e0:	003fe006 	br	8009664 <memchr+0x50>
 80096e4:	f800283a 	ret

080096e8 <memmove>:
 80096e8:	2005883a 	mov	r2,r4
 80096ec:	29000a2e 	bgeu	r5,r4,8009718 <memmove+0x30>
 80096f0:	2989883a 	add	r4,r5,r6
 80096f4:	1100082e 	bgeu	r2,r4,8009718 <memmove+0x30>
 80096f8:	1187883a 	add	r3,r2,r6
 80096fc:	30003e26 	beq	r6,zero,80097f8 <memmove+0x110>
 8009700:	217fffc3 	ldbu	r5,-1(r4)
 8009704:	18ffffc4 	addi	r3,r3,-1
 8009708:	213fffc4 	addi	r4,r4,-1
 800970c:	19400005 	stb	r5,0(r3)
 8009710:	10fffb1e 	bne	r2,r3,8009700 <memmove+0x18>
 8009714:	f800283a 	ret
 8009718:	30c00430 	cmpltui	r3,r6,16
 800971c:	18000b26 	beq	r3,zero,800974c <memmove+0x64>
 8009720:	1007883a 	mov	r3,r2
 8009724:	31ffffc4 	addi	r7,r6,-1
 8009728:	30003726 	beq	r6,zero,8009808 <memmove+0x120>
 800972c:	39c00044 	addi	r7,r7,1
 8009730:	29cf883a 	add	r7,r5,r7
 8009734:	29800003 	ldbu	r6,0(r5)
 8009738:	29400044 	addi	r5,r5,1
 800973c:	18c00044 	addi	r3,r3,1
 8009740:	19bfffc5 	stb	r6,-1(r3)
 8009744:	29fffb1e 	bne	r5,r7,8009734 <memmove+0x4c>
 8009748:	f800283a 	ret
 800974c:	2886b03a 	or	r3,r5,r2
 8009750:	18c000cc 	andi	r3,r3,3
 8009754:	1800291e 	bne	r3,zero,80097fc <memmove+0x114>
 8009758:	327ffc04 	addi	r9,r6,-16
 800975c:	4812d13a 	srli	r9,r9,4
 8009760:	280f883a 	mov	r7,r5
 8009764:	1007883a 	mov	r3,r2
 8009768:	4a400044 	addi	r9,r9,1
 800976c:	4812913a 	slli	r9,r9,4
 8009770:	1251883a 	add	r8,r2,r9
 8009774:	39000017 	ldw	r4,0(r7)
 8009778:	39c00404 	addi	r7,r7,16
 800977c:	18c00404 	addi	r3,r3,16
 8009780:	193ffc15 	stw	r4,-16(r3)
 8009784:	393ffd17 	ldw	r4,-12(r7)
 8009788:	193ffd15 	stw	r4,-12(r3)
 800978c:	393ffe17 	ldw	r4,-8(r7)
 8009790:	193ffe15 	stw	r4,-8(r3)
 8009794:	393fff17 	ldw	r4,-4(r7)
 8009798:	193fff15 	stw	r4,-4(r3)
 800979c:	40fff51e 	bne	r8,r3,8009774 <memmove+0x8c>
 80097a0:	3100030c 	andi	r4,r6,12
 80097a4:	2a4b883a 	add	r5,r5,r9
 80097a8:	320003cc 	andi	r8,r6,15
 80097ac:	20001726 	beq	r4,zero,800980c <memmove+0x124>
 80097b0:	2813883a 	mov	r9,r5
 80097b4:	180f883a 	mov	r7,r3
 80097b8:	4a800017 	ldw	r10,0(r9)
 80097bc:	39c00104 	addi	r7,r7,4
 80097c0:	41c9c83a 	sub	r4,r8,r7
 80097c4:	1909883a 	add	r4,r3,r4
 80097c8:	21000128 	cmpgeui	r4,r4,4
 80097cc:	3abfff15 	stw	r10,-4(r7)
 80097d0:	4a400104 	addi	r9,r9,4
 80097d4:	203ff81e 	bne	r4,zero,80097b8 <memmove+0xd0>
 80097d8:	413fff04 	addi	r4,r8,-4
 80097dc:	2008d0ba 	srli	r4,r4,2
 80097e0:	318000cc 	andi	r6,r6,3
 80097e4:	21000044 	addi	r4,r4,1
 80097e8:	200890ba 	slli	r4,r4,2
 80097ec:	1907883a 	add	r3,r3,r4
 80097f0:	290b883a 	add	r5,r5,r4
 80097f4:	003fcb06 	br	8009724 <memmove+0x3c>
 80097f8:	f800283a 	ret
 80097fc:	31ffffc4 	addi	r7,r6,-1
 8009800:	1007883a 	mov	r3,r2
 8009804:	003fc906 	br	800972c <memmove+0x44>
 8009808:	f800283a 	ret
 800980c:	400d883a 	mov	r6,r8
 8009810:	003fc406 	br	8009724 <memmove+0x3c>

08009814 <_Balloc>:
 8009814:	20801317 	ldw	r2,76(r4)
 8009818:	defffc04 	addi	sp,sp,-16
 800981c:	dc400115 	stw	r17,4(sp)
 8009820:	dc000015 	stw	r16,0(sp)
 8009824:	dfc00315 	stw	ra,12(sp)
 8009828:	dc800215 	stw	r18,8(sp)
 800982c:	2021883a 	mov	r16,r4
 8009830:	2823883a 	mov	r17,r5
 8009834:	10000e26 	beq	r2,zero,8009870 <_Balloc+0x5c>
 8009838:	880690ba 	slli	r3,r17,2
 800983c:	10c7883a 	add	r3,r2,r3
 8009840:	18800017 	ldw	r2,0(r3)
 8009844:	10001126 	beq	r2,zero,800988c <_Balloc+0x78>
 8009848:	11000017 	ldw	r4,0(r2)
 800984c:	19000015 	stw	r4,0(r3)
 8009850:	10000415 	stw	zero,16(r2)
 8009854:	10000315 	stw	zero,12(r2)
 8009858:	dfc00317 	ldw	ra,12(sp)
 800985c:	dc800217 	ldw	r18,8(sp)
 8009860:	dc400117 	ldw	r17,4(sp)
 8009864:	dc000017 	ldw	r16,0(sp)
 8009868:	dec00404 	addi	sp,sp,16
 800986c:	f800283a 	ret
 8009870:	01800844 	movi	r6,33
 8009874:	01400104 	movi	r5,4
 8009878:	800c8f80 	call	800c8f8 <_calloc_r>
 800987c:	80801315 	stw	r2,76(r16)
 8009880:	103fed1e 	bne	r2,zero,8009838 <_Balloc+0x24>
 8009884:	0005883a 	mov	r2,zero
 8009888:	003ff306 	br	8009858 <_Balloc+0x44>
 800988c:	04800044 	movi	r18,1
 8009890:	9464983a 	sll	r18,r18,r17
 8009894:	01400044 	movi	r5,1
 8009898:	8009883a 	mov	r4,r16
 800989c:	91800144 	addi	r6,r18,5
 80098a0:	300c90ba 	slli	r6,r6,2
 80098a4:	800c8f80 	call	800c8f8 <_calloc_r>
 80098a8:	103ff626 	beq	r2,zero,8009884 <_Balloc+0x70>
 80098ac:	14400115 	stw	r17,4(r2)
 80098b0:	14800215 	stw	r18,8(r2)
 80098b4:	003fe606 	br	8009850 <_Balloc+0x3c>

080098b8 <_Bfree>:
 80098b8:	28000726 	beq	r5,zero,80098d8 <_Bfree+0x20>
 80098bc:	28c00117 	ldw	r3,4(r5)
 80098c0:	20801317 	ldw	r2,76(r4)
 80098c4:	180690ba 	slli	r3,r3,2
 80098c8:	10c5883a 	add	r2,r2,r3
 80098cc:	10c00017 	ldw	r3,0(r2)
 80098d0:	28c00015 	stw	r3,0(r5)
 80098d4:	11400015 	stw	r5,0(r2)
 80098d8:	f800283a 	ret

080098dc <__multadd>:
 80098dc:	defffa04 	addi	sp,sp,-24
 80098e0:	dc400115 	stw	r17,4(sp)
 80098e4:	2c400417 	ldw	r17,16(r5)
 80098e8:	dcc00315 	stw	r19,12(sp)
 80098ec:	dc800215 	stw	r18,8(sp)
 80098f0:	dc000015 	stw	r16,0(sp)
 80098f4:	dfc00515 	stw	ra,20(sp)
 80098f8:	dd000415 	stw	r20,16(sp)
 80098fc:	2825883a 	mov	r18,r5
 8009900:	2027883a 	mov	r19,r4
 8009904:	3821883a 	mov	r16,r7
 8009908:	2a000504 	addi	r8,r5,20
 800990c:	0013883a 	mov	r9,zero
 8009910:	40800017 	ldw	r2,0(r8)
 8009914:	42000104 	addi	r8,r8,4
 8009918:	4a400044 	addi	r9,r9,1
 800991c:	10ffffcc 	andi	r3,r2,65535
 8009920:	1987383a 	mul	r3,r3,r6
 8009924:	100ed43a 	srli	r7,r2,16
 8009928:	1c05883a 	add	r2,r3,r16
 800992c:	1006d43a 	srli	r3,r2,16
 8009930:	398f383a 	mul	r7,r7,r6
 8009934:	10bfffcc 	andi	r2,r2,65535
 8009938:	38cf883a 	add	r7,r7,r3
 800993c:	3806943a 	slli	r3,r7,16
 8009940:	3820d43a 	srli	r16,r7,16
 8009944:	1885883a 	add	r2,r3,r2
 8009948:	40bfff15 	stw	r2,-4(r8)
 800994c:	4c7ff016 	blt	r9,r17,8009910 <__multadd+0x34>
 8009950:	80000826 	beq	r16,zero,8009974 <__multadd+0x98>
 8009954:	90800217 	ldw	r2,8(r18)
 8009958:	88800f0e 	bge	r17,r2,8009998 <__multadd+0xbc>
 800995c:	88800144 	addi	r2,r17,5
 8009960:	100490ba 	slli	r2,r2,2
 8009964:	8c400044 	addi	r17,r17,1
 8009968:	9085883a 	add	r2,r18,r2
 800996c:	14000015 	stw	r16,0(r2)
 8009970:	94400415 	stw	r17,16(r18)
 8009974:	9005883a 	mov	r2,r18
 8009978:	dfc00517 	ldw	ra,20(sp)
 800997c:	dd000417 	ldw	r20,16(sp)
 8009980:	dcc00317 	ldw	r19,12(sp)
 8009984:	dc800217 	ldw	r18,8(sp)
 8009988:	dc400117 	ldw	r17,4(sp)
 800998c:	dc000017 	ldw	r16,0(sp)
 8009990:	dec00604 	addi	sp,sp,24
 8009994:	f800283a 	ret
 8009998:	91400117 	ldw	r5,4(r18)
 800999c:	9809883a 	mov	r4,r19
 80099a0:	29400044 	addi	r5,r5,1
 80099a4:	80098140 	call	8009814 <_Balloc>
 80099a8:	1029883a 	mov	r20,r2
 80099ac:	10001226 	beq	r2,zero,80099f8 <__multadd+0x11c>
 80099b0:	91800417 	ldw	r6,16(r18)
 80099b4:	91400304 	addi	r5,r18,12
 80099b8:	11000304 	addi	r4,r2,12
 80099bc:	31800084 	addi	r6,r6,2
 80099c0:	300c90ba 	slli	r6,r6,2
 80099c4:	8002ea40 	call	8002ea4 <memcpy>
 80099c8:	90000926 	beq	r18,zero,80099f0 <__multadd+0x114>
 80099cc:	90c00117 	ldw	r3,4(r18)
 80099d0:	98801317 	ldw	r2,76(r19)
 80099d4:	180690ba 	slli	r3,r3,2
 80099d8:	10c5883a 	add	r2,r2,r3
 80099dc:	10c00017 	ldw	r3,0(r2)
 80099e0:	90c00015 	stw	r3,0(r18)
 80099e4:	14800015 	stw	r18,0(r2)
 80099e8:	a025883a 	mov	r18,r20
 80099ec:	003fdb06 	br	800995c <__multadd+0x80>
 80099f0:	a025883a 	mov	r18,r20
 80099f4:	003fd906 	br	800995c <__multadd+0x80>
 80099f8:	01c20174 	movhi	r7,2053
 80099fc:	01020174 	movhi	r4,2053
 8009a00:	39fe7a04 	addi	r7,r7,-1560
 8009a04:	000d883a 	mov	r6,zero
 8009a08:	01402d44 	movi	r5,181
 8009a0c:	213e8e04 	addi	r4,r4,-1480
 8009a10:	800c8800 	call	800c880 <__assert_func>

08009a14 <__s2b>:
 8009a14:	defff904 	addi	sp,sp,-28
 8009a18:	dc800215 	stw	r18,8(sp)
 8009a1c:	dc000015 	stw	r16,0(sp)
 8009a20:	2025883a 	mov	r18,r4
 8009a24:	2821883a 	mov	r16,r5
 8009a28:	39000204 	addi	r4,r7,8
 8009a2c:	01400244 	movi	r5,9
 8009a30:	dcc00315 	stw	r19,12(sp)
 8009a34:	dc400115 	stw	r17,4(sp)
 8009a38:	dfc00615 	stw	ra,24(sp)
 8009a3c:	3823883a 	mov	r17,r7
 8009a40:	dd400515 	stw	r21,20(sp)
 8009a44:	dd000415 	stw	r20,16(sp)
 8009a48:	3027883a 	mov	r19,r6
 8009a4c:	800e13c0 	call	800e13c <__divsi3>
 8009a50:	88c00290 	cmplti	r3,r17,10
 8009a54:	1800341e 	bne	r3,zero,8009b28 <__s2b+0x114>
 8009a58:	00c00044 	movi	r3,1
 8009a5c:	000b883a 	mov	r5,zero
 8009a60:	18c7883a 	add	r3,r3,r3
 8009a64:	29400044 	addi	r5,r5,1
 8009a68:	18bffd16 	blt	r3,r2,8009a60 <__s2b+0x4c>
 8009a6c:	9009883a 	mov	r4,r18
 8009a70:	80098140 	call	8009814 <_Balloc>
 8009a74:	100b883a 	mov	r5,r2
 8009a78:	10002d26 	beq	r2,zero,8009b30 <__s2b+0x11c>
 8009a7c:	d8800717 	ldw	r2,28(sp)
 8009a80:	28800515 	stw	r2,20(r5)
 8009a84:	00800044 	movi	r2,1
 8009a88:	28800415 	stw	r2,16(r5)
 8009a8c:	98800290 	cmplti	r2,r19,10
 8009a90:	1000221e 	bne	r2,zero,8009b1c <__s2b+0x108>
 8009a94:	85400244 	addi	r21,r16,9
 8009a98:	a829883a 	mov	r20,r21
 8009a9c:	84e1883a 	add	r16,r16,r19
 8009aa0:	a1c00007 	ldb	r7,0(r20)
 8009aa4:	01800284 	movi	r6,10
 8009aa8:	9009883a 	mov	r4,r18
 8009aac:	39fff404 	addi	r7,r7,-48
 8009ab0:	80098dc0 	call	80098dc <__multadd>
 8009ab4:	a5000044 	addi	r20,r20,1
 8009ab8:	100b883a 	mov	r5,r2
 8009abc:	a43ff81e 	bne	r20,r16,8009aa0 <__s2b+0x8c>
 8009ac0:	9c3ffe04 	addi	r16,r19,-8
 8009ac4:	ac21883a 	add	r16,r21,r16
 8009ac8:	9c400a0e 	bge	r19,r17,8009af4 <__s2b+0xe0>
 8009acc:	8ce3c83a 	sub	r17,r17,r19
 8009ad0:	8463883a 	add	r17,r16,r17
 8009ad4:	81c00007 	ldb	r7,0(r16)
 8009ad8:	01800284 	movi	r6,10
 8009adc:	9009883a 	mov	r4,r18
 8009ae0:	39fff404 	addi	r7,r7,-48
 8009ae4:	80098dc0 	call	80098dc <__multadd>
 8009ae8:	84000044 	addi	r16,r16,1
 8009aec:	100b883a 	mov	r5,r2
 8009af0:	8c3ff81e 	bne	r17,r16,8009ad4 <__s2b+0xc0>
 8009af4:	2805883a 	mov	r2,r5
 8009af8:	dfc00617 	ldw	ra,24(sp)
 8009afc:	dd400517 	ldw	r21,20(sp)
 8009b00:	dd000417 	ldw	r20,16(sp)
 8009b04:	dcc00317 	ldw	r19,12(sp)
 8009b08:	dc800217 	ldw	r18,8(sp)
 8009b0c:	dc400117 	ldw	r17,4(sp)
 8009b10:	dc000017 	ldw	r16,0(sp)
 8009b14:	dec00704 	addi	sp,sp,28
 8009b18:	f800283a 	ret
 8009b1c:	84000284 	addi	r16,r16,10
 8009b20:	04c00244 	movi	r19,9
 8009b24:	003fe806 	br	8009ac8 <__s2b+0xb4>
 8009b28:	000b883a 	mov	r5,zero
 8009b2c:	003fcf06 	br	8009a6c <__s2b+0x58>
 8009b30:	01c20174 	movhi	r7,2053
 8009b34:	01020174 	movhi	r4,2053
 8009b38:	39fe7a04 	addi	r7,r7,-1560
 8009b3c:	000d883a 	mov	r6,zero
 8009b40:	01403384 	movi	r5,206
 8009b44:	213e8e04 	addi	r4,r4,-1480
 8009b48:	800c8800 	call	800c880 <__assert_func>

08009b4c <__hi0bits>:
 8009b4c:	20bfffec 	andhi	r2,r4,65535
 8009b50:	1000131e 	bne	r2,zero,8009ba0 <__hi0bits+0x54>
 8009b54:	2008943a 	slli	r4,r4,16
 8009b58:	00800404 	movi	r2,16
 8009b5c:	20ffc02c 	andhi	r3,r4,65280
 8009b60:	1800021e 	bne	r3,zero,8009b6c <__hi0bits+0x20>
 8009b64:	2008923a 	slli	r4,r4,8
 8009b68:	10800204 	addi	r2,r2,8
 8009b6c:	20fc002c 	andhi	r3,r4,61440
 8009b70:	1800021e 	bne	r3,zero,8009b7c <__hi0bits+0x30>
 8009b74:	2008913a 	slli	r4,r4,4
 8009b78:	10800104 	addi	r2,r2,4
 8009b7c:	20f0002c 	andhi	r3,r4,49152
 8009b80:	1800021e 	bne	r3,zero,8009b8c <__hi0bits+0x40>
 8009b84:	200890ba 	slli	r4,r4,2
 8009b88:	10800084 	addi	r2,r2,2
 8009b8c:	20000316 	blt	r4,zero,8009b9c <__hi0bits+0x50>
 8009b90:	2110002c 	andhi	r4,r4,16384
 8009b94:	10800044 	addi	r2,r2,1
 8009b98:	20000326 	beq	r4,zero,8009ba8 <__hi0bits+0x5c>
 8009b9c:	f800283a 	ret
 8009ba0:	0005883a 	mov	r2,zero
 8009ba4:	003fed06 	br	8009b5c <__hi0bits+0x10>
 8009ba8:	00800804 	movi	r2,32
 8009bac:	f800283a 	ret

08009bb0 <__lo0bits>:
 8009bb0:	20c00017 	ldw	r3,0(r4)
 8009bb4:	188001cc 	andi	r2,r3,7
 8009bb8:	10000826 	beq	r2,zero,8009bdc <__lo0bits+0x2c>
 8009bbc:	1880004c 	andi	r2,r3,1
 8009bc0:	10001f1e 	bne	r2,zero,8009c40 <__lo0bits+0x90>
 8009bc4:	1880008c 	andi	r2,r3,2
 8009bc8:	10002126 	beq	r2,zero,8009c50 <__lo0bits+0xa0>
 8009bcc:	1806d07a 	srli	r3,r3,1
 8009bd0:	00800044 	movi	r2,1
 8009bd4:	20c00015 	stw	r3,0(r4)
 8009bd8:	f800283a 	ret
 8009bdc:	18bfffcc 	andi	r2,r3,65535
 8009be0:	10001426 	beq	r2,zero,8009c34 <__lo0bits+0x84>
 8009be4:	0005883a 	mov	r2,zero
 8009be8:	19403fcc 	andi	r5,r3,255
 8009bec:	2800021e 	bne	r5,zero,8009bf8 <__lo0bits+0x48>
 8009bf0:	1806d23a 	srli	r3,r3,8
 8009bf4:	10800204 	addi	r2,r2,8
 8009bf8:	194003cc 	andi	r5,r3,15
 8009bfc:	2800021e 	bne	r5,zero,8009c08 <__lo0bits+0x58>
 8009c00:	1806d13a 	srli	r3,r3,4
 8009c04:	10800104 	addi	r2,r2,4
 8009c08:	194000cc 	andi	r5,r3,3
 8009c0c:	2800021e 	bne	r5,zero,8009c18 <__lo0bits+0x68>
 8009c10:	1806d0ba 	srli	r3,r3,2
 8009c14:	10800084 	addi	r2,r2,2
 8009c18:	1940004c 	andi	r5,r3,1
 8009c1c:	2800031e 	bne	r5,zero,8009c2c <__lo0bits+0x7c>
 8009c20:	1806d07a 	srli	r3,r3,1
 8009c24:	10800044 	addi	r2,r2,1
 8009c28:	18000726 	beq	r3,zero,8009c48 <__lo0bits+0x98>
 8009c2c:	20c00015 	stw	r3,0(r4)
 8009c30:	f800283a 	ret
 8009c34:	1806d43a 	srli	r3,r3,16
 8009c38:	00800404 	movi	r2,16
 8009c3c:	003fea06 	br	8009be8 <__lo0bits+0x38>
 8009c40:	0005883a 	mov	r2,zero
 8009c44:	f800283a 	ret
 8009c48:	00800804 	movi	r2,32
 8009c4c:	f800283a 	ret
 8009c50:	1806d0ba 	srli	r3,r3,2
 8009c54:	00800084 	movi	r2,2
 8009c58:	20c00015 	stw	r3,0(r4)
 8009c5c:	f800283a 	ret

08009c60 <__i2b>:
 8009c60:	defffe04 	addi	sp,sp,-8
 8009c64:	dc000015 	stw	r16,0(sp)
 8009c68:	2821883a 	mov	r16,r5
 8009c6c:	01400044 	movi	r5,1
 8009c70:	dfc00115 	stw	ra,4(sp)
 8009c74:	80098140 	call	8009814 <_Balloc>
 8009c78:	10000726 	beq	r2,zero,8009c98 <__i2b+0x38>
 8009c7c:	01000044 	movi	r4,1
 8009c80:	14000515 	stw	r16,20(r2)
 8009c84:	11000415 	stw	r4,16(r2)
 8009c88:	dfc00117 	ldw	ra,4(sp)
 8009c8c:	dc000017 	ldw	r16,0(sp)
 8009c90:	dec00204 	addi	sp,sp,8
 8009c94:	f800283a 	ret
 8009c98:	01c20174 	movhi	r7,2053
 8009c9c:	01020174 	movhi	r4,2053
 8009ca0:	39fe7a04 	addi	r7,r7,-1560
 8009ca4:	000d883a 	mov	r6,zero
 8009ca8:	01405004 	movi	r5,320
 8009cac:	213e8e04 	addi	r4,r4,-1480
 8009cb0:	800c8800 	call	800c880 <__assert_func>

08009cb4 <__multiply>:
 8009cb4:	defffa04 	addi	sp,sp,-24
 8009cb8:	dcc00315 	stw	r19,12(sp)
 8009cbc:	dc800215 	stw	r18,8(sp)
 8009cc0:	34c00417 	ldw	r19,16(r6)
 8009cc4:	2c800417 	ldw	r18,16(r5)
 8009cc8:	dd000415 	stw	r20,16(sp)
 8009ccc:	dc400115 	stw	r17,4(sp)
 8009cd0:	dfc00515 	stw	ra,20(sp)
 8009cd4:	dc000015 	stw	r16,0(sp)
 8009cd8:	2829883a 	mov	r20,r5
 8009cdc:	3023883a 	mov	r17,r6
 8009ce0:	94c00516 	blt	r18,r19,8009cf8 <__multiply+0x44>
 8009ce4:	9807883a 	mov	r3,r19
 8009ce8:	2823883a 	mov	r17,r5
 8009cec:	9027883a 	mov	r19,r18
 8009cf0:	3029883a 	mov	r20,r6
 8009cf4:	1825883a 	mov	r18,r3
 8009cf8:	88800217 	ldw	r2,8(r17)
 8009cfc:	9ca1883a 	add	r16,r19,r18
 8009d00:	89400117 	ldw	r5,4(r17)
 8009d04:	1400010e 	bge	r2,r16,8009d0c <__multiply+0x58>
 8009d08:	29400044 	addi	r5,r5,1
 8009d0c:	80098140 	call	8009814 <_Balloc>
 8009d10:	10006d26 	beq	r2,zero,8009ec8 <__multiply+0x214>
 8009d14:	801290ba 	slli	r9,r16,2
 8009d18:	12800504 	addi	r10,r2,20
 8009d1c:	5007883a 	mov	r3,r10
 8009d20:	5253883a 	add	r9,r10,r9
 8009d24:	5240032e 	bgeu	r10,r9,8009d34 <__multiply+0x80>
 8009d28:	18000015 	stw	zero,0(r3)
 8009d2c:	18c00104 	addi	r3,r3,4
 8009d30:	1a7ffd36 	bltu	r3,r9,8009d28 <__multiply+0x74>
 8009d34:	901690ba 	slli	r11,r18,2
 8009d38:	980e90ba 	slli	r7,r19,2
 8009d3c:	a2000504 	addi	r8,r20,20
 8009d40:	8b000504 	addi	r12,r17,20
 8009d44:	42d7883a 	add	r11,r8,r11
 8009d48:	61cf883a 	add	r7,r12,r7
 8009d4c:	42c02e2e 	bgeu	r8,r11,8009e08 <__multiply+0x154>
 8009d50:	88c00544 	addi	r3,r17,21
 8009d54:	38c03c36 	bltu	r7,r3,8009e48 <__multiply+0x194>
 8009d58:	3c4dc83a 	sub	r6,r7,r17
 8009d5c:	31bffac4 	addi	r6,r6,-21
 8009d60:	300cd0ba 	srli	r6,r6,2
 8009d64:	31800044 	addi	r6,r6,1
 8009d68:	300c90ba 	slli	r6,r6,2
 8009d6c:	00000306 	br	8009d7c <__multiply+0xc8>
 8009d70:	42000104 	addi	r8,r8,4
 8009d74:	52800104 	addi	r10,r10,4
 8009d78:	42c0232e 	bgeu	r8,r11,8009e08 <__multiply+0x154>
 8009d7c:	43800017 	ldw	r14,0(r8)
 8009d80:	77ffffcc 	andi	ra,r14,65535
 8009d84:	f800341e 	bne	ra,zero,8009e58 <__multiply+0x1a4>
 8009d88:	701cd43a 	srli	r14,r14,16
 8009d8c:	703ff826 	beq	r14,zero,8009d70 <__multiply+0xbc>
 8009d90:	50c00017 	ldw	r3,0(r10)
 8009d94:	501f883a 	mov	r15,r10
 8009d98:	601b883a 	mov	r13,r12
 8009d9c:	183f883a 	mov	ra,r3
 8009da0:	0023883a 	mov	r17,zero
 8009da4:	6940000b 	ldhu	r5,0(r13)
 8009da8:	f824d43a 	srli	r18,ra,16
 8009dac:	193fffcc 	andi	r4,r3,65535
 8009db0:	2b8b383a 	mul	r5,r5,r14
 8009db4:	6b400104 	addi	r13,r13,4
 8009db8:	7fc00117 	ldw	ra,4(r15)
 8009dbc:	2c8b883a 	add	r5,r5,r18
 8009dc0:	2c4b883a 	add	r5,r5,r17
 8009dc4:	2806943a 	slli	r3,r5,16
 8009dc8:	280ad43a 	srli	r5,r5,16
 8009dcc:	fc7fffcc 	andi	r17,ra,65535
 8009dd0:	1908b03a 	or	r4,r3,r4
 8009dd4:	79000015 	stw	r4,0(r15)
 8009dd8:	68ffff8b 	ldhu	r3,-2(r13)
 8009ddc:	7bc00104 	addi	r15,r15,4
 8009de0:	1b87383a 	mul	r3,r3,r14
 8009de4:	1c47883a 	add	r3,r3,r17
 8009de8:	1947883a 	add	r3,r3,r5
 8009dec:	1822d43a 	srli	r17,r3,16
 8009df0:	69ffec36 	bltu	r13,r7,8009da4 <__multiply+0xf0>
 8009df4:	5189883a 	add	r4,r10,r6
 8009df8:	20c00015 	stw	r3,0(r4)
 8009dfc:	42000104 	addi	r8,r8,4
 8009e00:	52800104 	addi	r10,r10,4
 8009e04:	42ffdd36 	bltu	r8,r11,8009d7c <__multiply+0xc8>
 8009e08:	04000316 	blt	zero,r16,8009e18 <__multiply+0x164>
 8009e0c:	00000506 	br	8009e24 <__multiply+0x170>
 8009e10:	843fffc4 	addi	r16,r16,-1
 8009e14:	80000326 	beq	r16,zero,8009e24 <__multiply+0x170>
 8009e18:	48ffff17 	ldw	r3,-4(r9)
 8009e1c:	4a7fff04 	addi	r9,r9,-4
 8009e20:	183ffb26 	beq	r3,zero,8009e10 <__multiply+0x15c>
 8009e24:	14000415 	stw	r16,16(r2)
 8009e28:	dfc00517 	ldw	ra,20(sp)
 8009e2c:	dd000417 	ldw	r20,16(sp)
 8009e30:	dcc00317 	ldw	r19,12(sp)
 8009e34:	dc800217 	ldw	r18,8(sp)
 8009e38:	dc400117 	ldw	r17,4(sp)
 8009e3c:	dc000017 	ldw	r16,0(sp)
 8009e40:	dec00604 	addi	sp,sp,24
 8009e44:	f800283a 	ret
 8009e48:	43800017 	ldw	r14,0(r8)
 8009e4c:	01800104 	movi	r6,4
 8009e50:	77ffffcc 	andi	ra,r14,65535
 8009e54:	f83fcc26 	beq	ra,zero,8009d88 <__multiply+0xd4>
 8009e58:	501f883a 	mov	r15,r10
 8009e5c:	601d883a 	mov	r14,r12
 8009e60:	0023883a 	mov	r17,zero
 8009e64:	71000017 	ldw	r4,0(r14)
 8009e68:	7b400017 	ldw	r13,0(r15)
 8009e6c:	7bc00104 	addi	r15,r15,4
 8009e70:	217fffcc 	andi	r5,r4,65535
 8009e74:	2fcb383a 	mul	r5,r5,ra
 8009e78:	2006d43a 	srli	r3,r4,16
 8009e7c:	693fffcc 	andi	r4,r13,65535
 8009e80:	290b883a 	add	r5,r5,r4
 8009e84:	2c4b883a 	add	r5,r5,r17
 8009e88:	1fc7383a 	mul	r3,r3,ra
 8009e8c:	681ad43a 	srli	r13,r13,16
 8009e90:	2808d43a 	srli	r4,r5,16
 8009e94:	297fffcc 	andi	r5,r5,65535
 8009e98:	1b47883a 	add	r3,r3,r13
 8009e9c:	1907883a 	add	r3,r3,r4
 8009ea0:	1808943a 	slli	r4,r3,16
 8009ea4:	73800104 	addi	r14,r14,4
 8009ea8:	1822d43a 	srli	r17,r3,16
 8009eac:	214ab03a 	or	r5,r4,r5
 8009eb0:	797fff15 	stw	r5,-4(r15)
 8009eb4:	71ffeb36 	bltu	r14,r7,8009e64 <__multiply+0x1b0>
 8009eb8:	5187883a 	add	r3,r10,r6
 8009ebc:	1c400015 	stw	r17,0(r3)
 8009ec0:	43800017 	ldw	r14,0(r8)
 8009ec4:	003fb006 	br	8009d88 <__multiply+0xd4>
 8009ec8:	01c20174 	movhi	r7,2053
 8009ecc:	01020174 	movhi	r4,2053
 8009ed0:	39fe7a04 	addi	r7,r7,-1560
 8009ed4:	000d883a 	mov	r6,zero
 8009ed8:	01405744 	movi	r5,349
 8009edc:	213e8e04 	addi	r4,r4,-1480
 8009ee0:	800c8800 	call	800c880 <__assert_func>

08009ee4 <__pow5mult>:
 8009ee4:	defffb04 	addi	sp,sp,-20
 8009ee8:	dcc00315 	stw	r19,12(sp)
 8009eec:	dc000015 	stw	r16,0(sp)
 8009ef0:	dfc00415 	stw	ra,16(sp)
 8009ef4:	dc800215 	stw	r18,8(sp)
 8009ef8:	dc400115 	stw	r17,4(sp)
 8009efc:	308000cc 	andi	r2,r6,3
 8009f00:	3021883a 	mov	r16,r6
 8009f04:	2027883a 	mov	r19,r4
 8009f08:	10002d1e 	bne	r2,zero,8009fc0 <__pow5mult+0xdc>
 8009f0c:	2825883a 	mov	r18,r5
 8009f10:	8021d0ba 	srai	r16,r16,2
 8009f14:	80001926 	beq	r16,zero,8009f7c <__pow5mult+0x98>
 8009f18:	9c401217 	ldw	r17,72(r19)
 8009f1c:	8800061e 	bne	r17,zero,8009f38 <__pow5mult+0x54>
 8009f20:	00002f06 	br	8009fe0 <__pow5mult+0xfc>
 8009f24:	8021d07a 	srai	r16,r16,1
 8009f28:	80001426 	beq	r16,zero,8009f7c <__pow5mult+0x98>
 8009f2c:	88800017 	ldw	r2,0(r17)
 8009f30:	10001a26 	beq	r2,zero,8009f9c <__pow5mult+0xb8>
 8009f34:	1023883a 	mov	r17,r2
 8009f38:	8080004c 	andi	r2,r16,1
 8009f3c:	103ff926 	beq	r2,zero,8009f24 <__pow5mult+0x40>
 8009f40:	880d883a 	mov	r6,r17
 8009f44:	900b883a 	mov	r5,r18
 8009f48:	9809883a 	mov	r4,r19
 8009f4c:	8009cb40 	call	8009cb4 <__multiply>
 8009f50:	90001926 	beq	r18,zero,8009fb8 <__pow5mult+0xd4>
 8009f54:	91000117 	ldw	r4,4(r18)
 8009f58:	98c01317 	ldw	r3,76(r19)
 8009f5c:	8021d07a 	srai	r16,r16,1
 8009f60:	200890ba 	slli	r4,r4,2
 8009f64:	1907883a 	add	r3,r3,r4
 8009f68:	19000017 	ldw	r4,0(r3)
 8009f6c:	91000015 	stw	r4,0(r18)
 8009f70:	1c800015 	stw	r18,0(r3)
 8009f74:	1025883a 	mov	r18,r2
 8009f78:	803fec1e 	bne	r16,zero,8009f2c <__pow5mult+0x48>
 8009f7c:	9005883a 	mov	r2,r18
 8009f80:	dfc00417 	ldw	ra,16(sp)
 8009f84:	dcc00317 	ldw	r19,12(sp)
 8009f88:	dc800217 	ldw	r18,8(sp)
 8009f8c:	dc400117 	ldw	r17,4(sp)
 8009f90:	dc000017 	ldw	r16,0(sp)
 8009f94:	dec00504 	addi	sp,sp,20
 8009f98:	f800283a 	ret
 8009f9c:	880d883a 	mov	r6,r17
 8009fa0:	880b883a 	mov	r5,r17
 8009fa4:	9809883a 	mov	r4,r19
 8009fa8:	8009cb40 	call	8009cb4 <__multiply>
 8009fac:	88800015 	stw	r2,0(r17)
 8009fb0:	10000015 	stw	zero,0(r2)
 8009fb4:	003fdf06 	br	8009f34 <__pow5mult+0x50>
 8009fb8:	1025883a 	mov	r18,r2
 8009fbc:	003fd906 	br	8009f24 <__pow5mult+0x40>
 8009fc0:	100490ba 	slli	r2,r2,2
 8009fc4:	00c20174 	movhi	r3,2053
 8009fc8:	000f883a 	mov	r7,zero
 8009fcc:	10c7883a 	add	r3,r2,r3
 8009fd0:	19be9c17 	ldw	r6,-1424(r3)
 8009fd4:	80098dc0 	call	80098dc <__multadd>
 8009fd8:	1025883a 	mov	r18,r2
 8009fdc:	003fcc06 	br	8009f10 <__pow5mult+0x2c>
 8009fe0:	01409c44 	movi	r5,625
 8009fe4:	9809883a 	mov	r4,r19
 8009fe8:	8009c600 	call	8009c60 <__i2b>
 8009fec:	98801215 	stw	r2,72(r19)
 8009ff0:	1023883a 	mov	r17,r2
 8009ff4:	10000015 	stw	zero,0(r2)
 8009ff8:	003fcf06 	br	8009f38 <__pow5mult+0x54>

08009ffc <__lshift>:
 8009ffc:	defff904 	addi	sp,sp,-28
 800a000:	dd400515 	stw	r21,20(sp)
 800a004:	dc800215 	stw	r18,8(sp)
 800a008:	302bd17a 	srai	r21,r6,5
 800a00c:	2c800417 	ldw	r18,16(r5)
 800a010:	28800217 	ldw	r2,8(r5)
 800a014:	dd000415 	stw	r20,16(sp)
 800a018:	aca5883a 	add	r18,r21,r18
 800a01c:	dcc00315 	stw	r19,12(sp)
 800a020:	dc400115 	stw	r17,4(sp)
 800a024:	dc000015 	stw	r16,0(sp)
 800a028:	dfc00615 	stw	ra,24(sp)
 800a02c:	94400044 	addi	r17,r18,1
 800a030:	2821883a 	mov	r16,r5
 800a034:	3029883a 	mov	r20,r6
 800a038:	29400117 	ldw	r5,4(r5)
 800a03c:	2027883a 	mov	r19,r4
 800a040:	1440030e 	bge	r2,r17,800a050 <__lshift+0x54>
 800a044:	1085883a 	add	r2,r2,r2
 800a048:	29400044 	addi	r5,r5,1
 800a04c:	147ffd16 	blt	r2,r17,800a044 <__lshift+0x48>
 800a050:	9809883a 	mov	r4,r19
 800a054:	80098140 	call	8009814 <_Balloc>
 800a058:	10004326 	beq	r2,zero,800a168 <__lshift+0x16c>
 800a05c:	12000504 	addi	r8,r2,20
 800a060:	0540090e 	bge	zero,r21,800a088 <__lshift+0x8c>
 800a064:	ad400144 	addi	r21,r21,5
 800a068:	a82a90ba 	slli	r21,r21,2
 800a06c:	4007883a 	mov	r3,r8
 800a070:	1549883a 	add	r4,r2,r21
 800a074:	18c00104 	addi	r3,r3,4
 800a078:	183fff15 	stw	zero,-4(r3)
 800a07c:	193ffd1e 	bne	r3,r4,800a074 <__lshift+0x78>
 800a080:	ad7ffb04 	addi	r21,r21,-20
 800a084:	4551883a 	add	r8,r8,r21
 800a088:	82400417 	ldw	r9,16(r16)
 800a08c:	80c00504 	addi	r3,r16,20
 800a090:	a14007cc 	andi	r5,r20,31
 800a094:	481290ba 	slli	r9,r9,2
 800a098:	1a53883a 	add	r9,r3,r9
 800a09c:	28002a26 	beq	r5,zero,800a148 <__lshift+0x14c>
 800a0a0:	02800804 	movi	r10,32
 800a0a4:	5155c83a 	sub	r10,r10,r5
 800a0a8:	4009883a 	mov	r4,r8
 800a0ac:	000f883a 	mov	r7,zero
 800a0b0:	19800017 	ldw	r6,0(r3)
 800a0b4:	21000104 	addi	r4,r4,4
 800a0b8:	18c00104 	addi	r3,r3,4
 800a0bc:	314c983a 	sll	r6,r6,r5
 800a0c0:	31ccb03a 	or	r6,r6,r7
 800a0c4:	21bfff15 	stw	r6,-4(r4)
 800a0c8:	19bfff17 	ldw	r6,-4(r3)
 800a0cc:	328ed83a 	srl	r7,r6,r10
 800a0d0:	1a7ff736 	bltu	r3,r9,800a0b0 <__lshift+0xb4>
 800a0d4:	80c00544 	addi	r3,r16,21
 800a0d8:	48c02136 	bltu	r9,r3,800a160 <__lshift+0x164>
 800a0dc:	4c07c83a 	sub	r3,r9,r16
 800a0e0:	18fffac4 	addi	r3,r3,-21
 800a0e4:	1806d0ba 	srli	r3,r3,2
 800a0e8:	18c00044 	addi	r3,r3,1
 800a0ec:	180690ba 	slli	r3,r3,2
 800a0f0:	40d1883a 	add	r8,r8,r3
 800a0f4:	41c00015 	stw	r7,0(r8)
 800a0f8:	38000126 	beq	r7,zero,800a100 <__lshift+0x104>
 800a0fc:	8825883a 	mov	r18,r17
 800a100:	14800415 	stw	r18,16(r2)
 800a104:	80000726 	beq	r16,zero,800a124 <__lshift+0x128>
 800a108:	81000117 	ldw	r4,4(r16)
 800a10c:	98c01317 	ldw	r3,76(r19)
 800a110:	200890ba 	slli	r4,r4,2
 800a114:	1907883a 	add	r3,r3,r4
 800a118:	19000017 	ldw	r4,0(r3)
 800a11c:	81000015 	stw	r4,0(r16)
 800a120:	1c000015 	stw	r16,0(r3)
 800a124:	dfc00617 	ldw	ra,24(sp)
 800a128:	dd400517 	ldw	r21,20(sp)
 800a12c:	dd000417 	ldw	r20,16(sp)
 800a130:	dcc00317 	ldw	r19,12(sp)
 800a134:	dc800217 	ldw	r18,8(sp)
 800a138:	dc400117 	ldw	r17,4(sp)
 800a13c:	dc000017 	ldw	r16,0(sp)
 800a140:	dec00704 	addi	sp,sp,28
 800a144:	f800283a 	ret
 800a148:	19000017 	ldw	r4,0(r3)
 800a14c:	18c00104 	addi	r3,r3,4
 800a150:	42000104 	addi	r8,r8,4
 800a154:	413fff15 	stw	r4,-4(r8)
 800a158:	1a7ffb36 	bltu	r3,r9,800a148 <__lshift+0x14c>
 800a15c:	003fe806 	br	800a100 <__lshift+0x104>
 800a160:	00c00104 	movi	r3,4
 800a164:	003fe206 	br	800a0f0 <__lshift+0xf4>
 800a168:	01c20174 	movhi	r7,2053
 800a16c:	01020174 	movhi	r4,2053
 800a170:	39fe7a04 	addi	r7,r7,-1560
 800a174:	000d883a 	mov	r6,zero
 800a178:	01407644 	movi	r5,473
 800a17c:	213e8e04 	addi	r4,r4,-1480
 800a180:	800c8800 	call	800c880 <__assert_func>

0800a184 <__mcmp>:
 800a184:	21800417 	ldw	r6,16(r4)
 800a188:	28c00417 	ldw	r3,16(r5)
 800a18c:	30c5c83a 	sub	r2,r6,r3
 800a190:	30c00e1e 	bne	r6,r3,800a1cc <__mcmp+0x48>
 800a194:	180690ba 	slli	r3,r3,2
 800a198:	21c00504 	addi	r7,r4,20
 800a19c:	29400504 	addi	r5,r5,20
 800a1a0:	38c9883a 	add	r4,r7,r3
 800a1a4:	28c7883a 	add	r3,r5,r3
 800a1a8:	00000106 	br	800a1b0 <__mcmp+0x2c>
 800a1ac:	3900082e 	bgeu	r7,r4,800a1d0 <__mcmp+0x4c>
 800a1b0:	21bfff17 	ldw	r6,-4(r4)
 800a1b4:	197fff17 	ldw	r5,-4(r3)
 800a1b8:	213fff04 	addi	r4,r4,-4
 800a1bc:	18ffff04 	addi	r3,r3,-4
 800a1c0:	317ffa26 	beq	r6,r5,800a1ac <__mcmp+0x28>
 800a1c4:	3140032e 	bgeu	r6,r5,800a1d4 <__mcmp+0x50>
 800a1c8:	00bfffc4 	movi	r2,-1
 800a1cc:	f800283a 	ret
 800a1d0:	f800283a 	ret
 800a1d4:	00800044 	movi	r2,1
 800a1d8:	f800283a 	ret

0800a1dc <__mdiff>:
 800a1dc:	28800417 	ldw	r2,16(r5)
 800a1e0:	30c00417 	ldw	r3,16(r6)
 800a1e4:	defffc04 	addi	sp,sp,-16
 800a1e8:	dc800215 	stw	r18,8(sp)
 800a1ec:	dc400115 	stw	r17,4(sp)
 800a1f0:	dc000015 	stw	r16,0(sp)
 800a1f4:	dfc00315 	stw	ra,12(sp)
 800a1f8:	2823883a 	mov	r17,r5
 800a1fc:	3021883a 	mov	r16,r6
 800a200:	10e5c83a 	sub	r18,r2,r3
 800a204:	10c0641e 	bne	r2,r3,800a398 <__mdiff+0x1bc>
 800a208:	180c90ba 	slli	r6,r3,2
 800a20c:	29400504 	addi	r5,r5,20
 800a210:	80c00504 	addi	r3,r16,20
 800a214:	2985883a 	add	r2,r5,r6
 800a218:	1987883a 	add	r3,r3,r6
 800a21c:	00000106 	br	800a224 <__mdiff+0x48>
 800a220:	2880642e 	bgeu	r5,r2,800a3b4 <__mdiff+0x1d8>
 800a224:	11ffff17 	ldw	r7,-4(r2)
 800a228:	19bfff17 	ldw	r6,-4(r3)
 800a22c:	10bfff04 	addi	r2,r2,-4
 800a230:	18ffff04 	addi	r3,r3,-4
 800a234:	39bffa26 	beq	r7,r6,800a220 <__mdiff+0x44>
 800a238:	39805236 	bltu	r7,r6,800a384 <__mdiff+0x1a8>
 800a23c:	89400117 	ldw	r5,4(r17)
 800a240:	80098140 	call	8009814 <_Balloc>
 800a244:	10006226 	beq	r2,zero,800a3d0 <__mdiff+0x1f4>
 800a248:	8a400417 	ldw	r9,16(r17)
 800a24c:	83000417 	ldw	r12,16(r16)
 800a250:	8ac00504 	addi	r11,r17,20
 800a254:	481090ba 	slli	r8,r9,2
 800a258:	601890ba 	slli	r12,r12,2
 800a25c:	81800504 	addi	r6,r16,20
 800a260:	13400504 	addi	r13,r2,20
 800a264:	14800315 	stw	r18,12(r2)
 800a268:	5a11883a 	add	r8,r11,r8
 800a26c:	3319883a 	add	r12,r6,r12
 800a270:	681d883a 	mov	r14,r13
 800a274:	5815883a 	mov	r10,r11
 800a278:	0007883a 	mov	r3,zero
 800a27c:	51000017 	ldw	r4,0(r10)
 800a280:	31c00017 	ldw	r7,0(r6)
 800a284:	73800104 	addi	r14,r14,4
 800a288:	217fffcc 	andi	r5,r4,65535
 800a28c:	28cb883a 	add	r5,r5,r3
 800a290:	38ffffcc 	andi	r3,r7,65535
 800a294:	28cbc83a 	sub	r5,r5,r3
 800a298:	380ed43a 	srli	r7,r7,16
 800a29c:	2006d43a 	srli	r3,r4,16
 800a2a0:	2809d43a 	srai	r4,r5,16
 800a2a4:	297fffcc 	andi	r5,r5,65535
 800a2a8:	19c7c83a 	sub	r3,r3,r7
 800a2ac:	1907883a 	add	r3,r3,r4
 800a2b0:	1808943a 	slli	r4,r3,16
 800a2b4:	31800104 	addi	r6,r6,4
 800a2b8:	1807d43a 	srai	r3,r3,16
 800a2bc:	214ab03a 	or	r5,r4,r5
 800a2c0:	717fff15 	stw	r5,-4(r14)
 800a2c4:	52800104 	addi	r10,r10,4
 800a2c8:	333fec36 	bltu	r6,r12,800a27c <__mdiff+0xa0>
 800a2cc:	640fc83a 	sub	r7,r12,r16
 800a2d0:	39fffac4 	addi	r7,r7,-21
 800a2d4:	84000544 	addi	r16,r16,21
 800a2d8:	380ed0ba 	srli	r7,r7,2
 800a2dc:	64003336 	bltu	r12,r16,800a3ac <__mdiff+0x1d0>
 800a2e0:	380890ba 	slli	r4,r7,2
 800a2e4:	6909883a 	add	r4,r13,r4
 800a2e8:	64002e36 	bltu	r12,r16,800a3a4 <__mdiff+0x1c8>
 800a2ec:	39800044 	addi	r6,r7,1
 800a2f0:	300c90ba 	slli	r6,r6,2
 800a2f4:	5997883a 	add	r11,r11,r6
 800a2f8:	699b883a 	add	r13,r13,r6
 800a2fc:	5a00152e 	bgeu	r11,r8,800a354 <__mdiff+0x178>
 800a300:	680f883a 	mov	r7,r13
 800a304:	580d883a 	mov	r6,r11
 800a308:	31000017 	ldw	r4,0(r6)
 800a30c:	39c00104 	addi	r7,r7,4
 800a310:	31800104 	addi	r6,r6,4
 800a314:	217fffcc 	andi	r5,r4,65535
 800a318:	28cb883a 	add	r5,r5,r3
 800a31c:	2815d43a 	srai	r10,r5,16
 800a320:	2006d43a 	srli	r3,r4,16
 800a324:	297fffcc 	andi	r5,r5,65535
 800a328:	1a87883a 	add	r3,r3,r10
 800a32c:	1814943a 	slli	r10,r3,16
 800a330:	1807d43a 	srai	r3,r3,16
 800a334:	514ab03a 	or	r5,r10,r5
 800a338:	397fff15 	stw	r5,-4(r7)
 800a33c:	323ff236 	bltu	r6,r8,800a308 <__mdiff+0x12c>
 800a340:	413fffc4 	addi	r4,r8,-1
 800a344:	22c9c83a 	sub	r4,r4,r11
 800a348:	2008d0ba 	srli	r4,r4,2
 800a34c:	200890ba 	slli	r4,r4,2
 800a350:	6909883a 	add	r4,r13,r4
 800a354:	2800041e 	bne	r5,zero,800a368 <__mdiff+0x18c>
 800a358:	20ffff17 	ldw	r3,-4(r4)
 800a35c:	4a7fffc4 	addi	r9,r9,-1
 800a360:	213fff04 	addi	r4,r4,-4
 800a364:	183ffc26 	beq	r3,zero,800a358 <__mdiff+0x17c>
 800a368:	12400415 	stw	r9,16(r2)
 800a36c:	dfc00317 	ldw	ra,12(sp)
 800a370:	dc800217 	ldw	r18,8(sp)
 800a374:	dc400117 	ldw	r17,4(sp)
 800a378:	dc000017 	ldw	r16,0(sp)
 800a37c:	dec00404 	addi	sp,sp,16
 800a380:	f800283a 	ret
 800a384:	8805883a 	mov	r2,r17
 800a388:	04800044 	movi	r18,1
 800a38c:	8023883a 	mov	r17,r16
 800a390:	1021883a 	mov	r16,r2
 800a394:	003fa906 	br	800a23c <__mdiff+0x60>
 800a398:	903ffa16 	blt	r18,zero,800a384 <__mdiff+0x1a8>
 800a39c:	0025883a 	mov	r18,zero
 800a3a0:	003fa606 	br	800a23c <__mdiff+0x60>
 800a3a4:	01800104 	movi	r6,4
 800a3a8:	003fd206 	br	800a2f4 <__mdiff+0x118>
 800a3ac:	0009883a 	mov	r4,zero
 800a3b0:	003fcc06 	br	800a2e4 <__mdiff+0x108>
 800a3b4:	000b883a 	mov	r5,zero
 800a3b8:	80098140 	call	8009814 <_Balloc>
 800a3bc:	10000b26 	beq	r2,zero,800a3ec <__mdiff+0x210>
 800a3c0:	00c00044 	movi	r3,1
 800a3c4:	10c00415 	stw	r3,16(r2)
 800a3c8:	10000515 	stw	zero,20(r2)
 800a3cc:	003fe706 	br	800a36c <__mdiff+0x190>
 800a3d0:	01c20174 	movhi	r7,2053
 800a3d4:	01020174 	movhi	r4,2053
 800a3d8:	39fe7a04 	addi	r7,r7,-1560
 800a3dc:	000d883a 	mov	r6,zero
 800a3e0:	01409004 	movi	r5,576
 800a3e4:	213e8e04 	addi	r4,r4,-1480
 800a3e8:	800c8800 	call	800c880 <__assert_func>
 800a3ec:	01c20174 	movhi	r7,2053
 800a3f0:	01020174 	movhi	r4,2053
 800a3f4:	39fe7a04 	addi	r7,r7,-1560
 800a3f8:	000d883a 	mov	r6,zero
 800a3fc:	01408c84 	movi	r5,562
 800a400:	213e8e04 	addi	r4,r4,-1480
 800a404:	800c8800 	call	800c880 <__assert_func>

0800a408 <__ulp>:
 800a408:	28dffc2c 	andhi	r3,r5,32752
 800a40c:	017f3034 	movhi	r5,64704
 800a410:	1947883a 	add	r3,r3,r5
 800a414:	00c0020e 	bge	zero,r3,800a420 <__ulp+0x18>
 800a418:	0005883a 	mov	r2,zero
 800a41c:	f800283a 	ret
 800a420:	00c7c83a 	sub	r3,zero,r3
 800a424:	1807d53a 	srai	r3,r3,20
 800a428:	18800508 	cmpgei	r2,r3,20
 800a42c:	1000041e 	bne	r2,zero,800a440 <__ulp+0x38>
 800a430:	00800234 	movhi	r2,8
 800a434:	10c7d83a 	sra	r3,r2,r3
 800a438:	0005883a 	mov	r2,zero
 800a43c:	f800283a 	ret
 800a440:	193ffb04 	addi	r4,r3,-20
 800a444:	208007c8 	cmpgei	r2,r4,31
 800a448:	0007883a 	mov	r3,zero
 800a44c:	1000031e 	bne	r2,zero,800a45c <__ulp+0x54>
 800a450:	00a00034 	movhi	r2,32768
 800a454:	1104d83a 	srl	r2,r2,r4
 800a458:	f800283a 	ret
 800a45c:	00800044 	movi	r2,1
 800a460:	f800283a 	ret

0800a464 <__b2d>:
 800a464:	defffa04 	addi	sp,sp,-24
 800a468:	dc400115 	stw	r17,4(sp)
 800a46c:	24400417 	ldw	r17,16(r4)
 800a470:	dc000015 	stw	r16,0(sp)
 800a474:	24000504 	addi	r16,r4,20
 800a478:	882290ba 	slli	r17,r17,2
 800a47c:	dc800215 	stw	r18,8(sp)
 800a480:	dd000415 	stw	r20,16(sp)
 800a484:	8463883a 	add	r17,r16,r17
 800a488:	8cbfff17 	ldw	r18,-4(r17)
 800a48c:	dcc00315 	stw	r19,12(sp)
 800a490:	dfc00515 	stw	ra,20(sp)
 800a494:	9009883a 	mov	r4,r18
 800a498:	2827883a 	mov	r19,r5
 800a49c:	8009b4c0 	call	8009b4c <__hi0bits>
 800a4a0:	01000804 	movi	r4,32
 800a4a4:	2087c83a 	sub	r3,r4,r2
 800a4a8:	98c00015 	stw	r3,0(r19)
 800a4ac:	10c002c8 	cmpgei	r3,r2,11
 800a4b0:	8d3fff04 	addi	r20,r17,-4
 800a4b4:	18001f26 	beq	r3,zero,800a534 <__b2d+0xd0>
 800a4b8:	10fffd44 	addi	r3,r2,-11
 800a4bc:	85000e2e 	bgeu	r16,r20,800a4f8 <__b2d+0x94>
 800a4c0:	88bffe17 	ldw	r2,-8(r17)
 800a4c4:	18001226 	beq	r3,zero,800a510 <__b2d+0xac>
 800a4c8:	20c9c83a 	sub	r4,r4,r3
 800a4cc:	110cd83a 	srl	r6,r2,r4
 800a4d0:	90e4983a 	sll	r18,r18,r3
 800a4d4:	10c4983a 	sll	r2,r2,r3
 800a4d8:	897ffe04 	addi	r5,r17,-8
 800a4dc:	9186b03a 	or	r3,r18,r6
 800a4e0:	18cffc34 	orhi	r3,r3,16368
 800a4e4:	81400b2e 	bgeu	r16,r5,800a514 <__b2d+0xb0>
 800a4e8:	897ffd17 	ldw	r5,-12(r17)
 800a4ec:	2908d83a 	srl	r4,r5,r4
 800a4f0:	1104b03a 	or	r2,r2,r4
 800a4f4:	00000706 	br	800a514 <__b2d+0xb0>
 800a4f8:	18000426 	beq	r3,zero,800a50c <__b2d+0xa8>
 800a4fc:	90c6983a 	sll	r3,r18,r3
 800a500:	0005883a 	mov	r2,zero
 800a504:	18cffc34 	orhi	r3,r3,16368
 800a508:	00000206 	br	800a514 <__b2d+0xb0>
 800a50c:	0005883a 	mov	r2,zero
 800a510:	90cffc34 	orhi	r3,r18,16368
 800a514:	dfc00517 	ldw	ra,20(sp)
 800a518:	dd000417 	ldw	r20,16(sp)
 800a51c:	dcc00317 	ldw	r19,12(sp)
 800a520:	dc800217 	ldw	r18,8(sp)
 800a524:	dc400117 	ldw	r17,4(sp)
 800a528:	dc000017 	ldw	r16,0(sp)
 800a52c:	dec00604 	addi	sp,sp,24
 800a530:	f800283a 	ret
 800a534:	014002c4 	movi	r5,11
 800a538:	2889c83a 	sub	r4,r5,r2
 800a53c:	9106d83a 	srl	r3,r18,r4
 800a540:	18cffc34 	orhi	r3,r3,16368
 800a544:	85000536 	bltu	r16,r20,800a55c <__b2d+0xf8>
 800a548:	000b883a 	mov	r5,zero
 800a54c:	10800544 	addi	r2,r2,21
 800a550:	9084983a 	sll	r2,r18,r2
 800a554:	1144b03a 	or	r2,r2,r5
 800a558:	003fee06 	br	800a514 <__b2d+0xb0>
 800a55c:	897ffe17 	ldw	r5,-8(r17)
 800a560:	290ad83a 	srl	r5,r5,r4
 800a564:	003ff906 	br	800a54c <__b2d+0xe8>

0800a568 <__d2b>:
 800a568:	defff804 	addi	sp,sp,-32
 800a56c:	dd000615 	stw	r20,24(sp)
 800a570:	2829883a 	mov	r20,r5
 800a574:	01400044 	movi	r5,1
 800a578:	dcc00515 	stw	r19,20(sp)
 800a57c:	dc000215 	stw	r16,8(sp)
 800a580:	dfc00715 	stw	ra,28(sp)
 800a584:	dc800415 	stw	r18,16(sp)
 800a588:	dc400315 	stw	r17,12(sp)
 800a58c:	3021883a 	mov	r16,r6
 800a590:	3827883a 	mov	r19,r7
 800a594:	80098140 	call	8009814 <_Balloc>
 800a598:	10004526 	beq	r2,zero,800a6b0 <__d2b+0x148>
 800a59c:	8024d53a 	srli	r18,r16,20
 800a5a0:	01800434 	movhi	r6,16
 800a5a4:	31bfffc4 	addi	r6,r6,-1
 800a5a8:	9481ffcc 	andi	r18,r18,2047
 800a5ac:	1023883a 	mov	r17,r2
 800a5b0:	81a0703a 	and	r16,r16,r6
 800a5b4:	90000126 	beq	r18,zero,800a5bc <__d2b+0x54>
 800a5b8:	84000434 	orhi	r16,r16,16
 800a5bc:	dc000115 	stw	r16,4(sp)
 800a5c0:	a0002226 	beq	r20,zero,800a64c <__d2b+0xe4>
 800a5c4:	d809883a 	mov	r4,sp
 800a5c8:	dd000015 	stw	r20,0(sp)
 800a5cc:	8009bb00 	call	8009bb0 <__lo0bits>
 800a5d0:	d8c00117 	ldw	r3,4(sp)
 800a5d4:	10003326 	beq	r2,zero,800a6a4 <__d2b+0x13c>
 800a5d8:	01000804 	movi	r4,32
 800a5dc:	2089c83a 	sub	r4,r4,r2
 800a5e0:	1908983a 	sll	r4,r3,r4
 800a5e4:	d9400017 	ldw	r5,0(sp)
 800a5e8:	1886d83a 	srl	r3,r3,r2
 800a5ec:	2148b03a 	or	r4,r4,r5
 800a5f0:	89000515 	stw	r4,20(r17)
 800a5f4:	d8c00115 	stw	r3,4(sp)
 800a5f8:	88c00615 	stw	r3,24(r17)
 800a5fc:	1800271e 	bne	r3,zero,800a69c <__d2b+0x134>
 800a600:	04000044 	movi	r16,1
 800a604:	8c000415 	stw	r16,16(r17)
 800a608:	90001926 	beq	r18,zero,800a670 <__d2b+0x108>
 800a60c:	00c00d44 	movi	r3,53
 800a610:	94bef344 	addi	r18,r18,-1075
 800a614:	90a5883a 	add	r18,r18,r2
 800a618:	1885c83a 	sub	r2,r3,r2
 800a61c:	d8c00817 	ldw	r3,32(sp)
 800a620:	9c800015 	stw	r18,0(r19)
 800a624:	18800015 	stw	r2,0(r3)
 800a628:	8805883a 	mov	r2,r17
 800a62c:	dfc00717 	ldw	ra,28(sp)
 800a630:	dd000617 	ldw	r20,24(sp)
 800a634:	dcc00517 	ldw	r19,20(sp)
 800a638:	dc800417 	ldw	r18,16(sp)
 800a63c:	dc400317 	ldw	r17,12(sp)
 800a640:	dc000217 	ldw	r16,8(sp)
 800a644:	dec00804 	addi	sp,sp,32
 800a648:	f800283a 	ret
 800a64c:	d9000104 	addi	r4,sp,4
 800a650:	8009bb00 	call	8009bb0 <__lo0bits>
 800a654:	00c00044 	movi	r3,1
 800a658:	88c00415 	stw	r3,16(r17)
 800a65c:	d8c00117 	ldw	r3,4(sp)
 800a660:	10800804 	addi	r2,r2,32
 800a664:	04000044 	movi	r16,1
 800a668:	88c00515 	stw	r3,20(r17)
 800a66c:	903fe71e 	bne	r18,zero,800a60c <__d2b+0xa4>
 800a670:	800690ba 	slli	r3,r16,2
 800a674:	10bef384 	addi	r2,r2,-1074
 800a678:	98800015 	stw	r2,0(r19)
 800a67c:	88c5883a 	add	r2,r17,r3
 800a680:	11000417 	ldw	r4,16(r2)
 800a684:	8020917a 	slli	r16,r16,5
 800a688:	8009b4c0 	call	8009b4c <__hi0bits>
 800a68c:	80a1c83a 	sub	r16,r16,r2
 800a690:	d8800817 	ldw	r2,32(sp)
 800a694:	14000015 	stw	r16,0(r2)
 800a698:	003fe306 	br	800a628 <__d2b+0xc0>
 800a69c:	04000084 	movi	r16,2
 800a6a0:	003fd806 	br	800a604 <__d2b+0x9c>
 800a6a4:	d9000017 	ldw	r4,0(sp)
 800a6a8:	89000515 	stw	r4,20(r17)
 800a6ac:	003fd206 	br	800a5f8 <__d2b+0x90>
 800a6b0:	01c20174 	movhi	r7,2053
 800a6b4:	01020174 	movhi	r4,2053
 800a6b8:	39fe7a04 	addi	r7,r7,-1560
 800a6bc:	000d883a 	mov	r6,zero
 800a6c0:	0140c284 	movi	r5,778
 800a6c4:	213e8e04 	addi	r4,r4,-1480
 800a6c8:	800c8800 	call	800c880 <__assert_func>

0800a6cc <__ratio>:
 800a6cc:	defff904 	addi	sp,sp,-28
 800a6d0:	dc400315 	stw	r17,12(sp)
 800a6d4:	2823883a 	mov	r17,r5
 800a6d8:	d80b883a 	mov	r5,sp
 800a6dc:	dfc00615 	stw	ra,24(sp)
 800a6e0:	dcc00515 	stw	r19,20(sp)
 800a6e4:	dc800415 	stw	r18,16(sp)
 800a6e8:	2027883a 	mov	r19,r4
 800a6ec:	dc000215 	stw	r16,8(sp)
 800a6f0:	800a4640 	call	800a464 <__b2d>
 800a6f4:	d9400104 	addi	r5,sp,4
 800a6f8:	8809883a 	mov	r4,r17
 800a6fc:	1025883a 	mov	r18,r2
 800a700:	1821883a 	mov	r16,r3
 800a704:	800a4640 	call	800a464 <__b2d>
 800a708:	89400417 	ldw	r5,16(r17)
 800a70c:	99000417 	ldw	r4,16(r19)
 800a710:	d9800117 	ldw	r6,4(sp)
 800a714:	180f883a 	mov	r7,r3
 800a718:	2149c83a 	sub	r4,r4,r5
 800a71c:	d9400017 	ldw	r5,0(sp)
 800a720:	2008917a 	slli	r4,r4,5
 800a724:	298bc83a 	sub	r5,r5,r6
 800a728:	2149883a 	add	r4,r4,r5
 800a72c:	100d883a 	mov	r6,r2
 800a730:	01000c0e 	bge	zero,r4,800a764 <__ratio+0x98>
 800a734:	2008953a 	slli	r4,r4,20
 800a738:	2421883a 	add	r16,r4,r16
 800a73c:	9009883a 	mov	r4,r18
 800a740:	800b883a 	mov	r5,r16
 800a744:	800ec680 	call	800ec68 <__divdf3>
 800a748:	dfc00617 	ldw	ra,24(sp)
 800a74c:	dcc00517 	ldw	r19,20(sp)
 800a750:	dc800417 	ldw	r18,16(sp)
 800a754:	dc400317 	ldw	r17,12(sp)
 800a758:	dc000217 	ldw	r16,8(sp)
 800a75c:	dec00704 	addi	sp,sp,28
 800a760:	f800283a 	ret
 800a764:	00bffc34 	movhi	r2,65520
 800a768:	2089383a 	mul	r4,r4,r2
 800a76c:	20cf883a 	add	r7,r4,r3
 800a770:	003ff206 	br	800a73c <__ratio+0x70>

0800a774 <_mprec_log10>:
 800a774:	defffe04 	addi	sp,sp,-8
 800a778:	dc000015 	stw	r16,0(sp)
 800a77c:	dfc00115 	stw	ra,4(sp)
 800a780:	20800608 	cmpgei	r2,r4,24
 800a784:	2021883a 	mov	r16,r4
 800a788:	10000f26 	beq	r2,zero,800a7c8 <_mprec_log10+0x54>
 800a78c:	0009883a 	mov	r4,zero
 800a790:	014ffc34 	movhi	r5,16368
 800a794:	000d883a 	mov	r6,zero
 800a798:	01d00934 	movhi	r7,16420
 800a79c:	800f7280 	call	800f728 <__muldf3>
 800a7a0:	843fffc4 	addi	r16,r16,-1
 800a7a4:	1009883a 	mov	r4,r2
 800a7a8:	180b883a 	mov	r5,r3
 800a7ac:	803ff91e 	bne	r16,zero,800a794 <_mprec_log10+0x20>
 800a7b0:	2005883a 	mov	r2,r4
 800a7b4:	2807883a 	mov	r3,r5
 800a7b8:	dfc00117 	ldw	ra,4(sp)
 800a7bc:	dc000017 	ldw	r16,0(sp)
 800a7c0:	dec00204 	addi	sp,sp,8
 800a7c4:	f800283a 	ret
 800a7c8:	202090fa 	slli	r16,r4,3
 800a7cc:	00820174 	movhi	r2,2053
 800a7d0:	10beb404 	addi	r2,r2,-1328
 800a7d4:	1421883a 	add	r16,r2,r16
 800a7d8:	81000017 	ldw	r4,0(r16)
 800a7dc:	81400117 	ldw	r5,4(r16)
 800a7e0:	003ff306 	br	800a7b0 <_mprec_log10+0x3c>

0800a7e4 <__copybits>:
 800a7e4:	297fffc4 	addi	r5,r5,-1
 800a7e8:	280fd17a 	srai	r7,r5,5
 800a7ec:	31400417 	ldw	r5,16(r6)
 800a7f0:	30800504 	addi	r2,r6,20
 800a7f4:	39c00044 	addi	r7,r7,1
 800a7f8:	280a90ba 	slli	r5,r5,2
 800a7fc:	380e90ba 	slli	r7,r7,2
 800a800:	114b883a 	add	r5,r2,r5
 800a804:	21cf883a 	add	r7,r4,r7
 800a808:	11400c2e 	bgeu	r2,r5,800a83c <__copybits+0x58>
 800a80c:	2007883a 	mov	r3,r4
 800a810:	12000017 	ldw	r8,0(r2)
 800a814:	10800104 	addi	r2,r2,4
 800a818:	18c00104 	addi	r3,r3,4
 800a81c:	1a3fff15 	stw	r8,-4(r3)
 800a820:	117ffb36 	bltu	r2,r5,800a810 <__copybits+0x2c>
 800a824:	2985c83a 	sub	r2,r5,r6
 800a828:	10bffac4 	addi	r2,r2,-21
 800a82c:	1004d0ba 	srli	r2,r2,2
 800a830:	10800044 	addi	r2,r2,1
 800a834:	100490ba 	slli	r2,r2,2
 800a838:	2089883a 	add	r4,r4,r2
 800a83c:	21c0032e 	bgeu	r4,r7,800a84c <__copybits+0x68>
 800a840:	21000104 	addi	r4,r4,4
 800a844:	203fff15 	stw	zero,-4(r4)
 800a848:	21fffd36 	bltu	r4,r7,800a840 <__copybits+0x5c>
 800a84c:	f800283a 	ret

0800a850 <__any_on>:
 800a850:	20c00417 	ldw	r3,16(r4)
 800a854:	280dd17a 	srai	r6,r5,5
 800a858:	21000504 	addi	r4,r4,20
 800a85c:	1980080e 	bge	r3,r6,800a880 <__any_on+0x30>
 800a860:	180490ba 	slli	r2,r3,2
 800a864:	2085883a 	add	r2,r4,r2
 800a868:	20800f2e 	bgeu	r4,r2,800a8a8 <__any_on+0x58>
 800a86c:	10ffff17 	ldw	r3,-4(r2)
 800a870:	10bfff04 	addi	r2,r2,-4
 800a874:	183ffc26 	beq	r3,zero,800a868 <__any_on+0x18>
 800a878:	00800044 	movi	r2,1
 800a87c:	f800283a 	ret
 800a880:	300490ba 	slli	r2,r6,2
 800a884:	2085883a 	add	r2,r4,r2
 800a888:	30fff70e 	bge	r6,r3,800a868 <__any_on+0x18>
 800a88c:	294007cc 	andi	r5,r5,31
 800a890:	283ff526 	beq	r5,zero,800a868 <__any_on+0x18>
 800a894:	11800017 	ldw	r6,0(r2)
 800a898:	3146d83a 	srl	r3,r6,r5
 800a89c:	194a983a 	sll	r5,r3,r5
 800a8a0:	317ff51e 	bne	r6,r5,800a878 <__any_on+0x28>
 800a8a4:	003ff006 	br	800a868 <__any_on+0x18>
 800a8a8:	0005883a 	mov	r2,zero
 800a8ac:	f800283a 	ret

0800a8b0 <_putc_r>:
 800a8b0:	defffc04 	addi	sp,sp,-16
 800a8b4:	dc400215 	stw	r17,8(sp)
 800a8b8:	dfc00315 	stw	ra,12(sp)
 800a8bc:	2023883a 	mov	r17,r4
 800a8c0:	20000226 	beq	r4,zero,800a8cc <_putc_r+0x1c>
 800a8c4:	20800e17 	ldw	r2,56(r4)
 800a8c8:	10000e26 	beq	r2,zero,800a904 <_putc_r+0x54>
 800a8cc:	30800217 	ldw	r2,8(r6)
 800a8d0:	10bfffc4 	addi	r2,r2,-1
 800a8d4:	30800215 	stw	r2,8(r6)
 800a8d8:	10001316 	blt	r2,zero,800a928 <_putc_r+0x78>
 800a8dc:	30800017 	ldw	r2,0(r6)
 800a8e0:	11400005 	stb	r5,0(r2)
 800a8e4:	30800017 	ldw	r2,0(r6)
 800a8e8:	10c00044 	addi	r3,r2,1
 800a8ec:	30c00015 	stw	r3,0(r6)
 800a8f0:	10800003 	ldbu	r2,0(r2)
 800a8f4:	dfc00317 	ldw	ra,12(sp)
 800a8f8:	dc400217 	ldw	r17,8(sp)
 800a8fc:	dec00404 	addi	sp,sp,16
 800a900:	f800283a 	ret
 800a904:	d9800115 	stw	r6,4(sp)
 800a908:	d9400015 	stw	r5,0(sp)
 800a90c:	80080d40 	call	80080d4 <__sinit>
 800a910:	d9800117 	ldw	r6,4(sp)
 800a914:	d9400017 	ldw	r5,0(sp)
 800a918:	30800217 	ldw	r2,8(r6)
 800a91c:	10bfffc4 	addi	r2,r2,-1
 800a920:	30800215 	stw	r2,8(r6)
 800a924:	103fed0e 	bge	r2,zero,800a8dc <_putc_r+0x2c>
 800a928:	30c00617 	ldw	r3,24(r6)
 800a92c:	10c00e16 	blt	r2,r3,800a968 <_putc_r+0xb8>
 800a930:	30800017 	ldw	r2,0(r6)
 800a934:	11400005 	stb	r5,0(r2)
 800a938:	30c00017 	ldw	r3,0(r6)
 800a93c:	18800003 	ldbu	r2,0(r3)
 800a940:	108002a0 	cmpeqi	r2,r2,10
 800a944:	1000071e 	bne	r2,zero,800a964 <_putc_r+0xb4>
 800a948:	18800044 	addi	r2,r3,1
 800a94c:	30800015 	stw	r2,0(r6)
 800a950:	18800003 	ldbu	r2,0(r3)
 800a954:	dfc00317 	ldw	ra,12(sp)
 800a958:	dc400217 	ldw	r17,8(sp)
 800a95c:	dec00404 	addi	sp,sp,16
 800a960:	f800283a 	ret
 800a964:	01400284 	movi	r5,10
 800a968:	8809883a 	mov	r4,r17
 800a96c:	dfc00317 	ldw	ra,12(sp)
 800a970:	dc400217 	ldw	r17,8(sp)
 800a974:	dec00404 	addi	sp,sp,16
 800a978:	800c6c81 	jmpi	800c6c8 <__swbuf_r>

0800a97c <putc>:
 800a97c:	defffc04 	addi	sp,sp,-16
 800a980:	00820174 	movhi	r2,2053
 800a984:	dc800215 	stw	r18,8(sp)
 800a988:	1498e017 	ldw	r18,25472(r2)
 800a98c:	dc400115 	stw	r17,4(sp)
 800a990:	dfc00315 	stw	ra,12(sp)
 800a994:	2023883a 	mov	r17,r4
 800a998:	90000226 	beq	r18,zero,800a9a4 <putc+0x28>
 800a99c:	90800e17 	ldw	r2,56(r18)
 800a9a0:	10000f26 	beq	r2,zero,800a9e0 <putc+0x64>
 800a9a4:	28800217 	ldw	r2,8(r5)
 800a9a8:	10bfffc4 	addi	r2,r2,-1
 800a9ac:	28800215 	stw	r2,8(r5)
 800a9b0:	10001316 	blt	r2,zero,800aa00 <putc+0x84>
 800a9b4:	28800017 	ldw	r2,0(r5)
 800a9b8:	14400005 	stb	r17,0(r2)
 800a9bc:	28800017 	ldw	r2,0(r5)
 800a9c0:	10c00044 	addi	r3,r2,1
 800a9c4:	28c00015 	stw	r3,0(r5)
 800a9c8:	10800003 	ldbu	r2,0(r2)
 800a9cc:	dfc00317 	ldw	ra,12(sp)
 800a9d0:	dc800217 	ldw	r18,8(sp)
 800a9d4:	dc400117 	ldw	r17,4(sp)
 800a9d8:	dec00404 	addi	sp,sp,16
 800a9dc:	f800283a 	ret
 800a9e0:	9009883a 	mov	r4,r18
 800a9e4:	d9400015 	stw	r5,0(sp)
 800a9e8:	80080d40 	call	80080d4 <__sinit>
 800a9ec:	d9400017 	ldw	r5,0(sp)
 800a9f0:	28800217 	ldw	r2,8(r5)
 800a9f4:	10bfffc4 	addi	r2,r2,-1
 800a9f8:	28800215 	stw	r2,8(r5)
 800a9fc:	103fed0e 	bge	r2,zero,800a9b4 <putc+0x38>
 800aa00:	28c00617 	ldw	r3,24(r5)
 800aa04:	10c00a16 	blt	r2,r3,800aa30 <putc+0xb4>
 800aa08:	28800017 	ldw	r2,0(r5)
 800aa0c:	14400005 	stb	r17,0(r2)
 800aa10:	28c00017 	ldw	r3,0(r5)
 800aa14:	18800003 	ldbu	r2,0(r3)
 800aa18:	108002a0 	cmpeqi	r2,r2,10
 800aa1c:	10000c1e 	bne	r2,zero,800aa50 <putc+0xd4>
 800aa20:	18800044 	addi	r2,r3,1
 800aa24:	28800015 	stw	r2,0(r5)
 800aa28:	18800003 	ldbu	r2,0(r3)
 800aa2c:	003fe706 	br	800a9cc <putc+0x50>
 800aa30:	280d883a 	mov	r6,r5
 800aa34:	880b883a 	mov	r5,r17
 800aa38:	9009883a 	mov	r4,r18
 800aa3c:	dfc00317 	ldw	ra,12(sp)
 800aa40:	dc800217 	ldw	r18,8(sp)
 800aa44:	dc400117 	ldw	r17,4(sp)
 800aa48:	dec00404 	addi	sp,sp,16
 800aa4c:	800c6c81 	jmpi	800c6c8 <__swbuf_r>
 800aa50:	280d883a 	mov	r6,r5
 800aa54:	01400284 	movi	r5,10
 800aa58:	003ff706 	br	800aa38 <putc+0xbc>

0800aa5c <_realloc_r>:
 800aa5c:	defff504 	addi	sp,sp,-44
 800aa60:	dc800315 	stw	r18,12(sp)
 800aa64:	dfc00a15 	stw	ra,40(sp)
 800aa68:	df000915 	stw	fp,36(sp)
 800aa6c:	ddc00815 	stw	r23,32(sp)
 800aa70:	dd800715 	stw	r22,28(sp)
 800aa74:	dd400615 	stw	r21,24(sp)
 800aa78:	dd000515 	stw	r20,20(sp)
 800aa7c:	dcc00415 	stw	r19,16(sp)
 800aa80:	dc400215 	stw	r17,8(sp)
 800aa84:	dc000115 	stw	r16,4(sp)
 800aa88:	3025883a 	mov	r18,r6
 800aa8c:	28008b26 	beq	r5,zero,800acbc <_realloc_r+0x260>
 800aa90:	2821883a 	mov	r16,r5
 800aa94:	2027883a 	mov	r19,r4
 800aa98:	944002c4 	addi	r17,r18,11
 800aa9c:	80110740 	call	8011074 <__malloc_lock>
 800aaa0:	888005f0 	cmpltui	r2,r17,23
 800aaa4:	1000521e 	bne	r2,zero,800abf0 <_realloc_r+0x194>
 800aaa8:	017ffe04 	movi	r5,-8
 800aaac:	8962703a 	and	r17,r17,r5
 800aab0:	8807883a 	mov	r3,r17
 800aab4:	88005116 	blt	r17,zero,800abfc <_realloc_r+0x1a0>
 800aab8:	8c805036 	bltu	r17,r18,800abfc <_realloc_r+0x1a0>
 800aabc:	80bfff17 	ldw	r2,-4(r16)
 800aac0:	017fff04 	movi	r5,-4
 800aac4:	857ffe04 	addi	r21,r16,-8
 800aac8:	1168703a 	and	r20,r2,r5
 800aacc:	ad2d883a 	add	r22,r21,r20
 800aad0:	a0c0390e 	bge	r20,r3,800abb8 <_realloc_r+0x15c>
 800aad4:	07020174 	movhi	fp,2053
 800aad8:	e711b704 	addi	fp,fp,18140
 800aadc:	e2000217 	ldw	r8,8(fp)
 800aae0:	b1000117 	ldw	r4,4(r22)
 800aae4:	45808e26 	beq	r8,r22,800ad20 <_realloc_r+0x2c4>
 800aae8:	01bfff84 	movi	r6,-2
 800aaec:	218c703a 	and	r6,r4,r6
 800aaf0:	b18d883a 	add	r6,r22,r6
 800aaf4:	31800117 	ldw	r6,4(r6)
 800aaf8:	3180004c 	andi	r6,r6,1
 800aafc:	30004f1e 	bne	r6,zero,800ac3c <_realloc_r+0x1e0>
 800ab00:	2148703a 	and	r4,r4,r5
 800ab04:	a10b883a 	add	r5,r20,r4
 800ab08:	28c0bf0e 	bge	r5,r3,800ae08 <_realloc_r+0x3ac>
 800ab0c:	1080004c 	andi	r2,r2,1
 800ab10:	10004c1e 	bne	r2,zero,800ac44 <_realloc_r+0x1e8>
 800ab14:	81fffe17 	ldw	r7,-8(r16)
 800ab18:	00bfff04 	movi	r2,-4
 800ab1c:	a9cfc83a 	sub	r7,r21,r7
 800ab20:	39400117 	ldw	r5,4(r7)
 800ab24:	288a703a 	and	r5,r5,r2
 800ab28:	b0000426 	beq	r22,zero,800ab3c <_realloc_r+0xe0>
 800ab2c:	a16f883a 	add	r23,r20,r5
 800ab30:	b92f883a 	add	r23,r23,r4
 800ab34:	4580bf26 	beq	r8,r22,800ae34 <_realloc_r+0x3d8>
 800ab38:	b8c0930e 	bge	r23,r3,800ad88 <_realloc_r+0x32c>
 800ab3c:	38004126 	beq	r7,zero,800ac44 <_realloc_r+0x1e8>
 800ab40:	a16f883a 	add	r23,r20,r5
 800ab44:	b8c03f16 	blt	r23,r3,800ac44 <_realloc_r+0x1e8>
 800ab48:	38800317 	ldw	r2,12(r7)
 800ab4c:	38c00217 	ldw	r3,8(r7)
 800ab50:	a1bfff04 	addi	r6,r20,-4
 800ab54:	31400968 	cmpgeui	r5,r6,37
 800ab58:	18800315 	stw	r2,12(r3)
 800ab5c:	10c00215 	stw	r3,8(r2)
 800ab60:	39000204 	addi	r4,r7,8
 800ab64:	3ded883a 	add	r22,r7,r23
 800ab68:	2800941e 	bne	r5,zero,800adbc <_realloc_r+0x360>
 800ab6c:	30800530 	cmpltui	r2,r6,20
 800ab70:	80c00017 	ldw	r3,0(r16)
 800ab74:	1000df1e 	bne	r2,zero,800aef4 <_realloc_r+0x498>
 800ab78:	38c00215 	stw	r3,8(r7)
 800ab7c:	80c00117 	ldw	r3,4(r16)
 800ab80:	30800728 	cmpgeui	r2,r6,28
 800ab84:	38c00315 	stw	r3,12(r7)
 800ab88:	1000dc1e 	bne	r2,zero,800aefc <_realloc_r+0x4a0>
 800ab8c:	80c00217 	ldw	r3,8(r16)
 800ab90:	38800404 	addi	r2,r7,16
 800ab94:	84000204 	addi	r16,r16,8
 800ab98:	10c00015 	stw	r3,0(r2)
 800ab9c:	80c00117 	ldw	r3,4(r16)
 800aba0:	b829883a 	mov	r20,r23
 800aba4:	382b883a 	mov	r21,r7
 800aba8:	10c00115 	stw	r3,4(r2)
 800abac:	80c00217 	ldw	r3,8(r16)
 800abb0:	2021883a 	mov	r16,r4
 800abb4:	10c00215 	stw	r3,8(r2)
 800abb8:	a9800117 	ldw	r6,4(r21)
 800abbc:	a445c83a 	sub	r2,r20,r17
 800abc0:	10c00430 	cmpltui	r3,r2,16
 800abc4:	3180004c 	andi	r6,r6,1
 800abc8:	18004926 	beq	r3,zero,800acf0 <_realloc_r+0x294>
 800abcc:	a18cb03a 	or	r6,r20,r6
 800abd0:	a9800115 	stw	r6,4(r21)
 800abd4:	b0800117 	ldw	r2,4(r22)
 800abd8:	10800054 	ori	r2,r2,1
 800abdc:	b0800115 	stw	r2,4(r22)
 800abe0:	9809883a 	mov	r4,r19
 800abe4:	801119c0 	call	801119c <__malloc_unlock>
 800abe8:	8025883a 	mov	r18,r16
 800abec:	00000606 	br	800ac08 <_realloc_r+0x1ac>
 800abf0:	04400404 	movi	r17,16
 800abf4:	00c00404 	movi	r3,16
 800abf8:	8cbfb02e 	bgeu	r17,r18,800aabc <_realloc_r+0x60>
 800abfc:	00800304 	movi	r2,12
 800ac00:	98800015 	stw	r2,0(r19)
 800ac04:	0025883a 	mov	r18,zero
 800ac08:	9005883a 	mov	r2,r18
 800ac0c:	dfc00a17 	ldw	ra,40(sp)
 800ac10:	df000917 	ldw	fp,36(sp)
 800ac14:	ddc00817 	ldw	r23,32(sp)
 800ac18:	dd800717 	ldw	r22,28(sp)
 800ac1c:	dd400617 	ldw	r21,24(sp)
 800ac20:	dd000517 	ldw	r20,20(sp)
 800ac24:	dcc00417 	ldw	r19,16(sp)
 800ac28:	dc800317 	ldw	r18,12(sp)
 800ac2c:	dc400217 	ldw	r17,8(sp)
 800ac30:	dc000117 	ldw	r16,4(sp)
 800ac34:	dec00b04 	addi	sp,sp,44
 800ac38:	f800283a 	ret
 800ac3c:	1080004c 	andi	r2,r2,1
 800ac40:	10006c26 	beq	r2,zero,800adf4 <_realloc_r+0x398>
 800ac44:	900b883a 	mov	r5,r18
 800ac48:	9809883a 	mov	r4,r19
 800ac4c:	8008e340 	call	8008e34 <_malloc_r>
 800ac50:	1025883a 	mov	r18,r2
 800ac54:	10001626 	beq	r2,zero,800acb0 <_realloc_r+0x254>
 800ac58:	80bfff17 	ldw	r2,-4(r16)
 800ac5c:	013fff84 	movi	r4,-2
 800ac60:	90fffe04 	addi	r3,r18,-8
 800ac64:	1104703a 	and	r2,r2,r4
 800ac68:	a885883a 	add	r2,r21,r2
 800ac6c:	10c05b26 	beq	r2,r3,800addc <_realloc_r+0x380>
 800ac70:	a1bfff04 	addi	r6,r20,-4
 800ac74:	30800968 	cmpgeui	r2,r6,37
 800ac78:	10006a1e 	bne	r2,zero,800ae24 <_realloc_r+0x3c8>
 800ac7c:	30800530 	cmpltui	r2,r6,20
 800ac80:	81000017 	ldw	r4,0(r16)
 800ac84:	10003726 	beq	r2,zero,800ad64 <_realloc_r+0x308>
 800ac88:	9005883a 	mov	r2,r18
 800ac8c:	8007883a 	mov	r3,r16
 800ac90:	11000015 	stw	r4,0(r2)
 800ac94:	19000117 	ldw	r4,4(r3)
 800ac98:	11000115 	stw	r4,4(r2)
 800ac9c:	18c00217 	ldw	r3,8(r3)
 800aca0:	10c00215 	stw	r3,8(r2)
 800aca4:	800b883a 	mov	r5,r16
 800aca8:	9809883a 	mov	r4,r19
 800acac:	80082380 	call	8008238 <_free_r>
 800acb0:	9809883a 	mov	r4,r19
 800acb4:	801119c0 	call	801119c <__malloc_unlock>
 800acb8:	003fd306 	br	800ac08 <_realloc_r+0x1ac>
 800acbc:	300b883a 	mov	r5,r6
 800acc0:	dfc00a17 	ldw	ra,40(sp)
 800acc4:	df000917 	ldw	fp,36(sp)
 800acc8:	ddc00817 	ldw	r23,32(sp)
 800accc:	dd800717 	ldw	r22,28(sp)
 800acd0:	dd400617 	ldw	r21,24(sp)
 800acd4:	dd000517 	ldw	r20,20(sp)
 800acd8:	dcc00417 	ldw	r19,16(sp)
 800acdc:	dc800317 	ldw	r18,12(sp)
 800ace0:	dc400217 	ldw	r17,8(sp)
 800ace4:	dc000117 	ldw	r16,4(sp)
 800ace8:	dec00b04 	addi	sp,sp,44
 800acec:	8008e341 	jmpi	8008e34 <_malloc_r>
 800acf0:	344cb03a 	or	r6,r6,r17
 800acf4:	a9800115 	stw	r6,4(r21)
 800acf8:	ac4b883a 	add	r5,r21,r17
 800acfc:	10800054 	ori	r2,r2,1
 800ad00:	28800115 	stw	r2,4(r5)
 800ad04:	b0800117 	ldw	r2,4(r22)
 800ad08:	29400204 	addi	r5,r5,8
 800ad0c:	9809883a 	mov	r4,r19
 800ad10:	10800054 	ori	r2,r2,1
 800ad14:	b0800115 	stw	r2,4(r22)
 800ad18:	80082380 	call	8008238 <_free_r>
 800ad1c:	003fb006 	br	800abe0 <_realloc_r+0x184>
 800ad20:	2148703a 	and	r4,r4,r5
 800ad24:	a10b883a 	add	r5,r20,r4
 800ad28:	89800404 	addi	r6,r17,16
 800ad2c:	29bf7716 	blt	r5,r6,800ab0c <_realloc_r+0xb0>
 800ad30:	ac6b883a 	add	r21,r21,r17
 800ad34:	2c45c83a 	sub	r2,r5,r17
 800ad38:	e5400215 	stw	r21,8(fp)
 800ad3c:	10800054 	ori	r2,r2,1
 800ad40:	a8800115 	stw	r2,4(r21)
 800ad44:	80bfff17 	ldw	r2,-4(r16)
 800ad48:	9809883a 	mov	r4,r19
 800ad4c:	8025883a 	mov	r18,r16
 800ad50:	1080004c 	andi	r2,r2,1
 800ad54:	1462b03a 	or	r17,r2,r17
 800ad58:	847fff15 	stw	r17,-4(r16)
 800ad5c:	801119c0 	call	801119c <__malloc_unlock>
 800ad60:	003fa906 	br	800ac08 <_realloc_r+0x1ac>
 800ad64:	91000015 	stw	r4,0(r18)
 800ad68:	80c00117 	ldw	r3,4(r16)
 800ad6c:	30800728 	cmpgeui	r2,r6,28
 800ad70:	90c00115 	stw	r3,4(r18)
 800ad74:	1000551e 	bne	r2,zero,800aecc <_realloc_r+0x470>
 800ad78:	81000217 	ldw	r4,8(r16)
 800ad7c:	80c00204 	addi	r3,r16,8
 800ad80:	90800204 	addi	r2,r18,8
 800ad84:	003fc206 	br	800ac90 <_realloc_r+0x234>
 800ad88:	b0800317 	ldw	r2,12(r22)
 800ad8c:	b0c00217 	ldw	r3,8(r22)
 800ad90:	a1bfff04 	addi	r6,r20,-4
 800ad94:	31400968 	cmpgeui	r5,r6,37
 800ad98:	18800315 	stw	r2,12(r3)
 800ad9c:	10c00215 	stw	r3,8(r2)
 800ada0:	38c00217 	ldw	r3,8(r7)
 800ada4:	38800317 	ldw	r2,12(r7)
 800ada8:	39000204 	addi	r4,r7,8
 800adac:	3ded883a 	add	r22,r7,r23
 800adb0:	18800315 	stw	r2,12(r3)
 800adb4:	10c00215 	stw	r3,8(r2)
 800adb8:	283f6c26 	beq	r5,zero,800ab6c <_realloc_r+0x110>
 800adbc:	800b883a 	mov	r5,r16
 800adc0:	d9c00015 	stw	r7,0(sp)
 800adc4:	80096e80 	call	80096e8 <memmove>
 800adc8:	d9c00017 	ldw	r7,0(sp)
 800adcc:	1021883a 	mov	r16,r2
 800add0:	b829883a 	mov	r20,r23
 800add4:	382b883a 	mov	r21,r7
 800add8:	003f7706 	br	800abb8 <_realloc_r+0x15c>
 800addc:	90bfff17 	ldw	r2,-4(r18)
 800ade0:	00ffff04 	movi	r3,-4
 800ade4:	10c4703a 	and	r2,r2,r3
 800ade8:	a0a9883a 	add	r20,r20,r2
 800adec:	ad2d883a 	add	r22,r21,r20
 800adf0:	003f7106 	br	800abb8 <_realloc_r+0x15c>
 800adf4:	81fffe17 	ldw	r7,-8(r16)
 800adf8:	a9cfc83a 	sub	r7,r21,r7
 800adfc:	39000117 	ldw	r4,4(r7)
 800ae00:	214a703a 	and	r5,r4,r5
 800ae04:	003f4d06 	br	800ab3c <_realloc_r+0xe0>
 800ae08:	b0800317 	ldw	r2,12(r22)
 800ae0c:	b0c00217 	ldw	r3,8(r22)
 800ae10:	2829883a 	mov	r20,r5
 800ae14:	a96d883a 	add	r22,r21,r5
 800ae18:	18800315 	stw	r2,12(r3)
 800ae1c:	10c00215 	stw	r3,8(r2)
 800ae20:	003f6506 	br	800abb8 <_realloc_r+0x15c>
 800ae24:	800b883a 	mov	r5,r16
 800ae28:	9009883a 	mov	r4,r18
 800ae2c:	80096e80 	call	80096e8 <memmove>
 800ae30:	003f9c06 	br	800aca4 <_realloc_r+0x248>
 800ae34:	88800404 	addi	r2,r17,16
 800ae38:	b8bf4016 	blt	r23,r2,800ab3c <_realloc_r+0xe0>
 800ae3c:	38800317 	ldw	r2,12(r7)
 800ae40:	38c00217 	ldw	r3,8(r7)
 800ae44:	a1bfff04 	addi	r6,r20,-4
 800ae48:	31000968 	cmpgeui	r4,r6,37
 800ae4c:	18800315 	stw	r2,12(r3)
 800ae50:	10c00215 	stw	r3,8(r2)
 800ae54:	3c800204 	addi	r18,r7,8
 800ae58:	20003b1e 	bne	r4,zero,800af48 <_realloc_r+0x4ec>
 800ae5c:	30800530 	cmpltui	r2,r6,20
 800ae60:	80c00017 	ldw	r3,0(r16)
 800ae64:	1000361e 	bne	r2,zero,800af40 <_realloc_r+0x4e4>
 800ae68:	38c00215 	stw	r3,8(r7)
 800ae6c:	80c00117 	ldw	r3,4(r16)
 800ae70:	30800728 	cmpgeui	r2,r6,28
 800ae74:	38c00315 	stw	r3,12(r7)
 800ae78:	1000401e 	bne	r2,zero,800af7c <_realloc_r+0x520>
 800ae7c:	80c00217 	ldw	r3,8(r16)
 800ae80:	38800404 	addi	r2,r7,16
 800ae84:	84000204 	addi	r16,r16,8
 800ae88:	10c00015 	stw	r3,0(r2)
 800ae8c:	80c00117 	ldw	r3,4(r16)
 800ae90:	10c00115 	stw	r3,4(r2)
 800ae94:	80c00217 	ldw	r3,8(r16)
 800ae98:	10c00215 	stw	r3,8(r2)
 800ae9c:	3c47883a 	add	r3,r7,r17
 800aea0:	bc45c83a 	sub	r2,r23,r17
 800aea4:	e0c00215 	stw	r3,8(fp)
 800aea8:	10800054 	ori	r2,r2,1
 800aeac:	18800115 	stw	r2,4(r3)
 800aeb0:	38800117 	ldw	r2,4(r7)
 800aeb4:	9809883a 	mov	r4,r19
 800aeb8:	1080004c 	andi	r2,r2,1
 800aebc:	1462b03a 	or	r17,r2,r17
 800aec0:	3c400115 	stw	r17,4(r7)
 800aec4:	801119c0 	call	801119c <__malloc_unlock>
 800aec8:	003f4f06 	br	800ac08 <_realloc_r+0x1ac>
 800aecc:	80800217 	ldw	r2,8(r16)
 800aed0:	31800920 	cmpeqi	r6,r6,36
 800aed4:	90800215 	stw	r2,8(r18)
 800aed8:	80800317 	ldw	r2,12(r16)
 800aedc:	90800315 	stw	r2,12(r18)
 800aee0:	81000417 	ldw	r4,16(r16)
 800aee4:	30000f1e 	bne	r6,zero,800af24 <_realloc_r+0x4c8>
 800aee8:	80c00404 	addi	r3,r16,16
 800aeec:	90800404 	addi	r2,r18,16
 800aef0:	003f6706 	br	800ac90 <_realloc_r+0x234>
 800aef4:	2005883a 	mov	r2,r4
 800aef8:	003f2706 	br	800ab98 <_realloc_r+0x13c>
 800aefc:	80800217 	ldw	r2,8(r16)
 800af00:	31800920 	cmpeqi	r6,r6,36
 800af04:	38800415 	stw	r2,16(r7)
 800af08:	80800317 	ldw	r2,12(r16)
 800af0c:	38800515 	stw	r2,20(r7)
 800af10:	80c00417 	ldw	r3,16(r16)
 800af14:	3000121e 	bne	r6,zero,800af60 <_realloc_r+0x504>
 800af18:	38800604 	addi	r2,r7,24
 800af1c:	84000404 	addi	r16,r16,16
 800af20:	003f1d06 	br	800ab98 <_realloc_r+0x13c>
 800af24:	91000415 	stw	r4,16(r18)
 800af28:	81000517 	ldw	r4,20(r16)
 800af2c:	80c00604 	addi	r3,r16,24
 800af30:	90800604 	addi	r2,r18,24
 800af34:	91000515 	stw	r4,20(r18)
 800af38:	81000617 	ldw	r4,24(r16)
 800af3c:	003f5406 	br	800ac90 <_realloc_r+0x234>
 800af40:	9005883a 	mov	r2,r18
 800af44:	003fd006 	br	800ae88 <_realloc_r+0x42c>
 800af48:	800b883a 	mov	r5,r16
 800af4c:	9009883a 	mov	r4,r18
 800af50:	d9c00015 	stw	r7,0(sp)
 800af54:	80096e80 	call	80096e8 <memmove>
 800af58:	d9c00017 	ldw	r7,0(sp)
 800af5c:	003fcf06 	br	800ae9c <_realloc_r+0x440>
 800af60:	84000604 	addi	r16,r16,24
 800af64:	38c00615 	stw	r3,24(r7)
 800af68:	80ffff17 	ldw	r3,-4(r16)
 800af6c:	38800804 	addi	r2,r7,32
 800af70:	38c00715 	stw	r3,28(r7)
 800af74:	80c00017 	ldw	r3,0(r16)
 800af78:	003f0706 	br	800ab98 <_realloc_r+0x13c>
 800af7c:	80800217 	ldw	r2,8(r16)
 800af80:	31800920 	cmpeqi	r6,r6,36
 800af84:	38800415 	stw	r2,16(r7)
 800af88:	80800317 	ldw	r2,12(r16)
 800af8c:	38800515 	stw	r2,20(r7)
 800af90:	80c00417 	ldw	r3,16(r16)
 800af94:	3000031e 	bne	r6,zero,800afa4 <_realloc_r+0x548>
 800af98:	38800604 	addi	r2,r7,24
 800af9c:	84000404 	addi	r16,r16,16
 800afa0:	003fb906 	br	800ae88 <_realloc_r+0x42c>
 800afa4:	84000604 	addi	r16,r16,24
 800afa8:	38c00615 	stw	r3,24(r7)
 800afac:	80ffff17 	ldw	r3,-4(r16)
 800afb0:	38800804 	addi	r2,r7,32
 800afb4:	38c00715 	stw	r3,28(r7)
 800afb8:	80c00017 	ldw	r3,0(r16)
 800afbc:	003fb206 	br	800ae88 <_realloc_r+0x42c>

0800afc0 <__srget_r>:
 800afc0:	defffd04 	addi	sp,sp,-12
 800afc4:	dc400115 	stw	r17,4(sp)
 800afc8:	dc000015 	stw	r16,0(sp)
 800afcc:	dfc00215 	stw	ra,8(sp)
 800afd0:	2023883a 	mov	r17,r4
 800afd4:	2821883a 	mov	r16,r5
 800afd8:	20000226 	beq	r4,zero,800afe4 <__srget_r+0x24>
 800afdc:	20800e17 	ldw	r2,56(r4)
 800afe0:	10001026 	beq	r2,zero,800b024 <__srget_r+0x64>
 800afe4:	800b883a 	mov	r5,r16
 800afe8:	8809883a 	mov	r4,r17
 800afec:	800cf900 	call	800cf90 <__srefill_r>
 800aff0:	10000e1e 	bne	r2,zero,800b02c <__srget_r+0x6c>
 800aff4:	80c00017 	ldw	r3,0(r16)
 800aff8:	80800117 	ldw	r2,4(r16)
 800affc:	19000044 	addi	r4,r3,1
 800b000:	10bfffc4 	addi	r2,r2,-1
 800b004:	80800115 	stw	r2,4(r16)
 800b008:	81000015 	stw	r4,0(r16)
 800b00c:	18800003 	ldbu	r2,0(r3)
 800b010:	dfc00217 	ldw	ra,8(sp)
 800b014:	dc400117 	ldw	r17,4(sp)
 800b018:	dc000017 	ldw	r16,0(sp)
 800b01c:	dec00304 	addi	sp,sp,12
 800b020:	f800283a 	ret
 800b024:	80080d40 	call	80080d4 <__sinit>
 800b028:	003fee06 	br	800afe4 <__srget_r+0x24>
 800b02c:	00bfffc4 	movi	r2,-1
 800b030:	003ff706 	br	800b010 <__srget_r+0x50>

0800b034 <__srget>:
 800b034:	00820174 	movhi	r2,2053
 800b038:	200b883a 	mov	r5,r4
 800b03c:	1118e017 	ldw	r4,25472(r2)
 800b040:	800afc01 	jmpi	800afc0 <__srget_r>

0800b044 <_sbrk_r>:
 800b044:	defffe04 	addi	sp,sp,-8
 800b048:	dc000015 	stw	r16,0(sp)
 800b04c:	00820174 	movhi	r2,2053
 800b050:	2021883a 	mov	r16,r4
 800b054:	2809883a 	mov	r4,r5
 800b058:	dfc00115 	stw	ra,4(sp)
 800b05c:	10193915 	stw	zero,25828(r2)
 800b060:	8010e9c0 	call	8010e9c <sbrk>
 800b064:	10ffffd8 	cmpnei	r3,r2,-1
 800b068:	18000426 	beq	r3,zero,800b07c <_sbrk_r+0x38>
 800b06c:	dfc00117 	ldw	ra,4(sp)
 800b070:	dc000017 	ldw	r16,0(sp)
 800b074:	dec00204 	addi	sp,sp,8
 800b078:	f800283a 	ret
 800b07c:	00c20174 	movhi	r3,2053
 800b080:	18d93917 	ldw	r3,25828(r3)
 800b084:	183ff926 	beq	r3,zero,800b06c <_sbrk_r+0x28>
 800b088:	80c00015 	stw	r3,0(r16)
 800b08c:	dfc00117 	ldw	ra,4(sp)
 800b090:	dc000017 	ldw	r16,0(sp)
 800b094:	dec00204 	addi	sp,sp,8
 800b098:	f800283a 	ret

0800b09c <__sread>:
 800b09c:	defffe04 	addi	sp,sp,-8
 800b0a0:	dc000015 	stw	r16,0(sp)
 800b0a4:	2821883a 	mov	r16,r5
 800b0a8:	2940038f 	ldh	r5,14(r5)
 800b0ac:	dfc00115 	stw	ra,4(sp)
 800b0b0:	800cf100 	call	800cf10 <_read_r>
 800b0b4:	10000716 	blt	r2,zero,800b0d4 <__sread+0x38>
 800b0b8:	80c01417 	ldw	r3,80(r16)
 800b0bc:	1887883a 	add	r3,r3,r2
 800b0c0:	80c01415 	stw	r3,80(r16)
 800b0c4:	dfc00117 	ldw	ra,4(sp)
 800b0c8:	dc000017 	ldw	r16,0(sp)
 800b0cc:	dec00204 	addi	sp,sp,8
 800b0d0:	f800283a 	ret
 800b0d4:	80c0030b 	ldhu	r3,12(r16)
 800b0d8:	18fbffcc 	andi	r3,r3,61439
 800b0dc:	80c0030d 	sth	r3,12(r16)
 800b0e0:	dfc00117 	ldw	ra,4(sp)
 800b0e4:	dc000017 	ldw	r16,0(sp)
 800b0e8:	dec00204 	addi	sp,sp,8
 800b0ec:	f800283a 	ret

0800b0f0 <__seofread>:
 800b0f0:	0005883a 	mov	r2,zero
 800b0f4:	f800283a 	ret

0800b0f8 <__swrite>:
 800b0f8:	2880030b 	ldhu	r2,12(r5)
 800b0fc:	defffb04 	addi	sp,sp,-20
 800b100:	dcc00315 	stw	r19,12(sp)
 800b104:	dc800215 	stw	r18,8(sp)
 800b108:	dc400115 	stw	r17,4(sp)
 800b10c:	dc000015 	stw	r16,0(sp)
 800b110:	dfc00415 	stw	ra,16(sp)
 800b114:	10c0400c 	andi	r3,r2,256
 800b118:	2821883a 	mov	r16,r5
 800b11c:	2023883a 	mov	r17,r4
 800b120:	2940038f 	ldh	r5,14(r5)
 800b124:	3025883a 	mov	r18,r6
 800b128:	3827883a 	mov	r19,r7
 800b12c:	18000c1e 	bne	r3,zero,800b160 <__swrite+0x68>
 800b130:	10bbffcc 	andi	r2,r2,61439
 800b134:	980f883a 	mov	r7,r19
 800b138:	900d883a 	mov	r6,r18
 800b13c:	8809883a 	mov	r4,r17
 800b140:	8080030d 	sth	r2,12(r16)
 800b144:	dfc00417 	ldw	ra,16(sp)
 800b148:	dcc00317 	ldw	r19,12(sp)
 800b14c:	dc800217 	ldw	r18,8(sp)
 800b150:	dc400117 	ldw	r17,4(sp)
 800b154:	dc000017 	ldw	r16,0(sp)
 800b158:	dec00504 	addi	sp,sp,20
 800b15c:	8005fb81 	jmpi	8005fb8 <_write_r>
 800b160:	01c00084 	movi	r7,2
 800b164:	000d883a 	mov	r6,zero
 800b168:	800ce5c0 	call	800ce5c <_lseek_r>
 800b16c:	8080030b 	ldhu	r2,12(r16)
 800b170:	8140038f 	ldh	r5,14(r16)
 800b174:	003fee06 	br	800b130 <__swrite+0x38>

0800b178 <__sseek>:
 800b178:	defffe04 	addi	sp,sp,-8
 800b17c:	dc000015 	stw	r16,0(sp)
 800b180:	2821883a 	mov	r16,r5
 800b184:	2940038f 	ldh	r5,14(r5)
 800b188:	dfc00115 	stw	ra,4(sp)
 800b18c:	800ce5c0 	call	800ce5c <_lseek_r>
 800b190:	10ffffd8 	cmpnei	r3,r2,-1
 800b194:	18000826 	beq	r3,zero,800b1b8 <__sseek+0x40>
 800b198:	80c0030b 	ldhu	r3,12(r16)
 800b19c:	80801415 	stw	r2,80(r16)
 800b1a0:	18c40014 	ori	r3,r3,4096
 800b1a4:	80c0030d 	sth	r3,12(r16)
 800b1a8:	dfc00117 	ldw	ra,4(sp)
 800b1ac:	dc000017 	ldw	r16,0(sp)
 800b1b0:	dec00204 	addi	sp,sp,8
 800b1b4:	f800283a 	ret
 800b1b8:	80c0030b 	ldhu	r3,12(r16)
 800b1bc:	18fbffcc 	andi	r3,r3,61439
 800b1c0:	80c0030d 	sth	r3,12(r16)
 800b1c4:	dfc00117 	ldw	ra,4(sp)
 800b1c8:	dc000017 	ldw	r16,0(sp)
 800b1cc:	dec00204 	addi	sp,sp,8
 800b1d0:	f800283a 	ret

0800b1d4 <__sclose>:
 800b1d4:	2940038f 	ldh	r5,14(r5)
 800b1d8:	800c8281 	jmpi	800c828 <_close_r>

0800b1dc <__sprint_r.part.0>:
 800b1dc:	28801917 	ldw	r2,100(r5)
 800b1e0:	defff604 	addi	sp,sp,-40
 800b1e4:	dcc00315 	stw	r19,12(sp)
 800b1e8:	dfc00915 	stw	ra,36(sp)
 800b1ec:	df000815 	stw	fp,32(sp)
 800b1f0:	ddc00715 	stw	r23,28(sp)
 800b1f4:	dd800615 	stw	r22,24(sp)
 800b1f8:	dd400515 	stw	r21,20(sp)
 800b1fc:	dd000415 	stw	r20,16(sp)
 800b200:	dc800215 	stw	r18,8(sp)
 800b204:	dc400115 	stw	r17,4(sp)
 800b208:	dc000015 	stw	r16,0(sp)
 800b20c:	1088000c 	andi	r2,r2,8192
 800b210:	3027883a 	mov	r19,r6
 800b214:	10002c26 	beq	r2,zero,800b2c8 <__sprint_r.part.0+0xec>
 800b218:	30800217 	ldw	r2,8(r6)
 800b21c:	35000017 	ldw	r20,0(r6)
 800b220:	2821883a 	mov	r16,r5
 800b224:	2023883a 	mov	r17,r4
 800b228:	05bfff04 	movi	r22,-4
 800b22c:	10002426 	beq	r2,zero,800b2c0 <__sprint_r.part.0+0xe4>
 800b230:	a5400117 	ldw	r21,4(r20)
 800b234:	a5c00017 	ldw	r23,0(r20)
 800b238:	a824d0ba 	srli	r18,r21,2
 800b23c:	90001b26 	beq	r18,zero,800b2ac <__sprint_r.part.0+0xd0>
 800b240:	0039883a 	mov	fp,zero
 800b244:	00000206 	br	800b250 <__sprint_r.part.0+0x74>
 800b248:	bdc00104 	addi	r23,r23,4
 800b24c:	97001626 	beq	r18,fp,800b2a8 <__sprint_r.part.0+0xcc>
 800b250:	b9400017 	ldw	r5,0(r23)
 800b254:	800d883a 	mov	r6,r16
 800b258:	8809883a 	mov	r4,r17
 800b25c:	800cc700 	call	800cc70 <_fputwc_r>
 800b260:	10bfffe0 	cmpeqi	r2,r2,-1
 800b264:	e7000044 	addi	fp,fp,1
 800b268:	103ff726 	beq	r2,zero,800b248 <__sprint_r.part.0+0x6c>
 800b26c:	00bfffc4 	movi	r2,-1
 800b270:	98000215 	stw	zero,8(r19)
 800b274:	98000115 	stw	zero,4(r19)
 800b278:	dfc00917 	ldw	ra,36(sp)
 800b27c:	df000817 	ldw	fp,32(sp)
 800b280:	ddc00717 	ldw	r23,28(sp)
 800b284:	dd800617 	ldw	r22,24(sp)
 800b288:	dd400517 	ldw	r21,20(sp)
 800b28c:	dd000417 	ldw	r20,16(sp)
 800b290:	dcc00317 	ldw	r19,12(sp)
 800b294:	dc800217 	ldw	r18,8(sp)
 800b298:	dc400117 	ldw	r17,4(sp)
 800b29c:	dc000017 	ldw	r16,0(sp)
 800b2a0:	dec00a04 	addi	sp,sp,40
 800b2a4:	f800283a 	ret
 800b2a8:	98800217 	ldw	r2,8(r19)
 800b2ac:	adaa703a 	and	r21,r21,r22
 800b2b0:	1545c83a 	sub	r2,r2,r21
 800b2b4:	98800215 	stw	r2,8(r19)
 800b2b8:	a5000204 	addi	r20,r20,8
 800b2bc:	103fdc1e 	bne	r2,zero,800b230 <__sprint_r.part.0+0x54>
 800b2c0:	0005883a 	mov	r2,zero
 800b2c4:	003fea06 	br	800b270 <__sprint_r.part.0+0x94>
 800b2c8:	80085340 	call	8008534 <__sfvwrite_r>
 800b2cc:	003fe806 	br	800b270 <__sprint_r.part.0+0x94>

0800b2d0 <__sprint_r>:
 800b2d0:	30c00217 	ldw	r3,8(r6)
 800b2d4:	18000126 	beq	r3,zero,800b2dc <__sprint_r+0xc>
 800b2d8:	800b1dc1 	jmpi	800b1dc <__sprint_r.part.0>
 800b2dc:	30000115 	stw	zero,4(r6)
 800b2e0:	0005883a 	mov	r2,zero
 800b2e4:	f800283a 	ret

0800b2e8 <___vfiprintf_internal_r>:
 800b2e8:	deffcf04 	addi	sp,sp,-196
 800b2ec:	dd802d15 	stw	r22,180(sp)
 800b2f0:	dd402c15 	stw	r21,176(sp)
 800b2f4:	dd002b15 	stw	r20,172(sp)
 800b2f8:	dfc03015 	stw	ra,192(sp)
 800b2fc:	df002f15 	stw	fp,188(sp)
 800b300:	ddc02e15 	stw	r23,184(sp)
 800b304:	dcc02a15 	stw	r19,168(sp)
 800b308:	dc802915 	stw	r18,164(sp)
 800b30c:	dc402815 	stw	r17,160(sp)
 800b310:	dc002715 	stw	r16,156(sp)
 800b314:	d9c00415 	stw	r7,16(sp)
 800b318:	202d883a 	mov	r22,r4
 800b31c:	282b883a 	mov	r21,r5
 800b320:	3029883a 	mov	r20,r6
 800b324:	20000226 	beq	r4,zero,800b330 <___vfiprintf_internal_r+0x48>
 800b328:	20800e17 	ldw	r2,56(r4)
 800b32c:	1001b226 	beq	r2,zero,800b9f8 <___vfiprintf_internal_r+0x710>
 800b330:	a880030b 	ldhu	r2,12(r21)
 800b334:	10c8000c 	andi	r3,r2,8192
 800b338:	1800061e 	bne	r3,zero,800b354 <___vfiprintf_internal_r+0x6c>
 800b33c:	a8c01917 	ldw	r3,100(r21)
 800b340:	0137ffc4 	movi	r4,-8193
 800b344:	10880014 	ori	r2,r2,8192
 800b348:	1906703a 	and	r3,r3,r4
 800b34c:	a880030d 	sth	r2,12(r21)
 800b350:	a8c01915 	stw	r3,100(r21)
 800b354:	10c0020c 	andi	r3,r2,8
 800b358:	18010626 	beq	r3,zero,800b774 <___vfiprintf_internal_r+0x48c>
 800b35c:	a8c00417 	ldw	r3,16(r21)
 800b360:	18010426 	beq	r3,zero,800b774 <___vfiprintf_internal_r+0x48c>
 800b364:	1080068c 	andi	r2,r2,26
 800b368:	10800298 	cmpnei	r2,r2,10
 800b36c:	10010926 	beq	r2,zero,800b794 <___vfiprintf_internal_r+0x4ac>
 800b370:	dc801704 	addi	r18,sp,92
 800b374:	dc800a15 	stw	r18,40(sp)
 800b378:	d8000c15 	stw	zero,48(sp)
 800b37c:	d8000b15 	stw	zero,44(sp)
 800b380:	9021883a 	mov	r16,r18
 800b384:	d8000515 	stw	zero,20(sp)
 800b388:	d8000115 	stw	zero,4(sp)
 800b38c:	a0c00007 	ldb	r3,0(r20)
 800b390:	1800e626 	beq	r3,zero,800b72c <___vfiprintf_internal_r+0x444>
 800b394:	a023883a 	mov	r17,r20
 800b398:	00000306 	br	800b3a8 <___vfiprintf_internal_r+0xc0>
 800b39c:	88c00047 	ldb	r3,1(r17)
 800b3a0:	8c400044 	addi	r17,r17,1
 800b3a4:	18012826 	beq	r3,zero,800b848 <___vfiprintf_internal_r+0x560>
 800b3a8:	18c00958 	cmpnei	r3,r3,37
 800b3ac:	183ffb1e 	bne	r3,zero,800b39c <___vfiprintf_internal_r+0xb4>
 800b3b0:	8d27c83a 	sub	r19,r17,r20
 800b3b4:	8d01261e 	bne	r17,r20,800b850 <___vfiprintf_internal_r+0x568>
 800b3b8:	88800003 	ldbu	r2,0(r17)
 800b3bc:	10803fcc 	andi	r2,r2,255
 800b3c0:	1080201c 	xori	r2,r2,128
 800b3c4:	10bfe004 	addi	r2,r2,-128
 800b3c8:	1000d826 	beq	r2,zero,800b72c <___vfiprintf_internal_r+0x444>
 800b3cc:	88800047 	ldb	r2,1(r17)
 800b3d0:	8d000044 	addi	r20,r17,1
 800b3d4:	d8000945 	stb	zero,37(sp)
 800b3d8:	000b883a 	mov	r5,zero
 800b3dc:	000d883a 	mov	r6,zero
 800b3e0:	023fffc4 	movi	r8,-1
 800b3e4:	0023883a 	mov	r17,zero
 800b3e8:	001b883a 	mov	r13,zero
 800b3ec:	a5000044 	addi	r20,r20,1
 800b3f0:	10fff804 	addi	r3,r2,-32
 800b3f4:	19001668 	cmpgeui	r4,r3,89
 800b3f8:	20006a1e 	bne	r4,zero,800b5a4 <___vfiprintf_internal_r+0x2bc>
 800b3fc:	180690ba 	slli	r3,r3,2
 800b400:	01020074 	movhi	r4,2049
 800b404:	1909883a 	add	r4,r3,r4
 800b408:	20ed0417 	ldw	r3,-19440(r4)
 800b40c:	1800683a 	jmp	r3
 800b410:	0800bd00 	call	800bd0 <OSCtxSw_SWITCH_PC+0x800b90>
 800b414:	0800b5a4 	muli	zero,at,726
 800b418:	0800b5a4 	muli	zero,at,726
 800b41c:	0800bcf4 	orhi	zero,at,755
 800b420:	0800b5a4 	muli	zero,at,726
 800b424:	0800b5a4 	muli	zero,at,726
 800b428:	0800b5a4 	muli	zero,at,726
 800b42c:	0800b5a4 	muli	zero,at,726
 800b430:	0800b5a4 	muli	zero,at,726
 800b434:	0800b5a4 	muli	zero,at,726
 800b438:	0800bccc 	andi	zero,at,755
 800b43c:	0800bcbc 	xorhi	zero,at,754
 800b440:	0800b5a4 	muli	zero,at,726
 800b444:	0800bca4 	muli	zero,at,754
 800b448:	0800bc60 	cmpeqi	zero,at,753
 800b44c:	0800b5a4 	muli	zero,at,726
 800b450:	0800bc54 	ori	zero,at,753
 800b454:	0800b574 	orhi	zero,at,725
 800b458:	0800b574 	orhi	zero,at,725
 800b45c:	0800b574 	orhi	zero,at,725
 800b460:	0800b574 	orhi	zero,at,725
 800b464:	0800b574 	orhi	zero,at,725
 800b468:	0800b574 	orhi	zero,at,725
 800b46c:	0800b574 	orhi	zero,at,725
 800b470:	0800b574 	orhi	zero,at,725
 800b474:	0800b574 	orhi	zero,at,725
 800b478:	0800b5a4 	muli	zero,at,726
 800b47c:	0800b5a4 	muli	zero,at,726
 800b480:	0800b5a4 	muli	zero,at,726
 800b484:	0800b5a4 	muli	zero,at,726
 800b488:	0800b5a4 	muli	zero,at,726
 800b48c:	0800b5a4 	muli	zero,at,726
 800b490:	0800b5a4 	muli	zero,at,726
 800b494:	0800b5a4 	muli	zero,at,726
 800b498:	0800b5a4 	muli	zero,at,726
 800b49c:	0800b5a4 	muli	zero,at,726
 800b4a0:	0800bb70 	cmpltui	zero,at,749
 800b4a4:	0800b5a4 	muli	zero,at,726
 800b4a8:	0800b5a4 	muli	zero,at,726
 800b4ac:	0800b5a4 	muli	zero,at,726
 800b4b0:	0800b5a4 	muli	zero,at,726
 800b4b4:	0800b5a4 	muli	zero,at,726
 800b4b8:	0800b5a4 	muli	zero,at,726
 800b4bc:	0800b5a4 	muli	zero,at,726
 800b4c0:	0800b5a4 	muli	zero,at,726
 800b4c4:	0800b5a4 	muli	zero,at,726
 800b4c8:	0800b5a4 	muli	zero,at,726
 800b4cc:	0800b7e0 	cmpeqi	zero,at,735
 800b4d0:	0800b5a4 	muli	zero,at,726
 800b4d4:	0800b5a4 	muli	zero,at,726
 800b4d8:	0800b5a4 	muli	zero,at,726
 800b4dc:	0800b5a4 	muli	zero,at,726
 800b4e0:	0800b5a4 	muli	zero,at,726
 800b4e4:	0800b7b8 	rdprs	zero,at,734
 800b4e8:	0800b5a4 	muli	zero,at,726
 800b4ec:	0800b5a4 	muli	zero,at,726
 800b4f0:	0800bb28 	cmpgeui	zero,at,748
 800b4f4:	0800b5a4 	muli	zero,at,726
 800b4f8:	0800b5a4 	muli	zero,at,726
 800b4fc:	0800b5a4 	muli	zero,at,726
 800b500:	0800b5a4 	muli	zero,at,726
 800b504:	0800b5a4 	muli	zero,at,726
 800b508:	0800b5a4 	muli	zero,at,726
 800b50c:	0800b5a4 	muli	zero,at,726
 800b510:	0800b5a4 	muli	zero,at,726
 800b514:	0800b5a4 	muli	zero,at,726
 800b518:	0800b5a4 	muli	zero,at,726
 800b51c:	0800bb00 	call	800bb0 <OSCtxSw_SWITCH_PC+0x800b70>
 800b520:	0800ba00 	call	800ba0 <OSCtxSw_SWITCH_PC+0x800b60>
 800b524:	0800b5a4 	muli	zero,at,726
 800b528:	0800b5a4 	muli	zero,at,726
 800b52c:	0800b5a4 	muli	zero,at,726
 800b530:	0800baa4 	muli	zero,at,746
 800b534:	0800ba00 	call	800ba0 <OSCtxSw_SWITCH_PC+0x800b60>
 800b538:	0800b5a4 	muli	zero,at,726
 800b53c:	0800b5a4 	muli	zero,at,726
 800b540:	0800baec 	andhi	zero,at,747
 800b544:	0800b5a4 	muli	zero,at,726
 800b548:	0800bab0 	cmpltui	zero,at,746
 800b54c:	0800b7e4 	muli	zero,at,735
 800b550:	0800bdd8 	cmpnei	zero,at,759
 800b554:	0800bdcc 	andi	zero,at,759
 800b558:	0800b5a4 	muli	zero,at,726
 800b55c:	0800bd74 	orhi	zero,at,757
 800b560:	0800b5a4 	muli	zero,at,726
 800b564:	0800b7bc 	xorhi	zero,at,734
 800b568:	0800b5a4 	muli	zero,at,726
 800b56c:	0800b5a4 	muli	zero,at,726
 800b570:	0800bd2c 	andhi	zero,at,756
 800b574:	0023883a 	mov	r17,zero
 800b578:	10fff404 	addi	r3,r2,-48
 800b57c:	a0800007 	ldb	r2,0(r20)
 800b580:	8c4002a4 	muli	r17,r17,10
 800b584:	a5000044 	addi	r20,r20,1
 800b588:	1c63883a 	add	r17,r3,r17
 800b58c:	10fff404 	addi	r3,r2,-48
 800b590:	190002b0 	cmpltui	r4,r3,10
 800b594:	203ff91e 	bne	r4,zero,800b57c <___vfiprintf_internal_r+0x294>
 800b598:	10fff804 	addi	r3,r2,-32
 800b59c:	19001668 	cmpgeui	r4,r3,89
 800b5a0:	203f9626 	beq	r4,zero,800b3fc <___vfiprintf_internal_r+0x114>
 800b5a4:	29403fcc 	andi	r5,r5,255
 800b5a8:	2803e11e 	bne	r5,zero,800c530 <___vfiprintf_internal_r+0x1248>
 800b5ac:	10005f26 	beq	r2,zero,800b72c <___vfiprintf_internal_r+0x444>
 800b5b0:	d8800d05 	stb	r2,52(sp)
 800b5b4:	d8000945 	stb	zero,37(sp)
 800b5b8:	05c00044 	movi	r23,1
 800b5bc:	07000044 	movi	fp,1
 800b5c0:	dcc00d04 	addi	r19,sp,52
 800b5c4:	db400015 	stw	r13,0(sp)
 800b5c8:	0011883a 	mov	r8,zero
 800b5cc:	d8800017 	ldw	r2,0(sp)
 800b5d0:	1380008c 	andi	r14,r2,2
 800b5d4:	70000126 	beq	r14,zero,800b5dc <___vfiprintf_internal_r+0x2f4>
 800b5d8:	bdc00084 	addi	r23,r23,2
 800b5dc:	d8800017 	ldw	r2,0(sp)
 800b5e0:	d9000b17 	ldw	r4,44(sp)
 800b5e4:	1340210c 	andi	r13,r2,132
 800b5e8:	21800044 	addi	r6,r4,1
 800b5ec:	d8800c17 	ldw	r2,48(sp)
 800b5f0:	300b883a 	mov	r5,r6
 800b5f4:	6800021e 	bne	r13,zero,800b600 <___vfiprintf_internal_r+0x318>
 800b5f8:	8dc7c83a 	sub	r3,r17,r23
 800b5fc:	00c2d516 	blt	zero,r3,800c154 <___vfiprintf_internal_r+0xe6c>
 800b600:	d8c00947 	ldb	r3,37(sp)
 800b604:	81800204 	addi	r6,r16,8
 800b608:	18000d26 	beq	r3,zero,800b640 <___vfiprintf_internal_r+0x358>
 800b60c:	d8c00944 	addi	r3,sp,37
 800b610:	10800044 	addi	r2,r2,1
 800b614:	80c00015 	stw	r3,0(r16)
 800b618:	00c00044 	movi	r3,1
 800b61c:	80c00115 	stw	r3,4(r16)
 800b620:	d8800c15 	stw	r2,48(sp)
 800b624:	d9400b15 	stw	r5,44(sp)
 800b628:	28c00208 	cmpgei	r3,r5,8
 800b62c:	1802aa1e 	bne	r3,zero,800c0d8 <___vfiprintf_internal_r+0xdf0>
 800b630:	2809883a 	mov	r4,r5
 800b634:	3021883a 	mov	r16,r6
 800b638:	29400044 	addi	r5,r5,1
 800b63c:	31800204 	addi	r6,r6,8
 800b640:	70001826 	beq	r14,zero,800b6a4 <___vfiprintf_internal_r+0x3bc>
 800b644:	d8c00984 	addi	r3,sp,38
 800b648:	10800084 	addi	r2,r2,2
 800b64c:	80c00015 	stw	r3,0(r16)
 800b650:	00c00084 	movi	r3,2
 800b654:	80c00115 	stw	r3,4(r16)
 800b658:	d8800c15 	stw	r2,48(sp)
 800b65c:	d9400b15 	stw	r5,44(sp)
 800b660:	28c00208 	cmpgei	r3,r5,8
 800b664:	1802b426 	beq	r3,zero,800c138 <___vfiprintf_internal_r+0xe50>
 800b668:	10031026 	beq	r2,zero,800c2ac <___vfiprintf_internal_r+0xfc4>
 800b66c:	d9800a04 	addi	r6,sp,40
 800b670:	a80b883a 	mov	r5,r21
 800b674:	b009883a 	mov	r4,r22
 800b678:	da000315 	stw	r8,12(sp)
 800b67c:	db400215 	stw	r13,8(sp)
 800b680:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800b684:	10002b1e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800b688:	d9000b17 	ldw	r4,44(sp)
 800b68c:	d8800c17 	ldw	r2,48(sp)
 800b690:	da000317 	ldw	r8,12(sp)
 800b694:	db400217 	ldw	r13,8(sp)
 800b698:	d9801904 	addi	r6,sp,100
 800b69c:	21400044 	addi	r5,r4,1
 800b6a0:	9021883a 	mov	r16,r18
 800b6a4:	6b402018 	cmpnei	r13,r13,128
 800b6a8:	68020a26 	beq	r13,zero,800bed4 <___vfiprintf_internal_r+0xbec>
 800b6ac:	4711c83a 	sub	r8,r8,fp
 800b6b0:	02024916 	blt	zero,r8,800bfd8 <___vfiprintf_internal_r+0xcf0>
 800b6b4:	e085883a 	add	r2,fp,r2
 800b6b8:	d9400b15 	stw	r5,44(sp)
 800b6bc:	84c00015 	stw	r19,0(r16)
 800b6c0:	87000115 	stw	fp,4(r16)
 800b6c4:	d8800c15 	stw	r2,48(sp)
 800b6c8:	29400210 	cmplti	r5,r5,8
 800b6cc:	2800081e 	bne	r5,zero,800b6f0 <___vfiprintf_internal_r+0x408>
 800b6d0:	10008f26 	beq	r2,zero,800b910 <___vfiprintf_internal_r+0x628>
 800b6d4:	d9800a04 	addi	r6,sp,40
 800b6d8:	a80b883a 	mov	r5,r21
 800b6dc:	b009883a 	mov	r4,r22
 800b6e0:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800b6e4:	1000131e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800b6e8:	d8800c17 	ldw	r2,48(sp)
 800b6ec:	900d883a 	mov	r6,r18
 800b6f0:	d8c00017 	ldw	r3,0(sp)
 800b6f4:	1cc0010c 	andi	r19,r3,4
 800b6f8:	98000226 	beq	r19,zero,800b704 <___vfiprintf_internal_r+0x41c>
 800b6fc:	8de1c83a 	sub	r16,r17,r23
 800b700:	04008a16 	blt	zero,r16,800b92c <___vfiprintf_internal_r+0x644>
 800b704:	8dc0010e 	bge	r17,r23,800b70c <___vfiprintf_internal_r+0x424>
 800b708:	b823883a 	mov	r17,r23
 800b70c:	d8c00117 	ldw	r3,4(sp)
 800b710:	1c47883a 	add	r3,r3,r17
 800b714:	d8c00115 	stw	r3,4(sp)
 800b718:	1002651e 	bne	r2,zero,800c0b0 <___vfiprintf_internal_r+0xdc8>
 800b71c:	a0c00007 	ldb	r3,0(r20)
 800b720:	d8000b15 	stw	zero,44(sp)
 800b724:	9021883a 	mov	r16,r18
 800b728:	183f1a1e 	bne	r3,zero,800b394 <___vfiprintf_internal_r+0xac>
 800b72c:	d8800c17 	ldw	r2,48(sp)
 800b730:	1003811e 	bne	r2,zero,800c538 <___vfiprintf_internal_r+0x1250>
 800b734:	a880030b 	ldhu	r2,12(r21)
 800b738:	1080100c 	andi	r2,r2,64
 800b73c:	10039c1e 	bne	r2,zero,800c5b0 <___vfiprintf_internal_r+0x12c8>
 800b740:	d8800117 	ldw	r2,4(sp)
 800b744:	dfc03017 	ldw	ra,192(sp)
 800b748:	df002f17 	ldw	fp,188(sp)
 800b74c:	ddc02e17 	ldw	r23,184(sp)
 800b750:	dd802d17 	ldw	r22,180(sp)
 800b754:	dd402c17 	ldw	r21,176(sp)
 800b758:	dd002b17 	ldw	r20,172(sp)
 800b75c:	dcc02a17 	ldw	r19,168(sp)
 800b760:	dc802917 	ldw	r18,164(sp)
 800b764:	dc402817 	ldw	r17,160(sp)
 800b768:	dc002717 	ldw	r16,156(sp)
 800b76c:	dec03104 	addi	sp,sp,196
 800b770:	f800283a 	ret
 800b774:	a80b883a 	mov	r5,r21
 800b778:	b009883a 	mov	r4,r22
 800b77c:	800601c0 	call	800601c <__swsetup_r>
 800b780:	10038b1e 	bne	r2,zero,800c5b0 <___vfiprintf_internal_r+0x12c8>
 800b784:	a880030b 	ldhu	r2,12(r21)
 800b788:	1080068c 	andi	r2,r2,26
 800b78c:	10800298 	cmpnei	r2,r2,10
 800b790:	103ef71e 	bne	r2,zero,800b370 <___vfiprintf_internal_r+0x88>
 800b794:	a880038f 	ldh	r2,14(r21)
 800b798:	103ef516 	blt	r2,zero,800b370 <___vfiprintf_internal_r+0x88>
 800b79c:	d9c00417 	ldw	r7,16(sp)
 800b7a0:	a00d883a 	mov	r6,r20
 800b7a4:	a80b883a 	mov	r5,r21
 800b7a8:	b009883a 	mov	r4,r22
 800b7ac:	800c6080 	call	800c608 <__sbprintf>
 800b7b0:	d8800115 	stw	r2,4(sp)
 800b7b4:	003fe206 	br	800b740 <___vfiprintf_internal_r+0x458>
 800b7b8:	6b400414 	ori	r13,r13,16
 800b7bc:	6880080c 	andi	r2,r13,32
 800b7c0:	10004726 	beq	r2,zero,800b8e0 <___vfiprintf_internal_r+0x5f8>
 800b7c4:	d8c00417 	ldw	r3,16(sp)
 800b7c8:	00800044 	movi	r2,1
 800b7cc:	1dc00017 	ldw	r23,0(r3)
 800b7d0:	1f000117 	ldw	fp,4(r3)
 800b7d4:	18c00204 	addi	r3,r3,8
 800b7d8:	d8c00415 	stw	r3,16(sp)
 800b7dc:	00000906 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800b7e0:	6b400414 	ori	r13,r13,16
 800b7e4:	6880080c 	andi	r2,r13,32
 800b7e8:	10003126 	beq	r2,zero,800b8b0 <___vfiprintf_internal_r+0x5c8>
 800b7ec:	d8c00417 	ldw	r3,16(sp)
 800b7f0:	0005883a 	mov	r2,zero
 800b7f4:	1dc00017 	ldw	r23,0(r3)
 800b7f8:	1f000117 	ldw	fp,4(r3)
 800b7fc:	18c00204 	addi	r3,r3,8
 800b800:	d8c00415 	stw	r3,16(sp)
 800b804:	d8000945 	stb	zero,37(sp)
 800b808:	40ffffe0 	cmpeqi	r3,r8,-1
 800b80c:	001d883a 	mov	r14,zero
 800b810:	1800f21e 	bne	r3,zero,800bbdc <___vfiprintf_internal_r+0x8f4>
 800b814:	04ffdfc4 	movi	r19,-129
 800b818:	6cc8703a 	and	r4,r13,r19
 800b81c:	bf06b03a 	or	r3,r23,fp
 800b820:	d9000015 	stw	r4,0(sp)
 800b824:	1802491e 	bne	r3,zero,800c14c <___vfiprintf_internal_r+0xe64>
 800b828:	4003071e 	bne	r8,zero,800c448 <___vfiprintf_internal_r+0x1160>
 800b82c:	1002a41e 	bne	r2,zero,800c2c0 <___vfiprintf_internal_r+0xfd8>
 800b830:	6f00004c 	andi	fp,r13,1
 800b834:	e002b626 	beq	fp,zero,800c310 <___vfiprintf_internal_r+0x1028>
 800b838:	00800c04 	movi	r2,48
 800b83c:	d88016c5 	stb	r2,91(sp)
 800b840:	dcc016c4 	addi	r19,sp,91
 800b844:	00008e06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800b848:	8d27c83a 	sub	r19,r17,r20
 800b84c:	8d3fb726 	beq	r17,r20,800b72c <___vfiprintf_internal_r+0x444>
 800b850:	d8c00c17 	ldw	r3,48(sp)
 800b854:	d8800b17 	ldw	r2,44(sp)
 800b858:	85000015 	stw	r20,0(r16)
 800b85c:	98c7883a 	add	r3,r19,r3
 800b860:	10800044 	addi	r2,r2,1
 800b864:	d8800b15 	stw	r2,44(sp)
 800b868:	84c00115 	stw	r19,4(r16)
 800b86c:	d8c00c15 	stw	r3,48(sp)
 800b870:	10800208 	cmpgei	r2,r2,8
 800b874:	1000061e 	bne	r2,zero,800b890 <___vfiprintf_internal_r+0x5a8>
 800b878:	84000204 	addi	r16,r16,8
 800b87c:	d8c00117 	ldw	r3,4(sp)
 800b880:	88800003 	ldbu	r2,0(r17)
 800b884:	1cc7883a 	add	r3,r3,r19
 800b888:	d8c00115 	stw	r3,4(sp)
 800b88c:	003ecb06 	br	800b3bc <___vfiprintf_internal_r+0xd4>
 800b890:	18027d26 	beq	r3,zero,800c288 <___vfiprintf_internal_r+0xfa0>
 800b894:	d9800a04 	addi	r6,sp,40
 800b898:	a80b883a 	mov	r5,r21
 800b89c:	b009883a 	mov	r4,r22
 800b8a0:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800b8a4:	103fa31e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800b8a8:	9021883a 	mov	r16,r18
 800b8ac:	003ff306 	br	800b87c <___vfiprintf_internal_r+0x594>
 800b8b0:	d9000417 	ldw	r4,16(sp)
 800b8b4:	6880040c 	andi	r2,r13,16
 800b8b8:	20c00104 	addi	r3,r4,4
 800b8bc:	1002a11e 	bne	r2,zero,800c344 <___vfiprintf_internal_r+0x105c>
 800b8c0:	6880100c 	andi	r2,r13,64
 800b8c4:	1002f426 	beq	r2,zero,800c498 <___vfiprintf_internal_r+0x11b0>
 800b8c8:	d8800417 	ldw	r2,16(sp)
 800b8cc:	0039883a 	mov	fp,zero
 800b8d0:	d8c00415 	stw	r3,16(sp)
 800b8d4:	15c0000b 	ldhu	r23,0(r2)
 800b8d8:	0005883a 	mov	r2,zero
 800b8dc:	003fc906 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800b8e0:	d9000417 	ldw	r4,16(sp)
 800b8e4:	6880040c 	andi	r2,r13,16
 800b8e8:	20c00104 	addi	r3,r4,4
 800b8ec:	1002a91e 	bne	r2,zero,800c394 <___vfiprintf_internal_r+0x10ac>
 800b8f0:	6880100c 	andi	r2,r13,64
 800b8f4:	1002ee26 	beq	r2,zero,800c4b0 <___vfiprintf_internal_r+0x11c8>
 800b8f8:	d8800417 	ldw	r2,16(sp)
 800b8fc:	0039883a 	mov	fp,zero
 800b900:	d8c00415 	stw	r3,16(sp)
 800b904:	15c0000b 	ldhu	r23,0(r2)
 800b908:	00800044 	movi	r2,1
 800b90c:	003fbd06 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800b910:	d8c00017 	ldw	r3,0(sp)
 800b914:	d8000b15 	stw	zero,44(sp)
 800b918:	1cc0010c 	andi	r19,r3,4
 800b91c:	98024826 	beq	r19,zero,800c240 <___vfiprintf_internal_r+0xf58>
 800b920:	8de1c83a 	sub	r16,r17,r23
 800b924:	0402460e 	bge	zero,r16,800c240 <___vfiprintf_internal_r+0xf58>
 800b928:	900d883a 	mov	r6,r18
 800b92c:	80c00450 	cmplti	r3,r16,17
 800b930:	d9000b17 	ldw	r4,44(sp)
 800b934:	01c20174 	movhi	r7,2053
 800b938:	1803151e 	bne	r3,zero,800c590 <___vfiprintf_internal_r+0x12a8>
 800b93c:	39feea04 	addi	r7,r7,-1112
 800b940:	04c00404 	movi	r19,16
 800b944:	00000606 	br	800b960 <___vfiprintf_internal_r+0x678>
 800b948:	21400084 	addi	r5,r4,2
 800b94c:	31800204 	addi	r6,r6,8
 800b950:	1809883a 	mov	r4,r3
 800b954:	843ffc04 	addi	r16,r16,-16
 800b958:	80c00448 	cmpgei	r3,r16,17
 800b95c:	18001726 	beq	r3,zero,800b9bc <___vfiprintf_internal_r+0x6d4>
 800b960:	20c00044 	addi	r3,r4,1
 800b964:	10800404 	addi	r2,r2,16
 800b968:	31c00015 	stw	r7,0(r6)
 800b96c:	34c00115 	stw	r19,4(r6)
 800b970:	d8800c15 	stw	r2,48(sp)
 800b974:	d8c00b15 	stw	r3,44(sp)
 800b978:	19400208 	cmpgei	r5,r3,8
 800b97c:	283ff226 	beq	r5,zero,800b948 <___vfiprintf_internal_r+0x660>
 800b980:	d9800a04 	addi	r6,sp,40
 800b984:	a80b883a 	mov	r5,r21
 800b988:	b009883a 	mov	r4,r22
 800b98c:	10014d26 	beq	r2,zero,800bec4 <___vfiprintf_internal_r+0xbdc>
 800b990:	d9c00015 	stw	r7,0(sp)
 800b994:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800b998:	103f661e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800b99c:	d9000b17 	ldw	r4,44(sp)
 800b9a0:	843ffc04 	addi	r16,r16,-16
 800b9a4:	80c00448 	cmpgei	r3,r16,17
 800b9a8:	d8800c17 	ldw	r2,48(sp)
 800b9ac:	d9c00017 	ldw	r7,0(sp)
 800b9b0:	900d883a 	mov	r6,r18
 800b9b4:	21400044 	addi	r5,r4,1
 800b9b8:	183fe91e 	bne	r3,zero,800b960 <___vfiprintf_internal_r+0x678>
 800b9bc:	1405883a 	add	r2,r2,r16
 800b9c0:	d9400b15 	stw	r5,44(sp)
 800b9c4:	31c00015 	stw	r7,0(r6)
 800b9c8:	34000115 	stw	r16,4(r6)
 800b9cc:	d8800c15 	stw	r2,48(sp)
 800b9d0:	29400210 	cmplti	r5,r5,8
 800b9d4:	283f4b1e 	bne	r5,zero,800b704 <___vfiprintf_internal_r+0x41c>
 800b9d8:	10021926 	beq	r2,zero,800c240 <___vfiprintf_internal_r+0xf58>
 800b9dc:	d9800a04 	addi	r6,sp,40
 800b9e0:	a80b883a 	mov	r5,r21
 800b9e4:	b009883a 	mov	r4,r22
 800b9e8:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800b9ec:	103f511e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800b9f0:	d8800c17 	ldw	r2,48(sp)
 800b9f4:	003f4306 	br	800b704 <___vfiprintf_internal_r+0x41c>
 800b9f8:	80080d40 	call	80080d4 <__sinit>
 800b9fc:	003e4c06 	br	800b330 <___vfiprintf_internal_r+0x48>
 800ba00:	29403fcc 	andi	r5,r5,255
 800ba04:	2802de1e 	bne	r5,zero,800c580 <___vfiprintf_internal_r+0x1298>
 800ba08:	6880080c 	andi	r2,r13,32
 800ba0c:	10005d26 	beq	r2,zero,800bb84 <___vfiprintf_internal_r+0x89c>
 800ba10:	d8c00417 	ldw	r3,16(sp)
 800ba14:	18800117 	ldw	r2,4(r3)
 800ba18:	1dc00017 	ldw	r23,0(r3)
 800ba1c:	18c00204 	addi	r3,r3,8
 800ba20:	d8c00415 	stw	r3,16(sp)
 800ba24:	1039883a 	mov	fp,r2
 800ba28:	10006216 	blt	r2,zero,800bbb4 <___vfiprintf_internal_r+0x8cc>
 800ba2c:	40bfffd8 	cmpnei	r2,r8,-1
 800ba30:	10000a26 	beq	r2,zero,800ba5c <___vfiprintf_internal_r+0x774>
 800ba34:	00ffdfc4 	movi	r3,-129
 800ba38:	bf04b03a 	or	r2,r23,fp
 800ba3c:	db800943 	ldbu	r14,37(sp)
 800ba40:	68da703a 	and	r13,r13,r3
 800ba44:	1000061e 	bne	r2,zero,800ba60 <___vfiprintf_internal_r+0x778>
 800ba48:	4000081e 	bne	r8,zero,800ba6c <___vfiprintf_internal_r+0x784>
 800ba4c:	0039883a 	mov	fp,zero
 800ba50:	db400015 	stw	r13,0(sp)
 800ba54:	9027883a 	mov	r19,r18
 800ba58:	00000906 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800ba5c:	db800943 	ldbu	r14,37(sp)
 800ba60:	e000ec1e 	bne	fp,zero,800be14 <___vfiprintf_internal_r+0xb2c>
 800ba64:	b88002a8 	cmpgeui	r2,r23,10
 800ba68:	1000ea1e 	bne	r2,zero,800be14 <___vfiprintf_internal_r+0xb2c>
 800ba6c:	bdc00c04 	addi	r23,r23,48
 800ba70:	ddc016c5 	stb	r23,91(sp)
 800ba74:	db400015 	stw	r13,0(sp)
 800ba78:	07000044 	movi	fp,1
 800ba7c:	dcc016c4 	addi	r19,sp,91
 800ba80:	402f883a 	mov	r23,r8
 800ba84:	4700010e 	bge	r8,fp,800ba8c <___vfiprintf_internal_r+0x7a4>
 800ba88:	e02f883a 	mov	r23,fp
 800ba8c:	73803fcc 	andi	r14,r14,255
 800ba90:	7380201c 	xori	r14,r14,128
 800ba94:	73bfe004 	addi	r14,r14,-128
 800ba98:	703ecc26 	beq	r14,zero,800b5cc <___vfiprintf_internal_r+0x2e4>
 800ba9c:	bdc00044 	addi	r23,r23,1
 800baa0:	003eca06 	br	800b5cc <___vfiprintf_internal_r+0x2e4>
 800baa4:	a0800007 	ldb	r2,0(r20)
 800baa8:	6b401014 	ori	r13,r13,64
 800baac:	003e4f06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bab0:	29403fcc 	andi	r5,r5,255
 800bab4:	2802b01e 	bne	r5,zero,800c578 <___vfiprintf_internal_r+0x1290>
 800bab8:	d9000417 	ldw	r4,16(sp)
 800babc:	6880080c 	andi	r2,r13,32
 800bac0:	20c00017 	ldw	r3,0(r4)
 800bac4:	21000104 	addi	r4,r4,4
 800bac8:	1002231e 	bne	r2,zero,800c358 <___vfiprintf_internal_r+0x1070>
 800bacc:	6880040c 	andi	r2,r13,16
 800bad0:	1002511e 	bne	r2,zero,800c418 <___vfiprintf_internal_r+0x1130>
 800bad4:	6b40100c 	andi	r13,r13,64
 800bad8:	68024f26 	beq	r13,zero,800c418 <___vfiprintf_internal_r+0x1130>
 800badc:	d8800117 	ldw	r2,4(sp)
 800bae0:	d9000415 	stw	r4,16(sp)
 800bae4:	1880000d 	sth	r2,0(r3)
 800bae8:	003e2806 	br	800b38c <___vfiprintf_internal_r+0xa4>
 800baec:	a0800007 	ldb	r2,0(r20)
 800baf0:	10c01b18 	cmpnei	r3,r2,108
 800baf4:	18025826 	beq	r3,zero,800c458 <___vfiprintf_internal_r+0x1170>
 800baf8:	6b400414 	ori	r13,r13,16
 800bafc:	003e3b06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bb00:	d8c00417 	ldw	r3,16(sp)
 800bb04:	d8000945 	stb	zero,37(sp)
 800bb08:	05c00044 	movi	r23,1
 800bb0c:	18800017 	ldw	r2,0(r3)
 800bb10:	18c00104 	addi	r3,r3,4
 800bb14:	d8c00415 	stw	r3,16(sp)
 800bb18:	d8800d05 	stb	r2,52(sp)
 800bb1c:	07000044 	movi	fp,1
 800bb20:	dcc00d04 	addi	r19,sp,52
 800bb24:	003ea706 	br	800b5c4 <___vfiprintf_internal_r+0x2dc>
 800bb28:	29403fcc 	andi	r5,r5,255
 800bb2c:	2802961e 	bne	r5,zero,800c588 <___vfiprintf_internal_r+0x12a0>
 800bb30:	00c20174 	movhi	r3,2053
 800bb34:	18fe6104 	addi	r3,r3,-1660
 800bb38:	d8c00515 	stw	r3,20(sp)
 800bb3c:	68c0080c 	andi	r3,r13,32
 800bb40:	18008126 	beq	r3,zero,800bd48 <___vfiprintf_internal_r+0xa60>
 800bb44:	d8c00417 	ldw	r3,16(sp)
 800bb48:	1dc00017 	ldw	r23,0(r3)
 800bb4c:	1f000117 	ldw	fp,4(r3)
 800bb50:	18c00204 	addi	r3,r3,8
 800bb54:	d8c00415 	stw	r3,16(sp)
 800bb58:	68c0004c 	andi	r3,r13,1
 800bb5c:	18000226 	beq	r3,zero,800bb68 <___vfiprintf_internal_r+0x880>
 800bb60:	bf06b03a 	or	r3,r23,fp
 800bb64:	1801f11e 	bne	r3,zero,800c32c <___vfiprintf_internal_r+0x1044>
 800bb68:	00800084 	movi	r2,2
 800bb6c:	003f2506 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800bb70:	29403fcc 	andi	r5,r5,255
 800bb74:	28027e1e 	bne	r5,zero,800c570 <___vfiprintf_internal_r+0x1288>
 800bb78:	6b400414 	ori	r13,r13,16
 800bb7c:	6880080c 	andi	r2,r13,32
 800bb80:	103fa31e 	bne	r2,zero,800ba10 <___vfiprintf_internal_r+0x728>
 800bb84:	d9000417 	ldw	r4,16(sp)
 800bb88:	6880040c 	andi	r2,r13,16
 800bb8c:	20c00104 	addi	r3,r4,4
 800bb90:	1001f71e 	bne	r2,zero,800c370 <___vfiprintf_internal_r+0x1088>
 800bb94:	6880100c 	andi	r2,r13,64
 800bb98:	10025026 	beq	r2,zero,800c4dc <___vfiprintf_internal_r+0x11f4>
 800bb9c:	d8800417 	ldw	r2,16(sp)
 800bba0:	d8c00415 	stw	r3,16(sp)
 800bba4:	15c0000f 	ldh	r23,0(r2)
 800bba8:	b839d7fa 	srai	fp,r23,31
 800bbac:	e005883a 	mov	r2,fp
 800bbb0:	103f9e0e 	bge	r2,zero,800ba2c <___vfiprintf_internal_r+0x744>
 800bbb4:	b804c03a 	cmpne	r2,r23,zero
 800bbb8:	0739c83a 	sub	fp,zero,fp
 800bbbc:	e0b9c83a 	sub	fp,fp,r2
 800bbc0:	00800b44 	movi	r2,45
 800bbc4:	d8800945 	stb	r2,37(sp)
 800bbc8:	40ffffe0 	cmpeqi	r3,r8,-1
 800bbcc:	05efc83a 	sub	r23,zero,r23
 800bbd0:	03800b44 	movi	r14,45
 800bbd4:	00800044 	movi	r2,1
 800bbd8:	183f0e26 	beq	r3,zero,800b814 <___vfiprintf_internal_r+0x52c>
 800bbdc:	10c00060 	cmpeqi	r3,r2,1
 800bbe0:	183f9f1e 	bne	r3,zero,800ba60 <___vfiprintf_internal_r+0x778>
 800bbe4:	108000a0 	cmpeqi	r2,r2,2
 800bbe8:	9027883a 	mov	r19,r18
 800bbec:	1000a61e 	bne	r2,zero,800be88 <___vfiprintf_internal_r+0xba0>
 800bbf0:	e006977a 	slli	r3,fp,29
 800bbf4:	b804d0fa 	srli	r2,r23,3
 800bbf8:	e038d0fa 	srli	fp,fp,3
 800bbfc:	b90001cc 	andi	r4,r23,7
 800bc00:	21000c04 	addi	r4,r4,48
 800bc04:	18aeb03a 	or	r23,r3,r2
 800bc08:	993fffc5 	stb	r4,-1(r19)
 800bc0c:	bf04b03a 	or	r2,r23,fp
 800bc10:	980b883a 	mov	r5,r19
 800bc14:	9cffffc4 	addi	r19,r19,-1
 800bc18:	103ff51e 	bne	r2,zero,800bbf0 <___vfiprintf_internal_r+0x908>
 800bc1c:	6880004c 	andi	r2,r13,1
 800bc20:	1000a526 	beq	r2,zero,800beb8 <___vfiprintf_internal_r+0xbd0>
 800bc24:	21003fcc 	andi	r4,r4,255
 800bc28:	2100201c 	xori	r4,r4,128
 800bc2c:	213fe004 	addi	r4,r4,-128
 800bc30:	20800c18 	cmpnei	r2,r4,48
 800bc34:	1000a026 	beq	r2,zero,800beb8 <___vfiprintf_internal_r+0xbd0>
 800bc38:	297fff84 	addi	r5,r5,-2
 800bc3c:	00800c04 	movi	r2,48
 800bc40:	98bfffc5 	stb	r2,-1(r19)
 800bc44:	9179c83a 	sub	fp,r18,r5
 800bc48:	db400015 	stw	r13,0(sp)
 800bc4c:	2827883a 	mov	r19,r5
 800bc50:	003f8b06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800bc54:	a0800007 	ldb	r2,0(r20)
 800bc58:	6b402014 	ori	r13,r13,128
 800bc5c:	003de306 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bc60:	a0800007 	ldb	r2,0(r20)
 800bc64:	a1000044 	addi	r4,r20,1
 800bc68:	10c00aa0 	cmpeqi	r3,r2,42
 800bc6c:	1802531e 	bne	r3,zero,800c5bc <___vfiprintf_internal_r+0x12d4>
 800bc70:	10fff404 	addi	r3,r2,-48
 800bc74:	19c002b0 	cmpltui	r7,r3,10
 800bc78:	2029883a 	mov	r20,r4
 800bc7c:	0011883a 	mov	r8,zero
 800bc80:	383ddb26 	beq	r7,zero,800b3f0 <___vfiprintf_internal_r+0x108>
 800bc84:	a0800007 	ldb	r2,0(r20)
 800bc88:	420002a4 	muli	r8,r8,10
 800bc8c:	a5000044 	addi	r20,r20,1
 800bc90:	40d1883a 	add	r8,r8,r3
 800bc94:	10fff404 	addi	r3,r2,-48
 800bc98:	190002b0 	cmpltui	r4,r3,10
 800bc9c:	203ff91e 	bne	r4,zero,800bc84 <___vfiprintf_internal_r+0x99c>
 800bca0:	003dd306 	br	800b3f0 <___vfiprintf_internal_r+0x108>
 800bca4:	a0800003 	ldbu	r2,0(r20)
 800bca8:	10803fcc 	andi	r2,r2,255
 800bcac:	1080201c 	xori	r2,r2,128
 800bcb0:	6b400114 	ori	r13,r13,4
 800bcb4:	10bfe004 	addi	r2,r2,-128
 800bcb8:	003dcc06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bcbc:	a0800007 	ldb	r2,0(r20)
 800bcc0:	01400044 	movi	r5,1
 800bcc4:	01800ac4 	movi	r6,43
 800bcc8:	003dc806 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bccc:	d8c00417 	ldw	r3,16(sp)
 800bcd0:	a0800003 	ldbu	r2,0(r20)
 800bcd4:	1c400017 	ldw	r17,0(r3)
 800bcd8:	18c00104 	addi	r3,r3,4
 800bcdc:	8801b916 	blt	r17,zero,800c3c4 <___vfiprintf_internal_r+0x10dc>
 800bce0:	d8c00415 	stw	r3,16(sp)
 800bce4:	10803fcc 	andi	r2,r2,255
 800bce8:	1080201c 	xori	r2,r2,128
 800bcec:	10bfe004 	addi	r2,r2,-128
 800bcf0:	003dbe06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bcf4:	a0800007 	ldb	r2,0(r20)
 800bcf8:	6b400054 	ori	r13,r13,1
 800bcfc:	003dbb06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bd00:	30c03fcc 	andi	r3,r6,255
 800bd04:	18c0201c 	xori	r3,r3,128
 800bd08:	18ffe004 	addi	r3,r3,-128
 800bd0c:	a0800003 	ldbu	r2,0(r20)
 800bd10:	183ff41e 	bne	r3,zero,800bce4 <___vfiprintf_internal_r+0x9fc>
 800bd14:	10803fcc 	andi	r2,r2,255
 800bd18:	1080201c 	xori	r2,r2,128
 800bd1c:	01400044 	movi	r5,1
 800bd20:	01800804 	movi	r6,32
 800bd24:	10bfe004 	addi	r2,r2,-128
 800bd28:	003db006 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bd2c:	29403fcc 	andi	r5,r5,255
 800bd30:	28020a1e 	bne	r5,zero,800c55c <___vfiprintf_internal_r+0x1274>
 800bd34:	00c20174 	movhi	r3,2053
 800bd38:	18fe6604 	addi	r3,r3,-1640
 800bd3c:	d8c00515 	stw	r3,20(sp)
 800bd40:	68c0080c 	andi	r3,r13,32
 800bd44:	183f7f1e 	bne	r3,zero,800bb44 <___vfiprintf_internal_r+0x85c>
 800bd48:	d9400417 	ldw	r5,16(sp)
 800bd4c:	68c0040c 	andi	r3,r13,16
 800bd50:	29000104 	addi	r4,r5,4
 800bd54:	18018b1e 	bne	r3,zero,800c384 <___vfiprintf_internal_r+0x109c>
 800bd58:	68c0100c 	andi	r3,r13,64
 800bd5c:	1801da26 	beq	r3,zero,800c4c8 <___vfiprintf_internal_r+0x11e0>
 800bd60:	d8c00417 	ldw	r3,16(sp)
 800bd64:	0039883a 	mov	fp,zero
 800bd68:	d9000415 	stw	r4,16(sp)
 800bd6c:	1dc0000b 	ldhu	r23,0(r3)
 800bd70:	003f7906 	br	800bb58 <___vfiprintf_internal_r+0x870>
 800bd74:	d8800417 	ldw	r2,16(sp)
 800bd78:	d8000945 	stb	zero,37(sp)
 800bd7c:	14c00017 	ldw	r19,0(r2)
 800bd80:	10c00104 	addi	r3,r2,4
 800bd84:	9801bb26 	beq	r19,zero,800c474 <___vfiprintf_internal_r+0x118c>
 800bd88:	40bfffe0 	cmpeqi	r2,r8,-1
 800bd8c:	1001901e 	bne	r2,zero,800c3d0 <___vfiprintf_internal_r+0x10e8>
 800bd90:	400d883a 	mov	r6,r8
 800bd94:	000b883a 	mov	r5,zero
 800bd98:	9809883a 	mov	r4,r19
 800bd9c:	d8c00315 	stw	r3,12(sp)
 800bda0:	db400215 	stw	r13,8(sp)
 800bda4:	da000015 	stw	r8,0(sp)
 800bda8:	80096140 	call	8009614 <memchr>
 800bdac:	da000017 	ldw	r8,0(sp)
 800bdb0:	db400217 	ldw	r13,8(sp)
 800bdb4:	d8c00317 	ldw	r3,12(sp)
 800bdb8:	1001e426 	beq	r2,zero,800c54c <___vfiprintf_internal_r+0x1264>
 800bdbc:	14f9c83a 	sub	fp,r2,r19
 800bdc0:	e02f883a 	mov	r23,fp
 800bdc4:	d8c00415 	stw	r3,16(sp)
 800bdc8:	003dfe06 	br	800b5c4 <___vfiprintf_internal_r+0x2dc>
 800bdcc:	a0800007 	ldb	r2,0(r20)
 800bdd0:	6b400814 	ori	r13,r13,32
 800bdd4:	003d8506 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800bdd8:	d8c00417 	ldw	r3,16(sp)
 800bddc:	00800c04 	movi	r2,48
 800bde0:	d8800985 	stb	r2,38(sp)
 800bde4:	00801e04 	movi	r2,120
 800bde8:	01020174 	movhi	r4,2053
 800bdec:	d88009c5 	stb	r2,39(sp)
 800bdf0:	18800104 	addi	r2,r3,4
 800bdf4:	d8800415 	stw	r2,16(sp)
 800bdf8:	20be6604 	addi	r2,r4,-1640
 800bdfc:	d8800515 	stw	r2,20(sp)
 800be00:	1dc00017 	ldw	r23,0(r3)
 800be04:	0039883a 	mov	fp,zero
 800be08:	6b400094 	ori	r13,r13,2
 800be0c:	00800084 	movi	r2,2
 800be10:	003e7c06 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800be14:	9027883a 	mov	r19,r18
 800be18:	b809883a 	mov	r4,r23
 800be1c:	e00b883a 	mov	r5,fp
 800be20:	01800284 	movi	r6,10
 800be24:	000f883a 	mov	r7,zero
 800be28:	db800315 	stw	r14,12(sp)
 800be2c:	da000215 	stw	r8,8(sp)
 800be30:	db400015 	stw	r13,0(sp)
 800be34:	800dc080 	call	800dc08 <__umoddi3>
 800be38:	10800c04 	addi	r2,r2,48
 800be3c:	b809883a 	mov	r4,r23
 800be40:	e00b883a 	mov	r5,fp
 800be44:	98bfffc5 	stb	r2,-1(r19)
 800be48:	01800284 	movi	r6,10
 800be4c:	000f883a 	mov	r7,zero
 800be50:	800d6780 	call	800d678 <__udivdi3>
 800be54:	e009883a 	mov	r4,fp
 800be58:	b80b883a 	mov	r5,r23
 800be5c:	db400017 	ldw	r13,0(sp)
 800be60:	da000217 	ldw	r8,8(sp)
 800be64:	db800317 	ldw	r14,12(sp)
 800be68:	9cffffc4 	addi	r19,r19,-1
 800be6c:	102f883a 	mov	r23,r2
 800be70:	1839883a 	mov	fp,r3
 800be74:	203fe81e 	bne	r4,zero,800be18 <___vfiprintf_internal_r+0xb30>
 800be78:	294002a8 	cmpgeui	r5,r5,10
 800be7c:	283fe61e 	bne	r5,zero,800be18 <___vfiprintf_internal_r+0xb30>
 800be80:	94f9c83a 	sub	fp,r18,r19
 800be84:	003efe06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800be88:	d9000517 	ldw	r4,20(sp)
 800be8c:	b88003cc 	andi	r2,r23,15
 800be90:	e006973a 	slli	r3,fp,28
 800be94:	b82ed13a 	srli	r23,r23,4
 800be98:	2085883a 	add	r2,r4,r2
 800be9c:	10800003 	ldbu	r2,0(r2)
 800bea0:	e038d13a 	srli	fp,fp,4
 800bea4:	1deeb03a 	or	r23,r3,r23
 800bea8:	98bfffc5 	stb	r2,-1(r19)
 800beac:	bf04b03a 	or	r2,r23,fp
 800beb0:	9cffffc4 	addi	r19,r19,-1
 800beb4:	103ff41e 	bne	r2,zero,800be88 <___vfiprintf_internal_r+0xba0>
 800beb8:	94f9c83a 	sub	fp,r18,r19
 800bebc:	db400015 	stw	r13,0(sp)
 800bec0:	003eef06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800bec4:	01400044 	movi	r5,1
 800bec8:	0009883a 	mov	r4,zero
 800becc:	900d883a 	mov	r6,r18
 800bed0:	003ea006 	br	800b954 <___vfiprintf_internal_r+0x66c>
 800bed4:	8dc7c83a 	sub	r3,r17,r23
 800bed8:	00fdf40e 	bge	zero,r3,800b6ac <___vfiprintf_internal_r+0x3c4>
 800bedc:	19c00450 	cmplti	r7,r3,17
 800bee0:	3801ae1e 	bne	r7,zero,800c59c <___vfiprintf_internal_r+0x12b4>
 800bee4:	01c20174 	movhi	r7,2053
 800bee8:	39fee604 	addi	r7,r7,-1128
 800beec:	03400404 	movi	r13,16
 800bef0:	00000606 	br	800bf0c <___vfiprintf_internal_r+0xc24>
 800bef4:	23800084 	addi	r14,r4,2
 800bef8:	84000204 	addi	r16,r16,8
 800befc:	2809883a 	mov	r4,r5
 800bf00:	18fffc04 	addi	r3,r3,-16
 800bf04:	19400448 	cmpgei	r5,r3,17
 800bf08:	28001c26 	beq	r5,zero,800bf7c <___vfiprintf_internal_r+0xc94>
 800bf0c:	21400044 	addi	r5,r4,1
 800bf10:	10800404 	addi	r2,r2,16
 800bf14:	81c00015 	stw	r7,0(r16)
 800bf18:	83400115 	stw	r13,4(r16)
 800bf1c:	d8800c15 	stw	r2,48(sp)
 800bf20:	d9400b15 	stw	r5,44(sp)
 800bf24:	29800208 	cmpgei	r6,r5,8
 800bf28:	303ff226 	beq	r6,zero,800bef4 <___vfiprintf_internal_r+0xc0c>
 800bf2c:	d9800a04 	addi	r6,sp,40
 800bf30:	a80b883a 	mov	r5,r21
 800bf34:	b009883a 	mov	r4,r22
 800bf38:	10006326 	beq	r2,zero,800c0c8 <___vfiprintf_internal_r+0xde0>
 800bf3c:	d9c00615 	stw	r7,24(sp)
 800bf40:	d8c00315 	stw	r3,12(sp)
 800bf44:	da000215 	stw	r8,8(sp)
 800bf48:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800bf4c:	103df91e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800bf50:	d8c00317 	ldw	r3,12(sp)
 800bf54:	d9000b17 	ldw	r4,44(sp)
 800bf58:	d8800c17 	ldw	r2,48(sp)
 800bf5c:	18fffc04 	addi	r3,r3,-16
 800bf60:	19400448 	cmpgei	r5,r3,17
 800bf64:	d9c00617 	ldw	r7,24(sp)
 800bf68:	da000217 	ldw	r8,8(sp)
 800bf6c:	9021883a 	mov	r16,r18
 800bf70:	23800044 	addi	r14,r4,1
 800bf74:	03400404 	movi	r13,16
 800bf78:	283fe41e 	bne	r5,zero,800bf0c <___vfiprintf_internal_r+0xc24>
 800bf7c:	83400204 	addi	r13,r16,8
 800bf80:	10c5883a 	add	r2,r2,r3
 800bf84:	80c00115 	stw	r3,4(r16)
 800bf88:	81c00015 	stw	r7,0(r16)
 800bf8c:	d8800c15 	stw	r2,48(sp)
 800bf90:	db800b15 	stw	r14,44(sp)
 800bf94:	70c00208 	cmpgei	r3,r14,8
 800bf98:	1800df26 	beq	r3,zero,800c318 <___vfiprintf_internal_r+0x1030>
 800bf9c:	10015826 	beq	r2,zero,800c500 <___vfiprintf_internal_r+0x1218>
 800bfa0:	d9800a04 	addi	r6,sp,40
 800bfa4:	a80b883a 	mov	r5,r21
 800bfa8:	b009883a 	mov	r4,r22
 800bfac:	da000215 	stw	r8,8(sp)
 800bfb0:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800bfb4:	103ddf1e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800bfb8:	da000217 	ldw	r8,8(sp)
 800bfbc:	d9000b17 	ldw	r4,44(sp)
 800bfc0:	d8800c17 	ldw	r2,48(sp)
 800bfc4:	4711c83a 	sub	r8,r8,fp
 800bfc8:	d9801904 	addi	r6,sp,100
 800bfcc:	21400044 	addi	r5,r4,1
 800bfd0:	9021883a 	mov	r16,r18
 800bfd4:	023db70e 	bge	zero,r8,800b6b4 <___vfiprintf_internal_r+0x3cc>
 800bfd8:	40c00450 	cmplti	r3,r8,17
 800bfdc:	01c20174 	movhi	r7,2053
 800bfe0:	1801441e 	bne	r3,zero,800c4f4 <___vfiprintf_internal_r+0x120c>
 800bfe4:	39fee604 	addi	r7,r7,-1128
 800bfe8:	03400404 	movi	r13,16
 800bfec:	00000606 	br	800c008 <___vfiprintf_internal_r+0xd20>
 800bff0:	21400084 	addi	r5,r4,2
 800bff4:	84000204 	addi	r16,r16,8
 800bff8:	1809883a 	mov	r4,r3
 800bffc:	423ffc04 	addi	r8,r8,-16
 800c000:	40c00448 	cmpgei	r3,r8,17
 800c004:	18001a26 	beq	r3,zero,800c070 <___vfiprintf_internal_r+0xd88>
 800c008:	20c00044 	addi	r3,r4,1
 800c00c:	10800404 	addi	r2,r2,16
 800c010:	81c00015 	stw	r7,0(r16)
 800c014:	83400115 	stw	r13,4(r16)
 800c018:	d8800c15 	stw	r2,48(sp)
 800c01c:	d8c00b15 	stw	r3,44(sp)
 800c020:	19400208 	cmpgei	r5,r3,8
 800c024:	283ff226 	beq	r5,zero,800bff0 <___vfiprintf_internal_r+0xd08>
 800c028:	d9800a04 	addi	r6,sp,40
 800c02c:	a80b883a 	mov	r5,r21
 800c030:	b009883a 	mov	r4,r22
 800c034:	10001a26 	beq	r2,zero,800c0a0 <___vfiprintf_internal_r+0xdb8>
 800c038:	d9c00315 	stw	r7,12(sp)
 800c03c:	da000215 	stw	r8,8(sp)
 800c040:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c044:	103dbb1e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800c048:	da000217 	ldw	r8,8(sp)
 800c04c:	d9000b17 	ldw	r4,44(sp)
 800c050:	d8800c17 	ldw	r2,48(sp)
 800c054:	423ffc04 	addi	r8,r8,-16
 800c058:	40c00448 	cmpgei	r3,r8,17
 800c05c:	d9c00317 	ldw	r7,12(sp)
 800c060:	9021883a 	mov	r16,r18
 800c064:	21400044 	addi	r5,r4,1
 800c068:	03400404 	movi	r13,16
 800c06c:	183fe61e 	bne	r3,zero,800c008 <___vfiprintf_internal_r+0xd20>
 800c070:	81000204 	addi	r4,r16,8
 800c074:	1205883a 	add	r2,r2,r8
 800c078:	81c00015 	stw	r7,0(r16)
 800c07c:	82000115 	stw	r8,4(r16)
 800c080:	d8800c15 	stw	r2,48(sp)
 800c084:	d9400b15 	stw	r5,44(sp)
 800c088:	28c00208 	cmpgei	r3,r5,8
 800c08c:	1800721e 	bne	r3,zero,800c258 <___vfiprintf_internal_r+0xf70>
 800c090:	29400044 	addi	r5,r5,1
 800c094:	21800204 	addi	r6,r4,8
 800c098:	2021883a 	mov	r16,r4
 800c09c:	003d8506 	br	800b6b4 <___vfiprintf_internal_r+0x3cc>
 800c0a0:	01400044 	movi	r5,1
 800c0a4:	0009883a 	mov	r4,zero
 800c0a8:	9021883a 	mov	r16,r18
 800c0ac:	003fd306 	br	800bffc <___vfiprintf_internal_r+0xd14>
 800c0b0:	d9800a04 	addi	r6,sp,40
 800c0b4:	a80b883a 	mov	r5,r21
 800c0b8:	b009883a 	mov	r4,r22
 800c0bc:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c0c0:	103d9626 	beq	r2,zero,800b71c <___vfiprintf_internal_r+0x434>
 800c0c4:	003d9b06 	br	800b734 <___vfiprintf_internal_r+0x44c>
 800c0c8:	03800044 	movi	r14,1
 800c0cc:	0009883a 	mov	r4,zero
 800c0d0:	9021883a 	mov	r16,r18
 800c0d4:	003f8a06 	br	800bf00 <___vfiprintf_internal_r+0xc18>
 800c0d8:	10006e26 	beq	r2,zero,800c294 <___vfiprintf_internal_r+0xfac>
 800c0dc:	d9800a04 	addi	r6,sp,40
 800c0e0:	a80b883a 	mov	r5,r21
 800c0e4:	b009883a 	mov	r4,r22
 800c0e8:	da000615 	stw	r8,24(sp)
 800c0ec:	db400315 	stw	r13,12(sp)
 800c0f0:	db800215 	stw	r14,8(sp)
 800c0f4:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c0f8:	103d8e1e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800c0fc:	d9000b17 	ldw	r4,44(sp)
 800c100:	d8800c17 	ldw	r2,48(sp)
 800c104:	da000617 	ldw	r8,24(sp)
 800c108:	db400317 	ldw	r13,12(sp)
 800c10c:	db800217 	ldw	r14,8(sp)
 800c110:	d9801904 	addi	r6,sp,100
 800c114:	21400044 	addi	r5,r4,1
 800c118:	9021883a 	mov	r16,r18
 800c11c:	003d4806 	br	800b640 <___vfiprintf_internal_r+0x358>
 800c120:	d8800984 	addi	r2,sp,38
 800c124:	d8801715 	stw	r2,92(sp)
 800c128:	00800084 	movi	r2,2
 800c12c:	d8801815 	stw	r2,96(sp)
 800c130:	d9801904 	addi	r6,sp,100
 800c134:	01400044 	movi	r5,1
 800c138:	3021883a 	mov	r16,r6
 800c13c:	2809883a 	mov	r4,r5
 800c140:	21400044 	addi	r5,r4,1
 800c144:	81800204 	addi	r6,r16,8
 800c148:	003d5606 	br	800b6a4 <___vfiprintf_internal_r+0x3bc>
 800c14c:	db400017 	ldw	r13,0(sp)
 800c150:	003ea206 	br	800bbdc <___vfiprintf_internal_r+0x8f4>
 800c154:	19400450 	cmplti	r5,r3,17
 800c158:	01c20174 	movhi	r7,2053
 800c15c:	2801011e 	bne	r5,zero,800c564 <___vfiprintf_internal_r+0x127c>
 800c160:	39feea04 	addi	r7,r7,-1112
 800c164:	03c00404 	movi	r15,16
 800c168:	00000706 	br	800c188 <___vfiprintf_internal_r+0xea0>
 800c16c:	27c00084 	addi	ra,r4,2
 800c170:	84000204 	addi	r16,r16,8
 800c174:	3009883a 	mov	r4,r6
 800c178:	18fffc04 	addi	r3,r3,-16
 800c17c:	19400448 	cmpgei	r5,r3,17
 800c180:	28002026 	beq	r5,zero,800c204 <___vfiprintf_internal_r+0xf1c>
 800c184:	21800044 	addi	r6,r4,1
 800c188:	10800404 	addi	r2,r2,16
 800c18c:	81c00015 	stw	r7,0(r16)
 800c190:	83c00115 	stw	r15,4(r16)
 800c194:	d8800c15 	stw	r2,48(sp)
 800c198:	d9800b15 	stw	r6,44(sp)
 800c19c:	31400208 	cmpgei	r5,r6,8
 800c1a0:	283ff226 	beq	r5,zero,800c16c <___vfiprintf_internal_r+0xe84>
 800c1a4:	d9800a04 	addi	r6,sp,40
 800c1a8:	a80b883a 	mov	r5,r21
 800c1ac:	b009883a 	mov	r4,r22
 800c1b0:	10001f26 	beq	r2,zero,800c230 <___vfiprintf_internal_r+0xf48>
 800c1b4:	d9c00815 	stw	r7,32(sp)
 800c1b8:	d8c00715 	stw	r3,28(sp)
 800c1bc:	da000615 	stw	r8,24(sp)
 800c1c0:	db400315 	stw	r13,12(sp)
 800c1c4:	db800215 	stw	r14,8(sp)
 800c1c8:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c1cc:	103d591e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800c1d0:	d8c00717 	ldw	r3,28(sp)
 800c1d4:	d9000b17 	ldw	r4,44(sp)
 800c1d8:	d8800c17 	ldw	r2,48(sp)
 800c1dc:	18fffc04 	addi	r3,r3,-16
 800c1e0:	19400448 	cmpgei	r5,r3,17
 800c1e4:	d9c00817 	ldw	r7,32(sp)
 800c1e8:	da000617 	ldw	r8,24(sp)
 800c1ec:	db400317 	ldw	r13,12(sp)
 800c1f0:	db800217 	ldw	r14,8(sp)
 800c1f4:	9021883a 	mov	r16,r18
 800c1f8:	27c00044 	addi	ra,r4,1
 800c1fc:	03c00404 	movi	r15,16
 800c200:	283fe01e 	bne	r5,zero,800c184 <___vfiprintf_internal_r+0xe9c>
 800c204:	10c5883a 	add	r2,r2,r3
 800c208:	80c00115 	stw	r3,4(r16)
 800c20c:	81c00015 	stw	r7,0(r16)
 800c210:	d8800c15 	stw	r2,48(sp)
 800c214:	dfc00b15 	stw	ra,44(sp)
 800c218:	f8c00208 	cmpgei	r3,ra,8
 800c21c:	18002b1e 	bne	r3,zero,800c2cc <___vfiprintf_internal_r+0xfe4>
 800c220:	84000204 	addi	r16,r16,8
 800c224:	f9400044 	addi	r5,ra,1
 800c228:	f809883a 	mov	r4,ra
 800c22c:	003cf406 	br	800b600 <___vfiprintf_internal_r+0x318>
 800c230:	0009883a 	mov	r4,zero
 800c234:	07c00044 	movi	ra,1
 800c238:	9021883a 	mov	r16,r18
 800c23c:	003fce06 	br	800c178 <___vfiprintf_internal_r+0xe90>
 800c240:	8dc0010e 	bge	r17,r23,800c248 <___vfiprintf_internal_r+0xf60>
 800c244:	b823883a 	mov	r17,r23
 800c248:	d8800117 	ldw	r2,4(sp)
 800c24c:	1445883a 	add	r2,r2,r17
 800c250:	d8800115 	stw	r2,4(sp)
 800c254:	003d3106 	br	800b71c <___vfiprintf_internal_r+0x434>
 800c258:	10007326 	beq	r2,zero,800c428 <___vfiprintf_internal_r+0x1140>
 800c25c:	d9800a04 	addi	r6,sp,40
 800c260:	a80b883a 	mov	r5,r21
 800c264:	b009883a 	mov	r4,r22
 800c268:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c26c:	103d311e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800c270:	d9400b17 	ldw	r5,44(sp)
 800c274:	d8800c17 	ldw	r2,48(sp)
 800c278:	d9801904 	addi	r6,sp,100
 800c27c:	29400044 	addi	r5,r5,1
 800c280:	9021883a 	mov	r16,r18
 800c284:	003d0b06 	br	800b6b4 <___vfiprintf_internal_r+0x3cc>
 800c288:	d8000b15 	stw	zero,44(sp)
 800c28c:	9021883a 	mov	r16,r18
 800c290:	003d7a06 	br	800b87c <___vfiprintf_internal_r+0x594>
 800c294:	7000441e 	bne	r14,zero,800c3a8 <___vfiprintf_internal_r+0x10c0>
 800c298:	0009883a 	mov	r4,zero
 800c29c:	d9801904 	addi	r6,sp,100
 800c2a0:	01400044 	movi	r5,1
 800c2a4:	9021883a 	mov	r16,r18
 800c2a8:	003cfe06 	br	800b6a4 <___vfiprintf_internal_r+0x3bc>
 800c2ac:	d9801904 	addi	r6,sp,100
 800c2b0:	01400044 	movi	r5,1
 800c2b4:	0009883a 	mov	r4,zero
 800c2b8:	9021883a 	mov	r16,r18
 800c2bc:	003cf906 	br	800b6a4 <___vfiprintf_internal_r+0x3bc>
 800c2c0:	0039883a 	mov	fp,zero
 800c2c4:	9027883a 	mov	r19,r18
 800c2c8:	003ded06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800c2cc:	10004a26 	beq	r2,zero,800c3f8 <___vfiprintf_internal_r+0x1110>
 800c2d0:	d9800a04 	addi	r6,sp,40
 800c2d4:	a80b883a 	mov	r5,r21
 800c2d8:	b009883a 	mov	r4,r22
 800c2dc:	da000615 	stw	r8,24(sp)
 800c2e0:	db400315 	stw	r13,12(sp)
 800c2e4:	db800215 	stw	r14,8(sp)
 800c2e8:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c2ec:	103d111e 	bne	r2,zero,800b734 <___vfiprintf_internal_r+0x44c>
 800c2f0:	d9000b17 	ldw	r4,44(sp)
 800c2f4:	d8800c17 	ldw	r2,48(sp)
 800c2f8:	da000617 	ldw	r8,24(sp)
 800c2fc:	db400317 	ldw	r13,12(sp)
 800c300:	db800217 	ldw	r14,8(sp)
 800c304:	9021883a 	mov	r16,r18
 800c308:	21400044 	addi	r5,r4,1
 800c30c:	003cbc06 	br	800b600 <___vfiprintf_internal_r+0x318>
 800c310:	9027883a 	mov	r19,r18
 800c314:	003dda06 	br	800ba80 <___vfiprintf_internal_r+0x798>
 800c318:	71400044 	addi	r5,r14,1
 800c31c:	69800204 	addi	r6,r13,8
 800c320:	7009883a 	mov	r4,r14
 800c324:	6821883a 	mov	r16,r13
 800c328:	003ce006 	br	800b6ac <___vfiprintf_internal_r+0x3c4>
 800c32c:	00c00c04 	movi	r3,48
 800c330:	d88009c5 	stb	r2,39(sp)
 800c334:	d8c00985 	stb	r3,38(sp)
 800c338:	6b400094 	ori	r13,r13,2
 800c33c:	00800084 	movi	r2,2
 800c340:	003d3006 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800c344:	25c00017 	ldw	r23,0(r4)
 800c348:	0039883a 	mov	fp,zero
 800c34c:	d8c00415 	stw	r3,16(sp)
 800c350:	0005883a 	mov	r2,zero
 800c354:	003d2b06 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800c358:	d9400117 	ldw	r5,4(sp)
 800c35c:	d9000415 	stw	r4,16(sp)
 800c360:	2805d7fa 	srai	r2,r5,31
 800c364:	19400015 	stw	r5,0(r3)
 800c368:	18800115 	stw	r2,4(r3)
 800c36c:	003c0706 	br	800b38c <___vfiprintf_internal_r+0xa4>
 800c370:	25c00017 	ldw	r23,0(r4)
 800c374:	d8c00415 	stw	r3,16(sp)
 800c378:	b839d7fa 	srai	fp,r23,31
 800c37c:	e005883a 	mov	r2,fp
 800c380:	003da906 	br	800ba28 <___vfiprintf_internal_r+0x740>
 800c384:	2dc00017 	ldw	r23,0(r5)
 800c388:	0039883a 	mov	fp,zero
 800c38c:	d9000415 	stw	r4,16(sp)
 800c390:	003df106 	br	800bb58 <___vfiprintf_internal_r+0x870>
 800c394:	25c00017 	ldw	r23,0(r4)
 800c398:	0039883a 	mov	fp,zero
 800c39c:	d8c00415 	stw	r3,16(sp)
 800c3a0:	00800044 	movi	r2,1
 800c3a4:	003d1706 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800c3a8:	d8800984 	addi	r2,sp,38
 800c3ac:	d8801715 	stw	r2,92(sp)
 800c3b0:	00800084 	movi	r2,2
 800c3b4:	d8801815 	stw	r2,96(sp)
 800c3b8:	dc001904 	addi	r16,sp,100
 800c3bc:	01000044 	movi	r4,1
 800c3c0:	003f5f06 	br	800c140 <___vfiprintf_internal_r+0xe58>
 800c3c4:	0463c83a 	sub	r17,zero,r17
 800c3c8:	d8c00415 	stw	r3,16(sp)
 800c3cc:	003e3606 	br	800bca8 <___vfiprintf_internal_r+0x9c0>
 800c3d0:	9809883a 	mov	r4,r19
 800c3d4:	d8c00215 	stw	r3,8(sp)
 800c3d8:	db400015 	stw	r13,0(sp)
 800c3dc:	8003a1c0 	call	8003a1c <strlen>
 800c3e0:	d8c00217 	ldw	r3,8(sp)
 800c3e4:	db400017 	ldw	r13,0(sp)
 800c3e8:	1039883a 	mov	fp,r2
 800c3ec:	102f883a 	mov	r23,r2
 800c3f0:	d8c00415 	stw	r3,16(sp)
 800c3f4:	003c7306 	br	800b5c4 <___vfiprintf_internal_r+0x2dc>
 800c3f8:	d8c00947 	ldb	r3,37(sp)
 800c3fc:	1800451e 	bne	r3,zero,800c514 <___vfiprintf_internal_r+0x122c>
 800c400:	703f471e 	bne	r14,zero,800c120 <___vfiprintf_internal_r+0xe38>
 800c404:	0009883a 	mov	r4,zero
 800c408:	d9801904 	addi	r6,sp,100
 800c40c:	01400044 	movi	r5,1
 800c410:	9021883a 	mov	r16,r18
 800c414:	003ca506 	br	800b6ac <___vfiprintf_internal_r+0x3c4>
 800c418:	d8800117 	ldw	r2,4(sp)
 800c41c:	18800015 	stw	r2,0(r3)
 800c420:	d9000415 	stw	r4,16(sp)
 800c424:	003bd906 	br	800b38c <___vfiprintf_internal_r+0xa4>
 800c428:	00c00044 	movi	r3,1
 800c42c:	e005883a 	mov	r2,fp
 800c430:	dcc01715 	stw	r19,92(sp)
 800c434:	df001815 	stw	fp,96(sp)
 800c438:	df000c15 	stw	fp,48(sp)
 800c43c:	d8c00b15 	stw	r3,44(sp)
 800c440:	d9801904 	addi	r6,sp,100
 800c444:	003caa06 	br	800b6f0 <___vfiprintf_internal_r+0x408>
 800c448:	10c00060 	cmpeqi	r3,r2,1
 800c44c:	db400017 	ldw	r13,0(sp)
 800c450:	183de426 	beq	r3,zero,800bbe4 <___vfiprintf_internal_r+0x8fc>
 800c454:	003d8506 	br	800ba6c <___vfiprintf_internal_r+0x784>
 800c458:	a0800043 	ldbu	r2,1(r20)
 800c45c:	6b400814 	ori	r13,r13,32
 800c460:	a5000044 	addi	r20,r20,1
 800c464:	10803fcc 	andi	r2,r2,255
 800c468:	1080201c 	xori	r2,r2,128
 800c46c:	10bfe004 	addi	r2,r2,-128
 800c470:	003bde06 	br	800b3ec <___vfiprintf_internal_r+0x104>
 800c474:	408001f0 	cmpltui	r2,r8,7
 800c478:	4039883a 	mov	fp,r8
 800c47c:	1000011e 	bne	r2,zero,800c484 <___vfiprintf_internal_r+0x119c>
 800c480:	07000184 	movi	fp,6
 800c484:	04c20174 	movhi	r19,2053
 800c488:	e02f883a 	mov	r23,fp
 800c48c:	d8c00415 	stw	r3,16(sp)
 800c490:	9cfe6b04 	addi	r19,r19,-1620
 800c494:	003c4b06 	br	800b5c4 <___vfiprintf_internal_r+0x2dc>
 800c498:	d8800417 	ldw	r2,16(sp)
 800c49c:	0039883a 	mov	fp,zero
 800c4a0:	d8c00415 	stw	r3,16(sp)
 800c4a4:	15c00017 	ldw	r23,0(r2)
 800c4a8:	0005883a 	mov	r2,zero
 800c4ac:	003cd506 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800c4b0:	d8800417 	ldw	r2,16(sp)
 800c4b4:	0039883a 	mov	fp,zero
 800c4b8:	d8c00415 	stw	r3,16(sp)
 800c4bc:	15c00017 	ldw	r23,0(r2)
 800c4c0:	00800044 	movi	r2,1
 800c4c4:	003ccf06 	br	800b804 <___vfiprintf_internal_r+0x51c>
 800c4c8:	d8c00417 	ldw	r3,16(sp)
 800c4cc:	0039883a 	mov	fp,zero
 800c4d0:	d9000415 	stw	r4,16(sp)
 800c4d4:	1dc00017 	ldw	r23,0(r3)
 800c4d8:	003d9f06 	br	800bb58 <___vfiprintf_internal_r+0x870>
 800c4dc:	d8800417 	ldw	r2,16(sp)
 800c4e0:	d8c00415 	stw	r3,16(sp)
 800c4e4:	15c00017 	ldw	r23,0(r2)
 800c4e8:	b839d7fa 	srai	fp,r23,31
 800c4ec:	e005883a 	mov	r2,fp
 800c4f0:	003d4d06 	br	800ba28 <___vfiprintf_internal_r+0x740>
 800c4f4:	3009883a 	mov	r4,r6
 800c4f8:	39fee604 	addi	r7,r7,-1128
 800c4fc:	003edd06 	br	800c074 <___vfiprintf_internal_r+0xd8c>
 800c500:	d9801904 	addi	r6,sp,100
 800c504:	01400044 	movi	r5,1
 800c508:	0009883a 	mov	r4,zero
 800c50c:	9021883a 	mov	r16,r18
 800c510:	003c6606 	br	800b6ac <___vfiprintf_internal_r+0x3c4>
 800c514:	d8800944 	addi	r2,sp,37
 800c518:	d8801715 	stw	r2,92(sp)
 800c51c:	00800044 	movi	r2,1
 800c520:	d8801815 	stw	r2,96(sp)
 800c524:	d9801904 	addi	r6,sp,100
 800c528:	01400044 	movi	r5,1
 800c52c:	003c4006 	br	800b630 <___vfiprintf_internal_r+0x348>
 800c530:	d9800945 	stb	r6,37(sp)
 800c534:	003c1d06 	br	800b5ac <___vfiprintf_internal_r+0x2c4>
 800c538:	d9800a04 	addi	r6,sp,40
 800c53c:	a80b883a 	mov	r5,r21
 800c540:	b009883a 	mov	r4,r22
 800c544:	800b1dc0 	call	800b1dc <__sprint_r.part.0>
 800c548:	003c7a06 	br	800b734 <___vfiprintf_internal_r+0x44c>
 800c54c:	402f883a 	mov	r23,r8
 800c550:	d8c00415 	stw	r3,16(sp)
 800c554:	4039883a 	mov	fp,r8
 800c558:	003c1a06 	br	800b5c4 <___vfiprintf_internal_r+0x2dc>
 800c55c:	d9800945 	stb	r6,37(sp)
 800c560:	003df406 	br	800bd34 <___vfiprintf_internal_r+0xa4c>
 800c564:	303f883a 	mov	ra,r6
 800c568:	39feea04 	addi	r7,r7,-1112
 800c56c:	003f2506 	br	800c204 <___vfiprintf_internal_r+0xf1c>
 800c570:	d9800945 	stb	r6,37(sp)
 800c574:	003d8006 	br	800bb78 <___vfiprintf_internal_r+0x890>
 800c578:	d9800945 	stb	r6,37(sp)
 800c57c:	003d4e06 	br	800bab8 <___vfiprintf_internal_r+0x7d0>
 800c580:	d9800945 	stb	r6,37(sp)
 800c584:	003d2006 	br	800ba08 <___vfiprintf_internal_r+0x720>
 800c588:	d9800945 	stb	r6,37(sp)
 800c58c:	003d6806 	br	800bb30 <___vfiprintf_internal_r+0x848>
 800c590:	21400044 	addi	r5,r4,1
 800c594:	39feea04 	addi	r7,r7,-1112
 800c598:	003d0806 	br	800b9bc <___vfiprintf_internal_r+0x6d4>
 800c59c:	01c20174 	movhi	r7,2053
 800c5a0:	301b883a 	mov	r13,r6
 800c5a4:	281d883a 	mov	r14,r5
 800c5a8:	39fee604 	addi	r7,r7,-1128
 800c5ac:	003e7406 	br	800bf80 <___vfiprintf_internal_r+0xc98>
 800c5b0:	00bfffc4 	movi	r2,-1
 800c5b4:	d8800115 	stw	r2,4(sp)
 800c5b8:	003c6106 	br	800b740 <___vfiprintf_internal_r+0x458>
 800c5bc:	d8800417 	ldw	r2,16(sp)
 800c5c0:	12000017 	ldw	r8,0(r2)
 800c5c4:	10c00104 	addi	r3,r2,4
 800c5c8:	4000010e 	bge	r8,zero,800c5d0 <___vfiprintf_internal_r+0x12e8>
 800c5cc:	023fffc4 	movi	r8,-1
 800c5d0:	a0800043 	ldbu	r2,1(r20)
 800c5d4:	d8c00415 	stw	r3,16(sp)
 800c5d8:	2029883a 	mov	r20,r4
 800c5dc:	10803fcc 	andi	r2,r2,255
 800c5e0:	1080201c 	xori	r2,r2,128
 800c5e4:	10bfe004 	addi	r2,r2,-128
 800c5e8:	003b8006 	br	800b3ec <___vfiprintf_internal_r+0x104>

0800c5ec <__vfiprintf_internal>:
 800c5ec:	00c20174 	movhi	r3,2053
 800c5f0:	2005883a 	mov	r2,r4
 800c5f4:	1918e017 	ldw	r4,25472(r3)
 800c5f8:	300f883a 	mov	r7,r6
 800c5fc:	280d883a 	mov	r6,r5
 800c600:	100b883a 	mov	r5,r2
 800c604:	800b2e81 	jmpi	800b2e8 <___vfiprintf_internal_r>

0800c608 <__sbprintf>:
 800c608:	2880030b 	ldhu	r2,12(r5)
 800c60c:	2b001917 	ldw	r12,100(r5)
 800c610:	2ac0038b 	ldhu	r11,14(r5)
 800c614:	2a800717 	ldw	r10,28(r5)
 800c618:	2a400917 	ldw	r9,36(r5)
 800c61c:	defee204 	addi	sp,sp,-1144
 800c620:	da001a04 	addi	r8,sp,104
 800c624:	00c10004 	movi	r3,1024
 800c628:	dc011a15 	stw	r16,1128(sp)
 800c62c:	10bfff4c 	andi	r2,r2,65533
 800c630:	2821883a 	mov	r16,r5
 800c634:	d80b883a 	mov	r5,sp
 800c638:	dc811c15 	stw	r18,1136(sp)
 800c63c:	dc411b15 	stw	r17,1132(sp)
 800c640:	dfc11d15 	stw	ra,1140(sp)
 800c644:	2025883a 	mov	r18,r4
 800c648:	d880030d 	sth	r2,12(sp)
 800c64c:	db001915 	stw	r12,100(sp)
 800c650:	dac0038d 	sth	r11,14(sp)
 800c654:	da800715 	stw	r10,28(sp)
 800c658:	da400915 	stw	r9,36(sp)
 800c65c:	da000015 	stw	r8,0(sp)
 800c660:	da000415 	stw	r8,16(sp)
 800c664:	d8c00215 	stw	r3,8(sp)
 800c668:	d8c00515 	stw	r3,20(sp)
 800c66c:	d8000615 	stw	zero,24(sp)
 800c670:	800b2e80 	call	800b2e8 <___vfiprintf_internal_r>
 800c674:	1023883a 	mov	r17,r2
 800c678:	10000d0e 	bge	r2,zero,800c6b0 <__sbprintf+0xa8>
 800c67c:	d880030b 	ldhu	r2,12(sp)
 800c680:	1080100c 	andi	r2,r2,64
 800c684:	10000326 	beq	r2,zero,800c694 <__sbprintf+0x8c>
 800c688:	8080030b 	ldhu	r2,12(r16)
 800c68c:	10801014 	ori	r2,r2,64
 800c690:	8080030d 	sth	r2,12(r16)
 800c694:	8805883a 	mov	r2,r17
 800c698:	dfc11d17 	ldw	ra,1140(sp)
 800c69c:	dc811c17 	ldw	r18,1136(sp)
 800c6a0:	dc411b17 	ldw	r17,1132(sp)
 800c6a4:	dc011a17 	ldw	r16,1128(sp)
 800c6a8:	dec11e04 	addi	sp,sp,1144
 800c6ac:	f800283a 	ret
 800c6b0:	d80b883a 	mov	r5,sp
 800c6b4:	9009883a 	mov	r4,r18
 800c6b8:	8007cec0 	call	8007cec <_fflush_r>
 800c6bc:	103fef26 	beq	r2,zero,800c67c <__sbprintf+0x74>
 800c6c0:	047fffc4 	movi	r17,-1
 800c6c4:	003fed06 	br	800c67c <__sbprintf+0x74>

0800c6c8 <__swbuf_r>:
 800c6c8:	defffb04 	addi	sp,sp,-20
 800c6cc:	dcc00315 	stw	r19,12(sp)
 800c6d0:	dc400115 	stw	r17,4(sp)
 800c6d4:	dc000015 	stw	r16,0(sp)
 800c6d8:	dfc00415 	stw	ra,16(sp)
 800c6dc:	dc800215 	stw	r18,8(sp)
 800c6e0:	2027883a 	mov	r19,r4
 800c6e4:	2823883a 	mov	r17,r5
 800c6e8:	3021883a 	mov	r16,r6
 800c6ec:	20000226 	beq	r4,zero,800c6f8 <__swbuf_r+0x30>
 800c6f0:	20800e17 	ldw	r2,56(r4)
 800c6f4:	10003e26 	beq	r2,zero,800c7f0 <__swbuf_r+0x128>
 800c6f8:	80800617 	ldw	r2,24(r16)
 800c6fc:	80c0030b 	ldhu	r3,12(r16)
 800c700:	80800215 	stw	r2,8(r16)
 800c704:	1880020c 	andi	r2,r3,8
 800c708:	10001f26 	beq	r2,zero,800c788 <__swbuf_r+0xc0>
 800c70c:	80800417 	ldw	r2,16(r16)
 800c710:	10001d26 	beq	r2,zero,800c788 <__swbuf_r+0xc0>
 800c714:	1948000c 	andi	r5,r3,8192
 800c718:	8c803fcc 	andi	r18,r17,255
 800c71c:	28002326 	beq	r5,zero,800c7ac <__swbuf_r+0xe4>
 800c720:	80c00017 	ldw	r3,0(r16)
 800c724:	81000517 	ldw	r4,20(r16)
 800c728:	1885c83a 	sub	r2,r3,r2
 800c72c:	1100290e 	bge	r2,r4,800c7d4 <__swbuf_r+0x10c>
 800c730:	10800044 	addi	r2,r2,1
 800c734:	81400217 	ldw	r5,8(r16)
 800c738:	19000044 	addi	r4,r3,1
 800c73c:	81000015 	stw	r4,0(r16)
 800c740:	297fffc4 	addi	r5,r5,-1
 800c744:	81400215 	stw	r5,8(r16)
 800c748:	1c400005 	stb	r17,0(r3)
 800c74c:	80c00517 	ldw	r3,20(r16)
 800c750:	18802926 	beq	r3,r2,800c7f8 <__swbuf_r+0x130>
 800c754:	8080030b 	ldhu	r2,12(r16)
 800c758:	1080004c 	andi	r2,r2,1
 800c75c:	10000226 	beq	r2,zero,800c768 <__swbuf_r+0xa0>
 800c760:	90800298 	cmpnei	r2,r18,10
 800c764:	10002426 	beq	r2,zero,800c7f8 <__swbuf_r+0x130>
 800c768:	9005883a 	mov	r2,r18
 800c76c:	dfc00417 	ldw	ra,16(sp)
 800c770:	dcc00317 	ldw	r19,12(sp)
 800c774:	dc800217 	ldw	r18,8(sp)
 800c778:	dc400117 	ldw	r17,4(sp)
 800c77c:	dc000017 	ldw	r16,0(sp)
 800c780:	dec00504 	addi	sp,sp,20
 800c784:	f800283a 	ret
 800c788:	800b883a 	mov	r5,r16
 800c78c:	9809883a 	mov	r4,r19
 800c790:	800601c0 	call	800601c <__swsetup_r>
 800c794:	10001c1e 	bne	r2,zero,800c808 <__swbuf_r+0x140>
 800c798:	80c0030b 	ldhu	r3,12(r16)
 800c79c:	80800417 	ldw	r2,16(r16)
 800c7a0:	8c803fcc 	andi	r18,r17,255
 800c7a4:	1948000c 	andi	r5,r3,8192
 800c7a8:	283fdd1e 	bne	r5,zero,800c720 <__swbuf_r+0x58>
 800c7ac:	81001917 	ldw	r4,100(r16)
 800c7b0:	18c80014 	ori	r3,r3,8192
 800c7b4:	0177ffc4 	movi	r5,-8193
 800c7b8:	2148703a 	and	r4,r4,r5
 800c7bc:	80c0030d 	sth	r3,12(r16)
 800c7c0:	80c00017 	ldw	r3,0(r16)
 800c7c4:	81001915 	stw	r4,100(r16)
 800c7c8:	81000517 	ldw	r4,20(r16)
 800c7cc:	1885c83a 	sub	r2,r3,r2
 800c7d0:	113fd716 	blt	r2,r4,800c730 <__swbuf_r+0x68>
 800c7d4:	800b883a 	mov	r5,r16
 800c7d8:	9809883a 	mov	r4,r19
 800c7dc:	8007cec0 	call	8007cec <_fflush_r>
 800c7e0:	1000091e 	bne	r2,zero,800c808 <__swbuf_r+0x140>
 800c7e4:	80c00017 	ldw	r3,0(r16)
 800c7e8:	00800044 	movi	r2,1
 800c7ec:	003fd106 	br	800c734 <__swbuf_r+0x6c>
 800c7f0:	80080d40 	call	80080d4 <__sinit>
 800c7f4:	003fc006 	br	800c6f8 <__swbuf_r+0x30>
 800c7f8:	800b883a 	mov	r5,r16
 800c7fc:	9809883a 	mov	r4,r19
 800c800:	8007cec0 	call	8007cec <_fflush_r>
 800c804:	103fd826 	beq	r2,zero,800c768 <__swbuf_r+0xa0>
 800c808:	04bfffc4 	movi	r18,-1
 800c80c:	003fd606 	br	800c768 <__swbuf_r+0xa0>

0800c810 <__swbuf>:
 800c810:	00c20174 	movhi	r3,2053
 800c814:	2005883a 	mov	r2,r4
 800c818:	1918e017 	ldw	r4,25472(r3)
 800c81c:	280d883a 	mov	r6,r5
 800c820:	100b883a 	mov	r5,r2
 800c824:	800c6c81 	jmpi	800c6c8 <__swbuf_r>

0800c828 <_close_r>:
 800c828:	defffe04 	addi	sp,sp,-8
 800c82c:	dc000015 	stw	r16,0(sp)
 800c830:	00820174 	movhi	r2,2053
 800c834:	2021883a 	mov	r16,r4
 800c838:	2809883a 	mov	r4,r5
 800c83c:	dfc00115 	stw	ra,4(sp)
 800c840:	10193915 	stw	zero,25828(r2)
 800c844:	8024e940 	call	8024e94 <close>
 800c848:	10ffffd8 	cmpnei	r3,r2,-1
 800c84c:	18000426 	beq	r3,zero,800c860 <_close_r+0x38>
 800c850:	dfc00117 	ldw	ra,4(sp)
 800c854:	dc000017 	ldw	r16,0(sp)
 800c858:	dec00204 	addi	sp,sp,8
 800c85c:	f800283a 	ret
 800c860:	00c20174 	movhi	r3,2053
 800c864:	18d93917 	ldw	r3,25828(r3)
 800c868:	183ff926 	beq	r3,zero,800c850 <_close_r+0x28>
 800c86c:	80c00015 	stw	r3,0(r16)
 800c870:	dfc00117 	ldw	ra,4(sp)
 800c874:	dc000017 	ldw	r16,0(sp)
 800c878:	dec00204 	addi	sp,sp,8
 800c87c:	f800283a 	ret

0800c880 <__assert_func>:
 800c880:	00820174 	movhi	r2,2053
 800c884:	1218e017 	ldw	r8,25472(r2)
 800c888:	defffc04 	addi	sp,sp,-16
 800c88c:	3807883a 	mov	r3,r7
 800c890:	3005883a 	mov	r2,r6
 800c894:	dfc00315 	stw	ra,12(sp)
 800c898:	42400317 	ldw	r9,12(r8)
 800c89c:	200f883a 	mov	r7,r4
 800c8a0:	2811883a 	mov	r8,r5
 800c8a4:	180d883a 	mov	r6,r3
 800c8a8:	10000a26 	beq	r2,zero,800c8d4 <__assert_func+0x54>
 800c8ac:	00c20174 	movhi	r3,2053
 800c8b0:	18feee04 	addi	r3,r3,-1096
 800c8b4:	01420174 	movhi	r5,2053
 800c8b8:	297ef204 	addi	r5,r5,-1080
 800c8bc:	4809883a 	mov	r4,r9
 800c8c0:	d8c00115 	stw	r3,4(sp)
 800c8c4:	da000015 	stw	r8,0(sp)
 800c8c8:	d8800215 	stw	r2,8(sp)
 800c8cc:	800cad40 	call	800cad4 <fiprintf>
 800c8d0:	800d3480 	call	800d348 <abort>
 800c8d4:	00c20174 	movhi	r3,2053
 800c8d8:	18fef104 	addi	r3,r3,-1084
 800c8dc:	1805883a 	mov	r2,r3
 800c8e0:	003ff406 	br	800c8b4 <__assert_func+0x34>

0800c8e4 <__assert>:
 800c8e4:	deffff04 	addi	sp,sp,-4
 800c8e8:	300f883a 	mov	r7,r6
 800c8ec:	000d883a 	mov	r6,zero
 800c8f0:	dfc00015 	stw	ra,0(sp)
 800c8f4:	800c8800 	call	800c880 <__assert_func>

0800c8f8 <_calloc_r>:
 800c8f8:	298b383a 	mul	r5,r5,r6
 800c8fc:	deffff04 	addi	sp,sp,-4
 800c900:	dfc00015 	stw	ra,0(sp)
 800c904:	8008e340 	call	8008e34 <_malloc_r>
 800c908:	1009883a 	mov	r4,r2
 800c90c:	10000c26 	beq	r2,zero,800c940 <_calloc_r+0x48>
 800c910:	11bfff17 	ldw	r6,-4(r2)
 800c914:	00bfff04 	movi	r2,-4
 800c918:	308c703a 	and	r6,r6,r2
 800c91c:	31bfff04 	addi	r6,r6,-4
 800c920:	30800968 	cmpgeui	r2,r6,37
 800c924:	1000141e 	bne	r2,zero,800c978 <_calloc_r+0x80>
 800c928:	30800530 	cmpltui	r2,r6,20
 800c92c:	10000826 	beq	r2,zero,800c950 <_calloc_r+0x58>
 800c930:	2005883a 	mov	r2,r4
 800c934:	10000015 	stw	zero,0(r2)
 800c938:	10000115 	stw	zero,4(r2)
 800c93c:	10000215 	stw	zero,8(r2)
 800c940:	2005883a 	mov	r2,r4
 800c944:	dfc00017 	ldw	ra,0(sp)
 800c948:	dec00104 	addi	sp,sp,4
 800c94c:	f800283a 	ret
 800c950:	20000015 	stw	zero,0(r4)
 800c954:	20000115 	stw	zero,4(r4)
 800c958:	30800728 	cmpgeui	r2,r6,28
 800c95c:	10000d26 	beq	r2,zero,800c994 <_calloc_r+0x9c>
 800c960:	20000215 	stw	zero,8(r4)
 800c964:	20000315 	stw	zero,12(r4)
 800c968:	31800920 	cmpeqi	r6,r6,36
 800c96c:	30000b1e 	bne	r6,zero,800c99c <_calloc_r+0xa4>
 800c970:	20800404 	addi	r2,r4,16
 800c974:	003fef06 	br	800c934 <_calloc_r+0x3c>
 800c978:	000b883a 	mov	r5,zero
 800c97c:	8002fa40 	call	8002fa4 <memset>
 800c980:	1009883a 	mov	r4,r2
 800c984:	2005883a 	mov	r2,r4
 800c988:	dfc00017 	ldw	ra,0(sp)
 800c98c:	dec00104 	addi	sp,sp,4
 800c990:	f800283a 	ret
 800c994:	20800204 	addi	r2,r4,8
 800c998:	003fe606 	br	800c934 <_calloc_r+0x3c>
 800c99c:	20000415 	stw	zero,16(r4)
 800c9a0:	20800604 	addi	r2,r4,24
 800c9a4:	20000515 	stw	zero,20(r4)
 800c9a8:	003fe206 	br	800c934 <_calloc_r+0x3c>

0800c9ac <_fclose_r>:
 800c9ac:	defffc04 	addi	sp,sp,-16
 800c9b0:	dfc00315 	stw	ra,12(sp)
 800c9b4:	dc800215 	stw	r18,8(sp)
 800c9b8:	dc400115 	stw	r17,4(sp)
 800c9bc:	dc000015 	stw	r16,0(sp)
 800c9c0:	28000726 	beq	r5,zero,800c9e0 <_fclose_r+0x34>
 800c9c4:	2821883a 	mov	r16,r5
 800c9c8:	2023883a 	mov	r17,r4
 800c9cc:	20000226 	beq	r4,zero,800c9d8 <_fclose_r+0x2c>
 800c9d0:	20800e17 	ldw	r2,56(r4)
 800c9d4:	10002726 	beq	r2,zero,800ca74 <_fclose_r+0xc8>
 800c9d8:	8080030f 	ldh	r2,12(r16)
 800c9dc:	1000081e 	bne	r2,zero,800ca00 <_fclose_r+0x54>
 800c9e0:	0025883a 	mov	r18,zero
 800c9e4:	9005883a 	mov	r2,r18
 800c9e8:	dfc00317 	ldw	ra,12(sp)
 800c9ec:	dc800217 	ldw	r18,8(sp)
 800c9f0:	dc400117 	ldw	r17,4(sp)
 800c9f4:	dc000017 	ldw	r16,0(sp)
 800c9f8:	dec00404 	addi	sp,sp,16
 800c9fc:	f800283a 	ret
 800ca00:	800b883a 	mov	r5,r16
 800ca04:	8809883a 	mov	r4,r17
 800ca08:	8007ac40 	call	8007ac4 <__sflush_r>
 800ca0c:	80c00b17 	ldw	r3,44(r16)
 800ca10:	1025883a 	mov	r18,r2
 800ca14:	18000426 	beq	r3,zero,800ca28 <_fclose_r+0x7c>
 800ca18:	81400717 	ldw	r5,28(r16)
 800ca1c:	8809883a 	mov	r4,r17
 800ca20:	183ee83a 	callr	r3
 800ca24:	10001716 	blt	r2,zero,800ca84 <_fclose_r+0xd8>
 800ca28:	8080030b 	ldhu	r2,12(r16)
 800ca2c:	1080200c 	andi	r2,r2,128
 800ca30:	1000181e 	bne	r2,zero,800ca94 <_fclose_r+0xe8>
 800ca34:	81400c17 	ldw	r5,48(r16)
 800ca38:	28000526 	beq	r5,zero,800ca50 <_fclose_r+0xa4>
 800ca3c:	80801004 	addi	r2,r16,64
 800ca40:	28800226 	beq	r5,r2,800ca4c <_fclose_r+0xa0>
 800ca44:	8809883a 	mov	r4,r17
 800ca48:	80082380 	call	8008238 <_free_r>
 800ca4c:	80000c15 	stw	zero,48(r16)
 800ca50:	81401117 	ldw	r5,68(r16)
 800ca54:	28000326 	beq	r5,zero,800ca64 <_fclose_r+0xb8>
 800ca58:	8809883a 	mov	r4,r17
 800ca5c:	80082380 	call	8008238 <_free_r>
 800ca60:	80001115 	stw	zero,68(r16)
 800ca64:	80080e40 	call	80080e4 <__sfp_lock_acquire>
 800ca68:	8000030d 	sth	zero,12(r16)
 800ca6c:	80080e80 	call	80080e8 <__sfp_lock_release>
 800ca70:	003fdc06 	br	800c9e4 <_fclose_r+0x38>
 800ca74:	80080d40 	call	80080d4 <__sinit>
 800ca78:	8080030f 	ldh	r2,12(r16)
 800ca7c:	103fd826 	beq	r2,zero,800c9e0 <_fclose_r+0x34>
 800ca80:	003fdf06 	br	800ca00 <_fclose_r+0x54>
 800ca84:	8080030b 	ldhu	r2,12(r16)
 800ca88:	04bfffc4 	movi	r18,-1
 800ca8c:	1080200c 	andi	r2,r2,128
 800ca90:	103fe826 	beq	r2,zero,800ca34 <_fclose_r+0x88>
 800ca94:	81400417 	ldw	r5,16(r16)
 800ca98:	8809883a 	mov	r4,r17
 800ca9c:	80082380 	call	8008238 <_free_r>
 800caa0:	003fe406 	br	800ca34 <_fclose_r+0x88>

0800caa4 <fclose>:
 800caa4:	00820174 	movhi	r2,2053
 800caa8:	200b883a 	mov	r5,r4
 800caac:	1118e017 	ldw	r4,25472(r2)
 800cab0:	800c9ac1 	jmpi	800c9ac <_fclose_r>

0800cab4 <_fiprintf_r>:
 800cab4:	defffe04 	addi	sp,sp,-8
 800cab8:	dfc00015 	stw	ra,0(sp)
 800cabc:	d9c00115 	stw	r7,4(sp)
 800cac0:	d9c00104 	addi	r7,sp,4
 800cac4:	800d2140 	call	800d214 <_vfiprintf_r>
 800cac8:	dfc00017 	ldw	ra,0(sp)
 800cacc:	dec00204 	addi	sp,sp,8
 800cad0:	f800283a 	ret

0800cad4 <fiprintf>:
 800cad4:	defffd04 	addi	sp,sp,-12
 800cad8:	2005883a 	mov	r2,r4
 800cadc:	dfc00015 	stw	ra,0(sp)
 800cae0:	d9800115 	stw	r6,4(sp)
 800cae4:	d9c00215 	stw	r7,8(sp)
 800cae8:	00c20174 	movhi	r3,2053
 800caec:	1918e017 	ldw	r4,25472(r3)
 800caf0:	280d883a 	mov	r6,r5
 800caf4:	d9c00104 	addi	r7,sp,4
 800caf8:	100b883a 	mov	r5,r2
 800cafc:	800d2140 	call	800d214 <_vfiprintf_r>
 800cb00:	dfc00017 	ldw	ra,0(sp)
 800cb04:	dec00304 	addi	sp,sp,12
 800cb08:	f800283a 	ret

0800cb0c <__fputwc>:
 800cb0c:	defff904 	addi	sp,sp,-28
 800cb10:	dcc00415 	stw	r19,16(sp)
 800cb14:	dc800315 	stw	r18,12(sp)
 800cb18:	dc000115 	stw	r16,4(sp)
 800cb1c:	dfc00615 	stw	ra,24(sp)
 800cb20:	dd000515 	stw	r20,20(sp)
 800cb24:	dc400215 	stw	r17,8(sp)
 800cb28:	2025883a 	mov	r18,r4
 800cb2c:	2827883a 	mov	r19,r5
 800cb30:	3021883a 	mov	r16,r6
 800cb34:	800ce380 	call	800ce38 <__locale_mb_cur_max>
 800cb38:	10800058 	cmpnei	r2,r2,1
 800cb3c:	1000071e 	bne	r2,zero,800cb5c <__fputwc+0x50>
 800cb40:	98bfffc4 	addi	r2,r19,-1
 800cb44:	10803fe8 	cmpgeui	r2,r2,255
 800cb48:	1000041e 	bne	r2,zero,800cb5c <__fputwc+0x50>
 800cb4c:	980b883a 	mov	r5,r19
 800cb50:	dcc000c5 	stb	r19,3(sp)
 800cb54:	05000044 	movi	r20,1
 800cb58:	00000a06 	br	800cb84 <__fputwc+0x78>
 800cb5c:	81c01704 	addi	r7,r16,92
 800cb60:	980d883a 	mov	r6,r19
 800cb64:	d94000c4 	addi	r5,sp,3
 800cb68:	9009883a 	mov	r4,r18
 800cb6c:	800d2180 	call	800d218 <_wcrtomb_r>
 800cb70:	1029883a 	mov	r20,r2
 800cb74:	10bfffd8 	cmpnei	r2,r2,-1
 800cb78:	10003926 	beq	r2,zero,800cc60 <__fputwc+0x154>
 800cb7c:	a0001f26 	beq	r20,zero,800cbfc <__fputwc+0xf0>
 800cb80:	d94000c3 	ldbu	r5,3(sp)
 800cb84:	0023883a 	mov	r17,zero
 800cb88:	00000a06 	br	800cbb4 <__fputwc+0xa8>
 800cb8c:	80800017 	ldw	r2,0(r16)
 800cb90:	11400005 	stb	r5,0(r2)
 800cb94:	80c00017 	ldw	r3,0(r16)
 800cb98:	18c00044 	addi	r3,r3,1
 800cb9c:	80c00015 	stw	r3,0(r16)
 800cba0:	8c400044 	addi	r17,r17,1
 800cba4:	d88000c4 	addi	r2,sp,3
 800cba8:	1447883a 	add	r3,r2,r17
 800cbac:	8d00132e 	bgeu	r17,r20,800cbfc <__fputwc+0xf0>
 800cbb0:	19400003 	ldbu	r5,0(r3)
 800cbb4:	80c00217 	ldw	r3,8(r16)
 800cbb8:	18ffffc4 	addi	r3,r3,-1
 800cbbc:	80c00215 	stw	r3,8(r16)
 800cbc0:	183ff20e 	bge	r3,zero,800cb8c <__fputwc+0x80>
 800cbc4:	80800617 	ldw	r2,24(r16)
 800cbc8:	18801616 	blt	r3,r2,800cc24 <__fputwc+0x118>
 800cbcc:	80800017 	ldw	r2,0(r16)
 800cbd0:	11400005 	stb	r5,0(r2)
 800cbd4:	80800017 	ldw	r2,0(r16)
 800cbd8:	10c00003 	ldbu	r3,0(r2)
 800cbdc:	10800044 	addi	r2,r2,1
 800cbe0:	18c002a0 	cmpeqi	r3,r3,10
 800cbe4:	1800181e 	bne	r3,zero,800cc48 <__fputwc+0x13c>
 800cbe8:	80800015 	stw	r2,0(r16)
 800cbec:	8c400044 	addi	r17,r17,1
 800cbf0:	d88000c4 	addi	r2,sp,3
 800cbf4:	1447883a 	add	r3,r2,r17
 800cbf8:	8d3fed36 	bltu	r17,r20,800cbb0 <__fputwc+0xa4>
 800cbfc:	9829883a 	mov	r20,r19
 800cc00:	a005883a 	mov	r2,r20
 800cc04:	dfc00617 	ldw	ra,24(sp)
 800cc08:	dd000517 	ldw	r20,20(sp)
 800cc0c:	dcc00417 	ldw	r19,16(sp)
 800cc10:	dc800317 	ldw	r18,12(sp)
 800cc14:	dc400217 	ldw	r17,8(sp)
 800cc18:	dc000117 	ldw	r16,4(sp)
 800cc1c:	dec00704 	addi	sp,sp,28
 800cc20:	f800283a 	ret
 800cc24:	29403fcc 	andi	r5,r5,255
 800cc28:	800d883a 	mov	r6,r16
 800cc2c:	9009883a 	mov	r4,r18
 800cc30:	800c6c80 	call	800c6c8 <__swbuf_r>
 800cc34:	10ffffe0 	cmpeqi	r3,r2,-1
 800cc38:	18c03fcc 	andi	r3,r3,255
 800cc3c:	183fd826 	beq	r3,zero,800cba0 <__fputwc+0x94>
 800cc40:	053fffc4 	movi	r20,-1
 800cc44:	003fee06 	br	800cc00 <__fputwc+0xf4>
 800cc48:	800d883a 	mov	r6,r16
 800cc4c:	01400284 	movi	r5,10
 800cc50:	9009883a 	mov	r4,r18
 800cc54:	800c6c80 	call	800c6c8 <__swbuf_r>
 800cc58:	10ffffe0 	cmpeqi	r3,r2,-1
 800cc5c:	003ff606 	br	800cc38 <__fputwc+0x12c>
 800cc60:	8080030b 	ldhu	r2,12(r16)
 800cc64:	10801014 	ori	r2,r2,64
 800cc68:	8080030d 	sth	r2,12(r16)
 800cc6c:	003fe406 	br	800cc00 <__fputwc+0xf4>

0800cc70 <_fputwc_r>:
 800cc70:	3080030b 	ldhu	r2,12(r6)
 800cc74:	10c8000c 	andi	r3,r2,8192
 800cc78:	1800051e 	bne	r3,zero,800cc90 <_fputwc_r+0x20>
 800cc7c:	30c01917 	ldw	r3,100(r6)
 800cc80:	10880014 	ori	r2,r2,8192
 800cc84:	3080030d 	sth	r2,12(r6)
 800cc88:	18880014 	ori	r2,r3,8192
 800cc8c:	30801915 	stw	r2,100(r6)
 800cc90:	800cb0c1 	jmpi	800cb0c <__fputwc>

0800cc94 <fputwc>:
 800cc94:	defffc04 	addi	sp,sp,-16
 800cc98:	00820174 	movhi	r2,2053
 800cc9c:	dc000215 	stw	r16,8(sp)
 800cca0:	1418e017 	ldw	r16,25472(r2)
 800cca4:	dfc00315 	stw	ra,12(sp)
 800cca8:	280d883a 	mov	r6,r5
 800ccac:	200b883a 	mov	r5,r4
 800ccb0:	80000226 	beq	r16,zero,800ccbc <fputwc+0x28>
 800ccb4:	80800e17 	ldw	r2,56(r16)
 800ccb8:	10000d26 	beq	r2,zero,800ccf0 <fputwc+0x5c>
 800ccbc:	3080030b 	ldhu	r2,12(r6)
 800ccc0:	10c8000c 	andi	r3,r2,8192
 800ccc4:	1800051e 	bne	r3,zero,800ccdc <fputwc+0x48>
 800ccc8:	30c01917 	ldw	r3,100(r6)
 800cccc:	10880014 	ori	r2,r2,8192
 800ccd0:	3080030d 	sth	r2,12(r6)
 800ccd4:	18880014 	ori	r2,r3,8192
 800ccd8:	30801915 	stw	r2,100(r6)
 800ccdc:	8009883a 	mov	r4,r16
 800cce0:	dfc00317 	ldw	ra,12(sp)
 800cce4:	dc000217 	ldw	r16,8(sp)
 800cce8:	dec00404 	addi	sp,sp,16
 800ccec:	800cb0c1 	jmpi	800cb0c <__fputwc>
 800ccf0:	d9000015 	stw	r4,0(sp)
 800ccf4:	8009883a 	mov	r4,r16
 800ccf8:	d9800115 	stw	r6,4(sp)
 800ccfc:	80080d40 	call	80080d4 <__sinit>
 800cd00:	d9800117 	ldw	r6,4(sp)
 800cd04:	d9400017 	ldw	r5,0(sp)
 800cd08:	003fec06 	br	800ccbc <fputwc+0x28>

0800cd0c <_fstat_r>:
 800cd0c:	2807883a 	mov	r3,r5
 800cd10:	defffe04 	addi	sp,sp,-8
 800cd14:	dc000015 	stw	r16,0(sp)
 800cd18:	00820174 	movhi	r2,2053
 800cd1c:	300b883a 	mov	r5,r6
 800cd20:	2021883a 	mov	r16,r4
 800cd24:	1809883a 	mov	r4,r3
 800cd28:	dfc00115 	stw	ra,4(sp)
 800cd2c:	10193915 	stw	zero,25828(r2)
 800cd30:	80109b40 	call	80109b4 <fstat>
 800cd34:	10ffffd8 	cmpnei	r3,r2,-1
 800cd38:	18000426 	beq	r3,zero,800cd4c <_fstat_r+0x40>
 800cd3c:	dfc00117 	ldw	ra,4(sp)
 800cd40:	dc000017 	ldw	r16,0(sp)
 800cd44:	dec00204 	addi	sp,sp,8
 800cd48:	f800283a 	ret
 800cd4c:	00c20174 	movhi	r3,2053
 800cd50:	18d93917 	ldw	r3,25828(r3)
 800cd54:	183ff926 	beq	r3,zero,800cd3c <_fstat_r+0x30>
 800cd58:	80c00015 	stw	r3,0(r16)
 800cd5c:	dfc00117 	ldw	ra,4(sp)
 800cd60:	dc000017 	ldw	r16,0(sp)
 800cd64:	dec00204 	addi	sp,sp,8
 800cd68:	f800283a 	ret

0800cd6c <_isatty_r>:
 800cd6c:	defffe04 	addi	sp,sp,-8
 800cd70:	dc000015 	stw	r16,0(sp)
 800cd74:	00820174 	movhi	r2,2053
 800cd78:	2021883a 	mov	r16,r4
 800cd7c:	2809883a 	mov	r4,r5
 800cd80:	dfc00115 	stw	ra,4(sp)
 800cd84:	10193915 	stw	zero,25828(r2)
 800cd88:	8010ac00 	call	8010ac0 <isatty>
 800cd8c:	10ffffd8 	cmpnei	r3,r2,-1
 800cd90:	18000426 	beq	r3,zero,800cda4 <_isatty_r+0x38>
 800cd94:	dfc00117 	ldw	ra,4(sp)
 800cd98:	dc000017 	ldw	r16,0(sp)
 800cd9c:	dec00204 	addi	sp,sp,8
 800cda0:	f800283a 	ret
 800cda4:	00c20174 	movhi	r3,2053
 800cda8:	18d93917 	ldw	r3,25828(r3)
 800cdac:	183ff926 	beq	r3,zero,800cd94 <_isatty_r+0x28>
 800cdb0:	80c00015 	stw	r3,0(r16)
 800cdb4:	dfc00117 	ldw	ra,4(sp)
 800cdb8:	dc000017 	ldw	r16,0(sp)
 800cdbc:	dec00204 	addi	sp,sp,8
 800cdc0:	f800283a 	ret

0800cdc4 <_setlocale_r>:
 800cdc4:	30001626 	beq	r6,zero,800ce20 <_setlocale_r+0x5c>
 800cdc8:	01420174 	movhi	r5,2053
 800cdcc:	defffe04 	addi	sp,sp,-8
 800cdd0:	297eff04 	addi	r5,r5,-1028
 800cdd4:	3009883a 	mov	r4,r6
 800cdd8:	dc000015 	stw	r16,0(sp)
 800cddc:	dfc00115 	stw	ra,4(sp)
 800cde0:	3021883a 	mov	r16,r6
 800cde4:	800d15c0 	call	800d15c <strcmp>
 800cde8:	1000061e 	bne	r2,zero,800ce04 <_setlocale_r+0x40>
 800cdec:	00820174 	movhi	r2,2053
 800cdf0:	10befe04 	addi	r2,r2,-1032
 800cdf4:	dfc00117 	ldw	ra,4(sp)
 800cdf8:	dc000017 	ldw	r16,0(sp)
 800cdfc:	dec00204 	addi	sp,sp,8
 800ce00:	f800283a 	ret
 800ce04:	80800003 	ldbu	r2,0(r16)
 800ce08:	10bfef44 	addi	r2,r2,-67
 800ce0c:	10000726 	beq	r2,zero,800ce2c <_setlocale_r+0x68>
 800ce10:	80800003 	ldbu	r2,0(r16)
 800ce14:	103ff526 	beq	r2,zero,800cdec <_setlocale_r+0x28>
 800ce18:	0005883a 	mov	r2,zero
 800ce1c:	003ff506 	br	800cdf4 <_setlocale_r+0x30>
 800ce20:	00820174 	movhi	r2,2053
 800ce24:	10befe04 	addi	r2,r2,-1032
 800ce28:	f800283a 	ret
 800ce2c:	80800043 	ldbu	r2,1(r16)
 800ce30:	103fee26 	beq	r2,zero,800cdec <_setlocale_r+0x28>
 800ce34:	003ff606 	br	800ce10 <_setlocale_r+0x4c>

0800ce38 <__locale_mb_cur_max>:
 800ce38:	00820174 	movhi	r2,2053
 800ce3c:	10930307 	ldb	r2,19468(r2)
 800ce40:	f800283a 	ret

0800ce44 <setlocale>:
 800ce44:	00c20174 	movhi	r3,2053
 800ce48:	2005883a 	mov	r2,r4
 800ce4c:	1918e017 	ldw	r4,25472(r3)
 800ce50:	280d883a 	mov	r6,r5
 800ce54:	100b883a 	mov	r5,r2
 800ce58:	800cdc41 	jmpi	800cdc4 <_setlocale_r>

0800ce5c <_lseek_r>:
 800ce5c:	2807883a 	mov	r3,r5
 800ce60:	defffe04 	addi	sp,sp,-8
 800ce64:	dc000015 	stw	r16,0(sp)
 800ce68:	300b883a 	mov	r5,r6
 800ce6c:	00820174 	movhi	r2,2053
 800ce70:	380d883a 	mov	r6,r7
 800ce74:	2021883a 	mov	r16,r4
 800ce78:	1809883a 	mov	r4,r3
 800ce7c:	dfc00115 	stw	ra,4(sp)
 800ce80:	10193915 	stw	zero,25828(r2)
 800ce84:	8010d080 	call	8010d08 <lseek>
 800ce88:	10ffffd8 	cmpnei	r3,r2,-1
 800ce8c:	18000426 	beq	r3,zero,800cea0 <_lseek_r+0x44>
 800ce90:	dfc00117 	ldw	ra,4(sp)
 800ce94:	dc000017 	ldw	r16,0(sp)
 800ce98:	dec00204 	addi	sp,sp,8
 800ce9c:	f800283a 	ret
 800cea0:	00c20174 	movhi	r3,2053
 800cea4:	18d93917 	ldw	r3,25828(r3)
 800cea8:	183ff926 	beq	r3,zero,800ce90 <_lseek_r+0x34>
 800ceac:	80c00015 	stw	r3,0(r16)
 800ceb0:	dfc00117 	ldw	ra,4(sp)
 800ceb4:	dc000017 	ldw	r16,0(sp)
 800ceb8:	dec00204 	addi	sp,sp,8
 800cebc:	f800283a 	ret

0800cec0 <_mbtowc_r>:
 800cec0:	00820174 	movhi	r2,2053
 800cec4:	1092f217 	ldw	r2,19400(r2)
 800cec8:	1000683a 	jmp	r2

0800cecc <__ascii_mbtowc>:
 800cecc:	deffff04 	addi	sp,sp,-4
 800ced0:	28000826 	beq	r5,zero,800cef4 <__ascii_mbtowc+0x28>
 800ced4:	30000926 	beq	r6,zero,800cefc <__ascii_mbtowc+0x30>
 800ced8:	38000b26 	beq	r7,zero,800cf08 <__ascii_mbtowc+0x3c>
 800cedc:	30800003 	ldbu	r2,0(r6)
 800cee0:	28800015 	stw	r2,0(r5)
 800cee4:	30800003 	ldbu	r2,0(r6)
 800cee8:	1004c03a 	cmpne	r2,r2,zero
 800ceec:	dec00104 	addi	sp,sp,4
 800cef0:	f800283a 	ret
 800cef4:	d80b883a 	mov	r5,sp
 800cef8:	303ff71e 	bne	r6,zero,800ced8 <__ascii_mbtowc+0xc>
 800cefc:	0005883a 	mov	r2,zero
 800cf00:	dec00104 	addi	sp,sp,4
 800cf04:	f800283a 	ret
 800cf08:	00bfff84 	movi	r2,-2
 800cf0c:	003ff706 	br	800ceec <__ascii_mbtowc+0x20>

0800cf10 <_read_r>:
 800cf10:	2807883a 	mov	r3,r5
 800cf14:	defffe04 	addi	sp,sp,-8
 800cf18:	dc000015 	stw	r16,0(sp)
 800cf1c:	300b883a 	mov	r5,r6
 800cf20:	00820174 	movhi	r2,2053
 800cf24:	380d883a 	mov	r6,r7
 800cf28:	2021883a 	mov	r16,r4
 800cf2c:	1809883a 	mov	r4,r3
 800cf30:	dfc00115 	stw	ra,4(sp)
 800cf34:	10193915 	stw	zero,25828(r2)
 800cf38:	802501c0 	call	802501c <read>
 800cf3c:	10ffffd8 	cmpnei	r3,r2,-1
 800cf40:	18000426 	beq	r3,zero,800cf54 <_read_r+0x44>
 800cf44:	dfc00117 	ldw	ra,4(sp)
 800cf48:	dc000017 	ldw	r16,0(sp)
 800cf4c:	dec00204 	addi	sp,sp,8
 800cf50:	f800283a 	ret
 800cf54:	00c20174 	movhi	r3,2053
 800cf58:	18d93917 	ldw	r3,25828(r3)
 800cf5c:	183ff926 	beq	r3,zero,800cf44 <_read_r+0x34>
 800cf60:	80c00015 	stw	r3,0(r16)
 800cf64:	dfc00117 	ldw	ra,4(sp)
 800cf68:	dc000017 	ldw	r16,0(sp)
 800cf6c:	dec00204 	addi	sp,sp,8
 800cf70:	f800283a 	ret

0800cf74 <lflush>:
 800cf74:	2080030b 	ldhu	r2,12(r4)
 800cf78:	1080024c 	andi	r2,r2,9
 800cf7c:	10800258 	cmpnei	r2,r2,9
 800cf80:	10000226 	beq	r2,zero,800cf8c <lflush+0x18>
 800cf84:	0005883a 	mov	r2,zero
 800cf88:	f800283a 	ret
 800cf8c:	8007d4c1 	jmpi	8007d4c <fflush>

0800cf90 <__srefill_r>:
 800cf90:	defffc04 	addi	sp,sp,-16
 800cf94:	dc400115 	stw	r17,4(sp)
 800cf98:	dc000015 	stw	r16,0(sp)
 800cf9c:	dfc00315 	stw	ra,12(sp)
 800cfa0:	dc800215 	stw	r18,8(sp)
 800cfa4:	2023883a 	mov	r17,r4
 800cfa8:	2821883a 	mov	r16,r5
 800cfac:	20000226 	beq	r4,zero,800cfb8 <__srefill_r+0x28>
 800cfb0:	20800e17 	ldw	r2,56(r4)
 800cfb4:	10003a26 	beq	r2,zero,800d0a0 <__srefill_r+0x110>
 800cfb8:	80c0030b 	ldhu	r3,12(r16)
 800cfbc:	1908000c 	andi	r4,r3,8192
 800cfc0:	1805883a 	mov	r2,r3
 800cfc4:	2000071e 	bne	r4,zero,800cfe4 <__srefill_r+0x54>
 800cfc8:	81001917 	ldw	r4,100(r16)
 800cfcc:	18880014 	ori	r2,r3,8192
 800cfd0:	00f7ffc4 	movi	r3,-8193
 800cfd4:	20c8703a 	and	r4,r4,r3
 800cfd8:	8080030d 	sth	r2,12(r16)
 800cfdc:	1007883a 	mov	r3,r2
 800cfe0:	81001915 	stw	r4,100(r16)
 800cfe4:	80000115 	stw	zero,4(r16)
 800cfe8:	1100080c 	andi	r4,r2,32
 800cfec:	20004d1e 	bne	r4,zero,800d124 <__srefill_r+0x194>
 800cff0:	1100010c 	andi	r4,r2,4
 800cff4:	20001c1e 	bne	r4,zero,800d068 <__srefill_r+0xd8>
 800cff8:	1100040c 	andi	r4,r2,16
 800cffc:	20005126 	beq	r4,zero,800d144 <__srefill_r+0x1b4>
 800d000:	1080020c 	andi	r2,r2,8
 800d004:	1000371e 	bne	r2,zero,800d0e4 <__srefill_r+0x154>
 800d008:	18c00114 	ori	r3,r3,4
 800d00c:	80c0030d 	sth	r3,12(r16)
 800d010:	80800417 	ldw	r2,16(r16)
 800d014:	10003c26 	beq	r2,zero,800d108 <__srefill_r+0x178>
 800d018:	8480030b 	ldhu	r18,12(r16)
 800d01c:	908000cc 	andi	r2,r18,3
 800d020:	1000211e 	bne	r2,zero,800d0a8 <__srefill_r+0x118>
 800d024:	81800417 	ldw	r6,16(r16)
 800d028:	80800817 	ldw	r2,32(r16)
 800d02c:	81c00517 	ldw	r7,20(r16)
 800d030:	81400717 	ldw	r5,28(r16)
 800d034:	81800015 	stw	r6,0(r16)
 800d038:	8809883a 	mov	r4,r17
 800d03c:	103ee83a 	callr	r2
 800d040:	1007883a 	mov	r3,r2
 800d044:	80800115 	stw	r2,4(r16)
 800d048:	0005883a 	mov	r2,zero
 800d04c:	00c0370e 	bge	zero,r3,800d12c <__srefill_r+0x19c>
 800d050:	dfc00317 	ldw	ra,12(sp)
 800d054:	dc800217 	ldw	r18,8(sp)
 800d058:	dc400117 	ldw	r17,4(sp)
 800d05c:	dc000017 	ldw	r16,0(sp)
 800d060:	dec00404 	addi	sp,sp,16
 800d064:	f800283a 	ret
 800d068:	81400c17 	ldw	r5,48(r16)
 800d06c:	283fe826 	beq	r5,zero,800d010 <__srefill_r+0x80>
 800d070:	80801004 	addi	r2,r16,64
 800d074:	28800226 	beq	r5,r2,800d080 <__srefill_r+0xf0>
 800d078:	8809883a 	mov	r4,r17
 800d07c:	80082380 	call	8008238 <_free_r>
 800d080:	80800f17 	ldw	r2,60(r16)
 800d084:	80000c15 	stw	zero,48(r16)
 800d088:	80800115 	stw	r2,4(r16)
 800d08c:	103fe026 	beq	r2,zero,800d010 <__srefill_r+0x80>
 800d090:	80c00e17 	ldw	r3,56(r16)
 800d094:	0005883a 	mov	r2,zero
 800d098:	80c00015 	stw	r3,0(r16)
 800d09c:	003fec06 	br	800d050 <__srefill_r+0xc0>
 800d0a0:	80080d40 	call	80080d4 <__sinit>
 800d0a4:	003fc406 	br	800cfb8 <__srefill_r+0x28>
 800d0a8:	00820174 	movhi	r2,2053
 800d0ac:	1118df17 	ldw	r4,25468(r2)
 800d0b0:	01420074 	movhi	r5,2049
 800d0b4:	00800044 	movi	r2,1
 800d0b8:	8080030d 	sth	r2,12(r16)
 800d0bc:	2973dd04 	addi	r5,r5,-12428
 800d0c0:	80089f00 	call	80089f0 <_fwalk>
 800d0c4:	9080024c 	andi	r2,r18,9
 800d0c8:	8480030d 	sth	r18,12(r16)
 800d0cc:	10800258 	cmpnei	r2,r2,9
 800d0d0:	103fd41e 	bne	r2,zero,800d024 <__srefill_r+0x94>
 800d0d4:	800b883a 	mov	r5,r16
 800d0d8:	8809883a 	mov	r4,r17
 800d0dc:	8007ac40 	call	8007ac4 <__sflush_r>
 800d0e0:	003fd006 	br	800d024 <__srefill_r+0x94>
 800d0e4:	800b883a 	mov	r5,r16
 800d0e8:	8809883a 	mov	r4,r17
 800d0ec:	8007cec0 	call	8007cec <_fflush_r>
 800d0f0:	10000c1e 	bne	r2,zero,800d124 <__srefill_r+0x194>
 800d0f4:	80c0030b 	ldhu	r3,12(r16)
 800d0f8:	80000215 	stw	zero,8(r16)
 800d0fc:	80000615 	stw	zero,24(r16)
 800d100:	18fffdcc 	andi	r3,r3,65527
 800d104:	003fc006 	br	800d008 <__srefill_r+0x78>
 800d108:	800b883a 	mov	r5,r16
 800d10c:	8809883a 	mov	r4,r17
 800d110:	8008cf40 	call	8008cf4 <__smakebuf_r>
 800d114:	003fc006 	br	800d018 <__srefill_r+0x88>
 800d118:	10801014 	ori	r2,r2,64
 800d11c:	80000115 	stw	zero,4(r16)
 800d120:	8080030d 	sth	r2,12(r16)
 800d124:	00bfffc4 	movi	r2,-1
 800d128:	003fc906 	br	800d050 <__srefill_r+0xc0>
 800d12c:	8080030b 	ldhu	r2,12(r16)
 800d130:	183ff91e 	bne	r3,zero,800d118 <__srefill_r+0x188>
 800d134:	10800814 	ori	r2,r2,32
 800d138:	8080030d 	sth	r2,12(r16)
 800d13c:	00bfffc4 	movi	r2,-1
 800d140:	003fc306 	br	800d050 <__srefill_r+0xc0>
 800d144:	00800244 	movi	r2,9
 800d148:	88800015 	stw	r2,0(r17)
 800d14c:	18c01014 	ori	r3,r3,64
 800d150:	80c0030d 	sth	r3,12(r16)
 800d154:	00bfffc4 	movi	r2,-1
 800d158:	003fbd06 	br	800d050 <__srefill_r+0xc0>

0800d15c <strcmp>:
 800d15c:	2144b03a 	or	r2,r4,r5
 800d160:	108000cc 	andi	r2,r2,3
 800d164:	1000141e 	bne	r2,zero,800d1b8 <strcmp+0x5c>
 800d168:	20800017 	ldw	r2,0(r4)
 800d16c:	28c00017 	ldw	r3,0(r5)
 800d170:	10c0111e 	bne	r2,r3,800d1b8 <strcmp+0x5c>
 800d174:	01ffbff4 	movhi	r7,65279
 800d178:	01a02074 	movhi	r6,32897
 800d17c:	39ffbfc4 	addi	r7,r7,-257
 800d180:	31a02004 	addi	r6,r6,-32640
 800d184:	00000306 	br	800d194 <strcmp+0x38>
 800d188:	20800017 	ldw	r2,0(r4)
 800d18c:	28c00017 	ldw	r3,0(r5)
 800d190:	10c0091e 	bne	r2,r3,800d1b8 <strcmp+0x5c>
 800d194:	11c7883a 	add	r3,r2,r7
 800d198:	0084303a 	nor	r2,zero,r2
 800d19c:	1884703a 	and	r2,r3,r2
 800d1a0:	1184703a 	and	r2,r2,r6
 800d1a4:	21000104 	addi	r4,r4,4
 800d1a8:	29400104 	addi	r5,r5,4
 800d1ac:	103ff626 	beq	r2,zero,800d188 <strcmp+0x2c>
 800d1b0:	0005883a 	mov	r2,zero
 800d1b4:	f800283a 	ret
 800d1b8:	20c00003 	ldbu	r3,0(r4)
 800d1bc:	18803fcc 	andi	r2,r3,255
 800d1c0:	1080201c 	xori	r2,r2,128
 800d1c4:	10bfe004 	addi	r2,r2,-128
 800d1c8:	1000071e 	bne	r2,zero,800d1e8 <strcmp+0x8c>
 800d1cc:	00000a06 	br	800d1f8 <strcmp+0x9c>
 800d1d0:	20c00003 	ldbu	r3,0(r4)
 800d1d4:	29400044 	addi	r5,r5,1
 800d1d8:	18803fcc 	andi	r2,r3,255
 800d1dc:	1080201c 	xori	r2,r2,128
 800d1e0:	10bfe004 	addi	r2,r2,-128
 800d1e4:	10000726 	beq	r2,zero,800d204 <strcmp+0xa8>
 800d1e8:	29800007 	ldb	r6,0(r5)
 800d1ec:	21000044 	addi	r4,r4,1
 800d1f0:	30bff726 	beq	r6,r2,800d1d0 <strcmp+0x74>
 800d1f4:	18803fcc 	andi	r2,r3,255
 800d1f8:	28c00003 	ldbu	r3,0(r5)
 800d1fc:	10c5c83a 	sub	r2,r2,r3
 800d200:	f800283a 	ret
 800d204:	28c00003 	ldbu	r3,0(r5)
 800d208:	0005883a 	mov	r2,zero
 800d20c:	10c5c83a 	sub	r2,r2,r3
 800d210:	f800283a 	ret

0800d214 <_vfiprintf_r>:
 800d214:	800b2e81 	jmpi	800b2e8 <___vfiprintf_internal_r>

0800d218 <_wcrtomb_r>:
 800d218:	defffa04 	addi	sp,sp,-24
 800d21c:	dc400415 	stw	r17,16(sp)
 800d220:	dc000315 	stw	r16,12(sp)
 800d224:	00820174 	movhi	r2,2053
 800d228:	dfc00515 	stw	ra,20(sp)
 800d22c:	1092f117 	ldw	r2,19396(r2)
 800d230:	2023883a 	mov	r17,r4
 800d234:	3821883a 	mov	r16,r7
 800d238:	28000826 	beq	r5,zero,800d25c <_wcrtomb_r+0x44>
 800d23c:	103ee83a 	callr	r2
 800d240:	10ffffd8 	cmpnei	r3,r2,-1
 800d244:	18000a26 	beq	r3,zero,800d270 <_wcrtomb_r+0x58>
 800d248:	dfc00517 	ldw	ra,20(sp)
 800d24c:	dc400417 	ldw	r17,16(sp)
 800d250:	dc000317 	ldw	r16,12(sp)
 800d254:	dec00604 	addi	sp,sp,24
 800d258:	f800283a 	ret
 800d25c:	000d883a 	mov	r6,zero
 800d260:	d9400084 	addi	r5,sp,2
 800d264:	103ee83a 	callr	r2
 800d268:	10ffffd8 	cmpnei	r3,r2,-1
 800d26c:	183ff61e 	bne	r3,zero,800d248 <_wcrtomb_r+0x30>
 800d270:	00802284 	movi	r2,138
 800d274:	80000015 	stw	zero,0(r16)
 800d278:	88800015 	stw	r2,0(r17)
 800d27c:	00bfffc4 	movi	r2,-1
 800d280:	003ff106 	br	800d248 <_wcrtomb_r+0x30>

0800d284 <wcrtomb>:
 800d284:	defffa04 	addi	sp,sp,-24
 800d288:	00c20174 	movhi	r3,2053
 800d28c:	dc400415 	stw	r17,16(sp)
 800d290:	dc000315 	stw	r16,12(sp)
 800d294:	1c58e017 	ldw	r17,25472(r3)
 800d298:	dfc00515 	stw	ra,20(sp)
 800d29c:	00c20174 	movhi	r3,2053
 800d2a0:	18d2f117 	ldw	r3,19396(r3)
 800d2a4:	3021883a 	mov	r16,r6
 800d2a8:	20000c26 	beq	r4,zero,800d2dc <wcrtomb+0x58>
 800d2ac:	280d883a 	mov	r6,r5
 800d2b0:	800f883a 	mov	r7,r16
 800d2b4:	200b883a 	mov	r5,r4
 800d2b8:	8809883a 	mov	r4,r17
 800d2bc:	183ee83a 	callr	r3
 800d2c0:	10ffffd8 	cmpnei	r3,r2,-1
 800d2c4:	18000c26 	beq	r3,zero,800d2f8 <wcrtomb+0x74>
 800d2c8:	dfc00517 	ldw	ra,20(sp)
 800d2cc:	dc400417 	ldw	r17,16(sp)
 800d2d0:	dc000317 	ldw	r16,12(sp)
 800d2d4:	dec00604 	addi	sp,sp,24
 800d2d8:	f800283a 	ret
 800d2dc:	300f883a 	mov	r7,r6
 800d2e0:	d9400084 	addi	r5,sp,2
 800d2e4:	000d883a 	mov	r6,zero
 800d2e8:	8809883a 	mov	r4,r17
 800d2ec:	183ee83a 	callr	r3
 800d2f0:	10ffffd8 	cmpnei	r3,r2,-1
 800d2f4:	183ff41e 	bne	r3,zero,800d2c8 <wcrtomb+0x44>
 800d2f8:	00802284 	movi	r2,138
 800d2fc:	80000015 	stw	zero,0(r16)
 800d300:	88800015 	stw	r2,0(r17)
 800d304:	00bfffc4 	movi	r2,-1
 800d308:	003fef06 	br	800d2c8 <wcrtomb+0x44>

0800d30c <_wctomb_r>:
 800d30c:	00820174 	movhi	r2,2053
 800d310:	1092f117 	ldw	r2,19396(r2)
 800d314:	1000683a 	jmp	r2

0800d318 <__ascii_wctomb>:
 800d318:	28000926 	beq	r5,zero,800d340 <__ascii_wctomb+0x28>
 800d31c:	30804030 	cmpltui	r2,r6,256
 800d320:	10000326 	beq	r2,zero,800d330 <__ascii_wctomb+0x18>
 800d324:	29800005 	stb	r6,0(r5)
 800d328:	00800044 	movi	r2,1
 800d32c:	f800283a 	ret
 800d330:	00802284 	movi	r2,138
 800d334:	20800015 	stw	r2,0(r4)
 800d338:	00bfffc4 	movi	r2,-1
 800d33c:	f800283a 	ret
 800d340:	0005883a 	mov	r2,zero
 800d344:	f800283a 	ret

0800d348 <abort>:
 800d348:	deffff04 	addi	sp,sp,-4
 800d34c:	01000184 	movi	r4,6
 800d350:	dfc00015 	stw	ra,0(sp)
 800d354:	800d5c00 	call	800d5c0 <raise>
 800d358:	01000044 	movi	r4,1
 800d35c:	80109400 	call	8010940 <_exit>

0800d360 <_init_signal_r.part.0>:
 800d360:	defffe04 	addi	sp,sp,-8
 800d364:	01402004 	movi	r5,128
 800d368:	dc000015 	stw	r16,0(sp)
 800d36c:	dfc00115 	stw	ra,4(sp)
 800d370:	2021883a 	mov	r16,r4
 800d374:	8008e340 	call	8008e34 <_malloc_r>
 800d378:	8080b715 	stw	r2,732(r16)
 800d37c:	10000926 	beq	r2,zero,800d3a4 <_init_signal_r.part.0+0x44>
 800d380:	10c02004 	addi	r3,r2,128
 800d384:	10000015 	stw	zero,0(r2)
 800d388:	10800104 	addi	r2,r2,4
 800d38c:	10fffd1e 	bne	r2,r3,800d384 <_init_signal_r.part.0+0x24>
 800d390:	0005883a 	mov	r2,zero
 800d394:	dfc00117 	ldw	ra,4(sp)
 800d398:	dc000017 	ldw	r16,0(sp)
 800d39c:	dec00204 	addi	sp,sp,8
 800d3a0:	f800283a 	ret
 800d3a4:	00bfffc4 	movi	r2,-1
 800d3a8:	003ffa06 	br	800d394 <_init_signal_r.part.0+0x34>

0800d3ac <_init_signal_r>:
 800d3ac:	2080b717 	ldw	r2,732(r4)
 800d3b0:	10000226 	beq	r2,zero,800d3bc <_init_signal_r+0x10>
 800d3b4:	0005883a 	mov	r2,zero
 800d3b8:	f800283a 	ret
 800d3bc:	800d3601 	jmpi	800d360 <_init_signal_r.part.0>

0800d3c0 <_signal_r>:
 800d3c0:	defffc04 	addi	sp,sp,-16
 800d3c4:	dc000215 	stw	r16,8(sp)
 800d3c8:	dfc00315 	stw	ra,12(sp)
 800d3cc:	28800830 	cmpltui	r2,r5,32
 800d3d0:	2021883a 	mov	r16,r4
 800d3d4:	10000a26 	beq	r2,zero,800d400 <_signal_r+0x40>
 800d3d8:	2080b717 	ldw	r2,732(r4)
 800d3dc:	10000f26 	beq	r2,zero,800d41c <_signal_r+0x5c>
 800d3e0:	280a90ba 	slli	r5,r5,2
 800d3e4:	114b883a 	add	r5,r2,r5
 800d3e8:	28800017 	ldw	r2,0(r5)
 800d3ec:	29800015 	stw	r6,0(r5)
 800d3f0:	dfc00317 	ldw	ra,12(sp)
 800d3f4:	dc000217 	ldw	r16,8(sp)
 800d3f8:	dec00404 	addi	sp,sp,16
 800d3fc:	f800283a 	ret
 800d400:	00800584 	movi	r2,22
 800d404:	20800015 	stw	r2,0(r4)
 800d408:	00bfffc4 	movi	r2,-1
 800d40c:	dfc00317 	ldw	ra,12(sp)
 800d410:	dc000217 	ldw	r16,8(sp)
 800d414:	dec00404 	addi	sp,sp,16
 800d418:	f800283a 	ret
 800d41c:	d9800115 	stw	r6,4(sp)
 800d420:	d9400015 	stw	r5,0(sp)
 800d424:	800d3600 	call	800d360 <_init_signal_r.part.0>
 800d428:	1000041e 	bne	r2,zero,800d43c <_signal_r+0x7c>
 800d42c:	8080b717 	ldw	r2,732(r16)
 800d430:	d9800117 	ldw	r6,4(sp)
 800d434:	d9400017 	ldw	r5,0(sp)
 800d438:	003fe906 	br	800d3e0 <_signal_r+0x20>
 800d43c:	00bfffc4 	movi	r2,-1
 800d440:	003feb06 	br	800d3f0 <_signal_r+0x30>

0800d444 <_raise_r>:
 800d444:	28800830 	cmpltui	r2,r5,32
 800d448:	10002b26 	beq	r2,zero,800d4f8 <_raise_r+0xb4>
 800d44c:	2080b717 	ldw	r2,732(r4)
 800d450:	defffd04 	addi	sp,sp,-12
 800d454:	dc000115 	stw	r16,4(sp)
 800d458:	dfc00215 	stw	ra,8(sp)
 800d45c:	2821883a 	mov	r16,r5
 800d460:	10001026 	beq	r2,zero,800d4a4 <_raise_r+0x60>
 800d464:	280690ba 	slli	r3,r5,2
 800d468:	10c5883a 	add	r2,r2,r3
 800d46c:	10c00017 	ldw	r3,0(r2)
 800d470:	18000c26 	beq	r3,zero,800d4a4 <_raise_r+0x60>
 800d474:	19400060 	cmpeqi	r5,r3,1
 800d478:	28001a1e 	bne	r5,zero,800d4e4 <_raise_r+0xa0>
 800d47c:	197fffd8 	cmpnei	r5,r3,-1
 800d480:	28001126 	beq	r5,zero,800d4c8 <_raise_r+0x84>
 800d484:	10000015 	stw	zero,0(r2)
 800d488:	8009883a 	mov	r4,r16
 800d48c:	183ee83a 	callr	r3
 800d490:	0005883a 	mov	r2,zero
 800d494:	dfc00217 	ldw	ra,8(sp)
 800d498:	dc000117 	ldw	r16,4(sp)
 800d49c:	dec00304 	addi	sp,sp,12
 800d4a0:	f800283a 	ret
 800d4a4:	d9000015 	stw	r4,0(sp)
 800d4a8:	800d6740 	call	800d674 <_getpid_r>
 800d4ac:	d9000017 	ldw	r4,0(sp)
 800d4b0:	800d883a 	mov	r6,r16
 800d4b4:	100b883a 	mov	r5,r2
 800d4b8:	dfc00217 	ldw	ra,8(sp)
 800d4bc:	dc000117 	ldw	r16,4(sp)
 800d4c0:	dec00304 	addi	sp,sp,12
 800d4c4:	800d6141 	jmpi	800d614 <_kill_r>
 800d4c8:	00800584 	movi	r2,22
 800d4cc:	20800015 	stw	r2,0(r4)
 800d4d0:	00800044 	movi	r2,1
 800d4d4:	dfc00217 	ldw	ra,8(sp)
 800d4d8:	dc000117 	ldw	r16,4(sp)
 800d4dc:	dec00304 	addi	sp,sp,12
 800d4e0:	f800283a 	ret
 800d4e4:	0005883a 	mov	r2,zero
 800d4e8:	dfc00217 	ldw	ra,8(sp)
 800d4ec:	dc000117 	ldw	r16,4(sp)
 800d4f0:	dec00304 	addi	sp,sp,12
 800d4f4:	f800283a 	ret
 800d4f8:	00800584 	movi	r2,22
 800d4fc:	20800015 	stw	r2,0(r4)
 800d500:	00bfffc4 	movi	r2,-1
 800d504:	f800283a 	ret

0800d508 <__sigtramp_r>:
 800d508:	28800830 	cmpltui	r2,r5,32
 800d50c:	10002a26 	beq	r2,zero,800d5b8 <__sigtramp_r+0xb0>
 800d510:	2080b717 	ldw	r2,732(r4)
 800d514:	defffd04 	addi	sp,sp,-12
 800d518:	dc400115 	stw	r17,4(sp)
 800d51c:	dfc00215 	stw	ra,8(sp)
 800d520:	2023883a 	mov	r17,r4
 800d524:	10001526 	beq	r2,zero,800d57c <__sigtramp_r+0x74>
 800d528:	280690ba 	slli	r3,r5,2
 800d52c:	10c5883a 	add	r2,r2,r3
 800d530:	10c00017 	ldw	r3,0(r2)
 800d534:	18000c26 	beq	r3,zero,800d568 <__sigtramp_r+0x60>
 800d538:	193fffe0 	cmpeqi	r4,r3,-1
 800d53c:	20001a1e 	bne	r4,zero,800d5a8 <__sigtramp_r+0xa0>
 800d540:	19000060 	cmpeqi	r4,r3,1
 800d544:	2000131e 	bne	r4,zero,800d594 <__sigtramp_r+0x8c>
 800d548:	10000015 	stw	zero,0(r2)
 800d54c:	2809883a 	mov	r4,r5
 800d550:	183ee83a 	callr	r3
 800d554:	0005883a 	mov	r2,zero
 800d558:	dfc00217 	ldw	ra,8(sp)
 800d55c:	dc400117 	ldw	r17,4(sp)
 800d560:	dec00304 	addi	sp,sp,12
 800d564:	f800283a 	ret
 800d568:	00800044 	movi	r2,1
 800d56c:	dfc00217 	ldw	ra,8(sp)
 800d570:	dc400117 	ldw	r17,4(sp)
 800d574:	dec00304 	addi	sp,sp,12
 800d578:	f800283a 	ret
 800d57c:	d9400015 	stw	r5,0(sp)
 800d580:	800d3600 	call	800d360 <_init_signal_r.part.0>
 800d584:	10000a1e 	bne	r2,zero,800d5b0 <__sigtramp_r+0xa8>
 800d588:	8880b717 	ldw	r2,732(r17)
 800d58c:	d9400017 	ldw	r5,0(sp)
 800d590:	003fe506 	br	800d528 <__sigtramp_r+0x20>
 800d594:	008000c4 	movi	r2,3
 800d598:	dfc00217 	ldw	ra,8(sp)
 800d59c:	dc400117 	ldw	r17,4(sp)
 800d5a0:	dec00304 	addi	sp,sp,12
 800d5a4:	f800283a 	ret
 800d5a8:	00800084 	movi	r2,2
 800d5ac:	003fea06 	br	800d558 <__sigtramp_r+0x50>
 800d5b0:	00bfffc4 	movi	r2,-1
 800d5b4:	003fe806 	br	800d558 <__sigtramp_r+0x50>
 800d5b8:	00bfffc4 	movi	r2,-1
 800d5bc:	f800283a 	ret

0800d5c0 <raise>:
 800d5c0:	00820174 	movhi	r2,2053
 800d5c4:	200b883a 	mov	r5,r4
 800d5c8:	1118e017 	ldw	r4,25472(r2)
 800d5cc:	800d4441 	jmpi	800d444 <_raise_r>

0800d5d0 <signal>:
 800d5d0:	00c20174 	movhi	r3,2053
 800d5d4:	2005883a 	mov	r2,r4
 800d5d8:	1918e017 	ldw	r4,25472(r3)
 800d5dc:	280d883a 	mov	r6,r5
 800d5e0:	100b883a 	mov	r5,r2
 800d5e4:	800d3c01 	jmpi	800d3c0 <_signal_r>

0800d5e8 <_init_signal>:
 800d5e8:	00820174 	movhi	r2,2053
 800d5ec:	1118e017 	ldw	r4,25472(r2)
 800d5f0:	2080b717 	ldw	r2,732(r4)
 800d5f4:	10000226 	beq	r2,zero,800d600 <_init_signal+0x18>
 800d5f8:	0005883a 	mov	r2,zero
 800d5fc:	f800283a 	ret
 800d600:	800d3601 	jmpi	800d360 <_init_signal_r.part.0>

0800d604 <__sigtramp>:
 800d604:	00820174 	movhi	r2,2053
 800d608:	200b883a 	mov	r5,r4
 800d60c:	1118e017 	ldw	r4,25472(r2)
 800d610:	800d5081 	jmpi	800d508 <__sigtramp_r>

0800d614 <_kill_r>:
 800d614:	2807883a 	mov	r3,r5
 800d618:	defffe04 	addi	sp,sp,-8
 800d61c:	dc000015 	stw	r16,0(sp)
 800d620:	00820174 	movhi	r2,2053
 800d624:	300b883a 	mov	r5,r6
 800d628:	2021883a 	mov	r16,r4
 800d62c:	1809883a 	mov	r4,r3
 800d630:	dfc00115 	stw	ra,4(sp)
 800d634:	10193915 	stw	zero,25828(r2)
 800d638:	8010ba00 	call	8010ba0 <kill>
 800d63c:	10ffffd8 	cmpnei	r3,r2,-1
 800d640:	18000426 	beq	r3,zero,800d654 <_kill_r+0x40>
 800d644:	dfc00117 	ldw	ra,4(sp)
 800d648:	dc000017 	ldw	r16,0(sp)
 800d64c:	dec00204 	addi	sp,sp,8
 800d650:	f800283a 	ret
 800d654:	00c20174 	movhi	r3,2053
 800d658:	18d93917 	ldw	r3,25828(r3)
 800d65c:	183ff926 	beq	r3,zero,800d644 <_kill_r+0x30>
 800d660:	80c00015 	stw	r3,0(r16)
 800d664:	dfc00117 	ldw	ra,4(sp)
 800d668:	dc000017 	ldw	r16,0(sp)
 800d66c:	dec00204 	addi	sp,sp,8
 800d670:	f800283a 	ret

0800d674 <_getpid_r>:
 800d674:	8010a641 	jmpi	8010a64 <getpid>

0800d678 <__udivdi3>:
 800d678:	defff504 	addi	sp,sp,-44
 800d67c:	dcc00415 	stw	r19,16(sp)
 800d680:	dc000115 	stw	r16,4(sp)
 800d684:	dfc00a15 	stw	ra,40(sp)
 800d688:	df000915 	stw	fp,36(sp)
 800d68c:	ddc00815 	stw	r23,32(sp)
 800d690:	dd800715 	stw	r22,28(sp)
 800d694:	dd400615 	stw	r21,24(sp)
 800d698:	dd000515 	stw	r20,20(sp)
 800d69c:	dc800315 	stw	r18,12(sp)
 800d6a0:	dc400215 	stw	r17,8(sp)
 800d6a4:	2027883a 	mov	r19,r4
 800d6a8:	2821883a 	mov	r16,r5
 800d6ac:	3800411e 	bne	r7,zero,800d7b4 <__udivdi3+0x13c>
 800d6b0:	3829883a 	mov	r20,r7
 800d6b4:	3023883a 	mov	r17,r6
 800d6b8:	2025883a 	mov	r18,r4
 800d6bc:	29805d2e 	bgeu	r5,r6,800d834 <__udivdi3+0x1bc>
 800d6c0:	00bfffd4 	movui	r2,65535
 800d6c4:	282b883a 	mov	r21,r5
 800d6c8:	1180a02e 	bgeu	r2,r6,800d94c <__udivdi3+0x2d4>
 800d6cc:	00804034 	movhi	r2,256
 800d6d0:	30813636 	bltu	r6,r2,800dbac <__udivdi3+0x534>
 800d6d4:	3006d63a 	srli	r3,r6,24
 800d6d8:	05000604 	movi	r20,24
 800d6dc:	00820174 	movhi	r2,2053
 800d6e0:	1885883a 	add	r2,r3,r2
 800d6e4:	10bf0203 	ldbu	r2,-1016(r2)
 800d6e8:	00c00804 	movi	r3,32
 800d6ec:	1505883a 	add	r2,r2,r20
 800d6f0:	1889c83a 	sub	r4,r3,r2
 800d6f4:	18800526 	beq	r3,r2,800d70c <__udivdi3+0x94>
 800d6f8:	8120983a 	sll	r16,r16,r4
 800d6fc:	9884d83a 	srl	r2,r19,r2
 800d700:	3122983a 	sll	r17,r6,r4
 800d704:	9924983a 	sll	r18,r19,r4
 800d708:	142ab03a 	or	r21,r2,r16
 800d70c:	882cd43a 	srli	r22,r17,16
 800d710:	a809883a 	mov	r4,r21
 800d714:	8d3fffcc 	andi	r20,r17,65535
 800d718:	b00b883a 	mov	r5,r22
 800d71c:	800e2940 	call	800e294 <__umodsi3>
 800d720:	a809883a 	mov	r4,r21
 800d724:	b00b883a 	mov	r5,r22
 800d728:	1027883a 	mov	r19,r2
 800d72c:	800e2300 	call	800e230 <__udivsi3>
 800d730:	9826943a 	slli	r19,r19,16
 800d734:	9008d43a 	srli	r4,r18,16
 800d738:	1021883a 	mov	r16,r2
 800d73c:	a085383a 	mul	r2,r20,r2
 800d740:	9908b03a 	or	r4,r19,r4
 800d744:	2080052e 	bgeu	r4,r2,800d75c <__udivdi3+0xe4>
 800d748:	2449883a 	add	r4,r4,r17
 800d74c:	80ffffc4 	addi	r3,r16,-1
 800d750:	24400136 	bltu	r4,r17,800d758 <__udivdi3+0xe0>
 800d754:	20812636 	bltu	r4,r2,800dbf0 <__udivdi3+0x578>
 800d758:	1821883a 	mov	r16,r3
 800d75c:	20a7c83a 	sub	r19,r4,r2
 800d760:	9809883a 	mov	r4,r19
 800d764:	b00b883a 	mov	r5,r22
 800d768:	800e2940 	call	800e294 <__umodsi3>
 800d76c:	9809883a 	mov	r4,r19
 800d770:	b00b883a 	mov	r5,r22
 800d774:	1027883a 	mov	r19,r2
 800d778:	9826943a 	slli	r19,r19,16
 800d77c:	800e2300 	call	800e230 <__udivsi3>
 800d780:	a0a9383a 	mul	r20,r20,r2
 800d784:	94bfffcc 	andi	r18,r18,65535
 800d788:	9ca4b03a 	or	r18,r19,r18
 800d78c:	9500052e 	bgeu	r18,r20,800d7a4 <__udivdi3+0x12c>
 800d790:	8ca5883a 	add	r18,r17,r18
 800d794:	10ffffc4 	addi	r3,r2,-1
 800d798:	94400136 	bltu	r18,r17,800d7a0 <__udivdi3+0x128>
 800d79c:	95011236 	bltu	r18,r20,800dbe8 <__udivdi3+0x570>
 800d7a0:	1805883a 	mov	r2,r3
 800d7a4:	8020943a 	slli	r16,r16,16
 800d7a8:	0007883a 	mov	r3,zero
 800d7ac:	8084b03a 	or	r2,r16,r2
 800d7b0:	00000306 	br	800d7c0 <__udivdi3+0x148>
 800d7b4:	29c00e2e 	bgeu	r5,r7,800d7f0 <__udivdi3+0x178>
 800d7b8:	0007883a 	mov	r3,zero
 800d7bc:	0005883a 	mov	r2,zero
 800d7c0:	dfc00a17 	ldw	ra,40(sp)
 800d7c4:	df000917 	ldw	fp,36(sp)
 800d7c8:	ddc00817 	ldw	r23,32(sp)
 800d7cc:	dd800717 	ldw	r22,28(sp)
 800d7d0:	dd400617 	ldw	r21,24(sp)
 800d7d4:	dd000517 	ldw	r20,20(sp)
 800d7d8:	dcc00417 	ldw	r19,16(sp)
 800d7dc:	dc800317 	ldw	r18,12(sp)
 800d7e0:	dc400217 	ldw	r17,8(sp)
 800d7e4:	dc000117 	ldw	r16,4(sp)
 800d7e8:	dec00b04 	addi	sp,sp,44
 800d7ec:	f800283a 	ret
 800d7f0:	00bfffd4 	movui	r2,65535
 800d7f4:	11c05a2e 	bgeu	r2,r7,800d960 <__udivdi3+0x2e8>
 800d7f8:	00804034 	movhi	r2,256
 800d7fc:	3880dd36 	bltu	r7,r2,800db74 <__udivdi3+0x4fc>
 800d800:	3806d63a 	srli	r3,r7,24
 800d804:	01000604 	movi	r4,24
 800d808:	00820174 	movhi	r2,2053
 800d80c:	1885883a 	add	r2,r3,r2
 800d810:	10ff0203 	ldbu	r3,-1016(r2)
 800d814:	00800804 	movi	r2,32
 800d818:	1907883a 	add	r3,r3,r4
 800d81c:	10ebc83a 	sub	r21,r2,r3
 800d820:	10c0861e 	bne	r2,r3,800da3c <__udivdi3+0x3c4>
 800d824:	3c00d836 	bltu	r7,r16,800db88 <__udivdi3+0x510>
 800d828:	9985403a 	cmpgeu	r2,r19,r6
 800d82c:	0007883a 	mov	r3,zero
 800d830:	003fe306 	br	800d7c0 <__udivdi3+0x148>
 800d834:	3000041e 	bne	r6,zero,800d848 <__udivdi3+0x1d0>
 800d838:	000b883a 	mov	r5,zero
 800d83c:	01000044 	movi	r4,1
 800d840:	800e2300 	call	800e230 <__udivsi3>
 800d844:	1023883a 	mov	r17,r2
 800d848:	00bfffd4 	movui	r2,65535
 800d84c:	14403a2e 	bgeu	r2,r17,800d938 <__udivdi3+0x2c0>
 800d850:	00804034 	movhi	r2,256
 800d854:	8880d236 	bltu	r17,r2,800dba0 <__udivdi3+0x528>
 800d858:	8806d63a 	srli	r3,r17,24
 800d85c:	05000604 	movi	r20,24
 800d860:	00820174 	movhi	r2,2053
 800d864:	1885883a 	add	r2,r3,r2
 800d868:	10bf0203 	ldbu	r2,-1016(r2)
 800d86c:	00c00804 	movi	r3,32
 800d870:	1505883a 	add	r2,r2,r20
 800d874:	188dc83a 	sub	r6,r3,r2
 800d878:	18803e1e 	bne	r3,r2,800d974 <__udivdi3+0x2fc>
 800d87c:	882ad43a 	srli	r21,r17,16
 800d880:	8461c83a 	sub	r16,r16,r17
 800d884:	8cffffcc 	andi	r19,r17,65535
 800d888:	00c00044 	movi	r3,1
 800d88c:	8009883a 	mov	r4,r16
 800d890:	a80b883a 	mov	r5,r21
 800d894:	d8c00015 	stw	r3,0(sp)
 800d898:	800e2940 	call	800e294 <__umodsi3>
 800d89c:	8009883a 	mov	r4,r16
 800d8a0:	a80b883a 	mov	r5,r21
 800d8a4:	1021883a 	mov	r16,r2
 800d8a8:	800e2300 	call	800e230 <__udivsi3>
 800d8ac:	8020943a 	slli	r16,r16,16
 800d8b0:	9008d43a 	srli	r4,r18,16
 800d8b4:	1029883a 	mov	r20,r2
 800d8b8:	14c5383a 	mul	r2,r2,r19
 800d8bc:	8108b03a 	or	r4,r16,r4
 800d8c0:	d8c00017 	ldw	r3,0(sp)
 800d8c4:	2080052e 	bgeu	r4,r2,800d8dc <__udivdi3+0x264>
 800d8c8:	2449883a 	add	r4,r4,r17
 800d8cc:	a17fffc4 	addi	r5,r20,-1
 800d8d0:	24400136 	bltu	r4,r17,800d8d8 <__udivdi3+0x260>
 800d8d4:	2080c936 	bltu	r4,r2,800dbfc <__udivdi3+0x584>
 800d8d8:	2829883a 	mov	r20,r5
 800d8dc:	20a1c83a 	sub	r16,r4,r2
 800d8e0:	8009883a 	mov	r4,r16
 800d8e4:	a80b883a 	mov	r5,r21
 800d8e8:	d8c00015 	stw	r3,0(sp)
 800d8ec:	800e2940 	call	800e294 <__umodsi3>
 800d8f0:	8009883a 	mov	r4,r16
 800d8f4:	a80b883a 	mov	r5,r21
 800d8f8:	1021883a 	mov	r16,r2
 800d8fc:	8020943a 	slli	r16,r16,16
 800d900:	800e2300 	call	800e230 <__udivsi3>
 800d904:	14e7383a 	mul	r19,r2,r19
 800d908:	94bfffcc 	andi	r18,r18,65535
 800d90c:	84a4b03a 	or	r18,r16,r18
 800d910:	d8c00017 	ldw	r3,0(sp)
 800d914:	94c0052e 	bgeu	r18,r19,800d92c <__udivdi3+0x2b4>
 800d918:	8ca5883a 	add	r18,r17,r18
 800d91c:	113fffc4 	addi	r4,r2,-1
 800d920:	94400136 	bltu	r18,r17,800d928 <__udivdi3+0x2b0>
 800d924:	94c0ae36 	bltu	r18,r19,800dbe0 <__udivdi3+0x568>
 800d928:	2005883a 	mov	r2,r4
 800d92c:	a00c943a 	slli	r6,r20,16
 800d930:	3084b03a 	or	r2,r6,r2
 800d934:	003fa206 	br	800d7c0 <__udivdi3+0x148>
 800d938:	88804030 	cmpltui	r2,r17,256
 800d93c:	10009e1e 	bne	r2,zero,800dbb8 <__udivdi3+0x540>
 800d940:	8806d23a 	srli	r3,r17,8
 800d944:	05000204 	movi	r20,8
 800d948:	003fc506 	br	800d860 <__udivdi3+0x1e8>
 800d94c:	30804030 	cmpltui	r2,r6,256
 800d950:	10008b1e 	bne	r2,zero,800db80 <__udivdi3+0x508>
 800d954:	3006d23a 	srli	r3,r6,8
 800d958:	05000204 	movi	r20,8
 800d95c:	003f5f06 	br	800d6dc <__udivdi3+0x64>
 800d960:	38804030 	cmpltui	r2,r7,256
 800d964:	10008b1e 	bne	r2,zero,800db94 <__udivdi3+0x51c>
 800d968:	3806d23a 	srli	r3,r7,8
 800d96c:	01000204 	movi	r4,8
 800d970:	003fa506 	br	800d808 <__udivdi3+0x190>
 800d974:	89a2983a 	sll	r17,r17,r6
 800d978:	80acd83a 	srl	r22,r16,r2
 800d97c:	81a0983a 	sll	r16,r16,r6
 800d980:	882ad43a 	srli	r21,r17,16
 800d984:	9884d83a 	srl	r2,r19,r2
 800d988:	b009883a 	mov	r4,r22
 800d98c:	a80b883a 	mov	r5,r21
 800d990:	99a4983a 	sll	r18,r19,r6
 800d994:	1428b03a 	or	r20,r2,r16
 800d998:	800e2940 	call	800e294 <__umodsi3>
 800d99c:	b009883a 	mov	r4,r22
 800d9a0:	a80b883a 	mov	r5,r21
 800d9a4:	1021883a 	mov	r16,r2
 800d9a8:	800e2300 	call	800e230 <__udivsi3>
 800d9ac:	8008943a 	slli	r4,r16,16
 800d9b0:	a00ad43a 	srli	r5,r20,16
 800d9b4:	8cffffcc 	andi	r19,r17,65535
 800d9b8:	98a1383a 	mul	r16,r19,r2
 800d9bc:	2148b03a 	or	r4,r4,r5
 800d9c0:	102d883a 	mov	r22,r2
 800d9c4:	2400062e 	bgeu	r4,r16,800d9e0 <__udivdi3+0x368>
 800d9c8:	2449883a 	add	r4,r4,r17
 800d9cc:	10bfffc4 	addi	r2,r2,-1
 800d9d0:	24408136 	bltu	r4,r17,800dbd8 <__udivdi3+0x560>
 800d9d4:	2400802e 	bgeu	r4,r16,800dbd8 <__udivdi3+0x560>
 800d9d8:	b5bfff84 	addi	r22,r22,-2
 800d9dc:	2449883a 	add	r4,r4,r17
 800d9e0:	2421c83a 	sub	r16,r4,r16
 800d9e4:	8009883a 	mov	r4,r16
 800d9e8:	a80b883a 	mov	r5,r21
 800d9ec:	800e2940 	call	800e294 <__umodsi3>
 800d9f0:	8009883a 	mov	r4,r16
 800d9f4:	a80b883a 	mov	r5,r21
 800d9f8:	1021883a 	mov	r16,r2
 800d9fc:	8020943a 	slli	r16,r16,16
 800da00:	800e2300 	call	800e230 <__udivsi3>
 800da04:	9889383a 	mul	r4,r19,r2
 800da08:	a53fffcc 	andi	r20,r20,65535
 800da0c:	8520b03a 	or	r16,r16,r20
 800da10:	8100062e 	bgeu	r16,r4,800da2c <__udivdi3+0x3b4>
 800da14:	8461883a 	add	r16,r16,r17
 800da18:	10ffffc4 	addi	r3,r2,-1
 800da1c:	84406a36 	bltu	r16,r17,800dbc8 <__udivdi3+0x550>
 800da20:	8100692e 	bgeu	r16,r4,800dbc8 <__udivdi3+0x550>
 800da24:	10bfff84 	addi	r2,r2,-2
 800da28:	8461883a 	add	r16,r16,r17
 800da2c:	b006943a 	slli	r3,r22,16
 800da30:	8121c83a 	sub	r16,r16,r4
 800da34:	1886b03a 	or	r3,r3,r2
 800da38:	003f9406 	br	800d88c <__udivdi3+0x214>
 800da3c:	30ecd83a 	srl	r22,r6,r3
 800da40:	3d4e983a 	sll	r7,r7,r21
 800da44:	80e4d83a 	srl	r18,r16,r3
 800da48:	98e2d83a 	srl	r17,r19,r3
 800da4c:	b1ecb03a 	or	r22,r22,r7
 800da50:	b038d43a 	srli	fp,r22,16
 800da54:	8546983a 	sll	r3,r16,r21
 800da58:	9009883a 	mov	r4,r18
 800da5c:	e00b883a 	mov	r5,fp
 800da60:	88e2b03a 	or	r17,r17,r3
 800da64:	3568983a 	sll	r20,r6,r21
 800da68:	800e2940 	call	800e294 <__umodsi3>
 800da6c:	9009883a 	mov	r4,r18
 800da70:	e00b883a 	mov	r5,fp
 800da74:	1025883a 	mov	r18,r2
 800da78:	800e2300 	call	800e230 <__udivsi3>
 800da7c:	9008943a 	slli	r4,r18,16
 800da80:	8806d43a 	srli	r3,r17,16
 800da84:	b5ffffcc 	andi	r23,r22,65535
 800da88:	b8a5383a 	mul	r18,r23,r2
 800da8c:	20c8b03a 	or	r4,r4,r3
 800da90:	1021883a 	mov	r16,r2
 800da94:	2480062e 	bgeu	r4,r18,800dab0 <__udivdi3+0x438>
 800da98:	2589883a 	add	r4,r4,r22
 800da9c:	10bfffc4 	addi	r2,r2,-1
 800daa0:	25804b36 	bltu	r4,r22,800dbd0 <__udivdi3+0x558>
 800daa4:	24804a2e 	bgeu	r4,r18,800dbd0 <__udivdi3+0x558>
 800daa8:	843fff84 	addi	r16,r16,-2
 800daac:	2589883a 	add	r4,r4,r22
 800dab0:	24a5c83a 	sub	r18,r4,r18
 800dab4:	9009883a 	mov	r4,r18
 800dab8:	e00b883a 	mov	r5,fp
 800dabc:	800e2940 	call	800e294 <__umodsi3>
 800dac0:	9009883a 	mov	r4,r18
 800dac4:	e00b883a 	mov	r5,fp
 800dac8:	1025883a 	mov	r18,r2
 800dacc:	9024943a 	slli	r18,r18,16
 800dad0:	800e2300 	call	800e230 <__udivsi3>
 800dad4:	b8af383a 	mul	r23,r23,r2
 800dad8:	8c7fffcc 	andi	r17,r17,65535
 800dadc:	9462b03a 	or	r17,r18,r17
 800dae0:	8dc0062e 	bgeu	r17,r23,800dafc <__udivdi3+0x484>
 800dae4:	8da3883a 	add	r17,r17,r22
 800dae8:	10ffffc4 	addi	r3,r2,-1
 800daec:	8d803436 	bltu	r17,r22,800dbc0 <__udivdi3+0x548>
 800daf0:	8dc0332e 	bgeu	r17,r23,800dbc0 <__udivdi3+0x548>
 800daf4:	10bfff84 	addi	r2,r2,-2
 800daf8:	8da3883a 	add	r17,r17,r22
 800dafc:	8020943a 	slli	r16,r16,16
 800db00:	10ffffcc 	andi	r3,r2,65535
 800db04:	a00ed43a 	srli	r7,r20,16
 800db08:	8084b03a 	or	r2,r16,r2
 800db0c:	1008d43a 	srli	r4,r2,16
 800db10:	a1bfffcc 	andi	r6,r20,65535
 800db14:	1991383a 	mul	r8,r3,r6
 800db18:	218d383a 	mul	r6,r4,r6
 800db1c:	19c7383a 	mul	r3,r3,r7
 800db20:	400ad43a 	srli	r5,r8,16
 800db24:	21c9383a 	mul	r4,r4,r7
 800db28:	1987883a 	add	r3,r3,r6
 800db2c:	28c7883a 	add	r3,r5,r3
 800db30:	8de3c83a 	sub	r17,r17,r23
 800db34:	1980022e 	bgeu	r3,r6,800db40 <__udivdi3+0x4c8>
 800db38:	01400074 	movhi	r5,1
 800db3c:	2149883a 	add	r4,r4,r5
 800db40:	180ad43a 	srli	r5,r3,16
 800db44:	2909883a 	add	r4,r5,r4
 800db48:	89000836 	bltu	r17,r4,800db6c <__udivdi3+0x4f4>
 800db4c:	89000226 	beq	r17,r4,800db58 <__udivdi3+0x4e0>
 800db50:	0007883a 	mov	r3,zero
 800db54:	003f1a06 	br	800d7c0 <__udivdi3+0x148>
 800db58:	1806943a 	slli	r3,r3,16
 800db5c:	9d4c983a 	sll	r6,r19,r21
 800db60:	423fffcc 	andi	r8,r8,65535
 800db64:	1a07883a 	add	r3,r3,r8
 800db68:	30fff92e 	bgeu	r6,r3,800db50 <__udivdi3+0x4d8>
 800db6c:	10bfffc4 	addi	r2,r2,-1
 800db70:	003ff706 	br	800db50 <__udivdi3+0x4d8>
 800db74:	3806d43a 	srli	r3,r7,16
 800db78:	01000404 	movi	r4,16
 800db7c:	003f2206 	br	800d808 <__udivdi3+0x190>
 800db80:	3007883a 	mov	r3,r6
 800db84:	003ed506 	br	800d6dc <__udivdi3+0x64>
 800db88:	0007883a 	mov	r3,zero
 800db8c:	00800044 	movi	r2,1
 800db90:	003f0b06 	br	800d7c0 <__udivdi3+0x148>
 800db94:	3807883a 	mov	r3,r7
 800db98:	0009883a 	mov	r4,zero
 800db9c:	003f1a06 	br	800d808 <__udivdi3+0x190>
 800dba0:	8806d43a 	srli	r3,r17,16
 800dba4:	05000404 	movi	r20,16
 800dba8:	003f2d06 	br	800d860 <__udivdi3+0x1e8>
 800dbac:	3006d43a 	srli	r3,r6,16
 800dbb0:	05000404 	movi	r20,16
 800dbb4:	003ec906 	br	800d6dc <__udivdi3+0x64>
 800dbb8:	8807883a 	mov	r3,r17
 800dbbc:	003f2806 	br	800d860 <__udivdi3+0x1e8>
 800dbc0:	1805883a 	mov	r2,r3
 800dbc4:	003fcd06 	br	800dafc <__udivdi3+0x484>
 800dbc8:	1805883a 	mov	r2,r3
 800dbcc:	003f9706 	br	800da2c <__udivdi3+0x3b4>
 800dbd0:	1021883a 	mov	r16,r2
 800dbd4:	003fb606 	br	800dab0 <__udivdi3+0x438>
 800dbd8:	102d883a 	mov	r22,r2
 800dbdc:	003f8006 	br	800d9e0 <__udivdi3+0x368>
 800dbe0:	10bfff84 	addi	r2,r2,-2
 800dbe4:	003f5106 	br	800d92c <__udivdi3+0x2b4>
 800dbe8:	10bfff84 	addi	r2,r2,-2
 800dbec:	003eed06 	br	800d7a4 <__udivdi3+0x12c>
 800dbf0:	843fff84 	addi	r16,r16,-2
 800dbf4:	2449883a 	add	r4,r4,r17
 800dbf8:	003ed806 	br	800d75c <__udivdi3+0xe4>
 800dbfc:	a53fff84 	addi	r20,r20,-2
 800dc00:	2449883a 	add	r4,r4,r17
 800dc04:	003f3506 	br	800d8dc <__udivdi3+0x264>

0800dc08 <__umoddi3>:
 800dc08:	defff504 	addi	sp,sp,-44
 800dc0c:	dc400215 	stw	r17,8(sp)
 800dc10:	dc000115 	stw	r16,4(sp)
 800dc14:	dfc00a15 	stw	ra,40(sp)
 800dc18:	df000915 	stw	fp,36(sp)
 800dc1c:	ddc00815 	stw	r23,32(sp)
 800dc20:	dd800715 	stw	r22,28(sp)
 800dc24:	dd400615 	stw	r21,24(sp)
 800dc28:	dd000515 	stw	r20,20(sp)
 800dc2c:	dcc00415 	stw	r19,16(sp)
 800dc30:	dc800315 	stw	r18,12(sp)
 800dc34:	2823883a 	mov	r17,r5
 800dc38:	2021883a 	mov	r16,r4
 800dc3c:	3800371e 	bne	r7,zero,800dd1c <__umoddi3+0x114>
 800dc40:	3825883a 	mov	r18,r7
 800dc44:	3029883a 	mov	r20,r6
 800dc48:	2027883a 	mov	r19,r4
 800dc4c:	2980572e 	bgeu	r5,r6,800ddac <__umoddi3+0x1a4>
 800dc50:	00bfffd4 	movui	r2,65535
 800dc54:	282b883a 	mov	r21,r5
 800dc58:	1180922e 	bgeu	r2,r6,800dea4 <__umoddi3+0x29c>
 800dc5c:	00804034 	movhi	r2,256
 800dc60:	30812036 	bltu	r6,r2,800e0e4 <__umoddi3+0x4dc>
 800dc64:	3006d63a 	srli	r3,r6,24
 800dc68:	04800604 	movi	r18,24
 800dc6c:	00820174 	movhi	r2,2053
 800dc70:	1885883a 	add	r2,r3,r2
 800dc74:	10bf0203 	ldbu	r2,-1016(r2)
 800dc78:	00c00804 	movi	r3,32
 800dc7c:	1485883a 	add	r2,r2,r18
 800dc80:	18a5c83a 	sub	r18,r3,r2
 800dc84:	18800526 	beq	r3,r2,800dc9c <__umoddi3+0x94>
 800dc88:	8ca2983a 	sll	r17,r17,r18
 800dc8c:	8084d83a 	srl	r2,r16,r2
 800dc90:	34a8983a 	sll	r20,r6,r18
 800dc94:	84a6983a 	sll	r19,r16,r18
 800dc98:	146ab03a 	or	r21,r2,r17
 800dc9c:	a02ed43a 	srli	r23,r20,16
 800dca0:	a809883a 	mov	r4,r21
 800dca4:	a43fffcc 	andi	r16,r20,65535
 800dca8:	b80b883a 	mov	r5,r23
 800dcac:	800e2940 	call	800e294 <__umodsi3>
 800dcb0:	a809883a 	mov	r4,r21
 800dcb4:	b80b883a 	mov	r5,r23
 800dcb8:	102d883a 	mov	r22,r2
 800dcbc:	800e2300 	call	800e230 <__udivsi3>
 800dcc0:	b02c943a 	slli	r22,r22,16
 800dcc4:	9808d43a 	srli	r4,r19,16
 800dcc8:	80ab383a 	mul	r21,r16,r2
 800dccc:	b108b03a 	or	r4,r22,r4
 800dcd0:	2540042e 	bgeu	r4,r21,800dce4 <__umoddi3+0xdc>
 800dcd4:	2509883a 	add	r4,r4,r20
 800dcd8:	25000236 	bltu	r4,r20,800dce4 <__umoddi3+0xdc>
 800dcdc:	2540012e 	bgeu	r4,r21,800dce4 <__umoddi3+0xdc>
 800dce0:	2509883a 	add	r4,r4,r20
 800dce4:	256bc83a 	sub	r21,r4,r21
 800dce8:	b80b883a 	mov	r5,r23
 800dcec:	a809883a 	mov	r4,r21
 800dcf0:	800e2940 	call	800e294 <__umodsi3>
 800dcf4:	1023883a 	mov	r17,r2
 800dcf8:	b80b883a 	mov	r5,r23
 800dcfc:	a809883a 	mov	r4,r21
 800dd00:	800e2300 	call	800e230 <__udivsi3>
 800dd04:	8822943a 	slli	r17,r17,16
 800dd08:	8085383a 	mul	r2,r16,r2
 800dd0c:	98ffffcc 	andi	r3,r19,65535
 800dd10:	88c6b03a 	or	r3,r17,r3
 800dd14:	18805a2e 	bgeu	r3,r2,800de80 <__umoddi3+0x278>
 800dd18:	00005506 	br	800de70 <__umoddi3+0x268>
 800dd1c:	2005883a 	mov	r2,r4
 800dd20:	29c00d2e 	bgeu	r5,r7,800dd58 <__umoddi3+0x150>
 800dd24:	2807883a 	mov	r3,r5
 800dd28:	dfc00a17 	ldw	ra,40(sp)
 800dd2c:	df000917 	ldw	fp,36(sp)
 800dd30:	ddc00817 	ldw	r23,32(sp)
 800dd34:	dd800717 	ldw	r22,28(sp)
 800dd38:	dd400617 	ldw	r21,24(sp)
 800dd3c:	dd000517 	ldw	r20,20(sp)
 800dd40:	dcc00417 	ldw	r19,16(sp)
 800dd44:	dc800317 	ldw	r18,12(sp)
 800dd48:	dc400217 	ldw	r17,8(sp)
 800dd4c:	dc000117 	ldw	r16,4(sp)
 800dd50:	dec00b04 	addi	sp,sp,44
 800dd54:	f800283a 	ret
 800dd58:	013fffd4 	movui	r4,65535
 800dd5c:	2807883a 	mov	r3,r5
 800dd60:	21c0552e 	bgeu	r4,r7,800deb8 <__umoddi3+0x2b0>
 800dd64:	01004034 	movhi	r4,256
 800dd68:	3900e336 	bltu	r7,r4,800e0f8 <__umoddi3+0x4f0>
 800dd6c:	3808d63a 	srli	r4,r7,24
 800dd70:	02000604 	movi	r8,24
 800dd74:	01420174 	movhi	r5,2053
 800dd78:	214b883a 	add	r5,r4,r5
 800dd7c:	2d7f0203 	ldbu	r21,-1016(r5)
 800dd80:	01000804 	movi	r4,32
 800dd84:	aa2b883a 	add	r21,r21,r8
 800dd88:	2569c83a 	sub	r20,r4,r21
 800dd8c:	25404f1e 	bne	r4,r21,800decc <__umoddi3+0x2c4>
 800dd90:	3c400136 	bltu	r7,r17,800dd98 <__umoddi3+0x190>
 800dd94:	81bfe436 	bltu	r16,r6,800dd28 <__umoddi3+0x120>
 800dd98:	8185c83a 	sub	r2,r16,r6
 800dd9c:	89cfc83a 	sub	r7,r17,r7
 800dda0:	8087803a 	cmpltu	r3,r16,r2
 800dda4:	38c7c83a 	sub	r3,r7,r3
 800dda8:	003fdf06 	br	800dd28 <__umoddi3+0x120>
 800ddac:	3000041e 	bne	r6,zero,800ddc0 <__umoddi3+0x1b8>
 800ddb0:	000b883a 	mov	r5,zero
 800ddb4:	01000044 	movi	r4,1
 800ddb8:	800e2300 	call	800e230 <__udivsi3>
 800ddbc:	1029883a 	mov	r20,r2
 800ddc0:	00bfffd4 	movui	r2,65535
 800ddc4:	1500322e 	bgeu	r2,r20,800de90 <__umoddi3+0x288>
 800ddc8:	00804034 	movhi	r2,256
 800ddcc:	a080cd36 	bltu	r20,r2,800e104 <__umoddi3+0x4fc>
 800ddd0:	a006d63a 	srli	r3,r20,24
 800ddd4:	04800604 	movi	r18,24
 800ddd8:	00820174 	movhi	r2,2053
 800dddc:	1885883a 	add	r2,r3,r2
 800dde0:	15bf0203 	ldbu	r22,-1016(r2)
 800dde4:	00800804 	movi	r2,32
 800dde8:	b4ad883a 	add	r22,r22,r18
 800ddec:	15a5c83a 	sub	r18,r2,r22
 800ddf0:	15808a1e 	bne	r2,r22,800e01c <__umoddi3+0x414>
 800ddf4:	a02ed43a 	srli	r23,r20,16
 800ddf8:	8d23c83a 	sub	r17,r17,r20
 800ddfc:	a57fffcc 	andi	r21,r20,65535
 800de00:	b80b883a 	mov	r5,r23
 800de04:	8809883a 	mov	r4,r17
 800de08:	800e2940 	call	800e294 <__umodsi3>
 800de0c:	8809883a 	mov	r4,r17
 800de10:	b80b883a 	mov	r5,r23
 800de14:	102d883a 	mov	r22,r2
 800de18:	800e2300 	call	800e230 <__udivsi3>
 800de1c:	b02c943a 	slli	r22,r22,16
 800de20:	9808d43a 	srli	r4,r19,16
 800de24:	1561383a 	mul	r16,r2,r21
 800de28:	b108b03a 	or	r4,r22,r4
 800de2c:	2400032e 	bgeu	r4,r16,800de3c <__umoddi3+0x234>
 800de30:	2509883a 	add	r4,r4,r20
 800de34:	25000136 	bltu	r4,r20,800de3c <__umoddi3+0x234>
 800de38:	2400be36 	bltu	r4,r16,800e134 <__umoddi3+0x52c>
 800de3c:	2421c83a 	sub	r16,r4,r16
 800de40:	b80b883a 	mov	r5,r23
 800de44:	8009883a 	mov	r4,r16
 800de48:	800e2940 	call	800e294 <__umodsi3>
 800de4c:	1023883a 	mov	r17,r2
 800de50:	b80b883a 	mov	r5,r23
 800de54:	8009883a 	mov	r4,r16
 800de58:	800e2300 	call	800e230 <__udivsi3>
 800de5c:	8822943a 	slli	r17,r17,16
 800de60:	1545383a 	mul	r2,r2,r21
 800de64:	9cffffcc 	andi	r19,r19,65535
 800de68:	8cc6b03a 	or	r3,r17,r19
 800de6c:	1880042e 	bgeu	r3,r2,800de80 <__umoddi3+0x278>
 800de70:	1d07883a 	add	r3,r3,r20
 800de74:	1d000236 	bltu	r3,r20,800de80 <__umoddi3+0x278>
 800de78:	1880012e 	bgeu	r3,r2,800de80 <__umoddi3+0x278>
 800de7c:	1d07883a 	add	r3,r3,r20
 800de80:	1885c83a 	sub	r2,r3,r2
 800de84:	1484d83a 	srl	r2,r2,r18
 800de88:	0007883a 	mov	r3,zero
 800de8c:	003fa606 	br	800dd28 <__umoddi3+0x120>
 800de90:	a0804030 	cmpltui	r2,r20,256
 800de94:	10009e1e 	bne	r2,zero,800e110 <__umoddi3+0x508>
 800de98:	a006d23a 	srli	r3,r20,8
 800de9c:	04800204 	movi	r18,8
 800dea0:	003fcd06 	br	800ddd8 <__umoddi3+0x1d0>
 800dea4:	30804030 	cmpltui	r2,r6,256
 800dea8:	1000911e 	bne	r2,zero,800e0f0 <__umoddi3+0x4e8>
 800deac:	3006d23a 	srli	r3,r6,8
 800deb0:	04800204 	movi	r18,8
 800deb4:	003f6d06 	br	800dc6c <__umoddi3+0x64>
 800deb8:	39004030 	cmpltui	r4,r7,256
 800debc:	2000961e 	bne	r4,zero,800e118 <__umoddi3+0x510>
 800dec0:	3808d23a 	srli	r4,r7,8
 800dec4:	02000204 	movi	r8,8
 800dec8:	003faa06 	br	800dd74 <__umoddi3+0x16c>
 800decc:	3d0e983a 	sll	r7,r7,r20
 800ded0:	3544d83a 	srl	r2,r6,r21
 800ded4:	8d64d83a 	srl	r18,r17,r21
 800ded8:	8d22983a 	sll	r17,r17,r20
 800dedc:	11eeb03a 	or	r23,r2,r7
 800dee0:	b838d43a 	srli	fp,r23,16
 800dee4:	8544d83a 	srl	r2,r16,r21
 800dee8:	9009883a 	mov	r4,r18
 800deec:	e00b883a 	mov	r5,fp
 800def0:	3526983a 	sll	r19,r6,r20
 800def4:	1462b03a 	or	r17,r2,r17
 800def8:	800e2940 	call	800e294 <__umodsi3>
 800defc:	9009883a 	mov	r4,r18
 800df00:	e00b883a 	mov	r5,fp
 800df04:	1025883a 	mov	r18,r2
 800df08:	800e2300 	call	800e230 <__udivsi3>
 800df0c:	9008943a 	slli	r4,r18,16
 800df10:	8806d43a 	srli	r3,r17,16
 800df14:	b9ffffcc 	andi	r7,r23,65535
 800df18:	38a5383a 	mul	r18,r7,r2
 800df1c:	20c8b03a 	or	r4,r4,r3
 800df20:	8520983a 	sll	r16,r16,r20
 800df24:	102d883a 	mov	r22,r2
 800df28:	2480062e 	bgeu	r4,r18,800df44 <__umoddi3+0x33c>
 800df2c:	25c9883a 	add	r4,r4,r23
 800df30:	10bfffc4 	addi	r2,r2,-1
 800df34:	25c07d36 	bltu	r4,r23,800e12c <__umoddi3+0x524>
 800df38:	24807c2e 	bgeu	r4,r18,800e12c <__umoddi3+0x524>
 800df3c:	b5bfff84 	addi	r22,r22,-2
 800df40:	25c9883a 	add	r4,r4,r23
 800df44:	24a5c83a 	sub	r18,r4,r18
 800df48:	9009883a 	mov	r4,r18
 800df4c:	e00b883a 	mov	r5,fp
 800df50:	d9c00015 	stw	r7,0(sp)
 800df54:	800e2940 	call	800e294 <__umodsi3>
 800df58:	9009883a 	mov	r4,r18
 800df5c:	e00b883a 	mov	r5,fp
 800df60:	1025883a 	mov	r18,r2
 800df64:	800e2300 	call	800e230 <__udivsi3>
 800df68:	d9c00017 	ldw	r7,0(sp)
 800df6c:	9024943a 	slli	r18,r18,16
 800df70:	8c7fffcc 	andi	r17,r17,65535
 800df74:	388f383a 	mul	r7,r7,r2
 800df78:	9448b03a 	or	r4,r18,r17
 800df7c:	21c0062e 	bgeu	r4,r7,800df98 <__umoddi3+0x390>
 800df80:	25c9883a 	add	r4,r4,r23
 800df84:	10ffffc4 	addi	r3,r2,-1
 800df88:	25c06636 	bltu	r4,r23,800e124 <__umoddi3+0x51c>
 800df8c:	21c0652e 	bgeu	r4,r7,800e124 <__umoddi3+0x51c>
 800df90:	10bfff84 	addi	r2,r2,-2
 800df94:	25c9883a 	add	r4,r4,r23
 800df98:	b00a943a 	slli	r5,r22,16
 800df9c:	11bfffcc 	andi	r6,r2,65535
 800dfa0:	9806d43a 	srli	r3,r19,16
 800dfa4:	2884b03a 	or	r2,r5,r2
 800dfa8:	102cd43a 	srli	r22,r2,16
 800dfac:	997fffcc 	andi	r5,r19,65535
 800dfb0:	3151383a 	mul	r8,r6,r5
 800dfb4:	b14b383a 	mul	r5,r22,r5
 800dfb8:	30cd383a 	mul	r6,r6,r3
 800dfbc:	4004d43a 	srli	r2,r8,16
 800dfc0:	b0ed383a 	mul	r22,r22,r3
 800dfc4:	314d883a 	add	r6,r6,r5
 800dfc8:	1185883a 	add	r2,r2,r6
 800dfcc:	21c9c83a 	sub	r4,r4,r7
 800dfd0:	1140022e 	bgeu	r2,r5,800dfdc <__umoddi3+0x3d4>
 800dfd4:	00c00074 	movhi	r3,1
 800dfd8:	b0ed883a 	add	r22,r22,r3
 800dfdc:	1006d43a 	srli	r3,r2,16
 800dfe0:	1004943a 	slli	r2,r2,16
 800dfe4:	423fffcc 	andi	r8,r8,65535
 800dfe8:	1dad883a 	add	r22,r3,r22
 800dfec:	1205883a 	add	r2,r2,r8
 800dff0:	25803636 	bltu	r4,r22,800e0cc <__umoddi3+0x4c4>
 800dff4:	25803426 	beq	r4,r22,800e0c8 <__umoddi3+0x4c0>
 800dff8:	8085c83a 	sub	r2,r16,r2
 800dffc:	8087803a 	cmpltu	r3,r16,r2
 800e000:	2589c83a 	sub	r4,r4,r22
 800e004:	20c7c83a 	sub	r3,r4,r3
 800e008:	1d60983a 	sll	r16,r3,r21
 800e00c:	1504d83a 	srl	r2,r2,r20
 800e010:	1d06d83a 	srl	r3,r3,r20
 800e014:	8084b03a 	or	r2,r16,r2
 800e018:	003f4306 	br	800dd28 <__umoddi3+0x120>
 800e01c:	a4a8983a 	sll	r20,r20,r18
 800e020:	8daad83a 	srl	r21,r17,r22
 800e024:	8ca2983a 	sll	r17,r17,r18
 800e028:	a02ed43a 	srli	r23,r20,16
 800e02c:	a809883a 	mov	r4,r21
 800e030:	85acd83a 	srl	r22,r16,r22
 800e034:	b80b883a 	mov	r5,r23
 800e038:	800e2940 	call	800e294 <__umodsi3>
 800e03c:	a809883a 	mov	r4,r21
 800e040:	b80b883a 	mov	r5,r23
 800e044:	b46cb03a 	or	r22,r22,r17
 800e048:	1027883a 	mov	r19,r2
 800e04c:	800e2300 	call	800e230 <__udivsi3>
 800e050:	9826943a 	slli	r19,r19,16
 800e054:	b008d43a 	srli	r4,r22,16
 800e058:	a57fffcc 	andi	r21,r20,65535
 800e05c:	a8a3383a 	mul	r17,r21,r2
 800e060:	9908b03a 	or	r4,r19,r4
 800e064:	84a6983a 	sll	r19,r16,r18
 800e068:	2440042e 	bgeu	r4,r17,800e07c <__umoddi3+0x474>
 800e06c:	2509883a 	add	r4,r4,r20
 800e070:	25000236 	bltu	r4,r20,800e07c <__umoddi3+0x474>
 800e074:	2440012e 	bgeu	r4,r17,800e07c <__umoddi3+0x474>
 800e078:	2509883a 	add	r4,r4,r20
 800e07c:	2463c83a 	sub	r17,r4,r17
 800e080:	8809883a 	mov	r4,r17
 800e084:	b80b883a 	mov	r5,r23
 800e088:	800e2940 	call	800e294 <__umodsi3>
 800e08c:	1021883a 	mov	r16,r2
 800e090:	8809883a 	mov	r4,r17
 800e094:	b80b883a 	mov	r5,r23
 800e098:	8020943a 	slli	r16,r16,16
 800e09c:	800e2300 	call	800e230 <__udivsi3>
 800e0a0:	a885383a 	mul	r2,r21,r2
 800e0a4:	b47fffcc 	andi	r17,r22,65535
 800e0a8:	8462b03a 	or	r17,r16,r17
 800e0ac:	8880042e 	bgeu	r17,r2,800e0c0 <__umoddi3+0x4b8>
 800e0b0:	8d23883a 	add	r17,r17,r20
 800e0b4:	8d000236 	bltu	r17,r20,800e0c0 <__umoddi3+0x4b8>
 800e0b8:	8880012e 	bgeu	r17,r2,800e0c0 <__umoddi3+0x4b8>
 800e0bc:	8d23883a 	add	r17,r17,r20
 800e0c0:	88a3c83a 	sub	r17,r17,r2
 800e0c4:	003f4e06 	br	800de00 <__umoddi3+0x1f8>
 800e0c8:	80bfcb2e 	bgeu	r16,r2,800dff8 <__umoddi3+0x3f0>
 800e0cc:	14e7c83a 	sub	r19,r2,r19
 800e0d0:	14c5803a 	cmpltu	r2,r2,r19
 800e0d4:	15c5883a 	add	r2,r2,r23
 800e0d8:	b0adc83a 	sub	r22,r22,r2
 800e0dc:	9805883a 	mov	r2,r19
 800e0e0:	003fc506 	br	800dff8 <__umoddi3+0x3f0>
 800e0e4:	3006d43a 	srli	r3,r6,16
 800e0e8:	04800404 	movi	r18,16
 800e0ec:	003edf06 	br	800dc6c <__umoddi3+0x64>
 800e0f0:	3007883a 	mov	r3,r6
 800e0f4:	003edd06 	br	800dc6c <__umoddi3+0x64>
 800e0f8:	3808d43a 	srli	r4,r7,16
 800e0fc:	02000404 	movi	r8,16
 800e100:	003f1c06 	br	800dd74 <__umoddi3+0x16c>
 800e104:	a006d43a 	srli	r3,r20,16
 800e108:	04800404 	movi	r18,16
 800e10c:	003f3206 	br	800ddd8 <__umoddi3+0x1d0>
 800e110:	a007883a 	mov	r3,r20
 800e114:	003f3006 	br	800ddd8 <__umoddi3+0x1d0>
 800e118:	3809883a 	mov	r4,r7
 800e11c:	0011883a 	mov	r8,zero
 800e120:	003f1406 	br	800dd74 <__umoddi3+0x16c>
 800e124:	1805883a 	mov	r2,r3
 800e128:	003f9b06 	br	800df98 <__umoddi3+0x390>
 800e12c:	102d883a 	mov	r22,r2
 800e130:	003f8406 	br	800df44 <__umoddi3+0x33c>
 800e134:	2509883a 	add	r4,r4,r20
 800e138:	003f4006 	br	800de3c <__umoddi3+0x234>

0800e13c <__divsi3>:
 800e13c:	20001a16 	blt	r4,zero,800e1a8 <__divsi3+0x6c>
 800e140:	000f883a 	mov	r7,zero
 800e144:	2800020e 	bge	r5,zero,800e150 <__divsi3+0x14>
 800e148:	014bc83a 	sub	r5,zero,r5
 800e14c:	39c0005c 	xori	r7,r7,1
 800e150:	200d883a 	mov	r6,r4
 800e154:	00c00044 	movi	r3,1
 800e158:	2900092e 	bgeu	r5,r4,800e180 <__divsi3+0x44>
 800e15c:	00800804 	movi	r2,32
 800e160:	00c00044 	movi	r3,1
 800e164:	00000106 	br	800e16c <__divsi3+0x30>
 800e168:	10001226 	beq	r2,zero,800e1b4 <__divsi3+0x78>
 800e16c:	294b883a 	add	r5,r5,r5
 800e170:	10bfffc4 	addi	r2,r2,-1
 800e174:	18c7883a 	add	r3,r3,r3
 800e178:	293ffb36 	bltu	r5,r4,800e168 <__divsi3+0x2c>
 800e17c:	18000d26 	beq	r3,zero,800e1b4 <__divsi3+0x78>
 800e180:	0005883a 	mov	r2,zero
 800e184:	31400236 	bltu	r6,r5,800e190 <__divsi3+0x54>
 800e188:	314dc83a 	sub	r6,r6,r5
 800e18c:	10c4b03a 	or	r2,r2,r3
 800e190:	1806d07a 	srli	r3,r3,1
 800e194:	280ad07a 	srli	r5,r5,1
 800e198:	183ffa1e 	bne	r3,zero,800e184 <__divsi3+0x48>
 800e19c:	38000126 	beq	r7,zero,800e1a4 <__divsi3+0x68>
 800e1a0:	0085c83a 	sub	r2,zero,r2
 800e1a4:	f800283a 	ret
 800e1a8:	0109c83a 	sub	r4,zero,r4
 800e1ac:	01c00044 	movi	r7,1
 800e1b0:	003fe406 	br	800e144 <__divsi3+0x8>
 800e1b4:	0005883a 	mov	r2,zero
 800e1b8:	003ff806 	br	800e19c <__divsi3+0x60>

0800e1bc <__modsi3>:
 800e1bc:	20001916 	blt	r4,zero,800e224 <__modsi3+0x68>
 800e1c0:	000f883a 	mov	r7,zero
 800e1c4:	2005883a 	mov	r2,r4
 800e1c8:	2800010e 	bge	r5,zero,800e1d0 <__modsi3+0x14>
 800e1cc:	014bc83a 	sub	r5,zero,r5
 800e1d0:	00c00044 	movi	r3,1
 800e1d4:	2900092e 	bgeu	r5,r4,800e1fc <__modsi3+0x40>
 800e1d8:	01800804 	movi	r6,32
 800e1dc:	00c00044 	movi	r3,1
 800e1e0:	00000106 	br	800e1e8 <__modsi3+0x2c>
 800e1e4:	30000d26 	beq	r6,zero,800e21c <__modsi3+0x60>
 800e1e8:	294b883a 	add	r5,r5,r5
 800e1ec:	31bfffc4 	addi	r6,r6,-1
 800e1f0:	18c7883a 	add	r3,r3,r3
 800e1f4:	293ffb36 	bltu	r5,r4,800e1e4 <__modsi3+0x28>
 800e1f8:	18000826 	beq	r3,zero,800e21c <__modsi3+0x60>
 800e1fc:	1806d07a 	srli	r3,r3,1
 800e200:	11400136 	bltu	r2,r5,800e208 <__modsi3+0x4c>
 800e204:	1145c83a 	sub	r2,r2,r5
 800e208:	280ad07a 	srli	r5,r5,1
 800e20c:	183ffb1e 	bne	r3,zero,800e1fc <__modsi3+0x40>
 800e210:	38000126 	beq	r7,zero,800e218 <__modsi3+0x5c>
 800e214:	0085c83a 	sub	r2,zero,r2
 800e218:	f800283a 	ret
 800e21c:	2005883a 	mov	r2,r4
 800e220:	003ffb06 	br	800e210 <__modsi3+0x54>
 800e224:	0109c83a 	sub	r4,zero,r4
 800e228:	01c00044 	movi	r7,1
 800e22c:	003fe506 	br	800e1c4 <__modsi3+0x8>

0800e230 <__udivsi3>:
 800e230:	200d883a 	mov	r6,r4
 800e234:	2900152e 	bgeu	r5,r4,800e28c <__udivsi3+0x5c>
 800e238:	28001416 	blt	r5,zero,800e28c <__udivsi3+0x5c>
 800e23c:	00800804 	movi	r2,32
 800e240:	00c00044 	movi	r3,1
 800e244:	00000206 	br	800e250 <__udivsi3+0x20>
 800e248:	10000e26 	beq	r2,zero,800e284 <__udivsi3+0x54>
 800e24c:	28000516 	blt	r5,zero,800e264 <__udivsi3+0x34>
 800e250:	294b883a 	add	r5,r5,r5
 800e254:	10bfffc4 	addi	r2,r2,-1
 800e258:	18c7883a 	add	r3,r3,r3
 800e25c:	293ffa36 	bltu	r5,r4,800e248 <__udivsi3+0x18>
 800e260:	18000826 	beq	r3,zero,800e284 <__udivsi3+0x54>
 800e264:	0005883a 	mov	r2,zero
 800e268:	31400236 	bltu	r6,r5,800e274 <__udivsi3+0x44>
 800e26c:	314dc83a 	sub	r6,r6,r5
 800e270:	10c4b03a 	or	r2,r2,r3
 800e274:	1806d07a 	srli	r3,r3,1
 800e278:	280ad07a 	srli	r5,r5,1
 800e27c:	183ffa1e 	bne	r3,zero,800e268 <__udivsi3+0x38>
 800e280:	f800283a 	ret
 800e284:	0005883a 	mov	r2,zero
 800e288:	f800283a 	ret
 800e28c:	00c00044 	movi	r3,1
 800e290:	003ff406 	br	800e264 <__udivsi3+0x34>

0800e294 <__umodsi3>:
 800e294:	2005883a 	mov	r2,r4
 800e298:	2900132e 	bgeu	r5,r4,800e2e8 <__umodsi3+0x54>
 800e29c:	28001216 	blt	r5,zero,800e2e8 <__umodsi3+0x54>
 800e2a0:	01800804 	movi	r6,32
 800e2a4:	00c00044 	movi	r3,1
 800e2a8:	00000206 	br	800e2b4 <__umodsi3+0x20>
 800e2ac:	30000c26 	beq	r6,zero,800e2e0 <__umodsi3+0x4c>
 800e2b0:	28000516 	blt	r5,zero,800e2c8 <__umodsi3+0x34>
 800e2b4:	294b883a 	add	r5,r5,r5
 800e2b8:	31bfffc4 	addi	r6,r6,-1
 800e2bc:	18c7883a 	add	r3,r3,r3
 800e2c0:	293ffa36 	bltu	r5,r4,800e2ac <__umodsi3+0x18>
 800e2c4:	18000626 	beq	r3,zero,800e2e0 <__umodsi3+0x4c>
 800e2c8:	1806d07a 	srli	r3,r3,1
 800e2cc:	11400136 	bltu	r2,r5,800e2d4 <__umodsi3+0x40>
 800e2d0:	1145c83a 	sub	r2,r2,r5
 800e2d4:	280ad07a 	srli	r5,r5,1
 800e2d8:	183ffb1e 	bne	r3,zero,800e2c8 <__umodsi3+0x34>
 800e2dc:	f800283a 	ret
 800e2e0:	2005883a 	mov	r2,r4
 800e2e4:	f800283a 	ret
 800e2e8:	00c00044 	movi	r3,1
 800e2ec:	003ff606 	br	800e2c8 <__umodsi3+0x34>

0800e2f0 <__adddf3>:
 800e2f0:	02000434 	movhi	r8,16
 800e2f4:	423fffc4 	addi	r8,r8,-1
 800e2f8:	3a12703a 	and	r9,r7,r8
 800e2fc:	2a06703a 	and	r3,r5,r8
 800e300:	2818d53a 	srli	r12,r5,20
 800e304:	3804d53a 	srli	r2,r7,20
 800e308:	481490fa 	slli	r10,r9,3
 800e30c:	280ad7fa 	srli	r5,r5,31
 800e310:	180690fa 	slli	r3,r3,3
 800e314:	2016d77a 	srli	r11,r4,29
 800e318:	3012d77a 	srli	r9,r6,29
 800e31c:	380ed7fa 	srli	r7,r7,31
 800e320:	defffb04 	addi	sp,sp,-20
 800e324:	dc400115 	stw	r17,4(sp)
 800e328:	dc000015 	stw	r16,0(sp)
 800e32c:	dfc00415 	stw	ra,16(sp)
 800e330:	dcc00315 	stw	r19,12(sp)
 800e334:	dc800215 	stw	r18,8(sp)
 800e338:	201c90fa 	slli	r14,r4,3
 800e33c:	301a90fa 	slli	r13,r6,3
 800e340:	6441ffcc 	andi	r17,r12,2047
 800e344:	2821883a 	mov	r16,r5
 800e348:	58c6b03a 	or	r3,r11,r3
 800e34c:	1081ffcc 	andi	r2,r2,2047
 800e350:	4a92b03a 	or	r9,r9,r10
 800e354:	29c06326 	beq	r5,r7,800e4e4 <__adddf3+0x1f4>
 800e358:	888bc83a 	sub	r5,r17,r2
 800e35c:	0140560e 	bge	zero,r5,800e4b8 <__adddf3+0x1c8>
 800e360:	10007526 	beq	r2,zero,800e538 <__adddf3+0x248>
 800e364:	8881ffd8 	cmpnei	r2,r17,2047
 800e368:	10012d26 	beq	r2,zero,800e820 <__adddf3+0x530>
 800e36c:	4a402034 	orhi	r9,r9,128
 800e370:	28800e48 	cmpgei	r2,r5,57
 800e374:	1000f41e 	bne	r2,zero,800e748 <__adddf3+0x458>
 800e378:	28800808 	cmpgei	r2,r5,32
 800e37c:	1001471e 	bne	r2,zero,800e89c <__adddf3+0x5ac>
 800e380:	00800804 	movi	r2,32
 800e384:	1145c83a 	sub	r2,r2,r5
 800e388:	6948d83a 	srl	r4,r13,r5
 800e38c:	48a4983a 	sll	r18,r9,r2
 800e390:	6884983a 	sll	r2,r13,r2
 800e394:	494ad83a 	srl	r5,r9,r5
 800e398:	9124b03a 	or	r18,r18,r4
 800e39c:	101ac03a 	cmpne	r13,r2,zero
 800e3a0:	9364b03a 	or	r18,r18,r13
 800e3a4:	1947c83a 	sub	r3,r3,r5
 800e3a8:	74a5c83a 	sub	r18,r14,r18
 800e3ac:	7489803a 	cmpltu	r4,r14,r18
 800e3b0:	1909c83a 	sub	r4,r3,r4
 800e3b4:	2080202c 	andhi	r2,r4,128
 800e3b8:	10008626 	beq	r2,zero,800e5d4 <__adddf3+0x2e4>
 800e3bc:	00802034 	movhi	r2,128
 800e3c0:	10bfffc4 	addi	r2,r2,-1
 800e3c4:	20a6703a 	and	r19,r4,r2
 800e3c8:	9800d626 	beq	r19,zero,800e724 <__adddf3+0x434>
 800e3cc:	9809883a 	mov	r4,r19
 800e3d0:	80108ec0 	call	80108ec <__clzsi2>
 800e3d4:	133ffe04 	addi	r12,r2,-8
 800e3d8:	01000804 	movi	r4,32
 800e3dc:	2309c83a 	sub	r4,r4,r12
 800e3e0:	9108d83a 	srl	r4,r18,r4
 800e3e4:	9b04983a 	sll	r2,r19,r12
 800e3e8:	9324983a 	sll	r18,r18,r12
 800e3ec:	2088b03a 	or	r4,r4,r2
 800e3f0:	6440c716 	blt	r12,r17,800e710 <__adddf3+0x420>
 800e3f4:	6459c83a 	sub	r12,r12,r17
 800e3f8:	62000044 	addi	r8,r12,1
 800e3fc:	40800808 	cmpgei	r2,r8,32
 800e400:	1001191e 	bne	r2,zero,800e868 <__adddf3+0x578>
 800e404:	00800804 	movi	r2,32
 800e408:	1205c83a 	sub	r2,r2,r8
 800e40c:	9206d83a 	srl	r3,r18,r8
 800e410:	90a4983a 	sll	r18,r18,r2
 800e414:	2084983a 	sll	r2,r4,r2
 800e418:	2208d83a 	srl	r4,r4,r8
 800e41c:	9024c03a 	cmpne	r18,r18,zero
 800e420:	10c4b03a 	or	r2,r2,r3
 800e424:	14a4b03a 	or	r18,r2,r18
 800e428:	0023883a 	mov	r17,zero
 800e42c:	908001cc 	andi	r2,r18,7
 800e430:	10000726 	beq	r2,zero,800e450 <__adddf3+0x160>
 800e434:	908003cc 	andi	r2,r18,15
 800e438:	10800120 	cmpeqi	r2,r2,4
 800e43c:	1000041e 	bne	r2,zero,800e450 <__adddf3+0x160>
 800e440:	90c00104 	addi	r3,r18,4
 800e444:	1ca5803a 	cmpltu	r18,r3,r18
 800e448:	2489883a 	add	r4,r4,r18
 800e44c:	1825883a 	mov	r18,r3
 800e450:	2080202c 	andhi	r2,r4,128
 800e454:	10006126 	beq	r2,zero,800e5dc <__adddf3+0x2ec>
 800e458:	89400044 	addi	r5,r17,1
 800e45c:	2881ffe0 	cmpeqi	r2,r5,2047
 800e460:	2941ffcc 	andi	r5,r5,2047
 800e464:	1000731e 	bne	r2,zero,800e634 <__adddf3+0x344>
 800e468:	023fe034 	movhi	r8,65408
 800e46c:	423fffc4 	addi	r8,r8,-1
 800e470:	2210703a 	and	r8,r4,r8
 800e474:	4006927a 	slli	r3,r8,9
 800e478:	9024d0fa 	srli	r18,r18,3
 800e47c:	4004977a 	slli	r2,r8,29
 800e480:	1806d33a 	srli	r3,r3,12
 800e484:	1484b03a 	or	r2,r2,r18
 800e488:	280a953a 	slli	r5,r5,20
 800e48c:	84003fcc 	andi	r16,r16,255
 800e490:	802097fa 	slli	r16,r16,31
 800e494:	28c6b03a 	or	r3,r5,r3
 800e498:	1c06b03a 	or	r3,r3,r16
 800e49c:	dfc00417 	ldw	ra,16(sp)
 800e4a0:	dcc00317 	ldw	r19,12(sp)
 800e4a4:	dc800217 	ldw	r18,8(sp)
 800e4a8:	dc400117 	ldw	r17,4(sp)
 800e4ac:	dc000017 	ldw	r16,0(sp)
 800e4b0:	dec00504 	addi	sp,sp,20
 800e4b4:	f800283a 	ret
 800e4b8:	28002726 	beq	r5,zero,800e558 <__adddf3+0x268>
 800e4bc:	144bc83a 	sub	r5,r2,r17
 800e4c0:	8800be1e 	bne	r17,zero,800e7bc <__adddf3+0x4cc>
 800e4c4:	1b88b03a 	or	r4,r3,r14
 800e4c8:	20013126 	beq	r4,zero,800e990 <__adddf3+0x6a0>
 800e4cc:	293fffc4 	addi	r4,r5,-1
 800e4d0:	20017226 	beq	r4,zero,800ea9c <__adddf3+0x7ac>
 800e4d4:	2941ffd8 	cmpnei	r5,r5,2047
 800e4d8:	2801c226 	beq	r5,zero,800ebe4 <__adddf3+0x8f4>
 800e4dc:	200b883a 	mov	r5,r4
 800e4e0:	0000b906 	br	800e7c8 <__adddf3+0x4d8>
 800e4e4:	888bc83a 	sub	r5,r17,r2
 800e4e8:	0140700e 	bge	zero,r5,800e6ac <__adddf3+0x3bc>
 800e4ec:	10002a26 	beq	r2,zero,800e598 <__adddf3+0x2a8>
 800e4f0:	8881ffd8 	cmpnei	r2,r17,2047
 800e4f4:	1000ca26 	beq	r2,zero,800e820 <__adddf3+0x530>
 800e4f8:	4a402034 	orhi	r9,r9,128
 800e4fc:	28800e48 	cmpgei	r2,r5,57
 800e500:	1000421e 	bne	r2,zero,800e60c <__adddf3+0x31c>
 800e504:	28800808 	cmpgei	r2,r5,32
 800e508:	1000ff26 	beq	r2,zero,800e908 <__adddf3+0x618>
 800e50c:	2cbff804 	addi	r18,r5,-32
 800e510:	29000820 	cmpeqi	r4,r5,32
 800e514:	4c84d83a 	srl	r2,r9,r18
 800e518:	2000041e 	bne	r4,zero,800e52c <__adddf3+0x23c>
 800e51c:	01001004 	movi	r4,64
 800e520:	214bc83a 	sub	r5,r4,r5
 800e524:	4952983a 	sll	r9,r9,r5
 800e528:	6a5ab03a 	or	r13,r13,r9
 800e52c:	6824c03a 	cmpne	r18,r13,zero
 800e530:	90a4b03a 	or	r18,r18,r2
 800e534:	00003706 	br	800e614 <__adddf3+0x324>
 800e538:	4b44b03a 	or	r2,r9,r13
 800e53c:	1000b126 	beq	r2,zero,800e804 <__adddf3+0x514>
 800e540:	28bfffc4 	addi	r2,r5,-1
 800e544:	10011a26 	beq	r2,zero,800e9b0 <__adddf3+0x6c0>
 800e548:	2941ffd8 	cmpnei	r5,r5,2047
 800e54c:	28012526 	beq	r5,zero,800e9e4 <__adddf3+0x6f4>
 800e550:	100b883a 	mov	r5,r2
 800e554:	003f8606 	br	800e370 <__adddf3+0x80>
 800e558:	8a800044 	addi	r10,r17,1
 800e55c:	5281ff8c 	andi	r10,r10,2046
 800e560:	50008b1e 	bne	r10,zero,800e790 <__adddf3+0x4a0>
 800e564:	1b96b03a 	or	r11,r3,r14
 800e568:	4b44b03a 	or	r2,r9,r13
 800e56c:	8801031e 	bne	r17,zero,800e97c <__adddf3+0x68c>
 800e570:	58014126 	beq	r11,zero,800ea78 <__adddf3+0x788>
 800e574:	1001571e 	bne	r2,zero,800ead4 <__adddf3+0x7e4>
 800e578:	1804977a 	slli	r2,r3,29
 800e57c:	01480034 	movhi	r5,8192
 800e580:	297fffc4 	addi	r5,r5,-1
 800e584:	2148703a 	and	r4,r4,r5
 800e588:	1810d0fa 	srli	r8,r3,3
 800e58c:	1104b03a 	or	r2,r2,r4
 800e590:	500b883a 	mov	r5,r10
 800e594:	00001806 	br	800e5f8 <__adddf3+0x308>
 800e598:	4b44b03a 	or	r2,r9,r13
 800e59c:	10010a26 	beq	r2,zero,800e9c8 <__adddf3+0x6d8>
 800e5a0:	28bfffc4 	addi	r2,r5,-1
 800e5a4:	10000426 	beq	r2,zero,800e5b8 <__adddf3+0x2c8>
 800e5a8:	2941ffd8 	cmpnei	r5,r5,2047
 800e5ac:	28014226 	beq	r5,zero,800eab8 <__adddf3+0x7c8>
 800e5b0:	100b883a 	mov	r5,r2
 800e5b4:	003fd106 	br	800e4fc <__adddf3+0x20c>
 800e5b8:	7365883a 	add	r18,r14,r13
 800e5bc:	1a47883a 	add	r3,r3,r9
 800e5c0:	9389803a 	cmpltu	r4,r18,r14
 800e5c4:	1909883a 	add	r4,r3,r4
 800e5c8:	2080202c 	andhi	r2,r4,128
 800e5cc:	10009b1e 	bne	r2,zero,800e83c <__adddf3+0x54c>
 800e5d0:	04400044 	movi	r17,1
 800e5d4:	908001cc 	andi	r2,r18,7
 800e5d8:	103f961e 	bne	r2,zero,800e434 <__adddf3+0x144>
 800e5dc:	9024d0fa 	srli	r18,r18,3
 800e5e0:	2004977a 	slli	r2,r4,29
 800e5e4:	2010d0fa 	srli	r8,r4,3
 800e5e8:	880b883a 	mov	r5,r17
 800e5ec:	9084b03a 	or	r2,r18,r2
 800e5f0:	28c1ffe0 	cmpeqi	r3,r5,2047
 800e5f4:	1800251e 	bne	r3,zero,800e68c <__adddf3+0x39c>
 800e5f8:	00c00434 	movhi	r3,16
 800e5fc:	18ffffc4 	addi	r3,r3,-1
 800e600:	40c6703a 	and	r3,r8,r3
 800e604:	2941ffcc 	andi	r5,r5,2047
 800e608:	003f9f06 	br	800e488 <__adddf3+0x198>
 800e60c:	4b64b03a 	or	r18,r9,r13
 800e610:	9024c03a 	cmpne	r18,r18,zero
 800e614:	93a5883a 	add	r18,r18,r14
 800e618:	9389803a 	cmpltu	r4,r18,r14
 800e61c:	20c9883a 	add	r4,r4,r3
 800e620:	2080202c 	andhi	r2,r4,128
 800e624:	103feb26 	beq	r2,zero,800e5d4 <__adddf3+0x2e4>
 800e628:	8c400044 	addi	r17,r17,1
 800e62c:	8881ffe0 	cmpeqi	r2,r17,2047
 800e630:	10008326 	beq	r2,zero,800e840 <__adddf3+0x550>
 800e634:	0141ffc4 	movi	r5,2047
 800e638:	0007883a 	mov	r3,zero
 800e63c:	0005883a 	mov	r2,zero
 800e640:	003f9106 	br	800e488 <__adddf3+0x198>
 800e644:	4b44b03a 	or	r2,r9,r13
 800e648:	180a977a 	slli	r5,r3,29
 800e64c:	1810d0fa 	srli	r8,r3,3
 800e650:	10016c26 	beq	r2,zero,800ec04 <__adddf3+0x914>
 800e654:	00c80034 	movhi	r3,8192
 800e658:	18ffffc4 	addi	r3,r3,-1
 800e65c:	20c4703a 	and	r2,r4,r3
 800e660:	4100022c 	andhi	r4,r8,8
 800e664:	1144b03a 	or	r2,r2,r5
 800e668:	20000826 	beq	r4,zero,800e68c <__adddf3+0x39c>
 800e66c:	4808d0fa 	srli	r4,r9,3
 800e670:	2140022c 	andhi	r5,r4,8
 800e674:	2800051e 	bne	r5,zero,800e68c <__adddf3+0x39c>
 800e678:	4804977a 	slli	r2,r9,29
 800e67c:	30cc703a 	and	r6,r6,r3
 800e680:	3821883a 	mov	r16,r7
 800e684:	3084b03a 	or	r2,r6,r2
 800e688:	2011883a 	mov	r8,r4
 800e68c:	4086b03a 	or	r3,r8,r2
 800e690:	18017126 	beq	r3,zero,800ec58 <__adddf3+0x968>
 800e694:	01000434 	movhi	r4,16
 800e698:	40c00234 	orhi	r3,r8,8
 800e69c:	213fffc4 	addi	r4,r4,-1
 800e6a0:	1906703a 	and	r3,r3,r4
 800e6a4:	0141ffc4 	movi	r5,2047
 800e6a8:	003f7706 	br	800e488 <__adddf3+0x198>
 800e6ac:	28002926 	beq	r5,zero,800e754 <__adddf3+0x464>
 800e6b0:	144bc83a 	sub	r5,r2,r17
 800e6b4:	88008c26 	beq	r17,zero,800e8e8 <__adddf3+0x5f8>
 800e6b8:	1101ffd8 	cmpnei	r4,r2,2047
 800e6bc:	20011126 	beq	r4,zero,800eb04 <__adddf3+0x814>
 800e6c0:	18c02034 	orhi	r3,r3,128
 800e6c4:	29000e48 	cmpgei	r4,r5,57
 800e6c8:	2000d51e 	bne	r4,zero,800ea20 <__adddf3+0x730>
 800e6cc:	29000808 	cmpgei	r4,r5,32
 800e6d0:	2001511e 	bne	r4,zero,800ec18 <__adddf3+0x928>
 800e6d4:	01000804 	movi	r4,32
 800e6d8:	2149c83a 	sub	r4,r4,r5
 800e6dc:	1924983a 	sll	r18,r3,r4
 800e6e0:	714cd83a 	srl	r6,r14,r5
 800e6e4:	7108983a 	sll	r4,r14,r4
 800e6e8:	194ad83a 	srl	r5,r3,r5
 800e6ec:	91a4b03a 	or	r18,r18,r6
 800e6f0:	2006c03a 	cmpne	r3,r4,zero
 800e6f4:	90e4b03a 	or	r18,r18,r3
 800e6f8:	4953883a 	add	r9,r9,r5
 800e6fc:	9365883a 	add	r18,r18,r13
 800e700:	9349803a 	cmpltu	r4,r18,r13
 800e704:	2249883a 	add	r4,r4,r9
 800e708:	1023883a 	mov	r17,r2
 800e70c:	003fc406 	br	800e620 <__adddf3+0x330>
 800e710:	023fe034 	movhi	r8,65408
 800e714:	423fffc4 	addi	r8,r8,-1
 800e718:	8b23c83a 	sub	r17,r17,r12
 800e71c:	2208703a 	and	r4,r4,r8
 800e720:	003f4206 	br	800e42c <__adddf3+0x13c>
 800e724:	9009883a 	mov	r4,r18
 800e728:	80108ec0 	call	80108ec <__clzsi2>
 800e72c:	13000604 	addi	r12,r2,24
 800e730:	60c00808 	cmpgei	r3,r12,32
 800e734:	183f2826 	beq	r3,zero,800e3d8 <__adddf3+0xe8>
 800e738:	113ffe04 	addi	r4,r2,-8
 800e73c:	9108983a 	sll	r4,r18,r4
 800e740:	0025883a 	mov	r18,zero
 800e744:	003f2a06 	br	800e3f0 <__adddf3+0x100>
 800e748:	4b64b03a 	or	r18,r9,r13
 800e74c:	9024c03a 	cmpne	r18,r18,zero
 800e750:	003f1506 	br	800e3a8 <__adddf3+0xb8>
 800e754:	8a000044 	addi	r8,r17,1
 800e758:	4081ff8c 	andi	r2,r8,2046
 800e75c:	1000751e 	bne	r2,zero,800e934 <__adddf3+0x644>
 800e760:	1b84b03a 	or	r2,r3,r14
 800e764:	8800bc1e 	bne	r17,zero,800ea58 <__adddf3+0x768>
 800e768:	10010c26 	beq	r2,zero,800eb9c <__adddf3+0x8ac>
 800e76c:	4b44b03a 	or	r2,r9,r13
 800e770:	1001111e 	bne	r2,zero,800ebb8 <__adddf3+0x8c8>
 800e774:	180c977a 	slli	r6,r3,29
 800e778:	00880034 	movhi	r2,8192
 800e77c:	10bfffc4 	addi	r2,r2,-1
 800e780:	2084703a 	and	r2,r4,r2
 800e784:	1810d0fa 	srli	r8,r3,3
 800e788:	1184b03a 	or	r2,r2,r6
 800e78c:	003f9a06 	br	800e5f8 <__adddf3+0x308>
 800e790:	7365c83a 	sub	r18,r14,r13
 800e794:	1a67c83a 	sub	r19,r3,r9
 800e798:	7489803a 	cmpltu	r4,r14,r18
 800e79c:	9927c83a 	sub	r19,r19,r4
 800e7a0:	9880202c 	andhi	r2,r19,128
 800e7a4:	10006f1e 	bne	r2,zero,800e964 <__adddf3+0x674>
 800e7a8:	94c4b03a 	or	r2,r18,r19
 800e7ac:	103f061e 	bne	r2,zero,800e3c8 <__adddf3+0xd8>
 800e7b0:	0011883a 	mov	r8,zero
 800e7b4:	0021883a 	mov	r16,zero
 800e7b8:	003f8f06 	br	800e5f8 <__adddf3+0x308>
 800e7bc:	1101ffd8 	cmpnei	r4,r2,2047
 800e7c0:	20008f26 	beq	r4,zero,800ea00 <__adddf3+0x710>
 800e7c4:	18c02034 	orhi	r3,r3,128
 800e7c8:	29000e48 	cmpgei	r4,r5,57
 800e7cc:	20003e1e 	bne	r4,zero,800e8c8 <__adddf3+0x5d8>
 800e7d0:	29000808 	cmpgei	r4,r5,32
 800e7d4:	2000951e 	bne	r4,zero,800ea2c <__adddf3+0x73c>
 800e7d8:	01000804 	movi	r4,32
 800e7dc:	2149c83a 	sub	r4,r4,r5
 800e7e0:	1924983a 	sll	r18,r3,r4
 800e7e4:	714cd83a 	srl	r6,r14,r5
 800e7e8:	711c983a 	sll	r14,r14,r4
 800e7ec:	1946d83a 	srl	r3,r3,r5
 800e7f0:	91a4b03a 	or	r18,r18,r6
 800e7f4:	701cc03a 	cmpne	r14,r14,zero
 800e7f8:	93a4b03a 	or	r18,r18,r14
 800e7fc:	48d3c83a 	sub	r9,r9,r3
 800e800:	00003306 	br	800e8d0 <__adddf3+0x5e0>
 800e804:	1824977a 	slli	r18,r3,29
 800e808:	01880034 	movhi	r6,8192
 800e80c:	31bfffc4 	addi	r6,r6,-1
 800e810:	2184703a 	and	r2,r4,r6
 800e814:	1810d0fa 	srli	r8,r3,3
 800e818:	1484b03a 	or	r2,r2,r18
 800e81c:	003f7406 	br	800e5f0 <__adddf3+0x300>
 800e820:	1804977a 	slli	r2,r3,29
 800e824:	01480034 	movhi	r5,8192
 800e828:	297fffc4 	addi	r5,r5,-1
 800e82c:	2148703a 	and	r4,r4,r5
 800e830:	1810d0fa 	srli	r8,r3,3
 800e834:	1104b03a 	or	r2,r2,r4
 800e838:	003f9406 	br	800e68c <__adddf3+0x39c>
 800e83c:	04400084 	movi	r17,2
 800e840:	00bfe034 	movhi	r2,65408
 800e844:	10bfffc4 	addi	r2,r2,-1
 800e848:	9006d07a 	srli	r3,r18,1
 800e84c:	2088703a 	and	r4,r4,r2
 800e850:	200497fa 	slli	r2,r4,31
 800e854:	9480004c 	andi	r18,r18,1
 800e858:	1ca4b03a 	or	r18,r3,r18
 800e85c:	2008d07a 	srli	r4,r4,1
 800e860:	14a4b03a 	or	r18,r2,r18
 800e864:	003ef106 	br	800e42c <__adddf3+0x13c>
 800e868:	633ff844 	addi	r12,r12,-31
 800e86c:	40800820 	cmpeqi	r2,r8,32
 800e870:	2318d83a 	srl	r12,r4,r12
 800e874:	1000041e 	bne	r2,zero,800e888 <__adddf3+0x598>
 800e878:	00801004 	movi	r2,64
 800e87c:	1211c83a 	sub	r8,r2,r8
 800e880:	2208983a 	sll	r4,r4,r8
 800e884:	9124b03a 	or	r18,r18,r4
 800e888:	9024c03a 	cmpne	r18,r18,zero
 800e88c:	9324b03a 	or	r18,r18,r12
 800e890:	0009883a 	mov	r4,zero
 800e894:	0023883a 	mov	r17,zero
 800e898:	003f4e06 	br	800e5d4 <__adddf3+0x2e4>
 800e89c:	2cbff804 	addi	r18,r5,-32
 800e8a0:	29000820 	cmpeqi	r4,r5,32
 800e8a4:	4c84d83a 	srl	r2,r9,r18
 800e8a8:	2000041e 	bne	r4,zero,800e8bc <__adddf3+0x5cc>
 800e8ac:	01001004 	movi	r4,64
 800e8b0:	214bc83a 	sub	r5,r4,r5
 800e8b4:	4952983a 	sll	r9,r9,r5
 800e8b8:	6a5ab03a 	or	r13,r13,r9
 800e8bc:	6824c03a 	cmpne	r18,r13,zero
 800e8c0:	90a4b03a 	or	r18,r18,r2
 800e8c4:	003eb806 	br	800e3a8 <__adddf3+0xb8>
 800e8c8:	1b88b03a 	or	r4,r3,r14
 800e8cc:	2024c03a 	cmpne	r18,r4,zero
 800e8d0:	6ca5c83a 	sub	r18,r13,r18
 800e8d4:	6c89803a 	cmpltu	r4,r13,r18
 800e8d8:	4909c83a 	sub	r4,r9,r4
 800e8dc:	3821883a 	mov	r16,r7
 800e8e0:	1023883a 	mov	r17,r2
 800e8e4:	003eb306 	br	800e3b4 <__adddf3+0xc4>
 800e8e8:	1b88b03a 	or	r4,r3,r14
 800e8ec:	20008c26 	beq	r4,zero,800eb20 <__adddf3+0x830>
 800e8f0:	293fffc4 	addi	r4,r5,-1
 800e8f4:	2000d326 	beq	r4,zero,800ec44 <__adddf3+0x954>
 800e8f8:	2941ffd8 	cmpnei	r5,r5,2047
 800e8fc:	28008126 	beq	r5,zero,800eb04 <__adddf3+0x814>
 800e900:	200b883a 	mov	r5,r4
 800e904:	003f6f06 	br	800e6c4 <__adddf3+0x3d4>
 800e908:	00800804 	movi	r2,32
 800e90c:	1145c83a 	sub	r2,r2,r5
 800e910:	6948d83a 	srl	r4,r13,r5
 800e914:	48a4983a 	sll	r18,r9,r2
 800e918:	6884983a 	sll	r2,r13,r2
 800e91c:	494ad83a 	srl	r5,r9,r5
 800e920:	9124b03a 	or	r18,r18,r4
 800e924:	101ac03a 	cmpne	r13,r2,zero
 800e928:	9364b03a 	or	r18,r18,r13
 800e92c:	1947883a 	add	r3,r3,r5
 800e930:	003f3806 	br	800e614 <__adddf3+0x324>
 800e934:	4081ffe0 	cmpeqi	r2,r8,2047
 800e938:	103f3e1e 	bne	r2,zero,800e634 <__adddf3+0x344>
 800e93c:	7345883a 	add	r2,r14,r13
 800e940:	139d803a 	cmpltu	r14,r2,r14
 800e944:	1a49883a 	add	r4,r3,r9
 800e948:	2389883a 	add	r4,r4,r14
 800e94c:	202497fa 	slli	r18,r4,31
 800e950:	1004d07a 	srli	r2,r2,1
 800e954:	2008d07a 	srli	r4,r4,1
 800e958:	4023883a 	mov	r17,r8
 800e95c:	90a4b03a 	or	r18,r18,r2
 800e960:	003f1c06 	br	800e5d4 <__adddf3+0x2e4>
 800e964:	6ba5c83a 	sub	r18,r13,r14
 800e968:	48c9c83a 	sub	r4,r9,r3
 800e96c:	6c85803a 	cmpltu	r2,r13,r18
 800e970:	20a7c83a 	sub	r19,r4,r2
 800e974:	3821883a 	mov	r16,r7
 800e978:	003e9306 	br	800e3c8 <__adddf3+0xd8>
 800e97c:	58006f1e 	bne	r11,zero,800eb3c <__adddf3+0x84c>
 800e980:	10001f1e 	bne	r2,zero,800ea00 <__adddf3+0x710>
 800e984:	00bfffc4 	movi	r2,-1
 800e988:	0021883a 	mov	r16,zero
 800e98c:	003f4106 	br	800e694 <__adddf3+0x3a4>
 800e990:	4808977a 	slli	r4,r9,29
 800e994:	00c80034 	movhi	r3,8192
 800e998:	18ffffc4 	addi	r3,r3,-1
 800e99c:	30c4703a 	and	r2,r6,r3
 800e9a0:	4810d0fa 	srli	r8,r9,3
 800e9a4:	1104b03a 	or	r2,r2,r4
 800e9a8:	3821883a 	mov	r16,r7
 800e9ac:	003f1006 	br	800e5f0 <__adddf3+0x300>
 800e9b0:	7365c83a 	sub	r18,r14,r13
 800e9b4:	1a47c83a 	sub	r3,r3,r9
 800e9b8:	7489803a 	cmpltu	r4,r14,r18
 800e9bc:	1909c83a 	sub	r4,r3,r4
 800e9c0:	04400044 	movi	r17,1
 800e9c4:	003e7b06 	br	800e3b4 <__adddf3+0xc4>
 800e9c8:	1824977a 	slli	r18,r3,29
 800e9cc:	01c80034 	movhi	r7,8192
 800e9d0:	39ffffc4 	addi	r7,r7,-1
 800e9d4:	21c4703a 	and	r2,r4,r7
 800e9d8:	1810d0fa 	srli	r8,r3,3
 800e9dc:	1484b03a 	or	r2,r2,r18
 800e9e0:	003f0306 	br	800e5f0 <__adddf3+0x300>
 800e9e4:	1824977a 	slli	r18,r3,29
 800e9e8:	01480034 	movhi	r5,8192
 800e9ec:	297fffc4 	addi	r5,r5,-1
 800e9f0:	2144703a 	and	r2,r4,r5
 800e9f4:	1810d0fa 	srli	r8,r3,3
 800e9f8:	1484b03a 	or	r2,r2,r18
 800e9fc:	003f2306 	br	800e68c <__adddf3+0x39c>
 800ea00:	4806977a 	slli	r3,r9,29
 800ea04:	00880034 	movhi	r2,8192
 800ea08:	10bfffc4 	addi	r2,r2,-1
 800ea0c:	3084703a 	and	r2,r6,r2
 800ea10:	4810d0fa 	srli	r8,r9,3
 800ea14:	10c4b03a 	or	r2,r2,r3
 800ea18:	3821883a 	mov	r16,r7
 800ea1c:	003f1b06 	br	800e68c <__adddf3+0x39c>
 800ea20:	1b88b03a 	or	r4,r3,r14
 800ea24:	2024c03a 	cmpne	r18,r4,zero
 800ea28:	003f3406 	br	800e6fc <__adddf3+0x40c>
 800ea2c:	2cbff804 	addi	r18,r5,-32
 800ea30:	29800820 	cmpeqi	r6,r5,32
 800ea34:	1c88d83a 	srl	r4,r3,r18
 800ea38:	3000041e 	bne	r6,zero,800ea4c <__adddf3+0x75c>
 800ea3c:	01801004 	movi	r6,64
 800ea40:	314bc83a 	sub	r5,r6,r5
 800ea44:	1946983a 	sll	r3,r3,r5
 800ea48:	70dcb03a 	or	r14,r14,r3
 800ea4c:	7024c03a 	cmpne	r18,r14,zero
 800ea50:	9124b03a 	or	r18,r18,r4
 800ea54:	003f9e06 	br	800e8d0 <__adddf3+0x5e0>
 800ea58:	103efa1e 	bne	r2,zero,800e644 <__adddf3+0x354>
 800ea5c:	4804977a 	slli	r2,r9,29
 800ea60:	00c80034 	movhi	r3,8192
 800ea64:	18ffffc4 	addi	r3,r3,-1
 800ea68:	30cc703a 	and	r6,r6,r3
 800ea6c:	4810d0fa 	srli	r8,r9,3
 800ea70:	1184b03a 	or	r2,r2,r6
 800ea74:	003f0506 	br	800e68c <__adddf3+0x39c>
 800ea78:	10004426 	beq	r2,zero,800eb8c <__adddf3+0x89c>
 800ea7c:	4806977a 	slli	r3,r9,29
 800ea80:	00880034 	movhi	r2,8192
 800ea84:	10bfffc4 	addi	r2,r2,-1
 800ea88:	3084703a 	and	r2,r6,r2
 800ea8c:	4810d0fa 	srli	r8,r9,3
 800ea90:	10c4b03a 	or	r2,r2,r3
 800ea94:	3821883a 	mov	r16,r7
 800ea98:	003ed706 	br	800e5f8 <__adddf3+0x308>
 800ea9c:	6ba5c83a 	sub	r18,r13,r14
 800eaa0:	48c7c83a 	sub	r3,r9,r3
 800eaa4:	6c85803a 	cmpltu	r2,r13,r18
 800eaa8:	1889c83a 	sub	r4,r3,r2
 800eaac:	3821883a 	mov	r16,r7
 800eab0:	04400044 	movi	r17,1
 800eab4:	003e3f06 	br	800e3b4 <__adddf3+0xc4>
 800eab8:	180a977a 	slli	r5,r3,29
 800eabc:	00880034 	movhi	r2,8192
 800eac0:	10bfffc4 	addi	r2,r2,-1
 800eac4:	2084703a 	and	r2,r4,r2
 800eac8:	1810d0fa 	srli	r8,r3,3
 800eacc:	1144b03a 	or	r2,r2,r5
 800ead0:	003eee06 	br	800e68c <__adddf3+0x39c>
 800ead4:	7365c83a 	sub	r18,r14,r13
 800ead8:	7485803a 	cmpltu	r2,r14,r18
 800eadc:	1a49c83a 	sub	r4,r3,r9
 800eae0:	2089c83a 	sub	r4,r4,r2
 800eae4:	2080202c 	andhi	r2,r4,128
 800eae8:	10002626 	beq	r2,zero,800eb84 <__adddf3+0x894>
 800eaec:	6ba5c83a 	sub	r18,r13,r14
 800eaf0:	48c7c83a 	sub	r3,r9,r3
 800eaf4:	6c85803a 	cmpltu	r2,r13,r18
 800eaf8:	1889c83a 	sub	r4,r3,r2
 800eafc:	3821883a 	mov	r16,r7
 800eb00:	003e4a06 	br	800e42c <__adddf3+0x13c>
 800eb04:	4806977a 	slli	r3,r9,29
 800eb08:	00880034 	movhi	r2,8192
 800eb0c:	10bfffc4 	addi	r2,r2,-1
 800eb10:	3084703a 	and	r2,r6,r2
 800eb14:	4810d0fa 	srli	r8,r9,3
 800eb18:	10c4b03a 	or	r2,r2,r3
 800eb1c:	003edb06 	br	800e68c <__adddf3+0x39c>
 800eb20:	4806977a 	slli	r3,r9,29
 800eb24:	00880034 	movhi	r2,8192
 800eb28:	10bfffc4 	addi	r2,r2,-1
 800eb2c:	3084703a 	and	r2,r6,r2
 800eb30:	4810d0fa 	srli	r8,r9,3
 800eb34:	10c4b03a 	or	r2,r2,r3
 800eb38:	003ead06 	br	800e5f0 <__adddf3+0x300>
 800eb3c:	180a977a 	slli	r5,r3,29
 800eb40:	1810d0fa 	srli	r8,r3,3
 800eb44:	10002f26 	beq	r2,zero,800ec04 <__adddf3+0x914>
 800eb48:	00c80034 	movhi	r3,8192
 800eb4c:	18ffffc4 	addi	r3,r3,-1
 800eb50:	20c4703a 	and	r2,r4,r3
 800eb54:	4100022c 	andhi	r4,r8,8
 800eb58:	1144b03a 	or	r2,r2,r5
 800eb5c:	203ecb26 	beq	r4,zero,800e68c <__adddf3+0x39c>
 800eb60:	4808d0fa 	srli	r4,r9,3
 800eb64:	2140022c 	andhi	r5,r4,8
 800eb68:	283ec81e 	bne	r5,zero,800e68c <__adddf3+0x39c>
 800eb6c:	4812977a 	slli	r9,r9,29
 800eb70:	30c4703a 	and	r2,r6,r3
 800eb74:	3821883a 	mov	r16,r7
 800eb78:	1244b03a 	or	r2,r2,r9
 800eb7c:	2011883a 	mov	r8,r4
 800eb80:	003ec206 	br	800e68c <__adddf3+0x39c>
 800eb84:	9104b03a 	or	r2,r18,r4
 800eb88:	103e921e 	bne	r2,zero,800e5d4 <__adddf3+0x2e4>
 800eb8c:	0011883a 	mov	r8,zero
 800eb90:	100b883a 	mov	r5,r2
 800eb94:	0021883a 	mov	r16,zero
 800eb98:	003e9706 	br	800e5f8 <__adddf3+0x308>
 800eb9c:	4804977a 	slli	r2,r9,29
 800eba0:	00c80034 	movhi	r3,8192
 800eba4:	18ffffc4 	addi	r3,r3,-1
 800eba8:	30cc703a 	and	r6,r6,r3
 800ebac:	4810d0fa 	srli	r8,r9,3
 800ebb0:	1184b03a 	or	r2,r2,r6
 800ebb4:	003e9006 	br	800e5f8 <__adddf3+0x308>
 800ebb8:	7365883a 	add	r18,r14,r13
 800ebbc:	1a47883a 	add	r3,r3,r9
 800ebc0:	9389803a 	cmpltu	r4,r18,r14
 800ebc4:	1909883a 	add	r4,r3,r4
 800ebc8:	2080202c 	andhi	r2,r4,128
 800ebcc:	103e8126 	beq	r2,zero,800e5d4 <__adddf3+0x2e4>
 800ebd0:	00bfe034 	movhi	r2,65408
 800ebd4:	10bfffc4 	addi	r2,r2,-1
 800ebd8:	2088703a 	and	r4,r4,r2
 800ebdc:	04400044 	movi	r17,1
 800ebe0:	003e7c06 	br	800e5d4 <__adddf3+0x2e4>
 800ebe4:	4804977a 	slli	r2,r9,29
 800ebe8:	00c80034 	movhi	r3,8192
 800ebec:	18ffffc4 	addi	r3,r3,-1
 800ebf0:	30cc703a 	and	r6,r6,r3
 800ebf4:	4810d0fa 	srli	r8,r9,3
 800ebf8:	1184b03a 	or	r2,r2,r6
 800ebfc:	3821883a 	mov	r16,r7
 800ec00:	003ea206 	br	800e68c <__adddf3+0x39c>
 800ec04:	00880034 	movhi	r2,8192
 800ec08:	10bfffc4 	addi	r2,r2,-1
 800ec0c:	2084703a 	and	r2,r4,r2
 800ec10:	1144b03a 	or	r2,r2,r5
 800ec14:	003e9d06 	br	800e68c <__adddf3+0x39c>
 800ec18:	293ff804 	addi	r4,r5,-32
 800ec1c:	29800820 	cmpeqi	r6,r5,32
 800ec20:	1908d83a 	srl	r4,r3,r4
 800ec24:	3000041e 	bne	r6,zero,800ec38 <__adddf3+0x948>
 800ec28:	01801004 	movi	r6,64
 800ec2c:	314bc83a 	sub	r5,r6,r5
 800ec30:	1946983a 	sll	r3,r3,r5
 800ec34:	70dcb03a 	or	r14,r14,r3
 800ec38:	7024c03a 	cmpne	r18,r14,zero
 800ec3c:	9124b03a 	or	r18,r18,r4
 800ec40:	003eae06 	br	800e6fc <__adddf3+0x40c>
 800ec44:	7365883a 	add	r18,r14,r13
 800ec48:	1a47883a 	add	r3,r3,r9
 800ec4c:	9345803a 	cmpltu	r2,r18,r13
 800ec50:	1889883a 	add	r4,r3,r2
 800ec54:	003e5c06 	br	800e5c8 <__adddf3+0x2d8>
 800ec58:	0005883a 	mov	r2,zero
 800ec5c:	0141ffc4 	movi	r5,2047
 800ec60:	0007883a 	mov	r3,zero
 800ec64:	003e0806 	br	800e488 <__adddf3+0x198>

0800ec68 <__divdf3>:
 800ec68:	2804d53a 	srli	r2,r5,20
 800ec6c:	defff204 	addi	sp,sp,-56
 800ec70:	dc000415 	stw	r16,16(sp)
 800ec74:	04000434 	movhi	r16,16
 800ec78:	ddc00b15 	stw	r23,44(sp)
 800ec7c:	dd800a15 	stw	r22,40(sp)
 800ec80:	dc800615 	stw	r18,24(sp)
 800ec84:	843fffc4 	addi	r16,r16,-1
 800ec88:	dfc00d15 	stw	ra,52(sp)
 800ec8c:	df000c15 	stw	fp,48(sp)
 800ec90:	dd400915 	stw	r21,36(sp)
 800ec94:	dd000815 	stw	r20,32(sp)
 800ec98:	dcc00715 	stw	r19,28(sp)
 800ec9c:	dc400515 	stw	r17,20(sp)
 800eca0:	1081ffcc 	andi	r2,r2,2047
 800eca4:	282cd7fa 	srli	r22,r5,31
 800eca8:	302f883a 	mov	r23,r6
 800ecac:	2025883a 	mov	r18,r4
 800ecb0:	2c20703a 	and	r16,r5,r16
 800ecb4:	10005326 	beq	r2,zero,800ee04 <__divdf3+0x19c>
 800ecb8:	10c1ffe0 	cmpeqi	r3,r2,2047
 800ecbc:	1800661e 	bne	r3,zero,800ee58 <__divdf3+0x1f0>
 800ecc0:	2028d77a 	srli	r20,r4,29
 800ecc4:	800a90fa 	slli	r5,r16,3
 800ecc8:	202490fa 	slli	r18,r4,3
 800eccc:	14ff0044 	addi	r19,r2,-1023
 800ecd0:	a14ab03a 	or	r5,r20,r5
 800ecd4:	2d002034 	orhi	r20,r5,128
 800ecd8:	0021883a 	mov	r16,zero
 800ecdc:	0039883a 	mov	fp,zero
 800ece0:	3804d53a 	srli	r2,r7,20
 800ece4:	00c00434 	movhi	r3,16
 800ece8:	18ffffc4 	addi	r3,r3,-1
 800ecec:	1081ffcc 	andi	r2,r2,2047
 800ecf0:	3810d7fa 	srli	r8,r7,31
 800ecf4:	38e2703a 	and	r17,r7,r3
 800ecf8:	10005e26 	beq	r2,zero,800ee74 <__divdf3+0x20c>
 800ecfc:	10c1ffe0 	cmpeqi	r3,r2,2047
 800ed00:	1800201e 	bne	r3,zero,800ed84 <__divdf3+0x11c>
 800ed04:	880690fa 	slli	r3,r17,3
 800ed08:	b822d77a 	srli	r17,r23,29
 800ed0c:	b81290fa 	slli	r9,r23,3
 800ed10:	10bf0044 	addi	r2,r2,-1023
 800ed14:	88c6b03a 	or	r3,r17,r3
 800ed18:	1c402034 	orhi	r17,r3,128
 800ed1c:	98a7c83a 	sub	r19,r19,r2
 800ed20:	0007883a 	mov	r3,zero
 800ed24:	80800428 	cmpgeui	r2,r16,16
 800ed28:	b22af03a 	xor	r21,r22,r8
 800ed2c:	1000ac1e 	bne	r2,zero,800efe0 <__divdf3+0x378>
 800ed30:	800490ba 	slli	r2,r16,2
 800ed34:	01820074 	movhi	r6,2049
 800ed38:	118d883a 	add	r6,r2,r6
 800ed3c:	30bb5117 	ldw	r2,-4796(r6)
 800ed40:	1000683a 	jmp	r2
 800ed44:	0800efe0 	cmpeqi	zero,at,959
 800ed48:	0800edf4 	orhi	zero,at,951
 800ed4c:	0800eda0 	cmpeqi	zero,at,950
 800ed50:	0800ef28 	cmpgeui	zero,at,956
 800ed54:	0800eda0 	cmpeqi	zero,at,950
 800ed58:	0800ef84 	addi	zero,at,958
 800ed5c:	0800eda0 	cmpeqi	zero,at,950
 800ed60:	0800ef28 	cmpgeui	zero,at,956
 800ed64:	0800edf4 	orhi	zero,at,951
 800ed68:	0800edf4 	orhi	zero,at,951
 800ed6c:	0800ef84 	addi	zero,at,958
 800ed70:	0800ef28 	cmpgeui	zero,at,956
 800ed74:	0800eec0 	call	800eec <OSCtxSw_SWITCH_PC+0x800eac>
 800ed78:	0800eec0 	call	800eec <OSCtxSw_SWITCH_PC+0x800eac>
 800ed7c:	0800eec0 	call	800eec <OSCtxSw_SWITCH_PC+0x800eac>
 800ed80:	0800ef9c 	xori	zero,at,958
 800ed84:	8dd2b03a 	or	r9,r17,r23
 800ed88:	9cfe0044 	addi	r19,r19,-2047
 800ed8c:	48006b1e 	bne	r9,zero,800ef3c <__divdf3+0x2d4>
 800ed90:	84000094 	ori	r16,r16,2
 800ed94:	0023883a 	mov	r17,zero
 800ed98:	00c00084 	movi	r3,2
 800ed9c:	003fe106 	br	800ed24 <__divdf3+0xbc>
 800eda0:	0007883a 	mov	r3,zero
 800eda4:	000b883a 	mov	r5,zero
 800eda8:	0025883a 	mov	r18,zero
 800edac:	a8803fcc 	andi	r2,r21,255
 800edb0:	1806953a 	slli	r3,r3,20
 800edb4:	100497fa 	slli	r2,r2,31
 800edb8:	1946b03a 	or	r3,r3,r5
 800edbc:	1886b03a 	or	r3,r3,r2
 800edc0:	9005883a 	mov	r2,r18
 800edc4:	dfc00d17 	ldw	ra,52(sp)
 800edc8:	df000c17 	ldw	fp,48(sp)
 800edcc:	ddc00b17 	ldw	r23,44(sp)
 800edd0:	dd800a17 	ldw	r22,40(sp)
 800edd4:	dd400917 	ldw	r21,36(sp)
 800edd8:	dd000817 	ldw	r20,32(sp)
 800eddc:	dcc00717 	ldw	r19,28(sp)
 800ede0:	dc800617 	ldw	r18,24(sp)
 800ede4:	dc400517 	ldw	r17,20(sp)
 800ede8:	dc000417 	ldw	r16,16(sp)
 800edec:	dec00e04 	addi	sp,sp,56
 800edf0:	f800283a 	ret
 800edf4:	00c1ffc4 	movi	r3,2047
 800edf8:	000b883a 	mov	r5,zero
 800edfc:	0025883a 	mov	r18,zero
 800ee00:	003fea06 	br	800edac <__divdf3+0x144>
 800ee04:	2428b03a 	or	r20,r4,r16
 800ee08:	2023883a 	mov	r17,r4
 800ee0c:	a0005326 	beq	r20,zero,800ef5c <__divdf3+0x2f4>
 800ee10:	d9c00015 	stw	r7,0(sp)
 800ee14:	80014126 	beq	r16,zero,800f31c <__divdf3+0x6b4>
 800ee18:	8009883a 	mov	r4,r16
 800ee1c:	80108ec0 	call	80108ec <__clzsi2>
 800ee20:	d9c00017 	ldw	r7,0(sp)
 800ee24:	10fffd44 	addi	r3,r2,-11
 800ee28:	05000744 	movi	r20,29
 800ee2c:	113ffe04 	addi	r4,r2,-8
 800ee30:	a0e9c83a 	sub	r20,r20,r3
 800ee34:	810a983a 	sll	r5,r16,r4
 800ee38:	8d28d83a 	srl	r20,r17,r20
 800ee3c:	8924983a 	sll	r18,r17,r4
 800ee40:	a168b03a 	or	r20,r20,r5
 800ee44:	04ff0344 	movi	r19,-1011
 800ee48:	98a7c83a 	sub	r19,r19,r2
 800ee4c:	0021883a 	mov	r16,zero
 800ee50:	0039883a 	mov	fp,zero
 800ee54:	003fa206 	br	800ece0 <__divdf3+0x78>
 800ee58:	2428b03a 	or	r20,r4,r16
 800ee5c:	a000441e 	bne	r20,zero,800ef70 <__divdf3+0x308>
 800ee60:	0025883a 	mov	r18,zero
 800ee64:	04000204 	movi	r16,8
 800ee68:	04c1ffc4 	movi	r19,2047
 800ee6c:	07000084 	movi	fp,2
 800ee70:	003f9b06 	br	800ece0 <__divdf3+0x78>
 800ee74:	8dd2b03a 	or	r9,r17,r23
 800ee78:	48003426 	beq	r9,zero,800ef4c <__divdf3+0x2e4>
 800ee7c:	da000015 	stw	r8,0(sp)
 800ee80:	88013126 	beq	r17,zero,800f348 <__divdf3+0x6e0>
 800ee84:	8809883a 	mov	r4,r17
 800ee88:	80108ec0 	call	80108ec <__clzsi2>
 800ee8c:	da000017 	ldw	r8,0(sp)
 800ee90:	117ffd44 	addi	r5,r2,-11
 800ee94:	01000744 	movi	r4,29
 800ee98:	127ffe04 	addi	r9,r2,-8
 800ee9c:	2149c83a 	sub	r4,r4,r5
 800eea0:	8a46983a 	sll	r3,r17,r9
 800eea4:	b908d83a 	srl	r4,r23,r4
 800eea8:	ba52983a 	sll	r9,r23,r9
 800eeac:	20e2b03a 	or	r17,r4,r3
 800eeb0:	14c5883a 	add	r2,r2,r19
 800eeb4:	14c0fcc4 	addi	r19,r2,1011
 800eeb8:	0007883a 	mov	r3,zero
 800eebc:	003f9906 	br	800ed24 <__divdf3+0xbc>
 800eec0:	b02b883a 	mov	r21,r22
 800eec4:	e08000a0 	cmpeqi	r2,fp,2
 800eec8:	103fca1e 	bne	r2,zero,800edf4 <__divdf3+0x18c>
 800eecc:	e08000e0 	cmpeqi	r2,fp,3
 800eed0:	1001741e 	bne	r2,zero,800f4a4 <__divdf3+0x83c>
 800eed4:	e0800060 	cmpeqi	r2,fp,1
 800eed8:	103fb11e 	bne	r2,zero,800eda0 <__divdf3+0x138>
 800eedc:	9c40ffc4 	addi	r17,r19,1023
 800eee0:	0440de0e 	bge	zero,r17,800f25c <__divdf3+0x5f4>
 800eee4:	908001cc 	andi	r2,r18,7
 800eee8:	10014a1e 	bne	r2,zero,800f414 <__divdf3+0x7ac>
 800eeec:	900cd0fa 	srli	r6,r18,3
 800eef0:	a080402c 	andhi	r2,r20,256
 800eef4:	10000426 	beq	r2,zero,800ef08 <__divdf3+0x2a0>
 800eef8:	00bfc034 	movhi	r2,65280
 800eefc:	10bfffc4 	addi	r2,r2,-1
 800ef00:	a0a8703a 	and	r20,r20,r2
 800ef04:	9c410004 	addi	r17,r19,1024
 800ef08:	8881ffc8 	cmpgei	r2,r17,2047
 800ef0c:	103fb91e 	bne	r2,zero,800edf4 <__divdf3+0x18c>
 800ef10:	a008977a 	slli	r4,r20,29
 800ef14:	a00a927a 	slli	r5,r20,9
 800ef18:	88c1ffcc 	andi	r3,r17,2047
 800ef1c:	21a4b03a 	or	r18,r4,r6
 800ef20:	280ad33a 	srli	r5,r5,12
 800ef24:	003fa106 	br	800edac <__divdf3+0x144>
 800ef28:	402b883a 	mov	r21,r8
 800ef2c:	8829883a 	mov	r20,r17
 800ef30:	4825883a 	mov	r18,r9
 800ef34:	1839883a 	mov	fp,r3
 800ef38:	003fe206 	br	800eec4 <__divdf3+0x25c>
 800ef3c:	840000d4 	ori	r16,r16,3
 800ef40:	b813883a 	mov	r9,r23
 800ef44:	00c000c4 	movi	r3,3
 800ef48:	003f7606 	br	800ed24 <__divdf3+0xbc>
 800ef4c:	84000054 	ori	r16,r16,1
 800ef50:	0023883a 	mov	r17,zero
 800ef54:	00c00044 	movi	r3,1
 800ef58:	003f7206 	br	800ed24 <__divdf3+0xbc>
 800ef5c:	0025883a 	mov	r18,zero
 800ef60:	04000104 	movi	r16,4
 800ef64:	0027883a 	mov	r19,zero
 800ef68:	07000044 	movi	fp,1
 800ef6c:	003f5c06 	br	800ece0 <__divdf3+0x78>
 800ef70:	8029883a 	mov	r20,r16
 800ef74:	04c1ffc4 	movi	r19,2047
 800ef78:	04000304 	movi	r16,12
 800ef7c:	070000c4 	movi	fp,3
 800ef80:	003f5706 	br	800ece0 <__divdf3+0x78>
 800ef84:	01400434 	movhi	r5,16
 800ef88:	002b883a 	mov	r21,zero
 800ef8c:	297fffc4 	addi	r5,r5,-1
 800ef90:	04bfffc4 	movi	r18,-1
 800ef94:	00c1ffc4 	movi	r3,2047
 800ef98:	003f8406 	br	800edac <__divdf3+0x144>
 800ef9c:	a080022c 	andhi	r2,r20,8
 800efa0:	10000926 	beq	r2,zero,800efc8 <__divdf3+0x360>
 800efa4:	8880022c 	andhi	r2,r17,8
 800efa8:	1000071e 	bne	r2,zero,800efc8 <__divdf3+0x360>
 800efac:	00800434 	movhi	r2,16
 800efb0:	89400234 	orhi	r5,r17,8
 800efb4:	10bfffc4 	addi	r2,r2,-1
 800efb8:	288a703a 	and	r5,r5,r2
 800efbc:	402b883a 	mov	r21,r8
 800efc0:	4825883a 	mov	r18,r9
 800efc4:	003ff306 	br	800ef94 <__divdf3+0x32c>
 800efc8:	00800434 	movhi	r2,16
 800efcc:	a1400234 	orhi	r5,r20,8
 800efd0:	10bfffc4 	addi	r2,r2,-1
 800efd4:	288a703a 	and	r5,r5,r2
 800efd8:	b02b883a 	mov	r21,r22
 800efdc:	003fed06 	br	800ef94 <__divdf3+0x32c>
 800efe0:	8d00c836 	bltu	r17,r20,800f304 <__divdf3+0x69c>
 800efe4:	8d00c626 	beq	r17,r20,800f300 <__divdf3+0x698>
 800efe8:	9cffffc4 	addi	r19,r19,-1
 800efec:	0021883a 	mov	r16,zero
 800eff0:	8806923a 	slli	r3,r17,8
 800eff4:	480cd63a 	srli	r6,r9,24
 800eff8:	4804923a 	slli	r2,r9,8
 800effc:	1838d43a 	srli	fp,r3,16
 800f000:	a009883a 	mov	r4,r20
 800f004:	30ecb03a 	or	r22,r6,r3
 800f008:	e00b883a 	mov	r5,fp
 800f00c:	d8800015 	stw	r2,0(sp)
 800f010:	800e2300 	call	800e230 <__udivsi3>
 800f014:	a009883a 	mov	r4,r20
 800f018:	e00b883a 	mov	r5,fp
 800f01c:	d8800115 	stw	r2,4(sp)
 800f020:	800e2940 	call	800e294 <__umodsi3>
 800f024:	d8c00117 	ldw	r3,4(sp)
 800f028:	1004943a 	slli	r2,r2,16
 800f02c:	9008d43a 	srli	r4,r18,16
 800f030:	b5ffffcc 	andi	r23,r22,65535
 800f034:	b8e3383a 	mul	r17,r23,r3
 800f038:	2088b03a 	or	r4,r4,r2
 800f03c:	2440042e 	bgeu	r4,r17,800f050 <__divdf3+0x3e8>
 800f040:	2589883a 	add	r4,r4,r22
 800f044:	18bfffc4 	addi	r2,r3,-1
 800f048:	2580d32e 	bgeu	r4,r22,800f398 <__divdf3+0x730>
 800f04c:	1007883a 	mov	r3,r2
 800f050:	2463c83a 	sub	r17,r4,r17
 800f054:	e00b883a 	mov	r5,fp
 800f058:	8809883a 	mov	r4,r17
 800f05c:	d8c00115 	stw	r3,4(sp)
 800f060:	800e2300 	call	800e230 <__udivsi3>
 800f064:	8809883a 	mov	r4,r17
 800f068:	e00b883a 	mov	r5,fp
 800f06c:	1029883a 	mov	r20,r2
 800f070:	800e2940 	call	800e294 <__umodsi3>
 800f074:	1008943a 	slli	r4,r2,16
 800f078:	bd13383a 	mul	r9,r23,r20
 800f07c:	94bfffcc 	andi	r18,r18,65535
 800f080:	9108b03a 	or	r4,r18,r4
 800f084:	d8c00117 	ldw	r3,4(sp)
 800f088:	2240042e 	bgeu	r4,r9,800f09c <__divdf3+0x434>
 800f08c:	2589883a 	add	r4,r4,r22
 800f090:	a0bfffc4 	addi	r2,r20,-1
 800f094:	2580bc2e 	bgeu	r4,r22,800f388 <__divdf3+0x720>
 800f098:	1029883a 	mov	r20,r2
 800f09c:	180a943a 	slli	r5,r3,16
 800f0a0:	d8800017 	ldw	r2,0(sp)
 800f0a4:	2249c83a 	sub	r4,r4,r9
 800f0a8:	2d28b03a 	or	r20,r5,r20
 800f0ac:	100ed43a 	srli	r7,r2,16
 800f0b0:	123fffcc 	andi	r8,r2,65535
 800f0b4:	a00ad43a 	srli	r5,r20,16
 800f0b8:	a0bfffcc 	andi	r2,r20,65535
 800f0bc:	1225383a 	mul	r18,r2,r8
 800f0c0:	2a15383a 	mul	r10,r5,r8
 800f0c4:	3887383a 	mul	r3,r7,r2
 800f0c8:	9004d43a 	srli	r2,r18,16
 800f0cc:	29cb383a 	mul	r5,r5,r7
 800f0d0:	1a87883a 	add	r3,r3,r10
 800f0d4:	10c5883a 	add	r2,r2,r3
 800f0d8:	1280022e 	bgeu	r2,r10,800f0e4 <__divdf3+0x47c>
 800f0dc:	00c00074 	movhi	r3,1
 800f0e0:	28cb883a 	add	r5,r5,r3
 800f0e4:	1006d43a 	srli	r3,r2,16
 800f0e8:	1004943a 	slli	r2,r2,16
 800f0ec:	94bfffcc 	andi	r18,r18,65535
 800f0f0:	1947883a 	add	r3,r3,r5
 800f0f4:	14a5883a 	add	r18,r2,r18
 800f0f8:	20c07636 	bltu	r4,r3,800f2d4 <__divdf3+0x66c>
 800f0fc:	20c07426 	beq	r4,r3,800f2d0 <__divdf3+0x668>
 800f100:	84a5c83a 	sub	r18,r16,r18
 800f104:	20c9c83a 	sub	r4,r4,r3
 800f108:	84a1803a 	cmpltu	r16,r16,r18
 800f10c:	2421c83a 	sub	r16,r4,r16
 800f110:	9c40ffc4 	addi	r17,r19,1023
 800f114:	b400ba26 	beq	r22,r16,800f400 <__divdf3+0x798>
 800f118:	8009883a 	mov	r4,r16
 800f11c:	e00b883a 	mov	r5,fp
 800f120:	da000315 	stw	r8,12(sp)
 800f124:	d9c00215 	stw	r7,8(sp)
 800f128:	800e2300 	call	800e230 <__udivsi3>
 800f12c:	8009883a 	mov	r4,r16
 800f130:	e00b883a 	mov	r5,fp
 800f134:	d8800115 	stw	r2,4(sp)
 800f138:	800e2940 	call	800e294 <__umodsi3>
 800f13c:	da400117 	ldw	r9,4(sp)
 800f140:	1004943a 	slli	r2,r2,16
 800f144:	9008d43a 	srli	r4,r18,16
 800f148:	ba61383a 	mul	r16,r23,r9
 800f14c:	d9c00217 	ldw	r7,8(sp)
 800f150:	2088b03a 	or	r4,r4,r2
 800f154:	da000317 	ldw	r8,12(sp)
 800f158:	2400062e 	bgeu	r4,r16,800f174 <__divdf3+0x50c>
 800f15c:	2589883a 	add	r4,r4,r22
 800f160:	48bfffc4 	addi	r2,r9,-1
 800f164:	2580b536 	bltu	r4,r22,800f43c <__divdf3+0x7d4>
 800f168:	2400b42e 	bgeu	r4,r16,800f43c <__divdf3+0x7d4>
 800f16c:	4a7fff84 	addi	r9,r9,-2
 800f170:	2589883a 	add	r4,r4,r22
 800f174:	2421c83a 	sub	r16,r4,r16
 800f178:	8009883a 	mov	r4,r16
 800f17c:	e00b883a 	mov	r5,fp
 800f180:	da000315 	stw	r8,12(sp)
 800f184:	da400215 	stw	r9,8(sp)
 800f188:	d9c00115 	stw	r7,4(sp)
 800f18c:	800e2300 	call	800e230 <__udivsi3>
 800f190:	8009883a 	mov	r4,r16
 800f194:	e00b883a 	mov	r5,fp
 800f198:	1021883a 	mov	r16,r2
 800f19c:	800e2940 	call	800e294 <__umodsi3>
 800f1a0:	1004943a 	slli	r2,r2,16
 800f1a4:	bc2f383a 	mul	r23,r23,r16
 800f1a8:	90ffffcc 	andi	r3,r18,65535
 800f1ac:	1886b03a 	or	r3,r3,r2
 800f1b0:	d9c00117 	ldw	r7,4(sp)
 800f1b4:	da400217 	ldw	r9,8(sp)
 800f1b8:	da000317 	ldw	r8,12(sp)
 800f1bc:	1dc0062e 	bgeu	r3,r23,800f1d8 <__divdf3+0x570>
 800f1c0:	1d87883a 	add	r3,r3,r22
 800f1c4:	80bfffc4 	addi	r2,r16,-1
 800f1c8:	1d809a36 	bltu	r3,r22,800f434 <__divdf3+0x7cc>
 800f1cc:	1dc0992e 	bgeu	r3,r23,800f434 <__divdf3+0x7cc>
 800f1d0:	843fff84 	addi	r16,r16,-2
 800f1d4:	1d87883a 	add	r3,r3,r22
 800f1d8:	4808943a 	slli	r4,r9,16
 800f1dc:	1defc83a 	sub	r23,r3,r23
 800f1e0:	2424b03a 	or	r18,r4,r16
 800f1e4:	900ad43a 	srli	r5,r18,16
 800f1e8:	90bfffcc 	andi	r2,r18,65535
 800f1ec:	4087383a 	mul	r3,r8,r2
 800f1f0:	3885383a 	mul	r2,r7,r2
 800f1f4:	2a11383a 	mul	r8,r5,r8
 800f1f8:	1808d43a 	srli	r4,r3,16
 800f1fc:	394f383a 	mul	r7,r7,r5
 800f200:	1205883a 	add	r2,r2,r8
 800f204:	2089883a 	add	r4,r4,r2
 800f208:	2200022e 	bgeu	r4,r8,800f214 <__divdf3+0x5ac>
 800f20c:	00800074 	movhi	r2,1
 800f210:	388f883a 	add	r7,r7,r2
 800f214:	2004d43a 	srli	r2,r4,16
 800f218:	2008943a 	slli	r4,r4,16
 800f21c:	18ffffcc 	andi	r3,r3,65535
 800f220:	11cf883a 	add	r7,r2,r7
 800f224:	20c9883a 	add	r4,r4,r3
 800f228:	b9c00436 	bltu	r23,r7,800f23c <__divdf3+0x5d4>
 800f22c:	b9c00226 	beq	r23,r7,800f238 <__divdf3+0x5d0>
 800f230:	94800054 	ori	r18,r18,1
 800f234:	003f2a06 	br	800eee0 <__divdf3+0x278>
 800f238:	203f2926 	beq	r4,zero,800eee0 <__divdf3+0x278>
 800f23c:	b5ef883a 	add	r23,r22,r23
 800f240:	90bfffc4 	addi	r2,r18,-1
 800f244:	bd806936 	bltu	r23,r22,800f3ec <__divdf3+0x784>
 800f248:	b9c08636 	bltu	r23,r7,800f464 <__divdf3+0x7fc>
 800f24c:	b9c09a26 	beq	r23,r7,800f4b8 <__divdf3+0x850>
 800f250:	1025883a 	mov	r18,r2
 800f254:	003ff606 	br	800f230 <__divdf3+0x5c8>
 800f258:	04bfffc4 	movi	r18,-1
 800f25c:	01400044 	movi	r5,1
 800f260:	2c4bc83a 	sub	r5,r5,r17
 800f264:	28800e48 	cmpgei	r2,r5,57
 800f268:	103ecd1e 	bne	r2,zero,800eda0 <__divdf3+0x138>
 800f26c:	28800808 	cmpgei	r2,r5,32
 800f270:	10004d1e 	bne	r2,zero,800f3a8 <__divdf3+0x740>
 800f274:	98810784 	addi	r2,r19,1054
 800f278:	a086983a 	sll	r3,r20,r2
 800f27c:	9148d83a 	srl	r4,r18,r5
 800f280:	9084983a 	sll	r2,r18,r2
 800f284:	a14ad83a 	srl	r5,r20,r5
 800f288:	1924b03a 	or	r18,r3,r4
 800f28c:	1004c03a 	cmpne	r2,r2,zero
 800f290:	90a4b03a 	or	r18,r18,r2
 800f294:	908001cc 	andi	r2,r18,7
 800f298:	10000726 	beq	r2,zero,800f2b8 <__divdf3+0x650>
 800f29c:	908003cc 	andi	r2,r18,15
 800f2a0:	10800120 	cmpeqi	r2,r2,4
 800f2a4:	1000041e 	bne	r2,zero,800f2b8 <__divdf3+0x650>
 800f2a8:	90800104 	addi	r2,r18,4
 800f2ac:	14a5803a 	cmpltu	r18,r2,r18
 800f2b0:	2c8b883a 	add	r5,r5,r18
 800f2b4:	1025883a 	mov	r18,r2
 800f2b8:	2880202c 	andhi	r2,r5,128
 800f2bc:	10007526 	beq	r2,zero,800f494 <__divdf3+0x82c>
 800f2c0:	00c00044 	movi	r3,1
 800f2c4:	000b883a 	mov	r5,zero
 800f2c8:	0025883a 	mov	r18,zero
 800f2cc:	003eb706 	br	800edac <__divdf3+0x144>
 800f2d0:	84bf8b2e 	bgeu	r16,r18,800f100 <__divdf3+0x498>
 800f2d4:	d8800017 	ldw	r2,0(sp)
 800f2d8:	80a1883a 	add	r16,r16,r2
 800f2dc:	8085803a 	cmpltu	r2,r16,r2
 800f2e0:	1585883a 	add	r2,r2,r22
 800f2e4:	2089883a 	add	r4,r4,r2
 800f2e8:	a0bfffc4 	addi	r2,r20,-1
 800f2ec:	b100222e 	bgeu	r22,r4,800f378 <__divdf3+0x710>
 800f2f0:	20c05536 	bltu	r4,r3,800f448 <__divdf3+0x7e0>
 800f2f4:	19005326 	beq	r3,r4,800f444 <__divdf3+0x7dc>
 800f2f8:	1029883a 	mov	r20,r2
 800f2fc:	003f8006 	br	800f100 <__divdf3+0x498>
 800f300:	927f3936 	bltu	r18,r9,800efe8 <__divdf3+0x380>
 800f304:	a00897fa 	slli	r4,r20,31
 800f308:	9004d07a 	srli	r2,r18,1
 800f30c:	902097fa 	slli	r16,r18,31
 800f310:	a028d07a 	srli	r20,r20,1
 800f314:	20a4b03a 	or	r18,r4,r2
 800f318:	003f3506 	br	800eff0 <__divdf3+0x388>
 800f31c:	80108ec0 	call	80108ec <__clzsi2>
 800f320:	10c00544 	addi	r3,r2,21
 800f324:	19000748 	cmpgei	r4,r3,29
 800f328:	100b883a 	mov	r5,r2
 800f32c:	d9c00017 	ldw	r7,0(sp)
 800f330:	10800804 	addi	r2,r2,32
 800f334:	203ebc26 	beq	r4,zero,800ee28 <__divdf3+0x1c0>
 800f338:	297ffe04 	addi	r5,r5,-8
 800f33c:	9168983a 	sll	r20,r18,r5
 800f340:	0025883a 	mov	r18,zero
 800f344:	003ebf06 	br	800ee44 <__divdf3+0x1dc>
 800f348:	b809883a 	mov	r4,r23
 800f34c:	80108ec0 	call	80108ec <__clzsi2>
 800f350:	11400544 	addi	r5,r2,21
 800f354:	29000748 	cmpgei	r4,r5,29
 800f358:	1007883a 	mov	r3,r2
 800f35c:	da000017 	ldw	r8,0(sp)
 800f360:	10800804 	addi	r2,r2,32
 800f364:	203ecb26 	beq	r4,zero,800ee94 <__divdf3+0x22c>
 800f368:	18fffe04 	addi	r3,r3,-8
 800f36c:	b8e2983a 	sll	r17,r23,r3
 800f370:	0013883a 	mov	r9,zero
 800f374:	003ece06 	br	800eeb0 <__divdf3+0x248>
 800f378:	b13fdf1e 	bne	r22,r4,800f2f8 <__divdf3+0x690>
 800f37c:	d9400017 	ldw	r5,0(sp)
 800f380:	817fdd36 	bltu	r16,r5,800f2f8 <__divdf3+0x690>
 800f384:	003fda06 	br	800f2f0 <__divdf3+0x688>
 800f388:	227f432e 	bgeu	r4,r9,800f098 <__divdf3+0x430>
 800f38c:	a53fff84 	addi	r20,r20,-2
 800f390:	2589883a 	add	r4,r4,r22
 800f394:	003f4106 	br	800f09c <__divdf3+0x434>
 800f398:	247f2c2e 	bgeu	r4,r17,800f04c <__divdf3+0x3e4>
 800f39c:	18ffff84 	addi	r3,r3,-2
 800f3a0:	2589883a 	add	r4,r4,r22
 800f3a4:	003f2a06 	br	800f050 <__divdf3+0x3e8>
 800f3a8:	00fff844 	movi	r3,-31
 800f3ac:	1c47c83a 	sub	r3,r3,r17
 800f3b0:	29400820 	cmpeqi	r5,r5,32
 800f3b4:	a0c6d83a 	srl	r3,r20,r3
 800f3b8:	2800031e 	bne	r5,zero,800f3c8 <__divdf3+0x760>
 800f3bc:	99410f84 	addi	r5,r19,1086
 800f3c0:	a14a983a 	sll	r5,r20,r5
 800f3c4:	9164b03a 	or	r18,r18,r5
 800f3c8:	9024c03a 	cmpne	r18,r18,zero
 800f3cc:	90e4b03a 	or	r18,r18,r3
 800f3d0:	910001cc 	andi	r4,r18,7
 800f3d4:	20002b1e 	bne	r4,zero,800f484 <__divdf3+0x81c>
 800f3d8:	000b883a 	mov	r5,zero
 800f3dc:	9024d0fa 	srli	r18,r18,3
 800f3e0:	0007883a 	mov	r3,zero
 800f3e4:	9124b03a 	or	r18,r18,r4
 800f3e8:	003e7006 	br	800edac <__divdf3+0x144>
 800f3ec:	1025883a 	mov	r18,r2
 800f3f0:	b9ff8f1e 	bne	r23,r7,800f230 <__divdf3+0x5c8>
 800f3f4:	d8800017 	ldw	r2,0(sp)
 800f3f8:	20bf8d1e 	bne	r4,r2,800f230 <__divdf3+0x5c8>
 800f3fc:	003eb806 	br	800eee0 <__divdf3+0x278>
 800f400:	047f950e 	bge	zero,r17,800f258 <__divdf3+0x5f0>
 800f404:	000d883a 	mov	r6,zero
 800f408:	01000044 	movi	r4,1
 800f40c:	a129883a 	add	r20,r20,r4
 800f410:	003eb706 	br	800eef0 <__divdf3+0x288>
 800f414:	908003cc 	andi	r2,r18,15
 800f418:	10800118 	cmpnei	r2,r2,4
 800f41c:	103eb326 	beq	r2,zero,800eeec <__divdf3+0x284>
 800f420:	91800104 	addi	r6,r18,4
 800f424:	013ffec4 	movi	r4,-5
 800f428:	300cd0fa 	srli	r6,r6,3
 800f42c:	2489803a 	cmpltu	r4,r4,r18
 800f430:	003ff606 	br	800f40c <__divdf3+0x7a4>
 800f434:	1021883a 	mov	r16,r2
 800f438:	003f6706 	br	800f1d8 <__divdf3+0x570>
 800f43c:	1013883a 	mov	r9,r2
 800f440:	003f4c06 	br	800f174 <__divdf3+0x50c>
 800f444:	84bfac2e 	bgeu	r16,r18,800f2f8 <__divdf3+0x690>
 800f448:	d8800017 	ldw	r2,0(sp)
 800f44c:	a53fff84 	addi	r20,r20,-2
 800f450:	80a1883a 	add	r16,r16,r2
 800f454:	8085803a 	cmpltu	r2,r16,r2
 800f458:	1585883a 	add	r2,r2,r22
 800f45c:	2089883a 	add	r4,r4,r2
 800f460:	003f2706 	br	800f100 <__divdf3+0x498>
 800f464:	d8c00017 	ldw	r3,0(sp)
 800f468:	94bfff84 	addi	r18,r18,-2
 800f46c:	18c5883a 	add	r2,r3,r3
 800f470:	10c7803a 	cmpltu	r3,r2,r3
 800f474:	1d8d883a 	add	r6,r3,r22
 800f478:	b9af883a 	add	r23,r23,r6
 800f47c:	d8800015 	stw	r2,0(sp)
 800f480:	003fdb06 	br	800f3f0 <__divdf3+0x788>
 800f484:	908003cc 	andi	r2,r18,15
 800f488:	10800118 	cmpnei	r2,r2,4
 800f48c:	000b883a 	mov	r5,zero
 800f490:	103f851e 	bne	r2,zero,800f2a8 <__divdf3+0x640>
 800f494:	2804927a 	slli	r2,r5,9
 800f498:	2808977a 	slli	r4,r5,29
 800f49c:	100ad33a 	srli	r5,r2,12
 800f4a0:	003fce06 	br	800f3dc <__divdf3+0x774>
 800f4a4:	00800434 	movhi	r2,16
 800f4a8:	a1400234 	orhi	r5,r20,8
 800f4ac:	10bfffc4 	addi	r2,r2,-1
 800f4b0:	288a703a 	and	r5,r5,r2
 800f4b4:	003eb706 	br	800ef94 <__divdf3+0x32c>
 800f4b8:	d8c00017 	ldw	r3,0(sp)
 800f4bc:	193fe936 	bltu	r3,r4,800f464 <__divdf3+0x7fc>
 800f4c0:	1025883a 	mov	r18,r2
 800f4c4:	003fcb06 	br	800f3f4 <__divdf3+0x78c>

0800f4c8 <__eqdf2>:
 800f4c8:	2810d53a 	srli	r8,r5,20
 800f4cc:	3806d53a 	srli	r3,r7,20
 800f4d0:	00800434 	movhi	r2,16
 800f4d4:	4201ffcc 	andi	r8,r8,2047
 800f4d8:	10bfffc4 	addi	r2,r2,-1
 800f4dc:	4241ffd8 	cmpnei	r9,r8,2047
 800f4e0:	2814d7fa 	srli	r10,r5,31
 800f4e4:	3816d7fa 	srli	r11,r7,31
 800f4e8:	288a703a 	and	r5,r5,r2
 800f4ec:	388e703a 	and	r7,r7,r2
 800f4f0:	1881ffcc 	andi	r2,r3,2047
 800f4f4:	48000626 	beq	r9,zero,800f510 <__eqdf2+0x48>
 800f4f8:	10c1ffe0 	cmpeqi	r3,r2,2047
 800f4fc:	1800021e 	bne	r3,zero,800f508 <__eqdf2+0x40>
 800f500:	4080011e 	bne	r8,r2,800f508 <__eqdf2+0x40>
 800f504:	29c00826 	beq	r5,r7,800f528 <__eqdf2+0x60>
 800f508:	00800044 	movi	r2,1
 800f50c:	f800283a 	ret
 800f510:	2906b03a 	or	r3,r5,r4
 800f514:	183ffc1e 	bne	r3,zero,800f508 <__eqdf2+0x40>
 800f518:	1081ffd8 	cmpnei	r2,r2,2047
 800f51c:	103ffa1e 	bne	r2,zero,800f508 <__eqdf2+0x40>
 800f520:	398eb03a 	or	r7,r7,r6
 800f524:	383ff81e 	bne	r7,zero,800f508 <__eqdf2+0x40>
 800f528:	21bff71e 	bne	r4,r6,800f508 <__eqdf2+0x40>
 800f52c:	52c00426 	beq	r10,r11,800f540 <__eqdf2+0x78>
 800f530:	403ff51e 	bne	r8,zero,800f508 <__eqdf2+0x40>
 800f534:	290ab03a 	or	r5,r5,r4
 800f538:	2804c03a 	cmpne	r2,r5,zero
 800f53c:	f800283a 	ret
 800f540:	0005883a 	mov	r2,zero
 800f544:	f800283a 	ret

0800f548 <__gedf2>:
 800f548:	2810d53a 	srli	r8,r5,20
 800f54c:	3812d53a 	srli	r9,r7,20
 800f550:	00c00434 	movhi	r3,16
 800f554:	4201ffcc 	andi	r8,r8,2047
 800f558:	18ffffc4 	addi	r3,r3,-1
 800f55c:	4281ffd8 	cmpnei	r10,r8,2047
 800f560:	2816d7fa 	srli	r11,r5,31
 800f564:	3804d7fa 	srli	r2,r7,31
 800f568:	28ca703a 	and	r5,r5,r3
 800f56c:	38ce703a 	and	r7,r7,r3
 800f570:	48c1ffcc 	andi	r3,r9,2047
 800f574:	50000b26 	beq	r10,zero,800f5a4 <__gedf2+0x5c>
 800f578:	1a41ffd8 	cmpnei	r9,r3,2047
 800f57c:	48000d26 	beq	r9,zero,800f5b4 <__gedf2+0x6c>
 800f580:	4000191e 	bne	r8,zero,800f5e8 <__gedf2+0xa0>
 800f584:	2914b03a 	or	r10,r5,r4
 800f588:	5013003a 	cmpeq	r9,r10,zero
 800f58c:	1800131e 	bne	r3,zero,800f5dc <__gedf2+0x94>
 800f590:	3998b03a 	or	r12,r7,r6
 800f594:	6000111e 	bne	r12,zero,800f5dc <__gedf2+0x94>
 800f598:	50000a1e 	bne	r10,zero,800f5c4 <__gedf2+0x7c>
 800f59c:	0005883a 	mov	r2,zero
 800f5a0:	f800283a 	ret
 800f5a4:	2912b03a 	or	r9,r5,r4
 800f5a8:	48001e1e 	bne	r9,zero,800f624 <__gedf2+0xdc>
 800f5ac:	1a41ffe0 	cmpeqi	r9,r3,2047
 800f5b0:	48000d26 	beq	r9,zero,800f5e8 <__gedf2+0xa0>
 800f5b4:	3992b03a 	or	r9,r7,r6
 800f5b8:	48001a1e 	bne	r9,zero,800f624 <__gedf2+0xdc>
 800f5bc:	40000526 	beq	r8,zero,800f5d4 <__gedf2+0x8c>
 800f5c0:	58800d26 	beq	r11,r2,800f5f8 <__gedf2+0xb0>
 800f5c4:	00800044 	movi	r2,1
 800f5c8:	58000626 	beq	r11,zero,800f5e4 <__gedf2+0x9c>
 800f5cc:	00bfffc4 	movi	r2,-1
 800f5d0:	f800283a 	ret
 800f5d4:	2912b03a 	or	r9,r5,r4
 800f5d8:	4813003a 	cmpeq	r9,r9,zero
 800f5dc:	483ff826 	beq	r9,zero,800f5c0 <__gedf2+0x78>
 800f5e0:	103ffa26 	beq	r2,zero,800f5cc <__gedf2+0x84>
 800f5e4:	f800283a 	ret
 800f5e8:	183ff51e 	bne	r3,zero,800f5c0 <__gedf2+0x78>
 800f5ec:	3992b03a 	or	r9,r7,r6
 800f5f0:	483ff31e 	bne	r9,zero,800f5c0 <__gedf2+0x78>
 800f5f4:	003ff306 	br	800f5c4 <__gedf2+0x7c>
 800f5f8:	1a000716 	blt	r3,r8,800f618 <__gedf2+0xd0>
 800f5fc:	40fff816 	blt	r8,r3,800f5e0 <__gedf2+0x98>
 800f600:	397ff036 	bltu	r7,r5,800f5c4 <__gedf2+0x7c>
 800f604:	29c00926 	beq	r5,r7,800f62c <__gedf2+0xe4>
 800f608:	29ffe42e 	bgeu	r5,r7,800f59c <__gedf2+0x54>
 800f60c:	583fef26 	beq	r11,zero,800f5cc <__gedf2+0x84>
 800f610:	5805883a 	mov	r2,r11
 800f614:	f800283a 	ret
 800f618:	103fec1e 	bne	r2,zero,800f5cc <__gedf2+0x84>
 800f61c:	00800044 	movi	r2,1
 800f620:	f800283a 	ret
 800f624:	00bfff84 	movi	r2,-2
 800f628:	f800283a 	ret
 800f62c:	313fe536 	bltu	r6,r4,800f5c4 <__gedf2+0x7c>
 800f630:	21bfda2e 	bgeu	r4,r6,800f59c <__gedf2+0x54>
 800f634:	003ff506 	br	800f60c <__gedf2+0xc4>

0800f638 <__ledf2>:
 800f638:	2810d53a 	srli	r8,r5,20
 800f63c:	3812d53a 	srli	r9,r7,20
 800f640:	00c00434 	movhi	r3,16
 800f644:	4201ffcc 	andi	r8,r8,2047
 800f648:	18ffffc4 	addi	r3,r3,-1
 800f64c:	4281ffd8 	cmpnei	r10,r8,2047
 800f650:	2816d7fa 	srli	r11,r5,31
 800f654:	3804d7fa 	srli	r2,r7,31
 800f658:	28ca703a 	and	r5,r5,r3
 800f65c:	38ce703a 	and	r7,r7,r3
 800f660:	48c1ffcc 	andi	r3,r9,2047
 800f664:	50000b26 	beq	r10,zero,800f694 <__ledf2+0x5c>
 800f668:	1a41ffd8 	cmpnei	r9,r3,2047
 800f66c:	48000d26 	beq	r9,zero,800f6a4 <__ledf2+0x6c>
 800f670:	40001b1e 	bne	r8,zero,800f6e0 <__ledf2+0xa8>
 800f674:	2914b03a 	or	r10,r5,r4
 800f678:	5013003a 	cmpeq	r9,r10,zero
 800f67c:	18000e1e 	bne	r3,zero,800f6b8 <__ledf2+0x80>
 800f680:	3998b03a 	or	r12,r7,r6
 800f684:	60000c1e 	bne	r12,zero,800f6b8 <__ledf2+0x80>
 800f688:	50000d1e 	bne	r10,zero,800f6c0 <__ledf2+0x88>
 800f68c:	0005883a 	mov	r2,zero
 800f690:	f800283a 	ret
 800f694:	2912b03a 	or	r9,r5,r4
 800f698:	48000d1e 	bne	r9,zero,800f6d0 <__ledf2+0x98>
 800f69c:	1a41ffe0 	cmpeqi	r9,r3,2047
 800f6a0:	48000f26 	beq	r9,zero,800f6e0 <__ledf2+0xa8>
 800f6a4:	3992b03a 	or	r9,r7,r6
 800f6a8:	4800091e 	bne	r9,zero,800f6d0 <__ledf2+0x98>
 800f6ac:	4000031e 	bne	r8,zero,800f6bc <__ledf2+0x84>
 800f6b0:	2912b03a 	or	r9,r5,r4
 800f6b4:	4813003a 	cmpeq	r9,r9,zero
 800f6b8:	4800071e 	bne	r9,zero,800f6d8 <__ledf2+0xa0>
 800f6bc:	58800c26 	beq	r11,r2,800f6f0 <__ledf2+0xb8>
 800f6c0:	00800044 	movi	r2,1
 800f6c4:	58000526 	beq	r11,zero,800f6dc <__ledf2+0xa4>
 800f6c8:	00bfffc4 	movi	r2,-1
 800f6cc:	f800283a 	ret
 800f6d0:	00800084 	movi	r2,2
 800f6d4:	f800283a 	ret
 800f6d8:	103ffb26 	beq	r2,zero,800f6c8 <__ledf2+0x90>
 800f6dc:	f800283a 	ret
 800f6e0:	183ff61e 	bne	r3,zero,800f6bc <__ledf2+0x84>
 800f6e4:	3992b03a 	or	r9,r7,r6
 800f6e8:	483ff41e 	bne	r9,zero,800f6bc <__ledf2+0x84>
 800f6ec:	003ff406 	br	800f6c0 <__ledf2+0x88>
 800f6f0:	1a00030e 	bge	r3,r8,800f700 <__ledf2+0xc8>
 800f6f4:	103ff41e 	bne	r2,zero,800f6c8 <__ledf2+0x90>
 800f6f8:	00800044 	movi	r2,1
 800f6fc:	f800283a 	ret
 800f700:	40fff516 	blt	r8,r3,800f6d8 <__ledf2+0xa0>
 800f704:	397fee36 	bltu	r7,r5,800f6c0 <__ledf2+0x88>
 800f708:	29c00426 	beq	r5,r7,800f71c <__ledf2+0xe4>
 800f70c:	29ffdf2e 	bgeu	r5,r7,800f68c <__ledf2+0x54>
 800f710:	583fed26 	beq	r11,zero,800f6c8 <__ledf2+0x90>
 800f714:	5805883a 	mov	r2,r11
 800f718:	f800283a 	ret
 800f71c:	313fe836 	bltu	r6,r4,800f6c0 <__ledf2+0x88>
 800f720:	21bfda2e 	bgeu	r4,r6,800f68c <__ledf2+0x54>
 800f724:	003ffa06 	br	800f710 <__ledf2+0xd8>

0800f728 <__muldf3>:
 800f728:	2804d53a 	srli	r2,r5,20
 800f72c:	defff504 	addi	sp,sp,-44
 800f730:	02000434 	movhi	r8,16
 800f734:	df000915 	stw	fp,36(sp)
 800f738:	dd000515 	stw	r20,20(sp)
 800f73c:	dcc00415 	stw	r19,16(sp)
 800f740:	dc000115 	stw	r16,4(sp)
 800f744:	423fffc4 	addi	r8,r8,-1
 800f748:	dfc00a15 	stw	ra,40(sp)
 800f74c:	ddc00815 	stw	r23,32(sp)
 800f750:	dd800715 	stw	r22,28(sp)
 800f754:	dd400615 	stw	r21,24(sp)
 800f758:	dc800315 	stw	r18,12(sp)
 800f75c:	dc400215 	stw	r17,8(sp)
 800f760:	1081ffcc 	andi	r2,r2,2047
 800f764:	2828d7fa 	srli	r20,r5,31
 800f768:	2027883a 	mov	r19,r4
 800f76c:	3039883a 	mov	fp,r6
 800f770:	2a20703a 	and	r16,r5,r8
 800f774:	10005a26 	beq	r2,zero,800f8e0 <__muldf3+0x1b8>
 800f778:	10c1ffe0 	cmpeqi	r3,r2,2047
 800f77c:	18006c1e 	bne	r3,zero,800f930 <__muldf3+0x208>
 800f780:	800a90fa 	slli	r5,r16,3
 800f784:	2020d77a 	srli	r16,r4,29
 800f788:	202490fa 	slli	r18,r4,3
 800f78c:	14ff0044 	addi	r19,r2,-1023
 800f790:	8160b03a 	or	r16,r16,r5
 800f794:	84002034 	orhi	r16,r16,128
 800f798:	002b883a 	mov	r21,zero
 800f79c:	002d883a 	mov	r22,zero
 800f7a0:	3804d53a 	srli	r2,r7,20
 800f7a4:	00c00434 	movhi	r3,16
 800f7a8:	18ffffc4 	addi	r3,r3,-1
 800f7ac:	1081ffcc 	andi	r2,r2,2047
 800f7b0:	382ed7fa 	srli	r23,r7,31
 800f7b4:	38e2703a 	and	r17,r7,r3
 800f7b8:	10006426 	beq	r2,zero,800f94c <__muldf3+0x224>
 800f7bc:	10c1ffe0 	cmpeqi	r3,r2,2047
 800f7c0:	1800211e 	bne	r3,zero,800f848 <__muldf3+0x120>
 800f7c4:	880690fa 	slli	r3,r17,3
 800f7c8:	e022d77a 	srli	r17,fp,29
 800f7cc:	e00a90fa 	slli	r5,fp,3
 800f7d0:	10bf0044 	addi	r2,r2,-1023
 800f7d4:	88e2b03a 	or	r17,r17,r3
 800f7d8:	8c402034 	orhi	r17,r17,128
 800f7dc:	98a7883a 	add	r19,r19,r2
 800f7e0:	0007883a 	mov	r3,zero
 800f7e4:	a9000428 	cmpgeui	r4,r21,16
 800f7e8:	a5ccf03a 	xor	r6,r20,r23
 800f7ec:	9a000044 	addi	r8,r19,1
 800f7f0:	20006b1e 	bne	r4,zero,800f9a0 <__muldf3+0x278>
 800f7f4:	a80490ba 	slli	r2,r21,2
 800f7f8:	01020074 	movhi	r4,2049
 800f7fc:	1109883a 	add	r4,r2,r4
 800f800:	20be0217 	ldw	r2,-2040(r4)
 800f804:	1000683a 	jmp	r2
 800f808:	0800f9a0 	cmpeqi	zero,at,998
 800f80c:	0800f868 	cmpgeui	zero,at,993
 800f810:	0800f868 	cmpgeui	zero,at,993
 800f814:	0800f864 	muli	zero,at,993
 800f818:	0800f874 	orhi	zero,at,993
 800f81c:	0800f874 	orhi	zero,at,993
 800f820:	0800fbf0 	cmpltui	zero,at,1007
 800f824:	0800f864 	muli	zero,at,993
 800f828:	0800f874 	orhi	zero,at,993
 800f82c:	0800fbf0 	cmpltui	zero,at,1007
 800f830:	0800f874 	orhi	zero,at,993
 800f834:	0800f864 	muli	zero,at,993
 800f838:	0800fba0 	cmpeqi	zero,at,1006
 800f83c:	0800fba0 	cmpeqi	zero,at,1006
 800f840:	0800fba0 	cmpeqi	zero,at,1006
 800f844:	0800fc7c 	xorhi	zero,at,1009
 800f848:	e44ab03a 	or	r5,fp,r17
 800f84c:	9cc1ffc4 	addi	r19,r19,2047
 800f850:	2800d51e 	bne	r5,zero,800fba8 <__muldf3+0x480>
 800f854:	ad400094 	ori	r21,r21,2
 800f858:	0023883a 	mov	r17,zero
 800f85c:	00c00084 	movi	r3,2
 800f860:	003fe006 	br	800f7e4 <__muldf3+0xbc>
 800f864:	b80d883a 	mov	r6,r23
 800f868:	8821883a 	mov	r16,r17
 800f86c:	2825883a 	mov	r18,r5
 800f870:	182d883a 	mov	r22,r3
 800f874:	b08000a0 	cmpeqi	r2,r22,2
 800f878:	1000451e 	bne	r2,zero,800f990 <__muldf3+0x268>
 800f87c:	b08000e0 	cmpeqi	r2,r22,3
 800f880:	1001401e 	bne	r2,zero,800fd84 <__muldf3+0x65c>
 800f884:	b0800060 	cmpeqi	r2,r22,1
 800f888:	1000ab26 	beq	r2,zero,800fb38 <__muldf3+0x410>
 800f88c:	0007883a 	mov	r3,zero
 800f890:	0021883a 	mov	r16,zero
 800f894:	0025883a 	mov	r18,zero
 800f898:	30803fcc 	andi	r2,r6,255
 800f89c:	1806953a 	slli	r3,r3,20
 800f8a0:	100497fa 	slli	r2,r2,31
 800f8a4:	1c06b03a 	or	r3,r3,r16
 800f8a8:	1886b03a 	or	r3,r3,r2
 800f8ac:	9005883a 	mov	r2,r18
 800f8b0:	dfc00a17 	ldw	ra,40(sp)
 800f8b4:	df000917 	ldw	fp,36(sp)
 800f8b8:	ddc00817 	ldw	r23,32(sp)
 800f8bc:	dd800717 	ldw	r22,28(sp)
 800f8c0:	dd400617 	ldw	r21,24(sp)
 800f8c4:	dd000517 	ldw	r20,20(sp)
 800f8c8:	dcc00417 	ldw	r19,16(sp)
 800f8cc:	dc800317 	ldw	r18,12(sp)
 800f8d0:	dc400217 	ldw	r17,8(sp)
 800f8d4:	dc000117 	ldw	r16,4(sp)
 800f8d8:	dec00b04 	addi	sp,sp,44
 800f8dc:	f800283a 	ret
 800f8e0:	8124b03a 	or	r18,r16,r4
 800f8e4:	9000bd26 	beq	r18,zero,800fbdc <__muldf3+0x4b4>
 800f8e8:	d9c00015 	stw	r7,0(sp)
 800f8ec:	8000ff26 	beq	r16,zero,800fcec <__muldf3+0x5c4>
 800f8f0:	8009883a 	mov	r4,r16
 800f8f4:	80108ec0 	call	80108ec <__clzsi2>
 800f8f8:	d9c00017 	ldw	r7,0(sp)
 800f8fc:	113ffd44 	addi	r4,r2,-11
 800f900:	00c00744 	movi	r3,29
 800f904:	14bffe04 	addi	r18,r2,-8
 800f908:	1907c83a 	sub	r3,r3,r4
 800f90c:	84a0983a 	sll	r16,r16,r18
 800f910:	98c6d83a 	srl	r3,r19,r3
 800f914:	9ca4983a 	sll	r18,r19,r18
 800f918:	1c20b03a 	or	r16,r3,r16
 800f91c:	04ff0344 	movi	r19,-1011
 800f920:	98a7c83a 	sub	r19,r19,r2
 800f924:	002b883a 	mov	r21,zero
 800f928:	002d883a 	mov	r22,zero
 800f92c:	003f9c06 	br	800f7a0 <__muldf3+0x78>
 800f930:	8124b03a 	or	r18,r16,r4
 800f934:	9000a41e 	bne	r18,zero,800fbc8 <__muldf3+0x4a0>
 800f938:	0021883a 	mov	r16,zero
 800f93c:	05400204 	movi	r21,8
 800f940:	04c1ffc4 	movi	r19,2047
 800f944:	05800084 	movi	r22,2
 800f948:	003f9506 	br	800f7a0 <__muldf3+0x78>
 800f94c:	e44ab03a 	or	r5,fp,r17
 800f950:	28009926 	beq	r5,zero,800fbb8 <__muldf3+0x490>
 800f954:	8800da26 	beq	r17,zero,800fcc0 <__muldf3+0x598>
 800f958:	8809883a 	mov	r4,r17
 800f95c:	80108ec0 	call	80108ec <__clzsi2>
 800f960:	11bffd44 	addi	r6,r2,-11
 800f964:	01000744 	movi	r4,29
 800f968:	117ffe04 	addi	r5,r2,-8
 800f96c:	2189c83a 	sub	r4,r4,r6
 800f970:	8962983a 	sll	r17,r17,r5
 800f974:	e108d83a 	srl	r4,fp,r4
 800f978:	e14a983a 	sll	r5,fp,r5
 800f97c:	2462b03a 	or	r17,r4,r17
 800f980:	9885c83a 	sub	r2,r19,r2
 800f984:	14ff0344 	addi	r19,r2,-1011
 800f988:	0007883a 	mov	r3,zero
 800f98c:	003f9506 	br	800f7e4 <__muldf3+0xbc>
 800f990:	00c1ffc4 	movi	r3,2047
 800f994:	0021883a 	mov	r16,zero
 800f998:	0025883a 	mov	r18,zero
 800f99c:	003fbe06 	br	800f898 <__muldf3+0x170>
 800f9a0:	9008d43a 	srli	r4,r18,16
 800f9a4:	281ed43a 	srli	r15,r5,16
 800f9a8:	94bfffcc 	andi	r18,r18,65535
 800f9ac:	297fffcc 	andi	r5,r5,65535
 800f9b0:	2c85383a 	mul	r2,r5,r18
 800f9b4:	214f383a 	mul	r7,r4,r5
 800f9b8:	7c87383a 	mul	r3,r15,r18
 800f9bc:	1012d43a 	srli	r9,r2,16
 800f9c0:	23dd383a 	mul	r14,r4,r15
 800f9c4:	19c7883a 	add	r3,r3,r7
 800f9c8:	48d3883a 	add	r9,r9,r3
 800f9cc:	49c0022e 	bgeu	r9,r7,800f9d8 <__muldf3+0x2b0>
 800f9d0:	00c00074 	movhi	r3,1
 800f9d4:	70dd883a 	add	r14,r14,r3
 800f9d8:	881ad43a 	srli	r13,r17,16
 800f9dc:	8c7fffcc 	andi	r17,r17,65535
 800f9e0:	8c87383a 	mul	r3,r17,r18
 800f9e4:	244f383a 	mul	r7,r4,r17
 800f9e8:	6ca5383a 	mul	r18,r13,r18
 800f9ec:	1816d43a 	srli	r11,r3,16
 800f9f0:	4814943a 	slli	r10,r9,16
 800f9f4:	91e5883a 	add	r18,r18,r7
 800f9f8:	10bfffcc 	andi	r2,r2,65535
 800f9fc:	5c97883a 	add	r11,r11,r18
 800fa00:	4818d43a 	srli	r12,r9,16
 800fa04:	2349383a 	mul	r4,r4,r13
 800fa08:	5095883a 	add	r10,r10,r2
 800fa0c:	59c0022e 	bgeu	r11,r7,800fa18 <__muldf3+0x2f0>
 800fa10:	00800074 	movhi	r2,1
 800fa14:	2089883a 	add	r4,r4,r2
 800fa18:	8028d43a 	srli	r20,r16,16
 800fa1c:	827fffcc 	andi	r9,r16,65535
 800fa20:	2a6b383a 	mul	r21,r5,r9
 800fa24:	7a45383a 	mul	r2,r15,r9
 800fa28:	a14b383a 	mul	r5,r20,r5
 800fa2c:	580e943a 	slli	r7,r11,16
 800fa30:	a82cd43a 	srli	r22,r21,16
 800fa34:	5824d43a 	srli	r18,r11,16
 800fa38:	18ffffcc 	andi	r3,r3,65535
 800fa3c:	1145883a 	add	r2,r2,r5
 800fa40:	38cf883a 	add	r7,r7,r3
 800fa44:	b085883a 	add	r2,r22,r2
 800fa48:	7d1f383a 	mul	r15,r15,r20
 800fa4c:	9117883a 	add	r11,r18,r4
 800fa50:	61c7883a 	add	r3,r12,r7
 800fa54:	1140022e 	bgeu	r2,r5,800fa60 <__muldf3+0x338>
 800fa58:	01000074 	movhi	r4,1
 800fa5c:	791f883a 	add	r15,r15,r4
 800fa60:	8a65383a 	mul	r18,r17,r9
 800fa64:	6a53383a 	mul	r9,r13,r9
 800fa68:	a463383a 	mul	r17,r20,r17
 800fa6c:	9020d43a 	srli	r16,r18,16
 800fa70:	100ad43a 	srli	r5,r2,16
 800fa74:	1004943a 	slli	r2,r2,16
 800fa78:	4c53883a 	add	r9,r9,r17
 800fa7c:	ab3fffcc 	andi	r12,r21,65535
 800fa80:	8253883a 	add	r9,r16,r9
 800fa84:	6d1b383a 	mul	r13,r13,r20
 800fa88:	2bdf883a 	add	r15,r5,r15
 800fa8c:	1305883a 	add	r2,r2,r12
 800fa90:	4c40022e 	bgeu	r9,r17,800fa9c <__muldf3+0x374>
 800fa94:	01000074 	movhi	r4,1
 800fa98:	691b883a 	add	r13,r13,r4
 800fa9c:	4808943a 	slli	r4,r9,16
 800faa0:	917fffcc 	andi	r5,r18,65535
 800faa4:	1b87883a 	add	r3,r3,r14
 800faa8:	2149883a 	add	r4,r4,r5
 800faac:	19cf803a 	cmpltu	r7,r3,r7
 800fab0:	22c9883a 	add	r4,r4,r11
 800fab4:	1887883a 	add	r3,r3,r2
 800fab8:	21dd883a 	add	r14,r4,r7
 800fabc:	1885803a 	cmpltu	r2,r3,r2
 800fac0:	73cb883a 	add	r5,r14,r15
 800fac4:	4812d43a 	srli	r9,r9,16
 800fac8:	2899883a 	add	r12,r5,r2
 800facc:	22c9803a 	cmpltu	r4,r4,r11
 800fad0:	71e1803a 	cmpltu	r16,r14,r7
 800fad4:	2bcb803a 	cmpltu	r5,r5,r15
 800fad8:	2420b03a 	or	r16,r4,r16
 800fadc:	6085803a 	cmpltu	r2,r12,r2
 800fae0:	2884b03a 	or	r2,r5,r2
 800fae4:	8261883a 	add	r16,r16,r9
 800fae8:	1824927a 	slli	r18,r3,9
 800faec:	80a1883a 	add	r16,r16,r2
 800faf0:	8361883a 	add	r16,r16,r13
 800faf4:	8020927a 	slli	r16,r16,9
 800faf8:	1806d5fa 	srli	r3,r3,23
 800fafc:	600ad5fa 	srli	r5,r12,23
 800fb00:	6004927a 	slli	r2,r12,9
 800fb04:	92a4b03a 	or	r18,r18,r10
 800fb08:	9024c03a 	cmpne	r18,r18,zero
 800fb0c:	90e4b03a 	or	r18,r18,r3
 800fb10:	80c0402c 	andhi	r3,r16,256
 800fb14:	90a4b03a 	or	r18,r18,r2
 800fb18:	8160b03a 	or	r16,r16,r5
 800fb1c:	18007e26 	beq	r3,zero,800fd18 <__muldf3+0x5f0>
 800fb20:	9006d07a 	srli	r3,r18,1
 800fb24:	800497fa 	slli	r2,r16,31
 800fb28:	9480004c 	andi	r18,r18,1
 800fb2c:	8020d07a 	srli	r16,r16,1
 800fb30:	1c86b03a 	or	r3,r3,r18
 800fb34:	18a4b03a 	or	r18,r3,r2
 800fb38:	4100ffc4 	addi	r4,r8,1023
 800fb3c:	0100320e 	bge	zero,r4,800fc08 <__muldf3+0x4e0>
 800fb40:	908001cc 	andi	r2,r18,7
 800fb44:	10000726 	beq	r2,zero,800fb64 <__muldf3+0x43c>
 800fb48:	908003cc 	andi	r2,r18,15
 800fb4c:	10800120 	cmpeqi	r2,r2,4
 800fb50:	1000041e 	bne	r2,zero,800fb64 <__muldf3+0x43c>
 800fb54:	90800104 	addi	r2,r18,4
 800fb58:	14a5803a 	cmpltu	r18,r2,r18
 800fb5c:	84a1883a 	add	r16,r16,r18
 800fb60:	1025883a 	mov	r18,r2
 800fb64:	8080402c 	andhi	r2,r16,256
 800fb68:	10000426 	beq	r2,zero,800fb7c <__muldf3+0x454>
 800fb6c:	00bfc034 	movhi	r2,65280
 800fb70:	10bfffc4 	addi	r2,r2,-1
 800fb74:	80a0703a 	and	r16,r16,r2
 800fb78:	41010004 	addi	r4,r8,1024
 800fb7c:	2081ffc8 	cmpgei	r2,r4,2047
 800fb80:	103f831e 	bne	r2,zero,800f990 <__muldf3+0x268>
 800fb84:	8004977a 	slli	r2,r16,29
 800fb88:	9024d0fa 	srli	r18,r18,3
 800fb8c:	8020927a 	slli	r16,r16,9
 800fb90:	20c1ffcc 	andi	r3,r4,2047
 800fb94:	14a4b03a 	or	r18,r2,r18
 800fb98:	8020d33a 	srli	r16,r16,12
 800fb9c:	003f3e06 	br	800f898 <__muldf3+0x170>
 800fba0:	a00d883a 	mov	r6,r20
 800fba4:	003f3306 	br	800f874 <__muldf3+0x14c>
 800fba8:	ad4000d4 	ori	r21,r21,3
 800fbac:	e00b883a 	mov	r5,fp
 800fbb0:	00c000c4 	movi	r3,3
 800fbb4:	003f0b06 	br	800f7e4 <__muldf3+0xbc>
 800fbb8:	ad400054 	ori	r21,r21,1
 800fbbc:	0023883a 	mov	r17,zero
 800fbc0:	00c00044 	movi	r3,1
 800fbc4:	003f0706 	br	800f7e4 <__muldf3+0xbc>
 800fbc8:	2025883a 	mov	r18,r4
 800fbcc:	05400304 	movi	r21,12
 800fbd0:	04c1ffc4 	movi	r19,2047
 800fbd4:	058000c4 	movi	r22,3
 800fbd8:	003ef106 	br	800f7a0 <__muldf3+0x78>
 800fbdc:	0021883a 	mov	r16,zero
 800fbe0:	05400104 	movi	r21,4
 800fbe4:	0027883a 	mov	r19,zero
 800fbe8:	05800044 	movi	r22,1
 800fbec:	003eec06 	br	800f7a0 <__muldf3+0x78>
 800fbf0:	04000434 	movhi	r16,16
 800fbf4:	000d883a 	mov	r6,zero
 800fbf8:	843fffc4 	addi	r16,r16,-1
 800fbfc:	04bfffc4 	movi	r18,-1
 800fc00:	00c1ffc4 	movi	r3,2047
 800fc04:	003f2406 	br	800f898 <__muldf3+0x170>
 800fc08:	00800044 	movi	r2,1
 800fc0c:	1105c83a 	sub	r2,r2,r4
 800fc10:	10c00e48 	cmpgei	r3,r2,57
 800fc14:	183f1d1e 	bne	r3,zero,800f88c <__muldf3+0x164>
 800fc18:	10c00808 	cmpgei	r3,r2,32
 800fc1c:	1800401e 	bne	r3,zero,800fd20 <__muldf3+0x5f8>
 800fc20:	42010784 	addi	r8,r8,1054
 800fc24:	8206983a 	sll	r3,r16,r8
 800fc28:	9088d83a 	srl	r4,r18,r2
 800fc2c:	9210983a 	sll	r8,r18,r8
 800fc30:	80a0d83a 	srl	r16,r16,r2
 800fc34:	1904b03a 	or	r2,r3,r4
 800fc38:	4024c03a 	cmpne	r18,r8,zero
 800fc3c:	1484b03a 	or	r2,r2,r18
 800fc40:	10c001cc 	andi	r3,r2,7
 800fc44:	18000726 	beq	r3,zero,800fc64 <__muldf3+0x53c>
 800fc48:	10c003cc 	andi	r3,r2,15
 800fc4c:	18c00120 	cmpeqi	r3,r3,4
 800fc50:	1800041e 	bne	r3,zero,800fc64 <__muldf3+0x53c>
 800fc54:	10c00104 	addi	r3,r2,4
 800fc58:	1885803a 	cmpltu	r2,r3,r2
 800fc5c:	80a1883a 	add	r16,r16,r2
 800fc60:	1805883a 	mov	r2,r3
 800fc64:	80c0202c 	andhi	r3,r16,128
 800fc68:	18004226 	beq	r3,zero,800fd74 <__muldf3+0x64c>
 800fc6c:	00c00044 	movi	r3,1
 800fc70:	0021883a 	mov	r16,zero
 800fc74:	0025883a 	mov	r18,zero
 800fc78:	003f0706 	br	800f898 <__muldf3+0x170>
 800fc7c:	8080022c 	andhi	r2,r16,8
 800fc80:	10000926 	beq	r2,zero,800fca8 <__muldf3+0x580>
 800fc84:	8880022c 	andhi	r2,r17,8
 800fc88:	1000071e 	bne	r2,zero,800fca8 <__muldf3+0x580>
 800fc8c:	00800434 	movhi	r2,16
 800fc90:	8c000234 	orhi	r16,r17,8
 800fc94:	10bfffc4 	addi	r2,r2,-1
 800fc98:	80a0703a 	and	r16,r16,r2
 800fc9c:	b80d883a 	mov	r6,r23
 800fca0:	2825883a 	mov	r18,r5
 800fca4:	003fd606 	br	800fc00 <__muldf3+0x4d8>
 800fca8:	00800434 	movhi	r2,16
 800fcac:	84000234 	orhi	r16,r16,8
 800fcb0:	10bfffc4 	addi	r2,r2,-1
 800fcb4:	80a0703a 	and	r16,r16,r2
 800fcb8:	a00d883a 	mov	r6,r20
 800fcbc:	003fd006 	br	800fc00 <__muldf3+0x4d8>
 800fcc0:	e009883a 	mov	r4,fp
 800fcc4:	80108ec0 	call	80108ec <__clzsi2>
 800fcc8:	11800544 	addi	r6,r2,21
 800fccc:	31000748 	cmpgei	r4,r6,29
 800fcd0:	1007883a 	mov	r3,r2
 800fcd4:	10800804 	addi	r2,r2,32
 800fcd8:	203f2226 	beq	r4,zero,800f964 <__muldf3+0x23c>
 800fcdc:	1c7ffe04 	addi	r17,r3,-8
 800fce0:	e462983a 	sll	r17,fp,r17
 800fce4:	000b883a 	mov	r5,zero
 800fce8:	003f2506 	br	800f980 <__muldf3+0x258>
 800fcec:	80108ec0 	call	80108ec <__clzsi2>
 800fcf0:	11000544 	addi	r4,r2,21
 800fcf4:	21400748 	cmpgei	r5,r4,29
 800fcf8:	1007883a 	mov	r3,r2
 800fcfc:	d9c00017 	ldw	r7,0(sp)
 800fd00:	10800804 	addi	r2,r2,32
 800fd04:	283efe26 	beq	r5,zero,800f900 <__muldf3+0x1d8>
 800fd08:	1c3ffe04 	addi	r16,r3,-8
 800fd0c:	9c20983a 	sll	r16,r19,r16
 800fd10:	0025883a 	mov	r18,zero
 800fd14:	003f0106 	br	800f91c <__muldf3+0x1f4>
 800fd18:	9811883a 	mov	r8,r19
 800fd1c:	003f8606 	br	800fb38 <__muldf3+0x410>
 800fd20:	00fff844 	movi	r3,-31
 800fd24:	1907c83a 	sub	r3,r3,r4
 800fd28:	10800820 	cmpeqi	r2,r2,32
 800fd2c:	80c6d83a 	srl	r3,r16,r3
 800fd30:	1000031e 	bne	r2,zero,800fd40 <__muldf3+0x618>
 800fd34:	42010f84 	addi	r8,r8,1086
 800fd38:	8220983a 	sll	r16,r16,r8
 800fd3c:	9424b03a 	or	r18,r18,r16
 800fd40:	9024c03a 	cmpne	r18,r18,zero
 800fd44:	90c4b03a 	or	r2,r18,r3
 800fd48:	148001cc 	andi	r18,r2,7
 800fd4c:	9000051e 	bne	r18,zero,800fd64 <__muldf3+0x63c>
 800fd50:	0021883a 	mov	r16,zero
 800fd54:	1004d0fa 	srli	r2,r2,3
 800fd58:	0007883a 	mov	r3,zero
 800fd5c:	14a4b03a 	or	r18,r2,r18
 800fd60:	003ecd06 	br	800f898 <__muldf3+0x170>
 800fd64:	10c003cc 	andi	r3,r2,15
 800fd68:	18c00118 	cmpnei	r3,r3,4
 800fd6c:	0021883a 	mov	r16,zero
 800fd70:	183fb81e 	bne	r3,zero,800fc54 <__muldf3+0x52c>
 800fd74:	8006927a 	slli	r3,r16,9
 800fd78:	8024977a 	slli	r18,r16,29
 800fd7c:	1820d33a 	srli	r16,r3,12
 800fd80:	003ff406 	br	800fd54 <__muldf3+0x62c>
 800fd84:	00800434 	movhi	r2,16
 800fd88:	84000234 	orhi	r16,r16,8
 800fd8c:	10bfffc4 	addi	r2,r2,-1
 800fd90:	80a0703a 	and	r16,r16,r2
 800fd94:	003f9a06 	br	800fc00 <__muldf3+0x4d8>

0800fd98 <__subdf3>:
 800fd98:	00c00434 	movhi	r3,16
 800fd9c:	3812d53a 	srli	r9,r7,20
 800fda0:	18ffffc4 	addi	r3,r3,-1
 800fda4:	defffb04 	addi	sp,sp,-20
 800fda8:	28d0703a 	and	r8,r5,r3
 800fdac:	38c6703a 	and	r3,r7,r3
 800fdb0:	2804d7fa 	srli	r2,r5,31
 800fdb4:	401090fa 	slli	r8,r8,3
 800fdb8:	280ad53a 	srli	r5,r5,20
 800fdbc:	180690fa 	slli	r3,r3,3
 800fdc0:	dcc00315 	stw	r19,12(sp)
 800fdc4:	dc400115 	stw	r17,4(sp)
 800fdc8:	2026d77a 	srli	r19,r4,29
 800fdcc:	3022d77a 	srli	r17,r6,29
 800fdd0:	4b41ffcc 	andi	r13,r9,2047
 800fdd4:	dc800215 	stw	r18,8(sp)
 800fdd8:	dc000015 	stw	r16,0(sp)
 800fddc:	dfc00415 	stw	ra,16(sp)
 800fde0:	6a41ffe0 	cmpeqi	r9,r13,2047
 800fde4:	1025883a 	mov	r18,r2
 800fde8:	201690fa 	slli	r11,r4,3
 800fdec:	380ed7fa 	srli	r7,r7,31
 800fdf0:	301490fa 	slli	r10,r6,3
 800fdf4:	2c01ffcc 	andi	r16,r5,2047
 800fdf8:	10803fcc 	andi	r2,r2,255
 800fdfc:	9a10b03a 	or	r8,r19,r8
 800fe00:	88c6b03a 	or	r3,r17,r3
 800fe04:	48006e1e 	bne	r9,zero,800ffc0 <__subdf3+0x228>
 800fe08:	3a40005c 	xori	r9,r7,1
 800fe0c:	834bc83a 	sub	r5,r16,r13
 800fe10:	12405726 	beq	r2,r9,800ff70 <__subdf3+0x1d8>
 800fe14:	01406f0e 	bge	zero,r5,800ffd4 <__subdf3+0x23c>
 800fe18:	68007a26 	beq	r13,zero,8010004 <__subdf3+0x26c>
 800fe1c:	8081ffd8 	cmpnei	r2,r16,2047
 800fe20:	10019f26 	beq	r2,zero,80104a0 <__subdf3+0x708>
 800fe24:	18c02034 	orhi	r3,r3,128
 800fe28:	28800e48 	cmpgei	r2,r5,57
 800fe2c:	1000f91e 	bne	r2,zero,8010214 <__subdf3+0x47c>
 800fe30:	28800808 	cmpgei	r2,r5,32
 800fe34:	1001451e 	bne	r2,zero,801034c <__subdf3+0x5b4>
 800fe38:	00800804 	movi	r2,32
 800fe3c:	1145c83a 	sub	r2,r2,r5
 800fe40:	18a2983a 	sll	r17,r3,r2
 800fe44:	5148d83a 	srl	r4,r10,r5
 800fe48:	5084983a 	sll	r2,r10,r2
 800fe4c:	1946d83a 	srl	r3,r3,r5
 800fe50:	8922b03a 	or	r17,r17,r4
 800fe54:	1004c03a 	cmpne	r2,r2,zero
 800fe58:	88a2b03a 	or	r17,r17,r2
 800fe5c:	40d1c83a 	sub	r8,r8,r3
 800fe60:	5c63c83a 	sub	r17,r11,r17
 800fe64:	5c49803a 	cmpltu	r4,r11,r17
 800fe68:	4109c83a 	sub	r4,r8,r4
 800fe6c:	2080202c 	andhi	r2,r4,128
 800fe70:	1000a526 	beq	r2,zero,8010108 <__subdf3+0x370>
 800fe74:	04c02034 	movhi	r19,128
 800fe78:	9cffffc4 	addi	r19,r19,-1
 800fe7c:	24e6703a 	and	r19,r4,r19
 800fe80:	9800db26 	beq	r19,zero,80101f0 <__subdf3+0x458>
 800fe84:	9809883a 	mov	r4,r19
 800fe88:	80108ec0 	call	80108ec <__clzsi2>
 800fe8c:	117ffe04 	addi	r5,r2,-8
 800fe90:	01000804 	movi	r4,32
 800fe94:	2149c83a 	sub	r4,r4,r5
 800fe98:	8906d83a 	srl	r3,r17,r4
 800fe9c:	9948983a 	sll	r4,r19,r5
 800fea0:	8962983a 	sll	r17,r17,r5
 800fea4:	1908b03a 	or	r4,r3,r4
 800fea8:	2c00cc16 	blt	r5,r16,80101dc <__subdf3+0x444>
 800feac:	2c0bc83a 	sub	r5,r5,r16
 800feb0:	28c00044 	addi	r3,r5,1
 800feb4:	18800808 	cmpgei	r2,r3,32
 800feb8:	1001171e 	bne	r2,zero,8010318 <__subdf3+0x580>
 800febc:	00800804 	movi	r2,32
 800fec0:	10c5c83a 	sub	r2,r2,r3
 800fec4:	88cad83a 	srl	r5,r17,r3
 800fec8:	88a2983a 	sll	r17,r17,r2
 800fecc:	2084983a 	sll	r2,r4,r2
 800fed0:	20c8d83a 	srl	r4,r4,r3
 800fed4:	8822c03a 	cmpne	r17,r17,zero
 800fed8:	1144b03a 	or	r2,r2,r5
 800fedc:	1462b03a 	or	r17,r2,r17
 800fee0:	0021883a 	mov	r16,zero
 800fee4:	888001cc 	andi	r2,r17,7
 800fee8:	10000726 	beq	r2,zero,800ff08 <__subdf3+0x170>
 800feec:	888003cc 	andi	r2,r17,15
 800fef0:	10800120 	cmpeqi	r2,r2,4
 800fef4:	1000041e 	bne	r2,zero,800ff08 <__subdf3+0x170>
 800fef8:	88c00104 	addi	r3,r17,4
 800fefc:	1c63803a 	cmpltu	r17,r3,r17
 800ff00:	2449883a 	add	r4,r4,r17
 800ff04:	1823883a 	mov	r17,r3
 800ff08:	2080202c 	andhi	r2,r4,128
 800ff0c:	10008026 	beq	r2,zero,8010110 <__subdf3+0x378>
 800ff10:	81400044 	addi	r5,r16,1
 800ff14:	2881ffe0 	cmpeqi	r2,r5,2047
 800ff18:	2941ffcc 	andi	r5,r5,2047
 800ff1c:	1000921e 	bne	r2,zero,8010168 <__subdf3+0x3d0>
 800ff20:	00bfe034 	movhi	r2,65408
 800ff24:	10bfffc4 	addi	r2,r2,-1
 800ff28:	2088703a 	and	r4,r4,r2
 800ff2c:	2006927a 	slli	r3,r4,9
 800ff30:	8822d0fa 	srli	r17,r17,3
 800ff34:	2004977a 	slli	r2,r4,29
 800ff38:	1806d33a 	srli	r3,r3,12
 800ff3c:	1444b03a 	or	r2,r2,r17
 800ff40:	280a953a 	slli	r5,r5,20
 800ff44:	94803fcc 	andi	r18,r18,255
 800ff48:	902497fa 	slli	r18,r18,31
 800ff4c:	28c6b03a 	or	r3,r5,r3
 800ff50:	1c86b03a 	or	r3,r3,r18
 800ff54:	dfc00417 	ldw	ra,16(sp)
 800ff58:	dcc00317 	ldw	r19,12(sp)
 800ff5c:	dc800217 	ldw	r18,8(sp)
 800ff60:	dc400117 	ldw	r17,4(sp)
 800ff64:	dc000017 	ldw	r16,0(sp)
 800ff68:	dec00504 	addi	sp,sp,20
 800ff6c:	f800283a 	ret
 800ff70:	01402e0e 	bge	zero,r5,801002c <__subdf3+0x294>
 800ff74:	68005526 	beq	r13,zero,80100cc <__subdf3+0x334>
 800ff78:	8081ffd8 	cmpnei	r2,r16,2047
 800ff7c:	10013b26 	beq	r2,zero,801046c <__subdf3+0x6d4>
 800ff80:	18c02034 	orhi	r3,r3,128
 800ff84:	28800e48 	cmpgei	r2,r5,57
 800ff88:	10006d1e 	bne	r2,zero,8010140 <__subdf3+0x3a8>
 800ff8c:	28800808 	cmpgei	r2,r5,32
 800ff90:	10010826 	beq	r2,zero,80103b4 <__subdf3+0x61c>
 800ff94:	2c7ff804 	addi	r17,r5,-32
 800ff98:	29000820 	cmpeqi	r4,r5,32
 800ff9c:	1c44d83a 	srl	r2,r3,r17
 800ffa0:	2000041e 	bne	r4,zero,800ffb4 <__subdf3+0x21c>
 800ffa4:	01001004 	movi	r4,64
 800ffa8:	214bc83a 	sub	r5,r4,r5
 800ffac:	1946983a 	sll	r3,r3,r5
 800ffb0:	50d4b03a 	or	r10,r10,r3
 800ffb4:	5022c03a 	cmpne	r17,r10,zero
 800ffb8:	88a2b03a 	or	r17,r17,r2
 800ffbc:	00006206 	br	8010148 <__subdf3+0x3b0>
 800ffc0:	1a98b03a 	or	r12,r3,r10
 800ffc4:	817e0044 	addi	r5,r16,-2047
 800ffc8:	6000161e 	bne	r12,zero,8010024 <__subdf3+0x28c>
 800ffcc:	3a40005c 	xori	r9,r7,1
 800ffd0:	12401626 	beq	r2,r9,801002c <__subdf3+0x294>
 800ffd4:	28002e26 	beq	r5,zero,8010090 <__subdf3+0x2f8>
 800ffd8:	6c0bc83a 	sub	r5,r13,r16
 800ffdc:	4825883a 	mov	r18,r9
 800ffe0:	80009e1e 	bne	r16,zero,801025c <__subdf3+0x4c4>
 800ffe4:	42c4b03a 	or	r2,r8,r11
 800ffe8:	10010926 	beq	r2,zero,8010410 <__subdf3+0x678>
 800ffec:	28bfffc4 	addi	r2,r5,-1
 800fff0:	10016826 	beq	r2,zero,8010594 <__subdf3+0x7fc>
 800fff4:	2941ffd8 	cmpnei	r5,r5,2047
 800fff8:	28015f26 	beq	r5,zero,8010578 <__subdf3+0x7e0>
 800fffc:	100b883a 	mov	r5,r2
 8010000:	00009906 	br	8010268 <__subdf3+0x4d0>
 8010004:	1a84b03a 	or	r2,r3,r10
 8010008:	1000b126 	beq	r2,zero,80102d0 <__subdf3+0x538>
 801000c:	28bfffc4 	addi	r2,r5,-1
 8010010:	10011d26 	beq	r2,zero,8010488 <__subdf3+0x6f0>
 8010014:	2941ffd8 	cmpnei	r5,r5,2047
 8010018:	28011426 	beq	r5,zero,801046c <__subdf3+0x6d4>
 801001c:	100b883a 	mov	r5,r2
 8010020:	003f8106 	br	800fe28 <__subdf3+0x90>
 8010024:	3a403fcc 	andi	r9,r7,255
 8010028:	11ffea1e 	bne	r2,r7,800ffd4 <__subdf3+0x23c>
 801002c:	28007c26 	beq	r5,zero,8010220 <__subdf3+0x488>
 8010030:	6c0bc83a 	sub	r5,r13,r16
 8010034:	8000d726 	beq	r16,zero,8010394 <__subdf3+0x5fc>
 8010038:	6881ffd8 	cmpnei	r2,r13,2047
 801003c:	10012626 	beq	r2,zero,80104d8 <__subdf3+0x740>
 8010040:	42002034 	orhi	r8,r8,128
 8010044:	28800e48 	cmpgei	r2,r5,57
 8010048:	10012a1e 	bne	r2,zero,80104f4 <__subdf3+0x75c>
 801004c:	28800808 	cmpgei	r2,r5,32
 8010050:	1001821e 	bne	r2,zero,801065c <__subdf3+0x8c4>
 8010054:	00800804 	movi	r2,32
 8010058:	1145c83a 	sub	r2,r2,r5
 801005c:	40a2983a 	sll	r17,r8,r2
 8010060:	5948d83a 	srl	r4,r11,r5
 8010064:	5884983a 	sll	r2,r11,r2
 8010068:	4150d83a 	srl	r8,r8,r5
 801006c:	8922b03a 	or	r17,r17,r4
 8010070:	1004c03a 	cmpne	r2,r2,zero
 8010074:	88a2b03a 	or	r17,r17,r2
 8010078:	1a07883a 	add	r3,r3,r8
 801007c:	8aa3883a 	add	r17,r17,r10
 8010080:	8a89803a 	cmpltu	r4,r17,r10
 8010084:	20c9883a 	add	r4,r4,r3
 8010088:	6821883a 	mov	r16,r13
 801008c:	00003106 	br	8010154 <__subdf3+0x3bc>
 8010090:	80800044 	addi	r2,r16,1
 8010094:	1081ff8c 	andi	r2,r2,2046
 8010098:	1000821e 	bne	r2,zero,80102a4 <__subdf3+0x50c>
 801009c:	42ceb03a 	or	r7,r8,r11
 80100a0:	1a84b03a 	or	r2,r3,r10
 80100a4:	8000e11e 	bne	r16,zero,801042c <__subdf3+0x694>
 80100a8:	38012a26 	beq	r7,zero,8010554 <__subdf3+0x7bc>
 80100ac:	1001461e 	bne	r2,zero,80105c8 <__subdf3+0x830>
 80100b0:	4004977a 	slli	r2,r8,29
 80100b4:	00c80034 	movhi	r3,8192
 80100b8:	18ffffc4 	addi	r3,r3,-1
 80100bc:	20c8703a 	and	r4,r4,r3
 80100c0:	4010d0fa 	srli	r8,r8,3
 80100c4:	1104b03a 	or	r2,r2,r4
 80100c8:	00001806 	br	801012c <__subdf3+0x394>
 80100cc:	1a84b03a 	or	r2,r3,r10
 80100d0:	1000fa26 	beq	r2,zero,80104bc <__subdf3+0x724>
 80100d4:	28bfffc4 	addi	r2,r5,-1
 80100d8:	10000426 	beq	r2,zero,80100ec <__subdf3+0x354>
 80100dc:	2941ffd8 	cmpnei	r5,r5,2047
 80100e0:	28013226 	beq	r5,zero,80105ac <__subdf3+0x814>
 80100e4:	100b883a 	mov	r5,r2
 80100e8:	003fa606 	br	800ff84 <__subdf3+0x1ec>
 80100ec:	5aa3883a 	add	r17,r11,r10
 80100f0:	40c9883a 	add	r4,r8,r3
 80100f4:	8ad7803a 	cmpltu	r11,r17,r11
 80100f8:	22c9883a 	add	r4,r4,r11
 80100fc:	2080202c 	andhi	r2,r4,128
 8010100:	10007a1e 	bne	r2,zero,80102ec <__subdf3+0x554>
 8010104:	04000044 	movi	r16,1
 8010108:	888001cc 	andi	r2,r17,7
 801010c:	103f771e 	bne	r2,zero,800feec <__subdf3+0x154>
 8010110:	8822d0fa 	srli	r17,r17,3
 8010114:	2004977a 	slli	r2,r4,29
 8010118:	2010d0fa 	srli	r8,r4,3
 801011c:	800b883a 	mov	r5,r16
 8010120:	8884b03a 	or	r2,r17,r2
 8010124:	28c1ffe0 	cmpeqi	r3,r5,2047
 8010128:	1800241e 	bne	r3,zero,80101bc <__subdf3+0x424>
 801012c:	00c00434 	movhi	r3,16
 8010130:	18ffffc4 	addi	r3,r3,-1
 8010134:	40c6703a 	and	r3,r8,r3
 8010138:	2941ffcc 	andi	r5,r5,2047
 801013c:	003f8006 	br	800ff40 <__subdf3+0x1a8>
 8010140:	1aa2b03a 	or	r17,r3,r10
 8010144:	8822c03a 	cmpne	r17,r17,zero
 8010148:	8ae3883a 	add	r17,r17,r11
 801014c:	8ac9803a 	cmpltu	r4,r17,r11
 8010150:	2209883a 	add	r4,r4,r8
 8010154:	2080202c 	andhi	r2,r4,128
 8010158:	103feb26 	beq	r2,zero,8010108 <__subdf3+0x370>
 801015c:	84000044 	addi	r16,r16,1
 8010160:	8081ffe0 	cmpeqi	r2,r16,2047
 8010164:	10006226 	beq	r2,zero,80102f0 <__subdf3+0x558>
 8010168:	0141ffc4 	movi	r5,2047
 801016c:	0007883a 	mov	r3,zero
 8010170:	0005883a 	mov	r2,zero
 8010174:	003f7206 	br	800ff40 <__subdf3+0x1a8>
 8010178:	400e977a 	slli	r7,r8,29
 801017c:	4010d0fa 	srli	r8,r8,3
 8010180:	1000ef26 	beq	r2,zero,8010540 <__subdf3+0x7a8>
 8010184:	01480034 	movhi	r5,8192
 8010188:	297fffc4 	addi	r5,r5,-1
 801018c:	2144703a 	and	r2,r4,r5
 8010190:	4100022c 	andhi	r4,r8,8
 8010194:	11c4b03a 	or	r2,r2,r7
 8010198:	20000826 	beq	r4,zero,80101bc <__subdf3+0x424>
 801019c:	1808d0fa 	srli	r4,r3,3
 80101a0:	21c0022c 	andhi	r7,r4,8
 80101a4:	3800051e 	bne	r7,zero,80101bc <__subdf3+0x424>
 80101a8:	1804977a 	slli	r2,r3,29
 80101ac:	314c703a 	and	r6,r6,r5
 80101b0:	4825883a 	mov	r18,r9
 80101b4:	3084b03a 	or	r2,r6,r2
 80101b8:	2011883a 	mov	r8,r4
 80101bc:	1206b03a 	or	r3,r2,r8
 80101c0:	18013e26 	beq	r3,zero,80106bc <__subdf3+0x924>
 80101c4:	01000434 	movhi	r4,16
 80101c8:	40c00234 	orhi	r3,r8,8
 80101cc:	213fffc4 	addi	r4,r4,-1
 80101d0:	1906703a 	and	r3,r3,r4
 80101d4:	0141ffc4 	movi	r5,2047
 80101d8:	003f5906 	br	800ff40 <__subdf3+0x1a8>
 80101dc:	00ffe034 	movhi	r3,65408
 80101e0:	18ffffc4 	addi	r3,r3,-1
 80101e4:	8161c83a 	sub	r16,r16,r5
 80101e8:	20c8703a 	and	r4,r4,r3
 80101ec:	003f3d06 	br	800fee4 <__subdf3+0x14c>
 80101f0:	8809883a 	mov	r4,r17
 80101f4:	80108ec0 	call	80108ec <__clzsi2>
 80101f8:	11400604 	addi	r5,r2,24
 80101fc:	28c00808 	cmpgei	r3,r5,32
 8010200:	183f2326 	beq	r3,zero,800fe90 <__subdf3+0xf8>
 8010204:	113ffe04 	addi	r4,r2,-8
 8010208:	8908983a 	sll	r4,r17,r4
 801020c:	0023883a 	mov	r17,zero
 8010210:	003f2506 	br	800fea8 <__subdf3+0x110>
 8010214:	1aa2b03a 	or	r17,r3,r10
 8010218:	8822c03a 	cmpne	r17,r17,zero
 801021c:	003f1006 	br	800fe60 <__subdf3+0xc8>
 8010220:	80800044 	addi	r2,r16,1
 8010224:	11c1ff8c 	andi	r7,r2,2046
 8010228:	38006d1e 	bne	r7,zero,80103e0 <__subdf3+0x648>
 801022c:	42c4b03a 	or	r2,r8,r11
 8010230:	8000be1e 	bne	r16,zero,801052c <__subdf3+0x794>
 8010234:	1000f726 	beq	r2,zero,8010614 <__subdf3+0x87c>
 8010238:	1a84b03a 	or	r2,r3,r10
 801023c:	1000fc1e 	bne	r2,zero,8010630 <__subdf3+0x898>
 8010240:	4006977a 	slli	r3,r8,29
 8010244:	00880034 	movhi	r2,8192
 8010248:	10bfffc4 	addi	r2,r2,-1
 801024c:	2084703a 	and	r2,r4,r2
 8010250:	4010d0fa 	srli	r8,r8,3
 8010254:	10c4b03a 	or	r2,r2,r3
 8010258:	003fb406 	br	801012c <__subdf3+0x394>
 801025c:	6881ffd8 	cmpnei	r2,r13,2047
 8010260:	10009d26 	beq	r2,zero,80104d8 <__subdf3+0x740>
 8010264:	42002034 	orhi	r8,r8,128
 8010268:	28800e48 	cmpgei	r2,r5,57
 801026c:	1000421e 	bne	r2,zero,8010378 <__subdf3+0x5e0>
 8010270:	28800808 	cmpgei	r2,r5,32
 8010274:	1000a21e 	bne	r2,zero,8010500 <__subdf3+0x768>
 8010278:	00800804 	movi	r2,32
 801027c:	1145c83a 	sub	r2,r2,r5
 8010280:	40a2983a 	sll	r17,r8,r2
 8010284:	5948d83a 	srl	r4,r11,r5
 8010288:	5896983a 	sll	r11,r11,r2
 801028c:	4150d83a 	srl	r8,r8,r5
 8010290:	8922b03a 	or	r17,r17,r4
 8010294:	5816c03a 	cmpne	r11,r11,zero
 8010298:	8ae2b03a 	or	r17,r17,r11
 801029c:	1a07c83a 	sub	r3,r3,r8
 80102a0:	00003706 	br	8010380 <__subdf3+0x5e8>
 80102a4:	5aa3c83a 	sub	r17,r11,r10
 80102a8:	40e7c83a 	sub	r19,r8,r3
 80102ac:	5c49803a 	cmpltu	r4,r11,r17
 80102b0:	9927c83a 	sub	r19,r19,r4
 80102b4:	9880202c 	andhi	r2,r19,128
 80102b8:	1000661e 	bne	r2,zero,8010454 <__subdf3+0x6bc>
 80102bc:	8cc4b03a 	or	r2,r17,r19
 80102c0:	103eef1e 	bne	r2,zero,800fe80 <__subdf3+0xe8>
 80102c4:	0011883a 	mov	r8,zero
 80102c8:	0025883a 	mov	r18,zero
 80102cc:	003f9706 	br	801012c <__subdf3+0x394>
 80102d0:	4022977a 	slli	r17,r8,29
 80102d4:	00880034 	movhi	r2,8192
 80102d8:	10bfffc4 	addi	r2,r2,-1
 80102dc:	2088703a 	and	r4,r4,r2
 80102e0:	4010d0fa 	srli	r8,r8,3
 80102e4:	2444b03a 	or	r2,r4,r17
 80102e8:	003f8e06 	br	8010124 <__subdf3+0x38c>
 80102ec:	04000084 	movi	r16,2
 80102f0:	00bfe034 	movhi	r2,65408
 80102f4:	10bfffc4 	addi	r2,r2,-1
 80102f8:	8806d07a 	srli	r3,r17,1
 80102fc:	2088703a 	and	r4,r4,r2
 8010300:	200497fa 	slli	r2,r4,31
 8010304:	8c40004c 	andi	r17,r17,1
 8010308:	1c62b03a 	or	r17,r3,r17
 801030c:	2008d07a 	srli	r4,r4,1
 8010310:	1462b03a 	or	r17,r2,r17
 8010314:	003ef306 	br	800fee4 <__subdf3+0x14c>
 8010318:	297ff844 	addi	r5,r5,-31
 801031c:	18800820 	cmpeqi	r2,r3,32
 8010320:	214ad83a 	srl	r5,r4,r5
 8010324:	1000041e 	bne	r2,zero,8010338 <__subdf3+0x5a0>
 8010328:	00801004 	movi	r2,64
 801032c:	10c7c83a 	sub	r3,r2,r3
 8010330:	20c8983a 	sll	r4,r4,r3
 8010334:	8922b03a 	or	r17,r17,r4
 8010338:	8822c03a 	cmpne	r17,r17,zero
 801033c:	8962b03a 	or	r17,r17,r5
 8010340:	0009883a 	mov	r4,zero
 8010344:	0021883a 	mov	r16,zero
 8010348:	003f6f06 	br	8010108 <__subdf3+0x370>
 801034c:	2c7ff804 	addi	r17,r5,-32
 8010350:	29000820 	cmpeqi	r4,r5,32
 8010354:	1c44d83a 	srl	r2,r3,r17
 8010358:	2000041e 	bne	r4,zero,801036c <__subdf3+0x5d4>
 801035c:	01001004 	movi	r4,64
 8010360:	214bc83a 	sub	r5,r4,r5
 8010364:	1946983a 	sll	r3,r3,r5
 8010368:	50d4b03a 	or	r10,r10,r3
 801036c:	5022c03a 	cmpne	r17,r10,zero
 8010370:	88a2b03a 	or	r17,r17,r2
 8010374:	003eba06 	br	800fe60 <__subdf3+0xc8>
 8010378:	42d0b03a 	or	r8,r8,r11
 801037c:	4022c03a 	cmpne	r17,r8,zero
 8010380:	5463c83a 	sub	r17,r10,r17
 8010384:	5449803a 	cmpltu	r4,r10,r17
 8010388:	1909c83a 	sub	r4,r3,r4
 801038c:	6821883a 	mov	r16,r13
 8010390:	003eb606 	br	800fe6c <__subdf3+0xd4>
 8010394:	42c4b03a 	or	r2,r8,r11
 8010398:	10009726 	beq	r2,zero,80105f8 <__subdf3+0x860>
 801039c:	28bfffc4 	addi	r2,r5,-1
 80103a0:	1000b926 	beq	r2,zero,8010688 <__subdf3+0x8f0>
 80103a4:	2941ffd8 	cmpnei	r5,r5,2047
 80103a8:	28007326 	beq	r5,zero,8010578 <__subdf3+0x7e0>
 80103ac:	100b883a 	mov	r5,r2
 80103b0:	003f2406 	br	8010044 <__subdf3+0x2ac>
 80103b4:	00800804 	movi	r2,32
 80103b8:	1145c83a 	sub	r2,r2,r5
 80103bc:	18a2983a 	sll	r17,r3,r2
 80103c0:	5148d83a 	srl	r4,r10,r5
 80103c4:	5084983a 	sll	r2,r10,r2
 80103c8:	1946d83a 	srl	r3,r3,r5
 80103cc:	8922b03a 	or	r17,r17,r4
 80103d0:	1004c03a 	cmpne	r2,r2,zero
 80103d4:	88a2b03a 	or	r17,r17,r2
 80103d8:	40d1883a 	add	r8,r8,r3
 80103dc:	003f5a06 	br	8010148 <__subdf3+0x3b0>
 80103e0:	1101ffe0 	cmpeqi	r4,r2,2047
 80103e4:	203f601e 	bne	r4,zero,8010168 <__subdf3+0x3d0>
 80103e8:	5a95883a 	add	r10,r11,r10
 80103ec:	52d7803a 	cmpltu	r11,r10,r11
 80103f0:	40c9883a 	add	r4,r8,r3
 80103f4:	22c9883a 	add	r4,r4,r11
 80103f8:	202297fa 	slli	r17,r4,31
 80103fc:	5014d07a 	srli	r10,r10,1
 8010400:	2008d07a 	srli	r4,r4,1
 8010404:	1021883a 	mov	r16,r2
 8010408:	8aa2b03a 	or	r17,r17,r10
 801040c:	003f3e06 	br	8010108 <__subdf3+0x370>
 8010410:	1808977a 	slli	r4,r3,29
 8010414:	00880034 	movhi	r2,8192
 8010418:	10bfffc4 	addi	r2,r2,-1
 801041c:	308c703a 	and	r6,r6,r2
 8010420:	1810d0fa 	srli	r8,r3,3
 8010424:	3104b03a 	or	r2,r6,r4
 8010428:	003f3e06 	br	8010124 <__subdf3+0x38c>
 801042c:	383f521e 	bne	r7,zero,8010178 <__subdf3+0x3e0>
 8010430:	10009d26 	beq	r2,zero,80106a8 <__subdf3+0x910>
 8010434:	1808977a 	slli	r4,r3,29
 8010438:	00880034 	movhi	r2,8192
 801043c:	10bfffc4 	addi	r2,r2,-1
 8010440:	3084703a 	and	r2,r6,r2
 8010444:	1810d0fa 	srli	r8,r3,3
 8010448:	1104b03a 	or	r2,r2,r4
 801044c:	4825883a 	mov	r18,r9
 8010450:	003f5a06 	br	80101bc <__subdf3+0x424>
 8010454:	52e3c83a 	sub	r17,r10,r11
 8010458:	1a09c83a 	sub	r4,r3,r8
 801045c:	5467803a 	cmpltu	r19,r10,r17
 8010460:	24e7c83a 	sub	r19,r4,r19
 8010464:	4825883a 	mov	r18,r9
 8010468:	003e8506 	br	800fe80 <__subdf3+0xe8>
 801046c:	4022977a 	slli	r17,r8,29
 8010470:	00880034 	movhi	r2,8192
 8010474:	10bfffc4 	addi	r2,r2,-1
 8010478:	2088703a 	and	r4,r4,r2
 801047c:	4010d0fa 	srli	r8,r8,3
 8010480:	2444b03a 	or	r2,r4,r17
 8010484:	003f4d06 	br	80101bc <__subdf3+0x424>
 8010488:	5aa3c83a 	sub	r17,r11,r10
 801048c:	40c9c83a 	sub	r4,r8,r3
 8010490:	5c57803a 	cmpltu	r11,r11,r17
 8010494:	22c9c83a 	sub	r4,r4,r11
 8010498:	04000044 	movi	r16,1
 801049c:	003e7306 	br	800fe6c <__subdf3+0xd4>
 80104a0:	4004977a 	slli	r2,r8,29
 80104a4:	00c80034 	movhi	r3,8192
 80104a8:	18ffffc4 	addi	r3,r3,-1
 80104ac:	20c8703a 	and	r4,r4,r3
 80104b0:	4010d0fa 	srli	r8,r8,3
 80104b4:	1104b03a 	or	r2,r2,r4
 80104b8:	003f4006 	br	80101bc <__subdf3+0x424>
 80104bc:	4004977a 	slli	r2,r8,29
 80104c0:	00c80034 	movhi	r3,8192
 80104c4:	18ffffc4 	addi	r3,r3,-1
 80104c8:	20c8703a 	and	r4,r4,r3
 80104cc:	4010d0fa 	srli	r8,r8,3
 80104d0:	1104b03a 	or	r2,r2,r4
 80104d4:	003f1306 	br	8010124 <__subdf3+0x38c>
 80104d8:	1804977a 	slli	r2,r3,29
 80104dc:	01080034 	movhi	r4,8192
 80104e0:	213fffc4 	addi	r4,r4,-1
 80104e4:	310c703a 	and	r6,r6,r4
 80104e8:	1810d0fa 	srli	r8,r3,3
 80104ec:	1184b03a 	or	r2,r2,r6
 80104f0:	003f3206 	br	80101bc <__subdf3+0x424>
 80104f4:	42d0b03a 	or	r8,r8,r11
 80104f8:	4022c03a 	cmpne	r17,r8,zero
 80104fc:	003edf06 	br	801007c <__subdf3+0x2e4>
 8010500:	2c7ff804 	addi	r17,r5,-32
 8010504:	29000820 	cmpeqi	r4,r5,32
 8010508:	4444d83a 	srl	r2,r8,r17
 801050c:	2000041e 	bne	r4,zero,8010520 <__subdf3+0x788>
 8010510:	01001004 	movi	r4,64
 8010514:	214bc83a 	sub	r5,r4,r5
 8010518:	4150983a 	sll	r8,r8,r5
 801051c:	5a16b03a 	or	r11,r11,r8
 8010520:	5822c03a 	cmpne	r17,r11,zero
 8010524:	88a2b03a 	or	r17,r17,r2
 8010528:	003f9506 	br	8010380 <__subdf3+0x5e8>
 801052c:	103fea26 	beq	r2,zero,80104d8 <__subdf3+0x740>
 8010530:	1a94b03a 	or	r10,r3,r10
 8010534:	400e977a 	slli	r7,r8,29
 8010538:	4010d0fa 	srli	r8,r8,3
 801053c:	503f111e 	bne	r10,zero,8010184 <__subdf3+0x3ec>
 8010540:	00880034 	movhi	r2,8192
 8010544:	10bfffc4 	addi	r2,r2,-1
 8010548:	2084703a 	and	r2,r4,r2
 801054c:	11c4b03a 	or	r2,r2,r7
 8010550:	003f1a06 	br	80101bc <__subdf3+0x424>
 8010554:	103f5b26 	beq	r2,zero,80102c4 <__subdf3+0x52c>
 8010558:	1804977a 	slli	r2,r3,29
 801055c:	01080034 	movhi	r4,8192
 8010560:	213fffc4 	addi	r4,r4,-1
 8010564:	310c703a 	and	r6,r6,r4
 8010568:	1810d0fa 	srli	r8,r3,3
 801056c:	1184b03a 	or	r2,r2,r6
 8010570:	4825883a 	mov	r18,r9
 8010574:	003eed06 	br	801012c <__subdf3+0x394>
 8010578:	1808977a 	slli	r4,r3,29
 801057c:	00880034 	movhi	r2,8192
 8010580:	10bfffc4 	addi	r2,r2,-1
 8010584:	3084703a 	and	r2,r6,r2
 8010588:	1810d0fa 	srli	r8,r3,3
 801058c:	1104b03a 	or	r2,r2,r4
 8010590:	003f0a06 	br	80101bc <__subdf3+0x424>
 8010594:	52e3c83a 	sub	r17,r10,r11
 8010598:	1a09c83a 	sub	r4,r3,r8
 801059c:	5455803a 	cmpltu	r10,r10,r17
 80105a0:	2289c83a 	sub	r4,r4,r10
 80105a4:	04000044 	movi	r16,1
 80105a8:	003e3006 	br	800fe6c <__subdf3+0xd4>
 80105ac:	4006977a 	slli	r3,r8,29
 80105b0:	00880034 	movhi	r2,8192
 80105b4:	10bfffc4 	addi	r2,r2,-1
 80105b8:	2084703a 	and	r2,r4,r2
 80105bc:	4010d0fa 	srli	r8,r8,3
 80105c0:	10c4b03a 	or	r2,r2,r3
 80105c4:	003efd06 	br	80101bc <__subdf3+0x424>
 80105c8:	5aa3c83a 	sub	r17,r11,r10
 80105cc:	5c45803a 	cmpltu	r2,r11,r17
 80105d0:	40c9c83a 	sub	r4,r8,r3
 80105d4:	2089c83a 	sub	r4,r4,r2
 80105d8:	2080202c 	andhi	r2,r4,128
 80105dc:	10002f26 	beq	r2,zero,801069c <__subdf3+0x904>
 80105e0:	52e3c83a 	sub	r17,r10,r11
 80105e4:	1a09c83a 	sub	r4,r3,r8
 80105e8:	5455803a 	cmpltu	r10,r10,r17
 80105ec:	2289c83a 	sub	r4,r4,r10
 80105f0:	4825883a 	mov	r18,r9
 80105f4:	003e3b06 	br	800fee4 <__subdf3+0x14c>
 80105f8:	1808977a 	slli	r4,r3,29
 80105fc:	00880034 	movhi	r2,8192
 8010600:	10bfffc4 	addi	r2,r2,-1
 8010604:	3084703a 	and	r2,r6,r2
 8010608:	1810d0fa 	srli	r8,r3,3
 801060c:	1104b03a 	or	r2,r2,r4
 8010610:	003ec406 	br	8010124 <__subdf3+0x38c>
 8010614:	1808977a 	slli	r4,r3,29
 8010618:	00880034 	movhi	r2,8192
 801061c:	10bfffc4 	addi	r2,r2,-1
 8010620:	3084703a 	and	r2,r6,r2
 8010624:	1810d0fa 	srli	r8,r3,3
 8010628:	1104b03a 	or	r2,r2,r4
 801062c:	003ebf06 	br	801012c <__subdf3+0x394>
 8010630:	5aa3883a 	add	r17,r11,r10
 8010634:	40c9883a 	add	r4,r8,r3
 8010638:	8ad7803a 	cmpltu	r11,r17,r11
 801063c:	22c9883a 	add	r4,r4,r11
 8010640:	2080202c 	andhi	r2,r4,128
 8010644:	103eb026 	beq	r2,zero,8010108 <__subdf3+0x370>
 8010648:	00bfe034 	movhi	r2,65408
 801064c:	10bfffc4 	addi	r2,r2,-1
 8010650:	2088703a 	and	r4,r4,r2
 8010654:	04000044 	movi	r16,1
 8010658:	003eab06 	br	8010108 <__subdf3+0x370>
 801065c:	28bff804 	addi	r2,r5,-32
 8010660:	29000820 	cmpeqi	r4,r5,32
 8010664:	4084d83a 	srl	r2,r8,r2
 8010668:	2000041e 	bne	r4,zero,801067c <__subdf3+0x8e4>
 801066c:	01001004 	movi	r4,64
 8010670:	214bc83a 	sub	r5,r4,r5
 8010674:	4150983a 	sll	r8,r8,r5
 8010678:	5a16b03a 	or	r11,r11,r8
 801067c:	5822c03a 	cmpne	r17,r11,zero
 8010680:	88a2b03a 	or	r17,r17,r2
 8010684:	003e7d06 	br	801007c <__subdf3+0x2e4>
 8010688:	5aa3883a 	add	r17,r11,r10
 801068c:	40c9883a 	add	r4,r8,r3
 8010690:	8a95803a 	cmpltu	r10,r17,r10
 8010694:	2289883a 	add	r4,r4,r10
 8010698:	003e9806 	br	80100fc <__subdf3+0x364>
 801069c:	8904b03a 	or	r2,r17,r4
 80106a0:	103f0826 	beq	r2,zero,80102c4 <__subdf3+0x52c>
 80106a4:	003e9806 	br	8010108 <__subdf3+0x370>
 80106a8:	02000434 	movhi	r8,16
 80106ac:	423fffc4 	addi	r8,r8,-1
 80106b0:	0025883a 	mov	r18,zero
 80106b4:	00bfffc4 	movi	r2,-1
 80106b8:	003ec206 	br	80101c4 <__subdf3+0x42c>
 80106bc:	0005883a 	mov	r2,zero
 80106c0:	0141ffc4 	movi	r5,2047
 80106c4:	0007883a 	mov	r3,zero
 80106c8:	003e1d06 	br	800ff40 <__subdf3+0x1a8>

080106cc <__unorddf2>:
 80106cc:	2806d53a 	srli	r3,r5,20
 80106d0:	3810d53a 	srli	r8,r7,20
 80106d4:	02400434 	movhi	r9,16
 80106d8:	18c1ffcc 	andi	r3,r3,2047
 80106dc:	4a7fffc4 	addi	r9,r9,-1
 80106e0:	18c1ffd8 	cmpnei	r3,r3,2047
 80106e4:	2a4a703a 	and	r5,r5,r9
 80106e8:	3a4e703a 	and	r7,r7,r9
 80106ec:	4201ffcc 	andi	r8,r8,2047
 80106f0:	18000426 	beq	r3,zero,8010704 <__unorddf2+0x38>
 80106f4:	4201ffd8 	cmpnei	r8,r8,2047
 80106f8:	40000626 	beq	r8,zero,8010714 <__unorddf2+0x48>
 80106fc:	0005883a 	mov	r2,zero
 8010700:	f800283a 	ret
 8010704:	214ab03a 	or	r5,r4,r5
 8010708:	283ffa26 	beq	r5,zero,80106f4 <__unorddf2+0x28>
 801070c:	00800044 	movi	r2,1
 8010710:	f800283a 	ret
 8010714:	398eb03a 	or	r7,r7,r6
 8010718:	3804c03a 	cmpne	r2,r7,zero
 801071c:	f800283a 	ret

08010720 <__fixdfsi>:
 8010720:	2806d53a 	srli	r3,r5,20
 8010724:	01800434 	movhi	r6,16
 8010728:	31bfffc4 	addi	r6,r6,-1
 801072c:	18c1ffcc 	andi	r3,r3,2047
 8010730:	19c0ffd0 	cmplti	r7,r3,1023
 8010734:	2810d7fa 	srli	r8,r5,31
 8010738:	298a703a 	and	r5,r5,r6
 801073c:	3800061e 	bne	r7,zero,8010758 <__fixdfsi+0x38>
 8010740:	18810790 	cmplti	r2,r3,1054
 8010744:	1000061e 	bne	r2,zero,8010760 <__fixdfsi+0x40>
 8010748:	00a00034 	movhi	r2,32768
 801074c:	10bfffc4 	addi	r2,r2,-1
 8010750:	4085883a 	add	r2,r8,r2
 8010754:	f800283a 	ret
 8010758:	0005883a 	mov	r2,zero
 801075c:	f800283a 	ret
 8010760:	01810cc4 	movi	r6,1075
 8010764:	30cdc83a 	sub	r6,r6,r3
 8010768:	30800808 	cmpgei	r2,r6,32
 801076c:	29400434 	orhi	r5,r5,16
 8010770:	1000071e 	bne	r2,zero,8010790 <__fixdfsi+0x70>
 8010774:	18befb44 	addi	r2,r3,-1043
 8010778:	2884983a 	sll	r2,r5,r2
 801077c:	2188d83a 	srl	r4,r4,r6
 8010780:	1104b03a 	or	r2,r2,r4
 8010784:	403ff526 	beq	r8,zero,801075c <__fixdfsi+0x3c>
 8010788:	0085c83a 	sub	r2,zero,r2
 801078c:	f800283a 	ret
 8010790:	008104c4 	movi	r2,1043
 8010794:	10c5c83a 	sub	r2,r2,r3
 8010798:	2884d83a 	srl	r2,r5,r2
 801079c:	003ff906 	br	8010784 <__fixdfsi+0x64>

080107a0 <__floatsidf>:
 80107a0:	defffd04 	addi	sp,sp,-12
 80107a4:	dfc00215 	stw	ra,8(sp)
 80107a8:	dc400115 	stw	r17,4(sp)
 80107ac:	dc000015 	stw	r16,0(sp)
 80107b0:	20001326 	beq	r4,zero,8010800 <__floatsidf+0x60>
 80107b4:	2022d7fa 	srli	r17,r4,31
 80107b8:	2021883a 	mov	r16,r4
 80107bc:	20002516 	blt	r4,zero,8010854 <__floatsidf+0xb4>
 80107c0:	8009883a 	mov	r4,r16
 80107c4:	80108ec0 	call	80108ec <__clzsi2>
 80107c8:	01410784 	movi	r5,1054
 80107cc:	288bc83a 	sub	r5,r5,r2
 80107d0:	10c002c8 	cmpgei	r3,r2,11
 80107d4:	2941ffcc 	andi	r5,r5,2047
 80107d8:	1800171e 	bne	r3,zero,8010838 <__floatsidf+0x98>
 80107dc:	00c002c4 	movi	r3,11
 80107e0:	1887c83a 	sub	r3,r3,r2
 80107e4:	80c6d83a 	srl	r3,r16,r3
 80107e8:	01000434 	movhi	r4,16
 80107ec:	10800544 	addi	r2,r2,21
 80107f0:	213fffc4 	addi	r4,r4,-1
 80107f4:	8084983a 	sll	r2,r16,r2
 80107f8:	1906703a 	and	r3,r3,r4
 80107fc:	00000406 	br	8010810 <__floatsidf+0x70>
 8010800:	0023883a 	mov	r17,zero
 8010804:	000b883a 	mov	r5,zero
 8010808:	0007883a 	mov	r3,zero
 801080c:	0005883a 	mov	r2,zero
 8010810:	280a953a 	slli	r5,r5,20
 8010814:	8c403fcc 	andi	r17,r17,255
 8010818:	882297fa 	slli	r17,r17,31
 801081c:	28c6b03a 	or	r3,r5,r3
 8010820:	1c46b03a 	or	r3,r3,r17
 8010824:	dfc00217 	ldw	ra,8(sp)
 8010828:	dc400117 	ldw	r17,4(sp)
 801082c:	dc000017 	ldw	r16,0(sp)
 8010830:	dec00304 	addi	sp,sp,12
 8010834:	f800283a 	ret
 8010838:	10bffd44 	addi	r2,r2,-11
 801083c:	8086983a 	sll	r3,r16,r2
 8010840:	00800434 	movhi	r2,16
 8010844:	10bfffc4 	addi	r2,r2,-1
 8010848:	1886703a 	and	r3,r3,r2
 801084c:	0005883a 	mov	r2,zero
 8010850:	003fef06 	br	8010810 <__floatsidf+0x70>
 8010854:	0121c83a 	sub	r16,zero,r4
 8010858:	003fd906 	br	80107c0 <__floatsidf+0x20>

0801085c <__floatunsidf>:
 801085c:	defffe04 	addi	sp,sp,-8
 8010860:	dc000015 	stw	r16,0(sp)
 8010864:	dfc00115 	stw	ra,4(sp)
 8010868:	2021883a 	mov	r16,r4
 801086c:	20000f26 	beq	r4,zero,80108ac <__floatunsidf+0x50>
 8010870:	80108ec0 	call	80108ec <__clzsi2>
 8010874:	00c10784 	movi	r3,1054
 8010878:	1887c83a 	sub	r3,r3,r2
 801087c:	110002c8 	cmpgei	r4,r2,11
 8010880:	18c1ffcc 	andi	r3,r3,2047
 8010884:	2000121e 	bne	r4,zero,80108d0 <__floatunsidf+0x74>
 8010888:	014002c4 	movi	r5,11
 801088c:	288bc83a 	sub	r5,r5,r2
 8010890:	814ad83a 	srl	r5,r16,r5
 8010894:	01000434 	movhi	r4,16
 8010898:	10800544 	addi	r2,r2,21
 801089c:	213fffc4 	addi	r4,r4,-1
 80108a0:	80a0983a 	sll	r16,r16,r2
 80108a4:	290a703a 	and	r5,r5,r4
 80108a8:	00000206 	br	80108b4 <__floatunsidf+0x58>
 80108ac:	0007883a 	mov	r3,zero
 80108b0:	000b883a 	mov	r5,zero
 80108b4:	1806953a 	slli	r3,r3,20
 80108b8:	8005883a 	mov	r2,r16
 80108bc:	1946b03a 	or	r3,r3,r5
 80108c0:	dfc00117 	ldw	ra,4(sp)
 80108c4:	dc000017 	ldw	r16,0(sp)
 80108c8:	dec00204 	addi	sp,sp,8
 80108cc:	f800283a 	ret
 80108d0:	10bffd44 	addi	r2,r2,-11
 80108d4:	808a983a 	sll	r5,r16,r2
 80108d8:	00800434 	movhi	r2,16
 80108dc:	10bfffc4 	addi	r2,r2,-1
 80108e0:	288a703a 	and	r5,r5,r2
 80108e4:	0021883a 	mov	r16,zero
 80108e8:	003ff206 	br	80108b4 <__floatunsidf+0x58>

080108ec <__clzsi2>:
 80108ec:	00bfffd4 	movui	r2,65535
 80108f0:	11000436 	bltu	r2,r4,8010904 <__clzsi2+0x18>
 80108f4:	20804030 	cmpltui	r2,r4,256
 80108f8:	10000e26 	beq	r2,zero,8010934 <__clzsi2+0x48>
 80108fc:	01400804 	movi	r5,32
 8010900:	00000406 	br	8010914 <__clzsi2+0x28>
 8010904:	00804034 	movhi	r2,256
 8010908:	20800736 	bltu	r4,r2,8010928 <__clzsi2+0x3c>
 801090c:	2008d63a 	srli	r4,r4,24
 8010910:	01400204 	movi	r5,8
 8010914:	00c20174 	movhi	r3,2053
 8010918:	20c7883a 	add	r3,r4,r3
 801091c:	18bf0203 	ldbu	r2,-1016(r3)
 8010920:	2885c83a 	sub	r2,r5,r2
 8010924:	f800283a 	ret
 8010928:	2008d43a 	srli	r4,r4,16
 801092c:	01400404 	movi	r5,16
 8010930:	003ff806 	br	8010914 <__clzsi2+0x28>
 8010934:	2008d23a 	srli	r4,r4,8
 8010938:	01400604 	movi	r5,24
 801093c:	003ff506 	br	8010914 <__clzsi2+0x28>

08010940 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010940:	defffd04 	addi	sp,sp,-12
 8010944:	df000215 	stw	fp,8(sp)
 8010948:	df000204 	addi	fp,sp,8
 801094c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010950:	d0206645 	stb	zero,-32359(gp)
 8010954:	e0bffe17 	ldw	r2,-8(fp)
 8010958:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801095c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010960:	10000226 	beq	r2,zero,801096c <_exit+0x2c>
    ALT_SIM_FAIL();
 8010964:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 8010968:	00000106 	br	8010970 <_exit+0x30>
    ALT_SIM_PASS();
 801096c:	002af0b0 	cmpltui	zero,zero,43970
}
 8010970:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010974:	003fff06 	br	8010974 <_exit+0x34>

08010978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010978:	defffe04 	addi	sp,sp,-8
 801097c:	dfc00115 	stw	ra,4(sp)
 8010980:	df000015 	stw	fp,0(sp)
 8010984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010988:	d0a04317 	ldw	r2,-32500(gp)
 801098c:	10000326 	beq	r2,zero,801099c <alt_get_errno+0x24>
 8010990:	d0a04317 	ldw	r2,-32500(gp)
 8010994:	103ee83a 	callr	r2
 8010998:	00000106 	br	80109a0 <alt_get_errno+0x28>
 801099c:	d0a05a04 	addi	r2,gp,-32408
}
 80109a0:	e037883a 	mov	sp,fp
 80109a4:	dfc00117 	ldw	ra,4(sp)
 80109a8:	df000017 	ldw	fp,0(sp)
 80109ac:	dec00204 	addi	sp,sp,8
 80109b0:	f800283a 	ret

080109b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80109b4:	defffb04 	addi	sp,sp,-20
 80109b8:	dfc00415 	stw	ra,16(sp)
 80109bc:	df000315 	stw	fp,12(sp)
 80109c0:	df000304 	addi	fp,sp,12
 80109c4:	e13ffe15 	stw	r4,-8(fp)
 80109c8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80109cc:	e0bffe17 	ldw	r2,-8(fp)
 80109d0:	10000616 	blt	r2,zero,80109ec <fstat+0x38>
 80109d4:	e0bffe17 	ldw	r2,-8(fp)
 80109d8:	10c00324 	muli	r3,r2,12
 80109dc:	00820174 	movhi	r2,2053
 80109e0:	10981b04 	addi	r2,r2,24684
 80109e4:	1885883a 	add	r2,r3,r2
 80109e8:	00000106 	br	80109f0 <fstat+0x3c>
 80109ec:	0005883a 	mov	r2,zero
 80109f0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80109f4:	e0bfff17 	ldw	r2,-4(fp)
 80109f8:	10001026 	beq	r2,zero,8010a3c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80109fc:	e0bfff17 	ldw	r2,-4(fp)
 8010a00:	10800017 	ldw	r2,0(r2)
 8010a04:	10800817 	ldw	r2,32(r2)
 8010a08:	10000726 	beq	r2,zero,8010a28 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8010a0c:	e0bfff17 	ldw	r2,-4(fp)
 8010a10:	10800017 	ldw	r2,0(r2)
 8010a14:	10800817 	ldw	r2,32(r2)
 8010a18:	e17ffd17 	ldw	r5,-12(fp)
 8010a1c:	e13fff17 	ldw	r4,-4(fp)
 8010a20:	103ee83a 	callr	r2
 8010a24:	00000a06 	br	8010a50 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8010a28:	e0bffd17 	ldw	r2,-12(fp)
 8010a2c:	00c80004 	movi	r3,8192
 8010a30:	10c00115 	stw	r3,4(r2)
      return 0;
 8010a34:	0005883a 	mov	r2,zero
 8010a38:	00000506 	br	8010a50 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8010a3c:	80109780 	call	8010978 <alt_get_errno>
 8010a40:	1007883a 	mov	r3,r2
 8010a44:	00801444 	movi	r2,81
 8010a48:	18800015 	stw	r2,0(r3)
    return -1;
 8010a4c:	00bfffc4 	movi	r2,-1
  }
}
 8010a50:	e037883a 	mov	sp,fp
 8010a54:	dfc00117 	ldw	ra,4(sp)
 8010a58:	df000017 	ldw	fp,0(sp)
 8010a5c:	dec00204 	addi	sp,sp,8
 8010a60:	f800283a 	ret

08010a64 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 8010a64:	deffff04 	addi	sp,sp,-4
 8010a68:	df000015 	stw	fp,0(sp)
 8010a6c:	d839883a 	mov	fp,sp
  return 0;
 8010a70:	0005883a 	mov	r2,zero
}
 8010a74:	e037883a 	mov	sp,fp
 8010a78:	df000017 	ldw	fp,0(sp)
 8010a7c:	dec00104 	addi	sp,sp,4
 8010a80:	f800283a 	ret

08010a84 <alt_get_errno>:
{
 8010a84:	defffe04 	addi	sp,sp,-8
 8010a88:	dfc00115 	stw	ra,4(sp)
 8010a8c:	df000015 	stw	fp,0(sp)
 8010a90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010a94:	d0a04317 	ldw	r2,-32500(gp)
 8010a98:	10000326 	beq	r2,zero,8010aa8 <alt_get_errno+0x24>
 8010a9c:	d0a04317 	ldw	r2,-32500(gp)
 8010aa0:	103ee83a 	callr	r2
 8010aa4:	00000106 	br	8010aac <alt_get_errno+0x28>
 8010aa8:	d0a05a04 	addi	r2,gp,-32408
}
 8010aac:	e037883a 	mov	sp,fp
 8010ab0:	dfc00117 	ldw	ra,4(sp)
 8010ab4:	df000017 	ldw	fp,0(sp)
 8010ab8:	dec00204 	addi	sp,sp,8
 8010abc:	f800283a 	ret

08010ac0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8010ac0:	deffea04 	addi	sp,sp,-88
 8010ac4:	dfc01515 	stw	ra,84(sp)
 8010ac8:	df001415 	stw	fp,80(sp)
 8010acc:	df001404 	addi	fp,sp,80
 8010ad0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010ad4:	e0bfec17 	ldw	r2,-80(fp)
 8010ad8:	10000616 	blt	r2,zero,8010af4 <isatty+0x34>
 8010adc:	e0bfec17 	ldw	r2,-80(fp)
 8010ae0:	10c00324 	muli	r3,r2,12
 8010ae4:	00820174 	movhi	r2,2053
 8010ae8:	10981b04 	addi	r2,r2,24684
 8010aec:	1885883a 	add	r2,r3,r2
 8010af0:	00000106 	br	8010af8 <isatty+0x38>
 8010af4:	0005883a 	mov	r2,zero
 8010af8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8010afc:	e0bfff17 	ldw	r2,-4(fp)
 8010b00:	10000e26 	beq	r2,zero,8010b3c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8010b04:	e0bfff17 	ldw	r2,-4(fp)
 8010b08:	10800017 	ldw	r2,0(r2)
 8010b0c:	10800817 	ldw	r2,32(r2)
 8010b10:	1000021e 	bne	r2,zero,8010b1c <isatty+0x5c>
    {
      return 1;
 8010b14:	00800044 	movi	r2,1
 8010b18:	00000d06 	br	8010b50 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8010b1c:	e0bfed04 	addi	r2,fp,-76
 8010b20:	100b883a 	mov	r5,r2
 8010b24:	e13fec17 	ldw	r4,-80(fp)
 8010b28:	80109b40 	call	80109b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8010b2c:	e0bfee17 	ldw	r2,-72(fp)
 8010b30:	10880020 	cmpeqi	r2,r2,8192
 8010b34:	10803fcc 	andi	r2,r2,255
 8010b38:	00000506 	br	8010b50 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8010b3c:	8010a840 	call	8010a84 <alt_get_errno>
 8010b40:	1007883a 	mov	r3,r2
 8010b44:	00801444 	movi	r2,81
 8010b48:	18800015 	stw	r2,0(r3)
    return 0;
 8010b4c:	0005883a 	mov	r2,zero
  }
}
 8010b50:	e037883a 	mov	sp,fp
 8010b54:	dfc00117 	ldw	ra,4(sp)
 8010b58:	df000017 	ldw	fp,0(sp)
 8010b5c:	dec00204 	addi	sp,sp,8
 8010b60:	f800283a 	ret

08010b64 <alt_get_errno>:
{
 8010b64:	defffe04 	addi	sp,sp,-8
 8010b68:	dfc00115 	stw	ra,4(sp)
 8010b6c:	df000015 	stw	fp,0(sp)
 8010b70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010b74:	d0a04317 	ldw	r2,-32500(gp)
 8010b78:	10000326 	beq	r2,zero,8010b88 <alt_get_errno+0x24>
 8010b7c:	d0a04317 	ldw	r2,-32500(gp)
 8010b80:	103ee83a 	callr	r2
 8010b84:	00000106 	br	8010b8c <alt_get_errno+0x28>
 8010b88:	d0a05a04 	addi	r2,gp,-32408
}
 8010b8c:	e037883a 	mov	sp,fp
 8010b90:	dfc00117 	ldw	ra,4(sp)
 8010b94:	df000017 	ldw	fp,0(sp)
 8010b98:	dec00204 	addi	sp,sp,8
 8010b9c:	f800283a 	ret

08010ba0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8010ba0:	defffb04 	addi	sp,sp,-20
 8010ba4:	dfc00415 	stw	ra,16(sp)
 8010ba8:	df000315 	stw	fp,12(sp)
 8010bac:	df000304 	addi	fp,sp,12
 8010bb0:	e13ffe15 	stw	r4,-8(fp)
 8010bb4:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 8010bb8:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 8010bbc:	e0bffe17 	ldw	r2,-8(fp)
 8010bc0:	00802e16 	blt	zero,r2,8010c7c <kill+0xdc>
 8010bc4:	e0bffd17 	ldw	r2,-12(fp)
 8010bc8:	10800828 	cmpgeui	r2,r2,32
 8010bcc:	1000281e 	bne	r2,zero,8010c70 <kill+0xd0>
 8010bd0:	e0bffd17 	ldw	r2,-12(fp)
 8010bd4:	100690ba 	slli	r3,r2,2
 8010bd8:	00820074 	movhi	r2,2049
 8010bdc:	1885883a 	add	r2,r3,r2
 8010be0:	1082fa17 	ldw	r2,3048(r2)
 8010be4:	1000683a 	jmp	r2
 8010be8:	08010c90 	cmplti	zero,at,1074
 8010bec:	08010c70 	cmpltui	zero,at,1073
 8010bf0:	08010c70 	cmpltui	zero,at,1073
 8010bf4:	08010c68 	cmpgeui	zero,at,1073
 8010bf8:	08010c68 	cmpgeui	zero,at,1073
 8010bfc:	08010c68 	cmpgeui	zero,at,1073
 8010c00:	08010c68 	cmpgeui	zero,at,1073
 8010c04:	08010c70 	cmpltui	zero,at,1073
 8010c08:	08010c68 	cmpgeui	zero,at,1073
 8010c0c:	08010c68 	cmpgeui	zero,at,1073
 8010c10:	08010c68 	cmpgeui	zero,at,1073
 8010c14:	08010c68 	cmpgeui	zero,at,1073
 8010c18:	08010c68 	cmpgeui	zero,at,1073
 8010c1c:	08010c68 	cmpgeui	zero,at,1073
 8010c20:	08010c68 	cmpgeui	zero,at,1073
 8010c24:	08010c68 	cmpgeui	zero,at,1073
 8010c28:	08010c90 	cmplti	zero,at,1074
 8010c2c:	08010c70 	cmpltui	zero,at,1073
 8010c30:	08010c70 	cmpltui	zero,at,1073
 8010c34:	08010c70 	cmpltui	zero,at,1073
 8010c38:	08010c90 	cmplti	zero,at,1074
 8010c3c:	08010c70 	cmpltui	zero,at,1073
 8010c40:	08010c70 	cmpltui	zero,at,1073
 8010c44:	08010c68 	cmpgeui	zero,at,1073
 8010c48:	08010c68 	cmpgeui	zero,at,1073
 8010c4c:	08010c68 	cmpgeui	zero,at,1073
 8010c50:	08010c68 	cmpgeui	zero,at,1073
 8010c54:	08010c68 	cmpgeui	zero,at,1073
 8010c58:	08010c70 	cmpltui	zero,at,1073
 8010c5c:	08010c70 	cmpltui	zero,at,1073
 8010c60:	08010c68 	cmpgeui	zero,at,1073
 8010c64:	08010c68 	cmpgeui	zero,at,1073
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 8010c68:	0009883a 	mov	r4,zero
 8010c6c:	80109400 	call	8010940 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8010c70:	00800584 	movi	r2,22
 8010c74:	e0bfff15 	stw	r2,-4(fp)
 8010c78:	00000606 	br	8010c94 <kill+0xf4>
    }
  }

  else if (pid > 0)
 8010c7c:	e0bffe17 	ldw	r2,-8(fp)
 8010c80:	0080040e 	bge	zero,r2,8010c94 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8010c84:	008000c4 	movi	r2,3
 8010c88:	e0bfff15 	stw	r2,-4(fp)
 8010c8c:	00000106 	br	8010c94 <kill+0xf4>
      break;
 8010c90:	0001883a 	nop
  }

  if (status)
 8010c94:	e0bfff17 	ldw	r2,-4(fp)
 8010c98:	10000626 	beq	r2,zero,8010cb4 <kill+0x114>
  {
    ALT_ERRNO = status;
 8010c9c:	8010b640 	call	8010b64 <alt_get_errno>
 8010ca0:	1007883a 	mov	r3,r2
 8010ca4:	e0bfff17 	ldw	r2,-4(fp)
 8010ca8:	18800015 	stw	r2,0(r3)
    return -1;
 8010cac:	00bfffc4 	movi	r2,-1
 8010cb0:	00000106 	br	8010cb8 <kill+0x118>
  }

  return 0;
 8010cb4:	0005883a 	mov	r2,zero
}
 8010cb8:	e037883a 	mov	sp,fp
 8010cbc:	dfc00117 	ldw	ra,4(sp)
 8010cc0:	df000017 	ldw	fp,0(sp)
 8010cc4:	dec00204 	addi	sp,sp,8
 8010cc8:	f800283a 	ret

08010ccc <alt_get_errno>:
{
 8010ccc:	defffe04 	addi	sp,sp,-8
 8010cd0:	dfc00115 	stw	ra,4(sp)
 8010cd4:	df000015 	stw	fp,0(sp)
 8010cd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010cdc:	d0a04317 	ldw	r2,-32500(gp)
 8010ce0:	10000326 	beq	r2,zero,8010cf0 <alt_get_errno+0x24>
 8010ce4:	d0a04317 	ldw	r2,-32500(gp)
 8010ce8:	103ee83a 	callr	r2
 8010cec:	00000106 	br	8010cf4 <alt_get_errno+0x28>
 8010cf0:	d0a05a04 	addi	r2,gp,-32408
}
 8010cf4:	e037883a 	mov	sp,fp
 8010cf8:	dfc00117 	ldw	ra,4(sp)
 8010cfc:	df000017 	ldw	fp,0(sp)
 8010d00:	dec00204 	addi	sp,sp,8
 8010d04:	f800283a 	ret

08010d08 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8010d08:	defff904 	addi	sp,sp,-28
 8010d0c:	dfc00615 	stw	ra,24(sp)
 8010d10:	df000515 	stw	fp,20(sp)
 8010d14:	df000504 	addi	fp,sp,20
 8010d18:	e13ffd15 	stw	r4,-12(fp)
 8010d1c:	e17ffc15 	stw	r5,-16(fp)
 8010d20:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8010d24:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010d28:	e0bffd17 	ldw	r2,-12(fp)
 8010d2c:	10000616 	blt	r2,zero,8010d48 <lseek+0x40>
 8010d30:	e0bffd17 	ldw	r2,-12(fp)
 8010d34:	10c00324 	muli	r3,r2,12
 8010d38:	00820174 	movhi	r2,2053
 8010d3c:	10981b04 	addi	r2,r2,24684
 8010d40:	1885883a 	add	r2,r3,r2
 8010d44:	00000106 	br	8010d4c <lseek+0x44>
 8010d48:	0005883a 	mov	r2,zero
 8010d4c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8010d50:	e0bffe17 	ldw	r2,-8(fp)
 8010d54:	10001026 	beq	r2,zero,8010d98 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8010d58:	e0bffe17 	ldw	r2,-8(fp)
 8010d5c:	10800017 	ldw	r2,0(r2)
 8010d60:	10800717 	ldw	r2,28(r2)
 8010d64:	10000926 	beq	r2,zero,8010d8c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8010d68:	e0bffe17 	ldw	r2,-8(fp)
 8010d6c:	10800017 	ldw	r2,0(r2)
 8010d70:	10800717 	ldw	r2,28(r2)
 8010d74:	e1bffb17 	ldw	r6,-20(fp)
 8010d78:	e17ffc17 	ldw	r5,-16(fp)
 8010d7c:	e13ffe17 	ldw	r4,-8(fp)
 8010d80:	103ee83a 	callr	r2
 8010d84:	e0bfff15 	stw	r2,-4(fp)
 8010d88:	00000506 	br	8010da0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8010d8c:	00bfde84 	movi	r2,-134
 8010d90:	e0bfff15 	stw	r2,-4(fp)
 8010d94:	00000206 	br	8010da0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8010d98:	00bfebc4 	movi	r2,-81
 8010d9c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 8010da0:	e0bfff17 	ldw	r2,-4(fp)
 8010da4:	1000070e 	bge	r2,zero,8010dc4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8010da8:	8010ccc0 	call	8010ccc <alt_get_errno>
 8010dac:	1007883a 	mov	r3,r2
 8010db0:	e0bfff17 	ldw	r2,-4(fp)
 8010db4:	0085c83a 	sub	r2,zero,r2
 8010db8:	18800015 	stw	r2,0(r3)
    rc = -1;
 8010dbc:	00bfffc4 	movi	r2,-1
 8010dc0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 8010dc4:	e0bfff17 	ldw	r2,-4(fp)
}
 8010dc8:	e037883a 	mov	sp,fp
 8010dcc:	dfc00117 	ldw	ra,4(sp)
 8010dd0:	df000017 	ldw	fp,0(sp)
 8010dd4:	dec00204 	addi	sp,sp,8
 8010dd8:	f800283a 	ret

08010ddc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8010ddc:	defffb04 	addi	sp,sp,-20
 8010de0:	dfc00415 	stw	ra,16(sp)
 8010de4:	df000315 	stw	fp,12(sp)
 8010de8:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8010dec:	0009883a 	mov	r4,zero
 8010df0:	8018c0c0 	call	8018c0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8010df4:	8011b140 	call	8011b14 <OSInit>
 8010df8:	01000044 	movi	r4,1
 8010dfc:	80165980 	call	8016598 <OSSemCreate>
 8010e00:	d0a06315 	stw	r2,-32372(gp)
 8010e04:	01000044 	movi	r4,1
 8010e08:	80165980 	call	8016598 <OSSemCreate>
 8010e0c:	d0a06515 	stw	r2,-32364(gp)
 8010e10:	d0a0b104 	addi	r2,gp,-32060
 8010e14:	e0bffe15 	stw	r2,-8(fp)
 8010e18:	00800044 	movi	r2,1
 8010e1c:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 8010e20:	e0bffd8b 	ldhu	r2,-10(fp)
 8010e24:	1009883a 	mov	r4,r2
 8010e28:	80165980 	call	8016598 <OSSemCreate>
 8010e2c:	1007883a 	mov	r3,r2
 8010e30:	e0bffe17 	ldw	r2,-8(fp)
 8010e34:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 8010e38:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8010e3c:	8018c480 	call	8018c48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8010e40:	01820174 	movhi	r6,2053
 8010e44:	31bf4204 	addi	r6,r6,-760
 8010e48:	01420174 	movhi	r5,2053
 8010e4c:	297f4204 	addi	r5,r5,-760
 8010e50:	01020174 	movhi	r4,2053
 8010e54:	213f4204 	addi	r4,r4,-760
 8010e58:	803b20c0 	call	803b20c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8010e5c:	803acb00 	call	803acb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8010e60:	01020134 	movhi	r4,2052
 8010e64:	212b4504 	addi	r4,r4,-21228
 8010e68:	804a0cc0 	call	804a0cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8010e6c:	d0a05f17 	ldw	r2,-32388(gp)
 8010e70:	d0e06017 	ldw	r3,-32384(gp)
 8010e74:	d1206117 	ldw	r4,-32380(gp)
 8010e78:	200d883a 	mov	r6,r4
 8010e7c:	180b883a 	mov	r5,r3
 8010e80:	1009883a 	mov	r4,r2
 8010e84:	80024180 	call	8002418 <main>
 8010e88:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8010e8c:	01000044 	movi	r4,1
 8010e90:	8024e940 	call	8024e94 <close>
  exit (result);
 8010e94:	e13fff17 	ldw	r4,-4(fp)
 8010e98:	804a0f80 	call	804a0f8 <exit>

08010e9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8010e9c:	defff904 	addi	sp,sp,-28
 8010ea0:	df000615 	stw	fp,24(sp)
 8010ea4:	df000604 	addi	fp,sp,24
 8010ea8:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 8010eac:	0005303a 	rdctl	r2,status
 8010eb0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010eb4:	e0fffd17 	ldw	r3,-12(fp)
 8010eb8:	00bfff84 	movi	r2,-2
 8010ebc:	1884703a 	and	r2,r3,r2
 8010ec0:	1001703a 	wrctl	status,r2
  return context;
 8010ec4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8010ec8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8010ecc:	d0a00417 	ldw	r2,-32752(gp)
 8010ed0:	10c000c4 	addi	r3,r2,3
 8010ed4:	00bfff04 	movi	r2,-4
 8010ed8:	1884703a 	and	r2,r3,r2
 8010edc:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8010ee0:	d0e00417 	ldw	r3,-32752(gp)
 8010ee4:	e0bffa17 	ldw	r2,-24(fp)
 8010ee8:	1887883a 	add	r3,r3,r2
 8010eec:	00840034 	movhi	r2,4096
 8010ef0:	10800004 	addi	r2,r2,0
 8010ef4:	10c0072e 	bgeu	r2,r3,8010f14 <sbrk+0x78>
 8010ef8:	e0bfff17 	ldw	r2,-4(fp)
 8010efc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8010f00:	e0bffc17 	ldw	r2,-16(fp)
 8010f04:	1001703a 	wrctl	status,r2
}
 8010f08:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8010f0c:	00bfffc4 	movi	r2,-1
 8010f10:	00000c06 	br	8010f44 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 8010f14:	d0a00417 	ldw	r2,-32752(gp)
 8010f18:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 8010f1c:	d0e00417 	ldw	r3,-32752(gp)
 8010f20:	e0bffa17 	ldw	r2,-24(fp)
 8010f24:	1885883a 	add	r2,r3,r2
 8010f28:	d0a00415 	stw	r2,-32752(gp)
 8010f2c:	e0bfff17 	ldw	r2,-4(fp)
 8010f30:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8010f34:	e0bffb17 	ldw	r2,-20(fp)
 8010f38:	1001703a 	wrctl	status,r2
}
 8010f3c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8010f40:	e0bffe17 	ldw	r2,-8(fp)
} 
 8010f44:	e037883a 	mov	sp,fp
 8010f48:	df000017 	ldw	fp,0(sp)
 8010f4c:	dec00104 	addi	sp,sp,4
 8010f50:	f800283a 	ret

08010f54 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 8010f54:	deffdf04 	addi	sp,sp,-132
 8010f58:	dfc02015 	stw	ra,128(sp)
 8010f5c:	df001f15 	stw	fp,124(sp)
 8010f60:	df001f04 	addi	fp,sp,124
 8010f64:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 8010f68:	e0bfe404 	addi	r2,fp,-112
 8010f6c:	100b883a 	mov	r5,r2
 8010f70:	01003fc4 	movi	r4,255
 8010f74:	80185340 	call	8018534 <OSTaskQuery>
 8010f78:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
 8010f7c:	e0bfe243 	ldbu	r2,-119(fp)
 8010f80:	10803fcc 	andi	r2,r2,255
 8010f84:	10001d1e 	bne	r2,zero,8010ffc <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
 8010f88:	e0bff083 	ldbu	r2,-62(fp)
 8010f8c:	10803fcc 	andi	r2,r2,255
 8010f90:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 8010f94:	d0a06317 	ldw	r2,-32372(gp)
 8010f98:	e0ffe284 	addi	r3,fp,-118
 8010f9c:	180b883a 	mov	r5,r3
 8010fa0:	1009883a 	mov	r4,r2
 8010fa4:	8016d680 	call	8016d68 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 8010fa8:	e0bfe3c3 	ldbu	r2,-113(fp)
 8010fac:	10803fcc 	andi	r2,r2,255
 8010fb0:	10000726 	beq	r2,zero,8010fd0 <__env_lock+0x7c>
 8010fb4:	d0a00517 	ldw	r2,-32748(gp)
 8010fb8:	e0ffff17 	ldw	r3,-4(fp)
 8010fbc:	1880041e 	bne	r3,r2,8010fd0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 8010fc0:	d0a06217 	ldw	r2,-32376(gp)
 8010fc4:	10800044 	addi	r2,r2,1
 8010fc8:	d0a06215 	stw	r2,-32376(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 8010fcc:	00000c06 	br	8011000 <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
 8010fd0:	d0a06317 	ldw	r2,-32372(gp)
 8010fd4:	e0ffe244 	addi	r3,fp,-119
 8010fd8:	180d883a 	mov	r6,r3
 8010fdc:	000b883a 	mov	r5,zero
 8010fe0:	1009883a 	mov	r4,r2
 8010fe4:	80168c40 	call	80168c4 <OSSemPend>
    locks  = 1;
 8010fe8:	00800044 	movi	r2,1
 8010fec:	d0a06215 	stw	r2,-32376(gp)
    lockid = id;
 8010ff0:	e0bfff17 	ldw	r2,-4(fp)
 8010ff4:	d0a00515 	stw	r2,-32748(gp)
  return;
 8010ff8:	00000106 	br	8011000 <__env_lock+0xac>
    return;
 8010ffc:	0001883a 	nop
}
 8011000:	e037883a 	mov	sp,fp
 8011004:	dfc00117 	ldw	ra,4(sp)
 8011008:	df000017 	ldw	fp,0(sp)
 801100c:	dec00204 	addi	sp,sp,8
 8011010:	f800283a 	ret

08011014 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 8011014:	defffd04 	addi	sp,sp,-12
 8011018:	dfc00215 	stw	ra,8(sp)
 801101c:	df000115 	stw	fp,4(sp)
 8011020:	df000104 	addi	fp,sp,4
 8011024:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 8011028:	d0a06217 	ldw	r2,-32376(gp)
 801102c:	10000b26 	beq	r2,zero,801105c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 8011030:	d0a06217 	ldw	r2,-32376(gp)
 8011034:	10bfffc4 	addi	r2,r2,-1
 8011038:	d0a06215 	stw	r2,-32376(gp)
 801103c:	d0a06217 	ldw	r2,-32376(gp)
 8011040:	1000071e 	bne	r2,zero,8011060 <__env_unlock+0x4c>
  {
    lockid = -1;
 8011044:	00bfffc4 	movi	r2,-1
 8011048:	d0a00515 	stw	r2,-32748(gp)
    OSSemPost( alt_envsem );
 801104c:	d0a06317 	ldw	r2,-32372(gp)
 8011050:	1009883a 	mov	r4,r2
 8011054:	8016c4c0 	call	8016c4c <OSSemPost>
 8011058:	00000106 	br	8011060 <__env_unlock+0x4c>
    return;
 801105c:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 8011060:	e037883a 	mov	sp,fp
 8011064:	dfc00117 	ldw	ra,4(sp)
 8011068:	df000017 	ldw	fp,0(sp)
 801106c:	dec00204 	addi	sp,sp,8
 8011070:	f800283a 	ret

08011074 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 8011074:	deffdb04 	addi	sp,sp,-148
 8011078:	dfc02415 	stw	ra,144(sp)
 801107c:	df002315 	stw	fp,140(sp)
 8011080:	df002304 	addi	fp,sp,140
 8011084:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011088:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 801108c:	d0a06643 	ldbu	r2,-32359(gp)
 8011090:	10803fcc 	andi	r2,r2,255
 8011094:	10800060 	cmpeqi	r2,r2,1
 8011098:	10003826 	beq	r2,zero,801117c <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 801109c:	e0bfe004 	addi	r2,fp,-128
 80110a0:	100b883a 	mov	r5,r2
 80110a4:	01003fc4 	movi	r4,255
 80110a8:	80185340 	call	8018534 <OSTaskQuery>
 80110ac:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
 80110b0:	e0bfde43 	ldbu	r2,-135(fp)
 80110b4:	10803fcc 	andi	r2,r2,255
 80110b8:	1000321e 	bne	r2,zero,8011184 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
 80110bc:	e0bfec83 	ldbu	r2,-78(fp)
 80110c0:	10803fcc 	andi	r2,r2,255
 80110c4:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 80110c8:	d0a06517 	ldw	r2,-32364(gp)
 80110cc:	e0ffde84 	addi	r3,fp,-134
 80110d0:	180b883a 	mov	r5,r3
 80110d4:	1009883a 	mov	r4,r2
 80110d8:	8016d680 	call	8016d68 <OSSemQuery>
  NIOS2_READ_STATUS (context);
 80110dc:	0005303a 	rdctl	r2,status
 80110e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80110e4:	e0fffd17 	ldw	r3,-12(fp)
 80110e8:	00bfff84 	movi	r2,-2
 80110ec:	1884703a 	and	r2,r3,r2
 80110f0:	1001703a 	wrctl	status,r2
  return context;
 80110f4:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
 80110f8:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
 80110fc:	e0bfde8b 	ldhu	r2,-134(fp)
 8011100:	10bfffcc 	andi	r2,r2,65535
 8011104:	10000d1e 	bne	r2,zero,801113c <__malloc_lock+0xc8>
 8011108:	d0a00617 	ldw	r2,-32744(gp)
 801110c:	e0fffe17 	ldw	r3,-8(fp)
 8011110:	18800a1e 	bne	r3,r2,801113c <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
 8011114:	d0a06417 	ldw	r2,-32368(gp)
 8011118:	10800044 	addi	r2,r2,1
 801111c:	d0a06415 	stw	r2,-32368(gp)
 8011120:	e0bfff17 	ldw	r2,-4(fp)
 8011124:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011128:	e0bffc17 	ldw	r2,-16(fp)
 801112c:	1001703a 	wrctl	status,r2
}
 8011130:	0001883a 	nop
    OS_EXIT_CRITICAL();
 8011134:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 8011138:	00001306 	br	8011188 <__malloc_lock+0x114>
 801113c:	e0bfff17 	ldw	r2,-4(fp)
 8011140:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8011144:	e0bffb17 	ldw	r2,-20(fp)
 8011148:	1001703a 	wrctl	status,r2
}
 801114c:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
 8011150:	d0a06517 	ldw	r2,-32364(gp)
 8011154:	e0ffde44 	addi	r3,fp,-135
 8011158:	180d883a 	mov	r6,r3
 801115c:	000b883a 	mov	r5,zero
 8011160:	1009883a 	mov	r4,r2
 8011164:	80168c40 	call	80168c4 <OSSemPend>
    locks  = 1;
 8011168:	00800044 	movi	r2,1
 801116c:	d0a06415 	stw	r2,-32368(gp)
    lockid = id;
 8011170:	e0bffe17 	ldw	r2,-8(fp)
 8011174:	d0a00615 	stw	r2,-32744(gp)
  return;
 8011178:	00000306 	br	8011188 <__malloc_lock+0x114>
      return;
 801117c:	0001883a 	nop
 8011180:	00000106 	br	8011188 <__malloc_lock+0x114>
    return;
 8011184:	0001883a 	nop
}
 8011188:	e037883a 	mov	sp,fp
 801118c:	dfc00117 	ldw	ra,4(sp)
 8011190:	df000017 	ldw	fp,0(sp)
 8011194:	dec00204 	addi	sp,sp,8
 8011198:	f800283a 	ret

0801119c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 801119c:	defff804 	addi	sp,sp,-32
 80111a0:	dfc00715 	stw	ra,28(sp)
 80111a4:	df000615 	stw	fp,24(sp)
 80111a8:	df000604 	addi	fp,sp,24
 80111ac:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80111b0:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
 80111b4:	d0a06643 	ldbu	r2,-32359(gp)
 80111b8:	10803fcc 	andi	r2,r2,255
 80111bc:	10800060 	cmpeqi	r2,r2,1
 80111c0:	10002526 	beq	r2,zero,8011258 <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
 80111c4:	0005303a 	rdctl	r2,status
 80111c8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80111cc:	e0fffe17 	ldw	r3,-8(fp)
 80111d0:	00bfff84 	movi	r2,-2
 80111d4:	1884703a 	and	r2,r3,r2
 80111d8:	1001703a 	wrctl	status,r2
  return context;
 80111dc:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 80111e0:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
 80111e4:	d0a06417 	ldw	r2,-32368(gp)
 80111e8:	1000061e 	bne	r2,zero,8011204 <__malloc_unlock+0x68>
 80111ec:	e0bfff17 	ldw	r2,-4(fp)
 80111f0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 80111f4:	e0bffd17 	ldw	r2,-12(fp)
 80111f8:	1001703a 	wrctl	status,r2
}
 80111fc:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
 8011200:	00001606 	br	801125c <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 8011204:	d0a06417 	ldw	r2,-32368(gp)
 8011208:	10bfffc4 	addi	r2,r2,-1
 801120c:	d0a06415 	stw	r2,-32368(gp)
 8011210:	d0a06417 	ldw	r2,-32368(gp)
 8011214:	10000b1e 	bne	r2,zero,8011244 <__malloc_unlock+0xa8>
  {
    lockid = -1;
 8011218:	00bfffc4 	movi	r2,-1
 801121c:	d0a00615 	stw	r2,-32744(gp)
 8011220:	e0bfff17 	ldw	r2,-4(fp)
 8011224:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011228:	e0bffc17 	ldw	r2,-16(fp)
 801122c:	1001703a 	wrctl	status,r2
}
 8011230:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 8011234:	d0a06517 	ldw	r2,-32364(gp)
 8011238:	1009883a 	mov	r4,r2
 801123c:	8016c4c0 	call	8016c4c <OSSemPost>
 8011240:	00000606 	br	801125c <__malloc_unlock+0xc0>
 8011244:	e0bfff17 	ldw	r2,-4(fp)
 8011248:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801124c:	e0bffb17 	ldw	r2,-20(fp)
 8011250:	1001703a 	wrctl	status,r2
}
 8011254:	00000106 	br	801125c <__malloc_unlock+0xc0>
      return;
 8011258:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 801125c:	e037883a 	mov	sp,fp
 8011260:	dfc00117 	ldw	ra,4(sp)
 8011264:	df000017 	ldw	fp,0(sp)
 8011268:	dec00204 	addi	sp,sp,8
 801126c:	f800283a 	ret

08011270 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 8011270:	defff704 	addi	sp,sp,-36
 8011274:	dfc00815 	stw	ra,32(sp)
 8011278:	df000715 	stw	fp,28(sp)
 801127c:	df000704 	addi	fp,sp,28
 8011280:	e13ffb15 	stw	r4,-20(fp)
 8011284:	e17ffa15 	stw	r5,-24(fp)
 8011288:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801128c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8011290:	e0bff917 	ldw	r2,-28(fp)
 8011294:	1000021e 	bne	r2,zero,80112a0 <OSEventNameGet+0x30>
        return (0);
 8011298:	0005883a 	mov	r2,zero
 801129c:	00003806 	br	8011380 <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80112a0:	e0bffb17 	ldw	r2,-20(fp)
 80112a4:	1000051e 	bne	r2,zero,80112bc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 80112a8:	e0bff917 	ldw	r2,-28(fp)
 80112ac:	00c00104 	movi	r3,4
 80112b0:	10c00005 	stb	r3,0(r2)
        return (0);
 80112b4:	0005883a 	mov	r2,zero
 80112b8:	00003106 	br	8011380 <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80112bc:	e0bffa17 	ldw	r2,-24(fp)
 80112c0:	1000051e 	bne	r2,zero,80112d8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 80112c4:	e0bff917 	ldw	r2,-28(fp)
 80112c8:	00c00304 	movi	r3,12
 80112cc:	10c00005 	stb	r3,0(r2)
        return (0);
 80112d0:	0005883a 	mov	r2,zero
 80112d4:	00002a06 	br	8011380 <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80112d8:	d0a07403 	ldbu	r2,-32304(gp)
 80112dc:	10803fcc 	andi	r2,r2,255
 80112e0:	10000526 	beq	r2,zero,80112f8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 80112e4:	e0bff917 	ldw	r2,-28(fp)
 80112e8:	00c00444 	movi	r3,17
 80112ec:	10c00005 	stb	r3,0(r2)
        return (0);
 80112f0:	0005883a 	mov	r2,zero
 80112f4:	00002206 	br	8011380 <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
 80112f8:	e0bffb17 	ldw	r2,-20(fp)
 80112fc:	10800003 	ldbu	r2,0(r2)
 8011300:	10803fcc 	andi	r2,r2,255
 8011304:	10bfffc4 	addi	r2,r2,-1
 8011308:	10800128 	cmpgeui	r2,r2,4
 801130c:	10000526 	beq	r2,zero,8011324 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8011310:	e0bff917 	ldw	r2,-28(fp)
 8011314:	00c00044 	movi	r3,1
 8011318:	10c00005 	stb	r3,0(r2)
             return (0);
 801131c:	0005883a 	mov	r2,zero
 8011320:	00001706 	br	8011380 <OSEventNameGet+0x110>
             break;
 8011324:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8011328:	0005303a 	rdctl	r2,status
 801132c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011330:	e0fffc17 	ldw	r3,-16(fp)
 8011334:	00bfff84 	movi	r2,-2
 8011338:	1884703a 	and	r2,r3,r2
 801133c:	1001703a 	wrctl	status,r2
  return context;
 8011340:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8011344:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 8011348:	e0bffb17 	ldw	r2,-20(fp)
 801134c:	10800384 	addi	r2,r2,14
 8011350:	100b883a 	mov	r5,r2
 8011354:	e13ffa17 	ldw	r4,-24(fp)
 8011358:	8012d200 	call	8012d20 <OS_StrCopy>
 801135c:	e0bffec5 	stb	r2,-5(fp)
 8011360:	e0bfff17 	ldw	r2,-4(fp)
 8011364:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8011368:	e0bffd17 	ldw	r2,-12(fp)
 801136c:	1001703a 	wrctl	status,r2
}
 8011370:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011374:	e0bff917 	ldw	r2,-28(fp)
 8011378:	10000005 	stb	zero,0(r2)
    return (len);
 801137c:	e0bffec3 	ldbu	r2,-5(fp)
}
 8011380:	e037883a 	mov	sp,fp
 8011384:	dfc00117 	ldw	ra,4(sp)
 8011388:	df000017 	ldw	fp,0(sp)
 801138c:	dec00204 	addi	sp,sp,8
 8011390:	f800283a 	ret

08011394 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 8011394:	defff604 	addi	sp,sp,-40
 8011398:	dfc00915 	stw	ra,36(sp)
 801139c:	df000815 	stw	fp,32(sp)
 80113a0:	df000804 	addi	fp,sp,32
 80113a4:	e13ffa15 	stw	r4,-24(fp)
 80113a8:	e17ff915 	stw	r5,-28(fp)
 80113ac:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80113b0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80113b4:	e0bff817 	ldw	r2,-32(fp)
 80113b8:	10004226 	beq	r2,zero,80114c4 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 80113bc:	e0bffa17 	ldw	r2,-24(fp)
 80113c0:	1000041e 	bne	r2,zero,80113d4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 80113c4:	e0bff817 	ldw	r2,-32(fp)
 80113c8:	00c00104 	movi	r3,4
 80113cc:	10c00005 	stb	r3,0(r2)
        return;
 80113d0:	00003d06 	br	80114c8 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80113d4:	e0bff917 	ldw	r2,-28(fp)
 80113d8:	1000041e 	bne	r2,zero,80113ec <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 80113dc:	e0bff817 	ldw	r2,-32(fp)
 80113e0:	00c00304 	movi	r3,12
 80113e4:	10c00005 	stb	r3,0(r2)
        return;
 80113e8:	00003706 	br	80114c8 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80113ec:	d0a07403 	ldbu	r2,-32304(gp)
 80113f0:	10803fcc 	andi	r2,r2,255
 80113f4:	10000426 	beq	r2,zero,8011408 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 80113f8:	e0bff817 	ldw	r2,-32(fp)
 80113fc:	00c00484 	movi	r3,18
 8011400:	10c00005 	stb	r3,0(r2)
        return;
 8011404:	00003006 	br	80114c8 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
 8011408:	e0bffa17 	ldw	r2,-24(fp)
 801140c:	10800003 	ldbu	r2,0(r2)
 8011410:	10803fcc 	andi	r2,r2,255
 8011414:	10bfffc4 	addi	r2,r2,-1
 8011418:	10800128 	cmpgeui	r2,r2,4
 801141c:	10000426 	beq	r2,zero,8011430 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8011420:	e0bff817 	ldw	r2,-32(fp)
 8011424:	00c00044 	movi	r3,1
 8011428:	10c00005 	stb	r3,0(r2)
             return;
 801142c:	00002606 	br	80114c8 <OSEventNameSet+0x134>
             break;
 8011430:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8011434:	0005303a 	rdctl	r2,status
 8011438:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801143c:	e0fffd17 	ldw	r3,-12(fp)
 8011440:	00bfff84 	movi	r2,-2
 8011444:	1884703a 	and	r2,r3,r2
 8011448:	1001703a 	wrctl	status,r2
  return context;
 801144c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8011450:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 8011454:	e13ff917 	ldw	r4,-28(fp)
 8011458:	8012d940 	call	8012d94 <OS_StrLen>
 801145c:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 8011460:	e0bffec3 	ldbu	r2,-5(fp)
 8011464:	10800830 	cmpltui	r2,r2,32
 8011468:	1000091e 	bne	r2,zero,8011490 <OSEventNameSet+0xfc>
 801146c:	e0bfff17 	ldw	r2,-4(fp)
 8011470:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011474:	e0bffc17 	ldw	r2,-16(fp)
 8011478:	1001703a 	wrctl	status,r2
}
 801147c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 8011480:	e0bff817 	ldw	r2,-32(fp)
 8011484:	00c002c4 	movi	r3,11
 8011488:	10c00005 	stb	r3,0(r2)
        return;
 801148c:	00000e06 	br	80114c8 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 8011490:	e0bffa17 	ldw	r2,-24(fp)
 8011494:	10800384 	addi	r2,r2,14
 8011498:	e17ff917 	ldw	r5,-28(fp)
 801149c:	1009883a 	mov	r4,r2
 80114a0:	8012d200 	call	8012d20 <OS_StrCopy>
 80114a4:	e0bfff17 	ldw	r2,-4(fp)
 80114a8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80114ac:	e0bffb17 	ldw	r2,-20(fp)
 80114b0:	1001703a 	wrctl	status,r2
}
 80114b4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80114b8:	e0bff817 	ldw	r2,-32(fp)
 80114bc:	10000005 	stb	zero,0(r2)
 80114c0:	00000106 	br	80114c8 <OSEventNameSet+0x134>
        return;
 80114c4:	0001883a 	nop
}
 80114c8:	e037883a 	mov	sp,fp
 80114cc:	dfc00117 	ldw	ra,4(sp)
 80114d0:	df000017 	ldw	fp,0(sp)
 80114d4:	dec00204 	addi	sp,sp,8
 80114d8:	f800283a 	ret

080114dc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 80114dc:	deffed04 	addi	sp,sp,-76
 80114e0:	dfc01215 	stw	ra,72(sp)
 80114e4:	df001115 	stw	fp,68(sp)
 80114e8:	df001104 	addi	fp,sp,68
 80114ec:	e13ff215 	stw	r4,-56(fp)
 80114f0:	e17ff115 	stw	r5,-60(fp)
 80114f4:	e1bff015 	stw	r6,-64(fp)
 80114f8:	3805883a 	mov	r2,r7
 80114fc:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 8011500:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 8011504:	e0800217 	ldw	r2,8(fp)
 8011508:	1000021e 	bne	r2,zero,8011514 <OSEventPendMulti+0x38>
        return (0);
 801150c:	0005883a 	mov	r2,zero
 8011510:	00017b06 	br	8011b00 <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 8011514:	e0bff217 	ldw	r2,-56(fp)
 8011518:	1000051e 	bne	r2,zero,8011530 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 801151c:	e0800217 	ldw	r2,8(fp)
 8011520:	00c00104 	movi	r3,4
 8011524:	10c00005 	stb	r3,0(r2)
        return (0);
 8011528:	0005883a 	mov	r2,zero
 801152c:	00017406 	br	8011b00 <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 8011530:	e0bff117 	ldw	r2,-60(fp)
 8011534:	1000051e 	bne	r2,zero,801154c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 8011538:	e0800217 	ldw	r2,8(fp)
 801153c:	00c00104 	movi	r3,4
 8011540:	10c00005 	stb	r3,0(r2)
        return (0);
 8011544:	0005883a 	mov	r2,zero
 8011548:	00016d06 	br	8011b00 <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 801154c:	e0bff017 	ldw	r2,-64(fp)
 8011550:	1000051e 	bne	r2,zero,8011568 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 8011554:	e0800217 	ldw	r2,8(fp)
 8011558:	00c00104 	movi	r3,4
 801155c:	10c00005 	stb	r3,0(r2)
        return (0);
 8011560:	0005883a 	mov	r2,zero
 8011564:	00016606 	br	8011b00 <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 8011568:	e0bff117 	ldw	r2,-60(fp)
 801156c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 8011570:	e0bff217 	ldw	r2,-56(fp)
 8011574:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
 8011578:	e0bfff17 	ldw	r2,-4(fp)
 801157c:	10800017 	ldw	r2,0(r2)
 8011580:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
 8011584:	00001b06 	br	80115f4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 8011588:	e0bffe17 	ldw	r2,-8(fp)
 801158c:	10800003 	ldbu	r2,0(r2)
 8011590:	10803fcc 	andi	r2,r2,255
 8011594:	10c000e0 	cmpeqi	r3,r2,3
 8011598:	18000b1e 	bne	r3,zero,80115c8 <OSEventPendMulti+0xec>
 801159c:	10c00108 	cmpgei	r3,r2,4
 80115a0:	1800041e 	bne	r3,zero,80115b4 <OSEventPendMulti+0xd8>
 80115a4:	10c00060 	cmpeqi	r3,r2,1
 80115a8:	1800091e 	bne	r3,zero,80115d0 <OSEventPendMulti+0xf4>
 80115ac:	108000a0 	cmpeqi	r2,r2,2
 80115b0:	1000091e 	bne	r2,zero,80115d8 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 80115b4:	e0800217 	ldw	r2,8(fp)
 80115b8:	00c00044 	movi	r3,1
 80115bc:	10c00005 	stb	r3,0(r2)
                 return (0);
 80115c0:	0005883a 	mov	r2,zero
 80115c4:	00014e06 	br	8011b00 <OSEventPendMulti+0x624>
                 break;
 80115c8:	0001883a 	nop
 80115cc:	00000306 	br	80115dc <OSEventPendMulti+0x100>
                 break;
 80115d0:	0001883a 	nop
 80115d4:	00000106 	br	80115dc <OSEventPendMulti+0x100>
                 break;
 80115d8:	0001883a 	nop
        }
        pevents++;
 80115dc:	e0bfff17 	ldw	r2,-4(fp)
 80115e0:	10800104 	addi	r2,r2,4
 80115e4:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 80115e8:	e0bfff17 	ldw	r2,-4(fp)
 80115ec:	10800017 	ldw	r2,0(r2)
 80115f0:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
 80115f4:	e0bffe17 	ldw	r2,-8(fp)
 80115f8:	103fe31e 	bne	r2,zero,8011588 <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 80115fc:	d0a07403 	ldbu	r2,-32304(gp)
 8011600:	10803fcc 	andi	r2,r2,255
 8011604:	10000526 	beq	r2,zero,801161c <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 8011608:	e0800217 	ldw	r2,8(fp)
 801160c:	00c00084 	movi	r3,2
 8011610:	10c00005 	stb	r3,0(r2)
        return (0);
 8011614:	0005883a 	mov	r2,zero
 8011618:	00013906 	br	8011b00 <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 801161c:	d0a06603 	ldbu	r2,-32360(gp)
 8011620:	10803fcc 	andi	r2,r2,255
 8011624:	10000526 	beq	r2,zero,801163c <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 8011628:	e0800217 	ldw	r2,8(fp)
 801162c:	00c00344 	movi	r3,13
 8011630:	10c00005 	stb	r3,0(r2)
        return (0);
 8011634:	0005883a 	mov	r2,zero
 8011638:	00013106 	br	8011b00 <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
 801163c:	0005303a 	rdctl	r2,status
 8011640:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011644:	e0fff917 	ldw	r3,-28(fp)
 8011648:	00bfff84 	movi	r2,-2
 801164c:	1884703a 	and	r2,r3,r2
 8011650:	1001703a 	wrctl	status,r2
  return context;
 8011654:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8011658:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
 801165c:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
 8011660:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
 8011664:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
 8011668:	e0bff217 	ldw	r2,-56(fp)
 801166c:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
 8011670:	e0bfff17 	ldw	r2,-4(fp)
 8011674:	10800017 	ldw	r2,0(r2)
 8011678:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 801167c:	00008406 	br	8011890 <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
 8011680:	e0bffe17 	ldw	r2,-8(fp)
 8011684:	10800003 	ldbu	r2,0(r2)
 8011688:	10803fcc 	andi	r2,r2,255
 801168c:	10c000e0 	cmpeqi	r3,r2,3
 8011690:	1800071e 	bne	r3,zero,80116b0 <OSEventPendMulti+0x1d4>
 8011694:	10c00108 	cmpgei	r3,r2,4
 8011698:	18006b1e 	bne	r3,zero,8011848 <OSEventPendMulti+0x36c>
 801169c:	10c00060 	cmpeqi	r3,r2,1
 80116a0:	1800201e 	bne	r3,zero,8011724 <OSEventPendMulti+0x248>
 80116a4:	108000a0 	cmpeqi	r2,r2,2
 80116a8:	1000381e 	bne	r2,zero,801178c <OSEventPendMulti+0x2b0>
 80116ac:	00006606 	br	8011848 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 80116b0:	e0bffe17 	ldw	r2,-8(fp)
 80116b4:	1080020b 	ldhu	r2,8(r2)
 80116b8:	10bfffcc 	andi	r2,r2,65535
 80116bc:	10001526 	beq	r2,zero,8011714 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 80116c0:	e0bffe17 	ldw	r2,-8(fp)
 80116c4:	1080020b 	ldhu	r2,8(r2)
 80116c8:	10bfffc4 	addi	r2,r2,-1
 80116cc:	1007883a 	mov	r3,r2
 80116d0:	e0bffe17 	ldw	r2,-8(fp)
 80116d4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 80116d8:	e0bff117 	ldw	r2,-60(fp)
 80116dc:	10c00104 	addi	r3,r2,4
 80116e0:	e0fff115 	stw	r3,-60(fp)
 80116e4:	e0fffe17 	ldw	r3,-8(fp)
 80116e8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 80116ec:	00800044 	movi	r2,1
 80116f0:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 80116f4:	e0bff017 	ldw	r2,-64(fp)
 80116f8:	10c00104 	addi	r3,r2,4
 80116fc:	e0fff015 	stw	r3,-64(fp)
 8011700:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 8011704:	e0bffd0b 	ldhu	r2,-12(fp)
 8011708:	10800044 	addi	r2,r2,1
 801170c:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 8011710:	00005906 	br	8011878 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 8011714:	e0bffcc3 	ldbu	r2,-13(fp)
 8011718:	10800054 	ori	r2,r2,1
 801171c:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 8011720:	00005506 	br	8011878 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 8011724:	e0bffe17 	ldw	r2,-8(fp)
 8011728:	10800117 	ldw	r2,4(r2)
 801172c:	10001326 	beq	r2,zero,801177c <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 8011730:	e0bff017 	ldw	r2,-64(fp)
 8011734:	10c00104 	addi	r3,r2,4
 8011738:	e0fff015 	stw	r3,-64(fp)
 801173c:	e0fffe17 	ldw	r3,-8(fp)
 8011740:	18c00117 	ldw	r3,4(r3)
 8011744:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 8011748:	e0bffe17 	ldw	r2,-8(fp)
 801174c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 8011750:	e0bff117 	ldw	r2,-60(fp)
 8011754:	10c00104 	addi	r3,r2,4
 8011758:	e0fff115 	stw	r3,-60(fp)
 801175c:	e0fffe17 	ldw	r3,-8(fp)
 8011760:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 8011764:	00800044 	movi	r2,1
 8011768:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
 801176c:	e0bffd0b 	ldhu	r2,-12(fp)
 8011770:	10800044 	addi	r2,r2,1
 8011774:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 8011778:	00003f06 	br	8011878 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 801177c:	e0bffcc3 	ldbu	r2,-13(fp)
 8011780:	10800094 	ori	r2,r2,2
 8011784:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 8011788:	00003b06 	br	8011878 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 801178c:	e0bffe17 	ldw	r2,-8(fp)
 8011790:	10800117 	ldw	r2,4(r2)
 8011794:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 8011798:	e0bffa17 	ldw	r2,-24(fp)
 801179c:	1080058b 	ldhu	r2,22(r2)
 80117a0:	10bfffcc 	andi	r2,r2,65535
 80117a4:	10002426 	beq	r2,zero,8011838 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 80117a8:	e0bffa17 	ldw	r2,-24(fp)
 80117ac:	10c00417 	ldw	r3,16(r2)
 80117b0:	19000104 	addi	r4,r3,4
 80117b4:	e0bffa17 	ldw	r2,-24(fp)
 80117b8:	11000415 	stw	r4,16(r2)
 80117bc:	e0bff017 	ldw	r2,-64(fp)
 80117c0:	11000104 	addi	r4,r2,4
 80117c4:	e13ff015 	stw	r4,-64(fp)
 80117c8:	18c00017 	ldw	r3,0(r3)
 80117cc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 80117d0:	e0bffa17 	ldw	r2,-24(fp)
 80117d4:	10c00417 	ldw	r3,16(r2)
 80117d8:	e0bffa17 	ldw	r2,-24(fp)
 80117dc:	10800217 	ldw	r2,8(r2)
 80117e0:	1880041e 	bne	r3,r2,80117f4 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 80117e4:	e0bffa17 	ldw	r2,-24(fp)
 80117e8:	10c00117 	ldw	r3,4(r2)
 80117ec:	e0bffa17 	ldw	r2,-24(fp)
 80117f0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 80117f4:	e0bffa17 	ldw	r2,-24(fp)
 80117f8:	1080058b 	ldhu	r2,22(r2)
 80117fc:	10bfffc4 	addi	r2,r2,-1
 8011800:	1007883a 	mov	r3,r2
 8011804:	e0bffa17 	ldw	r2,-24(fp)
 8011808:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 801180c:	e0bff117 	ldw	r2,-60(fp)
 8011810:	10c00104 	addi	r3,r2,4
 8011814:	e0fff115 	stw	r3,-60(fp)
 8011818:	e0fffe17 	ldw	r3,-8(fp)
 801181c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 8011820:	00800044 	movi	r2,1
 8011824:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
 8011828:	e0bffd0b 	ldhu	r2,-12(fp)
 801182c:	10800044 	addi	r2,r2,1
 8011830:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 8011834:	00001006 	br	8011878 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 8011838:	e0bffcc3 	ldbu	r2,-13(fp)
 801183c:	10800114 	ori	r2,r2,4
 8011840:	e0bffcc5 	stb	r2,-13(fp)
                 break;
 8011844:	00000c06 	br	8011878 <OSEventPendMulti+0x39c>
 8011848:	e0bffb17 	ldw	r2,-20(fp)
 801184c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8011850:	e0bff817 	ldw	r2,-32(fp)
 8011854:	1001703a 	wrctl	status,r2
}
 8011858:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 801185c:	e0bff117 	ldw	r2,-60(fp)
 8011860:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 8011864:	e0800217 	ldw	r2,8(fp)
 8011868:	00c00044 	movi	r3,1
 801186c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 8011870:	e0bffd0b 	ldhu	r2,-12(fp)
 8011874:	0000a206 	br	8011b00 <OSEventPendMulti+0x624>
        }
        pevents++;
 8011878:	e0bfff17 	ldw	r2,-4(fp)
 801187c:	10800104 	addi	r2,r2,4
 8011880:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 8011884:	e0bfff17 	ldw	r2,-4(fp)
 8011888:	10800017 	ldw	r2,0(r2)
 801188c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 8011890:	e0bffe17 	ldw	r2,-8(fp)
 8011894:	103f7a1e 	bne	r2,zero,8011680 <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 8011898:	e0bffdc3 	ldbu	r2,-9(fp)
 801189c:	10800058 	cmpnei	r2,r2,1
 80118a0:	10000b1e 	bne	r2,zero,80118d0 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 80118a4:	e0bff117 	ldw	r2,-60(fp)
 80118a8:	10000015 	stw	zero,0(r2)
 80118ac:	e0bffb17 	ldw	r2,-20(fp)
 80118b0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80118b4:	e0bff717 	ldw	r2,-36(fp)
 80118b8:	1001703a 	wrctl	status,r2
}
 80118bc:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 80118c0:	e0800217 	ldw	r2,8(fp)
 80118c4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 80118c8:	e0bffd0b 	ldhu	r2,-12(fp)
 80118cc:	00008c06 	br	8011b00 <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 80118d0:	d0a07517 	ldw	r2,-32300(gp)
 80118d4:	10800c03 	ldbu	r2,48(r2)
 80118d8:	e0fffcc3 	ldbu	r3,-13(fp)
 80118dc:	1884b03a 	or	r2,r3,r2
 80118e0:	1009883a 	mov	r4,r2
 80118e4:	d0a07517 	ldw	r2,-32300(gp)
 80118e8:	00ffe004 	movi	r3,-128
 80118ec:	20c6b03a 	or	r3,r4,r3
 80118f0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80118f4:	d0a07517 	ldw	r2,-32300(gp)
 80118f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 80118fc:	d0a07517 	ldw	r2,-32300(gp)
 8011900:	e0ffef0b 	ldhu	r3,-68(fp)
 8011904:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 8011908:	e13ff217 	ldw	r4,-56(fp)
 801190c:	80124440 	call	8012444 <OS_EventTaskWaitMulti>
 8011910:	e0bffb17 	ldw	r2,-20(fp)
 8011914:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 8011918:	e0bff517 	ldw	r2,-44(fp)
 801191c:	1001703a 	wrctl	status,r2
}
 8011920:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 8011924:	8012be80 	call	8012be8 <OS_Sched>
  NIOS2_READ_STATUS (context);
 8011928:	0005303a 	rdctl	r2,status
 801192c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011930:	e0fff617 	ldw	r3,-40(fp)
 8011934:	00bfff84 	movi	r2,-2
 8011938:	1884703a 	and	r2,r3,r2
 801193c:	1001703a 	wrctl	status,r2
  return context;
 8011940:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
 8011944:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 8011948:	d0a07517 	ldw	r2,-32300(gp)
 801194c:	10800c43 	ldbu	r2,49(r2)
 8011950:	10803fcc 	andi	r2,r2,255
 8011954:	10000226 	beq	r2,zero,8011960 <OSEventPendMulti+0x484>
 8011958:	10800098 	cmpnei	r2,r2,2
 801195c:	1000181e 	bne	r2,zero,80119c0 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 8011960:	d0a07517 	ldw	r2,-32300(gp)
 8011964:	10800717 	ldw	r2,28(r2)
 8011968:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 801196c:	e0bffe17 	ldw	r2,-8(fp)
 8011970:	10000b26 	beq	r2,zero,80119a0 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 8011974:	e0bff117 	ldw	r2,-60(fp)
 8011978:	10c00104 	addi	r3,r2,4
 801197c:	e0fff115 	stw	r3,-60(fp)
 8011980:	e0fffe17 	ldw	r3,-8(fp)
 8011984:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 8011988:	e0bff117 	ldw	r2,-60(fp)
 801198c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 8011990:	e0bffd0b 	ldhu	r2,-12(fp)
 8011994:	10800044 	addi	r2,r2,1
 8011998:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 801199c:	00000d06 	br	80119d4 <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 80119a0:	d0a07517 	ldw	r2,-32300(gp)
 80119a4:	00c00044 	movi	r3,1
 80119a8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 80119ac:	d0a07517 	ldw	r2,-32300(gp)
 80119b0:	e17ff217 	ldw	r5,-56(fp)
 80119b4:	1009883a 	mov	r4,r2
 80119b8:	801263c0 	call	801263c <OS_EventTaskRemoveMulti>
			 break;
 80119bc:	00000506 	br	80119d4 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 80119c0:	d0a07517 	ldw	r2,-32300(gp)
 80119c4:	e17ff217 	ldw	r5,-56(fp)
 80119c8:	1009883a 	mov	r4,r2
 80119cc:	801263c0 	call	801263c <OS_EventTaskRemoveMulti>
             break;
 80119d0:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 80119d4:	d0a07517 	ldw	r2,-32300(gp)
 80119d8:	10800c43 	ldbu	r2,49(r2)
 80119dc:	10803fcc 	andi	r2,r2,255
 80119e0:	10000326 	beq	r2,zero,80119f0 <OSEventPendMulti+0x514>
 80119e4:	108000a0 	cmpeqi	r2,r2,2
 80119e8:	1000251e 	bne	r2,zero,8011a80 <OSEventPendMulti+0x5a4>
 80119ec:	00002c06 	br	8011aa0 <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 80119f0:	e0bffe17 	ldw	r2,-8(fp)
 80119f4:	10800003 	ldbu	r2,0(r2)
 80119f8:	10803fcc 	andi	r2,r2,255
 80119fc:	10c000c8 	cmpgei	r3,r2,3
 8011a00:	1800021e 	bne	r3,zero,8011a0c <OSEventPendMulti+0x530>
 8011a04:	00800816 	blt	zero,r2,8011a28 <OSEventPendMulti+0x54c>
 8011a08:	00000e06 	br	8011a44 <OSEventPendMulti+0x568>
 8011a0c:	108000d8 	cmpnei	r2,r2,3
 8011a10:	10000c1e 	bne	r2,zero,8011a44 <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 8011a14:	e0bff017 	ldw	r2,-64(fp)
 8011a18:	10c00104 	addi	r3,r2,4
 8011a1c:	e0fff015 	stw	r3,-64(fp)
 8011a20:	10000015 	stw	zero,0(r2)
                      break;
 8011a24:	00001306 	br	8011a74 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 8011a28:	d0e07517 	ldw	r3,-32300(gp)
 8011a2c:	e0bff017 	ldw	r2,-64(fp)
 8011a30:	11000104 	addi	r4,r2,4
 8011a34:	e13ff015 	stw	r4,-64(fp)
 8011a38:	18c00917 	ldw	r3,36(r3)
 8011a3c:	10c00015 	stw	r3,0(r2)
                      break;
 8011a40:	00000c06 	br	8011a74 <OSEventPendMulti+0x598>
 8011a44:	e0bffb17 	ldw	r2,-20(fp)
 8011a48:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 8011a4c:	e0bff417 	ldw	r2,-48(fp)
 8011a50:	1001703a 	wrctl	status,r2
}
 8011a54:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 8011a58:	e0bff117 	ldw	r2,-60(fp)
 8011a5c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 8011a60:	e0800217 	ldw	r2,8(fp)
 8011a64:	00c00044 	movi	r3,1
 8011a68:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 8011a6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8011a70:	00002306 	br	8011b00 <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
 8011a74:	e0800217 	ldw	r2,8(fp)
 8011a78:	10000005 	stb	zero,0(r2)
             break;
 8011a7c:	00001006 	br	8011ac0 <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 8011a80:	e0bff017 	ldw	r2,-64(fp)
 8011a84:	10c00104 	addi	r3,r2,4
 8011a88:	e0fff015 	stw	r3,-64(fp)
 8011a8c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 8011a90:	e0800217 	ldw	r2,8(fp)
 8011a94:	00c00384 	movi	r3,14
 8011a98:	10c00005 	stb	r3,0(r2)
             break;
 8011a9c:	00000806 	br	8011ac0 <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 8011aa0:	e0bff017 	ldw	r2,-64(fp)
 8011aa4:	10c00104 	addi	r3,r2,4
 8011aa8:	e0fff015 	stw	r3,-64(fp)
 8011aac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 8011ab0:	e0800217 	ldw	r2,8(fp)
 8011ab4:	00c00284 	movi	r3,10
 8011ab8:	10c00005 	stb	r3,0(r2)
             break;
 8011abc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 8011ac0:	d0a07517 	ldw	r2,-32300(gp)
 8011ac4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 8011ac8:	d0a07517 	ldw	r2,-32300(gp)
 8011acc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 8011ad0:	d0a07517 	ldw	r2,-32300(gp)
 8011ad4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8011ad8:	d0a07517 	ldw	r2,-32300(gp)
 8011adc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 8011ae0:	d0a07517 	ldw	r2,-32300(gp)
 8011ae4:	10000915 	stw	zero,36(r2)
 8011ae8:	e0bffb17 	ldw	r2,-20(fp)
 8011aec:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
 8011af0:	e0bff317 	ldw	r2,-52(fp)
 8011af4:	1001703a 	wrctl	status,r2
}
 8011af8:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 8011afc:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8011b00:	e037883a 	mov	sp,fp
 8011b04:	dfc00117 	ldw	ra,4(sp)
 8011b08:	df000017 	ldw	fp,0(sp)
 8011b0c:	dec00204 	addi	sp,sp,8
 8011b10:	f800283a 	ret

08011b14 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8011b14:	defffe04 	addi	sp,sp,-8
 8011b18:	dfc00115 	stw	ra,4(sp)
 8011b1c:	df000015 	stw	fp,0(sp)
 8011b20:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8011b24:	803c0940 	call	803c094 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8011b28:	80128840 	call	8012884 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8011b2c:	80128cc0 	call	80128cc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8011b30:	8012a400 	call	8012a40 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8011b34:	80127a40 	call	80127a4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8011b38:	80149980 	call	8014998 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8011b3c:	80152bc0 	call	80152bc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8011b40:	801643c0 	call	801643c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8011b44:	80129380 	call	8012938 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8011b48:	80129bc0 	call	80129bc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8011b4c:	803c0b40 	call	803c0b4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 8011b50:	80132bc0 	call	80132bc <OSDebugInit>
#endif
}
 8011b54:	0001883a 	nop
 8011b58:	e037883a 	mov	sp,fp
 8011b5c:	dfc00117 	ldw	ra,4(sp)
 8011b60:	df000017 	ldw	fp,0(sp)
 8011b64:	dec00204 	addi	sp,sp,8
 8011b68:	f800283a 	ret

08011b6c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8011b6c:	deffff04 	addi	sp,sp,-4
 8011b70:	df000015 	stw	fp,0(sp)
 8011b74:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 8011b78:	d0a06643 	ldbu	r2,-32359(gp)
 8011b7c:	10803fcc 	andi	r2,r2,255
 8011b80:	10800058 	cmpnei	r2,r2,1
 8011b84:	1000071e 	bne	r2,zero,8011ba4 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 8011b88:	d0a07403 	ldbu	r2,-32304(gp)
 8011b8c:	10803fcc 	andi	r2,r2,255
 8011b90:	10803fe0 	cmpeqi	r2,r2,255
 8011b94:	1000031e 	bne	r2,zero,8011ba4 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8011b98:	d0a07403 	ldbu	r2,-32304(gp)
 8011b9c:	10800044 	addi	r2,r2,1
 8011ba0:	d0a07405 	stb	r2,-32304(gp)
        }
    }
}
 8011ba4:	0001883a 	nop
 8011ba8:	e037883a 	mov	sp,fp
 8011bac:	df000017 	ldw	fp,0(sp)
 8011bb0:	dec00104 	addi	sp,sp,4
 8011bb4:	f800283a 	ret

08011bb8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8011bb8:	defffb04 	addi	sp,sp,-20
 8011bbc:	dfc00415 	stw	ra,16(sp)
 8011bc0:	df000315 	stw	fp,12(sp)
 8011bc4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8011bc8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 8011bcc:	d0a06643 	ldbu	r2,-32359(gp)
 8011bd0:	10803fcc 	andi	r2,r2,255
 8011bd4:	10800058 	cmpnei	r2,r2,1
 8011bd8:	10002e1e 	bne	r2,zero,8011c94 <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
 8011bdc:	0005303a 	rdctl	r2,status
 8011be0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011be4:	e0fffe17 	ldw	r3,-8(fp)
 8011be8:	00bfff84 	movi	r2,-2
 8011bec:	1884703a 	and	r2,r3,r2
 8011bf0:	1001703a 	wrctl	status,r2
  return context;
 8011bf4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 8011bf8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 8011bfc:	d0a07403 	ldbu	r2,-32304(gp)
 8011c00:	10803fcc 	andi	r2,r2,255
 8011c04:	10000326 	beq	r2,zero,8011c14 <OSIntExit+0x5c>
            OSIntNesting--;
 8011c08:	d0a07403 	ldbu	r2,-32304(gp)
 8011c0c:	10bfffc4 	addi	r2,r2,-1
 8011c10:	d0a07405 	stb	r2,-32304(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 8011c14:	d0a07403 	ldbu	r2,-32304(gp)
 8011c18:	10803fcc 	andi	r2,r2,255
 8011c1c:	1000181e 	bne	r2,zero,8011c80 <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 8011c20:	d0a06603 	ldbu	r2,-32360(gp)
 8011c24:	10803fcc 	andi	r2,r2,255
 8011c28:	1000151e 	bne	r2,zero,8011c80 <OSIntExit+0xc8>
                OS_SchedNew();
 8011c2c:	8012cb40 	call	8012cb4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8011c30:	d0e06803 	ldbu	r3,-32352(gp)
 8011c34:	d0a06843 	ldbu	r2,-32351(gp)
 8011c38:	18c03fcc 	andi	r3,r3,255
 8011c3c:	10803fcc 	andi	r2,r2,255
 8011c40:	18800f26 	beq	r3,r2,8011c80 <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 8011c44:	d0a06803 	ldbu	r2,-32352(gp)
 8011c48:	10803fcc 	andi	r2,r2,255
 8011c4c:	100690ba 	slli	r3,r2,2
 8011c50:	008201b4 	movhi	r2,2054
 8011c54:	1885883a 	add	r2,r3,r2
 8011c58:	10b90c17 	ldw	r2,-7120(r2)
 8011c5c:	d0a07015 	stw	r2,-32320(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8011c60:	d0a07017 	ldw	r2,-32320(gp)
 8011c64:	10c00e17 	ldw	r3,56(r2)
 8011c68:	18c00044 	addi	r3,r3,1
 8011c6c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8011c70:	d0a06b17 	ldw	r2,-32340(gp)
 8011c74:	10800044 	addi	r2,r2,1
 8011c78:	d0a06b15 	stw	r2,-32340(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8011c7c:	803bdc40 	call	803bdc4 <OSCtxSw>
 8011c80:	e0bfff17 	ldw	r2,-4(fp)
 8011c84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8011c88:	e0bffd17 	ldw	r2,-12(fp)
 8011c8c:	1001703a 	wrctl	status,r2
}
 8011c90:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 8011c94:	0001883a 	nop
 8011c98:	e037883a 	mov	sp,fp
 8011c9c:	dfc00117 	ldw	ra,4(sp)
 8011ca0:	df000017 	ldw	fp,0(sp)
 8011ca4:	dec00204 	addi	sp,sp,8
 8011ca8:	f800283a 	ret

08011cac <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 8011cac:	defffc04 	addi	sp,sp,-16
 8011cb0:	df000315 	stw	fp,12(sp)
 8011cb4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011cb8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8011cbc:	d0a06643 	ldbu	r2,-32359(gp)
 8011cc0:	10803fcc 	andi	r2,r2,255
 8011cc4:	10800058 	cmpnei	r2,r2,1
 8011cc8:	1000171e 	bne	r2,zero,8011d28 <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
 8011ccc:	0005303a 	rdctl	r2,status
 8011cd0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011cd4:	e0fffe17 	ldw	r3,-8(fp)
 8011cd8:	00bfff84 	movi	r2,-2
 8011cdc:	1884703a 	and	r2,r3,r2
 8011ce0:	1001703a 	wrctl	status,r2
  return context;
 8011ce4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 8011ce8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 8011cec:	d0a07403 	ldbu	r2,-32304(gp)
 8011cf0:	10803fcc 	andi	r2,r2,255
 8011cf4:	1000071e 	bne	r2,zero,8011d14 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8011cf8:	d0a06603 	ldbu	r2,-32360(gp)
 8011cfc:	10803fcc 	andi	r2,r2,255
 8011d00:	10803fe0 	cmpeqi	r2,r2,255
 8011d04:	1000031e 	bne	r2,zero,8011d14 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8011d08:	d0a06603 	ldbu	r2,-32360(gp)
 8011d0c:	10800044 	addi	r2,r2,1
 8011d10:	d0a06605 	stb	r2,-32360(gp)
 8011d14:	e0bfff17 	ldw	r2,-4(fp)
 8011d18:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8011d1c:	e0bffd17 	ldw	r2,-12(fp)
 8011d20:	1001703a 	wrctl	status,r2
}
 8011d24:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 8011d28:	0001883a 	nop
 8011d2c:	e037883a 	mov	sp,fp
 8011d30:	df000017 	ldw	fp,0(sp)
 8011d34:	dec00104 	addi	sp,sp,4
 8011d38:	f800283a 	ret

08011d3c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 8011d3c:	defff804 	addi	sp,sp,-32
 8011d40:	dfc00715 	stw	ra,28(sp)
 8011d44:	df000615 	stw	fp,24(sp)
 8011d48:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8011d4c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8011d50:	d0a06643 	ldbu	r2,-32359(gp)
 8011d54:	10803fcc 	andi	r2,r2,255
 8011d58:	10800058 	cmpnei	r2,r2,1
 8011d5c:	10002a1e 	bne	r2,zero,8011e08 <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
 8011d60:	0005303a 	rdctl	r2,status
 8011d64:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011d68:	e0fffe17 	ldw	r3,-8(fp)
 8011d6c:	00bfff84 	movi	r2,-2
 8011d70:	1884703a 	and	r2,r3,r2
 8011d74:	1001703a 	wrctl	status,r2
  return context;
 8011d78:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 8011d7c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 8011d80:	d0a06603 	ldbu	r2,-32360(gp)
 8011d84:	10803fcc 	andi	r2,r2,255
 8011d88:	10001a26 	beq	r2,zero,8011df4 <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 8011d8c:	d0a06603 	ldbu	r2,-32360(gp)
 8011d90:	10bfffc4 	addi	r2,r2,-1
 8011d94:	d0a06605 	stb	r2,-32360(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 8011d98:	d0a06603 	ldbu	r2,-32360(gp)
 8011d9c:	10803fcc 	andi	r2,r2,255
 8011da0:	10000f1e 	bne	r2,zero,8011de0 <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 8011da4:	d0a07403 	ldbu	r2,-32304(gp)
 8011da8:	10803fcc 	andi	r2,r2,255
 8011dac:	1000071e 	bne	r2,zero,8011dcc <OSSchedUnlock+0x90>
 8011db0:	e0bfff17 	ldw	r2,-4(fp)
 8011db4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8011db8:	e0bffd17 	ldw	r2,-12(fp)
 8011dbc:	1001703a 	wrctl	status,r2
}
 8011dc0:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 8011dc4:	8012be80 	call	8012be8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8011dc8:	00000f06 	br	8011e08 <OSSchedUnlock+0xcc>
 8011dcc:	e0bfff17 	ldw	r2,-4(fp)
 8011dd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011dd4:	e0bffc17 	ldw	r2,-16(fp)
 8011dd8:	1001703a 	wrctl	status,r2
}
 8011ddc:	00000a06 	br	8011e08 <OSSchedUnlock+0xcc>
 8011de0:	e0bfff17 	ldw	r2,-4(fp)
 8011de4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8011de8:	e0bffb17 	ldw	r2,-20(fp)
 8011dec:	1001703a 	wrctl	status,r2
}
 8011df0:	00000506 	br	8011e08 <OSSchedUnlock+0xcc>
 8011df4:	e0bfff17 	ldw	r2,-4(fp)
 8011df8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8011dfc:	e0bffa17 	ldw	r2,-24(fp)
 8011e00:	1001703a 	wrctl	status,r2
}
 8011e04:	0001883a 	nop
 8011e08:	0001883a 	nop
 8011e0c:	e037883a 	mov	sp,fp
 8011e10:	dfc00117 	ldw	ra,4(sp)
 8011e14:	df000017 	ldw	fp,0(sp)
 8011e18:	dec00204 	addi	sp,sp,8
 8011e1c:	f800283a 	ret

08011e20 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8011e20:	defffe04 	addi	sp,sp,-8
 8011e24:	dfc00115 	stw	ra,4(sp)
 8011e28:	df000015 	stw	fp,0(sp)
 8011e2c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 8011e30:	d0a06643 	ldbu	r2,-32359(gp)
 8011e34:	10803fcc 	andi	r2,r2,255
 8011e38:	10000d1e 	bne	r2,zero,8011e70 <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8011e3c:	8012cb40 	call	8012cb4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8011e40:	d0a06803 	ldbu	r2,-32352(gp)
 8011e44:	d0a06845 	stb	r2,-32351(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8011e48:	d0a06803 	ldbu	r2,-32352(gp)
 8011e4c:	10803fcc 	andi	r2,r2,255
 8011e50:	100690ba 	slli	r3,r2,2
 8011e54:	008201b4 	movhi	r2,2054
 8011e58:	1885883a 	add	r2,r3,r2
 8011e5c:	10b90c17 	ldw	r2,-7120(r2)
 8011e60:	d0a07015 	stw	r2,-32320(gp)
        OSTCBCur      = OSTCBHighRdy;
 8011e64:	d0a07017 	ldw	r2,-32320(gp)
 8011e68:	d0a07515 	stw	r2,-32300(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8011e6c:	803be500 	call	803be50 <OSStartHighRdy>
    }
}
 8011e70:	0001883a 	nop
 8011e74:	e037883a 	mov	sp,fp
 8011e78:	dfc00117 	ldw	ra,4(sp)
 8011e7c:	df000017 	ldw	fp,0(sp)
 8011e80:	dec00204 	addi	sp,sp,8
 8011e84:	f800283a 	ret

08011e88 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 8011e88:	defff904 	addi	sp,sp,-28
 8011e8c:	dfc00615 	stw	ra,24(sp)
 8011e90:	df000515 	stw	fp,20(sp)
 8011e94:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011e98:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 8011e9c:	01000084 	movi	r4,2
 8011ea0:	80186cc0 	call	80186cc <OSTimeDly>
  NIOS2_READ_STATUS (context);
 8011ea4:	0005303a 	rdctl	r2,status
 8011ea8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011eac:	e0fffb17 	ldw	r3,-20(fp)
 8011eb0:	00bfff84 	movi	r2,-2
 8011eb4:	1884703a 	and	r2,r3,r2
 8011eb8:	1001703a 	wrctl	status,r2
  return context;
 8011ebc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 8011ec0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 8011ec4:	d0206715 	stw	zero,-32356(gp)
 8011ec8:	e0bfff17 	ldw	r2,-4(fp)
 8011ecc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011ed0:	e0bffc17 	ldw	r2,-16(fp)
 8011ed4:	1001703a 	wrctl	status,r2
}
 8011ed8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 8011edc:	01000284 	movi	r4,10
 8011ee0:	80186cc0 	call	80186cc <OSTimeDly>
  NIOS2_READ_STATUS (context);
 8011ee4:	0005303a 	rdctl	r2,status
 8011ee8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011eec:	e0fffd17 	ldw	r3,-12(fp)
 8011ef0:	00bfff84 	movi	r2,-2
 8011ef4:	1884703a 	and	r2,r3,r2
 8011ef8:	1001703a 	wrctl	status,r2
  return context;
 8011efc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 8011f00:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8011f04:	d0a06717 	ldw	r2,-32356(gp)
 8011f08:	d0a06c15 	stw	r2,-32336(gp)
    OSStatRdy    = OS_TRUE;
 8011f0c:	00800044 	movi	r2,1
 8011f10:	d0a07805 	stb	r2,-32288(gp)
 8011f14:	e0bfff17 	ldw	r2,-4(fp)
 8011f18:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8011f1c:	e0bffe17 	ldw	r2,-8(fp)
 8011f20:	1001703a 	wrctl	status,r2
}
 8011f24:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
 8011f28:	0001883a 	nop
 8011f2c:	e037883a 	mov	sp,fp
 8011f30:	dfc00117 	ldw	ra,4(sp)
 8011f34:	df000017 	ldw	fp,0(sp)
 8011f38:	dec00204 	addi	sp,sp,8
 8011f3c:	f800283a 	ret

08011f40 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8011f40:	defff704 	addi	sp,sp,-36
 8011f44:	dfc00815 	stw	ra,32(sp)
 8011f48:	df000715 	stw	fp,28(sp)
 8011f4c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8011f50:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8011f54:	803c0680 	call	803c068 <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
 8011f58:	0005303a 	rdctl	r2,status
 8011f5c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011f60:	e0fffb17 	ldw	r3,-20(fp)
 8011f64:	00bfff84 	movi	r2,-2
 8011f68:	1884703a 	and	r2,r3,r2
 8011f6c:	1001703a 	wrctl	status,r2
  return context;
 8011f70:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8011f74:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
 8011f78:	d0a07617 	ldw	r2,-32296(gp)
 8011f7c:	10800044 	addi	r2,r2,1
 8011f80:	d0a07615 	stw	r2,-32296(gp)
 8011f84:	e0bffd17 	ldw	r2,-12(fp)
 8011f88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011f8c:	e0bffc17 	ldw	r2,-16(fp)
 8011f90:	1001703a 	wrctl	status,r2
}
 8011f94:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 8011f98:	d0a06643 	ldbu	r2,-32359(gp)
 8011f9c:	10803fcc 	andi	r2,r2,255
 8011fa0:	10800058 	cmpnei	r2,r2,1
 8011fa4:	10006e1e 	bne	r2,zero,8012160 <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8011fa8:	d0a06a03 	ldbu	r2,-32344(gp)
 8011fac:	10803fcc 	andi	r2,r2,255
 8011fb0:	10c000a0 	cmpeqi	r3,r2,2
 8011fb4:	18000b1e 	bne	r3,zero,8011fe4 <OSTimeTick+0xa4>
 8011fb8:	10c000c8 	cmpgei	r3,r2,3
 8011fbc:	18000e1e 	bne	r3,zero,8011ff8 <OSTimeTick+0xb8>
 8011fc0:	10000326 	beq	r2,zero,8011fd0 <OSTimeTick+0x90>
 8011fc4:	10800060 	cmpeqi	r2,r2,1
 8011fc8:	1000041e 	bne	r2,zero,8011fdc <OSTimeTick+0x9c>
 8011fcc:	00000a06 	br	8011ff8 <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8011fd0:	00800044 	movi	r2,1
 8011fd4:	e0bffec5 	stb	r2,-5(fp)
                 break;
 8011fd8:	00000b06 	br	8012008 <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8011fdc:	e03ffec5 	stb	zero,-5(fp)
                 break;
 8011fe0:	00000906 	br	8012008 <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8011fe4:	00800044 	movi	r2,1
 8011fe8:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8011fec:	00800044 	movi	r2,1
 8011ff0:	d0a06a05 	stb	r2,-32344(gp)
                 break;
 8011ff4:	00000406 	br	8012008 <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8011ff8:	00800044 	movi	r2,1
 8011ffc:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 8012000:	d0206a05 	stb	zero,-32344(gp)
                 break;
 8012004:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8012008:	e0bffec3 	ldbu	r2,-5(fp)
 801200c:	10005326 	beq	r2,zero,801215c <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8012010:	d0a06917 	ldw	r2,-32348(gp)
 8012014:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8012018:	00004a06 	br	8012144 <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
 801201c:	0005303a 	rdctl	r2,status
 8012020:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012024:	e0fffa17 	ldw	r3,-24(fp)
 8012028:	00bfff84 	movi	r2,-2
 801202c:	1884703a 	and	r2,r3,r2
 8012030:	1001703a 	wrctl	status,r2
  return context;
 8012034:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
 8012038:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 801203c:	e0bfff17 	ldw	r2,-4(fp)
 8012040:	10800b8b 	ldhu	r2,46(r2)
 8012044:	10bfffcc 	andi	r2,r2,65535
 8012048:	10003626 	beq	r2,zero,8012124 <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 801204c:	e0bfff17 	ldw	r2,-4(fp)
 8012050:	10800b8b 	ldhu	r2,46(r2)
 8012054:	10bfffc4 	addi	r2,r2,-1
 8012058:	1007883a 	mov	r3,r2
 801205c:	e0bfff17 	ldw	r2,-4(fp)
 8012060:	10c00b8d 	sth	r3,46(r2)
 8012064:	e0bfff17 	ldw	r2,-4(fp)
 8012068:	10800b8b 	ldhu	r2,46(r2)
 801206c:	10bfffcc 	andi	r2,r2,65535
 8012070:	10002c1e 	bne	r2,zero,8012124 <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8012074:	e0bfff17 	ldw	r2,-4(fp)
 8012078:	10800c03 	ldbu	r2,48(r2)
 801207c:	10803fcc 	andi	r2,r2,255
 8012080:	10800dcc 	andi	r2,r2,55
 8012084:	10000b26 	beq	r2,zero,80120b4 <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 8012088:	e0bfff17 	ldw	r2,-4(fp)
 801208c:	10c00c03 	ldbu	r3,48(r2)
 8012090:	00bff204 	movi	r2,-56
 8012094:	1884703a 	and	r2,r3,r2
 8012098:	1007883a 	mov	r3,r2
 801209c:	e0bfff17 	ldw	r2,-4(fp)
 80120a0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 80120a4:	e0bfff17 	ldw	r2,-4(fp)
 80120a8:	00c00044 	movi	r3,1
 80120ac:	10c00c45 	stb	r3,49(r2)
 80120b0:	00000206 	br	80120bc <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80120b4:	e0bfff17 	ldw	r2,-4(fp)
 80120b8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 80120bc:	e0bfff17 	ldw	r2,-4(fp)
 80120c0:	10800c03 	ldbu	r2,48(r2)
 80120c4:	10803fcc 	andi	r2,r2,255
 80120c8:	1080020c 	andi	r2,r2,8
 80120cc:	1000151e 	bne	r2,zero,8012124 <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 80120d0:	e0bfff17 	ldw	r2,-4(fp)
 80120d4:	10c00d83 	ldbu	r3,54(r2)
 80120d8:	d0a07203 	ldbu	r2,-32312(gp)
 80120dc:	1884b03a 	or	r2,r3,r2
 80120e0:	d0a07205 	stb	r2,-32312(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80120e4:	e0bfff17 	ldw	r2,-4(fp)
 80120e8:	10800d03 	ldbu	r2,52(r2)
 80120ec:	10c03fcc 	andi	r3,r2,255
 80120f0:	d0a07244 	addi	r2,gp,-32311
 80120f4:	1885883a 	add	r2,r3,r2
 80120f8:	11000003 	ldbu	r4,0(r2)
 80120fc:	e0bfff17 	ldw	r2,-4(fp)
 8012100:	10800d43 	ldbu	r2,53(r2)
 8012104:	e0ffff17 	ldw	r3,-4(fp)
 8012108:	18c00d03 	ldbu	r3,52(r3)
 801210c:	18c03fcc 	andi	r3,r3,255
 8012110:	2084b03a 	or	r2,r4,r2
 8012114:	1009883a 	mov	r4,r2
 8012118:	d0a07244 	addi	r2,gp,-32311
 801211c:	1885883a 	add	r2,r3,r2
 8012120:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8012124:	e0bfff17 	ldw	r2,-4(fp)
 8012128:	10800517 	ldw	r2,20(r2)
 801212c:	e0bfff15 	stw	r2,-4(fp)
 8012130:	e0bffd17 	ldw	r2,-12(fp)
 8012134:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8012138:	e0bff917 	ldw	r2,-28(fp)
 801213c:	1001703a 	wrctl	status,r2
}
 8012140:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8012144:	e0bfff17 	ldw	r2,-4(fp)
 8012148:	10800c83 	ldbu	r2,50(r2)
 801214c:	10803fcc 	andi	r2,r2,255
 8012150:	10800518 	cmpnei	r2,r2,20
 8012154:	103fb11e 	bne	r2,zero,801201c <OSTimeTick+0xdc>
 8012158:	00000106 	br	8012160 <OSTimeTick+0x220>
            return;
 801215c:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
 8012160:	e037883a 	mov	sp,fp
 8012164:	dfc00117 	ldw	ra,4(sp)
 8012168:	df000017 	ldw	fp,0(sp)
 801216c:	dec00204 	addi	sp,sp,8
 8012170:	f800283a 	ret

08012174 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 8012174:	deffff04 	addi	sp,sp,-4
 8012178:	df000015 	stw	fp,0(sp)
 801217c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 8012180:	00804784 	movi	r2,286
}
 8012184:	e037883a 	mov	sp,fp
 8012188:	df000017 	ldw	fp,0(sp)
 801218c:	dec00104 	addi	sp,sp,4
 8012190:	f800283a 	ret

08012194 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 8012194:	deffff04 	addi	sp,sp,-4
 8012198:	df000015 	stw	fp,0(sp)
 801219c:	d839883a 	mov	fp,sp
}
 80121a0:	0001883a 	nop
 80121a4:	e037883a 	mov	sp,fp
 80121a8:	df000017 	ldw	fp,0(sp)
 80121ac:	dec00104 	addi	sp,sp,4
 80121b0:	f800283a 	ret

080121b4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 80121b4:	defff804 	addi	sp,sp,-32
 80121b8:	dfc00715 	stw	ra,28(sp)
 80121bc:	df000615 	stw	fp,24(sp)
 80121c0:	df000604 	addi	fp,sp,24
 80121c4:	e13ffd15 	stw	r4,-12(fp)
 80121c8:	e17ffc15 	stw	r5,-16(fp)
 80121cc:	3005883a 	mov	r2,r6
 80121d0:	3807883a 	mov	r3,r7
 80121d4:	e0bffb05 	stb	r2,-20(fp)
 80121d8:	1805883a 	mov	r2,r3
 80121dc:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 80121e0:	e0bffd17 	ldw	r2,-12(fp)
 80121e4:	10800283 	ldbu	r2,10(r2)
 80121e8:	10c03fcc 	andi	r3,r2,255
 80121ec:	00820174 	movhi	r2,2053
 80121f0:	1885883a 	add	r2,r3,r2
 80121f4:	10bf4603 	ldbu	r2,-744(r2)
 80121f8:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 80121fc:	e0bfffc3 	ldbu	r2,-1(fp)
 8012200:	e0fffd17 	ldw	r3,-12(fp)
 8012204:	1885883a 	add	r2,r3,r2
 8012208:	108002c3 	ldbu	r2,11(r2)
 801220c:	10c03fcc 	andi	r3,r2,255
 8012210:	00820174 	movhi	r2,2053
 8012214:	1885883a 	add	r2,r3,r2
 8012218:	10bf4603 	ldbu	r2,-744(r2)
 801221c:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 8012220:	e0bfffc3 	ldbu	r2,-1(fp)
 8012224:	100490fa 	slli	r2,r2,3
 8012228:	1007883a 	mov	r3,r2
 801222c:	e0bfff83 	ldbu	r2,-2(fp)
 8012230:	10c5883a 	add	r2,r2,r3
 8012234:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8012238:	e0bfff43 	ldbu	r2,-3(fp)
 801223c:	100690ba 	slli	r3,r2,2
 8012240:	008201b4 	movhi	r2,2054
 8012244:	1885883a 	add	r2,r3,r2
 8012248:	10b90c17 	ldw	r2,-7120(r2)
 801224c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 8012250:	e0bffe17 	ldw	r2,-8(fp)
 8012254:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8012258:	e0bffe17 	ldw	r2,-8(fp)
 801225c:	e0fffc17 	ldw	r3,-16(fp)
 8012260:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 8012264:	e0bffe17 	ldw	r2,-8(fp)
 8012268:	10800c03 	ldbu	r2,48(r2)
 801226c:	1007883a 	mov	r3,r2
 8012270:	e0bffb03 	ldbu	r2,-20(fp)
 8012274:	0084303a 	nor	r2,zero,r2
 8012278:	1884703a 	and	r2,r3,r2
 801227c:	1007883a 	mov	r3,r2
 8012280:	e0bffe17 	ldw	r2,-8(fp)
 8012284:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8012288:	e0bffe17 	ldw	r2,-8(fp)
 801228c:	e0fffa03 	ldbu	r3,-24(fp)
 8012290:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8012294:	e0bffe17 	ldw	r2,-8(fp)
 8012298:	10800c03 	ldbu	r2,48(r2)
 801229c:	10803fcc 	andi	r2,r2,255
 80122a0:	1080020c 	andi	r2,r2,8
 80122a4:	1000111e 	bne	r2,zero,80122ec <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 80122a8:	e0bffe17 	ldw	r2,-8(fp)
 80122ac:	10c00d83 	ldbu	r3,54(r2)
 80122b0:	d0a07203 	ldbu	r2,-32312(gp)
 80122b4:	1884b03a 	or	r2,r3,r2
 80122b8:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 80122bc:	e0ffffc3 	ldbu	r3,-1(fp)
 80122c0:	d0a07244 	addi	r2,gp,-32311
 80122c4:	1885883a 	add	r2,r3,r2
 80122c8:	11000003 	ldbu	r4,0(r2)
 80122cc:	e0bffe17 	ldw	r2,-8(fp)
 80122d0:	10800d43 	ldbu	r2,53(r2)
 80122d4:	e0ffffc3 	ldbu	r3,-1(fp)
 80122d8:	2084b03a 	or	r2,r4,r2
 80122dc:	1009883a 	mov	r4,r2
 80122e0:	d0a07244 	addi	r2,gp,-32311
 80122e4:	1885883a 	add	r2,r3,r2
 80122e8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80122ec:	e17ffd17 	ldw	r5,-12(fp)
 80122f0:	e13ffe17 	ldw	r4,-8(fp)
 80122f4:	801258c0 	call	801258c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80122f8:	e0bffe17 	ldw	r2,-8(fp)
 80122fc:	10800817 	ldw	r2,32(r2)
 8012300:	10000826 	beq	r2,zero,8012324 <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8012304:	e0bffe17 	ldw	r2,-8(fp)
 8012308:	10800817 	ldw	r2,32(r2)
 801230c:	100b883a 	mov	r5,r2
 8012310:	e13ffe17 	ldw	r4,-8(fp)
 8012314:	801263c0 	call	801263c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8012318:	e0bffe17 	ldw	r2,-8(fp)
 801231c:	e0fffd17 	ldw	r3,-12(fp)
 8012320:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 8012324:	e0bfff43 	ldbu	r2,-3(fp)
}
 8012328:	e037883a 	mov	sp,fp
 801232c:	dfc00117 	ldw	ra,4(sp)
 8012330:	df000017 	ldw	fp,0(sp)
 8012334:	dec00204 	addi	sp,sp,8
 8012338:	f800283a 	ret

0801233c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 801233c:	defffd04 	addi	sp,sp,-12
 8012340:	df000215 	stw	fp,8(sp)
 8012344:	df000204 	addi	fp,sp,8
 8012348:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 801234c:	d0a07517 	ldw	r2,-32300(gp)
 8012350:	e0fffe17 	ldw	r3,-8(fp)
 8012354:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8012358:	d0a07517 	ldw	r2,-32300(gp)
 801235c:	10800d03 	ldbu	r2,52(r2)
 8012360:	10803fcc 	andi	r2,r2,255
 8012364:	e0fffe17 	ldw	r3,-8(fp)
 8012368:	1885883a 	add	r2,r3,r2
 801236c:	110002c3 	ldbu	r4,11(r2)
 8012370:	d0a07517 	ldw	r2,-32300(gp)
 8012374:	10c00d43 	ldbu	r3,53(r2)
 8012378:	d0a07517 	ldw	r2,-32300(gp)
 801237c:	10800d03 	ldbu	r2,52(r2)
 8012380:	10803fcc 	andi	r2,r2,255
 8012384:	20c6b03a 	or	r3,r4,r3
 8012388:	1809883a 	mov	r4,r3
 801238c:	e0fffe17 	ldw	r3,-8(fp)
 8012390:	1885883a 	add	r2,r3,r2
 8012394:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8012398:	e0bffe17 	ldw	r2,-8(fp)
 801239c:	10c00283 	ldbu	r3,10(r2)
 80123a0:	d0a07517 	ldw	r2,-32300(gp)
 80123a4:	10800d83 	ldbu	r2,54(r2)
 80123a8:	1884b03a 	or	r2,r3,r2
 80123ac:	1007883a 	mov	r3,r2
 80123b0:	e0bffe17 	ldw	r2,-8(fp)
 80123b4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 80123b8:	d0a07517 	ldw	r2,-32300(gp)
 80123bc:	10800d03 	ldbu	r2,52(r2)
 80123c0:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 80123c4:	e0ffffc3 	ldbu	r3,-1(fp)
 80123c8:	d0a07244 	addi	r2,gp,-32311
 80123cc:	1885883a 	add	r2,r3,r2
 80123d0:	10800003 	ldbu	r2,0(r2)
 80123d4:	1007883a 	mov	r3,r2
 80123d8:	d0a07517 	ldw	r2,-32300(gp)
 80123dc:	10800d43 	ldbu	r2,53(r2)
 80123e0:	0084303a 	nor	r2,zero,r2
 80123e4:	1884703a 	and	r2,r3,r2
 80123e8:	e0ffffc3 	ldbu	r3,-1(fp)
 80123ec:	1009883a 	mov	r4,r2
 80123f0:	d0a07244 	addi	r2,gp,-32311
 80123f4:	1885883a 	add	r2,r3,r2
 80123f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 80123fc:	e0ffffc3 	ldbu	r3,-1(fp)
 8012400:	d0a07244 	addi	r2,gp,-32311
 8012404:	1885883a 	add	r2,r3,r2
 8012408:	10800003 	ldbu	r2,0(r2)
 801240c:	10803fcc 	andi	r2,r2,255
 8012410:	1000071e 	bne	r2,zero,8012430 <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 8012414:	d0a07517 	ldw	r2,-32300(gp)
 8012418:	10800d83 	ldbu	r2,54(r2)
 801241c:	0084303a 	nor	r2,zero,r2
 8012420:	1007883a 	mov	r3,r2
 8012424:	d0a07203 	ldbu	r2,-32312(gp)
 8012428:	1884703a 	and	r2,r3,r2
 801242c:	d0a07205 	stb	r2,-32312(gp)
    }
}
 8012430:	0001883a 	nop
 8012434:	e037883a 	mov	sp,fp
 8012438:	df000017 	ldw	fp,0(sp)
 801243c:	dec00104 	addi	sp,sp,4
 8012440:	f800283a 	ret

08012444 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 8012444:	defffb04 	addi	sp,sp,-20
 8012448:	df000415 	stw	fp,16(sp)
 801244c:	df000404 	addi	fp,sp,16
 8012450:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 8012454:	d0a07517 	ldw	r2,-32300(gp)
 8012458:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 801245c:	d0a07517 	ldw	r2,-32300(gp)
 8012460:	e0fffc17 	ldw	r3,-16(fp)
 8012464:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 8012468:	e0bffc17 	ldw	r2,-16(fp)
 801246c:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
 8012470:	e0bfff17 	ldw	r2,-4(fp)
 8012474:	10800017 	ldw	r2,0(r2)
 8012478:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 801247c:	00001e06 	br	80124f8 <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 8012480:	d0a07517 	ldw	r2,-32300(gp)
 8012484:	10800d03 	ldbu	r2,52(r2)
 8012488:	10803fcc 	andi	r2,r2,255
 801248c:	e0fffe17 	ldw	r3,-8(fp)
 8012490:	1885883a 	add	r2,r3,r2
 8012494:	110002c3 	ldbu	r4,11(r2)
 8012498:	d0a07517 	ldw	r2,-32300(gp)
 801249c:	10c00d43 	ldbu	r3,53(r2)
 80124a0:	d0a07517 	ldw	r2,-32300(gp)
 80124a4:	10800d03 	ldbu	r2,52(r2)
 80124a8:	10803fcc 	andi	r2,r2,255
 80124ac:	20c6b03a 	or	r3,r4,r3
 80124b0:	1809883a 	mov	r4,r3
 80124b4:	e0fffe17 	ldw	r3,-8(fp)
 80124b8:	1885883a 	add	r2,r3,r2
 80124bc:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 80124c0:	e0bffe17 	ldw	r2,-8(fp)
 80124c4:	10c00283 	ldbu	r3,10(r2)
 80124c8:	d0a07517 	ldw	r2,-32300(gp)
 80124cc:	10800d83 	ldbu	r2,54(r2)
 80124d0:	1884b03a 	or	r2,r3,r2
 80124d4:	1007883a 	mov	r3,r2
 80124d8:	e0bffe17 	ldw	r2,-8(fp)
 80124dc:	10c00285 	stb	r3,10(r2)
        pevents++;
 80124e0:	e0bfff17 	ldw	r2,-4(fp)
 80124e4:	10800104 	addi	r2,r2,4
 80124e8:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 80124ec:	e0bfff17 	ldw	r2,-4(fp)
 80124f0:	10800017 	ldw	r2,0(r2)
 80124f4:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 80124f8:	e0bffe17 	ldw	r2,-8(fp)
 80124fc:	103fe01e 	bne	r2,zero,8012480 <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8012500:	d0a07517 	ldw	r2,-32300(gp)
 8012504:	10800d03 	ldbu	r2,52(r2)
 8012508:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 801250c:	e0fffdc3 	ldbu	r3,-9(fp)
 8012510:	d0a07244 	addi	r2,gp,-32311
 8012514:	1885883a 	add	r2,r3,r2
 8012518:	10800003 	ldbu	r2,0(r2)
 801251c:	1007883a 	mov	r3,r2
 8012520:	d0a07517 	ldw	r2,-32300(gp)
 8012524:	10800d43 	ldbu	r2,53(r2)
 8012528:	0084303a 	nor	r2,zero,r2
 801252c:	1884703a 	and	r2,r3,r2
 8012530:	e0fffdc3 	ldbu	r3,-9(fp)
 8012534:	1009883a 	mov	r4,r2
 8012538:	d0a07244 	addi	r2,gp,-32311
 801253c:	1885883a 	add	r2,r3,r2
 8012540:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 8012544:	e0fffdc3 	ldbu	r3,-9(fp)
 8012548:	d0a07244 	addi	r2,gp,-32311
 801254c:	1885883a 	add	r2,r3,r2
 8012550:	10800003 	ldbu	r2,0(r2)
 8012554:	10803fcc 	andi	r2,r2,255
 8012558:	1000071e 	bne	r2,zero,8012578 <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 801255c:	d0a07517 	ldw	r2,-32300(gp)
 8012560:	10800d83 	ldbu	r2,54(r2)
 8012564:	0084303a 	nor	r2,zero,r2
 8012568:	1007883a 	mov	r3,r2
 801256c:	d0a07203 	ldbu	r2,-32312(gp)
 8012570:	1884703a 	and	r2,r3,r2
 8012574:	d0a07205 	stb	r2,-32312(gp)
    }
}
 8012578:	0001883a 	nop
 801257c:	e037883a 	mov	sp,fp
 8012580:	df000017 	ldw	fp,0(sp)
 8012584:	dec00104 	addi	sp,sp,4
 8012588:	f800283a 	ret

0801258c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 801258c:	defffc04 	addi	sp,sp,-16
 8012590:	df000315 	stw	fp,12(sp)
 8012594:	df000304 	addi	fp,sp,12
 8012598:	e13ffe15 	stw	r4,-8(fp)
 801259c:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 80125a0:	e0bffe17 	ldw	r2,-8(fp)
 80125a4:	10800d03 	ldbu	r2,52(r2)
 80125a8:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 80125ac:	e0bfffc3 	ldbu	r2,-1(fp)
 80125b0:	e0fffd17 	ldw	r3,-12(fp)
 80125b4:	1885883a 	add	r2,r3,r2
 80125b8:	108002c3 	ldbu	r2,11(r2)
 80125bc:	1007883a 	mov	r3,r2
 80125c0:	e0bffe17 	ldw	r2,-8(fp)
 80125c4:	10800d43 	ldbu	r2,53(r2)
 80125c8:	0084303a 	nor	r2,zero,r2
 80125cc:	1884703a 	and	r2,r3,r2
 80125d0:	1007883a 	mov	r3,r2
 80125d4:	e0bfffc3 	ldbu	r2,-1(fp)
 80125d8:	1809883a 	mov	r4,r3
 80125dc:	e0fffd17 	ldw	r3,-12(fp)
 80125e0:	1885883a 	add	r2,r3,r2
 80125e4:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
 80125e8:	e0bfffc3 	ldbu	r2,-1(fp)
 80125ec:	e0fffd17 	ldw	r3,-12(fp)
 80125f0:	1885883a 	add	r2,r3,r2
 80125f4:	108002c3 	ldbu	r2,11(r2)
 80125f8:	10803fcc 	andi	r2,r2,255
 80125fc:	10000a1e 	bne	r2,zero,8012628 <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 8012600:	e0bffd17 	ldw	r2,-12(fp)
 8012604:	10800283 	ldbu	r2,10(r2)
 8012608:	1007883a 	mov	r3,r2
 801260c:	e0bffe17 	ldw	r2,-8(fp)
 8012610:	10800d83 	ldbu	r2,54(r2)
 8012614:	0084303a 	nor	r2,zero,r2
 8012618:	1884703a 	and	r2,r3,r2
 801261c:	1007883a 	mov	r3,r2
 8012620:	e0bffd17 	ldw	r2,-12(fp)
 8012624:	10c00285 	stb	r3,10(r2)
    }
}
 8012628:	0001883a 	nop
 801262c:	e037883a 	mov	sp,fp
 8012630:	df000017 	ldw	fp,0(sp)
 8012634:	dec00104 	addi	sp,sp,4
 8012638:	f800283a 	ret

0801263c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 801263c:	defffa04 	addi	sp,sp,-24
 8012640:	df000515 	stw	fp,20(sp)
 8012644:	df000504 	addi	fp,sp,20
 8012648:	e13ffc15 	stw	r4,-16(fp)
 801264c:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 8012650:	e0bffc17 	ldw	r2,-16(fp)
 8012654:	10800d03 	ldbu	r2,52(r2)
 8012658:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
 801265c:	e0bffc17 	ldw	r2,-16(fp)
 8012660:	10800d83 	ldbu	r2,54(r2)
 8012664:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
 8012668:	e0bffc17 	ldw	r2,-16(fp)
 801266c:	10800d43 	ldbu	r2,53(r2)
 8012670:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
 8012674:	e0bffb17 	ldw	r2,-20(fp)
 8012678:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
 801267c:	e0bfff17 	ldw	r2,-4(fp)
 8012680:	10800017 	ldw	r2,0(r2)
 8012684:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8012688:	00002306 	br	8012718 <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
 801268c:	e0bffdc3 	ldbu	r2,-9(fp)
 8012690:	e0fffe17 	ldw	r3,-8(fp)
 8012694:	1885883a 	add	r2,r3,r2
 8012698:	108002c3 	ldbu	r2,11(r2)
 801269c:	1007883a 	mov	r3,r2
 80126a0:	e0bffd43 	ldbu	r2,-11(fp)
 80126a4:	0084303a 	nor	r2,zero,r2
 80126a8:	1884703a 	and	r2,r3,r2
 80126ac:	1007883a 	mov	r3,r2
 80126b0:	e0bffdc3 	ldbu	r2,-9(fp)
 80126b4:	1809883a 	mov	r4,r3
 80126b8:	e0fffe17 	ldw	r3,-8(fp)
 80126bc:	1885883a 	add	r2,r3,r2
 80126c0:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
 80126c4:	e0bffdc3 	ldbu	r2,-9(fp)
 80126c8:	e0fffe17 	ldw	r3,-8(fp)
 80126cc:	1885883a 	add	r2,r3,r2
 80126d0:	108002c3 	ldbu	r2,11(r2)
 80126d4:	10803fcc 	andi	r2,r2,255
 80126d8:	1000091e 	bne	r2,zero,8012700 <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
 80126dc:	e0bffe17 	ldw	r2,-8(fp)
 80126e0:	10800283 	ldbu	r2,10(r2)
 80126e4:	1007883a 	mov	r3,r2
 80126e8:	e0bffd83 	ldbu	r2,-10(fp)
 80126ec:	0084303a 	nor	r2,zero,r2
 80126f0:	1884703a 	and	r2,r3,r2
 80126f4:	1007883a 	mov	r3,r2
 80126f8:	e0bffe17 	ldw	r2,-8(fp)
 80126fc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 8012700:	e0bfff17 	ldw	r2,-4(fp)
 8012704:	10800104 	addi	r2,r2,4
 8012708:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
 801270c:	e0bfff17 	ldw	r2,-4(fp)
 8012710:	10800017 	ldw	r2,0(r2)
 8012714:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8012718:	e0bffe17 	ldw	r2,-8(fp)
 801271c:	103fdb1e 	bne	r2,zero,801268c <OS_EventTaskRemoveMulti+0x50>
    }
}
 8012720:	0001883a 	nop
 8012724:	0001883a 	nop
 8012728:	e037883a 	mov	sp,fp
 801272c:	df000017 	ldw	fp,0(sp)
 8012730:	dec00104 	addi	sp,sp,4
 8012734:	f800283a 	ret

08012738 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8012738:	defffc04 	addi	sp,sp,-16
 801273c:	df000315 	stw	fp,12(sp)
 8012740:	df000304 	addi	fp,sp,12
 8012744:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 8012748:	e0bffd17 	ldw	r2,-12(fp)
 801274c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 8012750:	e0bffd17 	ldw	r2,-12(fp)
 8012754:	108002c4 	addi	r2,r2,11
 8012758:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 801275c:	e03ffec5 	stb	zero,-5(fp)
 8012760:	00000706 	br	8012780 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 8012764:	e0bfff17 	ldw	r2,-4(fp)
 8012768:	10c00044 	addi	r3,r2,1
 801276c:	e0ffff15 	stw	r3,-4(fp)
 8012770:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8012774:	e0bffec3 	ldbu	r2,-5(fp)
 8012778:	10800044 	addi	r2,r2,1
 801277c:	e0bffec5 	stb	r2,-5(fp)
 8012780:	e0bffec3 	ldbu	r2,-5(fp)
 8012784:	108000f0 	cmpltui	r2,r2,3
 8012788:	103ff61e 	bne	r2,zero,8012764 <OS_EventWaitListInit+0x2c>
    }
}
 801278c:	0001883a 	nop
 8012790:	0001883a 	nop
 8012794:	e037883a 	mov	sp,fp
 8012798:	df000017 	ldw	fp,0(sp)
 801279c:	dec00104 	addi	sp,sp,4
 80127a0:	f800283a 	ret

080127a4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 80127a4:	defffb04 	addi	sp,sp,-20
 80127a8:	dfc00415 	stw	ra,16(sp)
 80127ac:	df000315 	stw	fp,12(sp)
 80127b0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 80127b4:	0142d004 	movi	r5,2880
 80127b8:	010201b4 	movhi	r4,2054
 80127bc:	2134f804 	addi	r4,r4,-11296
 80127c0:	8012b240 	call	8012b24 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 80127c4:	008201b4 	movhi	r2,2054
 80127c8:	10b4f804 	addi	r2,r2,-11296
 80127cc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 80127d0:	008201b4 	movhi	r2,2054
 80127d4:	10b50404 	addi	r2,r2,-11248
 80127d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 80127dc:	e03fff8d 	sth	zero,-2(fp)
 80127e0:	00001306 	br	8012830 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80127e4:	e0bffe17 	ldw	r2,-8(fp)
 80127e8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 80127ec:	e0bffe17 	ldw	r2,-8(fp)
 80127f0:	e0fffd17 	ldw	r3,-12(fp)
 80127f4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 80127f8:	e0bffe17 	ldw	r2,-8(fp)
 80127fc:	00c00fc4 	movi	r3,63
 8012800:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 8012804:	e0bffe17 	ldw	r2,-8(fp)
 8012808:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 801280c:	e0bffe17 	ldw	r2,-8(fp)
 8012810:	10800c04 	addi	r2,r2,48
 8012814:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 8012818:	e0bffd17 	ldw	r2,-12(fp)
 801281c:	10800c04 	addi	r2,r2,48
 8012820:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 8012824:	e0bfff8b 	ldhu	r2,-2(fp)
 8012828:	10800044 	addi	r2,r2,1
 801282c:	e0bfff8d 	sth	r2,-2(fp)
 8012830:	e0bfff8b 	ldhu	r2,-2(fp)
 8012834:	10800ef0 	cmpltui	r2,r2,59
 8012838:	103fea1e 	bne	r2,zero,80127e4 <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 801283c:	e0bffe17 	ldw	r2,-8(fp)
 8012840:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8012844:	e0bffe17 	ldw	r2,-8(fp)
 8012848:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 801284c:	e0bffe17 	ldw	r2,-8(fp)
 8012850:	00c00fc4 	movi	r3,63
 8012854:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 8012858:	e0bffe17 	ldw	r2,-8(fp)
 801285c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8012860:	008201b4 	movhi	r2,2054
 8012864:	10b4f804 	addi	r2,r2,-11296
 8012868:	d0a07315 	stw	r2,-32308(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 801286c:	0001883a 	nop
 8012870:	e037883a 	mov	sp,fp
 8012874:	dfc00117 	ldw	ra,4(sp)
 8012878:	df000017 	ldw	fp,0(sp)
 801287c:	dec00204 	addi	sp,sp,8
 8012880:	f800283a 	ret

08012884 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8012884:	deffff04 	addi	sp,sp,-4
 8012888:	df000015 	stw	fp,0(sp)
 801288c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 8012890:	d0207615 	stw	zero,-32296(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 8012894:	d0207405 	stb	zero,-32304(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 8012898:	d0206605 	stb	zero,-32360(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 801289c:	d0206e45 	stb	zero,-32327(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 80128a0:	d0206645 	stb	zero,-32359(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 80128a4:	d0206b15 	stw	zero,-32340(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 80128a8:	d0206715 	stw	zero,-32356(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 80128ac:	d0207915 	stw	zero,-32284(gp)
    OSIdleCtrMax  = 0L;
 80128b0:	d0206c15 	stw	zero,-32336(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 80128b4:	d0207805 	stb	zero,-32288(gp)
#endif
}
 80128b8:	0001883a 	nop
 80128bc:	e037883a 	mov	sp,fp
 80128c0:	df000017 	ldw	fp,0(sp)
 80128c4:	dec00104 	addi	sp,sp,4
 80128c8:	f800283a 	ret

080128cc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 80128cc:	defffd04 	addi	sp,sp,-12
 80128d0:	df000215 	stw	fp,8(sp)
 80128d4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 80128d8:	d0207205 	stb	zero,-32312(gp)
    prdytbl       = &OSRdyTbl[0];
 80128dc:	d0a07244 	addi	r2,gp,-32311
 80128e0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 80128e4:	e03fffc5 	stb	zero,-1(fp)
 80128e8:	00000706 	br	8012908 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 80128ec:	e0bffe17 	ldw	r2,-8(fp)
 80128f0:	10c00044 	addi	r3,r2,1
 80128f4:	e0fffe15 	stw	r3,-8(fp)
 80128f8:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 80128fc:	e0bfffc3 	ldbu	r2,-1(fp)
 8012900:	10800044 	addi	r2,r2,1
 8012904:	e0bfffc5 	stb	r2,-1(fp)
 8012908:	e0bfffc3 	ldbu	r2,-1(fp)
 801290c:	108000f0 	cmpltui	r2,r2,3
 8012910:	103ff61e 	bne	r2,zero,80128ec <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
 8012914:	d0206845 	stb	zero,-32351(gp)
    OSPrioHighRdy = 0;
 8012918:	d0206805 	stb	zero,-32352(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 801291c:	d0207015 	stw	zero,-32320(gp)
    OSTCBCur      = (OS_TCB *)0;
 8012920:	d0207515 	stw	zero,-32300(gp)
}
 8012924:	0001883a 	nop
 8012928:	e037883a 	mov	sp,fp
 801292c:	df000017 	ldw	fp,0(sp)
 8012930:	dec00104 	addi	sp,sp,4
 8012934:	f800283a 	ret

08012938 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8012938:	defff804 	addi	sp,sp,-32
 801293c:	dfc00715 	stw	ra,28(sp)
 8012940:	df000615 	stw	fp,24(sp)
 8012944:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 8012948:	008000c4 	movi	r2,3
 801294c:	d8800415 	stw	r2,16(sp)
 8012950:	d8000315 	stw	zero,12(sp)
 8012954:	00808004 	movi	r2,512
 8012958:	d8800215 	stw	r2,8(sp)
 801295c:	008201b4 	movhi	r2,2054
 8012960:	10b2f804 	addi	r2,r2,-13344
 8012964:	d8800115 	stw	r2,4(sp)
 8012968:	00bfffd4 	movui	r2,65535
 801296c:	d8800015 	stw	r2,0(sp)
 8012970:	01c00504 	movi	r7,20
 8012974:	018201b4 	movhi	r6,2054
 8012978:	31b4f704 	addi	r6,r6,-11300
 801297c:	000b883a 	mov	r5,zero
 8012980:	01020074 	movhi	r4,2049
 8012984:	210b7a04 	addi	r4,r4,11752
 8012988:	80175e40 	call	80175e4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 801298c:	e0bfffc4 	addi	r2,fp,-1
 8012990:	100d883a 	mov	r6,r2
 8012994:	01420174 	movhi	r5,2053
 8012998:	297f8604 	addi	r5,r5,-488
 801299c:	01000504 	movi	r4,20
 80129a0:	8017df80 	call	8017df8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 80129a4:	0001883a 	nop
 80129a8:	e037883a 	mov	sp,fp
 80129ac:	dfc00117 	ldw	ra,4(sp)
 80129b0:	df000017 	ldw	fp,0(sp)
 80129b4:	dec00204 	addi	sp,sp,8
 80129b8:	f800283a 	ret

080129bc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 80129bc:	defff804 	addi	sp,sp,-32
 80129c0:	dfc00715 	stw	ra,28(sp)
 80129c4:	df000615 	stw	fp,24(sp)
 80129c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 80129cc:	008000c4 	movi	r2,3
 80129d0:	d8800415 	stw	r2,16(sp)
 80129d4:	d8000315 	stw	zero,12(sp)
 80129d8:	00808004 	movi	r2,512
 80129dc:	d8800215 	stw	r2,8(sp)
 80129e0:	008201b4 	movhi	r2,2054
 80129e4:	10b08004 	addi	r2,r2,-15872
 80129e8:	d8800115 	stw	r2,4(sp)
 80129ec:	00bfff94 	movui	r2,65534
 80129f0:	d8800015 	stw	r2,0(sp)
 80129f4:	01c004c4 	movi	r7,19
 80129f8:	018201b4 	movhi	r6,2054
 80129fc:	31b27f04 	addi	r6,r6,-13828
 8012a00:	000b883a 	mov	r5,zero
 8012a04:	01020074 	movhi	r4,2049
 8012a08:	210b9204 	addi	r4,r4,11848
 8012a0c:	80175e40 	call	80175e4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 8012a10:	e0bfffc4 	addi	r2,fp,-1
 8012a14:	100d883a 	mov	r6,r2
 8012a18:	01420174 	movhi	r5,2053
 8012a1c:	297f8a04 	addi	r5,r5,-472
 8012a20:	010004c4 	movi	r4,19
 8012a24:	8017df80 	call	8017df8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 8012a28:	0001883a 	nop
 8012a2c:	e037883a 	mov	sp,fp
 8012a30:	dfc00117 	ldw	ra,4(sp)
 8012a34:	df000017 	ldw	fp,0(sp)
 8012a38:	dec00204 	addi	sp,sp,8
 8012a3c:	f800283a 	ret

08012a40 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8012a40:	defffb04 	addi	sp,sp,-20
 8012a44:	dfc00415 	stw	ra,16(sp)
 8012a48:	df000315 	stw	fp,12(sp)
 8012a4c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8012a50:	01414404 	movi	r5,1296
 8012a54:	010201b4 	movhi	r4,2054
 8012a58:	2137c804 	addi	r4,r4,-8416
 8012a5c:	8012b240 	call	8012b24 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8012a60:	01401504 	movi	r5,84
 8012a64:	010201b4 	movhi	r4,2054
 8012a68:	21390c04 	addi	r4,r4,-7120
 8012a6c:	8012b240 	call	8012b24 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 8012a70:	008201b4 	movhi	r2,2054
 8012a74:	10b7c804 	addi	r2,r2,-8416
 8012a78:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 8012a7c:	008201b4 	movhi	r2,2054
 8012a80:	10b7e304 	addi	r2,r2,-8308
 8012a84:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 8012a88:	e03fffc5 	stb	zero,-1(fp)
 8012a8c:	00001106 	br	8012ad4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 8012a90:	e0bffe17 	ldw	r2,-8(fp)
 8012a94:	e0fffd17 	ldw	r3,-12(fp)
 8012a98:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 8012a9c:	e0bffe17 	ldw	r2,-8(fp)
 8012aa0:	00c00fc4 	movi	r3,63
 8012aa4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 8012aa8:	e0bffe17 	ldw	r2,-8(fp)
 8012aac:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 8012ab0:	e0bffe17 	ldw	r2,-8(fp)
 8012ab4:	10801b04 	addi	r2,r2,108
 8012ab8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 8012abc:	e0bffd17 	ldw	r2,-12(fp)
 8012ac0:	10801b04 	addi	r2,r2,108
 8012ac4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 8012ac8:	e0bfffc3 	ldbu	r2,-1(fp)
 8012acc:	10800044 	addi	r2,r2,1
 8012ad0:	e0bfffc5 	stb	r2,-1(fp)
 8012ad4:	e0bfffc3 	ldbu	r2,-1(fp)
 8012ad8:	108002f0 	cmpltui	r2,r2,11
 8012adc:	103fec1e 	bne	r2,zero,8012a90 <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 8012ae0:	e0bffe17 	ldw	r2,-8(fp)
 8012ae4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 8012ae8:	e0bffe17 	ldw	r2,-8(fp)
 8012aec:	00c00fc4 	movi	r3,63
 8012af0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 8012af4:	e0bffe17 	ldw	r2,-8(fp)
 8012af8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8012afc:	d0206915 	stw	zero,-32348(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 8012b00:	008201b4 	movhi	r2,2054
 8012b04:	10b7c804 	addi	r2,r2,-8416
 8012b08:	d0a06d15 	stw	r2,-32332(gp)
}
 8012b0c:	0001883a 	nop
 8012b10:	e037883a 	mov	sp,fp
 8012b14:	dfc00117 	ldw	ra,4(sp)
 8012b18:	df000017 	ldw	fp,0(sp)
 8012b1c:	dec00204 	addi	sp,sp,8
 8012b20:	f800283a 	ret

08012b24 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 8012b24:	defffd04 	addi	sp,sp,-12
 8012b28:	df000215 	stw	fp,8(sp)
 8012b2c:	df000204 	addi	fp,sp,8
 8012b30:	e13fff15 	stw	r4,-4(fp)
 8012b34:	2805883a 	mov	r2,r5
 8012b38:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
 8012b3c:	00000706 	br	8012b5c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 8012b40:	e0bfff17 	ldw	r2,-4(fp)
 8012b44:	10c00044 	addi	r3,r2,1
 8012b48:	e0ffff15 	stw	r3,-4(fp)
 8012b4c:	10000005 	stb	zero,0(r2)
        size--;
 8012b50:	e0bffe0b 	ldhu	r2,-8(fp)
 8012b54:	10bfffc4 	addi	r2,r2,-1
 8012b58:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
 8012b5c:	e0bffe0b 	ldhu	r2,-8(fp)
 8012b60:	103ff71e 	bne	r2,zero,8012b40 <OS_MemClr+0x1c>
    }
}
 8012b64:	0001883a 	nop
 8012b68:	0001883a 	nop
 8012b6c:	e037883a 	mov	sp,fp
 8012b70:	df000017 	ldw	fp,0(sp)
 8012b74:	dec00104 	addi	sp,sp,4
 8012b78:	f800283a 	ret

08012b7c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 8012b7c:	defffc04 	addi	sp,sp,-16
 8012b80:	df000315 	stw	fp,12(sp)
 8012b84:	df000304 	addi	fp,sp,12
 8012b88:	e13fff15 	stw	r4,-4(fp)
 8012b8c:	e17ffe15 	stw	r5,-8(fp)
 8012b90:	3005883a 	mov	r2,r6
 8012b94:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
 8012b98:	00000b06 	br	8012bc8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 8012b9c:	e0fffe17 	ldw	r3,-8(fp)
 8012ba0:	18800044 	addi	r2,r3,1
 8012ba4:	e0bffe15 	stw	r2,-8(fp)
 8012ba8:	e0bfff17 	ldw	r2,-4(fp)
 8012bac:	11000044 	addi	r4,r2,1
 8012bb0:	e13fff15 	stw	r4,-4(fp)
 8012bb4:	18c00003 	ldbu	r3,0(r3)
 8012bb8:	10c00005 	stb	r3,0(r2)
        size--;
 8012bbc:	e0bffd0b 	ldhu	r2,-12(fp)
 8012bc0:	10bfffc4 	addi	r2,r2,-1
 8012bc4:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
 8012bc8:	e0bffd0b 	ldhu	r2,-12(fp)
 8012bcc:	103ff31e 	bne	r2,zero,8012b9c <OS_MemCopy+0x20>
    }
}
 8012bd0:	0001883a 	nop
 8012bd4:	0001883a 	nop
 8012bd8:	e037883a 	mov	sp,fp
 8012bdc:	df000017 	ldw	fp,0(sp)
 8012be0:	dec00104 	addi	sp,sp,4
 8012be4:	f800283a 	ret

08012be8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8012be8:	defffb04 	addi	sp,sp,-20
 8012bec:	dfc00415 	stw	ra,16(sp)
 8012bf0:	df000315 	stw	fp,12(sp)
 8012bf4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8012bf8:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8012bfc:	0005303a 	rdctl	r2,status
 8012c00:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012c04:	e0fffe17 	ldw	r3,-8(fp)
 8012c08:	00bfff84 	movi	r2,-2
 8012c0c:	1884703a 	and	r2,r3,r2
 8012c10:	1001703a 	wrctl	status,r2
  return context;
 8012c14:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 8012c18:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 8012c1c:	d0a07403 	ldbu	r2,-32304(gp)
 8012c20:	10803fcc 	andi	r2,r2,255
 8012c24:	1000181e 	bne	r2,zero,8012c88 <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 8012c28:	d0a06603 	ldbu	r2,-32360(gp)
 8012c2c:	10803fcc 	andi	r2,r2,255
 8012c30:	1000151e 	bne	r2,zero,8012c88 <OS_Sched+0xa0>
            OS_SchedNew();
 8012c34:	8012cb40 	call	8012cb4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8012c38:	d0e06803 	ldbu	r3,-32352(gp)
 8012c3c:	d0a06843 	ldbu	r2,-32351(gp)
 8012c40:	18c03fcc 	andi	r3,r3,255
 8012c44:	10803fcc 	andi	r2,r2,255
 8012c48:	18800f26 	beq	r3,r2,8012c88 <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8012c4c:	d0a06803 	ldbu	r2,-32352(gp)
 8012c50:	10803fcc 	andi	r2,r2,255
 8012c54:	100690ba 	slli	r3,r2,2
 8012c58:	008201b4 	movhi	r2,2054
 8012c5c:	1885883a 	add	r2,r3,r2
 8012c60:	10b90c17 	ldw	r2,-7120(r2)
 8012c64:	d0a07015 	stw	r2,-32320(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8012c68:	d0a07017 	ldw	r2,-32320(gp)
 8012c6c:	10c00e17 	ldw	r3,56(r2)
 8012c70:	18c00044 	addi	r3,r3,1
 8012c74:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8012c78:	d0a06b17 	ldw	r2,-32340(gp)
 8012c7c:	10800044 	addi	r2,r2,1
 8012c80:	d0a06b15 	stw	r2,-32340(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 8012c84:	803bdc40 	call	803bdc4 <OSCtxSw>
 8012c88:	e0bfff17 	ldw	r2,-4(fp)
 8012c8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8012c90:	e0bffd17 	ldw	r2,-12(fp)
 8012c94:	1001703a 	wrctl	status,r2
}
 8012c98:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 8012c9c:	0001883a 	nop
 8012ca0:	e037883a 	mov	sp,fp
 8012ca4:	dfc00117 	ldw	ra,4(sp)
 8012ca8:	df000017 	ldw	fp,0(sp)
 8012cac:	dec00204 	addi	sp,sp,8
 8012cb0:	f800283a 	ret

08012cb4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8012cb4:	defffe04 	addi	sp,sp,-8
 8012cb8:	df000115 	stw	fp,4(sp)
 8012cbc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8012cc0:	d0a07203 	ldbu	r2,-32312(gp)
 8012cc4:	10c03fcc 	andi	r3,r2,255
 8012cc8:	00820174 	movhi	r2,2053
 8012ccc:	1885883a 	add	r2,r3,r2
 8012cd0:	10bf4603 	ldbu	r2,-744(r2)
 8012cd4:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 8012cd8:	e0bfffc3 	ldbu	r2,-1(fp)
 8012cdc:	100490fa 	slli	r2,r2,3
 8012ce0:	1009883a 	mov	r4,r2
 8012ce4:	e0ffffc3 	ldbu	r3,-1(fp)
 8012ce8:	d0a07244 	addi	r2,gp,-32311
 8012cec:	1885883a 	add	r2,r3,r2
 8012cf0:	10800003 	ldbu	r2,0(r2)
 8012cf4:	10c03fcc 	andi	r3,r2,255
 8012cf8:	00820174 	movhi	r2,2053
 8012cfc:	1885883a 	add	r2,r3,r2
 8012d00:	10bf4603 	ldbu	r2,-744(r2)
 8012d04:	2085883a 	add	r2,r4,r2
 8012d08:	d0a06805 	stb	r2,-32352(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 8012d0c:	0001883a 	nop
 8012d10:	e037883a 	mov	sp,fp
 8012d14:	df000017 	ldw	fp,0(sp)
 8012d18:	dec00104 	addi	sp,sp,4
 8012d1c:	f800283a 	ret

08012d20 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 8012d20:	defffc04 	addi	sp,sp,-16
 8012d24:	df000315 	stw	fp,12(sp)
 8012d28:	df000304 	addi	fp,sp,12
 8012d2c:	e13ffe15 	stw	r4,-8(fp)
 8012d30:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
 8012d34:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8012d38:	00000b06 	br	8012d68 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 8012d3c:	e0fffd17 	ldw	r3,-12(fp)
 8012d40:	18800044 	addi	r2,r3,1
 8012d44:	e0bffd15 	stw	r2,-12(fp)
 8012d48:	e0bffe17 	ldw	r2,-8(fp)
 8012d4c:	11000044 	addi	r4,r2,1
 8012d50:	e13ffe15 	stw	r4,-8(fp)
 8012d54:	18c00003 	ldbu	r3,0(r3)
 8012d58:	10c00005 	stb	r3,0(r2)
        len++;
 8012d5c:	e0bfffc3 	ldbu	r2,-1(fp)
 8012d60:	10800044 	addi	r2,r2,1
 8012d64:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8012d68:	e0bffd17 	ldw	r2,-12(fp)
 8012d6c:	10800003 	ldbu	r2,0(r2)
 8012d70:	10803fcc 	andi	r2,r2,255
 8012d74:	103ff11e 	bne	r2,zero,8012d3c <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
 8012d78:	e0bffe17 	ldw	r2,-8(fp)
 8012d7c:	10000005 	stb	zero,0(r2)
    return (len);
 8012d80:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8012d84:	e037883a 	mov	sp,fp
 8012d88:	df000017 	ldw	fp,0(sp)
 8012d8c:	dec00104 	addi	sp,sp,4
 8012d90:	f800283a 	ret

08012d94 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 8012d94:	defffd04 	addi	sp,sp,-12
 8012d98:	df000215 	stw	fp,8(sp)
 8012d9c:	df000204 	addi	fp,sp,8
 8012da0:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
 8012da4:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8012da8:	00000606 	br	8012dc4 <OS_StrLen+0x30>
        psrc++;
 8012dac:	e0bffe17 	ldw	r2,-8(fp)
 8012db0:	10800044 	addi	r2,r2,1
 8012db4:	e0bffe15 	stw	r2,-8(fp)
        len++;
 8012db8:	e0bfffc3 	ldbu	r2,-1(fp)
 8012dbc:	10800044 	addi	r2,r2,1
 8012dc0:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
 8012dc4:	e0bffe17 	ldw	r2,-8(fp)
 8012dc8:	10800003 	ldbu	r2,0(r2)
 8012dcc:	10803fcc 	andi	r2,r2,255
 8012dd0:	103ff61e 	bne	r2,zero,8012dac <OS_StrLen+0x18>
    }
    return (len);
 8012dd4:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8012dd8:	e037883a 	mov	sp,fp
 8012ddc:	df000017 	ldw	fp,0(sp)
 8012de0:	dec00104 	addi	sp,sp,4
 8012de4:	f800283a 	ret

08012de8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8012de8:	defffa04 	addi	sp,sp,-24
 8012dec:	dfc00515 	stw	ra,20(sp)
 8012df0:	df000415 	stw	fp,16(sp)
 8012df4:	df000404 	addi	fp,sp,16
 8012df8:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012dfc:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8012e00:	0005303a 	rdctl	r2,status
 8012e04:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012e08:	e0fffd17 	ldw	r3,-12(fp)
 8012e0c:	00bfff84 	movi	r2,-2
 8012e10:	1884703a 	and	r2,r3,r2
 8012e14:	1001703a 	wrctl	status,r2
  return context;
 8012e18:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8012e1c:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
 8012e20:	d0a06717 	ldw	r2,-32356(gp)
 8012e24:	10800044 	addi	r2,r2,1
 8012e28:	d0a06715 	stw	r2,-32356(gp)
 8012e2c:	e0bfff17 	ldw	r2,-4(fp)
 8012e30:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8012e34:	e0bffe17 	ldw	r2,-8(fp)
 8012e38:	1001703a 	wrctl	status,r2
}
 8012e3c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8012e40:	803c0d40 	call	803c0d4 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8012e44:	003fee06 	br	8012e00 <OS_TaskIdle+0x18>

08012e48 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 8012e48:	defffa04 	addi	sp,sp,-24
 8012e4c:	dfc00515 	stw	ra,20(sp)
 8012e50:	df000415 	stw	fp,16(sp)
 8012e54:	df000404 	addi	fp,sp,16
 8012e58:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012e5c:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8012e60:	00000206 	br	8012e6c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 8012e64:	01000504 	movi	r4,20
 8012e68:	80186cc0 	call	80186cc <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8012e6c:	d0a07803 	ldbu	r2,-32288(gp)
 8012e70:	10803fcc 	andi	r2,r2,255
 8012e74:	103ffb26 	beq	r2,zero,8012e64 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
 8012e78:	d0a06c17 	ldw	r2,-32336(gp)
 8012e7c:	01401904 	movi	r5,100
 8012e80:	1009883a 	mov	r4,r2
 8012e84:	800e2300 	call	800e230 <__udivsi3>
 8012e88:	d0a06c15 	stw	r2,-32336(gp)
    if (OSIdleCtrMax == 0L) {
 8012e8c:	d0a06c17 	ldw	r2,-32336(gp)
 8012e90:	1000031e 	bne	r2,zero,8012ea0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 8012e94:	d0206e05 	stb	zero,-32328(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8012e98:	01003fc4 	movi	r4,255
 8012e9c:	801834c0 	call	801834c <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
 8012ea0:	0005303a 	rdctl	r2,status
 8012ea4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012ea8:	e0fffd17 	ldw	r3,-12(fp)
 8012eac:	00bfff84 	movi	r2,-2
 8012eb0:	1884703a 	and	r2,r3,r2
 8012eb4:	1001703a 	wrctl	status,r2
  return context;
 8012eb8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 8012ebc:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 8012ec0:	d0a06717 	ldw	r2,-32356(gp)
 8012ec4:	d0a07915 	stw	r2,-32284(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 8012ec8:	d0206715 	stw	zero,-32356(gp)
 8012ecc:	e0bfff17 	ldw	r2,-4(fp)
 8012ed0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8012ed4:	e0bffe17 	ldw	r2,-8(fp)
 8012ed8:	1001703a 	wrctl	status,r2
}
 8012edc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 8012ee0:	d0a07917 	ldw	r2,-32284(gp)
 8012ee4:	d0e06c17 	ldw	r3,-32336(gp)
 8012ee8:	180b883a 	mov	r5,r3
 8012eec:	1009883a 	mov	r4,r2
 8012ef0:	800e2300 	call	800e230 <__udivsi3>
 8012ef4:	1007883a 	mov	r3,r2
 8012ef8:	00801904 	movi	r2,100
 8012efc:	10c5c83a 	sub	r2,r2,r3
 8012f00:	d0a06e05 	stb	r2,-32328(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8012f04:	803c0480 	call	803c048 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8012f08:	8012f180 	call	8012f18 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 8012f0c:	01000284 	movi	r4,10
 8012f10:	80186cc0 	call	80186cc <OSTimeDly>
        OS_ENTER_CRITICAL();
 8012f14:	003fe206 	br	8012ea0 <OS_TaskStat+0x58>

08012f18 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 8012f18:	defffa04 	addi	sp,sp,-24
 8012f1c:	dfc00515 	stw	ra,20(sp)
 8012f20:	df000415 	stw	fp,16(sp)
 8012f24:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8012f28:	e03fffc5 	stb	zero,-1(fp)
 8012f2c:	00002106 	br	8012fb4 <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
 8012f30:	e0bfffc3 	ldbu	r2,-1(fp)
 8012f34:	e0fffc04 	addi	r3,fp,-16
 8012f38:	180b883a 	mov	r5,r3
 8012f3c:	1009883a 	mov	r4,r2
 8012f40:	80181940 	call	8018194 <OSTaskStkChk>
 8012f44:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
 8012f48:	e0bfff83 	ldbu	r2,-2(fp)
 8012f4c:	1000161e 	bne	r2,zero,8012fa8 <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
 8012f50:	e0bfffc3 	ldbu	r2,-1(fp)
 8012f54:	100690ba 	slli	r3,r2,2
 8012f58:	008201b4 	movhi	r2,2054
 8012f5c:	1885883a 	add	r2,r3,r2
 8012f60:	10b90c17 	ldw	r2,-7120(r2)
 8012f64:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8012f68:	e0bffe17 	ldw	r2,-8(fp)
 8012f6c:	10000e26 	beq	r2,zero,8012fa8 <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8012f70:	e0bffe17 	ldw	r2,-8(fp)
 8012f74:	10800060 	cmpeqi	r2,r2,1
 8012f78:	10000b1e 	bne	r2,zero,8012fa8 <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8012f7c:	e0bffe17 	ldw	r2,-8(fp)
 8012f80:	10c00217 	ldw	r3,8(r2)
 8012f84:	e0bffe17 	ldw	r2,-8(fp)
 8012f88:	10800317 	ldw	r2,12(r2)
 8012f8c:	100490ba 	slli	r2,r2,2
 8012f90:	1887883a 	add	r3,r3,r2
 8012f94:	e0bffe17 	ldw	r2,-8(fp)
 8012f98:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 8012f9c:	e0fffd17 	ldw	r3,-12(fp)
 8012fa0:	e0bffe17 	ldw	r2,-8(fp)
 8012fa4:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8012fa8:	e0bfffc3 	ldbu	r2,-1(fp)
 8012fac:	10800044 	addi	r2,r2,1
 8012fb0:	e0bfffc5 	stb	r2,-1(fp)
 8012fb4:	e0bfffc3 	ldbu	r2,-1(fp)
 8012fb8:	10800570 	cmpltui	r2,r2,21
 8012fbc:	103fdc1e 	bne	r2,zero,8012f30 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 8012fc0:	0001883a 	nop
 8012fc4:	0001883a 	nop
 8012fc8:	e037883a 	mov	sp,fp
 8012fcc:	dfc00117 	ldw	ra,4(sp)
 8012fd0:	df000017 	ldw	fp,0(sp)
 8012fd4:	dec00204 	addi	sp,sp,8
 8012fd8:	f800283a 	ret

08012fdc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 8012fdc:	defff204 	addi	sp,sp,-56
 8012fe0:	dfc00d15 	stw	ra,52(sp)
 8012fe4:	df000c15 	stw	fp,48(sp)
 8012fe8:	df000c04 	addi	fp,sp,48
 8012fec:	2007883a 	mov	r3,r4
 8012ff0:	e17ff715 	stw	r5,-36(fp)
 8012ff4:	e1bff615 	stw	r6,-40(fp)
 8012ff8:	3809883a 	mov	r4,r7
 8012ffc:	e0800417 	ldw	r2,16(fp)
 8013000:	e0fff805 	stb	r3,-32(fp)
 8013004:	2007883a 	mov	r3,r4
 8013008:	e0fff50d 	sth	r3,-44(fp)
 801300c:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8013010:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8013014:	0005303a 	rdctl	r2,status
 8013018:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801301c:	e0fffd17 	ldw	r3,-12(fp)
 8013020:	00bfff84 	movi	r2,-2
 8013024:	1884703a 	and	r2,r3,r2
 8013028:	1001703a 	wrctl	status,r2
  return context;
 801302c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 8013030:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8013034:	d0a06d17 	ldw	r2,-32332(gp)
 8013038:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
 801303c:	e0bffe17 	ldw	r2,-8(fp)
 8013040:	10009326 	beq	r2,zero,8013290 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8013044:	e0bffe17 	ldw	r2,-8(fp)
 8013048:	10800517 	ldw	r2,20(r2)
 801304c:	d0a06d15 	stw	r2,-32332(gp)
 8013050:	e0bfff17 	ldw	r2,-4(fp)
 8013054:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8013058:	e0bffb17 	ldw	r2,-20(fp)
 801305c:	1001703a 	wrctl	status,r2
}
 8013060:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8013064:	e0bffe17 	ldw	r2,-8(fp)
 8013068:	e0fff717 	ldw	r3,-36(fp)
 801306c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8013070:	e0bffe17 	ldw	r2,-8(fp)
 8013074:	e0fff803 	ldbu	r3,-32(fp)
 8013078:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 801307c:	e0bffe17 	ldw	r2,-8(fp)
 8013080:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8013084:	e0bffe17 	ldw	r2,-8(fp)
 8013088:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 801308c:	e0bffe17 	ldw	r2,-8(fp)
 8013090:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8013094:	e0bffe17 	ldw	r2,-8(fp)
 8013098:	e0c00317 	ldw	r3,12(fp)
 801309c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80130a0:	e0bffe17 	ldw	r2,-8(fp)
 80130a4:	e0c00217 	ldw	r3,8(fp)
 80130a8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80130ac:	e0bffe17 	ldw	r2,-8(fp)
 80130b0:	e0fff617 	ldw	r3,-40(fp)
 80130b4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 80130b8:	e0bffe17 	ldw	r2,-8(fp)
 80130bc:	e0fff40b 	ldhu	r3,-48(fp)
 80130c0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 80130c4:	e0bffe17 	ldw	r2,-8(fp)
 80130c8:	e0fff50b 	ldhu	r3,-44(fp)
 80130cc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80130d0:	e0bffe17 	ldw	r2,-8(fp)
 80130d4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 80130d8:	e0bff803 	ldbu	r2,-32(fp)
 80130dc:	1004d0fa 	srli	r2,r2,3
 80130e0:	1007883a 	mov	r3,r2
 80130e4:	e0bffe17 	ldw	r2,-8(fp)
 80130e8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 80130ec:	e0bff803 	ldbu	r2,-32(fp)
 80130f0:	108001cc 	andi	r2,r2,7
 80130f4:	1007883a 	mov	r3,r2
 80130f8:	e0bffe17 	ldw	r2,-8(fp)
 80130fc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 8013100:	e0bffe17 	ldw	r2,-8(fp)
 8013104:	10800d03 	ldbu	r2,52(r2)
 8013108:	10803fcc 	andi	r2,r2,255
 801310c:	00c00044 	movi	r3,1
 8013110:	1884983a 	sll	r2,r3,r2
 8013114:	1007883a 	mov	r3,r2
 8013118:	e0bffe17 	ldw	r2,-8(fp)
 801311c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 8013120:	e0bffe17 	ldw	r2,-8(fp)
 8013124:	10800cc3 	ldbu	r2,51(r2)
 8013128:	10803fcc 	andi	r2,r2,255
 801312c:	00c00044 	movi	r3,1
 8013130:	1884983a 	sll	r2,r3,r2
 8013134:	1007883a 	mov	r3,r2
 8013138:	e0bffe17 	ldw	r2,-8(fp)
 801313c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8013140:	e0bffe17 	ldw	r2,-8(fp)
 8013144:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8013148:	e0bffe17 	ldw	r2,-8(fp)
 801314c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 8013150:	e0bffe17 	ldw	r2,-8(fp)
 8013154:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 8013158:	e0bffe17 	ldw	r2,-8(fp)
 801315c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 8013160:	e0bffe17 	ldw	r2,-8(fp)
 8013164:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 8013168:	e0bffe17 	ldw	r2,-8(fp)
 801316c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 8013170:	e0bffe17 	ldw	r2,-8(fp)
 8013174:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 8013178:	e0bffe17 	ldw	r2,-8(fp)
 801317c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 8013180:	e0bffe17 	ldw	r2,-8(fp)
 8013184:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 8013188:	e0bffe17 	ldw	r2,-8(fp)
 801318c:	00c00fc4 	movi	r3,63
 8013190:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 8013194:	e0bffe17 	ldw	r2,-8(fp)
 8013198:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 801319c:	e13ffe17 	ldw	r4,-8(fp)
 80131a0:	803c0f40 	call	803c0f4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80131a4:	e13ffe17 	ldw	r4,-8(fp)
 80131a8:	803bfe00 	call	803bfe0 <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
 80131ac:	0005303a 	rdctl	r2,status
 80131b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80131b4:	e0fffc17 	ldw	r3,-16(fp)
 80131b8:	00bfff84 	movi	r2,-2
 80131bc:	1884703a 	and	r2,r3,r2
 80131c0:	1001703a 	wrctl	status,r2
  return context;
 80131c4:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
 80131c8:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
 80131cc:	e0bff803 	ldbu	r2,-32(fp)
 80131d0:	100890ba 	slli	r4,r2,2
 80131d4:	e0fffe17 	ldw	r3,-8(fp)
 80131d8:	008201b4 	movhi	r2,2054
 80131dc:	2085883a 	add	r2,r4,r2
 80131e0:	10f90c15 	stw	r3,-7120(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 80131e4:	d0e06917 	ldw	r3,-32348(gp)
 80131e8:	e0bffe17 	ldw	r2,-8(fp)
 80131ec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 80131f0:	e0bffe17 	ldw	r2,-8(fp)
 80131f4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 80131f8:	d0a06917 	ldw	r2,-32348(gp)
 80131fc:	10000326 	beq	r2,zero,801320c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 8013200:	d0a06917 	ldw	r2,-32348(gp)
 8013204:	e0fffe17 	ldw	r3,-8(fp)
 8013208:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 801320c:	e0bffe17 	ldw	r2,-8(fp)
 8013210:	d0a06915 	stw	r2,-32348(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8013214:	e0bffe17 	ldw	r2,-8(fp)
 8013218:	10c00d83 	ldbu	r3,54(r2)
 801321c:	d0a07203 	ldbu	r2,-32312(gp)
 8013220:	1884b03a 	or	r2,r3,r2
 8013224:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8013228:	e0bffe17 	ldw	r2,-8(fp)
 801322c:	10800d03 	ldbu	r2,52(r2)
 8013230:	10c03fcc 	andi	r3,r2,255
 8013234:	d0a07244 	addi	r2,gp,-32311
 8013238:	1885883a 	add	r2,r3,r2
 801323c:	11000003 	ldbu	r4,0(r2)
 8013240:	e0bffe17 	ldw	r2,-8(fp)
 8013244:	10800d43 	ldbu	r2,53(r2)
 8013248:	e0fffe17 	ldw	r3,-8(fp)
 801324c:	18c00d03 	ldbu	r3,52(r3)
 8013250:	18c03fcc 	andi	r3,r3,255
 8013254:	2084b03a 	or	r2,r4,r2
 8013258:	1009883a 	mov	r4,r2
 801325c:	d0a07244 	addi	r2,gp,-32311
 8013260:	1885883a 	add	r2,r3,r2
 8013264:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8013268:	d0a06e43 	ldbu	r2,-32327(gp)
 801326c:	10800044 	addi	r2,r2,1
 8013270:	d0a06e45 	stb	r2,-32327(gp)
 8013274:	e0bfff17 	ldw	r2,-4(fp)
 8013278:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801327c:	e0bffa17 	ldw	r2,-24(fp)
 8013280:	1001703a 	wrctl	status,r2
}
 8013284:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 8013288:	0005883a 	mov	r2,zero
 801328c:	00000606 	br	80132a8 <OS_TCBInit+0x2cc>
 8013290:	e0bfff17 	ldw	r2,-4(fp)
 8013294:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8013298:	e0bff917 	ldw	r2,-28(fp)
 801329c:	1001703a 	wrctl	status,r2
}
 80132a0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 80132a4:	00801084 	movi	r2,66
}
 80132a8:	e037883a 	mov	sp,fp
 80132ac:	dfc00117 	ldw	ra,4(sp)
 80132b0:	df000017 	ldw	fp,0(sp)
 80132b4:	dec00204 	addi	sp,sp,8
 80132b8:	f800283a 	ret

080132bc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 80132bc:	defffe04 	addi	sp,sp,-8
 80132c0:	df000115 	stw	fp,4(sp)
 80132c4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 80132c8:	d0a00704 	addi	r2,gp,-32740
 80132cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 80132d0:	d0a00804 	addi	r2,gp,-32736
 80132d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 80132d8:	d0a00984 	addi	r2,gp,-32730
 80132dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 80132e0:	d0a00a04 	addi	r2,gp,-32728
 80132e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 80132e8:	d0a00904 	addi	r2,gp,-32732
 80132ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 80132f0:	d0a00a84 	addi	r2,gp,-32726
 80132f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 80132f8:	d0a00b04 	addi	r2,gp,-32724
 80132fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 8013300:	d0a00b84 	addi	r2,gp,-32722
 8013304:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 8013308:	d0a00c04 	addi	r2,gp,-32720
 801330c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 8013310:	d0a00c84 	addi	r2,gp,-32718
 8013314:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 8013318:	d0a00d04 	addi	r2,gp,-32716
 801331c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 8013320:	d0a00d84 	addi	r2,gp,-32714
 8013324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 8013328:	d0a00e04 	addi	r2,gp,-32712
 801332c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 8013330:	d0a00e84 	addi	r2,gp,-32710
 8013334:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 8013338:	d0a00f04 	addi	r2,gp,-32708
 801333c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 8013340:	d0a00f84 	addi	r2,gp,-32706
 8013344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 8013348:	d0a01004 	addi	r2,gp,-32704
 801334c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 8013350:	d0a01084 	addi	r2,gp,-32702
 8013354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 8013358:	d0a01104 	addi	r2,gp,-32700
 801335c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 8013360:	d0a01184 	addi	r2,gp,-32698
 8013364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 8013368:	d0a01204 	addi	r2,gp,-32696
 801336c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 8013370:	d0a01284 	addi	r2,gp,-32694
 8013374:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 8013378:	d0a01304 	addi	r2,gp,-32692
 801337c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 8013380:	d0a01384 	addi	r2,gp,-32690
 8013384:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 8013388:	d0a01404 	addi	r2,gp,-32688
 801338c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 8013390:	d0a01484 	addi	r2,gp,-32686
 8013394:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 8013398:	d0a01504 	addi	r2,gp,-32684
 801339c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 80133a0:	d0a01584 	addi	r2,gp,-32682
 80133a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 80133a8:	d0a01604 	addi	r2,gp,-32680
 80133ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 80133b0:	d0a01684 	addi	r2,gp,-32678
 80133b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 80133b8:	d0a01704 	addi	r2,gp,-32676
 80133bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 80133c0:	d0a01784 	addi	r2,gp,-32674
 80133c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 80133c8:	d0a01804 	addi	r2,gp,-32672
 80133cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 80133d0:	d0a01884 	addi	r2,gp,-32670
 80133d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 80133d8:	d0a01904 	addi	r2,gp,-32668
 80133dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 80133e0:	d0a01984 	addi	r2,gp,-32666
 80133e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 80133e8:	d0a01a04 	addi	r2,gp,-32664
 80133ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 80133f0:	d0a01a84 	addi	r2,gp,-32662
 80133f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 80133f8:	d0a01b04 	addi	r2,gp,-32660
 80133fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 8013400:	d0a01b84 	addi	r2,gp,-32658
 8013404:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 8013408:	d0a01c04 	addi	r2,gp,-32656
 801340c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 8013410:	d0a01c84 	addi	r2,gp,-32654
 8013414:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 8013418:	d0a01d04 	addi	r2,gp,-32652
 801341c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 8013420:	d0a01d84 	addi	r2,gp,-32650
 8013424:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 8013428:	d0a01e04 	addi	r2,gp,-32648
 801342c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 8013430:	d0a02304 	addi	r2,gp,-32628
 8013434:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8013438:	0001883a 	nop
 801343c:	e037883a 	mov	sp,fp
 8013440:	df000017 	ldw	fp,0(sp)
 8013444:	dec00104 	addi	sp,sp,4
 8013448:	f800283a 	ret

0801344c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 801344c:	defff204 	addi	sp,sp,-56
 8013450:	df000d15 	stw	fp,52(sp)
 8013454:	df000d04 	addi	fp,sp,52
 8013458:	e13ff615 	stw	r4,-40(fp)
 801345c:	2805883a 	mov	r2,r5
 8013460:	3007883a 	mov	r3,r6
 8013464:	e1fff315 	stw	r7,-52(fp)
 8013468:	e0bff50d 	sth	r2,-44(fp)
 801346c:	1805883a 	mov	r2,r3
 8013470:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8013474:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8013478:	e0bff317 	ldw	r2,-52(fp)
 801347c:	1000021e 	bne	r2,zero,8013488 <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
 8013480:	0005883a 	mov	r2,zero
 8013484:	0000b606 	br	8013760 <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8013488:	e0bff617 	ldw	r2,-40(fp)
 801348c:	1000051e 	bne	r2,zero,80134a4 <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8013490:	e0bff317 	ldw	r2,-52(fp)
 8013494:	00c01b84 	movi	r3,110
 8013498:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 801349c:	0005883a 	mov	r2,zero
 80134a0:	0000af06 	br	8013760 <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 80134a4:	e0bff617 	ldw	r2,-40(fp)
 80134a8:	10800003 	ldbu	r2,0(r2)
 80134ac:	10803fcc 	andi	r2,r2,255
 80134b0:	10800160 	cmpeqi	r2,r2,5
 80134b4:	1000051e 	bne	r2,zero,80134cc <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 80134b8:	e0bff317 	ldw	r2,-52(fp)
 80134bc:	00c00044 	movi	r3,1
 80134c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80134c4:	0005883a 	mov	r2,zero
 80134c8:	0000a506 	br	8013760 <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 80134cc:	e0fff403 	ldbu	r3,-48(fp)
 80134d0:	00bfe004 	movi	r2,-128
 80134d4:	1884703a 	and	r2,r3,r2
 80134d8:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 80134dc:	e0bffdc3 	ldbu	r2,-9(fp)
 80134e0:	10000626 	beq	r2,zero,80134fc <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 80134e4:	e0bff403 	ldbu	r2,-48(fp)
 80134e8:	10801fcc 	andi	r2,r2,127
 80134ec:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
 80134f0:	00800044 	movi	r2,1
 80134f4:	e0bfff45 	stb	r2,-3(fp)
 80134f8:	00000106 	br	8013500 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 80134fc:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 8013500:	e0bff317 	ldw	r2,-52(fp)
 8013504:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
 8013508:	0005303a 	rdctl	r2,status
 801350c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013510:	e0fffc17 	ldw	r3,-16(fp)
 8013514:	00bfff84 	movi	r2,-2
 8013518:	1884703a 	and	r2,r3,r2
 801351c:	1001703a 	wrctl	status,r2
  return context;
 8013520:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 8013524:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
 8013528:	e0bff403 	ldbu	r2,-48(fp)
 801352c:	10c000e0 	cmpeqi	r3,r2,3
 8013530:	1800281e 	bne	r3,zero,80135d4 <OSFlagAccept+0x188>
 8013534:	10c00108 	cmpgei	r3,r2,4
 8013538:	18007e1e 	bne	r3,zero,8013734 <OSFlagAccept+0x2e8>
 801353c:	10c000a0 	cmpeqi	r3,r2,2
 8013540:	1800061e 	bne	r3,zero,801355c <OSFlagAccept+0x110>
 8013544:	10c000c8 	cmpgei	r3,r2,3
 8013548:	18007a1e 	bne	r3,zero,8013734 <OSFlagAccept+0x2e8>
 801354c:	10003e26 	beq	r2,zero,8013648 <OSFlagAccept+0x1fc>
 8013550:	10800060 	cmpeqi	r2,r2,1
 8013554:	10005a1e 	bne	r2,zero,80136c0 <OSFlagAccept+0x274>
 8013558:	00007606 	br	8013734 <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 801355c:	e0bff617 	ldw	r2,-40(fp)
 8013560:	1080020b 	ldhu	r2,8(r2)
 8013564:	e0fff50b 	ldhu	r3,-44(fp)
 8013568:	1884703a 	and	r2,r3,r2
 801356c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8013570:	e0ffff8b 	ldhu	r3,-2(fp)
 8013574:	e0bff50b 	ldhu	r2,-44(fp)
 8013578:	18800d1e 	bne	r3,r2,80135b0 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 801357c:	e0bfff43 	ldbu	r2,-3(fp)
 8013580:	10800058 	cmpnei	r2,r2,1
 8013584:	10000d1e 	bne	r2,zero,80135bc <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8013588:	e0bff617 	ldw	r2,-40(fp)
 801358c:	1080020b 	ldhu	r2,8(r2)
 8013590:	1007883a 	mov	r3,r2
 8013594:	e0bfff8b 	ldhu	r2,-2(fp)
 8013598:	0084303a 	nor	r2,zero,r2
 801359c:	1884703a 	and	r2,r3,r2
 80135a0:	1007883a 	mov	r3,r2
 80135a4:	e0bff617 	ldw	r2,-40(fp)
 80135a8:	10c0020d 	sth	r3,8(r2)
 80135ac:	00000306 	br	80135bc <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80135b0:	e0bff317 	ldw	r2,-52(fp)
 80135b4:	00c01c04 	movi	r3,112
 80135b8:	10c00005 	stb	r3,0(r2)
 80135bc:	e0bffe17 	ldw	r2,-8(fp)
 80135c0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80135c4:	e0bffb17 	ldw	r2,-20(fp)
 80135c8:	1001703a 	wrctl	status,r2
}
 80135cc:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 80135d0:	00006206 	br	801375c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 80135d4:	e0bff617 	ldw	r2,-40(fp)
 80135d8:	1080020b 	ldhu	r2,8(r2)
 80135dc:	e0fff50b 	ldhu	r3,-44(fp)
 80135e0:	1884703a 	and	r2,r3,r2
 80135e4:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 80135e8:	e0bfff8b 	ldhu	r2,-2(fp)
 80135ec:	10000d26 	beq	r2,zero,8013624 <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80135f0:	e0bfff43 	ldbu	r2,-3(fp)
 80135f4:	10800058 	cmpnei	r2,r2,1
 80135f8:	10000d1e 	bne	r2,zero,8013630 <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 80135fc:	e0bff617 	ldw	r2,-40(fp)
 8013600:	1080020b 	ldhu	r2,8(r2)
 8013604:	1007883a 	mov	r3,r2
 8013608:	e0bfff8b 	ldhu	r2,-2(fp)
 801360c:	0084303a 	nor	r2,zero,r2
 8013610:	1884703a 	and	r2,r3,r2
 8013614:	1007883a 	mov	r3,r2
 8013618:	e0bff617 	ldw	r2,-40(fp)
 801361c:	10c0020d 	sth	r3,8(r2)
 8013620:	00000306 	br	8013630 <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8013624:	e0bff317 	ldw	r2,-52(fp)
 8013628:	00c01c04 	movi	r3,112
 801362c:	10c00005 	stb	r3,0(r2)
 8013630:	e0bffe17 	ldw	r2,-8(fp)
 8013634:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8013638:	e0bffa17 	ldw	r2,-24(fp)
 801363c:	1001703a 	wrctl	status,r2
}
 8013640:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 8013644:	00004506 	br	801375c <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8013648:	e0bff617 	ldw	r2,-40(fp)
 801364c:	1080020b 	ldhu	r2,8(r2)
 8013650:	0084303a 	nor	r2,zero,r2
 8013654:	1007883a 	mov	r3,r2
 8013658:	e0bff50b 	ldhu	r2,-44(fp)
 801365c:	1884703a 	and	r2,r3,r2
 8013660:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8013664:	e0ffff8b 	ldhu	r3,-2(fp)
 8013668:	e0bff50b 	ldhu	r2,-44(fp)
 801366c:	18800b1e 	bne	r3,r2,801369c <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8013670:	e0bfff43 	ldbu	r2,-3(fp)
 8013674:	10800058 	cmpnei	r2,r2,1
 8013678:	10000b1e 	bne	r2,zero,80136a8 <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 801367c:	e0bff617 	ldw	r2,-40(fp)
 8013680:	1080020b 	ldhu	r2,8(r2)
 8013684:	e0ffff8b 	ldhu	r3,-2(fp)
 8013688:	1884b03a 	or	r2,r3,r2
 801368c:	1007883a 	mov	r3,r2
 8013690:	e0bff617 	ldw	r2,-40(fp)
 8013694:	10c0020d 	sth	r3,8(r2)
 8013698:	00000306 	br	80136a8 <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 801369c:	e0bff317 	ldw	r2,-52(fp)
 80136a0:	00c01c04 	movi	r3,112
 80136a4:	10c00005 	stb	r3,0(r2)
 80136a8:	e0bffe17 	ldw	r2,-8(fp)
 80136ac:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80136b0:	e0bff917 	ldw	r2,-28(fp)
 80136b4:	1001703a 	wrctl	status,r2
}
 80136b8:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 80136bc:	00002706 	br	801375c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 80136c0:	e0bff617 	ldw	r2,-40(fp)
 80136c4:	1080020b 	ldhu	r2,8(r2)
 80136c8:	0084303a 	nor	r2,zero,r2
 80136cc:	1007883a 	mov	r3,r2
 80136d0:	e0bff50b 	ldhu	r2,-44(fp)
 80136d4:	1884703a 	and	r2,r3,r2
 80136d8:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 80136dc:	e0bfff8b 	ldhu	r2,-2(fp)
 80136e0:	10000b26 	beq	r2,zero,8013710 <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80136e4:	e0bfff43 	ldbu	r2,-3(fp)
 80136e8:	10800058 	cmpnei	r2,r2,1
 80136ec:	10000b1e 	bne	r2,zero,801371c <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 80136f0:	e0bff617 	ldw	r2,-40(fp)
 80136f4:	1080020b 	ldhu	r2,8(r2)
 80136f8:	e0ffff8b 	ldhu	r3,-2(fp)
 80136fc:	1884b03a 	or	r2,r3,r2
 8013700:	1007883a 	mov	r3,r2
 8013704:	e0bff617 	ldw	r2,-40(fp)
 8013708:	10c0020d 	sth	r3,8(r2)
 801370c:	00000306 	br	801371c <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8013710:	e0bff317 	ldw	r2,-52(fp)
 8013714:	00c01c04 	movi	r3,112
 8013718:	10c00005 	stb	r3,0(r2)
 801371c:	e0bffe17 	ldw	r2,-8(fp)
 8013720:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8013724:	e0bff817 	ldw	r2,-32(fp)
 8013728:	1001703a 	wrctl	status,r2
}
 801372c:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
 8013730:	00000a06 	br	801375c <OSFlagAccept+0x310>
 8013734:	e0bffe17 	ldw	r2,-8(fp)
 8013738:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801373c:	e0bff717 	ldw	r2,-36(fp)
 8013740:	1001703a 	wrctl	status,r2
}
 8013744:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8013748:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 801374c:	e0bff317 	ldw	r2,-52(fp)
 8013750:	00c01bc4 	movi	r3,111
 8013754:	10c00005 	stb	r3,0(r2)
             break;
 8013758:	0001883a 	nop
    }
    return (flags_rdy);
 801375c:	e0bfff8b 	ldhu	r2,-2(fp)
}
 8013760:	e037883a 	mov	sp,fp
 8013764:	df000017 	ldw	fp,0(sp)
 8013768:	dec00104 	addi	sp,sp,4
 801376c:	f800283a 	ret

08013770 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 8013770:	defff804 	addi	sp,sp,-32
 8013774:	df000715 	stw	fp,28(sp)
 8013778:	df000704 	addi	fp,sp,28
 801377c:	2005883a 	mov	r2,r4
 8013780:	e17ff915 	stw	r5,-28(fp)
 8013784:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 8013788:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 801378c:	e0bff917 	ldw	r2,-28(fp)
 8013790:	1000021e 	bne	r2,zero,801379c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 8013794:	0005883a 	mov	r2,zero
 8013798:	00003506 	br	8013870 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 801379c:	d0a07403 	ldbu	r2,-32304(gp)
 80137a0:	10803fcc 	andi	r2,r2,255
 80137a4:	10000526 	beq	r2,zero,80137bc <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 80137a8:	e0bff917 	ldw	r2,-28(fp)
 80137ac:	00c00404 	movi	r3,16
 80137b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 80137b4:	0005883a 	mov	r2,zero
 80137b8:	00002d06 	br	8013870 <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
 80137bc:	0005303a 	rdctl	r2,status
 80137c0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80137c4:	e0fffd17 	ldw	r3,-12(fp)
 80137c8:	00bfff84 	movi	r2,-2
 80137cc:	1884703a 	and	r2,r3,r2
 80137d0:	1001703a 	wrctl	status,r2
  return context;
 80137d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80137d8:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 80137dc:	d0a07717 	ldw	r2,-32292(gp)
 80137e0:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 80137e4:	e0bffe17 	ldw	r2,-8(fp)
 80137e8:	10001826 	beq	r2,zero,801384c <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 80137ec:	d0a07717 	ldw	r2,-32292(gp)
 80137f0:	10800117 	ldw	r2,4(r2)
 80137f4:	d0a07715 	stw	r2,-32292(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 80137f8:	e0bffe17 	ldw	r2,-8(fp)
 80137fc:	00c00144 	movi	r3,5
 8013800:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 8013804:	e0bffe17 	ldw	r2,-8(fp)
 8013808:	e0fffa0b 	ldhu	r3,-24(fp)
 801380c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 8013810:	e0bffe17 	ldw	r2,-8(fp)
 8013814:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 8013818:	e0bffe17 	ldw	r2,-8(fp)
 801381c:	00c00fc4 	movi	r3,63
 8013820:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8013824:	e0bffe17 	ldw	r2,-8(fp)
 8013828:	100002c5 	stb	zero,11(r2)
 801382c:	e0bfff17 	ldw	r2,-4(fp)
 8013830:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8013834:	e0bffc17 	ldw	r2,-16(fp)
 8013838:	1001703a 	wrctl	status,r2
}
 801383c:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 8013840:	e0bff917 	ldw	r2,-28(fp)
 8013844:	10000005 	stb	zero,0(r2)
 8013848:	00000806 	br	801386c <OSFlagCreate+0xfc>
 801384c:	e0bfff17 	ldw	r2,-4(fp)
 8013850:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8013854:	e0bffb17 	ldw	r2,-20(fp)
 8013858:	1001703a 	wrctl	status,r2
}
 801385c:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 8013860:	e0bff917 	ldw	r2,-28(fp)
 8013864:	00c01c84 	movi	r3,114
 8013868:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 801386c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013870:	e037883a 	mov	sp,fp
 8013874:	df000017 	ldw	fp,0(sp)
 8013878:	dec00104 	addi	sp,sp,4
 801387c:	f800283a 	ret

08013880 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 8013880:	defff204 	addi	sp,sp,-56
 8013884:	dfc00d15 	stw	ra,52(sp)
 8013888:	df000c15 	stw	fp,48(sp)
 801388c:	df000c04 	addi	fp,sp,48
 8013890:	e13ff615 	stw	r4,-40(fp)
 8013894:	2805883a 	mov	r2,r5
 8013898:	e1bff415 	stw	r6,-48(fp)
 801389c:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 80138a0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80138a4:	e0bff417 	ldw	r2,-48(fp)
 80138a8:	1000021e 	bne	r2,zero,80138b4 <OSFlagDel+0x34>
        return (pgrp);
 80138ac:	e0bff617 	ldw	r2,-40(fp)
 80138b0:	00008406 	br	8013ac4 <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 80138b4:	e0bff617 	ldw	r2,-40(fp)
 80138b8:	1000051e 	bne	r2,zero,80138d0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80138bc:	e0bff417 	ldw	r2,-48(fp)
 80138c0:	00c01b84 	movi	r3,110
 80138c4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80138c8:	e0bff617 	ldw	r2,-40(fp)
 80138cc:	00007d06 	br	8013ac4 <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80138d0:	d0a07403 	ldbu	r2,-32304(gp)
 80138d4:	10803fcc 	andi	r2,r2,255
 80138d8:	10000526 	beq	r2,zero,80138f0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 80138dc:	e0bff417 	ldw	r2,-48(fp)
 80138e0:	00c003c4 	movi	r3,15
 80138e4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 80138e8:	e0bff617 	ldw	r2,-40(fp)
 80138ec:	00007506 	br	8013ac4 <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 80138f0:	e0bff617 	ldw	r2,-40(fp)
 80138f4:	10800003 	ldbu	r2,0(r2)
 80138f8:	10803fcc 	andi	r2,r2,255
 80138fc:	10800160 	cmpeqi	r2,r2,5
 8013900:	1000051e 	bne	r2,zero,8013918 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 8013904:	e0bff417 	ldw	r2,-48(fp)
 8013908:	00c00044 	movi	r3,1
 801390c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 8013910:	e0bff617 	ldw	r2,-40(fp)
 8013914:	00006b06 	br	8013ac4 <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
 8013918:	0005303a 	rdctl	r2,status
 801391c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013920:	e0fffb17 	ldw	r3,-20(fp)
 8013924:	00bfff84 	movi	r2,-2
 8013928:	1884703a 	and	r2,r3,r2
 801392c:	1001703a 	wrctl	status,r2
  return context;
 8013930:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8013934:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 8013938:	e0bff617 	ldw	r2,-40(fp)
 801393c:	10800117 	ldw	r2,4(r2)
 8013940:	10000326 	beq	r2,zero,8013950 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 8013944:	00800044 	movi	r2,1
 8013948:	e0bfffc5 	stb	r2,-1(fp)
 801394c:	00000106 	br	8013954 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8013950:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 8013954:	e0bff503 	ldbu	r2,-44(fp)
 8013958:	10000326 	beq	r2,zero,8013968 <OSFlagDel+0xe8>
 801395c:	10800060 	cmpeqi	r2,r2,1
 8013960:	1000251e 	bne	r2,zero,80139f8 <OSFlagDel+0x178>
 8013964:	00004b06 	br	8013a94 <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 8013968:	e0bfffc3 	ldbu	r2,-1(fp)
 801396c:	1000171e 	bne	r2,zero,80139cc <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 8013970:	e0bff617 	ldw	r2,-40(fp)
 8013974:	00c00fc4 	movi	r3,63
 8013978:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 801397c:	e0bff617 	ldw	r2,-40(fp)
 8013980:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8013984:	e0bff617 	ldw	r2,-40(fp)
 8013988:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 801398c:	d0e07717 	ldw	r3,-32292(gp)
 8013990:	e0bff617 	ldw	r2,-40(fp)
 8013994:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 8013998:	e0bff617 	ldw	r2,-40(fp)
 801399c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 80139a0:	e0bff617 	ldw	r2,-40(fp)
 80139a4:	d0a07715 	stw	r2,-32292(gp)
 80139a8:	e0bffc17 	ldw	r2,-16(fp)
 80139ac:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80139b0:	e0bffa17 	ldw	r2,-24(fp)
 80139b4:	1001703a 	wrctl	status,r2
}
 80139b8:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 80139bc:	e0bff417 	ldw	r2,-48(fp)
 80139c0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 80139c4:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 80139c8:	00003d06 	br	8013ac0 <OSFlagDel+0x240>
 80139cc:	e0bffc17 	ldw	r2,-16(fp)
 80139d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80139d4:	e0bff917 	ldw	r2,-28(fp)
 80139d8:	1001703a 	wrctl	status,r2
}
 80139dc:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
 80139e0:	e0bff417 	ldw	r2,-48(fp)
 80139e4:	00c01244 	movi	r3,73
 80139e8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 80139ec:	e0bff617 	ldw	r2,-40(fp)
 80139f0:	e0bffd15 	stw	r2,-12(fp)
             break;
 80139f4:	00003206 	br	8013ac0 <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 80139f8:	e0bff617 	ldw	r2,-40(fp)
 80139fc:	10800117 	ldw	r2,4(r2)
 8013a00:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 8013a04:	00000606 	br	8013a20 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 8013a08:	000b883a 	mov	r5,zero
 8013a0c:	e13ffe17 	ldw	r4,-8(fp)
 8013a10:	8014a780 	call	8014a78 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8013a14:	e0bffe17 	ldw	r2,-8(fp)
 8013a18:	10800017 	ldw	r2,0(r2)
 8013a1c:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 8013a20:	e0bffe17 	ldw	r2,-8(fp)
 8013a24:	103ff81e 	bne	r2,zero,8013a08 <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 8013a28:	e0bff617 	ldw	r2,-40(fp)
 8013a2c:	00c00fc4 	movi	r3,63
 8013a30:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8013a34:	e0bff617 	ldw	r2,-40(fp)
 8013a38:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8013a3c:	e0bff617 	ldw	r2,-40(fp)
 8013a40:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 8013a44:	d0e07717 	ldw	r3,-32292(gp)
 8013a48:	e0bff617 	ldw	r2,-40(fp)
 8013a4c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 8013a50:	e0bff617 	ldw	r2,-40(fp)
 8013a54:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 8013a58:	e0bff617 	ldw	r2,-40(fp)
 8013a5c:	d0a07715 	stw	r2,-32292(gp)
 8013a60:	e0bffc17 	ldw	r2,-16(fp)
 8013a64:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8013a68:	e0bff817 	ldw	r2,-32(fp)
 8013a6c:	1001703a 	wrctl	status,r2
}
 8013a70:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8013a74:	e0bfffc3 	ldbu	r2,-1(fp)
 8013a78:	10800058 	cmpnei	r2,r2,1
 8013a7c:	1000011e 	bne	r2,zero,8013a84 <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 8013a80:	8012be80 	call	8012be8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 8013a84:	e0bff417 	ldw	r2,-48(fp)
 8013a88:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 8013a8c:	e03ffd15 	stw	zero,-12(fp)
             break;
 8013a90:	00000b06 	br	8013ac0 <OSFlagDel+0x240>
 8013a94:	e0bffc17 	ldw	r2,-16(fp)
 8013a98:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8013a9c:	e0bff717 	ldw	r2,-36(fp)
 8013aa0:	1001703a 	wrctl	status,r2
}
 8013aa4:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 8013aa8:	e0bff417 	ldw	r2,-48(fp)
 8013aac:	00c001c4 	movi	r3,7
 8013ab0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 8013ab4:	e0bff617 	ldw	r2,-40(fp)
 8013ab8:	e0bffd15 	stw	r2,-12(fp)
             break;
 8013abc:	0001883a 	nop
    }
    return (pgrp_return);
 8013ac0:	e0bffd17 	ldw	r2,-12(fp)
}
 8013ac4:	e037883a 	mov	sp,fp
 8013ac8:	dfc00117 	ldw	ra,4(sp)
 8013acc:	df000017 	ldw	fp,0(sp)
 8013ad0:	dec00204 	addi	sp,sp,8
 8013ad4:	f800283a 	ret

08013ad8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 8013ad8:	defff604 	addi	sp,sp,-40
 8013adc:	dfc00915 	stw	ra,36(sp)
 8013ae0:	df000815 	stw	fp,32(sp)
 8013ae4:	df000804 	addi	fp,sp,32
 8013ae8:	e13ffa15 	stw	r4,-24(fp)
 8013aec:	e17ff915 	stw	r5,-28(fp)
 8013af0:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8013af4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8013af8:	e0bff817 	ldw	r2,-32(fp)
 8013afc:	1000021e 	bne	r2,zero,8013b08 <OSFlagNameGet+0x30>
        return (0);
 8013b00:	0005883a 	mov	r2,zero
 8013b04:	00003b06 	br	8013bf4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 8013b08:	e0bffa17 	ldw	r2,-24(fp)
 8013b0c:	1000051e 	bne	r2,zero,8013b24 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8013b10:	e0bff817 	ldw	r2,-32(fp)
 8013b14:	00c01b84 	movi	r3,110
 8013b18:	10c00005 	stb	r3,0(r2)
        return (0);
 8013b1c:	0005883a 	mov	r2,zero
 8013b20:	00003406 	br	8013bf4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8013b24:	e0bff917 	ldw	r2,-28(fp)
 8013b28:	1000051e 	bne	r2,zero,8013b40 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8013b2c:	e0bff817 	ldw	r2,-32(fp)
 8013b30:	00c00304 	movi	r3,12
 8013b34:	10c00005 	stb	r3,0(r2)
        return (0);
 8013b38:	0005883a 	mov	r2,zero
 8013b3c:	00002d06 	br	8013bf4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8013b40:	d0a07403 	ldbu	r2,-32304(gp)
 8013b44:	10803fcc 	andi	r2,r2,255
 8013b48:	10000526 	beq	r2,zero,8013b60 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 8013b4c:	e0bff817 	ldw	r2,-32(fp)
 8013b50:	00c00444 	movi	r3,17
 8013b54:	10c00005 	stb	r3,0(r2)
        return (0);
 8013b58:	0005883a 	mov	r2,zero
 8013b5c:	00002506 	br	8013bf4 <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
 8013b60:	0005303a 	rdctl	r2,status
 8013b64:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013b68:	e0fffd17 	ldw	r3,-12(fp)
 8013b6c:	00bfff84 	movi	r2,-2
 8013b70:	1884703a 	and	r2,r3,r2
 8013b74:	1001703a 	wrctl	status,r2
  return context;
 8013b78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013b7c:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 8013b80:	e0bffa17 	ldw	r2,-24(fp)
 8013b84:	10800003 	ldbu	r2,0(r2)
 8013b88:	10803fcc 	andi	r2,r2,255
 8013b8c:	10800160 	cmpeqi	r2,r2,5
 8013b90:	10000a1e 	bne	r2,zero,8013bbc <OSFlagNameGet+0xe4>
 8013b94:	e0bfff17 	ldw	r2,-4(fp)
 8013b98:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8013b9c:	e0bffc17 	ldw	r2,-16(fp)
 8013ba0:	1001703a 	wrctl	status,r2
}
 8013ba4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8013ba8:	e0bff817 	ldw	r2,-32(fp)
 8013bac:	00c00044 	movi	r3,1
 8013bb0:	10c00005 	stb	r3,0(r2)
        return (0);
 8013bb4:	0005883a 	mov	r2,zero
 8013bb8:	00000e06 	br	8013bf4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 8013bbc:	e0bffa17 	ldw	r2,-24(fp)
 8013bc0:	10800284 	addi	r2,r2,10
 8013bc4:	100b883a 	mov	r5,r2
 8013bc8:	e13ff917 	ldw	r4,-28(fp)
 8013bcc:	8012d200 	call	8012d20 <OS_StrCopy>
 8013bd0:	e0bffec5 	stb	r2,-5(fp)
 8013bd4:	e0bfff17 	ldw	r2,-4(fp)
 8013bd8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8013bdc:	e0bffb17 	ldw	r2,-20(fp)
 8013be0:	1001703a 	wrctl	status,r2
}
 8013be4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8013be8:	e0bff817 	ldw	r2,-32(fp)
 8013bec:	10000005 	stb	zero,0(r2)
    return (len);
 8013bf0:	e0bffec3 	ldbu	r2,-5(fp)
}
 8013bf4:	e037883a 	mov	sp,fp
 8013bf8:	dfc00117 	ldw	ra,4(sp)
 8013bfc:	df000017 	ldw	fp,0(sp)
 8013c00:	dec00204 	addi	sp,sp,8
 8013c04:	f800283a 	ret

08013c08 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 8013c08:	defff504 	addi	sp,sp,-44
 8013c0c:	dfc00a15 	stw	ra,40(sp)
 8013c10:	df000915 	stw	fp,36(sp)
 8013c14:	df000904 	addi	fp,sp,36
 8013c18:	e13ff915 	stw	r4,-28(fp)
 8013c1c:	e17ff815 	stw	r5,-32(fp)
 8013c20:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8013c24:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8013c28:	e0bff717 	ldw	r2,-36(fp)
 8013c2c:	10004526 	beq	r2,zero,8013d44 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 8013c30:	e0bff917 	ldw	r2,-28(fp)
 8013c34:	1000041e 	bne	r2,zero,8013c48 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8013c38:	e0bff717 	ldw	r2,-36(fp)
 8013c3c:	00c01b84 	movi	r3,110
 8013c40:	10c00005 	stb	r3,0(r2)
        return;
 8013c44:	00004006 	br	8013d48 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8013c48:	e0bff817 	ldw	r2,-32(fp)
 8013c4c:	1000041e 	bne	r2,zero,8013c60 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 8013c50:	e0bff717 	ldw	r2,-36(fp)
 8013c54:	00c00304 	movi	r3,12
 8013c58:	10c00005 	stb	r3,0(r2)
        return;
 8013c5c:	00003a06 	br	8013d48 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8013c60:	d0a07403 	ldbu	r2,-32304(gp)
 8013c64:	10803fcc 	andi	r2,r2,255
 8013c68:	10000426 	beq	r2,zero,8013c7c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 8013c6c:	e0bff717 	ldw	r2,-36(fp)
 8013c70:	00c00484 	movi	r3,18
 8013c74:	10c00005 	stb	r3,0(r2)
        return;
 8013c78:	00003306 	br	8013d48 <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
 8013c7c:	0005303a 	rdctl	r2,status
 8013c80:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013c84:	e0fffd17 	ldw	r3,-12(fp)
 8013c88:	00bfff84 	movi	r2,-2
 8013c8c:	1884703a 	and	r2,r3,r2
 8013c90:	1001703a 	wrctl	status,r2
  return context;
 8013c94:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013c98:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 8013c9c:	e0bff917 	ldw	r2,-28(fp)
 8013ca0:	10800003 	ldbu	r2,0(r2)
 8013ca4:	10803fcc 	andi	r2,r2,255
 8013ca8:	10800160 	cmpeqi	r2,r2,5
 8013cac:	1000091e 	bne	r2,zero,8013cd4 <OSFlagNameSet+0xcc>
 8013cb0:	e0bfff17 	ldw	r2,-4(fp)
 8013cb4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8013cb8:	e0bffc17 	ldw	r2,-16(fp)
 8013cbc:	1001703a 	wrctl	status,r2
}
 8013cc0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8013cc4:	e0bff717 	ldw	r2,-36(fp)
 8013cc8:	00c00044 	movi	r3,1
 8013ccc:	10c00005 	stb	r3,0(r2)
        return;
 8013cd0:	00001d06 	br	8013d48 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8013cd4:	e13ff817 	ldw	r4,-32(fp)
 8013cd8:	8012d940 	call	8012d94 <OS_StrLen>
 8013cdc:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 8013ce0:	e0bffec3 	ldbu	r2,-5(fp)
 8013ce4:	10800830 	cmpltui	r2,r2,32
 8013ce8:	1000091e 	bne	r2,zero,8013d10 <OSFlagNameSet+0x108>
 8013cec:	e0bfff17 	ldw	r2,-4(fp)
 8013cf0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8013cf4:	e0bffb17 	ldw	r2,-20(fp)
 8013cf8:	1001703a 	wrctl	status,r2
}
 8013cfc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 8013d00:	e0bff717 	ldw	r2,-36(fp)
 8013d04:	00c01cc4 	movi	r3,115
 8013d08:	10c00005 	stb	r3,0(r2)
        return;
 8013d0c:	00000e06 	br	8013d48 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 8013d10:	e0bff917 	ldw	r2,-28(fp)
 8013d14:	10800284 	addi	r2,r2,10
 8013d18:	e17ff817 	ldw	r5,-32(fp)
 8013d1c:	1009883a 	mov	r4,r2
 8013d20:	8012d200 	call	8012d20 <OS_StrCopy>
 8013d24:	e0bfff17 	ldw	r2,-4(fp)
 8013d28:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8013d2c:	e0bffa17 	ldw	r2,-24(fp)
 8013d30:	1001703a 	wrctl	status,r2
}
 8013d34:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8013d38:	e0bff717 	ldw	r2,-36(fp)
 8013d3c:	10000005 	stb	zero,0(r2)
    return;
 8013d40:	00000106 	br	8013d48 <OSFlagNameSet+0x140>
        return;
 8013d44:	0001883a 	nop
}
 8013d48:	e037883a 	mov	sp,fp
 8013d4c:	dfc00117 	ldw	ra,4(sp)
 8013d50:	df000017 	ldw	fp,0(sp)
 8013d54:	dec00204 	addi	sp,sp,8
 8013d58:	f800283a 	ret

08013d5c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 8013d5c:	deffe204 	addi	sp,sp,-120
 8013d60:	dfc01d15 	stw	ra,116(sp)
 8013d64:	df001c15 	stw	fp,112(sp)
 8013d68:	df001c04 	addi	fp,sp,112
 8013d6c:	e13fe815 	stw	r4,-96(fp)
 8013d70:	2805883a 	mov	r2,r5
 8013d74:	3009883a 	mov	r4,r6
 8013d78:	3807883a 	mov	r3,r7
 8013d7c:	e0bfe70d 	sth	r2,-100(fp)
 8013d80:	2005883a 	mov	r2,r4
 8013d84:	e0bfe605 	stb	r2,-104(fp)
 8013d88:	1805883a 	mov	r2,r3
 8013d8c:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8013d90:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8013d94:	e0800217 	ldw	r2,8(fp)
 8013d98:	1000021e 	bne	r2,zero,8013da4 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
 8013d9c:	0005883a 	mov	r2,zero
 8013da0:	00016906 	br	8014348 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8013da4:	e0bfe817 	ldw	r2,-96(fp)
 8013da8:	1000051e 	bne	r2,zero,8013dc0 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8013dac:	e0800217 	ldw	r2,8(fp)
 8013db0:	00c01b84 	movi	r3,110
 8013db4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8013db8:	0005883a 	mov	r2,zero
 8013dbc:	00016206 	br	8014348 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8013dc0:	d0a07403 	ldbu	r2,-32304(gp)
 8013dc4:	10803fcc 	andi	r2,r2,255
 8013dc8:	10000526 	beq	r2,zero,8013de0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 8013dcc:	e0800217 	ldw	r2,8(fp)
 8013dd0:	00c00084 	movi	r3,2
 8013dd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8013dd8:	0005883a 	mov	r2,zero
 8013ddc:	00015a06 	br	8014348 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 8013de0:	d0a06603 	ldbu	r2,-32360(gp)
 8013de4:	10803fcc 	andi	r2,r2,255
 8013de8:	10000526 	beq	r2,zero,8013e00 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 8013dec:	e0800217 	ldw	r2,8(fp)
 8013df0:	00c00344 	movi	r3,13
 8013df4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8013df8:	0005883a 	mov	r2,zero
 8013dfc:	00015206 	br	8014348 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8013e00:	e0bfe817 	ldw	r2,-96(fp)
 8013e04:	10800003 	ldbu	r2,0(r2)
 8013e08:	10803fcc 	andi	r2,r2,255
 8013e0c:	10800160 	cmpeqi	r2,r2,5
 8013e10:	1000051e 	bne	r2,zero,8013e28 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
 8013e14:	e0800217 	ldw	r2,8(fp)
 8013e18:	00c00044 	movi	r3,1
 8013e1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8013e20:	0005883a 	mov	r2,zero
 8013e24:	00014806 	br	8014348 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8013e28:	e0ffe603 	ldbu	r3,-104(fp)
 8013e2c:	00bfe004 	movi	r2,-128
 8013e30:	1884703a 	and	r2,r3,r2
 8013e34:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 8013e38:	e0bffdc3 	ldbu	r2,-9(fp)
 8013e3c:	10000626 	beq	r2,zero,8013e58 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 8013e40:	e0bfe603 	ldbu	r2,-104(fp)
 8013e44:	10801fcc 	andi	r2,r2,127
 8013e48:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
 8013e4c:	00800044 	movi	r2,1
 8013e50:	e0bfffc5 	stb	r2,-1(fp)
 8013e54:	00000106 	br	8013e5c <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
 8013e58:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
 8013e5c:	0005303a 	rdctl	r2,status
 8013e60:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013e64:	e0fffb17 	ldw	r3,-20(fp)
 8013e68:	00bfff84 	movi	r2,-2
 8013e6c:	1884703a 	and	r2,r3,r2
 8013e70:	1001703a 	wrctl	status,r2
  return context;
 8013e74:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8013e78:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
 8013e7c:	e0bfe603 	ldbu	r2,-104(fp)
 8013e80:	10c000e0 	cmpeqi	r3,r2,3
 8013e84:	18003a1e 	bne	r3,zero,8013f70 <OSFlagPend+0x214>
 8013e88:	10c00108 	cmpgei	r3,r2,4
 8013e8c:	1800c61e 	bne	r3,zero,80141a8 <OSFlagPend+0x44c>
 8013e90:	10c000a0 	cmpeqi	r3,r2,2
 8013e94:	1800061e 	bne	r3,zero,8013eb0 <OSFlagPend+0x154>
 8013e98:	10c000c8 	cmpgei	r3,r2,3
 8013e9c:	1800c21e 	bne	r3,zero,80141a8 <OSFlagPend+0x44c>
 8013ea0:	10006226 	beq	r2,zero,801402c <OSFlagPend+0x2d0>
 8013ea4:	10800060 	cmpeqi	r2,r2,1
 8013ea8:	1000901e 	bne	r2,zero,80140ec <OSFlagPend+0x390>
 8013eac:	0000be06 	br	80141a8 <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8013eb0:	e0bfe817 	ldw	r2,-96(fp)
 8013eb4:	1080020b 	ldhu	r2,8(r2)
 8013eb8:	e0ffe70b 	ldhu	r3,-100(fp)
 8013ebc:	1884703a 	and	r2,r3,r2
 8013ec0:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8013ec4:	e0fffd0b 	ldhu	r3,-12(fp)
 8013ec8:	e0bfe70b 	ldhu	r2,-100(fp)
 8013ecc:	1880181e 	bne	r3,r2,8013f30 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8013ed0:	e0bfffc3 	ldbu	r2,-1(fp)
 8013ed4:	10800058 	cmpnei	r2,r2,1
 8013ed8:	1000091e 	bne	r2,zero,8013f00 <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8013edc:	e0bfe817 	ldw	r2,-96(fp)
 8013ee0:	1080020b 	ldhu	r2,8(r2)
 8013ee4:	1007883a 	mov	r3,r2
 8013ee8:	e0bffd0b 	ldhu	r2,-12(fp)
 8013eec:	0084303a 	nor	r2,zero,r2
 8013ef0:	1884703a 	and	r2,r3,r2
 8013ef4:	1007883a 	mov	r3,r2
 8013ef8:	e0bfe817 	ldw	r2,-96(fp)
 8013efc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8013f00:	d0a07517 	ldw	r2,-32300(gp)
 8013f04:	e0fffd0b 	ldhu	r3,-12(fp)
 8013f08:	10c00b0d 	sth	r3,44(r2)
 8013f0c:	e0bffe17 	ldw	r2,-8(fp)
 8013f10:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8013f14:	e0bffa17 	ldw	r2,-24(fp)
 8013f18:	1001703a 	wrctl	status,r2
}
 8013f1c:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8013f20:	e0800217 	ldw	r2,8(fp)
 8013f24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8013f28:	e0bffd0b 	ldhu	r2,-12(fp)
 8013f2c:	00010606 	br	8014348 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8013f30:	e13fe70b 	ldhu	r4,-100(fp)
 8013f34:	e17fe603 	ldbu	r5,-104(fp)
 8013f38:	e0bfe50b 	ldhu	r2,-108(fp)
 8013f3c:	e0ffe904 	addi	r3,fp,-92
 8013f40:	d8800015 	stw	r2,0(sp)
 8013f44:	280f883a 	mov	r7,r5
 8013f48:	200d883a 	mov	r6,r4
 8013f4c:	180b883a 	mov	r5,r3
 8013f50:	e13fe817 	ldw	r4,-96(fp)
 8013f54:	80148340 	call	8014834 <OS_FlagBlock>
 8013f58:	e0bffe17 	ldw	r2,-8(fp)
 8013f5c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8013f60:	e0bff917 	ldw	r2,-28(fp)
 8013f64:	1001703a 	wrctl	status,r2
}
 8013f68:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8013f6c:	00009906 	br	80141d4 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8013f70:	e0bfe817 	ldw	r2,-96(fp)
 8013f74:	1080020b 	ldhu	r2,8(r2)
 8013f78:	e0ffe70b 	ldhu	r3,-100(fp)
 8013f7c:	1884703a 	and	r2,r3,r2
 8013f80:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8013f84:	e0bffd0b 	ldhu	r2,-12(fp)
 8013f88:	10001826 	beq	r2,zero,8013fec <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8013f8c:	e0bfffc3 	ldbu	r2,-1(fp)
 8013f90:	10800058 	cmpnei	r2,r2,1
 8013f94:	1000091e 	bne	r2,zero,8013fbc <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 8013f98:	e0bfe817 	ldw	r2,-96(fp)
 8013f9c:	1080020b 	ldhu	r2,8(r2)
 8013fa0:	1007883a 	mov	r3,r2
 8013fa4:	e0bffd0b 	ldhu	r2,-12(fp)
 8013fa8:	0084303a 	nor	r2,zero,r2
 8013fac:	1884703a 	and	r2,r3,r2
 8013fb0:	1007883a 	mov	r3,r2
 8013fb4:	e0bfe817 	ldw	r2,-96(fp)
 8013fb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8013fbc:	d0a07517 	ldw	r2,-32300(gp)
 8013fc0:	e0fffd0b 	ldhu	r3,-12(fp)
 8013fc4:	10c00b0d 	sth	r3,44(r2)
 8013fc8:	e0bffe17 	ldw	r2,-8(fp)
 8013fcc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8013fd0:	e0bff817 	ldw	r2,-32(fp)
 8013fd4:	1001703a 	wrctl	status,r2
}
 8013fd8:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8013fdc:	e0800217 	ldw	r2,8(fp)
 8013fe0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8013fe4:	e0bffd0b 	ldhu	r2,-12(fp)
 8013fe8:	0000d706 	br	8014348 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8013fec:	e13fe70b 	ldhu	r4,-100(fp)
 8013ff0:	e17fe603 	ldbu	r5,-104(fp)
 8013ff4:	e0bfe50b 	ldhu	r2,-108(fp)
 8013ff8:	e0ffe904 	addi	r3,fp,-92
 8013ffc:	d8800015 	stw	r2,0(sp)
 8014000:	280f883a 	mov	r7,r5
 8014004:	200d883a 	mov	r6,r4
 8014008:	180b883a 	mov	r5,r3
 801400c:	e13fe817 	ldw	r4,-96(fp)
 8014010:	80148340 	call	8014834 <OS_FlagBlock>
 8014014:	e0bffe17 	ldw	r2,-8(fp)
 8014018:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801401c:	e0bff717 	ldw	r2,-36(fp)
 8014020:	1001703a 	wrctl	status,r2
}
 8014024:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 8014028:	00006a06 	br	80141d4 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 801402c:	e0bfe817 	ldw	r2,-96(fp)
 8014030:	1080020b 	ldhu	r2,8(r2)
 8014034:	0084303a 	nor	r2,zero,r2
 8014038:	1007883a 	mov	r3,r2
 801403c:	e0bfe70b 	ldhu	r2,-100(fp)
 8014040:	1884703a 	and	r2,r3,r2
 8014044:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8014048:	e0fffd0b 	ldhu	r3,-12(fp)
 801404c:	e0bfe70b 	ldhu	r2,-100(fp)
 8014050:	1880161e 	bne	r3,r2,80140ac <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8014054:	e0bfffc3 	ldbu	r2,-1(fp)
 8014058:	10800058 	cmpnei	r2,r2,1
 801405c:	1000071e 	bne	r2,zero,801407c <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8014060:	e0bfe817 	ldw	r2,-96(fp)
 8014064:	1080020b 	ldhu	r2,8(r2)
 8014068:	e0fffd0b 	ldhu	r3,-12(fp)
 801406c:	1884b03a 	or	r2,r3,r2
 8014070:	1007883a 	mov	r3,r2
 8014074:	e0bfe817 	ldw	r2,-96(fp)
 8014078:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 801407c:	d0a07517 	ldw	r2,-32300(gp)
 8014080:	e0fffd0b 	ldhu	r3,-12(fp)
 8014084:	10c00b0d 	sth	r3,44(r2)
 8014088:	e0bffe17 	ldw	r2,-8(fp)
 801408c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8014090:	e0bff617 	ldw	r2,-40(fp)
 8014094:	1001703a 	wrctl	status,r2
}
 8014098:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 801409c:	e0800217 	ldw	r2,8(fp)
 80140a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 80140a4:	e0bffd0b 	ldhu	r2,-12(fp)
 80140a8:	0000a706 	br	8014348 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 80140ac:	e13fe70b 	ldhu	r4,-100(fp)
 80140b0:	e17fe603 	ldbu	r5,-104(fp)
 80140b4:	e0bfe50b 	ldhu	r2,-108(fp)
 80140b8:	e0ffe904 	addi	r3,fp,-92
 80140bc:	d8800015 	stw	r2,0(sp)
 80140c0:	280f883a 	mov	r7,r5
 80140c4:	200d883a 	mov	r6,r4
 80140c8:	180b883a 	mov	r5,r3
 80140cc:	e13fe817 	ldw	r4,-96(fp)
 80140d0:	80148340 	call	8014834 <OS_FlagBlock>
 80140d4:	e0bffe17 	ldw	r2,-8(fp)
 80140d8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 80140dc:	e0bff517 	ldw	r2,-44(fp)
 80140e0:	1001703a 	wrctl	status,r2
}
 80140e4:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 80140e8:	00003a06 	br	80141d4 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 80140ec:	e0bfe817 	ldw	r2,-96(fp)
 80140f0:	1080020b 	ldhu	r2,8(r2)
 80140f4:	0084303a 	nor	r2,zero,r2
 80140f8:	1007883a 	mov	r3,r2
 80140fc:	e0bfe70b 	ldhu	r2,-100(fp)
 8014100:	1884703a 	and	r2,r3,r2
 8014104:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8014108:	e0bffd0b 	ldhu	r2,-12(fp)
 801410c:	10001626 	beq	r2,zero,8014168 <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8014110:	e0bfffc3 	ldbu	r2,-1(fp)
 8014114:	10800058 	cmpnei	r2,r2,1
 8014118:	1000071e 	bne	r2,zero,8014138 <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 801411c:	e0bfe817 	ldw	r2,-96(fp)
 8014120:	1080020b 	ldhu	r2,8(r2)
 8014124:	e0fffd0b 	ldhu	r3,-12(fp)
 8014128:	1884b03a 	or	r2,r3,r2
 801412c:	1007883a 	mov	r3,r2
 8014130:	e0bfe817 	ldw	r2,-96(fp)
 8014134:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8014138:	d0a07517 	ldw	r2,-32300(gp)
 801413c:	e0fffd0b 	ldhu	r3,-12(fp)
 8014140:	10c00b0d 	sth	r3,44(r2)
 8014144:	e0bffe17 	ldw	r2,-8(fp)
 8014148:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 801414c:	e0bff417 	ldw	r2,-48(fp)
 8014150:	1001703a 	wrctl	status,r2
}
 8014154:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8014158:	e0800217 	ldw	r2,8(fp)
 801415c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8014160:	e0bffd0b 	ldhu	r2,-12(fp)
 8014164:	00007806 	br	8014348 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8014168:	e13fe70b 	ldhu	r4,-100(fp)
 801416c:	e17fe603 	ldbu	r5,-104(fp)
 8014170:	e0bfe50b 	ldhu	r2,-108(fp)
 8014174:	e0ffe904 	addi	r3,fp,-92
 8014178:	d8800015 	stw	r2,0(sp)
 801417c:	280f883a 	mov	r7,r5
 8014180:	200d883a 	mov	r6,r4
 8014184:	180b883a 	mov	r5,r3
 8014188:	e13fe817 	ldw	r4,-96(fp)
 801418c:	80148340 	call	8014834 <OS_FlagBlock>
 8014190:	e0bffe17 	ldw	r2,-8(fp)
 8014194:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
 8014198:	e0bff317 	ldw	r2,-52(fp)
 801419c:	1001703a 	wrctl	status,r2
}
 80141a0:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
 80141a4:	00000b06 	br	80141d4 <OSFlagPend+0x478>
 80141a8:	e0bffe17 	ldw	r2,-8(fp)
 80141ac:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
 80141b0:	e0bff217 	ldw	r2,-56(fp)
 80141b4:	1001703a 	wrctl	status,r2
}
 80141b8:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 80141bc:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 80141c0:	e0800217 	ldw	r2,8(fp)
 80141c4:	00c01bc4 	movi	r3,111
 80141c8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 80141cc:	e0bffd0b 	ldhu	r2,-12(fp)
 80141d0:	00005d06 	br	8014348 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 80141d4:	8012be80 	call	8012be8 <OS_Sched>
  NIOS2_READ_STATUS (context);
 80141d8:	0005303a 	rdctl	r2,status
 80141dc:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80141e0:	e0fff117 	ldw	r3,-60(fp)
 80141e4:	00bfff84 	movi	r2,-2
 80141e8:	1884703a 	and	r2,r3,r2
 80141ec:	1001703a 	wrctl	status,r2
  return context;
 80141f0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 80141f4:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 80141f8:	d0a07517 	ldw	r2,-32300(gp)
 80141fc:	10800c43 	ldbu	r2,49(r2)
 8014200:	10803fcc 	andi	r2,r2,255
 8014204:	10001d26 	beq	r2,zero,801427c <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8014208:	d0a07517 	ldw	r2,-32300(gp)
 801420c:	10800c43 	ldbu	r2,49(r2)
 8014210:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8014214:	d0a07517 	ldw	r2,-32300(gp)
 8014218:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 801421c:	e0bfe904 	addi	r2,fp,-92
 8014220:	1009883a 	mov	r4,r2
 8014224:	8014b6c0 	call	8014b6c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8014228:	d0a07517 	ldw	r2,-32300(gp)
 801422c:	10000c05 	stb	zero,48(r2)
 8014230:	e0bffe17 	ldw	r2,-8(fp)
 8014234:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
 8014238:	e0bff017 	ldw	r2,-64(fp)
 801423c:	1001703a 	wrctl	status,r2
}
 8014240:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 8014244:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
 8014248:	e0bffcc3 	ldbu	r2,-13(fp)
 801424c:	10800098 	cmpnei	r2,r2,2
 8014250:	1000041e 	bne	r2,zero,8014264 <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 8014254:	e0800217 	ldw	r2,8(fp)
 8014258:	00c00384 	movi	r3,14
 801425c:	10c00005 	stb	r3,0(r2)
                 break;
 8014260:	00000406 	br	8014274 <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 8014264:	e0800217 	ldw	r2,8(fp)
 8014268:	00c00284 	movi	r3,10
 801426c:	10c00005 	stb	r3,0(r2)
                 break;
 8014270:	0001883a 	nop
        }
        return (flags_rdy);
 8014274:	e0bffd0b 	ldhu	r2,-12(fp)
 8014278:	00003306 	br	8014348 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 801427c:	d0a07517 	ldw	r2,-32300(gp)
 8014280:	10800b0b 	ldhu	r2,44(r2)
 8014284:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8014288:	e0bfffc3 	ldbu	r2,-1(fp)
 801428c:	10800058 	cmpnei	r2,r2,1
 8014290:	1000241e 	bne	r2,zero,8014324 <OSFlagPend+0x5c8>
        switch (wait_type) {
 8014294:	e0bfe603 	ldbu	r2,-104(fp)
 8014298:	10c00088 	cmpgei	r3,r2,2
 801429c:	1800021e 	bne	r3,zero,80142a8 <OSFlagPend+0x54c>
 80142a0:	10000e0e 	bge	r2,zero,80142dc <OSFlagPend+0x580>
 80142a4:	00001506 	br	80142fc <OSFlagPend+0x5a0>
 80142a8:	10bfff84 	addi	r2,r2,-2
 80142ac:	108000a8 	cmpgeui	r2,r2,2
 80142b0:	1000121e 	bne	r2,zero,80142fc <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 80142b4:	e0bfe817 	ldw	r2,-96(fp)
 80142b8:	1080020b 	ldhu	r2,8(r2)
 80142bc:	1007883a 	mov	r3,r2
 80142c0:	e0bffd0b 	ldhu	r2,-12(fp)
 80142c4:	0084303a 	nor	r2,zero,r2
 80142c8:	1884703a 	and	r2,r3,r2
 80142cc:	1007883a 	mov	r3,r2
 80142d0:	e0bfe817 	ldw	r2,-96(fp)
 80142d4:	10c0020d 	sth	r3,8(r2)
                 break;
 80142d8:	00001306 	br	8014328 <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 80142dc:	e0bfe817 	ldw	r2,-96(fp)
 80142e0:	1080020b 	ldhu	r2,8(r2)
 80142e4:	e0fffd0b 	ldhu	r3,-12(fp)
 80142e8:	1884b03a 	or	r2,r3,r2
 80142ec:	1007883a 	mov	r3,r2
 80142f0:	e0bfe817 	ldw	r2,-96(fp)
 80142f4:	10c0020d 	sth	r3,8(r2)
                 break;
 80142f8:	00000b06 	br	8014328 <OSFlagPend+0x5cc>
 80142fc:	e0bffe17 	ldw	r2,-8(fp)
 8014300:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
 8014304:	e0bfef17 	ldw	r2,-68(fp)
 8014308:	1001703a 	wrctl	status,r2
}
 801430c:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8014310:	e0800217 	ldw	r2,8(fp)
 8014314:	00c01bc4 	movi	r3,111
 8014318:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 801431c:	0005883a 	mov	r2,zero
 8014320:	00000906 	br	8014348 <OSFlagPend+0x5ec>
        }
    }
 8014324:	0001883a 	nop
 8014328:	e0bffe17 	ldw	r2,-8(fp)
 801432c:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
 8014330:	e0bfee17 	ldw	r2,-72(fp)
 8014334:	1001703a 	wrctl	status,r2
}
 8014338:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 801433c:	e0800217 	ldw	r2,8(fp)
 8014340:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 8014344:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8014348:	e037883a 	mov	sp,fp
 801434c:	dfc00117 	ldw	ra,4(sp)
 8014350:	df000017 	ldw	fp,0(sp)
 8014354:	dec00204 	addi	sp,sp,8
 8014358:	f800283a 	ret

0801435c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 801435c:	defffb04 	addi	sp,sp,-20
 8014360:	df000415 	stw	fp,16(sp)
 8014364:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8014368:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 801436c:	0005303a 	rdctl	r2,status
 8014370:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014374:	e0fffc17 	ldw	r3,-16(fp)
 8014378:	00bfff84 	movi	r2,-2
 801437c:	1884703a 	and	r2,r3,r2
 8014380:	1001703a 	wrctl	status,r2
  return context;
 8014384:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
 8014388:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 801438c:	d0a07517 	ldw	r2,-32300(gp)
 8014390:	10800b0b 	ldhu	r2,44(r2)
 8014394:	e0bffe8d 	sth	r2,-6(fp)
 8014398:	e0bfff17 	ldw	r2,-4(fp)
 801439c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 80143a0:	e0bffd17 	ldw	r2,-12(fp)
 80143a4:	1001703a 	wrctl	status,r2
}
 80143a8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
 80143ac:	e0bffe8b 	ldhu	r2,-6(fp)
}
 80143b0:	e037883a 	mov	sp,fp
 80143b4:	df000017 	ldw	fp,0(sp)
 80143b8:	dec00104 	addi	sp,sp,4
 80143bc:	f800283a 	ret

080143c0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 80143c0:	deffef04 	addi	sp,sp,-68
 80143c4:	dfc01015 	stw	ra,64(sp)
 80143c8:	df000f15 	stw	fp,60(sp)
 80143cc:	df000f04 	addi	fp,sp,60
 80143d0:	e13ff415 	stw	r4,-48(fp)
 80143d4:	2805883a 	mov	r2,r5
 80143d8:	3007883a 	mov	r3,r6
 80143dc:	e1fff115 	stw	r7,-60(fp)
 80143e0:	e0bff30d 	sth	r2,-52(fp)
 80143e4:	1805883a 	mov	r2,r3
 80143e8:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 80143ec:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 80143f0:	e0bff117 	ldw	r2,-60(fp)
 80143f4:	1000021e 	bne	r2,zero,8014400 <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
 80143f8:	0005883a 	mov	r2,zero
 80143fc:	0000d606 	br	8014758 <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8014400:	e0bff417 	ldw	r2,-48(fp)
 8014404:	1000051e 	bne	r2,zero,801441c <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8014408:	e0bff117 	ldw	r2,-60(fp)
 801440c:	00c01b84 	movi	r3,110
 8014410:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8014414:	0005883a 	mov	r2,zero
 8014418:	0000cf06 	br	8014758 <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 801441c:	e0bff417 	ldw	r2,-48(fp)
 8014420:	10800003 	ldbu	r2,0(r2)
 8014424:	10803fcc 	andi	r2,r2,255
 8014428:	10800160 	cmpeqi	r2,r2,5
 801442c:	1000051e 	bne	r2,zero,8014444 <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
 8014430:	e0bff117 	ldw	r2,-60(fp)
 8014434:	00c00044 	movi	r3,1
 8014438:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 801443c:	0005883a 	mov	r2,zero
 8014440:	0000c506 	br	8014758 <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
 8014444:	0005303a 	rdctl	r2,status
 8014448:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801444c:	e0fffa17 	ldw	r3,-24(fp)
 8014450:	00bfff84 	movi	r2,-2
 8014454:	1884703a 	and	r2,r3,r2
 8014458:	1001703a 	wrctl	status,r2
  return context;
 801445c:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8014460:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
 8014464:	e0bff203 	ldbu	r2,-56(fp)
 8014468:	10000326 	beq	r2,zero,8014478 <OSFlagPost+0xb8>
 801446c:	10800060 	cmpeqi	r2,r2,1
 8014470:	10000b1e 	bne	r2,zero,80144a0 <OSFlagPost+0xe0>
 8014474:	00001206 	br	80144c0 <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 8014478:	e0bff417 	ldw	r2,-48(fp)
 801447c:	1080020b 	ldhu	r2,8(r2)
 8014480:	1007883a 	mov	r3,r2
 8014484:	e0bff30b 	ldhu	r2,-52(fp)
 8014488:	0084303a 	nor	r2,zero,r2
 801448c:	1884703a 	and	r2,r3,r2
 8014490:	1007883a 	mov	r3,r2
 8014494:	e0bff417 	ldw	r2,-48(fp)
 8014498:	10c0020d 	sth	r3,8(r2)
             break;
 801449c:	00001206 	br	80144e8 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 80144a0:	e0bff417 	ldw	r2,-48(fp)
 80144a4:	1080020b 	ldhu	r2,8(r2)
 80144a8:	e0fff30b 	ldhu	r3,-52(fp)
 80144ac:	1884b03a 	or	r2,r3,r2
 80144b0:	1007883a 	mov	r3,r2
 80144b4:	e0bff417 	ldw	r2,-48(fp)
 80144b8:	10c0020d 	sth	r3,8(r2)
             break;
 80144bc:	00000a06 	br	80144e8 <OSFlagPost+0x128>
 80144c0:	e0bffd17 	ldw	r2,-12(fp)
 80144c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80144c8:	e0bff917 	ldw	r2,-28(fp)
 80144cc:	1001703a 	wrctl	status,r2
}
 80144d0:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 80144d4:	e0bff117 	ldw	r2,-60(fp)
 80144d8:	00c01c44 	movi	r3,113
 80144dc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 80144e0:	0005883a 	mov	r2,zero
 80144e4:	00009c06 	br	8014758 <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 80144e8:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 80144ec:	e0bff417 	ldw	r2,-48(fp)
 80144f0:	10800117 	ldw	r2,4(r2)
 80144f4:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 80144f8:	00007906 	br	80146e0 <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
 80144fc:	e0bfff17 	ldw	r2,-4(fp)
 8014500:	10800483 	ldbu	r2,18(r2)
 8014504:	10803fcc 	andi	r2,r2,255
 8014508:	10c000e0 	cmpeqi	r3,r2,3
 801450c:	1800201e 	bne	r3,zero,8014590 <OSFlagPost+0x1d0>
 8014510:	10c00108 	cmpgei	r3,r2,4
 8014514:	18005e1e 	bne	r3,zero,8014690 <OSFlagPost+0x2d0>
 8014518:	10c000a0 	cmpeqi	r3,r2,2
 801451c:	1800061e 	bne	r3,zero,8014538 <OSFlagPost+0x178>
 8014520:	10c000c8 	cmpgei	r3,r2,3
 8014524:	18005a1e 	bne	r3,zero,8014690 <OSFlagPost+0x2d0>
 8014528:	10002c26 	beq	r2,zero,80145dc <OSFlagPost+0x21c>
 801452c:	10800060 	cmpeqi	r2,r2,1
 8014530:	1000421e 	bne	r2,zero,801463c <OSFlagPost+0x27c>
 8014534:	00005606 	br	8014690 <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8014538:	e0bff417 	ldw	r2,-48(fp)
 801453c:	10c0020b 	ldhu	r3,8(r2)
 8014540:	e0bfff17 	ldw	r2,-4(fp)
 8014544:	1080040b 	ldhu	r2,16(r2)
 8014548:	1884703a 	and	r2,r3,r2
 801454c:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 8014550:	e0bfff17 	ldw	r2,-4(fp)
 8014554:	1080040b 	ldhu	r2,16(r2)
 8014558:	e0fffc0b 	ldhu	r3,-16(fp)
 801455c:	10bfffcc 	andi	r2,r2,65535
 8014560:	1880551e 	bne	r3,r2,80146b8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8014564:	e0bffc0b 	ldhu	r2,-16(fp)
 8014568:	100b883a 	mov	r5,r2
 801456c:	e13fff17 	ldw	r4,-4(fp)
 8014570:	8014a780 	call	8014a78 <OS_FlagTaskRdy>
 8014574:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8014578:	e0bffbc3 	ldbu	r2,-17(fp)
 801457c:	10800058 	cmpnei	r2,r2,1
 8014580:	10004d1e 	bne	r2,zero,80146b8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8014584:	00800044 	movi	r2,1
 8014588:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 801458c:	00004a06 	br	80146b8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8014590:	e0bff417 	ldw	r2,-48(fp)
 8014594:	10c0020b 	ldhu	r3,8(r2)
 8014598:	e0bfff17 	ldw	r2,-4(fp)
 801459c:	1080040b 	ldhu	r2,16(r2)
 80145a0:	1884703a 	and	r2,r3,r2
 80145a4:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 80145a8:	e0bffc0b 	ldhu	r2,-16(fp)
 80145ac:	10004426 	beq	r2,zero,80146c0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80145b0:	e0bffc0b 	ldhu	r2,-16(fp)
 80145b4:	100b883a 	mov	r5,r2
 80145b8:	e13fff17 	ldw	r4,-4(fp)
 80145bc:	8014a780 	call	8014a78 <OS_FlagTaskRdy>
 80145c0:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 80145c4:	e0bffbc3 	ldbu	r2,-17(fp)
 80145c8:	10800058 	cmpnei	r2,r2,1
 80145cc:	10003c1e 	bne	r2,zero,80146c0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80145d0:	00800044 	movi	r2,1
 80145d4:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 80145d8:	00003906 	br	80146c0 <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80145dc:	e0bff417 	ldw	r2,-48(fp)
 80145e0:	1080020b 	ldhu	r2,8(r2)
 80145e4:	0084303a 	nor	r2,zero,r2
 80145e8:	1007883a 	mov	r3,r2
 80145ec:	e0bfff17 	ldw	r2,-4(fp)
 80145f0:	1080040b 	ldhu	r2,16(r2)
 80145f4:	1884703a 	and	r2,r3,r2
 80145f8:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 80145fc:	e0bfff17 	ldw	r2,-4(fp)
 8014600:	1080040b 	ldhu	r2,16(r2)
 8014604:	e0fffc0b 	ldhu	r3,-16(fp)
 8014608:	10bfffcc 	andi	r2,r2,65535
 801460c:	18802e1e 	bne	r3,r2,80146c8 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8014610:	e0bffc0b 	ldhu	r2,-16(fp)
 8014614:	100b883a 	mov	r5,r2
 8014618:	e13fff17 	ldw	r4,-4(fp)
 801461c:	8014a780 	call	8014a78 <OS_FlagTaskRdy>
 8014620:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8014624:	e0bffbc3 	ldbu	r2,-17(fp)
 8014628:	10800058 	cmpnei	r2,r2,1
 801462c:	1000261e 	bne	r2,zero,80146c8 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8014630:	00800044 	movi	r2,1
 8014634:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 8014638:	00002306 	br	80146c8 <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 801463c:	e0bff417 	ldw	r2,-48(fp)
 8014640:	1080020b 	ldhu	r2,8(r2)
 8014644:	0084303a 	nor	r2,zero,r2
 8014648:	1007883a 	mov	r3,r2
 801464c:	e0bfff17 	ldw	r2,-4(fp)
 8014650:	1080040b 	ldhu	r2,16(r2)
 8014654:	1884703a 	and	r2,r3,r2
 8014658:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 801465c:	e0bffc0b 	ldhu	r2,-16(fp)
 8014660:	10001b26 	beq	r2,zero,80146d0 <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8014664:	e0bffc0b 	ldhu	r2,-16(fp)
 8014668:	100b883a 	mov	r5,r2
 801466c:	e13fff17 	ldw	r4,-4(fp)
 8014670:	8014a780 	call	8014a78 <OS_FlagTaskRdy>
 8014674:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
 8014678:	e0bffbc3 	ldbu	r2,-17(fp)
 801467c:	10800058 	cmpnei	r2,r2,1
 8014680:	1000131e 	bne	r2,zero,80146d0 <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8014684:	00800044 	movi	r2,1
 8014688:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
 801468c:	00001006 	br	80146d0 <OSFlagPost+0x310>
 8014690:	e0bffd17 	ldw	r2,-12(fp)
 8014694:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8014698:	e0bff817 	ldw	r2,-32(fp)
 801469c:	1001703a 	wrctl	status,r2
}
 80146a0:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 80146a4:	e0bff117 	ldw	r2,-60(fp)
 80146a8:	00c01bc4 	movi	r3,111
 80146ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 80146b0:	0005883a 	mov	r2,zero
 80146b4:	00002806 	br	8014758 <OSFlagPost+0x398>
                 break;
 80146b8:	0001883a 	nop
 80146bc:	00000506 	br	80146d4 <OSFlagPost+0x314>
                 break;
 80146c0:	0001883a 	nop
 80146c4:	00000306 	br	80146d4 <OSFlagPost+0x314>
                 break;
 80146c8:	0001883a 	nop
 80146cc:	00000106 	br	80146d4 <OSFlagPost+0x314>
                 break;
 80146d0:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 80146d4:	e0bfff17 	ldw	r2,-4(fp)
 80146d8:	10800017 	ldw	r2,0(r2)
 80146dc:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 80146e0:	e0bfff17 	ldw	r2,-4(fp)
 80146e4:	103f851e 	bne	r2,zero,80144fc <OSFlagPost+0x13c>
 80146e8:	e0bffd17 	ldw	r2,-12(fp)
 80146ec:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80146f0:	e0bff717 	ldw	r2,-36(fp)
 80146f4:	1001703a 	wrctl	status,r2
}
 80146f8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 80146fc:	e0bffec3 	ldbu	r2,-5(fp)
 8014700:	10800058 	cmpnei	r2,r2,1
 8014704:	1000011e 	bne	r2,zero,801470c <OSFlagPost+0x34c>
        OS_Sched();
 8014708:	8012be80 	call	8012be8 <OS_Sched>
  NIOS2_READ_STATUS (context);
 801470c:	0005303a 	rdctl	r2,status
 8014710:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014714:	e0fff517 	ldw	r3,-44(fp)
 8014718:	00bfff84 	movi	r2,-2
 801471c:	1884703a 	and	r2,r3,r2
 8014720:	1001703a 	wrctl	status,r2
  return context;
 8014724:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
 8014728:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
 801472c:	e0bff417 	ldw	r2,-48(fp)
 8014730:	1080020b 	ldhu	r2,8(r2)
 8014734:	e0bffc8d 	sth	r2,-14(fp)
 8014738:	e0bffd17 	ldw	r2,-12(fp)
 801473c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8014740:	e0bff617 	ldw	r2,-40(fp)
 8014744:	1001703a 	wrctl	status,r2
}
 8014748:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 801474c:	e0bff117 	ldw	r2,-60(fp)
 8014750:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 8014754:	e0bffc8b 	ldhu	r2,-14(fp)
}
 8014758:	e037883a 	mov	sp,fp
 801475c:	dfc00117 	ldw	ra,4(sp)
 8014760:	df000017 	ldw	fp,0(sp)
 8014764:	dec00204 	addi	sp,sp,8
 8014768:	f800283a 	ret

0801476c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 801476c:	defff904 	addi	sp,sp,-28
 8014770:	df000615 	stw	fp,24(sp)
 8014774:	df000604 	addi	fp,sp,24
 8014778:	e13ffb15 	stw	r4,-20(fp)
 801477c:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 8014780:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 8014784:	e0bffa17 	ldw	r2,-24(fp)
 8014788:	1000021e 	bne	r2,zero,8014794 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 801478c:	0005883a 	mov	r2,zero
 8014790:	00002406 	br	8014824 <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 8014794:	e0bffb17 	ldw	r2,-20(fp)
 8014798:	1000051e 	bne	r2,zero,80147b0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 801479c:	e0bffa17 	ldw	r2,-24(fp)
 80147a0:	00c01b84 	movi	r3,110
 80147a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80147a8:	0005883a 	mov	r2,zero
 80147ac:	00001d06 	br	8014824 <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 80147b0:	e0bffb17 	ldw	r2,-20(fp)
 80147b4:	10800003 	ldbu	r2,0(r2)
 80147b8:	10803fcc 	andi	r2,r2,255
 80147bc:	10800160 	cmpeqi	r2,r2,5
 80147c0:	1000051e 	bne	r2,zero,80147d8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 80147c4:	e0bffa17 	ldw	r2,-24(fp)
 80147c8:	00c00044 	movi	r3,1
 80147cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80147d0:	0005883a 	mov	r2,zero
 80147d4:	00001306 	br	8014824 <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
 80147d8:	0005303a 	rdctl	r2,status
 80147dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80147e0:	e0fffc17 	ldw	r3,-16(fp)
 80147e4:	00bfff84 	movi	r2,-2
 80147e8:	1884703a 	and	r2,r3,r2
 80147ec:	1001703a 	wrctl	status,r2
  return context;
 80147f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80147f4:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
 80147f8:	e0bffb17 	ldw	r2,-20(fp)
 80147fc:	1080020b 	ldhu	r2,8(r2)
 8014800:	e0bffe8d 	sth	r2,-6(fp)
 8014804:	e0bfff17 	ldw	r2,-4(fp)
 8014808:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 801480c:	e0bffd17 	ldw	r2,-12(fp)
 8014810:	1001703a 	wrctl	status,r2
}
 8014814:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8014818:	e0bffa17 	ldw	r2,-24(fp)
 801481c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 8014820:	e0bffe8b 	ldhu	r2,-6(fp)
}
 8014824:	e037883a 	mov	sp,fp
 8014828:	df000017 	ldw	fp,0(sp)
 801482c:	dec00104 	addi	sp,sp,4
 8014830:	f800283a 	ret

08014834 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 8014834:	defff804 	addi	sp,sp,-32
 8014838:	df000715 	stw	fp,28(sp)
 801483c:	df000704 	addi	fp,sp,28
 8014840:	e13ffd15 	stw	r4,-12(fp)
 8014844:	e17ffc15 	stw	r5,-16(fp)
 8014848:	3007883a 	mov	r3,r6
 801484c:	3809883a 	mov	r4,r7
 8014850:	e0800117 	ldw	r2,4(fp)
 8014854:	e0fffb0d 	sth	r3,-20(fp)
 8014858:	2007883a 	mov	r3,r4
 801485c:	e0fffa05 	stb	r3,-24(fp)
 8014860:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8014864:	d0a07517 	ldw	r2,-32300(gp)
 8014868:	10c00c03 	ldbu	r3,48(r2)
 801486c:	d0a07517 	ldw	r2,-32300(gp)
 8014870:	18c00814 	ori	r3,r3,32
 8014874:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 8014878:	d0a07517 	ldw	r2,-32300(gp)
 801487c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 8014880:	d0a07517 	ldw	r2,-32300(gp)
 8014884:	e0fff90b 	ldhu	r3,-28(fp)
 8014888:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 801488c:	d0a07517 	ldw	r2,-32300(gp)
 8014890:	e0fffc17 	ldw	r3,-16(fp)
 8014894:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 8014898:	e0bffc17 	ldw	r2,-16(fp)
 801489c:	e0fffb0b 	ldhu	r3,-20(fp)
 80148a0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 80148a4:	e0bffc17 	ldw	r2,-16(fp)
 80148a8:	e0fffa03 	ldbu	r3,-24(fp)
 80148ac:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 80148b0:	d0e07517 	ldw	r3,-32300(gp)
 80148b4:	e0bffc17 	ldw	r2,-16(fp)
 80148b8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 80148bc:	e0bffd17 	ldw	r2,-12(fp)
 80148c0:	10c00117 	ldw	r3,4(r2)
 80148c4:	e0bffc17 	ldw	r2,-16(fp)
 80148c8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 80148cc:	e0bffc17 	ldw	r2,-16(fp)
 80148d0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 80148d4:	e0bffc17 	ldw	r2,-16(fp)
 80148d8:	e0fffd17 	ldw	r3,-12(fp)
 80148dc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 80148e0:	e0bffd17 	ldw	r2,-12(fp)
 80148e4:	10800117 	ldw	r2,4(r2)
 80148e8:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 80148ec:	e0bfff17 	ldw	r2,-4(fp)
 80148f0:	10000326 	beq	r2,zero,8014900 <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 80148f4:	e0bfff17 	ldw	r2,-4(fp)
 80148f8:	e0fffc17 	ldw	r3,-16(fp)
 80148fc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 8014900:	e0bffd17 	ldw	r2,-12(fp)
 8014904:	e0fffc17 	ldw	r3,-16(fp)
 8014908:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 801490c:	d0a07517 	ldw	r2,-32300(gp)
 8014910:	10800d03 	ldbu	r2,52(r2)
 8014914:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 8014918:	e0fffec3 	ldbu	r3,-5(fp)
 801491c:	d0a07244 	addi	r2,gp,-32311
 8014920:	1885883a 	add	r2,r3,r2
 8014924:	10800003 	ldbu	r2,0(r2)
 8014928:	1007883a 	mov	r3,r2
 801492c:	d0a07517 	ldw	r2,-32300(gp)
 8014930:	10800d43 	ldbu	r2,53(r2)
 8014934:	0084303a 	nor	r2,zero,r2
 8014938:	1884703a 	and	r2,r3,r2
 801493c:	e0fffec3 	ldbu	r3,-5(fp)
 8014940:	1009883a 	mov	r4,r2
 8014944:	d0a07244 	addi	r2,gp,-32311
 8014948:	1885883a 	add	r2,r3,r2
 801494c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 8014950:	e0fffec3 	ldbu	r3,-5(fp)
 8014954:	d0a07244 	addi	r2,gp,-32311
 8014958:	1885883a 	add	r2,r3,r2
 801495c:	10800003 	ldbu	r2,0(r2)
 8014960:	10803fcc 	andi	r2,r2,255
 8014964:	1000071e 	bne	r2,zero,8014984 <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 8014968:	d0a07517 	ldw	r2,-32300(gp)
 801496c:	10800d83 	ldbu	r2,54(r2)
 8014970:	0084303a 	nor	r2,zero,r2
 8014974:	1007883a 	mov	r3,r2
 8014978:	d0a07203 	ldbu	r2,-32312(gp)
 801497c:	1884703a 	and	r2,r3,r2
 8014980:	d0a07205 	stb	r2,-32312(gp)
    }
}
 8014984:	0001883a 	nop
 8014988:	e037883a 	mov	sp,fp
 801498c:	df000017 	ldw	fp,0(sp)
 8014990:	dec00104 	addi	sp,sp,4
 8014994:	f800283a 	ret

08014998 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8014998:	defffb04 	addi	sp,sp,-20
 801499c:	dfc00415 	stw	ra,16(sp)
 80149a0:	df000315 	stw	fp,12(sp)
 80149a4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 80149a8:	0140dc04 	movi	r5,880
 80149ac:	010201b4 	movhi	r4,2054
 80149b0:	212c9804 	addi	r4,r4,-19872
 80149b4:	8012b240 	call	8012b24 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 80149b8:	008201b4 	movhi	r2,2054
 80149bc:	10ac9804 	addi	r2,r2,-19872
 80149c0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 80149c4:	008201b4 	movhi	r2,2054
 80149c8:	10aca304 	addi	r2,r2,-19828
 80149cc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 80149d0:	e03fff8d 	sth	zero,-2(fp)
 80149d4:	00001306 	br	8014a24 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80149d8:	e0bffe17 	ldw	r2,-8(fp)
 80149dc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80149e0:	e0bffe17 	ldw	r2,-8(fp)
 80149e4:	e0fffd17 	ldw	r3,-12(fp)
 80149e8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 80149ec:	e0bffe17 	ldw	r2,-8(fp)
 80149f0:	00c00fc4 	movi	r3,63
 80149f4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 80149f8:	e0bffe17 	ldw	r2,-8(fp)
 80149fc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 8014a00:	e0bffe17 	ldw	r2,-8(fp)
 8014a04:	10800b04 	addi	r2,r2,44
 8014a08:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 8014a0c:	e0bffd17 	ldw	r2,-12(fp)
 8014a10:	10800b04 	addi	r2,r2,44
 8014a14:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 8014a18:	e0bfff8b 	ldhu	r2,-2(fp)
 8014a1c:	10800044 	addi	r2,r2,1
 8014a20:	e0bfff8d 	sth	r2,-2(fp)
 8014a24:	e0bfff8b 	ldhu	r2,-2(fp)
 8014a28:	108004f0 	cmpltui	r2,r2,19
 8014a2c:	103fea1e 	bne	r2,zero,80149d8 <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8014a30:	e0bffe17 	ldw	r2,-8(fp)
 8014a34:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 8014a38:	e0bffe17 	ldw	r2,-8(fp)
 8014a3c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 8014a40:	e0bffe17 	ldw	r2,-8(fp)
 8014a44:	00c00fc4 	movi	r3,63
 8014a48:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 8014a4c:	e0bffe17 	ldw	r2,-8(fp)
 8014a50:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8014a54:	008201b4 	movhi	r2,2054
 8014a58:	10ac9804 	addi	r2,r2,-19872
 8014a5c:	d0a07715 	stw	r2,-32292(gp)
#endif
}
 8014a60:	0001883a 	nop
 8014a64:	e037883a 	mov	sp,fp
 8014a68:	dfc00117 	ldw	ra,4(sp)
 8014a6c:	df000017 	ldw	fp,0(sp)
 8014a70:	dec00204 	addi	sp,sp,8
 8014a74:	f800283a 	ret

08014a78 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 8014a78:	defffa04 	addi	sp,sp,-24
 8014a7c:	dfc00515 	stw	ra,20(sp)
 8014a80:	df000415 	stw	fp,16(sp)
 8014a84:	df000404 	addi	fp,sp,16
 8014a88:	e13ffd15 	stw	r4,-12(fp)
 8014a8c:	2805883a 	mov	r2,r5
 8014a90:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 8014a94:	e0bffd17 	ldw	r2,-12(fp)
 8014a98:	10800217 	ldw	r2,8(r2)
 8014a9c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
 8014aa0:	e0bffe17 	ldw	r2,-8(fp)
 8014aa4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8014aa8:	e0bffe17 	ldw	r2,-8(fp)
 8014aac:	e0fffc0b 	ldhu	r3,-16(fp)
 8014ab0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 8014ab4:	e0bffe17 	ldw	r2,-8(fp)
 8014ab8:	10c00c03 	ldbu	r3,48(r2)
 8014abc:	00bff7c4 	movi	r2,-33
 8014ac0:	1884703a 	and	r2,r3,r2
 8014ac4:	1007883a 	mov	r3,r2
 8014ac8:	e0bffe17 	ldw	r2,-8(fp)
 8014acc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 8014ad0:	e0bffe17 	ldw	r2,-8(fp)
 8014ad4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8014ad8:	e0bffe17 	ldw	r2,-8(fp)
 8014adc:	10800c03 	ldbu	r2,48(r2)
 8014ae0:	10803fcc 	andi	r2,r2,255
 8014ae4:	1000181e 	bne	r2,zero,8014b48 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8014ae8:	e0bffe17 	ldw	r2,-8(fp)
 8014aec:	10c00d83 	ldbu	r3,54(r2)
 8014af0:	d0a07203 	ldbu	r2,-32312(gp)
 8014af4:	1884b03a 	or	r2,r3,r2
 8014af8:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8014afc:	e0bffe17 	ldw	r2,-8(fp)
 8014b00:	10800d03 	ldbu	r2,52(r2)
 8014b04:	10c03fcc 	andi	r3,r2,255
 8014b08:	d0a07244 	addi	r2,gp,-32311
 8014b0c:	1885883a 	add	r2,r3,r2
 8014b10:	11000003 	ldbu	r4,0(r2)
 8014b14:	e0bffe17 	ldw	r2,-8(fp)
 8014b18:	10800d43 	ldbu	r2,53(r2)
 8014b1c:	e0fffe17 	ldw	r3,-8(fp)
 8014b20:	18c00d03 	ldbu	r3,52(r3)
 8014b24:	18c03fcc 	andi	r3,r3,255
 8014b28:	2084b03a 	or	r2,r4,r2
 8014b2c:	1009883a 	mov	r4,r2
 8014b30:	d0a07244 	addi	r2,gp,-32311
 8014b34:	1885883a 	add	r2,r3,r2
 8014b38:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 8014b3c:	00800044 	movi	r2,1
 8014b40:	e0bfffc5 	stb	r2,-1(fp)
 8014b44:	00000106 	br	8014b4c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 8014b48:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
 8014b4c:	e13ffd17 	ldw	r4,-12(fp)
 8014b50:	8014b6c0 	call	8014b6c <OS_FlagUnlink>
    return (sched);
 8014b54:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8014b58:	e037883a 	mov	sp,fp
 8014b5c:	dfc00117 	ldw	ra,4(sp)
 8014b60:	df000017 	ldw	fp,0(sp)
 8014b64:	dec00204 	addi	sp,sp,8
 8014b68:	f800283a 	ret

08014b6c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8014b6c:	defffa04 	addi	sp,sp,-24
 8014b70:	df000515 	stw	fp,20(sp)
 8014b74:	df000504 	addi	fp,sp,20
 8014b78:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8014b7c:	e0bffb17 	ldw	r2,-20(fp)
 8014b80:	10800117 	ldw	r2,4(r2)
 8014b84:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8014b88:	e0bffb17 	ldw	r2,-20(fp)
 8014b8c:	10800017 	ldw	r2,0(r2)
 8014b90:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8014b94:	e0bfff17 	ldw	r2,-4(fp)
 8014b98:	10000b1e 	bne	r2,zero,8014bc8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8014b9c:	e0bffb17 	ldw	r2,-20(fp)
 8014ba0:	10800317 	ldw	r2,12(r2)
 8014ba4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8014ba8:	e0bffd17 	ldw	r2,-12(fp)
 8014bac:	e0fffe17 	ldw	r3,-8(fp)
 8014bb0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8014bb4:	e0bffe17 	ldw	r2,-8(fp)
 8014bb8:	10000b26 	beq	r2,zero,8014be8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8014bbc:	e0bffe17 	ldw	r2,-8(fp)
 8014bc0:	10000115 	stw	zero,4(r2)
 8014bc4:	00000806 	br	8014be8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8014bc8:	e0bfff17 	ldw	r2,-4(fp)
 8014bcc:	e0fffe17 	ldw	r3,-8(fp)
 8014bd0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8014bd4:	e0bffe17 	ldw	r2,-8(fp)
 8014bd8:	10000326 	beq	r2,zero,8014be8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8014bdc:	e0bffe17 	ldw	r2,-8(fp)
 8014be0:	e0ffff17 	ldw	r3,-4(fp)
 8014be4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8014be8:	e0bffb17 	ldw	r2,-20(fp)
 8014bec:	10800217 	ldw	r2,8(r2)
 8014bf0:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8014bf4:	e0bffc17 	ldw	r2,-16(fp)
 8014bf8:	10000a15 	stw	zero,40(r2)
#endif
}
 8014bfc:	0001883a 	nop
 8014c00:	e037883a 	mov	sp,fp
 8014c04:	df000017 	ldw	fp,0(sp)
 8014c08:	dec00104 	addi	sp,sp,4
 8014c0c:	f800283a 	ret

08014c10 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 8014c10:	defff404 	addi	sp,sp,-48
 8014c14:	df000b15 	stw	fp,44(sp)
 8014c18:	df000b04 	addi	fp,sp,44
 8014c1c:	e13ff815 	stw	r4,-32(fp)
 8014c20:	e17ff715 	stw	r5,-36(fp)
 8014c24:	e1bff615 	stw	r6,-40(fp)
 8014c28:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8014c2c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8014c30:	e0bff517 	ldw	r2,-44(fp)
 8014c34:	1000021e 	bne	r2,zero,8014c40 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 8014c38:	0005883a 	mov	r2,zero
 8014c3c:	00006606 	br	8014dd8 <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 8014c40:	e0bff817 	ldw	r2,-32(fp)
 8014c44:	1000051e 	bne	r2,zero,8014c5c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 8014c48:	e0bff517 	ldw	r2,-44(fp)
 8014c4c:	00c01884 	movi	r3,98
 8014c50:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8014c54:	0005883a 	mov	r2,zero
 8014c58:	00005f06 	br	8014dd8 <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 8014c5c:	e0bff817 	ldw	r2,-32(fp)
 8014c60:	108000cc 	andi	r2,r2,3
 8014c64:	10000526 	beq	r2,zero,8014c7c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 8014c68:	e0bff517 	ldw	r2,-44(fp)
 8014c6c:	00c01884 	movi	r3,98
 8014c70:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8014c74:	0005883a 	mov	r2,zero
 8014c78:	00005706 	br	8014dd8 <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 8014c7c:	e0bff717 	ldw	r2,-36(fp)
 8014c80:	108000a8 	cmpgeui	r2,r2,2
 8014c84:	1000051e 	bne	r2,zero,8014c9c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 8014c88:	e0bff517 	ldw	r2,-44(fp)
 8014c8c:	00c016c4 	movi	r3,91
 8014c90:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8014c94:	0005883a 	mov	r2,zero
 8014c98:	00004f06 	br	8014dd8 <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 8014c9c:	e0bff617 	ldw	r2,-40(fp)
 8014ca0:	10800128 	cmpgeui	r2,r2,4
 8014ca4:	1000051e 	bne	r2,zero,8014cbc <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 8014ca8:	e0bff517 	ldw	r2,-44(fp)
 8014cac:	00c01704 	movi	r3,92
 8014cb0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8014cb4:	0005883a 	mov	r2,zero
 8014cb8:	00004706 	br	8014dd8 <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
 8014cbc:	0005303a 	rdctl	r2,status
 8014cc0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014cc4:	e0fffa17 	ldw	r3,-24(fp)
 8014cc8:	00bfff84 	movi	r2,-2
 8014ccc:	1884703a 	and	r2,r3,r2
 8014cd0:	1001703a 	wrctl	status,r2
  return context;
 8014cd4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8014cd8:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 8014cdc:	d0a06f17 	ldw	r2,-32324(gp)
 8014ce0:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 8014ce4:	d0a06f17 	ldw	r2,-32324(gp)
 8014ce8:	10000326 	beq	r2,zero,8014cf8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 8014cec:	d0a06f17 	ldw	r2,-32324(gp)
 8014cf0:	10800117 	ldw	r2,4(r2)
 8014cf4:	d0a06f15 	stw	r2,-32324(gp)
 8014cf8:	e0bffc17 	ldw	r2,-16(fp)
 8014cfc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8014d00:	e0bff917 	ldw	r2,-28(fp)
 8014d04:	1001703a 	wrctl	status,r2
}
 8014d08:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 8014d0c:	e0bffb17 	ldw	r2,-20(fp)
 8014d10:	1000051e 	bne	r2,zero,8014d28 <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
 8014d14:	e0bff517 	ldw	r2,-44(fp)
 8014d18:	00c01684 	movi	r3,90
 8014d1c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8014d20:	0005883a 	mov	r2,zero
 8014d24:	00002c06 	br	8014dd8 <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 8014d28:	e0bff817 	ldw	r2,-32(fp)
 8014d2c:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 8014d30:	e0fff817 	ldw	r3,-32(fp)
 8014d34:	e0bff617 	ldw	r2,-40(fp)
 8014d38:	1885883a 	add	r2,r3,r2
 8014d3c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8014d40:	e03ffd15 	stw	zero,-12(fp)
 8014d44:	00000c06 	br	8014d78 <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 8014d48:	e0bffe17 	ldw	r2,-8(fp)
 8014d4c:	e0ffff17 	ldw	r3,-4(fp)
 8014d50:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 8014d54:	e0bfff17 	ldw	r2,-4(fp)
 8014d58:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 8014d5c:	e0ffff17 	ldw	r3,-4(fp)
 8014d60:	e0bff617 	ldw	r2,-40(fp)
 8014d64:	1885883a 	add	r2,r3,r2
 8014d68:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8014d6c:	e0bffd17 	ldw	r2,-12(fp)
 8014d70:	10800044 	addi	r2,r2,1
 8014d74:	e0bffd15 	stw	r2,-12(fp)
 8014d78:	e0bff717 	ldw	r2,-36(fp)
 8014d7c:	10bfffc4 	addi	r2,r2,-1
 8014d80:	e0fffd17 	ldw	r3,-12(fp)
 8014d84:	18bff036 	bltu	r3,r2,8014d48 <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 8014d88:	e0bffe17 	ldw	r2,-8(fp)
 8014d8c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 8014d90:	e0bffb17 	ldw	r2,-20(fp)
 8014d94:	e0fff817 	ldw	r3,-32(fp)
 8014d98:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 8014d9c:	e0bffb17 	ldw	r2,-20(fp)
 8014da0:	e0fff817 	ldw	r3,-32(fp)
 8014da4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 8014da8:	e0bffb17 	ldw	r2,-20(fp)
 8014dac:	e0fff717 	ldw	r3,-36(fp)
 8014db0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 8014db4:	e0bffb17 	ldw	r2,-20(fp)
 8014db8:	e0fff717 	ldw	r3,-36(fp)
 8014dbc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 8014dc0:	e0bffb17 	ldw	r2,-20(fp)
 8014dc4:	e0fff617 	ldw	r3,-40(fp)
 8014dc8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 8014dcc:	e0bff517 	ldw	r2,-44(fp)
 8014dd0:	10000005 	stb	zero,0(r2)
    return (pmem);
 8014dd4:	e0bffb17 	ldw	r2,-20(fp)
}
 8014dd8:	e037883a 	mov	sp,fp
 8014ddc:	df000017 	ldw	fp,0(sp)
 8014de0:	dec00104 	addi	sp,sp,4
 8014de4:	f800283a 	ret

08014de8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 8014de8:	defff804 	addi	sp,sp,-32
 8014dec:	df000715 	stw	fp,28(sp)
 8014df0:	df000704 	addi	fp,sp,28
 8014df4:	e13ffa15 	stw	r4,-24(fp)
 8014df8:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8014dfc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8014e00:	e0bff917 	ldw	r2,-28(fp)
 8014e04:	1000021e 	bne	r2,zero,8014e10 <OSMemGet+0x28>
        return ((void *)0);
 8014e08:	0005883a 	mov	r2,zero
 8014e0c:	00003006 	br	8014ed0 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 8014e10:	e0bffa17 	ldw	r2,-24(fp)
 8014e14:	1000051e 	bne	r2,zero,8014e2c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8014e18:	e0bff917 	ldw	r2,-28(fp)
 8014e1c:	00c01804 	movi	r3,96
 8014e20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8014e24:	0005883a 	mov	r2,zero
 8014e28:	00002906 	br	8014ed0 <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
 8014e2c:	0005303a 	rdctl	r2,status
 8014e30:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014e34:	e0fffd17 	ldw	r3,-12(fp)
 8014e38:	00bfff84 	movi	r2,-2
 8014e3c:	1884703a 	and	r2,r3,r2
 8014e40:	1001703a 	wrctl	status,r2
  return context;
 8014e44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8014e48:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 8014e4c:	e0bffa17 	ldw	r2,-24(fp)
 8014e50:	10800417 	ldw	r2,16(r2)
 8014e54:	10001526 	beq	r2,zero,8014eac <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 8014e58:	e0bffa17 	ldw	r2,-24(fp)
 8014e5c:	10800117 	ldw	r2,4(r2)
 8014e60:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 8014e64:	e0bffe17 	ldw	r2,-8(fp)
 8014e68:	10c00017 	ldw	r3,0(r2)
 8014e6c:	e0bffa17 	ldw	r2,-24(fp)
 8014e70:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 8014e74:	e0bffa17 	ldw	r2,-24(fp)
 8014e78:	10800417 	ldw	r2,16(r2)
 8014e7c:	10ffffc4 	addi	r3,r2,-1
 8014e80:	e0bffa17 	ldw	r2,-24(fp)
 8014e84:	10c00415 	stw	r3,16(r2)
 8014e88:	e0bfff17 	ldw	r2,-4(fp)
 8014e8c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8014e90:	e0bffc17 	ldw	r2,-16(fp)
 8014e94:	1001703a 	wrctl	status,r2
}
 8014e98:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 8014e9c:	e0bff917 	ldw	r2,-28(fp)
 8014ea0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 8014ea4:	e0bffe17 	ldw	r2,-8(fp)
 8014ea8:	00000906 	br	8014ed0 <OSMemGet+0xe8>
 8014eac:	e0bfff17 	ldw	r2,-4(fp)
 8014eb0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8014eb4:	e0bffb17 	ldw	r2,-20(fp)
 8014eb8:	1001703a 	wrctl	status,r2
}
 8014ebc:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 8014ec0:	e0bff917 	ldw	r2,-28(fp)
 8014ec4:	00c01744 	movi	r3,93
 8014ec8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 8014ecc:	0005883a 	mov	r2,zero
}
 8014ed0:	e037883a 	mov	sp,fp
 8014ed4:	df000017 	ldw	fp,0(sp)
 8014ed8:	dec00104 	addi	sp,sp,4
 8014edc:	f800283a 	ret

08014ee0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8014ee0:	defff704 	addi	sp,sp,-36
 8014ee4:	dfc00815 	stw	ra,32(sp)
 8014ee8:	df000715 	stw	fp,28(sp)
 8014eec:	df000704 	addi	fp,sp,28
 8014ef0:	e13ffb15 	stw	r4,-20(fp)
 8014ef4:	e17ffa15 	stw	r5,-24(fp)
 8014ef8:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8014efc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8014f00:	e0bff917 	ldw	r2,-28(fp)
 8014f04:	1000021e 	bne	r2,zero,8014f10 <OSMemNameGet+0x30>
        return (0);
 8014f08:	0005883a 	mov	r2,zero
 8014f0c:	00002c06 	br	8014fc0 <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8014f10:	e0bffb17 	ldw	r2,-20(fp)
 8014f14:	1000051e 	bne	r2,zero,8014f2c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8014f18:	e0bff917 	ldw	r2,-28(fp)
 8014f1c:	00c01804 	movi	r3,96
 8014f20:	10c00005 	stb	r3,0(r2)
        return (0);
 8014f24:	0005883a 	mov	r2,zero
 8014f28:	00002506 	br	8014fc0 <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8014f2c:	e0bffa17 	ldw	r2,-24(fp)
 8014f30:	1000051e 	bne	r2,zero,8014f48 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8014f34:	e0bff917 	ldw	r2,-28(fp)
 8014f38:	00c00304 	movi	r3,12
 8014f3c:	10c00005 	stb	r3,0(r2)
        return (0);
 8014f40:	0005883a 	mov	r2,zero
 8014f44:	00001e06 	br	8014fc0 <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8014f48:	d0a07403 	ldbu	r2,-32304(gp)
 8014f4c:	10803fcc 	andi	r2,r2,255
 8014f50:	10000526 	beq	r2,zero,8014f68 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 8014f54:	e0bff917 	ldw	r2,-28(fp)
 8014f58:	00c00444 	movi	r3,17
 8014f5c:	10c00005 	stb	r3,0(r2)
        return (0);
 8014f60:	0005883a 	mov	r2,zero
 8014f64:	00001606 	br	8014fc0 <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
 8014f68:	0005303a 	rdctl	r2,status
 8014f6c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014f70:	e0fffc17 	ldw	r3,-16(fp)
 8014f74:	00bfff84 	movi	r2,-2
 8014f78:	1884703a 	and	r2,r3,r2
 8014f7c:	1001703a 	wrctl	status,r2
  return context;
 8014f80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8014f84:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 8014f88:	e0bffb17 	ldw	r2,-20(fp)
 8014f8c:	10800504 	addi	r2,r2,20
 8014f90:	100b883a 	mov	r5,r2
 8014f94:	e13ffa17 	ldw	r4,-24(fp)
 8014f98:	8012d200 	call	8012d20 <OS_StrCopy>
 8014f9c:	e0bffec5 	stb	r2,-5(fp)
 8014fa0:	e0bfff17 	ldw	r2,-4(fp)
 8014fa4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8014fa8:	e0bffd17 	ldw	r2,-12(fp)
 8014fac:	1001703a 	wrctl	status,r2
}
 8014fb0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8014fb4:	e0bff917 	ldw	r2,-28(fp)
 8014fb8:	10000005 	stb	zero,0(r2)
    return (len);
 8014fbc:	e0bffec3 	ldbu	r2,-5(fp)
}
 8014fc0:	e037883a 	mov	sp,fp
 8014fc4:	dfc00117 	ldw	ra,4(sp)
 8014fc8:	df000017 	ldw	fp,0(sp)
 8014fcc:	dec00204 	addi	sp,sp,8
 8014fd0:	f800283a 	ret

08014fd4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8014fd4:	defff604 	addi	sp,sp,-40
 8014fd8:	dfc00915 	stw	ra,36(sp)
 8014fdc:	df000815 	stw	fp,32(sp)
 8014fe0:	df000804 	addi	fp,sp,32
 8014fe4:	e13ffa15 	stw	r4,-24(fp)
 8014fe8:	e17ff915 	stw	r5,-28(fp)
 8014fec:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8014ff0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8014ff4:	e0bff817 	ldw	r2,-32(fp)
 8014ff8:	10003726 	beq	r2,zero,80150d8 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8014ffc:	e0bffa17 	ldw	r2,-24(fp)
 8015000:	1000041e 	bne	r2,zero,8015014 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8015004:	e0bff817 	ldw	r2,-32(fp)
 8015008:	00c01804 	movi	r3,96
 801500c:	10c00005 	stb	r3,0(r2)
        return;
 8015010:	00003206 	br	80150dc <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8015014:	e0bff917 	ldw	r2,-28(fp)
 8015018:	1000041e 	bne	r2,zero,801502c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 801501c:	e0bff817 	ldw	r2,-32(fp)
 8015020:	00c00304 	movi	r3,12
 8015024:	10c00005 	stb	r3,0(r2)
        return;
 8015028:	00002c06 	br	80150dc <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 801502c:	d0a07403 	ldbu	r2,-32304(gp)
 8015030:	10803fcc 	andi	r2,r2,255
 8015034:	10000426 	beq	r2,zero,8015048 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 8015038:	e0bff817 	ldw	r2,-32(fp)
 801503c:	00c00484 	movi	r3,18
 8015040:	10c00005 	stb	r3,0(r2)
        return;
 8015044:	00002506 	br	80150dc <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
 8015048:	0005303a 	rdctl	r2,status
 801504c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015050:	e0fffd17 	ldw	r3,-12(fp)
 8015054:	00bfff84 	movi	r2,-2
 8015058:	1884703a 	and	r2,r3,r2
 801505c:	1001703a 	wrctl	status,r2
  return context;
 8015060:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8015064:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8015068:	e13ff917 	ldw	r4,-28(fp)
 801506c:	8012d940 	call	8012d94 <OS_StrLen>
 8015070:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 8015074:	e0bffec3 	ldbu	r2,-5(fp)
 8015078:	10800830 	cmpltui	r2,r2,32
 801507c:	1000091e 	bne	r2,zero,80150a4 <OSMemNameSet+0xd0>
 8015080:	e0bfff17 	ldw	r2,-4(fp)
 8015084:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015088:	e0bffc17 	ldw	r2,-16(fp)
 801508c:	1001703a 	wrctl	status,r2
}
 8015090:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 8015094:	e0bff817 	ldw	r2,-32(fp)
 8015098:	00c018c4 	movi	r3,99
 801509c:	10c00005 	stb	r3,0(r2)
        return;
 80150a0:	00000e06 	br	80150dc <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 80150a4:	e0bffa17 	ldw	r2,-24(fp)
 80150a8:	10800504 	addi	r2,r2,20
 80150ac:	e17ff917 	ldw	r5,-28(fp)
 80150b0:	1009883a 	mov	r4,r2
 80150b4:	8012d200 	call	8012d20 <OS_StrCopy>
 80150b8:	e0bfff17 	ldw	r2,-4(fp)
 80150bc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80150c0:	e0bffb17 	ldw	r2,-20(fp)
 80150c4:	1001703a 	wrctl	status,r2
}
 80150c8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 80150cc:	e0bff817 	ldw	r2,-32(fp)
 80150d0:	10000005 	stb	zero,0(r2)
 80150d4:	00000106 	br	80150dc <OSMemNameSet+0x108>
        return;
 80150d8:	0001883a 	nop
}
 80150dc:	e037883a 	mov	sp,fp
 80150e0:	dfc00117 	ldw	ra,4(sp)
 80150e4:	df000017 	ldw	fp,0(sp)
 80150e8:	dec00204 	addi	sp,sp,8
 80150ec:	f800283a 	ret

080150f0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 80150f0:	defff904 	addi	sp,sp,-28
 80150f4:	df000615 	stw	fp,24(sp)
 80150f8:	df000604 	addi	fp,sp,24
 80150fc:	e13ffb15 	stw	r4,-20(fp)
 8015100:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015104:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8015108:	e0bffb17 	ldw	r2,-20(fp)
 801510c:	1000021e 	bne	r2,zero,8015118 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8015110:	00801804 	movi	r2,96
 8015114:	00002a06 	br	80151c0 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 8015118:	e0bffa17 	ldw	r2,-24(fp)
 801511c:	1000021e 	bne	r2,zero,8015128 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 8015120:	008017c4 	movi	r2,95
 8015124:	00002606 	br	80151c0 <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
 8015128:	0005303a 	rdctl	r2,status
 801512c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015130:	e0fffe17 	ldw	r3,-8(fp)
 8015134:	00bfff84 	movi	r2,-2
 8015138:	1884703a 	and	r2,r3,r2
 801513c:	1001703a 	wrctl	status,r2
  return context;
 8015140:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015144:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 8015148:	e0bffb17 	ldw	r2,-20(fp)
 801514c:	10c00417 	ldw	r3,16(r2)
 8015150:	e0bffb17 	ldw	r2,-20(fp)
 8015154:	10800317 	ldw	r2,12(r2)
 8015158:	18800736 	bltu	r3,r2,8015178 <OSMemPut+0x88>
 801515c:	e0bfff17 	ldw	r2,-4(fp)
 8015160:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8015164:	e0bffd17 	ldw	r2,-12(fp)
 8015168:	1001703a 	wrctl	status,r2
}
 801516c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 8015170:	00801784 	movi	r2,94
 8015174:	00001206 	br	80151c0 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 8015178:	e0bffb17 	ldw	r2,-20(fp)
 801517c:	10c00117 	ldw	r3,4(r2)
 8015180:	e0bffa17 	ldw	r2,-24(fp)
 8015184:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 8015188:	e0bffb17 	ldw	r2,-20(fp)
 801518c:	e0fffa17 	ldw	r3,-24(fp)
 8015190:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 8015194:	e0bffb17 	ldw	r2,-20(fp)
 8015198:	10800417 	ldw	r2,16(r2)
 801519c:	10c00044 	addi	r3,r2,1
 80151a0:	e0bffb17 	ldw	r2,-20(fp)
 80151a4:	10c00415 	stw	r3,16(r2)
 80151a8:	e0bfff17 	ldw	r2,-4(fp)
 80151ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80151b0:	e0bffc17 	ldw	r2,-16(fp)
 80151b4:	1001703a 	wrctl	status,r2
}
 80151b8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 80151bc:	0005883a 	mov	r2,zero
}
 80151c0:	e037883a 	mov	sp,fp
 80151c4:	df000017 	ldw	fp,0(sp)
 80151c8:	dec00104 	addi	sp,sp,4
 80151cc:	f800283a 	ret

080151d0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 80151d0:	defffa04 	addi	sp,sp,-24
 80151d4:	df000515 	stw	fp,20(sp)
 80151d8:	df000504 	addi	fp,sp,20
 80151dc:	e13ffc15 	stw	r4,-16(fp)
 80151e0:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80151e4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 80151e8:	e0bffc17 	ldw	r2,-16(fp)
 80151ec:	1000021e 	bne	r2,zero,80151f8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 80151f0:	00801804 	movi	r2,96
 80151f4:	00002d06 	br	80152ac <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 80151f8:	e0bffb17 	ldw	r2,-20(fp)
 80151fc:	1000021e 	bne	r2,zero,8015208 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 8015200:	00801844 	movi	r2,97
 8015204:	00002906 	br	80152ac <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
 8015208:	0005303a 	rdctl	r2,status
 801520c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015210:	e0fffd17 	ldw	r3,-12(fp)
 8015214:	00bfff84 	movi	r2,-2
 8015218:	1884703a 	and	r2,r3,r2
 801521c:	1001703a 	wrctl	status,r2
  return context;
 8015220:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015224:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 8015228:	e0bffc17 	ldw	r2,-16(fp)
 801522c:	10c00017 	ldw	r3,0(r2)
 8015230:	e0bffb17 	ldw	r2,-20(fp)
 8015234:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 8015238:	e0bffc17 	ldw	r2,-16(fp)
 801523c:	10c00117 	ldw	r3,4(r2)
 8015240:	e0bffb17 	ldw	r2,-20(fp)
 8015244:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 8015248:	e0bffc17 	ldw	r2,-16(fp)
 801524c:	10c00217 	ldw	r3,8(r2)
 8015250:	e0bffb17 	ldw	r2,-20(fp)
 8015254:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 8015258:	e0bffc17 	ldw	r2,-16(fp)
 801525c:	10c00317 	ldw	r3,12(r2)
 8015260:	e0bffb17 	ldw	r2,-20(fp)
 8015264:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 8015268:	e0bffc17 	ldw	r2,-16(fp)
 801526c:	10c00417 	ldw	r3,16(r2)
 8015270:	e0bffb17 	ldw	r2,-20(fp)
 8015274:	10c00415 	stw	r3,16(r2)
 8015278:	e0bfff17 	ldw	r2,-4(fp)
 801527c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8015280:	e0bffe17 	ldw	r2,-8(fp)
 8015284:	1001703a 	wrctl	status,r2
}
 8015288:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 801528c:	e0bffb17 	ldw	r2,-20(fp)
 8015290:	10c00317 	ldw	r3,12(r2)
 8015294:	e0bffb17 	ldw	r2,-20(fp)
 8015298:	10800417 	ldw	r2,16(r2)
 801529c:	1887c83a 	sub	r3,r3,r2
 80152a0:	e0bffb17 	ldw	r2,-20(fp)
 80152a4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 80152a8:	0005883a 	mov	r2,zero
}
 80152ac:	e037883a 	mov	sp,fp
 80152b0:	df000017 	ldw	fp,0(sp)
 80152b4:	dec00104 	addi	sp,sp,4
 80152b8:	f800283a 	ret

080152bc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 80152bc:	defffc04 	addi	sp,sp,-16
 80152c0:	dfc00315 	stw	ra,12(sp)
 80152c4:	df000215 	stw	fp,8(sp)
 80152c8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 80152cc:	01430c04 	movi	r5,3120
 80152d0:	010201b4 	movhi	r4,2054
 80152d4:	212d7404 	addi	r4,r4,-18992
 80152d8:	8012b240 	call	8012b24 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 80152dc:	008201b4 	movhi	r2,2054
 80152e0:	10ad7404 	addi	r2,r2,-18992
 80152e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 80152e8:	e03ffe8d 	sth	zero,-6(fp)
 80152ec:	00001306 	br	801533c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 80152f0:	e0bffe8b 	ldhu	r2,-6(fp)
 80152f4:	10800044 	addi	r2,r2,1
 80152f8:	10c00d24 	muli	r3,r2,52
 80152fc:	008201b4 	movhi	r2,2054
 8015300:	10ad7404 	addi	r2,r2,-18992
 8015304:	1887883a 	add	r3,r3,r2
 8015308:	e0bfff17 	ldw	r2,-4(fp)
 801530c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 8015310:	e0bfff17 	ldw	r2,-4(fp)
 8015314:	00c00fc4 	movi	r3,63
 8015318:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 801531c:	e0bfff17 	ldw	r2,-4(fp)
 8015320:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 8015324:	e0bfff17 	ldw	r2,-4(fp)
 8015328:	10800d04 	addi	r2,r2,52
 801532c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 8015330:	e0bffe8b 	ldhu	r2,-6(fp)
 8015334:	10800044 	addi	r2,r2,1
 8015338:	e0bffe8d 	sth	r2,-6(fp)
 801533c:	e0bffe8b 	ldhu	r2,-6(fp)
 8015340:	10800ef0 	cmpltui	r2,r2,59
 8015344:	103fea1e 	bne	r2,zero,80152f0 <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8015348:	e0bfff17 	ldw	r2,-4(fp)
 801534c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 8015350:	e0bfff17 	ldw	r2,-4(fp)
 8015354:	00c00fc4 	movi	r3,63
 8015358:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 801535c:	e0bfff17 	ldw	r2,-4(fp)
 8015360:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 8015364:	008201b4 	movhi	r2,2054
 8015368:	10ad7404 	addi	r2,r2,-18992
 801536c:	d0a06f15 	stw	r2,-32324(gp)
#endif
}
 8015370:	0001883a 	nop
 8015374:	e037883a 	mov	sp,fp
 8015378:	dfc00117 	ldw	ra,4(sp)
 801537c:	df000017 	ldw	fp,0(sp)
 8015380:	dec00204 	addi	sp,sp,8
 8015384:	f800283a 	ret

08015388 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 8015388:	defff804 	addi	sp,sp,-32
 801538c:	df000715 	stw	fp,28(sp)
 8015390:	df000704 	addi	fp,sp,28
 8015394:	e13ffa15 	stw	r4,-24(fp)
 8015398:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 801539c:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80153a0:	e0bff917 	ldw	r2,-28(fp)
 80153a4:	1000021e 	bne	r2,zero,80153b0 <OSQAccept+0x28>
        return ((void *)0);
 80153a8:	0005883a 	mov	r2,zero
 80153ac:	00004306 	br	80154bc <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 80153b0:	e0bffa17 	ldw	r2,-24(fp)
 80153b4:	1000051e 	bne	r2,zero,80153cc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 80153b8:	e0bff917 	ldw	r2,-28(fp)
 80153bc:	00c00104 	movi	r3,4
 80153c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80153c4:	0005883a 	mov	r2,zero
 80153c8:	00003c06 	br	80154bc <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 80153cc:	e0bffa17 	ldw	r2,-24(fp)
 80153d0:	10800003 	ldbu	r2,0(r2)
 80153d4:	10803fcc 	andi	r2,r2,255
 80153d8:	108000a0 	cmpeqi	r2,r2,2
 80153dc:	1000051e 	bne	r2,zero,80153f4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 80153e0:	e0bff917 	ldw	r2,-28(fp)
 80153e4:	00c00044 	movi	r3,1
 80153e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80153ec:	0005883a 	mov	r2,zero
 80153f0:	00003206 	br	80154bc <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
 80153f4:	0005303a 	rdctl	r2,status
 80153f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80153fc:	e0fffc17 	ldw	r3,-16(fp)
 8015400:	00bfff84 	movi	r2,-2
 8015404:	1884703a 	and	r2,r3,r2
 8015408:	1001703a 	wrctl	status,r2
  return context;
 801540c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8015410:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 8015414:	e0bffa17 	ldw	r2,-24(fp)
 8015418:	10800117 	ldw	r2,4(r2)
 801541c:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 8015420:	e0bffd17 	ldw	r2,-12(fp)
 8015424:	1080058b 	ldhu	r2,22(r2)
 8015428:	10bfffcc 	andi	r2,r2,65535
 801542c:	10001926 	beq	r2,zero,8015494 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 8015430:	e0bffd17 	ldw	r2,-12(fp)
 8015434:	10800417 	ldw	r2,16(r2)
 8015438:	11000104 	addi	r4,r2,4
 801543c:	e0fffd17 	ldw	r3,-12(fp)
 8015440:	19000415 	stw	r4,16(r3)
 8015444:	10800017 	ldw	r2,0(r2)
 8015448:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 801544c:	e0bffd17 	ldw	r2,-12(fp)
 8015450:	1080058b 	ldhu	r2,22(r2)
 8015454:	10bfffc4 	addi	r2,r2,-1
 8015458:	1007883a 	mov	r3,r2
 801545c:	e0bffd17 	ldw	r2,-12(fp)
 8015460:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8015464:	e0bffd17 	ldw	r2,-12(fp)
 8015468:	10c00417 	ldw	r3,16(r2)
 801546c:	e0bffd17 	ldw	r2,-12(fp)
 8015470:	10800217 	ldw	r2,8(r2)
 8015474:	1880041e 	bne	r3,r2,8015488 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 8015478:	e0bffd17 	ldw	r2,-12(fp)
 801547c:	10c00117 	ldw	r3,4(r2)
 8015480:	e0bffd17 	ldw	r2,-12(fp)
 8015484:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 8015488:	e0bff917 	ldw	r2,-28(fp)
 801548c:	10000005 	stb	zero,0(r2)
 8015490:	00000406 	br	80154a4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 8015494:	e0bff917 	ldw	r2,-28(fp)
 8015498:	00c007c4 	movi	r3,31
 801549c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 80154a0:	e03fff15 	stw	zero,-4(fp)
 80154a4:	e0bffe17 	ldw	r2,-8(fp)
 80154a8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80154ac:	e0bffb17 	ldw	r2,-20(fp)
 80154b0:	1001703a 	wrctl	status,r2
}
 80154b4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 80154b8:	e0bfff17 	ldw	r2,-4(fp)
}
 80154bc:	e037883a 	mov	sp,fp
 80154c0:	df000017 	ldw	fp,0(sp)
 80154c4:	dec00104 	addi	sp,sp,4
 80154c8:	f800283a 	ret

080154cc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 80154cc:	defff404 	addi	sp,sp,-48
 80154d0:	dfc00b15 	stw	ra,44(sp)
 80154d4:	df000a15 	stw	fp,40(sp)
 80154d8:	df000a04 	addi	fp,sp,40
 80154dc:	e13ff715 	stw	r4,-36(fp)
 80154e0:	2805883a 	mov	r2,r5
 80154e4:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80154e8:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 80154ec:	d0a07403 	ldbu	r2,-32304(gp)
 80154f0:	10803fcc 	andi	r2,r2,255
 80154f4:	10000226 	beq	r2,zero,8015500 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 80154f8:	0005883a 	mov	r2,zero
 80154fc:	00005a06 	br	8015668 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
 8015500:	0005303a 	rdctl	r2,status
 8015504:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015508:	e0fffc17 	ldw	r3,-16(fp)
 801550c:	00bfff84 	movi	r2,-2
 8015510:	1884703a 	and	r2,r3,r2
 8015514:	1001703a 	wrctl	status,r2
  return context;
 8015518:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801551c:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 8015520:	d0a07317 	ldw	r2,-32308(gp)
 8015524:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 8015528:	d0a07317 	ldw	r2,-32308(gp)
 801552c:	10000326 	beq	r2,zero,801553c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8015530:	d0a07317 	ldw	r2,-32308(gp)
 8015534:	10800117 	ldw	r2,4(r2)
 8015538:	d0a07315 	stw	r2,-32308(gp)
 801553c:	e0bffe17 	ldw	r2,-8(fp)
 8015540:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015544:	e0bffb17 	ldw	r2,-20(fp)
 8015548:	1001703a 	wrctl	status,r2
}
 801554c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 8015550:	e0bfff17 	ldw	r2,-4(fp)
 8015554:	10004326 	beq	r2,zero,8015664 <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
 8015558:	0005303a 	rdctl	r2,status
 801555c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015560:	e0fffa17 	ldw	r3,-24(fp)
 8015564:	00bfff84 	movi	r2,-2
 8015568:	1884703a 	and	r2,r3,r2
 801556c:	1001703a 	wrctl	status,r2
  return context;
 8015570:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
 8015574:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 8015578:	d0a07117 	ldw	r2,-32316(gp)
 801557c:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 8015580:	e0bffd17 	ldw	r2,-12(fp)
 8015584:	10002c26 	beq	r2,zero,8015638 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 8015588:	d0a07117 	ldw	r2,-32316(gp)
 801558c:	10800017 	ldw	r2,0(r2)
 8015590:	d0a07115 	stw	r2,-32316(gp)
 8015594:	e0bffe17 	ldw	r2,-8(fp)
 8015598:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801559c:	e0bff917 	ldw	r2,-28(fp)
 80155a0:	1001703a 	wrctl	status,r2
}
 80155a4:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 80155a8:	e0bffd17 	ldw	r2,-12(fp)
 80155ac:	e0fff717 	ldw	r3,-36(fp)
 80155b0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 80155b4:	e0bff60b 	ldhu	r2,-40(fp)
 80155b8:	100490ba 	slli	r2,r2,2
 80155bc:	e0fff717 	ldw	r3,-36(fp)
 80155c0:	1887883a 	add	r3,r3,r2
 80155c4:	e0bffd17 	ldw	r2,-12(fp)
 80155c8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 80155cc:	e0bffd17 	ldw	r2,-12(fp)
 80155d0:	e0fff717 	ldw	r3,-36(fp)
 80155d4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 80155d8:	e0bffd17 	ldw	r2,-12(fp)
 80155dc:	e0fff717 	ldw	r3,-36(fp)
 80155e0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 80155e4:	e0bffd17 	ldw	r2,-12(fp)
 80155e8:	e0fff60b 	ldhu	r3,-40(fp)
 80155ec:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 80155f0:	e0bffd17 	ldw	r2,-12(fp)
 80155f4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 80155f8:	e0bfff17 	ldw	r2,-4(fp)
 80155fc:	00c00084 	movi	r3,2
 8015600:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 8015604:	e0bfff17 	ldw	r2,-4(fp)
 8015608:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 801560c:	e0bfff17 	ldw	r2,-4(fp)
 8015610:	e0fffd17 	ldw	r3,-12(fp)
 8015614:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 8015618:	e0bfff17 	ldw	r2,-4(fp)
 801561c:	00c00fc4 	movi	r3,63
 8015620:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 8015624:	e0bfff17 	ldw	r2,-4(fp)
 8015628:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 801562c:	e13fff17 	ldw	r4,-4(fp)
 8015630:	80127380 	call	8012738 <OS_EventWaitListInit>
 8015634:	00000b06 	br	8015664 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 8015638:	d0e07317 	ldw	r3,-32308(gp)
 801563c:	e0bfff17 	ldw	r2,-4(fp)
 8015640:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 8015644:	e0bfff17 	ldw	r2,-4(fp)
 8015648:	d0a07315 	stw	r2,-32308(gp)
 801564c:	e0bffe17 	ldw	r2,-8(fp)
 8015650:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8015654:	e0bff817 	ldw	r2,-32(fp)
 8015658:	1001703a 	wrctl	status,r2
}
 801565c:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 8015660:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
 8015664:	e0bfff17 	ldw	r2,-4(fp)
}
 8015668:	e037883a 	mov	sp,fp
 801566c:	dfc00117 	ldw	ra,4(sp)
 8015670:	df000017 	ldw	fp,0(sp)
 8015674:	dec00204 	addi	sp,sp,8
 8015678:	f800283a 	ret

0801567c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 801567c:	defff204 	addi	sp,sp,-56
 8015680:	dfc00d15 	stw	ra,52(sp)
 8015684:	df000c15 	stw	fp,48(sp)
 8015688:	df000c04 	addi	fp,sp,48
 801568c:	e13ff615 	stw	r4,-40(fp)
 8015690:	2805883a 	mov	r2,r5
 8015694:	e1bff415 	stw	r6,-48(fp)
 8015698:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801569c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80156a0:	e0bff417 	ldw	r2,-48(fp)
 80156a4:	1000021e 	bne	r2,zero,80156b0 <OSQDel+0x34>
        return (pevent);
 80156a8:	e0bff617 	ldw	r2,-40(fp)
 80156ac:	00009206 	br	80158f8 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 80156b0:	e0bff617 	ldw	r2,-40(fp)
 80156b4:	1000051e 	bne	r2,zero,80156cc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80156b8:	e0bff417 	ldw	r2,-48(fp)
 80156bc:	00c00104 	movi	r3,4
 80156c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80156c4:	e0bff617 	ldw	r2,-40(fp)
 80156c8:	00008b06 	br	80158f8 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 80156cc:	e0bff617 	ldw	r2,-40(fp)
 80156d0:	10800003 	ldbu	r2,0(r2)
 80156d4:	10803fcc 	andi	r2,r2,255
 80156d8:	108000a0 	cmpeqi	r2,r2,2
 80156dc:	1000051e 	bne	r2,zero,80156f4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80156e0:	e0bff417 	ldw	r2,-48(fp)
 80156e4:	00c00044 	movi	r3,1
 80156e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80156ec:	e0bff617 	ldw	r2,-40(fp)
 80156f0:	00008106 	br	80158f8 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80156f4:	d0a07403 	ldbu	r2,-32304(gp)
 80156f8:	10803fcc 	andi	r2,r2,255
 80156fc:	10000526 	beq	r2,zero,8015714 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 8015700:	e0bff417 	ldw	r2,-48(fp)
 8015704:	00c003c4 	movi	r3,15
 8015708:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801570c:	e0bff617 	ldw	r2,-40(fp)
 8015710:	00007906 	br	80158f8 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
 8015714:	0005303a 	rdctl	r2,status
 8015718:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801571c:	e0fffb17 	ldw	r3,-20(fp)
 8015720:	00bfff84 	movi	r2,-2
 8015724:	1884703a 	and	r2,r3,r2
 8015728:	1001703a 	wrctl	status,r2
  return context;
 801572c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8015730:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 8015734:	e0bff617 	ldw	r2,-40(fp)
 8015738:	10800283 	ldbu	r2,10(r2)
 801573c:	10803fcc 	andi	r2,r2,255
 8015740:	10000326 	beq	r2,zero,8015750 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 8015744:	00800044 	movi	r2,1
 8015748:	e0bfffc5 	stb	r2,-1(fp)
 801574c:	00000106 	br	8015754 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8015750:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 8015754:	e0bff503 	ldbu	r2,-44(fp)
 8015758:	10000326 	beq	r2,zero,8015768 <OSQDel+0xec>
 801575c:	10800060 	cmpeqi	r2,r2,1
 8015760:	1000321e 	bne	r2,zero,801582c <OSQDel+0x1b0>
 8015764:	00005806 	br	80158c8 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 8015768:	e0bfffc3 	ldbu	r2,-1(fp)
 801576c:	10001f1e 	bne	r2,zero,80157ec <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 8015770:	e0bff617 	ldw	r2,-40(fp)
 8015774:	00c00fc4 	movi	r3,63
 8015778:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 801577c:	e0bff617 	ldw	r2,-40(fp)
 8015780:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 8015784:	e0bff617 	ldw	r2,-40(fp)
 8015788:	10800117 	ldw	r2,4(r2)
 801578c:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
 8015790:	d0e07117 	ldw	r3,-32316(gp)
 8015794:	e0bffc17 	ldw	r2,-16(fp)
 8015798:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 801579c:	e0bffc17 	ldw	r2,-16(fp)
 80157a0:	d0a07115 	stw	r2,-32316(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80157a4:	e0bff617 	ldw	r2,-40(fp)
 80157a8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 80157ac:	d0e07317 	ldw	r3,-32308(gp)
 80157b0:	e0bff617 	ldw	r2,-40(fp)
 80157b4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 80157b8:	e0bff617 	ldw	r2,-40(fp)
 80157bc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 80157c0:	e0bff617 	ldw	r2,-40(fp)
 80157c4:	d0a07315 	stw	r2,-32308(gp)
 80157c8:	e0bffd17 	ldw	r2,-12(fp)
 80157cc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80157d0:	e0bffa17 	ldw	r2,-24(fp)
 80157d4:	1001703a 	wrctl	status,r2
}
 80157d8:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 80157dc:	e0bff417 	ldw	r2,-48(fp)
 80157e0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 80157e4:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 80157e8:	00004206 	br	80158f4 <OSQDel+0x278>
 80157ec:	e0bffd17 	ldw	r2,-12(fp)
 80157f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80157f4:	e0bff917 	ldw	r2,-28(fp)
 80157f8:	1001703a 	wrctl	status,r2
}
 80157fc:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
 8015800:	e0bff417 	ldw	r2,-48(fp)
 8015804:	00c01244 	movi	r3,73
 8015808:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 801580c:	e0bff617 	ldw	r2,-40(fp)
 8015810:	e0bffe15 	stw	r2,-8(fp)
             break;
 8015814:	00003706 	br	80158f4 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 8015818:	000f883a 	mov	r7,zero
 801581c:	01800104 	movi	r6,4
 8015820:	000b883a 	mov	r5,zero
 8015824:	e13ff617 	ldw	r4,-40(fp)
 8015828:	80121b40 	call	80121b4 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 801582c:	e0bff617 	ldw	r2,-40(fp)
 8015830:	10800283 	ldbu	r2,10(r2)
 8015834:	10803fcc 	andi	r2,r2,255
 8015838:	103ff71e 	bne	r2,zero,8015818 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 801583c:	e0bff617 	ldw	r2,-40(fp)
 8015840:	00c00fc4 	movi	r3,63
 8015844:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 8015848:	e0bff617 	ldw	r2,-40(fp)
 801584c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 8015850:	e0bff617 	ldw	r2,-40(fp)
 8015854:	10800117 	ldw	r2,4(r2)
 8015858:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
 801585c:	d0e07117 	ldw	r3,-32316(gp)
 8015860:	e0bffc17 	ldw	r2,-16(fp)
 8015864:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 8015868:	e0bffc17 	ldw	r2,-16(fp)
 801586c:	d0a07115 	stw	r2,-32316(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8015870:	e0bff617 	ldw	r2,-40(fp)
 8015874:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 8015878:	d0e07317 	ldw	r3,-32308(gp)
 801587c:	e0bff617 	ldw	r2,-40(fp)
 8015880:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 8015884:	e0bff617 	ldw	r2,-40(fp)
 8015888:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 801588c:	e0bff617 	ldw	r2,-40(fp)
 8015890:	d0a07315 	stw	r2,-32308(gp)
 8015894:	e0bffd17 	ldw	r2,-12(fp)
 8015898:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801589c:	e0bff817 	ldw	r2,-32(fp)
 80158a0:	1001703a 	wrctl	status,r2
}
 80158a4:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80158a8:	e0bfffc3 	ldbu	r2,-1(fp)
 80158ac:	10800058 	cmpnei	r2,r2,1
 80158b0:	1000011e 	bne	r2,zero,80158b8 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 80158b4:	8012be80 	call	8012be8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 80158b8:	e0bff417 	ldw	r2,-48(fp)
 80158bc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 80158c0:	e03ffe15 	stw	zero,-8(fp)
             break;
 80158c4:	00000b06 	br	80158f4 <OSQDel+0x278>
 80158c8:	e0bffd17 	ldw	r2,-12(fp)
 80158cc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80158d0:	e0bff717 	ldw	r2,-36(fp)
 80158d4:	1001703a 	wrctl	status,r2
}
 80158d8:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 80158dc:	e0bff417 	ldw	r2,-48(fp)
 80158e0:	00c001c4 	movi	r3,7
 80158e4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 80158e8:	e0bff617 	ldw	r2,-40(fp)
 80158ec:	e0bffe15 	stw	r2,-8(fp)
             break;
 80158f0:	0001883a 	nop
    }
    return (pevent_return);
 80158f4:	e0bffe17 	ldw	r2,-8(fp)
}
 80158f8:	e037883a 	mov	sp,fp
 80158fc:	dfc00117 	ldw	ra,4(sp)
 8015900:	df000017 	ldw	fp,0(sp)
 8015904:	dec00204 	addi	sp,sp,8
 8015908:	f800283a 	ret

0801590c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 801590c:	defffa04 	addi	sp,sp,-24
 8015910:	df000515 	stw	fp,20(sp)
 8015914:	df000504 	addi	fp,sp,20
 8015918:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801591c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8015920:	e0bffb17 	ldw	r2,-20(fp)
 8015924:	1000021e 	bne	r2,zero,8015930 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 8015928:	00800104 	movi	r2,4
 801592c:	00002206 	br	80159b8 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8015930:	e0bffb17 	ldw	r2,-20(fp)
 8015934:	10800003 	ldbu	r2,0(r2)
 8015938:	10803fcc 	andi	r2,r2,255
 801593c:	108000a0 	cmpeqi	r2,r2,2
 8015940:	1000021e 	bne	r2,zero,801594c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 8015944:	00800044 	movi	r2,1
 8015948:	00001b06 	br	80159b8 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
 801594c:	0005303a 	rdctl	r2,status
 8015950:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015954:	e0fffc17 	ldw	r3,-16(fp)
 8015958:	00bfff84 	movi	r2,-2
 801595c:	1884703a 	and	r2,r3,r2
 8015960:	1001703a 	wrctl	status,r2
  return context;
 8015964:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015968:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 801596c:	e0bffb17 	ldw	r2,-20(fp)
 8015970:	10800117 	ldw	r2,4(r2)
 8015974:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
 8015978:	e0bffe17 	ldw	r2,-8(fp)
 801597c:	10c00117 	ldw	r3,4(r2)
 8015980:	e0bffe17 	ldw	r2,-8(fp)
 8015984:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 8015988:	e0bffe17 	ldw	r2,-8(fp)
 801598c:	10c00117 	ldw	r3,4(r2)
 8015990:	e0bffe17 	ldw	r2,-8(fp)
 8015994:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 8015998:	e0bffe17 	ldw	r2,-8(fp)
 801599c:	1000058d 	sth	zero,22(r2)
 80159a0:	e0bfff17 	ldw	r2,-4(fp)
 80159a4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 80159a8:	e0bffd17 	ldw	r2,-12(fp)
 80159ac:	1001703a 	wrctl	status,r2
}
 80159b0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80159b4:	0005883a 	mov	r2,zero
}
 80159b8:	e037883a 	mov	sp,fp
 80159bc:	df000017 	ldw	fp,0(sp)
 80159c0:	dec00104 	addi	sp,sp,4
 80159c4:	f800283a 	ret

080159c8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 80159c8:	defff304 	addi	sp,sp,-52
 80159cc:	dfc00c15 	stw	ra,48(sp)
 80159d0:	df000b15 	stw	fp,44(sp)
 80159d4:	df000b04 	addi	fp,sp,44
 80159d8:	e13ff715 	stw	r4,-36(fp)
 80159dc:	2805883a 	mov	r2,r5
 80159e0:	e1bff515 	stw	r6,-44(fp)
 80159e4:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80159e8:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 80159ec:	e0bff517 	ldw	r2,-44(fp)
 80159f0:	1000021e 	bne	r2,zero,80159fc <OSQPend+0x34>
        return ((void *)0);
 80159f4:	0005883a 	mov	r2,zero
 80159f8:	00009406 	br	8015c4c <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 80159fc:	e0bff717 	ldw	r2,-36(fp)
 8015a00:	1000051e 	bne	r2,zero,8015a18 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8015a04:	e0bff517 	ldw	r2,-44(fp)
 8015a08:	00c00104 	movi	r3,4
 8015a0c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8015a10:	0005883a 	mov	r2,zero
 8015a14:	00008d06 	br	8015c4c <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 8015a18:	e0bff717 	ldw	r2,-36(fp)
 8015a1c:	10800003 	ldbu	r2,0(r2)
 8015a20:	10803fcc 	andi	r2,r2,255
 8015a24:	108000a0 	cmpeqi	r2,r2,2
 8015a28:	1000051e 	bne	r2,zero,8015a40 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8015a2c:	e0bff517 	ldw	r2,-44(fp)
 8015a30:	00c00044 	movi	r3,1
 8015a34:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8015a38:	0005883a 	mov	r2,zero
 8015a3c:	00008306 	br	8015c4c <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8015a40:	d0a07403 	ldbu	r2,-32304(gp)
 8015a44:	10803fcc 	andi	r2,r2,255
 8015a48:	10000526 	beq	r2,zero,8015a60 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 8015a4c:	e0bff517 	ldw	r2,-44(fp)
 8015a50:	00c00084 	movi	r3,2
 8015a54:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8015a58:	0005883a 	mov	r2,zero
 8015a5c:	00007b06 	br	8015c4c <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 8015a60:	d0a06603 	ldbu	r2,-32360(gp)
 8015a64:	10803fcc 	andi	r2,r2,255
 8015a68:	10000526 	beq	r2,zero,8015a80 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 8015a6c:	e0bff517 	ldw	r2,-44(fp)
 8015a70:	00c00344 	movi	r3,13
 8015a74:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8015a78:	0005883a 	mov	r2,zero
 8015a7c:	00007306 	br	8015c4c <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
 8015a80:	0005303a 	rdctl	r2,status
 8015a84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a88:	e0fffc17 	ldw	r3,-16(fp)
 8015a8c:	00bfff84 	movi	r2,-2
 8015a90:	1884703a 	and	r2,r3,r2
 8015a94:	1001703a 	wrctl	status,r2
  return context;
 8015a98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8015a9c:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 8015aa0:	e0bff717 	ldw	r2,-36(fp)
 8015aa4:	10800117 	ldw	r2,4(r2)
 8015aa8:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 8015aac:	e0bffd17 	ldw	r2,-12(fp)
 8015ab0:	1080058b 	ldhu	r2,22(r2)
 8015ab4:	10bfffcc 	andi	r2,r2,65535
 8015ab8:	10001f26 	beq	r2,zero,8015b38 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 8015abc:	e0bffd17 	ldw	r2,-12(fp)
 8015ac0:	10800417 	ldw	r2,16(r2)
 8015ac4:	11000104 	addi	r4,r2,4
 8015ac8:	e0fffd17 	ldw	r3,-12(fp)
 8015acc:	19000415 	stw	r4,16(r3)
 8015ad0:	10800017 	ldw	r2,0(r2)
 8015ad4:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 8015ad8:	e0bffd17 	ldw	r2,-12(fp)
 8015adc:	1080058b 	ldhu	r2,22(r2)
 8015ae0:	10bfffc4 	addi	r2,r2,-1
 8015ae4:	1007883a 	mov	r3,r2
 8015ae8:	e0bffd17 	ldw	r2,-12(fp)
 8015aec:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8015af0:	e0bffd17 	ldw	r2,-12(fp)
 8015af4:	10c00417 	ldw	r3,16(r2)
 8015af8:	e0bffd17 	ldw	r2,-12(fp)
 8015afc:	10800217 	ldw	r2,8(r2)
 8015b00:	1880041e 	bne	r3,r2,8015b14 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 8015b04:	e0bffd17 	ldw	r2,-12(fp)
 8015b08:	10c00117 	ldw	r3,4(r2)
 8015b0c:	e0bffd17 	ldw	r2,-12(fp)
 8015b10:	10c00415 	stw	r3,16(r2)
 8015b14:	e0bffe17 	ldw	r2,-8(fp)
 8015b18:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015b1c:	e0bffb17 	ldw	r2,-20(fp)
 8015b20:	1001703a 	wrctl	status,r2
}
 8015b24:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 8015b28:	e0bff517 	ldw	r2,-44(fp)
 8015b2c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 8015b30:	e0bfff17 	ldw	r2,-4(fp)
 8015b34:	00004506 	br	8015c4c <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 8015b38:	d0a07517 	ldw	r2,-32300(gp)
 8015b3c:	10c00c03 	ldbu	r3,48(r2)
 8015b40:	d0a07517 	ldw	r2,-32300(gp)
 8015b44:	18c00114 	ori	r3,r3,4
 8015b48:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8015b4c:	d0a07517 	ldw	r2,-32300(gp)
 8015b50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 8015b54:	d0a07517 	ldw	r2,-32300(gp)
 8015b58:	e0fff60b 	ldhu	r3,-40(fp)
 8015b5c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 8015b60:	e13ff717 	ldw	r4,-36(fp)
 8015b64:	801233c0 	call	801233c <OS_EventTaskWait>
 8015b68:	e0bffe17 	ldw	r2,-8(fp)
 8015b6c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8015b70:	e0bff917 	ldw	r2,-28(fp)
 8015b74:	1001703a 	wrctl	status,r2
}
 8015b78:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 8015b7c:	8012be80 	call	8012be8 <OS_Sched>
  NIOS2_READ_STATUS (context);
 8015b80:	0005303a 	rdctl	r2,status
 8015b84:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015b88:	e0fffa17 	ldw	r3,-24(fp)
 8015b8c:	00bfff84 	movi	r2,-2
 8015b90:	1884703a 	and	r2,r3,r2
 8015b94:	1001703a 	wrctl	status,r2
  return context;
 8015b98:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
 8015b9c:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8015ba0:	d0a07517 	ldw	r2,-32300(gp)
 8015ba4:	10800c43 	ldbu	r2,49(r2)
 8015ba8:	10803fcc 	andi	r2,r2,255
 8015bac:	10000326 	beq	r2,zero,8015bbc <OSQPend+0x1f4>
 8015bb0:	108000a0 	cmpeqi	r2,r2,2
 8015bb4:	1000071e 	bne	r2,zero,8015bd4 <OSQPend+0x20c>
 8015bb8:	00000b06 	br	8015be8 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 8015bbc:	d0a07517 	ldw	r2,-32300(gp)
 8015bc0:	10800917 	ldw	r2,36(r2)
 8015bc4:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
 8015bc8:	e0bff517 	ldw	r2,-44(fp)
 8015bcc:	10000005 	stb	zero,0(r2)
             break;
 8015bd0:	00000e06 	br	8015c0c <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8015bd4:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8015bd8:	e0bff517 	ldw	r2,-44(fp)
 8015bdc:	00c00384 	movi	r3,14
 8015be0:	10c00005 	stb	r3,0(r2)
             break;
 8015be4:	00000906 	br	8015c0c <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8015be8:	d0a07517 	ldw	r2,-32300(gp)
 8015bec:	e17ff717 	ldw	r5,-36(fp)
 8015bf0:	1009883a 	mov	r4,r2
 8015bf4:	801258c0 	call	801258c <OS_EventTaskRemove>
             pmsg = (void *)0;
 8015bf8:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8015bfc:	e0bff517 	ldw	r2,-44(fp)
 8015c00:	00c00284 	movi	r3,10
 8015c04:	10c00005 	stb	r3,0(r2)
             break;
 8015c08:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8015c0c:	d0a07517 	ldw	r2,-32300(gp)
 8015c10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8015c14:	d0a07517 	ldw	r2,-32300(gp)
 8015c18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8015c1c:	d0a07517 	ldw	r2,-32300(gp)
 8015c20:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8015c24:	d0a07517 	ldw	r2,-32300(gp)
 8015c28:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 8015c2c:	d0a07517 	ldw	r2,-32300(gp)
 8015c30:	10000915 	stw	zero,36(r2)
 8015c34:	e0bffe17 	ldw	r2,-8(fp)
 8015c38:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8015c3c:	e0bff817 	ldw	r2,-32(fp)
 8015c40:	1001703a 	wrctl	status,r2
}
 8015c44:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 8015c48:	e0bfff17 	ldw	r2,-4(fp)
}
 8015c4c:	e037883a 	mov	sp,fp
 8015c50:	dfc00117 	ldw	ra,4(sp)
 8015c54:	df000017 	ldw	fp,0(sp)
 8015c58:	dec00204 	addi	sp,sp,8
 8015c5c:	f800283a 	ret

08015c60 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8015c60:	defff604 	addi	sp,sp,-40
 8015c64:	dfc00915 	stw	ra,36(sp)
 8015c68:	df000815 	stw	fp,32(sp)
 8015c6c:	df000804 	addi	fp,sp,32
 8015c70:	e13ffa15 	stw	r4,-24(fp)
 8015c74:	2805883a 	mov	r2,r5
 8015c78:	e1bff815 	stw	r6,-32(fp)
 8015c7c:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8015c80:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8015c84:	e0bff817 	ldw	r2,-32(fp)
 8015c88:	1000021e 	bne	r2,zero,8015c94 <OSQPendAbort+0x34>
        return (0);
 8015c8c:	0005883a 	mov	r2,zero
 8015c90:	00004b06 	br	8015dc0 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8015c94:	e0bffa17 	ldw	r2,-24(fp)
 8015c98:	1000051e 	bne	r2,zero,8015cb0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8015c9c:	e0bff817 	ldw	r2,-32(fp)
 8015ca0:	00c00104 	movi	r3,4
 8015ca4:	10c00005 	stb	r3,0(r2)
        return (0);
 8015ca8:	0005883a 	mov	r2,zero
 8015cac:	00004406 	br	8015dc0 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 8015cb0:	e0bffa17 	ldw	r2,-24(fp)
 8015cb4:	10800003 	ldbu	r2,0(r2)
 8015cb8:	10803fcc 	andi	r2,r2,255
 8015cbc:	108000a0 	cmpeqi	r2,r2,2
 8015cc0:	1000051e 	bne	r2,zero,8015cd8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8015cc4:	e0bff817 	ldw	r2,-32(fp)
 8015cc8:	00c00044 	movi	r3,1
 8015ccc:	10c00005 	stb	r3,0(r2)
        return (0);
 8015cd0:	0005883a 	mov	r2,zero
 8015cd4:	00003a06 	br	8015dc0 <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
 8015cd8:	0005303a 	rdctl	r2,status
 8015cdc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015ce0:	e0fffd17 	ldw	r3,-12(fp)
 8015ce4:	00bfff84 	movi	r2,-2
 8015ce8:	1884703a 	and	r2,r3,r2
 8015cec:	1001703a 	wrctl	status,r2
  return context;
 8015cf0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8015cf4:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 8015cf8:	e0bffa17 	ldw	r2,-24(fp)
 8015cfc:	10800283 	ldbu	r2,10(r2)
 8015d00:	10803fcc 	andi	r2,r2,255
 8015d04:	10002626 	beq	r2,zero,8015da0 <OSQPendAbort+0x140>
        nbr_tasks = 0;
 8015d08:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
 8015d0c:	e0bff903 	ldbu	r2,-28(fp)
 8015d10:	10800058 	cmpnei	r2,r2,1
 8015d14:	10000e1e 	bne	r2,zero,8015d50 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8015d18:	00000806 	br	8015d3c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8015d1c:	01c00084 	movi	r7,2
 8015d20:	01800104 	movi	r6,4
 8015d24:	000b883a 	mov	r5,zero
 8015d28:	e13ffa17 	ldw	r4,-24(fp)
 8015d2c:	80121b40 	call	80121b4 <OS_EventTaskRdy>
                     nbr_tasks++;
 8015d30:	e0bfffc3 	ldbu	r2,-1(fp)
 8015d34:	10800044 	addi	r2,r2,1
 8015d38:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8015d3c:	e0bffa17 	ldw	r2,-24(fp)
 8015d40:	10800283 	ldbu	r2,10(r2)
 8015d44:	10803fcc 	andi	r2,r2,255
 8015d48:	103ff41e 	bne	r2,zero,8015d1c <OSQPendAbort+0xbc>
                 }
                 break;
 8015d4c:	00000906 	br	8015d74 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8015d50:	01c00084 	movi	r7,2
 8015d54:	01800104 	movi	r6,4
 8015d58:	000b883a 	mov	r5,zero
 8015d5c:	e13ffa17 	ldw	r4,-24(fp)
 8015d60:	80121b40 	call	80121b4 <OS_EventTaskRdy>
                 nbr_tasks++;
 8015d64:	e0bfffc3 	ldbu	r2,-1(fp)
 8015d68:	10800044 	addi	r2,r2,1
 8015d6c:	e0bfffc5 	stb	r2,-1(fp)
                 break;
 8015d70:	0001883a 	nop
 8015d74:	e0bffe17 	ldw	r2,-8(fp)
 8015d78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015d7c:	e0bffc17 	ldw	r2,-16(fp)
 8015d80:	1001703a 	wrctl	status,r2
}
 8015d84:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 8015d88:	8012be80 	call	8012be8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 8015d8c:	e0bff817 	ldw	r2,-32(fp)
 8015d90:	00c00384 	movi	r3,14
 8015d94:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 8015d98:	e0bfffc3 	ldbu	r2,-1(fp)
 8015d9c:	00000806 	br	8015dc0 <OSQPendAbort+0x160>
 8015da0:	e0bffe17 	ldw	r2,-8(fp)
 8015da4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015da8:	e0bffb17 	ldw	r2,-20(fp)
 8015dac:	1001703a 	wrctl	status,r2
}
 8015db0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8015db4:	e0bff817 	ldw	r2,-32(fp)
 8015db8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 8015dbc:	0005883a 	mov	r2,zero
}
 8015dc0:	e037883a 	mov	sp,fp
 8015dc4:	dfc00117 	ldw	ra,4(sp)
 8015dc8:	df000017 	ldw	fp,0(sp)
 8015dcc:	dec00204 	addi	sp,sp,8
 8015dd0:	f800283a 	ret

08015dd4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 8015dd4:	defff604 	addi	sp,sp,-40
 8015dd8:	dfc00915 	stw	ra,36(sp)
 8015ddc:	df000815 	stw	fp,32(sp)
 8015de0:	df000804 	addi	fp,sp,32
 8015de4:	e13ff915 	stw	r4,-28(fp)
 8015de8:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8015dec:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8015df0:	e0bff917 	ldw	r2,-28(fp)
 8015df4:	1000021e 	bne	r2,zero,8015e00 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8015df8:	00800104 	movi	r2,4
 8015dfc:	00004d06 	br	8015f34 <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8015e00:	e0bff917 	ldw	r2,-28(fp)
 8015e04:	10800003 	ldbu	r2,0(r2)
 8015e08:	10803fcc 	andi	r2,r2,255
 8015e0c:	108000a0 	cmpeqi	r2,r2,2
 8015e10:	1000021e 	bne	r2,zero,8015e1c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 8015e14:	00800044 	movi	r2,1
 8015e18:	00004606 	br	8015f34 <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
 8015e1c:	0005303a 	rdctl	r2,status
 8015e20:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015e24:	e0fffd17 	ldw	r3,-12(fp)
 8015e28:	00bfff84 	movi	r2,-2
 8015e2c:	1884703a 	and	r2,r3,r2
 8015e30:	1001703a 	wrctl	status,r2
  return context;
 8015e34:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8015e38:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 8015e3c:	e0bff917 	ldw	r2,-28(fp)
 8015e40:	10800283 	ldbu	r2,10(r2)
 8015e44:	10803fcc 	andi	r2,r2,255
 8015e48:	10000d26 	beq	r2,zero,8015e80 <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8015e4c:	000f883a 	mov	r7,zero
 8015e50:	01800104 	movi	r6,4
 8015e54:	e17ff817 	ldw	r5,-32(fp)
 8015e58:	e13ff917 	ldw	r4,-28(fp)
 8015e5c:	80121b40 	call	80121b4 <OS_EventTaskRdy>
 8015e60:	e0bfff17 	ldw	r2,-4(fp)
 8015e64:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015e68:	e0bffc17 	ldw	r2,-16(fp)
 8015e6c:	1001703a 	wrctl	status,r2
}
 8015e70:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 8015e74:	8012be80 	call	8012be8 <OS_Sched>
        return (OS_ERR_NONE);
 8015e78:	0005883a 	mov	r2,zero
 8015e7c:	00002d06 	br	8015f34 <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8015e80:	e0bff917 	ldw	r2,-28(fp)
 8015e84:	10800117 	ldw	r2,4(r2)
 8015e88:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 8015e8c:	e0bffe17 	ldw	r2,-8(fp)
 8015e90:	10c0058b 	ldhu	r3,22(r2)
 8015e94:	e0bffe17 	ldw	r2,-8(fp)
 8015e98:	1080050b 	ldhu	r2,20(r2)
 8015e9c:	18ffffcc 	andi	r3,r3,65535
 8015ea0:	10bfffcc 	andi	r2,r2,65535
 8015ea4:	18800736 	bltu	r3,r2,8015ec4 <OSQPost+0xf0>
 8015ea8:	e0bfff17 	ldw	r2,-4(fp)
 8015eac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8015eb0:	e0bffb17 	ldw	r2,-20(fp)
 8015eb4:	1001703a 	wrctl	status,r2
}
 8015eb8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8015ebc:	00800784 	movi	r2,30
 8015ec0:	00001c06 	br	8015f34 <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 8015ec4:	e0bffe17 	ldw	r2,-8(fp)
 8015ec8:	10800317 	ldw	r2,12(r2)
 8015ecc:	11000104 	addi	r4,r2,4
 8015ed0:	e0fffe17 	ldw	r3,-8(fp)
 8015ed4:	19000315 	stw	r4,12(r3)
 8015ed8:	e0fff817 	ldw	r3,-32(fp)
 8015edc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 8015ee0:	e0bffe17 	ldw	r2,-8(fp)
 8015ee4:	1080058b 	ldhu	r2,22(r2)
 8015ee8:	10800044 	addi	r2,r2,1
 8015eec:	1007883a 	mov	r3,r2
 8015ef0:	e0bffe17 	ldw	r2,-8(fp)
 8015ef4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 8015ef8:	e0bffe17 	ldw	r2,-8(fp)
 8015efc:	10c00317 	ldw	r3,12(r2)
 8015f00:	e0bffe17 	ldw	r2,-8(fp)
 8015f04:	10800217 	ldw	r2,8(r2)
 8015f08:	1880041e 	bne	r3,r2,8015f1c <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
 8015f0c:	e0bffe17 	ldw	r2,-8(fp)
 8015f10:	10c00117 	ldw	r3,4(r2)
 8015f14:	e0bffe17 	ldw	r2,-8(fp)
 8015f18:	10c00315 	stw	r3,12(r2)
 8015f1c:	e0bfff17 	ldw	r2,-4(fp)
 8015f20:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8015f24:	e0bffa17 	ldw	r2,-24(fp)
 8015f28:	1001703a 	wrctl	status,r2
}
 8015f2c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8015f30:	0005883a 	mov	r2,zero
}
 8015f34:	e037883a 	mov	sp,fp
 8015f38:	dfc00117 	ldw	ra,4(sp)
 8015f3c:	df000017 	ldw	fp,0(sp)
 8015f40:	dec00204 	addi	sp,sp,8
 8015f44:	f800283a 	ret

08015f48 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 8015f48:	defff604 	addi	sp,sp,-40
 8015f4c:	dfc00915 	stw	ra,36(sp)
 8015f50:	df000815 	stw	fp,32(sp)
 8015f54:	df000804 	addi	fp,sp,32
 8015f58:	e13ff915 	stw	r4,-28(fp)
 8015f5c:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8015f60:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8015f64:	e0bff917 	ldw	r2,-28(fp)
 8015f68:	1000021e 	bne	r2,zero,8015f74 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8015f6c:	00800104 	movi	r2,4
 8015f70:	00004f06 	br	80160b0 <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8015f74:	e0bff917 	ldw	r2,-28(fp)
 8015f78:	10800003 	ldbu	r2,0(r2)
 8015f7c:	10803fcc 	andi	r2,r2,255
 8015f80:	108000a0 	cmpeqi	r2,r2,2
 8015f84:	1000021e 	bne	r2,zero,8015f90 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 8015f88:	00800044 	movi	r2,1
 8015f8c:	00004806 	br	80160b0 <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
 8015f90:	0005303a 	rdctl	r2,status
 8015f94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015f98:	e0fffd17 	ldw	r3,-12(fp)
 8015f9c:	00bfff84 	movi	r2,-2
 8015fa0:	1884703a 	and	r2,r3,r2
 8015fa4:	1001703a 	wrctl	status,r2
  return context;
 8015fa8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8015fac:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 8015fb0:	e0bff917 	ldw	r2,-28(fp)
 8015fb4:	10800283 	ldbu	r2,10(r2)
 8015fb8:	10803fcc 	andi	r2,r2,255
 8015fbc:	10000d26 	beq	r2,zero,8015ff4 <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8015fc0:	000f883a 	mov	r7,zero
 8015fc4:	01800104 	movi	r6,4
 8015fc8:	e17ff817 	ldw	r5,-32(fp)
 8015fcc:	e13ff917 	ldw	r4,-28(fp)
 8015fd0:	80121b40 	call	80121b4 <OS_EventTaskRdy>
 8015fd4:	e0bfff17 	ldw	r2,-4(fp)
 8015fd8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8015fdc:	e0bffc17 	ldw	r2,-16(fp)
 8015fe0:	1001703a 	wrctl	status,r2
}
 8015fe4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 8015fe8:	8012be80 	call	8012be8 <OS_Sched>
        return (OS_ERR_NONE);
 8015fec:	0005883a 	mov	r2,zero
 8015ff0:	00002f06 	br	80160b0 <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8015ff4:	e0bff917 	ldw	r2,-28(fp)
 8015ff8:	10800117 	ldw	r2,4(r2)
 8015ffc:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8016000:	e0bffe17 	ldw	r2,-8(fp)
 8016004:	10c0058b 	ldhu	r3,22(r2)
 8016008:	e0bffe17 	ldw	r2,-8(fp)
 801600c:	1080050b 	ldhu	r2,20(r2)
 8016010:	18ffffcc 	andi	r3,r3,65535
 8016014:	10bfffcc 	andi	r2,r2,65535
 8016018:	18800736 	bltu	r3,r2,8016038 <OSQPostFront+0xf0>
 801601c:	e0bfff17 	ldw	r2,-4(fp)
 8016020:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016024:	e0bffb17 	ldw	r2,-20(fp)
 8016028:	1001703a 	wrctl	status,r2
}
 801602c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8016030:	00800784 	movi	r2,30
 8016034:	00001e06 	br	80160b0 <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 8016038:	e0bffe17 	ldw	r2,-8(fp)
 801603c:	10c00417 	ldw	r3,16(r2)
 8016040:	e0bffe17 	ldw	r2,-8(fp)
 8016044:	10800117 	ldw	r2,4(r2)
 8016048:	1880041e 	bne	r3,r2,801605c <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
 801604c:	e0bffe17 	ldw	r2,-8(fp)
 8016050:	10c00217 	ldw	r3,8(r2)
 8016054:	e0bffe17 	ldw	r2,-8(fp)
 8016058:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 801605c:	e0bffe17 	ldw	r2,-8(fp)
 8016060:	10800417 	ldw	r2,16(r2)
 8016064:	10ffff04 	addi	r3,r2,-4
 8016068:	e0bffe17 	ldw	r2,-8(fp)
 801606c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 8016070:	e0bffe17 	ldw	r2,-8(fp)
 8016074:	10800417 	ldw	r2,16(r2)
 8016078:	e0fff817 	ldw	r3,-32(fp)
 801607c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8016080:	e0bffe17 	ldw	r2,-8(fp)
 8016084:	1080058b 	ldhu	r2,22(r2)
 8016088:	10800044 	addi	r2,r2,1
 801608c:	1007883a 	mov	r3,r2
 8016090:	e0bffe17 	ldw	r2,-8(fp)
 8016094:	10c0058d 	sth	r3,22(r2)
 8016098:	e0bfff17 	ldw	r2,-4(fp)
 801609c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80160a0:	e0bffa17 	ldw	r2,-24(fp)
 80160a4:	1001703a 	wrctl	status,r2
}
 80160a8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80160ac:	0005883a 	mov	r2,zero
}
 80160b0:	e037883a 	mov	sp,fp
 80160b4:	dfc00117 	ldw	ra,4(sp)
 80160b8:	df000017 	ldw	fp,0(sp)
 80160bc:	dec00204 	addi	sp,sp,8
 80160c0:	f800283a 	ret

080160c4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 80160c4:	defff504 	addi	sp,sp,-44
 80160c8:	dfc00a15 	stw	ra,40(sp)
 80160cc:	df000915 	stw	fp,36(sp)
 80160d0:	df000904 	addi	fp,sp,36
 80160d4:	e13ff915 	stw	r4,-28(fp)
 80160d8:	e17ff815 	stw	r5,-32(fp)
 80160dc:	3005883a 	mov	r2,r6
 80160e0:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80160e4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80160e8:	e0bff917 	ldw	r2,-28(fp)
 80160ec:	1000021e 	bne	r2,zero,80160f8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 80160f0:	00800104 	movi	r2,4
 80160f4:	00007406 	br	80162c8 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 80160f8:	e0bff917 	ldw	r2,-28(fp)
 80160fc:	10800003 	ldbu	r2,0(r2)
 8016100:	10803fcc 	andi	r2,r2,255
 8016104:	108000a0 	cmpeqi	r2,r2,2
 8016108:	1000021e 	bne	r2,zero,8016114 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 801610c:	00800044 	movi	r2,1
 8016110:	00006d06 	br	80162c8 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
 8016114:	0005303a 	rdctl	r2,status
 8016118:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801611c:	e0fffd17 	ldw	r3,-12(fp)
 8016120:	00bfff84 	movi	r2,-2
 8016124:	1884703a 	and	r2,r3,r2
 8016128:	1001703a 	wrctl	status,r2
  return context;
 801612c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8016130:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 8016134:	e0bff917 	ldw	r2,-28(fp)
 8016138:	10800283 	ldbu	r2,10(r2)
 801613c:	10803fcc 	andi	r2,r2,255
 8016140:	10001e26 	beq	r2,zero,80161bc <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 8016144:	e0bff703 	ldbu	r2,-36(fp)
 8016148:	1080004c 	andi	r2,r2,1
 801614c:	10000b26 	beq	r2,zero,801617c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8016150:	00000506 	br	8016168 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8016154:	000f883a 	mov	r7,zero
 8016158:	01800104 	movi	r6,4
 801615c:	e17ff817 	ldw	r5,-32(fp)
 8016160:	e13ff917 	ldw	r4,-28(fp)
 8016164:	80121b40 	call	80121b4 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8016168:	e0bff917 	ldw	r2,-28(fp)
 801616c:	10800283 	ldbu	r2,10(r2)
 8016170:	10803fcc 	andi	r2,r2,255
 8016174:	103ff71e 	bne	r2,zero,8016154 <OSQPostOpt+0x90>
 8016178:	00000506 	br	8016190 <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 801617c:	000f883a 	mov	r7,zero
 8016180:	01800104 	movi	r6,4
 8016184:	e17ff817 	ldw	r5,-32(fp)
 8016188:	e13ff917 	ldw	r4,-28(fp)
 801618c:	80121b40 	call	80121b4 <OS_EventTaskRdy>
 8016190:	e0bfff17 	ldw	r2,-4(fp)
 8016194:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8016198:	e0bffc17 	ldw	r2,-16(fp)
 801619c:	1001703a 	wrctl	status,r2
}
 80161a0:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 80161a4:	e0bff703 	ldbu	r2,-36(fp)
 80161a8:	1080010c 	andi	r2,r2,4
 80161ac:	1000011e 	bne	r2,zero,80161b4 <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
 80161b0:	8012be80 	call	8012be8 <OS_Sched>
        }
        return (OS_ERR_NONE);
 80161b4:	0005883a 	mov	r2,zero
 80161b8:	00004306 	br	80162c8 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 80161bc:	e0bff917 	ldw	r2,-28(fp)
 80161c0:	10800117 	ldw	r2,4(r2)
 80161c4:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 80161c8:	e0bffe17 	ldw	r2,-8(fp)
 80161cc:	10c0058b 	ldhu	r3,22(r2)
 80161d0:	e0bffe17 	ldw	r2,-8(fp)
 80161d4:	1080050b 	ldhu	r2,20(r2)
 80161d8:	18ffffcc 	andi	r3,r3,65535
 80161dc:	10bfffcc 	andi	r2,r2,65535
 80161e0:	18800736 	bltu	r3,r2,8016200 <OSQPostOpt+0x13c>
 80161e4:	e0bfff17 	ldw	r2,-4(fp)
 80161e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80161ec:	e0bffb17 	ldw	r2,-20(fp)
 80161f0:	1001703a 	wrctl	status,r2
}
 80161f4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 80161f8:	00800784 	movi	r2,30
 80161fc:	00003206 	br	80162c8 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 8016200:	e0bff703 	ldbu	r2,-36(fp)
 8016204:	1080008c 	andi	r2,r2,2
 8016208:	10001326 	beq	r2,zero,8016258 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 801620c:	e0bffe17 	ldw	r2,-8(fp)
 8016210:	10c00417 	ldw	r3,16(r2)
 8016214:	e0bffe17 	ldw	r2,-8(fp)
 8016218:	10800117 	ldw	r2,4(r2)
 801621c:	1880041e 	bne	r3,r2,8016230 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 8016220:	e0bffe17 	ldw	r2,-8(fp)
 8016224:	10c00217 	ldw	r3,8(r2)
 8016228:	e0bffe17 	ldw	r2,-8(fp)
 801622c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 8016230:	e0bffe17 	ldw	r2,-8(fp)
 8016234:	10800417 	ldw	r2,16(r2)
 8016238:	10ffff04 	addi	r3,r2,-4
 801623c:	e0bffe17 	ldw	r2,-8(fp)
 8016240:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 8016244:	e0bffe17 	ldw	r2,-8(fp)
 8016248:	10800417 	ldw	r2,16(r2)
 801624c:	e0fff817 	ldw	r3,-32(fp)
 8016250:	10c00015 	stw	r3,0(r2)
 8016254:	00001006 	br	8016298 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 8016258:	e0bffe17 	ldw	r2,-8(fp)
 801625c:	10800317 	ldw	r2,12(r2)
 8016260:	11000104 	addi	r4,r2,4
 8016264:	e0fffe17 	ldw	r3,-8(fp)
 8016268:	19000315 	stw	r4,12(r3)
 801626c:	e0fff817 	ldw	r3,-32(fp)
 8016270:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 8016274:	e0bffe17 	ldw	r2,-8(fp)
 8016278:	10c00317 	ldw	r3,12(r2)
 801627c:	e0bffe17 	ldw	r2,-8(fp)
 8016280:	10800217 	ldw	r2,8(r2)
 8016284:	1880041e 	bne	r3,r2,8016298 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
 8016288:	e0bffe17 	ldw	r2,-8(fp)
 801628c:	10c00117 	ldw	r3,4(r2)
 8016290:	e0bffe17 	ldw	r2,-8(fp)
 8016294:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8016298:	e0bffe17 	ldw	r2,-8(fp)
 801629c:	1080058b 	ldhu	r2,22(r2)
 80162a0:	10800044 	addi	r2,r2,1
 80162a4:	1007883a 	mov	r3,r2
 80162a8:	e0bffe17 	ldw	r2,-8(fp)
 80162ac:	10c0058d 	sth	r3,22(r2)
 80162b0:	e0bfff17 	ldw	r2,-4(fp)
 80162b4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80162b8:	e0bffa17 	ldw	r2,-24(fp)
 80162bc:	1001703a 	wrctl	status,r2
}
 80162c0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80162c4:	0005883a 	mov	r2,zero
}
 80162c8:	e037883a 	mov	sp,fp
 80162cc:	dfc00117 	ldw	ra,4(sp)
 80162d0:	df000017 	ldw	fp,0(sp)
 80162d4:	dec00204 	addi	sp,sp,8
 80162d8:	f800283a 	ret

080162dc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 80162dc:	defff604 	addi	sp,sp,-40
 80162e0:	df000915 	stw	fp,36(sp)
 80162e4:	df000904 	addi	fp,sp,36
 80162e8:	e13ff815 	stw	r4,-32(fp)
 80162ec:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 80162f0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 80162f4:	e0bff817 	ldw	r2,-32(fp)
 80162f8:	1000021e 	bne	r2,zero,8016304 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 80162fc:	00800104 	movi	r2,4
 8016300:	00004a06 	br	801642c <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 8016304:	e0bff717 	ldw	r2,-36(fp)
 8016308:	1000021e 	bne	r2,zero,8016314 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 801630c:	00800244 	movi	r2,9
 8016310:	00004606 	br	801642c <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8016314:	e0bff817 	ldw	r2,-32(fp)
 8016318:	10800003 	ldbu	r2,0(r2)
 801631c:	10803fcc 	andi	r2,r2,255
 8016320:	108000a0 	cmpeqi	r2,r2,2
 8016324:	1000021e 	bne	r2,zero,8016330 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8016328:	00800044 	movi	r2,1
 801632c:	00003f06 	br	801642c <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
 8016330:	0005303a 	rdctl	r2,status
 8016334:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016338:	e0fffa17 	ldw	r3,-24(fp)
 801633c:	00bfff84 	movi	r2,-2
 8016340:	1884703a 	and	r2,r3,r2
 8016344:	1001703a 	wrctl	status,r2
  return context;
 8016348:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 801634c:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 8016350:	e0bff817 	ldw	r2,-32(fp)
 8016354:	10c00283 	ldbu	r3,10(r2)
 8016358:	e0bff717 	ldw	r2,-36(fp)
 801635c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 8016360:	e0bff817 	ldw	r2,-32(fp)
 8016364:	108002c4 	addi	r2,r2,11
 8016368:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 801636c:	e0bff717 	ldw	r2,-36(fp)
 8016370:	10800204 	addi	r2,r2,8
 8016374:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8016378:	e03fffc5 	stb	zero,-1(fp)
 801637c:	00000b06 	br	80163ac <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 8016380:	e0fffe17 	ldw	r3,-8(fp)
 8016384:	18800044 	addi	r2,r3,1
 8016388:	e0bffe15 	stw	r2,-8(fp)
 801638c:	e0bffd17 	ldw	r2,-12(fp)
 8016390:	11000044 	addi	r4,r2,1
 8016394:	e13ffd15 	stw	r4,-12(fp)
 8016398:	18c00003 	ldbu	r3,0(r3)
 801639c:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 80163a0:	e0bfffc3 	ldbu	r2,-1(fp)
 80163a4:	10800044 	addi	r2,r2,1
 80163a8:	e0bfffc5 	stb	r2,-1(fp)
 80163ac:	e0bfffc3 	ldbu	r2,-1(fp)
 80163b0:	108000f0 	cmpltui	r2,r2,3
 80163b4:	103ff21e 	bne	r2,zero,8016380 <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 80163b8:	e0bff817 	ldw	r2,-32(fp)
 80163bc:	10800117 	ldw	r2,4(r2)
 80163c0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
 80163c4:	e0bffb17 	ldw	r2,-20(fp)
 80163c8:	1080058b 	ldhu	r2,22(r2)
 80163cc:	10bfffcc 	andi	r2,r2,65535
 80163d0:	10000626 	beq	r2,zero,80163ec <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 80163d4:	e0bffb17 	ldw	r2,-20(fp)
 80163d8:	10800417 	ldw	r2,16(r2)
 80163dc:	10c00017 	ldw	r3,0(r2)
 80163e0:	e0bff717 	ldw	r2,-36(fp)
 80163e4:	10c00015 	stw	r3,0(r2)
 80163e8:	00000206 	br	80163f4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 80163ec:	e0bff717 	ldw	r2,-36(fp)
 80163f0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 80163f4:	e0bffb17 	ldw	r2,-20(fp)
 80163f8:	10c0058b 	ldhu	r3,22(r2)
 80163fc:	e0bff717 	ldw	r2,-36(fp)
 8016400:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 8016404:	e0bffb17 	ldw	r2,-20(fp)
 8016408:	10c0050b 	ldhu	r3,20(r2)
 801640c:	e0bff717 	ldw	r2,-36(fp)
 8016410:	10c0018d 	sth	r3,6(r2)
 8016414:	e0bffc17 	ldw	r2,-16(fp)
 8016418:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 801641c:	e0bff917 	ldw	r2,-28(fp)
 8016420:	1001703a 	wrctl	status,r2
}
 8016424:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8016428:	0005883a 	mov	r2,zero
}
 801642c:	e037883a 	mov	sp,fp
 8016430:	df000017 	ldw	fp,0(sp)
 8016434:	dec00104 	addi	sp,sp,4
 8016438:	f800283a 	ret

0801643c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 801643c:	defffb04 	addi	sp,sp,-20
 8016440:	dfc00415 	stw	ra,16(sp)
 8016444:	df000315 	stw	fp,12(sp)
 8016448:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 801644c:	01407804 	movi	r5,480
 8016450:	010201b4 	movhi	r4,2054
 8016454:	21328004 	addi	r4,r4,-13824
 8016458:	8012b240 	call	8012b24 <OS_MemClr>
    pq1 = &OSQTbl[0];
 801645c:	008201b4 	movhi	r2,2054
 8016460:	10b28004 	addi	r2,r2,-13824
 8016464:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 8016468:	008201b4 	movhi	r2,2054
 801646c:	10b28604 	addi	r2,r2,-13800
 8016470:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 8016474:	e03fff8d 	sth	zero,-2(fp)
 8016478:	00000c06 	br	80164ac <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 801647c:	e0bffe17 	ldw	r2,-8(fp)
 8016480:	e0fffd17 	ldw	r3,-12(fp)
 8016484:	10c00015 	stw	r3,0(r2)
        pq1++;
 8016488:	e0bffe17 	ldw	r2,-8(fp)
 801648c:	10800604 	addi	r2,r2,24
 8016490:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 8016494:	e0bffd17 	ldw	r2,-12(fp)
 8016498:	10800604 	addi	r2,r2,24
 801649c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 80164a0:	e0bfff8b 	ldhu	r2,-2(fp)
 80164a4:	10800044 	addi	r2,r2,1
 80164a8:	e0bfff8d 	sth	r2,-2(fp)
 80164ac:	e0bfff8b 	ldhu	r2,-2(fp)
 80164b0:	108004f0 	cmpltui	r2,r2,19
 80164b4:	103ff11e 	bne	r2,zero,801647c <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
 80164b8:	e0bffe17 	ldw	r2,-8(fp)
 80164bc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 80164c0:	008201b4 	movhi	r2,2054
 80164c4:	10b28004 	addi	r2,r2,-13824
 80164c8:	d0a07115 	stw	r2,-32316(gp)
#endif
}
 80164cc:	0001883a 	nop
 80164d0:	e037883a 	mov	sp,fp
 80164d4:	dfc00117 	ldw	ra,4(sp)
 80164d8:	df000017 	ldw	fp,0(sp)
 80164dc:	dec00204 	addi	sp,sp,8
 80164e0:	f800283a 	ret

080164e4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 80164e4:	defffa04 	addi	sp,sp,-24
 80164e8:	df000515 	stw	fp,20(sp)
 80164ec:	df000504 	addi	fp,sp,20
 80164f0:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80164f4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80164f8:	e0bffb17 	ldw	r2,-20(fp)
 80164fc:	1000021e 	bne	r2,zero,8016508 <OSSemAccept+0x24>
        return (0);
 8016500:	0005883a 	mov	r2,zero
 8016504:	00002006 	br	8016588 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8016508:	e0bffb17 	ldw	r2,-20(fp)
 801650c:	10800003 	ldbu	r2,0(r2)
 8016510:	10803fcc 	andi	r2,r2,255
 8016514:	108000e0 	cmpeqi	r2,r2,3
 8016518:	1000021e 	bne	r2,zero,8016524 <OSSemAccept+0x40>
        return (0);
 801651c:	0005883a 	mov	r2,zero
 8016520:	00001906 	br	8016588 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
 8016524:	0005303a 	rdctl	r2,status
 8016528:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801652c:	e0fffd17 	ldw	r3,-12(fp)
 8016530:	00bfff84 	movi	r2,-2
 8016534:	1884703a 	and	r2,r3,r2
 8016538:	1001703a 	wrctl	status,r2
  return context;
 801653c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8016540:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
 8016544:	e0bffb17 	ldw	r2,-20(fp)
 8016548:	1080020b 	ldhu	r2,8(r2)
 801654c:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 8016550:	e0bffe8b 	ldhu	r2,-6(fp)
 8016554:	10000626 	beq	r2,zero,8016570 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 8016558:	e0bffb17 	ldw	r2,-20(fp)
 801655c:	1080020b 	ldhu	r2,8(r2)
 8016560:	10bfffc4 	addi	r2,r2,-1
 8016564:	1007883a 	mov	r3,r2
 8016568:	e0bffb17 	ldw	r2,-20(fp)
 801656c:	10c0020d 	sth	r3,8(r2)
 8016570:	e0bfff17 	ldw	r2,-4(fp)
 8016574:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8016578:	e0bffc17 	ldw	r2,-16(fp)
 801657c:	1001703a 	wrctl	status,r2
}
 8016580:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 8016584:	e0bffe8b 	ldhu	r2,-6(fp)
}
 8016588:	e037883a 	mov	sp,fp
 801658c:	df000017 	ldw	fp,0(sp)
 8016590:	dec00104 	addi	sp,sp,4
 8016594:	f800283a 	ret

08016598 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8016598:	defff904 	addi	sp,sp,-28
 801659c:	dfc00615 	stw	ra,24(sp)
 80165a0:	df000515 	stw	fp,20(sp)
 80165a4:	df000504 	addi	fp,sp,20
 80165a8:	2005883a 	mov	r2,r4
 80165ac:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 80165b0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80165b4:	d0a07403 	ldbu	r2,-32304(gp)
 80165b8:	10803fcc 	andi	r2,r2,255
 80165bc:	10000226 	beq	r2,zero,80165c8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 80165c0:	0005883a 	mov	r2,zero
 80165c4:	00002606 	br	8016660 <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
 80165c8:	0005303a 	rdctl	r2,status
 80165cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80165d0:	e0fffd17 	ldw	r3,-12(fp)
 80165d4:	00bfff84 	movi	r2,-2
 80165d8:	1884703a 	and	r2,r3,r2
 80165dc:	1001703a 	wrctl	status,r2
  return context;
 80165e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80165e4:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 80165e8:	d0a07317 	ldw	r2,-32308(gp)
 80165ec:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 80165f0:	d0a07317 	ldw	r2,-32308(gp)
 80165f4:	10000326 	beq	r2,zero,8016604 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80165f8:	d0a07317 	ldw	r2,-32308(gp)
 80165fc:	10800117 	ldw	r2,4(r2)
 8016600:	d0a07315 	stw	r2,-32308(gp)
 8016604:	e0bfff17 	ldw	r2,-4(fp)
 8016608:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801660c:	e0bffc17 	ldw	r2,-16(fp)
 8016610:	1001703a 	wrctl	status,r2
}
 8016614:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8016618:	e0bffe17 	ldw	r2,-8(fp)
 801661c:	10000f26 	beq	r2,zero,801665c <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8016620:	e0bffe17 	ldw	r2,-8(fp)
 8016624:	00c000c4 	movi	r3,3
 8016628:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 801662c:	e0bffe17 	ldw	r2,-8(fp)
 8016630:	e0fffb0b 	ldhu	r3,-20(fp)
 8016634:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8016638:	e0bffe17 	ldw	r2,-8(fp)
 801663c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 8016640:	e0bffe17 	ldw	r2,-8(fp)
 8016644:	00c00fc4 	movi	r3,63
 8016648:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 801664c:	e0bffe17 	ldw	r2,-8(fp)
 8016650:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8016654:	e13ffe17 	ldw	r4,-8(fp)
 8016658:	80127380 	call	8012738 <OS_EventWaitListInit>
    }
    return (pevent);
 801665c:	e0bffe17 	ldw	r2,-8(fp)
}
 8016660:	e037883a 	mov	sp,fp
 8016664:	dfc00117 	ldw	ra,4(sp)
 8016668:	df000017 	ldw	fp,0(sp)
 801666c:	dec00204 	addi	sp,sp,8
 8016670:	f800283a 	ret

08016674 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8016674:	defff304 	addi	sp,sp,-52
 8016678:	dfc00c15 	stw	ra,48(sp)
 801667c:	df000b15 	stw	fp,44(sp)
 8016680:	df000b04 	addi	fp,sp,44
 8016684:	e13ff715 	stw	r4,-36(fp)
 8016688:	2805883a 	mov	r2,r5
 801668c:	e1bff515 	stw	r6,-44(fp)
 8016690:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8016694:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8016698:	e0bff517 	ldw	r2,-44(fp)
 801669c:	1000021e 	bne	r2,zero,80166a8 <OSSemDel+0x34>
        return (pevent);
 80166a0:	e0bff717 	ldw	r2,-36(fp)
 80166a4:	00008206 	br	80168b0 <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 80166a8:	e0bff717 	ldw	r2,-36(fp)
 80166ac:	1000051e 	bne	r2,zero,80166c4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80166b0:	e0bff517 	ldw	r2,-44(fp)
 80166b4:	00c00104 	movi	r3,4
 80166b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80166bc:	e0bff717 	ldw	r2,-36(fp)
 80166c0:	00007b06 	br	80168b0 <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 80166c4:	e0bff717 	ldw	r2,-36(fp)
 80166c8:	10800003 	ldbu	r2,0(r2)
 80166cc:	10803fcc 	andi	r2,r2,255
 80166d0:	108000e0 	cmpeqi	r2,r2,3
 80166d4:	1000051e 	bne	r2,zero,80166ec <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80166d8:	e0bff517 	ldw	r2,-44(fp)
 80166dc:	00c00044 	movi	r3,1
 80166e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80166e4:	e0bff717 	ldw	r2,-36(fp)
 80166e8:	00007106 	br	80168b0 <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80166ec:	d0a07403 	ldbu	r2,-32304(gp)
 80166f0:	10803fcc 	andi	r2,r2,255
 80166f4:	10000526 	beq	r2,zero,801670c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 80166f8:	e0bff517 	ldw	r2,-44(fp)
 80166fc:	00c003c4 	movi	r3,15
 8016700:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8016704:	e0bff717 	ldw	r2,-36(fp)
 8016708:	00006906 	br	80168b0 <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
 801670c:	0005303a 	rdctl	r2,status
 8016710:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016714:	e0fffc17 	ldw	r3,-16(fp)
 8016718:	00bfff84 	movi	r2,-2
 801671c:	1884703a 	and	r2,r3,r2
 8016720:	1001703a 	wrctl	status,r2
  return context;
 8016724:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8016728:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 801672c:	e0bff717 	ldw	r2,-36(fp)
 8016730:	10800283 	ldbu	r2,10(r2)
 8016734:	10803fcc 	andi	r2,r2,255
 8016738:	10000326 	beq	r2,zero,8016748 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 801673c:	00800044 	movi	r2,1
 8016740:	e0bfffc5 	stb	r2,-1(fp)
 8016744:	00000106 	br	801674c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 8016748:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
 801674c:	e0bff603 	ldbu	r2,-40(fp)
 8016750:	10000326 	beq	r2,zero,8016760 <OSSemDel+0xec>
 8016754:	10800060 	cmpeqi	r2,r2,1
 8016758:	10002a1e 	bne	r2,zero,8016804 <OSSemDel+0x190>
 801675c:	00004806 	br	8016880 <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 8016760:	e0bfffc3 	ldbu	r2,-1(fp)
 8016764:	1000171e 	bne	r2,zero,80167c4 <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 8016768:	e0bff717 	ldw	r2,-36(fp)
 801676c:	00c00fc4 	movi	r3,63
 8016770:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 8016774:	e0bff717 	ldw	r2,-36(fp)
 8016778:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 801677c:	e0bff717 	ldw	r2,-36(fp)
 8016780:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 8016784:	d0e07317 	ldw	r3,-32308(gp)
 8016788:	e0bff717 	ldw	r2,-36(fp)
 801678c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 8016790:	e0bff717 	ldw	r2,-36(fp)
 8016794:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 8016798:	e0bff717 	ldw	r2,-36(fp)
 801679c:	d0a07315 	stw	r2,-32308(gp)
 80167a0:	e0bffd17 	ldw	r2,-12(fp)
 80167a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80167a8:	e0bffb17 	ldw	r2,-20(fp)
 80167ac:	1001703a 	wrctl	status,r2
}
 80167b0:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 80167b4:	e0bff517 	ldw	r2,-44(fp)
 80167b8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 80167bc:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 80167c0:	00003a06 	br	80168ac <OSSemDel+0x238>
 80167c4:	e0bffd17 	ldw	r2,-12(fp)
 80167c8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80167cc:	e0bffa17 	ldw	r2,-24(fp)
 80167d0:	1001703a 	wrctl	status,r2
}
 80167d4:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
 80167d8:	e0bff517 	ldw	r2,-44(fp)
 80167dc:	00c01244 	movi	r3,73
 80167e0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 80167e4:	e0bff717 	ldw	r2,-36(fp)
 80167e8:	e0bffe15 	stw	r2,-8(fp)
             break;
 80167ec:	00002f06 	br	80168ac <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80167f0:	000f883a 	mov	r7,zero
 80167f4:	01800044 	movi	r6,1
 80167f8:	000b883a 	mov	r5,zero
 80167fc:	e13ff717 	ldw	r4,-36(fp)
 8016800:	80121b40 	call	80121b4 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 8016804:	e0bff717 	ldw	r2,-36(fp)
 8016808:	10800283 	ldbu	r2,10(r2)
 801680c:	10803fcc 	andi	r2,r2,255
 8016810:	103ff71e 	bne	r2,zero,80167f0 <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 8016814:	e0bff717 	ldw	r2,-36(fp)
 8016818:	00c00fc4 	movi	r3,63
 801681c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 8016820:	e0bff717 	ldw	r2,-36(fp)
 8016824:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8016828:	e0bff717 	ldw	r2,-36(fp)
 801682c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 8016830:	d0e07317 	ldw	r3,-32308(gp)
 8016834:	e0bff717 	ldw	r2,-36(fp)
 8016838:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 801683c:	e0bff717 	ldw	r2,-36(fp)
 8016840:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 8016844:	e0bff717 	ldw	r2,-36(fp)
 8016848:	d0a07315 	stw	r2,-32308(gp)
 801684c:	e0bffd17 	ldw	r2,-12(fp)
 8016850:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8016854:	e0bff917 	ldw	r2,-28(fp)
 8016858:	1001703a 	wrctl	status,r2
}
 801685c:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 8016860:	e0bfffc3 	ldbu	r2,-1(fp)
 8016864:	10800058 	cmpnei	r2,r2,1
 8016868:	1000011e 	bne	r2,zero,8016870 <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 801686c:	8012be80 	call	8012be8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 8016870:	e0bff517 	ldw	r2,-44(fp)
 8016874:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 8016878:	e03ffe15 	stw	zero,-8(fp)
             break;
 801687c:	00000b06 	br	80168ac <OSSemDel+0x238>
 8016880:	e0bffd17 	ldw	r2,-12(fp)
 8016884:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8016888:	e0bff817 	ldw	r2,-32(fp)
 801688c:	1001703a 	wrctl	status,r2
}
 8016890:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 8016894:	e0bff517 	ldw	r2,-44(fp)
 8016898:	00c001c4 	movi	r3,7
 801689c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 80168a0:	e0bff717 	ldw	r2,-36(fp)
 80168a4:	e0bffe15 	stw	r2,-8(fp)
             break;
 80168a8:	0001883a 	nop
    }
    return (pevent_return);
 80168ac:	e0bffe17 	ldw	r2,-8(fp)
}
 80168b0:	e037883a 	mov	sp,fp
 80168b4:	dfc00117 	ldw	ra,4(sp)
 80168b8:	df000017 	ldw	fp,0(sp)
 80168bc:	dec00204 	addi	sp,sp,8
 80168c0:	f800283a 	ret

080168c4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 80168c4:	defff504 	addi	sp,sp,-44
 80168c8:	dfc00a15 	stw	ra,40(sp)
 80168cc:	df000915 	stw	fp,36(sp)
 80168d0:	df000904 	addi	fp,sp,36
 80168d4:	e13ff915 	stw	r4,-28(fp)
 80168d8:	2805883a 	mov	r2,r5
 80168dc:	e1bff715 	stw	r6,-36(fp)
 80168e0:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80168e4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80168e8:	e0bff717 	ldw	r2,-36(fp)
 80168ec:	10007426 	beq	r2,zero,8016ac0 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80168f0:	e0bff917 	ldw	r2,-28(fp)
 80168f4:	1000041e 	bne	r2,zero,8016908 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 80168f8:	e0bff717 	ldw	r2,-36(fp)
 80168fc:	00c00104 	movi	r3,4
 8016900:	10c00005 	stb	r3,0(r2)
        return;
 8016904:	00006f06 	br	8016ac4 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8016908:	e0bff917 	ldw	r2,-28(fp)
 801690c:	10800003 	ldbu	r2,0(r2)
 8016910:	10803fcc 	andi	r2,r2,255
 8016914:	108000e0 	cmpeqi	r2,r2,3
 8016918:	1000041e 	bne	r2,zero,801692c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 801691c:	e0bff717 	ldw	r2,-36(fp)
 8016920:	00c00044 	movi	r3,1
 8016924:	10c00005 	stb	r3,0(r2)
        return;
 8016928:	00006606 	br	8016ac4 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 801692c:	d0a07403 	ldbu	r2,-32304(gp)
 8016930:	10803fcc 	andi	r2,r2,255
 8016934:	10000426 	beq	r2,zero,8016948 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8016938:	e0bff717 	ldw	r2,-36(fp)
 801693c:	00c00084 	movi	r3,2
 8016940:	10c00005 	stb	r3,0(r2)
        return;
 8016944:	00005f06 	br	8016ac4 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 8016948:	d0a06603 	ldbu	r2,-32360(gp)
 801694c:	10803fcc 	andi	r2,r2,255
 8016950:	10000426 	beq	r2,zero,8016964 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8016954:	e0bff717 	ldw	r2,-36(fp)
 8016958:	00c00344 	movi	r3,13
 801695c:	10c00005 	stb	r3,0(r2)
        return;
 8016960:	00005806 	br	8016ac4 <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
 8016964:	0005303a 	rdctl	r2,status
 8016968:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801696c:	e0fffe17 	ldw	r3,-8(fp)
 8016970:	00bfff84 	movi	r2,-2
 8016974:	1884703a 	and	r2,r3,r2
 8016978:	1001703a 	wrctl	status,r2
  return context;
 801697c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 8016980:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 8016984:	e0bff917 	ldw	r2,-28(fp)
 8016988:	1080020b 	ldhu	r2,8(r2)
 801698c:	10bfffcc 	andi	r2,r2,65535
 8016990:	10000e26 	beq	r2,zero,80169cc <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8016994:	e0bff917 	ldw	r2,-28(fp)
 8016998:	1080020b 	ldhu	r2,8(r2)
 801699c:	10bfffc4 	addi	r2,r2,-1
 80169a0:	1007883a 	mov	r3,r2
 80169a4:	e0bff917 	ldw	r2,-28(fp)
 80169a8:	10c0020d 	sth	r3,8(r2)
 80169ac:	e0bfff17 	ldw	r2,-4(fp)
 80169b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 80169b4:	e0bffd17 	ldw	r2,-12(fp)
 80169b8:	1001703a 	wrctl	status,r2
}
 80169bc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 80169c0:	e0bff717 	ldw	r2,-36(fp)
 80169c4:	10000005 	stb	zero,0(r2)
        return;
 80169c8:	00003e06 	br	8016ac4 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80169cc:	d0a07517 	ldw	r2,-32300(gp)
 80169d0:	10c00c03 	ldbu	r3,48(r2)
 80169d4:	d0a07517 	ldw	r2,-32300(gp)
 80169d8:	18c00054 	ori	r3,r3,1
 80169dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80169e0:	d0a07517 	ldw	r2,-32300(gp)
 80169e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80169e8:	d0a07517 	ldw	r2,-32300(gp)
 80169ec:	e0fff80b 	ldhu	r3,-32(fp)
 80169f0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80169f4:	e13ff917 	ldw	r4,-28(fp)
 80169f8:	801233c0 	call	801233c <OS_EventTaskWait>
 80169fc:	e0bfff17 	ldw	r2,-4(fp)
 8016a00:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016a04:	e0bffb17 	ldw	r2,-20(fp)
 8016a08:	1001703a 	wrctl	status,r2
}
 8016a0c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 8016a10:	8012be80 	call	8012be8 <OS_Sched>
  NIOS2_READ_STATUS (context);
 8016a14:	0005303a 	rdctl	r2,status
 8016a18:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016a1c:	e0fffc17 	ldw	r3,-16(fp)
 8016a20:	00bfff84 	movi	r2,-2
 8016a24:	1884703a 	and	r2,r3,r2
 8016a28:	1001703a 	wrctl	status,r2
  return context;
 8016a2c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 8016a30:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8016a34:	d0a07517 	ldw	r2,-32300(gp)
 8016a38:	10800c43 	ldbu	r2,49(r2)
 8016a3c:	10803fcc 	andi	r2,r2,255
 8016a40:	10000326 	beq	r2,zero,8016a50 <OSSemPend+0x18c>
 8016a44:	108000a0 	cmpeqi	r2,r2,2
 8016a48:	1000041e 	bne	r2,zero,8016a5c <OSSemPend+0x198>
 8016a4c:	00000706 	br	8016a6c <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8016a50:	e0bff717 	ldw	r2,-36(fp)
 8016a54:	10000005 	stb	zero,0(r2)
             break;
 8016a58:	00000c06 	br	8016a8c <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8016a5c:	e0bff717 	ldw	r2,-36(fp)
 8016a60:	00c00384 	movi	r3,14
 8016a64:	10c00005 	stb	r3,0(r2)
             break;
 8016a68:	00000806 	br	8016a8c <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 8016a6c:	d0a07517 	ldw	r2,-32300(gp)
 8016a70:	e17ff917 	ldw	r5,-28(fp)
 8016a74:	1009883a 	mov	r4,r2
 8016a78:	801258c0 	call	801258c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8016a7c:	e0bff717 	ldw	r2,-36(fp)
 8016a80:	00c00284 	movi	r3,10
 8016a84:	10c00005 	stb	r3,0(r2)
             break;
 8016a88:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8016a8c:	d0a07517 	ldw	r2,-32300(gp)
 8016a90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8016a94:	d0a07517 	ldw	r2,-32300(gp)
 8016a98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8016a9c:	d0a07517 	ldw	r2,-32300(gp)
 8016aa0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8016aa4:	d0a07517 	ldw	r2,-32300(gp)
 8016aa8:	10000815 	stw	zero,32(r2)
 8016aac:	e0bfff17 	ldw	r2,-4(fp)
 8016ab0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8016ab4:	e0bffa17 	ldw	r2,-24(fp)
 8016ab8:	1001703a 	wrctl	status,r2
}
 8016abc:	00000106 	br	8016ac4 <OSSemPend+0x200>
        return;
 8016ac0:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
 8016ac4:	e037883a 	mov	sp,fp
 8016ac8:	dfc00117 	ldw	ra,4(sp)
 8016acc:	df000017 	ldw	fp,0(sp)
 8016ad0:	dec00204 	addi	sp,sp,8
 8016ad4:	f800283a 	ret

08016ad8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8016ad8:	defff604 	addi	sp,sp,-40
 8016adc:	dfc00915 	stw	ra,36(sp)
 8016ae0:	df000815 	stw	fp,32(sp)
 8016ae4:	df000804 	addi	fp,sp,32
 8016ae8:	e13ffa15 	stw	r4,-24(fp)
 8016aec:	2805883a 	mov	r2,r5
 8016af0:	e1bff815 	stw	r6,-32(fp)
 8016af4:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8016af8:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8016afc:	e0bff817 	ldw	r2,-32(fp)
 8016b00:	1000021e 	bne	r2,zero,8016b0c <OSSemPendAbort+0x34>
        return (0);
 8016b04:	0005883a 	mov	r2,zero
 8016b08:	00004b06 	br	8016c38 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8016b0c:	e0bffa17 	ldw	r2,-24(fp)
 8016b10:	1000051e 	bne	r2,zero,8016b28 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8016b14:	e0bff817 	ldw	r2,-32(fp)
 8016b18:	00c00104 	movi	r3,4
 8016b1c:	10c00005 	stb	r3,0(r2)
        return (0);
 8016b20:	0005883a 	mov	r2,zero
 8016b24:	00004406 	br	8016c38 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8016b28:	e0bffa17 	ldw	r2,-24(fp)
 8016b2c:	10800003 	ldbu	r2,0(r2)
 8016b30:	10803fcc 	andi	r2,r2,255
 8016b34:	108000e0 	cmpeqi	r2,r2,3
 8016b38:	1000051e 	bne	r2,zero,8016b50 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8016b3c:	e0bff817 	ldw	r2,-32(fp)
 8016b40:	00c00044 	movi	r3,1
 8016b44:	10c00005 	stb	r3,0(r2)
        return (0);
 8016b48:	0005883a 	mov	r2,zero
 8016b4c:	00003a06 	br	8016c38 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
 8016b50:	0005303a 	rdctl	r2,status
 8016b54:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016b58:	e0fffd17 	ldw	r3,-12(fp)
 8016b5c:	00bfff84 	movi	r2,-2
 8016b60:	1884703a 	and	r2,r3,r2
 8016b64:	1001703a 	wrctl	status,r2
  return context;
 8016b68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8016b6c:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 8016b70:	e0bffa17 	ldw	r2,-24(fp)
 8016b74:	10800283 	ldbu	r2,10(r2)
 8016b78:	10803fcc 	andi	r2,r2,255
 8016b7c:	10002626 	beq	r2,zero,8016c18 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
 8016b80:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
 8016b84:	e0bff903 	ldbu	r2,-28(fp)
 8016b88:	10800058 	cmpnei	r2,r2,1
 8016b8c:	10000e1e 	bne	r2,zero,8016bc8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 8016b90:	00000806 	br	8016bb4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 8016b94:	01c00084 	movi	r7,2
 8016b98:	01800044 	movi	r6,1
 8016b9c:	000b883a 	mov	r5,zero
 8016ba0:	e13ffa17 	ldw	r4,-24(fp)
 8016ba4:	80121b40 	call	80121b4 <OS_EventTaskRdy>
                     nbr_tasks++;
 8016ba8:	e0bfffc3 	ldbu	r2,-1(fp)
 8016bac:	10800044 	addi	r2,r2,1
 8016bb0:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 8016bb4:	e0bffa17 	ldw	r2,-24(fp)
 8016bb8:	10800283 	ldbu	r2,10(r2)
 8016bbc:	10803fcc 	andi	r2,r2,255
 8016bc0:	103ff41e 	bne	r2,zero,8016b94 <OSSemPendAbort+0xbc>
                 }
                 break;
 8016bc4:	00000906 	br	8016bec <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 8016bc8:	01c00084 	movi	r7,2
 8016bcc:	01800044 	movi	r6,1
 8016bd0:	000b883a 	mov	r5,zero
 8016bd4:	e13ffa17 	ldw	r4,-24(fp)
 8016bd8:	80121b40 	call	80121b4 <OS_EventTaskRdy>
                 nbr_tasks++;
 8016bdc:	e0bfffc3 	ldbu	r2,-1(fp)
 8016be0:	10800044 	addi	r2,r2,1
 8016be4:	e0bfffc5 	stb	r2,-1(fp)
                 break;
 8016be8:	0001883a 	nop
 8016bec:	e0bffe17 	ldw	r2,-8(fp)
 8016bf0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8016bf4:	e0bffc17 	ldw	r2,-16(fp)
 8016bf8:	1001703a 	wrctl	status,r2
}
 8016bfc:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 8016c00:	8012be80 	call	8012be8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 8016c04:	e0bff817 	ldw	r2,-32(fp)
 8016c08:	00c00384 	movi	r3,14
 8016c0c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 8016c10:	e0bfffc3 	ldbu	r2,-1(fp)
 8016c14:	00000806 	br	8016c38 <OSSemPendAbort+0x160>
 8016c18:	e0bffe17 	ldw	r2,-8(fp)
 8016c1c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016c20:	e0bffb17 	ldw	r2,-20(fp)
 8016c24:	1001703a 	wrctl	status,r2
}
 8016c28:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8016c2c:	e0bff817 	ldw	r2,-32(fp)
 8016c30:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 8016c34:	0005883a 	mov	r2,zero
}
 8016c38:	e037883a 	mov	sp,fp
 8016c3c:	dfc00117 	ldw	ra,4(sp)
 8016c40:	df000017 	ldw	fp,0(sp)
 8016c44:	dec00204 	addi	sp,sp,8
 8016c48:	f800283a 	ret

08016c4c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8016c4c:	defff804 	addi	sp,sp,-32
 8016c50:	dfc00715 	stw	ra,28(sp)
 8016c54:	df000615 	stw	fp,24(sp)
 8016c58:	df000604 	addi	fp,sp,24
 8016c5c:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8016c60:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8016c64:	e0bffa17 	ldw	r2,-24(fp)
 8016c68:	1000021e 	bne	r2,zero,8016c74 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 8016c6c:	00800104 	movi	r2,4
 8016c70:	00003806 	br	8016d54 <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8016c74:	e0bffa17 	ldw	r2,-24(fp)
 8016c78:	10800003 	ldbu	r2,0(r2)
 8016c7c:	10803fcc 	andi	r2,r2,255
 8016c80:	108000e0 	cmpeqi	r2,r2,3
 8016c84:	1000021e 	bne	r2,zero,8016c90 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 8016c88:	00800044 	movi	r2,1
 8016c8c:	00003106 	br	8016d54 <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
 8016c90:	0005303a 	rdctl	r2,status
 8016c94:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016c98:	e0fffe17 	ldw	r3,-8(fp)
 8016c9c:	00bfff84 	movi	r2,-2
 8016ca0:	1884703a 	and	r2,r3,r2
 8016ca4:	1001703a 	wrctl	status,r2
  return context;
 8016ca8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 8016cac:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 8016cb0:	e0bffa17 	ldw	r2,-24(fp)
 8016cb4:	10800283 	ldbu	r2,10(r2)
 8016cb8:	10803fcc 	andi	r2,r2,255
 8016cbc:	10000d26 	beq	r2,zero,8016cf4 <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8016cc0:	000f883a 	mov	r7,zero
 8016cc4:	01800044 	movi	r6,1
 8016cc8:	000b883a 	mov	r5,zero
 8016ccc:	e13ffa17 	ldw	r4,-24(fp)
 8016cd0:	80121b40 	call	80121b4 <OS_EventTaskRdy>
 8016cd4:	e0bfff17 	ldw	r2,-4(fp)
 8016cd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8016cdc:	e0bffd17 	ldw	r2,-12(fp)
 8016ce0:	1001703a 	wrctl	status,r2
}
 8016ce4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 8016ce8:	8012be80 	call	8012be8 <OS_Sched>
        return (OS_ERR_NONE);
 8016cec:	0005883a 	mov	r2,zero
 8016cf0:	00001806 	br	8016d54 <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8016cf4:	e0bffa17 	ldw	r2,-24(fp)
 8016cf8:	1080020b 	ldhu	r2,8(r2)
 8016cfc:	10ffffcc 	andi	r3,r2,65535
 8016d00:	00bfffd4 	movui	r2,65535
 8016d04:	18800d26 	beq	r3,r2,8016d3c <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8016d08:	e0bffa17 	ldw	r2,-24(fp)
 8016d0c:	1080020b 	ldhu	r2,8(r2)
 8016d10:	10800044 	addi	r2,r2,1
 8016d14:	1007883a 	mov	r3,r2
 8016d18:	e0bffa17 	ldw	r2,-24(fp)
 8016d1c:	10c0020d 	sth	r3,8(r2)
 8016d20:	e0bfff17 	ldw	r2,-4(fp)
 8016d24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8016d28:	e0bffc17 	ldw	r2,-16(fp)
 8016d2c:	1001703a 	wrctl	status,r2
}
 8016d30:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 8016d34:	0005883a 	mov	r2,zero
 8016d38:	00000606 	br	8016d54 <OSSemPost+0x108>
 8016d3c:	e0bfff17 	ldw	r2,-4(fp)
 8016d40:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016d44:	e0bffb17 	ldw	r2,-20(fp)
 8016d48:	1001703a 	wrctl	status,r2
}
 8016d4c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 8016d50:	00800c84 	movi	r2,50
}
 8016d54:	e037883a 	mov	sp,fp
 8016d58:	dfc00117 	ldw	ra,4(sp)
 8016d5c:	df000017 	ldw	fp,0(sp)
 8016d60:	dec00204 	addi	sp,sp,8
 8016d64:	f800283a 	ret

08016d68 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 8016d68:	defff704 	addi	sp,sp,-36
 8016d6c:	df000815 	stw	fp,32(sp)
 8016d70:	df000804 	addi	fp,sp,32
 8016d74:	e13ff915 	stw	r4,-28(fp)
 8016d78:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8016d7c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8016d80:	e0bff917 	ldw	r2,-28(fp)
 8016d84:	1000021e 	bne	r2,zero,8016d90 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 8016d88:	00800104 	movi	r2,4
 8016d8c:	00003706 	br	8016e6c <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 8016d90:	e0bff817 	ldw	r2,-32(fp)
 8016d94:	1000021e 	bne	r2,zero,8016da0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 8016d98:	00800244 	movi	r2,9
 8016d9c:	00003306 	br	8016e6c <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 8016da0:	e0bff917 	ldw	r2,-28(fp)
 8016da4:	10800003 	ldbu	r2,0(r2)
 8016da8:	10803fcc 	andi	r2,r2,255
 8016dac:	108000e0 	cmpeqi	r2,r2,3
 8016db0:	1000021e 	bne	r2,zero,8016dbc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8016db4:	00800044 	movi	r2,1
 8016db8:	00002c06 	br	8016e6c <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
 8016dbc:	0005303a 	rdctl	r2,status
 8016dc0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016dc4:	e0fffb17 	ldw	r3,-20(fp)
 8016dc8:	00bfff84 	movi	r2,-2
 8016dcc:	1884703a 	and	r2,r3,r2
 8016dd0:	1001703a 	wrctl	status,r2
  return context;
 8016dd4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8016dd8:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 8016ddc:	e0bff917 	ldw	r2,-28(fp)
 8016de0:	10c00283 	ldbu	r3,10(r2)
 8016de4:	e0bff817 	ldw	r2,-32(fp)
 8016de8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 8016dec:	e0bff917 	ldw	r2,-28(fp)
 8016df0:	108002c4 	addi	r2,r2,11
 8016df4:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 8016df8:	e0bff817 	ldw	r2,-32(fp)
 8016dfc:	10800084 	addi	r2,r2,2
 8016e00:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8016e04:	e03ffdc5 	stb	zero,-9(fp)
 8016e08:	00000b06 	br	8016e38 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 8016e0c:	e0ffff17 	ldw	r3,-4(fp)
 8016e10:	18800044 	addi	r2,r3,1
 8016e14:	e0bfff15 	stw	r2,-4(fp)
 8016e18:	e0bffe17 	ldw	r2,-8(fp)
 8016e1c:	11000044 	addi	r4,r2,1
 8016e20:	e13ffe15 	stw	r4,-8(fp)
 8016e24:	18c00003 	ldbu	r3,0(r3)
 8016e28:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8016e2c:	e0bffdc3 	ldbu	r2,-9(fp)
 8016e30:	10800044 	addi	r2,r2,1
 8016e34:	e0bffdc5 	stb	r2,-9(fp)
 8016e38:	e0bffdc3 	ldbu	r2,-9(fp)
 8016e3c:	108000f0 	cmpltui	r2,r2,3
 8016e40:	103ff21e 	bne	r2,zero,8016e0c <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 8016e44:	e0bff917 	ldw	r2,-28(fp)
 8016e48:	10c0020b 	ldhu	r3,8(r2)
 8016e4c:	e0bff817 	ldw	r2,-32(fp)
 8016e50:	10c0000d 	sth	r3,0(r2)
 8016e54:	e0bffc17 	ldw	r2,-16(fp)
 8016e58:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8016e5c:	e0bffa17 	ldw	r2,-24(fp)
 8016e60:	1001703a 	wrctl	status,r2
}
 8016e64:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8016e68:	0005883a 	mov	r2,zero
}
 8016e6c:	e037883a 	mov	sp,fp
 8016e70:	df000017 	ldw	fp,0(sp)
 8016e74:	dec00104 	addi	sp,sp,4
 8016e78:	f800283a 	ret

08016e7c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 8016e7c:	defff904 	addi	sp,sp,-28
 8016e80:	df000615 	stw	fp,24(sp)
 8016e84:	df000604 	addi	fp,sp,24
 8016e88:	e13ffc15 	stw	r4,-16(fp)
 8016e8c:	2805883a 	mov	r2,r5
 8016e90:	e1bffa15 	stw	r6,-24(fp)
 8016e94:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8016e98:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8016e9c:	e0bffa17 	ldw	r2,-24(fp)
 8016ea0:	10003126 	beq	r2,zero,8016f68 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8016ea4:	e0bffc17 	ldw	r2,-16(fp)
 8016ea8:	1000041e 	bne	r2,zero,8016ebc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 8016eac:	e0bffa17 	ldw	r2,-24(fp)
 8016eb0:	00c00104 	movi	r3,4
 8016eb4:	10c00005 	stb	r3,0(r2)
        return;
 8016eb8:	00002c06 	br	8016f6c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8016ebc:	e0bffc17 	ldw	r2,-16(fp)
 8016ec0:	10800003 	ldbu	r2,0(r2)
 8016ec4:	10803fcc 	andi	r2,r2,255
 8016ec8:	108000e0 	cmpeqi	r2,r2,3
 8016ecc:	1000041e 	bne	r2,zero,8016ee0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 8016ed0:	e0bffa17 	ldw	r2,-24(fp)
 8016ed4:	00c00044 	movi	r3,1
 8016ed8:	10c00005 	stb	r3,0(r2)
        return;
 8016edc:	00002306 	br	8016f6c <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
 8016ee0:	0005303a 	rdctl	r2,status
 8016ee4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016ee8:	e0fffe17 	ldw	r3,-8(fp)
 8016eec:	00bfff84 	movi	r2,-2
 8016ef0:	1884703a 	and	r2,r3,r2
 8016ef4:	1001703a 	wrctl	status,r2
  return context;
 8016ef8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 8016efc:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
 8016f00:	e0bffa17 	ldw	r2,-24(fp)
 8016f04:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 8016f08:	e0bffc17 	ldw	r2,-16(fp)
 8016f0c:	1080020b 	ldhu	r2,8(r2)
 8016f10:	10bfffcc 	andi	r2,r2,65535
 8016f14:	10000426 	beq	r2,zero,8016f28 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 8016f18:	e0bffc17 	ldw	r2,-16(fp)
 8016f1c:	e0fffb0b 	ldhu	r3,-20(fp)
 8016f20:	10c0020d 	sth	r3,8(r2)
 8016f24:	00000b06 	br	8016f54 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 8016f28:	e0bffc17 	ldw	r2,-16(fp)
 8016f2c:	10800283 	ldbu	r2,10(r2)
 8016f30:	10803fcc 	andi	r2,r2,255
 8016f34:	1000041e 	bne	r2,zero,8016f48 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 8016f38:	e0bffc17 	ldw	r2,-16(fp)
 8016f3c:	e0fffb0b 	ldhu	r3,-20(fp)
 8016f40:	10c0020d 	sth	r3,8(r2)
 8016f44:	00000306 	br	8016f54 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 8016f48:	e0bffa17 	ldw	r2,-24(fp)
 8016f4c:	00c01244 	movi	r3,73
 8016f50:	10c00005 	stb	r3,0(r2)
 8016f54:	e0bfff17 	ldw	r2,-4(fp)
 8016f58:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8016f5c:	e0bffd17 	ldw	r2,-12(fp)
 8016f60:	1001703a 	wrctl	status,r2
}
 8016f64:	00000106 	br	8016f6c <OSSemSet+0xf0>
        return;
 8016f68:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
 8016f6c:	e037883a 	mov	sp,fp
 8016f70:	df000017 	ldw	fp,0(sp)
 8016f74:	dec00104 	addi	sp,sp,4
 8016f78:	f800283a 	ret

08016f7c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 8016f7c:	defff104 	addi	sp,sp,-60
 8016f80:	dfc00e15 	stw	ra,56(sp)
 8016f84:	df000d15 	stw	fp,52(sp)
 8016f88:	df000d04 	addi	fp,sp,52
 8016f8c:	2005883a 	mov	r2,r4
 8016f90:	2807883a 	mov	r3,r5
 8016f94:	e0bff405 	stb	r2,-48(fp)
 8016f98:	1805883a 	mov	r2,r3
 8016f9c:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 8016fa0:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 8016fa4:	e0bff403 	ldbu	r2,-48(fp)
 8016fa8:	10800530 	cmpltui	r2,r2,20
 8016fac:	1000051e 	bne	r2,zero,8016fc4 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
 8016fb0:	e0bff403 	ldbu	r2,-48(fp)
 8016fb4:	10803fe0 	cmpeqi	r2,r2,255
 8016fb8:	1000021e 	bne	r2,zero,8016fc4 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
 8016fbc:	00800a84 	movi	r2,42
 8016fc0:	00011a06 	br	801742c <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 8016fc4:	e0bff303 	ldbu	r2,-52(fp)
 8016fc8:	10800530 	cmpltui	r2,r2,20
 8016fcc:	1000021e 	bne	r2,zero,8016fd8 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
 8016fd0:	00800a84 	movi	r2,42
 8016fd4:	00011506 	br	801742c <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
 8016fd8:	0005303a 	rdctl	r2,status
 8016fdc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016fe0:	e0fff917 	ldw	r3,-28(fp)
 8016fe4:	00bfff84 	movi	r2,-2
 8016fe8:	1884703a 	and	r2,r3,r2
 8016fec:	1001703a 	wrctl	status,r2
  return context;
 8016ff0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8016ff4:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 8016ff8:	e0bff303 	ldbu	r2,-52(fp)
 8016ffc:	100690ba 	slli	r3,r2,2
 8017000:	008201b4 	movhi	r2,2054
 8017004:	1885883a 	add	r2,r3,r2
 8017008:	10b90c17 	ldw	r2,-7120(r2)
 801700c:	10000726 	beq	r2,zero,801702c <OSTaskChangePrio+0xb0>
 8017010:	e0bffd17 	ldw	r2,-12(fp)
 8017014:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8017018:	e0bff817 	ldw	r2,-32(fp)
 801701c:	1001703a 	wrctl	status,r2
}
 8017020:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 8017024:	00800a04 	movi	r2,40
 8017028:	00010006 	br	801742c <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 801702c:	e0bff403 	ldbu	r2,-48(fp)
 8017030:	10803fd8 	cmpnei	r2,r2,255
 8017034:	1000031e 	bne	r2,zero,8017044 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 8017038:	d0a07517 	ldw	r2,-32300(gp)
 801703c:	10800c83 	ldbu	r2,50(r2)
 8017040:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 8017044:	e0bff403 	ldbu	r2,-48(fp)
 8017048:	100690ba 	slli	r3,r2,2
 801704c:	008201b4 	movhi	r2,2054
 8017050:	1885883a 	add	r2,r3,r2
 8017054:	10b90c17 	ldw	r2,-7120(r2)
 8017058:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 801705c:	e0bffc17 	ldw	r2,-16(fp)
 8017060:	1000071e 	bne	r2,zero,8017080 <OSTaskChangePrio+0x104>
 8017064:	e0bffd17 	ldw	r2,-12(fp)
 8017068:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801706c:	e0bff717 	ldw	r2,-36(fp)
 8017070:	1001703a 	wrctl	status,r2
}
 8017074:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 8017078:	00800a44 	movi	r2,41
 801707c:	0000eb06 	br	801742c <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 8017080:	e0bffc17 	ldw	r2,-16(fp)
 8017084:	10800058 	cmpnei	r2,r2,1
 8017088:	1000071e 	bne	r2,zero,80170a8 <OSTaskChangePrio+0x12c>
 801708c:	e0bffd17 	ldw	r2,-12(fp)
 8017090:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8017094:	e0bff617 	ldw	r2,-40(fp)
 8017098:	1001703a 	wrctl	status,r2
}
 801709c:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 80170a0:	008010c4 	movi	r2,67
 80170a4:	0000e106 	br	801742c <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 80170a8:	e0bff303 	ldbu	r2,-52(fp)
 80170ac:	1004d0fa 	srli	r2,r2,3
 80170b0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 80170b4:	e0bff303 	ldbu	r2,-52(fp)
 80170b8:	108001cc 	andi	r2,r2,7
 80170bc:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
 80170c0:	e0bffbc3 	ldbu	r2,-17(fp)
 80170c4:	00c00044 	movi	r3,1
 80170c8:	1884983a 	sll	r2,r3,r2
 80170cc:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
 80170d0:	e0bffb83 	ldbu	r2,-18(fp)
 80170d4:	00c00044 	movi	r3,1
 80170d8:	1884983a 	sll	r2,r3,r2
 80170dc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 80170e0:	e0bff403 	ldbu	r2,-48(fp)
 80170e4:	100690ba 	slli	r3,r2,2
 80170e8:	008201b4 	movhi	r2,2054
 80170ec:	1885883a 	add	r2,r3,r2
 80170f0:	10390c15 	stw	zero,-7120(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 80170f4:	e0bff303 	ldbu	r2,-52(fp)
 80170f8:	100890ba 	slli	r4,r2,2
 80170fc:	e0fffc17 	ldw	r3,-16(fp)
 8017100:	008201b4 	movhi	r2,2054
 8017104:	2085883a 	add	r2,r4,r2
 8017108:	10f90c15 	stw	r3,-7120(r2)
    y_old                 =  ptcb->OSTCBY;
 801710c:	e0bffc17 	ldw	r2,-16(fp)
 8017110:	10800d03 	ldbu	r2,52(r2)
 8017114:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
 8017118:	e0bffc17 	ldw	r2,-16(fp)
 801711c:	10800d83 	ldbu	r2,54(r2)
 8017120:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 8017124:	e0bffc17 	ldw	r2,-16(fp)
 8017128:	10800d43 	ldbu	r2,53(r2)
 801712c:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 8017130:	e0fffac3 	ldbu	r3,-21(fp)
 8017134:	d0a07244 	addi	r2,gp,-32311
 8017138:	1885883a 	add	r2,r3,r2
 801713c:	10800003 	ldbu	r2,0(r2)
 8017140:	e0fffa43 	ldbu	r3,-23(fp)
 8017144:	1884703a 	and	r2,r3,r2
 8017148:	10803fcc 	andi	r2,r2,255
 801714c:	10002826 	beq	r2,zero,80171f0 <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
 8017150:	e0fffac3 	ldbu	r3,-21(fp)
 8017154:	d0a07244 	addi	r2,gp,-32311
 8017158:	1885883a 	add	r2,r3,r2
 801715c:	10800003 	ldbu	r2,0(r2)
 8017160:	1007883a 	mov	r3,r2
 8017164:	e0bffa43 	ldbu	r2,-23(fp)
 8017168:	0084303a 	nor	r2,zero,r2
 801716c:	1884703a 	and	r2,r3,r2
 8017170:	e0fffac3 	ldbu	r3,-21(fp)
 8017174:	1009883a 	mov	r4,r2
 8017178:	d0a07244 	addi	r2,gp,-32311
 801717c:	1885883a 	add	r2,r3,r2
 8017180:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 8017184:	e0fffac3 	ldbu	r3,-21(fp)
 8017188:	d0a07244 	addi	r2,gp,-32311
 801718c:	1885883a 	add	r2,r3,r2
 8017190:	10800003 	ldbu	r2,0(r2)
 8017194:	10803fcc 	andi	r2,r2,255
 8017198:	1000061e 	bne	r2,zero,80171b4 <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
 801719c:	e0bffa83 	ldbu	r2,-22(fp)
 80171a0:	0084303a 	nor	r2,zero,r2
 80171a4:	1007883a 	mov	r3,r2
 80171a8:	d0a07203 	ldbu	r2,-32312(gp)
 80171ac:	1884703a 	and	r2,r3,r2
 80171b0:	d0a07205 	stb	r2,-32312(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 80171b4:	d0a07203 	ldbu	r2,-32312(gp)
 80171b8:	e0fffb43 	ldbu	r3,-19(fp)
 80171bc:	1884b03a 	or	r2,r3,r2
 80171c0:	d0a07205 	stb	r2,-32312(gp)
         OSRdyTbl[y_new] |= bitx_new;
 80171c4:	e0fffbc3 	ldbu	r3,-17(fp)
 80171c8:	d0a07244 	addi	r2,gp,-32311
 80171cc:	1885883a 	add	r2,r3,r2
 80171d0:	10800003 	ldbu	r2,0(r2)
 80171d4:	e0fffbc3 	ldbu	r3,-17(fp)
 80171d8:	e13ffb03 	ldbu	r4,-20(fp)
 80171dc:	2084b03a 	or	r2,r4,r2
 80171e0:	1009883a 	mov	r4,r2
 80171e4:	d0a07244 	addi	r2,gp,-32311
 80171e8:	1885883a 	add	r2,r3,r2
 80171ec:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 80171f0:	e0bffc17 	ldw	r2,-16(fp)
 80171f4:	10800717 	ldw	r2,28(r2)
 80171f8:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
 80171fc:	e0bfff17 	ldw	r2,-4(fp)
 8017200:	10002f26 	beq	r2,zero,80172c0 <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 8017204:	e0bffac3 	ldbu	r2,-21(fp)
 8017208:	e0ffff17 	ldw	r3,-4(fp)
 801720c:	1885883a 	add	r2,r3,r2
 8017210:	108002c3 	ldbu	r2,11(r2)
 8017214:	1007883a 	mov	r3,r2
 8017218:	e0bffa43 	ldbu	r2,-23(fp)
 801721c:	0084303a 	nor	r2,zero,r2
 8017220:	1884703a 	and	r2,r3,r2
 8017224:	1007883a 	mov	r3,r2
 8017228:	e0bffac3 	ldbu	r2,-21(fp)
 801722c:	1809883a 	mov	r4,r3
 8017230:	e0ffff17 	ldw	r3,-4(fp)
 8017234:	1885883a 	add	r2,r3,r2
 8017238:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 801723c:	e0bffac3 	ldbu	r2,-21(fp)
 8017240:	e0ffff17 	ldw	r3,-4(fp)
 8017244:	1885883a 	add	r2,r3,r2
 8017248:	108002c3 	ldbu	r2,11(r2)
 801724c:	10803fcc 	andi	r2,r2,255
 8017250:	1000091e 	bne	r2,zero,8017278 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
 8017254:	e0bfff17 	ldw	r2,-4(fp)
 8017258:	10800283 	ldbu	r2,10(r2)
 801725c:	1007883a 	mov	r3,r2
 8017260:	e0bffa83 	ldbu	r2,-22(fp)
 8017264:	0084303a 	nor	r2,zero,r2
 8017268:	1884703a 	and	r2,r3,r2
 801726c:	1007883a 	mov	r3,r2
 8017270:	e0bfff17 	ldw	r2,-4(fp)
 8017274:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 8017278:	e0bfff17 	ldw	r2,-4(fp)
 801727c:	10800283 	ldbu	r2,10(r2)
 8017280:	e0fffb43 	ldbu	r3,-19(fp)
 8017284:	1884b03a 	or	r2,r3,r2
 8017288:	1007883a 	mov	r3,r2
 801728c:	e0bfff17 	ldw	r2,-4(fp)
 8017290:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 8017294:	e0bffbc3 	ldbu	r2,-17(fp)
 8017298:	e0ffff17 	ldw	r3,-4(fp)
 801729c:	1885883a 	add	r2,r3,r2
 80172a0:	10c002c3 	ldbu	r3,11(r2)
 80172a4:	e0bffbc3 	ldbu	r2,-17(fp)
 80172a8:	e13ffb03 	ldbu	r4,-20(fp)
 80172ac:	20c6b03a 	or	r3,r4,r3
 80172b0:	1809883a 	mov	r4,r3
 80172b4:	e0ffff17 	ldw	r3,-4(fp)
 80172b8:	1885883a 	add	r2,r3,r2
 80172bc:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 80172c0:	e0bffc17 	ldw	r2,-16(fp)
 80172c4:	10800817 	ldw	r2,32(r2)
 80172c8:	10003e26 	beq	r2,zero,80173c4 <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
 80172cc:	e0bffc17 	ldw	r2,-16(fp)
 80172d0:	10800817 	ldw	r2,32(r2)
 80172d4:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
 80172d8:	e0bffe17 	ldw	r2,-8(fp)
 80172dc:	10800017 	ldw	r2,0(r2)
 80172e0:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
 80172e4:	00003506 	br	80173bc <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 80172e8:	e0bffac3 	ldbu	r2,-21(fp)
 80172ec:	e0ffff17 	ldw	r3,-4(fp)
 80172f0:	1885883a 	add	r2,r3,r2
 80172f4:	108002c3 	ldbu	r2,11(r2)
 80172f8:	1007883a 	mov	r3,r2
 80172fc:	e0bffa43 	ldbu	r2,-23(fp)
 8017300:	0084303a 	nor	r2,zero,r2
 8017304:	1884703a 	and	r2,r3,r2
 8017308:	1007883a 	mov	r3,r2
 801730c:	e0bffac3 	ldbu	r2,-21(fp)
 8017310:	1809883a 	mov	r4,r3
 8017314:	e0ffff17 	ldw	r3,-4(fp)
 8017318:	1885883a 	add	r2,r3,r2
 801731c:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 8017320:	e0bffac3 	ldbu	r2,-21(fp)
 8017324:	e0ffff17 	ldw	r3,-4(fp)
 8017328:	1885883a 	add	r2,r3,r2
 801732c:	108002c3 	ldbu	r2,11(r2)
 8017330:	10803fcc 	andi	r2,r2,255
 8017334:	1000091e 	bne	r2,zero,801735c <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
 8017338:	e0bfff17 	ldw	r2,-4(fp)
 801733c:	10800283 	ldbu	r2,10(r2)
 8017340:	1007883a 	mov	r3,r2
 8017344:	e0bffa83 	ldbu	r2,-22(fp)
 8017348:	0084303a 	nor	r2,zero,r2
 801734c:	1884703a 	and	r2,r3,r2
 8017350:	1007883a 	mov	r3,r2
 8017354:	e0bfff17 	ldw	r2,-4(fp)
 8017358:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 801735c:	e0bfff17 	ldw	r2,-4(fp)
 8017360:	10800283 	ldbu	r2,10(r2)
 8017364:	e0fffb43 	ldbu	r3,-19(fp)
 8017368:	1884b03a 	or	r2,r3,r2
 801736c:	1007883a 	mov	r3,r2
 8017370:	e0bfff17 	ldw	r2,-4(fp)
 8017374:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 8017378:	e0bffbc3 	ldbu	r2,-17(fp)
 801737c:	e0ffff17 	ldw	r3,-4(fp)
 8017380:	1885883a 	add	r2,r3,r2
 8017384:	10c002c3 	ldbu	r3,11(r2)
 8017388:	e0bffbc3 	ldbu	r2,-17(fp)
 801738c:	e13ffb03 	ldbu	r4,-20(fp)
 8017390:	20c6b03a 	or	r3,r4,r3
 8017394:	1809883a 	mov	r4,r3
 8017398:	e0ffff17 	ldw	r3,-4(fp)
 801739c:	1885883a 	add	r2,r3,r2
 80173a0:	110002c5 	stb	r4,11(r2)
            pevents++;
 80173a4:	e0bffe17 	ldw	r2,-8(fp)
 80173a8:	10800104 	addi	r2,r2,4
 80173ac:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
 80173b0:	e0bffe17 	ldw	r2,-8(fp)
 80173b4:	10800017 	ldw	r2,0(r2)
 80173b8:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
 80173bc:	e0bfff17 	ldw	r2,-4(fp)
 80173c0:	103fc91e 	bne	r2,zero,80172e8 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 80173c4:	e0bffc17 	ldw	r2,-16(fp)
 80173c8:	e0fff303 	ldbu	r3,-52(fp)
 80173cc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 80173d0:	e0bffc17 	ldw	r2,-16(fp)
 80173d4:	e0fffbc3 	ldbu	r3,-17(fp)
 80173d8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 80173dc:	e0bffc17 	ldw	r2,-16(fp)
 80173e0:	e0fffb83 	ldbu	r3,-18(fp)
 80173e4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 80173e8:	e0bffc17 	ldw	r2,-16(fp)
 80173ec:	e0fffb43 	ldbu	r3,-19(fp)
 80173f0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 80173f4:	e0bffc17 	ldw	r2,-16(fp)
 80173f8:	e0fffb03 	ldbu	r3,-20(fp)
 80173fc:	10c00d45 	stb	r3,53(r2)
 8017400:	e0bffd17 	ldw	r2,-12(fp)
 8017404:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 8017408:	e0bff517 	ldw	r2,-44(fp)
 801740c:	1001703a 	wrctl	status,r2
}
 8017410:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 8017414:	d0a06643 	ldbu	r2,-32359(gp)
 8017418:	10803fcc 	andi	r2,r2,255
 801741c:	10800058 	cmpnei	r2,r2,1
 8017420:	1000011e 	bne	r2,zero,8017428 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
 8017424:	8012be80 	call	8012be8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8017428:	0005883a 	mov	r2,zero
}
 801742c:	e037883a 	mov	sp,fp
 8017430:	dfc00117 	ldw	ra,4(sp)
 8017434:	df000017 	ldw	fp,0(sp)
 8017438:	dec00204 	addi	sp,sp,8
 801743c:	f800283a 	ret

08017440 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 8017440:	deffee04 	addi	sp,sp,-72
 8017444:	dfc01115 	stw	ra,68(sp)
 8017448:	df001015 	stw	fp,64(sp)
 801744c:	df001004 	addi	fp,sp,64
 8017450:	e13ff615 	stw	r4,-40(fp)
 8017454:	e17ff515 	stw	r5,-44(fp)
 8017458:	e1bff415 	stw	r6,-48(fp)
 801745c:	3805883a 	mov	r2,r7
 8017460:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 8017464:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8017468:	e0bff303 	ldbu	r2,-52(fp)
 801746c:	10800570 	cmpltui	r2,r2,21
 8017470:	1000021e 	bne	r2,zero,801747c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 8017474:	00800a84 	movi	r2,42
 8017478:	00005506 	br	80175d0 <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
 801747c:	0005303a 	rdctl	r2,status
 8017480:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017484:	e0fffc17 	ldw	r3,-16(fp)
 8017488:	00bfff84 	movi	r2,-2
 801748c:	1884703a 	and	r2,r3,r2
 8017490:	1001703a 	wrctl	status,r2
  return context;
 8017494:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8017498:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 801749c:	d0a07403 	ldbu	r2,-32304(gp)
 80174a0:	10803fcc 	andi	r2,r2,255
 80174a4:	10000726 	beq	r2,zero,80174c4 <OSTaskCreate+0x84>
 80174a8:	e0bfff17 	ldw	r2,-4(fp)
 80174ac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80174b0:	e0bffb17 	ldw	r2,-20(fp)
 80174b4:	1001703a 	wrctl	status,r2
}
 80174b8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 80174bc:	00800f04 	movi	r2,60
 80174c0:	00004306 	br	80175d0 <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80174c4:	e0bff303 	ldbu	r2,-52(fp)
 80174c8:	100690ba 	slli	r3,r2,2
 80174cc:	008201b4 	movhi	r2,2054
 80174d0:	1885883a 	add	r2,r3,r2
 80174d4:	10b90c17 	ldw	r2,-7120(r2)
 80174d8:	1000371e 	bne	r2,zero,80175b8 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 80174dc:	e0bff303 	ldbu	r2,-52(fp)
 80174e0:	100890ba 	slli	r4,r2,2
 80174e4:	00c00044 	movi	r3,1
 80174e8:	008201b4 	movhi	r2,2054
 80174ec:	2085883a 	add	r2,r4,r2
 80174f0:	10f90c15 	stw	r3,-7120(r2)
 80174f4:	e0bfff17 	ldw	r2,-4(fp)
 80174f8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80174fc:	e0bffa17 	ldw	r2,-24(fp)
 8017500:	1001703a 	wrctl	status,r2
}
 8017504:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 8017508:	000f883a 	mov	r7,zero
 801750c:	e1bff417 	ldw	r6,-48(fp)
 8017510:	e17ff517 	ldw	r5,-44(fp)
 8017514:	e13ff617 	ldw	r4,-40(fp)
 8017518:	803be940 	call	803be94 <OSTaskStkInit>
 801751c:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 8017520:	e0bff303 	ldbu	r2,-52(fp)
 8017524:	d8000215 	stw	zero,8(sp)
 8017528:	d8000115 	stw	zero,4(sp)
 801752c:	d8000015 	stw	zero,0(sp)
 8017530:	000f883a 	mov	r7,zero
 8017534:	000d883a 	mov	r6,zero
 8017538:	e17ffe17 	ldw	r5,-8(fp)
 801753c:	1009883a 	mov	r4,r2
 8017540:	8012fdc0 	call	8012fdc <OS_TCBInit>
 8017544:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
 8017548:	e0bffdc3 	ldbu	r2,-9(fp)
 801754c:	1000061e 	bne	r2,zero,8017568 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8017550:	d0a06643 	ldbu	r2,-32359(gp)
 8017554:	10803fcc 	andi	r2,r2,255
 8017558:	10800058 	cmpnei	r2,r2,1
 801755c:	1000141e 	bne	r2,zero,80175b0 <OSTaskCreate+0x170>
                OS_Sched();
 8017560:	8012be80 	call	8012be8 <OS_Sched>
 8017564:	00001206 	br	80175b0 <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
 8017568:	0005303a 	rdctl	r2,status
 801756c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017570:	e0fff817 	ldw	r3,-32(fp)
 8017574:	00bfff84 	movi	r2,-2
 8017578:	1884703a 	and	r2,r3,r2
 801757c:	1001703a 	wrctl	status,r2
  return context;
 8017580:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 8017584:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8017588:	e0bff303 	ldbu	r2,-52(fp)
 801758c:	100690ba 	slli	r3,r2,2
 8017590:	008201b4 	movhi	r2,2054
 8017594:	1885883a 	add	r2,r3,r2
 8017598:	10390c15 	stw	zero,-7120(r2)
 801759c:	e0bfff17 	ldw	r2,-4(fp)
 80175a0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 80175a4:	e0bff917 	ldw	r2,-28(fp)
 80175a8:	1001703a 	wrctl	status,r2
}
 80175ac:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
 80175b0:	e0bffdc3 	ldbu	r2,-9(fp)
 80175b4:	00000606 	br	80175d0 <OSTaskCreate+0x190>
 80175b8:	e0bfff17 	ldw	r2,-4(fp)
 80175bc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80175c0:	e0bff717 	ldw	r2,-36(fp)
 80175c4:	1001703a 	wrctl	status,r2
}
 80175c8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 80175cc:	00800a04 	movi	r2,40
}
 80175d0:	e037883a 	mov	sp,fp
 80175d4:	dfc00117 	ldw	ra,4(sp)
 80175d8:	df000017 	ldw	fp,0(sp)
 80175dc:	dec00204 	addi	sp,sp,8
 80175e0:	f800283a 	ret

080175e4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 80175e4:	deffec04 	addi	sp,sp,-80
 80175e8:	dfc01315 	stw	ra,76(sp)
 80175ec:	df001215 	stw	fp,72(sp)
 80175f0:	df001204 	addi	fp,sp,72
 80175f4:	e13ff615 	stw	r4,-40(fp)
 80175f8:	e17ff515 	stw	r5,-44(fp)
 80175fc:	e1bff415 	stw	r6,-48(fp)
 8017600:	3809883a 	mov	r4,r7
 8017604:	e0c00217 	ldw	r3,8(fp)
 8017608:	e0800617 	ldw	r2,24(fp)
 801760c:	e13ff305 	stb	r4,-52(fp)
 8017610:	e0fff20d 	sth	r3,-56(fp)
 8017614:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 8017618:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 801761c:	e0bff303 	ldbu	r2,-52(fp)
 8017620:	10800570 	cmpltui	r2,r2,21
 8017624:	1000021e 	bne	r2,zero,8017630 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 8017628:	00800a84 	movi	r2,42
 801762c:	00005f06 	br	80177ac <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
 8017630:	0005303a 	rdctl	r2,status
 8017634:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017638:	e0fffc17 	ldw	r3,-16(fp)
 801763c:	00bfff84 	movi	r2,-2
 8017640:	1884703a 	and	r2,r3,r2
 8017644:	1001703a 	wrctl	status,r2
  return context;
 8017648:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 801764c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 8017650:	d0a07403 	ldbu	r2,-32304(gp)
 8017654:	10803fcc 	andi	r2,r2,255
 8017658:	10000726 	beq	r2,zero,8017678 <OSTaskCreateExt+0x94>
 801765c:	e0bfff17 	ldw	r2,-4(fp)
 8017660:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017664:	e0bffb17 	ldw	r2,-20(fp)
 8017668:	1001703a 	wrctl	status,r2
}
 801766c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 8017670:	00800f04 	movi	r2,60
 8017674:	00004d06 	br	80177ac <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8017678:	e0bff303 	ldbu	r2,-52(fp)
 801767c:	100690ba 	slli	r3,r2,2
 8017680:	008201b4 	movhi	r2,2054
 8017684:	1885883a 	add	r2,r3,r2
 8017688:	10b90c17 	ldw	r2,-7120(r2)
 801768c:	1000411e 	bne	r2,zero,8017794 <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8017690:	e0bff303 	ldbu	r2,-52(fp)
 8017694:	100890ba 	slli	r4,r2,2
 8017698:	00c00044 	movi	r3,1
 801769c:	008201b4 	movhi	r2,2054
 80176a0:	2085883a 	add	r2,r4,r2
 80176a4:	10f90c15 	stw	r3,-7120(r2)
 80176a8:	e0bfff17 	ldw	r2,-4(fp)
 80176ac:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80176b0:	e0bffa17 	ldw	r2,-24(fp)
 80176b4:	1001703a 	wrctl	status,r2
}
 80176b8:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80176bc:	e0bff10b 	ldhu	r2,-60(fp)
 80176c0:	100d883a 	mov	r6,r2
 80176c4:	e1400417 	ldw	r5,16(fp)
 80176c8:	e1000317 	ldw	r4,12(fp)
 80176cc:	801865c0 	call	801865c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80176d0:	e0bff10b 	ldhu	r2,-60(fp)
 80176d4:	100f883a 	mov	r7,r2
 80176d8:	e1bff417 	ldw	r6,-48(fp)
 80176dc:	e17ff517 	ldw	r5,-44(fp)
 80176e0:	e13ff617 	ldw	r4,-40(fp)
 80176e4:	803be940 	call	803be94 <OSTaskStkInit>
 80176e8:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80176ec:	e0fff303 	ldbu	r3,-52(fp)
 80176f0:	e13ff20b 	ldhu	r4,-56(fp)
 80176f4:	e0bff10b 	ldhu	r2,-60(fp)
 80176f8:	d8800215 	stw	r2,8(sp)
 80176fc:	e0800517 	ldw	r2,20(fp)
 8017700:	d8800115 	stw	r2,4(sp)
 8017704:	e0800417 	ldw	r2,16(fp)
 8017708:	d8800015 	stw	r2,0(sp)
 801770c:	200f883a 	mov	r7,r4
 8017710:	e1800317 	ldw	r6,12(fp)
 8017714:	e17ffe17 	ldw	r5,-8(fp)
 8017718:	1809883a 	mov	r4,r3
 801771c:	8012fdc0 	call	8012fdc <OS_TCBInit>
 8017720:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
 8017724:	e0bffdc3 	ldbu	r2,-9(fp)
 8017728:	1000061e 	bne	r2,zero,8017744 <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 801772c:	d0a06643 	ldbu	r2,-32359(gp)
 8017730:	10803fcc 	andi	r2,r2,255
 8017734:	10800058 	cmpnei	r2,r2,1
 8017738:	1000141e 	bne	r2,zero,801778c <OSTaskCreateExt+0x1a8>
                OS_Sched();
 801773c:	8012be80 	call	8012be8 <OS_Sched>
 8017740:	00001206 	br	801778c <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
 8017744:	0005303a 	rdctl	r2,status
 8017748:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801774c:	e0fff817 	ldw	r3,-32(fp)
 8017750:	00bfff84 	movi	r2,-2
 8017754:	1884703a 	and	r2,r3,r2
 8017758:	1001703a 	wrctl	status,r2
  return context;
 801775c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 8017760:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8017764:	e0bff303 	ldbu	r2,-52(fp)
 8017768:	100690ba 	slli	r3,r2,2
 801776c:	008201b4 	movhi	r2,2054
 8017770:	1885883a 	add	r2,r3,r2
 8017774:	10390c15 	stw	zero,-7120(r2)
 8017778:	e0bfff17 	ldw	r2,-4(fp)
 801777c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017780:	e0bff917 	ldw	r2,-28(fp)
 8017784:	1001703a 	wrctl	status,r2
}
 8017788:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
 801778c:	e0bffdc3 	ldbu	r2,-9(fp)
 8017790:	00000606 	br	80177ac <OSTaskCreateExt+0x1c8>
 8017794:	e0bfff17 	ldw	r2,-4(fp)
 8017798:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 801779c:	e0bff717 	ldw	r2,-36(fp)
 80177a0:	1001703a 	wrctl	status,r2
}
 80177a4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 80177a8:	00800a04 	movi	r2,40
}
 80177ac:	e037883a 	mov	sp,fp
 80177b0:	dfc00117 	ldw	ra,4(sp)
 80177b4:	df000017 	ldw	fp,0(sp)
 80177b8:	dec00204 	addi	sp,sp,8
 80177bc:	f800283a 	ret

080177c0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 80177c0:	defff404 	addi	sp,sp,-48
 80177c4:	dfc00b15 	stw	ra,44(sp)
 80177c8:	df000a15 	stw	fp,40(sp)
 80177cc:	df000a04 	addi	fp,sp,40
 80177d0:	2005883a 	mov	r2,r4
 80177d4:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 80177d8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 80177dc:	d0a07403 	ldbu	r2,-32304(gp)
 80177e0:	10803fcc 	andi	r2,r2,255
 80177e4:	10000226 	beq	r2,zero,80177f0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 80177e8:	00801004 	movi	r2,64
 80177ec:	0000c006 	br	8017af0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 80177f0:	e0bff603 	ldbu	r2,-40(fp)
 80177f4:	10800518 	cmpnei	r2,r2,20
 80177f8:	1000021e 	bne	r2,zero,8017804 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 80177fc:	00800f84 	movi	r2,62
 8017800:	0000bb06 	br	8017af0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8017804:	e0bff603 	ldbu	r2,-40(fp)
 8017808:	10800530 	cmpltui	r2,r2,20
 801780c:	1000051e 	bne	r2,zero,8017824 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 8017810:	e0bff603 	ldbu	r2,-40(fp)
 8017814:	10803fe0 	cmpeqi	r2,r2,255
 8017818:	1000021e 	bne	r2,zero,8017824 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 801781c:	00800a84 	movi	r2,42
 8017820:	0000b306 	br	8017af0 <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
 8017824:	0005303a 	rdctl	r2,status
 8017828:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801782c:	e0fffc17 	ldw	r3,-16(fp)
 8017830:	00bfff84 	movi	r2,-2
 8017834:	1884703a 	and	r2,r3,r2
 8017838:	1001703a 	wrctl	status,r2
  return context;
 801783c:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8017840:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8017844:	e0bff603 	ldbu	r2,-40(fp)
 8017848:	10803fd8 	cmpnei	r2,r2,255
 801784c:	1000031e 	bne	r2,zero,801785c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8017850:	d0a07517 	ldw	r2,-32300(gp)
 8017854:	10800c83 	ldbu	r2,50(r2)
 8017858:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801785c:	e0bff603 	ldbu	r2,-40(fp)
 8017860:	100690ba 	slli	r3,r2,2
 8017864:	008201b4 	movhi	r2,2054
 8017868:	1885883a 	add	r2,r3,r2
 801786c:	10b90c17 	ldw	r2,-7120(r2)
 8017870:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8017874:	e0bffe17 	ldw	r2,-8(fp)
 8017878:	1000071e 	bne	r2,zero,8017898 <OSTaskDel+0xd8>
 801787c:	e0bfff17 	ldw	r2,-4(fp)
 8017880:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017884:	e0bffb17 	ldw	r2,-20(fp)
 8017888:	1001703a 	wrctl	status,r2
}
 801788c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8017890:	008010c4 	movi	r2,67
 8017894:	00009606 	br	8017af0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8017898:	e0bffe17 	ldw	r2,-8(fp)
 801789c:	10800058 	cmpnei	r2,r2,1
 80178a0:	1000071e 	bne	r2,zero,80178c0 <OSTaskDel+0x100>
 80178a4:	e0bfff17 	ldw	r2,-4(fp)
 80178a8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80178ac:	e0bffa17 	ldw	r2,-24(fp)
 80178b0:	1001703a 	wrctl	status,r2
}
 80178b4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 80178b8:	00800f44 	movi	r2,61
 80178bc:	00008c06 	br	8017af0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 80178c0:	e0bffe17 	ldw	r2,-8(fp)
 80178c4:	10800d03 	ldbu	r2,52(r2)
 80178c8:	10c03fcc 	andi	r3,r2,255
 80178cc:	d0a07244 	addi	r2,gp,-32311
 80178d0:	1885883a 	add	r2,r3,r2
 80178d4:	10800003 	ldbu	r2,0(r2)
 80178d8:	1007883a 	mov	r3,r2
 80178dc:	e0bffe17 	ldw	r2,-8(fp)
 80178e0:	10800d43 	ldbu	r2,53(r2)
 80178e4:	0084303a 	nor	r2,zero,r2
 80178e8:	1884703a 	and	r2,r3,r2
 80178ec:	1009883a 	mov	r4,r2
 80178f0:	e0bffe17 	ldw	r2,-8(fp)
 80178f4:	10800d03 	ldbu	r2,52(r2)
 80178f8:	10c03fcc 	andi	r3,r2,255
 80178fc:	d0a07244 	addi	r2,gp,-32311
 8017900:	1885883a 	add	r2,r3,r2
 8017904:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 8017908:	e0bffe17 	ldw	r2,-8(fp)
 801790c:	10800d03 	ldbu	r2,52(r2)
 8017910:	10c03fcc 	andi	r3,r2,255
 8017914:	d0a07244 	addi	r2,gp,-32311
 8017918:	1885883a 	add	r2,r3,r2
 801791c:	10800003 	ldbu	r2,0(r2)
 8017920:	10803fcc 	andi	r2,r2,255
 8017924:	1000071e 	bne	r2,zero,8017944 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 8017928:	e0bffe17 	ldw	r2,-8(fp)
 801792c:	10800d83 	ldbu	r2,54(r2)
 8017930:	0084303a 	nor	r2,zero,r2
 8017934:	1007883a 	mov	r3,r2
 8017938:	d0a07203 	ldbu	r2,-32312(gp)
 801793c:	1884703a 	and	r2,r3,r2
 8017940:	d0a07205 	stb	r2,-32312(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8017944:	e0bffe17 	ldw	r2,-8(fp)
 8017948:	10800717 	ldw	r2,28(r2)
 801794c:	10000526 	beq	r2,zero,8017964 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8017950:	e0bffe17 	ldw	r2,-8(fp)
 8017954:	10800717 	ldw	r2,28(r2)
 8017958:	100b883a 	mov	r5,r2
 801795c:	e13ffe17 	ldw	r4,-8(fp)
 8017960:	801258c0 	call	801258c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8017964:	e0bffe17 	ldw	r2,-8(fp)
 8017968:	10800817 	ldw	r2,32(r2)
 801796c:	10000526 	beq	r2,zero,8017984 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8017970:	e0bffe17 	ldw	r2,-8(fp)
 8017974:	10800817 	ldw	r2,32(r2)
 8017978:	100b883a 	mov	r5,r2
 801797c:	e13ffe17 	ldw	r4,-8(fp)
 8017980:	801263c0 	call	801263c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 8017984:	e0bffe17 	ldw	r2,-8(fp)
 8017988:	10800a17 	ldw	r2,40(r2)
 801798c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8017990:	e0bffd17 	ldw	r2,-12(fp)
 8017994:	10000226 	beq	r2,zero,80179a0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8017998:	e13ffd17 	ldw	r4,-12(fp)
 801799c:	8014b6c0 	call	8014b6c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 80179a0:	e0bffe17 	ldw	r2,-8(fp)
 80179a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 80179a8:	e0bffe17 	ldw	r2,-8(fp)
 80179ac:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80179b0:	e0bffe17 	ldw	r2,-8(fp)
 80179b4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 80179b8:	d0a06603 	ldbu	r2,-32360(gp)
 80179bc:	10803fcc 	andi	r2,r2,255
 80179c0:	10803fe0 	cmpeqi	r2,r2,255
 80179c4:	1000031e 	bne	r2,zero,80179d4 <OSTaskDel+0x214>
        OSLockNesting++;
 80179c8:	d0a06603 	ldbu	r2,-32360(gp)
 80179cc:	10800044 	addi	r2,r2,1
 80179d0:	d0a06605 	stb	r2,-32360(gp)
 80179d4:	e0bfff17 	ldw	r2,-4(fp)
 80179d8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 80179dc:	e0bff817 	ldw	r2,-32(fp)
 80179e0:	1001703a 	wrctl	status,r2
}
 80179e4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 80179e8:	80121940 	call	8012194 <OS_Dummy>
  NIOS2_READ_STATUS (context);
 80179ec:	0005303a 	rdctl	r2,status
 80179f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80179f4:	e0fff917 	ldw	r3,-28(fp)
 80179f8:	00bfff84 	movi	r2,-2
 80179fc:	1884703a 	and	r2,r3,r2
 8017a00:	1001703a 	wrctl	status,r2
  return context;
 8017a04:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8017a08:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 8017a0c:	d0a06603 	ldbu	r2,-32360(gp)
 8017a10:	10803fcc 	andi	r2,r2,255
 8017a14:	10000326 	beq	r2,zero,8017a24 <OSTaskDel+0x264>
        OSLockNesting--;
 8017a18:	d0a06603 	ldbu	r2,-32360(gp)
 8017a1c:	10bfffc4 	addi	r2,r2,-1
 8017a20:	d0a06605 	stb	r2,-32360(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8017a24:	e13ffe17 	ldw	r4,-8(fp)
 8017a28:	803c0040 	call	803c004 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8017a2c:	d0a06e43 	ldbu	r2,-32327(gp)
 8017a30:	10bfffc4 	addi	r2,r2,-1
 8017a34:	d0a06e45 	stb	r2,-32327(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8017a38:	e0bff603 	ldbu	r2,-40(fp)
 8017a3c:	100690ba 	slli	r3,r2,2
 8017a40:	008201b4 	movhi	r2,2054
 8017a44:	1885883a 	add	r2,r3,r2
 8017a48:	10390c15 	stw	zero,-7120(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8017a4c:	e0bffe17 	ldw	r2,-8(fp)
 8017a50:	10800617 	ldw	r2,24(r2)
 8017a54:	1000071e 	bne	r2,zero,8017a74 <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8017a58:	e0bffe17 	ldw	r2,-8(fp)
 8017a5c:	10800517 	ldw	r2,20(r2)
 8017a60:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 8017a64:	e0bffe17 	ldw	r2,-8(fp)
 8017a68:	10800517 	ldw	r2,20(r2)
 8017a6c:	d0a06915 	stw	r2,-32348(gp)
 8017a70:	00000a06 	br	8017a9c <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8017a74:	e0bffe17 	ldw	r2,-8(fp)
 8017a78:	10800617 	ldw	r2,24(r2)
 8017a7c:	e0fffe17 	ldw	r3,-8(fp)
 8017a80:	18c00517 	ldw	r3,20(r3)
 8017a84:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8017a88:	e0bffe17 	ldw	r2,-8(fp)
 8017a8c:	10800517 	ldw	r2,20(r2)
 8017a90:	e0fffe17 	ldw	r3,-8(fp)
 8017a94:	18c00617 	ldw	r3,24(r3)
 8017a98:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 8017a9c:	d0e06d17 	ldw	r3,-32332(gp)
 8017aa0:	e0bffe17 	ldw	r2,-8(fp)
 8017aa4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 8017aa8:	e0bffe17 	ldw	r2,-8(fp)
 8017aac:	d0a06d15 	stw	r2,-32332(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 8017ab0:	e0bffe17 	ldw	r2,-8(fp)
 8017ab4:	00c00fc4 	movi	r3,63
 8017ab8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 8017abc:	e0bffe17 	ldw	r2,-8(fp)
 8017ac0:	10001345 	stb	zero,77(r2)
 8017ac4:	e0bfff17 	ldw	r2,-4(fp)
 8017ac8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8017acc:	e0bff717 	ldw	r2,-36(fp)
 8017ad0:	1001703a 	wrctl	status,r2
}
 8017ad4:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 8017ad8:	d0a06643 	ldbu	r2,-32359(gp)
 8017adc:	10803fcc 	andi	r2,r2,255
 8017ae0:	10800058 	cmpnei	r2,r2,1
 8017ae4:	1000011e 	bne	r2,zero,8017aec <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 8017ae8:	8012be80 	call	8012be8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8017aec:	0005883a 	mov	r2,zero
}
 8017af0:	e037883a 	mov	sp,fp
 8017af4:	dfc00117 	ldw	ra,4(sp)
 8017af8:	df000017 	ldw	fp,0(sp)
 8017afc:	dec00204 	addi	sp,sp,8
 8017b00:	f800283a 	ret

08017b04 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 8017b04:	defff504 	addi	sp,sp,-44
 8017b08:	df000a15 	stw	fp,40(sp)
 8017b0c:	df000a04 	addi	fp,sp,40
 8017b10:	2005883a 	mov	r2,r4
 8017b14:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8017b18:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 8017b1c:	e0bff603 	ldbu	r2,-40(fp)
 8017b20:	10800518 	cmpnei	r2,r2,20
 8017b24:	1000021e 	bne	r2,zero,8017b30 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 8017b28:	00800f84 	movi	r2,62
 8017b2c:	00004706 	br	8017c4c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8017b30:	e0bff603 	ldbu	r2,-40(fp)
 8017b34:	10800530 	cmpltui	r2,r2,20
 8017b38:	1000051e 	bne	r2,zero,8017b50 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 8017b3c:	e0bff603 	ldbu	r2,-40(fp)
 8017b40:	10803fe0 	cmpeqi	r2,r2,255
 8017b44:	1000021e 	bne	r2,zero,8017b50 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 8017b48:	00800a84 	movi	r2,42
 8017b4c:	00003f06 	br	8017c4c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 8017b50:	e0bff603 	ldbu	r2,-40(fp)
 8017b54:	10803fd8 	cmpnei	r2,r2,255
 8017b58:	1000121e 	bne	r2,zero,8017ba4 <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
 8017b5c:	0005303a 	rdctl	r2,status
 8017b60:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017b64:	e0fffb17 	ldw	r3,-20(fp)
 8017b68:	00bfff84 	movi	r2,-2
 8017b6c:	1884703a 	and	r2,r3,r2
 8017b70:	1001703a 	wrctl	status,r2
  return context;
 8017b74:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 8017b78:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 8017b7c:	d0a07517 	ldw	r2,-32300(gp)
 8017b80:	10800dc3 	ldbu	r2,55(r2)
 8017b84:	e0bffdc5 	stb	r2,-9(fp)
 8017b88:	e0bfff17 	ldw	r2,-4(fp)
 8017b8c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8017b90:	e0bffc17 	ldw	r2,-16(fp)
 8017b94:	1001703a 	wrctl	status,r2
}
 8017b98:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
 8017b9c:	e0bffdc3 	ldbu	r2,-9(fp)
 8017ba0:	00002a06 	br	8017c4c <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
 8017ba4:	0005303a 	rdctl	r2,status
 8017ba8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017bac:	e0fffa17 	ldw	r3,-24(fp)
 8017bb0:	00bfff84 	movi	r2,-2
 8017bb4:	1884703a 	and	r2,r3,r2
 8017bb8:	1001703a 	wrctl	status,r2
  return context;
 8017bbc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8017bc0:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
 8017bc4:	e0bff603 	ldbu	r2,-40(fp)
 8017bc8:	100690ba 	slli	r3,r2,2
 8017bcc:	008201b4 	movhi	r2,2054
 8017bd0:	1885883a 	add	r2,r3,r2
 8017bd4:	10b90c17 	ldw	r2,-7120(r2)
 8017bd8:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 8017bdc:	e0bffe17 	ldw	r2,-8(fp)
 8017be0:	1000071e 	bne	r2,zero,8017c00 <OSTaskDelReq+0xfc>
 8017be4:	e0bfff17 	ldw	r2,-4(fp)
 8017be8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017bec:	e0bff917 	ldw	r2,-28(fp)
 8017bf0:	1001703a 	wrctl	status,r2
}
 8017bf4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 8017bf8:	008010c4 	movi	r2,67
 8017bfc:	00001306 	br	8017c4c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 8017c00:	e0bffe17 	ldw	r2,-8(fp)
 8017c04:	10800058 	cmpnei	r2,r2,1
 8017c08:	1000071e 	bne	r2,zero,8017c28 <OSTaskDelReq+0x124>
 8017c0c:	e0bfff17 	ldw	r2,-4(fp)
 8017c10:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8017c14:	e0bff817 	ldw	r2,-32(fp)
 8017c18:	1001703a 	wrctl	status,r2
}
 8017c1c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 8017c20:	00800f44 	movi	r2,61
 8017c24:	00000906 	br	8017c4c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 8017c28:	e0bffe17 	ldw	r2,-8(fp)
 8017c2c:	00c00fc4 	movi	r3,63
 8017c30:	10c00dc5 	stb	r3,55(r2)
 8017c34:	e0bfff17 	ldw	r2,-4(fp)
 8017c38:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8017c3c:	e0bff717 	ldw	r2,-36(fp)
 8017c40:	1001703a 	wrctl	status,r2
}
 8017c44:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8017c48:	0005883a 	mov	r2,zero
}
 8017c4c:	e037883a 	mov	sp,fp
 8017c50:	df000017 	ldw	fp,0(sp)
 8017c54:	dec00104 	addi	sp,sp,4
 8017c58:	f800283a 	ret

08017c5c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 8017c5c:	defff404 	addi	sp,sp,-48
 8017c60:	dfc00b15 	stw	ra,44(sp)
 8017c64:	df000a15 	stw	fp,40(sp)
 8017c68:	df000a04 	addi	fp,sp,40
 8017c6c:	2005883a 	mov	r2,r4
 8017c70:	e17ff715 	stw	r5,-36(fp)
 8017c74:	e1bff615 	stw	r6,-40(fp)
 8017c78:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 8017c7c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 8017c80:	e0bff617 	ldw	r2,-40(fp)
 8017c84:	1000021e 	bne	r2,zero,8017c90 <OSTaskNameGet+0x34>
        return (0);
 8017c88:	0005883a 	mov	r2,zero
 8017c8c:	00005506 	br	8017de4 <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 8017c90:	e0bff803 	ldbu	r2,-32(fp)
 8017c94:	10800570 	cmpltui	r2,r2,21
 8017c98:	1000081e 	bne	r2,zero,8017cbc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 8017c9c:	e0bff803 	ldbu	r2,-32(fp)
 8017ca0:	10803fe0 	cmpeqi	r2,r2,255
 8017ca4:	1000051e 	bne	r2,zero,8017cbc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 8017ca8:	e0bff617 	ldw	r2,-40(fp)
 8017cac:	00c00a84 	movi	r3,42
 8017cb0:	10c00005 	stb	r3,0(r2)
            return (0);
 8017cb4:	0005883a 	mov	r2,zero
 8017cb8:	00004a06 	br	8017de4 <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 8017cbc:	e0bff717 	ldw	r2,-36(fp)
 8017cc0:	1000051e 	bne	r2,zero,8017cd8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 8017cc4:	e0bff617 	ldw	r2,-40(fp)
 8017cc8:	00c00304 	movi	r3,12
 8017ccc:	10c00005 	stb	r3,0(r2)
        return (0);
 8017cd0:	0005883a 	mov	r2,zero
 8017cd4:	00004306 	br	8017de4 <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 8017cd8:	d0a07403 	ldbu	r2,-32304(gp)
 8017cdc:	10803fcc 	andi	r2,r2,255
 8017ce0:	10000526 	beq	r2,zero,8017cf8 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 8017ce4:	e0bff617 	ldw	r2,-40(fp)
 8017ce8:	00c00444 	movi	r3,17
 8017cec:	10c00005 	stb	r3,0(r2)
        return (0);
 8017cf0:	0005883a 	mov	r2,zero
 8017cf4:	00003b06 	br	8017de4 <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
 8017cf8:	0005303a 	rdctl	r2,status
 8017cfc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017d00:	e0fffc17 	ldw	r3,-16(fp)
 8017d04:	00bfff84 	movi	r2,-2
 8017d08:	1884703a 	and	r2,r3,r2
 8017d0c:	1001703a 	wrctl	status,r2
  return context;
 8017d10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8017d14:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 8017d18:	e0bff803 	ldbu	r2,-32(fp)
 8017d1c:	10803fd8 	cmpnei	r2,r2,255
 8017d20:	1000031e 	bne	r2,zero,8017d30 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 8017d24:	d0a07517 	ldw	r2,-32300(gp)
 8017d28:	10800c83 	ldbu	r2,50(r2)
 8017d2c:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8017d30:	e0bff803 	ldbu	r2,-32(fp)
 8017d34:	100690ba 	slli	r3,r2,2
 8017d38:	008201b4 	movhi	r2,2054
 8017d3c:	1885883a 	add	r2,r3,r2
 8017d40:	10b90c17 	ldw	r2,-7120(r2)
 8017d44:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 8017d48:	e0bffe17 	ldw	r2,-8(fp)
 8017d4c:	10000a1e 	bne	r2,zero,8017d78 <OSTaskNameGet+0x11c>
 8017d50:	e0bfff17 	ldw	r2,-4(fp)
 8017d54:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017d58:	e0bffb17 	ldw	r2,-20(fp)
 8017d5c:	1001703a 	wrctl	status,r2
}
 8017d60:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8017d64:	e0bff617 	ldw	r2,-40(fp)
 8017d68:	00c010c4 	movi	r3,67
 8017d6c:	10c00005 	stb	r3,0(r2)
        return (0);
 8017d70:	0005883a 	mov	r2,zero
 8017d74:	00001b06 	br	8017de4 <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 8017d78:	e0bffe17 	ldw	r2,-8(fp)
 8017d7c:	10800058 	cmpnei	r2,r2,1
 8017d80:	10000a1e 	bne	r2,zero,8017dac <OSTaskNameGet+0x150>
 8017d84:	e0bfff17 	ldw	r2,-4(fp)
 8017d88:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8017d8c:	e0bffa17 	ldw	r2,-24(fp)
 8017d90:	1001703a 	wrctl	status,r2
}
 8017d94:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8017d98:	e0bff617 	ldw	r2,-40(fp)
 8017d9c:	00c010c4 	movi	r3,67
 8017da0:	10c00005 	stb	r3,0(r2)
        return (0);
 8017da4:	0005883a 	mov	r2,zero
 8017da8:	00000e06 	br	8017de4 <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 8017dac:	e0bffe17 	ldw	r2,-8(fp)
 8017db0:	10801304 	addi	r2,r2,76
 8017db4:	100b883a 	mov	r5,r2
 8017db8:	e13ff717 	ldw	r4,-36(fp)
 8017dbc:	8012d200 	call	8012d20 <OS_StrCopy>
 8017dc0:	e0bffdc5 	stb	r2,-9(fp)
 8017dc4:	e0bfff17 	ldw	r2,-4(fp)
 8017dc8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017dcc:	e0bff917 	ldw	r2,-28(fp)
 8017dd0:	1001703a 	wrctl	status,r2
}
 8017dd4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8017dd8:	e0bff617 	ldw	r2,-40(fp)
 8017ddc:	10000005 	stb	zero,0(r2)
    return (len);
 8017de0:	e0bffdc3 	ldbu	r2,-9(fp)
}
 8017de4:	e037883a 	mov	sp,fp
 8017de8:	dfc00117 	ldw	ra,4(sp)
 8017dec:	df000017 	ldw	fp,0(sp)
 8017df0:	dec00204 	addi	sp,sp,8
 8017df4:	f800283a 	ret

08017df8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 8017df8:	defff304 	addi	sp,sp,-52
 8017dfc:	dfc00c15 	stw	ra,48(sp)
 8017e00:	df000b15 	stw	fp,44(sp)
 8017e04:	df000b04 	addi	fp,sp,44
 8017e08:	2005883a 	mov	r2,r4
 8017e0c:	e17ff615 	stw	r5,-40(fp)
 8017e10:	e1bff515 	stw	r6,-44(fp)
 8017e14:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8017e18:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 8017e1c:	e0bff517 	ldw	r2,-44(fp)
 8017e20:	10005e26 	beq	r2,zero,8017f9c <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8017e24:	e0bff703 	ldbu	r2,-36(fp)
 8017e28:	10800570 	cmpltui	r2,r2,21
 8017e2c:	1000071e 	bne	r2,zero,8017e4c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 8017e30:	e0bff703 	ldbu	r2,-36(fp)
 8017e34:	10803fe0 	cmpeqi	r2,r2,255
 8017e38:	1000041e 	bne	r2,zero,8017e4c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8017e3c:	e0bff517 	ldw	r2,-44(fp)
 8017e40:	00c00a84 	movi	r3,42
 8017e44:	10c00005 	stb	r3,0(r2)
            return;
 8017e48:	00005506 	br	8017fa0 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8017e4c:	e0bff617 	ldw	r2,-40(fp)
 8017e50:	1000041e 	bne	r2,zero,8017e64 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8017e54:	e0bff517 	ldw	r2,-44(fp)
 8017e58:	00c00304 	movi	r3,12
 8017e5c:	10c00005 	stb	r3,0(r2)
        return;
 8017e60:	00004f06 	br	8017fa0 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 8017e64:	d0a07403 	ldbu	r2,-32304(gp)
 8017e68:	10803fcc 	andi	r2,r2,255
 8017e6c:	10000426 	beq	r2,zero,8017e80 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 8017e70:	e0bff517 	ldw	r2,-44(fp)
 8017e74:	00c00484 	movi	r3,18
 8017e78:	10c00005 	stb	r3,0(r2)
        return;
 8017e7c:	00004806 	br	8017fa0 <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
 8017e80:	0005303a 	rdctl	r2,status
 8017e84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017e88:	e0fffc17 	ldw	r3,-16(fp)
 8017e8c:	00bfff84 	movi	r2,-2
 8017e90:	1884703a 	and	r2,r3,r2
 8017e94:	1001703a 	wrctl	status,r2
  return context;
 8017e98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8017e9c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8017ea0:	e0bff703 	ldbu	r2,-36(fp)
 8017ea4:	10803fd8 	cmpnei	r2,r2,255
 8017ea8:	1000031e 	bne	r2,zero,8017eb8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 8017eac:	d0a07517 	ldw	r2,-32300(gp)
 8017eb0:	10800c83 	ldbu	r2,50(r2)
 8017eb4:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8017eb8:	e0bff703 	ldbu	r2,-36(fp)
 8017ebc:	100690ba 	slli	r3,r2,2
 8017ec0:	008201b4 	movhi	r2,2054
 8017ec4:	1885883a 	add	r2,r3,r2
 8017ec8:	10b90c17 	ldw	r2,-7120(r2)
 8017ecc:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8017ed0:	e0bffe17 	ldw	r2,-8(fp)
 8017ed4:	1000091e 	bne	r2,zero,8017efc <OSTaskNameSet+0x104>
 8017ed8:	e0bfff17 	ldw	r2,-4(fp)
 8017edc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8017ee0:	e0bffb17 	ldw	r2,-20(fp)
 8017ee4:	1001703a 	wrctl	status,r2
}
 8017ee8:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8017eec:	e0bff517 	ldw	r2,-44(fp)
 8017ef0:	00c010c4 	movi	r3,67
 8017ef4:	10c00005 	stb	r3,0(r2)
        return;
 8017ef8:	00002906 	br	8017fa0 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8017efc:	e0bffe17 	ldw	r2,-8(fp)
 8017f00:	10800058 	cmpnei	r2,r2,1
 8017f04:	1000091e 	bne	r2,zero,8017f2c <OSTaskNameSet+0x134>
 8017f08:	e0bfff17 	ldw	r2,-4(fp)
 8017f0c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8017f10:	e0bffa17 	ldw	r2,-24(fp)
 8017f14:	1001703a 	wrctl	status,r2
}
 8017f18:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8017f1c:	e0bff517 	ldw	r2,-44(fp)
 8017f20:	00c010c4 	movi	r3,67
 8017f24:	10c00005 	stb	r3,0(r2)
        return;
 8017f28:	00001d06 	br	8017fa0 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 8017f2c:	e13ff617 	ldw	r4,-40(fp)
 8017f30:	8012d940 	call	8012d94 <OS_StrLen>
 8017f34:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 8017f38:	e0bffdc3 	ldbu	r2,-9(fp)
 8017f3c:	10800830 	cmpltui	r2,r2,32
 8017f40:	1000091e 	bne	r2,zero,8017f68 <OSTaskNameSet+0x170>
 8017f44:	e0bfff17 	ldw	r2,-4(fp)
 8017f48:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8017f4c:	e0bff917 	ldw	r2,-28(fp)
 8017f50:	1001703a 	wrctl	status,r2
}
 8017f54:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 8017f58:	e0bff517 	ldw	r2,-44(fp)
 8017f5c:	00c01044 	movi	r3,65
 8017f60:	10c00005 	stb	r3,0(r2)
        return;
 8017f64:	00000e06 	br	8017fa0 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 8017f68:	e0bffe17 	ldw	r2,-8(fp)
 8017f6c:	10801304 	addi	r2,r2,76
 8017f70:	e17ff617 	ldw	r5,-40(fp)
 8017f74:	1009883a 	mov	r4,r2
 8017f78:	8012d200 	call	8012d20 <OS_StrCopy>
 8017f7c:	e0bfff17 	ldw	r2,-4(fp)
 8017f80:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8017f84:	e0bff817 	ldw	r2,-32(fp)
 8017f88:	1001703a 	wrctl	status,r2
}
 8017f8c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8017f90:	e0bff517 	ldw	r2,-44(fp)
 8017f94:	10000005 	stb	zero,0(r2)
 8017f98:	00000106 	br	8017fa0 <OSTaskNameSet+0x1a8>
        return;
 8017f9c:	0001883a 	nop
}
 8017fa0:	e037883a 	mov	sp,fp
 8017fa4:	dfc00117 	ldw	ra,4(sp)
 8017fa8:	df000017 	ldw	fp,0(sp)
 8017fac:	dec00204 	addi	sp,sp,8
 8017fb0:	f800283a 	ret

08017fb4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 8017fb4:	defff404 	addi	sp,sp,-48
 8017fb8:	dfc00b15 	stw	ra,44(sp)
 8017fbc:	df000a15 	stw	fp,40(sp)
 8017fc0:	df000a04 	addi	fp,sp,40
 8017fc4:	2005883a 	mov	r2,r4
 8017fc8:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8017fcc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8017fd0:	e0bff603 	ldbu	r2,-40(fp)
 8017fd4:	10800530 	cmpltui	r2,r2,20
 8017fd8:	1000021e 	bne	r2,zero,8017fe4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 8017fdc:	00800a84 	movi	r2,42
 8017fe0:	00006706 	br	8018180 <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
 8017fe4:	0005303a 	rdctl	r2,status
 8017fe8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017fec:	e0fffd17 	ldw	r3,-12(fp)
 8017ff0:	00bfff84 	movi	r2,-2
 8017ff4:	1884703a 	and	r2,r3,r2
 8017ff8:	1001703a 	wrctl	status,r2
  return context;
 8017ffc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8018000:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
 8018004:	e0bff603 	ldbu	r2,-40(fp)
 8018008:	100690ba 	slli	r3,r2,2
 801800c:	008201b4 	movhi	r2,2054
 8018010:	1885883a 	add	r2,r3,r2
 8018014:	10b90c17 	ldw	r2,-7120(r2)
 8018018:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 801801c:	e0bffe17 	ldw	r2,-8(fp)
 8018020:	1000071e 	bne	r2,zero,8018040 <OSTaskResume+0x8c>
 8018024:	e0bfff17 	ldw	r2,-4(fp)
 8018028:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801802c:	e0bffc17 	ldw	r2,-16(fp)
 8018030:	1001703a 	wrctl	status,r2
}
 8018034:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 8018038:	00801184 	movi	r2,70
 801803c:	00005006 	br	8018180 <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8018040:	e0bffe17 	ldw	r2,-8(fp)
 8018044:	10800058 	cmpnei	r2,r2,1
 8018048:	1000071e 	bne	r2,zero,8018068 <OSTaskResume+0xb4>
 801804c:	e0bfff17 	ldw	r2,-4(fp)
 8018050:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8018054:	e0bffb17 	ldw	r2,-20(fp)
 8018058:	1001703a 	wrctl	status,r2
}
 801805c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8018060:	008010c4 	movi	r2,67
 8018064:	00004606 	br	8018180 <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8018068:	e0bffe17 	ldw	r2,-8(fp)
 801806c:	10800c03 	ldbu	r2,48(r2)
 8018070:	10803fcc 	andi	r2,r2,255
 8018074:	1080020c 	andi	r2,r2,8
 8018078:	10003b26 	beq	r2,zero,8018168 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 801807c:	e0bffe17 	ldw	r2,-8(fp)
 8018080:	10c00c03 	ldbu	r3,48(r2)
 8018084:	00bffdc4 	movi	r2,-9
 8018088:	1884703a 	and	r2,r3,r2
 801808c:	1007883a 	mov	r3,r2
 8018090:	e0bffe17 	ldw	r2,-8(fp)
 8018094:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 8018098:	e0bffe17 	ldw	r2,-8(fp)
 801809c:	10800c03 	ldbu	r2,48(r2)
 80180a0:	10803fcc 	andi	r2,r2,255
 80180a4:	1000291e 	bne	r2,zero,801814c <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
 80180a8:	e0bffe17 	ldw	r2,-8(fp)
 80180ac:	10800b8b 	ldhu	r2,46(r2)
 80180b0:	10bfffcc 	andi	r2,r2,65535
 80180b4:	1000201e 	bne	r2,zero,8018138 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 80180b8:	e0bffe17 	ldw	r2,-8(fp)
 80180bc:	10c00d83 	ldbu	r3,54(r2)
 80180c0:	d0a07203 	ldbu	r2,-32312(gp)
 80180c4:	1884b03a 	or	r2,r3,r2
 80180c8:	d0a07205 	stb	r2,-32312(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80180cc:	e0bffe17 	ldw	r2,-8(fp)
 80180d0:	10800d03 	ldbu	r2,52(r2)
 80180d4:	10c03fcc 	andi	r3,r2,255
 80180d8:	d0a07244 	addi	r2,gp,-32311
 80180dc:	1885883a 	add	r2,r3,r2
 80180e0:	11000003 	ldbu	r4,0(r2)
 80180e4:	e0bffe17 	ldw	r2,-8(fp)
 80180e8:	10800d43 	ldbu	r2,53(r2)
 80180ec:	e0fffe17 	ldw	r3,-8(fp)
 80180f0:	18c00d03 	ldbu	r3,52(r3)
 80180f4:	18c03fcc 	andi	r3,r3,255
 80180f8:	2084b03a 	or	r2,r4,r2
 80180fc:	1009883a 	mov	r4,r2
 8018100:	d0a07244 	addi	r2,gp,-32311
 8018104:	1885883a 	add	r2,r3,r2
 8018108:	11000005 	stb	r4,0(r2)
 801810c:	e0bfff17 	ldw	r2,-4(fp)
 8018110:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8018114:	e0bffa17 	ldw	r2,-24(fp)
 8018118:	1001703a 	wrctl	status,r2
}
 801811c:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 8018120:	d0a06643 	ldbu	r2,-32359(gp)
 8018124:	10803fcc 	andi	r2,r2,255
 8018128:	10800058 	cmpnei	r2,r2,1
 801812c:	10000c1e 	bne	r2,zero,8018160 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
 8018130:	8012be80 	call	8012be8 <OS_Sched>
 8018134:	00000a06 	br	8018160 <OSTaskResume+0x1ac>
 8018138:	e0bfff17 	ldw	r2,-4(fp)
 801813c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018140:	e0bff917 	ldw	r2,-28(fp)
 8018144:	1001703a 	wrctl	status,r2
}
 8018148:	00000506 	br	8018160 <OSTaskResume+0x1ac>
 801814c:	e0bfff17 	ldw	r2,-4(fp)
 8018150:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8018154:	e0bff817 	ldw	r2,-32(fp)
 8018158:	1001703a 	wrctl	status,r2
}
 801815c:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 8018160:	0005883a 	mov	r2,zero
 8018164:	00000606 	br	8018180 <OSTaskResume+0x1cc>
 8018168:	e0bfff17 	ldw	r2,-4(fp)
 801816c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 8018170:	e0bff717 	ldw	r2,-36(fp)
 8018174:	1001703a 	wrctl	status,r2
}
 8018178:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 801817c:	00801104 	movi	r2,68
}
 8018180:	e037883a 	mov	sp,fp
 8018184:	dfc00117 	ldw	ra,4(sp)
 8018188:	df000017 	ldw	fp,0(sp)
 801818c:	dec00204 	addi	sp,sp,8
 8018190:	f800283a 	ret

08018194 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 8018194:	defff304 	addi	sp,sp,-52
 8018198:	df000c15 	stw	fp,48(sp)
 801819c:	df000c04 	addi	fp,sp,48
 80181a0:	2005883a 	mov	r2,r4
 80181a4:	e17ff415 	stw	r5,-48(fp)
 80181a8:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 80181ac:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 80181b0:	e0bff503 	ldbu	r2,-44(fp)
 80181b4:	10800570 	cmpltui	r2,r2,21
 80181b8:	1000051e 	bne	r2,zero,80181d0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 80181bc:	e0bff503 	ldbu	r2,-44(fp)
 80181c0:	10803fe0 	cmpeqi	r2,r2,255
 80181c4:	1000021e 	bne	r2,zero,80181d0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 80181c8:	00800a84 	movi	r2,42
 80181cc:	00005b06 	br	801833c <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 80181d0:	e0bff417 	ldw	r2,-48(fp)
 80181d4:	1000021e 	bne	r2,zero,80181e0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 80181d8:	00800244 	movi	r2,9
 80181dc:	00005706 	br	801833c <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 80181e0:	e0bff417 	ldw	r2,-48(fp)
 80181e4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 80181e8:	e0bff417 	ldw	r2,-48(fp)
 80181ec:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
 80181f0:	0005303a 	rdctl	r2,status
 80181f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80181f8:	e0fffa17 	ldw	r3,-24(fp)
 80181fc:	00bfff84 	movi	r2,-2
 8018200:	1884703a 	and	r2,r3,r2
 8018204:	1001703a 	wrctl	status,r2
  return context;
 8018208:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
 801820c:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8018210:	e0bff503 	ldbu	r2,-44(fp)
 8018214:	10803fd8 	cmpnei	r2,r2,255
 8018218:	1000031e 	bne	r2,zero,8018228 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 801821c:	d0a07517 	ldw	r2,-32300(gp)
 8018220:	10800c83 	ldbu	r2,50(r2)
 8018224:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8018228:	e0bff503 	ldbu	r2,-44(fp)
 801822c:	100690ba 	slli	r3,r2,2
 8018230:	008201b4 	movhi	r2,2054
 8018234:	1885883a 	add	r2,r3,r2
 8018238:	10b90c17 	ldw	r2,-7120(r2)
 801823c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8018240:	e0bffc17 	ldw	r2,-16(fp)
 8018244:	1000071e 	bne	r2,zero,8018264 <OSTaskStkChk+0xd0>
 8018248:	e0bffd17 	ldw	r2,-12(fp)
 801824c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018250:	e0bff917 	ldw	r2,-28(fp)
 8018254:	1001703a 	wrctl	status,r2
}
 8018258:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 801825c:	008010c4 	movi	r2,67
 8018260:	00003606 	br	801833c <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8018264:	e0bffc17 	ldw	r2,-16(fp)
 8018268:	10800058 	cmpnei	r2,r2,1
 801826c:	1000071e 	bne	r2,zero,801828c <OSTaskStkChk+0xf8>
 8018270:	e0bffd17 	ldw	r2,-12(fp)
 8018274:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8018278:	e0bff817 	ldw	r2,-32(fp)
 801827c:	1001703a 	wrctl	status,r2
}
 8018280:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8018284:	008010c4 	movi	r2,67
 8018288:	00002c06 	br	801833c <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 801828c:	e0bffc17 	ldw	r2,-16(fp)
 8018290:	1080040b 	ldhu	r2,16(r2)
 8018294:	10bfffcc 	andi	r2,r2,65535
 8018298:	1080004c 	andi	r2,r2,1
 801829c:	1000071e 	bne	r2,zero,80182bc <OSTaskStkChk+0x128>
 80182a0:	e0bffd17 	ldw	r2,-12(fp)
 80182a4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80182a8:	e0bff717 	ldw	r2,-36(fp)
 80182ac:	1001703a 	wrctl	status,r2
}
 80182b0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 80182b4:	00801144 	movi	r2,69
 80182b8:	00002006 	br	801833c <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
 80182bc:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
 80182c0:	e0bffc17 	ldw	r2,-16(fp)
 80182c4:	10800317 	ldw	r2,12(r2)
 80182c8:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
 80182cc:	e0bffc17 	ldw	r2,-16(fp)
 80182d0:	10800217 	ldw	r2,8(r2)
 80182d4:	e0bfff15 	stw	r2,-4(fp)
 80182d8:	e0bffd17 	ldw	r2,-12(fp)
 80182dc:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 80182e0:	e0bff617 	ldw	r2,-40(fp)
 80182e4:	1001703a 	wrctl	status,r2
}
 80182e8:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80182ec:	00000306 	br	80182fc <OSTaskStkChk+0x168>
        nfree++;
 80182f0:	e0bffe17 	ldw	r2,-8(fp)
 80182f4:	10800044 	addi	r2,r2,1
 80182f8:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80182fc:	e0bfff17 	ldw	r2,-4(fp)
 8018300:	10c00104 	addi	r3,r2,4
 8018304:	e0ffff15 	stw	r3,-4(fp)
 8018308:	10800017 	ldw	r2,0(r2)
 801830c:	103ff826 	beq	r2,zero,80182f0 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 8018310:	e0bffe17 	ldw	r2,-8(fp)
 8018314:	100690ba 	slli	r3,r2,2
 8018318:	e0bff417 	ldw	r2,-48(fp)
 801831c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 8018320:	e0fffb17 	ldw	r3,-20(fp)
 8018324:	e0bffe17 	ldw	r2,-8(fp)
 8018328:	1885c83a 	sub	r2,r3,r2
 801832c:	100690ba 	slli	r3,r2,2
 8018330:	e0bff417 	ldw	r2,-48(fp)
 8018334:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 8018338:	0005883a 	mov	r2,zero
}
 801833c:	e037883a 	mov	sp,fp
 8018340:	df000017 	ldw	fp,0(sp)
 8018344:	dec00104 	addi	sp,sp,4
 8018348:	f800283a 	ret

0801834c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 801834c:	defff504 	addi	sp,sp,-44
 8018350:	dfc00a15 	stw	ra,40(sp)
 8018354:	df000915 	stw	fp,36(sp)
 8018358:	df000904 	addi	fp,sp,36
 801835c:	2005883a 	mov	r2,r4
 8018360:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018364:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8018368:	e0bff703 	ldbu	r2,-36(fp)
 801836c:	10800518 	cmpnei	r2,r2,20
 8018370:	1000021e 	bne	r2,zero,801837c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8018374:	008011c4 	movi	r2,71
 8018378:	00006906 	br	8018520 <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 801837c:	e0bff703 	ldbu	r2,-36(fp)
 8018380:	10800530 	cmpltui	r2,r2,20
 8018384:	1000051e 	bne	r2,zero,801839c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 8018388:	e0bff703 	ldbu	r2,-36(fp)
 801838c:	10803fe0 	cmpeqi	r2,r2,255
 8018390:	1000021e 	bne	r2,zero,801839c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 8018394:	00800a84 	movi	r2,42
 8018398:	00006106 	br	8018520 <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
 801839c:	0005303a 	rdctl	r2,status
 80183a0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80183a4:	e0fffb17 	ldw	r3,-20(fp)
 80183a8:	00bfff84 	movi	r2,-2
 80183ac:	1884703a 	and	r2,r3,r2
 80183b0:	1001703a 	wrctl	status,r2
  return context;
 80183b4:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 80183b8:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 80183bc:	e0bff703 	ldbu	r2,-36(fp)
 80183c0:	10803fd8 	cmpnei	r2,r2,255
 80183c4:	1000061e 	bne	r2,zero,80183e0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 80183c8:	d0a07517 	ldw	r2,-32300(gp)
 80183cc:	10800c83 	ldbu	r2,50(r2)
 80183d0:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
 80183d4:	00800044 	movi	r2,1
 80183d8:	e0bfffc5 	stb	r2,-1(fp)
 80183dc:	00000906 	br	8018404 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 80183e0:	d0a07517 	ldw	r2,-32300(gp)
 80183e4:	10800c83 	ldbu	r2,50(r2)
 80183e8:	e0fff703 	ldbu	r3,-36(fp)
 80183ec:	10803fcc 	andi	r2,r2,255
 80183f0:	1880031e 	bne	r3,r2,8018400 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 80183f4:	00800044 	movi	r2,1
 80183f8:	e0bfffc5 	stb	r2,-1(fp)
 80183fc:	00000106 	br	8018404 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8018400:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8018404:	e0bff703 	ldbu	r2,-36(fp)
 8018408:	100690ba 	slli	r3,r2,2
 801840c:	008201b4 	movhi	r2,2054
 8018410:	1885883a 	add	r2,r3,r2
 8018414:	10b90c17 	ldw	r2,-7120(r2)
 8018418:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 801841c:	e0bffd17 	ldw	r2,-12(fp)
 8018420:	1000071e 	bne	r2,zero,8018440 <OSTaskSuspend+0xf4>
 8018424:	e0bffe17 	ldw	r2,-8(fp)
 8018428:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801842c:	e0bffa17 	ldw	r2,-24(fp)
 8018430:	1001703a 	wrctl	status,r2
}
 8018434:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8018438:	00801204 	movi	r2,72
 801843c:	00003806 	br	8018520 <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8018440:	e0bffd17 	ldw	r2,-12(fp)
 8018444:	10800058 	cmpnei	r2,r2,1
 8018448:	1000071e 	bne	r2,zero,8018468 <OSTaskSuspend+0x11c>
 801844c:	e0bffe17 	ldw	r2,-8(fp)
 8018450:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018454:	e0bff917 	ldw	r2,-28(fp)
 8018458:	1001703a 	wrctl	status,r2
}
 801845c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8018460:	008010c4 	movi	r2,67
 8018464:	00002e06 	br	8018520 <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
 8018468:	e0bffd17 	ldw	r2,-12(fp)
 801846c:	10800d03 	ldbu	r2,52(r2)
 8018470:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 8018474:	e0fffcc3 	ldbu	r3,-13(fp)
 8018478:	d0a07244 	addi	r2,gp,-32311
 801847c:	1885883a 	add	r2,r3,r2
 8018480:	10800003 	ldbu	r2,0(r2)
 8018484:	1007883a 	mov	r3,r2
 8018488:	e0bffd17 	ldw	r2,-12(fp)
 801848c:	10800d43 	ldbu	r2,53(r2)
 8018490:	0084303a 	nor	r2,zero,r2
 8018494:	1884703a 	and	r2,r3,r2
 8018498:	e0fffcc3 	ldbu	r3,-13(fp)
 801849c:	1009883a 	mov	r4,r2
 80184a0:	d0a07244 	addi	r2,gp,-32311
 80184a4:	1885883a 	add	r2,r3,r2
 80184a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 80184ac:	e0fffcc3 	ldbu	r3,-13(fp)
 80184b0:	d0a07244 	addi	r2,gp,-32311
 80184b4:	1885883a 	add	r2,r3,r2
 80184b8:	10800003 	ldbu	r2,0(r2)
 80184bc:	10803fcc 	andi	r2,r2,255
 80184c0:	1000071e 	bne	r2,zero,80184e0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 80184c4:	e0bffd17 	ldw	r2,-12(fp)
 80184c8:	10800d83 	ldbu	r2,54(r2)
 80184cc:	0084303a 	nor	r2,zero,r2
 80184d0:	1007883a 	mov	r3,r2
 80184d4:	d0a07203 	ldbu	r2,-32312(gp)
 80184d8:	1884703a 	and	r2,r3,r2
 80184dc:	d0a07205 	stb	r2,-32312(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80184e0:	e0bffd17 	ldw	r2,-12(fp)
 80184e4:	10800c03 	ldbu	r2,48(r2)
 80184e8:	10800214 	ori	r2,r2,8
 80184ec:	1007883a 	mov	r3,r2
 80184f0:	e0bffd17 	ldw	r2,-12(fp)
 80184f4:	10c00c05 	stb	r3,48(r2)
 80184f8:	e0bffe17 	ldw	r2,-8(fp)
 80184fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8018500:	e0bff817 	ldw	r2,-32(fp)
 8018504:	1001703a 	wrctl	status,r2
}
 8018508:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 801850c:	e0bfffc3 	ldbu	r2,-1(fp)
 8018510:	10800058 	cmpnei	r2,r2,1
 8018514:	1000011e 	bne	r2,zero,801851c <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
 8018518:	8012be80 	call	8012be8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 801851c:	0005883a 	mov	r2,zero
}
 8018520:	e037883a 	mov	sp,fp
 8018524:	dfc00117 	ldw	ra,4(sp)
 8018528:	df000017 	ldw	fp,0(sp)
 801852c:	dec00204 	addi	sp,sp,8
 8018530:	f800283a 	ret

08018534 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 8018534:	defff604 	addi	sp,sp,-40
 8018538:	dfc00915 	stw	ra,36(sp)
 801853c:	df000815 	stw	fp,32(sp)
 8018540:	df000804 	addi	fp,sp,32
 8018544:	2005883a 	mov	r2,r4
 8018548:	e17ff815 	stw	r5,-32(fp)
 801854c:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018550:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 8018554:	e0bff903 	ldbu	r2,-28(fp)
 8018558:	10800570 	cmpltui	r2,r2,21
 801855c:	1000051e 	bne	r2,zero,8018574 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 8018560:	e0bff903 	ldbu	r2,-28(fp)
 8018564:	10803fe0 	cmpeqi	r2,r2,255
 8018568:	1000021e 	bne	r2,zero,8018574 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 801856c:	00800a84 	movi	r2,42
 8018570:	00003506 	br	8018648 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 8018574:	e0bff817 	ldw	r2,-32(fp)
 8018578:	1000021e 	bne	r2,zero,8018584 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 801857c:	00800244 	movi	r2,9
 8018580:	00003106 	br	8018648 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
 8018584:	0005303a 	rdctl	r2,status
 8018588:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801858c:	e0fffd17 	ldw	r3,-12(fp)
 8018590:	00bfff84 	movi	r2,-2
 8018594:	1884703a 	and	r2,r3,r2
 8018598:	1001703a 	wrctl	status,r2
  return context;
 801859c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 80185a0:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 80185a4:	e0bff903 	ldbu	r2,-28(fp)
 80185a8:	10803fd8 	cmpnei	r2,r2,255
 80185ac:	1000031e 	bne	r2,zero,80185bc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 80185b0:	d0a07517 	ldw	r2,-32300(gp)
 80185b4:	10800c83 	ldbu	r2,50(r2)
 80185b8:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 80185bc:	e0bff903 	ldbu	r2,-28(fp)
 80185c0:	100690ba 	slli	r3,r2,2
 80185c4:	008201b4 	movhi	r2,2054
 80185c8:	1885883a 	add	r2,r3,r2
 80185cc:	10b90c17 	ldw	r2,-7120(r2)
 80185d0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 80185d4:	e0bffe17 	ldw	r2,-8(fp)
 80185d8:	1000071e 	bne	r2,zero,80185f8 <OSTaskQuery+0xc4>
 80185dc:	e0bfff17 	ldw	r2,-4(fp)
 80185e0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80185e4:	e0bffc17 	ldw	r2,-16(fp)
 80185e8:	1001703a 	wrctl	status,r2
}
 80185ec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 80185f0:	00800a44 	movi	r2,41
 80185f4:	00001406 	br	8018648 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 80185f8:	e0bffe17 	ldw	r2,-8(fp)
 80185fc:	10800058 	cmpnei	r2,r2,1
 8018600:	1000071e 	bne	r2,zero,8018620 <OSTaskQuery+0xec>
 8018604:	e0bfff17 	ldw	r2,-4(fp)
 8018608:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801860c:	e0bffb17 	ldw	r2,-20(fp)
 8018610:	1001703a 	wrctl	status,r2
}
 8018614:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8018618:	008010c4 	movi	r2,67
 801861c:	00000a06 	br	8018648 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 8018620:	01801b04 	movi	r6,108
 8018624:	e17ffe17 	ldw	r5,-8(fp)
 8018628:	e13ff817 	ldw	r4,-32(fp)
 801862c:	8012b7c0 	call	8012b7c <OS_MemCopy>
 8018630:	e0bfff17 	ldw	r2,-4(fp)
 8018634:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8018638:	e0bffa17 	ldw	r2,-24(fp)
 801863c:	1001703a 	wrctl	status,r2
}
 8018640:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8018644:	0005883a 	mov	r2,zero
}
 8018648:	e037883a 	mov	sp,fp
 801864c:	dfc00117 	ldw	ra,4(sp)
 8018650:	df000017 	ldw	fp,0(sp)
 8018654:	dec00204 	addi	sp,sp,8
 8018658:	f800283a 	ret

0801865c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 801865c:	defffc04 	addi	sp,sp,-16
 8018660:	df000315 	stw	fp,12(sp)
 8018664:	df000304 	addi	fp,sp,12
 8018668:	e13fff15 	stw	r4,-4(fp)
 801866c:	e17ffe15 	stw	r5,-8(fp)
 8018670:	3005883a 	mov	r2,r6
 8018674:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 8018678:	e0bffd0b 	ldhu	r2,-12(fp)
 801867c:	1080004c 	andi	r2,r2,1
 8018680:	10000d26 	beq	r2,zero,80186b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 8018684:	e0bffd0b 	ldhu	r2,-12(fp)
 8018688:	1080008c 	andi	r2,r2,2
 801868c:	10000a26 	beq	r2,zero,80186b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 8018690:	00000706 	br	80186b0 <OS_TaskStkClr+0x54>
                size--;
 8018694:	e0bffe17 	ldw	r2,-8(fp)
 8018698:	10bfffc4 	addi	r2,r2,-1
 801869c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 80186a0:	e0bfff17 	ldw	r2,-4(fp)
 80186a4:	10c00104 	addi	r3,r2,4
 80186a8:	e0ffff15 	stw	r3,-4(fp)
 80186ac:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 80186b0:	e0bffe17 	ldw	r2,-8(fp)
 80186b4:	103ff71e 	bne	r2,zero,8018694 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 80186b8:	0001883a 	nop
 80186bc:	e037883a 	mov	sp,fp
 80186c0:	df000017 	ldw	fp,0(sp)
 80186c4:	dec00104 	addi	sp,sp,4
 80186c8:	f800283a 	ret

080186cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 80186cc:	defff904 	addi	sp,sp,-28
 80186d0:	dfc00615 	stw	ra,24(sp)
 80186d4:	df000515 	stw	fp,20(sp)
 80186d8:	df000504 	addi	fp,sp,20
 80186dc:	2005883a 	mov	r2,r4
 80186e0:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80186e4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80186e8:	d0a07403 	ldbu	r2,-32304(gp)
 80186ec:	10803fcc 	andi	r2,r2,255
 80186f0:	1000321e 	bne	r2,zero,80187bc <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 80186f4:	e0bffb0b 	ldhu	r2,-20(fp)
 80186f8:	10003126 	beq	r2,zero,80187c0 <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
 80186fc:	0005303a 	rdctl	r2,status
 8018700:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018704:	e0fffd17 	ldw	r3,-12(fp)
 8018708:	00bfff84 	movi	r2,-2
 801870c:	1884703a 	and	r2,r3,r2
 8018710:	1001703a 	wrctl	status,r2
  return context;
 8018714:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
 8018718:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 801871c:	d0a07517 	ldw	r2,-32300(gp)
 8018720:	10800d03 	ldbu	r2,52(r2)
 8018724:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 8018728:	e0fffec3 	ldbu	r3,-5(fp)
 801872c:	d0a07244 	addi	r2,gp,-32311
 8018730:	1885883a 	add	r2,r3,r2
 8018734:	10800003 	ldbu	r2,0(r2)
 8018738:	1007883a 	mov	r3,r2
 801873c:	d0a07517 	ldw	r2,-32300(gp)
 8018740:	10800d43 	ldbu	r2,53(r2)
 8018744:	0084303a 	nor	r2,zero,r2
 8018748:	1884703a 	and	r2,r3,r2
 801874c:	e0fffec3 	ldbu	r3,-5(fp)
 8018750:	1009883a 	mov	r4,r2
 8018754:	d0a07244 	addi	r2,gp,-32311
 8018758:	1885883a 	add	r2,r3,r2
 801875c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 8018760:	e0fffec3 	ldbu	r3,-5(fp)
 8018764:	d0a07244 	addi	r2,gp,-32311
 8018768:	1885883a 	add	r2,r3,r2
 801876c:	10800003 	ldbu	r2,0(r2)
 8018770:	10803fcc 	andi	r2,r2,255
 8018774:	1000071e 	bne	r2,zero,8018794 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 8018778:	d0a07517 	ldw	r2,-32300(gp)
 801877c:	10800d83 	ldbu	r2,54(r2)
 8018780:	0084303a 	nor	r2,zero,r2
 8018784:	1007883a 	mov	r3,r2
 8018788:	d0a07203 	ldbu	r2,-32312(gp)
 801878c:	1884703a 	and	r2,r3,r2
 8018790:	d0a07205 	stb	r2,-32312(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8018794:	d0a07517 	ldw	r2,-32300(gp)
 8018798:	e0fffb0b 	ldhu	r3,-20(fp)
 801879c:	10c00b8d 	sth	r3,46(r2)
 80187a0:	e0bfff17 	ldw	r2,-4(fp)
 80187a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80187a8:	e0bffc17 	ldw	r2,-16(fp)
 80187ac:	1001703a 	wrctl	status,r2
}
 80187b0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 80187b4:	8012be80 	call	8012be8 <OS_Sched>
 80187b8:	00000106 	br	80187c0 <OSTimeDly+0xf4>
        return;
 80187bc:	0001883a 	nop
    }
}
 80187c0:	e037883a 	mov	sp,fp
 80187c4:	dfc00117 	ldw	ra,4(sp)
 80187c8:	df000017 	ldw	fp,0(sp)
 80187cc:	dec00204 	addi	sp,sp,8
 80187d0:	f800283a 	ret

080187d4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 80187d4:	defff704 	addi	sp,sp,-36
 80187d8:	dfc00815 	stw	ra,32(sp)
 80187dc:	df000715 	stw	fp,28(sp)
 80187e0:	dc000615 	stw	r16,24(sp)
 80187e4:	df000704 	addi	fp,sp,28
 80187e8:	2005883a 	mov	r2,r4
 80187ec:	3009883a 	mov	r4,r6
 80187f0:	3807883a 	mov	r3,r7
 80187f4:	e0bffc05 	stb	r2,-16(fp)
 80187f8:	2805883a 	mov	r2,r5
 80187fc:	e0bffb05 	stb	r2,-20(fp)
 8018800:	2005883a 	mov	r2,r4
 8018804:	e0bffa05 	stb	r2,-24(fp)
 8018808:	1805883a 	mov	r2,r3
 801880c:	e0bff90d 	sth	r2,-28(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8018810:	d0a07403 	ldbu	r2,-32304(gp)
 8018814:	10803fcc 	andi	r2,r2,255
 8018818:	10000226 	beq	r2,zero,8018824 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
 801881c:	00801544 	movi	r2,85
 8018820:	00003e06 	br	801891c <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 8018824:	e0bffc03 	ldbu	r2,-16(fp)
 8018828:	1000081e 	bne	r2,zero,801884c <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
 801882c:	e0bffb03 	ldbu	r2,-20(fp)
 8018830:	1000061e 	bne	r2,zero,801884c <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
 8018834:	e0bffa03 	ldbu	r2,-24(fp)
 8018838:	1000041e 	bne	r2,zero,801884c <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
 801883c:	e0bff90b 	ldhu	r2,-28(fp)
 8018840:	1000021e 	bne	r2,zero,801884c <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
 8018844:	00801504 	movi	r2,84
 8018848:	00003406 	br	801891c <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
 801884c:	e0bffb03 	ldbu	r2,-20(fp)
 8018850:	10800f30 	cmpltui	r2,r2,60
 8018854:	1000021e 	bne	r2,zero,8018860 <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8018858:	00801444 	movi	r2,81
 801885c:	00002f06 	br	801891c <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
 8018860:	e0bffa03 	ldbu	r2,-24(fp)
 8018864:	10800f30 	cmpltui	r2,r2,60
 8018868:	1000021e 	bne	r2,zero,8018874 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
 801886c:	00801484 	movi	r2,82
 8018870:	00002a06 	br	801891c <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
 8018874:	e0bff90b 	ldhu	r2,-28(fp)
 8018878:	1080fa30 	cmpltui	r2,r2,1000
 801887c:	1000021e 	bne	r2,zero,8018888 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
 8018880:	008014c4 	movi	r2,83
 8018884:	00002506 	br	801891c <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 8018888:	e0bffc03 	ldbu	r2,-16(fp)
 801888c:	10c38424 	muli	r3,r2,3600
 8018890:	e0bffb03 	ldbu	r2,-20(fp)
 8018894:	10800f24 	muli	r2,r2,60
 8018898:	1887883a 	add	r3,r3,r2
 801889c:	e0bffa03 	ldbu	r2,-24(fp)
 80188a0:	1885883a 	add	r2,r3,r2
 80188a4:	14001924 	muli	r16,r2,100
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 80188a8:	e0bff90b 	ldhu	r2,-28(fp)
 80188ac:	10801924 	muli	r2,r2,100
 80188b0:	10807d04 	addi	r2,r2,500
 80188b4:	0140fa04 	movi	r5,1000
 80188b8:	1009883a 	mov	r4,r2
 80188bc:	800e2300 	call	800e230 <__udivsi3>
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 80188c0:	8085883a 	add	r2,r16,r2
 80188c4:	e0bffd15 	stw	r2,-12(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 80188c8:	e0bffd17 	ldw	r2,-12(fp)
 80188cc:	1004d43a 	srli	r2,r2,16
 80188d0:	e0bffe8d 	sth	r2,-6(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 80188d4:	e0bffd17 	ldw	r2,-12(fp)
 80188d8:	10bfffcc 	andi	r2,r2,65535
 80188dc:	e0bffd15 	stw	r2,-12(fp)
    OSTimeDly((INT16U)ticks);
 80188e0:	e0bffd17 	ldw	r2,-12(fp)
 80188e4:	10bfffcc 	andi	r2,r2,65535
 80188e8:	1009883a 	mov	r4,r2
 80188ec:	80186cc0 	call	80186cc <OSTimeDly>
    while (loops > 0) {
 80188f0:	00000706 	br	8018910 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
 80188f4:	01200014 	movui	r4,32768
 80188f8:	80186cc0 	call	80186cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 80188fc:	01200014 	movui	r4,32768
 8018900:	80186cc0 	call	80186cc <OSTimeDly>
        loops--;
 8018904:	e0bffe8b 	ldhu	r2,-6(fp)
 8018908:	10bfffc4 	addi	r2,r2,-1
 801890c:	e0bffe8d 	sth	r2,-6(fp)
    while (loops > 0) {
 8018910:	e0bffe8b 	ldhu	r2,-6(fp)
 8018914:	103ff71e 	bne	r2,zero,80188f4 <OSTimeDlyHMSM+0x120>
    }
    return (OS_ERR_NONE);
 8018918:	0005883a 	mov	r2,zero
}
 801891c:	e6ffff04 	addi	sp,fp,-4
 8018920:	dfc00217 	ldw	ra,8(sp)
 8018924:	df000117 	ldw	fp,4(sp)
 8018928:	dc000017 	ldw	r16,0(sp)
 801892c:	dec00304 	addi	sp,sp,12
 8018930:	f800283a 	ret

08018934 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 8018934:	defff504 	addi	sp,sp,-44
 8018938:	dfc00a15 	stw	ra,40(sp)
 801893c:	df000915 	stw	fp,36(sp)
 8018940:	df000904 	addi	fp,sp,36
 8018944:	2005883a 	mov	r2,r4
 8018948:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801894c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 8018950:	e0bff703 	ldbu	r2,-36(fp)
 8018954:	10800530 	cmpltui	r2,r2,20
 8018958:	1000021e 	bne	r2,zero,8018964 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 801895c:	00800a84 	movi	r2,42
 8018960:	00006706 	br	8018b00 <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
 8018964:	0005303a 	rdctl	r2,status
 8018968:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801896c:	e0fffd17 	ldw	r3,-12(fp)
 8018970:	00bfff84 	movi	r2,-2
 8018974:	1884703a 	and	r2,r3,r2
 8018978:	1001703a 	wrctl	status,r2
  return context;
 801897c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8018980:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 8018984:	e0bff703 	ldbu	r2,-36(fp)
 8018988:	100690ba 	slli	r3,r2,2
 801898c:	008201b4 	movhi	r2,2054
 8018990:	1885883a 	add	r2,r3,r2
 8018994:	10b90c17 	ldw	r2,-7120(r2)
 8018998:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
 801899c:	e0bffe17 	ldw	r2,-8(fp)
 80189a0:	1000071e 	bne	r2,zero,80189c0 <OSTimeDlyResume+0x8c>
 80189a4:	e0bfff17 	ldw	r2,-4(fp)
 80189a8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80189ac:	e0bffc17 	ldw	r2,-16(fp)
 80189b0:	1001703a 	wrctl	status,r2
}
 80189b4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 80189b8:	008010c4 	movi	r2,67
 80189bc:	00005006 	br	8018b00 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
 80189c0:	e0bffe17 	ldw	r2,-8(fp)
 80189c4:	10800058 	cmpnei	r2,r2,1
 80189c8:	1000071e 	bne	r2,zero,80189e8 <OSTimeDlyResume+0xb4>
 80189cc:	e0bfff17 	ldw	r2,-4(fp)
 80189d0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80189d4:	e0bffb17 	ldw	r2,-20(fp)
 80189d8:	1001703a 	wrctl	status,r2
}
 80189dc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 80189e0:	008010c4 	movi	r2,67
 80189e4:	00004606 	br	8018b00 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 80189e8:	e0bffe17 	ldw	r2,-8(fp)
 80189ec:	10800b8b 	ldhu	r2,46(r2)
 80189f0:	10bfffcc 	andi	r2,r2,65535
 80189f4:	1000071e 	bne	r2,zero,8018a14 <OSTimeDlyResume+0xe0>
 80189f8:	e0bfff17 	ldw	r2,-4(fp)
 80189fc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8018a00:	e0bffa17 	ldw	r2,-24(fp)
 8018a04:	1001703a 	wrctl	status,r2
}
 8018a08:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 8018a0c:	00801404 	movi	r2,80
 8018a10:	00003b06 	br	8018b00 <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 8018a14:	e0bffe17 	ldw	r2,-8(fp)
 8018a18:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8018a1c:	e0bffe17 	ldw	r2,-8(fp)
 8018a20:	10800c03 	ldbu	r2,48(r2)
 8018a24:	10803fcc 	andi	r2,r2,255
 8018a28:	10800dcc 	andi	r2,r2,55
 8018a2c:	10000b26 	beq	r2,zero,8018a5c <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 8018a30:	e0bffe17 	ldw	r2,-8(fp)
 8018a34:	10c00c03 	ldbu	r3,48(r2)
 8018a38:	00bff204 	movi	r2,-56
 8018a3c:	1884703a 	and	r2,r3,r2
 8018a40:	1007883a 	mov	r3,r2
 8018a44:	e0bffe17 	ldw	r2,-8(fp)
 8018a48:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 8018a4c:	e0bffe17 	ldw	r2,-8(fp)
 8018a50:	00c00044 	movi	r3,1
 8018a54:	10c00c45 	stb	r3,49(r2)
 8018a58:	00000206 	br	8018a64 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 8018a5c:	e0bffe17 	ldw	r2,-8(fp)
 8018a60:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 8018a64:	e0bffe17 	ldw	r2,-8(fp)
 8018a68:	10800c03 	ldbu	r2,48(r2)
 8018a6c:	10803fcc 	andi	r2,r2,255
 8018a70:	1080020c 	andi	r2,r2,8
 8018a74:	10001c1e 	bne	r2,zero,8018ae8 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 8018a78:	e0bffe17 	ldw	r2,-8(fp)
 8018a7c:	10c00d83 	ldbu	r3,54(r2)
 8018a80:	d0a07203 	ldbu	r2,-32312(gp)
 8018a84:	1884b03a 	or	r2,r3,r2
 8018a88:	d0a07205 	stb	r2,-32312(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8018a8c:	e0bffe17 	ldw	r2,-8(fp)
 8018a90:	10800d03 	ldbu	r2,52(r2)
 8018a94:	10c03fcc 	andi	r3,r2,255
 8018a98:	d0a07244 	addi	r2,gp,-32311
 8018a9c:	1885883a 	add	r2,r3,r2
 8018aa0:	11000003 	ldbu	r4,0(r2)
 8018aa4:	e0bffe17 	ldw	r2,-8(fp)
 8018aa8:	10800d43 	ldbu	r2,53(r2)
 8018aac:	e0fffe17 	ldw	r3,-8(fp)
 8018ab0:	18c00d03 	ldbu	r3,52(r3)
 8018ab4:	18c03fcc 	andi	r3,r3,255
 8018ab8:	2084b03a 	or	r2,r4,r2
 8018abc:	1009883a 	mov	r4,r2
 8018ac0:	d0a07244 	addi	r2,gp,-32311
 8018ac4:	1885883a 	add	r2,r3,r2
 8018ac8:	11000005 	stb	r4,0(r2)
 8018acc:	e0bfff17 	ldw	r2,-4(fp)
 8018ad0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 8018ad4:	e0bff917 	ldw	r2,-28(fp)
 8018ad8:	1001703a 	wrctl	status,r2
}
 8018adc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 8018ae0:	8012be80 	call	8012be8 <OS_Sched>
 8018ae4:	00000506 	br	8018afc <OSTimeDlyResume+0x1c8>
 8018ae8:	e0bfff17 	ldw	r2,-4(fp)
 8018aec:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8018af0:	e0bff817 	ldw	r2,-32(fp)
 8018af4:	1001703a 	wrctl	status,r2
}
 8018af8:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 8018afc:	0005883a 	mov	r2,zero
}
 8018b00:	e037883a 	mov	sp,fp
 8018b04:	dfc00117 	ldw	ra,4(sp)
 8018b08:	df000017 	ldw	fp,0(sp)
 8018b0c:	dec00204 	addi	sp,sp,8
 8018b10:	f800283a 	ret

08018b14 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 8018b14:	defffb04 	addi	sp,sp,-20
 8018b18:	df000415 	stw	fp,16(sp)
 8018b1c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018b20:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8018b24:	0005303a 	rdctl	r2,status
 8018b28:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018b2c:	e0fffc17 	ldw	r3,-16(fp)
 8018b30:	00bfff84 	movi	r2,-2
 8018b34:	1884703a 	and	r2,r3,r2
 8018b38:	1001703a 	wrctl	status,r2
  return context;
 8018b3c:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
 8018b40:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
 8018b44:	d0a07617 	ldw	r2,-32296(gp)
 8018b48:	e0bffe15 	stw	r2,-8(fp)
 8018b4c:	e0bfff17 	ldw	r2,-4(fp)
 8018b50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8018b54:	e0bffd17 	ldw	r2,-12(fp)
 8018b58:	1001703a 	wrctl	status,r2
}
 8018b5c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
 8018b60:	e0bffe17 	ldw	r2,-8(fp)
}
 8018b64:	e037883a 	mov	sp,fp
 8018b68:	df000017 	ldw	fp,0(sp)
 8018b6c:	dec00104 	addi	sp,sp,4
 8018b70:	f800283a 	ret

08018b74 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 8018b74:	defffb04 	addi	sp,sp,-20
 8018b78:	df000415 	stw	fp,16(sp)
 8018b7c:	df000404 	addi	fp,sp,16
 8018b80:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8018b84:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
 8018b88:	0005303a 	rdctl	r2,status
 8018b8c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018b90:	e0fffd17 	ldw	r3,-12(fp)
 8018b94:	00bfff84 	movi	r2,-2
 8018b98:	1884703a 	and	r2,r3,r2
 8018b9c:	1001703a 	wrctl	status,r2
  return context;
 8018ba0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 8018ba4:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
 8018ba8:	e0bffc17 	ldw	r2,-16(fp)
 8018bac:	d0a07615 	stw	r2,-32296(gp)
 8018bb0:	e0bfff17 	ldw	r2,-4(fp)
 8018bb4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8018bb8:	e0bffe17 	ldw	r2,-8(fp)
 8018bbc:	1001703a 	wrctl	status,r2
}
 8018bc0:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
 8018bc4:	0001883a 	nop
 8018bc8:	e037883a 	mov	sp,fp
 8018bcc:	df000017 	ldw	fp,0(sp)
 8018bd0:	dec00104 	addi	sp,sp,4
 8018bd4:	f800283a 	ret

08018bd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8018bd8:	defffd04 	addi	sp,sp,-12
 8018bdc:	dfc00215 	stw	ra,8(sp)
 8018be0:	df000115 	stw	fp,4(sp)
 8018be4:	df000104 	addi	fp,sp,4
 8018be8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8018bec:	d1604004 	addi	r5,gp,-32512
 8018bf0:	e13fff17 	ldw	r4,-4(fp)
 8018bf4:	803ac080 	call	803ac08 <alt_dev_llist_insert>
}
 8018bf8:	e037883a 	mov	sp,fp
 8018bfc:	dfc00117 	ldw	ra,4(sp)
 8018c00:	df000017 	ldw	fp,0(sp)
 8018c04:	dec00204 	addi	sp,sp,8
 8018c08:	f800283a 	ret

08018c0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8018c0c:	defffd04 	addi	sp,sp,-12
 8018c10:	dfc00215 	stw	ra,8(sp)
 8018c14:	df000115 	stw	fp,4(sp)
 8018c18:	df000104 	addi	fp,sp,4
 8018c1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8018c20:	803bda00 	call	803bda0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8018c24:	00800044 	movi	r2,1
 8018c28:	1001703a 	wrctl	status,r2
}
 8018c2c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8018c30:	0001883a 	nop
 8018c34:	e037883a 	mov	sp,fp
 8018c38:	dfc00117 	ldw	ra,4(sp)
 8018c3c:	df000017 	ldw	fp,0(sp)
 8018c40:	dec00204 	addi	sp,sp,8
 8018c44:	f800283a 	ret

08018c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8018c48:	defffa04 	addi	sp,sp,-24
 8018c4c:	dfc00515 	stw	ra,20(sp)
 8018c50:	df000415 	stw	fp,16(sp)
 8018c54:	df000404 	addi	fp,sp,16
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 8018c58:	01c01904 	movi	r7,100
 8018c5c:	01800104 	movi	r6,4
 8018c60:	000b883a 	mov	r5,zero
 8018c64:	01060034 	movhi	r4,6144
 8018c68:	210fc004 	addi	r4,r4,16128
 8018c6c:	801b8dc0 	call	801b8dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_C0, i2c_ckm_c0);
 8018c70:	01020174 	movhi	r4,2053
 8018c74:	21131404 	addi	r4,r4,19536
 8018c78:	80191000 	call	8019100 <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_C1, i2c_ckm_c1);
 8018c7c:	01020174 	movhi	r4,2053
 8018c80:	21132304 	addi	r4,r4,19596
 8018c84:	80191000 	call	8019100 <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_CKM_ID, i2c_ckm_id);
 8018c88:	01020174 	movhi	r4,2053
 8018c8c:	21133204 	addi	r4,r4,19656
 8018c90:	80191000 	call	8019100 <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_RXM_CTRL, i2c_rxm_ctrl);
 8018c94:	01020174 	movhi	r4,2053
 8018c98:	21134104 	addi	r4,r4,19716
 8018c9c:	80191000 	call	8019100 <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_RXM_ID, i2c_rxm_id);
 8018ca0:	01020174 	movhi	r4,2053
 8018ca4:	21135004 	addi	r4,r4,19776
 8018ca8:	80191000 	call	8019100 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 8018cac:	018000c4 	movi	r6,3
 8018cb0:	000b883a 	mov	r5,zero
 8018cb4:	01020174 	movhi	r4,2053
 8018cb8:	21136904 	addi	r4,r4,19876
 8018cbc:	801ac640 	call	801ac64 <altera_avalon_jtag_uart_init>
 8018cc0:	01020174 	movhi	r4,2053
 8018cc4:	21135f04 	addi	r4,r4,19836
 8018cc8:	8018bd80 	call	8018bd8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_RXM, spi_rxm);
 8018ccc:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8018cd0:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETH_TSE, eth_tse);
 8018cd4:	e03fff15 	stw	zero,-4(fp)
 8018cd8:	00800044 	movi	r2,1
 8018cdc:	e0bffe15 	stw	r2,-8(fp)
 8018ce0:	e0bffe17 	ldw	r2,-8(fp)
 8018ce4:	00800216 	blt	zero,r2,8018cf0 <alt_sys_init+0xa8>
 8018ce8:	00800044 	movi	r2,1
 8018cec:	e0bffe15 	stw	r2,-8(fp)
 8018cf0:	e03fff15 	stw	zero,-4(fp)
 8018cf4:	00004f06 	br	8018e34 <alt_sys_init+0x1ec>
 8018cf8:	e0bfff17 	ldw	r2,-4(fp)
 8018cfc:	10c00724 	muli	r3,r2,28
 8018d00:	008201b4 	movhi	r2,2054
 8018d04:	1885883a 	add	r2,r3,r2
 8018d08:	10392115 	stw	zero,-7036(r2)
 8018d0c:	e0bfff17 	ldw	r2,-4(fp)
 8018d10:	10c00724 	muli	r3,r2,28
 8018d14:	008201b4 	movhi	r2,2054
 8018d18:	1885883a 	add	r2,r3,r2
 8018d1c:	10392215 	stw	zero,-7032(r2)
 8018d20:	d0e02417 	ldw	r3,-32624(gp)
 8018d24:	e0bfff17 	ldw	r2,-4(fp)
 8018d28:	11000724 	muli	r4,r2,28
 8018d2c:	008201b4 	movhi	r2,2054
 8018d30:	2085883a 	add	r2,r4,r2
 8018d34:	10f92315 	stw	r3,-7028(r2)
 8018d38:	e0bfff17 	ldw	r2,-4(fp)
 8018d3c:	11000724 	muli	r4,r2,28
 8018d40:	00c200b4 	movhi	r3,2050
 8018d44:	18cd3f04 	addi	r3,r3,13564
 8018d48:	008201b4 	movhi	r2,2054
 8018d4c:	2085883a 	add	r2,r4,r2
 8018d50:	10f92415 	stw	r3,-7024(r2)
 8018d54:	e0bfff17 	ldw	r2,-4(fp)
 8018d58:	10c00724 	muli	r3,r2,28
 8018d5c:	008201b4 	movhi	r2,2054
 8018d60:	10b92104 	addi	r2,r2,-7036
 8018d64:	1885883a 	add	r2,r3,r2
 8018d68:	d0e02a04 	addi	r3,gp,-32600
 8018d6c:	e0fffd15 	stw	r3,-12(fp)
 8018d70:	e0bffc15 	stw	r2,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8018d74:	e0bffc17 	ldw	r2,-16(fp)
 8018d78:	e0fffd17 	ldw	r3,-12(fp)
 8018d7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8018d80:	e0bffd17 	ldw	r2,-12(fp)
 8018d84:	10c00017 	ldw	r3,0(r2)
 8018d88:	e0bffc17 	ldw	r2,-16(fp)
 8018d8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8018d90:	e0bffd17 	ldw	r2,-12(fp)
 8018d94:	10800017 	ldw	r2,0(r2)
 8018d98:	e0fffc17 	ldw	r3,-16(fp)
 8018d9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8018da0:	e0bffd17 	ldw	r2,-12(fp)
 8018da4:	e0fffc17 	ldw	r3,-16(fp)
 8018da8:	10c00015 	stw	r3,0(r2)
}
 8018dac:	0001883a 	nop
 8018db0:	d0a07b03 	ldbu	r2,-32276(gp)
 8018db4:	11003fcc 	andi	r4,r2,255
 8018db8:	e0bfff17 	ldw	r2,-4(fp)
 8018dbc:	10c00724 	muli	r3,r2,28
 8018dc0:	008201b4 	movhi	r2,2054
 8018dc4:	10b92104 	addi	r2,r2,-7036
 8018dc8:	1887883a 	add	r3,r3,r2
 8018dcc:	21000324 	muli	r4,r4,12
 8018dd0:	008201b4 	movhi	r2,2054
 8018dd4:	2085883a 	add	r2,r4,r2
 8018dd8:	10f96515 	stw	r3,-6764(r2)
 8018ddc:	d0a07b03 	ldbu	r2,-32276(gp)
 8018de0:	10803fcc 	andi	r2,r2,255
 8018de4:	11000324 	muli	r4,r2,12
 8018de8:	00c60034 	movhi	r3,6144
 8018dec:	18ce0004 	addi	r3,r3,14336
 8018df0:	008201b4 	movhi	r2,2054
 8018df4:	2085883a 	add	r2,r4,r2
 8018df8:	10f96615 	stw	r3,-6760(r2)
 8018dfc:	d0a07b03 	ldbu	r2,-32276(gp)
 8018e00:	10803fcc 	andi	r2,r2,255
 8018e04:	e0ffff17 	ldw	r3,-4(fp)
 8018e08:	1809883a 	mov	r4,r3
 8018e0c:	10c00324 	muli	r3,r2,12
 8018e10:	008201b4 	movhi	r2,2054
 8018e14:	1885883a 	add	r2,r3,r2
 8018e18:	11396705 	stb	r4,-6756(r2)
 8018e1c:	d0a07b03 	ldbu	r2,-32276(gp)
 8018e20:	10800044 	addi	r2,r2,1
 8018e24:	d0a07b05 	stb	r2,-32276(gp)
 8018e28:	e0bfff17 	ldw	r2,-4(fp)
 8018e2c:	10800044 	addi	r2,r2,1
 8018e30:	e0bfff15 	stw	r2,-4(fp)
 8018e34:	e0ffff17 	ldw	r3,-4(fp)
 8018e38:	e0bffe17 	ldw	r2,-8(fp)
 8018e3c:	18bfae16 	blt	r3,r2,8018cf8 <alt_sys_init+0xb0>
    ALTERA_GENERIC_QUAD_SPI_CONTROLLER_INIT ( EXT_FLASH, ext_flash);
 8018e40:	01020174 	movhi	r4,2053
 8018e44:	21177a04 	addi	r4,r4,24040
 8018e48:	80210180 	call	8021018 <altera_qspi_controller_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_RX, msgdma_rx);
 8018e4c:	00820174 	movhi	r2,2053
 8018e50:	10d7bb17 	ldw	r3,24300(r2)
 8018e54:	00820174 	movhi	r2,2053
 8018e58:	1097bc17 	ldw	r2,24304(r2)
 8018e5c:	100d883a 	mov	r6,r2
 8018e60:	180b883a 	mov	r5,r3
 8018e64:	01020174 	movhi	r4,2053
 8018e68:	2117b404 	addi	r4,r4,24272
 8018e6c:	80232100 	call	8023210 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( MSGDMA_TX, msgdma_tx);
 8018e70:	00820174 	movhi	r2,2053
 8018e74:	10d7d717 	ldw	r3,24412(r2)
 8018e78:	00820174 	movhi	r2,2053
 8018e7c:	1097d817 	ldw	r2,24416(r2)
 8018e80:	100d883a 	mov	r6,r2
 8018e84:	180b883a 	mov	r5,r3
 8018e88:	01020174 	movhi	r4,2053
 8018e8c:	2117d004 	addi	r4,r4,24384
 8018e90:	80232100 	call	8023210 <alt_msgdma_init>
}
 8018e94:	0001883a 	nop
 8018e98:	e037883a 	mov	sp,fp
 8018e9c:	dfc00117 	ldw	ra,4(sp)
 8018ea0:	df000017 	ldw	fp,0(sp)
 8018ea4:	dec00204 	addi	sp,sp,8
 8018ea8:	f800283a 	ret

08018eac <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 8018eac:	defff904 	addi	sp,sp,-28
 8018eb0:	dfc00615 	stw	ra,24(sp)
 8018eb4:	df000515 	stw	fp,20(sp)
 8018eb8:	df000504 	addi	fp,sp,20
 8018ebc:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
 8018ec0:	008000b4 	movhi	r2,2
 8018ec4:	10a1a804 	addi	r2,r2,-31072
 8018ec8:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 8018ecc:	e0bffb17 	ldw	r2,-20(fp)
 8018ed0:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8018ed4:	e0bffe17 	ldw	r2,-8(fp)
 8018ed8:	10800717 	ldw	r2,28(r2)
 8018edc:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8018ee0:	e0bffd17 	ldw	r2,-12(fp)
 8018ee4:	10800217 	ldw	r2,8(r2)
 8018ee8:	10800098 	cmpnei	r2,r2,2
 8018eec:	1000251e 	bne	r2,zero,8018f84 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8018ef0:	e0bffd17 	ldw	r2,-12(fp)
 8018ef4:	10c00017 	ldw	r3,0(r2)
 8018ef8:	e0bffd17 	ldw	r2,-12(fp)
 8018efc:	10800117 	ldw	r2,4(r2)
 8018f00:	e13ffc04 	addi	r4,fp,-16
 8018f04:	200f883a 	mov	r7,r4
 8018f08:	100d883a 	mov	r6,r2
 8018f0c:	180b883a 	mov	r5,r3
 8018f10:	e13ffe17 	ldw	r4,-8(fp)
 8018f14:	80196a00 	call	80196a0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 8018f18:	e0bffd17 	ldw	r2,-12(fp)
 8018f1c:	10c00117 	ldw	r3,4(r2)
 8018f20:	e0bffc17 	ldw	r2,-16(fp)
 8018f24:	1887c83a 	sub	r3,r3,r2
 8018f28:	e0bffd17 	ldw	r2,-12(fp)
 8018f2c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 8018f30:	e0bffd17 	ldw	r2,-12(fp)
 8018f34:	10c00017 	ldw	r3,0(r2)
 8018f38:	e0bffc17 	ldw	r2,-16(fp)
 8018f3c:	1887883a 	add	r3,r3,r2
 8018f40:	e0bffd17 	ldw	r2,-12(fp)
 8018f44:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 8018f48:	e0bffd17 	ldw	r2,-12(fp)
 8018f4c:	10800117 	ldw	r2,4(r2)
 8018f50:	10000c26 	beq	r2,zero,8018f84 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8018f54:	01400704 	movi	r5,28
 8018f58:	e13ffe17 	ldw	r4,-8(fp)
 8018f5c:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8018f60:	01400084 	movi	r5,2
 8018f64:	e13ffe17 	ldw	r4,-8(fp)
 8018f68:	801a8f40 	call	801a8f4 <alt_avalon_i2c_int_enable>
 8018f6c:	00000e06 	br	8018fa8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 8018f70:	e0bfff17 	ldw	r2,-4(fp)
 8018f74:	10bfffc4 	addi	r2,r2,-1
 8018f78:	e0bfff15 	stw	r2,-4(fp)
 8018f7c:	e0bfff17 	ldw	r2,-4(fp)
 8018f80:	10000426 	beq	r2,zero,8018f94 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 8018f84:	e13ffe17 	ldw	r4,-8(fp)
 8018f88:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 8018f8c:	103ff81e 	bne	r2,zero,8018f70 <optional_irq_callback+0xc4>
 8018f90:	00000106 	br	8018f98 <optional_irq_callback+0xec>
      {
         break;
 8018f94:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 8018f98:	e13ffe17 	ldw	r4,-8(fp)
 8018f9c:	80193040 	call	8019304 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 8018fa0:	e0bffd17 	ldw	r2,-12(fp)
 8018fa4:	10000215 	stw	zero,8(r2)
}
 8018fa8:	e037883a 	mov	sp,fp
 8018fac:	dfc00117 	ldw	ra,4(sp)
 8018fb0:	df000017 	ldw	fp,0(sp)
 8018fb4:	dec00204 	addi	sp,sp,8
 8018fb8:	f800283a 	ret

08018fbc <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8018fbc:	defffc04 	addi	sp,sp,-16
 8018fc0:	dfc00315 	stw	ra,12(sp)
 8018fc4:	df000215 	stw	fp,8(sp)
 8018fc8:	df000204 	addi	fp,sp,8
 8018fcc:	e13fff15 	stw	r4,-4(fp)
 8018fd0:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
 8018fd4:	e0bffe17 	ldw	r2,-8(fp)
 8018fd8:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8018fdc:	e1fffe17 	ldw	r7,-8(fp)
 8018fe0:	000d883a 	mov	r6,zero
 8018fe4:	014200b4 	movhi	r5,2050
 8018fe8:	2963ab04 	addi	r5,r5,-29012
 8018fec:	e13fff17 	ldw	r4,-4(fp)
 8018ff0:	80190ac0 	call	80190ac <alt_avalon_i2c_register_callback>
}
 8018ff4:	0001883a 	nop
 8018ff8:	e037883a 	mov	sp,fp
 8018ffc:	dfc00117 	ldw	ra,4(sp)
 8019000:	df000017 	ldw	fp,0(sp)
 8019004:	dec00204 	addi	sp,sp,8
 8019008:	f800283a 	ret

0801900c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 801900c:	defff904 	addi	sp,sp,-28
 8019010:	dfc00615 	stw	ra,24(sp)
 8019014:	df000515 	stw	fp,20(sp)
 8019018:	df000504 	addi	fp,sp,20
 801901c:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8019020:	e0bffb17 	ldw	r2,-20(fp)
 8019024:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8019028:	014007c4 	movi	r5,31
 801902c:	e13fff17 	ldw	r4,-4(fp)
 8019030:	801a8880 	call	801a888 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8019034:	01400704 	movi	r5,28
 8019038:	e13fff17 	ldw	r4,-4(fp)
 801903c:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8019040:	e0bfff17 	ldw	r2,-4(fp)
 8019044:	10800617 	ldw	r2,24(r2)
 8019048:	10001226 	beq	r2,zero,8019094 <alt_avalon_i2c_irq+0x88>
  NIOS2_READ_STATUS (context);
 801904c:	0005303a 	rdctl	r2,status
 8019050:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019054:	e0fffc17 	ldw	r3,-16(fp)
 8019058:	00bfff84 	movi	r2,-2
 801905c:	1884703a 	and	r2,r3,r2
 8019060:	1001703a 	wrctl	status,r2
  return context;
 8019064:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8019068:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
 801906c:	e0bfff17 	ldw	r2,-4(fp)
 8019070:	10800617 	ldw	r2,24(r2)
 8019074:	e13fff17 	ldw	r4,-4(fp)
 8019078:	103ee83a 	callr	r2
 801907c:	e0bffe17 	ldw	r2,-8(fp)
 8019080:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8019084:	e0bffd17 	ldw	r2,-12(fp)
 8019088:	1001703a 	wrctl	status,r2
}
 801908c:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    return;
 8019090:	0001883a 	nop
 8019094:	0001883a 	nop
}
 8019098:	e037883a 	mov	sp,fp
 801909c:	dfc00117 	ldw	ra,4(sp)
 80190a0:	df000017 	ldw	fp,0(sp)
 80190a4:	dec00204 	addi	sp,sp,8
 80190a8:	f800283a 	ret

080190ac <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 80190ac:	defffb04 	addi	sp,sp,-20
 80190b0:	df000415 	stw	fp,16(sp)
 80190b4:	df000404 	addi	fp,sp,16
 80190b8:	e13fff15 	stw	r4,-4(fp)
 80190bc:	e17ffe15 	stw	r5,-8(fp)
 80190c0:	e1bffd15 	stw	r6,-12(fp)
 80190c4:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 80190c8:	e0bfff17 	ldw	r2,-4(fp)
 80190cc:	e0fffe17 	ldw	r3,-8(fp)
 80190d0:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 80190d4:	e0bfff17 	ldw	r2,-4(fp)
 80190d8:	e0fffc17 	ldw	r3,-16(fp)
 80190dc:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 80190e0:	e0bfff17 	ldw	r2,-4(fp)
 80190e4:	e0fffd17 	ldw	r3,-12(fp)
 80190e8:	10c00815 	stw	r3,32(r2)

    return ;
 80190ec:	0001883a 	nop
}
 80190f0:	e037883a 	mov	sp,fp
 80190f4:	df000017 	ldw	fp,0(sp)
 80190f8:	dec00104 	addi	sp,sp,4
 80190fc:	f800283a 	ret

08019100 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8019100:	defff504 	addi	sp,sp,-44
 8019104:	dfc00a15 	stw	ra,40(sp)
 8019108:	df000915 	stw	fp,36(sp)
 801910c:	df000904 	addi	fp,sp,36
 8019110:	e13ff815 	stw	r4,-32(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8019114:	e13ff817 	ldw	r4,-32(fp)
 8019118:	80193040 	call	8019304 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 801911c:	014007c4 	movi	r5,31
 8019120:	e13ff817 	ldw	r4,-32(fp)
 8019124:	801a8880 	call	801a888 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8019128:	01400704 	movi	r5,28
 801912c:	e13ff817 	ldw	r4,-32(fp)
 8019130:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8019134:	014000c4 	movi	r5,3
 8019138:	e13ff817 	ldw	r4,-32(fp)
 801913c:	801aa9c0 	call	801aa9c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8019140:	014000c4 	movi	r5,3
 8019144:	e13ff817 	ldw	r4,-32(fp)
 8019148:	801a9ec0 	call	801a9ec <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 801914c:	e03ffa15 	stw	zero,-24(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 8019150:	e03ff915 	stw	zero,-28(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 8019154:	e0bff904 	addi	r2,fp,-28
 8019158:	018000b4 	movhi	r6,2
 801915c:	31a1a804 	addi	r6,r6,-31072
 8019160:	100b883a 	mov	r5,r2
 8019164:	e13ff817 	ldw	r4,-32(fp)
 8019168:	80195600 	call	8019560 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 801916c:	e0bff904 	addi	r2,fp,-28
 8019170:	100b883a 	mov	r5,r2
 8019174:	e13ff817 	ldw	r4,-32(fp)
 8019178:	80194000 	call	8019400 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 801917c:	d1602504 	addi	r5,gp,-32620
 8019180:	e13ff817 	ldw	r4,-32(fp)
 8019184:	803ac080 	call	803ac08 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8019188:	e0bff817 	ldw	r2,-32(fp)
 801918c:	10800e04 	addi	r2,r2,56
 8019190:	e0bffe15 	stw	r2,-8(fp)
 8019194:	00800044 	movi	r2,1
 8019198:	e0bffd8d 	sth	r2,-10(fp)
  *sem = OSSemCreate (value);
 801919c:	e0bffd8b 	ldhu	r2,-10(fp)
 80191a0:	1009883a 	mov	r4,r2
 80191a4:	80165980 	call	8016598 <OSSemCreate>
 80191a8:	1007883a 	mov	r3,r2
 80191ac:	e0bffe17 	ldw	r2,-8(fp)
 80191b0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 80191b4:	e0bffe17 	ldw	r2,-8(fp)
 80191b8:	10800017 	ldw	r2,0(r2)
 80191bc:	10000226 	beq	r2,zero,80191c8 <alt_avalon_i2c_init+0xc8>
 80191c0:	0005883a 	mov	r2,zero
 80191c4:	00000106 	br	80191cc <alt_avalon_i2c_init+0xcc>
 80191c8:	00bfffc4 	movi	r2,-1
 80191cc:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
 80191d0:	e0bfff17 	ldw	r2,-4(fp)
 80191d4:	10000c1e 	bne	r2,zero,8019208 <alt_avalon_i2c_init+0x108>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 80191d8:	e0bff817 	ldw	r2,-32(fp)
 80191dc:	10c00417 	ldw	r3,16(r2)
 80191e0:	e0bff817 	ldw	r2,-32(fp)
 80191e4:	10800517 	ldw	r2,20(r2)
 80191e8:	d8000015 	stw	zero,0(sp)
 80191ec:	e1fff817 	ldw	r7,-32(fp)
 80191f0:	018200b4 	movhi	r6,2050
 80191f4:	31a40304 	addi	r6,r6,-28660
 80191f8:	100b883a 	mov	r5,r2
 80191fc:	1809883a 	mov	r4,r3
 8019200:	803aec40 	call	803aec4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8019204:	00000406 	br	8019218 <alt_avalon_i2c_init+0x118>
        alt_printf("failed to create semaphores\n");
 8019208:	01020174 	movhi	r4,2053
 801920c:	213fc004 	addi	r4,r4,-256
 8019210:	803b4d00 	call	803b4d0 <alt_printf>
    return;
 8019214:	0001883a 	nop

}
 8019218:	e037883a 	mov	sp,fp
 801921c:	dfc00117 	ldw	ra,4(sp)
 8019220:	df000017 	ldw	fp,0(sp)
 8019224:	dec00204 	addi	sp,sp,8
 8019228:	f800283a 	ret

0801922c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 801922c:	defffc04 	addi	sp,sp,-16
 8019230:	dfc00315 	stw	ra,12(sp)
 8019234:	df000215 	stw	fp,8(sp)
 8019238:	df000204 	addi	fp,sp,8
 801923c:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8019240:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8019244:	d1602504 	addi	r5,gp,-32620
 8019248:	e13ffe17 	ldw	r4,-8(fp)
 801924c:	803ad780 	call	803ad78 <alt_find_dev>
 8019250:	e0bfff15 	stw	r2,-4(fp)

    return dev;
 8019254:	e0bfff17 	ldw	r2,-4(fp)
}
 8019258:	e037883a 	mov	sp,fp
 801925c:	dfc00117 	ldw	ra,4(sp)
 8019260:	df000017 	ldw	fp,0(sp)
 8019264:	dec00204 	addi	sp,sp,8
 8019268:	f800283a 	ret

0801926c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801926c:	defffc04 	addi	sp,sp,-16
 8019270:	df000315 	stw	fp,12(sp)
 8019274:	df000304 	addi	fp,sp,12
 8019278:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 801927c:	e0bffd17 	ldw	r2,-12(fp)
 8019280:	10800717 	ldw	r2,28(r2)
 8019284:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 8019288:	e0bffd17 	ldw	r2,-12(fp)
 801928c:	10800317 	ldw	r2,12(r2)
 8019290:	10800204 	addi	r2,r2,8
 8019294:	10800037 	ldwio	r2,0(r2)
 8019298:	1080004c 	andi	r2,r2,1
 801929c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 80192a0:	e0bffe17 	ldw	r2,-8(fp)
 80192a4:	10000226 	beq	r2,zero,80192b0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 80192a8:	00bffe44 	movi	r2,-7
 80192ac:	00001106 	br	80192f4 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 80192b0:	e0bffd17 	ldw	r2,-12(fp)
 80192b4:	10c00617 	ldw	r3,24(r2)
 80192b8:	008200b4 	movhi	r2,2050
 80192bc:	10a3ab04 	addi	r2,r2,-29012
 80192c0:	1880021e 	bne	r3,r2,80192cc <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 80192c4:	e0bfff17 	ldw	r2,-4(fp)
 80192c8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 80192cc:	e0bffd17 	ldw	r2,-12(fp)
 80192d0:	10800317 	ldw	r2,12(r2)
 80192d4:	10800204 	addi	r2,r2,8
 80192d8:	e0fffd17 	ldw	r3,-12(fp)
 80192dc:	18c00317 	ldw	r3,12(r3)
 80192e0:	18c00204 	addi	r3,r3,8
 80192e4:	18c00037 	ldwio	r3,0(r3)
 80192e8:	18c00054 	ori	r3,r3,1
 80192ec:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 80192f0:	0005883a 	mov	r2,zero
}
 80192f4:	e037883a 	mov	sp,fp
 80192f8:	df000017 	ldw	fp,0(sp)
 80192fc:	dec00104 	addi	sp,sp,4
 8019300:	f800283a 	ret

08019304 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8019304:	defffe04 	addi	sp,sp,-8
 8019308:	df000115 	stw	fp,4(sp)
 801930c:	df000104 	addi	fp,sp,4
 8019310:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8019314:	e0bfff17 	ldw	r2,-4(fp)
 8019318:	10800317 	ldw	r2,12(r2)
 801931c:	10800204 	addi	r2,r2,8
 8019320:	e0ffff17 	ldw	r3,-4(fp)
 8019324:	18c00317 	ldw	r3,12(r3)
 8019328:	18c00204 	addi	r3,r3,8
 801932c:	19000037 	ldwio	r4,0(r3)
 8019330:	00ffff84 	movi	r3,-2
 8019334:	20c6703a 	and	r3,r4,r3
 8019338:	10c00035 	stwio	r3,0(r2)

}
 801933c:	0001883a 	nop
 8019340:	e037883a 	mov	sp,fp
 8019344:	df000017 	ldw	fp,0(sp)
 8019348:	dec00104 	addi	sp,sp,4
 801934c:	f800283a 	ret

08019350 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8019350:	defffd04 	addi	sp,sp,-12
 8019354:	df000215 	stw	fp,8(sp)
 8019358:	df000204 	addi	fp,sp,8
 801935c:	e13fff15 	stw	r4,-4(fp)
 8019360:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8019364:	e0bfff17 	ldw	r2,-4(fp)
 8019368:	10c00d17 	ldw	r3,52(r2)
 801936c:	e0bffe17 	ldw	r2,-8(fp)
 8019370:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8019374:	e0bfff17 	ldw	r2,-4(fp)
 8019378:	10800317 	ldw	r2,12(r2)
 801937c:	10800204 	addi	r2,r2,8
 8019380:	10800037 	ldwio	r2,0(r2)
 8019384:	1005d07a 	srai	r2,r2,1
 8019388:	1080004c 	andi	r2,r2,1
 801938c:	1007883a 	mov	r3,r2
 8019390:	e0bffe17 	ldw	r2,-8(fp)
 8019394:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 8019398:	e0bfff17 	ldw	r2,-4(fp)
 801939c:	10800317 	ldw	r2,12(r2)
 80193a0:	10800904 	addi	r2,r2,36
 80193a4:	10800037 	ldwio	r2,0(r2)
 80193a8:	1007883a 	mov	r3,r2
 80193ac:	e0bffe17 	ldw	r2,-8(fp)
 80193b0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 80193b4:	e0bfff17 	ldw	r2,-4(fp)
 80193b8:	10800317 	ldw	r2,12(r2)
 80193bc:	10800804 	addi	r2,r2,32
 80193c0:	10800037 	ldwio	r2,0(r2)
 80193c4:	1007883a 	mov	r3,r2
 80193c8:	e0bffe17 	ldw	r2,-8(fp)
 80193cc:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 80193d0:	e0bfff17 	ldw	r2,-4(fp)
 80193d4:	10800317 	ldw	r2,12(r2)
 80193d8:	10800a04 	addi	r2,r2,40
 80193dc:	10800037 	ldwio	r2,0(r2)
 80193e0:	1007883a 	mov	r3,r2
 80193e4:	e0bffe17 	ldw	r2,-8(fp)
 80193e8:	10c0030d 	sth	r3,12(r2)
}
 80193ec:	0001883a 	nop
 80193f0:	e037883a 	mov	sp,fp
 80193f4:	df000017 	ldw	fp,0(sp)
 80193f8:	dec00104 	addi	sp,sp,4
 80193fc:	f800283a 	ret

08019400 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8019400:	defffd04 	addi	sp,sp,-12
 8019404:	df000215 	stw	fp,8(sp)
 8019408:	df000204 	addi	fp,sp,8
 801940c:	e13fff15 	stw	r4,-4(fp)
 8019410:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8019414:	e0bffe17 	ldw	r2,-8(fp)
 8019418:	10c00017 	ldw	r3,0(r2)
 801941c:	e0bfff17 	ldw	r2,-4(fp)
 8019420:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8019424:	e0bfff17 	ldw	r2,-4(fp)
 8019428:	10800317 	ldw	r2,12(r2)
 801942c:	10c00204 	addi	r3,r2,8
 8019430:	e0bfff17 	ldw	r2,-4(fp)
 8019434:	10800317 	ldw	r2,12(r2)
 8019438:	10800204 	addi	r2,r2,8
 801943c:	10800037 	ldwio	r2,0(r2)
 8019440:	1009883a 	mov	r4,r2
 8019444:	00bfff44 	movi	r2,-3
 8019448:	2088703a 	and	r4,r4,r2
 801944c:	e0bffe17 	ldw	r2,-8(fp)
 8019450:	10800117 	ldw	r2,4(r2)
 8019454:	1085883a 	add	r2,r2,r2
 8019458:	1080008c 	andi	r2,r2,2
 801945c:	2084b03a 	or	r2,r4,r2
 8019460:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8019464:	e0bfff17 	ldw	r2,-4(fp)
 8019468:	10800317 	ldw	r2,12(r2)
 801946c:	10800904 	addi	r2,r2,36
 8019470:	e0fffe17 	ldw	r3,-8(fp)
 8019474:	18c0020b 	ldhu	r3,8(r3)
 8019478:	18ffffcc 	andi	r3,r3,65535
 801947c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 8019480:	e0bfff17 	ldw	r2,-4(fp)
 8019484:	10800317 	ldw	r2,12(r2)
 8019488:	10800804 	addi	r2,r2,32
 801948c:	e0fffe17 	ldw	r3,-8(fp)
 8019490:	18c0028b 	ldhu	r3,10(r3)
 8019494:	18ffffcc 	andi	r3,r3,65535
 8019498:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 801949c:	e0bfff17 	ldw	r2,-4(fp)
 80194a0:	10800317 	ldw	r2,12(r2)
 80194a4:	10800a04 	addi	r2,r2,40
 80194a8:	e0fffe17 	ldw	r3,-8(fp)
 80194ac:	18c0030b 	ldhu	r3,12(r3)
 80194b0:	18ffffcc 	andi	r3,r3,65535
 80194b4:	10c00035 	stwio	r3,0(r2)
}
 80194b8:	0001883a 	nop
 80194bc:	e037883a 	mov	sp,fp
 80194c0:	df000017 	ldw	fp,0(sp)
 80194c4:	dec00104 	addi	sp,sp,4
 80194c8:	f800283a 	ret

080194cc <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 80194cc:	defffb04 	addi	sp,sp,-20
 80194d0:	dfc00415 	stw	ra,16(sp)
 80194d4:	df000315 	stw	fp,12(sp)
 80194d8:	df000304 	addi	fp,sp,12
 80194dc:	e13fff15 	stw	r4,-4(fp)
 80194e0:	e17ffe15 	stw	r5,-8(fp)
 80194e4:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 80194e8:	e0bffe17 	ldw	r2,-8(fp)
 80194ec:	1080028b 	ldhu	r2,10(r2)
 80194f0:	10bfffcc 	andi	r2,r2,65535
 80194f4:	10000426 	beq	r2,zero,8019508 <alt_avalon_i2c_master_config_speed_get+0x3c>
 80194f8:	e0bffe17 	ldw	r2,-8(fp)
 80194fc:	1080020b 	ldhu	r2,8(r2)
 8019500:	10bfffcc 	andi	r2,r2,65535
 8019504:	1000021e 	bne	r2,zero,8019510 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 8019508:	00bfff44 	movi	r2,-3
 801950c:	00000f06 	br	801954c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8019510:	e0bfff17 	ldw	r2,-4(fp)
 8019514:	11000c17 	ldw	r4,48(r2)
 8019518:	e0bffe17 	ldw	r2,-8(fp)
 801951c:	1080028b 	ldhu	r2,10(r2)
 8019520:	10ffffcc 	andi	r3,r2,65535
 8019524:	e0bffe17 	ldw	r2,-8(fp)
 8019528:	1080020b 	ldhu	r2,8(r2)
 801952c:	10bfffcc 	andi	r2,r2,65535
 8019530:	1885883a 	add	r2,r3,r2
 8019534:	100b883a 	mov	r5,r2
 8019538:	800e2300 	call	800e230 <__udivsi3>
 801953c:	1007883a 	mov	r3,r2
 8019540:	e0bffd17 	ldw	r2,-12(fp)
 8019544:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8019548:	0005883a 	mov	r2,zero
}
 801954c:	e037883a 	mov	sp,fp
 8019550:	dfc00117 	ldw	ra,4(sp)
 8019554:	df000017 	ldw	fp,0(sp)
 8019558:	dec00204 	addi	sp,sp,8
 801955c:	f800283a 	ret

08019560 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8019560:	defff904 	addi	sp,sp,-28
 8019564:	dfc00615 	stw	ra,24(sp)
 8019568:	df000515 	stw	fp,20(sp)
 801956c:	df000504 	addi	fp,sp,20
 8019570:	e13ffd15 	stw	r4,-12(fp)
 8019574:	e17ffc15 	stw	r5,-16(fp)
 8019578:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 801957c:	e0fffb17 	ldw	r3,-20(fp)
 8019580:	008001b4 	movhi	r2,6
 8019584:	1086a004 	addi	r2,r2,6784
 8019588:	10c00436 	bltu	r2,r3,801959c <alt_avalon_i2c_master_config_speed_set+0x3c>
 801958c:	e0bffb17 	ldw	r2,-20(fp)
 8019590:	10000226 	beq	r2,zero,801959c <alt_avalon_i2c_master_config_speed_set+0x3c>
 8019594:	e0bffb17 	ldw	r2,-20(fp)
 8019598:	1000021e 	bne	r2,zero,80195a4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 801959c:	00bfff04 	movi	r2,-4
 80195a0:	00002906 	br	8019648 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 80195a4:	e0bffd17 	ldw	r2,-12(fp)
 80195a8:	10c00c17 	ldw	r3,48(r2)
 80195ac:	e0bffb17 	ldw	r2,-20(fp)
 80195b0:	1085883a 	add	r2,r2,r2
 80195b4:	100b883a 	mov	r5,r2
 80195b8:	1809883a 	mov	r4,r3
 80195bc:	800e2300 	call	800e230 <__udivsi3>
 80195c0:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80195c4:	e0bfff17 	ldw	r2,-4(fp)
 80195c8:	10800f04 	addi	r2,r2,60
 80195cc:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80195d0:	e0bfff17 	ldw	r2,-4(fp)
 80195d4:	10bff104 	addi	r2,r2,-60
 80195d8:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 80195dc:	e0fffb17 	ldw	r3,-20(fp)
 80195e0:	008000b4 	movhi	r2,2
 80195e4:	10a1a804 	addi	r2,r2,-31072
 80195e8:	10c0042e 	bgeu	r2,r3,80195fc <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 80195ec:	e0bffc17 	ldw	r2,-16(fp)
 80195f0:	00c00044 	movi	r3,1
 80195f4:	10c00115 	stw	r3,4(r2)
 80195f8:	00000206 	br	8019604 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 80195fc:	e0bffc17 	ldw	r2,-16(fp)
 8019600:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8019604:	e0bfff17 	ldw	r2,-4(fp)
 8019608:	1007883a 	mov	r3,r2
 801960c:	e0bffc17 	ldw	r2,-16(fp)
 8019610:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8019614:	e0bffe17 	ldw	r2,-8(fp)
 8019618:	1007883a 	mov	r3,r2
 801961c:	e0bffc17 	ldw	r2,-16(fp)
 8019620:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8019624:	e0bfff17 	ldw	r2,-4(fp)
 8019628:	1007883a 	mov	r3,r2
 801962c:	e0bfff17 	ldw	r2,-4(fp)
 8019630:	1004d07a 	srli	r2,r2,1
 8019634:	1885c83a 	sub	r2,r3,r2
 8019638:	1007883a 	mov	r3,r2
 801963c:	e0bffc17 	ldw	r2,-16(fp)
 8019640:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 8019644:	0005883a 	mov	r2,zero

}
 8019648:	e037883a 	mov	sp,fp
 801964c:	dfc00117 	ldw	ra,4(sp)
 8019650:	df000017 	ldw	fp,0(sp)
 8019654:	dec00204 	addi	sp,sp,8
 8019658:	f800283a 	ret

0801965c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801965c:	defffe04 	addi	sp,sp,-8
 8019660:	df000115 	stw	fp,4(sp)
 8019664:	df000104 	addi	fp,sp,4
 8019668:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 801966c:	e0bfff17 	ldw	r2,-4(fp)
 8019670:	10800317 	ldw	r2,12(r2)
 8019674:	10800504 	addi	r2,r2,20
 8019678:	10800037 	ldwio	r2,0(r2)
 801967c:	1080004c 	andi	r2,r2,1
 8019680:	10000226 	beq	r2,zero,801968c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 8019684:	00800044 	movi	r2,1
 8019688:	00000106 	br	8019690 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 801968c:	0005883a 	mov	r2,zero
}
 8019690:	e037883a 	mov	sp,fp
 8019694:	df000017 	ldw	fp,0(sp)
 8019698:	dec00104 	addi	sp,sp,4
 801969c:	f800283a 	ret

080196a0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 80196a0:	defffb04 	addi	sp,sp,-20
 80196a4:	df000415 	stw	fp,16(sp)
 80196a8:	df000404 	addi	fp,sp,16
 80196ac:	e13fff15 	stw	r4,-4(fp)
 80196b0:	e17ffe15 	stw	r5,-8(fp)
 80196b4:	e1bffd15 	stw	r6,-12(fp)
 80196b8:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
 80196bc:	e0bffc17 	ldw	r2,-16(fp)
 80196c0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 80196c4:	00001506 	br	801971c <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80196c8:	e0bfff17 	ldw	r2,-4(fp)
 80196cc:	10800317 	ldw	r2,12(r2)
 80196d0:	10800104 	addi	r2,r2,4
 80196d4:	11000037 	ldwio	r4,0(r2)
 80196d8:	e0bffc17 	ldw	r2,-16(fp)
 80196dc:	10800017 	ldw	r2,0(r2)
 80196e0:	e0fffe17 	ldw	r3,-8(fp)
 80196e4:	1885883a 	add	r2,r3,r2
 80196e8:	2007883a 	mov	r3,r4
 80196ec:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 80196f0:	e0bffc17 	ldw	r2,-16(fp)
 80196f4:	10800017 	ldw	r2,0(r2)
 80196f8:	10c00044 	addi	r3,r2,1
 80196fc:	e0bffc17 	ldw	r2,-16(fp)
 8019700:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8019704:	e0bffc17 	ldw	r2,-16(fp)
 8019708:	10800017 	ldw	r2,0(r2)
 801970c:	e0fffd17 	ldw	r3,-12(fp)
 8019710:	1880021e 	bne	r3,r2,801971c <alt_avalon_i2c_rx_read_available+0x7c>
 8019714:	e0bffd17 	ldw	r2,-12(fp)
 8019718:	1000061e 	bne	r2,zero,8019734 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 801971c:	e0bfff17 	ldw	r2,-4(fp)
 8019720:	10800317 	ldw	r2,12(r2)
 8019724:	10800704 	addi	r2,r2,28
 8019728:	10800037 	ldwio	r2,0(r2)
 801972c:	103fe61e 	bne	r2,zero,80196c8 <alt_avalon_i2c_rx_read_available+0x28>
    }
}
 8019730:	00000106 	br	8019738 <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8019734:	0001883a 	nop
}
 8019738:	0001883a 	nop
 801973c:	e037883a 	mov	sp,fp
 8019740:	df000017 	ldw	fp,0(sp)
 8019744:	dec00104 	addi	sp,sp,4
 8019748:	f800283a 	ret

0801974c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 801974c:	defffa04 	addi	sp,sp,-24
 8019750:	dfc00515 	stw	ra,20(sp)
 8019754:	df000415 	stw	fp,16(sp)
 8019758:	df000404 	addi	fp,sp,16
 801975c:	e13ffd15 	stw	r4,-12(fp)
 8019760:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 8019764:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
 8019768:	008000b4 	movhi	r2,2
 801976c:	10a1a804 	addi	r2,r2,-31072
 8019770:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8019774:	00000d06 	br	80197ac <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 8019778:	e0bffe17 	ldw	r2,-8(fp)
 801977c:	108002a8 	cmpgeui	r2,r2,10
 8019780:	1000021e 	bne	r2,zero,801978c <alt_avalon_i2c_rx_read+0x40>
 8019784:	0109c404 	movi	r4,10000
 8019788:	803a8c40 	call	803a8c4 <alt_busy_sleep>
      if (--timeout == 0)
 801978c:	e0bffe17 	ldw	r2,-8(fp)
 8019790:	10bfffc4 	addi	r2,r2,-1
 8019794:	e0bffe15 	stw	r2,-8(fp)
 8019798:	e0bffe17 	ldw	r2,-8(fp)
 801979c:	1000031e 	bne	r2,zero,80197ac <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 80197a0:	00bfff84 	movi	r2,-2
 80197a4:	e0bfff15 	stw	r2,-4(fp)
        break;
 80197a8:	00000506 	br	80197c0 <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80197ac:	e0bffd17 	ldw	r2,-12(fp)
 80197b0:	10800317 	ldw	r2,12(r2)
 80197b4:	10800704 	addi	r2,r2,28
 80197b8:	10800037 	ldwio	r2,0(r2)
 80197bc:	103fee26 	beq	r2,zero,8019778 <alt_avalon_i2c_rx_read+0x2c>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80197c0:	e0bffd17 	ldw	r2,-12(fp)
 80197c4:	10800317 	ldw	r2,12(r2)
 80197c8:	10800104 	addi	r2,r2,4
 80197cc:	10800037 	ldwio	r2,0(r2)
 80197d0:	1007883a 	mov	r3,r2
 80197d4:	e0bffc17 	ldw	r2,-16(fp)
 80197d8:	10c00005 	stb	r3,0(r2)
        
    return status;
 80197dc:	e0bfff17 	ldw	r2,-4(fp)
}
 80197e0:	e037883a 	mov	sp,fp
 80197e4:	dfc00117 	ldw	ra,4(sp)
 80197e8:	df000017 	ldw	fp,0(sp)
 80197ec:	dec00204 	addi	sp,sp,8
 80197f0:	f800283a 	ret

080197f4 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 80197f4:	defff804 	addi	sp,sp,-32
 80197f8:	dfc00715 	stw	ra,28(sp)
 80197fc:	df000615 	stw	fp,24(sp)
 8019800:	df000604 	addi	fp,sp,24
 8019804:	e13ffd15 	stw	r4,-12(fp)
 8019808:	2805883a 	mov	r2,r5
 801980c:	3009883a 	mov	r4,r6
 8019810:	3807883a 	mov	r3,r7
 8019814:	e0bffc05 	stb	r2,-16(fp)
 8019818:	2005883a 	mov	r2,r4
 801981c:	e0bffb05 	stb	r2,-20(fp)
 8019820:	1805883a 	mov	r2,r3
 8019824:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
 8019828:	0089c404 	movi	r2,10000
 801982c:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8019830:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8019834:	00000c06 	br	8019868 <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 8019838:	e0bfff17 	ldw	r2,-4(fp)
 801983c:	108002a8 	cmpgeui	r2,r2,10
 8019840:	1000021e 	bne	r2,zero,801984c <alt_avalon_i2c_cmd_write+0x58>
 8019844:	0109c404 	movi	r4,10000
 8019848:	803a8c40 	call	803a8c4 <alt_busy_sleep>
      if (--timeout == 0)
 801984c:	e0bfff17 	ldw	r2,-4(fp)
 8019850:	10bfffc4 	addi	r2,r2,-1
 8019854:	e0bfff15 	stw	r2,-4(fp)
 8019858:	e0bfff17 	ldw	r2,-4(fp)
 801985c:	1000021e 	bne	r2,zero,8019868 <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 8019860:	00bfff84 	movi	r2,-2
 8019864:	00001906 	br	80198cc <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8019868:	e0bffd17 	ldw	r2,-12(fp)
 801986c:	10800317 	ldw	r2,12(r2)
 8019870:	10800404 	addi	r2,r2,16
 8019874:	10800037 	ldwio	r2,0(r2)
 8019878:	1080004c 	andi	r2,r2,1
 801987c:	103fee26 	beq	r2,zero,8019838 <alt_avalon_i2c_cmd_write+0x44>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 8019880:	e0bffd17 	ldw	r2,-12(fp)
 8019884:	10800317 	ldw	r2,12(r2)
 8019888:	e13ffc03 	ldbu	r4,-16(fp)
 801988c:	e0fffb03 	ldbu	r3,-20(fp)
 8019890:	1806927a 	slli	r3,r3,9
 8019894:	20c8b03a 	or	r4,r4,r3
 8019898:	e0fffa03 	ldbu	r3,-24(fp)
 801989c:	1806923a 	slli	r3,r3,8
 80198a0:	20c6b03a 	or	r3,r4,r3
 80198a4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 80198a8:	e0bffe04 	addi	r2,fp,-8
 80198ac:	100b883a 	mov	r5,r2
 80198b0:	e13ffd17 	ldw	r4,-12(fp)
 80198b4:	8019a3c0 	call	8019a3c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 80198b8:	e0bffe04 	addi	r2,fp,-8
 80198bc:	100b883a 	mov	r5,r2
 80198c0:	e13ffd17 	ldw	r4,-12(fp)
 80198c4:	8019a880 	call	8019a88 <alt_avalon_i2c_check_arblost>
    
    return status;
 80198c8:	e0bffe17 	ldw	r2,-8(fp)
}
 80198cc:	e037883a 	mov	sp,fp
 80198d0:	dfc00117 	ldw	ra,4(sp)
 80198d4:	df000017 	ldw	fp,0(sp)
 80198d8:	dec00204 	addi	sp,sp,8
 80198dc:	f800283a 	ret

080198e0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 80198e0:	defffa04 	addi	sp,sp,-24
 80198e4:	dfc00515 	stw	ra,20(sp)
 80198e8:	df000415 	stw	fp,16(sp)
 80198ec:	df000404 	addi	fp,sp,16
 80198f0:	e13ffe15 	stw	r4,-8(fp)
 80198f4:	e17ffd15 	stw	r5,-12(fp)
 80198f8:	3005883a 	mov	r2,r6
 80198fc:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8019900:	e0bffe17 	ldw	r2,-8(fp)
 8019904:	10800d17 	ldw	r2,52(r2)
 8019908:	10800058 	cmpnei	r2,r2,1
 801990c:	10001c1e 	bne	r2,zero,8019980 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8019910:	e0bffe17 	ldw	r2,-8(fp)
 8019914:	10800917 	ldw	r2,36(r2)
 8019918:	1004d1fa 	srli	r2,r2,7
 801991c:	1080038c 	andi	r2,r2,14
 8019920:	1007883a 	mov	r3,r2
 8019924:	e0bffd17 	ldw	r2,-12(fp)
 8019928:	1884b03a 	or	r2,r3,r2
 801992c:	1007883a 	mov	r3,r2
 8019930:	00bffc04 	movi	r2,-16
 8019934:	1884b03a 	or	r2,r3,r2
 8019938:	10803fcc 	andi	r2,r2,255
 801993c:	e0fffc03 	ldbu	r3,-16(fp)
 8019940:	000f883a 	mov	r7,zero
 8019944:	180d883a 	mov	r6,r3
 8019948:	100b883a 	mov	r5,r2
 801994c:	e13ffe17 	ldw	r4,-8(fp)
 8019950:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 8019954:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 8019958:	e0bffe17 	ldw	r2,-8(fp)
 801995c:	10800917 	ldw	r2,36(r2)
 8019960:	10803fcc 	andi	r2,r2,255
 8019964:	000f883a 	mov	r7,zero
 8019968:	000d883a 	mov	r6,zero
 801996c:	100b883a 	mov	r5,r2
 8019970:	e13ffe17 	ldw	r4,-8(fp)
 8019974:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 8019978:	e0bfff15 	stw	r2,-4(fp)
 801997c:	00000e06 	br	80199b8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8019980:	e0bffe17 	ldw	r2,-8(fp)
 8019984:	10800917 	ldw	r2,36(r2)
 8019988:	1085883a 	add	r2,r2,r2
 801998c:	1007883a 	mov	r3,r2
 8019990:	e0bffd17 	ldw	r2,-12(fp)
 8019994:	1884b03a 	or	r2,r3,r2
 8019998:	10803fcc 	andi	r2,r2,255
 801999c:	e0fffc03 	ldbu	r3,-16(fp)
 80199a0:	000f883a 	mov	r7,zero
 80199a4:	180d883a 	mov	r6,r3
 80199a8:	100b883a 	mov	r5,r2
 80199ac:	e13ffe17 	ldw	r4,-8(fp)
 80199b0:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 80199b4:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
 80199b8:	e0bfff17 	ldw	r2,-4(fp)
}
 80199bc:	e037883a 	mov	sp,fp
 80199c0:	dfc00117 	ldw	ra,4(sp)
 80199c4:	df000017 	ldw	fp,0(sp)
 80199c8:	dec00204 	addi	sp,sp,8
 80199cc:	f800283a 	ret

080199d0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 80199d0:	defffd04 	addi	sp,sp,-12
 80199d4:	df000215 	stw	fp,8(sp)
 80199d8:	df000204 	addi	fp,sp,8
 80199dc:	e13fff15 	stw	r4,-4(fp)
 80199e0:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
 80199e4:	e0bfff17 	ldw	r2,-4(fp)
 80199e8:	10c00917 	ldw	r3,36(r2)
 80199ec:	e0bffe17 	ldw	r2,-8(fp)
 80199f0:	10c00015 	stw	r3,0(r2)
}
 80199f4:	0001883a 	nop
 80199f8:	e037883a 	mov	sp,fp
 80199fc:	df000017 	ldw	fp,0(sp)
 8019a00:	dec00104 	addi	sp,sp,4
 8019a04:	f800283a 	ret

08019a08 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 8019a08:	defffd04 	addi	sp,sp,-12
 8019a0c:	df000215 	stw	fp,8(sp)
 8019a10:	df000204 	addi	fp,sp,8
 8019a14:	e13fff15 	stw	r4,-4(fp)
 8019a18:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
 8019a1c:	e0bfff17 	ldw	r2,-4(fp)
 8019a20:	e0fffe17 	ldw	r3,-8(fp)
 8019a24:	10c00915 	stw	r3,36(r2)
}
 8019a28:	0001883a 	nop
 8019a2c:	e037883a 	mov	sp,fp
 8019a30:	df000017 	ldw	fp,0(sp)
 8019a34:	dec00104 	addi	sp,sp,4
 8019a38:	f800283a 	ret

08019a3c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 8019a3c:	defffd04 	addi	sp,sp,-12
 8019a40:	df000215 	stw	fp,8(sp)
 8019a44:	df000204 	addi	fp,sp,8
 8019a48:	e13fff15 	stw	r4,-4(fp)
 8019a4c:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 8019a50:	e0bfff17 	ldw	r2,-4(fp)
 8019a54:	10800317 	ldw	r2,12(r2)
 8019a58:	10800404 	addi	r2,r2,16
 8019a5c:	10800037 	ldwio	r2,0(r2)
 8019a60:	1080010c 	andi	r2,r2,4
 8019a64:	10000326 	beq	r2,zero,8019a74 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 8019a68:	e0bffe17 	ldw	r2,-8(fp)
 8019a6c:	00fffec4 	movi	r3,-5
 8019a70:	10c00015 	stw	r3,0(r2)
    }
}
 8019a74:	0001883a 	nop
 8019a78:	e037883a 	mov	sp,fp
 8019a7c:	df000017 	ldw	fp,0(sp)
 8019a80:	dec00104 	addi	sp,sp,4
 8019a84:	f800283a 	ret

08019a88 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 8019a88:	defffd04 	addi	sp,sp,-12
 8019a8c:	df000215 	stw	fp,8(sp)
 8019a90:	df000204 	addi	fp,sp,8
 8019a94:	e13fff15 	stw	r4,-4(fp)
 8019a98:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 8019a9c:	e0bfff17 	ldw	r2,-4(fp)
 8019aa0:	10800317 	ldw	r2,12(r2)
 8019aa4:	10800404 	addi	r2,r2,16
 8019aa8:	10800037 	ldwio	r2,0(r2)
 8019aac:	1080020c 	andi	r2,r2,8
 8019ab0:	10000326 	beq	r2,zero,8019ac0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 8019ab4:	e0bffe17 	ldw	r2,-8(fp)
 8019ab8:	00fffe84 	movi	r3,-6
 8019abc:	10c00015 	stw	r3,0(r2)
    }
}
 8019ac0:	0001883a 	nop
 8019ac4:	e037883a 	mov	sp,fp
 8019ac8:	df000017 	ldw	fp,0(sp)
 8019acc:	dec00104 	addi	sp,sp,4
 8019ad0:	f800283a 	ret

08019ad4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8019ad4:	defff804 	addi	sp,sp,-32
 8019ad8:	dfc00715 	stw	ra,28(sp)
 8019adc:	df000615 	stw	fp,24(sp)
 8019ae0:	df000604 	addi	fp,sp,24
 8019ae4:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8019ae8:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8019aec:	e0bffa17 	ldw	r2,-24(fp)
 8019af0:	10800717 	ldw	r2,28(r2)
 8019af4:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 8019af8:	e0bffe17 	ldw	r2,-8(fp)
 8019afc:	10800117 	ldw	r2,4(r2)
 8019b00:	10800044 	addi	r2,r2,1
 8019b04:	1089c424 	muli	r2,r2,10000
 8019b08:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 8019b0c:	e0bffc04 	addi	r2,fp,-16
 8019b10:	100b883a 	mov	r5,r2
 8019b14:	e13ffa17 	ldw	r4,-24(fp)
 8019b18:	801a95c0 	call	801a95c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 8019b1c:	e0bffc17 	ldw	r2,-16(fp)
 8019b20:	100b883a 	mov	r5,r2
 8019b24:	e13ffa17 	ldw	r4,-24(fp)
 8019b28:	801a8880 	call	801a888 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8019b2c:	e0bffd04 	addi	r2,fp,-12
 8019b30:	100b883a 	mov	r5,r2
 8019b34:	e13ffa17 	ldw	r4,-24(fp)
 8019b38:	8019a3c0 	call	8019a3c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 8019b3c:	e0bffd17 	ldw	r2,-12(fp)
 8019b40:	10002226 	beq	r2,zero,8019bcc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
 8019b44:	e0bffe17 	ldw	r2,-8(fp)
 8019b48:	10800217 	ldw	r2,8(r2)
 8019b4c:	10001d26 	beq	r2,zero,8019bc4 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8019b50:	00000d06 	br	8019b88 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
 8019b54:	e0bfff17 	ldw	r2,-4(fp)
 8019b58:	108002a8 	cmpgeui	r2,r2,10
 8019b5c:	1000021e 	bne	r2,zero,8019b68 <alt_avalon_i2c_interrupt_transaction_status+0x94>
 8019b60:	0109c404 	movi	r4,10000
 8019b64:	803a8c40 	call	803a8c4 <alt_busy_sleep>
              if (--timeout == 0)
 8019b68:	e0bfff17 	ldw	r2,-4(fp)
 8019b6c:	10bfffc4 	addi	r2,r2,-1
 8019b70:	e0bfff15 	stw	r2,-4(fp)
 8019b74:	e0bfff17 	ldw	r2,-4(fp)
 8019b78:	1000031e 	bne	r2,zero,8019b88 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 8019b7c:	00bfff84 	movi	r2,-2
 8019b80:	e0bffd15 	stw	r2,-12(fp)
                 break;
 8019b84:	00000306 	br	8019b94 <alt_avalon_i2c_interrupt_transaction_status+0xc0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8019b88:	e13ffa17 	ldw	r4,-24(fp)
 8019b8c:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 8019b90:	103ff01e 	bne	r2,zero,8019b54 <alt_avalon_i2c_interrupt_transaction_status+0x80>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 8019b94:	e0bffe17 	ldw	r2,-8(fp)
 8019b98:	10800017 	ldw	r2,0(r2)
 8019b9c:	e0fffb04 	addi	r3,fp,-20
 8019ba0:	180f883a 	mov	r7,r3
 8019ba4:	000d883a 	mov	r6,zero
 8019ba8:	100b883a 	mov	r5,r2
 8019bac:	e13ffa17 	ldw	r4,-24(fp)
 8019bb0:	80196a00 	call	80196a0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 8019bb4:	e13ffa17 	ldw	r4,-24(fp)
 8019bb8:	80193040 	call	8019304 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 8019bbc:	e0bffe17 	ldw	r2,-8(fp)
 8019bc0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 8019bc4:	e0bffd17 	ldw	r2,-12(fp)
 8019bc8:	00000a06 	br	8019bf4 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
 8019bcc:	e0bffe17 	ldw	r2,-8(fp)
 8019bd0:	10800217 	ldw	r2,8(r2)
 8019bd4:	10000626 	beq	r2,zero,8019bf0 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 8019bd8:	e0bffc17 	ldw	r2,-16(fp)
 8019bdc:	100b883a 	mov	r5,r2
 8019be0:	e13ffa17 	ldw	r4,-24(fp)
 8019be4:	801a8f40 	call	801a8f4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8019be8:	00bffe44 	movi	r2,-7
 8019bec:	00000106 	br	8019bf4 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 8019bf0:	0005883a 	mov	r2,zero
}
 8019bf4:	e037883a 	mov	sp,fp
 8019bf8:	dfc00117 	ldw	ra,4(sp)
 8019bfc:	df000017 	ldw	fp,0(sp)
 8019c00:	dec00204 	addi	sp,sp,8
 8019c04:	f800283a 	ret

08019c08 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8019c08:	defff704 	addi	sp,sp,-36
 8019c0c:	dfc00815 	stw	ra,32(sp)
 8019c10:	df000715 	stw	fp,28(sp)
 8019c14:	df000704 	addi	fp,sp,28
 8019c18:	e13ffd15 	stw	r4,-12(fp)
 8019c1c:	e17ffc15 	stw	r5,-16(fp)
 8019c20:	e1bffb15 	stw	r6,-20(fp)
 8019c24:	3805883a 	mov	r2,r7
 8019c28:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8019c2c:	0089c404 	movi	r2,10000
 8019c30:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
 8019c34:	00002206 	br	8019cc0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8019c38:	e0bffe17 	ldw	r2,-8(fp)
 8019c3c:	108002a8 	cmpgeui	r2,r2,10
 8019c40:	1000021e 	bne	r2,zero,8019c4c <alt_avalon_i2c_master_tx+0x44>
 8019c44:	0109c404 	movi	r4,10000
 8019c48:	803a8c40 	call	803a8c4 <alt_busy_sleep>
      if (use_interrupts)
 8019c4c:	e0bffa03 	ldbu	r2,-24(fp)
 8019c50:	10000926 	beq	r2,zero,8019c78 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 8019c54:	00800044 	movi	r2,1
 8019c58:	d8800015 	stw	r2,0(sp)
 8019c5c:	000f883a 	mov	r7,zero
 8019c60:	e1bffb17 	ldw	r6,-20(fp)
 8019c64:	e17ffc17 	ldw	r5,-16(fp)
 8019c68:	e13ffd17 	ldw	r4,-12(fp)
 8019c6c:	801a1b00 	call	801a1b0 <alt_avalon_i2c_master_transmit_using_interrupts>
 8019c70:	e0bfff15 	stw	r2,-4(fp)
 8019c74:	00000806 	br	8019c98 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 8019c78:	00800044 	movi	r2,1
 8019c7c:	d8800015 	stw	r2,0(sp)
 8019c80:	000f883a 	mov	r7,zero
 8019c84:	e1bffb17 	ldw	r6,-20(fp)
 8019c88:	e17ffc17 	ldw	r5,-16(fp)
 8019c8c:	e13ffd17 	ldw	r4,-12(fp)
 8019c90:	8019ff40 	call	8019ff4 <alt_avalon_i2c_master_transmit>
 8019c94:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019c98:	e0bfff17 	ldw	r2,-4(fp)
 8019c9c:	10bffea0 	cmpeqi	r2,r2,-6
 8019ca0:	1000061e 	bne	r2,zero,8019cbc <alt_avalon_i2c_master_tx+0xb4>
 8019ca4:	e0bfff17 	ldw	r2,-4(fp)
 8019ca8:	10bffee0 	cmpeqi	r2,r2,-5
 8019cac:	1000031e 	bne	r2,zero,8019cbc <alt_avalon_i2c_master_tx+0xb4>
 8019cb0:	e0bfff17 	ldw	r2,-4(fp)
 8019cb4:	10bffe58 	cmpnei	r2,r2,-7
 8019cb8:	1000061e 	bne	r2,zero,8019cd4 <alt_avalon_i2c_master_tx+0xcc>
 8019cbc:	0001883a 	nop
    while (retry--)
 8019cc0:	e0bffe17 	ldw	r2,-8(fp)
 8019cc4:	10ffffc4 	addi	r3,r2,-1
 8019cc8:	e0fffe15 	stw	r3,-8(fp)
 8019ccc:	103fda1e 	bne	r2,zero,8019c38 <alt_avalon_i2c_master_tx+0x30>
 8019cd0:	00000106 	br	8019cd8 <alt_avalon_i2c_master_tx+0xd0>
      break;
 8019cd4:	0001883a 	nop
    }

    return status;
 8019cd8:	e0bfff17 	ldw	r2,-4(fp)
}        
 8019cdc:	e037883a 	mov	sp,fp
 8019ce0:	dfc00117 	ldw	ra,4(sp)
 8019ce4:	df000017 	ldw	fp,0(sp)
 8019ce8:	dec00204 	addi	sp,sp,8
 8019cec:	f800283a 	ret

08019cf0 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8019cf0:	defff704 	addi	sp,sp,-36
 8019cf4:	dfc00815 	stw	ra,32(sp)
 8019cf8:	df000715 	stw	fp,28(sp)
 8019cfc:	df000704 	addi	fp,sp,28
 8019d00:	e13ffd15 	stw	r4,-12(fp)
 8019d04:	e17ffc15 	stw	r5,-16(fp)
 8019d08:	e1bffb15 	stw	r6,-20(fp)
 8019d0c:	3805883a 	mov	r2,r7
 8019d10:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8019d14:	0089c404 	movi	r2,10000
 8019d18:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
 8019d1c:	e0bffa03 	ldbu	r2,-24(fp)
 8019d20:	10003426 	beq	r2,zero,8019df4 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 8019d24:	00001706 	br	8019d84 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8019d28:	e0bffe17 	ldw	r2,-8(fp)
 8019d2c:	108002a8 	cmpgeui	r2,r2,10
 8019d30:	1000021e 	bne	r2,zero,8019d3c <alt_avalon_i2c_master_rx+0x4c>
 8019d34:	0109c404 	movi	r4,10000
 8019d38:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8019d3c:	00800044 	movi	r2,1
 8019d40:	d8800015 	stw	r2,0(sp)
 8019d44:	000f883a 	mov	r7,zero
 8019d48:	e1bffb17 	ldw	r6,-20(fp)
 8019d4c:	e17ffc17 	ldw	r5,-16(fp)
 8019d50:	e13ffd17 	ldw	r4,-12(fp)
 8019d54:	801a5c40 	call	801a5c4 <alt_avalon_i2c_master_receive_using_interrupts>
 8019d58:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019d5c:	e0bfff17 	ldw	r2,-4(fp)
 8019d60:	10bffea0 	cmpeqi	r2,r2,-6
 8019d64:	1000061e 	bne	r2,zero,8019d80 <alt_avalon_i2c_master_rx+0x90>
 8019d68:	e0bfff17 	ldw	r2,-4(fp)
 8019d6c:	10bffee0 	cmpeqi	r2,r2,-5
 8019d70:	1000031e 	bne	r2,zero,8019d80 <alt_avalon_i2c_master_rx+0x90>
 8019d74:	e0bfff17 	ldw	r2,-4(fp)
 8019d78:	10bffe58 	cmpnei	r2,r2,-7
 8019d7c:	1000221e 	bne	r2,zero,8019e08 <alt_avalon_i2c_master_rx+0x118>
 8019d80:	0001883a 	nop
      while (retry--) 
 8019d84:	e0bffe17 	ldw	r2,-8(fp)
 8019d88:	10ffffc4 	addi	r3,r2,-1
 8019d8c:	e0fffe15 	stw	r3,-8(fp)
 8019d90:	103fe51e 	bne	r2,zero,8019d28 <alt_avalon_i2c_master_rx+0x38>
 8019d94:	00001f06 	br	8019e14 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8019d98:	e0bffe17 	ldw	r2,-8(fp)
 8019d9c:	108002a8 	cmpgeui	r2,r2,10
 8019da0:	1000021e 	bne	r2,zero,8019dac <alt_avalon_i2c_master_rx+0xbc>
 8019da4:	0109c404 	movi	r4,10000
 8019da8:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8019dac:	00800044 	movi	r2,1
 8019db0:	d8800015 	stw	r2,0(sp)
 8019db4:	000f883a 	mov	r7,zero
 8019db8:	e1bffb17 	ldw	r6,-20(fp)
 8019dbc:	e17ffc17 	ldw	r5,-16(fp)
 8019dc0:	e13ffd17 	ldw	r4,-12(fp)
 8019dc4:	801a3b80 	call	801a3b8 <alt_avalon_i2c_master_receive>
 8019dc8:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019dcc:	e0bfff17 	ldw	r2,-4(fp)
 8019dd0:	10bffea0 	cmpeqi	r2,r2,-6
 8019dd4:	1000061e 	bne	r2,zero,8019df0 <alt_avalon_i2c_master_rx+0x100>
 8019dd8:	e0bfff17 	ldw	r2,-4(fp)
 8019ddc:	10bffee0 	cmpeqi	r2,r2,-5
 8019de0:	1000031e 	bne	r2,zero,8019df0 <alt_avalon_i2c_master_rx+0x100>
 8019de4:	e0bfff17 	ldw	r2,-4(fp)
 8019de8:	10bffe58 	cmpnei	r2,r2,-7
 8019dec:	1000081e 	bne	r2,zero,8019e10 <alt_avalon_i2c_master_rx+0x120>
 8019df0:	0001883a 	nop
      while (retry--) 
 8019df4:	e0bffe17 	ldw	r2,-8(fp)
 8019df8:	10ffffc4 	addi	r3,r2,-1
 8019dfc:	e0fffe15 	stw	r3,-8(fp)
 8019e00:	103fe51e 	bne	r2,zero,8019d98 <alt_avalon_i2c_master_rx+0xa8>
 8019e04:	00000306 	br	8019e14 <alt_avalon_i2c_master_rx+0x124>
        break;
 8019e08:	0001883a 	nop
 8019e0c:	00000106 	br	8019e14 <alt_avalon_i2c_master_rx+0x124>
        break;
 8019e10:	0001883a 	nop
      }
    }
    
    return status;
 8019e14:	e0bfff17 	ldw	r2,-4(fp)
}        
 8019e18:	e037883a 	mov	sp,fp
 8019e1c:	dfc00117 	ldw	ra,4(sp)
 8019e20:	df000017 	ldw	fp,0(sp)
 8019e24:	dec00204 	addi	sp,sp,8
 8019e28:	f800283a 	ret

08019e2c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8019e2c:	defff604 	addi	sp,sp,-40
 8019e30:	dfc00915 	stw	ra,36(sp)
 8019e34:	df000815 	stw	fp,32(sp)
 8019e38:	df000804 	addi	fp,sp,32
 8019e3c:	e13ffd15 	stw	r4,-12(fp)
 8019e40:	e17ffc15 	stw	r5,-16(fp)
 8019e44:	e1bffb15 	stw	r6,-20(fp)
 8019e48:	e1fffa15 	stw	r7,-24(fp)
 8019e4c:	e0800317 	ldw	r2,12(fp)
 8019e50:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8019e54:	0089c404 	movi	r2,10000
 8019e58:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
 8019e5c:	e0bff903 	ldbu	r2,-28(fp)
 8019e60:	10005626 	beq	r2,zero,8019fbc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 8019e64:	00002806 	br	8019f08 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8019e68:	e0bffe17 	ldw	r2,-8(fp)
 8019e6c:	108002a8 	cmpgeui	r2,r2,10
 8019e70:	1000021e 	bne	r2,zero,8019e7c <alt_avalon_i2c_master_tx_rx+0x50>
 8019e74:	0109c404 	movi	r4,10000
 8019e78:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8019e7c:	d8000015 	stw	zero,0(sp)
 8019e80:	000f883a 	mov	r7,zero
 8019e84:	e1bffb17 	ldw	r6,-20(fp)
 8019e88:	e17ffc17 	ldw	r5,-16(fp)
 8019e8c:	e13ffd17 	ldw	r4,-12(fp)
 8019e90:	801a1b00 	call	801a1b0 <alt_avalon_i2c_master_transmit_using_interrupts>
 8019e94:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019e98:	e0bfff17 	ldw	r2,-4(fp)
 8019e9c:	10bffea0 	cmpeqi	r2,r2,-6
 8019ea0:	1000191e 	bne	r2,zero,8019f08 <alt_avalon_i2c_master_tx_rx+0xdc>
 8019ea4:	e0bfff17 	ldw	r2,-4(fp)
 8019ea8:	10bffee0 	cmpeqi	r2,r2,-5
 8019eac:	1000161e 	bne	r2,zero,8019f08 <alt_avalon_i2c_master_tx_rx+0xdc>
 8019eb0:	e0bfff17 	ldw	r2,-4(fp)
 8019eb4:	10bffe58 	cmpnei	r2,r2,-7
 8019eb8:	1000011e 	bne	r2,zero,8019ec0 <alt_avalon_i2c_master_tx_rx+0x94>
 8019ebc:	00001206 	br	8019f08 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8019ec0:	00800044 	movi	r2,1
 8019ec4:	d8800015 	stw	r2,0(sp)
 8019ec8:	01c00044 	movi	r7,1
 8019ecc:	e1800217 	ldw	r6,8(fp)
 8019ed0:	e17ffa17 	ldw	r5,-24(fp)
 8019ed4:	e13ffd17 	ldw	r4,-12(fp)
 8019ed8:	801a5c40 	call	801a5c4 <alt_avalon_i2c_master_receive_using_interrupts>
 8019edc:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019ee0:	e0bfff17 	ldw	r2,-4(fp)
 8019ee4:	10bffea0 	cmpeqi	r2,r2,-6
 8019ee8:	1000061e 	bne	r2,zero,8019f04 <alt_avalon_i2c_master_tx_rx+0xd8>
 8019eec:	e0bfff17 	ldw	r2,-4(fp)
 8019ef0:	10bffee0 	cmpeqi	r2,r2,-5
 8019ef4:	1000031e 	bne	r2,zero,8019f04 <alt_avalon_i2c_master_tx_rx+0xd8>
 8019ef8:	e0bfff17 	ldw	r2,-4(fp)
 8019efc:	10bffe58 	cmpnei	r2,r2,-7
 8019f00:	1000331e 	bne	r2,zero,8019fd0 <alt_avalon_i2c_master_tx_rx+0x1a4>
 8019f04:	0001883a 	nop
      while (retry--) 
 8019f08:	e0bffe17 	ldw	r2,-8(fp)
 8019f0c:	10ffffc4 	addi	r3,r2,-1
 8019f10:	e0fffe15 	stw	r3,-8(fp)
 8019f14:	103fd41e 	bne	r2,zero,8019e68 <alt_avalon_i2c_master_tx_rx+0x3c>
 8019f18:	00003006 	br	8019fdc <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8019f1c:	e0bffe17 	ldw	r2,-8(fp)
 8019f20:	108002a8 	cmpgeui	r2,r2,10
 8019f24:	1000021e 	bne	r2,zero,8019f30 <alt_avalon_i2c_master_tx_rx+0x104>
 8019f28:	0109c404 	movi	r4,10000
 8019f2c:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8019f30:	d8000015 	stw	zero,0(sp)
 8019f34:	000f883a 	mov	r7,zero
 8019f38:	e1bffb17 	ldw	r6,-20(fp)
 8019f3c:	e17ffc17 	ldw	r5,-16(fp)
 8019f40:	e13ffd17 	ldw	r4,-12(fp)
 8019f44:	8019ff40 	call	8019ff4 <alt_avalon_i2c_master_transmit>
 8019f48:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019f4c:	e0bfff17 	ldw	r2,-4(fp)
 8019f50:	10bffea0 	cmpeqi	r2,r2,-6
 8019f54:	1000191e 	bne	r2,zero,8019fbc <alt_avalon_i2c_master_tx_rx+0x190>
 8019f58:	e0bfff17 	ldw	r2,-4(fp)
 8019f5c:	10bffee0 	cmpeqi	r2,r2,-5
 8019f60:	1000161e 	bne	r2,zero,8019fbc <alt_avalon_i2c_master_tx_rx+0x190>
 8019f64:	e0bfff17 	ldw	r2,-4(fp)
 8019f68:	10bffe58 	cmpnei	r2,r2,-7
 8019f6c:	1000011e 	bne	r2,zero,8019f74 <alt_avalon_i2c_master_tx_rx+0x148>
 8019f70:	00001206 	br	8019fbc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8019f74:	00800044 	movi	r2,1
 8019f78:	d8800015 	stw	r2,0(sp)
 8019f7c:	01c00044 	movi	r7,1
 8019f80:	e1800217 	ldw	r6,8(fp)
 8019f84:	e17ffa17 	ldw	r5,-24(fp)
 8019f88:	e13ffd17 	ldw	r4,-12(fp)
 8019f8c:	801a3b80 	call	801a3b8 <alt_avalon_i2c_master_receive>
 8019f90:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8019f94:	e0bfff17 	ldw	r2,-4(fp)
 8019f98:	10bffea0 	cmpeqi	r2,r2,-6
 8019f9c:	1000061e 	bne	r2,zero,8019fb8 <alt_avalon_i2c_master_tx_rx+0x18c>
 8019fa0:	e0bfff17 	ldw	r2,-4(fp)
 8019fa4:	10bffee0 	cmpeqi	r2,r2,-5
 8019fa8:	1000031e 	bne	r2,zero,8019fb8 <alt_avalon_i2c_master_tx_rx+0x18c>
 8019fac:	e0bfff17 	ldw	r2,-4(fp)
 8019fb0:	10bffe58 	cmpnei	r2,r2,-7
 8019fb4:	1000081e 	bne	r2,zero,8019fd8 <alt_avalon_i2c_master_tx_rx+0x1ac>
 8019fb8:	0001883a 	nop
      while (retry--) 
 8019fbc:	e0bffe17 	ldw	r2,-8(fp)
 8019fc0:	10ffffc4 	addi	r3,r2,-1
 8019fc4:	e0fffe15 	stw	r3,-8(fp)
 8019fc8:	103fd41e 	bne	r2,zero,8019f1c <alt_avalon_i2c_master_tx_rx+0xf0>
 8019fcc:	00000306 	br	8019fdc <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
 8019fd0:	0001883a 	nop
 8019fd4:	00000106 	br	8019fdc <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
 8019fd8:	0001883a 	nop
      }
    }
    
    return status;
 8019fdc:	e0bfff17 	ldw	r2,-4(fp)
}                                       
 8019fe0:	e037883a 	mov	sp,fp
 8019fe4:	dfc00117 	ldw	ra,4(sp)
 8019fe8:	df000017 	ldw	fp,0(sp)
 8019fec:	dec00204 	addi	sp,sp,8
 8019ff0:	f800283a 	ret

08019ff4 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8019ff4:	defff704 	addi	sp,sp,-36
 8019ff8:	dfc00815 	stw	ra,32(sp)
 8019ffc:	df000715 	stw	fp,28(sp)
 801a000:	df000704 	addi	fp,sp,28
 801a004:	e13ffd15 	stw	r4,-12(fp)
 801a008:	e17ffc15 	stw	r5,-16(fp)
 801a00c:	e1bffb15 	stw	r6,-20(fp)
 801a010:	3807883a 	mov	r3,r7
 801a014:	e0800217 	ldw	r2,8(fp)
 801a018:	e0fffa05 	stb	r3,-24(fp)
 801a01c:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801a020:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
 801a024:	e0bffb17 	ldw	r2,-20(fp)
 801a028:	1089c424 	muli	r2,r2,10000
 801a02c:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
 801a030:	e0bffb17 	ldw	r2,-20(fp)
 801a034:	1000021e 	bne	r2,zero,801a040 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801a038:	0005883a 	mov	r2,zero
 801a03c:	00005706 	br	801a19c <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801a040:	e0bffa03 	ldbu	r2,-24(fp)
 801a044:	10000a1e 	bne	r2,zero,801a070 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801a048:	e13ffd17 	ldw	r4,-12(fp)
 801a04c:	801926c0 	call	801926c <alt_avalon_i2c_enable>
 801a050:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801a054:	e0bffe17 	ldw	r2,-8(fp)
 801a058:	10000226 	beq	r2,zero,801a064 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
 801a05c:	e0bffe17 	ldw	r2,-8(fp)
 801a060:	00004e06 	br	801a19c <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a064:	01400704 	movi	r5,28
 801a068:	e13ffd17 	ldw	r4,-12(fp)
 801a06c:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 801a070:	e0bffa03 	ldbu	r2,-24(fp)
 801a074:	100d883a 	mov	r6,r2
 801a078:	000b883a 	mov	r5,zero
 801a07c:	e13ffd17 	ldw	r4,-12(fp)
 801a080:	80198e00 	call	80198e0 <alt_avalon_i2c_send_address>
 801a084:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 801a088:	e0bffe17 	ldw	r2,-8(fp)
 801a08c:	1000271e 	bne	r2,zero,801a12c <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801a090:	00000f06 	br	801a0d0 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801a094:	e0bffc17 	ldw	r2,-16(fp)
 801a098:	10800003 	ldbu	r2,0(r2)
 801a09c:	10803fcc 	andi	r2,r2,255
 801a0a0:	000f883a 	mov	r7,zero
 801a0a4:	000d883a 	mov	r6,zero
 801a0a8:	100b883a 	mov	r5,r2
 801a0ac:	e13ffd17 	ldw	r4,-12(fp)
 801a0b0:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a0b4:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
 801a0b8:	e0bffc17 	ldw	r2,-16(fp)
 801a0bc:	10800044 	addi	r2,r2,1
 801a0c0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 801a0c4:	e0bffb17 	ldw	r2,-20(fp)
 801a0c8:	10bfffc4 	addi	r2,r2,-1
 801a0cc:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801a0d0:	e0bffb17 	ldw	r2,-20(fp)
 801a0d4:	108000b0 	cmpltui	r2,r2,2
 801a0d8:	1000021e 	bne	r2,zero,801a0e4 <alt_avalon_i2c_master_transmit+0xf0>
 801a0dc:	e0bffe17 	ldw	r2,-8(fp)
 801a0e0:	103fec26 	beq	r2,zero,801a094 <alt_avalon_i2c_master_transmit+0xa0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801a0e4:	e0bffe17 	ldw	r2,-8(fp)
 801a0e8:	1000101e 	bne	r2,zero,801a12c <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801a0ec:	e0bffc17 	ldw	r2,-16(fp)
 801a0f0:	10800003 	ldbu	r2,0(r2)
 801a0f4:	10803fcc 	andi	r2,r2,255
 801a0f8:	e0fff903 	ldbu	r3,-28(fp)
 801a0fc:	180f883a 	mov	r7,r3
 801a100:	000d883a 	mov	r6,zero
 801a104:	100b883a 	mov	r5,r2
 801a108:	e13ffd17 	ldw	r4,-12(fp)
 801a10c:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a110:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
 801a114:	e0bffc17 	ldw	r2,-16(fp)
 801a118:	10800044 	addi	r2,r2,1
 801a11c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 801a120:	e0bffb17 	ldw	r2,-20(fp)
 801a124:	10bfffc4 	addi	r2,r2,-1
 801a128:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 801a12c:	e0bff903 	ldbu	r2,-28(fp)
 801a130:	1000101e 	bne	r2,zero,801a174 <alt_avalon_i2c_master_transmit+0x180>
 801a134:	e0bffe17 	ldw	r2,-8(fp)
 801a138:	10001726 	beq	r2,zero,801a198 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a13c:	00000d06 	br	801a174 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801a140:	e0bfff17 	ldw	r2,-4(fp)
 801a144:	108002a8 	cmpgeui	r2,r2,10
 801a148:	1000021e 	bne	r2,zero,801a154 <alt_avalon_i2c_master_transmit+0x160>
 801a14c:	0109c404 	movi	r4,10000
 801a150:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if (--timeout == 0)
 801a154:	e0bfff17 	ldw	r2,-4(fp)
 801a158:	10bfffc4 	addi	r2,r2,-1
 801a15c:	e0bfff15 	stw	r2,-4(fp)
 801a160:	e0bfff17 	ldw	r2,-4(fp)
 801a164:	1000031e 	bne	r2,zero,801a174 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801a168:	00bfff84 	movi	r2,-2
 801a16c:	e0bffe15 	stw	r2,-8(fp)
               break;
 801a170:	00000306 	br	801a180 <alt_avalon_i2c_master_transmit+0x18c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a174:	e13ffd17 	ldw	r4,-12(fp)
 801a178:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 801a17c:	103ff01e 	bne	r2,zero,801a140 <alt_avalon_i2c_master_transmit+0x14c>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 801a180:	e0bffe04 	addi	r2,fp,-8
 801a184:	100b883a 	mov	r5,r2
 801a188:	e13ffd17 	ldw	r4,-12(fp)
 801a18c:	8019a3c0 	call	8019a3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801a190:	e13ffd17 	ldw	r4,-12(fp)
 801a194:	80193040 	call	8019304 <alt_avalon_i2c_disable>
    }


    return status;
 801a198:	e0bffe17 	ldw	r2,-8(fp)
}
 801a19c:	e037883a 	mov	sp,fp
 801a1a0:	dfc00117 	ldw	ra,4(sp)
 801a1a4:	df000017 	ldw	fp,0(sp)
 801a1a8:	dec00204 	addi	sp,sp,8
 801a1ac:	f800283a 	ret

0801a1b0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 801a1b0:	defff604 	addi	sp,sp,-40
 801a1b4:	dfc00915 	stw	ra,36(sp)
 801a1b8:	df000815 	stw	fp,32(sp)
 801a1bc:	df000804 	addi	fp,sp,32
 801a1c0:	e13ffc15 	stw	r4,-16(fp)
 801a1c4:	e17ffb15 	stw	r5,-20(fp)
 801a1c8:	e1bffa15 	stw	r6,-24(fp)
 801a1cc:	3807883a 	mov	r3,r7
 801a1d0:	e0800217 	ldw	r2,8(fp)
 801a1d4:	e0fff905 	stb	r3,-28(fp)
 801a1d8:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801a1dc:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
 801a1e0:	e0bffa17 	ldw	r2,-24(fp)
 801a1e4:	1089c424 	muli	r2,r2,10000
 801a1e8:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801a1ec:	e0bffc17 	ldw	r2,-16(fp)
 801a1f0:	10800717 	ldw	r2,28(r2)
 801a1f4:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
 801a1f8:	e0bffa17 	ldw	r2,-24(fp)
 801a1fc:	1000021e 	bne	r2,zero,801a208 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801a200:	0005883a 	mov	r2,zero
 801a204:	00006706 	br	801a3a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801a208:	e0bffc17 	ldw	r2,-16(fp)
 801a20c:	10c00617 	ldw	r3,24(r2)
 801a210:	008200b4 	movhi	r2,2050
 801a214:	10a3ab04 	addi	r2,r2,-29012
 801a218:	18800226 	beq	r3,r2,801a224 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 801a21c:	00bfff44 	movi	r2,-3
 801a220:	00006006 	br	801a3a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801a224:	e0bff903 	ldbu	r2,-28(fp)
 801a228:	10000a1e 	bne	r2,zero,801a254 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801a22c:	e13ffc17 	ldw	r4,-16(fp)
 801a230:	801926c0 	call	801926c <alt_avalon_i2c_enable>
 801a234:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801a238:	e0bfff17 	ldw	r2,-4(fp)
 801a23c:	10000226 	beq	r2,zero,801a248 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
 801a240:	e0bfff17 	ldw	r2,-4(fp)
 801a244:	00005706 	br	801a3a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a248:	01400704 	movi	r5,28
 801a24c:	e13ffc17 	ldw	r4,-16(fp)
 801a250:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 801a254:	e0bff903 	ldbu	r2,-28(fp)
 801a258:	100d883a 	mov	r6,r2
 801a25c:	000b883a 	mov	r5,zero
 801a260:	e13ffc17 	ldw	r4,-16(fp)
 801a264:	80198e00 	call	80198e0 <alt_avalon_i2c_send_address>
 801a268:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 801a26c:	e0bfff17 	ldw	r2,-4(fp)
 801a270:	1000271e 	bne	r2,zero,801a310 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801a274:	00000f06 	br	801a2b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801a278:	e0bffb17 	ldw	r2,-20(fp)
 801a27c:	10800003 	ldbu	r2,0(r2)
 801a280:	10803fcc 	andi	r2,r2,255
 801a284:	000f883a 	mov	r7,zero
 801a288:	000d883a 	mov	r6,zero
 801a28c:	100b883a 	mov	r5,r2
 801a290:	e13ffc17 	ldw	r4,-16(fp)
 801a294:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a298:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
 801a29c:	e0bffb17 	ldw	r2,-20(fp)
 801a2a0:	10800044 	addi	r2,r2,1
 801a2a4:	e0bffb15 	stw	r2,-20(fp)
            --size;
 801a2a8:	e0bffa17 	ldw	r2,-24(fp)
 801a2ac:	10bfffc4 	addi	r2,r2,-1
 801a2b0:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 801a2b4:	e0bffa17 	ldw	r2,-24(fp)
 801a2b8:	108000b0 	cmpltui	r2,r2,2
 801a2bc:	1000021e 	bne	r2,zero,801a2c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
 801a2c0:	e0bfff17 	ldw	r2,-4(fp)
 801a2c4:	103fec26 	beq	r2,zero,801a278 <alt_avalon_i2c_master_transmit_using_interrupts+0xc8>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801a2c8:	e0bfff17 	ldw	r2,-4(fp)
 801a2cc:	1000101e 	bne	r2,zero,801a310 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801a2d0:	e0bffb17 	ldw	r2,-20(fp)
 801a2d4:	10800003 	ldbu	r2,0(r2)
 801a2d8:	10803fcc 	andi	r2,r2,255
 801a2dc:	e0fff803 	ldbu	r3,-32(fp)
 801a2e0:	180f883a 	mov	r7,r3
 801a2e4:	000d883a 	mov	r6,zero
 801a2e8:	100b883a 	mov	r5,r2
 801a2ec:	e13ffc17 	ldw	r4,-16(fp)
 801a2f0:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a2f4:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
 801a2f8:	e0bffb17 	ldw	r2,-20(fp)
 801a2fc:	10800044 	addi	r2,r2,1
 801a300:	e0bffb15 	stw	r2,-20(fp)
            --size;
 801a304:	e0bffa17 	ldw	r2,-24(fp)
 801a308:	10bfffc4 	addi	r2,r2,-1
 801a30c:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801a310:	e0bfff17 	ldw	r2,-4(fp)
 801a314:	10001426 	beq	r2,zero,801a368 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a318:	00000d06 	br	801a350 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 801a31c:	e0bffe17 	ldw	r2,-8(fp)
 801a320:	108002a8 	cmpgeui	r2,r2,10
 801a324:	1000021e 	bne	r2,zero,801a330 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
 801a328:	0109c404 	movi	r4,10000
 801a32c:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if (--timeout == 0)
 801a330:	e0bffe17 	ldw	r2,-8(fp)
 801a334:	10bfffc4 	addi	r2,r2,-1
 801a338:	e0bffe15 	stw	r2,-8(fp)
 801a33c:	e0bffe17 	ldw	r2,-8(fp)
 801a340:	1000031e 	bne	r2,zero,801a350 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801a344:	00bfff84 	movi	r2,-2
 801a348:	e0bfff15 	stw	r2,-4(fp)
               break;
 801a34c:	00000306 	br	801a35c <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a350:	e13ffc17 	ldw	r4,-16(fp)
 801a354:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 801a358:	103ff01e 	bne	r2,zero,801a31c <alt_avalon_i2c_master_transmit_using_interrupts+0x16c>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801a35c:	e13ffc17 	ldw	r4,-16(fp)
 801a360:	80193040 	call	8019304 <alt_avalon_i2c_disable>
 801a364:	00000e06 	br	801a3a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
 801a368:	e0bff803 	ldbu	r2,-32(fp)
 801a36c:	10000c26 	beq	r2,zero,801a3a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a370:	01400704 	movi	r5,28
 801a374:	e13ffc17 	ldw	r4,-16(fp)
 801a378:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 801a37c:	000b883a 	mov	r5,zero
 801a380:	e13ffc17 	ldw	r4,-16(fp)
 801a384:	801aa9c0 	call	801aa9c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 801a388:	e0bffd17 	ldw	r2,-12(fp)
 801a38c:	00c00044 	movi	r3,1
 801a390:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 801a394:	01400044 	movi	r5,1
 801a398:	e13ffc17 	ldw	r4,-16(fp)
 801a39c:	801a8f40 	call	801a8f4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 801a3a0:	e0bfff17 	ldw	r2,-4(fp)
}
 801a3a4:	e037883a 	mov	sp,fp
 801a3a8:	dfc00117 	ldw	ra,4(sp)
 801a3ac:	df000017 	ldw	fp,0(sp)
 801a3b0:	dec00204 	addi	sp,sp,8
 801a3b4:	f800283a 	ret

0801a3b8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 801a3b8:	defff404 	addi	sp,sp,-48
 801a3bc:	dfc00b15 	stw	ra,44(sp)
 801a3c0:	df000a15 	stw	fp,40(sp)
 801a3c4:	df000a04 	addi	fp,sp,40
 801a3c8:	e13ffa15 	stw	r4,-24(fp)
 801a3cc:	e17ff915 	stw	r5,-28(fp)
 801a3d0:	e1bff815 	stw	r6,-32(fp)
 801a3d4:	3807883a 	mov	r3,r7
 801a3d8:	e0800217 	ldw	r2,8(fp)
 801a3dc:	e0fff705 	stb	r3,-36(fp)
 801a3e0:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801a3e4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 801a3e8:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
 801a3ec:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 801a3f0:	e0bff817 	ldw	r2,-32(fp)
 801a3f4:	1000021e 	bne	r2,zero,801a400 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801a3f8:	0005883a 	mov	r2,zero
 801a3fc:	00006c06 	br	801a5b0 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801a400:	e0bff703 	ldbu	r2,-36(fp)
 801a404:	10000a1e 	bne	r2,zero,801a430 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801a408:	e13ffa17 	ldw	r4,-24(fp)
 801a40c:	801926c0 	call	801926c <alt_avalon_i2c_enable>
 801a410:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801a414:	e0bffc17 	ldw	r2,-16(fp)
 801a418:	10000226 	beq	r2,zero,801a424 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 801a41c:	e0bffc17 	ldw	r2,-16(fp)
 801a420:	00006306 	br	801a5b0 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a424:	01400704 	movi	r5,28
 801a428:	e13ffa17 	ldw	r4,-24(fp)
 801a42c:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 801a430:	e0bff703 	ldbu	r2,-36(fp)
 801a434:	100d883a 	mov	r6,r2
 801a438:	01400044 	movi	r5,1
 801a43c:	e13ffa17 	ldw	r4,-24(fp)
 801a440:	80198e00 	call	80198e0 <alt_avalon_i2c_send_address>
 801a444:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 801a448:	e0bffc17 	ldw	r2,-16(fp)
 801a44c:	1000341e 	bne	r2,zero,801a520 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801a450:	00001906 	br	801a4b8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801a454:	000f883a 	mov	r7,zero
 801a458:	000d883a 	mov	r6,zero
 801a45c:	000b883a 	mov	r5,zero
 801a460:	e13ffa17 	ldw	r4,-24(fp)
 801a464:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a468:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
 801a46c:	e0bffd17 	ldw	r2,-12(fp)
 801a470:	10800044 	addi	r2,r2,1
 801a474:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 801a478:	e0bffc17 	ldw	r2,-16(fp)
 801a47c:	10000e1e 	bne	r2,zero,801a4b8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 801a480:	e0bffb04 	addi	r2,fp,-20
 801a484:	100f883a 	mov	r7,r2
 801a488:	000d883a 	mov	r6,zero
 801a48c:	e17ff917 	ldw	r5,-28(fp)
 801a490:	e13ffa17 	ldw	r4,-24(fp)
 801a494:	80196a00 	call	80196a0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 801a498:	e0bffb17 	ldw	r2,-20(fp)
 801a49c:	e0fff917 	ldw	r3,-28(fp)
 801a4a0:	1885883a 	add	r2,r3,r2
 801a4a4:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
 801a4a8:	e0bffb17 	ldw	r2,-20(fp)
 801a4ac:	e0fffe17 	ldw	r3,-8(fp)
 801a4b0:	1885883a 	add	r2,r3,r2
 801a4b4:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801a4b8:	e0bff817 	ldw	r2,-32(fp)
 801a4bc:	10bfffc4 	addi	r2,r2,-1
 801a4c0:	e0fffd17 	ldw	r3,-12(fp)
 801a4c4:	1880022e 	bgeu	r3,r2,801a4d0 <alt_avalon_i2c_master_receive+0x118>
 801a4c8:	e0bffc17 	ldw	r2,-16(fp)
 801a4cc:	103fe126 	beq	r2,zero,801a454 <alt_avalon_i2c_master_receive+0x9c>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801a4d0:	e0bffc17 	ldw	r2,-16(fp)
 801a4d4:	1000121e 	bne	r2,zero,801a520 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801a4d8:	e0bff603 	ldbu	r2,-40(fp)
 801a4dc:	100f883a 	mov	r7,r2
 801a4e0:	000d883a 	mov	r6,zero
 801a4e4:	000b883a 	mov	r5,zero
 801a4e8:	e13ffa17 	ldw	r4,-24(fp)
 801a4ec:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a4f0:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 801a4f4:	00000a06 	br	801a520 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 801a4f8:	e17ff917 	ldw	r5,-28(fp)
 801a4fc:	e13ffa17 	ldw	r4,-24(fp)
 801a500:	801974c0 	call	801974c <alt_avalon_i2c_rx_read>
 801a504:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
 801a508:	e0bff917 	ldw	r2,-28(fp)
 801a50c:	10800044 	addi	r2,r2,1
 801a510:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
 801a514:	e0bffe17 	ldw	r2,-8(fp)
 801a518:	10800044 	addi	r2,r2,1
 801a51c:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 801a520:	e0fffe17 	ldw	r3,-8(fp)
 801a524:	e0bff817 	ldw	r2,-32(fp)
 801a528:	1880022e 	bgeu	r3,r2,801a534 <alt_avalon_i2c_master_receive+0x17c>
 801a52c:	e0bffc17 	ldw	r2,-16(fp)
 801a530:	103ff126 	beq	r2,zero,801a4f8 <alt_avalon_i2c_master_receive+0x140>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 801a534:	e0bff603 	ldbu	r2,-40(fp)
 801a538:	1000021e 	bne	r2,zero,801a544 <alt_avalon_i2c_master_receive+0x18c>
 801a53c:	e0bffc17 	ldw	r2,-16(fp)
 801a540:	10001a26 	beq	r2,zero,801a5ac <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
 801a544:	e0bff817 	ldw	r2,-32(fp)
 801a548:	1089c424 	muli	r2,r2,10000
 801a54c:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a550:	00000d06 	br	801a588 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801a554:	e0bfff17 	ldw	r2,-4(fp)
 801a558:	108002a8 	cmpgeui	r2,r2,10
 801a55c:	1000021e 	bne	r2,zero,801a568 <alt_avalon_i2c_master_receive+0x1b0>
 801a560:	0109c404 	movi	r4,10000
 801a564:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if (--timeout == 0)
 801a568:	e0bfff17 	ldw	r2,-4(fp)
 801a56c:	10bfffc4 	addi	r2,r2,-1
 801a570:	e0bfff15 	stw	r2,-4(fp)
 801a574:	e0bfff17 	ldw	r2,-4(fp)
 801a578:	1000031e 	bne	r2,zero,801a588 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801a57c:	00bfff84 	movi	r2,-2
 801a580:	e0bffc15 	stw	r2,-16(fp)
               break;
 801a584:	00000306 	br	801a594 <alt_avalon_i2c_master_receive+0x1dc>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a588:	e13ffa17 	ldw	r4,-24(fp)
 801a58c:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 801a590:	103ff01e 	bne	r2,zero,801a554 <alt_avalon_i2c_master_receive+0x19c>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 801a594:	e0bffc04 	addi	r2,fp,-16
 801a598:	100b883a 	mov	r5,r2
 801a59c:	e13ffa17 	ldw	r4,-24(fp)
 801a5a0:	8019a3c0 	call	8019a3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801a5a4:	e13ffa17 	ldw	r4,-24(fp)
 801a5a8:	80193040 	call	8019304 <alt_avalon_i2c_disable>
    }

    return status;
 801a5ac:	e0bffc17 	ldw	r2,-16(fp)
}
 801a5b0:	e037883a 	mov	sp,fp
 801a5b4:	dfc00117 	ldw	ra,4(sp)
 801a5b8:	df000017 	ldw	fp,0(sp)
 801a5bc:	dec00204 	addi	sp,sp,8
 801a5c0:	f800283a 	ret

0801a5c4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 801a5c4:	defff504 	addi	sp,sp,-44
 801a5c8:	dfc00a15 	stw	ra,40(sp)
 801a5cc:	df000915 	stw	fp,36(sp)
 801a5d0:	df000904 	addi	fp,sp,36
 801a5d4:	e13ffb15 	stw	r4,-20(fp)
 801a5d8:	e17ffa15 	stw	r5,-24(fp)
 801a5dc:	e1bff915 	stw	r6,-28(fp)
 801a5e0:	3807883a 	mov	r3,r7
 801a5e4:	e0800217 	ldw	r2,8(fp)
 801a5e8:	e0fff805 	stb	r3,-32(fp)
 801a5ec:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801a5f0:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801a5f4:	e0bffb17 	ldw	r2,-20(fp)
 801a5f8:	10800717 	ldw	r2,28(r2)
 801a5fc:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 801a600:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
 801a604:	e0bff917 	ldw	r2,-28(fp)
 801a608:	1000021e 	bne	r2,zero,801a614 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801a60c:	0005883a 	mov	r2,zero
 801a610:	00006206 	br	801a79c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801a614:	e0bffb17 	ldw	r2,-20(fp)
 801a618:	10c00617 	ldw	r3,24(r2)
 801a61c:	008200b4 	movhi	r2,2050
 801a620:	10a3ab04 	addi	r2,r2,-29012
 801a624:	18800226 	beq	r3,r2,801a630 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 801a628:	00bfff44 	movi	r2,-3
 801a62c:	00005b06 	br	801a79c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801a630:	e0bff803 	ldbu	r2,-32(fp)
 801a634:	10000a1e 	bne	r2,zero,801a660 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801a638:	e13ffb17 	ldw	r4,-20(fp)
 801a63c:	801926c0 	call	801926c <alt_avalon_i2c_enable>
 801a640:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801a644:	e0bfff17 	ldw	r2,-4(fp)
 801a648:	10000226 	beq	r2,zero,801a654 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 801a64c:	e0bfff17 	ldw	r2,-4(fp)
 801a650:	00005206 	br	801a79c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a654:	01400704 	movi	r5,28
 801a658:	e13ffb17 	ldw	r4,-20(fp)
 801a65c:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 801a660:	e0bff803 	ldbu	r2,-32(fp)
 801a664:	100d883a 	mov	r6,r2
 801a668:	01400044 	movi	r5,1
 801a66c:	e13ffb17 	ldw	r4,-20(fp)
 801a670:	80198e00 	call	80198e0 <alt_avalon_i2c_send_address>
 801a674:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 801a678:	e0bfff17 	ldw	r2,-4(fp)
 801a67c:	1000191e 	bne	r2,zero,801a6e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801a680:	00000906 	br	801a6a8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801a684:	000f883a 	mov	r7,zero
 801a688:	000d883a 	mov	r6,zero
 801a68c:	000b883a 	mov	r5,zero
 801a690:	e13ffb17 	ldw	r4,-20(fp)
 801a694:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a698:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
 801a69c:	e0bffd17 	ldw	r2,-12(fp)
 801a6a0:	10800044 	addi	r2,r2,1
 801a6a4:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 801a6a8:	e0bff917 	ldw	r2,-28(fp)
 801a6ac:	10bfffc4 	addi	r2,r2,-1
 801a6b0:	e0fffd17 	ldw	r3,-12(fp)
 801a6b4:	1880022e 	bgeu	r3,r2,801a6c0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 801a6b8:	e0bfff17 	ldw	r2,-4(fp)
 801a6bc:	103ff126 	beq	r2,zero,801a684 <alt_avalon_i2c_master_receive_using_interrupts+0xc0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801a6c0:	e0bfff17 	ldw	r2,-4(fp)
 801a6c4:	1000071e 	bne	r2,zero,801a6e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801a6c8:	e0bff703 	ldbu	r2,-36(fp)
 801a6cc:	100f883a 	mov	r7,r2
 801a6d0:	000d883a 	mov	r6,zero
 801a6d4:	000b883a 	mov	r5,zero
 801a6d8:	e13ffb17 	ldw	r4,-20(fp)
 801a6dc:	80197f40 	call	80197f4 <alt_avalon_i2c_cmd_write>
 801a6e0:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801a6e4:	e0bfff17 	ldw	r2,-4(fp)
 801a6e8:	10001726 	beq	r2,zero,801a748 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
 801a6ec:	e0bff917 	ldw	r2,-28(fp)
 801a6f0:	1089c424 	muli	r2,r2,10000
 801a6f4:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a6f8:	00000d06 	br	801a730 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801a6fc:	e0bffe17 	ldw	r2,-8(fp)
 801a700:	108002a8 	cmpgeui	r2,r2,10
 801a704:	1000021e 	bne	r2,zero,801a710 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
 801a708:	0109c404 	movi	r4,10000
 801a70c:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if (--timeout == 0)
 801a710:	e0bffe17 	ldw	r2,-8(fp)
 801a714:	10bfffc4 	addi	r2,r2,-1
 801a718:	e0bffe15 	stw	r2,-8(fp)
 801a71c:	e0bffe17 	ldw	r2,-8(fp)
 801a720:	1000031e 	bne	r2,zero,801a730 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801a724:	00bfff84 	movi	r2,-2
 801a728:	e0bfff15 	stw	r2,-4(fp)
               break;
 801a72c:	00000306 	br	801a73c <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801a730:	e13ffb17 	ldw	r4,-20(fp)
 801a734:	801965c0 	call	801965c <alt_avalon_i2c_is_busy>
 801a738:	103ff01e 	bne	r2,zero,801a6fc <alt_avalon_i2c_master_receive_using_interrupts+0x138>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801a73c:	e13ffb17 	ldw	r4,-20(fp)
 801a740:	80193040 	call	8019304 <alt_avalon_i2c_disable>
 801a744:	00001406 	br	801a798 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
 801a748:	e0bff703 	ldbu	r2,-36(fp)
 801a74c:	10001226 	beq	r2,zero,801a798 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801a750:	01400704 	movi	r5,28
 801a754:	e13ffb17 	ldw	r4,-20(fp)
 801a758:	801a84c0 	call	801a84c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 801a75c:	000b883a 	mov	r5,zero
 801a760:	e13ffb17 	ldw	r4,-20(fp)
 801a764:	801a9ec0 	call	801a9ec <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 801a768:	e0bffc17 	ldw	r2,-16(fp)
 801a76c:	00c00084 	movi	r3,2
 801a770:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 801a774:	e0bffc17 	ldw	r2,-16(fp)
 801a778:	e0fffa17 	ldw	r3,-24(fp)
 801a77c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 801a780:	e0bffc17 	ldw	r2,-16(fp)
 801a784:	e0fff917 	ldw	r3,-28(fp)
 801a788:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 801a78c:	01400084 	movi	r5,2
 801a790:	e13ffb17 	ldw	r4,-20(fp)
 801a794:	801a8f40 	call	801a8f4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 801a798:	e0bfff17 	ldw	r2,-4(fp)
}
 801a79c:	e037883a 	mov	sp,fp
 801a7a0:	dfc00117 	ldw	ra,4(sp)
 801a7a4:	df000017 	ldw	fp,0(sp)
 801a7a8:	dec00204 	addi	sp,sp,8
 801a7ac:	f800283a 	ret

0801a7b0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 801a7b0:	defffd04 	addi	sp,sp,-12
 801a7b4:	df000215 	stw	fp,8(sp)
 801a7b8:	df000204 	addi	fp,sp,8
 801a7bc:	e13fff15 	stw	r4,-4(fp)
 801a7c0:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 801a7c4:	e0bfff17 	ldw	r2,-4(fp)
 801a7c8:	10800317 	ldw	r2,12(r2)
 801a7cc:	10800404 	addi	r2,r2,16
 801a7d0:	10c00037 	ldwio	r3,0(r2)
 801a7d4:	e0bfff17 	ldw	r2,-4(fp)
 801a7d8:	10800317 	ldw	r2,12(r2)
 801a7dc:	10800304 	addi	r2,r2,12
 801a7e0:	10800037 	ldwio	r2,0(r2)
 801a7e4:	1884703a 	and	r2,r3,r2
 801a7e8:	1007883a 	mov	r3,r2
 801a7ec:	e0bffe17 	ldw	r2,-8(fp)
 801a7f0:	10c00015 	stw	r3,0(r2)
}
 801a7f4:	0001883a 	nop
 801a7f8:	e037883a 	mov	sp,fp
 801a7fc:	df000017 	ldw	fp,0(sp)
 801a800:	dec00104 	addi	sp,sp,4
 801a804:	f800283a 	ret

0801a808 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 801a808:	defffd04 	addi	sp,sp,-12
 801a80c:	df000215 	stw	fp,8(sp)
 801a810:	df000204 	addi	fp,sp,8
 801a814:	e13fff15 	stw	r4,-4(fp)
 801a818:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 801a81c:	e0bfff17 	ldw	r2,-4(fp)
 801a820:	10800317 	ldw	r2,12(r2)
 801a824:	10800404 	addi	r2,r2,16
 801a828:	10800037 	ldwio	r2,0(r2)
 801a82c:	1007883a 	mov	r3,r2
 801a830:	e0bffe17 	ldw	r2,-8(fp)
 801a834:	10c00015 	stw	r3,0(r2)
}
 801a838:	0001883a 	nop
 801a83c:	e037883a 	mov	sp,fp
 801a840:	df000017 	ldw	fp,0(sp)
 801a844:	dec00104 	addi	sp,sp,4
 801a848:	f800283a 	ret

0801a84c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801a84c:	defffd04 	addi	sp,sp,-12
 801a850:	df000215 	stw	fp,8(sp)
 801a854:	df000204 	addi	fp,sp,8
 801a858:	e13fff15 	stw	r4,-4(fp)
 801a85c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 801a860:	e0bfff17 	ldw	r2,-4(fp)
 801a864:	10800317 	ldw	r2,12(r2)
 801a868:	10800404 	addi	r2,r2,16
 801a86c:	e0fffe17 	ldw	r3,-8(fp)
 801a870:	10c00035 	stwio	r3,0(r2)
}
 801a874:	0001883a 	nop
 801a878:	e037883a 	mov	sp,fp
 801a87c:	df000017 	ldw	fp,0(sp)
 801a880:	dec00104 	addi	sp,sp,4
 801a884:	f800283a 	ret

0801a888 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801a888:	defffb04 	addi	sp,sp,-20
 801a88c:	dfc00415 	stw	ra,16(sp)
 801a890:	df000315 	stw	fp,12(sp)
 801a894:	df000304 	addi	fp,sp,12
 801a898:	e13ffe15 	stw	r4,-8(fp)
 801a89c:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801a8a0:	e0bfff04 	addi	r2,fp,-4
 801a8a4:	100b883a 	mov	r5,r2
 801a8a8:	e13ffe17 	ldw	r4,-8(fp)
 801a8ac:	801a95c0 	call	801a95c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 801a8b0:	e0bffd17 	ldw	r2,-12(fp)
 801a8b4:	0086303a 	nor	r3,zero,r2
 801a8b8:	e0bfff17 	ldw	r2,-4(fp)
 801a8bc:	1884703a 	and	r2,r3,r2
 801a8c0:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801a8c4:	e0bffe17 	ldw	r2,-8(fp)
 801a8c8:	10800317 	ldw	r2,12(r2)
 801a8cc:	10800304 	addi	r2,r2,12
 801a8d0:	e0ffff17 	ldw	r3,-4(fp)
 801a8d4:	18c007cc 	andi	r3,r3,31
 801a8d8:	10c00035 	stwio	r3,0(r2)
}
 801a8dc:	0001883a 	nop
 801a8e0:	e037883a 	mov	sp,fp
 801a8e4:	dfc00117 	ldw	ra,4(sp)
 801a8e8:	df000017 	ldw	fp,0(sp)
 801a8ec:	dec00204 	addi	sp,sp,8
 801a8f0:	f800283a 	ret

0801a8f4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801a8f4:	defffb04 	addi	sp,sp,-20
 801a8f8:	dfc00415 	stw	ra,16(sp)
 801a8fc:	df000315 	stw	fp,12(sp)
 801a900:	df000304 	addi	fp,sp,12
 801a904:	e13ffe15 	stw	r4,-8(fp)
 801a908:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801a90c:	e0bfff04 	addi	r2,fp,-4
 801a910:	100b883a 	mov	r5,r2
 801a914:	e13ffe17 	ldw	r4,-8(fp)
 801a918:	801a95c0 	call	801a95c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 801a91c:	e0ffff17 	ldw	r3,-4(fp)
 801a920:	e0bffd17 	ldw	r2,-12(fp)
 801a924:	1884b03a 	or	r2,r3,r2
 801a928:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801a92c:	e0bffe17 	ldw	r2,-8(fp)
 801a930:	10800317 	ldw	r2,12(r2)
 801a934:	10800304 	addi	r2,r2,12
 801a938:	e0ffff17 	ldw	r3,-4(fp)
 801a93c:	18c007cc 	andi	r3,r3,31
 801a940:	10c00035 	stwio	r3,0(r2)
}
 801a944:	0001883a 	nop
 801a948:	e037883a 	mov	sp,fp
 801a94c:	dfc00117 	ldw	ra,4(sp)
 801a950:	df000017 	ldw	fp,0(sp)
 801a954:	dec00204 	addi	sp,sp,8
 801a958:	f800283a 	ret

0801a95c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 801a95c:	defffd04 	addi	sp,sp,-12
 801a960:	df000215 	stw	fp,8(sp)
 801a964:	df000204 	addi	fp,sp,8
 801a968:	e13fff15 	stw	r4,-4(fp)
 801a96c:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 801a970:	e0bfff17 	ldw	r2,-4(fp)
 801a974:	10800317 	ldw	r2,12(r2)
 801a978:	10800304 	addi	r2,r2,12
 801a97c:	10800037 	ldwio	r2,0(r2)
 801a980:	10c007cc 	andi	r3,r2,31
 801a984:	e0bffe17 	ldw	r2,-8(fp)
 801a988:	10c00015 	stw	r3,0(r2)
}
 801a98c:	0001883a 	nop
 801a990:	e037883a 	mov	sp,fp
 801a994:	df000017 	ldw	fp,0(sp)
 801a998:	dec00104 	addi	sp,sp,4
 801a99c:	f800283a 	ret

0801a9a0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 801a9a0:	defffd04 	addi	sp,sp,-12
 801a9a4:	df000215 	stw	fp,8(sp)
 801a9a8:	df000204 	addi	fp,sp,8
 801a9ac:	e13fff15 	stw	r4,-4(fp)
 801a9b0:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 801a9b4:	e0bfff17 	ldw	r2,-4(fp)
 801a9b8:	10800317 	ldw	r2,12(r2)
 801a9bc:	10800204 	addi	r2,r2,8
 801a9c0:	10800037 	ldwio	r2,0(r2)
 801a9c4:	1005d13a 	srai	r2,r2,4
 801a9c8:	108000cc 	andi	r2,r2,3
 801a9cc:	1007883a 	mov	r3,r2
 801a9d0:	e0bffe17 	ldw	r2,-8(fp)
 801a9d4:	10c00015 	stw	r3,0(r2)
}
 801a9d8:	0001883a 	nop
 801a9dc:	e037883a 	mov	sp,fp
 801a9e0:	df000017 	ldw	fp,0(sp)
 801a9e4:	dec00104 	addi	sp,sp,4
 801a9e8:	f800283a 	ret

0801a9ec <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 801a9ec:	defffd04 	addi	sp,sp,-12
 801a9f0:	df000215 	stw	fp,8(sp)
 801a9f4:	df000204 	addi	fp,sp,8
 801a9f8:	e13fff15 	stw	r4,-4(fp)
 801a9fc:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 801aa00:	e0bfff17 	ldw	r2,-4(fp)
 801aa04:	10800317 	ldw	r2,12(r2)
 801aa08:	10800204 	addi	r2,r2,8
 801aa0c:	e0ffff17 	ldw	r3,-4(fp)
 801aa10:	18c00317 	ldw	r3,12(r3)
 801aa14:	18c00204 	addi	r3,r3,8
 801aa18:	18c00037 	ldwio	r3,0(r3)
 801aa1c:	1809883a 	mov	r4,r3
 801aa20:	00fff3c4 	movi	r3,-49
 801aa24:	20c8703a 	and	r4,r4,r3
 801aa28:	e0fffe17 	ldw	r3,-8(fp)
 801aa2c:	1806913a 	slli	r3,r3,4
 801aa30:	18c00c0c 	andi	r3,r3,48
 801aa34:	20c6b03a 	or	r3,r4,r3
 801aa38:	10c00035 	stwio	r3,0(r2)
}
 801aa3c:	0001883a 	nop
 801aa40:	e037883a 	mov	sp,fp
 801aa44:	df000017 	ldw	fp,0(sp)
 801aa48:	dec00104 	addi	sp,sp,4
 801aa4c:	f800283a 	ret

0801aa50 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 801aa50:	defffd04 	addi	sp,sp,-12
 801aa54:	df000215 	stw	fp,8(sp)
 801aa58:	df000204 	addi	fp,sp,8
 801aa5c:	e13fff15 	stw	r4,-4(fp)
 801aa60:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 801aa64:	e0bfff17 	ldw	r2,-4(fp)
 801aa68:	10800317 	ldw	r2,12(r2)
 801aa6c:	10800204 	addi	r2,r2,8
 801aa70:	10800037 	ldwio	r2,0(r2)
 801aa74:	1005d0ba 	srai	r2,r2,2
 801aa78:	108000cc 	andi	r2,r2,3
 801aa7c:	1007883a 	mov	r3,r2
 801aa80:	e0bffe17 	ldw	r2,-8(fp)
 801aa84:	10c00015 	stw	r3,0(r2)
}
 801aa88:	0001883a 	nop
 801aa8c:	e037883a 	mov	sp,fp
 801aa90:	df000017 	ldw	fp,0(sp)
 801aa94:	dec00104 	addi	sp,sp,4
 801aa98:	f800283a 	ret

0801aa9c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 801aa9c:	defffd04 	addi	sp,sp,-12
 801aaa0:	df000215 	stw	fp,8(sp)
 801aaa4:	df000204 	addi	fp,sp,8
 801aaa8:	e13fff15 	stw	r4,-4(fp)
 801aaac:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 801aab0:	e0bfff17 	ldw	r2,-4(fp)
 801aab4:	10800317 	ldw	r2,12(r2)
 801aab8:	10800204 	addi	r2,r2,8
 801aabc:	e0ffff17 	ldw	r3,-4(fp)
 801aac0:	18c00317 	ldw	r3,12(r3)
 801aac4:	18c00204 	addi	r3,r3,8
 801aac8:	18c00037 	ldwio	r3,0(r3)
 801aacc:	1809883a 	mov	r4,r3
 801aad0:	00fffcc4 	movi	r3,-13
 801aad4:	20c8703a 	and	r4,r4,r3
 801aad8:	e0fffe17 	ldw	r3,-8(fp)
 801aadc:	180690ba 	slli	r3,r3,2
 801aae0:	18c0030c 	andi	r3,r3,12
 801aae4:	20c6b03a 	or	r3,r4,r3
 801aae8:	10c00035 	stwio	r3,0(r2)
}
 801aaec:	0001883a 	nop
 801aaf0:	e037883a 	mov	sp,fp
 801aaf4:	df000017 	ldw	fp,0(sp)
 801aaf8:	dec00104 	addi	sp,sp,4
 801aafc:	f800283a 	ret

0801ab00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801ab00:	defffa04 	addi	sp,sp,-24
 801ab04:	dfc00515 	stw	ra,20(sp)
 801ab08:	df000415 	stw	fp,16(sp)
 801ab0c:	df000404 	addi	fp,sp,16
 801ab10:	e13ffe15 	stw	r4,-8(fp)
 801ab14:	e17ffd15 	stw	r5,-12(fp)
 801ab18:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801ab1c:	e0bffe17 	ldw	r2,-8(fp)
 801ab20:	10800017 	ldw	r2,0(r2)
 801ab24:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801ab28:	e0bfff17 	ldw	r2,-4(fp)
 801ab2c:	10c00a04 	addi	r3,r2,40
 801ab30:	e0bffe17 	ldw	r2,-8(fp)
 801ab34:	10800217 	ldw	r2,8(r2)
 801ab38:	100f883a 	mov	r7,r2
 801ab3c:	e1bffc17 	ldw	r6,-16(fp)
 801ab40:	e17ffd17 	ldw	r5,-12(fp)
 801ab44:	1809883a 	mov	r4,r3
 801ab48:	801b2c80 	call	801b2c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801ab4c:	e037883a 	mov	sp,fp
 801ab50:	dfc00117 	ldw	ra,4(sp)
 801ab54:	df000017 	ldw	fp,0(sp)
 801ab58:	dec00204 	addi	sp,sp,8
 801ab5c:	f800283a 	ret

0801ab60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801ab60:	defffa04 	addi	sp,sp,-24
 801ab64:	dfc00515 	stw	ra,20(sp)
 801ab68:	df000415 	stw	fp,16(sp)
 801ab6c:	df000404 	addi	fp,sp,16
 801ab70:	e13ffe15 	stw	r4,-8(fp)
 801ab74:	e17ffd15 	stw	r5,-12(fp)
 801ab78:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801ab7c:	e0bffe17 	ldw	r2,-8(fp)
 801ab80:	10800017 	ldw	r2,0(r2)
 801ab84:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801ab88:	e0bfff17 	ldw	r2,-4(fp)
 801ab8c:	10c00a04 	addi	r3,r2,40
 801ab90:	e0bffe17 	ldw	r2,-8(fp)
 801ab94:	10800217 	ldw	r2,8(r2)
 801ab98:	100f883a 	mov	r7,r2
 801ab9c:	e1bffc17 	ldw	r6,-16(fp)
 801aba0:	e17ffd17 	ldw	r5,-12(fp)
 801aba4:	1809883a 	mov	r4,r3
 801aba8:	801b5900 	call	801b590 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801abac:	e037883a 	mov	sp,fp
 801abb0:	dfc00117 	ldw	ra,4(sp)
 801abb4:	df000017 	ldw	fp,0(sp)
 801abb8:	dec00204 	addi	sp,sp,8
 801abbc:	f800283a 	ret

0801abc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801abc0:	defffc04 	addi	sp,sp,-16
 801abc4:	dfc00315 	stw	ra,12(sp)
 801abc8:	df000215 	stw	fp,8(sp)
 801abcc:	df000204 	addi	fp,sp,8
 801abd0:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801abd4:	e0bffe17 	ldw	r2,-8(fp)
 801abd8:	10800017 	ldw	r2,0(r2)
 801abdc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801abe0:	e0bfff17 	ldw	r2,-4(fp)
 801abe4:	10c00a04 	addi	r3,r2,40
 801abe8:	e0bffe17 	ldw	r2,-8(fp)
 801abec:	10800217 	ldw	r2,8(r2)
 801abf0:	100b883a 	mov	r5,r2
 801abf4:	1809883a 	mov	r4,r3
 801abf8:	801b16c0 	call	801b16c <altera_avalon_jtag_uart_close>
}
 801abfc:	e037883a 	mov	sp,fp
 801ac00:	dfc00117 	ldw	ra,4(sp)
 801ac04:	df000017 	ldw	fp,0(sp)
 801ac08:	dec00204 	addi	sp,sp,8
 801ac0c:	f800283a 	ret

0801ac10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801ac10:	defffa04 	addi	sp,sp,-24
 801ac14:	dfc00515 	stw	ra,20(sp)
 801ac18:	df000415 	stw	fp,16(sp)
 801ac1c:	df000404 	addi	fp,sp,16
 801ac20:	e13ffe15 	stw	r4,-8(fp)
 801ac24:	e17ffd15 	stw	r5,-12(fp)
 801ac28:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801ac2c:	e0bffe17 	ldw	r2,-8(fp)
 801ac30:	10800017 	ldw	r2,0(r2)
 801ac34:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801ac38:	e0bfff17 	ldw	r2,-4(fp)
 801ac3c:	10800a04 	addi	r2,r2,40
 801ac40:	e1bffc17 	ldw	r6,-16(fp)
 801ac44:	e17ffd17 	ldw	r5,-12(fp)
 801ac48:	1009883a 	mov	r4,r2
 801ac4c:	801b1d40 	call	801b1d4 <altera_avalon_jtag_uart_ioctl>
}
 801ac50:	e037883a 	mov	sp,fp
 801ac54:	dfc00117 	ldw	ra,4(sp)
 801ac58:	df000017 	ldw	fp,0(sp)
 801ac5c:	dec00204 	addi	sp,sp,8
 801ac60:	f800283a 	ret

0801ac64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801ac64:	defff404 	addi	sp,sp,-48
 801ac68:	dfc00b15 	stw	ra,44(sp)
 801ac6c:	df000a15 	stw	fp,40(sp)
 801ac70:	df000a04 	addi	fp,sp,40
 801ac74:	e13ff915 	stw	r4,-28(fp)
 801ac78:	e17ff815 	stw	r5,-32(fp)
 801ac7c:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 801ac80:	e0bff917 	ldw	r2,-28(fp)
 801ac84:	10800c04 	addi	r2,r2,48
 801ac88:	e0bffb15 	stw	r2,-20(fp)
 801ac8c:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 801ac90:	e0bffa8b 	ldhu	r2,-22(fp)
 801ac94:	e0fffa44 	addi	r3,fp,-23
 801ac98:	180b883a 	mov	r5,r3
 801ac9c:	1009883a 	mov	r4,r2
 801aca0:	80137700 	call	8013770 <OSFlagCreate>
 801aca4:	1007883a 	mov	r3,r2
 801aca8:	e0bffb17 	ldw	r2,-20(fp)
 801acac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 801acb0:	e0bff917 	ldw	r2,-28(fp)
 801acb4:	10800a04 	addi	r2,r2,40
 801acb8:	e0bffd15 	stw	r2,-12(fp)
 801acbc:	00800044 	movi	r2,1
 801acc0:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
 801acc4:	e0bffc8b 	ldhu	r2,-14(fp)
 801acc8:	1009883a 	mov	r4,r2
 801accc:	80165980 	call	8016598 <OSSemCreate>
 801acd0:	1007883a 	mov	r3,r2
 801acd4:	e0bffd17 	ldw	r2,-12(fp)
 801acd8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 801acdc:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
 801ace0:	e0bff917 	ldw	r2,-28(fp)
 801ace4:	10800b04 	addi	r2,r2,44
 801ace8:	e0bfff15 	stw	r2,-4(fp)
 801acec:	00800044 	movi	r2,1
 801acf0:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
 801acf4:	e0bffe8b 	ldhu	r2,-6(fp)
 801acf8:	1009883a 	mov	r4,r2
 801acfc:	80165980 	call	8016598 <OSSemCreate>
 801ad00:	1007883a 	mov	r3,r2
 801ad04:	e0bfff17 	ldw	r2,-4(fp)
 801ad08:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 801ad0c:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801ad10:	e0bff917 	ldw	r2,-28(fp)
 801ad14:	00c00044 	movi	r3,1
 801ad18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801ad1c:	e0bff917 	ldw	r2,-28(fp)
 801ad20:	10800017 	ldw	r2,0(r2)
 801ad24:	10800104 	addi	r2,r2,4
 801ad28:	1007883a 	mov	r3,r2
 801ad2c:	e0bff917 	ldw	r2,-28(fp)
 801ad30:	10800817 	ldw	r2,32(r2)
 801ad34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801ad38:	e0bff817 	ldw	r2,-32(fp)
 801ad3c:	e0fff717 	ldw	r3,-36(fp)
 801ad40:	d8000015 	stw	zero,0(sp)
 801ad44:	e1fff917 	ldw	r7,-28(fp)
 801ad48:	018200b4 	movhi	r6,2050
 801ad4c:	31ab6d04 	addi	r6,r6,-21068
 801ad50:	180b883a 	mov	r5,r3
 801ad54:	1009883a 	mov	r4,r2
 801ad58:	803aec40 	call	803aec4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801ad5c:	e0bff917 	ldw	r2,-28(fp)
 801ad60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801ad64:	e0bff917 	ldw	r2,-28(fp)
 801ad68:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801ad6c:	d0e0b317 	ldw	r3,-32052(gp)
 801ad70:	e1fff917 	ldw	r7,-28(fp)
 801ad74:	018200b4 	movhi	r6,2050
 801ad78:	31ac1804 	addi	r6,r6,-20384
 801ad7c:	180b883a 	mov	r5,r3
 801ad80:	1009883a 	mov	r4,r2
 801ad84:	803a7900 	call	803a790 <alt_alarm_start>
 801ad88:	1000040e 	bge	r2,zero,801ad9c <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801ad8c:	e0fff917 	ldw	r3,-28(fp)
 801ad90:	00a00034 	movhi	r2,32768
 801ad94:	10bfffc4 	addi	r2,r2,-1
 801ad98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801ad9c:	0001883a 	nop
 801ada0:	e037883a 	mov	sp,fp
 801ada4:	dfc00117 	ldw	ra,4(sp)
 801ada8:	df000017 	ldw	fp,0(sp)
 801adac:	dec00204 	addi	sp,sp,8
 801adb0:	f800283a 	ret

0801adb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801adb4:	defff204 	addi	sp,sp,-56
 801adb8:	dfc00d15 	stw	ra,52(sp)
 801adbc:	df000c15 	stw	fp,48(sp)
 801adc0:	df000c04 	addi	fp,sp,48
 801adc4:	e13ff415 	stw	r4,-48(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801adc8:	e0bff417 	ldw	r2,-48(fp)
 801adcc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 801add0:	e0bffd17 	ldw	r2,-12(fp)
 801add4:	10800017 	ldw	r2,0(r2)
 801add8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801addc:	e0bffc17 	ldw	r2,-16(fp)
 801ade0:	10800104 	addi	r2,r2,4
 801ade4:	10800037 	ldwio	r2,0(r2)
 801ade8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801adec:	e0bffb17 	ldw	r2,-20(fp)
 801adf0:	1080c00c 	andi	r2,r2,768
 801adf4:	10009326 	beq	r2,zero,801b044 <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801adf8:	e0bffb17 	ldw	r2,-20(fp)
 801adfc:	1080400c 	andi	r2,r2,256
 801ae00:	10004826 	beq	r2,zero,801af24 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801ae04:	00800074 	movhi	r2,1
 801ae08:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801ae0c:	e0bffd17 	ldw	r2,-12(fp)
 801ae10:	10800d17 	ldw	r2,52(r2)
 801ae14:	10800044 	addi	r2,r2,1
 801ae18:	1081ffcc 	andi	r2,r2,2047
 801ae1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 801ae20:	e0bffd17 	ldw	r2,-12(fp)
 801ae24:	10800e17 	ldw	r2,56(r2)
 801ae28:	e0fffa17 	ldw	r3,-24(fp)
 801ae2c:	18802826 	beq	r3,r2,801aed0 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801ae30:	e0bffc17 	ldw	r2,-16(fp)
 801ae34:	10800037 	ldwio	r2,0(r2)
 801ae38:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801ae3c:	e0bfff17 	ldw	r2,-4(fp)
 801ae40:	10a0000c 	andi	r2,r2,32768
 801ae44:	10002426 	beq	r2,zero,801aed8 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801ae48:	e0bffd17 	ldw	r2,-12(fp)
 801ae4c:	10800d17 	ldw	r2,52(r2)
 801ae50:	e0ffff17 	ldw	r3,-4(fp)
 801ae54:	1809883a 	mov	r4,r3
 801ae58:	e0fffd17 	ldw	r3,-12(fp)
 801ae5c:	1885883a 	add	r2,r3,r2
 801ae60:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801ae64:	e0bffd17 	ldw	r2,-12(fp)
 801ae68:	10800d17 	ldw	r2,52(r2)
 801ae6c:	10800044 	addi	r2,r2,1
 801ae70:	10c1ffcc 	andi	r3,r2,2047
 801ae74:	e0bffd17 	ldw	r2,-12(fp)
 801ae78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 801ae7c:	e0bffd17 	ldw	r2,-12(fp)
 801ae80:	10800c17 	ldw	r2,48(r2)
 801ae84:	e0bff915 	stw	r2,-28(fp)
 801ae88:	00800044 	movi	r2,1
 801ae8c:	e0bff88d 	sth	r2,-30(fp)
 801ae90:	00800044 	movi	r2,1
 801ae94:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 801ae98:	d0a06643 	ldbu	r2,-32359(gp)
 801ae9c:	10803fcc 	andi	r2,r2,255
 801aea0:	10000926 	beq	r2,zero,801aec8 <altera_avalon_jtag_uart_irq+0x114>
  {
    OSFlagPost (group, flags, opt, &err);
 801aea4:	e0bff88b 	ldhu	r2,-30(fp)
 801aea8:	e0fff843 	ldbu	r3,-31(fp)
 801aeac:	e13ff604 	addi	r4,fp,-40
 801aeb0:	200f883a 	mov	r7,r4
 801aeb4:	180d883a 	mov	r6,r3
 801aeb8:	100b883a 	mov	r5,r2
 801aebc:	e13ff917 	ldw	r4,-28(fp)
 801aec0:	80143c00 	call	80143c0 <OSFlagPost>
    return err;
 801aec4:	00000106 	br	801aecc <altera_avalon_jtag_uart_irq+0x118>
  }
  return OS_ERR_PEND_ISR;
 801aec8:	0001883a 	nop
      {
 801aecc:	003fcf06 	br	801ae0c <altera_avalon_jtag_uart_irq+0x58>
          break;
 801aed0:	0001883a 	nop
 801aed4:	00000106 	br	801aedc <altera_avalon_jtag_uart_irq+0x128>
          break;
 801aed8:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801aedc:	e0bfff17 	ldw	r2,-4(fp)
 801aee0:	10bfffec 	andhi	r2,r2,65535
 801aee4:	10000f26 	beq	r2,zero,801af24 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801aee8:	e0bffd17 	ldw	r2,-12(fp)
 801aeec:	10c00817 	ldw	r3,32(r2)
 801aef0:	00bfff84 	movi	r2,-2
 801aef4:	1886703a 	and	r3,r3,r2
 801aef8:	e0bffd17 	ldw	r2,-12(fp)
 801aefc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801af00:	e0bffc17 	ldw	r2,-16(fp)
 801af04:	10800104 	addi	r2,r2,4
 801af08:	1007883a 	mov	r3,r2
 801af0c:	e0bffd17 	ldw	r2,-12(fp)
 801af10:	10800817 	ldw	r2,32(r2)
 801af14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801af18:	e0bffc17 	ldw	r2,-16(fp)
 801af1c:	10800104 	addi	r2,r2,4
 801af20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801af24:	e0bffb17 	ldw	r2,-20(fp)
 801af28:	1080800c 	andi	r2,r2,512
 801af2c:	103fab26 	beq	r2,zero,801addc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801af30:	e0bffb17 	ldw	r2,-20(fp)
 801af34:	1004d43a 	srli	r2,r2,16
 801af38:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801af3c:	00002706 	br	801afdc <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801af40:	e0bffc17 	ldw	r2,-16(fp)
 801af44:	e0fffd17 	ldw	r3,-12(fp)
 801af48:	18c01017 	ldw	r3,64(r3)
 801af4c:	e13ffd17 	ldw	r4,-12(fp)
 801af50:	20c7883a 	add	r3,r4,r3
 801af54:	18c21103 	ldbu	r3,2116(r3)
 801af58:	18c03fcc 	andi	r3,r3,255
 801af5c:	18c0201c 	xori	r3,r3,128
 801af60:	18ffe004 	addi	r3,r3,-128
 801af64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801af68:	e0bffd17 	ldw	r2,-12(fp)
 801af6c:	10801017 	ldw	r2,64(r2)
 801af70:	10800044 	addi	r2,r2,1
 801af74:	10c1ffcc 	andi	r3,r2,2047
 801af78:	e0bffd17 	ldw	r2,-12(fp)
 801af7c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 801af80:	e0bffd17 	ldw	r2,-12(fp)
 801af84:	10800c17 	ldw	r2,48(r2)
 801af88:	e0bff715 	stw	r2,-36(fp)
 801af8c:	00800084 	movi	r2,2
 801af90:	e0bff68d 	sth	r2,-38(fp)
 801af94:	00800044 	movi	r2,1
 801af98:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
 801af9c:	d0a06643 	ldbu	r2,-32359(gp)
 801afa0:	10803fcc 	andi	r2,r2,255
 801afa4:	10000926 	beq	r2,zero,801afcc <altera_avalon_jtag_uart_irq+0x218>
    OSFlagPost (group, flags, opt, &err);
 801afa8:	e0bff68b 	ldhu	r2,-38(fp)
 801afac:	e0fff643 	ldbu	r3,-39(fp)
 801afb0:	e13ff5c4 	addi	r4,fp,-41
 801afb4:	200f883a 	mov	r7,r4
 801afb8:	180d883a 	mov	r6,r3
 801afbc:	100b883a 	mov	r5,r2
 801afc0:	e13ff717 	ldw	r4,-36(fp)
 801afc4:	80143c00 	call	80143c0 <OSFlagPost>
    return err;
 801afc8:	00000106 	br	801afd0 <altera_avalon_jtag_uart_irq+0x21c>
  return OS_ERR_PEND_ISR;
 801afcc:	0001883a 	nop

        space--;
 801afd0:	e0bffe17 	ldw	r2,-8(fp)
 801afd4:	10bfffc4 	addi	r2,r2,-1
 801afd8:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 801afdc:	e0bffe17 	ldw	r2,-8(fp)
 801afe0:	10000526 	beq	r2,zero,801aff8 <altera_avalon_jtag_uart_irq+0x244>
 801afe4:	e0bffd17 	ldw	r2,-12(fp)
 801afe8:	10c01017 	ldw	r3,64(r2)
 801afec:	e0bffd17 	ldw	r2,-12(fp)
 801aff0:	10800f17 	ldw	r2,60(r2)
 801aff4:	18bfd21e 	bne	r3,r2,801af40 <altera_avalon_jtag_uart_irq+0x18c>
      }

      if (space > 0)
 801aff8:	e0bffe17 	ldw	r2,-8(fp)
 801affc:	103f7726 	beq	r2,zero,801addc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801b000:	e0bffd17 	ldw	r2,-12(fp)
 801b004:	10c00817 	ldw	r3,32(r2)
 801b008:	00bfff44 	movi	r2,-3
 801b00c:	1886703a 	and	r3,r3,r2
 801b010:	e0bffd17 	ldw	r2,-12(fp)
 801b014:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801b018:	e0bffd17 	ldw	r2,-12(fp)
 801b01c:	10800017 	ldw	r2,0(r2)
 801b020:	10800104 	addi	r2,r2,4
 801b024:	1007883a 	mov	r3,r2
 801b028:	e0bffd17 	ldw	r2,-12(fp)
 801b02c:	10800817 	ldw	r2,32(r2)
 801b030:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801b034:	e0bffc17 	ldw	r2,-16(fp)
 801b038:	10800104 	addi	r2,r2,4
 801b03c:	10800037 	ldwio	r2,0(r2)
  {
 801b040:	003f6606 	br	801addc <altera_avalon_jtag_uart_irq+0x28>
      break;
 801b044:	0001883a 	nop
      }
    }
  }
}
 801b048:	0001883a 	nop
 801b04c:	e037883a 	mov	sp,fp
 801b050:	dfc00117 	ldw	ra,4(sp)
 801b054:	df000017 	ldw	fp,0(sp)
 801b058:	dec00204 	addi	sp,sp,8
 801b05c:	f800283a 	ret

0801b060 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801b060:	defff904 	addi	sp,sp,-28
 801b064:	dfc00615 	stw	ra,24(sp)
 801b068:	df000515 	stw	fp,20(sp)
 801b06c:	df000504 	addi	fp,sp,20
 801b070:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801b074:	e0bffb17 	ldw	r2,-20(fp)
 801b078:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801b07c:	e0bfff17 	ldw	r2,-4(fp)
 801b080:	10800017 	ldw	r2,0(r2)
 801b084:	10800104 	addi	r2,r2,4
 801b088:	10800037 	ldwio	r2,0(r2)
 801b08c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801b090:	e0bffe17 	ldw	r2,-8(fp)
 801b094:	1081000c 	andi	r2,r2,1024
 801b098:	10000b26 	beq	r2,zero,801b0c8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801b09c:	e0bfff17 	ldw	r2,-4(fp)
 801b0a0:	10800017 	ldw	r2,0(r2)
 801b0a4:	10800104 	addi	r2,r2,4
 801b0a8:	1007883a 	mov	r3,r2
 801b0ac:	e0bfff17 	ldw	r2,-4(fp)
 801b0b0:	10800817 	ldw	r2,32(r2)
 801b0b4:	10810014 	ori	r2,r2,1024
 801b0b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801b0bc:	e0bfff17 	ldw	r2,-4(fp)
 801b0c0:	10000915 	stw	zero,36(r2)
 801b0c4:	00002306 	br	801b154 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801b0c8:	e0bfff17 	ldw	r2,-4(fp)
 801b0cc:	10c00917 	ldw	r3,36(r2)
 801b0d0:	00a00034 	movhi	r2,32768
 801b0d4:	10bfff04 	addi	r2,r2,-4
 801b0d8:	10c01e36 	bltu	r2,r3,801b154 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 801b0dc:	e0bfff17 	ldw	r2,-4(fp)
 801b0e0:	10800917 	ldw	r2,36(r2)
 801b0e4:	10c00044 	addi	r3,r2,1
 801b0e8:	e0bfff17 	ldw	r2,-4(fp)
 801b0ec:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 801b0f0:	e0bfff17 	ldw	r2,-4(fp)
 801b0f4:	10c00917 	ldw	r3,36(r2)
 801b0f8:	e0bfff17 	ldw	r2,-4(fp)
 801b0fc:	10800117 	ldw	r2,4(r2)
 801b100:	18801436 	bltu	r3,r2,801b154 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 801b104:	e0bfff17 	ldw	r2,-4(fp)
 801b108:	10800c17 	ldw	r2,48(r2)
 801b10c:	e0bffd15 	stw	r2,-12(fp)
 801b110:	00800104 	movi	r2,4
 801b114:	e0bffc8d 	sth	r2,-14(fp)
 801b118:	00800044 	movi	r2,1
 801b11c:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
 801b120:	d0a06643 	ldbu	r2,-32359(gp)
 801b124:	10803fcc 	andi	r2,r2,255
 801b128:	10000926 	beq	r2,zero,801b150 <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
 801b12c:	e0bffc8b 	ldhu	r2,-14(fp)
 801b130:	e0fffc43 	ldbu	r3,-15(fp)
 801b134:	e13ffc04 	addi	r4,fp,-16
 801b138:	200f883a 	mov	r7,r4
 801b13c:	180d883a 	mov	r6,r3
 801b140:	100b883a 	mov	r5,r2
 801b144:	e13ffd17 	ldw	r4,-12(fp)
 801b148:	80143c00 	call	80143c0 <OSFlagPost>
    return err;
 801b14c:	00000106 	br	801b154 <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
 801b150:	0001883a 	nop
 801b154:	d0a0b317 	ldw	r2,-32052(gp)
    }
  }

  return alt_ticks_per_second();
}
 801b158:	e037883a 	mov	sp,fp
 801b15c:	dfc00117 	ldw	ra,4(sp)
 801b160:	df000017 	ldw	fp,0(sp)
 801b164:	dec00204 	addi	sp,sp,8
 801b168:	f800283a 	ret

0801b16c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801b16c:	defffd04 	addi	sp,sp,-12
 801b170:	df000215 	stw	fp,8(sp)
 801b174:	df000204 	addi	fp,sp,8
 801b178:	e13fff15 	stw	r4,-4(fp)
 801b17c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801b180:	00000506 	br	801b198 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801b184:	e0bffe17 	ldw	r2,-8(fp)
 801b188:	1090000c 	andi	r2,r2,16384
 801b18c:	10000226 	beq	r2,zero,801b198 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801b190:	00bffd44 	movi	r2,-11
 801b194:	00000b06 	br	801b1c4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801b198:	e0bfff17 	ldw	r2,-4(fp)
 801b19c:	10c01017 	ldw	r3,64(r2)
 801b1a0:	e0bfff17 	ldw	r2,-4(fp)
 801b1a4:	10800f17 	ldw	r2,60(r2)
 801b1a8:	18800526 	beq	r3,r2,801b1c0 <altera_avalon_jtag_uart_close+0x54>
 801b1ac:	e0bfff17 	ldw	r2,-4(fp)
 801b1b0:	10c00917 	ldw	r3,36(r2)
 801b1b4:	e0bfff17 	ldw	r2,-4(fp)
 801b1b8:	10800117 	ldw	r2,4(r2)
 801b1bc:	18bff136 	bltu	r3,r2,801b184 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 801b1c0:	0005883a 	mov	r2,zero
}
 801b1c4:	e037883a 	mov	sp,fp
 801b1c8:	df000017 	ldw	fp,0(sp)
 801b1cc:	dec00104 	addi	sp,sp,4
 801b1d0:	f800283a 	ret

0801b1d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801b1d4:	defffa04 	addi	sp,sp,-24
 801b1d8:	df000515 	stw	fp,20(sp)
 801b1dc:	df000504 	addi	fp,sp,20
 801b1e0:	e13ffd15 	stw	r4,-12(fp)
 801b1e4:	e17ffc15 	stw	r5,-16(fp)
 801b1e8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 801b1ec:	00bff9c4 	movi	r2,-25
 801b1f0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 801b1f4:	e0bffc17 	ldw	r2,-16(fp)
 801b1f8:	109a8060 	cmpeqi	r2,r2,27137
 801b1fc:	1000041e 	bne	r2,zero,801b210 <altera_avalon_jtag_uart_ioctl+0x3c>
 801b200:	e0bffc17 	ldw	r2,-16(fp)
 801b204:	109a80a0 	cmpeqi	r2,r2,27138
 801b208:	1000181e 	bne	r2,zero,801b26c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801b20c:	00002906 	br	801b2b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 801b210:	e0bffd17 	ldw	r2,-12(fp)
 801b214:	10c00117 	ldw	r3,4(r2)
 801b218:	00a00034 	movhi	r2,32768
 801b21c:	10bfffc4 	addi	r2,r2,-1
 801b220:	18802126 	beq	r3,r2,801b2a8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 801b224:	e0bffb17 	ldw	r2,-20(fp)
 801b228:	10800017 	ldw	r2,0(r2)
 801b22c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801b230:	e0bffe17 	ldw	r2,-8(fp)
 801b234:	10800090 	cmplti	r2,r2,2
 801b238:	1000061e 	bne	r2,zero,801b254 <altera_avalon_jtag_uart_ioctl+0x80>
 801b23c:	e0fffe17 	ldw	r3,-8(fp)
 801b240:	00a00034 	movhi	r2,32768
 801b244:	10bfffc4 	addi	r2,r2,-1
 801b248:	18800226 	beq	r3,r2,801b254 <altera_avalon_jtag_uart_ioctl+0x80>
 801b24c:	e0bffe17 	ldw	r2,-8(fp)
 801b250:	00000206 	br	801b25c <altera_avalon_jtag_uart_ioctl+0x88>
 801b254:	00a00034 	movhi	r2,32768
 801b258:	10bfff84 	addi	r2,r2,-2
 801b25c:	e0fffd17 	ldw	r3,-12(fp)
 801b260:	18800115 	stw	r2,4(r3)
      rc = 0;
 801b264:	e03fff15 	stw	zero,-4(fp)
    break;
 801b268:	00000f06 	br	801b2a8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 801b26c:	e0bffd17 	ldw	r2,-12(fp)
 801b270:	10c00117 	ldw	r3,4(r2)
 801b274:	00a00034 	movhi	r2,32768
 801b278:	10bfffc4 	addi	r2,r2,-1
 801b27c:	18800c26 	beq	r3,r2,801b2b0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801b280:	e0bffd17 	ldw	r2,-12(fp)
 801b284:	10c00917 	ldw	r3,36(r2)
 801b288:	e0bffd17 	ldw	r2,-12(fp)
 801b28c:	10800117 	ldw	r2,4(r2)
 801b290:	1885803a 	cmpltu	r2,r3,r2
 801b294:	10c03fcc 	andi	r3,r2,255
 801b298:	e0bffb17 	ldw	r2,-20(fp)
 801b29c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801b2a0:	e03fff15 	stw	zero,-4(fp)
    break;
 801b2a4:	00000206 	br	801b2b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 801b2a8:	0001883a 	nop
 801b2ac:	00000106 	br	801b2b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 801b2b0:	0001883a 	nop
  }

  return rc;
 801b2b4:	e0bfff17 	ldw	r2,-4(fp)
}
 801b2b8:	e037883a 	mov	sp,fp
 801b2bc:	df000017 	ldw	fp,0(sp)
 801b2c0:	dec00104 	addi	sp,sp,4
 801b2c4:	f800283a 	ret

0801b2c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801b2c8:	deffec04 	addi	sp,sp,-80
 801b2cc:	dfc01315 	stw	ra,76(sp)
 801b2d0:	df001215 	stw	fp,72(sp)
 801b2d4:	df001204 	addi	fp,sp,72
 801b2d8:	e13ff215 	stw	r4,-56(fp)
 801b2dc:	e17ff115 	stw	r5,-60(fp)
 801b2e0:	e1bff015 	stw	r6,-64(fp)
 801b2e4:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
 801b2e8:	e0bff117 	ldw	r2,-60(fp)
 801b2ec:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 801b2f0:	e0bff217 	ldw	r2,-56(fp)
 801b2f4:	10800a17 	ldw	r2,40(r2)
 801b2f8:	e0bffa15 	stw	r2,-24(fp)
 801b2fc:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 801b300:	e0bff98b 	ldhu	r2,-26(fp)
 801b304:	e0fff3c4 	addi	r3,fp,-49
 801b308:	180d883a 	mov	r6,r3
 801b30c:	100b883a 	mov	r5,r2
 801b310:	e13ffa17 	ldw	r4,-24(fp)
 801b314:	80168c40 	call	80168c4 <OSSemPend>

  while (space > 0)
 801b318:	00006306 	br	801b4a8 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801b31c:	e0bff217 	ldw	r2,-56(fp)
 801b320:	10800d17 	ldw	r2,52(r2)
 801b324:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 801b328:	e0bff217 	ldw	r2,-56(fp)
 801b32c:	10800e17 	ldw	r2,56(r2)
 801b330:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 801b334:	e0fffd17 	ldw	r3,-12(fp)
 801b338:	e0bffc17 	ldw	r2,-16(fp)
 801b33c:	18800536 	bltu	r3,r2,801b354 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 801b340:	e0fffd17 	ldw	r3,-12(fp)
 801b344:	e0bffc17 	ldw	r2,-16(fp)
 801b348:	1885c83a 	sub	r2,r3,r2
 801b34c:	e0bffe15 	stw	r2,-8(fp)
 801b350:	00000406 	br	801b364 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801b354:	00c20004 	movi	r3,2048
 801b358:	e0bffc17 	ldw	r2,-16(fp)
 801b35c:	1885c83a 	sub	r2,r3,r2
 801b360:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 801b364:	e0bffe17 	ldw	r2,-8(fp)
 801b368:	10001e26 	beq	r2,zero,801b3e4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 801b36c:	e0fff017 	ldw	r3,-64(fp)
 801b370:	e0bffe17 	ldw	r2,-8(fp)
 801b374:	1880022e 	bgeu	r3,r2,801b380 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 801b378:	e0bff017 	ldw	r2,-64(fp)
 801b37c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801b380:	e0bff217 	ldw	r2,-56(fp)
 801b384:	10c01104 	addi	r3,r2,68
 801b388:	e0bffc17 	ldw	r2,-16(fp)
 801b38c:	1885883a 	add	r2,r3,r2
 801b390:	e1bffe17 	ldw	r6,-8(fp)
 801b394:	100b883a 	mov	r5,r2
 801b398:	e13fff17 	ldw	r4,-4(fp)
 801b39c:	8002ea40 	call	8002ea4 <memcpy>
      ptr   += n;
 801b3a0:	e0ffff17 	ldw	r3,-4(fp)
 801b3a4:	e0bffe17 	ldw	r2,-8(fp)
 801b3a8:	1885883a 	add	r2,r3,r2
 801b3ac:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 801b3b0:	e0fff017 	ldw	r3,-64(fp)
 801b3b4:	e0bffe17 	ldw	r2,-8(fp)
 801b3b8:	1885c83a 	sub	r2,r3,r2
 801b3bc:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801b3c0:	e0fffc17 	ldw	r3,-16(fp)
 801b3c4:	e0bffe17 	ldw	r2,-8(fp)
 801b3c8:	1885883a 	add	r2,r3,r2
 801b3cc:	10c1ffcc 	andi	r3,r2,2047
 801b3d0:	e0bff217 	ldw	r2,-56(fp)
 801b3d4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 801b3d8:	e0bff017 	ldw	r2,-64(fp)
 801b3dc:	00bfcf16 	blt	zero,r2,801b31c <altera_avalon_jtag_uart_read+0x54>
 801b3e0:	00000106 	br	801b3e8 <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
 801b3e4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 801b3e8:	e0ffff17 	ldw	r3,-4(fp)
 801b3ec:	e0bff117 	ldw	r2,-60(fp)
 801b3f0:	1880301e 	bne	r3,r2,801b4b4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801b3f4:	e0bfef17 	ldw	r2,-68(fp)
 801b3f8:	1090000c 	andi	r2,r2,16384
 801b3fc:	10002f1e 	bne	r2,zero,801b4bc <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 801b400:	d0a06643 	ldbu	r2,-32359(gp)
 801b404:	10803fcc 	andi	r2,r2,255
 801b408:	10800058 	cmpnei	r2,r2,1
 801b40c:	1000161e 	bne	r2,zero,801b468 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 801b410:	e0bff217 	ldw	r2,-56(fp)
 801b414:	10800c17 	ldw	r2,48(r2)
 801b418:	e0bff815 	stw	r2,-32(fp)
 801b41c:	00800144 	movi	r2,5
 801b420:	e0bff78d 	sth	r2,-34(fp)
 801b424:	00bfe0c4 	movi	r2,-125
 801b428:	e0bff745 	stb	r2,-35(fp)
 801b42c:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
 801b430:	d0a06643 	ldbu	r2,-32359(gp)
 801b434:	10803fcc 	andi	r2,r2,255
 801b438:	10001626 	beq	r2,zero,801b494 <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
 801b43c:	e0fff78b 	ldhu	r3,-34(fp)
 801b440:	e13ff743 	ldbu	r4,-35(fp)
 801b444:	e17ff68b 	ldhu	r5,-38(fp)
 801b448:	e0bff384 	addi	r2,fp,-50
 801b44c:	d8800015 	stw	r2,0(sp)
 801b450:	280f883a 	mov	r7,r5
 801b454:	200d883a 	mov	r6,r4
 801b458:	180b883a 	mov	r5,r3
 801b45c:	e13ff817 	ldw	r4,-32(fp)
 801b460:	8013d5c0 	call	8013d5c <OSFlagPend>
    return err;
 801b464:	00000c06 	br	801b498 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801b468:	0001883a 	nop
 801b46c:	e0bff217 	ldw	r2,-56(fp)
 801b470:	10800d17 	ldw	r2,52(r2)
 801b474:	e0fffd17 	ldw	r3,-12(fp)
 801b478:	1880071e 	bne	r3,r2,801b498 <altera_avalon_jtag_uart_read+0x1d0>
 801b47c:	e0bff217 	ldw	r2,-56(fp)
 801b480:	10c00917 	ldw	r3,36(r2)
 801b484:	e0bff217 	ldw	r2,-56(fp)
 801b488:	10800117 	ldw	r2,4(r2)
 801b48c:	18bff736 	bltu	r3,r2,801b46c <altera_avalon_jtag_uart_read+0x1a4>
 801b490:	00000106 	br	801b498 <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
 801b494:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801b498:	e0bff217 	ldw	r2,-56(fp)
 801b49c:	10800d17 	ldw	r2,52(r2)
 801b4a0:	e0fffd17 	ldw	r3,-12(fp)
 801b4a4:	18800726 	beq	r3,r2,801b4c4 <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
 801b4a8:	e0bff017 	ldw	r2,-64(fp)
 801b4ac:	00bf9b16 	blt	zero,r2,801b31c <altera_avalon_jtag_uart_read+0x54>
 801b4b0:	00000506 	br	801b4c8 <altera_avalon_jtag_uart_read+0x200>
      break;
 801b4b4:	0001883a 	nop
 801b4b8:	00000306 	br	801b4c8 <altera_avalon_jtag_uart_read+0x200>
      break;
 801b4bc:	0001883a 	nop
 801b4c0:	00000106 	br	801b4c8 <altera_avalon_jtag_uart_read+0x200>
      break;
 801b4c4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 801b4c8:	e0bff217 	ldw	r2,-56(fp)
 801b4cc:	10800a17 	ldw	r2,40(r2)
 801b4d0:	1009883a 	mov	r4,r2
 801b4d4:	8016c4c0 	call	8016c4c <OSSemPost>

  if (ptr != buffer)
 801b4d8:	e0ffff17 	ldw	r3,-4(fp)
 801b4dc:	e0bff117 	ldw	r2,-60(fp)
 801b4e0:	18801926 	beq	r3,r2,801b548 <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
 801b4e4:	0005303a 	rdctl	r2,status
 801b4e8:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b4ec:	e0fff417 	ldw	r3,-48(fp)
 801b4f0:	00bfff84 	movi	r2,-2
 801b4f4:	1884703a 	and	r2,r3,r2
 801b4f8:	1001703a 	wrctl	status,r2
  return context;
 801b4fc:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801b500:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801b504:	e0bff217 	ldw	r2,-56(fp)
 801b508:	10800817 	ldw	r2,32(r2)
 801b50c:	10c00054 	ori	r3,r2,1
 801b510:	e0bff217 	ldw	r2,-56(fp)
 801b514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801b518:	e0bff217 	ldw	r2,-56(fp)
 801b51c:	10800017 	ldw	r2,0(r2)
 801b520:	10800104 	addi	r2,r2,4
 801b524:	1007883a 	mov	r3,r2
 801b528:	e0bff217 	ldw	r2,-56(fp)
 801b52c:	10800817 	ldw	r2,32(r2)
 801b530:	18800035 	stwio	r2,0(r3)
 801b534:	e0bffb17 	ldw	r2,-20(fp)
 801b538:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 801b53c:	e0bff517 	ldw	r2,-44(fp)
 801b540:	1001703a 	wrctl	status,r2
}
 801b544:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801b548:	e0ffff17 	ldw	r3,-4(fp)
 801b54c:	e0bff117 	ldw	r2,-60(fp)
 801b550:	18800426 	beq	r3,r2,801b564 <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
 801b554:	e0ffff17 	ldw	r3,-4(fp)
 801b558:	e0bff117 	ldw	r2,-60(fp)
 801b55c:	1885c83a 	sub	r2,r3,r2
 801b560:	00000606 	br	801b57c <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
 801b564:	e0bfef17 	ldw	r2,-68(fp)
 801b568:	1090000c 	andi	r2,r2,16384
 801b56c:	10000226 	beq	r2,zero,801b578 <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
 801b570:	00bffd44 	movi	r2,-11
 801b574:	00000106 	br	801b57c <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
 801b578:	00bffec4 	movi	r2,-5
}
 801b57c:	e037883a 	mov	sp,fp
 801b580:	dfc00117 	ldw	ra,4(sp)
 801b584:	df000017 	ldw	fp,0(sp)
 801b588:	dec00204 	addi	sp,sp,8
 801b58c:	f800283a 	ret

0801b590 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801b590:	deffed04 	addi	sp,sp,-76
 801b594:	dfc01215 	stw	ra,72(sp)
 801b598:	df001115 	stw	fp,68(sp)
 801b59c:	df001104 	addi	fp,sp,68
 801b5a0:	e13ff315 	stw	r4,-52(fp)
 801b5a4:	e17ff215 	stw	r5,-56(fp)
 801b5a8:	e1bff115 	stw	r6,-60(fp)
 801b5ac:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801b5b0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801b5b4:	e0bff217 	ldw	r2,-56(fp)
 801b5b8:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 801b5bc:	e0bff317 	ldw	r2,-52(fp)
 801b5c0:	10800b17 	ldw	r2,44(r2)
 801b5c4:	e0bffa15 	stw	r2,-24(fp)
 801b5c8:	e03ff98d 	sth	zero,-26(fp)
 801b5cc:	e0bff98b 	ldhu	r2,-26(fp)
 801b5d0:	e0fff404 	addi	r3,fp,-48
 801b5d4:	180d883a 	mov	r6,r3
 801b5d8:	100b883a 	mov	r5,r2
 801b5dc:	e13ffa17 	ldw	r4,-24(fp)
 801b5e0:	80168c40 	call	80168c4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801b5e4:	00003706 	br	801b6c4 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801b5e8:	e0bff317 	ldw	r2,-52(fp)
 801b5ec:	10800f17 	ldw	r2,60(r2)
 801b5f0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 801b5f4:	e0bff317 	ldw	r2,-52(fp)
 801b5f8:	10801017 	ldw	r2,64(r2)
 801b5fc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 801b600:	e0fffc17 	ldw	r3,-16(fp)
 801b604:	e0bfff17 	ldw	r2,-4(fp)
 801b608:	1880062e 	bgeu	r3,r2,801b624 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 801b60c:	e0ffff17 	ldw	r3,-4(fp)
 801b610:	e0bffc17 	ldw	r2,-16(fp)
 801b614:	1885c83a 	sub	r2,r3,r2
 801b618:	10bfffc4 	addi	r2,r2,-1
 801b61c:	e0bffe15 	stw	r2,-8(fp)
 801b620:	00000b06 	br	801b650 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 801b624:	e0bfff17 	ldw	r2,-4(fp)
 801b628:	10000526 	beq	r2,zero,801b640 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801b62c:	00c20004 	movi	r3,2048
 801b630:	e0bffc17 	ldw	r2,-16(fp)
 801b634:	1885c83a 	sub	r2,r3,r2
 801b638:	e0bffe15 	stw	r2,-8(fp)
 801b63c:	00000406 	br	801b650 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801b640:	00c1ffc4 	movi	r3,2047
 801b644:	e0bffc17 	ldw	r2,-16(fp)
 801b648:	1885c83a 	sub	r2,r3,r2
 801b64c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 801b650:	e0bffe17 	ldw	r2,-8(fp)
 801b654:	10001e26 	beq	r2,zero,801b6d0 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 801b658:	e0fff117 	ldw	r3,-60(fp)
 801b65c:	e0bffe17 	ldw	r2,-8(fp)
 801b660:	1880022e 	bgeu	r3,r2,801b66c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 801b664:	e0bff117 	ldw	r2,-60(fp)
 801b668:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801b66c:	e0bff317 	ldw	r2,-52(fp)
 801b670:	10c21104 	addi	r3,r2,2116
 801b674:	e0bffc17 	ldw	r2,-16(fp)
 801b678:	1885883a 	add	r2,r3,r2
 801b67c:	e1bffe17 	ldw	r6,-8(fp)
 801b680:	e17ff217 	ldw	r5,-56(fp)
 801b684:	1009883a 	mov	r4,r2
 801b688:	8002ea40 	call	8002ea4 <memcpy>
      ptr   += n;
 801b68c:	e0fff217 	ldw	r3,-56(fp)
 801b690:	e0bffe17 	ldw	r2,-8(fp)
 801b694:	1885883a 	add	r2,r3,r2
 801b698:	e0bff215 	stw	r2,-56(fp)
      count -= n;
 801b69c:	e0fff117 	ldw	r3,-60(fp)
 801b6a0:	e0bffe17 	ldw	r2,-8(fp)
 801b6a4:	1885c83a 	sub	r2,r3,r2
 801b6a8:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801b6ac:	e0fffc17 	ldw	r3,-16(fp)
 801b6b0:	e0bffe17 	ldw	r2,-8(fp)
 801b6b4:	1885883a 	add	r2,r3,r2
 801b6b8:	10c1ffcc 	andi	r3,r2,2047
 801b6bc:	e0bff317 	ldw	r2,-52(fp)
 801b6c0:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
 801b6c4:	e0bff117 	ldw	r2,-60(fp)
 801b6c8:	00bfc716 	blt	zero,r2,801b5e8 <altera_avalon_jtag_uart_write+0x58>
 801b6cc:	00000106 	br	801b6d4 <altera_avalon_jtag_uart_write+0x144>
        break;
 801b6d0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 801b6d4:	0005303a 	rdctl	r2,status
 801b6d8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b6dc:	e0fff717 	ldw	r3,-36(fp)
 801b6e0:	00bfff84 	movi	r2,-2
 801b6e4:	1884703a 	and	r2,r3,r2
 801b6e8:	1001703a 	wrctl	status,r2
  return context;
 801b6ec:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801b6f0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801b6f4:	e0bff317 	ldw	r2,-52(fp)
 801b6f8:	10800817 	ldw	r2,32(r2)
 801b6fc:	10c00094 	ori	r3,r2,2
 801b700:	e0bff317 	ldw	r2,-52(fp)
 801b704:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801b708:	e0bff317 	ldw	r2,-52(fp)
 801b70c:	10800017 	ldw	r2,0(r2)
 801b710:	10800104 	addi	r2,r2,4
 801b714:	1007883a 	mov	r3,r2
 801b718:	e0bff317 	ldw	r2,-52(fp)
 801b71c:	10800817 	ldw	r2,32(r2)
 801b720:	18800035 	stwio	r2,0(r3)
 801b724:	e0bffb17 	ldw	r2,-20(fp)
 801b728:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 801b72c:	e0bff817 	ldw	r2,-32(fp)
 801b730:	1001703a 	wrctl	status,r2
}
 801b734:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801b738:	e0bff117 	ldw	r2,-60(fp)
 801b73c:	00802c0e 	bge	zero,r2,801b7f0 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
 801b740:	e0bff017 	ldw	r2,-64(fp)
 801b744:	1090000c 	andi	r2,r2,16384
 801b748:	10002c1e 	bne	r2,zero,801b7fc <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 801b74c:	d0a06643 	ldbu	r2,-32359(gp)
 801b750:	10803fcc 	andi	r2,r2,255
 801b754:	10800058 	cmpnei	r2,r2,1
 801b758:	1000161e 	bne	r2,zero,801b7b4 <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 801b75c:	e0bff317 	ldw	r2,-52(fp)
 801b760:	10800c17 	ldw	r2,48(r2)
 801b764:	e0bff615 	stw	r2,-40(fp)
 801b768:	00800184 	movi	r2,6
 801b76c:	e0bff58d 	sth	r2,-42(fp)
 801b770:	00bfe0c4 	movi	r2,-125
 801b774:	e0bff545 	stb	r2,-43(fp)
 801b778:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
 801b77c:	d0a06643 	ldbu	r2,-32359(gp)
 801b780:	10803fcc 	andi	r2,r2,255
 801b784:	10001626 	beq	r2,zero,801b7e0 <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
 801b788:	e0fff58b 	ldhu	r3,-42(fp)
 801b78c:	e13ff543 	ldbu	r4,-43(fp)
 801b790:	e17ff48b 	ldhu	r5,-46(fp)
 801b794:	e0bff444 	addi	r2,fp,-47
 801b798:	d8800015 	stw	r2,0(sp)
 801b79c:	280f883a 	mov	r7,r5
 801b7a0:	200d883a 	mov	r6,r4
 801b7a4:	180b883a 	mov	r5,r3
 801b7a8:	e13ff617 	ldw	r4,-40(fp)
 801b7ac:	8013d5c0 	call	8013d5c <OSFlagPend>
    return err;
 801b7b0:	00000c06 	br	801b7e4 <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801b7b4:	0001883a 	nop
 801b7b8:	e0bff317 	ldw	r2,-52(fp)
 801b7bc:	10801017 	ldw	r2,64(r2)
 801b7c0:	e0ffff17 	ldw	r3,-4(fp)
 801b7c4:	1880071e 	bne	r3,r2,801b7e4 <altera_avalon_jtag_uart_write+0x254>
 801b7c8:	e0bff317 	ldw	r2,-52(fp)
 801b7cc:	10c00917 	ldw	r3,36(r2)
 801b7d0:	e0bff317 	ldw	r2,-52(fp)
 801b7d4:	10800117 	ldw	r2,4(r2)
 801b7d8:	18bff736 	bltu	r3,r2,801b7b8 <altera_avalon_jtag_uart_write+0x228>
 801b7dc:	00000106 	br	801b7e4 <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
 801b7e0:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801b7e4:	e0bff317 	ldw	r2,-52(fp)
 801b7e8:	10800917 	ldw	r2,36(r2)
 801b7ec:	1000051e 	bne	r2,zero,801b804 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 801b7f0:	e0bff117 	ldw	r2,-60(fp)
 801b7f4:	00bfb316 	blt	zero,r2,801b6c4 <altera_avalon_jtag_uart_write+0x134>
 801b7f8:	00000306 	br	801b808 <altera_avalon_jtag_uart_write+0x278>
        break;
 801b7fc:	0001883a 	nop
 801b800:	00000106 	br	801b808 <altera_avalon_jtag_uart_write+0x278>
         break;
 801b804:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 801b808:	e0bff317 	ldw	r2,-52(fp)
 801b80c:	10800b17 	ldw	r2,44(r2)
 801b810:	1009883a 	mov	r4,r2
 801b814:	8016c4c0 	call	8016c4c <OSSemPost>

  if (ptr != start)
 801b818:	e0fff217 	ldw	r3,-56(fp)
 801b81c:	e0bffd17 	ldw	r2,-12(fp)
 801b820:	18800426 	beq	r3,r2,801b834 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
 801b824:	e0fff217 	ldw	r3,-56(fp)
 801b828:	e0bffd17 	ldw	r2,-12(fp)
 801b82c:	1885c83a 	sub	r2,r3,r2
 801b830:	00000606 	br	801b84c <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
 801b834:	e0bff017 	ldw	r2,-64(fp)
 801b838:	1090000c 	andi	r2,r2,16384
 801b83c:	10000226 	beq	r2,zero,801b848 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
 801b840:	00bffd44 	movi	r2,-11
 801b844:	00000106 	br	801b84c <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801b848:	00bffec4 	movi	r2,-5
}
 801b84c:	e037883a 	mov	sp,fp
 801b850:	dfc00117 	ldw	ra,4(sp)
 801b854:	df000017 	ldw	fp,0(sp)
 801b858:	dec00204 	addi	sp,sp,8
 801b85c:	f800283a 	ret

0801b860 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801b860:	defffa04 	addi	sp,sp,-24
 801b864:	dfc00515 	stw	ra,20(sp)
 801b868:	df000415 	stw	fp,16(sp)
 801b86c:	df000404 	addi	fp,sp,16
 801b870:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801b874:	0007883a 	mov	r3,zero
 801b878:	e0bffc17 	ldw	r2,-16(fp)
 801b87c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801b880:	e0bffc17 	ldw	r2,-16(fp)
 801b884:	10800104 	addi	r2,r2,4
 801b888:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 801b88c:	0005303a 	rdctl	r2,status
 801b890:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b894:	e0fffd17 	ldw	r3,-12(fp)
 801b898:	00bfff84 	movi	r2,-2
 801b89c:	1884703a 	and	r2,r3,r2
 801b8a0:	1001703a 	wrctl	status,r2
  return context;
 801b8a4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801b8a8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 801b8ac:	803b9940 	call	803b994 <alt_tick>
 801b8b0:	e0bfff17 	ldw	r2,-4(fp)
 801b8b4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 801b8b8:	e0bffe17 	ldw	r2,-8(fp)
 801b8bc:	1001703a 	wrctl	status,r2
}
 801b8c0:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 801b8c4:	0001883a 	nop
 801b8c8:	e037883a 	mov	sp,fp
 801b8cc:	dfc00117 	ldw	ra,4(sp)
 801b8d0:	df000017 	ldw	fp,0(sp)
 801b8d4:	dec00204 	addi	sp,sp,8
 801b8d8:	f800283a 	ret

0801b8dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801b8dc:	defff804 	addi	sp,sp,-32
 801b8e0:	dfc00715 	stw	ra,28(sp)
 801b8e4:	df000615 	stw	fp,24(sp)
 801b8e8:	df000604 	addi	fp,sp,24
 801b8ec:	e13ffe15 	stw	r4,-8(fp)
 801b8f0:	e17ffd15 	stw	r5,-12(fp)
 801b8f4:	e1bffc15 	stw	r6,-16(fp)
 801b8f8:	e1fffb15 	stw	r7,-20(fp)
 801b8fc:	e0bffb17 	ldw	r2,-20(fp)
 801b900:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801b904:	d0a0b317 	ldw	r2,-32052(gp)
 801b908:	1000031e 	bne	r2,zero,801b918 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 801b90c:	e0bfff17 	ldw	r2,-4(fp)
 801b910:	d0a0b315 	stw	r2,-32052(gp)
    return 0;
 801b914:	00000106 	br	801b91c <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 801b918:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801b91c:	e0bffe17 	ldw	r2,-8(fp)
 801b920:	10800104 	addi	r2,r2,4
 801b924:	00c001c4 	movi	r3,7
 801b928:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801b92c:	d8000015 	stw	zero,0(sp)
 801b930:	e1fffe17 	ldw	r7,-8(fp)
 801b934:	018200b4 	movhi	r6,2050
 801b938:	31ae1804 	addi	r6,r6,-18336
 801b93c:	e17ffc17 	ldw	r5,-16(fp)
 801b940:	e13ffd17 	ldw	r4,-12(fp)
 801b944:	803aec40 	call	803aec4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801b948:	0001883a 	nop
 801b94c:	e037883a 	mov	sp,fp
 801b950:	dfc00117 	ldw	ra,4(sp)
 801b954:	df000017 	ldw	fp,0(sp)
 801b958:	dec00204 	addi	sp,sp,8
 801b95c:	f800283a 	ret

0801b960 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 801b960:	defffb04 	addi	sp,sp,-20
 801b964:	df000115 	stw	fp,4(sp)
 801b968:	df000104 	addi	fp,sp,4
 801b96c:	e13fff15 	stw	r4,-4(fp)
 801b970:	e1400115 	stw	r5,4(fp)
 801b974:	e1800215 	stw	r6,8(fp)
 801b978:	e1c00315 	stw	r7,12(fp)
 801b97c:	0001883a 	nop
 801b980:	e037883a 	mov	sp,fp
 801b984:	df000017 	ldw	fp,0(sp)
 801b988:	dec00404 	addi	sp,sp,16
 801b98c:	f800283a 	ret

0801b990 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_msgdma,
                                        alt_32 rx_msgdma,
                                        alt_32 cfgflags) {
 801b990:	defffb04 	addi	sp,sp,-20
 801b994:	df000415 	stw	fp,16(sp)
 801b998:	df000404 	addi	fp,sp,16
 801b99c:	e13fff15 	stw	r4,-4(fp)
 801b9a0:	e17ffe15 	stw	r5,-8(fp)
 801b9a4:	e1bffd15 	stw	r6,-12(fp)
 801b9a8:	e1fffc15 	stw	r7,-16(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 801b9ac:	e0fffe17 	ldw	r3,-8(fp)
 801b9b0:	e0bfff17 	ldw	r2,-4(fp)
 801b9b4:	10c00015 	stw	r3,0(r2)
        mi->tx_msgdma = (alt_msgdma_dev *)tx_msgdma;
 801b9b8:	e0fffd17 	ldw	r3,-12(fp)
 801b9bc:	e0bfff17 	ldw	r2,-4(fp)
 801b9c0:	10c00115 	stw	r3,4(r2)
        mi->rx_msgdma = (alt_msgdma_dev *)rx_msgdma;
 801b9c4:	e0fffc17 	ldw	r3,-16(fp)
 801b9c8:	e0bfff17 	ldw	r2,-4(fp)
 801b9cc:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 801b9d0:	e0c00117 	ldw	r3,4(fp)
 801b9d4:	e0bfff17 	ldw	r2,-4(fp)
 801b9d8:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 801b9dc:	0005883a 	mov	r2,zero
}
 801b9e0:	e037883a 	mov	sp,fp
 801b9e4:	df000017 	ldw	fp,0(sp)
 801b9e8:	dec00104 	addi	sp,sp,4
 801b9ec:	f800283a 	ret

0801b9f0 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit MSGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_msgdma_standard_descriptor *txDesc)   
{ 
 801b9f0:	defffa04 	addi	sp,sp,-24
 801b9f4:	dfc00515 	stw	ra,20(sp)
 801b9f8:	df000415 	stw	fp,16(sp)
 801b9fc:	df000404 	addi	fp,sp,16
 801ba00:	e13ffd15 	stw	r4,-12(fp)
 801ba04:	e17ffc15 	stw	r5,-16(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 801ba08:	e03ffec5 	stb	zero,-5(fp)
  
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 801ba0c:	e03fff15 	stw	zero,-4(fp)
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
 801ba10:	00000b06 	br	801ba40 <tse_mac_sTxWrite+0x50>
           ALTERA_MSGDMA_CSR_BUSY_MASK) ) {
           if(timeout++ == ALTERA_TSE_MSGDMA_BUSY_TIME_OUT_CNT) {
 801ba14:	e0ffff17 	ldw	r3,-4(fp)
 801ba18:	18800044 	addi	r2,r3,1
 801ba1c:	e0bfff15 	stw	r2,-4(fp)
 801ba20:	008003f4 	movhi	r2,15
 801ba24:	10909004 	addi	r2,r2,16960
 801ba28:	1880051e 	bne	r3,r2,801ba40 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX MSGDMA Timeout\n");
 801ba2c:	01020174 	movhi	r4,2053
 801ba30:	213fc804 	addi	r4,r4,-224
 801ba34:	80033800 	call	8003380 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 801ba38:	00bffa84 	movi	r2,-22
 801ba3c:	00001906 	br	801baa4 <tse_mac_sTxWrite+0xb4>
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
 801ba40:	e0bffd17 	ldw	r2,-12(fp)
 801ba44:	10800117 	ldw	r2,4(r2)
 801ba48:	10800317 	ldw	r2,12(r2)
 801ba4c:	10800037 	ldwio	r2,0(r2)
 801ba50:	1080004c 	andi	r2,r2,1
 801ba54:	103fef1e 	bne	r2,zero,801ba14 <tse_mac_sTxWrite+0x24>
           }
  }
  
  // Start MSGDMA (blocking call)
  alt_dcache_flush(txDesc,sizeof(alt_msgdma_standard_descriptor));
 801ba58:	01400404 	movi	r5,16
 801ba5c:	e13ffc17 	ldw	r4,-16(fp)
 801ba60:	803ab280 	call	803ab28 <alt_dcache_flush>
  result = alt_msgdma_standard_descriptor_sync_transfer(
 801ba64:	e0bffd17 	ldw	r2,-12(fp)
 801ba68:	10800117 	ldw	r2,4(r2)
 801ba6c:	e17ffc17 	ldw	r5,-16(fp)
 801ba70:	1009883a 	mov	r4,r2
 801ba74:	80234840 	call	8023484 <alt_msgdma_standard_descriptor_sync_transfer>
 801ba78:	e0bffec5 	stb	r2,-5(fp)
                mi->tx_msgdma, 
                txDesc);
  
  if (result != 0) {
 801ba7c:	e0bffec3 	ldbu	r2,-5(fp)
 801ba80:	10000726 	beq	r2,zero,801baa0 <tse_mac_sTxWrite+0xb0>
    tse_dprintf(4, "WARNING :alt_msgdma_standard_descriptor_sync_transfer Error code 0x%x\n",result);
 801ba84:	e0bffec3 	ldbu	r2,-5(fp)
 801ba88:	100b883a 	mov	r5,r2
 801ba8c:	01020174 	movhi	r4,2053
 801ba90:	213fcf04 	addi	r4,r4,-196
 801ba94:	800325c0 	call	800325c <printf>
    return -1;
 801ba98:	00bfffc4 	movi	r2,-1
 801ba9c:	00000106 	br	801baa4 <tse_mac_sTxWrite+0xb4>
  }

  return 0;
 801baa0:	0005883a 	mov	r2,zero
}
 801baa4:	e037883a 	mov	sp,fp
 801baa8:	dfc00117 	ldw	ra,4(sp)
 801baac:	df000017 	ldw	fp,0(sp)
 801bab0:	dec00204 	addi	sp,sp,8
 801bab4:	f800283a 	ret

0801bab8 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *rxDesc)  
{
 801bab8:	defff904 	addi	sp,sp,-28
 801babc:	dfc00615 	stw	ra,24(sp)
 801bac0:	df000515 	stw	fp,20(sp)
 801bac4:	df000504 	addi	fp,sp,20
 801bac8:	e13ffe15 	stw	r4,-8(fp)
 801bacc:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
           
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
 801bad0:	e0bffe17 	ldw	r2,-8(fp)
 801bad4:	10c00217 	ldw	r3,8(r2)
 801bad8:	00800044 	movi	r2,1
 801badc:	d8800115 	stw	r2,4(sp)
 801bae0:	00800044 	movi	r2,1
 801bae4:	d8800015 	stw	r2,0(sp)
 801bae8:	000f883a 	mov	r7,zero
 801baec:	000d883a 	mov	r6,zero
 801baf0:	e17ffd17 	ldw	r5,-12(fp)
 801baf4:	1809883a 	mov	r4,r3
 801baf8:	80230580 	call	8023058 <alt_msgdma_start_prefetcher_with_std_desc_list>
 801bafc:	e0bfffc5 	stb	r2,-1(fp)
                mi->rx_msgdma, 
                rxDesc,0,0,1,1);
  
  if (result != 0) { return -1; }
 801bb00:	e0bfffc3 	ldbu	r2,-1(fp)
 801bb04:	10000226 	beq	r2,zero,801bb10 <tse_mac_aRxRead+0x58>
 801bb08:	00bfffc4 	movi	r2,-1
 801bb0c:	00000106 	br	801bb14 <tse_mac_aRxRead+0x5c>
 
  return SUCCESS;
 801bb10:	0005883a 	mov	r2,zero
}
 801bb14:	e037883a 	mov	sp,fp
 801bb18:	dfc00117 	ldw	ra,4(sp)
 801bb1c:	df000017 	ldw	fp,0(sp)
 801bb20:	dec00204 	addi	sp,sp,8
 801bb24:	f800283a 	ret

0801bb28 <tse_mac_aTxWrite>:
  *
  */
alt_32 tse_mac_aTxWrite( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *txDesc)  
{
 801bb28:	defff904 	addi	sp,sp,-28
 801bb2c:	dfc00615 	stw	ra,24(sp)
 801bb30:	df000515 	stw	fp,20(sp)
 801bb34:	df000504 	addi	fp,sp,20
 801bb38:	e13ffe15 	stw	r4,-8(fp)
 801bb3c:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
  
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
 801bb40:	e0bffe17 	ldw	r2,-8(fp)
 801bb44:	10c00117 	ldw	r3,4(r2)
 801bb48:	00800044 	movi	r2,1
 801bb4c:	d8800115 	stw	r2,4(sp)
 801bb50:	00800044 	movi	r2,1
 801bb54:	d8800015 	stw	r2,0(sp)
 801bb58:	000f883a 	mov	r7,zero
 801bb5c:	000d883a 	mov	r6,zero
 801bb60:	e17ffd17 	ldw	r5,-12(fp)
 801bb64:	1809883a 	mov	r4,r3
 801bb68:	80230580 	call	8023058 <alt_msgdma_start_prefetcher_with_std_desc_list>
 801bb6c:	e0bfffc5 	stb	r2,-1(fp)
                mi->tx_msgdma, 
                txDesc,0,0,1,1);

  if (result != 0) { return -1; }
 801bb70:	e0bfffc3 	ldbu	r2,-1(fp)
 801bb74:	10000226 	beq	r2,zero,801bb80 <tse_mac_aTxWrite+0x58>
 801bb78:	00bfffc4 	movi	r2,-1
 801bb7c:	00000106 	br	801bb84 <tse_mac_aTxWrite+0x5c>
 
  return SUCCESS;
 801bb80:	0005883a 	mov	r2,zero
}
 801bb84:	e037883a 	mov	sp,fp
 801bb88:	dfc00117 	ldw	ra,4(sp)
 801bb8c:	df000017 	ldw	fp,0(sp)
 801bb90:	dec00204 	addi	sp,sp,8
 801bb94:	f800283a 	ret

0801bb98 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 801bb98:	defffc04 	addi	sp,sp,-16
 801bb9c:	df000315 	stw	fp,12(sp)
 801bba0:	df000304 	addi	fp,sp,12
 801bba4:	e13ffd15 	stw	r4,-12(fp)
    alt_32 timeout;
    alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801bba8:	e0bffd17 	ldw	r2,-12(fp)
 801bbac:	10800204 	addi	r2,r2,8
 801bbb0:	10800037 	ldwio	r2,0(r2)
 801bbb4:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 801bbb8:	e0bffd17 	ldw	r2,-12(fp)
 801bbbc:	10800204 	addi	r2,r2,8
 801bbc0:	00c80204 	movi	r3,8200
 801bbc4:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 801bbc8:	e03fff15 	stw	zero,-4(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 801bbcc:	00000306 	br	801bbdc <tse_mac_SwReset+0x44>
 801bbd0:	e0bfff17 	ldw	r2,-4(fp)
 801bbd4:	10800044 	addi	r2,r2,1
 801bbd8:	e0bfff15 	stw	r2,-4(fp)
 801bbdc:	e0bffd17 	ldw	r2,-12(fp)
 801bbe0:	10800204 	addi	r2,r2,8
 801bbe4:	10800037 	ldwio	r2,0(r2)
 801bbe8:	1088000c 	andi	r2,r2,8192
 801bbec:	10000326 	beq	r2,zero,801bbfc <tse_mac_SwReset+0x64>
 801bbf0:	e0bfff17 	ldw	r2,-4(fp)
 801bbf4:	1089c410 	cmplti	r2,r2,10000
 801bbf8:	103ff51e 	bne	r2,zero,801bbd0 <tse_mac_SwReset+0x38>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 801bbfc:	e0bffd17 	ldw	r2,-12(fp)
 801bc00:	10800204 	addi	r2,r2,8
 801bc04:	e0fffe17 	ldw	r3,-8(fp)
 801bc08:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
 801bc0c:	0005883a 	mov	r2,zero
}
 801bc10:	e037883a 	mov	sp,fp
 801bc14:	df000017 	ldw	fp,0(sp)
 801bc18:	dec00104 	addi	sp,sp,4
 801bc1c:	f800283a 	ret

0801bc20 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 801bc20:	defffd04 	addi	sp,sp,-12
 801bc24:	df000215 	stw	fp,8(sp)
 801bc28:	df000204 	addi	fp,sp,8
 801bc2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801bc30:	e0bffe17 	ldw	r2,-8(fp)
 801bc34:	10800204 	addi	r2,r2,8
 801bc38:	10800037 	ldwio	r2,0(r2)
 801bc3c:	e0bfff15 	stw	r2,-4(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 801bc40:	e0ffff17 	ldw	r3,-4(fp)
 801bc44:	00bffdc4 	movi	r2,-9
 801bc48:	1884703a 	and	r2,r3,r2
 801bc4c:	e0bfff15 	stw	r2,-4(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 801bc50:	e0bffe17 	ldw	r2,-8(fp)
 801bc54:	10800204 	addi	r2,r2,8
 801bc58:	e0ffff17 	ldw	r3,-4(fp)
 801bc5c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801bc60:	0005883a 	mov	r2,zero
}
 801bc64:	e037883a 	mov	sp,fp
 801bc68:	df000017 	ldw	fp,0(sp)
 801bc6c:	dec00104 	addi	sp,sp,4
 801bc70:	f800283a 	ret

0801bc74 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 801bc74:	defffd04 	addi	sp,sp,-12
 801bc78:	df000215 	stw	fp,8(sp)
 801bc7c:	df000204 	addi	fp,sp,8
 801bc80:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801bc84:	e0bffe17 	ldw	r2,-8(fp)
 801bc88:	10800204 	addi	r2,r2,8
 801bc8c:	10800037 	ldwio	r2,0(r2)
 801bc90:	e0bfff15 	stw	r2,-4(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 801bc94:	e0bfff17 	ldw	r2,-4(fp)
 801bc98:	10800214 	ori	r2,r2,8
 801bc9c:	e0bfff15 	stw	r2,-4(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 801bca0:	e0bffe17 	ldw	r2,-8(fp)
 801bca4:	10800204 	addi	r2,r2,8
 801bca8:	e0ffff17 	ldw	r3,-4(fp)
 801bcac:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801bcb0:	0005883a 	mov	r2,zero
}
 801bcb4:	e037883a 	mov	sp,fp
 801bcb8:	df000017 	ldw	fp,0(sp)
 801bcbc:	dec00104 	addi	sp,sp,4
 801bcc0:	f800283a 	ret

0801bcc4 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 801bcc4:	defffb04 	addi	sp,sp,-20
 801bcc8:	dfc00415 	stw	ra,16(sp)
 801bccc:	df000315 	stw	fp,12(sp)
 801bcd0:	dc000215 	stw	r16,8(sp)
 801bcd4:	df000304 	addi	fp,sp,12
 801bcd8:	e13ffd15 	stw	r4,-12(fp)
    alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 801bcdc:	e03ffe15 	stw	zero,-8(fp)
 801bce0:	00002506 	br	801bd78 <alt_tse_phy_add_profile+0xb4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 801bce4:	e0bffe17 	ldw	r2,-8(fp)
 801bce8:	100690ba 	slli	r3,r2,2
 801bcec:	008201b4 	movhi	r2,2054
 801bcf0:	1885883a 	add	r2,r3,r2
 801bcf4:	10b95d17 	ldw	r2,-6796(r2)
 801bcf8:	10c01417 	ldw	r3,80(r2)
 801bcfc:	e0bffd17 	ldw	r2,-12(fp)
 801bd00:	10801417 	ldw	r2,80(r2)
 801bd04:	1880191e 	bne	r3,r2,801bd6c <alt_tse_phy_add_profile+0xa8>
 801bd08:	e0bffe17 	ldw	r2,-8(fp)
 801bd0c:	100690ba 	slli	r3,r2,2
 801bd10:	008201b4 	movhi	r2,2054
 801bd14:	1885883a 	add	r2,r3,r2
 801bd18:	10b95d17 	ldw	r2,-6796(r2)
 801bd1c:	10c01503 	ldbu	r3,84(r2)
 801bd20:	e0bffd17 	ldw	r2,-12(fp)
 801bd24:	10801503 	ldbu	r2,84(r2)
 801bd28:	18c03fcc 	andi	r3,r3,255
 801bd2c:	10803fcc 	andi	r2,r2,255
 801bd30:	18800e1e 	bne	r3,r2,801bd6c <alt_tse_phy_add_profile+0xa8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 801bd34:	e0bffd17 	ldw	r2,-12(fp)
 801bd38:	10801417 	ldw	r2,80(r2)
 801bd3c:	1007883a 	mov	r3,r2
 801bd40:	e0bffd17 	ldw	r2,-12(fp)
 801bd44:	10801503 	ldbu	r2,84(r2)
 801bd48:	10803fcc 	andi	r2,r2,255
 801bd4c:	100d883a 	mov	r6,r2
 801bd50:	180b883a 	mov	r5,r3
 801bd54:	01020174 	movhi	r4,2053
 801bd58:	213fe104 	addi	r4,r4,-124
 801bd5c:	800325c0 	call	800325c <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 801bd60:	01020174 	movhi	r4,2053
 801bd64:	213ff504 	addi	r4,r4,-44
 801bd68:	80033800 	call	8003380 <puts>
    for(i = 0; i < phy_profile_count; i++)
 801bd6c:	e0bffe17 	ldw	r2,-8(fp)
 801bd70:	10800044 	addi	r2,r2,1
 801bd74:	e0bffe15 	stw	r2,-8(fp)
 801bd78:	d0a07a03 	ldbu	r2,-32280(gp)
 801bd7c:	10803fcc 	andi	r2,r2,255
 801bd80:	e0fffe17 	ldw	r3,-8(fp)
 801bd84:	18bfd716 	blt	r3,r2,801bce4 <alt_tse_phy_add_profile+0x20>
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 801bd88:	d0a07a03 	ldbu	r2,-32280(gp)
 801bd8c:	14003fcc 	andi	r16,r2,255
 801bd90:	01001904 	movi	r4,100
 801bd94:	804a2d80 	call	804a2d8 <malloc>
 801bd98:	1009883a 	mov	r4,r2
 801bd9c:	800690ba 	slli	r3,r16,2
 801bda0:	008201b4 	movhi	r2,2054
 801bda4:	1885883a 	add	r2,r3,r2
 801bda8:	11395d15 	stw	r4,-6796(r2)
    if(!pphy_profiles[phy_profile_count]) {
 801bdac:	d0a07a03 	ldbu	r2,-32280(gp)
 801bdb0:	10803fcc 	andi	r2,r2,255
 801bdb4:	100690ba 	slli	r3,r2,2
 801bdb8:	008201b4 	movhi	r2,2054
 801bdbc:	1885883a 	add	r2,r3,r2
 801bdc0:	10b95d17 	ldw	r2,-6796(r2)
 801bdc4:	1000081e 	bne	r2,zero,801bde8 <alt_tse_phy_add_profile+0x124>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 801bdc8:	d0a07a03 	ldbu	r2,-32280(gp)
 801bdcc:	10803fcc 	andi	r2,r2,255
 801bdd0:	100b883a 	mov	r5,r2
 801bdd4:	01020174 	movhi	r4,2053
 801bdd8:	21000d04 	addi	r4,r4,52
 801bddc:	800325c0 	call	800325c <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 801bde0:	00bfffc4 	movi	r2,-1
 801bde4:	00001e06 	br	801be60 <alt_tse_phy_add_profile+0x19c>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 801bde8:	d0a07a03 	ldbu	r2,-32280(gp)
 801bdec:	10803fcc 	andi	r2,r2,255
 801bdf0:	100690ba 	slli	r3,r2,2
 801bdf4:	008201b4 	movhi	r2,2054
 801bdf8:	1885883a 	add	r2,r3,r2
 801bdfc:	10f95d17 	ldw	r3,-6796(r2)
 801be00:	e0bffd17 	ldw	r2,-12(fp)
 801be04:	1009883a 	mov	r4,r2
 801be08:	00801904 	movi	r2,100
 801be0c:	100d883a 	mov	r6,r2
 801be10:	200b883a 	mov	r5,r4
 801be14:	1809883a 	mov	r4,r3
 801be18:	8002ea40 	call	8002ea4 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 801be1c:	d0a07a03 	ldbu	r2,-32280(gp)
 801be20:	10803fcc 	andi	r2,r2,255
 801be24:	100690ba 	slli	r3,r2,2
 801be28:	008201b4 	movhi	r2,2054
 801be2c:	1885883a 	add	r2,r3,r2
 801be30:	10b95d17 	ldw	r2,-6796(r2)
 801be34:	1007883a 	mov	r3,r2
 801be38:	e0bffd17 	ldw	r2,-12(fp)
 801be3c:	100b883a 	mov	r5,r2
 801be40:	1809883a 	mov	r4,r3
 801be44:	804a50c0 	call	804a50c <strcpy>
    
    phy_profile_count++;
 801be48:	d0a07a03 	ldbu	r2,-32280(gp)
 801be4c:	10800044 	addi	r2,r2,1
 801be50:	d0a07a05 	stb	r2,-32280(gp)
    
    return phy_profile_count - 1;
 801be54:	d0a07a03 	ldbu	r2,-32280(gp)
 801be58:	10803fcc 	andi	r2,r2,255
 801be5c:	10bfffc4 	addi	r2,r2,-1
}
 801be60:	e6ffff04 	addi	sp,fp,-4
 801be64:	dfc00217 	ldw	ra,8(sp)
 801be68:	df000117 	ldw	fp,4(sp)
 801be6c:	dc000017 	ldw	r16,0(sp)
 801be70:	dec00304 	addi	sp,sp,12
 801be74:	f800283a 	ret

0801be78 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
    alt_tse_system_mac                    *psys_mac,
    alt_tse_system_msgdma                *psys_msgdma,
    alt_tse_system_desc_mem                *psys_mem,
    alt_tse_system_shared_fifo            *psys_shared_fifo,
    alt_tse_system_phy                     *psys_phy ) {
 801be78:	defff204 	addi	sp,sp,-56
 801be7c:	dfc00d15 	stw	ra,52(sp)
 801be80:	df000c15 	stw	fp,48(sp)
 801be84:	dc000b15 	stw	r16,44(sp)
 801be88:	df000c04 	addi	fp,sp,48
 801be8c:	e13ff715 	stw	r4,-36(fp)
 801be90:	e17ff615 	stw	r5,-40(fp)
 801be94:	e1bff515 	stw	r6,-44(fp)
 801be98:	e1fff415 	stw	r7,-48(fp)

    int i;
    int loop_end;
    
    alt_tse_system_mac                    *pmac    = psys_mac;
 801be9c:	e0bff717 	ldw	r2,-36(fp)
 801bea0:	e0bff815 	stw	r2,-32(fp)
    alt_tse_system_msgdma                *pmsgdma    = psys_msgdma;
 801bea4:	e0bff617 	ldw	r2,-40(fp)
 801bea8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_system_desc_mem                *pmem    = psys_mem;
 801beac:	e0bff517 	ldw	r2,-44(fp)
 801beb0:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_system_shared_fifo            *pfifo    = psys_shared_fifo;
 801beb4:	e0bff417 	ldw	r2,-48(fp)
 801beb8:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_system_phy                     *pphy    = psys_phy;
 801bebc:	e0800217 	ldw	r2,8(fp)
 801bec0:	e0bffd15 	stw	r2,-12(fp)
    
    static alt_8 tse_system_count = 0;
    
    /* Determine number of loop */
    /* Run at least one for non-multi-channel MAC */
    if(pmac->tse_num_of_channel == 0) {
 801bec4:	e0bff817 	ldw	r2,-32(fp)
 801bec8:	10800303 	ldbu	r2,12(r2)
 801becc:	10803fcc 	andi	r2,r2,255
 801bed0:	1000031e 	bne	r2,zero,801bee0 <alt_tse_system_add_sys+0x68>
        loop_end = 1;
 801bed4:	00800044 	movi	r2,1
 801bed8:	e0bff915 	stw	r2,-28(fp)
 801bedc:	00000e06 	br	801bf18 <alt_tse_system_add_sys+0xa0>
    }
    else if(pmac->tse_num_of_channel > 0) {
 801bee0:	e0bff817 	ldw	r2,-32(fp)
 801bee4:	10800303 	ldbu	r2,12(r2)
 801bee8:	10803fcc 	andi	r2,r2,255
 801beec:	10000526 	beq	r2,zero,801bf04 <alt_tse_system_add_sys+0x8c>
        loop_end = pmac->tse_num_of_channel; 
 801bef0:	e0bff817 	ldw	r2,-32(fp)
 801bef4:	10800303 	ldbu	r2,12(r2)
 801bef8:	10803fcc 	andi	r2,r2,255
 801befc:	e0bff915 	stw	r2,-28(fp)
 801bf00:	00000506 	br	801bf18 <alt_tse_system_add_sys+0xa0>
    }
    else {
        tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 801bf04:	01020174 	movhi	r4,2053
 801bf08:	21001c04 	addi	r4,r4,112
 801bf0c:	80033800 	call	8003380 <puts>
        return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801bf10:	00bfffc4 	movi	r2,-1
 801bf14:	00020306 	br	801c724 <alt_tse_system_add_sys+0x8ac>
    }

    for(i = 0; i < loop_end; i++) {
 801bf18:	e03ffa15 	stw	zero,-24(fp)
 801bf1c:	0001fd06 	br	801c714 <alt_tse_system_add_sys+0x89c>
        
        /* Make sure the boundary of array is not exceeded */
        if(tse_system_count >= MAXNETS) {
 801bf20:	d0a07a83 	ldbu	r2,-32278(gp)
 801bf24:	10803fcc 	andi	r2,r2,255
 801bf28:	1080201c 	xori	r2,r2,128
 801bf2c:	10bfe004 	addi	r2,r2,-128
 801bf30:	10800110 	cmplti	r2,r2,4
 801bf34:	10000c1e 	bne	r2,zero,801bf68 <alt_tse_system_add_sys+0xf0>
            tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 801bf38:	01020174 	movhi	r4,2053
 801bf3c:	21002804 	addi	r4,r4,160
 801bf40:	80033800 	call	8003380 <puts>
            tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 801bf44:	d0a07a83 	ldbu	r2,-32278(gp)
 801bf48:	10803fcc 	andi	r2,r2,255
 801bf4c:	1080201c 	xori	r2,r2,128
 801bf50:	10bfe004 	addi	r2,r2,-128
 801bf54:	100d883a 	mov	r6,r2
 801bf58:	01400104 	movi	r5,4
 801bf5c:	01020174 	movhi	r4,2053
 801bf60:	21003804 	addi	r4,r4,224
 801bf64:	800325c0 	call	800325c <printf>
        }

        /* Add MAC info to alt_tse_system_info structure */
        if(pmac == 0) {
 801bf68:	e0bff817 	ldw	r2,-32(fp)
 801bf6c:	1000081e 	bne	r2,zero,801bf90 <alt_tse_system_add_sys+0x118>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 801bf70:	01020174 	movhi	r4,2053
 801bf74:	21004704 	addi	r4,r4,284
 801bf78:	80033800 	call	8003380 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 801bf7c:	01020174 	movhi	r4,2053
 801bf80:	21005104 	addi	r4,r4,324
 801bf84:	80033800 	call	8003380 <puts>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801bf88:	00bfffc4 	movi	r2,-1
 801bf8c:	0001e506 	br	801c724 <alt_tse_system_add_sys+0x8ac>
        }        
        
        tse_mac_device[tse_system_count].tse_mac_base                     = pmac->tse_mac_base + (i * 0x400);
 801bf90:	e0bff817 	ldw	r2,-32(fp)
 801bf94:	10c00017 	ldw	r3,0(r2)
 801bf98:	e0bffa17 	ldw	r2,-24(fp)
 801bf9c:	100492ba 	slli	r2,r2,10
 801bfa0:	1009883a 	mov	r4,r2
 801bfa4:	d0a07a83 	ldbu	r2,-32278(gp)
 801bfa8:	10803fcc 	andi	r2,r2,255
 801bfac:	1080201c 	xori	r2,r2,128
 801bfb0:	10bfe004 	addi	r2,r2,-128
 801bfb4:	1907883a 	add	r3,r3,r4
 801bfb8:	11001324 	muli	r4,r2,76
 801bfbc:	00820174 	movhi	r2,2053
 801bfc0:	2085883a 	add	r2,r4,r2
 801bfc4:	10d06215 	stw	r3,16776(r2)
        tse_mac_device[tse_system_count].tse_tx_depth                     = pmac->tse_tx_depth;
 801bfc8:	e0bff817 	ldw	r2,-32(fp)
 801bfcc:	10c0010b 	ldhu	r3,4(r2)
 801bfd0:	d0a07a83 	ldbu	r2,-32278(gp)
 801bfd4:	10803fcc 	andi	r2,r2,255
 801bfd8:	1080201c 	xori	r2,r2,128
 801bfdc:	10bfe004 	addi	r2,r2,-128
 801bfe0:	18ffffcc 	andi	r3,r3,65535
 801bfe4:	11001324 	muli	r4,r2,76
 801bfe8:	00820174 	movhi	r2,2053
 801bfec:	2085883a 	add	r2,r4,r2
 801bff0:	10d06315 	stw	r3,16780(r2)
        tse_mac_device[tse_system_count].tse_rx_depth                     = pmac->tse_rx_depth;
 801bff4:	e0bff817 	ldw	r2,-32(fp)
 801bff8:	10c0018b 	ldhu	r3,6(r2)
 801bffc:	d0a07a83 	ldbu	r2,-32278(gp)
 801c000:	10803fcc 	andi	r2,r2,255
 801c004:	1080201c 	xori	r2,r2,128
 801c008:	10bfe004 	addi	r2,r2,-128
 801c00c:	18ffffcc 	andi	r3,r3,65535
 801c010:	11001324 	muli	r4,r2,76
 801c014:	00820174 	movhi	r2,2053
 801c018:	2085883a 	add	r2,r4,r2
 801c01c:	10d06415 	stw	r3,16784(r2)
        tse_mac_device[tse_system_count].tse_use_mdio                     = pmac->tse_use_mdio;
 801c020:	d0a07a83 	ldbu	r2,-32278(gp)
 801c024:	10803fcc 	andi	r2,r2,255
 801c028:	1080201c 	xori	r2,r2,128
 801c02c:	10bfe004 	addi	r2,r2,-128
 801c030:	e0fff817 	ldw	r3,-32(fp)
 801c034:	18c00203 	ldbu	r3,8(r3)
 801c038:	11001324 	muli	r4,r2,76
 801c03c:	00820174 	movhi	r2,2053
 801c040:	2085883a 	add	r2,r4,r2
 801c044:	10d06505 	stb	r3,16788(r2)
        tse_mac_device[tse_system_count].tse_en_maclite                 = pmac->tse_en_maclite;
 801c048:	d0a07a83 	ldbu	r2,-32278(gp)
 801c04c:	10803fcc 	andi	r2,r2,255
 801c050:	1080201c 	xori	r2,r2,128
 801c054:	10bfe004 	addi	r2,r2,-128
 801c058:	e0fff817 	ldw	r3,-32(fp)
 801c05c:	18c00243 	ldbu	r3,9(r3)
 801c060:	11001324 	muli	r4,r2,76
 801c064:	00820174 	movhi	r2,2053
 801c068:	2085883a 	add	r2,r4,r2
 801c06c:	10d06545 	stb	r3,16789(r2)
        tse_mac_device[tse_system_count].tse_maclite_gige                 = pmac->tse_maclite_gige;
 801c070:	d0a07a83 	ldbu	r2,-32278(gp)
 801c074:	10803fcc 	andi	r2,r2,255
 801c078:	1080201c 	xori	r2,r2,128
 801c07c:	10bfe004 	addi	r2,r2,-128
 801c080:	e0fff817 	ldw	r3,-32(fp)
 801c084:	18c00283 	ldbu	r3,10(r3)
 801c088:	11001324 	muli	r4,r2,76
 801c08c:	00820174 	movhi	r2,2053
 801c090:	2085883a 	add	r2,r4,r2
 801c094:	10d06585 	stb	r3,16790(r2)
        tse_mac_device[tse_system_count].tse_multichannel_mac             = pmac->tse_multichannel_mac;
 801c098:	d0a07a83 	ldbu	r2,-32278(gp)
 801c09c:	10803fcc 	andi	r2,r2,255
 801c0a0:	1080201c 	xori	r2,r2,128
 801c0a4:	10bfe004 	addi	r2,r2,-128
 801c0a8:	e0fff817 	ldw	r3,-32(fp)
 801c0ac:	18c002c3 	ldbu	r3,11(r3)
 801c0b0:	11001324 	muli	r4,r2,76
 801c0b4:	00820174 	movhi	r2,2053
 801c0b8:	2085883a 	add	r2,r4,r2
 801c0bc:	10d065c5 	stb	r3,16791(r2)
        tse_mac_device[tse_system_count].tse_num_of_channel             = pmac->tse_num_of_channel;
 801c0c0:	d0a07a83 	ldbu	r2,-32278(gp)
 801c0c4:	10803fcc 	andi	r2,r2,255
 801c0c8:	1080201c 	xori	r2,r2,128
 801c0cc:	10bfe004 	addi	r2,r2,-128
 801c0d0:	e0fff817 	ldw	r3,-32(fp)
 801c0d4:	18c00303 	ldbu	r3,12(r3)
 801c0d8:	11001324 	muli	r4,r2,76
 801c0dc:	00820174 	movhi	r2,2053
 801c0e0:	2085883a 	add	r2,r4,r2
 801c0e4:	10d06605 	stb	r3,16792(r2)
        tse_mac_device[tse_system_count].tse_mdio_shared                 = pmac->tse_mdio_shared;
 801c0e8:	d0a07a83 	ldbu	r2,-32278(gp)
 801c0ec:	10803fcc 	andi	r2,r2,255
 801c0f0:	1080201c 	xori	r2,r2,128
 801c0f4:	10bfe004 	addi	r2,r2,-128
 801c0f8:	e0fff817 	ldw	r3,-32(fp)
 801c0fc:	18c00343 	ldbu	r3,13(r3)
 801c100:	11001324 	muli	r4,r2,76
 801c104:	00820174 	movhi	r2,2053
 801c108:	2085883a 	add	r2,r4,r2
 801c10c:	10d06645 	stb	r3,16793(r2)
        tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared    = pmac->tse_number_of_mac_mdio_shared;
 801c110:	d0a07a83 	ldbu	r2,-32278(gp)
 801c114:	10803fcc 	andi	r2,r2,255
 801c118:	1080201c 	xori	r2,r2,128
 801c11c:	10bfe004 	addi	r2,r2,-128
 801c120:	e0fff817 	ldw	r3,-32(fp)
 801c124:	18c00383 	ldbu	r3,14(r3)
 801c128:	11001324 	muli	r4,r2,76
 801c12c:	00820174 	movhi	r2,2053
 801c130:	2085883a 	add	r2,r4,r2
 801c134:	10d06685 	stb	r3,16794(r2)
        tse_mac_device[tse_system_count].tse_pcs_ena                     = pmac->tse_pcs_ena;
 801c138:	d0a07a83 	ldbu	r2,-32278(gp)
 801c13c:	10803fcc 	andi	r2,r2,255
 801c140:	1080201c 	xori	r2,r2,128
 801c144:	10bfe004 	addi	r2,r2,-128
 801c148:	e0fff817 	ldw	r3,-32(fp)
 801c14c:	18c003c3 	ldbu	r3,15(r3)
 801c150:	11001324 	muli	r4,r2,76
 801c154:	00820174 	movhi	r2,2053
 801c158:	2085883a 	add	r2,r4,r2
 801c15c:	10d066c5 	stb	r3,16795(r2)
        tse_mac_device[tse_system_count].tse_pcs_sgmii                     = pmac->tse_pcs_sgmii;
 801c160:	d0a07a83 	ldbu	r2,-32278(gp)
 801c164:	10803fcc 	andi	r2,r2,255
 801c168:	1080201c 	xori	r2,r2,128
 801c16c:	10bfe004 	addi	r2,r2,-128
 801c170:	e0fff817 	ldw	r3,-32(fp)
 801c174:	18c00403 	ldbu	r3,16(r3)
 801c178:	11001324 	muli	r4,r2,76
 801c17c:	00820174 	movhi	r2,2053
 801c180:	2085883a 	add	r2,r4,r2
 801c184:	10d06705 	stb	r3,16796(r2)
        
        /* Add MSGDMA info to alt_tse_system_info structure */
        if(pmsgdma == 0) {
 801c188:	e0bffb17 	ldw	r2,-20(fp)
 801c18c:	10000d1e 	bne	r2,zero,801c1c4 <alt_tse_system_add_sys+0x34c>
            tse_dprintf(2, "ERROR   : MSGDMA system structure == NULL\n");
 801c190:	01020174 	movhi	r4,2053
 801c194:	21006304 	addi	r4,r4,396
 801c198:	80033800 	call	8003380 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 801c19c:	d0a07a83 	ldbu	r2,-32278(gp)
 801c1a0:	10803fcc 	andi	r2,r2,255
 801c1a4:	1080201c 	xori	r2,r2,128
 801c1a8:	10bfe004 	addi	r2,r2,-128
 801c1ac:	100b883a 	mov	r5,r2
 801c1b0:	01020174 	movhi	r4,2053
 801c1b4:	21006e04 	addi	r4,r4,440
 801c1b8:	800325c0 	call	800325c <printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801c1bc:	00bfffc4 	movi	r2,-1
 801c1c0:	00015806 	br	801c724 <alt_tse_system_add_sys+0x8ac>
        }
        
        tse_mac_device[tse_system_count].tse_msgdma_tx = (char *) malloc(strlen(pmsgdma->tse_msgdma_tx) + 1);
 801c1c4:	e0bffb17 	ldw	r2,-20(fp)
 801c1c8:	10800017 	ldw	r2,0(r2)
 801c1cc:	1009883a 	mov	r4,r2
 801c1d0:	8003a1c0 	call	8003a1c <strlen>
 801c1d4:	10800044 	addi	r2,r2,1
 801c1d8:	d0e07a83 	ldbu	r3,-32278(gp)
 801c1dc:	1c003fcc 	andi	r16,r3,255
 801c1e0:	8400201c 	xori	r16,r16,128
 801c1e4:	843fe004 	addi	r16,r16,-128
 801c1e8:	1009883a 	mov	r4,r2
 801c1ec:	804a2d80 	call	804a2d8 <malloc>
 801c1f0:	1009883a 	mov	r4,r2
 801c1f4:	80c01324 	muli	r3,r16,76
 801c1f8:	00820174 	movhi	r2,2053
 801c1fc:	1885883a 	add	r2,r3,r2
 801c200:	11106815 	stw	r4,16800(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_tx) {
 801c204:	d0a07a83 	ldbu	r2,-32278(gp)
 801c208:	10803fcc 	andi	r2,r2,255
 801c20c:	1080201c 	xori	r2,r2,128
 801c210:	10bfe004 	addi	r2,r2,-128
 801c214:	10c01324 	muli	r3,r2,76
 801c218:	00820174 	movhi	r2,2053
 801c21c:	1885883a 	add	r2,r3,r2
 801c220:	10906817 	ldw	r2,16800(r2)
 801c224:	10000a1e 	bne	r2,zero,801c250 <alt_tse_system_add_sys+0x3d8>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_tx\n", tse_system_count);
 801c228:	d0a07a83 	ldbu	r2,-32278(gp)
 801c22c:	10803fcc 	andi	r2,r2,255
 801c230:	1080201c 	xori	r2,r2,128
 801c234:	10bfe004 	addi	r2,r2,-128
 801c238:	100b883a 	mov	r5,r2
 801c23c:	01020174 	movhi	r4,2053
 801c240:	21008604 	addi	r4,r4,536
 801c244:	800325c0 	call	800325c <printf>
            return ALTERA_TSE_MALLOC_FAILED;
 801c248:	00bfffc4 	movi	r2,-1
 801c24c:	00013506 	br	801c724 <alt_tse_system_add_sys+0x8ac>
        }   
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_tx, pmsgdma->tse_msgdma_tx);
 801c250:	d0a07a83 	ldbu	r2,-32278(gp)
 801c254:	10803fcc 	andi	r2,r2,255
 801c258:	1080201c 	xori	r2,r2,128
 801c25c:	10bfe004 	addi	r2,r2,-128
 801c260:	10c01324 	muli	r3,r2,76
 801c264:	00820174 	movhi	r2,2053
 801c268:	1885883a 	add	r2,r3,r2
 801c26c:	10d06817 	ldw	r3,16800(r2)
 801c270:	e0bffb17 	ldw	r2,-20(fp)
 801c274:	10800017 	ldw	r2,0(r2)
 801c278:	100b883a 	mov	r5,r2
 801c27c:	1809883a 	mov	r4,r3
 801c280:	804a50c0 	call	804a50c <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx = (char *) malloc(strlen(pmsgdma->tse_msgdma_rx) + 1);
 801c284:	e0bffb17 	ldw	r2,-20(fp)
 801c288:	10800117 	ldw	r2,4(r2)
 801c28c:	1009883a 	mov	r4,r2
 801c290:	8003a1c0 	call	8003a1c <strlen>
 801c294:	10800044 	addi	r2,r2,1
 801c298:	d0e07a83 	ldbu	r3,-32278(gp)
 801c29c:	1c003fcc 	andi	r16,r3,255
 801c2a0:	8400201c 	xori	r16,r16,128
 801c2a4:	843fe004 	addi	r16,r16,-128
 801c2a8:	1009883a 	mov	r4,r2
 801c2ac:	804a2d80 	call	804a2d8 <malloc>
 801c2b0:	1009883a 	mov	r4,r2
 801c2b4:	80c01324 	muli	r3,r16,76
 801c2b8:	00820174 	movhi	r2,2053
 801c2bc:	1885883a 	add	r2,r3,r2
 801c2c0:	11106915 	stw	r4,16804(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_rx) {
 801c2c4:	d0a07a83 	ldbu	r2,-32278(gp)
 801c2c8:	10803fcc 	andi	r2,r2,255
 801c2cc:	1080201c 	xori	r2,r2,128
 801c2d0:	10bfe004 	addi	r2,r2,-128
 801c2d4:	10c01324 	muli	r3,r2,76
 801c2d8:	00820174 	movhi	r2,2053
 801c2dc:	1885883a 	add	r2,r3,r2
 801c2e0:	10906917 	ldw	r2,16804(r2)
 801c2e4:	10000a1e 	bne	r2,zero,801c310 <alt_tse_system_add_sys+0x498>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_rx\n", tse_system_count);
 801c2e8:	d0a07a83 	ldbu	r2,-32278(gp)
 801c2ec:	10803fcc 	andi	r2,r2,255
 801c2f0:	1080201c 	xori	r2,r2,128
 801c2f4:	10bfe004 	addi	r2,r2,-128
 801c2f8:	100b883a 	mov	r5,r2
 801c2fc:	01020174 	movhi	r4,2053
 801c300:	21009904 	addi	r4,r4,612
 801c304:	800325c0 	call	800325c <printf>
            return ALTERA_TSE_MALLOC_FAILED;
 801c308:	00bfffc4 	movi	r2,-1
 801c30c:	00010506 	br	801c724 <alt_tse_system_add_sys+0x8ac>
        }
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_rx, pmsgdma->tse_msgdma_rx);
 801c310:	d0a07a83 	ldbu	r2,-32278(gp)
 801c314:	10803fcc 	andi	r2,r2,255
 801c318:	1080201c 	xori	r2,r2,128
 801c31c:	10bfe004 	addi	r2,r2,-128
 801c320:	10c01324 	muli	r3,r2,76
 801c324:	00820174 	movhi	r2,2053
 801c328:	1885883a 	add	r2,r3,r2
 801c32c:	10d06917 	ldw	r3,16804(r2)
 801c330:	e0bffb17 	ldw	r2,-20(fp)
 801c334:	10800117 	ldw	r2,4(r2)
 801c338:	100b883a 	mov	r5,r2
 801c33c:	1809883a 	mov	r4,r3
 801c340:	804a50c0 	call	804a50c <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx_irq = pmsgdma->tse_msgdma_rx_irq;
 801c344:	d0a07a83 	ldbu	r2,-32278(gp)
 801c348:	10803fcc 	andi	r2,r2,255
 801c34c:	1080201c 	xori	r2,r2,128
 801c350:	10bfe004 	addi	r2,r2,-128
 801c354:	e0fffb17 	ldw	r3,-20(fp)
 801c358:	18c0020b 	ldhu	r3,8(r3)
 801c35c:	11001324 	muli	r4,r2,76
 801c360:	00820174 	movhi	r2,2053
 801c364:	2085883a 	add	r2,r4,r2
 801c368:	10d06a0d 	sth	r3,16808(r2)
        
        /* Add descriptor memory info to alt_tse_system_info structure */
        if(pmem == 0) {
 801c36c:	e0bffc17 	ldw	r2,-16(fp)
 801c370:	1000111e 	bne	r2,zero,801c3b8 <alt_tse_system_add_sys+0x540>
            tse_mac_device[tse_system_count].ext_desc_mem    = TSE_INT_DESC_MEM;
 801c374:	d0a07a83 	ldbu	r2,-32278(gp)
 801c378:	10803fcc 	andi	r2,r2,255
 801c37c:	1080201c 	xori	r2,r2,128
 801c380:	10bfe004 	addi	r2,r2,-128
 801c384:	10c01324 	muli	r3,r2,76
 801c388:	00820174 	movhi	r2,2053
 801c38c:	1885883a 	add	r2,r3,r2
 801c390:	10106a85 	stb	zero,16810(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = TSE_INT_DESC_MEM;
 801c394:	d0a07a83 	ldbu	r2,-32278(gp)
 801c398:	10803fcc 	andi	r2,r2,255
 801c39c:	1080201c 	xori	r2,r2,128
 801c3a0:	10bfe004 	addi	r2,r2,-128
 801c3a4:	10c01324 	muli	r3,r2,76
 801c3a8:	00820174 	movhi	r2,2053
 801c3ac:	1885883a 	add	r2,r3,r2
 801c3b0:	10106b15 	stw	zero,16812(r2)
 801c3b4:	00001406 	br	801c408 <alt_tse_system_add_sys+0x590>
        }
        else {
            tse_mac_device[tse_system_count].ext_desc_mem    = pmem->ext_desc_mem;
 801c3b8:	d0a07a83 	ldbu	r2,-32278(gp)
 801c3bc:	10803fcc 	andi	r2,r2,255
 801c3c0:	1080201c 	xori	r2,r2,128
 801c3c4:	10bfe004 	addi	r2,r2,-128
 801c3c8:	e0fffc17 	ldw	r3,-16(fp)
 801c3cc:	18c00003 	ldbu	r3,0(r3)
 801c3d0:	11001324 	muli	r4,r2,76
 801c3d4:	00820174 	movhi	r2,2053
 801c3d8:	2085883a 	add	r2,r4,r2
 801c3dc:	10d06a85 	stb	r3,16810(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = pmem->desc_mem_base;
 801c3e0:	d0a07a83 	ldbu	r2,-32278(gp)
 801c3e4:	10803fcc 	andi	r2,r2,255
 801c3e8:	1080201c 	xori	r2,r2,128
 801c3ec:	10bfe004 	addi	r2,r2,-128
 801c3f0:	e0fffc17 	ldw	r3,-16(fp)
 801c3f4:	18c00117 	ldw	r3,4(r3)
 801c3f8:	11001324 	muli	r4,r2,76
 801c3fc:	00820174 	movhi	r2,2053
 801c400:	2085883a 	add	r2,r4,r2
 801c404:	10d06b15 	stw	r3,16812(r2)
        }
        
        /* Add shared fifo info to alt_tse_system_info structure */
        if(pfifo == 0) {
 801c408:	e0bffe17 	ldw	r2,-8(fp)
 801c40c:	1000391e 	bne	r2,zero,801c4f4 <alt_tse_system_add_sys+0x67c>
            tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 801c410:	d0a07a83 	ldbu	r2,-32278(gp)
 801c414:	10803fcc 	andi	r2,r2,255
 801c418:	1080201c 	xori	r2,r2,128
 801c41c:	10bfe004 	addi	r2,r2,-128
 801c420:	10c01324 	muli	r3,r2,76
 801c424:	00820174 	movhi	r2,2053
 801c428:	1885883a 	add	r2,r3,r2
 801c42c:	10106c05 	stb	zero,16816(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = TSE_NO_SHARED_FIFO;
 801c430:	d0a07a83 	ldbu	r2,-32278(gp)
 801c434:	10803fcc 	andi	r2,r2,255
 801c438:	1080201c 	xori	r2,r2,128
 801c43c:	10bfe004 	addi	r2,r2,-128
 801c440:	10c01324 	muli	r3,r2,76
 801c444:	00820174 	movhi	r2,2053
 801c448:	1885883a 	add	r2,r3,r2
 801c44c:	10106d15 	stw	zero,16820(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = TSE_NO_SHARED_FIFO;
 801c450:	d0a07a83 	ldbu	r2,-32278(gp)
 801c454:	10803fcc 	andi	r2,r2,255
 801c458:	1080201c 	xori	r2,r2,128
 801c45c:	10bfe004 	addi	r2,r2,-128
 801c460:	10c01324 	muli	r3,r2,76
 801c464:	00820174 	movhi	r2,2053
 801c468:	1885883a 	add	r2,r3,r2
 801c46c:	10106e15 	stw	zero,16824(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 801c470:	d0a07a83 	ldbu	r2,-32278(gp)
 801c474:	10803fcc 	andi	r2,r2,255
 801c478:	1080201c 	xori	r2,r2,128
 801c47c:	10bfe004 	addi	r2,r2,-128
 801c480:	10c01324 	muli	r3,r2,76
 801c484:	00820174 	movhi	r2,2053
 801c488:	1885883a 	add	r2,r3,r2
 801c48c:	10106f15 	stw	zero,16828(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = TSE_NO_SHARED_FIFO;
 801c490:	d0a07a83 	ldbu	r2,-32278(gp)
 801c494:	10803fcc 	andi	r2,r2,255
 801c498:	1080201c 	xori	r2,r2,128
 801c49c:	10bfe004 	addi	r2,r2,-128
 801c4a0:	10c01324 	muli	r3,r2,76
 801c4a4:	00820174 	movhi	r2,2053
 801c4a8:	1885883a 	add	r2,r3,r2
 801c4ac:	10107015 	stw	zero,16832(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = TSE_NO_SHARED_FIFO;
 801c4b0:	d0a07a83 	ldbu	r2,-32278(gp)
 801c4b4:	10803fcc 	andi	r2,r2,255
 801c4b8:	1080201c 	xori	r2,r2,128
 801c4bc:	10bfe004 	addi	r2,r2,-128
 801c4c0:	10c01324 	muli	r3,r2,76
 801c4c4:	00820174 	movhi	r2,2053
 801c4c8:	1885883a 	add	r2,r3,r2
 801c4cc:	10107115 	stw	zero,16836(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 801c4d0:	d0a07a83 	ldbu	r2,-32278(gp)
 801c4d4:	10803fcc 	andi	r2,r2,255
 801c4d8:	1080201c 	xori	r2,r2,128
 801c4dc:	10bfe004 	addi	r2,r2,-128
 801c4e0:	10c01324 	muli	r3,r2,76
 801c4e4:	00820174 	movhi	r2,2053
 801c4e8:	1885883a 	add	r2,r3,r2
 801c4ec:	10107215 	stw	zero,16840(r2)
 801c4f0:	00004606 	br	801c60c <alt_tse_system_add_sys+0x794>
        }
        else {
            tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 801c4f4:	d0a07a83 	ldbu	r2,-32278(gp)
 801c4f8:	10803fcc 	andi	r2,r2,255
 801c4fc:	1080201c 	xori	r2,r2,128
 801c500:	10bfe004 	addi	r2,r2,-128
 801c504:	e0fffe17 	ldw	r3,-8(fp)
 801c508:	18c00003 	ldbu	r3,0(r3)
 801c50c:	11001324 	muli	r4,r2,76
 801c510:	00820174 	movhi	r2,2053
 801c514:	2085883a 	add	r2,r4,r2
 801c518:	10d06c05 	stb	r3,16816(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = pfifo->tse_shared_fifo_tx_ctrl_base;
 801c51c:	d0a07a83 	ldbu	r2,-32278(gp)
 801c520:	10803fcc 	andi	r2,r2,255
 801c524:	1080201c 	xori	r2,r2,128
 801c528:	10bfe004 	addi	r2,r2,-128
 801c52c:	e0fffe17 	ldw	r3,-8(fp)
 801c530:	18c00117 	ldw	r3,4(r3)
 801c534:	11001324 	muli	r4,r2,76
 801c538:	00820174 	movhi	r2,2053
 801c53c:	2085883a 	add	r2,r4,r2
 801c540:	10d06d15 	stw	r3,16820(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = pfifo->tse_shared_fifo_tx_stat_base;
 801c544:	d0a07a83 	ldbu	r2,-32278(gp)
 801c548:	10803fcc 	andi	r2,r2,255
 801c54c:	1080201c 	xori	r2,r2,128
 801c550:	10bfe004 	addi	r2,r2,-128
 801c554:	e0fffe17 	ldw	r3,-8(fp)
 801c558:	18c00217 	ldw	r3,8(r3)
 801c55c:	11001324 	muli	r4,r2,76
 801c560:	00820174 	movhi	r2,2053
 801c564:	2085883a 	add	r2,r4,r2
 801c568:	10d06e15 	stw	r3,16824(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 801c56c:	d0a07a83 	ldbu	r2,-32278(gp)
 801c570:	10803fcc 	andi	r2,r2,255
 801c574:	1080201c 	xori	r2,r2,128
 801c578:	10bfe004 	addi	r2,r2,-128
 801c57c:	e0fffe17 	ldw	r3,-8(fp)
 801c580:	18c00317 	ldw	r3,12(r3)
 801c584:	11001324 	muli	r4,r2,76
 801c588:	00820174 	movhi	r2,2053
 801c58c:	2085883a 	add	r2,r4,r2
 801c590:	10d06f15 	stw	r3,16828(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = pfifo->tse_shared_fifo_rx_ctrl_base;
 801c594:	d0a07a83 	ldbu	r2,-32278(gp)
 801c598:	10803fcc 	andi	r2,r2,255
 801c59c:	1080201c 	xori	r2,r2,128
 801c5a0:	10bfe004 	addi	r2,r2,-128
 801c5a4:	e0fffe17 	ldw	r3,-8(fp)
 801c5a8:	18c00417 	ldw	r3,16(r3)
 801c5ac:	11001324 	muli	r4,r2,76
 801c5b0:	00820174 	movhi	r2,2053
 801c5b4:	2085883a 	add	r2,r4,r2
 801c5b8:	10d07015 	stw	r3,16832(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = pfifo->tse_shared_fifo_rx_stat_base;
 801c5bc:	d0a07a83 	ldbu	r2,-32278(gp)
 801c5c0:	10803fcc 	andi	r2,r2,255
 801c5c4:	1080201c 	xori	r2,r2,128
 801c5c8:	10bfe004 	addi	r2,r2,-128
 801c5cc:	e0fffe17 	ldw	r3,-8(fp)
 801c5d0:	18c00517 	ldw	r3,20(r3)
 801c5d4:	11001324 	muli	r4,r2,76
 801c5d8:	00820174 	movhi	r2,2053
 801c5dc:	2085883a 	add	r2,r4,r2
 801c5e0:	10d07115 	stw	r3,16836(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 801c5e4:	d0a07a83 	ldbu	r2,-32278(gp)
 801c5e8:	10803fcc 	andi	r2,r2,255
 801c5ec:	1080201c 	xori	r2,r2,128
 801c5f0:	10bfe004 	addi	r2,r2,-128
 801c5f4:	e0fffe17 	ldw	r3,-8(fp)
 801c5f8:	18c00617 	ldw	r3,24(r3)
 801c5fc:	11001324 	muli	r4,r2,76
 801c600:	00820174 	movhi	r2,2053
 801c604:	2085883a 	add	r2,r4,r2
 801c608:	10d07215 	stw	r3,16840(r2)
        }
        
        /* Add PHY info to alt_tse_system_info structure */
        if(pphy == 0) {
 801c60c:	e0bffd17 	ldw	r2,-12(fp)
 801c610:	1000121e 	bne	r2,zero,801c65c <alt_tse_system_add_sys+0x7e4>
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = TSE_PHY_AUTO_ADDRESS;
 801c614:	d0a07a83 	ldbu	r2,-32278(gp)
 801c618:	10803fcc 	andi	r2,r2,255
 801c61c:	1080201c 	xori	r2,r2,128
 801c620:	10bfe004 	addi	r2,r2,-128
 801c624:	11001324 	muli	r4,r2,76
 801c628:	00ffffc4 	movi	r3,-1
 801c62c:	00820174 	movhi	r2,2053
 801c630:	2085883a 	add	r2,r4,r2
 801c634:	10d07315 	stw	r3,16844(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = 0;
 801c638:	d0a07a83 	ldbu	r2,-32278(gp)
 801c63c:	10803fcc 	andi	r2,r2,255
 801c640:	1080201c 	xori	r2,r2,128
 801c644:	10bfe004 	addi	r2,r2,-128
 801c648:	10c01324 	muli	r3,r2,76
 801c64c:	00820174 	movhi	r2,2053
 801c650:	1885883a 	add	r2,r3,r2
 801c654:	10107415 	stw	zero,16848(r2)
 801c658:	00001406 	br	801c6ac <alt_tse_system_add_sys+0x834>
        }
        else {
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = pphy->tse_phy_mdio_address;
 801c65c:	d0a07a83 	ldbu	r2,-32278(gp)
 801c660:	10803fcc 	andi	r2,r2,255
 801c664:	1080201c 	xori	r2,r2,128
 801c668:	10bfe004 	addi	r2,r2,-128
 801c66c:	e0fffd17 	ldw	r3,-12(fp)
 801c670:	18c00017 	ldw	r3,0(r3)
 801c674:	11001324 	muli	r4,r2,76
 801c678:	00820174 	movhi	r2,2053
 801c67c:	2085883a 	add	r2,r4,r2
 801c680:	10d07315 	stw	r3,16844(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = pphy->tse_phy_cfg;
 801c684:	d0a07a83 	ldbu	r2,-32278(gp)
 801c688:	10803fcc 	andi	r2,r2,255
 801c68c:	1080201c 	xori	r2,r2,128
 801c690:	10bfe004 	addi	r2,r2,-128
 801c694:	e0fffd17 	ldw	r3,-12(fp)
 801c698:	18c00117 	ldw	r3,4(r3)
 801c69c:	11001324 	muli	r4,r2,76
 801c6a0:	00820174 	movhi	r2,2053
 801c6a4:	2085883a 	add	r2,r4,r2
 801c6a8:	10d07415 	stw	r3,16848(r2)
        }
        
        /* Point to next structure */
        pmsgdma++;
 801c6ac:	e0bffb17 	ldw	r2,-20(fp)
 801c6b0:	10800304 	addi	r2,r2,12
 801c6b4:	e0bffb15 	stw	r2,-20(fp)
        if(pmem) pmem++;
 801c6b8:	e0bffc17 	ldw	r2,-16(fp)
 801c6bc:	10000326 	beq	r2,zero,801c6cc <alt_tse_system_add_sys+0x854>
 801c6c0:	e0bffc17 	ldw	r2,-16(fp)
 801c6c4:	10800204 	addi	r2,r2,8
 801c6c8:	e0bffc15 	stw	r2,-16(fp)
        if(pfifo) pfifo++;
 801c6cc:	e0bffe17 	ldw	r2,-8(fp)
 801c6d0:	10000326 	beq	r2,zero,801c6e0 <alt_tse_system_add_sys+0x868>
 801c6d4:	e0bffe17 	ldw	r2,-8(fp)
 801c6d8:	10800704 	addi	r2,r2,28
 801c6dc:	e0bffe15 	stw	r2,-8(fp)
        if(pphy) pphy++;
 801c6e0:	e0bffd17 	ldw	r2,-12(fp)
 801c6e4:	10000326 	beq	r2,zero,801c6f4 <alt_tse_system_add_sys+0x87c>
 801c6e8:	e0bffd17 	ldw	r2,-12(fp)
 801c6ec:	10800204 	addi	r2,r2,8
 801c6f0:	e0bffd15 	stw	r2,-12(fp)
        
        tse_system_count++;
 801c6f4:	d0a07a83 	ldbu	r2,-32278(gp)
 801c6f8:	10800044 	addi	r2,r2,1
 801c6fc:	d0a07a85 	stb	r2,-32278(gp)
        max_mac_system = tse_system_count;
 801c700:	d0a07a83 	ldbu	r2,-32278(gp)
 801c704:	d0a02705 	stb	r2,-32612(gp)
    for(i = 0; i < loop_end; i++) {
 801c708:	e0bffa17 	ldw	r2,-24(fp)
 801c70c:	10800044 	addi	r2,r2,1
 801c710:	e0bffa15 	stw	r2,-24(fp)
 801c714:	e0fffa17 	ldw	r3,-24(fp)
 801c718:	e0bff917 	ldw	r2,-28(fp)
 801c71c:	18be0016 	blt	r3,r2,801bf20 <alt_tse_system_add_sys+0xa8>
    }
    
    return SUCCESS;
 801c720:	0005883a 	mov	r2,zero
    
}
 801c724:	e6ffff04 	addi	sp,fp,-4
 801c728:	dfc00217 	ldw	ra,8(sp)
 801c72c:	df000117 	ldw	fp,4(sp)
 801c730:	dc000017 	ldw	r16,0(sp)
 801c734:	dec00304 	addi	sp,sp,12
 801c738:	f800283a 	ret

0801c73c <alt_tse_sys_enable_mdio_sharing>:
 * @param        number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 *                 ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 801c73c:	defff904 	addi	sp,sp,-28
 801c740:	dfc00615 	stw	ra,24(sp)
 801c744:	df000515 	stw	fp,20(sp)
 801c748:	df000504 	addi	fp,sp,20
 801c74c:	e13ffc15 	stw	r4,-16(fp)
 801c750:	2805883a 	mov	r2,r5
 801c754:	e0bffb05 	stb	r2,-20(fp)
    alt_32 i;
    alt_32 j;
    
    alt_tse_system_mac *psys_mac;
    
    for(i = 0; i < number_of_mac; i++) {
 801c758:	e03fff15 	stw	zero,-4(fp)
 801c75c:	00003f06 	br	801c85c <alt_tse_sys_enable_mdio_sharing+0x120>
        psys_mac = psys_mac_list[i];
 801c760:	e0bfff17 	ldw	r2,-4(fp)
 801c764:	100490ba 	slli	r2,r2,2
 801c768:	e0fffc17 	ldw	r3,-16(fp)
 801c76c:	1885883a 	add	r2,r3,r2
 801c770:	10800017 	ldw	r2,0(r2)
 801c774:	e0bffd15 	stw	r2,-12(fp)
        
        if(psys_mac == 0) {
 801c778:	e0bffd17 	ldw	r2,-12(fp)
 801c77c:	1000081e 	bne	r2,zero,801c7a0 <alt_tse_sys_enable_mdio_sharing+0x64>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 801c780:	01020174 	movhi	r4,2053
 801c784:	21004704 	addi	r4,r4,284
 801c788:	80033800 	call	8003380 <puts>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 801c78c:	01020174 	movhi	r4,2053
 801c790:	2100ac04 	addi	r4,r4,688
 801c794:	80033800 	call	8003380 <puts>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801c798:	00bfffc4 	movi	r2,-1
 801c79c:	00003306 	br	801c86c <alt_tse_sys_enable_mdio_sharing+0x130>
        }
        
        for(j = 0; j < max_mac_system; j++) {
 801c7a0:	e03ffe15 	stw	zero,-8(fp)
 801c7a4:	00002606 	br	801c840 <alt_tse_sys_enable_mdio_sharing+0x104>
            
            if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 801c7a8:	e0bffd17 	ldw	r2,-12(fp)
 801c7ac:	10c00017 	ldw	r3,0(r2)
 801c7b0:	e0bffe17 	ldw	r2,-8(fp)
 801c7b4:	11001324 	muli	r4,r2,76
 801c7b8:	00820174 	movhi	r2,2053
 801c7bc:	2085883a 	add	r2,r4,r2
 801c7c0:	10906217 	ldw	r2,16776(r2)
 801c7c4:	18801b1e 	bne	r3,r2,801c834 <alt_tse_sys_enable_mdio_sharing+0xf8>
                if(tse_mac_device[j].tse_multichannel_mac) {
 801c7c8:	e0bffe17 	ldw	r2,-8(fp)
 801c7cc:	10c01324 	muli	r3,r2,76
 801c7d0:	00820174 	movhi	r2,2053
 801c7d4:	1885883a 	add	r2,r3,r2
 801c7d8:	109065c3 	ldbu	r2,16791(r2)
 801c7dc:	10803fcc 	andi	r2,r2,255
 801c7e0:	10000826 	beq	r2,zero,801c804 <alt_tse_sys_enable_mdio_sharing+0xc8>
                    tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 801c7e4:	01020174 	movhi	r4,2053
 801c7e8:	2100c004 	addi	r4,r4,768
 801c7ec:	80033800 	call	8003380 <puts>
                    tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 801c7f0:	01020174 	movhi	r4,2053
 801c7f4:	2100d104 	addi	r4,r4,836
 801c7f8:	80033800 	call	8003380 <puts>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801c7fc:	00bfffc4 	movi	r2,-1
 801c800:	00001a06 	br	801c86c <alt_tse_sys_enable_mdio_sharing+0x130>
                }
                
                tse_mac_device[j].tse_mdio_shared = 1;
 801c804:	e0bffe17 	ldw	r2,-8(fp)
 801c808:	11001324 	muli	r4,r2,76
 801c80c:	00c00044 	movi	r3,1
 801c810:	00820174 	movhi	r2,2053
 801c814:	2085883a 	add	r2,r4,r2
 801c818:	10d06645 	stb	r3,16793(r2)
                tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 801c81c:	e0bffe17 	ldw	r2,-8(fp)
 801c820:	11001324 	muli	r4,r2,76
 801c824:	e0fffb03 	ldbu	r3,-20(fp)
 801c828:	00820174 	movhi	r2,2053
 801c82c:	2085883a 	add	r2,r4,r2
 801c830:	10d06685 	stb	r3,16794(r2)
        for(j = 0; j < max_mac_system; j++) {
 801c834:	e0bffe17 	ldw	r2,-8(fp)
 801c838:	10800044 	addi	r2,r2,1
 801c83c:	e0bffe15 	stw	r2,-8(fp)
 801c840:	d0a02703 	ldbu	r2,-32612(gp)
 801c844:	10803fcc 	andi	r2,r2,255
 801c848:	e0fffe17 	ldw	r3,-8(fp)
 801c84c:	18bfd616 	blt	r3,r2,801c7a8 <alt_tse_sys_enable_mdio_sharing+0x6c>
    for(i = 0; i < number_of_mac; i++) {
 801c850:	e0bfff17 	ldw	r2,-4(fp)
 801c854:	10800044 	addi	r2,r2,1
 801c858:	e0bfff15 	stw	r2,-4(fp)
 801c85c:	e0bffb03 	ldbu	r2,-20(fp)
 801c860:	e0ffff17 	ldw	r3,-4(fp)
 801c864:	18bfbe16 	blt	r3,r2,801c760 <alt_tse_sys_enable_mdio_sharing+0x24>
            }
        }    
    }
    
    return SUCCESS;
 801c868:	0005883a 	mov	r2,zero
}
 801c86c:	e037883a 	mov	sp,fp
 801c870:	dfc00117 	ldw	ra,4(sp)
 801c874:	df000017 	ldw	fp,0(sp)
 801c878:	dec00204 	addi	sp,sp,8
 801c87c:	f800283a 	ret

0801c880 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 801c880:	defffc04 	addi	sp,sp,-16
 801c884:	dfc00315 	stw	ra,12(sp)
 801c888:	df000215 	stw	fp,8(sp)
 801c88c:	df000204 	addi	fp,sp,8
 801c890:	e13ffe15 	stw	r4,-8(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 801c894:	e13ffe17 	ldw	r4,-8(fp)
 801c898:	801ca5c0 	call	801ca5c <alt_tse_get_mac_info>
 801c89c:	10800317 	ldw	r2,12(r2)
 801c8a0:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 801c8a4:	e13fff17 	ldw	r4,-4(fp)
 801c8a8:	801fbf00 	call	801fbf0 <alt_tse_phy_get_common_speed>
}
 801c8ac:	e037883a 	mov	sp,fp
 801c8b0:	dfc00117 	ldw	ra,4(sp)
 801c8b4:	df000017 	ldw	fp,0(sp)
 801c8b8:	dec00204 	addi	sp,sp,8
 801c8bc:	f800283a 	ret

0801c8c0 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 801c8c0:	defffb04 	addi	sp,sp,-20
 801c8c4:	dfc00415 	stw	ra,16(sp)
 801c8c8:	df000315 	stw	fp,12(sp)
 801c8cc:	df000304 	addi	fp,sp,12
 801c8d0:	e13ffe15 	stw	r4,-8(fp)
 801c8d4:	e17ffd15 	stw	r5,-12(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 801c8d8:	e13ffe17 	ldw	r4,-8(fp)
 801c8dc:	801ca5c0 	call	801ca5c <alt_tse_get_mac_info>
 801c8e0:	10800317 	ldw	r2,12(r2)
 801c8e4:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 801c8e8:	e17ffd17 	ldw	r5,-12(fp)
 801c8ec:	e13fff17 	ldw	r4,-4(fp)
 801c8f0:	801ff0c0 	call	801ff0c <alt_tse_phy_set_common_speed>
}
 801c8f4:	e037883a 	mov	sp,fp
 801c8f8:	dfc00117 	ldw	ra,4(sp)
 801c8fc:	df000017 	ldw	fp,0(sp)
 801c900:	dec00204 	addi	sp,sp,8
 801c904:	f800283a 	ret

0801c908 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 801c908:	defffd04 	addi	sp,sp,-12
 801c90c:	df000215 	stw	fp,8(sp)
 801c910:	df000204 	addi	fp,sp,8
 801c914:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 801c918:	e03fff15 	stw	zero,-4(fp)
 801c91c:	00000c06 	br	801c950 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
 801c920:	e0bfff17 	ldw	r2,-4(fp)
 801c924:	10c01324 	muli	r3,r2,76
 801c928:	00820174 	movhi	r2,2053
 801c92c:	10906204 	addi	r2,r2,16776
 801c930:	1885883a 	add	r2,r3,r2
 801c934:	e0fffe17 	ldw	r3,-8(fp)
 801c938:	1880021e 	bne	r3,r2,801c944 <alt_tse_get_system_index+0x3c>
            return i;
 801c93c:	e0bfff17 	ldw	r2,-4(fp)
 801c940:	00000806 	br	801c964 <alt_tse_get_system_index+0x5c>
    for(i = 0; i < max_mac_system; i++) {
 801c944:	e0bfff17 	ldw	r2,-4(fp)
 801c948:	10800044 	addi	r2,r2,1
 801c94c:	e0bfff15 	stw	r2,-4(fp)
 801c950:	d0a02703 	ldbu	r2,-32612(gp)
 801c954:	10803fcc 	andi	r2,r2,255
 801c958:	e0ffff17 	ldw	r3,-4(fp)
 801c95c:	18bff016 	blt	r3,r2,801c920 <alt_tse_get_system_index+0x18>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 801c960:	00bfffc4 	movi	r2,-1
}
 801c964:	e037883a 	mov	sp,fp
 801c968:	df000017 	ldw	fp,0(sp)
 801c96c:	dec00104 	addi	sp,sp,4
 801c970:	f800283a 	ret

0801c974 <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 801c974:	defffd04 	addi	sp,sp,-12
 801c978:	df000215 	stw	fp,8(sp)
 801c97c:	df000204 	addi	fp,sp,8
 801c980:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 801c984:	e03fff15 	stw	zero,-4(fp)
 801c988:	00000c06 	br	801c9bc <alt_tse_get_mac_group_index+0x48>
        if(pmac_group == pmac_groups[i]) {
 801c98c:	e0bfff17 	ldw	r2,-4(fp)
 801c990:	100690ba 	slli	r3,r2,2
 801c994:	008201b4 	movhi	r2,2054
 801c998:	1885883a 	add	r2,r3,r2
 801c99c:	10b95917 	ldw	r2,-6812(r2)
 801c9a0:	e0fffe17 	ldw	r3,-8(fp)
 801c9a4:	1880021e 	bne	r3,r2,801c9b0 <alt_tse_get_mac_group_index+0x3c>
            return i;
 801c9a8:	e0bfff17 	ldw	r2,-4(fp)
 801c9ac:	00000806 	br	801c9d0 <alt_tse_get_mac_group_index+0x5c>
    for(i = 0; i < mac_group_count; i++) {
 801c9b0:	e0bfff17 	ldw	r2,-4(fp)
 801c9b4:	10800044 	addi	r2,r2,1
 801c9b8:	e0bfff15 	stw	r2,-4(fp)
 801c9bc:	d0a07a43 	ldbu	r2,-32279(gp)
 801c9c0:	10803fcc 	andi	r2,r2,255
 801c9c4:	e0ffff17 	ldw	r3,-4(fp)
 801c9c8:	18bff016 	blt	r3,r2,801c98c <alt_tse_get_mac_group_index+0x18>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 801c9cc:	00bfffc4 	movi	r2,-1
}
 801c9d0:	e037883a 	mov	sp,fp
 801c9d4:	df000017 	ldw	fp,0(sp)
 801c9d8:	dec00104 	addi	sp,sp,4
 801c9dc:	f800283a 	ret

0801c9e0 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 801c9e0:	defffd04 	addi	sp,sp,-12
 801c9e4:	df000215 	stw	fp,8(sp)
 801c9e8:	df000204 	addi	fp,sp,8
 801c9ec:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 801c9f0:	e03fff15 	stw	zero,-4(fp)
 801c9f4:	00000e06 	br	801ca30 <alt_tse_get_mac_info_index+0x50>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 801c9f8:	e0bffe17 	ldw	r2,-8(fp)
 801c9fc:	10c00317 	ldw	r3,12(r2)
 801ca00:	e0bfff17 	ldw	r2,-4(fp)
 801ca04:	10800044 	addi	r2,r2,1
 801ca08:	100490ba 	slli	r2,r2,2
 801ca0c:	1885883a 	add	r2,r3,r2
 801ca10:	10800017 	ldw	r2,0(r2)
 801ca14:	e0fffe17 	ldw	r3,-8(fp)
 801ca18:	1880021e 	bne	r3,r2,801ca24 <alt_tse_get_mac_info_index+0x44>
            return i;
 801ca1c:	e0bfff17 	ldw	r2,-4(fp)
 801ca20:	00000a06 	br	801ca4c <alt_tse_get_mac_info_index+0x6c>
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 801ca24:	e0bfff17 	ldw	r2,-4(fp)
 801ca28:	10800044 	addi	r2,r2,1
 801ca2c:	e0bfff15 	stw	r2,-4(fp)
 801ca30:	e0bffe17 	ldw	r2,-8(fp)
 801ca34:	10800317 	ldw	r2,12(r2)
 801ca38:	10800003 	ldbu	r2,0(r2)
 801ca3c:	10803fcc 	andi	r2,r2,255
 801ca40:	e0ffff17 	ldw	r3,-4(fp)
 801ca44:	18bfec16 	blt	r3,r2,801c9f8 <alt_tse_get_mac_info_index+0x18>
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 801ca48:	00bfffc4 	movi	r2,-1
}
 801ca4c:	e037883a 	mov	sp,fp
 801ca50:	df000017 	ldw	fp,0(sp)
 801ca54:	dec00104 	addi	sp,sp,4
 801ca58:	f800283a 	ret

0801ca5c <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 801ca5c:	defffa04 	addi	sp,sp,-24
 801ca60:	df000515 	stw	fp,20(sp)
 801ca64:	df000504 	addi	fp,sp,20
 801ca68:	e13ffb15 	stw	r4,-20(fp)
    alt_32 i;
    alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 801ca6c:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 801ca70:	e03ffc15 	stw	zero,-16(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 801ca74:	e03fff15 	stw	zero,-4(fp)
 801ca78:	00002206 	br	801cb04 <alt_tse_get_mac_info+0xa8>
        pmac_group = pmac_groups[i];
 801ca7c:	e0bfff17 	ldw	r2,-4(fp)
 801ca80:	100690ba 	slli	r3,r2,2
 801ca84:	008201b4 	movhi	r2,2054
 801ca88:	1885883a 	add	r2,r3,r2
 801ca8c:	10b95917 	ldw	r2,-6812(r2)
 801ca90:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 801ca94:	e03ffe15 	stw	zero,-8(fp)
 801ca98:	00001206 	br	801cae4 <alt_tse_get_mac_info+0x88>
            pmac_info = pmac_group->pmac_info[j];
 801ca9c:	e0fffd17 	ldw	r3,-12(fp)
 801caa0:	e0bffe17 	ldw	r2,-8(fp)
 801caa4:	10800044 	addi	r2,r2,1
 801caa8:	100490ba 	slli	r2,r2,2
 801caac:	1885883a 	add	r2,r3,r2
 801cab0:	10800017 	ldw	r2,0(r2)
 801cab4:	e0bffc15 	stw	r2,-16(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 801cab8:	e0bffc17 	ldw	r2,-16(fp)
 801cabc:	10800217 	ldw	r2,8(r2)
 801cac0:	10800017 	ldw	r2,0(r2)
 801cac4:	1007883a 	mov	r3,r2
 801cac8:	e0bffb17 	ldw	r2,-20(fp)
 801cacc:	10c0021e 	bne	r2,r3,801cad8 <alt_tse_get_mac_info+0x7c>
                return pmac_info;
 801cad0:	e0bffc17 	ldw	r2,-16(fp)
 801cad4:	00001006 	br	801cb18 <alt_tse_get_mac_info+0xbc>
        for(j = 0; j < pmac_group->channel; j++) {
 801cad8:	e0bffe17 	ldw	r2,-8(fp)
 801cadc:	10800044 	addi	r2,r2,1
 801cae0:	e0bffe15 	stw	r2,-8(fp)
 801cae4:	e0bffd17 	ldw	r2,-12(fp)
 801cae8:	10800003 	ldbu	r2,0(r2)
 801caec:	10803fcc 	andi	r2,r2,255
 801caf0:	e0fffe17 	ldw	r3,-8(fp)
 801caf4:	18bfe916 	blt	r3,r2,801ca9c <alt_tse_get_mac_info+0x40>
    for(i = 0; i < mac_group_count; i++) {
 801caf8:	e0bfff17 	ldw	r2,-4(fp)
 801cafc:	10800044 	addi	r2,r2,1
 801cb00:	e0bfff15 	stw	r2,-4(fp)
 801cb04:	d0a07a43 	ldbu	r2,-32279(gp)
 801cb08:	10803fcc 	andi	r2,r2,255
 801cb0c:	e0ffff17 	ldw	r3,-4(fp)
 801cb10:	18bfda16 	blt	r3,r2,801ca7c <alt_tse_get_mac_info+0x20>
            }
        }        
    }
    
    return 0;
 801cb14:	0005883a 	mov	r2,zero
}
 801cb18:	e037883a 	mov	sp,fp
 801cb1c:	df000017 	ldw	fp,0(sp)
 801cb20:	dec00104 	addi	sp,sp,4
 801cb24:	f800283a 	ret

0801cb28 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 801cb28:	defffc04 	addi	sp,sp,-16
 801cb2c:	df000315 	stw	fp,12(sp)
 801cb30:	df000304 	addi	fp,sp,12
 801cb34:	e13ffe15 	stw	r4,-8(fp)
 801cb38:	2805883a 	mov	r2,r5
 801cb3c:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801cb40:	e0bffe17 	ldw	r2,-8(fp)
 801cb44:	10800204 	addi	r2,r2,8
 801cb48:	10800037 	ldwio	r2,0(r2)
 801cb4c:	e0bfff15 	stw	r2,-4(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 801cb50:	e0bffd03 	ldbu	r2,-12(fp)
 801cb54:	10800098 	cmpnei	r2,r2,2
 801cb58:	1000091e 	bne	r2,zero,801cb80 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 801cb5c:	e0bfff17 	ldw	r2,-4(fp)
 801cb60:	10800214 	ori	r2,r2,8
 801cb64:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 801cb68:	e0ffff17 	ldw	r3,-4(fp)
 801cb6c:	00bf8034 	movhi	r2,65024
 801cb70:	10bfffc4 	addi	r2,r2,-1
 801cb74:	1884703a 	and	r2,r3,r2
 801cb78:	e0bfff15 	stw	r2,-4(fp)
 801cb7c:	00001906 	br	801cbe4 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 801cb80:	e0bffd03 	ldbu	r2,-12(fp)
 801cb84:	10800058 	cmpnei	r2,r2,1
 801cb88:	10000a1e 	bne	r2,zero,801cbb4 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 801cb8c:	e0ffff17 	ldw	r3,-4(fp)
 801cb90:	00bffdc4 	movi	r2,-9
 801cb94:	1884703a 	and	r2,r3,r2
 801cb98:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 801cb9c:	e0ffff17 	ldw	r3,-4(fp)
 801cba0:	00bf8034 	movhi	r2,65024
 801cba4:	10bfffc4 	addi	r2,r2,-1
 801cba8:	1884703a 	and	r2,r3,r2
 801cbac:	e0bfff15 	stw	r2,-4(fp)
 801cbb0:	00000c06 	br	801cbe4 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 801cbb4:	e0bffd03 	ldbu	r2,-12(fp)
 801cbb8:	1000081e 	bne	r2,zero,801cbdc <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 801cbbc:	e0ffff17 	ldw	r3,-4(fp)
 801cbc0:	00bffdc4 	movi	r2,-9
 801cbc4:	1884703a 	and	r2,r3,r2
 801cbc8:	e0bfff15 	stw	r2,-4(fp)
    helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 801cbcc:	e0bfff17 	ldw	r2,-4(fp)
 801cbd0:	10808034 	orhi	r2,r2,512
 801cbd4:	e0bfff15 	stw	r2,-4(fp)
 801cbd8:	00000206 	br	801cbe4 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
 801cbdc:	00bffd84 	movi	r2,-10
 801cbe0:	00000506 	br	801cbf8 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 801cbe4:	e0bffe17 	ldw	r2,-8(fp)
 801cbe8:	10800204 	addi	r2,r2,8
 801cbec:	e0ffff17 	ldw	r3,-4(fp)
 801cbf0:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801cbf4:	0005883a 	mov	r2,zero
}
 801cbf8:	e037883a 	mov	sp,fp
 801cbfc:	df000017 	ldw	fp,0(sp)
 801cc00:	dec00104 	addi	sp,sp,4
 801cc04:	f800283a 	ret

0801cc08 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 801cc08:	defffc04 	addi	sp,sp,-16
 801cc0c:	df000315 	stw	fp,12(sp)
 801cc10:	df000304 	addi	fp,sp,12
 801cc14:	e13ffe15 	stw	r4,-8(fp)
 801cc18:	2805883a 	mov	r2,r5
 801cc1c:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 801cc20:	e0bffe17 	ldw	r2,-8(fp)
 801cc24:	10800204 	addi	r2,r2,8
 801cc28:	10800037 	ldwio	r2,0(r2)
 801cc2c:	e0bfff15 	stw	r2,-4(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 801cc30:	e0bffd03 	ldbu	r2,-12(fp)
 801cc34:	1000041e 	bne	r2,zero,801cc48 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 801cc38:	e0bfff17 	ldw	r2,-4(fp)
 801cc3c:	10810014 	ori	r2,r2,1024
 801cc40:	e0bfff15 	stw	r2,-4(fp)
 801cc44:	00000a06 	br	801cc70 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 801cc48:	e0bffd03 	ldbu	r2,-12(fp)
 801cc4c:	10800058 	cmpnei	r2,r2,1
 801cc50:	1000051e 	bne	r2,zero,801cc68 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 801cc54:	e0ffff17 	ldw	r3,-4(fp)
 801cc58:	00beffc4 	movi	r2,-1025
 801cc5c:	1884703a 	and	r2,r3,r2
 801cc60:	e0bfff15 	stw	r2,-4(fp)
 801cc64:	00000206 	br	801cc70 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
 801cc68:	00bffd84 	movi	r2,-10
 801cc6c:	00000506 	br	801cc84 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 801cc70:	e0bffe17 	ldw	r2,-8(fp)
 801cc74:	10800204 	addi	r2,r2,8
 801cc78:	e0ffff17 	ldw	r3,-4(fp)
 801cc7c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 801cc80:	0005883a 	mov	r2,zero

}
 801cc84:	e037883a 	mov	sp,fp
 801cc88:	df000017 	ldw	fp,0(sp)
 801cc8c:	dec00104 	addi	sp,sp,4
 801cc90:	f800283a 	ret

0801cc94 <getPHYSpeed>:
      (((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
    (((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
    (((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
    ((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 801cc94:	defff404 	addi	sp,sp,-48
 801cc98:	dfc00b15 	stw	ra,44(sp)
 801cc9c:	df000a15 	stw	fp,40(sp)
 801cca0:	df000a04 	addi	fp,sp,40
 801cca4:	e13ff715 	stw	r4,-36(fp)

    alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801cca8:	00800044 	movi	r2,1
 801ccac:	e0bffec5 	stb	r2,-5(fp)
    alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 801ccb0:	00800044 	movi	r2,1
 801ccb4:	e0bffe85 	stb	r2,-6(fp)
    alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 801ccb8:	e0bffe83 	ldbu	r2,-6(fp)
 801ccbc:	10c0004c 	andi	r3,r2,1
 801ccc0:	e0bffec3 	ldbu	r2,-5(fp)
 801ccc4:	10800098 	cmpnei	r2,r2,2
 801ccc8:	1000021e 	bne	r2,zero,801ccd4 <getPHYSpeed+0x40>
 801cccc:	00800084 	movi	r2,2
 801ccd0:	00000106 	br	801ccd8 <getPHYSpeed+0x44>
 801ccd4:	0005883a 	mov	r2,zero
 801ccd8:	10c6b03a 	or	r3,r2,r3
 801ccdc:	e0bffec3 	ldbu	r2,-5(fp)
 801cce0:	10800058 	cmpnei	r2,r2,1
 801cce4:	1000021e 	bne	r2,zero,801ccf0 <getPHYSpeed+0x5c>
 801cce8:	00800104 	movi	r2,4
 801ccec:	00000106 	br	801ccf4 <getPHYSpeed+0x60>
 801ccf0:	0005883a 	mov	r2,zero
 801ccf4:	10c6b03a 	or	r3,r2,r3
 801ccf8:	e0bffec3 	ldbu	r2,-5(fp)
 801ccfc:	1000021e 	bne	r2,zero,801cd08 <getPHYSpeed+0x74>
 801cd00:	00800204 	movi	r2,8
 801cd04:	00000106 	br	801cd0c <getPHYSpeed+0x78>
 801cd08:	0005883a 	mov	r2,zero
 801cd0c:	10c6b03a 	or	r3,r2,r3
 801cd10:	e0bffec3 	ldbu	r2,-5(fp)
 801cd14:	108000d8 	cmpnei	r2,r2,3
 801cd18:	1000021e 	bne	r2,zero,801cd24 <getPHYSpeed+0x90>
 801cd1c:	00800074 	movhi	r2,1
 801cd20:	00000106 	br	801cd28 <getPHYSpeed+0x94>
 801cd24:	0005883a 	mov	r2,zero
 801cd28:	10c4b03a 	or	r2,r2,r3
 801cd2c:	e0bfff15 	stw	r2,-4(fp)
    
    alt_tse_phy_info *pphy = 0;
 801cd30:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 801cd34:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_group *pmac_group = 0;
 801cd38:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
 801cd3c:	e03ffa15 	stw	zero,-24(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 801cd40:	e03ff9c5 	stb	zero,-25(fp)
    alt_8 mac_group_index = 0;
 801cd44:	e03ff985 	stb	zero,-26(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 801cd48:	d0a07ac3 	ldbu	r2,-32277(gp)
 801cd4c:	10803fcc 	andi	r2,r2,255
 801cd50:	1000031e 	bne	r2,zero,801cd60 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
 801cd54:	801ec4c0 	call	801ec4c <alt_tse_phy_init>
        is_init = 1;
 801cd58:	00800044 	movi	r2,1
 801cd5c:	d0a07ac5 	stb	r2,-32277(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 801cd60:	e13ff717 	ldw	r4,-36(fp)
 801cd64:	801ca5c0 	call	801ca5c <alt_tse_get_mac_info>
 801cd68:	e0bffc15 	stw	r2,-16(fp)
    
    if(pmac_info == 0) {
 801cd6c:	e0bffc17 	ldw	r2,-16(fp)
 801cd70:	1000481e 	bne	r2,zero,801ce94 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801cd74:	00800044 	movi	r2,1
 801cd78:	e0bffec5 	stb	r2,-5(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801cd7c:	00800044 	movi	r2,1
 801cd80:	e0bffe85 	stb	r2,-6(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 801cd84:	e0bffe83 	ldbu	r2,-6(fp)
 801cd88:	10c0004c 	andi	r3,r2,1
 801cd8c:	e0bffec3 	ldbu	r2,-5(fp)
 801cd90:	10800098 	cmpnei	r2,r2,2
 801cd94:	1000021e 	bne	r2,zero,801cda0 <getPHYSpeed+0x10c>
 801cd98:	00800084 	movi	r2,2
 801cd9c:	00000106 	br	801cda4 <getPHYSpeed+0x110>
 801cda0:	0005883a 	mov	r2,zero
 801cda4:	10c6b03a 	or	r3,r2,r3
 801cda8:	e0bffec3 	ldbu	r2,-5(fp)
 801cdac:	10800058 	cmpnei	r2,r2,1
 801cdb0:	1000021e 	bne	r2,zero,801cdbc <getPHYSpeed+0x128>
 801cdb4:	00800104 	movi	r2,4
 801cdb8:	00000106 	br	801cdc0 <getPHYSpeed+0x12c>
 801cdbc:	0005883a 	mov	r2,zero
 801cdc0:	10c6b03a 	or	r3,r2,r3
 801cdc4:	e0bffec3 	ldbu	r2,-5(fp)
 801cdc8:	1000021e 	bne	r2,zero,801cdd4 <getPHYSpeed+0x140>
 801cdcc:	00800204 	movi	r2,8
 801cdd0:	00000106 	br	801cdd8 <getPHYSpeed+0x144>
 801cdd4:	0005883a 	mov	r2,zero
 801cdd8:	10c6b03a 	or	r3,r2,r3
 801cddc:	e0bffec3 	ldbu	r2,-5(fp)
 801cde0:	108000d8 	cmpnei	r2,r2,3
 801cde4:	1000021e 	bne	r2,zero,801cdf0 <getPHYSpeed+0x15c>
 801cde8:	00800074 	movhi	r2,1
 801cdec:	00000106 	br	801cdf4 <getPHYSpeed+0x160>
 801cdf0:	0005883a 	mov	r2,zero
 801cdf4:	10c4b03a 	or	r2,r2,r3
 801cdf8:	10802034 	orhi	r2,r2,128
 801cdfc:	e0bfff15 	stw	r2,-4(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 801ce00:	e0bffec3 	ldbu	r2,-5(fp)
 801ce04:	108000a0 	cmpeqi	r2,r2,2
 801ce08:	10000e1e 	bne	r2,zero,801ce44 <getPHYSpeed+0x1b0>
 801ce0c:	e0bffec3 	ldbu	r2,-5(fp)
 801ce10:	10800060 	cmpeqi	r2,r2,1
 801ce14:	1000081e 	bne	r2,zero,801ce38 <getPHYSpeed+0x1a4>
 801ce18:	e0bffec3 	ldbu	r2,-5(fp)
 801ce1c:	1000031e 	bne	r2,zero,801ce2c <getPHYSpeed+0x198>
 801ce20:	00820174 	movhi	r2,2053
 801ce24:	1080e004 	addi	r2,r2,896
 801ce28:	00000806 	br	801ce4c <getPHYSpeed+0x1b8>
 801ce2c:	00820174 	movhi	r2,2053
 801ce30:	1080e104 	addi	r2,r2,900
 801ce34:	00000506 	br	801ce4c <getPHYSpeed+0x1b8>
 801ce38:	00820174 	movhi	r2,2053
 801ce3c:	1080e304 	addi	r2,r2,908
 801ce40:	00000206 	br	801ce4c <getPHYSpeed+0x1b8>
 801ce44:	00820174 	movhi	r2,2053
 801ce48:	1080e404 	addi	r2,r2,912
 801ce4c:	e0fffe83 	ldbu	r3,-6(fp)
 801ce50:	18c00058 	cmpnei	r3,r3,1
 801ce54:	1800031e 	bne	r3,zero,801ce64 <getPHYSpeed+0x1d0>
 801ce58:	00c20174 	movhi	r3,2053
 801ce5c:	18c0e604 	addi	r3,r3,920
 801ce60:	00000206 	br	801ce6c <getPHYSpeed+0x1d8>
 801ce64:	00c20174 	movhi	r3,2053
 801ce68:	18c0e804 	addi	r3,r3,928
 801ce6c:	180d883a 	mov	r6,r3
 801ce70:	100b883a 	mov	r5,r2
 801ce74:	01020174 	movhi	r4,2053
 801ce78:	2100ea04 	addi	r4,r4,936
 801ce7c:	800325c0 	call	800325c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 801ce80:	01020174 	movhi	r4,2053
 801ce84:	21010204 	addi	r4,r4,1032
 801ce88:	80033800 	call	8003380 <puts>
        return result;
 801ce8c:	e0bfff17 	ldw	r2,-4(fp)
 801ce90:	00021906 	br	801d6f8 <getPHYSpeed+0xa64>
    }
    
    pphy = pmac_info->pphy_info;
 801ce94:	e0bffc17 	ldw	r2,-16(fp)
 801ce98:	10800117 	ldw	r2,4(r2)
 801ce9c:	e0bffd15 	stw	r2,-12(fp)
    pmac_group = pmac_info->pmac_group;
 801cea0:	e0bffc17 	ldw	r2,-16(fp)
 801cea4:	10800317 	ldw	r2,12(r2)
 801cea8:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
 801ceac:	e0bffc17 	ldw	r2,-16(fp)
 801ceb0:	10800217 	ldw	r2,8(r2)
 801ceb4:	e0bffa15 	stw	r2,-24(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801ceb8:	e13ffc17 	ldw	r4,-16(fp)
 801cebc:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801cec0:	e0bff9c5 	stb	r2,-25(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801cec4:	e13ffb17 	ldw	r4,-20(fp)
 801cec8:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801cecc:	e0bff985 	stb	r2,-26(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 801ced0:	e0bffb17 	ldw	r2,-20(fp)
 801ced4:	10800117 	ldw	r2,4(r2)
 801ced8:	10800217 	ldw	r2,8(r2)
 801cedc:	10800303 	ldbu	r2,12(r2)
 801cee0:	10803fcc 	andi	r2,r2,255
 801cee4:	10005a1e 	bne	r2,zero,801d050 <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801cee8:	00800044 	movi	r2,1
 801ceec:	e0bffec5 	stb	r2,-5(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801cef0:	00800044 	movi	r2,1
 801cef4:	e0bffe85 	stb	r2,-6(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 801cef8:	e0bffe83 	ldbu	r2,-6(fp)
 801cefc:	10c0004c 	andi	r3,r2,1
 801cf00:	e0bffec3 	ldbu	r2,-5(fp)
 801cf04:	10800098 	cmpnei	r2,r2,2
 801cf08:	1000021e 	bne	r2,zero,801cf14 <getPHYSpeed+0x280>
 801cf0c:	00800084 	movi	r2,2
 801cf10:	00000106 	br	801cf18 <getPHYSpeed+0x284>
 801cf14:	0005883a 	mov	r2,zero
 801cf18:	10c6b03a 	or	r3,r2,r3
 801cf1c:	e0bffec3 	ldbu	r2,-5(fp)
 801cf20:	10800058 	cmpnei	r2,r2,1
 801cf24:	1000021e 	bne	r2,zero,801cf30 <getPHYSpeed+0x29c>
 801cf28:	00800104 	movi	r2,4
 801cf2c:	00000106 	br	801cf34 <getPHYSpeed+0x2a0>
 801cf30:	0005883a 	mov	r2,zero
 801cf34:	10c6b03a 	or	r3,r2,r3
 801cf38:	e0bffec3 	ldbu	r2,-5(fp)
 801cf3c:	1000021e 	bne	r2,zero,801cf48 <getPHYSpeed+0x2b4>
 801cf40:	00800204 	movi	r2,8
 801cf44:	00000106 	br	801cf4c <getPHYSpeed+0x2b8>
 801cf48:	0005883a 	mov	r2,zero
 801cf4c:	10c6b03a 	or	r3,r2,r3
 801cf50:	e0bffec3 	ldbu	r2,-5(fp)
 801cf54:	108000d8 	cmpnei	r2,r2,3
 801cf58:	1000021e 	bne	r2,zero,801cf64 <getPHYSpeed+0x2d0>
 801cf5c:	00800074 	movhi	r2,1
 801cf60:	00000106 	br	801cf68 <getPHYSpeed+0x2d4>
 801cf64:	0005883a 	mov	r2,zero
 801cf68:	10c4b03a 	or	r2,r2,r3
 801cf6c:	10801034 	orhi	r2,r2,64
 801cf70:	e0bfff15 	stw	r2,-4(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 801cf74:	010003f4 	movhi	r4,15
 801cf78:	21109004 	addi	r4,r4,16960
 801cf7c:	803bb580 	call	803bb58 <usleep>
        if(psys->tse_phy_cfg) {
 801cf80:	e0bffa17 	ldw	r2,-24(fp)
 801cf84:	10801217 	ldw	r2,72(r2)
 801cf88:	10000d26 	beq	r2,zero,801cfc0 <getPHYSpeed+0x32c>
            tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 801cf8c:	e0bff987 	ldb	r2,-26(fp)
 801cf90:	e0fff9c7 	ldb	r3,-25(fp)
 801cf94:	180d883a 	mov	r6,r3
 801cf98:	100b883a 	mov	r5,r2
 801cf9c:	01020174 	movhi	r4,2053
 801cfa0:	21011304 	addi	r4,r4,1100
 801cfa4:	800325c0 	call	800325c <printf>
            result = psys->tse_phy_cfg(pmac);
 801cfa8:	e0bffa17 	ldw	r2,-24(fp)
 801cfac:	10801217 	ldw	r2,72(r2)
 801cfb0:	e13ff717 	ldw	r4,-36(fp)
 801cfb4:	103ee83a 	callr	r2
 801cfb8:	e0bfff15 	stw	r2,-4(fp)
 801cfbc:	00002206 	br	801d048 <getPHYSpeed+0x3b4>
        }
        else {
            tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 801cfc0:	e13ff987 	ldb	r4,-26(fp)
 801cfc4:	e0bffec3 	ldbu	r2,-5(fp)
 801cfc8:	108000a0 	cmpeqi	r2,r2,2
 801cfcc:	10000e1e 	bne	r2,zero,801d008 <getPHYSpeed+0x374>
 801cfd0:	e0bffec3 	ldbu	r2,-5(fp)
 801cfd4:	10800060 	cmpeqi	r2,r2,1
 801cfd8:	1000081e 	bne	r2,zero,801cffc <getPHYSpeed+0x368>
 801cfdc:	e0bffec3 	ldbu	r2,-5(fp)
 801cfe0:	1000031e 	bne	r2,zero,801cff0 <getPHYSpeed+0x35c>
 801cfe4:	00820174 	movhi	r2,2053
 801cfe8:	1080e004 	addi	r2,r2,896
 801cfec:	00000806 	br	801d010 <getPHYSpeed+0x37c>
 801cff0:	00820174 	movhi	r2,2053
 801cff4:	1080e104 	addi	r2,r2,900
 801cff8:	00000506 	br	801d010 <getPHYSpeed+0x37c>
 801cffc:	00820174 	movhi	r2,2053
 801d000:	1080e304 	addi	r2,r2,908
 801d004:	00000206 	br	801d010 <getPHYSpeed+0x37c>
 801d008:	00820174 	movhi	r2,2053
 801d00c:	1080e404 	addi	r2,r2,912
 801d010:	e0fffe83 	ldbu	r3,-6(fp)
 801d014:	18c00058 	cmpnei	r3,r3,1
 801d018:	1800031e 	bne	r3,zero,801d028 <getPHYSpeed+0x394>
 801d01c:	00c20174 	movhi	r3,2053
 801d020:	18c0e604 	addi	r3,r3,920
 801d024:	00000206 	br	801d030 <getPHYSpeed+0x39c>
 801d028:	00c20174 	movhi	r3,2053
 801d02c:	18c0e804 	addi	r3,r3,928
 801d030:	180f883a 	mov	r7,r3
 801d034:	100d883a 	mov	r6,r2
 801d038:	200b883a 	mov	r5,r4
 801d03c:	01020174 	movhi	r4,2053
 801d040:	21012504 	addi	r4,r4,1172
 801d044:	800325c0 	call	800325c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 801d048:	e0bfff17 	ldw	r2,-4(fp)
 801d04c:	0001aa06 	br	801d6f8 <getPHYSpeed+0xa64>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
    
        /* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
        np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801d050:	e0bffb17 	ldw	r2,-20(fp)
 801d054:	10800117 	ldw	r2,4(r2)
 801d058:	10800217 	ldw	r2,8(r2)
 801d05c:	10800017 	ldw	r2,0(r2)
 801d060:	e0bff815 	stw	r2,-32(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 801d064:	e0bffd17 	ldw	r2,-12(fp)
 801d068:	1000491e 	bne	r2,zero,801d190 <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801d06c:	00800044 	movi	r2,1
 801d070:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801d074:	00800044 	movi	r2,1
 801d078:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 801d07c:	e0bffe83 	ldbu	r2,-6(fp)
 801d080:	10c0004c 	andi	r3,r2,1
 801d084:	e0bffec3 	ldbu	r2,-5(fp)
 801d088:	10800098 	cmpnei	r2,r2,2
 801d08c:	1000021e 	bne	r2,zero,801d098 <getPHYSpeed+0x404>
 801d090:	00800084 	movi	r2,2
 801d094:	00000106 	br	801d09c <getPHYSpeed+0x408>
 801d098:	0005883a 	mov	r2,zero
 801d09c:	10c6b03a 	or	r3,r2,r3
 801d0a0:	e0bffec3 	ldbu	r2,-5(fp)
 801d0a4:	10800058 	cmpnei	r2,r2,1
 801d0a8:	1000021e 	bne	r2,zero,801d0b4 <getPHYSpeed+0x420>
 801d0ac:	00800104 	movi	r2,4
 801d0b0:	00000106 	br	801d0b8 <getPHYSpeed+0x424>
 801d0b4:	0005883a 	mov	r2,zero
 801d0b8:	10c6b03a 	or	r3,r2,r3
 801d0bc:	e0bffec3 	ldbu	r2,-5(fp)
 801d0c0:	1000021e 	bne	r2,zero,801d0cc <getPHYSpeed+0x438>
 801d0c4:	00800204 	movi	r2,8
 801d0c8:	00000106 	br	801d0d0 <getPHYSpeed+0x43c>
 801d0cc:	0005883a 	mov	r2,zero
 801d0d0:	10c6b03a 	or	r3,r2,r3
 801d0d4:	e0bffec3 	ldbu	r2,-5(fp)
 801d0d8:	108000d8 	cmpnei	r2,r2,3
 801d0dc:	1000021e 	bne	r2,zero,801d0e8 <getPHYSpeed+0x454>
 801d0e0:	00800074 	movhi	r2,1
 801d0e4:	00000106 	br	801d0ec <getPHYSpeed+0x458>
 801d0e8:	0005883a 	mov	r2,zero
 801d0ec:	10c4b03a 	or	r2,r2,r3
 801d0f0:	10800834 	orhi	r2,r2,32
 801d0f4:	e0bfff15 	stw	r2,-4(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 801d0f8:	e13ff987 	ldb	r4,-26(fp)
 801d0fc:	e17ff9c7 	ldb	r5,-25(fp)
 801d100:	e0bffec3 	ldbu	r2,-5(fp)
 801d104:	108000a0 	cmpeqi	r2,r2,2
 801d108:	10000e1e 	bne	r2,zero,801d144 <getPHYSpeed+0x4b0>
 801d10c:	e0bffec3 	ldbu	r2,-5(fp)
 801d110:	10800060 	cmpeqi	r2,r2,1
 801d114:	1000081e 	bne	r2,zero,801d138 <getPHYSpeed+0x4a4>
 801d118:	e0bffec3 	ldbu	r2,-5(fp)
 801d11c:	1000031e 	bne	r2,zero,801d12c <getPHYSpeed+0x498>
 801d120:	00820174 	movhi	r2,2053
 801d124:	1080e004 	addi	r2,r2,896
 801d128:	00000806 	br	801d14c <getPHYSpeed+0x4b8>
 801d12c:	00820174 	movhi	r2,2053
 801d130:	1080e104 	addi	r2,r2,900
 801d134:	00000506 	br	801d14c <getPHYSpeed+0x4b8>
 801d138:	00820174 	movhi	r2,2053
 801d13c:	1080e304 	addi	r2,r2,908
 801d140:	00000206 	br	801d14c <getPHYSpeed+0x4b8>
 801d144:	00820174 	movhi	r2,2053
 801d148:	1080e404 	addi	r2,r2,912
 801d14c:	e0fffe83 	ldbu	r3,-6(fp)
 801d150:	18c00058 	cmpnei	r3,r3,1
 801d154:	1800031e 	bne	r3,zero,801d164 <getPHYSpeed+0x4d0>
 801d158:	00c20174 	movhi	r3,2053
 801d15c:	18c0e604 	addi	r3,r3,920
 801d160:	00000206 	br	801d16c <getPHYSpeed+0x4d8>
 801d164:	00c20174 	movhi	r3,2053
 801d168:	18c0e804 	addi	r3,r3,928
 801d16c:	d8c00015 	stw	r3,0(sp)
 801d170:	100f883a 	mov	r7,r2
 801d174:	280d883a 	mov	r6,r5
 801d178:	200b883a 	mov	r5,r4
 801d17c:	01020174 	movhi	r4,2053
 801d180:	21013704 	addi	r4,r4,1244
 801d184:	800325c0 	call	800325c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 801d188:	e0bfff17 	ldw	r2,-4(fp)
 801d18c:	00015a06 	br	801d6f8 <getPHYSpeed+0xa64>
        }

        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 801d190:	e0bffc17 	ldw	r2,-16(fp)
 801d194:	10800003 	ldbu	r2,0(r2)
 801d198:	10803fcc 	andi	r2,r2,255
 801d19c:	10800058 	cmpnei	r2,r2,1
 801d1a0:	1000071e 	bne	r2,zero,801d1c0 <getPHYSpeed+0x52c>
            alt_tse_phy_set_adv_1000(pphy, 0);
 801d1a4:	000b883a 	mov	r5,zero
 801d1a8:	e13ffd17 	ldw	r4,-12(fp)
 801d1ac:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 801d1b0:	01427104 	movi	r5,2500
 801d1b4:	e13ffd17 	ldw	r4,-12(fp)
 801d1b8:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
 801d1bc:	00000e06 	br	801d1f8 <getPHYSpeed+0x564>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 801d1c0:	e0bffc17 	ldw	r2,-16(fp)
 801d1c4:	10800003 	ldbu	r2,0(r2)
 801d1c8:	10803fcc 	andi	r2,r2,255
 801d1cc:	10800098 	cmpnei	r2,r2,2
 801d1d0:	1000091e 	bne	r2,zero,801d1f8 <getPHYSpeed+0x564>
            alt_tse_phy_set_adv_100(pphy, 0);
 801d1d4:	000b883a 	mov	r5,zero
 801d1d8:	e13ffd17 	ldw	r4,-12(fp)
 801d1dc:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 801d1e0:	000b883a 	mov	r5,zero
 801d1e4:	e13ffd17 	ldw	r4,-12(fp)
 801d1e8:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 801d1ec:	01427104 	movi	r5,2500
 801d1f0:	e13ffd17 	ldw	r4,-12(fp)
 801d1f4:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
        }
        
        /* check link connection for this PHY */
        if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 801d1f8:	01427104 	movi	r5,2500
 801d1fc:	e13ffd17 	ldw	r4,-12(fp)
 801d200:	801ef1c0 	call	801ef1c <alt_tse_phy_check_link>
 801d204:	10bfffd8 	cmpnei	r2,r2,-1
 801d208:	1000491e 	bne	r2,zero,801d330 <getPHYSpeed+0x69c>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801d20c:	00800044 	movi	r2,1
 801d210:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801d214:	00800044 	movi	r2,1
 801d218:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 801d21c:	e0bffe83 	ldbu	r2,-6(fp)
 801d220:	10c0004c 	andi	r3,r2,1
 801d224:	e0bffec3 	ldbu	r2,-5(fp)
 801d228:	10800098 	cmpnei	r2,r2,2
 801d22c:	1000021e 	bne	r2,zero,801d238 <getPHYSpeed+0x5a4>
 801d230:	00800084 	movi	r2,2
 801d234:	00000106 	br	801d23c <getPHYSpeed+0x5a8>
 801d238:	0005883a 	mov	r2,zero
 801d23c:	10c6b03a 	or	r3,r2,r3
 801d240:	e0bffec3 	ldbu	r2,-5(fp)
 801d244:	10800058 	cmpnei	r2,r2,1
 801d248:	1000021e 	bne	r2,zero,801d254 <getPHYSpeed+0x5c0>
 801d24c:	00800104 	movi	r2,4
 801d250:	00000106 	br	801d258 <getPHYSpeed+0x5c4>
 801d254:	0005883a 	mov	r2,zero
 801d258:	10c6b03a 	or	r3,r2,r3
 801d25c:	e0bffec3 	ldbu	r2,-5(fp)
 801d260:	1000021e 	bne	r2,zero,801d26c <getPHYSpeed+0x5d8>
 801d264:	00800204 	movi	r2,8
 801d268:	00000106 	br	801d270 <getPHYSpeed+0x5dc>
 801d26c:	0005883a 	mov	r2,zero
 801d270:	10c6b03a 	or	r3,r2,r3
 801d274:	e0bffec3 	ldbu	r2,-5(fp)
 801d278:	108000d8 	cmpnei	r2,r2,3
 801d27c:	1000021e 	bne	r2,zero,801d288 <getPHYSpeed+0x5f4>
 801d280:	00800074 	movhi	r2,1
 801d284:	00000106 	br	801d28c <getPHYSpeed+0x5f8>
 801d288:	0005883a 	mov	r2,zero
 801d28c:	10c4b03a 	or	r2,r2,r3
 801d290:	10800234 	orhi	r2,r2,8
 801d294:	e0bfff15 	stw	r2,-4(fp)
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 801d298:	e13ff987 	ldb	r4,-26(fp)
 801d29c:	e17ff9c7 	ldb	r5,-25(fp)
 801d2a0:	e0bffec3 	ldbu	r2,-5(fp)
 801d2a4:	108000a0 	cmpeqi	r2,r2,2
 801d2a8:	10000e1e 	bne	r2,zero,801d2e4 <getPHYSpeed+0x650>
 801d2ac:	e0bffec3 	ldbu	r2,-5(fp)
 801d2b0:	10800060 	cmpeqi	r2,r2,1
 801d2b4:	1000081e 	bne	r2,zero,801d2d8 <getPHYSpeed+0x644>
 801d2b8:	e0bffec3 	ldbu	r2,-5(fp)
 801d2bc:	1000031e 	bne	r2,zero,801d2cc <getPHYSpeed+0x638>
 801d2c0:	00820174 	movhi	r2,2053
 801d2c4:	1080e004 	addi	r2,r2,896
 801d2c8:	00000806 	br	801d2ec <getPHYSpeed+0x658>
 801d2cc:	00820174 	movhi	r2,2053
 801d2d0:	1080e104 	addi	r2,r2,900
 801d2d4:	00000506 	br	801d2ec <getPHYSpeed+0x658>
 801d2d8:	00820174 	movhi	r2,2053
 801d2dc:	1080e304 	addi	r2,r2,908
 801d2e0:	00000206 	br	801d2ec <getPHYSpeed+0x658>
 801d2e4:	00820174 	movhi	r2,2053
 801d2e8:	1080e404 	addi	r2,r2,912
 801d2ec:	e0fffe83 	ldbu	r3,-6(fp)
 801d2f0:	18c00058 	cmpnei	r3,r3,1
 801d2f4:	1800031e 	bne	r3,zero,801d304 <getPHYSpeed+0x670>
 801d2f8:	00c20174 	movhi	r3,2053
 801d2fc:	18c0e604 	addi	r3,r3,920
 801d300:	00000206 	br	801d30c <getPHYSpeed+0x678>
 801d304:	00c20174 	movhi	r3,2053
 801d308:	18c0e804 	addi	r3,r3,928
 801d30c:	d8c00015 	stw	r3,0(sp)
 801d310:	100f883a 	mov	r7,r2
 801d314:	280d883a 	mov	r6,r5
 801d318:	200b883a 	mov	r5,r4
 801d31c:	01020174 	movhi	r4,2053
 801d320:	21014804 	addi	r4,r4,1312
 801d324:	800325c0 	call	800325c <printf>
                                                                             speed == TSE_PHY_SPEED_100 ? "100" :
                                                                             speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                             duplex == 1 ? "Full" : "Half");
            return result;
 801d328:	e0bfff17 	ldw	r2,-4(fp)
 801d32c:	0000f206 	br	801d6f8 <getPHYSpeed+0xa64>
        }

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 801d330:	e0bff817 	ldw	r2,-32(fp)
 801d334:	10801004 	addi	r2,r2,64
 801d338:	e0fffd17 	ldw	r3,-12(fp)
 801d33c:	18c00003 	ldbu	r3,0(r3)
 801d340:	18c03fcc 	andi	r3,r3,255
 801d344:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
        #else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 801d348:	d8000015 	stw	zero,0(sp)
 801d34c:	01c00044 	movi	r7,1
 801d350:	01800384 	movi	r6,14
 801d354:	000b883a 	mov	r5,zero
 801d358:	e13ffd17 	ldw	r4,-12(fp)
 801d35c:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 801d360:	e0bffd17 	ldw	r2,-12(fp)
 801d364:	10800517 	ldw	r2,20(r2)
 801d368:	10002b1e 	bne	r2,zero,801d418 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 801d36c:	e0bff987 	ldb	r2,-26(fp)
 801d370:	e0fff9c7 	ldb	r3,-25(fp)
 801d374:	180d883a 	mov	r6,r3
 801d378:	100b883a 	mov	r5,r2
 801d37c:	01020174 	movhi	r4,2053
 801d380:	21015c04 	addi	r4,r4,1392
 801d384:	800325c0 	call	800325c <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801d388:	00800044 	movi	r2,1
 801d38c:	e0bffec5 	stb	r2,-5(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801d390:	00800044 	movi	r2,1
 801d394:	e0bffe85 	stb	r2,-6(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 801d398:	e0bffe83 	ldbu	r2,-6(fp)
 801d39c:	10c0004c 	andi	r3,r2,1
 801d3a0:	e0bffec3 	ldbu	r2,-5(fp)
 801d3a4:	10800098 	cmpnei	r2,r2,2
 801d3a8:	1000021e 	bne	r2,zero,801d3b4 <getPHYSpeed+0x720>
 801d3ac:	00800084 	movi	r2,2
 801d3b0:	00000106 	br	801d3b8 <getPHYSpeed+0x724>
 801d3b4:	0005883a 	mov	r2,zero
 801d3b8:	10c6b03a 	or	r3,r2,r3
 801d3bc:	e0bffec3 	ldbu	r2,-5(fp)
 801d3c0:	10800058 	cmpnei	r2,r2,1
 801d3c4:	1000021e 	bne	r2,zero,801d3d0 <getPHYSpeed+0x73c>
 801d3c8:	00800104 	movi	r2,4
 801d3cc:	00000106 	br	801d3d4 <getPHYSpeed+0x740>
 801d3d0:	0005883a 	mov	r2,zero
 801d3d4:	10c6b03a 	or	r3,r2,r3
 801d3d8:	e0bffec3 	ldbu	r2,-5(fp)
 801d3dc:	1000021e 	bne	r2,zero,801d3e8 <getPHYSpeed+0x754>
 801d3e0:	00800204 	movi	r2,8
 801d3e4:	00000106 	br	801d3ec <getPHYSpeed+0x758>
 801d3e8:	0005883a 	mov	r2,zero
 801d3ec:	10c6b03a 	or	r3,r2,r3
 801d3f0:	e0bffec3 	ldbu	r2,-5(fp)
 801d3f4:	108000d8 	cmpnei	r2,r2,3
 801d3f8:	1000021e 	bne	r2,zero,801d404 <getPHYSpeed+0x770>
 801d3fc:	00800074 	movhi	r2,1
 801d400:	00000106 	br	801d408 <getPHYSpeed+0x774>
 801d404:	0005883a 	mov	r2,zero
 801d408:	10c4b03a 	or	r2,r2,r3
 801d40c:	10800134 	orhi	r2,r2,4
 801d410:	e0bfff15 	stw	r2,-4(fp)
 801d414:	00009306 	br	801d664 <getPHYSpeed+0x9d0>
        }
        // retrieve duplex information from PHY
        else
        {
            if(pphy->pphy_profile->link_status_read)
 801d418:	e0bffd17 	ldw	r2,-12(fp)
 801d41c:	10800517 	ldw	r2,20(r2)
 801d420:	10801817 	ldw	r2,96(r2)
 801d424:	10002526 	beq	r2,zero,801d4bc <getPHYSpeed+0x828>
            {
                result = pphy->pphy_profile->link_status_read(pmac_group_base);
 801d428:	e0bffd17 	ldw	r2,-12(fp)
 801d42c:	10800517 	ldw	r2,20(r2)
 801d430:	10801817 	ldw	r2,96(r2)
 801d434:	e13ff817 	ldw	r4,-32(fp)
 801d438:	103ee83a 	callr	r2
 801d43c:	e0bfff15 	stw	r2,-4(fp)
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 801d440:	e0bfff17 	ldw	r2,-4(fp)
 801d444:	1080008c 	andi	r2,r2,2
 801d448:	10000c1e 	bne	r2,zero,801d47c <getPHYSpeed+0x7e8>
                        (result & 0x04) ? TSE_PHY_SPEED_100  :
 801d44c:	e0bfff17 	ldw	r2,-4(fp)
 801d450:	1080010c 	andi	r2,r2,4
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 801d454:	1000071e 	bne	r2,zero,801d474 <getPHYSpeed+0x7e0>
                        (result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
 801d458:	e0bfff17 	ldw	r2,-4(fp)
 801d45c:	1080020c 	andi	r2,r2,8
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 801d460:	10000226 	beq	r2,zero,801d46c <getPHYSpeed+0x7d8>
 801d464:	0005883a 	mov	r2,zero
 801d468:	00000506 	br	801d480 <getPHYSpeed+0x7ec>
 801d46c:	008000c4 	movi	r2,3
 801d470:	00000306 	br	801d480 <getPHYSpeed+0x7ec>
 801d474:	00800044 	movi	r2,1
 801d478:	00000106 	br	801d480 <getPHYSpeed+0x7ec>
 801d47c:	00800084 	movi	r2,2
 801d480:	e0bffec5 	stb	r2,-5(fp)
                duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 801d484:	e0bfff17 	ldw	r2,-4(fp)
 801d488:	1080004c 	andi	r2,r2,1
 801d48c:	e0bffe85 	stb	r2,-6(fp)
                
                if(result & ALT_TSE_E_INVALID_SPEED)
 801d490:	e0bfff17 	ldw	r2,-4(fp)
 801d494:	1080006c 	andhi	r2,r2,1
 801d498:	10007226 	beq	r2,zero,801d664 <getPHYSpeed+0x9d0>
                {
                    tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 801d49c:	e0bff987 	ldb	r2,-26(fp)
 801d4a0:	e0fff9c7 	ldb	r3,-25(fp)
 801d4a4:	180d883a 	mov	r6,r3
 801d4a8:	100b883a 	mov	r5,r2
 801d4ac:	01020174 	movhi	r4,2053
 801d4b0:	21016a04 	addi	r4,r4,1448
 801d4b4:	800325c0 	call	800325c <printf>
 801d4b8:	00006a06 	br	801d664 <getPHYSpeed+0x9d0>
                }
            }
            else if(pphy->pphy_profile->status_reg_location == 0)
 801d4bc:	e0bffd17 	ldw	r2,-12(fp)
 801d4c0:	10800517 	ldw	r2,20(r2)
 801d4c4:	10801583 	ldbu	r2,86(r2)
 801d4c8:	10803fcc 	andi	r2,r2,255
 801d4cc:	10002b1e 	bne	r2,zero,801d57c <getPHYSpeed+0x8e8>
            {
                tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 801d4d0:	e0bff987 	ldb	r2,-26(fp)
 801d4d4:	e0fff9c7 	ldb	r3,-25(fp)
 801d4d8:	180d883a 	mov	r6,r3
 801d4dc:	100b883a 	mov	r5,r2
 801d4e0:	01020174 	movhi	r4,2053
 801d4e4:	21017704 	addi	r4,r4,1500
 801d4e8:	800325c0 	call	800325c <printf>
                speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 801d4ec:	00800044 	movi	r2,1
 801d4f0:	e0bffec5 	stb	r2,-5(fp)
                duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 801d4f4:	00800044 	movi	r2,1
 801d4f8:	e0bffe85 	stb	r2,-6(fp)
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 801d4fc:	e0bffe83 	ldbu	r2,-6(fp)
 801d500:	10c0004c 	andi	r3,r2,1
 801d504:	e0bffec3 	ldbu	r2,-5(fp)
 801d508:	10800098 	cmpnei	r2,r2,2
 801d50c:	1000021e 	bne	r2,zero,801d518 <getPHYSpeed+0x884>
 801d510:	00800084 	movi	r2,2
 801d514:	00000106 	br	801d51c <getPHYSpeed+0x888>
 801d518:	0005883a 	mov	r2,zero
 801d51c:	10c6b03a 	or	r3,r2,r3
 801d520:	e0bffec3 	ldbu	r2,-5(fp)
 801d524:	10800058 	cmpnei	r2,r2,1
 801d528:	1000021e 	bne	r2,zero,801d534 <getPHYSpeed+0x8a0>
 801d52c:	00800104 	movi	r2,4
 801d530:	00000106 	br	801d538 <getPHYSpeed+0x8a4>
 801d534:	0005883a 	mov	r2,zero
 801d538:	10c6b03a 	or	r3,r2,r3
 801d53c:	e0bffec3 	ldbu	r2,-5(fp)
 801d540:	1000021e 	bne	r2,zero,801d54c <getPHYSpeed+0x8b8>
 801d544:	00800204 	movi	r2,8
 801d548:	00000106 	br	801d550 <getPHYSpeed+0x8bc>
 801d54c:	0005883a 	mov	r2,zero
 801d550:	10c6b03a 	or	r3,r2,r3
 801d554:	e0bffec3 	ldbu	r2,-5(fp)
 801d558:	108000d8 	cmpnei	r2,r2,3
 801d55c:	1000021e 	bne	r2,zero,801d568 <getPHYSpeed+0x8d4>
 801d560:	00800074 	movhi	r2,1
 801d564:	00000106 	br	801d56c <getPHYSpeed+0x8d8>
 801d568:	0005883a 	mov	r2,zero
 801d56c:	10c4b03a 	or	r2,r2,r3
 801d570:	108000b4 	orhi	r2,r2,2
 801d574:	e0bfff15 	stw	r2,-4(fp)
 801d578:	00003a06 	br	801d664 <getPHYSpeed+0x9d0>
            }
            else
            {
                /* extract connection speed and duplex information */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 801d57c:	e0bffd17 	ldw	r2,-12(fp)
 801d580:	10800517 	ldw	r2,20(r2)
 801d584:	10801583 	ldbu	r2,86(r2)
 801d588:	10c03fcc 	andi	r3,r2,255
 801d58c:	e0bffd17 	ldw	r2,-12(fp)
 801d590:	10800517 	ldw	r2,20(r2)
 801d594:	108015c3 	ldbu	r2,87(r2)
 801d598:	10803fcc 	andi	r2,r2,255
 801d59c:	01c00084 	movi	r7,2
 801d5a0:	100d883a 	mov	r6,r2
 801d5a4:	180b883a 	mov	r5,r3
 801d5a8:	e13ffd17 	ldw	r4,-12(fp)
 801d5ac:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801d5b0:	e0bffec5 	stb	r2,-5(fp)
                duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 801d5b4:	e0bffd17 	ldw	r2,-12(fp)
 801d5b8:	10800517 	ldw	r2,20(r2)
 801d5bc:	10801583 	ldbu	r2,86(r2)
 801d5c0:	10c03fcc 	andi	r3,r2,255
 801d5c4:	e0bffd17 	ldw	r2,-12(fp)
 801d5c8:	10800517 	ldw	r2,20(r2)
 801d5cc:	10801603 	ldbu	r2,88(r2)
 801d5d0:	10803fcc 	andi	r2,r2,255
 801d5d4:	01c00044 	movi	r7,1
 801d5d8:	100d883a 	mov	r6,r2
 801d5dc:	180b883a 	mov	r5,r3
 801d5e0:	e13ffd17 	ldw	r4,-12(fp)
 801d5e4:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801d5e8:	e0bffe85 	stb	r2,-6(fp)
                
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 801d5ec:	e0bffe83 	ldbu	r2,-6(fp)
 801d5f0:	10c0004c 	andi	r3,r2,1
 801d5f4:	e0bffec3 	ldbu	r2,-5(fp)
 801d5f8:	10800098 	cmpnei	r2,r2,2
 801d5fc:	1000021e 	bne	r2,zero,801d608 <getPHYSpeed+0x974>
 801d600:	00800084 	movi	r2,2
 801d604:	00000106 	br	801d60c <getPHYSpeed+0x978>
 801d608:	0005883a 	mov	r2,zero
 801d60c:	10c6b03a 	or	r3,r2,r3
 801d610:	e0bffec3 	ldbu	r2,-5(fp)
 801d614:	10800058 	cmpnei	r2,r2,1
 801d618:	1000021e 	bne	r2,zero,801d624 <getPHYSpeed+0x990>
 801d61c:	00800104 	movi	r2,4
 801d620:	00000106 	br	801d628 <getPHYSpeed+0x994>
 801d624:	0005883a 	mov	r2,zero
 801d628:	10c6b03a 	or	r3,r2,r3
 801d62c:	e0bffec3 	ldbu	r2,-5(fp)
 801d630:	1000021e 	bne	r2,zero,801d63c <getPHYSpeed+0x9a8>
 801d634:	00800204 	movi	r2,8
 801d638:	00000106 	br	801d640 <getPHYSpeed+0x9ac>
 801d63c:	0005883a 	mov	r2,zero
 801d640:	10c6b03a 	or	r3,r2,r3
 801d644:	e0bffec3 	ldbu	r2,-5(fp)
 801d648:	108000d8 	cmpnei	r2,r2,3
 801d64c:	1000021e 	bne	r2,zero,801d658 <getPHYSpeed+0x9c4>
 801d650:	00800074 	movhi	r2,1
 801d654:	00000106 	br	801d65c <getPHYSpeed+0x9c8>
 801d658:	0005883a 	mov	r2,zero
 801d65c:	10c4b03a 	or	r2,r2,r3
 801d660:	e0bfff15 	stw	r2,-4(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 801d664:	e13ff987 	ldb	r4,-26(fp)
 801d668:	e17ff9c7 	ldb	r5,-25(fp)
 801d66c:	e0bffec3 	ldbu	r2,-5(fp)
 801d670:	108000a0 	cmpeqi	r2,r2,2
 801d674:	10000e1e 	bne	r2,zero,801d6b0 <getPHYSpeed+0xa1c>
 801d678:	e0bffec3 	ldbu	r2,-5(fp)
 801d67c:	10800060 	cmpeqi	r2,r2,1
 801d680:	1000081e 	bne	r2,zero,801d6a4 <getPHYSpeed+0xa10>
 801d684:	e0bffec3 	ldbu	r2,-5(fp)
 801d688:	1000031e 	bne	r2,zero,801d698 <getPHYSpeed+0xa04>
 801d68c:	00820174 	movhi	r2,2053
 801d690:	1080e004 	addi	r2,r2,896
 801d694:	00000806 	br	801d6b8 <getPHYSpeed+0xa24>
 801d698:	00820174 	movhi	r2,2053
 801d69c:	1080e104 	addi	r2,r2,900
 801d6a0:	00000506 	br	801d6b8 <getPHYSpeed+0xa24>
 801d6a4:	00820174 	movhi	r2,2053
 801d6a8:	1080e304 	addi	r2,r2,908
 801d6ac:	00000206 	br	801d6b8 <getPHYSpeed+0xa24>
 801d6b0:	00820174 	movhi	r2,2053
 801d6b4:	1080e404 	addi	r2,r2,912
 801d6b8:	e0fffe83 	ldbu	r3,-6(fp)
 801d6bc:	18c00058 	cmpnei	r3,r3,1
 801d6c0:	1800031e 	bne	r3,zero,801d6d0 <getPHYSpeed+0xa3c>
 801d6c4:	00c20174 	movhi	r3,2053
 801d6c8:	18c0e604 	addi	r3,r3,920
 801d6cc:	00000206 	br	801d6d8 <getPHYSpeed+0xa44>
 801d6d0:	00c20174 	movhi	r3,2053
 801d6d4:	18c0e804 	addi	r3,r3,928
 801d6d8:	d8c00015 	stw	r3,0(sp)
 801d6dc:	100f883a 	mov	r7,r2
 801d6e0:	280d883a 	mov	r6,r5
 801d6e4:	200b883a 	mov	r5,r4
 801d6e8:	01020174 	movhi	r4,2053
 801d6ec:	21018e04 	addi	r4,r4,1592
 801d6f0:	800325c0 	call	800325c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 801d6f4:	e0bfff17 	ldw	r2,-4(fp)
}
 801d6f8:	e037883a 	mov	sp,fp
 801d6fc:	dfc00117 	ldw	ra,4(sp)
 801d700:	df000017 	ldw	fp,0(sp)
 801d704:	dec00204 	addi	sp,sp,8
 801d708:	f800283a 	ret

0801d70c <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 801d70c:	defffd04 	addi	sp,sp,-12
 801d710:	df000215 	stw	fp,8(sp)
 801d714:	df000204 	addi	fp,sp,8
 801d718:	e13ffe15 	stw	r4,-8(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801d71c:	e0bffe17 	ldw	r2,-8(fp)
 801d720:	10800617 	ldw	r2,24(r2)
 801d724:	10800317 	ldw	r2,12(r2)
 801d728:	10800117 	ldw	r2,4(r2)
 801d72c:	10800217 	ldw	r2,8(r2)
 801d730:	10800017 	ldw	r2,0(r2)
 801d734:	e0bfff15 	stw	r2,-4(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 801d738:	e0bfff17 	ldw	r2,-4(fp)
 801d73c:	10801004 	addi	r2,r2,64
 801d740:	10800037 	ldwio	r2,0(r2)
}
 801d744:	e037883a 	mov	sp,fp
 801d748:	df000017 	ldw	fp,0(sp)
 801d74c:	dec00104 	addi	sp,sp,4
 801d750:	f800283a 	ret

0801d754 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 801d754:	defffc04 	addi	sp,sp,-16
 801d758:	df000315 	stw	fp,12(sp)
 801d75c:	df000304 	addi	fp,sp,12
 801d760:	e13ffe15 	stw	r4,-8(fp)
 801d764:	2805883a 	mov	r2,r5
 801d768:	e0bffd05 	stb	r2,-12(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801d76c:	e0bffe17 	ldw	r2,-8(fp)
 801d770:	10800617 	ldw	r2,24(r2)
 801d774:	10800317 	ldw	r2,12(r2)
 801d778:	10800117 	ldw	r2,4(r2)
 801d77c:	10800217 	ldw	r2,8(r2)
 801d780:	10800017 	ldw	r2,0(r2)
 801d784:	e0bfff15 	stw	r2,-4(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 801d788:	e0bfff17 	ldw	r2,-4(fp)
 801d78c:	10801004 	addi	r2,r2,64
 801d790:	e0fffd03 	ldbu	r3,-12(fp)
 801d794:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 801d798:	0005883a 	mov	r2,zero
}
 801d79c:	e037883a 	mov	sp,fp
 801d7a0:	df000017 	ldw	fp,0(sp)
 801d7a4:	dec00104 	addi	sp,sp,4
 801d7a8:	f800283a 	ret

0801d7ac <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 801d7ac:	defff604 	addi	sp,sp,-40
 801d7b0:	df000915 	stw	fp,36(sp)
 801d7b4:	df000904 	addi	fp,sp,36
 801d7b8:	e13ffb15 	stw	r4,-20(fp)
 801d7bc:	2807883a 	mov	r3,r5
 801d7c0:	300b883a 	mov	r5,r6
 801d7c4:	3809883a 	mov	r4,r7
 801d7c8:	e0800117 	ldw	r2,4(fp)
 801d7cc:	e0fffa05 	stb	r3,-24(fp)
 801d7d0:	2807883a 	mov	r3,r5
 801d7d4:	e0fff905 	stb	r3,-28(fp)
 801d7d8:	2007883a 	mov	r3,r4
 801d7dc:	e0fff805 	stb	r3,-32(fp)
 801d7e0:	e0bff70d 	sth	r2,-36(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801d7e4:	e0bffb17 	ldw	r2,-20(fp)
 801d7e8:	10800617 	ldw	r2,24(r2)
 801d7ec:	10800317 	ldw	r2,12(r2)
 801d7f0:	10800117 	ldw	r2,4(r2)
 801d7f4:	10800217 	ldw	r2,8(r2)
 801d7f8:	10800017 	ldw	r2,0(r2)
 801d7fc:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
 801d800:	e03fff8d 	sth	zero,-2(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 801d804:	e03ffe15 	stw	zero,-8(fp)
 801d808:	00000906 	br	801d830 <alt_tse_phy_wr_mdio_reg+0x84>
    {
        bit_mask <<= 1;
 801d80c:	e0bfff8b 	ldhu	r2,-2(fp)
 801d810:	1085883a 	add	r2,r2,r2
 801d814:	e0bfff8d 	sth	r2,-2(fp)
        bit_mask |= 0x01;        
 801d818:	e0bfff8b 	ldhu	r2,-2(fp)
 801d81c:	10800054 	ori	r2,r2,1
 801d820:	e0bfff8d 	sth	r2,-2(fp)
    for(i = 0; i < bit_length; i++)
 801d824:	e0bffe17 	ldw	r2,-8(fp)
 801d828:	10800044 	addi	r2,r2,1
 801d82c:	e0bffe15 	stw	r2,-8(fp)
 801d830:	e0bff803 	ldbu	r2,-32(fp)
 801d834:	e0fffe17 	ldw	r3,-8(fp)
 801d838:	18bff416 	blt	r3,r2,801d80c <alt_tse_phy_wr_mdio_reg+0x60>
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 801d83c:	e0ffff8b 	ldhu	r3,-2(fp)
 801d840:	e0bff903 	ldbu	r2,-28(fp)
 801d844:	1884983a 	sll	r2,r3,r2
 801d848:	e0bfff8d 	sth	r2,-2(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 801d84c:	e0bffd17 	ldw	r2,-12(fp)
 801d850:	1080a004 	addi	r2,r2,640
 801d854:	e0fffa03 	ldbu	r3,-24(fp)
 801d858:	180690ba 	slli	r3,r3,2
 801d85c:	10c5883a 	add	r2,r2,r3
 801d860:	10800037 	ldwio	r2,0(r2)
 801d864:	e0bffc8d 	sth	r2,-14(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 801d868:	e0bfff8b 	ldhu	r2,-2(fp)
 801d86c:	0084303a 	nor	r2,zero,r2
 801d870:	1007883a 	mov	r3,r2
 801d874:	e0bffc8b 	ldhu	r2,-14(fp)
 801d878:	1884703a 	and	r2,r3,r2
 801d87c:	e0bffc8d 	sth	r2,-14(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 801d880:	e0fff70b 	ldhu	r3,-36(fp)
 801d884:	e0bff903 	ldbu	r2,-28(fp)
 801d888:	1884983a 	sll	r2,r3,r2
 801d88c:	1007883a 	mov	r3,r2
 801d890:	e0bfff8b 	ldhu	r2,-2(fp)
 801d894:	1884703a 	and	r2,r3,r2
 801d898:	1007883a 	mov	r3,r2
 801d89c:	e0bffc8b 	ldhu	r2,-14(fp)
 801d8a0:	1884b03a 	or	r2,r3,r2
 801d8a4:	e0bffc8d 	sth	r2,-14(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 801d8a8:	e0bffd17 	ldw	r2,-12(fp)
 801d8ac:	1080a004 	addi	r2,r2,640
 801d8b0:	e0fffa03 	ldbu	r3,-24(fp)
 801d8b4:	180690ba 	slli	r3,r3,2
 801d8b8:	10c5883a 	add	r2,r2,r3
 801d8bc:	e0fffc8b 	ldhu	r3,-14(fp)
 801d8c0:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 801d8c4:	0005883a 	mov	r2,zero
    
}
 801d8c8:	e037883a 	mov	sp,fp
 801d8cc:	df000017 	ldw	fp,0(sp)
 801d8d0:	dec00104 	addi	sp,sp,4
 801d8d4:	f800283a 	ret

0801d8d8 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 801d8d8:	defff704 	addi	sp,sp,-36
 801d8dc:	df000815 	stw	fp,32(sp)
 801d8e0:	df000804 	addi	fp,sp,32
 801d8e4:	e13ffb15 	stw	r4,-20(fp)
 801d8e8:	2805883a 	mov	r2,r5
 801d8ec:	3009883a 	mov	r4,r6
 801d8f0:	3807883a 	mov	r3,r7
 801d8f4:	e0bffa05 	stb	r2,-24(fp)
 801d8f8:	2005883a 	mov	r2,r4
 801d8fc:	e0bff905 	stb	r2,-28(fp)
 801d900:	1805883a 	mov	r2,r3
 801d904:	e0bff805 	stb	r2,-32(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801d908:	e0bffb17 	ldw	r2,-20(fp)
 801d90c:	10800617 	ldw	r2,24(r2)
 801d910:	10800317 	ldw	r2,12(r2)
 801d914:	10800117 	ldw	r2,4(r2)
 801d918:	10800217 	ldw	r2,8(r2)
 801d91c:	10800017 	ldw	r2,0(r2)
 801d920:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
 801d924:	e03fff15 	stw	zero,-4(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 801d928:	e03ffe15 	stw	zero,-8(fp)
 801d92c:	00000906 	br	801d954 <alt_tse_phy_rd_mdio_reg+0x7c>
    {
        bit_mask <<= 1;
 801d930:	e0bfff17 	ldw	r2,-4(fp)
 801d934:	1085883a 	add	r2,r2,r2
 801d938:	e0bfff15 	stw	r2,-4(fp)
        bit_mask |= 0x01;        
 801d93c:	e0bfff17 	ldw	r2,-4(fp)
 801d940:	10800054 	ori	r2,r2,1
 801d944:	e0bfff15 	stw	r2,-4(fp)
    for(i = 0; i < bit_length; i++)
 801d948:	e0bffe17 	ldw	r2,-8(fp)
 801d94c:	10800044 	addi	r2,r2,1
 801d950:	e0bffe15 	stw	r2,-8(fp)
 801d954:	e0bff803 	ldbu	r2,-32(fp)
 801d958:	e0fffe17 	ldw	r3,-8(fp)
 801d95c:	18bff416 	blt	r3,r2,801d930 <alt_tse_phy_rd_mdio_reg+0x58>
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 801d960:	e0bffd17 	ldw	r2,-12(fp)
 801d964:	1080a004 	addi	r2,r2,640
 801d968:	e0fffa03 	ldbu	r3,-24(fp)
 801d96c:	180690ba 	slli	r3,r3,2
 801d970:	10c5883a 	add	r2,r2,r3
 801d974:	10800037 	ldwio	r2,0(r2)
 801d978:	e0bffc8d 	sth	r2,-14(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 801d97c:	e0fffc8b 	ldhu	r3,-14(fp)
 801d980:	e0bff903 	ldbu	r2,-28(fp)
 801d984:	1885d83a 	sra	r2,r3,r2
 801d988:	e0bffc8d 	sth	r2,-14(fp)
    
    return (temp_data & bit_mask);
 801d98c:	e0fffc8b 	ldhu	r3,-14(fp)
 801d990:	e0bfff17 	ldw	r2,-4(fp)
 801d994:	1884703a 	and	r2,r3,r2
}
 801d998:	e037883a 	mov	sp,fp
 801d99c:	df000017 	ldw	fp,0(sp)
 801d9a0:	dec00104 	addi	sp,sp,4
 801d9a4:	f800283a 	ret

0801d9a8 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 801d9a8:	deff8104 	addi	sp,sp,-508
 801d9ac:	dfc07e15 	stw	ra,504(sp)
 801d9b0:	df007d15 	stw	fp,500(sp)
 801d9b4:	df007d04 	addi	fp,sp,500
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
 801d9b8:	e0bfe704 	addi	r2,fp,-100
 801d9bc:	00c01904 	movi	r3,100
 801d9c0:	180d883a 	mov	r6,r3
 801d9c4:	000b883a 	mov	r5,zero
 801d9c8:	1009883a 	mov	r4,r2
 801d9cc:	8002fa40 	call	8002fa4 <memset>
 801d9d0:	009d9cb4 	movhi	r2,30322
 801d9d4:	10985344 	addi	r2,r2,24909
 801d9d8:	e0bfe715 	stw	r2,-100(fp)
 801d9dc:	00881b34 	movhi	r2,8300
 801d9e0:	109b1944 	addi	r2,r2,27749
 801d9e4:	e0bfe815 	stw	r2,-96(fp)
 801d9e8:	008c5174 	movhi	r2,12613
 801d9ec:	108e0e04 	addi	r2,r2,14392
 801d9f0:	e0bfe915 	stw	r2,-92(fp)
 801d9f4:	00800c74 	movhi	r2,49
 801d9f8:	108c4c44 	addi	r2,r2,12593
 801d9fc:	e0bfea15 	stw	r2,-88(fp)
 801da00:	e0bfeb04 	addi	r2,fp,-84
 801da04:	00c01004 	movi	r3,64
 801da08:	180d883a 	mov	r6,r3
 801da0c:	000b883a 	mov	r5,zero
 801da10:	1009883a 	mov	r4,r2
 801da14:	8002fa40 	call	8002fa4 <memset>
 801da18:	009410c4 	movi	r2,20547
 801da1c:	e0bffb15 	stw	r2,-20(fp)
 801da20:	00800304 	movi	r2,12
 801da24:	e0bffc05 	stb	r2,-16(fp)
 801da28:	00800084 	movi	r2,2
 801da2c:	e0bffc45 	stb	r2,-15(fp)
 801da30:	00800444 	movi	r2,17
 801da34:	e0bffc85 	stb	r2,-14(fp)
 801da38:	00800384 	movi	r2,14
 801da3c:	e0bffcc5 	stb	r2,-13(fp)
 801da40:	00800344 	movi	r2,13
 801da44:	e0bffd05 	stb	r2,-12(fp)
 801da48:	00800284 	movi	r2,10
 801da4c:	e0bffd45 	stb	r2,-11(fp)
 801da50:	008200b4 	movhi	r2,2050
 801da54:	1080ef04 	addi	r2,r2,956
 801da58:	e0bffe15 	stw	r2,-8(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
 801da5c:	e0bfce04 	addi	r2,fp,-200
 801da60:	00c01904 	movi	r3,100
 801da64:	180d883a 	mov	r6,r3
 801da68:	000b883a 	mov	r5,zero
 801da6c:	1009883a 	mov	r4,r2
 801da70:	8002fa40 	call	8002fa4 <memset>
 801da74:	009d9cb4 	movhi	r2,30322
 801da78:	10985344 	addi	r2,r2,24909
 801da7c:	e0bfce15 	stw	r2,-200(fp)
 801da80:	00881b34 	movhi	r2,8300
 801da84:	109b1944 	addi	r2,r2,27749
 801da88:	e0bfcf15 	stw	r2,-196(fp)
 801da8c:	00991874 	movhi	r2,25697
 801da90:	109d5444 	addi	r2,r2,30033
 801da94:	e0bfd015 	stw	r2,-192(fp)
 801da98:	00965234 	movhi	r2,22856
 801da9c:	10940804 	addi	r2,r2,20512
 801daa0:	e0bfd115 	stw	r2,-188(fp)
 801daa4:	00914e34 	movhi	r2,17720
 801daa8:	108e0804 	addi	r2,r2,14368
 801daac:	e0bfd215 	stw	r2,-184(fp)
 801dab0:	008d4d34 	movhi	r2,13620
 801dab4:	108c4c44 	addi	r2,r2,12593
 801dab8:	e0bfd315 	stw	r2,-180(fp)
 801dabc:	e03fd415 	stw	zero,-176(fp)
 801dac0:	e03fd515 	stw	zero,-172(fp)
 801dac4:	e03fd615 	stw	zero,-168(fp)
 801dac8:	e03fd715 	stw	zero,-164(fp)
 801dacc:	e03fd815 	stw	zero,-160(fp)
 801dad0:	e03fd915 	stw	zero,-156(fp)
 801dad4:	e03fda15 	stw	zero,-152(fp)
 801dad8:	e03fdb15 	stw	zero,-148(fp)
 801dadc:	e03fdc15 	stw	zero,-144(fp)
 801dae0:	e03fdd15 	stw	zero,-140(fp)
 801dae4:	e03fde15 	stw	zero,-136(fp)
 801dae8:	e03fdf15 	stw	zero,-132(fp)
 801daec:	e03fe015 	stw	zero,-128(fp)
 801daf0:	e03fe115 	stw	zero,-124(fp)
 801daf4:	009410c4 	movi	r2,20547
 801daf8:	e0bfe215 	stw	r2,-120(fp)
 801dafc:	00800344 	movi	r2,13
 801db00:	e0bfe305 	stb	r2,-116(fp)
 801db04:	00800084 	movi	r2,2
 801db08:	e0bfe345 	stb	r2,-115(fp)
 801db0c:	00800444 	movi	r2,17
 801db10:	e0bfe385 	stb	r2,-114(fp)
 801db14:	00800384 	movi	r2,14
 801db18:	e0bfe3c5 	stb	r2,-113(fp)
 801db1c:	00800344 	movi	r2,13
 801db20:	e0bfe405 	stb	r2,-112(fp)
 801db24:	00800284 	movi	r2,10
 801db28:	e0bfe445 	stb	r2,-111(fp)
 801db2c:	008200b4 	movhi	r2,2050
 801db30:	1080ef04 	addi	r2,r2,956
 801db34:	e0bfe515 	stw	r2,-108(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
 801db38:	e0bfb504 	addi	r2,fp,-300
 801db3c:	00c01904 	movi	r3,100
 801db40:	180d883a 	mov	r6,r3
 801db44:	000b883a 	mov	r5,zero
 801db48:	1009883a 	mov	r4,r2
 801db4c:	8002fa40 	call	8002fa4 <memset>
 801db50:	009a5d34 	movhi	r2,26996
 801db54:	10985384 	addi	r2,r2,24910
 801db58:	e0bfb515 	stw	r2,-300(fp)
 801db5c:	009b1874 	movhi	r2,27745
 801db60:	109b9bc4 	addi	r2,r2,28271
 801db64:	e0bfb615 	stw	r2,-296(fp)
 801db68:	008e1434 	movhi	r2,14416
 801db6c:	10910804 	addi	r2,r2,17440
 801db70:	e0bfb715 	stw	r2,-292(fp)
 801db74:	008d4db4 	movhi	r2,13622
 801db78:	108e0cc4 	addi	r2,r2,14387
 801db7c:	e0bfb815 	stw	r2,-288(fp)
 801db80:	e03fb915 	stw	zero,-284(fp)
 801db84:	e0bfba04 	addi	r2,fp,-280
 801db88:	00c00f04 	movi	r3,60
 801db8c:	180d883a 	mov	r6,r3
 801db90:	000b883a 	mov	r5,zero
 801db94:	1009883a 	mov	r4,r2
 801db98:	8002fa40 	call	8002fa4 <memset>
 801db9c:	00800234 	movhi	r2,8
 801dba0:	108005c4 	addi	r2,r2,23
 801dba4:	e0bfc915 	stw	r2,-220(fp)
 801dba8:	008001c4 	movi	r2,7
 801dbac:	e0bfca05 	stb	r2,-216(fp)
 801dbb0:	00800284 	movi	r2,10
 801dbb4:	e0bfca45 	stb	r2,-215(fp)
 801dbb8:	00800444 	movi	r2,17
 801dbbc:	e0bfca85 	stb	r2,-214(fp)
 801dbc0:	008000c4 	movi	r2,3
 801dbc4:	e0bfcac5 	stb	r2,-213(fp)
 801dbc8:	00800044 	movi	r2,1
 801dbcc:	e0bfcb05 	stb	r2,-212(fp)
 801dbd0:	00800084 	movi	r2,2
 801dbd4:	e0bfcb45 	stb	r2,-211(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
 801dbd8:	e0ff9c04 	addi	r3,fp,-400
 801dbdc:	00820174 	movhi	r2,2053
 801dbe0:	10819a04 	addi	r2,r2,1640
 801dbe4:	01001904 	movi	r4,100
 801dbe8:	200d883a 	mov	r6,r4
 801dbec:	100b883a 	mov	r5,r2
 801dbf0:	1809883a 	mov	r4,r3
 801dbf4:	8002ea40 	call	8002ea4 <memcpy>

    /* -------------------------------------- */
    /* Intel PHY on C10LP EVA board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile PEF7071 = {"Intel PEF7071",       /* National DP83848C                                          */
 801dbf8:	e0ff8304 	addi	r3,fp,-500
 801dbfc:	00820174 	movhi	r2,2053
 801dc00:	1081b304 	addi	r2,r2,1740
 801dc04:	01001904 	movi	r4,100
 801dc08:	200d883a 	mov	r6,r4
 801dc0c:	100b883a 	mov	r5,r2
 801dc10:	1809883a 	mov	r4,r3
 801dc14:	8002ea40 	call	8002ea4 <memcpy>
                           &PEF7071_config,               /* configure PEF7071                                          */
                           &PEF7071_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 801dc18:	e0bfe704 	addi	r2,fp,-100
 801dc1c:	1009883a 	mov	r4,r2
 801dc20:	801bcc40 	call	801bcc4 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 801dc24:	e0bfce04 	addi	r2,fp,-200
 801dc28:	1009883a 	mov	r4,r2
 801dc2c:	801bcc40 	call	801bcc4 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 801dc30:	e0bfb504 	addi	r2,fp,-300
 801dc34:	1009883a 	mov	r4,r2
 801dc38:	801bcc40 	call	801bcc4 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 801dc3c:	e0bf9c04 	addi	r2,fp,-400
 801dc40:	1009883a 	mov	r4,r2
 801dc44:	801bcc40 	call	801bcc4 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&PEF7071);
 801dc48:	e0bf8304 	addi	r2,fp,-500
 801dc4c:	1009883a 	mov	r4,r2
 801dc50:	801bcc40 	call	801bcc4 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 801dc54:	d0a07a03 	ldbu	r2,-32280(gp)
 801dc58:	10803fcc 	andi	r2,r2,255
}
 801dc5c:	e037883a 	mov	sp,fp
 801dc60:	dfc00117 	ldw	ra,4(sp)
 801dc64:	df000017 	ldw	fp,0(sp)
 801dc68:	dec00204 	addi	sp,sp,8
 801dc6c:	f800283a 	ret

0801dc70 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 801dc70:	defffd04 	addi	sp,sp,-12
 801dc74:	dfc00215 	stw	ra,8(sp)
 801dc78:	df000115 	stw	fp,4(sp)
 801dc7c:	df000104 	addi	fp,sp,4
   
    alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 801dc80:	d0a07a03 	ldbu	r2,-32280(gp)
 801dc84:	10803fcc 	andi	r2,r2,255
 801dc88:	100b883a 	mov	r5,r2
 801dc8c:	01020174 	movhi	r4,2053
 801dc90:	2101cc04 	addi	r4,r4,1840
 801dc94:	800325c0 	call	800325c <printf>
    
    for(i = 0; i < phy_profile_count; i++)
 801dc98:	e03fffc5 	stb	zero,-1(fp)
 801dc9c:	00005d06 	br	801de14 <alt_tse_phy_print_profile+0x1a4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 801dca0:	e0bfffc7 	ldb	r2,-1(fp)
 801dca4:	100b883a 	mov	r5,r2
 801dca8:	01020174 	movhi	r4,2053
 801dcac:	2101db04 	addi	r4,r4,1900
 801dcb0:	800325c0 	call	800325c <printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 801dcb4:	e0bfffc7 	ldb	r2,-1(fp)
 801dcb8:	100690ba 	slli	r3,r2,2
 801dcbc:	008201b4 	movhi	r2,2054
 801dcc0:	1885883a 	add	r2,r3,r2
 801dcc4:	10b95d17 	ldw	r2,-6796(r2)
 801dcc8:	100b883a 	mov	r5,r2
 801dccc:	01020174 	movhi	r4,2053
 801dcd0:	2101e004 	addi	r4,r4,1920
 801dcd4:	800325c0 	call	800325c <printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 801dcd8:	e0bfffc7 	ldb	r2,-1(fp)
 801dcdc:	100690ba 	slli	r3,r2,2
 801dce0:	008201b4 	movhi	r2,2054
 801dce4:	1885883a 	add	r2,r3,r2
 801dce8:	10b95d17 	ldw	r2,-6796(r2)
 801dcec:	10801417 	ldw	r2,80(r2)
 801dcf0:	100b883a 	mov	r5,r2
 801dcf4:	01020174 	movhi	r4,2053
 801dcf8:	2101e604 	addi	r4,r4,1944
 801dcfc:	800325c0 	call	800325c <printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 801dd00:	e0bfffc7 	ldb	r2,-1(fp)
 801dd04:	100690ba 	slli	r3,r2,2
 801dd08:	008201b4 	movhi	r2,2054
 801dd0c:	1885883a 	add	r2,r3,r2
 801dd10:	10b95d17 	ldw	r2,-6796(r2)
 801dd14:	10801503 	ldbu	r2,84(r2)
 801dd18:	10803fcc 	andi	r2,r2,255
 801dd1c:	100b883a 	mov	r5,r2
 801dd20:	01020174 	movhi	r4,2053
 801dd24:	2101ed04 	addi	r4,r4,1972
 801dd28:	800325c0 	call	800325c <printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 801dd2c:	e0bfffc7 	ldb	r2,-1(fp)
 801dd30:	100690ba 	slli	r3,r2,2
 801dd34:	008201b4 	movhi	r2,2054
 801dd38:	1885883a 	add	r2,r3,r2
 801dd3c:	10b95d17 	ldw	r2,-6796(r2)
 801dd40:	10801543 	ldbu	r2,85(r2)
 801dd44:	10803fcc 	andi	r2,r2,255
 801dd48:	100b883a 	mov	r5,r2
 801dd4c:	01020174 	movhi	r4,2053
 801dd50:	2101f404 	addi	r4,r4,2000
 801dd54:	800325c0 	call	800325c <printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 801dd58:	e0bfffc7 	ldb	r2,-1(fp)
 801dd5c:	100690ba 	slli	r3,r2,2
 801dd60:	008201b4 	movhi	r2,2054
 801dd64:	1885883a 	add	r2,r3,r2
 801dd68:	10b95d17 	ldw	r2,-6796(r2)
 801dd6c:	10801583 	ldbu	r2,86(r2)
 801dd70:	10803fcc 	andi	r2,r2,255
 801dd74:	100b883a 	mov	r5,r2
 801dd78:	01020174 	movhi	r4,2053
 801dd7c:	2101fb04 	addi	r4,r4,2028
 801dd80:	800325c0 	call	800325c <printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 801dd84:	e0bfffc7 	ldb	r2,-1(fp)
 801dd88:	100690ba 	slli	r3,r2,2
 801dd8c:	008201b4 	movhi	r2,2054
 801dd90:	1885883a 	add	r2,r3,r2
 801dd94:	10b95d17 	ldw	r2,-6796(r2)
 801dd98:	108015c3 	ldbu	r2,87(r2)
 801dd9c:	10803fcc 	andi	r2,r2,255
 801dda0:	100b883a 	mov	r5,r2
 801dda4:	01020174 	movhi	r4,2053
 801dda8:	21020204 	addi	r4,r4,2056
 801ddac:	800325c0 	call	800325c <printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 801ddb0:	e0bfffc7 	ldb	r2,-1(fp)
 801ddb4:	100690ba 	slli	r3,r2,2
 801ddb8:	008201b4 	movhi	r2,2054
 801ddbc:	1885883a 	add	r2,r3,r2
 801ddc0:	10b95d17 	ldw	r2,-6796(r2)
 801ddc4:	10801603 	ldbu	r2,88(r2)
 801ddc8:	10803fcc 	andi	r2,r2,255
 801ddcc:	100b883a 	mov	r5,r2
 801ddd0:	01020174 	movhi	r4,2053
 801ddd4:	21020804 	addi	r4,r4,2080
 801ddd8:	800325c0 	call	800325c <printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 801dddc:	e0bfffc7 	ldb	r2,-1(fp)
 801dde0:	100690ba 	slli	r3,r2,2
 801dde4:	008201b4 	movhi	r2,2054
 801dde8:	1885883a 	add	r2,r3,r2
 801ddec:	10b95d17 	ldw	r2,-6796(r2)
 801ddf0:	10801643 	ldbu	r2,89(r2)
 801ddf4:	10803fcc 	andi	r2,r2,255
 801ddf8:	100b883a 	mov	r5,r2
 801ddfc:	01020174 	movhi	r4,2053
 801de00:	21020e04 	addi	r4,r4,2104
 801de04:	800325c0 	call	800325c <printf>
    for(i = 0; i < phy_profile_count; i++)
 801de08:	e0bfffc3 	ldbu	r2,-1(fp)
 801de0c:	10800044 	addi	r2,r2,1
 801de10:	e0bfffc5 	stb	r2,-1(fp)
 801de14:	e0ffffc7 	ldb	r3,-1(fp)
 801de18:	d0a07a03 	ldbu	r2,-32280(gp)
 801de1c:	10803fcc 	andi	r2,r2,255
 801de20:	18bf9f16 	blt	r3,r2,801dca0 <alt_tse_phy_print_profile+0x30>
 
    }
    
    return phy_profile_count;
 801de24:	d0a07a03 	ldbu	r2,-32280(gp)
 801de28:	10803fcc 	andi	r2,r2,255
}
 801de2c:	e037883a 	mov	sp,fp
 801de30:	dfc00117 	ldw	ra,4(sp)
 801de34:	df000017 	ldw	fp,0(sp)
 801de38:	dec00204 	addi	sp,sp,8
 801de3c:	f800283a 	ret

0801de40 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 801de40:	defffa04 	addi	sp,sp,-24
 801de44:	dfc00515 	stw	ra,20(sp)
 801de48:	df000415 	stw	fp,16(sp)
 801de4c:	df000404 	addi	fp,sp,16
    
    alt_8 i;
    alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 801de50:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 801de54:	e03fff15 	stw	zero,-4(fp)
    alt_tse_system_info *psys = 0;
 801de58:	e03ffc15 	stw	zero,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 801de5c:	d0207a45 	stb	zero,-32279(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 801de60:	e03ffec5 	stb	zero,-5(fp)
 801de64:	00019606 	br	801e4c0 <alt_tse_mac_group_init+0x680>
        psys = &tse_mac_device[i];
 801de68:	e0bffec7 	ldb	r2,-5(fp)
 801de6c:	10c01324 	muli	r3,r2,76
 801de70:	00820174 	movhi	r2,2053
 801de74:	10906204 	addi	r2,r2,16776
 801de78:	1885883a 	add	r2,r3,r2
 801de7c:	e0bffc15 	stw	r2,-16(fp)

        if((psys->tse_msgdma_tx != 0) && (psys->tse_msgdma_rx != 0)) {        
 801de80:	e0bffc17 	ldw	r2,-16(fp)
 801de84:	10800617 	ldw	r2,24(r2)
 801de88:	10018a26 	beq	r2,zero,801e4b4 <alt_tse_mac_group_init+0x674>
 801de8c:	e0bffc17 	ldw	r2,-16(fp)
 801de90:	10800717 	ldw	r2,28(r2)
 801de94:	10018726 	beq	r2,zero,801e4b4 <alt_tse_mac_group_init+0x674>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 801de98:	d0a07a43 	ldbu	r2,-32279(gp)
 801de9c:	10c03fcc 	andi	r3,r2,255
 801dea0:	e0bffc17 	ldw	r2,-16(fp)
 801dea4:	10800017 	ldw	r2,0(r2)
 801dea8:	100d883a 	mov	r6,r2
 801deac:	180b883a 	mov	r5,r3
 801deb0:	01020174 	movhi	r4,2053
 801deb4:	21021404 	addi	r4,r4,2128
 801deb8:	800325c0 	call	800325c <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 801debc:	01000504 	movi	r4,20
 801dec0:	804a2d80 	call	804a2d8 <malloc>
 801dec4:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
 801dec8:	e0bffd17 	ldw	r2,-12(fp)
 801decc:	1000081e 	bne	r2,zero,801def0 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 801ded0:	d0a07a43 	ldbu	r2,-32279(gp)
 801ded4:	10803fcc 	andi	r2,r2,255
 801ded8:	100b883a 	mov	r5,r2
 801dedc:	01020174 	movhi	r4,2053
 801dee0:	21022004 	addi	r4,r4,2176
 801dee4:	800325c0 	call	800325c <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 801dee8:	00bfffc4 	movi	r2,-1
 801deec:	00017906 	br	801e4d4 <alt_tse_mac_group_init+0x694>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 801def0:	e0bffc17 	ldw	r2,-16(fp)
 801def4:	108003c3 	ldbu	r2,15(r2)
 801def8:	10803fcc 	andi	r2,r2,255
 801defc:	10001226 	beq	r2,zero,801df48 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
 801df00:	e0bffc17 	ldw	r2,-16(fp)
 801df04:	10c00403 	ldbu	r3,16(r2)
 801df08:	e0bffd17 	ldw	r2,-12(fp)
 801df0c:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 801df10:	01020174 	movhi	r4,2053
 801df14:	21022e04 	addi	r4,r4,2232
 801df18:	80033800 	call	8003380 <puts>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 801df1c:	e0bffd17 	ldw	r2,-12(fp)
 801df20:	10800003 	ldbu	r2,0(r2)
 801df24:	10803fcc 	andi	r2,r2,255
 801df28:	100b883a 	mov	r5,r2
 801df2c:	01020174 	movhi	r4,2053
 801df30:	21023904 	addi	r4,r4,2276
 801df34:	800325c0 	call	800325c <printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 801df38:	01020174 	movhi	r4,2053
 801df3c:	21024404 	addi	r4,r4,2320
 801df40:	80033800 	call	8003380 <puts>
 801df44:	00001f06 	br	801dfc4 <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
 801df48:	e0bffc17 	ldw	r2,-16(fp)
 801df4c:	10800443 	ldbu	r2,17(r2)
 801df50:	10803fcc 	andi	r2,r2,255
 801df54:	10001226 	beq	r2,zero,801dfa0 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 801df58:	e0bffc17 	ldw	r2,-16(fp)
 801df5c:	10c00483 	ldbu	r3,18(r2)
 801df60:	e0bffd17 	ldw	r2,-12(fp)
 801df64:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 801df68:	01020174 	movhi	r4,2053
 801df6c:	21024f04 	addi	r4,r4,2364
 801df70:	80033800 	call	8003380 <puts>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 801df74:	01020174 	movhi	r4,2053
 801df78:	21024404 	addi	r4,r4,2320
 801df7c:	80033800 	call	8003380 <puts>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 801df80:	e0bffd17 	ldw	r2,-12(fp)
 801df84:	10800003 	ldbu	r2,0(r2)
 801df88:	10803fcc 	andi	r2,r2,255
 801df8c:	100b883a 	mov	r5,r2
 801df90:	01020174 	movhi	r4,2053
 801df94:	21025904 	addi	r4,r4,2404
 801df98:	800325c0 	call	800325c <printf>
 801df9c:	00000906 	br	801dfc4 <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
 801dfa0:	e0bffd17 	ldw	r2,-12(fp)
 801dfa4:	00c00044 	movi	r3,1
 801dfa8:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 801dfac:	01020174 	movhi	r4,2053
 801dfb0:	21024f04 	addi	r4,r4,2364
 801dfb4:	80033800 	call	8003380 <puts>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 801dfb8:	01020174 	movhi	r4,2053
 801dfbc:	21026404 	addi	r4,r4,2448
 801dfc0:	80033800 	call	8003380 <puts>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 801dfc4:	e03ffe85 	stb	zero,-6(fp)
 801dfc8:	00012506 	br	801e460 <alt_tse_mac_group_init+0x620>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 801dfcc:	01000404 	movi	r4,16
 801dfd0:	804a2d80 	call	804a2d8 <malloc>
 801dfd4:	e0bfff15 	stw	r2,-4(fp)
                if(!pmac_info) {
 801dfd8:	e0bfff17 	ldw	r2,-4(fp)
 801dfdc:	10000a1e 	bne	r2,zero,801e008 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 801dfe0:	d0a07a43 	ldbu	r2,-32279(gp)
 801dfe4:	10803fcc 	andi	r2,r2,255
 801dfe8:	e0fffe87 	ldb	r3,-6(fp)
 801dfec:	180d883a 	mov	r6,r3
 801dff0:	100b883a 	mov	r5,r2
 801dff4:	01020174 	movhi	r4,2053
 801dff8:	21026e04 	addi	r4,r4,2488
 801dffc:	800325c0 	call	800325c <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 801e000:	00bfffc4 	movi	r2,-1
 801e004:	00013306 	br	801e4d4 <alt_tse_mac_group_init+0x694>
                }
                
                pmac_info->pmac_group = pmac_group;
 801e008:	e0bfff17 	ldw	r2,-4(fp)
 801e00c:	e0fffd17 	ldw	r3,-12(fp)
 801e010:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
 801e014:	e0bfff17 	ldw	r2,-4(fp)
 801e018:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 801e01c:	e0fffec7 	ldb	r3,-5(fp)
 801e020:	e0bffe87 	ldb	r2,-6(fp)
 801e024:	1885883a 	add	r2,r3,r2
 801e028:	10c01324 	muli	r3,r2,76
 801e02c:	00820174 	movhi	r2,2053
 801e030:	10906204 	addi	r2,r2,16776
 801e034:	1887883a 	add	r3,r3,r2
 801e038:	e0bfff17 	ldw	r2,-4(fp)
 801e03c:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_msgdma_tx == 0) || (pmac_info->psys_info->tse_msgdma_rx == 0)){                    
 801e040:	e0bfff17 	ldw	r2,-4(fp)
 801e044:	10800217 	ldw	r2,8(r2)
 801e048:	10800617 	ldw	r2,24(r2)
 801e04c:	10000426 	beq	r2,zero,801e060 <alt_tse_mac_group_init+0x220>
 801e050:	e0bfff17 	ldw	r2,-4(fp)
 801e054:	10800217 	ldw	r2,8(r2)
 801e058:	10800717 	ldw	r2,28(r2)
 801e05c:	1000091e 	bne	r2,zero,801e084 <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 801e060:	e0fffec7 	ldb	r3,-5(fp)
 801e064:	e0bffe87 	ldb	r2,-6(fp)
 801e068:	1885883a 	add	r2,r3,r2
 801e06c:	100b883a 	mov	r5,r2
 801e070:	01020174 	movhi	r4,2053
 801e074:	21028004 	addi	r4,r4,2560
 801e078:	800325c0 	call	800325c <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 801e07c:	00bfffc4 	movi	r2,-1
 801e080:	00011406 	br	801e4d4 <alt_tse_mac_group_init+0x694>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 801e084:	e0bfff17 	ldw	r2,-4(fp)
 801e088:	10800217 	ldw	r2,8(r2)
 801e08c:	10800343 	ldbu	r2,13(r2)
 801e090:	10803fcc 	andi	r2,r2,255
 801e094:	10000d26 	beq	r2,zero,801e0cc <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 801e098:	e0bfff17 	ldw	r2,-4(fp)
 801e09c:	10800217 	ldw	r2,8(r2)
 801e0a0:	10800383 	ldbu	r2,14(r2)
 801e0a4:	10803fcc 	andi	r2,r2,255
 801e0a8:	10000426 	beq	r2,zero,801e0bc <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 801e0ac:	e0bfff17 	ldw	r2,-4(fp)
 801e0b0:	00c00084 	movi	r3,2
 801e0b4:	10c00005 	stb	r3,0(r2)
 801e0b8:	00000606 	br	801e0d4 <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 801e0bc:	e0bfff17 	ldw	r2,-4(fp)
 801e0c0:	00c00044 	movi	r3,1
 801e0c4:	10c00005 	stb	r3,0(r2)
 801e0c8:	00000206 	br	801e0d4 <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 801e0cc:	e0bfff17 	ldw	r2,-4(fp)
 801e0d0:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 801e0d4:	e0bfff17 	ldw	r2,-4(fp)
 801e0d8:	10800217 	ldw	r2,8(r2)
 801e0dc:	10800443 	ldbu	r2,17(r2)
 801e0e0:	10803fcc 	andi	r2,r2,255
 801e0e4:	10006826 	beq	r2,zero,801e288 <alt_tse_mac_group_init+0x448>
 801e0e8:	e0bfff17 	ldw	r2,-4(fp)
 801e0ec:	10800217 	ldw	r2,8(r2)
 801e0f0:	108003c3 	ldbu	r2,15(r2)
 801e0f4:	10803fcc 	andi	r2,r2,255
 801e0f8:	1000631e 	bne	r2,zero,801e288 <alt_tse_mac_group_init+0x448>
                    tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 801e0fc:	e0fffe87 	ldb	r3,-6(fp)
 801e100:	e0bfff17 	ldw	r2,-4(fp)
 801e104:	10800217 	ldw	r2,8(r2)
 801e108:	10800017 	ldw	r2,0(r2)
 801e10c:	100d883a 	mov	r6,r2
 801e110:	180b883a 	mov	r5,r3
 801e114:	01020174 	movhi	r4,2053
 801e118:	21028f04 	addi	r4,r4,2620
 801e11c:	800325c0 	call	800325c <printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 801e120:	e13ffe87 	ldb	r4,-6(fp)
 801e124:	e0fffec7 	ldb	r3,-5(fp)
 801e128:	e0bffe87 	ldb	r2,-6(fp)
 801e12c:	1885883a 	add	r2,r3,r2
 801e130:	100d883a 	mov	r6,r2
 801e134:	200b883a 	mov	r5,r4
 801e138:	01020174 	movhi	r4,2053
 801e13c:	21029b04 	addi	r4,r4,2668
 801e140:	800325c0 	call	800325c <printf>
                    
                    switch(pmac_info->mac_type) {
 801e144:	e0bfff17 	ldw	r2,-4(fp)
 801e148:	10800003 	ldbu	r2,0(r2)
 801e14c:	10803fcc 	andi	r2,r2,255
 801e150:	10c000a0 	cmpeqi	r3,r2,2
 801e154:	1800061e 	bne	r3,zero,801e170 <alt_tse_mac_group_init+0x330>
 801e158:	10c000c8 	cmpgei	r3,r2,3
 801e15c:	18001c1e 	bne	r3,zero,801e1d0 <alt_tse_mac_group_init+0x390>
 801e160:	10001326 	beq	r2,zero,801e1b0 <alt_tse_mac_group_init+0x370>
 801e164:	10800060 	cmpeqi	r2,r2,1
 801e168:	1000091e 	bne	r2,zero,801e190 <alt_tse_mac_group_init+0x350>
 801e16c:	00001806 	br	801e1d0 <alt_tse_mac_group_init+0x390>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 801e170:	e0bffe87 	ldb	r2,-6(fp)
 801e174:	01820174 	movhi	r6,2053
 801e178:	3182aa04 	addi	r6,r6,2728
 801e17c:	100b883a 	mov	r5,r2
 801e180:	01020174 	movhi	r4,2053
 801e184:	2102af04 	addi	r4,r4,2748
 801e188:	800325c0 	call	800325c <printf>
                            break;
 801e18c:	00001806 	br	801e1f0 <alt_tse_mac_group_init+0x3b0>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 801e190:	e0bffe87 	ldb	r2,-6(fp)
 801e194:	01820174 	movhi	r6,2053
 801e198:	3182ba04 	addi	r6,r6,2792
 801e19c:	100b883a 	mov	r5,r2
 801e1a0:	01020174 	movhi	r4,2053
 801e1a4:	2102af04 	addi	r4,r4,2748
 801e1a8:	800325c0 	call	800325c <printf>
                            break;
 801e1ac:	00001006 	br	801e1f0 <alt_tse_mac_group_init+0x3b0>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 801e1b0:	e0bffe87 	ldb	r2,-6(fp)
 801e1b4:	01820174 	movhi	r6,2053
 801e1b8:	3182c004 	addi	r6,r6,2816
 801e1bc:	100b883a 	mov	r5,r2
 801e1c0:	01020174 	movhi	r4,2053
 801e1c4:	2102af04 	addi	r4,r4,2748
 801e1c8:	800325c0 	call	800325c <printf>
                            break;
 801e1cc:	00000806 	br	801e1f0 <alt_tse_mac_group_init+0x3b0>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 801e1d0:	e0bffe87 	ldb	r2,-6(fp)
 801e1d4:	01820174 	movhi	r6,2053
 801e1d8:	3180e104 	addi	r6,r6,900
 801e1dc:	100b883a 	mov	r5,r2
 801e1e0:	01020174 	movhi	r4,2053
 801e1e4:	2102af04 	addi	r4,r4,2748
 801e1e8:	800325c0 	call	800325c <printf>
                            break;
 801e1ec:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 801e1f0:	e0bfff17 	ldw	r2,-4(fp)
 801e1f4:	10800217 	ldw	r2,8(r2)
 801e1f8:	108004c3 	ldbu	r2,19(r2)
 801e1fc:	10803fcc 	andi	r2,r2,255
 801e200:	10008d26 	beq	r2,zero,801e438 <alt_tse_mac_group_init+0x5f8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 801e204:	e0fffe87 	ldb	r3,-6(fp)
 801e208:	e0bfff17 	ldw	r2,-4(fp)
 801e20c:	10800217 	ldw	r2,8(r2)
 801e210:	108004c3 	ldbu	r2,19(r2)
 801e214:	10803fcc 	andi	r2,r2,255
 801e218:	10000326 	beq	r2,zero,801e228 <alt_tse_mac_group_init+0x3e8>
 801e21c:	00820174 	movhi	r2,2053
 801e220:	1082c704 	addi	r2,r2,2844
 801e224:	00000206 	br	801e230 <alt_tse_mac_group_init+0x3f0>
 801e228:	00820174 	movhi	r2,2053
 801e22c:	1082c804 	addi	r2,r2,2848
 801e230:	100d883a 	mov	r6,r2
 801e234:	180b883a 	mov	r5,r3
 801e238:	01020174 	movhi	r4,2053
 801e23c:	2102c904 	addi	r4,r4,2852
 801e240:	800325c0 	call	800325c <printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 801e244:	e0fffe87 	ldb	r3,-6(fp)
 801e248:	e0bfff17 	ldw	r2,-4(fp)
 801e24c:	10800217 	ldw	r2,8(r2)
 801e250:	10800503 	ldbu	r2,20(r2)
 801e254:	10803fcc 	andi	r2,r2,255
 801e258:	10000326 	beq	r2,zero,801e268 <alt_tse_mac_group_init+0x428>
 801e25c:	00820174 	movhi	r2,2053
 801e260:	1082c704 	addi	r2,r2,2844
 801e264:	00000206 	br	801e270 <alt_tse_mac_group_init+0x430>
 801e268:	00820174 	movhi	r2,2053
 801e26c:	1082c804 	addi	r2,r2,2848
 801e270:	100d883a 	mov	r6,r2
 801e274:	180b883a 	mov	r5,r3
 801e278:	01020174 	movhi	r4,2053
 801e27c:	2102d404 	addi	r4,r4,2896
 801e280:	800325c0 	call	800325c <printf>
                    if(pmac_info->psys_info->tse_pcs_ena) {
 801e284:	00006c06 	br	801e438 <alt_tse_mac_group_init+0x5f8>
                    }
                }
                else {
                    /* display only once for all MAC, except shared MDIO MACs */
                    if(j == 0) {
 801e288:	e0bffe87 	ldb	r2,-6(fp)
 801e28c:	1000441e 	bne	r2,zero,801e3a0 <alt_tse_mac_group_init+0x560>
                        switch(pmac_info->mac_type) {
 801e290:	e0bfff17 	ldw	r2,-4(fp)
 801e294:	10800003 	ldbu	r2,0(r2)
 801e298:	10803fcc 	andi	r2,r2,255
 801e29c:	10c000a0 	cmpeqi	r3,r2,2
 801e2a0:	1800061e 	bne	r3,zero,801e2bc <alt_tse_mac_group_init+0x47c>
 801e2a4:	10c000c8 	cmpgei	r3,r2,3
 801e2a8:	1800161e 	bne	r3,zero,801e304 <alt_tse_mac_group_init+0x4c4>
 801e2ac:	10000f26 	beq	r2,zero,801e2ec <alt_tse_mac_group_init+0x4ac>
 801e2b0:	10800060 	cmpeqi	r2,r2,1
 801e2b4:	1000071e 	bne	r2,zero,801e2d4 <alt_tse_mac_group_init+0x494>
 801e2b8:	00001206 	br	801e304 <alt_tse_mac_group_init+0x4c4>
                            case ALTERA_TSE_MACLITE_1000:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 801e2bc:	01420174 	movhi	r5,2053
 801e2c0:	2942aa04 	addi	r5,r5,2728
 801e2c4:	01020174 	movhi	r4,2053
 801e2c8:	2102df04 	addi	r4,r4,2940
 801e2cc:	800325c0 	call	800325c <printf>
                                break;
 801e2d0:	00001206 	br	801e31c <alt_tse_mac_group_init+0x4dc>
                            case ALTERA_TSE_MACLITE_10_100:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 801e2d4:	01420174 	movhi	r5,2053
 801e2d8:	2942ba04 	addi	r5,r5,2792
 801e2dc:	01020174 	movhi	r4,2053
 801e2e0:	2102df04 	addi	r4,r4,2940
 801e2e4:	800325c0 	call	800325c <printf>
                                break;
 801e2e8:	00000c06 	br	801e31c <alt_tse_mac_group_init+0x4dc>
                            case ALTERA_TSE_FULL_MAC:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 801e2ec:	01420174 	movhi	r5,2053
 801e2f0:	2942c004 	addi	r5,r5,2816
 801e2f4:	01020174 	movhi	r4,2053
 801e2f8:	2102df04 	addi	r4,r4,2940
 801e2fc:	800325c0 	call	800325c <printf>
                                break;
 801e300:	00000606 	br	801e31c <alt_tse_mac_group_init+0x4dc>
                            default :
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 801e304:	01420174 	movhi	r5,2053
 801e308:	2940e104 	addi	r5,r5,900
 801e30c:	01020174 	movhi	r4,2053
 801e310:	2102df04 	addi	r4,r4,2940
 801e314:	800325c0 	call	800325c <printf>
                                    break;
 801e318:	0001883a 	nop
                }
                        
                        if(pmac_info->psys_info->tse_pcs_ena) {
 801e31c:	e0bfff17 	ldw	r2,-4(fp)
 801e320:	10800217 	ldw	r2,8(r2)
 801e324:	108004c3 	ldbu	r2,19(r2)
 801e328:	10803fcc 	andi	r2,r2,255
 801e32c:	10001c26 	beq	r2,zero,801e3a0 <alt_tse_mac_group_init+0x560>
                            tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 801e330:	e0bfff17 	ldw	r2,-4(fp)
 801e334:	10800217 	ldw	r2,8(r2)
 801e338:	108004c3 	ldbu	r2,19(r2)
 801e33c:	10803fcc 	andi	r2,r2,255
 801e340:	10000326 	beq	r2,zero,801e350 <alt_tse_mac_group_init+0x510>
 801e344:	00820174 	movhi	r2,2053
 801e348:	1082c704 	addi	r2,r2,2844
 801e34c:	00000206 	br	801e358 <alt_tse_mac_group_init+0x518>
 801e350:	00820174 	movhi	r2,2053
 801e354:	1082c804 	addi	r2,r2,2848
 801e358:	100b883a 	mov	r5,r2
 801e35c:	01020174 	movhi	r4,2053
 801e360:	2102ea04 	addi	r4,r4,2984
 801e364:	800325c0 	call	800325c <printf>
                            tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                            
 801e368:	e0bfff17 	ldw	r2,-4(fp)
 801e36c:	10800217 	ldw	r2,8(r2)
 801e370:	10800503 	ldbu	r2,20(r2)
 801e374:	10803fcc 	andi	r2,r2,255
 801e378:	10000326 	beq	r2,zero,801e388 <alt_tse_mac_group_init+0x548>
 801e37c:	00820174 	movhi	r2,2053
 801e380:	1082c704 	addi	r2,r2,2844
 801e384:	00000206 	br	801e390 <alt_tse_mac_group_init+0x550>
 801e388:	00820174 	movhi	r2,2053
 801e38c:	1082c804 	addi	r2,r2,2848
 801e390:	100b883a 	mov	r5,r2
 801e394:	01020174 	movhi	r4,2053
 801e398:	2102f504 	addi	r4,r4,3028
 801e39c:	800325c0 	call	800325c <printf>
                        }
                    }
                    
                    if(pmac_info->psys_info->tse_multichannel_mac) {
 801e3a0:	e0bfff17 	ldw	r2,-4(fp)
 801e3a4:	10800217 	ldw	r2,8(r2)
 801e3a8:	108003c3 	ldbu	r2,15(r2)
 801e3ac:	10803fcc 	andi	r2,r2,255
 801e3b0:	10001326 	beq	r2,zero,801e400 <alt_tse_mac_group_init+0x5c0>
                        tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 801e3b4:	e0fffe87 	ldb	r3,-6(fp)
 801e3b8:	e0bfff17 	ldw	r2,-4(fp)
 801e3bc:	10800217 	ldw	r2,8(r2)
 801e3c0:	10800017 	ldw	r2,0(r2)
 801e3c4:	100d883a 	mov	r6,r2
 801e3c8:	180b883a 	mov	r5,r3
 801e3cc:	01020174 	movhi	r4,2053
 801e3d0:	21030004 	addi	r4,r4,3072
 801e3d4:	800325c0 	call	800325c <printf>
                        tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 801e3d8:	e13ffe87 	ldb	r4,-6(fp)
 801e3dc:	e0fffec7 	ldb	r3,-5(fp)
 801e3e0:	e0bffe87 	ldb	r2,-6(fp)
 801e3e4:	1885883a 	add	r2,r3,r2
 801e3e8:	100d883a 	mov	r6,r2
 801e3ec:	200b883a 	mov	r5,r4
 801e3f0:	01020174 	movhi	r4,2053
 801e3f4:	21030c04 	addi	r4,r4,3120
 801e3f8:	800325c0 	call	800325c <printf>
 801e3fc:	00000e06 	br	801e438 <alt_tse_mac_group_init+0x5f8>
                    }                
                    else {
                        tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 801e400:	e0bfff17 	ldw	r2,-4(fp)
 801e404:	10800217 	ldw	r2,8(r2)
 801e408:	10800017 	ldw	r2,0(r2)
 801e40c:	100b883a 	mov	r5,r2
 801e410:	01020174 	movhi	r4,2053
 801e414:	21031b04 	addi	r4,r4,3180
 801e418:	800325c0 	call	800325c <printf>
                        tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 801e41c:	e0fffec7 	ldb	r3,-5(fp)
 801e420:	e0bffe87 	ldb	r2,-6(fp)
 801e424:	1885883a 	add	r2,r3,r2
 801e428:	100b883a 	mov	r5,r2
 801e42c:	01020174 	movhi	r4,2053
 801e430:	21032704 	addi	r4,r4,3228
 801e434:	800325c0 	call	800325c <printf>
                    }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 801e438:	e0bffe87 	ldb	r2,-6(fp)
 801e43c:	e0fffd17 	ldw	r3,-12(fp)
 801e440:	10800044 	addi	r2,r2,1
 801e444:	100490ba 	slli	r2,r2,2
 801e448:	1885883a 	add	r2,r3,r2
 801e44c:	e0ffff17 	ldw	r3,-4(fp)
 801e450:	10c00015 	stw	r3,0(r2)
            for(j = 0; j < pmac_group->channel; j++) {
 801e454:	e0bffe83 	ldbu	r2,-6(fp)
 801e458:	10800044 	addi	r2,r2,1
 801e45c:	e0bffe85 	stb	r2,-6(fp)
 801e460:	e0fffe87 	ldb	r3,-6(fp)
 801e464:	e0bffd17 	ldw	r2,-12(fp)
 801e468:	10800003 	ldbu	r2,0(r2)
 801e46c:	10803fcc 	andi	r2,r2,255
 801e470:	18bed616 	blt	r3,r2,801dfcc <alt_tse_mac_group_init+0x18c>
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 801e474:	d0a07a43 	ldbu	r2,-32279(gp)
 801e478:	10803fcc 	andi	r2,r2,255
 801e47c:	100890ba 	slli	r4,r2,2
 801e480:	e0fffd17 	ldw	r3,-12(fp)
 801e484:	008201b4 	movhi	r2,2054
 801e488:	2085883a 	add	r2,r4,r2
 801e48c:	10f95915 	stw	r3,-6812(r2)
            
            mac_group_count++;
 801e490:	d0a07a43 	ldbu	r2,-32279(gp)
 801e494:	10800044 	addi	r2,r2,1
 801e498:	d0a07a45 	stb	r2,-32279(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 801e49c:	e0bffd17 	ldw	r2,-12(fp)
 801e4a0:	10c00003 	ldbu	r3,0(r2)
 801e4a4:	e0bffec3 	ldbu	r2,-5(fp)
 801e4a8:	1885883a 	add	r2,r3,r2
 801e4ac:	10bfffc4 	addi	r2,r2,-1
 801e4b0:	e0bffec5 	stb	r2,-5(fp)
    for(i = 0; i < max_mac_system; i++) {
 801e4b4:	e0bffec3 	ldbu	r2,-5(fp)
 801e4b8:	10800044 	addi	r2,r2,1
 801e4bc:	e0bffec5 	stb	r2,-5(fp)
 801e4c0:	e0fffec7 	ldb	r3,-5(fp)
 801e4c4:	d0a02703 	ldbu	r2,-32612(gp)
 801e4c8:	10803fcc 	andi	r2,r2,255
 801e4cc:	18be6616 	blt	r3,r2,801de68 <alt_tse_mac_group_init+0x28>
                        
        }
    }
    return SUCCESS;
 801e4d0:	0005883a 	mov	r2,zero
}
 801e4d4:	e037883a 	mov	sp,fp
 801e4d8:	dfc00117 	ldw	ra,4(sp)
 801e4dc:	df000017 	ldw	fp,0(sp)
 801e4e0:	dec00204 	addi	sp,sp,8
 801e4e4:	f800283a 	ret

0801e4e8 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 801e4e8:	deffed04 	addi	sp,sp,-76
 801e4ec:	dfc01215 	stw	ra,72(sp)
 801e4f0:	df001115 	stw	fp,68(sp)
 801e4f4:	df001104 	addi	fp,sp,68
 801e4f8:	e13ff015 	stw	r4,-64(fp)
    
    alt_32 phyid; 
    alt_32 phyid2 = 0;
 801e4fc:	e03fff15 	stw	zero,-4(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 801e500:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 phy_info_count = 0;
 801e504:	e03ffec5 	stb	zero,-5(fp)
    
    alt_tse_phy_info *pphy = 0;
 801e508:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
 801e50c:	e03ff815 	stw	zero,-32(fp)
    alt_tse_system_info *psys = 0;
 801e510:	e03ff715 	stw	zero,-36(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801e514:	e0bff017 	ldw	r2,-64(fp)
 801e518:	10800117 	ldw	r2,4(r2)
 801e51c:	10800217 	ldw	r2,8(r2)
 801e520:	10800017 	ldw	r2,0(r2)
 801e524:	e0bff615 	stw	r2,-40(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 801e528:	e0bff617 	ldw	r2,-40(fp)
 801e52c:	10801004 	addi	r2,r2,64
 801e530:	10800037 	ldwio	r2,0(r2)
 801e534:	e0bff515 	stw	r2,-44(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801e538:	e13ff017 	ldw	r4,-64(fp)
 801e53c:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801e540:	e0bff4c5 	stb	r2,-45(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 801e544:	e03ffcc5 	stb	zero,-13(fp)
 801e548:	0000c106 	br	801e850 <alt_tse_mac_get_phy+0x368>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 801e54c:	e0bff617 	ldw	r2,-40(fp)
 801e550:	10801004 	addi	r2,r2,64
 801e554:	e0fffcc3 	ldbu	r3,-13(fp)
 801e558:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 801e55c:	e0bff617 	ldw	r2,-40(fp)
 801e560:	1080a204 	addi	r2,r2,648
 801e564:	10800037 	ldwio	r2,0(r2)
 801e568:	e0bff315 	stw	r2,-52(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 801e56c:	e0bff617 	ldw	r2,-40(fp)
 801e570:	1080a304 	addi	r2,r2,652
 801e574:	10800037 	ldwio	r2,0(r2)
 801e578:	e0bfff15 	stw	r2,-4(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 801e57c:	e0fff317 	ldw	r3,-52(fp)
 801e580:	e0bfff17 	ldw	r2,-4(fp)
 801e584:	1880af26 	beq	r3,r2,801e844 <alt_tse_mac_get_phy+0x35c>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 801e588:	01000704 	movi	r4,28
 801e58c:	804a2d80 	call	804a2d8 <malloc>
 801e590:	e0bff915 	stw	r2,-28(fp)
            if(!pphy) {
 801e594:	e0bff917 	ldw	r2,-28(fp)
 801e598:	1000091e 	bne	r2,zero,801e5c0 <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 801e59c:	e0bff4c7 	ldb	r2,-45(fp)
 801e5a0:	e0fffec7 	ldb	r3,-5(fp)
 801e5a4:	180d883a 	mov	r6,r3
 801e5a8:	100b883a 	mov	r5,r2
 801e5ac:	01020174 	movhi	r4,2053
 801e5b0:	21033604 	addi	r4,r4,3288
 801e5b4:	800325c0 	call	800325c <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 801e5b8:	00bfffc4 	movi	r2,-1
 801e5bc:	0000c406 	br	801e8d0 <alt_tse_mac_get_phy+0x3e8>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 801e5c0:	e0bff917 	ldw	r2,-28(fp)
 801e5c4:	e0fffcc3 	ldbu	r3,-13(fp)
 801e5c8:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 801e5cc:	e0bff317 	ldw	r2,-52(fp)
 801e5d0:	100691ba 	slli	r3,r2,6
 801e5d4:	e0bfff17 	ldw	r2,-4(fp)
 801e5d8:	1005d2ba 	srai	r2,r2,10
 801e5dc:	10800fcc 	andi	r2,r2,63
 801e5e0:	1884b03a 	or	r2,r3,r2
 801e5e4:	e0bff215 	stw	r2,-56(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 801e5e8:	e0bfff17 	ldw	r2,-4(fp)
 801e5ec:	1005d13a 	srai	r2,r2,4
 801e5f0:	10800fcc 	andi	r2,r2,63
 801e5f4:	e0bff1c5 	stb	r2,-57(fp)
            revision_number = phyid2 & 0x0f;
 801e5f8:	e0bfff17 	ldw	r2,-4(fp)
 801e5fc:	108003cc 	andi	r2,r2,15
 801e600:	e0bff185 	stb	r2,-58(fp)
            
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 801e604:	e03ffac5 	stb	zero,-21(fp)
            for(i = 0; i < phy_profile_count; i++) {
 801e608:	e03ffb15 	stw	zero,-20(fp)
 801e60c:	00002c06 	br	801e6c0 <alt_tse_mac_get_phy+0x1d8>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 801e610:	e0bffb17 	ldw	r2,-20(fp)
 801e614:	100690ba 	slli	r3,r2,2
 801e618:	008201b4 	movhi	r2,2054
 801e61c:	1885883a 	add	r2,r3,r2
 801e620:	10b95d17 	ldw	r2,-6796(r2)
 801e624:	10801417 	ldw	r2,80(r2)
 801e628:	e0fff217 	ldw	r3,-56(fp)
 801e62c:	1880211e 	bne	r3,r2,801e6b4 <alt_tse_mac_get_phy+0x1cc>
 801e630:	e0bffb17 	ldw	r2,-20(fp)
 801e634:	100690ba 	slli	r3,r2,2
 801e638:	008201b4 	movhi	r2,2054
 801e63c:	1885883a 	add	r2,r3,r2
 801e640:	10b95d17 	ldw	r2,-6796(r2)
 801e644:	10801503 	ldbu	r2,84(r2)
 801e648:	e0fff1c3 	ldbu	r3,-57(fp)
 801e64c:	10803fcc 	andi	r2,r2,255
 801e650:	1880181e 	bne	r3,r2,801e6b4 <alt_tse_mac_get_phy+0x1cc>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 801e654:	e0bffb17 	ldw	r2,-20(fp)
 801e658:	100690ba 	slli	r3,r2,2
 801e65c:	008201b4 	movhi	r2,2054
 801e660:	1885883a 	add	r2,r3,r2
 801e664:	10f95d17 	ldw	r3,-6796(r2)
 801e668:	e0bff917 	ldw	r2,-28(fp)
 801e66c:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 801e670:	e0bffb17 	ldw	r2,-20(fp)
 801e674:	100690ba 	slli	r3,r2,2
 801e678:	008201b4 	movhi	r2,2054
 801e67c:	1885883a 	add	r2,r3,r2
 801e680:	10b95d17 	ldw	r2,-6796(r2)
 801e684:	1009883a 	mov	r4,r2
 801e688:	e0bffcc3 	ldbu	r2,-13(fp)
 801e68c:	e0fff4c7 	ldb	r3,-45(fp)
 801e690:	180f883a 	mov	r7,r3
 801e694:	100d883a 	mov	r6,r2
 801e698:	200b883a 	mov	r5,r4
 801e69c:	01020174 	movhi	r4,2053
 801e6a0:	21034504 	addi	r4,r4,3348
 801e6a4:	800325c0 	call	800325c <printf>
                    is_phy_in_profile = 1;
 801e6a8:	00800044 	movi	r2,1
 801e6ac:	e0bffac5 	stb	r2,-21(fp)
                    break;
 801e6b0:	00000706 	br	801e6d0 <alt_tse_mac_get_phy+0x1e8>
            for(i = 0; i < phy_profile_count; i++) {
 801e6b4:	e0bffb17 	ldw	r2,-20(fp)
 801e6b8:	10800044 	addi	r2,r2,1
 801e6bc:	e0bffb15 	stw	r2,-20(fp)
 801e6c0:	d0a07a03 	ldbu	r2,-32280(gp)
 801e6c4:	10803fcc 	andi	r2,r2,255
 801e6c8:	e0fffb17 	ldw	r3,-20(fp)
 801e6cc:	18bfd016 	blt	r3,r2,801e610 <alt_tse_mac_get_phy+0x128>
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 801e6d0:	e0bffac3 	ldbu	r2,-21(fp)
 801e6d4:	10000f1e 	bne	r2,zero,801e714 <alt_tse_mac_get_phy+0x22c>
                pphy->pphy_profile = 0;
 801e6d8:	e0bff917 	ldw	r2,-28(fp)
 801e6dc:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 801e6e0:	e0bffcc3 	ldbu	r2,-13(fp)
 801e6e4:	e0fff4c7 	ldb	r3,-45(fp)
 801e6e8:	180d883a 	mov	r6,r3
 801e6ec:	100b883a 	mov	r5,r2
 801e6f0:	01020174 	movhi	r4,2053
 801e6f4:	21035504 	addi	r4,r4,3412
 801e6f8:	800325c0 	call	800325c <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 801e6fc:	01020174 	movhi	r4,2053
 801e700:	21036604 	addi	r4,r4,3480
 801e704:	80033800 	call	8003380 <puts>
                return_value++;
 801e708:	e0bffd17 	ldw	r2,-12(fp)
 801e70c:	10800044 	addi	r2,r2,1
 801e710:	e0bffd15 	stw	r2,-12(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 801e714:	e0bff217 	ldw	r2,-56(fp)
 801e718:	100b883a 	mov	r5,r2
 801e71c:	01020174 	movhi	r4,2053
 801e720:	21037304 	addi	r4,r4,3532
 801e724:	800325c0 	call	800325c <printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 801e728:	e0bff1c3 	ldbu	r2,-57(fp)
 801e72c:	100b883a 	mov	r5,r2
 801e730:	01020174 	movhi	r4,2053
 801e734:	21037e04 	addi	r4,r4,3576
 801e738:	800325c0 	call	800325c <printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 801e73c:	e0bff183 	ldbu	r2,-58(fp)
 801e740:	100b883a 	mov	r5,r2
 801e744:	01020174 	movhi	r4,2053
 801e748:	21038904 	addi	r4,r4,3620
 801e74c:	800325c0 	call	800325c <printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 801e750:	e17ff917 	ldw	r5,-28(fp)
 801e754:	e13ff017 	ldw	r4,-64(fp)
 801e758:	801e8e40 	call	801e8e4 <alt_tse_mac_associate_phy>
 801e75c:	1000341e 	bne	r2,zero,801e830 <alt_tse_mac_get_phy+0x348>
                
                pmac_info = pphy->pmac_info;
 801e760:	e0bff917 	ldw	r2,-28(fp)
 801e764:	10800617 	ldw	r2,24(r2)
 801e768:	e0bff815 	stw	r2,-32(fp)
                psys = pmac_info->psys_info;
 801e76c:	e0bff817 	ldw	r2,-32(fp)
 801e770:	10800217 	ldw	r2,8(r2)
 801e774:	e0bff715 	stw	r2,-36(fp)
                
                /* Disable PHY loopback to allow Auto-Negotiation completed */
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 801e778:	d8000015 	stw	zero,0(sp)
 801e77c:	01c00044 	movi	r7,1
 801e780:	01800384 	movi	r6,14
 801e784:	000b883a 	mov	r5,zero
 801e788:	e13ff917 	ldw	r4,-28(fp)
 801e78c:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
                
                /* Reset auto-negotiation advertisement */
                alt_tse_phy_set_adv_1000(pphy, 1);
 801e790:	01400044 	movi	r5,1
 801e794:	e13ff917 	ldw	r4,-28(fp)
 801e798:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
                alt_tse_phy_set_adv_100(pphy, 1);
 801e79c:	01400044 	movi	r5,1
 801e7a0:	e13ff917 	ldw	r4,-28(fp)
 801e7a4:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
                alt_tse_phy_set_adv_10(pphy, 1);
 801e7a8:	01400044 	movi	r5,1
 801e7ac:	e13ff917 	ldw	r4,-28(fp)
 801e7b0:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
                                
                /* check link connection for this PHY */
                alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 801e7b4:	0149c404 	movi	r5,10000
 801e7b8:	e13ff917 	ldw	r4,-28(fp)
 801e7bc:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
                
                /* Perform additional setting if there is any */
                /* Profile specific */
                if(pphy->pphy_profile) {
 801e7c0:	e0bff917 	ldw	r2,-28(fp)
 801e7c4:	10800517 	ldw	r2,20(r2)
 801e7c8:	10000f26 	beq	r2,zero,801e808 <alt_tse_mac_get_phy+0x320>
                    if(pphy->pphy_profile->phy_cfg) {
 801e7cc:	e0bff917 	ldw	r2,-28(fp)
 801e7d0:	10800517 	ldw	r2,20(r2)
 801e7d4:	10801717 	ldw	r2,92(r2)
 801e7d8:	10000b26 	beq	r2,zero,801e808 <alt_tse_mac_get_phy+0x320>
                        tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 801e7dc:	e0bff917 	ldw	r2,-28(fp)
 801e7e0:	10800517 	ldw	r2,20(r2)
 801e7e4:	100b883a 	mov	r5,r2
 801e7e8:	01020174 	movhi	r4,2053
 801e7ec:	21039404 	addi	r4,r4,3664
 801e7f0:	800325c0 	call	800325c <printf>
                        pphy->pphy_profile->phy_cfg(pmac_group_base);
 801e7f4:	e0bff917 	ldw	r2,-28(fp)
 801e7f8:	10800517 	ldw	r2,20(r2)
 801e7fc:	10801717 	ldw	r2,92(r2)
 801e800:	e13ff617 	ldw	r4,-40(fp)
 801e804:	103ee83a 	callr	r2
                    }
                }
                
                /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
                /* Individual PHY specific */
                if(psys->tse_phy_cfg) {
 801e808:	e0bff717 	ldw	r2,-36(fp)
 801e80c:	10801217 	ldw	r2,72(r2)
 801e810:	10000726 	beq	r2,zero,801e830 <alt_tse_mac_get_phy+0x348>
                    tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 801e814:	01020174 	movhi	r4,2053
 801e818:	2103a204 	addi	r4,r4,3720
 801e81c:	80033800 	call	8003380 <puts>
                    psys->tse_phy_cfg(pmac_group_base);
 801e820:	e0bff717 	ldw	r2,-36(fp)
 801e824:	10801217 	ldw	r2,72(r2)
 801e828:	e13ff617 	ldw	r4,-40(fp)
 801e82c:	103ee83a 	callr	r2
                }
            }
            
            tse_dprintf(6, "\n");
 801e830:	01000284 	movi	r4,10
 801e834:	800329c0 	call	800329c <putchar>
                
            phy_info_count++;
 801e838:	e0bffec3 	ldbu	r2,-5(fp)
 801e83c:	10800044 	addi	r2,r2,1
 801e840:	e0bffec5 	stb	r2,-5(fp)
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 801e844:	e0bffcc3 	ldbu	r2,-13(fp)
 801e848:	10800044 	addi	r2,r2,1
 801e84c:	e0bffcc5 	stb	r2,-13(fp)
 801e850:	e0bffcc3 	ldbu	r2,-13(fp)
 801e854:	10800830 	cmpltui	r2,r2,32
 801e858:	103f3c1e 	bne	r2,zero,801e54c <alt_tse_mac_get_phy+0x64>
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 801e85c:	e0bff017 	ldw	r2,-64(fp)
 801e860:	10800003 	ldbu	r2,0(r2)
 801e864:	10c03fcc 	andi	r3,r2,255
 801e868:	e0bffec7 	ldb	r2,-5(fp)
 801e86c:	18801326 	beq	r3,r2,801e8bc <alt_tse_mac_get_phy+0x3d4>
        if(phy_info_count == 0) {
 801e870:	e0bffec7 	ldb	r2,-5(fp)
 801e874:	1000061e 	bne	r2,zero,801e890 <alt_tse_mac_get_phy+0x3a8>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 801e878:	e0bff4c7 	ldb	r2,-45(fp)
 801e87c:	100b883a 	mov	r5,r2
 801e880:	01020174 	movhi	r4,2053
 801e884:	2103b004 	addi	r4,r4,3776
 801e888:	800325c0 	call	800325c <printf>
 801e88c:	00000b06 	br	801e8bc <alt_tse_mac_get_phy+0x3d4>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 801e890:	e0fff4c7 	ldb	r3,-45(fp)
 801e894:	e13ffec7 	ldb	r4,-5(fp)
 801e898:	e0bff017 	ldw	r2,-64(fp)
 801e89c:	10800003 	ldbu	r2,0(r2)
 801e8a0:	10803fcc 	andi	r2,r2,255
 801e8a4:	100f883a 	mov	r7,r2
 801e8a8:	200d883a 	mov	r6,r4
 801e8ac:	180b883a 	mov	r5,r3
 801e8b0:	01020174 	movhi	r4,2053
 801e8b4:	2103bc04 	addi	r4,r4,3824
 801e8b8:	800325c0 	call	800325c <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 801e8bc:	e0bff617 	ldw	r2,-40(fp)
 801e8c0:	10801004 	addi	r2,r2,64
 801e8c4:	e0fff517 	ldw	r3,-44(fp)
 801e8c8:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
 801e8cc:	e0bffd17 	ldw	r2,-12(fp)
}
 801e8d0:	e037883a 	mov	sp,fp
 801e8d4:	dfc00117 	ldw	ra,4(sp)
 801e8d8:	df000017 	ldw	fp,0(sp)
 801e8dc:	dec00204 	addi	sp,sp,8
 801e8e0:	f800283a 	ret

0801e8e4 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 801e8e4:	defff604 	addi	sp,sp,-40
 801e8e8:	dfc00915 	stw	ra,36(sp)
 801e8ec:	df000815 	stw	fp,32(sp)
 801e8f0:	df000804 	addi	fp,sp,32
 801e8f4:	e13ff915 	stw	r4,-28(fp)
 801e8f8:	e17ff815 	stw	r5,-32(fp)
    
    alt_32 i;
    alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 801e8fc:	e03ffd15 	stw	zero,-12(fp)
    
    alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 801e900:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_info *pmac_info = 0;
 801e904:	e03ffb15 	stw	zero,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 801e908:	e03ffac5 	stb	zero,-21(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801e90c:	e13ff917 	ldw	r4,-28(fp)
 801e910:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801e914:	e0bffa85 	stb	r2,-22(fp)
    alt_8 sys_info_index = 0;
 801e918:	e03ffa45 	stb	zero,-23(fp)
    
    is_mapped = 0;
 801e91c:	e03fffc5 	stb	zero,-1(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 801e920:	e03ffe15 	stw	zero,-8(fp)
 801e924:	00002b06 	br	801e9d4 <alt_tse_mac_associate_phy+0xf0>
        pmac_info = pmac_group->pmac_info[i];
 801e928:	e0fff917 	ldw	r3,-28(fp)
 801e92c:	e0bffe17 	ldw	r2,-8(fp)
 801e930:	10800044 	addi	r2,r2,1
 801e934:	100490ba 	slli	r2,r2,2
 801e938:	1885883a 	add	r2,r3,r2
 801e93c:	10800017 	ldw	r2,0(r2)
 801e940:	e0bffb15 	stw	r2,-20(fp)
        psys = pmac_info->psys_info;
 801e944:	e0bffb17 	ldw	r2,-20(fp)
 801e948:	10800217 	ldw	r2,8(r2)
 801e94c:	e0bffc15 	stw	r2,-16(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 801e950:	e0bffc17 	ldw	r2,-16(fp)
 801e954:	10c01117 	ldw	r3,68(r2)
 801e958:	e0bff817 	ldw	r2,-32(fp)
 801e95c:	10800003 	ldbu	r2,0(r2)
 801e960:	10803fcc 	andi	r2,r2,255
 801e964:	1880181e 	bne	r3,r2,801e9c8 <alt_tse_mac_associate_phy+0xe4>
            mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801e968:	e13ffb17 	ldw	r4,-20(fp)
 801e96c:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801e970:	e0bffac5 	stb	r2,-21(fp)
            sys_info_index = alt_tse_get_system_index(psys);
 801e974:	e13ffc17 	ldw	r4,-16(fp)
 801e978:	801c9080 	call	801c908 <alt_tse_get_system_index>
 801e97c:	e0bffa45 	stb	r2,-23(fp)
            
            pmac_info->pphy_info = pphy;
 801e980:	e0bffb17 	ldw	r2,-20(fp)
 801e984:	e0fff817 	ldw	r3,-32(fp)
 801e988:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
 801e98c:	e0bff817 	ldw	r2,-32(fp)
 801e990:	e0fffb17 	ldw	r3,-20(fp)
 801e994:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 801e998:	e0bffa87 	ldb	r2,-22(fp)
 801e99c:	e0fffac7 	ldb	r3,-21(fp)
 801e9a0:	e13ffa47 	ldb	r4,-23(fp)
 801e9a4:	200f883a 	mov	r7,r4
 801e9a8:	180d883a 	mov	r6,r3
 801e9ac:	100b883a 	mov	r5,r2
 801e9b0:	01020174 	movhi	r4,2053
 801e9b4:	2103db04 	addi	r4,r4,3948
 801e9b8:	800325c0 	call	800325c <printf>
            is_mapped = 1;
 801e9bc:	00800044 	movi	r2,1
 801e9c0:	e0bfffc5 	stb	r2,-1(fp)
            break;
 801e9c4:	00000806 	br	801e9e8 <alt_tse_mac_associate_phy+0x104>
    for(i = 0; i < pmac_group->channel; i++) {
 801e9c8:	e0bffe17 	ldw	r2,-8(fp)
 801e9cc:	10800044 	addi	r2,r2,1
 801e9d0:	e0bffe15 	stw	r2,-8(fp)
 801e9d4:	e0bff917 	ldw	r2,-28(fp)
 801e9d8:	10800003 	ldbu	r2,0(r2)
 801e9dc:	10803fcc 	andi	r2,r2,255
 801e9e0:	e0fffe17 	ldw	r3,-8(fp)
 801e9e4:	18bfd016 	blt	r3,r2,801e928 <alt_tse_mac_associate_phy+0x44>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 801e9e8:	e0bfffc3 	ldbu	r2,-1(fp)
 801e9ec:	10003c1e 	bne	r2,zero,801eae0 <alt_tse_mac_associate_phy+0x1fc>
        for(i = 0; i < pmac_group->channel; i++) {
 801e9f0:	e03ffe15 	stw	zero,-8(fp)
 801e9f4:	00003506 	br	801eacc <alt_tse_mac_associate_phy+0x1e8>
            pmac_info = pmac_group->pmac_info[i];
 801e9f8:	e0fff917 	ldw	r3,-28(fp)
 801e9fc:	e0bffe17 	ldw	r2,-8(fp)
 801ea00:	10800044 	addi	r2,r2,1
 801ea04:	100490ba 	slli	r2,r2,2
 801ea08:	1885883a 	add	r2,r3,r2
 801ea0c:	10800017 	ldw	r2,0(r2)
 801ea10:	e0bffb15 	stw	r2,-20(fp)
            psys = pmac_info->psys_info;
 801ea14:	e0bffb17 	ldw	r2,-20(fp)
 801ea18:	10800217 	ldw	r2,8(r2)
 801ea1c:	e0bffc15 	stw	r2,-16(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_msgdma_tx == 0) || (psys->tse_msgdma_rx == 0)){
 801ea20:	e0bffc17 	ldw	r2,-16(fp)
 801ea24:	10800617 	ldw	r2,24(r2)
 801ea28:	10002426 	beq	r2,zero,801eabc <alt_tse_mac_associate_phy+0x1d8>
 801ea2c:	e0bffc17 	ldw	r2,-16(fp)
 801ea30:	10800717 	ldw	r2,28(r2)
 801ea34:	10002126 	beq	r2,zero,801eabc <alt_tse_mac_associate_phy+0x1d8>
                continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 801ea38:	e0bffc17 	ldw	r2,-16(fp)
 801ea3c:	10801117 	ldw	r2,68(r2)
 801ea40:	10bfffd8 	cmpnei	r2,r2,-1
 801ea44:	10001e1e 	bne	r2,zero,801eac0 <alt_tse_mac_associate_phy+0x1dc>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801ea48:	e13ffb17 	ldw	r4,-20(fp)
 801ea4c:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801ea50:	e0bffac5 	stb	r2,-21(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 801ea54:	e13ffc17 	ldw	r4,-16(fp)
 801ea58:	801c9080 	call	801c908 <alt_tse_get_system_index>
 801ea5c:	e0bffa45 	stb	r2,-23(fp)
                
                pmac_info->pphy_info = pphy;
 801ea60:	e0bffb17 	ldw	r2,-20(fp)
 801ea64:	e0fff817 	ldw	r3,-32(fp)
 801ea68:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
 801ea6c:	e0bff817 	ldw	r2,-32(fp)
 801ea70:	e0fffb17 	ldw	r3,-20(fp)
 801ea74:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 801ea78:	e0bff817 	ldw	r2,-32(fp)
 801ea7c:	10800003 	ldbu	r2,0(r2)
 801ea80:	10c03fcc 	andi	r3,r2,255
 801ea84:	e0bffc17 	ldw	r2,-16(fp)
 801ea88:	10c01115 	stw	r3,68(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 801ea8c:	e0bffa87 	ldb	r2,-22(fp)
 801ea90:	e0fffac7 	ldb	r3,-21(fp)
 801ea94:	e13ffa47 	ldb	r4,-23(fp)
 801ea98:	200f883a 	mov	r7,r4
 801ea9c:	180d883a 	mov	r6,r3
 801eaa0:	100b883a 	mov	r5,r2
 801eaa4:	01020174 	movhi	r4,2053
 801eaa8:	2103eb04 	addi	r4,r4,4012
 801eaac:	800325c0 	call	800325c <printf>
                is_mapped = 1;
 801eab0:	00800044 	movi	r2,1
 801eab4:	e0bfffc5 	stb	r2,-1(fp)
                break;
 801eab8:	00000906 	br	801eae0 <alt_tse_mac_associate_phy+0x1fc>
                continue;
 801eabc:	0001883a 	nop
        for(i = 0; i < pmac_group->channel; i++) {
 801eac0:	e0bffe17 	ldw	r2,-8(fp)
 801eac4:	10800044 	addi	r2,r2,1
 801eac8:	e0bffe15 	stw	r2,-8(fp)
 801eacc:	e0bff917 	ldw	r2,-28(fp)
 801ead0:	10800003 	ldbu	r2,0(r2)
 801ead4:	10803fcc 	andi	r2,r2,255
 801ead8:	e0fffe17 	ldw	r3,-8(fp)
 801eadc:	18bfc616 	blt	r3,r2,801e9f8 <alt_tse_mac_associate_phy+0x114>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 801eae0:	e0bfffc3 	ldbu	r2,-1(fp)
 801eae4:	1000091e 	bne	r2,zero,801eb0c <alt_tse_mac_associate_phy+0x228>
        pphy->pmac_info = 0;
 801eae8:	e0bff817 	ldw	r2,-32(fp)
 801eaec:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 801eaf0:	e0bffa87 	ldb	r2,-22(fp)
 801eaf4:	100b883a 	mov	r5,r2
 801eaf8:	01020174 	movhi	r4,2053
 801eafc:	2103fc04 	addi	r4,r4,4080
 801eb00:	800325c0 	call	800325c <printf>
        return_value = TSE_PHY_MAP_ERROR;
 801eb04:	00bfffc4 	movi	r2,-1
 801eb08:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return return_value;
 801eb0c:	e0bffd17 	ldw	r2,-12(fp)
}
 801eb10:	e037883a 	mov	sp,fp
 801eb14:	dfc00117 	ldw	ra,4(sp)
 801eb18:	df000017 	ldw	fp,0(sp)
 801eb1c:	dec00204 	addi	sp,sp,8
 801eb20:	f800283a 	ret

0801eb24 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 801eb24:	defff804 	addi	sp,sp,-32
 801eb28:	dfc00715 	stw	ra,28(sp)
 801eb2c:	df000615 	stw	fp,24(sp)
 801eb30:	df000604 	addi	fp,sp,24
 801eb34:	e13ffa15 	stw	r4,-24(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 801eb38:	e0bffa17 	ldw	r2,-24(fp)
 801eb3c:	10800217 	ldw	r2,8(r2)
 801eb40:	e0bffd15 	stw	r2,-12(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 801eb44:	e0bffd17 	ldw	r2,-12(fp)
 801eb48:	10800017 	ldw	r2,0(r2)
 801eb4c:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801eb50:	e0bffa17 	ldw	r2,-24(fp)
 801eb54:	10800317 	ldw	r2,12(r2)
 801eb58:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801eb5c:	e13ffa17 	ldw	r4,-24(fp)
 801eb60:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801eb64:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801eb68:	e13ffe17 	ldw	r4,-8(fp)
 801eb6c:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801eb70:	e0bffc85 	stb	r2,-14(fp)

    if(psys->tse_pcs_ena) {
 801eb74:	e0bffd17 	ldw	r2,-12(fp)
 801eb78:	108004c3 	ldbu	r2,19(r2)
 801eb7c:	10803fcc 	andi	r2,r2,255
 801eb80:	10002c26 	beq	r2,zero,801ec34 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 801eb84:	e0bffc87 	ldb	r2,-14(fp)
 801eb88:	e0fffcc7 	ldb	r3,-13(fp)
 801eb8c:	180d883a 	mov	r6,r3
 801eb90:	100b883a 	mov	r5,r2
 801eb94:	01020174 	movhi	r4,2053
 801eb98:	21042d04 	addi	r4,r4,4276
 801eb9c:	800325c0 	call	800325c <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 801eba0:	e0bfff17 	ldw	r2,-4(fp)
 801eba4:	10808004 	addi	r2,r2,512
 801eba8:	10801404 	addi	r2,r2,80
 801ebac:	10800037 	ldwio	r2,0(r2)
 801ebb0:	e0bffb15 	stw	r2,-20(fp)
        
        if(psys->tse_pcs_sgmii) {
 801ebb4:	e0bffd17 	ldw	r2,-12(fp)
 801ebb8:	10800503 	ldbu	r2,20(r2)
 801ebbc:	10803fcc 	andi	r2,r2,255
 801ebc0:	10000e26 	beq	r2,zero,801ebfc <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 801ebc4:	e0bffc87 	ldb	r2,-14(fp)
 801ebc8:	e0fffcc7 	ldb	r3,-13(fp)
 801ebcc:	180d883a 	mov	r6,r3
 801ebd0:	100b883a 	mov	r5,r2
 801ebd4:	01020174 	movhi	r4,2053
 801ebd8:	21043b04 	addi	r4,r4,4332
 801ebdc:	800325c0 	call	800325c <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 801ebe0:	e0bfff17 	ldw	r2,-4(fp)
 801ebe4:	10808004 	addi	r2,r2,512
 801ebe8:	10801404 	addi	r2,r2,80
 801ebec:	e0fffb17 	ldw	r3,-20(fp)
 801ebf0:	18c000d4 	ori	r3,r3,3
 801ebf4:	10c00035 	stwio	r3,0(r2)
 801ebf8:	00000e06 	br	801ec34 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 801ebfc:	e0bffc87 	ldb	r2,-14(fp)
 801ec00:	e0fffcc7 	ldb	r3,-13(fp)
 801ec04:	180d883a 	mov	r6,r3
 801ec08:	100b883a 	mov	r5,r2
 801ec0c:	01020174 	movhi	r4,2053
 801ec10:	21044704 	addi	r4,r4,4380
 801ec14:	800325c0 	call	800325c <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 801ec18:	e0bfff17 	ldw	r2,-4(fp)
 801ec1c:	10808004 	addi	r2,r2,512
 801ec20:	10801404 	addi	r2,r2,80
 801ec24:	e13ffb17 	ldw	r4,-20(fp)
 801ec28:	00ffff04 	movi	r3,-4
 801ec2c:	20c6703a 	and	r3,r4,r3
 801ec30:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 801ec34:	0005883a 	mov	r2,zero
}
 801ec38:	e037883a 	mov	sp,fp
 801ec3c:	dfc00117 	ldw	ra,4(sp)
 801ec40:	df000017 	ldw	fp,0(sp)
 801ec44:	dec00204 	addi	sp,sp,8
 801ec48:	f800283a 	ret

0801ec4c <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 801ec4c:	defffb04 	addi	sp,sp,-20
 801ec50:	dfc00415 	stw	ra,16(sp)
 801ec54:	df000315 	stw	fp,12(sp)
 801ec58:	df000304 	addi	fp,sp,12
    alt_8 i = 0;
 801ec5c:	e03fffc5 	stb	zero,-1(fp)
    alt_8 j = 0;
 801ec60:	e03fff85 	stb	zero,-2(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 801ec64:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 801ec68:	e03ffd15 	stw	zero,-12(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 801ec6c:	801d9a80 	call	801d9a8 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 801ec70:	801dc700 	call	801dc70 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 801ec74:	801de400 	call	801de40 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 801ec78:	e03fffc5 	stb	zero,-1(fp)
 801ec7c:	00002c06 	br	801ed30 <alt_tse_phy_init+0xe4>
        pmac_group = pmac_groups[i];
 801ec80:	e0bfffc7 	ldb	r2,-1(fp)
 801ec84:	100690ba 	slli	r3,r2,2
 801ec88:	008201b4 	movhi	r2,2054
 801ec8c:	1885883a 	add	r2,r3,r2
 801ec90:	10b95917 	ldw	r2,-6812(r2)
 801ec94:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 801ec98:	e0bffe17 	ldw	r2,-8(fp)
 801ec9c:	10800117 	ldw	r2,4(r2)
 801eca0:	10800217 	ldw	r2,8(r2)
 801eca4:	10800303 	ldbu	r2,12(r2)
 801eca8:	10803fcc 	andi	r2,r2,255
 801ecac:	10000326 	beq	r2,zero,801ecbc <alt_tse_phy_init+0x70>
            
            /* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 801ecb0:	e13ffe17 	ldw	r4,-8(fp)
 801ecb4:	801e4e80 	call	801e4e8 <alt_tse_mac_get_phy>
 801ecb8:	00000706 	br	801ecd8 <alt_tse_phy_init+0x8c>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 801ecbc:	e0bfffc7 	ldb	r2,-1(fp)
 801ecc0:	e0ffff87 	ldb	r3,-2(fp)
 801ecc4:	180d883a 	mov	r6,r3
 801ecc8:	100b883a 	mov	r5,r2
 801eccc:	01020174 	movhi	r4,2053
 801ecd0:	21045304 	addi	r4,r4,4428
 801ecd4:	800325c0 	call	800325c <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 801ecd8:	e03fff85 	stb	zero,-2(fp)
 801ecdc:	00000c06 	br	801ed10 <alt_tse_phy_init+0xc4>
            pmac_info = pmac_group->pmac_info[j];
 801ece0:	e0bfff87 	ldb	r2,-2(fp)
 801ece4:	e0fffe17 	ldw	r3,-8(fp)
 801ece8:	10800044 	addi	r2,r2,1
 801ecec:	100490ba 	slli	r2,r2,2
 801ecf0:	1885883a 	add	r2,r3,r2
 801ecf4:	10800017 	ldw	r2,0(r2)
 801ecf8:	e0bffd15 	stw	r2,-12(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 801ecfc:	e13ffd17 	ldw	r4,-12(fp)
 801ed00:	801eb240 	call	801eb24 <alt_tse_phy_cfg_pcs>
        for(j = 0; j < pmac_group->channel; j++) {
 801ed04:	e0bfff83 	ldbu	r2,-2(fp)
 801ed08:	10800044 	addi	r2,r2,1
 801ed0c:	e0bfff85 	stb	r2,-2(fp)
 801ed10:	e0ffff87 	ldb	r3,-2(fp)
 801ed14:	e0bffe17 	ldw	r2,-8(fp)
 801ed18:	10800003 	ldbu	r2,0(r2)
 801ed1c:	10803fcc 	andi	r2,r2,255
 801ed20:	18bfef16 	blt	r3,r2,801ece0 <alt_tse_phy_init+0x94>
    for(i = 0; i < mac_group_count; i++) {
 801ed24:	e0bfffc3 	ldbu	r2,-1(fp)
 801ed28:	10800044 	addi	r2,r2,1
 801ed2c:	e0bfffc5 	stb	r2,-1(fp)
 801ed30:	e0ffffc7 	ldb	r3,-1(fp)
 801ed34:	d0a07a43 	ldbu	r2,-32279(gp)
 801ed38:	10803fcc 	andi	r2,r2,255
 801ed3c:	18bfd016 	blt	r3,r2,801ec80 <alt_tse_phy_init+0x34>
        }
    }
                
    return SUCCESS;
 801ed40:	0005883a 	mov	r2,zero
}
 801ed44:	e037883a 	mov	sp,fp
 801ed48:	dfc00117 	ldw	ra,4(sp)
 801ed4c:	df000017 	ldw	fp,0(sp)
 801ed50:	dec00204 	addi	sp,sp,8
 801ed54:	f800283a 	ret

0801ed58 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 801ed58:	defff704 	addi	sp,sp,-36
 801ed5c:	dfc00815 	stw	ra,32(sp)
 801ed60:	df000715 	stw	fp,28(sp)
 801ed64:	df000704 	addi	fp,sp,28
 801ed68:	e13ffb15 	stw	r4,-20(fp)
 801ed6c:	e17ffa15 	stw	r5,-24(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801ed70:	e0bffb17 	ldw	r2,-20(fp)
 801ed74:	10800617 	ldw	r2,24(r2)
 801ed78:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801ed7c:	e0bfff17 	ldw	r2,-4(fp)
 801ed80:	10800317 	ldw	r2,12(r2)
 801ed84:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801ed88:	e13fff17 	ldw	r4,-4(fp)
 801ed8c:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801ed90:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801ed94:	e13ffe17 	ldw	r4,-8(fp)
 801ed98:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801ed9c:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801eda0:	e13ffb17 	ldw	r4,-20(fp)
 801eda4:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801eda8:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801edac:	e0bffb17 	ldw	r2,-20(fp)
 801edb0:	10800003 	ldbu	r2,0(r2)
 801edb4:	10803fcc 	andi	r2,r2,255
 801edb8:	100b883a 	mov	r5,r2
 801edbc:	e13ffb17 	ldw	r4,-20(fp)
 801edc0:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 801edc4:	01c00044 	movi	r7,1
 801edc8:	018000c4 	movi	r6,3
 801edcc:	01400044 	movi	r5,1
 801edd0:	e13ffb17 	ldw	r4,-20(fp)
 801edd4:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801edd8:	10000d1e 	bne	r2,zero,801ee10 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 801eddc:	e0bffc87 	ldb	r2,-14(fp)
 801ede0:	e0fffcc7 	ldb	r3,-13(fp)
 801ede4:	180d883a 	mov	r6,r3
 801ede8:	100b883a 	mov	r5,r2
 801edec:	01020174 	movhi	r4,2053
 801edf0:	21046904 	addi	r4,r4,4516
 801edf4:	800325c0 	call	800325c <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801edf8:	e0bffc43 	ldbu	r2,-15(fp)
 801edfc:	100b883a 	mov	r5,r2
 801ee00:	e13ffb17 	ldw	r4,-20(fp)
 801ee04:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 801ee08:	00bfff84 	movi	r2,-2
 801ee0c:	00003e06 	br	801ef08 <alt_tse_phy_restart_an+0x1b0>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 801ee10:	00800044 	movi	r2,1
 801ee14:	d8800015 	stw	r2,0(sp)
 801ee18:	01c00044 	movi	r7,1
 801ee1c:	01800304 	movi	r6,12
 801ee20:	000b883a 	mov	r5,zero
 801ee24:	e13ffb17 	ldw	r4,-20(fp)
 801ee28:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 801ee2c:	00800044 	movi	r2,1
 801ee30:	d8800015 	stw	r2,0(sp)
 801ee34:	01c00044 	movi	r7,1
 801ee38:	01800244 	movi	r6,9
 801ee3c:	000b883a 	mov	r5,zero
 801ee40:	e13ffb17 	ldw	r4,-20(fp)
 801ee44:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 801ee48:	e0bffc87 	ldb	r2,-14(fp)
 801ee4c:	e0fffcc7 	ldb	r3,-13(fp)
 801ee50:	180d883a 	mov	r6,r3
 801ee54:	100b883a 	mov	r5,r2
 801ee58:	01020174 	movhi	r4,2053
 801ee5c:	21047904 	addi	r4,r4,4580
 801ee60:	800325c0 	call	800325c <printf>
    
    alt_32 timeout = 0;
 801ee64:	e03ffd15 	stw	zero,-12(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 801ee68:	00001506 	br	801eec0 <alt_tse_phy_restart_an+0x168>
        if(timeout++ > timeout_threshold) {
 801ee6c:	e0bffd17 	ldw	r2,-12(fp)
 801ee70:	10c00044 	addi	r3,r2,1
 801ee74:	e0fffd15 	stw	r3,-12(fp)
 801ee78:	1007883a 	mov	r3,r2
 801ee7c:	e0bffa17 	ldw	r2,-24(fp)
 801ee80:	10c00d2e 	bgeu	r2,r3,801eeb8 <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 801ee84:	e0bffc87 	ldb	r2,-14(fp)
 801ee88:	e0fffcc7 	ldb	r3,-13(fp)
 801ee8c:	180d883a 	mov	r6,r3
 801ee90:	100b883a 	mov	r5,r2
 801ee94:	01020174 	movhi	r4,2053
 801ee98:	21048b04 	addi	r4,r4,4652
 801ee9c:	800325c0 	call	800325c <printf>
           
           /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801eea0:	e0bffc43 	ldbu	r2,-15(fp)
 801eea4:	100b883a 	mov	r5,r2
 801eea8:	e13ffb17 	ldw	r4,-20(fp)
 801eeac:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
           
           return TSE_PHY_AN_NOT_COMPLETE;
 801eeb0:	00bfffc4 	movi	r2,-1
 801eeb4:	00001406 	br	801ef08 <alt_tse_phy_restart_an+0x1b0>
        }
        usleep(2000);
 801eeb8:	0101f404 	movi	r4,2000
 801eebc:	803bb580 	call	803bb58 <usleep>
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 801eec0:	01c00044 	movi	r7,1
 801eec4:	01800144 	movi	r6,5
 801eec8:	01400044 	movi	r5,1
 801eecc:	e13ffb17 	ldw	r4,-20(fp)
 801eed0:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801eed4:	103fe526 	beq	r2,zero,801ee6c <alt_tse_phy_restart_an+0x114>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 801eed8:	e0bffc87 	ldb	r2,-14(fp)
 801eedc:	e0fffcc7 	ldb	r3,-13(fp)
 801eee0:	180d883a 	mov	r6,r3
 801eee4:	100b883a 	mov	r5,r2
 801eee8:	01020174 	movhi	r4,2053
 801eeec:	21049704 	addi	r4,r4,4700
 801eef0:	800325c0 	call	800325c <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801eef4:	e0bffc43 	ldbu	r2,-15(fp)
 801eef8:	100b883a 	mov	r5,r2
 801eefc:	e13ffb17 	ldw	r4,-20(fp)
 801ef00:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 801ef04:	0005883a 	mov	r2,zero
}
 801ef08:	e037883a 	mov	sp,fp
 801ef0c:	dfc00117 	ldw	ra,4(sp)
 801ef10:	df000017 	ldw	fp,0(sp)
 801ef14:	dec00204 	addi	sp,sp,8
 801ef18:	f800283a 	ret

0801ef1c <alt_tse_phy_check_link>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold)
{
 801ef1c:	defff804 	addi	sp,sp,-32
 801ef20:	dfc00715 	stw	ra,28(sp)
 801ef24:	df000615 	stw	fp,24(sp)
 801ef28:	df000604 	addi	fp,sp,24
 801ef2c:	e13ffb15 	stw	r4,-20(fp)
 801ef30:	e17ffa15 	stw	r5,-24(fp)
    alt_32 timeout=0;
 801ef34:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801ef38:	e0bffb17 	ldw	r2,-20(fp)
 801ef3c:	10800617 	ldw	r2,24(r2)
 801ef40:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801ef44:	e0bffe17 	ldw	r2,-8(fp)
 801ef48:	10800317 	ldw	r2,12(r2)
 801ef4c:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801ef50:	e13ffe17 	ldw	r4,-8(fp)
 801ef54:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801ef58:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 801ef5c:	e13ffd17 	ldw	r4,-12(fp)
 801ef60:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801ef64:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801ef68:	e13ffb17 	ldw	r4,-20(fp)
 801ef6c:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801ef70:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801ef74:	e0bffb17 	ldw	r2,-20(fp)
 801ef78:	10800003 	ldbu	r2,0(r2)
 801ef7c:	10803fcc 	andi	r2,r2,255
 801ef80:	100b883a 	mov	r5,r2
 801ef84:	e13ffb17 	ldw	r4,-20(fp)
 801ef88:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 801ef8c:	e0bffc87 	ldb	r2,-14(fp)
 801ef90:	e0fffcc7 	ldb	r3,-13(fp)
 801ef94:	180d883a 	mov	r6,r3
 801ef98:	100b883a 	mov	r5,r2
 801ef9c:	01020174 	movhi	r4,2053
 801efa0:	2104a304 	addi	r4,r4,4748
 801efa4:	800325c0 	call	800325c <printf>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 801efa8:	00002106 	br	801f030 <alt_tse_phy_check_link+0x114>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
    {                 
        if (timeout++ > timeout_threshold) 
 801efac:	e0bfff17 	ldw	r2,-4(fp)
 801efb0:	10c00044 	addi	r3,r2,1
 801efb4:	e0ffff15 	stw	r3,-4(fp)
 801efb8:	1007883a 	mov	r3,r2
 801efbc:	e0bffa17 	ldw	r2,-24(fp)
 801efc0:	10c0192e 	bgeu	r2,r3,801f028 <alt_tse_phy_check_link+0x10c>
        {    
          tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 801efc4:	e0bffc87 	ldb	r2,-14(fp)
 801efc8:	e0fffcc7 	ldb	r3,-13(fp)
 801efcc:	180d883a 	mov	r6,r3
 801efd0:	100b883a 	mov	r5,r2
 801efd4:	01020174 	movhi	r4,2053
 801efd8:	2104ae04 	addi	r4,r4,4792
 801efdc:	800325c0 	call	800325c <printf>
          /* restart Auto-Negotiation */
          /* if Auto-Negotiation still cannot complete, then go to next PHY */
          if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE)
 801efe0:	e17ffa17 	ldw	r5,-24(fp)
 801efe4:	e13ffb17 	ldw	r4,-20(fp)
 801efe8:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
 801efec:	10bfffd8 	cmpnei	r2,r2,-1
 801eff0:	10000d1e 	bne	r2,zero,801f028 <alt_tse_phy_check_link+0x10c>
          {
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 801eff4:	e0bffc87 	ldb	r2,-14(fp)
 801eff8:	e0fffcc7 	ldb	r3,-13(fp)
 801effc:	180d883a 	mov	r6,r3
 801f000:	100b883a 	mov	r5,r2
 801f004:	01020174 	movhi	r4,2053
 801f008:	2104c204 	addi	r4,r4,4872
 801f00c:	800325c0 	call	800325c <printf>
            
            /* Restore previous MDIO address */
            alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801f010:	e0bffc43 	ldbu	r2,-15(fp)
 801f014:	100b883a 	mov	r5,r2
 801f018:	e13ffb17 	ldw	r4,-20(fp)
 801f01c:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
            return TSE_PHY_AN_NOT_COMPLETE;
 801f020:	00bfffc4 	movi	r2,-1
 801f024:	00001a06 	br	801f090 <alt_tse_phy_check_link+0x174>
          } 
        }   
        usleep(1000);        
 801f028:	0100fa04 	movi	r4,1000
 801f02c:	803bb580 	call	803bb58 <usleep>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 801f030:	01c00044 	movi	r7,1
 801f034:	01800384 	movi	r6,14
 801f038:	000b883a 	mov	r5,zero
 801f03c:	e13ffb17 	ldw	r4,-20(fp)
 801f040:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f044:	103fd91e 	bne	r2,zero,801efac <alt_tse_phy_check_link+0x90>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
 801f048:	01c00044 	movi	r7,1
 801f04c:	01800144 	movi	r6,5
 801f050:	01400044 	movi	r5,1
 801f054:	e13ffb17 	ldw	r4,-20(fp)
 801f058:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 801f05c:	103fd326 	beq	r2,zero,801efac <alt_tse_phy_check_link+0x90>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 801f060:	e0bffc87 	ldb	r2,-14(fp)
 801f064:	e0fffcc7 	ldb	r3,-13(fp)
 801f068:	180d883a 	mov	r6,r3
 801f06c:	100b883a 	mov	r5,r2
 801f070:	01020174 	movhi	r4,2053
 801f074:	2104cf04 	addi	r4,r4,4924
 801f078:	800325c0 	call	800325c <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801f07c:	e0bffc43 	ldbu	r2,-15(fp)
 801f080:	100b883a 	mov	r5,r2
 801f084:	e13ffb17 	ldw	r4,-20(fp)
 801f088:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 801f08c:	0005883a 	mov	r2,zero
}
 801f090:	e037883a 	mov	sp,fp
 801f094:	dfc00117 	ldw	ra,4(sp)
 801f098:	df000017 	ldw	fp,0(sp)
 801f09c:	dec00204 	addi	sp,sp,8
 801f0a0:	f800283a 	ret

0801f0a4 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 801f0a4:	defff904 	addi	sp,sp,-28
 801f0a8:	dfc00615 	stw	ra,24(sp)
 801f0ac:	df000515 	stw	fp,20(sp)
 801f0b0:	df000504 	addi	fp,sp,20
 801f0b4:	e13ffb15 	stw	r4,-20(fp)
    alt_32 return_value = TSE_PHY_AN_COMPLETE;
 801f0b8:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801f0bc:	e0bffb17 	ldw	r2,-20(fp)
 801f0c0:	10800617 	ldw	r2,24(r2)
 801f0c4:	e0bffd15 	stw	r2,-12(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801f0c8:	e0bffd17 	ldw	r2,-12(fp)
 801f0cc:	10800317 	ldw	r2,12(r2)
 801f0d0:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801f0d4:	e13ffd17 	ldw	r4,-12(fp)
 801f0d8:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801f0dc:	e0bffe45 	stb	r2,-7(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 801f0e0:	e13ffc17 	ldw	r4,-16(fp)
 801f0e4:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801f0e8:	e0bffe85 	stb	r2,-6(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801f0ec:	e13ffb17 	ldw	r4,-20(fp)
 801f0f0:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801f0f4:	e0bffec5 	stb	r2,-5(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801f0f8:	e0bffb17 	ldw	r2,-20(fp)
 801f0fc:	10800003 	ldbu	r2,0(r2)
 801f100:	10803fcc 	andi	r2,r2,255
 801f104:	100b883a 	mov	r5,r2
 801f108:	e13ffb17 	ldw	r4,-20(fp)
 801f10c:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 801f110:	01c00044 	movi	r7,1
 801f114:	018000c4 	movi	r6,3
 801f118:	01400044 	movi	r5,1
 801f11c:	e13ffb17 	ldw	r4,-20(fp)
 801f120:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f124:	10000d1e 	bne	r2,zero,801f15c <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 801f128:	e0bffe87 	ldb	r2,-6(fp)
 801f12c:	e0fffe47 	ldb	r3,-7(fp)
 801f130:	180d883a 	mov	r6,r3
 801f134:	100b883a 	mov	r5,r2
 801f138:	01020174 	movhi	r4,2053
 801f13c:	21046904 	addi	r4,r4,4516
 801f140:	800325c0 	call	800325c <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801f144:	e0bffec3 	ldbu	r2,-5(fp)
 801f148:	100b883a 	mov	r5,r2
 801f14c:	e13ffb17 	ldw	r4,-20(fp)
 801f150:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 801f154:	00bfff84 	movi	r2,-2
 801f158:	00013006 	br	801f61c <alt_tse_phy_get_cap+0x578>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 801f15c:	01427104 	movi	r5,2500
 801f160:	e13ffb17 	ldw	r4,-20(fp)
 801f164:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 801f168:	01c00044 	movi	r7,1
 801f16c:	01800144 	movi	r6,5
 801f170:	01400044 	movi	r5,1
 801f174:	e13ffb17 	ldw	r4,-20(fp)
 801f178:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f17c:	1000021e 	bne	r2,zero,801f188 <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 801f180:	00bfffc4 	movi	r2,-1
 801f184:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 801f188:	01c00044 	movi	r7,1
 801f18c:	018003c4 	movi	r6,15
 801f190:	014003c4 	movi	r5,15
 801f194:	e13ffb17 	ldw	r4,-20(fp)
 801f198:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f19c:	1007883a 	mov	r3,r2
 801f1a0:	e0bffb17 	ldw	r2,-20(fp)
 801f1a4:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 801f1a8:	01c00044 	movi	r7,1
 801f1ac:	01800384 	movi	r6,14
 801f1b0:	014003c4 	movi	r5,15
 801f1b4:	e13ffb17 	ldw	r4,-20(fp)
 801f1b8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f1bc:	1007883a 	mov	r3,r2
 801f1c0:	e0bffb17 	ldw	r2,-20(fp)
 801f1c4:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 801f1c8:	01c00044 	movi	r7,1
 801f1cc:	01800344 	movi	r6,13
 801f1d0:	014003c4 	movi	r5,15
 801f1d4:	e13ffb17 	ldw	r4,-20(fp)
 801f1d8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f1dc:	1007883a 	mov	r3,r2
 801f1e0:	e0bffb17 	ldw	r2,-20(fp)
 801f1e4:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 801f1e8:	01c00044 	movi	r7,1
 801f1ec:	01800304 	movi	r6,12
 801f1f0:	014003c4 	movi	r5,15
 801f1f4:	e13ffb17 	ldw	r4,-20(fp)
 801f1f8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f1fc:	1007883a 	mov	r3,r2
 801f200:	e0bffb17 	ldw	r2,-20(fp)
 801f204:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 801f208:	01c00044 	movi	r7,1
 801f20c:	018003c4 	movi	r6,15
 801f210:	01400044 	movi	r5,1
 801f214:	e13ffb17 	ldw	r4,-20(fp)
 801f218:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f21c:	1007883a 	mov	r3,r2
 801f220:	e0bffb17 	ldw	r2,-20(fp)
 801f224:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 801f228:	01c00044 	movi	r7,1
 801f22c:	01800384 	movi	r6,14
 801f230:	01400044 	movi	r5,1
 801f234:	e13ffb17 	ldw	r4,-20(fp)
 801f238:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f23c:	1007883a 	mov	r3,r2
 801f240:	e0bffb17 	ldw	r2,-20(fp)
 801f244:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 801f248:	01c00044 	movi	r7,1
 801f24c:	01800344 	movi	r6,13
 801f250:	01400044 	movi	r5,1
 801f254:	e13ffb17 	ldw	r4,-20(fp)
 801f258:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f25c:	1007883a 	mov	r3,r2
 801f260:	e0bffb17 	ldw	r2,-20(fp)
 801f264:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 801f268:	01c00044 	movi	r7,1
 801f26c:	01800284 	movi	r6,10
 801f270:	01400044 	movi	r5,1
 801f274:	e13ffb17 	ldw	r4,-20(fp)
 801f278:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f27c:	1007883a 	mov	r3,r2
 801f280:	e0bffb17 	ldw	r2,-20(fp)
 801f284:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 801f288:	01c00044 	movi	r7,1
 801f28c:	01800244 	movi	r6,9
 801f290:	01400044 	movi	r5,1
 801f294:	e13ffb17 	ldw	r4,-20(fp)
 801f298:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f29c:	1007883a 	mov	r3,r2
 801f2a0:	e0bffb17 	ldw	r2,-20(fp)
 801f2a4:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 801f2a8:	01c00044 	movi	r7,1
 801f2ac:	01800304 	movi	r6,12
 801f2b0:	01400044 	movi	r5,1
 801f2b4:	e13ffb17 	ldw	r4,-20(fp)
 801f2b8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f2bc:	1007883a 	mov	r3,r2
 801f2c0:	e0bffb17 	ldw	r2,-20(fp)
 801f2c4:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 801f2c8:	01c00044 	movi	r7,1
 801f2cc:	018002c4 	movi	r6,11
 801f2d0:	01400044 	movi	r5,1
 801f2d4:	e13ffb17 	ldw	r4,-20(fp)
 801f2d8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f2dc:	1007883a 	mov	r3,r2
 801f2e0:	e0bffb17 	ldw	r2,-20(fp)
 801f2e4:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 801f2e8:	01c00044 	movi	r7,1
 801f2ec:	018002c4 	movi	r6,11
 801f2f0:	01400284 	movi	r5,10
 801f2f4:	e13ffb17 	ldw	r4,-20(fp)
 801f2f8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f2fc:	1007883a 	mov	r3,r2
 801f300:	e0bffb17 	ldw	r2,-20(fp)
 801f304:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 801f308:	01c00044 	movi	r7,1
 801f30c:	01800284 	movi	r6,10
 801f310:	01400284 	movi	r5,10
 801f314:	e13ffb17 	ldw	r4,-20(fp)
 801f318:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f31c:	1007883a 	mov	r3,r2
 801f320:	e0bffb17 	ldw	r2,-20(fp)
 801f324:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 801f328:	01c00044 	movi	r7,1
 801f32c:	01800244 	movi	r6,9
 801f330:	01400144 	movi	r5,5
 801f334:	e13ffb17 	ldw	r4,-20(fp)
 801f338:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f33c:	1007883a 	mov	r3,r2
 801f340:	e0bffb17 	ldw	r2,-20(fp)
 801f344:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 801f348:	01c00044 	movi	r7,1
 801f34c:	01800204 	movi	r6,8
 801f350:	01400144 	movi	r5,5
 801f354:	e13ffb17 	ldw	r4,-20(fp)
 801f358:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f35c:	1007883a 	mov	r3,r2
 801f360:	e0bffb17 	ldw	r2,-20(fp)
 801f364:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 801f368:	01c00044 	movi	r7,1
 801f36c:	018001c4 	movi	r6,7
 801f370:	01400144 	movi	r5,5
 801f374:	e13ffb17 	ldw	r4,-20(fp)
 801f378:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f37c:	1007883a 	mov	r3,r2
 801f380:	e0bffb17 	ldw	r2,-20(fp)
 801f384:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 801f388:	01c00044 	movi	r7,1
 801f38c:	01800184 	movi	r6,6
 801f390:	01400144 	movi	r5,5
 801f394:	e13ffb17 	ldw	r4,-20(fp)
 801f398:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f39c:	1007883a 	mov	r3,r2
 801f3a0:	e0bffb17 	ldw	r2,-20(fp)
 801f3a4:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 801f3a8:	01c00044 	movi	r7,1
 801f3ac:	01800144 	movi	r6,5
 801f3b0:	01400144 	movi	r5,5
 801f3b4:	e13ffb17 	ldw	r4,-20(fp)
 801f3b8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f3bc:	1007883a 	mov	r3,r2
 801f3c0:	e0bffb17 	ldw	r2,-20(fp)
 801f3c4:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 801f3c8:	e0bffe87 	ldb	r2,-6(fp)
 801f3cc:	e0fffe47 	ldb	r3,-7(fp)
 801f3d0:	180d883a 	mov	r6,r3
 801f3d4:	100b883a 	mov	r5,r2
 801f3d8:	01020174 	movhi	r4,2053
 801f3dc:	2104da04 	addi	r4,r4,4968
 801f3e0:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 801f3e4:	e0bffb17 	ldw	r2,-20(fp)
 801f3e8:	10800043 	ldbu	r2,1(r2)
 801f3ec:	10803fcc 	andi	r2,r2,255
 801f3f0:	100b883a 	mov	r5,r2
 801f3f4:	01020174 	movhi	r4,2053
 801f3f8:	2104e504 	addi	r4,r4,5012
 801f3fc:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 801f400:	e0bffb17 	ldw	r2,-20(fp)
 801f404:	10800083 	ldbu	r2,2(r2)
 801f408:	10803fcc 	andi	r2,r2,255
 801f40c:	100b883a 	mov	r5,r2
 801f410:	01020174 	movhi	r4,2053
 801f414:	2104ef04 	addi	r4,r4,5052
 801f418:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 801f41c:	e0bffb17 	ldw	r2,-20(fp)
 801f420:	108000c3 	ldbu	r2,3(r2)
 801f424:	10803fcc 	andi	r2,r2,255
 801f428:	100b883a 	mov	r5,r2
 801f42c:	01020174 	movhi	r4,2053
 801f430:	2104f904 	addi	r4,r4,5092
 801f434:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 801f438:	e0bffb17 	ldw	r2,-20(fp)
 801f43c:	10800103 	ldbu	r2,4(r2)
 801f440:	10803fcc 	andi	r2,r2,255
 801f444:	100b883a 	mov	r5,r2
 801f448:	01020174 	movhi	r4,2053
 801f44c:	21050304 	addi	r4,r4,5132
 801f450:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 801f454:	e0bffb17 	ldw	r2,-20(fp)
 801f458:	10800143 	ldbu	r2,5(r2)
 801f45c:	10803fcc 	andi	r2,r2,255
 801f460:	100b883a 	mov	r5,r2
 801f464:	01020174 	movhi	r4,2053
 801f468:	21050d04 	addi	r4,r4,5172
 801f46c:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 801f470:	e0bffb17 	ldw	r2,-20(fp)
 801f474:	10800183 	ldbu	r2,6(r2)
 801f478:	10803fcc 	andi	r2,r2,255
 801f47c:	100b883a 	mov	r5,r2
 801f480:	01020174 	movhi	r4,2053
 801f484:	21051704 	addi	r4,r4,5212
 801f488:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 801f48c:	e0bffb17 	ldw	r2,-20(fp)
 801f490:	108001c3 	ldbu	r2,7(r2)
 801f494:	10803fcc 	andi	r2,r2,255
 801f498:	100b883a 	mov	r5,r2
 801f49c:	01020174 	movhi	r4,2053
 801f4a0:	21052104 	addi	r4,r4,5252
 801f4a4:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 801f4a8:	e0bffb17 	ldw	r2,-20(fp)
 801f4ac:	10800203 	ldbu	r2,8(r2)
 801f4b0:	10803fcc 	andi	r2,r2,255
 801f4b4:	100b883a 	mov	r5,r2
 801f4b8:	01020174 	movhi	r4,2053
 801f4bc:	21052b04 	addi	r4,r4,5292
 801f4c0:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 801f4c4:	e0bffb17 	ldw	r2,-20(fp)
 801f4c8:	10800243 	ldbu	r2,9(r2)
 801f4cc:	10803fcc 	andi	r2,r2,255
 801f4d0:	100b883a 	mov	r5,r2
 801f4d4:	01020174 	movhi	r4,2053
 801f4d8:	21053504 	addi	r4,r4,5332
 801f4dc:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 801f4e0:	e0bffb17 	ldw	r2,-20(fp)
 801f4e4:	10800283 	ldbu	r2,10(r2)
 801f4e8:	10803fcc 	andi	r2,r2,255
 801f4ec:	100b883a 	mov	r5,r2
 801f4f0:	01020174 	movhi	r4,2053
 801f4f4:	21053f04 	addi	r4,r4,5372
 801f4f8:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 801f4fc:	e0bffb17 	ldw	r2,-20(fp)
 801f500:	108002c3 	ldbu	r2,11(r2)
 801f504:	10803fcc 	andi	r2,r2,255
 801f508:	100b883a 	mov	r5,r2
 801f50c:	01020174 	movhi	r4,2053
 801f510:	21054904 	addi	r4,r4,5412
 801f514:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "\n");
 801f518:	01000284 	movi	r4,10
 801f51c:	800329c0 	call	800329c <putchar>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 801f520:	e0bffe87 	ldb	r2,-6(fp)
 801f524:	e0fffe47 	ldb	r3,-7(fp)
 801f528:	180d883a 	mov	r6,r3
 801f52c:	100b883a 	mov	r5,r2
 801f530:	01020174 	movhi	r4,2053
 801f534:	21055304 	addi	r4,r4,5452
 801f538:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 801f53c:	e0bffb17 	ldw	r2,-20(fp)
 801f540:	10800303 	ldbu	r2,12(r2)
 801f544:	10803fcc 	andi	r2,r2,255
 801f548:	100b883a 	mov	r5,r2
 801f54c:	01020174 	movhi	r4,2053
 801f550:	2104f904 	addi	r4,r4,5092
 801f554:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 801f558:	e0bffb17 	ldw	r2,-20(fp)
 801f55c:	10800343 	ldbu	r2,13(r2)
 801f560:	10803fcc 	andi	r2,r2,255
 801f564:	100b883a 	mov	r5,r2
 801f568:	01020174 	movhi	r4,2053
 801f56c:	21050304 	addi	r4,r4,5132
 801f570:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 801f574:	e0bffb17 	ldw	r2,-20(fp)
 801f578:	10800383 	ldbu	r2,14(r2)
 801f57c:	10803fcc 	andi	r2,r2,255
 801f580:	100b883a 	mov	r5,r2
 801f584:	01020174 	movhi	r4,2053
 801f588:	21050d04 	addi	r4,r4,5172
 801f58c:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 801f590:	e0bffb17 	ldw	r2,-20(fp)
 801f594:	108003c3 	ldbu	r2,15(r2)
 801f598:	10803fcc 	andi	r2,r2,255
 801f59c:	100b883a 	mov	r5,r2
 801f5a0:	01020174 	movhi	r4,2053
 801f5a4:	21056004 	addi	r4,r4,5504
 801f5a8:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 801f5ac:	e0bffb17 	ldw	r2,-20(fp)
 801f5b0:	10800403 	ldbu	r2,16(r2)
 801f5b4:	10803fcc 	andi	r2,r2,255
 801f5b8:	100b883a 	mov	r5,r2
 801f5bc:	01020174 	movhi	r4,2053
 801f5c0:	21056a04 	addi	r4,r4,5544
 801f5c4:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 801f5c8:	e0bffb17 	ldw	r2,-20(fp)
 801f5cc:	10800443 	ldbu	r2,17(r2)
 801f5d0:	10803fcc 	andi	r2,r2,255
 801f5d4:	100b883a 	mov	r5,r2
 801f5d8:	01020174 	movhi	r4,2053
 801f5dc:	21057404 	addi	r4,r4,5584
 801f5e0:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 801f5e4:	e0bffb17 	ldw	r2,-20(fp)
 801f5e8:	10800483 	ldbu	r2,18(r2)
 801f5ec:	10803fcc 	andi	r2,r2,255
 801f5f0:	100b883a 	mov	r5,r2
 801f5f4:	01020174 	movhi	r4,2053
 801f5f8:	21057e04 	addi	r4,r4,5624
 801f5fc:	800325c0 	call	800325c <printf>
    tse_dprintf(6, "\n");
 801f600:	01000284 	movi	r4,10
 801f604:	800329c0 	call	800329c <putchar>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801f608:	e0bffec3 	ldbu	r2,-5(fp)
 801f60c:	100b883a 	mov	r5,r2
 801f610:	e13ffb17 	ldw	r4,-20(fp)
 801f614:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 801f618:	e0bfff17 	ldw	r2,-4(fp)
    
}
 801f61c:	e037883a 	mov	sp,fp
 801f620:	dfc00117 	ldw	ra,4(sp)
 801f624:	df000017 	ldw	fp,0(sp)
 801f628:	dec00204 	addi	sp,sp,8
 801f62c:	f800283a 	ret

0801f630 <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 801f630:	defff604 	addi	sp,sp,-40
 801f634:	dfc00915 	stw	ra,36(sp)
 801f638:	df000815 	stw	fp,32(sp)
 801f63c:	df000804 	addi	fp,sp,32
 801f640:	e13ffa15 	stw	r4,-24(fp)
 801f644:	2805883a 	mov	r2,r5
 801f648:	e0bff905 	stb	r2,-28(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801f64c:	e0bffa17 	ldw	r2,-24(fp)
 801f650:	10800617 	ldw	r2,24(r2)
 801f654:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801f658:	e0bffc17 	ldw	r2,-16(fp)
 801f65c:	10800317 	ldw	r2,12(r2)
 801f660:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801f664:	e13ffc17 	ldw	r4,-16(fp)
 801f668:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801f66c:	e0bffdc5 	stb	r2,-9(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801f670:	e13ffe17 	ldw	r4,-8(fp)
 801f674:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801f678:	e0bfffc5 	stb	r2,-1(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801f67c:	e13ffa17 	ldw	r4,-24(fp)
 801f680:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801f684:	e0bffbc5 	stb	r2,-17(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801f688:	e0bffa17 	ldw	r2,-24(fp)
 801f68c:	10800003 	ldbu	r2,0(r2)
 801f690:	10803fcc 	andi	r2,r2,255
 801f694:	100b883a 	mov	r5,r2
 801f698:	e13ffa17 	ldw	r4,-24(fp)
 801f69c:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 801f6a0:	e0bff903 	ldbu	r2,-28(fp)
 801f6a4:	10002d26 	beq	r2,zero,801f75c <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 801f6a8:	01c00044 	movi	r7,1
 801f6ac:	01800344 	movi	r6,13
 801f6b0:	014003c4 	movi	r5,15
 801f6b4:	e13ffa17 	ldw	r4,-24(fp)
 801f6b8:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f6bc:	e0bffb85 	stb	r2,-18(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 801f6c0:	e0bffb83 	ldbu	r2,-18(fp)
 801f6c4:	d8800015 	stw	r2,0(sp)
 801f6c8:	01c00044 	movi	r7,1
 801f6cc:	01800244 	movi	r6,9
 801f6d0:	01400244 	movi	r5,9
 801f6d4:	e13ffa17 	ldw	r4,-24(fp)
 801f6d8:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801f6dc:	e0bfffc7 	ldb	r2,-1(fp)
 801f6e0:	e0fffdc7 	ldb	r3,-9(fp)
 801f6e4:	e13ffb83 	ldbu	r4,-18(fp)
 801f6e8:	200f883a 	mov	r7,r4
 801f6ec:	180d883a 	mov	r6,r3
 801f6f0:	100b883a 	mov	r5,r2
 801f6f4:	01020174 	movhi	r4,2053
 801f6f8:	21058804 	addi	r4,r4,5664
 801f6fc:	800325c0 	call	800325c <printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 801f700:	01c00044 	movi	r7,1
 801f704:	01800304 	movi	r6,12
 801f708:	014003c4 	movi	r5,15
 801f70c:	e13ffa17 	ldw	r4,-24(fp)
 801f710:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f714:	e0bffb85 	stb	r2,-18(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 801f718:	e0bffb83 	ldbu	r2,-18(fp)
 801f71c:	d8800015 	stw	r2,0(sp)
 801f720:	01c00044 	movi	r7,1
 801f724:	01800204 	movi	r6,8
 801f728:	01400244 	movi	r5,9
 801f72c:	e13ffa17 	ldw	r4,-24(fp)
 801f730:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801f734:	e0bfffc7 	ldb	r2,-1(fp)
 801f738:	e0fffdc7 	ldb	r3,-9(fp)
 801f73c:	e13ffb83 	ldbu	r4,-18(fp)
 801f740:	200f883a 	mov	r7,r4
 801f744:	180d883a 	mov	r6,r3
 801f748:	100b883a 	mov	r5,r2
 801f74c:	01020174 	movhi	r4,2053
 801f750:	21059b04 	addi	r4,r4,5740
 801f754:	800325c0 	call	800325c <printf>
 801f758:	00001c06 	br	801f7cc <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 801f75c:	d8000015 	stw	zero,0(sp)
 801f760:	01c00044 	movi	r7,1
 801f764:	01800244 	movi	r6,9
 801f768:	01400244 	movi	r5,9
 801f76c:	e13ffa17 	ldw	r4,-24(fp)
 801f770:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801f774:	e0bfffc7 	ldb	r2,-1(fp)
 801f778:	e0fffdc7 	ldb	r3,-9(fp)
 801f77c:	000f883a 	mov	r7,zero
 801f780:	180d883a 	mov	r6,r3
 801f784:	100b883a 	mov	r5,r2
 801f788:	01020174 	movhi	r4,2053
 801f78c:	21058804 	addi	r4,r4,5664
 801f790:	800325c0 	call	800325c <printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 801f794:	d8000015 	stw	zero,0(sp)
 801f798:	01c00044 	movi	r7,1
 801f79c:	01800204 	movi	r6,8
 801f7a0:	01400244 	movi	r5,9
 801f7a4:	e13ffa17 	ldw	r4,-24(fp)
 801f7a8:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801f7ac:	e0bfffc7 	ldb	r2,-1(fp)
 801f7b0:	e0fffdc7 	ldb	r3,-9(fp)
 801f7b4:	000f883a 	mov	r7,zero
 801f7b8:	180d883a 	mov	r6,r3
 801f7bc:	100b883a 	mov	r5,r2
 801f7c0:	01020174 	movhi	r4,2053
 801f7c4:	2105ae04 	addi	r4,r4,5816
 801f7c8:	800325c0 	call	800325c <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 801f7cc:	e0bffbc3 	ldbu	r2,-17(fp)
 801f7d0:	100b883a 	mov	r5,r2
 801f7d4:	e13ffa17 	ldw	r4,-24(fp)
 801f7d8:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 801f7dc:	0005883a 	mov	r2,zero
}
 801f7e0:	e037883a 	mov	sp,fp
 801f7e4:	dfc00117 	ldw	ra,4(sp)
 801f7e8:	df000017 	ldw	fp,0(sp)
 801f7ec:	dec00204 	addi	sp,sp,8
 801f7f0:	f800283a 	ret

0801f7f4 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 801f7f4:	defff704 	addi	sp,sp,-36
 801f7f8:	dfc00815 	stw	ra,32(sp)
 801f7fc:	df000715 	stw	fp,28(sp)
 801f800:	df000704 	addi	fp,sp,28
 801f804:	e13ffb15 	stw	r4,-20(fp)
 801f808:	2805883a 	mov	r2,r5
 801f80c:	e0bffa05 	stb	r2,-24(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801f810:	e0bffb17 	ldw	r2,-20(fp)
 801f814:	10800617 	ldw	r2,24(r2)
 801f818:	e0bffd15 	stw	r2,-12(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801f81c:	e0bffd17 	ldw	r2,-12(fp)
 801f820:	10800317 	ldw	r2,12(r2)
 801f824:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801f828:	e13ffd17 	ldw	r4,-12(fp)
 801f82c:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801f830:	e0bfff85 	stb	r2,-2(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801f834:	e13ffe17 	ldw	r4,-8(fp)
 801f838:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801f83c:	e0bfff45 	stb	r2,-3(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801f840:	e13ffb17 	ldw	r4,-20(fp)
 801f844:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801f848:	e0bfffc5 	stb	r2,-1(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801f84c:	e0bffb17 	ldw	r2,-20(fp)
 801f850:	10800003 	ldbu	r2,0(r2)
 801f854:	10803fcc 	andi	r2,r2,255
 801f858:	100b883a 	mov	r5,r2
 801f85c:	e13ffb17 	ldw	r4,-20(fp)
 801f860:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 801f864:	e0bffa03 	ldbu	r2,-24(fp)
 801f868:	10004326 	beq	r2,zero,801f978 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 801f86c:	01c00044 	movi	r7,1
 801f870:	018003c4 	movi	r6,15
 801f874:	01400044 	movi	r5,1
 801f878:	e13ffb17 	ldw	r4,-20(fp)
 801f87c:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f880:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 801f884:	e0bffcc3 	ldbu	r2,-13(fp)
 801f888:	d8800015 	stw	r2,0(sp)
 801f88c:	01c00044 	movi	r7,1
 801f890:	01800244 	movi	r6,9
 801f894:	01400104 	movi	r5,4
 801f898:	e13ffb17 	ldw	r4,-20(fp)
 801f89c:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 801f8a0:	e0bfff47 	ldb	r2,-3(fp)
 801f8a4:	e0ffff87 	ldb	r3,-2(fp)
 801f8a8:	e13ffcc3 	ldbu	r4,-13(fp)
 801f8ac:	200f883a 	mov	r7,r4
 801f8b0:	180d883a 	mov	r6,r3
 801f8b4:	100b883a 	mov	r5,r2
 801f8b8:	01020174 	movhi	r4,2053
 801f8bc:	2105c004 	addi	r4,r4,5888
 801f8c0:	800325c0 	call	800325c <printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 801f8c4:	01c00044 	movi	r7,1
 801f8c8:	01800384 	movi	r6,14
 801f8cc:	01400044 	movi	r5,1
 801f8d0:	e13ffb17 	ldw	r4,-20(fp)
 801f8d4:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f8d8:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 801f8dc:	e0bffcc3 	ldbu	r2,-13(fp)
 801f8e0:	d8800015 	stw	r2,0(sp)
 801f8e4:	01c00044 	movi	r7,1
 801f8e8:	01800204 	movi	r6,8
 801f8ec:	01400104 	movi	r5,4
 801f8f0:	e13ffb17 	ldw	r4,-20(fp)
 801f8f4:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801f8f8:	e0bfff47 	ldb	r2,-3(fp)
 801f8fc:	e0ffff87 	ldb	r3,-2(fp)
 801f900:	e13ffcc3 	ldbu	r4,-13(fp)
 801f904:	200f883a 	mov	r7,r4
 801f908:	180d883a 	mov	r6,r3
 801f90c:	100b883a 	mov	r5,r2
 801f910:	01020174 	movhi	r4,2053
 801f914:	2105d004 	addi	r4,r4,5952
 801f918:	800325c0 	call	800325c <printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 801f91c:	01c00044 	movi	r7,1
 801f920:	01800344 	movi	r6,13
 801f924:	01400044 	movi	r5,1
 801f928:	e13ffb17 	ldw	r4,-20(fp)
 801f92c:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801f930:	e0bffcc5 	stb	r2,-13(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 801f934:	e0bffcc3 	ldbu	r2,-13(fp)
 801f938:	d8800015 	stw	r2,0(sp)
 801f93c:	01c00044 	movi	r7,1
 801f940:	018001c4 	movi	r6,7
 801f944:	01400104 	movi	r5,4
 801f948:	e13ffb17 	ldw	r4,-20(fp)
 801f94c:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801f950:	e0bfff47 	ldb	r2,-3(fp)
 801f954:	e0ffff87 	ldb	r3,-2(fp)
 801f958:	e13ffcc3 	ldbu	r4,-13(fp)
 801f95c:	200f883a 	mov	r7,r4
 801f960:	180d883a 	mov	r6,r3
 801f964:	100b883a 	mov	r5,r2
 801f968:	01020174 	movhi	r4,2053
 801f96c:	2105e304 	addi	r4,r4,6028
 801f970:	800325c0 	call	800325c <printf>
 801f974:	00002a06 	br	801fa20 <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 801f978:	d8000015 	stw	zero,0(sp)
 801f97c:	01c00044 	movi	r7,1
 801f980:	01800244 	movi	r6,9
 801f984:	01400104 	movi	r5,4
 801f988:	e13ffb17 	ldw	r4,-20(fp)
 801f98c:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 801f990:	e0bfff47 	ldb	r2,-3(fp)
 801f994:	e0ffff87 	ldb	r3,-2(fp)
 801f998:	000f883a 	mov	r7,zero
 801f99c:	180d883a 	mov	r6,r3
 801f9a0:	100b883a 	mov	r5,r2
 801f9a4:	01020174 	movhi	r4,2053
 801f9a8:	2105c004 	addi	r4,r4,5888
 801f9ac:	800325c0 	call	800325c <printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 801f9b0:	d8000015 	stw	zero,0(sp)
 801f9b4:	01c00044 	movi	r7,1
 801f9b8:	01800204 	movi	r6,8
 801f9bc:	01400104 	movi	r5,4
 801f9c0:	e13ffb17 	ldw	r4,-20(fp)
 801f9c4:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801f9c8:	e0bfff47 	ldb	r2,-3(fp)
 801f9cc:	e0ffff87 	ldb	r3,-2(fp)
 801f9d0:	000f883a 	mov	r7,zero
 801f9d4:	180d883a 	mov	r6,r3
 801f9d8:	100b883a 	mov	r5,r2
 801f9dc:	01020174 	movhi	r4,2053
 801f9e0:	2105d004 	addi	r4,r4,5952
 801f9e4:	800325c0 	call	800325c <printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 801f9e8:	d8000015 	stw	zero,0(sp)
 801f9ec:	01c00044 	movi	r7,1
 801f9f0:	018001c4 	movi	r6,7
 801f9f4:	01400104 	movi	r5,4
 801f9f8:	e13ffb17 	ldw	r4,-20(fp)
 801f9fc:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801fa00:	e0bfff47 	ldb	r2,-3(fp)
 801fa04:	e0ffff87 	ldb	r3,-2(fp)
 801fa08:	000f883a 	mov	r7,zero
 801fa0c:	180d883a 	mov	r6,r3
 801fa10:	100b883a 	mov	r5,r2
 801fa14:	01020174 	movhi	r4,2053
 801fa18:	2105e304 	addi	r4,r4,6028
 801fa1c:	800325c0 	call	800325c <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 801fa20:	e0bfffc3 	ldbu	r2,-1(fp)
 801fa24:	100b883a 	mov	r5,r2
 801fa28:	e13ffb17 	ldw	r4,-20(fp)
 801fa2c:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 801fa30:	0005883a 	mov	r2,zero
}
 801fa34:	e037883a 	mov	sp,fp
 801fa38:	dfc00117 	ldw	ra,4(sp)
 801fa3c:	df000017 	ldw	fp,0(sp)
 801fa40:	dec00204 	addi	sp,sp,8
 801fa44:	f800283a 	ret

0801fa48 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 801fa48:	defff504 	addi	sp,sp,-44
 801fa4c:	dfc00a15 	stw	ra,40(sp)
 801fa50:	df000915 	stw	fp,36(sp)
 801fa54:	df000904 	addi	fp,sp,36
 801fa58:	e13ff915 	stw	r4,-28(fp)
 801fa5c:	2805883a 	mov	r2,r5
 801fa60:	e0bff805 	stb	r2,-32(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 801fa64:	e0bff917 	ldw	r2,-28(fp)
 801fa68:	10800617 	ldw	r2,24(r2)
 801fa6c:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 801fa70:	e0bfff17 	ldw	r2,-4(fp)
 801fa74:	10800317 	ldw	r2,12(r2)
 801fa78:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801fa7c:	e13fff17 	ldw	r4,-4(fp)
 801fa80:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801fa84:	e0bffd15 	stw	r2,-12(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801fa88:	e13ffe17 	ldw	r4,-8(fp)
 801fa8c:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801fa90:	e0bffc15 	stw	r2,-16(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 801fa94:	e13ff917 	ldw	r4,-28(fp)
 801fa98:	801d70c0 	call	801d70c <alt_tse_phy_rd_mdio_addr>
 801fa9c:	e0bffb15 	stw	r2,-20(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 801faa0:	e0bff917 	ldw	r2,-28(fp)
 801faa4:	10800003 	ldbu	r2,0(r2)
 801faa8:	10803fcc 	andi	r2,r2,255
 801faac:	100b883a 	mov	r5,r2
 801fab0:	e13ff917 	ldw	r4,-28(fp)
 801fab4:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 801fab8:	e0bff803 	ldbu	r2,-32(fp)
 801fabc:	10002926 	beq	r2,zero,801fb64 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 801fac0:	01c00044 	movi	r7,1
 801fac4:	01800304 	movi	r6,12
 801fac8:	01400044 	movi	r5,1
 801facc:	e13ff917 	ldw	r4,-28(fp)
 801fad0:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801fad4:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 801fad8:	e0bffac3 	ldbu	r2,-21(fp)
 801fadc:	d8800015 	stw	r2,0(sp)
 801fae0:	01c00044 	movi	r7,1
 801fae4:	01800184 	movi	r6,6
 801fae8:	01400104 	movi	r5,4
 801faec:	e13ff917 	ldw	r4,-28(fp)
 801faf0:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801faf4:	e0bffac3 	ldbu	r2,-21(fp)
 801faf8:	100f883a 	mov	r7,r2
 801fafc:	e1bffd17 	ldw	r6,-12(fp)
 801fb00:	e17ffc17 	ldw	r5,-16(fp)
 801fb04:	01020174 	movhi	r4,2053
 801fb08:	2105f604 	addi	r4,r4,6104
 801fb0c:	800325c0 	call	800325c <printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 801fb10:	01c00044 	movi	r7,1
 801fb14:	018002c4 	movi	r6,11
 801fb18:	01400044 	movi	r5,1
 801fb1c:	e13ff917 	ldw	r4,-28(fp)
 801fb20:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 801fb24:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 801fb28:	e0bffac3 	ldbu	r2,-21(fp)
 801fb2c:	d8800015 	stw	r2,0(sp)
 801fb30:	01c00044 	movi	r7,1
 801fb34:	01800144 	movi	r6,5
 801fb38:	01400104 	movi	r5,4
 801fb3c:	e13ff917 	ldw	r4,-28(fp)
 801fb40:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 801fb44:	e0bffac3 	ldbu	r2,-21(fp)
 801fb48:	100f883a 	mov	r7,r2
 801fb4c:	e1bffd17 	ldw	r6,-12(fp)
 801fb50:	e17ffc17 	ldw	r5,-16(fp)
 801fb54:	01020174 	movhi	r4,2053
 801fb58:	21060904 	addi	r4,r4,6180
 801fb5c:	800325c0 	call	800325c <printf>
 801fb60:	00001806 	br	801fbc4 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 801fb64:	d8000015 	stw	zero,0(sp)
 801fb68:	01c00044 	movi	r7,1
 801fb6c:	01800184 	movi	r6,6
 801fb70:	01400104 	movi	r5,4
 801fb74:	e13ff917 	ldw	r4,-28(fp)
 801fb78:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801fb7c:	000f883a 	mov	r7,zero
 801fb80:	e1bffd17 	ldw	r6,-12(fp)
 801fb84:	e17ffc17 	ldw	r5,-16(fp)
 801fb88:	01020174 	movhi	r4,2053
 801fb8c:	2105f604 	addi	r4,r4,6104
 801fb90:	800325c0 	call	800325c <printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 801fb94:	d8000015 	stw	zero,0(sp)
 801fb98:	01c00044 	movi	r7,1
 801fb9c:	01800144 	movi	r6,5
 801fba0:	01400104 	movi	r5,4
 801fba4:	e13ff917 	ldw	r4,-28(fp)
 801fba8:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 801fbac:	000f883a 	mov	r7,zero
 801fbb0:	e1bffd17 	ldw	r6,-12(fp)
 801fbb4:	e17ffc17 	ldw	r5,-16(fp)
 801fbb8:	01020174 	movhi	r4,2053
 801fbbc:	21060904 	addi	r4,r4,6180
 801fbc0:	800325c0 	call	800325c <printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 801fbc4:	e0bffb17 	ldw	r2,-20(fp)
 801fbc8:	10803fcc 	andi	r2,r2,255
 801fbcc:	100b883a 	mov	r5,r2
 801fbd0:	e13ff917 	ldw	r4,-28(fp)
 801fbd4:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 801fbd8:	0005883a 	mov	r2,zero
}
 801fbdc:	e037883a 	mov	sp,fp
 801fbe0:	dfc00117 	ldw	ra,4(sp)
 801fbe4:	df000017 	ldw	fp,0(sp)
 801fbe8:	dec00204 	addi	sp,sp,8
 801fbec:	f800283a 	ret

0801fbf0 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 801fbf0:	defff504 	addi	sp,sp,-44
 801fbf4:	dfc00a15 	stw	ra,40(sp)
 801fbf8:	df000915 	stw	fp,36(sp)
 801fbfc:	df000904 	addi	fp,sp,36
 801fc00:	e13ff715 	stw	r4,-36(fp)
    
    alt_32 i;
    alt_u8 common_1000 = 1;
 801fc04:	00800044 	movi	r2,1
 801fc08:	e0bfffc5 	stb	r2,-1(fp)
    alt_u8 common_100 = 1;
 801fc0c:	00800044 	movi	r2,1
 801fc10:	e0bffdc5 	stb	r2,-9(fp)
    alt_u8 common_10 = 1;
 801fc14:	00800044 	movi	r2,1
 801fc18:	e0bffd85 	stb	r2,-10(fp)
    
    alt_32 common_speed;
    
    alt_u8 none_an_complete = 1;
 801fc1c:	00800044 	movi	r2,1
 801fc20:	e0bffbc5 	stb	r2,-17(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 801fc24:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_phy_info *pphy = 0;
 801fc28:	e03ff915 	stw	zero,-28(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801fc2c:	e13ff717 	ldw	r4,-36(fp)
 801fc30:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801fc34:	e0bff8c5 	stb	r2,-29(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 801fc38:	e03ffe15 	stw	zero,-8(fp)
 801fc3c:	00001a06 	br	801fca8 <alt_tse_phy_get_common_speed+0xb8>
        pmac_info = pmac_group->pmac_info[i];
 801fc40:	e0fff717 	ldw	r3,-36(fp)
 801fc44:	e0bffe17 	ldw	r2,-8(fp)
 801fc48:	10800044 	addi	r2,r2,1
 801fc4c:	100490ba 	slli	r2,r2,2
 801fc50:	1885883a 	add	r2,r3,r2
 801fc54:	10800017 	ldw	r2,0(r2)
 801fc58:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 801fc5c:	e0bffa17 	ldw	r2,-24(fp)
 801fc60:	10800117 	ldw	r2,4(r2)
 801fc64:	e0bff915 	stw	r2,-28(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 801fc68:	e0bff917 	ldw	r2,-28(fp)
 801fc6c:	10000926 	beq	r2,zero,801fc94 <alt_tse_phy_get_common_speed+0xa4>
            alt_tse_phy_set_adv_1000(pphy, 1);
 801fc70:	01400044 	movi	r5,1
 801fc74:	e13ff917 	ldw	r4,-28(fp)
 801fc78:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 801fc7c:	01400044 	movi	r5,1
 801fc80:	e13ff917 	ldw	r4,-28(fp)
 801fc84:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 801fc88:	01400044 	movi	r5,1
 801fc8c:	e13ff917 	ldw	r4,-28(fp)
 801fc90:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 801fc94:	01000284 	movi	r4,10
 801fc98:	800329c0 	call	800329c <putchar>
    for(i = 0; i < pmac_group->channel; i++) {
 801fc9c:	e0bffe17 	ldw	r2,-8(fp)
 801fca0:	10800044 	addi	r2,r2,1
 801fca4:	e0bffe15 	stw	r2,-8(fp)
 801fca8:	e0bff717 	ldw	r2,-36(fp)
 801fcac:	10800003 	ldbu	r2,0(r2)
 801fcb0:	10803fcc 	andi	r2,r2,255
 801fcb4:	e0fffe17 	ldw	r3,-8(fp)
 801fcb8:	18bfe116 	blt	r3,r2,801fc40 <alt_tse_phy_get_common_speed+0x50>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 801fcbc:	e03ffe15 	stw	zero,-8(fp)
 801fcc0:	00005506 	br	801fe18 <alt_tse_phy_get_common_speed+0x228>

        pmac_info = pmac_group->pmac_info[i];
 801fcc4:	e0fff717 	ldw	r3,-36(fp)
 801fcc8:	e0bffe17 	ldw	r2,-8(fp)
 801fccc:	10800044 	addi	r2,r2,1
 801fcd0:	100490ba 	slli	r2,r2,2
 801fcd4:	1885883a 	add	r2,r3,r2
 801fcd8:	10800017 	ldw	r2,0(r2)
 801fcdc:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 801fce0:	e0bffa17 	ldw	r2,-24(fp)
 801fce4:	10800117 	ldw	r2,4(r2)
 801fce8:	e0bff915 	stw	r2,-28(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 801fcec:	e0bff917 	ldw	r2,-28(fp)
 801fcf0:	10004326 	beq	r2,zero,801fe00 <alt_tse_phy_get_common_speed+0x210>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 801fcf4:	e13ff917 	ldw	r4,-28(fp)
 801fcf8:	801f0a40 	call	801f0a4 <alt_tse_phy_get_cap>
 801fcfc:	1000421e 	bne	r2,zero,801fe08 <alt_tse_phy_get_common_speed+0x218>
            continue;
        }
        
        none_an_complete = 0;
 801fd00:	e03ffbc5 	stb	zero,-17(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 801fd04:	e0bffa17 	ldw	r2,-24(fp)
 801fd08:	10800003 	ldbu	r2,0(r2)
 801fd0c:	10803fcc 	andi	r2,r2,255
 801fd10:	10800058 	cmpnei	r2,r2,1
 801fd14:	1000021e 	bne	r2,zero,801fd20 <alt_tse_phy_get_common_speed+0x130>
            common_1000 = 0;
 801fd18:	e03fffc5 	stb	zero,-1(fp)
 801fd1c:	00000706 	br	801fd3c <alt_tse_phy_get_common_speed+0x14c>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 801fd20:	e0bffa17 	ldw	r2,-24(fp)
 801fd24:	10800003 	ldbu	r2,0(r2)
 801fd28:	10803fcc 	andi	r2,r2,255
 801fd2c:	10800098 	cmpnei	r2,r2,2
 801fd30:	1000021e 	bne	r2,zero,801fd3c <alt_tse_phy_get_common_speed+0x14c>
            common_100 = 0;
 801fd34:	e03ffdc5 	stb	zero,-9(fp)
            common_10 = 0;            
 801fd38:	e03ffd85 	stb	zero,-10(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 801fd3c:	e0bff917 	ldw	r2,-28(fp)
 801fd40:	10c000c3 	ldbu	r3,3(r2)
 801fd44:	e0bff917 	ldw	r2,-28(fp)
 801fd48:	10800303 	ldbu	r2,12(r2)
 801fd4c:	1884703a 	and	r2,r3,r2
 801fd50:	1007883a 	mov	r3,r2
 801fd54:	e0bfffc3 	ldbu	r2,-1(fp)
 801fd58:	10c4703a 	and	r2,r2,r3
 801fd5c:	e0bfffc5 	stb	r2,-1(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 801fd60:	e0bff917 	ldw	r2,-28(fp)
 801fd64:	10c00183 	ldbu	r3,6(r2)
 801fd68:	e0bff917 	ldw	r2,-28(fp)
 801fd6c:	108003c3 	ldbu	r2,15(r2)
 801fd70:	1884703a 	and	r2,r3,r2
 801fd74:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
 801fd78:	e0bff917 	ldw	r2,-28(fp)
 801fd7c:	10c001c3 	ldbu	r3,7(r2)
 801fd80:	e0bff917 	ldw	r2,-28(fp)
 801fd84:	10800403 	ldbu	r2,16(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 801fd88:	1884703a 	and	r2,r3,r2
 801fd8c:	2084b03a 	or	r2,r4,r2
 801fd90:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
 801fd94:	e0bff917 	ldw	r2,-28(fp)
 801fd98:	10c00143 	ldbu	r3,5(r2)
 801fd9c:	e0bff917 	ldw	r2,-28(fp)
 801fda0:	10800383 	ldbu	r2,14(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 801fda4:	1884703a 	and	r2,r3,r2
 801fda8:	2084b03a 	or	r2,r4,r2
 801fdac:	1007883a 	mov	r3,r2
 801fdb0:	e0bffdc3 	ldbu	r2,-9(fp)
 801fdb4:	10c4703a 	and	r2,r2,r3
 801fdb8:	e0bffdc5 	stb	r2,-9(fp)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 801fdbc:	e0bff917 	ldw	r2,-28(fp)
 801fdc0:	10c00283 	ldbu	r3,10(r2)
 801fdc4:	e0bff917 	ldw	r2,-28(fp)
 801fdc8:	10800443 	ldbu	r2,17(r2)
 801fdcc:	1884703a 	and	r2,r3,r2
 801fdd0:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
 801fdd4:	e0bff917 	ldw	r2,-28(fp)
 801fdd8:	10c002c3 	ldbu	r3,11(r2)
 801fddc:	e0bff917 	ldw	r2,-28(fp)
 801fde0:	10800483 	ldbu	r2,18(r2)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 801fde4:	1884703a 	and	r2,r3,r2
 801fde8:	2084b03a 	or	r2,r4,r2
 801fdec:	1007883a 	mov	r3,r2
 801fdf0:	e0bffd83 	ldbu	r2,-10(fp)
 801fdf4:	10c4703a 	and	r2,r2,r3
 801fdf8:	e0bffd85 	stb	r2,-10(fp)
 801fdfc:	00000306 	br	801fe0c <alt_tse_phy_get_common_speed+0x21c>
            continue;
 801fe00:	0001883a 	nop
 801fe04:	00000106 	br	801fe0c <alt_tse_phy_get_common_speed+0x21c>
            continue;
 801fe08:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
 801fe0c:	e0bffe17 	ldw	r2,-8(fp)
 801fe10:	10800044 	addi	r2,r2,1
 801fe14:	e0bffe15 	stw	r2,-8(fp)
 801fe18:	e0bff717 	ldw	r2,-36(fp)
 801fe1c:	10800003 	ldbu	r2,0(r2)
 801fe20:	10803fcc 	andi	r2,r2,255
 801fe24:	e0fffe17 	ldw	r3,-8(fp)
 801fe28:	18bfa616 	blt	r3,r2,801fcc4 <alt_tse_phy_get_common_speed+0xd4>

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 801fe2c:	e0bffbc3 	ldbu	r2,-17(fp)
 801fe30:	10800058 	cmpnei	r2,r2,1
 801fe34:	1000081e 	bne	r2,zero,801fe58 <alt_tse_phy_get_common_speed+0x268>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 801fe38:	00bfffc4 	movi	r2,-1
 801fe3c:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 801fe40:	e0bff8c7 	ldb	r2,-29(fp)
 801fe44:	100b883a 	mov	r5,r2
 801fe48:	01020174 	movhi	r4,2053
 801fe4c:	21061c04 	addi	r4,r4,6256
 801fe50:	800325c0 	call	800325c <printf>
 801fe54:	00002706 	br	801fef4 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_1000) {
 801fe58:	e0bfffc3 	ldbu	r2,-1(fp)
 801fe5c:	10000926 	beq	r2,zero,801fe84 <alt_tse_phy_get_common_speed+0x294>
        common_speed = TSE_PHY_SPEED_1000;
 801fe60:	00800084 	movi	r2,2
 801fe64:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 801fe68:	e0bff8c7 	ldb	r2,-29(fp)
 801fe6c:	0180fa04 	movi	r6,1000
 801fe70:	100b883a 	mov	r5,r2
 801fe74:	01020174 	movhi	r4,2053
 801fe78:	21062e04 	addi	r4,r4,6328
 801fe7c:	800325c0 	call	800325c <printf>
 801fe80:	00001c06 	br	801fef4 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_100) {
 801fe84:	e0bffdc3 	ldbu	r2,-9(fp)
 801fe88:	10000926 	beq	r2,zero,801feb0 <alt_tse_phy_get_common_speed+0x2c0>
        common_speed = TSE_PHY_SPEED_100;
 801fe8c:	00800044 	movi	r2,1
 801fe90:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 801fe94:	e0bff8c7 	ldb	r2,-29(fp)
 801fe98:	01801904 	movi	r6,100
 801fe9c:	100b883a 	mov	r5,r2
 801fea0:	01020174 	movhi	r4,2053
 801fea4:	21062e04 	addi	r4,r4,6328
 801fea8:	800325c0 	call	800325c <printf>
 801feac:	00001106 	br	801fef4 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_10) {
 801feb0:	e0bffd83 	ldbu	r2,-10(fp)
 801feb4:	10000826 	beq	r2,zero,801fed8 <alt_tse_phy_get_common_speed+0x2e8>
        common_speed = TSE_PHY_SPEED_10;
 801feb8:	e03ffc15 	stw	zero,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 801febc:	e0bff8c7 	ldb	r2,-29(fp)
 801fec0:	01800284 	movi	r6,10
 801fec4:	100b883a 	mov	r5,r2
 801fec8:	01020174 	movhi	r4,2053
 801fecc:	21062e04 	addi	r4,r4,6328
 801fed0:	800325c0 	call	800325c <printf>
 801fed4:	00000706 	br	801fef4 <alt_tse_phy_get_common_speed+0x304>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 801fed8:	00bfffc4 	movi	r2,-1
 801fedc:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 801fee0:	e0bff8c7 	ldb	r2,-29(fp)
 801fee4:	100b883a 	mov	r5,r2
 801fee8:	01020174 	movhi	r4,2053
 801feec:	21063b04 	addi	r4,r4,6380
 801fef0:	800325c0 	call	800325c <printf>

    return common_speed;
 801fef4:	e0bffc17 	ldw	r2,-16(fp)
}
 801fef8:	e037883a 	mov	sp,fp
 801fefc:	dfc00117 	ldw	ra,4(sp)
 801ff00:	df000017 	ldw	fp,0(sp)
 801ff04:	dec00204 	addi	sp,sp,8
 801ff08:	f800283a 	ret

0801ff0c <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 801ff0c:	defff004 	addi	sp,sp,-64
 801ff10:	dfc00f15 	stw	ra,60(sp)
 801ff14:	df000e15 	stw	fp,56(sp)
 801ff18:	dc400d15 	stw	r17,52(sp)
 801ff1c:	dc000c15 	stw	r16,48(sp)
 801ff20:	df000e04 	addi	fp,sp,56
 801ff24:	e13ff415 	stw	r4,-48(fp)
 801ff28:	e17ff315 	stw	r5,-52(fp)
    alt_u8 speed;
    alt_u8 duplex;
    
    alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 801ff2c:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 801ff30:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_system_info *psys = 0;
 801ff34:	e03ff915 	stw	zero,-28(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 801ff38:	e03ff8c5 	stb	zero,-29(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 801ff3c:	e13ff417 	ldw	r4,-48(fp)
 801ff40:	801c9740 	call	801c974 <alt_tse_get_mac_group_index>
 801ff44:	e0bff885 	stb	r2,-30(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 801ff48:	e0bff417 	ldw	r2,-48(fp)
 801ff4c:	10800117 	ldw	r2,4(r2)
 801ff50:	10800217 	ldw	r2,8(r2)
 801ff54:	10800017 	ldw	r2,0(r2)
 801ff58:	e0bff715 	stw	r2,-36(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 801ff5c:	e0bff717 	ldw	r2,-36(fp)
 801ff60:	10801004 	addi	r2,r2,64
 801ff64:	10800037 	ldwio	r2,0(r2)
 801ff68:	e0bff615 	stw	r2,-40(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 801ff6c:	e0bff317 	ldw	r2,-52(fp)
 801ff70:	10000316 	blt	r2,zero,801ff80 <alt_tse_phy_set_common_speed+0x74>
 801ff74:	e0bff317 	ldw	r2,-52(fp)
 801ff78:	108000d0 	cmplti	r2,r2,3
 801ff7c:	10000c1e 	bne	r2,zero,801ffb0 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 801ff80:	e0bff887 	ldb	r2,-30(fp)
 801ff84:	e1bff317 	ldw	r6,-52(fp)
 801ff88:	100b883a 	mov	r5,r2
 801ff8c:	01020174 	movhi	r4,2053
 801ff90:	21064804 	addi	r4,r4,6432
 801ff94:	800325c0 	call	800325c <printf>
        /* Restore previous MDIO address */
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 801ff98:	e0bff717 	ldw	r2,-36(fp)
 801ff9c:	10801004 	addi	r2,r2,64
 801ffa0:	e0fff617 	ldw	r3,-40(fp)
 801ffa4:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
 801ffa8:	00bfffc4 	movi	r2,-1
 801ffac:	0000fc06 	br	80203a0 <alt_tse_phy_set_common_speed+0x494>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 801ffb0:	e03ffc15 	stw	zero,-16(fp)
 801ffb4:	0000da06 	br	8020320 <alt_tse_phy_set_common_speed+0x414>
        pmac_info = pmac_group->pmac_info[i];
 801ffb8:	e0fff417 	ldw	r3,-48(fp)
 801ffbc:	e0bffc17 	ldw	r2,-16(fp)
 801ffc0:	10800044 	addi	r2,r2,1
 801ffc4:	100490ba 	slli	r2,r2,2
 801ffc8:	1885883a 	add	r2,r3,r2
 801ffcc:	10800017 	ldw	r2,0(r2)
 801ffd0:	e0bffa15 	stw	r2,-24(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 801ffd4:	e13ffa17 	ldw	r4,-24(fp)
 801ffd8:	801c9e00 	call	801c9e0 <alt_tse_get_mac_info_index>
 801ffdc:	e0bff8c5 	stb	r2,-29(fp)

        pphy = pmac_info->pphy_info;
 801ffe0:	e0bffa17 	ldw	r2,-24(fp)
 801ffe4:	10800117 	ldw	r2,4(r2)
 801ffe8:	e0bffb15 	stw	r2,-20(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 801ffec:	e0bffb17 	ldw	r2,-20(fp)
 801fff0:	1000c726 	beq	r2,zero,8020310 <alt_tse_phy_set_common_speed+0x404>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 801fff4:	e0bffa17 	ldw	r2,-24(fp)
 801fff8:	10800217 	ldw	r2,8(r2)
 801fffc:	e0bff915 	stw	r2,-28(fp)
            
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 8020000:	e0bffb17 	ldw	r2,-20(fp)
 8020004:	10800003 	ldbu	r2,0(r2)
 8020008:	10803fcc 	andi	r2,r2,255
 802000c:	100b883a 	mov	r5,r2
 8020010:	e13ffb17 	ldw	r4,-20(fp)
 8020014:	801d7540 	call	801d754 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8020018:	e0bffb17 	ldw	r2,-20(fp)
 802001c:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8020020:	10803fcc 	andi	r2,r2,255
 8020024:	10000c1e 	bne	r2,zero,8020058 <alt_tse_phy_set_common_speed+0x14c>
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8020028:	e0bffb17 	ldw	r2,-20(fp)
 802002c:	10800103 	ldbu	r2,4(r2)
 8020030:	10803fcc 	andi	r2,r2,255
 8020034:	1000081e 	bne	r2,zero,8020058 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8020038:	e0bffb17 	ldw	r2,-20(fp)
 802003c:	10800043 	ldbu	r2,1(r2)
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8020040:	10803fcc 	andi	r2,r2,255
 8020044:	1000041e 	bne	r2,zero,8020058 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 8020048:	e0bffb17 	ldw	r2,-20(fp)
 802004c:	10800083 	ldbu	r2,2(r2)
 8020050:	10803fcc 	andi	r2,r2,255
 8020054:	10000226 	beq	r2,zero,8020060 <alt_tse_phy_set_common_speed+0x154>
 8020058:	00800044 	movi	r2,1
 802005c:	00000106 	br	8020064 <alt_tse_phy_set_common_speed+0x158>
 8020060:	0005883a 	mov	r2,zero
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 8020064:	e0bff5c5 	stb	r2,-41(fp)
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 8020068:	e0bff5c3 	ldbu	r2,-41(fp)
 802006c:	1000101e 	bne	r2,zero,80200b0 <alt_tse_phy_set_common_speed+0x1a4>
 8020070:	e0bff317 	ldw	r2,-52(fp)
 8020074:	10800098 	cmpnei	r2,r2,2
 8020078:	10000d1e 	bne	r2,zero,80200b0 <alt_tse_phy_set_common_speed+0x1a4>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 802007c:	e0bff887 	ldb	r2,-30(fp)
 8020080:	e0fff8c7 	ldb	r3,-29(fp)
 8020084:	180d883a 	mov	r6,r3
 8020088:	100b883a 	mov	r5,r2
 802008c:	01020174 	movhi	r4,2053
 8020090:	21065c04 	addi	r4,r4,6512
 8020094:	800325c0 	call	800325c <printf>
            /* Restore previous MDIO address */
            IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 8020098:	e0bff717 	ldw	r2,-36(fp)
 802009c:	10801004 	addi	r2,r2,64
 80200a0:	e0fff617 	ldw	r3,-40(fp)
 80200a4:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
 80200a8:	00bfffc4 	movi	r2,-1
 80200ac:	0000bc06 	br	80203a0 <alt_tse_phy_set_common_speed+0x494>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 80200b0:	01c00044 	movi	r7,1
 80200b4:	018000c4 	movi	r6,3
 80200b8:	01400044 	movi	r5,1
 80200bc:	e13ffb17 	ldw	r4,-20(fp)
 80200c0:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 80200c4:	1000141e 	bne	r2,zero,8020118 <alt_tse_phy_set_common_speed+0x20c>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 80200c8:	e0bff5c3 	ldbu	r2,-41(fp)
 80200cc:	10000926 	beq	r2,zero,80200f4 <alt_tse_phy_set_common_speed+0x1e8>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 80200d0:	e0bff317 	ldw	r2,-52(fp)
 80200d4:	1005d07a 	srai	r2,r2,1
 80200d8:	10bfffcc 	andi	r2,r2,65535
 80200dc:	d8800015 	stw	r2,0(sp)
 80200e0:	01c00044 	movi	r7,1
 80200e4:	01800184 	movi	r6,6
 80200e8:	000b883a 	mov	r5,zero
 80200ec:	e13ffb17 	ldw	r4,-20(fp)
 80200f0:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 80200f4:	e0bff317 	ldw	r2,-52(fp)
 80200f8:	10bfffcc 	andi	r2,r2,65535
 80200fc:	d8800015 	stw	r2,0(sp)
 8020100:	01c00044 	movi	r7,1
 8020104:	01800344 	movi	r6,13
 8020108:	000b883a 	mov	r5,zero
 802010c:	e13ffb17 	ldw	r4,-20(fp)
 8020110:	801d7ac0 	call	801d7ac <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 8020114:	00007f06 	br	8020314 <alt_tse_phy_set_common_speed+0x408>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 8020118:	e0bff317 	ldw	r2,-52(fp)
 802011c:	10800098 	cmpnei	r2,r2,2
 8020120:	10000a1e 	bne	r2,zero,802014c <alt_tse_phy_set_common_speed+0x240>
            alt_tse_phy_set_adv_1000(pphy, 1);
 8020124:	01400044 	movi	r5,1
 8020128:	e13ffb17 	ldw	r4,-20(fp)
 802012c:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 8020130:	01400044 	movi	r5,1
 8020134:	e13ffb17 	ldw	r4,-20(fp)
 8020138:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 802013c:	01400044 	movi	r5,1
 8020140:	e13ffb17 	ldw	r4,-20(fp)
 8020144:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
 8020148:	00002206 	br	80201d4 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 802014c:	e0bff317 	ldw	r2,-52(fp)
 8020150:	10800058 	cmpnei	r2,r2,1
 8020154:	10000a1e 	bne	r2,zero,8020180 <alt_tse_phy_set_common_speed+0x274>
            alt_tse_phy_set_adv_1000(pphy, 0);
 8020158:	000b883a 	mov	r5,zero
 802015c:	e13ffb17 	ldw	r4,-20(fp)
 8020160:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 8020164:	01400044 	movi	r5,1
 8020168:	e13ffb17 	ldw	r4,-20(fp)
 802016c:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 8020170:	01400044 	movi	r5,1
 8020174:	e13ffb17 	ldw	r4,-20(fp)
 8020178:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
 802017c:	00001506 	br	80201d4 <alt_tse_phy_set_common_speed+0x2c8>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 8020180:	e0bff317 	ldw	r2,-52(fp)
 8020184:	10000a1e 	bne	r2,zero,80201b0 <alt_tse_phy_set_common_speed+0x2a4>
            alt_tse_phy_set_adv_1000(pphy, 0);
 8020188:	000b883a 	mov	r5,zero
 802018c:	e13ffb17 	ldw	r4,-20(fp)
 8020190:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 8020194:	000b883a 	mov	r5,zero
 8020198:	e13ffb17 	ldw	r4,-20(fp)
 802019c:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 80201a0:	01400044 	movi	r5,1
 80201a4:	e13ffb17 	ldw	r4,-20(fp)
 80201a8:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
 80201ac:	00000906 	br	80201d4 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 80201b0:	000b883a 	mov	r5,zero
 80201b4:	e13ffb17 	ldw	r4,-20(fp)
 80201b8:	801f6300 	call	801f630 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 80201bc:	000b883a 	mov	r5,zero
 80201c0:	e13ffb17 	ldw	r4,-20(fp)
 80201c4:	801f7f40 	call	801f7f4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 80201c8:	000b883a 	mov	r5,zero
 80201cc:	e13ffb17 	ldw	r4,-20(fp)
 80201d0:	801fa480 	call	801fa48 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 80201d4:	01c00044 	movi	r7,1
 80201d8:	01800144 	movi	r6,5
 80201dc:	01400044 	movi	r5,1
 80201e0:	e13ffb17 	ldw	r4,-20(fp)
 80201e4:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 80201e8:	10800058 	cmpnei	r2,r2,1
 80201ec:	10003a1e 	bne	r2,zero,80202d8 <alt_tse_phy_set_common_speed+0x3cc>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 80201f0:	e0bff5c3 	ldbu	r2,-41(fp)
 80201f4:	10000f26 	beq	r2,zero,8020234 <alt_tse_phy_set_common_speed+0x328>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 80201f8:	e0bffb17 	ldw	r2,-20(fp)
 80201fc:	10800517 	ldw	r2,20(r2)
 8020200:	10801583 	ldbu	r2,86(r2)
 8020204:	10c03fcc 	andi	r3,r2,255
 8020208:	e0bffb17 	ldw	r2,-20(fp)
 802020c:	10800517 	ldw	r2,20(r2)
 8020210:	108015c3 	ldbu	r2,87(r2)
 8020214:	10803fcc 	andi	r2,r2,255
 8020218:	01c00084 	movi	r7,2
 802021c:	100d883a 	mov	r6,r2
 8020220:	180b883a 	mov	r5,r3
 8020224:	e13ffb17 	ldw	r4,-20(fp)
 8020228:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 802022c:	e0bffdc5 	stb	r2,-9(fp)
 8020230:	00000e06 	br	802026c <alt_tse_phy_set_common_speed+0x360>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 8020234:	e0bffb17 	ldw	r2,-20(fp)
 8020238:	10800517 	ldw	r2,20(r2)
 802023c:	10801583 	ldbu	r2,86(r2)
 8020240:	10c03fcc 	andi	r3,r2,255
 8020244:	e0bffb17 	ldw	r2,-20(fp)
 8020248:	10800517 	ldw	r2,20(r2)
 802024c:	108015c3 	ldbu	r2,87(r2)
 8020250:	10803fcc 	andi	r2,r2,255
 8020254:	01c00044 	movi	r7,1
 8020258:	100d883a 	mov	r6,r2
 802025c:	180b883a 	mov	r5,r3
 8020260:	e13ffb17 	ldw	r4,-20(fp)
 8020264:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 8020268:	e0bffdc5 	stb	r2,-9(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 802026c:	e0bffdc3 	ldbu	r2,-9(fp)
 8020270:	e0fff317 	ldw	r3,-52(fp)
 8020274:	18800326 	beq	r3,r2,8020284 <alt_tse_phy_set_common_speed+0x378>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 8020278:	01427104 	movi	r5,2500
 802027c:	e13ffb17 	ldw	r4,-20(fp)
 8020280:	801ed580 	call	801ed58 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 8020284:	e0bffb17 	ldw	r2,-20(fp)
 8020288:	10800517 	ldw	r2,20(r2)
 802028c:	10801583 	ldbu	r2,86(r2)
 8020290:	10c03fcc 	andi	r3,r2,255
 8020294:	e0bffb17 	ldw	r2,-20(fp)
 8020298:	10800517 	ldw	r2,20(r2)
 802029c:	10801603 	ldbu	r2,88(r2)
 80202a0:	10803fcc 	andi	r2,r2,255
 80202a4:	01c00044 	movi	r7,1
 80202a8:	100d883a 	mov	r6,r2
 80202ac:	180b883a 	mov	r5,r3
 80202b0:	e13ffb17 	ldw	r4,-20(fp)
 80202b4:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 80202b8:	e0bff585 	stb	r2,-42(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 80202bc:	e0bff917 	ldw	r2,-28(fp)
 80202c0:	10800017 	ldw	r2,0(r2)
 80202c4:	1007883a 	mov	r3,r2
 80202c8:	e0bff583 	ldbu	r2,-42(fp)
 80202cc:	100b883a 	mov	r5,r2
 80202d0:	1809883a 	mov	r4,r3
 80202d4:	801cc080 	call	801cc08 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 80202d8:	e43ff887 	ldb	r16,-30(fp)
 80202dc:	e47ff8c7 	ldb	r17,-29(fp)
 80202e0:	01c00404 	movi	r7,16
 80202e4:	000d883a 	mov	r6,zero
 80202e8:	01400044 	movi	r5,1
 80202ec:	e13ffb17 	ldw	r4,-20(fp)
 80202f0:	801d8d80 	call	801d8d8 <alt_tse_phy_rd_mdio_reg>
 80202f4:	100f883a 	mov	r7,r2
 80202f8:	880d883a 	mov	r6,r17
 80202fc:	800b883a 	mov	r5,r16
 8020300:	01020174 	movhi	r4,2053
 8020304:	21067304 	addi	r4,r4,6604
 8020308:	800325c0 	call	800325c <printf>
 802030c:	00000106 	br	8020314 <alt_tse_phy_set_common_speed+0x408>
            continue;
 8020310:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
 8020314:	e0bffc17 	ldw	r2,-16(fp)
 8020318:	10800044 	addi	r2,r2,1
 802031c:	e0bffc15 	stw	r2,-16(fp)
 8020320:	e0bff417 	ldw	r2,-48(fp)
 8020324:	10800003 	ldbu	r2,0(r2)
 8020328:	10803fcc 	andi	r2,r2,255
 802032c:	e0fffc17 	ldw	r3,-16(fp)
 8020330:	18bf2116 	blt	r3,r2,801ffb8 <alt_tse_phy_set_common_speed+0xac>
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 8020334:	e0fff887 	ldb	r3,-30(fp)
 8020338:	e0bff317 	ldw	r2,-52(fp)
 802033c:	108000a0 	cmpeqi	r2,r2,2
 8020340:	1000071e 	bne	r2,zero,8020360 <alt_tse_phy_set_common_speed+0x454>
 8020344:	e0bff317 	ldw	r2,-52(fp)
 8020348:	10800058 	cmpnei	r2,r2,1
 802034c:	1000021e 	bne	r2,zero,8020358 <alt_tse_phy_set_common_speed+0x44c>
 8020350:	00801904 	movi	r2,100
 8020354:	00000306 	br	8020364 <alt_tse_phy_set_common_speed+0x458>
 8020358:	00800284 	movi	r2,10
 802035c:	00000106 	br	8020364 <alt_tse_phy_set_common_speed+0x458>
 8020360:	0080fa04 	movi	r2,1000
 8020364:	100d883a 	mov	r6,r2
 8020368:	180b883a 	mov	r5,r3
 802036c:	01020174 	movhi	r4,2053
 8020370:	21067f04 	addi	r4,r4,6652
 8020374:	800325c0 	call	800325c <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 8020378:	e0bff317 	ldw	r2,-52(fp)
 802037c:	10803fcc 	andi	r2,r2,255
 8020380:	100b883a 	mov	r5,r2
 8020384:	e13ff717 	ldw	r4,-36(fp)
 8020388:	801cb280 	call	801cb28 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 802038c:	e0bff717 	ldw	r2,-36(fp)
 8020390:	10801004 	addi	r2,r2,64
 8020394:	e0fff617 	ldw	r3,-40(fp)
 8020398:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
 802039c:	e0bff317 	ldw	r2,-52(fp)
}
 80203a0:	e6fffe04 	addi	sp,fp,-8
 80203a4:	dfc00317 	ldw	ra,12(sp)
 80203a8:	df000217 	ldw	fp,8(sp)
 80203ac:	dc400117 	ldw	r17,4(sp)
 80203b0:	dc000017 	ldw	r16,0(sp)
 80203b4:	dec00404 	addi	sp,sp,16
 80203b8:	f800283a 	ret

080203bc <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 80203bc:	defffc04 	addi	sp,sp,-16
 80203c0:	dfc00315 	stw	ra,12(sp)
 80203c4:	df000215 	stw	fp,8(sp)
 80203c8:	df000204 	addi	fp,sp,8
 80203cc:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 80203d0:	e0bffe17 	ldw	r2,-8(fp)
 80203d4:	1080a104 	addi	r2,r2,644
 80203d8:	10800037 	ldwio	r2,0(r2)
 80203dc:	1080080c 	andi	r2,r2,32
 80203e0:	1000161e 	bne	r2,zero,802043c <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 80203e4:	01020174 	movhi	r4,2053
 80203e8:	21069004 	addi	r4,r4,6720
 80203ec:	80033800 	call	8003380 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 80203f0:	e0bffe17 	ldw	r2,-8(fp)
 80203f4:	1080a004 	addi	r2,r2,640
 80203f8:	10801004 	addi	r2,r2,64
 80203fc:	00c01e04 	movi	r3,120
 8020400:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 8020404:	01020174 	movhi	r4,2053
 8020408:	21069904 	addi	r4,r4,6756
 802040c:	80033800 	call	8003380 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 8020410:	e0bffe17 	ldw	r2,-8(fp)
 8020414:	1080a004 	addi	r2,r2,640
 8020418:	10800037 	ldwio	r2,0(r2)
 802041c:	e0bfff8d 	sth	r2,-2(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
 8020420:	e0bffe17 	ldw	r2,-8(fp)
 8020424:	1080a004 	addi	r2,r2,640
 8020428:	e13fff8b 	ldhu	r4,-2(fp)
 802042c:	00e00004 	movi	r3,-32768
 8020430:	20c6b03a 	or	r3,r4,r3
 8020434:	18ffffcc 	andi	r3,r3,65535
 8020438:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 802043c:	0005883a 	mov	r2,zero
}
 8020440:	e037883a 	mov	sp,fp
 8020444:	dfc00117 	ldw	ra,4(sp)
 8020448:	df000017 	ldw	fp,0(sp)
 802044c:	dec00204 	addi	sp,sp,8
 8020450:	f800283a 	ret

08020454 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 8020454:	defffc04 	addi	sp,sp,-16
 8020458:	dfc00315 	stw	ra,12(sp)
 802045c:	df000215 	stw	fp,8(sp)
 8020460:	df000204 	addi	fp,sp,8
 8020464:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 8020468:	e0bffe17 	ldw	r2,-8(fp)
 802046c:	1080bb04 	addi	r2,r2,748
 8020470:	10800037 	ldwio	r2,0(r2)
 8020474:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 8020478:	e0ffff8b 	ldhu	r3,-2(fp)
 802047c:	00bffc04 	movi	r2,-16
 8020480:	1884703a 	and	r2,r3,r2
 8020484:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 8020488:	01020174 	movhi	r4,2053
 802048c:	21069e04 	addi	r4,r4,6776
 8020490:	80033800 	call	8003380 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 8020494:	e0bffe17 	ldw	r2,-8(fp)
 8020498:	1080bb04 	addi	r2,r2,748
 802049c:	e0ffff8b 	ldhu	r3,-2(fp)
 80204a0:	18c003d4 	ori	r3,r3,15
 80204a4:	18ffffcc 	andi	r3,r3,65535
 80204a8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 80204ac:	01020174 	movhi	r4,2053
 80204b0:	2106aa04 	addi	r4,r4,6824
 80204b4:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 80204b8:	e0bffe17 	ldw	r2,-8(fp)
 80204bc:	1080b404 	addi	r2,r2,720
 80204c0:	10800037 	ldwio	r2,0(r2)
 80204c4:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 80204c8:	e0ffff8b 	ldhu	r3,-2(fp)
 80204cc:	00bfdf44 	movi	r2,-131
 80204d0:	1884703a 	and	r2,r3,r2
 80204d4:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 80204d8:	e0bffe17 	ldw	r2,-8(fp)
 80204dc:	1080b404 	addi	r2,r2,720
 80204e0:	e0ffff8b 	ldhu	r3,-2(fp)
 80204e4:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 80204e8:	01020174 	movhi	r4,2053
 80204ec:	21069904 	addi	r4,r4,6756
 80204f0:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 80204f4:	e0bffe17 	ldw	r2,-8(fp)
 80204f8:	1080a004 	addi	r2,r2,640
 80204fc:	10800037 	ldwio	r2,0(r2)
 8020500:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 8020504:	e0bffe17 	ldw	r2,-8(fp)
 8020508:	1080a004 	addi	r2,r2,640
 802050c:	e13fff8b 	ldhu	r4,-2(fp)
 8020510:	00e00004 	movi	r3,-32768
 8020514:	20c6b03a 	or	r3,r4,r3
 8020518:	18ffffcc 	andi	r3,r3,65535
 802051c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 8020520:	00800044 	movi	r2,1
}
 8020524:	e037883a 	mov	sp,fp
 8020528:	dfc00117 	ldw	ra,4(sp)
 802052c:	df000017 	ldw	fp,0(sp)
 8020530:	dec00204 	addi	sp,sp,8
 8020534:	f800283a 	ret

08020538 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 8020538:	defffc04 	addi	sp,sp,-16
 802053c:	dfc00315 	stw	ra,12(sp)
 8020540:	df000215 	stw	fp,8(sp)
 8020544:	df000204 	addi	fp,sp,8
 8020548:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 802054c:	e0bffe17 	ldw	r2,-8(fp)
 8020550:	1080bb04 	addi	r2,r2,748
 8020554:	10800037 	ldwio	r2,0(r2)
 8020558:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 802055c:	e0ffff8b 	ldhu	r3,-2(fp)
 8020560:	00bffc04 	movi	r2,-16
 8020564:	1884703a 	and	r2,r3,r2
 8020568:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 802056c:	01020174 	movhi	r4,2053
 8020570:	2106b404 	addi	r4,r4,6864
 8020574:	80033800 	call	8003380 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 8020578:	e0bffe17 	ldw	r2,-8(fp)
 802057c:	1080bb04 	addi	r2,r2,748
 8020580:	e0ffff8b 	ldhu	r3,-2(fp)
 8020584:	18c00114 	ori	r3,r3,4
 8020588:	18ffffcc 	andi	r3,r3,65535
 802058c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 8020590:	01020174 	movhi	r4,2053
 8020594:	2106aa04 	addi	r4,r4,6824
 8020598:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 802059c:	e0bffe17 	ldw	r2,-8(fp)
 80205a0:	1080b404 	addi	r2,r2,720
 80205a4:	10800037 	ldwio	r2,0(r2)
 80205a8:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 80205ac:	e0ffff8b 	ldhu	r3,-2(fp)
 80205b0:	00bfdf44 	movi	r2,-131
 80205b4:	1884703a 	and	r2,r3,r2
 80205b8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 80205bc:	e0bffe17 	ldw	r2,-8(fp)
 80205c0:	1080b404 	addi	r2,r2,720
 80205c4:	e0ffff8b 	ldhu	r3,-2(fp)
 80205c8:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 80205cc:	01020174 	movhi	r4,2053
 80205d0:	21069904 	addi	r4,r4,6756
 80205d4:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 80205d8:	e0bffe17 	ldw	r2,-8(fp)
 80205dc:	1080a004 	addi	r2,r2,640
 80205e0:	10800037 	ldwio	r2,0(r2)
 80205e4:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 80205e8:	e0bffe17 	ldw	r2,-8(fp)
 80205ec:	1080a004 	addi	r2,r2,640
 80205f0:	e13fff8b 	ldhu	r4,-2(fp)
 80205f4:	00e00004 	movi	r3,-32768
 80205f8:	20c6b03a 	or	r3,r4,r3
 80205fc:	18ffffcc 	andi	r3,r3,65535
 8020600:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 8020604:	00800044 	movi	r2,1
}
 8020608:	e037883a 	mov	sp,fp
 802060c:	dfc00117 	ldw	ra,4(sp)
 8020610:	df000017 	ldw	fp,0(sp)
 8020614:	dec00204 	addi	sp,sp,8
 8020618:	f800283a 	ret

0802061c <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 802061c:	defffc04 	addi	sp,sp,-16
 8020620:	dfc00315 	stw	ra,12(sp)
 8020624:	df000215 	stw	fp,8(sp)
 8020628:	df000204 	addi	fp,sp,8
 802062c:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 8020630:	e0bffe17 	ldw	r2,-8(fp)
 8020634:	1080bb04 	addi	r2,r2,748
 8020638:	10800037 	ldwio	r2,0(r2)
 802063c:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
 8020640:	e0ffff8b 	ldhu	r3,-2(fp)
 8020644:	00bffc04 	movi	r2,-16
 8020648:	1884703a 	and	r2,r3,r2
 802064c:	e0bfff8d 	sth	r2,-2(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 8020650:	01020174 	movhi	r4,2053
 8020654:	2106c904 	addi	r4,r4,6948
 8020658:	80033800 	call	8003380 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 802065c:	e0bffe17 	ldw	r2,-8(fp)
 8020660:	1080bb04 	addi	r2,r2,748
 8020664:	e0ffff8b 	ldhu	r3,-2(fp)
 8020668:	18c002d4 	ori	r3,r3,11
 802066c:	18ffffcc 	andi	r3,r3,65535
 8020670:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 8020674:	01020174 	movhi	r4,2053
 8020678:	2106d804 	addi	r4,r4,7008
 802067c:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 8020680:	e0bffe17 	ldw	r2,-8(fp)
 8020684:	1080b404 	addi	r2,r2,720
 8020688:	10800037 	ldwio	r2,0(r2)
 802068c:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
 8020690:	e0ffff8b 	ldhu	r3,-2(fp)
 8020694:	00bfdf44 	movi	r2,-131
 8020698:	1884703a 	and	r2,r3,r2
 802069c:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x82;
 80206a0:	e0bfff8b 	ldhu	r2,-2(fp)
 80206a4:	10802094 	ori	r2,r2,130
 80206a8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 80206ac:	e0bffe17 	ldw	r2,-8(fp)
 80206b0:	1080b404 	addi	r2,r2,720
 80206b4:	e0ffff8b 	ldhu	r3,-2(fp)
 80206b8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 80206bc:	01020174 	movhi	r4,2053
 80206c0:	21069904 	addi	r4,r4,6756
 80206c4:	80033800 	call	8003380 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 80206c8:	e0bffe17 	ldw	r2,-8(fp)
 80206cc:	1080a004 	addi	r2,r2,640
 80206d0:	10800037 	ldwio	r2,0(r2)
 80206d4:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 80206d8:	e0bffe17 	ldw	r2,-8(fp)
 80206dc:	1080a004 	addi	r2,r2,640
 80206e0:	e13fff8b 	ldhu	r4,-2(fp)
 80206e4:	00e00004 	movi	r3,-32768
 80206e8:	20c6b03a 	or	r3,r4,r3
 80206ec:	18ffffcc 	andi	r3,r3,65535
 80206f0:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 80206f4:	00800044 	movi	r2,1
    
}
 80206f8:	e037883a 	mov	sp,fp
 80206fc:	dfc00117 	ldw	ra,4(sp)
 8020700:	df000017 	ldw	fp,0(sp)
 8020704:	dec00204 	addi	sp,sp,8
 8020708:	f800283a 	ret

0802070c <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 802070c:	defffc04 	addi	sp,sp,-16
 8020710:	df000315 	stw	fp,12(sp)
 8020714:	df000304 	addi	fp,sp,12
 8020718:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
 802071c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 8020720:	e0bffd17 	ldw	r2,-12(fp)
 8020724:	1080b004 	addi	r2,r2,704
 8020728:	10800037 	ldwio	r2,0(r2)
 802072c:	e0bffe15 	stw	r2,-8(fp)
    
    /* If speed == 10 Mbps */
    if(reg_status & 0x2) {
 8020730:	e0bffe17 	ldw	r2,-8(fp)
 8020734:	1080008c 	andi	r2,r2,2
 8020738:	10000426 	beq	r2,zero,802074c <DP83848C_link_status_read+0x40>
        link_status |= 0x8;
 802073c:	e0bfff17 	ldw	r2,-4(fp)
 8020740:	10800214 	ori	r2,r2,8
 8020744:	e0bfff15 	stw	r2,-4(fp)
 8020748:	00000306 	br	8020758 <DP83848C_link_status_read+0x4c>
    }
    /* Else speed = 100 Mbps */
    else {
        link_status |= 0x4;
 802074c:	e0bfff17 	ldw	r2,-4(fp)
 8020750:	10800114 	ori	r2,r2,4
 8020754:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* If duplex == Full */
    if(reg_status & 0x4) {
 8020758:	e0bffe17 	ldw	r2,-8(fp)
 802075c:	1080010c 	andi	r2,r2,4
 8020760:	10000326 	beq	r2,zero,8020770 <DP83848C_link_status_read+0x64>
        link_status |= 0x1;
 8020764:	e0bfff17 	ldw	r2,-4(fp)
 8020768:	10800054 	ori	r2,r2,1
 802076c:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
 8020770:	e0bfff17 	ldw	r2,-4(fp)
}
 8020774:	e037883a 	mov	sp,fp
 8020778:	df000017 	ldw	fp,0(sp)
 802077c:	dec00104 	addi	sp,sp,4
 8020780:	f800283a 	ret

08020784 <PEF7071_config>:
/* @Function Description: Additional configuration for PEF7071 Phy
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 PEF7071_config(np_tse_mac *pmac)
{  
 8020784:	defffd04 	addi	sp,sp,-12
 8020788:	df000215 	stw	fp,8(sp)
 802078c:	df000204 	addi	fp,sp,8
 8020790:	e13ffe15 	stw	r4,-8(fp)
    alt_u16 dat;
        
    dat = IORD(&pmac->mdio1.reg14, 0);
 8020794:	e0bffe17 	ldw	r2,-8(fp)
 8020798:	1080b404 	addi	r2,r2,720
 802079c:	10800037 	ldwio	r2,0(r2)
 80207a0:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0x3FFF;
 80207a4:	e0bfff8b 	ldhu	r2,-2(fp)
 80207a8:	108fffcc 	andi	r2,r2,16383
 80207ac:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x0100;
 80207b0:	e0bfff8b 	ldhu	r2,-2(fp)
 80207b4:	10804014 	ori	r2,r2,256
 80207b8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 80207bc:	e0bffe17 	ldw	r2,-8(fp)
 80207c0:	1080b404 	addi	r2,r2,720
 80207c4:	e0ffff8b 	ldhu	r3,-2(fp)
 80207c8:	10c00035 	stwio	r3,0(r2)
    
    return 0;
 80207cc:	0005883a 	mov	r2,zero
    
}
 80207d0:	e037883a 	mov	sp,fp
 80207d4:	df000017 	ldw	fp,0(sp)
 80207d8:	dec00104 	addi	sp,sp,4
 80207dc:	f800283a 	ret

080207e0 <PEF7071_link_status_read>:
/* @Function Description: Read link status from PHY specific status register of PEF7071
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 PEF7071_link_status_read(np_tse_mac *pmac)
{
 80207e0:	defffc04 	addi	sp,sp,-16
 80207e4:	df000315 	stw	fp,12(sp)
 80207e8:	df000304 	addi	fp,sp,12
 80207ec:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
 80207f0:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg18 = IORD(&pmac->mdio1.reg18, 0);
 80207f4:	e0bffd17 	ldw	r2,-12(fp)
 80207f8:	1080b804 	addi	r2,r2,736
 80207fc:	10800037 	ldwio	r2,0(r2)
 8020800:	e0bffe15 	stw	r2,-8(fp)
        
    if ((reg18 & 0x3)==0) { link_status |= 0x8; }  /* If speed == 10 Mbps */
 8020804:	e0bffe17 	ldw	r2,-8(fp)
 8020808:	108000cc 	andi	r2,r2,3
 802080c:	1000031e 	bne	r2,zero,802081c <PEF7071_link_status_read+0x3c>
 8020810:	e0bfff17 	ldw	r2,-4(fp)
 8020814:	10800214 	ori	r2,r2,8
 8020818:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==1) { link_status |= 0x4; }  /* Else speed = 100 Mbps */
 802081c:	e0bffe17 	ldw	r2,-8(fp)
 8020820:	108000cc 	andi	r2,r2,3
 8020824:	10800058 	cmpnei	r2,r2,1
 8020828:	1000031e 	bne	r2,zero,8020838 <PEF7071_link_status_read+0x58>
 802082c:	e0bfff17 	ldw	r2,-4(fp)
 8020830:	10800114 	ori	r2,r2,4
 8020834:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==2) { link_status |= 0x2; }  /* Else speed = 1000 Mbps */    
 8020838:	e0bffe17 	ldw	r2,-8(fp)
 802083c:	108000cc 	andi	r2,r2,3
 8020840:	10800098 	cmpnei	r2,r2,2
 8020844:	1000031e 	bne	r2,zero,8020854 <PEF7071_link_status_read+0x74>
 8020848:	e0bfff17 	ldw	r2,-4(fp)
 802084c:	10800094 	ori	r2,r2,2
 8020850:	e0bfff15 	stw	r2,-4(fp)
        
    /* If duplex == Full */
    if(reg18 & 0x8) {
 8020854:	e0bffe17 	ldw	r2,-8(fp)
 8020858:	1080020c 	andi	r2,r2,8
 802085c:	10000326 	beq	r2,zero,802086c <PEF7071_link_status_read+0x8c>
        link_status |= 0x1;
 8020860:	e0bfff17 	ldw	r2,-4(fp)
 8020864:	10800054 	ori	r2,r2,1
 8020868:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
 802086c:	e0bfff17 	ldw	r2,-4(fp)
}
 8020870:	e037883a 	mov	sp,fp
 8020874:	df000017 	ldw	fp,0(sp)
 8020878:	dec00104 	addi	sp,sp,4
 802087c:	f800283a 	ret

08020880 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 8020880:	defffd04 	addi	sp,sp,-12
 8020884:	dfc00215 	stw	ra,8(sp)
 8020888:	df000115 	stw	fp,4(sp)
 802088c:	df000104 	addi	fp,sp,4
 8020890:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 8020894:	d1604404 	addi	r5,gp,-32496
 8020898:	e13fff17 	ldw	r4,-4(fp)
 802089c:	803ac080 	call	803ac08 <alt_dev_llist_insert>
}
 80208a0:	e037883a 	mov	sp,fp
 80208a4:	dfc00117 	ldw	ra,4(sp)
 80208a8:	df000017 	ldw	fp,0(sp)
 80208ac:	dec00204 	addi	sp,sp,8
 80208b0:	f800283a 	ret

080208b4 <alt_qspi_controller_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_qspi_controller_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
 80208b4:	defff804 	addi	sp,sp,-32
 80208b8:	dfc00715 	stw	ra,28(sp)
 80208bc:	df000615 	stw	fp,24(sp)
 80208c0:	df000604 	addi	fp,sp,24
 80208c4:	e13ffb15 	stw	r4,-20(fp)
 80208c8:	e17ffa15 	stw	r5,-24(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
 80208cc:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller_dev* qspi_flash_info = NULL;
 80208d0:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 result = 0;
 80208d4:	e03ffd15 	stw	zero,-12(fp)
    alt_32 status = 0;
 80208d8:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
 80208dc:	e0bffb17 	ldw	r2,-20(fp)
 80208e0:	1000021e 	bne	r2,zero,80208ec <alt_qspi_controller_lock+0x38>
    {
    	return -EINVAL;
 80208e4:	00bffa84 	movi	r2,-22
 80208e8:	00003106 	br	80209b0 <alt_qspi_controller_lock+0xfc>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 80208ec:	e0bffb17 	ldw	r2,-20(fp)
 80208f0:	e0bffe15 	stw	r2,-8(fp)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
 80208f4:	e0bffa17 	ldw	r2,-24(fp)
 80208f8:	1004923a 	slli	r2,r2,8
 80208fc:	e0bfff15 	stw	r2,-4(fp)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_PROTECT_CMD;
 8020900:	e0bfff17 	ldw	r2,-4(fp)
 8020904:	108000d4 	ori	r2,r2,3
 8020908:	e0bfff15 	stw	r2,-4(fp)

    /* write sector protect command to QSPI_MEM_OP register to protect sectors */
    IOWR_ALTERA_QSPI_CONTROLLER_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
 802090c:	e0bffe17 	ldw	r2,-8(fp)
 8020910:	10803017 	ldw	r2,192(r2)
 8020914:	10800304 	addi	r2,r2,12
 8020918:	1007883a 	mov	r3,r2
 802091c:	e0bfff17 	ldw	r2,-4(fp)
 8020920:	18800035 	stwio	r2,0(r3)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_qspi_poll_for_write_in_progress(qspi_flash_info);
 8020924:	e13ffe17 	ldw	r4,-8(fp)
 8020928:	80213180 	call	8021318 <alt_qspi_poll_for_write_in_progress>
 802092c:	e0bffc15 	stw	r2,-16(fp)
    if(status != 0)
 8020930:	e0bffc17 	ldw	r2,-16(fp)
 8020934:	10000226 	beq	r2,zero,8020940 <alt_qspi_controller_lock+0x8c>
    {
    	return status;
 8020938:	e0bffc17 	ldw	r2,-16(fp)
 802093c:	00001c06 	br	80209b0 <alt_qspi_controller_lock+0xfc>
    }
	
	status = IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base);
 8020940:	e0bffe17 	ldw	r2,-8(fp)
 8020944:	10803017 	ldw	r2,192(r2)
 8020948:	10800037 	ldwio	r2,0(r2)
 802094c:	e0bffc15 	stw	r2,-16(fp)
	result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
 8020950:	e0bffc17 	ldw	r2,-16(fp)
 8020954:	1005d0ba 	srai	r2,r2,2
 8020958:	108001cc 	andi	r2,r2,7
 802095c:	e0fffd17 	ldw	r3,-12(fp)
 8020960:	1884b03a 	or	r2,r3,r2
 8020964:	e0bffd15 	stw	r2,-12(fp)
	result |= (status >> 3) & 0x08; /* extract out BP4 */
 8020968:	e0bffc17 	ldw	r2,-16(fp)
 802096c:	1005d0fa 	srai	r2,r2,3
 8020970:	1080020c 	andi	r2,r2,8
 8020974:	e0fffd17 	ldw	r3,-12(fp)
 8020978:	1884b03a 	or	r2,r3,r2
 802097c:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
 8020980:	e0bffc17 	ldw	r2,-16(fp)
 8020984:	1005d07a 	srai	r2,r2,1
 8020988:	1080040c 	andi	r2,r2,16
 802098c:	e0fffd17 	ldw	r3,-12(fp)
 8020990:	1884b03a 	or	r2,r3,r2
 8020994:	e0bffd15 	stw	r2,-12(fp)

	if(result != sectors_to_lock)
 8020998:	e0fffd17 	ldw	r3,-12(fp)
 802099c:	e0bffa17 	ldw	r2,-24(fp)
 80209a0:	18800226 	beq	r3,r2,80209ac <alt_qspi_controller_lock+0xf8>
	{
		return -ENOLCK;
 80209a4:	00bff484 	movi	r2,-46
 80209a8:	00000106 	br	80209b0 <alt_qspi_controller_lock+0xfc>
	}

    return 0;
 80209ac:	0005883a 	mov	r2,zero
}
 80209b0:	e037883a 	mov	sp,fp
 80209b4:	dfc00117 	ldw	ra,4(sp)
 80209b8:	df000017 	ldw	fp,0(sp)
 80209bc:	dec00204 	addi	sp,sp,8
 80209c0:	f800283a 	ret

080209c4 <alt_qspi_controller_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
 80209c4:	defffb04 	addi	sp,sp,-20
 80209c8:	df000415 	stw	fp,16(sp)
 80209cc:	df000404 	addi	fp,sp,16
 80209d0:	e13ffe15 	stw	r4,-8(fp)
 80209d4:	e17ffd15 	stw	r5,-12(fp)
 80209d8:	e1bffc15 	stw	r6,-16(fp)
	alt_flash_dev* flash = NULL;
 80209dc:	e03fff15 	stw	zero,-4(fp)
	
	/* return -EINVAL if fd,info and number_of_regions are NULL */
	if(NULL == fd || NULL == info || NULL == number_of_regions)
 80209e0:	e0bffe17 	ldw	r2,-8(fp)
 80209e4:	10000426 	beq	r2,zero,80209f8 <alt_qspi_controller_get_info+0x34>
 80209e8:	e0bffd17 	ldw	r2,-12(fp)
 80209ec:	10000226 	beq	r2,zero,80209f8 <alt_qspi_controller_get_info+0x34>
 80209f0:	e0bffc17 	ldw	r2,-16(fp)
 80209f4:	1000021e 	bne	r2,zero,8020a00 <alt_qspi_controller_get_info+0x3c>
    {
    	return -EINVAL;
 80209f8:	00bffa84 	movi	r2,-22
 80209fc:	00001006 	br	8020a40 <alt_qspi_controller_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
 8020a00:	e0bffe17 	ldw	r2,-8(fp)
 8020a04:	e0bfff15 	stw	r2,-4(fp)

    *number_of_regions = flash->number_of_regions;
 8020a08:	e0bfff17 	ldw	r2,-4(fp)
 8020a0c:	10c00c17 	ldw	r3,48(r2)
 8020a10:	e0bffc17 	ldw	r2,-16(fp)
 8020a14:	10c00015 	stw	r3,0(r2)

    if (!flash->number_of_regions)
 8020a18:	e0bfff17 	ldw	r2,-4(fp)
 8020a1c:	10800c17 	ldw	r2,48(r2)
 8020a20:	1000021e 	bne	r2,zero,8020a2c <alt_qspi_controller_get_info+0x68>
    {
      return -EIO;
 8020a24:	00bffec4 	movi	r2,-5
 8020a28:	00000506 	br	8020a40 <alt_qspi_controller_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
 8020a2c:	e0bfff17 	ldw	r2,-4(fp)
 8020a30:	10c00d04 	addi	r3,r2,52
 8020a34:	e0bffd17 	ldw	r2,-12(fp)
 8020a38:	10c00015 	stw	r3,0(r2)
    }

    return 0;
 8020a3c:	0005883a 	mov	r2,zero
}
 8020a40:	e037883a 	mov	sp,fp
 8020a44:	df000017 	ldw	fp,0(sp)
 8020a48:	dec00104 	addi	sp,sp,4
 8020a4c:	f800283a 	ret

08020a50 <alt_qspi_controller_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_qspi_controller_erase_block(alt_flash_dev *flash_info, int block_offset)
{
 8020a50:	defff804 	addi	sp,sp,-32
 8020a54:	dfc00715 	stw	ra,28(sp)
 8020a58:	df000615 	stw	fp,24(sp)
 8020a5c:	df000604 	addi	fp,sp,24
 8020a60:	e13ffb15 	stw	r4,-20(fp)
 8020a64:	e17ffa15 	stw	r5,-24(fp)
    alt_32 ret_code = 0;
 8020a68:	e03fff15 	stw	zero,-4(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
 8020a6c:	e03ffe15 	stw	zero,-8(fp)
    alt_qspi_controller_dev* qspi_flash_info = NULL;
 8020a70:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 sector_number = 0; 
 8020a74:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
 8020a78:	e0bffb17 	ldw	r2,-20(fp)
 8020a7c:	1000021e 	bne	r2,zero,8020a88 <alt_qspi_controller_erase_block+0x38>
    {
    	return -EINVAL;
 8020a80:	00bffa84 	movi	r2,-22
 8020a84:	00003606 	br	8020b60 <alt_qspi_controller_erase_block+0x110>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8020a88:	e0bffb17 	ldw	r2,-20(fp)
 8020a8c:	e0bffd15 	stw	r2,-12(fp)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
 8020a90:	e0bffa17 	ldw	r2,-24(fp)
 8020a94:	10000a16 	blt	r2,zero,8020ac0 <alt_qspi_controller_erase_block+0x70>
        || (block_offset >= qspi_flash_info->size_in_bytes)
 8020a98:	e0bffd17 	ldw	r2,-12(fp)
 8020a9c:	10803117 	ldw	r2,196(r2)
 8020aa0:	e0fffa17 	ldw	r3,-24(fp)
 8020aa4:	1880062e 	bgeu	r3,r2,8020ac0 <alt_qspi_controller_erase_block+0x70>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0)
 8020aa8:	e0bffd17 	ldw	r2,-12(fp)
 8020aac:	10803417 	ldw	r2,208(r2)
 8020ab0:	10ffffc4 	addi	r3,r2,-1
 8020ab4:	e0bffa17 	ldw	r2,-24(fp)
 8020ab8:	1884703a 	and	r2,r3,r2
 8020abc:	10000226 	beq	r2,zero,8020ac8 <alt_qspi_controller_erase_block+0x78>
    {
    	return -EINVAL;
 8020ac0:	00bffa84 	movi	r2,-22
 8020ac4:	00002606 	br	8020b60 <alt_qspi_controller_erase_block+0x110>
    }

    /* calculate current sector/block number */
    sector_number = (block_offset/(qspi_flash_info->sector_size));
 8020ac8:	e0fffa17 	ldw	r3,-24(fp)
 8020acc:	e0bffd17 	ldw	r2,-12(fp)
 8020ad0:	10803417 	ldw	r2,208(r2)
 8020ad4:	100b883a 	mov	r5,r2
 8020ad8:	1809883a 	mov	r4,r3
 8020adc:	800e2300 	call	800e230 <__udivsi3>
 8020ae0:	e0bffc15 	stw	r2,-16(fp)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_VALUE_MASK;
 8020ae4:	e0bffc17 	ldw	r2,-16(fp)
 8020ae8:	1006923a 	slli	r3,r2,8
 8020aec:	00804034 	movhi	r2,256
 8020af0:	10bfc004 	addi	r2,r2,-256
 8020af4:	1884703a 	and	r2,r3,r2
 8020af8:	e0bffe15 	stw	r2,-8(fp)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER_MEM_OP_SECTOR_ERASE_CMD;
 8020afc:	e0bffe17 	ldw	r2,-8(fp)
 8020b00:	10800094 	ori	r2,r2,2
 8020b04:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to QSPI_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
 8020b08:	e0bffd17 	ldw	r2,-12(fp)
 8020b0c:	10803017 	ldw	r2,192(r2)
 8020b10:	10800304 	addi	r2,r2,12
 8020b14:	1007883a 	mov	r3,r2
 8020b18:	e0bffe17 	ldw	r2,-8(fp)
 8020b1c:	18800035 	stwio	r2,0(r3)
	
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base) &
 8020b20:	e0bffd17 	ldw	r2,-12(fp)
 8020b24:	10803017 	ldw	r2,192(r2)
 8020b28:	10800404 	addi	r2,r2,16
 8020b2c:	10800037 	ldwio	r2,0(r2)
 8020b30:	1080004c 	andi	r2,r2,1
 8020b34:	10800058 	cmpnei	r2,r2,1
 8020b38:	1000081e 	bne	r2,zero,8020b5c <alt_qspi_controller_erase_block+0x10c>
            		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_MASK) ==
            				ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_ACTIVE)
    {
	    /* clear register */
	    /* QSPI_ISR access is write one to clear (W1C) */
    	IOWR_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base,
 8020b3c:	e0bffd17 	ldw	r2,-12(fp)
 8020b40:	10803017 	ldw	r2,192(r2)
 8020b44:	10800404 	addi	r2,r2,16
 8020b48:	1007883a 	mov	r3,r2
 8020b4c:	00800044 	movi	r2,1
 8020b50:	18800035 	stwio	r2,0(r3)
    		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_ERASE_MASK );
    	return -EIO; /* erase failed, sector might be protected */
 8020b54:	00bffec4 	movi	r2,-5
 8020b58:	00000106 	br	8020b60 <alt_qspi_controller_erase_block+0x110>
    }

    return ret_code;
 8020b5c:	e0bfff17 	ldw	r2,-4(fp)
}
 8020b60:	e037883a 	mov	sp,fp
 8020b64:	dfc00117 	ldw	ra,4(sp)
 8020b68:	df000017 	ldw	fp,0(sp)
 8020b6c:	dec00204 	addi	sp,sp,8
 8020b70:	f800283a 	ret

08020b74 <alt_qspi_controller_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
 8020b74:	defff304 	addi	sp,sp,-52
 8020b78:	dfc00c15 	stw	ra,48(sp)
 8020b7c:	df000b15 	stw	fp,44(sp)
 8020b80:	df000b04 	addi	fp,sp,44
 8020b84:	e13ff815 	stw	r4,-32(fp)
 8020b88:	e17ff715 	stw	r5,-36(fp)
 8020b8c:	e1bff615 	stw	r6,-40(fp)
 8020b90:	e1fff515 	stw	r7,-44(fp)
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
 8020b94:	e03fff15 	stw	zero,-4(fp)
    alt_u32 remaining_length = length; /** length left to write */
 8020b98:	e0800217 	ldw	r2,8(fp)
 8020b9c:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
 8020ba0:	e0bff617 	ldw	r2,-40(fp)
 8020ba4:	e0bffd15 	stw	r2,-12(fp)

    alt_qspi_controller_dev *qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8020ba8:	e0bff817 	ldw	r2,-32(fp)
 8020bac:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
 8020bb0:	e0bff717 	ldw	r2,-36(fp)
 8020bb4:	10001e16 	blt	r2,zero,8020c30 <alt_qspi_controller_write_block+0xbc>
        || data_offset < 0
 8020bb8:	e0bff617 	ldw	r2,-40(fp)
 8020bbc:	10001c16 	blt	r2,zero,8020c30 <alt_qspi_controller_write_block+0xbc>
        || NULL == flash_info
 8020bc0:	e0bff817 	ldw	r2,-32(fp)
 8020bc4:	10001a26 	beq	r2,zero,8020c30 <alt_qspi_controller_write_block+0xbc>
        || NULL == data
 8020bc8:	e0bff517 	ldw	r2,-44(fp)
 8020bcc:	10001826 	beq	r2,zero,8020c30 <alt_qspi_controller_write_block+0xbc>
        || data_offset >= qspi_flash_info->size_in_bytes
 8020bd0:	e0bffa17 	ldw	r2,-24(fp)
 8020bd4:	10803117 	ldw	r2,196(r2)
 8020bd8:	e0fff617 	ldw	r3,-40(fp)
 8020bdc:	1880142e 	bgeu	r3,r2,8020c30 <alt_qspi_controller_write_block+0xbc>
        || block_offset >= qspi_flash_info->size_in_bytes
 8020be0:	e0bffa17 	ldw	r2,-24(fp)
 8020be4:	10803117 	ldw	r2,196(r2)
 8020be8:	e0fff717 	ldw	r3,-36(fp)
 8020bec:	1880102e 	bgeu	r3,r2,8020c30 <alt_qspi_controller_write_block+0xbc>
        || length > (qspi_flash_info->sector_size - (data_offset - block_offset))
 8020bf0:	e0bffa17 	ldw	r2,-24(fp)
 8020bf4:	10803417 	ldw	r2,208(r2)
 8020bf8:	e13ff617 	ldw	r4,-40(fp)
 8020bfc:	e0fff717 	ldw	r3,-36(fp)
 8020c00:	20c7c83a 	sub	r3,r4,r3
 8020c04:	10c7c83a 	sub	r3,r2,r3
 8020c08:	e0800217 	ldw	r2,8(fp)
 8020c0c:	18800836 	bltu	r3,r2,8020c30 <alt_qspi_controller_write_block+0xbc>
        || length < 0
 8020c10:	e0800217 	ldw	r2,8(fp)
 8020c14:	10000616 	blt	r2,zero,8020c30 <alt_qspi_controller_write_block+0xbc>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0) 
 8020c18:	e0bffa17 	ldw	r2,-24(fp)
 8020c1c:	10803417 	ldw	r2,208(r2)
 8020c20:	10ffffc4 	addi	r3,r2,-1
 8020c24:	e0bff717 	ldw	r2,-36(fp)
 8020c28:	1884703a 	and	r2,r3,r2
 8020c2c:	10004d26 	beq	r2,zero,8020d64 <alt_qspi_controller_write_block+0x1f0>
    {
    	return -EINVAL;
 8020c30:	00bffa84 	movi	r2,-22
 8020c34:	00004e06 	br	8020d70 <alt_qspi_controller_write_block+0x1fc>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
    	alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
 8020c38:	00bfffc4 	movi	r2,-1
 8020c3c:	e0bff915 	stw	r2,-28(fp)
    	alt_u32 padding = 0; /** bytes to pad the next word that is written */
 8020c40:	e03ffc15 	stw	zero,-16(fp)
    	alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
 8020c44:	00800104 	movi	r2,4
 8020c48:	e0bffb15 	stw	r2,-20(fp)

        /*
         * we need to make sure the write is word aligned
    	 * this should only be true at most 1 time
    	 */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
 8020c4c:	e0bffd17 	ldw	r2,-12(fp)
 8020c50:	108000cc 	andi	r2,r2,3
 8020c54:	10001526 	beq	r2,zero,8020cac <alt_qspi_controller_write_block+0x138>
        {
        	/*
        	 * data is not word aligned
        	 * calculate padding bytes need to add before start of a data offset
        	 */
            padding = write_offset & (sizeof(alt_u32) - 1);
 8020c58:	e0bffd17 	ldw	r2,-12(fp)
 8020c5c:	108000cc 	andi	r2,r2,3
 8020c60:	e0bffc15 	stw	r2,-16(fp)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
 8020c64:	e0fffb17 	ldw	r3,-20(fp)
 8020c68:	e0bffc17 	ldw	r2,-16(fp)
 8020c6c:	1885c83a 	sub	r2,r3,r2
 8020c70:	e0bffb15 	stw	r2,-20(fp)

            if(bytes_to_copy > remaining_length)
 8020c74:	e0bffb17 	ldw	r2,-20(fp)
 8020c78:	e0fffe17 	ldw	r3,-8(fp)
 8020c7c:	1880022e 	bgeu	r3,r2,8020c88 <alt_qspi_controller_write_block+0x114>
            {
            	bytes_to_copy = remaining_length;
 8020c80:	e0bffe17 	ldw	r2,-8(fp)
 8020c84:	e0bffb15 	stw	r2,-20(fp)
            }

            write_offset = write_offset - padding;
 8020c88:	e0fffd17 	ldw	r3,-12(fp)
 8020c8c:	e0bffc17 	ldw	r2,-16(fp)
 8020c90:	1885c83a 	sub	r2,r3,r2
 8020c94:	e0bffd15 	stw	r2,-12(fp)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
 8020c98:	e0bffd17 	ldw	r2,-12(fp)
 8020c9c:	108000cc 	andi	r2,r2,3
 8020ca0:	10000726 	beq	r2,zero,8020cc0 <alt_qspi_controller_write_block+0x14c>
            {
            	return -EINVAL;
 8020ca4:	00bffa84 	movi	r2,-22
 8020ca8:	00003106 	br	8020d70 <alt_qspi_controller_write_block+0x1fc>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
 8020cac:	e0bffb17 	ldw	r2,-20(fp)
 8020cb0:	e0fffe17 	ldw	r3,-8(fp)
 8020cb4:	1880022e 	bgeu	r3,r2,8020cc0 <alt_qspi_controller_write_block+0x14c>
            {
            	bytes_to_copy = remaining_length;
 8020cb8:	e0bffe17 	ldw	r2,-8(fp)
 8020cbc:	e0bffb15 	stw	r2,-20(fp)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
 8020cc0:	e0fff904 	addi	r3,fp,-28
 8020cc4:	e0bffc17 	ldw	r2,-16(fp)
 8020cc8:	1889883a 	add	r4,r3,r2
 8020ccc:	e0fff517 	ldw	r3,-44(fp)
 8020cd0:	e0bfff17 	ldw	r2,-4(fp)
 8020cd4:	1885883a 	add	r2,r3,r2
 8020cd8:	e1bffb17 	ldw	r6,-20(fp)
 8020cdc:	100b883a 	mov	r5,r2
 8020ce0:	8002ea40 	call	8002ea4 <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
 8020ce4:	e0ffff17 	ldw	r3,-4(fp)
 8020ce8:	e0bffb17 	ldw	r2,-20(fp)
 8020cec:	1885883a 	add	r2,r3,r2
 8020cf0:	e0bfff15 	stw	r2,-4(fp)
        remaining_length -= bytes_to_copy;
 8020cf4:	e0fffe17 	ldw	r3,-8(fp)
 8020cf8:	e0bffb17 	ldw	r2,-20(fp)
 8020cfc:	1885c83a 	sub	r2,r3,r2
 8020d00:	e0bffe15 	stw	r2,-8(fp)

        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
 8020d04:	e0bffa17 	ldw	r2,-24(fp)
 8020d08:	10c02e17 	ldw	r3,184(r2)
 8020d0c:	e0bffd17 	ldw	r2,-12(fp)
 8020d10:	1885883a 	add	r2,r3,r2
 8020d14:	e0fff917 	ldw	r3,-28(fp)
 8020d18:	10c00035 	stwio	r3,0(r2)

        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base) &
 8020d1c:	e0bffa17 	ldw	r2,-24(fp)
 8020d20:	10803017 	ldw	r2,192(r2)
 8020d24:	10800404 	addi	r2,r2,16
 8020d28:	10800037 	ldwio	r2,0(r2)
 8020d2c:	1080008c 	andi	r2,r2,2
 8020d30:	10800098 	cmpnei	r2,r2,2
 8020d34:	1000081e 	bne	r2,zero,8020d58 <alt_qspi_controller_write_block+0x1e4>
        		ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_MASK) ==
        				ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_ACTIVE)
        {
		    /* clear register */
        	IOWR_ALTERA_QSPI_CONTROLLER_ISR(qspi_flash_info->csr_base,
 8020d38:	e0bffa17 	ldw	r2,-24(fp)
 8020d3c:	10803017 	ldw	r2,192(r2)
 8020d40:	10800404 	addi	r2,r2,16
 8020d44:	1007883a 	mov	r3,r2
 8020d48:	00800084 	movi	r2,2
 8020d4c:	18800035 	stwio	r2,0(r3)
			ALTERA_QSPI_CONTROLLER_ISR_ILLEGAL_WRITE_MASK );
        	return -EIO; /** write failed, sector might be protected */
 8020d50:	00bffec4 	movi	r2,-5
 8020d54:	00000606 	br	8020d70 <alt_qspi_controller_write_block+0x1fc>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
 8020d58:	e0bffd17 	ldw	r2,-12(fp)
 8020d5c:	10800104 	addi	r2,r2,4
 8020d60:	e0bffd15 	stw	r2,-12(fp)
    while (remaining_length > 0)
 8020d64:	e0bffe17 	ldw	r2,-8(fp)
 8020d68:	103fb31e 	bne	r2,zero,8020c38 <alt_qspi_controller_write_block+0xc4>
    }

    return 0;
 8020d6c:	0005883a 	mov	r2,zero
}
 8020d70:	e037883a 	mov	sp,fp
 8020d74:	dfc00117 	ldw	ra,4(sp)
 8020d78:	df000017 	ldw	fp,0(sp)
 8020d7c:	dec00204 	addi	sp,sp,8
 8020d80:	f800283a 	ret

08020d84 <alt_qspi_controller_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
 8020d84:	defff004 	addi	sp,sp,-64
 8020d88:	dfc00f15 	stw	ra,60(sp)
 8020d8c:	df000e15 	stw	fp,56(sp)
 8020d90:	df000e04 	addi	fp,sp,56
 8020d94:	e13ff615 	stw	r4,-40(fp)
 8020d98:	e17ff515 	stw	r5,-44(fp)
 8020d9c:	e1bff415 	stw	r6,-48(fp)
 8020da0:	e1fff315 	stw	r7,-52(fp)
    alt_32 ret_code = 0;
 8020da4:	e03fff15 	stw	zero,-4(fp)

    alt_qspi_controller_dev *qspi_flash_info = NULL;
 8020da8:	e03ff915 	stw	zero,-28(fp)

    alt_u32 write_offset = offset; /** address of next byte to write */
 8020dac:	e0bff517 	ldw	r2,-44(fp)
 8020db0:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 remaining_length = length; /** length of write data left to be written */
 8020db4:	e0bff317 	ldw	r2,-52(fp)
 8020db8:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
 8020dbc:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 i = 0;
 8020dc0:	e03ffb15 	stw	zero,-20(fp)

    /* return -EINVAL if flash_info and src_addr are NULL */
	if(NULL == flash_info || NULL == src_addr)
 8020dc4:	e0bff617 	ldw	r2,-40(fp)
 8020dc8:	10000226 	beq	r2,zero,8020dd4 <alt_qspi_controller_write+0x50>
 8020dcc:	e0bff417 	ldw	r2,-48(fp)
 8020dd0:	1000021e 	bne	r2,zero,8020ddc <alt_qspi_controller_write+0x58>
    {
    	return -EINVAL;
 8020dd4:	00bffa84 	movi	r2,-22
 8020dd8:	00005f06 	br	8020f58 <alt_qspi_controller_write+0x1d4>
    }
	
	qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8020ddc:	e0bff617 	ldw	r2,-40(fp)
 8020de0:	e0bff915 	stw	r2,-28(fp)
	
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
 8020de4:	e0bff517 	ldw	r2,-44(fp)
 8020de8:	e0fff317 	ldw	r3,-52(fp)
 8020dec:	180d883a 	mov	r6,r3
 8020df0:	100b883a 	mov	r5,r2
 8020df4:	e13ff917 	ldw	r4,-28(fp)
 8020df8:	802127c0 	call	802127c <alt_qspi_validate_read_write_arguments>
 8020dfc:	e0bfff15 	stw	r2,-4(fp)

	if(0 != ret_code)
 8020e00:	e0bfff17 	ldw	r2,-4(fp)
 8020e04:	10000226 	beq	r2,zero,8020e10 <alt_qspi_controller_write+0x8c>
	{
		return ret_code;
 8020e08:	e0bfff17 	ldw	r2,-4(fp)
 8020e0c:	00005206 	br	8020f58 <alt_qspi_controller_write+0x1d4>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
 8020e10:	e0fff517 	ldw	r3,-44(fp)
 8020e14:	e0bff917 	ldw	r2,-28(fp)
 8020e18:	10803417 	ldw	r2,208(r2)
 8020e1c:	100b883a 	mov	r5,r2
 8020e20:	1809883a 	mov	r4,r3
 8020e24:	800e2300 	call	800e230 <__udivsi3>
 8020e28:	e0bffb15 	stw	r2,-20(fp)
 8020e2c:	00004306 	br	8020f3c <alt_qspi_controller_write+0x1b8>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
 8020e30:	e03ff815 	stw	zero,-32(fp)
    	alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
 8020e34:	e03ffa15 	stw	zero,-24(fp)
        alt_u32 length_to_write = 0; /** length to write to current sector */
 8020e38:	e03ff715 	stw	zero,-36(fp)

    	if(0 >= remaining_length)
 8020e3c:	e0bffd17 	ldw	r2,-12(fp)
 8020e40:	10004326 	beq	r2,zero,8020f50 <alt_qspi_controller_write+0x1cc>
    	{
    		break; /* out of data to write */
    	}

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(qspi_flash_info->sector_size - 1);
 8020e44:	e0bff917 	ldw	r2,-28(fp)
 8020e48:	10803417 	ldw	r2,208(r2)
 8020e4c:	0085c83a 	sub	r2,zero,r2
 8020e50:	e0fffe17 	ldw	r3,-8(fp)
 8020e54:	1884703a 	and	r2,r3,r2
 8020e58:	e0bff815 	stw	r2,-32(fp)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
 8020e5c:	e0fff817 	ldw	r3,-32(fp)
 8020e60:	e0bffe17 	ldw	r2,-8(fp)
 8020e64:	18800426 	beq	r3,r2,8020e78 <alt_qspi_controller_write+0xf4>
        {
            offset_within_current_sector = write_offset - block_offset;
 8020e68:	e0fffe17 	ldw	r3,-8(fp)
 8020e6c:	e0bff817 	ldw	r2,-32(fp)
 8020e70:	1885c83a 	sub	r2,r3,r2
 8020e74:	e0bffa15 	stw	r2,-24(fp)
        }

        /* erase sector */
        ret_code = alt_qspi_controller_erase_block(flash_info, block_offset);
 8020e78:	e0bff817 	ldw	r2,-32(fp)
 8020e7c:	100b883a 	mov	r5,r2
 8020e80:	e13ff617 	ldw	r4,-40(fp)
 8020e84:	8020a500 	call	8020a50 <alt_qspi_controller_erase_block>
 8020e88:	e0bfff15 	stw	r2,-4(fp)

        if(0 != ret_code)
 8020e8c:	e0bfff17 	ldw	r2,-4(fp)
 8020e90:	10000226 	beq	r2,zero,8020e9c <alt_qspi_controller_write+0x118>
        {
            return ret_code;
 8020e94:	e0bfff17 	ldw	r2,-4(fp)
 8020e98:	00002f06 	br	8020f58 <alt_qspi_controller_write+0x1d4>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(qspi_flash_info->sector_size - offset_within_current_sector, 
 8020e9c:	e0bff917 	ldw	r2,-28(fp)
 8020ea0:	10c03417 	ldw	r3,208(r2)
 8020ea4:	e0bffa17 	ldw	r2,-24(fp)
 8020ea8:	1887c83a 	sub	r3,r3,r2
 8020eac:	e0bffd17 	ldw	r2,-12(fp)
 8020eb0:	1880012e 	bgeu	r3,r2,8020eb8 <alt_qspi_controller_write+0x134>
 8020eb4:	1805883a 	mov	r2,r3
 8020eb8:	e0bff715 	stw	r2,-36(fp)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_qspi_controller_write_block(flash_info, block_offset, write_offset,
 8020ebc:	e13ff817 	ldw	r4,-32(fp)
 8020ec0:	e17ffe17 	ldw	r5,-8(fp)
 8020ec4:	e0fff417 	ldw	r3,-48(fp)
 8020ec8:	e0bffc17 	ldw	r2,-16(fp)
 8020ecc:	1887883a 	add	r3,r3,r2
 8020ed0:	e0bff717 	ldw	r2,-36(fp)
 8020ed4:	d8800015 	stw	r2,0(sp)
 8020ed8:	180f883a 	mov	r7,r3
 8020edc:	280d883a 	mov	r6,r5
 8020ee0:	200b883a 	mov	r5,r4
 8020ee4:	e13ff617 	ldw	r4,-40(fp)
 8020ee8:	8020b740 	call	8020b74 <alt_qspi_controller_write_block>
 8020eec:	e0bfff15 	stw	r2,-4(fp)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
 8020ef0:	e0bfff17 	ldw	r2,-4(fp)
 8020ef4:	10000226 	beq	r2,zero,8020f00 <alt_qspi_controller_write+0x17c>
        {
            return ret_code;
 8020ef8:	e0bfff17 	ldw	r2,-4(fp)
 8020efc:	00001606 	br	8020f58 <alt_qspi_controller_write+0x1d4>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
 8020f00:	e0fffd17 	ldw	r3,-12(fp)
 8020f04:	e0bff717 	ldw	r2,-36(fp)
 8020f08:	1885c83a 	sub	r2,r3,r2
 8020f0c:	e0bffd15 	stw	r2,-12(fp)
        buffer_offset += length_to_write;
 8020f10:	e0fffc17 	ldw	r3,-16(fp)
 8020f14:	e0bff717 	ldw	r2,-36(fp)
 8020f18:	1885883a 	add	r2,r3,r2
 8020f1c:	e0bffc15 	stw	r2,-16(fp)
        write_offset += length_to_write; 
 8020f20:	e0fffe17 	ldw	r3,-8(fp)
 8020f24:	e0bff717 	ldw	r2,-36(fp)
 8020f28:	1885883a 	add	r2,r3,r2
 8020f2c:	e0bffe15 	stw	r2,-8(fp)
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
 8020f30:	e0bffb17 	ldw	r2,-20(fp)
 8020f34:	10800044 	addi	r2,r2,1
 8020f38:	e0bffb15 	stw	r2,-20(fp)
 8020f3c:	e0bff917 	ldw	r2,-28(fp)
 8020f40:	10803317 	ldw	r2,204(r2)
 8020f44:	e0fffb17 	ldw	r3,-20(fp)
 8020f48:	18bfb936 	bltu	r3,r2,8020e30 <alt_qspi_controller_write+0xac>
 8020f4c:	00000106 	br	8020f54 <alt_qspi_controller_write+0x1d0>
    		break; /* out of data to write */
 8020f50:	0001883a 	nop
    }

    return ret_code;
 8020f54:	e0bfff17 	ldw	r2,-4(fp)
}
 8020f58:	e037883a 	mov	sp,fp
 8020f5c:	dfc00117 	ldw	ra,4(sp)
 8020f60:	df000017 	ldw	fp,0(sp)
 8020f64:	dec00204 	addi	sp,sp,8
 8020f68:	f800283a 	ret

08020f6c <alt_qspi_controller_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
 8020f6c:	defff804 	addi	sp,sp,-32
 8020f70:	dfc00715 	stw	ra,28(sp)
 8020f74:	df000615 	stw	fp,24(sp)
 8020f78:	df000604 	addi	fp,sp,24
 8020f7c:	e13ffd15 	stw	r4,-12(fp)
 8020f80:	e17ffc15 	stw	r5,-16(fp)
 8020f84:	e1bffb15 	stw	r6,-20(fp)
 8020f88:	e1fffa15 	stw	r7,-24(fp)
    alt_32 ret_code = 0;
 8020f8c:	e03fff15 	stw	zero,-4(fp)
	alt_qspi_controller_dev *qspi_flash_info = NULL;
 8020f90:	e03ffe15 	stw	zero,-8(fp)
	
	/* return -EINVAL if flash_info and dest_addr are NULL */
	if(NULL == flash_info || NULL == dest_addr)
 8020f94:	e0bffd17 	ldw	r2,-12(fp)
 8020f98:	10000226 	beq	r2,zero,8020fa4 <alt_qspi_controller_read+0x38>
 8020f9c:	e0bffb17 	ldw	r2,-20(fp)
 8020fa0:	1000021e 	bne	r2,zero,8020fac <alt_qspi_controller_read+0x40>
    {
    	return -EINVAL;
 8020fa4:	00bffa84 	movi	r2,-22
 8020fa8:	00001606 	br	8021004 <alt_qspi_controller_read+0x98>
    }
	
    qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 8020fac:	e0bffd17 	ldw	r2,-12(fp)
 8020fb0:	e0bffe15 	stw	r2,-8(fp)

	/* validate arguments */
	ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
 8020fb4:	e0bffc17 	ldw	r2,-16(fp)
 8020fb8:	e0fffa17 	ldw	r3,-24(fp)
 8020fbc:	180d883a 	mov	r6,r3
 8020fc0:	100b883a 	mov	r5,r2
 8020fc4:	e13ffe17 	ldw	r4,-8(fp)
 8020fc8:	802127c0 	call	802127c <alt_qspi_validate_read_write_arguments>
 8020fcc:	e0bfff15 	stw	r2,-4(fp)

	/* copy data from flash to destination address */
	if(0 == ret_code)
 8020fd0:	e0bfff17 	ldw	r2,-4(fp)
 8020fd4:	10000a1e 	bne	r2,zero,8021000 <alt_qspi_controller_read+0x94>
	{
		memcpy(dest_addr, (alt_u8*)qspi_flash_info->data_base + offset, length);
 8020fd8:	e0bffe17 	ldw	r2,-8(fp)
 8020fdc:	10c02e17 	ldw	r3,184(r2)
 8020fe0:	e0bffc17 	ldw	r2,-16(fp)
 8020fe4:	1885883a 	add	r2,r3,r2
 8020fe8:	1007883a 	mov	r3,r2
 8020fec:	e0bffa17 	ldw	r2,-24(fp)
 8020ff0:	100d883a 	mov	r6,r2
 8020ff4:	180b883a 	mov	r5,r3
 8020ff8:	e13ffb17 	ldw	r4,-20(fp)
 8020ffc:	8002ea40 	call	8002ea4 <memcpy>
	}

    return ret_code;
 8021000:	e0bfff17 	ldw	r2,-4(fp)
}
 8021004:	e037883a 	mov	sp,fp
 8021008:	dfc00117 	ldw	ra,4(sp)
 802100c:	df000017 	ldw	fp,0(sp)
 8021010:	dec00204 	addi	sp,sp,8
 8021014:	f800283a 	ret

08021018 <altera_qspi_controller_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_qspi_controller_init(alt_qspi_controller_dev *flash)
{
 8021018:	defffa04 	addi	sp,sp,-24
 802101c:	dfc00515 	stw	ra,20(sp)
 8021020:	df000415 	stw	fp,16(sp)
 8021024:	df000404 	addi	fp,sp,16
 8021028:	e13ffc15 	stw	r4,-16(fp)
	alt_u32 silicon_id = 0;
 802102c:	e03fff15 	stw	zero,-4(fp)
	alt_u32 size_in_bytes = 0;
 8021030:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 number_of_sectors = 0;
 8021034:	e03ffe15 	stw	zero,-8(fp)

    /* return -EINVAL if flash is NULL */
	if(NULL == flash)
 8021038:	e0bffc17 	ldw	r2,-16(fp)
 802103c:	1000021e 	bne	r2,zero,8021048 <altera_qspi_controller_init+0x30>
    {
    	return -EINVAL;
 8021040:	00bffa84 	movi	r2,-22
 8021044:	00008806 	br	8021268 <altera_qspi_controller_init+0x250>
    }
	
	/* return -ENODEV if CSR slave is not attached */
	if(NULL == (void *)flash->csr_base)
 8021048:	e0bffc17 	ldw	r2,-16(fp)
 802104c:	10803017 	ldw	r2,192(r2)
 8021050:	1000021e 	bne	r2,zero,802105c <altera_qspi_controller_init+0x44>
	{
		return -ENODEV;
 8021054:	00bffb44 	movi	r2,-19
 8021058:	00008306 	br	8021268 <altera_qspi_controller_init+0x250>
	 *
	 * In both cases, we can determine the number of sectors, which we can use
	 * to calculate a size. We compare that size to the system.h value to make sure
	 * the QSPI soft IP was configured correctly.
	 */
	if(0 == flash->is_epcs)
 802105c:	e0bffc17 	ldw	r2,-16(fp)
 8021060:	10803217 	ldw	r2,200(r2)
 8021064:	1000351e 	bne	r2,zero,802113c <altera_qspi_controller_init+0x124>
	{
		/* If we're an EPCQ or QSPI, we read QSPI_RD_RDID for the silicon ID */
		silicon_id = IORD_ALTERA_QSPI_CONTROLLER_RDID(flash->csr_base);
 8021068:	e0bffc17 	ldw	r2,-16(fp)
 802106c:	10803017 	ldw	r2,192(r2)
 8021070:	10800204 	addi	r2,r2,8
 8021074:	10800037 	ldwio	r2,0(r2)
 8021078:	e0bfff15 	stw	r2,-4(fp)
		silicon_id &= ALTERA_QSPI_CONTROLLER_RDID_MASK;
 802107c:	e0bfff17 	ldw	r2,-4(fp)
 8021080:	10803fcc 	andi	r2,r2,255
 8021084:	e0bfff15 	stw	r2,-4(fp)
 8021088:	e0bfff17 	ldw	r2,-4(fp)
 802108c:	10bffac4 	addi	r2,r2,-21
 8021090:	10c00368 	cmpgeui	r3,r2,13
 8021094:	1800271e 	bne	r3,zero,8021134 <altera_qspi_controller_init+0x11c>
 8021098:	100690ba 	slli	r3,r2,2
 802109c:	008200b4 	movhi	r2,2050
 80210a0:	1885883a 	add	r2,r3,r2
 80210a4:	10842b17 	ldw	r2,4268(r2)
 80210a8:	1000683a 	jmp	r2
 80210ac:	080210e0 	cmpeqi	zero,at,2115
 80210b0:	080210ec 	andhi	zero,at,2115
 80210b4:	080210f8 	rdprs	zero,at,2115
 80210b8:	08021104 	addi	zero,at,2116
 80210bc:	08021110 	cmplti	zero,at,2116
 80210c0:	08021134 	orhi	zero,at,2116
 80210c4:	08021134 	orhi	zero,at,2116
 80210c8:	08021134 	orhi	zero,at,2116
 80210cc:	08021134 	orhi	zero,at,2116
 80210d0:	08021134 	orhi	zero,at,2116
 80210d4:	08021134 	orhi	zero,at,2116
 80210d8:	0802111c 	xori	zero,at,2116
 80210dc:	08021128 	cmpgeui	zero,at,2116
		/*EPCQ and QSPI share the same ID for the same capacity*/
		switch(silicon_id)
		{
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI16:
			{
				number_of_sectors = 32;
 80210e0:	00800804 	movi	r2,32
 80210e4:	e0bffe15 	stw	r2,-8(fp)
				break;
 80210e8:	00003406 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI32:
			{
				number_of_sectors = 64;
 80210ec:	00801004 	movi	r2,64
 80210f0:	e0bffe15 	stw	r2,-8(fp)
				break;
 80210f4:	00003106 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI64:
			{
				number_of_sectors = 128;
 80210f8:	00802004 	movi	r2,128
 80210fc:	e0bffe15 	stw	r2,-8(fp)
				break;
 8021100:	00002e06 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI128:
			{
				number_of_sectors = 256;
 8021104:	00804004 	movi	r2,256
 8021108:	e0bffe15 	stw	r2,-8(fp)
				break;
 802110c:	00002b06 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI256:
			{
				number_of_sectors = 512;
 8021110:	00808004 	movi	r2,512
 8021114:	e0bffe15 	stw	r2,-8(fp)
				break;
 8021118:	00002806 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI512:
			{
				number_of_sectors = 1024;
 802111c:	00810004 	movi	r2,1024
 8021120:	e0bffe15 	stw	r2,-8(fp)
				break;
 8021124:	00002506 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_RDID_QSPI1024:
			{
				number_of_sectors = 2048;
 8021128:	00820004 	movi	r2,2048
 802112c:	e0bffe15 	stw	r2,-8(fp)
				break;
 8021130:	00002206 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			default:
			{
				return -ENODEV;
 8021134:	00bffb44 	movi	r2,-19
 8021138:	00004b06 	br	8021268 <altera_qspi_controller_init+0x250>
			}
		}
	}
	else {
		/* If we're an EPCS, we read QSPI_RD_SID for the silicon ID */
		silicon_id = IORD_ALTERA_QSPI_CONTROLLER_SID(flash->csr_base);
 802113c:	e0bffc17 	ldw	r2,-16(fp)
 8021140:	10803017 	ldw	r2,192(r2)
 8021144:	10800104 	addi	r2,r2,4
 8021148:	10800037 	ldwio	r2,0(r2)
 802114c:	e0bfff15 	stw	r2,-4(fp)
		silicon_id &= ALTERA_QSPI_CONTROLLER_SID_MASK;
 8021150:	e0bfff17 	ldw	r2,-4(fp)
 8021154:	10803fcc 	andi	r2,r2,255
 8021158:	e0bfff15 	stw	r2,-4(fp)

		/* Determine which EPCS device so we can figure out various properties */
		switch(silicon_id)
 802115c:	e0bfff17 	ldw	r2,-4(fp)
 8021160:	10800620 	cmpeqi	r2,r2,24
 8021164:	1000101e 	bne	r2,zero,80211a8 <altera_qspi_controller_init+0x190>
 8021168:	e0bfff17 	ldw	r2,-4(fp)
 802116c:	10800668 	cmpgeui	r2,r2,25
 8021170:	1000101e 	bne	r2,zero,80211b4 <altera_qspi_controller_init+0x19c>
 8021174:	e0bfff17 	ldw	r2,-4(fp)
 8021178:	10800520 	cmpeqi	r2,r2,20
 802117c:	1000041e 	bne	r2,zero,8021190 <altera_qspi_controller_init+0x178>
 8021180:	e0bfff17 	ldw	r2,-4(fp)
 8021184:	108005a0 	cmpeqi	r2,r2,22
 8021188:	1000041e 	bne	r2,zero,802119c <altera_qspi_controller_init+0x184>
 802118c:	00000906 	br	80211b4 <altera_qspi_controller_init+0x19c>
		{
			case ALTERA_QSPI_CONTROLLER_SID_EPCS16:
			{
				number_of_sectors = 32;
 8021190:	00800804 	movi	r2,32
 8021194:	e0bffe15 	stw	r2,-8(fp)
				break;
 8021198:	00000806 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_SID_EPCS64:
			{
				number_of_sectors = 128;
 802119c:	00802004 	movi	r2,128
 80211a0:	e0bffe15 	stw	r2,-8(fp)
				break;
 80211a4:	00000506 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			case ALTERA_QSPI_CONTROLLER_SID_EPCS128:
			{
				number_of_sectors = 256;
 80211a8:	00804004 	movi	r2,256
 80211ac:	e0bffe15 	stw	r2,-8(fp)
				break;
 80211b0:	00000206 	br	80211bc <altera_qspi_controller_init+0x1a4>
			}
			default:
			{
				return -ENODEV;
 80211b4:	00bffb44 	movi	r2,-19
 80211b8:	00002b06 	br	8021268 <altera_qspi_controller_init+0x250>
			}
		}
	}

	/* Calculate size of flash based on number of sectors */
	size_in_bytes = number_of_sectors * flash->sector_size;
 80211bc:	e0bffc17 	ldw	r2,-16(fp)
 80211c0:	10803417 	ldw	r2,208(r2)
 80211c4:	e0fffe17 	ldw	r3,-8(fp)
 80211c8:	1885383a 	mul	r2,r3,r2
 80211cc:	e0bffd15 	stw	r2,-12(fp)
	/*
	 * Make sure calculated size is the same size given in system.h
	 * Also check number of sectors is the same number given in system.h
	 * Otherwise the QSPI IP was not configured correctly
	 */
	if(	size_in_bytes != flash->size_in_bytes ||
 80211d0:	e0bffc17 	ldw	r2,-16(fp)
 80211d4:	10803117 	ldw	r2,196(r2)
 80211d8:	e0fffd17 	ldw	r3,-12(fp)
 80211dc:	1880041e 	bne	r3,r2,80211f0 <altera_qspi_controller_init+0x1d8>
			number_of_sectors != flash->number_of_sectors)
 80211e0:	e0bffc17 	ldw	r2,-16(fp)
 80211e4:	10803317 	ldw	r2,204(r2)
	if(	size_in_bytes != flash->size_in_bytes ||
 80211e8:	e0fffe17 	ldw	r3,-8(fp)
 80211ec:	18800426 	beq	r3,r2,8021200 <altera_qspi_controller_init+0x1e8>
	{
		flash->dev.number_of_regions = 0;
 80211f0:	e0bffc17 	ldw	r2,-16(fp)
 80211f4:	10000c15 	stw	zero,48(r2)
		return -ENODEV;
 80211f8:	00bffb44 	movi	r2,-19
 80211fc:	00001a06 	br	8021268 <altera_qspi_controller_init+0x250>
	}
	else
	{
		flash->silicon_id = silicon_id;
 8021200:	e0bffc17 	ldw	r2,-16(fp)
 8021204:	e0ffff17 	ldw	r3,-4(fp)
 8021208:	10c03615 	stw	r3,216(r2)
		flash->number_of_sectors = number_of_sectors;
 802120c:	e0bffc17 	ldw	r2,-16(fp)
 8021210:	e0fffe17 	ldw	r3,-8(fp)
 8021214:	10c03315 	stw	r3,204(r2)

		/*
		 * populate fields of region_info required to conform to HAL API
		 * create 1 region that composed of "number_of_sectors" blocks
		 */
		flash->dev.number_of_regions = 1;
 8021218:	e0bffc17 	ldw	r2,-16(fp)
 802121c:	00c00044 	movi	r3,1
 8021220:	10c00c15 	stw	r3,48(r2)
		flash->dev.region_info[0].offset = 0;
 8021224:	e0bffc17 	ldw	r2,-16(fp)
 8021228:	10000d15 	stw	zero,52(r2)
		flash->dev.region_info[0].region_size = size_in_bytes;
 802122c:	e0fffd17 	ldw	r3,-12(fp)
 8021230:	e0bffc17 	ldw	r2,-16(fp)
 8021234:	10c00e15 	stw	r3,56(r2)
		flash->dev.region_info[0].number_of_blocks = number_of_sectors;
 8021238:	e0fffe17 	ldw	r3,-8(fp)
 802123c:	e0bffc17 	ldw	r2,-16(fp)
 8021240:	10c00f15 	stw	r3,60(r2)
		flash->dev.region_info[0].block_size = flash->sector_size;
 8021244:	e0bffc17 	ldw	r2,-16(fp)
 8021248:	10803417 	ldw	r2,208(r2)
 802124c:	1007883a 	mov	r3,r2
 8021250:	e0bffc17 	ldw	r2,-16(fp)
 8021254:	10c01015 	stw	r3,64(r2)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
		alt_flash_device_register(&(flash->dev));
 8021258:	e0bffc17 	ldw	r2,-16(fp)
 802125c:	1009883a 	mov	r4,r2
 8021260:	80208800 	call	8020880 <alt_flash_device_register>


    return 0;
 8021264:	0005883a 	mov	r2,zero
}
 8021268:	e037883a 	mov	sp,fp
 802126c:	dfc00117 	ldw	ra,4(sp)
 8021270:	df000017 	ldw	fp,0(sp)
 8021274:	dec00204 	addi	sp,sp,8
 8021278:	f800283a 	ret

0802127c <alt_qspi_validate_read_write_arguments>:
(
		alt_qspi_controller_dev *flash_info, /** device info */
		alt_u32 offset, /** offset of read/write */
		alt_u32 length /** length of read/write */
)
{
 802127c:	defff904 	addi	sp,sp,-28
 8021280:	df000615 	stw	fp,24(sp)
 8021284:	df000604 	addi	fp,sp,24
 8021288:	e13ffc15 	stw	r4,-16(fp)
 802128c:	e17ffb15 	stw	r5,-20(fp)
 8021290:	e1bffa15 	stw	r6,-24(fp)
    alt_qspi_controller_dev *qspi_flash_info = NULL;
 8021294:	e03fff15 	stw	zero,-4(fp)
    alt_u32 start_address = 0;
 8021298:	e03ffe15 	stw	zero,-8(fp)
    alt_32 end_address = 0;
 802129c:	e03ffd15 	stw	zero,-12(fp)
	
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
 80212a0:	e0bffc17 	ldw	r2,-16(fp)
 80212a4:	1000021e 	bne	r2,zero,80212b0 <alt_qspi_validate_read_write_arguments+0x34>
   {
    	return -EINVAL;
 80212a8:	00bffa84 	movi	r2,-22
 80212ac:	00001606 	br	8021308 <alt_qspi_validate_read_write_arguments+0x8c>
   }
	
  qspi_flash_info = (alt_qspi_controller_dev*)flash_info;
 80212b0:	e0bffc17 	ldw	r2,-16(fp)
 80212b4:	e0bfff15 	stw	r2,-4(fp)

  start_address = qspi_flash_info->data_base + offset; /** first address of read or write */
 80212b8:	e0bfff17 	ldw	r2,-4(fp)
 80212bc:	10802e17 	ldw	r2,184(r2)
 80212c0:	e0fffb17 	ldw	r3,-20(fp)
 80212c4:	1885883a 	add	r2,r3,r2
 80212c8:	e0bffe15 	stw	r2,-8(fp)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
 80212cc:	e0fffe17 	ldw	r3,-8(fp)
 80212d0:	e0bffa17 	ldw	r2,-24(fp)
 80212d4:	1885883a 	add	r2,r3,r2
 80212d8:	e0bffd15 	stw	r2,-12(fp)

  /* make sure start and end address is less then the end address of the flash */
  if(
		  start_address >= qspi_flash_info->data_end ||
 80212dc:	e0bfff17 	ldw	r2,-4(fp)
 80212e0:	10802f17 	ldw	r2,188(r2)
  if(
 80212e4:	e0fffe17 	ldw	r3,-8(fp)
 80212e8:	1880042e 	bgeu	r3,r2,80212fc <alt_qspi_validate_read_write_arguments+0x80>
		  end_address >= qspi_flash_info->data_end ||
 80212ec:	e0bfff17 	ldw	r2,-4(fp)
 80212f0:	10802f17 	ldw	r2,188(r2)
 80212f4:	e0fffd17 	ldw	r3,-12(fp)
		  offset < 0 ||
 80212f8:	18800236 	bltu	r3,r2,8021304 <alt_qspi_validate_read_write_arguments+0x88>
		  length < 0
  )
  {
	  return -EINVAL;
 80212fc:	00bffa84 	movi	r2,-22
 8021300:	00000106 	br	8021308 <alt_qspi_validate_read_write_arguments+0x8c>
  }

  return 0;
 8021304:	0005883a 	mov	r2,zero
}
 8021308:	e037883a 	mov	sp,fp
 802130c:	df000017 	ldw	fp,0(sp)
 8021310:	dec00104 	addi	sp,sp,4
 8021314:	f800283a 	ret

08021318 <alt_qspi_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_qspi_poll_for_write_in_progress(alt_qspi_controller_dev* qspi_flash_info)
{  
 8021318:	defffb04 	addi	sp,sp,-20
 802131c:	dfc00415 	stw	ra,16(sp)
 8021320:	df000315 	stw	fp,12(sp)
 8021324:	df000304 	addi	fp,sp,12
 8021328:	e13ffd15 	stw	r4,-12(fp)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE > 0
	alt_u32 timeout = ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE;
 802132c:	008002f4 	movhi	r2,11
 8021330:	10ab9804 	addi	r2,r2,-20896
 8021334:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 counter = 0;
 8021338:	e03fff8d 	sth	zero,-2(fp)
#endif

    /* return -EINVAL if qspi_flash_info is NULL */
	if(NULL == qspi_flash_info)
 802133c:	e0bffd17 	ldw	r2,-12(fp)
 8021340:	10000c1e 	bne	r2,zero,8021374 <alt_qspi_poll_for_write_in_progress+0x5c>
    {
    	return -EINVAL;
 8021344:	00bffa84 	movi	r2,-22
 8021348:	00001106 	br	8021390 <alt_qspi_poll_for_write_in_progress+0x78>
	/* while Write in Progress bit is set, we wait */
	while((IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base) &
			ALTERA_QSPI_CONTROLLER_STATUS_WIP_MASK) ==
			ALTERA_QSPI_CONTROLLER_STATUS_WIP_BUSY)
	{
        alt_busy_sleep(1); /* delay 1us */
 802134c:	01000044 	movi	r4,1
 8021350:	803a8c40 	call	803a8c4 <alt_busy_sleep>
#if ALTERA_QSPI_CONTROLLER_1US_TIMEOUT_VALUE > 0
		if(timeout <= counter )
 8021354:	e0ffff8b 	ldhu	r3,-2(fp)
 8021358:	e0bffe17 	ldw	r2,-8(fp)
 802135c:	18800236 	bltu	r3,r2,8021368 <alt_qspi_poll_for_write_in_progress+0x50>
		{
			return -ETIME;
 8021360:	00bff084 	movi	r2,-62
 8021364:	00000a06 	br	8021390 <alt_qspi_poll_for_write_in_progress+0x78>
		}
		
		counter++;
 8021368:	e0bfff8b 	ldhu	r2,-2(fp)
 802136c:	10800044 	addi	r2,r2,1
 8021370:	e0bfff8d 	sth	r2,-2(fp)
	while((IORD_ALTERA_QSPI_CONTROLLER_STATUS(qspi_flash_info->csr_base) &
 8021374:	e0bffd17 	ldw	r2,-12(fp)
 8021378:	10803017 	ldw	r2,192(r2)
 802137c:	10800037 	ldwio	r2,0(r2)
 8021380:	1080004c 	andi	r2,r2,1
 8021384:	10800060 	cmpeqi	r2,r2,1
 8021388:	103ff01e 	bne	r2,zero,802134c <alt_qspi_poll_for_write_in_progress+0x34>
#endif

	}

	return 0;
 802138c:	0005883a 	mov	r2,zero
}
 8021390:	e037883a 	mov	sp,fp
 8021394:	dfc00117 	ldw	ra,4(sp)
 8021398:	df000017 	ldw	fp,0(sp)
 802139c:	dec00204 	addi	sp,sp,8
 80213a0:	f800283a 	ret

080213a4 <alt_get_errno>:
{
 80213a4:	defffe04 	addi	sp,sp,-8
 80213a8:	dfc00115 	stw	ra,4(sp)
 80213ac:	df000015 	stw	fp,0(sp)
 80213b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80213b4:	d0a04317 	ldw	r2,-32500(gp)
 80213b8:	10000326 	beq	r2,zero,80213c8 <alt_get_errno+0x24>
 80213bc:	d0a04317 	ldw	r2,-32500(gp)
 80213c0:	103ee83a 	callr	r2
 80213c4:	00000106 	br	80213cc <alt_get_errno+0x28>
 80213c8:	d0a05a04 	addi	r2,gp,-32408
}
 80213cc:	e037883a 	mov	sp,fp
 80213d0:	dfc00117 	ldw	ra,4(sp)
 80213d4:	df000017 	ldw	fp,0(sp)
 80213d8:	dec00204 	addi	sp,sp,8
 80213dc:	f800283a 	ret

080213e0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
 80213e0:	defffc04 	addi	sp,sp,-16
 80213e4:	df000315 	stw	fp,12(sp)
 80213e8:	df000304 	addi	fp,sp,12
 80213ec:	e13fff15 	stw	r4,-4(fp)
 80213f0:	e17ffe15 	stw	r5,-8(fp)
 80213f4:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 80213f8:	e0bfff17 	ldw	r2,-4(fp)
 80213fc:	10800037 	ldwio	r2,0(r2)
 8021400:	1080010c 	andi	r2,r2,4
 8021404:	10000226 	beq	r2,zero,8021410 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
 8021408:	00bff904 	movi	r2,-28
 802140c:	00001506 	br	8021464 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
 8021410:	e0bffd17 	ldw	r2,-12(fp)
 8021414:	10800017 	ldw	r2,0(r2)
 8021418:	1007883a 	mov	r3,r2
 802141c:	e0bffe17 	ldw	r2,-8(fp)
 8021420:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
 8021424:	e0bffe17 	ldw	r2,-8(fp)
 8021428:	10800104 	addi	r2,r2,4
 802142c:	e0fffd17 	ldw	r3,-12(fp)
 8021430:	18c00117 	ldw	r3,4(r3)
 8021434:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
 8021438:	e0bffe17 	ldw	r2,-8(fp)
 802143c:	10800204 	addi	r2,r2,8
 8021440:	e0fffd17 	ldw	r3,-12(fp)
 8021444:	18c00217 	ldw	r3,8(r3)
 8021448:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
 802144c:	e0bffe17 	ldw	r2,-8(fp)
 8021450:	10800304 	addi	r2,r2,12
 8021454:	e0fffd17 	ldw	r3,-12(fp)
 8021458:	18c00317 	ldw	r3,12(r3)
 802145c:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
 8021460:	0005883a 	mov	r2,zero
}
 8021464:	e037883a 	mov	sp,fp
 8021468:	df000017 	ldw	fp,0(sp)
 802146c:	dec00104 	addi	sp,sp,4
 8021470:	f800283a 	ret

08021474 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
 8021474:	defffc04 	addi	sp,sp,-16
 8021478:	df000315 	stw	fp,12(sp)
 802147c:	df000304 	addi	fp,sp,12
 8021480:	e13fff15 	stw	r4,-4(fp)
 8021484:	e17ffe15 	stw	r5,-8(fp)
 8021488:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 802148c:	e0bfff17 	ldw	r2,-4(fp)
 8021490:	10800037 	ldwio	r2,0(r2)
 8021494:	1080010c 	andi	r2,r2,4
 8021498:	10000226 	beq	r2,zero,80214a4 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
 802149c:	00bff904 	movi	r2,-28
 80214a0:	00003b06 	br	8021590 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
 80214a4:	e0bffd17 	ldw	r2,-12(fp)
 80214a8:	10800017 	ldw	r2,0(r2)
 80214ac:	1007883a 	mov	r3,r2
 80214b0:	e0bffe17 	ldw	r2,-8(fp)
 80214b4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
 80214b8:	e0bffe17 	ldw	r2,-8(fp)
 80214bc:	10800104 	addi	r2,r2,4
 80214c0:	e0fffd17 	ldw	r3,-12(fp)
 80214c4:	18c00117 	ldw	r3,4(r3)
 80214c8:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
 80214cc:	e0bffe17 	ldw	r2,-8(fp)
 80214d0:	10800204 	addi	r2,r2,8
 80214d4:	e0fffd17 	ldw	r3,-12(fp)
 80214d8:	18c00217 	ldw	r3,8(r3)
 80214dc:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
 80214e0:	e0bffe17 	ldw	r2,-8(fp)
 80214e4:	10800304 	addi	r2,r2,12
 80214e8:	e0fffd17 	ldw	r3,-12(fp)
 80214ec:	18c0030b 	ldhu	r3,12(r3)
 80214f0:	18ffffcc 	andi	r3,r3,65535
 80214f4:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
 80214f8:	e0bffe17 	ldw	r2,-8(fp)
 80214fc:	10800384 	addi	r2,r2,14
 8021500:	e0fffd17 	ldw	r3,-12(fp)
 8021504:	18c00383 	ldbu	r3,14(r3)
 8021508:	18c03fcc 	andi	r3,r3,255
 802150c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
 8021510:	e0bffe17 	ldw	r2,-8(fp)
 8021514:	108003c4 	addi	r2,r2,15
 8021518:	e0fffd17 	ldw	r3,-12(fp)
 802151c:	18c003c3 	ldbu	r3,15(r3)
 8021520:	18c03fcc 	andi	r3,r3,255
 8021524:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
 8021528:	e0bffe17 	ldw	r2,-8(fp)
 802152c:	10800404 	addi	r2,r2,16
 8021530:	e0fffd17 	ldw	r3,-12(fp)
 8021534:	18c0040b 	ldhu	r3,16(r3)
 8021538:	18ffffcc 	andi	r3,r3,65535
 802153c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
 8021540:	e0bffe17 	ldw	r2,-8(fp)
 8021544:	10800484 	addi	r2,r2,18
 8021548:	e0fffd17 	ldw	r3,-12(fp)
 802154c:	18c0048b 	ldhu	r3,18(r3)
 8021550:	18ffffcc 	andi	r3,r3,65535
 8021554:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
 8021558:	e0bffe17 	ldw	r2,-8(fp)
 802155c:	10800504 	addi	r2,r2,20
 8021560:	0007883a 	mov	r3,zero
 8021564:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
 8021568:	e0bffe17 	ldw	r2,-8(fp)
 802156c:	10800604 	addi	r2,r2,24
 8021570:	0007883a 	mov	r3,zero
 8021574:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
 8021578:	e0bffe17 	ldw	r2,-8(fp)
 802157c:	10800704 	addi	r2,r2,28
 8021580:	e0fffd17 	ldw	r3,-12(fp)
 8021584:	18c00717 	ldw	r3,28(r3)
 8021588:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
 802158c:	0005883a 	mov	r2,zero
}
 8021590:	e037883a 	mov	sp,fp
 8021594:	df000017 	ldw	fp,0(sp)
 8021598:	dec00104 	addi	sp,sp,4
 802159c:	f800283a 	ret

080215a0 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
 80215a0:	defff804 	addi	sp,sp,-32
 80215a4:	dfc00715 	stw	ra,28(sp)
 80215a8:	df000615 	stw	fp,24(sp)
 80215ac:	df000604 	addi	fp,sp,24
 80215b0:	e13ffa15 	stw	r4,-24(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
 80215b4:	e0bffa17 	ldw	r2,-24(fp)
 80215b8:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
 80215bc:	e0bfff17 	ldw	r2,-4(fp)
 80215c0:	10801783 	ldbu	r2,94(r2)
 80215c4:	10803fcc 	andi	r2,r2,255
 80215c8:	10001126 	beq	r2,zero,8021610 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 80215cc:	e0bfff17 	ldw	r2,-4(fp)
 80215d0:	10800617 	ldw	r2,24(r2)
 80215d4:	10800037 	ldwio	r2,0(r2)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
 80215d8:	1007883a 	mov	r3,r2
        temporary_control = 
 80215dc:	00bffdc4 	movi	r2,-9
 80215e0:	1884703a 	and	r2,r3,r2
 80215e4:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 80215e8:	e0bfff17 	ldw	r2,-4(fp)
 80215ec:	10800617 	ldw	r2,24(r2)
 80215f0:	e0fffe17 	ldw	r3,-8(fp)
 80215f4:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
 80215f8:	e0bfff17 	ldw	r2,-4(fp)
 80215fc:	10800617 	ldw	r2,24(r2)
 8021600:	10800404 	addi	r2,r2,16
 8021604:	00c00044 	movi	r3,1
 8021608:	10c00035 	stwio	r3,0(r2)
 802160c:	00001106 	br	8021654 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 8021610:	e0bfff17 	ldw	r2,-4(fp)
 8021614:	10800317 	ldw	r2,12(r2)
 8021618:	10800104 	addi	r2,r2,4
 802161c:	10800037 	ldwio	r2,0(r2)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 8021620:	1007883a 	mov	r3,r2
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 8021624:	00bffbc4 	movi	r2,-17
 8021628:	1884703a 	and	r2,r3,r2
 802162c:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 8021630:	e0bfff17 	ldw	r2,-4(fp)
 8021634:	10800317 	ldw	r2,12(r2)
 8021638:	10800104 	addi	r2,r2,4
 802163c:	e0fffe17 	ldw	r3,-8(fp)
 8021640:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
 8021644:	e0bfff17 	ldw	r2,-4(fp)
 8021648:	10800317 	ldw	r2,12(r2)
 802164c:	00c08004 	movi	r3,512
 8021650:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8021654:	e0bfff17 	ldw	r2,-4(fp)
 8021658:	10800b17 	ldw	r2,44(r2)
 802165c:	10001326 	beq	r2,zero,80216ac <alt_msgdma_irq+0x10c>
  NIOS2_READ_STATUS (context);
 8021660:	0005303a 	rdctl	r2,status
 8021664:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8021668:	e0fffb17 	ldw	r3,-20(fp)
 802166c:	00bfff84 	movi	r2,-2
 8021670:	1884703a 	and	r2,r3,r2
 8021674:	1001703a 	wrctl	status,r2
  return context;
 8021678:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 802167c:	e0bffd15 	stw	r2,-12(fp)
        dev->callback (dev->callback_context);
 8021680:	e0bfff17 	ldw	r2,-4(fp)
 8021684:	10800b17 	ldw	r2,44(r2)
 8021688:	e0ffff17 	ldw	r3,-4(fp)
 802168c:	18c00c17 	ldw	r3,48(r3)
 8021690:	1809883a 	mov	r4,r3
 8021694:	103ee83a 	callr	r2
 8021698:	e0bffd17 	ldw	r2,-12(fp)
 802169c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80216a0:	e0bffc17 	ldw	r2,-16(fp)
 80216a4:	1001703a 	wrctl	status,r2
}
 80216a8:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
 80216ac:	e0bfff17 	ldw	r2,-4(fp)
 80216b0:	10801783 	ldbu	r2,94(r2)
 80216b4:	10803fcc 	andi	r2,r2,255
 80216b8:	10000a26 	beq	r2,zero,80216e4 <alt_msgdma_irq+0x144>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 80216bc:	e0bfff17 	ldw	r2,-4(fp)
 80216c0:	10800617 	ldw	r2,24(r2)
 80216c4:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 80216c8:	10800214 	ori	r2,r2,8
        temporary_control = 
 80216cc:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 80216d0:	e0bfff17 	ldw	r2,-4(fp)
 80216d4:	10800617 	ldw	r2,24(r2)
 80216d8:	e0fffe17 	ldw	r3,-8(fp)
 80216dc:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
 80216e0:	00000c06 	br	8021714 <alt_msgdma_irq+0x174>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 80216e4:	e0bfff17 	ldw	r2,-4(fp)
 80216e8:	10800317 	ldw	r2,12(r2)
 80216ec:	10800104 	addi	r2,r2,4
 80216f0:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 80216f4:	10800414 	ori	r2,r2,16
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 80216f8:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 80216fc:	e0bfff17 	ldw	r2,-4(fp)
 8021700:	10800317 	ldw	r2,12(r2)
 8021704:	10800104 	addi	r2,r2,4
 8021708:	e0fffe17 	ldw	r3,-8(fp)
 802170c:	10c00035 	stwio	r3,0(r2)
    return;
 8021710:	0001883a 	nop
}
 8021714:	e037883a 	mov	sp,fp
 8021718:	dfc00117 	ldw	ra,4(sp)
 802171c:	df000017 	ldw	fp,0(sp)
 8021720:	dec00204 	addi	sp,sp,8
 8021724:	f800283a 	ret

08021728 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 8021728:	defffb04 	addi	sp,sp,-20
 802172c:	df000415 	stw	fp,16(sp)
 8021730:	df000404 	addi	fp,sp,16
 8021734:	e13fff15 	stw	r4,-4(fp)
 8021738:	e17ffe15 	stw	r5,-8(fp)
 802173c:	e1bffd15 	stw	r6,-12(fp)
 8021740:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
 8021744:	e0bfff17 	ldw	r2,-4(fp)
 8021748:	10c01217 	ldw	r3,72(r2)
 802174c:	e0800117 	ldw	r2,4(fp)
 8021750:	18800436 	bltu	r3,r2,8021764 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 8021754:	e0bfff17 	ldw	r2,-4(fp)
 8021758:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
 802175c:	10803fcc 	andi	r2,r2,255
 8021760:	10000226 	beq	r2,zero,802176c <alt_msgdma_construct_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
 8021764:	00bffa84 	movi	r2,-22
 8021768:	00000e06 	br	80217a4 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
 802176c:	e0bffe17 	ldw	r2,-8(fp)
 8021770:	e0fffd17 	ldw	r3,-12(fp)
 8021774:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 8021778:	e0bffe17 	ldw	r2,-8(fp)
 802177c:	e0fffc17 	ldw	r3,-16(fp)
 8021780:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 8021784:	e0bffe17 	ldw	r2,-8(fp)
 8021788:	e0c00117 	ldw	r3,4(fp)
 802178c:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 8021790:	e0800217 	ldw	r2,8(fp)
 8021794:	10e00034 	orhi	r3,r2,32768
 8021798:	e0bffe17 	ldw	r2,-8(fp)
 802179c:	10c00315 	stw	r3,12(r2)
    
    return 0;
 80217a0:	0005883a 	mov	r2,zero
}
 80217a4:	e037883a 	mov	sp,fp
 80217a8:	df000017 	ldw	fp,0(sp)
 80217ac:	dec00104 	addi	sp,sp,4
 80217b0:	f800283a 	ret

080217b4 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 80217b4:	defff604 	addi	sp,sp,-40
 80217b8:	df000915 	stw	fp,36(sp)
 80217bc:	df000904 	addi	fp,sp,36
 80217c0:	e13fff15 	stw	r4,-4(fp)
 80217c4:	e17ffe15 	stw	r5,-8(fp)
 80217c8:	e1bffd15 	stw	r6,-12(fp)
 80217cc:	e1fffc15 	stw	r7,-16(fp)
 80217d0:	e1800317 	ldw	r6,12(fp)
 80217d4:	e1400417 	ldw	r5,16(fp)
 80217d8:	e1000517 	ldw	r4,20(fp)
 80217dc:	e0c00617 	ldw	r3,24(fp)
 80217e0:	e0800717 	ldw	r2,28(fp)
 80217e4:	e1bffb0d 	sth	r6,-20(fp)
 80217e8:	e17ffa05 	stb	r5,-24(fp)
 80217ec:	e13ff905 	stb	r4,-28(fp)
 80217f0:	e0fff80d 	sth	r3,-32(fp)
 80217f4:	e0bff70d 	sth	r2,-36(fp)
    if(dev->max_byte < length ||
 80217f8:	e0bfff17 	ldw	r2,-4(fp)
 80217fc:	10c01217 	ldw	r3,72(r2)
 8021800:	e0800117 	ldw	r2,4(fp)
 8021804:	18801936 	bltu	r3,r2,802186c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 8021808:	e13fff17 	ldw	r4,-4(fp)
 802180c:	20801317 	ldw	r2,76(r4)
 8021810:	20c01417 	ldw	r3,80(r4)
 8021814:	e13ff80b 	ldhu	r4,-32(fp)
 8021818:	213fffcc 	andi	r4,r4,65535
 802181c:	2015883a 	mov	r10,r4
 8021820:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
 8021824:	1ac01136 	bltu	r3,r11,802186c <alt_msgdma_construct_extended_descriptor+0xb8>
 8021828:	58c0011e 	bne	r11,r3,8021830 <alt_msgdma_construct_extended_descriptor+0x7c>
 802182c:	12800f36 	bltu	r2,r10,802186c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
 8021830:	e13fff17 	ldw	r4,-4(fp)
 8021834:	20801317 	ldw	r2,76(r4)
 8021838:	20c01417 	ldw	r3,80(r4)
 802183c:	e13ff70b 	ldhu	r4,-36(fp)
 8021840:	213fffcc 	andi	r4,r4,65535
 8021844:	2011883a 	mov	r8,r4
 8021848:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
 802184c:	1a400736 	bltu	r3,r9,802186c <alt_msgdma_construct_extended_descriptor+0xb8>
 8021850:	48c0011e 	bne	r9,r3,8021858 <alt_msgdma_construct_extended_descriptor+0xa4>
 8021854:	12000536 	bltu	r2,r8,802186c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
 8021858:	e0bfff17 	ldw	r2,-4(fp)
 802185c:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
 8021860:	10803fcc 	andi	r2,r2,255
 8021864:	10800060 	cmpeqi	r2,r2,1
 8021868:	1000021e 	bne	r2,zero,8021874 <alt_msgdma_construct_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
 802186c:	00bffa84 	movi	r2,-22
 8021870:	00002106 	br	80218f8 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
 8021874:	e0bffe17 	ldw	r2,-8(fp)
 8021878:	e0fffd17 	ldw	r3,-12(fp)
 802187c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
 8021880:	e0bffe17 	ldw	r2,-8(fp)
 8021884:	e0fffc17 	ldw	r3,-16(fp)
 8021888:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 802188c:	e0bffe17 	ldw	r2,-8(fp)
 8021890:	e0c00117 	ldw	r3,4(fp)
 8021894:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 8021898:	e0bffe17 	ldw	r2,-8(fp)
 802189c:	e0fffb0b 	ldhu	r3,-20(fp)
 80218a0:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
 80218a4:	e0bffe17 	ldw	r2,-8(fp)
 80218a8:	e0fffa03 	ldbu	r3,-24(fp)
 80218ac:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
 80218b0:	e0bffe17 	ldw	r2,-8(fp)
 80218b4:	e0fff903 	ldbu	r3,-28(fp)
 80218b8:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
 80218bc:	e0bffe17 	ldw	r2,-8(fp)
 80218c0:	e0fff80b 	ldhu	r3,-32(fp)
 80218c4:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
 80218c8:	e0bffe17 	ldw	r2,-8(fp)
 80218cc:	e0fff70b 	ldhu	r3,-36(fp)
 80218d0:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
 80218d4:	e0bffe17 	ldw	r2,-8(fp)
 80218d8:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
 80218dc:	e0bffe17 	ldw	r2,-8(fp)
 80218e0:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 80218e4:	e0800217 	ldw	r2,8(fp)
 80218e8:	10e00034 	orhi	r3,r2,32768
 80218ec:	e0bffe17 	ldw	r2,-8(fp)
 80218f0:	10c00715 	stw	r3,28(r2)

  return 0 ;
 80218f4:	0005883a 	mov	r2,zero

}
 80218f8:	e037883a 	mov	sp,fp
 80218fc:	df000017 	ldw	fp,0(sp)
 8021900:	dec00104 	addi	sp,sp,4
 8021904:	f800283a 	ret

08021908 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 8021908:	deffed04 	addi	sp,sp,-76
 802190c:	dfc01215 	stw	ra,72(sp)
 8021910:	df001115 	stw	fp,68(sp)
 8021914:	df001104 	addi	fp,sp,68
 8021918:	e13ff115 	stw	r4,-60(fp)
 802191c:	e17ff015 	stw	r5,-64(fp)
 8021920:	e1bfef15 	stw	r6,-68(fp)
    alt_u32 control = 0;
 8021924:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
 8021928:	e03ffd15 	stw	zero,-12(fp)
    alt_u16 counter = 0;
 802192c:	e03fff8d 	sth	zero,-2(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021930:	e0bff117 	ldw	r2,-60(fp)
 8021934:	10800317 	ldw	r2,12(r2)
 8021938:	10800204 	addi	r2,r2,8
 802193c:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
 8021940:	10bfffcc 	andi	r2,r2,65535
 8021944:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021948:	e0bff117 	ldw	r2,-60(fp)
 802194c:	10800317 	ldw	r2,12(r2)
 8021950:	10800204 	addi	r2,r2,8
 8021954:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8021958:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
 802195c:	10bfffcc 	andi	r2,r2,65535
 8021960:	e0bffb15 	stw	r2,-20(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8021964:	e0bff117 	ldw	r2,-60(fp)
 8021968:	10800917 	ldw	r2,36(r2)
 802196c:	e0fffb17 	ldw	r3,-20(fp)
 8021970:	1880042e 	bgeu	r3,r2,8021984 <alt_msgdma_descriptor_async_transfer+0x7c>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 8021974:	e0bff117 	ldw	r2,-60(fp)
 8021978:	10800917 	ldw	r2,36(r2)
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 802197c:	e0fffc17 	ldw	r3,-16(fp)
 8021980:	18800236 	bltu	r3,r2,802198c <alt_msgdma_descriptor_async_transfer+0x84>
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
 8021984:	00bff904 	movi	r2,-28
 8021988:	0000ab06 	br	8021c38 <alt_msgdma_descriptor_async_transfer+0x330>
    
    /*
    * When running in a multi threaded environment, obtain the "regs_lock"
    * semaphore. This ensures that accessing registers is thread-safe.
    */
    ALT_SEM_PEND (dev->regs_lock, 0);
 802198c:	e0bff117 	ldw	r2,-60(fp)
 8021990:	10801817 	ldw	r2,96(r2)
 8021994:	e0bff815 	stw	r2,-32(fp)
 8021998:	e03ff78d 	sth	zero,-34(fp)
 802199c:	e0bff78b 	ldhu	r2,-34(fp)
 80219a0:	e0fff2c4 	addi	r3,fp,-53
 80219a4:	180d883a 	mov	r6,r3
 80219a8:	100b883a 	mov	r5,r2
 80219ac:	e13ff817 	ldw	r4,-32(fp)
 80219b0:	80168c40 	call	80168c4 <OSSemPend>
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 80219b4:	00800804 	movi	r2,32
 80219b8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 80219bc:	0005303a 	rdctl	r2,status
 80219c0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80219c4:	e0fff917 	ldw	r3,-28(fp)
 80219c8:	00bfff84 	movi	r2,-2
 80219cc:	1884703a 	and	r2,r3,r2
 80219d0:	1001703a 	wrctl	status,r2
  return context;
 80219d4:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 80219d8:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 80219dc:	e0bff117 	ldw	r2,-60(fp)
 80219e0:	10800317 	ldw	r2,12(r2)
 80219e4:	10800104 	addi	r2,r2,4
 80219e8:	e0fffe17 	ldw	r3,-8(fp)
 80219ec:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 80219f0:	e0bff117 	ldw	r2,-60(fp)
 80219f4:	10800317 	ldw	r2,12(r2)
 80219f8:	e0fff117 	ldw	r3,-60(fp)
 80219fc:	18c00317 	ldw	r3,12(r3)
 8021a00:	18c00037 	ldwio	r3,0(r3)
 8021a04:	10c00035 	stwio	r3,0(r2)
 8021a08:	e0bffd17 	ldw	r2,-12(fp)
 8021a0c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8021a10:	e0bffa17 	ldw	r2,-24(fp)
 8021a14:	1001703a 	wrctl	status,r2
}
 8021a18:	0001883a 	nop
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
 8021a1c:	e0bff017 	ldw	r2,-64(fp)
 8021a20:	10001e26 	beq	r2,zero,8021a9c <alt_msgdma_descriptor_async_transfer+0x194>
 8021a24:	e0bfef17 	ldw	r2,-68(fp)
 8021a28:	10001c1e 	bne	r2,zero,8021a9c <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 8021a2c:	00001106 	br	8021a74 <alt_msgdma_descriptor_async_transfer+0x16c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 8021a30:	01000044 	movi	r4,1
 8021a34:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021a38:	e0bfff8b 	ldhu	r2,-2(fp)
 8021a3c:	1084e230 	cmpltui	r2,r2,5000
 8021a40:	1000091e 	bne	r2,zero,8021a68 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
 8021a44:	01020174 	movhi	r4,2053
 8021a48:	2106e204 	addi	r4,r4,7048
 8021a4c:	803b4d00 	call	803b4d0 <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8021a50:	e0bff117 	ldw	r2,-60(fp)
 8021a54:	10801817 	ldw	r2,96(r2)
 8021a58:	1009883a 	mov	r4,r2
 8021a5c:	8016c4c0 	call	8016c4c <OSSemPost>
                
                return -ETIME;
 8021a60:	00bff084 	movi	r2,-62
 8021a64:	00007406 	br	8021c38 <alt_msgdma_descriptor_async_transfer+0x330>
            }
            counter++; 
 8021a68:	e0bfff8b 	ldhu	r2,-2(fp)
 8021a6c:	10800044 	addi	r2,r2,1
 8021a70:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
 8021a74:	e0bff117 	ldw	r2,-60(fp)
 8021a78:	10c00317 	ldw	r3,12(r2)
 8021a7c:	e0bff117 	ldw	r2,-60(fp)
 8021a80:	10800417 	ldw	r2,16(r2)
 8021a84:	e1bff017 	ldw	r6,-64(fp)
 8021a88:	100b883a 	mov	r5,r2
 8021a8c:	1809883a 	mov	r4,r3
 8021a90:	80213e00 	call	80213e0 <alt_msgdma_write_standard_descriptor>
 8021a94:	103fe61e 	bne	r2,zero,8021a30 <alt_msgdma_descriptor_async_transfer+0x128>
    if (NULL != standard_desc && NULL == extended_desc)
 8021a98:	00002706 	br	8021b38 <alt_msgdma_descriptor_async_transfer+0x230>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 8021a9c:	e0bff017 	ldw	r2,-64(fp)
 8021aa0:	10001f1e 	bne	r2,zero,8021b20 <alt_msgdma_descriptor_async_transfer+0x218>
 8021aa4:	e0bfef17 	ldw	r2,-68(fp)
 8021aa8:	10001d26 	beq	r2,zero,8021b20 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
 8021aac:	e03fff8d 	sth	zero,-2(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 8021ab0:	00001106 	br	8021af8 <alt_msgdma_descriptor_async_transfer+0x1f0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 8021ab4:	01000044 	movi	r4,1
 8021ab8:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021abc:	e0bfff8b 	ldhu	r2,-2(fp)
 8021ac0:	1084e230 	cmpltui	r2,r2,5000
 8021ac4:	1000091e 	bne	r2,zero,8021aec <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
 8021ac8:	01020174 	movhi	r4,2053
 8021acc:	2106f804 	addi	r4,r4,7136
 8021ad0:	803b4d00 	call	803b4d0 <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8021ad4:	e0bff117 	ldw	r2,-60(fp)
 8021ad8:	10801817 	ldw	r2,96(r2)
 8021adc:	1009883a 	mov	r4,r2
 8021ae0:	8016c4c0 	call	8016c4c <OSSemPost>
                
                return -ETIME;
 8021ae4:	00bff084 	movi	r2,-62
 8021ae8:	00005306 	br	8021c38 <alt_msgdma_descriptor_async_transfer+0x330>
            }
            counter++; 
 8021aec:	e0bfff8b 	ldhu	r2,-2(fp)
 8021af0:	10800044 	addi	r2,r2,1
 8021af4:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
 8021af8:	e0bff117 	ldw	r2,-60(fp)
 8021afc:	10c00317 	ldw	r3,12(r2)
 8021b00:	e0bff117 	ldw	r2,-60(fp)
 8021b04:	10800417 	ldw	r2,16(r2)
 8021b08:	e1bfef17 	ldw	r6,-68(fp)
 8021b0c:	100b883a 	mov	r5,r2
 8021b10:	1809883a 	mov	r4,r3
 8021b14:	80214740 	call	8021474 <alt_msgdma_write_extended_descriptor>
 8021b18:	103fe61e 	bne	r2,zero,8021ab4 <alt_msgdma_descriptor_async_transfer+0x1ac>
    else if (NULL == standard_desc && NULL != extended_desc)
 8021b1c:	00000606 	br	8021b38 <alt_msgdma_descriptor_async_transfer+0x230>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 8021b20:	e0bff117 	ldw	r2,-60(fp)
 8021b24:	10801817 	ldw	r2,96(r2)
 8021b28:	1009883a 	mov	r4,r2
 8021b2c:	8016c4c0 	call	8016c4c <OSSemPost>
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 8021b30:	00bfffc4 	movi	r2,-1
 8021b34:	00004006 	br	8021c38 <alt_msgdma_descriptor_async_transfer+0x330>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
 8021b38:	e0bff117 	ldw	r2,-60(fp)
 8021b3c:	10800b17 	ldw	r2,44(r2)
 8021b40:	10001c26 	beq	r2,zero,8021bb4 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
 8021b44:	e0bff117 	ldw	r2,-60(fp)
 8021b48:	10c00d17 	ldw	r3,52(r2)
 8021b4c:	e0bffe17 	ldw	r2,-8(fp)
 8021b50:	1884b03a 	or	r2,r3,r2
 8021b54:	10800514 	ori	r2,r2,20
 8021b58:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 8021b5c:	e0fffe17 	ldw	r3,-8(fp)
 8021b60:	00bff7c4 	movi	r2,-33
 8021b64:	1884703a 	and	r2,r3,r2
 8021b68:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8021b6c:	0005303a 	rdctl	r2,status
 8021b70:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8021b74:	e0fff517 	ldw	r3,-44(fp)
 8021b78:	00bfff84 	movi	r2,-2
 8021b7c:	1884703a 	and	r2,r3,r2
 8021b80:	1001703a 	wrctl	status,r2
  return context;
 8021b84:	e0bff517 	ldw	r2,-44(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 8021b88:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8021b8c:	e0bff117 	ldw	r2,-60(fp)
 8021b90:	10800317 	ldw	r2,12(r2)
 8021b94:	10800104 	addi	r2,r2,4
 8021b98:	e0fffe17 	ldw	r3,-8(fp)
 8021b9c:	10c00035 	stwio	r3,0(r2)
 8021ba0:	e0bffd17 	ldw	r2,-12(fp)
 8021ba4:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8021ba8:	e0bff617 	ldw	r2,-40(fp)
 8021bac:	1001703a 	wrctl	status,r2
}
 8021bb0:	00001c06 	br	8021c24 <alt_msgdma_descriptor_async_transfer+0x31c>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
 8021bb4:	e0bff117 	ldw	r2,-60(fp)
 8021bb8:	10c00d17 	ldw	r3,52(r2)
 8021bbc:	e0bffe17 	ldw	r2,-8(fp)
 8021bc0:	1884b03a 	or	r2,r3,r2
 8021bc4:	10800114 	ori	r2,r2,4
 8021bc8:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
 8021bcc:	e0fffe17 	ldw	r3,-8(fp)
 8021bd0:	00bff3c4 	movi	r2,-49
 8021bd4:	1884703a 	and	r2,r3,r2
 8021bd8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8021bdc:	0005303a 	rdctl	r2,status
 8021be0:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8021be4:	e0fff317 	ldw	r3,-52(fp)
 8021be8:	00bfff84 	movi	r2,-2
 8021bec:	1884703a 	and	r2,r3,r2
 8021bf0:	1001703a 	wrctl	status,r2
  return context;
 8021bf4:	e0bff317 	ldw	r2,-52(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
 8021bf8:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8021bfc:	e0bff117 	ldw	r2,-60(fp)
 8021c00:	10800317 	ldw	r2,12(r2)
 8021c04:	10800104 	addi	r2,r2,4
 8021c08:	e0fffe17 	ldw	r3,-8(fp)
 8021c0c:	10c00035 	stwio	r3,0(r2)
 8021c10:	e0bffd17 	ldw	r2,-12(fp)
 8021c14:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 8021c18:	e0bff417 	ldw	r2,-48(fp)
 8021c1c:	1001703a 	wrctl	status,r2
}
 8021c20:	0001883a 	nop

    /*
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
 8021c24:	e0bff117 	ldw	r2,-60(fp)
 8021c28:	10801817 	ldw	r2,96(r2)
 8021c2c:	1009883a 	mov	r4,r2
 8021c30:	8016c4c0 	call	8016c4c <OSSemPost>
    
    return 0;
 8021c34:	0005883a 	mov	r2,zero
}
 8021c38:	e037883a 	mov	sp,fp
 8021c3c:	dfc00117 	ldw	ra,4(sp)
 8021c40:	df000017 	ldw	fp,0(sp)
 8021c44:	dec00204 	addi	sp,sp,8
 8021c48:	f800283a 	ret

08021c4c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 8021c4c:	deffed04 	addi	sp,sp,-76
 8021c50:	dfc01215 	stw	ra,72(sp)
 8021c54:	df001115 	stw	fp,68(sp)
 8021c58:	df001104 	addi	fp,sp,68
 8021c5c:	e13ff115 	stw	r4,-60(fp)
 8021c60:	e17ff015 	stw	r5,-64(fp)
 8021c64:	e1bfef15 	stw	r6,-68(fp)
    alt_u32 control=0;
 8021c68:	e03ffb15 	stw	zero,-20(fp)
    alt_irq_context context=0;
 8021c6c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 csr_status = 0;
 8021c70:	e03fff15 	stw	zero,-4(fp)
    alt_u16 counter = 0;
 8021c74:	e03ffe8d 	sth	zero,-6(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021c78:	e0bff117 	ldw	r2,-60(fp)
 8021c7c:	10800317 	ldw	r2,12(r2)
 8021c80:	10800204 	addi	r2,r2,8
 8021c84:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
 8021c88:	10bfffcc 	andi	r2,r2,65535
 8021c8c:	e0bffd15 	stw	r2,-12(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021c90:	e0bff117 	ldw	r2,-60(fp)
 8021c94:	10800317 	ldw	r2,12(r2)
 8021c98:	10800204 	addi	r2,r2,8
 8021c9c:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8021ca0:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
 8021ca4:	10bfffcc 	andi	r2,r2,65535
 8021ca8:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
 8021cac:	00807804 	movi	r2,480
 8021cb0:	e0bff915 	stw	r2,-28(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8021cb4:	00001a06 	br	8021d20 <alt_msgdma_descriptor_sync_transfer+0xd4>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
 8021cb8:	01000044 	movi	r4,1
 8021cbc:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021cc0:	e0bffe8b 	ldhu	r2,-6(fp)
 8021cc4:	1084e230 	cmpltui	r2,r2,5000
 8021cc8:	1000051e 	bne	r2,zero,8021ce0 <alt_msgdma_descriptor_sync_transfer+0x94>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
 8021ccc:	01020174 	movhi	r4,2053
 8021cd0:	21070e04 	addi	r4,r4,7224
 8021cd4:	803b4d00 	call	803b4d0 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
 8021cd8:	00bff084 	movi	r2,-62
 8021cdc:	0000da06 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
        }
        counter++;  
 8021ce0:	e0bffe8b 	ldhu	r2,-6(fp)
 8021ce4:	10800044 	addi	r2,r2,1
 8021ce8:	e0bffe8d 	sth	r2,-6(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021cec:	e0bff117 	ldw	r2,-60(fp)
 8021cf0:	10800317 	ldw	r2,12(r2)
 8021cf4:	10800204 	addi	r2,r2,8
 8021cf8:	10800037 	ldwio	r2,0(r2)
        fifo_read_fill_level = (
 8021cfc:	10bfffcc 	andi	r2,r2,65535
 8021d00:	e0bffd15 	stw	r2,-12(fp)
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 8021d04:	e0bff117 	ldw	r2,-60(fp)
 8021d08:	10800317 	ldw	r2,12(r2)
 8021d0c:	10800204 	addi	r2,r2,8
 8021d10:	10800037 	ldwio	r2,0(r2)
            ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
 8021d14:	1004d43a 	srli	r2,r2,16
        fifo_write_fill_level = (
 8021d18:	10bfffcc 	andi	r2,r2,65535
 8021d1c:	e0bffc15 	stw	r2,-16(fp)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8021d20:	e0bff117 	ldw	r2,-60(fp)
 8021d24:	10800917 	ldw	r2,36(r2)
 8021d28:	e0fffc17 	ldw	r3,-16(fp)
 8021d2c:	18bfe22e 	bgeu	r3,r2,8021cb8 <alt_msgdma_descriptor_sync_transfer+0x6c>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 8021d30:	e0bff117 	ldw	r2,-60(fp)
 8021d34:	10800917 	ldw	r2,36(r2)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 8021d38:	e0fffd17 	ldw	r3,-12(fp)
 8021d3c:	18bfde2e 	bgeu	r3,r2,8021cb8 <alt_msgdma_descriptor_sync_transfer+0x6c>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
 8021d40:	e0bff117 	ldw	r2,-60(fp)
 8021d44:	10801817 	ldw	r2,96(r2)
 8021d48:	e0bff715 	stw	r2,-36(fp)
 8021d4c:	e03ff68d 	sth	zero,-38(fp)
 8021d50:	e0bff68b 	ldhu	r2,-38(fp)
 8021d54:	e0fff2c4 	addi	r3,fp,-53
 8021d58:	180d883a 	mov	r6,r3
 8021d5c:	100b883a 	mov	r5,r2
 8021d60:	e13ff717 	ldw	r4,-36(fp)
 8021d64:	80168c40 	call	80168c4 <OSSemPend>
  NIOS2_READ_STATUS (context);
 8021d68:	0005303a 	rdctl	r2,status
 8021d6c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8021d70:	e0fff817 	ldw	r3,-32(fp)
 8021d74:	00bfff84 	movi	r2,-2
 8021d78:	1884703a 	and	r2,r3,r2
 8021d7c:	1001703a 	wrctl	status,r2
  return context;
 8021d80:	e0bff817 	ldw	r2,-32(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 8021d84:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 8021d88:	e0bff117 	ldw	r2,-60(fp)
 8021d8c:	10800317 	ldw	r2,12(r2)
 8021d90:	10800104 	addi	r2,r2,4
 8021d94:	00c00804 	movi	r3,32
 8021d98:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 8021d9c:	e0bff117 	ldw	r2,-60(fp)
 8021da0:	10800317 	ldw	r2,12(r2)
 8021da4:	e0fff117 	ldw	r3,-60(fp)
 8021da8:	18c00317 	ldw	r3,12(r3)
 8021dac:	18c00037 	ldwio	r3,0(r3)
 8021db0:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
 8021db4:	e0bff017 	ldw	r2,-64(fp)
 8021db8:	10001f26 	beq	r2,zero,8021e38 <alt_msgdma_descriptor_sync_transfer+0x1ec>
 8021dbc:	e0bfef17 	ldw	r2,-68(fp)
 8021dc0:	10001d1e 	bne	r2,zero,8021e38 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
 8021dc4:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 8021dc8:	00001106 	br	8021e10 <alt_msgdma_descriptor_sync_transfer+0x1c4>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
 8021dcc:	01000044 	movi	r4,1
 8021dd0:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021dd4:	e0bffe8b 	ldhu	r2,-6(fp)
 8021dd8:	1084e230 	cmpltui	r2,r2,5000
 8021ddc:	1000091e 	bne	r2,zero,8021e04 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
 8021de0:	01020174 	movhi	r4,2053
 8021de4:	21072204 	addi	r4,r4,7304
 8021de8:	803b4d00 	call	803b4d0 <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8021dec:	e0bff117 	ldw	r2,-60(fp)
 8021df0:	10801817 	ldw	r2,96(r2)
 8021df4:	1009883a 	mov	r4,r2
 8021df8:	8016c4c0 	call	8016c4c <OSSemPost>
                
                return -ETIME;
 8021dfc:	00bff084 	movi	r2,-62
 8021e00:	00009106 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
            }
            counter++;    
 8021e04:	e0bffe8b 	ldhu	r2,-6(fp)
 8021e08:	10800044 	addi	r2,r2,1
 8021e0c:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
 8021e10:	e0bff117 	ldw	r2,-60(fp)
 8021e14:	10c00317 	ldw	r3,12(r2)
 8021e18:	e0bff117 	ldw	r2,-60(fp)
 8021e1c:	10800417 	ldw	r2,16(r2)
 8021e20:	e1bff017 	ldw	r6,-64(fp)
 8021e24:	100b883a 	mov	r5,r2
 8021e28:	1809883a 	mov	r4,r3
 8021e2c:	80213e00 	call	80213e0 <alt_msgdma_write_standard_descriptor>
 8021e30:	103fe61e 	bne	r2,zero,8021dcc <alt_msgdma_descriptor_sync_transfer+0x180>
    if (NULL != standard_desc && NULL == extended_desc)
 8021e34:	00002706 	br	8021ed4 <alt_msgdma_descriptor_sync_transfer+0x288>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 8021e38:	e0bff017 	ldw	r2,-64(fp)
 8021e3c:	10001f1e 	bne	r2,zero,8021ebc <alt_msgdma_descriptor_sync_transfer+0x270>
 8021e40:	e0bfef17 	ldw	r2,-68(fp)
 8021e44:	10001d26 	beq	r2,zero,8021ebc <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
 8021e48:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 8021e4c:	00001106 	br	8021e94 <alt_msgdma_descriptor_sync_transfer+0x248>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 8021e50:	01000044 	movi	r4,1
 8021e54:	803a8c40 	call	803a8c4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021e58:	e0bffe8b 	ldhu	r2,-6(fp)
 8021e5c:	1084e230 	cmpltui	r2,r2,5000
 8021e60:	1000091e 	bne	r2,zero,8021e88 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
 8021e64:	01020174 	movhi	r4,2053
 8021e68:	21073304 	addi	r4,r4,7372
 8021e6c:	803b4d00 	call	803b4d0 <alt_printf>
                /*
                * Now that access to the registers is complete, release the 
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
 8021e70:	e0bff117 	ldw	r2,-60(fp)
 8021e74:	10801817 	ldw	r2,96(r2)
 8021e78:	1009883a 	mov	r4,r2
 8021e7c:	8016c4c0 	call	8016c4c <OSSemPost>
                
                return -ETIME;
 8021e80:	00bff084 	movi	r2,-62
 8021e84:	00007006 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
            }
            counter++;
 8021e88:	e0bffe8b 	ldhu	r2,-6(fp)
 8021e8c:	10800044 	addi	r2,r2,1
 8021e90:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
 8021e94:	e0bff117 	ldw	r2,-60(fp)
 8021e98:	10c00317 	ldw	r3,12(r2)
 8021e9c:	e0bff117 	ldw	r2,-60(fp)
 8021ea0:	10800417 	ldw	r2,16(r2)
 8021ea4:	e1bfef17 	ldw	r6,-68(fp)
 8021ea8:	100b883a 	mov	r5,r2
 8021eac:	1809883a 	mov	r4,r3
 8021eb0:	80214740 	call	8021474 <alt_msgdma_write_extended_descriptor>
 8021eb4:	103fe61e 	bne	r2,zero,8021e50 <alt_msgdma_descriptor_sync_transfer+0x204>
    else if (NULL == standard_desc && NULL != extended_desc)
 8021eb8:	00000606 	br	8021ed4 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 8021ebc:	e0bff117 	ldw	r2,-60(fp)
 8021ec0:	10801817 	ldw	r2,96(r2)
 8021ec4:	1009883a 	mov	r4,r2
 8021ec8:	8016c4c0 	call	8016c4c <OSSemPost>
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 8021ecc:	00bfffc4 	movi	r2,-1
 8021ed0:	00005d06 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 8021ed4:	e0bff117 	ldw	r2,-60(fp)
 8021ed8:	10800317 	ldw	r2,12(r2)
 8021edc:	10800104 	addi	r2,r2,4
 8021ee0:	e0fff117 	ldw	r3,-60(fp)
 8021ee4:	19000d17 	ldw	r4,52(r3)
 8021ee8:	00fff2c4 	movi	r3,-53
 8021eec:	20c6703a 	and	r3,r4,r3
 8021ef0:	18c00114 	ori	r3,r3,4
 8021ef4:	10c00035 	stwio	r3,0(r2)
 8021ef8:	e0bffa17 	ldw	r2,-24(fp)
 8021efc:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 8021f00:	e0bff517 	ldw	r2,-44(fp)
 8021f04:	1001703a 	wrctl	status,r2
}
 8021f08:	0001883a 	nop
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
 8021f0c:	e03ffe8d 	sth	zero,-6(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 8021f10:	e0bff117 	ldw	r2,-60(fp)
 8021f14:	10800317 	ldw	r2,12(r2)
 8021f18:	10800037 	ldwio	r2,0(r2)
 8021f1c:	e0bfff15 	stw	r2,-4(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 8021f20:	00001506 	br	8021f78 <alt_msgdma_descriptor_sync_transfer+0x32c>
    {
        alt_busy_sleep(1); /* delay 1us */
 8021f24:	01000044 	movi	r4,1
 8021f28:	803a8c40 	call	803a8c4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 8021f2c:	e0bffe8b 	ldhu	r2,-6(fp)
 8021f30:	1084e230 	cmpltui	r2,r2,5000
 8021f34:	1000091e 	bne	r2,zero,8021f5c <alt_msgdma_descriptor_sync_transfer+0x310>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
 8021f38:	01020174 	movhi	r4,2053
 8021f3c:	21074404 	addi	r4,r4,7440
 8021f40:	803b4d00 	call	803b4d0 <alt_printf>
            
            /*
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
 8021f44:	e0bff117 	ldw	r2,-60(fp)
 8021f48:	10801817 	ldw	r2,96(r2)
 8021f4c:	1009883a 	mov	r4,r2
 8021f50:	8016c4c0 	call	8016c4c <OSSemPost>
            
            return -ETIME;
 8021f54:	00bff084 	movi	r2,-62
 8021f58:	00003b06 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
        }
        counter++;
 8021f5c:	e0bffe8b 	ldhu	r2,-6(fp)
 8021f60:	10800044 	addi	r2,r2,1
 8021f64:	e0bffe8d 	sth	r2,-6(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 8021f68:	e0bff117 	ldw	r2,-60(fp)
 8021f6c:	10800317 	ldw	r2,12(r2)
 8021f70:	10800037 	ldwio	r2,0(r2)
 8021f74:	e0bfff15 	stw	r2,-4(fp)
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 8021f78:	e0ffff17 	ldw	r3,-4(fp)
 8021f7c:	e0bff917 	ldw	r2,-28(fp)
 8021f80:	1884703a 	and	r2,r3,r2
 8021f84:	1000031e 	bne	r2,zero,8021f94 <alt_msgdma_descriptor_sync_transfer+0x348>
 8021f88:	e0bfff17 	ldw	r2,-4(fp)
 8021f8c:	1080004c 	andi	r2,r2,1
 8021f90:	103fe41e 	bne	r2,zero,8021f24 <alt_msgdma_descriptor_sync_transfer+0x2d8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
 8021f94:	e0ffff17 	ldw	r3,-4(fp)
 8021f98:	e0bff917 	ldw	r2,-28(fp)
 8021f9c:	1884703a 	and	r2,r3,r2
 8021fa0:	10000626 	beq	r2,zero,8021fbc <alt_msgdma_descriptor_sync_transfer+0x370>
    {
        /*
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
 8021fa4:	e0bff117 	ldw	r2,-60(fp)
 8021fa8:	10801817 	ldw	r2,96(r2)
 8021fac:	1009883a 	mov	r4,r2
 8021fb0:	8016c4c0 	call	8016c4c <OSSemPost>
        
        return error;
 8021fb4:	e0bff917 	ldw	r2,-28(fp)
 8021fb8:	00002306 	br	8022048 <alt_msgdma_descriptor_sync_transfer+0x3fc>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
 8021fbc:	e0bff117 	ldw	r2,-60(fp)
 8021fc0:	10800317 	ldw	r2,12(r2)
 8021fc4:	10800104 	addi	r2,r2,4
 8021fc8:	10800037 	ldwio	r2,0(r2)
 8021fcc:	10800814 	ori	r2,r2,32
 8021fd0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_READ_STATUS (context);
 8021fd4:	0005303a 	rdctl	r2,status
 8021fd8:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8021fdc:	e0fff317 	ldw	r3,-52(fp)
 8021fe0:	00bfff84 	movi	r2,-2
 8021fe4:	1884703a 	and	r2,r3,r2
 8021fe8:	1001703a 	wrctl	status,r2
  return context;
 8021fec:	e0bff317 	ldw	r2,-52(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
 8021ff0:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 8021ff4:	e0bff117 	ldw	r2,-60(fp)
 8021ff8:	10800317 	ldw	r2,12(r2)
 8021ffc:	10800104 	addi	r2,r2,4
 8022000:	e0fffb17 	ldw	r3,-20(fp)
 8022004:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 8022008:	e0bff117 	ldw	r2,-60(fp)
 802200c:	10800317 	ldw	r2,12(r2)
 8022010:	e0fff117 	ldw	r3,-60(fp)
 8022014:	18c00317 	ldw	r3,12(r3)
 8022018:	18c00037 	ldwio	r3,0(r3)
 802201c:	10c00035 	stwio	r3,0(r2)
 8022020:	e0bffa17 	ldw	r2,-24(fp)
 8022024:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 8022028:	e0bff417 	ldw	r2,-48(fp)
 802202c:	1001703a 	wrctl	status,r2
}
 8022030:	0001883a 	nop

    /*
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
 8022034:	e0bff117 	ldw	r2,-60(fp)
 8022038:	10801817 	ldw	r2,96(r2)
 802203c:	1009883a 	mov	r4,r2
 8022040:	8016c4c0 	call	8016c4c <OSSemPost>
    
    return 0;
 8022044:	0005883a 	mov	r2,zero

}
 8022048:	e037883a 	mov	sp,fp
 802204c:	dfc00117 	ldw	ra,4(sp)
 8022050:	df000017 	ldw	fp,0(sp)
 8022054:	dec00204 	addi	sp,sp,8
 8022058:	f800283a 	ret

0802205c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
 802205c:	defff804 	addi	sp,sp,-32
 8022060:	dfc00715 	stw	ra,28(sp)
 8022064:	df000615 	stw	fp,24(sp)
 8022068:	df000604 	addi	fp,sp,24
 802206c:	e13fff15 	stw	r4,-4(fp)
 8022070:	e17ffe15 	stw	r5,-8(fp)
 8022074:	e1bffd15 	stw	r6,-12(fp)
 8022078:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
 802207c:	e0800217 	ldw	r2,8(fp)
 8022080:	d8800115 	stw	r2,4(sp)
 8022084:	e0bffc17 	ldw	r2,-16(fp)
 8022088:	d8800015 	stw	r2,0(sp)
 802208c:	e1fffd17 	ldw	r7,-12(fp)
 8022090:	000d883a 	mov	r6,zero
 8022094:	e17ffe17 	ldw	r5,-8(fp)
 8022098:	e13fff17 	ldw	r4,-4(fp)
 802209c:	80217280 	call	8021728 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 80220a0:	e037883a 	mov	sp,fp
 80220a4:	dfc00117 	ldw	ra,4(sp)
 80220a8:	df000017 	ldw	fp,0(sp)
 80220ac:	dec00204 	addi	sp,sp,8
 80220b0:	f800283a 	ret

080220b4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
 80220b4:	defff804 	addi	sp,sp,-32
 80220b8:	dfc00715 	stw	ra,28(sp)
 80220bc:	df000615 	stw	fp,24(sp)
 80220c0:	df000604 	addi	fp,sp,24
 80220c4:	e13fff15 	stw	r4,-4(fp)
 80220c8:	e17ffe15 	stw	r5,-8(fp)
 80220cc:	e1bffd15 	stw	r6,-12(fp)
 80220d0:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 80220d4:	e0800217 	ldw	r2,8(fp)
 80220d8:	d8800115 	stw	r2,4(sp)
 80220dc:	e0bffc17 	ldw	r2,-16(fp)
 80220e0:	d8800015 	stw	r2,0(sp)
 80220e4:	000f883a 	mov	r7,zero
 80220e8:	e1bffd17 	ldw	r6,-12(fp)
 80220ec:	e17ffe17 	ldw	r5,-8(fp)
 80220f0:	e13fff17 	ldw	r4,-4(fp)
 80220f4:	80217280 	call	8021728 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
 80220f8:	e037883a 	mov	sp,fp
 80220fc:	dfc00117 	ldw	ra,4(sp)
 8022100:	df000017 	ldw	fp,0(sp)
 8022104:	dec00204 	addi	sp,sp,8
 8022108:	f800283a 	ret

0802210c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 802210c:	defff804 	addi	sp,sp,-32
 8022110:	dfc00715 	stw	ra,28(sp)
 8022114:	df000615 	stw	fp,24(sp)
 8022118:	df000604 	addi	fp,sp,24
 802211c:	e13fff15 	stw	r4,-4(fp)
 8022120:	e17ffe15 	stw	r5,-8(fp)
 8022124:	e1bffd15 	stw	r6,-12(fp)
 8022128:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 802212c:	e0800317 	ldw	r2,12(fp)
 8022130:	d8800115 	stw	r2,4(sp)
 8022134:	e0800217 	ldw	r2,8(fp)
 8022138:	d8800015 	stw	r2,0(sp)
 802213c:	e1fffc17 	ldw	r7,-16(fp)
 8022140:	e1bffd17 	ldw	r6,-12(fp)
 8022144:	e17ffe17 	ldw	r5,-8(fp)
 8022148:	e13fff17 	ldw	r4,-4(fp)
 802214c:	80217280 	call	8021728 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 8022150:	e037883a 	mov	sp,fp
 8022154:	dfc00117 	ldw	ra,4(sp)
 8022158:	df000017 	ldw	fp,0(sp)
 802215c:	dec00204 	addi	sp,sp,8
 8022160:	f800283a 	ret

08022164 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
 8022164:	defff004 	addi	sp,sp,-64
 8022168:	dfc00f15 	stw	ra,60(sp)
 802216c:	df000e15 	stw	fp,56(sp)
 8022170:	df000e04 	addi	fp,sp,56
 8022174:	e13fff15 	stw	r4,-4(fp)
 8022178:	e17ffe15 	stw	r5,-8(fp)
 802217c:	e1bffd15 	stw	r6,-12(fp)
 8022180:	e1fffc15 	stw	r7,-16(fp)
 8022184:	e1000317 	ldw	r4,12(fp)
 8022188:	e0c00417 	ldw	r3,16(fp)
 802218c:	e0800517 	ldw	r2,20(fp)
 8022190:	e13ffb0d 	sth	r4,-20(fp)
 8022194:	e0fffa05 	stb	r3,-24(fp)
 8022198:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 802219c:	e0bffb0b 	ldhu	r2,-20(fp)
 80221a0:	e0fffa03 	ldbu	r3,-24(fp)
 80221a4:	e13ff90b 	ldhu	r4,-28(fp)
 80221a8:	d9000615 	stw	r4,24(sp)
 80221ac:	d8000515 	stw	zero,20(sp)
 80221b0:	d8c00415 	stw	r3,16(sp)
 80221b4:	d8000315 	stw	zero,12(sp)
 80221b8:	d8800215 	stw	r2,8(sp)
 80221bc:	e0800217 	ldw	r2,8(fp)
 80221c0:	d8800115 	stw	r2,4(sp)
 80221c4:	e0bffc17 	ldw	r2,-16(fp)
 80221c8:	d8800015 	stw	r2,0(sp)
 80221cc:	e1fffd17 	ldw	r7,-12(fp)
 80221d0:	000d883a 	mov	r6,zero
 80221d4:	e17ffe17 	ldw	r5,-8(fp)
 80221d8:	e13fff17 	ldw	r4,-4(fp)
 80221dc:	80217b40 	call	80217b4 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
 80221e0:	e037883a 	mov	sp,fp
 80221e4:	dfc00117 	ldw	ra,4(sp)
 80221e8:	df000017 	ldw	fp,0(sp)
 80221ec:	dec00204 	addi	sp,sp,8
 80221f0:	f800283a 	ret

080221f4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 80221f4:	defff004 	addi	sp,sp,-64
 80221f8:	dfc00f15 	stw	ra,60(sp)
 80221fc:	df000e15 	stw	fp,56(sp)
 8022200:	df000e04 	addi	fp,sp,56
 8022204:	e13fff15 	stw	r4,-4(fp)
 8022208:	e17ffe15 	stw	r5,-8(fp)
 802220c:	e1bffd15 	stw	r6,-12(fp)
 8022210:	e1fffc15 	stw	r7,-16(fp)
 8022214:	e1000317 	ldw	r4,12(fp)
 8022218:	e0c00417 	ldw	r3,16(fp)
 802221c:	e0800517 	ldw	r2,20(fp)
 8022220:	e13ffb0d 	sth	r4,-20(fp)
 8022224:	e0fffa05 	stb	r3,-24(fp)
 8022228:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
 802222c:	e0bffb0b 	ldhu	r2,-20(fp)
 8022230:	e0fffa03 	ldbu	r3,-24(fp)
 8022234:	e13ff90b 	ldhu	r4,-28(fp)
 8022238:	d8000615 	stw	zero,24(sp)
 802223c:	d9000515 	stw	r4,20(sp)
 8022240:	d8000415 	stw	zero,16(sp)
 8022244:	d8c00315 	stw	r3,12(sp)
 8022248:	d8800215 	stw	r2,8(sp)
 802224c:	e0800217 	ldw	r2,8(fp)
 8022250:	d8800115 	stw	r2,4(sp)
 8022254:	e0bffc17 	ldw	r2,-16(fp)
 8022258:	d8800015 	stw	r2,0(sp)
 802225c:	000f883a 	mov	r7,zero
 8022260:	e1bffd17 	ldw	r6,-12(fp)
 8022264:	e17ffe17 	ldw	r5,-8(fp)
 8022268:	e13fff17 	ldw	r4,-4(fp)
 802226c:	80217b40 	call	80217b4 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
 8022270:	e037883a 	mov	sp,fp
 8022274:	dfc00117 	ldw	ra,4(sp)
 8022278:	df000017 	ldw	fp,0(sp)
 802227c:	dec00204 	addi	sp,sp,8
 8022280:	f800283a 	ret

08022284 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 8022284:	deffee04 	addi	sp,sp,-72
 8022288:	dfc01115 	stw	ra,68(sp)
 802228c:	df001015 	stw	fp,64(sp)
 8022290:	df001004 	addi	fp,sp,64
 8022294:	e13fff15 	stw	r4,-4(fp)
 8022298:	e17ffe15 	stw	r5,-8(fp)
 802229c:	e1bffd15 	stw	r6,-12(fp)
 80222a0:	e1fffc15 	stw	r7,-16(fp)
 80222a4:	e1800417 	ldw	r6,16(fp)
 80222a8:	e1400517 	ldw	r5,20(fp)
 80222ac:	e1000617 	ldw	r4,24(fp)
 80222b0:	e0c00717 	ldw	r3,28(fp)
 80222b4:	e0800817 	ldw	r2,32(fp)
 80222b8:	e1bffb0d 	sth	r6,-20(fp)
 80222bc:	e17ffa05 	stb	r5,-24(fp)
 80222c0:	e13ff905 	stb	r4,-28(fp)
 80222c4:	e0fff80d 	sth	r3,-32(fp)
 80222c8:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 80222cc:	e0bffb0b 	ldhu	r2,-20(fp)
 80222d0:	e0fffa03 	ldbu	r3,-24(fp)
 80222d4:	e13ff903 	ldbu	r4,-28(fp)
 80222d8:	e17ff80b 	ldhu	r5,-32(fp)
 80222dc:	e1bff70b 	ldhu	r6,-36(fp)
 80222e0:	d9800615 	stw	r6,24(sp)
 80222e4:	d9400515 	stw	r5,20(sp)
 80222e8:	d9000415 	stw	r4,16(sp)
 80222ec:	d8c00315 	stw	r3,12(sp)
 80222f0:	d8800215 	stw	r2,8(sp)
 80222f4:	e0800317 	ldw	r2,12(fp)
 80222f8:	d8800115 	stw	r2,4(sp)
 80222fc:	e0800217 	ldw	r2,8(fp)
 8022300:	d8800015 	stw	r2,0(sp)
 8022304:	e1fffc17 	ldw	r7,-16(fp)
 8022308:	e1bffd17 	ldw	r6,-12(fp)
 802230c:	e17ffe17 	ldw	r5,-8(fp)
 8022310:	e13fff17 	ldw	r4,-4(fp)
 8022314:	80217b40 	call	80217b4 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 8022318:	e037883a 	mov	sp,fp
 802231c:	dfc00117 	ldw	ra,4(sp)
 8022320:	df000017 	ldw	fp,0(sp)
 8022324:	dec00204 	addi	sp,sp,8
 8022328:	f800283a 	ret

0802232c <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 802232c:	defffb04 	addi	sp,sp,-20
 8022330:	df000415 	stw	fp,16(sp)
 8022334:	df000404 	addi	fp,sp,16
 8022338:	e13fff15 	stw	r4,-4(fp)
 802233c:	e17ffe15 	stw	r5,-8(fp)
 8022340:	e1bffd15 	stw	r6,-12(fp)
 8022344:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
 8022348:	e0bfff17 	ldw	r2,-4(fp)
 802234c:	10c01217 	ldw	r3,72(r2)
 8022350:	e0800117 	ldw	r2,4(fp)
 8022354:	18800436 	bltu	r3,r2,8022368 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 8022358:	e0bfff17 	ldw	r2,-4(fp)
 802235c:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
 8022360:	10803fcc 	andi	r2,r2,255
 8022364:	10000226 	beq	r2,zero,8022370 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
 8022368:	00bffa84 	movi	r2,-22
 802236c:	00001406 	br	80223c0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
 8022370:	e0bffe17 	ldw	r2,-8(fp)
 8022374:	e0fffd17 	ldw	r3,-12(fp)
 8022378:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 802237c:	e0bffe17 	ldw	r2,-8(fp)
 8022380:	e0fffc17 	ldw	r3,-16(fp)
 8022384:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 8022388:	e0bffe17 	ldw	r2,-8(fp)
 802238c:	e0c00117 	ldw	r3,4(fp)
 8022390:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
 8022394:	e0fffe17 	ldw	r3,-8(fp)
 8022398:	e0bffe17 	ldw	r2,-8(fp)
 802239c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 80223a0:	e0c00217 	ldw	r3,8(fp)
 80223a4:	00900034 	movhi	r2,16384
 80223a8:	10bfffc4 	addi	r2,r2,-1
 80223ac:	1884703a 	and	r2,r3,r2
 80223b0:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
 80223b4:	e0bffe17 	ldw	r2,-8(fp)
 80223b8:	10c00715 	stw	r3,28(r2)
    
    return 0;
 80223bc:	0005883a 	mov	r2,zero
}
 80223c0:	e037883a 	mov	sp,fp
 80223c4:	df000017 	ldw	fp,0(sp)
 80223c8:	dec00104 	addi	sp,sp,4
 80223cc:	f800283a 	ret

080223d0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 80223d0:	defff404 	addi	sp,sp,-48
 80223d4:	df000b15 	stw	fp,44(sp)
 80223d8:	df000b04 	addi	fp,sp,44
 80223dc:	e13ffd15 	stw	r4,-12(fp)
 80223e0:	e17ffc15 	stw	r5,-16(fp)
 80223e4:	e1bffb15 	stw	r6,-20(fp)
 80223e8:	e1fffa15 	stw	r7,-24(fp)
 80223ec:	e1800517 	ldw	r6,20(fp)
 80223f0:	e1400617 	ldw	r5,24(fp)
 80223f4:	e1000717 	ldw	r4,28(fp)
 80223f8:	e0c00817 	ldw	r3,32(fp)
 80223fc:	e0800917 	ldw	r2,36(fp)
 8022400:	e1bff90d 	sth	r6,-28(fp)
 8022404:	e17ff805 	stb	r5,-32(fp)
 8022408:	e13ff705 	stb	r4,-36(fp)
 802240c:	e0fff60d 	sth	r3,-40(fp)
 8022410:	e0bff50d 	sth	r2,-44(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
 8022414:	e0bffd17 	ldw	r2,-12(fp)
 8022418:	10c01217 	ldw	r3,72(r2)
 802241c:	e0800317 	ldw	r2,12(fp)
 8022420:	18801936 	bltu	r3,r2,8022488 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 8022424:	e13ffd17 	ldw	r4,-12(fp)
 8022428:	20801317 	ldw	r2,76(r4)
 802242c:	20c01417 	ldw	r3,80(r4)
 8022430:	e13ff60b 	ldhu	r4,-40(fp)
 8022434:	213fffcc 	andi	r4,r4,65535
 8022438:	2015883a 	mov	r10,r4
 802243c:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
 8022440:	1ac01136 	bltu	r3,r11,8022488 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 8022444:	58c0011e 	bne	r11,r3,802244c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
 8022448:	12800f36 	bltu	r2,r10,8022488 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
 802244c:	e13ffd17 	ldw	r4,-12(fp)
 8022450:	20801317 	ldw	r2,76(r4)
 8022454:	20c01417 	ldw	r3,80(r4)
 8022458:	e13ff50b 	ldhu	r4,-44(fp)
 802245c:	213fffcc 	andi	r4,r4,65535
 8022460:	2011883a 	mov	r8,r4
 8022464:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
 8022468:	1a400736 	bltu	r3,r9,8022488 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 802246c:	48c0011e 	bne	r9,r3,8022474 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
 8022470:	12000536 	bltu	r2,r8,8022488 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
 8022474:	e0bffd17 	ldw	r2,-12(fp)
 8022478:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
 802247c:	10803fcc 	andi	r2,r2,255
 8022480:	10800060 	cmpeqi	r2,r2,1
 8022484:	1000021e 	bne	r2,zero,8022490 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
 8022488:	00bffa84 	movi	r2,-22
 802248c:	00003106 	br	8022554 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
 8022490:	e0bffc17 	ldw	r2,-16(fp)
 8022494:	e0fffb17 	ldw	r3,-20(fp)
 8022498:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
 802249c:	e0bffc17 	ldw	r2,-16(fp)
 80224a0:	e0fffa17 	ldw	r3,-24(fp)
 80224a4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
 80224a8:	e0bffc17 	ldw	r2,-16(fp)
 80224ac:	e0c00117 	ldw	r3,4(fp)
 80224b0:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
 80224b4:	e0bffc17 	ldw	r2,-16(fp)
 80224b8:	e0c00217 	ldw	r3,8(fp)
 80224bc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 80224c0:	e0bffc17 	ldw	r2,-16(fp)
 80224c4:	e0c00317 	ldw	r3,12(fp)
 80224c8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 80224cc:	e0bffc17 	ldw	r2,-16(fp)
 80224d0:	e0fff90b 	ldhu	r3,-28(fp)
 80224d4:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
 80224d8:	e0bffc17 	ldw	r2,-16(fp)
 80224dc:	e0fff803 	ldbu	r3,-32(fp)
 80224e0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
 80224e4:	e0bffc17 	ldw	r2,-16(fp)
 80224e8:	e0fff703 	ldbu	r3,-36(fp)
 80224ec:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
 80224f0:	e0bffc17 	ldw	r2,-16(fp)
 80224f4:	e0fff60b 	ldhu	r3,-40(fp)
 80224f8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
 80224fc:	e0bffc17 	ldw	r2,-16(fp)
 8022500:	e0fff50b 	ldhu	r3,-44(fp)
 8022504:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
 8022508:	e0bffc17 	ldw	r2,-16(fp)
 802250c:	1019883a 	mov	r12,r2
 8022510:	001b883a 	mov	r13,zero
 8022514:	e33ffe15 	stw	r12,-8(fp)
 8022518:	e37fff15 	stw	r13,-4(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
 802251c:	e0fffe17 	ldw	r3,-8(fp)
 8022520:	e0bffc17 	ldw	r2,-16(fp)
 8022524:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
 8022528:	e0ffff17 	ldw	r3,-4(fp)
 802252c:	e0bffc17 	ldw	r2,-16(fp)
 8022530:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 8022534:	e0c00417 	ldw	r3,16(fp)
 8022538:	00900034 	movhi	r2,16384
 802253c:	10bfffc4 	addi	r2,r2,-1
 8022540:	1884703a 	and	r2,r3,r2
 8022544:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
 8022548:	e0bffc17 	ldw	r2,-16(fp)
 802254c:	10c00f15 	stw	r3,60(r2)

  return 0 ;
 8022550:	0005883a 	mov	r2,zero
}
 8022554:	e037883a 	mov	sp,fp
 8022558:	df000017 	ldw	fp,0(sp)
 802255c:	dec00104 	addi	sp,sp,4
 8022560:	f800283a 	ret

08022564 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
 8022564:	defff804 	addi	sp,sp,-32
 8022568:	dfc00715 	stw	ra,28(sp)
 802256c:	df000615 	stw	fp,24(sp)
 8022570:	df000604 	addi	fp,sp,24
 8022574:	e13fff15 	stw	r4,-4(fp)
 8022578:	e17ffe15 	stw	r5,-8(fp)
 802257c:	e1bffd15 	stw	r6,-12(fp)
 8022580:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 8022584:	e0800317 	ldw	r2,12(fp)
 8022588:	d8800115 	stw	r2,4(sp)
 802258c:	e0800217 	ldw	r2,8(fp)
 8022590:	d8800015 	stw	r2,0(sp)
 8022594:	e1fffc17 	ldw	r7,-16(fp)
 8022598:	e1bffd17 	ldw	r6,-12(fp)
 802259c:	e17ffe17 	ldw	r5,-8(fp)
 80225a0:	e13fff17 	ldw	r4,-4(fp)
 80225a4:	802232c0 	call	802232c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
 80225a8:	e037883a 	mov	sp,fp
 80225ac:	dfc00117 	ldw	ra,4(sp)
 80225b0:	df000017 	ldw	fp,0(sp)
 80225b4:	dec00204 	addi	sp,sp,8
 80225b8:	f800283a 	ret

080225bc <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 80225bc:	defff804 	addi	sp,sp,-32
 80225c0:	dfc00715 	stw	ra,28(sp)
 80225c4:	df000615 	stw	fp,24(sp)
 80225c8:	df000604 	addi	fp,sp,24
 80225cc:	e13fff15 	stw	r4,-4(fp)
 80225d0:	e17ffe15 	stw	r5,-8(fp)
 80225d4:	e1bffd15 	stw	r6,-12(fp)
 80225d8:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 80225dc:	e0800217 	ldw	r2,8(fp)
 80225e0:	d8800115 	stw	r2,4(sp)
 80225e4:	e0bffc17 	ldw	r2,-16(fp)
 80225e8:	d8800015 	stw	r2,0(sp)
 80225ec:	e1fffd17 	ldw	r7,-12(fp)
 80225f0:	000d883a 	mov	r6,zero
 80225f4:	e17ffe17 	ldw	r5,-8(fp)
 80225f8:	e13fff17 	ldw	r4,-4(fp)
 80225fc:	802232c0 	call	802232c <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
 8022600:	e037883a 	mov	sp,fp
 8022604:	dfc00117 	ldw	ra,4(sp)
 8022608:	df000017 	ldw	fp,0(sp)
 802260c:	dec00204 	addi	sp,sp,8
 8022610:	f800283a 	ret

08022614 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
 8022614:	defff804 	addi	sp,sp,-32
 8022618:	dfc00715 	stw	ra,28(sp)
 802261c:	df000615 	stw	fp,24(sp)
 8022620:	df000604 	addi	fp,sp,24
 8022624:	e13fff15 	stw	r4,-4(fp)
 8022628:	e17ffe15 	stw	r5,-8(fp)
 802262c:	e1bffd15 	stw	r6,-12(fp)
 8022630:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 8022634:	e0800217 	ldw	r2,8(fp)
 8022638:	d8800115 	stw	r2,4(sp)
 802263c:	e0bffc17 	ldw	r2,-16(fp)
 8022640:	d8800015 	stw	r2,0(sp)
 8022644:	000f883a 	mov	r7,zero
 8022648:	e1bffd17 	ldw	r6,-12(fp)
 802264c:	e17ffe17 	ldw	r5,-8(fp)
 8022650:	e13fff17 	ldw	r4,-4(fp)
 8022654:	802232c0 	call	802232c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
 8022658:	e037883a 	mov	sp,fp
 802265c:	dfc00117 	ldw	ra,4(sp)
 8022660:	df000017 	ldw	fp,0(sp)
 8022664:	dec00204 	addi	sp,sp,8
 8022668:	f800283a 	ret

0802266c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
 802266c:	deffee04 	addi	sp,sp,-72
 8022670:	dfc01115 	stw	ra,68(sp)
 8022674:	df001015 	stw	fp,64(sp)
 8022678:	df001004 	addi	fp,sp,64
 802267c:	e13fff15 	stw	r4,-4(fp)
 8022680:	e17ffe15 	stw	r5,-8(fp)
 8022684:	e1bffd15 	stw	r6,-12(fp)
 8022688:	e1fffc15 	stw	r7,-16(fp)
 802268c:	e1000417 	ldw	r4,16(fp)
 8022690:	e0c00517 	ldw	r3,20(fp)
 8022694:	e0800617 	ldw	r2,24(fp)
 8022698:	e13ffb0d 	sth	r4,-20(fp)
 802269c:	e0fffa05 	stb	r3,-24(fp)
 80226a0:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
 80226a4:	e0bffb0b 	ldhu	r2,-20(fp)
 80226a8:	e0fffa03 	ldbu	r3,-24(fp)
 80226ac:	e13ff90b 	ldhu	r4,-28(fp)
 80226b0:	d9000815 	stw	r4,32(sp)
 80226b4:	d8000715 	stw	zero,28(sp)
 80226b8:	d8c00615 	stw	r3,24(sp)
 80226bc:	d8000515 	stw	zero,20(sp)
 80226c0:	d8800415 	stw	r2,16(sp)
 80226c4:	e0800317 	ldw	r2,12(fp)
 80226c8:	d8800315 	stw	r2,12(sp)
 80226cc:	e0800217 	ldw	r2,8(fp)
 80226d0:	d8800215 	stw	r2,8(sp)
 80226d4:	e0bffc17 	ldw	r2,-16(fp)
 80226d8:	d8800115 	stw	r2,4(sp)
 80226dc:	e0bffd17 	ldw	r2,-12(fp)
 80226e0:	d8800015 	stw	r2,0(sp)
 80226e4:	000f883a 	mov	r7,zero
 80226e8:	000d883a 	mov	r6,zero
 80226ec:	e17ffe17 	ldw	r5,-8(fp)
 80226f0:	e13fff17 	ldw	r4,-4(fp)
 80226f4:	80223d00 	call	80223d0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
 80226f8:	e037883a 	mov	sp,fp
 80226fc:	dfc00117 	ldw	ra,4(sp)
 8022700:	df000017 	ldw	fp,0(sp)
 8022704:	dec00204 	addi	sp,sp,8
 8022708:	f800283a 	ret

0802270c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 802270c:	deffee04 	addi	sp,sp,-72
 8022710:	dfc01115 	stw	ra,68(sp)
 8022714:	df001015 	stw	fp,64(sp)
 8022718:	df001004 	addi	fp,sp,64
 802271c:	e13fff15 	stw	r4,-4(fp)
 8022720:	e17ffe15 	stw	r5,-8(fp)
 8022724:	e1bffd15 	stw	r6,-12(fp)
 8022728:	e1fffc15 	stw	r7,-16(fp)
 802272c:	e1000417 	ldw	r4,16(fp)
 8022730:	e0c00517 	ldw	r3,20(fp)
 8022734:	e0800617 	ldw	r2,24(fp)
 8022738:	e13ffb0d 	sth	r4,-20(fp)
 802273c:	e0fffa05 	stb	r3,-24(fp)
 8022740:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 8022744:	e0bffb0b 	ldhu	r2,-20(fp)
 8022748:	e0fffa03 	ldbu	r3,-24(fp)
 802274c:	e13ff90b 	ldhu	r4,-28(fp)
 8022750:	d8000815 	stw	zero,32(sp)
 8022754:	d9000715 	stw	r4,28(sp)
 8022758:	d8000615 	stw	zero,24(sp)
 802275c:	d8c00515 	stw	r3,20(sp)
 8022760:	d8800415 	stw	r2,16(sp)
 8022764:	e0800317 	ldw	r2,12(fp)
 8022768:	d8800315 	stw	r2,12(sp)
 802276c:	e0800217 	ldw	r2,8(fp)
 8022770:	d8800215 	stw	r2,8(sp)
 8022774:	d8000115 	stw	zero,4(sp)
 8022778:	d8000015 	stw	zero,0(sp)
 802277c:	e1fffc17 	ldw	r7,-16(fp)
 8022780:	e1bffd17 	ldw	r6,-12(fp)
 8022784:	e17ffe17 	ldw	r5,-8(fp)
 8022788:	e13fff17 	ldw	r4,-4(fp)
 802278c:	80223d00 	call	80223d0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
 8022790:	e037883a 	mov	sp,fp
 8022794:	dfc00117 	ldw	ra,4(sp)
 8022798:	df000017 	ldw	fp,0(sp)
 802279c:	dec00204 	addi	sp,sp,8
 80227a0:	f800283a 	ret

080227a4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 80227a4:	deffec04 	addi	sp,sp,-80
 80227a8:	dfc01315 	stw	ra,76(sp)
 80227ac:	df001215 	stw	fp,72(sp)
 80227b0:	df001204 	addi	fp,sp,72
 80227b4:	e13fff15 	stw	r4,-4(fp)
 80227b8:	e17ffe15 	stw	r5,-8(fp)
 80227bc:	e1bffd15 	stw	r6,-12(fp)
 80227c0:	e1fffc15 	stw	r7,-16(fp)
 80227c4:	e1800617 	ldw	r6,24(fp)
 80227c8:	e1400717 	ldw	r5,28(fp)
 80227cc:	e1000817 	ldw	r4,32(fp)
 80227d0:	e0c00917 	ldw	r3,36(fp)
 80227d4:	e0800a17 	ldw	r2,40(fp)
 80227d8:	e1bffb0d 	sth	r6,-20(fp)
 80227dc:	e17ffa05 	stb	r5,-24(fp)
 80227e0:	e13ff905 	stb	r4,-28(fp)
 80227e4:	e0fff80d 	sth	r3,-32(fp)
 80227e8:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 80227ec:	e0bffb0b 	ldhu	r2,-20(fp)
 80227f0:	e0fffa03 	ldbu	r3,-24(fp)
 80227f4:	e13ff903 	ldbu	r4,-28(fp)
 80227f8:	e17ff80b 	ldhu	r5,-32(fp)
 80227fc:	e1bff70b 	ldhu	r6,-36(fp)
 8022800:	d9800815 	stw	r6,32(sp)
 8022804:	d9400715 	stw	r5,28(sp)
 8022808:	d9000615 	stw	r4,24(sp)
 802280c:	d8c00515 	stw	r3,20(sp)
 8022810:	d8800415 	stw	r2,16(sp)
 8022814:	e0800517 	ldw	r2,20(fp)
 8022818:	d8800315 	stw	r2,12(sp)
 802281c:	e0800417 	ldw	r2,16(fp)
 8022820:	d8800215 	stw	r2,8(sp)
 8022824:	e0800317 	ldw	r2,12(fp)
 8022828:	d8800115 	stw	r2,4(sp)
 802282c:	e0800217 	ldw	r2,8(fp)
 8022830:	d8800015 	stw	r2,0(sp)
 8022834:	e1fffc17 	ldw	r7,-16(fp)
 8022838:	e1bffd17 	ldw	r6,-12(fp)
 802283c:	e17ffe17 	ldw	r5,-8(fp)
 8022840:	e13fff17 	ldw	r4,-4(fp)
 8022844:	80223d00 	call	80223d0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 8022848:	e037883a 	mov	sp,fp
 802284c:	dfc00117 	ldw	ra,4(sp)
 8022850:	df000017 	ldw	fp,0(sp)
 8022854:	dec00204 	addi	sp,sp,8
 8022858:	f800283a 	ret

0802285c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
 802285c:	defffc04 	addi	sp,sp,-16
 8022860:	df000315 	stw	fp,12(sp)
 8022864:	df000304 	addi	fp,sp,12
 8022868:	e13ffe15 	stw	r4,-8(fp)
 802286c:	e17ffd15 	stw	r5,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
 8022870:	e0bffd17 	ldw	r2,-12(fp)
 8022874:	1000021e 	bne	r2,zero,8022880 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 8022878:	00bffa84 	movi	r2,-22
 802287c:	00002f06 	br	802293c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
 8022880:	e0bffd17 	ldw	r2,-12(fp)
 8022884:	10c00317 	ldw	r3,12(r2)
 8022888:	e0bffd17 	ldw	r2,-12(fp)
 802288c:	18800226 	beq	r3,r2,8022898 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 8022890:	00bffa84 	movi	r2,-22
 8022894:	00002906 	br	802293c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
 8022898:	e0bffe17 	ldw	r2,-8(fp)
 802289c:	10800017 	ldw	r2,0(r2)
 80228a0:	1000051e 	bne	r2,zero,80228b8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
 80228a4:	e0bffe17 	ldw	r2,-8(fp)
 80228a8:	e0fffd17 	ldw	r3,-12(fp)
 80228ac:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
 80228b0:	0005883a 	mov	r2,zero
 80228b4:	00002106 	br	802293c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
 80228b8:	e0bffe17 	ldw	r2,-8(fp)
 80228bc:	10800017 	ldw	r2,0(r2)
 80228c0:	e0fffd17 	ldw	r3,-12(fp)
 80228c4:	1880021e 	bne	r3,r2,80228d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 80228c8:	00bffa84 	movi	r2,-22
 80228cc:	00001b06 	br	802293c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 80228d0:	e0bffe17 	ldw	r2,-8(fp)
 80228d4:	10800017 	ldw	r2,0(r2)
 80228d8:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 80228dc:	00000906 	br	8022904 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
 80228e0:	e0bfff17 	ldw	r2,-4(fp)
 80228e4:	10c00317 	ldw	r3,12(r2)
 80228e8:	e0bffd17 	ldw	r2,-12(fp)
 80228ec:	1880021e 	bne	r3,r2,80228f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 80228f0:	00bffa84 	movi	r2,-22
 80228f4:	00001106 	br	802293c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 80228f8:	e0bfff17 	ldw	r2,-4(fp)
 80228fc:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
 8022900:	e0bfff15 	stw	r2,-4(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 8022904:	e0bfff17 	ldw	r2,-4(fp)
 8022908:	10800317 	ldw	r2,12(r2)
 802290c:	e0fffe17 	ldw	r3,-8(fp)
 8022910:	18c00017 	ldw	r3,0(r3)
 8022914:	10fff21e 	bne	r2,r3,80228e0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x84>
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
 8022918:	e0fffd17 	ldw	r3,-12(fp)
 802291c:	e0bfff17 	ldw	r2,-4(fp)
 8022920:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
 8022924:	e0bffe17 	ldw	r2,-8(fp)
 8022928:	10800017 	ldw	r2,0(r2)
 802292c:	1007883a 	mov	r3,r2
 8022930:	e0bffd17 	ldw	r2,-12(fp)
 8022934:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
 8022938:	0005883a 	mov	r2,zero
}
 802293c:	e037883a 	mov	sp,fp
 8022940:	df000017 	ldw	fp,0(sp)
 8022944:	dec00104 	addi	sp,sp,4
 8022948:	f800283a 	ret

0802294c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
 802294c:	defff804 	addi	sp,sp,-32
 8022950:	df000715 	stw	fp,28(sp)
 8022954:	df000704 	addi	fp,sp,28
 8022958:	e13ffa15 	stw	r4,-24(fp)
 802295c:	e17ff915 	stw	r5,-28(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
 8022960:	e13ff917 	ldw	r4,-28(fp)
 8022964:	2000021e 	bne	r4,zero,8022970 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 8022968:	00bffa84 	movi	r2,-22
 802296c:	00005906 	br	8022ad4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
 8022970:	e13ff917 	ldw	r4,-28(fp)
 8022974:	2015883a 	mov	r10,r4
 8022978:	0017883a 	mov	r11,zero
 802297c:	e2bffb15 	stw	r10,-20(fp)
 8022980:	e2fffc15 	stw	r11,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 8022984:	e13ff917 	ldw	r4,-28(fp)
 8022988:	21400317 	ldw	r5,12(r4)
 802298c:	e13ffb17 	ldw	r4,-20(fp)
 8022990:	2900041e 	bne	r5,r4,80229a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
 8022994:	e13ff917 	ldw	r4,-28(fp)
 8022998:	21400b17 	ldw	r5,44(r4)
 802299c:	e13ffc17 	ldw	r4,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 80229a0:	29000226 	beq	r5,r4,80229ac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 80229a4:	00bffa84 	movi	r2,-22
 80229a8:	00004a06 	br	8022ad4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
 80229ac:	e13ffa17 	ldw	r4,-24(fp)
 80229b0:	21000017 	ldw	r4,0(r4)
 80229b4:	2000051e 	bne	r4,zero,80229cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
 80229b8:	e0bffa17 	ldw	r2,-24(fp)
 80229bc:	e0fff917 	ldw	r3,-28(fp)
 80229c0:	10c00015 	stw	r3,0(r2)
        return 0;
 80229c4:	0005883a 	mov	r2,zero
 80229c8:	00004206 	br	8022ad4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
 80229cc:	e13ffa17 	ldw	r4,-24(fp)
 80229d0:	21000017 	ldw	r4,0(r4)
 80229d4:	e17ff917 	ldw	r5,-28(fp)
 80229d8:	2900021e 	bne	r5,r4,80229e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 80229dc:	00bffa84 	movi	r2,-22
 80229e0:	00003c06 	br	8022ad4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 80229e4:	e13ffa17 	ldw	r4,-24(fp)
 80229e8:	21000017 	ldw	r4,0(r4)
 80229ec:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
 80229f0:	e13ffa17 	ldw	r4,-24(fp)
 80229f4:	21000017 	ldw	r4,0(r4)
 80229f8:	2011883a 	mov	r8,r4
 80229fc:	0013883a 	mov	r9,zero
 8022a00:	e23ffd15 	stw	r8,-12(fp)
 8022a04:	e27ffe15 	stw	r9,-8(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8022a08:	00001806 	br	8022a6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
 8022a0c:	e13ff917 	ldw	r4,-28(fp)
 8022a10:	200d883a 	mov	r6,r4
 8022a14:	000f883a 	mov	r7,zero
 8022a18:	e1bffb15 	stw	r6,-20(fp)
 8022a1c:	e1fffc15 	stw	r7,-16(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
 8022a20:	e13fff17 	ldw	r4,-4(fp)
 8022a24:	21400317 	ldw	r5,12(r4)
 8022a28:	e13ffb17 	ldw	r4,-20(fp)
 8022a2c:	2900061e 	bne	r5,r4,8022a48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
 8022a30:	e13fff17 	ldw	r4,-4(fp)
 8022a34:	21400b17 	ldw	r5,44(r4)
 8022a38:	e13ffc17 	ldw	r4,-16(fp)
 8022a3c:	2900021e 	bne	r5,r4,8022a48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 8022a40:	00bffa84 	movi	r2,-22
 8022a44:	00002306 	br	8022ad4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 8022a48:	e13fff17 	ldw	r4,-4(fp)
 8022a4c:	21000317 	ldw	r4,12(r4)
 8022a50:	e13ffb15 	stw	r4,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 8022a54:	e13fff17 	ldw	r4,-4(fp)
 8022a58:	21000b17 	ldw	r4,44(r4)
 8022a5c:	e13ffc15 	stw	r4,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 8022a60:	e13ffb17 	ldw	r4,-20(fp)
 8022a64:	e17ffc17 	ldw	r5,-16(fp)
        last_descr_ptr = 
 8022a68:	e13fff15 	stw	r4,-4(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8022a6c:	e13fff17 	ldw	r4,-4(fp)
 8022a70:	21400317 	ldw	r5,12(r4)
 8022a74:	e13ffd17 	ldw	r4,-12(fp)
 8022a78:	293fe41e 	bne	r5,r4,8022a0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 8022a7c:	e13fff17 	ldw	r4,-4(fp)
 8022a80:	21400b17 	ldw	r5,44(r4)
 8022a84:	e13ffe17 	ldw	r4,-8(fp)
 8022a88:	293fe01e 	bne	r5,r4,8022a0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc0>
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
 8022a8c:	e13ff917 	ldw	r4,-28(fp)
 8022a90:	2005883a 	mov	r2,r4
 8022a94:	0007883a 	mov	r3,zero
 8022a98:	e0bffb15 	stw	r2,-20(fp)
 8022a9c:	e0fffc15 	stw	r3,-16(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
 8022aa0:	e0fffb17 	ldw	r3,-20(fp)
 8022aa4:	e0bfff17 	ldw	r2,-4(fp)
 8022aa8:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
 8022aac:	e0fffc17 	ldw	r3,-16(fp)
 8022ab0:	e0bfff17 	ldw	r2,-4(fp)
 8022ab4:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
 8022ab8:	e0fffd17 	ldw	r3,-12(fp)
 8022abc:	e0bff917 	ldw	r2,-28(fp)
 8022ac0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
 8022ac4:	e0fffe17 	ldw	r3,-8(fp)
 8022ac8:	e0bff917 	ldw	r2,-28(fp)
 8022acc:	10c00b15 	stw	r3,44(r2)
    return 0;
 8022ad0:	0005883a 	mov	r2,zero
}
 8022ad4:	e037883a 	mov	sp,fp
 8022ad8:	df000017 	ldw	fp,0(sp)
 8022adc:	dec00104 	addi	sp,sp,4
 8022ae0:	f800283a 	ret

08022ae4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
 8022ae4:	defff804 	addi	sp,sp,-32
 8022ae8:	dfc00715 	stw	ra,28(sp)
 8022aec:	df000615 	stw	fp,24(sp)
 8022af0:	df000604 	addi	fp,sp,24
 8022af4:	e13ffc15 	stw	r4,-16(fp)
 8022af8:	2805883a 	mov	r2,r5
 8022afc:	3007883a 	mov	r3,r6
 8022b00:	e0bffb05 	stb	r2,-20(fp)
 8022b04:	1805883a 	mov	r2,r3
 8022b08:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 descriptor_control_field = 0;
 8022b0c:	e03ffd15 	stw	zero,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 8022b10:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
 8022b14:	e0bffc17 	ldw	r2,-16(fp)
 8022b18:	1000021e 	bne	r2,zero,8022b24 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
 8022b1c:	00bffa84 	movi	r2,-22
 8022b20:	00002f06 	br	8022be0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xfc>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 8022b24:	e0bffc17 	ldw	r2,-16(fp)
 8022b28:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 8022b2c:	00000d06 	br	8022b64 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x80>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
 8022b30:	e0bfff17 	ldw	r2,-4(fp)
 8022b34:	10800717 	ldw	r2,28(r2)
 8022b38:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 8022b3c:	e0bffd17 	ldw	r2,-12(fp)
 8022b40:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8022b44:	e0bfff17 	ldw	r2,-4(fp)
 8022b48:	10c00715 	stw	r3,28(r2)
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 8022b4c:	e0bfff17 	ldw	r2,-4(fp)
 8022b50:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
 8022b54:	e0bfff15 	stw	r2,-4(fp)
            
        descriptor_count++;
 8022b58:	e0bffe17 	ldw	r2,-8(fp)
 8022b5c:	10800044 	addi	r2,r2,1
 8022b60:	e0bffe15 	stw	r2,-8(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 8022b64:	e0bfff17 	ldw	r2,-4(fp)
 8022b68:	10c00317 	ldw	r3,12(r2)
 8022b6c:	e0bffc17 	ldw	r2,-16(fp)
 8022b70:	18bfef1e 	bne	r3,r2,8022b30 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x4c>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
 8022b74:	e0bfff17 	ldw	r2,-4(fp)
 8022b78:	10800717 	ldw	r2,28(r2)
 8022b7c:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 8022b80:	e0bffb03 	ldbu	r2,-20(fp)
 8022b84:	10000726 	beq	r2,zero,8022ba4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc0>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 8022b88:	e0fffd17 	ldw	r3,-12(fp)
 8022b8c:	00b00034 	movhi	r2,49152
 8022b90:	10bfffc4 	addi	r2,r2,-1
 8022b94:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
 8022b98:	e0bfff17 	ldw	r2,-4(fp)
 8022b9c:	10c00715 	stw	r3,28(r2)
 8022ba0:	00000406 	br	8022bb4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xd0>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 8022ba4:	e0bffd17 	ldw	r2,-12(fp)
 8022ba8:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8022bac:	e0bfff17 	ldw	r2,-4(fp)
 8022bb0:	10c00715 	stw	r3,28(r2)
    }
    
    descriptor_count++;
 8022bb4:	e0bffe17 	ldw	r2,-8(fp)
 8022bb8:	10800044 	addi	r2,r2,1
 8022bbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
 8022bc0:	e0bffa03 	ldbu	r2,-24(fp)
 8022bc4:	10000526 	beq	r2,zero,8022bdc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
 8022bc8:	e0bffe17 	ldw	r2,-8(fp)
 8022bcc:	1004917a 	slli	r2,r2,5
 8022bd0:	100b883a 	mov	r5,r2
 8022bd4:	e13ffc17 	ldw	r4,-16(fp)
 8022bd8:	803ab280 	call	803ab28 <alt_dcache_flush>
    }
    
    return 0;
 8022bdc:	0005883a 	mov	r2,zero
}
 8022be0:	e037883a 	mov	sp,fp
 8022be4:	dfc00117 	ldw	ra,4(sp)
 8022be8:	df000017 	ldw	fp,0(sp)
 8022bec:	dec00204 	addi	sp,sp,8
 8022bf0:	f800283a 	ret

08022bf4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
 8022bf4:	defff404 	addi	sp,sp,-48
 8022bf8:	dfc00b15 	stw	ra,44(sp)
 8022bfc:	df000a15 	stw	fp,40(sp)
 8022c00:	df000a04 	addi	fp,sp,40
 8022c04:	e13ff815 	stw	r4,-32(fp)
 8022c08:	2809883a 	mov	r4,r5
 8022c0c:	300b883a 	mov	r5,r6
 8022c10:	e13ff705 	stb	r4,-36(fp)
 8022c14:	2809883a 	mov	r4,r5
 8022c18:	e13ff605 	stb	r4,-40(fp)
    alt_u32 descriptor_control_field = 0;
 8022c1c:	e03ffd15 	stw	zero,-12(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 8022c20:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
 8022c24:	e13ff817 	ldw	r4,-32(fp)
 8022c28:	2000021e 	bne	r4,zero,8022c34 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
 8022c2c:	00bffa84 	movi	r2,-22
 8022c30:	00003e06 	br	8022d2c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x138>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 8022c34:	e13ff817 	ldw	r4,-32(fp)
 8022c38:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
 8022c3c:	e13ff817 	ldw	r4,-32(fp)
 8022c40:	2005883a 	mov	r2,r4
 8022c44:	0007883a 	mov	r3,zero
 8022c48:	e0bffb15 	stw	r2,-20(fp)
 8022c4c:	e0fffc15 	stw	r3,-16(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8022c50:	00001306 	br	8022ca0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
 8022c54:	e0bfff17 	ldw	r2,-4(fp)
 8022c58:	10800f17 	ldw	r2,60(r2)
 8022c5c:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 8022c60:	e0bffd17 	ldw	r2,-12(fp)
 8022c64:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8022c68:	e0bfff17 	ldw	r2,-4(fp)
 8022c6c:	10c00f15 	stw	r3,60(r2)
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 8022c70:	e0bfff17 	ldw	r2,-4(fp)
 8022c74:	10800317 	ldw	r2,12(r2)
 8022c78:	e0bff915 	stw	r2,-28(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 8022c7c:	e0bfff17 	ldw	r2,-4(fp)
 8022c80:	10800b17 	ldw	r2,44(r2)
 8022c84:	e0bffa15 	stw	r2,-24(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 8022c88:	e0bff917 	ldw	r2,-28(fp)
 8022c8c:	e0fffa17 	ldw	r3,-24(fp)
        last_descr_ptr = 
 8022c90:	e0bfff15 	stw	r2,-4(fp)
        descriptor_count++;            
 8022c94:	e0bffe17 	ldw	r2,-8(fp)
 8022c98:	10800044 	addi	r2,r2,1
 8022c9c:	e0bffe15 	stw	r2,-8(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 8022ca0:	e0bfff17 	ldw	r2,-4(fp)
 8022ca4:	10c00317 	ldw	r3,12(r2)
 8022ca8:	e0bffb17 	ldw	r2,-20(fp)
 8022cac:	18bfe91e 	bne	r3,r2,8022c54 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x60>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 8022cb0:	e0bfff17 	ldw	r2,-4(fp)
 8022cb4:	10c00b17 	ldw	r3,44(r2)
 8022cb8:	e0bffc17 	ldw	r2,-16(fp)
 8022cbc:	18bfe51e 	bne	r3,r2,8022c54 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x60>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
 8022cc0:	e0bfff17 	ldw	r2,-4(fp)
 8022cc4:	10800f17 	ldw	r2,60(r2)
 8022cc8:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 8022ccc:	e0bff703 	ldbu	r2,-36(fp)
 8022cd0:	10000726 	beq	r2,zero,8022cf0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xfc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 8022cd4:	e0fffd17 	ldw	r3,-12(fp)
 8022cd8:	00b00034 	movhi	r2,49152
 8022cdc:	10bfffc4 	addi	r2,r2,-1
 8022ce0:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
 8022ce4:	e0bfff17 	ldw	r2,-4(fp)
 8022ce8:	10c00f15 	stw	r3,60(r2)
 8022cec:	00000406 	br	8022d00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x10c>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 8022cf0:	e0bffd17 	ldw	r2,-12(fp)
 8022cf4:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
 8022cf8:	e0bfff17 	ldw	r2,-4(fp)
 8022cfc:	10c00f15 	stw	r3,60(r2)
    }
    
    descriptor_count++;
 8022d00:	e0bffe17 	ldw	r2,-8(fp)
 8022d04:	10800044 	addi	r2,r2,1
 8022d08:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
 8022d0c:	e0bff603 	ldbu	r2,-40(fp)
 8022d10:	10000526 	beq	r2,zero,8022d28 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x134>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
 8022d14:	e0bffe17 	ldw	r2,-8(fp)
 8022d18:	100491ba 	slli	r2,r2,6
 8022d1c:	100b883a 	mov	r5,r2
 8022d20:	e13ff817 	ldw	r4,-32(fp)
 8022d24:	803ab280 	call	803ab28 <alt_dcache_flush>
    }
    
    return 0;
 8022d28:	0005883a 	mov	r2,zero
}
 8022d2c:	e037883a 	mov	sp,fp
 8022d30:	dfc00117 	ldw	ra,4(sp)
 8022d34:	df000017 	ldw	fp,0(sp)
 8022d38:	dec00204 	addi	sp,sp,8
 8022d3c:	f800283a 	ret

08022d40 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
 8022d40:	deffeb04 	addi	sp,sp,-84
 8022d44:	dfc01415 	stw	ra,80(sp)
 8022d48:	df001315 	stw	fp,76(sp)
 8022d4c:	df001304 	addi	fp,sp,76
 8022d50:	e13ff115 	stw	r4,-60(fp)
 8022d54:	e17fef15 	stw	r5,-68(fp)
 8022d58:	e1bff015 	stw	r6,-64(fp)
 8022d5c:	3807883a 	mov	r3,r7
 8022d60:	e0800217 	ldw	r2,8(fp)
 8022d64:	e0ffee05 	stb	r3,-72(fp)
 8022d68:	e0bfed05 	stb	r2,-76(fp)
    alt_u32 prefetcher_ctl = 0;
 8022d6c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 dispatcher_ctl = 0;
 8022d70:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
 8022d74:	e03ffd15 	stw	zero,-12(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
 8022d78:	e0bfef17 	ldw	r2,-68(fp)
 8022d7c:	e0bff315 	stw	r2,-52(fp)
 8022d80:	e0bff017 	ldw	r2,-64(fp)
 8022d84:	e0bff415 	stw	r2,-48(fp)
    
    /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
 8022d88:	e0bff117 	ldw	r2,-60(fp)
 8022d8c:	10801817 	ldw	r2,96(r2)
 8022d90:	e0bffc15 	stw	r2,-16(fp)
 8022d94:	e03ffb8d 	sth	zero,-18(fp)
 8022d98:	e0bffb8b 	ldhu	r2,-18(fp)
 8022d9c:	e0fff2c4 	addi	r3,fp,-53
 8022da0:	180d883a 	mov	r6,r3
 8022da4:	100b883a 	mov	r5,r2
 8022da8:	e13ffc17 	ldw	r4,-16(fp)
 8022dac:	80168c40 	call	80168c4 <OSSemPend>
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
 8022db0:	e0bff117 	ldw	r2,-60(fp)
 8022db4:	10800617 	ldw	r2,24(r2)
 8022db8:	10800037 	ldwio	r2,0(r2)
 8022dbc:	e0bfff15 	stw	r2,-4(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
 8022dc0:	e0bfff17 	ldw	r2,-4(fp)
 8022dc4:	1080004c 	andi	r2,r2,1
 8022dc8:	10000626 	beq	r2,zero,8022de4 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
 8022dcc:	e0bff117 	ldw	r2,-60(fp)
 8022dd0:	10801817 	ldw	r2,96(r2)
 8022dd4:	1009883a 	mov	r4,r2
 8022dd8:	8016c4c0 	call	8016c4c <OSSemPost>
        return -EBUSY;
 8022ddc:	00bffc04 	movi	r2,-16
 8022de0:	00009806 	br	8023044 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 8022de4:	00800804 	movi	r2,32
 8022de8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 8022dec:	0005303a 	rdctl	r2,status
 8022df0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8022df4:	e0fff917 	ldw	r3,-28(fp)
 8022df8:	00bfff84 	movi	r2,-2
 8022dfc:	1884703a 	and	r2,r3,r2
 8022e00:	1001703a 	wrctl	status,r2
  return context;
 8022e04:	e0bff917 	ldw	r2,-28(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 8022e08:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8022e0c:	e0bff117 	ldw	r2,-60(fp)
 8022e10:	10800317 	ldw	r2,12(r2)
 8022e14:	10800104 	addi	r2,r2,4
 8022e18:	e0fffe17 	ldw	r3,-8(fp)
 8022e1c:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
 8022e20:	e0bff117 	ldw	r2,-60(fp)
 8022e24:	10800317 	ldw	r2,12(r2)
 8022e28:	e0fff117 	ldw	r3,-60(fp)
 8022e2c:	18c00317 	ldw	r3,12(r3)
 8022e30:	18c00037 	ldwio	r3,0(r3)
 8022e34:	10c00035 	stwio	r3,0(r2)
 8022e38:	e0bffd17 	ldw	r2,-12(fp)
 8022e3c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8022e40:	e0bffa17 	ldw	r2,-24(fp)
 8022e44:	1001703a 	wrctl	status,r2
}
 8022e48:	0001883a 	nop
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
 8022e4c:	e0bff117 	ldw	r2,-60(fp)
 8022e50:	10800b17 	ldw	r2,44(r2)
 8022e54:	10002326 	beq	r2,zero,8022ee4 <alt_msgdma_start_prefetcher_with_list_addr+0x1a4>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
 8022e58:	e0bff117 	ldw	r2,-60(fp)
 8022e5c:	10c00d17 	ldw	r3,52(r2)
 8022e60:	e0bffe17 	ldw	r2,-8(fp)
 8022e64:	1884b03a 	or	r2,r3,r2
 8022e68:	10800514 	ori	r2,r2,20
 8022e6c:	e0bffe15 	stw	r2,-8(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 8022e70:	e0fffe17 	ldw	r3,-8(fp)
 8022e74:	00bff7c4 	movi	r2,-33
 8022e78:	1884703a 	and	r2,r3,r2
 8022e7c:	e0bffe15 	stw	r2,-8(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 8022e80:	e0bfff17 	ldw	r2,-4(fp)
 8022e84:	10800214 	ori	r2,r2,8
 8022e88:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8022e8c:	0005303a 	rdctl	r2,status
 8022e90:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8022e94:	e0fff717 	ldw	r3,-36(fp)
 8022e98:	00bfff84 	movi	r2,-2
 8022e9c:	1884703a 	and	r2,r3,r2
 8022ea0:	1001703a 	wrctl	status,r2
  return context;
 8022ea4:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 8022ea8:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8022eac:	e0bff117 	ldw	r2,-60(fp)
 8022eb0:	10800317 	ldw	r2,12(r2)
 8022eb4:	10800104 	addi	r2,r2,4
 8022eb8:	e0fffe17 	ldw	r3,-8(fp)
 8022ebc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8022ec0:	e0bff117 	ldw	r2,-60(fp)
 8022ec4:	10800617 	ldw	r2,24(r2)
 8022ec8:	e0ffff17 	ldw	r3,-4(fp)
 8022ecc:	10c00035 	stwio	r3,0(r2)
 8022ed0:	e0bffd17 	ldw	r2,-12(fp)
 8022ed4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 8022ed8:	e0bff817 	ldw	r2,-32(fp)
 8022edc:	1001703a 	wrctl	status,r2
}
 8022ee0:	00002406 	br	8022f74 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
 8022ee4:	e0bff117 	ldw	r2,-60(fp)
 8022ee8:	10c00d17 	ldw	r3,52(r2)
 8022eec:	e0bffe17 	ldw	r2,-8(fp)
 8022ef0:	1884b03a 	or	r2,r3,r2
 8022ef4:	10800114 	ori	r2,r2,4
 8022ef8:	e0bffe15 	stw	r2,-8(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
 8022efc:	e0fffe17 	ldw	r3,-8(fp)
 8022f00:	00bff3c4 	movi	r2,-49
 8022f04:	1884703a 	and	r2,r3,r2
 8022f08:	e0bffe15 	stw	r2,-8(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
 8022f0c:	e0ffff17 	ldw	r3,-4(fp)
 8022f10:	00bffdc4 	movi	r2,-9
 8022f14:	1884703a 	and	r2,r3,r2
 8022f18:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8022f1c:	0005303a 	rdctl	r2,status
 8022f20:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8022f24:	e0fff517 	ldw	r3,-44(fp)
 8022f28:	00bfff84 	movi	r2,-2
 8022f2c:	1884703a 	and	r2,r3,r2
 8022f30:	1001703a 	wrctl	status,r2
  return context;
 8022f34:	e0bff517 	ldw	r2,-44(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
 8022f38:	e0bffd15 	stw	r2,-12(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 8022f3c:	e0bff117 	ldw	r2,-60(fp)
 8022f40:	10800317 	ldw	r2,12(r2)
 8022f44:	10800104 	addi	r2,r2,4
 8022f48:	e0fffe17 	ldw	r3,-8(fp)
 8022f4c:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8022f50:	e0bff117 	ldw	r2,-60(fp)
 8022f54:	10800617 	ldw	r2,24(r2)
 8022f58:	e0ffff17 	ldw	r3,-4(fp)
 8022f5c:	10c00035 	stwio	r3,0(r2)
 8022f60:	e0bffd17 	ldw	r2,-12(fp)
 8022f64:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8022f68:	e0bff617 	ldw	r2,-40(fp)
 8022f6c:	1001703a 	wrctl	status,r2
}
 8022f70:	0001883a 	nop
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
 8022f74:	e0bff117 	ldw	r2,-60(fp)
 8022f78:	10800617 	ldw	r2,24(r2)
 8022f7c:	10800104 	addi	r2,r2,4
 8022f80:	e0fff317 	ldw	r3,-52(fp)
 8022f84:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
 8022f88:	e0bff117 	ldw	r2,-60(fp)
 8022f8c:	10800617 	ldw	r2,24(r2)
 8022f90:	10800204 	addi	r2,r2,8
 8022f94:	e0fff417 	ldw	r3,-48(fp)
 8022f98:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
 8022f9c:	e0bfee03 	ldbu	r2,-72(fp)
 8022fa0:	10000426 	beq	r2,zero,8022fb4 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
 8022fa4:	e0bfff17 	ldw	r2,-4(fp)
 8022fa8:	10800414 	ori	r2,r2,16
 8022fac:	e0bfff15 	stw	r2,-4(fp)
 8022fb0:	00000406 	br	8022fc4 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
 8022fb4:	e0ffff17 	ldw	r3,-4(fp)
 8022fb8:	00bffbc4 	movi	r2,-17
 8022fbc:	1884703a 	and	r2,r3,r2
 8022fc0:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set poll-en */
     if (poll_en){
 8022fc4:	e0bfed03 	ldbu	r2,-76(fp)
 8022fc8:	10000e26 	beq	r2,zero,8023004 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
 8022fcc:	e0bfff17 	ldw	r2,-4(fp)
 8022fd0:	10800094 	ori	r2,r2,2
 8022fd4:	e0bfff15 	stw	r2,-4(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 8022fd8:	e0bff117 	ldw	r2,-60(fp)
 8022fdc:	10800617 	ldw	r2,24(r2)
 8022fe0:	10800304 	addi	r2,r2,12
 8022fe4:	10800037 	ldwio	r2,0(r2)
 8022fe8:	10000a1e 	bne	r2,zero,8023014 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 8022fec:	e0bff117 	ldw	r2,-60(fp)
 8022ff0:	10800617 	ldw	r2,24(r2)
 8022ff4:	10800304 	addi	r2,r2,12
 8022ff8:	00c03fc4 	movi	r3,255
 8022ffc:	10c00035 	stwio	r3,0(r2)
 8023000:	00000406 	br	8023014 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
 8023004:	e0ffff17 	ldw	r3,-4(fp)
 8023008:	00bfff44 	movi	r2,-3
 802300c:	1884703a 	and	r2,r3,r2
 8023010:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
 8023014:	e0bfff17 	ldw	r2,-4(fp)
 8023018:	10800054 	ori	r2,r2,1
 802301c:	e0bfff15 	stw	r2,-4(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 8023020:	e0bff117 	ldw	r2,-60(fp)
 8023024:	10800617 	ldw	r2,24(r2)
 8023028:	e0ffff17 	ldw	r3,-4(fp)
 802302c:	10c00035 	stwio	r3,0(r2)
     
     /*
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
 8023030:	e0bff117 	ldw	r2,-60(fp)
 8023034:	10801817 	ldw	r2,96(r2)
 8023038:	1009883a 	mov	r4,r2
 802303c:	8016c4c0 	call	8016c4c <OSSemPost>
     
     return 0;
 8023040:	0005883a 	mov	r2,zero
}
 8023044:	e037883a 	mov	sp,fp
 8023048:	dfc00117 	ldw	ra,4(sp)
 802304c:	df000017 	ldw	fp,0(sp)
 8023050:	dec00204 	addi	sp,sp,8
 8023054:	f800283a 	ret

08023058 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
 8023058:	defff504 	addi	sp,sp,-44
 802305c:	dfc00a15 	stw	ra,40(sp)
 8023060:	df000915 	stw	fp,36(sp)
 8023064:	dc400815 	stw	r17,32(sp)
 8023068:	dc000715 	stw	r16,28(sp)
 802306c:	df000904 	addi	fp,sp,36
 8023070:	e13ffd15 	stw	r4,-12(fp)
 8023074:	e17ffc15 	stw	r5,-16(fp)
 8023078:	3009883a 	mov	r4,r6
 802307c:	380b883a 	mov	r5,r7
 8023080:	e0c00217 	ldw	r3,8(fp)
 8023084:	e0800317 	ldw	r2,12(fp)
 8023088:	e13ffb05 	stb	r4,-20(fp)
 802308c:	2809883a 	mov	r4,r5
 8023090:	e13ffa05 	stb	r4,-24(fp)
 8023094:	e0fff905 	stb	r3,-28(fp)
 8023098:	e0bff805 	stb	r2,-32(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 802309c:	e0bff903 	ldbu	r2,-28(fp)
 80230a0:	e0fff803 	ldbu	r3,-32(fp)
 80230a4:	180d883a 	mov	r6,r3
 80230a8:	100b883a 	mov	r5,r2
 80230ac:	e13ffc17 	ldw	r4,-16(fp)
 80230b0:	8022ae40 	call	8022ae4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
 80230b4:	10000226 	beq	r2,zero,80230c0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x68>
    {
        return -EINVAL;
 80230b8:	00bffa84 	movi	r2,-22
 80230bc:	00000b06 	br	80230ec <alt_msgdma_start_prefetcher_with_std_desc_list+0x94>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
 80230c0:	e0bffc17 	ldw	r2,-16(fp)
 80230c4:	1021883a 	mov	r16,r2
 80230c8:	0023883a 	mov	r17,zero
 80230cc:	e0fffb03 	ldbu	r3,-20(fp)
 80230d0:	e0bffa03 	ldbu	r2,-24(fp)
 80230d4:	d8800015 	stw	r2,0(sp)
 80230d8:	180f883a 	mov	r7,r3
 80230dc:	800b883a 	mov	r5,r16
 80230e0:	880d883a 	mov	r6,r17
 80230e4:	e13ffd17 	ldw	r4,-12(fp)
 80230e8:	8022d400 	call	8022d40 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 80230ec:	e6fffe04 	addi	sp,fp,-8
 80230f0:	dfc00317 	ldw	ra,12(sp)
 80230f4:	df000217 	ldw	fp,8(sp)
 80230f8:	dc400117 	ldw	r17,4(sp)
 80230fc:	dc000017 	ldw	r16,0(sp)
 8023100:	dec00404 	addi	sp,sp,16
 8023104:	f800283a 	ret

08023108 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
 8023108:	defff504 	addi	sp,sp,-44
 802310c:	dfc00a15 	stw	ra,40(sp)
 8023110:	df000915 	stw	fp,36(sp)
 8023114:	dc400815 	stw	r17,32(sp)
 8023118:	dc000715 	stw	r16,28(sp)
 802311c:	df000904 	addi	fp,sp,36
 8023120:	e13ffd15 	stw	r4,-12(fp)
 8023124:	e17ffc15 	stw	r5,-16(fp)
 8023128:	3009883a 	mov	r4,r6
 802312c:	380b883a 	mov	r5,r7
 8023130:	e0c00217 	ldw	r3,8(fp)
 8023134:	e0800317 	ldw	r2,12(fp)
 8023138:	e13ffb05 	stb	r4,-20(fp)
 802313c:	2809883a 	mov	r4,r5
 8023140:	e13ffa05 	stb	r4,-24(fp)
 8023144:	e0fff905 	stb	r3,-28(fp)
 8023148:	e0bff805 	stb	r2,-32(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 802314c:	e0bff903 	ldbu	r2,-28(fp)
 8023150:	e0fff803 	ldbu	r3,-32(fp)
 8023154:	180d883a 	mov	r6,r3
 8023158:	100b883a 	mov	r5,r2
 802315c:	e13ffc17 	ldw	r4,-16(fp)
 8023160:	8022bf40 	call	8022bf4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
 8023164:	10000226 	beq	r2,zero,8023170 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x68>
    {
        return -EINVAL;
 8023168:	00bffa84 	movi	r2,-22
 802316c:	00000b06 	br	802319c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x94>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
 8023170:	e0bffc17 	ldw	r2,-16(fp)
 8023174:	1021883a 	mov	r16,r2
 8023178:	0023883a 	mov	r17,zero
 802317c:	e0fffb03 	ldbu	r3,-20(fp)
 8023180:	e0bffa03 	ldbu	r2,-24(fp)
 8023184:	d8800015 	stw	r2,0(sp)
 8023188:	180f883a 	mov	r7,r3
 802318c:	800b883a 	mov	r5,r16
 8023190:	880d883a 	mov	r6,r17
 8023194:	e13ffd17 	ldw	r4,-12(fp)
 8023198:	8022d400 	call	8022d40 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 802319c:	e6fffe04 	addi	sp,fp,-8
 80231a0:	dfc00317 	ldw	ra,12(sp)
 80231a4:	df000217 	ldw	fp,8(sp)
 80231a8:	dc400117 	ldw	r17,4(sp)
 80231ac:	dc000017 	ldw	r16,0(sp)
 80231b0:	dec00404 	addi	sp,sp,16
 80231b4:	f800283a 	ret

080231b8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
 80231b8:	defffc04 	addi	sp,sp,-16
 80231bc:	dfc00315 	stw	ra,12(sp)
 80231c0:	df000215 	stw	fp,8(sp)
 80231c4:	df000204 	addi	fp,sp,8
 80231c8:	e13ffe15 	stw	r4,-8(fp)
    alt_msgdma_dev* dev = NULL;
 80231cc:	e03fff15 	stw	zero,-4(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
 80231d0:	d1602804 	addi	r5,gp,-32608
 80231d4:	e13ffe17 	ldw	r4,-8(fp)
 80231d8:	803ad780 	call	803ad78 <alt_find_dev>
 80231dc:	e0bfff15 	stw	r2,-4(fp)

    if (NULL == dev)
 80231e0:	e0bfff17 	ldw	r2,-4(fp)
 80231e4:	1000041e 	bne	r2,zero,80231f8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
 80231e8:	80213a40 	call	80213a4 <alt_get_errno>
 80231ec:	1007883a 	mov	r3,r2
 80231f0:	008004c4 	movi	r2,19
 80231f4:	18800015 	stw	r2,0(r3)
    }

    return dev;
 80231f8:	e0bfff17 	ldw	r2,-4(fp)
}
 80231fc:	e037883a 	mov	sp,fp
 8023200:	dfc00117 	ldw	ra,4(sp)
 8023204:	df000017 	ldw	fp,0(sp)
 8023208:	dec00204 	addi	sp,sp,8
 802320c:	f800283a 	ret

08023210 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 8023210:	defff604 	addi	sp,sp,-40
 8023214:	dfc00915 	stw	ra,36(sp)
 8023218:	df000815 	stw	fp,32(sp)
 802321c:	df000804 	addi	fp,sp,32
 8023220:	e13ffb15 	stw	r4,-20(fp)
 8023224:	e17ffa15 	stw	r5,-24(fp)
 8023228:	e1bff915 	stw	r6,-28(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
 802322c:	e0bffb17 	ldw	r2,-20(fp)
 8023230:	10801783 	ldbu	r2,94(r2)
 8023234:	10803fcc 	andi	r2,r2,255
 8023238:	10000a26 	beq	r2,zero,8023264 <alt_msgdma_init+0x54>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
 802323c:	e0bffb17 	ldw	r2,-20(fp)
 8023240:	10800617 	ldw	r2,24(r2)
 8023244:	00c00104 	movi	r3,4
 8023248:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
 802324c:	0001883a 	nop
 8023250:	e0bffb17 	ldw	r2,-20(fp)
 8023254:	10800617 	ldw	r2,24(r2)
 8023258:	10800037 	ldwio	r2,0(r2)
 802325c:	1080010c 	andi	r2,r2,4
 8023260:	103ffb1e 	bne	r2,zero,8023250 <alt_msgdma_init+0x40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
 8023264:	e0bffb17 	ldw	r2,-20(fp)
 8023268:	10800317 	ldw	r2,12(r2)
 802326c:	10800104 	addi	r2,r2,4
 8023270:	00c00084 	movi	r3,2
 8023274:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 8023278:	0001883a 	nop
 802327c:	e0bffb17 	ldw	r2,-20(fp)
 8023280:	10800317 	ldw	r2,12(r2)
 8023284:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
 8023288:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 802328c:	103ffb1e 	bne	r2,zero,802327c <alt_msgdma_init+0x6c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 8023290:	e0bffb17 	ldw	r2,-20(fp)
 8023294:	10800317 	ldw	r2,12(r2)
 8023298:	10800104 	addi	r2,r2,4
 802329c:	10800037 	ldwio	r2,0(r2)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 80232a0:	1007883a 	mov	r3,r2
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 80232a4:	00bffbc4 	movi	r2,-17
 80232a8:	1884703a 	and	r2,r3,r2
 80232ac:	e0bfff15 	stw	r2,-4(fp)
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 80232b0:	e0bfff17 	ldw	r2,-4(fp)
 80232b4:	10800814 	ori	r2,r2,32
 80232b8:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 80232bc:	e0bffb17 	ldw	r2,-20(fp)
 80232c0:	10800317 	ldw	r2,12(r2)
 80232c4:	10800104 	addi	r2,r2,4
 80232c8:	e0ffff17 	ldw	r3,-4(fp)
 80232cc:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
 80232d0:	e0bffb17 	ldw	r2,-20(fp)
 80232d4:	10800317 	ldw	r2,12(r2)
 80232d8:	e0fffb17 	ldw	r3,-20(fp)
 80232dc:	18c00317 	ldw	r3,12(r3)
 80232e0:	18c00037 	ldwio	r3,0(r3)
 80232e4:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
 80232e8:	e0bffb17 	ldw	r2,-20(fp)
 80232ec:	10801783 	ldbu	r2,94(r2)
 80232f0:	10803fcc 	andi	r2,r2,255
 80232f4:	10000826 	beq	r2,zero,8023318 <alt_msgdma_init+0x108>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
 80232f8:	e0bffb17 	ldw	r2,-20(fp)
 80232fc:	10800617 	ldw	r2,24(r2)
 8023300:	10800404 	addi	r2,r2,16
 8023304:	e0fffb17 	ldw	r3,-20(fp)
 8023308:	18c00617 	ldw	r3,24(r3)
 802330c:	18c00404 	addi	r3,r3,16
 8023310:	18c00037 	ldwio	r3,0(r3)
 8023314:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
 8023318:	d1602804 	addi	r5,gp,-32608
 802331c:	e13ffb17 	ldw	r4,-20(fp)
 8023320:	803ac080 	call	803ac08 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8023324:	e0bffb17 	ldw	r2,-20(fp)
 8023328:	10801804 	addi	r2,r2,96
 802332c:	e0bffd15 	stw	r2,-12(fp)
 8023330:	00800044 	movi	r2,1
 8023334:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
 8023338:	e0bffc8b 	ldhu	r2,-14(fp)
 802333c:	1009883a 	mov	r4,r2
 8023340:	80165980 	call	8016598 <OSSemCreate>
 8023344:	1007883a 	mov	r3,r2
 8023348:	e0bffd17 	ldw	r2,-12(fp)
 802334c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 8023350:	e0bffd17 	ldw	r2,-12(fp)
 8023354:	10800017 	ldw	r2,0(r2)
 8023358:	10000226 	beq	r2,zero,8023364 <alt_msgdma_init+0x154>
 802335c:	0005883a 	mov	r2,zero
 8023360:	00000106 	br	8023368 <alt_msgdma_init+0x158>
 8023364:	00bfffc4 	movi	r2,-1
 8023368:	e0bffe15 	stw	r2,-8(fp)
            
    if (!error)
 802336c:	e0bffe17 	ldw	r2,-8(fp)
 8023370:	1000081e 	bne	r2,zero,8023394 <alt_msgdma_init+0x184>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
 8023374:	d8000015 	stw	zero,0(sp)
 8023378:	e1fffb17 	ldw	r7,-20(fp)
 802337c:	018200b4 	movhi	r6,2050
 8023380:	31856804 	addi	r6,r6,5536
 8023384:	e17ff917 	ldw	r5,-28(fp)
 8023388:	e13ffa17 	ldw	r4,-24(fp)
 802338c:	803aec40 	call	803aec4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
 8023390:	00000406 	br	80233a4 <alt_msgdma_init+0x194>
        alt_printf("failed to create semaphores\n");
 8023394:	01020174 	movhi	r4,2053
 8023398:	21075604 	addi	r4,r4,7512
 802339c:	803b4d00 	call	803b4d0 <alt_printf>
    return;
 80233a0:	0001883a 	nop

}
 80233a4:	e037883a 	mov	sp,fp
 80233a8:	dfc00117 	ldw	ra,4(sp)
 80233ac:	df000017 	ldw	fp,0(sp)
 80233b0:	dec00204 	addi	sp,sp,8
 80233b4:	f800283a 	ret

080233b8 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
 80233b8:	defffb04 	addi	sp,sp,-20
 80233bc:	df000415 	stw	fp,16(sp)
 80233c0:	df000404 	addi	fp,sp,16
 80233c4:	e13fff15 	stw	r4,-4(fp)
 80233c8:	e17ffe15 	stw	r5,-8(fp)
 80233cc:	e1bffd15 	stw	r6,-12(fp)
 80233d0:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 80233d4:	e0bfff17 	ldw	r2,-4(fp)
 80233d8:	e0fffe17 	ldw	r3,-8(fp)
 80233dc:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
 80233e0:	e0bfff17 	ldw	r2,-4(fp)
 80233e4:	e0fffc17 	ldw	r3,-16(fp)
 80233e8:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
 80233ec:	e0bfff17 	ldw	r2,-4(fp)
 80233f0:	e0fffd17 	ldw	r3,-12(fp)
 80233f4:	10c00d15 	stw	r3,52(r2)

    return ;
 80233f8:	0001883a 	nop
}
 80233fc:	e037883a 	mov	sp,fp
 8023400:	df000017 	ldw	fp,0(sp)
 8023404:	dec00104 	addi	sp,sp,4
 8023408:	f800283a 	ret

0802340c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 802340c:	defffc04 	addi	sp,sp,-16
 8023410:	dfc00315 	stw	ra,12(sp)
 8023414:	df000215 	stw	fp,8(sp)
 8023418:	df000204 	addi	fp,sp,8
 802341c:	e13fff15 	stw	r4,-4(fp)
 8023420:	e17ffe15 	stw	r5,-8(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
 8023424:	000d883a 	mov	r6,zero
 8023428:	e17ffe17 	ldw	r5,-8(fp)
 802342c:	e13fff17 	ldw	r4,-4(fp)
 8023430:	80219080 	call	8021908 <alt_msgdma_descriptor_async_transfer>

}
 8023434:	e037883a 	mov	sp,fp
 8023438:	dfc00117 	ldw	ra,4(sp)
 802343c:	df000017 	ldw	fp,0(sp)
 8023440:	dec00204 	addi	sp,sp,8
 8023444:	f800283a 	ret

08023448 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 8023448:	defffc04 	addi	sp,sp,-16
 802344c:	dfc00315 	stw	ra,12(sp)
 8023450:	df000215 	stw	fp,8(sp)
 8023454:	df000204 	addi	fp,sp,8
 8023458:	e13fff15 	stw	r4,-4(fp)
 802345c:	e17ffe15 	stw	r5,-8(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
 8023460:	e1bffe17 	ldw	r6,-8(fp)
 8023464:	000b883a 	mov	r5,zero
 8023468:	e13fff17 	ldw	r4,-4(fp)
 802346c:	80219080 	call	8021908 <alt_msgdma_descriptor_async_transfer>
}
 8023470:	e037883a 	mov	sp,fp
 8023474:	dfc00117 	ldw	ra,4(sp)
 8023478:	df000017 	ldw	fp,0(sp)
 802347c:	dec00204 	addi	sp,sp,8
 8023480:	f800283a 	ret

08023484 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 8023484:	defffc04 	addi	sp,sp,-16
 8023488:	dfc00315 	stw	ra,12(sp)
 802348c:	df000215 	stw	fp,8(sp)
 8023490:	df000204 	addi	fp,sp,8
 8023494:	e13fff15 	stw	r4,-4(fp)
 8023498:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
 802349c:	000d883a 	mov	r6,zero
 80234a0:	e17ffe17 	ldw	r5,-8(fp)
 80234a4:	e13fff17 	ldw	r4,-4(fp)
 80234a8:	8021c4c0 	call	8021c4c <alt_msgdma_descriptor_sync_transfer>
}
 80234ac:	e037883a 	mov	sp,fp
 80234b0:	dfc00117 	ldw	ra,4(sp)
 80234b4:	df000017 	ldw	fp,0(sp)
 80234b8:	dec00204 	addi	sp,sp,8
 80234bc:	f800283a 	ret

080234c0 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 80234c0:	defffc04 	addi	sp,sp,-16
 80234c4:	dfc00315 	stw	ra,12(sp)
 80234c8:	df000215 	stw	fp,8(sp)
 80234cc:	df000204 	addi	fp,sp,8
 80234d0:	e13fff15 	stw	r4,-4(fp)
 80234d4:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
 80234d8:	e1bffe17 	ldw	r6,-8(fp)
 80234dc:	000b883a 	mov	r5,zero
 80234e0:	e13fff17 	ldw	r4,-4(fp)
 80234e4:	8021c4c0 	call	8021c4c <alt_msgdma_descriptor_sync_transfer>
}
 80234e8:	e037883a 	mov	sp,fp
 80234ec:	dfc00117 	ldw	ra,4(sp)
 80234f0:	df000017 	ldw	fp,0(sp)
 80234f4:	dec00204 	addi	sp,sp,8
 80234f8:	f800283a 	ret

080234fc <altera_eth_tse_init>:
 * @Return ENP_HARDWARE on error, otherwise return SUCCESS
 */

error_t altera_eth_tse_init(
    alt_iniche_dev              *p_dev)
{
 80234fc:	defffa04 	addi	sp,sp,-24
 8023500:	dfc00515 	stw	ra,20(sp)
 8023504:	df000415 	stw	fp,16(sp)
 8023508:	df000404 	addi	fp,sp,16
 802350c:	e13ffc15 	stw	r4,-16(fp)
    int i;
    
    alt_tse_iniche_dev_driver_data *p_driver_data = 0;
 8023510:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys_info = 0;
 8023514:	e03ffd15 	stw	zero,-12(fp)

    dprintf("altera_eth_tse_init %d\n", p_dev->if_num);
 8023518:	e0bffc17 	ldw	r2,-16(fp)
 802351c:	10800517 	ldw	r2,20(r2)
 8023520:	100b883a 	mov	r5,r2
 8023524:	01020174 	movhi	r4,2053
 8023528:	21075e04 	addi	r4,r4,7544
 802352c:	800325c0 	call	800325c <printf>
       
    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 8023530:	e03fff15 	stw	zero,-4(fp)
 8023534:	00001006 	br	8023578 <altera_eth_tse_init+0x7c>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
 8023538:	e0bfff17 	ldw	r2,-4(fp)
 802353c:	10c00324 	muli	r3,r2,12
 8023540:	008201b4 	movhi	r2,2054
 8023544:	1885883a 	add	r2,r3,r2
 8023548:	10b96517 	ldw	r2,-6764(r2)
 802354c:	e0fffc17 	ldw	r3,-16(fp)
 8023550:	1880061e 	bne	r3,r2,802356c <altera_eth_tse_init+0x70>
            p_driver_data = &tse_iniche_dev_driver_data[i];
 8023554:	e0bfff17 	ldw	r2,-4(fp)
 8023558:	10c00324 	muli	r3,r2,12
 802355c:	008201b4 	movhi	r2,2054
 8023560:	10b96504 	addi	r2,r2,-6764
 8023564:	1885883a 	add	r2,r3,r2
 8023568:	e0bffe15 	stw	r2,-8(fp)
    for(i = 0; i < number_of_tse_mac; i++) {
 802356c:	e0bfff17 	ldw	r2,-4(fp)
 8023570:	10800044 	addi	r2,r2,1
 8023574:	e0bfff15 	stw	r2,-4(fp)
 8023578:	d0a07b03 	ldbu	r2,-32276(gp)
 802357c:	10803fcc 	andi	r2,r2,255
 8023580:	e0ffff17 	ldw	r3,-4(fp)
 8023584:	18bfec16 	blt	r3,r2,8023538 <altera_eth_tse_init+0x3c>
        }
    }
    /* If pointer could not found */
    if(p_driver_data == 0) {
 8023588:	e0bffe17 	ldw	r2,-8(fp)
 802358c:	1000021e 	bne	r2,zero,8023598 <altera_eth_tse_init+0x9c>
        return ENP_HARDWARE;
 8023590:	00bff744 	movi	r2,-35
 8023594:	00002606 	br	8023630 <altera_eth_tse_init+0x134>
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 8023598:	e03fff15 	stw	zero,-4(fp)
 802359c:	00001106 	br	80235e4 <altera_eth_tse_init+0xe8>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 80235a0:	e0bfff17 	ldw	r2,-4(fp)
 80235a4:	10c01324 	muli	r3,r2,76
 80235a8:	00820174 	movhi	r2,2053
 80235ac:	1885883a 	add	r2,r3,r2
 80235b0:	10d06217 	ldw	r3,16776(r2)
 80235b4:	e0bffe17 	ldw	r2,-8(fp)
 80235b8:	10800117 	ldw	r2,4(r2)
 80235bc:	1880061e 	bne	r3,r2,80235d8 <altera_eth_tse_init+0xdc>
            psys_info = &tse_mac_device[i];
 80235c0:	e0bfff17 	ldw	r2,-4(fp)
 80235c4:	10c01324 	muli	r3,r2,76
 80235c8:	00820174 	movhi	r2,2053
 80235cc:	10906204 	addi	r2,r2,16776
 80235d0:	1885883a 	add	r2,r3,r2
 80235d4:	e0bffd15 	stw	r2,-12(fp)
    for(i = 0; i < max_mac_system; i++) {
 80235d8:	e0bfff17 	ldw	r2,-4(fp)
 80235dc:	10800044 	addi	r2,r2,1
 80235e0:	e0bfff15 	stw	r2,-4(fp)
 80235e4:	d0a02703 	ldbu	r2,-32612(gp)
 80235e8:	10803fcc 	andi	r2,r2,255
 80235ec:	e0ffff17 	ldw	r3,-4(fp)
 80235f0:	18bfeb16 	blt	r3,r2,80235a0 <altera_eth_tse_init+0xa4>
        }
    }
    /* If pointer could not found */
    if(psys_info == 0) {
 80235f4:	e0bffd17 	ldw	r2,-12(fp)
 80235f8:	1000021e 	bne	r2,zero,8023604 <altera_eth_tse_init+0x108>
        return ENP_HARDWARE;
 80235fc:	00bff744 	movi	r2,-35
 8023600:	00000b06 	br	8023630 <altera_eth_tse_init+0x134>
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
 8023604:	e0bffc17 	ldw	r2,-16(fp)
 8023608:	11000517 	ldw	r4,20(r2)
 802360c:	e0bffe17 	ldw	r2,-8(fp)
 8023610:	10800203 	ldbu	r2,8(r2)
 8023614:	10803fcc 	andi	r2,r2,255
 8023618:	10801324 	muli	r2,r2,76
 802361c:	e0fffd17 	ldw	r3,-12(fp)
 8023620:	1885883a 	add	r2,r3,r2
 8023624:	100b883a 	mov	r5,r2
 8023628:	80236440 	call	8023644 <prep_tse_mac>
    
    return SUCCESS;
 802362c:	0005883a 	mov	r2,zero
}
 8023630:	e037883a 	mov	sp,fp
 8023634:	dfc00117 	ldw	ra,4(sp)
 8023638:	df000017 	ldw	fp,0(sp)
 802363c:	dec00204 	addi	sp,sp,8
 8023640:	f800283a 	ret

08023644 <prep_tse_mac>:
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 8023644:	defffb04 	addi	sp,sp,-20
 8023648:	dfc00415 	stw	ra,16(sp)
 802364c:	df000315 	stw	fp,12(sp)
 8023650:	df000304 	addi	fp,sp,12
 8023654:	e13ffe15 	stw	r4,-8(fp)
 8023658:	e17ffd15 	stw	r5,-12(fp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 802365c:	e17ffe17 	ldw	r5,-8(fp)
 8023660:	01020174 	movhi	r4,2053
 8023664:	21076404 	addi	r4,r4,7568
 8023668:	800325c0 	call	800325c <printf>
    {
        tse[index].sem = 0; /*Tx IDLE*/
 802366c:	e0bffe17 	ldw	r2,-8(fp)
 8023670:	10c02924 	muli	r3,r2,164
 8023674:	008201b4 	movhi	r2,2054
 8023678:	1885883a 	add	r2,r3,r2
 802367c:	10397c15 	stw	zero,-6672(r2)
        tse[index].tse = (void *)psys_info;
 8023680:	e0bffe17 	ldw	r2,-8(fp)
 8023684:	11002924 	muli	r4,r2,164
 8023688:	e0fffd17 	ldw	r3,-12(fp)
 802368c:	008201b4 	movhi	r2,2054
 8023690:	2085883a 	add	r2,r4,r2
 8023694:	10f99915 	stw	r3,-6556(r2)

        ifp = nets[index];
 8023698:	e0bffe17 	ldw	r2,-8(fp)
 802369c:	100690ba 	slli	r3,r2,2
 80236a0:	008201b4 	movhi	r2,2054
 80236a4:	1885883a 	add	r2,r3,r2
 80236a8:	10bada17 	ldw	r2,-5272(r2)
 80236ac:	e0bfff15 	stw	r2,-4(fp)
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 80236b0:	e0bfff17 	ldw	r2,-4(fp)
 80236b4:	10802717 	ldw	r2,156(r2)
 80236b8:	00c00084 	movi	r3,2
 80236bc:	10c00615 	stw	r3,24(r2)
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
 80236c0:	e0bfff17 	ldw	r2,-4(fp)
 80236c4:	10802717 	ldw	r2,156(r2)
 80236c8:	00c00084 	movi	r3,2
 80236cc:	10c00715 	stw	r3,28(r2)
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 80236d0:	e0bfff17 	ldw	r2,-4(fp)
 80236d4:	10802717 	ldw	r2,156(r2)
 80236d8:	d0e0a317 	ldw	r3,-32116(gp)
 80236dc:	10c00815 	stw	r3,32(r2)
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
 80236e0:	e0bfff17 	ldw	r2,-4(fp)
 80236e4:	10c02717 	ldw	r3,156(r2)
 80236e8:	e0bffe17 	ldw	r2,-8(fp)
 80236ec:	10802924 	muli	r2,r2,164
 80236f0:	11000604 	addi	r4,r2,24
 80236f4:	008201b4 	movhi	r2,2054
 80236f8:	10b97104 	addi	r2,r2,-6716
 80236fc:	2085883a 	add	r2,r4,r2
 8023700:	18800515 	stw	r2,20(r3)
        ifp->n_mib->ifDescr =       "Altera TSE MAC ethernet";
 8023704:	e0bfff17 	ldw	r2,-4(fp)
 8023708:	10c02717 	ldw	r3,156(r2)
 802370c:	00820174 	movhi	r2,2053
 8023710:	10876904 	addi	r2,r2,7588
 8023714:	18800115 	stw	r2,4(r3)
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
 8023718:	e0bfff17 	ldw	r2,-4(fp)
 802371c:	00c00404 	movi	r3,16
 8023720:	10c00815 	stw	r3,32(r2)
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
 8023724:	e0bfff17 	ldw	r2,-4(fp)
 8023728:	00c00184 	movi	r3,6
 802372c:	10c01115 	stw	r3,68(r2)
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
 8023730:	e0bfff17 	ldw	r2,-4(fp)
 8023734:	10802717 	ldw	r2,156(r2)
 8023738:	00c00184 	movi	r3,6
 802373c:	10c00215 	stw	r3,8(r2)
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
 8023740:	e0bfff17 	ldw	r2,-4(fp)
 8023744:	00c17a84 	movi	r3,1514
 8023748:	10c00915 	stw	r3,36(r2)
    
        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
 802374c:	e0ffff17 	ldw	r3,-4(fp)
 8023750:	008200b4 	movhi	r2,2050
 8023754:	108e3b04 	addi	r2,r2,14572
 8023758:	18800215 	stw	r2,8(r3)
        ifp->pkt_send =     NULL;
 802375c:	e0bfff17 	ldw	r2,-4(fp)
 8023760:	10000415 	stw	zero,16(r2)
        ifp->raw_send =     tse_mac_raw_send;
 8023764:	e0ffff17 	ldw	r3,-4(fp)
 8023768:	008200b4 	movhi	r2,2050
 802376c:	10911c04 	addi	r2,r2,17520
 8023770:	18800315 	stw	r2,12(r3)
        ifp->n_close =      tse_mac_close;
 8023774:	e0ffff17 	ldw	r3,-4(fp)
 8023778:	008200b4 	movhi	r2,2050
 802377c:	10936e04 	addi	r2,r2,19896
 8023780:	18800515 	stw	r2,20(r3)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
 8023784:	e0ffff17 	ldw	r3,-4(fp)
 8023788:	008200b4 	movhi	r2,2050
 802378c:	10935e04 	addi	r2,r2,19832
 8023790:	18800715 	stw	r2,28(r3)
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 8023794:	e0bfff17 	ldw	r2,-4(fp)
 8023798:	10802a17 	ldw	r2,168(r2)
 802379c:	10c00214 	ori	r3,r2,8
 80237a0:	e0bfff17 	ldw	r2,-4(fp)
 80237a4:	10c02a15 	stw	r3,168(r2)
    #endif
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
 80237a8:	e0bffe17 	ldw	r2,-8(fp)
 80237ac:	100690ba 	slli	r3,r2,2
 80237b0:	008201b4 	movhi	r2,2054
 80237b4:	1885883a 	add	r2,r3,r2
 80237b8:	10bada17 	ldw	r2,-5272(r2)
 80237bc:	10c02717 	ldw	r3,156(r2)
 80237c0:	e0bffe17 	ldw	r2,-8(fp)
 80237c4:	10802924 	muli	r2,r2,164
 80237c8:	11000604 	addi	r4,r2,24
 80237cc:	008201b4 	movhi	r2,2054
 80237d0:	10b97104 	addi	r2,r2,-6716
 80237d4:	2085883a 	add	r2,r4,r2
 80237d8:	18800515 	stw	r2,20(r3)
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
 80237dc:	e0bffe17 	ldw	r2,-8(fp)
 80237e0:	10802924 	muli	r2,r2,164
 80237e4:	10c00604 	addi	r3,r2,24
 80237e8:	008201b4 	movhi	r2,2054
 80237ec:	10b97104 	addi	r2,r2,-6716
 80237f0:	1885883a 	add	r2,r3,r2
 80237f4:	100b883a 	mov	r5,r2
 80237f8:	e13fff17 	ldw	r4,-4(fp)
 80237fc:	80025e00 	call	80025e0 <get_mac_addr>
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
 8023800:	e0bffe17 	ldw	r2,-8(fp)
 8023804:	11002924 	muli	r4,r2,164
 8023808:	e0fffe17 	ldw	r3,-8(fp)
 802380c:	008201b4 	movhi	r2,2054
 8023810:	2085883a 	add	r2,r4,r2
 8023814:	10f97115 	stw	r3,-6716(r2)
        tse[index].netp = ifp;
 8023818:	e0bffe17 	ldw	r2,-8(fp)
 802381c:	11002924 	muli	r4,r2,164
 8023820:	e0ffff17 	ldw	r3,-4(fp)
 8023824:	008201b4 	movhi	r2,2054
 8023828:	2085883a 	add	r2,r4,r2
 802382c:	10f97915 	stw	r3,-6684(r2)
        ifp->n_local = (void*)(&tse[index]);
 8023830:	e0bffe17 	ldw	r2,-8(fp)
 8023834:	10c02924 	muli	r3,r2,164
 8023838:	008201b4 	movhi	r2,2054
 802383c:	10b97104 	addi	r2,r2,-6716
 8023840:	1887883a 	add	r3,r3,r2
 8023844:	e0bfff17 	ldw	r2,-4(fp)
 8023848:	10c02815 	stw	r3,160(r2)
    
        index++;
 802384c:	e0bffe17 	ldw	r2,-8(fp)
 8023850:	10800044 	addi	r2,r2,1
 8023854:	e0bffe15 	stw	r2,-8(fp)
   }
 
   return index;
 8023858:	e0bffe17 	ldw	r2,-8(fp)
}
 802385c:	e037883a 	mov	sp,fp
 8023860:	dfc00117 	ldw	ra,4(sp)
 8023864:	df000017 	ldw	fp,0(sp)
 8023868:	dec00204 	addi	sp,sp,8
 802386c:	f800283a 	ret

08023870 <msgdma_reset>:

//temporary code for msgdma hw workaround
void msgdma_reset(alt_msgdma_dev * dev)
{
 8023870:	defffe04 	addi	sp,sp,-8
 8023874:	df000115 	stw	fp,4(sp)
 8023878:	df000104 	addi	fp,sp,4
 802387c:	e13fff15 	stw	r4,-4(fp)

   /* start prefetcher reset sequence */
   IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
 8023880:	e0bfff17 	ldw	r2,-4(fp)
 8023884:	10800617 	ldw	r2,24(r2)
 8023888:	00c00104 	movi	r3,4
 802388c:	10c00035 	stwio	r3,0(r2)
   ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
   /* wait until hw clears the bit */
   while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
 8023890:	0001883a 	nop
 8023894:	e0bfff17 	ldw	r2,-4(fp)
 8023898:	10800617 	ldw	r2,24(r2)
 802389c:	10800037 	ldwio	r2,0(r2)
 80238a0:	1080010c 	andi	r2,r2,4
 80238a4:	103ffb1e 	bne	r2,zero,8023894 <msgdma_reset+0x24>
    */

    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
 80238a8:	e0bfff17 	ldw	r2,-4(fp)
 80238ac:	10800317 	ldw	r2,12(r2)
 80238b0:	10800104 	addi	r2,r2,4
 80238b4:	00c00084 	movi	r3,2
 80238b8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 80238bc:	0001883a 	nop
 80238c0:	e0bfff17 	ldw	r2,-4(fp)
 80238c4:	10800317 	ldw	r2,12(r2)
 80238c8:	10800037 	ldwio	r2,0(r2)
                   & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
 80238cc:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 80238d0:	103ffb1e 	bne	r2,zero,80238c0 <msgdma_reset+0x50>

}  
 80238d4:	0001883a 	nop
 80238d8:	0001883a 	nop
 80238dc:	e037883a 	mov	sp,fp
 80238e0:	df000017 	ldw	fp,0(sp)
 80238e4:	dec00104 	addi	sp,sp,4
 80238e8:	f800283a 	ret

080238ec <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 80238ec:	defff104 	addi	sp,sp,-60
 80238f0:	dfc00e15 	stw	ra,56(sp)
 80238f4:	df000d15 	stw	fp,52(sp)
 80238f8:	df000d04 	addi	fp,sp,52
 80238fc:	e13ff415 	stw	r4,-48(fp)
   int dat;
   int speed, duplex, result, x;
   int status = SUCCESS;
 8023900:	e03ffd15 	stw	zero,-12(fp)
   
   alt_msgdma_dev *msgdma_tx_dev;
   alt_msgdma_dev *msgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 8023904:	e0bff417 	ldw	r2,-48(fp)
 8023908:	10c02924 	muli	r3,r2,164
 802390c:	008201b4 	movhi	r2,2054
 8023910:	1885883a 	add	r2,r3,r2
 8023914:	10b99917 	ldw	r2,-6556(r2)
 8023918:	e0bffa15 	stw	r2,-24(fp)
   
   dprintf("tse_mac_init %d\n", iface);
 802391c:	e17ff417 	ldw	r5,-48(fp)
 8023920:	01020174 	movhi	r4,2053
 8023924:	21076f04 	addi	r4,r4,7612
 8023928:	800325c0 	call	800325c <printf>

    if (tse_hw->ext_desc_mem == 1) {
 802392c:	e0bffa17 	ldw	r2,-24(fp)
 8023930:	10800883 	ldbu	r2,34(r2)
 8023934:	10803fcc 	andi	r2,r2,255
 8023938:	10800058 	cmpnei	r2,r2,1
 802393c:	10001b1e 	bne	r2,zero,80239ac <tse_mac_init+0xc0>
        tse[iface].rxdesc[0] = (alt_msgdma_prefetcher_standard_descriptor *) tse_hw->desc_mem_base;
 8023940:	e0bffa17 	ldw	r2,-24(fp)
 8023944:	10800917 	ldw	r2,36(r2)
 8023948:	1009883a 	mov	r4,r2
 802394c:	e0bff417 	ldw	r2,-48(fp)
 8023950:	10c02924 	muli	r3,r2,164
 8023954:	008201b4 	movhi	r2,2054
 8023958:	1885883a 	add	r2,r3,r2
 802395c:	11398215 	stw	r4,-6648(r2)
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *) 
               (tse_hw->desc_mem_base + ((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor))));          
 8023960:	e0bffa17 	ldw	r2,-24(fp)
 8023964:	10800917 	ldw	r2,36(r2)
 8023968:	10805004 	addi	r2,r2,320
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *) 
 802396c:	1009883a 	mov	r4,r2
 8023970:	e0bff417 	ldw	r2,-48(fp)
 8023974:	10c02924 	muli	r3,r2,164
 8023978:	008201b4 	movhi	r2,2054
 802397c:	1885883a 	add	r2,r3,r2
 8023980:	11398315 	stw	r4,-6644(r2)
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *) 
               (tse_hw->desc_mem_base + ((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE+1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor))));          
 8023984:	e0bffa17 	ldw	r2,-24(fp)
 8023988:	10800917 	ldw	r2,36(r2)
 802398c:	1080a004 	addi	r2,r2,640
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *) 
 8023990:	1009883a 	mov	r4,r2
 8023994:	e0bff417 	ldw	r2,-48(fp)
 8023998:	10c02924 	muli	r3,r2,164
 802399c:	008201b4 	movhi	r2,2054
 80239a0:	1885883a 	add	r2,r3,r2
 80239a4:	11397f15 	stw	r4,-6660(r2)
 80239a8:	00005106 	br	8023af0 <tse_mac_init+0x204>
    }
    else {
        tse[iface].rxdesc[0] = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 80239ac:	01005004 	movi	r4,320
 80239b0:	803bae00 	call	803bae0 <alt_uncached_malloc>
 80239b4:	1009883a 	mov	r4,r2
 80239b8:	e0bff417 	ldw	r2,-48(fp)
 80239bc:	10c02924 	muli	r3,r2,164
 80239c0:	008201b4 	movhi	r2,2054
 80239c4:	1885883a 	add	r2,r3,r2
 80239c8:	11398215 	stw	r4,-6648(r2)
        while ((((alt_u32)tse[iface].rxdesc[0]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 80239cc:	00000b06 	br	80239fc <tse_mac_init+0x110>
        tse[iface].rxdesc[0]++;  //boundary
 80239d0:	e0bff417 	ldw	r2,-48(fp)
 80239d4:	10c02924 	muli	r3,r2,164
 80239d8:	008201b4 	movhi	r2,2054
 80239dc:	1885883a 	add	r2,r3,r2
 80239e0:	10b98217 	ldw	r2,-6648(r2)
 80239e4:	10c00804 	addi	r3,r2,32
 80239e8:	e0bff417 	ldw	r2,-48(fp)
 80239ec:	11002924 	muli	r4,r2,164
 80239f0:	008201b4 	movhi	r2,2054
 80239f4:	2085883a 	add	r2,r4,r2
 80239f8:	10f98215 	stw	r3,-6648(r2)
        while ((((alt_u32)tse[iface].rxdesc[0]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 80239fc:	e0bff417 	ldw	r2,-48(fp)
 8023a00:	10c02924 	muli	r3,r2,164
 8023a04:	008201b4 	movhi	r2,2054
 8023a08:	1885883a 	add	r2,r3,r2
 8023a0c:	10b98217 	ldw	r2,-6648(r2)
 8023a10:	108007cc 	andi	r2,r2,31
 8023a14:	103fee1e 	bne	r2,zero,80239d0 <tse_mac_init+0xe4>
          
        tse[iface].rxdesc[1] = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 8023a18:	01005004 	movi	r4,320
 8023a1c:	803bae00 	call	803bae0 <alt_uncached_malloc>
 8023a20:	1009883a 	mov	r4,r2
 8023a24:	e0bff417 	ldw	r2,-48(fp)
 8023a28:	10c02924 	muli	r3,r2,164
 8023a2c:	008201b4 	movhi	r2,2054
 8023a30:	1885883a 	add	r2,r3,r2
 8023a34:	11398315 	stw	r4,-6644(r2)
        while ((((alt_u32)tse[iface].rxdesc[1]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 8023a38:	00000b06 	br	8023a68 <tse_mac_init+0x17c>
        tse[iface].rxdesc[1]++;  //boundary  
 8023a3c:	e0bff417 	ldw	r2,-48(fp)
 8023a40:	10c02924 	muli	r3,r2,164
 8023a44:	008201b4 	movhi	r2,2054
 8023a48:	1885883a 	add	r2,r3,r2
 8023a4c:	10b98317 	ldw	r2,-6644(r2)
 8023a50:	10c00804 	addi	r3,r2,32
 8023a54:	e0bff417 	ldw	r2,-48(fp)
 8023a58:	11002924 	muli	r4,r2,164
 8023a5c:	008201b4 	movhi	r2,2054
 8023a60:	2085883a 	add	r2,r4,r2
 8023a64:	10f98315 	stw	r3,-6644(r2)
        while ((((alt_u32)tse[iface].rxdesc[1]) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0) 
 8023a68:	e0bff417 	ldw	r2,-48(fp)
 8023a6c:	10c02924 	muli	r3,r2,164
 8023a70:	008201b4 	movhi	r2,2054
 8023a74:	1885883a 	add	r2,r3,r2
 8023a78:	10b98317 	ldw	r2,-6644(r2)
 8023a7c:	108007cc 	andi	r2,r2,31
 8023a80:	103fee1e 	bne	r2,zero,8023a3c <tse_mac_init+0x150>
    
        tse[iface].txdesc = (alt_msgdma_prefetcher_standard_descriptor *)alt_uncached_malloc((1+ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE)*(sizeof(alt_msgdma_prefetcher_standard_descriptor)));
 8023a84:	01001804 	movi	r4,96
 8023a88:	803bae00 	call	803bae0 <alt_uncached_malloc>
 8023a8c:	1009883a 	mov	r4,r2
 8023a90:	e0bff417 	ldw	r2,-48(fp)
 8023a94:	10c02924 	muli	r3,r2,164
 8023a98:	008201b4 	movhi	r2,2054
 8023a9c:	1885883a 	add	r2,r3,r2
 8023aa0:	11397f15 	stw	r4,-6660(r2)
        while ((((alt_u32)tse[iface].txdesc) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0)  
 8023aa4:	00000b06 	br	8023ad4 <tse_mac_init+0x1e8>
          tse[iface].txdesc++;  //boundary
 8023aa8:	e0bff417 	ldw	r2,-48(fp)
 8023aac:	10c02924 	muli	r3,r2,164
 8023ab0:	008201b4 	movhi	r2,2054
 8023ab4:	1885883a 	add	r2,r3,r2
 8023ab8:	10b97f17 	ldw	r2,-6660(r2)
 8023abc:	10c00804 	addi	r3,r2,32
 8023ac0:	e0bff417 	ldw	r2,-48(fp)
 8023ac4:	11002924 	muli	r4,r2,164
 8023ac8:	008201b4 	movhi	r2,2054
 8023acc:	2085883a 	add	r2,r4,r2
 8023ad0:	10f97f15 	stw	r3,-6660(r2)
        while ((((alt_u32)tse[iface].txdesc) % sizeof(alt_msgdma_prefetcher_standard_descriptor)) != 0)  
 8023ad4:	e0bff417 	ldw	r2,-48(fp)
 8023ad8:	10c02924 	muli	r3,r2,164
 8023adc:	008201b4 	movhi	r2,2054
 8023ae0:	1885883a 	add	r2,r3,r2
 8023ae4:	10b97f17 	ldw	r2,-6660(r2)
 8023ae8:	108007cc 	andi	r2,r2,31
 8023aec:	103fee1e 	bne	r2,zero,8023aa8 <tse_mac_init+0x1bc>
    }
   
    /* Get the Rx and Tx MSGDMA addresses */
    msgdma_tx_dev = alt_msgdma_open(tse_hw->tse_msgdma_tx); 
 8023af0:	e0bffa17 	ldw	r2,-24(fp)
 8023af4:	10800617 	ldw	r2,24(r2)
 8023af8:	1009883a 	mov	r4,r2
 8023afc:	80231b80 	call	80231b8 <alt_msgdma_open>
 8023b00:	e0bff915 	stw	r2,-28(fp)
    
    if(!msgdma_tx_dev) {
 8023b04:	e0bff917 	ldw	r2,-28(fp)
 8023b08:	1000051e 	bne	r2,zero,8023b20 <tse_mac_init+0x234>
      dprintf("[altera_eth_tse_init] Error opening TX MSGDMA\n");
 8023b0c:	01020174 	movhi	r4,2053
 8023b10:	21077404 	addi	r4,r4,7632
 8023b14:	80033800 	call	8003380 <puts>
      return ENP_RESOURCE;
 8023b18:	00bffa84 	movi	r2,-22
 8023b1c:	00020706 	br	802433c <tse_mac_init+0xa50>
    }
  
    msgdma_rx_dev = alt_msgdma_open(tse_hw->tse_msgdma_rx);
 8023b20:	e0bffa17 	ldw	r2,-24(fp)
 8023b24:	10800717 	ldw	r2,28(r2)
 8023b28:	1009883a 	mov	r4,r2
 8023b2c:	80231b80 	call	80231b8 <alt_msgdma_open>
 8023b30:	e0bff815 	stw	r2,-32(fp)
    if(!msgdma_rx_dev) {
 8023b34:	e0bff817 	ldw	r2,-32(fp)
 8023b38:	1000051e 	bne	r2,zero,8023b50 <tse_mac_init+0x264>
      dprintf("[altera_eth_tse_init] Error opening RX MSGDMA\n");
 8023b3c:	01020174 	movhi	r4,2053
 8023b40:	21078004 	addi	r4,r4,7680
 8023b44:	80033800 	call	8003380 <puts>
      return ENP_RESOURCE;
 8023b48:	00bffa84 	movi	r2,-22
 8023b4c:	0001fb06 	br	802433c <tse_mac_init+0xa50>
    }

    /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
    tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 8023b50:	e0bff417 	ldw	r2,-48(fp)
 8023b54:	10802924 	muli	r2,r2,164
 8023b58:	10c00104 	addi	r3,r2,4
 8023b5c:	008201b4 	movhi	r2,2054
 8023b60:	10b97104 	addi	r2,r2,-6716
 8023b64:	1887883a 	add	r3,r3,r2
 8023b68:	e0bffa17 	ldw	r2,-24(fp)
 8023b6c:	10800017 	ldw	r2,0(r2)
 8023b70:	e13ff917 	ldw	r4,-28(fp)
 8023b74:	e17ff817 	ldw	r5,-32(fp)
 8023b78:	d8000015 	stw	zero,0(sp)
 8023b7c:	280f883a 	mov	r7,r5
 8023b80:	200d883a 	mov	r6,r4
 8023b84:	100b883a 	mov	r5,r2
 8023b88:	1809883a 	mov	r4,r3
 8023b8c:	801b9900 	call	801b990 <tse_mac_initTransInfo2>
                                   (unsigned int)msgdma_tx_dev,            
                                   (unsigned int)msgdma_rx_dev,
                                   0);

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 8023b90:	e0bff417 	ldw	r2,-48(fp)
 8023b94:	10c02924 	muli	r3,r2,164
 8023b98:	008201b4 	movhi	r2,2054
 8023b9c:	1885883a 	add	r2,r3,r2
 8023ba0:	10b97217 	ldw	r2,-6712(r2)
 8023ba4:	1009883a 	mov	r4,r2
 8023ba8:	801cc940 	call	801cc94 <getPHYSpeed>
 8023bac:	e0bff715 	stw	r2,-36(fp)
   speed = (result >> 1) & 0x07;
 8023bb0:	e0bff717 	ldw	r2,-36(fp)
 8023bb4:	1005d07a 	srai	r2,r2,1
 8023bb8:	108001cc 	andi	r2,r2,7
 8023bbc:	e0bff615 	stw	r2,-40(fp)
   duplex = result & 0x01;
 8023bc0:	e0bff717 	ldw	r2,-36(fp)
 8023bc4:	1080004c 	andi	r2,r2,1
 8023bc8:	e0bff515 	stw	r2,-44(fp)
   
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 8023bcc:	e0bff417 	ldw	r2,-48(fp)
 8023bd0:	10c02924 	muli	r3,r2,164
 8023bd4:	008201b4 	movhi	r2,2054
 8023bd8:	1885883a 	add	r2,r3,r2
 8023bdc:	10b97217 	ldw	r2,-6712(r2)
 8023be0:	10800204 	addi	r2,r2,8
 8023be4:	00c800c4 	movi	r3,8195
 8023be8:	10c00035 	stwio	r3,0(r2)
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
 8023bec:	e03ffe15 	stw	zero,-8(fp)
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 8023bf0:	00000506 	br	8023c08 <tse_mac_init+0x31c>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
 8023bf4:	e0bffe17 	ldw	r2,-8(fp)
 8023bf8:	10c00044 	addi	r3,r2,1
 8023bfc:	e0fffe15 	stw	r3,-8(fp)
 8023c00:	1089c450 	cmplti	r2,r2,10001
 8023c04:	10000a26 	beq	r2,zero,8023c30 <tse_mac_init+0x344>
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 8023c08:	e0bff417 	ldw	r2,-48(fp)
 8023c0c:	10c02924 	muli	r3,r2,164
 8023c10:	008201b4 	movhi	r2,2054
 8023c14:	1885883a 	add	r2,r3,r2
 8023c18:	10b97217 	ldw	r2,-6712(r2)
 8023c1c:	10800204 	addi	r2,r2,8
 8023c20:	10800037 	ldwio	r2,0(r2)
 8023c24:	1088000c 	andi	r2,r2,8192
 8023c28:	103ff21e 	bne	r2,zero,8023bf4 <tse_mac_init+0x308>
 8023c2c:	00000106 	br	8023c34 <tse_mac_init+0x348>
       break;
 8023c30:	0001883a 	nop
     }
   }
   if(x >= 10000) {
 8023c34:	e0bffe17 	ldw	r2,-8(fp)
 8023c38:	1089c410 	cmplti	r2,r2,10000
 8023c3c:	1000031e 	bne	r2,zero,8023c4c <tse_mac_init+0x360>
     dprintf("TSEMAC SW reset bit never cleared!\n");
 8023c40:	01020174 	movhi	r4,2053
 8023c44:	21078c04 	addi	r4,r4,7728
 8023c48:	80033800 	call	8003380 <puts>
   }

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 8023c4c:	e0bff417 	ldw	r2,-48(fp)
 8023c50:	10c02924 	muli	r3,r2,164
 8023c54:	008201b4 	movhi	r2,2054
 8023c58:	1885883a 	add	r2,r3,r2
 8023c5c:	10b97217 	ldw	r2,-6712(r2)
 8023c60:	10800204 	addi	r2,r2,8
 8023c64:	10800037 	ldwio	r2,0(r2)
 8023c68:	e0bfff15 	stw	r2,-4(fp)
   if( (dat & 0x03) != 0 ) {
 8023c6c:	e0bfff17 	ldw	r2,-4(fp)
 8023c70:	108000cc 	andi	r2,r2,3
 8023c74:	10000526 	beq	r2,zero,8023c8c <tse_mac_init+0x3a0>
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
 8023c78:	e17fff17 	ldw	r5,-4(fp)
 8023c7c:	01020174 	movhi	r4,2053
 8023c80:	21079504 	addi	r4,r4,7764
 8023c84:	800325c0 	call	800325c <printf>
 8023c88:	00000506 	br	8023ca0 <tse_mac_init+0x3b4>
   } 
   else {
     dprintf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
 8023c8c:	e1bfff17 	ldw	r6,-4(fp)
 8023c90:	e17ffe17 	ldw	r5,-8(fp)
 8023c94:	01020174 	movhi	r4,2053
 8023c98:	2107a904 	addi	r4,r4,7844
 8023c9c:	800325c0 	call	800325c <printf>
  
   /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
   extern alt_u8 mac_group_count;
   extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
   if(tse_hw->use_shared_fifo == 1) {
 8023ca0:	e0bffa17 	ldw	r2,-24(fp)
 8023ca4:	10800a03 	ldbu	r2,40(r2)
 8023ca8:	10803fcc 	andi	r2,r2,255
 8023cac:	10800058 	cmpnei	r2,r2,1
 8023cb0:	10002c1e 	bne	r2,zero,8023d64 <tse_mac_init+0x478>
     int channel_loop = 0;
 8023cb4:	e03ffc15 	stw	zero,-16(fp)
     int mac_loop = 0;
 8023cb8:	e03ffb15 	stw	zero,-20(fp)
         
     for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 8023cbc:	e03ffc15 	stw	zero,-16(fp)
 8023cc0:	00002406 	br	8023d54 <tse_mac_init+0x468>
       for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 8023cc4:	e03ffb15 	stw	zero,-20(fp)
 8023cc8:	00001606 	br	8023d24 <tse_mac_init+0x438>
         if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
 8023ccc:	e0bffc17 	ldw	r2,-16(fp)
 8023cd0:	100690ba 	slli	r3,r2,2
 8023cd4:	008201b4 	movhi	r2,2054
 8023cd8:	1885883a 	add	r2,r3,r2
 8023cdc:	10f95917 	ldw	r3,-6812(r2)
 8023ce0:	e0bffb17 	ldw	r2,-20(fp)
 8023ce4:	10800044 	addi	r2,r2,1
 8023ce8:	100490ba 	slli	r2,r2,2
 8023cec:	1885883a 	add	r2,r3,r2
 8023cf0:	10800017 	ldw	r2,0(r2)
 8023cf4:	10800217 	ldw	r2,8(r2)
 8023cf8:	e0fffa17 	ldw	r3,-24(fp)
 8023cfc:	1880061e 	bne	r3,r2,8023d18 <tse_mac_init+0x42c>
           tse[iface].channel = mac_loop;
 8023d00:	e0bff417 	ldw	r2,-48(fp)
 8023d04:	11002924 	muli	r4,r2,164
 8023d08:	e0fffb17 	ldw	r3,-20(fp)
 8023d0c:	008201b4 	movhi	r2,2054
 8023d10:	2085883a 	add	r2,r4,r2
 8023d14:	10f97d15 	stw	r3,-6668(r2)
       for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 8023d18:	e0bffb17 	ldw	r2,-20(fp)
 8023d1c:	10800044 	addi	r2,r2,1
 8023d20:	e0bffb15 	stw	r2,-20(fp)
 8023d24:	e0bffc17 	ldw	r2,-16(fp)
 8023d28:	100690ba 	slli	r3,r2,2
 8023d2c:	008201b4 	movhi	r2,2054
 8023d30:	1885883a 	add	r2,r3,r2
 8023d34:	10b95917 	ldw	r2,-6812(r2)
 8023d38:	10800003 	ldbu	r2,0(r2)
 8023d3c:	10803fcc 	andi	r2,r2,255
 8023d40:	e0fffb17 	ldw	r3,-20(fp)
 8023d44:	18bfe116 	blt	r3,r2,8023ccc <tse_mac_init+0x3e0>
     for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 8023d48:	e0bffc17 	ldw	r2,-16(fp)
 8023d4c:	10800044 	addi	r2,r2,1
 8023d50:	e0bffc15 	stw	r2,-16(fp)
 8023d54:	d0a07a43 	ldbu	r2,-32279(gp)
 8023d58:	10803fcc 	andi	r2,r2,255
 8023d5c:	e0fffc17 	ldw	r3,-16(fp)
 8023d60:	18bfd816 	blt	r3,r2,8023cc4 <tse_mac_init+0x3d8>
       }
     }
   }
   /* End of Hack code */
  
   if(tse_hw->use_shared_fifo == 1) {
 8023d64:	e0bffa17 	ldw	r2,-24(fp)
 8023d68:	10800a03 	ldbu	r2,40(r2)
 8023d6c:	10803fcc 	andi	r2,r2,255
 8023d70:	10800058 	cmpnei	r2,r2,1
 8023d74:	10000f1e 	bne	r2,zero,8023db4 <tse_mac_init+0x4c8>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
 8023d78:	e0bffa17 	ldw	r2,-24(fp)
 8023d7c:	10800e17 	ldw	r2,56(r2)
 8023d80:	1007883a 	mov	r3,r2
 8023d84:	e0bffa17 	ldw	r2,-24(fp)
 8023d88:	10801017 	ldw	r2,64(r2)
 8023d8c:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
 8023d90:	e0bffa17 	ldw	r2,-24(fp)
 8023d94:	10800e17 	ldw	r2,56(r2)
 8023d98:	10800204 	addi	r2,r2,8
 8023d9c:	1007883a 	mov	r3,r2
 8023da0:	e0bffa17 	ldw	r2,-24(fp)
 8023da4:	10801017 	ldw	r2,64(r2)
 8023da8:	10bfdd04 	addi	r2,r2,-140
 8023dac:	18800035 	stwio	r2,0(r3)
 8023db0:	00004c06 	br	8023ee4 <tse_mac_init+0x5f8>
   }
   else {
      /* Initialize MAC registers */
      IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse[iface].mi.base, ALTERA_TSE_MAC_MAX_FRAME_LENGTH); 
 8023db4:	e0bff417 	ldw	r2,-48(fp)
 8023db8:	10c02924 	muli	r3,r2,164
 8023dbc:	008201b4 	movhi	r2,2054
 8023dc0:	1885883a 	add	r2,r3,r2
 8023dc4:	10b97217 	ldw	r2,-6712(r2)
 8023dc8:	10800504 	addi	r2,r2,20
 8023dcc:	00c17b84 	movi	r3,1518
 8023dd0:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 8023dd4:	e0bff417 	ldw	r2,-48(fp)
 8023dd8:	10c02924 	muli	r3,r2,164
 8023ddc:	008201b4 	movhi	r2,2054
 8023de0:	1885883a 	add	r2,r3,r2
 8023de4:	10b97217 	ldw	r2,-6712(r2)
 8023de8:	10800b04 	addi	r2,r2,44
 8023dec:	00c00204 	movi	r3,8
 8023df0:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse[iface].mi.base, 8);
 8023df4:	e0bff417 	ldw	r2,-48(fp)
 8023df8:	10c02924 	muli	r3,r2,164
 8023dfc:	008201b4 	movhi	r2,2054
 8023e00:	1885883a 	add	r2,r3,r2
 8023e04:	10b97217 	ldw	r2,-6712(r2)
 8023e08:	10800c04 	addi	r2,r2,48
 8023e0c:	00c00204 	movi	r3,8
 8023e10:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 8023e14:	e0bff417 	ldw	r2,-48(fp)
 8023e18:	10c02924 	muli	r3,r2,164
 8023e1c:	008201b4 	movhi	r2,2054
 8023e20:	1885883a 	add	r2,r3,r2
 8023e24:	10b97217 	ldw	r2,-6712(r2)
 8023e28:	10800d04 	addi	r2,r2,52
 8023e2c:	00c00204 	movi	r3,8
 8023e30:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse[iface].mi.base,  3);
 8023e34:	e0bff417 	ldw	r2,-48(fp)
 8023e38:	10c02924 	muli	r3,r2,164
 8023e3c:	008201b4 	movhi	r2,2054
 8023e40:	1885883a 	add	r2,r3,r2
 8023e44:	10b97217 	ldw	r2,-6712(r2)
 8023e48:	10800e04 	addi	r2,r2,56
 8023e4c:	00c000c4 	movi	r3,3
 8023e50:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_tx_depth - 16); //1024/4;  
 8023e54:	e0bff417 	ldw	r2,-48(fp)
 8023e58:	10c02924 	muli	r3,r2,164
 8023e5c:	008201b4 	movhi	r2,2054
 8023e60:	1885883a 	add	r2,r3,r2
 8023e64:	10b97217 	ldw	r2,-6712(r2)
 8023e68:	10800904 	addi	r2,r2,36
 8023e6c:	e0fffa17 	ldw	r3,-24(fp)
 8023e70:	18c00117 	ldw	r3,4(r3)
 8023e74:	18fffc04 	addi	r3,r3,-16
 8023e78:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse[iface].mi.base,  0); //32/4; // start transmit when there are 48 bytes
 8023e7c:	e0bff417 	ldw	r2,-48(fp)
 8023e80:	10c02924 	muli	r3,r2,164
 8023e84:	008201b4 	movhi	r2,2054
 8023e88:	1885883a 	add	r2,r3,r2
 8023e8c:	10b97217 	ldw	r2,-6712(r2)
 8023e90:	10800a04 	addi	r2,r2,40
 8023e94:	0007883a 	mov	r3,zero
 8023e98:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_rx_depth - 16); //4000/4);
 8023e9c:	e0bff417 	ldw	r2,-48(fp)
 8023ea0:	10c02924 	muli	r3,r2,164
 8023ea4:	008201b4 	movhi	r2,2054
 8023ea8:	1885883a 	add	r2,r3,r2
 8023eac:	10b97217 	ldw	r2,-6712(r2)
 8023eb0:	10800704 	addi	r2,r2,28
 8023eb4:	e0fffa17 	ldw	r3,-24(fp)
 8023eb8:	18c00217 	ldw	r3,8(r3)
 8023ebc:	18fffc04 	addi	r3,r3,-16
 8023ec0:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse[iface].mi.base,  0);
 8023ec4:	e0bff417 	ldw	r2,-48(fp)
 8023ec8:	10c02924 	muli	r3,r2,164
 8023ecc:	008201b4 	movhi	r2,2054
 8023ed0:	1885883a 	add	r2,r3,r2
 8023ed4:	10b97217 	ldw	r2,-6712(r2)
 8023ed8:	10800804 	addi	r2,r2,32
 8023edc:	0007883a 	mov	r3,zero
 8023ee0:	10c00035 	stwio	r3,0(r2)
      tse[iface].rxShift16OK = 0;
    }
  } /* if(ETHHDR_BIAS == 0) */
 
  if(ETHHDR_BIAS == 2) {
    IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 8023ee4:	e0bff417 	ldw	r2,-48(fp)
 8023ee8:	10c02924 	muli	r3,r2,164
 8023eec:	008201b4 	movhi	r2,2054
 8023ef0:	1885883a 	add	r2,r3,r2
 8023ef4:	10b97217 	ldw	r2,-6712(r2)
 8023ef8:	10803a04 	addi	r2,r2,232
 8023efc:	00c00134 	movhi	r3,4
 8023f00:	10c00035 	stwio	r3,0(r2)
 
    /*
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
 8023f04:	e0bff417 	ldw	r2,-48(fp)
 8023f08:	10c02924 	muli	r3,r2,164
 8023f0c:	008201b4 	movhi	r2,2054
 8023f10:	1885883a 	add	r2,r3,r2
 8023f14:	10b97217 	ldw	r2,-6712(r2)
 8023f18:	10803a04 	addi	r2,r2,232
 8023f1c:	10800037 	ldwio	r2,0(r2)
 8023f20:	1080012c 	andhi	r2,r2,4
 8023f24:	10001826 	beq	r2,zero,8023f88 <tse_mac_init+0x69c>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
 8023f28:	e0bff417 	ldw	r2,-48(fp)
 8023f2c:	11002924 	muli	r4,r2,164
 8023f30:	00c00044 	movi	r3,1
 8023f34:	008201b4 	movhi	r2,2054
 8023f38:	2085883a 	add	r2,r4,r2
 8023f3c:	10f97a15 	stw	r3,-6680(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 8023f40:	e0bff417 	ldw	r2,-48(fp)
 8023f44:	10c02924 	muli	r3,r2,164
 8023f48:	008201b4 	movhi	r2,2054
 8023f4c:	1885883a 	add	r2,r3,r2
 8023f50:	10b97217 	ldw	r2,-6712(r2)
 8023f54:	10803b04 	addi	r2,r2,236
 8023f58:	00c08034 	movhi	r3,512
 8023f5c:	10c00035 	stwio	r3,0(r2)
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
 8023f60:	e0bff417 	ldw	r2,-48(fp)
 8023f64:	10c02924 	muli	r3,r2,164
 8023f68:	008201b4 	movhi	r2,2054
 8023f6c:	1885883a 	add	r2,r3,r2
 8023f70:	10b97217 	ldw	r2,-6712(r2)
 8023f74:	10803b04 	addi	r2,r2,236
 8023f78:	10800037 	ldwio	r2,0(r2)
 8023f7c:	1080802c 	andhi	r2,r2,512
 8023f80:	10001926 	beq	r2,zero,8023fe8 <tse_mac_init+0x6fc>
 8023f84:	00000b06 	br	8023fb4 <tse_mac_init+0x6c8>
      tse[iface].txShift16OK = 0;
 8023f88:	e0bff417 	ldw	r2,-48(fp)
 8023f8c:	10c02924 	muli	r3,r2,164
 8023f90:	008201b4 	movhi	r2,2054
 8023f94:	1885883a 	add	r2,r3,r2
 8023f98:	10397a15 	stw	zero,-6680(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
 8023f9c:	01400084 	movi	r5,2
 8023fa0:	01020174 	movhi	r4,2053
 8023fa4:	2107b104 	addi	r4,r4,7876
 8023fa8:	800325c0 	call	800325c <printf>
      return ENP_LOGIC;
 8023fac:	00bffd44 	movi	r2,-11
 8023fb0:	0000e206 	br	802433c <tse_mac_init+0xa50>
    {
      tse[iface].rxShift16OK = 1;
 8023fb4:	e0bff417 	ldw	r2,-48(fp)
 8023fb8:	11002924 	muli	r4,r2,164
 8023fbc:	00c00044 	movi	r3,1
 8023fc0:	008201b4 	movhi	r2,2054
 8023fc4:	2085883a 	add	r2,r4,r2
 8023fc8:	10f97b15 	stw	r3,-6676(r2)
      return ENP_LOGIC;
    }
  } /* if(ETHHDR_BIAS == 2) */
  
  /* enable MAC */
  dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 8023fcc:	00810034 	movhi	r2,1024
 8023fd0:	108080c4 	addi	r2,r2,515
 8023fd4:	e0bfff15 	stw	r2,-4(fp)
        ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
 8023fd8:	e0bff617 	ldw	r2,-40(fp)
 8023fdc:	10800058 	cmpnei	r2,r2,1
 8023fe0:	1000151e 	bne	r2,zero,8024038 <tse_mac_init+0x74c>
 8023fe4:	00000b06 	br	8024014 <tse_mac_init+0x728>
      tse[iface].rxShift16OK = 0;
 8023fe8:	e0bff417 	ldw	r2,-48(fp)
 8023fec:	10c02924 	muli	r3,r2,164
 8023ff0:	008201b4 	movhi	r2,2054
 8023ff4:	1885883a 	add	r2,r3,r2
 8023ff8:	10397b15 	stw	zero,-6676(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
 8023ffc:	01400084 	movi	r5,2
 8024000:	01020174 	movhi	r4,2053
 8024004:	2107c904 	addi	r4,r4,7972
 8024008:	800325c0 	call	800325c <printf>
      return ENP_LOGIC;
 802400c:	00bffd44 	movi	r2,-11
 8024010:	0000ca06 	br	802433c <tse_mac_init+0xa50>
    dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8024014:	e0bfff17 	ldw	r2,-4(fp)
 8024018:	10800214 	ori	r2,r2,8
 802401c:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8024020:	e0ffff17 	ldw	r3,-4(fp)
 8024024:	00bf8034 	movhi	r2,65024
 8024028:	10bfffc4 	addi	r2,r2,-1
 802402c:	1884703a 	and	r2,r3,r2
 8024030:	e0bfff15 	stw	r2,-4(fp)
 8024034:	00002106 	br	80240bc <tse_mac_init+0x7d0>
  }
  /* 100 Mbps */
  else if(speed == 0x02) {
 8024038:	e0bff617 	ldw	r2,-40(fp)
 802403c:	10800098 	cmpnei	r2,r2,2
 8024040:	10000a1e 	bne	r2,zero,802406c <tse_mac_init+0x780>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8024044:	e0ffff17 	ldw	r3,-4(fp)
 8024048:	00bffdc4 	movi	r2,-9
 802404c:	1884703a 	and	r2,r3,r2
 8024050:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8024054:	e0ffff17 	ldw	r3,-4(fp)
 8024058:	00bf8034 	movhi	r2,65024
 802405c:	10bfffc4 	addi	r2,r2,-1
 8024060:	1884703a 	and	r2,r3,r2
 8024064:	e0bfff15 	stw	r2,-4(fp)
 8024068:	00001406 	br	80240bc <tse_mac_init+0x7d0>
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
 802406c:	e0bff617 	ldw	r2,-40(fp)
 8024070:	10800118 	cmpnei	r2,r2,4
 8024074:	1000081e 	bne	r2,zero,8024098 <tse_mac_init+0x7ac>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8024078:	e0ffff17 	ldw	r3,-4(fp)
 802407c:	00bffdc4 	movi	r2,-9
 8024080:	1884703a 	and	r2,r3,r2
 8024084:	e0bfff15 	stw	r2,-4(fp)
    dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 8024088:	e0bfff17 	ldw	r2,-4(fp)
 802408c:	10808034 	orhi	r2,r2,512
 8024090:	e0bfff15 	stw	r2,-4(fp)
 8024094:	00000906 	br	80240bc <tse_mac_init+0x7d0>
  }
  /* default to 100 Mbps if returned invalid speed */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 8024098:	e0ffff17 	ldw	r3,-4(fp)
 802409c:	00bffdc4 	movi	r2,-9
 80240a0:	1884703a 	and	r2,r3,r2
 80240a4:	e0bfff15 	stw	r2,-4(fp)
    dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 80240a8:	e0ffff17 	ldw	r3,-4(fp)
 80240ac:	00bf8034 	movhi	r2,65024
 80240b0:	10bfffc4 	addi	r2,r2,-1
 80240b4:	1884703a 	and	r2,r3,r2
 80240b8:	e0bfff15 	stw	r2,-4(fp)
  }
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 80240bc:	e0bff517 	ldw	r2,-44(fp)
 80240c0:	1000041e 	bne	r2,zero,80240d4 <tse_mac_init+0x7e8>
    dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 80240c4:	e0bfff17 	ldw	r2,-4(fp)
 80240c8:	10810014 	ori	r2,r2,1024
 80240cc:	e0bfff15 	stw	r2,-4(fp)
 80240d0:	00000406 	br	80240e4 <tse_mac_init+0x7f8>
  }
  /* Full Duplex */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 80240d4:	e0ffff17 	ldw	r3,-4(fp)
 80240d8:	00beffc4 	movi	r2,-1025
 80240dc:	1884703a 	and	r2,r3,r2
 80240e0:	e0bfff15 	stw	r2,-4(fp)
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 80240e4:	e0bff417 	ldw	r2,-48(fp)
 80240e8:	10c02924 	muli	r3,r2,164
 80240ec:	008201b4 	movhi	r2,2054
 80240f0:	1885883a 	add	r2,r3,r2
 80240f4:	10b97217 	ldw	r2,-6712(r2)
 80240f8:	10800204 	addi	r2,r2,8
 80240fc:	e0ffff17 	ldw	r3,-4(fp)
 8024100:	10c00035 	stwio	r3,0(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
 8024104:	e0bff417 	ldw	r2,-48(fp)
 8024108:	10c02924 	muli	r3,r2,164
 802410c:	008201b4 	movhi	r2,2054
 8024110:	1885883a 	add	r2,r3,r2
 8024114:	10b97217 	ldw	r2,-6712(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
 8024118:	10800204 	addi	r2,r2,8
 802411c:	10800037 	ldwio	r2,0(r2)
 8024120:	100b883a 	mov	r5,r2
 8024124:	01020174 	movhi	r4,2053
 8024128:	2107e104 	addi	r4,r4,8068
 802412c:	800325c0 	call	800325c <printf>
  
                          
#ifdef ALT_INICHE
   /* Set the MAC address */  
   IOWR_ALTERA_TSEMAC_MAC_0(tse[iface].mi.base,
 8024130:	e0bff417 	ldw	r2,-48(fp)
 8024134:	10c02924 	muli	r3,r2,164
 8024138:	008201b4 	movhi	r2,2054
 802413c:	1885883a 	add	r2,r3,r2
 8024140:	10b97217 	ldw	r2,-6712(r2)
 8024144:	10c00304 	addi	r3,r2,12
 8024148:	e0bff417 	ldw	r2,-48(fp)
 802414c:	11002924 	muli	r4,r2,164
 8024150:	008201b4 	movhi	r2,2054
 8024154:	2085883a 	add	r2,r4,r2
 8024158:	10b97703 	ldbu	r2,-6692(r2)
 802415c:	11003fcc 	andi	r4,r2,255
 8024160:	e0bff417 	ldw	r2,-48(fp)
 8024164:	11402924 	muli	r5,r2,164
 8024168:	008201b4 	movhi	r2,2054
 802416c:	2885883a 	add	r2,r5,r2
 8024170:	10b97743 	ldbu	r2,-6691(r2)
 8024174:	10803fcc 	andi	r2,r2,255
 8024178:	1004923a 	slli	r2,r2,8
 802417c:	2088b03a 	or	r4,r4,r2
 8024180:	e0bff417 	ldw	r2,-48(fp)
 8024184:	11402924 	muli	r5,r2,164
 8024188:	008201b4 	movhi	r2,2054
 802418c:	2885883a 	add	r2,r5,r2
 8024190:	10b97783 	ldbu	r2,-6690(r2)
 8024194:	10803fcc 	andi	r2,r2,255
 8024198:	1004943a 	slli	r2,r2,16
 802419c:	2088b03a 	or	r4,r4,r2
 80241a0:	e0bff417 	ldw	r2,-48(fp)
 80241a4:	11402924 	muli	r5,r2,164
 80241a8:	008201b4 	movhi	r2,2054
 80241ac:	2885883a 	add	r2,r5,r2
 80241b0:	10b977c3 	ldbu	r2,-6689(r2)
 80241b4:	10803fcc 	andi	r2,r2,255
 80241b8:	1004963a 	slli	r2,r2,24
 80241bc:	2084b03a 	or	r2,r4,r2
 80241c0:	18800035 	stwio	r2,0(r3)
                           ((int)((unsigned char) tse[iface].mac_addr[0]) | 
                            (int)((unsigned char) tse[iface].mac_addr[1] <<  8) |
                            (int)((unsigned char) tse[iface].mac_addr[2] << 16) | 
                            (int)((unsigned char) tse[iface].mac_addr[3] << 24)));
  
   IOWR_ALTERA_TSEMAC_MAC_1(tse[iface].mi.base, 
 80241c4:	e0bff417 	ldw	r2,-48(fp)
 80241c8:	10c02924 	muli	r3,r2,164
 80241cc:	008201b4 	movhi	r2,2054
 80241d0:	1885883a 	add	r2,r3,r2
 80241d4:	10b97217 	ldw	r2,-6712(r2)
 80241d8:	10c00404 	addi	r3,r2,16
 80241dc:	e0bff417 	ldw	r2,-48(fp)
 80241e0:	11002924 	muli	r4,r2,164
 80241e4:	008201b4 	movhi	r2,2054
 80241e8:	2085883a 	add	r2,r4,r2
 80241ec:	10b97803 	ldbu	r2,-6688(r2)
 80241f0:	11003fcc 	andi	r4,r2,255
 80241f4:	e0bff417 	ldw	r2,-48(fp)
 80241f8:	11402924 	muli	r5,r2,164
 80241fc:	008201b4 	movhi	r2,2054
 8024200:	2885883a 	add	r2,r5,r2
 8024204:	10b97843 	ldbu	r2,-6687(r2)
 8024208:	10803fcc 	andi	r2,r2,255
 802420c:	1004923a 	slli	r2,r2,8
 8024210:	2084b03a 	or	r2,r4,r2
 8024214:	10bfffcc 	andi	r2,r2,65535
 8024218:	18800035 	stwio	r2,0(r3)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 802421c:	e0bff417 	ldw	r2,-48(fp)
 8024220:	100690ba 	slli	r3,r2,2
 8024224:	008201b4 	movhi	r2,2054
 8024228:	1885883a 	add	r2,r3,r2
 802422c:	10bada17 	ldw	r2,-5272(r2)
 8024230:	10802717 	ldw	r2,156(r2)
 8024234:	00c00044 	movi	r3,1
 8024238:	10c00615 	stw	r3,24(r2)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
 802423c:	e0bff417 	ldw	r2,-48(fp)
 8024240:	100690ba 	slli	r3,r2,2
 8024244:	008201b4 	movhi	r2,2054
 8024248:	1885883a 	add	r2,r3,r2
 802424c:	10bada17 	ldw	r2,-5272(r2)
 8024250:	10802717 	ldw	r2,156(r2)
 8024254:	00c00044 	movi	r3,1
 8024258:	10c00715 	stw	r3,28(r2)
   
   /* Install MSGDMA (RX) interrupt handler */
   alt_msgdma_register_callback(
 802425c:	e0bff417 	ldw	r2,-48(fp)
 8024260:	10c02924 	muli	r3,r2,164
 8024264:	008201b4 	movhi	r2,2054
 8024268:	1885883a 	add	r2,r3,r2
 802426c:	11397417 	ldw	r4,-6704(r2)
        tse[iface].mi.rx_msgdma,
        (alt_msgdma_callback)&tse_msgdmaRx_isr,
        0,
        (void*)(&tse[iface]));
 8024270:	e0bff417 	ldw	r2,-48(fp)
 8024274:	10c02924 	muli	r3,r2,164
 8024278:	008201b4 	movhi	r2,2054
 802427c:	10b97104 	addi	r2,r2,-6716
 8024280:	1885883a 	add	r2,r3,r2
   alt_msgdma_register_callback(
 8024284:	100f883a 	mov	r7,r2
 8024288:	000d883a 	mov	r6,zero
 802428c:	014200b4 	movhi	r5,2050
 8024290:	29519104 	addi	r5,r5,17988
 8024294:	80233b80 	call	80233b8 <alt_msgdma_register_callback>
        
           /* Install MSGDMA (TX) interrupt handler */
    alt_msgdma_register_callback(
 8024298:	e0bff417 	ldw	r2,-48(fp)
 802429c:	10c02924 	muli	r3,r2,164
 80242a0:	008201b4 	movhi	r2,2054
 80242a4:	1885883a 	add	r2,r3,r2
 80242a8:	11397317 	ldw	r4,-6708(r2)
          tse[iface].mi.tx_msgdma,
          (alt_msgdma_callback)&tse_msgdmaTx_isr,
          0,
          (void*)(&tse[iface]));
 80242ac:	e0bff417 	ldw	r2,-48(fp)
 80242b0:	10c02924 	muli	r3,r2,164
 80242b4:	008201b4 	movhi	r2,2054
 80242b8:	10b97104 	addi	r2,r2,-6716
 80242bc:	1885883a 	add	r2,r3,r2
    alt_msgdma_register_callback(
 80242c0:	100f883a 	mov	r7,r2
 80242c4:	000d883a 	mov	r6,zero
 80242c8:	014200b4 	movhi	r5,2050
 80242cc:	2951f704 	addi	r5,r5,18396
 80242d0:	80233b80 	call	80233b8 <alt_msgdma_register_callback>
    
  status = tse_msgdma_read_init(&tse[iface]);
 80242d4:	e0bff417 	ldw	r2,-48(fp)
 80242d8:	10c02924 	muli	r3,r2,164
 80242dc:	008201b4 	movhi	r2,2054
 80242e0:	10b97104 	addi	r2,r2,-6716
 80242e4:	1885883a 	add	r2,r3,r2
 80242e8:	1009883a 	mov	r4,r2
 80242ec:	802483c0 	call	802483c <tse_msgdma_read_init>
 80242f0:	e0bffd15 	stw	r2,-12(fp)
  if (status == 0 ) status = tse_msgdma_write_init(&tse[iface],0,0);
 80242f4:	e0bffd17 	ldw	r2,-12(fp)
 80242f8:	10000a1e 	bne	r2,zero,8024324 <tse_mac_init+0xa38>
 80242fc:	e0bff417 	ldw	r2,-48(fp)
 8024300:	10c02924 	muli	r3,r2,164
 8024304:	008201b4 	movhi	r2,2054
 8024308:	10b97104 	addi	r2,r2,-6716
 802430c:	1885883a 	add	r2,r3,r2
 8024310:	000d883a 	mov	r6,zero
 8024314:	000b883a 	mov	r5,zero
 8024318:	1009883a 	mov	r4,r2
 802431c:	80243500 	call	8024350 <tse_msgdma_write_init>
 8024320:	e0bffd15 	stw	r2,-12(fp)
  
  if (status!=0) dprintf("TSE_MAC_INIT error\n");
 8024324:	e0bffd17 	ldw	r2,-12(fp)
 8024328:	10000326 	beq	r2,zero,8024338 <tse_mac_init+0xa4c>
 802432c:	01020174 	movhi	r4,2053
 8024330:	2107ed04 	addi	r4,r4,8116
 8024334:	80033800 	call	8003380 <puts>
  
  return status;
 8024338:	e0bffd17 	ldw	r2,-12(fp)
}
 802433c:	e037883a 	mov	sp,fp
 8024340:	dfc00117 	ldw	ra,4(sp)
 8024344:	df000017 	ldw	fp,0(sp)
 8024348:	dec00204 	addi	sp,sp,8
 802434c:	f800283a 	ret

08024350 <tse_msgdma_write_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_msgdma_write_init(ins_tse_info* tse_ptr,unsigned int * ActualData,unsigned int len)
{     
 8024350:	defff704 	addi	sp,sp,-36
 8024354:	dfc00815 	stw	ra,32(sp)
 8024358:	df000715 	stw	fp,28(sp)
 802435c:	df000704 	addi	fp,sp,28
 8024360:	e13ffc15 	stw	r4,-16(fp)
 8024364:	e17ffb15 	stw	r5,-20(fp)
 8024368:	e1bffa15 	stw	r6,-24(fp)
  alt_u32 control = 0;
 802436c:	e03fff15 	stw	zero,-4(fp)
  int desc_index;
  int rc;
  
  tse_ptr->txdesc_list = NULL;
 8024370:	e0bffc17 	ldw	r2,-16(fp)
 8024374:	10000d15 	stw	zero,52(r2)
  
  for(desc_index = 0; desc_index < (ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE); desc_index++)
 8024378:	e03ffe15 	stw	zero,-8(fp)
 802437c:	00003306 	br	802444c <tse_msgdma_write_init+0xfc>
  { 
        
    /* trigger interrupt when transfer complete */
    control =  ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MASK | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MASK; 
 8024380:	0080c004 	movi	r2,768
 8024384:	e0bfff15 	stw	r2,-4(fp)
            
    if (desc_index >= ( ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE - 2)) control |= ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK;
 8024388:	e0bffe17 	ldw	r2,-8(fp)
 802438c:	10000416 	blt	r2,zero,80243a0 <tse_msgdma_write_init+0x50>
 8024390:	e0bfff17 	ldw	r2,-4(fp)
 8024394:	10900014 	ori	r2,r2,16384
 8024398:	e0bfff15 	stw	r2,-4(fp)
 802439c:	00000306 	br	80243ac <tse_msgdma_write_init+0x5c>
    else control  |= ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK;
 80243a0:	e0bfff17 	ldw	r2,-4(fp)
 80243a4:	10804034 	orhi	r2,r2,256
 80243a8:	e0bfff15 	stw	r2,-4(fp)
            
    rc=alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor(
 80243ac:	e0bffc17 	ldw	r2,-16(fp)
 80243b0:	11000217 	ldw	r4,8(r2)
            tse_ptr->mi.tx_msgdma,
            (alt_msgdma_prefetcher_standard_descriptor *) &tse_ptr->txdesc[desc_index],  
 80243b4:	e0bffc17 	ldw	r2,-16(fp)
 80243b8:	10c00e17 	ldw	r3,56(r2)
 80243bc:	e0bffe17 	ldw	r2,-8(fp)
 80243c0:	1004917a 	slli	r2,r2,5
    rc=alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor(
 80243c4:	1887883a 	add	r3,r3,r2
 80243c8:	e17ffb17 	ldw	r5,-20(fp)
 80243cc:	e0bfff17 	ldw	r2,-4(fp)
 80243d0:	d8800015 	stw	r2,0(sp)
 80243d4:	e1fffa17 	ldw	r7,-24(fp)
 80243d8:	280d883a 	mov	r6,r5
 80243dc:	180b883a 	mov	r5,r3
 80243e0:	80226140 	call	8022614 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>
 80243e4:	e0bffd15 	stw	r2,-12(fp)
            (int)ActualData,   
            len,
            control);
    if (rc!=0) return -1;
 80243e8:	e0bffd17 	ldw	r2,-12(fp)
 80243ec:	10000226 	beq	r2,zero,80243f8 <tse_msgdma_write_init+0xa8>
 80243f0:	00bfffc4 	movi	r2,-1
 80243f4:	00001906 	br	802445c <tse_msgdma_write_init+0x10c>
    
    if (desc_index==0) tse_ptr->txdesc_list = NULL; 
 80243f8:	e0bffe17 	ldw	r2,-8(fp)
 80243fc:	1000021e 	bne	r2,zero,8024408 <tse_msgdma_write_init+0xb8>
 8024400:	e0bffc17 	ldw	r2,-16(fp)
 8024404:	10000d15 	stw	zero,52(r2)
            
    rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 8024408:	e0bffc17 	ldw	r2,-16(fp)
 802440c:	11000d04 	addi	r4,r2,52
               &tse_ptr->txdesc_list,
               &tse_ptr->txdesc[desc_index] );        
 8024410:	e0bffc17 	ldw	r2,-16(fp)
 8024414:	10c00e17 	ldw	r3,56(r2)
 8024418:	e0bffe17 	ldw	r2,-8(fp)
 802441c:	1004917a 	slli	r2,r2,5
    rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 8024420:	1885883a 	add	r2,r3,r2
 8024424:	100b883a 	mov	r5,r2
 8024428:	802285c0 	call	802285c <alt_msgdma_prefetcher_add_standard_desc_to_list>
 802442c:	e0bffd15 	stw	r2,-12(fp)
    if (rc!=0) return -1;
 8024430:	e0bffd17 	ldw	r2,-12(fp)
 8024434:	10000226 	beq	r2,zero,8024440 <tse_msgdma_write_init+0xf0>
 8024438:	00bfffc4 	movi	r2,-1
 802443c:	00000706 	br	802445c <tse_msgdma_write_init+0x10c>
  for(desc_index = 0; desc_index < (ALTERA_TSE_MSGDMA_TX_DESC_CHAIN_SIZE); desc_index++)
 8024440:	e0bffe17 	ldw	r2,-8(fp)
 8024444:	10800044 	addi	r2,r2,1
 8024448:	e0bffe15 	stw	r2,-8(fp)
 802444c:	e0bffe17 	ldw	r2,-8(fp)
 8024450:	10800090 	cmplti	r2,r2,2
 8024454:	103fca1e 	bne	r2,zero,8024380 <tse_msgdma_write_init+0x30>

  } 
  
  return 0;
 8024458:	0005883a 	mov	r2,zero
}
 802445c:	e037883a 	mov	sp,fp
 8024460:	dfc00117 	ldw	ra,4(sp)
 8024464:	df000017 	ldw	fp,0(sp)
 8024468:	dec00204 	addi	sp,sp,8
 802446c:	f800283a 	ret

08024470 <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned int data_bytes)
{
 8024470:	defff104 	addi	sp,sp,-60
 8024474:	dfc00e15 	stw	ra,56(sp)
 8024478:	df000d15 	stw	fp,52(sp)
 802447c:	df000d04 	addi	fp,sp,52
 8024480:	e13ff515 	stw	r4,-44(fp)
 8024484:	e17ff415 	stw	r5,-48(fp)
 8024488:	e1bff315 	stw	r6,-52(fp)
   unsigned int len = data_bytes;
 802448c:	e0bff317 	ldw	r2,-52(fp)
 8024490:	e0bfff15 	stw	r2,-4(fp)
   int rc;

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;
 8024494:	e0bff517 	ldw	r2,-44(fp)
 8024498:	10802817 	ldw	r2,160(r2)
 802449c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
 80244a0:	0005303a 	rdctl	r2,status
 80244a4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80244a8:	e0fff917 	ldw	r3,-28(fp)
 80244ac:	00bfff84 	movi	r2,-2
 80244b0:	1884703a 	and	r2,r3,r2
 80244b4:	1001703a 	wrctl	status,r2
  return context;
 80244b8:	e0bff917 	ldw	r2,-28(fp)
   tse_mac_trans_info *mi;
   unsigned int* ActualData;
   int cpu_sr;
   
   OS_ENTER_CRITICAL();
 80244bc:	e0bffd15 	stw	r2,-12(fp)
   mi = &tse_ptr->mi;
 80244c0:	e0bffe17 	ldw	r2,-8(fp)
 80244c4:	10800104 	addi	r2,r2,4
 80244c8:	e0bffc15 	stw	r2,-16(fp)
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
 80244cc:	e0bffe17 	ldw	r2,-8(fp)
 80244d0:	10800b17 	ldw	r2,44(r2)
 80244d4:	10000a26 	beq	r2,zero,8024500 <tse_mac_raw_send+0x90>
   {
      dprintf("raw_send CALLED AGAIN!!!\n");
 80244d8:	01020174 	movhi	r4,2053
 80244dc:	2107f204 	addi	r4,r4,8136
 80244e0:	80033800 	call	8003380 <puts>
 80244e4:	e0bffd17 	ldw	r2,-12(fp)
 80244e8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
 80244ec:	e0bff817 	ldw	r2,-32(fp)
 80244f0:	1001703a 	wrctl	status,r2
}
 80244f4:	0001883a 	nop
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
 80244f8:	00bffa84 	movi	r2,-22
 80244fc:	00004c06 	br	8024630 <tse_mac_raw_send+0x1c0>
   }
 
   tse_ptr->sem = 1;  
 8024500:	e0bffe17 	ldw	r2,-8(fp)
 8024504:	00c00044 	movi	r3,1
 8024508:	10c00b15 	stw	r3,44(r2)
   
   // clear bit-31 before passing it to MSGDMA Driver
   ActualData = (unsigned int*)alt_remap_cached ((volatile void*) data, 4);
 802450c:	01400104 	movi	r5,4
 8024510:	e13ff417 	ldw	r4,-48(fp)
 8024514:	803b8bc0 	call	803b8bc <alt_remap_cached>
 8024518:	e0bffb15 	stw	r2,-20(fp)
     dprintf("tse_msgdma_write_init bad return\n");
     OS_EXIT_CRITICAL();
     return -1;
   }
   #else
     tse_ptr->txdesc[0].read_address = (alt_u32)ActualData;
 802451c:	e0bffe17 	ldw	r2,-8(fp)
 8024520:	10800e17 	ldw	r2,56(r2)
 8024524:	e0fffb17 	ldw	r3,-20(fp)
 8024528:	10c00015 	stw	r3,0(r2)
     tse_ptr->txdesc[0].transfer_length = len;
 802452c:	e0bffe17 	ldw	r2,-8(fp)
 8024530:	10800e17 	ldw	r2,56(r2)
 8024534:	e0ffff17 	ldw	r3,-4(fp)
 8024538:	10c00215 	stw	r3,8(r2)
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 802453c:	e0bffe17 	ldw	r2,-8(fp)
 8024540:	10800e17 	ldw	r2,56(r2)
 8024544:	10c00717 	ldw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 8024548:	00900034 	movhi	r2,16384
 802454c:	10bfffc4 	addi	r2,r2,-1
 8024550:	1886703a 	and	r3,r3,r2
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 8024554:	e0bffe17 	ldw	r2,-8(fp)
 8024558:	10800e17 	ldw	r2,56(r2)
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 802455c:	18e00034 	orhi	r3,r3,32768
     tse_ptr->txdesc[0].control = (tse_ptr->txdesc[0].control
 8024560:	10c00715 	stw	r3,28(r2)
   #endif  
        
   alt_dcache_flush(ActualData,len);   
 8024564:	e17fff17 	ldw	r5,-4(fp)
 8024568:	e13ffb17 	ldw	r4,-20(fp)
 802456c:	803ab280 	call	803ab28 <alt_dcache_flush>
   rc = tse_mac_aTxWrite(mi,tse_ptr->txdesc);
 8024570:	e0bffe17 	ldw	r2,-8(fp)
 8024574:	10800e17 	ldw	r2,56(r2)
 8024578:	100b883a 	mov	r5,r2
 802457c:	e13ffc17 	ldw	r4,-16(fp)
 8024580:	801bb280 	call	801bb28 <tse_mac_aTxWrite>
 8024584:	e0bffa15 	stw	r2,-24(fp)
   if(rc < 0)   /* MSGDMA not available */
 8024588:	e0bffa17 	ldw	r2,-24(fp)
 802458c:	1000130e 	bge	r2,zero,80245dc <tse_mac_raw_send+0x16c>
   {
      dprintf("raw_send() MSGDMA not available, ret=%d, len=%d\n",rc, len);
 8024590:	e1bfff17 	ldw	r6,-4(fp)
 8024594:	e17ffa17 	ldw	r5,-24(fp)
 8024598:	01020174 	movhi	r4,2053
 802459c:	2107f904 	addi	r4,r4,8164
 80245a0:	800325c0 	call	800325c <printf>
      net->n_mib->ifOutDiscards++;
 80245a4:	e0bff517 	ldw	r2,-44(fp)
 80245a8:	10802717 	ldw	r2,156(r2)
 80245ac:	10c01217 	ldw	r3,72(r2)
 80245b0:	18c00044 	addi	r3,r3,1
 80245b4:	10c01215 	stw	r3,72(r2)
      tse_ptr->sem = 0;
 80245b8:	e0bffe17 	ldw	r2,-8(fp)
 80245bc:	10000b15 	stw	zero,44(r2)
 80245c0:	e0bffd17 	ldw	r2,-12(fp)
 80245c4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
 80245c8:	e0bff717 	ldw	r2,-36(fp)
 80245cc:	1001703a 	wrctl	status,r2
}
 80245d0:	0001883a 	nop

      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
 80245d4:	00bffa84 	movi	r2,-22
 80245d8:	00001506 	br	8024630 <tse_mac_raw_send+0x1c0>
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 80245dc:	e0bff517 	ldw	r2,-44(fp)
 80245e0:	10802717 	ldw	r2,156(r2)
 80245e4:	11000f17 	ldw	r4,60(r2)
 80245e8:	e0bff517 	ldw	r2,-44(fp)
 80245ec:	10802717 	ldw	r2,156(r2)
 80245f0:	e0fff317 	ldw	r3,-52(fp)
 80245f4:	20c7883a 	add	r3,r4,r3
 80245f8:	10c00f15 	stw	r3,60(r2)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
 80245fc:	e0bff517 	ldw	r2,-44(fp)
 8024600:	10802717 	ldw	r2,156(r2)
 8024604:	10c01017 	ldw	r3,64(r2)
 8024608:	18c00044 	addi	r3,r3,1
 802460c:	10c01015 	stw	r3,64(r2)
      tse_ptr->sem = 0;
 8024610:	e0bffe17 	ldw	r2,-8(fp)
 8024614:	10000b15 	stw	zero,44(r2)
 8024618:	e0bffd17 	ldw	r2,-12(fp)
 802461c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
 8024620:	e0bff617 	ldw	r2,-40(fp)
 8024624:	1001703a 	wrctl	status,r2
}
 8024628:	0001883a 	nop

      OS_EXIT_CRITICAL();
      return SUCCESS;  /*success */
 802462c:	0005883a 	mov	r2,zero
   }
}
 8024630:	e037883a 	mov	sp,fp
 8024634:	dfc00117 	ldw	ra,4(sp)
 8024638:	df000017 	ldw	fp,0(sp)
 802463c:	dec00204 	addi	sp,sp,8
 8024640:	f800283a 	ret

08024644 <tse_msgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_msgdmaRx_isr(void * context)
{
 8024644:	defff804 	addi	sp,sp,-32
 8024648:	dfc00715 	stw	ra,28(sp)
 802464c:	df000615 	stw	fp,24(sp)
 8024650:	df000604 	addi	fp,sp,24
 8024654:	e13ffa15 	stw	r4,-24(fp)
    ins_tse_info* tse_ptr = (ins_tse_info *) context; 
 8024658:	e0bffa17 	ldw	r2,-24(fp)
 802465c:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 msgdma_status;
    alt_u32 i,control;
    
    /* Capture current rcv queue length */
    int initial_rcvdq_len = rcvdq.q_len;
 8024660:	008201b4 	movhi	r2,2054
 8024664:	10ba1717 	ldw	r2,-6052(r2)
 8024668:	e0bffd15 	stw	r2,-12(fp)

    /* reenable global interrupts so we don't miss one that occurs during the
       processing of this ISR */
    IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(tse_ptr->mi.rx_msgdma->prefetcher_base,
 802466c:	e0bffe17 	ldw	r2,-8(fp)
 8024670:	10800317 	ldw	r2,12(r2)
 8024674:	10800617 	ldw	r2,24(r2)
 8024678:	e0fffe17 	ldw	r3,-8(fp)
 802467c:	18c00317 	ldw	r3,12(r3)
 8024680:	18c00617 	ldw	r3,24(r3)
 8024684:	18c00037 	ldwio	r3,0(r3)
 8024688:	18c00214 	ori	r3,r3,8
 802468c:	10c00035 	stwio	r3,0(r2)
      			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(tse_ptr->mi.rx_msgdma->prefetcher_base)
	  			| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK);
       
    msgdma_status = IORD_ALTERA_MSGDMA_CSR_STATUS(tse_ptr->mi.rx_msgdma->csr_base);
 8024690:	e0bffe17 	ldw	r2,-8(fp)
 8024694:	10800317 	ldw	r2,12(r2)
 8024698:	10800317 	ldw	r2,12(r2)
 802469c:	10800037 	ldwio	r2,0(r2)
 80246a0:	e0bffc15 	stw	r2,-16(fp)
       
    if ((msgdma_status & ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK)==0)
 80246a4:	e0bffc17 	ldw	r2,-16(fp)
 80246a8:	1080200c 	andi	r2,r2,128
 80246ac:	1000421e 	bne	r2,zero,80247b8 <tse_msgdmaRx_isr+0x174>
    {   
       /* Handle received packet */
        tse_mac_rcv(tse_ptr); 
 80246b0:	e13ffe17 	ldw	r4,-8(fp)
 80246b4:	8024c2c0 	call	8024c2c <tse_mac_rcv>
        
        /* read the control field of the last descriptor in the chain */
        control = IORD_32DIRECT(&tse_ptr->rxdesc[tse_ptr->rx_chain][ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-2],0x1c);
 80246b8:	e0bffe17 	ldw	r2,-8(fp)
 80246bc:	10801317 	ldw	r2,76(r2)
 80246c0:	e0fffe17 	ldw	r3,-8(fp)
 80246c4:	10800444 	addi	r2,r2,17
 80246c8:	100490ba 	slli	r2,r2,2
 80246cc:	1885883a 	add	r2,r3,r2
 80246d0:	10800017 	ldw	r2,0(r2)
 80246d4:	10803804 	addi	r2,r2,224
 80246d8:	10800704 	addi	r2,r2,28
 80246dc:	10800037 	ldwio	r2,0(r2)
 80246e0:	e0bffb15 	stw	r2,-20(fp)
                          
        //if the chain is completed then start a new chain
        if ((control & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK)==0)            
 80246e4:	e0bffb17 	ldw	r2,-20(fp)
 80246e8:	1090002c 	andhi	r2,r2,16384
 80246ec:	10002a1e 	bne	r2,zero,8024798 <tse_msgdmaRx_isr+0x154>
        {
            /* process any unprocessed descriptors */      
            for (i=(tse_ptr->rx_descriptor_index);i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 80246f0:	e0bffe17 	ldw	r2,-8(fp)
 80246f4:	10801417 	ldw	r2,80(r2)
 80246f8:	e0bfff15 	stw	r2,-4(fp)
 80246fc:	00000506 	br	8024714 <tse_msgdmaRx_isr+0xd0>
            {
                tse_mac_rcv(tse_ptr); 
 8024700:	e13ffe17 	ldw	r4,-8(fp)
 8024704:	8024c2c0 	call	8024c2c <tse_mac_rcv>
            for (i=(tse_ptr->rx_descriptor_index);i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 8024708:	e0bfff17 	ldw	r2,-4(fp)
 802470c:	10800044 	addi	r2,r2,1
 8024710:	e0bfff15 	stw	r2,-4(fp)
 8024714:	e0bfff17 	ldw	r2,-4(fp)
 8024718:	10800230 	cmpltui	r2,r2,8
 802471c:	103ff81e 	bne	r2,zero,8024700 <tse_msgdmaRx_isr+0xbc>
            }
            
            /* cancel any pending ints */
            /* the chain could have been completed and int generated during the processing of this ISR */
            /* But we are handling that in this ISR, so cancel any pending interrupt */
            IOWR_ALT_MSGDMA_PREFETCHER_STATUS(tse_ptr->mi.rx_msgdma->prefetcher_base,1);
 8024720:	e0bffe17 	ldw	r2,-8(fp)
 8024724:	10800317 	ldw	r2,12(r2)
 8024728:	10800617 	ldw	r2,24(r2)
 802472c:	10800404 	addi	r2,r2,16
 8024730:	00c00044 	movi	r3,1
 8024734:	10c00035 	stwio	r3,0(r2)
          
            /* switch chains */
            tse_ptr->rx_descriptor_index = 0;
 8024738:	e0bffe17 	ldw	r2,-8(fp)
 802473c:	10001415 	stw	zero,80(r2)
            if (tse->rx_chain == 0) tse->rx_chain=1; else tse->rx_chain=0; 
 8024740:	008201b4 	movhi	r2,2054
 8024744:	10b98417 	ldw	r2,-6640(r2)
 8024748:	1000041e 	bne	r2,zero,802475c <tse_msgdmaRx_isr+0x118>
 802474c:	00c00044 	movi	r3,1
 8024750:	008201b4 	movhi	r2,2054
 8024754:	10f98415 	stw	r3,-6640(r2)
 8024758:	00000206 	br	8024764 <tse_msgdmaRx_isr+0x120>
 802475c:	008201b4 	movhi	r2,2054
 8024760:	10398415 	stw	zero,-6640(r2)
                
            /* start new chain */            
            tse_mac_aRxRead(&tse_ptr->mi, tse_ptr->rxdesc_list[tse->rx_chain]);
 8024764:	e0bffe17 	ldw	r2,-8(fp)
 8024768:	11000104 	addi	r4,r2,4
 802476c:	008201b4 	movhi	r2,2054
 8024770:	10b98417 	ldw	r2,-6640(r2)
 8024774:	e0fffe17 	ldw	r3,-8(fp)
 8024778:	108003c4 	addi	r2,r2,15
 802477c:	100490ba 	slli	r2,r2,2
 8024780:	1885883a 	add	r2,r3,r2
 8024784:	10800017 	ldw	r2,0(r2)
 8024788:	100b883a 	mov	r5,r2
 802478c:	801bab80 	call	801bab8 <tse_mac_aRxRead>
            
            /* allocate storage for the non active chain */
            allocate_rx_descriptor_chain(tse_ptr); 
 8024790:	e13ffe17 	ldw	r4,-8(fp)
 8024794:	8024af40 	call	8024af4 <allocate_rx_descriptor_chain>
        }    
        
        /* Wake up Niche stack if there are new packets are on queue */
        if ((rcvdq.q_len) > initial_rcvdq_len) {
 8024798:	008201b4 	movhi	r2,2054
 802479c:	10ba1717 	ldw	r2,-6052(r2)
 80247a0:	e0fffd17 	ldw	r3,-12(fp)
 80247a4:	1880070e 	bge	r3,r2,80247c4 <tse_msgdmaRx_isr+0x180>
            SignalPktDemux();
 80247a8:	d0a0a617 	ldw	r2,-32104(gp)
 80247ac:	1009883a 	mov	r4,r2
 80247b0:	8016c4c0 	call	8016c4c <OSSemPost>
        }       
    } /* if (no error) */
    else {  dprintf("RX ERROR\n");  }
    
}
 80247b4:	00000306 	br	80247c4 <tse_msgdmaRx_isr+0x180>
    else {  dprintf("RX ERROR\n");  }
 80247b8:	01020174 	movhi	r4,2053
 80247bc:	21080604 	addi	r4,r4,8216
 80247c0:	80033800 	call	8003380 <puts>
}
 80247c4:	0001883a 	nop
 80247c8:	e037883a 	mov	sp,fp
 80247cc:	dfc00117 	ldw	ra,4(sp)
 80247d0:	df000017 	ldw	fp,0(sp)
 80247d4:	dec00204 	addi	sp,sp,8
 80247d8:	f800283a 	ret

080247dc <tse_msgdmaTx_isr>:
 * 
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 */
void tse_msgdmaTx_isr(void * context)
{
 80247dc:	defffb04 	addi	sp,sp,-20
 80247e0:	dfc00415 	stw	ra,16(sp)
 80247e4:	df000315 	stw	fp,12(sp)
 80247e8:	df000304 	addi	fp,sp,12
 80247ec:	e13ffd15 	stw	r4,-12(fp)
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
 80247f0:	e0bffd17 	ldw	r2,-12(fp)
 80247f4:	e0bfff15 	stw	r2,-4(fp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  msgdma_status = IORD_ALTERA_MSGDMA_CSR_STATUS(tse_ptr->mi.tx_msgdma->csr_base);
 80247f8:	e0bfff17 	ldw	r2,-4(fp)
 80247fc:	10800217 	ldw	r2,8(r2)
 8024800:	10800317 	ldw	r2,12(r2)
 8024804:	10800037 	ldwio	r2,0(r2)
 8024808:	e0bffe15 	stw	r2,-8(fp)
  
  if ((msgdma_status & ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK)!=0)
 802480c:	e0bffe17 	ldw	r2,-8(fp)
 8024810:	1080200c 	andi	r2,r2,128
 8024814:	10000326 	beq	r2,zero,8024824 <tse_msgdmaTx_isr+0x48>
      dprintf("TX STOPPED\n");
 8024818:	01020174 	movhi	r4,2053
 802481c:	21080904 	addi	r4,r4,8228
 8024820:	80033800 	call	8003380 <puts>
   
}
 8024824:	0001883a 	nop
 8024828:	e037883a 	mov	sp,fp
 802482c:	dfc00117 	ldw	ra,4(sp)
 8024830:	df000017 	ldw	fp,0(sp)
 8024834:	dec00204 	addi	sp,sp,8
 8024838:	f800283a 	ret

0802483c <tse_msgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_msgdma_read_init(ins_tse_info* tse_ptr)
{     
 802483c:	defff604 	addi	sp,sp,-40
 8024840:	dfc00915 	stw	ra,36(sp)
 8024844:	df000815 	stw	fp,32(sp)
 8024848:	df000804 	addi	fp,sp,32
 802484c:	e13ff915 	stw	r4,-28(fp)
  alt_u32 *uncached_packet_payload;
  alt_u32 control = 0;
 8024850:	e03ffb15 	stw	zero,-20(fp)
  int desc_index;
  int chain_index;
  int rc;
  int max_transfer_size=0xffff;
 8024854:	00bfffd4 	movui	r2,65535
 8024858:	e0bffc15 	stw	r2,-16(fp)
  
  if  (tse_ptr->mi.rx_msgdma->max_byte < max_transfer_size) { max_transfer_size = tse_ptr->mi.rx_msgdma->max_byte; }
 802485c:	e0bff917 	ldw	r2,-28(fp)
 8024860:	10800317 	ldw	r2,12(r2)
 8024864:	10c01217 	ldw	r3,72(r2)
 8024868:	e0bffc17 	ldw	r2,-16(fp)
 802486c:	1880042e 	bgeu	r3,r2,8024880 <tse_msgdma_read_init+0x44>
 8024870:	e0bff917 	ldw	r2,-28(fp)
 8024874:	10800317 	ldw	r2,12(r2)
 8024878:	10801217 	ldw	r2,72(r2)
 802487c:	e0bffc15 	stw	r2,-16(fp)
   
  for (chain_index=0;chain_index<2;chain_index++)
 8024880:	e03ffd15 	stw	zero,-12(fp)
 8024884:	00007f06 	br	8024a84 <tse_msgdma_read_init+0x248>
  { 
    tse_ptr->rxdesc_list[chain_index] = NULL;
 8024888:	e0fff917 	ldw	r3,-28(fp)
 802488c:	e0bffd17 	ldw	r2,-12(fp)
 8024890:	108003c4 	addi	r2,r2,15
 8024894:	100490ba 	slli	r2,r2,2
 8024898:	1885883a 	add	r2,r3,r2
 802489c:	10000015 	stw	zero,0(r2)
  
    for(desc_index = 0; desc_index < ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE; desc_index++)
 80248a0:	e03ffe15 	stw	zero,-8(fp)
 80248a4:	00007106 	br	8024a6c <tse_msgdma_read_init+0x230>
    { 
      uncached_packet_payload = NULL;
 80248a8:	e03fff15 	stw	zero,-4(fp)
      
      if ((desc_index < (ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1))) {  
 80248ac:	e0bffe17 	ldw	r2,-8(fp)
 80248b0:	10800208 	cmpgei	r2,r2,8
 80248b4:	1000321e 	bne	r2,zero,8024980 <tse_msgdma_read_init+0x144>
        tse_ptr->pkt_array_rx[chain_index][desc_index] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN);
 80248b8:	01017e04 	movi	r4,1528
 80248bc:	802b8840 	call	802b884 <pk_alloc>
 80248c0:	100b883a 	mov	r5,r2
 80248c4:	e0fff917 	ldw	r3,-28(fp)
 80248c8:	e0bffd17 	ldw	r2,-12(fp)
 80248cc:	11000264 	muli	r4,r2,9
 80248d0:	e0bffe17 	ldw	r2,-8(fp)
 80248d4:	2085883a 	add	r2,r4,r2
 80248d8:	10800584 	addi	r2,r2,22
 80248dc:	100490ba 	slli	r2,r2,2
 80248e0:	1885883a 	add	r2,r3,r2
 80248e4:	11400015 	stw	r5,0(r2)
      
        if (!tse_ptr->pkt_array_rx[chain_index][desc_index])   /* couldn't get a free buffer for rx */
 80248e8:	e0fff917 	ldw	r3,-28(fp)
 80248ec:	e0bffd17 	ldw	r2,-12(fp)
 80248f0:	11000264 	muli	r4,r2,9
 80248f4:	e0bffe17 	ldw	r2,-8(fp)
 80248f8:	2085883a 	add	r2,r4,r2
 80248fc:	10800584 	addi	r2,r2,22
 8024900:	100490ba 	slli	r2,r2,2
 8024904:	1885883a 	add	r2,r3,r2
 8024908:	10800017 	ldw	r2,0(r2)
 802490c:	10000b1e 	bne	r2,zero,802493c <tse_msgdma_read_init+0x100>
        {
          dprintf("[tse_msgdma_read_init] Fatal error: No free packet buffers for RX\n");
 8024910:	01020174 	movhi	r4,2053
 8024914:	21080c04 	addi	r4,r4,8240
 8024918:	80033800 	call	8003380 <puts>
          tse_ptr->netp->n_mib->ifInDiscards++;
 802491c:	e0bff917 	ldw	r2,-28(fp)
 8024920:	10800817 	ldw	r2,32(r2)
 8024924:	10802717 	ldw	r2,156(r2)
 8024928:	10c00c17 	ldw	r3,48(r2)
 802492c:	18c00044 	addi	r3,r3,1
 8024930:	10c00c15 	stw	r3,48(r2)
        
          return ENP_NOBUFFER;
 8024934:	00bffac4 	movi	r2,-21
 8024938:	00006906 	br	8024ae0 <tse_msgdma_read_init+0x2a4>
        }
      
        // ensure bit-31 of tse_ptr->pkt_array_rx[desc_index]->nb_buff is clear before passing
        // to MSGDMA Driver
        uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array_rx[chain_index][desc_index]->nb_buff, 4);
 802493c:	e0fff917 	ldw	r3,-28(fp)
 8024940:	e0bffd17 	ldw	r2,-12(fp)
 8024944:	11000264 	muli	r4,r2,9
 8024948:	e0bffe17 	ldw	r2,-8(fp)
 802494c:	2085883a 	add	r2,r4,r2
 8024950:	10800584 	addi	r2,r2,22
 8024954:	100490ba 	slli	r2,r2,2
 8024958:	1885883a 	add	r2,r3,r2
 802495c:	10800017 	ldw	r2,0(r2)
 8024960:	10800117 	ldw	r2,4(r2)
 8024964:	01400104 	movi	r5,4
 8024968:	1009883a 	mov	r4,r2
 802496c:	803b8bc0 	call	803b8bc <alt_remap_cached>
 8024970:	e0bfff15 	stw	r2,-4(fp)
        alt_dcache_flush((void *) uncached_packet_payload, ALTERA_TSE_PKT_INIT_LEN);
 8024974:	01417e04 	movi	r5,1528
 8024978:	e13fff17 	ldw	r4,-4(fp)
 802497c:	803ab280 	call	803ab28 <alt_dcache_flush>
      }
   
      /* trigger interrupt when transfer complete */
      control =  ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK |
 8024980:	00803ff4 	movhi	r2,255
 8024984:	10940004 	addi	r2,r2,20480
 8024988:	e0bffb15 	stw	r2,-20(fp)
            ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ERROR_IRQ_MASK | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_END_ON_EOP_MASK; 
            
      rc=alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor(
 802498c:	e0bff917 	ldw	r2,-28(fp)
 8024990:	11000317 	ldw	r4,12(r2)
            tse_ptr->mi.rx_msgdma,
            (alt_msgdma_prefetcher_standard_descriptor *) &tse_ptr->rxdesc[chain_index][desc_index],  
 8024994:	e0fff917 	ldw	r3,-28(fp)
 8024998:	e0bffd17 	ldw	r2,-12(fp)
 802499c:	10800444 	addi	r2,r2,17
 80249a0:	100490ba 	slli	r2,r2,2
 80249a4:	1885883a 	add	r2,r3,r2
 80249a8:	10c00017 	ldw	r3,0(r2)
 80249ac:	e0bffe17 	ldw	r2,-8(fp)
 80249b0:	1004917a 	slli	r2,r2,5
      rc=alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor(
 80249b4:	1887883a 	add	r3,r3,r2
 80249b8:	e17fff17 	ldw	r5,-4(fp)
 80249bc:	e1bffc17 	ldw	r6,-16(fp)
 80249c0:	e0bffb17 	ldw	r2,-20(fp)
 80249c4:	d8800015 	stw	r2,0(sp)
 80249c8:	300f883a 	mov	r7,r6
 80249cc:	280d883a 	mov	r6,r5
 80249d0:	180b883a 	mov	r5,r3
 80249d4:	80225bc0 	call	80225bc <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>
 80249d8:	e0bffa15 	stw	r2,-24(fp)
            (alt_u32)uncached_packet_payload,   
            max_transfer_size,
            control);
      if (rc!=0) return -1;
 80249dc:	e0bffa17 	ldw	r2,-24(fp)
 80249e0:	10000226 	beq	r2,zero,80249ec <tse_msgdma_read_init+0x1b0>
 80249e4:	00bfffc4 	movi	r2,-1
 80249e8:	00003d06 	br	8024ae0 <tse_msgdma_read_init+0x2a4>
      
      if (desc_index==0) tse_ptr->rxdesc_list[chain_index] = NULL;  
 80249ec:	e0bffe17 	ldw	r2,-8(fp)
 80249f0:	1000061e 	bne	r2,zero,8024a0c <tse_msgdma_read_init+0x1d0>
 80249f4:	e0fff917 	ldw	r3,-28(fp)
 80249f8:	e0bffd17 	ldw	r2,-12(fp)
 80249fc:	108003c4 	addi	r2,r2,15
 8024a00:	100490ba 	slli	r2,r2,2
 8024a04:	1885883a 	add	r2,r3,r2
 8024a08:	10000015 	stw	zero,0(r2)
            
      rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 8024a0c:	e0bffd17 	ldw	r2,-12(fp)
 8024a10:	108003c4 	addi	r2,r2,15
 8024a14:	100490ba 	slli	r2,r2,2
 8024a18:	e0fff917 	ldw	r3,-28(fp)
 8024a1c:	1889883a 	add	r4,r3,r2
               &tse_ptr->rxdesc_list[chain_index],
               &tse_ptr->rxdesc[chain_index][desc_index] );        
 8024a20:	e0fff917 	ldw	r3,-28(fp)
 8024a24:	e0bffd17 	ldw	r2,-12(fp)
 8024a28:	10800444 	addi	r2,r2,17
 8024a2c:	100490ba 	slli	r2,r2,2
 8024a30:	1885883a 	add	r2,r3,r2
 8024a34:	10c00017 	ldw	r3,0(r2)
 8024a38:	e0bffe17 	ldw	r2,-8(fp)
 8024a3c:	1004917a 	slli	r2,r2,5
      rc=alt_msgdma_prefetcher_add_standard_desc_to_list(
 8024a40:	1885883a 	add	r2,r3,r2
 8024a44:	100b883a 	mov	r5,r2
 8024a48:	802285c0 	call	802285c <alt_msgdma_prefetcher_add_standard_desc_to_list>
 8024a4c:	e0bffa15 	stw	r2,-24(fp)
      if (rc!=0) return -1;
 8024a50:	e0bffa17 	ldw	r2,-24(fp)
 8024a54:	10000226 	beq	r2,zero,8024a60 <tse_msgdma_read_init+0x224>
 8024a58:	00bfffc4 	movi	r2,-1
 8024a5c:	00002006 	br	8024ae0 <tse_msgdma_read_init+0x2a4>
    for(desc_index = 0; desc_index < ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE; desc_index++)
 8024a60:	e0bffe17 	ldw	r2,-8(fp)
 8024a64:	10800044 	addi	r2,r2,1
 8024a68:	e0bffe15 	stw	r2,-8(fp)
 8024a6c:	e0bffe17 	ldw	r2,-8(fp)
 8024a70:	10800250 	cmplti	r2,r2,9
 8024a74:	103f8c1e 	bne	r2,zero,80248a8 <tse_msgdma_read_init+0x6c>
  for (chain_index=0;chain_index<2;chain_index++)
 8024a78:	e0bffd17 	ldw	r2,-12(fp)
 8024a7c:	10800044 	addi	r2,r2,1
 8024a80:	e0bffd15 	stw	r2,-12(fp)
 8024a84:	e0bffd17 	ldw	r2,-12(fp)
 8024a88:	10800090 	cmplti	r2,r2,2
 8024a8c:	103f7e1e 	bne	r2,zero,8024888 <tse_msgdma_read_init+0x4c>
    }

  } 

  dprintf("[tse_msgdma_read_init] RX descriptor chain desc (%d depth) created\n",  desc_index);
 8024a90:	e17ffe17 	ldw	r5,-8(fp)
 8024a94:	01020174 	movhi	r4,2053
 8024a98:	21081d04 	addi	r4,r4,8308
 8024a9c:	800325c0 	call	800325c <printf>
   
  tse_ptr->rx_descriptor_index=0;   //for processing completed rx descriptors
 8024aa0:	e0bff917 	ldw	r2,-28(fp)
 8024aa4:	10001415 	stw	zero,80(r2)
  tse_ptr->rx_chain=0;
 8024aa8:	e0bff917 	ldw	r2,-28(fp)
 8024aac:	10001315 	stw	zero,76(r2)
  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->rxdesc_list[tse_ptr->rx_chain]);
 8024ab0:	e0bff917 	ldw	r2,-28(fp)
 8024ab4:	11000104 	addi	r4,r2,4
 8024ab8:	e0bff917 	ldw	r2,-28(fp)
 8024abc:	10801317 	ldw	r2,76(r2)
 8024ac0:	e0fff917 	ldw	r3,-28(fp)
 8024ac4:	108003c4 	addi	r2,r2,15
 8024ac8:	100490ba 	slli	r2,r2,2
 8024acc:	1885883a 	add	r2,r3,r2
 8024ad0:	10800017 	ldw	r2,0(r2)
 8024ad4:	100b883a 	mov	r5,r2
 8024ad8:	801bab80 	call	801bab8 <tse_mac_aRxRead>
  
  return SUCCESS;
 8024adc:	0005883a 	mov	r2,zero
}
 8024ae0:	e037883a 	mov	sp,fp
 8024ae4:	dfc00117 	ldw	ra,4(sp)
 8024ae8:	df000017 	ldw	fp,0(sp)
 8024aec:	dec00204 	addi	sp,sp,8
 8024af0:	f800283a 	ret

08024af4 <allocate_rx_descriptor_chain>:

/* allocate the storage for the non active rx descriptor chain 
   update the write pointers in each descriptor to point
   to the allocated storage. */
int allocate_rx_descriptor_chain(ins_tse_info* tse_ptr)
{
 8024af4:	defff904 	addi	sp,sp,-28
 8024af8:	dfc00615 	stw	ra,24(sp)
 8024afc:	df000515 	stw	fp,20(sp)
 8024b00:	df000504 	addi	fp,sp,20
 8024b04:	e13ffb15 	stw	r4,-20(fp)
    PACKET replacement_pkt;
    alt_u32 *uncached_packet_payload;
    alt_msgdma_prefetcher_standard_descriptor *rxDesc;
    int i;
    
    for (i=0;i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 8024b08:	e03fff15 	stw	zero,-4(fp)
 8024b0c:	00003e06 	br	8024c08 <allocate_rx_descriptor_chain+0x114>
    {
        replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN);
 8024b10:	01017e04 	movi	r4,1528
 8024b14:	802b8840 	call	802b884 <pk_alloc>
 8024b18:	e0bffe15 	stw	r2,-8(fp)
        if (!replacement_pkt) { /* couldn't get a free buffer for rx */
 8024b1c:	e0bffe17 	ldw	r2,-8(fp)
 8024b20:	1000051e 	bne	r2,zero,8024b38 <allocate_rx_descriptor_chain+0x44>
          dprintf("No free buffers for rx\n");
 8024b24:	01020174 	movhi	r4,2053
 8024b28:	21082e04 	addi	r4,r4,8376
 8024b2c:	80033800 	call	8003380 <puts>
          return 1;
 8024b30:	00800044 	movi	r2,1
 8024b34:	00003806 	br	8024c18 <allocate_rx_descriptor_chain+0x124>
        }
        else
        {
            rxDesc = &tse_ptr->rxdesc[!tse_ptr->rx_chain][i];
 8024b38:	e0bffb17 	ldw	r2,-20(fp)
 8024b3c:	10801317 	ldw	r2,76(r2)
 8024b40:	1005003a 	cmpeq	r2,r2,zero
 8024b44:	10803fcc 	andi	r2,r2,255
 8024b48:	e0fffb17 	ldw	r3,-20(fp)
 8024b4c:	10800444 	addi	r2,r2,17
 8024b50:	100490ba 	slli	r2,r2,2
 8024b54:	1885883a 	add	r2,r3,r2
 8024b58:	10c00017 	ldw	r3,0(r2)
 8024b5c:	e0bfff17 	ldw	r2,-4(fp)
 8024b60:	1004917a 	slli	r2,r2,5
 8024b64:	1885883a 	add	r2,r3,r2
 8024b68:	e0bffd15 	stw	r2,-12(fp)
            tse_ptr->pkt_array_rx[!tse_ptr->rx_chain][i] = replacement_pkt;
 8024b6c:	e0bffb17 	ldw	r2,-20(fp)
 8024b70:	10801317 	ldw	r2,76(r2)
 8024b74:	1005003a 	cmpeq	r2,r2,zero
 8024b78:	10803fcc 	andi	r2,r2,255
 8024b7c:	e0fffb17 	ldw	r3,-20(fp)
 8024b80:	11000264 	muli	r4,r2,9
 8024b84:	e0bfff17 	ldw	r2,-4(fp)
 8024b88:	2085883a 	add	r2,r4,r2
 8024b8c:	10800584 	addi	r2,r2,22
 8024b90:	100490ba 	slli	r2,r2,2
 8024b94:	1885883a 	add	r2,r3,r2
 8024b98:	e0fffe17 	ldw	r3,-8(fp)
 8024b9c:	10c00015 	stw	r3,0(r2)
            uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array_rx[!tse_ptr->rx_chain][i]->nb_buff, 4);
 8024ba0:	e0bffb17 	ldw	r2,-20(fp)
 8024ba4:	10801317 	ldw	r2,76(r2)
 8024ba8:	1005003a 	cmpeq	r2,r2,zero
 8024bac:	10803fcc 	andi	r2,r2,255
 8024bb0:	e0fffb17 	ldw	r3,-20(fp)
 8024bb4:	11000264 	muli	r4,r2,9
 8024bb8:	e0bfff17 	ldw	r2,-4(fp)
 8024bbc:	2085883a 	add	r2,r4,r2
 8024bc0:	10800584 	addi	r2,r2,22
 8024bc4:	100490ba 	slli	r2,r2,2
 8024bc8:	1885883a 	add	r2,r3,r2
 8024bcc:	10800017 	ldw	r2,0(r2)
 8024bd0:	10800117 	ldw	r2,4(r2)
 8024bd4:	01400104 	movi	r5,4
 8024bd8:	1009883a 	mov	r4,r2
 8024bdc:	803b8bc0 	call	803b8bc <alt_remap_cached>
 8024be0:	e0bffc15 	stw	r2,-16(fp)
            alt_dcache_flush((void *) uncached_packet_payload, ALTERA_TSE_PKT_INIT_LEN);
 8024be4:	01417e04 	movi	r5,1528
 8024be8:	e13ffc17 	ldw	r4,-16(fp)
 8024bec:	803ab280 	call	803ab28 <alt_dcache_flush>
            rxDesc->write_address = (alt_u32)(uncached_packet_payload);
 8024bf0:	e0fffc17 	ldw	r3,-16(fp)
 8024bf4:	e0bffd17 	ldw	r2,-12(fp)
 8024bf8:	10c00115 	stw	r3,4(r2)
    for (i=0;i<(ALTERA_TSE_MSGDMA_RX_DESC_CHAIN_SIZE-1);i++)
 8024bfc:	e0bfff17 	ldw	r2,-4(fp)
 8024c00:	10800044 	addi	r2,r2,1
 8024c04:	e0bfff15 	stw	r2,-4(fp)
 8024c08:	e0bfff17 	ldw	r2,-4(fp)
 8024c0c:	10800210 	cmplti	r2,r2,8
 8024c10:	103fbf1e 	bne	r2,zero,8024b10 <allocate_rx_descriptor_chain+0x1c>
        }
    } 
    
    return 0;
 8024c14:	0005883a 	mov	r2,zero
}
 8024c18:	e037883a 	mov	sp,fp
 8024c1c:	dfc00117 	ldw	ra,4(sp)
 8024c20:	df000017 	ldw	fp,0(sp)
 8024c24:	dec00204 	addi	sp,sp,8
 8024c28:	f800283a 	ret

08024c2c <tse_mac_rcv>:
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 8024c2c:	defffa04 	addi	sp,sp,-24
 8024c30:	dfc00515 	stw	ra,20(sp)
 8024c34:	df000415 	stw	fp,16(sp)
 8024c38:	df000404 	addi	fp,sp,16
 8024c3c:	e13ffc15 	stw	r4,-16(fp)
    struct ethhdr * eth;
    int pklen;
    PACKET rx_packet;
        
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_32DIRECT(&tse_ptr->rxdesc[tse_ptr->rx_chain][tse_ptr->rx_descriptor_index].bytes_transfered,0) - 2;  
 8024c40:	e0bffc17 	ldw	r2,-16(fp)
 8024c44:	10801317 	ldw	r2,76(r2)
 8024c48:	e0fffc17 	ldw	r3,-16(fp)
 8024c4c:	10800444 	addi	r2,r2,17
 8024c50:	100490ba 	slli	r2,r2,2
 8024c54:	1885883a 	add	r2,r3,r2
 8024c58:	10c00017 	ldw	r3,0(r2)
 8024c5c:	e0bffc17 	ldw	r2,-16(fp)
 8024c60:	10801417 	ldw	r2,80(r2)
 8024c64:	1004917a 	slli	r2,r2,5
 8024c68:	1885883a 	add	r2,r3,r2
 8024c6c:	10800404 	addi	r2,r2,16
 8024c70:	10800037 	ldwio	r2,0(r2)
 8024c74:	10bfff84 	addi	r2,r2,-2
 8024c78:	e0bfff15 	stw	r2,-4(fp)
    
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 8024c7c:	e0bffc17 	ldw	r2,-16(fp)
 8024c80:	10800817 	ldw	r2,32(r2)
 8024c84:	10802717 	ldw	r2,156(r2)
 8024c88:	11000917 	ldw	r4,36(r2)
 8024c8c:	e0ffff17 	ldw	r3,-4(fp)
 8024c90:	e0bffc17 	ldw	r2,-16(fp)
 8024c94:	10800817 	ldw	r2,32(r2)
 8024c98:	10802717 	ldw	r2,156(r2)
 8024c9c:	20c7883a 	add	r3,r4,r3
 8024ca0:	10c00915 	stw	r3,36(r2)
    
    rx_packet = tse_ptr->pkt_array_rx[tse_ptr->rx_chain][tse_ptr->rx_descriptor_index];   
 8024ca4:	e0bffc17 	ldw	r2,-16(fp)
 8024ca8:	11001317 	ldw	r4,76(r2)
 8024cac:	e0bffc17 	ldw	r2,-16(fp)
 8024cb0:	10801417 	ldw	r2,80(r2)
 8024cb4:	e0fffc17 	ldw	r3,-16(fp)
 8024cb8:	21000264 	muli	r4,r4,9
 8024cbc:	2085883a 	add	r2,r4,r2
 8024cc0:	10800584 	addi	r2,r2,22
 8024cc4:	100490ba 	slli	r2,r2,2
 8024cc8:	1885883a 	add	r2,r3,r2
 8024ccc:	10800017 	ldw	r2,0(r2)
 8024cd0:	e0bffe15 	stw	r2,-8(fp)
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 8024cd4:	e0bffe17 	ldw	r2,-8(fp)
 8024cd8:	10800117 	ldw	r2,4(r2)
 8024cdc:	10c00404 	addi	r3,r2,16
 8024ce0:	e0bffe17 	ldw	r2,-8(fp)
 8024ce4:	10c00315 	stw	r3,12(r2)
    rx_packet->nb_plen = pklen - 14;
 8024ce8:	e0bfff17 	ldw	r2,-4(fp)
 8024cec:	10bffc84 	addi	r2,r2,-14
 8024cf0:	1007883a 	mov	r3,r2
 8024cf4:	e0bffe17 	ldw	r2,-8(fp)
 8024cf8:	10c00415 	stw	r3,16(r2)
    rx_packet->nb_tstamp = cticks;
 8024cfc:	d0a0a317 	ldw	r2,-32116(gp)
 8024d00:	1007883a 	mov	r3,r2
 8024d04:	e0bffe17 	ldw	r2,-8(fp)
 8024d08:	10c00515 	stw	r3,20(r2)
    rx_packet->net = tse_ptr->netp;
 8024d0c:	e0bffc17 	ldw	r2,-16(fp)
 8024d10:	10c00817 	ldw	r3,32(r2)
 8024d14:	e0bffe17 	ldw	r2,-8(fp)
 8024d18:	10c00615 	stw	r3,24(r2)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
 8024d1c:	e0bffe17 	ldw	r2,-8(fp)
 8024d20:	10800117 	ldw	r2,4(r2)
 8024d24:	10800084 	addi	r2,r2,2
 8024d28:	e0bffd15 	stw	r2,-12(fp)
    rx_packet->type = eth->e_type;
 8024d2c:	e0bffd17 	ldw	r2,-12(fp)
 8024d30:	10c0030b 	ldhu	r3,12(r2)
 8024d34:	e0bffe17 	ldw	r2,-8(fp)
 8024d38:	10c0080d 	sth	r3,32(r2)
    
    putq(&rcvdq, rx_packet);
 8024d3c:	e17ffe17 	ldw	r5,-8(fp)
 8024d40:	010201b4 	movhi	r4,2054
 8024d44:	213a1504 	addi	r4,r4,-6060
 8024d48:	802bde00 	call	802bde0 <putq>
              
    tse_ptr->rx_descriptor_index++; 
 8024d4c:	e0bffc17 	ldw	r2,-16(fp)
 8024d50:	10801417 	ldw	r2,80(r2)
 8024d54:	10c00044 	addi	r3,r2,1
 8024d58:	e0bffc17 	ldw	r2,-16(fp)
 8024d5c:	10c01415 	stw	r3,80(r2)
} 
 8024d60:	0001883a 	nop
 8024d64:	e037883a 	mov	sp,fp
 8024d68:	dfc00117 	ldw	ra,4(sp)
 8024d6c:	df000017 	ldw	fp,0(sp)
 8024d70:	dec00204 	addi	sp,sp,8
 8024d74:	f800283a 	ret

08024d78 <tse_mac_stats>:

int tse_mac_stats(void * pio, int iface)
{
 8024d78:	defffc04 	addi	sp,sp,-16
 8024d7c:	dfc00315 	stw	ra,12(sp)
 8024d80:	df000215 	stw	fp,8(sp)
 8024d84:	df000204 	addi	fp,sp,8
 8024d88:	e13fff15 	stw	r4,-4(fp)
 8024d8c:	e17ffe15 	stw	r5,-8(fp)
    ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
 8024d90:	01420174 	movhi	r5,2053
 8024d94:	29483404 	addi	r5,r5,8400
 8024d98:	e13fff17 	ldw	r4,-4(fp)
 8024d9c:	80281f80 	call	80281f8 <ns_printf>
    return SUCCESS;
 8024da0:	0005883a 	mov	r2,zero
}
 8024da4:	e037883a 	mov	sp,fp
 8024da8:	dfc00117 	ldw	ra,4(sp)
 8024dac:	df000017 	ldw	fp,0(sp)
 8024db0:	dec00204 	addi	sp,sp,8
 8024db4:	f800283a 	ret

08024db8 <tse_mac_close>:
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 8024db8:	defffc04 	addi	sp,sp,-16
 8024dbc:	dfc00315 	stw	ra,12(sp)
 8024dc0:	df000215 	stw	fp,8(sp)
 8024dc4:	df000204 	addi	fp,sp,8
 8024dc8:	e13ffe15 	stw	r4,-8(fp)
    int state;
     
    /* status = down */
    nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 8024dcc:	e0bffe17 	ldw	r2,-8(fp)
 8024dd0:	100690ba 	slli	r3,r2,2
 8024dd4:	008201b4 	movhi	r2,2054
 8024dd8:	1885883a 	add	r2,r3,r2
 8024ddc:	10bada17 	ldw	r2,-5272(r2)
 8024de0:	10802717 	ldw	r2,156(r2)
 8024de4:	00c00084 	movi	r3,2
 8024de8:	10c00615 	stw	r3,24(r2)
    
    /* disable the interrupt in the OS*/
    alt_msgdma_register_callback(tse[iface].mi.rx_msgdma, 0, 0, 0);
 8024dec:	e0bffe17 	ldw	r2,-8(fp)
 8024df0:	10c02924 	muli	r3,r2,164
 8024df4:	008201b4 	movhi	r2,2054
 8024df8:	1885883a 	add	r2,r3,r2
 8024dfc:	10b97417 	ldw	r2,-6704(r2)
 8024e00:	000f883a 	mov	r7,zero
 8024e04:	000d883a 	mov	r6,zero
 8024e08:	000b883a 	mov	r5,zero
 8024e0c:	1009883a 	mov	r4,r2
 8024e10:	80233b80 	call	80233b8 <alt_msgdma_register_callback>
     
    /* Disable Receive path on the device*/
    state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 8024e14:	e0bffe17 	ldw	r2,-8(fp)
 8024e18:	10c02924 	muli	r3,r2,164
 8024e1c:	008201b4 	movhi	r2,2054
 8024e20:	1885883a 	add	r2,r3,r2
 8024e24:	10b97217 	ldw	r2,-6712(r2)
 8024e28:	10800204 	addi	r2,r2,8
 8024e2c:	10800037 	ldwio	r2,0(r2)
 8024e30:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
 8024e34:	e0bffe17 	ldw	r2,-8(fp)
 8024e38:	10c02924 	muli	r3,r2,164
 8024e3c:	008201b4 	movhi	r2,2054
 8024e40:	1885883a 	add	r2,r3,r2
 8024e44:	10b97217 	ldw	r2,-6712(r2)
 8024e48:	10800204 	addi	r2,r2,8
 8024e4c:	e13fff17 	ldw	r4,-4(fp)
 8024e50:	00ffff44 	movi	r3,-3
 8024e54:	20c6703a 	and	r3,r4,r3
 8024e58:	10c00035 	stwio	r3,0(r2)
    
    /* status = down */                                     
    nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
 8024e5c:	e0bffe17 	ldw	r2,-8(fp)
 8024e60:	100690ba 	slli	r3,r2,2
 8024e64:	008201b4 	movhi	r2,2054
 8024e68:	1885883a 	add	r2,r3,r2
 8024e6c:	10bada17 	ldw	r2,-5272(r2)
 8024e70:	10802717 	ldw	r2,156(r2)
 8024e74:	00c00084 	movi	r3,2
 8024e78:	10c00715 	stw	r3,28(r2)
    
    return SUCCESS;
 8024e7c:	0005883a 	mov	r2,zero
}
 8024e80:	e037883a 	mov	sp,fp
 8024e84:	dfc00117 	ldw	ra,4(sp)
 8024e88:	df000017 	ldw	fp,0(sp)
 8024e8c:	dec00204 	addi	sp,sp,8
 8024e90:	f800283a 	ret

08024e94 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 8024e94:	defffd04 	addi	sp,sp,-12
 8024e98:	dfc00215 	stw	ra,8(sp)
 8024e9c:	df000115 	stw	fp,4(sp)
 8024ea0:	df000104 	addi	fp,sp,4
 8024ea4:	e13fff15 	stw	r4,-4(fp)
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
 8024ea8:	e0bfff17 	ldw	r2,-4(fp)
 8024eac:	10800808 	cmpgei	r2,r2,32
 8024eb0:	1000031e 	bne	r2,zero,8024ec0 <close+0x2c>
 8024eb4:	e13fff17 	ldw	r4,-4(fp)
 8024eb8:	803aa580 	call	803aa58 <alt_close>
 8024ebc:	00000206 	br	8024ec8 <close+0x34>
 8024ec0:	e13fff17 	ldw	r4,-4(fp)
 8024ec4:	80305b80 	call	80305b8 <t_socketclose>
}
 8024ec8:	e037883a 	mov	sp,fp
 8024ecc:	dfc00117 	ldw	ra,4(sp)
 8024ed0:	df000017 	ldw	fp,0(sp)
 8024ed4:	dec00204 	addi	sp,sp,8
 8024ed8:	f800283a 	ret

08024edc <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 8024edc:	defff504 	addi	sp,sp,-44
 8024ee0:	dfc00a15 	stw	ra,40(sp)
 8024ee4:	df000915 	stw	fp,36(sp)
 8024ee8:	df000904 	addi	fp,sp,36
 8024eec:	e13ff815 	stw	r4,-32(fp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
 8024ef0:	d0a02a17 	ldw	r2,-32600(gp)
 8024ef4:	e0bfff15 	stw	r2,-4(fp)
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
 8024ef8:	d0a02a04 	addi	r2,gp,-32600
 8024efc:	e0bffe15 	stw	r2,-8(fp)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 8024f00:	00003d06 	br	8024ff8 <iniche_devices_init+0x11c>
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
 8024f04:	e0bfff17 	ldw	r2,-4(fp)
 8024f08:	e0ffff17 	ldw	r3,-4(fp)
 8024f0c:	10c00415 	stw	r3,16(r2)
        p_dev->if_num = if_count;
 8024f10:	e0bfff17 	ldw	r2,-4(fp)
 8024f14:	e0fff817 	ldw	r3,-32(fp)
 8024f18:	10c00515 	stw	r3,20(r2)
        p_dev->p_net = nets[p_dev->if_num];
 8024f1c:	e0bfff17 	ldw	r2,-4(fp)
 8024f20:	10800517 	ldw	r2,20(r2)
 8024f24:	100690ba 	slli	r3,r2,2
 8024f28:	008201b4 	movhi	r2,2054
 8024f2c:	1885883a 	add	r2,r3,r2
 8024f30:	10fada17 	ldw	r3,-5272(r2)
 8024f34:	e0bfff17 	ldw	r2,-4(fp)
 8024f38:	10c00615 	stw	r3,24(r2)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 8024f3c:	e0bfff17 	ldw	r2,-4(fp)
 8024f40:	10800317 	ldw	r2,12(r2)
 8024f44:	e13fff17 	ldw	r4,-4(fp)
 8024f48:	103ee83a 	callr	r2

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
 8024f4c:	e0bfff17 	ldw	r2,-4(fp)
 8024f50:	10800617 	ldw	r2,24(r2)
 8024f54:	e0bffd15 	stw	r2,-12(fp)
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
 8024f58:	e17ffa04 	addi	r5,fp,-24
 8024f5c:	e13ffb04 	addi	r4,fp,-20
 8024f60:	e0fffc04 	addi	r3,fp,-16
 8024f64:	e0bff904 	addi	r2,fp,-28
 8024f68:	d8800015 	stw	r2,0(sp)
 8024f6c:	280f883a 	mov	r7,r5
 8024f70:	200d883a 	mov	r6,r4
 8024f74:	180b883a 	mov	r5,r3
 8024f78:	e13fff17 	ldw	r4,-4(fp)
 8024f7c:	80026340 	call	8002634 <get_ip_addr>
 8024f80:	10001726 	beq	r2,zero,8024fe0 <iniche_devices_init+0x104>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
 8024f84:	e0bff917 	ldw	r2,-28(fp)
 8024f88:	10000526 	beq	r2,zero,8024fa0 <iniche_devices_init+0xc4>
                p_net->n_flags |= NF_DHCPC;
 8024f8c:	e0bffd17 	ldw	r2,-12(fp)
 8024f90:	10802a17 	ldw	r2,168(r2)
 8024f94:	10c04014 	ori	r3,r2,256
 8024f98:	e0bffd17 	ldw	r2,-12(fp)
 8024f9c:	10c02a15 	stw	r3,168(r2)
            }
#endif
            p_net->n_ipaddr = ipaddr;
 8024fa0:	e0fffc17 	ldw	r3,-16(fp)
 8024fa4:	e0bffd17 	ldw	r2,-12(fp)
 8024fa8:	10c00a15 	stw	r3,40(r2)
            p_net->snmask = netmask;
 8024fac:	e0fffb17 	ldw	r3,-20(fp)
 8024fb0:	e0bffd17 	ldw	r2,-12(fp)
 8024fb4:	10c00c15 	stw	r3,48(r2)
            p_net->n_defgw = gw;
 8024fb8:	e0fffa17 	ldw	r3,-24(fp)
 8024fbc:	e0bffd17 	ldw	r2,-12(fp)
 8024fc0:	10c00d15 	stw	r3,52(r2)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
 8024fc4:	e0fffd17 	ldw	r3,-12(fp)
 8024fc8:	00820134 	movhi	r2,2052
 8024fcc:	10b11e04 	addi	r2,r2,-15240
 8024fd0:	18802b15 	stw	r2,172(r3)
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
 8024fd4:	e0bffd17 	ldw	r2,-12(fp)
 8024fd8:	00c00084 	movi	r3,2
 8024fdc:	10c02f05 	stb	r3,188(r2)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
 8024fe0:	e0bff817 	ldw	r2,-32(fp)
 8024fe4:	10800044 	addi	r2,r2,1
 8024fe8:	e0bff815 	stw	r2,-32(fp)
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
 8024fec:	e0bfff17 	ldw	r2,-4(fp)
 8024ff0:	10800017 	ldw	r2,0(r2)
 8024ff4:	e0bfff15 	stw	r2,-4(fp)
    while (p_dev != p_dev_list_end)
 8024ff8:	e0ffff17 	ldw	r3,-4(fp)
 8024ffc:	e0bffe17 	ldw	r2,-8(fp)
 8025000:	18bfc01e 	bne	r3,r2,8024f04 <iniche_devices_init+0x28>
    }

    return (if_count);
 8025004:	e0bff817 	ldw	r2,-32(fp)
}
 8025008:	e037883a 	mov	sp,fp
 802500c:	dfc00117 	ldw	ra,4(sp)
 8025010:	df000017 	ldw	fp,0(sp)
 8025014:	dec00204 	addi	sp,sp,8
 8025018:	f800283a 	ret

0802501c <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 802501c:	defff904 	addi	sp,sp,-28
 8025020:	dfc00615 	stw	ra,24(sp)
 8025024:	df000515 	stw	fp,20(sp)
 8025028:	df000504 	addi	fp,sp,20
 802502c:	e13fff15 	stw	r4,-4(fp)
 8025030:	e17ffe15 	stw	r5,-8(fp)
 8025034:	e1bffd15 	stw	r6,-12(fp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
 8025038:	e0bfff17 	ldw	r2,-4(fp)
 802503c:	10800808 	cmpgei	r2,r2,32
 8025040:	1000051e 	bne	r2,zero,8025058 <read+0x3c>
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 8025044:	e1bffd17 	ldw	r6,-12(fp)
 8025048:	e17ffe17 	ldw	r5,-8(fp)
 802504c:	e13fff17 	ldw	r4,-4(fp)
 8025050:	803b7680 	call	803b768 <alt_read>
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
 8025054:	00000806 	br	8025078 <read+0x5c>
 8025058:	e0bffd17 	ldw	r2,-12(fp)
 802505c:	d8000115 	stw	zero,4(sp)
 8025060:	d8000015 	stw	zero,0(sp)
 8025064:	000f883a 	mov	r7,zero
 8025068:	100d883a 	mov	r6,r2
 802506c:	e17ffe17 	ldw	r5,-8(fp)
 8025070:	e13fff17 	ldw	r4,-4(fp)
 8025074:	80277940 	call	8027794 <bsd_recvfrom>
}
 8025078:	e037883a 	mov	sp,fp
 802507c:	dfc00117 	ldw	ra,4(sp)
 8025080:	df000017 	ldw	fp,0(sp)
 8025084:	dec00204 	addi	sp,sp,8
 8025088:	f800283a 	ret

0802508c <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 802508c:	defffb04 	addi	sp,sp,-20
 8025090:	dfc00415 	stw	ra,16(sp)
 8025094:	df000315 	stw	fp,12(sp)
 8025098:	df000304 	addi	fp,sp,12
 802509c:	e13fff15 	stw	r4,-4(fp)
 80250a0:	e17ffe15 	stw	r5,-8(fp)
 80250a4:	e1bffd15 	stw	r6,-12(fp)
  if (fd < ALT_MAX_FD)
 80250a8:	e0bfff17 	ldw	r2,-4(fp)
 80250ac:	10800808 	cmpgei	r2,r2,32
 80250b0:	1000051e 	bne	r2,zero,80250c8 <write+0x3c>
  {
    return alt_write (fd, ptr, len);
 80250b4:	e1bffd17 	ldw	r6,-12(fp)
 80250b8:	e17ffe17 	ldw	r5,-8(fp)
 80250bc:	e13fff17 	ldw	r4,-4(fp)
 80250c0:	803bca80 	call	803bca8 <alt_write>
 80250c4:	00000606 	br	80250e0 <write+0x54>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
 80250c8:	e0bffd17 	ldw	r2,-12(fp)
 80250cc:	000f883a 	mov	r7,zero
 80250d0:	100d883a 	mov	r6,r2
 80250d4:	e17ffe17 	ldw	r5,-8(fp)
 80250d8:	e13fff17 	ldw	r4,-4(fp)
 80250dc:	80302e40 	call	80302e4 <t_send>
  }  
}
 80250e0:	e037883a 	mov	sp,fp
 80250e4:	dfc00117 	ldw	ra,4(sp)
 80250e8:	df000017 	ldw	fp,0(sp)
 80250ec:	dec00204 	addi	sp,sp,8
 80250f0:	f800283a 	ret

080250f4 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
 80250f4:	defffc04 	addi	sp,sp,-16
 80250f8:	dfc00315 	stw	ra,12(sp)
 80250fc:	df000215 	stw	fp,8(sp)
 8025100:	df000204 	addi	fp,sp,8
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 8025104:	e03fff15 	stw	zero,-4(fp)
 8025108:	00003c06 	br	80251fc <Netinit+0x108>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
 802510c:	e0bfff17 	ldw	r2,-4(fp)
 8025110:	100690ba 	slli	r3,r2,2
 8025114:	008201b4 	movhi	r2,2054
 8025118:	1885883a 	add	r2,r3,r2
 802511c:	10bada17 	ldw	r2,-5272(r2)
 8025120:	10802717 	ldw	r2,156(r2)
 8025124:	10800217 	ldw	r2,8(r2)
 8025128:	10800198 	cmpnei	r2,r2,6
 802512c:	10001c1e 	bne	r2,zero,80251a0 <Netinit+0xac>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
 8025130:	e0bfff17 	ldw	r2,-4(fp)
 8025134:	100690ba 	slli	r3,r2,2
 8025138:	008201b4 	movhi	r2,2054
 802513c:	1885883a 	add	r2,r3,r2
 8025140:	10bada17 	ldw	r2,-5272(r2)
 8025144:	10800917 	ldw	r2,36(r2)
 8025148:	1000071e 	bne	r2,zero,8025168 <Netinit+0x74>
            nets[i]->n_mtu = 1514;
 802514c:	e0bfff17 	ldw	r2,-4(fp)
 8025150:	100690ba 	slli	r3,r2,2
 8025154:	008201b4 	movhi	r2,2054
 8025158:	1885883a 	add	r2,r3,r2
 802515c:	10bada17 	ldw	r2,-5272(r2)
 8025160:	00c17a84 	movi	r3,1514
 8025164:	10c00915 	stw	r3,36(r2)

         if (nets[i]->n_lnh == 0)
 8025168:	e0bfff17 	ldw	r2,-4(fp)
 802516c:	100690ba 	slli	r3,r2,2
 8025170:	008201b4 	movhi	r2,2054
 8025174:	1885883a 	add	r2,r3,r2
 8025178:	10bada17 	ldw	r2,-5272(r2)
 802517c:	10800817 	ldw	r2,32(r2)
 8025180:	1000071e 	bne	r2,zero,80251a0 <Netinit+0xac>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
 8025184:	e0bfff17 	ldw	r2,-4(fp)
 8025188:	100690ba 	slli	r3,r2,2
 802518c:	008201b4 	movhi	r2,2054
 8025190:	1885883a 	add	r2,r3,r2
 8025194:	10bada17 	ldw	r2,-5272(r2)
 8025198:	00c00404 	movi	r3,16
 802519c:	10c00815 	stw	r3,32(r2)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
 80251a0:	e0bfff17 	ldw	r2,-4(fp)
 80251a4:	100690ba 	slli	r3,r2,2
 80251a8:	008201b4 	movhi	r2,2054
 80251ac:	1885883a 	add	r2,r3,r2
 80251b0:	10bada17 	ldw	r2,-5272(r2)
 80251b4:	10800817 	ldw	r2,32(r2)
 80251b8:	d0e07c17 	ldw	r3,-32272(gp)
 80251bc:	10c0010e 	bge	r2,r3,80251c4 <Netinit+0xd0>
 80251c0:	1805883a 	mov	r2,r3
 80251c4:	d0a07c15 	stw	r2,-32272(gp)
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
 80251c8:	e0bfff17 	ldw	r2,-4(fp)
 80251cc:	100690ba 	slli	r3,r2,2
 80251d0:	008201b4 	movhi	r2,2054
 80251d4:	1885883a 	add	r2,r3,r2
 80251d8:	10bada17 	ldw	r2,-5272(r2)
 80251dc:	10800917 	ldw	r2,36(r2)
 80251e0:	d0e07d17 	ldw	r3,-32268(gp)
 80251e4:	10c0010e 	bge	r2,r3,80251ec <Netinit+0xf8>
 80251e8:	1805883a 	mov	r2,r3
 80251ec:	d0a07d15 	stw	r2,-32268(gp)
   for (i = 0; i < (int)ifNumber; i++)
 80251f0:	e0bfff17 	ldw	r2,-4(fp)
 80251f4:	10800044 	addi	r2,r2,1
 80251f8:	e0bfff15 	stw	r2,-4(fp)
 80251fc:	d0a07f17 	ldw	r2,-32260(gp)
 8025200:	1007883a 	mov	r3,r2
 8025204:	e0bfff17 	ldw	r2,-4(fp)
 8025208:	10ffc016 	blt	r2,r3,802510c <Netinit+0x18>
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
 802520c:	008201b4 	movhi	r2,2054
 8025210:	103a1615 	stw	zero,-6056(r2)
 8025214:	008201b4 	movhi	r2,2054
 8025218:	10fa1617 	ldw	r3,-6056(r2)
 802521c:	008201b4 	movhi	r2,2054
 8025220:	10fa1515 	stw	r3,-6060(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
 8025224:	008201b4 	movhi	r2,2054
 8025228:	103a1715 	stw	zero,-6052(r2)
 802522c:	008201b4 	movhi	r2,2054
 8025230:	10fa1717 	ldw	r3,-6052(r2)
 8025234:	008201b4 	movhi	r2,2054
 8025238:	10fa1915 	stw	r3,-6044(r2)
 802523c:	008201b4 	movhi	r2,2054
 8025240:	10fa1917 	ldw	r3,-6044(r2)
 8025244:	008201b4 	movhi	r2,2054
 8025248:	10fa1815 	stw	r3,-6048(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 802524c:	01000084 	movi	r4,2
 8025250:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   e = pk_init();
 8025254:	802b5f80 	call	802b5f8 <pk_init>
 8025258:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802525c:	01000084 	movi	r4,2
 8025260:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
 8025264:	e0bffe17 	ldw	r2,-8(fp)
 8025268:	10000226 	beq	r2,zero,8025274 <Netinit+0x180>
      return e;
 802526c:	e0bffe17 	ldw	r2,-8(fp)
 8025270:	0000cf06 	br	80255b0 <Netinit+0x4bc>

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
 8025274:	010200b4 	movhi	r4,2050
 8025278:	2115bd04 	addi	r4,r4,22260
 802527c:	8025ffc0 	call	8025ffc <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 8025280:	e03fff15 	stw	zero,-4(fp)
 8025284:	0000c506 	br	802559c <Netinit+0x4a8>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
 8025288:	e0bfff17 	ldw	r2,-4(fp)
 802528c:	100690ba 	slli	r3,r2,2
 8025290:	008201b4 	movhi	r2,2054
 8025294:	1885883a 	add	r2,r3,r2
 8025298:	10bada17 	ldw	r2,-5272(r2)
 802529c:	10800217 	ldw	r2,8(r2)
 80252a0:	10007726 	beq	r2,zero,8025480 <Netinit+0x38c>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
 80252a4:	e0bfff17 	ldw	r2,-4(fp)
 80252a8:	100690ba 	slli	r3,r2,2
 80252ac:	008201b4 	movhi	r2,2054
 80252b0:	1885883a 	add	r2,r3,r2
 80252b4:	10bada17 	ldw	r2,-5272(r2)
 80252b8:	10800217 	ldw	r2,8(r2)
 80252bc:	e13fff17 	ldw	r4,-4(fp)
 80252c0:	103ee83a 	callr	r2
 80252c4:	e0bffe15 	stw	r2,-8(fp)
 80252c8:	e0bffe17 	ldw	r2,-8(fp)
 80252cc:	10000e26 	beq	r2,zero,8025308 <Netinit+0x214>
         {
            dprintf("init error %d on net[%d]\n", e, i);
 80252d0:	e1bfff17 	ldw	r6,-4(fp)
 80252d4:	e17ffe17 	ldw	r5,-8(fp)
 80252d8:	01020174 	movhi	r4,2053
 80252dc:	21084004 	addi	r4,r4,8448
 80252e0:	800325c0 	call	800325c <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
 80252e4:	e0bfff17 	ldw	r2,-4(fp)
 80252e8:	100690ba 	slli	r3,r2,2
 80252ec:	008201b4 	movhi	r2,2054
 80252f0:	1885883a 	add	r2,r3,r2
 80252f4:	10bada17 	ldw	r2,-5272(r2)
 80252f8:	10802717 	ldw	r2,156(r2)
 80252fc:	00c00084 	movi	r3,2
 8025300:	10c00715 	stw	r3,28(r2)
            continue;   /* ignore ifaces which fail */
 8025304:	0000a206 	br	8025590 <Netinit+0x49c>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
 8025308:	e0bfff17 	ldw	r2,-4(fp)
 802530c:	100690ba 	slli	r3,r2,2
 8025310:	008201b4 	movhi	r2,2054
 8025314:	1885883a 	add	r2,r3,r2
 8025318:	10bada17 	ldw	r2,-5272(r2)
 802531c:	10802717 	ldw	r2,156(r2)
 8025320:	10800217 	ldw	r2,8(r2)
 8025324:	10800198 	cmpnei	r2,r2,6
 8025328:	10000d1e 	bne	r2,zero,8025360 <Netinit+0x26c>
            nets[i]->n_flags |= NF_BCAST;
 802532c:	e0bfff17 	ldw	r2,-4(fp)
 8025330:	100690ba 	slli	r3,r2,2
 8025334:	008201b4 	movhi	r2,2054
 8025338:	1885883a 	add	r2,r3,r2
 802533c:	10bada17 	ldw	r2,-5272(r2)
 8025340:	10c02a17 	ldw	r3,168(r2)
 8025344:	e0bfff17 	ldw	r2,-4(fp)
 8025348:	100890ba 	slli	r4,r2,2
 802534c:	008201b4 	movhi	r2,2054
 8025350:	2085883a 	add	r2,r4,r2
 8025354:	10bada17 	ldw	r2,-5272(r2)
 8025358:	18c00054 	ori	r3,r3,1
 802535c:	10c02a15 	stw	r3,168(r2)

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
 8025360:	e0bfff17 	ldw	r2,-4(fp)
 8025364:	100690ba 	slli	r3,r2,2
 8025368:	008201b4 	movhi	r2,2054
 802536c:	1885883a 	add	r2,r3,r2
 8025370:	10bada17 	ldw	r2,-5272(r2)
 8025374:	10802717 	ldw	r2,156(r2)
 8025378:	00c00044 	movi	r3,1
 802537c:	10c00615 	stw	r3,24(r2)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
 8025380:	e0bfff17 	ldw	r2,-4(fp)
 8025384:	100690ba 	slli	r3,r2,2
 8025388:	008201b4 	movhi	r2,2054
 802538c:	1885883a 	add	r2,r3,r2
 8025390:	10bada17 	ldw	r2,-5272(r2)
 8025394:	10800103 	ldbu	r2,4(r2)
 8025398:	10803fcc 	andi	r2,r2,255
 802539c:	1080201c 	xori	r2,r2,128
 80253a0:	10bfe004 	addi	r2,r2,-128
 80253a4:	1000361e 	bne	r2,zero,8025480 <Netinit+0x38c>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
 80253a8:	e0bfff17 	ldw	r2,-4(fp)
 80253ac:	100690ba 	slli	r3,r2,2
 80253b0:	008201b4 	movhi	r2,2054
 80253b4:	1885883a 	add	r2,r3,r2
 80253b8:	10bada17 	ldw	r2,-5272(r2)
 80253bc:	10802717 	ldw	r2,156(r2)
 80253c0:	10800217 	ldw	r2,8(r2)
 80253c4:	10800198 	cmpnei	r2,r2,6
 80253c8:	10000f1e 	bne	r2,zero,8025408 <Netinit+0x314>
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
 80253cc:	e0bfff17 	ldw	r2,-4(fp)
 80253d0:	100690ba 	slli	r3,r2,2
 80253d4:	008201b4 	movhi	r2,2054
 80253d8:	1885883a 	add	r2,r3,r2
 80253dc:	10bada17 	ldw	r2,-5272(r2)
 80253e0:	00c01944 	movi	r3,101
 80253e4:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 't';
 80253e8:	e0bfff17 	ldw	r2,-4(fp)
 80253ec:	100690ba 	slli	r3,r2,2
 80253f0:	008201b4 	movhi	r2,2054
 80253f4:	1885883a 	add	r2,r3,r2
 80253f8:	10bada17 	ldw	r2,-5272(r2)
 80253fc:	00c01d04 	movi	r3,116
 8025400:	10c00145 	stb	r3,5(r2)
 8025404:	00000e06 	br	8025440 <Netinit+0x34c>
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
 8025408:	e0bfff17 	ldw	r2,-4(fp)
 802540c:	100690ba 	slli	r3,r2,2
 8025410:	008201b4 	movhi	r2,2054
 8025414:	1885883a 	add	r2,r3,r2
 8025418:	10bada17 	ldw	r2,-5272(r2)
 802541c:	00c01a44 	movi	r3,105
 8025420:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 'f';
 8025424:	e0bfff17 	ldw	r2,-4(fp)
 8025428:	100690ba 	slli	r3,r2,2
 802542c:	008201b4 	movhi	r2,2054
 8025430:	1885883a 	add	r2,r3,r2
 8025434:	10bada17 	ldw	r2,-5272(r2)
 8025438:	00c01984 	movi	r3,102
 802543c:	10c00145 	stb	r3,5(r2)
            }
            nets[i]->name[2] = (char)(i + '1');
 8025440:	e0bfff17 	ldw	r2,-4(fp)
 8025444:	10800c44 	addi	r2,r2,49
 8025448:	1009883a 	mov	r4,r2
 802544c:	e0bfff17 	ldw	r2,-4(fp)
 8025450:	100690ba 	slli	r3,r2,2
 8025454:	008201b4 	movhi	r2,2054
 8025458:	1885883a 	add	r2,r3,r2
 802545c:	10bada17 	ldw	r2,-5272(r2)
 8025460:	2007883a 	mov	r3,r4
 8025464:	10c00185 	stb	r3,6(r2)
            nets[i]->name[3] = '\0';
 8025468:	e0bfff17 	ldw	r2,-4(fp)
 802546c:	100690ba 	slli	r3,r2,2
 8025470:	008201b4 	movhi	r2,2054
 8025474:	1885883a 	add	r2,r3,r2
 8025478:	10bada17 	ldw	r2,-5272(r2)
 802547c:	100001c5 	stb	zero,7(r2)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
 8025480:	e13fff17 	ldw	r4,-4(fp)
 8025484:	80255c40 	call	80255c4 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
 8025488:	e0bfff17 	ldw	r2,-4(fp)
 802548c:	100690ba 	slli	r3,r2,2
 8025490:	008201b4 	movhi	r2,2054
 8025494:	1885883a 	add	r2,r3,r2
 8025498:	10bada17 	ldw	r2,-5272(r2)
 802549c:	10800a17 	ldw	r2,40(r2)
 80254a0:	10003b26 	beq	r2,zero,8025590 <Netinit+0x49c>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 80254a4:	e0bfff17 	ldw	r2,-4(fp)
 80254a8:	100690ba 	slli	r3,r2,2
 80254ac:	008201b4 	movhi	r2,2054
 80254b0:	1885883a 	add	r2,r3,r2
 80254b4:	10bada17 	ldw	r2,-5272(r2)
 80254b8:	11000a17 	ldw	r4,40(r2)
 80254bc:	e0bfff17 	ldw	r2,-4(fp)
 80254c0:	100690ba 	slli	r3,r2,2
 80254c4:	008201b4 	movhi	r2,2054
 80254c8:	1885883a 	add	r2,r3,r2
 80254cc:	10bada17 	ldw	r2,-5272(r2)
 80254d0:	10800c17 	ldw	r2,48(r2)
 80254d4:	0086303a 	nor	r3,zero,r2
 80254d8:	e0bfff17 	ldw	r2,-4(fp)
 80254dc:	100a90ba 	slli	r5,r2,2
 80254e0:	008201b4 	movhi	r2,2054
 80254e4:	2885883a 	add	r2,r5,r2
 80254e8:	10bada17 	ldw	r2,-5272(r2)
 80254ec:	20c6b03a 	or	r3,r4,r3
 80254f0:	10c00e15 	stw	r3,56(r2)
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
 80254f4:	e0bfff17 	ldw	r2,-4(fp)
 80254f8:	100690ba 	slli	r3,r2,2
 80254fc:	008201b4 	movhi	r2,2054
 8025500:	1885883a 	add	r2,r3,r2
 8025504:	10bada17 	ldw	r2,-5272(r2)
 8025508:	11000a17 	ldw	r4,40(r2)
 802550c:	e0bfff17 	ldw	r2,-4(fp)
 8025510:	100690ba 	slli	r3,r2,2
 8025514:	008201b4 	movhi	r2,2054
 8025518:	1885883a 	add	r2,r3,r2
 802551c:	10bada17 	ldw	r2,-5272(r2)
 8025520:	10c00c17 	ldw	r3,48(r2)
 8025524:	e0bfff17 	ldw	r2,-4(fp)
 8025528:	100a90ba 	slli	r5,r2,2
 802552c:	008201b4 	movhi	r2,2054
 8025530:	2885883a 	add	r2,r5,r2
 8025534:	10bada17 	ldw	r2,-5272(r2)
 8025538:	20c6703a 	and	r3,r4,r3
 802553c:	10c00f15 	stw	r3,60(r2)
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 8025540:	e0bfff17 	ldw	r2,-4(fp)
 8025544:	100690ba 	slli	r3,r2,2
 8025548:	008201b4 	movhi	r2,2054
 802554c:	1885883a 	add	r2,r3,r2
 8025550:	10bada17 	ldw	r2,-5272(r2)
 8025554:	11000a17 	ldw	r4,40(r2)
 8025558:	e0bfff17 	ldw	r2,-4(fp)
 802555c:	100690ba 	slli	r3,r2,2
 8025560:	008201b4 	movhi	r2,2054
 8025564:	1885883a 	add	r2,r3,r2
 8025568:	10bada17 	ldw	r2,-5272(r2)
 802556c:	10800c17 	ldw	r2,48(r2)
 8025570:	0086303a 	nor	r3,zero,r2
 8025574:	e0bfff17 	ldw	r2,-4(fp)
 8025578:	100a90ba 	slli	r5,r2,2
 802557c:	008201b4 	movhi	r2,2054
 8025580:	2885883a 	add	r2,r5,r2
 8025584:	10bada17 	ldw	r2,-5272(r2)
 8025588:	20c6b03a 	or	r3,r4,r3
 802558c:	10c01015 	stw	r3,64(r2)
   for (i = 0; i < (int)ifNumber; i++)
 8025590:	e0bfff17 	ldw	r2,-4(fp)
 8025594:	10800044 	addi	r2,r2,1
 8025598:	e0bfff15 	stw	r2,-4(fp)
 802559c:	d0a07f17 	ldw	r2,-32260(gp)
 80255a0:	1007883a 	mov	r3,r2
 80255a4:	e0bfff17 	ldw	r2,-4(fp)
 80255a8:	10ff3716 	blt	r2,r3,8025288 <Netinit+0x194>
#if defined(DYNAMIC_IFACES) && defined(IN_MENUS)
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
 80255ac:	0005883a 	mov	r2,zero
}
 80255b0:	e037883a 	mov	sp,fp
 80255b4:	dfc00117 	ldw	ra,4(sp)
 80255b8:	df000017 	ldw	fp,0(sp)
 80255bc:	dec00204 	addi	sp,sp,8
 80255c0:	f800283a 	ret

080255c4 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 80255c4:	defffc04 	addi	sp,sp,-16
 80255c8:	dfc00315 	stw	ra,12(sp)
 80255cc:	df000215 	stw	fp,8(sp)
 80255d0:	df000204 	addi	fp,sp,8
 80255d4:	e13ffe15 	stw	r4,-8(fp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 80255d8:	e0bffe17 	ldw	r2,-8(fp)
 80255dc:	100690ba 	slli	r3,r2,2
 80255e0:	008201b4 	movhi	r2,2054
 80255e4:	1885883a 	add	r2,r3,r2
 80255e8:	10bada17 	ldw	r2,-5272(r2)
 80255ec:	10800c17 	ldw	r2,48(r2)
 80255f0:	10003a1e 	bne	r2,zero,80256dc <fixup_subnet_mask+0x118>
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
 80255f4:	e0bffe17 	ldw	r2,-8(fp)
 80255f8:	100690ba 	slli	r3,r2,2
 80255fc:	008201b4 	movhi	r2,2054
 8025600:	1885883a 	add	r2,r3,r2
 8025604:	10bada17 	ldw	r2,-5272(r2)
 8025608:	10800a17 	ldw	r2,40(r2)
 802560c:	1080200c 	andi	r2,r2,128
 8025610:	1000031e 	bne	r2,zero,8025620 <fixup_subnet_mask+0x5c>
      smask = 0xFF000000L;
 8025614:	00bfc034 	movhi	r2,65280
 8025618:	e0bfff15 	stw	r2,-4(fp)
 802561c:	00001b06 	br	802568c <fixup_subnet_mask+0xc8>
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 8025620:	e0bffe17 	ldw	r2,-8(fp)
 8025624:	100690ba 	slli	r3,r2,2
 8025628:	008201b4 	movhi	r2,2054
 802562c:	1885883a 	add	r2,r3,r2
 8025630:	10bada17 	ldw	r2,-5272(r2)
 8025634:	10800a17 	ldw	r2,40(r2)
 8025638:	1080300c 	andi	r2,r2,192
 802563c:	10802018 	cmpnei	r2,r2,128
 8025640:	1000031e 	bne	r2,zero,8025650 <fixup_subnet_mask+0x8c>
      smask = 0xFFFF0000L;
 8025644:	00bffff4 	movhi	r2,65535
 8025648:	e0bfff15 	stw	r2,-4(fp)
 802564c:	00000f06 	br	802568c <fixup_subnet_mask+0xc8>
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
 8025650:	e0bffe17 	ldw	r2,-8(fp)
 8025654:	100690ba 	slli	r3,r2,2
 8025658:	008201b4 	movhi	r2,2054
 802565c:	1885883a 	add	r2,r3,r2
 8025660:	10bada17 	ldw	r2,-5272(r2)
 8025664:	10800a17 	ldw	r2,40(r2)
 8025668:	1080380c 	andi	r2,r2,224
 802566c:	10803018 	cmpnei	r2,r2,192
 8025670:	1000031e 	bne	r2,zero,8025680 <fixup_subnet_mask+0xbc>
      smask = 0xFFFFFF00L;
 8025674:	00bfc004 	movi	r2,-256
 8025678:	e0bfff15 	stw	r2,-4(fp)
 802567c:	00000306 	br	802568c <fixup_subnet_mask+0xc8>
   else
   {
      dtrap();    /* bad logic or setup values */
 8025680:	802c3fc0 	call	802c3fc <dtrap>
      smask = 0xFFFFFF00L;
 8025684:	00bfc004 	movi	r2,-256
 8025688:	e0bfff15 	stw	r2,-4(fp)
   }
   nets[netnum]->snmask = htonl(smask);
 802568c:	e0bfff17 	ldw	r2,-4(fp)
 8025690:	1006d63a 	srli	r3,r2,24
 8025694:	e0bfff17 	ldw	r2,-4(fp)
 8025698:	1004d23a 	srli	r2,r2,8
 802569c:	10bfc00c 	andi	r2,r2,65280
 80256a0:	1886b03a 	or	r3,r3,r2
 80256a4:	e0bfff17 	ldw	r2,-4(fp)
 80256a8:	1004923a 	slli	r2,r2,8
 80256ac:	10803fec 	andhi	r2,r2,255
 80256b0:	1888b03a 	or	r4,r3,r2
 80256b4:	e0bfff17 	ldw	r2,-4(fp)
 80256b8:	1006963a 	slli	r3,r2,24
 80256bc:	e0bffe17 	ldw	r2,-8(fp)
 80256c0:	100a90ba 	slli	r5,r2,2
 80256c4:	008201b4 	movhi	r2,2054
 80256c8:	2885883a 	add	r2,r5,r2
 80256cc:	10bada17 	ldw	r2,-5272(r2)
 80256d0:	20c6b03a 	or	r3,r4,r3
 80256d4:	10c00c15 	stw	r3,48(r2)
 80256d8:	00000106 	br	80256e0 <fixup_subnet_mask+0x11c>
      return;
 80256dc:	0001883a 	nop
}
 80256e0:	e037883a 	mov	sp,fp
 80256e4:	dfc00117 	ldw	ra,4(sp)
 80256e8:	df000017 	ldw	fp,0(sp)
 80256ec:	dec00204 	addi	sp,sp,8
 80256f0:	f800283a 	ret

080256f4 <netclose>:
 * RETURNS: 
 */

void
netclose()
{
 80256f4:	defffc04 	addi	sp,sp,-16
 80256f8:	dfc00315 	stw	ra,12(sp)
 80256fc:	df000215 	stw	fp,8(sp)
 8025700:	df000204 	addi	fp,sp,8
   NET ifp;
   int index = 0;
 8025704:	e03ffe15 	stw	zero,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 8025708:	d0a07e17 	ldw	r2,-32264(gp)
 802570c:	1080010c 	andi	r2,r2,4
 8025710:	10000326 	beq	r2,zero,8025720 <netclose+0x2c>
 8025714:	01020174 	movhi	r4,2053
 8025718:	21084704 	addi	r4,r4,8476
 802571c:	80033800 	call	8003380 <puts>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 8025720:	008201b4 	movhi	r2,2054
 8025724:	10bd1b17 	ldw	r2,-2964(r2)
 8025728:	e0bfff15 	stw	r2,-4(fp)
 802572c:	00002106 	br	80257b4 <netclose+0xc0>
   {
      if (ifp->n_close)
 8025730:	e0bfff17 	ldw	r2,-4(fp)
 8025734:	10800517 	ldw	r2,20(r2)
 8025738:	10000f26 	beq	r2,zero,8025778 <netclose+0x84>
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
 802573c:	e0bfff17 	ldw	r2,-4(fp)
 8025740:	10802717 	ldw	r2,156(r2)
 8025744:	10800117 	ldw	r2,4(r2)
 8025748:	100b883a 	mov	r5,r2
 802574c:	01020174 	movhi	r4,2053
 8025750:	21084c04 	addi	r4,r4,8496
 8025754:	800325c0 	call	800325c <printf>
         (*(ifp->n_close))(index++);
 8025758:	e0bfff17 	ldw	r2,-4(fp)
 802575c:	10c00517 	ldw	r3,20(r2)
 8025760:	e0bffe17 	ldw	r2,-8(fp)
 8025764:	11000044 	addi	r4,r2,1
 8025768:	e13ffe15 	stw	r4,-8(fp)
 802576c:	1009883a 	mov	r4,r2
 8025770:	183ee83a 	callr	r3
 8025774:	00000c06 	br	80257a8 <netclose+0xb4>
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
 8025778:	d0a07e17 	ldw	r2,-32264(gp)
 802577c:	1080010c 	andi	r2,r2,4
 8025780:	10000626 	beq	r2,zero,802579c <netclose+0xa8>
 8025784:	e0bfff17 	ldw	r2,-4(fp)
 8025788:	10800104 	addi	r2,r2,4
 802578c:	100b883a 	mov	r5,r2
 8025790:	01020174 	movhi	r4,2053
 8025794:	21085304 	addi	r4,r4,8524
 8025798:	800325c0 	call	800325c <printf>
#endif
         index++;
 802579c:	e0bffe17 	ldw	r2,-8(fp)
 80257a0:	10800044 	addi	r2,r2,1
 80257a4:	e0bffe15 	stw	r2,-8(fp)
   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 80257a8:	e0bfff17 	ldw	r2,-4(fp)
 80257ac:	10800017 	ldw	r2,0(r2)
 80257b0:	e0bfff15 	stw	r2,-4(fp)
 80257b4:	e0bfff17 	ldw	r2,-4(fp)
 80257b8:	103fdd1e 	bne	r2,zero,8025730 <netclose+0x3c>
      }
   }
}
 80257bc:	0001883a 	nop
 80257c0:	0001883a 	nop
 80257c4:	e037883a 	mov	sp,fp
 80257c8:	dfc00117 	ldw	ra,4(sp)
 80257cc:	df000017 	ldw	fp,0(sp)
 80257d0:	dec00204 	addi	sp,sp,8
 80257d4:	f800283a 	ret

080257d8 <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
 80257d8:	defff904 	addi	sp,sp,-28
 80257dc:	dfc00615 	stw	ra,24(sp)
 80257e0:	df000515 	stw	fp,20(sp)
 80257e4:	df000504 	addi	fp,sp,20
   NET      ifc;                /* interface packet came from */
   IFMIB    mib;
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */
 80257e8:	e03fff15 	stw	zero,-4(fp)

   while (rcvdq.q_len)
 80257ec:	0000d906 	br	8025b54 <pktdemux+0x37c>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
 80257f0:	e0bfff17 	ldw	r2,-4(fp)
 80257f4:	10c00044 	addi	r3,r2,1
 80257f8:	e0ffff15 	stw	r3,-4(fp)
 80257fc:	00c201b4 	movhi	r3,2054
 8025800:	18fb8317 	ldw	r3,-4596(r3)
 8025804:	1880020e 	bge	r3,r2,8025810 <pktdemux+0x38>
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
 8025808:	8028b500 	call	8028b50 <tk_yield>
         pkts = 0;   /* reset counter */
 802580c:	e03fff15 	stw	zero,-4(fp)
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
 8025810:	01000044 	movi	r4,1
 8025814:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
 8025818:	010201b4 	movhi	r4,2054
 802581c:	213a1504 	addi	r4,r4,-6060
 8025820:	802bd280 	call	802bd28 <getq>
 8025824:	e0bffe15 	stw	r2,-8(fp)
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 8025828:	01000044 	movi	r4,1
 802582c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
 8025830:	e0bffe17 	ldw	r2,-8(fp)
 8025834:	1000031e 	bne	r2,zero,8025844 <pktdemux+0x6c>
 8025838:	01020174 	movhi	r4,2053
 802583c:	21085a04 	addi	r4,r4,8552
 8025840:	8027fe00 	call	8027fe0 <panic>
      ifc = pkt->net;
 8025844:	e0bffe17 	ldw	r2,-8(fp)
 8025848:	10800617 	ldw	r2,24(r2)
 802584c:	e0bffd15 	stw	r2,-12(fp)

      mib = ifc->n_mib;
 8025850:	e0bffd17 	ldw	r2,-12(fp)
 8025854:	10802717 	ldw	r2,156(r2)
 8025858:	e0bffc15 	stw	r2,-16(fp)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
 802585c:	e0bffe17 	ldw	r2,-8(fp)
 8025860:	10800117 	ldw	r2,4(r2)
 8025864:	10800084 	addi	r2,r2,2
 8025868:	100b883a 	mov	r5,r2
 802586c:	e13ffd17 	ldw	r4,-12(fp)
 8025870:	803de200 	call	803de20 <isbcast>
 8025874:	10000626 	beq	r2,zero,8025890 <pktdemux+0xb8>
         mib->ifInNUcastPkts++;
 8025878:	e0bffc17 	ldw	r2,-16(fp)
 802587c:	10800b17 	ldw	r2,44(r2)
 8025880:	10c00044 	addi	r3,r2,1
 8025884:	e0bffc17 	ldw	r2,-16(fp)
 8025888:	10c00b15 	stw	r3,44(r2)
 802588c:	00000506 	br	80258a4 <pktdemux+0xcc>
      else
         mib->ifInUcastPkts++;
 8025890:	e0bffc17 	ldw	r2,-16(fp)
 8025894:	10800a17 	ldw	r2,40(r2)
 8025898:	10c00044 	addi	r3,r2,1
 802589c:	e0bffc17 	ldw	r2,-16(fp)
 80258a0:	10c00a15 	stw	r3,40(r2)

      if(mib->ifAdminStatus == NI_DOWN)
 80258a4:	e0bffc17 	ldw	r2,-16(fp)
 80258a8:	10800617 	ldw	r2,24(r2)
 80258ac:	10800098 	cmpnei	r2,r2,2
 80258b0:	10000c1e 	bne	r2,zero,80258e4 <pktdemux+0x10c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 80258b4:	01000084 	movi	r4,2
 80258b8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
 80258bc:	e13ffe17 	ldw	r4,-8(fp)
 80258c0:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80258c4:	01000084 	movi	r4,2
 80258c8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
 80258cc:	e0bffc17 	ldw	r2,-16(fp)
 80258d0:	10800c17 	ldw	r2,48(r2)
 80258d4:	10c00044 	addi	r3,r2,1
 80258d8:	e0bffc17 	ldw	r2,-16(fp)
 80258dc:	10c00c15 	stw	r3,48(r2)
         continue;      /* next packet */
 80258e0:	00009c06 	br	8025b54 <pktdemux+0x37c>
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 80258e4:	e0bffe17 	ldw	r2,-8(fp)
 80258e8:	10800117 	ldw	r2,4(r2)
 80258ec:	10bfff04 	addi	r2,r2,-4
 80258f0:	10800003 	ldbu	r2,0(r2)
 80258f4:	10803fcc 	andi	r2,r2,255
 80258f8:	1080201c 	xori	r2,r2,128
 80258fc:	10bfe004 	addi	r2,r2,-128
 8025900:	10801358 	cmpnei	r2,r2,77
 8025904:	10000b1e 	bne	r2,zero,8025934 <pktdemux+0x15c>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
 8025908:	e0bffe17 	ldw	r2,-8(fp)
 802590c:	10c00117 	ldw	r3,4(r2)
 8025910:	e0bffe17 	ldw	r2,-8(fp)
 8025914:	10800217 	ldw	r2,8(r2)
 8025918:	1885883a 	add	r2,r3,r2
 802591c:	10800003 	ldbu	r2,0(r2)
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 8025920:	10803fcc 	andi	r2,r2,255
 8025924:	1080201c 	xori	r2,r2,128
 8025928:	10bfe004 	addi	r2,r2,-128
 802592c:	10801360 	cmpeqi	r2,r2,77
 8025930:	1000041e 	bne	r2,zero,8025944 <pktdemux+0x16c>
      {
         dtrap();
 8025934:	802c3fc0 	call	802c3fc <dtrap>
         panic("pktdemux: corrupt pkt");
 8025938:	01020174 	movhi	r4,2053
 802593c:	21086004 	addi	r4,r4,8576
 8025940:	8027fe00 	call	8027fe0 <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
 8025944:	e0bffd17 	ldw	r2,-12(fp)
 8025948:	10802a17 	ldw	r2,168(r2)
 802594c:	1080020c 	andi	r2,r2,8
 8025950:	1000491e 	bne	r2,zero,8025a78 <pktdemux+0x2a0>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
 8025954:	e0bffd17 	ldw	r2,-12(fp)
 8025958:	10802717 	ldw	r2,156(r2)
 802595c:	10800217 	ldw	r2,8(r2)
 8025960:	10800198 	cmpnei	r2,r2,6
 8025964:	1000361e 	bne	r2,zero,8025a40 <pktdemux+0x268>
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
 8025968:	e0bffe17 	ldw	r2,-8(fp)
 802596c:	10800117 	ldw	r2,4(r2)
 8025970:	10800084 	addi	r2,r2,2
 8025974:	e0bffb15 	stw	r2,-20(fp)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 8025978:	e0bffb17 	ldw	r2,-20(fp)
 802597c:	10800304 	addi	r2,r2,12
 8025980:	10800003 	ldbu	r2,0(r2)
 8025984:	10803fcc 	andi	r2,r2,255
 8025988:	1080201c 	xori	r2,r2,128
 802598c:	10bfe004 	addi	r2,r2,-128
 8025990:	1004923a 	slli	r2,r2,8
 8025994:	1007883a 	mov	r3,r2
 8025998:	e0bffb17 	ldw	r2,-20(fp)
 802599c:	10800344 	addi	r2,r2,13
 80259a0:	10800003 	ldbu	r2,0(r2)
 80259a4:	10803fcc 	andi	r2,r2,255
 80259a8:	1080201c 	xori	r2,r2,128
 80259ac:	10bfe004 	addi	r2,r2,-128
 80259b0:	10803fcc 	andi	r2,r2,255
 80259b4:	1885883a 	add	r2,r3,r2
 80259b8:	10bfffcc 	andi	r2,r2,65535
 80259bc:	1004d23a 	srli	r2,r2,8
 80259c0:	1007883a 	mov	r3,r2
 80259c4:	e0bffb17 	ldw	r2,-20(fp)
 80259c8:	10800304 	addi	r2,r2,12
 80259cc:	10800003 	ldbu	r2,0(r2)
 80259d0:	10803fcc 	andi	r2,r2,255
 80259d4:	1080201c 	xori	r2,r2,128
 80259d8:	10bfe004 	addi	r2,r2,-128
 80259dc:	1004923a 	slli	r2,r2,8
 80259e0:	1009883a 	mov	r4,r2
 80259e4:	e0bffb17 	ldw	r2,-20(fp)
 80259e8:	10800344 	addi	r2,r2,13
 80259ec:	10800003 	ldbu	r2,0(r2)
 80259f0:	10803fcc 	andi	r2,r2,255
 80259f4:	1080201c 	xori	r2,r2,128
 80259f8:	10bfe004 	addi	r2,r2,-128
 80259fc:	10803fcc 	andi	r2,r2,255
 8025a00:	2085883a 	add	r2,r4,r2
 8025a04:	10bfffcc 	andi	r2,r2,65535
 8025a08:	1004923a 	slli	r2,r2,8
 8025a0c:	1884b03a 	or	r2,r3,r2
 8025a10:	1007883a 	mov	r3,r2
 8025a14:	e0bffe17 	ldw	r2,-8(fp)
 8025a18:	10c0080d 	sth	r3,32(r2)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 8025a1c:	e0bffe17 	ldw	r2,-8(fp)
 8025a20:	10800117 	ldw	r2,4(r2)
 8025a24:	e0fffe17 	ldw	r3,-8(fp)
 8025a28:	18c00617 	ldw	r3,24(r3)
 8025a2c:	18c00817 	ldw	r3,32(r3)
 8025a30:	10c7883a 	add	r3,r2,r3
 8025a34:	e0bffe17 	ldw	r2,-8(fp)
 8025a38:	10c00315 	stw	r3,12(r2)
#endif   /* IEEE_802_3 */
            break;
 8025a3c:	00000f06 	br	8025a7c <pktdemux+0x2a4>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
 8025a40:	e0bffd17 	ldw	r2,-12(fp)
 8025a44:	10802717 	ldw	r2,156(r2)
 8025a48:	10800217 	ldw	r2,8(r2)
 8025a4c:	100b883a 	mov	r5,r2
 8025a50:	01020174 	movhi	r4,2053
 8025a54:	21086604 	addi	r4,r4,8600
 8025a58:	800325c0 	call	800325c <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 8025a5c:	01000084 	movi	r4,2
 8025a60:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(pkt);
 8025a64:	e13ffe17 	ldw	r4,-8(fp)
 8025a68:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8025a6c:	01000084 	movi	r4,2
 8025a70:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            continue;
 8025a74:	00003706 	br	8025b54 <pktdemux+0x37c>
         }
      }
 8025a78:	0001883a 	nop

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
 8025a7c:	e0bffe17 	ldw	r2,-8(fp)
 8025a80:	1080080b 	ldhu	r2,32(r2)
 8025a84:	10bfffcc 	andi	r2,r2,65535
 8025a88:	10c00220 	cmpeqi	r3,r2,8
 8025a8c:	1800031e 	bne	r3,zero,8025a9c <pktdemux+0x2c4>
 8025a90:	10818220 	cmpeqi	r2,r2,1544
 8025a94:	1000081e 	bne	r2,zero,8025ab8 <pktdemux+0x2e0>
 8025a98:	00000e06 	br	8025ad4 <pktdemux+0x2fc>
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
 8025a9c:	0009883a 	mov	r4,zero
 8025aa0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
 8025aa4:	e13ffe17 	ldw	r4,-8(fp)
 8025aa8:	8041af40 	call	8041af4 <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
 8025aac:	0009883a 	mov	r4,zero
 8025ab0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         break;
 8025ab4:	00002606 	br	8025b50 <pktdemux+0x378>
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
 8025ab8:	0009883a 	mov	r4,zero
 8025abc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         arprcv(pkt);
 8025ac0:	e13ffe17 	ldw	r4,-8(fp)
 8025ac4:	803d6100 	call	803d610 <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
 8025ac8:	0009883a 	mov	r4,zero
 8025acc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         break;
 8025ad0:	00001f06 	br	8025b50 <pktdemux+0x378>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
 8025ad4:	d0a07e17 	ldw	r2,-32264(gp)
 8025ad8:	1081000c 	andi	r2,r2,1024
 8025adc:	10001026 	beq	r2,zero,8025b20 <pktdemux+0x348>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
 8025ae0:	e0bffe17 	ldw	r2,-8(fp)
 8025ae4:	1080080b 	ldhu	r2,32(r2)
 8025ae8:	10bfffcc 	andi	r2,r2,65535
 8025aec:	1004d23a 	srli	r2,r2,8
 8025af0:	10bfffcc 	andi	r2,r2,65535
 8025af4:	10c03fcc 	andi	r3,r2,255
 8025af8:	e0bffe17 	ldw	r2,-8(fp)
 8025afc:	1080080b 	ldhu	r2,32(r2)
 8025b00:	10bfffcc 	andi	r2,r2,65535
 8025b04:	1004923a 	slli	r2,r2,8
 8025b08:	10bfffcc 	andi	r2,r2,65535
 8025b0c:	1884b03a 	or	r2,r3,r2
 8025b10:	100b883a 	mov	r5,r2
 8025b14:	01020174 	movhi	r4,2053
 8025b18:	21086e04 	addi	r4,r4,8632
 8025b1c:	800325c0 	call	800325c <printf>
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
 8025b20:	e0bffd17 	ldw	r2,-12(fp)
 8025b24:	10802717 	ldw	r2,156(r2)
 8025b28:	10c00e17 	ldw	r3,56(r2)
 8025b2c:	18c00044 	addi	r3,r3,1
 8025b30:	10c00e15 	stw	r3,56(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8025b34:	01000084 	movi	r4,2
 8025b38:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
 8025b3c:	e13ffe17 	ldw	r4,-8(fp)
 8025b40:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8025b44:	01000084 	movi	r4,2
 8025b48:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         break;
 8025b4c:	0001883a 	nop
      }
      continue;
 8025b50:	0001883a 	nop
   while (rcvdq.q_len)
 8025b54:	008201b4 	movhi	r2,2054
 8025b58:	10ba1717 	ldw	r2,-6052(r2)
 8025b5c:	103f241e 	bne	r2,zero,80257f0 <pktdemux+0x18>
   }
}
 8025b60:	0001883a 	nop
 8025b64:	0001883a 	nop
 8025b68:	e037883a 	mov	sp,fp
 8025b6c:	dfc00117 	ldw	ra,4(sp)
 8025b70:	df000017 	ldw	fp,0(sp)
 8025b74:	dec00204 	addi	sp,sp,8
 8025b78:	f800283a 	ret

08025b7c <c_older>:
 * RETURNS: the older of the two passed tick counts
 */

u_long
c_older(u_long ct1, u_long ct2)
{
 8025b7c:	defffd04 	addi	sp,sp,-12
 8025b80:	df000215 	stw	fp,8(sp)
 8025b84:	df000204 	addi	fp,sp,8
 8025b88:	e13fff15 	stw	r4,-4(fp)
 8025b8c:	e17ffe15 	stw	r5,-8(fp)

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 8025b90:	d0a0a317 	ldw	r2,-32116(gp)
 8025b94:	10000c0e 	bge	r2,zero,8025bc8 <c_older+0x4c>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8025b98:	d0e0a317 	ldw	r3,-32116(gp)
   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 8025b9c:	e0bfff17 	ldw	r2,-4(fp)
 8025ba0:	18800336 	bltu	r3,r2,8025bb0 <c_older+0x34>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8025ba4:	d0e0a317 	ldw	r3,-32116(gp)
 8025ba8:	e0bffe17 	ldw	r2,-8(fp)
 8025bac:	1880062e 	bgeu	r3,r2,8025bc8 <c_older+0x4c>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
 8025bb0:	d0a0a317 	ldw	r2,-32116(gp)
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
 8025bb4:	e0ffff17 	ldw	r3,-4(fp)
 8025bb8:	18800a36 	bltu	r3,r2,8025be4 <c_older+0x68>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
 8025bbc:	d0a0a317 	ldw	r2,-32116(gp)
 8025bc0:	e0fffe17 	ldw	r3,-8(fp)
 8025bc4:	18800736 	bltu	r3,r2,8025be4 <c_older+0x68>
   {
      if (ct1 < ct2)
 8025bc8:	e0ffff17 	ldw	r3,-4(fp)
 8025bcc:	e0bffe17 	ldw	r2,-8(fp)
 8025bd0:	1880022e 	bgeu	r3,r2,8025bdc <c_older+0x60>
         return(ct1);      /* then smaller is oldest */
 8025bd4:	e0bfff17 	ldw	r2,-4(fp)
 8025bd8:	00000806 	br	8025bfc <c_older+0x80>
      else 
         return(ct2);
 8025bdc:	e0bffe17 	ldw	r2,-8(fp)
 8025be0:	00000606 	br	8025bfc <c_older+0x80>
   }

   /* else one is less than cticks, and one is greater.
   the larger value is then the oldest */
   if (ct1 >= ct2)
 8025be4:	e0ffff17 	ldw	r3,-4(fp)
 8025be8:	e0bffe17 	ldw	r2,-8(fp)
 8025bec:	18800236 	bltu	r3,r2,8025bf8 <c_older+0x7c>
      return(ct1);
 8025bf0:	e0bfff17 	ldw	r2,-4(fp)
 8025bf4:	00000106 	br	8025bfc <c_older+0x80>
   else
      return(ct2);
 8025bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 8025bfc:	e037883a 	mov	sp,fp
 8025c00:	df000017 	ldw	fp,0(sp)
 8025c04:	dec00104 	addi	sp,sp,4
 8025c08:	f800283a 	ret

08025c0c <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 8025c0c:	defffb04 	addi	sp,sp,-20
 8025c10:	dfc00415 	stw	ra,16(sp)
 8025c14:	df000315 	stw	fp,12(sp)
 8025c18:	df000304 	addi	fp,sp,12
 8025c1c:	e13ffe15 	stw	r4,-8(fp)
 8025c20:	e17ffd15 	stw	r5,-12(fp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
 8025c24:	e0bffe17 	ldw	r2,-8(fp)
 8025c28:	10800617 	ldw	r2,24(r2)
 8025c2c:	10802717 	ldw	r2,156(r2)
 8025c30:	e0bfff15 	stw	r2,-4(fp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
 8025c34:	e0bfff17 	ldw	r2,-4(fp)
 8025c38:	10800617 	ldw	r2,24(r2)
 8025c3c:	10800098 	cmpnei	r2,r2,2
 8025c40:	1000081e 	bne	r2,zero,8025c64 <ip2mac+0x58>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8025c44:	01000084 	movi	r4,2
 8025c48:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 8025c4c:	e13ffe17 	ldw	r4,-8(fp)
 8025c50:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8025c54:	01000084 	movi	r4,2
 8025c58:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return(ENP_NO_ROUTE);
 8025c5c:	00bff7c4 	movi	r2,-33
 8025c60:	00004806 	br	8025d84 <ip2mac+0x178>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 8025c64:	e0bffe17 	ldw	r2,-8(fp)
 8025c68:	10800617 	ldw	r2,24(r2)
 8025c6c:	10800817 	ldw	r2,32(r2)
 8025c70:	10000826 	beq	r2,zero,8025c94 <ip2mac+0x88>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
 8025c74:	e0bfff17 	ldw	r2,-4(fp)
 8025c78:	10800217 	ldw	r2,8(r2)
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 8025c7c:	108005e0 	cmpeqi	r2,r2,23
 8025c80:	1000041e 	bne	r2,zero,8025c94 <ip2mac+0x88>
       (ifmib->ifType == SLIP))
 8025c84:	e0bfff17 	ldw	r2,-4(fp)
 8025c88:	10800217 	ldw	r2,8(r2)
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
 8025c8c:	10800718 	cmpnei	r2,r2,28
 8025c90:	1000291e 	bne	r2,zero,8025d38 <ip2mac+0x12c>
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 8025c94:	e0bfff17 	ldw	r2,-4(fp)
 8025c98:	10801017 	ldw	r2,64(r2)
 8025c9c:	10c00044 	addi	r3,r2,1
 8025ca0:	e0bfff17 	ldw	r2,-4(fp)
 8025ca4:	10c01015 	stw	r3,64(r2)
      ifmib->ifOutOctets += pkt->nb_plen;
 8025ca8:	e0bfff17 	ldw	r2,-4(fp)
 8025cac:	10c00f17 	ldw	r3,60(r2)
 8025cb0:	e0bffe17 	ldw	r2,-8(fp)
 8025cb4:	10800417 	ldw	r2,16(r2)
 8025cb8:	1887883a 	add	r3,r3,r2
 8025cbc:	e0bfff17 	ldw	r2,-4(fp)
 8025cc0:	10c00f15 	stw	r3,60(r2)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
 8025cc4:	e0bffe17 	ldw	r2,-8(fp)
 8025cc8:	10800617 	ldw	r2,24(r2)
 8025ccc:	10800417 	ldw	r2,16(r2)
 8025cd0:	10000626 	beq	r2,zero,8025cec <ip2mac+0xe0>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
 8025cd4:	e0bffe17 	ldw	r2,-8(fp)
 8025cd8:	10800617 	ldw	r2,24(r2)
 8025cdc:	10800417 	ldw	r2,16(r2)
 8025ce0:	e13ffe17 	ldw	r4,-8(fp)
 8025ce4:	103ee83a 	callr	r2
 8025ce8:	00001106 	br	8025d30 <ip2mac+0x124>
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 8025cec:	e0bffe17 	ldw	r2,-8(fp)
 8025cf0:	10800617 	ldw	r2,24(r2)
 8025cf4:	10800317 	ldw	r2,12(r2)
 8025cf8:	e0fffe17 	ldw	r3,-8(fp)
 8025cfc:	19000617 	ldw	r4,24(r3)
 8025d00:	e0fffe17 	ldw	r3,-8(fp)
 8025d04:	19400317 	ldw	r5,12(r3)
 8025d08:	e0fffe17 	ldw	r3,-8(fp)
 8025d0c:	18c00417 	ldw	r3,16(r3)
 8025d10:	180d883a 	mov	r6,r3
 8025d14:	103ee83a 	callr	r2
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8025d18:	01000084 	movi	r4,2
 8025d1c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 8025d20:	e13ffe17 	ldw	r4,-8(fp)
 8025d24:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8025d28:	01000084 	movi	r4,2
 8025d2c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      }
      return(SUCCESS);
 8025d30:	0005883a 	mov	r2,zero
 8025d34:	00001306 	br	8025d84 <ip2mac+0x178>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
 8025d38:	e0bffe17 	ldw	r2,-8(fp)
 8025d3c:	10800617 	ldw	r2,24(r2)
 8025d40:	10800a17 	ldw	r2,40(r2)
 8025d44:	10000c1e 	bne	r2,zero,8025d78 <ip2mac+0x16c>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
 8025d48:	e0bffe17 	ldw	r2,-8(fp)
 8025d4c:	10800717 	ldw	r2,28(r2)
 8025d50:	10bfffe0 	cmpeqi	r2,r2,-1
 8025d54:	1000081e 	bne	r2,zero,8025d78 <ip2mac+0x16c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8025d58:	01000084 	movi	r4,2
 8025d5c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 8025d60:	e13ffe17 	ldw	r4,-8(fp)
 8025d64:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8025d68:	01000084 	movi	r4,2
 8025d6c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return ENP_SENDERR;
 8025d70:	00bff884 	movi	r2,-30
 8025d74:	00000306 	br	8025d84 <ip2mac+0x178>
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
 8025d78:	e17ffd17 	ldw	r5,-12(fp)
 8025d7c:	e13ffe17 	ldw	r4,-8(fp)
 8025d80:	803d8740 	call	803d874 <send_via_arp>
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 8025d84:	e037883a 	mov	sp,fp
 8025d88:	dfc00117 	ldw	ra,4(sp)
 8025d8c:	df000017 	ldw	fp,0(sp)
 8025d90:	dec00204 	addi	sp,sp,8
 8025d94:	f800283a 	ret

08025d98 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
 8025d98:	defffc04 	addi	sp,sp,-16
 8025d9c:	dfc00315 	stw	ra,12(sp)
 8025da0:	df000215 	stw	fp,8(sp)
 8025da4:	df000204 	addi	fp,sp,8
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
 8025da8:	e03fff15 	stw	zero,-4(fp)
 8025dac:	00002206 	br	8025e38 <ip_startup+0xa0>
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
 8025db0:	e0bfff17 	ldw	r2,-4(fp)
 8025db4:	10c03024 	muli	r3,r2,192
 8025db8:	008201b4 	movhi	r2,2054
 8025dbc:	10ba1a04 	addi	r2,r2,-6040
 8025dc0:	1887883a 	add	r3,r3,r2
 8025dc4:	e0bfff17 	ldw	r2,-4(fp)
 8025dc8:	100890ba 	slli	r4,r2,2
 8025dcc:	008201b4 	movhi	r2,2054
 8025dd0:	2085883a 	add	r2,r4,r2
 8025dd4:	10fada15 	stw	r3,-5272(r2)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
 8025dd8:	e0bfff17 	ldw	r2,-4(fp)
 8025ddc:	100690ba 	slli	r3,r2,2
 8025de0:	008201b4 	movhi	r2,2054
 8025de4:	1885883a 	add	r2,r3,r2
 8025de8:	10fada17 	ldw	r3,-5272(r2)
 8025dec:	e0bfff17 	ldw	r2,-4(fp)
 8025df0:	100890ba 	slli	r4,r2,2
 8025df4:	008201b4 	movhi	r2,2054
 8025df8:	2085883a 	add	r2,r4,r2
 8025dfc:	10bada17 	ldw	r2,-5272(r2)
 8025e00:	18c01204 	addi	r3,r3,72
 8025e04:	10c02715 	stw	r3,156(r2)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
 8025e08:	e0bfff17 	ldw	r2,-4(fp)
 8025e0c:	100690ba 	slli	r3,r2,2
 8025e10:	008201b4 	movhi	r2,2054
 8025e14:	1885883a 	add	r2,r3,r2
 8025e18:	10bada17 	ldw	r2,-5272(r2)
 8025e1c:	100b883a 	mov	r5,r2
 8025e20:	010201b4 	movhi	r4,2054
 8025e24:	213d1b04 	addi	r4,r4,-2964
 8025e28:	802bde00 	call	802bde0 <putq>
   for (i = 0; i < STATIC_NETS; i++)
 8025e2c:	e0bfff17 	ldw	r2,-4(fp)
 8025e30:	10800044 	addi	r2,r2,1
 8025e34:	e0bfff15 	stw	r2,-4(fp)
 8025e38:	e0bfff17 	ldw	r2,-4(fp)
 8025e3c:	10800110 	cmplti	r2,r2,4
 8025e40:	103fdb1e 	bne	r2,zero,8025db0 <ip_startup+0x18>
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
 8025e44:	d0a07f17 	ldw	r2,-32260(gp)
 8025e48:	1009883a 	mov	r4,r2
 8025e4c:	8042a500 	call	8042a50 <prep_ifaces>
 8025e50:	d0a07f15 	stw	r2,-32260(gp)

   if (ifNumber < 1)    /* no static interfaces? */
 8025e54:	d0a07f17 	ldw	r2,-32260(gp)
 8025e58:	1000031e 	bne	r2,zero,8025e68 <ip_startup+0xd0>
#ifdef DYNAMIC_IFACES
      /* print a debug message and hope user knows what he's doing */
      dprintf("unable to find any working interfaces");
#else /* static ifaces only */
      /* no static and no dynamic interfaces is probably a bug... */
      return("unable to find any working interfaces");
 8025e5c:	00820174 	movhi	r2,2053
 8025e60:	10887f04 	addi	r2,r2,8700
 8025e64:	00006006 	br	8025fe8 <ip_startup+0x250>
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 8025e68:	d0a07f17 	ldw	r2,-32260(gp)
 8025e6c:	e0bfff15 	stw	r2,-4(fp)
 8025e70:	00001106 	br	8025eb8 <ip_startup+0x120>
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
 8025e74:	e0bfff17 	ldw	r2,-4(fp)
 8025e78:	100690ba 	slli	r3,r2,2
 8025e7c:	008201b4 	movhi	r2,2054
 8025e80:	1885883a 	add	r2,r3,r2
 8025e84:	10bada17 	ldw	r2,-5272(r2)
 8025e88:	100b883a 	mov	r5,r2
 8025e8c:	010201b4 	movhi	r4,2054
 8025e90:	213d1b04 	addi	r4,r4,-2964
 8025e94:	802be900 	call	802be90 <qdel>
      nets[i] = NULL;               /* remove from array */
 8025e98:	e0bfff17 	ldw	r2,-4(fp)
 8025e9c:	100690ba 	slli	r3,r2,2
 8025ea0:	008201b4 	movhi	r2,2054
 8025ea4:	1885883a 	add	r2,r3,r2
 8025ea8:	103ada15 	stw	zero,-5272(r2)
   for (i = ifNumber; i < STATIC_NETS; i++)
 8025eac:	e0bfff17 	ldw	r2,-4(fp)
 8025eb0:	10800044 	addi	r2,r2,1
 8025eb4:	e0bfff15 	stw	r2,-4(fp)
 8025eb8:	e0bfff17 	ldw	r2,-4(fp)
 8025ebc:	10800110 	cmplti	r2,r2,4
 8025ec0:	103fec1e 	bne	r2,zero,8025e74 <ip_startup+0xdc>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
 8025ec4:	802c5080 	call	802c508 <clock_init>
   exit_hook(clock_c);
 8025ec8:	010200f4 	movhi	r4,2051
 8025ecc:	21315004 	addi	r4,r4,-15040
 8025ed0:	8025ffc0 	call	8025ffc <exit_hook>

   e = Netinit();    /* start net interface(s) */
 8025ed4:	80250f40 	call	80250f4 <Netinit>
 8025ed8:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8025edc:	e0bffe17 	ldw	r2,-8(fp)
 8025ee0:	10000326 	beq	r2,zero,8025ef0 <ip_startup+0x158>
   {
      return("unable to initialize net");
 8025ee4:	00820174 	movhi	r2,2053
 8025ee8:	10888904 	addi	r2,r2,8740
 8025eec:	00003e06 	br	8025fe8 <ip_startup+0x250>
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
 8025ef0:	803c9cc0 	call	803c9cc <etainit>
 8025ef4:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8025ef8:	e0bffe17 	ldw	r2,-8(fp)
 8025efc:	10000426 	beq	r2,zero,8025f10 <ip_startup+0x178>
   {
      ip_exit();
 8025f00:	80260640 	call	8026064 <ip_exit>
      return("unable to initialize arp");
 8025f04:	00820174 	movhi	r2,2053
 8025f08:	10889004 	addi	r2,r2,8768
 8025f0c:	00003606 	br	8025fe8 <ip_startup+0x250>
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
 8025f10:	803e0140 	call	803e014 <ip_init>
 8025f14:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8025f18:	e0bffe17 	ldw	r2,-8(fp)
 8025f1c:	10000426 	beq	r2,zero,8025f30 <ip_startup+0x198>
   {
      ip_exit();
 8025f20:	80260640 	call	8026064 <ip_exit>
      return("unable to initialize IP");
 8025f24:	00820174 	movhi	r2,2053
 8025f28:	10889704 	addi	r2,r2,8796
 8025f2c:	00002e06 	br	8025fe8 <ip_startup+0x250>

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
 8025f30:	80261980 	call	8026198 <igmp_init>
 8025f34:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8025f38:	e0bffe17 	ldw	r2,-8(fp)
 8025f3c:	10000326 	beq	r2,zero,8025f4c <ip_startup+0x1b4>
   {
      ip_exit();
 8025f40:	80260640 	call	8026064 <ip_exit>
      return(ipmcfail_str);
 8025f44:	d0a02c17 	ldw	r2,-32592(gp)
 8025f48:	00002706 	br	8025fe8 <ip_startup+0x250>
   }

   for (i = 0; i < (int)ifNumber; i++)
 8025f4c:	e03fff15 	stw	zero,-4(fp)
 8025f50:	00001706 	br	8025fb0 <ip_startup+0x218>
   {
      if (nets[i]->n_mcastlist != NULL)
 8025f54:	e0bfff17 	ldw	r2,-4(fp)
 8025f58:	100690ba 	slli	r3,r2,2
 8025f5c:	008201b4 	movhi	r2,2054
 8025f60:	1885883a 	add	r2,r3,r2
 8025f64:	10bada17 	ldw	r2,-5272(r2)
 8025f68:	10802b17 	ldw	r2,172(r2)
 8025f6c:	10000d26 	beq	r2,zero,8025fa4 <ip_startup+0x20c>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 8025f70:	e0bfff17 	ldw	r2,-4(fp)
 8025f74:	100690ba 	slli	r3,r2,2
 8025f78:	008201b4 	movhi	r2,2054
 8025f7c:	1885883a 	add	r2,r3,r2
 8025f80:	10bada17 	ldw	r2,-5272(r2)
 8025f84:	01800104 	movi	r6,4
 8025f88:	100b883a 	mov	r5,r2
 8025f8c:	d1208304 	addi	r4,gp,-32244
 8025f90:	80427940 	call	8042794 <in_addmulti>
 8025f94:	1000031e 	bne	r2,zero,8025fa4 <ip_startup+0x20c>
      {
         ip_exit();
 8025f98:	80260640 	call	8026064 <ip_exit>
         return(ipmcfail_str);
 8025f9c:	d0a02c17 	ldw	r2,-32592(gp)
 8025fa0:	00001106 	br	8025fe8 <ip_startup+0x250>
   for (i = 0; i < (int)ifNumber; i++)
 8025fa4:	e0bfff17 	ldw	r2,-4(fp)
 8025fa8:	10800044 	addi	r2,r2,1
 8025fac:	e0bfff15 	stw	r2,-4(fp)
 8025fb0:	d0a07f17 	ldw	r2,-32260(gp)
 8025fb4:	1007883a 	mov	r3,r2
 8025fb8:	e0bfff17 	ldw	r2,-4(fp)
 8025fbc:	10ffe516 	blt	r2,r3,8025f54 <ip_startup+0x1bc>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
 8025fc0:	8039bb00 	call	8039bb0 <tcpinit>
 8025fc4:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 8025fc8:	e0bffe17 	ldw	r2,-8(fp)
 8025fcc:	10000426 	beq	r2,zero,8025fe0 <ip_startup+0x248>
   {
      ip_exit();
 8025fd0:	80260640 	call	8026064 <ip_exit>
      return("unable to initialize TCP");
 8025fd4:	00820174 	movhi	r2,2053
 8025fd8:	10889d04 	addi	r2,r2,8820
 8025fdc:	00000206 	br	8025fe8 <ip_startup+0x250>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
 8025fe0:	8042af80 	call	8042af8 <evtmap_setup>
      return("unable to initialize IP Filter table");
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
 8025fe4:	0005883a 	mov	r2,zero
}
 8025fe8:	e037883a 	mov	sp,fp
 8025fec:	dfc00117 	ldw	ra,4(sp)
 8025ff0:	df000017 	ldw	fp,0(sp)
 8025ff4:	dec00204 	addi	sp,sp,8
 8025ff8:	f800283a 	ret

08025ffc <exit_hook>:
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
 8025ffc:	defffd04 	addi	sp,sp,-12
 8026000:	dfc00215 	stw	ra,8(sp)
 8026004:	df000115 	stw	fp,4(sp)
 8026008:	df000104 	addi	fp,sp,4
 802600c:	e13fff15 	stw	r4,-4(fp)
   if (nclosers >= (NUMCLOSERS-1))
 8026010:	d0a08017 	ldw	r2,-32256(gp)
 8026014:	10800390 	cmplti	r2,r2,14
 8026018:	1000031e 	bne	r2,zero,8026028 <exit_hook+0x2c>
      panic("exit_hook");
 802601c:	01020174 	movhi	r4,2053
 8026020:	2108a404 	addi	r4,r4,8848
 8026024:	8027fe00 	call	8027fe0 <panic>

   closers[++nclosers] = func;
 8026028:	d0a08017 	ldw	r2,-32256(gp)
 802602c:	10800044 	addi	r2,r2,1
 8026030:	d0a08015 	stw	r2,-32256(gp)
 8026034:	d0a08017 	ldw	r2,-32256(gp)
 8026038:	100890ba 	slli	r4,r2,2
 802603c:	e0ffff17 	ldw	r3,-4(fp)
 8026040:	00820174 	movhi	r2,2053
 8026044:	2085883a 	add	r2,r4,r2
 8026048:	10daa915 	stw	r3,27300(r2)
}
 802604c:	0001883a 	nop
 8026050:	e037883a 	mov	sp,fp
 8026054:	dfc00117 	ldw	ra,4(sp)
 8026058:	df000017 	ldw	fp,0(sp)
 802605c:	dec00204 	addi	sp,sp,8
 8026060:	f800283a 	ret

08026064 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
 8026064:	defffd04 	addi	sp,sp,-12
 8026068:	dfc00215 	stw	ra,8(sp)
 802606c:	df000115 	stw	fp,4(sp)
 8026070:	df000104 	addi	fp,sp,4
   int   n;

   for (n=nclosers; n; n--)
 8026074:	d0a08017 	ldw	r2,-32256(gp)
 8026078:	e0bfff15 	stw	r2,-4(fp)
 802607c:	00001d06 	br	80260f4 <ip_exit+0x90>
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
 8026080:	e0bfff17 	ldw	r2,-4(fp)
 8026084:	100690ba 	slli	r3,r2,2
 8026088:	00820174 	movhi	r2,2053
 802608c:	1885883a 	add	r2,r3,r2
 8026090:	109aa917 	ldw	r2,27300(r2)
 8026094:	100b883a 	mov	r5,r2
 8026098:	01020174 	movhi	r4,2053
 802609c:	2108a704 	addi	r4,r4,8860
 80260a0:	800325c0 	call	800325c <printf>
#endif
      if(closers[n])
 80260a4:	e0bfff17 	ldw	r2,-4(fp)
 80260a8:	100690ba 	slli	r3,r2,2
 80260ac:	00820174 	movhi	r2,2053
 80260b0:	1885883a 	add	r2,r3,r2
 80260b4:	109aa917 	ldw	r2,27300(r2)
 80260b8:	10000b26 	beq	r2,zero,80260e8 <ip_exit+0x84>
      {
         (*closers[n])();
 80260bc:	e0bfff17 	ldw	r2,-4(fp)
 80260c0:	100690ba 	slli	r3,r2,2
 80260c4:	00820174 	movhi	r2,2053
 80260c8:	1885883a 	add	r2,r3,r2
 80260cc:	109aa917 	ldw	r2,27300(r2)
 80260d0:	103ee83a 	callr	r2
         closers[n] = NULL;
 80260d4:	e0bfff17 	ldw	r2,-4(fp)
 80260d8:	100690ba 	slli	r3,r2,2
 80260dc:	00820174 	movhi	r2,2053
 80260e0:	1885883a 	add	r2,r3,r2
 80260e4:	101aa915 	stw	zero,27300(r2)
   for (n=nclosers; n; n--)
 80260e8:	e0bfff17 	ldw	r2,-4(fp)
 80260ec:	10bfffc4 	addi	r2,r2,-1
 80260f0:	e0bfff15 	stw	r2,-4(fp)
 80260f4:	e0bfff17 	ldw	r2,-4(fp)
 80260f8:	103fe11e 	bne	r2,zero,8026080 <ip_exit+0x1c>
      }
   }
}
 80260fc:	0001883a 	nop
 8026100:	0001883a 	nop
 8026104:	e037883a 	mov	sp,fp
 8026108:	dfc00117 	ldw	ra,4(sp)
 802610c:	df000017 	ldw	fp,0(sp)
 8026110:	dec00204 	addi	sp,sp,8
 8026114:	f800283a 	ret

08026118 <if_netnumber>:
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
 8026118:	defffb04 	addi	sp,sp,-20
 802611c:	dfc00415 	stw	ra,16(sp)
 8026120:	df000315 	stw	fp,12(sp)
 8026124:	df000304 	addi	fp,sp,12
 8026128:	e13ffd15 	stw	r4,-12(fp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 802612c:	008201b4 	movhi	r2,2054
 8026130:	10bd1b17 	ldw	r2,-2964(r2)
 8026134:	e0bffe15 	stw	r2,-8(fp)
 8026138:	e03fff15 	stw	zero,-4(fp)
 802613c:	00000b06 	br	802616c <if_netnumber+0x54>
   {
      if(ifp == nptr)
 8026140:	e0fffe17 	ldw	r3,-8(fp)
 8026144:	e0bffd17 	ldw	r2,-12(fp)
 8026148:	1880021e 	bne	r3,r2,8026154 <if_netnumber+0x3c>
        return (int)i;
 802614c:	e0bfff17 	ldw	r2,-4(fp)
 8026150:	00000c06 	br	8026184 <if_netnumber+0x6c>
   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 8026154:	e0bffe17 	ldw	r2,-8(fp)
 8026158:	10800017 	ldw	r2,0(r2)
 802615c:	e0bffe15 	stw	r2,-8(fp)
 8026160:	e0bfff17 	ldw	r2,-4(fp)
 8026164:	10800044 	addi	r2,r2,1
 8026168:	e0bfff15 	stw	r2,-4(fp)
 802616c:	e0bffe17 	ldw	r2,-8(fp)
 8026170:	103ff31e 	bne	r2,zero,8026140 <if_netnumber+0x28>
   }

   panic("bad net ptr");
 8026174:	01020174 	movhi	r4,2053
 8026178:	2108ae04 	addi	r4,r4,8888
 802617c:	8027fe00 	call	8027fe0 <panic>
   return 0;
 8026180:	0005883a 	mov	r2,zero
}
 8026184:	e037883a 	mov	sp,fp
 8026188:	dfc00117 	ldw	ra,4(sp)
 802618c:	df000017 	ldw	fp,0(sp)
 8026190:	dec00204 	addi	sp,sp,8
 8026194:	f800283a 	ret

08026198 <igmp_init>:
 *
 * OUTPUT: None.
 */

int igmp_init(void)
{
 8026198:	defffe04 	addi	sp,sp,-8
 802619c:	df000115 	stw	fp,4(sp)
 80261a0:	df000104 	addi	fp,sp,4
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
 80261a4:	00804034 	movhi	r2,256
 80261a8:	10803804 	addi	r2,r2,224
 80261ac:	d0a08315 	stw	r2,-32244(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
 80261b0:	00808034 	movhi	r2,512
 80261b4:	10803804 	addi	r2,r2,224
 80261b8:	d0a08415 	stw	r2,-32240(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 80261bc:	008201b4 	movhi	r2,2054
 80261c0:	10bd1b17 	ldw	r2,-2964(r2)
 80261c4:	e0bfff15 	stw	r2,-4(fp)
 80261c8:	00001006 	br	802620c <igmp_init+0x74>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
 80261cc:	e0bfff17 	ldw	r2,-4(fp)
 80261d0:	10802f03 	ldbu	r2,188(r2)
 80261d4:	10803fcc 	andi	r2,r2,255
 80261d8:	10800058 	cmpnei	r2,r2,1
 80261dc:	1000041e 	bne	r2,zero,80261f0 <igmp_init+0x58>
      {
         ifp->igmpv1_rtr_present = 1;
 80261e0:	e0bfff17 	ldw	r2,-4(fp)
 80261e4:	00c00044 	movi	r3,1
 80261e8:	10c02d05 	stb	r3,180(r2)
 80261ec:	00000406 	br	8026200 <igmp_init+0x68>
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
 80261f0:	e0bfff17 	ldw	r2,-4(fp)
 80261f4:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
 80261f8:	e0bfff17 	ldw	r2,-4(fp)
 80261fc:	10002e15 	stw	zero,184(r2)
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 8026200:	e0bfff17 	ldw	r2,-4(fp)
 8026204:	10800017 	ldw	r2,0(r2)
 8026208:	e0bfff15 	stw	r2,-4(fp)
 802620c:	e0bfff17 	ldw	r2,-4(fp)
 8026210:	103fee1e 	bne	r2,zero,80261cc <igmp_init+0x34>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 8026214:	d0a0a317 	ldw	r2,-32116(gp)
 8026218:	10800504 	addi	r2,r2,20
 802621c:	d0a08215 	stw	r2,-32248(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
 8026220:	d0208115 	stw	zero,-32252(gp)

   return IGMP_OK;
 8026224:	0005883a 	mov	r2,zero
}
 8026228:	e037883a 	mov	sp,fp
 802622c:	df000017 	ldw	fp,0(sp)
 8026230:	dec00104 	addi	sp,sp,4
 8026234:	f800283a 	ret

08026238 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 8026238:	defffb04 	addi	sp,sp,-20
 802623c:	dfc00415 	stw	ra,16(sp)
 8026240:	df000315 	stw	fp,12(sp)
 8026244:	df000304 	addi	fp,sp,12
 8026248:	e13ffd15 	stw	r4,-12(fp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
 802624c:	008201b4 	movhi	r2,2054
 8026250:	10bade17 	ldw	r2,-5256(r2)
 8026254:	10c00044 	addi	r3,r2,1
 8026258:	008201b4 	movhi	r2,2054
 802625c:	10fade15 	stw	r3,-5256(r2)
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 8026260:	e13ffd17 	ldw	r4,-12(fp)
 8026264:	802699c0 	call	802699c <igmp_validate>
 8026268:	e0bfff15 	stw	r2,-4(fp)
 802626c:	e0bfff17 	ldw	r2,-4(fp)
 8026270:	1000181e 	bne	r2,zero,80262d4 <igmp_input+0x9c>

   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
 8026274:	e0bffd17 	ldw	r2,-12(fp)
 8026278:	10800617 	ldw	r2,24(r2)
 802627c:	10802f03 	ldbu	r2,188(r2)
 8026280:	e0bffec5 	stb	r2,-5(fp)
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
 8026284:	e0bffec3 	ldbu	r2,-5(fp)
 8026288:	10c00060 	cmpeqi	r3,r2,1
 802628c:	1800031e 	bne	r3,zero,802629c <igmp_input+0x64>
 8026290:	108000a0 	cmpeqi	r2,r2,2
 8026294:	1000041e 	bne	r2,zero,80262a8 <igmp_input+0x70>
 8026298:	00000606 	br	80262b4 <igmp_input+0x7c>
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
 802629c:	e13ffd17 	ldw	r4,-12(fp)
 80262a0:	80442e40 	call	80442e4 <igmpv1_input>
 80262a4:	00001306 	br	80262f4 <igmp_input+0xbc>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
 80262a8:	e13ffd17 	ldw	r4,-12(fp)
 80262ac:	804454c0 	call	804454c <igmpv2_input>
 80262b0:	00001006 	br	80262f4 <igmp_input+0xbc>
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
 80262b4:	008201b4 	movhi	r2,2054
 80262b8:	10baeb17 	ldw	r2,-5204(r2)
 80262bc:	10c00044 	addi	r3,r2,1
 80262c0:	008201b4 	movhi	r2,2054
 80262c4:	10faeb15 	stw	r3,-5204(r2)
         rc = IGMP_ERR;
 80262c8:	00bfffc4 	movi	r2,-1
 80262cc:	e0bfff15 	stw	r2,-4(fp)
         break;
 80262d0:	00000106 	br	80262d8 <igmp_input+0xa0>
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 80262d4:	0001883a 	nop
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80262d8:	01000084 	movi	r4,2
 80262dc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 80262e0:	e13ffd17 	ldw	r4,-12(fp)
 80262e4:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80262e8:	01000084 	movi	r4,2
 80262ec:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      
   return rc;
 80262f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80262f4:	e037883a 	mov	sp,fp
 80262f8:	dfc00117 	ldw	ra,4(sp)
 80262fc:	df000017 	ldw	fp,0(sp)
 8026300:	dec00204 	addi	sp,sp,8
 8026304:	f800283a 	ret

08026308 <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
 8026308:	defffc04 	addi	sp,sp,-16
 802630c:	dfc00315 	stw	ra,12(sp)
 8026310:	df000215 	stw	fp,8(sp)
 8026314:	df000204 	addi	fp,sp,8
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
 8026318:	0009883a 	mov	r4,zero
 802631c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
 8026320:	d0a08117 	ldw	r2,-32252(gp)
 8026324:	1000031e 	bne	r2,zero,8026334 <igmp_fasttimo+0x2c>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
 8026328:	0009883a 	mov	r4,zero
 802632c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return;
 8026330:	00004c06 	br	8026464 <igmp_fasttimo+0x15c>
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8026334:	008201b4 	movhi	r2,2054
 8026338:	10bd1b17 	ldw	r2,-2964(r2)
 802633c:	e0bffe15 	stw	r2,-8(fp)
 8026340:	00004006 	br	8026444 <igmp_fasttimo+0x13c>
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 8026344:	e0bffe17 	ldw	r2,-8(fp)
 8026348:	10802c17 	ldw	r2,176(r2)
 802634c:	e0bfff15 	stw	r2,-4(fp)
 8026350:	00003706 	br	8026430 <igmp_fasttimo+0x128>
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
 8026354:	e0bfff17 	ldw	r2,-4(fp)
 8026358:	10800017 	ldw	r2,0(r2)
 802635c:	10003026 	beq	r2,zero,8026420 <igmp_fasttimo+0x118>
               continue;

         if (inm->inm_timer == 0)   /* timer not set */
 8026360:	e0bfff17 	ldw	r2,-4(fp)
 8026364:	10800317 	ldw	r2,12(r2)
 8026368:	10002e26 	beq	r2,zero,8026424 <igmp_fasttimo+0x11c>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
 802636c:	e0bfff17 	ldw	r2,-4(fp)
 8026370:	10800317 	ldw	r2,12(r2)
 8026374:	10ffffc4 	addi	r3,r2,-1
 8026378:	e0bfff17 	ldw	r2,-4(fp)
 802637c:	10c00315 	stw	r3,12(r2)
 8026380:	e0bfff17 	ldw	r2,-4(fp)
 8026384:	10800317 	ldw	r2,12(r2)
 8026388:	1000261e 	bne	r2,zero,8026424 <igmp_fasttimo+0x11c>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
 802638c:	e0bffe17 	ldw	r2,-8(fp)
 8026390:	10802d03 	ldbu	r2,180(r2)
 8026394:	10803fcc 	andi	r2,r2,255
 8026398:	10000426 	beq	r2,zero,80263ac <igmp_fasttimo+0xa4>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 802639c:	e17fff17 	ldw	r5,-4(fp)
 80263a0:	01000484 	movi	r4,18
 80263a4:	80264780 	call	8026478 <igmp_send>
 80263a8:	00000306 	br	80263b8 <igmp_fasttimo+0xb0>
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 80263ac:	e17fff17 	ldw	r5,-4(fp)
 80263b0:	01000584 	movi	r4,22
 80263b4:	80264780 	call	8026478 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 80263b8:	e0bffe17 	ldw	r2,-8(fp)
 80263bc:	10802f03 	ldbu	r2,188(r2)
 80263c0:	10803fcc 	andi	r2,r2,255
 80263c4:	10800098 	cmpnei	r2,r2,2
 80263c8:	1000111e 	bne	r2,zero,8026410 <igmp_fasttimo+0x108>
            {
               inm->last2send_report = IGMP_TRUE;
 80263cc:	e0bfff17 	ldw	r2,-4(fp)
 80263d0:	00c00044 	movi	r3,1
 80263d4:	10c00405 	stb	r3,16(r2)
               
               if (ifp->igmpv1_rtr_present)
 80263d8:	e0bffe17 	ldw	r2,-8(fp)
 80263dc:	10802d03 	ldbu	r2,180(r2)
 80263e0:	10803fcc 	andi	r2,r2,255
 80263e4:	10000a26 	beq	r2,zero,8026410 <igmp_fasttimo+0x108>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
 80263e8:	e0bffe17 	ldw	r2,-8(fp)
 80263ec:	10c02e17 	ldw	r3,184(r2)
 80263f0:	00a71014 	movui	r2,40000
 80263f4:	1887883a 	add	r3,r3,r2
 80263f8:	d0a0a317 	ldw	r2,-32116(gp)
 80263fc:	1880042e 	bgeu	r3,r2,8026410 <igmp_fasttimo+0x108>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
 8026400:	e0bffe17 	ldw	r2,-8(fp)
 8026404:	10002d05 	stb	zero,180(r2)
                     ifp->igmpv1_query_rcvd_time = 0;
 8026408:	e0bffe17 	ldw	r2,-8(fp)
 802640c:	10002e15 	stw	zero,184(r2)
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
 8026410:	d0a08117 	ldw	r2,-32252(gp)
 8026414:	10bfffc4 	addi	r2,r2,-1
 8026418:	d0a08115 	stw	r2,-32252(gp)
 802641c:	00000106 	br	8026424 <igmp_fasttimo+0x11c>
               continue;
 8026420:	0001883a 	nop
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 8026424:	e0bfff17 	ldw	r2,-4(fp)
 8026428:	10800517 	ldw	r2,20(r2)
 802642c:	e0bfff15 	stw	r2,-4(fp)
 8026430:	e0bfff17 	ldw	r2,-4(fp)
 8026434:	103fc71e 	bne	r2,zero,8026354 <igmp_fasttimo+0x4c>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8026438:	e0bffe17 	ldw	r2,-8(fp)
 802643c:	10800017 	ldw	r2,0(r2)
 8026440:	e0bffe15 	stw	r2,-8(fp)
 8026444:	e0bffe17 	ldw	r2,-8(fp)
 8026448:	103fbe1e 	bne	r2,zero,8026344 <igmp_fasttimo+0x3c>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 802644c:	d0a0a317 	ldw	r2,-32116(gp)
 8026450:	10800504 	addi	r2,r2,20
 8026454:	d0a08215 	stw	r2,-32248(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 8026458:	0009883a 	mov	r4,zero
 802645c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   
   return;
 8026460:	0001883a 	nop
}
 8026464:	e037883a 	mov	sp,fp
 8026468:	dfc00117 	ldw	ra,4(sp)
 802646c:	df000017 	ldw	fp,0(sp)
 8026470:	dec00204 	addi	sp,sp,8
 8026474:	f800283a 	ret

08026478 <igmp_send>:
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 8026478:	deffde04 	addi	sp,sp,-136
 802647c:	dfc02115 	stw	ra,132(sp)
 8026480:	df002015 	stw	fp,128(sp)
 8026484:	df002004 	addi	fp,sp,128
 8026488:	2005883a 	mov	r2,r4
 802648c:	e17fe015 	stw	r5,-128(fp)
 8026490:	e0bfe105 	stb	r2,-124(fp)
   struct igmp * igmp;
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
 8026494:	00800504 	movi	r2,20
 8026498:	e0bfe28d 	sth	r2,-118(fp)
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
 802649c:	d0a07c17 	ldw	r2,-32272(gp)
 80264a0:	10800704 	addi	r2,r2,28
 80264a4:	e0bffdc5 	stb	r2,-9(fp)
   if ((type == IGMPv2_LEAVE_GROUP) || 
 80264a8:	e0bfe103 	ldbu	r2,-124(fp)
 80264ac:	108005e0 	cmpeqi	r2,r2,23
 80264b0:	1000031e 	bne	r2,zero,80264c0 <igmp_send+0x48>
 80264b4:	e0bfe103 	ldbu	r2,-124(fp)
 80264b8:	10800598 	cmpnei	r2,r2,22
 80264bc:	1000031e 	bne	r2,zero,80264cc <igmp_send+0x54>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
 80264c0:	e0bffdc3 	ldbu	r2,-9(fp)
 80264c4:	10800104 	addi	r2,r2,4
 80264c8:	e0bffdc5 	stb	r2,-9(fp)
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
 80264cc:	01000084 	movi	r4,2
 80264d0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
 80264d4:	e0bffdc3 	ldbu	r2,-9(fp)
 80264d8:	1009883a 	mov	r4,r2
 80264dc:	802b8840 	call	802b884 <pk_alloc>
 80264e0:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 80264e4:	01000084 	movi	r4,2
 80264e8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
 80264ec:	e0bffc17 	ldw	r2,-16(fp)
 80264f0:	1000061e 	bne	r2,zero,802650c <igmp_send+0x94>
   {
      ++igmpstats.igmp_pkt_alloc_fail;
 80264f4:	008201b4 	movhi	r2,2054
 80264f8:	10baea17 	ldw	r2,-5208(r2)
 80264fc:	10c00044 	addi	r3,r2,1
 8026500:	008201b4 	movhi	r2,2054
 8026504:	10faea15 	stw	r3,-5208(r2)
 8026508:	00007406 	br	80266dc <igmp_send+0x264>
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
 802650c:	e0bffc17 	ldw	r2,-16(fp)
 8026510:	10800317 	ldw	r2,12(r2)
 8026514:	e0bffb15 	stw	r2,-20(fp)
   pip->ip_src = inm->inm_netp->n_ipaddr;
 8026518:	e0bfe017 	ldw	r2,-128(fp)
 802651c:	10800117 	ldw	r2,4(r2)
 8026520:	10c00a17 	ldw	r3,40(r2)
 8026524:	e0bffb17 	ldw	r2,-20(fp)
 8026528:	10c00315 	stw	r3,12(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 802652c:	e0bfe103 	ldbu	r2,-124(fp)
 8026530:	108005d8 	cmpnei	r2,r2,23
 8026534:	1000041e 	bne	r2,zero,8026548 <igmp_send+0xd0>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
 8026538:	d0e08417 	ldw	r3,-32240(gp)
 802653c:	e0bffb17 	ldw	r2,-20(fp)
 8026540:	10c00415 	stw	r3,16(r2)
 8026544:	00000406 	br	8026558 <igmp_send+0xe0>
   }
   else
      pip->ip_dest = inm->inm_addr;
 8026548:	e0bfe017 	ldw	r2,-128(fp)
 802654c:	10c00017 	ldw	r3,0(r2)
 8026550:	e0bffb17 	ldw	r2,-20(fp)
 8026554:	10c00415 	stw	r3,16(r2)
   
   p->fhost = pip->ip_dest;
 8026558:	e0bffb17 	ldw	r2,-20(fp)
 802655c:	10c00417 	ldw	r3,16(r2)
 8026560:	e0bffc17 	ldw	r2,-16(fp)
 8026564:	10c00715 	stw	r3,28(r2)

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
 8026568:	e0bffc17 	ldw	r2,-16(fp)
 802656c:	10800317 	ldw	r2,12(r2)
 8026570:	10800504 	addi	r2,r2,20
 8026574:	e0bfff15 	stw	r2,-4(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 8026578:	e0bfe103 	ldbu	r2,-124(fp)
 802657c:	108005e0 	cmpeqi	r2,r2,23
 8026580:	1000031e 	bne	r2,zero,8026590 <igmp_send+0x118>
 8026584:	e0bfe103 	ldbu	r2,-124(fp)
 8026588:	10800598 	cmpnei	r2,r2,22
 802658c:	1000061e 	bne	r2,zero,80265a8 <igmp_send+0x130>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
 8026590:	e0bfff17 	ldw	r2,-4(fp)
 8026594:	10800104 	addi	r2,r2,4
 8026598:	e0bfff15 	stw	r2,-4(fp)
      optp = &(opts [0]); /* one option (IP Router Alert) */
 802659c:	e0bfe284 	addi	r2,fp,-118
 80265a0:	e0bffe15 	stw	r2,-8(fp)
 80265a4:	00000306 	br	80265b4 <igmp_send+0x13c>
   }
   /* outgoing packet does not require any options */
   else 
      optp = &(opts [1]);
 80265a8:	e0bfe284 	addi	r2,fp,-118
 80265ac:	10800044 	addi	r2,r2,1
 80265b0:	e0bffe15 	stw	r2,-8(fp)
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
 80265b4:	e0bfff17 	ldw	r2,-4(fp)
 80265b8:	e0bffa15 	stw	r2,-24(fp)
   
   igmp->igmp_type = type;
 80265bc:	e0bffa17 	ldw	r2,-24(fp)
 80265c0:	e0ffe103 	ldbu	r3,-124(fp)
 80265c4:	10c00005 	stb	r3,0(r2)
   igmp->igmp_code = 0;
 80265c8:	e0bffa17 	ldw	r2,-24(fp)
 80265cc:	10000045 	stb	zero,1(r2)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
 80265d0:	e0bfe017 	ldw	r2,-128(fp)
 80265d4:	10c00017 	ldw	r3,0(r2)
 80265d8:	e0bffa17 	ldw	r2,-24(fp)
 80265dc:	10c00115 	stw	r3,4(r2)
   igmp->igmp_cksum = 0;
 80265e0:	e0bffa17 	ldw	r2,-24(fp)
 80265e4:	1000008d 	sth	zero,2(r2)
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 80265e8:	01400104 	movi	r5,4
 80265ec:	e13ffa17 	ldw	r4,-24(fp)
 80265f0:	8027be00 	call	8027be0 <cksum>
 80265f4:	0084303a 	nor	r2,zero,r2
 80265f8:	1007883a 	mov	r3,r2
 80265fc:	e0bffa17 	ldw	r2,-24(fp)
 8026600:	10c0008d 	sth	r3,2(r2)

   imop = &simo;
 8026604:	e0bfe304 	addi	r2,fp,-116
 8026608:	e0bff915 	stw	r2,-28(fp)
   MEMSET(imop, 0, sizeof(simo));
 802660c:	01801604 	movi	r6,88
 8026610:	000b883a 	mov	r5,zero
 8026614:	e13ff917 	ldw	r4,-28(fp)
 8026618:	8002fa40 	call	8002fa4 <memset>
   imop->imo_multicast_netp = inm->inm_netp;
 802661c:	e0bfe017 	ldw	r2,-128(fp)
 8026620:	10c00117 	ldw	r3,4(r2)
 8026624:	e0bff917 	ldw	r2,-28(fp)
 8026628:	10c00015 	stw	r3,0(r2)
   imop->imo_multicast_ttl = 1;
 802662c:	e0bff917 	ldw	r2,-28(fp)
 8026630:	00c00044 	movi	r3,1
 8026634:	10c00105 	stb	r3,4(r2)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
 8026638:	e0bff917 	ldw	r2,-28(fp)
 802663c:	10000145 	stb	zero,5(r2)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
 8026640:	e0bffc17 	ldw	r2,-16(fp)
 8026644:	e0ffff17 	ldw	r3,-4(fp)
 8026648:	10c00315 	stw	r3,12(r2)
   p->nb_plen = sizeof(struct igmp);
 802664c:	e0bffc17 	ldw	r2,-16(fp)
 8026650:	00c00204 	movi	r3,8
 8026654:	10c00415 	stw	r3,16(r2)
   p->imo = imop;
 8026658:	e0bffc17 	ldw	r2,-16(fp)
 802665c:	e0fff917 	ldw	r3,-28(fp)
 8026660:	10c00b15 	stw	r3,44(r2)
   
   ip_write2 (IGMP_PROT, p, optp);
 8026664:	e1bffe17 	ldw	r6,-8(fp)
 8026668:	e17ffc17 	ldw	r5,-16(fp)
 802666c:	01000084 	movi	r4,2
 8026670:	803eb940 	call	803eb94 <ip_write2>

   if (type == IGMPv2_LEAVE_GROUP)
 8026674:	e0bfe103 	ldbu	r2,-124(fp)
 8026678:	108005d8 	cmpnei	r2,r2,23
 802667c:	1000061e 	bne	r2,zero,8026698 <igmp_send+0x220>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
 8026680:	008201b4 	movhi	r2,2054
 8026684:	10baf517 	ldw	r2,-5164(r2)
 8026688:	10c00044 	addi	r3,r2,1
 802668c:	008201b4 	movhi	r2,2054
 8026690:	10faf515 	stw	r3,-5164(r2)
 8026694:	00001106 	br	80266dc <igmp_send+0x264>
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
 8026698:	e0bfe103 	ldbu	r2,-124(fp)
 802669c:	10800598 	cmpnei	r2,r2,22
 80266a0:	1000061e 	bne	r2,zero,80266bc <igmp_send+0x244>
      ++igmpstats.igmpv2mode_v2_reports_sent;
 80266a4:	008201b4 	movhi	r2,2054
 80266a8:	10baf617 	ldw	r2,-5160(r2)
 80266ac:	10c00044 	addi	r3,r2,1
 80266b0:	008201b4 	movhi	r2,2054
 80266b4:	10faf615 	stw	r3,-5160(r2)
 80266b8:	00000806 	br	80266dc <igmp_send+0x264>
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
 80266bc:	e0bfe103 	ldbu	r2,-124(fp)
 80266c0:	10800498 	cmpnei	r2,r2,18
 80266c4:	1000051e 	bne	r2,zero,80266dc <igmp_send+0x264>
      ++igmpstats.igmp_v1_reports_sent;
 80266c8:	008201b4 	movhi	r2,2054
 80266cc:	10baf417 	ldw	r2,-5168(r2)
 80266d0:	10c00044 	addi	r3,r2,1
 80266d4:	008201b4 	movhi	r2,2054
 80266d8:	10faf415 	stw	r3,-5168(r2)
}
 80266dc:	e037883a 	mov	sp,fp
 80266e0:	dfc00117 	ldw	ra,4(sp)
 80266e4:	df000017 	ldw	fp,0(sp)
 80266e8:	dec00204 	addi	sp,sp,8
 80266ec:	f800283a 	ret

080266f0 <igmp_joingroup>:
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
 80266f0:	defffc04 	addi	sp,sp,-16
 80266f4:	dfc00315 	stw	ra,12(sp)
 80266f8:	df000215 	stw	fp,8(sp)
 80266fc:	df000204 	addi	fp,sp,8
 8026700:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
 8026704:	e0bffe17 	ldw	r2,-8(fp)
 8026708:	10800117 	ldw	r2,4(r2)
 802670c:	e0bfff15 	stw	r2,-4(fp)

   if (inm->inm_addr == igmp_all_hosts_group)
 8026710:	e0bffe17 	ldw	r2,-8(fp)
 8026714:	10c00017 	ldw	r3,0(r2)
 8026718:	d0a08317 	ldw	r2,-32244(gp)
 802671c:	1880031e 	bne	r3,r2,802672c <igmp_joingroup+0x3c>
   {
      inm->inm_timer = 0;
 8026720:	e0bffe17 	ldw	r2,-8(fp)
 8026724:	10000315 	stw	zero,12(r2)
      }

      ++igmp_timers_are_running;
   }
   
   return;
 8026728:	00007706 	br	8026908 <igmp_joingroup+0x218>
      if (ifp->igmpv1_rtr_present)
 802672c:	e0bfff17 	ldw	r2,-4(fp)
 8026730:	10802d03 	ldbu	r2,180(r2)
 8026734:	10803fcc 	andi	r2,r2,255
 8026738:	10003426 	beq	r2,zero,802680c <igmp_joingroup+0x11c>
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 802673c:	e17ffe17 	ldw	r5,-8(fp)
 8026740:	01000484 	movi	r4,18
 8026744:	80264780 	call	8026478 <igmp_send>
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 8026748:	008201b4 	movhi	r2,2054
 802674c:	10fd2217 	ldw	r3,-2936(r2)
 8026750:	008201b4 	movhi	r2,2054
 8026754:	10bada17 	ldw	r2,-5272(r2)
 8026758:	10800a17 	ldw	r2,40(r2)
 802675c:	1008d63a 	srli	r4,r2,24
 8026760:	008201b4 	movhi	r2,2054
 8026764:	10bada17 	ldw	r2,-5272(r2)
 8026768:	10800a17 	ldw	r2,40(r2)
 802676c:	1004d23a 	srli	r2,r2,8
 8026770:	10bfc00c 	andi	r2,r2,65280
 8026774:	2088b03a 	or	r4,r4,r2
 8026778:	008201b4 	movhi	r2,2054
 802677c:	10bada17 	ldw	r2,-5272(r2)
 8026780:	10800a17 	ldw	r2,40(r2)
 8026784:	1004923a 	slli	r2,r2,8
 8026788:	10803fec 	andhi	r2,r2,255
 802678c:	2088b03a 	or	r4,r4,r2
 8026790:	008201b4 	movhi	r2,2054
 8026794:	10bada17 	ldw	r2,-5272(r2)
 8026798:	10800a17 	ldw	r2,40(r2)
 802679c:	1004963a 	slli	r2,r2,24
 80267a0:	2084b03a 	or	r2,r4,r2
 80267a4:	1887883a 	add	r3,r3,r2
 80267a8:	e0bffe17 	ldw	r2,-8(fp)
 80267ac:	10800017 	ldw	r2,0(r2)
 80267b0:	1008d63a 	srli	r4,r2,24
 80267b4:	e0bffe17 	ldw	r2,-8(fp)
 80267b8:	10800017 	ldw	r2,0(r2)
 80267bc:	1004d23a 	srli	r2,r2,8
 80267c0:	10bfc00c 	andi	r2,r2,65280
 80267c4:	2088b03a 	or	r4,r4,r2
 80267c8:	e0bffe17 	ldw	r2,-8(fp)
 80267cc:	10800017 	ldw	r2,0(r2)
 80267d0:	1004923a 	slli	r2,r2,8
 80267d4:	10803fec 	andhi	r2,r2,255
 80267d8:	2088b03a 	or	r4,r4,r2
 80267dc:	e0bffe17 	ldw	r2,-8(fp)
 80267e0:	10800017 	ldw	r2,0(r2)
 80267e4:	1004963a 	slli	r2,r2,24
 80267e8:	2084b03a 	or	r2,r4,r2
 80267ec:	1885883a 	add	r2,r3,r2
 80267f0:	01400c84 	movi	r5,50
 80267f4:	1009883a 	mov	r4,r2
 80267f8:	800e2940 	call	800e294 <__umodsi3>
 80267fc:	10c00044 	addi	r3,r2,1
 8026800:	e0bffe17 	ldw	r2,-8(fp)
 8026804:	10c00315 	stw	r3,12(r2)
 8026808:	00003306 	br	80268d8 <igmp_joingroup+0x1e8>
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 802680c:	e17ffe17 	ldw	r5,-8(fp)
 8026810:	01000584 	movi	r4,22
 8026814:	80264780 	call	8026478 <igmp_send>
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
 8026818:	008201b4 	movhi	r2,2054
 802681c:	10fd2217 	ldw	r3,-2936(r2)
 8026820:	008201b4 	movhi	r2,2054
 8026824:	10bada17 	ldw	r2,-5272(r2)
 8026828:	10800a17 	ldw	r2,40(r2)
 802682c:	1008d63a 	srli	r4,r2,24
 8026830:	008201b4 	movhi	r2,2054
 8026834:	10bada17 	ldw	r2,-5272(r2)
 8026838:	10800a17 	ldw	r2,40(r2)
 802683c:	1004d23a 	srli	r2,r2,8
 8026840:	10bfc00c 	andi	r2,r2,65280
 8026844:	2088b03a 	or	r4,r4,r2
 8026848:	008201b4 	movhi	r2,2054
 802684c:	10bada17 	ldw	r2,-5272(r2)
 8026850:	10800a17 	ldw	r2,40(r2)
 8026854:	1004923a 	slli	r2,r2,8
 8026858:	10803fec 	andhi	r2,r2,255
 802685c:	2088b03a 	or	r4,r4,r2
 8026860:	008201b4 	movhi	r2,2054
 8026864:	10bada17 	ldw	r2,-5272(r2)
 8026868:	10800a17 	ldw	r2,40(r2)
 802686c:	1004963a 	slli	r2,r2,24
 8026870:	2084b03a 	or	r2,r4,r2
 8026874:	1887883a 	add	r3,r3,r2
 8026878:	e0bffe17 	ldw	r2,-8(fp)
 802687c:	10800017 	ldw	r2,0(r2)
 8026880:	1008d63a 	srli	r4,r2,24
 8026884:	e0bffe17 	ldw	r2,-8(fp)
 8026888:	10800017 	ldw	r2,0(r2)
 802688c:	1004d23a 	srli	r2,r2,8
 8026890:	10bfc00c 	andi	r2,r2,65280
 8026894:	2088b03a 	or	r4,r4,r2
 8026898:	e0bffe17 	ldw	r2,-8(fp)
 802689c:	10800017 	ldw	r2,0(r2)
 80268a0:	1004923a 	slli	r2,r2,8
 80268a4:	10803fec 	andhi	r2,r2,255
 80268a8:	2088b03a 	or	r4,r4,r2
 80268ac:	e0bffe17 	ldw	r2,-8(fp)
 80268b0:	10800017 	ldw	r2,0(r2)
 80268b4:	1004963a 	slli	r2,r2,24
 80268b8:	2084b03a 	or	r2,r4,r2
 80268bc:	1885883a 	add	r2,r3,r2
 80268c0:	01400c84 	movi	r5,50
 80268c4:	1009883a 	mov	r4,r2
 80268c8:	800e2940 	call	800e294 <__umodsi3>
 80268cc:	10c00044 	addi	r3,r2,1
 80268d0:	e0bffe17 	ldw	r2,-8(fp)
 80268d4:	10c00315 	stw	r3,12(r2)
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 80268d8:	e0bfff17 	ldw	r2,-4(fp)
 80268dc:	10802f03 	ldbu	r2,188(r2)
 80268e0:	10803fcc 	andi	r2,r2,255
 80268e4:	10800098 	cmpnei	r2,r2,2
 80268e8:	1000031e 	bne	r2,zero,80268f8 <igmp_joingroup+0x208>
         inm->last2send_report = IGMP_TRUE;
 80268ec:	e0bffe17 	ldw	r2,-8(fp)
 80268f0:	00c00044 	movi	r3,1
 80268f4:	10c00405 	stb	r3,16(r2)
      ++igmp_timers_are_running;
 80268f8:	d0a08117 	ldw	r2,-32252(gp)
 80268fc:	10800044 	addi	r2,r2,1
 8026900:	d0a08115 	stw	r2,-32252(gp)
   return;
 8026904:	0001883a 	nop
}     
 8026908:	e037883a 	mov	sp,fp
 802690c:	dfc00117 	ldw	ra,4(sp)
 8026910:	df000017 	ldw	fp,0(sp)
 8026914:	dec00204 	addi	sp,sp,8
 8026918:	f800283a 	ret

0802691c <igmp_leavegroup>:
 *
 * OUTPUT: None.
 */

void igmp_leavegroup (struct in_multi * inm)
{
 802691c:	defffc04 	addi	sp,sp,-16
 8026920:	dfc00315 	stw	ra,12(sp)
 8026924:	df000215 	stw	fp,8(sp)
 8026928:	df000204 	addi	fp,sp,8
 802692c:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   ifp = inm->inm_netp;
 8026930:	e0bffe17 	ldw	r2,-8(fp)
 8026934:	10800117 	ldw	r2,4(r2)
 8026938:	e0bfff15 	stw	r2,-4(fp)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 802693c:	e0bfff17 	ldw	r2,-4(fp)
 8026940:	10802f03 	ldbu	r2,188(r2)
 8026944:	10803fcc 	andi	r2,r2,255
 8026948:	10800098 	cmpnei	r2,r2,2
 802694c:	10000d1e 	bne	r2,zero,8026984 <igmp_leavegroup+0x68>
       !ifp->igmpv1_rtr_present)
 8026950:	e0bfff17 	ldw	r2,-4(fp)
 8026954:	10802d03 	ldbu	r2,180(r2)
   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 8026958:	10803fcc 	andi	r2,r2,255
 802695c:	1000091e 	bne	r2,zero,8026984 <igmp_leavegroup+0x68>
   {
      if (inm->last2send_report == IGMP_TRUE)
 8026960:	e0bffe17 	ldw	r2,-8(fp)
 8026964:	10800403 	ldbu	r2,16(r2)
 8026968:	10803fcc 	andi	r2,r2,255
 802696c:	10800058 	cmpnei	r2,r2,1
 8026970:	1000041e 	bne	r2,zero,8026984 <igmp_leavegroup+0x68>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
 8026974:	e17ffe17 	ldw	r5,-8(fp)
 8026978:	010005c4 	movi	r4,23
 802697c:	80264780 	call	8026478 <igmp_send>
   }
   
   return;
 8026980:	0001883a 	nop
 8026984:	0001883a 	nop
}
 8026988:	e037883a 	mov	sp,fp
 802698c:	dfc00117 	ldw	ra,4(sp)
 8026990:	df000017 	ldw	fp,0(sp)
 8026994:	dec00204 	addi	sp,sp,8
 8026998:	f800283a 	ret

0802699c <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 802699c:	defff604 	addi	sp,sp,-40
 80269a0:	dfc00915 	stw	ra,36(sp)
 80269a4:	df000815 	stw	fp,32(sp)
 80269a8:	df000804 	addi	fp,sp,32
 80269ac:	e13ff815 	stw	r4,-32(fp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
 80269b0:	e0bff817 	ldw	r2,-32(fp)
 80269b4:	10800317 	ldw	r2,12(r2)
 80269b8:	e0bfff15 	stw	r2,-4(fp)

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 80269bc:	e0bff817 	ldw	r2,-32(fp)
 80269c0:	10c00417 	ldw	r3,16(r2)
 80269c4:	e0bfff17 	ldw	r2,-4(fp)
 80269c8:	10800003 	ldbu	r2,0(r2)
 80269cc:	10803fcc 	andi	r2,r2,255
 80269d0:	100490ba 	slli	r2,r2,2
 80269d4:	10800f0c 	andi	r2,r2,60
 80269d8:	1885c83a 	sub	r2,r3,r2
 80269dc:	e0bffe15 	stw	r2,-8(fp)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 80269e0:	e0bffe17 	ldw	r2,-8(fp)
 80269e4:	10800220 	cmpeqi	r2,r2,8
 80269e8:	1000071e 	bne	r2,zero,8026a08 <igmp_validate+0x6c>
   {
      ++igmpstats.igmp_badlen_rcvd;
 80269ec:	008201b4 	movhi	r2,2054
 80269f0:	10bae817 	ldw	r2,-5216(r2)
 80269f4:	10c00044 	addi	r3,r2,1
 80269f8:	008201b4 	movhi	r2,2054
 80269fc:	10fae815 	stw	r3,-5216(r2)
      return ENP_BAD_HEADER;
 8026a00:	00bff804 	movi	r2,-32
 8026a04:	00009706 	br	8026c64 <igmp_validate+0x2c8>
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
 8026a08:	e0bfff17 	ldw	r2,-4(fp)
 8026a0c:	10800003 	ldbu	r2,0(r2)
 8026a10:	10803fcc 	andi	r2,r2,255
 8026a14:	100490ba 	slli	r2,r2,2
 8026a18:	10800f0c 	andi	r2,r2,60
 8026a1c:	e0ffff17 	ldw	r3,-4(fp)
 8026a20:	1885883a 	add	r2,r3,r2
 8026a24:	e0bffd15 	stw	r2,-12(fp)
   osum = igmp->igmp_cksum;
 8026a28:	e0bffd17 	ldw	r2,-12(fp)
 8026a2c:	1080008b 	ldhu	r2,2(r2)
 8026a30:	e0bffc8d 	sth	r2,-14(fp)
   igmp->igmp_cksum = 0;
 8026a34:	e0bffd17 	ldw	r2,-12(fp)
 8026a38:	1000008d 	sth	zero,2(r2)
   xsum = ~cksum(igmp, igmplen>>1);
 8026a3c:	e0bffe17 	ldw	r2,-8(fp)
 8026a40:	1005d07a 	srai	r2,r2,1
 8026a44:	100b883a 	mov	r5,r2
 8026a48:	e13ffd17 	ldw	r4,-12(fp)
 8026a4c:	8027be00 	call	8027be0 <cksum>
 8026a50:	0084303a 	nor	r2,zero,r2
 8026a54:	e0bffc0d 	sth	r2,-16(fp)
   if (xsum != osum)
 8026a58:	e0fffc0b 	ldhu	r3,-16(fp)
 8026a5c:	e0bffc8b 	ldhu	r2,-14(fp)
 8026a60:	18800a26 	beq	r3,r2,8026a8c <igmp_validate+0xf0>
   {
      igmp->igmp_cksum = osum;
 8026a64:	e0bffd17 	ldw	r2,-12(fp)
 8026a68:	e0fffc8b 	ldhu	r3,-14(fp)
 8026a6c:	10c0008d 	sth	r3,2(r2)
      ++igmpstats.igmp_badsum_rcvd;
 8026a70:	008201b4 	movhi	r2,2054
 8026a74:	10bae917 	ldw	r2,-5212(r2)
 8026a78:	10c00044 	addi	r3,r2,1
 8026a7c:	008201b4 	movhi	r2,2054
 8026a80:	10fae915 	stw	r3,-5212(r2)
      return ENP_BAD_HEADER;
 8026a84:	00bff804 	movi	r2,-32
 8026a88:	00007606 	br	8026c64 <igmp_validate+0x2c8>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
 8026a8c:	e0bffd17 	ldw	r2,-12(fp)
 8026a90:	10800003 	ldbu	r2,0(r2)
 8026a94:	e0bffbc5 	stb	r2,-17(fp)
   mcgrp_addr = ntohl(igmp->igmp_group); 
 8026a98:	e0bffd17 	ldw	r2,-12(fp)
 8026a9c:	10800117 	ldw	r2,4(r2)
 8026aa0:	1006d63a 	srli	r3,r2,24
 8026aa4:	e0bffd17 	ldw	r2,-12(fp)
 8026aa8:	10800117 	ldw	r2,4(r2)
 8026aac:	1004d23a 	srli	r2,r2,8
 8026ab0:	10bfc00c 	andi	r2,r2,65280
 8026ab4:	1886b03a 	or	r3,r3,r2
 8026ab8:	e0bffd17 	ldw	r2,-12(fp)
 8026abc:	10800117 	ldw	r2,4(r2)
 8026ac0:	1004923a 	slli	r2,r2,8
 8026ac4:	10803fec 	andhi	r2,r2,255
 8026ac8:	1886b03a 	or	r3,r3,r2
 8026acc:	e0bffd17 	ldw	r2,-12(fp)
 8026ad0:	10800117 	ldw	r2,4(r2)
 8026ad4:	1004963a 	slli	r2,r2,24
 8026ad8:	1884b03a 	or	r2,r3,r2
 8026adc:	e0bffa15 	stw	r2,-24(fp)
   resp_time = igmp->igmp_code;
 8026ae0:	e0bffd17 	ldw	r2,-12(fp)
 8026ae4:	10800043 	ldbu	r2,1(r2)
 8026ae8:	e0bff9c5 	stb	r2,-25(fp)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
 8026aec:	e0bffbc3 	ldbu	r2,-17(fp)
 8026af0:	10800458 	cmpnei	r2,r2,17
 8026af4:	10002c1e 	bne	r2,zero,8026ba8 <igmp_validate+0x20c>
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
 8026af8:	e0bff9c3 	ldbu	r2,-25(fp)
 8026afc:	10000426 	beq	r2,zero,8026b10 <igmp_validate+0x174>
 8026b00:	e0bff9c3 	ldbu	r2,-25(fp)
 8026b04:	10000d26 	beq	r2,zero,8026b3c <igmp_validate+0x1a0>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
 8026b08:	e0bffa17 	ldw	r2,-24(fp)
 8026b0c:	10000b1e 	bne	r2,zero,8026b3c <igmp_validate+0x1a0>
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
 8026b10:	e0bfff17 	ldw	r2,-4(fp)
 8026b14:	10c00417 	ldw	r3,16(r2)
 8026b18:	d0a08317 	ldw	r2,-32244(gp)
 8026b1c:	18800726 	beq	r3,r2,8026b3c <igmp_validate+0x1a0>
         {
            ++igmpstats.igmp_bad_queries_rcvd;
 8026b20:	008201b4 	movhi	r2,2054
 8026b24:	10baec17 	ldw	r2,-5200(r2)
 8026b28:	10c00044 	addi	r3,r2,1
 8026b2c:	008201b4 	movhi	r2,2054
 8026b30:	10faec15 	stw	r3,-5200(r2)
            return ENP_BAD_HEADER;
 8026b34:	00bff804 	movi	r2,-32
 8026b38:	00004a06 	br	8026c64 <igmp_validate+0x2c8>
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
 8026b3c:	e0bff9c3 	ldbu	r2,-25(fp)
 8026b40:	10001926 	beq	r2,zero,8026ba8 <igmp_validate+0x20c>
 8026b44:	e0bffa17 	ldw	r2,-24(fp)
 8026b48:	10001726 	beq	r2,zero,8026ba8 <igmp_validate+0x20c>
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
 8026b4c:	e0bff817 	ldw	r2,-32(fp)
 8026b50:	10800617 	ldw	r2,24(r2)
 8026b54:	10802f03 	ldbu	r2,188(r2)
 8026b58:	10803fcc 	andi	r2,r2,255
 8026b5c:	10800058 	cmpnei	r2,r2,1
 8026b60:	1000021e 	bne	r2,zero,8026b6c <igmp_validate+0x1d0>
         {
            /* IGMPv1 code does not understand a IGMPv2 Group-
             * Specific Query */
            return ENP_BAD_HEADER; 
 8026b64:	00bff804 	movi	r2,-32
 8026b68:	00003e06 	br	8026c64 <igmp_validate+0x2c8>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 8026b6c:	e0bffa17 	ldw	r2,-24(fp)
 8026b70:	10fc002c 	andhi	r3,r2,61440
 8026b74:	00b80034 	movhi	r2,57344
 8026b78:	1880041e 	bne	r3,r2,8026b8c <igmp_validate+0x1f0>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
 8026b7c:	e0bffd17 	ldw	r2,-12(fp)
 8026b80:	10c00117 	ldw	r3,4(r2)
 8026b84:	d0a08317 	ldw	r2,-32244(gp)
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 8026b88:	1880071e 	bne	r3,r2,8026ba8 <igmp_validate+0x20c>
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
 8026b8c:	008201b4 	movhi	r2,2054
 8026b90:	10baef17 	ldw	r2,-5188(r2)
 8026b94:	10c00044 	addi	r3,r2,1
 8026b98:	008201b4 	movhi	r2,2054
 8026b9c:	10faef15 	stw	r3,-5188(r2)
            /* caller will free received packet */
            return ENP_BAD_HEADER;
 8026ba0:	00bff804 	movi	r2,-32
 8026ba4:	00002f06 	br	8026c64 <igmp_validate+0x2c8>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
 8026ba8:	e0bffbc3 	ldbu	r2,-17(fp)
 8026bac:	108004a0 	cmpeqi	r2,r2,18
 8026bb0:	1000031e 	bne	r2,zero,8026bc0 <igmp_validate+0x224>
 8026bb4:	e0bffbc3 	ldbu	r2,-17(fp)
 8026bb8:	10800598 	cmpnei	r2,r2,22
 8026bbc:	1000101e 	bne	r2,zero,8026c00 <igmp_validate+0x264>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
 8026bc0:	e0bffd17 	ldw	r2,-12(fp)
 8026bc4:	10c00117 	ldw	r3,4(r2)
 8026bc8:	e0bfff17 	ldw	r2,-4(fp)
 8026bcc:	10800417 	ldw	r2,16(r2)
 8026bd0:	1880041e 	bne	r3,r2,8026be4 <igmp_validate+0x248>
          (!IN_MULTICAST(mcgrp_addr)))
 8026bd4:	e0bffa17 	ldw	r2,-24(fp)
 8026bd8:	10fc002c 	andhi	r3,r2,61440
      if ((igmp->igmp_group != pip->ip_dest) ||
 8026bdc:	00b80034 	movhi	r2,57344
 8026be0:	18800726 	beq	r3,r2,8026c00 <igmp_validate+0x264>
      {
         ++igmpstats.igmp_bad_reports_rcvd;
 8026be4:	008201b4 	movhi	r2,2054
 8026be8:	10baed17 	ldw	r2,-5196(r2)
 8026bec:	10c00044 	addi	r3,r2,1
 8026bf0:	008201b4 	movhi	r2,2054
 8026bf4:	10faed15 	stw	r3,-5196(r2)
         return ENP_BAD_HEADER;    
 8026bf8:	00bff804 	movi	r2,-32
 8026bfc:	00001906 	br	8026c64 <igmp_validate+0x2c8>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
 8026c00:	e0bffbc3 	ldbu	r2,-17(fp)
 8026c04:	108005e0 	cmpeqi	r2,r2,23
 8026c08:	10000a1e 	bne	r2,zero,8026c34 <igmp_validate+0x298>
 8026c0c:	e0bffbc3 	ldbu	r2,-17(fp)
 8026c10:	108005a0 	cmpeqi	r2,r2,22
 8026c14:	1000071e 	bne	r2,zero,8026c34 <igmp_validate+0x298>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
 8026c18:	e0bffbc3 	ldbu	r2,-17(fp)
 8026c1c:	10800458 	cmpnei	r2,r2,17
 8026c20:	10000f1e 	bne	r2,zero,8026c60 <igmp_validate+0x2c4>
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
 8026c24:	e0bffd17 	ldw	r2,-12(fp)
 8026c28:	10800043 	ldbu	r2,1(r2)
 8026c2c:	10803fcc 	andi	r2,r2,255
 8026c30:	10000b26 	beq	r2,zero,8026c60 <igmp_validate+0x2c4>
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
 8026c34:	e13fff17 	ldw	r4,-4(fp)
 8026c38:	8044a600 	call	8044a60 <igmpv2_chk4_rtr_alert_opt>
 8026c3c:	10803fcc 	andi	r2,r2,255
 8026c40:	1000071e 	bne	r2,zero,8026c60 <igmp_validate+0x2c4>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
 8026c44:	008201b4 	movhi	r2,2054
 8026c48:	10baf217 	ldw	r2,-5176(r2)
 8026c4c:	10c00044 	addi	r3,r2,1
 8026c50:	008201b4 	movhi	r2,2054
 8026c54:	10faf215 	stw	r3,-5176(r2)
         return ENP_BAD_HEADER;
 8026c58:	00bff804 	movi	r2,-32
 8026c5c:	00000106 	br	8026c64 <igmp_validate+0x2c8>
      }
   }
#endif   

   /* validation successful */
   return IGMP_OK;
 8026c60:	0005883a 	mov	r2,zero
}
 8026c64:	e037883a 	mov	sp,fp
 8026c68:	dfc00117 	ldw	ra,4(sp)
 8026c6c:	df000017 	ldw	fp,0(sp)
 8026c70:	dec00204 	addi	sp,sp,8
 8026c74:	f800283a 	ret

08026c78 <igmp_print_stats>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
 8026c78:	defffa04 	addi	sp,sp,-24
 8026c7c:	dfc00515 	stw	ra,20(sp)
 8026c80:	df000415 	stw	fp,16(sp)
 8026c84:	df000404 	addi	fp,sp,16
 8026c88:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8026c8c:	008201b4 	movhi	r2,2054
 8026c90:	10bd1b17 	ldw	r2,-2964(r2)
 8026c94:	e0bfff15 	stw	r2,-4(fp)
 8026c98:	00003b06 	br	8026d88 <igmp_print_stats+0x110>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
                 ifp->name, 
 8026c9c:	e0bfff17 	ldw	r2,-4(fp)
 8026ca0:	10c00104 	addi	r3,r2,4
                 ifp->igmp_oper_mode, 
 8026ca4:	e0bfff17 	ldw	r2,-4(fp)
 8026ca8:	10802f03 	ldbu	r2,188(r2)
      ns_printf (pio, "%s: mode: %u [%s] ", 
 8026cac:	11003fcc 	andi	r4,r2,255
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
 8026cb0:	e0bfff17 	ldw	r2,-4(fp)
 8026cb4:	10802f03 	ldbu	r2,188(r2)
      ns_printf (pio, "%s: mode: %u [%s] ", 
 8026cb8:	10803fcc 	andi	r2,r2,255
 8026cbc:	10800058 	cmpnei	r2,r2,1
 8026cc0:	1000031e 	bne	r2,zero,8026cd0 <igmp_print_stats+0x58>
 8026cc4:	00820174 	movhi	r2,2053
 8026cc8:	1088b104 	addi	r2,r2,8900
 8026ccc:	00000206 	br	8026cd8 <igmp_print_stats+0x60>
 8026cd0:	00820174 	movhi	r2,2053
 8026cd4:	1088b204 	addi	r2,r2,8904
 8026cd8:	d8800015 	stw	r2,0(sp)
 8026cdc:	200f883a 	mov	r7,r4
 8026ce0:	180d883a 	mov	r6,r3
 8026ce4:	01420174 	movhi	r5,2053
 8026ce8:	2948b304 	addi	r5,r5,8908
 8026cec:	e13ffe17 	ldw	r4,-8(fp)
 8026cf0:	80281f80 	call	80281f8 <ns_printf>
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 8026cf4:	e0bfff17 	ldw	r2,-4(fp)
 8026cf8:	10802f03 	ldbu	r2,188(r2)
 8026cfc:	10803fcc 	andi	r2,r2,255
 8026d00:	10800098 	cmpnei	r2,r2,2
 8026d04:	1000191e 	bne	r2,zero,8026d6c <igmp_print_stats+0xf4>
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
                    ifp->igmpv1_rtr_present,
 8026d08:	e0bfff17 	ldw	r2,-4(fp)
 8026d0c:	10802d03 	ldbu	r2,180(r2)
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 8026d10:	11403fcc 	andi	r5,r2,255
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
 8026d14:	e0bfff17 	ldw	r2,-4(fp)
 8026d18:	10802d03 	ldbu	r2,180(r2)
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 8026d1c:	10803fcc 	andi	r2,r2,255
 8026d20:	10800058 	cmpnei	r2,r2,1
 8026d24:	1000031e 	bne	r2,zero,8026d34 <igmp_print_stats+0xbc>
 8026d28:	00820174 	movhi	r2,2053
 8026d2c:	1088b804 	addi	r2,r2,8928
 8026d30:	00000206 	br	8026d3c <igmp_print_stats+0xc4>
 8026d34:	00820174 	movhi	r2,2053
 8026d38:	1088ba04 	addi	r2,r2,8936
 8026d3c:	e0ffff17 	ldw	r3,-4(fp)
 8026d40:	18c02e17 	ldw	r3,184(r3)
 8026d44:	d120a317 	ldw	r4,-32116(gp)
 8026d48:	d9000115 	stw	r4,4(sp)
 8026d4c:	d8c00015 	stw	r3,0(sp)
 8026d50:	100f883a 	mov	r7,r2
 8026d54:	280d883a 	mov	r6,r5
 8026d58:	01420174 	movhi	r5,2053
 8026d5c:	2948bc04 	addi	r5,r5,8944
 8026d60:	e13ffe17 	ldw	r4,-8(fp)
 8026d64:	80281f80 	call	80281f8 <ns_printf>
 8026d68:	00000406 	br	8026d7c <igmp_print_stats+0x104>
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
 8026d6c:	01420174 	movhi	r5,2053
 8026d70:	2948c704 	addi	r5,r5,8988
 8026d74:	e13ffe17 	ldw	r4,-8(fp)
 8026d78:	80281f80 	call	80281f8 <ns_printf>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 8026d7c:	e0bfff17 	ldw	r2,-4(fp)
 8026d80:	10800017 	ldw	r2,0(r2)
 8026d84:	e0bfff15 	stw	r2,-4(fp)
 8026d88:	e0bfff17 	ldw	r2,-4(fp)
 8026d8c:	103fc31e 	bne	r2,zero,8026c9c <igmp_print_stats+0x24>
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
 8026d90:	008201b4 	movhi	r2,2054
 8026d94:	10bade17 	ldw	r2,-5256(r2)
 8026d98:	d0e08117 	ldw	r3,-32252(gp)
 8026d9c:	180f883a 	mov	r7,r3
 8026da0:	100d883a 	mov	r6,r2
 8026da4:	01420174 	movhi	r5,2053
 8026da8:	2948c804 	addi	r5,r5,8992
 8026dac:	e13ffe17 	ldw	r4,-8(fp)
 8026db0:	80281f80 	call	80281f8 <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
 8026db4:	008201b4 	movhi	r2,2054
 8026db8:	10badf17 	ldw	r2,-5252(r2)
 8026dbc:	100d883a 	mov	r6,r2
 8026dc0:	01420174 	movhi	r5,2053
 8026dc4:	2948d504 	addi	r5,r5,9044
 8026dc8:	e13ffe17 	ldw	r4,-8(fp)
 8026dcc:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
 8026dd0:	008201b4 	movhi	r2,2054
 8026dd4:	10bae017 	ldw	r2,-5248(r2)
 8026dd8:	100d883a 	mov	r6,r2
 8026ddc:	01420174 	movhi	r5,2053
 8026de0:	2948e604 	addi	r5,r5,9112
 8026de4:	e13ffe17 	ldw	r4,-8(fp)
 8026de8:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
 8026dec:	008201b4 	movhi	r2,2054
 8026df0:	10bae117 	ldw	r2,-5244(r2)
 8026df4:	100d883a 	mov	r6,r2
 8026df8:	01420174 	movhi	r5,2053
 8026dfc:	2948f204 	addi	r5,r5,9160
 8026e00:	e13ffe17 	ldw	r4,-8(fp)
 8026e04:	80281f80 	call	80281f8 <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
 8026e08:	008201b4 	movhi	r2,2054
 8026e0c:	10bae217 	ldw	r2,-5240(r2)
 8026e10:	100d883a 	mov	r6,r2
 8026e14:	01420174 	movhi	r5,2053
 8026e18:	29490504 	addi	r5,r5,9236
 8026e1c:	e13ffe17 	ldw	r4,-8(fp)
 8026e20:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
 8026e24:	008201b4 	movhi	r2,2054
 8026e28:	10fae317 	ldw	r3,-5236(r2)
 8026e2c:	008201b4 	movhi	r2,2054
 8026e30:	10bae417 	ldw	r2,-5232(r2)
 8026e34:	100f883a 	mov	r7,r2
 8026e38:	180d883a 	mov	r6,r3
 8026e3c:	01420174 	movhi	r5,2053
 8026e40:	29491604 	addi	r5,r5,9304
 8026e44:	e13ffe17 	ldw	r4,-8(fp)
 8026e48:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
 8026e4c:	008201b4 	movhi	r2,2054
 8026e50:	10bae517 	ldw	r2,-5228(r2)
 8026e54:	100d883a 	mov	r6,r2
 8026e58:	01420174 	movhi	r5,2053
 8026e5c:	2948f204 	addi	r5,r5,9160
 8026e60:	e13ffe17 	ldw	r4,-8(fp)
 8026e64:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
 8026e68:	008201b4 	movhi	r2,2054
 8026e6c:	10bae617 	ldw	r2,-5224(r2)
 8026e70:	100d883a 	mov	r6,r2
 8026e74:	01420174 	movhi	r5,2053
 8026e78:	29492904 	addi	r5,r5,9380
 8026e7c:	e13ffe17 	ldw	r4,-8(fp)
 8026e80:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
 8026e84:	008201b4 	movhi	r2,2054
 8026e88:	10bae717 	ldw	r2,-5220(r2)
 8026e8c:	100d883a 	mov	r6,r2
 8026e90:	01420174 	movhi	r5,2053
 8026e94:	29493a04 	addi	r5,r5,9448
 8026e98:	e13ffe17 	ldw	r4,-8(fp)
 8026e9c:	80281f80 	call	80281f8 <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
 8026ea0:	008201b4 	movhi	r2,2054
 8026ea4:	10faf517 	ldw	r3,-5164(r2)
 8026ea8:	008201b4 	movhi	r2,2054
 8026eac:	10baf617 	ldw	r2,-5160(r2)
 8026eb0:	100f883a 	mov	r7,r2
 8026eb4:	180d883a 	mov	r6,r3
 8026eb8:	01420174 	movhi	r5,2053
 8026ebc:	29494604 	addi	r5,r5,9496
 8026ec0:	e13ffe17 	ldw	r4,-8(fp)
 8026ec4:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
 8026ec8:	008201b4 	movhi	r2,2054
 8026ecc:	10baf417 	ldw	r2,-5168(r2)
 8026ed0:	100d883a 	mov	r6,r2
 8026ed4:	01420174 	movhi	r5,2053
 8026ed8:	29495904 	addi	r5,r5,9572
 8026edc:	e13ffe17 	ldw	r4,-8(fp)
 8026ee0:	80281f80 	call	80281f8 <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
 8026ee4:	008201b4 	movhi	r2,2054
 8026ee8:	10bae817 	ldw	r2,-5216(r2)
 8026eec:	100d883a 	mov	r6,r2
 8026ef0:	01420174 	movhi	r5,2053
 8026ef4:	29496504 	addi	r5,r5,9620
 8026ef8:	e13ffe17 	ldw	r4,-8(fp)
 8026efc:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
 8026f00:	008201b4 	movhi	r2,2054
 8026f04:	10bae917 	ldw	r2,-5212(r2)
 8026f08:	100d883a 	mov	r6,r2
 8026f0c:	01420174 	movhi	r5,2053
 8026f10:	29497104 	addi	r5,r5,9668
 8026f14:	e13ffe17 	ldw	r4,-8(fp)
 8026f18:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
 8026f1c:	008201b4 	movhi	r2,2054
 8026f20:	10faea17 	ldw	r3,-5208(r2)
 8026f24:	008201b4 	movhi	r2,2054
 8026f28:	10baeb17 	ldw	r2,-5204(r2)
 8026f2c:	100f883a 	mov	r7,r2
 8026f30:	180d883a 	mov	r6,r3
 8026f34:	01420174 	movhi	r5,2053
 8026f38:	29497d04 	addi	r5,r5,9716
 8026f3c:	e13ffe17 	ldw	r4,-8(fp)
 8026f40:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
 8026f44:	008201b4 	movhi	r2,2054
 8026f48:	10faec17 	ldw	r3,-5200(r2)
 8026f4c:	008201b4 	movhi	r2,2054
 8026f50:	10baed17 	ldw	r2,-5196(r2)
 8026f54:	100f883a 	mov	r7,r2
 8026f58:	180d883a 	mov	r6,r3
 8026f5c:	01420174 	movhi	r5,2053
 8026f60:	29499104 	addi	r5,r5,9796
 8026f64:	e13ffe17 	ldw	r4,-8(fp)
 8026f68:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
 8026f6c:	008201b4 	movhi	r2,2054
 8026f70:	10baef17 	ldw	r2,-5188(r2)
 8026f74:	100d883a 	mov	r6,r2
 8026f78:	01420174 	movhi	r5,2053
 8026f7c:	2949a104 	addi	r5,r5,9860
 8026f80:	e13ffe17 	ldw	r4,-8(fp)
 8026f84:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
 8026f88:	008201b4 	movhi	r2,2054
 8026f8c:	10baf017 	ldw	r2,-5184(r2)
 8026f90:	100d883a 	mov	r6,r2
 8026f94:	01420174 	movhi	r5,2053
 8026f98:	2949ae04 	addi	r5,r5,9912
 8026f9c:	e13ffe17 	ldw	r4,-8(fp)
 8026fa0:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
 8026fa4:	008201b4 	movhi	r2,2054
 8026fa8:	10baf117 	ldw	r2,-5180(r2)
 8026fac:	100d883a 	mov	r6,r2
 8026fb0:	01420174 	movhi	r5,2053
 8026fb4:	2949c104 	addi	r5,r5,9988
 8026fb8:	e13ffe17 	ldw	r4,-8(fp)
 8026fbc:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
 8026fc0:	008201b4 	movhi	r2,2054
 8026fc4:	10baf217 	ldw	r2,-5176(r2)
 8026fc8:	100d883a 	mov	r6,r2
 8026fcc:	01420174 	movhi	r5,2053
 8026fd0:	2949d204 	addi	r5,r5,10056
 8026fd4:	e13ffe17 	ldw	r4,-8(fp)
 8026fd8:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
 8026fdc:	008201b4 	movhi	r2,2054
 8026fe0:	10baee17 	ldw	r2,-5192(r2)
 8026fe4:	100d883a 	mov	r6,r2
 8026fe8:	01420174 	movhi	r5,2053
 8026fec:	2949e404 	addi	r5,r5,10128
 8026ff0:	e13ffe17 	ldw	r4,-8(fp)
 8026ff4:	80281f80 	call	80281f8 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
 8026ff8:	008201b4 	movhi	r2,2054
 8026ffc:	10baf317 	ldw	r2,-5172(r2)
 8027000:	100d883a 	mov	r6,r2
 8027004:	01420174 	movhi	r5,2053
 8027008:	2949f404 	addi	r5,r5,10192
 802700c:	e13ffe17 	ldw	r4,-8(fp)
 8027010:	80281f80 	call	80281f8 <ns_printf>
   
   return IGMP_OK;
 8027014:	0005883a 	mov	r2,zero
}
 8027018:	e037883a 	mov	sp,fp
 802701c:	dfc00117 	ldw	ra,4(sp)
 8027020:	df000017 	ldw	fp,0(sp)
 8027024:	dec00204 	addi	sp,sp,8
 8027028:	f800283a 	ret

0802702c <bsd_accept>:
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 802702c:	defff404 	addi	sp,sp,-48
 8027030:	dfc00b15 	stw	ra,44(sp)
 8027034:	df000a15 	stw	fp,40(sp)
 8027038:	df000a04 	addi	fp,sp,40
 802703c:	e13ff815 	stw	r4,-32(fp)
 8027040:	e17ff715 	stw	r5,-36(fp)
 8027044:	e1bff615 	stw	r6,-40(fp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 8027048:	e0bff817 	ldw	r2,-32(fp)
 802704c:	10bff804 	addi	r2,r2,-32
 8027050:	100490ba 	slli	r2,r2,2
 8027054:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8027058:	008201b4 	movhi	r2,2054
 802705c:	10bc1704 	addi	r2,r2,-4004
 8027060:	e0bfff15 	stw	r2,-4(fp)
 8027064:	00000606 	br	8027080 <bsd_accept+0x54>
 8027068:	e0ffff17 	ldw	r3,-4(fp)
 802706c:	e0bffe17 	ldw	r2,-8(fp)
 8027070:	18800626 	beq	r3,r2,802708c <bsd_accept+0x60>
 8027074:	e0bfff17 	ldw	r2,-4(fp)
 8027078:	10800017 	ldw	r2,0(r2)
 802707c:	e0bfff15 	stw	r2,-4(fp)
 8027080:	e0bfff17 	ldw	r2,-4(fp)
 8027084:	103ff81e 	bne	r2,zero,8027068 <bsd_accept+0x3c>
 8027088:	00000106 	br	8027090 <bsd_accept+0x64>
 802708c:	0001883a 	nop
 8027090:	e0ffff17 	ldw	r3,-4(fp)
 8027094:	e0bffe17 	ldw	r2,-8(fp)
 8027098:	18800326 	beq	r3,r2,80270a8 <bsd_accept+0x7c>
 802709c:	802c3fc0 	call	802c3fc <dtrap>
 80270a0:	00bfffc4 	movi	r2,-1
 80270a4:	00002406 	br	8027138 <bsd_accept+0x10c>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
 80270a8:	e0bff717 	ldw	r2,-36(fp)
 80270ac:	10000726 	beq	r2,zero,80270cc <bsd_accept+0xa0>
   {
      if (addrlen == 0)
 80270b0:	e0bff617 	ldw	r2,-40(fp)
 80270b4:	1000051e 	bne	r2,zero,80270cc <bsd_accept+0xa0>
      {
         so->so_error = EFAULT;
 80270b8:	e0bffe17 	ldw	r2,-8(fp)
 80270bc:	00c00384 	movi	r3,14
 80270c0:	10c00615 	stw	r3,24(r2)
         return -1;
 80270c4:	00bfffc4 	movi	r2,-1
 80270c8:	00001b06 	br	8027138 <bsd_accept+0x10c>
      }
   }

   lret = t_accept(s, &laddr, addrlen);
 80270cc:	e0bff904 	addi	r2,fp,-28
 80270d0:	e1bff617 	ldw	r6,-40(fp)
 80270d4:	100b883a 	mov	r5,r2
 80270d8:	e13ff817 	ldw	r4,-32(fp)
 80270dc:	802f4600 	call	802f460 <t_accept>
 80270e0:	e0bffd15 	stw	r2,-12(fp)
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
 80270e4:	e0bffd17 	ldw	r2,-12(fp)
 80270e8:	10bfffe0 	cmpeqi	r2,r2,-1
 80270ec:	1000111e 	bne	r2,zero,8027134 <bsd_accept+0x108>
 80270f0:	e0bff717 	ldw	r2,-36(fp)
 80270f4:	10000f26 	beq	r2,zero,8027134 <bsd_accept+0x108>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
 80270f8:	e0bff617 	ldw	r2,-40(fp)
 80270fc:	10800017 	ldw	r2,0(r2)
 8027100:	10800470 	cmpltui	r2,r2,17
 8027104:	1000031e 	bne	r2,zero,8027114 <bsd_accept+0xe8>
         *addrlen = sizeof(struct sockaddr_in);
 8027108:	e0bff617 	ldw	r2,-40(fp)
 802710c:	00c00404 	movi	r3,16
 8027110:	10c00015 	stw	r3,0(r2)
      MEMCPY(addr, &laddr, *addrlen);
 8027114:	e0bff617 	ldw	r2,-40(fp)
 8027118:	10800017 	ldw	r2,0(r2)
 802711c:	1007883a 	mov	r3,r2
 8027120:	e0bff904 	addi	r2,fp,-28
 8027124:	180d883a 	mov	r6,r3
 8027128:	100b883a 	mov	r5,r2
 802712c:	e13ff717 	ldw	r4,-36(fp)
 8027130:	8002ea40 	call	8002ea4 <memcpy>
   }

   return lret;
 8027134:	e0bffd17 	ldw	r2,-12(fp)
}
 8027138:	e037883a 	mov	sp,fp
 802713c:	dfc00117 	ldw	ra,4(sp)
 8027140:	df000017 	ldw	fp,0(sp)
 8027144:	dec00204 	addi	sp,sp,8
 8027148:	f800283a 	ret

0802714c <bsd_getpeername>:
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 802714c:	defff304 	addi	sp,sp,-52
 8027150:	dfc00c15 	stw	ra,48(sp)
 8027154:	df000b15 	stw	fp,44(sp)
 8027158:	df000b04 	addi	fp,sp,44
 802715c:	e13ff715 	stw	r4,-36(fp)
 8027160:	e17ff615 	stw	r5,-40(fp)
 8027164:	e1bff515 	stw	r6,-44(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 8027168:	e0bff717 	ldw	r2,-36(fp)
 802716c:	10bff804 	addi	r2,r2,-32
 8027170:	100490ba 	slli	r2,r2,2
 8027174:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8027178:	008201b4 	movhi	r2,2054
 802717c:	10bc1704 	addi	r2,r2,-4004
 8027180:	e0bfff15 	stw	r2,-4(fp)
 8027184:	00000606 	br	80271a0 <bsd_getpeername+0x54>
 8027188:	e0ffff17 	ldw	r3,-4(fp)
 802718c:	e0bffe17 	ldw	r2,-8(fp)
 8027190:	18800626 	beq	r3,r2,80271ac <bsd_getpeername+0x60>
 8027194:	e0bfff17 	ldw	r2,-4(fp)
 8027198:	10800017 	ldw	r2,0(r2)
 802719c:	e0bfff15 	stw	r2,-4(fp)
 80271a0:	e0bfff17 	ldw	r2,-4(fp)
 80271a4:	103ff81e 	bne	r2,zero,8027188 <bsd_getpeername+0x3c>
 80271a8:	00000106 	br	80271b0 <bsd_getpeername+0x64>
 80271ac:	0001883a 	nop
 80271b0:	e0ffff17 	ldw	r3,-4(fp)
 80271b4:	e0bffe17 	ldw	r2,-8(fp)
 80271b8:	18800326 	beq	r3,r2,80271c8 <bsd_getpeername+0x7c>
 80271bc:	802c3fc0 	call	802c3fc <dtrap>
 80271c0:	00bfffc4 	movi	r2,-1
 80271c4:	00002406 	br	8027258 <bsd_getpeername+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 80271c8:	e0bff517 	ldw	r2,-44(fp)
 80271cc:	1000051e 	bne	r2,zero,80271e4 <bsd_getpeername+0x98>
   {
      so->so_error = EFAULT;
 80271d0:	e0bffe17 	ldw	r2,-8(fp)
 80271d4:	00c00384 	movi	r3,14
 80271d8:	10c00615 	stw	r3,24(r2)
      return -1;
 80271dc:	00bfffc4 	movi	r2,-1
 80271e0:	00001d06 	br	8027258 <bsd_getpeername+0x10c>
   }
   lnamelen = *namelen;
 80271e4:	e0bff517 	ldw	r2,-44(fp)
 80271e8:	10800017 	ldw	r2,0(r2)
 80271ec:	e0bff815 	stw	r2,-32(fp)

   lret = t_getpeername(s, &lname, &lnamelen);
 80271f0:	e0fff804 	addi	r3,fp,-32
 80271f4:	e0bff904 	addi	r2,fp,-28
 80271f8:	180d883a 	mov	r6,r3
 80271fc:	100b883a 	mov	r5,r2
 8027200:	e13ff717 	ldw	r4,-36(fp)
 8027204:	802f9200 	call	802f920 <t_getpeername>
 8027208:	e0bffd15 	stw	r2,-12(fp)
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
 802720c:	e0bffd17 	ldw	r2,-12(fp)
 8027210:	10bfffe0 	cmpeqi	r2,r2,-1
 8027214:	10000f1e 	bne	r2,zero,8027254 <bsd_getpeername+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 8027218:	e0bff817 	ldw	r2,-32(fp)
 802721c:	10800470 	cmpltui	r2,r2,17
 8027220:	1000021e 	bne	r2,zero,802722c <bsd_getpeername+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
 8027224:	00800404 	movi	r2,16
 8027228:	e0bff815 	stw	r2,-32(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
 802722c:	e0bff817 	ldw	r2,-32(fp)
 8027230:	1007883a 	mov	r3,r2
 8027234:	e0bff904 	addi	r2,fp,-28
 8027238:	180d883a 	mov	r6,r3
 802723c:	100b883a 	mov	r5,r2
 8027240:	e13ff617 	ldw	r4,-40(fp)
 8027244:	8002ea40 	call	8002ea4 <memcpy>
      *namelen = lnamelen;
 8027248:	e0fff817 	ldw	r3,-32(fp)
 802724c:	e0bff517 	ldw	r2,-44(fp)
 8027250:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 8027254:	e0bffd17 	ldw	r2,-12(fp)
}
 8027258:	e037883a 	mov	sp,fp
 802725c:	dfc00117 	ldw	ra,4(sp)
 8027260:	df000017 	ldw	fp,0(sp)
 8027264:	dec00204 	addi	sp,sp,8
 8027268:	f800283a 	ret

0802726c <bsd_getsockname>:
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 802726c:	defff304 	addi	sp,sp,-52
 8027270:	dfc00c15 	stw	ra,48(sp)
 8027274:	df000b15 	stw	fp,44(sp)
 8027278:	df000b04 	addi	fp,sp,44
 802727c:	e13ff715 	stw	r4,-36(fp)
 8027280:	e17ff615 	stw	r5,-40(fp)
 8027284:	e1bff515 	stw	r6,-44(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 8027288:	e0bff717 	ldw	r2,-36(fp)
 802728c:	10bff804 	addi	r2,r2,-32
 8027290:	100490ba 	slli	r2,r2,2
 8027294:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8027298:	008201b4 	movhi	r2,2054
 802729c:	10bc1704 	addi	r2,r2,-4004
 80272a0:	e0bfff15 	stw	r2,-4(fp)
 80272a4:	00000606 	br	80272c0 <bsd_getsockname+0x54>
 80272a8:	e0ffff17 	ldw	r3,-4(fp)
 80272ac:	e0bffe17 	ldw	r2,-8(fp)
 80272b0:	18800626 	beq	r3,r2,80272cc <bsd_getsockname+0x60>
 80272b4:	e0bfff17 	ldw	r2,-4(fp)
 80272b8:	10800017 	ldw	r2,0(r2)
 80272bc:	e0bfff15 	stw	r2,-4(fp)
 80272c0:	e0bfff17 	ldw	r2,-4(fp)
 80272c4:	103ff81e 	bne	r2,zero,80272a8 <bsd_getsockname+0x3c>
 80272c8:	00000106 	br	80272d0 <bsd_getsockname+0x64>
 80272cc:	0001883a 	nop
 80272d0:	e0ffff17 	ldw	r3,-4(fp)
 80272d4:	e0bffe17 	ldw	r2,-8(fp)
 80272d8:	18800326 	beq	r3,r2,80272e8 <bsd_getsockname+0x7c>
 80272dc:	802c3fc0 	call	802c3fc <dtrap>
 80272e0:	00bfffc4 	movi	r2,-1
 80272e4:	00002406 	br	8027378 <bsd_getsockname+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 80272e8:	e0bff517 	ldw	r2,-44(fp)
 80272ec:	1000051e 	bne	r2,zero,8027304 <bsd_getsockname+0x98>
   {
      so->so_error = EFAULT;
 80272f0:	e0bffe17 	ldw	r2,-8(fp)
 80272f4:	00c00384 	movi	r3,14
 80272f8:	10c00615 	stw	r3,24(r2)
      return -1;
 80272fc:	00bfffc4 	movi	r2,-1
 8027300:	00001d06 	br	8027378 <bsd_getsockname+0x10c>
   }
   lnamelen = *namelen;
 8027304:	e0bff517 	ldw	r2,-44(fp)
 8027308:	10800017 	ldw	r2,0(r2)
 802730c:	e0bff815 	stw	r2,-32(fp)

   lret = t_getsockname(s, &lname, &lnamelen);
 8027310:	e0fff804 	addi	r3,fp,-32
 8027314:	e0bff904 	addi	r2,fp,-28
 8027318:	180d883a 	mov	r6,r3
 802731c:	100b883a 	mov	r5,r2
 8027320:	e13ff717 	ldw	r4,-36(fp)
 8027324:	802f9640 	call	802f964 <t_getsockname>
 8027328:	e0bffd15 	stw	r2,-12(fp)
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
 802732c:	e0bffd17 	ldw	r2,-12(fp)
 8027330:	10bfffe0 	cmpeqi	r2,r2,-1
 8027334:	10000f1e 	bne	r2,zero,8027374 <bsd_getsockname+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 8027338:	e0bff817 	ldw	r2,-32(fp)
 802733c:	10800470 	cmpltui	r2,r2,17
 8027340:	1000021e 	bne	r2,zero,802734c <bsd_getsockname+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
 8027344:	00800404 	movi	r2,16
 8027348:	e0bff815 	stw	r2,-32(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
 802734c:	e0bff817 	ldw	r2,-32(fp)
 8027350:	1007883a 	mov	r3,r2
 8027354:	e0bff904 	addi	r2,fp,-28
 8027358:	180d883a 	mov	r6,r3
 802735c:	100b883a 	mov	r5,r2
 8027360:	e13ff617 	ldw	r4,-40(fp)
 8027364:	8002ea40 	call	8002ea4 <memcpy>
      *namelen = lnamelen;
 8027368:	e0fff817 	ldw	r3,-32(fp)
 802736c:	e0bff517 	ldw	r2,-44(fp)
 8027370:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 8027374:	e0bffd17 	ldw	r2,-12(fp)
}
 8027378:	e037883a 	mov	sp,fp
 802737c:	dfc00117 	ldw	ra,4(sp)
 8027380:	df000017 	ldw	fp,0(sp)
 8027384:	dec00204 	addi	sp,sp,8
 8027388:	f800283a 	ret

0802738c <bsd_i_sockoptlen>:
 * RETURNS: minimum length of the named socket option, in bytes
 */
int 
bsd_i_sockoptlen(int level,
                 int name)
{
 802738c:	defffd04 	addi	sp,sp,-12
 8027390:	df000215 	stw	fp,8(sp)
 8027394:	df000204 	addi	fp,sp,8
 8027398:	e13fff15 	stw	r4,-4(fp)
 802739c:	e17ffe15 	stw	r5,-8(fp)
   USE_ARG(level);

   switch (name)
 80273a0:	e0bffe17 	ldw	r2,-8(fp)
 80273a4:	108405c8 	cmpgei	r2,r2,4119
 80273a8:	10006a1e 	bne	r2,zero,8027554 <bsd_i_sockoptlen+0x1c8>
 80273ac:	e0bffe17 	ldw	r2,-8(fp)
 80273b0:	10840048 	cmpgei	r2,r2,4097
 80273b4:	10000d1e 	bne	r2,zero,80273ec <bsd_i_sockoptlen+0x60>
 80273b8:	e0bffe17 	ldw	r2,-8(fp)
 80273bc:	10804020 	cmpeqi	r2,r2,256
 80273c0:	10005a1e 	bne	r2,zero,802752c <bsd_i_sockoptlen+0x1a0>
 80273c4:	e0bffe17 	ldw	r2,-8(fp)
 80273c8:	10804048 	cmpgei	r2,r2,257
 80273cc:	1000611e 	bne	r2,zero,8027554 <bsd_i_sockoptlen+0x1c8>
 80273d0:	e0bffe17 	ldw	r2,-8(fp)
 80273d4:	10800848 	cmpgei	r2,r2,33
 80273d8:	10004a1e 	bne	r2,zero,8027504 <bsd_i_sockoptlen+0x178>
 80273dc:	e0bffe17 	ldw	r2,-8(fp)
 80273e0:	108000c8 	cmpgei	r2,r2,3
 80273e4:	1000201e 	bne	r2,zero,8027468 <bsd_i_sockoptlen+0xdc>
 80273e8:	00005a06 	br	8027554 <bsd_i_sockoptlen+0x1c8>
 80273ec:	e0bffe17 	ldw	r2,-8(fp)
 80273f0:	10bbffc4 	addi	r2,r2,-4097
 80273f4:	10c005a8 	cmpgeui	r3,r2,22
 80273f8:	1800561e 	bne	r3,zero,8027554 <bsd_i_sockoptlen+0x1c8>
 80273fc:	100690ba 	slli	r3,r2,2
 8027400:	008200b4 	movhi	r2,2050
 8027404:	1885883a 	add	r2,r3,r2
 8027408:	109d0417 	ldw	r2,29712(r2)
 802740c:	1000683a 	jmp	r2
 8027410:	0802752c 	andhi	zero,at,2516
 8027414:	0802752c 	andhi	zero,at,2516
 8027418:	08027554 	ori	zero,at,2517
 802741c:	08027554 	ori	zero,at,2517
 8027420:	08027524 	muli	zero,at,2516
 8027424:	08027524 	muli	zero,at,2516
 8027428:	0802752c 	andhi	zero,at,2516
 802742c:	0802752c 	andhi	zero,at,2516
 8027430:	08027554 	ori	zero,at,2517
 8027434:	08027554 	ori	zero,at,2517
 8027438:	08027554 	ori	zero,at,2517
 802743c:	08027554 	ori	zero,at,2517
 8027440:	08027554 	ori	zero,at,2517
 8027444:	08027554 	ori	zero,at,2517
 8027448:	08027554 	ori	zero,at,2517
 802744c:	08027554 	ori	zero,at,2517
 8027450:	08027554 	ori	zero,at,2517
 8027454:	08027554 	ori	zero,at,2517
 8027458:	08027554 	ori	zero,at,2517
 802745c:	08027514 	ori	zero,at,2516
 8027460:	08027514 	ori	zero,at,2516
 8027464:	0802752c 	andhi	zero,at,2516
 8027468:	e0bffe17 	ldw	r2,-8(fp)
 802746c:	10bfff44 	addi	r2,r2,-3
 8027470:	10c007a8 	cmpgeui	r3,r2,30
 8027474:	1800371e 	bne	r3,zero,8027554 <bsd_i_sockoptlen+0x1c8>
 8027478:	100690ba 	slli	r3,r2,2
 802747c:	008200b4 	movhi	r2,2050
 8027480:	1885883a 	add	r2,r3,r2
 8027484:	109d2317 	ldw	r2,29836(r2)
 8027488:	1000683a 	jmp	r2
 802748c:	0802754c 	andi	zero,at,2517
 8027490:	0802752c 	andhi	zero,at,2516
 8027494:	08027554 	ori	zero,at,2517
 8027498:	08027554 	ori	zero,at,2517
 802749c:	08027554 	ori	zero,at,2517
 80274a0:	0802752c 	andhi	zero,at,2516
 80274a4:	08027534 	orhi	zero,at,2516
 80274a8:	0802753c 	xorhi	zero,at,2516
 80274ac:	0802753c 	xorhi	zero,at,2516
 80274b0:	08027544 	addi	zero,at,2517
 80274b4:	08027544 	addi	zero,at,2517
 80274b8:	08027554 	ori	zero,at,2517
 80274bc:	08027554 	ori	zero,at,2517
 80274c0:	0802752c 	andhi	zero,at,2516
 80274c4:	08027554 	ori	zero,at,2517
 80274c8:	08027554 	ori	zero,at,2517
 80274cc:	08027554 	ori	zero,at,2517
 80274d0:	08027554 	ori	zero,at,2517
 80274d4:	08027554 	ori	zero,at,2517
 80274d8:	08027554 	ori	zero,at,2517
 80274dc:	08027554 	ori	zero,at,2517
 80274e0:	08027554 	ori	zero,at,2517
 80274e4:	08027554 	ori	zero,at,2517
 80274e8:	08027554 	ori	zero,at,2517
 80274ec:	08027554 	ori	zero,at,2517
 80274f0:	08027554 	ori	zero,at,2517
 80274f4:	08027554 	ori	zero,at,2517
 80274f8:	08027554 	ori	zero,at,2517
 80274fc:	08027554 	ori	zero,at,2517
 8027500:	0802752c 	andhi	zero,at,2516
 8027504:	e0bffe17 	ldw	r2,-8(fp)
 8027508:	10802020 	cmpeqi	r2,r2,128
 802750c:	1000031e 	bne	r2,zero,802751c <bsd_i_sockoptlen+0x190>
 8027510:	00001006 	br	8027554 <bsd_i_sockoptlen+0x1c8>
   {
   case SO_BIO:
   case SO_NBIO:
      /* these don't use an option value */
      return 0;
 8027514:	0005883a 	mov	r2,zero
 8027518:	00000f06 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   case SO_LINGER:
      /* this option is a struct linger */
      return sizeof(struct linger);
 802751c:	00800204 	movi	r2,8
 8027520:	00000d06 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
 8027524:	00800084 	movi	r2,2
 8027528:	00000b06 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   case SO_RCVBUF:
   case SO_NONBLOCK:
   case SO_ERROR:
   case SO_TYPE:
      /* these options are type int */
      return sizeof(int);
 802752c:	00800104 	movi	r2,4
 8027530:	00000906 	br	8027558 <bsd_i_sockoptlen+0x1cc>
      return sizeof(int (*)());
#endif /* TCP_ZEROCOPY */
#ifdef IP_MULTICAST
   case IP_MULTICAST_IF:
      /* this option is type ip_addr */
      return sizeof(ip_addr);
 8027534:	00800104 	movi	r2,4
 8027538:	00000706 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
 802753c:	00800044 	movi	r2,1
 8027540:	00000506 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      /* these options are struct ip_mreq */
      return sizeof(struct ip_mreq);
 8027544:	00800204 	movi	r2,8
 8027548:	00000306 	br	8027558 <bsd_i_sockoptlen+0x1cc>
 * IP_TTL_OPT == SOREUSEADDR. This causes a build erro
 * due to duplicate cases. Removing this one. They both
 * return the same value (sizeof(int)).
 */
  // case IP_TTL_OPT:
      return sizeof(int);
 802754c:	00800104 	movi	r2,4
 8027550:	00000106 	br	8027558 <bsd_i_sockoptlen+0x1cc>
   default:
      /* we don't know what type these options are */
      return 0;
 8027554:	0005883a 	mov	r2,zero
   }
   
}
 8027558:	e037883a 	mov	sp,fp
 802755c:	df000017 	ldw	fp,0(sp)
 8027560:	dec00104 	addi	sp,sp,4
 8027564:	f800283a 	ret

08027568 <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 8027568:	defff504 	addi	sp,sp,-44
 802756c:	dfc00a15 	stw	ra,40(sp)
 8027570:	df000915 	stw	fp,36(sp)
 8027574:	df000904 	addi	fp,sp,36
 8027578:	e13ffb15 	stw	r4,-20(fp)
 802757c:	e17ffa15 	stw	r5,-24(fp)
 8027580:	e1bff915 	stw	r6,-28(fp)
 8027584:	e1fff815 	stw	r7,-32(fp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 8027588:	e0bffb17 	ldw	r2,-20(fp)
 802758c:	10bff804 	addi	r2,r2,-32
 8027590:	100490ba 	slli	r2,r2,2
 8027594:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8027598:	008201b4 	movhi	r2,2054
 802759c:	10bc1704 	addi	r2,r2,-4004
 80275a0:	e0bfff15 	stw	r2,-4(fp)
 80275a4:	00000606 	br	80275c0 <bsd_getsockopt+0x58>
 80275a8:	e0ffff17 	ldw	r3,-4(fp)
 80275ac:	e0bffe17 	ldw	r2,-8(fp)
 80275b0:	18800626 	beq	r3,r2,80275cc <bsd_getsockopt+0x64>
 80275b4:	e0bfff17 	ldw	r2,-4(fp)
 80275b8:	10800017 	ldw	r2,0(r2)
 80275bc:	e0bfff15 	stw	r2,-4(fp)
 80275c0:	e0bfff17 	ldw	r2,-4(fp)
 80275c4:	103ff81e 	bne	r2,zero,80275a8 <bsd_getsockopt+0x40>
 80275c8:	00000106 	br	80275d0 <bsd_getsockopt+0x68>
 80275cc:	0001883a 	nop
 80275d0:	e0ffff17 	ldw	r3,-4(fp)
 80275d4:	e0bffe17 	ldw	r2,-8(fp)
 80275d8:	18800326 	beq	r3,r2,80275e8 <bsd_getsockopt+0x80>
 80275dc:	802c3fc0 	call	802c3fc <dtrap>
 80275e0:	00bfffc4 	movi	r2,-1
 80275e4:	00001d06 	br	802765c <bsd_getsockopt+0xf4>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
 80275e8:	e17ff917 	ldw	r5,-28(fp)
 80275ec:	e13ffa17 	ldw	r4,-24(fp)
 80275f0:	802738c0 	call	802738c <bsd_i_sockoptlen>
 80275f4:	e0bffd15 	stw	r2,-12(fp)
   if ((optlen == NULL) || (*optlen < loptlen))
 80275f8:	e0800217 	ldw	r2,8(fp)
 80275fc:	10000426 	beq	r2,zero,8027610 <bsd_getsockopt+0xa8>
 8027600:	e0800217 	ldw	r2,8(fp)
 8027604:	10c00017 	ldw	r3,0(r2)
 8027608:	e0bffd17 	ldw	r2,-12(fp)
 802760c:	1880050e 	bge	r3,r2,8027624 <bsd_getsockopt+0xbc>
   {
      so->so_error = EFAULT;
 8027610:	e0bffe17 	ldw	r2,-8(fp)
 8027614:	00c00384 	movi	r3,14
 8027618:	10c00615 	stw	r3,24(r2)
      return -1;
 802761c:	00bfffc4 	movi	r2,-1
 8027620:	00000e06 	br	802765c <bsd_getsockopt+0xf4>
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
 8027624:	e0bffd17 	ldw	r2,-12(fp)
 8027628:	d8800015 	stw	r2,0(sp)
 802762c:	e1fff817 	ldw	r7,-32(fp)
 8027630:	e1bff917 	ldw	r6,-28(fp)
 8027634:	e17ffa17 	ldw	r5,-24(fp)
 8027638:	e13ffb17 	ldw	r4,-20(fp)
 802763c:	802fd480 	call	802fd48 <t_getsockopt>
 8027640:	e0bffc15 	stw	r2,-16(fp)

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
 8027644:	e0bffc17 	ldw	r2,-16(fp)
 8027648:	1000031e 	bne	r2,zero,8027658 <bsd_getsockopt+0xf0>
   {
      *optlen = loptlen;
 802764c:	e0800217 	ldw	r2,8(fp)
 8027650:	e0fffd17 	ldw	r3,-12(fp)
 8027654:	10c00015 	stw	r3,0(r2)
   }

   return e;
 8027658:	e0bffc17 	ldw	r2,-16(fp)
   
}
 802765c:	e037883a 	mov	sp,fp
 8027660:	dfc00117 	ldw	ra,4(sp)
 8027664:	df000017 	ldw	fp,0(sp)
 8027668:	dec00204 	addi	sp,sp,8
 802766c:	f800283a 	ret

08027670 <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
 8027670:	defff504 	addi	sp,sp,-44
 8027674:	dfc00815 	stw	ra,32(sp)
 8027678:	df000715 	stw	fp,28(sp)
 802767c:	df000704 	addi	fp,sp,28
 8027680:	e13ffb15 	stw	r4,-20(fp)
 8027684:	e17ffa15 	stw	r5,-24(fp)
 8027688:	e1800215 	stw	r6,8(fp)
 802768c:	e1c00315 	stw	r7,12(fp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
 8027690:	e0bffb17 	ldw	r2,-20(fp)
 8027694:	10bff804 	addi	r2,r2,-32
 8027698:	100490ba 	slli	r2,r2,2
 802769c:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 80276a0:	008201b4 	movhi	r2,2054
 80276a4:	10bc1704 	addi	r2,r2,-4004
 80276a8:	e0bfff15 	stw	r2,-4(fp)
 80276ac:	00000606 	br	80276c8 <bsd_ioctl+0x58>
 80276b0:	e0ffff17 	ldw	r3,-4(fp)
 80276b4:	e0bffe17 	ldw	r2,-8(fp)
 80276b8:	18800626 	beq	r3,r2,80276d4 <bsd_ioctl+0x64>
 80276bc:	e0bfff17 	ldw	r2,-4(fp)
 80276c0:	10800017 	ldw	r2,0(r2)
 80276c4:	e0bfff15 	stw	r2,-4(fp)
 80276c8:	e0bfff17 	ldw	r2,-4(fp)
 80276cc:	103ff81e 	bne	r2,zero,80276b0 <bsd_ioctl+0x40>
 80276d0:	00000106 	br	80276d8 <bsd_ioctl+0x68>
 80276d4:	0001883a 	nop
 80276d8:	e0ffff17 	ldw	r3,-4(fp)
 80276dc:	e0bffe17 	ldw	r2,-8(fp)
 80276e0:	18800326 	beq	r3,r2,80276f0 <bsd_ioctl+0x80>
 80276e4:	802c3fc0 	call	802c3fc <dtrap>
 80276e8:	00bfffc4 	movi	r2,-1
 80276ec:	00001706 	br	802774c <bsd_ioctl+0xdc>

   va_start(argptr, request);
 80276f0:	e0800204 	addi	r2,fp,8
 80276f4:	e0bffd15 	stw	r2,-12(fp)

   switch (request)
 80276f8:	e0bffa17 	ldw	r2,-24(fp)
 80276fc:	10840598 	cmpnei	r2,r2,4118
 8027700:	10000e1e 	bne	r2,zero,802773c <bsd_ioctl+0xcc>
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 8027704:	e0bffd17 	ldw	r2,-12(fp)
 8027708:	10c00104 	addi	r3,r2,4
 802770c:	e0fffd15 	stw	r3,-12(fp)
 8027710:	10800017 	ldw	r2,0(r2)
 8027714:	e0bffc15 	stw	r2,-16(fp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 8027718:	e0fffc04 	addi	r3,fp,-16
 802771c:	00800104 	movi	r2,4
 8027720:	d8800015 	stw	r2,0(sp)
 8027724:	180f883a 	mov	r7,r3
 8027728:	01840584 	movi	r6,4118
 802772c:	017fffc4 	movi	r5,-1
 8027730:	e13ffb17 	ldw	r4,-20(fp)
 8027734:	802fb880 	call	802fb88 <t_setsockopt>
 8027738:	00000406 	br	802774c <bsd_ioctl+0xdc>
   default:
      so->so_error = EINVAL;
 802773c:	e0bffe17 	ldw	r2,-8(fp)
 8027740:	00c00584 	movi	r3,22
 8027744:	10c00615 	stw	r3,24(r2)
      return -1;
 8027748:	00bfffc4 	movi	r2,-1
   }
}
 802774c:	e037883a 	mov	sp,fp
 8027750:	dfc00117 	ldw	ra,4(sp)
 8027754:	df000017 	ldw	fp,0(sp)
 8027758:	dec00404 	addi	sp,sp,16
 802775c:	f800283a 	ret

08027760 <bsd_inet_ntoa>:
 * RETURNS: pointer to null-terminated string containing dotted-decimal
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
 8027760:	defffd04 	addi	sp,sp,-12
 8027764:	dfc00215 	stw	ra,8(sp)
 8027768:	df000115 	stw	fp,4(sp)
 802776c:	df000104 	addi	fp,sp,4
 8027770:	e13fff15 	stw	r4,-4(fp)
   return print_ipad(in.s_addr);
 8027774:	e0bfff17 	ldw	r2,-4(fp)
 8027778:	1009883a 	mov	r4,r2
 802777c:	8027e240 	call	8027e24 <print_ipad>
}
 8027780:	e037883a 	mov	sp,fp
 8027784:	dfc00117 	ldw	ra,4(sp)
 8027788:	df000017 	ldw	fp,0(sp)
 802778c:	dec00204 	addi	sp,sp,8
 8027790:	f800283a 	ret

08027794 <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 8027794:	defff004 	addi	sp,sp,-64
 8027798:	dfc00f15 	stw	ra,60(sp)
 802779c:	df000e15 	stw	fp,56(sp)
 80277a0:	df000e04 	addi	fp,sp,56
 80277a4:	e13ff715 	stw	r4,-36(fp)
 80277a8:	e17ff615 	stw	r5,-40(fp)
 80277ac:	e1bff515 	stw	r6,-44(fp)
 80277b0:	e1fff415 	stw	r7,-48(fp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
 80277b4:	e03ff815 	stw	zero,-32(fp)
   int lret;

   so = LONG2SO(s);
 80277b8:	e0bff717 	ldw	r2,-36(fp)
 80277bc:	10bff804 	addi	r2,r2,-32
 80277c0:	100490ba 	slli	r2,r2,2
 80277c4:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 80277c8:	008201b4 	movhi	r2,2054
 80277cc:	10bc1704 	addi	r2,r2,-4004
 80277d0:	e0bfff15 	stw	r2,-4(fp)
 80277d4:	00000606 	br	80277f0 <bsd_recvfrom+0x5c>
 80277d8:	e0ffff17 	ldw	r3,-4(fp)
 80277dc:	e0bffe17 	ldw	r2,-8(fp)
 80277e0:	18800626 	beq	r3,r2,80277fc <bsd_recvfrom+0x68>
 80277e4:	e0bfff17 	ldw	r2,-4(fp)
 80277e8:	10800017 	ldw	r2,0(r2)
 80277ec:	e0bfff15 	stw	r2,-4(fp)
 80277f0:	e0bfff17 	ldw	r2,-4(fp)
 80277f4:	103ff81e 	bne	r2,zero,80277d8 <bsd_recvfrom+0x44>
 80277f8:	00000106 	br	8027800 <bsd_recvfrom+0x6c>
 80277fc:	0001883a 	nop
 8027800:	e0ffff17 	ldw	r3,-4(fp)
 8027804:	e0bffe17 	ldw	r2,-8(fp)
 8027808:	18800326 	beq	r3,r2,8027818 <bsd_recvfrom+0x84>
 802780c:	802c3fc0 	call	802c3fc <dtrap>
 8027810:	00bfffc4 	movi	r2,-1
 8027814:	00002b06 	br	80278c4 <bsd_recvfrom+0x130>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
 8027818:	e0800217 	ldw	r2,8(fp)
 802781c:	10000a26 	beq	r2,zero,8027848 <bsd_recvfrom+0xb4>
   {
      if (fromlen == NULL)
 8027820:	e0800317 	ldw	r2,12(fp)
 8027824:	1000051e 	bne	r2,zero,802783c <bsd_recvfrom+0xa8>
      {
         so->so_error = EFAULT;
 8027828:	e0bffe17 	ldw	r2,-8(fp)
 802782c:	00c00384 	movi	r3,14
 8027830:	10c00615 	stw	r3,24(r2)
         return -1;
 8027834:	00bfffc4 	movi	r2,-1
 8027838:	00002206 	br	80278c4 <bsd_recvfrom+0x130>
      }
      lfromlen = *fromlen;
 802783c:	e0800317 	ldw	r2,12(fp)
 8027840:	10800017 	ldw	r2,0(r2)
 8027844:	e0bff815 	stw	r2,-32(fp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
 8027848:	e0bff804 	addi	r2,fp,-32
 802784c:	d8800115 	stw	r2,4(sp)
 8027850:	e0bff904 	addi	r2,fp,-28
 8027854:	d8800015 	stw	r2,0(sp)
 8027858:	e1fff417 	ldw	r7,-48(fp)
 802785c:	e1bff517 	ldw	r6,-44(fp)
 8027860:	e17ff617 	ldw	r5,-40(fp)
 8027864:	e13ff717 	ldw	r4,-36(fp)
 8027868:	802ffac0 	call	802ffac <t_recvfrom>
 802786c:	e0bffd15 	stw	r2,-12(fp)
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
 8027870:	e0bffd17 	ldw	r2,-12(fp)
 8027874:	10bfffe0 	cmpeqi	r2,r2,-1
 8027878:	1000111e 	bne	r2,zero,80278c0 <bsd_recvfrom+0x12c>
 802787c:	e0800217 	ldw	r2,8(fp)
 8027880:	10000f26 	beq	r2,zero,80278c0 <bsd_recvfrom+0x12c>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
 8027884:	e0bff817 	ldw	r2,-32(fp)
 8027888:	10800470 	cmpltui	r2,r2,17
 802788c:	1000021e 	bne	r2,zero,8027898 <bsd_recvfrom+0x104>
         lfromlen = sizeof(struct sockaddr_in);
 8027890:	00800404 	movi	r2,16
 8027894:	e0bff815 	stw	r2,-32(fp)
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
 8027898:	e0bff817 	ldw	r2,-32(fp)
 802789c:	1007883a 	mov	r3,r2
 80278a0:	e0bff904 	addi	r2,fp,-28
 80278a4:	180d883a 	mov	r6,r3
 80278a8:	100b883a 	mov	r5,r2
 80278ac:	e1000217 	ldw	r4,8(fp)
 80278b0:	8002ea40 	call	8002ea4 <memcpy>
      *fromlen = lfromlen;
 80278b4:	e0fff817 	ldw	r3,-32(fp)
 80278b8:	e0800317 	ldw	r2,12(fp)
 80278bc:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 80278c0:	e0bffd17 	ldw	r2,-12(fp)
}
 80278c4:	e037883a 	mov	sp,fp
 80278c8:	dfc00117 	ldw	ra,4(sp)
 80278cc:	df000017 	ldw	fp,0(sp)
 80278d0:	dec00204 	addi	sp,sp,8
 80278d4:	f800283a 	ret

080278d8 <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
 80278d8:	defff804 	addi	sp,sp,-32
 80278dc:	dfc00715 	stw	ra,28(sp)
 80278e0:	df000615 	stw	fp,24(sp)
 80278e4:	df000604 	addi	fp,sp,24
 80278e8:	e13ffd15 	stw	r4,-12(fp)
 80278ec:	e17ffc15 	stw	r5,-16(fp)
 80278f0:	e1bffb15 	stw	r6,-20(fp)
 80278f4:	e1fffa15 	stw	r7,-24(fp)
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
 80278f8:	e0800217 	ldw	r2,8(fp)
 80278fc:	10004c26 	beq	r2,zero,8027a30 <bsd_select+0x158>
       * million (i.e. any number of microseconds up to one second).
       * So we scale tv_usec from microseconds to something reasonable
       * based on TPS, multiply it by TPS, then scale it the rest of
       * the way to ticks-per-second.
       */
      tps = TPS;
 8027900:	00801904 	movi	r2,100
 8027904:	e0bffe15 	stw	r2,-8(fp)
      if (tps >= 1000)
 8027908:	e0bffe17 	ldw	r2,-8(fp)
 802790c:	1080fa10 	cmplti	r2,r2,1000
 8027910:	10000e1e 	bne	r2,zero,802794c <bsd_select+0x74>
      {
         ltv = (((timeout->tv_usec + 50) / 100) * tps) / 10000;
 8027914:	e0800217 	ldw	r2,8(fp)
 8027918:	10800217 	ldw	r2,8(r2)
 802791c:	10800c84 	addi	r2,r2,50
 8027920:	01401904 	movi	r5,100
 8027924:	1009883a 	mov	r4,r2
 8027928:	800e13c0 	call	800e13c <__divsi3>
 802792c:	1007883a 	mov	r3,r2
 8027930:	e0bffe17 	ldw	r2,-8(fp)
 8027934:	1885383a 	mul	r2,r3,r2
 8027938:	0149c404 	movi	r5,10000
 802793c:	1009883a 	mov	r4,r2
 8027940:	800e13c0 	call	800e13c <__divsi3>
 8027944:	e0bfff15 	stw	r2,-4(fp)
 8027948:	00003106 	br	8027a10 <bsd_select+0x138>
      }
      else if (tps >= 100)
 802794c:	e0bffe17 	ldw	r2,-8(fp)
 8027950:	10801910 	cmplti	r2,r2,100
 8027954:	10000e1e 	bne	r2,zero,8027990 <bsd_select+0xb8>
      {
         ltv = (((timeout->tv_usec + 500) / 1000) * tps) / 1000;
 8027958:	e0800217 	ldw	r2,8(fp)
 802795c:	10800217 	ldw	r2,8(r2)
 8027960:	10807d04 	addi	r2,r2,500
 8027964:	0140fa04 	movi	r5,1000
 8027968:	1009883a 	mov	r4,r2
 802796c:	800e13c0 	call	800e13c <__divsi3>
 8027970:	1007883a 	mov	r3,r2
 8027974:	e0bffe17 	ldw	r2,-8(fp)
 8027978:	1885383a 	mul	r2,r3,r2
 802797c:	0140fa04 	movi	r5,1000
 8027980:	1009883a 	mov	r4,r2
 8027984:	800e13c0 	call	800e13c <__divsi3>
 8027988:	e0bfff15 	stw	r2,-4(fp)
 802798c:	00002006 	br	8027a10 <bsd_select+0x138>
      }
      else if (tps >= 10)
 8027990:	e0bffe17 	ldw	r2,-8(fp)
 8027994:	10800290 	cmplti	r2,r2,10
 8027998:	10000e1e 	bne	r2,zero,80279d4 <bsd_select+0xfc>
      {
         ltv = (((timeout->tv_usec + 5000) / 10000) * tps) / 100;
 802799c:	e0800217 	ldw	r2,8(fp)
 80279a0:	10800217 	ldw	r2,8(r2)
 80279a4:	1084e204 	addi	r2,r2,5000
 80279a8:	0149c404 	movi	r5,10000
 80279ac:	1009883a 	mov	r4,r2
 80279b0:	800e13c0 	call	800e13c <__divsi3>
 80279b4:	1007883a 	mov	r3,r2
 80279b8:	e0bffe17 	ldw	r2,-8(fp)
 80279bc:	1885383a 	mul	r2,r3,r2
 80279c0:	01401904 	movi	r5,100
 80279c4:	1009883a 	mov	r4,r2
 80279c8:	800e13c0 	call	800e13c <__divsi3>
 80279cc:	e0bfff15 	stw	r2,-4(fp)
 80279d0:	00000f06 	br	8027a10 <bsd_select+0x138>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
 80279d4:	e0800217 	ldw	r2,8(fp)
 80279d8:	10c00217 	ldw	r3,8(r2)
 80279dc:	00b0d414 	movui	r2,50000
 80279e0:	1885883a 	add	r2,r3,r2
 80279e4:	014000b4 	movhi	r5,2
 80279e8:	2961a804 	addi	r5,r5,-31072
 80279ec:	1009883a 	mov	r4,r2
 80279f0:	800e13c0 	call	800e13c <__divsi3>
 80279f4:	1007883a 	mov	r3,r2
 80279f8:	e0bffe17 	ldw	r2,-8(fp)
 80279fc:	1885383a 	mul	r2,r3,r2
 8027a00:	01400284 	movi	r5,10
 8027a04:	1009883a 	mov	r4,r2
 8027a08:	800e13c0 	call	800e13c <__divsi3>
 8027a0c:	e0bfff15 	stw	r2,-4(fp)
      }
      ltv += (timeout->tv_sec * TPS);
 8027a10:	e1000217 	ldw	r4,8(fp)
 8027a14:	20800017 	ldw	r2,0(r4)
 8027a18:	20c00117 	ldw	r3,4(r4)
 8027a1c:	10c01924 	muli	r3,r2,100
 8027a20:	e0bfff17 	ldw	r2,-4(fp)
 8027a24:	1885883a 	add	r2,r3,r2
 8027a28:	e0bfff15 	stw	r2,-4(fp)
 8027a2c:	00000206 	br	8027a38 <bsd_select+0x160>
   }
   else {
      /*
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
 8027a30:	00bfffc4 	movi	r2,-1
 8027a34:	e0bfff15 	stw	r2,-4(fp)
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
 8027a38:	e1ffff17 	ldw	r7,-4(fp)
 8027a3c:	e1bffa17 	ldw	r6,-24(fp)
 8027a40:	e17ffb17 	ldw	r5,-20(fp)
 8027a44:	e13ffc17 	ldw	r4,-16(fp)
 8027a48:	8033c080 	call	8033c08 <t_select>
}
 8027a4c:	e037883a 	mov	sp,fp
 8027a50:	dfc00117 	ldw	ra,4(sp)
 8027a54:	df000017 	ldw	fp,0(sp)
 8027a58:	dec00204 	addi	sp,sp,8
 8027a5c:	f800283a 	ret

08027a60 <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 8027a60:	defff704 	addi	sp,sp,-36
 8027a64:	dfc00815 	stw	ra,32(sp)
 8027a68:	df000715 	stw	fp,28(sp)
 8027a6c:	df000704 	addi	fp,sp,28
 8027a70:	e13ffd15 	stw	r4,-12(fp)
 8027a74:	e17ffc15 	stw	r5,-16(fp)
 8027a78:	e1bffb15 	stw	r6,-20(fp)
 8027a7c:	e1fffa15 	stw	r7,-24(fp)
   struct socket * so;

   so = LONG2SO(s);
 8027a80:	e0bffd17 	ldw	r2,-12(fp)
 8027a84:	10bff804 	addi	r2,r2,-32
 8027a88:	100490ba 	slli	r2,r2,2
 8027a8c:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 8027a90:	008201b4 	movhi	r2,2054
 8027a94:	10bc1704 	addi	r2,r2,-4004
 8027a98:	e0bfff15 	stw	r2,-4(fp)
 8027a9c:	00000606 	br	8027ab8 <bsd_setsockopt+0x58>
 8027aa0:	e0ffff17 	ldw	r3,-4(fp)
 8027aa4:	e0bffe17 	ldw	r2,-8(fp)
 8027aa8:	18800626 	beq	r3,r2,8027ac4 <bsd_setsockopt+0x64>
 8027aac:	e0bfff17 	ldw	r2,-4(fp)
 8027ab0:	10800017 	ldw	r2,0(r2)
 8027ab4:	e0bfff15 	stw	r2,-4(fp)
 8027ab8:	e0bfff17 	ldw	r2,-4(fp)
 8027abc:	103ff81e 	bne	r2,zero,8027aa0 <bsd_setsockopt+0x40>
 8027ac0:	00000106 	br	8027ac8 <bsd_setsockopt+0x68>
 8027ac4:	0001883a 	nop
 8027ac8:	e0ffff17 	ldw	r3,-4(fp)
 8027acc:	e0bffe17 	ldw	r2,-8(fp)
 8027ad0:	18800326 	beq	r3,r2,8027ae0 <bsd_setsockopt+0x80>
 8027ad4:	802c3fc0 	call	802c3fc <dtrap>
 8027ad8:	00bfffc4 	movi	r2,-1
 8027adc:	00001206 	br	8027b28 <bsd_setsockopt+0xc8>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
 8027ae0:	e17ffb17 	ldw	r5,-20(fp)
 8027ae4:	e13ffc17 	ldw	r4,-16(fp)
 8027ae8:	802738c0 	call	802738c <bsd_i_sockoptlen>
 8027aec:	1007883a 	mov	r3,r2
 8027af0:	e0800217 	ldw	r2,8(fp)
 8027af4:	10c0050e 	bge	r2,r3,8027b0c <bsd_setsockopt+0xac>
   {
      so->so_error = EFAULT;
 8027af8:	e0bffe17 	ldw	r2,-8(fp)
 8027afc:	00c00384 	movi	r3,14
 8027b00:	10c00615 	stw	r3,24(r2)
      return -1;
 8027b04:	00bfffc4 	movi	r2,-1
 8027b08:	00000706 	br	8027b28 <bsd_setsockopt+0xc8>
   }

   return t_setsockopt(s, level, name, opt, optlen);
 8027b0c:	e0800217 	ldw	r2,8(fp)
 8027b10:	d8800015 	stw	r2,0(sp)
 8027b14:	e1fffa17 	ldw	r7,-24(fp)
 8027b18:	e1bffb17 	ldw	r6,-20(fp)
 8027b1c:	e17ffc17 	ldw	r5,-16(fp)
 8027b20:	e13ffd17 	ldw	r4,-12(fp)
 8027b24:	802fb880 	call	802fb88 <t_setsockopt>
}
 8027b28:	e037883a 	mov	sp,fp
 8027b2c:	dfc00117 	ldw	ra,4(sp)
 8027b30:	df000017 	ldw	fp,0(sp)
 8027b34:	dec00204 	addi	sp,sp,8
 8027b38:	f800283a 	ret

08027b3c <ccksum>:
 * be done in 16-bit chunks.
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
 8027b3c:	defffa04 	addi	sp,sp,-24
 8027b40:	df000515 	stw	fp,20(sp)
 8027b44:	df000504 	addi	fp,sp,20
 8027b48:	e13ffc15 	stw	r4,-16(fp)
 8027b4c:	e17ffb15 	stw	r5,-20(fp)
   unsigned short *addr = (unsigned short *)ptr;
 8027b50:	e0bffc17 	ldw	r2,-16(fp)
 8027b54:	e0bfff15 	stw	r2,-4(fp)
   unsigned long sum = 0;
 8027b58:	e03ffe15 	stw	zero,-8(fp)
   int count = (int)words;
 8027b5c:	e0bffb17 	ldw	r2,-20(fp)
 8027b60:	e0bffd15 	stw	r2,-12(fp)

   while (--count >= 0)
 8027b64:	00000806 	br	8027b88 <ccksum+0x4c>
   {
      /*  This is the inner loop */
      sum += *addr++;
 8027b68:	e0bfff17 	ldw	r2,-4(fp)
 8027b6c:	10c00084 	addi	r3,r2,2
 8027b70:	e0ffff15 	stw	r3,-4(fp)
 8027b74:	1080000b 	ldhu	r2,0(r2)
 8027b78:	10bfffcc 	andi	r2,r2,65535
 8027b7c:	e0fffe17 	ldw	r3,-8(fp)
 8027b80:	1885883a 	add	r2,r3,r2
 8027b84:	e0bffe15 	stw	r2,-8(fp)
   while (--count >= 0)
 8027b88:	e0bffd17 	ldw	r2,-12(fp)
 8027b8c:	10bfffc4 	addi	r2,r2,-1
 8027b90:	e0bffd15 	stw	r2,-12(fp)
 8027b94:	e0bffd17 	ldw	r2,-12(fp)
 8027b98:	103ff30e 	bge	r2,zero,8027b68 <ccksum+0x2c>
   }

   /*  Fold 32-bit sum to 16 bits */
   sum = (sum & 0xffff) + (sum >> 16);
 8027b9c:	e0bffe17 	ldw	r2,-8(fp)
 8027ba0:	10ffffcc 	andi	r3,r2,65535
 8027ba4:	e0bffe17 	ldw	r2,-8(fp)
 8027ba8:	1004d43a 	srli	r2,r2,16
 8027bac:	1885883a 	add	r2,r3,r2
 8027bb0:	e0bffe15 	stw	r2,-8(fp)
   sum = (sum & 0xffff) + (sum >> 16);
 8027bb4:	e0bffe17 	ldw	r2,-8(fp)
 8027bb8:	10ffffcc 	andi	r3,r2,65535
 8027bbc:	e0bffe17 	ldw	r2,-8(fp)
 8027bc0:	1004d43a 	srli	r2,r2,16
 8027bc4:	1885883a 	add	r2,r3,r2
 8027bc8:	e0bffe15 	stw	r2,-8(fp)

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
 8027bcc:	e0bffe17 	ldw	r2,-8(fp)
}
 8027bd0:	e037883a 	mov	sp,fp
 8027bd4:	df000017 	ldw	fp,0(sp)
 8027bd8:	dec00104 	addi	sp,sp,4
 8027bdc:	f800283a 	ret

08027be0 <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
 8027be0:	defffc04 	addi	sp,sp,-16
 8027be4:	dfc00315 	stw	ra,12(sp)
 8027be8:	df000215 	stw	fp,8(sp)
 8027bec:	df000204 	addi	fp,sp,8
 8027bf0:	e13fff15 	stw	r4,-4(fp)
 8027bf4:	e17ffe15 	stw	r5,-8(fp)
   switch (cksum_select)
 8027bf8:	d0a02d17 	ldw	r2,-32588(gp)
 8027bfc:	108000a0 	cmpeqi	r2,r2,2
 8027c00:	1000041e 	bne	r2,zero,8027c14 <cksum+0x34>
   {
      case 1:
      default:
         return (ccksum(ptr, count));
 8027c04:	e17ffe17 	ldw	r5,-8(fp)
 8027c08:	e13fff17 	ldw	r4,-4(fp)
 8027c0c:	8027b3c0 	call	8027b3c <ccksum>
 8027c10:	00000306 	br	8027c20 <cksum+0x40>
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
 8027c14:	e17ffe17 	ldw	r5,-8(fp)
 8027c18:	e13fff17 	ldw	r4,-4(fp)
 8027c1c:	802c2680 	call	802c268 <asm_cksum>
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
 8027c20:	e037883a 	mov	sp,fp
 8027c24:	dfc00117 	ldw	ra,4(sp)
 8027c28:	df000017 	ldw	fp,0(sp)
 8027c2c:	dec00204 	addi	sp,sp,8
 8027c30:	f800283a 	ret

08027c34 <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
 8027c34:	defffe04 	addi	sp,sp,-8
 8027c38:	dfc00115 	stw	ra,4(sp)
 8027c3c:	df000015 	stw	fp,0(sp)
 8027c40:	d839883a 	mov	fp,sp
   dtrap();
 8027c44:	802c3fc0 	call	802c3fc <dtrap>
   return 0;
 8027c48:	0005883a 	mov	r2,zero
}
 8027c4c:	e037883a 	mov	sp,fp
 8027c50:	dfc00117 	ldw	ra,4(sp)
 8027c54:	df000017 	ldw	fp,0(sp)
 8027c58:	dec00204 	addi	sp,sp,8
 8027c5c:	f800283a 	ret

08027c60 <nextarg>:
 * RETURNS:  pointer to next arg in string 
 */

char *   
nextarg(char * argp)
{
 8027c60:	defffe04 	addi	sp,sp,-8
 8027c64:	df000115 	stw	fp,4(sp)
 8027c68:	df000104 	addi	fp,sp,4
 8027c6c:	e13fff15 	stw	r4,-4(fp)
   while (*argp > ' ')argp++; /* scan past current arg */
 8027c70:	00000306 	br	8027c80 <nextarg+0x20>
 8027c74:	e0bfff17 	ldw	r2,-4(fp)
 8027c78:	10800044 	addi	r2,r2,1
 8027c7c:	e0bfff15 	stw	r2,-4(fp)
 8027c80:	e0bfff17 	ldw	r2,-4(fp)
 8027c84:	10800003 	ldbu	r2,0(r2)
 8027c88:	10803fcc 	andi	r2,r2,255
 8027c8c:	1080201c 	xori	r2,r2,128
 8027c90:	10bfe004 	addi	r2,r2,-128
 8027c94:	10800848 	cmpgei	r2,r2,33
 8027c98:	103ff61e 	bne	r2,zero,8027c74 <nextarg+0x14>
      while (*argp == ' ')argp++;   /* scan past spaces */
 8027c9c:	00000306 	br	8027cac <nextarg+0x4c>
 8027ca0:	e0bfff17 	ldw	r2,-4(fp)
 8027ca4:	10800044 	addi	r2,r2,1
 8027ca8:	e0bfff15 	stw	r2,-4(fp)
 8027cac:	e0bfff17 	ldw	r2,-4(fp)
 8027cb0:	10800003 	ldbu	r2,0(r2)
 8027cb4:	10803fcc 	andi	r2,r2,255
 8027cb8:	1080201c 	xori	r2,r2,128
 8027cbc:	10bfe004 	addi	r2,r2,-128
 8027cc0:	10800820 	cmpeqi	r2,r2,32
 8027cc4:	103ff61e 	bne	r2,zero,8027ca0 <nextarg+0x40>
      return (argp);
 8027cc8:	e0bfff17 	ldw	r2,-4(fp)
}
 8027ccc:	e037883a 	mov	sp,fp
 8027cd0:	df000017 	ldw	fp,0(sp)
 8027cd4:	dec00104 	addi	sp,sp,4
 8027cd8:	f800283a 	ret

08027cdc <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
 8027cdc:	defff804 	addi	sp,sp,-32
 8027ce0:	dfc00715 	stw	ra,28(sp)
 8027ce4:	df000615 	stw	fp,24(sp)
 8027ce8:	df000604 	addi	fp,sp,24
 8027cec:	e13ffc15 	stw	r4,-16(fp)
 8027cf0:	e17ffb15 	stw	r5,-20(fp)
 8027cf4:	e1bffa15 	stw	r6,-24(fp)
   u_char * data  =  (u_char *)buffer;
 8027cf8:	e0bffb17 	ldw	r2,-20(fp)
 8027cfc:	e0bfff15 	stw	r2,-4(fp)
   unsigned int count;
   char  c;

   while (len)
 8027d00:	00003f06 	br	8027e00 <hexdump+0x124>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 8027d04:	e03ffe15 	stw	zero,-8(fp)
 8027d08:	00000d06 	br	8027d40 <hexdump+0x64>
         ns_printf(pio, "%02x ", *(data + count));
 8027d0c:	e0ffff17 	ldw	r3,-4(fp)
 8027d10:	e0bffe17 	ldw	r2,-8(fp)
 8027d14:	1885883a 	add	r2,r3,r2
 8027d18:	10800003 	ldbu	r2,0(r2)
 8027d1c:	10803fcc 	andi	r2,r2,255
 8027d20:	100d883a 	mov	r6,r2
 8027d24:	01420174 	movhi	r5,2053
 8027d28:	294a0404 	addi	r5,r5,10256
 8027d2c:	e13ffc17 	ldw	r4,-16(fp)
 8027d30:	80281f80 	call	80281f8 <ns_printf>
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 8027d34:	e0bffe17 	ldw	r2,-8(fp)
 8027d38:	10800044 	addi	r2,r2,1
 8027d3c:	e0bffe15 	stw	r2,-8(fp)
 8027d40:	e0bffe17 	ldw	r2,-8(fp)
 8027d44:	10800428 	cmpgeui	r2,r2,16
 8027d48:	1000031e 	bne	r2,zero,8027d58 <hexdump+0x7c>
 8027d4c:	e0fffe17 	ldw	r3,-8(fp)
 8027d50:	e0bffa17 	ldw	r2,-24(fp)
 8027d54:	18bfed36 	bltu	r3,r2,8027d0c <hexdump+0x30>
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 8027d58:	e03ffe15 	stw	zero,-8(fp)
 8027d5c:	00001606 	br	8027db8 <hexdump+0xdc>
      {
         c = *(data + count);
 8027d60:	e0ffff17 	ldw	r3,-4(fp)
 8027d64:	e0bffe17 	ldw	r2,-8(fp)
 8027d68:	1885883a 	add	r2,r3,r2
 8027d6c:	10800003 	ldbu	r2,0(r2)
 8027d70:	e0bffdc5 	stb	r2,-9(fp)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
 8027d74:	e0bffdc7 	ldb	r2,-9(fp)
 8027d78:	10800810 	cmplti	r2,r2,32
 8027d7c:	1000051e 	bne	r2,zero,8027d94 <hexdump+0xb8>
 8027d80:	e0bffdc7 	ldb	r2,-9(fp)
 8027d84:	10801fe0 	cmpeqi	r2,r2,127
 8027d88:	1000021e 	bne	r2,zero,8027d94 <hexdump+0xb8>
 8027d8c:	e0bffdc7 	ldb	r2,-9(fp)
 8027d90:	00000106 	br	8027d98 <hexdump+0xbc>
 8027d94:	00800b84 	movi	r2,46
 8027d98:	100d883a 	mov	r6,r2
 8027d9c:	01420174 	movhi	r5,2053
 8027da0:	294a0604 	addi	r5,r5,10264
 8027da4:	e13ffc17 	ldw	r4,-16(fp)
 8027da8:	80281f80 	call	80281f8 <ns_printf>
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 8027dac:	e0bffe17 	ldw	r2,-8(fp)
 8027db0:	10800044 	addi	r2,r2,1
 8027db4:	e0bffe15 	stw	r2,-8(fp)
 8027db8:	e0bffe17 	ldw	r2,-8(fp)
 8027dbc:	10800428 	cmpgeui	r2,r2,16
 8027dc0:	1000031e 	bne	r2,zero,8027dd0 <hexdump+0xf4>
 8027dc4:	e0fffe17 	ldw	r3,-8(fp)
 8027dc8:	e0bffa17 	ldw	r2,-24(fp)
 8027dcc:	18bfe436 	bltu	r3,r2,8027d60 <hexdump+0x84>
      }
      ns_printf(pio,"\n");
 8027dd0:	01420174 	movhi	r5,2053
 8027dd4:	294a0704 	addi	r5,r5,10268
 8027dd8:	e13ffc17 	ldw	r4,-16(fp)
 8027ddc:	80281f80 	call	80281f8 <ns_printf>
      len -= count;
 8027de0:	e0fffa17 	ldw	r3,-24(fp)
 8027de4:	e0bffe17 	ldw	r2,-8(fp)
 8027de8:	1885c83a 	sub	r2,r3,r2
 8027dec:	e0bffa15 	stw	r2,-24(fp)
      data += count;
 8027df0:	e0ffff17 	ldw	r3,-4(fp)
 8027df4:	e0bffe17 	ldw	r2,-8(fp)
 8027df8:	1885883a 	add	r2,r3,r2
 8027dfc:	e0bfff15 	stw	r2,-4(fp)
   while (len)
 8027e00:	e0bffa17 	ldw	r2,-24(fp)
 8027e04:	103fbf1e 	bne	r2,zero,8027d04 <hexdump+0x28>
   }
}
 8027e08:	0001883a 	nop
 8027e0c:	0001883a 	nop
 8027e10:	e037883a 	mov	sp,fp
 8027e14:	dfc00117 	ldw	ra,4(sp)
 8027e18:	df000017 	ldw	fp,0(sp)
 8027e1c:	dec00204 	addi	sp,sp,8
 8027e20:	f800283a 	ret

08027e24 <print_ipad>:

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 8027e24:	defffa04 	addi	sp,sp,-24
 8027e28:	dfc00515 	stw	ra,20(sp)
 8027e2c:	df000415 	stw	fp,16(sp)
 8027e30:	df000404 	addi	fp,sp,16
 8027e34:	e13ffe15 	stw	r4,-8(fp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
 8027e38:	e0bffe17 	ldw	r2,-8(fp)
 8027e3c:	e0bfff15 	stw	r2,-4(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
    ip.ip.ipchar[0],
 8027e40:	e0bfff03 	ldbu	r2,-4(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 8027e44:	11003fcc 	andi	r4,r2,255
    ip.ip.ipchar[1],
 8027e48:	e0bfff43 	ldbu	r2,-3(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 8027e4c:	11403fcc 	andi	r5,r2,255
    ip.ip.ipchar[2],
 8027e50:	e0bfff83 	ldbu	r2,-2(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 8027e54:	10803fcc 	andi	r2,r2,255
    ip.ip.ipchar[3]);
 8027e58:	e0ffffc3 	ldbu	r3,-1(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 8027e5c:	18c03fcc 	andi	r3,r3,255
 8027e60:	d8c00115 	stw	r3,4(sp)
 8027e64:	d8800015 	stw	r2,0(sp)
 8027e68:	280f883a 	mov	r7,r5
 8027e6c:	200d883a 	mov	r6,r4
 8027e70:	01420174 	movhi	r5,2053
 8027e74:	294a0804 	addi	r5,r5,10272
 8027e78:	010201b4 	movhi	r4,2054
 8027e7c:	213afb84 	addi	r4,r4,-5138
 8027e80:	804a34c0 	call	804a34c <sprintf>

   return ipreturn;
 8027e84:	008201b4 	movhi	r2,2054
 8027e88:	10bafb84 	addi	r2,r2,-5138
}
 8027e8c:	e037883a 	mov	sp,fp
 8027e90:	dfc00117 	ldw	ra,4(sp)
 8027e94:	df000017 	ldw	fp,0(sp)
 8027e98:	dec00204 	addi	sp,sp,8
 8027e9c:	f800283a 	ret

08027ea0 <print_uptime>:

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
 8027ea0:	defff804 	addi	sp,sp,-32
 8027ea4:	dfc00715 	stw	ra,28(sp)
 8027ea8:	df000615 	stw	fp,24(sp)
 8027eac:	df000604 	addi	fp,sp,24
 8027eb0:	e13ffc15 	stw	r4,-16(fp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
 8027eb4:	e0bffc17 	ldw	r2,-16(fp)
 8027eb8:	01401904 	movi	r5,100
 8027ebc:	1009883a 	mov	r4,r2
 8027ec0:	800e2300 	call	800e230 <__udivsi3>
 8027ec4:	e0bffc15 	stw	r2,-16(fp)
   seconds = (unsigned)(timetick%60);
 8027ec8:	e0bffc17 	ldw	r2,-16(fp)
 8027ecc:	01400f04 	movi	r5,60
 8027ed0:	1009883a 	mov	r4,r2
 8027ed4:	800e2940 	call	800e294 <__umodsi3>
 8027ed8:	e0bfff15 	stw	r2,-4(fp)
   timetick = timetick/60;    /* turn timetick into minutes */
 8027edc:	e0bffc17 	ldw	r2,-16(fp)
 8027ee0:	01400f04 	movi	r5,60
 8027ee4:	1009883a 	mov	r4,r2
 8027ee8:	800e2300 	call	800e230 <__udivsi3>
 8027eec:	e0bffc15 	stw	r2,-16(fp)
   minutes = (unsigned)(timetick%60);
 8027ef0:	e0bffc17 	ldw	r2,-16(fp)
 8027ef4:	01400f04 	movi	r5,60
 8027ef8:	1009883a 	mov	r4,r2
 8027efc:	800e2940 	call	800e294 <__umodsi3>
 8027f00:	e0bffe15 	stw	r2,-8(fp)
   timetick = timetick/60;    /* turn timetick into hours */
 8027f04:	e0bffc17 	ldw	r2,-16(fp)
 8027f08:	01400f04 	movi	r5,60
 8027f0c:	1009883a 	mov	r4,r2
 8027f10:	800e2300 	call	800e230 <__udivsi3>
 8027f14:	e0bffc15 	stw	r2,-16(fp)
   hours = (unsigned)(timetick%24);
 8027f18:	e0bffc17 	ldw	r2,-16(fp)
 8027f1c:	01400604 	movi	r5,24
 8027f20:	1009883a 	mov	r4,r2
 8027f24:	800e2940 	call	800e294 <__umodsi3>
 8027f28:	e0bffd15 	stw	r2,-12(fp)
   timetick = timetick/24;    /* turn timetick into days */
 8027f2c:	e0bffc17 	ldw	r2,-16(fp)
 8027f30:	01400604 	movi	r5,24
 8027f34:	1009883a 	mov	r4,r2
 8027f38:	800e2300 	call	800e230 <__udivsi3>
 8027f3c:	e0bffc15 	stw	r2,-16(fp)

   if (timetick)  /* Is there a whole number of days? */
 8027f40:	e0bffc17 	ldw	r2,-16(fp)
 8027f44:	10000c26 	beq	r2,zero,8027f78 <print_uptime+0xd8>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
 8027f48:	e0bfff17 	ldw	r2,-4(fp)
 8027f4c:	d8800115 	stw	r2,4(sp)
 8027f50:	e0bffe17 	ldw	r2,-8(fp)
 8027f54:	d8800015 	stw	r2,0(sp)
 8027f58:	e1fffd17 	ldw	r7,-12(fp)
 8027f5c:	e1bffc17 	ldw	r6,-16(fp)
 8027f60:	01420174 	movhi	r5,2053
 8027f64:	294a0b04 	addi	r5,r5,10284
 8027f68:	01020174 	movhi	r4,2053
 8027f6c:	211ab804 	addi	r4,r4,27360
 8027f70:	804a34c0 	call	804a34c <sprintf>
 8027f74:	00001306 	br	8027fc4 <print_uptime+0x124>
    timetick, hours, minutes, seconds);
   else if (hours)
 8027f78:	e0bffd17 	ldw	r2,-12(fp)
 8027f7c:	10000a26 	beq	r2,zero,8027fa8 <print_uptime+0x108>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
 8027f80:	e0bfff17 	ldw	r2,-4(fp)
 8027f84:	d8800015 	stw	r2,0(sp)
 8027f88:	e1fffe17 	ldw	r7,-8(fp)
 8027f8c:	e1bffd17 	ldw	r6,-12(fp)
 8027f90:	01420174 	movhi	r5,2053
 8027f94:	294a1104 	addi	r5,r5,10308
 8027f98:	01020174 	movhi	r4,2053
 8027f9c:	211ab804 	addi	r4,r4,27360
 8027fa0:	804a34c0 	call	804a34c <sprintf>
 8027fa4:	00000706 	br	8027fc4 <print_uptime+0x124>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
 8027fa8:	e1ffff17 	ldw	r7,-4(fp)
 8027fac:	e1bffe17 	ldw	r6,-8(fp)
 8027fb0:	01420174 	movhi	r5,2053
 8027fb4:	294a1604 	addi	r5,r5,10328
 8027fb8:	01020174 	movhi	r4,2053
 8027fbc:	211ab804 	addi	r4,r4,27360
 8027fc0:	804a34c0 	call	804a34c <sprintf>
   return tistring;
 8027fc4:	00820174 	movhi	r2,2053
 8027fc8:	109ab804 	addi	r2,r2,27360
}
 8027fcc:	e037883a 	mov	sp,fp
 8027fd0:	dfc00117 	ldw	ra,4(sp)
 8027fd4:	df000017 	ldw	fp,0(sp)
 8027fd8:	dec00204 	addi	sp,sp,8
 8027fdc:	f800283a 	ret

08027fe0 <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
 8027fe0:	defffd04 	addi	sp,sp,-12
 8027fe4:	dfc00215 	stw	ra,8(sp)
 8027fe8:	df000115 	stw	fp,4(sp)
 8027fec:	df000104 	addi	fp,sp,4
 8027ff0:	e13fff15 	stw	r4,-4(fp)
   dprintf("panic: %s\n", msg);
 8027ff4:	e17fff17 	ldw	r5,-4(fp)
 8027ff8:	01020174 	movhi	r4,2053
 8027ffc:	210a1b04 	addi	r4,r4,10348
 8028000:	800325c0 	call	800325c <printf>
   dtrap();                   /* try to hook debugger */
 8028004:	802c3fc0 	call	802c3fc <dtrap>
   netexit(1);                /* try to clean up */
 8028008:	01000044 	movi	r4,1
 802800c:	8042ad00 	call	8042ad0 <netexit>
}
 8028010:	0001883a 	nop
 8028014:	e037883a 	mov	sp,fp
 8028018:	dfc00117 	ldw	ra,4(sp)
 802801c:	df000017 	ldw	fp,0(sp)
 8028020:	dec00204 	addi	sp,sp,8
 8028024:	f800283a 	ret

08028028 <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
 8028028:	defffb04 	addi	sp,sp,-20
 802802c:	df000415 	stw	fp,16(sp)
 8028030:	df000404 	addi	fp,sp,16
 8028034:	e13ffd15 	stw	r4,-12(fp)
 8028038:	2805883a 	mov	r2,r5
 802803c:	e0bffc05 	stb	r2,-16(fp)
   int   i;
   char *   out   =  eth_prt_buf;
 8028040:	008201b4 	movhi	r2,2054
 8028044:	10baf704 	addi	r2,r2,-5156
 8028048:	e0bffe15 	stw	r2,-8(fp)

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
 802804c:	e03fff15 	stw	zero,-4(fp)
 8028050:	00003f06 	br	8028150 <print_eth+0x128>
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 8028054:	e0bffd17 	ldw	r2,-12(fp)
 8028058:	10800003 	ldbu	r2,0(r2)
 802805c:	10803fcc 	andi	r2,r2,255
 8028060:	1004d13a 	srli	r2,r2,4
 8028064:	10800c04 	addi	r2,r2,48
 8028068:	1007883a 	mov	r3,r2
 802806c:	e0bffe17 	ldw	r2,-8(fp)
 8028070:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 8028074:	e0bffe17 	ldw	r2,-8(fp)
 8028078:	10800003 	ldbu	r2,0(r2)
 802807c:	10803fcc 	andi	r2,r2,255
 8028080:	1080201c 	xori	r2,r2,128
 8028084:	10bfe004 	addi	r2,r2,-128
 8028088:	10800e90 	cmplti	r2,r2,58
 802808c:	1000061e 	bne	r2,zero,80280a8 <print_eth+0x80>
         (*out) += 7;
 8028090:	e0bffe17 	ldw	r2,-8(fp)
 8028094:	10800003 	ldbu	r2,0(r2)
 8028098:	108001c4 	addi	r2,r2,7
 802809c:	1007883a 	mov	r3,r2
 80280a0:	e0bffe17 	ldw	r2,-8(fp)
 80280a4:	10c00005 	stb	r3,0(r2)
      out++;
 80280a8:	e0bffe17 	ldw	r2,-8(fp)
 80280ac:	10800044 	addi	r2,r2,1
 80280b0:	e0bffe15 	stw	r2,-8(fp)

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 80280b4:	e0bffd17 	ldw	r2,-12(fp)
 80280b8:	10800003 	ldbu	r2,0(r2)
 80280bc:	108003cc 	andi	r2,r2,15
 80280c0:	10800c04 	addi	r2,r2,48
 80280c4:	1007883a 	mov	r3,r2
 80280c8:	e0bffe17 	ldw	r2,-8(fp)
 80280cc:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 80280d0:	e0bffe17 	ldw	r2,-8(fp)
 80280d4:	10800003 	ldbu	r2,0(r2)
 80280d8:	10803fcc 	andi	r2,r2,255
 80280dc:	1080201c 	xori	r2,r2,128
 80280e0:	10bfe004 	addi	r2,r2,-128
 80280e4:	10800e90 	cmplti	r2,r2,58
 80280e8:	1000061e 	bne	r2,zero,8028104 <print_eth+0xdc>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
 80280ec:	e0bffe17 	ldw	r2,-8(fp)
 80280f0:	10800003 	ldbu	r2,0(r2)
 80280f4:	108001c4 	addi	r2,r2,7
 80280f8:	1007883a 	mov	r3,r2
 80280fc:	e0bffe17 	ldw	r2,-8(fp)
 8028100:	10c00005 	stb	r3,0(r2)
      out++;
 8028104:	e0bffe17 	ldw	r2,-8(fp)
 8028108:	10800044 	addi	r2,r2,1
 802810c:	e0bffe15 	stw	r2,-8(fp)

      /* optional spacer character */
      if (spacer && i < 5)
 8028110:	e0bffc07 	ldb	r2,-16(fp)
 8028114:	10000826 	beq	r2,zero,8028138 <print_eth+0x110>
 8028118:	e0bfff17 	ldw	r2,-4(fp)
 802811c:	10800148 	cmpgei	r2,r2,5
 8028120:	1000051e 	bne	r2,zero,8028138 <print_eth+0x110>
         *out++ = spacer;
 8028124:	e0bffe17 	ldw	r2,-8(fp)
 8028128:	10c00044 	addi	r3,r2,1
 802812c:	e0fffe15 	stw	r3,-8(fp)
 8028130:	e0fffc03 	ldbu	r3,-16(fp)
 8028134:	10c00005 	stb	r3,0(r2)
      addr++;
 8028138:	e0bffd17 	ldw	r2,-12(fp)
 802813c:	10800044 	addi	r2,r2,1
 8028140:	e0bffd15 	stw	r2,-12(fp)
   for (i = 0; i < 6; i++)
 8028144:	e0bfff17 	ldw	r2,-4(fp)
 8028148:	10800044 	addi	r2,r2,1
 802814c:	e0bfff15 	stw	r2,-4(fp)
 8028150:	e0bfff17 	ldw	r2,-4(fp)
 8028154:	10800190 	cmplti	r2,r2,6
 8028158:	103fbe1e 	bne	r2,zero,8028054 <print_eth+0x2c>
   }
   *out = 0;
 802815c:	e0bffe17 	ldw	r2,-8(fp)
 8028160:	10000005 	stb	zero,0(r2)
   return eth_prt_buf;
 8028164:	008201b4 	movhi	r2,2054
 8028168:	10baf704 	addi	r2,r2,-5156
}
 802816c:	e037883a 	mov	sp,fp
 8028170:	df000017 	ldw	fp,0(sp)
 8028174:	dec00104 	addi	sp,sp,4
 8028178:	f800283a 	ret

0802817c <uslash>:
 * RETURNS:  pointer to formatted text
 */

char *   
uslash(char * path)
{
 802817c:	defffd04 	addi	sp,sp,-12
 8028180:	df000215 	stw	fp,8(sp)
 8028184:	df000204 	addi	fp,sp,8
 8028188:	e13ffe15 	stw	r4,-8(fp)
   char *   cp;

   for (cp = path; *cp; cp++)
 802818c:	e0bffe17 	ldw	r2,-8(fp)
 8028190:	e0bfff15 	stw	r2,-4(fp)
 8028194:	00000d06 	br	80281cc <uslash+0x50>
      if (*cp == '\\')
 8028198:	e0bfff17 	ldw	r2,-4(fp)
 802819c:	10800003 	ldbu	r2,0(r2)
 80281a0:	10803fcc 	andi	r2,r2,255
 80281a4:	1080201c 	xori	r2,r2,128
 80281a8:	10bfe004 	addi	r2,r2,-128
 80281ac:	10801718 	cmpnei	r2,r2,92
 80281b0:	1000031e 	bne	r2,zero,80281c0 <uslash+0x44>
      *cp = '/';
 80281b4:	e0bfff17 	ldw	r2,-4(fp)
 80281b8:	00c00bc4 	movi	r3,47
 80281bc:	10c00005 	stb	r3,0(r2)
   for (cp = path; *cp; cp++)
 80281c0:	e0bfff17 	ldw	r2,-4(fp)
 80281c4:	10800044 	addi	r2,r2,1
 80281c8:	e0bfff15 	stw	r2,-4(fp)
 80281cc:	e0bfff17 	ldw	r2,-4(fp)
 80281d0:	10800003 	ldbu	r2,0(r2)
 80281d4:	10803fcc 	andi	r2,r2,255
 80281d8:	1080201c 	xori	r2,r2,128
 80281dc:	10bfe004 	addi	r2,r2,-128
 80281e0:	103fed1e 	bne	r2,zero,8028198 <uslash+0x1c>
   return path;
 80281e4:	e0bffe17 	ldw	r2,-8(fp)
}
 80281e8:	e037883a 	mov	sp,fp
 80281ec:	df000017 	ldw	fp,0(sp)
 80281f0:	dec00104 	addi	sp,sp,4
 80281f4:	f800283a 	ret

080281f8 <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
 80281f8:	defff304 	addi	sp,sp,-52
 80281fc:	dfc00a15 	stw	ra,40(sp)
 8028200:	df000915 	stw	fp,36(sp)
 8028204:	dc400815 	stw	r17,32(sp)
 8028208:	dc000715 	stw	r16,28(sp)
 802820c:	df000904 	addi	fp,sp,36
 8028210:	e13ff815 	stw	r4,-32(fp)
 8028214:	e17ff715 	stw	r5,-36(fp)
 8028218:	e1800215 	stw	r6,8(fp)
 802821c:	e1c00315 	stw	r7,12(fp)
   char *   outbuf=NULL;
 8028220:	e03ffc15 	stw	zero,-16(fp)
   int   ret_value   ;
   int   buf_size =  MAXIOSIZE   ;
 8028224:	00802704 	movi	r2,156
 8028228:	e0bffd15 	stw	r2,-12(fp)
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 802822c:	e0bff817 	ldw	r2,-32(fp)
 8028230:	e0bffb15 	stw	r2,-20(fp)
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
 8028234:	e0bffb17 	ldw	r2,-20(fp)
 8028238:	1000091e 	bne	r2,zero,8028260 <ns_printf+0x68>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
 802823c:	e0800204 	addi	r2,fp,8
 8028240:	e0bff915 	stw	r2,-28(fp)
      ret_value = vprintf(format,argList);
 8028244:	e0bff917 	ldw	r2,-28(fp)
 8028248:	100b883a 	mov	r5,r2
 802824c:	e13ff717 	ldw	r4,-36(fp)
 8028250:	804ca100 	call	804ca10 <vprintf>
 8028254:	e0bffa15 	stw	r2,-24(fp)
      va_end(argList);
      return ret_value;
 8028258:	e0bffa17 	ldw	r2,-24(fp)
 802825c:	00003b06 	br	802834c <ns_printf+0x154>
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
 8028260:	e0bffb17 	ldw	r2,-20(fp)
 8028264:	10800117 	ldw	r2,4(r2)
 8028268:	1000021e 	bne	r2,zero,8028274 <ns_printf+0x7c>
   {
      /* Programming mistake. Output function not set. */
      return -1;
 802826c:	00bfffc4 	movi	r2,-1
 8028270:	00003606 	br	802834c <ns_printf+0x154>

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
 8028274:	e13ff717 	ldw	r4,-36(fp)
 8028278:	8003a1c0 	call	8003a1c <strlen>
 802827c:	e0bffa15 	stw	r2,-24(fp)
   if (ret_value >= MAXIOSIZE)
 8028280:	e0bffa17 	ldw	r2,-24(fp)
 8028284:	10802710 	cmplti	r2,r2,156
 8028288:	1000041e 	bne	r2,zero,802829c <ns_printf+0xa4>
   {
      buf_size += ret_value ;
 802828c:	e0fffd17 	ldw	r3,-12(fp)
 8028290:	e0bffa17 	ldw	r2,-24(fp)
 8028294:	1885883a 	add	r2,r3,r2
 8028298:	e0bffd15 	stw	r2,-12(fp)
   }

   outbuf=(char *)npalloc(buf_size); 
 802829c:	e0bffd17 	ldw	r2,-12(fp)
 80282a0:	1009883a 	mov	r4,r2
 80282a4:	802cf5c0 	call	802cf5c <npalloc>
 80282a8:	e0bffc15 	stw	r2,-16(fp)

   if (outbuf == NULL)
 80282ac:	e0bffc17 	ldw	r2,-16(fp)
 80282b0:	1000021e 	bne	r2,zero,80282bc <ns_printf+0xc4>
   {
      return -2;
 80282b4:	00bfff84 	movi	r2,-2
 80282b8:	00002406 	br	802834c <ns_printf+0x154>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
 80282bc:	e0800204 	addi	r2,fp,8
 80282c0:	e0bff915 	stw	r2,-28(fp)
   ret_value = vsprintf(outbuf,format,argList);
 80282c4:	e0bff917 	ldw	r2,-28(fp)
 80282c8:	100d883a 	mov	r6,r2
 80282cc:	e17ff717 	ldw	r5,-36(fp)
 80282d0:	e13ffc17 	ldw	r4,-16(fp)
 80282d4:	804ca8c0 	call	804ca8c <vsprintf>
 80282d8:	e0bffa15 	stw	r2,-24(fp)
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
 80282dc:	e13ffc17 	ldw	r4,-16(fp)
 80282e0:	8003a1c0 	call	8003a1c <strlen>
 80282e4:	1007883a 	mov	r3,r2
 80282e8:	e0bffd17 	ldw	r2,-12(fp)
 80282ec:	10c0080e 	bge	r2,r3,8028310 <ns_printf+0x118>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
 80282f0:	01020174 	movhi	r4,2053
 80282f4:	210a1e04 	addi	r4,r4,10360
 80282f8:	8027fe00 	call	8027fe0 <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
 80282fc:	e0bffd17 	ldw	r2,-12(fp)
 8028300:	10bfffc4 	addi	r2,r2,-1
 8028304:	e0fffc17 	ldw	r3,-16(fp)
 8028308:	1885883a 	add	r2,r3,r2
 802830c:	10000005 	stb	zero,0(r2)
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
 8028310:	e0bffb17 	ldw	r2,-20(fp)
 8028314:	14000117 	ldw	r16,4(r2)
 8028318:	e0bffb17 	ldw	r2,-20(fp)
 802831c:	14400217 	ldw	r17,8(r2)
 8028320:	e13ffc17 	ldw	r4,-16(fp)
 8028324:	8003a1c0 	call	8003a1c <strlen>
 8028328:	100d883a 	mov	r6,r2
 802832c:	e17ffc17 	ldw	r5,-16(fp)
 8028330:	8809883a 	mov	r4,r17
 8028334:	803ee83a 	callr	r16
 8028338:	e0bffa15 	stw	r2,-24(fp)

   /* Free memory for the output string */
   npfree(outbuf); 
 802833c:	e13ffc17 	ldw	r4,-16(fp)
 8028340:	802cf900 	call	802cf90 <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
 8028344:	8028b500 	call	8028b50 <tk_yield>

   return ret_value ;
 8028348:	e0bffa17 	ldw	r2,-24(fp)
}
 802834c:	e6fffe04 	addi	sp,fp,-8
 8028350:	dfc00317 	ldw	ra,12(sp)
 8028354:	df000217 	ldw	fp,8(sp)
 8028358:	dc400117 	ldw	r17,4(sp)
 802835c:	dc000017 	ldw	r16,0(sp)
 8028360:	dec00604 	addi	sp,sp,24
 8028364:	f800283a 	ret

08028368 <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
 8028368:	defffb04 	addi	sp,sp,-20
 802836c:	dfc00415 	stw	ra,16(sp)
 8028370:	df000315 	stw	fp,12(sp)
 8028374:	df000304 	addi	fp,sp,12
 8028378:	e13fff15 	stw	r4,-4(fp)
 802837c:	e17ffe15 	stw	r5,-8(fp)
 8028380:	e1bffd15 	stw	r6,-12(fp)
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
 8028384:	e17ffe17 	ldw	r5,-8(fp)
 8028388:	01020174 	movhi	r4,2053
 802838c:	210a2504 	addi	r4,r4,10388
 8028390:	800325c0 	call	800325c <printf>
   USE_ARG(s);
   return len;
 8028394:	e0bffd17 	ldw	r2,-12(fp)
}
 8028398:	e037883a 	mov	sp,fp
 802839c:	dfc00117 	ldw	ra,4(sp)
 80283a0:	df000017 	ldw	fp,0(sp)
 80283a4:	dec00204 	addi	sp,sp,8
 80283a8:	f800283a 	ret

080283ac <con_page>:
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
 80283ac:	defffa04 	addi	sp,sp,-24
 80283b0:	dfc00515 	stw	ra,20(sp)
 80283b4:	df000415 	stw	fp,16(sp)
 80283b8:	df000404 	addi	fp,sp,16
 80283bc:	e13ffd15 	stw	r4,-12(fp)
 80283c0:	e17ffc15 	stw	r5,-16(fp)
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 80283c4:	e0bffd17 	ldw	r2,-12(fp)
 80283c8:	e0bfff15 	stw	r2,-4(fp)

   if (lines % 20 == 0)   /* Time to get user input */
 80283cc:	e0bffc17 	ldw	r2,-16(fp)
 80283d0:	01400504 	movi	r5,20
 80283d4:	1009883a 	mov	r4,r2
 80283d8:	800e1bc0 	call	800e1bc <__modsi3>
 80283dc:	1000231e 	bne	r2,zero,802846c <con_page+0xc0>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
 80283e0:	e0bfff17 	ldw	r2,-4(fp)
 80283e4:	10002126 	beq	r2,zero,802846c <con_page+0xc0>
 80283e8:	e0bfff17 	ldw	r2,-4(fp)
 80283ec:	10800317 	ldw	r2,12(r2)
 80283f0:	10001e26 	beq	r2,zero,802846c <con_page+0xc0>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
 80283f4:	01420174 	movhi	r5,2053
 80283f8:	294a2604 	addi	r5,r5,10392
 80283fc:	e13fff17 	ldw	r4,-4(fp)
 8028400:	80281f80 	call	80281f8 <ns_printf>

         do 
         {
            ch = (pio->getch)(pio->id);
 8028404:	e0bfff17 	ldw	r2,-4(fp)
 8028408:	10800317 	ldw	r2,12(r2)
 802840c:	e0ffff17 	ldw	r3,-4(fp)
 8028410:	18c00217 	ldw	r3,8(r3)
 8028414:	1809883a 	mov	r4,r3
 8028418:	103ee83a 	callr	r2
 802841c:	e0bffe15 	stw	r2,-8(fp)
            if (ch == 0)
 8028420:	e0bffe17 	ldw	r2,-8(fp)
 8028424:	1000011e 	bne	r2,zero,802842c <con_page+0x80>
               tk_yield();    /* Give timeslice to other processes */
 8028428:	8028b500 	call	8028b50 <tk_yield>
         } while (ch == 0) ;
 802842c:	e0bffe17 	ldw	r2,-8(fp)
 8028430:	103ff426 	beq	r2,zero,8028404 <con_page+0x58>

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
 8028434:	e0bffe17 	ldw	r2,-8(fp)
 8028438:	10bfffd8 	cmpnei	r2,r2,-1
 802843c:	1000021e 	bne	r2,zero,8028448 <con_page+0x9c>
            return 1 ;
 8028440:	00800044 	movi	r2,1
 8028444:	00000a06 	br	8028470 <con_page+0xc4>

         ns_printf(pio,"\n");
 8028448:	01420174 	movhi	r5,2053
 802844c:	294a0704 	addi	r5,r5,10268
 8028450:	e13fff17 	ldw	r4,-4(fp)
 8028454:	80281f80 	call	80281f8 <ns_printf>
         if (ch == 27)   /* ESC key pressed */
 8028458:	e0bffe17 	ldw	r2,-8(fp)
 802845c:	108006d8 	cmpnei	r2,r2,27
 8028460:	1000021e 	bne	r2,zero,802846c <con_page+0xc0>
            return 1 ;
 8028464:	00800044 	movi	r2,1
 8028468:	00000106 	br	8028470 <con_page+0xc4>
      }
   }
   return  0;
 802846c:	0005883a 	mov	r2,zero
}
 8028470:	e037883a 	mov	sp,fp
 8028474:	dfc00117 	ldw	ra,4(sp)
 8028478:	df000017 	ldw	fp,0(sp)
 802847c:	dec00204 	addi	sp,sp,8
 8028480:	f800283a 	ret

08028484 <parse_args>:

char **parse_args(char *buf, int argc, int *pargc_index)
{
 8028484:	defff704 	addi	sp,sp,-36
 8028488:	dfc00815 	stw	ra,32(sp)
 802848c:	df000715 	stw	fp,28(sp)
 8028490:	df000704 	addi	fp,sp,28
 8028494:	e13ffb15 	stw	r4,-20(fp)
 8028498:	e17ffa15 	stw	r5,-24(fp)
 802849c:	e1bff915 	stw	r6,-28(fp)
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
 80284a0:	e0bffb17 	ldw	r2,-20(fp)
 80284a4:	e0bffe15 	stw	r2,-8(fp)
   char **pargv = NULL;
 80284a8:	e03ffd15 	stw	zero,-12(fp)
   *pargc_index = 0;
 80284ac:	e0bff917 	ldw	r2,-28(fp)
 80284b0:	10000015 	stw	zero,0(r2)
   if (buf == NULL)
 80284b4:	e0bffb17 	ldw	r2,-20(fp)
 80284b8:	1000021e 	bne	r2,zero,80284c4 <parse_args+0x40>
   {
      return (NULL);
 80284bc:	0005883a 	mov	r2,zero
 80284c0:	00006906 	br	8028668 <parse_args+0x1e4>
   }
   len = strlen(buf);
 80284c4:	e13ffb17 	ldw	r4,-20(fp)
 80284c8:	8003a1c0 	call	8003a1c <strlen>
 80284cc:	e0bffc15 	stw	r2,-16(fp)
   if (len <= 0)
 80284d0:	e0bffc17 	ldw	r2,-16(fp)
 80284d4:	00800216 	blt	zero,r2,80284e0 <parse_args+0x5c>
   {
      return (NULL);
 80284d8:	0005883a 	mov	r2,zero
 80284dc:	00006206 	br	8028668 <parse_args+0x1e4>
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
 80284e0:	e0bffa17 	ldw	r2,-24(fp)
 80284e4:	100490ba 	slli	r2,r2,2
 80284e8:	1009883a 	mov	r4,r2
 80284ec:	802cf5c0 	call	802cf5c <npalloc>
 80284f0:	e0bffd15 	stw	r2,-12(fp)
   if (pargv == NULL)
 80284f4:	e0bffd17 	ldw	r2,-12(fp)
 80284f8:	1000051e 	bne	r2,zero,8028510 <parse_args+0x8c>
   {
      return (NULL);
 80284fc:	0005883a 	mov	r2,zero
 8028500:	00005906 	br	8028668 <parse_args+0x1e4>
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
 8028504:	e0bffe17 	ldw	r2,-8(fp)
 8028508:	10800044 	addi	r2,r2,1
 802850c:	e0bffe15 	stw	r2,-8(fp)
   while (*bp == ' ')
 8028510:	e0bffe17 	ldw	r2,-8(fp)
 8028514:	10800003 	ldbu	r2,0(r2)
 8028518:	10803fcc 	andi	r2,r2,255
 802851c:	1080201c 	xori	r2,r2,128
 8028520:	10bfe004 	addi	r2,r2,-128
 8028524:	10800820 	cmpeqi	r2,r2,32
 8028528:	103ff61e 	bne	r2,zero,8028504 <parse_args+0x80>
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 802852c:	00002e06 	br	80285e8 <parse_args+0x164>
   {
      pargv[(*pargc_index)] = bp;
 8028530:	e0bff917 	ldw	r2,-28(fp)
 8028534:	10800017 	ldw	r2,0(r2)
 8028538:	100490ba 	slli	r2,r2,2
 802853c:	e0fffd17 	ldw	r3,-12(fp)
 8028540:	1885883a 	add	r2,r3,r2
 8028544:	e0fffe17 	ldw	r3,-8(fp)
 8028548:	10c00015 	stw	r3,0(r2)
      (*pargc_index)++;
 802854c:	e0bff917 	ldw	r2,-28(fp)
 8028550:	10800017 	ldw	r2,0(r2)
 8028554:	10c00044 	addi	r3,r2,1
 8028558:	e0bff917 	ldw	r2,-28(fp)
 802855c:	10c00015 	stw	r3,0(r2)
      while (*bp != ' ' && *bp != '\0')
 8028560:	00000306 	br	8028570 <parse_args+0xec>
      {
         bp++; 
 8028564:	e0bffe17 	ldw	r2,-8(fp)
 8028568:	10800044 	addi	r2,r2,1
 802856c:	e0bffe15 	stw	r2,-8(fp)
      while (*bp != ' ' && *bp != '\0')
 8028570:	e0bffe17 	ldw	r2,-8(fp)
 8028574:	10800003 	ldbu	r2,0(r2)
 8028578:	10803fcc 	andi	r2,r2,255
 802857c:	1080201c 	xori	r2,r2,128
 8028580:	10bfe004 	addi	r2,r2,-128
 8028584:	10800820 	cmpeqi	r2,r2,32
 8028588:	10000a1e 	bne	r2,zero,80285b4 <parse_args+0x130>
 802858c:	e0bffe17 	ldw	r2,-8(fp)
 8028590:	10800003 	ldbu	r2,0(r2)
 8028594:	10803fcc 	andi	r2,r2,255
 8028598:	1080201c 	xori	r2,r2,128
 802859c:	10bfe004 	addi	r2,r2,-128
 80285a0:	103ff01e 	bne	r2,zero,8028564 <parse_args+0xe0>
      }
      while (*bp == ' ' && *bp != '\0')
 80285a4:	00000306 	br	80285b4 <parse_args+0x130>
      {
         bp++; 
 80285a8:	e0bffe17 	ldw	r2,-8(fp)
 80285ac:	10800044 	addi	r2,r2,1
 80285b0:	e0bffe15 	stw	r2,-8(fp)
      while (*bp == ' ' && *bp != '\0')
 80285b4:	e0bffe17 	ldw	r2,-8(fp)
 80285b8:	10800003 	ldbu	r2,0(r2)
 80285bc:	10803fcc 	andi	r2,r2,255
 80285c0:	1080201c 	xori	r2,r2,128
 80285c4:	10bfe004 	addi	r2,r2,-128
 80285c8:	10800818 	cmpnei	r2,r2,32
 80285cc:	1000061e 	bne	r2,zero,80285e8 <parse_args+0x164>
 80285d0:	e0bffe17 	ldw	r2,-8(fp)
 80285d4:	10800003 	ldbu	r2,0(r2)
 80285d8:	10803fcc 	andi	r2,r2,255
 80285dc:	1080201c 	xori	r2,r2,128
 80285e0:	10bfe004 	addi	r2,r2,-128
 80285e4:	103ff01e 	bne	r2,zero,80285a8 <parse_args+0x124>
   while ((*bp != '\0') && ((*pargc_index) < argc))
 80285e8:	e0bffe17 	ldw	r2,-8(fp)
 80285ec:	10800003 	ldbu	r2,0(r2)
 80285f0:	10803fcc 	andi	r2,r2,255
 80285f4:	1080201c 	xori	r2,r2,128
 80285f8:	10bfe004 	addi	r2,r2,-128
 80285fc:	10000426 	beq	r2,zero,8028610 <parse_args+0x18c>
 8028600:	e0bff917 	ldw	r2,-28(fp)
 8028604:	10c00017 	ldw	r3,0(r2)
 8028608:	e0bffa17 	ldw	r2,-24(fp)
 802860c:	18bfc816 	blt	r3,r2,8028530 <parse_args+0xac>
      }
   }
   for (i = 0; i < len; i++)
 8028610:	e03fff15 	stw	zero,-4(fp)
 8028614:	00001006 	br	8028658 <parse_args+0x1d4>
   {
      if (buf[i] == ' ')
 8028618:	e0bfff17 	ldw	r2,-4(fp)
 802861c:	e0fffb17 	ldw	r3,-20(fp)
 8028620:	1885883a 	add	r2,r3,r2
 8028624:	10800003 	ldbu	r2,0(r2)
 8028628:	10803fcc 	andi	r2,r2,255
 802862c:	1080201c 	xori	r2,r2,128
 8028630:	10bfe004 	addi	r2,r2,-128
 8028634:	10800818 	cmpnei	r2,r2,32
 8028638:	1000041e 	bne	r2,zero,802864c <parse_args+0x1c8>
         buf[i] = '\0';
 802863c:	e0bfff17 	ldw	r2,-4(fp)
 8028640:	e0fffb17 	ldw	r3,-20(fp)
 8028644:	1885883a 	add	r2,r3,r2
 8028648:	10000005 	stb	zero,0(r2)
   for (i = 0; i < len; i++)
 802864c:	e0bfff17 	ldw	r2,-4(fp)
 8028650:	10800044 	addi	r2,r2,1
 8028654:	e0bfff15 	stw	r2,-4(fp)
 8028658:	e0ffff17 	ldw	r3,-4(fp)
 802865c:	e0bffc17 	ldw	r2,-16(fp)
 8028660:	18bfed16 	blt	r3,r2,8028618 <parse_args+0x194>
   {
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
 8028664:	e0bffd17 	ldw	r2,-12(fp)
}
 8028668:	e037883a 	mov	sp,fp
 802866c:	dfc00117 	ldw	ra,4(sp)
 8028670:	df000017 	ldw	fp,0(sp)
 8028674:	dec00204 	addi	sp,sp,8
 8028678:	f800283a 	ret

0802867c <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
 802867c:	defffc04 	addi	sp,sp,-16
 8028680:	dfc00315 	stw	ra,12(sp)
 8028684:	df000215 	stw	fp,8(sp)
 8028688:	df000204 	addi	fp,sp,8
   int   i;
   int   e;

   iniche_net_ready = FALSE;
 802868c:	d0208715 	stw	zero,-32228(gp)

   e = prep_modules();
 8028690:	803c49c0 	call	803c49c <prep_modules>
 8028694:	e0bffe15 	stw	r2,-8(fp)

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 8028698:	e03fff15 	stw	zero,-4(fp)
 802869c:	00001a06 	br	8028708 <netmain+0x8c>
   {
      e = TK_NEWTASK(&nettasks[i]);
 80286a0:	e0bfff17 	ldw	r2,-4(fp)
 80286a4:	10c00624 	muli	r3,r2,24
 80286a8:	00820174 	movhi	r2,2053
 80286ac:	1097ec04 	addi	r2,r2,24496
 80286b0:	1885883a 	add	r2,r3,r2
 80286b4:	1009883a 	mov	r4,r2
 80286b8:	802c7a40 	call	802c7a4 <TK_NEWTASK>
 80286bc:	e0bffe15 	stw	r2,-8(fp)
      if (e != 0)
 80286c0:	e0bffe17 	ldw	r2,-8(fp)
 80286c4:	10000d26 	beq	r2,zero,80286fc <netmain+0x80>
      {
         dprintf("task create error\n");
 80286c8:	01020174 	movhi	r4,2053
 80286cc:	210a3804 	addi	r4,r4,10464
 80286d0:	80033800 	call	8003380 <puts>
         panic((char *)&nettasks[i].name);
 80286d4:	e0bfff17 	ldw	r2,-4(fp)
 80286d8:	10800624 	muli	r2,r2,24
 80286dc:	10c00104 	addi	r3,r2,4
 80286e0:	00820174 	movhi	r2,2053
 80286e4:	1097ec04 	addi	r2,r2,24496
 80286e8:	1885883a 	add	r2,r3,r2
 80286ec:	1009883a 	mov	r4,r2
 80286f0:	8027fe00 	call	8027fe0 <panic>
         return -1;  /* compiler warnings */
 80286f4:	00bfffc4 	movi	r2,-1
 80286f8:	00001306 	br	8028748 <netmain+0xcc>
   for (i = 0; i < num_net_tasks; i++)
 80286fc:	e0bfff17 	ldw	r2,-4(fp)
 8028700:	10800044 	addi	r2,r2,1
 8028704:	e0bfff15 	stw	r2,-4(fp)
 8028708:	d0a02e17 	ldw	r2,-32584(gp)
 802870c:	e0ffff17 	ldw	r3,-4(fp)
 8028710:	18bfe316 	blt	r3,r2,80286a0 <netmain+0x24>
      }
   }
   
   e = create_apptasks();
 8028714:	803c88c0 	call	803c88c <create_apptasks>
 8028718:	e0bffe15 	stw	r2,-8(fp)
   if (e != 0) 
 802871c:	e0bffe17 	ldw	r2,-8(fp)
 8028720:	10000826 	beq	r2,zero,8028744 <netmain+0xc8>
   {
      dprintf("task create error\n");
 8028724:	01020174 	movhi	r4,2053
 8028728:	210a3804 	addi	r4,r4,10464
 802872c:	80033800 	call	8003380 <puts>
      panic("netmain");
 8028730:	01020174 	movhi	r4,2053
 8028734:	210a3d04 	addi	r4,r4,10484
 8028738:	8027fe00 	call	8027fe0 <panic>
      return -1;  /* compiler warnings */
 802873c:	00bfffc4 	movi	r2,-1
 8028740:	00000106 	br	8028748 <netmain+0xcc>
#ifdef MAIN_TASK_IS_NET
   tk_netmain(TK_NETMAINPARM);
   panic("net task return");
   return -1;
#else
   return 0;
 8028744:	0005883a 	mov	r2,zero
#endif
#endif   /* NO_INET_STACK */
}
 8028748:	e037883a 	mov	sp,fp
 802874c:	dfc00117 	ldw	ra,4(sp)
 8028750:	df000017 	ldw	fp,0(sp)
 8028754:	dec00204 	addi	sp,sp,8
 8028758:	f800283a 	ret

0802875c <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
 802875c:	defffc04 	addi	sp,sp,-16
 8028760:	dfc00315 	stw	ra,12(sp)
 8028764:	df000215 	stw	fp,8(sp)
 8028768:	df000204 	addi	fp,sp,8
 802876c:	e13ffe15 	stw	r4,-8(fp)
   netmain_init(); /* initialize all modules */
 8028770:	803c1180 	call	803c118 <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
 8028774:	00800044 	movi	r2,1
 8028778:	d0a08715 	stw	r2,-32228(gp)

   for (;;)
   {
      TK_NETRX_BLOCK();
 802877c:	d0a0a617 	ldw	r2,-32104(gp)
 8028780:	e0ffffc4 	addi	r3,fp,-1
 8028784:	180d883a 	mov	r6,r3
 8028788:	01401904 	movi	r5,100
 802878c:	1009883a 	mov	r4,r2
 8028790:	80168c40 	call	80168c4 <OSSemPend>
 8028794:	e0bfffc3 	ldbu	r2,-1(fp)
 8028798:	10803fcc 	andi	r2,r2,255
 802879c:	10000526 	beq	r2,zero,80287b4 <tk_netmain+0x58>
 80287a0:	e0bfffc3 	ldbu	r2,-1(fp)
 80287a4:	10803fcc 	andi	r2,r2,255
 80287a8:	108002a0 	cmpeqi	r2,r2,10
 80287ac:	1000011e 	bne	r2,zero,80287b4 <tk_netmain+0x58>
 80287b0:	802c3fc0 	call	802c3fc <dtrap>
      netmain_wakes++;  /* count wakeups */
 80287b4:	d0a08517 	ldw	r2,-32236(gp)
 80287b8:	10800044 	addi	r2,r2,1
 80287bc:	d0a08515 	stw	r2,-32236(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
 80287c0:	008201b4 	movhi	r2,2054
 80287c4:	10ba1717 	ldw	r2,-6052(r2)
 80287c8:	103fec26 	beq	r2,zero,802877c <tk_netmain+0x20>
         pktdemux();
 80287cc:	80257d80 	call	80257d8 <pktdemux>
      TK_NETRX_BLOCK();
 80287d0:	003fea06 	br	802877c <tk_netmain+0x20>

080287d4 <tk_nettick>:
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
 80287d4:	defffd04 	addi	sp,sp,-12
 80287d8:	dfc00215 	stw	ra,8(sp)
 80287dc:	df000115 	stw	fp,4(sp)
 80287e0:	df000104 	addi	fp,sp,4
 80287e4:	e13fff15 	stw	r4,-4(fp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 80287e8:	00000306 	br	80287f8 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
 80287ec:	802acd00 	call	802acd0 <dhc_second>
#endif
      TK_SLEEP(1);
 80287f0:	01000084 	movi	r4,2
 80287f4:	80186cc0 	call	80186cc <OSTimeDly>
   while (!iniche_net_ready)
 80287f8:	d0a08717 	ldw	r2,-32228(gp)
 80287fc:	103ffb26 	beq	r2,zero,80287ec <tk_nettick+0x18>
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
 8028800:	01000084 	movi	r4,2
 8028804:	80186cc0 	call	80186cc <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
 8028808:	d0a08617 	ldw	r2,-32232(gp)
 802880c:	10800044 	addi	r2,r2,1
 8028810:	d0a08615 	stw	r2,-32232(gp)
      inet_timer();  /* let various timeouts occur */
 8028814:	803c4f00 	call	803c4f0 <inet_timer>
      TK_SLEEP(SYS_SHORT_SLEEP);
 8028818:	003ff906 	br	8028800 <tk_nettick+0x2c>

0802881c <TK_OSTimeDly>:
u_char   TK_OSTaskQuery(void);



void TK_OSTimeDly(void)
{
 802881c:	defffe04 	addi	sp,sp,-8
 8028820:	dfc00115 	stw	ra,4(sp)
 8028824:	df000015 	stw	fp,0(sp)
 8028828:	d839883a 	mov	fp,sp
   OSTimeDly(2);
 802882c:	01000084 	movi	r4,2
 8028830:	80186cc0 	call	80186cc <OSTimeDly>
}
 8028834:	0001883a 	nop
 8028838:	e037883a 	mov	sp,fp
 802883c:	dfc00117 	ldw	ra,4(sp)
 8028840:	df000017 	ldw	fp,0(sp)
 8028844:	dec00204 	addi	sp,sp,8
 8028848:	f800283a 	ret

0802884c <TK_OSTaskResume>:



void TK_OSTaskResume(u_char * Id)
{
 802884c:	defffc04 	addi	sp,sp,-16
 8028850:	dfc00315 	stw	ra,12(sp)
 8028854:	df000215 	stw	fp,8(sp)
 8028858:	df000204 	addi	fp,sp,8
 802885c:	e13ffe15 	stw	r4,-8(fp)
INT8U err;

   err = OSTaskResume(*Id);
 8028860:	e0bffe17 	ldw	r2,-8(fp)
 8028864:	10800003 	ldbu	r2,0(r2)
 8028868:	10803fcc 	andi	r2,r2,255
 802886c:	1009883a 	mov	r4,r2
 8028870:	8017fb40 	call	8017fb4 <OSTaskResume>
 8028874:	e0bfffc5 	stb	r2,-1(fp)
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
 8028878:	e0bfffc3 	ldbu	r2,-1(fp)
 802887c:	10000a26 	beq	r2,zero,80288a8 <TK_OSTaskResume+0x5c>
 8028880:	e0bfffc3 	ldbu	r2,-1(fp)
 8028884:	10801120 	cmpeqi	r2,r2,68
 8028888:	1000071e 	bne	r2,zero,80288a8 <TK_OSTaskResume+0x5c>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
 802888c:	01020174 	movhi	r4,2053
 8028890:	210a3f04 	addi	r4,r4,10492
 8028894:	80033800 	call	8003380 <puts>
      dtrap();
 8028898:	802c3fc0 	call	802c3fc <dtrap>
      panic("TK_OSTaskResume");      
 802889c:	01020174 	movhi	r4,2053
 80288a0:	210a4c04 	addi	r4,r4,10544
 80288a4:	8027fe00 	call	8027fe0 <panic>
   }
#endif
}
 80288a8:	0001883a 	nop
 80288ac:	e037883a 	mov	sp,fp
 80288b0:	dfc00117 	ldw	ra,4(sp)
 80288b4:	df000017 	ldw	fp,0(sp)
 80288b8:	dec00204 	addi	sp,sp,8
 80288bc:	f800283a 	ret

080288c0 <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
 80288c0:	defffb04 	addi	sp,sp,-20
 80288c4:	dfc00415 	stw	ra,16(sp)
 80288c8:	df000315 	stw	fp,12(sp)
 80288cc:	df000304 	addi	fp,sp,12
 80288d0:	e13ffd15 	stw	r4,-12(fp)
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 80288d4:	e03fff15 	stw	zero,-4(fp)
 80288d8:	00003d06 	br	80289d0 <tcp_sleep+0x110>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
 80288dc:	e0bfff17 	ldw	r2,-4(fp)
 80288e0:	10c00324 	muli	r3,r2,12
 80288e4:	008201b4 	movhi	r2,2054
 80288e8:	1885883a 	add	r2,r3,r2
 80288ec:	10bbc617 	ldw	r2,-4328(r2)
 80288f0:	1000341e 	bne	r2,zero,80289c4 <tcp_sleep+0x104>
      {
         global_TCPwakeup_set[i].soc_event = event;
 80288f4:	e0bfff17 	ldw	r2,-4(fp)
 80288f8:	11000324 	muli	r4,r2,12
 80288fc:	e0fffd17 	ldw	r3,-12(fp)
 8028900:	008201b4 	movhi	r2,2054
 8028904:	2085883a 	add	r2,r4,r2
 8028908:	10fbc615 	stw	r3,-4328(r2)
         global_TCPwakeup_set[i].ctick = cticks;
 802890c:	d0e0a317 	ldw	r3,-32116(gp)
 8028910:	e0bfff17 	ldw	r2,-4(fp)
 8028914:	11000324 	muli	r4,r2,12
 8028918:	008201b4 	movhi	r2,2054
 802891c:	2085883a 	add	r2,r4,r2
 8028920:	10fbc515 	stw	r3,-4332(r2)
         if (i > global_TCPwakeup_setIndx)
 8028924:	d0e0a217 	ldw	r3,-32120(gp)
 8028928:	e0bfff17 	ldw	r2,-4(fp)
 802892c:	1880020e 	bge	r3,r2,8028938 <tcp_sleep+0x78>
            global_TCPwakeup_setIndx = i;
 8028930:	e0bfff17 	ldw	r2,-4(fp)
 8028934:	d0a0a215 	stw	r2,-32120(gp)

         tcp_sleep_count++;
 8028938:	d0a09e17 	ldw	r2,-32136(gp)
 802893c:	10800044 	addi	r2,r2,1
 8028940:	d0a09e15 	stw	r2,-32136(gp)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
 8028944:	0009883a 	mov	r4,zero
 8028948:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
 802894c:	e0bfff17 	ldw	r2,-4(fp)
 8028950:	10c00324 	muli	r3,r2,12
 8028954:	008201b4 	movhi	r2,2054
 8028958:	1885883a 	add	r2,r3,r2
 802895c:	10bbc717 	ldw	r2,-4324(r2)
 8028960:	e0fffec4 	addi	r3,fp,-5
 8028964:	180d883a 	mov	r6,r3
 8028968:	01401904 	movi	r5,100
 802896c:	1009883a 	mov	r4,r2
 8028970:	80168c40 	call	80168c4 <OSSemPend>
         if (err == 10)
 8028974:	e0bffec3 	ldbu	r2,-5(fp)
 8028978:	10803fcc 	andi	r2,r2,255
 802897c:	10800298 	cmpnei	r2,r2,10
 8028980:	10000d1e 	bne	r2,zero,80289b8 <tcp_sleep+0xf8>
         {
            ++tcp_sleep_timeout;
 8028984:	d0a08917 	ldw	r2,-32220(gp)
 8028988:	10800044 	addi	r2,r2,1
 802898c:	d0a08915 	stw	r2,-32220(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
 8028990:	e0bfff17 	ldw	r2,-4(fp)
 8028994:	10c00324 	muli	r3,r2,12
 8028998:	008201b4 	movhi	r2,2054
 802899c:	1885883a 	add	r2,r3,r2
 80289a0:	103bc515 	stw	zero,-4332(r2)
            global_TCPwakeup_set[i].soc_event = NULL;
 80289a4:	e0bfff17 	ldw	r2,-4(fp)
 80289a8:	10c00324 	muli	r3,r2,12
 80289ac:	008201b4 	movhi	r2,2054
 80289b0:	1885883a 	add	r2,r3,r2
 80289b4:	103bc615 	stw	zero,-4328(r2)
         }

         /* Regain the lock */
         LOCK_NET_RESOURCE(NET_RESID);
 80289b8:	0009883a 	mov	r4,zero
 80289bc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
 80289c0:	00000d06 	br	80289f8 <tcp_sleep+0x138>
   for (i = 0; i < GLOBWAKE_SZ; i++)
 80289c4:	e0bfff17 	ldw	r2,-4(fp)
 80289c8:	10800044 	addi	r2,r2,1
 80289cc:	e0bfff15 	stw	r2,-4(fp)
 80289d0:	e0bfff17 	ldw	r2,-4(fp)
 80289d4:	10800510 	cmplti	r2,r2,20
 80289d8:	103fc01e 	bne	r2,zero,80288dc <tcp_sleep+0x1c>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
 80289dc:	e0bfff17 	ldw	r2,-4(fp)
 80289e0:	d0a0a215 	stw	r2,-32120(gp)

   UNLOCK_NET_RESOURCE(NET_RESID);
 80289e4:	0009883a 	mov	r4,zero
 80289e8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   TK_YIELD();
 80289ec:	8028b500 	call	8028b50 <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
 80289f0:	0009883a 	mov	r4,zero
 80289f4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
}
 80289f8:	e037883a 	mov	sp,fp
 80289fc:	dfc00117 	ldw	ra,4(sp)
 8028a00:	df000017 	ldw	fp,0(sp)
 8028a04:	dec00204 	addi	sp,sp,8
 8028a08:	f800283a 	ret

08028a0c <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
 8028a0c:	defffc04 	addi	sp,sp,-16
 8028a10:	dfc00315 	stw	ra,12(sp)
 8028a14:	df000215 	stw	fp,8(sp)
 8028a18:	df000204 	addi	fp,sp,8
 8028a1c:	e13ffe15 	stw	r4,-8(fp)
   int i;

   OSSchedLock();
 8028a20:	8011cac0 	call	8011cac <OSSchedLock>

   for (i = 0; i < GLOBWAKE_SZ; i++)
 8028a24:	e03fff15 	stw	zero,-4(fp)
 8028a28:	00002406 	br	8028abc <tcp_wakeup+0xb0>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 8028a2c:	e0bfff17 	ldw	r2,-4(fp)
 8028a30:	10c00324 	muli	r3,r2,12
 8028a34:	008201b4 	movhi	r2,2054
 8028a38:	1885883a 	add	r2,r3,r2
 8028a3c:	10bbc517 	ldw	r2,-4332(r2)
 8028a40:	10001b26 	beq	r2,zero,8028ab0 <tcp_wakeup+0xa4>
          (global_TCPwakeup_set[i].soc_event == event))
 8028a44:	e0bfff17 	ldw	r2,-4(fp)
 8028a48:	10c00324 	muli	r3,r2,12
 8028a4c:	008201b4 	movhi	r2,2054
 8028a50:	1885883a 	add	r2,r3,r2
 8028a54:	10bbc617 	ldw	r2,-4328(r2)
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 8028a58:	e0fffe17 	ldw	r3,-8(fp)
 8028a5c:	1880141e 	bne	r3,r2,8028ab0 <tcp_wakeup+0xa4>
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
 8028a60:	e0bfff17 	ldw	r2,-4(fp)
 8028a64:	10c00324 	muli	r3,r2,12
 8028a68:	008201b4 	movhi	r2,2054
 8028a6c:	1885883a 	add	r2,r3,r2
 8028a70:	10bbc717 	ldw	r2,-4324(r2)
 8028a74:	1009883a 	mov	r4,r2
 8028a78:	8016c4c0 	call	8016c4c <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
 8028a7c:	e0bfff17 	ldw	r2,-4(fp)
 8028a80:	10c00324 	muli	r3,r2,12
 8028a84:	008201b4 	movhi	r2,2054
 8028a88:	1885883a 	add	r2,r3,r2
 8028a8c:	103bc515 	stw	zero,-4332(r2)
         global_TCPwakeup_set[i].soc_event = NULL;
 8028a90:	e0bfff17 	ldw	r2,-4(fp)
 8028a94:	10c00324 	muli	r3,r2,12
 8028a98:	008201b4 	movhi	r2,2054
 8028a9c:	1885883a 	add	r2,r3,r2
 8028aa0:	103bc615 	stw	zero,-4328(r2)

         tcp_wakeup_count++;
 8028aa4:	d0a09f17 	ldw	r2,-32132(gp)
 8028aa8:	10800044 	addi	r2,r2,1
 8028aac:	d0a09f15 	stw	r2,-32132(gp)
   for (i = 0; i < GLOBWAKE_SZ; i++)
 8028ab0:	e0bfff17 	ldw	r2,-4(fp)
 8028ab4:	10800044 	addi	r2,r2,1
 8028ab8:	e0bfff15 	stw	r2,-4(fp)
 8028abc:	e0bfff17 	ldw	r2,-4(fp)
 8028ac0:	10800510 	cmplti	r2,r2,20
 8028ac4:	103fd91e 	bne	r2,zero,8028a2c <tcp_wakeup+0x20>
      }
   }

   OSSchedUnlock();
 8028ac8:	8011d3c0 	call	8011d3c <OSSchedUnlock>
}
 8028acc:	0001883a 	nop
 8028ad0:	e037883a 	mov	sp,fp
 8028ad4:	dfc00117 	ldw	ra,4(sp)
 8028ad8:	df000017 	ldw	fp,0(sp)
 8028adc:	dec00204 	addi	sp,sp,8
 8028ae0:	f800283a 	ret

08028ae4 <TK_OSTaskQuery>:



u_char TK_OSTaskQuery(void)
{
 8028ae4:	deffe204 	addi	sp,sp,-120
 8028ae8:	dfc01d15 	stw	ra,116(sp)
 8028aec:	df001c15 	stw	fp,112(sp)
 8028af0:	df001c04 	addi	fp,sp,112
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
 8028af4:	e0bfe404 	addi	r2,fp,-112
 8028af8:	100b883a 	mov	r5,r2
 8028afc:	01003fc4 	movi	r4,255
 8028b00:	80185340 	call	8018534 <OSTaskQuery>
 8028b04:	e0bfffc5 	stb	r2,-1(fp)

   if (err == OS_NO_ERR)
 8028b08:	e0bfffc3 	ldbu	r2,-1(fp)
 8028b0c:	1000041e 	bne	r2,zero,8028b20 <TK_OSTaskQuery+0x3c>
   {
      task_prio = task_data.OSTCBPrio;
 8028b10:	e0bff083 	ldbu	r2,-62(fp)
 8028b14:	e0bfff85 	stb	r2,-2(fp)
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
 8028b18:	e0bfff83 	ldbu	r2,-2(fp)
 8028b1c:	00000706 	br	8028b3c <TK_OSTaskQuery+0x58>
      dprintf("ChronOS API call failure, unable to identify task!");
 8028b20:	01020174 	movhi	r4,2053
 8028b24:	210a5004 	addi	r4,r4,10560
 8028b28:	800325c0 	call	800325c <printf>
      panic("TK_OSTaskQuery");
 8028b2c:	01020174 	movhi	r4,2053
 8028b30:	210a5d04 	addi	r4,r4,10612
 8028b34:	8027fe00 	call	8027fe0 <panic>
      return 0;
 8028b38:	0005883a 	mov	r2,zero
}
 8028b3c:	e037883a 	mov	sp,fp
 8028b40:	dfc00117 	ldw	ra,4(sp)
 8028b44:	df000017 	ldw	fp,0(sp)
 8028b48:	dec00204 	addi	sp,sp,8
 8028b4c:	f800283a 	ret

08028b50 <tk_yield>:



void
tk_yield(void)
{
 8028b50:	defffe04 	addi	sp,sp,-8
 8028b54:	dfc00115 	stw	ra,4(sp)
 8028b58:	df000015 	stw	fp,0(sp)
 8028b5c:	d839883a 	mov	fp,sp
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
 8028b60:	01000044 	movi	r4,1
 8028b64:	80186cc0 	call	80186cc <OSTimeDly>
}
 8028b68:	0001883a 	nop
 8028b6c:	e037883a 	mov	sp,fp
 8028b70:	dfc00117 	ldw	ra,4(sp)
 8028b74:	df000017 	ldw	fp,0(sp)
 8028b78:	dec00204 	addi	sp,sp,8
 8028b7c:	f800283a 	ret

08028b80 <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
 8028b80:	deffef04 	addi	sp,sp,-68
 8028b84:	dfc01015 	stw	ra,64(sp)
 8028b88:	df000f15 	stw	fp,60(sp)
 8028b8c:	df000f04 	addi	fp,sp,60
 8028b90:	e13ff215 	stw	r4,-56(fp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
 8028b94:	01420174 	movhi	r5,2053
 8028b98:	294a6104 	addi	r5,r5,10628
 8028b9c:	e13ff217 	ldw	r4,-56(fp)
 8028ba0:	80281f80 	call	80281f8 <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
 8028ba4:	d0a06b17 	ldw	r2,-32340(gp)
 8028ba8:	100d883a 	mov	r6,r2
 8028bac:	01420174 	movhi	r5,2053
 8028bb0:	294a6704 	addi	r5,r5,10652
 8028bb4:	e13ff217 	ldw	r4,-56(fp)
 8028bb8:	80281f80 	call	80281f8 <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
 8028bbc:	01420174 	movhi	r5,2053
 8028bc0:	294a6f04 	addi	r5,r5,10684
 8028bc4:	e13ff217 	ldw	r4,-56(fp)
 8028bc8:	80281f80 	call	80281f8 <ns_printf>

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 8028bcc:	e03fff15 	stw	zero,-4(fp)
 8028bd0:	00005006 	br	8028d14 <tk_stats+0x194>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
 8028bd4:	e0bfff17 	ldw	r2,-4(fp)
 8028bd8:	100690ba 	slli	r3,r2,2
 8028bdc:	008201b4 	movhi	r2,2054
 8028be0:	1885883a 	add	r2,r3,r2
 8028be4:	10b90c17 	ldw	r2,-7120(r2)
 8028be8:	e0bffd15 	stw	r2,-12(fp)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
 8028bec:	e0bffd17 	ldw	r2,-12(fp)
 8028bf0:	10004426 	beq	r2,zero,8028d04 <tk_stats+0x184>
 8028bf4:	e0bffd17 	ldw	r2,-12(fp)
 8028bf8:	10800058 	cmpnei	r2,r2,1
 8028bfc:	10004126 	beq	r2,zero,8028d04 <tk_stats+0x184>
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
 8028c00:	e0bffd17 	ldw	r2,-12(fp)
 8028c04:	10800c83 	ldbu	r2,50(r2)
 8028c08:	10803fcc 	andi	r2,r2,255
 8028c0c:	e13ff384 	addi	r4,fp,-50
 8028c10:	e0fff3c4 	addi	r3,fp,-49
 8028c14:	200d883a 	mov	r6,r4
 8028c18:	180b883a 	mov	r5,r3
 8028c1c:	1009883a 	mov	r4,r2
 8028c20:	8017c5c0 	call	8017c5c <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
 8028c24:	e0bffd17 	ldw	r2,-12(fp)
 8028c28:	10800c83 	ldbu	r2,50(r2)
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 8028c2c:	11003fcc 	andi	r4,r2,255
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
 8028c30:	e0bffd17 	ldw	r2,-12(fp)
 8028c34:	10800c03 	ldbu	r2,48(r2)
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 8028c38:	10803fcc 	andi	r2,r2,255
 8028c3c:	e0fff3c4 	addi	r3,fp,-49
 8028c40:	d8800015 	stw	r2,0(sp)
 8028c44:	200f883a 	mov	r7,r4
 8028c48:	180d883a 	mov	r6,r3
 8028c4c:	01420174 	movhi	r5,2053
 8028c50:	294a7f04 	addi	r5,r5,10748
 8028c54:	e13ff217 	ldw	r4,-56(fp)
 8028c58:	80281f80 	call	80281f8 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
 8028c5c:	e0bffd17 	ldw	r2,-12(fp)
 8028c60:	10800217 	ldw	r2,8(r2)
 8028c64:	10002226 	beq	r2,zero,8028cf0 <tk_stats+0x170>
 8028c68:	e0bffd17 	ldw	r2,-12(fp)
 8028c6c:	10800317 	ldw	r2,12(r2)
 8028c70:	10001f26 	beq	r2,zero,8028cf0 <tk_stats+0x170>
      {
         sp = tcb->OSTCBStkBottom + 1;
 8028c74:	e0bffd17 	ldw	r2,-12(fp)
 8028c78:	10800217 	ldw	r2,8(r2)
 8028c7c:	10800104 	addi	r2,r2,4
 8028c80:	e0bffe15 	stw	r2,-8(fp)
         while(*sp == 0)
 8028c84:	00000306 	br	8028c94 <tk_stats+0x114>
            sp++;
 8028c88:	e0bffe17 	ldw	r2,-8(fp)
 8028c8c:	10800104 	addi	r2,r2,4
 8028c90:	e0bffe15 	stw	r2,-8(fp)
         while(*sp == 0)
 8028c94:	e0bffe17 	ldw	r2,-8(fp)
 8028c98:	10800017 	ldw	r2,0(r2)
 8028c9c:	103ffa26 	beq	r2,zero,8028c88 <tk_stats+0x108>
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
 8028ca0:	e0bffd17 	ldw	r2,-12(fp)
 8028ca4:	10800317 	ldw	r2,12(r2)
 8028ca8:	e0fffd17 	ldw	r3,-12(fp)
 8028cac:	18c00217 	ldw	r3,8(r3)
 8028cb0:	e13ffe17 	ldw	r4,-8(fp)
 8028cb4:	20c7c83a 	sub	r3,r4,r3
 8028cb8:	1807d0ba 	srai	r3,r3,2
 8028cbc:	10c5c83a 	sub	r2,r2,r3
 8028cc0:	100490ba 	slli	r2,r2,2
 8028cc4:	e0bffc15 	stw	r2,-16(fp)
         ns_printf(pio, "%6d,      %6d\n",
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
 8028cc8:	e0bffd17 	ldw	r2,-12(fp)
 8028ccc:	10800317 	ldw	r2,12(r2)
         ns_printf(pio, "%6d,      %6d\n",
 8028cd0:	100490ba 	slli	r2,r2,2
 8028cd4:	e1fffc17 	ldw	r7,-16(fp)
 8028cd8:	100d883a 	mov	r6,r2
 8028cdc:	01420174 	movhi	r5,2053
 8028ce0:	294a8704 	addi	r5,r5,10780
 8028ce4:	e13ff217 	ldw	r4,-56(fp)
 8028ce8:	80281f80 	call	80281f8 <ns_printf>
 8028cec:	00000606 	br	8028d08 <tk_stats+0x188>
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 8028cf0:	01420174 	movhi	r5,2053
 8028cf4:	294a8b04 	addi	r5,r5,10796
 8028cf8:	e13ff217 	ldw	r4,-56(fp)
 8028cfc:	80281f80 	call	80281f8 <ns_printf>
 8028d00:	00000106 	br	8028d08 <tk_stats+0x188>
         continue;
 8028d04:	0001883a 	nop
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 8028d08:	e0bfff17 	ldw	r2,-4(fp)
 8028d0c:	10800044 	addi	r2,r2,1
 8028d10:	e0bfff15 	stw	r2,-4(fp)
 8028d14:	e0bfff17 	ldw	r2,-4(fp)
 8028d18:	10800550 	cmplti	r2,r2,21
 8028d1c:	103fad1e 	bne	r2,zero,8028bd4 <tk_stats+0x54>
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
 8028d20:	d0a09e17 	ldw	r2,-32136(gp)
 8028d24:	d0e09f17 	ldw	r3,-32132(gp)
 8028d28:	180f883a 	mov	r7,r3
 8028d2c:	100d883a 	mov	r6,r2
 8028d30:	01420174 	movhi	r5,2053
 8028d34:	294a8f04 	addi	r5,r5,10812
 8028d38:	e13ff217 	ldw	r4,-56(fp)
 8028d3c:	80281f80 	call	80281f8 <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
 8028d40:	d0a0a217 	ldw	r2,-32120(gp)
 8028d44:	d0e08917 	ldw	r3,-32220(gp)
 8028d48:	180f883a 	mov	r7,r3
 8028d4c:	100d883a 	mov	r6,r2
 8028d50:	01420174 	movhi	r5,2053
 8028d54:	294a9b04 	addi	r5,r5,10860
 8028d58:	e13ff217 	ldw	r4,-56(fp)
 8028d5c:	80281f80 	call	80281f8 <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
 8028d60:	0005883a 	mov	r2,zero
}
 8028d64:	e037883a 	mov	sp,fp
 8028d68:	dfc00117 	ldw	ra,4(sp)
 8028d6c:	df000017 	ldw	fp,0(sp)
 8028d70:	dec00204 	addi	sp,sp,8
 8028d74:	f800283a 	ret

08028d78 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
 8028d78:	defffa04 	addi	sp,sp,-24
 8028d7c:	dfc00515 	stw	ra,20(sp)
 8028d80:	df000415 	stw	fp,16(sp)
 8028d84:	df000404 	addi	fp,sp,16
 8028d88:	e13ffc15 	stw	r4,-16(fp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;
 8028d8c:	e03fff15 	stw	zero,-4(fp)

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 8028d90:	e17ffc17 	ldw	r5,-16(fp)
 8028d94:	01000d84 	movi	r4,54
 8028d98:	802b5380 	call	802b538 <find_opt>
 8028d9c:	e0bffe15 	stw	r2,-8(fp)
 8028da0:	e0bffe17 	ldw	r2,-8(fp)
 8028da4:	10001026 	beq	r2,zero,8028de8 <dhc_get_srv_ipaddr+0x70>
   {
      opts++;
 8028da8:	e0bffe17 	ldw	r2,-8(fp)
 8028dac:	10800044 	addi	r2,r2,1
 8028db0:	e0bffe15 	stw	r2,-8(fp)
      optlen = *opts;
 8028db4:	e0bffe17 	ldw	r2,-8(fp)
 8028db8:	10800003 	ldbu	r2,0(r2)
 8028dbc:	e0bffdc5 	stb	r2,-9(fp)
      opts++;
 8028dc0:	e0bffe17 	ldw	r2,-8(fp)
 8028dc4:	10800044 	addi	r2,r2,1
 8028dc8:	e0bffe15 	stw	r2,-8(fp)
      srv_ipaddr = dh_getlong(opts);
 8028dcc:	e13ffe17 	ldw	r4,-8(fp)
 8028dd0:	802a9d00 	call	802a9d0 <dh_getlong>
 8028dd4:	e0bfff15 	stw	r2,-4(fp)
      opts += optlen;
 8028dd8:	e0bffdc3 	ldbu	r2,-9(fp)
 8028ddc:	e0fffe17 	ldw	r3,-8(fp)
 8028de0:	1885883a 	add	r2,r3,r2
 8028de4:	e0bffe15 	stw	r2,-8(fp)
   }

   return (srv_ipaddr);
 8028de8:	e0bfff17 	ldw	r2,-4(fp)
} 
 8028dec:	e037883a 	mov	sp,fp
 8028df0:	dfc00117 	ldw	ra,4(sp)
 8028df4:	df000017 	ldw	fp,0(sp)
 8028df8:	dec00204 	addi	sp,sp,8
 8028dfc:	f800283a 	ret

08028e00 <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
 8028e00:	defffc04 	addi	sp,sp,-16
 8028e04:	dfc00315 	stw	ra,12(sp)
 8028e08:	df000215 	stw	fp,8(sp)
 8028e0c:	df000204 	addi	fp,sp,8
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
 8028e10:	00bfff44 	movi	r2,-3
 8028e14:	d8800015 	stw	r2,0(sp)
 8028e18:	01c200f4 	movhi	r7,2051
 8028e1c:	39e3b904 	addi	r7,r7,-28956
 8028e20:	01801104 	movi	r6,68
 8028e24:	014010c4 	movi	r5,67
 8028e28:	0009883a 	mov	r4,zero
 8028e2c:	802bf900 	call	802bf90 <udp_open>
 8028e30:	d0a08a15 	stw	r2,-32216(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
 8028e34:	d0a08a17 	ldw	r2,-32216(gp)
 8028e38:	1000021e 	bne	r2,zero,8028e44 <dhc_init+0x44>
      return ENP_RESOURCE;
 8028e3c:	00bffa84 	movi	r2,-22
 8028e40:	00001306 	br	8028e90 <dhc_init+0x90>

   for (i = 0; i < MAXNETS; i++)
 8028e44:	e03fff15 	stw	zero,-4(fp)
 8028e48:	00000d06 	br	8028e80 <dhc_init+0x80>
   {
      dhc_states[i].state = DHCS_UNUSED;
 8028e4c:	e0bfff17 	ldw	r2,-4(fp)
 8028e50:	10c00f24 	muli	r3,r2,60
 8028e54:	008201b4 	movhi	r2,2054
 8028e58:	1885883a 	add	r2,r3,r2
 8028e5c:	103b0015 	stw	zero,-5120(r2)
      dhc_states[i].tries = 0;
 8028e60:	e0bfff17 	ldw	r2,-4(fp)
 8028e64:	10c00f24 	muli	r3,r2,60
 8028e68:	008201b4 	movhi	r2,2054
 8028e6c:	1885883a 	add	r2,r3,r2
 8028e70:	103b0115 	stw	zero,-5116(r2)
   for (i = 0; i < MAXNETS; i++)
 8028e74:	e0bfff17 	ldw	r2,-4(fp)
 8028e78:	10800044 	addi	r2,r2,1
 8028e7c:	e0bfff15 	stw	r2,-4(fp)
 8028e80:	e0bfff17 	ldw	r2,-4(fp)
 8028e84:	10800110 	cmplti	r2,r2,4
 8028e88:	103ff01e 	bne	r2,zero,8028e4c <dhc_init+0x4c>
   }

   return 0;
 8028e8c:	0005883a 	mov	r2,zero
}
 8028e90:	e037883a 	mov	sp,fp
 8028e94:	dfc00117 	ldw	ra,4(sp)
 8028e98:	df000017 	ldw	fp,0(sp)
 8028e9c:	dec00204 	addi	sp,sp,8
 8028ea0:	f800283a 	ret

08028ea4 <dhc_set_callback>:
 * RETURNS: 
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
 8028ea4:	defffd04 	addi	sp,sp,-12
 8028ea8:	df000215 	stw	fp,8(sp)
 8028eac:	df000204 	addi	fp,sp,8
 8028eb0:	e13fff15 	stw	r4,-4(fp)
 8028eb4:	e17ffe15 	stw	r5,-8(fp)
   dhc_states[iface].callback = routine;
 8028eb8:	e0bfff17 	ldw	r2,-4(fp)
 8028ebc:	11000f24 	muli	r4,r2,60
 8028ec0:	e0fffe17 	ldw	r3,-8(fp)
 8028ec4:	008201b4 	movhi	r2,2054
 8028ec8:	2085883a 	add	r2,r4,r2
 8028ecc:	10fb0e15 	stw	r3,-5064(r2)
}
 8028ed0:	0001883a 	nop
 8028ed4:	e037883a 	mov	sp,fp
 8028ed8:	df000017 	ldw	fp,0(sp)
 8028edc:	dec00104 	addi	sp,sp,4
 8028ee0:	f800283a 	ret

08028ee4 <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
 8028ee4:	defff504 	addi	sp,sp,-44
 8028ee8:	dfc00a15 	stw	ra,40(sp)
 8028eec:	df000915 	stw	fp,36(sp)
 8028ef0:	dc000815 	stw	r16,32(sp)
 8028ef4:	df000904 	addi	fp,sp,36
 8028ef8:	e13ff815 	stw	r4,-32(fp)
 8028efc:	e17ff715 	stw	r5,-36(fp)
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
 8028f00:	e0bff817 	ldw	r2,-32(fp)
 8028f04:	10800417 	ldw	r2,16(r2)
 8028f08:	e0bffd15 	stw	r2,-12(fp)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
 8028f0c:	e03ffe15 	stw	zero,-8(fp)
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
 8028f10:	e0bff717 	ldw	r2,-36(fp)
 8028f14:	10bfff60 	cmpeqi	r2,r2,-3
 8028f18:	1000031e 	bne	r2,zero,8028f28 <dhc_upcall+0x44>
   {
      dtrap();
 8028f1c:	802c3fc0 	call	802c3fc <dtrap>
      return ENP_LOGIC;    /* internal logic error */
 8028f20:	00bffd44 	movi	r2,-11
 8028f24:	0001a306 	br	80295b4 <dhc_upcall+0x6d0>
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 8028f28:	e0bff817 	ldw	r2,-32(fp)
 8028f2c:	10800617 	ldw	r2,24(r2)
 8028f30:	1009883a 	mov	r4,r2
 8028f34:	80261180 	call	8026118 <if_netnumber>
 8028f38:	e0bffc15 	stw	r2,-16(fp)
   if (dhc_states[iface].state == DHCS_UNUSED)
 8028f3c:	e0bffc17 	ldw	r2,-16(fp)
 8028f40:	10c00f24 	muli	r3,r2,60
 8028f44:	008201b4 	movhi	r2,2054
 8028f48:	1885883a 	add	r2,r3,r2
 8028f4c:	10bb0017 	ldw	r2,-5120(r2)
 8028f50:	1000021e 	bne	r2,zero,8028f5c <dhc_upcall+0x78>
      return ENP_NOT_MINE;
 8028f54:	00800084 	movi	r2,2
 8028f58:	00019606 	br	80295b4 <dhc_upcall+0x6d0>

   bp = (struct bootp *)pkt->nb_prot;
 8028f5c:	e0bff817 	ldw	r2,-32(fp)
 8028f60:	10800317 	ldw	r2,12(r2)
 8028f64:	e0bffb15 	stw	r2,-20(fp)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 8028f68:	e0bffd17 	ldw	r2,-12(fp)
 8028f6c:	10803b30 	cmpltui	r2,r2,236
 8028f70:	10000b1e 	bne	r2,zero,8028fa0 <dhc_upcall+0xbc>
       (bp->op != BOOTREPLY) ||
 8028f74:	e0bffb17 	ldw	r2,-20(fp)
 8028f78:	10800003 	ldbu	r2,0(r2)
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 8028f7c:	10803fcc 	andi	r2,r2,255
 8028f80:	10800098 	cmpnei	r2,r2,2
 8028f84:	1000061e 	bne	r2,zero,8028fa0 <dhc_upcall+0xbc>
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
 8028f88:	e0bffb17 	ldw	r2,-20(fp)
 8028f8c:	10803b04 	addi	r2,r2,236
 8028f90:	10c00017 	ldw	r3,0(r2)
       (bp->op != BOOTREPLY) ||
 8028f94:	0098d534 	movhi	r2,25428
 8028f98:	10a098c4 	addi	r2,r2,-32157
 8028f9c:	18800626 	beq	r3,r2,8028fb8 <dhc_upcall+0xd4>
   {
      dtrap();
 8028fa0:	802c3fc0 	call	802c3fc <dtrap>
      dsc_errors++;
 8028fa4:	d0a08b17 	ldw	r2,-32212(gp)
 8028fa8:	10800044 	addi	r2,r2,1
 8028fac:	d0a08b15 	stw	r2,-32212(gp)
      return ENP_NOT_MINE;
 8028fb0:	00800084 	movi	r2,2
 8028fb4:	00017f06 	br	80295b4 <dhc_upcall+0x6d0>
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
 8028fb8:	e0bffb17 	ldw	r2,-20(fp)
 8028fbc:	10c00704 	addi	r3,r2,28
 8028fc0:	e0bff817 	ldw	r2,-32(fp)
 8028fc4:	10800617 	ldw	r2,24(r2)
 8028fc8:	11001717 	ldw	r4,92(r2)
 8028fcc:	e0bff817 	ldw	r2,-32(fp)
 8028fd0:	10800617 	ldw	r2,24(r2)
 8028fd4:	10801117 	ldw	r2,68(r2)
 8028fd8:	100d883a 	mov	r6,r2
 8028fdc:	200b883a 	mov	r5,r4
 8028fe0:	1809883a 	mov	r4,r3
 8028fe4:	8002e2c0 	call	8002e2c <memcmp>
 8028fe8:	10000226 	beq	r2,zero,8028ff4 <dhc_upcall+0x110>
      return ENP_NOT_MINE;    /* not an error, just ignore it */
 8028fec:	00800084 	movi	r2,2
 8028ff0:	00017006 	br	80295b4 <dhc_upcall+0x6d0>

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
 8028ff4:	e0bffb17 	ldw	r2,-20(fp)
 8028ff8:	10803c04 	addi	r2,r2,240
 8028ffc:	100b883a 	mov	r5,r2
 8029000:	01000d44 	movi	r4,53
 8029004:	802b5380 	call	802b538 <find_opt>
 8029008:	e0bffa15 	stw	r2,-24(fp)
   if (opts && *opts == DHOP_TYPE)
 802900c:	e0bffa17 	ldw	r2,-24(fp)
 8029010:	10001026 	beq	r2,zero,8029054 <dhc_upcall+0x170>
 8029014:	e0bffa17 	ldw	r2,-24(fp)
 8029018:	10800003 	ldbu	r2,0(r2)
 802901c:	10803fcc 	andi	r2,r2,255
 8029020:	10800d58 	cmpnei	r2,r2,53
 8029024:	10000b1e 	bne	r2,zero,8029054 <dhc_upcall+0x170>
   {
      dhcptype = *(opts+2);
 8029028:	e0bffa17 	ldw	r2,-24(fp)
 802902c:	10800084 	addi	r2,r2,2
 8029030:	10800003 	ldbu	r2,0(r2)
 8029034:	10803fcc 	andi	r2,r2,255
 8029038:	e0bffe15 	stw	r2,-8(fp)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 802903c:	e0bffb17 	ldw	r2,-20(fp)
 8029040:	10800003 	ldbu	r2,0(r2)
 8029044:	10800114 	ori	r2,r2,4
 8029048:	1007883a 	mov	r3,r2
 802904c:	e0bffb17 	ldw	r2,-20(fp)
 8029050:	10c00005 	stb	r3,0(r2)
   }

   if (isdhcp(bp))
 8029054:	e0bffb17 	ldw	r2,-20(fp)
 8029058:	10800003 	ldbu	r2,0(r2)
 802905c:	10803fcc 	andi	r2,r2,255
 8029060:	1080010c 	andi	r2,r2,4
 8029064:	10013626 	beq	r2,zero,8029540 <dhc_upcall+0x65c>
 8029068:	e0bffe17 	ldw	r2,-8(fp)
 802906c:	10c00228 	cmpgeui	r3,r2,8
 8029070:	18c03fcc 	andi	r3,r3,255
 8029074:	18000b1e 	bne	r3,zero,80290a4 <dhc_upcall+0x1c0>
 8029078:	00c00044 	movi	r3,1
 802907c:	1884983a 	sll	r2,r3,r2
 8029080:	1080268c 	andi	r2,r2,154
 8029084:	1004c03a 	cmpne	r2,r2,zero
 8029088:	10803fcc 	andi	r2,r2,255
 802908c:	10000526 	beq	r2,zero,80290a4 <dhc_upcall+0x1c0>
      {
      case DHCP_DISCOVER:
      case DHCP_REQUEST:
      case DHCP_DECLINE:
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
 8029090:	d0a08b17 	ldw	r2,-32212(gp)
 8029094:	10800044 	addi	r2,r2,1
 8029098:	d0a08b15 	stw	r2,-32212(gp)
         return ENP_NOT_MINE;
 802909c:	00800084 	movi	r2,2
 80290a0:	00014406 	br	80295b4 <dhc_upcall+0x6d0>
      }

      switch (dhc_states[iface].state)
 80290a4:	e0bffc17 	ldw	r2,-16(fp)
 80290a8:	10c00f24 	muli	r3,r2,60
 80290ac:	008201b4 	movhi	r2,2054
 80290b0:	1885883a 	add	r2,r3,r2
 80290b4:	10bb0017 	ldw	r2,-5120(r2)
 80290b8:	10c00268 	cmpgeui	r3,r2,9
 80290bc:	1801171e 	bne	r3,zero,802951c <dhc_upcall+0x638>
 80290c0:	100690ba 	slli	r3,r2,2
 80290c4:	008200f4 	movhi	r2,2051
 80290c8:	1885883a 	add	r2,r3,r2
 80290cc:	10a43517 	ldw	r2,-28460(r2)
 80290d0:	1000683a 	jmp	r2
 80290d4:	0802951c 	xori	zero,at,2644
 80290d8:	080290f8 	rdprs	zero,at,2627
 80290dc:	080290f8 	rdprs	zero,at,2627
 80290e0:	080292ec 	andhi	zero,at,2635
 80290e4:	0802910c 	andi	zero,at,2628
 80290e8:	08029258 	cmpnei	zero,at,2633
 80290ec:	080290f8 	rdprs	zero,at,2627
 80290f0:	08029258 	cmpnei	zero,at,2633
 80290f4:	08029258 	cmpnei	zero,at,2633
      case DHCS_INITREBOOT:
         /* How can we receive any response when we never sent one */
      case DHCS_BOUND:
         /* If there are multiple DHCP Servers, and one of them is slow
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
 80290f8:	d0a08b17 	ldw	r2,-32212(gp)
 80290fc:	10800044 	addi	r2,r2,1
 8029100:	d0a08b15 	stw	r2,-32212(gp)
         return ENP_NOT_MINE;
 8029104:	00800084 	movi	r2,2
 8029108:	00012a06 	br	80295b4 <dhc_upcall+0x6d0>
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
 802910c:	e0bffe17 	ldw	r2,-8(fp)
 8029110:	10800098 	cmpnei	r2,r2,2
 8029114:	1000451e 	bne	r2,zero,802922c <dhc_upcall+0x348>
         {
            dsc_offers++;
 8029118:	d0a08d17 	ldw	r2,-32204(gp)
 802911c:	10800044 	addi	r2,r2,1
 8029120:	d0a08d15 	stw	r2,-32204(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
 8029124:	e0bffb17 	ldw	r2,-20(fp)
 8029128:	10803c04 	addi	r2,r2,240
 802912c:	1009883a 	mov	r4,r2
 8029130:	8028d780 	call	8028d78 <dhc_get_srv_ipaddr>
 8029134:	1009883a 	mov	r4,r2
 8029138:	e0bffc17 	ldw	r2,-16(fp)
 802913c:	10c00f24 	muli	r3,r2,60
 8029140:	008201b4 	movhi	r2,2054
 8029144:	1885883a 	add	r2,r3,r2
 8029148:	113b0d15 	stw	r4,-5068(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 802914c:	e0bffc17 	ldw	r2,-16(fp)
 8029150:	10c00f24 	muli	r3,r2,60
 8029154:	008201b4 	movhi	r2,2054
 8029158:	1885883a 	add	r2,r3,r2
 802915c:	10bb0d17 	ldw	r2,-5068(r2)
 8029160:	10000b1e 	bne	r2,zero,8029190 <dhc_upcall+0x2ac>
            {
               dtrap(); /* didn't receive server-identifier option */
 8029164:	802c3fc0 	call	802c3fc <dtrap>
               dsc_errors++;
 8029168:	d0a08b17 	ldw	r2,-32212(gp)
 802916c:	10800044 	addi	r2,r2,1
 8029170:	d0a08b15 	stw	r2,-32212(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 8029174:	e0bff817 	ldw	r2,-32(fp)
 8029178:	10c00717 	ldw	r3,28(r2)
 802917c:	e0bffc17 	ldw	r2,-16(fp)
 8029180:	11000f24 	muli	r4,r2,60
 8029184:	008201b4 	movhi	r2,2054
 8029188:	2085883a 	add	r2,r4,r2
 802918c:	10fb0d15 	stw	r3,-5068(r2)
            }

            if (bp->hops)
 8029190:	e0bffb17 	ldw	r2,-20(fp)
 8029194:	108000c3 	ldbu	r2,3(r2)
 8029198:	10803fcc 	andi	r2,r2,255
 802919c:	10000826 	beq	r2,zero,80291c0 <dhc_upcall+0x2dc>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 80291a0:	e0bff817 	ldw	r2,-32(fp)
 80291a4:	10c00717 	ldw	r3,28(r2)
 80291a8:	e0bffc17 	ldw	r2,-16(fp)
 80291ac:	11000f24 	muli	r4,r2,60
 80291b0:	008201b4 	movhi	r2,2054
 80291b4:	2085883a 	add	r2,r4,r2
 80291b8:	10fb0c15 	stw	r3,-5072(r2)
 80291bc:	00000506 	br	80291d4 <dhc_upcall+0x2f0>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 80291c0:	e0bffc17 	ldw	r2,-16(fp)
 80291c4:	10c00f24 	muli	r3,r2,60
 80291c8:	008201b4 	movhi	r2,2054
 80291cc:	1885883a 	add	r2,r3,r2
 80291d0:	103b0c15 	stw	zero,-5072(r2)

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
 80291d4:	e0bff817 	ldw	r2,-32(fp)
 80291d8:	10800417 	ldw	r2,16(r2)
 80291dc:	100d883a 	mov	r6,r2
 80291e0:	e17ffb17 	ldw	r5,-20(fp)
 80291e4:	e13ffc17 	ldw	r4,-16(fp)
 80291e8:	8029bd00 	call	8029bd0 <dhc_rx_offer>
 80291ec:	e0bff915 	stw	r2,-28(fp)
            if (e)
 80291f0:	e0bff917 	ldw	r2,-28(fp)
 80291f4:	10000926 	beq	r2,zero,802921c <dhc_upcall+0x338>
            {
               dsc_errors++;
 80291f8:	d0a08b17 	ldw	r2,-32212(gp)
 80291fc:	10800044 	addi	r2,r2,1
 8029200:	d0a08b15 	stw	r2,-32212(gp)
               dhc_set_state(iface,DHCS_INIT);
 8029204:	01400044 	movi	r5,1
 8029208:	e13ffc17 	ldw	r4,-16(fp)
 802920c:	802b4a40 	call	802b4a4 <dhc_set_state>
               dtrap();
 8029210:	802c3fc0 	call	802c3fc <dtrap>
               return ENP_NOT_MINE;
 8029214:	00800084 	movi	r2,2
 8029218:	0000e606 	br	80295b4 <dhc_upcall+0x6d0>
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
 802921c:	01400144 	movi	r5,5
 8029220:	e13ffc17 	ldw	r4,-16(fp)
 8029224:	802b4a40 	call	802b4a4 <dhc_set_state>
            dsc_errors++;
            if ( dhcptype == DHCP_NAK ) 
               dsc_naks++;
            return ENP_NOT_MINE;
         }
         break;
 8029228:	0000df06 	br	80295a8 <dhc_upcall+0x6c4>
            dsc_errors++;
 802922c:	d0a08b17 	ldw	r2,-32212(gp)
 8029230:	10800044 	addi	r2,r2,1
 8029234:	d0a08b15 	stw	r2,-32212(gp)
            if ( dhcptype == DHCP_NAK ) 
 8029238:	e0bffe17 	ldw	r2,-8(fp)
 802923c:	10800198 	cmpnei	r2,r2,6
 8029240:	1000031e 	bne	r2,zero,8029250 <dhc_upcall+0x36c>
               dsc_naks++;
 8029244:	d0a09317 	ldw	r2,-32180(gp)
 8029248:	10800044 	addi	r2,r2,1
 802924c:	d0a09315 	stw	r2,-32180(gp)
            return ENP_NOT_MINE;
 8029250:	00800084 	movi	r2,2
 8029254:	0000d706 	br	80295b4 <dhc_upcall+0x6d0>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
 8029258:	e0bffc17 	ldw	r2,-16(fp)
 802925c:	10c00f24 	muli	r3,r2,60
 8029260:	008201b4 	movhi	r2,2054
 8029264:	1885883a 	add	r2,r3,r2
 8029268:	143b0d17 	ldw	r16,-5068(r2)
             dhc_get_srv_ipaddr(&bp->options[4]) )
 802926c:	e0bffb17 	ldw	r2,-20(fp)
 8029270:	10803c04 	addi	r2,r2,240
 8029274:	1009883a 	mov	r4,r2
 8029278:	8028d780 	call	8028d78 <dhc_get_srv_ipaddr>
         if ( dhc_states[iface].srv_ipaddr != 
 802927c:	80800526 	beq	r16,r2,8029294 <dhc_upcall+0x3b0>
         {
            dsc_errors++;
 8029280:	d0a08b17 	ldw	r2,-32212(gp)
 8029284:	10800044 	addi	r2,r2,1
 8029288:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 802928c:	00800084 	movi	r2,2
 8029290:	0000c806 	br	80295b4 <dhc_upcall+0x6d0>
         }
         if (dhc_states[iface].rly_ipaddr &&
 8029294:	e0bffc17 	ldw	r2,-16(fp)
 8029298:	10c00f24 	muli	r3,r2,60
 802929c:	008201b4 	movhi	r2,2054
 80292a0:	1885883a 	add	r2,r3,r2
 80292a4:	10bb0c17 	ldw	r2,-5072(r2)
 80292a8:	10001026 	beq	r2,zero,80292ec <dhc_upcall+0x408>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
 80292ac:	e0bffc17 	ldw	r2,-16(fp)
 80292b0:	10c00f24 	muli	r3,r2,60
 80292b4:	008201b4 	movhi	r2,2054
 80292b8:	1885883a 	add	r2,r3,r2
 80292bc:	10fb0c17 	ldw	r3,-5072(r2)
 80292c0:	e0bff817 	ldw	r2,-32(fp)
 80292c4:	10800717 	ldw	r2,28(r2)
         if (dhc_states[iface].rly_ipaddr &&
 80292c8:	18800826 	beq	r3,r2,80292ec <dhc_upcall+0x408>
         {
            dsc_rlyerrs++;
 80292cc:	d0a09617 	ldw	r2,-32168(gp)
 80292d0:	10800044 	addi	r2,r2,1
 80292d4:	d0a09615 	stw	r2,-32168(gp)
            dsc_errors++;
 80292d8:	d0a08b17 	ldw	r2,-32212(gp)
 80292dc:	10800044 	addi	r2,r2,1
 80292e0:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 80292e4:	00800084 	movi	r2,2
 80292e8:	0000b206 	br	80295b4 <dhc_upcall+0x6d0>
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
 80292ec:	e0bffe17 	ldw	r2,-8(fp)
 80292f0:	10800158 	cmpnei	r2,r2,5
 80292f4:	10006b1e 	bne	r2,zero,80294a4 <dhc_upcall+0x5c0>
         {
            dsc_acks++;
 80292f8:	d0a08f17 	ldw	r2,-32196(gp)
 80292fc:	10800044 	addi	r2,r2,1
 8029300:	d0a08f15 	stw	r2,-32196(gp)
            dhc_extract_opts(iface,&bp->options[4]);
 8029304:	e0bffb17 	ldw	r2,-20(fp)
 8029308:	10803c04 	addi	r2,r2,240
 802930c:	100b883a 	mov	r5,r2
 8029310:	e13ffc17 	ldw	r4,-16(fp)
 8029314:	802aa7c0 	call	802aa7c <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
 8029318:	e0bffc17 	ldw	r2,-16(fp)
 802931c:	10c00f24 	muli	r3,r2,60
 8029320:	008201b4 	movhi	r2,2054
 8029324:	1885883a 	add	r2,r3,r2
 8029328:	10bb0517 	ldw	r2,-5100(r2)
 802932c:	10bfffd8 	cmpnei	r2,r2,-1
 8029330:	10000d1e 	bne	r2,zero,8029368 <dhc_upcall+0x484>
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
 8029334:	e0bffc17 	ldw	r2,-16(fp)
 8029338:	11000f24 	muli	r4,r2,60
 802933c:	00ffffc4 	movi	r3,-1
 8029340:	008201b4 	movhi	r2,2054
 8029344:	2085883a 	add	r2,r4,r2
 8029348:	10fb0615 	stw	r3,-5096(r2)
               dhc_states[iface].t2 = DHC_INFINITY ;
 802934c:	e0bffc17 	ldw	r2,-16(fp)
 8029350:	11000f24 	muli	r4,r2,60
 8029354:	00ffffc4 	movi	r3,-1
 8029358:	008201b4 	movhi	r2,2054
 802935c:	2085883a 	add	r2,r4,r2
 8029360:	10fb0715 	stw	r3,-5092(r2)
 8029364:	00001706 	br	80293c4 <dhc_upcall+0x4e0>
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
 8029368:	e0bffc17 	ldw	r2,-16(fp)
 802936c:	10c00f24 	muli	r3,r2,60
 8029370:	008201b4 	movhi	r2,2054
 8029374:	1885883a 	add	r2,r3,r2
 8029378:	10bb0517 	ldw	r2,-5100(r2)
 802937c:	1006d07a 	srli	r3,r2,1
 8029380:	e0bffc17 	ldw	r2,-16(fp)
 8029384:	11000f24 	muli	r4,r2,60
 8029388:	008201b4 	movhi	r2,2054
 802938c:	2085883a 	add	r2,r4,r2
 8029390:	10fb0615 	stw	r3,-5096(r2)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 8029394:	e0bffc17 	ldw	r2,-16(fp)
 8029398:	10c00f24 	muli	r3,r2,60
 802939c:	008201b4 	movhi	r2,2054
 80293a0:	1885883a 	add	r2,r3,r2
 80293a4:	10bb0517 	ldw	r2,-5100(r2)
 80293a8:	1004d0fa 	srli	r2,r2,3
 80293ac:	10c001e4 	muli	r3,r2,7
 80293b0:	e0bffc17 	ldw	r2,-16(fp)
 80293b4:	11000f24 	muli	r4,r2,60
 80293b8:	008201b4 	movhi	r2,2054
 80293bc:	2085883a 	add	r2,r4,r2
 80293c0:	10fb0715 	stw	r3,-5092(r2)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
 80293c4:	d0e0a317 	ldw	r3,-32116(gp)
 80293c8:	e0bffc17 	ldw	r2,-16(fp)
 80293cc:	11000f24 	muli	r4,r2,60
 80293d0:	008201b4 	movhi	r2,2054
 80293d4:	2085883a 	add	r2,r4,r2
 80293d8:	10fb0815 	stw	r3,-5088(r2)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
 80293dc:	e0bffb17 	ldw	r2,-20(fp)
 80293e0:	10803c04 	addi	r2,r2,240
 80293e4:	1009883a 	mov	r4,r2
 80293e8:	8028d780 	call	8028d78 <dhc_get_srv_ipaddr>
 80293ec:	1009883a 	mov	r4,r2
 80293f0:	e0bffc17 	ldw	r2,-16(fp)
 80293f4:	10c00f24 	muli	r3,r2,60
 80293f8:	008201b4 	movhi	r2,2054
 80293fc:	1885883a 	add	r2,r3,r2
 8029400:	113b0d15 	stw	r4,-5068(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 8029404:	e0bffc17 	ldw	r2,-16(fp)
 8029408:	10c00f24 	muli	r3,r2,60
 802940c:	008201b4 	movhi	r2,2054
 8029410:	1885883a 	add	r2,r3,r2
 8029414:	10bb0d17 	ldw	r2,-5068(r2)
 8029418:	10000b1e 	bne	r2,zero,8029448 <dhc_upcall+0x564>
            {
               dtrap(); /* didn't receive server-identifier option */
 802941c:	802c3fc0 	call	802c3fc <dtrap>
               dsc_errors++;
 8029420:	d0a08b17 	ldw	r2,-32212(gp)
 8029424:	10800044 	addi	r2,r2,1
 8029428:	d0a08b15 	stw	r2,-32212(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 802942c:	e0bff817 	ldw	r2,-32(fp)
 8029430:	10c00717 	ldw	r3,28(r2)
 8029434:	e0bffc17 	ldw	r2,-16(fp)
 8029438:	11000f24 	muli	r4,r2,60
 802943c:	008201b4 	movhi	r2,2054
 8029440:	2085883a 	add	r2,r4,r2
 8029444:	10fb0d15 	stw	r3,-5068(r2)
            }
            if (bp->hops)
 8029448:	e0bffb17 	ldw	r2,-20(fp)
 802944c:	108000c3 	ldbu	r2,3(r2)
 8029450:	10803fcc 	andi	r2,r2,255
 8029454:	10000826 	beq	r2,zero,8029478 <dhc_upcall+0x594>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 8029458:	e0bff817 	ldw	r2,-32(fp)
 802945c:	10c00717 	ldw	r3,28(r2)
 8029460:	e0bffc17 	ldw	r2,-16(fp)
 8029464:	11000f24 	muli	r4,r2,60
 8029468:	008201b4 	movhi	r2,2054
 802946c:	2085883a 	add	r2,r4,r2
 8029470:	10fb0c15 	stw	r3,-5072(r2)
 8029474:	00000506 	br	802948c <dhc_upcall+0x5a8>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 8029478:	e0bffc17 	ldw	r2,-16(fp)
 802947c:	10c00f24 	muli	r3,r2,60
 8029480:	008201b4 	movhi	r2,2054
 8029484:	1885883a 	add	r2,r3,r2
 8029488:	103b0c15 	stw	zero,-5072(r2)

            dhc_setip(iface);
 802948c:	e13ffc17 	ldw	r4,-16(fp)
 8029490:	802a6300 	call	802a630 <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
 8029494:	01400184 	movi	r5,6
 8029498:	e13ffc17 	ldw	r4,-16(fp)
 802949c:	802b4a40 	call	802b4a4 <dhc_set_state>
             * error and discard it with no change to our state.
             */
            dsc_errors++;
            return ENP_NOT_MINE;
         }
         break;
 80294a0:	00004106 	br	80295a8 <dhc_upcall+0x6c4>
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
 80294a4:	e0bffe17 	ldw	r2,-8(fp)
 80294a8:	10800198 	cmpnei	r2,r2,6
 80294ac:	1000071e 	bne	r2,zero,80294cc <dhc_upcall+0x5e8>
            dhc_set_state(iface,DHCS_INIT);
 80294b0:	01400044 	movi	r5,1
 80294b4:	e13ffc17 	ldw	r4,-16(fp)
 80294b8:	802b4a40 	call	802b4a4 <dhc_set_state>
            dsc_naks++;
 80294bc:	d0a09317 	ldw	r2,-32180(gp)
 80294c0:	10800044 	addi	r2,r2,1
 80294c4:	d0a09315 	stw	r2,-32180(gp)
         break;
 80294c8:	00003706 	br	80295a8 <dhc_upcall+0x6c4>
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
 80294cc:	e0bffc17 	ldw	r2,-16(fp)
 80294d0:	10c00f24 	muli	r3,r2,60
 80294d4:	008201b4 	movhi	r2,2054
 80294d8:	1885883a 	add	r2,r3,r2
 80294dc:	10bb0017 	ldw	r2,-5120(r2)
 80294e0:	10800158 	cmpnei	r2,r2,5
 80294e4:	1000081e 	bne	r2,zero,8029508 <dhc_upcall+0x624>
 80294e8:	e0bffe17 	ldw	r2,-8(fp)
 80294ec:	10800098 	cmpnei	r2,r2,2
 80294f0:	1000051e 	bne	r2,zero,8029508 <dhc_upcall+0x624>
               dsc_offers++;
 80294f4:	d0a08d17 	ldw	r2,-32204(gp)
 80294f8:	10800044 	addi	r2,r2,1
 80294fc:	d0a08d15 	stw	r2,-32204(gp)
               return ENP_NOT_MINE;
 8029500:	00800084 	movi	r2,2
 8029504:	00002b06 	br	80295b4 <dhc_upcall+0x6d0>
            dsc_errors++;
 8029508:	d0a08b17 	ldw	r2,-32212(gp)
 802950c:	10800044 	addi	r2,r2,1
 8029510:	d0a08b15 	stw	r2,-32212(gp)
            return ENP_NOT_MINE;
 8029514:	00800084 	movi	r2,2
 8029518:	00002606 	br	80295b4 <dhc_upcall+0x6d0>
      default:    /* bad state */
         dtrap();
 802951c:	802c3fc0 	call	802c3fc <dtrap>
         dhc_set_state(iface,DHCS_INIT);
 8029520:	01400044 	movi	r5,1
 8029524:	e13ffc17 	ldw	r4,-16(fp)
 8029528:	802b4a40 	call	802b4a4 <dhc_set_state>
         dsc_errors++;
 802952c:	d0a08b17 	ldw	r2,-32212(gp)
 8029530:	10800044 	addi	r2,r2,1
 8029534:	d0a08b15 	stw	r2,-32212(gp)
         return -1;
 8029538:	00bfffc4 	movi	r2,-1
 802953c:	00001d06 	br	80295b4 <dhc_upcall+0x6d0>
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
 8029540:	d0a09017 	ldw	r2,-32192(gp)
 8029544:	10800044 	addi	r2,r2,1
 8029548:	d0a09015 	stw	r2,-32192(gp)
      dhc_extract_opts(iface,&bp->options[4]);
 802954c:	e0bffb17 	ldw	r2,-20(fp)
 8029550:	10803c04 	addi	r2,r2,240
 8029554:	100b883a 	mov	r5,r2
 8029558:	e13ffc17 	ldw	r4,-16(fp)
 802955c:	802aa7c0 	call	802aa7c <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
 8029560:	e0bffb17 	ldw	r2,-20(fp)
 8029564:	10c00417 	ldw	r3,16(r2)
 8029568:	e0bffc17 	ldw	r2,-16(fp)
 802956c:	11000f24 	muli	r4,r2,60
 8029570:	008201b4 	movhi	r2,2054
 8029574:	2085883a 	add	r2,r4,r2
 8029578:	10fb0915 	stw	r3,-5084(r2)
      dhc_setip(iface);
 802957c:	e13ffc17 	ldw	r4,-16(fp)
 8029580:	802a6300 	call	802a630 <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
 8029584:	01400184 	movi	r5,6
 8029588:	e13ffc17 	ldw	r4,-16(fp)
 802958c:	802b4a40 	call	802b4a4 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
 8029590:	e0bffc17 	ldw	r2,-16(fp)
 8029594:	11000f24 	muli	r4,r2,60
 8029598:	00ffffc4 	movi	r3,-1
 802959c:	008201b4 	movhi	r2,2054
 80295a0:	2085883a 	add	r2,r4,r2
 80295a4:	10fb0615 	stw	r3,-5096(r2)
   }

   udp_free(pkt);
 80295a8:	e13ff817 	ldw	r4,-32(fp)
 80295ac:	80442a00 	call	80442a0 <udp_free>
   return 0;
 80295b0:	0005883a 	mov	r2,zero
}
 80295b4:	e6ffff04 	addi	sp,fp,-4
 80295b8:	dfc00217 	ldw	ra,8(sp)
 80295bc:	df000117 	ldw	fp,4(sp)
 80295c0:	dc000017 	ldw	r16,0(sp)
 80295c4:	dec00304 	addi	sp,sp,12
 80295c8:	f800283a 	ret

080295cc <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 80295cc:	defffb04 	addi	sp,sp,-20
 80295d0:	dfc00415 	stw	ra,16(sp)
 80295d4:	df000315 	stw	fp,12(sp)
 80295d8:	df000304 	addi	fp,sp,12
 80295dc:	e13ffe15 	stw	r4,-8(fp)
 80295e0:	e17ffd15 	stw	r5,-12(fp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 80295e4:	01804b04 	movi	r6,300
 80295e8:	000b883a 	mov	r5,zero
 80295ec:	e13ffd17 	ldw	r4,-12(fp)
 80295f0:	8002fa40 	call	8002fa4 <memset>
   outbp->op = BOOTREQUEST;
 80295f4:	e0bffd17 	ldw	r2,-12(fp)
 80295f8:	00c00044 	movi	r3,1
 80295fc:	10c00005 	stb	r3,0(r2)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 8029600:	e0bffe17 	ldw	r2,-8(fp)
 8029604:	100690ba 	slli	r3,r2,2
 8029608:	008201b4 	movhi	r2,2054
 802960c:	1885883a 	add	r2,r3,r2
 8029610:	10bada17 	ldw	r2,-5272(r2)
 8029614:	10802717 	ldw	r2,156(r2)
 8029618:	10800217 	ldw	r2,8(r2)
 802961c:	10c00720 	cmpeqi	r3,r2,28
 8029620:	18000b1e 	bne	r3,zero,8029650 <dhc_buildheader+0x84>
 8029624:	10c00768 	cmpgeui	r3,r2,29
 8029628:	18000d1e 	bne	r3,zero,8029660 <dhc_buildheader+0x94>
 802962c:	10c001a0 	cmpeqi	r3,r2,6
 8029630:	1800031e 	bne	r3,zero,8029640 <dhc_buildheader+0x74>
 8029634:	108005e0 	cmpeqi	r2,r2,23
 8029638:	1000051e 	bne	r2,zero,8029650 <dhc_buildheader+0x84>
 802963c:	00000806 	br	8029660 <dhc_buildheader+0x94>
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
 8029640:	e0bffd17 	ldw	r2,-12(fp)
 8029644:	00c00044 	movi	r3,1
 8029648:	10c00045 	stb	r3,1(r2)
   break;
 802964c:	00000706 	br	802966c <dhc_buildheader+0xa0>
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
 8029650:	e0bffd17 	ldw	r2,-12(fp)
 8029654:	00c00504 	movi	r3,20
 8029658:	10c00045 	stb	r3,1(r2)
   break;
 802965c:	00000306 	br	802966c <dhc_buildheader+0xa0>
      default:
      dtrap();
 8029660:	802c3fc0 	call	802c3fc <dtrap>
      return ENP_LOGIC;             /* this shouldn't happen */
 8029664:	00bffd44 	movi	r2,-11
 8029668:	00004206 	br	8029774 <dhc_buildheader+0x1a8>
   }

   addrlen = min(16, nets[iface]->n_hal);
 802966c:	e0bffe17 	ldw	r2,-8(fp)
 8029670:	100690ba 	slli	r3,r2,2
 8029674:	008201b4 	movhi	r2,2054
 8029678:	1885883a 	add	r2,r3,r2
 802967c:	10bada17 	ldw	r2,-5272(r2)
 8029680:	10801117 	ldw	r2,68(r2)
 8029684:	10c00470 	cmpltui	r3,r2,17
 8029688:	1800011e 	bne	r3,zero,8029690 <dhc_buildheader+0xc4>
 802968c:	00800404 	movi	r2,16
 8029690:	e0bfff15 	stw	r2,-4(fp)
   outbp->hlen = (u_char)addrlen;
 8029694:	e0bfff17 	ldw	r2,-4(fp)
 8029698:	1007883a 	mov	r3,r2
 802969c:	e0bffd17 	ldw	r2,-12(fp)
 80296a0:	10c00085 	stb	r3,2(r2)
   outbp->hops = 0;
 80296a4:	e0bffd17 	ldw	r2,-12(fp)
 80296a8:	100000c5 	stb	zero,3(r2)
   if(dhc_states[iface].state == DHCS_RENEWING) 
 80296ac:	e0bffe17 	ldw	r2,-8(fp)
 80296b0:	10c00f24 	muli	r3,r2,60
 80296b4:	008201b4 	movhi	r2,2054
 80296b8:	1885883a 	add	r2,r3,r2
 80296bc:	10bb0017 	ldw	r2,-5120(r2)
 80296c0:	108001d8 	cmpnei	r2,r2,7
 80296c4:	1000031e 	bne	r2,zero,80296d4 <dhc_buildheader+0x108>
      outbp->flags = 0; /* Renewing needs unicast */
 80296c8:	e0bffd17 	ldw	r2,-12(fp)
 80296cc:	1000028d 	sth	zero,10(r2)
 80296d0:	00000306 	br	80296e0 <dhc_buildheader+0x114>
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
 80296d4:	e0bffd17 	ldw	r2,-12(fp)
 80296d8:	00c02004 	movi	r3,128
 80296dc:	10c0028d 	sth	r3,10(r2)
   outbp->xid = dhc_states[iface].xid;
 80296e0:	e0bffe17 	ldw	r2,-8(fp)
 80296e4:	10c00f24 	muli	r3,r2,60
 80296e8:	008201b4 	movhi	r2,2054
 80296ec:	1885883a 	add	r2,r3,r2
 80296f0:	10fb0217 	ldw	r3,-5112(r2)
 80296f4:	e0bffd17 	ldw	r2,-12(fp)
 80296f8:	10c00115 	stw	r3,4(r2)
   outbp->secs = dhc_states[iface].secs;
 80296fc:	e0bffe17 	ldw	r2,-8(fp)
 8029700:	10c00f24 	muli	r3,r2,60
 8029704:	008201b4 	movhi	r2,2054
 8029708:	1885883a 	add	r2,r3,r2
 802970c:	10fb030b 	ldhu	r3,-5108(r2)
 8029710:	e0bffd17 	ldw	r2,-12(fp)
 8029714:	10c0020d 	sth	r3,8(r2)
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 8029718:	e0bffe17 	ldw	r2,-8(fp)
 802971c:	100690ba 	slli	r3,r2,2
 8029720:	008201b4 	movhi	r2,2054
 8029724:	1885883a 	add	r2,r3,r2
 8029728:	10bada17 	ldw	r2,-5272(r2)
 802972c:	10801717 	ldw	r2,92(r2)
 8029730:	1000031e 	bne	r2,zero,8029740 <dhc_buildheader+0x174>
   {
      dtrap();
 8029734:	802c3fc0 	call	802c3fc <dtrap>
      return ENP_LOGIC;
 8029738:	00bffd44 	movi	r2,-11
 802973c:	00000d06 	br	8029774 <dhc_buildheader+0x1a8>
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
 8029740:	e0bffd17 	ldw	r2,-12(fp)
 8029744:	11000704 	addi	r4,r2,28
 8029748:	e0bffe17 	ldw	r2,-8(fp)
 802974c:	100690ba 	slli	r3,r2,2
 8029750:	008201b4 	movhi	r2,2054
 8029754:	1885883a 	add	r2,r3,r2
 8029758:	10bada17 	ldw	r2,-5272(r2)
 802975c:	10801717 	ldw	r2,92(r2)
 8029760:	e0ffff17 	ldw	r3,-4(fp)
 8029764:	180d883a 	mov	r6,r3
 8029768:	100b883a 	mov	r5,r2
 802976c:	8002ea40 	call	8002ea4 <memcpy>

   /* return success */
   return 0;
 8029770:	0005883a 	mov	r2,zero
}
 8029774:	e037883a 	mov	sp,fp
 8029778:	dfc00117 	ldw	ra,4(sp)
 802977c:	df000017 	ldw	fp,0(sp)
 8029780:	dec00204 	addi	sp,sp,8
 8029784:	f800283a 	ret

08029788 <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 8029788:	defff604 	addi	sp,sp,-40
 802978c:	dfc00915 	stw	ra,36(sp)
 8029790:	df000815 	stw	fp,32(sp)
 8029794:	df000804 	addi	fp,sp,32
 8029798:	e13ff815 	stw	r4,-32(fp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 802979c:	000b883a 	mov	r5,zero
 80297a0:	01004b04 	movi	r4,300
 80297a4:	80441c00 	call	80441c0 <udp_alloc>
 80297a8:	e0bffd15 	stw	r2,-12(fp)
   if (!pkt) 
 80297ac:	e0bffd17 	ldw	r2,-12(fp)
 80297b0:	1000021e 	bne	r2,zero,80297bc <dhc_discover+0x34>
      return ENP_NOMEM;
 80297b4:	00bffb04 	movi	r2,-20
 80297b8:	00010006 	br	8029bbc <dhc_discover+0x434>
   pkt->nb_plen = sizeof(struct bootp);
 80297bc:	e0bffd17 	ldw	r2,-12(fp)
 80297c0:	00c04b04 	movi	r3,300
 80297c4:	10c00415 	stw	r3,16(r2)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 80297c8:	d0a02f17 	ldw	r2,-32580(gp)
 80297cc:	10c00044 	addi	r3,r2,1
 80297d0:	d0e02f15 	stw	r3,-32580(gp)
 80297d4:	1009883a 	mov	r4,r2
 80297d8:	e0bff817 	ldw	r2,-32(fp)
 80297dc:	10c00f24 	muli	r3,r2,60
 80297e0:	008201b4 	movhi	r2,2054
 80297e4:	1885883a 	add	r2,r3,r2
 80297e8:	113b0215 	stw	r4,-5112(r2)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 80297ec:	803c3f00 	call	803c3f0 <sysuptime>
 80297f0:	01401904 	movi	r5,100
 80297f4:	1009883a 	mov	r4,r2
 80297f8:	800e2300 	call	800e230 <__udivsi3>
 80297fc:	1009883a 	mov	r4,r2
 8029800:	e0bff817 	ldw	r2,-32(fp)
 8029804:	10c00f24 	muli	r3,r2,60
 8029808:	008201b4 	movhi	r2,2054
 802980c:	1885883a 	add	r2,r3,r2
 8029810:	113b030d 	sth	r4,-5108(r2)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
 8029814:	e0bffd17 	ldw	r2,-12(fp)
 8029818:	10800317 	ldw	r2,12(r2)
 802981c:	e0bffc15 	stw	r2,-16(fp)
   e = dhc_buildheader(iface,outbp);
 8029820:	e17ffc17 	ldw	r5,-16(fp)
 8029824:	e13ff817 	ldw	r4,-32(fp)
 8029828:	80295cc0 	call	80295cc <dhc_buildheader>
 802982c:	e0bffb15 	stw	r2,-20(fp)
   if (e)
 8029830:	e0bffb17 	ldw	r2,-20(fp)
 8029834:	10000226 	beq	r2,zero,8029840 <dhc_discover+0xb8>
      return e;
 8029838:	e0bffb17 	ldw	r2,-20(fp)
 802983c:	0000df06 	br	8029bbc <dhc_discover+0x434>

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 8029840:	e0bffc17 	ldw	r2,-16(fp)
 8029844:	10c03b04 	addi	r3,r2,236
 8029848:	0098d534 	movhi	r2,25428
 802984c:	10a098c4 	addi	r2,r2,-32157
 8029850:	18800015 	stw	r2,0(r3)
   opts = &outbp->options[4];    /* encode options after cookie */
 8029854:	e0bffc17 	ldw	r2,-16(fp)
 8029858:	10803c04 	addi	r2,r2,240
 802985c:	e0bfff15 	stw	r2,-4(fp)
   *opts++ = DHOP_TYPE;
 8029860:	e0bfff17 	ldw	r2,-4(fp)
 8029864:	10c00044 	addi	r3,r2,1
 8029868:	e0ffff15 	stw	r3,-4(fp)
 802986c:	00c00d44 	movi	r3,53
 8029870:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
 8029874:	e0bfff17 	ldw	r2,-4(fp)
 8029878:	10c00044 	addi	r3,r2,1
 802987c:	e0ffff15 	stw	r3,-4(fp)
 8029880:	00c00044 	movi	r3,1
 8029884:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_DISCOVER;
 8029888:	e0bfff17 	ldw	r2,-4(fp)
 802988c:	10c00044 	addi	r3,r2,1
 8029890:	e0ffff15 	stw	r3,-4(fp)
 8029894:	00c00044 	movi	r3,1
 8029898:	10c00005 	stb	r3,0(r2)
   leasetime = -1L ;    /* ask for infinite lease */
 802989c:	00bfffc4 	movi	r2,-1
 80298a0:	e0bffa15 	stw	r2,-24(fp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 80298a4:	e0bfff17 	ldw	r2,-4(fp)
 80298a8:	10c00044 	addi	r3,r2,1
 80298ac:	e0ffff15 	stw	r3,-4(fp)
 80298b0:	00c00cc4 	movi	r3,51
 80298b4:	10c00005 	stb	r3,0(r2)
 80298b8:	e0bfff17 	ldw	r2,-4(fp)
 80298bc:	10c00044 	addi	r3,r2,1
 80298c0:	e0ffff15 	stw	r3,-4(fp)
 80298c4:	00c00104 	movi	r3,4
 80298c8:	10c00005 	stb	r3,0(r2)
 80298cc:	e0bffa04 	addi	r2,fp,-24
 80298d0:	10c00003 	ldbu	r3,0(r2)
 80298d4:	e0bfff17 	ldw	r2,-4(fp)
 80298d8:	108000c4 	addi	r2,r2,3
 80298dc:	10c00005 	stb	r3,0(r2)
 80298e0:	e0bffa04 	addi	r2,fp,-24
 80298e4:	10800044 	addi	r2,r2,1
 80298e8:	10c00003 	ldbu	r3,0(r2)
 80298ec:	e0bfff17 	ldw	r2,-4(fp)
 80298f0:	10800084 	addi	r2,r2,2
 80298f4:	10c00005 	stb	r3,0(r2)
 80298f8:	e0bffa04 	addi	r2,fp,-24
 80298fc:	10800084 	addi	r2,r2,2
 8029900:	10c00003 	ldbu	r3,0(r2)
 8029904:	e0bfff17 	ldw	r2,-4(fp)
 8029908:	10800044 	addi	r2,r2,1
 802990c:	10c00005 	stb	r3,0(r2)
 8029910:	e0bffa04 	addi	r2,fp,-24
 8029914:	108000c4 	addi	r2,r2,3
 8029918:	10800003 	ldbu	r2,0(r2)
 802991c:	1007883a 	mov	r3,r2
 8029920:	e0bfff17 	ldw	r2,-4(fp)
 8029924:	10c00005 	stb	r3,0(r2)
 8029928:	e0bfff17 	ldw	r2,-4(fp)
 802992c:	10800104 	addi	r2,r2,4
 8029930:	e0bfff15 	stw	r2,-4(fp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 8029934:	e0bff817 	ldw	r2,-32(fp)
 8029938:	100690ba 	slli	r3,r2,2
 802993c:	008201b4 	movhi	r2,2054
 8029940:	1885883a 	add	r2,r3,r2
 8029944:	10bada17 	ldw	r2,-5272(r2)
 8029948:	10800a17 	ldw	r2,40(r2)
 802994c:	10004626 	beq	r2,zero,8029a68 <dhc_discover+0x2e0>
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
 8029950:	e0bff817 	ldw	r2,-32(fp)
 8029954:	100690ba 	slli	r3,r2,2
 8029958:	008201b4 	movhi	r2,2054
 802995c:	1885883a 	add	r2,r3,r2
 8029960:	10bada17 	ldw	r2,-5272(r2)
 8029964:	10800a17 	ldw	r2,40(r2)
 8029968:	1006d63a 	srli	r3,r2,24
 802996c:	e0bff817 	ldw	r2,-32(fp)
 8029970:	100890ba 	slli	r4,r2,2
 8029974:	008201b4 	movhi	r2,2054
 8029978:	2085883a 	add	r2,r4,r2
 802997c:	10bada17 	ldw	r2,-5272(r2)
 8029980:	10800a17 	ldw	r2,40(r2)
 8029984:	1004d23a 	srli	r2,r2,8
 8029988:	10bfc00c 	andi	r2,r2,65280
 802998c:	1886b03a 	or	r3,r3,r2
 8029990:	e0bff817 	ldw	r2,-32(fp)
 8029994:	100890ba 	slli	r4,r2,2
 8029998:	008201b4 	movhi	r2,2054
 802999c:	2085883a 	add	r2,r4,r2
 80299a0:	10bada17 	ldw	r2,-5272(r2)
 80299a4:	10800a17 	ldw	r2,40(r2)
 80299a8:	1004923a 	slli	r2,r2,8
 80299ac:	10803fec 	andhi	r2,r2,255
 80299b0:	1886b03a 	or	r3,r3,r2
 80299b4:	e0bff817 	ldw	r2,-32(fp)
 80299b8:	100890ba 	slli	r4,r2,2
 80299bc:	008201b4 	movhi	r2,2054
 80299c0:	2085883a 	add	r2,r4,r2
 80299c4:	10bada17 	ldw	r2,-5272(r2)
 80299c8:	10800a17 	ldw	r2,40(r2)
 80299cc:	1004963a 	slli	r2,r2,24
 80299d0:	1884b03a 	or	r2,r3,r2
 80299d4:	e0bff915 	stw	r2,-28(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
 80299d8:	e0bfff17 	ldw	r2,-4(fp)
 80299dc:	10c00044 	addi	r3,r2,1
 80299e0:	e0ffff15 	stw	r3,-4(fp)
 80299e4:	00c00c84 	movi	r3,50
 80299e8:	10c00005 	stb	r3,0(r2)
 80299ec:	e0bfff17 	ldw	r2,-4(fp)
 80299f0:	10c00044 	addi	r3,r2,1
 80299f4:	e0ffff15 	stw	r3,-4(fp)
 80299f8:	00c00104 	movi	r3,4
 80299fc:	10c00005 	stb	r3,0(r2)
 8029a00:	e0bff904 	addi	r2,fp,-28
 8029a04:	10c00003 	ldbu	r3,0(r2)
 8029a08:	e0bfff17 	ldw	r2,-4(fp)
 8029a0c:	108000c4 	addi	r2,r2,3
 8029a10:	10c00005 	stb	r3,0(r2)
 8029a14:	e0bff904 	addi	r2,fp,-28
 8029a18:	10800044 	addi	r2,r2,1
 8029a1c:	10c00003 	ldbu	r3,0(r2)
 8029a20:	e0bfff17 	ldw	r2,-4(fp)
 8029a24:	10800084 	addi	r2,r2,2
 8029a28:	10c00005 	stb	r3,0(r2)
 8029a2c:	e0bff904 	addi	r2,fp,-28
 8029a30:	10800084 	addi	r2,r2,2
 8029a34:	10c00003 	ldbu	r3,0(r2)
 8029a38:	e0bfff17 	ldw	r2,-4(fp)
 8029a3c:	10800044 	addi	r2,r2,1
 8029a40:	10c00005 	stb	r3,0(r2)
 8029a44:	e0bff904 	addi	r2,fp,-28
 8029a48:	108000c4 	addi	r2,r2,3
 8029a4c:	10800003 	ldbu	r2,0(r2)
 8029a50:	1007883a 	mov	r3,r2
 8029a54:	e0bfff17 	ldw	r2,-4(fp)
 8029a58:	10c00005 	stb	r3,0(r2)
 8029a5c:	e0bfff17 	ldw	r2,-4(fp)
 8029a60:	10800104 	addi	r2,r2,4
 8029a64:	e0bfff15 	stw	r2,-4(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 8029a68:	d0a03117 	ldw	r2,-32572(gp)
 8029a6c:	00801b0e 	bge	zero,r2,8029adc <dhc_discover+0x354>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 8029a70:	e0bfff17 	ldw	r2,-4(fp)
 8029a74:	10c00044 	addi	r3,r2,1
 8029a78:	e0ffff15 	stw	r3,-4(fp)
 8029a7c:	00c00dc4 	movi	r3,55
 8029a80:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
 8029a84:	d1203117 	ldw	r4,-32572(gp)
 8029a88:	e0bfff17 	ldw	r2,-4(fp)
 8029a8c:	10c00044 	addi	r3,r2,1
 8029a90:	e0ffff15 	stw	r3,-4(fp)
 8029a94:	2007883a 	mov	r3,r4
 8029a98:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
 8029a9c:	e03ffe15 	stw	zero,-8(fp)
 8029aa0:	00000b06 	br	8029ad0 <dhc_discover+0x348>
         *opts++ = reqlist[i];
 8029aa4:	e0bfff17 	ldw	r2,-4(fp)
 8029aa8:	10c00044 	addi	r3,r2,1
 8029aac:	e0ffff15 	stw	r3,-4(fp)
 8029ab0:	e13ffe17 	ldw	r4,-8(fp)
 8029ab4:	d0e03004 	addi	r3,gp,-32576
 8029ab8:	20c7883a 	add	r3,r4,r3
 8029abc:	18c00003 	ldbu	r3,0(r3)
 8029ac0:	10c00005 	stb	r3,0(r2)
      for (i=0 ; i < reqlist_len ; i++ )
 8029ac4:	e0bffe17 	ldw	r2,-8(fp)
 8029ac8:	10800044 	addi	r2,r2,1
 8029acc:	e0bffe15 	stw	r2,-8(fp)
 8029ad0:	d0a03117 	ldw	r2,-32572(gp)
 8029ad4:	e0fffe17 	ldw	r3,-8(fp)
 8029ad8:	18bff216 	blt	r3,r2,8029aa4 <dhc_discover+0x31c>
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
 8029adc:	e0bfff17 	ldw	r2,-4(fp)
 8029ae0:	10c00044 	addi	r3,r2,1
 8029ae4:	e0ffff15 	stw	r3,-4(fp)
 8029ae8:	00ffffc4 	movi	r3,-1
 8029aec:	10c00005 	stb	r3,0(r2)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
 8029af0:	d0e0a317 	ldw	r3,-32116(gp)
 8029af4:	e0bff817 	ldw	r2,-32(fp)
 8029af8:	11000f24 	muli	r4,r2,60
 8029afc:	008201b4 	movhi	r2,2054
 8029b00:	2085883a 	add	r2,r4,r2
 8029b04:	10fb0415 	stw	r3,-5104(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
 8029b08:	e0bffd17 	ldw	r2,-12(fp)
 8029b0c:	00ffffc4 	movi	r3,-1
 8029b10:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 8029b14:	e0bff817 	ldw	r2,-32(fp)
 8029b18:	100690ba 	slli	r3,r2,2
 8029b1c:	008201b4 	movhi	r2,2054
 8029b20:	1885883a 	add	r2,r3,r2
 8029b24:	10fada17 	ldw	r3,-5272(r2)
 8029b28:	e0bffd17 	ldw	r2,-12(fp)
 8029b2c:	10c00615 	stw	r3,24(r2)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 8029b30:	e0bff817 	ldw	r2,-32(fp)
 8029b34:	10c00f24 	muli	r3,r2,60
 8029b38:	008201b4 	movhi	r2,2054
 8029b3c:	1885883a 	add	r2,r3,r2
 8029b40:	10bb0017 	ldw	r2,-5120(r2)
 8029b44:	10800120 	cmpeqi	r2,r2,4
 8029b48:	1000031e 	bne	r2,zero,8029b58 <dhc_discover+0x3d0>
      dhc_set_state(iface, DHCS_SELECTING);
 8029b4c:	01400104 	movi	r5,4
 8029b50:	e13ff817 	ldw	r4,-32(fp)
 8029b54:	802b4a40 	call	802b4a4 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 8029b58:	e1bffd17 	ldw	r6,-12(fp)
 8029b5c:	01401104 	movi	r5,68
 8029b60:	010010c4 	movi	r4,67
 8029b64:	8043d880 	call	8043d88 <udp_send>
   dsc_discovers++;
 8029b68:	d0a08c17 	ldw	r2,-32208(gp)
 8029b6c:	10800044 	addi	r2,r2,1
 8029b70:	d0a08c15 	stw	r2,-32208(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
 8029b74:	d0e0a317 	ldw	r3,-32116(gp)
 8029b78:	e0bff817 	ldw	r2,-32(fp)
 8029b7c:	11000f24 	muli	r4,r2,60
 8029b80:	008201b4 	movhi	r2,2054
 8029b84:	2085883a 	add	r2,r4,r2
 8029b88:	10fb0415 	stw	r3,-5104(r2)
   dhc_states[iface].tries++;
 8029b8c:	e0bff817 	ldw	r2,-32(fp)
 8029b90:	10c00f24 	muli	r3,r2,60
 8029b94:	008201b4 	movhi	r2,2054
 8029b98:	1885883a 	add	r2,r3,r2
 8029b9c:	10bb0117 	ldw	r2,-5116(r2)
 8029ba0:	10c00044 	addi	r3,r2,1
 8029ba4:	e0bff817 	ldw	r2,-32(fp)
 8029ba8:	11000f24 	muli	r4,r2,60
 8029bac:	008201b4 	movhi	r2,2054
 8029bb0:	2085883a 	add	r2,r4,r2
 8029bb4:	10fb0115 	stw	r3,-5116(r2)

   return 0;
 8029bb8:	0005883a 	mov	r2,zero
}
 8029bbc:	e037883a 	mov	sp,fp
 8029bc0:	dfc00117 	ldw	ra,4(sp)
 8029bc4:	df000017 	ldw	fp,0(sp)
 8029bc8:	dec00204 	addi	sp,sp,8
 8029bcc:	f800283a 	ret

08029bd0 <dhc_rx_offer>:
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 8029bd0:	defff904 	addi	sp,sp,-28
 8029bd4:	dfc00615 	stw	ra,24(sp)
 8029bd8:	df000515 	stw	fp,20(sp)
 8029bdc:	df000504 	addi	fp,sp,20
 8029be0:	e13ffd15 	stw	r4,-12(fp)
 8029be4:	e17ffc15 	stw	r5,-16(fp)
 8029be8:	e1bffb15 	stw	r6,-20(fp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 8029bec:	e0bffd17 	ldw	r2,-12(fp)
 8029bf0:	10c00f24 	muli	r3,r2,60
 8029bf4:	008201b4 	movhi	r2,2054
 8029bf8:	1885883a 	add	r2,r3,r2
 8029bfc:	10fb0217 	ldw	r3,-5112(r2)
 8029c00:	e0bffc17 	ldw	r2,-16(fp)
 8029c04:	10800117 	ldw	r2,4(r2)
 8029c08:	18800226 	beq	r3,r2,8029c14 <dhc_rx_offer+0x44>
      return ENP_NOT_MINE;
 8029c0c:	00800084 	movi	r2,2
 8029c10:	00001f06 	br	8029c90 <dhc_rx_offer+0xc0>

   opts = &bp->options[4];    /* examine options after cookie */
 8029c14:	e0bffc17 	ldw	r2,-16(fp)
 8029c18:	10803c04 	addi	r2,r2,240
 8029c1c:	e0bfff15 	stw	r2,-4(fp)
   e = dhc_extract_opts(iface,opts);
 8029c20:	e17fff17 	ldw	r5,-4(fp)
 8029c24:	e13ffd17 	ldw	r4,-12(fp)
 8029c28:	802aa7c0 	call	802aa7c <dhc_extract_opts>
 8029c2c:	e0bffe15 	stw	r2,-8(fp)
   if (e)   /* parse error? */
 8029c30:	e0bffe17 	ldw	r2,-8(fp)
 8029c34:	10000326 	beq	r2,zero,8029c44 <dhc_rx_offer+0x74>
   {
      dtrap();
 8029c38:	802c3fc0 	call	802c3fc <dtrap>
      return e;
 8029c3c:	e0bffe17 	ldw	r2,-8(fp)
 8029c40:	00001306 	br	8029c90 <dhc_rx_offer+0xc0>
   }
   if (!bp->yiaddr)  /* require an IP address */
 8029c44:	e0bffc17 	ldw	r2,-16(fp)
 8029c48:	10800417 	ldw	r2,16(r2)
 8029c4c:	1000061e 	bne	r2,zero,8029c68 <dhc_rx_offer+0x98>
   {
      dhc_decline(iface,bp, bplen);
 8029c50:	e1bffb17 	ldw	r6,-20(fp)
 8029c54:	e17ffc17 	ldw	r5,-16(fp)
 8029c58:	e13ffd17 	ldw	r4,-12(fp)
 8029c5c:	802a8d00 	call	802a8d0 <dhc_decline>
      return ENP_NOT_MINE;
 8029c60:	00800084 	movi	r2,2
 8029c64:	00000a06 	br	8029c90 <dhc_rx_offer+0xc0>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
 8029c68:	e0bffc17 	ldw	r2,-16(fp)
 8029c6c:	10c00417 	ldw	r3,16(r2)
 8029c70:	e0bffd17 	ldw	r2,-12(fp)
 8029c74:	11000f24 	muli	r4,r2,60
 8029c78:	008201b4 	movhi	r2,2054
 8029c7c:	2085883a 	add	r2,r4,r2
 8029c80:	10fb0915 	stw	r3,-5084(r2)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
 8029c84:	000b883a 	mov	r5,zero
 8029c88:	e13ffd17 	ldw	r4,-12(fp)
 8029c8c:	8029ca40 	call	8029ca4 <dhc_request>
}
 8029c90:	e037883a 	mov	sp,fp
 8029c94:	dfc00117 	ldw	ra,4(sp)
 8029c98:	df000017 	ldw	fp,0(sp)
 8029c9c:	dec00204 	addi	sp,sp,8
 8029ca0:	f800283a 	ret

08029ca4 <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
 8029ca4:	defff404 	addi	sp,sp,-48
 8029ca8:	dfc00b15 	stw	ra,44(sp)
 8029cac:	df000a15 	stw	fp,40(sp)
 8029cb0:	df000a04 	addi	fp,sp,40
 8029cb4:	e13ff715 	stw	r4,-36(fp)
 8029cb8:	e17ff615 	stw	r5,-40(fp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
 8029cbc:	000b883a 	mov	r5,zero
 8029cc0:	01008904 	movi	r4,548
 8029cc4:	80441c00 	call	80441c0 <udp_alloc>
 8029cc8:	e0bffd15 	stw	r2,-12(fp)
   if (!pkt) 
 8029ccc:	e0bffd17 	ldw	r2,-12(fp)
 8029cd0:	1000021e 	bne	r2,zero,8029cdc <dhc_request+0x38>
      return ENP_NOMEM;
 8029cd4:	00bffb04 	movi	r2,-20
 8029cd8:	00025006 	br	802a61c <dhc_request+0x978>
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
 8029cdc:	e0bffd17 	ldw	r2,-12(fp)
 8029ce0:	00c03b04 	movi	r3,236
 8029ce4:	10c00415 	stw	r3,16(r2)

   if ( xid_flag == TRUE )
 8029ce8:	e0bff617 	ldw	r2,-40(fp)
 8029cec:	10800058 	cmpnei	r2,r2,1
 8029cf0:	10000e1e 	bne	r2,zero,8029d2c <dhc_request+0x88>
   {
      dhc_states[iface].xid  = xids++;
 8029cf4:	d0a02f17 	ldw	r2,-32580(gp)
 8029cf8:	10c00044 	addi	r3,r2,1
 8029cfc:	d0e02f15 	stw	r3,-32580(gp)
 8029d00:	1009883a 	mov	r4,r2
 8029d04:	e0bff717 	ldw	r2,-36(fp)
 8029d08:	10c00f24 	muli	r3,r2,60
 8029d0c:	008201b4 	movhi	r2,2054
 8029d10:	1885883a 	add	r2,r3,r2
 8029d14:	113b0215 	stw	r4,-5112(r2)
      dhc_states[iface].secs = 0;
 8029d18:	e0bff717 	ldw	r2,-36(fp)
 8029d1c:	10c00f24 	muli	r3,r2,60
 8029d20:	008201b4 	movhi	r2,2054
 8029d24:	1885883a 	add	r2,r3,r2
 8029d28:	103b030d 	sth	zero,-5108(r2)
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
 8029d2c:	e0bffd17 	ldw	r2,-12(fp)
 8029d30:	10800317 	ldw	r2,12(r2)
 8029d34:	e0bffc15 	stw	r2,-16(fp)
   e     = dhc_buildheader(iface,outbp);
 8029d38:	e17ffc17 	ldw	r5,-16(fp)
 8029d3c:	e13ff717 	ldw	r4,-36(fp)
 8029d40:	80295cc0 	call	80295cc <dhc_buildheader>
 8029d44:	e0bffb15 	stw	r2,-20(fp)
   if (e)
 8029d48:	e0bffb17 	ldw	r2,-20(fp)
 8029d4c:	10000226 	beq	r2,zero,8029d58 <dhc_request+0xb4>
      return e;
 8029d50:	e0bffb17 	ldw	r2,-20(fp)
 8029d54:	00023106 	br	802a61c <dhc_request+0x978>

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 8029d58:	e0bffc17 	ldw	r2,-16(fp)
 8029d5c:	10c03b04 	addi	r3,r2,236
 8029d60:	0098d534 	movhi	r2,25428
 8029d64:	10a098c4 	addi	r2,r2,-32157
 8029d68:	18800015 	stw	r2,0(r3)
   opts    = &outbp->options[4];    /* encode options after cookie */
 8029d6c:	e0bffc17 	ldw	r2,-16(fp)
 8029d70:	10803c04 	addi	r2,r2,240
 8029d74:	e0bfff15 	stw	r2,-4(fp)
   *opts++ = DHOP_TYPE;
 8029d78:	e0bfff17 	ldw	r2,-4(fp)
 8029d7c:	10c00044 	addi	r3,r2,1
 8029d80:	e0ffff15 	stw	r3,-4(fp)
 8029d84:	00c00d44 	movi	r3,53
 8029d88:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
 8029d8c:	e0bfff17 	ldw	r2,-4(fp)
 8029d90:	10c00044 	addi	r3,r2,1
 8029d94:	e0ffff15 	stw	r3,-4(fp)
 8029d98:	00c00044 	movi	r3,1
 8029d9c:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_REQUEST;
 8029da0:	e0bfff17 	ldw	r2,-4(fp)
 8029da4:	10c00044 	addi	r3,r2,1
 8029da8:	e0ffff15 	stw	r3,-4(fp)
 8029dac:	00c000c4 	movi	r3,3
 8029db0:	10c00005 	stb	r3,0(r2)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 8029db4:	e0bff717 	ldw	r2,-36(fp)
 8029db8:	10c00f24 	muli	r3,r2,60
 8029dbc:	008201b4 	movhi	r2,2054
 8029dc0:	1885883a 	add	r2,r3,r2
 8029dc4:	10bb0017 	ldw	r2,-5120(r2)
 8029dc8:	10800120 	cmpeqi	r2,r2,4
 8029dcc:	1000151e 	bne	r2,zero,8029e24 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
 8029dd0:	e0bff717 	ldw	r2,-36(fp)
 8029dd4:	10c00f24 	muli	r3,r2,60
 8029dd8:	008201b4 	movhi	r2,2054
 8029ddc:	1885883a 	add	r2,r3,r2
 8029de0:	10bb0017 	ldw	r2,-5120(r2)
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 8029de4:	10800160 	cmpeqi	r2,r2,5
 8029de8:	10000e1e 	bne	r2,zero,8029e24 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_REBOOTING) ||
 8029dec:	e0bff717 	ldw	r2,-36(fp)
 8029df0:	10c00f24 	muli	r3,r2,60
 8029df4:	008201b4 	movhi	r2,2054
 8029df8:	1885883a 	add	r2,r3,r2
 8029dfc:	10bb0017 	ldw	r2,-5120(r2)
       (dhc_states[iface].state == DHCS_REQUESTING) ||
 8029e00:	108000e0 	cmpeqi	r2,r2,3
 8029e04:	1000071e 	bne	r2,zero,8029e24 <dhc_request+0x180>
       (dhc_states[iface].state == DHCS_INITREBOOT))
 8029e08:	e0bff717 	ldw	r2,-36(fp)
 8029e0c:	10c00f24 	muli	r3,r2,60
 8029e10:	008201b4 	movhi	r2,2054
 8029e14:	1885883a 	add	r2,r3,r2
 8029e18:	10bb0017 	ldw	r2,-5120(r2)
       (dhc_states[iface].state == DHCS_REBOOTING) ||
 8029e1c:	10800098 	cmpnei	r2,r2,2
 8029e20:	1000421e 	bne	r2,zero,8029f2c <dhc_request+0x288>
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
 8029e24:	e0bff717 	ldw	r2,-36(fp)
 8029e28:	10c00f24 	muli	r3,r2,60
 8029e2c:	008201b4 	movhi	r2,2054
 8029e30:	1885883a 	add	r2,r3,r2
 8029e34:	10bb0917 	ldw	r2,-5084(r2)
 8029e38:	1006d63a 	srli	r3,r2,24
 8029e3c:	e0bff717 	ldw	r2,-36(fp)
 8029e40:	11000f24 	muli	r4,r2,60
 8029e44:	008201b4 	movhi	r2,2054
 8029e48:	2085883a 	add	r2,r4,r2
 8029e4c:	10bb0917 	ldw	r2,-5084(r2)
 8029e50:	1004d23a 	srli	r2,r2,8
 8029e54:	10bfc00c 	andi	r2,r2,65280
 8029e58:	1886b03a 	or	r3,r3,r2
 8029e5c:	e0bff717 	ldw	r2,-36(fp)
 8029e60:	11000f24 	muli	r4,r2,60
 8029e64:	008201b4 	movhi	r2,2054
 8029e68:	2085883a 	add	r2,r4,r2
 8029e6c:	10bb0917 	ldw	r2,-5084(r2)
 8029e70:	1004923a 	slli	r2,r2,8
 8029e74:	10803fec 	andhi	r2,r2,255
 8029e78:	1886b03a 	or	r3,r3,r2
 8029e7c:	e0bff717 	ldw	r2,-36(fp)
 8029e80:	11000f24 	muli	r4,r2,60
 8029e84:	008201b4 	movhi	r2,2054
 8029e88:	2085883a 	add	r2,r4,r2
 8029e8c:	10bb0917 	ldw	r2,-5084(r2)
 8029e90:	1004963a 	slli	r2,r2,24
 8029e94:	1884b03a 	or	r2,r3,r2
 8029e98:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
 8029e9c:	e0bfff17 	ldw	r2,-4(fp)
 8029ea0:	10c00044 	addi	r3,r2,1
 8029ea4:	e0ffff15 	stw	r3,-4(fp)
 8029ea8:	00c00c84 	movi	r3,50
 8029eac:	10c00005 	stb	r3,0(r2)
 8029eb0:	e0bfff17 	ldw	r2,-4(fp)
 8029eb4:	10c00044 	addi	r3,r2,1
 8029eb8:	e0ffff15 	stw	r3,-4(fp)
 8029ebc:	00c00104 	movi	r3,4
 8029ec0:	10c00005 	stb	r3,0(r2)
 8029ec4:	e0bff804 	addi	r2,fp,-32
 8029ec8:	10c00003 	ldbu	r3,0(r2)
 8029ecc:	e0bfff17 	ldw	r2,-4(fp)
 8029ed0:	108000c4 	addi	r2,r2,3
 8029ed4:	10c00005 	stb	r3,0(r2)
 8029ed8:	e0bff804 	addi	r2,fp,-32
 8029edc:	10800044 	addi	r2,r2,1
 8029ee0:	10c00003 	ldbu	r3,0(r2)
 8029ee4:	e0bfff17 	ldw	r2,-4(fp)
 8029ee8:	10800084 	addi	r2,r2,2
 8029eec:	10c00005 	stb	r3,0(r2)
 8029ef0:	e0bff804 	addi	r2,fp,-32
 8029ef4:	10800084 	addi	r2,r2,2
 8029ef8:	10c00003 	ldbu	r3,0(r2)
 8029efc:	e0bfff17 	ldw	r2,-4(fp)
 8029f00:	10800044 	addi	r2,r2,1
 8029f04:	10c00005 	stb	r3,0(r2)
 8029f08:	e0bff804 	addi	r2,fp,-32
 8029f0c:	108000c4 	addi	r2,r2,3
 8029f10:	10800003 	ldbu	r2,0(r2)
 8029f14:	1007883a 	mov	r3,r2
 8029f18:	e0bfff17 	ldw	r2,-4(fp)
 8029f1c:	10c00005 	stb	r3,0(r2)
 8029f20:	e0bfff17 	ldw	r2,-4(fp)
 8029f24:	10800104 	addi	r2,r2,4
 8029f28:	e0bfff15 	stw	r2,-4(fp)
   }
   if (dhc_states[iface].snmask)
 8029f2c:	e0bff717 	ldw	r2,-36(fp)
 8029f30:	10c00f24 	muli	r3,r2,60
 8029f34:	008201b4 	movhi	r2,2054
 8029f38:	1885883a 	add	r2,r3,r2
 8029f3c:	10bb0a17 	ldw	r2,-5080(r2)
 8029f40:	10004226 	beq	r2,zero,802a04c <dhc_request+0x3a8>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
 8029f44:	e0bff717 	ldw	r2,-36(fp)
 8029f48:	10c00f24 	muli	r3,r2,60
 8029f4c:	008201b4 	movhi	r2,2054
 8029f50:	1885883a 	add	r2,r3,r2
 8029f54:	10bb0a17 	ldw	r2,-5080(r2)
 8029f58:	1006d63a 	srli	r3,r2,24
 8029f5c:	e0bff717 	ldw	r2,-36(fp)
 8029f60:	11000f24 	muli	r4,r2,60
 8029f64:	008201b4 	movhi	r2,2054
 8029f68:	2085883a 	add	r2,r4,r2
 8029f6c:	10bb0a17 	ldw	r2,-5080(r2)
 8029f70:	1004d23a 	srli	r2,r2,8
 8029f74:	10bfc00c 	andi	r2,r2,65280
 8029f78:	1886b03a 	or	r3,r3,r2
 8029f7c:	e0bff717 	ldw	r2,-36(fp)
 8029f80:	11000f24 	muli	r4,r2,60
 8029f84:	008201b4 	movhi	r2,2054
 8029f88:	2085883a 	add	r2,r4,r2
 8029f8c:	10bb0a17 	ldw	r2,-5080(r2)
 8029f90:	1004923a 	slli	r2,r2,8
 8029f94:	10803fec 	andhi	r2,r2,255
 8029f98:	1886b03a 	or	r3,r3,r2
 8029f9c:	e0bff717 	ldw	r2,-36(fp)
 8029fa0:	11000f24 	muli	r4,r2,60
 8029fa4:	008201b4 	movhi	r2,2054
 8029fa8:	2085883a 	add	r2,r4,r2
 8029fac:	10bb0a17 	ldw	r2,-5080(r2)
 8029fb0:	1004963a 	slli	r2,r2,24
 8029fb4:	1884b03a 	or	r2,r3,r2
 8029fb8:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
 8029fbc:	e0bfff17 	ldw	r2,-4(fp)
 8029fc0:	10c00044 	addi	r3,r2,1
 8029fc4:	e0ffff15 	stw	r3,-4(fp)
 8029fc8:	00c00044 	movi	r3,1
 8029fcc:	10c00005 	stb	r3,0(r2)
 8029fd0:	e0bfff17 	ldw	r2,-4(fp)
 8029fd4:	10c00044 	addi	r3,r2,1
 8029fd8:	e0ffff15 	stw	r3,-4(fp)
 8029fdc:	00c00104 	movi	r3,4
 8029fe0:	10c00005 	stb	r3,0(r2)
 8029fe4:	e0bff804 	addi	r2,fp,-32
 8029fe8:	10c00003 	ldbu	r3,0(r2)
 8029fec:	e0bfff17 	ldw	r2,-4(fp)
 8029ff0:	108000c4 	addi	r2,r2,3
 8029ff4:	10c00005 	stb	r3,0(r2)
 8029ff8:	e0bff804 	addi	r2,fp,-32
 8029ffc:	10800044 	addi	r2,r2,1
 802a000:	10c00003 	ldbu	r3,0(r2)
 802a004:	e0bfff17 	ldw	r2,-4(fp)
 802a008:	10800084 	addi	r2,r2,2
 802a00c:	10c00005 	stb	r3,0(r2)
 802a010:	e0bff804 	addi	r2,fp,-32
 802a014:	10800084 	addi	r2,r2,2
 802a018:	10c00003 	ldbu	r3,0(r2)
 802a01c:	e0bfff17 	ldw	r2,-4(fp)
 802a020:	10800044 	addi	r2,r2,1
 802a024:	10c00005 	stb	r3,0(r2)
 802a028:	e0bff804 	addi	r2,fp,-32
 802a02c:	108000c4 	addi	r2,r2,3
 802a030:	10800003 	ldbu	r2,0(r2)
 802a034:	1007883a 	mov	r3,r2
 802a038:	e0bfff17 	ldw	r2,-4(fp)
 802a03c:	10c00005 	stb	r3,0(r2)
 802a040:	e0bfff17 	ldw	r2,-4(fp)
 802a044:	10800104 	addi	r2,r2,4
 802a048:	e0bfff15 	stw	r2,-4(fp)
   }
   if (dhc_states[iface].defgw)
 802a04c:	e0bff717 	ldw	r2,-36(fp)
 802a050:	10c00f24 	muli	r3,r2,60
 802a054:	008201b4 	movhi	r2,2054
 802a058:	1885883a 	add	r2,r3,r2
 802a05c:	10bb0b17 	ldw	r2,-5076(r2)
 802a060:	10004226 	beq	r2,zero,802a16c <dhc_request+0x4c8>
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
 802a064:	e0bff717 	ldw	r2,-36(fp)
 802a068:	10c00f24 	muli	r3,r2,60
 802a06c:	008201b4 	movhi	r2,2054
 802a070:	1885883a 	add	r2,r3,r2
 802a074:	10bb0b17 	ldw	r2,-5076(r2)
 802a078:	1006d63a 	srli	r3,r2,24
 802a07c:	e0bff717 	ldw	r2,-36(fp)
 802a080:	11000f24 	muli	r4,r2,60
 802a084:	008201b4 	movhi	r2,2054
 802a088:	2085883a 	add	r2,r4,r2
 802a08c:	10bb0b17 	ldw	r2,-5076(r2)
 802a090:	1004d23a 	srli	r2,r2,8
 802a094:	10bfc00c 	andi	r2,r2,65280
 802a098:	1886b03a 	or	r3,r3,r2
 802a09c:	e0bff717 	ldw	r2,-36(fp)
 802a0a0:	11000f24 	muli	r4,r2,60
 802a0a4:	008201b4 	movhi	r2,2054
 802a0a8:	2085883a 	add	r2,r4,r2
 802a0ac:	10bb0b17 	ldw	r2,-5076(r2)
 802a0b0:	1004923a 	slli	r2,r2,8
 802a0b4:	10803fec 	andhi	r2,r2,255
 802a0b8:	1886b03a 	or	r3,r3,r2
 802a0bc:	e0bff717 	ldw	r2,-36(fp)
 802a0c0:	11000f24 	muli	r4,r2,60
 802a0c4:	008201b4 	movhi	r2,2054
 802a0c8:	2085883a 	add	r2,r4,r2
 802a0cc:	10bb0b17 	ldw	r2,-5076(r2)
 802a0d0:	1004963a 	slli	r2,r2,24
 802a0d4:	1884b03a 	or	r2,r3,r2
 802a0d8:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
 802a0dc:	e0bfff17 	ldw	r2,-4(fp)
 802a0e0:	10c00044 	addi	r3,r2,1
 802a0e4:	e0ffff15 	stw	r3,-4(fp)
 802a0e8:	00c000c4 	movi	r3,3
 802a0ec:	10c00005 	stb	r3,0(r2)
 802a0f0:	e0bfff17 	ldw	r2,-4(fp)
 802a0f4:	10c00044 	addi	r3,r2,1
 802a0f8:	e0ffff15 	stw	r3,-4(fp)
 802a0fc:	00c00104 	movi	r3,4
 802a100:	10c00005 	stb	r3,0(r2)
 802a104:	e0bff804 	addi	r2,fp,-32
 802a108:	10c00003 	ldbu	r3,0(r2)
 802a10c:	e0bfff17 	ldw	r2,-4(fp)
 802a110:	108000c4 	addi	r2,r2,3
 802a114:	10c00005 	stb	r3,0(r2)
 802a118:	e0bff804 	addi	r2,fp,-32
 802a11c:	10800044 	addi	r2,r2,1
 802a120:	10c00003 	ldbu	r3,0(r2)
 802a124:	e0bfff17 	ldw	r2,-4(fp)
 802a128:	10800084 	addi	r2,r2,2
 802a12c:	10c00005 	stb	r3,0(r2)
 802a130:	e0bff804 	addi	r2,fp,-32
 802a134:	10800084 	addi	r2,r2,2
 802a138:	10c00003 	ldbu	r3,0(r2)
 802a13c:	e0bfff17 	ldw	r2,-4(fp)
 802a140:	10800044 	addi	r2,r2,1
 802a144:	10c00005 	stb	r3,0(r2)
 802a148:	e0bff804 	addi	r2,fp,-32
 802a14c:	108000c4 	addi	r2,r2,3
 802a150:	10800003 	ldbu	r2,0(r2)
 802a154:	1007883a 	mov	r3,r2
 802a158:	e0bfff17 	ldw	r2,-4(fp)
 802a15c:	10c00005 	stb	r3,0(r2)
 802a160:	e0bfff17 	ldw	r2,-4(fp)
 802a164:	10800104 	addi	r2,r2,4
 802a168:	e0bfff15 	stw	r2,-4(fp)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 802a16c:	e0bff717 	ldw	r2,-36(fp)
 802a170:	10c00f24 	muli	r3,r2,60
 802a174:	008201b4 	movhi	r2,2054
 802a178:	1885883a 	add	r2,r3,r2
 802a17c:	10bb0517 	ldw	r2,-5100(r2)
 802a180:	10003826 	beq	r2,zero,802a264 <dhc_request+0x5c0>
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
 802a184:	e0bfff17 	ldw	r2,-4(fp)
 802a188:	10c00044 	addi	r3,r2,1
 802a18c:	e0ffff15 	stw	r3,-4(fp)
 802a190:	00c00cc4 	movi	r3,51
 802a194:	10c00005 	stb	r3,0(r2)
 802a198:	e0bfff17 	ldw	r2,-4(fp)
 802a19c:	10c00044 	addi	r3,r2,1
 802a1a0:	e0ffff15 	stw	r3,-4(fp)
 802a1a4:	00c00104 	movi	r3,4
 802a1a8:	10c00005 	stb	r3,0(r2)
 802a1ac:	e0bff717 	ldw	r2,-36(fp)
 802a1b0:	10800f24 	muli	r2,r2,60
 802a1b4:	10c00504 	addi	r3,r2,20
 802a1b8:	008201b4 	movhi	r2,2054
 802a1bc:	10bb0004 	addi	r2,r2,-5120
 802a1c0:	1885883a 	add	r2,r3,r2
 802a1c4:	10c00003 	ldbu	r3,0(r2)
 802a1c8:	e0bfff17 	ldw	r2,-4(fp)
 802a1cc:	108000c4 	addi	r2,r2,3
 802a1d0:	10c00005 	stb	r3,0(r2)
 802a1d4:	e0bff717 	ldw	r2,-36(fp)
 802a1d8:	10800f24 	muli	r2,r2,60
 802a1dc:	10c00504 	addi	r3,r2,20
 802a1e0:	008201b4 	movhi	r2,2054
 802a1e4:	10bb0004 	addi	r2,r2,-5120
 802a1e8:	1885883a 	add	r2,r3,r2
 802a1ec:	10800044 	addi	r2,r2,1
 802a1f0:	10c00003 	ldbu	r3,0(r2)
 802a1f4:	e0bfff17 	ldw	r2,-4(fp)
 802a1f8:	10800084 	addi	r2,r2,2
 802a1fc:	10c00005 	stb	r3,0(r2)
 802a200:	e0bff717 	ldw	r2,-36(fp)
 802a204:	10800f24 	muli	r2,r2,60
 802a208:	10c00504 	addi	r3,r2,20
 802a20c:	008201b4 	movhi	r2,2054
 802a210:	10bb0004 	addi	r2,r2,-5120
 802a214:	1885883a 	add	r2,r3,r2
 802a218:	10800084 	addi	r2,r2,2
 802a21c:	10c00003 	ldbu	r3,0(r2)
 802a220:	e0bfff17 	ldw	r2,-4(fp)
 802a224:	10800044 	addi	r2,r2,1
 802a228:	10c00005 	stb	r3,0(r2)
 802a22c:	e0bff717 	ldw	r2,-36(fp)
 802a230:	10800f24 	muli	r2,r2,60
 802a234:	10c00504 	addi	r3,r2,20
 802a238:	008201b4 	movhi	r2,2054
 802a23c:	10bb0004 	addi	r2,r2,-5120
 802a240:	1885883a 	add	r2,r3,r2
 802a244:	108000c4 	addi	r2,r2,3
 802a248:	10800003 	ldbu	r2,0(r2)
 802a24c:	1007883a 	mov	r3,r2
 802a250:	e0bfff17 	ldw	r2,-4(fp)
 802a254:	10c00005 	stb	r3,0(r2)
 802a258:	e0bfff17 	ldw	r2,-4(fp)
 802a25c:	10800104 	addi	r2,r2,4
 802a260:	e0bfff15 	stw	r2,-4(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 802a264:	d0a03117 	ldw	r2,-32572(gp)
 802a268:	00801b0e 	bge	zero,r2,802a2d8 <dhc_request+0x634>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 802a26c:	e0bfff17 	ldw	r2,-4(fp)
 802a270:	10c00044 	addi	r3,r2,1
 802a274:	e0ffff15 	stw	r3,-4(fp)
 802a278:	00c00dc4 	movi	r3,55
 802a27c:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
 802a280:	d1203117 	ldw	r4,-32572(gp)
 802a284:	e0bfff17 	ldw	r2,-4(fp)
 802a288:	10c00044 	addi	r3,r2,1
 802a28c:	e0ffff15 	stw	r3,-4(fp)
 802a290:	2007883a 	mov	r3,r4
 802a294:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
 802a298:	e03ffe15 	stw	zero,-8(fp)
 802a29c:	00000b06 	br	802a2cc <dhc_request+0x628>
         *opts++ = reqlist[i];
 802a2a0:	e0bfff17 	ldw	r2,-4(fp)
 802a2a4:	10c00044 	addi	r3,r2,1
 802a2a8:	e0ffff15 	stw	r3,-4(fp)
 802a2ac:	e13ffe17 	ldw	r4,-8(fp)
 802a2b0:	d0e03004 	addi	r3,gp,-32576
 802a2b4:	20c7883a 	add	r3,r4,r3
 802a2b8:	18c00003 	ldbu	r3,0(r3)
 802a2bc:	10c00005 	stb	r3,0(r2)
      for (i=0 ; i < reqlist_len ; i++ )
 802a2c0:	e0bffe17 	ldw	r2,-8(fp)
 802a2c4:	10800044 	addi	r2,r2,1
 802a2c8:	e0bffe15 	stw	r2,-8(fp)
 802a2cc:	d0a03117 	ldw	r2,-32572(gp)
 802a2d0:	e0fffe17 	ldw	r3,-8(fp)
 802a2d4:	18bff216 	blt	r3,r2,802a2a0 <dhc_request+0x5fc>
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
 802a2d8:	e0bff717 	ldw	r2,-36(fp)
 802a2dc:	10c00f24 	muli	r3,r2,60
 802a2e0:	008201b4 	movhi	r2,2054
 802a2e4:	1885883a 	add	r2,r3,r2
 802a2e8:	10bb0017 	ldw	r2,-5120(r2)
 802a2ec:	108001e0 	cmpeqi	r2,r2,7
 802a2f0:	1000071e 	bne	r2,zero,802a310 <dhc_request+0x66c>
       || (dhc_states[iface].state == DHCS_REBINDING))
 802a2f4:	e0bff717 	ldw	r2,-36(fp)
 802a2f8:	10c00f24 	muli	r3,r2,60
 802a2fc:	008201b4 	movhi	r2,2054
 802a300:	1885883a 	add	r2,r3,r2
 802a304:	10bb0017 	ldw	r2,-5120(r2)
 802a308:	10800218 	cmpnei	r2,r2,8
 802a30c:	1000081e 	bne	r2,zero,802a330 <dhc_request+0x68c>
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
 802a310:	e0bff717 	ldw	r2,-36(fp)
 802a314:	100690ba 	slli	r3,r2,2
 802a318:	008201b4 	movhi	r2,2054
 802a31c:	1885883a 	add	r2,r3,r2
 802a320:	10bada17 	ldw	r2,-5272(r2)
 802a324:	10c00a17 	ldw	r3,40(r2)
 802a328:	e0bffc17 	ldw	r2,-16(fp)
 802a32c:	10c00315 	stw	r3,12(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802a330:	e0bff717 	ldw	r2,-36(fp)
 802a334:	10c00f24 	muli	r3,r2,60
 802a338:	008201b4 	movhi	r2,2054
 802a33c:	1885883a 	add	r2,r3,r2
 802a340:	10bb0017 	ldw	r2,-5120(r2)
 802a344:	10800120 	cmpeqi	r2,r2,4
 802a348:	1000071e 	bne	r2,zero,802a368 <dhc_request+0x6c4>
       (dhc_states[iface].state == DHCS_REQUESTING))
 802a34c:	e0bff717 	ldw	r2,-36(fp)
 802a350:	10c00f24 	muli	r3,r2,60
 802a354:	008201b4 	movhi	r2,2054
 802a358:	1885883a 	add	r2,r3,r2
 802a35c:	10bb0017 	ldw	r2,-5120(r2)
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 802a360:	10800158 	cmpnei	r2,r2,5
 802a364:	1000421e 	bne	r2,zero,802a470 <dhc_request+0x7cc>
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
 802a368:	e0bff717 	ldw	r2,-36(fp)
 802a36c:	10c00f24 	muli	r3,r2,60
 802a370:	008201b4 	movhi	r2,2054
 802a374:	1885883a 	add	r2,r3,r2
 802a378:	10bb0d17 	ldw	r2,-5068(r2)
 802a37c:	1006d63a 	srli	r3,r2,24
 802a380:	e0bff717 	ldw	r2,-36(fp)
 802a384:	11000f24 	muli	r4,r2,60
 802a388:	008201b4 	movhi	r2,2054
 802a38c:	2085883a 	add	r2,r4,r2
 802a390:	10bb0d17 	ldw	r2,-5068(r2)
 802a394:	1004d23a 	srli	r2,r2,8
 802a398:	10bfc00c 	andi	r2,r2,65280
 802a39c:	1886b03a 	or	r3,r3,r2
 802a3a0:	e0bff717 	ldw	r2,-36(fp)
 802a3a4:	11000f24 	muli	r4,r2,60
 802a3a8:	008201b4 	movhi	r2,2054
 802a3ac:	2085883a 	add	r2,r4,r2
 802a3b0:	10bb0d17 	ldw	r2,-5068(r2)
 802a3b4:	1004923a 	slli	r2,r2,8
 802a3b8:	10803fec 	andhi	r2,r2,255
 802a3bc:	1886b03a 	or	r3,r3,r2
 802a3c0:	e0bff717 	ldw	r2,-36(fp)
 802a3c4:	11000f24 	muli	r4,r2,60
 802a3c8:	008201b4 	movhi	r2,2054
 802a3cc:	2085883a 	add	r2,r4,r2
 802a3d0:	10bb0d17 	ldw	r2,-5068(r2)
 802a3d4:	1004963a 	slli	r2,r2,24
 802a3d8:	1884b03a 	or	r2,r3,r2
 802a3dc:	e0bff815 	stw	r2,-32(fp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
 802a3e0:	e0bfff17 	ldw	r2,-4(fp)
 802a3e4:	10c00044 	addi	r3,r2,1
 802a3e8:	e0ffff15 	stw	r3,-4(fp)
 802a3ec:	00c00d84 	movi	r3,54
 802a3f0:	10c00005 	stb	r3,0(r2)
 802a3f4:	e0bfff17 	ldw	r2,-4(fp)
 802a3f8:	10c00044 	addi	r3,r2,1
 802a3fc:	e0ffff15 	stw	r3,-4(fp)
 802a400:	00c00104 	movi	r3,4
 802a404:	10c00005 	stb	r3,0(r2)
 802a408:	e0bff804 	addi	r2,fp,-32
 802a40c:	10c00003 	ldbu	r3,0(r2)
 802a410:	e0bfff17 	ldw	r2,-4(fp)
 802a414:	108000c4 	addi	r2,r2,3
 802a418:	10c00005 	stb	r3,0(r2)
 802a41c:	e0bff804 	addi	r2,fp,-32
 802a420:	10800044 	addi	r2,r2,1
 802a424:	10c00003 	ldbu	r3,0(r2)
 802a428:	e0bfff17 	ldw	r2,-4(fp)
 802a42c:	10800084 	addi	r2,r2,2
 802a430:	10c00005 	stb	r3,0(r2)
 802a434:	e0bff804 	addi	r2,fp,-32
 802a438:	10800084 	addi	r2,r2,2
 802a43c:	10c00003 	ldbu	r3,0(r2)
 802a440:	e0bfff17 	ldw	r2,-4(fp)
 802a444:	10800044 	addi	r2,r2,1
 802a448:	10c00005 	stb	r3,0(r2)
 802a44c:	e0bff804 	addi	r2,fp,-32
 802a450:	108000c4 	addi	r2,r2,3
 802a454:	10800003 	ldbu	r2,0(r2)
 802a458:	1007883a 	mov	r3,r2
 802a45c:	e0bfff17 	ldw	r2,-4(fp)
 802a460:	10c00005 	stb	r3,0(r2)
 802a464:	e0bfff17 	ldw	r2,-4(fp)
 802a468:	10800104 	addi	r2,r2,4
 802a46c:	e0bfff15 	stw	r2,-4(fp)
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
 802a470:	e0bfff17 	ldw	r2,-4(fp)
 802a474:	10c00044 	addi	r3,r2,1
 802a478:	e0ffff15 	stw	r3,-4(fp)
 802a47c:	00c01444 	movi	r3,81
 802a480:	10c00005 	stb	r3,0(r2)
 802a484:	00800184 	movi	r2,6
 802a488:	e0bffa15 	stw	r2,-24(fp)
 802a48c:	e0bfff17 	ldw	r2,-4(fp)
 802a490:	10c00044 	addi	r3,r2,1
 802a494:	e0ffff15 	stw	r3,-4(fp)
 802a498:	e0fffa17 	ldw	r3,-24(fp)
 802a49c:	10c00005 	stb	r3,0(r2)
 802a4a0:	e0bffa17 	ldw	r2,-24(fp)
 802a4a4:	100d883a 	mov	r6,r2
 802a4a8:	01420174 	movhi	r5,2053
 802a4ac:	294aa904 	addi	r5,r5,10916
 802a4b0:	e13fff17 	ldw	r4,-4(fp)
 802a4b4:	804a65c0 	call	804a65c <strncpy>
 802a4b8:	e0bffa17 	ldw	r2,-24(fp)
 802a4bc:	e0ffff17 	ldw	r3,-4(fp)
 802a4c0:	1885883a 	add	r2,r3,r2
 802a4c4:	e0bfff15 	stw	r2,-4(fp)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
 802a4c8:	e0bfff17 	ldw	r2,-4(fp)
 802a4cc:	10c00044 	addi	r3,r2,1
 802a4d0:	e0ffff15 	stw	r3,-4(fp)
 802a4d4:	00c00f04 	movi	r3,60
 802a4d8:	10c00005 	stb	r3,0(r2)
 802a4dc:	d0a04917 	ldw	r2,-32476(gp)
 802a4e0:	1009883a 	mov	r4,r2
 802a4e4:	8003a1c0 	call	8003a1c <strlen>
 802a4e8:	e0bff915 	stw	r2,-28(fp)
 802a4ec:	e0bfff17 	ldw	r2,-4(fp)
 802a4f0:	10c00044 	addi	r3,r2,1
 802a4f4:	e0ffff15 	stw	r3,-4(fp)
 802a4f8:	e0fff917 	ldw	r3,-28(fp)
 802a4fc:	10c00005 	stb	r3,0(r2)
 802a500:	d0a04917 	ldw	r2,-32476(gp)
 802a504:	e0fff917 	ldw	r3,-28(fp)
 802a508:	180d883a 	mov	r6,r3
 802a50c:	100b883a 	mov	r5,r2
 802a510:	e13fff17 	ldw	r4,-4(fp)
 802a514:	804a65c0 	call	804a65c <strncpy>
 802a518:	e0bff917 	ldw	r2,-28(fp)
 802a51c:	e0ffff17 	ldw	r3,-4(fp)
 802a520:	1885883a 	add	r2,r3,r2
 802a524:	e0bfff15 	stw	r2,-4(fp)

   *opts++ = DHOP_END;  /* Mark the end of options */
 802a528:	e0bfff17 	ldw	r2,-4(fp)
 802a52c:	10c00044 	addi	r3,r2,1
 802a530:	e0ffff15 	stw	r3,-4(fp)
 802a534:	00ffffc4 	movi	r3,-1
 802a538:	10c00005 	stb	r3,0(r2)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
 802a53c:	e0bff717 	ldw	r2,-36(fp)
 802a540:	10c00f24 	muli	r3,r2,60
 802a544:	008201b4 	movhi	r2,2054
 802a548:	1885883a 	add	r2,r3,r2
 802a54c:	10bb0017 	ldw	r2,-5120(r2)
 802a550:	108001d8 	cmpnei	r2,r2,7
 802a554:	1000081e 	bne	r2,zero,802a578 <dhc_request+0x8d4>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
 802a558:	e0bff717 	ldw	r2,-36(fp)
 802a55c:	10c00f24 	muli	r3,r2,60
 802a560:	008201b4 	movhi	r2,2054
 802a564:	1885883a 	add	r2,r3,r2
 802a568:	10fb0d17 	ldw	r3,-5068(r2)
 802a56c:	e0bffd17 	ldw	r2,-12(fp)
 802a570:	10c00715 	stw	r3,28(r2)
 802a574:	00000306 	br	802a584 <dhc_request+0x8e0>
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
 802a578:	e0bffd17 	ldw	r2,-12(fp)
 802a57c:	00ffffc4 	movi	r3,-1
 802a580:	10c00715 	stw	r3,28(r2)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
 802a584:	e0bff717 	ldw	r2,-36(fp)
 802a588:	100690ba 	slli	r3,r2,2
 802a58c:	008201b4 	movhi	r2,2054
 802a590:	1885883a 	add	r2,r3,r2
 802a594:	10fada17 	ldw	r3,-5272(r2)
 802a598:	e0bffd17 	ldw	r2,-12(fp)
 802a59c:	10c00615 	stw	r3,24(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
 802a5a0:	e0ffff17 	ldw	r3,-4(fp)
 802a5a4:	e0bffc17 	ldw	r2,-16(fp)
 802a5a8:	1885c83a 	sub	r2,r3,r2
 802a5ac:	1007883a 	mov	r3,r2
 802a5b0:	e0bffd17 	ldw	r2,-12(fp)
 802a5b4:	10c00415 	stw	r3,16(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 802a5b8:	e1bffd17 	ldw	r6,-12(fp)
 802a5bc:	01401104 	movi	r5,68
 802a5c0:	010010c4 	movi	r4,67
 802a5c4:	8043d880 	call	8043d88 <udp_send>
   dsc_requests++;
 802a5c8:	d0a08e17 	ldw	r2,-32200(gp)
 802a5cc:	10800044 	addi	r2,r2,1
 802a5d0:	d0a08e15 	stw	r2,-32200(gp)

   dhc_states[iface].last_tick = cticks;
 802a5d4:	d0e0a317 	ldw	r3,-32116(gp)
 802a5d8:	e0bff717 	ldw	r2,-36(fp)
 802a5dc:	11000f24 	muli	r4,r2,60
 802a5e0:	008201b4 	movhi	r2,2054
 802a5e4:	2085883a 	add	r2,r4,r2
 802a5e8:	10fb0415 	stw	r3,-5104(r2)
   dhc_states[iface].tries++;
 802a5ec:	e0bff717 	ldw	r2,-36(fp)
 802a5f0:	10c00f24 	muli	r3,r2,60
 802a5f4:	008201b4 	movhi	r2,2054
 802a5f8:	1885883a 	add	r2,r3,r2
 802a5fc:	10bb0117 	ldw	r2,-5116(r2)
 802a600:	10c00044 	addi	r3,r2,1
 802a604:	e0bff717 	ldw	r2,-36(fp)
 802a608:	11000f24 	muli	r4,r2,60
 802a60c:	008201b4 	movhi	r2,2054
 802a610:	2085883a 	add	r2,r4,r2
 802a614:	10fb0115 	stw	r3,-5116(r2)

   return 0;   /* return OK code */
 802a618:	0005883a 	mov	r2,zero
}
 802a61c:	e037883a 	mov	sp,fp
 802a620:	dfc00117 	ldw	ra,4(sp)
 802a624:	df000017 	ldw	fp,0(sp)
 802a628:	dec00204 	addi	sp,sp,8
 802a62c:	f800283a 	ret

0802a630 <dhc_setip>:
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 802a630:	defffd04 	addi	sp,sp,-12
 802a634:	dfc00215 	stw	ra,8(sp)
 802a638:	df000115 	stw	fp,4(sp)
 802a63c:	df000104 	addi	fp,sp,4
 802a640:	e13fff15 	stw	r4,-4(fp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 802a644:	e0bfff17 	ldw	r2,-4(fp)
 802a648:	100690ba 	slli	r3,r2,2
 802a64c:	008201b4 	movhi	r2,2054
 802a650:	1885883a 	add	r2,r3,r2
 802a654:	10fada17 	ldw	r3,-5272(r2)
 802a658:	e0bfff17 	ldw	r2,-4(fp)
 802a65c:	11000f24 	muli	r4,r2,60
 802a660:	008201b4 	movhi	r2,2054
 802a664:	2085883a 	add	r2,r4,r2
 802a668:	10bb0917 	ldw	r2,-5084(r2)
 802a66c:	18800a15 	stw	r2,40(r3)
   nets[iface]->snmask   = dhc_states[iface].snmask;
 802a670:	e0bfff17 	ldw	r2,-4(fp)
 802a674:	100690ba 	slli	r3,r2,2
 802a678:	008201b4 	movhi	r2,2054
 802a67c:	1885883a 	add	r2,r3,r2
 802a680:	10fada17 	ldw	r3,-5272(r2)
 802a684:	e0bfff17 	ldw	r2,-4(fp)
 802a688:	11000f24 	muli	r4,r2,60
 802a68c:	008201b4 	movhi	r2,2054
 802a690:	2085883a 	add	r2,r4,r2
 802a694:	10bb0a17 	ldw	r2,-5080(r2)
 802a698:	18800c15 	stw	r2,48(r3)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
 802a69c:	e0bfff17 	ldw	r2,-4(fp)
 802a6a0:	100690ba 	slli	r3,r2,2
 802a6a4:	008201b4 	movhi	r2,2054
 802a6a8:	1885883a 	add	r2,r3,r2
 802a6ac:	10fada17 	ldw	r3,-5272(r2)
 802a6b0:	e0bfff17 	ldw	r2,-4(fp)
 802a6b4:	11000f24 	muli	r4,r2,60
 802a6b8:	008201b4 	movhi	r2,2054
 802a6bc:	2085883a 	add	r2,r4,r2
 802a6c0:	10bb0b17 	ldw	r2,-5076(r2)
 802a6c4:	18800d15 	stw	r2,52(r3)

   if ( nets[iface]->snmask == 0 )
 802a6c8:	e0bfff17 	ldw	r2,-4(fp)
 802a6cc:	100690ba 	slli	r3,r2,2
 802a6d0:	008201b4 	movhi	r2,2054
 802a6d4:	1885883a 	add	r2,r3,r2
 802a6d8:	10bada17 	ldw	r2,-5272(r2)
 802a6dc:	10800c17 	ldw	r2,48(r2)
 802a6e0:	10000d1e 	bne	r2,zero,802a718 <dhc_setip+0xe8>
   {
      fixup_subnet_mask(iface);
 802a6e4:	e13fff17 	ldw	r4,-4(fp)
 802a6e8:	80255c40 	call	80255c4 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
 802a6ec:	e0bfff17 	ldw	r2,-4(fp)
 802a6f0:	100690ba 	slli	r3,r2,2
 802a6f4:	008201b4 	movhi	r2,2054
 802a6f8:	1885883a 	add	r2,r3,r2
 802a6fc:	10bada17 	ldw	r2,-5272(r2)
 802a700:	10c00c17 	ldw	r3,48(r2)
 802a704:	e0bfff17 	ldw	r2,-4(fp)
 802a708:	11000f24 	muli	r4,r2,60
 802a70c:	008201b4 	movhi	r2,2054
 802a710:	2085883a 	add	r2,r4,r2
 802a714:	10fb0a15 	stw	r3,-5080(r2)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 802a718:	e0bfff17 	ldw	r2,-4(fp)
 802a71c:	100690ba 	slli	r3,r2,2
 802a720:	008201b4 	movhi	r2,2054
 802a724:	1885883a 	add	r2,r3,r2
 802a728:	10bada17 	ldw	r2,-5272(r2)
 802a72c:	11000a17 	ldw	r4,40(r2)
 802a730:	e0bfff17 	ldw	r2,-4(fp)
 802a734:	100690ba 	slli	r3,r2,2
 802a738:	008201b4 	movhi	r2,2054
 802a73c:	1885883a 	add	r2,r3,r2
 802a740:	10bada17 	ldw	r2,-5272(r2)
 802a744:	10800c17 	ldw	r2,48(r2)
 802a748:	0086303a 	nor	r3,zero,r2
 802a74c:	e0bfff17 	ldw	r2,-4(fp)
 802a750:	100a90ba 	slli	r5,r2,2
 802a754:	008201b4 	movhi	r2,2054
 802a758:	2885883a 	add	r2,r5,r2
 802a75c:	10bada17 	ldw	r2,-5272(r2)
 802a760:	20c6b03a 	or	r3,r4,r3
 802a764:	10c00e15 	stw	r3,56(r2)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
 802a768:	e0bfff17 	ldw	r2,-4(fp)
 802a76c:	100690ba 	slli	r3,r2,2
 802a770:	008201b4 	movhi	r2,2054
 802a774:	1885883a 	add	r2,r3,r2
 802a778:	10bada17 	ldw	r2,-5272(r2)
 802a77c:	11000a17 	ldw	r4,40(r2)
 802a780:	e0bfff17 	ldw	r2,-4(fp)
 802a784:	100690ba 	slli	r3,r2,2
 802a788:	008201b4 	movhi	r2,2054
 802a78c:	1885883a 	add	r2,r3,r2
 802a790:	10bada17 	ldw	r2,-5272(r2)
 802a794:	10c00c17 	ldw	r3,48(r2)
 802a798:	e0bfff17 	ldw	r2,-4(fp)
 802a79c:	100a90ba 	slli	r5,r2,2
 802a7a0:	008201b4 	movhi	r2,2054
 802a7a4:	2885883a 	add	r2,r5,r2
 802a7a8:	10bada17 	ldw	r2,-5272(r2)
 802a7ac:	20c6703a 	and	r3,r4,r3
 802a7b0:	10c00f15 	stw	r3,60(r2)
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 802a7b4:	e0bfff17 	ldw	r2,-4(fp)
 802a7b8:	100690ba 	slli	r3,r2,2
 802a7bc:	008201b4 	movhi	r2,2054
 802a7c0:	1885883a 	add	r2,r3,r2
 802a7c4:	10bada17 	ldw	r2,-5272(r2)
 802a7c8:	11000a17 	ldw	r4,40(r2)
 802a7cc:	e0bfff17 	ldw	r2,-4(fp)
 802a7d0:	100690ba 	slli	r3,r2,2
 802a7d4:	008201b4 	movhi	r2,2054
 802a7d8:	1885883a 	add	r2,r3,r2
 802a7dc:	10bada17 	ldw	r2,-5272(r2)
 802a7e0:	10800c17 	ldw	r2,48(r2)
 802a7e4:	0086303a 	nor	r3,zero,r2
 802a7e8:	e0bfff17 	ldw	r2,-4(fp)
 802a7ec:	100a90ba 	slli	r5,r2,2
 802a7f0:	008201b4 	movhi	r2,2054
 802a7f4:	2885883a 	add	r2,r5,r2
 802a7f8:	10bada17 	ldw	r2,-5272(r2)
 802a7fc:	20c6b03a 	or	r3,r4,r3
 802a800:	10c01015 	stw	r3,64(r2)

   return 0;   /* return OK code */
 802a804:	0005883a 	mov	r2,zero
}
 802a808:	e037883a 	mov	sp,fp
 802a80c:	dfc00117 	ldw	ra,4(sp)
 802a810:	df000017 	ldw	fp,0(sp)
 802a814:	dec00204 	addi	sp,sp,8
 802a818:	f800283a 	ret

0802a81c <dhc_resetip>:
 * RETURNS: Returns 0 if ok, else non-zero error. 
 */

int
dhc_resetip(int iface)
{
 802a81c:	defffe04 	addi	sp,sp,-8
 802a820:	df000115 	stw	fp,4(sp)
 802a824:	df000104 	addi	fp,sp,4
 802a828:	e13fff15 	stw	r4,-4(fp)
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
 802a82c:	e0bfff17 	ldw	r2,-4(fp)
 802a830:	100690ba 	slli	r3,r2,2
 802a834:	008201b4 	movhi	r2,2054
 802a838:	1885883a 	add	r2,r3,r2
 802a83c:	10bada17 	ldw	r2,-5272(r2)
 802a840:	10000a15 	stw	zero,40(r2)
   nets[iface]->snmask   = 0;
 802a844:	e0bfff17 	ldw	r2,-4(fp)
 802a848:	100690ba 	slli	r3,r2,2
 802a84c:	008201b4 	movhi	r2,2054
 802a850:	1885883a 	add	r2,r3,r2
 802a854:	10bada17 	ldw	r2,-5272(r2)
 802a858:	10000c15 	stw	zero,48(r2)
   nets[iface]->n_defgw  = 0;
 802a85c:	e0bfff17 	ldw	r2,-4(fp)
 802a860:	100690ba 	slli	r3,r2,2
 802a864:	008201b4 	movhi	r2,2054
 802a868:	1885883a 	add	r2,r3,r2
 802a86c:	10bada17 	ldw	r2,-5272(r2)
 802a870:	10000d15 	stw	zero,52(r2)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
 802a874:	e0bfff17 	ldw	r2,-4(fp)
 802a878:	100690ba 	slli	r3,r2,2
 802a87c:	008201b4 	movhi	r2,2054
 802a880:	1885883a 	add	r2,r3,r2
 802a884:	10bada17 	ldw	r2,-5272(r2)
 802a888:	10000e15 	stw	zero,56(r2)
   nets[iface]->n_netbr42  = 0;
 802a88c:	e0bfff17 	ldw	r2,-4(fp)
 802a890:	100690ba 	slli	r3,r2,2
 802a894:	008201b4 	movhi	r2,2054
 802a898:	1885883a 	add	r2,r3,r2
 802a89c:	10bada17 	ldw	r2,-5272(r2)
 802a8a0:	10000f15 	stw	zero,60(r2)
   nets[iface]->n_subnetbr = 0;
 802a8a4:	e0bfff17 	ldw	r2,-4(fp)
 802a8a8:	100690ba 	slli	r3,r2,2
 802a8ac:	008201b4 	movhi	r2,2054
 802a8b0:	1885883a 	add	r2,r3,r2
 802a8b4:	10bada17 	ldw	r2,-5272(r2)
 802a8b8:	10001015 	stw	zero,64(r2)

   return 0;   /* return OK code */
 802a8bc:	0005883a 	mov	r2,zero
}
 802a8c0:	e037883a 	mov	sp,fp
 802a8c4:	df000017 	ldw	fp,0(sp)
 802a8c8:	dec00104 	addi	sp,sp,4
 802a8cc:	f800283a 	ret

0802a8d0 <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
 802a8d0:	defff804 	addi	sp,sp,-32
 802a8d4:	dfc00715 	stw	ra,28(sp)
 802a8d8:	df000615 	stw	fp,24(sp)
 802a8dc:	df000604 	addi	fp,sp,24
 802a8e0:	e13ffc15 	stw	r4,-16(fp)
 802a8e4:	e17ffb15 	stw	r5,-20(fp)
 802a8e8:	e1bffa15 	stw	r6,-24(fp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
 802a8ec:	e0bffa17 	ldw	r2,-24(fp)
 802a8f0:	000b883a 	mov	r5,zero
 802a8f4:	1009883a 	mov	r4,r2
 802a8f8:	80441c00 	call	80441c0 <udp_alloc>
 802a8fc:	e0bfff15 	stw	r2,-4(fp)
   if (!pkt) 
 802a900:	e0bfff17 	ldw	r2,-4(fp)
 802a904:	1000021e 	bne	r2,zero,802a910 <dhc_decline+0x40>
      return ENP_NOMEM;
 802a908:	00bffb04 	movi	r2,-20
 802a90c:	00002b06 	br	802a9bc <dhc_decline+0xec>
   pkt->nb_plen = bplen;
 802a910:	e0bfff17 	ldw	r2,-4(fp)
 802a914:	e0fffa17 	ldw	r3,-24(fp)
 802a918:	10c00415 	stw	r3,16(r2)

   outbp = (struct bootp *)pkt->nb_prot;
 802a91c:	e0bfff17 	ldw	r2,-4(fp)
 802a920:	10800317 	ldw	r2,12(r2)
 802a924:	e0bffe15 	stw	r2,-8(fp)
   MEMCPY(outbp, bp, bplen);
 802a928:	e1bffa17 	ldw	r6,-24(fp)
 802a92c:	e17ffb17 	ldw	r5,-20(fp)
 802a930:	e13ffe17 	ldw	r4,-8(fp)
 802a934:	8002ea40 	call	8002ea4 <memcpy>
   outbp->op = BOOTREQUEST;
 802a938:	e0bffe17 	ldw	r2,-8(fp)
 802a93c:	00c00044 	movi	r3,1
 802a940:	10c00005 	stb	r3,0(r2)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
 802a944:	e0bffe17 	ldw	r2,-8(fp)
 802a948:	10803c04 	addi	r2,r2,240
 802a94c:	100b883a 	mov	r5,r2
 802a950:	01000d44 	movi	r4,53
 802a954:	802b5380 	call	802b538 <find_opt>
 802a958:	e0bffd15 	stw	r2,-12(fp)
   opts += 2;     /* point to actual op code */
 802a95c:	e0bffd17 	ldw	r2,-12(fp)
 802a960:	10800084 	addi	r2,r2,2
 802a964:	e0bffd15 	stw	r2,-12(fp)
   *opts = DHCP_DECLINE;   /* overwrite op code */
 802a968:	e0bffd17 	ldw	r2,-12(fp)
 802a96c:	00c00104 	movi	r3,4
 802a970:	10c00005 	stb	r3,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
 802a974:	e0bfff17 	ldw	r2,-4(fp)
 802a978:	00ffffc4 	movi	r3,-1
 802a97c:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller speced net */
 802a980:	e0bffc17 	ldw	r2,-16(fp)
 802a984:	100690ba 	slli	r3,r2,2
 802a988:	008201b4 	movhi	r2,2054
 802a98c:	1885883a 	add	r2,r3,r2
 802a990:	10fada17 	ldw	r3,-5272(r2)
 802a994:	e0bfff17 	ldw	r2,-4(fp)
 802a998:	10c00615 	stw	r3,24(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 802a99c:	e1bfff17 	ldw	r6,-4(fp)
 802a9a0:	01401104 	movi	r5,68
 802a9a4:	010010c4 	movi	r4,67
 802a9a8:	8043d880 	call	8043d88 <udp_send>
   dsc_declines++;   /* count declines sent */
 802a9ac:	d0a09117 	ldw	r2,-32188(gp)
 802a9b0:	10800044 	addi	r2,r2,1
 802a9b4:	d0a09115 	stw	r2,-32188(gp)
   return 0;
 802a9b8:	0005883a 	mov	r2,zero
}
 802a9bc:	e037883a 	mov	sp,fp
 802a9c0:	dfc00117 	ldw	ra,4(sp)
 802a9c4:	df000017 	ldw	fp,0(sp)
 802a9c8:	dec00204 	addi	sp,sp,8
 802a9cc:	f800283a 	ret

0802a9d0 <dh_getlong>:
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
 802a9d0:	defffc04 	addi	sp,sp,-16
 802a9d4:	df000315 	stw	fp,12(sp)
 802a9d8:	df000304 	addi	fp,sp,12
 802a9dc:	e13ffd15 	stw	r4,-12(fp)
     long  v;
     u_char * p2 =  (u_char *)&v;
 802a9e0:	e0bffe04 	addi	r2,fp,-8
 802a9e4:	e0bfff15 	stw	r2,-4(fp)

   *p2++ = *ptr++;
 802a9e8:	e0fffd17 	ldw	r3,-12(fp)
 802a9ec:	18800044 	addi	r2,r3,1
 802a9f0:	e0bffd15 	stw	r2,-12(fp)
 802a9f4:	e0bfff17 	ldw	r2,-4(fp)
 802a9f8:	11000044 	addi	r4,r2,1
 802a9fc:	e13fff15 	stw	r4,-4(fp)
 802aa00:	18c00003 	ldbu	r3,0(r3)
 802aa04:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802aa08:	e0fffd17 	ldw	r3,-12(fp)
 802aa0c:	18800044 	addi	r2,r3,1
 802aa10:	e0bffd15 	stw	r2,-12(fp)
 802aa14:	e0bfff17 	ldw	r2,-4(fp)
 802aa18:	11000044 	addi	r4,r2,1
 802aa1c:	e13fff15 	stw	r4,-4(fp)
 802aa20:	18c00003 	ldbu	r3,0(r3)
 802aa24:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802aa28:	e0fffd17 	ldw	r3,-12(fp)
 802aa2c:	18800044 	addi	r2,r3,1
 802aa30:	e0bffd15 	stw	r2,-12(fp)
 802aa34:	e0bfff17 	ldw	r2,-4(fp)
 802aa38:	11000044 	addi	r4,r2,1
 802aa3c:	e13fff15 	stw	r4,-4(fp)
 802aa40:	18c00003 	ldbu	r3,0(r3)
 802aa44:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
 802aa48:	e0fffd17 	ldw	r3,-12(fp)
 802aa4c:	18800044 	addi	r2,r3,1
 802aa50:	e0bffd15 	stw	r2,-12(fp)
 802aa54:	e0bfff17 	ldw	r2,-4(fp)
 802aa58:	11000044 	addi	r4,r2,1
 802aa5c:	e13fff15 	stw	r4,-4(fp)
 802aa60:	18c00003 	ldbu	r3,0(r3)
 802aa64:	10c00005 	stb	r3,0(r2)

   return v;
 802aa68:	e0bffe17 	ldw	r2,-8(fp)
}
 802aa6c:	e037883a 	mov	sp,fp
 802aa70:	df000017 	ldw	fp,0(sp)
 802aa74:	dec00104 	addi	sp,sp,4
 802aa78:	f800283a 	ret

0802aa7c <dhc_extract_opts>:
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 802aa7c:	defff904 	addi	sp,sp,-28
 802aa80:	dfc00615 	stw	ra,24(sp)
 802aa84:	df000515 	stw	fp,20(sp)
 802aa88:	dc000415 	stw	r16,16(sp)
 802aa8c:	df000504 	addi	fp,sp,20
 802aa90:	e13ffc15 	stw	r4,-16(fp)
 802aa94:	e17ffb15 	stw	r5,-20(fp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
 802aa98:	e0bffb17 	ldw	r2,-20(fp)
 802aa9c:	10804e04 	addi	r2,r2,312
 802aaa0:	e0bffe15 	stw	r2,-8(fp)
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 802aaa4:	e0bffc17 	ldw	r2,-16(fp)
 802aaa8:	10c00f24 	muli	r3,r2,60
 802aaac:	008201b4 	movhi	r2,2054
 802aab0:	1885883a 	add	r2,r3,r2
 802aab4:	103b0a15 	stw	zero,-5080(r2)
   dhc_states[iface].defgw = 0; 
 802aab8:	e0bffc17 	ldw	r2,-16(fp)
 802aabc:	10c00f24 	muli	r3,r2,60
 802aac0:	008201b4 	movhi	r2,2054
 802aac4:	1885883a 	add	r2,r3,r2
 802aac8:	103b0b15 	stw	zero,-5076(r2)
   dhc_states[iface].lease = 0; 
 802aacc:	e0bffc17 	ldw	r2,-16(fp)
 802aad0:	10c00f24 	muli	r3,r2,60
 802aad4:	008201b4 	movhi	r2,2054
 802aad8:	1885883a 	add	r2,r3,r2
 802aadc:	103b0515 	stw	zero,-5100(r2)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 802aae0:	00007006 	br	802aca4 <dhc_extract_opts+0x228>
   {
      switch (*opts++)
 802aae4:	e0bffb17 	ldw	r2,-20(fp)
 802aae8:	10c00044 	addi	r3,r2,1
 802aaec:	e0fffb15 	stw	r3,-20(fp)
 802aaf0:	10800003 	ldbu	r2,0(r2)
 802aaf4:	10803fcc 	andi	r2,r2,255
 802aaf8:	10c03fe0 	cmpeqi	r3,r2,255
 802aafc:	1800121e 	bne	r3,zero,802ab48 <dhc_extract_opts+0xcc>
 802ab00:	10c04008 	cmpgei	r3,r2,256
 802ab04:	18005f1e 	bne	r3,zero,802ac84 <dhc_extract_opts+0x208>
 802ab08:	10c00ce0 	cmpeqi	r3,r2,51
 802ab0c:	1800341e 	bne	r3,zero,802abe0 <dhc_extract_opts+0x164>
 802ab10:	10c00d08 	cmpgei	r3,r2,52
 802ab14:	18005b1e 	bne	r3,zero,802ac84 <dhc_extract_opts+0x208>
 802ab18:	10c001a0 	cmpeqi	r3,r2,6
 802ab1c:	18004f1e 	bne	r3,zero,802ac5c <dhc_extract_opts+0x1e0>
 802ab20:	10c001c8 	cmpgei	r3,r2,7
 802ab24:	1800571e 	bne	r3,zero,802ac84 <dhc_extract_opts+0x208>
 802ab28:	10c000e0 	cmpeqi	r3,r2,3
 802ab2c:	1800171e 	bne	r3,zero,802ab8c <dhc_extract_opts+0x110>
 802ab30:	10c00108 	cmpgei	r3,r2,4
 802ab34:	1800531e 	bne	r3,zero,802ac84 <dhc_extract_opts+0x208>
 802ab38:	10005a26 	beq	r2,zero,802aca4 <dhc_extract_opts+0x228>
 802ab3c:	10800060 	cmpeqi	r2,r2,1
 802ab40:	1000031e 	bne	r2,zero,802ab50 <dhc_extract_opts+0xd4>
 802ab44:	00004f06 	br	802ac84 <dhc_extract_opts+0x208>
      {
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
 802ab48:	0005883a 	mov	r2,zero
 802ab4c:	00005a06 	br	802acb8 <dhc_extract_opts+0x23c>
      case DHOP_SNMASK:
         opts++;
 802ab50:	e0bffb17 	ldw	r2,-20(fp)
 802ab54:	10800044 	addi	r2,r2,1
 802ab58:	e0bffb15 	stw	r2,-20(fp)
         dhc_states[iface].snmask = dh_getlong(opts);
 802ab5c:	e13ffb17 	ldw	r4,-20(fp)
 802ab60:	802a9d00 	call	802a9d0 <dh_getlong>
 802ab64:	1009883a 	mov	r4,r2
 802ab68:	e0bffc17 	ldw	r2,-16(fp)
 802ab6c:	10c00f24 	muli	r3,r2,60
 802ab70:	008201b4 	movhi	r2,2054
 802ab74:	1885883a 	add	r2,r3,r2
 802ab78:	113b0a15 	stw	r4,-5080(r2)
         opts += 4;
 802ab7c:	e0bffb17 	ldw	r2,-20(fp)
 802ab80:	10800104 	addi	r2,r2,4
 802ab84:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ab88:	00004606 	br	802aca4 <dhc_extract_opts+0x228>
      case DHOP_ROUTER:
         optlen = *opts++;
 802ab8c:	e0bffb17 	ldw	r2,-20(fp)
 802ab90:	10c00044 	addi	r3,r2,1
 802ab94:	e0fffb15 	stw	r3,-20(fp)
 802ab98:	10800003 	ldbu	r2,0(r2)
 802ab9c:	e0bffdc5 	stb	r2,-9(fp)
         if (optlen >= 4)
 802aba0:	e0bffdc3 	ldbu	r2,-9(fp)
 802aba4:	10800130 	cmpltui	r2,r2,4
 802aba8:	1000081e 	bne	r2,zero,802abcc <dhc_extract_opts+0x150>
            dhc_states[iface].defgw = dh_getlong(opts);
 802abac:	e13ffb17 	ldw	r4,-20(fp)
 802abb0:	802a9d00 	call	802a9d0 <dh_getlong>
 802abb4:	1009883a 	mov	r4,r2
 802abb8:	e0bffc17 	ldw	r2,-16(fp)
 802abbc:	10c00f24 	muli	r3,r2,60
 802abc0:	008201b4 	movhi	r2,2054
 802abc4:	1885883a 	add	r2,r3,r2
 802abc8:	113b0b15 	stw	r4,-5076(r2)
         opts += optlen;
 802abcc:	e0bffdc3 	ldbu	r2,-9(fp)
 802abd0:	e0fffb17 	ldw	r3,-20(fp)
 802abd4:	1885883a 	add	r2,r3,r2
 802abd8:	e0bffb15 	stw	r2,-20(fp)
         break;
 802abdc:	00003106 	br	802aca4 <dhc_extract_opts+0x228>
      case DHOP_LEASE:
         opts++;
 802abe0:	e0bffb17 	ldw	r2,-20(fp)
 802abe4:	10800044 	addi	r2,r2,1
 802abe8:	e0bffb15 	stw	r2,-20(fp)
         dhc_states[iface].lease = htonl(dh_getlong(opts));
 802abec:	e13ffb17 	ldw	r4,-20(fp)
 802abf0:	802a9d00 	call	802a9d0 <dh_getlong>
 802abf4:	1005d63a 	srai	r2,r2,24
 802abf8:	14003fcc 	andi	r16,r2,255
 802abfc:	e13ffb17 	ldw	r4,-20(fp)
 802ac00:	802a9d00 	call	802a9d0 <dh_getlong>
 802ac04:	1005d23a 	srai	r2,r2,8
 802ac08:	10bfc00c 	andi	r2,r2,65280
 802ac0c:	80a0b03a 	or	r16,r16,r2
 802ac10:	e13ffb17 	ldw	r4,-20(fp)
 802ac14:	802a9d00 	call	802a9d0 <dh_getlong>
 802ac18:	1004923a 	slli	r2,r2,8
 802ac1c:	10803fec 	andhi	r2,r2,255
 802ac20:	80a0b03a 	or	r16,r16,r2
 802ac24:	e13ffb17 	ldw	r4,-20(fp)
 802ac28:	802a9d00 	call	802a9d0 <dh_getlong>
 802ac2c:	1004963a 	slli	r2,r2,24
 802ac30:	8084b03a 	or	r2,r16,r2
 802ac34:	1009883a 	mov	r4,r2
 802ac38:	e0bffc17 	ldw	r2,-16(fp)
 802ac3c:	10c00f24 	muli	r3,r2,60
 802ac40:	008201b4 	movhi	r2,2054
 802ac44:	1885883a 	add	r2,r3,r2
 802ac48:	113b0515 	stw	r4,-5100(r2)
         opts += 4;
 802ac4c:	e0bffb17 	ldw	r2,-20(fp)
 802ac50:	10800104 	addi	r2,r2,4
 802ac54:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ac58:	00001206 	br	802aca4 <dhc_extract_opts+0x228>
      case DHOP_DNSRV:
         optlen = *opts++;
 802ac5c:	e0bffb17 	ldw	r2,-20(fp)
 802ac60:	10c00044 	addi	r3,r2,1
 802ac64:	e0fffb15 	stw	r3,-20(fp)
 802ac68:	10800003 	ldbu	r2,0(r2)
 802ac6c:	e0bffdc5 	stb	r2,-9(fp)
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
 802ac70:	e0bffdc3 	ldbu	r2,-9(fp)
 802ac74:	e0fffb17 	ldw	r3,-20(fp)
 802ac78:	1885883a 	add	r2,r3,r2
 802ac7c:	e0bffb15 	stw	r2,-20(fp)
         break;
 802ac80:	00000806 	br	802aca4 <dhc_extract_opts+0x228>
      default:
         opts += ((*opts) + 1);
 802ac84:	e0bffb17 	ldw	r2,-20(fp)
 802ac88:	10800003 	ldbu	r2,0(r2)
 802ac8c:	10803fcc 	andi	r2,r2,255
 802ac90:	10800044 	addi	r2,r2,1
 802ac94:	e0fffb17 	ldw	r3,-20(fp)
 802ac98:	1885883a 	add	r2,r3,r2
 802ac9c:	e0bffb15 	stw	r2,-20(fp)
         break;
 802aca0:	0001883a 	nop
   while (opts <= end)
 802aca4:	e0bffb17 	ldw	r2,-20(fp)
 802aca8:	e0fffe17 	ldw	r3,-8(fp)
 802acac:	18bf8d2e 	bgeu	r3,r2,802aae4 <dhc_extract_opts+0x68>
      }
   }
   dtrap();
 802acb0:	802c3fc0 	call	802c3fc <dtrap>
   return -1;
 802acb4:	00bfffc4 	movi	r2,-1
}
 802acb8:	e6ffff04 	addi	sp,fp,-4
 802acbc:	dfc00217 	ldw	ra,8(sp)
 802acc0:	df000117 	ldw	fp,4(sp)
 802acc4:	dc000017 	ldw	r16,0(sp)
 802acc8:	dec00304 	addi	sp,sp,12
 802accc:	f800283a 	ret

0802acd0 <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
 802acd0:	defffa04 	addi	sp,sp,-24
 802acd4:	dfc00515 	stw	ra,20(sp)
 802acd8:	df000415 	stw	fp,16(sp)
 802acdc:	df000404 	addi	fp,sp,16
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 802ace0:	e03fff15 	stw	zero,-4(fp)
 802ace4:	00012106 	br	802b16c <dhc_second+0x49c>
   {
      switch (dhc_states[iface].state)
 802ace8:	e0bfff17 	ldw	r2,-4(fp)
 802acec:	10c00f24 	muli	r3,r2,60
 802acf0:	008201b4 	movhi	r2,2054
 802acf4:	1885883a 	add	r2,r3,r2
 802acf8:	10bb0017 	ldw	r2,-5120(r2)
 802acfc:	10c00268 	cmpgeui	r3,r2,9
 802ad00:	18010e1e 	bne	r3,zero,802b13c <dhc_second+0x46c>
 802ad04:	100690ba 	slli	r3,r2,2
 802ad08:	008200f4 	movhi	r2,2051
 802ad0c:	1885883a 	add	r2,r3,r2
 802ad10:	10ab4617 	ldw	r2,-21224(r2)
 802ad14:	1000683a 	jmp	r2
 802ad18:	0802b13c 	xorhi	zero,at,2756
 802ad1c:	0802ad3c 	xorhi	zero,at,2740
 802ad20:	0802ad6c 	andhi	zero,at,2741
 802ad24:	0802ad9c 	xori	zero,at,2742
 802ad28:	0802ad9c 	xori	zero,at,2742
 802ad2c:	0802ad9c 	xori	zero,at,2742
 802ad30:	0802af9c 	xori	zero,at,2750
 802ad34:	0802b02c 	andhi	zero,at,2752
 802ad38:	0802aea8 	cmpgeui	zero,at,2746
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
 802ad3c:	e13fff17 	ldw	r4,-4(fp)
 802ad40:	80297880 	call	8029788 <dhc_discover>
 802ad44:	e0bffc15 	stw	r2,-16(fp)
         /* Error while sending a discover packet */
         if (e)
 802ad48:	e0bffc17 	ldw	r2,-16(fp)
 802ad4c:	10000326 	beq	r2,zero,802ad5c <dhc_second+0x8c>
         {
            dtrap();
 802ad50:	802c3fc0 	call	802c3fc <dtrap>
            return e;
 802ad54:	e0bffc17 	ldw	r2,-16(fp)
 802ad58:	00010806 	br	802b17c <dhc_second+0x4ac>
         }
         dhc_set_state(iface,DHCS_SELECTING);
 802ad5c:	01400104 	movi	r5,4
 802ad60:	e13fff17 	ldw	r4,-4(fp)
 802ad64:	802b4a40 	call	802b4a4 <dhc_set_state>
         break;
 802ad68:	0000fd06 	br	802b160 <dhc_second+0x490>
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
 802ad6c:	e13fff17 	ldw	r4,-4(fp)
 802ad70:	802b20c0 	call	802b20c <dhc_reclaim>
 802ad74:	e0bffc15 	stw	r2,-16(fp)
         if (e)
 802ad78:	e0bffc17 	ldw	r2,-16(fp)
 802ad7c:	10000326 	beq	r2,zero,802ad8c <dhc_second+0xbc>
         {
            dtrap();
 802ad80:	802c3fc0 	call	802c3fc <dtrap>
            return e;
 802ad84:	e0bffc17 	ldw	r2,-16(fp)
 802ad88:	0000fc06 	br	802b17c <dhc_second+0x4ac>
         }
         dhc_set_state(iface,DHCS_REBOOTING);
 802ad8c:	014000c4 	movi	r5,3
 802ad90:	e13fff17 	ldw	r4,-4(fp)
 802ad94:	802b4a40 	call	802b4a4 <dhc_set_state>
         break;
 802ad98:	0000f106 	br	802b160 <dhc_second+0x490>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
 802ad9c:	e0bfff17 	ldw	r2,-4(fp)
 802ada0:	10c00f24 	muli	r3,r2,60
 802ada4:	008201b4 	movhi	r2,2054
 802ada8:	1885883a 	add	r2,r3,r2
 802adac:	10bb0117 	ldw	r2,-5116(r2)
 802adb0:	e0bffe15 	stw	r2,-8(fp)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
 802adb4:	e0bffe17 	ldw	r2,-8(fp)
 802adb8:	10800110 	cmplti	r2,r2,4
 802adbc:	1000021e 	bne	r2,zero,802adc8 <dhc_second+0xf8>
            tries= DHC_MAX_TRIES;
 802adc0:	00800104 	movi	r2,4
 802adc4:	e0bffe15 	stw	r2,-8(fp)
         if ( cticks > (dhc_states[iface].last_tick + 
 802adc8:	e0bfff17 	ldw	r2,-4(fp)
 802adcc:	10c00f24 	muli	r3,r2,60
 802add0:	008201b4 	movhi	r2,2054
 802add4:	1885883a 	add	r2,r3,r2
 802add8:	10fb0417 	ldw	r3,-5104(r2)
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
 802addc:	01006404 	movi	r4,400
 802ade0:	e0bffe17 	ldw	r2,-8(fp)
 802ade4:	2084983a 	sll	r2,r4,r2
         if ( cticks > (dhc_states[iface].last_tick + 
 802ade8:	1887883a 	add	r3,r3,r2
 802adec:	d0a0a317 	ldw	r2,-32116(gp)
 802adf0:	1880192e 	bgeu	r3,r2,802ae58 <dhc_second+0x188>
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
 802adf4:	e0bfff17 	ldw	r2,-4(fp)
 802adf8:	10c00f24 	muli	r3,r2,60
 802adfc:	008201b4 	movhi	r2,2054
 802ae00:	1885883a 	add	r2,r3,r2
 802ae04:	10bb0017 	ldw	r2,-5120(r2)
 802ae08:	10c00160 	cmpeqi	r3,r2,5
 802ae0c:	1800091e 	bne	r3,zero,802ae34 <dhc_second+0x164>
 802ae10:	10c001a8 	cmpgeui	r3,r2,6
 802ae14:	18000e1e 	bne	r3,zero,802ae50 <dhc_second+0x180>
 802ae18:	10c000e0 	cmpeqi	r3,r2,3
 802ae1c:	1800091e 	bne	r3,zero,802ae44 <dhc_second+0x174>
 802ae20:	10800118 	cmpnei	r2,r2,4
 802ae24:	10000a1e 	bne	r2,zero,802ae50 <dhc_second+0x180>
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
 802ae28:	e13fff17 	ldw	r4,-4(fp)
 802ae2c:	80297880 	call	8029788 <dhc_discover>
               break;
 802ae30:	00000a06 	br	802ae5c <dhc_second+0x18c>
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
 802ae34:	000b883a 	mov	r5,zero
 802ae38:	e13fff17 	ldw	r4,-4(fp)
 802ae3c:	8029ca40 	call	8029ca4 <dhc_request>
               break;
 802ae40:	00000606 	br	802ae5c <dhc_second+0x18c>
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
 802ae44:	e13fff17 	ldw	r4,-4(fp)
 802ae48:	802b20c0 	call	802b20c <dhc_reclaim>
               break;
 802ae4c:	00000306 	br	802ae5c <dhc_second+0x18c>
            default:
               dtrap(); /* bogus state */
 802ae50:	802c3fc0 	call	802c3fc <dtrap>
               break;
 802ae54:	00000106 	br	802ae5c <dhc_second+0x18c>
            }
         }
 802ae58:	0001883a 	nop
         if ( tries == DHC_MAX_TRIES && 
 802ae5c:	e0bffe17 	ldw	r2,-8(fp)
 802ae60:	10800118 	cmpnei	r2,r2,4
 802ae64:	1000b71e 	bne	r2,zero,802b144 <dhc_second+0x474>
             (dhc_states[iface].state !=DHCS_SELECTING) )
 802ae68:	e0bfff17 	ldw	r2,-4(fp)
 802ae6c:	10c00f24 	muli	r3,r2,60
 802ae70:	008201b4 	movhi	r2,2054
 802ae74:	1885883a 	add	r2,r3,r2
 802ae78:	10bb0017 	ldw	r2,-5120(r2)
         if ( tries == DHC_MAX_TRIES && 
 802ae7c:	10800120 	cmpeqi	r2,r2,4
 802ae80:	1000b01e 	bne	r2,zero,802b144 <dhc_second+0x474>
         {
            /* We have tried enough. Restart from INIT state */
            dhc_set_state(iface,DHCS_RESTARTING);
 802ae84:	01400244 	movi	r5,9
 802ae88:	e13fff17 	ldw	r4,-4(fp)
 802ae8c:	802b4a40 	call	802b4a4 <dhc_set_state>
            dhc_resetip(iface);
 802ae90:	e13fff17 	ldw	r4,-4(fp)
 802ae94:	802a81c0 	call	802a81c <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 802ae98:	01400044 	movi	r5,1
 802ae9c:	e13fff17 	ldw	r4,-4(fp)
 802aea0:	802b4a40 	call	802b4a4 <dhc_set_state>
         }
         break;
 802aea4:	0000a706 	br	802b144 <dhc_second+0x474>
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
 802aea8:	e0bfff17 	ldw	r2,-4(fp)
 802aeac:	10c00f24 	muli	r3,r2,60
 802aeb0:	008201b4 	movhi	r2,2054
 802aeb4:	1885883a 	add	r2,r3,r2
 802aeb8:	10bb0517 	ldw	r2,-5100(r2)
 802aebc:	10c01924 	muli	r3,r2,100
 802aec0:	e0bfff17 	ldw	r2,-4(fp)
 802aec4:	11000f24 	muli	r4,r2,60
 802aec8:	008201b4 	movhi	r2,2054
 802aecc:	2085883a 	add	r2,r4,r2
 802aed0:	10bb0817 	ldw	r2,-5088(r2)
 802aed4:	1885883a 	add	r2,r3,r2
 802aed8:	d0e0a317 	ldw	r3,-32116(gp)
 802aedc:	1880262e 	bgeu	r3,r2,802af78 <dhc_second+0x2a8>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
 802aee0:	e0bfff17 	ldw	r2,-4(fp)
 802aee4:	10c00f24 	muli	r3,r2,60
 802aee8:	008201b4 	movhi	r2,2054
 802aeec:	1885883a 	add	r2,r3,r2
 802aef0:	10fb0817 	ldw	r3,-5088(r2)
             dhc_states[iface].lease*TPS - 
 802aef4:	e0bfff17 	ldw	r2,-4(fp)
 802aef8:	11000f24 	muli	r4,r2,60
 802aefc:	008201b4 	movhi	r2,2054
 802af00:	2085883a 	add	r2,r4,r2
 802af04:	10bb0517 	ldw	r2,-5100(r2)
 802af08:	10801924 	muli	r2,r2,100
            half_time = (dhc_states[iface].lease_start + 
 802af0c:	1887883a 	add	r3,r3,r2
             dhc_states[iface].last_tick)/2;
 802af10:	e0bfff17 	ldw	r2,-4(fp)
 802af14:	11000f24 	muli	r4,r2,60
 802af18:	008201b4 	movhi	r2,2054
 802af1c:	2085883a 	add	r2,r4,r2
 802af20:	10bb0417 	ldw	r2,-5104(r2)
             dhc_states[iface].lease*TPS - 
 802af24:	1885c83a 	sub	r2,r3,r2
            half_time = (dhc_states[iface].lease_start + 
 802af28:	1004d07a 	srli	r2,r2,1
 802af2c:	e0bffd15 	stw	r2,-12(fp)

            if ( half_time < 60*TPS )
 802af30:	e0bffd17 	ldw	r2,-12(fp)
 802af34:	1085dc28 	cmpgeui	r2,r2,6000
 802af38:	1000021e 	bne	r2,zero,802af44 <dhc_second+0x274>
               half_time = 60*TPS;
 802af3c:	0085dc04 	movi	r2,6000
 802af40:	e0bffd15 	stw	r2,-12(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 802af44:	e0bfff17 	ldw	r2,-4(fp)
 802af48:	10c00f24 	muli	r3,r2,60
 802af4c:	008201b4 	movhi	r2,2054
 802af50:	1885883a 	add	r2,r3,r2
 802af54:	10fb0417 	ldw	r3,-5104(r2)
 802af58:	e0bffd17 	ldw	r2,-12(fp)
 802af5c:	1887883a 	add	r3,r3,r2
 802af60:	d0a0a317 	ldw	r2,-32116(gp)
 802af64:	1880792e 	bgeu	r3,r2,802b14c <dhc_second+0x47c>
            {
               dhc_request(iface,FALSE);
 802af68:	000b883a 	mov	r5,zero
 802af6c:	e13fff17 	ldw	r4,-4(fp)
 802af70:	8029ca40 	call	8029ca4 <dhc_request>
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
            dhc_resetip(iface);
            dhc_set_state(iface,DHCS_INIT);
         }
         break;
 802af74:	00007506 	br	802b14c <dhc_second+0x47c>
            dhc_set_state(iface,DHCS_RESTARTING);
 802af78:	01400244 	movi	r5,9
 802af7c:	e13fff17 	ldw	r4,-4(fp)
 802af80:	802b4a40 	call	802b4a4 <dhc_set_state>
            dhc_resetip(iface);
 802af84:	e13fff17 	ldw	r4,-4(fp)
 802af88:	802a81c0 	call	802a81c <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 802af8c:	01400044 	movi	r5,1
 802af90:	e13fff17 	ldw	r4,-4(fp)
 802af94:	802b4a40 	call	802b4a4 <dhc_set_state>
         break;
 802af98:	00006c06 	br	802b14c <dhc_second+0x47c>

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 802af9c:	e0bfff17 	ldw	r2,-4(fp)
 802afa0:	10c00f24 	muli	r3,r2,60
 802afa4:	008201b4 	movhi	r2,2054
 802afa8:	1885883a 	add	r2,r3,r2
 802afac:	10bb0617 	ldw	r2,-5096(r2)
 802afb0:	10bfffe0 	cmpeqi	r2,r2,-1
 802afb4:	1000671e 	bne	r2,zero,802b154 <dhc_second+0x484>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
 802afb8:	e0bfff17 	ldw	r2,-4(fp)
 802afbc:	10c00f24 	muli	r3,r2,60
 802afc0:	008201b4 	movhi	r2,2054
 802afc4:	1885883a 	add	r2,r3,r2
 802afc8:	10bb0617 	ldw	r2,-5096(r2)
 802afcc:	10c01924 	muli	r3,r2,100
 802afd0:	e0bfff17 	ldw	r2,-4(fp)
 802afd4:	11000f24 	muli	r4,r2,60
 802afd8:	008201b4 	movhi	r2,2054
 802afdc:	2085883a 	add	r2,r4,r2
 802afe0:	10bb0817 	ldw	r2,-5088(r2)
 802afe4:	1887883a 	add	r3,r3,r2
 802afe8:	d0a0a317 	ldw	r2,-32116(gp)
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 802afec:	1880592e 	bgeu	r3,r2,802b154 <dhc_second+0x484>
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
 802aff0:	014001c4 	movi	r5,7
 802aff4:	e13fff17 	ldw	r4,-4(fp)
 802aff8:	802b4a40 	call	802b4a4 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
 802affc:	e13fff17 	ldw	r4,-4(fp)
 802b000:	802b20c0 	call	802b20c <dhc_reclaim>
 802b004:	e0bffc15 	stw	r2,-16(fp)
            if (e)
 802b008:	e0bffc17 	ldw	r2,-16(fp)
 802b00c:	10000326 	beq	r2,zero,802b01c <dhc_second+0x34c>
            {
               dtrap();
 802b010:	802c3fc0 	call	802c3fc <dtrap>
               return e;
 802b014:	e0bffc17 	ldw	r2,-16(fp)
 802b018:	00005806 	br	802b17c <dhc_second+0x4ac>
            }
            dsc_renew++;
 802b01c:	d0a09417 	ldw	r2,-32176(gp)
 802b020:	10800044 	addi	r2,r2,1
 802b024:	d0a09415 	stw	r2,-32176(gp)
         }
         break;
 802b028:	00004a06 	br	802b154 <dhc_second+0x484>
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
 802b02c:	e0bfff17 	ldw	r2,-4(fp)
 802b030:	10c00f24 	muli	r3,r2,60
 802b034:	008201b4 	movhi	r2,2054
 802b038:	1885883a 	add	r2,r3,r2
 802b03c:	10bb0717 	ldw	r2,-5092(r2)
 802b040:	10c01924 	muli	r3,r2,100
 802b044:	e0bfff17 	ldw	r2,-4(fp)
 802b048:	11000f24 	muli	r4,r2,60
 802b04c:	008201b4 	movhi	r2,2054
 802b050:	2085883a 	add	r2,r4,r2
 802b054:	10bb0817 	ldw	r2,-5088(r2)
 802b058:	1885883a 	add	r2,r3,r2
 802b05c:	d0e0a317 	ldw	r3,-32116(gp)
 802b060:	1880262e 	bgeu	r3,r2,802b0fc <dhc_second+0x42c>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
 802b064:	e0bfff17 	ldw	r2,-4(fp)
 802b068:	10c00f24 	muli	r3,r2,60
 802b06c:	008201b4 	movhi	r2,2054
 802b070:	1885883a 	add	r2,r3,r2
 802b074:	10fb0817 	ldw	r3,-5088(r2)
             dhc_states[iface].t2*TPS - 
 802b078:	e0bfff17 	ldw	r2,-4(fp)
 802b07c:	11000f24 	muli	r4,r2,60
 802b080:	008201b4 	movhi	r2,2054
 802b084:	2085883a 	add	r2,r4,r2
 802b088:	10bb0717 	ldw	r2,-5092(r2)
 802b08c:	10801924 	muli	r2,r2,100
            half_time = (dhc_states[iface].lease_start +
 802b090:	1887883a 	add	r3,r3,r2
             dhc_states[iface].last_tick)/2;
 802b094:	e0bfff17 	ldw	r2,-4(fp)
 802b098:	11000f24 	muli	r4,r2,60
 802b09c:	008201b4 	movhi	r2,2054
 802b0a0:	2085883a 	add	r2,r4,r2
 802b0a4:	10bb0417 	ldw	r2,-5104(r2)
             dhc_states[iface].t2*TPS - 
 802b0a8:	1885c83a 	sub	r2,r3,r2
            half_time = (dhc_states[iface].lease_start +
 802b0ac:	1004d07a 	srli	r2,r2,1
 802b0b0:	e0bffd15 	stw	r2,-12(fp)

            if ( half_time < 60*TPS )
 802b0b4:	e0bffd17 	ldw	r2,-12(fp)
 802b0b8:	1085dc28 	cmpgeui	r2,r2,6000
 802b0bc:	1000021e 	bne	r2,zero,802b0c8 <dhc_second+0x3f8>
               half_time = 60*TPS;
 802b0c0:	0085dc04 	movi	r2,6000
 802b0c4:	e0bffd15 	stw	r2,-12(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 802b0c8:	e0bfff17 	ldw	r2,-4(fp)
 802b0cc:	10c00f24 	muli	r3,r2,60
 802b0d0:	008201b4 	movhi	r2,2054
 802b0d4:	1885883a 	add	r2,r3,r2
 802b0d8:	10fb0417 	ldw	r3,-5104(r2)
 802b0dc:	e0bffd17 	ldw	r2,-12(fp)
 802b0e0:	1887883a 	add	r3,r3,r2
 802b0e4:	d0a0a317 	ldw	r2,-32116(gp)
 802b0e8:	18801c2e 	bgeu	r3,r2,802b15c <dhc_second+0x48c>
            {
               dhc_request(iface,FALSE);
 802b0ec:	000b883a 	mov	r5,zero
 802b0f0:	e13fff17 	ldw	r4,-4(fp)
 802b0f4:	8029ca40 	call	8029ca4 <dhc_request>
               dtrap();
               return e;
            }
            dsc_rebind++;
         }
         break;
 802b0f8:	00001806 	br	802b15c <dhc_second+0x48c>
            dhc_set_state(iface,DHCS_REBINDING);
 802b0fc:	01400204 	movi	r5,8
 802b100:	e13fff17 	ldw	r4,-4(fp)
 802b104:	802b4a40 	call	802b4a4 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
 802b108:	01400044 	movi	r5,1
 802b10c:	e13fff17 	ldw	r4,-4(fp)
 802b110:	8029ca40 	call	8029ca4 <dhc_request>
 802b114:	e0bffc15 	stw	r2,-16(fp)
            if (e)
 802b118:	e0bffc17 	ldw	r2,-16(fp)
 802b11c:	10000326 	beq	r2,zero,802b12c <dhc_second+0x45c>
               dtrap();
 802b120:	802c3fc0 	call	802c3fc <dtrap>
               return e;
 802b124:	e0bffc17 	ldw	r2,-16(fp)
 802b128:	00001406 	br	802b17c <dhc_second+0x4ac>
            dsc_rebind++;
 802b12c:	d0a09517 	ldw	r2,-32172(gp)
 802b130:	10800044 	addi	r2,r2,1
 802b134:	d0a09515 	stw	r2,-32172(gp)
         break;
 802b138:	00000806 	br	802b15c <dhc_second+0x48c>
      case DHCS_UNUSED:
      default:
         continue;
 802b13c:	0001883a 	nop
 802b140:	00000706 	br	802b160 <dhc_second+0x490>
         break;
 802b144:	0001883a 	nop
 802b148:	00000506 	br	802b160 <dhc_second+0x490>
         break;
 802b14c:	0001883a 	nop
 802b150:	00000306 	br	802b160 <dhc_second+0x490>
         break;
 802b154:	0001883a 	nop
 802b158:	00000106 	br	802b160 <dhc_second+0x490>
         break;
 802b15c:	0001883a 	nop
   for (iface = 0; iface < MAXNETS; iface++)
 802b160:	e0bfff17 	ldw	r2,-4(fp)
 802b164:	10800044 	addi	r2,r2,1
 802b168:	e0bfff15 	stw	r2,-4(fp)
 802b16c:	e0bfff17 	ldw	r2,-4(fp)
 802b170:	10800110 	cmplti	r2,r2,4
 802b174:	103edc1e 	bne	r2,zero,802ace8 <dhc_second+0x18>
      }
   }
   return 0;
 802b178:	0005883a 	mov	r2,zero
}
 802b17c:	e037883a 	mov	sp,fp
 802b180:	dfc00117 	ldw	ra,4(sp)
 802b184:	df000017 	ldw	fp,0(sp)
 802b188:	dec00204 	addi	sp,sp,8
 802b18c:	f800283a 	ret

0802b190 <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
 802b190:	defffd04 	addi	sp,sp,-12
 802b194:	dfc00215 	stw	ra,8(sp)
 802b198:	df000115 	stw	fp,4(sp)
 802b19c:	df000104 	addi	fp,sp,4
 802b1a0:	e13fff15 	stw	r4,-4(fp)
   if (iface < 0 || iface > MAXNETS)
 802b1a4:	e0bfff17 	ldw	r2,-4(fp)
 802b1a8:	10000316 	blt	r2,zero,802b1b8 <dhc_halt+0x28>
 802b1ac:	e0bfff17 	ldw	r2,-4(fp)
 802b1b0:	10800150 	cmplti	r2,r2,5
 802b1b4:	1000021e 	bne	r2,zero,802b1c0 <dhc_halt+0x30>
   {
      dtrap();
 802b1b8:	802c3fc0 	call	802c3fc <dtrap>
      return;
 802b1bc:	00000e06 	br	802b1f8 <dhc_halt+0x68>
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 802b1c0:	e0bfff17 	ldw	r2,-4(fp)
 802b1c4:	10c00f24 	muli	r3,r2,60
 802b1c8:	008201b4 	movhi	r2,2054
 802b1cc:	10bb0004 	addi	r2,r2,-5120
 802b1d0:	1885883a 	add	r2,r3,r2
 802b1d4:	01800f04 	movi	r6,60
 802b1d8:	000b883a 	mov	r5,zero
 802b1dc:	1009883a 	mov	r4,r2
 802b1e0:	8002fa40 	call	8002fa4 <memset>
   dhc_states[iface].state = DHCS_UNUSED;
 802b1e4:	e0bfff17 	ldw	r2,-4(fp)
 802b1e8:	10c00f24 	muli	r3,r2,60
 802b1ec:	008201b4 	movhi	r2,2054
 802b1f0:	1885883a 	add	r2,r3,r2
 802b1f4:	103b0015 	stw	zero,-5120(r2)
}
 802b1f8:	e037883a 	mov	sp,fp
 802b1fc:	dfc00117 	ldw	ra,4(sp)
 802b200:	df000017 	ldw	fp,0(sp)
 802b204:	dec00204 	addi	sp,sp,8
 802b208:	f800283a 	ret

0802b20c <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
 802b20c:	defffc04 	addi	sp,sp,-16
 802b210:	dfc00315 	stw	ra,12(sp)
 802b214:	df000215 	stw	fp,8(sp)
 802b218:	df000204 	addi	fp,sp,8
 802b21c:	e13fff15 	stw	r4,-4(fp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 802b220:	e0bfff17 	ldw	r2,-4(fp)
 802b224:	100690ba 	slli	r3,r2,2
 802b228:	008201b4 	movhi	r2,2054
 802b22c:	1885883a 	add	r2,r3,r2
 802b230:	10bada17 	ldw	r2,-5272(r2)
 802b234:	10800a17 	ldw	r2,40(r2)
 802b238:	1000031e 	bne	r2,zero,802b248 <dhc_reclaim+0x3c>
   {
      dtrap();    /* programming bug? */
 802b23c:	802c3fc0 	call	802c3fc <dtrap>
      return ENP_LOGIC;
 802b240:	00bffd44 	movi	r2,-11
 802b244:	00004406 	br	802b358 <dhc_reclaim+0x14c>
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 802b248:	e0bfff17 	ldw	r2,-4(fp)
 802b24c:	100690ba 	slli	r3,r2,2
 802b250:	008201b4 	movhi	r2,2054
 802b254:	1885883a 	add	r2,r3,r2
 802b258:	10bada17 	ldw	r2,-5272(r2)
 802b25c:	10c00a17 	ldw	r3,40(r2)
 802b260:	e0bfff17 	ldw	r2,-4(fp)
 802b264:	11000f24 	muli	r4,r2,60
 802b268:	008201b4 	movhi	r2,2054
 802b26c:	2085883a 	add	r2,r4,r2
 802b270:	10fb0915 	stw	r3,-5084(r2)
   dhc_states[iface].snmask = nets[iface]->snmask;
 802b274:	e0bfff17 	ldw	r2,-4(fp)
 802b278:	100690ba 	slli	r3,r2,2
 802b27c:	008201b4 	movhi	r2,2054
 802b280:	1885883a 	add	r2,r3,r2
 802b284:	10bada17 	ldw	r2,-5272(r2)
 802b288:	10c00c17 	ldw	r3,48(r2)
 802b28c:	e0bfff17 	ldw	r2,-4(fp)
 802b290:	11000f24 	muli	r4,r2,60
 802b294:	008201b4 	movhi	r2,2054
 802b298:	2085883a 	add	r2,r4,r2
 802b29c:	10fb0a15 	stw	r3,-5080(r2)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
 802b2a0:	e0bfff17 	ldw	r2,-4(fp)
 802b2a4:	100690ba 	slli	r3,r2,2
 802b2a8:	008201b4 	movhi	r2,2054
 802b2ac:	1885883a 	add	r2,r3,r2
 802b2b0:	10bada17 	ldw	r2,-5272(r2)
 802b2b4:	10c00d17 	ldw	r3,52(r2)
 802b2b8:	e0bfff17 	ldw	r2,-4(fp)
 802b2bc:	11000f24 	muli	r4,r2,60
 802b2c0:	008201b4 	movhi	r2,2054
 802b2c4:	2085883a 	add	r2,r4,r2
 802b2c8:	10fb0b15 	stw	r3,-5076(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
 802b2cc:	e0bfff17 	ldw	r2,-4(fp)
 802b2d0:	10c00f24 	muli	r3,r2,60
 802b2d4:	008201b4 	movhi	r2,2054
 802b2d8:	1885883a 	add	r2,r3,r2
 802b2dc:	10bb0c17 	ldw	r2,-5072(r2)
 802b2e0:	10001a26 	beq	r2,zero,802b34c <dhc_reclaim+0x140>
   {
      if (dhc_states[iface].srv_ipaddr)
 802b2e4:	e0bfff17 	ldw	r2,-4(fp)
 802b2e8:	10c00f24 	muli	r3,r2,60
 802b2ec:	008201b4 	movhi	r2,2054
 802b2f0:	1885883a 	add	r2,r3,r2
 802b2f4:	10bb0d17 	ldw	r2,-5068(r2)
 802b2f8:	10001326 	beq	r2,zero,802b348 <dhc_reclaim+0x13c>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
 802b2fc:	e0bfff17 	ldw	r2,-4(fp)
 802b300:	10c00f24 	muli	r3,r2,60
 802b304:	008201b4 	movhi	r2,2054
 802b308:	1885883a 	add	r2,r3,r2
 802b30c:	113b0d17 	ldw	r4,-5068(r2)
 802b310:	e0bfff17 	ldw	r2,-4(fp)
 802b314:	10c00f24 	muli	r3,r2,60
 802b318:	008201b4 	movhi	r2,2054
 802b31c:	1885883a 	add	r2,r3,r2
 802b320:	10fb0c17 	ldw	r3,-5072(r2)
 802b324:	00800084 	movi	r2,2
 802b328:	d8800015 	stw	r2,0(sp)
 802b32c:	e1ffff17 	ldw	r7,-4(fp)
 802b330:	180d883a 	mov	r6,r3
 802b334:	017fffc4 	movi	r5,-1
 802b338:	80431640 	call	8043164 <add_route>
 802b33c:	1000031e 	bne	r2,zero,802b34c <dhc_reclaim+0x140>
             dhc_states[iface].rly_ipaddr, iface, IPRP_LOCAL))
         {
            /* route was not added. check this case */
            dtrap(); 
 802b340:	802c3fc0 	call	802c3fc <dtrap>
 802b344:	00000106 	br	802b34c <dhc_reclaim+0x140>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
 802b348:	802c3fc0 	call	802c3fc <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 802b34c:	01400044 	movi	r5,1
 802b350:	e13fff17 	ldw	r4,-4(fp)
 802b354:	8029ca40 	call	8029ca4 <dhc_request>
}
 802b358:	e037883a 	mov	sp,fp
 802b35c:	dfc00117 	ldw	ra,4(sp)
 802b360:	df000017 	ldw	fp,0(sp)
 802b364:	dec00204 	addi	sp,sp,8
 802b368:	f800283a 	ret

0802b36c <dhc_state_init>:
 * RETURNS: void
 */

void 
dhc_state_init(int iface, int init_flag)
{
 802b36c:	defffb04 	addi	sp,sp,-20
 802b370:	dfc00415 	stw	ra,16(sp)
 802b374:	df000315 	stw	fp,12(sp)
 802b378:	df000304 	addi	fp,sp,12
 802b37c:	e13ffe15 	stw	r4,-8(fp)
 802b380:	e17ffd15 	stw	r5,-12(fp)
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
 802b384:	e0bffd17 	ldw	r2,-12(fp)
 802b388:	10800058 	cmpnei	r2,r2,1
 802b38c:	1000021e 	bne	r2,zero,802b398 <dhc_state_init+0x2c>
 802b390:	00800044 	movi	r2,1
 802b394:	00000106 	br	802b39c <dhc_state_init+0x30>
 802b398:	00800084 	movi	r2,2
 802b39c:	e0bfff15 	stw	r2,-4(fp)
   
   dhc_set_state(iface, state);
 802b3a0:	e17fff17 	ldw	r5,-4(fp)
 802b3a4:	e13ffe17 	ldw	r4,-8(fp)
 802b3a8:	802b4a40 	call	802b4a4 <dhc_set_state>
}
 802b3ac:	0001883a 	nop
 802b3b0:	e037883a 	mov	sp,fp
 802b3b4:	dfc00117 	ldw	ra,4(sp)
 802b3b8:	df000017 	ldw	fp,0(sp)
 802b3bc:	dec00204 	addi	sp,sp,8
 802b3c0:	f800283a 	ret

0802b3c4 <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
 802b3c4:	defffe04 	addi	sp,sp,-8
 802b3c8:	df000115 	stw	fp,4(sp)
 802b3cc:	df000104 	addi	fp,sp,4
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
 802b3d0:	e03fff15 	stw	zero,-4(fp)
 802b3d4:	00001306 	br	802b424 <dhc_alldone+0x60>
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 802b3d8:	e0bfff17 	ldw	r2,-4(fp)
 802b3dc:	10c00f24 	muli	r3,r2,60
 802b3e0:	008201b4 	movhi	r2,2054
 802b3e4:	1885883a 	add	r2,r3,r2
 802b3e8:	10bb0017 	ldw	r2,-5120(r2)
 802b3ec:	10000726 	beq	r2,zero,802b40c <dhc_alldone+0x48>
          ( dhc_states[i].state == DHCS_BOUND  )  )
 802b3f0:	e0bfff17 	ldw	r2,-4(fp)
 802b3f4:	10c00f24 	muli	r3,r2,60
 802b3f8:	008201b4 	movhi	r2,2054
 802b3fc:	1885883a 	add	r2,r3,r2
 802b400:	10bb0017 	ldw	r2,-5120(r2)
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 802b404:	10800198 	cmpnei	r2,r2,6
 802b408:	1000041e 	bne	r2,zero,802b41c <dhc_alldone+0x58>
   for ( i=0 ; i < MAXNETS ; i++ )
 802b40c:	e0bfff17 	ldw	r2,-4(fp)
 802b410:	10800044 	addi	r2,r2,1
 802b414:	e0bfff15 	stw	r2,-4(fp)
 802b418:	00000206 	br	802b424 <dhc_alldone+0x60>
      {
         continue ;
      }
      else
      {
         return FALSE ;
 802b41c:	0005883a 	mov	r2,zero
 802b420:	00000406 	br	802b434 <dhc_alldone+0x70>
   for ( i=0 ; i < MAXNETS ; i++ )
 802b424:	e0bfff17 	ldw	r2,-4(fp)
 802b428:	10800110 	cmplti	r2,r2,4
 802b42c:	103fea1e 	bne	r2,zero,802b3d8 <dhc_alldone+0x14>
      }
   }
   return TRUE ;
 802b430:	00800044 	movi	r2,1
}
 802b434:	e037883a 	mov	sp,fp
 802b438:	df000017 	ldw	fp,0(sp)
 802b43c:	dec00104 	addi	sp,sp,4
 802b440:	f800283a 	ret

0802b444 <dhc_ifacedone>:
 * RETURNS: 
 */

int 
dhc_ifacedone(int iface)
{
 802b444:	defffe04 	addi	sp,sp,-8
 802b448:	df000115 	stw	fp,4(sp)
 802b44c:	df000104 	addi	fp,sp,4
 802b450:	e13fff15 	stw	r4,-4(fp)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 802b454:	e0bfff17 	ldw	r2,-4(fp)
 802b458:	10c00f24 	muli	r3,r2,60
 802b45c:	008201b4 	movhi	r2,2054
 802b460:	1885883a 	add	r2,r3,r2
 802b464:	10bb0017 	ldw	r2,-5120(r2)
 802b468:	10000726 	beq	r2,zero,802b488 <dhc_ifacedone+0x44>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
 802b46c:	e0bfff17 	ldw	r2,-4(fp)
 802b470:	10c00f24 	muli	r3,r2,60
 802b474:	008201b4 	movhi	r2,2054
 802b478:	1885883a 	add	r2,r3,r2
 802b47c:	10bb0017 	ldw	r2,-5120(r2)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 802b480:	10800198 	cmpnei	r2,r2,6
 802b484:	1000021e 	bne	r2,zero,802b490 <dhc_ifacedone+0x4c>
   {
      return TRUE ;
 802b488:	00800044 	movi	r2,1
 802b48c:	00000106 	br	802b494 <dhc_ifacedone+0x50>
   }
   else
   {
      return FALSE ;
 802b490:	0005883a 	mov	r2,zero
   }
}
 802b494:	e037883a 	mov	sp,fp
 802b498:	df000017 	ldw	fp,0(sp)
 802b49c:	dec00104 	addi	sp,sp,4
 802b4a0:	f800283a 	ret

0802b4a4 <dhc_set_state>:
 *
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
 802b4a4:	defffc04 	addi	sp,sp,-16
 802b4a8:	dfc00315 	stw	ra,12(sp)
 802b4ac:	df000215 	stw	fp,8(sp)
 802b4b0:	df000204 	addi	fp,sp,8
 802b4b4:	e13fff15 	stw	r4,-4(fp)
 802b4b8:	e17ffe15 	stw	r5,-8(fp)
   dhc_states[iface].state = state; /* Set the new state */
 802b4bc:	e0fffe17 	ldw	r3,-8(fp)
 802b4c0:	e0bfff17 	ldw	r2,-4(fp)
 802b4c4:	11000f24 	muli	r4,r2,60
 802b4c8:	008201b4 	movhi	r2,2054
 802b4cc:	2085883a 	add	r2,r4,r2
 802b4d0:	10fb0015 	stw	r3,-5120(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
 802b4d4:	e0bfff17 	ldw	r2,-4(fp)
 802b4d8:	10c00f24 	muli	r3,r2,60
 802b4dc:	008201b4 	movhi	r2,2054
 802b4e0:	1885883a 	add	r2,r3,r2
 802b4e4:	103b0115 	stw	zero,-5116(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
 802b4e8:	e0bfff17 	ldw	r2,-4(fp)
 802b4ec:	10c00f24 	muli	r3,r2,60
 802b4f0:	008201b4 	movhi	r2,2054
 802b4f4:	1885883a 	add	r2,r3,r2
 802b4f8:	10bb0e17 	ldw	r2,-5064(r2)
 802b4fc:	10000826 	beq	r2,zero,802b520 <dhc_set_state+0x7c>
      dhc_states[iface].callback(iface,state);
 802b500:	e0bfff17 	ldw	r2,-4(fp)
 802b504:	10c00f24 	muli	r3,r2,60
 802b508:	008201b4 	movhi	r2,2054
 802b50c:	1885883a 	add	r2,r3,r2
 802b510:	10bb0e17 	ldw	r2,-5064(r2)
 802b514:	e17ffe17 	ldw	r5,-8(fp)
 802b518:	e13fff17 	ldw	r4,-4(fp)
 802b51c:	103ee83a 	callr	r2
}
 802b520:	0001883a 	nop
 802b524:	e037883a 	mov	sp,fp
 802b528:	dfc00117 	ldw	ra,4(sp)
 802b52c:	df000017 	ldw	fp,0(sp)
 802b530:	dec00204 	addi	sp,sp,8
 802b534:	f800283a 	ret

0802b538 <find_opt>:
 * RETURNS:  Return pointer to that code if found, NULL if not found.
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
 802b538:	defffc04 	addi	sp,sp,-16
 802b53c:	df000315 	stw	fp,12(sp)
 802b540:	df000304 	addi	fp,sp,12
 802b544:	2005883a 	mov	r2,r4
 802b548:	e17ffd15 	stw	r5,-12(fp)
 802b54c:	e0bffe05 	stb	r2,-8(fp)
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
 802b550:	e0bffd17 	ldw	r2,-12(fp)
 802b554:	10804e04 	addi	r2,r2,312
 802b558:	e0bfff15 	stw	r2,-4(fp)

   while (opts < end)
 802b55c:	00001e06 	br	802b5d8 <find_opt+0xa0>
   {
      if (*opts == opcode) /* found it */
 802b560:	e0bffd17 	ldw	r2,-12(fp)
 802b564:	10800003 	ldbu	r2,0(r2)
 802b568:	e0fffe03 	ldbu	r3,-8(fp)
 802b56c:	10803fcc 	andi	r2,r2,255
 802b570:	1880021e 	bne	r3,r2,802b57c <find_opt+0x44>
         return opts;
 802b574:	e0bffd17 	ldw	r2,-12(fp)
 802b578:	00001b06 	br	802b5e8 <find_opt+0xb0>
      if (*opts == DHOP_END)  /* end of options; opcode not found */
 802b57c:	e0bffd17 	ldw	r2,-12(fp)
 802b580:	10800003 	ldbu	r2,0(r2)
 802b584:	10803fcc 	andi	r2,r2,255
 802b588:	10803fd8 	cmpnei	r2,r2,255
 802b58c:	1000021e 	bne	r2,zero,802b598 <find_opt+0x60>
         return NULL;
 802b590:	0005883a 	mov	r2,zero
 802b594:	00001406 	br	802b5e8 <find_opt+0xb0>
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
 802b598:	e0bffd17 	ldw	r2,-12(fp)
 802b59c:	10800003 	ldbu	r2,0(r2)
 802b5a0:	10803fcc 	andi	r2,r2,255
 802b5a4:	1000041e 	bne	r2,zero,802b5b8 <find_opt+0x80>
         opts++;
 802b5a8:	e0bffd17 	ldw	r2,-12(fp)
 802b5ac:	10800044 	addi	r2,r2,1
 802b5b0:	e0bffd15 	stw	r2,-12(fp)
 802b5b4:	00000806 	br	802b5d8 <find_opt+0xa0>
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
 802b5b8:	e0bffd17 	ldw	r2,-12(fp)
 802b5bc:	10800044 	addi	r2,r2,1
 802b5c0:	10800003 	ldbu	r2,0(r2)
 802b5c4:	10803fcc 	andi	r2,r2,255
 802b5c8:	10800084 	addi	r2,r2,2
 802b5cc:	e0fffd17 	ldw	r3,-12(fp)
 802b5d0:	1885883a 	add	r2,r3,r2
 802b5d4:	e0bffd15 	stw	r2,-12(fp)
   while (opts < end)
 802b5d8:	e0fffd17 	ldw	r3,-12(fp)
 802b5dc:	e0bfff17 	ldw	r2,-4(fp)
 802b5e0:	18bfdf36 	bltu	r3,r2,802b560 <find_opt+0x28>
   }
   /* no DHOP_END option?? */
   return NULL;
 802b5e4:	0005883a 	mov	r2,zero
}
 802b5e8:	e037883a 	mov	sp,fp
 802b5ec:	df000017 	ldw	fp,0(sp)
 802b5f0:	dec00104 	addi	sp,sp,4
 802b5f4:	f800283a 	ret

0802b5f8 <pk_init>:
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
 802b5f8:	defff804 	addi	sp,sp,-32
 802b5fc:	dfc00715 	stw	ra,28(sp)
 802b600:	df000615 	stw	fp,24(sp)
 802b604:	df000604 	addi	fp,sp,24
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
 802b608:	d0e03417 	ldw	r3,-32560(gp)
 802b60c:	d0a03217 	ldw	r2,-32568(gp)
 802b610:	1885883a 	add	r2,r3,r2
 802b614:	e0bffc15 	stw	r2,-16(fp)
   u_char align_req;
   
#ifdef ALIGN_BUFS
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
 802b618:	e03ffbc5 	stb	zero,-17(fp)
#endif

   for (i = 0; i < numpkts; i++)
 802b61c:	e03fff15 	stw	zero,-4(fp)
 802b620:	00007806 	br	802b804 <pk_init+0x20c>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
 802b624:	01000d04 	movi	r4,52
 802b628:	802cf5c0 	call	802cf5c <npalloc>
 802b62c:	e0bffa15 	stw	r2,-24(fp)
      if (packet == NULL)
 802b630:	e0bffa17 	ldw	r2,-24(fp)
 802b634:	10008026 	beq	r2,zero,802b838 <pk_init+0x240>
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
 802b638:	e0bfff17 	ldw	r2,-4(fp)
 802b63c:	10800f30 	cmpltui	r2,r2,60
 802b640:	1000051e 	bne	r2,zero,802b658 <pk_init+0x60>
      {
         dprintf("pk_init: bad define\n");
 802b644:	01020174 	movhi	r4,2053
 802b648:	210aab04 	addi	r4,r4,10924
 802b64c:	80033800 	call	8003380 <puts>
         return -1;
 802b650:	00bfffc4 	movi	r2,-1
 802b654:	00008606 	br	802b870 <pk_init+0x278>
      }
      pktlog[i] = packet;     /* save for debugging */
 802b658:	e0bfff17 	ldw	r2,-4(fp)
 802b65c:	100890ba 	slli	r4,r2,2
 802b660:	e0fffa17 	ldw	r3,-24(fp)
 802b664:	008201b4 	movhi	r2,2054
 802b668:	2085883a 	add	r2,r4,r2
 802b66c:	10fb4515 	stw	r3,-4844(r2)
#endif

      packet->nb_tstamp = 0L;
 802b670:	e0bffa17 	ldw	r2,-24(fp)
 802b674:	10000515 	stw	zero,20(r2)

      if (i < bigbufs)
 802b678:	d0a03417 	ldw	r2,-32560(gp)
 802b67c:	e0ffff17 	ldw	r3,-4(fp)
 802b680:	18802f2e 	bgeu	r3,r2,802b740 <pk_init+0x148>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
 802b684:	d0a03517 	ldw	r2,-32556(gp)
 802b688:	10800144 	addi	r2,r2,5
 802b68c:	1009883a 	mov	r4,r2
 802b690:	802cfd00 	call	802cfd0 <ncpalloc>
 802b694:	1007883a 	mov	r3,r2
 802b698:	e0bffa17 	ldw	r2,-24(fp)
 802b69c:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 802b6a0:	e0bffa17 	ldw	r2,-24(fp)
 802b6a4:	10800117 	ldw	r2,4(r2)
 802b6a8:	10006526 	beq	r2,zero,802b840 <pk_init+0x248>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 802b6ac:	e03ffe15 	stw	zero,-8(fp)
 802b6b0:	00000906 	br	802b6d8 <pk_init+0xe0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 802b6b4:	e0bffa17 	ldw	r2,-24(fp)
 802b6b8:	10c00117 	ldw	r3,4(r2)
 802b6bc:	e0bffe17 	ldw	r2,-8(fp)
 802b6c0:	1885883a 	add	r2,r3,r2
 802b6c4:	00c01344 	movi	r3,77
 802b6c8:	10c00005 	stb	r3,0(r2)
            for(j = 0; j < ALIGN_TYPE; j++)
 802b6cc:	e0bffe17 	ldw	r2,-8(fp)
 802b6d0:	10800044 	addi	r2,r2,1
 802b6d4:	e0bffe15 	stw	r2,-8(fp)
 802b6d8:	e0bffe17 	ldw	r2,-8(fp)
 802b6dc:	10800110 	cmplti	r2,r2,4
 802b6e0:	103ff41e 	bne	r2,zero,802b6b4 <pk_init+0xbc>

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
 802b6e4:	e0bffa17 	ldw	r2,-24(fp)
 802b6e8:	10c00117 	ldw	r3,4(r2)
 802b6ec:	d0a03517 	ldw	r2,-32556(gp)
 802b6f0:	10800104 	addi	r2,r2,4
 802b6f4:	1885883a 	add	r2,r3,r2
 802b6f8:	00c01344 	movi	r3,77
 802b6fc:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
 802b700:	e0bffa17 	ldw	r2,-24(fp)
 802b704:	10800117 	ldw	r2,4(r2)
 802b708:	10c00104 	addi	r3,r2,4
 802b70c:	e0bffa17 	ldw	r2,-24(fp)
 802b710:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 802b714:	e0bffa17 	ldw	r2,-24(fp)
 802b718:	10800117 	ldw	r2,4(r2)
 802b71c:	10004a26 	beq	r2,zero,802b848 <pk_init+0x250>
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
 802b720:	d0e03517 	ldw	r3,-32556(gp)
 802b724:	e0bffa17 	ldw	r2,-24(fp)
 802b728:	10c00215 	stw	r3,8(r2)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
 802b72c:	e17ffa17 	ldw	r5,-24(fp)
 802b730:	010201b4 	movhi	r4,2054
 802b734:	213b8104 	addi	r4,r4,-4604
 802b738:	802bde00 	call	802bde0 <putq>
 802b73c:	00002e06 	br	802b7f8 <pk_init+0x200>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
 802b740:	d0a03317 	ldw	r2,-32564(gp)
 802b744:	10800144 	addi	r2,r2,5
 802b748:	1009883a 	mov	r4,r2
 802b74c:	802cfd00 	call	802cfd0 <ncpalloc>
 802b750:	1007883a 	mov	r3,r2
 802b754:	e0bffa17 	ldw	r2,-24(fp)
 802b758:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 802b75c:	e0bffa17 	ldw	r2,-24(fp)
 802b760:	10800117 	ldw	r2,4(r2)
 802b764:	10003a26 	beq	r2,zero,802b850 <pk_init+0x258>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 802b768:	e03ffd15 	stw	zero,-12(fp)
 802b76c:	00000906 	br	802b794 <pk_init+0x19c>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 802b770:	e0bffa17 	ldw	r2,-24(fp)
 802b774:	10c00117 	ldw	r3,4(r2)
 802b778:	e0bffd17 	ldw	r2,-12(fp)
 802b77c:	1885883a 	add	r2,r3,r2
 802b780:	00c01344 	movi	r3,77
 802b784:	10c00005 	stb	r3,0(r2)
            for(j = 0; j < ALIGN_TYPE; j++)
 802b788:	e0bffd17 	ldw	r2,-12(fp)
 802b78c:	10800044 	addi	r2,r2,1
 802b790:	e0bffd15 	stw	r2,-12(fp)
 802b794:	e0bffd17 	ldw	r2,-12(fp)
 802b798:	10800110 	cmplti	r2,r2,4
 802b79c:	103ff41e 	bne	r2,zero,802b770 <pk_init+0x178>

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
 802b7a0:	e0bffa17 	ldw	r2,-24(fp)
 802b7a4:	10c00117 	ldw	r3,4(r2)
 802b7a8:	d0a03317 	ldw	r2,-32564(gp)
 802b7ac:	10800104 	addi	r2,r2,4
 802b7b0:	1885883a 	add	r2,r3,r2
 802b7b4:	00c01344 	movi	r3,77
 802b7b8:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;
 802b7bc:	e0bffa17 	ldw	r2,-24(fp)
 802b7c0:	10800117 	ldw	r2,4(r2)
 802b7c4:	10c00104 	addi	r3,r2,4
 802b7c8:	e0bffa17 	ldw	r2,-24(fp)
 802b7cc:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 802b7d0:	e0bffa17 	ldw	r2,-24(fp)
 802b7d4:	10800117 	ldw	r2,4(r2)
 802b7d8:	10001f26 	beq	r2,zero,802b858 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
 802b7dc:	d0e03317 	ldw	r3,-32564(gp)
 802b7e0:	e0bffa17 	ldw	r2,-24(fp)
 802b7e4:	10c00215 	stw	r3,8(r2)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
 802b7e8:	e17ffa17 	ldw	r5,-24(fp)
 802b7ec:	010201b4 	movhi	r4,2054
 802b7f0:	213b3c04 	addi	r4,r4,-4880
 802b7f4:	802bde00 	call	802bde0 <putq>
   for (i = 0; i < numpkts; i++)
 802b7f8:	e0bfff17 	ldw	r2,-4(fp)
 802b7fc:	10800044 	addi	r2,r2,1
 802b800:	e0bfff15 	stw	r2,-4(fp)
 802b804:	e0ffff17 	ldw	r3,-4(fp)
 802b808:	e0bffc17 	ldw	r2,-16(fp)
 802b80c:	18bf8536 	bltu	r3,r2,802b624 <pk_init+0x2c>
      }
   }
   bigfreeq.q_min = bigbufs;
 802b810:	d0a03417 	ldw	r2,-32560(gp)
 802b814:	1007883a 	mov	r3,r2
 802b818:	008201b4 	movhi	r2,2054
 802b81c:	10fb8515 	stw	r3,-4588(r2)
   lilfreeq.q_min = lilbufs;
 802b820:	d0a03217 	ldw	r2,-32568(gp)
 802b824:	1007883a 	mov	r3,r2
 802b828:	008201b4 	movhi	r2,2054
 802b82c:	10fb4015 	stw	r3,-4864(r2)
   heap_curr_mem_hi_watermark = 0;
   /* set the heap's access type to blocking */
   heap_type = HEAP_ACCESS_BLOCKING;
#endif

   return 0;
 802b830:	0005883a 	mov	r2,zero
 802b834:	00000e06 	br	802b870 <pk_init+0x278>
         goto no_pkt_buf;
 802b838:	0001883a 	nop
 802b83c:	00000706 	br	802b85c <pk_init+0x264>
               goto no_pkt_buf;
 802b840:	0001883a 	nop
 802b844:	00000506 	br	802b85c <pk_init+0x264>
            goto no_pkt_buf;
 802b848:	0001883a 	nop
 802b84c:	00000306 	br	802b85c <pk_init+0x264>
               goto no_pkt_buf;
 802b850:	0001883a 	nop
 802b854:	00000106 	br	802b85c <pk_init+0x264>
            goto no_pkt_buf;
 802b858:	0001883a 	nop

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
 802b85c:	e17fff17 	ldw	r5,-4(fp)
 802b860:	01020174 	movhi	r4,2053
 802b864:	210ab004 	addi	r4,r4,10944
 802b868:	800325c0 	call	800325c <printf>
#endif
   return(-1);
 802b86c:	00bfffc4 	movi	r2,-1
}
 802b870:	e037883a 	mov	sp,fp
 802b874:	dfc00117 	ldw	ra,4(sp)
 802b878:	df000017 	ldw	fp,0(sp)
 802b87c:	dec00204 	addi	sp,sp,8
 802b880:	f800283a 	ret

0802b884 <pk_alloc>:
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
 802b884:	defffc04 	addi	sp,sp,-16
 802b888:	dfc00315 	stw	ra,12(sp)
 802b88c:	df000215 	stw	fp,8(sp)
 802b890:	df000204 	addi	fp,sp,8
 802b894:	e13ffe15 	stw	r4,-8(fp)
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
 802b898:	d0e03517 	ldw	r3,-32556(gp)
 802b89c:	e0bffe17 	ldw	r2,-8(fp)
 802b8a0:	1880022e 	bgeu	r3,r2,802b8ac <pk_alloc+0x28>
   {
#ifdef HEAPBUFS
      if ((p = pk_alloc_heapbuf (len)) == NULL)
         return NULL;
#else
      return(NULL);
 802b8a4:	0005883a 	mov	r2,zero
 802b8a8:	00002106 	br	802b930 <pk_alloc+0xac>
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 802b8ac:	d0e03317 	ldw	r3,-32564(gp)
 802b8b0:	e0bffe17 	ldw	r2,-8(fp)
 802b8b4:	18800336 	bltu	r3,r2,802b8c4 <pk_alloc+0x40>
 802b8b8:	008201b4 	movhi	r2,2054
 802b8bc:	10bb3e17 	ldw	r2,-4872(r2)
 802b8c0:	1000051e 	bne	r2,zero,802b8d8 <pk_alloc+0x54>
         p = (PACKET)getq(&bigfreeq);
 802b8c4:	010201b4 	movhi	r4,2054
 802b8c8:	213b8104 	addi	r4,r4,-4604
 802b8cc:	802bd280 	call	802bd28 <getq>
 802b8d0:	e0bfff15 	stw	r2,-4(fp)
 802b8d4:	00000406 	br	802b8e8 <pk_alloc+0x64>
      else
         p = (PACKET)getq(&lilfreeq);
 802b8d8:	010201b4 	movhi	r4,2054
 802b8dc:	213b3c04 	addi	r4,r4,-4880
 802b8e0:	802bd280 	call	802bd28 <getq>
 802b8e4:	e0bfff15 	stw	r2,-4(fp)

      if (!p)
 802b8e8:	e0bfff17 	ldw	r2,-4(fp)
 802b8ec:	1000021e 	bne	r2,zero,802b8f8 <pk_alloc+0x74>
         return NULL;
 802b8f0:	0005883a 	mov	r2,zero
 802b8f4:	00000e06 	br	802b930 <pk_alloc+0xac>
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 802b8f8:	e0bfff17 	ldw	r2,-4(fp)
 802b8fc:	10800117 	ldw	r2,4(r2)
 802b900:	d0e07c17 	ldw	r3,-32272(gp)
 802b904:	10c7883a 	add	r3,r2,r3
 802b908:	e0bfff17 	ldw	r2,-4(fp)
 802b90c:	10c00315 	stw	r3,12(r2)
   p->nb_plen = 0;   /* no protocol data there yet */
 802b910:	e0bfff17 	ldw	r2,-4(fp)
 802b914:	10000415 	stw	zero,16(r2)
   p->net = NULL;
 802b918:	e0bfff17 	ldw	r2,-4(fp)
 802b91c:	10000615 	stw	zero,24(r2)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
 802b920:	e0bfff17 	ldw	r2,-4(fp)
 802b924:	00c00044 	movi	r3,1
 802b928:	10c00915 	stw	r3,36(r2)

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
 802b92c:	e0bfff17 	ldw	r2,-4(fp)
}
 802b930:	e037883a 	mov	sp,fp
 802b934:	dfc00117 	ldw	ra,4(sp)
 802b938:	df000017 	ldw	fp,0(sp)
 802b93c:	dec00204 	addi	sp,sp,8
 802b940:	f800283a 	ret

0802b944 <pk_validate>:
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
 802b944:	defffb04 	addi	sp,sp,-20
 802b948:	dfc00415 	stw	ra,16(sp)
 802b94c:	df000315 	stw	fp,12(sp)
 802b950:	df000304 	addi	fp,sp,12
 802b954:	e13ffd15 	stw	r4,-12(fp)
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
 802b958:	e0bffd17 	ldw	r2,-12(fp)
 802b95c:	10800017 	ldw	r2,0(r2)
 802b960:	10000c26 	beq	r2,zero,802b994 <pk_validate+0x50>
 802b964:	e0bffd17 	ldw	r2,-12(fp)
 802b968:	10800917 	ldw	r2,36(r2)
 802b96c:	10000926 	beq	r2,zero,802b994 <pk_validate+0x50>
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
 802b970:	802c5bc0 	call	802c5bc <irq_Mask>
 802b974:	008201b4 	movhi	r2,2054
 802b978:	10bb4417 	ldw	r2,-4848(r2)
 802b97c:	10c00044 	addi	r3,r2,1
 802b980:	008201b4 	movhi	r2,2054
 802b984:	10fb4415 	stw	r3,-4848(r2)
 802b988:	802c61c0 	call	802c61c <irq_Unmask>
      return -1;
 802b98c:	00bfffc4 	movi	r2,-1
 802b990:	00007c06 	br	802bb84 <pk_validate+0x240>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
 802b994:	e0bffd17 	ldw	r2,-12(fp)
 802b998:	10c00217 	ldw	r3,8(r2)
 802b99c:	d0a03517 	ldw	r2,-32556(gp)
 802b9a0:	18801d1e 	bne	r3,r2,802ba18 <pk_validate+0xd4>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
 802b9a4:	802c5bc0 	call	802c5bc <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 802b9a8:	008201b4 	movhi	r2,2054
 802b9ac:	10bb8117 	ldw	r2,-4604(r2)
 802b9b0:	e0bfff15 	stw	r2,-4(fp)
 802b9b4:	00001406 	br	802ba08 <pk_validate+0xc4>
            if (p == pkt)
 802b9b8:	e0ffff17 	ldw	r3,-4(fp)
 802b9bc:	e0bffd17 	ldw	r2,-12(fp)
 802b9c0:	18800e1e 	bne	r3,r2,802b9fc <pk_validate+0xb8>
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
 802b9c4:	e17ffd17 	ldw	r5,-12(fp)
 802b9c8:	01020174 	movhi	r4,2053
 802b9cc:	210abb04 	addi	r4,r4,10988
 802b9d0:	800325c0 	call	800325c <printf>
               EXIT_CRIT_SECTION(&bigfreeq);
 802b9d4:	802c61c0 	call	802c61c <irq_Unmask>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 802b9d8:	802c5bc0 	call	802c5bc <irq_Mask>
 802b9dc:	008201b4 	movhi	r2,2054
 802b9e0:	10bb4317 	ldw	r2,-4852(r2)
 802b9e4:	10c00044 	addi	r3,r2,1
 802b9e8:	008201b4 	movhi	r2,2054
 802b9ec:	10fb4315 	stw	r3,-4852(r2)
 802b9f0:	802c61c0 	call	802c61c <irq_Unmask>
               return -1;
 802b9f4:	00bfffc4 	movi	r2,-1
 802b9f8:	00006206 	br	802bb84 <pk_validate+0x240>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 802b9fc:	e0bfff17 	ldw	r2,-4(fp)
 802ba00:	10800017 	ldw	r2,0(r2)
 802ba04:	e0bfff15 	stw	r2,-4(fp)
 802ba08:	e0bfff17 	ldw	r2,-4(fp)
 802ba0c:	103fea1e 	bne	r2,zero,802b9b8 <pk_validate+0x74>
            }
         EXIT_CRIT_SECTION(&bigfreeq);
 802ba10:	802c61c0 	call	802c61c <irq_Unmask>
 802ba14:	00002a06 	br	802bac0 <pk_validate+0x17c>
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
 802ba18:	e0bffd17 	ldw	r2,-12(fp)
 802ba1c:	10c00217 	ldw	r3,8(r2)
 802ba20:	d0a03317 	ldw	r2,-32564(gp)
 802ba24:	18801d1e 	bne	r3,r2,802ba9c <pk_validate+0x158>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
 802ba28:	802c5bc0 	call	802c5bc <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 802ba2c:	008201b4 	movhi	r2,2054
 802ba30:	10bb3c17 	ldw	r2,-4880(r2)
 802ba34:	e0bfff15 	stw	r2,-4(fp)
 802ba38:	00001406 	br	802ba8c <pk_validate+0x148>
            if (p == pkt)
 802ba3c:	e0ffff17 	ldw	r3,-4(fp)
 802ba40:	e0bffd17 	ldw	r2,-12(fp)
 802ba44:	18800e1e 	bne	r3,r2,802ba80 <pk_validate+0x13c>
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
 802ba48:	e17ffd17 	ldw	r5,-12(fp)
 802ba4c:	01020174 	movhi	r4,2053
 802ba50:	210ac504 	addi	r4,r4,11028
 802ba54:	800325c0 	call	800325c <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
 802ba58:	802c61c0 	call	802c61c <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 802ba5c:	802c5bc0 	call	802c5bc <irq_Mask>
 802ba60:	008201b4 	movhi	r2,2054
 802ba64:	10bb4317 	ldw	r2,-4852(r2)
 802ba68:	10c00044 	addi	r3,r2,1
 802ba6c:	008201b4 	movhi	r2,2054
 802ba70:	10fb4315 	stw	r3,-4852(r2)
 802ba74:	802c61c0 	call	802c61c <irq_Unmask>
            return -1;
 802ba78:	00bfffc4 	movi	r2,-1
 802ba7c:	00004106 	br	802bb84 <pk_validate+0x240>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 802ba80:	e0bfff17 	ldw	r2,-4(fp)
 802ba84:	10800017 	ldw	r2,0(r2)
 802ba88:	e0bfff15 	stw	r2,-4(fp)
 802ba8c:	e0bfff17 	ldw	r2,-4(fp)
 802ba90:	103fea1e 	bne	r2,zero,802ba3c <pk_validate+0xf8>
         }
         EXIT_CRIT_SECTION(&lilfreeq);
 802ba94:	802c61c0 	call	802c61c <irq_Unmask>
 802ba98:	00000906 	br	802bac0 <pk_validate+0x17c>
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
 802ba9c:	802c5bc0 	call	802c5bc <irq_Mask>
 802baa0:	008201b4 	movhi	r2,2054
 802baa4:	10bb4117 	ldw	r2,-4860(r2)
 802baa8:	10c00044 	addi	r3,r2,1
 802baac:	008201b4 	movhi	r2,2054
 802bab0:	10fb4115 	stw	r3,-4860(r2)
 802bab4:	802c61c0 	call	802c61c <irq_Unmask>
         return -1;
 802bab8:	00bfffc4 	movi	r2,-1
 802babc:	00003106 	br	802bb84 <pk_validate+0x240>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
 802bac0:	00800104 	movi	r2,4
 802bac4:	e0bffe15 	stw	r2,-8(fp)
 802bac8:	00001706 	br	802bb28 <pk_validate+0x1e4>
   {
      if (*(pkt->nb_buff - j) != 'M')
 802bacc:	e0bffd17 	ldw	r2,-12(fp)
 802bad0:	10c00117 	ldw	r3,4(r2)
 802bad4:	e0bffe17 	ldw	r2,-8(fp)
 802bad8:	0085c83a 	sub	r2,zero,r2
 802badc:	1885883a 	add	r2,r3,r2
 802bae0:	10800003 	ldbu	r2,0(r2)
 802bae4:	10803fcc 	andi	r2,r2,255
 802bae8:	1080201c 	xori	r2,r2,128
 802baec:	10bfe004 	addi	r2,r2,-128
 802baf0:	10801360 	cmpeqi	r2,r2,77
 802baf4:	1000091e 	bne	r2,zero,802bb1c <pk_validate+0x1d8>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 802baf8:	802c5bc0 	call	802c5bc <irq_Mask>
 802bafc:	008201b4 	movhi	r2,2054
 802bb00:	10bb4217 	ldw	r2,-4856(r2)
 802bb04:	10c00044 	addi	r3,r2,1
 802bb08:	008201b4 	movhi	r2,2054
 802bb0c:	10fb4215 	stw	r3,-4856(r2)
 802bb10:	802c61c0 	call	802c61c <irq_Unmask>
         return -1;
 802bb14:	00bfffc4 	movi	r2,-1
 802bb18:	00001a06 	br	802bb84 <pk_validate+0x240>
   for (j = ALIGN_TYPE; j > 0; j--)
 802bb1c:	e0bffe17 	ldw	r2,-8(fp)
 802bb20:	10bfffc4 	addi	r2,r2,-1
 802bb24:	e0bffe15 	stw	r2,-8(fp)
 802bb28:	e0bffe17 	ldw	r2,-8(fp)
 802bb2c:	00bfe716 	blt	zero,r2,802bacc <pk_validate+0x188>
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
 802bb30:	e0bffd17 	ldw	r2,-12(fp)
 802bb34:	10c00117 	ldw	r3,4(r2)
 802bb38:	e0bffd17 	ldw	r2,-12(fp)
 802bb3c:	10800217 	ldw	r2,8(r2)
 802bb40:	1885883a 	add	r2,r3,r2
 802bb44:	10800003 	ldbu	r2,0(r2)
 802bb48:	10803fcc 	andi	r2,r2,255
 802bb4c:	1080201c 	xori	r2,r2,128
 802bb50:	10bfe004 	addi	r2,r2,-128
 802bb54:	10801360 	cmpeqi	r2,r2,77
 802bb58:	1000091e 	bne	r2,zero,802bb80 <pk_validate+0x23c>
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 802bb5c:	802c5bc0 	call	802c5bc <irq_Mask>
 802bb60:	008201b4 	movhi	r2,2054
 802bb64:	10bb4217 	ldw	r2,-4856(r2)
 802bb68:	10c00044 	addi	r3,r2,1
 802bb6c:	008201b4 	movhi	r2,2054
 802bb70:	10fb4215 	stw	r3,-4856(r2)
 802bb74:	802c61c0 	call	802c61c <irq_Unmask>
      return -1;
 802bb78:	00bfffc4 	movi	r2,-1
 802bb7c:	00000106 	br	802bb84 <pk_validate+0x240>
   }
#endif /* NPDEBUG */

   return 0;
 802bb80:	0005883a 	mov	r2,zero
}
 802bb84:	e037883a 	mov	sp,fp
 802bb88:	dfc00117 	ldw	ra,4(sp)
 802bb8c:	df000017 	ldw	fp,0(sp)
 802bb90:	dec00204 	addi	sp,sp,8
 802bb94:	f800283a 	ret

0802bb98 <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
 802bb98:	defffc04 	addi	sp,sp,-16
 802bb9c:	dfc00315 	stw	ra,12(sp)
 802bba0:	df000215 	stw	fp,8(sp)
 802bba4:	df000204 	addi	fp,sp,8
 802bba8:	e13ffe15 	stw	r4,-8(fp)
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
 802bbac:	e13ffe17 	ldw	r4,-8(fp)
 802bbb0:	802b9440 	call	802b944 <pk_validate>
 802bbb4:	e0bfff15 	stw	r2,-4(fp)
      if (e)
 802bbb8:	e0bfff17 	ldw	r2,-4(fp)
 802bbbc:	1000191e 	bne	r2,zero,802bc24 <pk_free+0x8c>
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
 802bbc0:	e0bffe17 	ldw	r2,-8(fp)
 802bbc4:	10800917 	ldw	r2,36(r2)
 802bbc8:	113fffc4 	addi	r4,r2,-1
 802bbcc:	e0fffe17 	ldw	r3,-8(fp)
 802bbd0:	19000915 	stw	r4,36(r3)
 802bbd4:	108000b0 	cmpltui	r2,r2,2
 802bbd8:	10001426 	beq	r2,zero,802bc2c <pk_free+0x94>
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
 802bbdc:	e0bffe17 	ldw	r2,-8(fp)
 802bbe0:	10c00217 	ldw	r3,8(r2)
 802bbe4:	d0a03517 	ldw	r2,-32556(gp)
 802bbe8:	1880051e 	bne	r3,r2,802bc00 <pk_free+0x68>
            q_add(&bigfreeq, (qp)pkt);
 802bbec:	e17ffe17 	ldw	r5,-8(fp)
 802bbf0:	010201b4 	movhi	r4,2054
 802bbf4:	213b8104 	addi	r4,r4,-4604
 802bbf8:	802bde00 	call	802bde0 <putq>
 802bbfc:	00000c06 	br	802bc30 <pk_free+0x98>
         else if (pkt->nb_blen == lilbufsiz)
 802bc00:	e0bffe17 	ldw	r2,-8(fp)
 802bc04:	10c00217 	ldw	r3,8(r2)
 802bc08:	d0a03317 	ldw	r2,-32564(gp)
 802bc0c:	1880081e 	bne	r3,r2,802bc30 <pk_free+0x98>
            q_add(&lilfreeq, (qp)pkt);
 802bc10:	e17ffe17 	ldw	r5,-8(fp)
 802bc14:	010201b4 	movhi	r4,2054
 802bc18:	213b3c04 	addi	r4,r4,-4880
 802bc1c:	802bde00 	call	802bde0 <putq>
 802bc20:	00000306 	br	802bc30 <pk_free+0x98>
         return;
 802bc24:	0001883a 	nop
 802bc28:	00000106 	br	802bc30 <pk_free+0x98>
         return;  /* packet was cloned, don't delete yet */
 802bc2c:	0001883a 	nop
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
 802bc30:	e037883a 	mov	sp,fp
 802bc34:	dfc00117 	ldw	ra,4(sp)
 802bc38:	df000017 	ldw	fp,0(sp)
 802bc3c:	dec00204 	addi	sp,sp,8
 802bc40:	f800283a 	ret

0802bc44 <pk_get_max_intrsafe_buf_len>:
 *
 * OUTPUT: This function always returns the length of a big buffer (bigbufsiz).
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
 802bc44:	deffff04 	addi	sp,sp,-4
 802bc48:	df000015 	stw	fp,0(sp)
 802bc4c:	d839883a 	mov	fp,sp
   return bigbufsiz;
 802bc50:	d0a03517 	ldw	r2,-32556(gp)
}
 802bc54:	e037883a 	mov	sp,fp
 802bc58:	df000017 	ldw	fp,0(sp)
 802bc5c:	dec00104 	addi	sp,sp,4
 802bc60:	f800283a 	ret

0802bc64 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 802bc64:	defff904 	addi	sp,sp,-28
 802bc68:	dfc00615 	stw	ra,24(sp)
 802bc6c:	df000515 	stw	fp,20(sp)
 802bc70:	df000504 	addi	fp,sp,20
 802bc74:	e13ffb15 	stw	r4,-20(fp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 802bc78:	01000084 	movi	r4,2
 802bc7c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
 802bc80:	802c5bc0 	call	802c5bc <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
 802bc84:	008201b4 	movhi	r2,2054
 802bc88:	10bb4117 	ldw	r2,-4860(r2)
 802bc8c:	e0bffc15 	stw	r2,-16(fp)
 802bc90:	008201b4 	movhi	r2,2054
 802bc94:	10bb4217 	ldw	r2,-4856(r2)
 802bc98:	e0bffd15 	stw	r2,-12(fp)
 802bc9c:	008201b4 	movhi	r2,2054
 802bca0:	10bb4317 	ldw	r2,-4852(r2)
 802bca4:	e0bffe15 	stw	r2,-8(fp)
 802bca8:	008201b4 	movhi	r2,2054
 802bcac:	10bb4417 	ldw	r2,-4848(r2)
 802bcb0:	e0bfff15 	stw	r2,-4(fp)
   EXIT_CRIT_SECTION(&memestats);
 802bcb4:	802c61c0 	call	802c61c <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802bcb8:	01000084 	movi	r4,2
 802bcbc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
 802bcc0:	01420174 	movhi	r5,2053
 802bcc4:	294acf04 	addi	r5,r5,11068
 802bcc8:	e13ffb17 	ldw	r4,-20(fp)
 802bccc:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
 802bcd0:	e0bffc17 	ldw	r2,-16(fp)
 802bcd4:	e0fffd17 	ldw	r3,-12(fp)
 802bcd8:	180f883a 	mov	r7,r3
 802bcdc:	100d883a 	mov	r6,r2
 802bce0:	01420174 	movhi	r5,2053
 802bce4:	294ad804 	addi	r5,r5,11104
 802bce8:	e13ffb17 	ldw	r4,-20(fp)
 802bcec:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
 802bcf0:	e0bffe17 	ldw	r2,-8(fp)
 802bcf4:	e0ffff17 	ldw	r3,-4(fp)
 802bcf8:	180f883a 	mov	r7,r3
 802bcfc:	100d883a 	mov	r6,r2
 802bd00:	01420174 	movhi	r5,2053
 802bd04:	294ae504 	addi	r5,r5,11156
 802bd08:	e13ffb17 	ldw	r4,-20(fp)
 802bd0c:	80281f80 	call	80281f8 <ns_printf>

   return 0;
 802bd10:	0005883a 	mov	r2,zero
}
 802bd14:	e037883a 	mov	sp,fp
 802bd18:	dfc00117 	ldw	ra,4(sp)
 802bd1c:	df000017 	ldw	fp,0(sp)
 802bd20:	dec00204 	addi	sp,sp,8
 802bd24:	f800283a 	ret

0802bd28 <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
 802bd28:	defffc04 	addi	sp,sp,-16
 802bd2c:	dfc00315 	stw	ra,12(sp)
 802bd30:	df000215 	stw	fp,8(sp)
 802bd34:	df000204 	addi	fp,sp,8
 802bd38:	e13ffe15 	stw	r4,-8(fp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
 802bd3c:	802c5bc0 	call	802c5bc <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
 802bd40:	e0bffe17 	ldw	r2,-8(fp)
 802bd44:	10800017 	ldw	r2,0(r2)
 802bd48:	e0bfff15 	stw	r2,-4(fp)
 802bd4c:	e0bfff17 	ldw	r2,-4(fp)
 802bd50:	1000031e 	bne	r2,zero,802bd60 <getq+0x38>
   {
      EXIT_CRIT_SECTION(q);
 802bd54:	802c61c0 	call	802c61c <irq_Unmask>
      return (0);             /* yes, show none */
 802bd58:	0005883a 	mov	r2,zero
 802bd5c:	00001b06 	br	802bdcc <getq+0xa4>
   }

   q->q_head = temp->qe_next; /* else unlink */
 802bd60:	e0bfff17 	ldw	r2,-4(fp)
 802bd64:	10c00017 	ldw	r3,0(r2)
 802bd68:	e0bffe17 	ldw	r2,-8(fp)
 802bd6c:	10c00015 	stw	r3,0(r2)
   temp->qe_next = 0;         /* avoid dangling pointers */
 802bd70:	e0bfff17 	ldw	r2,-4(fp)
 802bd74:	10000015 	stw	zero,0(r2)
   if (q->q_head == 0)        /* queue empty? */
 802bd78:	e0bffe17 	ldw	r2,-8(fp)
 802bd7c:	10800017 	ldw	r2,0(r2)
 802bd80:	1000021e 	bne	r2,zero,802bd8c <getq+0x64>
      q->q_tail = 0;          /* yes, update tail pointer too */
 802bd84:	e0bffe17 	ldw	r2,-8(fp)
 802bd88:	10000115 	stw	zero,4(r2)
   q->q_len--;                /* update queue length */
 802bd8c:	e0bffe17 	ldw	r2,-8(fp)
 802bd90:	10800217 	ldw	r2,8(r2)
 802bd94:	10ffffc4 	addi	r3,r2,-1
 802bd98:	e0bffe17 	ldw	r2,-8(fp)
 802bd9c:	10c00215 	stw	r3,8(r2)
   if (q->q_len < q->q_min)
 802bda0:	e0bffe17 	ldw	r2,-8(fp)
 802bda4:	10c00217 	ldw	r3,8(r2)
 802bda8:	e0bffe17 	ldw	r2,-8(fp)
 802bdac:	10800417 	ldw	r2,16(r2)
 802bdb0:	1880040e 	bge	r3,r2,802bdc4 <getq+0x9c>
      q->q_min = q->q_len;
 802bdb4:	e0bffe17 	ldw	r2,-8(fp)
 802bdb8:	10c00217 	ldw	r3,8(r2)
 802bdbc:	e0bffe17 	ldw	r2,-8(fp)
 802bdc0:	10c00415 	stw	r3,16(r2)

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
 802bdc4:	802c61c0 	call	802c61c <irq_Unmask>

   return ((void*)temp);
 802bdc8:	e0bfff17 	ldw	r2,-4(fp)
}
 802bdcc:	e037883a 	mov	sp,fp
 802bdd0:	dfc00117 	ldw	ra,4(sp)
 802bdd4:	df000017 	ldw	fp,0(sp)
 802bdd8:	dec00204 	addi	sp,sp,8
 802bddc:	f800283a 	ret

0802bde0 <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
 802bde0:	defffc04 	addi	sp,sp,-16
 802bde4:	dfc00315 	stw	ra,12(sp)
 802bde8:	df000215 	stw	fp,8(sp)
 802bdec:	df000204 	addi	fp,sp,8
 802bdf0:	e13fff15 	stw	r4,-4(fp)
 802bdf4:	e17ffe15 	stw	r5,-8(fp)
   ENTER_CRIT_SECTION(q);
 802bdf8:	802c5bc0 	call	802c5bc <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
 802bdfc:	e0bffe17 	ldw	r2,-8(fp)
 802be00:	10000015 	stw	zero,0(r2)
 802be04:	e0bfff17 	ldw	r2,-4(fp)
 802be08:	10800017 	ldw	r2,0(r2)
 802be0c:	1000041e 	bne	r2,zero,802be20 <putq+0x40>
 802be10:	e0bfff17 	ldw	r2,-4(fp)
 802be14:	e0fffe17 	ldw	r3,-8(fp)
 802be18:	10c00015 	stw	r3,0(r2)
 802be1c:	00000406 	br	802be30 <putq+0x50>
 802be20:	e0bfff17 	ldw	r2,-4(fp)
 802be24:	10800117 	ldw	r2,4(r2)
 802be28:	e0fffe17 	ldw	r3,-8(fp)
 802be2c:	10c00015 	stw	r3,0(r2)
 802be30:	e0bfff17 	ldw	r2,-4(fp)
 802be34:	e0fffe17 	ldw	r3,-8(fp)
 802be38:	10c00115 	stw	r3,4(r2)
 802be3c:	e0bfff17 	ldw	r2,-4(fp)
 802be40:	10800217 	ldw	r2,8(r2)
 802be44:	10c00044 	addi	r3,r2,1
 802be48:	e0bfff17 	ldw	r2,-4(fp)
 802be4c:	10c00215 	stw	r3,8(r2)
 802be50:	e0bfff17 	ldw	r2,-4(fp)
 802be54:	10800217 	ldw	r2,8(r2)
 802be58:	e0ffff17 	ldw	r3,-4(fp)
 802be5c:	18c00317 	ldw	r3,12(r3)
 802be60:	1880040e 	bge	r3,r2,802be74 <putq+0x94>
 802be64:	e0bfff17 	ldw	r2,-4(fp)
 802be68:	10c00217 	ldw	r3,8(r2)
 802be6c:	e0bfff17 	ldw	r2,-4(fp)
 802be70:	10c00315 	stw	r3,12(r2)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
 802be74:	802c61c0 	call	802c61c <irq_Unmask>
}
 802be78:	0001883a 	nop
 802be7c:	e037883a 	mov	sp,fp
 802be80:	dfc00117 	ldw	ra,4(sp)
 802be84:	df000017 	ldw	fp,0(sp)
 802be88:	dec00204 	addi	sp,sp,8
 802be8c:	f800283a 	ret

0802be90 <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
 802be90:	defffa04 	addi	sp,sp,-24
 802be94:	dfc00515 	stw	ra,20(sp)
 802be98:	df000415 	stw	fp,16(sp)
 802be9c:	df000404 	addi	fp,sp,16
 802bea0:	e13ffd15 	stw	r4,-12(fp)
 802bea4:	e17ffc15 	stw	r5,-16(fp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
 802bea8:	802c5bc0 	call	802c5bc <irq_Mask>
   qptr = q->q_head;
 802beac:	e0bffd17 	ldw	r2,-12(fp)
 802beb0:	10800017 	ldw	r2,0(r2)
 802beb4:	e0bfff15 	stw	r2,-4(fp)
   qlast = NULL;
 802beb8:	e03ffe15 	stw	zero,-8(fp)
   while (qptr)
 802bebc:	00002b06 	br	802bf6c <qdel+0xdc>
   {
      if (qptr == (qp)elt)
 802bec0:	e0ffff17 	ldw	r3,-4(fp)
 802bec4:	e0bffc17 	ldw	r2,-16(fp)
 802bec8:	1880231e 	bne	r3,r2,802bf58 <qdel+0xc8>
      {
         /* found our item; dequeue it */
         if (qlast)
 802becc:	e0bffe17 	ldw	r2,-8(fp)
 802bed0:	10000526 	beq	r2,zero,802bee8 <qdel+0x58>
            qlast->qe_next = qptr->qe_next;
 802bed4:	e0bfff17 	ldw	r2,-4(fp)
 802bed8:	10c00017 	ldw	r3,0(r2)
 802bedc:	e0bffe17 	ldw	r2,-8(fp)
 802bee0:	10c00015 	stw	r3,0(r2)
 802bee4:	00000406 	br	802bef8 <qdel+0x68>
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
 802bee8:	e0bfff17 	ldw	r2,-4(fp)
 802beec:	10c00017 	ldw	r3,0(r2)
 802bef0:	e0bffd17 	ldw	r2,-12(fp)
 802bef4:	10c00015 	stw	r3,0(r2)

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
 802bef8:	e0bffd17 	ldw	r2,-12(fp)
 802befc:	10800117 	ldw	r2,4(r2)
 802bf00:	e0fffc17 	ldw	r3,-16(fp)
 802bf04:	1880031e 	bne	r3,r2,802bf14 <qdel+0x84>
            q->q_tail = qlast;
 802bf08:	e0bffd17 	ldw	r2,-12(fp)
 802bf0c:	e0fffe17 	ldw	r3,-8(fp)
 802bf10:	10c00115 	stw	r3,4(r2)

         /* fix queue counters */
         q->q_len--;
 802bf14:	e0bffd17 	ldw	r2,-12(fp)
 802bf18:	10800217 	ldw	r2,8(r2)
 802bf1c:	10ffffc4 	addi	r3,r2,-1
 802bf20:	e0bffd17 	ldw	r2,-12(fp)
 802bf24:	10c00215 	stw	r3,8(r2)
         if (q->q_len < q->q_min)
 802bf28:	e0bffd17 	ldw	r2,-12(fp)
 802bf2c:	10c00217 	ldw	r3,8(r2)
 802bf30:	e0bffd17 	ldw	r2,-12(fp)
 802bf34:	10800417 	ldw	r2,16(r2)
 802bf38:	1880040e 	bge	r3,r2,802bf4c <qdel+0xbc>
            q->q_min = q->q_len;
 802bf3c:	e0bffd17 	ldw	r2,-12(fp)
 802bf40:	10c00217 	ldw	r3,8(r2)
 802bf44:	e0bffd17 	ldw	r2,-12(fp)
 802bf48:	10c00415 	stw	r3,16(r2)
         EXIT_CRIT_SECTION(q);   /* restore int state */
 802bf4c:	802c61c0 	call	802c61c <irq_Unmask>
         return (qp)elt;   /* success exit point */
 802bf50:	e0bffc17 	ldw	r2,-16(fp)
 802bf54:	00000906 	br	802bf7c <qdel+0xec>
      }
      qlast = qptr;
 802bf58:	e0bfff17 	ldw	r2,-4(fp)
 802bf5c:	e0bffe15 	stw	r2,-8(fp)
      qptr = qptr->qe_next;
 802bf60:	e0bfff17 	ldw	r2,-4(fp)
 802bf64:	10800017 	ldw	r2,0(r2)
 802bf68:	e0bfff15 	stw	r2,-4(fp)
   while (qptr)
 802bf6c:	e0bfff17 	ldw	r2,-4(fp)
 802bf70:	103fd31e 	bne	r2,zero,802bec0 <qdel+0x30>
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
 802bf74:	802c61c0 	call	802c61c <irq_Unmask>
   return NULL;   /* item not found in queue */
 802bf78:	0005883a 	mov	r2,zero
}
 802bf7c:	e037883a 	mov	sp,fp
 802bf80:	dfc00117 	ldw	ra,4(sp)
 802bf84:	df000017 	ldw	fp,0(sp)
 802bf88:	dec00204 	addi	sp,sp,8
 802bf8c:	f800283a 	ret

0802bf90 <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 802bf90:	defff404 	addi	sp,sp,-48
 802bf94:	dfc00b15 	stw	ra,44(sp)
 802bf98:	df000a15 	stw	fp,40(sp)
 802bf9c:	df000a04 	addi	fp,sp,40
 802bfa0:	e13ffd15 	stw	r4,-12(fp)
 802bfa4:	2805883a 	mov	r2,r5
 802bfa8:	3007883a 	mov	r3,r6
 802bfac:	e1fffa15 	stw	r7,-24(fp)
 802bfb0:	e0bffc0d 	sth	r2,-16(fp)
 802bfb4:	1805883a 	mov	r2,r3
 802bfb8:	e0bffb0d 	sth	r2,-20(fp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 802bfbc:	d0a07e17 	ldw	r2,-32264(gp)
 802bfc0:	1080010c 	andi	r2,r2,4
 802bfc4:	10001526 	beq	r2,zero,802c01c <udp_open+0x8c>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802bfc8:	e0bffd17 	ldw	r2,-12(fp)
 802bfcc:	12003fcc 	andi	r8,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802bfd0:	e0bffd17 	ldw	r2,-12(fp)
 802bfd4:	1004d23a 	srli	r2,r2,8
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802bfd8:	11803fcc 	andi	r6,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802bfdc:	e0bffd17 	ldw	r2,-12(fp)
 802bfe0:	1004d43a 	srli	r2,r2,16
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802bfe4:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
 802bfe8:	e0bffd17 	ldw	r2,-12(fp)
 802bfec:	1004d63a 	srli	r2,r2,24
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 802bff0:	e0fffb0b 	ldhu	r3,-20(fp)
 802bff4:	e13ffc0b 	ldhu	r4,-16(fp)
 802bff8:	e1400217 	ldw	r5,8(fp)
 802bffc:	d9400315 	stw	r5,12(sp)
 802c000:	d9000215 	stw	r4,8(sp)
 802c004:	d8c00115 	stw	r3,4(sp)
 802c008:	d8800015 	stw	r2,0(sp)
 802c00c:	400b883a 	mov	r5,r8
 802c010:	01020174 	movhi	r4,2053
 802c014:	210af104 	addi	r4,r4,11204
 802c018:	800325c0 	call	800325c <printf>
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 802c01c:	0009883a 	mov	r4,zero
 802c020:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   ocon = NULL;
 802c024:	e03ffe15 	stw	zero,-8(fp)
   for (con = firstudp; con; con = con->u_next)
 802c028:	d0a09717 	ldw	r2,-32164(gp)
 802c02c:	e0bfff15 	stw	r2,-4(fp)
 802c030:	00002006 	br	802c0b4 <udp_open+0x124>
   {
      ocon = con;       /* remember last con in list */
 802c034:	e0bfff17 	ldw	r2,-4(fp)
 802c038:	e0bffe15 	stw	r2,-8(fp)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
 802c03c:	e0bfff17 	ldw	r2,-4(fp)
 802c040:	1080018b 	ldhu	r2,6(r2)
 802c044:	e0fffb0b 	ldhu	r3,-20(fp)
 802c048:	10bfffcc 	andi	r2,r2,65535
 802c04c:	1880161e 	bne	r3,r2,802c0a8 <udp_open+0x118>
 802c050:	e0bfff17 	ldw	r2,-4(fp)
 802c054:	1080020b 	ldhu	r2,8(r2)
 802c058:	e0fffc0b 	ldhu	r3,-16(fp)
 802c05c:	10bfffcc 	andi	r2,r2,65535
 802c060:	1880111e 	bne	r3,r2,802c0a8 <udp_open+0x118>
          con->u_lhost == 0 && con->u_fhost == fhost)
 802c064:	e0bfff17 	ldw	r2,-4(fp)
 802c068:	10800317 	ldw	r2,12(r2)
      if (con->u_lport == lsock && con->u_fport == fsock &&
 802c06c:	10000e1e 	bne	r2,zero,802c0a8 <udp_open+0x118>
          con->u_lhost == 0 && con->u_fhost == fhost)
 802c070:	e0bfff17 	ldw	r2,-4(fp)
 802c074:	10800417 	ldw	r2,16(r2)
 802c078:	e0fffd17 	ldw	r3,-12(fp)
 802c07c:	18800a1e 	bne	r3,r2,802c0a8 <udp_open+0x118>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
 802c080:	d0a07e17 	ldw	r2,-32264(gp)
 802c084:	1080050c 	andi	r2,r2,20
 802c088:	10000326 	beq	r2,zero,802c098 <udp_open+0x108>
            dprintf("UDP: Connection already exists.\n");
 802c08c:	01020174 	movhi	r4,2053
 802c090:	210b0004 	addi	r4,r4,11264
 802c094:	80033800 	call	8003380 <puts>
#endif
         UNLOCK_NET_RESOURCE(NET_RESID);
 802c098:	0009883a 	mov	r4,zero
 802c09c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return(NULL);
 802c0a0:	0005883a 	mov	r2,zero
 802c0a4:	00003506 	br	802c17c <udp_open+0x1ec>
   for (con = firstudp; con; con = con->u_next)
 802c0a8:	e0bfff17 	ldw	r2,-4(fp)
 802c0ac:	10800017 	ldw	r2,0(r2)
 802c0b0:	e0bfff15 	stw	r2,-4(fp)
 802c0b4:	e0bfff17 	ldw	r2,-4(fp)
 802c0b8:	103fde1e 	bne	r2,zero,802c034 <udp_open+0xa4>
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
 802c0bc:	01000804 	movi	r4,32
 802c0c0:	802cf5c0 	call	802cf5c <npalloc>
 802c0c4:	e0bfff15 	stw	r2,-4(fp)
   if (con == 0)
 802c0c8:	e0bfff17 	ldw	r2,-4(fp)
 802c0cc:	10000a1e 	bne	r2,zero,802c0f8 <udp_open+0x168>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
 802c0d0:	d0a07e17 	ldw	r2,-32264(gp)
 802c0d4:	1080010c 	andi	r2,r2,4
 802c0d8:	10000326 	beq	r2,zero,802c0e8 <udp_open+0x158>
         dprintf("UDP: Couldn't allocate conn storage.\n");
 802c0dc:	01020174 	movhi	r4,2053
 802c0e0:	210b0804 	addi	r4,r4,11296
 802c0e4:	80033800 	call	8003380 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 802c0e8:	0009883a 	mov	r4,zero
 802c0ec:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return(NULL);
 802c0f0:	0005883a 	mov	r2,zero
 802c0f4:	00002106 	br	802c17c <udp_open+0x1ec>
   }

   if (ocon)   /* ocon is end of list */
 802c0f8:	e0bffe17 	ldw	r2,-8(fp)
 802c0fc:	10000426 	beq	r2,zero,802c110 <udp_open+0x180>
      ocon->u_next = con;  /* add new connection to end */
 802c100:	e0bffe17 	ldw	r2,-8(fp)
 802c104:	e0ffff17 	ldw	r3,-4(fp)
 802c108:	10c00015 	stw	r3,0(r2)
 802c10c:	00000206 	br	802c118 <udp_open+0x188>
   else  /* no list, start one */
      firstudp = con;
 802c110:	e0bfff17 	ldw	r2,-4(fp)
 802c114:	d0a09715 	stw	r2,-32164(gp)

   con->u_next = 0;
 802c118:	e0bfff17 	ldw	r2,-4(fp)
 802c11c:	10000015 	stw	zero,0(r2)

   con->u_lport = lsock;      /* fill in connection info */
 802c120:	e0bfff17 	ldw	r2,-4(fp)
 802c124:	e0fffb0b 	ldhu	r3,-20(fp)
 802c128:	10c0018d 	sth	r3,6(r2)
   con->u_fport = fsock;
 802c12c:	e0bfff17 	ldw	r2,-4(fp)
 802c130:	e0fffc0b 	ldhu	r3,-16(fp)
 802c134:	10c0020d 	sth	r3,8(r2)
   con->u_lhost = 0;
 802c138:	e0bfff17 	ldw	r2,-4(fp)
 802c13c:	10000315 	stw	zero,12(r2)
   con->u_fhost = fhost;
 802c140:	e0bfff17 	ldw	r2,-4(fp)
 802c144:	e0fffd17 	ldw	r3,-12(fp)
 802c148:	10c00415 	stw	r3,16(r2)
   con->u_rcv   = handler;
 802c14c:	e0bfff17 	ldw	r2,-4(fp)
 802c150:	e0fffa17 	ldw	r3,-24(fp)
 802c154:	10c00515 	stw	r3,20(r2)
   con->u_data  = data;
 802c158:	e0bfff17 	ldw	r2,-4(fp)
 802c15c:	e0c00217 	ldw	r3,8(fp)
 802c160:	10c00615 	stw	r3,24(r2)
   con->u_flags = UDPCF_V4;
 802c164:	e0bfff17 	ldw	r2,-4(fp)
 802c168:	00c00044 	movi	r3,1
 802c16c:	10c0010d 	sth	r3,4(r2)

   UNLOCK_NET_RESOURCE(NET_RESID);
 802c170:	0009883a 	mov	r4,zero
 802c174:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return(con);
 802c178:	e0bfff17 	ldw	r2,-4(fp)
}
 802c17c:	e037883a 	mov	sp,fp
 802c180:	dfc00117 	ldw	ra,4(sp)
 802c184:	df000017 	ldw	fp,0(sp)
 802c188:	dec00204 	addi	sp,sp,8
 802c18c:	f800283a 	ret

0802c190 <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
 802c190:	defffb04 	addi	sp,sp,-20
 802c194:	dfc00415 	stw	ra,16(sp)
 802c198:	df000315 	stw	fp,12(sp)
 802c19c:	df000304 	addi	fp,sp,12
 802c1a0:	e13ffd15 	stw	r4,-12(fp)
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
 802c1a4:	e0bffd17 	ldw	r2,-12(fp)
 802c1a8:	10000226 	beq	r2,zero,802c1b4 <udp_close+0x24>
 802c1ac:	d0a09717 	ldw	r2,-32164(gp)
 802c1b0:	1000021e 	bne	r2,zero,802c1bc <udp_close+0x2c>
   {
      dtrap(); /* bad programming! */
 802c1b4:	802c3fc0 	call	802c3fc <dtrap>
      return;
 802c1b8:	00002606 	br	802c254 <udp_close+0xc4>
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 802c1bc:	0009883a 	mov	r4,zero
 802c1c0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
 802c1c4:	e03ffe15 	stw	zero,-8(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 802c1c8:	d0a09717 	ldw	r2,-32164(gp)
 802c1cc:	e0bfff15 	stw	r2,-4(fp)
 802c1d0:	00000806 	br	802c1f4 <udp_close+0x64>
   {
      if (pcon == con)  /* found connection to delete */
 802c1d4:	e0ffff17 	ldw	r3,-4(fp)
 802c1d8:	e0bffd17 	ldw	r2,-12(fp)
 802c1dc:	18800826 	beq	r3,r2,802c200 <udp_close+0x70>
      break;
      lcon = pcon;   /* remember last connection */
 802c1e0:	e0bfff17 	ldw	r2,-4(fp)
 802c1e4:	e0bffe15 	stw	r2,-8(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 802c1e8:	e0bfff17 	ldw	r2,-4(fp)
 802c1ec:	10800017 	ldw	r2,0(r2)
 802c1f0:	e0bfff15 	stw	r2,-4(fp)
 802c1f4:	e0bfff17 	ldw	r2,-4(fp)
 802c1f8:	103ff61e 	bne	r2,zero,802c1d4 <udp_close+0x44>
 802c1fc:	00000106 	br	802c204 <udp_close+0x74>
      break;
 802c200:	0001883a 	nop
   }

   if (!pcon)
 802c204:	e0bfff17 	ldw	r2,-4(fp)
 802c208:	1000041e 	bne	r2,zero,802c21c <udp_close+0x8c>
   {
      dtrap(); /* prog error - connenction not in list */
 802c20c:	802c3fc0 	call	802c3fc <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
 802c210:	0009883a 	mov	r4,zero
 802c214:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return;
 802c218:	00000e06 	br	802c254 <udp_close+0xc4>
   }

   if (lcon)   /* in con is not head of list */
 802c21c:	e0bffe17 	ldw	r2,-8(fp)
 802c220:	10000526 	beq	r2,zero,802c238 <udp_close+0xa8>
      lcon->u_next = con->u_next;   /* unlink */
 802c224:	e0bffd17 	ldw	r2,-12(fp)
 802c228:	10c00017 	ldw	r3,0(r2)
 802c22c:	e0bffe17 	ldw	r2,-8(fp)
 802c230:	10c00015 	stw	r3,0(r2)
 802c234:	00000306 	br	802c244 <udp_close+0xb4>
   else
      firstudp = con->u_next; /* remove from head */
 802c238:	e0bffd17 	ldw	r2,-12(fp)
 802c23c:	10800017 	ldw	r2,0(r2)
 802c240:	d0a09715 	stw	r2,-32164(gp)

   UC_FREE(con);  /* free memory for structure */
 802c244:	e13ffd17 	ldw	r4,-12(fp)
 802c248:	802cf900 	call	802cf90 <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
 802c24c:	0009883a 	mov	r4,zero
 802c250:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
}
 802c254:	e037883a 	mov	sp,fp
 802c258:	dfc00117 	ldw	ra,4(sp)
 802c25c:	df000017 	ldw	fp,0(sp)
 802c260:	dec00204 	addi	sp,sp,8
 802c264:	f800283a 	ret

0802c268 <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
 802c268:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
 802c26c:	0140620e 	bge	zero,r5,802c3f8 <done>

      mov   r6, zero		       /* carry accumulator */
 802c270:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
 802c274:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
 802c278:	18000326 	beq	r3,zero,802c288 <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
 802c27c:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
 802c280:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
 802c284:	297fffc4 	addi	r5,r5,-1

0802c288 <asm1>:
 802c288:	02c200f4 	movhi	r11,2051
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
 802c28c:	5af0ed04 	addi	r11,r11,-15436
      andi  r9, r5, 1		       /* r9 = last halfword flag */
 802c290:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
 802c294:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
 802c298:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
 802c29c:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
 802c2a0:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
 802c2a4:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
 802c2a8:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
 802c2ac:	5800683a 	jmp	r11

0802c2b0 <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
 802c2b0:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
 802c2b4:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
 802c2b8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c2bc:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c2c0:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
 802c2c4:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
 802c2c8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c2cc:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c2d0:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
 802c2d4:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
 802c2d8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c2dc:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c2e0:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
 802c2e4:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
 802c2e8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c2ec:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c2f0:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
 802c2f4:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
 802c2f8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c2fc:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c300:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
 802c304:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
 802c308:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c30c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c310:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
 802c314:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
 802c318:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c31c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c320:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
 802c324:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
 802c328:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c32c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c330:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
 802c334:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
 802c338:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c33c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c340:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
 802c344:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
 802c348:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c34c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c350:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
 802c354:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
 802c358:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c35c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c360:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
 802c364:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
 802c368:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c36c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c370:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
 802c374:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
 802c378:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c37c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c380:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
 802c384:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
 802c388:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c38c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c390:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
 802c394:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
 802c398:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c39c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c3a0:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
 802c3a4:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
 802c3a8:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c3ac:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c3b0:	418d883a 	add	r6,r8,r6

0802c3b4 <loop0>:
loop0:
      subi  r5, r5, 16
 802c3b4:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
 802c3b8:	283fbd0e 	bge	r5,zero,802c2b0 <loop>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
 802c3bc:	48000426 	beq	r9,zero,802c3d0 <fold>
      ldhu  r7, 0(r4)
 802c3c0:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
 802c3c4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 802c3c8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 802c3cc:	418d883a 	add	r6,r8,r6

0802c3d0 <fold>:
      
fold:
      srli  r7, r2, 16
 802c3d0:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 802c3d4:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
 802c3d8:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
 802c3dc:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
 802c3e0:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 802c3e4:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
 802c3e8:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
 802c3ec:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 802c3f0:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
 802c3f4:	3885883a 	add	r2,r7,r2

0802c3f8 <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
 802c3f8:	f800283a 	ret

0802c3fc <dtrap>:
void irq_Unmask(void);

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
 802c3fc:	defffe04 	addi	sp,sp,-8
 802c400:	dfc00115 	stw	ra,4(sp)
 802c404:	df000015 	stw	fp,0(sp)
 802c408:	d839883a 	mov	fp,sp
   printf("dtrap - needs breakpoint\n");
 802c40c:	01020174 	movhi	r4,2053
 802c410:	210b1204 	addi	r4,r4,11336
 802c414:	80033800 	call	8003380 <puts>
}
 802c418:	0001883a 	nop
 802c41c:	e037883a 	mov	sp,fp
 802c420:	dfc00117 	ldw	ra,4(sp)
 802c424:	df000017 	ldw	fp,0(sp)
 802c428:	dec00204 	addi	sp,sp,8
 802c42c:	f800283a 	ret

0802c430 <kbhit>:

int
kbhit()
{
 802c430:	defffd04 	addi	sp,sp,-12
 802c434:	dfc00215 	stw	ra,8(sp)
 802c438:	df000115 	stw	fp,4(sp)
 802c43c:	df000104 	addi	fp,sp,4
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
 802c440:	d0a09b17 	ldw	r2,-32148(gp)
 802c444:	10000b1e 	bne	r2,zero,802c474 <kbhit+0x44>
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 802c448:	01900004 	movi	r6,16384
 802c44c:	01400104 	movi	r5,4
 802c450:	0009883a 	mov	r4,zero
 802c454:	803c92c0 	call	803c92c <fcntl>
 802c458:	10000426 	beq	r2,zero,802c46c <kbhit+0x3c>
      {
         printf("F_SETFL failed.\n");
 802c45c:	01020174 	movhi	r4,2053
 802c460:	210b1904 	addi	r4,r4,11364
 802c464:	80033800 	call	8003380 <puts>
         dtrap();
 802c468:	802c3fc0 	call	802c3fc <dtrap>
      }
      kbd_init = 1; 
 802c46c:	00800044 	movi	r2,1
 802c470:	d0a09b15 	stw	r2,-32148(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 802c474:	d0a03617 	ldw	r2,-32552(gp)
 802c478:	10bfffd8 	cmpnei	r2,r2,-1
 802c47c:	1000081e 	bne	r2,zero,802c4a0 <kbhit+0x70>
   {
      kb = getchar();
 802c480:	8002e1c0 	call	8002e1c <getchar>
 802c484:	e0bfff15 	stw	r2,-4(fp)
      if (kb < 0)       /* any error means no character present */
 802c488:	e0bfff17 	ldw	r2,-4(fp)
 802c48c:	1000020e 	bge	r2,zero,802c498 <kbhit+0x68>
         return (FALSE);
 802c490:	0005883a 	mov	r2,zero
 802c494:	00000306 	br	802c4a4 <kbhit+0x74>
         
      /* there was a character, and we read it. */
      kb_last = kb;
 802c498:	e0bfff17 	ldw	r2,-4(fp)
 802c49c:	d0a03615 	stw	r2,-32552(gp)
   }

   return (TRUE);
 802c4a0:	00800044 	movi	r2,1
}
 802c4a4:	e037883a 	mov	sp,fp
 802c4a8:	dfc00117 	ldw	ra,4(sp)
 802c4ac:	df000017 	ldw	fp,0(sp)
 802c4b0:	dec00204 	addi	sp,sp,8
 802c4b4:	f800283a 	ret

0802c4b8 <getch>:

int 
getch()
{
 802c4b8:	defffd04 	addi	sp,sp,-12
 802c4bc:	dfc00215 	stw	ra,8(sp)
 802c4c0:	df000115 	stw	fp,4(sp)
 802c4c4:	df000104 	addi	fp,sp,4
int chr;

   if(kb_last != EOF)
 802c4c8:	d0a03617 	ldw	r2,-32552(gp)
 802c4cc:	10bfffe0 	cmpeqi	r2,r2,-1
 802c4d0:	1000051e 	bne	r2,zero,802c4e8 <getch+0x30>
   {
      chr = kb_last;
 802c4d4:	d0a03617 	ldw	r2,-32552(gp)
 802c4d8:	e0bfff15 	stw	r2,-4(fp)
      kb_last = EOF;
 802c4dc:	00bfffc4 	movi	r2,-1
 802c4e0:	d0a03615 	stw	r2,-32552(gp)
 802c4e4:	00000206 	br	802c4f0 <getch+0x38>
   }
   else
      chr = getchar();
 802c4e8:	8002e1c0 	call	8002e1c <getchar>
 802c4ec:	e0bfff15 	stw	r2,-4(fp)

   return chr;
 802c4f0:	e0bfff17 	ldw	r2,-4(fp)
}
 802c4f4:	e037883a 	mov	sp,fp
 802c4f8:	dfc00117 	ldw	ra,4(sp)
 802c4fc:	df000017 	ldw	fp,0(sp)
 802c500:	dec00204 	addi	sp,sp,8
 802c504:	f800283a 	ret

0802c508 <clock_init>:
int OS_TPS;
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
 802c508:	deffff04 	addi	sp,sp,-4
 802c50c:	df000015 	stw	fp,0(sp)
 802c510:	d839883a 	mov	fp,sp
   OS_TPS = OS_TICKS_PER_SEC;
 802c514:	00801904 	movi	r2,100
 802c518:	d0a09d15 	stw	r2,-32140(gp)
   cticks_factor = 0;
 802c51c:	d0209c15 	stw	zero,-32144(gp)
   cticks = 0;
 802c520:	d020a315 	stw	zero,-32116(gp)
   cticks_initialized = 1;
 802c524:	00800044 	movi	r2,1
 802c528:	d0a09815 	stw	r2,-32160(gp)
}
 802c52c:	0001883a 	nop
 802c530:	e037883a 	mov	sp,fp
 802c534:	df000017 	ldw	fp,0(sp)
 802c538:	dec00104 	addi	sp,sp,4
 802c53c:	f800283a 	ret

0802c540 <clock_c>:

/* undo effects of clock_init (i.e. restore ISR vector) 
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
 802c540:	deffff04 	addi	sp,sp,-4
 802c544:	df000015 	stw	fp,0(sp)
 802c548:	d839883a 	mov	fp,sp
   /* null */ ;
}
 802c54c:	0001883a 	nop
 802c550:	e037883a 	mov	sp,fp
 802c554:	df000017 	ldw	fp,0(sp)
 802c558:	dec00104 	addi	sp,sp,4
 802c55c:	f800283a 	ret

0802c560 <cticks_hook>:
 * Use the uCOS-II/Altera HAL BSP's timer and scale cticks as per TPS.
 */

void
cticks_hook(void)
{
 802c560:	deffff04 	addi	sp,sp,-4
 802c564:	df000015 	stw	fp,0(sp)
 802c568:	d839883a 	mov	fp,sp
   if (cticks_initialized) 
 802c56c:	d0a09817 	ldw	r2,-32160(gp)
 802c570:	10000d26 	beq	r2,zero,802c5a8 <cticks_hook+0x48>
   {
      cticks_factor += TPS;
 802c574:	d0a09c17 	ldw	r2,-32144(gp)
 802c578:	10801904 	addi	r2,r2,100
 802c57c:	d0a09c15 	stw	r2,-32144(gp)
      if (cticks_factor >= OS_TPS)
 802c580:	d0e09c17 	ldw	r3,-32144(gp)
 802c584:	d0a09d17 	ldw	r2,-32140(gp)
 802c588:	18800716 	blt	r3,r2,802c5a8 <cticks_hook+0x48>
      {
         cticks++;
 802c58c:	d0a0a317 	ldw	r2,-32116(gp)
 802c590:	10800044 	addi	r2,r2,1
 802c594:	d0a0a315 	stw	r2,-32116(gp)
         cticks_factor -= OS_TPS;
 802c598:	d0e09c17 	ldw	r3,-32144(gp)
 802c59c:	d0a09d17 	ldw	r2,-32140(gp)
 802c5a0:	1885c83a 	sub	r2,r3,r2
 802c5a4:	d0a09c15 	stw	r2,-32144(gp)
#ifdef USE_LCD
         update_display();
#endif
      }
   }
}
 802c5a8:	0001883a 	nop
 802c5ac:	e037883a 	mov	sp,fp
 802c5b0:	df000017 	ldw	fp,0(sp)
 802c5b4:	dec00104 	addi	sp,sp,4
 802c5b8:	f800283a 	ret

0802c5bc <irq_Mask>:
 * ENTER_CRIT_SECTION() and enable them in EXIT_CRIT_SECTION()
 * because calls to ENTER_CRIT_SECTION() can be nested."
 */
void
irq_Mask(void)
{
 802c5bc:	defffd04 	addi	sp,sp,-12
 802c5c0:	df000215 	stw	fp,8(sp)
 802c5c4:	df000204 	addi	fp,sp,8
  NIOS2_READ_STATUS (context);
 802c5c8:	0005303a 	rdctl	r2,status
 802c5cc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802c5d0:	e0fffe17 	ldw	r3,-8(fp)
 802c5d4:	00bfff84 	movi	r2,-2
 802c5d8:	1884703a 	and	r2,r3,r2
 802c5dc:	1001703a 	wrctl	status,r2
  return context;
 802c5e0:	e0bffe17 	ldw	r2,-8(fp)
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
 802c5e4:	e0bfff15 	stw	r2,-4(fp)
	
   if (++irq_level == 1)
 802c5e8:	d0a09917 	ldw	r2,-32156(gp)
 802c5ec:	10800044 	addi	r2,r2,1
 802c5f0:	d0a09915 	stw	r2,-32156(gp)
 802c5f4:	d0a09917 	ldw	r2,-32156(gp)
 802c5f8:	10800058 	cmpnei	r2,r2,1
 802c5fc:	1000021e 	bne	r2,zero,802c608 <irq_Mask+0x4c>
   {
      cpu_statusreg = local_cpu_statusreg;
 802c600:	e0bfff17 	ldw	r2,-4(fp)
 802c604:	d0a09a15 	stw	r2,-32152(gp)
   }
}
 802c608:	0001883a 	nop
 802c60c:	e037883a 	mov	sp,fp
 802c610:	df000017 	ldw	fp,0(sp)
 802c614:	dec00104 	addi	sp,sp,4
 802c618:	f800283a 	ret

0802c61c <irq_Unmask>:


/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
 802c61c:	defffe04 	addi	sp,sp,-8
 802c620:	df000115 	stw	fp,4(sp)
 802c624:	df000104 	addi	fp,sp,4
   if (--irq_level == 0)
 802c628:	d0a09917 	ldw	r2,-32156(gp)
 802c62c:	10bfffc4 	addi	r2,r2,-1
 802c630:	d0a09915 	stw	r2,-32156(gp)
 802c634:	d0a09917 	ldw	r2,-32156(gp)
 802c638:	1000051e 	bne	r2,zero,802c650 <irq_Unmask+0x34>
   {
      alt_irq_enable_all(cpu_statusreg);
 802c63c:	d0a09a17 	ldw	r2,-32152(gp)
 802c640:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_WRITE_STATUS (context);
 802c644:	e0bfff17 	ldw	r2,-4(fp)
 802c648:	1001703a 	wrctl	status,r2
}
 802c64c:	0001883a 	nop
   }
}
 802c650:	0001883a 	nop
 802c654:	e037883a 	mov	sp,fp
 802c658:	df000017 	ldw	fp,0(sp)
 802c65c:	dec00104 	addi	sp,sp,4
 802c660:	f800283a 	ret

0802c664 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
 802c664:	defffb04 	addi	sp,sp,-20
 802c668:	dfc00415 	stw	ra,16(sp)
 802c66c:	df000315 	stw	fp,12(sp)
 802c670:	df000304 	addi	fp,sp,12
 802c674:	e13ffd15 	stw	r4,-12(fp)
   INT8U error = 0;
 802c678:	e03ffec5 	stb	zero,-5(fp)
   int   errct = 0;
 802c67c:	e03fff15 	stw	zero,-4(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 802c680:	e0bffd17 	ldw	r2,-12(fp)
 802c684:	10002016 	blt	r2,zero,802c708 <LOCK_NET_RESOURCE+0xa4>
 802c688:	e0bffd17 	ldw	r2,-12(fp)
 802c68c:	10800408 	cmpgei	r2,r2,16
 802c690:	10001d1e 	bne	r2,zero,802c708 <LOCK_NET_RESOURCE+0xa4>
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
 802c694:	e0bffd17 	ldw	r2,-12(fp)
 802c698:	100690ba 	slli	r3,r2,2
 802c69c:	008201b4 	movhi	r2,2054
 802c6a0:	1885883a 	add	r2,r3,r2
 802c6a4:	10bc0117 	ldw	r2,-4092(r2)
 802c6a8:	e0fffec4 	addi	r3,fp,-5
 802c6ac:	180d883a 	mov	r6,r3
 802c6b0:	000b883a 	mov	r5,zero
 802c6b4:	1009883a 	mov	r4,r2
 802c6b8:	80168c40 	call	80168c4 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 802c6bc:	e0bffec3 	ldbu	r2,-5(fp)
 802c6c0:	10803fcc 	andi	r2,r2,255
 802c6c4:	10800298 	cmpnei	r2,r2,10
 802c6c8:	10000a1e 	bne	r2,zero,802c6f4 <LOCK_NET_RESOURCE+0x90>
 802c6cc:	e0bfff17 	ldw	r2,-4(fp)
 802c6d0:	10800044 	addi	r2,r2,1
 802c6d4:	e0bfff15 	stw	r2,-4(fp)
 802c6d8:	e0bfff17 	ldw	r2,-4(fp)
 802c6dc:	1080fa50 	cmplti	r2,r2,1001
 802c6e0:	1000041e 	bne	r2,zero,802c6f4 <LOCK_NET_RESOURCE+0x90>
         {
            panic("lock NET");   /* fatal */
 802c6e4:	01020174 	movhi	r4,2053
 802c6e8:	210b1d04 	addi	r4,r4,11380
 802c6ec:	8027fe00 	call	8027fe0 <panic>
 802c6f0:	00000606 	br	802c70c <LOCK_NET_RESOURCE+0xa8>
            return;
         }
      } while (error == 10);
 802c6f4:	e0bffec3 	ldbu	r2,-5(fp)
 802c6f8:	10803fcc 	andi	r2,r2,255
 802c6fc:	108002a0 	cmpeqi	r2,r2,10
 802c700:	103fe41e 	bne	r2,zero,802c694 <LOCK_NET_RESOURCE+0x30>
   if ((0 <= resid) && (resid <= MAX_RESID))
 802c704:	00000106 	br	802c70c <LOCK_NET_RESOURCE+0xa8>
   }
   else
      dtrap();
 802c708:	802c3fc0 	call	802c3fc <dtrap>
}
 802c70c:	e037883a 	mov	sp,fp
 802c710:	dfc00117 	ldw	ra,4(sp)
 802c714:	df000017 	ldw	fp,0(sp)
 802c718:	dec00204 	addi	sp,sp,8
 802c71c:	f800283a 	ret

0802c720 <UNLOCK_NET_RESOURCE>:

void
UNLOCK_NET_RESOURCE(int resid)
{
 802c720:	defffc04 	addi	sp,sp,-16
 802c724:	dfc00315 	stw	ra,12(sp)
 802c728:	df000215 	stw	fp,8(sp)
 802c72c:	df000204 	addi	fp,sp,8
 802c730:	e13ffe15 	stw	r4,-8(fp)
   INT8U error = 0;
 802c734:	e03fffc5 	stb	zero,-1(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 802c738:	e0bffe17 	ldw	r2,-8(fp)
 802c73c:	10001116 	blt	r2,zero,802c784 <UNLOCK_NET_RESOURCE+0x64>
 802c740:	e0bffe17 	ldw	r2,-8(fp)
 802c744:	10800408 	cmpgei	r2,r2,16
 802c748:	10000e1e 	bne	r2,zero,802c784 <UNLOCK_NET_RESOURCE+0x64>
   {
      error = OSSemPost(resid_semaphore[resid]);
 802c74c:	e0bffe17 	ldw	r2,-8(fp)
 802c750:	100690ba 	slli	r3,r2,2
 802c754:	008201b4 	movhi	r2,2054
 802c758:	1885883a 	add	r2,r3,r2
 802c75c:	10bc0117 	ldw	r2,-4092(r2)
 802c760:	1009883a 	mov	r4,r2
 802c764:	8016c4c0 	call	8016c4c <OSSemPost>
 802c768:	e0bfffc5 	stb	r2,-1(fp)
      if (error != OS_NO_ERR)
 802c76c:	e0bfffc3 	ldbu	r2,-1(fp)
 802c770:	10000626 	beq	r2,zero,802c78c <UNLOCK_NET_RESOURCE+0x6c>
      {
         panic("unlock NET");
 802c774:	01020174 	movhi	r4,2053
 802c778:	210b2004 	addi	r4,r4,11392
 802c77c:	8027fe00 	call	8027fe0 <panic>
      if (error != OS_NO_ERR)
 802c780:	00000206 	br	802c78c <UNLOCK_NET_RESOURCE+0x6c>
      }
   }
   else
      dtrap();
 802c784:	802c3fc0 	call	802c3fc <dtrap>
}
 802c788:	0001883a 	nop
 802c78c:	0001883a 	nop
 802c790:	e037883a 	mov	sp,fp
 802c794:	dfc00117 	ldw	ra,4(sp)
 802c798:	df000017 	ldw	fp,0(sp)
 802c79c:	dec00204 	addi	sp,sp,8
 802c7a0:	f800283a 	ret

0802c7a4 <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
 802c7a4:	deffee04 	addi	sp,sp,-72
 802c7a8:	dfc01115 	stw	ra,68(sp)
 802c7ac:	df001015 	stw	fp,64(sp)
 802c7b0:	df001004 	addi	fp,sp,64
 802c7b4:	e13ff515 	stw	r4,-44(fp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 802c7b8:	e0bff517 	ldw	r2,-44(fp)
 802c7bc:	10800417 	ldw	r2,16(r2)
 802c7c0:	1009883a 	mov	r4,r2
 802c7c4:	802cf5c0 	call	802cf5c <npalloc>
 802c7c8:	e0bfff15 	stw	r2,-4(fp)
   if(!stack)
 802c7cc:	e0bfff17 	ldw	r2,-4(fp)
 802c7d0:	1000031e 	bne	r2,zero,802c7e0 <TK_NEWTASK+0x3c>
      panic("stack alloc");
 802c7d4:	01020174 	movhi	r4,2053
 802c7d8:	210b2304 	addi	r4,r4,11404
 802c7dc:	8027fe00 	call	8027fe0 <panic>

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
 802c7e0:	e0bff517 	ldw	r2,-44(fp)
 802c7e4:	12000217 	ldw	r8,8(r2)
      nettask->entry,
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
 802c7e8:	e0bff517 	ldw	r2,-44(fp)
 802c7ec:	10800417 	ldw	r2,16(r2)
 802c7f0:	1007883a 	mov	r3,r2
 802c7f4:	00bfff04 	movi	r2,-4
 802c7f8:	1884703a 	and	r2,r3,r2
 802c7fc:	10bfff04 	addi	r2,r2,-4
   error = OSTaskCreateExt(
 802c800:	e0ffff17 	ldw	r3,-4(fp)
 802c804:	188b883a 	add	r5,r3,r2
      nettask->priority,
 802c808:	e0bff517 	ldw	r2,-44(fp)
 802c80c:	10800317 	ldw	r2,12(r2)
   error = OSTaskCreateExt(
 802c810:	11803fcc 	andi	r6,r2,255
      nettask->priority,
 802c814:	e0bff517 	ldw	r2,-44(fp)
 802c818:	10800317 	ldw	r2,12(r2)
   error = OSTaskCreateExt(
 802c81c:	10bfffcc 	andi	r2,r2,65535
      stack, 
      (INT32U)nettask->stacksize / sizeof(OS_STK),
 802c820:	e0fff517 	ldw	r3,-44(fp)
 802c824:	18c00417 	ldw	r3,16(r3)
   error = OSTaskCreateExt(
 802c828:	1806d0ba 	srli	r3,r3,2
 802c82c:	010000c4 	movi	r4,3
 802c830:	d9000415 	stw	r4,16(sp)
 802c834:	d8000315 	stw	zero,12(sp)
 802c838:	d8c00215 	stw	r3,8(sp)
 802c83c:	e0ffff17 	ldw	r3,-4(fp)
 802c840:	d8c00115 	stw	r3,4(sp)
 802c844:	d8800015 	stw	r2,0(sp)
 802c848:	300f883a 	mov	r7,r6
 802c84c:	280d883a 	mov	r6,r5
 802c850:	000b883a 	mov	r5,zero
 802c854:	4009883a 	mov	r4,r8
 802c858:	80175e40 	call	80175e4 <OSTaskCreateExt>
 802c85c:	e0bffec5 	stb	r2,-5(fp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 802c860:	e0bffec3 	ldbu	r2,-5(fp)
 802c864:	10803fcc 	andi	r2,r2,255
 802c868:	10800a18 	cmpnei	r2,r2,40
 802c86c:	10001c1e 	bne	r2,zero,802c8e0 <TK_NEWTASK+0x13c>
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, (INT8U*)curr_task, &err);
 802c870:	e0bff517 	ldw	r2,-44(fp)
 802c874:	10800317 	ldw	r2,12(r2)
 802c878:	10803fcc 	andi	r2,r2,255
 802c87c:	e13ffe84 	addi	r4,fp,-6
 802c880:	e0fff684 	addi	r3,fp,-38
 802c884:	200d883a 	mov	r6,r4
 802c888:	180b883a 	mov	r5,r3
 802c88c:	1009883a 	mov	r4,r2
 802c890:	8017c5c0 	call	8017c5c <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
 802c894:	e03ffe45 	stb	zero,-7(fp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
 802c898:	e0bff517 	ldw	r2,-44(fp)
 802c89c:	10c00117 	ldw	r3,4(r2)
 802c8a0:	e0bff517 	ldw	r2,-44(fp)
 802c8a4:	11000317 	ldw	r4,12(r2)
 802c8a8:	e0bff517 	ldw	r2,-44(fp)
 802c8ac:	10800317 	ldw	r2,12(r2)
 802c8b0:	e17ff684 	addi	r5,fp,-38
 802c8b4:	d8800015 	stw	r2,0(sp)
 802c8b8:	280f883a 	mov	r7,r5
 802c8bc:	200d883a 	mov	r6,r4
 802c8c0:	180b883a 	mov	r5,r3
 802c8c4:	01020174 	movhi	r4,2053
 802c8c8:	210b2604 	addi	r4,r4,11416
 802c8cc:	800325c0 	call	800325c <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
 802c8d0:	01020174 	movhi	r4,2053
 802c8d4:	210b3e04 	addi	r4,r4,11512
 802c8d8:	80033800 	call	8003380 <puts>
 802c8dc:	00002006 	br	802c960 <TK_NEWTASK+0x1bc>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
 802c8e0:	e0bffec3 	ldbu	r2,-5(fp)
 802c8e4:	10803fcc 	andi	r2,r2,255
 802c8e8:	10800a98 	cmpnei	r2,r2,42
 802c8ec:	10000e1e 	bne	r2,zero,802c928 <TK_NEWTASK+0x184>
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
 802c8f0:	e0bff517 	ldw	r2,-44(fp)
 802c8f4:	10c00117 	ldw	r3,4(r2)
 802c8f8:	e0bff517 	ldw	r2,-44(fp)
 802c8fc:	10800317 	ldw	r2,12(r2)
 802c900:	01c00504 	movi	r7,20
 802c904:	100d883a 	mov	r6,r2
 802c908:	180b883a 	mov	r5,r3
 802c90c:	01020174 	movhi	r4,2053
 802c910:	210b6604 	addi	r4,r4,11672
 802c914:	800325c0 	call	800325c <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
 802c918:	01020174 	movhi	r4,2053
 802c91c:	210b8304 	addi	r4,r4,11788
 802c920:	80033800 	call	8003380 <puts>
 802c924:	00000e06 	br	802c960 <TK_NEWTASK+0x1bc>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
 802c928:	e0bffec3 	ldbu	r2,-5(fp)
 802c92c:	10803fcc 	andi	r2,r2,255
 802c930:	10000b26 	beq	r2,zero,802c960 <TK_NEWTASK+0x1bc>
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
 802c934:	e0bffec3 	ldbu	r2,-5(fp)
 802c938:	10c03fcc 	andi	r3,r2,255
 802c93c:	e0bff517 	ldw	r2,-44(fp)
 802c940:	10800117 	ldw	r2,4(r2)
 802c944:	100d883a 	mov	r6,r2
 802c948:	180b883a 	mov	r5,r3
 802c94c:	01020174 	movhi	r4,2053
 802c950:	210ba204 	addi	r4,r4,11912
 802c954:	800325c0 	call	800325c <printf>
             error, nettask->name);
      return (-1);
 802c958:	00bfffc4 	movi	r2,-1
 802c95c:	00001c06 	br	802c9d0 <TK_NEWTASK+0x22c>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, (INT8U*)&nettask->name[0], &error);
 802c960:	e0bff517 	ldw	r2,-44(fp)
 802c964:	10800317 	ldw	r2,12(r2)
 802c968:	10c03fcc 	andi	r3,r2,255
 802c96c:	e0bff517 	ldw	r2,-44(fp)
 802c970:	10800117 	ldw	r2,4(r2)
 802c974:	e13ffec4 	addi	r4,fp,-5
 802c978:	200d883a 	mov	r6,r4
 802c97c:	100b883a 	mov	r5,r2
 802c980:	1809883a 	mov	r4,r3
 802c984:	8017df80 	call	8017df8 <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
 802c988:	e0bff517 	ldw	r2,-44(fp)
 802c98c:	e0ffff17 	ldw	r3,-4(fp)
 802c990:	10c00515 	stw	r3,20(r2)
   *nettask->tk_ptr = (INT8U)nettask->priority;  
 802c994:	e0bff517 	ldw	r2,-44(fp)
 802c998:	10c00317 	ldw	r3,12(r2)
 802c99c:	e0bff517 	ldw	r2,-44(fp)
 802c9a0:	10800017 	ldw	r2,0(r2)
 802c9a4:	10c00005 	stb	r3,0(r2)

   printf("Created \"%s\" task (Prio: %d)\n",
 802c9a8:	e0bff517 	ldw	r2,-44(fp)
 802c9ac:	10c00117 	ldw	r3,4(r2)
 802c9b0:	e0bff517 	ldw	r2,-44(fp)
 802c9b4:	10800317 	ldw	r2,12(r2)
 802c9b8:	100d883a 	mov	r6,r2
 802c9bc:	180b883a 	mov	r5,r3
 802c9c0:	01020174 	movhi	r4,2053
 802c9c4:	210bb004 	addi	r4,r4,11968
 802c9c8:	800325c0 	call	800325c <printf>
         (char *)nettask->name, nettask->priority);

   return (0);
 802c9cc:	0005883a 	mov	r2,zero
}
 802c9d0:	e037883a 	mov	sp,fp
 802c9d4:	dfc00117 	ldw	ra,4(sp)
 802c9d8:	df000017 	ldw	fp,0(sp)
 802c9dc:	dec00204 	addi	sp,sp,8
 802c9e0:	f800283a 	ret

0802c9e4 <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
 802c9e4:	defffb04 	addi	sp,sp,-20
 802c9e8:	dfc00415 	stw	ra,16(sp)
 802c9ec:	df000315 	stw	fp,12(sp)
 802c9f0:	df000304 	addi	fp,sp,12
 802c9f4:	e13ffd15 	stw	r4,-12(fp)
   INT8U error = 0;
 802c9f8:	e03ffec5 	stb	zero,-5(fp)
   int   errct = 0;
 802c9fc:	e03fff15 	stw	zero,-4(fp)

   if ((0 <= semid) && (semid <= MAX_SEMID))
 802ca00:	e0bffd17 	ldw	r2,-12(fp)
 802ca04:	108001a8 	cmpgeui	r2,r2,6
 802ca08:	10001d1e 	bne	r2,zero,802ca80 <wait_app_sem+0x9c>
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
 802ca0c:	e0bffd17 	ldw	r2,-12(fp)
 802ca10:	100690ba 	slli	r3,r2,2
 802ca14:	008201b4 	movhi	r2,2054
 802ca18:	1885883a 	add	r2,r3,r2
 802ca1c:	10bc1117 	ldw	r2,-4028(r2)
 802ca20:	e0fffec4 	addi	r3,fp,-5
 802ca24:	180d883a 	mov	r6,r3
 802ca28:	000b883a 	mov	r5,zero
 802ca2c:	1009883a 	mov	r4,r2
 802ca30:	80168c40 	call	80168c4 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 802ca34:	e0bffec3 	ldbu	r2,-5(fp)
 802ca38:	10803fcc 	andi	r2,r2,255
 802ca3c:	10800298 	cmpnei	r2,r2,10
 802ca40:	10000a1e 	bne	r2,zero,802ca6c <wait_app_sem+0x88>
 802ca44:	e0bfff17 	ldw	r2,-4(fp)
 802ca48:	10800044 	addi	r2,r2,1
 802ca4c:	e0bfff15 	stw	r2,-4(fp)
 802ca50:	e0bfff17 	ldw	r2,-4(fp)
 802ca54:	1080fa50 	cmplti	r2,r2,1001
 802ca58:	1000041e 	bne	r2,zero,802ca6c <wait_app_sem+0x88>
         {
            panic("lock NET");   /* fatal */
 802ca5c:	01020174 	movhi	r4,2053
 802ca60:	210b1d04 	addi	r4,r4,11380
 802ca64:	8027fe00 	call	8027fe0 <panic>
 802ca68:	00000606 	br	802ca84 <wait_app_sem+0xa0>
            return;
         }
      } while (error == 10);
 802ca6c:	e0bffec3 	ldbu	r2,-5(fp)
 802ca70:	10803fcc 	andi	r2,r2,255
 802ca74:	108002a0 	cmpeqi	r2,r2,10
 802ca78:	103fe41e 	bne	r2,zero,802ca0c <wait_app_sem+0x28>
 802ca7c:	00000106 	br	802ca84 <wait_app_sem+0xa0>
   }
   else
      dtrap();
 802ca80:	802c3fc0 	call	802c3fc <dtrap>
}
 802ca84:	e037883a 	mov	sp,fp
 802ca88:	dfc00117 	ldw	ra,4(sp)
 802ca8c:	df000017 	ldw	fp,0(sp)
 802ca90:	dec00204 	addi	sp,sp,8
 802ca94:	f800283a 	ret

0802ca98 <post_app_sem>:
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
 802ca98:	defffc04 	addi	sp,sp,-16
 802ca9c:	dfc00315 	stw	ra,12(sp)
 802caa0:	df000215 	stw	fp,8(sp)
 802caa4:	df000204 	addi	fp,sp,8
 802caa8:	e13ffe15 	stw	r4,-8(fp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 802caac:	e0bffe17 	ldw	r2,-8(fp)
 802cab0:	108001a8 	cmpgeui	r2,r2,6
 802cab4:	10000e1e 	bne	r2,zero,802caf0 <post_app_sem+0x58>
   {
      error = OSSemPost(app_semaphore[semid]);
 802cab8:	e0bffe17 	ldw	r2,-8(fp)
 802cabc:	100690ba 	slli	r3,r2,2
 802cac0:	008201b4 	movhi	r2,2054
 802cac4:	1885883a 	add	r2,r3,r2
 802cac8:	10bc1117 	ldw	r2,-4028(r2)
 802cacc:	1009883a 	mov	r4,r2
 802cad0:	8016c4c0 	call	8016c4c <OSSemPost>
 802cad4:	e0bfffc5 	stb	r2,-1(fp)
      if (error != OS_NO_ERR)
 802cad8:	e0bfffc3 	ldbu	r2,-1(fp)
 802cadc:	10000526 	beq	r2,zero,802caf4 <post_app_sem+0x5c>
      {
         panic("unlock NET");
 802cae0:	01020174 	movhi	r4,2053
 802cae4:	210b2004 	addi	r4,r4,11392
 802cae8:	8027fe00 	call	8027fe0 <panic>
      }
   }
   else
      dtrap();
}
 802caec:	00000106 	br	802caf4 <post_app_sem+0x5c>
      dtrap();
 802caf0:	802c3fc0 	call	802c3fc <dtrap>
}
 802caf4:	0001883a 	nop
 802caf8:	e037883a 	mov	sp,fp
 802cafc:	dfc00117 	ldw	ra,4(sp)
 802cb00:	df000017 	ldw	fp,0(sp)
 802cb04:	dec00204 	addi	sp,sp,8
 802cb08:	f800283a 	ret

0802cb0c <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
 802cb0c:	defffd04 	addi	sp,sp,-12
 802cb10:	dfc00215 	stw	ra,8(sp)
 802cb14:	df000115 	stw	fp,4(sp)
 802cb18:	df000104 	addi	fp,sp,4
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
 802cb1c:	01000044 	movi	r4,1
 802cb20:	80165980 	call	8016598 <OSSemCreate>
 802cb24:	d0a0a515 	stw	r2,-32108(gp)
   if (!mheap_sem_ptr)
 802cb28:	d0a0a517 	ldw	r2,-32108(gp)
 802cb2c:	1000031e 	bne	r2,zero,802cb3c <alt_iniche_init+0x30>
      panic("mheap_sem_ptr create err"); 
 802cb30:	01020174 	movhi	r4,2053
 802cb34:	210bb804 	addi	r4,r4,12000
 802cb38:	8027fe00 	call	8027fe0 <panic>

   rcvdq_sem_ptr = OSSemCreate(0);
 802cb3c:	0009883a 	mov	r4,zero
 802cb40:	80165980 	call	8016598 <OSSemCreate>
 802cb44:	d0a0a615 	stw	r2,-32104(gp)
   if (!rcvdq_sem_ptr)
 802cb48:	d0a0a617 	ldw	r2,-32104(gp)
 802cb4c:	1000031e 	bne	r2,zero,802cb5c <alt_iniche_init+0x50>
      panic("rcvdq_sem_ptr create err"); 
 802cb50:	01020174 	movhi	r4,2053
 802cb54:	210bbf04 	addi	r4,r4,12028
 802cb58:	8027fe00 	call	8027fe0 <panic>

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 802cb5c:	e03fff15 	stw	zero,-4(fp)
 802cb60:	00001406 	br	802cbb4 <alt_iniche_init+0xa8>
   {
      resid_semaphore[i] = OSSemCreate(1);
 802cb64:	01000044 	movi	r4,1
 802cb68:	80165980 	call	8016598 <OSSemCreate>
 802cb6c:	1009883a 	mov	r4,r2
 802cb70:	e0bfff17 	ldw	r2,-4(fp)
 802cb74:	100690ba 	slli	r3,r2,2
 802cb78:	008201b4 	movhi	r2,2054
 802cb7c:	1885883a 	add	r2,r3,r2
 802cb80:	113c0115 	stw	r4,-4092(r2)
      if (!resid_semaphore[i])
 802cb84:	e0bfff17 	ldw	r2,-4(fp)
 802cb88:	100690ba 	slli	r3,r2,2
 802cb8c:	008201b4 	movhi	r2,2054
 802cb90:	1885883a 	add	r2,r3,r2
 802cb94:	10bc0117 	ldw	r2,-4092(r2)
 802cb98:	1000031e 	bne	r2,zero,802cba8 <alt_iniche_init+0x9c>
         panic("resid_semaphore create err");  
 802cb9c:	01020174 	movhi	r4,2053
 802cba0:	210bc604 	addi	r4,r4,12056
 802cba4:	8027fe00 	call	8027fe0 <panic>
   for (i = 0; i <= MAX_RESID; i++)
 802cba8:	e0bfff17 	ldw	r2,-4(fp)
 802cbac:	10800044 	addi	r2,r2,1
 802cbb0:	e0bfff15 	stw	r2,-4(fp)
 802cbb4:	e0bfff17 	ldw	r2,-4(fp)
 802cbb8:	10800410 	cmplti	r2,r2,16
 802cbbc:	103fe91e 	bne	r2,zero,802cb64 <alt_iniche_init+0x58>
   }
   for (i = 0; i <= MAX_SEMID; i++)
 802cbc0:	e03fff15 	stw	zero,-4(fp)
 802cbc4:	00001406 	br	802cc18 <alt_iniche_init+0x10c>
   {
      app_semaphore[i] = OSSemCreate(1);
 802cbc8:	01000044 	movi	r4,1
 802cbcc:	80165980 	call	8016598 <OSSemCreate>
 802cbd0:	1009883a 	mov	r4,r2
 802cbd4:	e0bfff17 	ldw	r2,-4(fp)
 802cbd8:	100690ba 	slli	r3,r2,2
 802cbdc:	008201b4 	movhi	r2,2054
 802cbe0:	1885883a 	add	r2,r3,r2
 802cbe4:	113c1115 	stw	r4,-4028(r2)
      if (!app_semaphore[i])
 802cbe8:	e0bfff17 	ldw	r2,-4(fp)
 802cbec:	100690ba 	slli	r3,r2,2
 802cbf0:	008201b4 	movhi	r2,2054
 802cbf4:	1885883a 	add	r2,r3,r2
 802cbf8:	10bc1117 	ldw	r2,-4028(r2)
 802cbfc:	1000031e 	bne	r2,zero,802cc0c <alt_iniche_init+0x100>
         panic("app_semaphore create err");  
 802cc00:	01020174 	movhi	r4,2053
 802cc04:	210bcd04 	addi	r4,r4,12084
 802cc08:	8027fe00 	call	8027fe0 <panic>
   for (i = 0; i <= MAX_SEMID; i++)
 802cc0c:	e0bfff17 	ldw	r2,-4(fp)
 802cc10:	10800044 	addi	r2,r2,1
 802cc14:	e0bfff15 	stw	r2,-4(fp)
 802cc18:	e0bfff17 	ldw	r2,-4(fp)
 802cc1c:	10800190 	cmplti	r2,r2,6
 802cc20:	103fe91e 	bne	r2,zero,802cbc8 <alt_iniche_init+0xbc>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 802cc24:	e03fff15 	stw	zero,-4(fp)
 802cc28:	00001e06 	br	802cca4 <alt_iniche_init+0x198>
   {
      global_TCPwakeup_set[i].ctick = 0;
 802cc2c:	e0bfff17 	ldw	r2,-4(fp)
 802cc30:	10c00324 	muli	r3,r2,12
 802cc34:	008201b4 	movhi	r2,2054
 802cc38:	1885883a 	add	r2,r3,r2
 802cc3c:	103bc515 	stw	zero,-4332(r2)
      global_TCPwakeup_set[i].soc_event = NULL;
 802cc40:	e0bfff17 	ldw	r2,-4(fp)
 802cc44:	10c00324 	muli	r3,r2,12
 802cc48:	008201b4 	movhi	r2,2054
 802cc4c:	1885883a 	add	r2,r3,r2
 802cc50:	103bc615 	stw	zero,-4328(r2)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
 802cc54:	0009883a 	mov	r4,zero
 802cc58:	80165980 	call	8016598 <OSSemCreate>
 802cc5c:	1009883a 	mov	r4,r2
 802cc60:	e0bfff17 	ldw	r2,-4(fp)
 802cc64:	10c00324 	muli	r3,r2,12
 802cc68:	008201b4 	movhi	r2,2054
 802cc6c:	1885883a 	add	r2,r3,r2
 802cc70:	113bc715 	stw	r4,-4324(r2)
      if (!global_TCPwakeup_set[i].semaphore)
 802cc74:	e0bfff17 	ldw	r2,-4(fp)
 802cc78:	10c00324 	muli	r3,r2,12
 802cc7c:	008201b4 	movhi	r2,2054
 802cc80:	1885883a 	add	r2,r3,r2
 802cc84:	10bbc717 	ldw	r2,-4324(r2)
 802cc88:	1000031e 	bne	r2,zero,802cc98 <alt_iniche_init+0x18c>
         panic("globwake_semaphore create err");  
 802cc8c:	01020174 	movhi	r4,2053
 802cc90:	210bd404 	addi	r4,r4,12112
 802cc94:	8027fe00 	call	8027fe0 <panic>
   for (i = 0; i < GLOBWAKE_SZ; i++)
 802cc98:	e0bfff17 	ldw	r2,-4(fp)
 802cc9c:	10800044 	addi	r2,r2,1
 802cca0:	e0bfff15 	stw	r2,-4(fp)
 802cca4:	e0bfff17 	ldw	r2,-4(fp)
 802cca8:	10800510 	cmplti	r2,r2,20
 802ccac:	103fdf1e 	bne	r2,zero,802cc2c <alt_iniche_init+0x120>
   }
   global_TCPwakeup_setIndx = 0;
 802ccb0:	d020a215 	stw	zero,-32120(gp)
#endif  /* TCPWAKE_RTOS */
}
 802ccb4:	0001883a 	nop
 802ccb8:	e037883a 	mov	sp,fp
 802ccbc:	dfc00117 	ldw	ra,4(sp)
 802ccc0:	df000017 	ldw	fp,0(sp)
 802ccc4:	dec00204 	addi	sp,sp,8
 802ccc8:	f800283a 	ret

0802cccc <pre_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
pre_task_setup()
{
 802cccc:	deffff04 	addi	sp,sp,-4
 802ccd0:	df000015 	stw	fp,0(sp)
 802ccd4:	d839883a 	mov	fp,sp
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 802ccd8:	00800784 	movi	r2,30
 802ccdc:	d0a03415 	stw	r2,-32560(gp)
   lilbufs = MAXLILPKTS;
 802cce0:	00800784 	movi	r2,30
 802cce4:	d0a03215 	stw	r2,-32568(gp)
   bigbufsiz = BIGBUFSIZE;
 802cce8:	00818004 	movi	r2,1536
 802ccec:	d0a03515 	stw	r2,-32556(gp)
   lilbufsiz = LILBUFSIZE;
 802ccf0:	00802004 	movi	r2,128
 802ccf4:	d0a03315 	stw	r2,-32564(gp)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
 802ccf8:	008200f4 	movhi	r2,2051
 802ccfc:	10b34e04 	addi	r2,r2,-13000
 802cd00:	d0a0c515 	stw	r2,-31980(gp)
#endif   /* NOTDEF */

#endif   /* USE_PPP */


   return NULL;
 802cd04:	0005883a 	mov	r2,zero
}
 802cd08:	e037883a 	mov	sp,fp
 802cd0c:	df000017 	ldw	fp,0(sp)
 802cd10:	dec00104 	addi	sp,sp,4
 802cd14:	f800283a 	ret

0802cd18 <post_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
post_task_setup()
{
 802cd18:	deffff04 	addi	sp,sp,-4
 802cd1c:	df000015 	stw	fp,0(sp)
 802cd20:	d839883a 	mov	fp,sp
   return NULL;
 802cd24:	0005883a 	mov	r2,zero
}
 802cd28:	e037883a 	mov	sp,fp
 802cd2c:	df000017 	ldw	fp,0(sp)
 802cd30:	dec00104 	addi	sp,sp,4
 802cd34:	f800283a 	ret

0802cd38 <prep_armintcp>:

#endif  /* INCLUDE_NVPARMS */

int 
prep_armintcp(int ifaces_found)
{
 802cd38:	defffd04 	addi	sp,sp,-12
 802cd3c:	dfc00215 	stw	ra,8(sp)
 802cd40:	df000115 	stw	fp,4(sp)
 802cd44:	df000104 	addi	fp,sp,4
 802cd48:	e13fff15 	stw	r4,-4(fp)
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
 802cd4c:	e13fff17 	ldw	r4,-4(fp)
 802cd50:	8024edc0 	call	8024edc <iniche_devices_init>
 802cd54:	e0bfff15 	stw	r2,-4(fp)

#ifdef USE_SLIP
   ifaces_found = prep_slip(ifaces_found);
#endif

   return ifaces_found;
 802cd58:	e0bfff17 	ldw	r2,-4(fp)
}
 802cd5c:	e037883a 	mov	sp,fp
 802cd60:	dfc00117 	ldw	ra,4(sp)
 802cd64:	df000017 	ldw	fp,0(sp)
 802cd68:	dec00204 	addi	sp,sp,8
 802cd6c:	f800283a 	ret

0802cd70 <npalloc_base>:
#endif


char *
npalloc_base(unsigned size, int cacheable)
{
 802cd70:	defff804 	addi	sp,sp,-32
 802cd74:	dfc00715 	stw	ra,28(sp)
 802cd78:	df000615 	stw	fp,24(sp)
 802cd7c:	df000604 	addi	fp,sp,24
 802cd80:	e13ffb15 	stw	r4,-20(fp)
 802cd84:	e17ffa15 	stw	r5,-24(fp)
char * ptr;
void *(*alloc_rtn)(size_t size) = cacheable ? malloc : alt_uncached_malloc;
 802cd88:	e0bffa17 	ldw	r2,-24(fp)
 802cd8c:	10000326 	beq	r2,zero,802cd9c <npalloc_base+0x2c>
 802cd90:	00820174 	movhi	r2,2053
 802cd94:	10a8b604 	addi	r2,r2,-23848
 802cd98:	00000206 	br	802cda4 <npalloc_base+0x34>
 802cd9c:	00820134 	movhi	r2,2052
 802cda0:	10aeb804 	addi	r2,r2,-17696
 802cda4:	e0bffe15 	stw	r2,-8(fp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
 802cda8:	d0a0a517 	ldw	r2,-32108(gp)
 802cdac:	e0fffcc4 	addi	r3,fp,-13
 802cdb0:	180d883a 	mov	r6,r3
 802cdb4:	000b883a 	mov	r5,zero
 802cdb8:	1009883a 	mov	r4,r2
 802cdbc:	80168c40 	call	80168c4 <OSSemPend>
   if(err)
 802cdc0:	e0bffcc3 	ldbu	r2,-13(fp)
 802cdc4:	10803fcc 	andi	r2,r2,255
 802cdc8:	10001626 	beq	r2,zero,802ce24 <npalloc_base+0xb4>
   {
      int errct = 0;
 802cdcc:	e03fff15 	stw	zero,-4(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 802cdd0:	00001006 	br	802ce14 <npalloc_base+0xa4>
      {
         if(errct++ > 1000)
 802cdd4:	e0bfff17 	ldw	r2,-4(fp)
 802cdd8:	10c00044 	addi	r3,r2,1
 802cddc:	e0ffff15 	stw	r3,-4(fp)
 802cde0:	1080fa50 	cmplti	r2,r2,1001
 802cde4:	1000051e 	bne	r2,zero,802cdfc <npalloc_base+0x8c>
         {
            panic("npalloc");    /* fatal? */
 802cde8:	01020174 	movhi	r4,2053
 802cdec:	210bdc04 	addi	r4,r4,12144
 802cdf0:	8027fe00 	call	8027fe0 <panic>
            return NULL;
 802cdf4:	0005883a 	mov	r2,zero
 802cdf8:	00001b06 	br	802ce68 <npalloc_base+0xf8>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 802cdfc:	d0a0a517 	ldw	r2,-32108(gp)
 802ce00:	e0fffcc4 	addi	r3,fp,-13
 802ce04:	180d883a 	mov	r6,r3
 802ce08:	000b883a 	mov	r5,zero
 802ce0c:	1009883a 	mov	r4,r2
 802ce10:	80168c40 	call	80168c4 <OSSemPend>
      while(err == 10)
 802ce14:	e0bffcc3 	ldbu	r2,-13(fp)
 802ce18:	10803fcc 	andi	r2,r2,255
 802ce1c:	108002a0 	cmpeqi	r2,r2,10
 802ce20:	103fec1e 	bne	r2,zero,802cdd4 <npalloc_base+0x64>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, alloc_rtn);
#else
   ptr = (*alloc_rtn)(size);
 802ce24:	e0bffe17 	ldw	r2,-8(fp)
 802ce28:	e13ffb17 	ldw	r4,-20(fp)
 802ce2c:	103ee83a 	callr	r2
 802ce30:	e0bffd15 	stw	r2,-12(fp)
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 802ce34:	d0a0a517 	ldw	r2,-32108(gp)
 802ce38:	1009883a 	mov	r4,r2
 802ce3c:	8016c4c0 	call	8016c4c <OSSemPost>
 802ce40:	e0bffcc5 	stb	r2,-13(fp)
#endif
   
   if(!ptr)
 802ce44:	e0bffd17 	ldw	r2,-12(fp)
 802ce48:	1000021e 	bne	r2,zero,802ce54 <npalloc_base+0xe4>
      return NULL;
 802ce4c:	0005883a 	mov	r2,zero
 802ce50:	00000506 	br	802ce68 <npalloc_base+0xf8>

   MEMSET(ptr, 0, size);
 802ce54:	e1bffb17 	ldw	r6,-20(fp)
 802ce58:	000b883a 	mov	r5,zero
 802ce5c:	e13ffd17 	ldw	r4,-12(fp)
 802ce60:	8002fa40 	call	8002fa4 <memset>
   return ptr;      
 802ce64:	e0bffd17 	ldw	r2,-12(fp)
}
 802ce68:	e037883a 	mov	sp,fp
 802ce6c:	dfc00117 	ldw	ra,4(sp)
 802ce70:	df000017 	ldw	fp,0(sp)
 802ce74:	dec00204 	addi	sp,sp,8
 802ce78:	f800283a 	ret

0802ce7c <npfree_base>:

void
npfree_base(void *ptr, int cacheable)
{
 802ce7c:	defff904 	addi	sp,sp,-28
 802ce80:	dfc00615 	stw	ra,24(sp)
 802ce84:	df000515 	stw	fp,20(sp)
 802ce88:	df000504 	addi	fp,sp,20
 802ce8c:	e13ffc15 	stw	r4,-16(fp)
 802ce90:	e17ffb15 	stw	r5,-20(fp)
   void (*free_rtn)(void *ptr) = cacheable ? free : alt_uncached_free;
 802ce94:	e0bffb17 	ldw	r2,-20(fp)
 802ce98:	10000326 	beq	r2,zero,802cea8 <npfree_base+0x2c>
 802ce9c:	00820174 	movhi	r2,2053
 802cea0:	10a8ba04 	addi	r2,r2,-23832
 802cea4:	00000206 	br	802ceb0 <npfree_base+0x34>
 802cea8:	00820134 	movhi	r2,2052
 802ceac:	10aea704 	addi	r2,r2,-17764
 802ceb0:	e0bffe15 	stw	r2,-8(fp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
 802ceb4:	d0a0a517 	ldw	r2,-32108(gp)
 802ceb8:	e0fffdc4 	addi	r3,fp,-9
 802cebc:	180d883a 	mov	r6,r3
 802cec0:	000b883a 	mov	r5,zero
 802cec4:	1009883a 	mov	r4,r2
 802cec8:	80168c40 	call	80168c4 <OSSemPend>
   if (err)
 802cecc:	e0bffdc3 	ldbu	r2,-9(fp)
 802ced0:	10803fcc 	andi	r2,r2,255
 802ced4:	10001526 	beq	r2,zero,802cf2c <npfree_base+0xb0>
   {
      int errct = 0;
 802ced8:	e03fff15 	stw	zero,-4(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 802cedc:	00000f06 	br	802cf1c <npfree_base+0xa0>
      {
         if (errct++ > 1000)
 802cee0:	e0bfff17 	ldw	r2,-4(fp)
 802cee4:	10c00044 	addi	r3,r2,1
 802cee8:	e0ffff15 	stw	r3,-4(fp)
 802ceec:	1080fa50 	cmplti	r2,r2,1001
 802cef0:	1000041e 	bne	r2,zero,802cf04 <npfree_base+0x88>
         {
            panic("npfree");    /* fatal? */
 802cef4:	01020174 	movhi	r4,2053
 802cef8:	210bde04 	addi	r4,r4,12152
 802cefc:	8027fe00 	call	8027fe0 <panic>
 802cf00:	00001106 	br	802cf48 <npfree_base+0xcc>
            return;
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 802cf04:	d0a0a517 	ldw	r2,-32108(gp)
 802cf08:	e0fffdc4 	addi	r3,fp,-9
 802cf0c:	180d883a 	mov	r6,r3
 802cf10:	000b883a 	mov	r5,zero
 802cf14:	1009883a 	mov	r4,r2
 802cf18:	80168c40 	call	80168c4 <OSSemPend>
      while (err == 10)
 802cf1c:	e0bffdc3 	ldbu	r2,-9(fp)
 802cf20:	10803fcc 	andi	r2,r2,255
 802cf24:	108002a0 	cmpeqi	r2,r2,10
 802cf28:	103fed1e 	bne	r2,zero,802cee0 <npfree_base+0x64>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free_rtn);
#else
   (*free_rtn)(ptr);
 802cf2c:	e0bffe17 	ldw	r2,-8(fp)
 802cf30:	e13ffc17 	ldw	r4,-16(fp)
 802cf34:	103ee83a 	callr	r2
#endif

   err = OSSemPost(mheap_sem_ptr);
 802cf38:	d0a0a517 	ldw	r2,-32108(gp)
 802cf3c:	1009883a 	mov	r4,r2
 802cf40:	8016c4c0 	call	8016c4c <OSSemPost>
 802cf44:	e0bffdc5 	stb	r2,-9(fp)
#else
   (*free_rtn)(ptr);
#endif
#endif

}
 802cf48:	e037883a 	mov	sp,fp
 802cf4c:	dfc00117 	ldw	ra,4(sp)
 802cf50:	df000017 	ldw	fp,0(sp)
 802cf54:	dec00204 	addi	sp,sp,8
 802cf58:	f800283a 	ret

0802cf5c <npalloc>:

char *
npalloc(unsigned size)
{
 802cf5c:	defffd04 	addi	sp,sp,-12
 802cf60:	dfc00215 	stw	ra,8(sp)
 802cf64:	df000115 	stw	fp,4(sp)
 802cf68:	df000104 	addi	fp,sp,4
 802cf6c:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 1);
 802cf70:	01400044 	movi	r5,1
 802cf74:	e13fff17 	ldw	r4,-4(fp)
 802cf78:	802cd700 	call	802cd70 <npalloc_base>
}
 802cf7c:	e037883a 	mov	sp,fp
 802cf80:	dfc00117 	ldw	ra,4(sp)
 802cf84:	df000017 	ldw	fp,0(sp)
 802cf88:	dec00204 	addi	sp,sp,8
 802cf8c:	f800283a 	ret

0802cf90 <npfree>:

void
npfree(void *ptr)
{
 802cf90:	defffd04 	addi	sp,sp,-12
 802cf94:	dfc00215 	stw	ra,8(sp)
 802cf98:	df000115 	stw	fp,4(sp)
 802cf9c:	df000104 	addi	fp,sp,4
 802cfa0:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
 802cfa4:	e0bfff17 	ldw	r2,-4(fp)
 802cfa8:	10000326 	beq	r2,zero,802cfb8 <npfree+0x28>
      npfree_base(ptr, 1);
 802cfac:	01400044 	movi	r5,1
 802cfb0:	e13fff17 	ldw	r4,-4(fp)
 802cfb4:	802ce7c0 	call	802ce7c <npfree_base>
   }
}
 802cfb8:	0001883a 	nop
 802cfbc:	e037883a 	mov	sp,fp
 802cfc0:	dfc00117 	ldw	ra,4(sp)
 802cfc4:	df000017 	ldw	fp,0(sp)
 802cfc8:	dec00204 	addi	sp,sp,8
 802cfcc:	f800283a 	ret

0802cfd0 <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
 802cfd0:	defffd04 	addi	sp,sp,-12
 802cfd4:	dfc00215 	stw	ra,8(sp)
 802cfd8:	df000115 	stw	fp,4(sp)
 802cfdc:	df000104 	addi	fp,sp,4
 802cfe0:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 0);
 802cfe4:	000b883a 	mov	r5,zero
 802cfe8:	e13fff17 	ldw	r4,-4(fp)
 802cfec:	802cd700 	call	802cd70 <npalloc_base>
}
 802cff0:	e037883a 	mov	sp,fp
 802cff4:	dfc00117 	ldw	ra,4(sp)
 802cff8:	df000017 	ldw	fp,0(sp)
 802cffc:	dec00204 	addi	sp,sp,8
 802d000:	f800283a 	ret

0802d004 <ncpfree>:

void ncpfree(void *ptr)
{
 802d004:	defffd04 	addi	sp,sp,-12
 802d008:	dfc00215 	stw	ra,8(sp)
 802d00c:	df000115 	stw	fp,4(sp)
 802d010:	df000104 	addi	fp,sp,4
 802d014:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
 802d018:	e0bfff17 	ldw	r2,-4(fp)
 802d01c:	10000326 	beq	r2,zero,802d02c <ncpfree+0x28>
      npfree_base(ptr, 0);
 802d020:	000b883a 	mov	r5,zero
 802d024:	e13fff17 	ldw	r4,-4(fp)
 802d028:	802ce7c0 	call	802ce7c <npfree_base>
   }
}
 802d02c:	0001883a 	nop
 802d030:	e037883a 	mov	sp,fp
 802d034:	dfc00117 	ldw	ra,4(sp)
 802d038:	df000017 	ldw	fp,0(sp)
 802d03c:	dec00204 	addi	sp,sp,8
 802d040:	f800283a 	ret

0802d044 <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
 802d044:	defffc04 	addi	sp,sp,-16
 802d048:	dfc00315 	stw	ra,12(sp)
 802d04c:	df000215 	stw	fp,8(sp)
 802d050:	df000204 	addi	fp,sp,8
 802d054:	e13fff15 	stw	r4,-4(fp)
 802d058:	e17ffe15 	stw	r5,-8(fp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
 802d05c:	e0bfff17 	ldw	r2,-4(fp)
 802d060:	108000a0 	cmpeqi	r2,r2,2
 802d064:	1000031e 	bne	r2,zero,802d074 <pffindtype+0x30>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
 802d068:	802c3fc0 	call	802c3fc <dtrap>
         return NULL;
 802d06c:	0005883a 	mov	r2,zero
 802d070:	00001306 	br	802d0c0 <pffindtype+0x7c>
      }
   }

   if (type == SOCK_STREAM)
 802d074:	e0bffe17 	ldw	r2,-8(fp)
 802d078:	10800058 	cmpnei	r2,r2,1
 802d07c:	1000031e 	bne	r2,zero,802d08c <pffindtype+0x48>
      return &tcp_protosw;
 802d080:	00820174 	movhi	r2,2053
 802d084:	1097f804 	addi	r2,r2,24544
 802d088:	00000d06 	br	802d0c0 <pffindtype+0x7c>
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
 802d08c:	e0bffe17 	ldw	r2,-8(fp)
 802d090:	10800098 	cmpnei	r2,r2,2
 802d094:	1000031e 	bne	r2,zero,802d0a4 <pffindtype+0x60>
      return &udp_protosw;
 802d098:	00820174 	movhi	r2,2053
 802d09c:	1097fe04 	addi	r2,r2,24568
 802d0a0:	00000706 	br	802d0c0 <pffindtype+0x7c>
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
 802d0a4:	e0bffe17 	ldw	r2,-8(fp)
 802d0a8:	108000d8 	cmpnei	r2,r2,3
 802d0ac:	1000031e 	bne	r2,zero,802d0bc <pffindtype+0x78>
      return &rawip_protosw;
 802d0b0:	00820174 	movhi	r2,2053
 802d0b4:	10980404 	addi	r2,r2,24592
 802d0b8:	00000106 	br	802d0c0 <pffindtype+0x7c>
#endif  /* IP_RAW */
   else
      return NULL;
 802d0bc:	0005883a 	mov	r2,zero
}
 802d0c0:	e037883a 	mov	sp,fp
 802d0c4:	dfc00117 	ldw	ra,4(sp)
 802d0c8:	df000017 	ldw	fp,0(sp)
 802d0cc:	dec00204 	addi	sp,sp,8
 802d0d0:	f800283a 	ret

0802d0d4 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
 802d0d4:	defffb04 	addi	sp,sp,-20
 802d0d8:	dfc00415 	stw	ra,16(sp)
 802d0dc:	df000315 	stw	fp,12(sp)
 802d0e0:	df000304 	addi	fp,sp,12
 802d0e4:	e13fff15 	stw	r4,-4(fp)
 802d0e8:	e17ffe15 	stw	r5,-8(fp)
 802d0ec:	e1bffd15 	stw	r6,-12(fp)
#ifdef IP_RAW
   if (type == SOCK_RAW)
 802d0f0:	e0bffd17 	ldw	r2,-12(fp)
 802d0f4:	108000d8 	cmpnei	r2,r2,3
 802d0f8:	1000041e 	bne	r2,zero,802d10c <pffindproto+0x38>
      return(pffindtype(domain, type));
 802d0fc:	e17ffd17 	ldw	r5,-12(fp)
 802d100:	e13fff17 	ldw	r4,-4(fp)
 802d104:	802d0440 	call	802d044 <pffindtype>
 802d108:	00002206 	br	802d194 <pffindproto+0xc0>
#endif

   switch (protocol)
 802d10c:	e0bffe17 	ldw	r2,-8(fp)
 802d110:	10800460 	cmpeqi	r2,r2,17
 802d114:	10000e1e 	bne	r2,zero,802d150 <pffindproto+0x7c>
 802d118:	e0bffe17 	ldw	r2,-8(fp)
 802d11c:	10800488 	cmpgei	r2,r2,18
 802d120:	1000111e 	bne	r2,zero,802d168 <pffindproto+0x94>
 802d124:	e0bffe17 	ldw	r2,-8(fp)
 802d128:	10001226 	beq	r2,zero,802d174 <pffindproto+0xa0>
 802d12c:	e0bffe17 	ldw	r2,-8(fp)
 802d130:	10800198 	cmpnei	r2,r2,6
 802d134:	10000c1e 	bne	r2,zero,802d168 <pffindproto+0x94>
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
 802d138:	e0bffd17 	ldw	r2,-12(fp)
 802d13c:	10800058 	cmpnei	r2,r2,1
 802d140:	10000e26 	beq	r2,zero,802d17c <pffindproto+0xa8>
         break;
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
 802d144:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 802d148:	0005883a 	mov	r2,zero
 802d14c:	00001106 	br	802d194 <pffindproto+0xc0>
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
 802d150:	e0bffd17 	ldw	r2,-12(fp)
 802d154:	10800098 	cmpnei	r2,r2,2
 802d158:	10000a26 	beq	r2,zero,802d184 <pffindproto+0xb0>
         break;
      /* IPPROTO_UDP protocol on non-SOCK_DGRAM type socket */
      dtrap();
 802d15c:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 802d160:	0005883a 	mov	r2,zero
 802d164:	00000b06 	br	802d194 <pffindproto+0xc0>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
 802d168:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 802d16c:	0005883a 	mov	r2,zero
 802d170:	00000806 	br	802d194 <pffindproto+0xc0>
      break;
 802d174:	0001883a 	nop
 802d178:	00000306 	br	802d188 <pffindproto+0xb4>
         break;
 802d17c:	0001883a 	nop
 802d180:	00000106 	br	802d188 <pffindproto+0xb4>
         break;
 802d184:	0001883a 	nop
   }
   return(pffindtype(domain, type));   /* map to findtype */
 802d188:	e17ffd17 	ldw	r5,-12(fp)
 802d18c:	e13fff17 	ldw	r4,-4(fp)
 802d190:	802d0440 	call	802d044 <pffindtype>
}
 802d194:	e037883a 	mov	sp,fp
 802d198:	dfc00117 	ldw	ra,4(sp)
 802d19c:	df000017 	ldw	fp,0(sp)
 802d1a0:	dec00204 	addi	sp,sp,8
 802d1a4:	f800283a 	ret

0802d1a8 <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
 802d1a8:	defffa04 	addi	sp,sp,-24
 802d1ac:	dfc00515 	stw	ra,20(sp)
 802d1b0:	df000415 	stw	fp,16(sp)
 802d1b4:	df000404 	addi	fp,sp,16
 802d1b8:	e13ffd15 	stw	r4,-12(fp)
 802d1bc:	e17ffc15 	stw	r5,-16(fp)
   struct mbuf *  m;
   PACKET pkt = NULL;
 802d1c0:	e03fff15 	stw	zero,-4(fp)

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
 802d1c4:	e0bffd17 	ldw	r2,-12(fp)
 802d1c8:	0080030e 	bge	zero,r2,802d1d8 <m_getnbuf+0x30>
 802d1cc:	e0bffd17 	ldw	r2,-12(fp)
 802d1d0:	10800390 	cmplti	r2,r2,14
 802d1d4:	1000011e 	bne	r2,zero,802d1dc <m_getnbuf+0x34>
   {
      dtrap(); /* is this OK? */
 802d1d8:	802c3fc0 	call	802c3fc <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 802d1dc:	e0bffc17 	ldw	r2,-16(fp)
 802d1e0:	10000d26 	beq	r2,zero,802d218 <m_getnbuf+0x70>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 802d1e4:	01000084 	movi	r4,2
 802d1e8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
 802d1ec:	e0bffc17 	ldw	r2,-16(fp)
 802d1f0:	10800e04 	addi	r2,r2,56
 802d1f4:	1009883a 	mov	r4,r2
 802d1f8:	802b8840 	call	802b884 <pk_alloc>
 802d1fc:	e0bfff15 	stw	r2,-4(fp)

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802d200:	01000084 	movi	r4,2
 802d204:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      if (!pkt)
 802d208:	e0bfff17 	ldw	r2,-4(fp)
 802d20c:	1000021e 	bne	r2,zero,802d218 <m_getnbuf+0x70>
         return NULL;
 802d210:	0005883a 	mov	r2,zero
 802d214:	00004106 	br	802d31c <m_getnbuf+0x174>
   }

   m = (struct mbuf *)getq(&mfreeq);
 802d218:	010201b4 	movhi	r4,2054
 802d21c:	213c3004 	addi	r4,r4,-3904
 802d220:	802bd280 	call	802bd28 <getq>
 802d224:	e0bffe15 	stw	r2,-8(fp)
   if (!m)
 802d228:	e0bffe17 	ldw	r2,-8(fp)
 802d22c:	10000a1e 	bne	r2,zero,802d258 <m_getnbuf+0xb0>
   {
      if (pkt) 
 802d230:	e0bfff17 	ldw	r2,-4(fp)
 802d234:	10000626 	beq	r2,zero,802d250 <m_getnbuf+0xa8>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 802d238:	01000084 	movi	r4,2
 802d23c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 802d240:	e13fff17 	ldw	r4,-4(fp)
 802d244:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802d248:	01000084 	movi	r4,2
 802d24c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      }
      return NULL;
 802d250:	0005883a 	mov	r2,zero
 802d254:	00003106 	br	802d31c <m_getnbuf+0x174>
   }
   m->m_type = type;
 802d258:	e0bffe17 	ldw	r2,-8(fp)
 802d25c:	e0fffd17 	ldw	r3,-12(fp)
 802d260:	10c00815 	stw	r3,32(r2)
   if (len == 0)
 802d264:	e0bffc17 	ldw	r2,-16(fp)
 802d268:	1000071e 	bne	r2,zero,802d288 <m_getnbuf+0xe0>
   {
      m->pkt = NULL;
 802d26c:	e0bffe17 	ldw	r2,-8(fp)
 802d270:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
 802d274:	e0bffe17 	ldw	r2,-8(fp)
 802d278:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
 802d27c:	e0bffe17 	ldw	r2,-8(fp)
 802d280:	10000515 	stw	zero,20(r2)
 802d284:	00001506 	br	802d2dc <m_getnbuf+0x134>
   }
   else
   {
      m->pkt = pkt;
 802d288:	e0bffe17 	ldw	r2,-8(fp)
 802d28c:	e0ffff17 	ldw	r3,-4(fp)
 802d290:	10c00115 	stw	r3,4(r2)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 802d294:	e0bfff17 	ldw	r2,-4(fp)
 802d298:	10800117 	ldw	r2,4(r2)
 802d29c:	10c00e04 	addi	r3,r2,56
 802d2a0:	e0bfff17 	ldw	r2,-4(fp)
 802d2a4:	10c00315 	stw	r3,12(r2)
 802d2a8:	e0bfff17 	ldw	r2,-4(fp)
 802d2ac:	10c00317 	ldw	r3,12(r2)
 802d2b0:	e0bffe17 	ldw	r2,-8(fp)
 802d2b4:	10c00315 	stw	r3,12(r2)
 802d2b8:	e0bffe17 	ldw	r2,-8(fp)
 802d2bc:	10c00317 	ldw	r3,12(r2)
 802d2c0:	e0bffe17 	ldw	r2,-8(fp)
 802d2c4:	10c00415 	stw	r3,16(r2)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 802d2c8:	e0bfff17 	ldw	r2,-4(fp)
 802d2cc:	10800217 	ldw	r2,8(r2)
 802d2d0:	10fff204 	addi	r3,r2,-56
 802d2d4:	e0bffe17 	ldw	r2,-8(fp)
 802d2d8:	10c00515 	stw	r3,20(r2)
   }
   m->m_len = 0;
 802d2dc:	e0bffe17 	ldw	r2,-8(fp)
 802d2e0:	10000215 	stw	zero,8(r2)
   m->m_next = m->m_act = NULL;
 802d2e4:	e0bffe17 	ldw	r2,-8(fp)
 802d2e8:	10000715 	stw	zero,28(r2)
 802d2ec:	e0bffe17 	ldw	r2,-8(fp)
 802d2f0:	10c00717 	ldw	r3,28(r2)
 802d2f4:	e0bffe17 	ldw	r2,-8(fp)
 802d2f8:	10c00615 	stw	r3,24(r2)
   mbstat.allocs++;        /* maintain local statistics */
 802d2fc:	d0a0a917 	ldw	r2,-32092(gp)
 802d300:	10800044 	addi	r2,r2,1
 802d304:	d0a0a915 	stw	r2,-32092(gp)
   putq(&mbufq, (qp)m);
 802d308:	e17ffe17 	ldw	r5,-8(fp)
 802d30c:	010201b4 	movhi	r4,2054
 802d310:	213c2b04 	addi	r4,r4,-3924
 802d314:	802bde00 	call	802bde0 <putq>
   return m;
 802d318:	e0bffe17 	ldw	r2,-8(fp)
}
 802d31c:	e037883a 	mov	sp,fp
 802d320:	dfc00117 	ldw	ra,4(sp)
 802d324:	df000017 	ldw	fp,0(sp)
 802d328:	dec00204 	addi	sp,sp,8
 802d32c:	f800283a 	ret

0802d330 <m_free>:
 */


struct mbuf *  
m_free(struct mbuf * m)
{
 802d330:	defffc04 	addi	sp,sp,-16
 802d334:	dfc00315 	stw	ra,12(sp)
 802d338:	df000215 	stw	fp,8(sp)
 802d33c:	df000204 	addi	fp,sp,8
 802d340:	e13ffe15 	stw	r4,-8(fp)
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
 802d344:	008201b4 	movhi	r2,2054
 802d348:	10bc2d17 	ldw	r2,-3916(r2)
 802d34c:	00800316 	blt	zero,r2,802d35c <m_free+0x2c>
      panic("mfree: q_len");
 802d350:	01020174 	movhi	r4,2053
 802d354:	210be004 	addi	r4,r4,12160
 802d358:	8027fe00 	call	8027fe0 <panic>

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
 802d35c:	e0bffe17 	ldw	r2,-8(fp)
 802d360:	10800817 	ldw	r2,32(r2)
 802d364:	0080040e 	bge	zero,r2,802d378 <m_free+0x48>
 802d368:	e0bffe17 	ldw	r2,-8(fp)
 802d36c:	10800817 	ldw	r2,32(r2)
 802d370:	10800390 	cmplti	r2,r2,14
 802d374:	10000a1e 	bne	r2,zero,802d3a0 <m_free+0x70>
   {
      if (m->m_type == MT_FREE)
 802d378:	e0bffe17 	ldw	r2,-8(fp)
 802d37c:	10800817 	ldw	r2,32(r2)
 802d380:	1000041e 	bne	r2,zero,802d394 <m_free+0x64>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
 802d384:	802c3fc0 	call	802c3fc <dtrap>
         return m->m_next; /* seems harmless, though.... */
 802d388:	e0bffe17 	ldw	r2,-8(fp)
 802d38c:	10800617 	ldw	r2,24(r2)
 802d390:	00002306 	br	802d420 <m_free+0xf0>
      }
      else
         panic("m_free: type");
 802d394:	01020174 	movhi	r4,2053
 802d398:	210be404 	addi	r4,r4,12176
 802d39c:	8027fe00 	call	8027fe0 <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
 802d3a0:	e0bffe17 	ldw	r2,-8(fp)
 802d3a4:	10800617 	ldw	r2,24(r2)
 802d3a8:	e0bfff15 	stw	r2,-4(fp)

   if (qdel(&mbufq, m) == NULL)
 802d3ac:	e17ffe17 	ldw	r5,-8(fp)
 802d3b0:	010201b4 	movhi	r4,2054
 802d3b4:	213c2b04 	addi	r4,r4,-3924
 802d3b8:	802be900 	call	802be90 <qdel>
 802d3bc:	1000031e 	bne	r2,zero,802d3cc <m_free+0x9c>
      panic("m_free: missing");
 802d3c0:	01020174 	movhi	r4,2053
 802d3c4:	210be804 	addi	r4,r4,12192
 802d3c8:	8027fe00 	call	8027fe0 <panic>

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
 802d3cc:	e0bffe17 	ldw	r2,-8(fp)
 802d3d0:	10000815 	stw	zero,32(r2)

   if (m->pkt)
 802d3d4:	e0bffe17 	ldw	r2,-8(fp)
 802d3d8:	10800117 	ldw	r2,4(r2)
 802d3dc:	10000826 	beq	r2,zero,802d400 <m_free+0xd0>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 802d3e0:	01000084 	movi	r4,2
 802d3e4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
 802d3e8:	e0bffe17 	ldw	r2,-8(fp)
 802d3ec:	10800117 	ldw	r2,4(r2)
 802d3f0:	1009883a 	mov	r4,r2
 802d3f4:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802d3f8:	01000084 	movi	r4,2
 802d3fc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
 802d400:	d0a0aa17 	ldw	r2,-32088(gp)
 802d404:	10800044 	addi	r2,r2,1
 802d408:	d0a0aa15 	stw	r2,-32088(gp)
   putq(&mfreeq, (qp)m);
 802d40c:	e17ffe17 	ldw	r5,-8(fp)
 802d410:	010201b4 	movhi	r4,2054
 802d414:	213c3004 	addi	r4,r4,-3904
 802d418:	802bde00 	call	802bde0 <putq>
   return nextptr;
 802d41c:	e0bfff17 	ldw	r2,-4(fp)
}
 802d420:	e037883a 	mov	sp,fp
 802d424:	dfc00117 	ldw	ra,4(sp)
 802d428:	df000017 	ldw	fp,0(sp)
 802d42c:	dec00204 	addi	sp,sp,8
 802d430:	f800283a 	ret

0802d434 <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
 802d434:	defffd04 	addi	sp,sp,-12
 802d438:	dfc00215 	stw	ra,8(sp)
 802d43c:	df000115 	stw	fp,4(sp)
 802d440:	df000104 	addi	fp,sp,4
 802d444:	e13fff15 	stw	r4,-4(fp)
   while (m != NULL)
 802d448:	00000306 	br	802d458 <m_freem+0x24>
      m = m_free(m);
 802d44c:	e13fff17 	ldw	r4,-4(fp)
 802d450:	802d3300 	call	802d330 <m_free>
 802d454:	e0bfff15 	stw	r2,-4(fp)
   while (m != NULL)
 802d458:	e0bfff17 	ldw	r2,-4(fp)
 802d45c:	103ffb1e 	bne	r2,zero,802d44c <m_freem+0x18>
}
 802d460:	0001883a 	nop
 802d464:	0001883a 	nop
 802d468:	e037883a 	mov	sp,fp
 802d46c:	dfc00117 	ldw	ra,4(sp)
 802d470:	df000017 	ldw	fp,0(sp)
 802d474:	dec00204 	addi	sp,sp,8
 802d478:	f800283a 	ret

0802d47c <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
 802d47c:	defff704 	addi	sp,sp,-36
 802d480:	dfc00815 	stw	ra,32(sp)
 802d484:	df000715 	stw	fp,28(sp)
 802d488:	df000704 	addi	fp,sp,28
 802d48c:	e13ffb15 	stw	r4,-20(fp)
 802d490:	e17ffa15 	stw	r5,-24(fp)
 802d494:	e1bff915 	stw	r6,-28(fp)
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
 802d498:	e0bff917 	ldw	r2,-28(fp)
 802d49c:	1000021e 	bne	r2,zero,802d4a8 <m_copy+0x2c>
      return NULL;
 802d4a0:	0005883a 	mov	r2,zero
 802d4a4:	0000a606 	br	802d740 <m_copy+0x2c4>

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
 802d4a8:	e0bffa17 	ldw	r2,-24(fp)
 802d4ac:	10000516 	blt	r2,zero,802d4c4 <m_copy+0x48>
 802d4b0:	e0bff917 	ldw	r2,-28(fp)
 802d4b4:	1000180e 	bge	r2,zero,802d518 <m_copy+0x9c>
 802d4b8:	e0bff917 	ldw	r2,-28(fp)
 802d4bc:	10bfffe0 	cmpeqi	r2,r2,-1
 802d4c0:	1000151e 	bne	r2,zero,802d518 <m_copy+0x9c>
   {
      dtrap();
 802d4c4:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 802d4c8:	0005883a 	mov	r2,zero
 802d4cc:	00009c06 	br	802d740 <m_copy+0x2c4>
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   {
      if (!m)
 802d4d0:	e0bffb17 	ldw	r2,-20(fp)
 802d4d4:	1000031e 	bne	r2,zero,802d4e4 <m_copy+0x68>
      {
         dtrap();
 802d4d8:	802c3fc0 	call	802c3fc <dtrap>
         return NULL;
 802d4dc:	0005883a 	mov	r2,zero
 802d4e0:	00009706 	br	802d740 <m_copy+0x2c4>
      }
      if (off < (int)m->m_len)
 802d4e4:	e0bffb17 	ldw	r2,-20(fp)
 802d4e8:	10800217 	ldw	r2,8(r2)
 802d4ec:	1007883a 	mov	r3,r2
 802d4f0:	e0bffa17 	ldw	r2,-24(fp)
 802d4f4:	10c00b16 	blt	r2,r3,802d524 <m_copy+0xa8>
         break;
      off -= m->m_len;
 802d4f8:	e0fffa17 	ldw	r3,-24(fp)
 802d4fc:	e0bffb17 	ldw	r2,-20(fp)
 802d500:	10800217 	ldw	r2,8(r2)
 802d504:	1885c83a 	sub	r2,r3,r2
 802d508:	e0bffa15 	stw	r2,-24(fp)
      m = m->m_next;
 802d50c:	e0bffb17 	ldw	r2,-20(fp)
 802d510:	10800617 	ldw	r2,24(r2)
 802d514:	e0bffb15 	stw	r2,-20(fp)
   while (off > 0) 
 802d518:	e0bffa17 	ldw	r2,-24(fp)
 802d51c:	00bfec16 	blt	zero,r2,802d4d0 <m_copy+0x54>
 802d520:	00000106 	br	802d528 <m_copy+0xac>
         break;
 802d524:	0001883a 	nop
   }

   head = tail = NULL;
 802d528:	e03ffd15 	stw	zero,-12(fp)
 802d52c:	e0bffd17 	ldw	r2,-12(fp)
 802d530:	e0bffe15 	stw	r2,-8(fp)

   while (len > 0)
 802d534:	00007806 	br	802d718 <m_copy+0x29c>
   {
      if (m == NULL) /* at end of queue? */
 802d538:	e0bffb17 	ldw	r2,-20(fp)
 802d53c:	1000051e 	bne	r2,zero,802d554 <m_copy+0xd8>
      {
         panic("m_copy: bad len");
 802d540:	01020174 	movhi	r4,2053
 802d544:	210bec04 	addi	r4,r4,12208
 802d548:	8027fe00 	call	8027fe0 <panic>
         return NULL;
 802d54c:	0005883a 	mov	r2,zero
 802d550:	00007b06 	br	802d740 <m_copy+0x2c4>
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
 802d554:	e0bffb17 	ldw	r2,-20(fp)
 802d558:	10c00217 	ldw	r3,8(r2)
 802d55c:	e0bffa17 	ldw	r2,-24(fp)
 802d560:	1885c83a 	sub	r2,r3,r2
 802d564:	1007883a 	mov	r3,r2
 802d568:	e0bff917 	ldw	r2,-28(fp)
 802d56c:	1880010e 	bge	r3,r2,802d574 <m_copy+0xf8>
 802d570:	1805883a 	mov	r2,r3
 802d574:	e0bffc15 	stw	r2,-16(fp)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
 802d578:	e0bffa17 	ldw	r2,-24(fp)
 802d57c:	108000cc 	andi	r2,r2,3
 802d580:	1000051e 	bne	r2,zero,802d598 <m_copy+0x11c>
          (m->pkt->inuse != 1))
 802d584:	e0bffb17 	ldw	r2,-20(fp)
 802d588:	10800117 	ldw	r2,4(r2)
 802d58c:	10800917 	ldw	r2,36(r2)
      if ((off & (ALIGN_TYPE - 1)) ||
 802d590:	10800060 	cmpeqi	r2,r2,1
 802d594:	1000211e 	bne	r2,zero,802d61c <m_copy+0x1a0>
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
 802d598:	e0bffb17 	ldw	r2,-20(fp)
 802d59c:	10800817 	ldw	r2,32(r2)
 802d5a0:	e17ffc17 	ldw	r5,-16(fp)
 802d5a4:	1009883a 	mov	r4,r2
 802d5a8:	802d1a80 	call	802d1a8 <m_getnbuf>
 802d5ac:	e0bfff15 	stw	r2,-4(fp)
 802d5b0:	e0bfff17 	ldw	r2,-4(fp)
 802d5b4:	10005c26 	beq	r2,zero,802d728 <m_copy+0x2ac>
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
 802d5b8:	e0bfff17 	ldw	r2,-4(fp)
 802d5bc:	11000317 	ldw	r4,12(r2)
 802d5c0:	e0bffb17 	ldw	r2,-20(fp)
 802d5c4:	10c00317 	ldw	r3,12(r2)
 802d5c8:	e0bffa17 	ldw	r2,-24(fp)
 802d5cc:	1885883a 	add	r2,r3,r2
 802d5d0:	e0fffc17 	ldw	r3,-16(fp)
 802d5d4:	180d883a 	mov	r6,r3
 802d5d8:	100b883a 	mov	r5,r2
 802d5dc:	8002ea40 	call	8002ea4 <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
 802d5e0:	e0fffc17 	ldw	r3,-16(fp)
 802d5e4:	e0bfff17 	ldw	r2,-4(fp)
 802d5e8:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mcopies++;
 802d5ec:	008201b4 	movhi	r2,2054
 802d5f0:	10bc7817 	ldw	r2,-3616(r2)
 802d5f4:	10c00044 	addi	r3,r2,1
 802d5f8:	008201b4 	movhi	r2,2054
 802d5fc:	10fc7815 	stw	r3,-3616(r2)
         tcpstat.tcps_mcopiedbytes += tocopy;
 802d600:	008201b4 	movhi	r2,2054
 802d604:	10fc7a17 	ldw	r3,-3608(r2)
 802d608:	e0bffc17 	ldw	r2,-16(fp)
 802d60c:	1887883a 	add	r3,r3,r2
 802d610:	008201b4 	movhi	r2,2054
 802d614:	10fc7a15 	stw	r3,-3608(r2)
 802d618:	00002d06 	br	802d6d0 <m_copy+0x254>
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
 802d61c:	e0bffb17 	ldw	r2,-20(fp)
 802d620:	10800817 	ldw	r2,32(r2)
 802d624:	000b883a 	mov	r5,zero
 802d628:	1009883a 	mov	r4,r2
 802d62c:	802d1a80 	call	802d1a8 <m_getnbuf>
 802d630:	e0bfff15 	stw	r2,-4(fp)
 802d634:	e0bfff17 	ldw	r2,-4(fp)
 802d638:	10003d26 	beq	r2,zero,802d730 <m_copy+0x2b4>
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 802d63c:	e0bffb17 	ldw	r2,-20(fp)
 802d640:	10800117 	ldw	r2,4(r2)
 802d644:	10c00917 	ldw	r3,36(r2)
 802d648:	18c00044 	addi	r3,r3,1
 802d64c:	10c00915 	stw	r3,36(r2)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
 802d650:	e0bffb17 	ldw	r2,-20(fp)
 802d654:	10c00117 	ldw	r3,4(r2)
 802d658:	e0bfff17 	ldw	r2,-4(fp)
 802d65c:	10c00115 	stw	r3,4(r2)
         nb->m_base = m->m_base;
 802d660:	e0bffb17 	ldw	r2,-20(fp)
 802d664:	10c00417 	ldw	r3,16(r2)
 802d668:	e0bfff17 	ldw	r2,-4(fp)
 802d66c:	10c00415 	stw	r3,16(r2)
         nb->m_memsz = m->m_memsz;
 802d670:	e0bffb17 	ldw	r2,-20(fp)
 802d674:	10c00517 	ldw	r3,20(r2)
 802d678:	e0bfff17 	ldw	r2,-4(fp)
 802d67c:	10c00515 	stw	r3,20(r2)
         nb->m_data = m->m_data + off;
 802d680:	e0bffb17 	ldw	r2,-20(fp)
 802d684:	10c00317 	ldw	r3,12(r2)
 802d688:	e0bffa17 	ldw	r2,-24(fp)
 802d68c:	1887883a 	add	r3,r3,r2
 802d690:	e0bfff17 	ldw	r2,-4(fp)
 802d694:	10c00315 	stw	r3,12(r2)
         nb->m_len = tocopy;
 802d698:	e0fffc17 	ldw	r3,-16(fp)
 802d69c:	e0bfff17 	ldw	r2,-4(fp)
 802d6a0:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mclones++;
 802d6a4:	008201b4 	movhi	r2,2054
 802d6a8:	10bc7917 	ldw	r2,-3612(r2)
 802d6ac:	10c00044 	addi	r3,r2,1
 802d6b0:	008201b4 	movhi	r2,2054
 802d6b4:	10fc7915 	stw	r3,-3612(r2)
         tcpstat.tcps_mclonedbytes += tocopy;
 802d6b8:	008201b4 	movhi	r2,2054
 802d6bc:	10fc7b17 	ldw	r3,-3604(r2)
 802d6c0:	e0bffc17 	ldw	r2,-16(fp)
 802d6c4:	1887883a 	add	r3,r3,r2
 802d6c8:	008201b4 	movhi	r2,2054
 802d6cc:	10fc7b15 	stw	r3,-3604(r2)
      }

      len -= tocopy;
 802d6d0:	e0fff917 	ldw	r3,-28(fp)
 802d6d4:	e0bffc17 	ldw	r2,-16(fp)
 802d6d8:	1885c83a 	sub	r2,r3,r2
 802d6dc:	e0bff915 	stw	r2,-28(fp)
      off = 0;
 802d6e0:	e03ffa15 	stw	zero,-24(fp)
      if (tail)      /* head & tail are set by first pass thru loop */
 802d6e4:	e0bffd17 	ldw	r2,-12(fp)
 802d6e8:	10000426 	beq	r2,zero,802d6fc <m_copy+0x280>
         tail->m_next = nb;
 802d6ec:	e0bffd17 	ldw	r2,-12(fp)
 802d6f0:	e0ffff17 	ldw	r3,-4(fp)
 802d6f4:	10c00615 	stw	r3,24(r2)
 802d6f8:	00000206 	br	802d704 <m_copy+0x288>
      else
         head = nb;
 802d6fc:	e0bfff17 	ldw	r2,-4(fp)
 802d700:	e0bffe15 	stw	r2,-8(fp)
      tail = nb;     /* always make new mbuf the tail */
 802d704:	e0bfff17 	ldw	r2,-4(fp)
 802d708:	e0bffd15 	stw	r2,-12(fp)
      m = m->m_next;
 802d70c:	e0bffb17 	ldw	r2,-20(fp)
 802d710:	10800617 	ldw	r2,24(r2)
 802d714:	e0bffb15 	stw	r2,-20(fp)
   while (len > 0)
 802d718:	e0bff917 	ldw	r2,-28(fp)
 802d71c:	00bf8616 	blt	zero,r2,802d538 <m_copy+0xbc>

   }

   return head;
 802d720:	e0bffe17 	ldw	r2,-8(fp)
 802d724:	00000606 	br	802d740 <m_copy+0x2c4>
            goto nospace;
 802d728:	0001883a 	nop
 802d72c:	00000106 	br	802d734 <m_copy+0x2b8>
            goto nospace;
 802d730:	0001883a 	nop

nospace:
   m_freem (head);
 802d734:	e13ffe17 	ldw	r4,-8(fp)
 802d738:	802d4340 	call	802d434 <m_freem>
   return NULL;
 802d73c:	0005883a 	mov	r2,zero
}
 802d740:	e037883a 	mov	sp,fp
 802d744:	dfc00117 	ldw	ra,4(sp)
 802d748:	df000017 	ldw	fp,0(sp)
 802d74c:	dec00204 	addi	sp,sp,8
 802d750:	f800283a 	ret

0802d754 <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
 802d754:	defffb04 	addi	sp,sp,-20
 802d758:	df000415 	stw	fp,16(sp)
 802d75c:	df000404 	addi	fp,sp,16
 802d760:	e13ffd15 	stw	r4,-12(fp)
 802d764:	e17ffc15 	stw	r5,-16(fp)
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
 802d768:	e0bffd17 	ldw	r2,-12(fp)
 802d76c:	e0bfff15 	stw	r2,-4(fp)
 802d770:	e0bfff17 	ldw	r2,-4(fp)
 802d774:	10006226 	beq	r2,zero,802d900 <m_adj+0x1ac>
      return;

   if (len >= 0) 
 802d778:	e0bffc17 	ldw	r2,-16(fp)
 802d77c:	10002216 	blt	r2,zero,802d808 <m_adj+0xb4>
   {
      while (m != NULL && len > 0) 
 802d780:	00001c06 	br	802d7f4 <m_adj+0xa0>
      {
         if (m->m_len <= (unsigned)len)
 802d784:	e0bfff17 	ldw	r2,-4(fp)
 802d788:	10800217 	ldw	r2,8(r2)
 802d78c:	e0fffc17 	ldw	r3,-16(fp)
 802d790:	18800b36 	bltu	r3,r2,802d7c0 <m_adj+0x6c>
         {
            len -= m->m_len;
 802d794:	e0fffc17 	ldw	r3,-16(fp)
 802d798:	e0bfff17 	ldw	r2,-4(fp)
 802d79c:	10800217 	ldw	r2,8(r2)
 802d7a0:	1885c83a 	sub	r2,r3,r2
 802d7a4:	e0bffc15 	stw	r2,-16(fp)
            m->m_len = 0;
 802d7a8:	e0bfff17 	ldw	r2,-4(fp)
 802d7ac:	10000215 	stw	zero,8(r2)
            m = m->m_next;
 802d7b0:	e0bfff17 	ldw	r2,-4(fp)
 802d7b4:	10800617 	ldw	r2,24(r2)
 802d7b8:	e0bfff15 	stw	r2,-4(fp)
 802d7bc:	00000d06 	br	802d7f4 <m_adj+0xa0>
         }
         else
         {
            m->m_len -= len;
 802d7c0:	e0bfff17 	ldw	r2,-4(fp)
 802d7c4:	10c00217 	ldw	r3,8(r2)
 802d7c8:	e0bffc17 	ldw	r2,-16(fp)
 802d7cc:	1887c83a 	sub	r3,r3,r2
 802d7d0:	e0bfff17 	ldw	r2,-4(fp)
 802d7d4:	10c00215 	stw	r3,8(r2)
            m->m_data += len;
 802d7d8:	e0bfff17 	ldw	r2,-4(fp)
 802d7dc:	10c00317 	ldw	r3,12(r2)
 802d7e0:	e0bffc17 	ldw	r2,-16(fp)
 802d7e4:	1887883a 	add	r3,r3,r2
 802d7e8:	e0bfff17 	ldw	r2,-4(fp)
 802d7ec:	10c00315 	stw	r3,12(r2)
            break;
 802d7f0:	00004406 	br	802d904 <m_adj+0x1b0>
      while (m != NULL && len > 0) 
 802d7f4:	e0bfff17 	ldw	r2,-4(fp)
 802d7f8:	10004226 	beq	r2,zero,802d904 <m_adj+0x1b0>
 802d7fc:	e0bffc17 	ldw	r2,-16(fp)
 802d800:	00bfe016 	blt	zero,r2,802d784 <m_adj+0x30>
 802d804:	00003f06 	br	802d904 <m_adj+0x1b0>
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
 802d808:	e0bffc17 	ldw	r2,-16(fp)
 802d80c:	0085c83a 	sub	r2,zero,r2
 802d810:	e0bffc15 	stw	r2,-16(fp)
      count = 0;
 802d814:	e03ffe15 	stw	zero,-8(fp)
      for (;;) 
      {
         count += m->m_len;
 802d818:	e0bfff17 	ldw	r2,-4(fp)
 802d81c:	10c00217 	ldw	r3,8(r2)
 802d820:	e0bffe17 	ldw	r2,-8(fp)
 802d824:	1885883a 	add	r2,r3,r2
 802d828:	e0bffe15 	stw	r2,-8(fp)
         if (m->m_next == (struct mbuf *)0)
 802d82c:	e0bfff17 	ldw	r2,-4(fp)
 802d830:	10800617 	ldw	r2,24(r2)
 802d834:	10000426 	beq	r2,zero,802d848 <m_adj+0xf4>
            break;
         m = m->m_next;
 802d838:	e0bfff17 	ldw	r2,-4(fp)
 802d83c:	10800617 	ldw	r2,24(r2)
 802d840:	e0bfff15 	stw	r2,-4(fp)
         count += m->m_len;
 802d844:	003ff406 	br	802d818 <m_adj+0xc4>
            break;
 802d848:	0001883a 	nop
      }
      if (m->m_len >= (unsigned)len)
 802d84c:	e0bfff17 	ldw	r2,-4(fp)
 802d850:	10c00217 	ldw	r3,8(r2)
 802d854:	e0bffc17 	ldw	r2,-16(fp)
 802d858:	18800736 	bltu	r3,r2,802d878 <m_adj+0x124>
      {
         m->m_len -= len;
 802d85c:	e0bfff17 	ldw	r2,-4(fp)
 802d860:	10c00217 	ldw	r3,8(r2)
 802d864:	e0bffc17 	ldw	r2,-16(fp)
 802d868:	1887c83a 	sub	r3,r3,r2
 802d86c:	e0bfff17 	ldw	r2,-4(fp)
 802d870:	10c00215 	stw	r3,8(r2)
         return;
 802d874:	00002306 	br	802d904 <m_adj+0x1b0>
      }
      count -= len;
 802d878:	e0fffe17 	ldw	r3,-8(fp)
 802d87c:	e0bffc17 	ldw	r2,-16(fp)
 802d880:	1885c83a 	sub	r2,r3,r2
 802d884:	e0bffe15 	stw	r2,-8(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 802d888:	e0bffd17 	ldw	r2,-12(fp)
 802d88c:	e0bfff15 	stw	r2,-4(fp)
 802d890:	00001006 	br	802d8d4 <m_adj+0x180>
      {
         if (m->m_len >= (unsigned)count)
 802d894:	e0bfff17 	ldw	r2,-4(fp)
 802d898:	10c00217 	ldw	r3,8(r2)
 802d89c:	e0bffe17 	ldw	r2,-8(fp)
 802d8a0:	18800436 	bltu	r3,r2,802d8b4 <m_adj+0x160>
         {
            m->m_len = count;
 802d8a4:	e0fffe17 	ldw	r3,-8(fp)
 802d8a8:	e0bfff17 	ldw	r2,-4(fp)
 802d8ac:	10c00215 	stw	r3,8(r2)
            break;
 802d8b0:	00000a06 	br	802d8dc <m_adj+0x188>
         }
         count -= m->m_len;
 802d8b4:	e0fffe17 	ldw	r3,-8(fp)
 802d8b8:	e0bfff17 	ldw	r2,-4(fp)
 802d8bc:	10800217 	ldw	r2,8(r2)
 802d8c0:	1885c83a 	sub	r2,r3,r2
 802d8c4:	e0bffe15 	stw	r2,-8(fp)
      for (m = mp; m; m = m->m_next)
 802d8c8:	e0bfff17 	ldw	r2,-4(fp)
 802d8cc:	10800617 	ldw	r2,24(r2)
 802d8d0:	e0bfff15 	stw	r2,-4(fp)
 802d8d4:	e0bfff17 	ldw	r2,-4(fp)
 802d8d8:	103fee1e 	bne	r2,zero,802d894 <m_adj+0x140>
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 802d8dc:	00000206 	br	802d8e8 <m_adj+0x194>
         m->m_len = 0;
 802d8e0:	e0bfff17 	ldw	r2,-4(fp)
 802d8e4:	10000215 	stw	zero,8(r2)
      while ((m = m->m_next) != (struct mbuf *)NULL)
 802d8e8:	e0bfff17 	ldw	r2,-4(fp)
 802d8ec:	10800617 	ldw	r2,24(r2)
 802d8f0:	e0bfff15 	stw	r2,-4(fp)
 802d8f4:	e0bfff17 	ldw	r2,-4(fp)
 802d8f8:	103ff91e 	bne	r2,zero,802d8e0 <m_adj+0x18c>
 802d8fc:	00000106 	br	802d904 <m_adj+0x1b0>
      return;
 802d900:	0001883a 	nop
   }
}
 802d904:	e037883a 	mov	sp,fp
 802d908:	df000017 	ldw	fp,0(sp)
 802d90c:	dec00104 	addi	sp,sp,4
 802d910:	f800283a 	ret

0802d914 <mbuf_len>:
 * RETURNS: 
 */

int
mbuf_len (struct mbuf * m)
{
 802d914:	defffd04 	addi	sp,sp,-12
 802d918:	df000215 	stw	fp,8(sp)
 802d91c:	df000204 	addi	fp,sp,8
 802d920:	e13ffe15 	stw	r4,-8(fp)
   int   len   =  0;
 802d924:	e03fff15 	stw	zero,-4(fp)

   while (m)
 802d928:	00000806 	br	802d94c <mbuf_len+0x38>
   {
      len += m->m_len;
 802d92c:	e0bffe17 	ldw	r2,-8(fp)
 802d930:	10c00217 	ldw	r3,8(r2)
 802d934:	e0bfff17 	ldw	r2,-4(fp)
 802d938:	1885883a 	add	r2,r3,r2
 802d93c:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
 802d940:	e0bffe17 	ldw	r2,-8(fp)
 802d944:	10800617 	ldw	r2,24(r2)
 802d948:	e0bffe15 	stw	r2,-8(fp)
   while (m)
 802d94c:	e0bffe17 	ldw	r2,-8(fp)
 802d950:	103ff61e 	bne	r2,zero,802d92c <mbuf_len+0x18>
   }
   return len;
 802d954:	e0bfff17 	ldw	r2,-4(fp)
}
 802d958:	e037883a 	mov	sp,fp
 802d95c:	df000017 	ldw	fp,0(sp)
 802d960:	dec00104 	addi	sp,sp,4
 802d964:	f800283a 	ret

0802d968 <dtom>:
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
 802d968:	defffb04 	addi	sp,sp,-20
 802d96c:	dfc00415 	stw	ra,16(sp)
 802d970:	df000315 	stw	fp,12(sp)
 802d974:	df000304 	addi	fp,sp,12
 802d978:	e13ffd15 	stw	r4,-12(fp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 802d97c:	008201b4 	movhi	r2,2054
 802d980:	10bc2b17 	ldw	r2,-3924(r2)
 802d984:	e0bfff15 	stw	r2,-4(fp)
 802d988:	00001206 	br	802d9d4 <dtom+0x6c>
   {
      m = (struct mbuf *)qptr;
 802d98c:	e0bfff17 	ldw	r2,-4(fp)
 802d990:	e0bffe15 	stw	r2,-8(fp)

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
 802d994:	e0bffe17 	ldw	r2,-8(fp)
 802d998:	10800417 	ldw	r2,16(r2)
 802d99c:	e0fffd17 	ldw	r3,-12(fp)
 802d9a0:	18800936 	bltu	r3,r2,802d9c8 <dtom+0x60>
 802d9a4:	e0bffe17 	ldw	r2,-8(fp)
 802d9a8:	10c00417 	ldw	r3,16(r2)
 802d9ac:	e0bffe17 	ldw	r2,-8(fp)
 802d9b0:	10800517 	ldw	r2,20(r2)
 802d9b4:	1885883a 	add	r2,r3,r2
 802d9b8:	e0fffd17 	ldw	r3,-12(fp)
 802d9bc:	1880022e 	bgeu	r3,r2,802d9c8 <dtom+0x60>
         return (struct mbuf *)qptr;
 802d9c0:	e0bfff17 	ldw	r2,-4(fp)
 802d9c4:	00000906 	br	802d9ec <dtom+0x84>
   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 802d9c8:	e0bfff17 	ldw	r2,-4(fp)
 802d9cc:	10800017 	ldw	r2,0(r2)
 802d9d0:	e0bfff15 	stw	r2,-4(fp)
 802d9d4:	e0bfff17 	ldw	r2,-4(fp)
 802d9d8:	103fec1e 	bne	r2,zero,802d98c <dtom+0x24>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
 802d9dc:	01020174 	movhi	r4,2053
 802d9e0:	210bf004 	addi	r4,r4,12224
 802d9e4:	8027fe00 	call	8027fe0 <panic>
   return NULL;
 802d9e8:	0005883a 	mov	r2,zero
}
 802d9ec:	e037883a 	mov	sp,fp
 802d9f0:	dfc00117 	ldw	ra,4(sp)
 802d9f4:	df000017 	ldw	fp,0(sp)
 802d9f8:	dec00204 	addi	sp,sp,8
 802d9fc:	f800283a 	ret

0802da00 <remque>:
};


void
remque (void * arg)
{
 802da00:	defffd04 	addi	sp,sp,-12
 802da04:	df000215 	stw	fp,8(sp)
 802da08:	df000204 	addi	fp,sp,8
 802da0c:	e13ffe15 	stw	r4,-8(fp)
   struct bsdq *  old;

   old = (struct bsdq *)arg;
 802da10:	e0bffe17 	ldw	r2,-8(fp)
 802da14:	e0bfff15 	stw	r2,-4(fp)
   if (!old->prev) return;
 802da18:	e0bfff17 	ldw	r2,-4(fp)
 802da1c:	10800117 	ldw	r2,4(r2)
 802da20:	10000e26 	beq	r2,zero,802da5c <remque+0x5c>
      old->prev->next = old->next;
 802da24:	e0bfff17 	ldw	r2,-4(fp)
 802da28:	10800117 	ldw	r2,4(r2)
 802da2c:	e0ffff17 	ldw	r3,-4(fp)
 802da30:	18c00017 	ldw	r3,0(r3)
 802da34:	10c00015 	stw	r3,0(r2)
   if (old->next)
 802da38:	e0bfff17 	ldw	r2,-4(fp)
 802da3c:	10800017 	ldw	r2,0(r2)
 802da40:	10000726 	beq	r2,zero,802da60 <remque+0x60>
      old->next->prev = old->prev;
 802da44:	e0bfff17 	ldw	r2,-4(fp)
 802da48:	10800017 	ldw	r2,0(r2)
 802da4c:	e0ffff17 	ldw	r3,-4(fp)
 802da50:	18c00117 	ldw	r3,4(r3)
 802da54:	10c00115 	stw	r3,4(r2)
 802da58:	00000106 	br	802da60 <remque+0x60>
   if (!old->prev) return;
 802da5c:	0001883a 	nop
}
 802da60:	e037883a 	mov	sp,fp
 802da64:	df000017 	ldw	fp,0(sp)
 802da68:	dec00104 	addi	sp,sp,4
 802da6c:	f800283a 	ret

0802da70 <insque>:
 * RETURNS: 
 */

void
insque(void * n, void * p)
{
 802da70:	defffb04 	addi	sp,sp,-20
 802da74:	df000415 	stw	fp,16(sp)
 802da78:	df000404 	addi	fp,sp,16
 802da7c:	e13ffd15 	stw	r4,-12(fp)
 802da80:	e17ffc15 	stw	r5,-16(fp)
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
 802da84:	e0bffd17 	ldw	r2,-12(fp)
 802da88:	e0bfff15 	stw	r2,-4(fp)
   prev = (struct bsdq *)p;
 802da8c:	e0bffc17 	ldw	r2,-16(fp)
 802da90:	e0bffe15 	stw	r2,-8(fp)
   newe->next = prev->next;
 802da94:	e0bffe17 	ldw	r2,-8(fp)
 802da98:	10c00017 	ldw	r3,0(r2)
 802da9c:	e0bfff17 	ldw	r2,-4(fp)
 802daa0:	10c00015 	stw	r3,0(r2)
   newe->prev = prev;
 802daa4:	e0bfff17 	ldw	r2,-4(fp)
 802daa8:	e0fffe17 	ldw	r3,-8(fp)
 802daac:	10c00115 	stw	r3,4(r2)
   prev->next = newe;
 802dab0:	e0bffe17 	ldw	r2,-8(fp)
 802dab4:	e0ffff17 	ldw	r3,-4(fp)
 802dab8:	10c00015 	stw	r3,0(r2)
   if (newe->next)
 802dabc:	e0bfff17 	ldw	r2,-4(fp)
 802dac0:	10800017 	ldw	r2,0(r2)
 802dac4:	10000426 	beq	r2,zero,802dad8 <insque+0x68>
      newe->next->prev = newe;
 802dac8:	e0bfff17 	ldw	r2,-4(fp)
 802dacc:	10800017 	ldw	r2,0(r2)
 802dad0:	e0ffff17 	ldw	r3,-4(fp)
 802dad4:	10c00115 	stw	r3,4(r2)
}
 802dad8:	0001883a 	nop
 802dadc:	e037883a 	mov	sp,fp
 802dae0:	df000017 	ldw	fp,0(sp)
 802dae4:	dec00104 	addi	sp,sp,4
 802dae8:	f800283a 	ret

0802daec <nptcp_init>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
 802daec:	defffb04 	addi	sp,sp,-20
 802daf0:	dfc00415 	stw	ra,16(sp)
 802daf4:	df000315 	stw	fp,12(sp)
 802daf8:	df000304 	addi	fp,sp,12
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 802dafc:	d0e03217 	ldw	r3,-32568(gp)
 802db00:	d0a03417 	ldw	r2,-32560(gp)
 802db04:	1885883a 	add	r2,r3,r2
 802db08:	1085883a 	add	r2,r2,r2
 802db0c:	108000c4 	addi	r2,r2,3
 802db10:	e0bffe15 	stw	r2,-8(fp)
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 802db14:	01800504 	movi	r6,20
 802db18:	000b883a 	mov	r5,zero
 802db1c:	010201b4 	movhi	r4,2054
 802db20:	213c1704 	addi	r4,r4,-4004
 802db24:	8002fa40 	call	8002fa4 <memset>
   MEMSET(&mbufq, 0, sizeof(mbufq));
 802db28:	01800504 	movi	r6,20
 802db2c:	000b883a 	mov	r5,zero
 802db30:	010201b4 	movhi	r4,2054
 802db34:	213c2b04 	addi	r4,r4,-3924
 802db38:	8002fa40 	call	8002fa4 <memset>
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
 802db3c:	01800504 	movi	r6,20
 802db40:	000b883a 	mov	r5,zero
 802db44:	010201b4 	movhi	r4,2054
 802db48:	213c3004 	addi	r4,r4,-3904
 802db4c:	8002fa40 	call	8002fa4 <memset>
   for (i = 0; i < (int)bufcount; i++)
 802db50:	e03fff15 	stw	zero,-4(fp)
 802db54:	00001506 	br	802dbac <nptcp_init+0xc0>
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
 802db58:	01000904 	movi	r4,36
 802db5c:	802cf5c0 	call	802cf5c <npalloc>
 802db60:	e0bffd15 	stw	r2,-12(fp)
      if (!m)  /* malloc error, bail out */
 802db64:	e0bffd17 	ldw	r2,-12(fp)
 802db68:	1000031e 	bne	r2,zero,802db78 <nptcp_init+0x8c>
         panic("tcpinit");
 802db6c:	01020174 	movhi	r4,2053
 802db70:	210bf204 	addi	r4,r4,12232
 802db74:	8027fe00 	call	8027fe0 <panic>
      m->m_type = MT_FREE;
 802db78:	e0bffd17 	ldw	r2,-12(fp)
 802db7c:	10000815 	stw	zero,32(r2)
      m->m_len = 0;
 802db80:	e0bffd17 	ldw	r2,-12(fp)
 802db84:	10000215 	stw	zero,8(r2)
      m->m_data = NULL;
 802db88:	e0bffd17 	ldw	r2,-12(fp)
 802db8c:	10000315 	stw	zero,12(r2)
      putq(&mfreeq, (qp)m);
 802db90:	e17ffd17 	ldw	r5,-12(fp)
 802db94:	010201b4 	movhi	r4,2054
 802db98:	213c3004 	addi	r4,r4,-3904
 802db9c:	802bde00 	call	802bde0 <putq>
   for (i = 0; i < (int)bufcount; i++)
 802dba0:	e0bfff17 	ldw	r2,-4(fp)
 802dba4:	10800044 	addi	r2,r2,1
 802dba8:	e0bfff15 	stw	r2,-4(fp)
 802dbac:	e0bffe17 	ldw	r2,-8(fp)
 802dbb0:	e0ffff17 	ldw	r3,-4(fp)
 802dbb4:	18bfe816 	blt	r3,r2,802db58 <nptcp_init+0x6c>
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
 802dbb8:	e0fffe17 	ldw	r3,-8(fp)
 802dbbc:	008201b4 	movhi	r2,2054
 802dbc0:	10fc3415 	stw	r3,-3888(r2)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
 802dbc4:	80382240 	call	8038224 <tcp_init>

#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
 802dbc8:	0005883a 	mov	r2,zero
}
 802dbcc:	e037883a 	mov	sp,fp
 802dbd0:	dfc00117 	ldw	ra,4(sp)
 802dbd4:	df000017 	ldw	fp,0(sp)
 802dbd8:	dec00204 	addi	sp,sp,8
 802dbdc:	f800283a 	ret

0802dbe0 <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 802dbe0:	defff904 	addi	sp,sp,-28
 802dbe4:	dfc00615 	stw	ra,24(sp)
 802dbe8:	df000515 	stw	fp,20(sp)
 802dbec:	df000504 	addi	fp,sp,20
 802dbf0:	e13ffb15 	stw	r4,-20(fp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
 802dbf4:	e0bffb17 	ldw	r2,-20(fp)
 802dbf8:	10800317 	ldw	r2,12(r2)
 802dbfc:	e0bfff15 	stw	r2,-4(fp)
   len = ntohs(bip->ip_len);  /* get length in local endian */
 802dc00:	e0bfff17 	ldw	r2,-4(fp)
 802dc04:	1080008b 	ldhu	r2,2(r2)
 802dc08:	10bfffcc 	andi	r2,r2,65535
 802dc0c:	1004d23a 	srli	r2,r2,8
 802dc10:	1007883a 	mov	r3,r2
 802dc14:	e0bfff17 	ldw	r2,-4(fp)
 802dc18:	1080008b 	ldhu	r2,2(r2)
 802dc1c:	10bfffcc 	andi	r2,r2,65535
 802dc20:	1004923a 	slli	r2,r2,8
 802dc24:	1884b03a 	or	r2,r3,r2
 802dc28:	e0bffe8d 	sth	r2,-6(fp)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
 802dc2c:	e0bfff17 	ldw	r2,-4(fp)
 802dc30:	10800003 	ldbu	r2,0(r2)
 802dc34:	10803fcc 	andi	r2,r2,255
 802dc38:	100490ba 	slli	r2,r2,2
 802dc3c:	10800f0c 	andi	r2,r2,60
 802dc40:	e0ffff17 	ldw	r3,-4(fp)
 802dc44:	1885883a 	add	r2,r3,r2
 802dc48:	e0bffd15 	stw	r2,-12(fp)
   if (tcp_cksum(bip) != tcpp->th_sum)
 802dc4c:	e13fff17 	ldw	r4,-4(fp)
 802dc50:	80468d40 	call	80468d4 <tcp_cksum>
 802dc54:	1007883a 	mov	r3,r2
 802dc58:	e0bffd17 	ldw	r2,-12(fp)
 802dc5c:	1080040b 	ldhu	r2,16(r2)
 802dc60:	18ffffcc 	andi	r3,r3,65535
 802dc64:	10bfffcc 	andi	r2,r2,65535
 802dc68:	18801226 	beq	r3,r2,802dcb4 <tcp_rcv+0xd4>
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 802dc6c:	008201b4 	movhi	r2,2054
 802dc70:	10bc2917 	ldw	r2,-3932(r2)
 802dc74:	10c00044 	addi	r3,r2,1
 802dc78:	008201b4 	movhi	r2,2054
 802dc7c:	10fc2915 	stw	r3,-3932(r2)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 802dc80:	008201b4 	movhi	r2,2054
 802dc84:	10bc6617 	ldw	r2,-3688(r2)
 802dc88:	10c00044 	addi	r3,r2,1
 802dc8c:	008201b4 	movhi	r2,2054
 802dc90:	10fc6615 	stw	r3,-3688(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 802dc94:	01000084 	movi	r4,2
 802dc98:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
 802dc9c:	e13ffb17 	ldw	r4,-20(fp)
 802dca0:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802dca4:	01000084 	movi	r4,2
 802dca8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 802dcac:	00bff804 	movi	r2,-32
 802dcb0:	00003306 	br	802dd80 <tcp_rcv+0x1a0>
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
 802dcb4:	000b883a 	mov	r5,zero
 802dcb8:	01000044 	movi	r4,1
 802dcbc:	802d1a80 	call	802d1a8 <m_getnbuf>
 802dcc0:	e0bffc15 	stw	r2,-16(fp)
   if (!m_in){
 802dcc4:	e0bffc17 	ldw	r2,-16(fp)
 802dcc8:	1000081e 	bne	r2,zero,802dcec <tcp_rcv+0x10c>
      LOCK_NET_RESOURCE(FREEQ_RESID);
 802dccc:	01000084 	movi	r4,2
 802dcd0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 802dcd4:	e13ffb17 	ldw	r4,-20(fp)
 802dcd8:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802dcdc:	01000084 	movi	r4,2
 802dce0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;  
 802dce4:	00bffa84 	movi	r2,-22
 802dce8:	00002506 	br	802dd80 <tcp_rcv+0x1a0>
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
 802dcec:	e0bfff17 	ldw	r2,-4(fp)
 802dcf0:	10800003 	ldbu	r2,0(r2)
 802dcf4:	10803fcc 	andi	r2,r2,255
 802dcf8:	100490ba 	slli	r2,r2,2
 802dcfc:	10800f0c 	andi	r2,r2,60
 802dd00:	1007883a 	mov	r3,r2
 802dd04:	e0bffe8b 	ldhu	r2,-6(fp)
 802dd08:	10c5c83a 	sub	r2,r2,r3
 802dd0c:	e0bffe8d 	sth	r2,-6(fp)
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 802dd10:	e0bfff17 	ldw	r2,-4(fp)
 802dd14:	e0fffe8b 	ldhu	r3,-6(fp)
 802dd18:	10c0008d 	sth	r3,2(r2)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
 802dd1c:	e0bffc17 	ldw	r2,-16(fp)
 802dd20:	e0fffb17 	ldw	r3,-20(fp)
 802dd24:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
 802dd28:	e0bffb17 	ldw	r2,-20(fp)
 802dd2c:	10c00317 	ldw	r3,12(r2)
 802dd30:	e0bffc17 	ldw	r2,-16(fp)
 802dd34:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 802dd38:	e0bffb17 	ldw	r2,-20(fp)
 802dd3c:	10c00417 	ldw	r3,16(r2)
 802dd40:	e0bffc17 	ldw	r2,-16(fp)
 802dd44:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;     /* ??? */
 802dd48:	e0bffb17 	ldw	r2,-20(fp)
 802dd4c:	10c00117 	ldw	r3,4(r2)
 802dd50:	e0bffc17 	ldw	r2,-16(fp)
 802dd54:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
 802dd58:	e0bffb17 	ldw	r2,-20(fp)
 802dd5c:	10c00217 	ldw	r3,8(r2)
 802dd60:	e0bffc17 	ldw	r2,-16(fp)
 802dd64:	10c00515 	stw	r3,20(r2)

   tcp_input(m_in, pkt->net);
 802dd68:	e0bffb17 	ldw	r2,-20(fp)
 802dd6c:	10800617 	ldw	r2,24(r2)
 802dd70:	100b883a 	mov	r5,r2
 802dd74:	e13ffc17 	ldw	r4,-16(fp)
 802dd78:	803487c0 	call	803487c <tcp_input>

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
 802dd7c:	0005883a 	mov	r2,zero
}
 802dd80:	e037883a 	mov	sp,fp
 802dd84:	dfc00117 	ldw	ra,4(sp)
 802dd88:	df000017 	ldw	fp,0(sp)
 802dd8c:	dec00204 	addi	sp,sp,8
 802dd90:	f800283a 	ret

0802dd94 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
 802dd94:	defff404 	addi	sp,sp,-48
 802dd98:	dfc00b15 	stw	ra,44(sp)
 802dd9c:	df000a15 	stw	fp,40(sp)
 802dda0:	df000a04 	addi	fp,sp,40
 802dda4:	e13ff715 	stw	r4,-36(fp)
 802dda8:	e17ff615 	stw	r5,-40(fp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
 802ddac:	e0bff717 	ldw	r2,-36(fp)
 802ddb0:	10800617 	ldw	r2,24(r2)
 802ddb4:	10010226 	beq	r2,zero,802e1c0 <ip_output+0x42c>
   {
      m1 = data;
 802ddb8:	e0bff717 	ldw	r2,-36(fp)
 802ddbc:	e0bfff15 	stw	r2,-4(fp)
      m2 = data->m_next;
 802ddc0:	e0bff717 	ldw	r2,-36(fp)
 802ddc4:	10800617 	ldw	r2,24(r2)
 802ddc8:	e0bffe15 	stw	r2,-8(fp)

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 802ddcc:	00003306 	br	802de9c <ip_output+0x108>
      {
         pkt = m1->pkt;
 802ddd0:	e0bfff17 	ldw	r2,-4(fp)
 802ddd4:	10800117 	ldw	r2,4(r2)
 802ddd8:	e0bffb15 	stw	r2,-20(fp)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 802dddc:	e0bffb17 	ldw	r2,-20(fp)
 802dde0:	10c00117 	ldw	r3,4(r2)
 802dde4:	e0bffb17 	ldw	r2,-20(fp)
 802dde8:	10800217 	ldw	r2,8(r2)
 802ddec:	1885883a 	add	r2,r3,r2
             (m1->m_data + m1->m_len + m2->m_len))
 802ddf0:	e0ffff17 	ldw	r3,-4(fp)
 802ddf4:	19000317 	ldw	r4,12(r3)
 802ddf8:	e0ffff17 	ldw	r3,-4(fp)
 802ddfc:	19400217 	ldw	r5,8(r3)
 802de00:	e0fffe17 	ldw	r3,-8(fp)
 802de04:	18c00217 	ldw	r3,8(r3)
 802de08:	28c7883a 	add	r3,r5,r3
 802de0c:	20c7883a 	add	r3,r4,r3
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 802de10:	1880292e 	bgeu	r3,r2,802deb8 <ip_output+0x124>
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 802de14:	e0bfff17 	ldw	r2,-4(fp)
 802de18:	10c00317 	ldw	r3,12(r2)
 802de1c:	e0bfff17 	ldw	r2,-4(fp)
 802de20:	10800217 	ldw	r2,8(r2)
 802de24:	1887883a 	add	r3,r3,r2
 802de28:	e0bffe17 	ldw	r2,-8(fp)
 802de2c:	11000317 	ldw	r4,12(r2)
 802de30:	e0bffe17 	ldw	r2,-8(fp)
 802de34:	10800217 	ldw	r2,8(r2)
 802de38:	100d883a 	mov	r6,r2
 802de3c:	200b883a 	mov	r5,r4
 802de40:	1809883a 	mov	r4,r3
 802de44:	8002ea40 	call	8002ea4 <memcpy>
            m1->m_len += m2->m_len;
 802de48:	e0bfff17 	ldw	r2,-4(fp)
 802de4c:	10c00217 	ldw	r3,8(r2)
 802de50:	e0bffe17 	ldw	r2,-8(fp)
 802de54:	10800217 	ldw	r2,8(r2)
 802de58:	1887883a 	add	r3,r3,r2
 802de5c:	e0bfff17 	ldw	r2,-4(fp)
 802de60:	10c00215 	stw	r3,8(r2)
            m1->m_next = m2->m_next;
 802de64:	e0bffe17 	ldw	r2,-8(fp)
 802de68:	10c00617 	ldw	r3,24(r2)
 802de6c:	e0bfff17 	ldw	r2,-4(fp)
 802de70:	10c00615 	stw	r3,24(r2)
            m_free(m2);    /* free this m2.... */
 802de74:	e13ffe17 	ldw	r4,-8(fp)
 802de78:	802d3300 	call	802d330 <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
 802de7c:	e0bfff17 	ldw	r2,-4(fp)
 802de80:	10800617 	ldw	r2,24(r2)
 802de84:	e0bffe15 	stw	r2,-8(fp)
            tcpstat.tcps_oappends++;
 802de88:	008201b4 	movhi	r2,2054
 802de8c:	10bc7d17 	ldw	r2,-3596(r2)
 802de90:	10c00044 	addi	r3,r2,1
 802de94:	008201b4 	movhi	r2,2054
 802de98:	10fc7d15 	stw	r3,-3596(r2)
      while (m2 && (m2->m_len < 10))
 802de9c:	e0bffe17 	ldw	r2,-8(fp)
 802dea0:	10005726 	beq	r2,zero,802e000 <ip_output+0x26c>
 802dea4:	e0bffe17 	ldw	r2,-8(fp)
 802dea8:	10800217 	ldw	r2,8(r2)
 802deac:	108002b0 	cmpltui	r2,r2,10
 802deb0:	103fc71e 	bne	r2,zero,802ddd0 <ip_output+0x3c>
 802deb4:	00005206 	br	802e000 <ip_output+0x26c>
         }
         else     /* if won't fit, fall to next copy */
            break;
 802deb8:	0001883a 	nop
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 802debc:	00005006 	br	802e000 <ip_output+0x26c>
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 802dec0:	e0bffe17 	ldw	r2,-8(fp)
 802dec4:	10c00317 	ldw	r3,12(r2)
 802dec8:	e0bffe17 	ldw	r2,-8(fp)
 802decc:	10800117 	ldw	r2,4(r2)
 802ded0:	10800117 	ldw	r2,4(r2)
 802ded4:	1885c83a 	sub	r2,r3,r2
 802ded8:	e0bffa15 	stw	r2,-24(fp)
         if (e < MaxLnh)
 802dedc:	d0a07c17 	ldw	r2,-32272(gp)
 802dee0:	e0fffa17 	ldw	r3,-24(fp)
 802dee4:	1880090e 	bge	r3,r2,802df0c <ip_output+0x178>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 802dee8:	d0a07c17 	ldw	r2,-32272(gp)
 802deec:	e1bffa17 	ldw	r6,-24(fp)
 802def0:	100b883a 	mov	r5,r2
 802def4:	01020174 	movhi	r4,2053
 802def8:	210bf404 	addi	r4,r4,12240
 802defc:	800325c0 	call	800325c <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
 802df00:	01020174 	movhi	r4,2053
 802df04:	210bfa04 	addi	r4,r4,12264
 802df08:	8027fe00 	call	8027fe0 <panic>
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 802df0c:	e0bfff17 	ldw	r2,-4(fp)
 802df10:	10800217 	ldw	r2,8(r2)
 802df14:	d0e07c17 	ldw	r3,-32272(gp)
 802df18:	e13ffa17 	ldw	r4,-24(fp)
 802df1c:	20c7c83a 	sub	r3,r4,r3
 802df20:	10c0392e 	bgeu	r2,r3,802e008 <ip_output+0x274>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
 802df24:	e0bfff17 	ldw	r2,-4(fp)
 802df28:	10800217 	ldw	r2,8(r2)
 802df2c:	108000cc 	andi	r2,r2,3
 802df30:	1000351e 	bne	r2,zero,802e008 <ip_output+0x274>
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
 802df34:	e0bffe17 	ldw	r2,-8(fp)
 802df38:	10c00317 	ldw	r3,12(r2)
 802df3c:	e0bffe17 	ldw	r2,-8(fp)
 802df40:	10800117 	ldw	r2,4(r2)
 802df44:	10800117 	ldw	r2,4(r2)
 802df48:	1885c83a 	sub	r2,r3,r2
 802df4c:	10800e18 	cmpnei	r2,r2,56
 802df50:	10002d1e 	bne	r2,zero,802e008 <ip_output+0x274>
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 802df54:	e0bffe17 	ldw	r2,-8(fp)
 802df58:	10c00317 	ldw	r3,12(r2)
 802df5c:	e0bfff17 	ldw	r2,-4(fp)
 802df60:	10800217 	ldw	r2,8(r2)
 802df64:	0085c83a 	sub	r2,zero,r2
 802df68:	1887883a 	add	r3,r3,r2
 802df6c:	e0bfff17 	ldw	r2,-4(fp)
 802df70:	11000317 	ldw	r4,12(r2)
 802df74:	e0bfff17 	ldw	r2,-4(fp)
 802df78:	10800217 	ldw	r2,8(r2)
 802df7c:	100d883a 	mov	r6,r2
 802df80:	200b883a 	mov	r5,r4
 802df84:	1809883a 	mov	r4,r3
 802df88:	8002ea40 	call	8002ea4 <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 802df8c:	e0bffe17 	ldw	r2,-8(fp)
 802df90:	10c00317 	ldw	r3,12(r2)
 802df94:	e0bfff17 	ldw	r2,-4(fp)
 802df98:	10800217 	ldw	r2,8(r2)
 802df9c:	0085c83a 	sub	r2,zero,r2
 802dfa0:	1887883a 	add	r3,r3,r2
 802dfa4:	e0bffe17 	ldw	r2,-8(fp)
 802dfa8:	10c00315 	stw	r3,12(r2)
            m2->m_len += m1->m_len;
 802dfac:	e0bffe17 	ldw	r2,-8(fp)
 802dfb0:	10c00217 	ldw	r3,8(r2)
 802dfb4:	e0bfff17 	ldw	r2,-4(fp)
 802dfb8:	10800217 	ldw	r2,8(r2)
 802dfbc:	1887883a 	add	r3,r3,r2
 802dfc0:	e0bffe17 	ldw	r2,-8(fp)
 802dfc4:	10c00215 	stw	r3,8(r2)
            m_free(m1);    /* free head (copied) mbuf */
 802dfc8:	e13fff17 	ldw	r4,-4(fp)
 802dfcc:	802d3300 	call	802d330 <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
 802dfd0:	e0bffe17 	ldw	r2,-8(fp)
 802dfd4:	e0bfff15 	stw	r2,-4(fp)
 802dfd8:	e0bfff17 	ldw	r2,-4(fp)
 802dfdc:	e0bff715 	stw	r2,-36(fp)
            m2 = m2->m_next;  /* loop to while(m2) test */
 802dfe0:	e0bffe17 	ldw	r2,-8(fp)
 802dfe4:	10800617 	ldw	r2,24(r2)
 802dfe8:	e0bffe15 	stw	r2,-8(fp)
            tcpstat.tcps_oprepends++;
 802dfec:	008201b4 	movhi	r2,2054
 802dff0:	10bc7c17 	ldw	r2,-3600(r2)
 802dff4:	10c00044 	addi	r3,r2,1
 802dff8:	008201b4 	movhi	r2,2054
 802dffc:	10fc7c15 	stw	r3,-3600(r2)
      while (m2)  /* If we still have two or more buffers, more copying: */
 802e000:	e0bffe17 	ldw	r2,-8(fp)
 802e004:	103fae1e 	bne	r2,zero,802dec0 <ip_output+0x12c>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      if (m2)  /* If all else fails, brute force copy: */
 802e008:	e0bffe17 	ldw	r2,-8(fp)
 802e00c:	10006c26 	beq	r2,zero,802e1c0 <ip_output+0x42c>
      {
         total = 0;
 802e010:	e03ffc15 	stw	zero,-16(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 802e014:	e0bfff17 	ldw	r2,-4(fp)
 802e018:	e0bffd15 	stw	r2,-12(fp)
 802e01c:	00000806 	br	802e040 <ip_output+0x2ac>
            total += mtmp->m_len;
 802e020:	e0bffd17 	ldw	r2,-12(fp)
 802e024:	10c00217 	ldw	r3,8(r2)
 802e028:	e0bffc17 	ldw	r2,-16(fp)
 802e02c:	1885883a 	add	r2,r3,r2
 802e030:	e0bffc15 	stw	r2,-16(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 802e034:	e0bffd17 	ldw	r2,-12(fp)
 802e038:	10800617 	ldw	r2,24(r2)
 802e03c:	e0bffd15 	stw	r2,-12(fp)
 802e040:	e0bffd17 	ldw	r2,-12(fp)
 802e044:	103ff61e 	bne	r2,zero,802e020 <ip_output+0x28c>
         LOCK_NET_RESOURCE(FREEQ_RESID);
 802e048:	01000084 	movi	r4,2
 802e04c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
 802e050:	e0bffc17 	ldw	r2,-16(fp)
 802e054:	10800e04 	addi	r2,r2,56
 802e058:	1009883a 	mov	r4,r2
 802e05c:	802b8840 	call	802b884 <pk_alloc>
 802e060:	e0bffb15 	stw	r2,-20(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802e064:	01000084 	movi	r4,2
 802e068:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         if (!pkt)
 802e06c:	e0bffb17 	ldw	r2,-20(fp)
 802e070:	1000021e 	bne	r2,zero,802e07c <ip_output+0x2e8>
            return ENOBUFS;
 802e074:	00801a44 	movi	r2,105
 802e078:	0000a306 	br	802e308 <ip_output+0x574>
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
 802e07c:	e0bffb17 	ldw	r2,-20(fp)
 802e080:	10800117 	ldw	r2,4(r2)
 802e084:	d0e07c17 	ldw	r3,-32272(gp)
 802e088:	10c7883a 	add	r3,r2,r3
 802e08c:	e0bffb17 	ldw	r2,-20(fp)
 802e090:	10c00315 	stw	r3,12(r2)

         mtmp = m1;
 802e094:	e0bfff17 	ldw	r2,-4(fp)
 802e098:	e0bffd15 	stw	r2,-12(fp)
         while (mtmp)
 802e09c:	00002706 	br	802e13c <ip_output+0x3a8>
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
 802e0a0:	e0bffb17 	ldw	r2,-20(fp)
 802e0a4:	10c00317 	ldw	r3,12(r2)
 802e0a8:	e0bffd17 	ldw	r2,-12(fp)
 802e0ac:	11000317 	ldw	r4,12(r2)
 802e0b0:	e0bffd17 	ldw	r2,-12(fp)
 802e0b4:	10800217 	ldw	r2,8(r2)
 802e0b8:	100d883a 	mov	r6,r2
 802e0bc:	200b883a 	mov	r5,r4
 802e0c0:	1809883a 	mov	r4,r3
 802e0c4:	8002ea40 	call	8002ea4 <memcpy>
            pkt->nb_prot += mtmp->m_len;
 802e0c8:	e0bffb17 	ldw	r2,-20(fp)
 802e0cc:	10c00317 	ldw	r3,12(r2)
 802e0d0:	e0bffd17 	ldw	r2,-12(fp)
 802e0d4:	10800217 	ldw	r2,8(r2)
 802e0d8:	1887883a 	add	r3,r3,r2
 802e0dc:	e0bffb17 	ldw	r2,-20(fp)
 802e0e0:	10c00315 	stw	r3,12(r2)
            pkt->nb_plen += mtmp->m_len;
 802e0e4:	e0bffb17 	ldw	r2,-20(fp)
 802e0e8:	10c00417 	ldw	r3,16(r2)
 802e0ec:	e0bffd17 	ldw	r2,-12(fp)
 802e0f0:	10800217 	ldw	r2,8(r2)
 802e0f4:	1887883a 	add	r3,r3,r2
 802e0f8:	e0bffb17 	ldw	r2,-20(fp)
 802e0fc:	10c00415 	stw	r3,16(r2)
            m2 = mtmp;
 802e100:	e0bffd17 	ldw	r2,-12(fp)
 802e104:	e0bffe15 	stw	r2,-8(fp)
            mtmp = mtmp->m_next;
 802e108:	e0bffd17 	ldw	r2,-12(fp)
 802e10c:	10800617 	ldw	r2,24(r2)
 802e110:	e0bffd15 	stw	r2,-12(fp)
            if (m2 != data)   /* save original head */
 802e114:	e0fffe17 	ldw	r3,-8(fp)
 802e118:	e0bff717 	ldw	r2,-36(fp)
 802e11c:	18800226 	beq	r3,r2,802e128 <ip_output+0x394>
               m_free(m2);
 802e120:	e13ffe17 	ldw	r4,-8(fp)
 802e124:	802d3300 	call	802d330 <m_free>
            tcpstat.tcps_ocopies++;
 802e128:	008201b4 	movhi	r2,2054
 802e12c:	10bc7e17 	ldw	r2,-3592(r2)
 802e130:	10c00044 	addi	r3,r2,1
 802e134:	008201b4 	movhi	r2,2054
 802e138:	10fc7e15 	stw	r3,-3592(r2)
         while (mtmp)
 802e13c:	e0bffd17 	ldw	r2,-12(fp)
 802e140:	103fd71e 	bne	r2,zero,802e0a0 <ip_output+0x30c>
         }
         pkt->nb_prot -= total;     /* fix data pointer */
 802e144:	e0bffb17 	ldw	r2,-20(fp)
 802e148:	10c00317 	ldw	r3,12(r2)
 802e14c:	e0bffc17 	ldw	r2,-16(fp)
 802e150:	0085c83a 	sub	r2,zero,r2
 802e154:	1887883a 	add	r3,r3,r2
 802e158:	e0bffb17 	ldw	r2,-20(fp)
 802e15c:	10c00315 	stw	r3,12(r2)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 802e160:	01000084 	movi	r4,2
 802e164:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
 802e168:	e0bff717 	ldw	r2,-36(fp)
 802e16c:	10800117 	ldw	r2,4(r2)
 802e170:	1009883a 	mov	r4,r2
 802e174:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802e178:	01000084 	movi	r4,2
 802e17c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
 802e180:	e0bff717 	ldw	r2,-36(fp)
 802e184:	e0fffb17 	ldw	r3,-20(fp)
 802e188:	10c00115 	stw	r3,4(r2)
         data->m_len = pkt->nb_plen;
 802e18c:	e0bffb17 	ldw	r2,-20(fp)
 802e190:	10c00417 	ldw	r3,16(r2)
 802e194:	e0bff717 	ldw	r2,-36(fp)
 802e198:	10c00215 	stw	r3,8(r2)
         data->m_next = NULL;
 802e19c:	e0bff717 	ldw	r2,-36(fp)
 802e1a0:	10000615 	stw	zero,24(r2)
         data->m_data = pkt->nb_prot;
 802e1a4:	e0bffb17 	ldw	r2,-20(fp)
 802e1a8:	10c00317 	ldw	r3,12(r2)
 802e1ac:	e0bff717 	ldw	r2,-36(fp)
 802e1b0:	10c00315 	stw	r3,12(r2)
         data->m_len = total;
 802e1b4:	e0fffc17 	ldw	r3,-16(fp)
 802e1b8:	e0bff717 	ldw	r2,-36(fp)
 802e1bc:	10c00215 	stw	r3,8(r2)
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
 802e1c0:	e0bff717 	ldw	r2,-36(fp)
 802e1c4:	10c00317 	ldw	r3,12(r2)
 802e1c8:	e0bff717 	ldw	r2,-36(fp)
 802e1cc:	10800117 	ldw	r2,4(r2)
 802e1d0:	10800117 	ldw	r2,4(r2)
 802e1d4:	d1207c17 	ldw	r4,-32272(gp)
 802e1d8:	1105883a 	add	r2,r2,r4
 802e1dc:	1880032e 	bgeu	r3,r2,802e1ec <ip_output+0x458>
      panic("ip_output: overflow");
 802e1e0:	01020174 	movhi	r4,2053
 802e1e4:	210bff04 	addi	r4,r4,12284
 802e1e8:	8027fe00 	call	8027fe0 <panic>

   pkt = data->pkt;
 802e1ec:	e0bff717 	ldw	r2,-36(fp)
 802e1f0:	10800117 	ldw	r2,4(r2)
 802e1f4:	e0bffb15 	stw	r2,-20(fp)

   /* do we have options? */
   if (so_optsPack)
 802e1f8:	e0bff617 	ldw	r2,-40(fp)
 802e1fc:	10000326 	beq	r2,zero,802e20c <ip_output+0x478>
	   pkt->soxopts = so_optsPack;   /* yup */
 802e200:	e0bffb17 	ldw	r2,-20(fp)
 802e204:	e0fff617 	ldw	r3,-40(fp)
 802e208:	10c00c15 	stw	r3,48(r2)
      panic("ip_output: no so_optsPack for the IPv6 scope");     
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
 802e20c:	e0bff717 	ldw	r2,-36(fp)
 802e210:	10800317 	ldw	r2,12(r2)
 802e214:	e0bff915 	stw	r2,-28(fp)
   pkt->fhost = bip->ip_dest;
 802e218:	e0bff917 	ldw	r2,-28(fp)
 802e21c:	10c00417 	ldw	r3,16(r2)
 802e220:	e0bffb17 	ldw	r2,-20(fp)
 802e224:	10c00715 	stw	r3,28(r2)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
 802e228:	e0bff917 	ldw	r2,-28(fp)
 802e22c:	00c01144 	movi	r3,69
 802e230:	10c00005 	stb	r3,0(r2)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 802e234:	e0bff917 	ldw	r2,-28(fp)
 802e238:	1080008b 	ldhu	r2,2(r2)
 802e23c:	10bfffcc 	andi	r2,r2,65535
 802e240:	1004d23a 	srli	r2,r2,8
 802e244:	1007883a 	mov	r3,r2
 802e248:	e0bff917 	ldw	r2,-28(fp)
 802e24c:	1080008b 	ldhu	r2,2(r2)
 802e250:	10bfffcc 	andi	r2,r2,65535
 802e254:	1004923a 	slli	r2,r2,8
 802e258:	1884b03a 	or	r2,r3,r2
 802e25c:	1007883a 	mov	r3,r2
 802e260:	e0bff917 	ldw	r2,-28(fp)
 802e264:	10c0008d 	sth	r3,2(r2)
   tcpp = (struct tcphdr *)ip_data(bip);
 802e268:	e0bff917 	ldw	r2,-28(fp)
 802e26c:	10800003 	ldbu	r2,0(r2)
 802e270:	10803fcc 	andi	r2,r2,255
 802e274:	100490ba 	slli	r2,r2,2
 802e278:	10800f0c 	andi	r2,r2,60
 802e27c:	e0fff917 	ldw	r3,-28(fp)
 802e280:	1885883a 	add	r2,r3,r2
 802e284:	e0bff815 	stw	r2,-32(fp)
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
 802e288:	e13ff917 	ldw	r4,-28(fp)
 802e28c:	80468d40 	call	80468d4 <tcp_cksum>
 802e290:	1007883a 	mov	r3,r2
 802e294:	e0bff817 	ldw	r2,-32(fp)
 802e298:	10c0040d 	sth	r3,16(r2)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
 802e29c:	e0bff917 	ldw	r2,-28(fp)
 802e2a0:	10c00504 	addi	r3,r2,20
 802e2a4:	e0bffb17 	ldw	r2,-20(fp)
 802e2a8:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 802e2ac:	e0bff717 	ldw	r2,-36(fp)
 802e2b0:	10800217 	ldw	r2,8(r2)
 802e2b4:	10fffb04 	addi	r3,r2,-20
 802e2b8:	e0bffb17 	ldw	r2,-20(fp)
 802e2bc:	10c00415 	stw	r3,16(r2)

   e = ip_write(IPPROTO_TCP, pkt);
 802e2c0:	e17ffb17 	ldw	r5,-20(fp)
 802e2c4:	01000184 	movi	r4,6
 802e2c8:	803e9840 	call	803e984 <ip_write>
 802e2cc:	e0bffa15 	stw	r2,-24(fp)

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
 802e2d0:	e0bff717 	ldw	r2,-36(fp)
 802e2d4:	10000115 	stw	zero,4(r2)
   m_freem(data);
 802e2d8:	e13ff717 	ldw	r4,-36(fp)
 802e2dc:	802d4340 	call	802d434 <m_freem>

   if (e < 0)
 802e2e0:	e0bffa17 	ldw	r2,-24(fp)
 802e2e4:	1000070e 	bge	r2,zero,802e304 <ip_output+0x570>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 802e2e8:	e0bffa17 	ldw	r2,-24(fp)
 802e2ec:	10bffa98 	cmpnei	r2,r2,-22
 802e2f0:	1000021e 	bne	r2,zero,802e2fc <ip_output+0x568>
         return 0;
 802e2f4:	0005883a 	mov	r2,zero
 802e2f8:	00000306 	br	802e308 <ip_output+0x574>
      return e;
 802e2fc:	e0bffa17 	ldw	r2,-24(fp)
 802e300:	00000106 	br	802e308 <ip_output+0x574>
   }
   else
      return 0;
 802e304:	0005883a 	mov	r2,zero
}
 802e308:	e037883a 	mov	sp,fp
 802e30c:	dfc00117 	ldw	ra,4(sp)
 802e310:	df000017 	ldw	fp,0(sp)
 802e314:	dec00204 	addi	sp,sp,8
 802e318:	f800283a 	ret

0802e31c <in_broadcast>:
 * RETURNS: TRUE if broadcast, else FALSE
 */

int
in_broadcast(u_long ipaddr)   /* passed in net endian */
{
 802e31c:	defffe04 	addi	sp,sp,-8
 802e320:	df000115 	stw	fp,4(sp)
 802e324:	df000104 	addi	fp,sp,4
 802e328:	e13fff15 	stw	r4,-4(fp)
   if (ipaddr == 0xffffffff)
 802e32c:	e0bfff17 	ldw	r2,-4(fp)
 802e330:	10bfffd8 	cmpnei	r2,r2,-1
 802e334:	1000021e 	bne	r2,zero,802e340 <in_broadcast+0x24>
      return TRUE;
 802e338:	00800044 	movi	r2,1
 802e33c:	00000106 	br	802e344 <in_broadcast+0x28>

   return FALSE;
 802e340:	0005883a 	mov	r2,zero
}
 802e344:	e037883a 	mov	sp,fp
 802e348:	df000017 	ldw	fp,0(sp)
 802e34c:	dec00104 	addi	sp,sp,4
 802e350:	f800283a 	ret

0802e354 <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 802e354:	defffb04 	addi	sp,sp,-20
 802e358:	dfc00415 	stw	ra,16(sp)
 802e35c:	df000315 	stw	fp,12(sp)
 802e360:	df000304 	addi	fp,sp,12
 802e364:	e13ffe15 	stw	r4,-8(fp)
 802e368:	e17ffd15 	stw	r5,-12(fp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
 802e36c:	e0bffe17 	ldw	r2,-8(fp)
 802e370:	10800003 	ldbu	r2,0(r2)
 802e374:	10803fcc 	andi	r2,r2,255
 802e378:	100490ba 	slli	r2,r2,2
 802e37c:	10800f0c 	andi	r2,r2,60
 802e380:	e0bfff15 	stw	r2,-4(fp)

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
 802e384:	e0bfff17 	ldw	r2,-4(fp)
 802e388:	10800548 	cmpgei	r2,r2,21
 802e38c:	10002726 	beq	r2,zero,802e42c <np_stripoptions+0xd8>
      return;

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
 802e390:	e0bfff17 	ldw	r2,-4(fp)
 802e394:	10bffb04 	addi	r2,r2,-20
 802e398:	e0bfff15 	stw	r2,-4(fp)

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
 802e39c:	e0bffe17 	ldw	r2,-8(fp)
 802e3a0:	1080008b 	ldhu	r2,2(r2)
 802e3a4:	e0ffff17 	ldw	r3,-4(fp)
 802e3a8:	10c5c83a 	sub	r2,r2,r3
 802e3ac:	1007883a 	mov	r3,r2
 802e3b0:	e0bffe17 	ldw	r2,-8(fp)
 802e3b4:	10c0008d 	sth	r3,2(r2)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 802e3b8:	e0bffe17 	ldw	r2,-8(fp)
 802e3bc:	10800003 	ldbu	r2,0(r2)
 802e3c0:	1007883a 	mov	r3,r2
 802e3c4:	00bffc04 	movi	r2,-16
 802e3c8:	1884703a 	and	r2,r3,r2
 802e3cc:	10800154 	ori	r2,r2,5
 802e3d0:	1007883a 	mov	r3,r2
 802e3d4:	e0bffe17 	ldw	r2,-8(fp)
 802e3d8:	10c00005 	stb	r3,0(r2)

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 802e3dc:	e0bfff17 	ldw	r2,-4(fp)
 802e3e0:	e0fffe17 	ldw	r3,-8(fp)
 802e3e4:	1885883a 	add	r2,r3,r2
 802e3e8:	01800504 	movi	r6,20
 802e3ec:	e17ffe17 	ldw	r5,-8(fp)
 802e3f0:	1009883a 	mov	r4,r2
 802e3f4:	80096e80 	call	80096e8 <memmove>
   m->m_len -= ihlen;
 802e3f8:	e0bffd17 	ldw	r2,-12(fp)
 802e3fc:	10c00217 	ldw	r3,8(r2)
 802e400:	e0bfff17 	ldw	r2,-4(fp)
 802e404:	1887c83a 	sub	r3,r3,r2
 802e408:	e0bffd17 	ldw	r2,-12(fp)
 802e40c:	10c00215 	stw	r3,8(r2)
   m->m_data += ihlen;
 802e410:	e0bffd17 	ldw	r2,-12(fp)
 802e414:	10c00317 	ldw	r3,12(r2)
 802e418:	e0bfff17 	ldw	r2,-4(fp)
 802e41c:	1887883a 	add	r3,r3,r2
 802e420:	e0bffd17 	ldw	r2,-12(fp)
 802e424:	10c00315 	stw	r3,12(r2)
 802e428:	00000106 	br	802e430 <np_stripoptions+0xdc>
      return;
 802e42c:	0001883a 	nop
}
 802e430:	e037883a 	mov	sp,fp
 802e434:	dfc00117 	ldw	ra,4(sp)
 802e438:	df000017 	ldw	fp,0(sp)
 802e43c:	dec00204 	addi	sp,sp,8
 802e440:	f800283a 	ret

0802e444 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
 802e444:	defff304 	addi	sp,sp,-52
 802e448:	dfc00c15 	stw	ra,48(sp)
 802e44c:	df000b15 	stw	fp,44(sp)
 802e450:	df000b04 	addi	fp,sp,44
 802e454:	e13ff815 	stw	r4,-32(fp)
 802e458:	e17ff715 	stw	r5,-36(fp)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 802e45c:	e0bff717 	ldw	r2,-36(fp)
 802e460:	10800617 	ldw	r2,24(r2)
 802e464:	1006d63a 	srli	r3,r2,24
 802e468:	e0bff717 	ldw	r2,-36(fp)
 802e46c:	10800617 	ldw	r2,24(r2)
 802e470:	1004d23a 	srli	r2,r2,8
 802e474:	10bfc00c 	andi	r2,r2,65280
 802e478:	1886b03a 	or	r3,r3,r2
 802e47c:	e0bff717 	ldw	r2,-36(fp)
 802e480:	10800617 	ldw	r2,24(r2)
 802e484:	1004923a 	slli	r2,r2,8
 802e488:	10803fec 	andhi	r2,r2,255
 802e48c:	1886b03a 	or	r3,r3,r2
 802e490:	e0bff717 	ldw	r2,-36(fp)
 802e494:	10800617 	ldw	r2,24(r2)
 802e498:	1004963a 	slli	r2,r2,24
 802e49c:	1884b03a 	or	r2,r3,r2
 802e4a0:	e0bffe15 	stw	r2,-8(fp)
   lhost = htonl(pdp->dip.ip_src);
 802e4a4:	e0bff717 	ldw	r2,-36(fp)
 802e4a8:	10800517 	ldw	r2,20(r2)
 802e4ac:	1006d63a 	srli	r3,r2,24
 802e4b0:	e0bff717 	ldw	r2,-36(fp)
 802e4b4:	10800517 	ldw	r2,20(r2)
 802e4b8:	1004d23a 	srli	r2,r2,8
 802e4bc:	10bfc00c 	andi	r2,r2,65280
 802e4c0:	1886b03a 	or	r3,r3,r2
 802e4c4:	e0bff717 	ldw	r2,-36(fp)
 802e4c8:	10800517 	ldw	r2,20(r2)
 802e4cc:	1004923a 	slli	r2,r2,8
 802e4d0:	10803fec 	andhi	r2,r2,255
 802e4d4:	1886b03a 	or	r3,r3,r2
 802e4d8:	e0bff717 	ldw	r2,-36(fp)
 802e4dc:	10800517 	ldw	r2,20(r2)
 802e4e0:	1004963a 	slli	r2,r2,24
 802e4e4:	1884b03a 	or	r2,r3,r2
 802e4e8:	e0bffd15 	stw	r2,-12(fp)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 802e4ec:	e0bff717 	ldw	r2,-36(fp)
 802e4f0:	10800704 	addi	r2,r2,28
 802e4f4:	1080000b 	ldhu	r2,0(r2)
 802e4f8:	10bfffcc 	andi	r2,r2,65535
 802e4fc:	1004d23a 	srli	r2,r2,8
 802e500:	1007883a 	mov	r3,r2
 802e504:	e0bff717 	ldw	r2,-36(fp)
 802e508:	10800704 	addi	r2,r2,28
 802e50c:	1080000b 	ldhu	r2,0(r2)
 802e510:	10bfffcc 	andi	r2,r2,65535
 802e514:	1004923a 	slli	r2,r2,8
 802e518:	1884b03a 	or	r2,r3,r2
 802e51c:	e0bffc8d 	sth	r2,-14(fp)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 802e520:	e0bff717 	ldw	r2,-36(fp)
 802e524:	10800784 	addi	r2,r2,30
 802e528:	1080000b 	ldhu	r2,0(r2)
 802e52c:	10bfffcc 	andi	r2,r2,65535
 802e530:	1004d23a 	srli	r2,r2,8
 802e534:	1007883a 	mov	r3,r2
 802e538:	e0bff717 	ldw	r2,-36(fp)
 802e53c:	10800784 	addi	r2,r2,30
 802e540:	1080000b 	ldhu	r2,0(r2)
 802e544:	10bfffcc 	andi	r2,r2,65535
 802e548:	1004923a 	slli	r2,r2,8
 802e54c:	1884b03a 	or	r2,r3,r2
 802e550:	e0bffc0d 	sth	r2,-16(fp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
 802e554:	e0bff717 	ldw	r2,-36(fp)
 802e558:	10800043 	ldbu	r2,1(r2)
 802e55c:	10803fcc 	andi	r2,r2,255
 802e560:	1080201c 	xori	r2,r2,128
 802e564:	10bfe004 	addi	r2,r2,-128
 802e568:	10800118 	cmpnei	r2,r2,4
 802e56c:	10006e26 	beq	r2,zero,802e728 <so_icmpdu+0x2e4>
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 802e570:	e0bff717 	ldw	r2,-36(fp)
 802e574:	10800443 	ldbu	r2,17(r2)
 802e578:	10803fcc 	andi	r2,r2,255
 802e57c:	10800198 	cmpnei	r2,r2,6
 802e580:	1000221e 	bne	r2,zero,802e60c <so_icmpdu+0x1c8>
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
 802e584:	e13ffc0b 	ldhu	r4,-16(fp)
 802e588:	e0bffc8b 	ldhu	r2,-14(fp)
 802e58c:	00c00044 	movi	r3,1
 802e590:	d8c00115 	stw	r3,4(sp)
 802e594:	d8800015 	stw	r2,0(sp)
 802e598:	e1fffd17 	ldw	r7,-12(fp)
 802e59c:	200d883a 	mov	r6,r4
 802e5a0:	e17ffe17 	ldw	r5,-8(fp)
 802e5a4:	010201b4 	movhi	r4,2054
 802e5a8:	213c3f04 	addi	r4,r4,-3844
 802e5ac:	804709c0 	call	804709c <in_pcblookup>
 802e5b0:	e0bffa15 	stw	r2,-24(fp)
      if (inp == 0)
 802e5b4:	e0bffa17 	ldw	r2,-24(fp)
 802e5b8:	10005d26 	beq	r2,zero,802e730 <so_icmpdu+0x2ec>
         goto done;
      so = inp->inp_socket;
 802e5bc:	e0bffa17 	ldw	r2,-24(fp)
 802e5c0:	10800817 	ldw	r2,32(r2)
 802e5c4:	e0bffb15 	stw	r2,-20(fp)
      if (so == 0)
 802e5c8:	e0bffb17 	ldw	r2,-20(fp)
 802e5cc:	10005a26 	beq	r2,zero,802e738 <so_icmpdu+0x2f4>
         goto done;
      tp = intotcpcb(inp);
 802e5d0:	e0bffa17 	ldw	r2,-24(fp)
 802e5d4:	10800917 	ldw	r2,36(r2)
 802e5d8:	e0bff915 	stw	r2,-28(fp)
      if (tp)
 802e5dc:	e0bff917 	ldw	r2,-28(fp)
 802e5e0:	10000626 	beq	r2,zero,802e5fc <so_icmpdu+0x1b8>
      {
         if (tp->t_state <= TCPS_LISTEN)
 802e5e4:	e0bff917 	ldw	r2,-28(fp)
 802e5e8:	10800217 	ldw	r2,8(r2)
 802e5ec:	10800088 	cmpgei	r2,r2,2
 802e5f0:	10005326 	beq	r2,zero,802e740 <so_icmpdu+0x2fc>
               goto done;
        }
   }
#endif

         tcp_close(tp);
 802e5f4:	e13ff917 	ldw	r4,-28(fp)
 802e5f8:	80389100 	call	8038910 <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 802e5fc:	e0bffb17 	ldw	r2,-20(fp)
 802e600:	00c01bc4 	movi	r3,111
 802e604:	10c00615 	stw	r3,24(r2)
 802e608:	00005406 	br	802e75c <so_icmpdu+0x318>
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
 802e60c:	e0bff717 	ldw	r2,-36(fp)
 802e610:	10800443 	ldbu	r2,17(r2)
 802e614:	10803fcc 	andi	r2,r2,255
 802e618:	10800458 	cmpnei	r2,r2,17
 802e61c:	10004a1e 	bne	r2,zero,802e748 <so_icmpdu+0x304>
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 802e620:	d0a09717 	ldw	r2,-32164(gp)
 802e624:	e0bfff15 	stw	r2,-4(fp)
 802e628:	00002106 	br	802e6b0 <so_icmpdu+0x26c>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 802e62c:	e0bfff17 	ldw	r2,-4(fp)
 802e630:	1080020b 	ldhu	r2,8(r2)
 802e634:	e0fffc0b 	ldhu	r3,-16(fp)
 802e638:	10bfffcc 	andi	r2,r2,65535
 802e63c:	18800426 	beq	r3,r2,802e650 <so_icmpdu+0x20c>
 802e640:	e0bfff17 	ldw	r2,-4(fp)
 802e644:	1080020b 	ldhu	r2,8(r2)
 802e648:	10bfffcc 	andi	r2,r2,65535
 802e64c:	1000151e 	bne	r2,zero,802e6a4 <so_icmpdu+0x260>
             (tmp->u_fhost == htonl(fhost)) &&
 802e650:	e0bfff17 	ldw	r2,-4(fp)
 802e654:	10c00417 	ldw	r3,16(r2)
 802e658:	e0bffe17 	ldw	r2,-8(fp)
 802e65c:	1008d63a 	srli	r4,r2,24
 802e660:	e0bffe17 	ldw	r2,-8(fp)
 802e664:	1004d23a 	srli	r2,r2,8
 802e668:	10bfc00c 	andi	r2,r2,65280
 802e66c:	2088b03a 	or	r4,r4,r2
 802e670:	e0bffe17 	ldw	r2,-8(fp)
 802e674:	1004923a 	slli	r2,r2,8
 802e678:	10803fec 	andhi	r2,r2,255
 802e67c:	2088b03a 	or	r4,r4,r2
 802e680:	e0bffe17 	ldw	r2,-8(fp)
 802e684:	1004963a 	slli	r2,r2,24
 802e688:	2084b03a 	or	r2,r4,r2
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 802e68c:	1880051e 	bne	r3,r2,802e6a4 <so_icmpdu+0x260>
             (tmp->u_lport == lport))
 802e690:	e0bfff17 	ldw	r2,-4(fp)
 802e694:	1080018b 	ldhu	r2,6(r2)
             (tmp->u_fhost == htonl(fhost)) &&
 802e698:	e0fffc8b 	ldhu	r3,-14(fp)
 802e69c:	10bfffcc 	andi	r2,r2,65535
 802e6a0:	18800626 	beq	r3,r2,802e6bc <so_icmpdu+0x278>
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 802e6a4:	e0bfff17 	ldw	r2,-4(fp)
 802e6a8:	10800017 	ldw	r2,0(r2)
 802e6ac:	e0bfff15 	stw	r2,-4(fp)
 802e6b0:	e0bfff17 	ldw	r2,-4(fp)
 802e6b4:	103fdd1e 	bne	r2,zero,802e62c <so_icmpdu+0x1e8>
 802e6b8:	00000106 	br	802e6c0 <so_icmpdu+0x27c>
         {
            break;   /* found our UDP table entry */
 802e6bc:	0001883a 	nop
         }
      if (!tmp) 
 802e6c0:	e0bfff17 	ldw	r2,-4(fp)
 802e6c4:	10002226 	beq	r2,zero,802e750 <so_icmpdu+0x30c>
         goto done;
      so = (struct socket *)tmp->u_data;
 802e6c8:	e0bfff17 	ldw	r2,-4(fp)
 802e6cc:	10800617 	ldw	r2,24(r2)
 802e6d0:	e0bffb15 	stw	r2,-20(fp)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
 802e6d4:	e0bffb17 	ldw	r2,-20(fp)
 802e6d8:	10800983 	ldbu	r2,38(r2)
 802e6dc:	10803fcc 	andi	r2,r2,255
 802e6e0:	1080201c 	xori	r2,r2,128
 802e6e4:	10bfe004 	addi	r2,r2,-128
 802e6e8:	108000a0 	cmpeqi	r2,r2,2
 802e6ec:	10001a26 	beq	r2,zero,802e758 <so_icmpdu+0x314>
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 802e6f0:	e0bffb17 	ldw	r2,-20(fp)
 802e6f4:	00c01bc4 	movi	r3,111
 802e6f8:	10c00615 	stw	r3,24(r2)
      /* do a select() notify on socket here */
      sorwakeup(so);
 802e6fc:	e0bffb17 	ldw	r2,-20(fp)
 802e700:	10800a04 	addi	r2,r2,40
 802e704:	100b883a 	mov	r5,r2
 802e708:	e13ffb17 	ldw	r4,-20(fp)
 802e70c:	80331580 	call	8033158 <sbwakeup>
      sowwakeup(so);
 802e710:	e0bffb17 	ldw	r2,-20(fp)
 802e714:	10801204 	addi	r2,r2,72
 802e718:	100b883a 	mov	r5,r2
 802e71c:	e13ffb17 	ldw	r4,-20(fp)
 802e720:	80331580 	call	8033158 <sbwakeup>
 802e724:	00000d06 	br	802e75c <so_icmpdu+0x318>
       goto done;
 802e728:	0001883a 	nop
 802e72c:	00000b06 	br	802e75c <so_icmpdu+0x318>
         goto done;
 802e730:	0001883a 	nop
 802e734:	00000906 	br	802e75c <so_icmpdu+0x318>
         goto done;
 802e738:	0001883a 	nop
 802e73c:	00000706 	br	802e75c <so_icmpdu+0x318>
            goto done;
 802e740:	0001883a 	nop
 802e744:	00000506 	br	802e75c <so_icmpdu+0x318>
   }
#endif   /* UDP_SOCKETS */
   else
      goto done;
 802e748:	0001883a 	nop
 802e74c:	00000306 	br	802e75c <so_icmpdu+0x318>
         goto done;
 802e750:	0001883a 	nop
 802e754:	00000106 	br	802e75c <so_icmpdu+0x318>
         goto done;
 802e758:	0001883a 	nop
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
 802e75c:	01000084 	movi	r4,2
 802e760:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
 802e764:	e13ff817 	ldw	r4,-32(fp)
 802e768:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 802e76c:	01000084 	movi	r4,2
 802e770:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return;
 802e774:	0001883a 	nop
}
 802e778:	e037883a 	mov	sp,fp
 802e77c:	dfc00117 	ldw	ra,4(sp)
 802e780:	df000017 	ldw	fp,0(sp)
 802e784:	dec00204 	addi	sp,sp,8
 802e788:	f800283a 	ret

0802e78c <tcp_tick>:
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
 802e78c:	defffe04 	addi	sp,sp,-8
 802e790:	dfc00115 	stw	ra,4(sp)
 802e794:	df000015 	stw	fp,0(sp)
 802e798:	d839883a 	mov	fp,sp
   /* guard against re-entry */
   if (in_tcptick)
 802e79c:	d0a0a817 	ldw	r2,-32096(gp)
 802e7a0:	1000121e 	bne	r2,zero,802e7ec <tcp_tick+0x60>
      return;
   in_tcptick++;
 802e7a4:	d0a0a817 	ldw	r2,-32096(gp)
 802e7a8:	10800044 	addi	r2,r2,1
 802e7ac:	d0a0a815 	stw	r2,-32096(gp)

   LOCK_NET_RESOURCE(NET_RESID);
 802e7b0:	0009883a 	mov	r4,zero
 802e7b4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
 802e7b8:	d0e0a317 	ldw	r3,-32116(gp)
 802e7bc:	d0a0a717 	ldw	r2,-32100(gp)
 802e7c0:	18800436 	bltu	r3,r2,802e7d4 <tcp_tick+0x48>
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
 802e7c4:	8038b300 	call	8038b30 <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
 802e7c8:	d0a0a317 	ldw	r2,-32116(gp)
 802e7cc:	10800c84 	addi	r2,r2,50
 802e7d0:	d0a0a715 	stw	r2,-32100(gp)

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
 802e7d4:	0009883a 	mov	r4,zero
 802e7d8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   in_tcptick--;
 802e7dc:	d0a0a817 	ldw	r2,-32096(gp)
 802e7e0:	10bfffc4 	addi	r2,r2,-1
 802e7e4:	d0a0a815 	stw	r2,-32096(gp)
 802e7e8:	00000106 	br	802e7f0 <tcp_tick+0x64>
      return;
 802e7ec:	0001883a 	nop
}
 802e7f0:	e037883a 	mov	sp,fp
 802e7f4:	dfc00117 	ldw	ra,4(sp)
 802e7f8:	df000017 	ldw	fp,0(sp)
 802e7fc:	dec00204 	addi	sp,sp,8
 802e800:	f800283a 	ret

0802e804 <rawip_lookup>:
 *          or NULL if no matching raw IP endpoint is found.
 */

struct ipraw_ep *
rawip_lookup(struct socket * so)
{
 802e804:	defffd04 	addi	sp,sp,-12
 802e808:	df000215 	stw	fp,8(sp)
 802e80c:	df000204 	addi	fp,sp,8
 802e810:	e13ffe15 	stw	r4,-8(fp)
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 802e814:	d0a0ca17 	ldw	r2,-31960(gp)
 802e818:	e0bfff15 	stw	r2,-4(fp)
 802e81c:	00000906 	br	802e844 <rawip_lookup+0x40>
      if (tmp->ipr_data == (void*)so)
 802e820:	e0bfff17 	ldw	r2,-4(fp)
 802e824:	10800417 	ldw	r2,16(r2)
 802e828:	e0fffe17 	ldw	r3,-8(fp)
 802e82c:	1880021e 	bne	r3,r2,802e838 <rawip_lookup+0x34>
      return (tmp);
 802e830:	e0bfff17 	ldw	r2,-4(fp)
 802e834:	00000606 	br	802e850 <rawip_lookup+0x4c>
   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 802e838:	e0bfff17 	ldw	r2,-4(fp)
 802e83c:	10800017 	ldw	r2,0(r2)
 802e840:	e0bfff15 	stw	r2,-4(fp)
 802e844:	e0bfff17 	ldw	r2,-4(fp)
 802e848:	103ff51e 	bne	r2,zero,802e820 <rawip_lookup+0x1c>

   return NULL;   /* didn't find it */
 802e84c:	0005883a 	mov	r2,zero
}
 802e850:	e037883a 	mov	sp,fp
 802e854:	df000017 	ldw	fp,0(sp)
 802e858:	dec00104 	addi	sp,sp,4
 802e85c:	f800283a 	ret

0802e860 <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
 802e860:	defff504 	addi	sp,sp,-44
 802e864:	dfc00a15 	stw	ra,40(sp)
 802e868:	df000915 	stw	fp,36(sp)
 802e86c:	df000904 	addi	fp,sp,36
 802e870:	e13ff815 	stw	r4,-32(fp)
 802e874:	e17ff715 	stw	r5,-36(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 802e878:	e0bff717 	ldw	r2,-36(fp)
 802e87c:	e0bfff15 	stw	r2,-4(fp)
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
 802e880:	0009883a 	mov	r4,zero
 802e884:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 802e888:	e0bfff17 	ldw	r2,-4(fp)
 802e88c:	10c00a17 	ldw	r3,40(r2)
 802e890:	e0bff817 	ldw	r2,-32(fp)
 802e894:	10800417 	ldw	r2,16(r2)
 802e898:	1887883a 	add	r3,r3,r2
 802e89c:	e0bfff17 	ldw	r2,-4(fp)
 802e8a0:	10800b17 	ldw	r2,44(r2)
 802e8a4:	18800436 	bltu	r3,r2,802e8b8 <rawip_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 802e8a8:	0009883a 	mov	r4,zero
 802e8ac:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 802e8b0:	00801a44 	movi	r2,105
 802e8b4:	00005606 	br	802ea10 <rawip_soinput+0x1b0>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 802e8b8:	000b883a 	mov	r5,zero
 802e8bc:	01000044 	movi	r4,1
 802e8c0:	802d1a80 	call	802d1a8 <m_getnbuf>
 802e8c4:	e0bffe15 	stw	r2,-8(fp)
   if (!m_in)
 802e8c8:	e0bffe17 	ldw	r2,-8(fp)
 802e8cc:	1000041e 	bne	r2,zero,802e8e0 <rawip_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 802e8d0:	0009883a 	mov	r4,zero
 802e8d4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 802e8d8:	00801a44 	movi	r2,105
 802e8dc:	00004c06 	br	802ea10 <rawip_soinput+0x1b0>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
 802e8e0:	e0bffe17 	ldw	r2,-8(fp)
 802e8e4:	e0fff817 	ldw	r3,-32(fp)
 802e8e8:	10c00115 	stw	r3,4(r2)
   m_in->m_base = pkt->nb_buff;
 802e8ec:	e0bff817 	ldw	r2,-32(fp)
 802e8f0:	10c00117 	ldw	r3,4(r2)
 802e8f4:	e0bffe17 	ldw	r2,-8(fp)
 802e8f8:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 802e8fc:	e0bff817 	ldw	r2,-32(fp)
 802e900:	10c00217 	ldw	r3,8(r2)
 802e904:	e0bffe17 	ldw	r2,-8(fp)
 802e908:	10c00515 	stw	r3,20(r2)
   m_in->m_data = pkt->nb_prot;
 802e90c:	e0bff817 	ldw	r2,-32(fp)
 802e910:	10c00317 	ldw	r3,12(r2)
 802e914:	e0bffe17 	ldw	r2,-8(fp)
 802e918:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 802e91c:	e0bff817 	ldw	r2,-32(fp)
 802e920:	10c00417 	ldw	r3,16(r2)
 802e924:	e0bffe17 	ldw	r2,-8(fp)
 802e928:	10c00215 	stw	r3,8(r2)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 802e92c:	e0bfff17 	ldw	r2,-4(fp)
 802e930:	10800417 	ldw	r2,16(r2)
 802e934:	1088000c 	andi	r2,r2,8192
 802e938:	1000131e 	bne	r2,zero,802e988 <rawip_soinput+0x128>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
 802e93c:	e0bff817 	ldw	r2,-32(fp)
 802e940:	10800317 	ldw	r2,12(r2)
 802e944:	10800003 	ldbu	r2,0(r2)
 802e948:	10803fcc 	andi	r2,r2,255
 802e94c:	100490ba 	slli	r2,r2,2
      unsigned int ihl = 
 802e950:	10800f0c 	andi	r2,r2,60
 802e954:	e0bffd15 	stw	r2,-12(fp)
      m_in->m_data += ihl;
 802e958:	e0bffe17 	ldw	r2,-8(fp)
 802e95c:	10c00317 	ldw	r3,12(r2)
 802e960:	e0bffd17 	ldw	r2,-12(fp)
 802e964:	1887883a 	add	r3,r3,r2
 802e968:	e0bffe17 	ldw	r2,-8(fp)
 802e96c:	10c00315 	stw	r3,12(r2)
      m_in->m_len -= ihl;
 802e970:	e0bffe17 	ldw	r2,-8(fp)
 802e974:	10c00217 	ldw	r3,8(r2)
 802e978:	e0bffd17 	ldw	r2,-12(fp)
 802e97c:	1887c83a 	sub	r3,r3,r2
 802e980:	e0bffe17 	ldw	r2,-8(fp)
 802e984:	10c00215 	stw	r3,8(r2)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 802e988:	e0bff817 	ldw	r2,-32(fp)
 802e98c:	10800717 	ldw	r2,28(r2)
 802e990:	e0bffa15 	stw	r2,-24(fp)
   sin.sin_port = 0;
 802e994:	e03ff98d 	sth	zero,-26(fp)
   sin.sin_family = AF_INET;
 802e998:	00800084 	movi	r2,2
 802e99c:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 802e9a0:	e0bfff17 	ldw	r2,-4(fp)
 802e9a4:	10800a04 	addi	r2,r2,40
 802e9a8:	e0fff904 	addi	r3,fp,-28
 802e9ac:	e1bffe17 	ldw	r6,-8(fp)
 802e9b0:	180b883a 	mov	r5,r3
 802e9b4:	1009883a 	mov	r4,r2
 802e9b8:	80334800 	call	8033480 <sbappendaddr>
 802e9bc:	1000081e 	bne	r2,zero,802e9e0 <rawip_soinput+0x180>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
 802e9c0:	e0bffe17 	ldw	r2,-8(fp)
 802e9c4:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 802e9c8:	e13ffe17 	ldw	r4,-8(fp)
 802e9cc:	802d3300 	call	802d330 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 802e9d0:	0009883a 	mov	r4,zero
 802e9d4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 802e9d8:	00801a44 	movi	r2,105
 802e9dc:	00000c06 	br	802ea10 <rawip_soinput+0x1b0>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 802e9e0:	e0bfff17 	ldw	r2,-4(fp)
 802e9e4:	10800a04 	addi	r2,r2,40
 802e9e8:	1009883a 	mov	r4,r2
 802e9ec:	8028a0c0 	call	8028a0c <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 802e9f0:	e0bfff17 	ldw	r2,-4(fp)
 802e9f4:	10800a04 	addi	r2,r2,40
 802e9f8:	100b883a 	mov	r5,r2
 802e9fc:	e13fff17 	ldw	r4,-4(fp)
 802ea00:	80331580 	call	8033158 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 802ea04:	0009883a 	mov	r4,zero
 802ea08:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return 0;
 802ea0c:	0005883a 	mov	r2,zero
}
 802ea10:	e037883a 	mov	sp,fp
 802ea14:	dfc00117 	ldw	ra,4(sp)
 802ea18:	df000017 	ldw	fp,0(sp)
 802ea1c:	dec00204 	addi	sp,sp,8
 802ea20:	f800283a 	ret

0802ea24 <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 802ea24:	deffef04 	addi	sp,sp,-68
 802ea28:	dfc01015 	stw	ra,64(sp)
 802ea2c:	df000f15 	stw	fp,60(sp)
 802ea30:	dc000e15 	stw	r16,56(sp)
 802ea34:	df000f04 	addi	fp,sp,60
 802ea38:	e13ff415 	stw	r4,-48(fp)
 802ea3c:	e17ff315 	stw	r5,-52(fp)
 802ea40:	e1bff215 	stw	r6,-56(fp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
 802ea44:	e0bff417 	ldw	r2,-48(fp)
 802ea48:	10800717 	ldw	r2,28(r2)
 802ea4c:	e0bffa15 	stw	r2,-24(fp)
 802ea50:	e0bffa17 	ldw	r2,-24(fp)
 802ea54:	10800468 	cmpgeui	r2,r2,17
 802ea58:	1001b91e 	bne	r2,zero,802f140 <rawip_usrreq+0x71c>
 802ea5c:	e0bffa17 	ldw	r2,-24(fp)
 802ea60:	100690ba 	slli	r3,r2,2
 802ea64:	008200f4 	movhi	r2,2051
 802ea68:	1885883a 	add	r2,r3,r2
 802ea6c:	10ba9d17 	ldw	r2,-5516(r2)
 802ea70:	1000683a 	jmp	r2
 802ea74:	0802eab8 	rdprs	zero,at,2986
 802ea78:	0802eb40 	call	802eb4 <OSCtxSw_SWITCH_PC+0x802e74>
 802ea7c:	0802eb7c 	xorhi	zero,at,2989
 802ea80:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802ea84:	0802eb7c 	xorhi	zero,at,2989
 802ea88:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802ea8c:	0802f134 	orhi	zero,at,3012
 802ea90:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802ea94:	0802f134 	orhi	zero,at,3012
 802ea98:	0802ed04 	addi	zero,at,2996
 802ea9c:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802eaa0:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802eaa4:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802eaa8:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802eaac:	0802f140 	call	802f14 <OSCtxSw_SWITCH_PC+0x802ed4>
 802eab0:	0802f0a0 	cmpeqi	zero,at,3010
 802eab4:	0802f0a0 	cmpeqi	zero,at,3010
   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 802eab8:	e0bff417 	ldw	r2,-48(fp)
 802eabc:	10800417 	ldw	r2,16(r2)
 802eac0:	1088000c 	andi	r2,r2,8192
 802eac4:	1009883a 	mov	r4,r2
 802eac8:	8042fc80 	call	8042fc8 <ip_raw_maxalloc>
 802eacc:	1007883a 	mov	r3,r2
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
 802ead0:	e0bff417 	ldw	r2,-48(fp)
 802ead4:	10c01315 	stw	r3,76(r2)
 802ead8:	e0bff417 	ldw	r2,-48(fp)
 802eadc:	10c01317 	ldw	r3,76(r2)
 802eae0:	e0bff417 	ldw	r2,-48(fp)
 802eae4:	10c00b15 	stw	r3,44(r2)
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
 802eae8:	e0bff217 	ldw	r2,-56(fp)
 802eaec:	e0bff5c5 	stb	r2,-41(fp)
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 802eaf0:	0009883a 	mov	r4,zero
 802eaf4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
 802eaf8:	e0fff5c3 	ldbu	r3,-41(fp)
 802eafc:	e0bff417 	ldw	r2,-48(fp)
 802eb00:	d8800015 	stw	r2,0(sp)
 802eb04:	01c200f4 	movhi	r7,2051
 802eb08:	39fa1804 	addi	r7,r7,-6048
 802eb0c:	000d883a 	mov	r6,zero
 802eb10:	000b883a 	mov	r5,zero
 802eb14:	1809883a 	mov	r4,r3
 802eb18:	8042b240 	call	8042b24 <ip_raw_open>
 802eb1c:	e0bff815 	stw	r2,-32(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 802eb20:	0009883a 	mov	r4,zero
 802eb24:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      if (!ep)
 802eb28:	e0bff817 	ldw	r2,-32(fp)
 802eb2c:	1000021e 	bne	r2,zero,802eb38 <rawip_usrreq+0x114>
         return(EINVAL);
 802eb30:	00800584 	movi	r2,22
 802eb34:	00018306 	br	802f144 <rawip_usrreq+0x720>
      return 0;
 802eb38:	0005883a 	mov	r2,zero
 802eb3c:	00018106 	br	802f144 <rawip_usrreq+0x720>
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
 802eb40:	e13ff417 	ldw	r4,-48(fp)
 802eb44:	802e8040 	call	802e804 <rawip_lookup>
 802eb48:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 802eb4c:	e0bff817 	ldw	r2,-32(fp)
 802eb50:	1000021e 	bne	r2,zero,802eb5c <rawip_usrreq+0x138>
         return(EINVAL);
 802eb54:	00800584 	movi	r2,22
 802eb58:	00017a06 	br	802f144 <rawip_usrreq+0x720>
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 802eb5c:	0009883a 	mov	r4,zero
 802eb60:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
 802eb64:	e13ff817 	ldw	r4,-32(fp)
 802eb68:	8042bfc0 	call	8042bfc <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
 802eb6c:	0009883a 	mov	r4,zero
 802eb70:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      return 0;
 802eb74:	0005883a 	mov	r2,zero
 802eb78:	00017206 	br	802f144 <rawip_usrreq+0x720>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 802eb7c:	e0bff217 	ldw	r2,-56(fp)
 802eb80:	1000021e 	bne	r2,zero,802eb8c <rawip_usrreq+0x168>
         return(EINVAL);
 802eb84:	00800584 	movi	r2,22
 802eb88:	00016e06 	br	802f144 <rawip_usrreq+0x720>
      sin = mtod(nam, struct sockaddr_in *);
 802eb8c:	e0bff217 	ldw	r2,-56(fp)
 802eb90:	10800317 	ldw	r2,12(r2)
 802eb94:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 802eb98:	e0bff917 	ldw	r2,-28(fp)
 802eb9c:	1000021e 	bne	r2,zero,802eba8 <rawip_usrreq+0x184>
         return(EINVAL);
 802eba0:	00800584 	movi	r2,22
 802eba4:	00016706 	br	802f144 <rawip_usrreq+0x720>
      if (nam->m_len != sizeof (*sin))
 802eba8:	e0bff217 	ldw	r2,-56(fp)
 802ebac:	10800217 	ldw	r2,8(r2)
 802ebb0:	10800420 	cmpeqi	r2,r2,16
 802ebb4:	1000021e 	bne	r2,zero,802ebc0 <rawip_usrreq+0x19c>
         return(EINVAL);
 802ebb8:	00800584 	movi	r2,22
 802ebbc:	00016106 	br	802f144 <rawip_usrreq+0x720>
      ep = rawip_lookup(so);
 802ebc0:	e13ff417 	ldw	r4,-48(fp)
 802ebc4:	802e8040 	call	802e804 <rawip_lookup>
 802ebc8:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 802ebcc:	e0bff817 	ldw	r2,-32(fp)
 802ebd0:	1000021e 	bne	r2,zero,802ebdc <rawip_usrreq+0x1b8>
         return(EINVAL);
 802ebd4:	00800584 	movi	r2,22
 802ebd8:	00015a06 	br	802f144 <rawip_usrreq+0x720>
      if (req == PRU_BIND)
 802ebdc:	e0bffa17 	ldw	r2,-24(fp)
 802ebe0:	10800098 	cmpnei	r2,r2,2
 802ebe4:	10001f1e 	bne	r2,zero,802ec64 <rawip_usrreq+0x240>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 802ebe8:	e0bff917 	ldw	r2,-28(fp)
 802ebec:	10800117 	ldw	r2,4(r2)
 802ebf0:	1000021e 	bne	r2,zero,802ebfc <rawip_usrreq+0x1d8>
         {
            lhost = 0L;
 802ebf4:	e03ffc15 	stw	zero,-16(fp)
 802ebf8:	00001606 	br	802ec54 <rawip_usrreq+0x230>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
 802ebfc:	e0bff917 	ldw	r2,-28(fp)
 802ec00:	10800117 	ldw	r2,4(r2)
 802ec04:	e0bffc15 	stw	r2,-16(fp)
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ec08:	008201b4 	movhi	r2,2054
 802ec0c:	10bd1b17 	ldw	r2,-2964(r2)
 802ec10:	e0bffb15 	stw	r2,-20(fp)
 802ec14:	00000706 	br	802ec34 <rawip_usrreq+0x210>
               if (ifp->n_ipaddr == lhost)
 802ec18:	e0bffb17 	ldw	r2,-20(fp)
 802ec1c:	10800a17 	ldw	r2,40(r2)
 802ec20:	e0fffc17 	ldw	r3,-16(fp)
 802ec24:	18800626 	beq	r3,r2,802ec40 <rawip_usrreq+0x21c>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ec28:	e0bffb17 	ldw	r2,-20(fp)
 802ec2c:	10800017 	ldw	r2,0(r2)
 802ec30:	e0bffb15 	stw	r2,-20(fp)
 802ec34:	e0bffb17 	ldw	r2,-20(fp)
 802ec38:	103ff71e 	bne	r2,zero,802ec18 <rawip_usrreq+0x1f4>
 802ec3c:	00000106 	br	802ec44 <rawip_usrreq+0x220>
                  break;
 802ec40:	0001883a 	nop
            if (ifp == NULL)
 802ec44:	e0bffb17 	ldw	r2,-20(fp)
 802ec48:	1000021e 	bne	r2,zero,802ec54 <rawip_usrreq+0x230>
               return(EADDRNOTAVAIL);
 802ec4c:	00801f44 	movi	r2,125
 802ec50:	00013c06 	br	802f144 <rawip_usrreq+0x720>
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
 802ec54:	e0bff817 	ldw	r2,-32(fp)
 802ec58:	e0fffc17 	ldw	r3,-16(fp)
 802ec5c:	10c00115 	stw	r3,4(r2)
 802ec60:	00002606 	br	802ecfc <rawip_usrreq+0x2d8>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 802ec64:	e0bff917 	ldw	r2,-28(fp)
 802ec68:	10800117 	ldw	r2,4(r2)
 802ec6c:	1000021e 	bne	r2,zero,802ec78 <rawip_usrreq+0x254>
            fhost = 0L;
 802ec70:	e03ffd15 	stw	zero,-12(fp)
 802ec74:	00000306 	br	802ec84 <rawip_usrreq+0x260>
         else
            fhost = sin->sin_addr.s_addr;
 802ec78:	e0bff917 	ldw	r2,-28(fp)
 802ec7c:	10800117 	ldw	r2,4(r2)
 802ec80:	e0bffd15 	stw	r2,-12(fp)
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
 802ec84:	e0bff817 	ldw	r2,-32(fp)
 802ec88:	e0fffd17 	ldw	r3,-12(fp)
 802ec8c:	10c00215 	stw	r3,8(r2)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
 802ec90:	e0bffd17 	ldw	r2,-12(fp)
 802ec94:	10000e26 	beq	r2,zero,802ecd0 <rawip_usrreq+0x2ac>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 802ec98:	e0bff417 	ldw	r2,-48(fp)
 802ec9c:	10c0088b 	ldhu	r3,34(r2)
 802eca0:	00bffcc4 	movi	r2,-13
 802eca4:	1884703a 	and	r2,r3,r2
 802eca8:	1007883a 	mov	r3,r2
 802ecac:	e0bff417 	ldw	r2,-48(fp)
 802ecb0:	10c0088d 	sth	r3,34(r2)
            so->so_state |= SS_ISCONNECTED;
 802ecb4:	e0bff417 	ldw	r2,-48(fp)
 802ecb8:	1080088b 	ldhu	r2,34(r2)
 802ecbc:	10800094 	ori	r2,r2,2
 802ecc0:	1007883a 	mov	r3,r2
 802ecc4:	e0bff417 	ldw	r2,-48(fp)
 802ecc8:	10c0088d 	sth	r3,34(r2)
 802eccc:	00000706 	br	802ecec <rawip_usrreq+0x2c8>
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
 802ecd0:	e0bff417 	ldw	r2,-48(fp)
 802ecd4:	10c0088b 	ldhu	r3,34(r2)
 802ecd8:	00bfff44 	movi	r2,-3
 802ecdc:	1884703a 	and	r2,r3,r2
 802ece0:	1007883a 	mov	r3,r2
 802ece4:	e0bff417 	ldw	r2,-48(fp)
 802ece8:	10c0088d 	sth	r3,34(r2)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 802ecec:	e0bff417 	ldw	r2,-48(fp)
 802ecf0:	10800a04 	addi	r2,r2,40
 802ecf4:	1009883a 	mov	r4,r2
 802ecf8:	803383c0 	call	803383c <sbflush>
      }
      return 0;
 802ecfc:	0005883a 	mov	r2,zero
 802ed00:	00011006 	br	802f144 <rawip_usrreq+0x720>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 802ed04:	e0bff317 	ldw	r2,-52(fp)
 802ed08:	1000021e 	bne	r2,zero,802ed14 <rawip_usrreq+0x2f0>
         return(EINVAL);
 802ed0c:	00800584 	movi	r2,22
 802ed10:	00010c06 	br	802f144 <rawip_usrreq+0x720>

      ep = rawip_lookup(so);
 802ed14:	e13ff417 	ldw	r4,-48(fp)
 802ed18:	802e8040 	call	802e804 <rawip_lookup>
 802ed1c:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 802ed20:	e0bff817 	ldw	r2,-32(fp)
 802ed24:	1000041e 	bne	r2,zero,802ed38 <rawip_usrreq+0x314>
      {
         m_free(m);
 802ed28:	e13ff317 	ldw	r4,-52(fp)
 802ed2c:	802d3300 	call	802d330 <m_free>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
 802ed30:	00801bc4 	movi	r2,111
 802ed34:	00010306 	br	802f144 <rawip_usrreq+0x720>
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
 802ed38:	e0bff217 	ldw	r2,-56(fp)
 802ed3c:	10000b1e 	bne	r2,zero,802ed6c <rawip_usrreq+0x348>
      {
         if (!(so->so_state & SS_ISCONNECTED))
 802ed40:	e0bff417 	ldw	r2,-48(fp)
 802ed44:	1080088b 	ldhu	r2,34(r2)
 802ed48:	10bfffcc 	andi	r2,r2,65535
 802ed4c:	1080008c 	andi	r2,r2,2
 802ed50:	1000021e 	bne	r2,zero,802ed5c <rawip_usrreq+0x338>
            return (ENOTCONN);
 802ed54:	00802004 	movi	r2,128
 802ed58:	0000fa06 	br	802f144 <rawip_usrreq+0x720>
         fhost = ep->ipr_faddr;
 802ed5c:	e0bff817 	ldw	r2,-32(fp)
 802ed60:	10800217 	ldw	r2,8(r2)
 802ed64:	e0bffd15 	stw	r2,-12(fp)
 802ed68:	00001406 	br	802edbc <rawip_usrreq+0x398>
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
 802ed6c:	e0bff417 	ldw	r2,-48(fp)
 802ed70:	1080088b 	ldhu	r2,34(r2)
 802ed74:	10bfffcc 	andi	r2,r2,65535
 802ed78:	1080008c 	andi	r2,r2,2
 802ed7c:	10000226 	beq	r2,zero,802ed88 <rawip_usrreq+0x364>
            return (EISCONN);
 802ed80:	00801fc4 	movi	r2,127
 802ed84:	0000ef06 	br	802f144 <rawip_usrreq+0x720>
         if (nam->m_len != sizeof (*sin))
 802ed88:	e0bff217 	ldw	r2,-56(fp)
 802ed8c:	10800217 	ldw	r2,8(r2)
 802ed90:	10800420 	cmpeqi	r2,r2,16
 802ed94:	1000031e 	bne	r2,zero,802eda4 <rawip_usrreq+0x380>
         {
            dtrap();
 802ed98:	802c3fc0 	call	802c3fc <dtrap>
            return (EINVAL);
 802ed9c:	00800584 	movi	r2,22
 802eda0:	0000e806 	br	802f144 <rawip_usrreq+0x720>
         }
         sin = mtod(nam, struct sockaddr_in *);
 802eda4:	e0bff217 	ldw	r2,-56(fp)
 802eda8:	10800317 	ldw	r2,12(r2)
 802edac:	e0bff915 	stw	r2,-28(fp)
         fhost = sin->sin_addr.s_addr;
 802edb0:	e0bff917 	ldw	r2,-28(fp)
 802edb4:	10800117 	ldw	r2,4(r2)
 802edb8:	e0bffd15 	stw	r2,-12(fp)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
 802edbc:	e0bff317 	ldw	r2,-52(fp)
 802edc0:	14000217 	ldw	r16,8(r2)
 802edc4:	e0bff417 	ldw	r2,-48(fp)
 802edc8:	10800417 	ldw	r2,16(r2)
 802edcc:	1088000c 	andi	r2,r2,8192
 802edd0:	1009883a 	mov	r4,r2
 802edd4:	8042fc80 	call	8042fc8 <ip_raw_maxalloc>
 802edd8:	1400032e 	bgeu	r2,r16,802ede8 <rawip_usrreq+0x3c4>
      {
         dtrap(); /* should never happen */
 802eddc:	802c3fc0 	call	802c3fc <dtrap>
         return EMSGSIZE;  /* try to recover */
 802ede0:	00801e84 	movi	r2,122
 802ede4:	0000d706 	br	802f144 <rawip_usrreq+0x720>
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
 802ede8:	e0bff317 	ldw	r2,-52(fp)
 802edec:	10800217 	ldw	r2,8(r2)
 802edf0:	1007883a 	mov	r3,r2
 802edf4:	e0bff417 	ldw	r2,-48(fp)
 802edf8:	10800417 	ldw	r2,16(r2)
 802edfc:	1088000c 	andi	r2,r2,8192
 802ee00:	100b883a 	mov	r5,r2
 802ee04:	1809883a 	mov	r4,r3
 802ee08:	8042ecc0 	call	8042ecc <ip_raw_alloc>
 802ee0c:	e0bff715 	stw	r2,-36(fp)
      if (!pkt)
 802ee10:	e0bff717 	ldw	r2,-36(fp)
 802ee14:	1000041e 	bne	r2,zero,802ee28 <rawip_usrreq+0x404>
      {
         m_free(m);
 802ee18:	e13ff317 	ldw	r4,-52(fp)
 802ee1c:	802d3300 	call	802d330 <m_free>
         return ENOBUFS;   /* report buffer shortages */
 802ee20:	00801a44 	movi	r2,105
 802ee24:	0000c706 	br	802f144 <rawip_usrreq+0x720>
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 802ee28:	e0bff717 	ldw	r2,-36(fp)
 802ee2c:	10c00317 	ldw	r3,12(r2)
 802ee30:	e0bff317 	ldw	r2,-52(fp)
 802ee34:	11000317 	ldw	r4,12(r2)
 802ee38:	e0bff317 	ldw	r2,-52(fp)
 802ee3c:	10800217 	ldw	r2,8(r2)
 802ee40:	100d883a 	mov	r6,r2
 802ee44:	200b883a 	mov	r5,r4
 802ee48:	1809883a 	mov	r4,r3
 802ee4c:	8002ea40 	call	8002ea4 <memcpy>
      pkt->nb_plen = m->m_len;
 802ee50:	e0bff317 	ldw	r2,-52(fp)
 802ee54:	10c00217 	ldw	r3,8(r2)
 802ee58:	e0bff717 	ldw	r2,-36(fp)
 802ee5c:	10c00415 	stw	r3,16(r2)
      /* finished with mbuf, free it now */
      m_free(m);
 802ee60:	e13ff317 	ldw	r4,-52(fp)
 802ee64:	802d3300 	call	802d330 <m_free>
      pkt->fhost = fhost;
 802ee68:	e0bff717 	ldw	r2,-36(fp)
 802ee6c:	e0fffd17 	ldw	r3,-12(fp)
 802ee70:	10c00715 	stw	r3,28(r2)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
 802ee74:	e0bffd17 	ldw	r2,-12(fp)
 802ee78:	10bfffd8 	cmpnei	r2,r2,-1
 802ee7c:	1000471e 	bne	r2,zero,802ef9c <rawip_usrreq+0x578>
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
 802ee80:	e0bff817 	ldw	r2,-32(fp)
 802ee84:	10800117 	ldw	r2,4(r2)
 802ee88:	10000f26 	beq	r2,zero,802eec8 <rawip_usrreq+0x4a4>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ee8c:	008201b4 	movhi	r2,2054
 802ee90:	10bd1b17 	ldw	r2,-2964(r2)
 802ee94:	e0bffb15 	stw	r2,-20(fp)
 802ee98:	00000806 	br	802eebc <rawip_usrreq+0x498>
               if (ifp->n_ipaddr == ep->ipr_laddr)
 802ee9c:	e0bffb17 	ldw	r2,-20(fp)
 802eea0:	10c00a17 	ldw	r3,40(r2)
 802eea4:	e0bff817 	ldw	r2,-32(fp)
 802eea8:	10800117 	ldw	r2,4(r2)
 802eeac:	18801c26 	beq	r3,r2,802ef20 <rawip_usrreq+0x4fc>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802eeb0:	e0bffb17 	ldw	r2,-20(fp)
 802eeb4:	10800017 	ldw	r2,0(r2)
 802eeb8:	e0bffb15 	stw	r2,-20(fp)
 802eebc:	e0bffb17 	ldw	r2,-20(fp)
 802eec0:	103ff61e 	bne	r2,zero,802ee9c <rawip_usrreq+0x478>
 802eec4:	00001906 	br	802ef2c <rawip_usrreq+0x508>
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802eec8:	008201b4 	movhi	r2,2054
 802eecc:	10bd1b17 	ldw	r2,-2964(r2)
 802eed0:	e0bffb15 	stw	r2,-20(fp)
 802eed4:	00000f06 	br	802ef14 <rawip_usrreq+0x4f0>
               if ((ifp->n_flags & NF_BCAST) &&
 802eed8:	e0bffb17 	ldw	r2,-20(fp)
 802eedc:	10802a17 	ldw	r2,168(r2)
 802eee0:	1080004c 	andi	r2,r2,1
 802eee4:	10000826 	beq	r2,zero,802ef08 <rawip_usrreq+0x4e4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 802eee8:	e0bffb17 	ldw	r2,-20(fp)
 802eeec:	10802717 	ldw	r2,156(r2)
               if ((ifp->n_flags & NF_BCAST) &&
 802eef0:	10000526 	beq	r2,zero,802ef08 <rawip_usrreq+0x4e4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 802eef4:	e0bffb17 	ldw	r2,-20(fp)
 802eef8:	10802717 	ldw	r2,156(r2)
 802eefc:	10800617 	ldw	r2,24(r2)
 802ef00:	10800058 	cmpnei	r2,r2,1
 802ef04:	10000826 	beq	r2,zero,802ef28 <rawip_usrreq+0x504>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ef08:	e0bffb17 	ldw	r2,-20(fp)
 802ef0c:	10800017 	ldw	r2,0(r2)
 802ef10:	e0bffb15 	stw	r2,-20(fp)
 802ef14:	e0bffb17 	ldw	r2,-20(fp)
 802ef18:	103fef1e 	bne	r2,zero,802eed8 <rawip_usrreq+0x4b4>
 802ef1c:	00000306 	br	802ef2c <rawip_usrreq+0x508>
                  break;
 802ef20:	0001883a 	nop
 802ef24:	00000106 	br	802ef2c <rawip_usrreq+0x508>
                  break;
 802ef28:	0001883a 	nop
         }
         if (ifp == NULL)
 802ef2c:	e0bffb17 	ldw	r2,-20(fp)
 802ef30:	1000171e 	bne	r2,zero,802ef90 <rawip_usrreq+0x56c>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ef34:	008201b4 	movhi	r2,2054
 802ef38:	10bd1b17 	ldw	r2,-2964(r2)
 802ef3c:	e0bffb15 	stw	r2,-20(fp)
 802ef40:	00000b06 	br	802ef70 <rawip_usrreq+0x54c>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 802ef44:	e0bffb17 	ldw	r2,-20(fp)
 802ef48:	10802717 	ldw	r2,156(r2)
 802ef4c:	10000526 	beq	r2,zero,802ef64 <rawip_usrreq+0x540>
 802ef50:	e0bffb17 	ldw	r2,-20(fp)
 802ef54:	10802717 	ldw	r2,156(r2)
 802ef58:	10800617 	ldw	r2,24(r2)
 802ef5c:	10800058 	cmpnei	r2,r2,1
 802ef60:	10000626 	beq	r2,zero,802ef7c <rawip_usrreq+0x558>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 802ef64:	e0bffb17 	ldw	r2,-20(fp)
 802ef68:	10800017 	ldw	r2,0(r2)
 802ef6c:	e0bffb15 	stw	r2,-20(fp)
 802ef70:	e0bffb17 	ldw	r2,-20(fp)
 802ef74:	103ff31e 	bne	r2,zero,802ef44 <rawip_usrreq+0x520>
 802ef78:	00000106 	br	802ef80 <rawip_usrreq+0x55c>
                  break;
 802ef7c:	0001883a 	nop
            if (ifp == NULL)
 802ef80:	e0bffb17 	ldw	r2,-20(fp)
 802ef84:	1000021e 	bne	r2,zero,802ef90 <rawip_usrreq+0x56c>
               return(EADDRNOTAVAIL);
 802ef88:	00801f44 	movi	r2,125
 802ef8c:	00006d06 	br	802f144 <rawip_usrreq+0x720>
         }
         pkt->net = ifp;
 802ef90:	e0bff717 	ldw	r2,-36(fp)
 802ef94:	e0fffb17 	ldw	r3,-20(fp)
 802ef98:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
 802ef9c:	e0bff417 	ldw	r2,-48(fp)
 802efa0:	10800317 	ldw	r2,12(r2)
 802efa4:	10000426 	beq	r2,zero,802efb8 <rawip_usrreq+0x594>
         pkt->imo = so->inp_moptions;
 802efa8:	e0bff417 	ldw	r2,-48(fp)
 802efac:	10c00317 	ldw	r3,12(r2)
 802efb0:	e0bff717 	ldw	r2,-36(fp)
 802efb4:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
 802efb8:	e0bff417 	ldw	r2,-48(fp)
 802efbc:	10800417 	ldw	r2,16(r2)
 802efc0:	1088000c 	andi	r2,r2,8192
 802efc4:	10000826 	beq	r2,zero,802efe8 <rawip_usrreq+0x5c4>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 802efc8:	0009883a 	mov	r4,zero
 802efcc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
 802efd0:	e13ff717 	ldw	r4,-36(fp)
 802efd4:	803ef080 	call	803ef08 <ip_raw_write>
 802efd8:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 802efdc:	0009883a 	mov	r4,zero
 802efe0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
 802efe4:	00002806 	br	802f088 <rawip_usrreq+0x664>
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
 802efe8:	e0bff717 	ldw	r2,-36(fp)
 802efec:	10800317 	ldw	r2,12(r2)
 802eff0:	10bffb04 	addi	r2,r2,-20
 802eff4:	e0bff615 	stw	r2,-40(fp)
         if (ep->ipr_laddr)
 802eff8:	e0bff817 	ldw	r2,-32(fp)
 802effc:	10800117 	ldw	r2,4(r2)
 802f000:	10000526 	beq	r2,zero,802f018 <rawip_usrreq+0x5f4>
            pip->ip_src = ep->ipr_laddr;
 802f004:	e0bff817 	ldw	r2,-32(fp)
 802f008:	10c00117 	ldw	r3,4(r2)
 802f00c:	e0bff617 	ldw	r2,-40(fp)
 802f010:	10c00315 	stw	r3,12(r2)
 802f014:	00000e06 	br	802f050 <rawip_usrreq+0x62c>
         else
         {
            if (fhost == 0xffffffff)
 802f018:	e0bffd17 	ldw	r2,-12(fp)
 802f01c:	10bfffd8 	cmpnei	r2,r2,-1
 802f020:	1000061e 	bne	r2,zero,802f03c <rawip_usrreq+0x618>
               pip->ip_src = pkt->net->n_ipaddr;
 802f024:	e0bff717 	ldw	r2,-36(fp)
 802f028:	10800617 	ldw	r2,24(r2)
 802f02c:	10c00a17 	ldw	r3,40(r2)
 802f030:	e0bff617 	ldw	r2,-40(fp)
 802f034:	10c00315 	stw	r3,12(r2)
 802f038:	00000506 	br	802f050 <rawip_usrreq+0x62c>
            else
               pip->ip_src = ip_mymach(fhost);
 802f03c:	e13ffd17 	ldw	r4,-12(fp)
 802f040:	803f9600 	call	803f960 <ip_mymach>
 802f044:	1007883a 	mov	r3,r2
 802f048:	e0bff617 	ldw	r2,-40(fp)
 802f04c:	10c00315 	stw	r3,12(r2)
         }
         pip->ip_dest = fhost;
 802f050:	e0bff617 	ldw	r2,-40(fp)
 802f054:	e0fffd17 	ldw	r3,-12(fp)
 802f058:	10c00415 	stw	r3,16(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
 802f05c:	0009883a 	mov	r4,zero
 802f060:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
 802f064:	e0bff817 	ldw	r2,-32(fp)
 802f068:	10800503 	ldbu	r2,20(r2)
 802f06c:	10803fcc 	andi	r2,r2,255
 802f070:	e17ff717 	ldw	r5,-36(fp)
 802f074:	1009883a 	mov	r4,r2
 802f078:	803e9840 	call	803e984 <ip_write>
 802f07c:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 802f080:	0009883a 	mov	r4,zero
 802f084:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      }         
      if (e < 0) 
 802f088:	e0bffe17 	ldw	r2,-8(fp)
 802f08c:	1000020e 	bge	r2,zero,802f098 <rawip_usrreq+0x674>
         return(e);
 802f090:	e0bffe17 	ldw	r2,-8(fp)
 802f094:	00002b06 	br	802f144 <rawip_usrreq+0x720>
      return 0;
 802f098:	0005883a 	mov	r2,zero
 802f09c:	00002906 	br	802f144 <rawip_usrreq+0x720>
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 802f0a0:	e0bff217 	ldw	r2,-56(fp)
 802f0a4:	1000021e 	bne	r2,zero,802f0b0 <rawip_usrreq+0x68c>
         return(EINVAL);
 802f0a8:	00800584 	movi	r2,22
 802f0ac:	00002506 	br	802f144 <rawip_usrreq+0x720>
      sin = mtod(nam, struct sockaddr_in *);
 802f0b0:	e0bff217 	ldw	r2,-56(fp)
 802f0b4:	10800317 	ldw	r2,12(r2)
 802f0b8:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 802f0bc:	e0bff917 	ldw	r2,-28(fp)
 802f0c0:	1000021e 	bne	r2,zero,802f0cc <rawip_usrreq+0x6a8>
         return(EINVAL);
 802f0c4:	00800584 	movi	r2,22
 802f0c8:	00001e06 	br	802f144 <rawip_usrreq+0x720>
      ep = rawip_lookup(so);
 802f0cc:	e13ff417 	ldw	r4,-48(fp)
 802f0d0:	802e8040 	call	802e804 <rawip_lookup>
 802f0d4:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 802f0d8:	e0bff817 	ldw	r2,-32(fp)
 802f0dc:	1000021e 	bne	r2,zero,802f0e8 <rawip_usrreq+0x6c4>
         return(EINVAL);
 802f0e0:	00800584 	movi	r2,22
 802f0e4:	00001706 	br	802f144 <rawip_usrreq+0x720>
      sin->sin_port = 0;
 802f0e8:	e0bff917 	ldw	r2,-28(fp)
 802f0ec:	1000008d 	sth	zero,2(r2)
      nam->m_len = sizeof(*sin);
 802f0f0:	e0bff217 	ldw	r2,-56(fp)
 802f0f4:	00c00404 	movi	r3,16
 802f0f8:	10c00215 	stw	r3,8(r2)
      if (req == PRU_SOCKADDR)
 802f0fc:	e0bffa17 	ldw	r2,-24(fp)
 802f100:	108003d8 	cmpnei	r2,r2,15
 802f104:	1000051e 	bne	r2,zero,802f11c <rawip_usrreq+0x6f8>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
 802f108:	e0bff817 	ldw	r2,-32(fp)
 802f10c:	10c00117 	ldw	r3,4(r2)
 802f110:	e0bff917 	ldw	r2,-28(fp)
 802f114:	10c00115 	stw	r3,4(r2)
 802f118:	00000406 	br	802f12c <rawip_usrreq+0x708>
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
 802f11c:	e0bff817 	ldw	r2,-32(fp)
 802f120:	10c00217 	ldw	r3,8(r2)
 802f124:	e0bff917 	ldw	r2,-28(fp)
 802f128:	10c00115 	stw	r3,4(r2)
      }
      return 0;
 802f12c:	0005883a 	mov	r2,zero
 802f130:	00000406 	br	802f144 <rawip_usrreq+0x720>
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 802f134:	802c3fc0 	call	802c3fc <dtrap>
      return 0;
 802f138:	0005883a 	mov	r2,zero
 802f13c:	00000106 	br	802f144 <rawip_usrreq+0x720>
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 802f140:	008017c4 	movi	r2,95
   }
}
 802f144:	e6ffff04 	addi	sp,fp,-4
 802f148:	dfc00217 	ldw	ra,8(sp)
 802f14c:	df000117 	ldw	fp,4(sp)
 802f150:	dc000017 	ldw	r16,0(sp)
 802f154:	dec00304 	addi	sp,sp,12
 802f158:	f800283a 	ret

0802f15c <DOMAIN_CHECK>:
 */

#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
 802f15c:	defffc04 	addi	sp,sp,-16
 802f160:	dfc00315 	stw	ra,12(sp)
 802f164:	df000215 	stw	fp,8(sp)
 802f168:	df000204 	addi	fp,sp,8
 802f16c:	e13fff15 	stw	r4,-4(fp)
 802f170:	e17ffe15 	stw	r5,-8(fp)
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
 802f174:	e0bfff17 	ldw	r2,-4(fp)
 802f178:	10800517 	ldw	r2,20(r2)
 802f17c:	10800098 	cmpnei	r2,r2,2
 802f180:	1000041e 	bne	r2,zero,802f194 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
 802f184:	e0bffe17 	ldw	r2,-8(fp)
   if((so->so_domain == AF_INET) &&
 802f188:	10800428 	cmpgeui	r2,r2,16
 802f18c:	1000011e 	bne	r2,zero,802f194 <DOMAIN_CHECK+0x38>
   {
      dtrap(); /* programmer passed wrong structure */
 802f190:	802c3fc0 	call	802c3fc <dtrap>
      (size != sizeof(struct sockaddr_in6)))
   {
      dtrap(); /* programmer passed wrong structure */
   }
#endif   /* IP_V6 */
}
 802f194:	0001883a 	nop
 802f198:	e037883a 	mov	sp,fp
 802f19c:	dfc00117 	ldw	ra,4(sp)
 802f1a0:	df000017 	ldw	fp,0(sp)
 802f1a4:	dec00204 	addi	sp,sp,8
 802f1a8:	f800283a 	ret

0802f1ac <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
 802f1ac:	defffa04 	addi	sp,sp,-24
 802f1b0:	dfc00515 	stw	ra,20(sp)
 802f1b4:	df000415 	stw	fp,16(sp)
 802f1b8:	df000404 	addi	fp,sp,16
 802f1bc:	e13ffe15 	stw	r4,-8(fp)
 802f1c0:	e17ffd15 	stw	r5,-12(fp)
 802f1c4:	e1bffc15 	stw	r6,-16(fp)
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
 802f1c8:	0009883a 	mov	r4,zero
 802f1cc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
 802f1d0:	e1bffc17 	ldw	r6,-16(fp)
 802f1d4:	e17ffd17 	ldw	r5,-12(fp)
 802f1d8:	e13ffe17 	ldw	r4,-8(fp)
 802f1dc:	80307980 	call	8030798 <socreate>
 802f1e0:	e0bfff15 	stw	r2,-4(fp)
 802f1e4:	e0bfff17 	ldw	r2,-4(fp)
 802f1e8:	1000041e 	bne	r2,zero,802f1fc <t_socket+0x50>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
 802f1ec:	0009883a 	mov	r4,zero
 802f1f0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 802f1f4:	00bfffc4 	movi	r2,-1
 802f1f8:	00000706 	br	802f218 <t_socket+0x6c>
   }
   SOC_RANGE(so);
   so->so_error = 0;
 802f1fc:	e0bfff17 	ldw	r2,-4(fp)
 802f200:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
 802f204:	0009883a 	mov	r4,zero
 802f208:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
 802f20c:	e0bfff17 	ldw	r2,-4(fp)
 802f210:	1004d0ba 	srli	r2,r2,2
 802f214:	10800804 	addi	r2,r2,32
}
 802f218:	e037883a 	mov	sp,fp
 802f21c:	dfc00117 	ldw	ra,4(sp)
 802f220:	df000017 	ldw	fp,0(sp)
 802f224:	dec00204 	addi	sp,sp,8
 802f228:	f800283a 	ret

0802f22c <t_bind>:

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 802f22c:	defff204 	addi	sp,sp,-56
 802f230:	dfc00d15 	stw	ra,52(sp)
 802f234:	df000c15 	stw	fp,48(sp)
 802f238:	df000c04 	addi	fp,sp,48
 802f23c:	e13ff615 	stw	r4,-40(fp)
 802f240:	e17ff515 	stw	r5,-44(fp)
 802f244:	e1bff415 	stw	r6,-48(fp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 802f248:	e0bff617 	ldw	r2,-40(fp)
 802f24c:	10bff804 	addi	r2,r2,-32
 802f250:	100490ba 	slli	r2,r2,2
 802f254:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 802f258:	008201b4 	movhi	r2,2054
 802f25c:	10bc1704 	addi	r2,r2,-4004
 802f260:	e0bffe15 	stw	r2,-8(fp)
 802f264:	00000606 	br	802f280 <t_bind+0x54>
 802f268:	e0fffe17 	ldw	r3,-8(fp)
 802f26c:	e0bffd17 	ldw	r2,-12(fp)
 802f270:	18800626 	beq	r3,r2,802f28c <t_bind+0x60>
 802f274:	e0bffe17 	ldw	r2,-8(fp)
 802f278:	10800017 	ldw	r2,0(r2)
 802f27c:	e0bffe15 	stw	r2,-8(fp)
 802f280:	e0bffe17 	ldw	r2,-8(fp)
 802f284:	103ff81e 	bne	r2,zero,802f268 <t_bind+0x3c>
 802f288:	00000106 	br	802f290 <t_bind+0x64>
 802f28c:	0001883a 	nop
 802f290:	e0fffe17 	ldw	r3,-8(fp)
 802f294:	e0bffd17 	ldw	r2,-12(fp)
 802f298:	18800326 	beq	r3,r2,802f2a8 <t_bind+0x7c>
 802f29c:	802c3fc0 	call	802c3fc <dtrap>
 802f2a0:	00bfffc4 	movi	r2,-1
 802f2a4:	00003406 	br	802f378 <t_bind+0x14c>
   DOMAIN_CHECK(so, addrlen);
 802f2a8:	e17ff417 	ldw	r5,-48(fp)
 802f2ac:	e13ffd17 	ldw	r4,-12(fp)
 802f2b0:	802f15c0 	call	802f15c <DOMAIN_CHECK>

   so->so_error = 0;
 802f2b4:	e0bffd17 	ldw	r2,-12(fp)
 802f2b8:	10000615 	stw	zero,24(r2)
   if (addr == (struct sockaddr *)NULL) 
 802f2bc:	e0bff517 	ldw	r2,-44(fp)
 802f2c0:	10000d1e 	bne	r2,zero,802f2f8 <t_bind+0xcc>
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
 802f2c4:	e0bff704 	addi	r2,fp,-36
 802f2c8:	01800404 	movi	r6,16
 802f2cc:	000b883a 	mov	r5,zero
 802f2d0:	1009883a 	mov	r4,r2
 802f2d4:	8002fa40 	call	8002fa4 <memset>
      addrlen = sizeof(sa);
 802f2d8:	00800404 	movi	r2,16
 802f2dc:	e0bff415 	stw	r2,-48(fp)
      sa.sa_family = so->so_domain;
 802f2e0:	e0bffd17 	ldw	r2,-12(fp)
 802f2e4:	10800517 	ldw	r2,20(r2)
 802f2e8:	e0bff70d 	sth	r2,-36(fp)
      sap = &sa;
 802f2ec:	e0bff704 	addi	r2,fp,-36
 802f2f0:	e0bfff15 	stw	r2,-4(fp)
 802f2f4:	00000206 	br	802f300 <t_bind+0xd4>
   } else
      sap = addr;
 802f2f8:	e0bff517 	ldw	r2,-44(fp)
 802f2fc:	e0bfff15 	stw	r2,-4(fp)

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
 802f300:	01800244 	movi	r6,9
 802f304:	e17ff417 	ldw	r5,-48(fp)
 802f308:	e13fff17 	ldw	r4,-4(fp)
 802f30c:	80306780 	call	8030678 <sockargs>
 802f310:	e0bffc15 	stw	r2,-16(fp)
 802f314:	e0bffc17 	ldw	r2,-16(fp)
 802f318:	1000051e 	bne	r2,zero,802f330 <t_bind+0x104>
   {
      so->so_error = ENOMEM;
 802f31c:	e0bffd17 	ldw	r2,-12(fp)
 802f320:	00c00304 	movi	r3,12
 802f324:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802f328:	00bfffc4 	movi	r2,-1
 802f32c:	00001206 	br	802f378 <t_bind+0x14c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 802f330:	0009883a 	mov	r4,zero
 802f334:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
 802f338:	e17ffc17 	ldw	r5,-16(fp)
 802f33c:	e13ffd17 	ldw	r4,-12(fp)
 802f340:	80309400 	call	8030940 <sobind>
 802f344:	e0bffb15 	stw	r2,-20(fp)
   m_freem(nam);
 802f348:	e13ffc17 	ldw	r4,-16(fp)
 802f34c:	802d4340 	call	802d434 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 802f350:	0009883a 	mov	r4,zero
 802f354:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (err) 
 802f358:	e0bffb17 	ldw	r2,-20(fp)
 802f35c:	10000526 	beq	r2,zero,802f374 <t_bind+0x148>
   {
      so->so_error = err;
 802f360:	e0bffd17 	ldw	r2,-12(fp)
 802f364:	e0fffb17 	ldw	r3,-20(fp)
 802f368:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802f36c:	00bfffc4 	movi	r2,-1
 802f370:	00000106 	br	802f378 <t_bind+0x14c>
   }
   return 0;
 802f374:	0005883a 	mov	r2,zero
}
 802f378:	e037883a 	mov	sp,fp
 802f37c:	dfc00117 	ldw	ra,4(sp)
 802f380:	df000017 	ldw	fp,0(sp)
 802f384:	dec00204 	addi	sp,sp,8
 802f388:	f800283a 	ret

0802f38c <t_listen>:
 */

int
t_listen(long s, 
   int   backlog)
{
 802f38c:	defff904 	addi	sp,sp,-28
 802f390:	dfc00615 	stw	ra,24(sp)
 802f394:	df000515 	stw	fp,20(sp)
 802f398:	df000504 	addi	fp,sp,20
 802f39c:	e13ffc15 	stw	r4,-16(fp)
 802f3a0:	e17ffb15 	stw	r5,-20(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 802f3a4:	e0bffc17 	ldw	r2,-16(fp)
 802f3a8:	10bff804 	addi	r2,r2,-32
 802f3ac:	100490ba 	slli	r2,r2,2
 802f3b0:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802f3b4:	008201b4 	movhi	r2,2054
 802f3b8:	10bc1704 	addi	r2,r2,-4004
 802f3bc:	e0bfff15 	stw	r2,-4(fp)
 802f3c0:	00000606 	br	802f3dc <t_listen+0x50>
 802f3c4:	e0ffff17 	ldw	r3,-4(fp)
 802f3c8:	e0bffe17 	ldw	r2,-8(fp)
 802f3cc:	18800626 	beq	r3,r2,802f3e8 <t_listen+0x5c>
 802f3d0:	e0bfff17 	ldw	r2,-4(fp)
 802f3d4:	10800017 	ldw	r2,0(r2)
 802f3d8:	e0bfff15 	stw	r2,-4(fp)
 802f3dc:	e0bfff17 	ldw	r2,-4(fp)
 802f3e0:	103ff81e 	bne	r2,zero,802f3c4 <t_listen+0x38>
 802f3e4:	00000106 	br	802f3ec <t_listen+0x60>
 802f3e8:	0001883a 	nop
 802f3ec:	e0ffff17 	ldw	r3,-4(fp)
 802f3f0:	e0bffe17 	ldw	r2,-8(fp)
 802f3f4:	18800326 	beq	r3,r2,802f404 <t_listen+0x78>
 802f3f8:	802c3fc0 	call	802c3fc <dtrap>
 802f3fc:	00bfffc4 	movi	r2,-1
 802f400:	00001206 	br	802f44c <t_listen+0xc0>
   so->so_error = 0;
 802f404:	e0bffe17 	ldw	r2,-8(fp)
 802f408:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
 802f40c:	0009883a 	mov	r4,zero
 802f410:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
 802f414:	e17ffb17 	ldw	r5,-20(fp)
 802f418:	e13ffe17 	ldw	r4,-8(fp)
 802f41c:	803099c0 	call	803099c <solisten>
 802f420:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 802f424:	0009883a 	mov	r4,zero
 802f428:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 802f42c:	e0bffd17 	ldw	r2,-12(fp)
 802f430:	10000526 	beq	r2,zero,802f448 <t_listen+0xbc>
   {
      so->so_error = err;
 802f434:	e0bffe17 	ldw	r2,-8(fp)
 802f438:	e0fffd17 	ldw	r3,-12(fp)
 802f43c:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802f440:	00bfffc4 	movi	r2,-1
 802f444:	00000106 	br	802f44c <t_listen+0xc0>
   }
   return 0;
 802f448:	0005883a 	mov	r2,zero
}
 802f44c:	e037883a 	mov	sp,fp
 802f450:	dfc00117 	ldw	ra,4(sp)
 802f454:	df000017 	ldw	fp,0(sp)
 802f458:	dec00204 	addi	sp,sp,8
 802f45c:	f800283a 	ret

0802f460 <t_accept>:

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 802f460:	defff704 	addi	sp,sp,-36
 802f464:	dfc00815 	stw	ra,32(sp)
 802f468:	df000715 	stw	fp,28(sp)
 802f46c:	df000704 	addi	fp,sp,28
 802f470:	e13ffb15 	stw	r4,-20(fp)
 802f474:	e17ffa15 	stw	r5,-24(fp)
 802f478:	e1bff915 	stw	r6,-28(fp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 802f47c:	e0bffb17 	ldw	r2,-20(fp)
 802f480:	10bff804 	addi	r2,r2,-32
 802f484:	100490ba 	slli	r2,r2,2
 802f488:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802f48c:	008201b4 	movhi	r2,2054
 802f490:	10bc1704 	addi	r2,r2,-4004
 802f494:	e0bfff15 	stw	r2,-4(fp)
 802f498:	00000606 	br	802f4b4 <t_accept+0x54>
 802f49c:	e0ffff17 	ldw	r3,-4(fp)
 802f4a0:	e0bffe17 	ldw	r2,-8(fp)
 802f4a4:	18800626 	beq	r3,r2,802f4c0 <t_accept+0x60>
 802f4a8:	e0bfff17 	ldw	r2,-4(fp)
 802f4ac:	10800017 	ldw	r2,0(r2)
 802f4b0:	e0bfff15 	stw	r2,-4(fp)
 802f4b4:	e0bfff17 	ldw	r2,-4(fp)
 802f4b8:	103ff81e 	bne	r2,zero,802f49c <t_accept+0x3c>
 802f4bc:	00000106 	br	802f4c4 <t_accept+0x64>
 802f4c0:	0001883a 	nop
 802f4c4:	e0ffff17 	ldw	r3,-4(fp)
 802f4c8:	e0bffe17 	ldw	r2,-8(fp)
 802f4cc:	18800326 	beq	r3,r2,802f4dc <t_accept+0x7c>
 802f4d0:	802c3fc0 	call	802c3fc <dtrap>
 802f4d4:	00bfffc4 	movi	r2,-1
 802f4d8:	00007006 	br	802f69c <t_accept+0x23c>
   DOMAIN_CHECK(so, *addrlen);
 802f4dc:	e0bff917 	ldw	r2,-28(fp)
 802f4e0:	10800017 	ldw	r2,0(r2)
 802f4e4:	100b883a 	mov	r5,r2
 802f4e8:	e13ffe17 	ldw	r4,-8(fp)
 802f4ec:	802f15c0 	call	802f15c <DOMAIN_CHECK>

   so->so_error = 0;
 802f4f0:	e0bffe17 	ldw	r2,-8(fp)
 802f4f4:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
 802f4f8:	e0bffe17 	ldw	r2,-8(fp)
 802f4fc:	10800417 	ldw	r2,16(r2)
 802f500:	1080008c 	andi	r2,r2,2
 802f504:	1000051e 	bne	r2,zero,802f51c <t_accept+0xbc>
   {
      so->so_error = EINVAL;
 802f508:	e0bffe17 	ldw	r2,-8(fp)
 802f50c:	00c00584 	movi	r3,22
 802f510:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 802f514:	00bfffc4 	movi	r2,-1
 802f518:	00006006 	br	802f69c <t_accept+0x23c>
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
 802f51c:	e0bffe17 	ldw	r2,-8(fp)
 802f520:	1080088b 	ldhu	r2,34(r2)
 802f524:	10bfffcc 	andi	r2,r2,65535
 802f528:	1080400c 	andi	r2,r2,256
 802f52c:	10000b26 	beq	r2,zero,802f55c <t_accept+0xfc>
 802f530:	e0bffe17 	ldw	r2,-8(fp)
 802f534:	10801e43 	ldbu	r2,121(r2)
 802f538:	10803fcc 	andi	r2,r2,255
 802f53c:	1080201c 	xori	r2,r2,128
 802f540:	10bfe004 	addi	r2,r2,-128
 802f544:	1000051e 	bne	r2,zero,802f55c <t_accept+0xfc>
   {
      so->so_error = EWOULDBLOCK;
 802f548:	e0bffe17 	ldw	r2,-8(fp)
 802f54c:	00c002c4 	movi	r3,11
 802f550:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 802f554:	00bfffc4 	movi	r2,-1
 802f558:	00005006 	br	802f69c <t_accept+0x23c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 802f55c:	0009883a 	mov	r4,zero
 802f560:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
 802f564:	00001006 	br	802f5a8 <t_accept+0x148>
   {
      if (so->so_state & SS_CANTRCVMORE)
 802f568:	e0bffe17 	ldw	r2,-8(fp)
 802f56c:	1080088b 	ldhu	r2,34(r2)
 802f570:	10bfffcc 	andi	r2,r2,65535
 802f574:	1080080c 	andi	r2,r2,32
 802f578:	10000726 	beq	r2,zero,802f598 <t_accept+0x138>
      {
         so->so_error = ECONNABORTED;
 802f57c:	e0bffe17 	ldw	r2,-8(fp)
 802f580:	00c01c44 	movi	r3,113
 802f584:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
 802f588:	0009883a 	mov	r4,zero
 802f58c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 802f590:	00bfffc4 	movi	r2,-1
 802f594:	00004106 	br	802f69c <t_accept+0x23c>
      }
      tcp_sleep ((char *)&so->so_timeo);
 802f598:	e0bffe17 	ldw	r2,-8(fp)
 802f59c:	10800904 	addi	r2,r2,36
 802f5a0:	1009883a 	mov	r4,r2
 802f5a4:	80288c00 	call	80288c0 <tcp_sleep>
   while (so->so_qlen == 0 && so->so_error == 0)
 802f5a8:	e0bffe17 	ldw	r2,-8(fp)
 802f5ac:	10801e43 	ldbu	r2,121(r2)
 802f5b0:	10803fcc 	andi	r2,r2,255
 802f5b4:	1080201c 	xori	r2,r2,128
 802f5b8:	10bfe004 	addi	r2,r2,-128
 802f5bc:	1000031e 	bne	r2,zero,802f5cc <t_accept+0x16c>
 802f5c0:	e0bffe17 	ldw	r2,-8(fp)
 802f5c4:	10800617 	ldw	r2,24(r2)
 802f5c8:	103fe726 	beq	r2,zero,802f568 <t_accept+0x108>
   }
   if (so->so_error)
 802f5cc:	e0bffe17 	ldw	r2,-8(fp)
 802f5d0:	10800617 	ldw	r2,24(r2)
 802f5d4:	10000426 	beq	r2,zero,802f5e8 <t_accept+0x188>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 802f5d8:	0009883a 	mov	r4,zero
 802f5dc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 802f5e0:	00bfffc4 	movi	r2,-1
 802f5e4:	00002d06 	br	802f69c <t_accept+0x23c>
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 802f5e8:	01400404 	movi	r5,16
 802f5ec:	01000244 	movi	r4,9
 802f5f0:	802d1a80 	call	802d1a8 <m_getnbuf>
 802f5f4:	e0bffd15 	stw	r2,-12(fp)
   if (nam == NULL) 
 802f5f8:	e0bffd17 	ldw	r2,-12(fp)
 802f5fc:	1000071e 	bne	r2,zero,802f61c <t_accept+0x1bc>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 802f600:	0009883a 	mov	r4,zero
 802f604:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
 802f608:	e0bffe17 	ldw	r2,-8(fp)
 802f60c:	00c00304 	movi	r3,12
 802f610:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 802f614:	00bfffc4 	movi	r2,-1
 802f618:	00002006 	br	802f69c <t_accept+0x23c>
   }
   { 
      struct socket *aso = so->so_q;
 802f61c:	e0bffe17 	ldw	r2,-8(fp)
 802f620:	10801d17 	ldw	r2,116(r2)
 802f624:	e0bffc15 	stw	r2,-16(fp)
      if (soqremque (aso, 1) == 0)
 802f628:	01400044 	movi	r5,1
 802f62c:	e13ffc17 	ldw	r4,-16(fp)
 802f630:	8032ef80 	call	8032ef8 <soqremque>
 802f634:	1000031e 	bne	r2,zero,802f644 <t_accept+0x1e4>
         panic("accept");
 802f638:	01020174 	movhi	r4,2053
 802f63c:	210c0404 	addi	r4,r4,12304
 802f640:	8027fe00 	call	8027fe0 <panic>
      so = aso;
 802f644:	e0bffc17 	ldw	r2,-16(fp)
 802f648:	e0bffe15 	stw	r2,-8(fp)
   }
   (void)soaccept (so, nam);
 802f64c:	e17ffd17 	ldw	r5,-12(fp)
 802f650:	e13ffe17 	ldw	r4,-8(fp)
 802f654:	8030e940 	call	8030e94 <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
 802f658:	e0bffa17 	ldw	r2,-24(fp)
 802f65c:	10000826 	beq	r2,zero,802f680 <t_accept+0x220>
      MEMCPY(addr, nam->m_data, *addrlen);
 802f660:	e0bffd17 	ldw	r2,-12(fp)
 802f664:	10c00317 	ldw	r3,12(r2)
 802f668:	e0bff917 	ldw	r2,-28(fp)
 802f66c:	10800017 	ldw	r2,0(r2)
 802f670:	100d883a 	mov	r6,r2
 802f674:	180b883a 	mov	r5,r3
 802f678:	e13ffa17 	ldw	r4,-24(fp)
 802f67c:	8002ea40 	call	8002ea4 <memcpy>
   m_freem (nam);
 802f680:	e13ffd17 	ldw	r4,-12(fp)
 802f684:	802d4340 	call	802d434 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 802f688:	0009883a 	mov	r4,zero
 802f68c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
 802f690:	e0bffe17 	ldw	r2,-8(fp)
 802f694:	1004d0ba 	srli	r2,r2,2
 802f698:	10800804 	addi	r2,r2,32
}
 802f69c:	e037883a 	mov	sp,fp
 802f6a0:	dfc00117 	ldw	ra,4(sp)
 802f6a4:	df000017 	ldw	fp,0(sp)
 802f6a8:	dec00204 	addi	sp,sp,8
 802f6ac:	f800283a 	ret

0802f6b0 <t_connect>:

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 802f6b0:	defff804 	addi	sp,sp,-32
 802f6b4:	dfc00715 	stw	ra,28(sp)
 802f6b8:	df000615 	stw	fp,24(sp)
 802f6bc:	df000604 	addi	fp,sp,24
 802f6c0:	e13ffc15 	stw	r4,-16(fp)
 802f6c4:	e17ffb15 	stw	r5,-20(fp)
 802f6c8:	e1bffa15 	stw	r6,-24(fp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 802f6cc:	e0bffc17 	ldw	r2,-16(fp)
 802f6d0:	10bff804 	addi	r2,r2,-32
 802f6d4:	100490ba 	slli	r2,r2,2
 802f6d8:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802f6dc:	008201b4 	movhi	r2,2054
 802f6e0:	10bc1704 	addi	r2,r2,-4004
 802f6e4:	e0bfff15 	stw	r2,-4(fp)
 802f6e8:	00000606 	br	802f704 <t_connect+0x54>
 802f6ec:	e0ffff17 	ldw	r3,-4(fp)
 802f6f0:	e0bffe17 	ldw	r2,-8(fp)
 802f6f4:	18800626 	beq	r3,r2,802f710 <t_connect+0x60>
 802f6f8:	e0bfff17 	ldw	r2,-4(fp)
 802f6fc:	10800017 	ldw	r2,0(r2)
 802f700:	e0bfff15 	stw	r2,-4(fp)
 802f704:	e0bfff17 	ldw	r2,-4(fp)
 802f708:	103ff81e 	bne	r2,zero,802f6ec <t_connect+0x3c>
 802f70c:	00000106 	br	802f714 <t_connect+0x64>
 802f710:	0001883a 	nop
 802f714:	e0ffff17 	ldw	r3,-4(fp)
 802f718:	e0bffe17 	ldw	r2,-8(fp)
 802f71c:	18800326 	beq	r3,r2,802f72c <t_connect+0x7c>
 802f720:	802c3fc0 	call	802c3fc <dtrap>
 802f724:	00bfffc4 	movi	r2,-1
 802f728:	00007806 	br	802f90c <t_connect+0x25c>
   DOMAIN_CHECK(so, addrlen);
 802f72c:	e17ffa17 	ldw	r5,-24(fp)
 802f730:	e13ffe17 	ldw	r4,-8(fp)
 802f734:	802f15c0 	call	802f15c <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
 802f738:	e0bffe17 	ldw	r2,-8(fp)
 802f73c:	1080088b 	ldhu	r2,34(r2)
 802f740:	10bfffcc 	andi	r2,r2,65535
 802f744:	1080400c 	andi	r2,r2,256
 802f748:	10002426 	beq	r2,zero,802f7dc <t_connect+0x12c>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
 802f74c:	e0bffe17 	ldw	r2,-8(fp)
 802f750:	1080088b 	ldhu	r2,34(r2)
 802f754:	10bfffcc 	andi	r2,r2,65535
 802f758:	1080010c 	andi	r2,r2,4
 802f75c:	10000526 	beq	r2,zero,802f774 <t_connect+0xc4>
      {
         so->so_error = EINPROGRESS;
 802f760:	e0bffe17 	ldw	r2,-8(fp)
 802f764:	00c01dc4 	movi	r3,119
 802f768:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 802f76c:	00bfffc4 	movi	r2,-1
 802f770:	00006606 	br	802f90c <t_connect+0x25c>
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
 802f774:	e0bffe17 	ldw	r2,-8(fp)
 802f778:	1080088b 	ldhu	r2,34(r2)
 802f77c:	10bfffcc 	andi	r2,r2,65535
 802f780:	1080008c 	andi	r2,r2,2
 802f784:	10000426 	beq	r2,zero,802f798 <t_connect+0xe8>
      {
         so->so_error = 0;
 802f788:	e0bffe17 	ldw	r2,-8(fp)
 802f78c:	10000615 	stw	zero,24(r2)
         return 0;
 802f790:	0005883a 	mov	r2,zero
 802f794:	00005d06 	br	802f90c <t_connect+0x25c>
      }
      if (so->so_state & SS_WASCONNECTING)
 802f798:	e0bffe17 	ldw	r2,-8(fp)
 802f79c:	1080088b 	ldhu	r2,34(r2)
 802f7a0:	10bfffcc 	andi	r2,r2,65535
 802f7a4:	1088000c 	andi	r2,r2,8192
 802f7a8:	10000c26 	beq	r2,zero,802f7dc <t_connect+0x12c>
      {
         so->so_state &= ~SS_WASCONNECTING;
 802f7ac:	e0bffe17 	ldw	r2,-8(fp)
 802f7b0:	10c0088b 	ldhu	r3,34(r2)
 802f7b4:	00b7ffc4 	movi	r2,-8193
 802f7b8:	1884703a 	and	r2,r3,r2
 802f7bc:	1007883a 	mov	r3,r2
 802f7c0:	e0bffe17 	ldw	r2,-8(fp)
 802f7c4:	10c0088d 	sth	r3,34(r2)
         if (so->so_error) /* connect error - maybe timeout */
 802f7c8:	e0bffe17 	ldw	r2,-8(fp)
 802f7cc:	10800617 	ldw	r2,24(r2)
 802f7d0:	10000226 	beq	r2,zero,802f7dc <t_connect+0x12c>
            return SOCKET_ERROR;
 802f7d4:	00bfffc4 	movi	r2,-1
 802f7d8:	00004c06 	br	802f90c <t_connect+0x25c>
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
 802f7dc:	e0bffe17 	ldw	r2,-8(fp)
 802f7e0:	10000615 	stw	zero,24(r2)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
 802f7e4:	01800244 	movi	r6,9
 802f7e8:	e17ffa17 	ldw	r5,-24(fp)
 802f7ec:	e13ffb17 	ldw	r4,-20(fp)
 802f7f0:	80306780 	call	8030678 <sockargs>
 802f7f4:	e0bffd15 	stw	r2,-12(fp)
 802f7f8:	e0bffd17 	ldw	r2,-12(fp)
 802f7fc:	1000051e 	bne	r2,zero,802f814 <t_connect+0x164>
       == NULL)
   {
      so->so_error = ENOMEM;
 802f800:	e0bffe17 	ldw	r2,-8(fp)
 802f804:	00c00304 	movi	r3,12
 802f808:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802f80c:	00bfffc4 	movi	r2,-1
 802f810:	00003e06 	br	802f90c <t_connect+0x25c>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 802f814:	0009883a 	mov	r4,zero
 802f818:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
 802f81c:	e17ffd17 	ldw	r5,-12(fp)
 802f820:	e13ffe17 	ldw	r4,-8(fp)
 802f824:	8030f2c0 	call	8030f2c <soconnect>
 802f828:	1007883a 	mov	r3,r2
 802f82c:	e0bffe17 	ldw	r2,-8(fp)
 802f830:	10c00615 	stw	r3,24(r2)
 802f834:	e0bffe17 	ldw	r2,-8(fp)
 802f838:	10800617 	ldw	r2,24(r2)
 802f83c:	10001b1e 	bne	r2,zero,802f8ac <t_connect+0x1fc>
      goto bad;

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
 802f840:	e0bffe17 	ldw	r2,-8(fp)
 802f844:	1080088b 	ldhu	r2,34(r2)
 802f848:	10bfffcc 	andi	r2,r2,65535
 802f84c:	1080400c 	andi	r2,r2,256
 802f850:	10000d26 	beq	r2,zero,802f888 <t_connect+0x1d8>
 802f854:	e0bffe17 	ldw	r2,-8(fp)
 802f858:	1080088b 	ldhu	r2,34(r2)
 802f85c:	10bfffcc 	andi	r2,r2,65535
 802f860:	1080010c 	andi	r2,r2,4
 802f864:	10000826 	beq	r2,zero,802f888 <t_connect+0x1d8>
   {
      so->so_error = EINPROGRESS;
 802f868:	e0bffe17 	ldw	r2,-8(fp)
 802f86c:	00c01dc4 	movi	r3,119
 802f870:	10c00615 	stw	r3,24(r2)
      goto bad;
 802f874:	00001006 	br	802f8b8 <t_connect+0x208>
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   {
      tcp_sleep ((char *)&so->so_timeo);
 802f878:	e0bffe17 	ldw	r2,-8(fp)
 802f87c:	10800904 	addi	r2,r2,36
 802f880:	1009883a 	mov	r4,r2
 802f884:	80288c00 	call	80288c0 <tcp_sleep>
   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
 802f888:	e0bffe17 	ldw	r2,-8(fp)
 802f88c:	1080088b 	ldhu	r2,34(r2)
 802f890:	10bfffcc 	andi	r2,r2,65535
 802f894:	1080010c 	andi	r2,r2,4
 802f898:	10000626 	beq	r2,zero,802f8b4 <t_connect+0x204>
 802f89c:	e0bffe17 	ldw	r2,-8(fp)
 802f8a0:	10800617 	ldw	r2,24(r2)
 802f8a4:	103ff426 	beq	r2,zero,802f878 <t_connect+0x1c8>
   }
bad:
 802f8a8:	00000206 	br	802f8b4 <t_connect+0x204>
      goto bad;
 802f8ac:	0001883a 	nop
 802f8b0:	00000106 	br	802f8b8 <t_connect+0x208>
bad:
 802f8b4:	0001883a 	nop
   if (so->so_error != EINPROGRESS)
 802f8b8:	e0bffe17 	ldw	r2,-8(fp)
 802f8bc:	10800617 	ldw	r2,24(r2)
 802f8c0:	10801de0 	cmpeqi	r2,r2,119
 802f8c4:	1000071e 	bne	r2,zero,802f8e4 <t_connect+0x234>
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
 802f8c8:	e0bffe17 	ldw	r2,-8(fp)
 802f8cc:	10c0088b 	ldhu	r3,34(r2)
 802f8d0:	00b7fec4 	movi	r2,-8197
 802f8d4:	1884703a 	and	r2,r3,r2
 802f8d8:	1007883a 	mov	r3,r2
 802f8dc:	e0bffe17 	ldw	r2,-8(fp)
 802f8e0:	10c0088d 	sth	r3,34(r2)
   m_freem (nam);
 802f8e4:	e13ffd17 	ldw	r4,-12(fp)
 802f8e8:	802d4340 	call	802d434 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 802f8ec:	0009883a 	mov	r4,zero
 802f8f0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (so->so_error)
 802f8f4:	e0bffe17 	ldw	r2,-8(fp)
 802f8f8:	10800617 	ldw	r2,24(r2)
 802f8fc:	10000226 	beq	r2,zero,802f908 <t_connect+0x258>
   {
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;
 802f900:	00bfffc4 	movi	r2,-1
 802f904:	00000106 	br	802f90c <t_connect+0x25c>

   }
      return 0;
 802f908:	0005883a 	mov	r2,zero
}
 802f90c:	e037883a 	mov	sp,fp
 802f910:	dfc00117 	ldw	ra,4(sp)
 802f914:	df000017 	ldw	fp,0(sp)
 802f918:	dec00204 	addi	sp,sp,8
 802f91c:	f800283a 	ret

0802f920 <t_getpeername>:
 * RETURNS: 
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
 802f920:	defffb04 	addi	sp,sp,-20
 802f924:	dfc00415 	stw	ra,16(sp)
 802f928:	df000315 	stw	fp,12(sp)
 802f92c:	df000304 	addi	fp,sp,12
 802f930:	e13fff15 	stw	r4,-4(fp)
 802f934:	e17ffe15 	stw	r5,-8(fp)
 802f938:	e1bffd15 	stw	r6,-12(fp)
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
 802f93c:	01c00404 	movi	r7,16
 802f940:	e1bffd17 	ldw	r6,-12(fp)
 802f944:	e17ffe17 	ldw	r5,-8(fp)
 802f948:	e13fff17 	ldw	r4,-4(fp)
 802f94c:	802f9a80 	call	802f9a8 <t_getname>
}
 802f950:	e037883a 	mov	sp,fp
 802f954:	dfc00117 	ldw	ra,4(sp)
 802f958:	df000017 	ldw	fp,0(sp)
 802f95c:	dec00204 	addi	sp,sp,8
 802f960:	f800283a 	ret

0802f964 <t_getsockname>:
 * RETURNS: 
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
 802f964:	defffb04 	addi	sp,sp,-20
 802f968:	dfc00415 	stw	ra,16(sp)
 802f96c:	df000315 	stw	fp,12(sp)
 802f970:	df000304 	addi	fp,sp,12
 802f974:	e13fff15 	stw	r4,-4(fp)
 802f978:	e17ffe15 	stw	r5,-8(fp)
 802f97c:	e1bffd15 	stw	r6,-12(fp)
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
 802f980:	01c003c4 	movi	r7,15
 802f984:	e1bffd17 	ldw	r6,-12(fp)
 802f988:	e17ffe17 	ldw	r5,-8(fp)
 802f98c:	e13fff17 	ldw	r4,-4(fp)
 802f990:	802f9a80 	call	802f9a8 <t_getname>
}
 802f994:	e037883a 	mov	sp,fp
 802f998:	dfc00117 	ldw	ra,4(sp)
 802f99c:	df000017 	ldw	fp,0(sp)
 802f9a0:	dec00204 	addi	sp,sp,8
 802f9a4:	f800283a 	ret

0802f9a8 <t_getname>:
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 802f9a8:	defff604 	addi	sp,sp,-40
 802f9ac:	dfc00915 	stw	ra,36(sp)
 802f9b0:	df000815 	stw	fp,32(sp)
 802f9b4:	df000804 	addi	fp,sp,32
 802f9b8:	e13ffb15 	stw	r4,-20(fp)
 802f9bc:	e17ffa15 	stw	r5,-24(fp)
 802f9c0:	e1bff915 	stw	r6,-28(fp)
 802f9c4:	e1fff815 	stw	r7,-32(fp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 802f9c8:	e0bffb17 	ldw	r2,-20(fp)
 802f9cc:	10bff804 	addi	r2,r2,-32
 802f9d0:	100490ba 	slli	r2,r2,2
 802f9d4:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802f9d8:	008201b4 	movhi	r2,2054
 802f9dc:	10bc1704 	addi	r2,r2,-4004
 802f9e0:	e0bfff15 	stw	r2,-4(fp)
 802f9e4:	00000606 	br	802fa00 <t_getname+0x58>
 802f9e8:	e0ffff17 	ldw	r3,-4(fp)
 802f9ec:	e0bffe17 	ldw	r2,-8(fp)
 802f9f0:	18800626 	beq	r3,r2,802fa0c <t_getname+0x64>
 802f9f4:	e0bfff17 	ldw	r2,-4(fp)
 802f9f8:	10800017 	ldw	r2,0(r2)
 802f9fc:	e0bfff15 	stw	r2,-4(fp)
 802fa00:	e0bfff17 	ldw	r2,-4(fp)
 802fa04:	103ff81e 	bne	r2,zero,802f9e8 <t_getname+0x40>
 802fa08:	00000106 	br	802fa10 <t_getname+0x68>
 802fa0c:	0001883a 	nop
 802fa10:	e0ffff17 	ldw	r3,-4(fp)
 802fa14:	e0bffe17 	ldw	r2,-8(fp)
 802fa18:	18800326 	beq	r3,r2,802fa28 <t_getname+0x80>
 802fa1c:	802c3fc0 	call	802c3fc <dtrap>
 802fa20:	00bfffc4 	movi	r2,-1
 802fa24:	00005306 	br	802fb74 <t_getname+0x1cc>

   so->so_error = 0;
 802fa28:	e0bffe17 	ldw	r2,-8(fp)
 802fa2c:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 802fa30:	e0bff817 	ldw	r2,-32(fp)
 802fa34:	10800418 	cmpnei	r2,r2,16
 802fa38:	10000a1e 	bne	r2,zero,802fa64 <t_getname+0xbc>
 802fa3c:	e0bffe17 	ldw	r2,-8(fp)
 802fa40:	1080088b 	ldhu	r2,34(r2)
 802fa44:	10bfffcc 	andi	r2,r2,65535
 802fa48:	1080008c 	andi	r2,r2,2
 802fa4c:	1000051e 	bne	r2,zero,802fa64 <t_getname+0xbc>
   {
      so->so_error = ENOTCONN;
 802fa50:	e0bffe17 	ldw	r2,-8(fp)
 802fa54:	00c02004 	movi	r3,128
 802fa58:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802fa5c:	00bfffc4 	movi	r2,-1
 802fa60:	00004406 	br	802fb74 <t_getname+0x1cc>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 802fa64:	0009883a 	mov	r4,zero
 802fa68:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 802fa6c:	01400404 	movi	r5,16
 802fa70:	01000244 	movi	r4,9
 802fa74:	802d1a80 	call	802d1a8 <m_getnbuf>
 802fa78:	e0bffd15 	stw	r2,-12(fp)
   if (m == NULL) 
 802fa7c:	e0bffd17 	ldw	r2,-12(fp)
 802fa80:	1000071e 	bne	r2,zero,802faa0 <t_getname+0xf8>
   {
      so->so_error = ENOMEM;
 802fa84:	e0bffe17 	ldw	r2,-8(fp)
 802fa88:	00c00304 	movi	r3,12
 802fa8c:	10c00615 	stw	r3,24(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
 802fa90:	0009883a 	mov	r4,zero
 802fa94:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 802fa98:	00bfffc4 	movi	r2,-1
 802fa9c:	00003506 	br	802fb74 <t_getname+0x1cc>
   }
   so->so_req = opcode;
 802faa0:	e0bffe17 	ldw	r2,-8(fp)
 802faa4:	e0fff817 	ldw	r3,-32(fp)
 802faa8:	10c00715 	stw	r3,28(r2)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
 802faac:	e0bffe17 	ldw	r2,-8(fp)
 802fab0:	10800217 	ldw	r2,8(r2)
 802fab4:	10800317 	ldw	r2,12(r2)
 802fab8:	e1bffd17 	ldw	r6,-12(fp)
 802fabc:	000b883a 	mov	r5,zero
 802fac0:	e13ffe17 	ldw	r4,-8(fp)
 802fac4:	103ee83a 	callr	r2
 802fac8:	e0bffc15 	stw	r2,-16(fp)
 802facc:	e0bffc17 	ldw	r2,-16(fp)
 802fad0:	1000191e 	bne	r2,zero,802fb38 <t_getname+0x190>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
 802fad4:	e0bffe17 	ldw	r2,-8(fp)
 802fad8:	10800517 	ldw	r2,20(r2)
 802fadc:	10800098 	cmpnei	r2,r2,2
 802fae0:	1000171e 	bne	r2,zero,802fb40 <t_getname+0x198>
   {
      if(*addrlen < sizeof(struct sockaddr_in))
 802fae4:	e0bff917 	ldw	r2,-28(fp)
 802fae8:	10800017 	ldw	r2,0(r2)
 802faec:	10800428 	cmpgeui	r2,r2,16
 802faf0:	1000071e 	bne	r2,zero,802fb10 <t_getname+0x168>
      {
         dtrap();    /* programming error */
 802faf4:	802c3fc0 	call	802c3fc <dtrap>
         m_freem(m);
 802faf8:	e13ffd17 	ldw	r4,-12(fp)
 802fafc:	802d4340 	call	802d434 <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
 802fb00:	0009883a 	mov	r4,zero
 802fb04:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return EINVAL;
 802fb08:	00800584 	movi	r2,22
 802fb0c:	00001906 	br	802fb74 <t_getname+0x1cc>
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
 802fb10:	e0bffd17 	ldw	r2,-12(fp)
 802fb14:	10800317 	ldw	r2,12(r2)
 802fb18:	01800404 	movi	r6,16
 802fb1c:	100b883a 	mov	r5,r2
 802fb20:	e13ffa17 	ldw	r4,-24(fp)
 802fb24:	8002ea40 	call	8002ea4 <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
 802fb28:	e0bff917 	ldw	r2,-28(fp)
 802fb2c:	00c00404 	movi	r3,16
 802fb30:	10c00015 	stw	r3,0(r2)
 802fb34:	00000306 	br	802fb44 <t_getname+0x19c>
      goto bad;
 802fb38:	0001883a 	nop
 802fb3c:	00000106 	br	802fb44 <t_getname+0x19c>
      *addrlen = sizeof(struct sockaddr_in6);
   }
#endif   /* IP_V6 */


bad:
 802fb40:	0001883a 	nop
   m_freem(m);
 802fb44:	e13ffd17 	ldw	r4,-12(fp)
 802fb48:	802d4340 	call	802d434 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 802fb4c:	0009883a 	mov	r4,zero
 802fb50:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (err) 
 802fb54:	e0bffc17 	ldw	r2,-16(fp)
 802fb58:	10000526 	beq	r2,zero,802fb70 <t_getname+0x1c8>
   {
      so->so_error = err;
 802fb5c:	e0bffe17 	ldw	r2,-8(fp)
 802fb60:	e0fffc17 	ldw	r3,-16(fp)
 802fb64:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 802fb68:	00bfffc4 	movi	r2,-1
 802fb6c:	00000106 	br	802fb74 <t_getname+0x1cc>
   }
   return 0;
 802fb70:	0005883a 	mov	r2,zero
}
 802fb74:	e037883a 	mov	sp,fp
 802fb78:	dfc00117 	ldw	ra,4(sp)
 802fb7c:	df000017 	ldw	fp,0(sp)
 802fb80:	dec00204 	addi	sp,sp,8
 802fb84:	f800283a 	ret

0802fb88 <t_setsockopt>:
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 802fb88:	defff704 	addi	sp,sp,-36
 802fb8c:	dfc00815 	stw	ra,32(sp)
 802fb90:	df000715 	stw	fp,28(sp)
 802fb94:	df000704 	addi	fp,sp,28
 802fb98:	e13ffc15 	stw	r4,-16(fp)
 802fb9c:	e17ffb15 	stw	r5,-20(fp)
 802fba0:	e1bffa15 	stw	r6,-24(fp)
 802fba4:	e1fff915 	stw	r7,-28(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 802fba8:	e0bffc17 	ldw	r2,-16(fp)
 802fbac:	10bff804 	addi	r2,r2,-32
 802fbb0:	100490ba 	slli	r2,r2,2
 802fbb4:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802fbb8:	008201b4 	movhi	r2,2054
 802fbbc:	10bc1704 	addi	r2,r2,-4004
 802fbc0:	e0bfff15 	stw	r2,-4(fp)
 802fbc4:	00000606 	br	802fbe0 <t_setsockopt+0x58>
 802fbc8:	e0ffff17 	ldw	r3,-4(fp)
 802fbcc:	e0bffe17 	ldw	r2,-8(fp)
 802fbd0:	18800626 	beq	r3,r2,802fbec <t_setsockopt+0x64>
 802fbd4:	e0bfff17 	ldw	r2,-4(fp)
 802fbd8:	10800017 	ldw	r2,0(r2)
 802fbdc:	e0bfff15 	stw	r2,-4(fp)
 802fbe0:	e0bfff17 	ldw	r2,-4(fp)
 802fbe4:	103ff81e 	bne	r2,zero,802fbc8 <t_setsockopt+0x40>
 802fbe8:	00000106 	br	802fbf0 <t_setsockopt+0x68>
 802fbec:	0001883a 	nop
 802fbf0:	e0ffff17 	ldw	r3,-4(fp)
 802fbf4:	e0bffe17 	ldw	r2,-8(fp)
 802fbf8:	18800326 	beq	r3,r2,802fc08 <t_setsockopt+0x80>
 802fbfc:	802c3fc0 	call	802c3fc <dtrap>
 802fc00:	00bfffc4 	movi	r2,-1
 802fc04:	00004b06 	br	802fd34 <t_setsockopt+0x1ac>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 802fc08:	0009883a 	mov	r4,zero
 802fc0c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   so->so_error = 0;
 802fc10:	e0bffe17 	ldw	r2,-8(fp)
 802fc14:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 802fc18:	e0bffb17 	ldw	r2,-20(fp)
 802fc1c:	10800060 	cmpeqi	r2,r2,1
 802fc20:	10000e1e 	bne	r2,zero,802fc5c <t_setsockopt+0xd4>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
 802fc24:	e1bff917 	ldw	r6,-28(fp)
 802fc28:	e17ffa17 	ldw	r5,-24(fp)
 802fc2c:	e13ffe17 	ldw	r4,-8(fp)
 802fc30:	8031ec80 	call	8031ec8 <sosetopt>
 802fc34:	e0bffd15 	stw	r2,-12(fp)
 802fc38:	e0bffd17 	ldw	r2,-12(fp)
 802fc3c:	10003a26 	beq	r2,zero,802fd28 <t_setsockopt+0x1a0>
      {
         so->so_error = err;
 802fc40:	e0bffe17 	ldw	r2,-8(fp)
 802fc44:	e0fffd17 	ldw	r3,-12(fp)
 802fc48:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
 802fc4c:	0009883a 	mov	r4,zero
 802fc50:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 802fc54:	00bfffc4 	movi	r2,-1
 802fc58:	00003606 	br	802fd34 <t_setsockopt+0x1ac>
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
 802fc5c:	e0bffe17 	ldw	r2,-8(fp)
 802fc60:	10801f17 	ldw	r2,124(r2)
 802fc64:	10000f1e 	bne	r2,zero,802fca4 <t_setsockopt+0x11c>
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
 802fc68:	01000104 	movi	r4,4
 802fc6c:	802cf5c0 	call	802cf5c <npalloc>
 802fc70:	1007883a 	mov	r3,r2
 802fc74:	e0bffe17 	ldw	r2,-8(fp)
 802fc78:	10c01f15 	stw	r3,124(r2)
         if (!so->so_optsPack) 
 802fc7c:	e0bffe17 	ldw	r2,-8(fp)
 802fc80:	10801f17 	ldw	r2,124(r2)
 802fc84:	1000071e 	bne	r2,zero,802fca4 <t_setsockopt+0x11c>
         {
            so->so_error = ENOMEM;
 802fc88:	e0bffe17 	ldw	r2,-8(fp)
 802fc8c:	00c00304 	movi	r3,12
 802fc90:	10c00615 	stw	r3,24(r2)
            UNLOCK_NET_RESOURCE (NET_RESID);
 802fc94:	0009883a 	mov	r4,zero
 802fc98:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            return SOCKET_ERROR;
 802fc9c:	00bfffc4 	movi	r2,-1
 802fca0:	00002406 	br	802fd34 <t_setsockopt+0x1ac>
         }
      }
      
      if (name == IP_TTL_OPT)
 802fca4:	e0bffa17 	ldw	r2,-24(fp)
 802fca8:	10800118 	cmpnei	r2,r2,4
 802fcac:	1000061e 	bne	r2,zero,802fcc8 <t_setsockopt+0x140>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
 802fcb0:	e0bff917 	ldw	r2,-28(fp)
 802fcb4:	10c00017 	ldw	r3,0(r2)
 802fcb8:	e0bffe17 	ldw	r2,-8(fp)
 802fcbc:	10801f17 	ldw	r2,124(r2)
 802fcc0:	10c00045 	stb	r3,1(r2)
 802fcc4:	00001806 	br	802fd28 <t_setsockopt+0x1a0>
      else
      if (name == IP_TOS)
 802fcc8:	e0bffa17 	ldw	r2,-24(fp)
 802fccc:	108000d8 	cmpnei	r2,r2,3
 802fcd0:	1000061e 	bne	r2,zero,802fcec <t_setsockopt+0x164>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
 802fcd4:	e0bff917 	ldw	r2,-28(fp)
 802fcd8:	10c00017 	ldw	r3,0(r2)
 802fcdc:	e0bffe17 	ldw	r2,-8(fp)
 802fce0:	10801f17 	ldw	r2,124(r2)
 802fce4:	10c00005 	stb	r3,0(r2)
 802fce8:	00000f06 	br	802fd28 <t_setsockopt+0x1a0>
	   else
	   if (name == IP_SCOPEID)
 802fcec:	e0bffa17 	ldw	r2,-24(fp)
 802fcf0:	10800398 	cmpnei	r2,r2,14
 802fcf4:	1000081e 	bne	r2,zero,802fd18 <t_setsockopt+0x190>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
 802fcf8:	e0bff917 	ldw	r2,-28(fp)
 802fcfc:	10800017 	ldw	r2,0(r2)
 802fd00:	1007883a 	mov	r3,r2
 802fd04:	e0bffe17 	ldw	r2,-8(fp)
 802fd08:	10801f17 	ldw	r2,124(r2)
 802fd0c:	18c03fcc 	andi	r3,r3,255
 802fd10:	10c00115 	stw	r3,4(r2)
 802fd14:	00000406 	br	802fd28 <t_setsockopt+0x1a0>
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 802fd18:	0009883a 	mov	r4,zero
 802fd1c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 802fd20:	00bfffc4 	movi	r2,-1
 802fd24:	00000306 	br	802fd34 <t_setsockopt+0x1ac>
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
 802fd28:	0009883a 	mov	r4,zero
 802fd2c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return 0;
 802fd30:	0005883a 	mov	r2,zero
}
 802fd34:	e037883a 	mov	sp,fp
 802fd38:	dfc00117 	ldw	ra,4(sp)
 802fd3c:	df000017 	ldw	fp,0(sp)
 802fd40:	dec00204 	addi	sp,sp,8
 802fd44:	f800283a 	ret

0802fd48 <t_getsockopt>:
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 802fd48:	defff704 	addi	sp,sp,-36
 802fd4c:	dfc00815 	stw	ra,32(sp)
 802fd50:	df000715 	stw	fp,28(sp)
 802fd54:	df000704 	addi	fp,sp,28
 802fd58:	e13ffc15 	stw	r4,-16(fp)
 802fd5c:	e17ffb15 	stw	r5,-20(fp)
 802fd60:	e1bffa15 	stw	r6,-24(fp)
 802fd64:	e1fff915 	stw	r7,-28(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 802fd68:	e0bffc17 	ldw	r2,-16(fp)
 802fd6c:	10bff804 	addi	r2,r2,-32
 802fd70:	100490ba 	slli	r2,r2,2
 802fd74:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 802fd78:	008201b4 	movhi	r2,2054
 802fd7c:	10bc1704 	addi	r2,r2,-4004
 802fd80:	e0bfff15 	stw	r2,-4(fp)
 802fd84:	00000606 	br	802fda0 <t_getsockopt+0x58>
 802fd88:	e0ffff17 	ldw	r3,-4(fp)
 802fd8c:	e0bffe17 	ldw	r2,-8(fp)
 802fd90:	18800626 	beq	r3,r2,802fdac <t_getsockopt+0x64>
 802fd94:	e0bfff17 	ldw	r2,-4(fp)
 802fd98:	10800017 	ldw	r2,0(r2)
 802fd9c:	e0bfff15 	stw	r2,-4(fp)
 802fda0:	e0bfff17 	ldw	r2,-4(fp)
 802fda4:	103ff81e 	bne	r2,zero,802fd88 <t_getsockopt+0x40>
 802fda8:	00000106 	br	802fdb0 <t_getsockopt+0x68>
 802fdac:	0001883a 	nop
 802fdb0:	e0ffff17 	ldw	r3,-4(fp)
 802fdb4:	e0bffe17 	ldw	r2,-8(fp)
 802fdb8:	18800326 	beq	r3,r2,802fdc8 <t_getsockopt+0x80>
 802fdbc:	802c3fc0 	call	802c3fc <dtrap>
 802fdc0:	00bfffc4 	movi	r2,-1
 802fdc4:	00003d06 	br	802febc <t_getsockopt+0x174>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 802fdc8:	0009883a 	mov	r4,zero
 802fdcc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 802fdd0:	e0bffb17 	ldw	r2,-20(fp)
 802fdd4:	10800060 	cmpeqi	r2,r2,1
 802fdd8:	10000e1e 	bne	r2,zero,802fe14 <t_getsockopt+0xcc>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
 802fddc:	e1bff917 	ldw	r6,-28(fp)
 802fde0:	e17ffa17 	ldw	r5,-24(fp)
 802fde4:	e13ffe17 	ldw	r4,-8(fp)
 802fde8:	80323f00 	call	80323f0 <sogetopt>
 802fdec:	e0bffd15 	stw	r2,-12(fp)
 802fdf0:	e0bffd17 	ldw	r2,-12(fp)
 802fdf4:	10002c26 	beq	r2,zero,802fea8 <t_getsockopt+0x160>
      {
         so->so_error = err;
 802fdf8:	e0bffe17 	ldw	r2,-8(fp)
 802fdfc:	e0fffd17 	ldw	r3,-12(fp)
 802fe00:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
 802fe04:	0009883a 	mov	r4,zero
 802fe08:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 802fe0c:	00bfffc4 	movi	r2,-1
 802fe10:	00002a06 	br	802febc <t_getsockopt+0x174>
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
 802fe14:	e0bffa17 	ldw	r2,-24(fp)
 802fe18:	10800118 	cmpnei	r2,r2,4
 802fe1c:	10000e1e 	bne	r2,zero,802fe58 <t_getsockopt+0x110>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
 802fe20:	e0bffe17 	ldw	r2,-8(fp)
 802fe24:	10801f17 	ldw	r2,124(r2)
 802fe28:	1000041e 	bne	r2,zero,802fe3c <t_getsockopt+0xf4>
 802fe2c:	e0bff917 	ldw	r2,-28(fp)
 802fe30:	00c01004 	movi	r3,64
 802fe34:	10c00015 	stw	r3,0(r2)
 802fe38:	00001b06 	br	802fea8 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
 802fe3c:	e0bffe17 	ldw	r2,-8(fp)
 802fe40:	10801f17 	ldw	r2,124(r2)
 802fe44:	10800043 	ldbu	r2,1(r2)
 802fe48:	10c03fcc 	andi	r3,r2,255
 802fe4c:	e0bff917 	ldw	r2,-28(fp)
 802fe50:	10c00015 	stw	r3,0(r2)
 802fe54:	00001406 	br	802fea8 <t_getsockopt+0x160>
      }
      else if (name == IP_TOS)
 802fe58:	e0bffa17 	ldw	r2,-24(fp)
 802fe5c:	108000d8 	cmpnei	r2,r2,3
 802fe60:	10000d1e 	bne	r2,zero,802fe98 <t_getsockopt+0x150>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
 802fe64:	e0bffe17 	ldw	r2,-8(fp)
 802fe68:	10801f17 	ldw	r2,124(r2)
 802fe6c:	1000031e 	bne	r2,zero,802fe7c <t_getsockopt+0x134>
 802fe70:	e0bff917 	ldw	r2,-28(fp)
 802fe74:	10000015 	stw	zero,0(r2)
 802fe78:	00000b06 	br	802fea8 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
 802fe7c:	e0bffe17 	ldw	r2,-8(fp)
 802fe80:	10801f17 	ldw	r2,124(r2)
 802fe84:	10800003 	ldbu	r2,0(r2)
 802fe88:	10c03fcc 	andi	r3,r2,255
 802fe8c:	e0bff917 	ldw	r2,-28(fp)
 802fe90:	10c00015 	stw	r3,0(r2)
 802fe94:	00000406 	br	802fea8 <t_getsockopt+0x160>
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 802fe98:	0009883a 	mov	r4,zero
 802fe9c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 802fea0:	00bfffc4 	movi	r2,-1
 802fea4:	00000506 	br	802febc <t_getsockopt+0x174>
      }
   }   
   so->so_error = 0;
 802fea8:	e0bffe17 	ldw	r2,-8(fp)
 802feac:	10000615 	stw	zero,24(r2)

   UNLOCK_NET_RESOURCE (NET_RESID);
 802feb0:	0009883a 	mov	r4,zero
 802feb4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return 0;
 802feb8:	0005883a 	mov	r2,zero
}
 802febc:	e037883a 	mov	sp,fp
 802fec0:	dfc00117 	ldw	ra,4(sp)
 802fec4:	df000017 	ldw	fp,0(sp)
 802fec8:	dec00204 	addi	sp,sp,8
 802fecc:	f800283a 	ret

0802fed0 <t_recv>:
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 802fed0:	defff604 	addi	sp,sp,-40
 802fed4:	dfc00915 	stw	ra,36(sp)
 802fed8:	df000815 	stw	fp,32(sp)
 802fedc:	df000804 	addi	fp,sp,32
 802fee0:	e13ffc15 	stw	r4,-16(fp)
 802fee4:	e17ffb15 	stw	r5,-20(fp)
 802fee8:	e1bffa15 	stw	r6,-24(fp)
 802feec:	e1fff915 	stw	r7,-28(fp)
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
 802fef0:	e0bffa17 	ldw	r2,-24(fp)
 802fef4:	e0bfff15 	stw	r2,-4(fp)

   so = LONG2SO(s);
 802fef8:	e0bffc17 	ldw	r2,-16(fp)
 802fefc:	10bff804 	addi	r2,r2,-32
 802ff00:	100490ba 	slli	r2,r2,2
 802ff04:	e0bffe15 	stw	r2,-8(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 802ff08:	e0bffe17 	ldw	r2,-8(fp)
 802ff0c:	1080088b 	ldhu	r2,34(r2)
 802ff10:	10bfffcc 	andi	r2,r2,65535
 802ff14:	1080038c 	andi	r2,r2,14
 802ff18:	108000a0 	cmpeqi	r2,r2,2
 802ff1c:	1000051e 	bne	r2,zero,802ff34 <t_recv+0x64>
   {
      so->so_error = EPIPE;
 802ff20:	e0bffe17 	ldw	r2,-8(fp)
 802ff24:	00c00804 	movi	r3,32
 802ff28:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 802ff2c:	00bfffc4 	movi	r2,-1
 802ff30:	00001906 	br	802ff98 <t_recv+0xc8>
   }
   so->so_error = 0;
 802ff34:	e0bffe17 	ldw	r2,-8(fp)
 802ff38:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 802ff3c:	0009883a 	mov	r4,zero
 802ff40:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
 802ff44:	e0fffa04 	addi	r3,fp,-24
 802ff48:	e0bff917 	ldw	r2,-28(fp)
 802ff4c:	d8800015 	stw	r2,0(sp)
 802ff50:	180f883a 	mov	r7,r3
 802ff54:	e1bffb17 	ldw	r6,-20(fp)
 802ff58:	000b883a 	mov	r5,zero
 802ff5c:	e13ffe17 	ldw	r4,-8(fp)
 802ff60:	80315dc0 	call	80315dc <soreceive>
 802ff64:	e0bffd15 	stw	r2,-12(fp)
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
 802ff68:	0009883a 	mov	r4,zero
 802ff6c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if(err)
 802ff70:	e0bffd17 	ldw	r2,-12(fp)
 802ff74:	10000526 	beq	r2,zero,802ff8c <t_recv+0xbc>
   {
      so->so_error = err;
 802ff78:	e0bffe17 	ldw	r2,-8(fp)
 802ff7c:	e0fffd17 	ldw	r3,-12(fp)
 802ff80:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 802ff84:	00bfffc4 	movi	r2,-1
 802ff88:	00000306 	br	802ff98 <t_recv+0xc8>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
 802ff8c:	e0bffa17 	ldw	r2,-24(fp)
 802ff90:	e0ffff17 	ldw	r3,-4(fp)
 802ff94:	1885c83a 	sub	r2,r3,r2
}
 802ff98:	e037883a 	mov	sp,fp
 802ff9c:	dfc00117 	ldw	ra,4(sp)
 802ffa0:	df000017 	ldw	fp,0(sp)
 802ffa4:	dec00204 	addi	sp,sp,8
 802ffa8:	f800283a 	ret

0802ffac <t_recvfrom>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 802ffac:	defff404 	addi	sp,sp,-48
 802ffb0:	dfc00b15 	stw	ra,44(sp)
 802ffb4:	df000a15 	stw	fp,40(sp)
 802ffb8:	df000a04 	addi	fp,sp,40
 802ffbc:	e13ffa15 	stw	r4,-24(fp)
 802ffc0:	e17ff915 	stw	r5,-28(fp)
 802ffc4:	e1bff815 	stw	r6,-32(fp)
 802ffc8:	e1fff715 	stw	r7,-36(fp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
 802ffcc:	e03ffb15 	stw	zero,-20(fp)
   int   err;
   int   sendlen = len;
 802ffd0:	e0bff817 	ldw	r2,-32(fp)
 802ffd4:	e0bffe15 	stw	r2,-8(fp)

   so = LONG2SO(s);
 802ffd8:	e0bffa17 	ldw	r2,-24(fp)
 802ffdc:	10bff804 	addi	r2,r2,-32
 802ffe0:	100490ba 	slli	r2,r2,2
 802ffe4:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 802ffe8:	008201b4 	movhi	r2,2054
 802ffec:	10bc1704 	addi	r2,r2,-4004
 802fff0:	e0bfff15 	stw	r2,-4(fp)
 802fff4:	00000606 	br	8030010 <t_recvfrom+0x64>
 802fff8:	e0ffff17 	ldw	r3,-4(fp)
 802fffc:	e0bffd17 	ldw	r2,-12(fp)
 8030000:	18800626 	beq	r3,r2,803001c <t_recvfrom+0x70>
 8030004:	e0bfff17 	ldw	r2,-4(fp)
 8030008:	10800017 	ldw	r2,0(r2)
 803000c:	e0bfff15 	stw	r2,-4(fp)
 8030010:	e0bfff17 	ldw	r2,-4(fp)
 8030014:	103ff81e 	bne	r2,zero,802fff8 <t_recvfrom+0x4c>
 8030018:	00000106 	br	8030020 <t_recvfrom+0x74>
 803001c:	0001883a 	nop
 8030020:	e0ffff17 	ldw	r3,-4(fp)
 8030024:	e0bffd17 	ldw	r2,-12(fp)
 8030028:	18800326 	beq	r3,r2,8030038 <t_recvfrom+0x8c>
 803002c:	802c3fc0 	call	802c3fc <dtrap>
 8030030:	00bfffc4 	movi	r2,-1
 8030034:	00002706 	br	80300d4 <t_recvfrom+0x128>
   so->so_error = 0;
 8030038:	e0bffd17 	ldw	r2,-12(fp)
 803003c:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 8030040:	0009883a 	mov	r4,zero
 8030044:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
 8030048:	e13ff804 	addi	r4,fp,-32
 803004c:	e0fffb04 	addi	r3,fp,-20
 8030050:	e0bff717 	ldw	r2,-36(fp)
 8030054:	d8800015 	stw	r2,0(sp)
 8030058:	200f883a 	mov	r7,r4
 803005c:	e1bff917 	ldw	r6,-28(fp)
 8030060:	180b883a 	mov	r5,r3
 8030064:	e13ffd17 	ldw	r4,-12(fp)
 8030068:	80315dc0 	call	80315dc <soreceive>
 803006c:	e0bffc15 	stw	r2,-16(fp)

   /* copy sender info from mbuf to sockaddr */
   if (sender)
 8030070:	e0bffb17 	ldw	r2,-20(fp)
 8030074:	10000b26 	beq	r2,zero,80300a4 <t_recvfrom+0xf8>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
 8030078:	e0bffb17 	ldw	r2,-20(fp)
 803007c:	10c00317 	ldw	r3,12(r2)
 8030080:	e0800317 	ldw	r2,12(fp)
 8030084:	10800017 	ldw	r2,0(r2)
 8030088:	100d883a 	mov	r6,r2
 803008c:	180b883a 	mov	r5,r3
 8030090:	e1000217 	ldw	r4,8(fp)
 8030094:	8002ea40 	call	8002ea4 <memcpy>
      m_freem (sender);
 8030098:	e0bffb17 	ldw	r2,-20(fp)
 803009c:	1009883a 	mov	r4,r2
 80300a0:	802d4340 	call	802d434 <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 80300a4:	0009883a 	mov	r4,zero
 80300a8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if(err)
 80300ac:	e0bffc17 	ldw	r2,-16(fp)
 80300b0:	10000526 	beq	r2,zero,80300c8 <t_recvfrom+0x11c>
   {
      so->so_error = err;
 80300b4:	e0bffd17 	ldw	r2,-12(fp)
 80300b8:	e0fffc17 	ldw	r3,-16(fp)
 80300bc:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80300c0:	00bfffc4 	movi	r2,-1
 80300c4:	00000306 	br	80300d4 <t_recvfrom+0x128>
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
 80300c8:	e0bff817 	ldw	r2,-32(fp)
 80300cc:	e0fffe17 	ldw	r3,-8(fp)
 80300d0:	1885c83a 	sub	r2,r3,r2
}
 80300d4:	e037883a 	mov	sp,fp
 80300d8:	dfc00117 	ldw	ra,4(sp)
 80300dc:	df000017 	ldw	fp,0(sp)
 80300e0:	dec00204 	addi	sp,sp,8
 80300e4:	f800283a 	ret

080300e8 <t_sendto>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 80300e8:	defff404 	addi	sp,sp,-48
 80300ec:	dfc00b15 	stw	ra,44(sp)
 80300f0:	df000a15 	stw	fp,40(sp)
 80300f4:	df000a04 	addi	fp,sp,40
 80300f8:	e13ffa15 	stw	r4,-24(fp)
 80300fc:	e17ff915 	stw	r5,-28(fp)
 8030100:	e1bff815 	stw	r6,-32(fp)
 8030104:	e1fff715 	stw	r7,-36(fp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 8030108:	e0bffa17 	ldw	r2,-24(fp)
 803010c:	10bff804 	addi	r2,r2,-32
 8030110:	100490ba 	slli	r2,r2,2
 8030114:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 8030118:	008201b4 	movhi	r2,2054
 803011c:	10bc1704 	addi	r2,r2,-4004
 8030120:	e0bffe15 	stw	r2,-8(fp)
 8030124:	00000606 	br	8030140 <t_sendto+0x58>
 8030128:	e0fffe17 	ldw	r3,-8(fp)
 803012c:	e0bffd17 	ldw	r2,-12(fp)
 8030130:	18800626 	beq	r3,r2,803014c <t_sendto+0x64>
 8030134:	e0bffe17 	ldw	r2,-8(fp)
 8030138:	10800017 	ldw	r2,0(r2)
 803013c:	e0bffe15 	stw	r2,-8(fp)
 8030140:	e0bffe17 	ldw	r2,-8(fp)
 8030144:	103ff81e 	bne	r2,zero,8030128 <t_sendto+0x40>
 8030148:	00000106 	br	8030150 <t_sendto+0x68>
 803014c:	0001883a 	nop
 8030150:	e0fffe17 	ldw	r3,-8(fp)
 8030154:	e0bffd17 	ldw	r2,-12(fp)
 8030158:	18800326 	beq	r3,r2,8030168 <t_sendto+0x80>
 803015c:	802c3fc0 	call	802c3fc <dtrap>
 8030160:	00bfffc4 	movi	r2,-1
 8030164:	00005a06 	br	80302d0 <t_sendto+0x1e8>
   so->so_error = 0;
 8030168:	e0bffd17 	ldw	r2,-12(fp)
 803016c:	10000615 	stw	zero,24(r2)

   switch (so->so_type)
 8030170:	e0bffd17 	ldw	r2,-12(fp)
 8030174:	10800983 	ldbu	r2,38(r2)
 8030178:	10803fcc 	andi	r2,r2,255
 803017c:	1080201c 	xori	r2,r2,128
 8030180:	10bfe004 	addi	r2,r2,-128
 8030184:	10c000e0 	cmpeqi	r3,r2,3
 8030188:	1800101e 	bne	r3,zero,80301cc <t_sendto+0xe4>
 803018c:	10c00108 	cmpgei	r3,r2,4
 8030190:	1800151e 	bne	r3,zero,80301e8 <t_sendto+0x100>
 8030194:	10c00060 	cmpeqi	r3,r2,1
 8030198:	1800031e 	bne	r3,zero,80301a8 <t_sendto+0xc0>
 803019c:	108000a0 	cmpeqi	r2,r2,2
 80301a0:	1000071e 	bne	r2,zero,80301c0 <t_sendto+0xd8>
 80301a4:	00001006 	br	80301e8 <t_sendto+0x100>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
 80301a8:	e1fff717 	ldw	r7,-36(fp)
 80301ac:	e1bff817 	ldw	r6,-32(fp)
 80301b0:	e17ff917 	ldw	r5,-28(fp)
 80301b4:	e13ffa17 	ldw	r4,-24(fp)
 80301b8:	80302e40 	call	80302e4 <t_send>
 80301bc:	00004406 	br	80302d0 <t_sendto+0x1e8>
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
 80301c0:	804427c0 	call	804427c <udp_maxalloc>
 80301c4:	e0bffb15 	stw	r2,-20(fp)
      break;
 80301c8:	00000d06 	br	8030200 <t_sendto+0x118>
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 80301cc:	e0bffd17 	ldw	r2,-12(fp)
 80301d0:	10800417 	ldw	r2,16(r2)
 80301d4:	1088000c 	andi	r2,r2,8192
 80301d8:	1009883a 	mov	r4,r2
 80301dc:	8042fc80 	call	8042fc8 <ip_raw_maxalloc>
 80301e0:	e0bffb15 	stw	r2,-20(fp)
      break;
 80301e4:	00000606 	br	8030200 <t_sendto+0x118>
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
 80301e8:	802c3fc0 	call	802c3fc <dtrap>
      so->so_error = EFAULT;
 80301ec:	e0bffd17 	ldw	r2,-12(fp)
 80301f0:	00c00384 	movi	r3,14
 80301f4:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80301f8:	00bfffc4 	movi	r2,-1
 80301fc:	00003406 	br	80302d0 <t_sendto+0x1e8>
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
 8030200:	e0fffb17 	ldw	r3,-20(fp)
 8030204:	e0bff817 	ldw	r2,-32(fp)
 8030208:	1880050e 	bge	r3,r2,8030220 <t_sendto+0x138>
   {
      so->so_error = EMSGSIZE;
 803020c:	e0bffd17 	ldw	r2,-12(fp)
 8030210:	00c01e84 	movi	r3,122
 8030214:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8030218:	00bfffc4 	movi	r2,-1
 803021c:	00002c06 	br	80302d0 <t_sendto+0x1e8>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
 8030220:	e0800217 	ldw	r2,8(fp)
 8030224:	10000c26 	beq	r2,zero,8030258 <t_sendto+0x170>
   {
      name = sockargs(to, tolen, MT_SONAME);
 8030228:	01800244 	movi	r6,9
 803022c:	e1400317 	ldw	r5,12(fp)
 8030230:	e1000217 	ldw	r4,8(fp)
 8030234:	80306780 	call	8030678 <sockargs>
 8030238:	e0bfff15 	stw	r2,-4(fp)
      if(name == NULL)
 803023c:	e0bfff17 	ldw	r2,-4(fp)
 8030240:	1000061e 	bne	r2,zero,803025c <t_sendto+0x174>
      {
         so->so_error = ENOMEM;
 8030244:	e0bffd17 	ldw	r2,-12(fp)
 8030248:	00c00304 	movi	r3,12
 803024c:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 8030250:	00bfffc4 	movi	r2,-1
 8030254:	00001e06 	br	80302d0 <t_sendto+0x1e8>
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
 8030258:	e03fff15 	stw	zero,-4(fp)
   
   sendlen = len;
 803025c:	e0bff817 	ldw	r2,-32(fp)
 8030260:	e0bffb15 	stw	r2,-20(fp)

   LOCK_NET_RESOURCE(NET_RESID);
 8030264:	0009883a 	mov	r4,zero
 8030268:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
 803026c:	e0fffb04 	addi	r3,fp,-20
 8030270:	e0bff717 	ldw	r2,-36(fp)
 8030274:	d8800015 	stw	r2,0(sp)
 8030278:	180f883a 	mov	r7,r3
 803027c:	e1bff917 	ldw	r6,-28(fp)
 8030280:	e17fff17 	ldw	r5,-4(fp)
 8030284:	e13ffd17 	ldw	r4,-12(fp)
 8030288:	803107c0 	call	803107c <sosend>
 803028c:	e0bffc15 	stw	r2,-16(fp)

   if (name)
 8030290:	e0bfff17 	ldw	r2,-4(fp)
 8030294:	10000226 	beq	r2,zero,80302a0 <t_sendto+0x1b8>
      m_freem(name);
 8030298:	e13fff17 	ldw	r4,-4(fp)
 803029c:	802d4340 	call	802d434 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 80302a0:	0009883a 	mov	r4,zero
 80302a4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (err != 0)
 80302a8:	e0bffc17 	ldw	r2,-16(fp)
 80302ac:	10000526 	beq	r2,zero,80302c4 <t_sendto+0x1dc>
   {
      so->so_error = err;
 80302b0:	e0bffd17 	ldw	r2,-12(fp)
 80302b4:	e0fffc17 	ldw	r3,-16(fp)
 80302b8:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 80302bc:	00bfffc4 	movi	r2,-1
 80302c0:	00000306 	br	80302d0 <t_sendto+0x1e8>
   }

   return (len - sendlen);
 80302c4:	e0bffb17 	ldw	r2,-20(fp)
 80302c8:	e0fff817 	ldw	r3,-32(fp)
 80302cc:	1885c83a 	sub	r2,r3,r2
}
 80302d0:	e037883a 	mov	sp,fp
 80302d4:	dfc00117 	ldw	ra,4(sp)
 80302d8:	df000017 	ldw	fp,0(sp)
 80302dc:	dec00204 	addi	sp,sp,8
 80302e0:	f800283a 	ret

080302e4 <t_send>:
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 80302e4:	defff104 	addi	sp,sp,-60
 80302e8:	dfc00e15 	stw	ra,56(sp)
 80302ec:	df000d15 	stw	fp,52(sp)
 80302f0:	df000d04 	addi	fp,sp,52
 80302f4:	e13ff815 	stw	r4,-32(fp)
 80302f8:	e17ff715 	stw	r5,-36(fp)
 80302fc:	e1bff615 	stw	r6,-40(fp)
 8030300:	e1fff515 	stw	r7,-44(fp)
   struct socket *   so;
   int   e;       /* error holder */
   int   total_sent  =  0;
 8030304:	e03fff15 	stw	zero,-4(fp)
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 8030308:	e0bff817 	ldw	r2,-32(fp)
 803030c:	10bff804 	addi	r2,r2,-32
 8030310:	100490ba 	slli	r2,r2,2
 8030314:	e0bffd15 	stw	r2,-12(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 8030318:	e0bffd17 	ldw	r2,-12(fp)
 803031c:	1080088b 	ldhu	r2,34(r2)
 8030320:	10bfffcc 	andi	r2,r2,65535
 8030324:	1080038c 	andi	r2,r2,14
 8030328:	108000a0 	cmpeqi	r2,r2,2
 803032c:	1000051e 	bne	r2,zero,8030344 <t_send+0x60>
   {
      so->so_error = EPIPE;
 8030330:	e0bffd17 	ldw	r2,-12(fp)
 8030334:	00c00804 	movi	r3,32
 8030338:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 803033c:	00bfffc4 	movi	r2,-1
 8030340:	00006306 	br	80304d0 <t_send+0x1ec>
   }
   so->so_error = 0;
 8030344:	e0bffd17 	ldw	r2,-12(fp)
 8030348:	10000615 	stw	zero,24(r2)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
 803034c:	e0bffd17 	ldw	r2,-12(fp)
 8030350:	10800983 	ldbu	r2,38(r2)
 8030354:	10803fcc 	andi	r2,r2,255
 8030358:	1080201c 	xori	r2,r2,128
 803035c:	10bfe004 	addi	r2,r2,-128
 8030360:	10800060 	cmpeqi	r2,r2,1
 8030364:	1000081e 	bne	r2,zero,8030388 <t_send+0xa4>
      return(t_sendto(s, buf, len, flags, NULL, 0));
 8030368:	d8000115 	stw	zero,4(sp)
 803036c:	d8000015 	stw	zero,0(sp)
 8030370:	e1fff517 	ldw	r7,-44(fp)
 8030374:	e1bff617 	ldw	r6,-40(fp)
 8030378:	e17ff717 	ldw	r5,-36(fp)
 803037c:	e13ff817 	ldw	r4,-32(fp)
 8030380:	80300e80 	call	80300e8 <t_sendto>
 8030384:	00005206 	br	80304d0 <t_send+0x1ec>

   maxpkt = TCP_MSS;
 8030388:	00816d04 	movi	r2,1460
 803038c:	e0bffe15 	stw	r2,-8(fp)
   if(so->so_pcb)
 8030390:	e0bffd17 	ldw	r2,-12(fp)
 8030394:	10800117 	ldw	r2,4(r2)
 8030398:	10004826 	beq	r2,zero,80304bc <t_send+0x1d8>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
 803039c:	e0bffd17 	ldw	r2,-12(fp)
 80303a0:	10800117 	ldw	r2,4(r2)
 80303a4:	10800917 	ldw	r2,36(r2)
 80303a8:	e0bffc15 	stw	r2,-16(fp)
      if(tp->t_maxseg)              /* Make sure it's set */
 80303ac:	e0bffc17 	ldw	r2,-16(fp)
 80303b0:	10800a0b 	ldhu	r2,40(r2)
 80303b4:	10bfffcc 	andi	r2,r2,65535
 80303b8:	10004026 	beq	r2,zero,80304bc <t_send+0x1d8>
         maxpkt = tp->t_maxseg;
 80303bc:	e0bffc17 	ldw	r2,-16(fp)
 80303c0:	10800a0b 	ldhu	r2,40(r2)
 80303c4:	10bfffcc 	andi	r2,r2,65535
 80303c8:	e0bffe15 	stw	r2,-8(fp)
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 80303cc:	00003b06 	br	80304bc <t_send+0x1d8>
   {
      if (len > maxpkt)
 80303d0:	e0bff617 	ldw	r2,-40(fp)
 80303d4:	e0fffe17 	ldw	r3,-8(fp)
 80303d8:	1880030e 	bge	r3,r2,80303e8 <t_send+0x104>
         sendlen = maxpkt;  /* take biggest block we can */
 80303dc:	e0bffe17 	ldw	r2,-8(fp)
 80303e0:	e0bff915 	stw	r2,-28(fp)
 80303e4:	00000206 	br	80303f0 <t_send+0x10c>
      else
         sendlen = len;
 80303e8:	e0bff617 	ldw	r2,-40(fp)
 80303ec:	e0bff915 	stw	r2,-28(fp)
      sent = sendlen;
 80303f0:	e0bff917 	ldw	r2,-28(fp)
 80303f4:	e0bffb15 	stw	r2,-20(fp)

      LOCK_NET_RESOURCE(NET_RESID);
 80303f8:	0009883a 	mov	r4,zero
 80303fc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
 8030400:	e0fff904 	addi	r3,fp,-28
 8030404:	e0bff517 	ldw	r2,-44(fp)
 8030408:	d8800015 	stw	r2,0(sp)
 803040c:	180f883a 	mov	r7,r3
 8030410:	e1bff717 	ldw	r6,-36(fp)
 8030414:	000b883a 	mov	r5,zero
 8030418:	e13ffd17 	ldw	r4,-12(fp)
 803041c:	803107c0 	call	803107c <sosend>
 8030420:	e0bffa15 	stw	r2,-24(fp)
      UNLOCK_NET_RESOURCE(NET_RESID);
 8030424:	0009883a 	mov	r4,zero
 8030428:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
 803042c:	e0bffa17 	ldw	r2,-24(fp)
 8030430:	10001026 	beq	r2,zero,8030474 <t_send+0x190>
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
 8030434:	e0bffa17 	ldw	r2,-24(fp)
 8030438:	10801a60 	cmpeqi	r2,r2,105
 803043c:	1000031e 	bne	r2,zero,803044c <t_send+0x168>
 8030440:	e0bffa17 	ldw	r2,-24(fp)
 8030444:	108002d8 	cmpnei	r2,r2,11
 8030448:	1000051e 	bne	r2,zero,8030460 <t_send+0x17c>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
 803044c:	e0bfff17 	ldw	r2,-4(fp)
 8030450:	10000326 	beq	r2,zero,8030460 <t_send+0x17c>
            {
               so->so_error = 0;
 8030454:	e0bffd17 	ldw	r2,-12(fp)
 8030458:	10000615 	stw	zero,24(r2)
               break;      /* break out of while(len) loop */
 803045c:	00001b06 	br	80304cc <t_send+0x1e8>
            }
         }
         so->so_error = e;
 8030460:	e0bffd17 	ldw	r2,-12(fp)
 8030464:	e0fffa17 	ldw	r3,-24(fp)
 8030468:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
 803046c:	00bfffc4 	movi	r2,-1
 8030470:	00001706 	br	80304d0 <t_send+0x1ec>
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
 8030474:	e0bff917 	ldw	r2,-28(fp)
 8030478:	1000131e 	bne	r2,zero,80304c8 <t_send+0x1e4>
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
 803047c:	e0bff917 	ldw	r2,-28(fp)
 8030480:	e0fffb17 	ldw	r3,-20(fp)
 8030484:	1885c83a 	sub	r2,r3,r2
 8030488:	e0bffb15 	stw	r2,-20(fp)
      buf += sent;
 803048c:	e0bffb17 	ldw	r2,-20(fp)
 8030490:	e0fff717 	ldw	r3,-36(fp)
 8030494:	1885883a 	add	r2,r3,r2
 8030498:	e0bff715 	stw	r2,-36(fp)
      len -= sent;
 803049c:	e0fff617 	ldw	r3,-40(fp)
 80304a0:	e0bffb17 	ldw	r2,-20(fp)
 80304a4:	1885c83a 	sub	r2,r3,r2
 80304a8:	e0bff615 	stw	r2,-40(fp)
      total_sent += sent;
 80304ac:	e0ffff17 	ldw	r3,-4(fp)
 80304b0:	e0bffb17 	ldw	r2,-20(fp)
 80304b4:	1885883a 	add	r2,r3,r2
 80304b8:	e0bfff15 	stw	r2,-4(fp)
   while (len)
 80304bc:	e0bff617 	ldw	r2,-40(fp)
 80304c0:	103fc31e 	bne	r2,zero,80303d0 <t_send+0xec>
 80304c4:	00000106 	br	80304cc <t_send+0x1e8>
         break;         /* break out of while(len) loop */
 80304c8:	0001883a 	nop
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
 80304cc:	e0bfff17 	ldw	r2,-4(fp)
}
 80304d0:	e037883a 	mov	sp,fp
 80304d4:	dfc00117 	ldw	ra,4(sp)
 80304d8:	df000017 	ldw	fp,0(sp)
 80304dc:	dec00204 	addi	sp,sp,8
 80304e0:	f800283a 	ret

080304e4 <t_shutdown>:
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 80304e4:	defff904 	addi	sp,sp,-28
 80304e8:	dfc00615 	stw	ra,24(sp)
 80304ec:	df000515 	stw	fp,20(sp)
 80304f0:	df000504 	addi	fp,sp,20
 80304f4:	e13ffc15 	stw	r4,-16(fp)
 80304f8:	e17ffb15 	stw	r5,-20(fp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 80304fc:	e0bffc17 	ldw	r2,-16(fp)
 8030500:	10bff804 	addi	r2,r2,-32
 8030504:	100490ba 	slli	r2,r2,2
 8030508:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 803050c:	008201b4 	movhi	r2,2054
 8030510:	10bc1704 	addi	r2,r2,-4004
 8030514:	e0bfff15 	stw	r2,-4(fp)
 8030518:	00000606 	br	8030534 <t_shutdown+0x50>
 803051c:	e0ffff17 	ldw	r3,-4(fp)
 8030520:	e0bffe17 	ldw	r2,-8(fp)
 8030524:	18800626 	beq	r3,r2,8030540 <t_shutdown+0x5c>
 8030528:	e0bfff17 	ldw	r2,-4(fp)
 803052c:	10800017 	ldw	r2,0(r2)
 8030530:	e0bfff15 	stw	r2,-4(fp)
 8030534:	e0bfff17 	ldw	r2,-4(fp)
 8030538:	103ff81e 	bne	r2,zero,803051c <t_shutdown+0x38>
 803053c:	00000106 	br	8030544 <t_shutdown+0x60>
 8030540:	0001883a 	nop
 8030544:	e0ffff17 	ldw	r3,-4(fp)
 8030548:	e0bffe17 	ldw	r2,-8(fp)
 803054c:	18800326 	beq	r3,r2,803055c <t_shutdown+0x78>
 8030550:	802c3fc0 	call	802c3fc <dtrap>
 8030554:	00bfffc4 	movi	r2,-1
 8030558:	00001206 	br	80305a4 <t_shutdown+0xc0>
   so->so_error = 0;
 803055c:	e0bffe17 	ldw	r2,-8(fp)
 8030560:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
 8030564:	0009883a 	mov	r4,zero
 8030568:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
 803056c:	e17ffb17 	ldw	r5,-20(fp)
 8030570:	e13ffe17 	ldw	r4,-8(fp)
 8030574:	8031d340 	call	8031d34 <soshutdown>
 8030578:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 803057c:	0009883a 	mov	r4,zero
 8030580:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (err != 0)
 8030584:	e0bffd17 	ldw	r2,-12(fp)
 8030588:	10000526 	beq	r2,zero,80305a0 <t_shutdown+0xbc>
   {
      so->so_error = err;
 803058c:	e0bffe17 	ldw	r2,-8(fp)
 8030590:	e0fffd17 	ldw	r3,-12(fp)
 8030594:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
 8030598:	00bfffc4 	movi	r2,-1
 803059c:	00000106 	br	80305a4 <t_shutdown+0xc0>
   }
   return 0;
 80305a0:	0005883a 	mov	r2,zero
}
 80305a4:	e037883a 	mov	sp,fp
 80305a8:	dfc00117 	ldw	ra,4(sp)
 80305ac:	df000017 	ldw	fp,0(sp)
 80305b0:	dec00204 	addi	sp,sp,8
 80305b4:	f800283a 	ret

080305b8 <t_socketclose>:
 * RETURNS: 
 */

int
t_socketclose(long s)
{
 80305b8:	defffa04 	addi	sp,sp,-24
 80305bc:	dfc00515 	stw	ra,20(sp)
 80305c0:	df000415 	stw	fp,16(sp)
 80305c4:	df000404 	addi	fp,sp,16
 80305c8:	e13ffc15 	stw	r4,-16(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 80305cc:	e0bffc17 	ldw	r2,-16(fp)
 80305d0:	10bff804 	addi	r2,r2,-32
 80305d4:	100490ba 	slli	r2,r2,2
 80305d8:	e0bffe15 	stw	r2,-8(fp)
   SOC_CHECK(so);
 80305dc:	008201b4 	movhi	r2,2054
 80305e0:	10bc1704 	addi	r2,r2,-4004
 80305e4:	e0bfff15 	stw	r2,-4(fp)
 80305e8:	00000606 	br	8030604 <t_socketclose+0x4c>
 80305ec:	e0ffff17 	ldw	r3,-4(fp)
 80305f0:	e0bffe17 	ldw	r2,-8(fp)
 80305f4:	18800626 	beq	r3,r2,8030610 <t_socketclose+0x58>
 80305f8:	e0bfff17 	ldw	r2,-4(fp)
 80305fc:	10800017 	ldw	r2,0(r2)
 8030600:	e0bfff15 	stw	r2,-4(fp)
 8030604:	e0bfff17 	ldw	r2,-4(fp)
 8030608:	103ff81e 	bne	r2,zero,80305ec <t_socketclose+0x34>
 803060c:	00000106 	br	8030614 <t_socketclose+0x5c>
 8030610:	0001883a 	nop
 8030614:	e0ffff17 	ldw	r3,-4(fp)
 8030618:	e0bffe17 	ldw	r2,-8(fp)
 803061c:	18800326 	beq	r3,r2,803062c <t_socketclose+0x74>
 8030620:	802c3fc0 	call	802c3fc <dtrap>
 8030624:	00bfffc4 	movi	r2,-1
 8030628:	00000e06 	br	8030664 <t_socketclose+0xac>
   so->so_error = 0;
 803062c:	e0bffe17 	ldw	r2,-8(fp)
 8030630:	10000615 	stw	zero,24(r2)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
 8030634:	0009883a 	mov	r4,zero
 8030638:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   err = soclose(so);
 803063c:	e13ffe17 	ldw	r4,-8(fp)
 8030640:	8030b7c0 	call	8030b7c <soclose>
 8030644:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8030648:	0009883a 	mov	r4,zero
 803064c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 8030650:	e0bffd17 	ldw	r2,-12(fp)
 8030654:	10000226 	beq	r2,zero,8030660 <t_socketclose+0xa8>
   {
      /* do not do the following assignment since the socket structure
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
 8030658:	00bfffc4 	movi	r2,-1
 803065c:	00000106 	br	8030664 <t_socketclose+0xac>
   }
   return 0;
 8030660:	0005883a 	mov	r2,zero
}
 8030664:	e037883a 	mov	sp,fp
 8030668:	dfc00117 	ldw	ra,4(sp)
 803066c:	df000017 	ldw	fp,0(sp)
 8030670:	dec00204 	addi	sp,sp,8
 8030674:	f800283a 	ret

08030678 <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
 8030678:	defffa04 	addi	sp,sp,-24
 803067c:	dfc00515 	stw	ra,20(sp)
 8030680:	df000415 	stw	fp,16(sp)
 8030684:	df000404 	addi	fp,sp,16
 8030688:	e13ffe15 	stw	r4,-8(fp)
 803068c:	e17ffd15 	stw	r5,-12(fp)
 8030690:	e1bffc15 	stw	r6,-16(fp)
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
 8030694:	0009883a 	mov	r4,zero
 8030698:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
 803069c:	e17ffd17 	ldw	r5,-12(fp)
 80306a0:	e13ffc17 	ldw	r4,-16(fp)
 80306a4:	802d1a80 	call	802d1a8 <m_getnbuf>
 80306a8:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 80306ac:	0009883a 	mov	r4,zero
 80306b0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (m == NULL)
 80306b4:	e0bfff17 	ldw	r2,-4(fp)
 80306b8:	1000021e 	bne	r2,zero,80306c4 <sockargs+0x4c>
      return NULL;
 80306bc:	0005883a 	mov	r2,zero
 80306c0:	00000b06 	br	80306f0 <sockargs+0x78>
   m->m_len = arglen;
 80306c4:	e0fffd17 	ldw	r3,-12(fp)
 80306c8:	e0bfff17 	ldw	r2,-4(fp)
 80306cc:	10c00215 	stw	r3,8(r2)
   MEMCPY(mtod (m, char *), arg, arglen);
 80306d0:	e0bfff17 	ldw	r2,-4(fp)
 80306d4:	10800317 	ldw	r2,12(r2)
 80306d8:	e0fffd17 	ldw	r3,-12(fp)
 80306dc:	180d883a 	mov	r6,r3
 80306e0:	e17ffe17 	ldw	r5,-8(fp)
 80306e4:	1009883a 	mov	r4,r2
 80306e8:	8002ea40 	call	8002ea4 <memcpy>
   return m;
 80306ec:	e0bfff17 	ldw	r2,-4(fp)
}
 80306f0:	e037883a 	mov	sp,fp
 80306f4:	dfc00117 	ldw	ra,4(sp)
 80306f8:	df000017 	ldw	fp,0(sp)
 80306fc:	dec00204 	addi	sp,sp,8
 8030700:	f800283a 	ret

08030704 <t_errno>:
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
 8030704:	defffa04 	addi	sp,sp,-24
 8030708:	dfc00515 	stw	ra,20(sp)
 803070c:	df000415 	stw	fp,16(sp)
 8030710:	df000404 	addi	fp,sp,16
 8030714:	e13ffc15 	stw	r4,-16(fp)
   struct socket *so = LONG2SO(s);
 8030718:	e0bffc17 	ldw	r2,-16(fp)
 803071c:	10bff804 	addi	r2,r2,-32
 8030720:	100490ba 	slli	r2,r2,2
 8030724:	e0bffd15 	stw	r2,-12(fp)
   struct socket *tmp;
   int errcode = ENOTSOCK;
 8030728:	00801b04 	movi	r2,108
 803072c:	e0bffe15 	stw	r2,-8(fp)

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
 8030730:	0009883a 	mov	r4,zero
 8030734:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 8030738:	008201b4 	movhi	r2,2054
 803073c:	10bc1704 	addi	r2,r2,-4004
 8030740:	e0bfff15 	stw	r2,-4(fp)
 8030744:	00000a06 	br	8030770 <t_errno+0x6c>
   {
      if (tmp == so)  /* found socket, return error */
 8030748:	e0ffff17 	ldw	r3,-4(fp)
 803074c:	e0bffd17 	ldw	r2,-12(fp)
 8030750:	1880041e 	bne	r3,r2,8030764 <t_errno+0x60>
      {
         errcode = so->so_error;
 8030754:	e0bffd17 	ldw	r2,-12(fp)
 8030758:	10800617 	ldw	r2,24(r2)
 803075c:	e0bffe15 	stw	r2,-8(fp)
         break;
 8030760:	00000506 	br	8030778 <t_errno+0x74>
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 8030764:	e0bfff17 	ldw	r2,-4(fp)
 8030768:	10800017 	ldw	r2,0(r2)
 803076c:	e0bfff15 	stw	r2,-4(fp)
 8030770:	e0bfff17 	ldw	r2,-4(fp)
 8030774:	103ff41e 	bne	r2,zero,8030748 <t_errno+0x44>
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 8030778:	0009883a 	mov	r4,zero
 803077c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   return errcode;
 8030780:	e0bffe17 	ldw	r2,-8(fp)
}
 8030784:	e037883a 	mov	sp,fp
 8030788:	dfc00117 	ldw	ra,4(sp)
 803078c:	df000017 	ldw	fp,0(sp)
 8030790:	dec00204 	addi	sp,sp,8
 8030794:	f800283a 	ret

08030798 <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
 8030798:	defff704 	addi	sp,sp,-36
 803079c:	dfc00815 	stw	ra,32(sp)
 80307a0:	df000715 	stw	fp,28(sp)
 80307a4:	df000704 	addi	fp,sp,28
 80307a8:	e13ffb15 	stw	r4,-20(fp)
 80307ac:	e17ffa15 	stw	r5,-24(fp)
 80307b0:	e1bff915 	stw	r6,-28(fp)
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
 80307b4:	e0bff917 	ldw	r2,-28(fp)
 80307b8:	10000626 	beq	r2,zero,80307d4 <socreate+0x3c>
      prp = pffindproto(dom, proto, type);
 80307bc:	e1bffa17 	ldw	r6,-24(fp)
 80307c0:	e17ff917 	ldw	r5,-28(fp)
 80307c4:	e13ffb17 	ldw	r4,-20(fp)
 80307c8:	802d0d40 	call	802d0d4 <pffindproto>
 80307cc:	e0bfff15 	stw	r2,-4(fp)
 80307d0:	00000406 	br	80307e4 <socreate+0x4c>
   else
      prp = pffindtype(dom, type);
 80307d4:	e17ffa17 	ldw	r5,-24(fp)
 80307d8:	e13ffb17 	ldw	r4,-20(fp)
 80307dc:	802d0440 	call	802d044 <pffindtype>
 80307e0:	e0bfff15 	stw	r2,-4(fp)
   if (prp == 0)
 80307e4:	e0bfff17 	ldw	r2,-4(fp)
 80307e8:	1000021e 	bne	r2,zero,80307f4 <socreate+0x5c>
      return NULL;
 80307ec:	0005883a 	mov	r2,zero
 80307f0:	00004e06 	br	803092c <socreate+0x194>
   if (prp->pr_type != type)
 80307f4:	e0bfff17 	ldw	r2,-4(fp)
 80307f8:	1080000b 	ldhu	r2,0(r2)
 80307fc:	10bfffcc 	andi	r2,r2,65535
 8030800:	10a0001c 	xori	r2,r2,32768
 8030804:	10a00004 	addi	r2,r2,-32768
 8030808:	e0fffa17 	ldw	r3,-24(fp)
 803080c:	18800226 	beq	r3,r2,8030818 <socreate+0x80>
      return NULL;
 8030810:	0005883a 	mov	r2,zero
 8030814:	00004506 	br	803092c <socreate+0x194>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 8030818:	01002104 	movi	r4,132
 803081c:	802cf5c0 	call	802cf5c <npalloc>
 8030820:	e0bffe15 	stw	r2,-8(fp)
 8030824:	e0bffe17 	ldw	r2,-8(fp)
 8030828:	1000021e 	bne	r2,zero,8030834 <socreate+0x9c>
      return NULL;
 803082c:	0005883a 	mov	r2,zero
 8030830:	00003e06 	br	803092c <socreate+0x194>
   so->next = NULL;
 8030834:	e0bffe17 	ldw	r2,-8(fp)
 8030838:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
 803083c:	e17ffe17 	ldw	r5,-8(fp)
 8030840:	010201b4 	movhi	r4,2054
 8030844:	213c1704 	addi	r4,r4,-4004
 8030848:	802bde00 	call	802bde0 <putq>

   so->so_options = socket_defaults;
 803084c:	d0a0380b 	ldhu	r2,-32544(gp)
 8030850:	10ffffcc 	andi	r3,r2,65535
 8030854:	e0bffe17 	ldw	r2,-8(fp)
 8030858:	10c00415 	stw	r3,16(r2)
   so->so_domain = dom;
 803085c:	e0bffe17 	ldw	r2,-8(fp)
 8030860:	e0fffb17 	ldw	r3,-20(fp)
 8030864:	10c00515 	stw	r3,20(r2)
   so->so_state = 0;
 8030868:	e0bffe17 	ldw	r2,-8(fp)
 803086c:	1000088d 	sth	zero,34(r2)
   so->so_type = (char)type;
 8030870:	e0bffa17 	ldw	r2,-24(fp)
 8030874:	1007883a 	mov	r3,r2
 8030878:	e0bffe17 	ldw	r2,-8(fp)
 803087c:	10c00985 	stb	r3,38(r2)
   so->so_proto = prp;
 8030880:	e0bffe17 	ldw	r2,-8(fp)
 8030884:	e0ffff17 	ldw	r3,-4(fp)
 8030888:	10c00215 	stw	r3,8(r2)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
 803088c:	e0bffe17 	ldw	r2,-8(fp)
 8030890:	10000315 	stw	zero,12(r2)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
 8030894:	e0bffe17 	ldw	r2,-8(fp)
 8030898:	10000715 	stw	zero,28(r2)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
 803089c:	e0bfff17 	ldw	r2,-4(fp)
 80308a0:	10800317 	ldw	r2,12(r2)
 80308a4:	e0fff917 	ldw	r3,-28(fp)
 80308a8:	180d883a 	mov	r6,r3
 80308ac:	000b883a 	mov	r5,zero
 80308b0:	e13ffe17 	ldw	r4,-8(fp)
 80308b4:	103ee83a 	callr	r2
 80308b8:	e0bffd15 	stw	r2,-12(fp)
   if (error) goto bad;
 80308bc:	e0bffd17 	ldw	r2,-12(fp)
 80308c0:	10000a1e 	bne	r2,zero,80308ec <socreate+0x154>

   if (so_evtmap)
 80308c4:	d0a0c903 	ldbu	r2,-31964(gp)
 80308c8:	10803fcc 	andi	r2,r2,255
 80308cc:	10001626 	beq	r2,zero,8030928 <socreate+0x190>
   {                       
      rc = (*so_evtmap_create) (so);
 80308d0:	d0a0c717 	ldw	r2,-31972(gp)
 80308d4:	e13ffe17 	ldw	r4,-8(fp)
 80308d8:	103ee83a 	callr	r2
 80308dc:	e0bffc15 	stw	r2,-16(fp)
      if (rc != 0)
 80308e0:	e0bffc17 	ldw	r2,-16(fp)
 80308e4:	10000c26 	beq	r2,zero,8030918 <socreate+0x180>
      {
bad:   
 80308e8:	00000106 	br	80308f0 <socreate+0x158>
   if (error) goto bad;
 80308ec:	0001883a 	nop
         so->so_state |= SS_NOFDREF;
 80308f0:	e0bffe17 	ldw	r2,-8(fp)
 80308f4:	1080088b 	ldhu	r2,34(r2)
 80308f8:	10800054 	ori	r2,r2,1
 80308fc:	1007883a 	mov	r3,r2
 8030900:	e0bffe17 	ldw	r2,-8(fp)
 8030904:	10c0088d 	sth	r3,34(r2)
         sofree (so);
 8030908:	e13ffe17 	ldw	r4,-8(fp)
 803090c:	8030a6c0 	call	8030a6c <sofree>
         return NULL;   
 8030910:	0005883a 	mov	r2,zero
 8030914:	00000506 	br	803092c <socreate+0x194>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
 8030918:	8028ae40 	call	8028ae4 <TK_OSTaskQuery>
 803091c:	1007883a 	mov	r3,r2
 8030920:	e0bffe17 	ldw	r2,-8(fp)
 8030924:	10c02005 	stb	r3,128(r2)
   }

   return so;
 8030928:	e0bffe17 	ldw	r2,-8(fp)
}
 803092c:	e037883a 	mov	sp,fp
 8030930:	dfc00117 	ldw	ra,4(sp)
 8030934:	df000017 	ldw	fp,0(sp)
 8030938:	dec00204 	addi	sp,sp,8
 803093c:	f800283a 	ret

08030940 <sobind>:
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
 8030940:	defffb04 	addi	sp,sp,-20
 8030944:	dfc00415 	stw	ra,16(sp)
 8030948:	df000315 	stw	fp,12(sp)
 803094c:	df000304 	addi	fp,sp,12
 8030950:	e13ffe15 	stw	r4,-8(fp)
 8030954:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_BIND;
 8030958:	e0bffe17 	ldw	r2,-8(fp)
 803095c:	00c00084 	movi	r3,2
 8030960:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8030964:	e0bffe17 	ldw	r2,-8(fp)
 8030968:	10800217 	ldw	r2,8(r2)
 803096c:	10800317 	ldw	r2,12(r2)
 8030970:	e1bffd17 	ldw	r6,-12(fp)
 8030974:	000b883a 	mov	r5,zero
 8030978:	e13ffe17 	ldw	r4,-8(fp)
 803097c:	103ee83a 	callr	r2
 8030980:	e0bfff15 	stw	r2,-4(fp)
   return (error);
 8030984:	e0bfff17 	ldw	r2,-4(fp)
}
 8030988:	e037883a 	mov	sp,fp
 803098c:	dfc00117 	ldw	ra,4(sp)
 8030990:	df000017 	ldw	fp,0(sp)
 8030994:	dec00204 	addi	sp,sp,8
 8030998:	f800283a 	ret

0803099c <solisten>:
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 803099c:	defffb04 	addi	sp,sp,-20
 80309a0:	dfc00415 	stw	ra,16(sp)
 80309a4:	df000315 	stw	fp,12(sp)
 80309a8:	df000304 	addi	fp,sp,12
 80309ac:	e13ffe15 	stw	r4,-8(fp)
 80309b0:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_LISTEN;
 80309b4:	e0bffe17 	ldw	r2,-8(fp)
 80309b8:	00c000c4 	movi	r3,3
 80309bc:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so,
 80309c0:	e0bffe17 	ldw	r2,-8(fp)
 80309c4:	10800217 	ldw	r2,8(r2)
 80309c8:	10800317 	ldw	r2,12(r2)
 80309cc:	000d883a 	mov	r6,zero
 80309d0:	000b883a 	mov	r5,zero
 80309d4:	e13ffe17 	ldw	r4,-8(fp)
 80309d8:	103ee83a 	callr	r2
 80309dc:	e0bfff15 	stw	r2,-4(fp)
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
 80309e0:	e0bfff17 	ldw	r2,-4(fp)
 80309e4:	10000226 	beq	r2,zero,80309f0 <solisten+0x54>
   {
      return (error);
 80309e8:	e0bfff17 	ldw	r2,-4(fp)
 80309ec:	00001a06 	br	8030a58 <solisten+0xbc>
   }
   if (so->so_q == 0) 
 80309f0:	e0bffe17 	ldw	r2,-8(fp)
 80309f4:	10801d17 	ldw	r2,116(r2)
 80309f8:	10000b1e 	bne	r2,zero,8030a28 <solisten+0x8c>
   {
      so->so_q = so;
 80309fc:	e0bffe17 	ldw	r2,-8(fp)
 8030a00:	e0fffe17 	ldw	r3,-8(fp)
 8030a04:	10c01d15 	stw	r3,116(r2)
      so->so_q0 = so;
 8030a08:	e0bffe17 	ldw	r2,-8(fp)
 8030a0c:	e0fffe17 	ldw	r3,-8(fp)
 8030a10:	10c01c15 	stw	r3,112(r2)
      so->so_options |= SO_ACCEPTCONN;
 8030a14:	e0bffe17 	ldw	r2,-8(fp)
 8030a18:	10800417 	ldw	r2,16(r2)
 8030a1c:	10c00094 	ori	r3,r2,2
 8030a20:	e0bffe17 	ldw	r2,-8(fp)
 8030a24:	10c00415 	stw	r3,16(r2)
   }
   if (backlog < 0)
 8030a28:	e0bffd17 	ldw	r2,-12(fp)
 8030a2c:	1000010e 	bge	r2,zero,8030a34 <solisten+0x98>
      backlog = 0;
 8030a30:	e03ffd15 	stw	zero,-12(fp)
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 8030a34:	e0bffd17 	ldw	r2,-12(fp)
 8030a38:	10800188 	cmpgei	r2,r2,6
 8030a3c:	1000021e 	bne	r2,zero,8030a48 <solisten+0xac>
 8030a40:	e0bffd17 	ldw	r2,-12(fp)
 8030a44:	00000106 	br	8030a4c <solisten+0xb0>
 8030a48:	00800144 	movi	r2,5
 8030a4c:	e0fffe17 	ldw	r3,-8(fp)
 8030a50:	18801e85 	stb	r2,122(r3)
   return 0;
 8030a54:	0005883a 	mov	r2,zero
}
 8030a58:	e037883a 	mov	sp,fp
 8030a5c:	dfc00117 	ldw	ra,4(sp)
 8030a60:	df000017 	ldw	fp,0(sp)
 8030a64:	dec00204 	addi	sp,sp,8
 8030a68:	f800283a 	ret

08030a6c <sofree>:
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
 8030a6c:	defffd04 	addi	sp,sp,-12
 8030a70:	dfc00215 	stw	ra,8(sp)
 8030a74:	df000115 	stw	fp,4(sp)
 8030a78:	df000104 	addi	fp,sp,4
 8030a7c:	e13fff15 	stw	r4,-4(fp)
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 8030a80:	e0bfff17 	ldw	r2,-4(fp)
 8030a84:	10800117 	ldw	r2,4(r2)
 8030a88:	1000361e 	bne	r2,zero,8030b64 <sofree+0xf8>
 8030a8c:	e0bfff17 	ldw	r2,-4(fp)
 8030a90:	1080088b 	ldhu	r2,34(r2)
 8030a94:	10bfffcc 	andi	r2,r2,65535
 8030a98:	1080004c 	andi	r2,r2,1
 8030a9c:	10003126 	beq	r2,zero,8030b64 <sofree+0xf8>
      return;
   if (so->so_head) 
 8030aa0:	e0bfff17 	ldw	r2,-4(fp)
 8030aa4:	10801b17 	ldw	r2,108(r2)
 8030aa8:	10000d26 	beq	r2,zero,8030ae0 <sofree+0x74>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
 8030aac:	000b883a 	mov	r5,zero
 8030ab0:	e13fff17 	ldw	r4,-4(fp)
 8030ab4:	8032ef80 	call	8032ef8 <soqremque>
 8030ab8:	1000071e 	bne	r2,zero,8030ad8 <sofree+0x6c>
 8030abc:	01400044 	movi	r5,1
 8030ac0:	e13fff17 	ldw	r4,-4(fp)
 8030ac4:	8032ef80 	call	8032ef8 <soqremque>
 8030ac8:	1000031e 	bne	r2,zero,8030ad8 <sofree+0x6c>
         panic("sofree");
 8030acc:	01020174 	movhi	r4,2053
 8030ad0:	210c0604 	addi	r4,r4,12312
 8030ad4:	8027fe00 	call	8027fe0 <panic>
      so->so_head = 0;
 8030ad8:	e0bfff17 	ldw	r2,-4(fp)
 8030adc:	10001b15 	stw	zero,108(r2)
   }
   sbrelease(&so->so_snd);
 8030ae0:	e0bfff17 	ldw	r2,-4(fp)
 8030ae4:	10801204 	addi	r2,r2,72
 8030ae8:	1009883a 	mov	r4,r2
 8030aec:	80332bc0 	call	80332bc <sbrelease>
   sorflush(so);
 8030af0:	e13fff17 	ldw	r4,-4(fp)
 8030af4:	8031dcc0 	call	8031dcc <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
 8030af8:	e0bfff17 	ldw	r2,-4(fp)
 8030afc:	10800317 	ldw	r2,12(r2)
 8030b00:	10000426 	beq	r2,zero,8030b14 <sofree+0xa8>
	   ip_freemoptions(so->inp_moptions);
 8030b04:	e0bfff17 	ldw	r2,-4(fp)
 8030b08:	10800317 	ldw	r2,12(r2)
 8030b0c:	1009883a 	mov	r4,r2
 8030b10:	804537c0 	call	804537c <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
 8030b14:	e0bfff17 	ldw	r2,-4(fp)
 8030b18:	10801f17 	ldw	r2,124(r2)
 8030b1c:	10000426 	beq	r2,zero,8030b30 <sofree+0xc4>
      SOCOPT_FREE(so->so_optsPack);
 8030b20:	e0bfff17 	ldw	r2,-4(fp)
 8030b24:	10801f17 	ldw	r2,124(r2)
 8030b28:	1009883a 	mov	r4,r2
 8030b2c:	802cf900 	call	802cf90 <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 8030b30:	e17fff17 	ldw	r5,-4(fp)
 8030b34:	010201b4 	movhi	r4,2054
 8030b38:	213c1704 	addi	r4,r4,-4004
 8030b3c:	802be900 	call	802be90 <qdel>
   
   if (so_evtmap)  
 8030b40:	d0a0c903 	ldbu	r2,-31964(gp)
 8030b44:	10803fcc 	andi	r2,r2,255
 8030b48:	10000326 	beq	r2,zero,8030b58 <sofree+0xec>
      (*so_evtmap_delete) (so);
 8030b4c:	d0a0c817 	ldw	r2,-31968(gp)
 8030b50:	e13fff17 	ldw	r4,-4(fp)
 8030b54:	103ee83a 	callr	r2
   
   SOC_FREE(so);
 8030b58:	e13fff17 	ldw	r4,-4(fp)
 8030b5c:	802cf900 	call	802cf90 <npfree>
 8030b60:	00000106 	br	8030b68 <sofree+0xfc>
      return;
 8030b64:	0001883a 	nop
}
 8030b68:	e037883a 	mov	sp,fp
 8030b6c:	dfc00117 	ldw	ra,4(sp)
 8030b70:	df000017 	ldw	fp,0(sp)
 8030b74:	dec00204 	addi	sp,sp,8
 8030b78:	f800283a 	ret

08030b7c <soclose>:
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
 8030b7c:	defff904 	addi	sp,sp,-28
 8030b80:	dfc00615 	stw	ra,24(sp)
 8030b84:	df000515 	stw	fp,20(sp)
 8030b88:	df000504 	addi	fp,sp,20
 8030b8c:	e13ffb15 	stw	r4,-20(fp)
   int   error =  0;
 8030b90:	e03fff15 	stw	zero,-4(fp)
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 8030b94:	008201b4 	movhi	r2,2054
 8030b98:	10bc1717 	ldw	r2,-4004(r2)
 8030b9c:	e0bffe15 	stw	r2,-8(fp)
 8030ba0:	00000606 	br	8030bbc <soclose+0x40>
   {
      if (so == tmpso)
 8030ba4:	e0fffb17 	ldw	r3,-20(fp)
 8030ba8:	e0bffe17 	ldw	r2,-8(fp)
 8030bac:	18800626 	beq	r3,r2,8030bc8 <soclose+0x4c>
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 8030bb0:	e0bffe17 	ldw	r2,-8(fp)
 8030bb4:	10800017 	ldw	r2,0(r2)
 8030bb8:	e0bffe15 	stw	r2,-8(fp)
 8030bbc:	e0bffe17 	ldw	r2,-8(fp)
 8030bc0:	103ff81e 	bne	r2,zero,8030ba4 <soclose+0x28>
 8030bc4:	00000106 	br	8030bcc <soclose+0x50>
         break;
 8030bc8:	0001883a 	nop
   }
   if ( tmpso == NULL)
 8030bcc:	e0bffe17 	ldw	r2,-8(fp)
 8030bd0:	1000021e 	bne	r2,zero,8030bdc <soclose+0x60>
      return EINVAL;
 8030bd4:	00800584 	movi	r2,22
 8030bd8:	00009506 	br	8030e30 <soclose+0x2b4>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
 8030bdc:	e0bffb17 	ldw	r2,-20(fp)
 8030be0:	10800417 	ldw	r2,16(r2)
 8030be4:	1080008c 	andi	r2,r2,2
 8030be8:	10001226 	beq	r2,zero,8030c34 <soclose+0xb8>
   {
      while (so->so_q0 != so)
 8030bec:	00000406 	br	8030c00 <soclose+0x84>
         (void) soabort(so->so_q0);
 8030bf0:	e0bffb17 	ldw	r2,-20(fp)
 8030bf4:	10801c17 	ldw	r2,112(r2)
 8030bf8:	1009883a 	mov	r4,r2
 8030bfc:	8030e440 	call	8030e44 <soabort>
      while (so->so_q0 != so)
 8030c00:	e0bffb17 	ldw	r2,-20(fp)
 8030c04:	10801c17 	ldw	r2,112(r2)
 8030c08:	e0fffb17 	ldw	r3,-20(fp)
 8030c0c:	18bff81e 	bne	r3,r2,8030bf0 <soclose+0x74>
      while (so->so_q != so)
 8030c10:	00000406 	br	8030c24 <soclose+0xa8>
         (void) soabort(so->so_q);
 8030c14:	e0bffb17 	ldw	r2,-20(fp)
 8030c18:	10801d17 	ldw	r2,116(r2)
 8030c1c:	1009883a 	mov	r4,r2
 8030c20:	8030e440 	call	8030e44 <soabort>
      while (so->so_q != so)
 8030c24:	e0bffb17 	ldw	r2,-20(fp)
 8030c28:	10801d17 	ldw	r2,116(r2)
 8030c2c:	e0fffb17 	ldw	r3,-20(fp)
 8030c30:	18bff81e 	bne	r3,r2,8030c14 <soclose+0x98>
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
 8030c34:	e0bffb17 	ldw	r2,-20(fp)
 8030c38:	10800983 	ldbu	r2,38(r2)
 8030c3c:	10803fcc 	andi	r2,r2,255
 8030c40:	1080201c 	xori	r2,r2,128
 8030c44:	10bfe004 	addi	r2,r2,-128
 8030c48:	10800060 	cmpeqi	r2,r2,1
 8030c4c:	10000c1e 	bne	r2,zero,8030c80 <soclose+0x104>
   { 
      so->so_req = PRU_DETACH;
 8030c50:	e0bffb17 	ldw	r2,-20(fp)
 8030c54:	00c00044 	movi	r3,1
 8030c58:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so,
 8030c5c:	e0bffb17 	ldw	r2,-20(fp)
 8030c60:	10800217 	ldw	r2,8(r2)
 8030c64:	10800317 	ldw	r2,12(r2)
 8030c68:	000d883a 	mov	r6,zero
 8030c6c:	000b883a 	mov	r5,zero
 8030c70:	e13ffb17 	ldw	r4,-20(fp)
 8030c74:	103ee83a 	callr	r2
 8030c78:	e0bfff15 	stw	r2,-4(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
 8030c7c:	00005d06 	br	8030df4 <soclose+0x278>
   }

   if (so->so_pcb == 0)
 8030c80:	e0bffb17 	ldw	r2,-20(fp)
 8030c84:	10800117 	ldw	r2,4(r2)
 8030c88:	10005726 	beq	r2,zero,8030de8 <soclose+0x26c>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
 8030c8c:	e0bffb17 	ldw	r2,-20(fp)
 8030c90:	1080088b 	ldhu	r2,34(r2)
 8030c94:	10bfffcc 	andi	r2,r2,65535
 8030c98:	1080008c 	andi	r2,r2,2
 8030c9c:	10003a26 	beq	r2,zero,8030d88 <soclose+0x20c>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
 8030ca0:	e0bffb17 	ldw	r2,-20(fp)
 8030ca4:	1080088b 	ldhu	r2,34(r2)
 8030ca8:	10bfffcc 	andi	r2,r2,65535
 8030cac:	1080020c 	andi	r2,r2,8
 8030cb0:	1000051e 	bne	r2,zero,8030cc8 <soclose+0x14c>
      {
         error = sodisconnect(so);
 8030cb4:	e13ffb17 	ldw	r4,-20(fp)
 8030cb8:	8030fe40 	call	8030fe4 <sodisconnect>
 8030cbc:	e0bfff15 	stw	r2,-4(fp)
         if (error)
 8030cc0:	e0bfff17 	ldw	r2,-4(fp)
 8030cc4:	1000321e 	bne	r2,zero,8030d90 <soclose+0x214>
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
 8030cc8:	e0bffb17 	ldw	r2,-20(fp)
 8030ccc:	10800417 	ldw	r2,16(r2)
 8030cd0:	1080200c 	andi	r2,r2,128
 8030cd4:	10002126 	beq	r2,zero,8030d5c <soclose+0x1e0>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
 8030cd8:	e0bffb17 	ldw	r2,-20(fp)
 8030cdc:	1080088b 	ldhu	r2,34(r2)
 8030ce0:	10bfffcc 	andi	r2,r2,65535
 8030ce4:	1080020c 	andi	r2,r2,8
 8030ce8:	10000526 	beq	r2,zero,8030d00 <soclose+0x184>
             (so->so_state & SS_NBIO))
 8030cec:	e0bffb17 	ldw	r2,-20(fp)
 8030cf0:	1080088b 	ldhu	r2,34(r2)
 8030cf4:	10bfffcc 	andi	r2,r2,65535
 8030cf8:	1080400c 	andi	r2,r2,256
         if ((so->so_state & SS_ISDISCONNECTING) &&
 8030cfc:	1000261e 	bne	r2,zero,8030d98 <soclose+0x21c>
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
 8030d00:	e0bffb17 	ldw	r2,-20(fp)
 8030d04:	1080080b 	ldhu	r2,32(r2)
 8030d08:	10bfffcc 	andi	r2,r2,65535
 8030d0c:	10a0001c 	xori	r2,r2,32768
 8030d10:	10a00004 	addi	r2,r2,-32768
 8030d14:	10c01924 	muli	r3,r2,100
 8030d18:	d0a0a317 	ldw	r2,-32116(gp)
 8030d1c:	1885883a 	add	r2,r3,r2
 8030d20:	e0bffd15 	stw	r2,-12(fp)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 8030d24:	00000406 	br	8030d38 <soclose+0x1bc>
         {
            tcp_sleep((char *)&so->so_timeo);
 8030d28:	e0bffb17 	ldw	r2,-20(fp)
 8030d2c:	10800904 	addi	r2,r2,36
 8030d30:	1009883a 	mov	r4,r2
 8030d34:	80288c00 	call	80288c0 <tcp_sleep>
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 8030d38:	e0bffb17 	ldw	r2,-20(fp)
 8030d3c:	1080088b 	ldhu	r2,34(r2)
 8030d40:	10bfffcc 	andi	r2,r2,65535
 8030d44:	1080008c 	andi	r2,r2,2
 8030d48:	10001426 	beq	r2,zero,8030d9c <soclose+0x220>
 8030d4c:	d0e0a317 	ldw	r3,-32116(gp)
 8030d50:	e0bffd17 	ldw	r2,-12(fp)
 8030d54:	18bff436 	bltu	r3,r2,8030d28 <soclose+0x1ac>
 8030d58:	00001006 	br	8030d9c <soclose+0x220>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
 8030d5c:	e0bffb17 	ldw	r2,-20(fp)
 8030d60:	10801217 	ldw	r2,72(r2)
 8030d64:	10000826 	beq	r2,zero,8030d88 <soclose+0x20c>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
 8030d68:	e0bffb17 	ldw	r2,-20(fp)
 8030d6c:	1080088b 	ldhu	r2,34(r2)
 8030d70:	10800054 	ori	r2,r2,1
 8030d74:	1007883a 	mov	r3,r2
 8030d78:	e0bffb17 	ldw	r2,-20(fp)
 8030d7c:	10c0088d 	sth	r3,34(r2)
            return 0;
 8030d80:	0005883a 	mov	r2,zero
 8030d84:	00002a06 	br	8030e30 <soclose+0x2b4>
         }
      }
   }
drop:
 8030d88:	0001883a 	nop
 8030d8c:	00000306 	br	8030d9c <soclose+0x220>
            goto drop;
 8030d90:	0001883a 	nop
 8030d94:	00000106 	br	8030d9c <soclose+0x220>
            goto drop;
 8030d98:	0001883a 	nop
   if (so->so_pcb) 
 8030d9c:	e0bffb17 	ldw	r2,-20(fp)
 8030da0:	10800117 	ldw	r2,4(r2)
 8030da4:	10001226 	beq	r2,zero,8030df0 <soclose+0x274>
   {
      int   error2;
      so->so_req = PRU_DETACH;
 8030da8:	e0bffb17 	ldw	r2,-20(fp)
 8030dac:	00c00044 	movi	r3,1
 8030db0:	10c00715 	stw	r3,28(r2)
      error2 = (*so->so_proto->pr_usrreq)(so,
 8030db4:	e0bffb17 	ldw	r2,-20(fp)
 8030db8:	10800217 	ldw	r2,8(r2)
 8030dbc:	10800317 	ldw	r2,12(r2)
 8030dc0:	000d883a 	mov	r6,zero
 8030dc4:	000b883a 	mov	r5,zero
 8030dc8:	e13ffb17 	ldw	r4,-20(fp)
 8030dcc:	103ee83a 	callr	r2
 8030dd0:	e0bffc15 	stw	r2,-16(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
 8030dd4:	e0bfff17 	ldw	r2,-4(fp)
 8030dd8:	1000051e 	bne	r2,zero,8030df0 <soclose+0x274>
         error = error2;
 8030ddc:	e0bffc17 	ldw	r2,-16(fp)
 8030de0:	e0bfff15 	stw	r2,-4(fp)
 8030de4:	00000306 	br	8030df4 <soclose+0x278>
      goto discard;
 8030de8:	0001883a 	nop
 8030dec:	00000106 	br	8030df4 <soclose+0x278>
   }
discard:
 8030df0:	0001883a 	nop
   if (so->so_state & SS_NOFDREF)
 8030df4:	e0bffb17 	ldw	r2,-20(fp)
 8030df8:	1080088b 	ldhu	r2,34(r2)
 8030dfc:	10bfffcc 	andi	r2,r2,65535
 8030e00:	1080004c 	andi	r2,r2,1
 8030e04:	10000126 	beq	r2,zero,8030e0c <soclose+0x290>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
 8030e08:	802c3fc0 	call	802c3fc <dtrap>
   }
   so->so_state |= SS_NOFDREF;
 8030e0c:	e0bffb17 	ldw	r2,-20(fp)
 8030e10:	1080088b 	ldhu	r2,34(r2)
 8030e14:	10800054 	ori	r2,r2,1
 8030e18:	1007883a 	mov	r3,r2
 8030e1c:	e0bffb17 	ldw	r2,-20(fp)
 8030e20:	10c0088d 	sth	r3,34(r2)
   sofree(so);
 8030e24:	e13ffb17 	ldw	r4,-20(fp)
 8030e28:	8030a6c0 	call	8030a6c <sofree>
   return (error);
 8030e2c:	e0bfff17 	ldw	r2,-4(fp)
}
 8030e30:	e037883a 	mov	sp,fp
 8030e34:	dfc00117 	ldw	ra,4(sp)
 8030e38:	df000017 	ldw	fp,0(sp)
 8030e3c:	dec00204 	addi	sp,sp,8
 8030e40:	f800283a 	ret

08030e44 <soabort>:
 * RETURNS: 
 */

int
soabort(struct socket * so)
{
 8030e44:	defffd04 	addi	sp,sp,-12
 8030e48:	dfc00215 	stw	ra,8(sp)
 8030e4c:	df000115 	stw	fp,4(sp)
 8030e50:	df000104 	addi	fp,sp,4
 8030e54:	e13fff15 	stw	r4,-4(fp)
   so->so_req = PRU_ABORT;
 8030e58:	e0bfff17 	ldw	r2,-4(fp)
 8030e5c:	00c00284 	movi	r3,10
 8030e60:	10c00715 	stw	r3,28(r2)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 8030e64:	e0bfff17 	ldw	r2,-4(fp)
 8030e68:	10800217 	ldw	r2,8(r2)
 8030e6c:	10800317 	ldw	r2,12(r2)
 8030e70:	000d883a 	mov	r6,zero
 8030e74:	000b883a 	mov	r5,zero
 8030e78:	e13fff17 	ldw	r4,-4(fp)
 8030e7c:	103ee83a 	callr	r2
}
 8030e80:	e037883a 	mov	sp,fp
 8030e84:	dfc00117 	ldw	ra,4(sp)
 8030e88:	df000017 	ldw	fp,0(sp)
 8030e8c:	dec00204 	addi	sp,sp,8
 8030e90:	f800283a 	ret

08030e94 <soaccept>:
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
 8030e94:	defffb04 	addi	sp,sp,-20
 8030e98:	dfc00415 	stw	ra,16(sp)
 8030e9c:	df000315 	stw	fp,12(sp)
 8030ea0:	df000304 	addi	fp,sp,12
 8030ea4:	e13ffe15 	stw	r4,-8(fp)
 8030ea8:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 8030eac:	e0bffe17 	ldw	r2,-8(fp)
 8030eb0:	1080088b 	ldhu	r2,34(r2)
 8030eb4:	10bfffcc 	andi	r2,r2,65535
 8030eb8:	1080004c 	andi	r2,r2,1
 8030ebc:	1000031e 	bne	r2,zero,8030ecc <soaccept+0x38>
      panic("soaccept");
 8030ec0:	01020174 	movhi	r4,2053
 8030ec4:	210c0804 	addi	r4,r4,12320
 8030ec8:	8027fe00 	call	8027fe0 <panic>
   so->so_state &= ~SS_NOFDREF;
 8030ecc:	e0bffe17 	ldw	r2,-8(fp)
 8030ed0:	10c0088b 	ldhu	r3,34(r2)
 8030ed4:	00bfff84 	movi	r2,-2
 8030ed8:	1884703a 	and	r2,r3,r2
 8030edc:	1007883a 	mov	r3,r2
 8030ee0:	e0bffe17 	ldw	r2,-8(fp)
 8030ee4:	10c0088d 	sth	r3,34(r2)
   so->so_req = PRU_ACCEPT;
 8030ee8:	e0bffe17 	ldw	r2,-8(fp)
 8030eec:	00c00144 	movi	r3,5
 8030ef0:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8030ef4:	e0bffe17 	ldw	r2,-8(fp)
 8030ef8:	10800217 	ldw	r2,8(r2)
 8030efc:	10800317 	ldw	r2,12(r2)
 8030f00:	e1bffd17 	ldw	r6,-12(fp)
 8030f04:	000b883a 	mov	r5,zero
 8030f08:	e13ffe17 	ldw	r4,-8(fp)
 8030f0c:	103ee83a 	callr	r2
 8030f10:	e0bfff15 	stw	r2,-4(fp)

   return (error);
 8030f14:	e0bfff17 	ldw	r2,-4(fp)
}
 8030f18:	e037883a 	mov	sp,fp
 8030f1c:	dfc00117 	ldw	ra,4(sp)
 8030f20:	df000017 	ldw	fp,0(sp)
 8030f24:	dec00204 	addi	sp,sp,8
 8030f28:	f800283a 	ret

08030f2c <soconnect>:
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 8030f2c:	defffb04 	addi	sp,sp,-20
 8030f30:	dfc00415 	stw	ra,16(sp)
 8030f34:	df000315 	stw	fp,12(sp)
 8030f38:	df000304 	addi	fp,sp,12
 8030f3c:	e13ffe15 	stw	r4,-8(fp)
 8030f40:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 8030f44:	e0bffe17 	ldw	r2,-8(fp)
 8030f48:	10800417 	ldw	r2,16(r2)
 8030f4c:	1080008c 	andi	r2,r2,2
 8030f50:	10000226 	beq	r2,zero,8030f5c <soconnect+0x30>
      return (EOPNOTSUPP);
 8030f54:	008017c4 	movi	r2,95
 8030f58:	00001d06 	br	8030fd0 <soconnect+0xa4>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 8030f5c:	e0bffe17 	ldw	r2,-8(fp)
 8030f60:	1080088b 	ldhu	r2,34(r2)
 8030f64:	10bfffcc 	andi	r2,r2,65535
 8030f68:	1080018c 	andi	r2,r2,6
 8030f6c:	10000c26 	beq	r2,zero,8030fa0 <soconnect+0x74>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
 8030f70:	e0bffe17 	ldw	r2,-8(fp)
 8030f74:	10800217 	ldw	r2,8(r2)
 8030f78:	1080010b 	ldhu	r2,4(r2)
 8030f7c:	10bfffcc 	andi	r2,r2,65535
 8030f80:	1080010c 	andi	r2,r2,4
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 8030f84:	1000031e 	bne	r2,zero,8030f94 <soconnect+0x68>
       (sodisconnect(so) != 0)))
 8030f88:	e13ffe17 	ldw	r4,-8(fp)
 8030f8c:	8030fe40 	call	8030fe4 <sodisconnect>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
 8030f90:	10000326 	beq	r2,zero,8030fa0 <soconnect+0x74>
   {
      error = EISCONN;
 8030f94:	00801fc4 	movi	r2,127
 8030f98:	e0bfff15 	stw	r2,-4(fp)
 8030f9c:	00000b06 	br	8030fcc <soconnect+0xa0>
   }
   else
   {
      so->so_req = PRU_CONNECT;
 8030fa0:	e0bffe17 	ldw	r2,-8(fp)
 8030fa4:	00c00104 	movi	r3,4
 8030fa8:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 8030fac:	e0bffe17 	ldw	r2,-8(fp)
 8030fb0:	10800217 	ldw	r2,8(r2)
 8030fb4:	10800317 	ldw	r2,12(r2)
 8030fb8:	e1bffd17 	ldw	r6,-12(fp)
 8030fbc:	000b883a 	mov	r5,zero
 8030fc0:	e13ffe17 	ldw	r4,-8(fp)
 8030fc4:	103ee83a 	callr	r2
 8030fc8:	e0bfff15 	stw	r2,-4(fp)
   }
   return error;
 8030fcc:	e0bfff17 	ldw	r2,-4(fp)
}
 8030fd0:	e037883a 	mov	sp,fp
 8030fd4:	dfc00117 	ldw	ra,4(sp)
 8030fd8:	df000017 	ldw	fp,0(sp)
 8030fdc:	dec00204 	addi	sp,sp,8
 8030fe0:	f800283a 	ret

08030fe4 <sodisconnect>:
 * RETURNS: 
 */

int
sodisconnect(struct socket * so)
{
 8030fe4:	defffc04 	addi	sp,sp,-16
 8030fe8:	dfc00315 	stw	ra,12(sp)
 8030fec:	df000215 	stw	fp,8(sp)
 8030ff0:	df000204 	addi	fp,sp,8
 8030ff4:	e13ffe15 	stw	r4,-8(fp)
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
 8030ff8:	e0bffe17 	ldw	r2,-8(fp)
 8030ffc:	1080088b 	ldhu	r2,34(r2)
 8031000:	10bfffcc 	andi	r2,r2,65535
 8031004:	1080008c 	andi	r2,r2,2
 8031008:	1000031e 	bne	r2,zero,8031018 <sodisconnect+0x34>
   {
      error = ENOTCONN;
 803100c:	00802004 	movi	r2,128
 8031010:	e0bfff15 	stw	r2,-4(fp)
      goto bad;
 8031014:	00001306 	br	8031064 <sodisconnect+0x80>
   }
   if (so->so_state & SS_ISDISCONNECTING) 
 8031018:	e0bffe17 	ldw	r2,-8(fp)
 803101c:	1080088b 	ldhu	r2,34(r2)
 8031020:	10bfffcc 	andi	r2,r2,65535
 8031024:	1080020c 	andi	r2,r2,8
 8031028:	10000326 	beq	r2,zero,8031038 <sodisconnect+0x54>
   {
      error = EALREADY;
 803102c:	00801e04 	movi	r2,120
 8031030:	e0bfff15 	stw	r2,-4(fp)
      goto bad;
 8031034:	00000b06 	br	8031064 <sodisconnect+0x80>
   }
   so->so_req = PRU_DISCONNECT;
 8031038:	e0bffe17 	ldw	r2,-8(fp)
 803103c:	00c00184 	movi	r3,6
 8031040:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 8031044:	e0bffe17 	ldw	r2,-8(fp)
 8031048:	10800217 	ldw	r2,8(r2)
 803104c:	10800317 	ldw	r2,12(r2)
 8031050:	000d883a 	mov	r6,zero
 8031054:	000b883a 	mov	r5,zero
 8031058:	e13ffe17 	ldw	r4,-8(fp)
 803105c:	103ee83a 	callr	r2
 8031060:	e0bfff15 	stw	r2,-4(fp)

bad:
   return (error);
 8031064:	e0bfff17 	ldw	r2,-4(fp)
}
 8031068:	e037883a 	mov	sp,fp
 803106c:	dfc00117 	ldw	ra,4(sp)
 8031070:	df000017 	ldw	fp,0(sp)
 8031074:	dec00204 	addi	sp,sp,8
 8031078:	f800283a 	ret

0803107c <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
 803107c:	defff204 	addi	sp,sp,-56
 8031080:	dfc00d15 	stw	ra,52(sp)
 8031084:	df000c15 	stw	fp,48(sp)
 8031088:	df000c04 	addi	fp,sp,48
 803108c:	e13ff715 	stw	r4,-36(fp)
 8031090:	e17ff615 	stw	r5,-40(fp)
 8031094:	e1bff515 	stw	r6,-44(fp)
 8031098:	e1fff415 	stw	r7,-48(fp)
   struct mbuf *head = (struct mbuf *)NULL;
 803109c:	e03fff15 	stw	zero,-4(fp)
   struct mbuf *m;
   int   space;
   int   resid;
   int   len;
   int   error = 0;
 80310a0:	e03ffb15 	stw	zero,-20(fp)
   int   dontroute;
   int   first = 1;
 80310a4:	00800044 	movi	r2,1
 80310a8:	e0bffa15 	stw	r2,-24(fp)

   resid = *data_length;
 80310ac:	e0bff417 	ldw	r2,-48(fp)
 80310b0:	10800017 	ldw	r2,0(r2)
 80310b4:	e0bffc15 	stw	r2,-16(fp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
 80310b8:	e0bffc17 	ldw	r2,-16(fp)
 80310bc:	1000020e 	bge	r2,zero,80310c8 <sosend+0x4c>
      return (EINVAL);
 80310c0:	00800584 	movi	r2,22
 80310c4:	00014006 	br	80315c8 <sosend+0x54c>

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
 80310c8:	e0bff717 	ldw	r2,-36(fp)
 80310cc:	10800217 	ldw	r2,8(r2)
 80310d0:	1080010b 	ldhu	r2,4(r2)
 80310d4:	10bfffcc 	andi	r2,r2,65535
 80310d8:	1080004c 	andi	r2,r2,1
 80310dc:	10000726 	beq	r2,zero,80310fc <sosend+0x80>
 80310e0:	e0bff717 	ldw	r2,-36(fp)
 80310e4:	10801317 	ldw	r2,76(r2)
 80310e8:	1007883a 	mov	r3,r2
 80310ec:	e0bffc17 	ldw	r2,-16(fp)
 80310f0:	1880020e 	bge	r3,r2,80310fc <sosend+0x80>
      return (EMSGSIZE);
 80310f4:	00801e84 	movi	r2,122
 80310f8:	00013306 	br	80315c8 <sosend+0x54c>

   dontroute = (flags & MSG_DONTROUTE) &&
 80310fc:	e0800217 	ldw	r2,8(fp)
 8031100:	1080010c 	andi	r2,r2,4
               ((so->so_options & SO_DONTROUTE) == 0) &&
 8031104:	10000c26 	beq	r2,zero,8031138 <sosend+0xbc>
 8031108:	e0bff717 	ldw	r2,-36(fp)
 803110c:	10800417 	ldw	r2,16(r2)
 8031110:	1080040c 	andi	r2,r2,16
   dontroute = (flags & MSG_DONTROUTE) &&
 8031114:	1000081e 	bne	r2,zero,8031138 <sosend+0xbc>
               (so->so_proto->pr_flags & PR_ATOMIC);
 8031118:	e0bff717 	ldw	r2,-36(fp)
 803111c:	10800217 	ldw	r2,8(r2)
 8031120:	1080010b 	ldhu	r2,4(r2)
 8031124:	10bfffcc 	andi	r2,r2,65535
 8031128:	1080004c 	andi	r2,r2,1
               ((so->so_options & SO_DONTROUTE) == 0) &&
 803112c:	10000226 	beq	r2,zero,8031138 <sosend+0xbc>
 8031130:	00800044 	movi	r2,1
 8031134:	00000106 	br	803113c <sosend+0xc0>
 8031138:	0005883a 	mov	r2,zero
   dontroute = (flags & MSG_DONTROUTE) &&
 803113c:	e0bff915 	stw	r2,-28(fp)

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 8031140:	00000406 	br	8031154 <sosend+0xd8>
 8031144:	e0bff717 	ldw	r2,-36(fp)
 8031148:	10801904 	addi	r2,r2,100
 803114c:	1009883a 	mov	r4,r2
 8031150:	80288c00 	call	80288c0 <tcp_sleep>
 8031154:	e0bff717 	ldw	r2,-36(fp)
 8031158:	1080190b 	ldhu	r2,100(r2)
 803115c:	10bfffcc 	andi	r2,r2,65535
 8031160:	1080004c 	andi	r2,r2,1
 8031164:	103ff71e 	bne	r2,zero,8031144 <sosend+0xc8>
 8031168:	e0bff717 	ldw	r2,-36(fp)
 803116c:	1080190b 	ldhu	r2,100(r2)
 8031170:	10800054 	ori	r2,r2,1
 8031174:	1007883a 	mov	r3,r2
 8031178:	e0bff717 	ldw	r2,-36(fp)
 803117c:	10c0190d 	sth	r3,100(r2)
   do 
   {
      if (so->so_error) 
 8031180:	e0bff717 	ldw	r2,-36(fp)
 8031184:	10800617 	ldw	r2,24(r2)
 8031188:	10000626 	beq	r2,zero,80311a4 <sosend+0x128>
      {
         error = so->so_error;
 803118c:	e0bff717 	ldw	r2,-36(fp)
 8031190:	10800617 	ldw	r2,24(r2)
 8031194:	e0bffb15 	stw	r2,-20(fp)
         so->so_error = 0;          /* ??? */
 8031198:	e0bff717 	ldw	r2,-36(fp)
 803119c:	10000615 	stw	zero,24(r2)
         goto release;
 80311a0:	0000f906 	br	8031588 <sosend+0x50c>
      }
      if (so->so_state & SS_CANTSENDMORE)
 80311a4:	e0bff717 	ldw	r2,-36(fp)
 80311a8:	1080088b 	ldhu	r2,34(r2)
 80311ac:	10bfffcc 	andi	r2,r2,65535
 80311b0:	1080040c 	andi	r2,r2,16
 80311b4:	10000326 	beq	r2,zero,80311c4 <sosend+0x148>
         snderr(EPIPE);
 80311b8:	00800804 	movi	r2,32
 80311bc:	e0bffb15 	stw	r2,-20(fp)
 80311c0:	0000f106 	br	8031588 <sosend+0x50c>
      if ((so->so_state & SS_ISCONNECTED) == 0) 
 80311c4:	e0bff717 	ldw	r2,-36(fp)
 80311c8:	1080088b 	ldhu	r2,34(r2)
 80311cc:	10bfffcc 	andi	r2,r2,65535
 80311d0:	1080008c 	andi	r2,r2,2
 80311d4:	10000e1e 	bne	r2,zero,8031210 <sosend+0x194>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
 80311d8:	e0bff717 	ldw	r2,-36(fp)
 80311dc:	10800217 	ldw	r2,8(r2)
 80311e0:	1080010b 	ldhu	r2,4(r2)
 80311e4:	10bfffcc 	andi	r2,r2,65535
 80311e8:	1080010c 	andi	r2,r2,4
 80311ec:	10000326 	beq	r2,zero,80311fc <sosend+0x180>
            snderr(ENOTCONN);
 80311f0:	00802004 	movi	r2,128
 80311f4:	e0bffb15 	stw	r2,-20(fp)
 80311f8:	0000e306 	br	8031588 <sosend+0x50c>
         if (nam == 0)
 80311fc:	e0bff617 	ldw	r2,-40(fp)
 8031200:	1000031e 	bne	r2,zero,8031210 <sosend+0x194>
            snderr(EDESTADDRREQ);
 8031204:	00801e44 	movi	r2,121
 8031208:	e0bffb15 	stw	r2,-20(fp)
 803120c:	0000de06 	br	8031588 <sosend+0x50c>
      }
      if (flags & MSG_OOB)
 8031210:	e0800217 	ldw	r2,8(fp)
 8031214:	1080004c 	andi	r2,r2,1
 8031218:	10000326 	beq	r2,zero,8031228 <sosend+0x1ac>
         space = 1024;
 803121c:	00810004 	movi	r2,1024
 8031220:	e0bffd15 	stw	r2,-12(fp)
 8031224:	00004706 	br	8031344 <sosend+0x2c8>
      else 
      {
         space = (int)sbspace(&so->so_snd);
 8031228:	e0bff717 	ldw	r2,-36(fp)
 803122c:	10801317 	ldw	r2,76(r2)
 8031230:	1007883a 	mov	r3,r2
 8031234:	e0bff717 	ldw	r2,-36(fp)
 8031238:	10801217 	ldw	r2,72(r2)
 803123c:	1885c83a 	sub	r2,r3,r2
 8031240:	10000616 	blt	r2,zero,803125c <sosend+0x1e0>
 8031244:	e0bff717 	ldw	r2,-36(fp)
 8031248:	10c01317 	ldw	r3,76(r2)
 803124c:	e0bff717 	ldw	r2,-36(fp)
 8031250:	10801217 	ldw	r2,72(r2)
 8031254:	1885c83a 	sub	r2,r3,r2
 8031258:	00000106 	br	8031260 <sosend+0x1e4>
 803125c:	0005883a 	mov	r2,zero
 8031260:	e0bffd15 	stw	r2,-12(fp)
         if ((sosendallatonce(so) && (space < resid)) ||
 8031264:	e0bff717 	ldw	r2,-36(fp)
 8031268:	10800217 	ldw	r2,8(r2)
 803126c:	1080010b 	ldhu	r2,4(r2)
 8031270:	10bfffcc 	andi	r2,r2,65535
 8031274:	1080004c 	andi	r2,r2,1
 8031278:	10000326 	beq	r2,zero,8031288 <sosend+0x20c>
 803127c:	e0fffd17 	ldw	r3,-12(fp)
 8031280:	e0bffc17 	ldw	r2,-16(fp)
 8031284:	18801216 	blt	r3,r2,80312d0 <sosend+0x254>
 8031288:	e0bffc17 	ldw	r2,-16(fp)
 803128c:	10815e10 	cmplti	r2,r2,1400
 8031290:	10002c1e 	bne	r2,zero,8031344 <sosend+0x2c8>
             ((resid >= CLBYTES) && (space < CLBYTES) &&
 8031294:	e0bffd17 	ldw	r2,-12(fp)
 8031298:	10815e08 	cmpgei	r2,r2,1400
 803129c:	1000291e 	bne	r2,zero,8031344 <sosend+0x2c8>
              (so->so_snd.sb_cc >= CLBYTES) &&
 80312a0:	e0bff717 	ldw	r2,-36(fp)
 80312a4:	10801217 	ldw	r2,72(r2)
             ((resid >= CLBYTES) && (space < CLBYTES) &&
 80312a8:	10815e30 	cmpltui	r2,r2,1400
 80312ac:	1000251e 	bne	r2,zero,8031344 <sosend+0x2c8>
              ((so->so_state & SS_NBIO) == 0) &&
 80312b0:	e0bff717 	ldw	r2,-36(fp)
 80312b4:	1080088b 	ldhu	r2,34(r2)
 80312b8:	10bfffcc 	andi	r2,r2,65535
 80312bc:	1080400c 	andi	r2,r2,256
              (so->so_snd.sb_cc >= CLBYTES) &&
 80312c0:	1000201e 	bne	r2,zero,8031344 <sosend+0x2c8>
              ((flags & MSG_DONTWAIT) == 0)))
 80312c4:	e0800217 	ldw	r2,8(fp)
 80312c8:	1080080c 	andi	r2,r2,32
              ((so->so_state & SS_NBIO) == 0) &&
 80312cc:	10001d1e 	bne	r2,zero,8031344 <sosend+0x2c8>
         {
            if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 80312d0:	e0bff717 	ldw	r2,-36(fp)
 80312d4:	1080088b 	ldhu	r2,34(r2)
 80312d8:	10bfffcc 	andi	r2,r2,65535
 80312dc:	1080400c 	andi	r2,r2,256
 80312e0:	1000031e 	bne	r2,zero,80312f0 <sosend+0x274>
 80312e4:	e0800217 	ldw	r2,8(fp)
 80312e8:	1080080c 	andi	r2,r2,32
 80312ec:	10000526 	beq	r2,zero,8031304 <sosend+0x288>
            {
               if (first)
 80312f0:	e0bffa17 	ldw	r2,-24(fp)
 80312f4:	10009d26 	beq	r2,zero,803156c <sosend+0x4f0>
                  error = EWOULDBLOCK;
 80312f8:	008002c4 	movi	r2,11
 80312fc:	e0bffb15 	stw	r2,-20(fp)
               goto release;
 8031300:	00009a06 	br	803156c <sosend+0x4f0>
            }
            sbunlock(&so->so_snd);
 8031304:	e0bff717 	ldw	r2,-36(fp)
 8031308:	10c0190b 	ldhu	r3,100(r2)
 803130c:	00bfff84 	movi	r2,-2
 8031310:	1884703a 	and	r2,r3,r2
 8031314:	1007883a 	mov	r3,r2
 8031318:	e0bff717 	ldw	r2,-36(fp)
 803131c:	10c0190d 	sth	r3,100(r2)
 8031320:	e0bff717 	ldw	r2,-36(fp)
 8031324:	10801904 	addi	r2,r2,100
 8031328:	1009883a 	mov	r4,r2
 803132c:	8028a0c0 	call	8028a0c <tcp_wakeup>
            sbwait(&so->so_snd);
 8031330:	e0bff717 	ldw	r2,-36(fp)
 8031334:	10801204 	addi	r2,r2,72
 8031338:	1009883a 	mov	r4,r2
 803133c:	80330ec0 	call	80330ec <sbwait>
            goto restart;
 8031340:	003f7f06 	br	8031140 <sosend+0xc4>
         }
      }
      if ( space <= 0 ) 
 8031344:	e0bffd17 	ldw	r2,-12(fp)
 8031348:	00805e16 	blt	zero,r2,80314c4 <sosend+0x448>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 803134c:	e0bff717 	ldw	r2,-36(fp)
 8031350:	1080088b 	ldhu	r2,34(r2)
 8031354:	10bfffcc 	andi	r2,r2,65535
 8031358:	1080400c 	andi	r2,r2,256
 803135c:	1000031e 	bne	r2,zero,803136c <sosend+0x2f0>
 8031360:	e0800217 	ldw	r2,8(fp)
 8031364:	1080080c 	andi	r2,r2,32
 8031368:	10000526 	beq	r2,zero,8031380 <sosend+0x304>
         {
            if (first)     /* report first error */
 803136c:	e0bffa17 	ldw	r2,-24(fp)
 8031370:	10008026 	beq	r2,zero,8031574 <sosend+0x4f8>
               error = EWOULDBLOCK;
 8031374:	008002c4 	movi	r2,11
 8031378:	e0bffb15 	stw	r2,-20(fp)
            goto release;
 803137c:	00007d06 	br	8031574 <sosend+0x4f8>
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
 8031380:	e0bff717 	ldw	r2,-36(fp)
 8031384:	10c0190b 	ldhu	r3,100(r2)
 8031388:	00bfff84 	movi	r2,-2
 803138c:	1884703a 	and	r2,r3,r2
 8031390:	1007883a 	mov	r3,r2
 8031394:	e0bff717 	ldw	r2,-36(fp)
 8031398:	10c0190d 	sth	r3,100(r2)
 803139c:	e0bff717 	ldw	r2,-36(fp)
 80313a0:	10801904 	addi	r2,r2,100
 80313a4:	1009883a 	mov	r4,r2
 80313a8:	8028a0c0 	call	8028a0c <tcp_wakeup>
         sbwait(&so->so_snd);
 80313ac:	e0bff717 	ldw	r2,-36(fp)
 80313b0:	10801204 	addi	r2,r2,72
 80313b4:	1009883a 	mov	r4,r2
 80313b8:	80330ec0 	call	80330ec <sbwait>
         goto restart;
 80313bc:	003f6006 	br	8031140 <sosend+0xc4>
      }

      while (space > 0) 
      {
         len = resid;
 80313c0:	e0bffc17 	ldw	r2,-16(fp)
 80313c4:	e0bff815 	stw	r2,-32(fp)
         if ( so->so_type == SOCK_STREAM )
 80313c8:	e0bff717 	ldw	r2,-36(fp)
 80313cc:	10800983 	ldbu	r2,38(r2)
 80313d0:	10803fcc 	andi	r2,r2,255
 80313d4:	1080201c 	xori	r2,r2,128
 80313d8:	10bfe004 	addi	r2,r2,-128
 80313dc:	10800058 	cmpnei	r2,r2,1
 80313e0:	1000171e 	bne	r2,zero,8031440 <sosend+0x3c4>
         {
            m = m_getwithdata(MT_TXDATA, len);
 80313e4:	e17ff817 	ldw	r5,-32(fp)
 80313e8:	01000084 	movi	r4,2
 80313ec:	802d1a80 	call	802d1a8 <m_getnbuf>
 80313f0:	e0bffe15 	stw	r2,-8(fp)
            if (!m)   
 80313f4:	e0bffe17 	ldw	r2,-8(fp)
 80313f8:	1000031e 	bne	r2,zero,8031408 <sosend+0x38c>
               snderr(ENOBUFS);
 80313fc:	00801a44 	movi	r2,105
 8031400:	e0bffb15 	stw	r2,-20(fp)
 8031404:	00006006 	br	8031588 <sosend+0x50c>
            MEMCPY(m->m_data, data, len);
 8031408:	e0bffe17 	ldw	r2,-8(fp)
 803140c:	10800317 	ldw	r2,12(r2)
 8031410:	e0fff817 	ldw	r3,-32(fp)
 8031414:	180d883a 	mov	r6,r3
 8031418:	e17ff517 	ldw	r5,-44(fp)
 803141c:	1009883a 	mov	r4,r2
 8031420:	8002ea40 	call	8002ea4 <memcpy>
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 8031424:	e0bff717 	ldw	r2,-36(fp)
 8031428:	1080190b 	ldhu	r2,100(r2)
 803142c:	10802014 	ori	r2,r2,128
 8031430:	1007883a 	mov	r3,r2
 8031434:	e0bff717 	ldw	r2,-36(fp)
 8031438:	10c0190d 	sth	r3,100(r2)
 803143c:	00000706 	br	803145c <sosend+0x3e0>
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
 8031440:	000b883a 	mov	r5,zero
 8031444:	01000084 	movi	r4,2
 8031448:	802d1a80 	call	802d1a8 <m_getnbuf>
 803144c:	e0bffe15 	stw	r2,-8(fp)
            m->m_data = data;
 8031450:	e0bffe17 	ldw	r2,-8(fp)
 8031454:	e0fff517 	ldw	r3,-44(fp)
 8031458:	10c00315 	stw	r3,12(r2)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 803145c:	e0bff417 	ldw	r2,-48(fp)
 8031460:	10c00017 	ldw	r3,0(r2)
 8031464:	e0bff817 	ldw	r2,-32(fp)
 8031468:	1887c83a 	sub	r3,r3,r2
 803146c:	e0bff417 	ldw	r2,-48(fp)
 8031470:	10c00015 	stw	r3,0(r2)
         resid -= len;
 8031474:	e0fffc17 	ldw	r3,-16(fp)
 8031478:	e0bff817 	ldw	r2,-32(fp)
 803147c:	1885c83a 	sub	r2,r3,r2
 8031480:	e0bffc15 	stw	r2,-16(fp)
         data += len;
 8031484:	e0bff817 	ldw	r2,-32(fp)
 8031488:	e0fff517 	ldw	r3,-44(fp)
 803148c:	1885883a 	add	r2,r3,r2
 8031490:	e0bff515 	stw	r2,-44(fp)
         m->m_len = len;
 8031494:	e0fff817 	ldw	r3,-32(fp)
 8031498:	e0bffe17 	ldw	r2,-8(fp)
 803149c:	10c00215 	stw	r3,8(r2)
         if (head == (struct mbuf *)NULL)
 80314a0:	e0bfff17 	ldw	r2,-4(fp)
 80314a4:	1000021e 	bne	r2,zero,80314b0 <sosend+0x434>
            head = m;
 80314a8:	e0bffe17 	ldw	r2,-8(fp)
 80314ac:	e0bfff15 	stw	r2,-4(fp)
         if (error)
 80314b0:	e0bffb17 	ldw	r2,-20(fp)
 80314b4:	1000311e 	bne	r2,zero,803157c <sosend+0x500>
            goto release;
         if (*data_length <= 0)
 80314b8:	e0bff417 	ldw	r2,-48(fp)
 80314bc:	10800017 	ldw	r2,0(r2)
 80314c0:	0080030e 	bge	zero,r2,80314d0 <sosend+0x454>
      while (space > 0) 
 80314c4:	e0bffd17 	ldw	r2,-12(fp)
 80314c8:	00bfbd16 	blt	zero,r2,80313c0 <sosend+0x344>
 80314cc:	00000106 	br	80314d4 <sosend+0x458>
            break;
 80314d0:	0001883a 	nop
      }

      if (dontroute)
 80314d4:	e0bff917 	ldw	r2,-28(fp)
 80314d8:	10000526 	beq	r2,zero,80314f0 <sosend+0x474>
         so->so_options |= SO_DONTROUTE;
 80314dc:	e0bff717 	ldw	r2,-36(fp)
 80314e0:	10800417 	ldw	r2,16(r2)
 80314e4:	10c00414 	ori	r3,r2,16
 80314e8:	e0bff717 	ldw	r2,-36(fp)
 80314ec:	10c00415 	stw	r3,16(r2)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 80314f0:	e0800217 	ldw	r2,8(fp)
 80314f4:	1080004c 	andi	r2,r2,1
 80314f8:	10000226 	beq	r2,zero,8031504 <sosend+0x488>
 80314fc:	00800384 	movi	r2,14
 8031500:	00000106 	br	8031508 <sosend+0x48c>
 8031504:	00800244 	movi	r2,9
 8031508:	e0fff717 	ldw	r3,-36(fp)
 803150c:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
 8031510:	e0bff717 	ldw	r2,-36(fp)
 8031514:	10800217 	ldw	r2,8(r2)
 8031518:	10800317 	ldw	r2,12(r2)
 803151c:	e1bff617 	ldw	r6,-40(fp)
 8031520:	e17fff17 	ldw	r5,-4(fp)
 8031524:	e13ff717 	ldw	r4,-36(fp)
 8031528:	103ee83a 	callr	r2
 803152c:	e0bffb15 	stw	r2,-20(fp)

      if (dontroute)
 8031530:	e0bff917 	ldw	r2,-28(fp)
 8031534:	10000626 	beq	r2,zero,8031550 <sosend+0x4d4>
         so->so_options &= ~SO_DONTROUTE;
 8031538:	e0bff717 	ldw	r2,-36(fp)
 803153c:	10c00417 	ldw	r3,16(r2)
 8031540:	00bffbc4 	movi	r2,-17
 8031544:	1886703a 	and	r3,r3,r2
 8031548:	e0bff717 	ldw	r2,-36(fp)
 803154c:	10c00415 	stw	r3,16(r2)

      head = (struct mbuf *)NULL;
 8031550:	e03fff15 	stw	zero,-4(fp)
      first = 0;
 8031554:	e03ffa15 	stw	zero,-24(fp)
   } while ((resid != 0) && (error == 0));
 8031558:	e0bffc17 	ldw	r2,-16(fp)
 803155c:	10000926 	beq	r2,zero,8031584 <sosend+0x508>
 8031560:	e0bffb17 	ldw	r2,-20(fp)
 8031564:	103f0626 	beq	r2,zero,8031180 <sosend+0x104>

release:
 8031568:	00000606 	br	8031584 <sosend+0x508>
               goto release;
 803156c:	0001883a 	nop
 8031570:	00000506 	br	8031588 <sosend+0x50c>
            goto release;
 8031574:	0001883a 	nop
 8031578:	00000306 	br	8031588 <sosend+0x50c>
            goto release;
 803157c:	0001883a 	nop
 8031580:	00000106 	br	8031588 <sosend+0x50c>
release:
 8031584:	0001883a 	nop
   sbunlock(&so->so_snd);  
 8031588:	e0bff717 	ldw	r2,-36(fp)
 803158c:	10c0190b 	ldhu	r3,100(r2)
 8031590:	00bfff84 	movi	r2,-2
 8031594:	1884703a 	and	r2,r3,r2
 8031598:	1007883a 	mov	r3,r2
 803159c:	e0bff717 	ldw	r2,-36(fp)
 80315a0:	10c0190d 	sth	r3,100(r2)
 80315a4:	e0bff717 	ldw	r2,-36(fp)
 80315a8:	10801904 	addi	r2,r2,100
 80315ac:	1009883a 	mov	r4,r2
 80315b0:	8028a0c0 	call	8028a0c <tcp_wakeup>
   if (head)
 80315b4:	e0bfff17 	ldw	r2,-4(fp)
 80315b8:	10000226 	beq	r2,zero,80315c4 <sosend+0x548>
      m_freem(head);
 80315bc:	e13fff17 	ldw	r4,-4(fp)
 80315c0:	802d4340 	call	802d434 <m_freem>
   return error;
 80315c4:	e0bffb17 	ldw	r2,-20(fp)
}
 80315c8:	e037883a 	mov	sp,fp
 80315cc:	dfc00117 	ldw	ra,4(sp)
 80315d0:	df000017 	ldw	fp,0(sp)
 80315d4:	dec00204 	addi	sp,sp,8
 80315d8:	f800283a 	ret

080315dc <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
 80315dc:	defff204 	addi	sp,sp,-56
 80315e0:	dfc00d15 	stw	ra,52(sp)
 80315e4:	df000c15 	stw	fp,48(sp)
 80315e8:	df000c04 	addi	fp,sp,48
 80315ec:	e13ff715 	stw	r4,-36(fp)
 80315f0:	e17ff615 	stw	r5,-40(fp)
 80315f4:	e1bff515 	stw	r6,-44(fp)
 80315f8:	e1fff415 	stw	r7,-48(fp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
 80315fc:	e03ffd15 	stw	zero,-12(fp)
   int   offset;
   struct protosw *  pr =  so->so_proto;
 8031600:	e0bff717 	ldw	r2,-36(fp)
 8031604:	10800217 	ldw	r2,8(r2)
 8031608:	e0bff915 	stw	r2,-28(fp)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
 803160c:	e0bff617 	ldw	r2,-40(fp)
 8031610:	10000226 	beq	r2,zero,803161c <soreceive+0x40>
      *aname = 0;
 8031614:	e0bff617 	ldw	r2,-40(fp)
 8031618:	10000015 	stw	zero,0(r2)
   if (flags & MSG_OOB) 
 803161c:	e0800217 	ldw	r2,8(fp)
 8031620:	1080004c 	andi	r2,r2,1
 8031624:	10004126 	beq	r2,zero,803172c <soreceive+0x150>
   {
      m = m_get (M_WAIT, MT_RXDATA);
 8031628:	000b883a 	mov	r5,zero
 803162c:	01000044 	movi	r4,1
 8031630:	802d1a80 	call	802d1a8 <m_getnbuf>
 8031634:	e0bfff15 	stw	r2,-4(fp)
      if (m == NULL)
 8031638:	e0bfff17 	ldw	r2,-4(fp)
 803163c:	1000021e 	bne	r2,zero,8031648 <soreceive+0x6c>
         return ENOBUFS;
 8031640:	00801a44 	movi	r2,105
 8031644:	0001b606 	br	8031d20 <soreceive+0x744>
      lflags = flags & MSG_PEEK;
 8031648:	e0800217 	ldw	r2,8(fp)
 803164c:	1080008c 	andi	r2,r2,2
 8031650:	e0bff815 	stw	r2,-32(fp)

      so->so_req = PRU_RCVOOB;
 8031654:	e0bff717 	ldw	r2,-36(fp)
 8031658:	00c00344 	movi	r3,13
 803165c:	10c00715 	stw	r3,28(r2)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
 8031660:	e0bff917 	ldw	r2,-28(fp)
 8031664:	10800317 	ldw	r2,12(r2)
 8031668:	e0fff817 	ldw	r3,-32(fp)
 803166c:	180d883a 	mov	r6,r3
 8031670:	e17fff17 	ldw	r5,-4(fp)
 8031674:	e13ff717 	ldw	r4,-36(fp)
 8031678:	103ee83a 	callr	r2
 803167c:	e0bffd15 	stw	r2,-12(fp)
      if (error == 0)
 8031680:	e0bffd17 	ldw	r2,-12(fp)
 8031684:	1000231e 	bne	r2,zero,8031714 <soreceive+0x138>
      {
         do 
         {
            len = *datalen;
 8031688:	e0bff417 	ldw	r2,-48(fp)
 803168c:	10800017 	ldw	r2,0(r2)
 8031690:	e0bffe15 	stw	r2,-8(fp)
            if (len > (int)m->m_len)
 8031694:	e0bfff17 	ldw	r2,-4(fp)
 8031698:	10800217 	ldw	r2,8(r2)
 803169c:	1007883a 	mov	r3,r2
 80316a0:	e0bffe17 	ldw	r2,-8(fp)
 80316a4:	1880030e 	bge	r3,r2,80316b4 <soreceive+0xd8>
               len = m->m_len;
 80316a8:	e0bfff17 	ldw	r2,-4(fp)
 80316ac:	10800217 	ldw	r2,8(r2)
 80316b0:	e0bffe15 	stw	r2,-8(fp)

            MEMCPY(data, mtod(m, char*), len);
 80316b4:	e0bfff17 	ldw	r2,-4(fp)
 80316b8:	10800317 	ldw	r2,12(r2)
 80316bc:	e0fffe17 	ldw	r3,-8(fp)
 80316c0:	180d883a 	mov	r6,r3
 80316c4:	100b883a 	mov	r5,r2
 80316c8:	e13ff517 	ldw	r4,-44(fp)
 80316cc:	8002ea40 	call	8002ea4 <memcpy>
            data += len;
 80316d0:	e0bffe17 	ldw	r2,-8(fp)
 80316d4:	e0fff517 	ldw	r3,-44(fp)
 80316d8:	1885883a 	add	r2,r3,r2
 80316dc:	e0bff515 	stw	r2,-44(fp)
            *datalen = len;
 80316e0:	e0bff417 	ldw	r2,-48(fp)
 80316e4:	e0fffe17 	ldw	r3,-8(fp)
 80316e8:	10c00015 	stw	r3,0(r2)
            m = m_free(m);
 80316ec:	e13fff17 	ldw	r4,-4(fp)
 80316f0:	802d3300 	call	802d330 <m_free>
 80316f4:	e0bfff15 	stw	r2,-4(fp)
         } while (*datalen && (error == 0) && m);
 80316f8:	e0bff417 	ldw	r2,-48(fp)
 80316fc:	10800017 	ldw	r2,0(r2)
 8031700:	10000426 	beq	r2,zero,8031714 <soreceive+0x138>
 8031704:	e0bffd17 	ldw	r2,-12(fp)
 8031708:	1000021e 	bne	r2,zero,8031714 <soreceive+0x138>
 803170c:	e0bfff17 	ldw	r2,-4(fp)
 8031710:	103fdd1e 	bne	r2,zero,8031688 <soreceive+0xac>
      }

      if (m)
 8031714:	e0bfff17 	ldw	r2,-4(fp)
 8031718:	10000226 	beq	r2,zero,8031724 <soreceive+0x148>
         m_freem(m);
 803171c:	e13fff17 	ldw	r4,-4(fp)
 8031720:	802d4340 	call	802d434 <m_freem>
      return (error);
 8031724:	e0bffd17 	ldw	r2,-12(fp)
 8031728:	00017d06 	br	8031d20 <soreceive+0x744>
   }

restart:
 803172c:	0001883a 	nop
   sblock (&so->so_rcv);
 8031730:	00000406 	br	8031744 <soreceive+0x168>
 8031734:	e0bff717 	ldw	r2,-36(fp)
 8031738:	10801104 	addi	r2,r2,68
 803173c:	1009883a 	mov	r4,r2
 8031740:	80288c00 	call	80288c0 <tcp_sleep>
 8031744:	e0bff717 	ldw	r2,-36(fp)
 8031748:	1080110b 	ldhu	r2,68(r2)
 803174c:	10bfffcc 	andi	r2,r2,65535
 8031750:	1080004c 	andi	r2,r2,1
 8031754:	103ff71e 	bne	r2,zero,8031734 <soreceive+0x158>
 8031758:	e0bff717 	ldw	r2,-36(fp)
 803175c:	1080110b 	ldhu	r2,68(r2)
 8031760:	10800054 	ori	r2,r2,1
 8031764:	1007883a 	mov	r3,r2
 8031768:	e0bff717 	ldw	r2,-36(fp)
 803176c:	10c0110d 	sth	r3,68(r2)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
 8031770:	e0bff717 	ldw	r2,-36(fp)
 8031774:	10800a17 	ldw	r2,40(r2)
 8031778:	10003a1e 	bne	r2,zero,8031864 <soreceive+0x288>
   {
      if (so->so_error) 
 803177c:	e0bff717 	ldw	r2,-36(fp)
 8031780:	10800617 	ldw	r2,24(r2)
 8031784:	10000626 	beq	r2,zero,80317a0 <soreceive+0x1c4>
      {
         error = so->so_error;
 8031788:	e0bff717 	ldw	r2,-36(fp)
 803178c:	10800617 	ldw	r2,24(r2)
 8031790:	e0bffd15 	stw	r2,-12(fp)
         so->so_error = 0;
 8031794:	e0bff717 	ldw	r2,-36(fp)
 8031798:	10000615 	stw	zero,24(r2)
         goto release;
 803179c:	00015406 	br	8031cf0 <soreceive+0x714>
      }
      if (so->so_state & SS_CANTRCVMORE)
 80317a0:	e0bff717 	ldw	r2,-36(fp)
 80317a4:	1080088b 	ldhu	r2,34(r2)
 80317a8:	10bfffcc 	andi	r2,r2,65535
 80317ac:	1080080c 	andi	r2,r2,32
 80317b0:	10014a1e 	bne	r2,zero,8031cdc <soreceive+0x700>
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 80317b4:	e0bff717 	ldw	r2,-36(fp)
 80317b8:	1080088b 	ldhu	r2,34(r2)
 80317bc:	10bfffcc 	andi	r2,r2,65535
 80317c0:	1080008c 	andi	r2,r2,2
 80317c4:	1000091e 	bne	r2,zero,80317ec <soreceive+0x210>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
 80317c8:	e0bff717 	ldw	r2,-36(fp)
 80317cc:	10800217 	ldw	r2,8(r2)
 80317d0:	1080010b 	ldhu	r2,4(r2)
 80317d4:	10bfffcc 	andi	r2,r2,65535
 80317d8:	1080010c 	andi	r2,r2,4
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 80317dc:	10000326 	beq	r2,zero,80317ec <soreceive+0x210>
      {
         error = ENOTCONN;
 80317e0:	00802004 	movi	r2,128
 80317e4:	e0bffd15 	stw	r2,-12(fp)
         goto release;
 80317e8:	00014106 	br	8031cf0 <soreceive+0x714>
      }
      if (*datalen == 0)
 80317ec:	e0bff417 	ldw	r2,-48(fp)
 80317f0:	10800017 	ldw	r2,0(r2)
 80317f4:	10013b26 	beq	r2,zero,8031ce4 <soreceive+0x708>
         goto release;
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
 80317f8:	e0bff717 	ldw	r2,-36(fp)
 80317fc:	1080088b 	ldhu	r2,34(r2)
 8031800:	10bfffcc 	andi	r2,r2,65535
 8031804:	1080400c 	andi	r2,r2,256
 8031808:	1000031e 	bne	r2,zero,8031818 <soreceive+0x23c>
 803180c:	e0800217 	ldw	r2,8(fp)
 8031810:	1080080c 	andi	r2,r2,32
 8031814:	10000326 	beq	r2,zero,8031824 <soreceive+0x248>
      {
         error = EWOULDBLOCK;
 8031818:	008002c4 	movi	r2,11
 803181c:	e0bffd15 	stw	r2,-12(fp)
         goto release;
 8031820:	00013306 	br	8031cf0 <soreceive+0x714>
      }
      sbunlock(&so->so_rcv);
 8031824:	e0bff717 	ldw	r2,-36(fp)
 8031828:	10c0110b 	ldhu	r3,68(r2)
 803182c:	00bfff84 	movi	r2,-2
 8031830:	1884703a 	and	r2,r3,r2
 8031834:	1007883a 	mov	r3,r2
 8031838:	e0bff717 	ldw	r2,-36(fp)
 803183c:	10c0110d 	sth	r3,68(r2)
 8031840:	e0bff717 	ldw	r2,-36(fp)
 8031844:	10801104 	addi	r2,r2,68
 8031848:	1009883a 	mov	r4,r2
 803184c:	8028a0c0 	call	8028a0c <tcp_wakeup>
      sbwait(&so->so_rcv);
 8031850:	e0bff717 	ldw	r2,-36(fp)
 8031854:	10800a04 	addi	r2,r2,40
 8031858:	1009883a 	mov	r4,r2
 803185c:	80330ec0 	call	80330ec <sbwait>
      goto restart;
 8031860:	003fb306 	br	8031730 <soreceive+0x154>
   }
   m = so->so_rcv.sb_mb;
 8031864:	e0bff717 	ldw	r2,-36(fp)
 8031868:	10801017 	ldw	r2,64(r2)
 803186c:	e0bfff15 	stw	r2,-4(fp)
   if (m == 0)
 8031870:	e0bfff17 	ldw	r2,-4(fp)
 8031874:	1000031e 	bne	r2,zero,8031884 <soreceive+0x2a8>
      panic("sorecv 1");
 8031878:	01020174 	movhi	r4,2053
 803187c:	210c0b04 	addi	r4,r4,12332
 8031880:	8027fe00 	call	8027fe0 <panic>
   nextrecord = m->m_act;
 8031884:	e0bfff17 	ldw	r2,-4(fp)
 8031888:	10800717 	ldw	r2,28(r2)
 803188c:	e0bffb15 	stw	r2,-20(fp)
   if (pr->pr_flags & PR_ADDR) 
 8031890:	e0bff917 	ldw	r2,-28(fp)
 8031894:	1080010b 	ldhu	r2,4(r2)
 8031898:	10bfffcc 	andi	r2,r2,65535
 803189c:	1080008c 	andi	r2,r2,2
 80318a0:	10004226 	beq	r2,zero,80319ac <soreceive+0x3d0>
   {
      if (m->m_type != MT_SONAME) 
 80318a4:	e0bfff17 	ldw	r2,-4(fp)
 80318a8:	10800817 	ldw	r2,32(r2)
 80318ac:	10800260 	cmpeqi	r2,r2,9
 80318b0:	1000091e 	bne	r2,zero,80318d8 <soreceive+0x2fc>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
 80318b4:	e0bfff17 	ldw	r2,-4(fp)
 80318b8:	10800817 	ldw	r2,32(r2)
 80318bc:	100b883a 	mov	r5,r2
 80318c0:	01020174 	movhi	r4,2053
 80318c4:	210c0e04 	addi	r4,r4,12344
 80318c8:	800325c0 	call	800325c <printf>
         panic("sorecv 2");
 80318cc:	01020174 	movhi	r4,2053
 80318d0:	210c1404 	addi	r4,r4,12368
 80318d4:	8027fe00 	call	8027fe0 <panic>
      }
      if (flags & MSG_PEEK) 
 80318d8:	e0800217 	ldw	r2,8(fp)
 80318dc:	1080008c 	andi	r2,r2,2
 80318e0:	10000f26 	beq	r2,zero,8031920 <soreceive+0x344>
      {
         if (aname)
 80318e4:	e0bff617 	ldw	r2,-40(fp)
 80318e8:	10000926 	beq	r2,zero,8031910 <soreceive+0x334>
            *aname = m_copy (m, 0, m->m_len);
 80318ec:	e0bfff17 	ldw	r2,-4(fp)
 80318f0:	10800217 	ldw	r2,8(r2)
 80318f4:	100d883a 	mov	r6,r2
 80318f8:	000b883a 	mov	r5,zero
 80318fc:	e13fff17 	ldw	r4,-4(fp)
 8031900:	802d47c0 	call	802d47c <m_copy>
 8031904:	1007883a 	mov	r3,r2
 8031908:	e0bff617 	ldw	r2,-40(fp)
 803190c:	10c00015 	stw	r3,0(r2)
         m = m->m_next;
 8031910:	e0bfff17 	ldw	r2,-4(fp)
 8031914:	10800617 	ldw	r2,24(r2)
 8031918:	e0bfff15 	stw	r2,-4(fp)
 803191c:	00002306 	br	80319ac <soreceive+0x3d0>
      } else 
      {
         sbfree (&so->so_rcv, m);
 8031920:	e0bff717 	ldw	r2,-36(fp)
 8031924:	10c00a17 	ldw	r3,40(r2)
 8031928:	e0bfff17 	ldw	r2,-4(fp)
 803192c:	10800217 	ldw	r2,8(r2)
 8031930:	1887c83a 	sub	r3,r3,r2
 8031934:	e0bff717 	ldw	r2,-36(fp)
 8031938:	10c00a15 	stw	r3,40(r2)
         if (aname) 
 803193c:	e0bff617 	ldw	r2,-40(fp)
 8031940:	10000d26 	beq	r2,zero,8031978 <soreceive+0x39c>
         {
            *aname = m;
 8031944:	e0bff617 	ldw	r2,-40(fp)
 8031948:	e0ffff17 	ldw	r3,-4(fp)
 803194c:	10c00015 	stw	r3,0(r2)
            m = m->m_next;
 8031950:	e0bfff17 	ldw	r2,-4(fp)
 8031954:	10800617 	ldw	r2,24(r2)
 8031958:	e0bfff15 	stw	r2,-4(fp)
            (*aname)->m_next = 0;
 803195c:	e0bff617 	ldw	r2,-40(fp)
 8031960:	10800017 	ldw	r2,0(r2)
 8031964:	10000615 	stw	zero,24(r2)
            so->so_rcv.sb_mb = m;
 8031968:	e0bff717 	ldw	r2,-36(fp)
 803196c:	e0ffff17 	ldw	r3,-4(fp)
 8031970:	10c01015 	stw	r3,64(r2)
 8031974:	00000806 	br	8031998 <soreceive+0x3bc>
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
 8031978:	e13fff17 	ldw	r4,-4(fp)
 803197c:	802d3300 	call	802d330 <m_free>
 8031980:	1007883a 	mov	r3,r2
 8031984:	e0bff717 	ldw	r2,-36(fp)
 8031988:	10c01015 	stw	r3,64(r2)
            m = so->so_rcv.sb_mb;
 803198c:	e0bff717 	ldw	r2,-36(fp)
 8031990:	10801017 	ldw	r2,64(r2)
 8031994:	e0bfff15 	stw	r2,-4(fp)
         }
         if (m)
 8031998:	e0bfff17 	ldw	r2,-4(fp)
 803199c:	10000326 	beq	r2,zero,80319ac <soreceive+0x3d0>
            m->m_act = nextrecord;
 80319a0:	e0bfff17 	ldw	r2,-4(fp)
 80319a4:	e0fffb17 	ldw	r3,-20(fp)
 80319a8:	10c00715 	stw	r3,28(r2)
      }
   }
   moff = 0;
 80319ac:	e03ffa15 	stw	zero,-24(fp)
   offset = 0;
 80319b0:	e03ffc15 	stw	zero,-16(fp)
   while (m && (*datalen > 0) && (error == 0))
 80319b4:	00009e06 	br	8031c30 <soreceive+0x654>
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
 80319b8:	e0bfff17 	ldw	r2,-4(fp)
 80319bc:	10800817 	ldw	r2,32(r2)
 80319c0:	10800060 	cmpeqi	r2,r2,1
 80319c4:	1000071e 	bne	r2,zero,80319e4 <soreceive+0x408>
 80319c8:	e0bfff17 	ldw	r2,-4(fp)
 80319cc:	10800817 	ldw	r2,32(r2)
 80319d0:	108000e0 	cmpeqi	r2,r2,3
 80319d4:	1000031e 	bne	r2,zero,80319e4 <soreceive+0x408>
         panic("sorecv 3");
 80319d8:	01020174 	movhi	r4,2053
 80319dc:	210c1704 	addi	r4,r4,12380
 80319e0:	8027fe00 	call	8027fe0 <panic>
      len = *datalen;
 80319e4:	e0bff417 	ldw	r2,-48(fp)
 80319e8:	10800017 	ldw	r2,0(r2)
 80319ec:	e0bffe15 	stw	r2,-8(fp)
      so->so_state &= ~SS_RCVATMARK;
 80319f0:	e0bff717 	ldw	r2,-36(fp)
 80319f4:	10c0088b 	ldhu	r3,34(r2)
 80319f8:	00bfefc4 	movi	r2,-65
 80319fc:	1884703a 	and	r2,r3,r2
 8031a00:	1007883a 	mov	r3,r2
 8031a04:	e0bff717 	ldw	r2,-36(fp)
 8031a08:	10c0088d 	sth	r3,34(r2)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
 8031a0c:	e0bff717 	ldw	r2,-36(fp)
 8031a10:	10801a17 	ldw	r2,104(r2)
 8031a14:	10000c26 	beq	r2,zero,8031a48 <soreceive+0x46c>
 8031a18:	e0bff717 	ldw	r2,-36(fp)
 8031a1c:	10c01a17 	ldw	r3,104(r2)
 8031a20:	e0bffc17 	ldw	r2,-16(fp)
 8031a24:	1885c83a 	sub	r2,r3,r2
 8031a28:	1007883a 	mov	r3,r2
 8031a2c:	e0bffe17 	ldw	r2,-8(fp)
 8031a30:	1880050e 	bge	r3,r2,8031a48 <soreceive+0x46c>
         len = (int)(so->so_oobmark - offset);
 8031a34:	e0bff717 	ldw	r2,-36(fp)
 8031a38:	10c01a17 	ldw	r3,104(r2)
 8031a3c:	e0bffc17 	ldw	r2,-16(fp)
 8031a40:	1885c83a 	sub	r2,r3,r2
 8031a44:	e0bffe15 	stw	r2,-8(fp)
      if (len > (int)(m->m_len - moff))
 8031a48:	e0bfff17 	ldw	r2,-4(fp)
 8031a4c:	10c00217 	ldw	r3,8(r2)
 8031a50:	e0bffa17 	ldw	r2,-24(fp)
 8031a54:	1885c83a 	sub	r2,r3,r2
 8031a58:	1007883a 	mov	r3,r2
 8031a5c:	e0bffe17 	ldw	r2,-8(fp)
 8031a60:	1880050e 	bge	r3,r2,8031a78 <soreceive+0x49c>
         len = m->m_len - moff;
 8031a64:	e0bfff17 	ldw	r2,-4(fp)
 8031a68:	10c00217 	ldw	r3,8(r2)
 8031a6c:	e0bffa17 	ldw	r2,-24(fp)
 8031a70:	1885c83a 	sub	r2,r3,r2
 8031a74:	e0bffe15 	stw	r2,-8(fp)
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
 8031a78:	e0bfff17 	ldw	r2,-4(fp)
 8031a7c:	10c00317 	ldw	r3,12(r2)
 8031a80:	e0bffa17 	ldw	r2,-24(fp)
 8031a84:	1885883a 	add	r2,r3,r2
 8031a88:	e0fffe17 	ldw	r3,-8(fp)
 8031a8c:	180d883a 	mov	r6,r3
 8031a90:	100b883a 	mov	r5,r2
 8031a94:	e13ff517 	ldw	r4,-44(fp)
 8031a98:	8002ea40 	call	8002ea4 <memcpy>
      data += len;
 8031a9c:	e0bffe17 	ldw	r2,-8(fp)
 8031aa0:	e0fff517 	ldw	r3,-44(fp)
 8031aa4:	1885883a 	add	r2,r3,r2
 8031aa8:	e0bff515 	stw	r2,-44(fp)
      *datalen -= len;
 8031aac:	e0bff417 	ldw	r2,-48(fp)
 8031ab0:	10c00017 	ldw	r3,0(r2)
 8031ab4:	e0bffe17 	ldw	r2,-8(fp)
 8031ab8:	1887c83a 	sub	r3,r3,r2
 8031abc:	e0bff417 	ldw	r2,-48(fp)
 8031ac0:	10c00015 	stw	r3,0(r2)

      if (len == (int)(m->m_len - moff))
 8031ac4:	e0bfff17 	ldw	r2,-4(fp)
 8031ac8:	10c00217 	ldw	r3,8(r2)
 8031acc:	e0bffa17 	ldw	r2,-24(fp)
 8031ad0:	1885c83a 	sub	r2,r3,r2
 8031ad4:	1007883a 	mov	r3,r2
 8031ad8:	e0bffe17 	ldw	r2,-8(fp)
 8031adc:	10c0201e 	bne	r2,r3,8031b60 <soreceive+0x584>
      {
         if (flags & MSG_PEEK) 
 8031ae0:	e0800217 	ldw	r2,8(fp)
 8031ae4:	1080008c 	andi	r2,r2,2
 8031ae8:	10000526 	beq	r2,zero,8031b00 <soreceive+0x524>
         {
            m = m->m_next;
 8031aec:	e0bfff17 	ldw	r2,-4(fp)
 8031af0:	10800617 	ldw	r2,24(r2)
 8031af4:	e0bfff15 	stw	r2,-4(fp)
            moff = 0;
 8031af8:	e03ffa15 	stw	zero,-24(fp)
 8031afc:	00003206 	br	8031bc8 <soreceive+0x5ec>
         } else 
         {
            nextrecord = m->m_act;
 8031b00:	e0bfff17 	ldw	r2,-4(fp)
 8031b04:	10800717 	ldw	r2,28(r2)
 8031b08:	e0bffb15 	stw	r2,-20(fp)
            sbfree(&so->so_rcv, m);
 8031b0c:	e0bff717 	ldw	r2,-36(fp)
 8031b10:	10c00a17 	ldw	r3,40(r2)
 8031b14:	e0bfff17 	ldw	r2,-4(fp)
 8031b18:	10800217 	ldw	r2,8(r2)
 8031b1c:	1887c83a 	sub	r3,r3,r2
 8031b20:	e0bff717 	ldw	r2,-36(fp)
 8031b24:	10c00a15 	stw	r3,40(r2)
            {
               MFREE(m, so->so_rcv.sb_mb);
 8031b28:	e13fff17 	ldw	r4,-4(fp)
 8031b2c:	802d3300 	call	802d330 <m_free>
 8031b30:	1007883a 	mov	r3,r2
 8031b34:	e0bff717 	ldw	r2,-36(fp)
 8031b38:	10c01015 	stw	r3,64(r2)
               m = so->so_rcv.sb_mb;
 8031b3c:	e0bff717 	ldw	r2,-36(fp)
 8031b40:	10801017 	ldw	r2,64(r2)
 8031b44:	e0bfff15 	stw	r2,-4(fp)
            }
            if (m)
 8031b48:	e0bfff17 	ldw	r2,-4(fp)
 8031b4c:	10001e26 	beq	r2,zero,8031bc8 <soreceive+0x5ec>
               m->m_act = nextrecord;
 8031b50:	e0bfff17 	ldw	r2,-4(fp)
 8031b54:	e0fffb17 	ldw	r3,-20(fp)
 8031b58:	10c00715 	stw	r3,28(r2)
 8031b5c:	00001a06 	br	8031bc8 <soreceive+0x5ec>
         }
      } else 
      {
         if (flags & MSG_PEEK)
 8031b60:	e0800217 	ldw	r2,8(fp)
 8031b64:	1080008c 	andi	r2,r2,2
 8031b68:	10000526 	beq	r2,zero,8031b80 <soreceive+0x5a4>
            moff += len;
 8031b6c:	e0fffa17 	ldw	r3,-24(fp)
 8031b70:	e0bffe17 	ldw	r2,-8(fp)
 8031b74:	1885883a 	add	r2,r3,r2
 8031b78:	e0bffa15 	stw	r2,-24(fp)
 8031b7c:	00001206 	br	8031bc8 <soreceive+0x5ec>
         else 
         {
            m->m_data += len;
 8031b80:	e0bfff17 	ldw	r2,-4(fp)
 8031b84:	10c00317 	ldw	r3,12(r2)
 8031b88:	e0bffe17 	ldw	r2,-8(fp)
 8031b8c:	1887883a 	add	r3,r3,r2
 8031b90:	e0bfff17 	ldw	r2,-4(fp)
 8031b94:	10c00315 	stw	r3,12(r2)
            m->m_len -= len;
 8031b98:	e0bfff17 	ldw	r2,-4(fp)
 8031b9c:	10c00217 	ldw	r3,8(r2)
 8031ba0:	e0bffe17 	ldw	r2,-8(fp)
 8031ba4:	1887c83a 	sub	r3,r3,r2
 8031ba8:	e0bfff17 	ldw	r2,-4(fp)
 8031bac:	10c00215 	stw	r3,8(r2)
            so->so_rcv.sb_cc -= len;
 8031bb0:	e0bff717 	ldw	r2,-36(fp)
 8031bb4:	10c00a17 	ldw	r3,40(r2)
 8031bb8:	e0bffe17 	ldw	r2,-8(fp)
 8031bbc:	1887c83a 	sub	r3,r3,r2
 8031bc0:	e0bff717 	ldw	r2,-36(fp)
 8031bc4:	10c00a15 	stw	r3,40(r2)
         }
      }
      if (so->so_oobmark) 
 8031bc8:	e0bff717 	ldw	r2,-36(fp)
 8031bcc:	10801a17 	ldw	r2,104(r2)
 8031bd0:	10001726 	beq	r2,zero,8031c30 <soreceive+0x654>
      {
         if ((flags & MSG_PEEK) == 0) 
 8031bd4:	e0800217 	ldw	r2,8(fp)
 8031bd8:	1080008c 	andi	r2,r2,2
 8031bdc:	1000101e 	bne	r2,zero,8031c20 <soreceive+0x644>
         {
            so->so_oobmark -= len;
 8031be0:	e0bff717 	ldw	r2,-36(fp)
 8031be4:	10c01a17 	ldw	r3,104(r2)
 8031be8:	e0bffe17 	ldw	r2,-8(fp)
 8031bec:	1887c83a 	sub	r3,r3,r2
 8031bf0:	e0bff717 	ldw	r2,-36(fp)
 8031bf4:	10c01a15 	stw	r3,104(r2)
            if (so->so_oobmark == 0) 
 8031bf8:	e0bff717 	ldw	r2,-36(fp)
 8031bfc:	10801a17 	ldw	r2,104(r2)
 8031c00:	10000b1e 	bne	r2,zero,8031c30 <soreceive+0x654>
            {
               so->so_state |= SS_RCVATMARK;
 8031c04:	e0bff717 	ldw	r2,-36(fp)
 8031c08:	1080088b 	ldhu	r2,34(r2)
 8031c0c:	10801014 	ori	r2,r2,64
 8031c10:	1007883a 	mov	r3,r2
 8031c14:	e0bff717 	ldw	r2,-36(fp)
 8031c18:	10c0088d 	sth	r3,34(r2)
               break;
 8031c1c:	00000b06 	br	8031c4c <soreceive+0x670>
            }
         } else
            offset += len;
 8031c20:	e0fffc17 	ldw	r3,-16(fp)
 8031c24:	e0bffe17 	ldw	r2,-8(fp)
 8031c28:	1885883a 	add	r2,r3,r2
 8031c2c:	e0bffc15 	stw	r2,-16(fp)
   while (m && (*datalen > 0) && (error == 0))
 8031c30:	e0bfff17 	ldw	r2,-4(fp)
 8031c34:	10000526 	beq	r2,zero,8031c4c <soreceive+0x670>
 8031c38:	e0bff417 	ldw	r2,-48(fp)
 8031c3c:	10800017 	ldw	r2,0(r2)
 8031c40:	0080020e 	bge	zero,r2,8031c4c <soreceive+0x670>
 8031c44:	e0bffd17 	ldw	r2,-12(fp)
 8031c48:	103f5b26 	beq	r2,zero,80319b8 <soreceive+0x3dc>
      }
   }

   if ((flags & MSG_PEEK) == 0) 
 8031c4c:	e0800217 	ldw	r2,8(fp)
 8031c50:	1080008c 	andi	r2,r2,2
 8031c54:	1000251e 	bne	r2,zero,8031cec <soreceive+0x710>
   {
      if (m == 0)
 8031c58:	e0bfff17 	ldw	r2,-4(fp)
 8031c5c:	1000041e 	bne	r2,zero,8031c70 <soreceive+0x694>
         so->so_rcv.sb_mb = nextrecord;
 8031c60:	e0bff717 	ldw	r2,-36(fp)
 8031c64:	e0fffb17 	ldw	r3,-20(fp)
 8031c68:	10c01015 	stw	r3,64(r2)
 8031c6c:	00000906 	br	8031c94 <soreceive+0x6b8>
      else if (pr->pr_flags & PR_ATOMIC)
 8031c70:	e0bff917 	ldw	r2,-28(fp)
 8031c74:	1080010b 	ldhu	r2,4(r2)
 8031c78:	10bfffcc 	andi	r2,r2,65535
 8031c7c:	1080004c 	andi	r2,r2,1
 8031c80:	10000426 	beq	r2,zero,8031c94 <soreceive+0x6b8>
         (void) sbdroprecord(&so->so_rcv);
 8031c84:	e0bff717 	ldw	r2,-36(fp)
 8031c88:	10800a04 	addi	r2,r2,40
 8031c8c:	1009883a 	mov	r4,r2
 8031c90:	8033b780 	call	8033b78 <sbdroprecord>
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
 8031c94:	e0bff917 	ldw	r2,-28(fp)
 8031c98:	1080010b 	ldhu	r2,4(r2)
 8031c9c:	10bfffcc 	andi	r2,r2,65535
 8031ca0:	1080020c 	andi	r2,r2,8
 8031ca4:	10001126 	beq	r2,zero,8031cec <soreceive+0x710>
 8031ca8:	e0bff717 	ldw	r2,-36(fp)
 8031cac:	10800117 	ldw	r2,4(r2)
 8031cb0:	10000e26 	beq	r2,zero,8031cec <soreceive+0x710>
      {
         so->so_req = PRU_RCVD;
 8031cb4:	e0bff717 	ldw	r2,-36(fp)
 8031cb8:	00c00204 	movi	r3,8
 8031cbc:	10c00715 	stw	r3,28(r2)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
 8031cc0:	e0bff917 	ldw	r2,-28(fp)
 8031cc4:	10800317 	ldw	r2,12(r2)
 8031cc8:	000d883a 	mov	r6,zero
 8031ccc:	000b883a 	mov	r5,zero
 8031cd0:	e13ff717 	ldw	r4,-36(fp)
 8031cd4:	103ee83a 	callr	r2
 8031cd8:	00000506 	br	8031cf0 <soreceive+0x714>
         goto release;
 8031cdc:	0001883a 	nop
 8031ce0:	00000306 	br	8031cf0 <soreceive+0x714>
         goto release;
 8031ce4:	0001883a 	nop
 8031ce8:	00000106 	br	8031cf0 <soreceive+0x714>
          (struct mbuf *)0);
      }
   }
release:
 8031cec:	0001883a 	nop
   sbunlock(&so->so_rcv);
 8031cf0:	e0bff717 	ldw	r2,-36(fp)
 8031cf4:	10c0110b 	ldhu	r3,68(r2)
 8031cf8:	00bfff84 	movi	r2,-2
 8031cfc:	1884703a 	and	r2,r3,r2
 8031d00:	1007883a 	mov	r3,r2
 8031d04:	e0bff717 	ldw	r2,-36(fp)
 8031d08:	10c0110d 	sth	r3,68(r2)
 8031d0c:	e0bff717 	ldw	r2,-36(fp)
 8031d10:	10801104 	addi	r2,r2,68
 8031d14:	1009883a 	mov	r4,r2
 8031d18:	8028a0c0 	call	8028a0c <tcp_wakeup>
   return (error);
 8031d1c:	e0bffd17 	ldw	r2,-12(fp)
}
 8031d20:	e037883a 	mov	sp,fp
 8031d24:	dfc00117 	ldw	ra,4(sp)
 8031d28:	df000017 	ldw	fp,0(sp)
 8031d2c:	dec00204 	addi	sp,sp,8
 8031d30:	f800283a 	ret

08031d34 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
 8031d34:	defffc04 	addi	sp,sp,-16
 8031d38:	dfc00315 	stw	ra,12(sp)
 8031d3c:	df000215 	stw	fp,8(sp)
 8031d40:	df000204 	addi	fp,sp,8
 8031d44:	e13fff15 	stw	r4,-4(fp)
 8031d48:	e17ffe15 	stw	r5,-8(fp)
   how++;   /* convert 0,1,2 into 1,2,3 */
 8031d4c:	e0bffe17 	ldw	r2,-8(fp)
 8031d50:	10800044 	addi	r2,r2,1
 8031d54:	e0bffe15 	stw	r2,-8(fp)
   if (how & 1)   /* caller wanted READ or BOTH */
 8031d58:	e0bffe17 	ldw	r2,-8(fp)
 8031d5c:	1080004c 	andi	r2,r2,1
 8031d60:	10000226 	beq	r2,zero,8031d6c <soshutdown+0x38>
      sorflush(so);
 8031d64:	e13fff17 	ldw	r4,-4(fp)
 8031d68:	8031dcc0 	call	8031dcc <sorflush>

   if (how & 2)   /* caller wanted WRITE or BOTH */
 8031d6c:	e0bffe17 	ldw	r2,-8(fp)
 8031d70:	1080008c 	andi	r2,r2,2
 8031d74:	10000f26 	beq	r2,zero,8031db4 <soshutdown+0x80>
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
 8031d78:	e0bfff17 	ldw	r2,-4(fp)
 8031d7c:	10801204 	addi	r2,r2,72
 8031d80:	1009883a 	mov	r4,r2
 8031d84:	803383c0 	call	803383c <sbflush>
      so->so_req = PRU_SHUTDOWN;
 8031d88:	e0bfff17 	ldw	r2,-4(fp)
 8031d8c:	00c001c4 	movi	r3,7
 8031d90:	10c00715 	stw	r3,28(r2)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 8031d94:	e0bfff17 	ldw	r2,-4(fp)
 8031d98:	10800217 	ldw	r2,8(r2)
 8031d9c:	10800317 	ldw	r2,12(r2)
 8031da0:	000d883a 	mov	r6,zero
 8031da4:	000b883a 	mov	r5,zero
 8031da8:	e13fff17 	ldw	r4,-4(fp)
 8031dac:	103ee83a 	callr	r2
 8031db0:	00000106 	br	8031db8 <soshutdown+0x84>
   }

   return 0;
 8031db4:	0005883a 	mov	r2,zero
}
 8031db8:	e037883a 	mov	sp,fp
 8031dbc:	dfc00117 	ldw	ra,4(sp)
 8031dc0:	df000017 	ldw	fp,0(sp)
 8031dc4:	dec00204 	addi	sp,sp,8
 8031dc8:	f800283a 	ret

08031dcc <sorflush>:
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
 8031dcc:	defffb04 	addi	sp,sp,-20
 8031dd0:	dfc00415 	stw	ra,16(sp)
 8031dd4:	df000315 	stw	fp,12(sp)
 8031dd8:	df000304 	addi	fp,sp,12
 8031ddc:	e13ffd15 	stw	r4,-12(fp)
   struct sockbuf *sb =  &so->so_rcv;
 8031de0:	e0bffd17 	ldw	r2,-12(fp)
 8031de4:	10800a04 	addi	r2,r2,40
 8031de8:	e0bfff15 	stw	r2,-4(fp)
   int   s;

   sblock(sb);
 8031dec:	00000406 	br	8031e00 <sorflush+0x34>
 8031df0:	e0bfff17 	ldw	r2,-4(fp)
 8031df4:	10800704 	addi	r2,r2,28
 8031df8:	1009883a 	mov	r4,r2
 8031dfc:	80288c00 	call	80288c0 <tcp_sleep>
 8031e00:	e0bfff17 	ldw	r2,-4(fp)
 8031e04:	1080070b 	ldhu	r2,28(r2)
 8031e08:	10bfffcc 	andi	r2,r2,65535
 8031e0c:	1080004c 	andi	r2,r2,1
 8031e10:	103ff71e 	bne	r2,zero,8031df0 <sorflush+0x24>
 8031e14:	e0bfff17 	ldw	r2,-4(fp)
 8031e18:	1080070b 	ldhu	r2,28(r2)
 8031e1c:	10800054 	ori	r2,r2,1
 8031e20:	1007883a 	mov	r3,r2
 8031e24:	e0bfff17 	ldw	r2,-4(fp)
 8031e28:	10c0070d 	sth	r3,28(r2)
   socantrcvmore(so);
 8031e2c:	e13ffd17 	ldw	r4,-12(fp)
 8031e30:	80330580 	call	8033058 <socantrcvmore>
   sbunlock(sb);
 8031e34:	e0bfff17 	ldw	r2,-4(fp)
 8031e38:	10c0070b 	ldhu	r3,28(r2)
 8031e3c:	00bfff84 	movi	r2,-2
 8031e40:	1884703a 	and	r2,r3,r2
 8031e44:	1007883a 	mov	r3,r2
 8031e48:	e0bfff17 	ldw	r2,-4(fp)
 8031e4c:	10c0070d 	sth	r3,28(r2)
 8031e50:	e0bfff17 	ldw	r2,-4(fp)
 8031e54:	10800704 	addi	r2,r2,28
 8031e58:	1009883a 	mov	r4,r2
 8031e5c:	8028a0c0 	call	8028a0c <tcp_wakeup>
   sbrelease(sb);
 8031e60:	e13fff17 	ldw	r4,-4(fp)
 8031e64:	80332bc0 	call	80332bc <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
 8031e68:	01800804 	movi	r6,32
 8031e6c:	000b883a 	mov	r5,zero
 8031e70:	e13fff17 	ldw	r4,-4(fp)
 8031e74:	8002fa40 	call	8002fa4 <memset>
   s = so->so_error;
 8031e78:	e0bffd17 	ldw	r2,-12(fp)
 8031e7c:	10800617 	ldw	r2,24(r2)
 8031e80:	e0bffe15 	stw	r2,-8(fp)
   so->so_error = ESHUTDOWN;
 8031e84:	e0bffd17 	ldw	r2,-12(fp)
 8031e88:	00c01b84 	movi	r3,110
 8031e8c:	10c00615 	stw	r3,24(r2)
   sorwakeup(so);
 8031e90:	e0bffd17 	ldw	r2,-12(fp)
 8031e94:	10800a04 	addi	r2,r2,40
 8031e98:	100b883a 	mov	r5,r2
 8031e9c:	e13ffd17 	ldw	r4,-12(fp)
 8031ea0:	80331580 	call	8033158 <sbwakeup>
   so->so_error = s;
 8031ea4:	e0bffd17 	ldw	r2,-12(fp)
 8031ea8:	e0fffe17 	ldw	r3,-8(fp)
 8031eac:	10c00615 	stw	r3,24(r2)
}
 8031eb0:	0001883a 	nop
 8031eb4:	e037883a 	mov	sp,fp
 8031eb8:	dfc00117 	ldw	ra,4(sp)
 8031ebc:	df000017 	ldw	fp,0(sp)
 8031ec0:	dec00204 	addi	sp,sp,8
 8031ec4:	f800283a 	ret

08031ec8 <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
 8031ec8:	defff604 	addi	sp,sp,-40
 8031ecc:	dfc00915 	stw	ra,36(sp)
 8031ed0:	df000815 	stw	fp,32(sp)
 8031ed4:	df000804 	addi	fp,sp,32
 8031ed8:	e13ffa15 	stw	r4,-24(fp)
 8031edc:	e17ff915 	stw	r5,-28(fp)
 8031ee0:	e1bff815 	stw	r6,-32(fp)
   int   error =  0;
 8031ee4:	e03fff15 	stw	zero,-4(fp)

   switch (optname) 
 8031ee8:	e0bff917 	ldw	r2,-28(fp)
 8031eec:	10900020 	cmpeqi	r2,r2,16384
 8031ef0:	1000791e 	bne	r2,zero,80320d8 <sosetopt+0x210>
 8031ef4:	e0bff917 	ldw	r2,-28(fp)
 8031ef8:	10900048 	cmpgei	r2,r2,16385
 8031efc:	1001321e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f00:	e0bff917 	ldw	r2,-28(fp)
 8031f04:	10880120 	cmpeqi	r2,r2,8196
 8031f08:	1000dc1e 	bne	r2,zero,803227c <sosetopt+0x3b4>
 8031f0c:	e0bff917 	ldw	r2,-28(fp)
 8031f10:	10880148 	cmpgei	r2,r2,8197
 8031f14:	10012c1e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f18:	e0bff917 	ldw	r2,-28(fp)
 8031f1c:	108800e0 	cmpeqi	r2,r2,8195
 8031f20:	1001021e 	bne	r2,zero,803232c <sosetopt+0x464>
 8031f24:	e0bff917 	ldw	r2,-28(fp)
 8031f28:	10880108 	cmpgei	r2,r2,8196
 8031f2c:	1001261e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f30:	e0bff917 	ldw	r2,-28(fp)
 8031f34:	108405c8 	cmpgei	r2,r2,4119
 8031f38:	1001231e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f3c:	e0bff917 	ldw	r2,-28(fp)
 8031f40:	10840048 	cmpgei	r2,r2,4097
 8031f44:	1000131e 	bne	r2,zero,8031f94 <sosetopt+0xcc>
 8031f48:	e0bff917 	ldw	r2,-28(fp)
 8031f4c:	10808020 	cmpeqi	r2,r2,512
 8031f50:	1000611e 	bne	r2,zero,80320d8 <sosetopt+0x210>
 8031f54:	e0bff917 	ldw	r2,-28(fp)
 8031f58:	10808048 	cmpgei	r2,r2,513
 8031f5c:	10011a1e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f60:	e0bff917 	ldw	r2,-28(fp)
 8031f64:	10804020 	cmpeqi	r2,r2,256
 8031f68:	10005b1e 	bne	r2,zero,80320d8 <sosetopt+0x210>
 8031f6c:	e0bff917 	ldw	r2,-28(fp)
 8031f70:	10804048 	cmpgei	r2,r2,257
 8031f74:	1001141e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 8031f78:	e0bff917 	ldw	r2,-28(fp)
 8031f7c:	10800848 	cmpgei	r2,r2,33
 8031f80:	10004d1e 	bne	r2,zero,80320b8 <sosetopt+0x1f0>
 8031f84:	e0bff917 	ldw	r2,-28(fp)
 8031f88:	10800088 	cmpgei	r2,r2,2
 8031f8c:	1000201e 	bne	r2,zero,8032010 <sosetopt+0x148>
 8031f90:	00010d06 	br	80323c8 <sosetopt+0x500>
 8031f94:	e0bff917 	ldw	r2,-28(fp)
 8031f98:	10bbffc4 	addi	r2,r2,-4097
 8031f9c:	10c005a8 	cmpgeui	r3,r2,22
 8031fa0:	1801091e 	bne	r3,zero,80323c8 <sosetopt+0x500>
 8031fa4:	100690ba 	slli	r3,r2,2
 8031fa8:	008200f4 	movhi	r2,2051
 8031fac:	1885883a 	add	r2,r3,r2
 8031fb0:	1087ee17 	ldw	r2,8120(r2)
 8031fb4:	1000683a 	jmp	r2
 8031fb8:	08032120 	cmpeqi	zero,at,3204
 8031fbc:	08032120 	cmpeqi	zero,at,3204
 8031fc0:	080323c8 	cmpgei	zero,at,3215
 8031fc4:	080323c8 	cmpgei	zero,at,3215
 8031fc8:	080323c8 	cmpgei	zero,at,3215
 8031fcc:	08032164 	muli	zero,at,3205
 8031fd0:	080323c8 	cmpgei	zero,at,3215
 8031fd4:	080323c8 	cmpgei	zero,at,3215
 8031fd8:	080323c8 	cmpgei	zero,at,3215
 8031fdc:	080323c8 	cmpgei	zero,at,3215
 8031fe0:	080323c8 	cmpgei	zero,at,3215
 8031fe4:	080323c8 	cmpgei	zero,at,3215
 8031fe8:	080323c8 	cmpgei	zero,at,3215
 8031fec:	080323c8 	cmpgei	zero,at,3215
 8031ff0:	080323c8 	cmpgei	zero,at,3215
 8031ff4:	0803232c 	andhi	zero,at,3212
 8031ff8:	080323c8 	cmpgei	zero,at,3215
 8031ffc:	080323c8 	cmpgei	zero,at,3215
 8032000:	080323c8 	cmpgei	zero,at,3215
 8032004:	08032178 	rdprs	zero,at,3205
 8032008:	08032194 	ori	zero,at,3206
 803200c:	080321b4 	orhi	zero,at,3206
 8032010:	e0bff917 	ldw	r2,-28(fp)
 8032014:	10800868 	cmpgeui	r2,r2,33
 8032018:	1000eb1e 	bne	r2,zero,80323c8 <sosetopt+0x500>
 803201c:	e0bff917 	ldw	r2,-28(fp)
 8032020:	100690ba 	slli	r3,r2,2
 8032024:	008200f4 	movhi	r2,2051
 8032028:	1885883a 	add	r2,r3,r2
 803202c:	10880d17 	ldw	r2,8244(r2)
 8032030:	1000683a 	jmp	r2
 8032034:	080323c8 	cmpgei	zero,at,3215
 8032038:	080323c8 	cmpgei	zero,at,3215
 803203c:	08032228 	cmpgeui	zero,at,3208
 8032040:	080323c8 	cmpgei	zero,at,3215
 8032044:	080320d8 	cmpnei	zero,at,3203
 8032048:	080323c8 	cmpgei	zero,at,3215
 803204c:	080323c8 	cmpgei	zero,at,3215
 8032050:	080323c8 	cmpgei	zero,at,3215
 8032054:	080320d8 	cmpnei	zero,at,3203
 8032058:	08032210 	cmplti	zero,at,3208
 803205c:	08032210 	cmplti	zero,at,3208
 8032060:	08032210 	cmplti	zero,at,3208
 8032064:	08032210 	cmplti	zero,at,3208
 8032068:	08032210 	cmplti	zero,at,3208
 803206c:	080323c8 	cmpgei	zero,at,3215
 8032070:	080323c8 	cmpgei	zero,at,3215
 8032074:	080320d8 	cmpnei	zero,at,3203
 8032078:	080323c8 	cmpgei	zero,at,3215
 803207c:	080323c8 	cmpgei	zero,at,3215
 8032080:	080323c8 	cmpgei	zero,at,3215
 8032084:	080323c8 	cmpgei	zero,at,3215
 8032088:	080323c8 	cmpgei	zero,at,3215
 803208c:	080323c8 	cmpgei	zero,at,3215
 8032090:	080323c8 	cmpgei	zero,at,3215
 8032094:	080323c8 	cmpgei	zero,at,3215
 8032098:	080323c8 	cmpgei	zero,at,3215
 803209c:	080323c8 	cmpgei	zero,at,3215
 80320a0:	080323c8 	cmpgei	zero,at,3215
 80320a4:	080323c8 	cmpgei	zero,at,3215
 80320a8:	080323c8 	cmpgei	zero,at,3215
 80320ac:	080323c8 	cmpgei	zero,at,3215
 80320b0:	080323c8 	cmpgei	zero,at,3215
 80320b4:	080320d8 	cmpnei	zero,at,3203
 80320b8:	e0bff917 	ldw	r2,-28(fp)
 80320bc:	10802018 	cmpnei	r2,r2,128
 80320c0:	1000c11e 	bne	r2,zero,80323c8 <sosetopt+0x500>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
 80320c4:	e0bff817 	ldw	r2,-32(fp)
 80320c8:	10800117 	ldw	r2,4(r2)
 80320cc:	1007883a 	mov	r3,r2
 80320d0:	e0bffa17 	ldw	r2,-24(fp)
 80320d4:	10c0080d 	sth	r3,32(r2)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
 80320d8:	e0bff817 	ldw	r2,-32(fp)
 80320dc:	10800017 	ldw	r2,0(r2)
 80320e0:	10000726 	beq	r2,zero,8032100 <sosetopt+0x238>
         so->so_options |= optname;
 80320e4:	e0bffa17 	ldw	r2,-24(fp)
 80320e8:	10c00417 	ldw	r3,16(r2)
 80320ec:	e0bff917 	ldw	r2,-28(fp)
 80320f0:	1886b03a 	or	r3,r3,r2
 80320f4:	e0bffa17 	ldw	r2,-24(fp)
 80320f8:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~optname;
      break;
 80320fc:	0000b606 	br	80323d8 <sosetopt+0x510>
         so->so_options &= ~optname;
 8032100:	e0bffa17 	ldw	r2,-24(fp)
 8032104:	10800417 	ldw	r2,16(r2)
 8032108:	e0fff917 	ldw	r3,-28(fp)
 803210c:	00c6303a 	nor	r3,zero,r3
 8032110:	10c6703a 	and	r3,r2,r3
 8032114:	e0bffa17 	ldw	r2,-24(fp)
 8032118:	10c00415 	stw	r3,16(r2)
      break;
 803211c:	0000ae06 	br	80323d8 <sosetopt+0x510>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 8032120:	e0bff917 	ldw	r2,-28(fp)
 8032124:	10840058 	cmpnei	r2,r2,4097
 8032128:	1000031e 	bne	r2,zero,8032138 <sosetopt+0x270>
 803212c:	e0bffa17 	ldw	r2,-24(fp)
 8032130:	10801204 	addi	r2,r2,72
 8032134:	00000206 	br	8032140 <sosetopt+0x278>
 8032138:	e0bffa17 	ldw	r2,-24(fp)
 803213c:	10800a04 	addi	r2,r2,40
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
 8032140:	e0fff817 	ldw	r3,-32(fp)
 8032144:	18c00017 	ldw	r3,0(r3)
      if (sbreserve(optname == SO_SNDBUF ?
 8032148:	180b883a 	mov	r5,r3
 803214c:	1009883a 	mov	r4,r2
 8032150:	803326c0 	call	803326c <sbreserve>
 8032154:	10009f1e 	bne	r2,zero,80323d4 <sosetopt+0x50c>
      {
         error = ENOBUFS;
 8032158:	00801a44 	movi	r2,105
 803215c:	e0bfff15 	stw	r2,-4(fp)
         goto bad;
 8032160:	00009d06 	br	80323d8 <sosetopt+0x510>
      }
      break;

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
 8032164:	e0bff817 	ldw	r2,-32(fp)
 8032168:	10c0000b 	ldhu	r3,0(r2)
 803216c:	e0bffa17 	ldw	r2,-24(fp)
 8032170:	10c0118d 	sth	r3,70(r2)
      break;
 8032174:	00009806 	br	80323d8 <sosetopt+0x510>

   case SO_NBIO:     /* set socket into NON-blocking mode */
      so->so_state |= SS_NBIO;
 8032178:	e0bffa17 	ldw	r2,-24(fp)
 803217c:	1080088b 	ldhu	r2,34(r2)
 8032180:	10804014 	ori	r2,r2,256
 8032184:	1007883a 	mov	r3,r2
 8032188:	e0bffa17 	ldw	r2,-24(fp)
 803218c:	10c0088d 	sth	r3,34(r2)
      break;
 8032190:	00009106 	br	80323d8 <sosetopt+0x510>

   case SO_BIO:   /* set socket into blocking mode */
      so->so_state &= ~SS_NBIO;
 8032194:	e0bffa17 	ldw	r2,-24(fp)
 8032198:	10c0088b 	ldhu	r3,34(r2)
 803219c:	00bfbfc4 	movi	r2,-257
 80321a0:	1884703a 	and	r2,r3,r2
 80321a4:	1007883a 	mov	r3,r2
 80321a8:	e0bffa17 	ldw	r2,-24(fp)
 80321ac:	10c0088d 	sth	r3,34(r2)
      break;
 80321b0:	00008906 	br	80323d8 <sosetopt+0x510>

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
 80321b4:	e0bff817 	ldw	r2,-32(fp)
 80321b8:	1000031e 	bne	r2,zero,80321c8 <sosetopt+0x300>
      {
         error = ENP_PARAM;
 80321bc:	00bffd84 	movi	r2,-10
 80321c0:	e0bfff15 	stw	r2,-4(fp)
         break;
 80321c4:	00008406 	br	80323d8 <sosetopt+0x510>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 80321c8:	e0bff817 	ldw	r2,-32(fp)
 80321cc:	10800017 	ldw	r2,0(r2)
 80321d0:	10000726 	beq	r2,zero,80321f0 <sosetopt+0x328>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
 80321d4:	e0bffa17 	ldw	r2,-24(fp)
 80321d8:	1080088b 	ldhu	r2,34(r2)
 80321dc:	10804014 	ori	r2,r2,256
 80321e0:	1007883a 	mov	r3,r2
 80321e4:	e0bffa17 	ldw	r2,-24(fp)
 80321e8:	10c0088d 	sth	r3,34(r2)
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
      break;
 80321ec:	00007a06 	br	80323d8 <sosetopt+0x510>
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
 80321f0:	e0bffa17 	ldw	r2,-24(fp)
 80321f4:	10c0088b 	ldhu	r3,34(r2)
 80321f8:	00bfbfc4 	movi	r2,-257
 80321fc:	1884703a 	and	r2,r3,r2
 8032200:	1007883a 	mov	r3,r2
 8032204:	e0bffa17 	ldw	r2,-24(fp)
 8032208:	10c0088d 	sth	r3,34(r2)
      break;
 803220c:	00007206 	br	80323d8 <sosetopt+0x510>
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
 8032210:	e1bff817 	ldw	r6,-32(fp)
 8032214:	e17ffa17 	ldw	r5,-24(fp)
 8032218:	e13ff917 	ldw	r4,-28(fp)
 803221c:	8044cbc0 	call	8044cbc <ip_setmoptions>
 8032220:	e0bfff15 	stw	r2,-4(fp)
      break;
 8032224:	00006c06 	br	80323d8 <sosetopt+0x510>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 8032228:	e0bff817 	ldw	r2,-32(fp)
 803222c:	1000031e 	bne	r2,zero,803223c <sosetopt+0x374>
      {
         error = ENP_PARAM;
 8032230:	00bffd84 	movi	r2,-10
 8032234:	e0bfff15 	stw	r2,-4(fp)
         break;
 8032238:	00006706 	br	80323d8 <sosetopt+0x510>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
 803223c:	e0bff817 	ldw	r2,-32(fp)
 8032240:	10800017 	ldw	r2,0(r2)
 8032244:	10000626 	beq	r2,zero,8032260 <sosetopt+0x398>
         so->so_options |= SO_HDRINCL;
 8032248:	e0bffa17 	ldw	r2,-24(fp)
 803224c:	10800417 	ldw	r2,16(r2)
 8032250:	10c80014 	ori	r3,r2,8192
 8032254:	e0bffa17 	ldw	r2,-24(fp)
 8032258:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~SO_HDRINCL;
      break;
 803225c:	00005e06 	br	80323d8 <sosetopt+0x510>
         so->so_options &= ~SO_HDRINCL;
 8032260:	e0bffa17 	ldw	r2,-24(fp)
 8032264:	10c00417 	ldw	r3,16(r2)
 8032268:	00b7ffc4 	movi	r2,-8193
 803226c:	1886703a 	and	r3,r3,r2
 8032270:	e0bffa17 	ldw	r2,-24(fp)
 8032274:	10c00415 	stw	r3,16(r2)
      break;
 8032278:	00005706 	br	80323d8 <sosetopt+0x510>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 803227c:	e0bffa17 	ldw	r2,-24(fp)
 8032280:	10800983 	ldbu	r2,38(r2)
 8032284:	10803fcc 	andi	r2,r2,255
 8032288:	1080201c 	xori	r2,r2,128
 803228c:	10bfe004 	addi	r2,r2,-128
 8032290:	10800060 	cmpeqi	r2,r2,1
 8032294:	1000031e 	bne	r2,zero,80322a4 <sosetopt+0x3dc>
      {
         error = EINVAL;
 8032298:	00800584 	movi	r2,22
 803229c:	e0bfff15 	stw	r2,-4(fp)
         break;
 80322a0:	00004d06 	br	80323d8 <sosetopt+0x510>
      }
      inp = (struct inpcb *)(so->so_pcb);
 80322a4:	e0bffa17 	ldw	r2,-24(fp)
 80322a8:	10800117 	ldw	r2,4(r2)
 80322ac:	e0bffe15 	stw	r2,-8(fp)
      tp = intotcpcb(inp);
 80322b0:	e0bffe17 	ldw	r2,-8(fp)
 80322b4:	10800917 	ldw	r2,36(r2)
 80322b8:	e0bffd15 	stw	r2,-12(fp)
      if(!tp)
 80322bc:	e0bffd17 	ldw	r2,-12(fp)
 80322c0:	1000031e 	bne	r2,zero,80322d0 <sosetopt+0x408>
      {
         error = ENOTCONN;
 80322c4:	00802004 	movi	r2,128
 80322c8:	e0bfff15 	stw	r2,-4(fp)
         break;
 80322cc:	00004206 	br	80323d8 <sosetopt+0x510>
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 80322d0:	e0bff817 	ldw	r2,-32(fp)
 80322d4:	1000031e 	bne	r2,zero,80322e4 <sosetopt+0x41c>
      {
         error = ENP_PARAM;
 80322d8:	00bffd84 	movi	r2,-10
 80322dc:	e0bfff15 	stw	r2,-4(fp)
         break;
 80322e0:	00003d06 	br	80323d8 <sosetopt+0x510>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 80322e4:	e0bff817 	ldw	r2,-32(fp)
 80322e8:	10800017 	ldw	r2,0(r2)
 80322ec:	10000726 	beq	r2,zero,803230c <sosetopt+0x444>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
 80322f0:	e0bffd17 	ldw	r2,-12(fp)
 80322f4:	10800b0b 	ldhu	r2,44(r2)
 80322f8:	10800114 	ori	r2,r2,4
 80322fc:	1007883a 	mov	r3,r2
 8032300:	e0bffd17 	ldw	r2,-12(fp)
 8032304:	10c00b0d 	sth	r3,44(r2)
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */

      break;
 8032308:	00003306 	br	80323d8 <sosetopt+0x510>
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
 803230c:	e0bffd17 	ldw	r2,-12(fp)
 8032310:	10c00b0b 	ldhu	r3,44(r2)
 8032314:	00bffec4 	movi	r2,-5
 8032318:	1884703a 	and	r2,r3,r2
 803231c:	1007883a 	mov	r3,r2
 8032320:	e0bffd17 	ldw	r2,-12(fp)
 8032324:	10c00b0d 	sth	r3,44(r2)
      break;
 8032328:	00002b06 	br	80323d8 <sosetopt+0x510>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 803232c:	e0bffa17 	ldw	r2,-24(fp)
 8032330:	10800983 	ldbu	r2,38(r2)
 8032334:	10803fcc 	andi	r2,r2,255
 8032338:	1080201c 	xori	r2,r2,128
 803233c:	10bfe004 	addi	r2,r2,-128
 8032340:	10800060 	cmpeqi	r2,r2,1
 8032344:	1000031e 	bne	r2,zero,8032354 <sosetopt+0x48c>
      {
         error = EINVAL;
 8032348:	00800584 	movi	r2,22
 803234c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8032350:	00002106 	br	80323d8 <sosetopt+0x510>
      }
      inp = (struct inpcb *)(so->so_pcb);
 8032354:	e0bffa17 	ldw	r2,-24(fp)
 8032358:	10800117 	ldw	r2,4(r2)
 803235c:	e0bffc15 	stw	r2,-16(fp)
      tp = intotcpcb(inp);
 8032360:	e0bffc17 	ldw	r2,-16(fp)
 8032364:	10800917 	ldw	r2,36(r2)
 8032368:	e0bffb15 	stw	r2,-20(fp)
      if(!tp)
 803236c:	e0bffb17 	ldw	r2,-20(fp)
 8032370:	1000031e 	bne	r2,zero,8032380 <sosetopt+0x4b8>
      {
         error = ENOTCONN;
 8032374:	00802004 	movi	r2,128
 8032378:	e0bfff15 	stw	r2,-4(fp)
         break;
 803237c:	00001606 	br	80323d8 <sosetopt+0x510>
      }
      if (tp->t_state != TCPS_CLOSED)
 8032380:	e0bffb17 	ldw	r2,-20(fp)
 8032384:	10800217 	ldw	r2,8(r2)
 8032388:	10000326 	beq	r2,zero,8032398 <sosetopt+0x4d0>
      {
         error = EINVAL;
 803238c:	00800584 	movi	r2,22
 8032390:	e0bfff15 	stw	r2,-4(fp)
         break;
 8032394:	00001006 	br	80323d8 <sosetopt+0x510>
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
 8032398:	e0bff817 	ldw	r2,-32(fp)
 803239c:	10800017 	ldw	r2,0(r2)
 80323a0:	1007883a 	mov	r3,r2
 80323a4:	e0bffb17 	ldw	r2,-20(fp)
 80323a8:	10c00a0d 	sth	r3,40(r2)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
 80323ac:	e0bffb17 	ldw	r2,-20(fp)
 80323b0:	10800b0b 	ldhu	r2,44(r2)
 80323b4:	10810014 	ori	r2,r2,1024
 80323b8:	1007883a 	mov	r3,r2
 80323bc:	e0bffb17 	ldw	r2,-20(fp)
 80323c0:	10c00b0d 	sth	r3,44(r2)
      break;
 80323c4:	00000406 	br	80323d8 <sosetopt+0x510>
   }
   default:
      error = ENOPROTOOPT;
 80323c8:	00801b44 	movi	r2,109
 80323cc:	e0bfff15 	stw	r2,-4(fp)
      break;
 80323d0:	00000106 	br	80323d8 <sosetopt+0x510>
      break;
 80323d4:	0001883a 	nop
   }
bad:
   return (error);
 80323d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80323dc:	e037883a 	mov	sp,fp
 80323e0:	dfc00117 	ldw	ra,4(sp)
 80323e4:	df000017 	ldw	fp,0(sp)
 80323e8:	dec00204 	addi	sp,sp,8
 80323ec:	f800283a 	ret

080323f0 <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
 80323f0:	defff504 	addi	sp,sp,-44
 80323f4:	dfc00a15 	stw	ra,40(sp)
 80323f8:	df000915 	stw	fp,36(sp)
 80323fc:	df000904 	addi	fp,sp,36
 8032400:	e13ff915 	stw	r4,-28(fp)
 8032404:	e17ff815 	stw	r5,-32(fp)
 8032408:	e1bff715 	stw	r6,-36(fp)
   int   error =  0;
 803240c:	e03fff15 	stw	zero,-4(fp)

   /* sanity check the val parameter */
   if (!val)
 8032410:	e0bff717 	ldw	r2,-36(fp)
 8032414:	1000021e 	bne	r2,zero,8032420 <sogetopt+0x30>
   {
      return ENP_PARAM;
 8032418:	00bffd84 	movi	r2,-10
 803241c:	00014106 	br	8032924 <sogetopt+0x534>
   }

   switch (optname) 
 8032420:	e0bff817 	ldw	r2,-32(fp)
 8032424:	10880120 	cmpeqi	r2,r2,8196
 8032428:	1001151e 	bne	r2,zero,8032880 <sogetopt+0x490>
 803242c:	e0bff817 	ldw	r2,-32(fp)
 8032430:	10880148 	cmpgei	r2,r2,8197
 8032434:	1001381e 	bne	r2,zero,8032918 <sogetopt+0x528>
 8032438:	e0bff817 	ldw	r2,-32(fp)
 803243c:	108800e0 	cmpeqi	r2,r2,8195
 8032440:	1000c51e 	bne	r2,zero,8032758 <sogetopt+0x368>
 8032444:	e0bff817 	ldw	r2,-32(fp)
 8032448:	10880108 	cmpgei	r2,r2,8196
 803244c:	1001321e 	bne	r2,zero,8032918 <sogetopt+0x528>
 8032450:	e0bff817 	ldw	r2,-32(fp)
 8032454:	108405c8 	cmpgei	r2,r2,4119
 8032458:	10012f1e 	bne	r2,zero,8032918 <sogetopt+0x528>
 803245c:	e0bff817 	ldw	r2,-32(fp)
 8032460:	10840048 	cmpgei	r2,r2,4097
 8032464:	1000131e 	bne	r2,zero,80324b4 <sogetopt+0xc4>
 8032468:	e0bff817 	ldw	r2,-32(fp)
 803246c:	10808020 	cmpeqi	r2,r2,512
 8032470:	10007e1e 	bne	r2,zero,803266c <sogetopt+0x27c>
 8032474:	e0bff817 	ldw	r2,-32(fp)
 8032478:	10808048 	cmpgei	r2,r2,513
 803247c:	1001261e 	bne	r2,zero,8032918 <sogetopt+0x528>
 8032480:	e0bff817 	ldw	r2,-32(fp)
 8032484:	10804020 	cmpeqi	r2,r2,256
 8032488:	1000781e 	bne	r2,zero,803266c <sogetopt+0x27c>
 803248c:	e0bff817 	ldw	r2,-32(fp)
 8032490:	10804048 	cmpgei	r2,r2,257
 8032494:	1001201e 	bne	r2,zero,8032918 <sogetopt+0x528>
 8032498:	e0bff817 	ldw	r2,-32(fp)
 803249c:	10800848 	cmpgei	r2,r2,33
 80324a0:	10004d1e 	bne	r2,zero,80325d8 <sogetopt+0x1e8>
 80324a4:	e0bff817 	ldw	r2,-32(fp)
 80324a8:	10800088 	cmpgei	r2,r2,2
 80324ac:	1000201e 	bne	r2,zero,8032530 <sogetopt+0x140>
 80324b0:	00011906 	br	8032918 <sogetopt+0x528>
 80324b4:	e0bff817 	ldw	r2,-32(fp)
 80324b8:	10bbffc4 	addi	r2,r2,-4097
 80324bc:	10c005a8 	cmpgeui	r3,r2,22
 80324c0:	1801151e 	bne	r3,zero,8032918 <sogetopt+0x528>
 80324c4:	100690ba 	slli	r3,r2,2
 80324c8:	008200f4 	movhi	r2,2051
 80324cc:	1885883a 	add	r2,r3,r2
 80324d0:	10893617 	ldw	r2,9432(r2)
 80324d4:	1000683a 	jmp	r2
 80324d8:	080326bc 	xorhi	zero,at,3226
 80324dc:	080326d4 	ori	zero,at,3227
 80324e0:	0803268c 	andi	zero,at,3226
 80324e4:	080326a4 	muli	zero,at,3226
 80324e8:	080327c4 	addi	zero,at,3231
 80324ec:	080327d8 	cmpnei	zero,at,3231
 80324f0:	0803273c 	xorhi	zero,at,3228
 80324f4:	0803271c 	xori	zero,at,3228
 80324f8:	080327ec 	andhi	zero,at,3231
 80324fc:	08032918 	cmpnei	zero,at,3236
 8032500:	08032918 	cmpnei	zero,at,3236
 8032504:	08032918 	cmpnei	zero,at,3236
 8032508:	08032918 	cmpnei	zero,at,3236
 803250c:	08032918 	cmpnei	zero,at,3236
 8032510:	08032918 	cmpnei	zero,at,3236
 8032514:	08032758 	cmpnei	zero,at,3229
 8032518:	080326ec 	andhi	zero,at,3227
 803251c:	08032704 	addi	zero,at,3228
 8032520:	080325e8 	cmpgeui	zero,at,3223
 8032524:	08032918 	cmpnei	zero,at,3236
 8032528:	08032918 	cmpnei	zero,at,3236
 803252c:	0803280c 	andi	zero,at,3232
 8032530:	e0bff817 	ldw	r2,-32(fp)
 8032534:	10800868 	cmpgeui	r2,r2,33
 8032538:	1000f71e 	bne	r2,zero,8032918 <sogetopt+0x528>
 803253c:	e0bff817 	ldw	r2,-32(fp)
 8032540:	100690ba 	slli	r3,r2,2
 8032544:	008200f4 	movhi	r2,2051
 8032548:	1885883a 	add	r2,r3,r2
 803254c:	10895517 	ldw	r2,9556(r2)
 8032550:	1000683a 	jmp	r2
 8032554:	08032918 	cmpnei	zero,at,3236
 8032558:	08032918 	cmpnei	zero,at,3236
 803255c:	08032854 	ori	zero,at,3233
 8032560:	08032918 	cmpnei	zero,at,3236
 8032564:	0803266c 	andhi	zero,at,3225
 8032568:	08032918 	cmpnei	zero,at,3236
 803256c:	08032918 	cmpnei	zero,at,3236
 8032570:	08032918 	cmpnei	zero,at,3236
 8032574:	0803266c 	andhi	zero,at,3225
 8032578:	0803283c 	xorhi	zero,at,3232
 803257c:	0803283c 	xorhi	zero,at,3232
 8032580:	0803283c 	xorhi	zero,at,3232
 8032584:	08032918 	cmpnei	zero,at,3236
 8032588:	08032918 	cmpnei	zero,at,3236
 803258c:	08032918 	cmpnei	zero,at,3236
 8032590:	08032918 	cmpnei	zero,at,3236
 8032594:	0803266c 	andhi	zero,at,3225
 8032598:	08032918 	cmpnei	zero,at,3236
 803259c:	08032918 	cmpnei	zero,at,3236
 80325a0:	08032918 	cmpnei	zero,at,3236
 80325a4:	08032918 	cmpnei	zero,at,3236
 80325a8:	08032918 	cmpnei	zero,at,3236
 80325ac:	08032918 	cmpnei	zero,at,3236
 80325b0:	08032918 	cmpnei	zero,at,3236
 80325b4:	08032918 	cmpnei	zero,at,3236
 80325b8:	08032918 	cmpnei	zero,at,3236
 80325bc:	08032918 	cmpnei	zero,at,3236
 80325c0:	08032918 	cmpnei	zero,at,3236
 80325c4:	08032918 	cmpnei	zero,at,3236
 80325c8:	08032918 	cmpnei	zero,at,3236
 80325cc:	08032918 	cmpnei	zero,at,3236
 80325d0:	08032918 	cmpnei	zero,at,3236
 80325d4:	0803266c 	andhi	zero,at,3225
 80325d8:	e0bff817 	ldw	r2,-32(fp)
 80325dc:	10802020 	cmpeqi	r2,r2,128
 80325e0:	1000131e 	bne	r2,zero,8032630 <sogetopt+0x240>
 80325e4:	0000cc06 	br	8032918 <sogetopt+0x528>
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
 80325e8:	e0bff917 	ldw	r2,-28(fp)
 80325ec:	1080088b 	ldhu	r2,34(r2)
 80325f0:	10bfffcc 	andi	r2,r2,65535
 80325f4:	1080008c 	andi	r2,r2,2
 80325f8:	10000726 	beq	r2,zero,8032618 <sogetopt+0x228>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
 80325fc:	e0bff917 	ldw	r2,-28(fp)
 8032600:	10800117 	ldw	r2,4(r2)
 8032604:	10800a17 	ldw	r2,40(r2)
 8032608:	10c00a17 	ldw	r3,40(r2)
 803260c:	e0bff717 	ldw	r2,-36(fp)
 8032610:	10c00015 	stw	r3,0(r2)
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
 8032614:	0000c206 	br	8032920 <sogetopt+0x530>
         *(u_long *)val = nets[0]->n_ipaddr;
 8032618:	008201b4 	movhi	r2,2054
 803261c:	10bada17 	ldw	r2,-5272(r2)
 8032620:	10c00a17 	ldw	r3,40(r2)
 8032624:	e0bff717 	ldw	r2,-36(fp)
 8032628:	10c00015 	stw	r3,0(r2)
      break;
 803262c:	0000bc06 	br	8032920 <sogetopt+0x530>
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
 8032630:	e0bff717 	ldw	r2,-36(fp)
 8032634:	e0bffa15 	stw	r2,-24(fp)
         l->l_onoff = so->so_options & SO_LINGER;
 8032638:	e0bff917 	ldw	r2,-28(fp)
 803263c:	10800417 	ldw	r2,16(r2)
 8032640:	10c0200c 	andi	r3,r2,128
 8032644:	e0bffa17 	ldw	r2,-24(fp)
 8032648:	10c00015 	stw	r3,0(r2)
         l->l_linger = so->so_linger;
 803264c:	e0bff917 	ldw	r2,-28(fp)
 8032650:	1080080b 	ldhu	r2,32(r2)
 8032654:	10ffffcc 	andi	r3,r2,65535
 8032658:	18e0001c 	xori	r3,r3,32768
 803265c:	18e00004 	addi	r3,r3,-32768
 8032660:	e0bffa17 	ldw	r2,-24(fp)
 8032664:	10c00115 	stw	r3,4(r2)
      }
      break;
 8032668:	0000ad06 	br	8032920 <sogetopt+0x530>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
 803266c:	e0bff917 	ldw	r2,-28(fp)
 8032670:	10c00417 	ldw	r3,16(r2)
 8032674:	e0bff817 	ldw	r2,-32(fp)
 8032678:	1884703a 	and	r2,r3,r2
 803267c:	1007883a 	mov	r3,r2
 8032680:	e0bff717 	ldw	r2,-36(fp)
 8032684:	10c00015 	stw	r3,0(r2)
      break;
 8032688:	0000a506 	br	8032920 <sogetopt+0x530>

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
 803268c:	e0bff917 	ldw	r2,-28(fp)
 8032690:	10801617 	ldw	r2,88(r2)
 8032694:	1007883a 	mov	r3,r2
 8032698:	e0bff717 	ldw	r2,-36(fp)
 803269c:	10c00015 	stw	r3,0(r2)
      break;
 80326a0:	00009f06 	br	8032920 <sogetopt+0x530>

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
 80326a4:	e0bff917 	ldw	r2,-28(fp)
 80326a8:	10800e17 	ldw	r2,56(r2)
 80326ac:	1007883a 	mov	r3,r2
 80326b0:	e0bff717 	ldw	r2,-36(fp)
 80326b4:	10c00015 	stw	r3,0(r2)
      break;
 80326b8:	00009906 	br	8032920 <sogetopt+0x530>

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
 80326bc:	e0bff917 	ldw	r2,-28(fp)
 80326c0:	10801317 	ldw	r2,76(r2)
 80326c4:	1007883a 	mov	r3,r2
 80326c8:	e0bff717 	ldw	r2,-36(fp)
 80326cc:	10c00015 	stw	r3,0(r2)
      break;
 80326d0:	00009306 	br	8032920 <sogetopt+0x530>

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
 80326d4:	e0bff917 	ldw	r2,-28(fp)
 80326d8:	10800b17 	ldw	r2,44(r2)
 80326dc:	1007883a 	mov	r3,r2
 80326e0:	e0bff717 	ldw	r2,-36(fp)
 80326e4:	10c00015 	stw	r3,0(r2)
      break;
 80326e8:	00008d06 	br	8032920 <sogetopt+0x530>

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
 80326ec:	e0bff917 	ldw	r2,-28(fp)
 80326f0:	10800a17 	ldw	r2,40(r2)
 80326f4:	1007883a 	mov	r3,r2
 80326f8:	e0bff717 	ldw	r2,-36(fp)
 80326fc:	10c00015 	stw	r3,0(r2)
      break;
 8032700:	00008706 	br	8032920 <sogetopt+0x530>

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
 8032704:	e0bff917 	ldw	r2,-28(fp)
 8032708:	10801217 	ldw	r2,72(r2)
 803270c:	1007883a 	mov	r3,r2
 8032710:	e0bff717 	ldw	r2,-36(fp)
 8032714:	10c00015 	stw	r3,0(r2)
      break;
 8032718:	00008106 	br	8032920 <sogetopt+0x530>

   case SO_TYPE:
      *(int *)val = so->so_type;
 803271c:	e0bff917 	ldw	r2,-28(fp)
 8032720:	10800983 	ldbu	r2,38(r2)
 8032724:	10c03fcc 	andi	r3,r2,255
 8032728:	18c0201c 	xori	r3,r3,128
 803272c:	18ffe004 	addi	r3,r3,-128
 8032730:	e0bff717 	ldw	r2,-36(fp)
 8032734:	10c00015 	stw	r3,0(r2)
      break;
 8032738:	00007906 	br	8032920 <sogetopt+0x530>

   case SO_ERROR:
      *(int *)val = so->so_error;
 803273c:	e0bff917 	ldw	r2,-28(fp)
 8032740:	10c00617 	ldw	r3,24(r2)
 8032744:	e0bff717 	ldw	r2,-36(fp)
 8032748:	10c00015 	stw	r3,0(r2)
      so->so_error = 0;
 803274c:	e0bff917 	ldw	r2,-28(fp)
 8032750:	10000615 	stw	zero,24(r2)
      break;
 8032754:	00007206 	br	8032920 <sogetopt+0x530>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 8032758:	e0bff917 	ldw	r2,-28(fp)
 803275c:	10800983 	ldbu	r2,38(r2)
 8032760:	10803fcc 	andi	r2,r2,255
 8032764:	1080201c 	xori	r2,r2,128
 8032768:	10bfe004 	addi	r2,r2,-128
 803276c:	10800060 	cmpeqi	r2,r2,1
 8032770:	1000031e 	bne	r2,zero,8032780 <sogetopt+0x390>
      {
         error = EINVAL;
 8032774:	00800584 	movi	r2,22
 8032778:	e0bfff15 	stw	r2,-4(fp)
         break;
 803277c:	00006806 	br	8032920 <sogetopt+0x530>
      }
      inp = (struct inpcb *)(so->so_pcb);
 8032780:	e0bff917 	ldw	r2,-28(fp)
 8032784:	10800117 	ldw	r2,4(r2)
 8032788:	e0bffc15 	stw	r2,-16(fp)
      tp = intotcpcb(inp);
 803278c:	e0bffc17 	ldw	r2,-16(fp)
 8032790:	10800917 	ldw	r2,36(r2)
 8032794:	e0bffb15 	stw	r2,-20(fp)
      if(!tp)
 8032798:	e0bffb17 	ldw	r2,-20(fp)
 803279c:	1000031e 	bne	r2,zero,80327ac <sogetopt+0x3bc>
      {
         error = ENOTCONN;
 80327a0:	00802004 	movi	r2,128
 80327a4:	e0bfff15 	stw	r2,-4(fp)
         break;
 80327a8:	00005d06 	br	8032920 <sogetopt+0x530>
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
 80327ac:	e0bffb17 	ldw	r2,-20(fp)
 80327b0:	10800a0b 	ldhu	r2,40(r2)
 80327b4:	10ffffcc 	andi	r3,r2,65535
 80327b8:	e0bff717 	ldw	r2,-36(fp)
 80327bc:	10c00015 	stw	r3,0(r2)
      break;
 80327c0:	00005706 	br	8032920 <sogetopt+0x530>
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
 80327c4:	e0bff917 	ldw	r2,-28(fp)
 80327c8:	10c0198b 	ldhu	r3,102(r2)
 80327cc:	e0bff717 	ldw	r2,-36(fp)
 80327d0:	10c0000d 	sth	r3,0(r2)
      break;
 80327d4:	00005206 	br	8032920 <sogetopt+0x530>

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
 80327d8:	e0bff917 	ldw	r2,-28(fp)
 80327dc:	10c0118b 	ldhu	r3,70(r2)
 80327e0:	e0bff717 	ldw	r2,-36(fp)
 80327e4:	10c0000d 	sth	r3,0(r2)
      break;
 80327e8:	00004d06 	br	8032920 <sogetopt+0x530>

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
 80327ec:	e0bff917 	ldw	r2,-28(fp)
 80327f0:	108009c3 	ldbu	r2,39(r2)
 80327f4:	10c03fcc 	andi	r3,r2,255
 80327f8:	18c0201c 	xori	r3,r3,128
 80327fc:	18ffe004 	addi	r3,r3,-128
 8032800:	e0bff717 	ldw	r2,-36(fp)
 8032804:	10c00015 	stw	r3,0(r2)
      break;
 8032808:	00004506 	br	8032920 <sogetopt+0x530>

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
 803280c:	e0bff917 	ldw	r2,-28(fp)
 8032810:	1080088b 	ldhu	r2,34(r2)
 8032814:	10bfffcc 	andi	r2,r2,65535
 8032818:	1080400c 	andi	r2,r2,256
 803281c:	10000426 	beq	r2,zero,8032830 <sogetopt+0x440>
         *(int *)val = 1;   /* return 1 in val */
 8032820:	e0bff717 	ldw	r2,-36(fp)
 8032824:	00c00044 	movi	r3,1
 8032828:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;     /* return 0 in val */
      break;
 803282c:	00003c06 	br	8032920 <sogetopt+0x530>
         *(int *)val = 0;     /* return 0 in val */
 8032830:	e0bff717 	ldw	r2,-36(fp)
 8032834:	10000015 	stw	zero,0(r2)
      break;
 8032838:	00003906 	br	8032920 <sogetopt+0x530>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
 803283c:	e1bff717 	ldw	r6,-36(fp)
 8032840:	e17ff917 	ldw	r5,-28(fp)
 8032844:	e13ff817 	ldw	r4,-32(fp)
 8032848:	804525c0 	call	804525c <ip_getmoptions>
 803284c:	e0bfff15 	stw	r2,-4(fp)
      break;
 8032850:	00003306 	br	8032920 <sogetopt+0x530>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
 8032854:	e0bff917 	ldw	r2,-28(fp)
 8032858:	10800417 	ldw	r2,16(r2)
 803285c:	1088000c 	andi	r2,r2,8192
 8032860:	10000426 	beq	r2,zero,8032874 <sogetopt+0x484>
         *(int *)val = 1;
 8032864:	e0bff717 	ldw	r2,-36(fp)
 8032868:	00c00044 	movi	r3,1
 803286c:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;
      break;
 8032870:	00002b06 	br	8032920 <sogetopt+0x530>
         *(int *)val = 0;
 8032874:	e0bff717 	ldw	r2,-36(fp)
 8032878:	10000015 	stw	zero,0(r2)
      break;
 803287c:	00002806 	br	8032920 <sogetopt+0x530>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 8032880:	e0bff917 	ldw	r2,-28(fp)
 8032884:	10800983 	ldbu	r2,38(r2)
 8032888:	10803fcc 	andi	r2,r2,255
 803288c:	1080201c 	xori	r2,r2,128
 8032890:	10bfe004 	addi	r2,r2,-128
 8032894:	10800060 	cmpeqi	r2,r2,1
 8032898:	1000031e 	bne	r2,zero,80328a8 <sogetopt+0x4b8>
      {
         error = EINVAL;
 803289c:	00800584 	movi	r2,22
 80328a0:	e0bfff15 	stw	r2,-4(fp)
         break;
 80328a4:	00001e06 	br	8032920 <sogetopt+0x530>
      }
      inp = (struct inpcb *)(so->so_pcb);
 80328a8:	e0bff917 	ldw	r2,-28(fp)
 80328ac:	10800117 	ldw	r2,4(r2)
 80328b0:	e0bffe15 	stw	r2,-8(fp)
      tp = intotcpcb(inp);
 80328b4:	e0bffe17 	ldw	r2,-8(fp)
 80328b8:	10800917 	ldw	r2,36(r2)
 80328bc:	e0bffd15 	stw	r2,-12(fp)
      if (!tp)
 80328c0:	e0bffd17 	ldw	r2,-12(fp)
 80328c4:	1000031e 	bne	r2,zero,80328d4 <sogetopt+0x4e4>
      {
         error = ENOTCONN;
 80328c8:	00802004 	movi	r2,128
 80328cc:	e0bfff15 	stw	r2,-4(fp)
         break;
 80328d0:	00001306 	br	8032920 <sogetopt+0x530>
      }
      /* try to make sure that the argument pointer is valid */
      if (val == NULL)
 80328d4:	e0bff717 	ldw	r2,-36(fp)
 80328d8:	1000031e 	bne	r2,zero,80328e8 <sogetopt+0x4f8>
      {
         error = ENP_PARAM;
 80328dc:	00bffd84 	movi	r2,-10
 80328e0:	e0bfff15 	stw	r2,-4(fp)
         break;
 80328e4:	00000e06 	br	8032920 <sogetopt+0x530>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
 80328e8:	e0bffd17 	ldw	r2,-12(fp)
 80328ec:	10800b0b 	ldhu	r2,44(r2)
 80328f0:	10bfffcc 	andi	r2,r2,65535
 80328f4:	1080010c 	andi	r2,r2,4
 80328f8:	10000426 	beq	r2,zero,803290c <sogetopt+0x51c>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
 80328fc:	e0bff717 	ldw	r2,-36(fp)
 8032900:	00c00044 	movi	r3,1
 8032904:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */

      break;
 8032908:	00000506 	br	8032920 <sogetopt+0x530>
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
 803290c:	e0bff717 	ldw	r2,-36(fp)
 8032910:	10000015 	stw	zero,0(r2)
      break;
 8032914:	00000206 	br	8032920 <sogetopt+0x530>
   }

   default:
      return ENOPROTOOPT;
 8032918:	00801b44 	movi	r2,109
 803291c:	00000106 	br	8032924 <sogetopt+0x534>
   }
   return error;     /* no error */
 8032920:	e0bfff17 	ldw	r2,-4(fp)
}
 8032924:	e037883a 	mov	sp,fp
 8032928:	dfc00117 	ldw	ra,4(sp)
 803292c:	df000017 	ldw	fp,0(sp)
 8032930:	dec00204 	addi	sp,sp,8
 8032934:	f800283a 	ret

08032938 <sohasoutofband>:
 * RETURNS: 
 */

void
sohasoutofband(struct socket * so)
{
 8032938:	defffd04 	addi	sp,sp,-12
 803293c:	dfc00215 	stw	ra,8(sp)
 8032940:	df000115 	stw	fp,4(sp)
 8032944:	df000104 	addi	fp,sp,4
 8032948:	e13fff15 	stw	r4,-4(fp)
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
 803294c:	e0bfff17 	ldw	r2,-4(fp)
 8032950:	00c03644 	movi	r3,217
 8032954:	10c00615 	stw	r3,24(r2)
   sorwakeup (so);
 8032958:	e0bfff17 	ldw	r2,-4(fp)
 803295c:	10800a04 	addi	r2,r2,40
 8032960:	100b883a 	mov	r5,r2
 8032964:	e13fff17 	ldw	r4,-4(fp)
 8032968:	80331580 	call	8033158 <sbwakeup>
}
 803296c:	0001883a 	nop
 8032970:	e037883a 	mov	sp,fp
 8032974:	dfc00117 	ldw	ra,4(sp)
 8032978:	df000017 	ldw	fp,0(sp)
 803297c:	dec00204 	addi	sp,sp,8
 8032980:	f800283a 	ret

08032984 <soisconnecting>:
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
 8032984:	defffd04 	addi	sp,sp,-12
 8032988:	dfc00215 	stw	ra,8(sp)
 803298c:	df000115 	stw	fp,4(sp)
 8032990:	df000104 	addi	fp,sp,4
 8032994:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
 8032998:	e0bfff17 	ldw	r2,-4(fp)
 803299c:	10c0088b 	ldhu	r3,34(r2)
 80329a0:	00bffd44 	movi	r2,-11
 80329a4:	1884703a 	and	r2,r3,r2
 80329a8:	1007883a 	mov	r3,r2
 80329ac:	e0bfff17 	ldw	r2,-4(fp)
 80329b0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTING;
 80329b4:	e0bfff17 	ldw	r2,-4(fp)
 80329b8:	1080088b 	ldhu	r2,34(r2)
 80329bc:	10800114 	ori	r2,r2,4
 80329c0:	1007883a 	mov	r3,r2
 80329c4:	e0bfff17 	ldw	r2,-4(fp)
 80329c8:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 80329cc:	e0bfff17 	ldw	r2,-4(fp)
 80329d0:	10800904 	addi	r2,r2,36
 80329d4:	1009883a 	mov	r4,r2
 80329d8:	8028a0c0 	call	8028a0c <tcp_wakeup>
}
 80329dc:	0001883a 	nop
 80329e0:	e037883a 	mov	sp,fp
 80329e4:	dfc00117 	ldw	ra,4(sp)
 80329e8:	df000017 	ldw	fp,0(sp)
 80329ec:	dec00204 	addi	sp,sp,8
 80329f0:	f800283a 	ret

080329f4 <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
 80329f4:	defffc04 	addi	sp,sp,-16
 80329f8:	dfc00315 	stw	ra,12(sp)
 80329fc:	df000215 	stw	fp,8(sp)
 8032a00:	df000204 	addi	fp,sp,8
 8032a04:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   head  =  so->so_head;
 8032a08:	e0bffe17 	ldw	r2,-8(fp)
 8032a0c:	10801b17 	ldw	r2,108(r2)
 8032a10:	e0bfff15 	stw	r2,-4(fp)

   if (head) 
 8032a14:	e0bfff17 	ldw	r2,-4(fp)
 8032a18:	10001426 	beq	r2,zero,8032a6c <soisconnected+0x78>
   {
      if (soqremque(so, 0) == 0)
 8032a1c:	000b883a 	mov	r5,zero
 8032a20:	e13ffe17 	ldw	r4,-8(fp)
 8032a24:	8032ef80 	call	8032ef8 <soqremque>
 8032a28:	1000031e 	bne	r2,zero,8032a38 <soisconnected+0x44>
         panic("soisconnected");
 8032a2c:	01020174 	movhi	r4,2053
 8032a30:	210c1a04 	addi	r4,r4,12392
 8032a34:	8027fe00 	call	8027fe0 <panic>
      soqinsque(head, so, 1);
 8032a38:	01800044 	movi	r6,1
 8032a3c:	e17ffe17 	ldw	r5,-8(fp)
 8032a40:	e13fff17 	ldw	r4,-4(fp)
 8032a44:	8032e4c0 	call	8032e4c <soqinsque>
      sorwakeup(head);
 8032a48:	e0bfff17 	ldw	r2,-4(fp)
 8032a4c:	10800a04 	addi	r2,r2,40
 8032a50:	100b883a 	mov	r5,r2
 8032a54:	e13fff17 	ldw	r4,-4(fp)
 8032a58:	80331580 	call	8033158 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
 8032a5c:	e0bfff17 	ldw	r2,-4(fp)
 8032a60:	10800904 	addi	r2,r2,36
 8032a64:	1009883a 	mov	r4,r2
 8032a68:	8028a0c0 	call	8028a0c <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 8032a6c:	e0bffe17 	ldw	r2,-8(fp)
 8032a70:	10c0088b 	ldhu	r3,34(r2)
 8032a74:	00bffcc4 	movi	r2,-13
 8032a78:	1884703a 	and	r2,r3,r2
 8032a7c:	1007883a 	mov	r3,r2
 8032a80:	e0bffe17 	ldw	r2,-8(fp)
 8032a84:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTED;
 8032a88:	e0bffe17 	ldw	r2,-8(fp)
 8032a8c:	1080088b 	ldhu	r2,34(r2)
 8032a90:	10800094 	ori	r2,r2,2
 8032a94:	1007883a 	mov	r3,r2
 8032a98:	e0bffe17 	ldw	r2,-8(fp)
 8032a9c:	10c0088d 	sth	r3,34(r2)
   so->so_error = 0;
 8032aa0:	e0bffe17 	ldw	r2,-8(fp)
 8032aa4:	10000615 	stw	zero,24(r2)
   tcp_wakeup  ((char *)&so->so_timeo);
 8032aa8:	e0bffe17 	ldw	r2,-8(fp)
 8032aac:	10800904 	addi	r2,r2,36
 8032ab0:	1009883a 	mov	r4,r2
 8032ab4:	8028a0c0 	call	8028a0c <tcp_wakeup>
   sorwakeup (so);
 8032ab8:	e0bffe17 	ldw	r2,-8(fp)
 8032abc:	10800a04 	addi	r2,r2,40
 8032ac0:	100b883a 	mov	r5,r2
 8032ac4:	e13ffe17 	ldw	r4,-8(fp)
 8032ac8:	80331580 	call	8033158 <sbwakeup>
   sowwakeup (so);
 8032acc:	e0bffe17 	ldw	r2,-8(fp)
 8032ad0:	10801204 	addi	r2,r2,72
 8032ad4:	100b883a 	mov	r5,r2
 8032ad8:	e13ffe17 	ldw	r4,-8(fp)
 8032adc:	80331580 	call	8033158 <sbwakeup>
}
 8032ae0:	0001883a 	nop
 8032ae4:	e037883a 	mov	sp,fp
 8032ae8:	dfc00117 	ldw	ra,4(sp)
 8032aec:	df000017 	ldw	fp,0(sp)
 8032af0:	dec00204 	addi	sp,sp,8
 8032af4:	f800283a 	ret

08032af8 <soisdisconnecting>:
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 8032af8:	defffd04 	addi	sp,sp,-12
 8032afc:	dfc00215 	stw	ra,8(sp)
 8032b00:	df000115 	stw	fp,4(sp)
 8032b04:	df000104 	addi	fp,sp,4
 8032b08:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~SS_ISCONNECTING;
 8032b0c:	e0bfff17 	ldw	r2,-4(fp)
 8032b10:	10c0088b 	ldhu	r3,34(r2)
 8032b14:	00bffec4 	movi	r2,-5
 8032b18:	1884703a 	and	r2,r3,r2
 8032b1c:	1007883a 	mov	r3,r2
 8032b20:	e0bfff17 	ldw	r2,-4(fp)
 8032b24:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 8032b28:	e0bfff17 	ldw	r2,-4(fp)
 8032b2c:	1080088b 	ldhu	r2,34(r2)
 8032b30:	10800e14 	ori	r2,r2,56
 8032b34:	1007883a 	mov	r3,r2
 8032b38:	e0bfff17 	ldw	r2,-4(fp)
 8032b3c:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup  ((char *)&so->so_timeo);   
 8032b40:	e0bfff17 	ldw	r2,-4(fp)
 8032b44:	10800904 	addi	r2,r2,36
 8032b48:	1009883a 	mov	r4,r2
 8032b4c:	8028a0c0 	call	8028a0c <tcp_wakeup>
   sowwakeup (so);
 8032b50:	e0bfff17 	ldw	r2,-4(fp)
 8032b54:	10801204 	addi	r2,r2,72
 8032b58:	100b883a 	mov	r5,r2
 8032b5c:	e13fff17 	ldw	r4,-4(fp)
 8032b60:	80331580 	call	8033158 <sbwakeup>
   sorwakeup (so);
 8032b64:	e0bfff17 	ldw	r2,-4(fp)
 8032b68:	10800a04 	addi	r2,r2,40
 8032b6c:	100b883a 	mov	r5,r2
 8032b70:	e13fff17 	ldw	r4,-4(fp)
 8032b74:	80331580 	call	8033158 <sbwakeup>
}
 8032b78:	0001883a 	nop
 8032b7c:	e037883a 	mov	sp,fp
 8032b80:	dfc00117 	ldw	ra,4(sp)
 8032b84:	df000017 	ldw	fp,0(sp)
 8032b88:	dec00204 	addi	sp,sp,8
 8032b8c:	f800283a 	ret

08032b90 <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
 8032b90:	defffd04 	addi	sp,sp,-12
 8032b94:	dfc00215 	stw	ra,8(sp)
 8032b98:	df000115 	stw	fp,4(sp)
 8032b9c:	df000104 	addi	fp,sp,4
 8032ba0:	e13fff15 	stw	r4,-4(fp)
   if (so->so_state & SS_ISCONNECTING)
 8032ba4:	e0bfff17 	ldw	r2,-4(fp)
 8032ba8:	1080088b 	ldhu	r2,34(r2)
 8032bac:	10bfffcc 	andi	r2,r2,65535
 8032bb0:	1080010c 	andi	r2,r2,4
 8032bb4:	10000626 	beq	r2,zero,8032bd0 <soisdisconnected+0x40>
      so->so_state |= SS_WASCONNECTING;
 8032bb8:	e0bfff17 	ldw	r2,-4(fp)
 8032bbc:	1080088b 	ldhu	r2,34(r2)
 8032bc0:	10880014 	ori	r2,r2,8192
 8032bc4:	1007883a 	mov	r3,r2
 8032bc8:	e0bfff17 	ldw	r2,-4(fp)
 8032bcc:	10c0088d 	sth	r3,34(r2)
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
 8032bd0:	e0bfff17 	ldw	r2,-4(fp)
 8032bd4:	10c0088b 	ldhu	r3,34(r2)
 8032bd8:	00bffc44 	movi	r2,-15
 8032bdc:	1884703a 	and	r2,r3,r2
 8032be0:	1007883a 	mov	r3,r2
 8032be4:	e0bfff17 	ldw	r2,-4(fp)
 8032be8:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
 8032bec:	e0bfff17 	ldw	r2,-4(fp)
 8032bf0:	1080088b 	ldhu	r2,34(r2)
 8032bf4:	10800c14 	ori	r2,r2,48
 8032bf8:	1007883a 	mov	r3,r2
 8032bfc:	e0bfff17 	ldw	r2,-4(fp)
 8032c00:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 8032c04:	e0bfff17 	ldw	r2,-4(fp)
 8032c08:	10800904 	addi	r2,r2,36
 8032c0c:	1009883a 	mov	r4,r2
 8032c10:	8028a0c0 	call	8028a0c <tcp_wakeup>
   sowwakeup (so);
 8032c14:	e0bfff17 	ldw	r2,-4(fp)
 8032c18:	10801204 	addi	r2,r2,72
 8032c1c:	100b883a 	mov	r5,r2
 8032c20:	e13fff17 	ldw	r4,-4(fp)
 8032c24:	80331580 	call	8033158 <sbwakeup>
   sorwakeup (so);
 8032c28:	e0bfff17 	ldw	r2,-4(fp)
 8032c2c:	10800a04 	addi	r2,r2,40
 8032c30:	100b883a 	mov	r5,r2
 8032c34:	e13fff17 	ldw	r4,-4(fp)
 8032c38:	80331580 	call	8033158 <sbwakeup>
}
 8032c3c:	0001883a 	nop
 8032c40:	e037883a 	mov	sp,fp
 8032c44:	dfc00117 	ldw	ra,4(sp)
 8032c48:	df000017 	ldw	fp,0(sp)
 8032c4c:	dec00204 	addi	sp,sp,8
 8032c50:	f800283a 	ret

08032c54 <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
 8032c54:	defffb04 	addi	sp,sp,-20
 8032c58:	dfc00415 	stw	ra,16(sp)
 8032c5c:	df000315 	stw	fp,12(sp)
 8032c60:	df000304 	addi	fp,sp,12
 8032c64:	e13ffd15 	stw	r4,-12(fp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 8032c68:	e0bffd17 	ldw	r2,-12(fp)
 8032c6c:	10801e43 	ldbu	r2,121(r2)
 8032c70:	10c03fcc 	andi	r3,r2,255
 8032c74:	18c0201c 	xori	r3,r3,128
 8032c78:	18ffe004 	addi	r3,r3,-128
 8032c7c:	e0bffd17 	ldw	r2,-12(fp)
 8032c80:	10801e03 	ldbu	r2,120(r2)
 8032c84:	10803fcc 	andi	r2,r2,255
 8032c88:	1080201c 	xori	r2,r2,128
 8032c8c:	10bfe004 	addi	r2,r2,-128
 8032c90:	1887883a 	add	r3,r3,r2
 8032c94:	e0bffd17 	ldw	r2,-12(fp)
 8032c98:	10801e83 	ldbu	r2,122(r2)
 8032c9c:	10803fcc 	andi	r2,r2,255
 8032ca0:	1080201c 	xori	r2,r2,128
 8032ca4:	10bfe004 	addi	r2,r2,-128
 8032ca8:	108000e4 	muli	r2,r2,3
 8032cac:	1008d7fa 	srli	r4,r2,31
 8032cb0:	2085883a 	add	r2,r4,r2
 8032cb4:	1005d07a 	srai	r2,r2,1
 8032cb8:	10c05b16 	blt	r2,r3,8032e28 <sonewconn+0x1d4>
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 8032cbc:	01002104 	movi	r4,132
 8032cc0:	802cf5c0 	call	802cf5c <npalloc>
 8032cc4:	e0bfff15 	stw	r2,-4(fp)
 8032cc8:	e0bfff17 	ldw	r2,-4(fp)
 8032ccc:	10005826 	beq	r2,zero,8032e30 <sonewconn+0x1dc>
      goto bad;
   so->next = NULL;
 8032cd0:	e0bfff17 	ldw	r2,-4(fp)
 8032cd4:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 8032cd8:	e17fff17 	ldw	r5,-4(fp)
 8032cdc:	010201b4 	movhi	r4,2054
 8032ce0:	213c1704 	addi	r4,r4,-4004
 8032ce4:	802bde00 	call	802bde0 <putq>
   so->so_type = head->so_type;
 8032ce8:	e0bffd17 	ldw	r2,-12(fp)
 8032cec:	10c00983 	ldbu	r3,38(r2)
 8032cf0:	e0bfff17 	ldw	r2,-4(fp)
 8032cf4:	10c00985 	stb	r3,38(r2)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 8032cf8:	e0bffd17 	ldw	r2,-12(fp)
 8032cfc:	10c00417 	ldw	r3,16(r2)
 8032d00:	00bfff44 	movi	r2,-3
 8032d04:	1886703a 	and	r3,r3,r2
 8032d08:	e0bfff17 	ldw	r2,-4(fp)
 8032d0c:	10c00415 	stw	r3,16(r2)
   so->so_linger = head->so_linger;
 8032d10:	e0bffd17 	ldw	r2,-12(fp)
 8032d14:	10c0080b 	ldhu	r3,32(r2)
 8032d18:	e0bfff17 	ldw	r2,-4(fp)
 8032d1c:	10c0080d 	sth	r3,32(r2)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 8032d20:	e0bffd17 	ldw	r2,-12(fp)
 8032d24:	1080088b 	ldhu	r2,34(r2)
 8032d28:	10800054 	ori	r2,r2,1
 8032d2c:	1007883a 	mov	r3,r2
 8032d30:	e0bfff17 	ldw	r2,-4(fp)
 8032d34:	10c0088d 	sth	r3,34(r2)
   so->so_proto = head->so_proto;
 8032d38:	e0bffd17 	ldw	r2,-12(fp)
 8032d3c:	10c00217 	ldw	r3,8(r2)
 8032d40:	e0bfff17 	ldw	r2,-4(fp)
 8032d44:	10c00215 	stw	r3,8(r2)
   so->so_timeo = head->so_timeo;
 8032d48:	e0bffd17 	ldw	r2,-12(fp)
 8032d4c:	10c0090b 	ldhu	r3,36(r2)
 8032d50:	e0bfff17 	ldw	r2,-4(fp)
 8032d54:	10c0090d 	sth	r3,36(r2)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 8032d58:	d0e03d17 	ldw	r3,-32524(gp)
 8032d5c:	e0bfff17 	ldw	r2,-4(fp)
 8032d60:	10c00b15 	stw	r3,44(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 8032d64:	d0e03c17 	ldw	r3,-32528(gp)
 8032d68:	e0bfff17 	ldw	r2,-4(fp)
 8032d6c:	10c01315 	stw	r3,76(r2)
   soqinsque (head, so, 0);
 8032d70:	000d883a 	mov	r6,zero
 8032d74:	e17fff17 	ldw	r5,-4(fp)
 8032d78:	e13ffd17 	ldw	r4,-12(fp)
 8032d7c:	8032e4c0 	call	8032e4c <soqinsque>
   so->so_req = PRU_ATTACH;
 8032d80:	e0bfff17 	ldw	r2,-4(fp)
 8032d84:	10000715 	stw	zero,28(r2)
   so->so_domain = head->so_domain;
 8032d88:	e0bffd17 	ldw	r2,-12(fp)
 8032d8c:	10c00517 	ldw	r3,20(r2)
 8032d90:	e0bfff17 	ldw	r2,-4(fp)
 8032d94:	10c00515 	stw	r3,20(r2)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 8032d98:	e0bfff17 	ldw	r2,-4(fp)
 8032d9c:	10800217 	ldw	r2,8(r2)
 8032da0:	10800317 	ldw	r2,12(r2)
 8032da4:	000d883a 	mov	r6,zero
 8032da8:	000b883a 	mov	r5,zero
 8032dac:	e13fff17 	ldw	r4,-4(fp)
 8032db0:	103ee83a 	callr	r2
 8032db4:	10000f1e 	bne	r2,zero,8032df4 <sonewconn+0x1a0>
      goto bad2;
   if (so_evtmap)
 8032db8:	d0a0c903 	ldbu	r2,-31964(gp)
 8032dbc:	10803fcc 	andi	r2,r2,255
 8032dc0:	10000a26 	beq	r2,zero,8032dec <sonewconn+0x198>
   {
      rc = (*so_evtmap_create) (so);                       
 8032dc4:	d0a0c717 	ldw	r2,-31972(gp)
 8032dc8:	e13fff17 	ldw	r4,-4(fp)
 8032dcc:	103ee83a 	callr	r2
 8032dd0:	e0bffe15 	stw	r2,-8(fp)
      if (rc != 0) goto bad2;
 8032dd4:	e0bffe17 	ldw	r2,-8(fp)
 8032dd8:	1000081e 	bne	r2,zero,8032dfc <sonewconn+0x1a8>
      so->owner = head->owner;
 8032ddc:	e0bffd17 	ldw	r2,-12(fp)
 8032de0:	10c02003 	ldbu	r3,128(r2)
 8032de4:	e0bfff17 	ldw	r2,-4(fp)
 8032de8:	10c02005 	stb	r3,128(r2)
   }
   return (so);
 8032dec:	e0bfff17 	ldw	r2,-4(fp)
 8032df0:	00001106 	br	8032e38 <sonewconn+0x1e4>
      goto bad2;
 8032df4:	0001883a 	nop
 8032df8:	00000106 	br	8032e00 <sonewconn+0x1ac>
      if (rc != 0) goto bad2;
 8032dfc:	0001883a 	nop
   
bad2:
   (void) soqremque (so, 0);
 8032e00:	000b883a 	mov	r5,zero
 8032e04:	e13fff17 	ldw	r4,-4(fp)
 8032e08:	8032ef80 	call	8032ef8 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 8032e0c:	e17fff17 	ldw	r5,-4(fp)
 8032e10:	010201b4 	movhi	r4,2054
 8032e14:	213c1704 	addi	r4,r4,-4004
 8032e18:	802be900 	call	802be90 <qdel>
   SOC_FREE(so);  /* Free the socket structure */
 8032e1c:	e13fff17 	ldw	r4,-4(fp)
 8032e20:	802cf900 	call	802cf90 <npfree>
 8032e24:	00000306 	br	8032e34 <sonewconn+0x1e0>
      goto bad;
 8032e28:	0001883a 	nop
 8032e2c:	00000106 	br	8032e34 <sonewconn+0x1e0>
      goto bad;
 8032e30:	0001883a 	nop
bad:
   return ((struct socket *)0);
 8032e34:	0005883a 	mov	r2,zero
}
 8032e38:	e037883a 	mov	sp,fp
 8032e3c:	dfc00117 	ldw	ra,4(sp)
 8032e40:	df000017 	ldw	fp,0(sp)
 8032e44:	dec00204 	addi	sp,sp,8
 8032e48:	f800283a 	ret

08032e4c <soqinsque>:

void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
 8032e4c:	defffc04 	addi	sp,sp,-16
 8032e50:	df000315 	stw	fp,12(sp)
 8032e54:	df000304 	addi	fp,sp,12
 8032e58:	e13fff15 	stw	r4,-4(fp)
 8032e5c:	e17ffe15 	stw	r5,-8(fp)
 8032e60:	e1bffd15 	stw	r6,-12(fp)
   so->so_head = head;
 8032e64:	e0bffe17 	ldw	r2,-8(fp)
 8032e68:	e0ffff17 	ldw	r3,-4(fp)
 8032e6c:	10c01b15 	stw	r3,108(r2)
   if (q == 0) 
 8032e70:	e0bffd17 	ldw	r2,-12(fp)
 8032e74:	10000e1e 	bne	r2,zero,8032eb0 <soqinsque+0x64>
   {
      head->so_q0len++;
 8032e78:	e0bfff17 	ldw	r2,-4(fp)
 8032e7c:	10801e03 	ldbu	r2,120(r2)
 8032e80:	10800044 	addi	r2,r2,1
 8032e84:	1007883a 	mov	r3,r2
 8032e88:	e0bfff17 	ldw	r2,-4(fp)
 8032e8c:	10c01e05 	stb	r3,120(r2)
      so->so_q0 = head->so_q0;
 8032e90:	e0bfff17 	ldw	r2,-4(fp)
 8032e94:	10c01c17 	ldw	r3,112(r2)
 8032e98:	e0bffe17 	ldw	r2,-8(fp)
 8032e9c:	10c01c15 	stw	r3,112(r2)
      head->so_q0 = so;
 8032ea0:	e0bfff17 	ldw	r2,-4(fp)
 8032ea4:	e0fffe17 	ldw	r3,-8(fp)
 8032ea8:	10c01c15 	stw	r3,112(r2)
   {
      head->so_qlen++;
      so->so_q = head->so_q;
      head->so_q = so;
   }
}
 8032eac:	00000d06 	br	8032ee4 <soqinsque+0x98>
      head->so_qlen++;
 8032eb0:	e0bfff17 	ldw	r2,-4(fp)
 8032eb4:	10801e43 	ldbu	r2,121(r2)
 8032eb8:	10800044 	addi	r2,r2,1
 8032ebc:	1007883a 	mov	r3,r2
 8032ec0:	e0bfff17 	ldw	r2,-4(fp)
 8032ec4:	10c01e45 	stb	r3,121(r2)
      so->so_q = head->so_q;
 8032ec8:	e0bfff17 	ldw	r2,-4(fp)
 8032ecc:	10c01d17 	ldw	r3,116(r2)
 8032ed0:	e0bffe17 	ldw	r2,-8(fp)
 8032ed4:	10c01d15 	stw	r3,116(r2)
      head->so_q = so;
 8032ed8:	e0bfff17 	ldw	r2,-4(fp)
 8032edc:	e0fffe17 	ldw	r3,-8(fp)
 8032ee0:	10c01d15 	stw	r3,116(r2)
}
 8032ee4:	0001883a 	nop
 8032ee8:	e037883a 	mov	sp,fp
 8032eec:	df000017 	ldw	fp,0(sp)
 8032ef0:	dec00104 	addi	sp,sp,4
 8032ef4:	f800283a 	ret

08032ef8 <soqremque>:
 * RETURNS: 
 */

int
soqremque(struct socket * so, int q)
{
 8032ef8:	defffa04 	addi	sp,sp,-24
 8032efc:	df000515 	stw	fp,20(sp)
 8032f00:	df000504 	addi	fp,sp,20
 8032f04:	e13ffc15 	stw	r4,-16(fp)
 8032f08:	e17ffb15 	stw	r5,-20(fp)
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
 8032f0c:	e0bffc17 	ldw	r2,-16(fp)
 8032f10:	10801b17 	ldw	r2,108(r2)
 8032f14:	e0bffe15 	stw	r2,-8(fp)
   prev = head;
 8032f18:	e0bffe17 	ldw	r2,-8(fp)
 8032f1c:	e0bfff15 	stw	r2,-4(fp)
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
 8032f20:	e0bffb17 	ldw	r2,-20(fp)
 8032f24:	10000326 	beq	r2,zero,8032f34 <soqremque+0x3c>
 8032f28:	e0bfff17 	ldw	r2,-4(fp)
 8032f2c:	10801d17 	ldw	r2,116(r2)
 8032f30:	00000206 	br	8032f3c <soqremque+0x44>
 8032f34:	e0bfff17 	ldw	r2,-4(fp)
 8032f38:	10801c17 	ldw	r2,112(r2)
 8032f3c:	e0bffd15 	stw	r2,-12(fp)
      if (next == so)
 8032f40:	e0fffd17 	ldw	r3,-12(fp)
 8032f44:	e0bffc17 	ldw	r2,-16(fp)
 8032f48:	18800826 	beq	r3,r2,8032f6c <soqremque+0x74>
         break;
      if (next == head)
 8032f4c:	e0fffd17 	ldw	r3,-12(fp)
 8032f50:	e0bffe17 	ldw	r2,-8(fp)
 8032f54:	1880021e 	bne	r3,r2,8032f60 <soqremque+0x68>
         return (0);
 8032f58:	0005883a 	mov	r2,zero
 8032f5c:	00002406 	br	8032ff0 <soqremque+0xf8>
      prev = next;
 8032f60:	e0bffd17 	ldw	r2,-12(fp)
 8032f64:	e0bfff15 	stw	r2,-4(fp)
      next = q ? prev->so_q : prev->so_q0;
 8032f68:	003fed06 	br	8032f20 <soqremque+0x28>
         break;
 8032f6c:	0001883a 	nop
   }
   if (q == 0) 
 8032f70:	e0bffb17 	ldw	r2,-20(fp)
 8032f74:	10000b1e 	bne	r2,zero,8032fa4 <soqremque+0xac>
   {
      prev->so_q0 = next->so_q0;
 8032f78:	e0bffd17 	ldw	r2,-12(fp)
 8032f7c:	10c01c17 	ldw	r3,112(r2)
 8032f80:	e0bfff17 	ldw	r2,-4(fp)
 8032f84:	10c01c15 	stw	r3,112(r2)
      head->so_q0len--;
 8032f88:	e0bffe17 	ldw	r2,-8(fp)
 8032f8c:	10801e03 	ldbu	r2,120(r2)
 8032f90:	10bfffc4 	addi	r2,r2,-1
 8032f94:	1007883a 	mov	r3,r2
 8032f98:	e0bffe17 	ldw	r2,-8(fp)
 8032f9c:	10c01e05 	stb	r3,120(r2)
 8032fa0:	00000a06 	br	8032fcc <soqremque+0xd4>
   } else 
   {
      prev->so_q = next->so_q;
 8032fa4:	e0bffd17 	ldw	r2,-12(fp)
 8032fa8:	10c01d17 	ldw	r3,116(r2)
 8032fac:	e0bfff17 	ldw	r2,-4(fp)
 8032fb0:	10c01d15 	stw	r3,116(r2)
      head->so_qlen--;
 8032fb4:	e0bffe17 	ldw	r2,-8(fp)
 8032fb8:	10801e43 	ldbu	r2,121(r2)
 8032fbc:	10bfffc4 	addi	r2,r2,-1
 8032fc0:	1007883a 	mov	r3,r2
 8032fc4:	e0bffe17 	ldw	r2,-8(fp)
 8032fc8:	10c01e45 	stb	r3,121(r2)
   }
   next->so_q0 = next->so_q = 0;
 8032fcc:	e0bffd17 	ldw	r2,-12(fp)
 8032fd0:	10001d15 	stw	zero,116(r2)
 8032fd4:	e0bffd17 	ldw	r2,-12(fp)
 8032fd8:	10c01d17 	ldw	r3,116(r2)
 8032fdc:	e0bffd17 	ldw	r2,-12(fp)
 8032fe0:	10c01c15 	stw	r3,112(r2)
   next->so_head = 0;
 8032fe4:	e0bffd17 	ldw	r2,-12(fp)
 8032fe8:	10001b15 	stw	zero,108(r2)
   return 1;
 8032fec:	00800044 	movi	r2,1
}
 8032ff0:	e037883a 	mov	sp,fp
 8032ff4:	df000017 	ldw	fp,0(sp)
 8032ff8:	dec00104 	addi	sp,sp,4
 8032ffc:	f800283a 	ret

08033000 <socantsendmore>:
 * RETURNS: 
 */

void
socantsendmore(struct socket * so)
{
 8033000:	defffd04 	addi	sp,sp,-12
 8033004:	dfc00215 	stw	ra,8(sp)
 8033008:	df000115 	stw	fp,4(sp)
 803300c:	df000104 	addi	fp,sp,4
 8033010:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTSENDMORE;
 8033014:	e0bfff17 	ldw	r2,-4(fp)
 8033018:	1080088b 	ldhu	r2,34(r2)
 803301c:	10800414 	ori	r2,r2,16
 8033020:	1007883a 	mov	r3,r2
 8033024:	e0bfff17 	ldw	r2,-4(fp)
 8033028:	10c0088d 	sth	r3,34(r2)
   sowwakeup(so);
 803302c:	e0bfff17 	ldw	r2,-4(fp)
 8033030:	10801204 	addi	r2,r2,72
 8033034:	100b883a 	mov	r5,r2
 8033038:	e13fff17 	ldw	r4,-4(fp)
 803303c:	80331580 	call	8033158 <sbwakeup>
}
 8033040:	0001883a 	nop
 8033044:	e037883a 	mov	sp,fp
 8033048:	dfc00117 	ldw	ra,4(sp)
 803304c:	df000017 	ldw	fp,0(sp)
 8033050:	dec00204 	addi	sp,sp,8
 8033054:	f800283a 	ret

08033058 <socantrcvmore>:
 * RETURNS: 
 */

void
socantrcvmore(struct socket * so)
{
 8033058:	defffd04 	addi	sp,sp,-12
 803305c:	dfc00215 	stw	ra,8(sp)
 8033060:	df000115 	stw	fp,4(sp)
 8033064:	df000104 	addi	fp,sp,4
 8033068:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTRCVMORE;
 803306c:	e0bfff17 	ldw	r2,-4(fp)
 8033070:	1080088b 	ldhu	r2,34(r2)
 8033074:	10800814 	ori	r2,r2,32
 8033078:	1007883a 	mov	r3,r2
 803307c:	e0bfff17 	ldw	r2,-4(fp)
 8033080:	10c0088d 	sth	r3,34(r2)
   sorwakeup(so);
 8033084:	e0bfff17 	ldw	r2,-4(fp)
 8033088:	10800a04 	addi	r2,r2,40
 803308c:	100b883a 	mov	r5,r2
 8033090:	e13fff17 	ldw	r4,-4(fp)
 8033094:	80331580 	call	8033158 <sbwakeup>
}
 8033098:	0001883a 	nop
 803309c:	e037883a 	mov	sp,fp
 80330a0:	dfc00117 	ldw	ra,4(sp)
 80330a4:	df000017 	ldw	fp,0(sp)
 80330a8:	dec00204 	addi	sp,sp,8
 80330ac:	f800283a 	ret

080330b0 <sbselqueue>:
 * RETURNS: 
 */

void
sbselqueue(struct sockbuf * sb)
{
 80330b0:	defffe04 	addi	sp,sp,-8
 80330b4:	df000115 	stw	fp,4(sp)
 80330b8:	df000104 	addi	fp,sp,4
 80330bc:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_SEL;
 80330c0:	e0bfff17 	ldw	r2,-4(fp)
 80330c4:	1080070b 	ldhu	r2,28(r2)
 80330c8:	10800214 	ori	r2,r2,8
 80330cc:	1007883a 	mov	r3,r2
 80330d0:	e0bfff17 	ldw	r2,-4(fp)
 80330d4:	10c0070d 	sth	r3,28(r2)
}
 80330d8:	0001883a 	nop
 80330dc:	e037883a 	mov	sp,fp
 80330e0:	df000017 	ldw	fp,0(sp)
 80330e4:	dec00104 	addi	sp,sp,4
 80330e8:	f800283a 	ret

080330ec <sbwait>:
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 80330ec:	defffd04 	addi	sp,sp,-12
 80330f0:	dfc00215 	stw	ra,8(sp)
 80330f4:	df000115 	stw	fp,4(sp)
 80330f8:	df000104 	addi	fp,sp,4
 80330fc:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_WAIT;
 8033100:	e0bfff17 	ldw	r2,-4(fp)
 8033104:	1080070b 	ldhu	r2,28(r2)
 8033108:	10800114 	ori	r2,r2,4
 803310c:	1007883a 	mov	r3,r2
 8033110:	e0bfff17 	ldw	r2,-4(fp)
 8033114:	10c0070d 	sth	r3,28(r2)
   tcp_sleep ((char *)&sb->sb_cc);
 8033118:	e0bfff17 	ldw	r2,-4(fp)
 803311c:	1009883a 	mov	r4,r2
 8033120:	80288c00 	call	80288c0 <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
 8033124:	e0bfff17 	ldw	r2,-4(fp)
 8033128:	10c0070b 	ldhu	r3,28(r2)
 803312c:	00bffec4 	movi	r2,-5
 8033130:	1884703a 	and	r2,r3,r2
 8033134:	1007883a 	mov	r3,r2
 8033138:	e0bfff17 	ldw	r2,-4(fp)
 803313c:	10c0070d 	sth	r3,28(r2)
}
 8033140:	0001883a 	nop
 8033144:	e037883a 	mov	sp,fp
 8033148:	dfc00117 	ldw	ra,4(sp)
 803314c:	df000017 	ldw	fp,0(sp)
 8033150:	dec00204 	addi	sp,sp,8
 8033154:	f800283a 	ret

08033158 <sbwakeup>:
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
 8033158:	defffc04 	addi	sp,sp,-16
 803315c:	dfc00315 	stw	ra,12(sp)
 8033160:	df000215 	stw	fp,8(sp)
 8033164:	df000204 	addi	fp,sp,8
 8033168:	e13fff15 	stw	r4,-4(fp)
 803316c:	e17ffe15 	stw	r5,-8(fp)
   if (sb->sb_flags & SB_SEL) 
 8033170:	e0bffe17 	ldw	r2,-8(fp)
 8033174:	1080070b 	ldhu	r2,28(r2)
 8033178:	10bfffcc 	andi	r2,r2,65535
 803317c:	1080020c 	andi	r2,r2,8
 8033180:	10000a26 	beq	r2,zero,80331ac <sbwakeup+0x54>
   {
      select_wait = 0;
 8033184:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
 8033188:	d120ab04 	addi	r4,gp,-32084
 803318c:	8028a0c0 	call	8028a0c <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
 8033190:	e0bffe17 	ldw	r2,-8(fp)
 8033194:	10c0070b 	ldhu	r3,28(r2)
 8033198:	00bffdc4 	movi	r2,-9
 803319c:	1884703a 	and	r2,r3,r2
 80331a0:	1007883a 	mov	r3,r2
 80331a4:	e0bffe17 	ldw	r2,-8(fp)
 80331a8:	10c0070d 	sth	r3,28(r2)
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
 80331ac:	e0bffe17 	ldw	r2,-8(fp)
 80331b0:	1080070b 	ldhu	r2,28(r2)
 80331b4:	10bfffcc 	andi	r2,r2,65535
 80331b8:	1080010c 	andi	r2,r2,4
 80331bc:	10000326 	beq	r2,zero,80331cc <sbwakeup+0x74>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
 80331c0:	e0bffe17 	ldw	r2,-8(fp)
 80331c4:	1009883a 	mov	r4,r2
 80331c8:	8028a0c0 	call	8028a0c <tcp_wakeup>
   }
#endif   /* SOCK_WAKEALWAYS */
}
 80331cc:	0001883a 	nop
 80331d0:	e037883a 	mov	sp,fp
 80331d4:	dfc00117 	ldw	ra,4(sp)
 80331d8:	df000017 	ldw	fp,0(sp)
 80331dc:	dec00204 	addi	sp,sp,8
 80331e0:	f800283a 	ret

080331e4 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 80331e4:	defffb04 	addi	sp,sp,-20
 80331e8:	dfc00415 	stw	ra,16(sp)
 80331ec:	df000315 	stw	fp,12(sp)
 80331f0:	df000304 	addi	fp,sp,12
 80331f4:	e13fff15 	stw	r4,-4(fp)
 80331f8:	e17ffe15 	stw	r5,-8(fp)
 80331fc:	e1bffd15 	stw	r6,-12(fp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
 8033200:	e0bfff17 	ldw	r2,-4(fp)
 8033204:	10801204 	addi	r2,r2,72
 8033208:	e17ffe17 	ldw	r5,-8(fp)
 803320c:	1009883a 	mov	r4,r2
 8033210:	803326c0 	call	803326c <sbreserve>
 8033214:	10000e26 	beq	r2,zero,8033250 <soreserve+0x6c>
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 8033218:	e0bfff17 	ldw	r2,-4(fp)
 803321c:	10800a04 	addi	r2,r2,40
 8033220:	e17ffd17 	ldw	r5,-12(fp)
 8033224:	1009883a 	mov	r4,r2
 8033228:	803326c0 	call	803326c <sbreserve>
 803322c:	10000226 	beq	r2,zero,8033238 <soreserve+0x54>
      goto bad2;
   return (0);
 8033230:	0005883a 	mov	r2,zero
 8033234:	00000806 	br	8033258 <soreserve+0x74>
      goto bad2;
 8033238:	0001883a 	nop
bad2:
   sbrelease(&so->so_snd);
 803323c:	e0bfff17 	ldw	r2,-4(fp)
 8033240:	10801204 	addi	r2,r2,72
 8033244:	1009883a 	mov	r4,r2
 8033248:	80332bc0 	call	80332bc <sbrelease>
 803324c:	00000106 	br	8033254 <soreserve+0x70>
      goto bad;
 8033250:	0001883a 	nop
bad:
   return (ENOBUFS);
 8033254:	00801a44 	movi	r2,105
}
 8033258:	e037883a 	mov	sp,fp
 803325c:	dfc00117 	ldw	ra,4(sp)
 8033260:	df000017 	ldw	fp,0(sp)
 8033264:	dec00204 	addi	sp,sp,8
 8033268:	f800283a 	ret

0803326c <sbreserve>:
 * RETURNS: 
 */

int
sbreserve(struct sockbuf * sb, u_long cc)
{
 803326c:	defffd04 	addi	sp,sp,-12
 8033270:	df000215 	stw	fp,8(sp)
 8033274:	df000204 	addi	fp,sp,8
 8033278:	e13fff15 	stw	r4,-4(fp)
 803327c:	e17ffe15 	stw	r5,-8(fp)
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
 8033280:	e0bfff17 	ldw	r2,-4(fp)
 8033284:	e0fffe17 	ldw	r3,-8(fp)
 8033288:	10c00115 	stw	r3,4(r2)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
 803328c:	e0bffe17 	ldw	r2,-8(fp)
 8033290:	1085883a 	add	r2,r2,r2
 8033294:	10d00070 	cmpltui	r3,r2,16385
 8033298:	1800011e 	bne	r3,zero,80332a0 <sbreserve+0x34>
 803329c:	00900004 	movi	r2,16384
 80332a0:	e0ffff17 	ldw	r3,-4(fp)
 80332a4:	18800315 	stw	r2,12(r3)
   return (1);
 80332a8:	00800044 	movi	r2,1
}
 80332ac:	e037883a 	mov	sp,fp
 80332b0:	df000017 	ldw	fp,0(sp)
 80332b4:	dec00104 	addi	sp,sp,4
 80332b8:	f800283a 	ret

080332bc <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
 80332bc:	defffd04 	addi	sp,sp,-12
 80332c0:	dfc00215 	stw	ra,8(sp)
 80332c4:	df000115 	stw	fp,4(sp)
 80332c8:	df000104 	addi	fp,sp,4
 80332cc:	e13fff15 	stw	r4,-4(fp)
   sbflush(sb);
 80332d0:	e13fff17 	ldw	r4,-4(fp)
 80332d4:	803383c0 	call	803383c <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
 80332d8:	e0bfff17 	ldw	r2,-4(fp)
 80332dc:	10000315 	stw	zero,12(r2)
 80332e0:	e0bfff17 	ldw	r2,-4(fp)
 80332e4:	10c00317 	ldw	r3,12(r2)
 80332e8:	e0bfff17 	ldw	r2,-4(fp)
 80332ec:	10c00115 	stw	r3,4(r2)
}
 80332f0:	0001883a 	nop
 80332f4:	e037883a 	mov	sp,fp
 80332f8:	dfc00117 	ldw	ra,4(sp)
 80332fc:	df000017 	ldw	fp,0(sp)
 8033300:	dec00204 	addi	sp,sp,8
 8033304:	f800283a 	ret

08033308 <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
 8033308:	defffb04 	addi	sp,sp,-20
 803330c:	dfc00415 	stw	ra,16(sp)
 8033310:	df000315 	stw	fp,12(sp)
 8033314:	df000304 	addi	fp,sp,12
 8033318:	e13ffe15 	stw	r4,-8(fp)
 803331c:	e17ffd15 	stw	r5,-12(fp)
   struct mbuf *  n;

   if (m == 0)
 8033320:	e0bffd17 	ldw	r2,-12(fp)
 8033324:	10001a26 	beq	r2,zero,8033390 <sbappend+0x88>
      return;
   ENTER_CRIT_SECTION(sb);
 8033328:	802c5bc0 	call	802c5bc <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
 803332c:	e0bffe17 	ldw	r2,-8(fp)
 8033330:	10800617 	ldw	r2,24(r2)
 8033334:	e0bfff15 	stw	r2,-4(fp)
 8033338:	e0bfff17 	ldw	r2,-4(fp)
 803333c:	10000e26 	beq	r2,zero,8033378 <sbappend+0x70>
   {
      while (n->m_act)
 8033340:	00000306 	br	8033350 <sbappend+0x48>
         n = n->m_act;
 8033344:	e0bfff17 	ldw	r2,-4(fp)
 8033348:	10800717 	ldw	r2,28(r2)
 803334c:	e0bfff15 	stw	r2,-4(fp)
      while (n->m_act)
 8033350:	e0bfff17 	ldw	r2,-4(fp)
 8033354:	10800717 	ldw	r2,28(r2)
 8033358:	103ffa1e 	bne	r2,zero,8033344 <sbappend+0x3c>
      while (n->m_next)
 803335c:	00000306 	br	803336c <sbappend+0x64>
         n = n->m_next;
 8033360:	e0bfff17 	ldw	r2,-4(fp)
 8033364:	10800617 	ldw	r2,24(r2)
 8033368:	e0bfff15 	stw	r2,-4(fp)
      while (n->m_next)
 803336c:	e0bfff17 	ldw	r2,-4(fp)
 8033370:	10800617 	ldw	r2,24(r2)
 8033374:	103ffa1e 	bne	r2,zero,8033360 <sbappend+0x58>
   }
   sbcompress(sb, m, n);
 8033378:	e1bfff17 	ldw	r6,-4(fp)
 803337c:	e17ffd17 	ldw	r5,-12(fp)
 8033380:	e13ffe17 	ldw	r4,-8(fp)
 8033384:	803365c0 	call	803365c <sbcompress>
   EXIT_CRIT_SECTION(sb);
 8033388:	802c61c0 	call	802c61c <irq_Unmask>
 803338c:	00000106 	br	8033394 <sbappend+0x8c>
      return;
 8033390:	0001883a 	nop
}
 8033394:	e037883a 	mov	sp,fp
 8033398:	dfc00117 	ldw	ra,4(sp)
 803339c:	df000017 	ldw	fp,0(sp)
 80333a0:	dec00204 	addi	sp,sp,8
 80333a4:	f800283a 	ret

080333a8 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
 80333a8:	defffb04 	addi	sp,sp,-20
 80333ac:	dfc00415 	stw	ra,16(sp)
 80333b0:	df000315 	stw	fp,12(sp)
 80333b4:	df000304 	addi	fp,sp,12
 80333b8:	e13ffe15 	stw	r4,-8(fp)
 80333bc:	e17ffd15 	stw	r5,-12(fp)
   struct mbuf *  m;

   if (m0 == 0)
 80333c0:	e0bffd17 	ldw	r2,-12(fp)
 80333c4:	10002826 	beq	r2,zero,8033468 <sbappendrecord+0xc0>
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
 80333c8:	802c5bc0 	call	802c5bc <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 80333cc:	e0bffe17 	ldw	r2,-8(fp)
 80333d0:	10800617 	ldw	r2,24(r2)
 80333d4:	e0bfff15 	stw	r2,-4(fp)
 80333d8:	e0bfff17 	ldw	r2,-4(fp)
 80333dc:	10000726 	beq	r2,zero,80333fc <sbappendrecord+0x54>
      while (m->m_act)
 80333e0:	00000306 	br	80333f0 <sbappendrecord+0x48>
      m = m->m_act;
 80333e4:	e0bfff17 	ldw	r2,-4(fp)
 80333e8:	10800717 	ldw	r2,28(r2)
 80333ec:	e0bfff15 	stw	r2,-4(fp)
      while (m->m_act)
 80333f0:	e0bfff17 	ldw	r2,-4(fp)
 80333f4:	10800717 	ldw	r2,28(r2)
 80333f8:	103ffa1e 	bne	r2,zero,80333e4 <sbappendrecord+0x3c>
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 80333fc:	e0bffe17 	ldw	r2,-8(fp)
 8033400:	10c00017 	ldw	r3,0(r2)
 8033404:	e0bffd17 	ldw	r2,-12(fp)
 8033408:	10800217 	ldw	r2,8(r2)
 803340c:	1887883a 	add	r3,r3,r2
 8033410:	e0bffe17 	ldw	r2,-8(fp)
 8033414:	10c00015 	stw	r3,0(r2)
   if (m)
 8033418:	e0bfff17 	ldw	r2,-4(fp)
 803341c:	10000426 	beq	r2,zero,8033430 <sbappendrecord+0x88>
      m->m_act = m0;
 8033420:	e0bfff17 	ldw	r2,-4(fp)
 8033424:	e0fffd17 	ldw	r3,-12(fp)
 8033428:	10c00715 	stw	r3,28(r2)
 803342c:	00000306 	br	803343c <sbappendrecord+0x94>
   else
      sb->sb_mb = m0;
 8033430:	e0bffe17 	ldw	r2,-8(fp)
 8033434:	e0fffd17 	ldw	r3,-12(fp)
 8033438:	10c00615 	stw	r3,24(r2)
   m = m0->m_next;
 803343c:	e0bffd17 	ldw	r2,-12(fp)
 8033440:	10800617 	ldw	r2,24(r2)
 8033444:	e0bfff15 	stw	r2,-4(fp)
   m0->m_next = 0;
 8033448:	e0bffd17 	ldw	r2,-12(fp)
 803344c:	10000615 	stw	zero,24(r2)
   sbcompress(sb, m, m0);
 8033450:	e1bffd17 	ldw	r6,-12(fp)
 8033454:	e17fff17 	ldw	r5,-4(fp)
 8033458:	e13ffe17 	ldw	r4,-8(fp)
 803345c:	803365c0 	call	803365c <sbcompress>
   EXIT_CRIT_SECTION(sb);
 8033460:	802c61c0 	call	802c61c <irq_Unmask>
 8033464:	00000106 	br	803346c <sbappendrecord+0xc4>
      return;
 8033468:	0001883a 	nop
}
 803346c:	e037883a 	mov	sp,fp
 8033470:	dfc00117 	ldw	ra,4(sp)
 8033474:	df000017 	ldw	fp,0(sp)
 8033478:	dec00204 	addi	sp,sp,8
 803347c:	f800283a 	ret

08033480 <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
 8033480:	defff804 	addi	sp,sp,-32
 8033484:	dfc00715 	stw	ra,28(sp)
 8033488:	df000615 	stw	fp,24(sp)
 803348c:	df000604 	addi	fp,sp,24
 8033490:	e13ffc15 	stw	r4,-16(fp)
 8033494:	e17ffb15 	stw	r5,-20(fp)
 8033498:	e1bffa15 	stw	r6,-24(fp)
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);
 803349c:	00800404 	movi	r2,16
 80334a0:	e0bffd15 	stw	r2,-12(fp)

   ENTER_CRIT_SECTION(sb);
 80334a4:	802c5bc0 	call	802c5bc <irq_Mask>
   for (m = m0; m; m = m->m_next)
 80334a8:	e0bffa17 	ldw	r2,-24(fp)
 80334ac:	e0bfff15 	stw	r2,-4(fp)
 80334b0:	00000806 	br	80334d4 <sbappendaddr+0x54>
      space += m->m_len;
 80334b4:	e0bfff17 	ldw	r2,-4(fp)
 80334b8:	10c00217 	ldw	r3,8(r2)
 80334bc:	e0bffd17 	ldw	r2,-12(fp)
 80334c0:	1885883a 	add	r2,r3,r2
 80334c4:	e0bffd15 	stw	r2,-12(fp)
   for (m = m0; m; m = m->m_next)
 80334c8:	e0bfff17 	ldw	r2,-4(fp)
 80334cc:	10800617 	ldw	r2,24(r2)
 80334d0:	e0bfff15 	stw	r2,-4(fp)
 80334d4:	e0bfff17 	ldw	r2,-4(fp)
 80334d8:	103ff61e 	bne	r2,zero,80334b4 <sbappendaddr+0x34>
   if (space > (int)sbspace(sb))
 80334dc:	e0bffc17 	ldw	r2,-16(fp)
 80334e0:	10800117 	ldw	r2,4(r2)
 80334e4:	1007883a 	mov	r3,r2
 80334e8:	e0bffc17 	ldw	r2,-16(fp)
 80334ec:	10800017 	ldw	r2,0(r2)
 80334f0:	1885c83a 	sub	r2,r3,r2
 80334f4:	10000716 	blt	r2,zero,8033514 <sbappendaddr+0x94>
 80334f8:	e0bffc17 	ldw	r2,-16(fp)
 80334fc:	10c00117 	ldw	r3,4(r2)
 8033500:	e0bffc17 	ldw	r2,-16(fp)
 8033504:	10800017 	ldw	r2,0(r2)
 8033508:	1885c83a 	sub	r2,r3,r2
 803350c:	1007883a 	mov	r3,r2
 8033510:	00000106 	br	8033518 <sbappendaddr+0x98>
 8033514:	0007883a 	mov	r3,zero
 8033518:	e0bffd17 	ldw	r2,-12(fp)
 803351c:	1880030e 	bge	r3,r2,803352c <sbappendaddr+0xac>
   {
      EXIT_CRIT_SECTION(sb);
 8033520:	802c61c0 	call	802c61c <irq_Unmask>
      return (0);
 8033524:	0005883a 	mov	r2,zero
 8033528:	00004706 	br	8033648 <sbappendaddr+0x1c8>
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
 803352c:	01400404 	movi	r5,16
 8033530:	01000244 	movi	r4,9
 8033534:	802d1a80 	call	802d1a8 <m_getnbuf>
 8033538:	e0bfff15 	stw	r2,-4(fp)
 803353c:	e0bfff17 	ldw	r2,-4(fp)
 8033540:	1000031e 	bne	r2,zero,8033550 <sbappendaddr+0xd0>
   {
      EXIT_CRIT_SECTION(sb);
 8033544:	802c61c0 	call	802c61c <irq_Unmask>
      return 0;
 8033548:	0005883a 	mov	r2,zero
 803354c:	00003e06 	br	8033648 <sbappendaddr+0x1c8>
   }
   *mtod(m, struct sockaddr *) = *asa;
 8033550:	e0bfff17 	ldw	r2,-4(fp)
 8033554:	10800317 	ldw	r2,12(r2)
 8033558:	e0fffb17 	ldw	r3,-20(fp)
 803355c:	1900000b 	ldhu	r4,0(r3)
 8033560:	1100000d 	sth	r4,0(r2)
 8033564:	1900008b 	ldhu	r4,2(r3)
 8033568:	1100008d 	sth	r4,2(r2)
 803356c:	1900010b 	ldhu	r4,4(r3)
 8033570:	1100010d 	sth	r4,4(r2)
 8033574:	1900018b 	ldhu	r4,6(r3)
 8033578:	1100018d 	sth	r4,6(r2)
 803357c:	1900020b 	ldhu	r4,8(r3)
 8033580:	1100020d 	sth	r4,8(r2)
 8033584:	1900028b 	ldhu	r4,10(r3)
 8033588:	1100028d 	sth	r4,10(r2)
 803358c:	1900030b 	ldhu	r4,12(r3)
 8033590:	1100030d 	sth	r4,12(r2)
 8033594:	18c0038b 	ldhu	r3,14(r3)
 8033598:	10c0038d 	sth	r3,14(r2)
   m->m_len = sizeof (*asa);
 803359c:	e0bfff17 	ldw	r2,-4(fp)
 80335a0:	00c00404 	movi	r3,16
 80335a4:	10c00215 	stw	r3,8(r2)
   sballoc (sb, m);
 80335a8:	e0bffc17 	ldw	r2,-16(fp)
 80335ac:	10c00017 	ldw	r3,0(r2)
 80335b0:	e0bfff17 	ldw	r2,-4(fp)
 80335b4:	10800217 	ldw	r2,8(r2)
 80335b8:	1887883a 	add	r3,r3,r2
 80335bc:	e0bffc17 	ldw	r2,-16(fp)
 80335c0:	10c00015 	stw	r3,0(r2)
   if ((n = sb->sb_mb) != NULL) 
 80335c4:	e0bffc17 	ldw	r2,-16(fp)
 80335c8:	10800617 	ldw	r2,24(r2)
 80335cc:	e0bffe15 	stw	r2,-8(fp)
 80335d0:	e0bffe17 	ldw	r2,-8(fp)
 80335d4:	10000b26 	beq	r2,zero,8033604 <sbappendaddr+0x184>
   {
      while (n->m_act)
 80335d8:	00000306 	br	80335e8 <sbappendaddr+0x168>
         n = n->m_act;
 80335dc:	e0bffe17 	ldw	r2,-8(fp)
 80335e0:	10800717 	ldw	r2,28(r2)
 80335e4:	e0bffe15 	stw	r2,-8(fp)
      while (n->m_act)
 80335e8:	e0bffe17 	ldw	r2,-8(fp)
 80335ec:	10800717 	ldw	r2,28(r2)
 80335f0:	103ffa1e 	bne	r2,zero,80335dc <sbappendaddr+0x15c>
      n->m_act = m;
 80335f4:	e0bffe17 	ldw	r2,-8(fp)
 80335f8:	e0ffff17 	ldw	r3,-4(fp)
 80335fc:	10c00715 	stw	r3,28(r2)
 8033600:	00000306 	br	8033610 <sbappendaddr+0x190>
   } else
      sb->sb_mb = m;
 8033604:	e0bffc17 	ldw	r2,-16(fp)
 8033608:	e0ffff17 	ldw	r3,-4(fp)
 803360c:	10c00615 	stw	r3,24(r2)
   if (m->m_next)
 8033610:	e0bfff17 	ldw	r2,-4(fp)
 8033614:	10800617 	ldw	r2,24(r2)
 8033618:	10000326 	beq	r2,zero,8033628 <sbappendaddr+0x1a8>
      m = m->m_next;
 803361c:	e0bfff17 	ldw	r2,-4(fp)
 8033620:	10800617 	ldw	r2,24(r2)
 8033624:	e0bfff15 	stw	r2,-4(fp)
   if (m0)
 8033628:	e0bffa17 	ldw	r2,-24(fp)
 803362c:	10000426 	beq	r2,zero,8033640 <sbappendaddr+0x1c0>
      sbcompress(sb, m0, m);
 8033630:	e1bfff17 	ldw	r6,-4(fp)
 8033634:	e17ffa17 	ldw	r5,-24(fp)
 8033638:	e13ffc17 	ldw	r4,-16(fp)
 803363c:	803365c0 	call	803365c <sbcompress>

   EXIT_CRIT_SECTION(sb);
 8033640:	802c61c0 	call	802c61c <irq_Unmask>
   return (1);
 8033644:	00800044 	movi	r2,1
}
 8033648:	e037883a 	mov	sp,fp
 803364c:	dfc00117 	ldw	ra,4(sp)
 8033650:	df000017 	ldw	fp,0(sp)
 8033654:	dec00204 	addi	sp,sp,8
 8033658:	f800283a 	ret

0803365c <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
 803365c:	defffb04 	addi	sp,sp,-20
 8033660:	dfc00415 	stw	ra,16(sp)
 8033664:	df000315 	stw	fp,12(sp)
 8033668:	df000304 	addi	fp,sp,12
 803366c:	e13fff15 	stw	r4,-4(fp)
 8033670:	e17ffe15 	stw	r5,-8(fp)
 8033674:	e1bffd15 	stw	r6,-12(fp)

   while (m) 
 8033678:	00006706 	br	8033818 <sbcompress+0x1bc>
   {
      if (m->m_len == 0) 
 803367c:	e0bffe17 	ldw	r2,-8(fp)
 8033680:	10800217 	ldw	r2,8(r2)
 8033684:	1000041e 	bne	r2,zero,8033698 <sbcompress+0x3c>
      {
         m = m_free(m);
 8033688:	e13ffe17 	ldw	r4,-8(fp)
 803368c:	802d3300 	call	802d330 <m_free>
 8033690:	e0bffe15 	stw	r2,-8(fp)
         continue;
 8033694:	00006006 	br	8033818 <sbcompress+0x1bc>
      }
      if (m->m_type != MT_RXDATA && 
 8033698:	e0bffe17 	ldw	r2,-8(fp)
 803369c:	10800817 	ldw	r2,32(r2)
 80336a0:	10800060 	cmpeqi	r2,r2,1
 80336a4:	1000111e 	bne	r2,zero,80336ec <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
 80336a8:	e0bffe17 	ldw	r2,-8(fp)
 80336ac:	10800817 	ldw	r2,32(r2)
      if (m->m_type != MT_RXDATA && 
 80336b0:	108000a0 	cmpeqi	r2,r2,2
 80336b4:	10000d1e 	bne	r2,zero,80336ec <sbcompress+0x90>
          m->m_type != MT_SONAME) 
 80336b8:	e0bffe17 	ldw	r2,-8(fp)
 80336bc:	10800817 	ldw	r2,32(r2)
          m->m_type != MT_TXDATA && 
 80336c0:	10800260 	cmpeqi	r2,r2,9
 80336c4:	1000091e 	bne	r2,zero,80336ec <sbcompress+0x90>
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
 80336c8:	e0bffe17 	ldw	r2,-8(fp)
 80336cc:	10800817 	ldw	r2,32(r2)
 80336d0:	100b883a 	mov	r5,r2
 80336d4:	01020174 	movhi	r4,2053
 80336d8:	210c1e04 	addi	r4,r4,12408
 80336dc:	800325c0 	call	800325c <printf>
         panic ("sbcomp:bad");
 80336e0:	01020174 	movhi	r4,2053
 80336e4:	210c2304 	addi	r4,r4,12428
 80336e8:	8027fe00 	call	8027fe0 <panic>
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 80336ec:	e0bffd17 	ldw	r2,-12(fp)
 80336f0:	10003226 	beq	r2,zero,80337bc <sbcompress+0x160>
 80336f4:	e0bfff17 	ldw	r2,-4(fp)
 80336f8:	1080070b 	ldhu	r2,28(r2)
 80336fc:	10bfffcc 	andi	r2,r2,65535
 8033700:	1080200c 	andi	r2,r2,128
 8033704:	10002d26 	beq	r2,zero,80337bc <sbcompress+0x160>
          ((n->m_len + m->m_len) <
 8033708:	e0bffd17 	ldw	r2,-12(fp)
 803370c:	10c00217 	ldw	r3,8(r2)
 8033710:	e0bffe17 	ldw	r2,-8(fp)
 8033714:	10800217 	ldw	r2,8(r2)
 8033718:	1887883a 	add	r3,r3,r2
          n->m_memsz - (n->m_data - n->m_base) ) ) 
 803371c:	e0bffd17 	ldw	r2,-12(fp)
 8033720:	10800517 	ldw	r2,20(r2)
 8033724:	e13ffd17 	ldw	r4,-12(fp)
 8033728:	21400317 	ldw	r5,12(r4)
 803372c:	e13ffd17 	ldw	r4,-12(fp)
 8033730:	21000417 	ldw	r4,16(r4)
 8033734:	2909c83a 	sub	r4,r5,r4
 8033738:	1105c83a 	sub	r2,r2,r4
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 803373c:	18801f2e 	bgeu	r3,r2,80337bc <sbcompress+0x160>
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
 8033740:	e0bffd17 	ldw	r2,-12(fp)
 8033744:	10c00317 	ldw	r3,12(r2)
 8033748:	e0bffd17 	ldw	r2,-12(fp)
 803374c:	10800217 	ldw	r2,8(r2)
 8033750:	1887883a 	add	r3,r3,r2
 8033754:	e0bffe17 	ldw	r2,-8(fp)
 8033758:	11000317 	ldw	r4,12(r2)
 803375c:	e0bffe17 	ldw	r2,-8(fp)
 8033760:	10800217 	ldw	r2,8(r2)
 8033764:	100d883a 	mov	r6,r2
 8033768:	200b883a 	mov	r5,r4
 803376c:	1809883a 	mov	r4,r3
 8033770:	8002ea40 	call	8002ea4 <memcpy>
         sballoc(sb, m);
 8033774:	e0bfff17 	ldw	r2,-4(fp)
 8033778:	10c00017 	ldw	r3,0(r2)
 803377c:	e0bffe17 	ldw	r2,-8(fp)
 8033780:	10800217 	ldw	r2,8(r2)
 8033784:	1887883a 	add	r3,r3,r2
 8033788:	e0bfff17 	ldw	r2,-4(fp)
 803378c:	10c00015 	stw	r3,0(r2)
         n->m_len += m->m_len;
 8033790:	e0bffd17 	ldw	r2,-12(fp)
 8033794:	10c00217 	ldw	r3,8(r2)
 8033798:	e0bffe17 	ldw	r2,-8(fp)
 803379c:	10800217 	ldw	r2,8(r2)
 80337a0:	1887883a 	add	r3,r3,r2
 80337a4:	e0bffd17 	ldw	r2,-12(fp)
 80337a8:	10c00215 	stw	r3,8(r2)
         m = m_free(m);
 80337ac:	e13ffe17 	ldw	r4,-8(fp)
 80337b0:	802d3300 	call	802d330 <m_free>
 80337b4:	e0bffe15 	stw	r2,-8(fp)
         continue;
 80337b8:	00001706 	br	8033818 <sbcompress+0x1bc>
      }
      sballoc(sb, m);
 80337bc:	e0bfff17 	ldw	r2,-4(fp)
 80337c0:	10c00017 	ldw	r3,0(r2)
 80337c4:	e0bffe17 	ldw	r2,-8(fp)
 80337c8:	10800217 	ldw	r2,8(r2)
 80337cc:	1887883a 	add	r3,r3,r2
 80337d0:	e0bfff17 	ldw	r2,-4(fp)
 80337d4:	10c00015 	stw	r3,0(r2)
      if (n)
 80337d8:	e0bffd17 	ldw	r2,-12(fp)
 80337dc:	10000426 	beq	r2,zero,80337f0 <sbcompress+0x194>
         n->m_next = m;
 80337e0:	e0bffd17 	ldw	r2,-12(fp)
 80337e4:	e0fffe17 	ldw	r3,-8(fp)
 80337e8:	10c00615 	stw	r3,24(r2)
 80337ec:	00000306 	br	80337fc <sbcompress+0x1a0>
      else
         sb->sb_mb = m;
 80337f0:	e0bfff17 	ldw	r2,-4(fp)
 80337f4:	e0fffe17 	ldw	r3,-8(fp)
 80337f8:	10c00615 	stw	r3,24(r2)
      n = m;
 80337fc:	e0bffe17 	ldw	r2,-8(fp)
 8033800:	e0bffd15 	stw	r2,-12(fp)
      m = m->m_next;
 8033804:	e0bffe17 	ldw	r2,-8(fp)
 8033808:	10800617 	ldw	r2,24(r2)
 803380c:	e0bffe15 	stw	r2,-8(fp)
      n->m_next = 0;
 8033810:	e0bffd17 	ldw	r2,-12(fp)
 8033814:	10000615 	stw	zero,24(r2)
   while (m) 
 8033818:	e0bffe17 	ldw	r2,-8(fp)
 803381c:	103f971e 	bne	r2,zero,803367c <sbcompress+0x20>
   }
}
 8033820:	0001883a 	nop
 8033824:	0001883a 	nop
 8033828:	e037883a 	mov	sp,fp
 803382c:	dfc00117 	ldw	ra,4(sp)
 8033830:	df000017 	ldw	fp,0(sp)
 8033834:	dec00204 	addi	sp,sp,8
 8033838:	f800283a 	ret

0803383c <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
 803383c:	defffd04 	addi	sp,sp,-12
 8033840:	dfc00215 	stw	ra,8(sp)
 8033844:	df000115 	stw	fp,4(sp)
 8033848:	df000104 	addi	fp,sp,4
 803384c:	e13fff15 	stw	r4,-4(fp)
   ENTER_CRIT_SECTION(sb);
 8033850:	802c5bc0 	call	802c5bc <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
 8033854:	e0bfff17 	ldw	r2,-4(fp)
 8033858:	1080070b 	ldhu	r2,28(r2)
 803385c:	10bfffcc 	andi	r2,r2,65535
 8033860:	1080004c 	andi	r2,r2,1
 8033864:	10000926 	beq	r2,zero,803388c <sbflush+0x50>
      panic("sbflush");
 8033868:	01020174 	movhi	r4,2053
 803386c:	210c2604 	addi	r4,r4,12440
 8033870:	8027fe00 	call	8027fe0 <panic>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 8033874:	00000506 	br	803388c <sbflush+0x50>
      sbdrop (sb, (int)sb->sb_cc);
 8033878:	e0bfff17 	ldw	r2,-4(fp)
 803387c:	10800017 	ldw	r2,0(r2)
 8033880:	100b883a 	mov	r5,r2
 8033884:	e13fff17 	ldw	r4,-4(fp)
 8033888:	80338c00 	call	80338c0 <sbdrop>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 803388c:	e0bfff17 	ldw	r2,-4(fp)
 8033890:	10800217 	ldw	r2,8(r2)
 8033894:	103ff81e 	bne	r2,zero,8033878 <sbflush+0x3c>
 8033898:	e0bfff17 	ldw	r2,-4(fp)
 803389c:	10800017 	ldw	r2,0(r2)
 80338a0:	103ff51e 	bne	r2,zero,8033878 <sbflush+0x3c>
   EXIT_CRIT_SECTION(sb);
 80338a4:	802c61c0 	call	802c61c <irq_Unmask>
}
 80338a8:	0001883a 	nop
 80338ac:	e037883a 	mov	sp,fp
 80338b0:	dfc00117 	ldw	ra,4(sp)
 80338b4:	df000017 	ldw	fp,0(sp)
 80338b8:	dec00204 	addi	sp,sp,8
 80338bc:	f800283a 	ret

080338c0 <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
 80338c0:	defff904 	addi	sp,sp,-28
 80338c4:	dfc00615 	stw	ra,24(sp)
 80338c8:	df000515 	stw	fp,20(sp)
 80338cc:	df000504 	addi	fp,sp,20
 80338d0:	e13ffc15 	stw	r4,-16(fp)
 80338d4:	e17ffb15 	stw	r5,-20(fp)
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
 80338d8:	802c5bc0 	call	802c5bc <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 80338dc:	e0bffc17 	ldw	r2,-16(fp)
 80338e0:	10800617 	ldw	r2,24(r2)
 80338e4:	e0bfff15 	stw	r2,-4(fp)
 80338e8:	e0bfff17 	ldw	r2,-4(fp)
 80338ec:	10000426 	beq	r2,zero,8033900 <sbdrop+0x40>
      next = m->m_act;
 80338f0:	e0bfff17 	ldw	r2,-4(fp)
 80338f4:	10800717 	ldw	r2,28(r2)
 80338f8:	e0bffe15 	stw	r2,-8(fp)
 80338fc:	00003706 	br	80339dc <sbdrop+0x11c>
   else
      next = NULL;
 8033900:	e03ffe15 	stw	zero,-8(fp)
   while (len > 0) 
 8033904:	00003506 	br	80339dc <sbdrop+0x11c>
   {
      if (m == 0) 
 8033908:	e0bfff17 	ldw	r2,-4(fp)
 803390c:	10000b1e 	bne	r2,zero,803393c <sbdrop+0x7c>
      {
         if (next == 0)
 8033910:	e0bffe17 	ldw	r2,-8(fp)
 8033914:	1000031e 	bne	r2,zero,8033924 <sbdrop+0x64>
            panic("sbdrop");
 8033918:	01020174 	movhi	r4,2053
 803391c:	210c2804 	addi	r4,r4,12448
 8033920:	8027fe00 	call	8027fe0 <panic>
         m = next;
 8033924:	e0bffe17 	ldw	r2,-8(fp)
 8033928:	e0bfff15 	stw	r2,-4(fp)
         next = m->m_act;
 803392c:	e0bfff17 	ldw	r2,-4(fp)
 8033930:	10800717 	ldw	r2,28(r2)
 8033934:	e0bffe15 	stw	r2,-8(fp)
         continue;
 8033938:	00002806 	br	80339dc <sbdrop+0x11c>
      }
      if (m->m_len > (unsigned)len) 
 803393c:	e0bfff17 	ldw	r2,-4(fp)
 8033940:	10800217 	ldw	r2,8(r2)
 8033944:	e0fffb17 	ldw	r3,-20(fp)
 8033948:	1880132e 	bgeu	r3,r2,8033998 <sbdrop+0xd8>
      {
         m->m_len -= len;
 803394c:	e0bfff17 	ldw	r2,-4(fp)
 8033950:	10c00217 	ldw	r3,8(r2)
 8033954:	e0bffb17 	ldw	r2,-20(fp)
 8033958:	1887c83a 	sub	r3,r3,r2
 803395c:	e0bfff17 	ldw	r2,-4(fp)
 8033960:	10c00215 	stw	r3,8(r2)
         m->m_data += len;
 8033964:	e0bfff17 	ldw	r2,-4(fp)
 8033968:	10c00317 	ldw	r3,12(r2)
 803396c:	e0bffb17 	ldw	r2,-20(fp)
 8033970:	1887883a 	add	r3,r3,r2
 8033974:	e0bfff17 	ldw	r2,-4(fp)
 8033978:	10c00315 	stw	r3,12(r2)
         sb->sb_cc -= len;
 803397c:	e0bffc17 	ldw	r2,-16(fp)
 8033980:	10c00017 	ldw	r3,0(r2)
 8033984:	e0bffb17 	ldw	r2,-20(fp)
 8033988:	1887c83a 	sub	r3,r3,r2
 803398c:	e0bffc17 	ldw	r2,-16(fp)
 8033990:	10c00015 	stw	r3,0(r2)
         break;
 8033994:	00001306 	br	80339e4 <sbdrop+0x124>
      }
      len -= m->m_len;
 8033998:	e0fffb17 	ldw	r3,-20(fp)
 803399c:	e0bfff17 	ldw	r2,-4(fp)
 80339a0:	10800217 	ldw	r2,8(r2)
 80339a4:	1885c83a 	sub	r2,r3,r2
 80339a8:	e0bffb15 	stw	r2,-20(fp)
      sbfree (sb, m);
 80339ac:	e0bffc17 	ldw	r2,-16(fp)
 80339b0:	10c00017 	ldw	r3,0(r2)
 80339b4:	e0bfff17 	ldw	r2,-4(fp)
 80339b8:	10800217 	ldw	r2,8(r2)
 80339bc:	1887c83a 	sub	r3,r3,r2
 80339c0:	e0bffc17 	ldw	r2,-16(fp)
 80339c4:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 80339c8:	e13fff17 	ldw	r4,-4(fp)
 80339cc:	802d3300 	call	802d330 <m_free>
 80339d0:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
 80339d4:	e0bffd17 	ldw	r2,-12(fp)
 80339d8:	e0bfff15 	stw	r2,-4(fp)
   while (len > 0) 
 80339dc:	e0bffb17 	ldw	r2,-20(fp)
 80339e0:	00bfc916 	blt	zero,r2,8033908 <sbdrop+0x48>
   }
   while (m && m->m_len == 0) 
 80339e4:	00000c06 	br	8033a18 <sbdrop+0x158>
   {
      sbfree(sb, m);
 80339e8:	e0bffc17 	ldw	r2,-16(fp)
 80339ec:	10c00017 	ldw	r3,0(r2)
 80339f0:	e0bfff17 	ldw	r2,-4(fp)
 80339f4:	10800217 	ldw	r2,8(r2)
 80339f8:	1887c83a 	sub	r3,r3,r2
 80339fc:	e0bffc17 	ldw	r2,-16(fp)
 8033a00:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 8033a04:	e13fff17 	ldw	r4,-4(fp)
 8033a08:	802d3300 	call	802d330 <m_free>
 8033a0c:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
 8033a10:	e0bffd17 	ldw	r2,-12(fp)
 8033a14:	e0bfff15 	stw	r2,-4(fp)
   while (m && m->m_len == 0) 
 8033a18:	e0bfff17 	ldw	r2,-4(fp)
 8033a1c:	10000326 	beq	r2,zero,8033a2c <sbdrop+0x16c>
 8033a20:	e0bfff17 	ldw	r2,-4(fp)
 8033a24:	10800217 	ldw	r2,8(r2)
 8033a28:	103fef26 	beq	r2,zero,80339e8 <sbdrop+0x128>
   }
   if (m) 
 8033a2c:	e0bfff17 	ldw	r2,-4(fp)
 8033a30:	10000726 	beq	r2,zero,8033a50 <sbdrop+0x190>
   {
      sb->sb_mb = m;
 8033a34:	e0bffc17 	ldw	r2,-16(fp)
 8033a38:	e0ffff17 	ldw	r3,-4(fp)
 8033a3c:	10c00615 	stw	r3,24(r2)
      m->m_act = next;
 8033a40:	e0bfff17 	ldw	r2,-4(fp)
 8033a44:	e0fffe17 	ldw	r3,-8(fp)
 8033a48:	10c00715 	stw	r3,28(r2)
 8033a4c:	00000306 	br	8033a5c <sbdrop+0x19c>
   } else
      sb->sb_mb = next;
 8033a50:	e0bffc17 	ldw	r2,-16(fp)
 8033a54:	e0fffe17 	ldw	r3,-8(fp)
 8033a58:	10c00615 	stw	r3,24(r2)
   EXIT_CRIT_SECTION(sb);
 8033a5c:	802c61c0 	call	802c61c <irq_Unmask>
}
 8033a60:	0001883a 	nop
 8033a64:	e037883a 	mov	sp,fp
 8033a68:	dfc00117 	ldw	ra,4(sp)
 8033a6c:	df000017 	ldw	fp,0(sp)
 8033a70:	dec00204 	addi	sp,sp,8
 8033a74:	f800283a 	ret

08033a78 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
 8033a78:	defff904 	addi	sp,sp,-28
 8033a7c:	dfc00615 	stw	ra,24(sp)
 8033a80:	df000515 	stw	fp,20(sp)
 8033a84:	df000504 	addi	fp,sp,20
 8033a88:	e13ffc15 	stw	r4,-16(fp)
 8033a8c:	e17ffb15 	stw	r5,-20(fp)
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
 8033a90:	802c5bc0 	call	802c5bc <irq_Mask>
   len = mbuf_len(m);
 8033a94:	e13ffb17 	ldw	r4,-20(fp)
 8033a98:	802d9140 	call	802d914 <mbuf_len>
 8033a9c:	e0bffd15 	stw	r2,-12(fp)
   if (len > 0)
 8033aa0:	e0bffd17 	ldw	r2,-12(fp)
 8033aa4:	0080070e 	bge	zero,r2,8033ac4 <sbdropend+0x4c>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
 8033aa8:	e0bffc17 	ldw	r2,-16(fp)
 8033aac:	10c00617 	ldw	r3,24(r2)
 8033ab0:	e0bffd17 	ldw	r2,-12(fp)
 8033ab4:	0085c83a 	sub	r2,zero,r2
 8033ab8:	100b883a 	mov	r5,r2
 8033abc:	1809883a 	mov	r4,r3
 8033ac0:	802d7540 	call	802d754 <m_adj>
   nmb = sb->sb_mb;
 8033ac4:	e0bffc17 	ldw	r2,-16(fp)
 8033ac8:	10800617 	ldw	r2,24(r2)
 8033acc:	e0bfff15 	stw	r2,-4(fp)
   pmb = NULL;
 8033ad0:	e03ffe15 	stw	zero,-8(fp)
   if (sb->sb_mb->m_len == 0)
 8033ad4:	e0bffc17 	ldw	r2,-16(fp)
 8033ad8:	10800617 	ldw	r2,24(r2)
 8033adc:	10800217 	ldw	r2,8(r2)
 8033ae0:	1000081e 	bne	r2,zero,8033b04 <sbdropend+0x8c>
      sb->sb_mb = NULL;
 8033ae4:	e0bffc17 	ldw	r2,-16(fp)
 8033ae8:	10000615 	stw	zero,24(r2)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 8033aec:	00000506 	br	8033b04 <sbdropend+0x8c>
   {
      pmb = nmb;  /* Remember previous */
 8033af0:	e0bfff17 	ldw	r2,-4(fp)
 8033af4:	e0bffe15 	stw	r2,-8(fp)
      nmb = nmb->m_next;    
 8033af8:	e0bfff17 	ldw	r2,-4(fp)
 8033afc:	10800617 	ldw	r2,24(r2)
 8033b00:	e0bfff15 	stw	r2,-4(fp)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 8033b04:	e0bfff17 	ldw	r2,-4(fp)
 8033b08:	10000326 	beq	r2,zero,8033b18 <sbdropend+0xa0>
 8033b0c:	e0bfff17 	ldw	r2,-4(fp)
 8033b10:	10800217 	ldw	r2,8(r2)
 8033b14:	103ff61e 	bne	r2,zero,8033af0 <sbdropend+0x78>
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
 8033b18:	e0bfff17 	ldw	r2,-4(fp)
 8033b1c:	10000926 	beq	r2,zero,8033b44 <sbdropend+0xcc>
 8033b20:	e0bfff17 	ldw	r2,-4(fp)
 8033b24:	10800217 	ldw	r2,8(r2)
 8033b28:	1000061e 	bne	r2,zero,8033b44 <sbdropend+0xcc>
   {                             /* are zeroes */ 
      if (pmb != NULL)
 8033b2c:	e0bffe17 	ldw	r2,-8(fp)
 8033b30:	10000226 	beq	r2,zero,8033b3c <sbdropend+0xc4>
         pmb->m_next = NULL;
 8033b34:	e0bffe17 	ldw	r2,-8(fp)
 8033b38:	10000615 	stw	zero,24(r2)
      m_freem(nmb);            
 8033b3c:	e13fff17 	ldw	r4,-4(fp)
 8033b40:	802d4340 	call	802d434 <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
 8033b44:	e0bffc17 	ldw	r2,-16(fp)
 8033b48:	10c00017 	ldw	r3,0(r2)
 8033b4c:	e0bffd17 	ldw	r2,-12(fp)
 8033b50:	1887c83a 	sub	r3,r3,r2
 8033b54:	e0bffc17 	ldw	r2,-16(fp)
 8033b58:	10c00015 	stw	r3,0(r2)
   EXIT_CRIT_SECTION(sb);
 8033b5c:	802c61c0 	call	802c61c <irq_Unmask>
}
 8033b60:	0001883a 	nop
 8033b64:	e037883a 	mov	sp,fp
 8033b68:	dfc00117 	ldw	ra,4(sp)
 8033b6c:	df000017 	ldw	fp,0(sp)
 8033b70:	dec00204 	addi	sp,sp,8
 8033b74:	f800283a 	ret

08033b78 <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
 8033b78:	defffb04 	addi	sp,sp,-20
 8033b7c:	dfc00415 	stw	ra,16(sp)
 8033b80:	df000315 	stw	fp,12(sp)
 8033b84:	df000304 	addi	fp,sp,12
 8033b88:	e13ffd15 	stw	r4,-12(fp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
 8033b8c:	802c5bc0 	call	802c5bc <irq_Mask>
   m = sb->sb_mb;
 8033b90:	e0bffd17 	ldw	r2,-12(fp)
 8033b94:	10800617 	ldw	r2,24(r2)
 8033b98:	e0bfff15 	stw	r2,-4(fp)
   if (m)
 8033b9c:	e0bfff17 	ldw	r2,-4(fp)
 8033ba0:	10001226 	beq	r2,zero,8033bec <sbdroprecord+0x74>
   {  sb->sb_mb = m->m_act;
 8033ba4:	e0bfff17 	ldw	r2,-4(fp)
 8033ba8:	10c00717 	ldw	r3,28(r2)
 8033bac:	e0bffd17 	ldw	r2,-12(fp)
 8033bb0:	10c00615 	stw	r3,24(r2)
      do 
      {  sbfree(sb, m);
 8033bb4:	e0bffd17 	ldw	r2,-12(fp)
 8033bb8:	10c00017 	ldw	r3,0(r2)
 8033bbc:	e0bfff17 	ldw	r2,-4(fp)
 8033bc0:	10800217 	ldw	r2,8(r2)
 8033bc4:	1887c83a 	sub	r3,r3,r2
 8033bc8:	e0bffd17 	ldw	r2,-12(fp)
 8033bcc:	10c00015 	stw	r3,0(r2)
         MFREE(m, mn);
 8033bd0:	e13fff17 	ldw	r4,-4(fp)
 8033bd4:	802d3300 	call	802d330 <m_free>
 8033bd8:	e0bffe15 	stw	r2,-8(fp)
      } while ((m = mn) != NULL);
 8033bdc:	e0bffe17 	ldw	r2,-8(fp)
 8033be0:	e0bfff15 	stw	r2,-4(fp)
 8033be4:	e0bfff17 	ldw	r2,-4(fp)
 8033be8:	103ff21e 	bne	r2,zero,8033bb4 <sbdroprecord+0x3c>
         }
   EXIT_CRIT_SECTION(sb);
 8033bec:	802c61c0 	call	802c61c <irq_Unmask>
}
 8033bf0:	0001883a 	nop
 8033bf4:	e037883a 	mov	sp,fp
 8033bf8:	dfc00117 	ldw	ra,4(sp)
 8033bfc:	df000017 	ldw	fp,0(sp)
 8033c00:	dec00204 	addi	sp,sp,8
 8033c04:	f800283a 	ret

08033c08 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 8033c08:	defe7204 	addi	sp,sp,-1592
 8033c0c:	dfc18d15 	stw	ra,1588(sp)
 8033c10:	df018c15 	stw	fp,1584(sp)
 8033c14:	df018c04 	addi	fp,sp,1584
 8033c18:	e13e7715 	stw	r4,-1572(fp)
 8033c1c:	e17e7615 	stw	r5,-1576(fp)
 8033c20:	e1be7515 	stw	r6,-1580(fp)
 8033c24:	e1fe7415 	stw	r7,-1584(fp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;
 8033c28:	e03fff15 	stw	zero,-4(fp)

   MEMSET(&obits, 0, sizeof(obits));
 8033c2c:	e0bf3b04 	addi	r2,fp,-788
 8033c30:	0180c304 	movi	r6,780
 8033c34:	000b883a 	mov	r5,zero
 8033c38:	1009883a 	mov	r4,r2
 8033c3c:	8002fa40 	call	8002fa4 <memset>
   MEMSET(&ibits, 0, sizeof(ibits));
 8033c40:	e0be7804 	addi	r2,fp,-1568
 8033c44:	0180c304 	movi	r6,780
 8033c48:	000b883a 	mov	r5,zero
 8033c4c:	1009883a 	mov	r4,r2
 8033c50:	8002fa40 	call	8002fa4 <memset>

   if (in)
 8033c54:	e0be7717 	ldw	r2,-1572(fp)
 8033c58:	10000526 	beq	r2,zero,8033c70 <t_select+0x68>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
 8033c5c:	e0be7804 	addi	r2,fp,-1568
 8033c60:	01804104 	movi	r6,260
 8033c64:	e17e7717 	ldw	r5,-1572(fp)
 8033c68:	1009883a 	mov	r4,r2
 8033c6c:	8002ea40 	call	8002ea4 <memcpy>
   if (out)
 8033c70:	e0be7617 	ldw	r2,-1576(fp)
 8033c74:	10000626 	beq	r2,zero,8033c90 <t_select+0x88>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
 8033c78:	e0be7804 	addi	r2,fp,-1568
 8033c7c:	10804104 	addi	r2,r2,260
 8033c80:	01804104 	movi	r6,260
 8033c84:	e17e7617 	ldw	r5,-1576(fp)
 8033c88:	1009883a 	mov	r4,r2
 8033c8c:	8002ea40 	call	8002ea4 <memcpy>
   if (ex)
 8033c90:	e0be7517 	ldw	r2,-1580(fp)
 8033c94:	10000626 	beq	r2,zero,8033cb0 <t_select+0xa8>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
 8033c98:	e0be7804 	addi	r2,fp,-1568
 8033c9c:	10808204 	addi	r2,r2,520
 8033ca0:	01804104 	movi	r6,260
 8033ca4:	e17e7517 	ldw	r5,-1580(fp)
 8033ca8:	1009883a 	mov	r4,r2
 8033cac:	8002ea40 	call	8002ea4 <memcpy>
   tmo = cticks + tv;
 8033cb0:	d0e0a317 	ldw	r3,-32116(gp)
 8033cb4:	e0be7417 	ldw	r2,-1584(fp)
 8033cb8:	1885883a 	add	r2,r3,r2
 8033cbc:	e0bffe15 	stw	r2,-8(fp)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 8033cc0:	e0be7817 	ldw	r2,-1568(fp)
 8033cc4:	10000c1e 	bne	r2,zero,8033cf8 <t_select+0xf0>
 8033cc8:	e0beb917 	ldw	r2,-1308(fp)
 8033ccc:	10000a1e 	bne	r2,zero,8033cf8 <t_select+0xf0>
       (ibits[2].fd_count == 0))
 8033cd0:	e0befa17 	ldw	r2,-1048(fp)
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 8033cd4:	1000081e 	bne	r2,zero,8033cf8 <t_select+0xf0>
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
 8033cd8:	e0be7417 	ldw	r2,-1584(fp)
 8033cdc:	00801f0e 	bge	zero,r2,8033d5c <t_select+0x154>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
 8033ce0:	e0be7417 	ldw	r2,-1584(fp)
 8033ce4:	10800044 	addi	r2,r2,1
 8033ce8:	10bfffcc 	andi	r2,r2,65535
 8033cec:	1009883a 	mov	r4,r2
 8033cf0:	80186cc0 	call	80186cc <OSTimeDly>
      if (tv > 0)      /* make sure we don't block on nothing forever */
 8033cf4:	00001906 	br	8033d5c <t_select+0x154>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
 8033cf8:	0009883a 	mov	r4,zero
 8033cfc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      while ((retval = sock_selscan(ibits, obits)) == 0)
 8033d00:	00000a06 	br	8033d2c <t_select+0x124>
      {
         if (tv != -1L) 
 8033d04:	e0be7417 	ldw	r2,-1584(fp)
 8033d08:	10bfffe0 	cmpeqi	r2,r2,-1
 8033d0c:	1000031e 	bne	r2,zero,8033d1c <t_select+0x114>
         {
            if (tmo <= cticks)
 8033d10:	d0e0a317 	ldw	r3,-32116(gp)
 8033d14:	e0bffe17 	ldw	r2,-8(fp)
 8033d18:	18800d2e 	bgeu	r3,r2,8033d50 <t_select+0x148>
               break;
         }
         select_wait = 1;
 8033d1c:	00800044 	movi	r2,1
 8033d20:	d0a0ab0d 	sth	r2,-32084(gp)
         tcp_sleep (&select_wait);
 8033d24:	d120ab04 	addi	r4,gp,-32084
 8033d28:	80288c00 	call	80288c0 <tcp_sleep>
      while ((retval = sock_selscan(ibits, obits)) == 0)
 8033d2c:	e0ff3b04 	addi	r3,fp,-788
 8033d30:	e0be7804 	addi	r2,fp,-1568
 8033d34:	180b883a 	mov	r5,r3
 8033d38:	1009883a 	mov	r4,r2
 8033d3c:	8033dd80 	call	8033dd8 <sock_selscan>
 8033d40:	e0bfff15 	stw	r2,-4(fp)
 8033d44:	e0bfff17 	ldw	r2,-4(fp)
 8033d48:	103fee26 	beq	r2,zero,8033d04 <t_select+0xfc>
 8033d4c:	00000106 	br	8033d54 <t_select+0x14c>
               break;
 8033d50:	0001883a 	nop
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
 8033d54:	0009883a 	mov	r4,zero
 8033d58:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
 8033d5c:	e0bfff17 	ldw	r2,-4(fp)
 8033d60:	10001716 	blt	r2,zero,8033dc0 <t_select+0x1b8>
   {
      if (in)
 8033d64:	e0be7717 	ldw	r2,-1572(fp)
 8033d68:	10000526 	beq	r2,zero,8033d80 <t_select+0x178>
         MEMCPY(in, &obits[0], sizeof(fd_set));
 8033d6c:	e0bf3b04 	addi	r2,fp,-788
 8033d70:	01804104 	movi	r6,260
 8033d74:	100b883a 	mov	r5,r2
 8033d78:	e13e7717 	ldw	r4,-1572(fp)
 8033d7c:	8002ea40 	call	8002ea4 <memcpy>
      if (out)
 8033d80:	e0be7617 	ldw	r2,-1576(fp)
 8033d84:	10000626 	beq	r2,zero,8033da0 <t_select+0x198>
         MEMCPY(out, &obits[1], sizeof(fd_set));
 8033d88:	e0bf3b04 	addi	r2,fp,-788
 8033d8c:	10804104 	addi	r2,r2,260
 8033d90:	01804104 	movi	r6,260
 8033d94:	100b883a 	mov	r5,r2
 8033d98:	e13e7617 	ldw	r4,-1576(fp)
 8033d9c:	8002ea40 	call	8002ea4 <memcpy>
      if (ex)
 8033da0:	e0be7517 	ldw	r2,-1580(fp)
 8033da4:	10000626 	beq	r2,zero,8033dc0 <t_select+0x1b8>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
 8033da8:	e0bf3b04 	addi	r2,fp,-788
 8033dac:	10808204 	addi	r2,r2,520
 8033db0:	01804104 	movi	r6,260
 8033db4:	100b883a 	mov	r5,r2
 8033db8:	e13e7517 	ldw	r4,-1580(fp)
 8033dbc:	8002ea40 	call	8002ea4 <memcpy>
   }
   return retval;
 8033dc0:	e0bfff17 	ldw	r2,-4(fp)
}
 8033dc4:	e037883a 	mov	sp,fp
 8033dc8:	dfc00117 	ldw	ra,4(sp)
 8033dcc:	df000017 	ldw	fp,0(sp)
 8033dd0:	dec00204 	addi	sp,sp,8
 8033dd4:	f800283a 	ret

08033dd8 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
 8033dd8:	defff604 	addi	sp,sp,-40
 8033ddc:	dfc00915 	stw	ra,36(sp)
 8033de0:	df000815 	stw	fp,32(sp)
 8033de4:	df000804 	addi	fp,sp,32
 8033de8:	e13ff915 	stw	r4,-28(fp)
 8033dec:	e17ff815 	stw	r5,-32(fp)
   fd_set *in, *out;
   int   which;
   int   sock;
   int   flag  =  0;
 8033df0:	e03ffd15 	stw	zero,-12(fp)
   int   num_sel  =  0;
 8033df4:	e03ffc15 	stw	zero,-16(fp)

   for (which = 0; which < 3; which++)
 8033df8:	e03fff15 	stw	zero,-4(fp)
 8033dfc:	00004106 	br	8033f04 <sock_selscan+0x12c>
   {
      switch (which)
 8033e00:	e0bfff17 	ldw	r2,-4(fp)
 8033e04:	108000a0 	cmpeqi	r2,r2,2
 8033e08:	10000f1e 	bne	r2,zero,8033e48 <sock_selscan+0x70>
 8033e0c:	e0bfff17 	ldw	r2,-4(fp)
 8033e10:	108000c8 	cmpgei	r2,r2,3
 8033e14:	10000e1e 	bne	r2,zero,8033e50 <sock_selscan+0x78>
 8033e18:	e0bfff17 	ldw	r2,-4(fp)
 8033e1c:	10000426 	beq	r2,zero,8033e30 <sock_selscan+0x58>
 8033e20:	e0bfff17 	ldw	r2,-4(fp)
 8033e24:	10800060 	cmpeqi	r2,r2,1
 8033e28:	1000041e 	bne	r2,zero,8033e3c <sock_selscan+0x64>
 8033e2c:	00000806 	br	8033e50 <sock_selscan+0x78>
      {
      case 0:
         flag = SOREAD; break;
 8033e30:	00800044 	movi	r2,1
 8033e34:	e0bffd15 	stw	r2,-12(fp)
 8033e38:	00000506 	br	8033e50 <sock_selscan+0x78>

      case 1:
         flag = SOWRITE; break;
 8033e3c:	00800084 	movi	r2,2
 8033e40:	e0bffd15 	stw	r2,-12(fp)
 8033e44:	00000206 	br	8033e50 <sock_selscan+0x78>

      case 2:
         flag = 0; break;
 8033e48:	e03ffd15 	stw	zero,-12(fp)
 8033e4c:	0001883a 	nop
      }
      in = &ibits [which];
 8033e50:	e0bfff17 	ldw	r2,-4(fp)
 8033e54:	10804124 	muli	r2,r2,260
 8033e58:	e0fff917 	ldw	r3,-28(fp)
 8033e5c:	1885883a 	add	r2,r3,r2
 8033e60:	e0bffb15 	stw	r2,-20(fp)
      out = &obits [which];
 8033e64:	e0bfff17 	ldw	r2,-4(fp)
 8033e68:	10804124 	muli	r2,r2,260
 8033e6c:	e0fff817 	ldw	r3,-32(fp)
 8033e70:	1885883a 	add	r2,r3,r2
 8033e74:	e0bffa15 	stw	r2,-24(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
 8033e78:	e03ffe15 	stw	zero,-8(fp)
 8033e7c:	00001906 	br	8033ee4 <sock_selscan+0x10c>
      {
         if (sock_select (in->fd_array[sock], flag))
 8033e80:	e0fffb17 	ldw	r3,-20(fp)
 8033e84:	e0bffe17 	ldw	r2,-8(fp)
 8033e88:	10800044 	addi	r2,r2,1
 8033e8c:	100490ba 	slli	r2,r2,2
 8033e90:	1885883a 	add	r2,r3,r2
 8033e94:	10800017 	ldw	r2,0(r2)
 8033e98:	e17ffd17 	ldw	r5,-12(fp)
 8033e9c:	1009883a 	mov	r4,r2
 8033ea0:	8033f280 	call	8033f28 <sock_select>
 8033ea4:	10000c26 	beq	r2,zero,8033ed8 <sock_selscan+0x100>
         {
            FD_SET(in->fd_array[sock], out);
 8033ea8:	e0fffb17 	ldw	r3,-20(fp)
 8033eac:	e0bffe17 	ldw	r2,-8(fp)
 8033eb0:	10800044 	addi	r2,r2,1
 8033eb4:	100490ba 	slli	r2,r2,2
 8033eb8:	1885883a 	add	r2,r3,r2
 8033ebc:	10800017 	ldw	r2,0(r2)
 8033ec0:	e17ffa17 	ldw	r5,-24(fp)
 8033ec4:	1009883a 	mov	r4,r2
 8033ec8:	80343440 	call	8034344 <ifd_set>
            num_sel++;
 8033ecc:	e0bffc17 	ldw	r2,-16(fp)
 8033ed0:	10800044 	addi	r2,r2,1
 8033ed4:	e0bffc15 	stw	r2,-16(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
 8033ed8:	e0bffe17 	ldw	r2,-8(fp)
 8033edc:	10800044 	addi	r2,r2,1
 8033ee0:	e0bffe15 	stw	r2,-8(fp)
 8033ee4:	e0bffb17 	ldw	r2,-20(fp)
 8033ee8:	10800017 	ldw	r2,0(r2)
 8033eec:	1007883a 	mov	r3,r2
 8033ef0:	e0bffe17 	ldw	r2,-8(fp)
 8033ef4:	10ffe216 	blt	r2,r3,8033e80 <sock_selscan+0xa8>
   for (which = 0; which < 3; which++)
 8033ef8:	e0bfff17 	ldw	r2,-4(fp)
 8033efc:	10800044 	addi	r2,r2,1
 8033f00:	e0bfff15 	stw	r2,-4(fp)
 8033f04:	e0bfff17 	ldw	r2,-4(fp)
 8033f08:	108000d0 	cmplti	r2,r2,3
 8033f0c:	103fbc1e 	bne	r2,zero,8033e00 <sock_selscan+0x28>
         }
      }
   }
   return num_sel;
 8033f10:	e0bffc17 	ldw	r2,-16(fp)
}
 8033f14:	e037883a 	mov	sp,fp
 8033f18:	dfc00117 	ldw	ra,4(sp)
 8033f1c:	df000017 	ldw	fp,0(sp)
 8033f20:	dec00204 	addi	sp,sp,8
 8033f24:	f800283a 	ret

08033f28 <sock_select>:
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
 8033f28:	defffa04 	addi	sp,sp,-24
 8033f2c:	dfc00515 	stw	ra,20(sp)
 8033f30:	df000415 	stw	fp,16(sp)
 8033f34:	df000404 	addi	fp,sp,16
 8033f38:	e13ffd15 	stw	r4,-12(fp)
 8033f3c:	e17ffc15 	stw	r5,-16(fp)
   struct socket *   so;
   int   ready =  0;
 8033f40:	e03fff15 	stw	zero,-4(fp)

   so = LONG2SO(sock);
 8033f44:	e0bffd17 	ldw	r2,-12(fp)
 8033f48:	10bff804 	addi	r2,r2,-32
 8033f4c:	100490ba 	slli	r2,r2,2
 8033f50:	e0bffe15 	stw	r2,-8(fp)

   switch (flag) 
 8033f54:	e0bffc17 	ldw	r2,-16(fp)
 8033f58:	108000a0 	cmpeqi	r2,r2,2
 8033f5c:	1000261e 	bne	r2,zero,8033ff8 <sock_select+0xd0>
 8033f60:	e0bffc17 	ldw	r2,-16(fp)
 8033f64:	108000c8 	cmpgei	r2,r2,3
 8033f68:	1000651e 	bne	r2,zero,8034100 <sock_select+0x1d8>
 8033f6c:	e0bffc17 	ldw	r2,-16(fp)
 8033f70:	10004526 	beq	r2,zero,8034088 <sock_select+0x160>
 8033f74:	e0bffc17 	ldw	r2,-16(fp)
 8033f78:	10800058 	cmpnei	r2,r2,1
 8033f7c:	1000601e 	bne	r2,zero,8034100 <sock_select+0x1d8>
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
 8033f80:	e0bffe17 	ldw	r2,-8(fp)
 8033f84:	10800a17 	ldw	r2,40(r2)
 8033f88:	10000326 	beq	r2,zero,8033f98 <sock_select+0x70>
      {
         ready = 1;
 8033f8c:	00800044 	movi	r2,1
 8033f90:	e0bfff15 	stw	r2,-4(fp)
         break;
 8033f94:	00005a06 	br	8034100 <sock_select+0x1d8>
      }
      if (so->so_state & SS_CANTRCVMORE)
 8033f98:	e0bffe17 	ldw	r2,-8(fp)
 8033f9c:	1080088b 	ldhu	r2,34(r2)
 8033fa0:	10bfffcc 	andi	r2,r2,65535
 8033fa4:	1080080c 	andi	r2,r2,32
 8033fa8:	10000326 	beq	r2,zero,8033fb8 <sock_select+0x90>
      {  ready = 1;
 8033fac:	00800044 	movi	r2,1
 8033fb0:	e0bfff15 	stw	r2,-4(fp)
         break;
 8033fb4:	00005206 	br	8034100 <sock_select+0x1d8>
      }
      if (so->so_qlen)  /* attach is ready */
 8033fb8:	e0bffe17 	ldw	r2,-8(fp)
 8033fbc:	10801e43 	ldbu	r2,121(r2)
 8033fc0:	10803fcc 	andi	r2,r2,255
 8033fc4:	1080201c 	xori	r2,r2,128
 8033fc8:	10bfe004 	addi	r2,r2,-128
 8033fcc:	10000326 	beq	r2,zero,8033fdc <sock_select+0xb4>
      {
         ready = 1;
 8033fd0:	00800044 	movi	r2,1
 8033fd4:	e0bfff15 	stw	r2,-4(fp)
         break;
 8033fd8:	00004906 	br	8034100 <sock_select+0x1d8>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
 8033fdc:	e0bffe17 	ldw	r2,-8(fp)
 8033fe0:	1080110b 	ldhu	r2,68(r2)
 8033fe4:	10800214 	ori	r2,r2,8
 8033fe8:	1007883a 	mov	r3,r2
 8033fec:	e0bffe17 	ldw	r2,-8(fp)
 8033ff0:	10c0110d 	sth	r3,68(r2)
      break;
 8033ff4:	00004206 	br	8034100 <sock_select+0x1d8>

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
 8033ff8:	e0bffe17 	ldw	r2,-8(fp)
 8033ffc:	10801317 	ldw	r2,76(r2)
 8034000:	1007883a 	mov	r3,r2
 8034004:	e0bffe17 	ldw	r2,-8(fp)
 8034008:	10801217 	ldw	r2,72(r2)
 803400c:	1885c83a 	sub	r2,r3,r2
 8034010:	10001816 	blt	r2,zero,8034074 <sock_select+0x14c>
 8034014:	e0bffe17 	ldw	r2,-8(fp)
 8034018:	10c01317 	ldw	r3,76(r2)
 803401c:	e0bffe17 	ldw	r2,-8(fp)
 8034020:	10801217 	ldw	r2,72(r2)
 8034024:	18801326 	beq	r3,r2,8034074 <sock_select+0x14c>
          ((((so)->so_state&SS_ISCONNECTED) || 
 8034028:	e0bffe17 	ldw	r2,-8(fp)
 803402c:	1080088b 	ldhu	r2,34(r2)
 8034030:	10bfffcc 	andi	r2,r2,65535
 8034034:	1080008c 	andi	r2,r2,2
      if ((sbspace(&(so)->so_snd) > 0) && 
 8034038:	10000b1e 	bne	r2,zero,8034068 <sock_select+0x140>
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
 803403c:	e0bffe17 	ldw	r2,-8(fp)
 8034040:	10800217 	ldw	r2,8(r2)
 8034044:	1080010b 	ldhu	r2,4(r2)
 8034048:	10bfffcc 	andi	r2,r2,65535
 803404c:	1080010c 	andi	r2,r2,4
          ((((so)->so_state&SS_ISCONNECTED) || 
 8034050:	10000526 	beq	r2,zero,8034068 <sock_select+0x140>
           ((so)->so_state & SS_CANTSENDMORE)))
 8034054:	e0bffe17 	ldw	r2,-8(fp)
 8034058:	1080088b 	ldhu	r2,34(r2)
 803405c:	10bfffcc 	andi	r2,r2,65535
 8034060:	1080040c 	andi	r2,r2,16
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
 8034064:	10000326 	beq	r2,zero,8034074 <sock_select+0x14c>
      {
         ready = 1;
 8034068:	00800044 	movi	r2,1
 803406c:	e0bfff15 	stw	r2,-4(fp)
         break;
 8034070:	00002306 	br	8034100 <sock_select+0x1d8>
      }
      sbselqueue (&so->so_snd);
 8034074:	e0bffe17 	ldw	r2,-8(fp)
 8034078:	10801204 	addi	r2,r2,72
 803407c:	1009883a 	mov	r4,r2
 8034080:	80330b00 	call	80330b0 <sbselqueue>
      break;
 8034084:	00001e06 	br	8034100 <sock_select+0x1d8>

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
 8034088:	e0bffe17 	ldw	r2,-8(fp)
 803408c:	10801a17 	ldw	r2,104(r2)
 8034090:	1000051e 	bne	r2,zero,80340a8 <sock_select+0x180>
 8034094:	e0bffe17 	ldw	r2,-8(fp)
 8034098:	1080088b 	ldhu	r2,34(r2)
 803409c:	10bfffcc 	andi	r2,r2,65535
 80340a0:	1080100c 	andi	r2,r2,64
 80340a4:	10000326 	beq	r2,zero,80340b4 <sock_select+0x18c>
      {
         ready = 1;
 80340a8:	00800044 	movi	r2,1
 80340ac:	e0bfff15 	stw	r2,-4(fp)
         break;
 80340b0:	00001306 	br	8034100 <sock_select+0x1d8>
      }
      if (so->so_error &&
 80340b4:	e0bffe17 	ldw	r2,-8(fp)
 80340b8:	10800617 	ldw	r2,24(r2)
 80340bc:	10000b26 	beq	r2,zero,80340ec <sock_select+0x1c4>
          (so->so_error != EINPROGRESS) &&
 80340c0:	e0bffe17 	ldw	r2,-8(fp)
 80340c4:	10800617 	ldw	r2,24(r2)
      if (so->so_error &&
 80340c8:	10801de0 	cmpeqi	r2,r2,119
 80340cc:	1000071e 	bne	r2,zero,80340ec <sock_select+0x1c4>
          (so->so_error != EWOULDBLOCK))
 80340d0:	e0bffe17 	ldw	r2,-8(fp)
 80340d4:	10800617 	ldw	r2,24(r2)
          (so->so_error != EINPROGRESS) &&
 80340d8:	108002e0 	cmpeqi	r2,r2,11
 80340dc:	1000031e 	bne	r2,zero,80340ec <sock_select+0x1c4>
      {
         ready = 1;
 80340e0:	00800044 	movi	r2,1
 80340e4:	e0bfff15 	stw	r2,-4(fp)
         break;
 80340e8:	00000506 	br	8034100 <sock_select+0x1d8>
      }
      sbselqueue(&so->so_rcv);
 80340ec:	e0bffe17 	ldw	r2,-8(fp)
 80340f0:	10800a04 	addi	r2,r2,40
 80340f4:	1009883a 	mov	r4,r2
 80340f8:	80330b00 	call	80330b0 <sbselqueue>
      break;
 80340fc:	0001883a 	nop
   }

   return ready;
 8034100:	e0bfff17 	ldw	r2,-4(fp)
}
 8034104:	e037883a 	mov	sp,fp
 8034108:	dfc00117 	ldw	ra,4(sp)
 803410c:	df000017 	ldw	fp,0(sp)
 8034110:	dec00204 	addi	sp,sp,8
 8034114:	f800283a 	ret

08034118 <in_pcbnotify>:
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
 8034118:	defff804 	addi	sp,sp,-32
 803411c:	dfc00715 	stw	ra,28(sp)
 8034120:	df000615 	stw	fp,24(sp)
 8034124:	df000604 	addi	fp,sp,24
 8034128:	e13ffd15 	stw	r4,-12(fp)
 803412c:	e17ffc15 	stw	r5,-16(fp)
 8034130:	e1bffb15 	stw	r6,-20(fp)
 8034134:	e1fffa15 	stw	r7,-24(fp)
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 8034138:	e0bffd17 	ldw	r2,-12(fp)
 803413c:	10800017 	ldw	r2,0(r2)
 8034140:	e0bfff15 	stw	r2,-4(fp)
 8034144:	00001c06 	br	80341b8 <in_pcbnotify+0xa0>
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 8034148:	e0bfff17 	ldw	r2,-4(fp)
 803414c:	10c00317 	ldw	r3,12(r2)
 8034150:	e0bffc17 	ldw	r2,-16(fp)
 8034154:	10800017 	ldw	r2,0(r2)
 8034158:	1880031e 	bne	r3,r2,8034168 <in_pcbnotify+0x50>
          inp->inp_socket == 0) 
 803415c:	e0bfff17 	ldw	r2,-4(fp)
 8034160:	10800817 	ldw	r2,32(r2)
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 8034164:	1000041e 	bne	r2,zero,8034178 <in_pcbnotify+0x60>
      {
         inp = inp->inp_next;
 8034168:	e0bfff17 	ldw	r2,-4(fp)
 803416c:	10800017 	ldw	r2,0(r2)
 8034170:	e0bfff15 	stw	r2,-4(fp)
         continue;
 8034174:	00001006 	br	80341b8 <in_pcbnotify+0xa0>
      }
      if (errnum) 
 8034178:	e0bffb17 	ldw	r2,-20(fp)
 803417c:	10000426 	beq	r2,zero,8034190 <in_pcbnotify+0x78>
         inp->inp_socket->so_error = errnum;
 8034180:	e0bfff17 	ldw	r2,-4(fp)
 8034184:	10800817 	ldw	r2,32(r2)
 8034188:	e0fffb17 	ldw	r3,-20(fp)
 803418c:	10c00615 	stw	r3,24(r2)
      oinp = inp;
 8034190:	e0bfff17 	ldw	r2,-4(fp)
 8034194:	e0bffe15 	stw	r2,-8(fp)
      inp = inp->inp_next;
 8034198:	e0bfff17 	ldw	r2,-4(fp)
 803419c:	10800017 	ldw	r2,0(r2)
 80341a0:	e0bfff15 	stw	r2,-4(fp)
      if (notify)
 80341a4:	e0bffa17 	ldw	r2,-24(fp)
 80341a8:	10000326 	beq	r2,zero,80341b8 <in_pcbnotify+0xa0>
         (*notify)(oinp);
 80341ac:	e0bffa17 	ldw	r2,-24(fp)
 80341b0:	e13ffe17 	ldw	r4,-8(fp)
 80341b4:	103ee83a 	callr	r2
   for (inp = head->inp_next; inp != head;) 
 80341b8:	e0ffff17 	ldw	r3,-4(fp)
 80341bc:	e0bffd17 	ldw	r2,-12(fp)
 80341c0:	18bfe11e 	bne	r3,r2,8034148 <in_pcbnotify+0x30>
   }
}
 80341c4:	0001883a 	nop
 80341c8:	0001883a 	nop
 80341cc:	e037883a 	mov	sp,fp
 80341d0:	dfc00117 	ldw	ra,4(sp)
 80341d4:	df000017 	ldw	fp,0(sp)
 80341d8:	dec00204 	addi	sp,sp,8
 80341dc:	f800283a 	ret

080341e0 <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
 80341e0:	defffd04 	addi	sp,sp,-12
 80341e4:	dfc00215 	stw	ra,8(sp)
 80341e8:	df000115 	stw	fp,4(sp)
 80341ec:	df000104 	addi	fp,sp,4
 80341f0:	e13fff15 	stw	r4,-4(fp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
 80341f4:	e0bfff17 	ldw	r2,-4(fp)
 80341f8:	10800817 	ldw	r2,32(r2)
 80341fc:	10800904 	addi	r2,r2,36
 8034200:	1009883a 	mov	r4,r2
 8034204:	8028a0c0 	call	8028a0c <tcp_wakeup>
   sorwakeup(inp->inp_socket);
 8034208:	e0bfff17 	ldw	r2,-4(fp)
 803420c:	10c00817 	ldw	r3,32(r2)
 8034210:	e0bfff17 	ldw	r2,-4(fp)
 8034214:	10800817 	ldw	r2,32(r2)
 8034218:	10800a04 	addi	r2,r2,40
 803421c:	100b883a 	mov	r5,r2
 8034220:	1809883a 	mov	r4,r3
 8034224:	80331580 	call	8033158 <sbwakeup>
   sowwakeup(inp->inp_socket);
 8034228:	e0bfff17 	ldw	r2,-4(fp)
 803422c:	10c00817 	ldw	r3,32(r2)
 8034230:	e0bfff17 	ldw	r2,-4(fp)
 8034234:	10800817 	ldw	r2,32(r2)
 8034238:	10801204 	addi	r2,r2,72
 803423c:	100b883a 	mov	r5,r2
 8034240:	1809883a 	mov	r4,r3
 8034244:	80331580 	call	8033158 <sbwakeup>
}
 8034248:	0001883a 	nop
 803424c:	e037883a 	mov	sp,fp
 8034250:	dfc00117 	ldw	ra,4(sp)
 8034254:	df000017 	ldw	fp,0(sp)
 8034258:	dec00204 	addi	sp,sp,8
 803425c:	f800283a 	ret

08034260 <ifd_clr>:
 * compacts the fd_set.
 */

void
ifd_clr(long sock, fd_set *set)
{
 8034260:	defffb04 	addi	sp,sp,-20
 8034264:	dfc00415 	stw	ra,16(sp)
 8034268:	df000315 	stw	fp,12(sp)
 803426c:	df000304 	addi	fp,sp,12
 8034270:	e13ffe15 	stw	r4,-8(fp)
 8034274:	e17ffd15 	stw	r5,-12(fp)
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 8034278:	e03fff15 	stw	zero,-4(fp)
 803427c:	00002706 	br	803431c <ifd_clr+0xbc>
   {
      if (set->fd_array[i] == sock)
 8034280:	e0fffd17 	ldw	r3,-12(fp)
 8034284:	e0bfff17 	ldw	r2,-4(fp)
 8034288:	10800044 	addi	r2,r2,1
 803428c:	100490ba 	slli	r2,r2,2
 8034290:	1885883a 	add	r2,r3,r2
 8034294:	10800017 	ldw	r2,0(r2)
 8034298:	e0fffe17 	ldw	r3,-8(fp)
 803429c:	18801c1e 	bne	r3,r2,8034310 <ifd_clr+0xb0>
      {
         while (i + 1 < set->fd_count)
 80342a0:	00001006 	br	80342e4 <ifd_clr+0x84>
         {
            set->fd_array[i] = set->fd_array[i + 1];
 80342a4:	e0bfff17 	ldw	r2,-4(fp)
 80342a8:	10800044 	addi	r2,r2,1
 80342ac:	e0fffd17 	ldw	r3,-12(fp)
 80342b0:	10800044 	addi	r2,r2,1
 80342b4:	100490ba 	slli	r2,r2,2
 80342b8:	1885883a 	add	r2,r3,r2
 80342bc:	10c00017 	ldw	r3,0(r2)
 80342c0:	e13ffd17 	ldw	r4,-12(fp)
 80342c4:	e0bfff17 	ldw	r2,-4(fp)
 80342c8:	10800044 	addi	r2,r2,1
 80342cc:	100490ba 	slli	r2,r2,2
 80342d0:	2085883a 	add	r2,r4,r2
 80342d4:	10c00015 	stw	r3,0(r2)
            i++;
 80342d8:	e0bfff17 	ldw	r2,-4(fp)
 80342dc:	10800044 	addi	r2,r2,1
 80342e0:	e0bfff15 	stw	r2,-4(fp)
         while (i + 1 < set->fd_count)
 80342e4:	e0bfff17 	ldw	r2,-4(fp)
 80342e8:	10c00044 	addi	r3,r2,1
 80342ec:	e0bffd17 	ldw	r2,-12(fp)
 80342f0:	10800017 	ldw	r2,0(r2)
 80342f4:	18bfeb36 	bltu	r3,r2,80342a4 <ifd_clr+0x44>
         }
         set->fd_count--;
 80342f8:	e0bffd17 	ldw	r2,-12(fp)
 80342fc:	10800017 	ldw	r2,0(r2)
 8034300:	10ffffc4 	addi	r3,r2,-1
 8034304:	e0bffd17 	ldw	r2,-12(fp)
 8034308:	10c00015 	stw	r3,0(r2)
         return;
 803430c:	00000806 	br	8034330 <ifd_clr+0xd0>
   for (i = 0; i < set->fd_count ; i++) 
 8034310:	e0bfff17 	ldw	r2,-4(fp)
 8034314:	10800044 	addi	r2,r2,1
 8034318:	e0bfff15 	stw	r2,-4(fp)
 803431c:	e0bffd17 	ldw	r2,-12(fp)
 8034320:	10800017 	ldw	r2,0(r2)
 8034324:	e0ffff17 	ldw	r3,-4(fp)
 8034328:	18bfd536 	bltu	r3,r2,8034280 <ifd_clr+0x20>
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
 803432c:	802c3fc0 	call	802c3fc <dtrap>
#endif
}
 8034330:	e037883a 	mov	sp,fp
 8034334:	dfc00117 	ldw	ra,4(sp)
 8034338:	df000017 	ldw	fp,0(sp)
 803433c:	dec00204 	addi	sp,sp,8
 8034340:	f800283a 	ret

08034344 <ifd_set>:
 * called if the fd_set structure is already full.
 */

void
ifd_set(long sock, fd_set *set)
{
 8034344:	defffc04 	addi	sp,sp,-16
 8034348:	dfc00315 	stw	ra,12(sp)
 803434c:	df000215 	stw	fp,8(sp)
 8034350:	df000204 	addi	fp,sp,8
 8034354:	e13fff15 	stw	r4,-4(fp)
 8034358:	e17ffe15 	stw	r5,-8(fp)
   if (set->fd_count < FD_SETSIZE)
 803435c:	e0bffe17 	ldw	r2,-8(fp)
 8034360:	10800017 	ldw	r2,0(r2)
 8034364:	10801028 	cmpgeui	r2,r2,64
 8034368:	10000c1e 	bne	r2,zero,803439c <ifd_set+0x58>
      set->fd_array[set->fd_count++] = sock;
 803436c:	e0bffe17 	ldw	r2,-8(fp)
 8034370:	10800017 	ldw	r2,0(r2)
 8034374:	11000044 	addi	r4,r2,1
 8034378:	e0fffe17 	ldw	r3,-8(fp)
 803437c:	19000015 	stw	r4,0(r3)
 8034380:	e0fffe17 	ldw	r3,-8(fp)
 8034384:	10800044 	addi	r2,r2,1
 8034388:	100490ba 	slli	r2,r2,2
 803438c:	1885883a 	add	r2,r3,r2
 8034390:	e0ffff17 	ldw	r3,-4(fp)
 8034394:	10c00015 	stw	r3,0(r2)
#ifdef NPDEBUG
   else
      dtrap();
#endif
}
 8034398:	00000106 	br	80343a0 <ifd_set+0x5c>
      dtrap();
 803439c:	802c3fc0 	call	802c3fc <dtrap>
}
 80343a0:	0001883a 	nop
 80343a4:	e037883a 	mov	sp,fp
 80343a8:	dfc00117 	ldw	ra,4(sp)
 80343ac:	df000017 	ldw	fp,0(sp)
 80343b0:	dec00204 	addi	sp,sp,8
 80343b4:	f800283a 	ret

080343b8 <ifd_isset>:
 * Tests if a socket is a member of a file descriptor set.
 */

int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
 80343b8:	defffc04 	addi	sp,sp,-16
 80343bc:	df000315 	stw	fp,12(sp)
 80343c0:	df000304 	addi	fp,sp,12
 80343c4:	e13ffe15 	stw	r4,-8(fp)
 80343c8:	e17ffd15 	stw	r5,-12(fp)
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 80343cc:	e03fff15 	stw	zero,-4(fp)
 80343d0:	00000d06 	br	8034408 <ifd_isset+0x50>
   {
      if (set->fd_array[i] == sock)
 80343d4:	e0fffd17 	ldw	r3,-12(fp)
 80343d8:	e0bfff17 	ldw	r2,-4(fp)
 80343dc:	10800044 	addi	r2,r2,1
 80343e0:	100490ba 	slli	r2,r2,2
 80343e4:	1885883a 	add	r2,r3,r2
 80343e8:	10800017 	ldw	r2,0(r2)
 80343ec:	e0fffe17 	ldw	r3,-8(fp)
 80343f0:	1880021e 	bne	r3,r2,80343fc <ifd_isset+0x44>
         return TRUE;
 80343f4:	00800044 	movi	r2,1
 80343f8:	00000806 	br	803441c <ifd_isset+0x64>
   for (i = 0; i < set->fd_count ; i++)
 80343fc:	e0bfff17 	ldw	r2,-4(fp)
 8034400:	10800044 	addi	r2,r2,1
 8034404:	e0bfff15 	stw	r2,-4(fp)
 8034408:	e0bffd17 	ldw	r2,-12(fp)
 803440c:	10800017 	ldw	r2,0(r2)
 8034410:	e0ffff17 	ldw	r3,-4(fp)
 8034414:	18bfef36 	bltu	r3,r2,80343d4 <ifd_isset+0x1c>
   }
   return FALSE;
 8034418:	0005883a 	mov	r2,zero
}
 803441c:	e037883a 	mov	sp,fp
 8034420:	df000017 	ldw	fp,0(sp)
 8034424:	dec00104 	addi	sp,sp,4
 8034428:	f800283a 	ret

0803442c <ifd_get>:
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
 803442c:	defffc04 	addi	sp,sp,-16
 8034430:	dfc00315 	stw	ra,12(sp)
 8034434:	df000215 	stw	fp,8(sp)
 8034438:	df000204 	addi	fp,sp,8
 803443c:	e13fff15 	stw	r4,-4(fp)
 8034440:	e17ffe15 	stw	r5,-8(fp)
   if (i < set->fd_count)
 8034444:	e0bffe17 	ldw	r2,-8(fp)
 8034448:	10800017 	ldw	r2,0(r2)
 803444c:	e0ffff17 	ldw	r3,-4(fp)
 8034450:	1880072e 	bgeu	r3,r2,8034470 <ifd_get+0x44>
      return set->fd_array[i];
 8034454:	e0fffe17 	ldw	r3,-8(fp)
 8034458:	e0bfff17 	ldw	r2,-4(fp)
 803445c:	10800044 	addi	r2,r2,1
 8034460:	100490ba 	slli	r2,r2,2
 8034464:	1885883a 	add	r2,r3,r2
 8034468:	10800017 	ldw	r2,0(r2)
 803446c:	00000206 	br	8034478 <ifd_get+0x4c>
   else
   {
#ifdef NPDEBUG
      dtrap();
 8034470:	802c3fc0 	call	802c3fc <dtrap>
#endif
      return INVALID_SOCKET;
 8034474:	00bfffc4 	movi	r2,-1
   }
}
 8034478:	e037883a 	mov	sp,fp
 803447c:	dfc00117 	ldw	ra,4(sp)
 8034480:	df000017 	ldw	fp,0(sp)
 8034484:	dec00204 	addi	sp,sp,8
 8034488:	f800283a 	ret

0803448c <tcp_reass>:

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
 803448c:	defff504 	addi	sp,sp,-44
 8034490:	dfc00a15 	stw	ra,40(sp)
 8034494:	df000915 	stw	fp,36(sp)
 8034498:	df000904 	addi	fp,sp,36
 803449c:	e13ff915 	stw	r4,-28(fp)
 80344a0:	e17ff815 	stw	r5,-32(fp)
 80344a4:	e1bff715 	stw	r6,-36(fp)
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
 80344a8:	e0bff917 	ldw	r2,-28(fp)
 80344ac:	10800d17 	ldw	r2,52(r2)
 80344b0:	10800817 	ldw	r2,32(r2)
 80344b4:	e0bffe15 	stw	r2,-8(fp)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
 80344b8:	e0bff817 	ldw	r2,-32(fp)
 80344bc:	10009c26 	beq	r2,zero,8034730 <tcp_reass+0x2a4>
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 80344c0:	e0bff917 	ldw	r2,-28(fp)
 80344c4:	10800017 	ldw	r2,0(r2)
 80344c8:	e0bfff15 	stw	r2,-4(fp)
 80344cc:	00000906 	br	80344f4 <tcp_reass+0x68>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
 80344d0:	e0bfff17 	ldw	r2,-4(fp)
 80344d4:	10c00617 	ldw	r3,24(r2)
 80344d8:	e0bff817 	ldw	r2,-32(fp)
 80344dc:	10800617 	ldw	r2,24(r2)
 80344e0:	1885c83a 	sub	r2,r3,r2
 80344e4:	00800716 	blt	zero,r2,8034504 <tcp_reass+0x78>
       q = (struct tcpiphdr *)q->ti_next)
 80344e8:	e0bfff17 	ldw	r2,-4(fp)
 80344ec:	10800017 	ldw	r2,0(r2)
 80344f0:	e0bfff15 	stw	r2,-4(fp)
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 80344f4:	e0ffff17 	ldw	r3,-4(fp)
 80344f8:	e0bff917 	ldw	r2,-28(fp)
 80344fc:	18bff41e 	bne	r3,r2,80344d0 <tcp_reass+0x44>
 8034500:	00000106 	br	8034508 <tcp_reass+0x7c>
      break;
 8034504:	0001883a 	nop
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
 8034508:	e0bfff17 	ldw	r2,-4(fp)
 803450c:	10800117 	ldw	r2,4(r2)
 8034510:	e0fff917 	ldw	r3,-28(fp)
 8034514:	18803b26 	beq	r3,r2,8034604 <tcp_reass+0x178>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
 8034518:	e0bfff17 	ldw	r2,-4(fp)
 803451c:	10800117 	ldw	r2,4(r2)
 8034520:	e0bfff15 	stw	r2,-4(fp)
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
 8034524:	e0bfff17 	ldw	r2,-4(fp)
 8034528:	10c00617 	ldw	r3,24(r2)
 803452c:	e0bfff17 	ldw	r2,-4(fp)
 8034530:	1080028b 	ldhu	r2,10(r2)
 8034534:	10bfffcc 	andi	r2,r2,65535
 8034538:	1887883a 	add	r3,r3,r2
 803453c:	e0bff817 	ldw	r2,-32(fp)
 8034540:	10800617 	ldw	r2,24(r2)
 8034544:	1885c83a 	sub	r2,r3,r2
 8034548:	e0bffd15 	stw	r2,-12(fp)
      if (i > 0) 
 803454c:	e0bffd17 	ldw	r2,-12(fp)
 8034550:	0080290e 	bge	zero,r2,80345f8 <tcp_reass+0x16c>
      {
         if (i >= (long)ti->ti_len) 
 8034554:	e0bff817 	ldw	r2,-32(fp)
 8034558:	1080028b 	ldhu	r2,10(r2)
 803455c:	10bfffcc 	andi	r2,r2,65535
 8034560:	e0fffd17 	ldw	r3,-12(fp)
 8034564:	18801416 	blt	r3,r2,80345b8 <tcp_reass+0x12c>
         {
            tcpstat.tcps_rcvduppack++;
 8034568:	008201b4 	movhi	r2,2054
 803456c:	10bc6917 	ldw	r2,-3676(r2)
 8034570:	10c00044 	addi	r3,r2,1
 8034574:	008201b4 	movhi	r2,2054
 8034578:	10fc6915 	stw	r3,-3676(r2)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
 803457c:	008201b4 	movhi	r2,2054
 8034580:	10fc6a17 	ldw	r3,-3672(r2)
 8034584:	e0bff817 	ldw	r2,-32(fp)
 8034588:	1080028b 	ldhu	r2,10(r2)
 803458c:	10bfffcc 	andi	r2,r2,65535
 8034590:	1887883a 	add	r3,r3,r2
 8034594:	008201b4 	movhi	r2,2054
 8034598:	10fc6a15 	stw	r3,-3672(r2)
            GOTO_DROP;
 803459c:	008025c4 	movi	r2,151
 80345a0:	d0a0ad15 	stw	r2,-32076(gp)
 80345a4:	0001883a 	nop
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
 80345a8:	e13ff717 	ldw	r4,-36(fp)
 80345ac:	802d4340 	call	802d434 <m_freem>
   return (0);
 80345b0:	0005883a 	mov	r2,zero
 80345b4:	0000ac06 	br	8034868 <tcp_reass+0x3dc>
         m_adj (ti_mbuf, (int)i);
 80345b8:	e17ffd17 	ldw	r5,-12(fp)
 80345bc:	e13ff717 	ldw	r4,-36(fp)
 80345c0:	802d7540 	call	802d754 <m_adj>
         ti->ti_len -= (short)i;
 80345c4:	e0bff817 	ldw	r2,-32(fp)
 80345c8:	1080028b 	ldhu	r2,10(r2)
 80345cc:	e0fffd17 	ldw	r3,-12(fp)
 80345d0:	10c5c83a 	sub	r2,r2,r3
 80345d4:	1007883a 	mov	r3,r2
 80345d8:	e0bff817 	ldw	r2,-32(fp)
 80345dc:	10c0028d 	sth	r3,10(r2)
         ti->ti_seq += (tcp_seq)i;
 80345e0:	e0bff817 	ldw	r2,-32(fp)
 80345e4:	10c00617 	ldw	r3,24(r2)
 80345e8:	e0bffd17 	ldw	r2,-12(fp)
 80345ec:	1887883a 	add	r3,r3,r2
 80345f0:	e0bff817 	ldw	r2,-32(fp)
 80345f4:	10c00615 	stw	r3,24(r2)
      q = (struct tcpiphdr *)(q->ti_next);
 80345f8:	e0bfff17 	ldw	r2,-4(fp)
 80345fc:	10800017 	ldw	r2,0(r2)
 8034600:	e0bfff15 	stw	r2,-4(fp)
   tcpstat.tcps_rcvoopack++;
 8034604:	008201b4 	movhi	r2,2054
 8034608:	10bc6d17 	ldw	r2,-3660(r2)
 803460c:	10c00044 	addi	r3,r2,1
 8034610:	008201b4 	movhi	r2,2054
 8034614:	10fc6d15 	stw	r3,-3660(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
 8034618:	008201b4 	movhi	r2,2054
 803461c:	10fc6e17 	ldw	r3,-3656(r2)
 8034620:	e0bff817 	ldw	r2,-32(fp)
 8034624:	1080028b 	ldhu	r2,10(r2)
 8034628:	10bfffcc 	andi	r2,r2,65535
 803462c:	1887883a 	add	r3,r3,r2
 8034630:	008201b4 	movhi	r2,2054
 8034634:	10fc6e15 	stw	r3,-3656(r2)
   while (q != (struct tcpiphdr *)tp) 
 8034638:	00003206 	br	8034704 <tcp_reass+0x278>
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
 803463c:	e0bff817 	ldw	r2,-32(fp)
 8034640:	10c00617 	ldw	r3,24(r2)
 8034644:	e0bff817 	ldw	r2,-32(fp)
 8034648:	1080028b 	ldhu	r2,10(r2)
 803464c:	10bfffcc 	andi	r2,r2,65535
 8034650:	1887883a 	add	r3,r3,r2
 8034654:	e0bfff17 	ldw	r2,-4(fp)
 8034658:	10800617 	ldw	r2,24(r2)
 803465c:	1885c83a 	sub	r2,r3,r2
 8034660:	e0bffc15 	stw	r2,-16(fp)
      if (i <= 0)
 8034664:	e0bffc17 	ldw	r2,-16(fp)
 8034668:	00802a0e 	bge	zero,r2,8034714 <tcp_reass+0x288>
      if (i < (int)(q->ti_len))
 803466c:	e0bfff17 	ldw	r2,-4(fp)
 8034670:	1080028b 	ldhu	r2,10(r2)
 8034674:	10bfffcc 	andi	r2,r2,65535
 8034678:	e0fffc17 	ldw	r3,-16(fp)
 803467c:	1880130e 	bge	r3,r2,80346cc <tcp_reass+0x240>
         q->ti_seq += i;
 8034680:	e0bfff17 	ldw	r2,-4(fp)
 8034684:	10c00617 	ldw	r3,24(r2)
 8034688:	e0bffc17 	ldw	r2,-16(fp)
 803468c:	1887883a 	add	r3,r3,r2
 8034690:	e0bfff17 	ldw	r2,-4(fp)
 8034694:	10c00615 	stw	r3,24(r2)
         q->ti_len -= (u_short)i;
 8034698:	e0bfff17 	ldw	r2,-4(fp)
 803469c:	1080028b 	ldhu	r2,10(r2)
 80346a0:	e0fffc17 	ldw	r3,-16(fp)
 80346a4:	10c5c83a 	sub	r2,r2,r3
 80346a8:	1007883a 	mov	r3,r2
 80346ac:	e0bfff17 	ldw	r2,-4(fp)
 80346b0:	10c0028d 	sth	r3,10(r2)
         m_adj (dtom(q), (int)i);
 80346b4:	e13fff17 	ldw	r4,-4(fp)
 80346b8:	802d9680 	call	802d968 <dtom>
 80346bc:	e17ffc17 	ldw	r5,-16(fp)
 80346c0:	1009883a 	mov	r4,r2
 80346c4:	802d7540 	call	802d754 <m_adj>
         break;
 80346c8:	00001306 	br	8034718 <tcp_reass+0x28c>
      q = (struct tcpiphdr *)q->ti_next;
 80346cc:	e0bfff17 	ldw	r2,-4(fp)
 80346d0:	10800017 	ldw	r2,0(r2)
 80346d4:	e0bfff15 	stw	r2,-4(fp)
      m = dtom(q->ti_prev);
 80346d8:	e0bfff17 	ldw	r2,-4(fp)
 80346dc:	10800117 	ldw	r2,4(r2)
 80346e0:	1009883a 	mov	r4,r2
 80346e4:	802d9680 	call	802d968 <dtom>
 80346e8:	e0bffb15 	stw	r2,-20(fp)
      remque (q->ti_prev);
 80346ec:	e0bfff17 	ldw	r2,-4(fp)
 80346f0:	10800117 	ldw	r2,4(r2)
 80346f4:	1009883a 	mov	r4,r2
 80346f8:	802da000 	call	802da00 <remque>
      m_freem (m);
 80346fc:	e13ffb17 	ldw	r4,-20(fp)
 8034700:	802d4340 	call	802d434 <m_freem>
   while (q != (struct tcpiphdr *)tp) 
 8034704:	e0ffff17 	ldw	r3,-4(fp)
 8034708:	e0bff917 	ldw	r2,-28(fp)
 803470c:	18bfcb1e 	bne	r3,r2,803463c <tcp_reass+0x1b0>
 8034710:	00000106 	br	8034718 <tcp_reass+0x28c>
         break;
 8034714:	0001883a 	nop
   insque(ti, q->ti_prev);
 8034718:	e0bfff17 	ldw	r2,-4(fp)
 803471c:	10800117 	ldw	r2,4(r2)
 8034720:	100b883a 	mov	r5,r2
 8034724:	e13ff817 	ldw	r4,-32(fp)
 8034728:	802da700 	call	802da70 <insque>
 803472c:	00000106 	br	8034734 <tcp_reass+0x2a8>
      goto present;
 8034730:	0001883a 	nop
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
 8034734:	e0bff917 	ldw	r2,-28(fp)
 8034738:	10800217 	ldw	r2,8(r2)
 803473c:	108000c8 	cmpgei	r2,r2,3
 8034740:	1000021e 	bne	r2,zero,803474c <tcp_reass+0x2c0>
      return (0);
 8034744:	0005883a 	mov	r2,zero
 8034748:	00004706 	br	8034868 <tcp_reass+0x3dc>
   ti = tp->seg_next;
 803474c:	e0bff917 	ldw	r2,-28(fp)
 8034750:	10800017 	ldw	r2,0(r2)
 8034754:	e0bff815 	stw	r2,-32(fp)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
 8034758:	e0fff817 	ldw	r3,-32(fp)
 803475c:	e0bff917 	ldw	r2,-28(fp)
 8034760:	18800526 	beq	r3,r2,8034778 <tcp_reass+0x2ec>
 8034764:	e0bff817 	ldw	r2,-32(fp)
 8034768:	10c00617 	ldw	r3,24(r2)
 803476c:	e0bff917 	ldw	r2,-28(fp)
 8034770:	10801617 	ldw	r2,88(r2)
 8034774:	18800226 	beq	r3,r2,8034780 <tcp_reass+0x2f4>
      return (0);
 8034778:	0005883a 	mov	r2,zero
 803477c:	00003a06 	br	8034868 <tcp_reass+0x3dc>
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
 8034780:	e0bff917 	ldw	r2,-28(fp)
 8034784:	10800217 	ldw	r2,8(r2)
 8034788:	108000d8 	cmpnei	r2,r2,3
 803478c:	1000061e 	bne	r2,zero,80347a8 <tcp_reass+0x31c>
 8034790:	e0bff817 	ldw	r2,-32(fp)
 8034794:	1080028b 	ldhu	r2,10(r2)
 8034798:	10bfffcc 	andi	r2,r2,65535
 803479c:	10000226 	beq	r2,zero,80347a8 <tcp_reass+0x31c>
      return (0);
 80347a0:	0005883a 	mov	r2,zero
 80347a4:	00003006 	br	8034868 <tcp_reass+0x3dc>
      tp->rcv_nxt += ti->ti_len;
 80347a8:	e0bff917 	ldw	r2,-28(fp)
 80347ac:	10c01617 	ldw	r3,88(r2)
 80347b0:	e0bff817 	ldw	r2,-32(fp)
 80347b4:	1080028b 	ldhu	r2,10(r2)
 80347b8:	10bfffcc 	andi	r2,r2,65535
 80347bc:	1887883a 	add	r3,r3,r2
 80347c0:	e0bff917 	ldw	r2,-28(fp)
 80347c4:	10c01615 	stw	r3,88(r2)
      flags = ti->ti_flags & TH_FIN;
 80347c8:	e0bff817 	ldw	r2,-32(fp)
 80347cc:	10800843 	ldbu	r2,33(r2)
 80347d0:	10803fcc 	andi	r2,r2,255
 80347d4:	1080004c 	andi	r2,r2,1
 80347d8:	e0bffa15 	stw	r2,-24(fp)
      remque(ti);
 80347dc:	e13ff817 	ldw	r4,-32(fp)
 80347e0:	802da000 	call	802da00 <remque>
      m = dtom(ti);
 80347e4:	e13ff817 	ldw	r4,-32(fp)
 80347e8:	802d9680 	call	802d968 <dtom>
 80347ec:	e0bffb15 	stw	r2,-20(fp)
      ti = (struct tcpiphdr *)ti->ti_next;
 80347f0:	e0bff817 	ldw	r2,-32(fp)
 80347f4:	10800017 	ldw	r2,0(r2)
 80347f8:	e0bff815 	stw	r2,-32(fp)
      if (so->so_state & SS_CANTRCVMORE)
 80347fc:	e0bffe17 	ldw	r2,-8(fp)
 8034800:	1080088b 	ldhu	r2,34(r2)
 8034804:	10bfffcc 	andi	r2,r2,65535
 8034808:	1080080c 	andi	r2,r2,32
 803480c:	10000326 	beq	r2,zero,803481c <tcp_reass+0x390>
         m_freem (m);
 8034810:	e13ffb17 	ldw	r4,-20(fp)
 8034814:	802d4340 	call	802d434 <m_freem>
 8034818:	00000506 	br	8034830 <tcp_reass+0x3a4>
         sbappend (&so->so_rcv, m);
 803481c:	e0bffe17 	ldw	r2,-8(fp)
 8034820:	10800a04 	addi	r2,r2,40
 8034824:	e17ffb17 	ldw	r5,-20(fp)
 8034828:	1009883a 	mov	r4,r2
 803482c:	80333080 	call	8033308 <sbappend>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
 8034830:	e0fff817 	ldw	r3,-32(fp)
 8034834:	e0bff917 	ldw	r2,-28(fp)
 8034838:	18800526 	beq	r3,r2,8034850 <tcp_reass+0x3c4>
 803483c:	e0bff817 	ldw	r2,-32(fp)
 8034840:	10c00617 	ldw	r3,24(r2)
 8034844:	e0bff917 	ldw	r2,-28(fp)
 8034848:	10801617 	ldw	r2,88(r2)
 803484c:	18bfd626 	beq	r3,r2,80347a8 <tcp_reass+0x31c>
      sorwakeup(so);
 8034850:	e0bffe17 	ldw	r2,-8(fp)
 8034854:	10800a04 	addi	r2,r2,40
 8034858:	100b883a 	mov	r5,r2
 803485c:	e13ffe17 	ldw	r4,-8(fp)
 8034860:	80331580 	call	8033158 <sbwakeup>
   return (flags);
 8034864:	e0bffa17 	ldw	r2,-24(fp)
}
 8034868:	e037883a 	mov	sp,fp
 803486c:	dfc00117 	ldw	ra,4(sp)
 8034870:	df000017 	ldw	fp,0(sp)
 8034874:	dec00204 	addi	sp,sp,8
 8034878:	f800283a 	ret

0803487c <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 803487c:	deffdf04 	addi	sp,sp,-132
 8034880:	dfc02015 	stw	ra,128(sp)
 8034884:	df001f15 	stw	fp,124(sp)
 8034888:	df001f04 	addi	fp,sp,124
 803488c:	e13fe415 	stw	r4,-112(fp)
 8034890:	e17fe315 	stw	r5,-116(fp)
   ip6_addr    ip6_src;
   ip6_addr    ip6_dst;
#endif   /* IP_V6 */
   struct tcpiphdr * ti;
   struct inpcb * inp;
   struct mbuf *  om =  0;
 8034894:	e03ffd15 	stw	zero,-12(fp)
   int   len,  tlen, off;
   struct tcpcb * tp =  0;
 8034898:	e03ffc15 	stw	zero,-16(fp)
   int   tiflags;
   struct socket *   so =  NULL;
 803489c:	e03ffa15 	stw	zero,-24(fp)
   int   todrop,  acked,   ourfinisacked, needoutput  =  0;
 80348a0:	e03ff715 	stw	zero,-36(fp)
   int   dropsocket  =  0;
 80348a4:	e03ff615 	stw	zero,-40(fp)
   long  iss   =  0;
 80348a8:	e03ff515 	stw	zero,-44(fp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 80348ac:	008201b4 	movhi	r2,2054
 80348b0:	10bc6317 	ldw	r2,-3700(r2)
 80348b4:	10c00044 	addi	r3,r2,1
 80348b8:	008201b4 	movhi	r2,2054
 80348bc:	10fc6315 	stw	r3,-3700(r2)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 80348c0:	008201b4 	movhi	r2,2054
 80348c4:	10bc2517 	ldw	r2,-3948(r2)
 80348c8:	10c00044 	addi	r3,r2,1
 80348cc:	008201b4 	movhi	r2,2054
 80348d0:	10fc2515 	stw	r3,-3948(r2)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
 80348d4:	e0bfe417 	ldw	r2,-112(fp)
 80348d8:	10800317 	ldw	r2,12(r2)
 80348dc:	e0bfff15 	stw	r2,-4(fp)
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
 80348e0:	e0bfff17 	ldw	r2,-4(fp)
 80348e4:	10800003 	ldbu	r2,0(r2)
 80348e8:	10803fcc 	andi	r2,r2,255
 80348ec:	108011b0 	cmpltui	r2,r2,70
 80348f0:	1000061e 	bne	r2,zero,803490c <tcp_input+0x90>
      {
         np_stripoptions(pip, (struct mbuf *)m);
 80348f4:	e17fe417 	ldw	r5,-112(fp)
 80348f8:	e13fff17 	ldw	r4,-4(fp)
 80348fc:	802e3540 	call	802e354 <np_stripoptions>
         pip = mtod(m, struct ip *);
 8034900:	e0bfe417 	ldw	r2,-112(fp)
 8034904:	10800317 	ldw	r2,12(r2)
 8034908:	e0bfff15 	stw	r2,-4(fp)
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
 803490c:	e0bfe417 	ldw	r2,-112(fp)
 8034910:	10800217 	ldw	r2,8(r2)
 8034914:	10800a28 	cmpgeui	r2,r2,40
 8034918:	1000061e 	bne	r2,zero,8034934 <tcp_input+0xb8>
      {
         tcpstat.tcps_rcvshort++;
 803491c:	008201b4 	movhi	r2,2054
 8034920:	10bc6817 	ldw	r2,-3680(r2)
 8034924:	10c00044 	addi	r3,r2,1
 8034928:	008201b4 	movhi	r2,2054
 803492c:	10fc6815 	stw	r3,-3680(r2)
         return;
 8034930:	00085306 	br	8036a80 <tcp_input+0x2204>
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
 8034934:	e0bfff17 	ldw	r2,-4(fp)
 8034938:	1080008b 	ldhu	r2,2(r2)
 803493c:	10bfffcc 	andi	r2,r2,65535
 8034940:	e0bff115 	stw	r2,-60(fp)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
 8034944:	e0bfe417 	ldw	r2,-112(fp)
 8034948:	10800317 	ldw	r2,12(r2)
 803494c:	e0bff015 	stw	r2,-64(fp)
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
 8034950:	e0bfe417 	ldw	r2,-112(fp)
 8034954:	10800117 	ldw	r2,4(r2)
 8034958:	10800117 	ldw	r2,4(r2)
 803495c:	e0fff017 	ldw	r3,-64(fp)
 8034960:	1880032e 	bgeu	r3,r2,8034970 <tcp_input+0xf4>
      {
         panic("tcp_input");
 8034964:	01020174 	movhi	r4,2053
 8034968:	210c2a04 	addi	r4,r4,12456
 803496c:	8027fe00 	call	8027fe0 <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 8034970:	e0bff017 	ldw	r2,-64(fp)
 8034974:	10800803 	ldbu	r2,32(r2)
 8034978:	10803fcc 	andi	r2,r2,255
 803497c:	1004d13a 	srli	r2,r2,4
 8034980:	10803fcc 	andi	r2,r2,255
 8034984:	100490ba 	slli	r2,r2,2
 8034988:	e0bfef15 	stw	r2,-68(fp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
 803498c:	e0bfef17 	ldw	r2,-68(fp)
 8034990:	10800530 	cmpltui	r2,r2,20
 8034994:	1000031e 	bne	r2,zero,80349a4 <tcp_input+0x128>
 8034998:	e0bfef17 	ldw	r2,-68(fp)
 803499c:	e0fff117 	ldw	r3,-60(fp)
 80349a0:	18800d0e 	bge	r3,r2,80349d8 <tcp_input+0x15c>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 80349a4:	008201b4 	movhi	r2,2054
 80349a8:	10bc6717 	ldw	r2,-3684(r2)
 80349ac:	10c00044 	addi	r3,r2,1
 80349b0:	008201b4 	movhi	r2,2054
 80349b4:	10fc6715 	stw	r3,-3684(r2)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 80349b8:	008201b4 	movhi	r2,2054
 80349bc:	10bc2917 	ldw	r2,-3932(r2)
 80349c0:	10c00044 	addi	r3,r2,1
 80349c4:	008201b4 	movhi	r2,2054
 80349c8:	10fc2915 	stw	r3,-3932(r2)
      GOTO_DROP;
 80349cc:	00805784 	movi	r2,350
 80349d0:	d0a0ad15 	stw	r2,-32076(gp)
 80349d4:	00081606 	br	8036a30 <tcp_input+0x21b4>
   }
   tlen -= (int)off;
 80349d8:	e0fff117 	ldw	r3,-60(fp)
 80349dc:	e0bfef17 	ldw	r2,-68(fp)
 80349e0:	1885c83a 	sub	r2,r3,r2
 80349e4:	e0bff115 	stw	r2,-60(fp)
   ti->ti_len = (u_short)tlen;
 80349e8:	e0bff117 	ldw	r2,-60(fp)
 80349ec:	1007883a 	mov	r3,r2
 80349f0:	e0bff017 	ldw	r2,-64(fp)
 80349f4:	10c0028d 	sth	r3,10(r2)
   if (off > sizeof (struct tcphdr)) 
 80349f8:	e0bfef17 	ldw	r2,-68(fp)
 80349fc:	10800570 	cmpltui	r2,r2,21
 8034a00:	1000331e 	bne	r2,zero,8034ad0 <tcp_input+0x254>
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
 8034a04:	e0bfef17 	ldw	r2,-68(fp)
 8034a08:	10bffb04 	addi	r2,r2,-20
 8034a0c:	e0bfee15 	stw	r2,-72(fp)
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
 8034a10:	e17fee17 	ldw	r5,-72(fp)
 8034a14:	01000044 	movi	r4,1
 8034a18:	802d1a80 	call	802d1a8 <m_getnbuf>
 8034a1c:	e0bffd15 	stw	r2,-12(fp)
      if (om == 0)
 8034a20:	e0bffd17 	ldw	r2,-12(fp)
 8034a24:	1000031e 	bne	r2,zero,8034a34 <tcp_input+0x1b8>
         GOTO_DROP;
 8034a28:	00805a84 	movi	r2,362
 8034a2c:	d0a0ad15 	stw	r2,-32076(gp)
 8034a30:	0007ff06 	br	8036a30 <tcp_input+0x21b4>
      om->m_len = olen;       /* set mbuf length */
 8034a34:	e0ffee17 	ldw	r3,-72(fp)
 8034a38:	e0bffd17 	ldw	r2,-12(fp)
 8034a3c:	10c00215 	stw	r3,8(r2)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 8034a40:	e0bfe417 	ldw	r2,-112(fp)
 8034a44:	10800117 	ldw	r2,4(r2)
 8034a48:	1080080b 	ldhu	r2,32(r2)
 8034a4c:	10ffffcc 	andi	r3,r2,65535
 8034a50:	00b76194 	movui	r2,56710
 8034a54:	1880051e 	bne	r3,r2,8034a6c <tcp_input+0x1f0>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
 8034a58:	e0bfe417 	ldw	r2,-112(fp)
 8034a5c:	10800317 	ldw	r2,12(r2)
 8034a60:	10800504 	addi	r2,r2,20
 8034a64:	e0bff415 	stw	r2,-48(fp)
 8034a68:	00000406 	br	8034a7c <tcp_input+0x200>
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
 8034a6c:	e0bfe417 	ldw	r2,-112(fp)
 8034a70:	10800317 	ldw	r2,12(r2)
 8034a74:	10800a04 	addi	r2,r2,40
 8034a78:	e0bff415 	stw	r2,-48(fp)
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
 8034a7c:	e0bffd17 	ldw	r2,-12(fp)
 8034a80:	10800317 	ldw	r2,12(r2)
 8034a84:	e0ffee17 	ldw	r3,-72(fp)
 8034a88:	180d883a 	mov	r6,r3
 8034a8c:	e17ff417 	ldw	r5,-48(fp)
 8034a90:	1009883a 	mov	r4,r2
 8034a94:	8002ea40 	call	8002ea4 <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 8034a98:	e0bfe417 	ldw	r2,-112(fp)
 8034a9c:	10c00317 	ldw	r3,12(r2)
 8034aa0:	e0bffd17 	ldw	r2,-12(fp)
 8034aa4:	10800217 	ldw	r2,8(r2)
 8034aa8:	1887883a 	add	r3,r3,r2
 8034aac:	e0bfe417 	ldw	r2,-112(fp)
 8034ab0:	10c00315 	stw	r3,12(r2)
      m->m_len -= om->m_len;
 8034ab4:	e0bfe417 	ldw	r2,-112(fp)
 8034ab8:	10c00217 	ldw	r3,8(r2)
 8034abc:	e0bffd17 	ldw	r2,-12(fp)
 8034ac0:	10800217 	ldw	r2,8(r2)
 8034ac4:	1887c83a 	sub	r3,r3,r2
 8034ac8:	e0bfe417 	ldw	r2,-112(fp)
 8034acc:	10c00215 	stw	r3,8(r2)
   }
   tiflags = ti->ti_flags;
 8034ad0:	e0bff017 	ldw	r2,-64(fp)
 8034ad4:	10800843 	ldbu	r2,33(r2)
 8034ad8:	10803fcc 	andi	r2,r2,255
 8034adc:	e0bffb15 	stw	r2,-20(fp)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 8034ae0:	e0bff017 	ldw	r2,-64(fp)
 8034ae4:	10800617 	ldw	r2,24(r2)
 8034ae8:	1006d63a 	srli	r3,r2,24
 8034aec:	e0bff017 	ldw	r2,-64(fp)
 8034af0:	10800617 	ldw	r2,24(r2)
 8034af4:	1004d23a 	srli	r2,r2,8
 8034af8:	10bfc00c 	andi	r2,r2,65280
 8034afc:	1886b03a 	or	r3,r3,r2
 8034b00:	e0bff017 	ldw	r2,-64(fp)
 8034b04:	10800617 	ldw	r2,24(r2)
 8034b08:	1004923a 	slli	r2,r2,8
 8034b0c:	10803fec 	andhi	r2,r2,255
 8034b10:	1886b03a 	or	r3,r3,r2
 8034b14:	e0bff017 	ldw	r2,-64(fp)
 8034b18:	10800617 	ldw	r2,24(r2)
 8034b1c:	1004963a 	slli	r2,r2,24
 8034b20:	1886b03a 	or	r3,r3,r2
 8034b24:	e0bff017 	ldw	r2,-64(fp)
 8034b28:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = ntohl(ti->ti_ack);
 8034b2c:	e0bff017 	ldw	r2,-64(fp)
 8034b30:	10800717 	ldw	r2,28(r2)
 8034b34:	1006d63a 	srli	r3,r2,24
 8034b38:	e0bff017 	ldw	r2,-64(fp)
 8034b3c:	10800717 	ldw	r2,28(r2)
 8034b40:	1004d23a 	srli	r2,r2,8
 8034b44:	10bfc00c 	andi	r2,r2,65280
 8034b48:	1886b03a 	or	r3,r3,r2
 8034b4c:	e0bff017 	ldw	r2,-64(fp)
 8034b50:	10800717 	ldw	r2,28(r2)
 8034b54:	1004923a 	slli	r2,r2,8
 8034b58:	10803fec 	andhi	r2,r2,255
 8034b5c:	1886b03a 	or	r3,r3,r2
 8034b60:	e0bff017 	ldw	r2,-64(fp)
 8034b64:	10800717 	ldw	r2,28(r2)
 8034b68:	1004963a 	slli	r2,r2,24
 8034b6c:	1886b03a 	or	r3,r3,r2
 8034b70:	e0bff017 	ldw	r2,-64(fp)
 8034b74:	10c00715 	stw	r3,28(r2)
   ti->ti_urp = ntohs(ti->ti_urp);
 8034b78:	e0bff017 	ldw	r2,-64(fp)
 8034b7c:	1080098b 	ldhu	r2,38(r2)
 8034b80:	10bfffcc 	andi	r2,r2,65535
 8034b84:	1004d23a 	srli	r2,r2,8
 8034b88:	1007883a 	mov	r3,r2
 8034b8c:	e0bff017 	ldw	r2,-64(fp)
 8034b90:	1080098b 	ldhu	r2,38(r2)
 8034b94:	10bfffcc 	andi	r2,r2,65535
 8034b98:	1004923a 	slli	r2,r2,8
 8034b9c:	1884b03a 	or	r2,r3,r2
 8034ba0:	1007883a 	mov	r3,r2
 8034ba4:	e0bff017 	ldw	r2,-64(fp)
 8034ba8:	10c0098d 	sth	r3,38(r2)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
 8034bac:	e0bfe417 	ldw	r2,-112(fp)
 8034bb0:	10800117 	ldw	r2,4(r2)
 8034bb4:	1080080b 	ldhu	r2,32(r2)
 8034bb8:	10bfffcc 	andi	r2,r2,65535
 8034bbc:	10800218 	cmpnei	r2,r2,8
 8034bc0:	1000221e 	bne	r2,zero,8034c4c <tcp_input+0x3d0>
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 8034bc4:	e0bfe417 	ldw	r2,-112(fp)
 8034bc8:	10800317 	ldw	r2,12(r2)
 8034bcc:	10c00a04 	addi	r3,r2,40
 8034bd0:	e0bfe417 	ldw	r2,-112(fp)
 8034bd4:	10c00315 	stw	r3,12(r2)
      m->m_len -= 40;
 8034bd8:	e0bfe417 	ldw	r2,-112(fp)
 8034bdc:	10800217 	ldw	r2,8(r2)
 8034be0:	10fff604 	addi	r3,r2,-40
 8034be4:	e0bfe417 	ldw	r2,-112(fp)
 8034be8:	10c00215 	stw	r3,8(r2)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 8034bec:	e0bff017 	ldw	r2,-64(fp)
 8034bf0:	11000317 	ldw	r4,12(r2)
 8034bf4:	e0bff017 	ldw	r2,-64(fp)
 8034bf8:	1080050b 	ldhu	r2,20(r2)
 8034bfc:	117fffcc 	andi	r5,r2,65535
 8034c00:	e0bff017 	ldw	r2,-64(fp)
 8034c04:	11800417 	ldw	r6,16(r2)
         ti->ti_dst.s_addr, ti->ti_dport, INPLOOKUP_WILDCARD);
 8034c08:	e0bff017 	ldw	r2,-64(fp)
 8034c0c:	1080058b 	ldhu	r2,22(r2)
      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 8034c10:	10bfffcc 	andi	r2,r2,65535
 8034c14:	00c00044 	movi	r3,1
 8034c18:	d8c00115 	stw	r3,4(sp)
 8034c1c:	d8800015 	stw	r2,0(sp)
 8034c20:	300f883a 	mov	r7,r6
 8034c24:	280d883a 	mov	r6,r5
 8034c28:	200b883a 	mov	r5,r4
 8034c2c:	010201b4 	movhi	r4,2054
 8034c30:	213c3f04 	addi	r4,r4,-3844
 8034c34:	804709c0 	call	804709c <in_pcblookup>
 8034c38:	e0bffe15 	stw	r2,-8(fp)
      break;
 8034c3c:	0001883a 	nop
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
 8034c40:	e0bffe17 	ldw	r2,-8(fp)
 8034c44:	1000061e 	bne	r2,zero,8034c60 <tcp_input+0x3e4>
 8034c48:	00000206 	br	8034c54 <tcp_input+0x3d8>
      dtrap();
 8034c4c:	802c3fc0 	call	802c3fc <dtrap>
      return;
 8034c50:	00078b06 	br	8036a80 <tcp_input+0x2204>
      GOTO_DROPWITHRESET;
 8034c54:	00806b04 	movi	r2,428
 8034c58:	d0a0ad15 	stw	r2,-32076(gp)
 8034c5c:	00073506 	br	8036934 <tcp_input+0x20b8>
   tp = intotcpcb (inp);
 8034c60:	e0bffe17 	ldw	r2,-8(fp)
 8034c64:	10800917 	ldw	r2,36(r2)
 8034c68:	e0bffc15 	stw	r2,-16(fp)
   if (tp == 0)
 8034c6c:	e0bffc17 	ldw	r2,-16(fp)
 8034c70:	1000031e 	bne	r2,zero,8034c80 <tcp_input+0x404>
      GOTO_DROPWITHRESET;
 8034c74:	00806bc4 	movi	r2,431
 8034c78:	d0a0ad15 	stw	r2,-32076(gp)
 8034c7c:	00072d06 	br	8036934 <tcp_input+0x20b8>
   if (tp->t_state == TCPS_CLOSED)
 8034c80:	e0bffc17 	ldw	r2,-16(fp)
 8034c84:	10800217 	ldw	r2,8(r2)
 8034c88:	1000031e 	bne	r2,zero,8034c98 <tcp_input+0x41c>
      GOTO_DROP;
 8034c8c:	00806c44 	movi	r2,433
 8034c90:	d0a0ad15 	stw	r2,-32076(gp)
 8034c94:	00076606 	br	8036a30 <tcp_input+0x21b4>
   so = inp->inp_socket;
 8034c98:	e0bffe17 	ldw	r2,-8(fp)
 8034c9c:	10800817 	ldw	r2,32(r2)
 8034ca0:	e0bffa15 	stw	r2,-24(fp)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 8034ca4:	e0bff017 	ldw	r2,-64(fp)
 8034ca8:	1080088b 	ldhu	r2,34(r2)
 8034cac:	10bfffcc 	andi	r2,r2,65535
 8034cb0:	1004d23a 	srli	r2,r2,8
 8034cb4:	10bfffcc 	andi	r2,r2,65535
 8034cb8:	10c03fcc 	andi	r3,r2,255
 8034cbc:	e0bff017 	ldw	r2,-64(fp)
 8034cc0:	1080088b 	ldhu	r2,34(r2)
 8034cc4:	10bfffcc 	andi	r2,r2,65535
 8034cc8:	1004923a 	slli	r2,r2,8
 8034ccc:	10bfffcc 	andi	r2,r2,65535
 8034cd0:	1884b03a 	or	r2,r3,r2
 8034cd4:	e0bfed15 	stw	r2,-76(fp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
 8034cd8:	e0bffa17 	ldw	r2,-24(fp)
 8034cdc:	10800417 	ldw	r2,16(r2)
 8034ce0:	1080008c 	andi	r2,r2,2
 8034ce4:	10002c26 	beq	r2,zero,8034d98 <tcp_input+0x51c>
   {
      so = sonewconn(so);
 8034ce8:	e13ffa17 	ldw	r4,-24(fp)
 8034cec:	8032c540 	call	8032c54 <sonewconn>
 8034cf0:	e0bffa15 	stw	r2,-24(fp)
      if (so == 0)
 8034cf4:	e0bffa17 	ldw	r2,-24(fp)
 8034cf8:	1000031e 	bne	r2,zero,8034d08 <tcp_input+0x48c>
         GOTO_DROP;
 8034cfc:	00807344 	movi	r2,461
 8034d00:	d0a0ad15 	stw	r2,-32076(gp)
 8034d04:	00074a06 	br	8036a30 <tcp_input+0x21b4>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 8034d08:	e0bff617 	ldw	r2,-40(fp)
 8034d0c:	10800044 	addi	r2,r2,1
 8034d10:	e0bff615 	stw	r2,-40(fp)

      inp = (struct inpcb *)so->so_pcb;
 8034d14:	e0bffa17 	ldw	r2,-24(fp)
 8034d18:	10800117 	ldw	r2,4(r2)
 8034d1c:	e0bffe15 	stw	r2,-8(fp)
      inp->ifp = ifp;      /* save iface to peer */
 8034d20:	e0bffe17 	ldw	r2,-8(fp)
 8034d24:	e0ffe317 	ldw	r3,-116(fp)
 8034d28:	10c00a15 	stw	r3,40(r2)

      switch(so->so_domain)
 8034d2c:	e0bffa17 	ldw	r2,-24(fp)
 8034d30:	10800517 	ldw	r2,20(r2)
 8034d34:	10800098 	cmpnei	r2,r2,2
 8034d38:	10000d1e 	bne	r2,zero,8034d70 <tcp_input+0x4f4>
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
 8034d3c:	e0bffe17 	ldw	r2,-8(fp)
 8034d40:	e0fff017 	ldw	r3,-64(fp)
 8034d44:	18c00417 	ldw	r3,16(r3)
 8034d48:	10c00415 	stw	r3,16(r2)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 8034d4c:	e0bfe317 	ldw	r2,-116(fp)
 8034d50:	10c00917 	ldw	r3,36(r2)
 8034d54:	e0bfe317 	ldw	r2,-116(fp)
 8034d58:	10800817 	ldw	r2,32(r2)
 8034d5c:	10800a04 	addi	r2,r2,40
 8034d60:	1887c83a 	sub	r3,r3,r2
 8034d64:	e0bffe17 	ldw	r2,-8(fp)
 8034d68:	10c00615 	stw	r3,24(r2)
#endif   /* IP_PMTU */
         break;
 8034d6c:	0001883a 	nop
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
 8034d70:	e0bff017 	ldw	r2,-64(fp)
 8034d74:	10c0058b 	ldhu	r3,22(r2)
 8034d78:	e0bffe17 	ldw	r2,-8(fp)
 8034d7c:	10c0078d 	sth	r3,30(r2)
      tp = intotcpcb(inp);
 8034d80:	e0bffe17 	ldw	r2,-8(fp)
 8034d84:	10800917 	ldw	r2,36(r2)
 8034d88:	e0bffc15 	stw	r2,-16(fp)
      tp->t_state = TCPS_LISTEN;
 8034d8c:	e0bffc17 	ldw	r2,-16(fp)
 8034d90:	00c00044 	movi	r3,1
 8034d94:	10c00215 	stw	r3,8(r2)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
 8034d98:	e0bffc17 	ldw	r2,-16(fp)
 8034d9c:	10001d15 	stw	zero,116(r2)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
 8034da0:	d0e03a17 	ldw	r3,-32536(gp)
 8034da4:	e0bffc17 	ldw	r2,-16(fp)
 8034da8:	10c00515 	stw	r3,20(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
 8034dac:	e0bffd17 	ldw	r2,-12(fp)
 8034db0:	10000926 	beq	r2,zero,8034dd8 <tcp_input+0x55c>
 8034db4:	e0bffc17 	ldw	r2,-16(fp)
 8034db8:	10800217 	ldw	r2,8(r2)
 8034dbc:	10800060 	cmpeqi	r2,r2,1
 8034dc0:	1000051e 	bne	r2,zero,8034dd8 <tcp_input+0x55c>
   {
      tcp_dooptions(tp, om, ti);
 8034dc4:	e1bff017 	ldw	r6,-64(fp)
 8034dc8:	e17ffd17 	ldw	r5,-12(fp)
 8034dcc:	e13ffc17 	ldw	r4,-16(fp)
 8034dd0:	8036a940 	call	8036a94 <tcp_dooptions>
      om = 0;
 8034dd4:	e03ffd15 	stw	zero,-12(fp)
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
 8034dd8:	e0bff017 	ldw	r2,-64(fp)
 8034ddc:	10c00717 	ldw	r3,28(r2)
 8034de0:	e0bffc17 	ldw	r2,-16(fp)
 8034de4:	10800e17 	ldw	r2,56(r2)
 8034de8:	1885c83a 	sub	r2,r3,r2
 8034dec:	e0bfec15 	stw	r2,-80(fp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 8034df0:	e0bffa17 	ldw	r2,-24(fp)
 8034df4:	10800b17 	ldw	r2,44(r2)
 8034df8:	1007883a 	mov	r3,r2
 8034dfc:	e0bffa17 	ldw	r2,-24(fp)
 8034e00:	10800a17 	ldw	r2,40(r2)
 8034e04:	1885c83a 	sub	r2,r3,r2
 8034e08:	10000616 	blt	r2,zero,8034e24 <tcp_input+0x5a8>
 8034e0c:	e0bffa17 	ldw	r2,-24(fp)
 8034e10:	10c00b17 	ldw	r3,44(r2)
 8034e14:	e0bffa17 	ldw	r2,-24(fp)
 8034e18:	10800a17 	ldw	r2,40(r2)
 8034e1c:	1885c83a 	sub	r2,r3,r2
 8034e20:	00000106 	br	8034e28 <tcp_input+0x5ac>
 8034e24:	0005883a 	mov	r2,zero
 8034e28:	e0bff315 	stw	r2,-52(fp)
      if (win < 0)
 8034e2c:	e0bff317 	ldw	r2,-52(fp)
 8034e30:	1000010e 	bge	r2,zero,8034e38 <tcp_input+0x5bc>
         win = 0;
 8034e34:	e03ff315 	stw	zero,-52(fp)
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 8034e38:	e0bffc17 	ldw	r2,-16(fp)
 8034e3c:	10c01917 	ldw	r3,100(r2)
 8034e40:	e0bffc17 	ldw	r2,-16(fp)
 8034e44:	10801617 	ldw	r2,88(r2)
 8034e48:	1885c83a 	sub	r2,r3,r2
 8034e4c:	e0fff317 	ldw	r3,-52(fp)
 8034e50:	10c0012e 	bgeu	r2,r3,8034e58 <tcp_input+0x5dc>
 8034e54:	1805883a 	mov	r2,r3
 8034e58:	e0fffc17 	ldw	r3,-16(fp)
 8034e5c:	18801515 	stw	r2,84(r3)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 8034e60:	e0bffc17 	ldw	r2,-16(fp)
 8034e64:	10800217 	ldw	r2,8(r2)
 8034e68:	10800118 	cmpnei	r2,r2,4
 8034e6c:	1000f41e 	bne	r2,zero,8035240 <tcp_input+0x9c4>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
 8034e70:	e0bffb17 	ldw	r2,-20(fp)
 8034e74:	10800dcc 	andi	r2,r2,55
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 8034e78:	10800418 	cmpnei	r2,r2,16
 8034e7c:	1000f01e 	bne	r2,zero,8035240 <tcp_input+0x9c4>
       (ti->ti_seq == tp->rcv_nxt) &&
 8034e80:	e0bff017 	ldw	r2,-64(fp)
 8034e84:	10c00617 	ldw	r3,24(r2)
 8034e88:	e0bffc17 	ldw	r2,-16(fp)
 8034e8c:	10801617 	ldw	r2,88(r2)
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
 8034e90:	1880eb1e 	bne	r3,r2,8035240 <tcp_input+0x9c4>
       (ti->ti_seq == tp->rcv_nxt) &&
 8034e94:	e0bfed17 	ldw	r2,-76(fp)
 8034e98:	1000e926 	beq	r2,zero,8035240 <tcp_input+0x9c4>
       (rx_win && rx_win == tp->snd_wnd) &&
 8034e9c:	e0bffc17 	ldw	r2,-16(fp)
 8034ea0:	10801417 	ldw	r2,80(r2)
 8034ea4:	e0ffed17 	ldw	r3,-76(fp)
 8034ea8:	1880e51e 	bne	r3,r2,8035240 <tcp_input+0x9c4>
       (tp->snd_nxt == tp->snd_max))
 8034eac:	e0bffc17 	ldw	r2,-16(fp)
 8034eb0:	10c00f17 	ldw	r3,60(r2)
 8034eb4:	e0bffc17 	ldw	r2,-16(fp)
 8034eb8:	10801a17 	ldw	r2,104(r2)
       (rx_win && rx_win == tp->snd_wnd) &&
 8034ebc:	1880e01e 	bne	r3,r2,8035240 <tcp_input+0x9c4>
   {
      if (ti->ti_len == 0)
 8034ec0:	e0bff017 	ldw	r2,-64(fp)
 8034ec4:	1080028b 	ldhu	r2,10(r2)
 8034ec8:	10bfffcc 	andi	r2,r2,65535
 8034ecc:	10005b1e 	bne	r2,zero,803503c <tcp_input+0x7c0>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 8034ed0:	e0bff017 	ldw	r2,-64(fp)
 8034ed4:	10c00717 	ldw	r3,28(r2)
 8034ed8:	e0bffc17 	ldw	r2,-16(fp)
 8034edc:	10800e17 	ldw	r2,56(r2)
 8034ee0:	1885c83a 	sub	r2,r3,r2
 8034ee4:	0080d60e 	bge	zero,r2,8035240 <tcp_input+0x9c4>
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
 8034ee8:	e0bff017 	ldw	r2,-64(fp)
 8034eec:	10c00717 	ldw	r3,28(r2)
 8034ef0:	e0bffc17 	ldw	r2,-16(fp)
 8034ef4:	10801a17 	ldw	r2,104(r2)
 8034ef8:	1885c83a 	sub	r2,r3,r2
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 8034efc:	0080d016 	blt	zero,r2,8035240 <tcp_input+0x9c4>
             tp->snd_cwnd >= tp->snd_wnd) 
 8034f00:	e0bffc17 	ldw	r2,-16(fp)
 8034f04:	10c01b17 	ldw	r3,108(r2)
 8034f08:	e0bffc17 	ldw	r2,-16(fp)
 8034f0c:	10801417 	ldw	r2,80(r2)
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
 8034f10:	1880cb36 	bltu	r3,r2,8035240 <tcp_input+0x9c4>
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
 8034f14:	008201b4 	movhi	r2,2054
 8034f18:	10bc7f17 	ldw	r2,-3588(r2)
 8034f1c:	10c00044 	addi	r3,r2,1
 8034f20:	008201b4 	movhi	r2,2054
 8034f24:	10fc7f15 	stw	r3,-3588(r2)
            if (tp->t_rttick && 
 8034f28:	e0bffc17 	ldw	r2,-16(fp)
 8034f2c:	10801e17 	ldw	r2,120(r2)
 8034f30:	10000826 	beq	r2,zero,8034f54 <tcp_input+0x6d8>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
 8034f34:	e0bff017 	ldw	r2,-64(fp)
 8034f38:	10c00717 	ldw	r3,28(r2)
 8034f3c:	e0bffc17 	ldw	r2,-16(fp)
 8034f40:	10801f17 	ldw	r2,124(r2)
 8034f44:	1885c83a 	sub	r2,r3,r2
            if (tp->t_rttick && 
 8034f48:	0080020e 	bge	zero,r2,8034f54 <tcp_input+0x6d8>
            {
               tcp_xmit_timer(tp);
 8034f4c:	e13ffc17 	ldw	r4,-16(fp)
 8034f50:	8036d480 	call	8036d48 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
 8034f54:	008201b4 	movhi	r2,2054
 8034f58:	10bc7517 	ldw	r2,-3628(r2)
 8034f5c:	10c00044 	addi	r3,r2,1
 8034f60:	008201b4 	movhi	r2,2054
 8034f64:	10fc7515 	stw	r3,-3628(r2)
            tcpstat.tcps_rcvackbyte += acked;
 8034f68:	008201b4 	movhi	r2,2054
 8034f6c:	10fc7617 	ldw	r3,-3624(r2)
 8034f70:	e0bfec17 	ldw	r2,-80(fp)
 8034f74:	1887883a 	add	r3,r3,r2
 8034f78:	008201b4 	movhi	r2,2054
 8034f7c:	10fc7615 	stw	r3,-3624(r2)
            sbdrop(&so->so_snd, acked);
 8034f80:	e0bffa17 	ldw	r2,-24(fp)
 8034f84:	10801204 	addi	r2,r2,72
 8034f88:	e17fec17 	ldw	r5,-80(fp)
 8034f8c:	1009883a 	mov	r4,r2
 8034f90:	80338c00 	call	80338c0 <sbdrop>
            tp->snd_una = ti->ti_ack;
 8034f94:	e0bff017 	ldw	r2,-64(fp)
 8034f98:	10c00717 	ldw	r3,28(r2)
 8034f9c:	e0bffc17 	ldw	r2,-16(fp)
 8034fa0:	10c00e15 	stw	r3,56(r2)
            m_freem(m);
 8034fa4:	e13fe417 	ldw	r4,-112(fp)
 8034fa8:	802d4340 	call	802d434 <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
 8034fac:	e0bffc17 	ldw	r2,-16(fp)
 8034fb0:	10c00e17 	ldw	r3,56(r2)
 8034fb4:	e0bffc17 	ldw	r2,-16(fp)
 8034fb8:	10801a17 	ldw	r2,104(r2)
 8034fbc:	1880031e 	bne	r3,r2,8034fcc <tcp_input+0x750>
               tp->t_timer[TCPT_REXMT] = 0;
 8034fc0:	e0bffc17 	ldw	r2,-16(fp)
 8034fc4:	10000315 	stw	zero,12(r2)
 8034fc8:	00000706 	br	8034fe8 <tcp_input+0x76c>
            else if (tp->t_timer[TCPT_PERSIST] == 0)
 8034fcc:	e0bffc17 	ldw	r2,-16(fp)
 8034fd0:	10800417 	ldw	r2,16(r2)
 8034fd4:	1000041e 	bne	r2,zero,8034fe8 <tcp_input+0x76c>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 8034fd8:	e0bffc17 	ldw	r2,-16(fp)
 8034fdc:	10c00817 	ldw	r3,32(r2)
 8034fe0:	e0bffc17 	ldw	r2,-16(fp)
 8034fe4:	10c00315 	stw	r3,12(r2)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 8034fe8:	e0bffa17 	ldw	r2,-24(fp)
 8034fec:	1080190b 	ldhu	r2,100(r2)
 8034ff0:	10bfffcc 	andi	r2,r2,65535
 8034ff4:	1080030c 	andi	r2,r2,12
 8034ff8:	10000526 	beq	r2,zero,8035010 <tcp_input+0x794>
               sowwakeup(so);
 8034ffc:	e0bffa17 	ldw	r2,-24(fp)
 8035000:	10801204 	addi	r2,r2,72
 8035004:	100b883a 	mov	r5,r2
 8035008:	e13ffa17 	ldw	r4,-24(fp)
 803500c:	80331580 	call	8033158 <sbwakeup>

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
 8035010:	e0bffa17 	ldw	r2,-24(fp)
 8035014:	10801217 	ldw	r2,72(r2)
 8035018:	e0fffc17 	ldw	r3,-16(fp)
 803501c:	19000f17 	ldw	r4,60(r3)
 8035020:	e0fffc17 	ldw	r3,-16(fp)
 8035024:	18c00e17 	ldw	r3,56(r3)
 8035028:	20c7c83a 	sub	r3,r4,r3
 803502c:	18868b2e 	bgeu	r3,r2,8036a5c <tcp_input+0x21e0>
               (void) tcp_output(tp);
 8035030:	e13ffc17 	ldw	r4,-16(fp)
 8035034:	80370c40 	call	80370c4 <tcp_output>
            return;
 8035038:	00068806 	br	8036a5c <tcp_input+0x21e0>
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
 803503c:	e0bff017 	ldw	r2,-64(fp)
 8035040:	10c00717 	ldw	r3,28(r2)
 8035044:	e0bffc17 	ldw	r2,-16(fp)
 8035048:	10800e17 	ldw	r2,56(r2)
 803504c:	18807c1e 	bne	r3,r2,8035240 <tcp_input+0x9c4>
          tp->seg_next == (struct tcpiphdr *)tp &&
 8035050:	e0bffc17 	ldw	r2,-16(fp)
 8035054:	10800017 	ldw	r2,0(r2)
      else if (ti->ti_ack == tp->snd_una &&
 8035058:	e0fffc17 	ldw	r3,-16(fp)
 803505c:	1880781e 	bne	r3,r2,8035240 <tcp_input+0x9c4>
          ti->ti_len <= sbspace(&so->so_rcv))
 8035060:	e0bff017 	ldw	r2,-64(fp)
 8035064:	1080028b 	ldhu	r2,10(r2)
 8035068:	10ffffcc 	andi	r3,r2,65535
 803506c:	e0bffa17 	ldw	r2,-24(fp)
 8035070:	10800b17 	ldw	r2,44(r2)
 8035074:	1009883a 	mov	r4,r2
 8035078:	e0bffa17 	ldw	r2,-24(fp)
 803507c:	10800a17 	ldw	r2,40(r2)
 8035080:	2085c83a 	sub	r2,r4,r2
 8035084:	10000616 	blt	r2,zero,80350a0 <tcp_input+0x824>
 8035088:	e0bffa17 	ldw	r2,-24(fp)
 803508c:	11000b17 	ldw	r4,44(r2)
 8035090:	e0bffa17 	ldw	r2,-24(fp)
 8035094:	10800a17 	ldw	r2,40(r2)
 8035098:	2085c83a 	sub	r2,r4,r2
 803509c:	00000106 	br	80350a4 <tcp_input+0x828>
 80350a0:	0005883a 	mov	r2,zero
          tp->seg_next == (struct tcpiphdr *)tp &&
 80350a4:	10c06636 	bltu	r2,r3,8035240 <tcp_input+0x9c4>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
 80350a8:	e0bffc17 	ldw	r2,-16(fp)
 80350ac:	10801517 	ldw	r2,84(r2)
 80350b0:	10000a1e 	bne	r2,zero,80350dc <tcp_input+0x860>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
 80350b4:	008201b4 	movhi	r2,2054
 80350b8:	10bc7217 	ldw	r2,-3640(r2)
 80350bc:	10c00044 	addi	r3,r2,1
 80350c0:	008201b4 	movhi	r2,2054
 80350c4:	10fc7215 	stw	r3,-3640(r2)
            m_freem (m);      /* free the received mbuf */
 80350c8:	e13fe417 	ldw	r4,-112(fp)
 80350cc:	802d4340 	call	802d434 <m_freem>
            tcp_output(tp);   /* send the ack now... */
 80350d0:	e13ffc17 	ldw	r4,-16(fp)
 80350d4:	80370c40 	call	80370c4 <tcp_output>
            return;
 80350d8:	00066906 	br	8036a80 <tcp_input+0x2204>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
 80350dc:	008201b4 	movhi	r2,2054
 80350e0:	10bc8017 	ldw	r2,-3584(r2)
 80350e4:	10c00044 	addi	r3,r2,1
 80350e8:	008201b4 	movhi	r2,2054
 80350ec:	10fc8015 	stw	r3,-3584(r2)
         tp->rcv_nxt += ti->ti_len;
 80350f0:	e0bffc17 	ldw	r2,-16(fp)
 80350f4:	10c01617 	ldw	r3,88(r2)
 80350f8:	e0bff017 	ldw	r2,-64(fp)
 80350fc:	1080028b 	ldhu	r2,10(r2)
 8035100:	10bfffcc 	andi	r2,r2,65535
 8035104:	1887883a 	add	r3,r3,r2
 8035108:	e0bffc17 	ldw	r2,-16(fp)
 803510c:	10c01615 	stw	r3,88(r2)
         tcpstat.tcps_rcvpack++;
 8035110:	008201b4 	movhi	r2,2054
 8035114:	10bc6417 	ldw	r2,-3696(r2)
 8035118:	10c00044 	addi	r3,r2,1
 803511c:	008201b4 	movhi	r2,2054
 8035120:	10fc6415 	stw	r3,-3696(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 8035124:	008201b4 	movhi	r2,2054
 8035128:	10fc6517 	ldw	r3,-3692(r2)
 803512c:	e0bff017 	ldw	r2,-64(fp)
 8035130:	1080028b 	ldhu	r2,10(r2)
 8035134:	10bfffcc 	andi	r2,r2,65535
 8035138:	1887883a 	add	r3,r3,r2
 803513c:	008201b4 	movhi	r2,2054
 8035140:	10fc6515 	stw	r3,-3692(r2)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 8035144:	e0bffa17 	ldw	r2,-24(fp)
 8035148:	10800a04 	addi	r2,r2,40
 803514c:	e17fe417 	ldw	r5,-112(fp)
 8035150:	1009883a 	mov	r4,r2
 8035154:	80333080 	call	8033308 <sbappend>
         sorwakeup(so);
 8035158:	e0bffa17 	ldw	r2,-24(fp)
 803515c:	10800a04 	addi	r2,r2,40
 8035160:	100b883a 	mov	r5,r2
 8035164:	e13ffa17 	ldw	r4,-24(fp)
 8035168:	80331580 	call	8033158 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
 803516c:	e0bffb17 	ldw	r2,-20(fp)
 8035170:	1080020c 	andi	r2,r2,8
 8035174:	10000726 	beq	r2,zero,8035194 <tcp_input+0x918>
            tp->t_flags |= TF_ACKNOW;
 8035178:	e0bffc17 	ldw	r2,-16(fp)
 803517c:	10800b0b 	ldhu	r2,44(r2)
 8035180:	10800054 	ori	r2,r2,1
 8035184:	1007883a 	mov	r3,r2
 8035188:	e0bffc17 	ldw	r2,-16(fp)
 803518c:	10c00b0d 	sth	r3,44(r2)
 8035190:	00000606 	br	80351ac <tcp_input+0x930>
         else
            tp->t_flags |= TF_DELACK;
 8035194:	e0bffc17 	ldw	r2,-16(fp)
 8035198:	10800b0b 	ldhu	r2,44(r2)
 803519c:	10800094 	ori	r2,r2,2
 80351a0:	1007883a 	mov	r3,r2
 80351a4:	e0bffc17 	ldw	r2,-16(fp)
 80351a8:	10c00b0d 	sth	r3,44(r2)

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));
 80351ac:	e0bffc17 	ldw	r2,-16(fp)
 80351b0:	10c01517 	ldw	r3,84(r2)
 80351b4:	e0bffc17 	ldw	r2,-16(fp)
 80351b8:	11001617 	ldw	r4,88(r2)
 80351bc:	e0bffc17 	ldw	r2,-16(fp)
 80351c0:	10801917 	ldw	r2,100(r2)
 80351c4:	2085c83a 	sub	r2,r4,r2
 80351c8:	1885883a 	add	r2,r3,r2
 80351cc:	e0bfeb15 	stw	r2,-84(fp)

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 80351d0:	e0bffc17 	ldw	r2,-16(fp)
 80351d4:	10800a0b 	ldhu	r2,40(r2)
 80351d8:	10bfffcc 	andi	r2,r2,65535
 80351dc:	1085883a 	add	r2,r2,r2
 80351e0:	1007883a 	mov	r3,r2
 80351e4:	e0bfeb17 	ldw	r2,-84(fp)
 80351e8:	10c0050e 	bge	r2,r3,8035200 <tcp_input+0x984>
             (tp->t_flags & TF_ACKNOW))
 80351ec:	e0bffc17 	ldw	r2,-16(fp)
 80351f0:	10800b0b 	ldhu	r2,44(r2)
 80351f4:	10bfffcc 	andi	r2,r2,65535
 80351f8:	1080004c 	andi	r2,r2,1
         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 80351fc:	10061926 	beq	r2,zero,8036a64 <tcp_input+0x21e8>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
 8035200:	e0bffc17 	ldw	r2,-16(fp)
 8035204:	10800b0b 	ldhu	r2,44(r2)
 8035208:	10800054 	ori	r2,r2,1
 803520c:	1007883a 	mov	r3,r2
 8035210:	e0bffc17 	ldw	r2,-16(fp)
 8035214:	10c00b0d 	sth	r3,44(r2)
            tp->t_flags &= ~TF_DELACK;
 8035218:	e0bffc17 	ldw	r2,-16(fp)
 803521c:	10c00b0b 	ldhu	r3,44(r2)
 8035220:	00bfff44 	movi	r2,-3
 8035224:	1884703a 	and	r2,r3,r2
 8035228:	1007883a 	mov	r3,r2
 803522c:	e0bffc17 	ldw	r2,-16(fp)
 8035230:	10c00b0d 	sth	r3,44(r2)
            tcp_output(tp);   /* send the ack now... */
 8035234:	e13ffc17 	ldw	r4,-16(fp)
 8035238:	80370c40 	call	80370c4 <tcp_output>
         }

         return;
 803523c:	00060906 	br	8036a64 <tcp_input+0x21e8>
      }
   }

   switch (tp->t_state) 
 8035240:	e0bffc17 	ldw	r2,-16(fp)
 8035244:	10800217 	ldw	r2,8(r2)
 8035248:	10c00060 	cmpeqi	r3,r2,1
 803524c:	1800031e 	bne	r3,zero,803525c <tcp_input+0x9e0>
 8035250:	108000a0 	cmpeqi	r2,r2,2
 8035254:	1000a81e 	bne	r2,zero,80354f8 <tcp_input+0xc7c>
 8035258:	00017606 	br	8035834 <tcp_input+0xfb8>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
 803525c:	e0bffb17 	ldw	r2,-20(fp)
 8035260:	1080010c 	andi	r2,r2,4
 8035264:	10000326 	beq	r2,zero,8035274 <tcp_input+0x9f8>
            GOTO_DROP;
 8035268:	0080bec4 	movi	r2,763
 803526c:	d0a0ad15 	stw	r2,-32076(gp)
 8035270:	0005ef06 	br	8036a30 <tcp_input+0x21b4>
         if (tiflags & TH_ACK)
 8035274:	e0bffb17 	ldw	r2,-20(fp)
 8035278:	1080040c 	andi	r2,r2,16
 803527c:	10000326 	beq	r2,zero,803528c <tcp_input+0xa10>
            GOTO_DROPWITHRESET;
 8035280:	0080bf44 	movi	r2,765
 8035284:	d0a0ad15 	stw	r2,-32076(gp)
 8035288:	0005aa06 	br	8036934 <tcp_input+0x20b8>
         if ((tiflags & TH_SYN) == 0)
 803528c:	e0bffb17 	ldw	r2,-20(fp)
 8035290:	1080008c 	andi	r2,r2,2
 8035294:	1000031e 	bne	r2,zero,80352a4 <tcp_input+0xa28>
            GOTO_DROP;
 8035298:	0080bfc4 	movi	r2,767
 803529c:	d0a0ad15 	stw	r2,-32076(gp)
 80352a0:	0005e306 	br	8036a30 <tcp_input+0x21b4>
         if(in_broadcast(ti->ti_dst.s_addr))
 80352a4:	e0bff017 	ldw	r2,-64(fp)
 80352a8:	10800417 	ldw	r2,16(r2)
 80352ac:	1009883a 	mov	r4,r2
 80352b0:	802e31c0 	call	802e31c <in_broadcast>
 80352b4:	10000326 	beq	r2,zero,80352c4 <tcp_input+0xa48>
            GOTO_DROP;
 80352b8:	0080c044 	movi	r2,769
 80352bc:	d0a0ad15 	stw	r2,-32076(gp)
 80352c0:	0005db06 	br	8036a30 <tcp_input+0x21b4>
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 80352c4:	01400404 	movi	r5,16
 80352c8:	01000244 	movi	r4,9
 80352cc:	802d1a80 	call	802d1a8 <m_getnbuf>
 80352d0:	e0bfea15 	stw	r2,-88(fp)
         if (am == NULL)
 80352d4:	e0bfea17 	ldw	r2,-88(fp)
 80352d8:	1000031e 	bne	r2,zero,80352e8 <tcp_input+0xa6c>
            GOTO_DROP;
 80352dc:	0080c104 	movi	r2,772
 80352e0:	d0a0ad15 	stw	r2,-32076(gp)
 80352e4:	0005d206 	br	8036a30 <tcp_input+0x21b4>

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
 80352e8:	e0bffe17 	ldw	r2,-8(fp)
 80352ec:	10800817 	ldw	r2,32(r2)
 80352f0:	10800517 	ldw	r2,20(r2)
 80352f4:	10800098 	cmpnei	r2,r2,2
 80352f8:	10002c1e 	bne	r2,zero,80353ac <tcp_input+0xb30>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
 80352fc:	e0bfea17 	ldw	r2,-88(fp)
 8035300:	00c00404 	movi	r3,16
 8035304:	10c00215 	stw	r3,8(r2)
         sin = mtod(am, struct sockaddr_in *);
 8035308:	e0bfea17 	ldw	r2,-88(fp)
 803530c:	10800317 	ldw	r2,12(r2)
 8035310:	e0bfe915 	stw	r2,-92(fp)
         sin->sin_family = AF_INET;
 8035314:	e0bfe917 	ldw	r2,-92(fp)
 8035318:	00c00084 	movi	r3,2
 803531c:	10c0000d 	sth	r3,0(r2)
         sin->sin_addr = ti->ti_src;
 8035320:	e0bfe917 	ldw	r2,-92(fp)
 8035324:	e0fff017 	ldw	r3,-64(fp)
 8035328:	18c00317 	ldw	r3,12(r3)
 803532c:	10c00115 	stw	r3,4(r2)
         sin->sin_port = ti->ti_sport;
 8035330:	e0bff017 	ldw	r2,-64(fp)
 8035334:	10c0050b 	ldhu	r3,20(r2)
 8035338:	e0bfe917 	ldw	r2,-92(fp)
 803533c:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
 8035340:	e0bffe17 	ldw	r2,-8(fp)
 8035344:	10800417 	ldw	r2,16(r2)
 8035348:	e0bfe515 	stw	r2,-108(fp)
         if (inp->inp_laddr.s_addr == INADDR_ANY)
 803534c:	e0bffe17 	ldw	r2,-8(fp)
 8035350:	10800417 	ldw	r2,16(r2)
 8035354:	1000041e 	bne	r2,zero,8035368 <tcp_input+0xaec>
            inp->inp_laddr = ti->ti_dst;
 8035358:	e0bffe17 	ldw	r2,-8(fp)
 803535c:	e0fff017 	ldw	r3,-64(fp)
 8035360:	18c00417 	ldw	r3,16(r3)
 8035364:	10c00415 	stw	r3,16(r2)
         if (in_pcbconnect (inp, am)) 
 8035368:	e17fea17 	ldw	r5,-88(fp)
 803536c:	e13ffe17 	ldw	r4,-8(fp)
 8035370:	8046d580 	call	8046d58 <in_pcbconnect>
 8035374:	10000826 	beq	r2,zero,8035398 <tcp_input+0xb1c>
         {
            inp->inp_laddr = laddr;
 8035378:	e0bffe17 	ldw	r2,-8(fp)
 803537c:	e0ffe517 	ldw	r3,-108(fp)
 8035380:	10c00415 	stw	r3,16(r2)
            (void) m_free(am);
 8035384:	e13fea17 	ldw	r4,-88(fp)
 8035388:	802d3300 	call	802d330 <m_free>
            GOTO_DROP;
 803538c:	0080c684 	movi	r2,794
 8035390:	d0a0ad15 	stw	r2,-32076(gp)
 8035394:	0005a606 	br	8036a30 <tcp_input+0x21b4>
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
 8035398:	e0bffe17 	ldw	r2,-8(fp)
 803539c:	e0ffe317 	ldw	r3,-116(fp)
 80353a0:	10c00a15 	stw	r3,40(r2)
         
         (void) m_free (am);
 80353a4:	e13fea17 	ldw	r4,-88(fp)
 80353a8:	802d3300 	call	802d330 <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
 80353ac:	e13ffc17 	ldw	r4,-16(fp)
 80353b0:	803826c0 	call	803826c <tcp_template>
 80353b4:	1007883a 	mov	r3,r2
 80353b8:	e0bffc17 	ldw	r2,-16(fp)
 80353bc:	10c00c15 	stw	r3,48(r2)
         if (tp->t_template == 0) 
 80353c0:	e0bffc17 	ldw	r2,-16(fp)
 80353c4:	10800c17 	ldw	r2,48(r2)
 80353c8:	1000071e 	bne	r2,zero,80353e8 <tcp_input+0xb6c>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
 80353cc:	01401a44 	movi	r5,105
 80353d0:	e13ffc17 	ldw	r4,-16(fp)
 80353d4:	80388740 	call	8038874 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
 80353d8:	e03ff615 	stw	zero,-40(fp)
            GOTO_DROP;
 80353dc:	0080d1c4 	movi	r2,839
 80353e0:	d0a0ad15 	stw	r2,-32076(gp)
 80353e4:	00059206 	br	8036a30 <tcp_input+0x21b4>
         }
         if (om) 
 80353e8:	e0bffd17 	ldw	r2,-12(fp)
 80353ec:	10000526 	beq	r2,zero,8035404 <tcp_input+0xb88>
         {
            tcp_dooptions(tp, om, ti);
 80353f0:	e1bff017 	ldw	r6,-64(fp)
 80353f4:	e17ffd17 	ldw	r5,-12(fp)
 80353f8:	e13ffc17 	ldw	r4,-16(fp)
 80353fc:	8036a940 	call	8036a94 <tcp_dooptions>
            om = 0;
 8035400:	e03ffd15 	stw	zero,-12(fp)
         }
         if (iss)
 8035404:	e0bff517 	ldw	r2,-44(fp)
 8035408:	10000426 	beq	r2,zero,803541c <tcp_input+0xba0>
            tp->iss = iss;
 803540c:	e0fff517 	ldw	r3,-44(fp)
 8035410:	e0bffc17 	ldw	r2,-16(fp)
 8035414:	10c01315 	stw	r3,76(r2)
 8035418:	00000306 	br	8035428 <tcp_input+0xbac>
         else
            tp->iss = tcp_iss;
 803541c:	d0e0b017 	ldw	r3,-32064(gp)
 8035420:	e0bffc17 	ldw	r2,-16(fp)
 8035424:	10c01315 	stw	r3,76(r2)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
 8035428:	d0e0b017 	ldw	r3,-32064(gp)
 803542c:	00be9fd4 	movui	r2,64127
 8035430:	1885883a 	add	r2,r3,r2
 8035434:	d0a0b015 	stw	r2,-32064(gp)
         tp->irs = ti->ti_seq;
 8035438:	e0bff017 	ldw	r2,-64(fp)
 803543c:	10c00617 	ldw	r3,24(r2)
 8035440:	e0bffc17 	ldw	r2,-16(fp)
 8035444:	10c01815 	stw	r3,96(r2)
         tcp_sendseqinit(tp);
 8035448:	e0bffc17 	ldw	r2,-16(fp)
 803544c:	10c01317 	ldw	r3,76(r2)
 8035450:	e0bffc17 	ldw	r2,-16(fp)
 8035454:	10c01015 	stw	r3,64(r2)
 8035458:	e0bffc17 	ldw	r2,-16(fp)
 803545c:	10c01017 	ldw	r3,64(r2)
 8035460:	e0bffc17 	ldw	r2,-16(fp)
 8035464:	10c01a15 	stw	r3,104(r2)
 8035468:	e0bffc17 	ldw	r2,-16(fp)
 803546c:	10c01a17 	ldw	r3,104(r2)
 8035470:	e0bffc17 	ldw	r2,-16(fp)
 8035474:	10c00f15 	stw	r3,60(r2)
 8035478:	e0bffc17 	ldw	r2,-16(fp)
 803547c:	10c00f17 	ldw	r3,60(r2)
 8035480:	e0bffc17 	ldw	r2,-16(fp)
 8035484:	10c00e15 	stw	r3,56(r2)
         tcp_rcvseqinit(tp);
 8035488:	e0bffc17 	ldw	r2,-16(fp)
 803548c:	10801817 	ldw	r2,96(r2)
 8035490:	10c00044 	addi	r3,r2,1
 8035494:	e0bffc17 	ldw	r2,-16(fp)
 8035498:	10c01615 	stw	r3,88(r2)
 803549c:	e0bffc17 	ldw	r2,-16(fp)
 80354a0:	10c01617 	ldw	r3,88(r2)
 80354a4:	e0bffc17 	ldw	r2,-16(fp)
 80354a8:	10c01915 	stw	r3,100(r2)
         tp->t_flags |= TF_ACKNOW;
 80354ac:	e0bffc17 	ldw	r2,-16(fp)
 80354b0:	10800b0b 	ldhu	r2,44(r2)
 80354b4:	10800054 	ori	r2,r2,1
 80354b8:	1007883a 	mov	r3,r2
 80354bc:	e0bffc17 	ldw	r2,-16(fp)
 80354c0:	10c00b0d 	sth	r3,44(r2)
         tp->t_state = TCPS_SYN_RECEIVED;
 80354c4:	e0bffc17 	ldw	r2,-16(fp)
 80354c8:	00c000c4 	movi	r3,3
 80354cc:	10c00215 	stw	r3,8(r2)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 80354d0:	e0bffc17 	ldw	r2,-16(fp)
 80354d4:	00c02584 	movi	r3,150
 80354d8:	10c00515 	stw	r3,20(r2)
         dropsocket = 0;      /* committed to socket */
 80354dc:	e03ff615 	stw	zero,-40(fp)
         tcpstat.tcps_accepts++;
 80354e0:	008201b4 	movhi	r2,2054
 80354e4:	10bc4b17 	ldw	r2,-3796(r2)
 80354e8:	10c00044 	addi	r3,r2,1
 80354ec:	008201b4 	movhi	r2,2054
 80354f0:	10fc4b15 	stw	r3,-3796(r2)
         goto trimthenstep6;
 80354f4:	00008e06 	br	8035730 <tcp_input+0xeb4>
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
 80354f8:	e0bffe17 	ldw	r2,-8(fp)
 80354fc:	e0ffe317 	ldw	r3,-116(fp)
 8035500:	10c00a15 	stw	r3,40(r2)
      if ((tiflags & TH_ACK) &&
 8035504:	e0bffb17 	ldw	r2,-20(fp)
 8035508:	1080040c 	andi	r2,r2,16
 803550c:	10000f26 	beq	r2,zero,803554c <tcp_input+0xcd0>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
 8035510:	e0bff017 	ldw	r2,-64(fp)
 8035514:	10c00717 	ldw	r3,28(r2)
 8035518:	e0bffc17 	ldw	r2,-16(fp)
 803551c:	10801317 	ldw	r2,76(r2)
 8035520:	1885c83a 	sub	r2,r3,r2
      if ((tiflags & TH_ACK) &&
 8035524:	0080060e 	bge	zero,r2,8035540 <tcp_input+0xcc4>
          SEQ_GT(ti->ti_ack, tp->snd_max)))
 8035528:	e0bff017 	ldw	r2,-64(fp)
 803552c:	10c00717 	ldw	r3,28(r2)
 8035530:	e0bffc17 	ldw	r2,-16(fp)
 8035534:	10801a17 	ldw	r2,104(r2)
 8035538:	1885c83a 	sub	r2,r3,r2
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
 803553c:	0080030e 	bge	zero,r2,803554c <tcp_input+0xcd0>
      {
         GOTO_DROPWITHRESET;
 8035540:	0080dc04 	movi	r2,880
 8035544:	d0a0ad15 	stw	r2,-32076(gp)
 8035548:	0004fa06 	br	8036934 <tcp_input+0x20b8>
      }
      if (tiflags & TH_RST) 
 803554c:	e0bffb17 	ldw	r2,-20(fp)
 8035550:	1080010c 	andi	r2,r2,4
 8035554:	10000926 	beq	r2,zero,803557c <tcp_input+0xd00>
      {
         if (tiflags & TH_ACK)
 8035558:	e0bffb17 	ldw	r2,-20(fp)
 803555c:	1080040c 	andi	r2,r2,16
 8035560:	10000326 	beq	r2,zero,8035570 <tcp_input+0xcf4>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
 8035564:	01401bc4 	movi	r5,111
 8035568:	e13ffc17 	ldw	r4,-16(fp)
 803556c:	80388740 	call	8038874 <tcp_drop>
         GOTO_DROP;
 8035570:	0080dd84 	movi	r2,886
 8035574:	d0a0ad15 	stw	r2,-32076(gp)
 8035578:	00052d06 	br	8036a30 <tcp_input+0x21b4>
      }
      if ((tiflags & TH_SYN) == 0)
 803557c:	e0bffb17 	ldw	r2,-20(fp)
 8035580:	1080008c 	andi	r2,r2,2
 8035584:	1000031e 	bne	r2,zero,8035594 <tcp_input+0xd18>
         GOTO_DROP;
 8035588:	0080de44 	movi	r2,889
 803558c:	d0a0ad15 	stw	r2,-32076(gp)
 8035590:	00052706 	br	8036a30 <tcp_input+0x21b4>
      if (tiflags & TH_ACK) 
 8035594:	e0bffb17 	ldw	r2,-20(fp)
 8035598:	1080040c 	andi	r2,r2,16
 803559c:	10000e26 	beq	r2,zero,80355d8 <tcp_input+0xd5c>
      {
         tp->snd_una = ti->ti_ack;
 80355a0:	e0bff017 	ldw	r2,-64(fp)
 80355a4:	10c00717 	ldw	r3,28(r2)
 80355a8:	e0bffc17 	ldw	r2,-16(fp)
 80355ac:	10c00e15 	stw	r3,56(r2)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 80355b0:	e0bffc17 	ldw	r2,-16(fp)
 80355b4:	10c00f17 	ldw	r3,60(r2)
 80355b8:	e0bffc17 	ldw	r2,-16(fp)
 80355bc:	10800e17 	ldw	r2,56(r2)
 80355c0:	1885c83a 	sub	r2,r3,r2
 80355c4:	1000040e 	bge	r2,zero,80355d8 <tcp_input+0xd5c>
            tp->snd_nxt = tp->snd_una;
 80355c8:	e0bffc17 	ldw	r2,-16(fp)
 80355cc:	10c00e17 	ldw	r3,56(r2)
 80355d0:	e0bffc17 	ldw	r2,-16(fp)
 80355d4:	10c00f15 	stw	r3,60(r2)
      }
      tp->t_timer[TCPT_REXMT] = 0;
 80355d8:	e0bffc17 	ldw	r2,-16(fp)
 80355dc:	10000315 	stw	zero,12(r2)
      tp->irs = ti->ti_seq;
 80355e0:	e0bff017 	ldw	r2,-64(fp)
 80355e4:	10c00617 	ldw	r3,24(r2)
 80355e8:	e0bffc17 	ldw	r2,-16(fp)
 80355ec:	10c01815 	stw	r3,96(r2)
      tcp_rcvseqinit(tp);
 80355f0:	e0bffc17 	ldw	r2,-16(fp)
 80355f4:	10801817 	ldw	r2,96(r2)
 80355f8:	10c00044 	addi	r3,r2,1
 80355fc:	e0bffc17 	ldw	r2,-16(fp)
 8035600:	10c01615 	stw	r3,88(r2)
 8035604:	e0bffc17 	ldw	r2,-16(fp)
 8035608:	10c01617 	ldw	r3,88(r2)
 803560c:	e0bffc17 	ldw	r2,-16(fp)
 8035610:	10c01915 	stw	r3,100(r2)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
 8035614:	e0bffe17 	ldw	r2,-8(fp)
 8035618:	10c00417 	ldw	r3,16(r2)
 803561c:	e0bff017 	ldw	r2,-64(fp)
 8035620:	10800417 	ldw	r2,16(r2)
 8035624:	18801726 	beq	r3,r2,8035684 <tcp_input+0xe08>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
 8035628:	e0bfe417 	ldw	r2,-112(fp)
 803562c:	10800117 	ldw	r2,4(r2)
 8035630:	10800617 	ldw	r2,24(r2)
 8035634:	10001326 	beq	r2,zero,8035684 <tcp_input+0xe08>
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
 8035638:	e0bfe417 	ldw	r2,-112(fp)
 803563c:	10800117 	ldw	r2,4(r2)
 8035640:	10800617 	ldw	r2,24(r2)
 8035644:	10c00a17 	ldw	r3,40(r2)
 8035648:	e0bff017 	ldw	r2,-64(fp)
 803564c:	10800417 	ldw	r2,16(r2)
 8035650:	18800c1e 	bne	r3,r2,8035684 <tcp_input+0xe08>
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
 8035654:	e0bffe17 	ldw	r2,-8(fp)
 8035658:	e0fff017 	ldw	r3,-64(fp)
 803565c:	18c00417 	ldw	r3,16(r3)
 8035660:	10c00415 	stw	r3,16(r2)
            if (tp->t_template != NULL)
 8035664:	e0bffc17 	ldw	r2,-16(fp)
 8035668:	10800c17 	ldw	r2,48(r2)
 803566c:	10000526 	beq	r2,zero,8035684 <tcp_input+0xe08>
               tp->t_template->ti_src = ti->ti_dst;
 8035670:	e0bffc17 	ldw	r2,-16(fp)
 8035674:	10800c17 	ldw	r2,48(r2)
 8035678:	e0fff017 	ldw	r3,-64(fp)
 803567c:	18c00417 	ldw	r3,16(r3)
 8035680:	10c00315 	stw	r3,12(r2)
         }
      }
      tp->t_flags |= TF_ACKNOW;
 8035684:	e0bffc17 	ldw	r2,-16(fp)
 8035688:	10800b0b 	ldhu	r2,44(r2)
 803568c:	10800054 	ori	r2,r2,1
 8035690:	1007883a 	mov	r3,r2
 8035694:	e0bffc17 	ldw	r2,-16(fp)
 8035698:	10c00b0d 	sth	r3,44(r2)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
 803569c:	e0bffb17 	ldw	r2,-20(fp)
 80356a0:	1080040c 	andi	r2,r2,16
 80356a4:	10001f26 	beq	r2,zero,8035724 <tcp_input+0xea8>
 80356a8:	e0bffc17 	ldw	r2,-16(fp)
 80356ac:	10c00e17 	ldw	r3,56(r2)
 80356b0:	e0bffc17 	ldw	r2,-16(fp)
 80356b4:	10801317 	ldw	r2,76(r2)
 80356b8:	1885c83a 	sub	r2,r3,r2
 80356bc:	0080190e 	bge	zero,r2,8035724 <tcp_input+0xea8>
      {
         tcpstat.tcps_connects++;
 80356c0:	008201b4 	movhi	r2,2054
 80356c4:	10bc4c17 	ldw	r2,-3792(r2)
 80356c8:	10c00044 	addi	r3,r2,1
 80356cc:	008201b4 	movhi	r2,2054
 80356d0:	10fc4c15 	stw	r3,-3792(r2)
         tp->t_state = TCPS_ESTABLISHED;
 80356d4:	e0bffc17 	ldw	r2,-16(fp)
 80356d8:	00c00104 	movi	r3,4
 80356dc:	10c00215 	stw	r3,8(r2)
         soisconnected (so);
 80356e0:	e13ffa17 	ldw	r4,-24(fp)
 80356e4:	80329f40 	call	80329f4 <soisconnected>
         tp->t_maxseg = tcp_mss(so);
 80356e8:	e13ffa17 	ldw	r4,-24(fp)
 80356ec:	8036fcc0 	call	8036fcc <tcp_mss>
 80356f0:	1007883a 	mov	r3,r2
 80356f4:	e0bffc17 	ldw	r2,-16(fp)
 80356f8:	10c00a0d 	sth	r3,40(r2)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
 80356fc:	e1bfe417 	ldw	r6,-112(fp)
 8035700:	000b883a 	mov	r5,zero
 8035704:	e13ffc17 	ldw	r4,-16(fp)
 8035708:	803448c0 	call	803448c <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
 803570c:	e0bffc17 	ldw	r2,-16(fp)
 8035710:	10801e17 	ldw	r2,120(r2)
 8035714:	10000626 	beq	r2,zero,8035730 <tcp_input+0xeb4>
         {
            tcp_xmit_timer(tp);
 8035718:	e13ffc17 	ldw	r4,-16(fp)
 803571c:	8036d480 	call	8036d48 <tcp_xmit_timer>
         if (tp->t_rttick) 
 8035720:	00000306 	br	8035730 <tcp_input+0xeb4>
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
 8035724:	e0bffc17 	ldw	r2,-16(fp)
 8035728:	00c000c4 	movi	r3,3
 803572c:	10c00215 	stw	r3,8(r2)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
 8035730:	e0bff017 	ldw	r2,-64(fp)
 8035734:	10800617 	ldw	r2,24(r2)
 8035738:	10c00044 	addi	r3,r2,1
 803573c:	e0bff017 	ldw	r2,-64(fp)
 8035740:	10c00615 	stw	r3,24(r2)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
 8035744:	e0bff017 	ldw	r2,-64(fp)
 8035748:	1080028b 	ldhu	r2,10(r2)
 803574c:	10bfffcc 	andi	r2,r2,65535
 8035750:	e0fffc17 	ldw	r3,-16(fp)
 8035754:	18c01517 	ldw	r3,84(r3)
 8035758:	18802c2e 	bgeu	r3,r2,803580c <tcp_input+0xf90>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
 803575c:	e0bff017 	ldw	r2,-64(fp)
 8035760:	1080028b 	ldhu	r2,10(r2)
 8035764:	10ffffcc 	andi	r3,r2,65535
 8035768:	e0bffc17 	ldw	r2,-16(fp)
 803576c:	10801517 	ldw	r2,84(r2)
 8035770:	10bfffcc 	andi	r2,r2,65535
 8035774:	1885c83a 	sub	r2,r3,r2
 8035778:	e0bff915 	stw	r2,-28(fp)
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
 803577c:	e0bfe417 	ldw	r2,-112(fp)
 8035780:	10800217 	ldw	r2,8(r2)
 8035784:	10000626 	beq	r2,zero,80357a0 <tcp_input+0xf24>
         {
            m_adj(m, -todrop);
 8035788:	e0bff917 	ldw	r2,-28(fp)
 803578c:	0085c83a 	sub	r2,zero,r2
 8035790:	100b883a 	mov	r5,r2
 8035794:	e13fe417 	ldw	r4,-112(fp)
 8035798:	802d7540 	call	802d754 <m_adj>
 803579c:	00000706 	br	80357bc <tcp_input+0xf40>
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
 80357a0:	e0bfe417 	ldw	r2,-112(fp)
 80357a4:	10c00617 	ldw	r3,24(r2)
 80357a8:	e0bff917 	ldw	r2,-28(fp)
 80357ac:	0085c83a 	sub	r2,zero,r2
 80357b0:	100b883a 	mov	r5,r2
 80357b4:	1809883a 	mov	r4,r3
 80357b8:	802d7540 	call	802d754 <m_adj>
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
 80357bc:	e0bffc17 	ldw	r2,-16(fp)
 80357c0:	10801517 	ldw	r2,84(r2)
 80357c4:	1007883a 	mov	r3,r2
 80357c8:	e0bff017 	ldw	r2,-64(fp)
 80357cc:	10c0028d 	sth	r3,10(r2)
         tiflags &= ~TH_FIN;
 80357d0:	e0fffb17 	ldw	r3,-20(fp)
 80357d4:	00bfff84 	movi	r2,-2
 80357d8:	1884703a 	and	r2,r3,r2
 80357dc:	e0bffb15 	stw	r2,-20(fp)
         tcpstat.tcps_rcvpackafterwin++;
 80357e0:	008201b4 	movhi	r2,2054
 80357e4:	10bc6f17 	ldw	r2,-3652(r2)
 80357e8:	10c00044 	addi	r3,r2,1
 80357ec:	008201b4 	movhi	r2,2054
 80357f0:	10fc6f15 	stw	r3,-3652(r2)
         tcpstat.tcps_rcvbyteafterwin += todrop;
 80357f4:	008201b4 	movhi	r2,2054
 80357f8:	10fc7017 	ldw	r3,-3648(r2)
 80357fc:	e0bff917 	ldw	r2,-28(fp)
 8035800:	1887883a 	add	r3,r3,r2
 8035804:	008201b4 	movhi	r2,2054
 8035808:	10fc7015 	stw	r3,-3648(r2)
      }
      tp->snd_wl1 = ti->ti_seq - 1;
 803580c:	e0bff017 	ldw	r2,-64(fp)
 8035810:	10800617 	ldw	r2,24(r2)
 8035814:	10ffffc4 	addi	r3,r2,-1
 8035818:	e0bffc17 	ldw	r2,-16(fp)
 803581c:	10c01115 	stw	r3,68(r2)
      tp->rcv_up = ti->ti_seq;
 8035820:	e0bff017 	ldw	r2,-64(fp)
 8035824:	10c00617 	ldw	r3,24(r2)
 8035828:	e0bffc17 	ldw	r2,-16(fp)
 803582c:	10c01715 	stw	r3,92(r2)
      goto step6;
 8035830:	0002cd06 	br	8036368 <tcp_input+0x1aec>
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
 8035834:	e0bffc17 	ldw	r2,-16(fp)
 8035838:	10c01617 	ldw	r3,88(r2)
 803583c:	e0bff017 	ldw	r2,-64(fp)
 8035840:	10800617 	ldw	r2,24(r2)
 8035844:	1885c83a 	sub	r2,r3,r2
 8035848:	e0bff915 	stw	r2,-28(fp)
   if (todrop > 0) 
 803584c:	e0bff917 	ldw	r2,-28(fp)
 8035850:	0080890e 	bge	zero,r2,8035a78 <tcp_input+0x11fc>
   {
      if (tiflags & TH_SYN) 
 8035854:	e0bffb17 	ldw	r2,-20(fp)
 8035858:	1080008c 	andi	r2,r2,2
 803585c:	10001c26 	beq	r2,zero,80358d0 <tcp_input+0x1054>
      {
         tiflags &= ~TH_SYN;
 8035860:	e0fffb17 	ldw	r3,-20(fp)
 8035864:	00bfff44 	movi	r2,-3
 8035868:	1884703a 	and	r2,r3,r2
 803586c:	e0bffb15 	stw	r2,-20(fp)
         ti->ti_seq++;
 8035870:	e0bff017 	ldw	r2,-64(fp)
 8035874:	10800617 	ldw	r2,24(r2)
 8035878:	10c00044 	addi	r3,r2,1
 803587c:	e0bff017 	ldw	r2,-64(fp)
 8035880:	10c00615 	stw	r3,24(r2)
         if (ti->ti_urp > 1) 
 8035884:	e0bff017 	ldw	r2,-64(fp)
 8035888:	1080098b 	ldhu	r2,38(r2)
 803588c:	10bfffcc 	andi	r2,r2,65535
 8035890:	108000b0 	cmpltui	r2,r2,2
 8035894:	1000071e 	bne	r2,zero,80358b4 <tcp_input+0x1038>
            ti->ti_urp--;
 8035898:	e0bff017 	ldw	r2,-64(fp)
 803589c:	1080098b 	ldhu	r2,38(r2)
 80358a0:	10bfffc4 	addi	r2,r2,-1
 80358a4:	1007883a 	mov	r3,r2
 80358a8:	e0bff017 	ldw	r2,-64(fp)
 80358ac:	10c0098d 	sth	r3,38(r2)
 80358b0:	00000406 	br	80358c4 <tcp_input+0x1048>
         else
            tiflags &= ~TH_URG;
 80358b4:	e0fffb17 	ldw	r3,-20(fp)
 80358b8:	00bff7c4 	movi	r2,-33
 80358bc:	1884703a 	and	r2,r3,r2
 80358c0:	e0bffb15 	stw	r2,-20(fp)
         todrop--;
 80358c4:	e0bff917 	ldw	r2,-28(fp)
 80358c8:	10bfffc4 	addi	r2,r2,-1
 80358cc:	e0bff915 	stw	r2,-28(fp)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 80358d0:	e0bff017 	ldw	r2,-64(fp)
 80358d4:	1080028b 	ldhu	r2,10(r2)
 80358d8:	10ffffcc 	andi	r3,r2,65535
 80358dc:	e0bff917 	ldw	r2,-28(fp)
 80358e0:	18800816 	blt	r3,r2,8035904 <tcp_input+0x1088>
          ((todrop == (int)ti->ti_len) && 
 80358e4:	e0bff017 	ldw	r2,-64(fp)
 80358e8:	1080028b 	ldhu	r2,10(r2)
 80358ec:	10bfffcc 	andi	r2,r2,65535
      if ((todrop > (int)ti->ti_len) ||
 80358f0:	e0fff917 	ldw	r3,-28(fp)
 80358f4:	1880311e 	bne	r3,r2,80359bc <tcp_input+0x1140>
          (tiflags&TH_FIN) == 0)) 
 80358f8:	e0bffb17 	ldw	r2,-20(fp)
 80358fc:	1080004c 	andi	r2,r2,1
          ((todrop == (int)ti->ti_len) && 
 8035900:	10002e1e 	bne	r2,zero,80359bc <tcp_input+0x1140>
      {
         tcpstat.tcps_rcvduppack++;
 8035904:	008201b4 	movhi	r2,2054
 8035908:	10bc6917 	ldw	r2,-3676(r2)
 803590c:	10c00044 	addi	r3,r2,1
 8035910:	008201b4 	movhi	r2,2054
 8035914:	10fc6915 	stw	r3,-3676(r2)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 8035918:	008201b4 	movhi	r2,2054
 803591c:	10fc6a17 	ldw	r3,-3672(r2)
 8035920:	e0bff017 	ldw	r2,-64(fp)
 8035924:	1080028b 	ldhu	r2,10(r2)
 8035928:	10bfffcc 	andi	r2,r2,65535
 803592c:	1887883a 	add	r3,r3,r2
 8035930:	008201b4 	movhi	r2,2054
 8035934:	10fc6a15 	stw	r3,-3672(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 8035938:	e0bffb17 	ldw	r2,-20(fp)
 803593c:	1080004c 	andi	r2,r2,1
 8035940:	10000626 	beq	r2,zero,803595c <tcp_input+0x10e0>
 8035944:	e0bff017 	ldw	r2,-64(fp)
 8035948:	1080028b 	ldhu	r2,10(r2)
 803594c:	10bfffcc 	andi	r2,r2,65535
 8035950:	10800044 	addi	r2,r2,1
 8035954:	e0fff917 	ldw	r3,-28(fp)
 8035958:	18800926 	beq	r3,r2,8035980 <tcp_input+0x1104>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
 803595c:	e0bffb17 	ldw	r2,-20(fp)
 8035960:	1080010c 	andi	r2,r2,4
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 8035964:	1003df26 	beq	r2,zero,80368e4 <tcp_input+0x2068>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
 8035968:	e0bff017 	ldw	r2,-64(fp)
 803596c:	10c00617 	ldw	r3,24(r2)
 8035970:	e0bffc17 	ldw	r2,-16(fp)
 8035974:	10801617 	ldw	r2,88(r2)
 8035978:	10bfffc4 	addi	r2,r2,-1
 803597c:	1883d91e 	bne	r3,r2,80368e4 <tcp_input+0x2068>
         {
            todrop = ti->ti_len;
 8035980:	e0bff017 	ldw	r2,-64(fp)
 8035984:	1080028b 	ldhu	r2,10(r2)
 8035988:	10bfffcc 	andi	r2,r2,65535
 803598c:	e0bff915 	stw	r2,-28(fp)
            tiflags &= ~TH_FIN;
 8035990:	e0fffb17 	ldw	r3,-20(fp)
 8035994:	00bfff84 	movi	r2,-2
 8035998:	1884703a 	and	r2,r3,r2
 803599c:	e0bffb15 	stw	r2,-20(fp)
            tp->t_flags |= TF_ACKNOW;
 80359a0:	e0bffc17 	ldw	r2,-16(fp)
 80359a4:	10800b0b 	ldhu	r2,44(r2)
 80359a8:	10800054 	ori	r2,r2,1
 80359ac:	1007883a 	mov	r3,r2
 80359b0:	e0bffc17 	ldw	r2,-16(fp)
 80359b4:	10c00b0d 	sth	r3,44(r2)
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 80359b8:	00000b06 	br	80359e8 <tcp_input+0x116c>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 80359bc:	008201b4 	movhi	r2,2054
 80359c0:	10bc6b17 	ldw	r2,-3668(r2)
 80359c4:	10c00044 	addi	r3,r2,1
 80359c8:	008201b4 	movhi	r2,2054
 80359cc:	10fc6b15 	stw	r3,-3668(r2)
         tcpstat.tcps_rcvpartdupbyte += todrop;
 80359d0:	008201b4 	movhi	r2,2054
 80359d4:	10fc6c17 	ldw	r3,-3664(r2)
 80359d8:	e0bff917 	ldw	r2,-28(fp)
 80359dc:	1887883a 	add	r3,r3,r2
 80359e0:	008201b4 	movhi	r2,2054
 80359e4:	10fc6c15 	stw	r3,-3664(r2)
      }
      m_adj(m, todrop);
 80359e8:	e17ff917 	ldw	r5,-28(fp)
 80359ec:	e13fe417 	ldw	r4,-112(fp)
 80359f0:	802d7540 	call	802d754 <m_adj>
      ti->ti_seq += todrop;
 80359f4:	e0bff017 	ldw	r2,-64(fp)
 80359f8:	10c00617 	ldw	r3,24(r2)
 80359fc:	e0bff917 	ldw	r2,-28(fp)
 8035a00:	1887883a 	add	r3,r3,r2
 8035a04:	e0bff017 	ldw	r2,-64(fp)
 8035a08:	10c00615 	stw	r3,24(r2)
      ti->ti_len -= (u_short)todrop;
 8035a0c:	e0bff017 	ldw	r2,-64(fp)
 8035a10:	1080028b 	ldhu	r2,10(r2)
 8035a14:	e0fff917 	ldw	r3,-28(fp)
 8035a18:	10c5c83a 	sub	r2,r2,r3
 8035a1c:	1007883a 	mov	r3,r2
 8035a20:	e0bff017 	ldw	r2,-64(fp)
 8035a24:	10c0028d 	sth	r3,10(r2)
      if (ti->ti_urp > (u_short)todrop)
 8035a28:	e0bff017 	ldw	r2,-64(fp)
 8035a2c:	1080098b 	ldhu	r2,38(r2)
 8035a30:	e0fff917 	ldw	r3,-28(fp)
 8035a34:	10bfffcc 	andi	r2,r2,65535
 8035a38:	18ffffcc 	andi	r3,r3,65535
 8035a3c:	1880082e 	bgeu	r3,r2,8035a60 <tcp_input+0x11e4>
         ti->ti_urp -= (u_short)todrop;
 8035a40:	e0bff017 	ldw	r2,-64(fp)
 8035a44:	1080098b 	ldhu	r2,38(r2)
 8035a48:	e0fff917 	ldw	r3,-28(fp)
 8035a4c:	10c5c83a 	sub	r2,r2,r3
 8035a50:	1007883a 	mov	r3,r2
 8035a54:	e0bff017 	ldw	r2,-64(fp)
 8035a58:	10c0098d 	sth	r3,38(r2)
 8035a5c:	00000606 	br	8035a78 <tcp_input+0x11fc>
      else 
      {
         tiflags &= ~TH_URG;
 8035a60:	e0fffb17 	ldw	r3,-20(fp)
 8035a64:	00bff7c4 	movi	r2,-33
 8035a68:	1884703a 	and	r2,r3,r2
 8035a6c:	e0bffb15 	stw	r2,-20(fp)
         ti->ti_urp = 0;
 8035a70:	e0bff017 	ldw	r2,-64(fp)
 8035a74:	1000098d 	sth	zero,38(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
 8035a78:	e0bffa17 	ldw	r2,-24(fp)
 8035a7c:	1080088b 	ldhu	r2,34(r2)
 8035a80:	10bfffcc 	andi	r2,r2,65535
 8035a84:	1080004c 	andi	r2,r2,1
 8035a88:	10001326 	beq	r2,zero,8035ad8 <tcp_input+0x125c>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
 8035a8c:	e0bffc17 	ldw	r2,-16(fp)
 8035a90:	10800217 	ldw	r2,8(r2)
   if ((so->so_state & SS_NOFDREF) &&
 8035a94:	10800190 	cmplti	r2,r2,6
 8035a98:	10000f1e 	bne	r2,zero,8035ad8 <tcp_input+0x125c>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
 8035a9c:	e0bff017 	ldw	r2,-64(fp)
 8035aa0:	1080028b 	ldhu	r2,10(r2)
 8035aa4:	10bfffcc 	andi	r2,r2,65535
 8035aa8:	10000b26 	beq	r2,zero,8035ad8 <tcp_input+0x125c>
   {
      tp = tcp_close(tp);
 8035aac:	e13ffc17 	ldw	r4,-16(fp)
 8035ab0:	80389100 	call	8038910 <tcp_close>
 8035ab4:	e0bffc15 	stw	r2,-16(fp)
      tcpstat.tcps_rcvafterclose++;
 8035ab8:	008201b4 	movhi	r2,2054
 8035abc:	10bc7117 	ldw	r2,-3644(r2)
 8035ac0:	10c00044 	addi	r3,r2,1
 8035ac4:	008201b4 	movhi	r2,2054
 8035ac8:	10fc7115 	stw	r3,-3644(r2)
      GOTO_DROPWITHRESET;
 8035acc:	00810444 	movi	r2,1041
 8035ad0:	d0a0ad15 	stw	r2,-32076(gp)
 8035ad4:	00039706 	br	8036934 <tcp_input+0x20b8>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
 8035ad8:	e0bff017 	ldw	r2,-64(fp)
 8035adc:	10c00617 	ldw	r3,24(r2)
 8035ae0:	e0bff017 	ldw	r2,-64(fp)
 8035ae4:	1080028b 	ldhu	r2,10(r2)
 8035ae8:	10bfffcc 	andi	r2,r2,65535
 8035aec:	10a0001c 	xori	r2,r2,32768
 8035af0:	10a00004 	addi	r2,r2,-32768
 8035af4:	1887883a 	add	r3,r3,r2
 8035af8:	e0bffc17 	ldw	r2,-16(fp)
 8035afc:	11001617 	ldw	r4,88(r2)
 8035b00:	e0bffc17 	ldw	r2,-16(fp)
 8035b04:	10801517 	ldw	r2,84(r2)
 8035b08:	2085883a 	add	r2,r4,r2
 8035b0c:	1885c83a 	sub	r2,r3,r2
 8035b10:	e0bff915 	stw	r2,-28(fp)
   if (todrop > 0) 
 8035b14:	e0bff917 	ldw	r2,-28(fp)
 8035b18:	0080610e 	bge	zero,r2,8035ca0 <tcp_input+0x1424>
   {
      tcpstat.tcps_rcvpackafterwin++;
 8035b1c:	008201b4 	movhi	r2,2054
 8035b20:	10bc6f17 	ldw	r2,-3652(r2)
 8035b24:	10c00044 	addi	r3,r2,1
 8035b28:	008201b4 	movhi	r2,2054
 8035b2c:	10fc6f15 	stw	r3,-3652(r2)
      if (todrop >= (int)ti->ti_len) 
 8035b30:	e0bff017 	ldw	r2,-64(fp)
 8035b34:	1080028b 	ldhu	r2,10(r2)
 8035b38:	10bfffcc 	andi	r2,r2,65535
 8035b3c:	e0fff917 	ldw	r3,-28(fp)
 8035b40:	18803616 	blt	r3,r2,8035c1c <tcp_input+0x13a0>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
 8035b44:	008201b4 	movhi	r2,2054
 8035b48:	10fc7017 	ldw	r3,-3648(r2)
 8035b4c:	e0bff017 	ldw	r2,-64(fp)
 8035b50:	1080028b 	ldhu	r2,10(r2)
 8035b54:	10bfffcc 	andi	r2,r2,65535
 8035b58:	1887883a 	add	r3,r3,r2
 8035b5c:	008201b4 	movhi	r2,2054
 8035b60:	10fc7015 	stw	r3,-3648(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
 8035b64:	e0bffb17 	ldw	r2,-20(fp)
 8035b68:	1080008c 	andi	r2,r2,2
 8035b6c:	10001726 	beq	r2,zero,8035bcc <tcp_input+0x1350>
             tp->t_state == TCPS_TIME_WAIT &&
 8035b70:	e0bffc17 	ldw	r2,-16(fp)
 8035b74:	10800217 	ldw	r2,8(r2)
         if (tiflags & TH_SYN &&
 8035b78:	10800298 	cmpnei	r2,r2,10
 8035b7c:	1000131e 	bne	r2,zero,8035bcc <tcp_input+0x1350>
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
 8035b80:	e0bff017 	ldw	r2,-64(fp)
 8035b84:	10c00617 	ldw	r3,24(r2)
 8035b88:	e0bffc17 	ldw	r2,-16(fp)
 8035b8c:	10801617 	ldw	r2,88(r2)
 8035b90:	1885c83a 	sub	r2,r3,r2
             tp->t_state == TCPS_TIME_WAIT &&
 8035b94:	00800d0e 	bge	zero,r2,8035bcc <tcp_input+0x1350>
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
 8035b98:	e0bffc17 	ldw	r2,-16(fp)
 8035b9c:	10c01617 	ldw	r3,88(r2)
 8035ba0:	008000b4 	movhi	r2,2
 8035ba4:	10bd3fc4 	addi	r2,r2,-2817
 8035ba8:	1885883a 	add	r2,r3,r2
 8035bac:	e0bff515 	stw	r2,-44(fp)
            if (iss & 0xff000000)
 8035bb0:	e0bff517 	ldw	r2,-44(fp)
 8035bb4:	10bfc02c 	andhi	r2,r2,65280
 8035bb8:	10000126 	beq	r2,zero,8035bc0 <tcp_input+0x1344>
            {
               iss = 0L;
 8035bbc:	e03ff515 	stw	zero,-44(fp)
            }
            (void) tcp_close(tp);
 8035bc0:	e13ffc17 	ldw	r4,-16(fp)
 8035bc4:	80389100 	call	8038910 <tcp_close>
            goto findpcb;
 8035bc8:	003bf806 	br	8034bac <tcp_input+0x330>
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
 8035bcc:	e0bffc17 	ldw	r2,-16(fp)
 8035bd0:	10801517 	ldw	r2,84(r2)
 8035bd4:	1003451e 	bne	r2,zero,80368ec <tcp_input+0x2070>
 8035bd8:	e0bff017 	ldw	r2,-64(fp)
 8035bdc:	10c00617 	ldw	r3,24(r2)
 8035be0:	e0bffc17 	ldw	r2,-16(fp)
 8035be4:	10801617 	ldw	r2,88(r2)
 8035be8:	1883401e 	bne	r3,r2,80368ec <tcp_input+0x2070>
         {
            tp->t_flags |= TF_ACKNOW;
 8035bec:	e0bffc17 	ldw	r2,-16(fp)
 8035bf0:	10800b0b 	ldhu	r2,44(r2)
 8035bf4:	10800054 	ori	r2,r2,1
 8035bf8:	1007883a 	mov	r3,r2
 8035bfc:	e0bffc17 	ldw	r2,-16(fp)
 8035c00:	10c00b0d 	sth	r3,44(r2)
            tcpstat.tcps_rcvwinprobe++;
 8035c04:	008201b4 	movhi	r2,2054
 8035c08:	10bc7217 	ldw	r2,-3640(r2)
 8035c0c:	10c00044 	addi	r3,r2,1
 8035c10:	008201b4 	movhi	r2,2054
 8035c14:	10fc7215 	stw	r3,-3640(r2)
 8035c18:	00000606 	br	8035c34 <tcp_input+0x13b8>
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
 8035c1c:	008201b4 	movhi	r2,2054
 8035c20:	10fc7017 	ldw	r3,-3648(r2)
 8035c24:	e0bff917 	ldw	r2,-28(fp)
 8035c28:	1887883a 	add	r3,r3,r2
 8035c2c:	008201b4 	movhi	r2,2054
 8035c30:	10fc7015 	stw	r3,-3648(r2)
      /* XXX work around m_adj bug */
      if (m->m_len) 
 8035c34:	e0bfe417 	ldw	r2,-112(fp)
 8035c38:	10800217 	ldw	r2,8(r2)
 8035c3c:	10000626 	beq	r2,zero,8035c58 <tcp_input+0x13dc>
      {
         m_adj(m, -todrop);
 8035c40:	e0bff917 	ldw	r2,-28(fp)
 8035c44:	0085c83a 	sub	r2,zero,r2
 8035c48:	100b883a 	mov	r5,r2
 8035c4c:	e13fe417 	ldw	r4,-112(fp)
 8035c50:	802d7540 	call	802d754 <m_adj>
 8035c54:	00000706 	br	8035c74 <tcp_input+0x13f8>
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
 8035c58:	e0bfe417 	ldw	r2,-112(fp)
 8035c5c:	10c00617 	ldw	r3,24(r2)
 8035c60:	e0bff917 	ldw	r2,-28(fp)
 8035c64:	0085c83a 	sub	r2,zero,r2
 8035c68:	100b883a 	mov	r5,r2
 8035c6c:	1809883a 	mov	r4,r3
 8035c70:	802d7540 	call	802d754 <m_adj>
      }
      ti->ti_len -= (u_short)todrop;
 8035c74:	e0bff017 	ldw	r2,-64(fp)
 8035c78:	1080028b 	ldhu	r2,10(r2)
 8035c7c:	e0fff917 	ldw	r3,-28(fp)
 8035c80:	10c5c83a 	sub	r2,r2,r3
 8035c84:	1007883a 	mov	r3,r2
 8035c88:	e0bff017 	ldw	r2,-64(fp)
 8035c8c:	10c0028d 	sth	r3,10(r2)
      tiflags &= ~(TH_PUSH|TH_FIN);
 8035c90:	e0fffb17 	ldw	r3,-20(fp)
 8035c94:	00bffd84 	movi	r2,-10
 8035c98:	1884703a 	and	r2,r3,r2
 8035c9c:	e0bffb15 	stw	r2,-20(fp)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
 8035ca0:	e0bffb17 	ldw	r2,-20(fp)
 8035ca4:	1080010c 	andi	r2,r2,4
 8035ca8:	10002f26 	beq	r2,zero,8035d68 <tcp_input+0x14ec>
   {
      switch (tp->t_state) 
 8035cac:	e0bffc17 	ldw	r2,-16(fp)
 8035cb0:	10800217 	ldw	r2,8(r2)
 8035cb4:	10bfff44 	addi	r2,r2,-3
 8035cb8:	10c00228 	cmpgeui	r3,r2,8
 8035cbc:	18002a1e 	bne	r3,zero,8035d68 <tcp_input+0x14ec>
 8035cc0:	100690ba 	slli	r3,r2,2
 8035cc4:	008200f4 	movhi	r2,2051
 8035cc8:	1885883a 	add	r2,r3,r2
 8035ccc:	10973517 	ldw	r2,23764(r2)
 8035cd0:	1000683a 	jmp	r2
 8035cd4:	08035cf4 	orhi	zero,at,3443
 8035cd8:	08035d04 	addi	zero,at,3444
 8035cdc:	08035d18 	cmpnei	zero,at,3444
 8035ce0:	08035d18 	cmpnei	zero,at,3444
 8035ce4:	08035d54 	ori	zero,at,3445
 8035ce8:	08035d54 	ori	zero,at,3445
 8035cec:	08035d18 	cmpnei	zero,at,3444
 8035cf0:	08035d54 	ori	zero,at,3445
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
 8035cf4:	e0bffa17 	ldw	r2,-24(fp)
 8035cf8:	00c01bc4 	movi	r3,111
 8035cfc:	10c00615 	stw	r3,24(r2)
         goto close;
 8035d00:	00000806 	br	8035d24 <tcp_input+0x14a8>
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 8035d04:	008201b4 	movhi	r2,2054
 8035d08:	10bc2317 	ldw	r2,-3956(r2)
 8035d0c:	10c00044 	addi	r3,r2,1
 8035d10:	008201b4 	movhi	r2,2054
 8035d14:	10fc2315 	stw	r3,-3956(r2)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
 8035d18:	e0bffa17 	ldw	r2,-24(fp)
 8035d1c:	00c01a04 	movi	r3,104
 8035d20:	10c00615 	stw	r3,24(r2)
         close:
         tp->t_state = TCPS_CLOSED;
 8035d24:	e0bffc17 	ldw	r2,-16(fp)
 8035d28:	10000215 	stw	zero,8(r2)
         tcpstat.tcps_drops++;
 8035d2c:	008201b4 	movhi	r2,2054
 8035d30:	10bc4d17 	ldw	r2,-3788(r2)
 8035d34:	10c00044 	addi	r3,r2,1
 8035d38:	008201b4 	movhi	r2,2054
 8035d3c:	10fc4d15 	stw	r3,-3788(r2)
         SETTP(tp, tcp_close(tp));
 8035d40:	e13ffc17 	ldw	r4,-16(fp)
 8035d44:	80389100 	call	8038910 <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
 8035d48:	00812204 	movi	r2,1160
 8035d4c:	d0a0ad15 	stw	r2,-32076(gp)
 8035d50:	00033706 	br	8036a30 <tcp_input+0x21b4>
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
 8035d54:	e13ffc17 	ldw	r4,-16(fp)
 8035d58:	80389100 	call	8038910 <tcp_close>
         GOTO_DROP;
 8035d5c:	00812384 	movi	r2,1166
 8035d60:	d0a0ad15 	stw	r2,-32076(gp)
 8035d64:	00033206 	br	8036a30 <tcp_input+0x21b4>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
 8035d68:	e0bffb17 	ldw	r2,-20(fp)
 8035d6c:	1080008c 	andi	r2,r2,2
 8035d70:	10000726 	beq	r2,zero,8035d90 <tcp_input+0x1514>
   {
      tp = tcp_drop(tp, ECONNRESET);
 8035d74:	01401a04 	movi	r5,104
 8035d78:	e13ffc17 	ldw	r4,-16(fp)
 8035d7c:	80388740 	call	8038874 <tcp_drop>
 8035d80:	e0bffc15 	stw	r2,-16(fp)
      GOTO_DROPWITHRESET;
 8035d84:	00812b04 	movi	r2,1196
 8035d88:	d0a0ad15 	stw	r2,-32076(gp)
 8035d8c:	0002e906 	br	8036934 <tcp_input+0x20b8>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
 8035d90:	e0bffb17 	ldw	r2,-20(fp)
 8035d94:	1080040c 	andi	r2,r2,16
 8035d98:	1000031e 	bne	r2,zero,8035da8 <tcp_input+0x152c>
      GOTO_DROP;
 8035d9c:	00812d04 	movi	r2,1204
 8035da0:	d0a0ad15 	stw	r2,-32076(gp)
 8035da4:	00032206 	br	8036a30 <tcp_input+0x21b4>

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
 8035da8:	e0bffc17 	ldw	r2,-16(fp)
 8035dac:	10800217 	ldw	r2,8(r2)
 8035db0:	10c000e0 	cmpeqi	r3,r2,3
 8035db4:	1800061e 	bne	r3,zero,8035dd0 <tcp_input+0x1554>
 8035db8:	10c000d0 	cmplti	r3,r2,3
 8035dbc:	18016a1e 	bne	r3,zero,8036368 <tcp_input+0x1aec>
 8035dc0:	10bfff04 	addi	r2,r2,-4
 8035dc4:	108001e8 	cmpgeui	r2,r2,7
 8035dc8:	1001671e 	bne	r2,zero,8036368 <tcp_input+0x1aec>
 8035dcc:	00002c06 	br	8035e80 <tcp_input+0x1604>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 8035dd0:	e0bffc17 	ldw	r2,-16(fp)
 8035dd4:	10c00e17 	ldw	r3,56(r2)
 8035dd8:	e0bff017 	ldw	r2,-64(fp)
 8035ddc:	10800717 	ldw	r2,28(r2)
 8035de0:	1885c83a 	sub	r2,r3,r2
 8035de4:	00800616 	blt	zero,r2,8035e00 <tcp_input+0x1584>
          SEQ_GT(ti->ti_ack, tp->snd_max))
 8035de8:	e0bff017 	ldw	r2,-64(fp)
 8035dec:	10c00717 	ldw	r3,28(r2)
 8035df0:	e0bffc17 	ldw	r2,-16(fp)
 8035df4:	10801a17 	ldw	r2,104(r2)
 8035df8:	1885c83a 	sub	r2,r3,r2
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 8035dfc:	0080080e 	bge	zero,r2,8035e20 <tcp_input+0x15a4>
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 8035e00:	008201b4 	movhi	r2,2054
 8035e04:	10bc2317 	ldw	r2,-3956(r2)
 8035e08:	10c00044 	addi	r3,r2,1
 8035e0c:	008201b4 	movhi	r2,2054
 8035e10:	10fc2315 	stw	r3,-3956(r2)
         GOTO_DROPWITHRESET;
 8035e14:	00813184 	movi	r2,1222
 8035e18:	d0a0ad15 	stw	r2,-32076(gp)
 8035e1c:	0002c506 	br	8036934 <tcp_input+0x20b8>
      }
      tcpstat.tcps_connects++;
 8035e20:	008201b4 	movhi	r2,2054
 8035e24:	10bc4c17 	ldw	r2,-3792(r2)
 8035e28:	10c00044 	addi	r3,r2,1
 8035e2c:	008201b4 	movhi	r2,2054
 8035e30:	10fc4c15 	stw	r3,-3792(r2)
      tp->t_state = TCPS_ESTABLISHED;
 8035e34:	e0bffc17 	ldw	r2,-16(fp)
 8035e38:	00c00104 	movi	r3,4
 8035e3c:	10c00215 	stw	r3,8(r2)
      soisconnected(so);
 8035e40:	e13ffa17 	ldw	r4,-24(fp)
 8035e44:	80329f40 	call	80329f4 <soisconnected>
      tp->t_maxseg = tcp_mss(so);
 8035e48:	e13ffa17 	ldw	r4,-24(fp)
 8035e4c:	8036fcc0 	call	8036fcc <tcp_mss>
 8035e50:	1007883a 	mov	r3,r2
 8035e54:	e0bffc17 	ldw	r2,-16(fp)
 8035e58:	10c00a0d 	sth	r3,40(r2)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
 8035e5c:	e1bfe417 	ldw	r6,-112(fp)
 8035e60:	000b883a 	mov	r5,zero
 8035e64:	e13ffc17 	ldw	r4,-16(fp)
 8035e68:	803448c0 	call	803448c <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
 8035e6c:	e0bff017 	ldw	r2,-64(fp)
 8035e70:	10800617 	ldw	r2,24(r2)
 8035e74:	10ffffc4 	addi	r3,r2,-1
 8035e78:	e0bffc17 	ldw	r2,-16(fp)
 8035e7c:	10c01115 	stw	r3,68(r2)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
 8035e80:	e0bff017 	ldw	r2,-64(fp)
 8035e84:	10c00717 	ldw	r3,28(r2)
 8035e88:	e0bffc17 	ldw	r2,-16(fp)
 8035e8c:	10800e17 	ldw	r2,56(r2)
 8035e90:	1885c83a 	sub	r2,r3,r2
 8035e94:	00806116 	blt	zero,r2,803601c <tcp_input+0x17a0>
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
 8035e98:	e0bff017 	ldw	r2,-64(fp)
 8035e9c:	1080028b 	ldhu	r2,10(r2)
 8035ea0:	10bfffcc 	andi	r2,r2,65535
 8035ea4:	1000581e 	bne	r2,zero,8036008 <tcp_input+0x178c>
 8035ea8:	e0bffc17 	ldw	r2,-16(fp)
 8035eac:	10801417 	ldw	r2,80(r2)
 8035eb0:	e0ffed17 	ldw	r3,-76(fp)
 8035eb4:	1880541e 	bne	r3,r2,8036008 <tcp_input+0x178c>
         {
            tcpstat.tcps_rcvdupack++;
 8035eb8:	008201b4 	movhi	r2,2054
 8035ebc:	10bc7317 	ldw	r2,-3636(r2)
 8035ec0:	10c00044 	addi	r3,r2,1
 8035ec4:	008201b4 	movhi	r2,2054
 8035ec8:	10fc7315 	stw	r3,-3636(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8035ecc:	e0bffc17 	ldw	r2,-16(fp)
 8035ed0:	10800317 	ldw	r2,12(r2)
 8035ed4:	10000526 	beq	r2,zero,8035eec <tcp_input+0x1670>
                ti->ti_ack != tp->snd_una)
 8035ed8:	e0bff017 	ldw	r2,-64(fp)
 8035edc:	10c00717 	ldw	r3,28(r2)
 8035ee0:	e0bffc17 	ldw	r2,-16(fp)
 8035ee4:	10800e17 	ldw	r2,56(r2)
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8035ee8:	18800326 	beq	r3,r2,8035ef8 <tcp_input+0x167c>
            {
               tp->t_dupacks = 0;
 8035eec:	e0bffc17 	ldw	r2,-16(fp)
 8035ef0:	10000915 	stw	zero,36(r2)
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8035ef4:	00004706 	br	8036014 <tcp_input+0x1798>
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
 8035ef8:	e0bffc17 	ldw	r2,-16(fp)
 8035efc:	10800917 	ldw	r2,36(r2)
 8035f00:	10c00044 	addi	r3,r2,1
 8035f04:	e0bffc17 	ldw	r2,-16(fp)
 8035f08:	10c00915 	stw	r3,36(r2)
 8035f0c:	e0bffc17 	ldw	r2,-16(fp)
 8035f10:	10c00917 	ldw	r3,36(r2)
 8035f14:	d0a03883 	ldbu	r2,-32542(gp)
 8035f18:	10803fcc 	andi	r2,r2,255
 8035f1c:	1080201c 	xori	r2,r2,128
 8035f20:	10bfe004 	addi	r2,r2,-128
 8035f24:	18803b1e 	bne	r3,r2,8036014 <tcp_input+0x1798>
            {
               tcp_seq onxt = tp->snd_nxt;
 8035f28:	e0bffc17 	ldw	r2,-16(fp)
 8035f2c:	10800f17 	ldw	r2,60(r2)
 8035f30:	e0bfe715 	stw	r2,-100(fp)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
 8035f34:	e0bffc17 	ldw	r2,-16(fp)
 8035f38:	11001417 	ldw	r4,80(r2)
 8035f3c:	e0bffc17 	ldw	r2,-16(fp)
 8035f40:	10c01b17 	ldw	r3,108(r2)
 8035f44:	2005883a 	mov	r2,r4
 8035f48:	1880012e 	bgeu	r3,r2,8035f50 <tcp_input+0x16d4>
 8035f4c:	1805883a 	mov	r2,r3
 8035f50:	1006d07a 	srli	r3,r2,1
               tp->t_maxseg;
 8035f54:	e0bffc17 	ldw	r2,-16(fp)
 8035f58:	10800a0b 	ldhu	r2,40(r2)
 8035f5c:	10bfffcc 	andi	r2,r2,65535
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
 8035f60:	100b883a 	mov	r5,r2
 8035f64:	1809883a 	mov	r4,r3
 8035f68:	800e2300 	call	800e230 <__udivsi3>
               u_short  win   =
 8035f6c:	e0bff28d 	sth	r2,-54(fp)

               if (win < 2)
 8035f70:	e0bff28b 	ldhu	r2,-54(fp)
 8035f74:	108000a8 	cmpgeui	r2,r2,2
 8035f78:	1000021e 	bne	r2,zero,8035f84 <tcp_input+0x1708>
                  win = 2;
 8035f7c:	00800084 	movi	r2,2
 8035f80:	e0bff28d 	sth	r2,-54(fp)
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
 8035f84:	e0bffc17 	ldw	r2,-16(fp)
 8035f88:	10800a0b 	ldhu	r2,40(r2)
 8035f8c:	e0fff28b 	ldhu	r3,-54(fp)
 8035f90:	1885383a 	mul	r2,r3,r2
 8035f94:	10ffffcc 	andi	r3,r2,65535
 8035f98:	e0bffc17 	ldw	r2,-16(fp)
 8035f9c:	10c01c15 	stw	r3,112(r2)

               tp->t_timer[TCPT_REXMT] = 0;
 8035fa0:	e0bffc17 	ldw	r2,-16(fp)
 8035fa4:	10000315 	stw	zero,12(r2)
               tp->t_rttick = 0;
 8035fa8:	e0bffc17 	ldw	r2,-16(fp)
 8035fac:	10001e15 	stw	zero,120(r2)
               tp->snd_nxt = ti->ti_ack;
 8035fb0:	e0bff017 	ldw	r2,-64(fp)
 8035fb4:	10c00717 	ldw	r3,28(r2)
 8035fb8:	e0bffc17 	ldw	r2,-16(fp)
 8035fbc:	10c00f15 	stw	r3,60(r2)
               tp->snd_cwnd = tp->t_maxseg;
 8035fc0:	e0bffc17 	ldw	r2,-16(fp)
 8035fc4:	10800a0b 	ldhu	r2,40(r2)
 8035fc8:	10ffffcc 	andi	r3,r2,65535
 8035fcc:	e0bffc17 	ldw	r2,-16(fp)
 8035fd0:	10c01b15 	stw	r3,108(r2)
               (void) tcp_output(tp);
 8035fd4:	e13ffc17 	ldw	r4,-16(fp)
 8035fd8:	80370c40 	call	80370c4 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
 8035fdc:	e0bffc17 	ldw	r2,-16(fp)
 8035fe0:	10800f17 	ldw	r2,60(r2)
 8035fe4:	e0ffe717 	ldw	r3,-100(fp)
 8035fe8:	1885c83a 	sub	r2,r3,r2
 8035fec:	0080030e 	bge	zero,r2,8035ffc <tcp_input+0x1780>
                  tp->snd_nxt = onxt;
 8035ff0:	e0bffc17 	ldw	r2,-16(fp)
 8035ff4:	e0ffe717 	ldw	r3,-100(fp)
 8035ff8:	10c00f15 	stw	r3,60(r2)
               GOTO_DROP;
 8035ffc:	00814544 	movi	r2,1301
 8036000:	d0a0ad15 	stw	r2,-32076(gp)
 8036004:	00028a06 	br	8036a30 <tcp_input+0x21b4>
            }
         } else
            tp->t_dupacks = 0;
 8036008:	e0bffc17 	ldw	r2,-16(fp)
 803600c:	10000915 	stw	zero,36(r2)
         break;
 8036010:	0000d506 	br	8036368 <tcp_input+0x1aec>
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 8036014:	0001883a 	nop
         break;
 8036018:	0000d306 	br	8036368 <tcp_input+0x1aec>
      }
      tp->t_dupacks = 0;
 803601c:	e0bffc17 	ldw	r2,-16(fp)
 8036020:	10000915 	stw	zero,36(r2)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
 8036024:	e0bff017 	ldw	r2,-64(fp)
 8036028:	10c00717 	ldw	r3,28(r2)
 803602c:	e0bffc17 	ldw	r2,-16(fp)
 8036030:	10801a17 	ldw	r2,104(r2)
 8036034:	1885c83a 	sub	r2,r3,r2
 8036038:	0080060e 	bge	zero,r2,8036054 <tcp_input+0x17d8>
      {
         tcpstat.tcps_rcvacktoomuch++;
 803603c:	008201b4 	movhi	r2,2054
 8036040:	10bc7417 	ldw	r2,-3632(r2)
 8036044:	10c00044 	addi	r3,r2,1
 8036048:	008201b4 	movhi	r2,2054
 803604c:	10fc7415 	stw	r3,-3632(r2)
         goto dropafterack;
 8036050:	00022706 	br	80368f0 <tcp_input+0x2074>
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
 8036054:	e0bff017 	ldw	r2,-64(fp)
 8036058:	10c00717 	ldw	r3,28(r2)
 803605c:	e0bffc17 	ldw	r2,-16(fp)
 8036060:	10800e17 	ldw	r2,56(r2)
 8036064:	1885c83a 	sub	r2,r3,r2
 8036068:	e0bfec15 	stw	r2,-80(fp)
      tcpstat.tcps_rcvackpack++;
 803606c:	008201b4 	movhi	r2,2054
 8036070:	10bc7517 	ldw	r2,-3628(r2)
 8036074:	10c00044 	addi	r3,r2,1
 8036078:	008201b4 	movhi	r2,2054
 803607c:	10fc7515 	stw	r3,-3628(r2)
      tcpstat.tcps_rcvackbyte += acked;
 8036080:	008201b4 	movhi	r2,2054
 8036084:	10fc7617 	ldw	r3,-3624(r2)
 8036088:	e0bfec17 	ldw	r2,-80(fp)
 803608c:	1887883a 	add	r3,r3,r2
 8036090:	008201b4 	movhi	r2,2054
 8036094:	10fc7615 	stw	r3,-3624(r2)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
 8036098:	e0bffc17 	ldw	r2,-16(fp)
 803609c:	10801e17 	ldw	r2,120(r2)
 80360a0:	10000826 	beq	r2,zero,80360c4 <tcp_input+0x1848>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
 80360a4:	e0bff017 	ldw	r2,-64(fp)
 80360a8:	10c00717 	ldw	r3,28(r2)
 80360ac:	e0bffc17 	ldw	r2,-16(fp)
 80360b0:	10801f17 	ldw	r2,124(r2)
 80360b4:	1885c83a 	sub	r2,r3,r2
      if((tp->t_rttick) && 
 80360b8:	0080020e 	bge	zero,r2,80360c4 <tcp_input+0x1848>
         tcp_xmit_timer(tp);
 80360bc:	e13ffc17 	ldw	r4,-16(fp)
 80360c0:	8036d480 	call	8036d48 <tcp_xmit_timer>
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
 80360c4:	e0bff017 	ldw	r2,-64(fp)
 80360c8:	10c00717 	ldw	r3,28(r2)
 80360cc:	e0bffc17 	ldw	r2,-16(fp)
 80360d0:	10801a17 	ldw	r2,104(r2)
 80360d4:	1880051e 	bne	r3,r2,80360ec <tcp_input+0x1870>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 80360d8:	e0bffc17 	ldw	r2,-16(fp)
 80360dc:	10000315 	stw	zero,12(r2)
         needoutput = 1;
 80360e0:	00800044 	movi	r2,1
 80360e4:	e0bff715 	stw	r2,-36(fp)
 80360e8:	00000706 	br	8036108 <tcp_input+0x188c>
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
 80360ec:	e0bffc17 	ldw	r2,-16(fp)
 80360f0:	10800417 	ldw	r2,16(r2)
 80360f4:	1000041e 	bne	r2,zero,8036108 <tcp_input+0x188c>
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 80360f8:	e0bffc17 	ldw	r2,-16(fp)
 80360fc:	10c00817 	ldw	r3,32(r2)
 8036100:	e0bffc17 	ldw	r2,-16(fp)
 8036104:	10c00315 	stw	r3,12(r2)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
 8036108:	e0bffc17 	ldw	r2,-16(fp)
 803610c:	10801b17 	ldw	r2,108(r2)
 8036110:	e0bfe815 	stw	r2,-96(fp)
         u_short  incr  =  tp->t_maxseg;
 8036114:	e0bffc17 	ldw	r2,-16(fp)
 8036118:	10800a0b 	ldhu	r2,40(r2)
 803611c:	e0bff20d 	sth	r2,-56(fp)

         if (cw > tp->snd_ssthresh)
 8036120:	e0bffc17 	ldw	r2,-16(fp)
 8036124:	10c01c17 	ldw	r3,112(r2)
 8036128:	e0bfe817 	ldw	r2,-96(fp)
 803612c:	18800a2e 	bgeu	r3,r2,8036158 <tcp_input+0x18dc>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
 8036130:	e0fff20b 	ldhu	r3,-56(fp)
 8036134:	e0bff20b 	ldhu	r2,-56(fp)
 8036138:	1885383a 	mul	r2,r3,r2
 803613c:	e17fe817 	ldw	r5,-96(fp)
 8036140:	1009883a 	mov	r4,r2
 8036144:	800e2300 	call	800e230 <__udivsi3>
 8036148:	10c00428 	cmpgeui	r3,r2,16
 803614c:	1800011e 	bne	r3,zero,8036154 <tcp_input+0x18d8>
 8036150:	00800404 	movi	r2,16
 8036154:	e0bff20d 	sth	r2,-56(fp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
 8036158:	e0fff20b 	ldhu	r3,-56(fp)
 803615c:	e0bfe817 	ldw	r2,-96(fp)
 8036160:	1885883a 	add	r2,r3,r2
 8036164:	10d80070 	cmpltui	r3,r2,24577
 8036168:	1800011e 	bne	r3,zero,8036170 <tcp_input+0x18f4>
 803616c:	00980004 	movi	r2,24576
 8036170:	e0fffc17 	ldw	r3,-16(fp)
 8036174:	18801b15 	stw	r2,108(r3)
      }
      if (acked > (int)so->so_snd.sb_cc) 
 8036178:	e0bffa17 	ldw	r2,-24(fp)
 803617c:	10801217 	ldw	r2,72(r2)
 8036180:	1007883a 	mov	r3,r2
 8036184:	e0bfec17 	ldw	r2,-80(fp)
 8036188:	1880120e 	bge	r3,r2,80361d4 <tcp_input+0x1958>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 803618c:	e0bffc17 	ldw	r2,-16(fp)
 8036190:	10c01417 	ldw	r3,80(r2)
 8036194:	e0bffa17 	ldw	r2,-24(fp)
 8036198:	10801217 	ldw	r2,72(r2)
 803619c:	10bfffcc 	andi	r2,r2,65535
 80361a0:	1887c83a 	sub	r3,r3,r2
 80361a4:	e0bffc17 	ldw	r2,-16(fp)
 80361a8:	10c01415 	stw	r3,80(r2)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 80361ac:	e0bffa17 	ldw	r2,-24(fp)
 80361b0:	10c01204 	addi	r3,r2,72
 80361b4:	e0bffa17 	ldw	r2,-24(fp)
 80361b8:	10801217 	ldw	r2,72(r2)
 80361bc:	100b883a 	mov	r5,r2
 80361c0:	1809883a 	mov	r4,r3
 80361c4:	80338c00 	call	80338c0 <sbdrop>
         ourfinisacked = 1;
 80361c8:	00800044 	movi	r2,1
 80361cc:	e0bff815 	stw	r2,-32(fp)
 80361d0:	00000d06 	br	8036208 <tcp_input+0x198c>
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
 80361d4:	e0bffa17 	ldw	r2,-24(fp)
 80361d8:	10801204 	addi	r2,r2,72
 80361dc:	e17fec17 	ldw	r5,-80(fp)
 80361e0:	1009883a 	mov	r4,r2
 80361e4:	80338c00 	call	80338c0 <sbdrop>
         tp->snd_wnd -= (u_short)acked;
 80361e8:	e0bffc17 	ldw	r2,-16(fp)
 80361ec:	10c01417 	ldw	r3,80(r2)
 80361f0:	e0bfec17 	ldw	r2,-80(fp)
 80361f4:	10bfffcc 	andi	r2,r2,65535
 80361f8:	1887c83a 	sub	r3,r3,r2
 80361fc:	e0bffc17 	ldw	r2,-16(fp)
 8036200:	10c01415 	stw	r3,80(r2)
         ourfinisacked = 0;
 8036204:	e03ff815 	stw	zero,-32(fp)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 8036208:	e0bffa17 	ldw	r2,-24(fp)
 803620c:	1080190b 	ldhu	r2,100(r2)
 8036210:	10bfffcc 	andi	r2,r2,65535
 8036214:	1080030c 	andi	r2,r2,12
 8036218:	10000526 	beq	r2,zero,8036230 <tcp_input+0x19b4>
         sowwakeup(so);
 803621c:	e0bffa17 	ldw	r2,-24(fp)
 8036220:	10801204 	addi	r2,r2,72
 8036224:	100b883a 	mov	r5,r2
 8036228:	e13ffa17 	ldw	r4,-24(fp)
 803622c:	80331580 	call	8033158 <sbwakeup>

      tp->snd_una = ti->ti_ack;
 8036230:	e0bff017 	ldw	r2,-64(fp)
 8036234:	10c00717 	ldw	r3,28(r2)
 8036238:	e0bffc17 	ldw	r2,-16(fp)
 803623c:	10c00e15 	stw	r3,56(r2)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 8036240:	e0bffc17 	ldw	r2,-16(fp)
 8036244:	10c00f17 	ldw	r3,60(r2)
 8036248:	e0bffc17 	ldw	r2,-16(fp)
 803624c:	10800e17 	ldw	r2,56(r2)
 8036250:	1885c83a 	sub	r2,r3,r2
 8036254:	1000040e 	bge	r2,zero,8036268 <tcp_input+0x19ec>
         tp->snd_nxt = tp->snd_una;
 8036258:	e0bffc17 	ldw	r2,-16(fp)
 803625c:	10c00e17 	ldw	r3,56(r2)
 8036260:	e0bffc17 	ldw	r2,-16(fp)
 8036264:	10c00f15 	stw	r3,60(r2)


      switch (tp->t_state) 
 8036268:	e0bffc17 	ldw	r2,-16(fp)
 803626c:	10800217 	ldw	r2,8(r2)
 8036270:	10c002a0 	cmpeqi	r3,r2,10
 8036274:	1800311e 	bne	r3,zero,803633c <tcp_input+0x1ac0>
 8036278:	10c002c8 	cmpgei	r3,r2,11
 803627c:	18003a1e 	bne	r3,zero,8036368 <tcp_input+0x1aec>
 8036280:	10c00220 	cmpeqi	r3,r2,8
 8036284:	1800261e 	bne	r3,zero,8036320 <tcp_input+0x1aa4>
 8036288:	10c00248 	cmpgei	r3,r2,9
 803628c:	1800361e 	bne	r3,zero,8036368 <tcp_input+0x1aec>
 8036290:	10c001a0 	cmpeqi	r3,r2,6
 8036294:	1800031e 	bne	r3,zero,80362a4 <tcp_input+0x1a28>
 8036298:	108001e0 	cmpeqi	r2,r2,7
 803629c:	1000111e 	bne	r2,zero,80362e4 <tcp_input+0x1a68>
 80362a0:	00003106 	br	8036368 <tcp_input+0x1aec>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
 80362a4:	e0bff817 	ldw	r2,-32(fp)
 80362a8:	10002a26 	beq	r2,zero,8036354 <tcp_input+0x1ad8>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
 80362ac:	e0bffa17 	ldw	r2,-24(fp)
 80362b0:	1080088b 	ldhu	r2,34(r2)
 80362b4:	10bfffcc 	andi	r2,r2,65535
 80362b8:	1080080c 	andi	r2,r2,32
 80362bc:	10000526 	beq	r2,zero,80362d4 <tcp_input+0x1a58>
            {
               soisdisconnected(so);
 80362c0:	e13ffa17 	ldw	r4,-24(fp)
 80362c4:	8032b900 	call	8032b90 <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
 80362c8:	d0e0af17 	ldw	r3,-32068(gp)
 80362cc:	e0bffc17 	ldw	r2,-16(fp)
 80362d0:	10c00615 	stw	r3,24(r2)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
 80362d4:	e0bffc17 	ldw	r2,-16(fp)
 80362d8:	00c00244 	movi	r3,9
 80362dc:	10c00215 	stw	r3,8(r2)
         }
         break;
 80362e0:	00001c06 	br	8036354 <tcp_input+0x1ad8>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
 80362e4:	e0bff817 	ldw	r2,-32(fp)
 80362e8:	10001c26 	beq	r2,zero,803635c <tcp_input+0x1ae0>
         {
            tp->t_state = TCPS_TIME_WAIT;
 80362ec:	e0bffc17 	ldw	r2,-16(fp)
 80362f0:	00c00284 	movi	r3,10
 80362f4:	10c00215 	stw	r3,8(r2)
            tcp_canceltimers(tp);
 80362f8:	e13ffc17 	ldw	r4,-16(fp)
 80362fc:	8038d8c0 	call	8038d8c <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 8036300:	d0a03717 	ldw	r2,-32548(gp)
 8036304:	1085883a 	add	r2,r2,r2
 8036308:	1007883a 	mov	r3,r2
 803630c:	e0bffc17 	ldw	r2,-16(fp)
 8036310:	10c00615 	stw	r3,24(r2)
            soisdisconnected(so);
 8036314:	e13ffa17 	ldw	r4,-24(fp)
 8036318:	8032b900 	call	8032b90 <soisdisconnected>
         }
         break;
 803631c:	00000f06 	br	803635c <tcp_input+0x1ae0>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
 8036320:	e0bff817 	ldw	r2,-32(fp)
 8036324:	10000f26 	beq	r2,zero,8036364 <tcp_input+0x1ae8>
         {
            SETTP(tp, tcp_close(tp));
 8036328:	e13ffc17 	ldw	r4,-16(fp)
 803632c:	80389100 	call	8038910 <tcp_close>
            GOTO_DROP;
 8036330:	00816644 	movi	r2,1433
 8036334:	d0a0ad15 	stw	r2,-32076(gp)
 8036338:	0001bd06 	br	8036a30 <tcp_input+0x21b4>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 803633c:	d0a03717 	ldw	r2,-32548(gp)
 8036340:	1085883a 	add	r2,r2,r2
 8036344:	1007883a 	mov	r3,r2
 8036348:	e0bffc17 	ldw	r2,-16(fp)
 803634c:	10c00615 	stw	r3,24(r2)
         goto dropafterack;
 8036350:	00016706 	br	80368f0 <tcp_input+0x2074>
         break;
 8036354:	0001883a 	nop
 8036358:	00000306 	br	8036368 <tcp_input+0x1aec>
         break;
 803635c:	0001883a 	nop
 8036360:	00000106 	br	8036368 <tcp_input+0x1aec>
         break;
 8036364:	0001883a 	nop
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
 8036368:	e0bffb17 	ldw	r2,-20(fp)
 803636c:	1080040c 	andi	r2,r2,16
 8036370:	10004226 	beq	r2,zero,803647c <tcp_input+0x1c00>
       /*
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 8036374:	e0bffc17 	ldw	r2,-16(fp)
 8036378:	10c01117 	ldw	r3,68(r2)
 803637c:	e0bff017 	ldw	r2,-64(fp)
 8036380:	10800617 	ldw	r2,24(r2)
 8036384:	1885c83a 	sub	r2,r3,r2
   if ((tiflags & TH_ACK) &&
 8036388:	10001416 	blt	r2,zero,80363dc <tcp_input+0x1b60>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 803638c:	e0bffc17 	ldw	r2,-16(fp)
 8036390:	10c01117 	ldw	r3,68(r2)
 8036394:	e0bff017 	ldw	r2,-64(fp)
 8036398:	10800617 	ldw	r2,24(r2)
 803639c:	1880371e 	bne	r3,r2,803647c <tcp_input+0x1c00>
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
 80363a0:	e0bffc17 	ldw	r2,-16(fp)
 80363a4:	10c01217 	ldw	r3,72(r2)
 80363a8:	e0bff017 	ldw	r2,-64(fp)
 80363ac:	10800717 	ldw	r2,28(r2)
 80363b0:	1885c83a 	sub	r2,r3,r2
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
 80363b4:	10000916 	blt	r2,zero,80363dc <tcp_input+0x1b60>
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
 80363b8:	e0bffc17 	ldw	r2,-16(fp)
 80363bc:	10c01217 	ldw	r3,72(r2)
 80363c0:	e0bff017 	ldw	r2,-64(fp)
 80363c4:	10800717 	ldw	r2,28(r2)
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
 80363c8:	18802c1e 	bne	r3,r2,803647c <tcp_input+0x1c00>
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
 80363cc:	e0bffc17 	ldw	r2,-16(fp)
 80363d0:	10c01417 	ldw	r3,80(r2)
 80363d4:	e0bfed17 	ldw	r2,-76(fp)
 80363d8:	1880282e 	bgeu	r3,r2,803647c <tcp_input+0x1c00>
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
 80363dc:	e0bff017 	ldw	r2,-64(fp)
 80363e0:	1080028b 	ldhu	r2,10(r2)
 80363e4:	10bfffcc 	andi	r2,r2,65535
 80363e8:	10000e1e 	bne	r2,zero,8036424 <tcp_input+0x1ba8>
          (tp->snd_wl2 == ti->ti_ack) &&
 80363ec:	e0bffc17 	ldw	r2,-16(fp)
 80363f0:	10c01217 	ldw	r3,72(r2)
 80363f4:	e0bff017 	ldw	r2,-64(fp)
 80363f8:	10800717 	ldw	r2,28(r2)
      if ((ti->ti_len == 0) &&
 80363fc:	1880091e 	bne	r3,r2,8036424 <tcp_input+0x1ba8>
          (rx_win > tp->snd_wnd))
 8036400:	e0bffc17 	ldw	r2,-16(fp)
 8036404:	10c01417 	ldw	r3,80(r2)
          (tp->snd_wl2 == ti->ti_ack) &&
 8036408:	e0bfed17 	ldw	r2,-76(fp)
 803640c:	1880052e 	bgeu	r3,r2,8036424 <tcp_input+0x1ba8>
      {
         tcpstat.tcps_rcvwinupd++;
 8036410:	008201b4 	movhi	r2,2054
 8036414:	10bc7717 	ldw	r2,-3620(r2)
 8036418:	10c00044 	addi	r3,r2,1
 803641c:	008201b4 	movhi	r2,2054
 8036420:	10fc7715 	stw	r3,-3620(r2)
      }
      tp->snd_wnd = rx_win;
 8036424:	e0bffc17 	ldw	r2,-16(fp)
 8036428:	e0ffed17 	ldw	r3,-76(fp)
 803642c:	10c01415 	stw	r3,80(r2)
      tp->snd_wl1 = ti->ti_seq;
 8036430:	e0bff017 	ldw	r2,-64(fp)
 8036434:	10c00617 	ldw	r3,24(r2)
 8036438:	e0bffc17 	ldw	r2,-16(fp)
 803643c:	10c01115 	stw	r3,68(r2)
      tp->snd_wl2 = ti->ti_ack;
 8036440:	e0bff017 	ldw	r2,-64(fp)
 8036444:	10c00717 	ldw	r3,28(r2)
 8036448:	e0bffc17 	ldw	r2,-16(fp)
 803644c:	10c01215 	stw	r3,72(r2)
      if (tp->snd_wnd > tp->max_sndwnd)
 8036450:	e0bffc17 	ldw	r2,-16(fp)
 8036454:	10801417 	ldw	r2,80(r2)
 8036458:	e0fffc17 	ldw	r3,-16(fp)
 803645c:	18c02317 	ldw	r3,140(r3)
 8036460:	1880042e 	bgeu	r3,r2,8036474 <tcp_input+0x1bf8>
         tp->max_sndwnd = tp->snd_wnd;
 8036464:	e0bffc17 	ldw	r2,-16(fp)
 8036468:	10c01417 	ldw	r3,80(r2)
 803646c:	e0bffc17 	ldw	r2,-16(fp)
 8036470:	10c02315 	stw	r3,140(r2)
      needoutput = 1;
 8036474:	00800044 	movi	r2,1
 8036478:	e0bff715 	stw	r2,-36(fp)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
 803647c:	e0bffb17 	ldw	r2,-20(fp)
 8036480:	1080080c 	andi	r2,r2,32
 8036484:	10005626 	beq	r2,zero,80365e0 <tcp_input+0x1d64>
 8036488:	e0bff017 	ldw	r2,-64(fp)
 803648c:	1080098b 	ldhu	r2,38(r2)
 8036490:	10bfffcc 	andi	r2,r2,65535
 8036494:	10005226 	beq	r2,zero,80365e0 <tcp_input+0x1d64>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 8036498:	e0bffc17 	ldw	r2,-16(fp)
 803649c:	10800217 	ldw	r2,8(r2)
   if ((tiflags & TH_URG) && ti->ti_urp &&
 80364a0:	10800288 	cmpgei	r2,r2,10
 80364a4:	10004e1e 	bne	r2,zero,80365e0 <tcp_input+0x1d64>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
 80364a8:	e0bff017 	ldw	r2,-64(fp)
 80364ac:	1080098b 	ldhu	r2,38(r2)
 80364b0:	10ffffcc 	andi	r3,r2,65535
 80364b4:	e0bffa17 	ldw	r2,-24(fp)
 80364b8:	10800a17 	ldw	r2,40(r2)
 80364bc:	1885883a 	add	r2,r3,r2
 80364c0:	10900070 	cmpltui	r2,r2,16385
 80364c4:	1000071e 	bne	r2,zero,80364e4 <tcp_input+0x1c68>
      {
         ti->ti_urp = 0;         /* XXX */
 80364c8:	e0bff017 	ldw	r2,-64(fp)
 80364cc:	1000098d 	sth	zero,38(r2)
         tiflags &= ~TH_URG;     /* XXX */
 80364d0:	e0fffb17 	ldw	r3,-20(fp)
 80364d4:	00bff7c4 	movi	r2,-33
 80364d8:	1884703a 	and	r2,r3,r2
 80364dc:	e0bffb15 	stw	r2,-20(fp)
         goto dodata;         /* XXX */
 80364e0:	00004d06 	br	8036618 <tcp_input+0x1d9c>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
 80364e4:	e0bff017 	ldw	r2,-64(fp)
 80364e8:	10c00617 	ldw	r3,24(r2)
 80364ec:	e0bff017 	ldw	r2,-64(fp)
 80364f0:	1080098b 	ldhu	r2,38(r2)
 80364f4:	10bfffcc 	andi	r2,r2,65535
 80364f8:	1887883a 	add	r3,r3,r2
 80364fc:	e0bffc17 	ldw	r2,-16(fp)
 8036500:	10801717 	ldw	r2,92(r2)
 8036504:	1885c83a 	sub	r2,r3,r2
 8036508:	0080250e 	bge	zero,r2,80365a0 <tcp_input+0x1d24>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
 803650c:	e0bff017 	ldw	r2,-64(fp)
 8036510:	10c00617 	ldw	r3,24(r2)
 8036514:	e0bff017 	ldw	r2,-64(fp)
 8036518:	1080098b 	ldhu	r2,38(r2)
 803651c:	10bfffcc 	andi	r2,r2,65535
 8036520:	1887883a 	add	r3,r3,r2
 8036524:	e0bffc17 	ldw	r2,-16(fp)
 8036528:	10c01715 	stw	r3,92(r2)
         so->so_oobmark = so->so_rcv.sb_cc +
 803652c:	e0bffa17 	ldw	r2,-24(fp)
 8036530:	10c00a17 	ldw	r3,40(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
 8036534:	e0bffc17 	ldw	r2,-16(fp)
 8036538:	11001717 	ldw	r4,92(r2)
 803653c:	e0bffc17 	ldw	r2,-16(fp)
 8036540:	10801617 	ldw	r2,88(r2)
 8036544:	2085c83a 	sub	r2,r4,r2
         so->so_oobmark = so->so_rcv.sb_cc +
 8036548:	1885883a 	add	r2,r3,r2
         (tp->rcv_up - tp->rcv_nxt) - 1;
 803654c:	10ffffc4 	addi	r3,r2,-1
         so->so_oobmark = so->so_rcv.sb_cc +
 8036550:	e0bffa17 	ldw	r2,-24(fp)
 8036554:	10c01a15 	stw	r3,104(r2)
         if (so->so_oobmark == 0)
 8036558:	e0bffa17 	ldw	r2,-24(fp)
 803655c:	10801a17 	ldw	r2,104(r2)
 8036560:	1000061e 	bne	r2,zero,803657c <tcp_input+0x1d00>
            so->so_state |= SS_RCVATMARK;
 8036564:	e0bffa17 	ldw	r2,-24(fp)
 8036568:	1080088b 	ldhu	r2,34(r2)
 803656c:	10801014 	ori	r2,r2,64
 8036570:	1007883a 	mov	r3,r2
 8036574:	e0bffa17 	ldw	r2,-24(fp)
 8036578:	10c0088d 	sth	r3,34(r2)
         sohasoutofband(so);
 803657c:	e13ffa17 	ldw	r4,-24(fp)
 8036580:	80329380 	call	8032938 <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 8036584:	e0bffc17 	ldw	r2,-16(fp)
 8036588:	10c02403 	ldbu	r3,144(r2)
 803658c:	00bfff04 	movi	r2,-4
 8036590:	1884703a 	and	r2,r3,r2
 8036594:	1007883a 	mov	r3,r2
 8036598:	e0bffc17 	ldw	r2,-16(fp)
 803659c:	10c02405 	stb	r3,144(r2)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
 80365a0:	e0bff017 	ldw	r2,-64(fp)
 80365a4:	1100098b 	ldhu	r4,38(r2)
 80365a8:	e0bff017 	ldw	r2,-64(fp)
 80365ac:	10c0028b 	ldhu	r3,10(r2)
 80365b0:	20bfffcc 	andi	r2,r4,65535
 80365b4:	18ffffcc 	andi	r3,r3,65535
 80365b8:	18801436 	bltu	r3,r2,803660c <tcp_input+0x1d90>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
 80365bc:	e0bffa17 	ldw	r2,-24(fp)
 80365c0:	10800417 	ldw	r2,16(r2)
 80365c4:	1080400c 	andi	r2,r2,256
 80365c8:	1000101e 	bne	r2,zero,803660c <tcp_input+0x1d90>
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
 80365cc:	e1bfe417 	ldw	r6,-112(fp)
 80365d0:	e17ff017 	ldw	r5,-64(fp)
 80365d4:	e13ffa17 	ldw	r4,-24(fp)
 80365d8:	8036c1c0 	call	8036c1c <tcp_pulloutofband>
      if ( (ti->ti_urp <= ti->ti_len)
 80365dc:	00000b06 	br	803660c <tcp_input+0x1d90>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
 80365e0:	e0bffc17 	ldw	r2,-16(fp)
 80365e4:	10c01617 	ldw	r3,88(r2)
 80365e8:	e0bffc17 	ldw	r2,-16(fp)
 80365ec:	10801717 	ldw	r2,92(r2)
 80365f0:	1885c83a 	sub	r2,r3,r2
 80365f4:	0080070e 	bge	zero,r2,8036614 <tcp_input+0x1d98>
      tp->rcv_up = tp->rcv_nxt;
 80365f8:	e0bffc17 	ldw	r2,-16(fp)
 80365fc:	10c01617 	ldw	r3,88(r2)
 8036600:	e0bffc17 	ldw	r2,-16(fp)
 8036604:	10c01715 	stw	r3,92(r2)
 8036608:	00000306 	br	8036618 <tcp_input+0x1d9c>
      if ( (ti->ti_urp <= ti->ti_len)
 803660c:	0001883a 	nop
 8036610:	00000106 	br	8036618 <tcp_input+0x1d9c>
dodata:                       /* XXX */
 8036614:	0001883a 	nop
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 8036618:	e0bff017 	ldw	r2,-64(fp)
 803661c:	1080028b 	ldhu	r2,10(r2)
 8036620:	10bfffcc 	andi	r2,r2,65535
 8036624:	1000031e 	bne	r2,zero,8036634 <tcp_input+0x1db8>
 8036628:	e0bffb17 	ldw	r2,-20(fp)
 803662c:	1080004c 	andi	r2,r2,1
 8036630:	10005a26 	beq	r2,zero,803679c <tcp_input+0x1f20>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 8036634:	e0bffc17 	ldw	r2,-16(fp)
 8036638:	10800217 	ldw	r2,8(r2)
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 803663c:	10800288 	cmpgei	r2,r2,10
 8036640:	1000561e 	bne	r2,zero,803679c <tcp_input+0x1f20>
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 8036644:	e0bff017 	ldw	r2,-64(fp)
 8036648:	10c00617 	ldw	r3,24(r2)
 803664c:	e0bffc17 	ldw	r2,-16(fp)
 8036650:	10801617 	ldw	r2,88(r2)
 8036654:	1880331e 	bne	r3,r2,8036724 <tcp_input+0x1ea8>
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
 8036658:	e0bffc17 	ldw	r2,-16(fp)
 803665c:	10800017 	ldw	r2,0(r2)
      if((ti->ti_seq == tp->rcv_nxt) &&
 8036660:	e0fffc17 	ldw	r3,-16(fp)
 8036664:	18802f1e 	bne	r3,r2,8036724 <tcp_input+0x1ea8>
         (tp->t_state == TCPS_ESTABLISHED))
 8036668:	e0bffc17 	ldw	r2,-16(fp)
 803666c:	10800217 	ldw	r2,8(r2)
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
 8036670:	10800118 	cmpnei	r2,r2,4
 8036674:	10002b1e 	bne	r2,zero,8036724 <tcp_input+0x1ea8>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
 8036678:	e0bffc17 	ldw	r2,-16(fp)
 803667c:	10800b0b 	ldhu	r2,44(r2)
 8036680:	10800054 	ori	r2,r2,1
 8036684:	1007883a 	mov	r3,r2
 8036688:	e0bffc17 	ldw	r2,-16(fp)
 803668c:	10c00b0d 	sth	r3,44(r2)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
 8036690:	e0bffc17 	ldw	r2,-16(fp)
 8036694:	10c01617 	ldw	r3,88(r2)
 8036698:	e0bff017 	ldw	r2,-64(fp)
 803669c:	1080028b 	ldhu	r2,10(r2)
 80366a0:	10bfffcc 	andi	r2,r2,65535
 80366a4:	1887883a 	add	r3,r3,r2
 80366a8:	e0bffc17 	ldw	r2,-16(fp)
 80366ac:	10c01615 	stw	r3,88(r2)
         tiflags = ti->ti_flags & TH_FIN;
 80366b0:	e0bff017 	ldw	r2,-64(fp)
 80366b4:	10800843 	ldbu	r2,33(r2)
 80366b8:	10803fcc 	andi	r2,r2,255
 80366bc:	1080004c 	andi	r2,r2,1
 80366c0:	e0bffb15 	stw	r2,-20(fp)
         tcpstat.tcps_rcvpack++;
 80366c4:	008201b4 	movhi	r2,2054
 80366c8:	10bc6417 	ldw	r2,-3696(r2)
 80366cc:	10c00044 	addi	r3,r2,1
 80366d0:	008201b4 	movhi	r2,2054
 80366d4:	10fc6415 	stw	r3,-3696(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 80366d8:	008201b4 	movhi	r2,2054
 80366dc:	10fc6517 	ldw	r3,-3692(r2)
 80366e0:	e0bff017 	ldw	r2,-64(fp)
 80366e4:	1080028b 	ldhu	r2,10(r2)
 80366e8:	10bfffcc 	andi	r2,r2,65535
 80366ec:	1887883a 	add	r3,r3,r2
 80366f0:	008201b4 	movhi	r2,2054
 80366f4:	10fc6515 	stw	r3,-3692(r2)
         sbappend(&so->so_rcv, (m));
 80366f8:	e0bffa17 	ldw	r2,-24(fp)
 80366fc:	10800a04 	addi	r2,r2,40
 8036700:	e17fe417 	ldw	r5,-112(fp)
 8036704:	1009883a 	mov	r4,r2
 8036708:	80333080 	call	8033308 <sbappend>
         sorwakeup(so);
 803670c:	e0bffa17 	ldw	r2,-24(fp)
 8036710:	10800a04 	addi	r2,r2,40
 8036714:	100b883a 	mov	r5,r2
 8036718:	e13ffa17 	ldw	r4,-24(fp)
 803671c:	80331580 	call	8033158 <sbwakeup>
 8036720:	00000b06 	br	8036750 <tcp_input+0x1ed4>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
 8036724:	e1bfe417 	ldw	r6,-112(fp)
 8036728:	e17ff017 	ldw	r5,-64(fp)
 803672c:	e13ffc17 	ldw	r4,-16(fp)
 8036730:	803448c0 	call	803448c <tcp_reass>
 8036734:	e0bffb15 	stw	r2,-20(fp)
         tp->t_flags |= TF_ACKNOW;
 8036738:	e0bffc17 	ldw	r2,-16(fp)
 803673c:	10800b0b 	ldhu	r2,44(r2)
 8036740:	10800054 	ori	r2,r2,1
 8036744:	1007883a 	mov	r3,r2
 8036748:	e0bffc17 	ldw	r2,-16(fp)
 803674c:	10c00b0d 	sth	r3,44(r2)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
 8036750:	e0bffa17 	ldw	r2,-24(fp)
 8036754:	10c00b17 	ldw	r3,44(r2)
 8036758:	e0bffc17 	ldw	r2,-16(fp)
 803675c:	11001617 	ldw	r4,88(r2)
 8036760:	e0bffc17 	ldw	r2,-16(fp)
 8036764:	10801917 	ldw	r2,100(r2)
 8036768:	2085c83a 	sub	r2,r4,r2
 803676c:	1885883a 	add	r2,r3,r2
 8036770:	e0bfe615 	stw	r2,-104(fp)
      if (len > (int)tp->max_rcvd)
 8036774:	e0bffc17 	ldw	r2,-16(fp)
 8036778:	10802217 	ldw	r2,136(r2)
 803677c:	1007883a 	mov	r3,r2
 8036780:	e0bfe617 	ldw	r2,-104(fp)
 8036784:	18800b0e 	bge	r3,r2,80367b4 <tcp_input+0x1f38>
         tp->max_rcvd = (u_short)len;
 8036788:	e0bfe617 	ldw	r2,-104(fp)
 803678c:	10ffffcc 	andi	r3,r2,65535
 8036790:	e0bffc17 	ldw	r2,-16(fp)
 8036794:	10c02215 	stw	r3,136(r2)
      if (len > (int)tp->max_rcvd)
 8036798:	00000606 	br	80367b4 <tcp_input+0x1f38>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
 803679c:	e13fe417 	ldw	r4,-112(fp)
 80367a0:	802d4340 	call	802d434 <m_freem>
      tiflags &= ~TH_FIN;
 80367a4:	e0fffb17 	ldw	r3,-20(fp)
 80367a8:	00bfff84 	movi	r2,-2
 80367ac:	1884703a 	and	r2,r3,r2
 80367b0:	e0bffb15 	stw	r2,-20(fp)

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
 80367b4:	e0bffb17 	ldw	r2,-20(fp)
 80367b8:	1080004c 	andi	r2,r2,1
 80367bc:	10003e26 	beq	r2,zero,80368b8 <tcp_input+0x203c>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 80367c0:	e0bffc17 	ldw	r2,-16(fp)
 80367c4:	10800217 	ldw	r2,8(r2)
 80367c8:	10800288 	cmpgei	r2,r2,10
 80367cc:	10000d1e 	bne	r2,zero,8036804 <tcp_input+0x1f88>
      {
         socantrcvmore(so);
 80367d0:	e13ffa17 	ldw	r4,-24(fp)
 80367d4:	80330580 	call	8033058 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
 80367d8:	e0bffc17 	ldw	r2,-16(fp)
 80367dc:	10800b0b 	ldhu	r2,44(r2)
 80367e0:	10800054 	ori	r2,r2,1
 80367e4:	1007883a 	mov	r3,r2
 80367e8:	e0bffc17 	ldw	r2,-16(fp)
 80367ec:	10c00b0d 	sth	r3,44(r2)
         tp->rcv_nxt++;
 80367f0:	e0bffc17 	ldw	r2,-16(fp)
 80367f4:	10801617 	ldw	r2,88(r2)
 80367f8:	10c00044 	addi	r3,r2,1
 80367fc:	e0bffc17 	ldw	r2,-16(fp)
 8036800:	10c01615 	stw	r3,88(r2)
      }
      switch (tp->t_state) 
 8036804:	e0bffc17 	ldw	r2,-16(fp)
 8036808:	10800217 	ldw	r2,8(r2)
 803680c:	10c002a0 	cmpeqi	r3,r2,10
 8036810:	1800231e 	bne	r3,zero,80368a0 <tcp_input+0x2024>
 8036814:	10c002c8 	cmpgei	r3,r2,11
 8036818:	1800281e 	bne	r3,zero,80368bc <tcp_input+0x2040>
 803681c:	10c00260 	cmpeqi	r3,r2,9
 8036820:	1800121e 	bne	r3,zero,803686c <tcp_input+0x1ff0>
 8036824:	10c00288 	cmpgei	r3,r2,10
 8036828:	1800241e 	bne	r3,zero,80368bc <tcp_input+0x2040>
 803682c:	10c00148 	cmpgei	r3,r2,5
 8036830:	1800031e 	bne	r3,zero,8036840 <tcp_input+0x1fc4>
 8036834:	108000c8 	cmpgei	r2,r2,3
 8036838:	1000041e 	bne	r2,zero,803684c <tcp_input+0x1fd0>
 803683c:	00001f06 	br	80368bc <tcp_input+0x2040>
 8036840:	108001a0 	cmpeqi	r2,r2,6
 8036844:	1000051e 	bne	r2,zero,803685c <tcp_input+0x1fe0>
 8036848:	00001c06 	br	80368bc <tcp_input+0x2040>
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
 803684c:	e0bffc17 	ldw	r2,-16(fp)
 8036850:	00c00144 	movi	r3,5
 8036854:	10c00215 	stw	r3,8(r2)
         break;
 8036858:	00001806 	br	80368bc <tcp_input+0x2040>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
 803685c:	e0bffc17 	ldw	r2,-16(fp)
 8036860:	00c001c4 	movi	r3,7
 8036864:	10c00215 	stw	r3,8(r2)
         break;
 8036868:	00001406 	br	80368bc <tcp_input+0x2040>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
 803686c:	e0bffc17 	ldw	r2,-16(fp)
 8036870:	00c00284 	movi	r3,10
 8036874:	10c00215 	stw	r3,8(r2)
         tcp_canceltimers(tp);
 8036878:	e13ffc17 	ldw	r4,-16(fp)
 803687c:	8038d8c0 	call	8038d8c <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 8036880:	d0a03717 	ldw	r2,-32548(gp)
 8036884:	1085883a 	add	r2,r2,r2
 8036888:	1007883a 	mov	r3,r2
 803688c:	e0bffc17 	ldw	r2,-16(fp)
 8036890:	10c00615 	stw	r3,24(r2)
         soisdisconnected(so);
 8036894:	e13ffa17 	ldw	r4,-24(fp)
 8036898:	8032b900 	call	8032b90 <soisdisconnected>
         break;
 803689c:	00000706 	br	80368bc <tcp_input+0x2040>

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 80368a0:	d0a03717 	ldw	r2,-32548(gp)
 80368a4:	1085883a 	add	r2,r2,r2
 80368a8:	1007883a 	mov	r3,r2
 80368ac:	e0bffc17 	ldw	r2,-16(fp)
 80368b0:	10c00615 	stw	r3,24(r2)
         break;
 80368b4:	00000106 	br	80368bc <tcp_input+0x2040>
      }
   }
 80368b8:	0001883a 	nop
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
 80368bc:	e0bff717 	ldw	r2,-36(fp)
 80368c0:	1000051e 	bne	r2,zero,80368d8 <tcp_input+0x205c>
 80368c4:	e0bffc17 	ldw	r2,-16(fp)
 80368c8:	10800b0b 	ldhu	r2,44(r2)
 80368cc:	10bfffcc 	andi	r2,r2,65535
 80368d0:	1080004c 	andi	r2,r2,1
 80368d4:	10006526 	beq	r2,zero,8036a6c <tcp_input+0x21f0>
      (void) tcp_output(tp);
 80368d8:	e13ffc17 	ldw	r4,-16(fp)
 80368dc:	80370c40 	call	80370c4 <tcp_output>
   return;
 80368e0:	00006206 	br	8036a6c <tcp_input+0x21f0>
            goto dropafterack;
 80368e4:	0001883a 	nop
 80368e8:	00000106 	br	80368f0 <tcp_input+0x2074>
            goto dropafterack;
 80368ec:	0001883a 	nop
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
 80368f0:	e0bffb17 	ldw	r2,-20(fp)
 80368f4:	1080010c 	andi	r2,r2,4
 80368f8:	10000326 	beq	r2,zero,8036908 <tcp_input+0x208c>
      GOTO_DROP;
 80368fc:	0081a904 	movi	r2,1700
 8036900:	d0a0ad15 	stw	r2,-32076(gp)
 8036904:	00004a06 	br	8036a30 <tcp_input+0x21b4>
   m_freem (m);
 8036908:	e13fe417 	ldw	r4,-112(fp)
 803690c:	802d4340 	call	802d434 <m_freem>
   tp->t_flags |= TF_ACKNOW;
 8036910:	e0bffc17 	ldw	r2,-16(fp)
 8036914:	10800b0b 	ldhu	r2,44(r2)
 8036918:	10800054 	ori	r2,r2,1
 803691c:	1007883a 	mov	r3,r2
 8036920:	e0bffc17 	ldw	r2,-16(fp)
 8036924:	10c00b0d 	sth	r3,44(r2)
   (void) tcp_output (tp);
 8036928:	e13ffc17 	ldw	r4,-16(fp)
 803692c:	80370c40 	call	80370c4 <tcp_output>
   return;
 8036930:	00005306 	br	8036a80 <tcp_input+0x2204>

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 8036934:	008201b4 	movhi	r2,2054
 8036938:	10bc2917 	ldw	r2,-3932(r2)
 803693c:	10c00044 	addi	r3,r2,1
 8036940:	008201b4 	movhi	r2,2054
 8036944:	10fc2915 	stw	r3,-3932(r2)
   if (om) 
 8036948:	e0bffd17 	ldw	r2,-12(fp)
 803694c:	10000326 	beq	r2,zero,803695c <tcp_input+0x20e0>
   {
      (void) m_free(om);
 8036950:	e13ffd17 	ldw	r4,-12(fp)
 8036954:	802d3300 	call	802d330 <m_free>
      om = 0;
 8036958:	e03ffd15 	stw	zero,-12(fp)
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
 803695c:	e0bffb17 	ldw	r2,-20(fp)
 8036960:	1080010c 	andi	r2,r2,4
 8036964:	10000326 	beq	r2,zero,8036974 <tcp_input+0x20f8>
      GOTO_DROP;
 8036968:	0081ad04 	movi	r2,1716
 803696c:	d0a0ad15 	stw	r2,-32076(gp)
 8036970:	00002f06 	br	8036a30 <tcp_input+0x21b4>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
 8036974:	e0bff017 	ldw	r2,-64(fp)
 8036978:	10800417 	ldw	r2,16(r2)
 803697c:	1009883a 	mov	r4,r2
 8036980:	802e31c0 	call	802e31c <in_broadcast>
 8036984:	10000326 	beq	r2,zero,8036994 <tcp_input+0x2118>
      GOTO_DROP;
 8036988:	0081af44 	movi	r2,1725
 803698c:	d0a0ad15 	stw	r2,-32076(gp)
 8036990:	00002706 	br	8036a30 <tcp_input+0x21b4>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
 8036994:	e0bffb17 	ldw	r2,-20(fp)
 8036998:	1080040c 	andi	r2,r2,16
 803699c:	10000c26 	beq	r2,zero,80369d0 <tcp_input+0x2154>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
 80369a0:	e0bff017 	ldw	r2,-64(fp)
 80369a4:	10c00717 	ldw	r3,28(r2)
 80369a8:	e0bfe417 	ldw	r2,-112(fp)
 80369ac:	d8800115 	stw	r2,4(sp)
 80369b0:	00800104 	movi	r2,4
 80369b4:	d8800015 	stw	r2,0(sp)
 80369b8:	180f883a 	mov	r7,r3
 80369bc:	000d883a 	mov	r6,zero
 80369c0:	e17ff017 	ldw	r5,-64(fp)
 80369c4:	e13ffc17 	ldw	r4,-16(fp)
 80369c8:	80383740 	call	8038374 <tcp_respond>
 80369cc:	00001306 	br	8036a1c <tcp_input+0x21a0>
   else
   {
      if (tiflags & TH_SYN)
 80369d0:	e0bffb17 	ldw	r2,-20(fp)
 80369d4:	1080008c 	andi	r2,r2,2
 80369d8:	10000526 	beq	r2,zero,80369f0 <tcp_input+0x2174>
         ti->ti_seq++;
 80369dc:	e0bff017 	ldw	r2,-64(fp)
 80369e0:	10800617 	ldw	r2,24(r2)
 80369e4:	10c00044 	addi	r3,r2,1
 80369e8:	e0bff017 	ldw	r2,-64(fp)
 80369ec:	10c00615 	stw	r3,24(r2)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
 80369f0:	e0bff017 	ldw	r2,-64(fp)
 80369f4:	10c00617 	ldw	r3,24(r2)
 80369f8:	e0bfe417 	ldw	r2,-112(fp)
 80369fc:	d8800115 	stw	r2,4(sp)
 8036a00:	00800504 	movi	r2,20
 8036a04:	d8800015 	stw	r2,0(sp)
 8036a08:	000f883a 	mov	r7,zero
 8036a0c:	180d883a 	mov	r6,r3
 8036a10:	e17ff017 	ldw	r5,-64(fp)
 8036a14:	e13ffc17 	ldw	r4,-16(fp)
 8036a18:	80383740 	call	8038374 <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
 8036a1c:	e0bff617 	ldw	r2,-40(fp)
 8036a20:	10001426 	beq	r2,zero,8036a74 <tcp_input+0x21f8>
      (void) soabort(so);
 8036a24:	e13ffa17 	ldw	r4,-24(fp)
 8036a28:	8030e440 	call	8030e44 <soabort>
   return;
 8036a2c:	00001106 	br	8036a74 <tcp_input+0x21f8>

drop:
   if (om)
 8036a30:	e0bffd17 	ldw	r2,-12(fp)
 8036a34:	10000226 	beq	r2,zero,8036a40 <tcp_input+0x21c4>
      (void) m_free(om);
 8036a38:	e13ffd17 	ldw	r4,-12(fp)
 8036a3c:	802d3300 	call	802d330 <m_free>
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
 8036a40:	e13fe417 	ldw	r4,-112(fp)
 8036a44:	802d4340 	call	802d434 <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
 8036a48:	e0bff617 	ldw	r2,-40(fp)
 8036a4c:	10000b26 	beq	r2,zero,8036a7c <tcp_input+0x2200>
      (void) soabort(so);
 8036a50:	e13ffa17 	ldw	r4,-24(fp)
 8036a54:	8030e440 	call	8030e44 <soabort>
   return;
 8036a58:	00000806 	br	8036a7c <tcp_input+0x2200>
            return;
 8036a5c:	0001883a 	nop
 8036a60:	00000706 	br	8036a80 <tcp_input+0x2204>
         return;
 8036a64:	0001883a 	nop
 8036a68:	00000506 	br	8036a80 <tcp_input+0x2204>
   return;
 8036a6c:	0001883a 	nop
 8036a70:	00000306 	br	8036a80 <tcp_input+0x2204>
   return;
 8036a74:	0001883a 	nop
 8036a78:	00000106 	br	8036a80 <tcp_input+0x2204>
   return;
 8036a7c:	0001883a 	nop
}
 8036a80:	e037883a 	mov	sp,fp
 8036a84:	dfc00117 	ldw	ra,4(sp)
 8036a88:	df000017 	ldw	fp,0(sp)
 8036a8c:	dec00204 	addi	sp,sp,8
 8036a90:	f800283a 	ret

08036a94 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 8036a94:	defff504 	addi	sp,sp,-44
 8036a98:	dfc00a15 	stw	ra,40(sp)
 8036a9c:	df000915 	stw	fp,36(sp)
 8036aa0:	df000904 	addi	fp,sp,36
 8036aa4:	e13ff915 	stw	r4,-28(fp)
 8036aa8:	e17ff815 	stw	r5,-32(fp)
 8036aac:	e1bff715 	stw	r6,-36(fp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
 8036ab0:	e0bff917 	ldw	r2,-28(fp)
 8036ab4:	10800d17 	ldw	r2,52(r2)
 8036ab8:	10800817 	ldw	r2,32(r2)
 8036abc:	e0bffc15 	stw	r2,-16(fp)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
 8036ac0:	e0bff817 	ldw	r2,-32(fp)
 8036ac4:	10800317 	ldw	r2,12(r2)
 8036ac8:	e0bfff15 	stw	r2,-4(fp)
   cnt = om->m_len;
 8036acc:	e0bff817 	ldw	r2,-32(fp)
 8036ad0:	10800217 	ldw	r2,8(r2)
 8036ad4:	e0bffd15 	stw	r2,-12(fp)
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 8036ad8:	00004206 	br	8036be4 <tcp_dooptions+0x150>
   {
      opt = cp[0];
 8036adc:	e0bfff17 	ldw	r2,-4(fp)
 8036ae0:	10800003 	ldbu	r2,0(r2)
 8036ae4:	10803fcc 	andi	r2,r2,255
 8036ae8:	e0bffb15 	stw	r2,-20(fp)
      if (opt == TCPOPT_EOL)
 8036aec:	e0bffb17 	ldw	r2,-20(fp)
 8036af0:	10003f26 	beq	r2,zero,8036bf0 <tcp_dooptions+0x15c>
         break;
      if (opt == TCPOPT_NOP)
 8036af4:	e0bffb17 	ldw	r2,-20(fp)
 8036af8:	10800058 	cmpnei	r2,r2,1
 8036afc:	1000031e 	bne	r2,zero,8036b0c <tcp_dooptions+0x78>
         optlen = 1;
 8036b00:	00800044 	movi	r2,1
 8036b04:	e0bffe15 	stw	r2,-8(fp)
 8036b08:	00000706 	br	8036b28 <tcp_dooptions+0x94>
      else 
      {
         optlen = cp[1];
 8036b0c:	e0bfff17 	ldw	r2,-4(fp)
 8036b10:	10800044 	addi	r2,r2,1
 8036b14:	10800003 	ldbu	r2,0(r2)
 8036b18:	10803fcc 	andi	r2,r2,255
 8036b1c:	e0bffe15 	stw	r2,-8(fp)
         if (optlen <= 0)
 8036b20:	e0bffe17 	ldw	r2,-8(fp)
 8036b24:	0080340e 	bge	zero,r2,8036bf8 <tcp_dooptions+0x164>
            break;
      }

      switch (opt) 
 8036b28:	e0bffb17 	ldw	r2,-20(fp)
 8036b2c:	10800098 	cmpnei	r2,r2,2
 8036b30:	10001f1e 	bne	r2,zero,8036bb0 <tcp_dooptions+0x11c>
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
 8036b34:	e0bffe17 	ldw	r2,-8(fp)
 8036b38:	10800120 	cmpeqi	r2,r2,4
 8036b3c:	10001e26 	beq	r2,zero,8036bb8 <tcp_dooptions+0x124>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
 8036b40:	e0bff717 	ldw	r2,-36(fp)
 8036b44:	10800843 	ldbu	r2,33(r2)
 8036b48:	10803fcc 	andi	r2,r2,255
 8036b4c:	1080008c 	andi	r2,r2,2
 8036b50:	10001b26 	beq	r2,zero,8036bc0 <tcp_dooptions+0x12c>
            continue;
         mssval = *(u_short *)(cp + 2);
 8036b54:	e0bfff17 	ldw	r2,-4(fp)
 8036b58:	1080008b 	ldhu	r2,2(r2)
 8036b5c:	e0bffa8d 	sth	r2,-22(fp)
         mssval = ntohs(mssval);
 8036b60:	e0bffa8b 	ldhu	r2,-22(fp)
 8036b64:	1004d23a 	srli	r2,r2,8
 8036b68:	1007883a 	mov	r3,r2
 8036b6c:	e0bffa8b 	ldhu	r2,-22(fp)
 8036b70:	1004923a 	slli	r2,r2,8
 8036b74:	1884b03a 	or	r2,r3,r2
 8036b78:	e0bffa8d 	sth	r2,-22(fp)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 8036b7c:	e13ffc17 	ldw	r4,-16(fp)
 8036b80:	8036fcc0 	call	8036fcc <tcp_mss>
 8036b84:	1007883a 	mov	r3,r2
 8036b88:	e0bffa8b 	ldhu	r2,-22(fp)
 8036b8c:	18ffffcc 	andi	r3,r3,65535
 8036b90:	1880032e 	bgeu	r3,r2,8036ba0 <tcp_dooptions+0x10c>
 8036b94:	e13ffc17 	ldw	r4,-16(fp)
 8036b98:	8036fcc0 	call	8036fcc <tcp_mss>
 8036b9c:	00000106 	br	8036ba4 <tcp_dooptions+0x110>
 8036ba0:	e0bffa8b 	ldhu	r2,-22(fp)
 8036ba4:	e0fff917 	ldw	r3,-28(fp)
 8036ba8:	18800a0d 	sth	r2,40(r3)
         break;
 8036bac:	00000506 	br	8036bc4 <tcp_dooptions+0x130>
         }
         break;
#endif   /* TCP_TIMESTAMP */

      default:
         break;
 8036bb0:	0001883a 	nop
 8036bb4:	00000306 	br	8036bc4 <tcp_dooptions+0x130>
            continue;
 8036bb8:	0001883a 	nop
 8036bbc:	00000106 	br	8036bc4 <tcp_dooptions+0x130>
            continue;
 8036bc0:	0001883a 	nop
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 8036bc4:	e0fffd17 	ldw	r3,-12(fp)
 8036bc8:	e0bffe17 	ldw	r2,-8(fp)
 8036bcc:	1885c83a 	sub	r2,r3,r2
 8036bd0:	e0bffd15 	stw	r2,-12(fp)
 8036bd4:	e0bffe17 	ldw	r2,-8(fp)
 8036bd8:	e0ffff17 	ldw	r3,-4(fp)
 8036bdc:	1885883a 	add	r2,r3,r2
 8036be0:	e0bfff15 	stw	r2,-4(fp)
 8036be4:	e0bffd17 	ldw	r2,-12(fp)
 8036be8:	00bfbc16 	blt	zero,r2,8036adc <tcp_dooptions+0x48>
 8036bec:	00000306 	br	8036bfc <tcp_dooptions+0x168>
         break;
 8036bf0:	0001883a 	nop
 8036bf4:	00000106 	br	8036bfc <tcp_dooptions+0x168>
            break;
 8036bf8:	0001883a 	nop
      }
   }
   (void) m_free(om);
 8036bfc:	e13ff817 	ldw	r4,-32(fp)
 8036c00:	802d3300 	call	802d330 <m_free>
      if(!gotstamp)
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
 8036c04:	0001883a 	nop
}
 8036c08:	e037883a 	mov	sp,fp
 8036c0c:	dfc00117 	ldw	ra,4(sp)
 8036c10:	df000017 	ldw	fp,0(sp)
 8036c14:	dec00204 	addi	sp,sp,8
 8036c18:	f800283a 	ret

08036c1c <tcp_pulloutofband>:

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
 8036c1c:	defff804 	addi	sp,sp,-32
 8036c20:	dfc00715 	stw	ra,28(sp)
 8036c24:	df000615 	stw	fp,24(sp)
 8036c28:	df000604 	addi	fp,sp,24
 8036c2c:	e13ffc15 	stw	r4,-16(fp)
 8036c30:	e17ffb15 	stw	r5,-20(fp)
 8036c34:	e1bffa15 	stw	r6,-24(fp)
   int   cnt   =  ti->ti_urp  -  1;
 8036c38:	e0bffb17 	ldw	r2,-20(fp)
 8036c3c:	1080098b 	ldhu	r2,38(r2)
 8036c40:	10bfffcc 	andi	r2,r2,65535
 8036c44:	10bfffc4 	addi	r2,r2,-1
 8036c48:	e0bfff15 	stw	r2,-4(fp)

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 8036c4c:	00003206 	br	8036d18 <tcp_pulloutofband+0xfc>
   {
      if (m->m_len > (unsigned)cnt) 
 8036c50:	e0bffa17 	ldw	r2,-24(fp)
 8036c54:	10800217 	ldw	r2,8(r2)
 8036c58:	e0ffff17 	ldw	r3,-4(fp)
 8036c5c:	1880242e 	bgeu	r3,r2,8036cf0 <tcp_pulloutofband+0xd4>
      {
         char *   cp =  mtod(m,  char *) +  cnt;
 8036c60:	e0bffa17 	ldw	r2,-24(fp)
 8036c64:	10c00317 	ldw	r3,12(r2)
 8036c68:	e0bfff17 	ldw	r2,-4(fp)
 8036c6c:	1885883a 	add	r2,r3,r2
 8036c70:	e0bffe15 	stw	r2,-8(fp)
         struct tcpcb * tp =  sototcpcb(so);
 8036c74:	e0bffc17 	ldw	r2,-16(fp)
 8036c78:	10800117 	ldw	r2,4(r2)
 8036c7c:	10800917 	ldw	r2,36(r2)
 8036c80:	e0bffd15 	stw	r2,-12(fp)

         tp->t_iobc = *cp;
 8036c84:	e0bffe17 	ldw	r2,-8(fp)
 8036c88:	10c00003 	ldbu	r3,0(r2)
 8036c8c:	e0bffd17 	ldw	r2,-12(fp)
 8036c90:	10c02445 	stb	r3,145(r2)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
 8036c94:	e0bffd17 	ldw	r2,-12(fp)
 8036c98:	10802403 	ldbu	r2,144(r2)
 8036c9c:	10800054 	ori	r2,r2,1
 8036ca0:	1007883a 	mov	r3,r2
 8036ca4:	e0bffd17 	ldw	r2,-12(fp)
 8036ca8:	10c02405 	stb	r3,144(r2)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
 8036cac:	e0bffe17 	ldw	r2,-8(fp)
 8036cb0:	11000044 	addi	r4,r2,1
 8036cb4:	e0bffa17 	ldw	r2,-24(fp)
 8036cb8:	10c00217 	ldw	r3,8(r2)
 8036cbc:	e0bfff17 	ldw	r2,-4(fp)
 8036cc0:	1885c83a 	sub	r2,r3,r2
 8036cc4:	10bfffc4 	addi	r2,r2,-1
 8036cc8:	100d883a 	mov	r6,r2
 8036ccc:	200b883a 	mov	r5,r4
 8036cd0:	e13ffe17 	ldw	r4,-8(fp)
 8036cd4:	8002ea40 	call	8002ea4 <memcpy>
         m->m_len--;
 8036cd8:	e0bffa17 	ldw	r2,-24(fp)
 8036cdc:	10800217 	ldw	r2,8(r2)
 8036ce0:	10ffffc4 	addi	r3,r2,-1
 8036ce4:	e0bffa17 	ldw	r2,-24(fp)
 8036ce8:	10c00215 	stw	r3,8(r2)
         return;
 8036cec:	00001106 	br	8036d34 <tcp_pulloutofband+0x118>
      }
      cnt -= m->m_len;
 8036cf0:	e0ffff17 	ldw	r3,-4(fp)
 8036cf4:	e0bffa17 	ldw	r2,-24(fp)
 8036cf8:	10800217 	ldw	r2,8(r2)
 8036cfc:	1885c83a 	sub	r2,r3,r2
 8036d00:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
 8036d04:	e0bffa17 	ldw	r2,-24(fp)
 8036d08:	10800617 	ldw	r2,24(r2)
 8036d0c:	e0bffa15 	stw	r2,-24(fp)
      if (m == 0)
 8036d10:	e0bffa17 	ldw	r2,-24(fp)
 8036d14:	10000326 	beq	r2,zero,8036d24 <tcp_pulloutofband+0x108>
   while (cnt >= 0) 
 8036d18:	e0bfff17 	ldw	r2,-4(fp)
 8036d1c:	103fcc0e 	bge	r2,zero,8036c50 <tcp_pulloutofband+0x34>
 8036d20:	00000106 	br	8036d28 <tcp_pulloutofband+0x10c>
         break;
 8036d24:	0001883a 	nop
   }
   panic("tcp_pulloutofband");
 8036d28:	01020174 	movhi	r4,2053
 8036d2c:	210c2d04 	addi	r4,r4,12468
 8036d30:	8027fe00 	call	8027fe0 <panic>
}
 8036d34:	e037883a 	mov	sp,fp
 8036d38:	dfc00117 	ldw	ra,4(sp)
 8036d3c:	df000017 	ldw	fp,0(sp)
 8036d40:	dec00204 	addi	sp,sp,8
 8036d44:	f800283a 	ret

08036d48 <tcp_xmit_timer>:
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
 8036d48:	defffb04 	addi	sp,sp,-20
 8036d4c:	dfc00415 	stw	ra,16(sp)
 8036d50:	df000315 	stw	fp,12(sp)
 8036d54:	df000304 	addi	fp,sp,12
 8036d58:	e13ffd15 	stw	r4,-12(fp)
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 8036d5c:	e0bffd17 	ldw	r2,-12(fp)
 8036d60:	10801e17 	ldw	r2,120(r2)
 8036d64:	1000021e 	bne	r2,zero,8036d70 <tcp_xmit_timer+0x28>
 8036d68:	802c3fc0 	call	802c3fc <dtrap>
 8036d6c:	00008006 	br	8036f70 <tcp_xmit_timer+0x228>
#endif

   tcpstat.tcps_rttupdated++;
 8036d70:	008201b4 	movhi	r2,2054
 8036d74:	10bc5117 	ldw	r2,-3772(r2)
 8036d78:	10c00044 	addi	r3,r2,1
 8036d7c:	008201b4 	movhi	r2,2054
 8036d80:	10fc5115 	stw	r3,-3772(r2)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 8036d84:	d0e0a317 	ldw	r3,-32116(gp)
 8036d88:	e0bffd17 	ldw	r2,-12(fp)
 8036d8c:	10801e17 	ldw	r2,120(r2)
 8036d90:	1885c83a 	sub	r2,r3,r2
 8036d94:	01400c84 	movi	r5,50
 8036d98:	1009883a 	mov	r4,r2
 8036d9c:	800e2300 	call	800e230 <__udivsi3>
 8036da0:	e0bffe15 	stw	r2,-8(fp)
   if(tp->t_srtt != 0)
 8036da4:	e0bffd17 	ldw	r2,-12(fp)
 8036da8:	10802017 	ldw	r2,128(r2)
 8036dac:	10004426 	beq	r2,zero,8036ec0 <tcp_xmit_timer+0x178>
   {
      if(rtt == 0)      /* fast path for small round trip */
 8036db0:	e0bffe17 	ldw	r2,-8(fp)
 8036db4:	1000131e 	bne	r2,zero,8036e04 <tcp_xmit_timer+0xbc>
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
 8036db8:	e0bffd17 	ldw	r2,-12(fp)
 8036dbc:	10802017 	ldw	r2,128(r2)
 8036dc0:	10800090 	cmplti	r2,r2,2
 8036dc4:	1000051e 	bne	r2,zero,8036ddc <tcp_xmit_timer+0x94>
            tp->t_srtt--;
 8036dc8:	e0bffd17 	ldw	r2,-12(fp)
 8036dcc:	10802017 	ldw	r2,128(r2)
 8036dd0:	10ffffc4 	addi	r3,r2,-1
 8036dd4:	e0bffd17 	ldw	r2,-12(fp)
 8036dd8:	10c02015 	stw	r3,128(r2)
         if(tp->t_rttvar > 1)
 8036ddc:	e0bffd17 	ldw	r2,-12(fp)
 8036de0:	10802117 	ldw	r2,132(r2)
 8036de4:	10800090 	cmplti	r2,r2,2
 8036de8:	1000421e 	bne	r2,zero,8036ef4 <tcp_xmit_timer+0x1ac>
            tp->t_rttvar--;
 8036dec:	e0bffd17 	ldw	r2,-12(fp)
 8036df0:	10802117 	ldw	r2,132(r2)
 8036df4:	10ffffc4 	addi	r3,r2,-1
 8036df8:	e0bffd17 	ldw	r2,-12(fp)
 8036dfc:	10c02115 	stw	r3,132(r2)
 8036e00:	00003c06 	br	8036ef4 <tcp_xmit_timer+0x1ac>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
 8036e04:	e0bffe17 	ldw	r2,-8(fp)
 8036e08:	10bfffc4 	addi	r2,r2,-1
 8036e0c:	100690ba 	slli	r3,r2,2
 8036e10:	e0bffd17 	ldw	r2,-12(fp)
 8036e14:	10802017 	ldw	r2,128(r2)
 8036e18:	1005d0fa 	srai	r2,r2,3
 8036e1c:	1885c83a 	sub	r2,r3,r2
 8036e20:	e0bfff15 	stw	r2,-4(fp)
      if ((tp->t_srtt += delta) <= 0)
 8036e24:	e0bffd17 	ldw	r2,-12(fp)
 8036e28:	10c02017 	ldw	r3,128(r2)
 8036e2c:	e0bfff17 	ldw	r2,-4(fp)
 8036e30:	1887883a 	add	r3,r3,r2
 8036e34:	e0bffd17 	ldw	r2,-12(fp)
 8036e38:	10c02015 	stw	r3,128(r2)
 8036e3c:	e0bffd17 	ldw	r2,-12(fp)
 8036e40:	10802017 	ldw	r2,128(r2)
 8036e44:	00800316 	blt	zero,r2,8036e54 <tcp_xmit_timer+0x10c>
         tp->t_srtt = 1;
 8036e48:	e0bffd17 	ldw	r2,-12(fp)
 8036e4c:	00c00044 	movi	r3,1
 8036e50:	10c02015 	stw	r3,128(r2)
       * (scaled by 4).  The following is equivalent
       * to rfc793 smoothing with an alpha of .75
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
 8036e54:	e0bfff17 	ldw	r2,-4(fp)
 8036e58:	1000030e 	bge	r2,zero,8036e68 <tcp_xmit_timer+0x120>
         delta = -delta;
 8036e5c:	e0bfff17 	ldw	r2,-4(fp)
 8036e60:	0085c83a 	sub	r2,zero,r2
 8036e64:	e0bfff15 	stw	r2,-4(fp)
      delta -= (short)(tp->t_rttvar >> 1);
 8036e68:	e0bffd17 	ldw	r2,-12(fp)
 8036e6c:	10802117 	ldw	r2,132(r2)
 8036e70:	1005d07a 	srai	r2,r2,1
 8036e74:	10bfffcc 	andi	r2,r2,65535
 8036e78:	10a0001c 	xori	r2,r2,32768
 8036e7c:	10a00004 	addi	r2,r2,-32768
 8036e80:	e0ffff17 	ldw	r3,-4(fp)
 8036e84:	1885c83a 	sub	r2,r3,r2
 8036e88:	e0bfff15 	stw	r2,-4(fp)
      if ((tp->t_rttvar += delta) <= 0)
 8036e8c:	e0bffd17 	ldw	r2,-12(fp)
 8036e90:	10c02117 	ldw	r3,132(r2)
 8036e94:	e0bfff17 	ldw	r2,-4(fp)
 8036e98:	1887883a 	add	r3,r3,r2
 8036e9c:	e0bffd17 	ldw	r2,-12(fp)
 8036ea0:	10c02115 	stw	r3,132(r2)
 8036ea4:	e0bffd17 	ldw	r2,-12(fp)
 8036ea8:	10802117 	ldw	r2,132(r2)
 8036eac:	00801116 	blt	zero,r2,8036ef4 <tcp_xmit_timer+0x1ac>
         tp->t_rttvar = 1;
 8036eb0:	e0bffd17 	ldw	r2,-12(fp)
 8036eb4:	00c00044 	movi	r3,1
 8036eb8:	10c02115 	stw	r3,132(r2)
 8036ebc:	00000d06 	br	8036ef4 <tcp_xmit_timer+0x1ac>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
 8036ec0:	e0bffe17 	ldw	r2,-8(fp)
 8036ec4:	00800216 	blt	zero,r2,8036ed0 <tcp_xmit_timer+0x188>
         rtt = 1;
 8036ec8:	00800044 	movi	r2,1
 8036ecc:	e0bffe15 	stw	r2,-8(fp)
      tp->t_srtt = rtt << 3;
 8036ed0:	e0bffe17 	ldw	r2,-8(fp)
 8036ed4:	100690fa 	slli	r3,r2,3
 8036ed8:	e0bffd17 	ldw	r2,-12(fp)
 8036edc:	10c02015 	stw	r3,128(r2)
      tp->t_rttvar = rtt << 1;
 8036ee0:	e0bffe17 	ldw	r2,-8(fp)
 8036ee4:	1085883a 	add	r2,r2,r2
 8036ee8:	1007883a 	mov	r3,r2
 8036eec:	e0bffd17 	ldw	r2,-12(fp)
 8036ef0:	10c02115 	stw	r3,132(r2)
   }
   tp->t_rttick = 0;       /* clear RT timer */
 8036ef4:	e0bffd17 	ldw	r2,-12(fp)
 8036ef8:	10001e15 	stw	zero,120(r2)
   tp->t_rxtshift = 0;
 8036efc:	e0bffd17 	ldw	r2,-12(fp)
 8036f00:	10000715 	stw	zero,28(r2)
   TCPT_RANGESET(tp->t_rxtcur, 
 8036f04:	e0bffd17 	ldw	r2,-12(fp)
 8036f08:	10802017 	ldw	r2,128(r2)
 8036f0c:	1007d0ba 	srai	r3,r2,2
 8036f10:	e0bffd17 	ldw	r2,-12(fp)
 8036f14:	10802117 	ldw	r2,132(r2)
 8036f18:	1885883a 	add	r2,r3,r2
 8036f1c:	1005d07a 	srai	r2,r2,1
 8036f20:	10ffffcc 	andi	r3,r2,65535
 8036f24:	18e0001c 	xori	r3,r3,32768
 8036f28:	18e00004 	addi	r3,r3,-32768
 8036f2c:	e0bffd17 	ldw	r2,-12(fp)
 8036f30:	10c00815 	stw	r3,32(r2)
 8036f34:	e0bffd17 	ldw	r2,-12(fp)
 8036f38:	10800817 	ldw	r2,32(r2)
 8036f3c:	10800088 	cmpgei	r2,r2,2
 8036f40:	1000041e 	bne	r2,zero,8036f54 <tcp_xmit_timer+0x20c>
 8036f44:	e0bffd17 	ldw	r2,-12(fp)
 8036f48:	00c00084 	movi	r3,2
 8036f4c:	10c00815 	stw	r3,32(r2)
 8036f50:	00000706 	br	8036f70 <tcp_xmit_timer+0x228>
 8036f54:	e0bffd17 	ldw	r2,-12(fp)
 8036f58:	10800817 	ldw	r2,32(r2)
 8036f5c:	10802050 	cmplti	r2,r2,129
 8036f60:	1000031e 	bne	r2,zero,8036f70 <tcp_xmit_timer+0x228>
 8036f64:	e0bffd17 	ldw	r2,-12(fp)
 8036f68:	00c02004 	movi	r3,128
 8036f6c:	10c00815 	stw	r3,32(r2)
    ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1,
    TCPTV_MIN, TCPTV_REXMTMAX);
}
 8036f70:	e037883a 	mov	sp,fp
 8036f74:	dfc00117 	ldw	ra,4(sp)
 8036f78:	df000017 	ldw	fp,0(sp)
 8036f7c:	dec00204 	addi	sp,sp,8
 8036f80:	f800283a 	ret

08036f84 <ip4_tcpmss>:


#ifdef IP_V4
int
ip4_tcpmss(struct socket * so)
{
 8036f84:	defffd04 	addi	sp,sp,-12
 8036f88:	df000215 	stw	fp,8(sp)
 8036f8c:	df000204 	addi	fp,sp,8
 8036f90:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;

   ifp = so->so_pcb->ifp;
 8036f94:	e0bffe17 	ldw	r2,-8(fp)
 8036f98:	10800117 	ldw	r2,4(r2)
 8036f9c:	10800a17 	ldw	r2,40(r2)
 8036fa0:	e0bfff15 	stw	r2,-4(fp)
   return(ifp->n_mtu - (40 + ifp->n_lnh));
 8036fa4:	e0bfff17 	ldw	r2,-4(fp)
 8036fa8:	10c00917 	ldw	r3,36(r2)
 8036fac:	e0bfff17 	ldw	r2,-4(fp)
 8036fb0:	10800817 	ldw	r2,32(r2)
 8036fb4:	10800a04 	addi	r2,r2,40
 8036fb8:	1885c83a 	sub	r2,r3,r2
}
 8036fbc:	e037883a 	mov	sp,fp
 8036fc0:	df000017 	ldw	fp,0(sp)
 8036fc4:	dec00104 	addi	sp,sp,4
 8036fc8:	f800283a 	ret

08036fcc <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
 8036fcc:	defffa04 	addi	sp,sp,-24
 8036fd0:	dfc00515 	stw	ra,20(sp)
 8036fd4:	df000415 	stw	fp,16(sp)
 8036fd8:	df000404 	addi	fp,sp,16
 8036fdc:	e13ffc15 	stw	r4,-16(fp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
 8036fe0:	e0bffc17 	ldw	r2,-16(fp)
 8036fe4:	10000726 	beq	r2,zero,8037004 <tcp_mss+0x38>
       (so->so_pcb == NULL) ||
 8036fe8:	e0bffc17 	ldw	r2,-16(fp)
 8036fec:	10800117 	ldw	r2,4(r2)
   if ((so == NULL) ||
 8036ff0:	10000426 	beq	r2,zero,8037004 <tcp_mss+0x38>
       (so->so_pcb->ifp == NULL))
 8036ff4:	e0bffc17 	ldw	r2,-16(fp)
 8036ff8:	10800117 	ldw	r2,4(r2)
 8036ffc:	10800a17 	ldw	r2,40(r2)
       (so->so_pcb == NULL) ||
 8037000:	1000061e 	bne	r2,zero,803701c <tcp_mss+0x50>
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
 8037004:	e0bffc17 	ldw	r2,-16(fp)
 8037008:	10800517 	ldw	r2,20(r2)
 803700c:	10800098 	cmpnei	r2,r2,2
 8037010:	1000021e 	bne	r2,zero,803701c <tcp_mss+0x50>
         return TCP_MSS;            /* user defined */
 8037014:	00816d04 	movi	r2,1460
 8037018:	00002506 	br	80370b0 <tcp_mss+0xe4>
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
 803701c:	e13ffc17 	ldw	r4,-16(fp)
 8037020:	8036f840 	call	8036f84 <ip4_tcpmss>
 8037024:	e0bfff15 	stw	r2,-4(fp)
#endif         /* end of dual mode */
#else          /* no IP_v4, assume V6 only */
      mss = ip6_tcpmss(so, ifp);
#endif         /* end messy domain defines */

   if (mss > TCP_MSS)    /* check upper limit from compile */
 8037028:	e0bfff17 	ldw	r2,-4(fp)
 803702c:	10816d50 	cmplti	r2,r2,1461
 8037030:	1000021e 	bne	r2,zero,803703c <tcp_mss+0x70>
      mss = TCP_MSS;
 8037034:	00816d04 	movi	r2,1460
 8037038:	e0bfff15 	stw	r2,-4(fp)

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
 803703c:	e0bffc17 	ldw	r2,-16(fp)
 8037040:	10800117 	ldw	r2,4(r2)
 8037044:	e0bffe15 	stw	r2,-8(fp)
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
 8037048:	e0bffe17 	ldw	r2,-8(fp)
 803704c:	10800917 	ldw	r2,36(r2)
 8037050:	e0bffd15 	stw	r2,-12(fp)
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
 8037054:	e0bffd17 	ldw	r2,-12(fp)
 8037058:	10800b0b 	ldhu	r2,44(r2)
 803705c:	10bfffcc 	andi	r2,r2,65535
 8037060:	1081000c 	andi	r2,r2,1024
 8037064:	10000426 	beq	r2,zero,8037078 <tcp_mss+0xac>
      return tp->t_maxseg;    /* yup */
 8037068:	e0bffd17 	ldw	r2,-12(fp)
 803706c:	10800a0b 	ldhu	r2,40(r2)
 8037070:	10bfffcc 	andi	r2,r2,65535
 8037074:	00000e06 	br	80370b0 <tcp_mss+0xe4>
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
 8037078:	e0bffd17 	ldw	r2,-12(fp)
 803707c:	10800a0b 	ldhu	r2,40(r2)
 8037080:	10bfffcc 	andi	r2,r2,65535
 8037084:	10000926 	beq	r2,zero,80370ac <tcp_mss+0xe0>
 8037088:	e0bffd17 	ldw	r2,-12(fp)
 803708c:	10800a0b 	ldhu	r2,40(r2)
 8037090:	10ffffcc 	andi	r3,r2,65535
 8037094:	e0bfff17 	ldw	r2,-4(fp)
 8037098:	1880040e 	bge	r3,r2,80370ac <tcp_mss+0xe0>
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
 803709c:	e0bffd17 	ldw	r2,-12(fp)
 80370a0:	10800a0b 	ldhu	r2,40(r2)
 80370a4:	10bfffcc 	andi	r2,r2,65535
 80370a8:	e0bfff15 	stw	r2,-4(fp)
   }

   return mss;
 80370ac:	e0bfff17 	ldw	r2,-4(fp)
}
 80370b0:	e037883a 	mov	sp,fp
 80370b4:	dfc00117 	ldw	ra,4(sp)
 80370b8:	df000017 	ldw	fp,0(sp)
 80370bc:	dec00204 	addi	sp,sp,8
 80370c0:	f800283a 	ret

080370c4 <tcp_output>:
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 80370c4:	deffe804 	addi	sp,sp,-96
 80370c8:	dfc01715 	stw	ra,92(sp)
 80370cc:	df001615 	stw	fp,88(sp)
 80370d0:	df001604 	addi	fp,sp,88
 80370d4:	e13fea15 	stw	r4,-88(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 80370d8:	e0bfea17 	ldw	r2,-88(fp)
 80370dc:	10800d17 	ldw	r2,52(r2)
 80370e0:	10800817 	ldw	r2,32(r2)
 80370e4:	e0bff715 	stw	r2,-36(fp)
   int   len;
   long  win;
   int   off,  flags,   error;
   struct mbuf *  m;
   struct tcpiphdr * ti;
   unsigned optlen = 0;
 80370e8:	e03ffb15 	stw	zero,-20(fp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 80370ec:	e0bfea17 	ldw	r2,-88(fp)
 80370f0:	10c01a17 	ldw	r3,104(r2)
 80370f4:	e0bfea17 	ldw	r2,-88(fp)
 80370f8:	10800e17 	ldw	r2,56(r2)
 80370fc:	1885003a 	cmpeq	r2,r3,r2
 8037100:	10803fcc 	andi	r2,r2,255
 8037104:	e0bff615 	stw	r2,-40(fp)

again:
   sendalot = 0;
 8037108:	e03ffa15 	stw	zero,-24(fp)
   off = (int)(tp->snd_nxt - tp->snd_una);
 803710c:	e0bfea17 	ldw	r2,-88(fp)
 8037110:	10c00f17 	ldw	r3,60(r2)
 8037114:	e0bfea17 	ldw	r2,-88(fp)
 8037118:	10800e17 	ldw	r2,56(r2)
 803711c:	1885c83a 	sub	r2,r3,r2
 8037120:	e0bff515 	stw	r2,-44(fp)
   win = (long)tp->snd_wnd;   /* set basic send window */
 8037124:	e0bfea17 	ldw	r2,-88(fp)
 8037128:	10801417 	ldw	r2,80(r2)
 803712c:	e0bffe15 	stw	r2,-8(fp)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
 8037130:	e0bfea17 	ldw	r2,-88(fp)
 8037134:	10801b17 	ldw	r2,108(r2)
 8037138:	1007883a 	mov	r3,r2
 803713c:	e0bffe17 	ldw	r2,-8(fp)
 8037140:	1880060e 	bge	r3,r2,803715c <tcp_output+0x98>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
 8037144:	e0bfea17 	ldw	r2,-88(fp)
 8037148:	10801b17 	ldw	r2,108(r2)
 803714c:	1007883a 	mov	r3,r2
 8037150:	00bfff04 	movi	r2,-4
 8037154:	1884703a 	and	r2,r3,r2
 8037158:	e0bffe15 	stw	r2,-8(fp)
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
 803715c:	e0bfea17 	ldw	r2,-88(fp)
 8037160:	10800a83 	ldbu	r2,42(r2)
 8037164:	10803fcc 	andi	r2,r2,255
 8037168:	1080201c 	xori	r2,r2,128
 803716c:	10bfe004 	addi	r2,r2,-128
 8037170:	10000926 	beq	r2,zero,8037198 <tcp_output+0xd4>
   {
      if (win == 0)
 8037174:	e0bffe17 	ldw	r2,-8(fp)
 8037178:	1000031e 	bne	r2,zero,8037188 <tcp_output+0xc4>
         win = 1;
 803717c:	00800044 	movi	r2,1
 8037180:	e0bffe15 	stw	r2,-8(fp)
 8037184:	00000406 	br	8037198 <tcp_output+0xd4>
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
 8037188:	e0bfea17 	ldw	r2,-88(fp)
 803718c:	10000415 	stw	zero,16(r2)
         tp->t_rxtshift = 0;
 8037190:	e0bfea17 	ldw	r2,-88(fp)
 8037194:	10000715 	stw	zero,28(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 8037198:	e0bff717 	ldw	r2,-36(fp)
 803719c:	10801217 	ldw	r2,72(r2)
 80371a0:	e0fffe17 	ldw	r3,-8(fp)
 80371a4:	1880012e 	bgeu	r3,r2,80371ac <tcp_output+0xe8>
 80371a8:	1805883a 	mov	r2,r3
 80371ac:	1007883a 	mov	r3,r2
 80371b0:	e0bff517 	ldw	r2,-44(fp)
 80371b4:	1885c83a 	sub	r2,r3,r2
 80371b8:	e0bfff15 	stw	r2,-4(fp)
   }

   flags = tcp_outflags[tp->t_state];
 80371bc:	e0bfea17 	ldw	r2,-88(fp)
 80371c0:	10c00217 	ldw	r3,8(r2)
 80371c4:	00820174 	movhi	r2,2053
 80371c8:	1885883a 	add	r2,r3,r2
 80371cc:	10980a03 	ldbu	r2,24616(r2)
 80371d0:	10803fcc 	andi	r2,r2,255
 80371d4:	e0bffd15 	stw	r2,-12(fp)
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
 80371d8:	e0bffd17 	ldw	r2,-12(fp)
 80371dc:	1080008c 	andi	r2,r2,2
 80371e0:	10000926 	beq	r2,zero,8037208 <tcp_output+0x144>
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
 80371e4:	e0fffb17 	ldw	r3,-20(fp)
 80371e8:	d0a0ae04 	addi	r2,gp,-32072
 80371ec:	1885883a 	add	r2,r3,r2
 80371f0:	e1fff717 	ldw	r7,-36(fp)
 80371f4:	e1bffd17 	ldw	r6,-12(fp)
 80371f8:	100b883a 	mov	r5,r2
 80371fc:	e13fea17 	ldw	r4,-88(fp)
 8037200:	80381580 	call	8038158 <bld_options>
 8037204:	e0bffb15 	stw	r2,-20(fp)
   }
#endif

   if (len < 0)
 8037208:	e0bfff17 	ldw	r2,-4(fp)
 803720c:	1000090e 	bge	r2,zero,8037234 <tcp_output+0x170>
       * cancel pending retransmit and pull snd_nxt
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
 8037210:	e03fff15 	stw	zero,-4(fp)
      if (win == 0) 
 8037214:	e0bffe17 	ldw	r2,-8(fp)
 8037218:	1000061e 	bne	r2,zero,8037234 <tcp_output+0x170>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 803721c:	e0bfea17 	ldw	r2,-88(fp)
 8037220:	10000315 	stw	zero,12(r2)
         tp->snd_nxt = tp->snd_una;
 8037224:	e0bfea17 	ldw	r2,-88(fp)
 8037228:	10c00e17 	ldw	r3,56(r2)
 803722c:	e0bfea17 	ldw	r2,-88(fp)
 8037230:	10c00f15 	stw	r3,60(r2)
      }
   }

   if (len > (int)tp->t_maxseg)
 8037234:	e0bfea17 	ldw	r2,-88(fp)
 8037238:	10800a0b 	ldhu	r2,40(r2)
 803723c:	10ffffcc 	andi	r3,r2,65535
 8037240:	e0bfff17 	ldw	r2,-4(fp)
 8037244:	1880060e 	bge	r3,r2,8037260 <tcp_output+0x19c>
   {
      len = tp->t_maxseg;
 8037248:	e0bfea17 	ldw	r2,-88(fp)
 803724c:	10800a0b 	ldhu	r2,40(r2)
 8037250:	10bfffcc 	andi	r2,r2,65535
 8037254:	e0bfff15 	stw	r2,-4(fp)
      sendalot = 1;
 8037258:	00800044 	movi	r2,1
 803725c:	e0bffa15 	stw	r2,-24(fp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 8037260:	e0bfea17 	ldw	r2,-88(fp)
 8037264:	10c00f17 	ldw	r3,60(r2)
 8037268:	e0bfff17 	ldw	r2,-4(fp)
 803726c:	1887883a 	add	r3,r3,r2
 8037270:	e0bfea17 	ldw	r2,-88(fp)
 8037274:	11000e17 	ldw	r4,56(r2)
 8037278:	e0bff717 	ldw	r2,-36(fp)
 803727c:	10801217 	ldw	r2,72(r2)
 8037280:	2085883a 	add	r2,r4,r2
 8037284:	1885c83a 	sub	r2,r3,r2
 8037288:	1000040e 	bge	r2,zero,803729c <tcp_output+0x1d8>
      flags &= ~TH_FIN;
 803728c:	e0fffd17 	ldw	r3,-12(fp)
 8037290:	00bfff84 	movi	r2,-2
 8037294:	1884703a 	and	r2,r3,r2
 8037298:	e0bffd15 	stw	r2,-12(fp)
   win = (long)(sbspace(&so->so_rcv));
 803729c:	e0bff717 	ldw	r2,-36(fp)
 80372a0:	10800b17 	ldw	r2,44(r2)
 80372a4:	1007883a 	mov	r3,r2
 80372a8:	e0bff717 	ldw	r2,-36(fp)
 80372ac:	10800a17 	ldw	r2,40(r2)
 80372b0:	1885c83a 	sub	r2,r3,r2
 80372b4:	10000616 	blt	r2,zero,80372d0 <tcp_output+0x20c>
 80372b8:	e0bff717 	ldw	r2,-36(fp)
 80372bc:	10c00b17 	ldw	r3,44(r2)
 80372c0:	e0bff717 	ldw	r2,-36(fp)
 80372c4:	10800a17 	ldw	r2,40(r2)
 80372c8:	1885c83a 	sub	r2,r3,r2
 80372cc:	00000106 	br	80372d4 <tcp_output+0x210>
 80372d0:	0005883a 	mov	r2,zero
 80372d4:	e0bffe15 	stw	r2,-8(fp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
 80372d8:	e0bffd17 	ldw	r2,-12(fp)
 80372dc:	1080004c 	andi	r2,r2,1
 80372e0:	10000d26 	beq	r2,zero,8037318 <tcp_output+0x254>
       (so->so_snd.sb_cc == 0) &&
 80372e4:	e0bff717 	ldw	r2,-36(fp)
 80372e8:	10801217 	ldw	r2,72(r2)
   if ((flags & TH_FIN) &&
 80372ec:	10000a1e 	bne	r2,zero,8037318 <tcp_output+0x254>
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
 80372f0:	e0bfea17 	ldw	r2,-88(fp)
 80372f4:	10800b0b 	ldhu	r2,44(r2)
 80372f8:	10bfffcc 	andi	r2,r2,65535
 80372fc:	1080040c 	andi	r2,r2,16
       (so->so_snd.sb_cc == 0) &&
 8037300:	10006626 	beq	r2,zero,803749c <tcp_output+0x3d8>
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
 8037304:	e0bfea17 	ldw	r2,-88(fp)
 8037308:	10c00f17 	ldw	r3,60(r2)
 803730c:	e0bfea17 	ldw	r2,-88(fp)
 8037310:	10800e17 	ldw	r2,56(r2)
 8037314:	18806126 	beq	r3,r2,803749c <tcp_output+0x3d8>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
 8037318:	e0bfea17 	ldw	r2,-88(fp)
 803731c:	10800b0b 	ldhu	r2,44(r2)
 8037320:	10bfffcc 	andi	r2,r2,65535
 8037324:	1080004c 	andi	r2,r2,1
 8037328:	10005e1e 	bne	r2,zero,80374a4 <tcp_output+0x3e0>
      goto send;
   if (flags & (TH_SYN|TH_RST))
 803732c:	e0bffd17 	ldw	r2,-12(fp)
 8037330:	1080018c 	andi	r2,r2,6
 8037334:	10005d1e 	bne	r2,zero,80374ac <tcp_output+0x3e8>
      goto send;
   if (SEQ_GT(tp->snd_up, tp->snd_una))
 8037338:	e0bfea17 	ldw	r2,-88(fp)
 803733c:	10c01017 	ldw	r3,64(r2)
 8037340:	e0bfea17 	ldw	r2,-88(fp)
 8037344:	10800e17 	ldw	r2,56(r2)
 8037348:	1885c83a 	sub	r2,r3,r2
 803734c:	00805916 	blt	zero,r2,80374b4 <tcp_output+0x3f0>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
 8037350:	e0bfff17 	ldw	r2,-4(fp)
 8037354:	10002426 	beq	r2,zero,80373e8 <tcp_output+0x324>
   {
      if (len == (int)tp->t_maxseg)
 8037358:	e0bfea17 	ldw	r2,-88(fp)
 803735c:	10800a0b 	ldhu	r2,40(r2)
 8037360:	10bfffcc 	andi	r2,r2,65535
 8037364:	e0ffff17 	ldw	r3,-4(fp)
 8037368:	18805426 	beq	r3,r2,80374bc <tcp_output+0x3f8>
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
 803736c:	e0bff617 	ldw	r2,-40(fp)
 8037370:	1000051e 	bne	r2,zero,8037388 <tcp_output+0x2c4>
 8037374:	e0bfea17 	ldw	r2,-88(fp)
 8037378:	10800b0b 	ldhu	r2,44(r2)
 803737c:	10bfffcc 	andi	r2,r2,65535
 8037380:	1080010c 	andi	r2,r2,4
 8037384:	10000626 	beq	r2,zero,80373a0 <tcp_output+0x2dc>
          len + off >= (int)so->so_snd.sb_cc)
 8037388:	e0ffff17 	ldw	r3,-4(fp)
 803738c:	e0bff517 	ldw	r2,-44(fp)
 8037390:	1885883a 	add	r2,r3,r2
 8037394:	e0fff717 	ldw	r3,-36(fp)
 8037398:	18c01217 	ldw	r3,72(r3)
      if ((idle || tp->t_flags & TF_NODELAY) &&
 803739c:	10c0490e 	bge	r2,r3,80374c4 <tcp_output+0x400>
      {
         goto send;
      }
      if (tp->t_force)
 80373a0:	e0bfea17 	ldw	r2,-88(fp)
 80373a4:	10800a83 	ldbu	r2,42(r2)
 80373a8:	10803fcc 	andi	r2,r2,255
 80373ac:	1080201c 	xori	r2,r2,128
 80373b0:	10bfe004 	addi	r2,r2,-128
 80373b4:	1000451e 	bne	r2,zero,80374cc <tcp_output+0x408>
         goto send;
      if (len >= (int)(tp->max_sndwnd / 2))
 80373b8:	e0bfea17 	ldw	r2,-88(fp)
 80373bc:	10802317 	ldw	r2,140(r2)
 80373c0:	1004d07a 	srli	r2,r2,1
 80373c4:	1007883a 	mov	r3,r2
 80373c8:	e0bfff17 	ldw	r2,-4(fp)
 80373cc:	10c0410e 	bge	r2,r3,80374d4 <tcp_output+0x410>
         goto send;
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
 80373d0:	e0bfea17 	ldw	r2,-88(fp)
 80373d4:	10c00f17 	ldw	r3,60(r2)
 80373d8:	e0bfea17 	ldw	r2,-88(fp)
 80373dc:	10801a17 	ldw	r2,104(r2)
 80373e0:	1885c83a 	sub	r2,r3,r2
 80373e4:	10003d16 	blt	r2,zero,80374dc <tcp_output+0x418>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
 80373e8:	e0bffe17 	ldw	r2,-8(fp)
 80373ec:	00801c0e 	bge	zero,r2,8037460 <tcp_output+0x39c>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
 80373f0:	e0bfea17 	ldw	r2,-88(fp)
 80373f4:	10c01917 	ldw	r3,100(r2)
 80373f8:	e0bfea17 	ldw	r2,-88(fp)
 80373fc:	10801617 	ldw	r2,88(r2)
 8037400:	1885c83a 	sub	r2,r3,r2
 8037404:	1007883a 	mov	r3,r2
 8037408:	e0bffe17 	ldw	r2,-8(fp)
 803740c:	10c5c83a 	sub	r2,r2,r3
 8037410:	e0bff415 	stw	r2,-48(fp)

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
 8037414:	e0bff717 	ldw	r2,-36(fp)
 8037418:	10800a17 	ldw	r2,40(r2)
 803741c:	1000071e 	bne	r2,zero,803743c <tcp_output+0x378>
 8037420:	e0bfea17 	ldw	r2,-88(fp)
 8037424:	10800a0b 	ldhu	r2,40(r2)
 8037428:	10bfffcc 	andi	r2,r2,65535
 803742c:	1085883a 	add	r2,r2,r2
 8037430:	1007883a 	mov	r3,r2
 8037434:	e0bff417 	ldw	r2,-48(fp)
 8037438:	10c02a0e 	bge	r2,r3,80374e4 <tcp_output+0x420>
         goto send;
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
 803743c:	e0bff417 	ldw	r2,-48(fp)
 8037440:	10c01924 	muli	r3,r2,100
 8037444:	e0bff717 	ldw	r2,-36(fp)
 8037448:	10800b17 	ldw	r2,44(r2)
 803744c:	100b883a 	mov	r5,r2
 8037450:	1809883a 	mov	r4,r3
 8037454:	800e2300 	call	800e230 <__udivsi3>
 8037458:	108008f0 	cmpltui	r2,r2,35
 803745c:	10002326 	beq	r2,zero,80374ec <tcp_output+0x428>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 8037460:	e0bff717 	ldw	r2,-36(fp)
 8037464:	10801217 	ldw	r2,72(r2)
 8037468:	10000a26 	beq	r2,zero,8037494 <tcp_output+0x3d0>
 803746c:	e0bfea17 	ldw	r2,-88(fp)
 8037470:	10800317 	ldw	r2,12(r2)
 8037474:	1000071e 	bne	r2,zero,8037494 <tcp_output+0x3d0>
       tp->t_timer[TCPT_PERSIST] == 0) 
 8037478:	e0bfea17 	ldw	r2,-88(fp)
 803747c:	10800417 	ldw	r2,16(r2)
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 8037480:	1000041e 	bne	r2,zero,8037494 <tcp_output+0x3d0>
   {
      tp->t_rxtshift = 0;
 8037484:	e0bfea17 	ldw	r2,-88(fp)
 8037488:	10000715 	stw	zero,28(r2)
      tcp_setpersist(tp);
 803748c:	e13fea17 	ldw	r4,-88(fp)
 8037490:	803805c0 	call	803805c <tcp_setpersist>
   }

   /*
    * No reason to send a segment, just return.
    */
   return (0);
 8037494:	0005883a 	mov	r2,zero
 8037498:	0002eb06 	br	8038048 <tcp_output+0xf84>
      goto send;
 803749c:	0001883a 	nop
 80374a0:	00001306 	br	80374f0 <tcp_output+0x42c>
      goto send;
 80374a4:	0001883a 	nop
 80374a8:	00001106 	br	80374f0 <tcp_output+0x42c>
      goto send;
 80374ac:	0001883a 	nop
 80374b0:	00000f06 	br	80374f0 <tcp_output+0x42c>
      goto send;
 80374b4:	0001883a 	nop
 80374b8:	00000d06 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374bc:	0001883a 	nop
 80374c0:	00000b06 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374c4:	0001883a 	nop
 80374c8:	00000906 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374cc:	0001883a 	nop
 80374d0:	00000706 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374d4:	0001883a 	nop
 80374d8:	00000506 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374dc:	0001883a 	nop
 80374e0:	00000306 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374e4:	0001883a 	nop
 80374e8:	00000106 	br	80374f0 <tcp_output+0x42c>
         goto send;
 80374ec:	0001883a 	nop

send:
   ENTER_CRIT_SECTION(tp);
 80374f0:	802c5bc0 	call	802c5bc <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
 80374f4:	e0bff517 	ldw	r2,-44(fp)
 80374f8:	e0bff815 	stw	r2,-32(fp)
   sendm = so->so_snd.sb_mb;
 80374fc:	e0bff717 	ldw	r2,-36(fp)
 8037500:	10801817 	ldw	r2,96(r2)
 8037504:	e0bff915 	stw	r2,-28(fp)
   if (len)
 8037508:	e0bfff17 	ldw	r2,-4(fp)
 803750c:	10005526 	beq	r2,zero,8037664 <tcp_output+0x5a0>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 8037510:	00000a06 	br	803753c <tcp_output+0x478>
      {
         bufoff -= sendm->m_len;
 8037514:	e0fff817 	ldw	r3,-32(fp)
 8037518:	e0bff917 	ldw	r2,-28(fp)
 803751c:	10800217 	ldw	r2,8(r2)
 8037520:	1885c83a 	sub	r2,r3,r2
 8037524:	e0bff815 	stw	r2,-32(fp)
         if (bufoff < 0)   /* if off is in this buffer, break */
 8037528:	e0bff817 	ldw	r2,-32(fp)
 803752c:	10000616 	blt	r2,zero,8037548 <tcp_output+0x484>
            break;
         sendm = sendm->m_next;
 8037530:	e0bff917 	ldw	r2,-28(fp)
 8037534:	10800617 	ldw	r2,24(r2)
 8037538:	e0bff915 	stw	r2,-28(fp)
      while (sendm)  /* loop through socket send list */
 803753c:	e0bff917 	ldw	r2,-28(fp)
 8037540:	103ff41e 	bne	r2,zero,8037514 <tcp_output+0x450>
 8037544:	00000106 	br	803754c <tcp_output+0x488>
            break;
 8037548:	0001883a 	nop
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
 803754c:	e0bff917 	ldw	r2,-28(fp)
 8037550:	1000011e 	bne	r2,zero,8037558 <tcp_output+0x494>
 8037554:	802c3fc0 	call	802c3fc <dtrap>
      bufoff += sendm->m_len; /* index to next data to send in msend */
 8037558:	e0bff917 	ldw	r2,-28(fp)
 803755c:	10c00217 	ldw	r3,8(r2)
 8037560:	e0bff817 	ldw	r2,-32(fp)
 8037564:	1885883a 	add	r2,r3,r2
 8037568:	e0bff815 	stw	r2,-32(fp)

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
 803756c:	e0bff917 	ldw	r2,-28(fp)
 8037570:	10800617 	ldw	r2,24(r2)
 8037574:	10000b26 	beq	r2,zero,80375a4 <tcp_output+0x4e0>
 8037578:	e0bff917 	ldw	r2,-28(fp)
 803757c:	10800217 	ldw	r2,8(r2)
 8037580:	1007883a 	mov	r3,r2
 8037584:	e0bfff17 	ldw	r2,-4(fp)
 8037588:	1880060e 	bge	r3,r2,80375a4 <tcp_output+0x4e0>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 803758c:	e0fffd17 	ldw	r3,-12(fp)
 8037590:	00bfff84 	movi	r2,-2
 8037594:	1884703a 	and	r2,r3,r2
 8037598:	e0bffd15 	stw	r2,-12(fp)
         sendalot = 1;     /* set to send more segments */
 803759c:	00800044 	movi	r2,1
 80375a0:	e0bffa15 	stw	r2,-24(fp)
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
 80375a4:	e0bffd17 	ldw	r2,-12(fp)
 80375a8:	1080004c 	andi	r2,r2,1
 80375ac:	10000826 	beq	r2,zero,80375d0 <tcp_output+0x50c>
 80375b0:	e0bff717 	ldw	r2,-36(fp)
 80375b4:	10801217 	ldw	r2,72(r2)
 80375b8:	e0ffff17 	ldw	r3,-4(fp)
 80375bc:	1880042e 	bgeu	r3,r2,80375d0 <tcp_output+0x50c>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 80375c0:	e0fffd17 	ldw	r3,-12(fp)
 80375c4:	00bfff84 	movi	r2,-2
 80375c8:	1884703a 	and	r2,r3,r2
 80375cc:	e0bffd15 	stw	r2,-12(fp)
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
 80375d0:	e0bff917 	ldw	r2,-28(fp)
 80375d4:	10800217 	ldw	r2,8(r2)
 80375d8:	1007883a 	mov	r3,r2
 80375dc:	e0bfff17 	ldw	r2,-4(fp)
 80375e0:	1880010e 	bge	r3,r2,80375e8 <tcp_output+0x524>
 80375e4:	1805883a 	mov	r2,r3
 80375e8:	e0bfff15 	stw	r2,-4(fp)
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 80375ec:	e0bff817 	ldw	r2,-32(fp)
 80375f0:	1000071e 	bne	r2,zero,8037610 <tcp_output+0x54c>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
 80375f4:	e0bff917 	ldw	r2,-28(fp)
 80375f8:	10c00317 	ldw	r3,12(r2)
 80375fc:	e0bff917 	ldw	r2,-28(fp)
 8037600:	10800417 	ldw	r2,16(r2)
 8037604:	1885c83a 	sub	r2,r3,r2
 8037608:	108000cc 	andi	r2,r2,3
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 803760c:	10001526 	beq	r2,zero,8037664 <tcp_output+0x5a0>
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
 8037610:	e0bff917 	ldw	r2,-28(fp)
 8037614:	10c00217 	ldw	r3,8(r2)
 8037618:	e0bff817 	ldw	r2,-32(fp)
 803761c:	1885c83a 	sub	r2,r3,r2
 8037620:	1007883a 	mov	r3,r2
 8037624:	e0bfff17 	ldw	r2,-4(fp)
 8037628:	1880010e 	bge	r3,r2,8037630 <tcp_output+0x56c>
 803762c:	1805883a 	mov	r2,r3
 8037630:	e0bfff15 	stw	r2,-4(fp)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 8037634:	d0a03317 	ldw	r2,-32564(gp)
 8037638:	10bff204 	addi	r2,r2,-56
 803763c:	1007883a 	mov	r3,r2
 8037640:	e0bfff17 	ldw	r2,-4(fp)
 8037644:	1880070e 	bge	r3,r2,8037664 <tcp_output+0x5a0>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
 8037648:	008201b4 	movhi	r2,2054
 803764c:	10bb8317 	ldw	r2,-4596(r2)
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 8037650:	10800088 	cmpgei	r2,r2,2
 8037654:	1000031e 	bne	r2,zero,8037664 <tcp_output+0x5a0>
         {
            len = lilbufsiz - HDRSLEN;
 8037658:	d0a03317 	ldw	r2,-32564(gp)
 803765c:	10bff204 	addi	r2,r2,-56
 8037660:	e0bfff15 	stw	r2,-4(fp)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
 8037664:	e0bfff17 	ldw	r2,-4(fp)
 8037668:	10003526 	beq	r2,zero,8037740 <tcp_output+0x67c>
 803766c:	e0bff817 	ldw	r2,-32(fp)
 8037670:	1000331e 	bne	r2,zero,8037740 <tcp_output+0x67c>
       (sendm->pkt->inuse == 1) &&
 8037674:	e0bff917 	ldw	r2,-28(fp)
 8037678:	10800117 	ldw	r2,4(r2)
 803767c:	10800917 	ldw	r2,36(r2)
   if (len && (bufoff == 0) && 
 8037680:	10800058 	cmpnei	r2,r2,1
 8037684:	10002e1e 	bne	r2,zero,8037740 <tcp_output+0x67c>
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
 8037688:	e0bff917 	ldw	r2,-28(fp)
 803768c:	10c00317 	ldw	r3,12(r2)
 8037690:	e0bff917 	ldw	r2,-28(fp)
 8037694:	10800417 	ldw	r2,16(r2)
 8037698:	1885c83a 	sub	r2,r3,r2
 803769c:	108000cc 	andi	r2,r2,3
       (sendm->pkt->inuse == 1) &&
 80376a0:	1000271e 	bne	r2,zero,8037740 <tcp_output+0x67c>
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
 80376a4:	e0bffb17 	ldw	r2,-20(fp)
 80376a8:	1000251e 	bne	r2,zero,8037740 <tcp_output+0x67c>
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
 80376ac:	000b883a 	mov	r5,zero
 80376b0:	01000084 	movi	r4,2
 80376b4:	802d1a80 	call	802d1a8 <m_getnbuf>
 80376b8:	e0bffc15 	stw	r2,-16(fp)
      if (!m)
 80376bc:	e0bffc17 	ldw	r2,-16(fp)
 80376c0:	1000031e 	bne	r2,zero,80376d0 <tcp_output+0x60c>
      {
         EXIT_CRIT_SECTION(tp);
 80376c4:	802c61c0 	call	802c61c <irq_Unmask>
         return (ENOBUFS);
 80376c8:	00801a44 	movi	r2,105
 80376cc:	00025e06 	br	8038048 <tcp_output+0xf84>
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
 80376d0:	e0bff917 	ldw	r2,-28(fp)
 80376d4:	10c00117 	ldw	r3,4(r2)
 80376d8:	e0bffc17 	ldw	r2,-16(fp)
 80376dc:	10c00115 	stw	r3,4(r2)
      m->pkt->inuse++;     /* bump packet's use count */
 80376e0:	e0bffc17 	ldw	r2,-16(fp)
 80376e4:	10800117 	ldw	r2,4(r2)
 80376e8:	10c00917 	ldw	r3,36(r2)
 80376ec:	18c00044 	addi	r3,r3,1
 80376f0:	10c00915 	stw	r3,36(r2)
      m->m_base = sendm->m_base; /* clone mbuf members */
 80376f4:	e0bff917 	ldw	r2,-28(fp)
 80376f8:	10c00417 	ldw	r3,16(r2)
 80376fc:	e0bffc17 	ldw	r2,-16(fp)
 8037700:	10c00415 	stw	r3,16(r2)
      m->m_memsz = sendm->m_memsz;
 8037704:	e0bff917 	ldw	r2,-28(fp)
 8037708:	10c00517 	ldw	r3,20(r2)
 803770c:	e0bffc17 	ldw	r2,-16(fp)
 8037710:	10c00515 	stw	r3,20(r2)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
 8037714:	e0bfff17 	ldw	r2,-4(fp)
 8037718:	10800a04 	addi	r2,r2,40
 803771c:	1007883a 	mov	r3,r2
 8037720:	e0bffc17 	ldw	r2,-16(fp)
 8037724:	10c00215 	stw	r3,8(r2)
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 8037728:	e0bff917 	ldw	r2,-28(fp)
 803772c:	10800317 	ldw	r2,12(r2)
 8037730:	10fff604 	addi	r3,r2,-40
 8037734:	e0bffc17 	ldw	r2,-16(fp)
 8037738:	10c00315 	stw	r3,12(r2)
 803773c:	00002706 	br	80377dc <tcp_output+0x718>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
 8037740:	d0a07c17 	ldw	r2,-32272(gp)
 8037744:	10800a04 	addi	r2,r2,40
 8037748:	100b883a 	mov	r5,r2
 803774c:	010000c4 	movi	r4,3
 8037750:	802d1a80 	call	802d1a8 <m_getnbuf>
 8037754:	e0bffc15 	stw	r2,-16(fp)
      if (m ==(struct mbuf *)NULL)
 8037758:	e0bffc17 	ldw	r2,-16(fp)
 803775c:	1000031e 	bne	r2,zero,803776c <tcp_output+0x6a8>
      {
         EXIT_CRIT_SECTION(tp);
 8037760:	802c61c0 	call	802c61c <irq_Unmask>
         return ENOBUFS;
 8037764:	00801a44 	movi	r2,105
 8037768:	00023706 	br	8038048 <tcp_output+0xf84>
      }

      m->m_len = TCPIPHDRSZ;
 803776c:	e0bffc17 	ldw	r2,-16(fp)
 8037770:	00c00a04 	movi	r3,40
 8037774:	10c00215 	stw	r3,8(r2)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 8037778:	e0bffc17 	ldw	r2,-16(fp)
 803777c:	10800317 	ldw	r2,12(r2)
 8037780:	d0e07c17 	ldw	r3,-32272(gp)
 8037784:	10c7883a 	add	r3,r2,r3
 8037788:	e0bffc17 	ldw	r2,-16(fp)
 803778c:	10c00315 	stw	r3,12(r2)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
 8037790:	e0bfff17 	ldw	r2,-4(fp)
 8037794:	10001126 	beq	r2,zero,80377dc <tcp_output+0x718>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
 8037798:	e0bff717 	ldw	r2,-36(fp)
 803779c:	10801817 	ldw	r2,96(r2)
 80377a0:	e1bfff17 	ldw	r6,-4(fp)
 80377a4:	e17ff517 	ldw	r5,-44(fp)
 80377a8:	1009883a 	mov	r4,r2
 80377ac:	802d47c0 	call	802d47c <m_copy>
 80377b0:	1007883a 	mov	r3,r2
 80377b4:	e0bffc17 	ldw	r2,-16(fp)
 80377b8:	10c00615 	stw	r3,24(r2)
         if (m->m_next == 0)
 80377bc:	e0bffc17 	ldw	r2,-16(fp)
 80377c0:	10800617 	ldw	r2,24(r2)
 80377c4:	1000051e 	bne	r2,zero,80377dc <tcp_output+0x718>
         {
            m_freem(m);
 80377c8:	e13ffc17 	ldw	r4,-16(fp)
 80377cc:	802d4340 	call	802d434 <m_freem>
            EXIT_CRIT_SECTION(tp);
 80377d0:	802c61c0 	call	802c61c <irq_Unmask>
            return ENOBUFS;
 80377d4:	00801a44 	movi	r2,105
 80377d8:	00021b06 	br	8038048 <tcp_output+0xf84>
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
 80377dc:	802c61c0 	call	802c61c <irq_Unmask>

   if (len) 
 80377e0:	e0bfff17 	ldw	r2,-4(fp)
 80377e4:	10002d26 	beq	r2,zero,803789c <tcp_output+0x7d8>
   {
      if (tp->t_force && len == 1)
 80377e8:	e0bfea17 	ldw	r2,-88(fp)
 80377ec:	10800a83 	ldbu	r2,42(r2)
 80377f0:	10803fcc 	andi	r2,r2,255
 80377f4:	1080201c 	xori	r2,r2,128
 80377f8:	10bfe004 	addi	r2,r2,-128
 80377fc:	10000926 	beq	r2,zero,8037824 <tcp_output+0x760>
 8037800:	e0bfff17 	ldw	r2,-4(fp)
 8037804:	10800058 	cmpnei	r2,r2,1
 8037808:	1000061e 	bne	r2,zero,8037824 <tcp_output+0x760>
         tcpstat.tcps_sndprobe++;
 803780c:	008201b4 	movhi	r2,2054
 8037810:	10bc5f17 	ldw	r2,-3716(r2)
 8037814:	10c00044 	addi	r3,r2,1
 8037818:	008201b4 	movhi	r2,2054
 803781c:	10fc5f15 	stw	r3,-3716(r2)
 8037820:	00004306 	br	8037930 <tcp_output+0x86c>
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
 8037824:	e0bfea17 	ldw	r2,-88(fp)
 8037828:	10c00f17 	ldw	r3,60(r2)
 803782c:	e0bfea17 	ldw	r2,-88(fp)
 8037830:	10801a17 	ldw	r2,104(r2)
 8037834:	1885c83a 	sub	r2,r3,r2
 8037838:	10000c0e 	bge	r2,zero,803786c <tcp_output+0x7a8>
      {
         tcpstat.tcps_sndrexmitpack++;
 803783c:	008201b4 	movhi	r2,2054
 8037840:	10bc5c17 	ldw	r2,-3728(r2)
 8037844:	10c00044 	addi	r3,r2,1
 8037848:	008201b4 	movhi	r2,2054
 803784c:	10fc5c15 	stw	r3,-3728(r2)
         tcpstat.tcps_sndrexmitbyte += len;
 8037850:	008201b4 	movhi	r2,2054
 8037854:	10fc5d17 	ldw	r3,-3724(r2)
 8037858:	e0bfff17 	ldw	r2,-4(fp)
 803785c:	1887883a 	add	r3,r3,r2
 8037860:	008201b4 	movhi	r2,2054
 8037864:	10fc5d15 	stw	r3,-3724(r2)
 8037868:	00003106 	br	8037930 <tcp_output+0x86c>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 803786c:	008201b4 	movhi	r2,2054
 8037870:	10bc5a17 	ldw	r2,-3736(r2)
 8037874:	10c00044 	addi	r3,r2,1
 8037878:	008201b4 	movhi	r2,2054
 803787c:	10fc5a15 	stw	r3,-3736(r2)
         tcpstat.tcps_sndbyte += len;
 8037880:	008201b4 	movhi	r2,2054
 8037884:	10fc5b17 	ldw	r3,-3732(r2)
 8037888:	e0bfff17 	ldw	r2,-4(fp)
 803788c:	1887883a 	add	r3,r3,r2
 8037890:	008201b4 	movhi	r2,2054
 8037894:	10fc5b15 	stw	r3,-3732(r2)
 8037898:	00002506 	br	8037930 <tcp_output+0x86c>
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
 803789c:	e0bfea17 	ldw	r2,-88(fp)
 80378a0:	10800b0b 	ldhu	r2,44(r2)
 80378a4:	10bfffcc 	andi	r2,r2,65535
 80378a8:	1080004c 	andi	r2,r2,1
 80378ac:	10000626 	beq	r2,zero,80378c8 <tcp_output+0x804>
   {
      tcpstat.tcps_sndacks++;
 80378b0:	008201b4 	movhi	r2,2054
 80378b4:	10bc5e17 	ldw	r2,-3720(r2)
 80378b8:	10c00044 	addi	r3,r2,1
 80378bc:	008201b4 	movhi	r2,2054
 80378c0:	10fc5e15 	stw	r3,-3720(r2)
 80378c4:	00001a06 	br	8037930 <tcp_output+0x86c>
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
 80378c8:	e0bffd17 	ldw	r2,-12(fp)
 80378cc:	108001cc 	andi	r2,r2,7
 80378d0:	10000626 	beq	r2,zero,80378ec <tcp_output+0x828>
      tcpstat.tcps_sndctrl++;
 80378d4:	008201b4 	movhi	r2,2054
 80378d8:	10bc6217 	ldw	r2,-3704(r2)
 80378dc:	10c00044 	addi	r3,r2,1
 80378e0:	008201b4 	movhi	r2,2054
 80378e4:	10fc6215 	stw	r3,-3704(r2)
 80378e8:	00001106 	br	8037930 <tcp_output+0x86c>
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
 80378ec:	e0bfea17 	ldw	r2,-88(fp)
 80378f0:	10c01017 	ldw	r3,64(r2)
 80378f4:	e0bfea17 	ldw	r2,-88(fp)
 80378f8:	10800e17 	ldw	r2,56(r2)
 80378fc:	1885c83a 	sub	r2,r3,r2
 8037900:	0080060e 	bge	zero,r2,803791c <tcp_output+0x858>
      tcpstat.tcps_sndurg++;
 8037904:	008201b4 	movhi	r2,2054
 8037908:	10bc6017 	ldw	r2,-3712(r2)
 803790c:	10c00044 	addi	r3,r2,1
 8037910:	008201b4 	movhi	r2,2054
 8037914:	10fc6015 	stw	r3,-3712(r2)
 8037918:	00000506 	br	8037930 <tcp_output+0x86c>
   else
      tcpstat.tcps_sndwinup++;
 803791c:	008201b4 	movhi	r2,2054
 8037920:	10bc6117 	ldw	r2,-3708(r2)
 8037924:	10c00044 	addi	r3,r2,1
 8037928:	008201b4 	movhi	r2,2054
 803792c:	10fc6115 	stw	r3,-3708(r2)

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
 8037930:	e0bffc17 	ldw	r2,-16(fp)
 8037934:	10800317 	ldw	r2,12(r2)
 8037938:	e0bff315 	stw	r2,-52(fp)
   if ((char *)ti < m->pkt->nb_buff)
 803793c:	e0bffc17 	ldw	r2,-16(fp)
 8037940:	10800117 	ldw	r2,4(r2)
 8037944:	10800117 	ldw	r2,4(r2)
 8037948:	e0fff317 	ldw	r3,-52(fp)
 803794c:	1880032e 	bgeu	r3,r2,803795c <tcp_output+0x898>
   {
      panic("tcp_out- packet ptr underflow\n");
 8037950:	01020174 	movhi	r4,2053
 8037954:	210c3204 	addi	r4,r4,12488
 8037958:	8027fe00 	call	8027fe0 <panic>
   }
   tcp_mbuf = m;        /* flag TCP header mbuf */
 803795c:	e0bffc17 	ldw	r2,-16(fp)
 8037960:	e0bff215 	stw	r2,-56(fp)
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
 8037964:	e0bfea17 	ldw	r2,-88(fp)
 8037968:	10800c17 	ldw	r2,48(r2)
 803796c:	1000031e 	bne	r2,zero,803797c <tcp_output+0x8b8>
      panic("tcp_output");
 8037970:	01020174 	movhi	r4,2053
 8037974:	210c3a04 	addi	r4,r4,12520
 8037978:	8027fe00 	call	8027fe0 <panic>

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 803797c:	e0bfea17 	ldw	r2,-88(fp)
 8037980:	10800c17 	ldw	r2,48(r2)
 8037984:	01800a04 	movi	r6,40
 8037988:	100b883a 	mov	r5,r2
 803798c:	e13ff317 	ldw	r4,-52(fp)
 8037990:	8002ea40 	call	8002ea4 <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 8037994:	e0bffd17 	ldw	r2,-12(fp)
 8037998:	1080004c 	andi	r2,r2,1
 803799c:	10000f26 	beq	r2,zero,80379dc <tcp_output+0x918>
 80379a0:	e0bfea17 	ldw	r2,-88(fp)
 80379a4:	10800b0b 	ldhu	r2,44(r2)
 80379a8:	10bfffcc 	andi	r2,r2,65535
 80379ac:	1080040c 	andi	r2,r2,16
 80379b0:	10000a26 	beq	r2,zero,80379dc <tcp_output+0x918>
       tp->snd_nxt == tp->snd_max)
 80379b4:	e0bfea17 	ldw	r2,-88(fp)
 80379b8:	10c00f17 	ldw	r3,60(r2)
 80379bc:	e0bfea17 	ldw	r2,-88(fp)
 80379c0:	10801a17 	ldw	r2,104(r2)
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 80379c4:	1880051e 	bne	r3,r2,80379dc <tcp_output+0x918>
   {
      tp->snd_nxt--;
 80379c8:	e0bfea17 	ldw	r2,-88(fp)
 80379cc:	10800f17 	ldw	r2,60(r2)
 80379d0:	10ffffc4 	addi	r3,r2,-1
 80379d4:	e0bfea17 	ldw	r2,-88(fp)
 80379d8:	10c00f15 	stw	r3,60(r2)
   }

   ti->ti_seq = htonl(tp->snd_nxt);
 80379dc:	e0bfea17 	ldw	r2,-88(fp)
 80379e0:	10800f17 	ldw	r2,60(r2)
 80379e4:	1006d63a 	srli	r3,r2,24
 80379e8:	e0bfea17 	ldw	r2,-88(fp)
 80379ec:	10800f17 	ldw	r2,60(r2)
 80379f0:	1004d23a 	srli	r2,r2,8
 80379f4:	10bfc00c 	andi	r2,r2,65280
 80379f8:	1886b03a 	or	r3,r3,r2
 80379fc:	e0bfea17 	ldw	r2,-88(fp)
 8037a00:	10800f17 	ldw	r2,60(r2)
 8037a04:	1004923a 	slli	r2,r2,8
 8037a08:	10803fec 	andhi	r2,r2,255
 8037a0c:	1886b03a 	or	r3,r3,r2
 8037a10:	e0bfea17 	ldw	r2,-88(fp)
 8037a14:	10800f17 	ldw	r2,60(r2)
 8037a18:	1004963a 	slli	r2,r2,24
 8037a1c:	1886b03a 	or	r3,r3,r2
 8037a20:	e0bff317 	ldw	r2,-52(fp)
 8037a24:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(tp->rcv_nxt);
 8037a28:	e0bfea17 	ldw	r2,-88(fp)
 8037a2c:	10801617 	ldw	r2,88(r2)
 8037a30:	1006d63a 	srli	r3,r2,24
 8037a34:	e0bfea17 	ldw	r2,-88(fp)
 8037a38:	10801617 	ldw	r2,88(r2)
 8037a3c:	1004d23a 	srli	r2,r2,8
 8037a40:	10bfc00c 	andi	r2,r2,65280
 8037a44:	1886b03a 	or	r3,r3,r2
 8037a48:	e0bfea17 	ldw	r2,-88(fp)
 8037a4c:	10801617 	ldw	r2,88(r2)
 8037a50:	1004923a 	slli	r2,r2,8
 8037a54:	10803fec 	andhi	r2,r2,255
 8037a58:	1886b03a 	or	r3,r3,r2
 8037a5c:	e0bfea17 	ldw	r2,-88(fp)
 8037a60:	10801617 	ldw	r2,88(r2)
 8037a64:	1004963a 	slli	r2,r2,24
 8037a68:	1886b03a 	or	r3,r3,r2
 8037a6c:	e0bff317 	ldw	r2,-52(fp)
 8037a70:	10c00715 	stw	r3,28(r2)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 8037a74:	e0bffd17 	ldw	r2,-12(fp)
 8037a78:	1080008c 	andi	r2,r2,2
 8037a7c:	10002226 	beq	r2,zero,8037b08 <tcp_output+0xa44>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
 8037a80:	e0bff717 	ldw	r2,-36(fp)
 8037a84:	10800117 	ldw	r2,4(r2)
 8037a88:	e0bff115 	stw	r2,-60(fp)

      switch(so->so_domain)
 8037a8c:	e0bff717 	ldw	r2,-36(fp)
 8037a90:	10800517 	ldw	r2,20(r2)
 8037a94:	10800098 	cmpnei	r2,r2,2
 8037a98:	1000191e 	bne	r2,zero,8037b00 <tcp_output+0xa3c>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
 8037a9c:	e0bffd17 	ldw	r2,-12(fp)
 8037aa0:	1080040c 	andi	r2,r2,16
 8037aa4:	10001a1e 	bne	r2,zero,8037b10 <tcp_output+0xa4c>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
 8037aa8:	e0bff317 	ldw	r2,-52(fp)
 8037aac:	10800417 	ldw	r2,16(r2)
 8037ab0:	e0ffeb04 	addi	r3,fp,-84
 8037ab4:	180b883a 	mov	r5,r3
 8037ab8:	1009883a 	mov	r4,r2
 8037abc:	803fca80 	call	803fca8 <iproute>
 8037ac0:	e0bff015 	stw	r2,-64(fp)
               if(ifp)
 8037ac4:	e0bff017 	ldw	r2,-64(fp)
 8037ac8:	10000926 	beq	r2,zero,8037af0 <tcp_output+0xa2c>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 8037acc:	e0bff017 	ldw	r2,-64(fp)
 8037ad0:	10c00917 	ldw	r3,36(r2)
 8037ad4:	e0bff017 	ldw	r2,-64(fp)
 8037ad8:	10800817 	ldw	r2,32(r2)
 8037adc:	10800a04 	addi	r2,r2,40
 8037ae0:	1887c83a 	sub	r3,r3,r2
 8037ae4:	e0bff117 	ldw	r2,-60(fp)
 8037ae8:	10c00615 	stw	r3,24(r2)
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
            }
#endif   /* IP_PMTU */
         }
         break;
 8037aec:	00000806 	br	8037b10 <tcp_output+0xa4c>
                  inp->inp_pmtu = 580;  /* Ugh. */
 8037af0:	e0bff117 	ldw	r2,-60(fp)
 8037af4:	00c09104 	movi	r3,580
 8037af8:	10c00615 	stw	r3,24(r2)
         break;
 8037afc:	00000406 	br	8037b10 <tcp_output+0xa4c>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
 8037b00:	802c3fc0 	call	802c3fc <dtrap>
 8037b04:	00000306 	br	8037b14 <tcp_output+0xa50>
      }
   }
 8037b08:	0001883a 	nop
 8037b0c:	00000106 	br	8037b14 <tcp_output+0xa50>
         break;
 8037b10:	0001883a 	nop

   /* fill in options if any are set */
   if (optlen)
 8037b14:	e0bffb17 	ldw	r2,-20(fp)
 8037b18:	10002b26 	beq	r2,zero,8037bc8 <tcp_output+0xb04>
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
 8037b1c:	01404004 	movi	r5,256
 8037b20:	01000084 	movi	r4,2
 8037b24:	802d1a80 	call	802d1a8 <m_getnbuf>
 8037b28:	e0bfef15 	stw	r2,-68(fp)
      if (mopt == NULL) 
 8037b2c:	e0bfef17 	ldw	r2,-68(fp)
 8037b30:	1000041e 	bne	r2,zero,8037b44 <tcp_output+0xa80>
      {
         m_freem(m);
 8037b34:	e13ffc17 	ldw	r4,-16(fp)
 8037b38:	802d4340 	call	802d434 <m_freem>
         return (ENOBUFS);
 8037b3c:	00801a44 	movi	r2,105
 8037b40:	00014106 	br	8038048 <tcp_output+0xf84>
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
 8037b44:	e0bff217 	ldw	r2,-56(fp)
 8037b48:	10c00617 	ldw	r3,24(r2)
 8037b4c:	e0bfef17 	ldw	r2,-68(fp)
 8037b50:	10c00615 	stw	r3,24(r2)
      tcp_mbuf->m_next = mopt;
 8037b54:	e0bff217 	ldw	r2,-56(fp)
 8037b58:	e0ffef17 	ldw	r3,-68(fp)
 8037b5c:	10c00615 	stw	r3,24(r2)

      /* extend options to aligned address */
      while(optlen & 0x03)
 8037b60:	00000606 	br	8037b7c <tcp_output+0xab8>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
 8037b64:	e0bffb17 	ldw	r2,-20(fp)
 8037b68:	10c00044 	addi	r3,r2,1
 8037b6c:	e0fffb15 	stw	r3,-20(fp)
 8037b70:	d0e0ae04 	addi	r3,gp,-32072
 8037b74:	10c5883a 	add	r2,r2,r3
 8037b78:	10000005 	stb	zero,0(r2)
      while(optlen & 0x03)
 8037b7c:	e0bffb17 	ldw	r2,-20(fp)
 8037b80:	108000cc 	andi	r2,r2,3
 8037b84:	103ff71e 	bne	r2,zero,8037b64 <tcp_output+0xaa0>

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
 8037b88:	e0bfef17 	ldw	r2,-68(fp)
 8037b8c:	10800317 	ldw	r2,12(r2)
 8037b90:	e1bffb17 	ldw	r6,-20(fp)
 8037b94:	d160ae04 	addi	r5,gp,-32072
 8037b98:	1009883a 	mov	r4,r2
 8037b9c:	8002ea40 	call	8002ea4 <memcpy>
      mopt->m_len = optlen;
 8037ba0:	e0bfef17 	ldw	r2,-68(fp)
 8037ba4:	e0fffb17 	ldw	r3,-20(fp)
 8037ba8:	10c00215 	stw	r3,8(r2)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
 8037bac:	e0bffb17 	ldw	r2,-20(fp)
 8037bb0:	10800504 	addi	r2,r2,20
 8037bb4:	1004d0ba 	srli	r2,r2,2
 8037bb8:	1004913a 	slli	r2,r2,4
 8037bbc:	1007883a 	mov	r3,r2
 8037bc0:	e0bff317 	ldw	r2,-52(fp)
 8037bc4:	10c00805 	stb	r3,32(r2)
   }

   ti->ti_flags = (u_char)flags;
 8037bc8:	e0bffd17 	ldw	r2,-12(fp)
 8037bcc:	1007883a 	mov	r3,r2
 8037bd0:	e0bff317 	ldw	r2,-52(fp)
 8037bd4:	10c00845 	stb	r3,33(r2)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
 8037bd8:	e0bff717 	ldw	r2,-36(fp)
 8037bdc:	10800b17 	ldw	r2,44(r2)
 8037be0:	1004d0ba 	srli	r2,r2,2
 8037be4:	1007883a 	mov	r3,r2
 8037be8:	e0bffe17 	ldw	r2,-8(fp)
 8037bec:	10c0060e 	bge	r2,r3,8037c08 <tcp_output+0xb44>
 8037bf0:	e0bfea17 	ldw	r2,-88(fp)
 8037bf4:	10800a0b 	ldhu	r2,40(r2)
 8037bf8:	10bfffcc 	andi	r2,r2,65535
 8037bfc:	e0fffe17 	ldw	r3,-8(fp)
 8037c00:	1880010e 	bge	r3,r2,8037c08 <tcp_output+0xb44>
      win = 0;
 8037c04:	e03ffe15 	stw	zero,-8(fp)
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
 8037c08:	e0bfea17 	ldw	r2,-88(fp)
 8037c0c:	10c01917 	ldw	r3,100(r2)
 8037c10:	e0bfea17 	ldw	r2,-88(fp)
 8037c14:	10801617 	ldw	r2,88(r2)
 8037c18:	1885c83a 	sub	r2,r3,r2
 8037c1c:	1007883a 	mov	r3,r2
 8037c20:	e0bffe17 	ldw	r2,-8(fp)
 8037c24:	10c0060e 	bge	r2,r3,8037c40 <tcp_output+0xb7c>
      win = (long)(tp->rcv_adv - tp->rcv_nxt);
 8037c28:	e0bfea17 	ldw	r2,-88(fp)
 8037c2c:	10c01917 	ldw	r3,100(r2)
 8037c30:	e0bfea17 	ldw	r2,-88(fp)
 8037c34:	10801617 	ldw	r2,88(r2)
 8037c38:	1885c83a 	sub	r2,r3,r2
 8037c3c:	e0bffe15 	stw	r2,-8(fp)

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 8037c40:	008201b4 	movhi	r2,2054
 8037c44:	10bb8317 	ldw	r2,-4596(r2)
 8037c48:	1000021e 	bne	r2,zero,8037c54 <tcp_output+0xb90>
   {
      win = 0;
 8037c4c:	e03ffe15 	stw	zero,-8(fp)
 8037c50:	00000e06 	br	8037c8c <tcp_output+0xbc8>
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
 8037c54:	008201b4 	movhi	r2,2054
 8037c58:	10bb8317 	ldw	r2,-4596(r2)
 8037c5c:	10bfffc4 	addi	r2,r2,-1
 8037c60:	d0e03517 	ldw	r3,-32556(gp)
 8037c64:	10c7383a 	mul	r3,r2,r3
 8037c68:	e0bffe17 	ldw	r2,-8(fp)
 8037c6c:	1880070e 	bge	r3,r2,8037c8c <tcp_output+0xbc8>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
 8037c70:	008201b4 	movhi	r2,2054
 8037c74:	10bb8317 	ldw	r2,-4596(r2)
 8037c78:	10bfffc4 	addi	r2,r2,-1
 8037c7c:	1007883a 	mov	r3,r2
 8037c80:	d0a03517 	ldw	r2,-32556(gp)
 8037c84:	1885383a 	mul	r2,r3,r2
 8037c88:	e0bffe15 	stw	r2,-8(fp)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
 8037c8c:	e0bffe17 	ldw	r2,-8(fp)
 8037c90:	10bfffcc 	andi	r2,r2,65535
 8037c94:	1004d23a 	srli	r2,r2,8
 8037c98:	1007883a 	mov	r3,r2
 8037c9c:	e0bffe17 	ldw	r2,-8(fp)
 8037ca0:	10bfffcc 	andi	r2,r2,65535
 8037ca4:	1004923a 	slli	r2,r2,8
 8037ca8:	1884b03a 	or	r2,r3,r2
 8037cac:	1007883a 	mov	r3,r2
 8037cb0:	e0bff317 	ldw	r2,-52(fp)
 8037cb4:	10c0088d 	sth	r3,34(r2)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 8037cb8:	e0bfea17 	ldw	r2,-88(fp)
 8037cbc:	10c01017 	ldw	r3,64(r2)
 8037cc0:	e0bfea17 	ldw	r2,-88(fp)
 8037cc4:	10800f17 	ldw	r2,60(r2)
 8037cc8:	1885c83a 	sub	r2,r3,r2
 8037ccc:	00801c0e 	bge	zero,r2,8037d40 <tcp_output+0xc7c>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 8037cd0:	e0bfea17 	ldw	r2,-88(fp)
 8037cd4:	10801017 	ldw	r2,64(r2)
 8037cd8:	1007883a 	mov	r3,r2
 8037cdc:	e0bfea17 	ldw	r2,-88(fp)
 8037ce0:	10800f17 	ldw	r2,60(r2)
 8037ce4:	1885c83a 	sub	r2,r3,r2
 8037ce8:	10bfffcc 	andi	r2,r2,65535
 8037cec:	1004d23a 	srli	r2,r2,8
 8037cf0:	1007883a 	mov	r3,r2
 8037cf4:	e0bfea17 	ldw	r2,-88(fp)
 8037cf8:	10801017 	ldw	r2,64(r2)
 8037cfc:	1009883a 	mov	r4,r2
 8037d00:	e0bfea17 	ldw	r2,-88(fp)
 8037d04:	10800f17 	ldw	r2,60(r2)
 8037d08:	2085c83a 	sub	r2,r4,r2
 8037d0c:	10bfffcc 	andi	r2,r2,65535
 8037d10:	1004923a 	slli	r2,r2,8
 8037d14:	1884b03a 	or	r2,r3,r2
 8037d18:	1007883a 	mov	r3,r2
 8037d1c:	e0bff317 	ldw	r2,-52(fp)
 8037d20:	10c0098d 	sth	r3,38(r2)
      ti->ti_flags |= TH_URG;
 8037d24:	e0bff317 	ldw	r2,-52(fp)
 8037d28:	10800843 	ldbu	r2,33(r2)
 8037d2c:	10800814 	ori	r2,r2,32
 8037d30:	1007883a 	mov	r3,r2
 8037d34:	e0bff317 	ldw	r2,-52(fp)
 8037d38:	10c00845 	stb	r3,33(r2)
 8037d3c:	00000406 	br	8037d50 <tcp_output+0xc8c>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
 8037d40:	e0bfea17 	ldw	r2,-88(fp)
 8037d44:	10c00e17 	ldw	r3,56(r2)
 8037d48:	e0bfea17 	ldw	r2,-88(fp)
 8037d4c:	10c01015 	stw	r3,64(r2)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
 8037d50:	e0bfff17 	ldw	r2,-4(fp)
 8037d54:	10000c26 	beq	r2,zero,8037d88 <tcp_output+0xcc4>
 8037d58:	e0fff517 	ldw	r3,-44(fp)
 8037d5c:	e0bfff17 	ldw	r2,-4(fp)
 8037d60:	1885883a 	add	r2,r3,r2
 8037d64:	e0fff717 	ldw	r3,-36(fp)
 8037d68:	18c01217 	ldw	r3,72(r3)
 8037d6c:	10c0061e 	bne	r2,r3,8037d88 <tcp_output+0xcc4>
      ti->ti_flags |= TH_PUSH;
 8037d70:	e0bff317 	ldw	r2,-52(fp)
 8037d74:	10800843 	ldbu	r2,33(r2)
 8037d78:	10800214 	ori	r2,r2,8
 8037d7c:	1007883a 	mov	r3,r2
 8037d80:	e0bff317 	ldw	r2,-52(fp)
 8037d84:	10c00845 	stb	r3,33(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
 8037d88:	e0bfea17 	ldw	r2,-88(fp)
 8037d8c:	10800a83 	ldbu	r2,42(r2)
 8037d90:	10803fcc 	andi	r2,r2,255
 8037d94:	1080201c 	xori	r2,r2,128
 8037d98:	10bfe004 	addi	r2,r2,-128
 8037d9c:	10000326 	beq	r2,zero,8037dac <tcp_output+0xce8>
 8037da0:	e0bfea17 	ldw	r2,-88(fp)
 8037da4:	10800417 	ldw	r2,16(r2)
 8037da8:	10004b1e 	bne	r2,zero,8037ed8 <tcp_output+0xe14>
   {
      tcp_seq startseq = tp->snd_nxt;
 8037dac:	e0bfea17 	ldw	r2,-88(fp)
 8037db0:	10800f17 	ldw	r2,60(r2)
 8037db4:	e0bfee15 	stw	r2,-72(fp)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
 8037db8:	e0bffd17 	ldw	r2,-12(fp)
 8037dbc:	1080008c 	andi	r2,r2,2
 8037dc0:	10000526 	beq	r2,zero,8037dd8 <tcp_output+0xd14>
         tp->snd_nxt++;
 8037dc4:	e0bfea17 	ldw	r2,-88(fp)
 8037dc8:	10800f17 	ldw	r2,60(r2)
 8037dcc:	10c00044 	addi	r3,r2,1
 8037dd0:	e0bfea17 	ldw	r2,-88(fp)
 8037dd4:	10c00f15 	stw	r3,60(r2)

      if (flags & TH_FIN)
 8037dd8:	e0bffd17 	ldw	r2,-12(fp)
 8037ddc:	1080004c 	andi	r2,r2,1
 8037de0:	10000b26 	beq	r2,zero,8037e10 <tcp_output+0xd4c>
      {
         tp->snd_nxt++;
 8037de4:	e0bfea17 	ldw	r2,-88(fp)
 8037de8:	10800f17 	ldw	r2,60(r2)
 8037dec:	10c00044 	addi	r3,r2,1
 8037df0:	e0bfea17 	ldw	r2,-88(fp)
 8037df4:	10c00f15 	stw	r3,60(r2)
         tp->t_flags |= TF_SENTFIN;
 8037df8:	e0bfea17 	ldw	r2,-88(fp)
 8037dfc:	10800b0b 	ldhu	r2,44(r2)
 8037e00:	10800414 	ori	r2,r2,16
 8037e04:	1007883a 	mov	r3,r2
 8037e08:	e0bfea17 	ldw	r2,-88(fp)
 8037e0c:	10c00b0d 	sth	r3,44(r2)
      }
      tp->snd_nxt += len;
 8037e10:	e0bfea17 	ldw	r2,-88(fp)
 8037e14:	10c00f17 	ldw	r3,60(r2)
 8037e18:	e0bfff17 	ldw	r2,-4(fp)
 8037e1c:	1887883a 	add	r3,r3,r2
 8037e20:	e0bfea17 	ldw	r2,-88(fp)
 8037e24:	10c00f15 	stw	r3,60(r2)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
 8037e28:	e0bfea17 	ldw	r2,-88(fp)
 8037e2c:	10c00f17 	ldw	r3,60(r2)
 8037e30:	e0bfea17 	ldw	r2,-88(fp)
 8037e34:	10801a17 	ldw	r2,104(r2)
 8037e38:	1885c83a 	sub	r2,r3,r2
 8037e3c:	0080120e 	bge	zero,r2,8037e88 <tcp_output+0xdc4>
      {
         tp->snd_max = tp->snd_nxt;
 8037e40:	e0bfea17 	ldw	r2,-88(fp)
 8037e44:	10c00f17 	ldw	r3,60(r2)
 8037e48:	e0bfea17 	ldw	r2,-88(fp)
 8037e4c:	10c01a15 	stw	r3,104(r2)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
 8037e50:	e0bfea17 	ldw	r2,-88(fp)
 8037e54:	10801e17 	ldw	r2,120(r2)
 8037e58:	10000b1e 	bne	r2,zero,8037e88 <tcp_output+0xdc4>
         {
            tp->t_rttick = cticks;
 8037e5c:	d0e0a317 	ldw	r3,-32116(gp)
 8037e60:	e0bfea17 	ldw	r2,-88(fp)
 8037e64:	10c01e15 	stw	r3,120(r2)
            tp->t_rtseq = startseq;
 8037e68:	e0bfea17 	ldw	r2,-88(fp)
 8037e6c:	e0ffee17 	ldw	r3,-72(fp)
 8037e70:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_segstimed++;
 8037e74:	008201b4 	movhi	r2,2054
 8037e78:	10bc5017 	ldw	r2,-3776(r2)
 8037e7c:	10c00044 	addi	r3,r2,1
 8037e80:	008201b4 	movhi	r2,2054
 8037e84:	10fc5015 	stw	r3,-3776(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 8037e88:	e0bfea17 	ldw	r2,-88(fp)
 8037e8c:	10800317 	ldw	r2,12(r2)
 8037e90:	1000201e 	bne	r2,zero,8037f14 <tcp_output+0xe50>
          tp->snd_nxt != tp->snd_una) 
 8037e94:	e0bfea17 	ldw	r2,-88(fp)
 8037e98:	10c00f17 	ldw	r3,60(r2)
 8037e9c:	e0bfea17 	ldw	r2,-88(fp)
 8037ea0:	10800e17 	ldw	r2,56(r2)
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 8037ea4:	18801b26 	beq	r3,r2,8037f14 <tcp_output+0xe50>
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 8037ea8:	e0bfea17 	ldw	r2,-88(fp)
 8037eac:	10c00817 	ldw	r3,32(r2)
 8037eb0:	e0bfea17 	ldw	r2,-88(fp)
 8037eb4:	10c00315 	stw	r3,12(r2)
         if (tp->t_timer[TCPT_PERSIST]) 
 8037eb8:	e0bfea17 	ldw	r2,-88(fp)
 8037ebc:	10800417 	ldw	r2,16(r2)
 8037ec0:	10001426 	beq	r2,zero,8037f14 <tcp_output+0xe50>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
 8037ec4:	e0bfea17 	ldw	r2,-88(fp)
 8037ec8:	10000415 	stw	zero,16(r2)
            tp->t_rxtshift = 0;
 8037ecc:	e0bfea17 	ldw	r2,-88(fp)
 8037ed0:	10000715 	stw	zero,28(r2)
   {
 8037ed4:	00000f06 	br	8037f14 <tcp_output+0xe50>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
 8037ed8:	e0bfea17 	ldw	r2,-88(fp)
 8037edc:	10c00f17 	ldw	r3,60(r2)
 8037ee0:	e0bfff17 	ldw	r2,-4(fp)
 8037ee4:	1887883a 	add	r3,r3,r2
 8037ee8:	e0bfea17 	ldw	r2,-88(fp)
 8037eec:	10801a17 	ldw	r2,104(r2)
 8037ef0:	1885c83a 	sub	r2,r3,r2
 8037ef4:	0080080e 	bge	zero,r2,8037f18 <tcp_output+0xe54>
         tp->snd_max = tp->snd_nxt + len;
 8037ef8:	e0bfea17 	ldw	r2,-88(fp)
 8037efc:	10c00f17 	ldw	r3,60(r2)
 8037f00:	e0bfff17 	ldw	r2,-4(fp)
 8037f04:	1887883a 	add	r3,r3,r2
 8037f08:	e0bfea17 	ldw	r2,-88(fp)
 8037f0c:	10c01a15 	stw	r3,104(r2)
 8037f10:	00000106 	br	8037f18 <tcp_output+0xe54>
   {
 8037f14:	0001883a 	nop
   tcp_trace("tcp_output: sending, state %d, tcpcb: %x",
    tp->t_state, tp );
#endif

#ifdef MUTE_WARNS
   error = 0;
 8037f18:	e03fed15 	stw	zero,-76(fp)
   if(so->so_domain != AF_INET6)
#endif   /* IP_V6 */
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
 8037f1c:	e0bffc17 	ldw	r2,-16(fp)
 8037f20:	10800317 	ldw	r2,12(r2)
 8037f24:	e0bfec15 	stw	r2,-80(fp)
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
 8037f28:	e0bffb17 	ldw	r2,-20(fp)
 8037f2c:	1007883a 	mov	r3,r2
 8037f30:	e0bfff17 	ldw	r2,-4(fp)
 8037f34:	1885883a 	add	r2,r3,r2
 8037f38:	10800a04 	addi	r2,r2,40
 8037f3c:	1007883a 	mov	r3,r2
 8037f40:	e0bfec17 	ldw	r2,-80(fp)
 8037f44:	10c0008d 	sth	r3,2(r2)
      error = ip_output(m, so->so_optsPack);
 8037f48:	e0bff717 	ldw	r2,-36(fp)
 8037f4c:	10801f17 	ldw	r2,124(r2)
 8037f50:	100b883a 	mov	r5,r2
 8037f54:	e13ffc17 	ldw	r4,-16(fp)
 8037f58:	802dd940 	call	802dd94 <ip_output>
 8037f5c:	e0bfed15 	stw	r2,-76(fp)
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
 8037f60:	e0bfed17 	ldw	r2,-76(fp)
 8037f64:	10001326 	beq	r2,zero,8037fb4 <tcp_output+0xef0>
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
 8037f68:	e0bfed17 	ldw	r2,-76(fp)
 8037f6c:	10801a58 	cmpnei	r2,r2,105
 8037f70:	10000e1e 	bne	r2,zero,8037fac <tcp_output+0xee8>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
 8037f74:	e0bffc17 	ldw	r2,-16(fp)
 8037f78:	10800817 	ldw	r2,32(r2)
 8037f7c:	1000031e 	bne	r2,zero,8037f8c <tcp_output+0xec8>
            m = m->m_next;
 8037f80:	e0bffc17 	ldw	r2,-16(fp)
 8037f84:	10800617 	ldw	r2,24(r2)
 8037f88:	e0bffc15 	stw	r2,-16(fp)
         m_freem(m); /* free the mbuf chain */
 8037f8c:	e13ffc17 	ldw	r4,-16(fp)
 8037f90:	802d4340 	call	802d434 <m_freem>
         tcp_quench(tp->t_inpcb);
 8037f94:	e0bfea17 	ldw	r2,-88(fp)
 8037f98:	10800d17 	ldw	r2,52(r2)
 8037f9c:	1009883a 	mov	r4,r2
 8037fa0:	80389f80 	call	80389f8 <tcp_quench>
         return (error);
 8037fa4:	e0bfed17 	ldw	r2,-76(fp)
 8037fa8:	00002706 	br	8038048 <tcp_output+0xf84>
      }
      return (error);
 8037fac:	e0bfed17 	ldw	r2,-76(fp)
 8037fb0:	00002506 	br	8038048 <tcp_output+0xf84>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 8037fb4:	008201b4 	movhi	r2,2054
 8037fb8:	10bc2617 	ldw	r2,-3944(r2)
 8037fbc:	10c00044 	addi	r3,r2,1
 8037fc0:	008201b4 	movhi	r2,2054
 8037fc4:	10fc2615 	stw	r3,-3944(r2)
   tcpstat.tcps_sndtotal++;
 8037fc8:	008201b4 	movhi	r2,2054
 8037fcc:	10bc5917 	ldw	r2,-3740(r2)
 8037fd0:	10c00044 	addi	r3,r2,1
 8037fd4:	008201b4 	movhi	r2,2054
 8037fd8:	10fc5915 	stw	r3,-3740(r2)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
 8037fdc:	e0bffe17 	ldw	r2,-8(fp)
 8037fe0:	00800e0e 	bge	zero,r2,803801c <tcp_output+0xf58>
 8037fe4:	e0bfea17 	ldw	r2,-88(fp)
 8037fe8:	10c01617 	ldw	r3,88(r2)
 8037fec:	e0bffe17 	ldw	r2,-8(fp)
 8037ff0:	1887883a 	add	r3,r3,r2
 8037ff4:	e0bfea17 	ldw	r2,-88(fp)
 8037ff8:	10801917 	ldw	r2,100(r2)
 8037ffc:	1885c83a 	sub	r2,r3,r2
 8038000:	0080060e 	bge	zero,r2,803801c <tcp_output+0xf58>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
 8038004:	e0bfea17 	ldw	r2,-88(fp)
 8038008:	10c01617 	ldw	r3,88(r2)
 803800c:	e0bffe17 	ldw	r2,-8(fp)
 8038010:	1887883a 	add	r3,r3,r2
 8038014:	e0bfea17 	ldw	r2,-88(fp)
 8038018:	10c01915 	stw	r3,100(r2)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 803801c:	e0bfea17 	ldw	r2,-88(fp)
 8038020:	10c00b0b 	ldhu	r3,44(r2)
 8038024:	00bfef04 	movi	r2,-68
 8038028:	1884703a 	and	r2,r3,r2
 803802c:	1007883a 	mov	r3,r2
 8038030:	e0bfea17 	ldw	r2,-88(fp)
 8038034:	10c00b0d 	sth	r3,44(r2)
   if (sendalot)
 8038038:	e0bffa17 	ldw	r2,-24(fp)
 803803c:	10000126 	beq	r2,zero,8038044 <tcp_output+0xf80>
      goto again;
 8038040:	003c3106 	br	8037108 <tcp_output+0x44>
   return (0);
 8038044:	0005883a 	mov	r2,zero
}
 8038048:	e037883a 	mov	sp,fp
 803804c:	dfc00117 	ldw	ra,4(sp)
 8038050:	df000017 	ldw	fp,0(sp)
 8038054:	dec00204 	addi	sp,sp,8
 8038058:	f800283a 	ret

0803805c <tcp_setpersist>:
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
 803805c:	defffc04 	addi	sp,sp,-16
 8038060:	dfc00315 	stw	ra,12(sp)
 8038064:	df000215 	stw	fp,8(sp)
 8038068:	df000204 	addi	fp,sp,8
 803806c:	e13ffe15 	stw	r4,-8(fp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 8038070:	e0bffe17 	ldw	r2,-8(fp)
 8038074:	10802017 	ldw	r2,128(r2)
 8038078:	1007d0ba 	srai	r3,r2,2
 803807c:	e0bffe17 	ldw	r2,-8(fp)
 8038080:	10802117 	ldw	r2,132(r2)
 8038084:	1885883a 	add	r2,r3,r2
 8038088:	1005d07a 	srai	r2,r2,1
 803808c:	e0bfff15 	stw	r2,-4(fp)

   if (tp->t_timer[TCPT_REXMT])
 8038090:	e0bffe17 	ldw	r2,-8(fp)
 8038094:	10800317 	ldw	r2,12(r2)
 8038098:	10000326 	beq	r2,zero,80380a8 <tcp_setpersist+0x4c>
      panic("tcp_output REXMT");
 803809c:	01020174 	movhi	r4,2053
 80380a0:	210c3d04 	addi	r4,r4,12532
 80380a4:	8027fe00 	call	8027fe0 <panic>
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
 80380a8:	e0bfff17 	ldw	r2,-4(fp)
 80380ac:	1009883a 	mov	r4,r2
 80380b0:	e0bffe17 	ldw	r2,-8(fp)
 80380b4:	10c00717 	ldw	r3,28(r2)
 80380b8:	00820174 	movhi	r2,2053
 80380bc:	1885883a 	add	r2,r3,r2
 80380c0:	10980d03 	ldbu	r2,24628(r2)
 80380c4:	10803fcc 	andi	r2,r2,255
 80380c8:	2085383a 	mul	r2,r4,r2
 80380cc:	10ffffcc 	andi	r3,r2,65535
 80380d0:	18e0001c 	xori	r3,r3,32768
 80380d4:	18e00004 	addi	r3,r3,-32768
 80380d8:	e0bffe17 	ldw	r2,-8(fp)
 80380dc:	10c00415 	stw	r3,16(r2)
 80380e0:	e0bffe17 	ldw	r2,-8(fp)
 80380e4:	10800417 	ldw	r2,16(r2)
 80380e8:	10800288 	cmpgei	r2,r2,10
 80380ec:	1000041e 	bne	r2,zero,8038100 <tcp_setpersist+0xa4>
 80380f0:	e0bffe17 	ldw	r2,-8(fp)
 80380f4:	00c00284 	movi	r3,10
 80380f8:	10c00415 	stw	r3,16(r2)
 80380fc:	00000706 	br	803811c <tcp_setpersist+0xc0>
 8038100:	e0bffe17 	ldw	r2,-8(fp)
 8038104:	10800417 	ldw	r2,16(r2)
 8038108:	10801e50 	cmplti	r2,r2,121
 803810c:	1000031e 	bne	r2,zero,803811c <tcp_setpersist+0xc0>
 8038110:	e0bffe17 	ldw	r2,-8(fp)
 8038114:	00c01e04 	movi	r3,120
 8038118:	10c00415 	stw	r3,16(r2)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
 803811c:	e0bffe17 	ldw	r2,-8(fp)
 8038120:	10800717 	ldw	r2,28(r2)
 8038124:	10800308 	cmpgei	r2,r2,12
 8038128:	1000051e 	bne	r2,zero,8038140 <tcp_setpersist+0xe4>
      tp->t_rxtshift++;
 803812c:	e0bffe17 	ldw	r2,-8(fp)
 8038130:	10800717 	ldw	r2,28(r2)
 8038134:	10c00044 	addi	r3,r2,1
 8038138:	e0bffe17 	ldw	r2,-8(fp)
 803813c:	10c00715 	stw	r3,28(r2)

}
 8038140:	0001883a 	nop
 8038144:	e037883a 	mov	sp,fp
 8038148:	dfc00117 	ldw	ra,4(sp)
 803814c:	df000017 	ldw	fp,0(sp)
 8038150:	dec00204 	addi	sp,sp,8
 8038154:	f800283a 	ret

08038158 <bld_options>:
 * RETURNS: length of option data added to buffer
 */

static int
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
 8038158:	defff804 	addi	sp,sp,-32
 803815c:	dfc00715 	stw	ra,28(sp)
 8038160:	df000615 	stw	fp,24(sp)
 8038164:	df000604 	addi	fp,sp,24
 8038168:	e13ffd15 	stw	r4,-12(fp)
 803816c:	e17ffc15 	stw	r5,-16(fp)
 8038170:	e1bffb15 	stw	r6,-20(fp)
 8038174:	e1fffa15 	stw	r7,-24(fp)
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
 8038178:	e0bffd17 	ldw	r2,-12(fp)
 803817c:	10800b0b 	ldhu	r2,44(r2)
 8038180:	10bfffcc 	andi	r2,r2,65535
 8038184:	1080020c 	andi	r2,r2,8
 8038188:	10000226 	beq	r2,zero,8038194 <bld_options+0x3c>
      return 0;
 803818c:	0005883a 	mov	r2,zero
 8038190:	00001f06 	br	8038210 <bld_options+0xb8>

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
 8038194:	e0bffb17 	ldw	r2,-20(fp)
 8038198:	1080008c 	andi	r2,r2,2
 803819c:	10001a26 	beq	r2,zero,8038208 <bld_options+0xb0>
   {
      mss   =  (u_short)tcp_mss(so);
 80381a0:	e13ffa17 	ldw	r4,-24(fp)
 80381a4:	8036fcc0 	call	8036fcc <tcp_mss>
 80381a8:	e0bffe8d 	sth	r2,-6(fp)

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
 80381ac:	e0bffc17 	ldw	r2,-16(fp)
 80381b0:	00c00084 	movi	r3,2
 80381b4:	10c00005 	stb	r3,0(r2)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
 80381b8:	e0bffc17 	ldw	r2,-16(fp)
 80381bc:	10800044 	addi	r2,r2,1
 80381c0:	00c00104 	movi	r3,4
 80381c4:	10c00005 	stb	r3,0(r2)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
 80381c8:	e0bffe8b 	ldhu	r2,-6(fp)
 80381cc:	1004d23a 	srli	r2,r2,8
 80381d0:	1007883a 	mov	r3,r2
 80381d4:	e0bffc17 	ldw	r2,-16(fp)
 80381d8:	10800084 	addi	r2,r2,2
 80381dc:	10c00005 	stb	r3,0(r2)
      *(cp + 3)  = (u_char) (mss & 0xff);
 80381e0:	e0bffc17 	ldw	r2,-16(fp)
 80381e4:	108000c4 	addi	r2,r2,3
 80381e8:	e0fffe8b 	ldhu	r3,-6(fp)
 80381ec:	10c00005 	stb	r3,0(r2)
      len = 4;
 80381f0:	00800104 	movi	r2,4
 80381f4:	e0bfff15 	stw	r2,-4(fp)
      cp += 4;
 80381f8:	e0bffc17 	ldw	r2,-16(fp)
 80381fc:	10800104 	addi	r2,r2,4
 8038200:	e0bffc15 	stw	r2,-16(fp)
 8038204:	00000106 	br	803820c <bld_options+0xb4>
   }
   else
      len = 0;
 8038208:	e03fff15 	stw	zero,-4(fp)
      len += 10;
   }
#endif   /* TCP_TIMESTAMP */

   USE_ARG(so);
   return len;
 803820c:	e0bfff17 	ldw	r2,-4(fp)
}
 8038210:	e037883a 	mov	sp,fp
 8038214:	dfc00117 	ldw	ra,4(sp)
 8038218:	df000017 	ldw	fp,0(sp)
 803821c:	dec00204 	addi	sp,sp,8
 8038220:	f800283a 	ret

08038224 <tcp_init>:
 * RETURNS: 
 */

void
tcp_init()
{
 8038224:	deffff04 	addi	sp,sp,-4
 8038228:	df000015 	stw	fp,0(sp)
 803822c:	d839883a 	mov	fp,sp
   tcp_iss = 1;      /* wrong */
 8038230:	00800044 	movi	r2,1
 8038234:	d0a0b015 	stw	r2,-32064(gp)
   tcb.inp_next = tcb.inp_prev = &tcb;
 8038238:	008201b4 	movhi	r2,2054
 803823c:	10bc3f04 	addi	r2,r2,-3844
 8038240:	00c201b4 	movhi	r3,2054
 8038244:	18bc4015 	stw	r2,-3840(r3)
 8038248:	008201b4 	movhi	r2,2054
 803824c:	10fc4017 	ldw	r3,-3840(r2)
 8038250:	008201b4 	movhi	r2,2054
 8038254:	10fc3f15 	stw	r3,-3844(r2)
}
 8038258:	0001883a 	nop
 803825c:	e037883a 	mov	sp,fp
 8038260:	df000017 	ldw	fp,0(sp)
 8038264:	dec00104 	addi	sp,sp,4
 8038268:	f800283a 	ret

0803826c <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
 803826c:	defffb04 	addi	sp,sp,-20
 8038270:	dfc00415 	stw	ra,16(sp)
 8038274:	df000315 	stw	fp,12(sp)
 8038278:	df000304 	addi	fp,sp,12
 803827c:	e13ffd15 	stw	r4,-12(fp)
   struct inpcb * inp   =  tp->t_inpcb;
 8038280:	e0bffd17 	ldw	r2,-12(fp)
 8038284:	10800d17 	ldw	r2,52(r2)
 8038288:	e0bffe15 	stw	r2,-8(fp)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
 803828c:	e0bffd17 	ldw	r2,-12(fp)
 8038290:	10800c17 	ldw	r2,48(r2)
 8038294:	e0bfff15 	stw	r2,-4(fp)
 8038298:	e0bfff17 	ldw	r2,-4(fp)
 803829c:	1000071e 	bne	r2,zero,80382bc <tcp_template+0x50>
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 80382a0:	01000a04 	movi	r4,40
 80382a4:	802cf5c0 	call	802cf5c <npalloc>
 80382a8:	e0bfff15 	stw	r2,-4(fp)
      if (n == NULL)
 80382ac:	e0bfff17 	ldw	r2,-4(fp)
 80382b0:	1000021e 	bne	r2,zero,80382bc <tcp_template+0x50>
         return (0);
 80382b4:	0005883a 	mov	r2,zero
 80382b8:	00002906 	br	8038360 <tcp_template+0xf4>
   }
   n->ti_next = n->ti_prev = 0;
 80382bc:	e0bfff17 	ldw	r2,-4(fp)
 80382c0:	10000115 	stw	zero,4(r2)
 80382c4:	e0bfff17 	ldw	r2,-4(fp)
 80382c8:	10c00117 	ldw	r3,4(r2)
 80382cc:	e0bfff17 	ldw	r2,-4(fp)
 80382d0:	10c00015 	stw	r3,0(r2)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
 80382d4:	e0bfff17 	ldw	r2,-4(fp)
 80382d8:	00c50004 	movi	r3,5120
 80382dc:	10c0028d 	sth	r3,10(r2)
   n->ti_src = inp->inp_laddr;
 80382e0:	e0bfff17 	ldw	r2,-4(fp)
 80382e4:	e0fffe17 	ldw	r3,-8(fp)
 80382e8:	18c00417 	ldw	r3,16(r3)
 80382ec:	10c00315 	stw	r3,12(r2)
   n->ti_dst = inp->inp_faddr;
 80382f0:	e0bfff17 	ldw	r2,-4(fp)
 80382f4:	e0fffe17 	ldw	r3,-8(fp)
 80382f8:	18c00317 	ldw	r3,12(r3)
 80382fc:	10c00415 	stw	r3,16(r2)
   n->ti_sport = inp->inp_lport;
 8038300:	e0bffe17 	ldw	r2,-8(fp)
 8038304:	10c0078b 	ldhu	r3,30(r2)
 8038308:	e0bfff17 	ldw	r2,-4(fp)
 803830c:	10c0050d 	sth	r3,20(r2)
   n->ti_dport = inp->inp_fport;
 8038310:	e0bffe17 	ldw	r2,-8(fp)
 8038314:	10c0070b 	ldhu	r3,28(r2)
 8038318:	e0bfff17 	ldw	r2,-4(fp)
 803831c:	10c0058d 	sth	r3,22(r2)
   n->ti_seq = 0;
 8038320:	e0bfff17 	ldw	r2,-4(fp)
 8038324:	10000615 	stw	zero,24(r2)
   n->ti_ack = 0;
 8038328:	e0bfff17 	ldw	r2,-4(fp)
 803832c:	10000715 	stw	zero,28(r2)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
 8038330:	e0bfff17 	ldw	r2,-4(fp)
 8038334:	00c01404 	movi	r3,80
 8038338:	10c00805 	stb	r3,32(r2)
   n->ti_flags = 0;
 803833c:	e0bfff17 	ldw	r2,-4(fp)
 8038340:	10000845 	stb	zero,33(r2)
   n->ti_win = 0;
 8038344:	e0bfff17 	ldw	r2,-4(fp)
 8038348:	1000088d 	sth	zero,34(r2)
   n->ti_sum = 0;
 803834c:	e0bfff17 	ldw	r2,-4(fp)
 8038350:	1000090d 	sth	zero,36(r2)
   n->ti_urp = 0;
 8038354:	e0bfff17 	ldw	r2,-4(fp)
 8038358:	1000098d 	sth	zero,38(r2)
   return (n);
 803835c:	e0bfff17 	ldw	r2,-4(fp)
}
 8038360:	e037883a 	mov	sp,fp
 8038364:	dfc00117 	ldw	ra,4(sp)
 8038368:	df000017 	ldw	fp,0(sp)
 803836c:	dec00204 	addi	sp,sp,8
 8038370:	f800283a 	ret

08038374 <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
 8038374:	defff204 	addi	sp,sp,-56
 8038378:	dfc00d15 	stw	ra,52(sp)
 803837c:	df000c15 	stw	fp,48(sp)
 8038380:	df000c04 	addi	fp,sp,48
 8038384:	e13ff715 	stw	r4,-36(fp)
 8038388:	e17ff615 	stw	r5,-40(fp)
 803838c:	e1bff515 	stw	r6,-44(fp)
 8038390:	e1fff415 	stw	r7,-48(fp)
   int      tlen;       /* tcp data len - 0 or 1 */
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
 8038394:	e03ffd15 	stw	zero,-12(fp)
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
 8038398:	e0bff717 	ldw	r2,-36(fp)
 803839c:	10001726 	beq	r2,zero,80383fc <tcp_respond+0x88>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
 80383a0:	e0bff717 	ldw	r2,-36(fp)
 80383a4:	10800d17 	ldw	r2,52(r2)
 80383a8:	10800817 	ldw	r2,32(r2)
 80383ac:	10800b17 	ldw	r2,44(r2)
 80383b0:	1007883a 	mov	r3,r2
 80383b4:	e0bff717 	ldw	r2,-36(fp)
 80383b8:	10800d17 	ldw	r2,52(r2)
 80383bc:	10800817 	ldw	r2,32(r2)
 80383c0:	10800a17 	ldw	r2,40(r2)
 80383c4:	1885c83a 	sub	r2,r3,r2
 80383c8:	10000a16 	blt	r2,zero,80383f4 <tcp_respond+0x80>
 80383cc:	e0bff717 	ldw	r2,-36(fp)
 80383d0:	10800d17 	ldw	r2,52(r2)
 80383d4:	10800817 	ldw	r2,32(r2)
 80383d8:	10c00b17 	ldw	r3,44(r2)
 80383dc:	e0bff717 	ldw	r2,-36(fp)
 80383e0:	10800d17 	ldw	r2,52(r2)
 80383e4:	10800817 	ldw	r2,32(r2)
 80383e8:	10800a17 	ldw	r2,40(r2)
 80383ec:	1885c83a 	sub	r2,r3,r2
 80383f0:	00000106 	br	80383f8 <tcp_respond+0x84>
 80383f4:	0005883a 	mov	r2,zero
 80383f8:	e0bffd15 	stw	r2,-12(fp)

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
 80383fc:	e0800217 	ldw	r2,8(fp)
 8038400:	1000261e 	bne	r2,zero,803849c <tcp_respond+0x128>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
 8038404:	01401004 	movi	r5,64
 8038408:	010000c4 	movi	r4,3
 803840c:	802d1a80 	call	802d1a8 <m_getnbuf>
 8038410:	e0bffc15 	stw	r2,-16(fp)
      if (m == NULL)
 8038414:	e0bffc17 	ldw	r2,-16(fp)
 8038418:	1000cd26 	beq	r2,zero,8038750 <tcp_respond+0x3dc>
         return;
      tlen = 1;   /* Keepalives have one byte of data */
 803841c:	00800044 	movi	r2,1
 8038420:	e0bfff15 	stw	r2,-4(fp)
      m->m_len = TCPIPHDRSZ + tlen;
 8038424:	e0bfff17 	ldw	r2,-4(fp)
 8038428:	10800a04 	addi	r2,r2,40
 803842c:	1007883a 	mov	r3,r2
 8038430:	e0bffc17 	ldw	r2,-16(fp)
 8038434:	10c00215 	stw	r3,8(r2)
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
 8038438:	e0bffc17 	ldw	r2,-16(fp)
 803843c:	10800317 	ldw	r2,12(r2)
 8038440:	e0bff915 	stw	r2,-28(fp)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 8038444:	e0bffc17 	ldw	r2,-16(fp)
 8038448:	10800117 	ldw	r2,4(r2)
 803844c:	10800117 	ldw	r2,4(r2)
 8038450:	e0fff917 	ldw	r3,-28(fp)
 8038454:	1880032e 	bgeu	r3,r2,8038464 <tcp_respond+0xf0>
      {
         panic("tcp_respond- packet ptr underflow\n");
 8038458:	01020174 	movhi	r4,2053
 803845c:	210c4204 	addi	r4,r4,12552
 8038460:	8027fe00 	call	8027fe0 <panic>
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 8038464:	01800a04 	movi	r6,40
 8038468:	e17ff617 	ldw	r5,-40(fp)
 803846c:	e13ff917 	ldw	r4,-28(fp)
 8038470:	8002ea40 	call	8002ea4 <memcpy>
      ti = tmp_thdr;
 8038474:	e0bff917 	ldw	r2,-28(fp)
 8038478:	e0bff615 	stw	r2,-40(fp)
      flags = TH_ACK;
 803847c:	00800404 	movi	r2,16
 8038480:	e0800215 	stw	r2,8(fp)
      domain = tp->t_inpcb->inp_socket->so_domain;
 8038484:	e0bff717 	ldw	r2,-36(fp)
 8038488:	10800d17 	ldw	r2,52(r2)
 803848c:	10800817 	ldw	r2,32(r2)
 8038490:	10800517 	ldw	r2,20(r2)
 8038494:	e0bffe15 	stw	r2,-8(fp)
 8038498:	00003906 	br	8038580 <tcp_respond+0x20c>
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
 803849c:	e0800317 	ldw	r2,12(fp)
 80384a0:	e0bffc15 	stw	r2,-16(fp)
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 80384a4:	e0bffc17 	ldw	r2,-16(fp)
 80384a8:	10800117 	ldw	r2,4(r2)
 80384ac:	1080080b 	ldhu	r2,32(r2)
 80384b0:	10bfffcc 	andi	r2,r2,65535
 80384b4:	10800218 	cmpnei	r2,r2,8
 80384b8:	1000031e 	bne	r2,zero,80384c8 <tcp_respond+0x154>
         domain = AF_INET;
 80384bc:	00800084 	movi	r2,2
 80384c0:	e0bffe15 	stw	r2,-8(fp)
 80384c4:	00000206 	br	80384d0 <tcp_respond+0x15c>
      else
         domain = AF_INET6;
 80384c8:	008000c4 	movi	r2,3
 80384cc:	e0bffe15 	stw	r2,-8(fp)

      m_freem(m->m_next);
 80384d0:	e0bffc17 	ldw	r2,-16(fp)
 80384d4:	10800617 	ldw	r2,24(r2)
 80384d8:	1009883a 	mov	r4,r2
 80384dc:	802d4340 	call	802d434 <m_freem>
      m->m_next = 0;
 80384e0:	e0bffc17 	ldw	r2,-16(fp)
 80384e4:	10000615 	stw	zero,24(r2)
      tlen = 0;         /* NO data */
 80384e8:	e03fff15 	stw	zero,-4(fp)
      m->m_len = TCPIPHDRSZ;
 80384ec:	e0bffc17 	ldw	r2,-16(fp)
 80384f0:	00c00a04 	movi	r3,40
 80384f4:	10c00215 	stw	r3,8(r2)
      xchg(ti->ti_dport, ti->ti_sport, u_short);
 80384f8:	e0bff617 	ldw	r2,-40(fp)
 80384fc:	1080058b 	ldhu	r2,22(r2)
 8038500:	e0bffb8d 	sth	r2,-18(fp)
 8038504:	e0bff617 	ldw	r2,-40(fp)
 8038508:	10c0050b 	ldhu	r3,20(r2)
 803850c:	e0bff617 	ldw	r2,-40(fp)
 8038510:	10c0058d 	sth	r3,22(r2)
 8038514:	e0bff617 	ldw	r2,-40(fp)
 8038518:	e0fffb8b 	ldhu	r3,-18(fp)
 803851c:	10c0050d 	sth	r3,20(r2)
      if(m->pkt->type == IPTP)
 8038520:	e0bffc17 	ldw	r2,-16(fp)
 8038524:	10800117 	ldw	r2,4(r2)
 8038528:	1080080b 	ldhu	r2,32(r2)
 803852c:	10bfffcc 	andi	r2,r2,65535
 8038530:	10800218 	cmpnei	r2,r2,8
 8038534:	10000a1e 	bne	r2,zero,8038560 <tcp_respond+0x1ec>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
 8038538:	e0bff617 	ldw	r2,-40(fp)
 803853c:	10800417 	ldw	r2,16(r2)
 8038540:	e0bffa15 	stw	r2,-24(fp)
 8038544:	e0bff617 	ldw	r2,-40(fp)
 8038548:	10c00317 	ldw	r3,12(r2)
 803854c:	e0bff617 	ldw	r2,-40(fp)
 8038550:	10c00415 	stw	r3,16(r2)
 8038554:	e0bff617 	ldw	r2,-40(fp)
 8038558:	e0fffa17 	ldw	r3,-24(fp)
 803855c:	10c00315 	stw	r3,12(r2)
      if (flags & TH_RST)  /* count resets in MIB */
 8038560:	e0800217 	ldw	r2,8(fp)
 8038564:	1080010c 	andi	r2,r2,4
 8038568:	10000526 	beq	r2,zero,8038580 <tcp_respond+0x20c>
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
 803856c:	008201b4 	movhi	r2,2054
 8038570:	10bc2a17 	ldw	r2,-3928(r2)
 8038574:	10c00044 	addi	r3,r2,1
 8038578:	008201b4 	movhi	r2,2054
 803857c:	10fc2a15 	stw	r3,-3928(r2)
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 8038580:	e0bff417 	ldw	r2,-48(fp)
 8038584:	1006d63a 	srli	r3,r2,24
 8038588:	e0bff417 	ldw	r2,-48(fp)
 803858c:	1004d23a 	srli	r2,r2,8
 8038590:	10bfc00c 	andi	r2,r2,65280
 8038594:	1886b03a 	or	r3,r3,r2
 8038598:	e0bff417 	ldw	r2,-48(fp)
 803859c:	1004923a 	slli	r2,r2,8
 80385a0:	10803fec 	andhi	r2,r2,255
 80385a4:	1886b03a 	or	r3,r3,r2
 80385a8:	e0bff417 	ldw	r2,-48(fp)
 80385ac:	1004963a 	slli	r2,r2,24
 80385b0:	1886b03a 	or	r3,r3,r2
 80385b4:	e0bff617 	ldw	r2,-40(fp)
 80385b8:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(ack);
 80385bc:	e0bff517 	ldw	r2,-44(fp)
 80385c0:	1006d63a 	srli	r3,r2,24
 80385c4:	e0bff517 	ldw	r2,-44(fp)
 80385c8:	1004d23a 	srli	r2,r2,8
 80385cc:	10bfc00c 	andi	r2,r2,65280
 80385d0:	1886b03a 	or	r3,r3,r2
 80385d4:	e0bff517 	ldw	r2,-44(fp)
 80385d8:	1004923a 	slli	r2,r2,8
 80385dc:	10803fec 	andhi	r2,r2,255
 80385e0:	1886b03a 	or	r3,r3,r2
 80385e4:	e0bff517 	ldw	r2,-44(fp)
 80385e8:	1004963a 	slli	r2,r2,24
 80385ec:	1886b03a 	or	r3,r3,r2
 80385f0:	e0bff617 	ldw	r2,-40(fp)
 80385f4:	10c00715 	stw	r3,28(r2)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
 80385f8:	e0bff617 	ldw	r2,-40(fp)
 80385fc:	00c01404 	movi	r3,80
 8038600:	10c00805 	stb	r3,32(r2)
   ti->ti_flags = (u_char)flags;
 8038604:	e0800217 	ldw	r2,8(fp)
 8038608:	1007883a 	mov	r3,r2
 803860c:	e0bff617 	ldw	r2,-40(fp)
 8038610:	10c00845 	stb	r3,33(r2)
   ti->ti_win = htons((u_short)win);
 8038614:	e0bffd17 	ldw	r2,-12(fp)
 8038618:	10bfffcc 	andi	r2,r2,65535
 803861c:	1004d23a 	srli	r2,r2,8
 8038620:	1007883a 	mov	r3,r2
 8038624:	e0bffd17 	ldw	r2,-12(fp)
 8038628:	10bfffcc 	andi	r2,r2,65535
 803862c:	1004923a 	slli	r2,r2,8
 8038630:	1884b03a 	or	r2,r3,r2
 8038634:	1007883a 	mov	r3,r2
 8038638:	e0bff617 	ldw	r2,-40(fp)
 803863c:	10c0088d 	sth	r3,34(r2)
   ti->ti_urp = 0;
 8038640:	e0bff617 	ldw	r2,-40(fp)
 8038644:	1000098d 	sth	zero,38(r2)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
 8038648:	e0bffe17 	ldw	r2,-8(fp)
 803864c:	10800098 	cmpnei	r2,r2,2
 8038650:	10003c1e 	bne	r2,zero,8038744 <tcp_respond+0x3d0>
#ifdef IP_V4
      case AF_INET:
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));
 8038654:	e0bff617 	ldw	r2,-40(fp)
 8038658:	e0bff815 	stw	r2,-32(fp)

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
 803865c:	e0bfff17 	ldw	r2,-4(fp)
 8038660:	10800a04 	addi	r2,r2,40
 8038664:	1007883a 	mov	r3,r2
 8038668:	e0bff817 	ldw	r2,-32(fp)
 803866c:	10c0008d 	sth	r3,2(r2)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
 8038670:	e0bffc17 	ldw	r2,-16(fp)
 8038674:	10800117 	ldw	r2,4(r2)
 8038678:	10800117 	ldw	r2,4(r2)
 803867c:	d0e07c17 	ldw	r3,-32272(gp)
 8038680:	10c5883a 	add	r2,r2,r3
 8038684:	e0fff817 	ldw	r3,-32(fp)
 8038688:	18800436 	bltu	r3,r2,803869c <tcp_respond+0x328>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
 803868c:	e0bffc17 	ldw	r2,-16(fp)
 8038690:	e0fff817 	ldw	r3,-32(fp)
 8038694:	10c00315 	stw	r3,12(r2)
 8038698:	00001206 	br	80386e4 <tcp_respond+0x370>
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
 803869c:	e0bffc17 	ldw	r2,-16(fp)
 80386a0:	10800117 	ldw	r2,4(r2)
 80386a4:	10c00117 	ldw	r3,4(r2)
 80386a8:	d0a07c17 	ldw	r2,-32272(gp)
 80386ac:	1009883a 	mov	r4,r2
 80386b0:	e0bffc17 	ldw	r2,-16(fp)
 80386b4:	10800117 	ldw	r2,4(r2)
 80386b8:	1907883a 	add	r3,r3,r4
 80386bc:	10c00315 	stw	r3,12(r2)
 80386c0:	10c00317 	ldw	r3,12(r2)
 80386c4:	e0bffc17 	ldw	r2,-16(fp)
 80386c8:	10c00315 	stw	r3,12(r2)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
 80386cc:	e0bffc17 	ldw	r2,-16(fp)
 80386d0:	10800317 	ldw	r2,12(r2)
 80386d4:	01800a04 	movi	r6,40
 80386d8:	e17ff817 	ldw	r5,-32(fp)
 80386dc:	1009883a 	mov	r4,r2
 80386e0:	80096e80 	call	80096e8 <memmove>

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
 80386e4:	e0bff717 	ldw	r2,-36(fp)
 80386e8:	1000031e 	bne	r2,zero,80386f8 <tcp_respond+0x384>
              m_freem(m);
 80386ec:	e13ffc17 	ldw	r4,-16(fp)
 80386f0:	802d4340 	call	802d434 <m_freem>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
		 }

         break;
 80386f4:	00001506 	br	803874c <tcp_respond+0x3d8>
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
 80386f8:	e0bff717 	ldw	r2,-36(fp)
 80386fc:	10800d17 	ldw	r2,52(r2)
 8038700:	10000c26 	beq	r2,zero,8038734 <tcp_respond+0x3c0>
 8038704:	e0bff717 	ldw	r2,-36(fp)
 8038708:	10800d17 	ldw	r2,52(r2)
 803870c:	10800817 	ldw	r2,32(r2)
 8038710:	10000826 	beq	r2,zero,8038734 <tcp_respond+0x3c0>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
 8038714:	e0bff717 	ldw	r2,-36(fp)
 8038718:	10800d17 	ldw	r2,52(r2)
 803871c:	10800817 	ldw	r2,32(r2)
 8038720:	10801f17 	ldw	r2,124(r2)
 8038724:	100b883a 	mov	r5,r2
 8038728:	e13ffc17 	ldw	r4,-16(fp)
 803872c:	802dd940 	call	802dd94 <ip_output>
         break;
 8038730:	00000606 	br	803874c <tcp_respond+0x3d8>
				ip_output(m, (struct   ip_socopts *)NULL);
 8038734:	000b883a 	mov	r5,zero
 8038738:	e13ffc17 	ldw	r4,-16(fp)
 803873c:	802dd940 	call	802dd94 <ip_output>
         break;
 8038740:	00000206 	br	803874c <tcp_respond+0x3d8>

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
 8038744:	802c3fc0 	call	802c3fc <dtrap>
         break;
 8038748:	0001883a 	nop
   }
   return;
 803874c:	00000106 	br	8038754 <tcp_respond+0x3e0>
         return;
 8038750:	0001883a 	nop
}
 8038754:	e037883a 	mov	sp,fp
 8038758:	dfc00117 	ldw	ra,4(sp)
 803875c:	df000017 	ldw	fp,0(sp)
 8038760:	dec00204 	addi	sp,sp,8
 8038764:	f800283a 	ret

08038768 <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
 8038768:	defffb04 	addi	sp,sp,-20
 803876c:	dfc00415 	stw	ra,16(sp)
 8038770:	df000315 	stw	fp,12(sp)
 8038774:	df000304 	addi	fp,sp,12
 8038778:	e13ffd15 	stw	r4,-12(fp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
 803877c:	01002504 	movi	r4,148
 8038780:	802cf5c0 	call	802cf5c <npalloc>
 8038784:	e0bfff15 	stw	r2,-4(fp)
   if (tp == NULL)
 8038788:	e0bfff17 	ldw	r2,-4(fp)
 803878c:	1000021e 	bne	r2,zero,8038798 <tcp_newtcpcb+0x30>
      return (struct tcpcb *)NULL;
 8038790:	0005883a 	mov	r2,zero
 8038794:	00003206 	br	8038860 <tcp_newtcpcb+0xf8>
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
 8038798:	e0bfff17 	ldw	r2,-4(fp)
 803879c:	e0ffff17 	ldw	r3,-4(fp)
 80387a0:	10c00115 	stw	r3,4(r2)
 80387a4:	e0bfff17 	ldw	r2,-4(fp)
 80387a8:	10c00117 	ldw	r3,4(r2)
 80387ac:	e0bfff17 	ldw	r2,-4(fp)
 80387b0:	10c00015 	stw	r3,0(r2)
   tp->t_maxseg = TCP_MSS;
 80387b4:	e0bfff17 	ldw	r2,-4(fp)
 80387b8:	00c16d04 	movi	r3,1460
 80387bc:	10c00a0d 	sth	r3,40(r2)
   tp->t_flags = 0;        /* sends options! */
 80387c0:	e0bfff17 	ldw	r2,-4(fp)
 80387c4:	10000b0d 	sth	zero,44(r2)
   tp->t_inpcb = inp;
 80387c8:	e0bfff17 	ldw	r2,-4(fp)
 80387cc:	e0fffd17 	ldw	r3,-12(fp)
 80387d0:	10c00d15 	stw	r3,52(r2)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
 80387d4:	e0bfff17 	ldw	r2,-4(fp)
 80387d8:	10002015 	stw	zero,128(r2)
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
 80387dc:	e0bfff17 	ldw	r2,-4(fp)
 80387e0:	00c00604 	movi	r3,24
 80387e4:	10c02115 	stw	r3,132(r2)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
 80387e8:	00800304 	movi	r2,12
 80387ec:	e0bffe8d 	sth	r2,-6(fp)
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
 80387f0:	e0fffe8f 	ldh	r3,-6(fp)
 80387f4:	e0bfff17 	ldw	r2,-4(fp)
 80387f8:	10c00815 	stw	r3,32(r2)
 80387fc:	e0bfff17 	ldw	r2,-4(fp)
 8038800:	10800817 	ldw	r2,32(r2)
 8038804:	10800088 	cmpgei	r2,r2,2
 8038808:	1000041e 	bne	r2,zero,803881c <tcp_newtcpcb+0xb4>
 803880c:	e0bfff17 	ldw	r2,-4(fp)
 8038810:	00c00084 	movi	r3,2
 8038814:	10c00815 	stw	r3,32(r2)
 8038818:	00000706 	br	8038838 <tcp_newtcpcb+0xd0>
 803881c:	e0bfff17 	ldw	r2,-4(fp)
 8038820:	10800817 	ldw	r2,32(r2)
 8038824:	10802050 	cmplti	r2,r2,129
 8038828:	1000031e 	bne	r2,zero,8038838 <tcp_newtcpcb+0xd0>
 803882c:	e0bfff17 	ldw	r2,-4(fp)
 8038830:	00c02004 	movi	r3,128
 8038834:	10c00815 	stw	r3,32(r2)

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
 8038838:	e0bfff17 	ldw	r2,-4(fp)
 803883c:	00c2da04 	movi	r3,2920
 8038840:	10c01b15 	stw	r3,108(r2)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
 8038844:	e0bfff17 	ldw	r2,-4(fp)
 8038848:	00ffffd4 	movui	r3,65535
 803884c:	10c01c15 	stw	r3,112(r2)

   inp->inp_ppcb = (char *)tp;
 8038850:	e0bffd17 	ldw	r2,-12(fp)
 8038854:	e0ffff17 	ldw	r3,-4(fp)
 8038858:	10c00915 	stw	r3,36(r2)
   return (tp);
 803885c:	e0bfff17 	ldw	r2,-4(fp)
}
 8038860:	e037883a 	mov	sp,fp
 8038864:	dfc00117 	ldw	ra,4(sp)
 8038868:	df000017 	ldw	fp,0(sp)
 803886c:	dec00204 	addi	sp,sp,8
 8038870:	f800283a 	ret

08038874 <tcp_drop>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 8038874:	defffb04 	addi	sp,sp,-20
 8038878:	dfc00415 	stw	ra,16(sp)
 803887c:	df000315 	stw	fp,12(sp)
 8038880:	df000304 	addi	fp,sp,12
 8038884:	e13ffe15 	stw	r4,-8(fp)
 8038888:	e17ffd15 	stw	r5,-12(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 803888c:	e0bffe17 	ldw	r2,-8(fp)
 8038890:	10800d17 	ldw	r2,52(r2)
 8038894:	10800817 	ldw	r2,32(r2)
 8038898:	e0bfff15 	stw	r2,-4(fp)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 803889c:	e0bffe17 	ldw	r2,-8(fp)
 80388a0:	10800217 	ldw	r2,8(r2)
 80388a4:	108000d0 	cmplti	r2,r2,3
 80388a8:	10000a1e 	bne	r2,zero,80388d4 <tcp_drop+0x60>
   {
      tp->t_state = TCPS_CLOSED;
 80388ac:	e0bffe17 	ldw	r2,-8(fp)
 80388b0:	10000215 	stw	zero,8(r2)
      (void) tcp_output(tp);
 80388b4:	e13ffe17 	ldw	r4,-8(fp)
 80388b8:	80370c40 	call	80370c4 <tcp_output>
      tcpstat.tcps_drops++;
 80388bc:	008201b4 	movhi	r2,2054
 80388c0:	10bc4d17 	ldw	r2,-3788(r2)
 80388c4:	10c00044 	addi	r3,r2,1
 80388c8:	008201b4 	movhi	r2,2054
 80388cc:	10fc4d15 	stw	r3,-3788(r2)
 80388d0:	00000506 	br	80388e8 <tcp_drop+0x74>
   }
   else
      tcpstat.tcps_conndrops++;
 80388d4:	008201b4 	movhi	r2,2054
 80388d8:	10bc4e17 	ldw	r2,-3784(r2)
 80388dc:	10c00044 	addi	r3,r2,1
 80388e0:	008201b4 	movhi	r2,2054
 80388e4:	10fc4e15 	stw	r3,-3784(r2)
   so->so_error = err;
 80388e8:	e0bfff17 	ldw	r2,-4(fp)
 80388ec:	e0fffd17 	ldw	r3,-12(fp)
 80388f0:	10c00615 	stw	r3,24(r2)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 80388f4:	e13ffe17 	ldw	r4,-8(fp)
 80388f8:	80389100 	call	8038910 <tcp_close>
}
 80388fc:	e037883a 	mov	sp,fp
 8038900:	dfc00117 	ldw	ra,4(sp)
 8038904:	df000017 	ldw	fp,0(sp)
 8038908:	dec00204 	addi	sp,sp,8
 803890c:	f800283a 	ret

08038910 <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
 8038910:	defff904 	addi	sp,sp,-28
 8038914:	dfc00615 	stw	ra,24(sp)
 8038918:	df000515 	stw	fp,20(sp)
 803891c:	df000504 	addi	fp,sp,20
 8038920:	e13ffb15 	stw	r4,-20(fp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
 8038924:	e0bffb17 	ldw	r2,-20(fp)
 8038928:	10800d17 	ldw	r2,52(r2)
 803892c:	e0bffe15 	stw	r2,-8(fp)
   struct socket *   so =  inp->inp_socket;
 8038930:	e0bffe17 	ldw	r2,-8(fp)
 8038934:	10800817 	ldw	r2,32(r2)
 8038938:	e0bffd15 	stw	r2,-12(fp)
   struct mbuf *  m;

   t = tp->seg_next;
 803893c:	e0bffb17 	ldw	r2,-20(fp)
 8038940:	10800017 	ldw	r2,0(r2)
 8038944:	e0bfff15 	stw	r2,-4(fp)
   while (t != (struct tcpiphdr *)tp) 
 8038948:	00000e06 	br	8038984 <tcp_close+0x74>
   {
      t = (struct tcpiphdr *)t->ti_next;
 803894c:	e0bfff17 	ldw	r2,-4(fp)
 8038950:	10800017 	ldw	r2,0(r2)
 8038954:	e0bfff15 	stw	r2,-4(fp)
      m = dtom(t->ti_prev);
 8038958:	e0bfff17 	ldw	r2,-4(fp)
 803895c:	10800117 	ldw	r2,4(r2)
 8038960:	1009883a 	mov	r4,r2
 8038964:	802d9680 	call	802d968 <dtom>
 8038968:	e0bffc15 	stw	r2,-16(fp)
      remque(t->ti_prev);
 803896c:	e0bfff17 	ldw	r2,-4(fp)
 8038970:	10800117 	ldw	r2,4(r2)
 8038974:	1009883a 	mov	r4,r2
 8038978:	802da000 	call	802da00 <remque>
      m_freem (m);
 803897c:	e13ffc17 	ldw	r4,-16(fp)
 8038980:	802d4340 	call	802d434 <m_freem>
   while (t != (struct tcpiphdr *)tp) 
 8038984:	e0ffff17 	ldw	r3,-4(fp)
 8038988:	e0bffb17 	ldw	r2,-20(fp)
 803898c:	18bfef1e 	bne	r3,r2,803894c <tcp_close+0x3c>
   }
   if (tp->t_template)
 8038990:	e0bffb17 	ldw	r2,-20(fp)
 8038994:	10800c17 	ldw	r2,48(r2)
 8038998:	10000426 	beq	r2,zero,80389ac <tcp_close+0x9c>
      TPH_FREE (tp->t_template);
 803899c:	e0bffb17 	ldw	r2,-20(fp)
 80389a0:	10800c17 	ldw	r2,48(r2)
 80389a4:	1009883a 	mov	r4,r2
 80389a8:	802cf900 	call	802cf90 <npfree>
   TCB_FREE (tp);
 80389ac:	e13ffb17 	ldw	r4,-20(fp)
 80389b0:	802cf900 	call	802cf90 <npfree>
   inp->inp_ppcb = 0;
 80389b4:	e0bffe17 	ldw	r2,-8(fp)
 80389b8:	10000915 	stw	zero,36(r2)
   soisdisconnected(so);
 80389bc:	e13ffd17 	ldw	r4,-12(fp)
 80389c0:	8032b900 	call	8032b90 <soisdisconnected>
   in_pcbdetach(inp);
 80389c4:	e13ffe17 	ldw	r4,-8(fp)
 80389c8:	8046af00 	call	8046af0 <in_pcbdetach>
   tcpstat.tcps_closed++;
 80389cc:	008201b4 	movhi	r2,2054
 80389d0:	10bc4f17 	ldw	r2,-3780(r2)
 80389d4:	10c00044 	addi	r3,r2,1
 80389d8:	008201b4 	movhi	r2,2054
 80389dc:	10fc4f15 	stw	r3,-3780(r2)
   return ((struct tcpcb *)0);
 80389e0:	0005883a 	mov	r2,zero
}
 80389e4:	e037883a 	mov	sp,fp
 80389e8:	dfc00117 	ldw	ra,4(sp)
 80389ec:	df000017 	ldw	fp,0(sp)
 80389f0:	dec00204 	addi	sp,sp,8
 80389f4:	f800283a 	ret

080389f8 <tcp_quench>:
 * RETURNS: 
 */

void
tcp_quench(struct inpcb * inp)
{
 80389f8:	defffd04 	addi	sp,sp,-12
 80389fc:	df000215 	stw	fp,8(sp)
 8038a00:	df000204 	addi	fp,sp,8
 8038a04:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp =  intotcpcb(inp);
 8038a08:	e0bffe17 	ldw	r2,-8(fp)
 8038a0c:	10800917 	ldw	r2,36(r2)
 8038a10:	e0bfff15 	stw	r2,-4(fp)

   if (tp)
 8038a14:	e0bfff17 	ldw	r2,-4(fp)
 8038a18:	10000526 	beq	r2,zero,8038a30 <tcp_quench+0x38>
      tp->snd_cwnd = tp->t_maxseg;
 8038a1c:	e0bfff17 	ldw	r2,-4(fp)
 8038a20:	10800a0b 	ldhu	r2,40(r2)
 8038a24:	10ffffcc 	andi	r3,r2,65535
 8038a28:	e0bfff17 	ldw	r2,-4(fp)
 8038a2c:	10c01b15 	stw	r3,108(r2)
}
 8038a30:	0001883a 	nop
 8038a34:	e037883a 	mov	sp,fp
 8038a38:	df000017 	ldw	fp,0(sp)
 8038a3c:	dec00104 	addi	sp,sp,4
 8038a40:	f800283a 	ret

08038a44 <tcp_putseq>:

/* tcp_putseq()  */

u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
 8038a44:	defffc04 	addi	sp,sp,-16
 8038a48:	df000315 	stw	fp,12(sp)
 8038a4c:	df000304 	addi	fp,sp,12
 8038a50:	e13ffe15 	stw	r4,-8(fp)
 8038a54:	e17ffd15 	stw	r5,-12(fp)
   int   i;

   cp += 3;                /* do low byte first */
 8038a58:	e0bffe17 	ldw	r2,-8(fp)
 8038a5c:	108000c4 	addi	r2,r2,3
 8038a60:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 8038a64:	e03fff15 	stw	zero,-4(fp)
 8038a68:	00000b06 	br	8038a98 <tcp_putseq+0x54>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
 8038a6c:	e0bffe17 	ldw	r2,-8(fp)
 8038a70:	10ffffc4 	addi	r3,r2,-1
 8038a74:	e0fffe15 	stw	r3,-8(fp)
 8038a78:	e0fffd17 	ldw	r3,-12(fp)
 8038a7c:	10c00005 	stb	r3,0(r2)
      seq >>= 8;
 8038a80:	e0bffd17 	ldw	r2,-12(fp)
 8038a84:	1004d23a 	srli	r2,r2,8
 8038a88:	e0bffd15 	stw	r2,-12(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 8038a8c:	e0bfff17 	ldw	r2,-4(fp)
 8038a90:	10800044 	addi	r2,r2,1
 8038a94:	e0bfff15 	stw	r2,-4(fp)
 8038a98:	e0bfff17 	ldw	r2,-4(fp)
 8038a9c:	10800110 	cmplti	r2,r2,4
 8038aa0:	103ff21e 	bne	r2,zero,8038a6c <tcp_putseq+0x28>
   }
   return (cp + 5);
 8038aa4:	e0bffe17 	ldw	r2,-8(fp)
 8038aa8:	10800144 	addi	r2,r2,5
}
 8038aac:	e037883a 	mov	sp,fp
 8038ab0:	df000017 	ldw	fp,0(sp)
 8038ab4:	dec00104 	addi	sp,sp,4
 8038ab8:	f800283a 	ret

08038abc <tcp_getseq>:
 * RETURNS: a long in local endian
 */

u_long
tcp_getseq(u_char * cp)
{
 8038abc:	defffc04 	addi	sp,sp,-16
 8038ac0:	df000315 	stw	fp,12(sp)
 8038ac4:	df000304 	addi	fp,sp,12
 8038ac8:	e13ffd15 	stw	r4,-12(fp)
   int i;
   ulong seq = 0;
 8038acc:	e03ffe15 	stw	zero,-8(fp)

   for(i = 0; i < 4; i++)
 8038ad0:	e03fff15 	stw	zero,-4(fp)
 8038ad4:	00000e06 	br	8038b10 <tcp_getseq+0x54>
   {
      seq <<= 8;
 8038ad8:	e0bffe17 	ldw	r2,-8(fp)
 8038adc:	1004923a 	slli	r2,r2,8
 8038ae0:	e0bffe15 	stw	r2,-8(fp)
      seq += (u_long)*(cp++);
 8038ae4:	e0bffd17 	ldw	r2,-12(fp)
 8038ae8:	10c00044 	addi	r3,r2,1
 8038aec:	e0fffd15 	stw	r3,-12(fp)
 8038af0:	10800003 	ldbu	r2,0(r2)
 8038af4:	10803fcc 	andi	r2,r2,255
 8038af8:	e0fffe17 	ldw	r3,-8(fp)
 8038afc:	1885883a 	add	r2,r3,r2
 8038b00:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i < 4; i++)
 8038b04:	e0bfff17 	ldw	r2,-4(fp)
 8038b08:	10800044 	addi	r2,r2,1
 8038b0c:	e0bfff15 	stw	r2,-4(fp)
 8038b10:	e0bfff17 	ldw	r2,-4(fp)
 8038b14:	10800110 	cmplti	r2,r2,4
 8038b18:	103fef1e 	bne	r2,zero,8038ad8 <tcp_getseq+0x1c>
   }
   return seq;
 8038b1c:	e0bffe17 	ldw	r2,-8(fp)
}
 8038b20:	e037883a 	mov	sp,fp
 8038b24:	df000017 	ldw	fp,0(sp)
 8038b28:	dec00104 	addi	sp,sp,4
 8038b2c:	f800283a 	ret

08038b30 <tcp_slowtimo>:
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
 8038b30:	defff704 	addi	sp,sp,-36
 8038b34:	dfc00815 	stw	ra,32(sp)
 8038b38:	df000715 	stw	fp,28(sp)
 8038b3c:	df000704 	addi	fp,sp,28
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 8038b40:	d0a03b17 	ldw	r2,-32532(gp)
 8038b44:	100490fa 	slli	r2,r2,3
 8038b48:	d0a0af15 	stw	r2,-32068(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 8038b4c:	008201b4 	movhi	r2,2054
 8038b50:	10bc1717 	ldw	r2,-4004(r2)
 8038b54:	e0bffe15 	stw	r2,-8(fp)
 8038b58:	00007c06 	br	8038d4c <tcp_slowtimo+0x21c>
   {
      sonext = so->next;
 8038b5c:	e0bffe17 	ldw	r2,-8(fp)
 8038b60:	10800017 	ldw	r2,0(r2)
 8038b64:	e0bffd15 	stw	r2,-12(fp)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
 8038b68:	e0bffe17 	ldw	r2,-8(fp)
 8038b6c:	10800983 	ldbu	r2,38(r2)
 8038b70:	10803fcc 	andi	r2,r2,255
 8038b74:	1080201c 	xori	r2,r2,128
 8038b78:	10bfe004 	addi	r2,r2,-128
 8038b7c:	10800058 	cmpnei	r2,r2,1
 8038b80:	1000421e 	bne	r2,zero,8038c8c <tcp_slowtimo+0x15c>
      {
         ip = so->so_pcb;
 8038b84:	e0bffe17 	ldw	r2,-8(fp)
 8038b88:	10800117 	ldw	r2,4(r2)
 8038b8c:	e0bffc15 	stw	r2,-16(fp)
         if (!ip)
 8038b90:	e0bffc17 	ldw	r2,-16(fp)
 8038b94:	10006626 	beq	r2,zero,8038d30 <tcp_slowtimo+0x200>
            continue;
         ipnxt = ip->inp_next;
 8038b98:	e0bffc17 	ldw	r2,-16(fp)
 8038b9c:	10800017 	ldw	r2,0(r2)
 8038ba0:	e0bffb15 	stw	r2,-20(fp)

         tp = intotcpcb(so->so_pcb);
 8038ba4:	e0bffe17 	ldw	r2,-8(fp)
 8038ba8:	10800117 	ldw	r2,4(r2)
 8038bac:	10800917 	ldw	r2,36(r2)
 8038bb0:	e0bffa15 	stw	r2,-24(fp)
         if (!tp)
 8038bb4:	e0bffa17 	ldw	r2,-24(fp)
 8038bb8:	10005f26 	beq	r2,zero,8038d38 <tcp_slowtimo+0x208>
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
 8038bbc:	e03fff15 	stw	zero,-4(fp)
 8038bc0:	00002a06 	br	8038c6c <tcp_slowtimo+0x13c>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
 8038bc4:	e0fffa17 	ldw	r3,-24(fp)
 8038bc8:	e0bfff17 	ldw	r2,-4(fp)
 8038bcc:	108000c4 	addi	r2,r2,3
 8038bd0:	100490ba 	slli	r2,r2,2
 8038bd4:	1885883a 	add	r2,r3,r2
 8038bd8:	10800017 	ldw	r2,0(r2)
 8038bdc:	10002026 	beq	r2,zero,8038c60 <tcp_slowtimo+0x130>
 8038be0:	e0fffa17 	ldw	r3,-24(fp)
 8038be4:	e0bfff17 	ldw	r2,-4(fp)
 8038be8:	108000c4 	addi	r2,r2,3
 8038bec:	100490ba 	slli	r2,r2,2
 8038bf0:	1885883a 	add	r2,r3,r2
 8038bf4:	10800017 	ldw	r2,0(r2)
 8038bf8:	10ffffc4 	addi	r3,r2,-1
 8038bfc:	e13ffa17 	ldw	r4,-24(fp)
 8038c00:	e0bfff17 	ldw	r2,-4(fp)
 8038c04:	108000c4 	addi	r2,r2,3
 8038c08:	100490ba 	slli	r2,r2,2
 8038c0c:	2085883a 	add	r2,r4,r2
 8038c10:	10c00015 	stw	r3,0(r2)
 8038c14:	e0fffa17 	ldw	r3,-24(fp)
 8038c18:	e0bfff17 	ldw	r2,-4(fp)
 8038c1c:	108000c4 	addi	r2,r2,3
 8038c20:	100490ba 	slli	r2,r2,2
 8038c24:	1885883a 	add	r2,r3,r2
 8038c28:	10800017 	ldw	r2,0(r2)
 8038c2c:	10000c1e 	bne	r2,zero,8038c60 <tcp_slowtimo+0x130>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
 8038c30:	e0bffe17 	ldw	r2,-8(fp)
 8038c34:	00c004c4 	movi	r3,19
 8038c38:	10c00715 	stw	r3,28(r2)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
 8038c3c:	e0bfff17 	ldw	r2,-4(fp)
 8038c40:	100d883a 	mov	r6,r2
 8038c44:	000b883a 	mov	r5,zero
 8038c48:	e13ffe17 	ldw	r4,-8(fp)
 8038c4c:	803924c0 	call	803924c <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
 8038c50:	e0bffb17 	ldw	r2,-20(fp)
 8038c54:	10800117 	ldw	r2,4(r2)
 8038c58:	e0fffc17 	ldw	r3,-16(fp)
 8038c5c:	1880381e 	bne	r3,r2,8038d40 <tcp_slowtimo+0x210>
         for (i = 0; i < TCPT_NTIMERS; i++) 
 8038c60:	e0bfff17 	ldw	r2,-4(fp)
 8038c64:	10800044 	addi	r2,r2,1
 8038c68:	e0bfff15 	stw	r2,-4(fp)
 8038c6c:	e0bfff17 	ldw	r2,-4(fp)
 8038c70:	10800110 	cmplti	r2,r2,4
 8038c74:	103fd31e 	bne	r2,zero,8038bc4 <tcp_slowtimo+0x94>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
 8038c78:	e0bffa17 	ldw	r2,-24(fp)
 8038c7c:	10801d17 	ldw	r2,116(r2)
 8038c80:	10c00044 	addi	r3,r2,1
 8038c84:	e0bffa17 	ldw	r2,-24(fp)
 8038c88:	10c01d15 	stw	r3,116(r2)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
 8038c8c:	e0bffe17 	ldw	r2,-8(fp)
 8038c90:	10800a04 	addi	r2,r2,40
 8038c94:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 8038c98:	e0bff917 	ldw	r2,-28(fp)
 8038c9c:	1080070b 	ldhu	r2,28(r2)
 8038ca0:	10bfffcc 	andi	r2,r2,65535
 8038ca4:	1080020c 	andi	r2,r2,8
 8038ca8:	10000a26 	beq	r2,zero,8038cd4 <tcp_slowtimo+0x1a4>
      {
         select_wait = 0;
 8038cac:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 8038cb0:	d120ab04 	addi	r4,gp,-32084
 8038cb4:	8028a0c0 	call	8028a0c <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 8038cb8:	e0bff917 	ldw	r2,-28(fp)
 8038cbc:	10c0070b 	ldhu	r3,28(r2)
 8038cc0:	00bffdc4 	movi	r2,-9
 8038cc4:	1884703a 	and	r2,r3,r2
 8038cc8:	1007883a 	mov	r3,r2
 8038ccc:	e0bff917 	ldw	r2,-28(fp)
 8038cd0:	10c0070d 	sth	r3,28(r2)
      }
      sb = &so->so_snd;
 8038cd4:	e0bffe17 	ldw	r2,-8(fp)
 8038cd8:	10801204 	addi	r2,r2,72
 8038cdc:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 8038ce0:	e0bff917 	ldw	r2,-28(fp)
 8038ce4:	1080070b 	ldhu	r2,28(r2)
 8038ce8:	10bfffcc 	andi	r2,r2,65535
 8038cec:	1080020c 	andi	r2,r2,8
 8038cf0:	10000a26 	beq	r2,zero,8038d1c <tcp_slowtimo+0x1ec>
      {
         select_wait = 0;         
 8038cf4:	d020ab0d 	sth	zero,-32084(gp)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 8038cf8:	d120ab04 	addi	r4,gp,-32084
 8038cfc:	8028a0c0 	call	8028a0c <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 8038d00:	e0bff917 	ldw	r2,-28(fp)
 8038d04:	10c0070b 	ldhu	r3,28(r2)
 8038d08:	00bffdc4 	movi	r2,-9
 8038d0c:	1884703a 	and	r2,r3,r2
 8038d10:	1007883a 	mov	r3,r2
 8038d14:	e0bff917 	ldw	r2,-28(fp)
 8038d18:	10c0070d 	sth	r3,28(r2)
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
 8038d1c:	e0bffe17 	ldw	r2,-8(fp)
 8038d20:	10800904 	addi	r2,r2,36
 8038d24:	1009883a 	mov	r4,r2
 8038d28:	8028a0c0 	call	8028a0c <tcp_wakeup>
 8038d2c:	00000506 	br	8038d44 <tcp_slowtimo+0x214>
            continue;
 8038d30:	0001883a 	nop
 8038d34:	00000306 	br	8038d44 <tcp_slowtimo+0x214>
            continue;
 8038d38:	0001883a 	nop
 8038d3c:	00000106 	br	8038d44 <tcp_slowtimo+0x214>
                  goto tpgone;
 8038d40:	0001883a 	nop
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 8038d44:	e0bffd17 	ldw	r2,-12(fp)
 8038d48:	e0bffe15 	stw	r2,-8(fp)
 8038d4c:	e0bffe17 	ldw	r2,-8(fp)
 8038d50:	103f821e 	bne	r2,zero,8038b5c <tcp_slowtimo+0x2c>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
 8038d54:	d0e0b017 	ldw	r3,-32064(gp)
 8038d58:	00be9fd4 	movui	r2,64127
 8038d5c:	1885883a 	add	r2,r3,r2
 8038d60:	d0a0b015 	stw	r2,-32064(gp)

   if (tcp_iss & 0xff000000)
 8038d64:	d0a0b017 	ldw	r2,-32064(gp)
 8038d68:	10bfc02c 	andhi	r2,r2,65280
 8038d6c:	10000126 	beq	r2,zero,8038d74 <tcp_slowtimo+0x244>
      tcp_iss = 0L;
 8038d70:	d020b015 	stw	zero,-32064(gp)
}
 8038d74:	0001883a 	nop
 8038d78:	e037883a 	mov	sp,fp
 8038d7c:	dfc00117 	ldw	ra,4(sp)
 8038d80:	df000017 	ldw	fp,0(sp)
 8038d84:	dec00204 	addi	sp,sp,8
 8038d88:	f800283a 	ret

08038d8c <tcp_canceltimers>:
 * RETURNS: 
 */

void
tcp_canceltimers(struct tcpcb * tp)
{
 8038d8c:	defffd04 	addi	sp,sp,-12
 8038d90:	df000215 	stw	fp,8(sp)
 8038d94:	df000204 	addi	fp,sp,8
 8038d98:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
 8038d9c:	e03fff15 	stw	zero,-4(fp)
 8038da0:	00000906 	br	8038dc8 <tcp_canceltimers+0x3c>
      tp->t_timer[i] = 0;
 8038da4:	e0fffe17 	ldw	r3,-8(fp)
 8038da8:	e0bfff17 	ldw	r2,-4(fp)
 8038dac:	108000c4 	addi	r2,r2,3
 8038db0:	100490ba 	slli	r2,r2,2
 8038db4:	1885883a 	add	r2,r3,r2
 8038db8:	10000015 	stw	zero,0(r2)
   for (i = 0; i < TCPT_NTIMERS; i++)
 8038dbc:	e0bfff17 	ldw	r2,-4(fp)
 8038dc0:	10800044 	addi	r2,r2,1
 8038dc4:	e0bfff15 	stw	r2,-4(fp)
 8038dc8:	e0bfff17 	ldw	r2,-4(fp)
 8038dcc:	10800110 	cmplti	r2,r2,4
 8038dd0:	103ff41e 	bne	r2,zero,8038da4 <tcp_canceltimers+0x18>
}
 8038dd4:	0001883a 	nop
 8038dd8:	0001883a 	nop
 8038ddc:	e037883a 	mov	sp,fp
 8038de0:	df000017 	ldw	fp,0(sp)
 8038de4:	dec00104 	addi	sp,sp,4
 8038de8:	f800283a 	ret

08038dec <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
 8038dec:	defff804 	addi	sp,sp,-32
 8038df0:	dfc00715 	stw	ra,28(sp)
 8038df4:	df000615 	stw	fp,24(sp)
 8038df8:	df000604 	addi	fp,sp,24
 8038dfc:	e13ffd15 	stw	r4,-12(fp)
 8038e00:	e17ffc15 	stw	r5,-16(fp)
   int   rexmt;

   switch (timer) 
 8038e04:	e0bffc17 	ldw	r2,-16(fp)
 8038e08:	108000e0 	cmpeqi	r2,r2,3
 8038e0c:	10000f1e 	bne	r2,zero,8038e4c <tcp_timers+0x60>
 8038e10:	e0bffc17 	ldw	r2,-16(fp)
 8038e14:	10800108 	cmpgei	r2,r2,4
 8038e18:	1001061e 	bne	r2,zero,8039234 <tcp_timers+0x448>
 8038e1c:	e0bffc17 	ldw	r2,-16(fp)
 8038e20:	108000a0 	cmpeqi	r2,r2,2
 8038e24:	1000bb1e 	bne	r2,zero,8039114 <tcp_timers+0x328>
 8038e28:	e0bffc17 	ldw	r2,-16(fp)
 8038e2c:	108000c8 	cmpgei	r2,r2,3
 8038e30:	1001001e 	bne	r2,zero,8039234 <tcp_timers+0x448>
 8038e34:	e0bffc17 	ldw	r2,-16(fp)
 8038e38:	10001726 	beq	r2,zero,8038e98 <tcp_timers+0xac>
 8038e3c:	e0bffc17 	ldw	r2,-16(fp)
 8038e40:	10800060 	cmpeqi	r2,r2,1
 8038e44:	1000a41e 	bne	r2,zero,80390d8 <tcp_timers+0x2ec>
 8038e48:	0000fa06 	br	8039234 <tcp_timers+0x448>
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
 8038e4c:	e0bffd17 	ldw	r2,-12(fp)
 8038e50:	10800217 	ldw	r2,8(r2)
 8038e54:	108002a0 	cmpeqi	r2,r2,10
 8038e58:	10000b1e 	bne	r2,zero,8038e88 <tcp_timers+0x9c>
          tp->t_idle <= tcp_maxidle)
 8038e5c:	e0bffd17 	ldw	r2,-12(fp)
 8038e60:	10801d17 	ldw	r2,116(r2)
 8038e64:	d0e0af17 	ldw	r3,-32068(gp)
      if (tp->t_state != TCPS_TIME_WAIT &&
 8038e68:	18800716 	blt	r3,r2,8038e88 <tcp_timers+0x9c>
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
 8038e6c:	d0a03b17 	ldw	r2,-32532(gp)
 8038e70:	10ffffcc 	andi	r3,r2,65535
 8038e74:	18e0001c 	xori	r3,r3,32768
 8038e78:	18e00004 	addi	r3,r3,-32768
 8038e7c:	e0bffd17 	ldw	r2,-12(fp)
 8038e80:	10c00615 	stw	r3,24(r2)
      }
      else
         tp = tcp_close(tp);
      break;
 8038e84:	0000eb06 	br	8039234 <tcp_timers+0x448>
         tp = tcp_close(tp);
 8038e88:	e13ffd17 	ldw	r4,-12(fp)
 8038e8c:	80389100 	call	8038910 <tcp_close>
 8038e90:	e0bffd15 	stw	r2,-12(fp)
      break;
 8038e94:	0000e706 	br	8039234 <tcp_timers+0x448>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 8038e98:	008201b4 	movhi	r2,2054
 8038e9c:	10bc2717 	ldw	r2,-3940(r2)
 8038ea0:	10c00044 	addi	r3,r2,1
 8038ea4:	008201b4 	movhi	r2,2054
 8038ea8:	10fc2715 	stw	r3,-3940(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 8038eac:	e0bffd17 	ldw	r2,-12(fp)
 8038eb0:	10800717 	ldw	r2,28(r2)
 8038eb4:	10c00044 	addi	r3,r2,1
 8038eb8:	e0bffd17 	ldw	r2,-12(fp)
 8038ebc:	10c00715 	stw	r3,28(r2)
 8038ec0:	e0bffd17 	ldw	r2,-12(fp)
 8038ec4:	10800717 	ldw	r2,28(r2)
 8038ec8:	10800350 	cmplti	r2,r2,13
 8038ecc:	10000d1e 	bne	r2,zero,8038f04 <tcp_timers+0x118>
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
 8038ed0:	e0bffd17 	ldw	r2,-12(fp)
 8038ed4:	00c00304 	movi	r3,12
 8038ed8:	10c00715 	stw	r3,28(r2)
         tcpstat.tcps_timeoutdrop++;
 8038edc:	008201b4 	movhi	r2,2054
 8038ee0:	10bc5317 	ldw	r2,-3764(r2)
 8038ee4:	10c00044 	addi	r3,r2,1
 8038ee8:	008201b4 	movhi	r2,2054
 8038eec:	10fc5315 	stw	r3,-3764(r2)
         tp = tcp_drop(tp, ETIMEDOUT);
 8038ef0:	01401d04 	movi	r5,116
 8038ef4:	e13ffd17 	ldw	r4,-12(fp)
 8038ef8:	80388740 	call	8038874 <tcp_drop>
 8038efc:	e0bffd15 	stw	r2,-12(fp)
         break;
 8038f00:	0000cc06 	br	8039234 <tcp_timers+0x448>
      }
      tcpstat.tcps_rexmttimeo++;
 8038f04:	008201b4 	movhi	r2,2054
 8038f08:	10bc5417 	ldw	r2,-3760(r2)
 8038f0c:	10c00044 	addi	r3,r2,1
 8038f10:	008201b4 	movhi	r2,2054
 8038f14:	10fc5415 	stw	r3,-3760(r2)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 8038f18:	e0bffd17 	ldw	r2,-12(fp)
 8038f1c:	10802017 	ldw	r2,128(r2)
 8038f20:	1007d0ba 	srai	r3,r2,2
 8038f24:	e0bffd17 	ldw	r2,-12(fp)
 8038f28:	10802117 	ldw	r2,132(r2)
 8038f2c:	1885883a 	add	r2,r3,r2
 8038f30:	1005d07a 	srai	r2,r2,1
 8038f34:	e0bffe15 	stw	r2,-8(fp)
      rexmt *= tcp_backoff[tp->t_rxtshift];
 8038f38:	e0bffd17 	ldw	r2,-12(fp)
 8038f3c:	10c00717 	ldw	r3,28(r2)
 8038f40:	00820174 	movhi	r2,2053
 8038f44:	1885883a 	add	r2,r3,r2
 8038f48:	10980d03 	ldbu	r2,24628(r2)
 8038f4c:	10803fcc 	andi	r2,r2,255
 8038f50:	e0fffe17 	ldw	r3,-8(fp)
 8038f54:	1885383a 	mul	r2,r3,r2
 8038f58:	e0bffe15 	stw	r2,-8(fp)
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 8038f5c:	e0bffe17 	ldw	r2,-8(fp)
 8038f60:	10ffffcc 	andi	r3,r2,65535
 8038f64:	18e0001c 	xori	r3,r3,32768
 8038f68:	18e00004 	addi	r3,r3,-32768
 8038f6c:	e0bffd17 	ldw	r2,-12(fp)
 8038f70:	10c00815 	stw	r3,32(r2)
 8038f74:	e0bffd17 	ldw	r2,-12(fp)
 8038f78:	10800817 	ldw	r2,32(r2)
 8038f7c:	10800088 	cmpgei	r2,r2,2
 8038f80:	1000041e 	bne	r2,zero,8038f94 <tcp_timers+0x1a8>
 8038f84:	e0bffd17 	ldw	r2,-12(fp)
 8038f88:	00c00084 	movi	r3,2
 8038f8c:	10c00815 	stw	r3,32(r2)
 8038f90:	00000706 	br	8038fb0 <tcp_timers+0x1c4>
 8038f94:	e0bffd17 	ldw	r2,-12(fp)
 8038f98:	10800817 	ldw	r2,32(r2)
 8038f9c:	10802050 	cmplti	r2,r2,129
 8038fa0:	1000031e 	bne	r2,zero,8038fb0 <tcp_timers+0x1c4>
 8038fa4:	e0bffd17 	ldw	r2,-12(fp)
 8038fa8:	00c02004 	movi	r3,128
 8038fac:	10c00815 	stw	r3,32(r2)
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 8038fb0:	e0bffd17 	ldw	r2,-12(fp)
 8038fb4:	10c00817 	ldw	r3,32(r2)
 8038fb8:	e0bffd17 	ldw	r2,-12(fp)
 8038fbc:	10c00315 	stw	r3,12(r2)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 8038fc0:	e0bffd17 	ldw	r2,-12(fp)
 8038fc4:	10800717 	ldw	r2,28(r2)
 8038fc8:	10800110 	cmplti	r2,r2,4
 8038fcc:	10000f1e 	bne	r2,zero,803900c <tcp_timers+0x220>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
 8038fd0:	e0bffd17 	ldw	r2,-12(fp)
 8038fd4:	10800b0b 	ldhu	r2,44(r2)
 8038fd8:	10bfffcc 	andi	r2,r2,65535
 8038fdc:	1080400c 	andi	r2,r2,256
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 8038fe0:	10000a1e 	bne	r2,zero,803900c <tcp_timers+0x220>
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
 8038fe4:	e0bffd17 	ldw	r2,-12(fp)
 8038fe8:	10c02117 	ldw	r3,132(r2)
 8038fec:	e0bffd17 	ldw	r2,-12(fp)
 8038ff0:	10802017 	ldw	r2,128(r2)
 8038ff4:	1005d0ba 	srai	r2,r2,2
 8038ff8:	1887883a 	add	r3,r3,r2
 8038ffc:	e0bffd17 	ldw	r2,-12(fp)
 8039000:	10c02115 	stw	r3,132(r2)
         tp->t_srtt = 0;
 8039004:	e0bffd17 	ldw	r2,-12(fp)
 8039008:	10002015 	stw	zero,128(r2)
      }
      tp->snd_nxt = tp->snd_una;
 803900c:	e0bffd17 	ldw	r2,-12(fp)
 8039010:	10c00e17 	ldw	r3,56(r2)
 8039014:	e0bffd17 	ldw	r2,-12(fp)
 8039018:	10c00f15 	stw	r3,60(r2)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
 803901c:	e0bffd17 	ldw	r2,-12(fp)
 8039020:	10001e15 	stw	zero,120(r2)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 8039024:	e0bffd17 	ldw	r2,-12(fp)
 8039028:	10800d17 	ldw	r2,52(r2)
 803902c:	10800817 	ldw	r2,32(r2)
 8039030:	10800417 	ldw	r2,16(r2)
 8039034:	1090000c 	andi	r2,r2,16384
 8039038:	1000241e 	bne	r2,zero,80390cc <tcp_timers+0x2e0>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
 803903c:	e0bffd17 	ldw	r2,-12(fp)
 8039040:	11001417 	ldw	r4,80(r2)
 8039044:	e0bffd17 	ldw	r2,-12(fp)
 8039048:	10c01b17 	ldw	r3,108(r2)
 803904c:	2005883a 	mov	r2,r4
 8039050:	1880012e 	bgeu	r3,r2,8039058 <tcp_timers+0x26c>
 8039054:	1805883a 	mov	r2,r3
 8039058:	e0bfff15 	stw	r2,-4(fp)
         win = win / 2 / tp->t_maxseg;
 803905c:	e0bfff17 	ldw	r2,-4(fp)
 8039060:	1006d07a 	srli	r3,r2,1
 8039064:	e0bffd17 	ldw	r2,-12(fp)
 8039068:	10800a0b 	ldhu	r2,40(r2)
 803906c:	10bfffcc 	andi	r2,r2,65535
 8039070:	100b883a 	mov	r5,r2
 8039074:	1809883a 	mov	r4,r3
 8039078:	800e2300 	call	800e230 <__udivsi3>
 803907c:	e0bfff15 	stw	r2,-4(fp)
         if (win < 2)
 8039080:	e0bfff17 	ldw	r2,-4(fp)
 8039084:	108000a8 	cmpgeui	r2,r2,2
 8039088:	1000021e 	bne	r2,zero,8039094 <tcp_timers+0x2a8>
            win = 2;
 803908c:	00800084 	movi	r2,2
 8039090:	e0bfff15 	stw	r2,-4(fp)
         tp->snd_cwnd = tp->t_maxseg;
 8039094:	e0bffd17 	ldw	r2,-12(fp)
 8039098:	10800a0b 	ldhu	r2,40(r2)
 803909c:	10ffffcc 	andi	r3,r2,65535
 80390a0:	e0bffd17 	ldw	r2,-12(fp)
 80390a4:	10c01b15 	stw	r3,108(r2)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
 80390a8:	e0bfff17 	ldw	r2,-4(fp)
 80390ac:	10ffffcc 	andi	r3,r2,65535
 80390b0:	e0bffd17 	ldw	r2,-12(fp)
 80390b4:	10800a0b 	ldhu	r2,40(r2)
 80390b8:	10bfffcc 	andi	r2,r2,65535
 80390bc:	1885383a 	mul	r2,r3,r2
 80390c0:	1007883a 	mov	r3,r2
 80390c4:	e0bffd17 	ldw	r2,-12(fp)
 80390c8:	10c01c15 	stw	r3,112(r2)
      }
      (void) tcp_output(tp);
 80390cc:	e13ffd17 	ldw	r4,-12(fp)
 80390d0:	80370c40 	call	80370c4 <tcp_output>
      break;
 80390d4:	00005706 	br	8039234 <tcp_timers+0x448>
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
 80390d8:	008201b4 	movhi	r2,2054
 80390dc:	10bc5517 	ldw	r2,-3756(r2)
 80390e0:	10c00044 	addi	r3,r2,1
 80390e4:	008201b4 	movhi	r2,2054
 80390e8:	10fc5515 	stw	r3,-3756(r2)
      tcp_setpersist(tp);
 80390ec:	e13ffd17 	ldw	r4,-12(fp)
 80390f0:	803805c0 	call	803805c <tcp_setpersist>
      tp->t_force = 1;
 80390f4:	e0bffd17 	ldw	r2,-12(fp)
 80390f8:	00c00044 	movi	r3,1
 80390fc:	10c00a85 	stb	r3,42(r2)
      (void) tcp_output(tp);
 8039100:	e13ffd17 	ldw	r4,-12(fp)
 8039104:	80370c40 	call	80370c4 <tcp_output>
      tp->t_force = 0;
 8039108:	e0bffd17 	ldw	r2,-12(fp)
 803910c:	10000a85 	stb	zero,42(r2)
      break;
 8039110:	00004806 	br	8039234 <tcp_timers+0x448>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
 8039114:	008201b4 	movhi	r2,2054
 8039118:	10bc5617 	ldw	r2,-3752(r2)
 803911c:	10c00044 	addi	r3,r2,1
 8039120:	008201b4 	movhi	r2,2054
 8039124:	10fc5615 	stw	r3,-3752(r2)
      if (tp->t_state < TCPS_ESTABLISHED)
 8039128:	e0bffd17 	ldw	r2,-12(fp)
 803912c:	10800217 	ldw	r2,8(r2)
 8039130:	10800108 	cmpgei	r2,r2,4
 8039134:	10003226 	beq	r2,zero,8039200 <tcp_timers+0x414>
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 8039138:	e0bffd17 	ldw	r2,-12(fp)
 803913c:	10800d17 	ldw	r2,52(r2)
 8039140:	10800817 	ldw	r2,32(r2)
 8039144:	10800417 	ldw	r2,16(r2)
 8039148:	1080020c 	andi	r2,r2,8
 803914c:	10002526 	beq	r2,zero,80391e4 <tcp_timers+0x3f8>
          tp->t_state <= TCPS_CLOSE_WAIT) 
 8039150:	e0bffd17 	ldw	r2,-12(fp)
 8039154:	10800217 	ldw	r2,8(r2)
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 8039158:	10800188 	cmpgei	r2,r2,6
 803915c:	1000211e 	bne	r2,zero,80391e4 <tcp_timers+0x3f8>
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
 8039160:	e0bffd17 	ldw	r2,-12(fp)
 8039164:	10c01d17 	ldw	r3,116(r2)
 8039168:	d1203a17 	ldw	r4,-32536(gp)
 803916c:	d0a0af17 	ldw	r2,-32068(gp)
 8039170:	2085883a 	add	r2,r4,r2
 8039174:	1880240e 	bge	r3,r2,8039208 <tcp_timers+0x41c>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
 8039178:	008201b4 	movhi	r2,2054
 803917c:	10bc5717 	ldw	r2,-3748(r2)
 8039180:	10c00044 	addi	r3,r2,1
 8039184:	008201b4 	movhi	r2,2054
 8039188:	10fc5715 	stw	r3,-3748(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 803918c:	e0bffd17 	ldw	r2,-12(fp)
 8039190:	10c00c17 	ldw	r3,48(r2)
 8039194:	e0bffd17 	ldw	r2,-12(fp)
 8039198:	10801617 	ldw	r2,88(r2)
 803919c:	113fffc4 	addi	r4,r2,-1
            tp->snd_una - 1, 0, (struct mbuf *)NULL);
 80391a0:	e0bffd17 	ldw	r2,-12(fp)
 80391a4:	10800e17 	ldw	r2,56(r2)
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 80391a8:	10bfffc4 	addi	r2,r2,-1
 80391ac:	d8000115 	stw	zero,4(sp)
 80391b0:	d8000015 	stw	zero,0(sp)
 80391b4:	100f883a 	mov	r7,r2
 80391b8:	200d883a 	mov	r6,r4
 80391bc:	180b883a 	mov	r5,r3
 80391c0:	e13ffd17 	ldw	r4,-12(fp)
 80391c4:	80383740 	call	8038374 <tcp_respond>

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
 80391c8:	d0a03b17 	ldw	r2,-32532(gp)
 80391cc:	10ffffcc 	andi	r3,r2,65535
 80391d0:	18e0001c 	xori	r3,r3,32768
 80391d4:	18e00004 	addi	r3,r3,-32768
 80391d8:	e0bffd17 	ldw	r2,-12(fp)
 80391dc:	10c00515 	stw	r3,20(r2)
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
 80391e0:	00001406 	br	8039234 <tcp_timers+0x448>
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
 80391e4:	d0a03a17 	ldw	r2,-32536(gp)
 80391e8:	10ffffcc 	andi	r3,r2,65535
 80391ec:	18e0001c 	xori	r3,r3,32768
 80391f0:	18e00004 	addi	r3,r3,-32768
 80391f4:	e0bffd17 	ldw	r2,-12(fp)
 80391f8:	10c00515 	stw	r3,20(r2)
      break;
 80391fc:	00000d06 	br	8039234 <tcp_timers+0x448>
         goto dropit;
 8039200:	0001883a 	nop
 8039204:	00000106 	br	803920c <tcp_timers+0x420>
            goto dropit;
 8039208:	0001883a 	nop
      dropit:
      tcpstat.tcps_keepdrops++;
 803920c:	008201b4 	movhi	r2,2054
 8039210:	10bc5817 	ldw	r2,-3744(r2)
 8039214:	10c00044 	addi	r3,r2,1
 8039218:	008201b4 	movhi	r2,2054
 803921c:	10fc5815 	stw	r3,-3744(r2)
      tp = tcp_drop (tp, ETIMEDOUT);
 8039220:	01401d04 	movi	r5,116
 8039224:	e13ffd17 	ldw	r4,-12(fp)
 8039228:	80388740 	call	8038874 <tcp_drop>
 803922c:	e0bffd15 	stw	r2,-12(fp)
      break;
 8039230:	0001883a 	nop
   }
   return tp;
 8039234:	e0bffd17 	ldw	r2,-12(fp)
}
 8039238:	e037883a 	mov	sp,fp
 803923c:	dfc00117 	ldw	ra,4(sp)
 8039240:	df000017 	ldw	fp,0(sp)
 8039244:	dec00204 	addi	sp,sp,8
 8039248:	f800283a 	ret

0803924c <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 803924c:	defff604 	addi	sp,sp,-40
 8039250:	dfc00915 	stw	ra,36(sp)
 8039254:	df000815 	stw	fp,32(sp)
 8039258:	df000804 	addi	fp,sp,32
 803925c:	e13ffa15 	stw	r4,-24(fp)
 8039260:	e17ff915 	stw	r5,-28(fp)
 8039264:	e1bff815 	stw	r6,-32(fp)
   struct inpcb * inp;
   struct tcpcb * tp;
   int   error =  0;
 8039268:	e03ffe15 	stw	zero,-8(fp)

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
 803926c:	e0bffa17 	ldw	r2,-24(fp)
 8039270:	10800717 	ldw	r2,28(r2)
 8039274:	e0bffd15 	stw	r2,-12(fp)
   inp = sotoinpcb(so);
 8039278:	e0bffa17 	ldw	r2,-24(fp)
 803927c:	10800117 	ldw	r2,4(r2)
 8039280:	e0bffc15 	stw	r2,-16(fp)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
 8039284:	e0bffc17 	ldw	r2,-16(fp)
 8039288:	1000041e 	bne	r2,zero,803929c <tcp_usrreq+0x50>
 803928c:	e0bffd17 	ldw	r2,-12(fp)
 8039290:	10000226 	beq	r2,zero,803929c <tcp_usrreq+0x50>
   {
      return (EINVAL);
 8039294:	00800584 	movi	r2,22
 8039298:	00019506 	br	80398f0 <tcp_usrreq+0x6a4>
   }

   if (inp)
 803929c:	e0bffc17 	ldw	r2,-16(fp)
 80392a0:	10000426 	beq	r2,zero,80392b4 <tcp_usrreq+0x68>
      tp = intotcpcb(inp);
 80392a4:	e0bffc17 	ldw	r2,-16(fp)
 80392a8:	10800917 	ldw	r2,36(r2)
 80392ac:	e0bfff15 	stw	r2,-4(fp)
 80392b0:	00000706 	br	80392d0 <tcp_usrreq+0x84>
   else  /* inp and tp not set, make sure this is OK: */
   { 
      if (req == PRU_ATTACH)
 80392b4:	e0bffd17 	ldw	r2,-12(fp)
 80392b8:	1000021e 	bne	r2,zero,80392c4 <tcp_usrreq+0x78>
         tp = NULL;  /* stifle compiler warnings about using unassigned tp*/
 80392bc:	e03fff15 	stw	zero,-4(fp)
 80392c0:	00000306 	br	80392d0 <tcp_usrreq+0x84>
      else
      {
         dtrap(); /* programming error? */
 80392c4:	802c3fc0 	call	802c3fc <dtrap>
         return EINVAL;
 80392c8:	00800584 	movi	r2,22
 80392cc:	00018806 	br	80398f0 <tcp_usrreq+0x6a4>
 80392d0:	e0bffd17 	ldw	r2,-12(fp)
 80392d4:	10800528 	cmpgeui	r2,r2,20
 80392d8:	10016f1e 	bne	r2,zero,8039898 <tcp_usrreq+0x64c>
 80392dc:	e0bffd17 	ldw	r2,-12(fp)
 80392e0:	100690ba 	slli	r3,r2,2
 80392e4:	00820134 	movhi	r2,2052
 80392e8:	1885883a 	add	r2,r3,r2
 80392ec:	10a4bd17 	ldw	r2,-27916(r2)
 80392f0:	1000683a 	jmp	r2
 80392f4:	08039344 	addi	zero,at,3661
 80392f8:	080393a4 	muli	zero,at,3662
 80392fc:	080393cc 	andi	zero,at,3663
 8039300:	08039404 	addi	zero,at,3664
 8039304:	0803943c 	xorhi	zero,at,3664
 8039308:	08039584 	addi	zero,at,3670
 803930c:	08039578 	rdprs	zero,at,3669
 8039310:	0803962c 	andhi	zero,at,3672
 8039314:	08039658 	cmpnei	zero,at,3673
 8039318:	08039664 	muli	zero,at,3673
 803931c:	080396c0 	call	80396c <OSCtxSw_SWITCH_PC+0x80392c>
 8039320:	08039898 	cmpnei	zero,at,3682
 8039324:	080396d0 	cmplti	zero,at,3675
 8039328:	080396dc 	xori	zero,at,3675
 803932c:	08039794 	ori	zero,at,3678
 8039330:	08039864 	muli	zero,at,3681
 8039334:	08039874 	orhi	zero,at,3681
 8039338:	0803956c 	andhi	zero,at,3669
 803933c:	08039898 	cmpnei	zero,at,3682
 8039340:	08039884 	addi	zero,at,3682
   /*
    * TCP attaches to socket via PRU_ATTACH, reserving space,
    * and an internet control block.
    */
   case PRU_ATTACH:
      if (inp) 
 8039344:	e0bffc17 	ldw	r2,-16(fp)
 8039348:	10000326 	beq	r2,zero,8039358 <tcp_usrreq+0x10c>
      {
         error = EISCONN;
 803934c:	00801fc4 	movi	r2,127
 8039350:	e0bffe15 	stw	r2,-8(fp)
         break;
 8039354:	00016506 	br	80398ec <tcp_usrreq+0x6a0>
      }
      error = tcp_attach(so);
 8039358:	e13ffa17 	ldw	r4,-24(fp)
 803935c:	80399040 	call	8039904 <tcp_attach>
 8039360:	e0bffe15 	stw	r2,-8(fp)
      if (error)
 8039364:	e0bffe17 	ldw	r2,-8(fp)
 8039368:	10014f1e 	bne	r2,zero,80398a8 <tcp_usrreq+0x65c>
         break;
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 803936c:	e0bffa17 	ldw	r2,-24(fp)
 8039370:	10800417 	ldw	r2,16(r2)
 8039374:	1080200c 	andi	r2,r2,128
 8039378:	10014d26 	beq	r2,zero,80398b0 <tcp_usrreq+0x664>
 803937c:	e0bffa17 	ldw	r2,-24(fp)
 8039380:	1080080b 	ldhu	r2,32(r2)
 8039384:	10bfffcc 	andi	r2,r2,65535
 8039388:	10a0001c 	xori	r2,r2,32768
 803938c:	10a00004 	addi	r2,r2,-32768
 8039390:	1001471e 	bne	r2,zero,80398b0 <tcp_usrreq+0x664>
         so->so_linger = TCP_LINGERTIME;
 8039394:	e0bffa17 	ldw	r2,-24(fp)
 8039398:	00c01e04 	movi	r3,120
 803939c:	10c0080d 	sth	r3,32(r2)
#ifdef   DO_TCPTRACE
      SETTP(tp, sototcpcb(so));
#endif
      break;
 80393a0:	00014306 	br	80398b0 <tcp_usrreq+0x664>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
 80393a4:	e0bfff17 	ldw	r2,-4(fp)
 80393a8:	10800217 	ldw	r2,8(r2)
 80393ac:	10800090 	cmplti	r2,r2,2
 80393b0:	1000031e 	bne	r2,zero,80393c0 <tcp_usrreq+0x174>
         SETTP(tp, tcp_disconnect(tp));
 80393b4:	e13fff17 	ldw	r4,-4(fp)
 80393b8:	8039a1c0 	call	8039a1c <tcp_disconnect>
      else
         SETTP(tp, tcp_close(tp));
      break;
 80393bc:	00014b06 	br	80398ec <tcp_usrreq+0x6a0>
         SETTP(tp, tcp_close(tp));
 80393c0:	e13fff17 	ldw	r4,-4(fp)
 80393c4:	80389100 	call	8038910 <tcp_close>
      break;
 80393c8:	00014806 	br	80398ec <tcp_usrreq+0x6a0>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
 80393cc:	e0bffc17 	ldw	r2,-16(fp)
 80393d0:	10800817 	ldw	r2,32(r2)
 80393d4:	10800517 	ldw	r2,20(r2)
 80393d8:	10800098 	cmpnei	r2,r2,2
 80393dc:	1000051e 	bne	r2,zero,80393f4 <tcp_usrreq+0x1a8>
      {
         error = in_pcbbind(inp, nam);
 80393e0:	e17ff817 	ldw	r5,-32(fp)
 80393e4:	e13ffc17 	ldw	r4,-16(fp)
 80393e8:	8046b480 	call	8046b48 <in_pcbbind>
 80393ec:	e0bffe15 	stw	r2,-8(fp)
         break;
 80393f0:	00013e06 	br	80398ec <tcp_usrreq+0x6a0>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
 80393f4:	802c3fc0 	call	802c3fc <dtrap>
      error = EINVAL;
 80393f8:	00800584 	movi	r2,22
 80393fc:	e0bffe15 	stw	r2,-8(fp)
      break;
 8039400:	00013a06 	br	80398ec <tcp_usrreq+0x6a0>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
 8039404:	e0bffc17 	ldw	r2,-16(fp)
 8039408:	1080078b 	ldhu	r2,30(r2)
 803940c:	10bfffcc 	andi	r2,r2,65535
 8039410:	1000041e 	bne	r2,zero,8039424 <tcp_usrreq+0x1d8>
         error = in_pcbbind(inp, (struct mbuf *)0);
 8039414:	000b883a 	mov	r5,zero
 8039418:	e13ffc17 	ldw	r4,-16(fp)
 803941c:	8046b480 	call	8046b48 <in_pcbbind>
 8039420:	e0bffe15 	stw	r2,-8(fp)
      if (error == 0)
 8039424:	e0bffe17 	ldw	r2,-8(fp)
 8039428:	1001231e 	bne	r2,zero,80398b8 <tcp_usrreq+0x66c>
         tp->t_state = TCPS_LISTEN;
 803942c:	e0bfff17 	ldw	r2,-4(fp)
 8039430:	00c00044 	movi	r3,1
 8039434:	10c00215 	stw	r3,8(r2)
      break;
 8039438:	00011f06 	br	80398b8 <tcp_usrreq+0x66c>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
 803943c:	e0bffc17 	ldw	r2,-16(fp)
 8039440:	1080078b 	ldhu	r2,30(r2)
 8039444:	10bfffcc 	andi	r2,r2,65535
 8039448:	1000061e 	bne	r2,zero,8039464 <tcp_usrreq+0x218>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
 803944c:	000b883a 	mov	r5,zero
 8039450:	e13ffc17 	ldw	r4,-16(fp)
 8039454:	8046b480 	call	8046b48 <in_pcbbind>
 8039458:	e0bffe15 	stw	r2,-8(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
 803945c:	e0bffe17 	ldw	r2,-8(fp)
 8039460:	1001171e 	bne	r2,zero,80398c0 <tcp_usrreq+0x674>
            break;
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
 8039464:	e17ff817 	ldw	r5,-32(fp)
 8039468:	e13ffc17 	ldw	r4,-16(fp)
 803946c:	8046d580 	call	8046d58 <in_pcbconnect>
 8039470:	e0bffe15 	stw	r2,-8(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
 8039474:	e0bffe17 	ldw	r2,-8(fp)
 8039478:	1001131e 	bne	r2,zero,80398c8 <tcp_usrreq+0x67c>
         break;
      tp->t_template = tcp_template(tp);
 803947c:	e13fff17 	ldw	r4,-4(fp)
 8039480:	803826c0 	call	803826c <tcp_template>
 8039484:	1007883a 	mov	r3,r2
 8039488:	e0bfff17 	ldw	r2,-4(fp)
 803948c:	10c00c15 	stw	r3,48(r2)
      if (tp->t_template == 0) 
 8039490:	e0bfff17 	ldw	r2,-4(fp)
 8039494:	10800c17 	ldw	r2,48(r2)
 8039498:	1000051e 	bne	r2,zero,80394b0 <tcp_usrreq+0x264>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
 803949c:	e13ffc17 	ldw	r4,-16(fp)
 80394a0:	8046f380 	call	8046f38 <in_pcbdisconnect>
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
         ip6_pcbdisconnect(inp);
#endif   /* end v6 only */

         error = ENOBUFS;
 80394a4:	00801a44 	movi	r2,105
 80394a8:	e0bffe15 	stw	r2,-8(fp)
         break;
 80394ac:	00010f06 	br	80398ec <tcp_usrreq+0x6a0>
      }

      soisconnecting(so);
 80394b0:	e13ffa17 	ldw	r4,-24(fp)
 80394b4:	80329840 	call	8032984 <soisconnecting>
      tcpstat.tcps_connattempt++;
 80394b8:	008201b4 	movhi	r2,2054
 80394bc:	10bc4a17 	ldw	r2,-3800(r2)
 80394c0:	10c00044 	addi	r3,r2,1
 80394c4:	008201b4 	movhi	r2,2054
 80394c8:	10fc4a15 	stw	r3,-3800(r2)
      tp->t_state = TCPS_SYN_SENT;
 80394cc:	e0bfff17 	ldw	r2,-4(fp)
 80394d0:	00c00084 	movi	r3,2
 80394d4:	10c00215 	stw	r3,8(r2)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 80394d8:	e0bfff17 	ldw	r2,-4(fp)
 80394dc:	00c02584 	movi	r3,150
 80394e0:	10c00515 	stw	r3,20(r2)
      tp->iss = tcp_iss; 
 80394e4:	d0e0b017 	ldw	r3,-32064(gp)
 80394e8:	e0bfff17 	ldw	r2,-4(fp)
 80394ec:	10c01315 	stw	r3,76(r2)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
 80394f0:	d0e0b017 	ldw	r3,-32064(gp)
 80394f4:	00be9fd4 	movui	r2,64127
 80394f8:	1885883a 	add	r2,r3,r2
 80394fc:	d0a0b015 	stw	r2,-32064(gp)
      tcp_sendseqinit(tp);
 8039500:	e0bfff17 	ldw	r2,-4(fp)
 8039504:	10c01317 	ldw	r3,76(r2)
 8039508:	e0bfff17 	ldw	r2,-4(fp)
 803950c:	10c01015 	stw	r3,64(r2)
 8039510:	e0bfff17 	ldw	r2,-4(fp)
 8039514:	10c01017 	ldw	r3,64(r2)
 8039518:	e0bfff17 	ldw	r2,-4(fp)
 803951c:	10c01a15 	stw	r3,104(r2)
 8039520:	e0bfff17 	ldw	r2,-4(fp)
 8039524:	10c01a17 	ldw	r3,104(r2)
 8039528:	e0bfff17 	ldw	r2,-4(fp)
 803952c:	10c00f15 	stw	r3,60(r2)
 8039530:	e0bfff17 	ldw	r2,-4(fp)
 8039534:	10c00f17 	ldw	r3,60(r2)
 8039538:	e0bfff17 	ldw	r2,-4(fp)
 803953c:	10c00e15 	stw	r3,56(r2)
      error = tcp_output(tp);
 8039540:	e13fff17 	ldw	r4,-4(fp)
 8039544:	80370c40 	call	80370c4 <tcp_output>
 8039548:	e0bffe15 	stw	r2,-8(fp)
      if (!error)
 803954c:	e0bffe17 	ldw	r2,-8(fp)
 8039550:	1000df1e 	bne	r2,zero,80398d0 <tcp_usrreq+0x684>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
 8039554:	008201b4 	movhi	r2,2054
 8039558:	10bc2017 	ldw	r2,-3968(r2)
 803955c:	10c00044 	addi	r3,r2,1
 8039560:	008201b4 	movhi	r2,2054
 8039564:	10fc2015 	stw	r3,-3968(r2)
      break;
 8039568:	0000d906 	br	80398d0 <tcp_usrreq+0x684>

   /*
    * Create a TCP connection between two sockets.
    */
   case PRU_CONNECT2:
      error = EOPNOTSUPP;
 803956c:	008017c4 	movi	r2,95
 8039570:	e0bffe15 	stw	r2,-8(fp)
      break;
 8039574:	0000dd06 	br	80398ec <tcp_usrreq+0x6a0>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
 8039578:	e13fff17 	ldw	r4,-4(fp)
 803957c:	8039a1c0 	call	8039a1c <tcp_disconnect>
      break;
 8039580:	0000da06 	br	80398ec <tcp_usrreq+0x6a0>
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 8039584:	e0bff817 	ldw	r2,-32(fp)
 8039588:	10800317 	ldw	r2,12(r2)
 803958c:	e0bffb15 	stw	r2,-20(fp)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
 8039590:	e0bffa17 	ldw	r2,-24(fp)
 8039594:	10800517 	ldw	r2,20(r2)
 8039598:	10800098 	cmpnei	r2,r2,2
 803959c:	10000e1e 	bne	r2,zero,80395d8 <tcp_usrreq+0x38c>
         {
            nam->m_len = sizeof (struct sockaddr_in);
 80395a0:	e0bff817 	ldw	r2,-32(fp)
 80395a4:	00c00404 	movi	r3,16
 80395a8:	10c00215 	stw	r3,8(r2)
            sin->sin_family = AF_INET;
 80395ac:	e0bffb17 	ldw	r2,-20(fp)
 80395b0:	00c00084 	movi	r3,2
 80395b4:	10c0000d 	sth	r3,0(r2)
            sin->sin_port = inp->inp_fport;
 80395b8:	e0bffc17 	ldw	r2,-16(fp)
 80395bc:	10c0070b 	ldhu	r3,28(r2)
 80395c0:	e0bffb17 	ldw	r2,-20(fp)
 80395c4:	10c0008d 	sth	r3,2(r2)
            sin->sin_addr = inp->inp_faddr;
 80395c8:	e0bffb17 	ldw	r2,-20(fp)
 80395cc:	e0fffc17 	ldw	r3,-16(fp)
 80395d0:	18c00317 	ldw	r3,12(r3)
 80395d4:	10c00115 	stw	r3,4(r2)
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
 80395d8:	e0bffa17 	ldw	r2,-24(fp)
 80395dc:	10800517 	ldw	r2,20(r2)
 80395e0:	108000a0 	cmpeqi	r2,r2,2
 80395e4:	10000b1e 	bne	r2,zero,8039614 <tcp_usrreq+0x3c8>
              !(so->so_domain == AF_INET6)
 80395e8:	e0bffa17 	ldw	r2,-24(fp)
 80395ec:	10800517 	ldw	r2,20(r2)
         if ( !(so->so_domain == AF_INET) &&
 80395f0:	108000e0 	cmpeqi	r2,r2,3
 80395f4:	1000071e 	bne	r2,zero,8039614 <tcp_usrreq+0x3c8>
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
 80395f8:	e0bffa17 	ldw	r2,-24(fp)
 80395fc:	10800517 	ldw	r2,20(r2)
 8039600:	100b883a 	mov	r5,r2
 8039604:	01020174 	movhi	r4,2053
 8039608:	210c4b04 	addi	r4,r4,12588
 803960c:	800325c0 	call	800325c <printf>
            dtrap();
 8039610:	802c3fc0 	call	802c3fc <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
 8039614:	008201b4 	movhi	r2,2054
 8039618:	10bc2117 	ldw	r2,-3964(r2)
 803961c:	10c00044 	addi	r3,r2,1
 8039620:	008201b4 	movhi	r2,2054
 8039624:	10fc2115 	stw	r3,-3964(r2)
         break;
 8039628:	0000b006 	br	80398ec <tcp_usrreq+0x6a0>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
 803962c:	e13ffa17 	ldw	r4,-24(fp)
 8039630:	80330000 	call	8033000 <socantsendmore>
      tp = tcp_usrclosed(tp);
 8039634:	e13fff17 	ldw	r4,-4(fp)
 8039638:	8039ae80 	call	8039ae8 <tcp_usrclosed>
 803963c:	e0bfff15 	stw	r2,-4(fp)
      if (tp)
 8039640:	e0bfff17 	ldw	r2,-4(fp)
 8039644:	1000a426 	beq	r2,zero,80398d8 <tcp_usrreq+0x68c>
         error = tcp_output(tp);
 8039648:	e13fff17 	ldw	r4,-4(fp)
 803964c:	80370c40 	call	80370c4 <tcp_output>
 8039650:	e0bffe15 	stw	r2,-8(fp)
      break;
 8039654:	0000a006 	br	80398d8 <tcp_usrreq+0x68c>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
 8039658:	e13fff17 	ldw	r4,-4(fp)
 803965c:	80370c40 	call	80370c4 <tcp_output>
      break;
 8039660:	0000a206 	br	80398ec <tcp_usrreq+0x6a0>
   /*
    * Do a send by putting data in output queue and updating urgent
    * marker if URG set.  Possibly send more data.
    */
   case PRU_SEND:
      if (so->so_pcb == NULL)
 8039664:	e0bffa17 	ldw	r2,-24(fp)
 8039668:	10800117 	ldw	r2,4(r2)
 803966c:	1000031e 	bne	r2,zero,803967c <tcp_usrreq+0x430>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 8039670:	00800804 	movi	r2,32
 8039674:	e0bffe15 	stw	r2,-8(fp)
         break;
 8039678:	00009c06 	br	80398ec <tcp_usrreq+0x6a0>
      }
      sbappend(&so->so_snd, m);
 803967c:	e0bffa17 	ldw	r2,-24(fp)
 8039680:	10801204 	addi	r2,r2,72
 8039684:	e17ff917 	ldw	r5,-28(fp)
 8039688:	1009883a 	mov	r4,r2
 803968c:	80333080 	call	8033308 <sbappend>
      error = tcp_output(tp);
 8039690:	e13fff17 	ldw	r4,-4(fp)
 8039694:	80370c40 	call	80370c4 <tcp_output>
 8039698:	e0bffe15 	stw	r2,-8(fp)
      if (error == ENOBUFS)
 803969c:	e0bffe17 	ldw	r2,-8(fp)
 80396a0:	10801a58 	cmpnei	r2,r2,105
 80396a4:	10008e1e 	bne	r2,zero,80398e0 <tcp_usrreq+0x694>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 80396a8:	e0bffa17 	ldw	r2,-24(fp)
 80396ac:	10801204 	addi	r2,r2,72
 80396b0:	e17ff917 	ldw	r5,-28(fp)
 80396b4:	1009883a 	mov	r4,r2
 80396b8:	8033a780 	call	8033a78 <sbdropend>
      break;
 80396bc:	00008806 	br	80398e0 <tcp_usrreq+0x694>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
 80396c0:	01401c44 	movi	r5,113
 80396c4:	e13fff17 	ldw	r4,-4(fp)
 80396c8:	80388740 	call	8038874 <tcp_drop>
      break;
 80396cc:	00008706 	br	80398ec <tcp_usrreq+0x6a0>

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
 80396d0:	802c3fc0 	call	802c3fc <dtrap>
      return (0);
 80396d4:	0005883a 	mov	r2,zero
 80396d8:	00008506 	br	80398f0 <tcp_usrreq+0x6a4>

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
 80396dc:	e0bffa17 	ldw	r2,-24(fp)
 80396e0:	10801a17 	ldw	r2,104(r2)
 80396e4:	1000051e 	bne	r2,zero,80396fc <tcp_usrreq+0x4b0>
          (so->so_state & SS_RCVATMARK) == 0) ||
 80396e8:	e0bffa17 	ldw	r2,-24(fp)
 80396ec:	1080088b 	ldhu	r2,34(r2)
 80396f0:	10bfffcc 	andi	r2,r2,65535
 80396f4:	1080100c 	andi	r2,r2,64
      if ((so->so_oobmark == 0 &&
 80396f8:	10000926 	beq	r2,zero,8039720 <tcp_usrreq+0x4d4>
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
 80396fc:	e0bffa17 	ldw	r2,-24(fp)
 8039700:	10800417 	ldw	r2,16(r2)
 8039704:	1080400c 	andi	r2,r2,256
          (so->so_state & SS_RCVATMARK) == 0) ||
 8039708:	1000051e 	bne	r2,zero,8039720 <tcp_usrreq+0x4d4>
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
 803970c:	e0bfff17 	ldw	r2,-4(fp)
 8039710:	10802403 	ldbu	r2,144(r2)
 8039714:	10803fcc 	andi	r2,r2,255
 8039718:	1080008c 	andi	r2,r2,2
       so->so_options & SO_OOBINLINE ||
 803971c:	10000326 	beq	r2,zero,803972c <tcp_usrreq+0x4e0>
       {
         error = EINVAL;
 8039720:	00800584 	movi	r2,22
 8039724:	e0bffe15 	stw	r2,-8(fp)
         break;
 8039728:	00007006 	br	80398ec <tcp_usrreq+0x6a0>
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
 803972c:	e0bfff17 	ldw	r2,-4(fp)
 8039730:	10802403 	ldbu	r2,144(r2)
 8039734:	10803fcc 	andi	r2,r2,255
 8039738:	1080004c 	andi	r2,r2,1
 803973c:	1000031e 	bne	r2,zero,803974c <tcp_usrreq+0x500>
      {
         error = EWOULDBLOCK;
 8039740:	008002c4 	movi	r2,11
 8039744:	e0bffe15 	stw	r2,-8(fp)
         break;
 8039748:	00006806 	br	80398ec <tcp_usrreq+0x6a0>
      }
      m->m_len = 1;
 803974c:	e0bff917 	ldw	r2,-28(fp)
 8039750:	00c00044 	movi	r3,1
 8039754:	10c00215 	stw	r3,8(r2)
      *mtod(m, char *) = tp->t_iobc;
 8039758:	e0bff917 	ldw	r2,-28(fp)
 803975c:	10800317 	ldw	r2,12(r2)
 8039760:	e0ffff17 	ldw	r3,-4(fp)
 8039764:	18c02443 	ldbu	r3,145(r3)
 8039768:	10c00005 	stb	r3,0(r2)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
 803976c:	e0bff817 	ldw	r2,-32(fp)
 8039770:	1080008c 	andi	r2,r2,2
 8039774:	10005c1e 	bne	r2,zero,80398e8 <tcp_usrreq+0x69c>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 8039778:	e0bfff17 	ldw	r2,-4(fp)
 803977c:	10802403 	ldbu	r2,144(r2)
 8039780:	108000dc 	xori	r2,r2,3
 8039784:	1007883a 	mov	r3,r2
 8039788:	e0bfff17 	ldw	r2,-4(fp)
 803978c:	10c02405 	stb	r3,144(r2)
      break;
 8039790:	00005506 	br	80398e8 <tcp_usrreq+0x69c>

   case PRU_SENDOOB:
      if (so->so_pcb == NULL)
 8039794:	e0bffa17 	ldw	r2,-24(fp)
 8039798:	10800117 	ldw	r2,4(r2)
 803979c:	1000031e 	bne	r2,zero,80397ac <tcp_usrreq+0x560>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 80397a0:	00800804 	movi	r2,32
 80397a4:	e0bffe15 	stw	r2,-8(fp)
         break;
 80397a8:	00005006 	br	80398ec <tcp_usrreq+0x6a0>
      }
      if (sbspace(&so->so_snd) == 0) 
 80397ac:	e0bffa17 	ldw	r2,-24(fp)
 80397b0:	10801317 	ldw	r2,76(r2)
 80397b4:	1007883a 	mov	r3,r2
 80397b8:	e0bffa17 	ldw	r2,-24(fp)
 80397bc:	10801217 	ldw	r2,72(r2)
 80397c0:	1885c83a 	sub	r2,r3,r2
 80397c4:	10000516 	blt	r2,zero,80397dc <tcp_usrreq+0x590>
 80397c8:	e0bffa17 	ldw	r2,-24(fp)
 80397cc:	10c01317 	ldw	r3,76(r2)
 80397d0:	e0bffa17 	ldw	r2,-24(fp)
 80397d4:	10801217 	ldw	r2,72(r2)
 80397d8:	1880051e 	bne	r3,r2,80397f0 <tcp_usrreq+0x5a4>
      {
         m_freem(m);
 80397dc:	e13ff917 	ldw	r4,-28(fp)
 80397e0:	802d4340 	call	802d434 <m_freem>
         error = ENOBUFS;
 80397e4:	00801a44 	movi	r2,105
 80397e8:	e0bffe15 	stw	r2,-8(fp)
         break;
 80397ec:	00003f06 	br	80398ec <tcp_usrreq+0x6a0>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
 80397f0:	e0bffa17 	ldw	r2,-24(fp)
 80397f4:	10801204 	addi	r2,r2,72
 80397f8:	e17ff917 	ldw	r5,-28(fp)
 80397fc:	1009883a 	mov	r4,r2
 8039800:	80333080 	call	8033308 <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
 8039804:	e0bfff17 	ldw	r2,-4(fp)
 8039808:	10c00e17 	ldw	r3,56(r2)
 803980c:	e0bffa17 	ldw	r2,-24(fp)
 8039810:	10801217 	ldw	r2,72(r2)
 8039814:	1887883a 	add	r3,r3,r2
 8039818:	e0bfff17 	ldw	r2,-4(fp)
 803981c:	10c01015 	stw	r3,64(r2)
      tp->t_force = 1;
 8039820:	e0bfff17 	ldw	r2,-4(fp)
 8039824:	00c00044 	movi	r3,1
 8039828:	10c00a85 	stb	r3,42(r2)
      error = tcp_output(tp);
 803982c:	e13fff17 	ldw	r4,-4(fp)
 8039830:	80370c40 	call	80370c4 <tcp_output>
 8039834:	e0bffe15 	stw	r2,-8(fp)
      if (error == ENOBUFS)
 8039838:	e0bffe17 	ldw	r2,-8(fp)
 803983c:	10801a58 	cmpnei	r2,r2,105
 8039840:	1000051e 	bne	r2,zero,8039858 <tcp_usrreq+0x60c>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 8039844:	e0bffa17 	ldw	r2,-24(fp)
 8039848:	10801204 	addi	r2,r2,72
 803984c:	e17ff917 	ldw	r5,-28(fp)
 8039850:	1009883a 	mov	r4,r2
 8039854:	8033a780 	call	8033a78 <sbdropend>
      tp->t_force = 0;
 8039858:	e0bfff17 	ldw	r2,-4(fp)
 803985c:	10000a85 	stb	zero,42(r2)
      break;
 8039860:	00002206 	br	80398ec <tcp_usrreq+0x6a0>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
 8039864:	e17ff817 	ldw	r5,-32(fp)
 8039868:	e13ffc17 	ldw	r4,-16(fp)
 803986c:	8046f940 	call	8046f94 <in_setsockaddr>
         in_setsockaddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setsockaddr(inp, nam);
#endif
      break;         
 8039870:	00001e06 	br	80398ec <tcp_usrreq+0x6a0>

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
 8039874:	e17ff817 	ldw	r5,-32(fp)
 8039878:	e13ffc17 	ldw	r4,-16(fp)
 803987c:	80470180 	call	8047018 <in_setpeeraddr>
         in_setpeeraddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setpeeraddr(inp, nam);
#endif
      break;
 8039880:	00001a06 	br	80398ec <tcp_usrreq+0x6a0>

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
 8039884:	e0bff817 	ldw	r2,-32(fp)
 8039888:	100b883a 	mov	r5,r2
 803988c:	e13fff17 	ldw	r4,-4(fp)
 8039890:	8038dec0 	call	8038dec <tcp_timers>
#ifdef DO_TCPTRACE
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;
 8039894:	00001506 	br	80398ec <tcp_usrreq+0x6a0>

      default:
      panic("tcp_usrreq");
 8039898:	01020174 	movhi	r4,2053
 803989c:	210c5304 	addi	r4,r4,12620
 80398a0:	8027fe00 	call	8027fe0 <panic>
 80398a4:	00001106 	br	80398ec <tcp_usrreq+0x6a0>
         break;
 80398a8:	0001883a 	nop
 80398ac:	00000f06 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398b0:	0001883a 	nop
 80398b4:	00000d06 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398b8:	0001883a 	nop
 80398bc:	00000b06 	br	80398ec <tcp_usrreq+0x6a0>
            break;
 80398c0:	0001883a 	nop
 80398c4:	00000906 	br	80398ec <tcp_usrreq+0x6a0>
         break;
 80398c8:	0001883a 	nop
 80398cc:	00000706 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398d0:	0001883a 	nop
 80398d4:	00000506 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398d8:	0001883a 	nop
 80398dc:	00000306 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398e0:	0001883a 	nop
 80398e4:	00000106 	br	80398ec <tcp_usrreq+0x6a0>
      break;
 80398e8:	0001883a 	nop
#ifdef DO_TCPTRACE
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
 80398ec:	e0bffe17 	ldw	r2,-8(fp)
}
 80398f0:	e037883a 	mov	sp,fp
 80398f4:	dfc00117 	ldw	ra,4(sp)
 80398f8:	df000017 	ldw	fp,0(sp)
 80398fc:	dec00204 	addi	sp,sp,8
 8039900:	f800283a 	ret

08039904 <tcp_attach>:
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
 8039904:	defff904 	addi	sp,sp,-28
 8039908:	dfc00615 	stw	ra,24(sp)
 803990c:	df000515 	stw	fp,20(sp)
 8039910:	df000504 	addi	fp,sp,20
 8039914:	e13ffb15 	stw	r4,-20(fp)
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
 8039918:	e0bffb17 	ldw	r2,-20(fp)
 803991c:	10801317 	ldw	r2,76(r2)
 8039920:	10000326 	beq	r2,zero,8039930 <tcp_attach+0x2c>
 8039924:	e0bffb17 	ldw	r2,-20(fp)
 8039928:	10800b17 	ldw	r2,44(r2)
 803992c:	10000b1e 	bne	r2,zero,803995c <tcp_attach+0x58>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
 8039930:	d0a03c17 	ldw	r2,-32528(gp)
 8039934:	d0e03d17 	ldw	r3,-32524(gp)
 8039938:	180d883a 	mov	r6,r3
 803993c:	100b883a 	mov	r5,r2
 8039940:	e13ffb17 	ldw	r4,-20(fp)
 8039944:	80331e40 	call	80331e4 <soreserve>
 8039948:	e0bfff15 	stw	r2,-4(fp)
      if (error)
 803994c:	e0bfff17 	ldw	r2,-4(fp)
 8039950:	10000226 	beq	r2,zero,803995c <tcp_attach+0x58>
         return (error);
 8039954:	e0bfff17 	ldw	r2,-4(fp)
 8039958:	00002b06 	br	8039a08 <tcp_attach+0x104>
   }
   error = in_pcballoc(so, &tcb);
 803995c:	014201b4 	movhi	r5,2054
 8039960:	297c3f04 	addi	r5,r5,-3844
 8039964:	e13ffb17 	ldw	r4,-20(fp)
 8039968:	8046a680 	call	8046a68 <in_pcballoc>
 803996c:	e0bfff15 	stw	r2,-4(fp)
   if (error)
 8039970:	e0bfff17 	ldw	r2,-4(fp)
 8039974:	10000226 	beq	r2,zero,8039980 <tcp_attach+0x7c>
      return (error);
 8039978:	e0bfff17 	ldw	r2,-4(fp)
 803997c:	00002206 	br	8039a08 <tcp_attach+0x104>
   inp = sotoinpcb(so);
 8039980:	e0bffb17 	ldw	r2,-20(fp)
 8039984:	10800117 	ldw	r2,4(r2)
 8039988:	e0bffe15 	stw	r2,-8(fp)
   tp = tcp_newtcpcb(inp);
 803998c:	e13ffe17 	ldw	r4,-8(fp)
 8039990:	80387680 	call	8038768 <tcp_newtcpcb>
 8039994:	e0bffd15 	stw	r2,-12(fp)
   if (tp == 0) 
 8039998:	e0bffd17 	ldw	r2,-12(fp)
 803999c:	1000171e 	bne	r2,zero,80399fc <tcp_attach+0xf8>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
 80399a0:	e0bffb17 	ldw	r2,-20(fp)
 80399a4:	1080088b 	ldhu	r2,34(r2)
 80399a8:	10bfffcc 	andi	r2,r2,65535
 80399ac:	1080004c 	andi	r2,r2,1
 80399b0:	e0bffc15 	stw	r2,-16(fp)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
 80399b4:	e0bffb17 	ldw	r2,-20(fp)
 80399b8:	10c0088b 	ldhu	r3,34(r2)
 80399bc:	00bfff84 	movi	r2,-2
 80399c0:	1884703a 	and	r2,r3,r2
 80399c4:	1007883a 	mov	r3,r2
 80399c8:	e0bffb17 	ldw	r2,-20(fp)
 80399cc:	10c0088d 	sth	r3,34(r2)
      in_pcbdetach(inp);
 80399d0:	e13ffe17 	ldw	r4,-8(fp)
 80399d4:	8046af00 	call	8046af0 <in_pcbdetach>
      so->so_state |= nofd;
 80399d8:	e0bffb17 	ldw	r2,-20(fp)
 80399dc:	1080088b 	ldhu	r2,34(r2)
 80399e0:	e0fffc17 	ldw	r3,-16(fp)
 80399e4:	10c4b03a 	or	r2,r2,r3
 80399e8:	1007883a 	mov	r3,r2
 80399ec:	e0bffb17 	ldw	r2,-20(fp)
 80399f0:	10c0088d 	sth	r3,34(r2)
      return (ENOBUFS);
 80399f4:	00801a44 	movi	r2,105
 80399f8:	00000306 	br	8039a08 <tcp_attach+0x104>
   }
   tp->t_state = TCPS_CLOSED;
 80399fc:	e0bffd17 	ldw	r2,-12(fp)
 8039a00:	10000215 	stw	zero,8(r2)
   return (0);
 8039a04:	0005883a 	mov	r2,zero
}
 8039a08:	e037883a 	mov	sp,fp
 8039a0c:	dfc00117 	ldw	ra,4(sp)
 8039a10:	df000017 	ldw	fp,0(sp)
 8039a14:	dec00204 	addi	sp,sp,8
 8039a18:	f800283a 	ret

08039a1c <tcp_disconnect>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
 8039a1c:	defffc04 	addi	sp,sp,-16
 8039a20:	dfc00315 	stw	ra,12(sp)
 8039a24:	df000215 	stw	fp,8(sp)
 8039a28:	df000204 	addi	fp,sp,8
 8039a2c:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 8039a30:	e0bffe17 	ldw	r2,-8(fp)
 8039a34:	10800d17 	ldw	r2,52(r2)
 8039a38:	10800817 	ldw	r2,32(r2)
 8039a3c:	e0bfff15 	stw	r2,-4(fp)

   if (tp->t_state < TCPS_ESTABLISHED)
 8039a40:	e0bffe17 	ldw	r2,-8(fp)
 8039a44:	10800217 	ldw	r2,8(r2)
 8039a48:	10800108 	cmpgei	r2,r2,4
 8039a4c:	1000041e 	bne	r2,zero,8039a60 <tcp_disconnect+0x44>
      tp = tcp_close(tp);
 8039a50:	e13ffe17 	ldw	r4,-8(fp)
 8039a54:	80389100 	call	8038910 <tcp_close>
 8039a58:	e0bffe15 	stw	r2,-8(fp)
 8039a5c:	00001c06 	br	8039ad0 <tcp_disconnect+0xb4>
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 8039a60:	e0bfff17 	ldw	r2,-4(fp)
 8039a64:	10800417 	ldw	r2,16(r2)
 8039a68:	1080200c 	andi	r2,r2,128
 8039a6c:	10000b26 	beq	r2,zero,8039a9c <tcp_disconnect+0x80>
 8039a70:	e0bfff17 	ldw	r2,-4(fp)
 8039a74:	1080080b 	ldhu	r2,32(r2)
 8039a78:	10bfffcc 	andi	r2,r2,65535
 8039a7c:	10a0001c 	xori	r2,r2,32768
 8039a80:	10a00004 	addi	r2,r2,-32768
 8039a84:	1000051e 	bne	r2,zero,8039a9c <tcp_disconnect+0x80>
      tp = tcp_drop(tp, 0);
 8039a88:	000b883a 	mov	r5,zero
 8039a8c:	e13ffe17 	ldw	r4,-8(fp)
 8039a90:	80388740 	call	8038874 <tcp_drop>
 8039a94:	e0bffe15 	stw	r2,-8(fp)
 8039a98:	00000d06 	br	8039ad0 <tcp_disconnect+0xb4>
   else 
   {
      soisdisconnecting(so);
 8039a9c:	e13fff17 	ldw	r4,-4(fp)
 8039aa0:	8032af80 	call	8032af8 <soisdisconnecting>
      sbflush(&so->so_rcv);
 8039aa4:	e0bfff17 	ldw	r2,-4(fp)
 8039aa8:	10800a04 	addi	r2,r2,40
 8039aac:	1009883a 	mov	r4,r2
 8039ab0:	803383c0 	call	803383c <sbflush>
      tp = tcp_usrclosed(tp);
 8039ab4:	e13ffe17 	ldw	r4,-8(fp)
 8039ab8:	8039ae80 	call	8039ae8 <tcp_usrclosed>
 8039abc:	e0bffe15 	stw	r2,-8(fp)
      if (tp)
 8039ac0:	e0bffe17 	ldw	r2,-8(fp)
 8039ac4:	10000226 	beq	r2,zero,8039ad0 <tcp_disconnect+0xb4>
         (void) tcp_output(tp);
 8039ac8:	e13ffe17 	ldw	r4,-8(fp)
 8039acc:	80370c40 	call	80370c4 <tcp_output>
   }
   return (tp);
 8039ad0:	e0bffe17 	ldw	r2,-8(fp)
}
 8039ad4:	e037883a 	mov	sp,fp
 8039ad8:	dfc00117 	ldw	ra,4(sp)
 8039adc:	df000017 	ldw	fp,0(sp)
 8039ae0:	dec00204 	addi	sp,sp,8
 8039ae4:	f800283a 	ret

08039ae8 <tcp_usrclosed>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
 8039ae8:	defffd04 	addi	sp,sp,-12
 8039aec:	dfc00215 	stw	ra,8(sp)
 8039af0:	df000115 	stw	fp,4(sp)
 8039af4:	df000104 	addi	fp,sp,4
 8039af8:	e13fff15 	stw	r4,-4(fp)

   switch (tp->t_state) 
 8039afc:	e0bfff17 	ldw	r2,-4(fp)
 8039b00:	10800217 	ldw	r2,8(r2)
 8039b04:	10c00160 	cmpeqi	r3,r2,5
 8039b08:	1800141e 	bne	r3,zero,8039b5c <tcp_usrclosed+0x74>
 8039b0c:	10c00188 	cmpgei	r3,r2,6
 8039b10:	1800161e 	bne	r3,zero,8039b6c <tcp_usrclosed+0x84>
 8039b14:	10c000c8 	cmpgei	r3,r2,3
 8039b18:	1800021e 	bne	r3,zero,8039b24 <tcp_usrclosed+0x3c>
 8039b1c:	1000050e 	bge	r2,zero,8039b34 <tcp_usrclosed+0x4c>
 8039b20:	00001206 	br	8039b6c <tcp_usrclosed+0x84>
 8039b24:	10bfff44 	addi	r2,r2,-3
 8039b28:	108000a8 	cmpgeui	r2,r2,2
 8039b2c:	10000f1e 	bne	r2,zero,8039b6c <tcp_usrclosed+0x84>
 8039b30:	00000606 	br	8039b4c <tcp_usrclosed+0x64>
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
 8039b34:	e0bfff17 	ldw	r2,-4(fp)
 8039b38:	10000215 	stw	zero,8(r2)
      tp = tcp_close(tp);
 8039b3c:	e13fff17 	ldw	r4,-4(fp)
 8039b40:	80389100 	call	8038910 <tcp_close>
 8039b44:	e0bfff15 	stw	r2,-4(fp)
      break;
 8039b48:	00000806 	br	8039b6c <tcp_usrclosed+0x84>

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
 8039b4c:	e0bfff17 	ldw	r2,-4(fp)
 8039b50:	00c00184 	movi	r3,6
 8039b54:	10c00215 	stw	r3,8(r2)
      break;
 8039b58:	00000406 	br	8039b6c <tcp_usrclosed+0x84>

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
 8039b5c:	e0bfff17 	ldw	r2,-4(fp)
 8039b60:	00c00204 	movi	r3,8
 8039b64:	10c00215 	stw	r3,8(r2)
      break;
 8039b68:	0001883a 	nop
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
 8039b6c:	e0bfff17 	ldw	r2,-4(fp)
 8039b70:	10000926 	beq	r2,zero,8039b98 <tcp_usrclosed+0xb0>
 8039b74:	e0bfff17 	ldw	r2,-4(fp)
 8039b78:	10800217 	ldw	r2,8(r2)
 8039b7c:	10800250 	cmplti	r2,r2,9
 8039b80:	1000051e 	bne	r2,zero,8039b98 <tcp_usrclosed+0xb0>
      soisdisconnected(tp->t_inpcb->inp_socket);
 8039b84:	e0bfff17 	ldw	r2,-4(fp)
 8039b88:	10800d17 	ldw	r2,52(r2)
 8039b8c:	10800817 	ldw	r2,32(r2)
 8039b90:	1009883a 	mov	r4,r2
 8039b94:	8032b900 	call	8032b90 <soisdisconnected>
   return (tp);
 8039b98:	e0bfff17 	ldw	r2,-4(fp)
}
 8039b9c:	e037883a 	mov	sp,fp
 8039ba0:	dfc00117 	ldw	ra,4(sp)
 8039ba4:	df000017 	ldw	fp,0(sp)
 8039ba8:	dec00204 	addi	sp,sp,8
 8039bac:	f800283a 	ret

08039bb0 <tcpinit>:
 * RETURNS: 0 if OK, else one of the ENP_ error codes
 */

int
tcpinit(void)
{
 8039bb0:	defffd04 	addi	sp,sp,-12
 8039bb4:	dfc00215 	stw	ra,8(sp)
 8039bb8:	df000115 	stw	fp,4(sp)
 8039bbc:	df000104 	addi	fp,sp,4
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
 8039bc0:	802daec0 	call	802daec <nptcp_init>
 8039bc4:	e0bfff15 	stw	r2,-4(fp)
   if (e)
 8039bc8:	e0bfff17 	ldw	r2,-4(fp)
 8039bcc:	10000226 	beq	r2,zero,8039bd8 <tcpinit+0x28>
      return e;
 8039bd0:	e0bfff17 	ldw	r2,-4(fp)
 8039bd4:	00000106 	br	8039bdc <tcpinit+0x2c>

   return 0;   /* good return */
 8039bd8:	0005883a 	mov	r2,zero
}
 8039bdc:	e037883a 	mov	sp,fp
 8039be0:	dfc00117 	ldw	ra,4(sp)
 8039be4:	df000017 	ldw	fp,0(sp)
 8039be8:	dec00204 	addi	sp,sp,8
 8039bec:	f800283a 	ret

08039bf0 <udp_lookup>:
 * RETURNS: 
 */

UDPCONN
udp_lookup(struct socket * so)
{
 8039bf0:	defffd04 	addi	sp,sp,-12
 8039bf4:	df000215 	stw	fp,8(sp)
 8039bf8:	df000204 	addi	fp,sp,8
 8039bfc:	e13ffe15 	stw	r4,-8(fp)
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8039c00:	d0a09717 	ldw	r2,-32164(gp)
 8039c04:	e0bfff15 	stw	r2,-4(fp)
 8039c08:	00000906 	br	8039c30 <udp_lookup+0x40>
      if (tmp->u_data == (void*)so)
 8039c0c:	e0bfff17 	ldw	r2,-4(fp)
 8039c10:	10800617 	ldw	r2,24(r2)
 8039c14:	e0fffe17 	ldw	r3,-8(fp)
 8039c18:	1880021e 	bne	r3,r2,8039c24 <udp_lookup+0x34>
      return (tmp);
 8039c1c:	e0bfff17 	ldw	r2,-4(fp)
 8039c20:	00000606 	br	8039c3c <udp_lookup+0x4c>
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8039c24:	e0bfff17 	ldw	r2,-4(fp)
 8039c28:	10800017 	ldw	r2,0(r2)
 8039c2c:	e0bfff15 	stw	r2,-4(fp)
 8039c30:	e0bfff17 	ldw	r2,-4(fp)
 8039c34:	103ff51e 	bne	r2,zero,8039c0c <udp_lookup+0x1c>

   return NULL;   /* didn't find it */
 8039c38:	0005883a 	mov	r2,zero
}
 8039c3c:	e037883a 	mov	sp,fp
 8039c40:	df000017 	ldw	fp,0(sp)
 8039c44:	dec00104 	addi	sp,sp,4
 8039c48:	f800283a 	ret

08039c4c <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
 8039c4c:	defff504 	addi	sp,sp,-44
 8039c50:	dfc00a15 	stw	ra,40(sp)
 8039c54:	df000915 	stw	fp,36(sp)
 8039c58:	df000904 	addi	fp,sp,36
 8039c5c:	e13ff815 	stw	r4,-32(fp)
 8039c60:	e17ff715 	stw	r5,-36(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 8039c64:	e0bff717 	ldw	r2,-36(fp)
 8039c68:	e0bfff15 	stw	r2,-4(fp)
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
 8039c6c:	0009883a 	mov	r4,zero
 8039c70:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 8039c74:	e0bfff17 	ldw	r2,-4(fp)
 8039c78:	10c00a17 	ldw	r3,40(r2)
 8039c7c:	e0bff817 	ldw	r2,-32(fp)
 8039c80:	10800417 	ldw	r2,16(r2)
 8039c84:	1887883a 	add	r3,r3,r2
 8039c88:	e0bfff17 	ldw	r2,-4(fp)
 8039c8c:	10800b17 	ldw	r2,44(r2)
 8039c90:	18800436 	bltu	r3,r2,8039ca4 <udp_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 8039c94:	0009883a 	mov	r4,zero
 8039c98:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 8039c9c:	00801a44 	movi	r2,105
 8039ca0:	00004d06 	br	8039dd8 <udp_soinput+0x18c>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 8039ca4:	000b883a 	mov	r5,zero
 8039ca8:	01000044 	movi	r4,1
 8039cac:	802d1a80 	call	802d1a8 <m_getnbuf>
 8039cb0:	e0bffe15 	stw	r2,-8(fp)
   if (!m_in)
 8039cb4:	e0bffe17 	ldw	r2,-8(fp)
 8039cb8:	1000041e 	bne	r2,zero,8039ccc <udp_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 8039cbc:	0009883a 	mov	r4,zero
 8039cc0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 8039cc4:	00801a44 	movi	r2,105
 8039cc8:	00004306 	br	8039dd8 <udp_soinput+0x18c>
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
 8039ccc:	e0bffe17 	ldw	r2,-8(fp)
 8039cd0:	e0fff817 	ldw	r3,-32(fp)
 8039cd4:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
 8039cd8:	e0bff817 	ldw	r2,-32(fp)
 8039cdc:	10c00317 	ldw	r3,12(r2)
 8039ce0:	e0bffe17 	ldw	r2,-8(fp)
 8039ce4:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 8039ce8:	e0bff817 	ldw	r2,-32(fp)
 8039cec:	10c00417 	ldw	r3,16(r2)
 8039cf0:	e0bffe17 	ldw	r2,-8(fp)
 8039cf4:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;
 8039cf8:	e0bff817 	ldw	r2,-32(fp)
 8039cfc:	10c00117 	ldw	r3,4(r2)
 8039d00:	e0bffe17 	ldw	r2,-8(fp)
 8039d04:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 8039d08:	e0bff817 	ldw	r2,-32(fp)
 8039d0c:	10c00217 	ldw	r3,8(r2)
 8039d10:	e0bffe17 	ldw	r2,-8(fp)
 8039d14:	10c00515 	stw	r3,20(r2)

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 8039d18:	e0bff817 	ldw	r2,-32(fp)
 8039d1c:	10800717 	ldw	r2,28(r2)
 8039d20:	e0bffa15 	stw	r2,-24(fp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
 8039d24:	e0bff817 	ldw	r2,-32(fp)
 8039d28:	10800317 	ldw	r2,12(r2)
 8039d2c:	10bffe04 	addi	r2,r2,-8
 8039d30:	e0bffd15 	stw	r2,-12(fp)
   sin.sin_port = htons(udpp->ud_srcp);
 8039d34:	e0bffd17 	ldw	r2,-12(fp)
 8039d38:	1080000b 	ldhu	r2,0(r2)
 8039d3c:	10bfffcc 	andi	r2,r2,65535
 8039d40:	1004d23a 	srli	r2,r2,8
 8039d44:	1007883a 	mov	r3,r2
 8039d48:	e0bffd17 	ldw	r2,-12(fp)
 8039d4c:	1080000b 	ldhu	r2,0(r2)
 8039d50:	10bfffcc 	andi	r2,r2,65535
 8039d54:	1004923a 	slli	r2,r2,8
 8039d58:	1884b03a 	or	r2,r3,r2
 8039d5c:	e0bff98d 	sth	r2,-26(fp)
   sin.sin_family = AF_INET;
 8039d60:	00800084 	movi	r2,2
 8039d64:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 8039d68:	e0bfff17 	ldw	r2,-4(fp)
 8039d6c:	10800a04 	addi	r2,r2,40
 8039d70:	e0fff904 	addi	r3,fp,-28
 8039d74:	e1bffe17 	ldw	r6,-8(fp)
 8039d78:	180b883a 	mov	r5,r3
 8039d7c:	1009883a 	mov	r4,r2
 8039d80:	80334800 	call	8033480 <sbappendaddr>
 8039d84:	1000081e 	bne	r2,zero,8039da8 <udp_soinput+0x15c>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
 8039d88:	e0bffe17 	ldw	r2,-8(fp)
 8039d8c:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 8039d90:	e13ffe17 	ldw	r4,-8(fp)
 8039d94:	802d3300 	call	802d330 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8039d98:	0009883a 	mov	r4,zero
 8039d9c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 8039da0:	00801a44 	movi	r2,105
 8039da4:	00000c06 	br	8039dd8 <udp_soinput+0x18c>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 8039da8:	e0bfff17 	ldw	r2,-4(fp)
 8039dac:	10800a04 	addi	r2,r2,40
 8039db0:	1009883a 	mov	r4,r2
 8039db4:	8028a0c0 	call	8028a0c <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 8039db8:	e0bfff17 	ldw	r2,-4(fp)
 8039dbc:	10800a04 	addi	r2,r2,40
 8039dc0:	100b883a 	mov	r5,r2
 8039dc4:	e13fff17 	ldw	r4,-4(fp)
 8039dc8:	80331580 	call	8033158 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 8039dcc:	0009883a 	mov	r4,zero
 8039dd0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return 0;
 8039dd4:	0005883a 	mov	r2,zero
}
 8039dd8:	e037883a 	mov	sp,fp
 8039ddc:	dfc00117 	ldw	ra,4(sp)
 8039de0:	df000017 	ldw	fp,0(sp)
 8039de4:	dec00204 	addi	sp,sp,8
 8039de8:	f800283a 	ret

08039dec <udp_usrreq>:

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 8039dec:	defff804 	addi	sp,sp,-32
 8039df0:	dfc00715 	stw	ra,28(sp)
 8039df4:	df000615 	stw	fp,24(sp)
 8039df8:	df000604 	addi	fp,sp,24
 8039dfc:	e13ffd15 	stw	r4,-12(fp)
 8039e00:	e17ffc15 	stw	r5,-16(fp)
 8039e04:	e1bffb15 	stw	r6,-20(fp)
   UDPCONN udpconn = (UDPCONN)NULL;
 8039e08:	e03fff15 	stw	zero,-4(fp)
   int   req;

   req = so->so_req;    /* get request from socket struct */
 8039e0c:	e0bffd17 	ldw	r2,-12(fp)
 8039e10:	10800717 	ldw	r2,28(r2)
 8039e14:	e0bffe15 	stw	r2,-8(fp)
 8039e18:	e0bffe17 	ldw	r2,-8(fp)
 8039e1c:	10800468 	cmpgeui	r2,r2,17
 8039e20:	10007a1e 	bne	r2,zero,803a00c <udp_usrreq+0x220>
 8039e24:	e0bffe17 	ldw	r2,-8(fp)
 8039e28:	100690ba 	slli	r3,r2,2
 8039e2c:	00820134 	movhi	r2,2052
 8039e30:	1885883a 	add	r2,r3,r2
 8039e34:	10a78f17 	ldw	r2,-25028(r2)
 8039e38:	1000683a 	jmp	r2
 8039e3c:	08039e80 	call	8039e8 <OSCtxSw_SWITCH_PC+0x8039a8>
 8039e40:	08039f04 	addi	zero,at,3708
 8039e44:	08039f40 	call	8039f4 <OSCtxSw_SWITCH_PC+0x8039b4>
 8039e48:	0803a00c 	andi	zero,at,3712
 8039e4c:	08039f40 	call	8039f4 <OSCtxSw_SWITCH_PC+0x8039b4>
 8039e50:	0803a00c 	andi	zero,at,3712
 8039e54:	0803a000 	call	803a00 <OSCtxSw_SWITCH_PC+0x8039c0>
 8039e58:	0803a00c 	andi	zero,at,3712
 8039e5c:	0803a000 	call	803a00 <OSCtxSw_SWITCH_PC+0x8039c0>
 8039e60:	08039f80 	call	8039f8 <OSCtxSw_SWITCH_PC+0x8039b8>
 8039e64:	0803a00c 	andi	zero,at,3712
 8039e68:	0803a00c 	andi	zero,at,3712
 8039e6c:	0803a00c 	andi	zero,at,3712
 8039e70:	0803a00c 	andi	zero,at,3712
 8039e74:	0803a00c 	andi	zero,at,3712
 8039e78:	08039fc0 	call	8039fc <OSCtxSw_SWITCH_PC+0x8039bc>
 8039e7c:	08039fc0 	call	8039fc <OSCtxSw_SWITCH_PC+0x8039bc>

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
 8039e80:	804427c0 	call	804427c <udp_maxalloc>
 8039e84:	1007883a 	mov	r3,r2
 8039e88:	e0bffd17 	ldw	r2,-12(fp)
 8039e8c:	10c01315 	stw	r3,76(r2)
 8039e90:	e0bffd17 	ldw	r2,-12(fp)
 8039e94:	10c01317 	ldw	r3,76(r2)
 8039e98:	e0bffd17 	ldw	r2,-12(fp)
 8039e9c:	10c00b15 	stw	r3,44(r2)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
 8039ea0:	e0bffd17 	ldw	r2,-12(fp)
 8039ea4:	10800517 	ldw	r2,20(r2)
 8039ea8:	10800098 	cmpnei	r2,r2,2
 8039eac:	10000f1e 	bne	r2,zero,8039eec <udp_usrreq+0x100>
        UNLOCK_NET_RESOURCE(NET_RESID);
 8039eb0:	0009883a 	mov	r4,zero
 8039eb4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
 8039eb8:	80441100 	call	8044110 <udp_socket>
 8039ebc:	10ffffcc 	andi	r3,r2,65535
 8039ec0:	e0bffd17 	ldw	r2,-12(fp)
 8039ec4:	d8800015 	stw	r2,0(sp)
 8039ec8:	01c20134 	movhi	r7,2052
 8039ecc:	39e71304 	addi	r7,r7,-25524
 8039ed0:	180d883a 	mov	r6,r3
 8039ed4:	000b883a 	mov	r5,zero
 8039ed8:	0009883a 	mov	r4,zero
 8039edc:	802bf900 	call	802bf90 <udp_open>
 8039ee0:	e0bfff15 	stw	r2,-4(fp)
        LOCK_NET_RESOURCE(NET_RESID);
 8039ee4:	0009883a 	mov	r4,zero
 8039ee8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
 8039eec:	e0bfff17 	ldw	r2,-4(fp)
 8039ef0:	1000021e 	bne	r2,zero,8039efc <udp_usrreq+0x110>
         return(EINVAL);
 8039ef4:	00800584 	movi	r2,22
 8039ef8:	00004506 	br	803a010 <udp_usrreq+0x224>
      return 0;
 8039efc:	0005883a 	mov	r2,zero
 8039f00:	00004306 	br	803a010 <udp_usrreq+0x224>
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
 8039f04:	e13ffd17 	ldw	r4,-12(fp)
 8039f08:	8039bf00 	call	8039bf0 <udp_lookup>
 8039f0c:	e0bfff15 	stw	r2,-4(fp)
      if (!udpconn)
 8039f10:	e0bfff17 	ldw	r2,-4(fp)
 8039f14:	1000021e 	bne	r2,zero,8039f20 <udp_usrreq+0x134>
         return(EINVAL);
 8039f18:	00800584 	movi	r2,22
 8039f1c:	00003c06 	br	803a010 <udp_usrreq+0x224>
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8039f20:	0009883a 	mov	r4,zero
 8039f24:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
 8039f28:	e13fff17 	ldw	r4,-4(fp)
 8039f2c:	802c1900 	call	802c190 <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
 8039f30:	0009883a 	mov	r4,zero
 8039f34:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      return 0;
 8039f38:	0005883a 	mov	r2,zero
 8039f3c:	00003406 	br	803a010 <udp_usrreq+0x224>
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 8039f40:	e0bffb17 	ldw	r2,-20(fp)
 8039f44:	1000021e 	bne	r2,zero,8039f50 <udp_usrreq+0x164>
         return(EINVAL);
 8039f48:	00800584 	movi	r2,22
 8039f4c:	00003006 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 8039f50:	e0bffd17 	ldw	r2,-12(fp)
 8039f54:	10800517 	ldw	r2,20(r2)
 8039f58:	10800098 	cmpnei	r2,r2,2
 8039f5c:	1000051e 	bne	r2,zero,8039f74 <udp_usrreq+0x188>
        return udp4_sockbind(so, nam, req );
 8039f60:	e1bffe17 	ldw	r6,-8(fp)
 8039f64:	e17ffb17 	ldw	r5,-20(fp)
 8039f68:	e13ffd17 	ldw	r4,-12(fp)
 8039f6c:	803a0240 	call	803a024 <udp4_sockbind>
 8039f70:	00002706 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockbind(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 8039f74:	802c3fc0 	call	802c3fc <dtrap>
      return EINVAL;
 8039f78:	00800584 	movi	r2,22
 8039f7c:	00002406 	br	803a010 <udp_usrreq+0x224>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 8039f80:	e0bffc17 	ldw	r2,-16(fp)
 8039f84:	1000021e 	bne	r2,zero,8039f90 <udp_usrreq+0x1a4>
         return(EINVAL);
 8039f88:	00800584 	movi	r2,22
 8039f8c:	00002006 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 8039f90:	e0bffd17 	ldw	r2,-12(fp)
 8039f94:	10800517 	ldw	r2,20(r2)
 8039f98:	10800098 	cmpnei	r2,r2,2
 8039f9c:	1000051e 	bne	r2,zero,8039fb4 <udp_usrreq+0x1c8>
        return udp4_socksend(so, m, nam );
 8039fa0:	e1bffb17 	ldw	r6,-20(fp)
 8039fa4:	e17ffc17 	ldw	r5,-16(fp)
 8039fa8:	e13ffd17 	ldw	r4,-12(fp)
 8039fac:	803a2f40 	call	803a2f4 <udp4_socksend>
 8039fb0:	00001706 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_socksend(so, m, nam);
      }
#endif
      dtrap();   /* invalid address */
 8039fb4:	802c3fc0 	call	802c3fc <dtrap>
      return EINVAL;
 8039fb8:	00800584 	movi	r2,22
 8039fbc:	00001406 	br	803a010 <udp_usrreq+0x224>

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 8039fc0:	e0bffb17 	ldw	r2,-20(fp)
 8039fc4:	1000021e 	bne	r2,zero,8039fd0 <udp_usrreq+0x1e4>
         return(EINVAL);
 8039fc8:	00800584 	movi	r2,22
 8039fcc:	00001006 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 8039fd0:	e0bffd17 	ldw	r2,-12(fp)
 8039fd4:	10800517 	ldw	r2,20(r2)
 8039fd8:	10800098 	cmpnei	r2,r2,2
 8039fdc:	1000051e 	bne	r2,zero,8039ff4 <udp_usrreq+0x208>
        return udp4_sockaddr(so, nam, req );
 8039fe0:	e1bffe17 	ldw	r6,-8(fp)
 8039fe4:	e17ffb17 	ldw	r5,-20(fp)
 8039fe8:	e13ffd17 	ldw	r4,-12(fp)
 8039fec:	803a6680 	call	803a668 <udp4_sockaddr>
 8039ff0:	00000706 	br	803a010 <udp_usrreq+0x224>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 8039ff4:	802c3fc0 	call	802c3fc <dtrap>
      return EINVAL;
 8039ff8:	00800584 	movi	r2,22
 8039ffc:	00000406 	br	803a010 <udp_usrreq+0x224>

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 803a000:	802c3fc0 	call	802c3fc <dtrap>
      return 0;
 803a004:	0005883a 	mov	r2,zero
 803a008:	00000106 	br	803a010 <udp_usrreq+0x224>
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 803a00c:	008017c4 	movi	r2,95
   }
}
 803a010:	e037883a 	mov	sp,fp
 803a014:	dfc00117 	ldw	ra,4(sp)
 803a018:	df000017 	ldw	fp,0(sp)
 803a01c:	dec00204 	addi	sp,sp,8
 803a020:	f800283a 	ret

0803a024 <udp4_sockbind>:

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
 803a024:	defff304 	addi	sp,sp,-52
 803a028:	dfc00c15 	stw	ra,48(sp)
 803a02c:	df000b15 	stw	fp,44(sp)
 803a030:	df000b04 	addi	fp,sp,44
 803a034:	e13ff715 	stw	r4,-36(fp)
 803a038:	e17ff615 	stw	r5,-40(fp)
 803a03c:	e1bff515 	stw	r6,-44(fp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
 803a040:	e0bff617 	ldw	r2,-40(fp)
 803a044:	10800317 	ldw	r2,12(r2)
 803a048:	e0bffa15 	stw	r2,-24(fp)
  if (sin == NULL)
 803a04c:	e0bffa17 	ldw	r2,-24(fp)
 803a050:	1000021e 	bne	r2,zero,803a05c <udp4_sockbind+0x38>
    return(EINVAL);
 803a054:	00800584 	movi	r2,22
 803a058:	0000a106 	br	803a2e0 <udp4_sockbind+0x2bc>
  if (nam->m_len != sizeof (*sin))
 803a05c:	e0bff617 	ldw	r2,-40(fp)
 803a060:	10800217 	ldw	r2,8(r2)
 803a064:	10800420 	cmpeqi	r2,r2,16
 803a068:	1000021e 	bne	r2,zero,803a074 <udp4_sockbind+0x50>
    return(EINVAL);
 803a06c:	00800584 	movi	r2,22
 803a070:	00009b06 	br	803a2e0 <udp4_sockbind+0x2bc>
  udpconn = udp_lookup(so);
 803a074:	e13ff717 	ldw	r4,-36(fp)
 803a078:	8039bf00 	call	8039bf0 <udp_lookup>
 803a07c:	e0bff915 	stw	r2,-28(fp)
  if (!udpconn)
 803a080:	e0bff917 	ldw	r2,-28(fp)
 803a084:	1000021e 	bne	r2,zero,803a090 <udp4_sockbind+0x6c>
     return(EINVAL);
 803a088:	00800584 	movi	r2,22
 803a08c:	00009406 	br	803a2e0 <udp4_sockbind+0x2bc>
  if (req == PRU_BIND)
 803a090:	e0bff517 	ldw	r2,-44(fp)
 803a094:	10800098 	cmpnei	r2,r2,2
 803a098:	1000521e 	bne	r2,zero,803a1e4 <udp4_sockbind+0x1c0>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
 803a09c:	e0bffa17 	ldw	r2,-24(fp)
 803a0a0:	1080008b 	ldhu	r2,2(r2)
 803a0a4:	10bfffcc 	andi	r2,r2,65535
 803a0a8:	10000b1e 	bne	r2,zero,803a0d8 <udp4_sockbind+0xb4>
    {
      if (udpconn->u_lport != 0)
 803a0ac:	e0bff917 	ldw	r2,-28(fp)
 803a0b0:	1080018b 	ldhu	r2,6(r2)
 803a0b4:	10bfffcc 	andi	r2,r2,65535
 803a0b8:	10000426 	beq	r2,zero,803a0cc <udp4_sockbind+0xa8>
        lport = udpconn->u_lport;
 803a0bc:	e0bff917 	ldw	r2,-28(fp)
 803a0c0:	1080018b 	ldhu	r2,6(r2)
 803a0c4:	e0bffe8d 	sth	r2,-6(fp)
 803a0c8:	00000e06 	br	803a104 <udp4_sockbind+0xe0>
      else
        lport = udp_socket();
 803a0cc:	80441100 	call	8044110 <udp_socket>
 803a0d0:	e0bffe8d 	sth	r2,-6(fp)
 803a0d4:	00000b06 	br	803a104 <udp4_sockbind+0xe0>
    }
    else
    {
      lport = ntohs(sin->sin_port);
 803a0d8:	e0bffa17 	ldw	r2,-24(fp)
 803a0dc:	1080008b 	ldhu	r2,2(r2)
 803a0e0:	10bfffcc 	andi	r2,r2,65535
 803a0e4:	1004d23a 	srli	r2,r2,8
 803a0e8:	1007883a 	mov	r3,r2
 803a0ec:	e0bffa17 	ldw	r2,-24(fp)
 803a0f0:	1080008b 	ldhu	r2,2(r2)
 803a0f4:	10bfffcc 	andi	r2,r2,65535
 803a0f8:	1004923a 	slli	r2,r2,8
 803a0fc:	1884b03a 	or	r2,r3,r2
 803a100:	e0bffe8d 	sth	r2,-6(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 803a104:	e0bffa17 	ldw	r2,-24(fp)
 803a108:	10800117 	ldw	r2,4(r2)
 803a10c:	1000021e 	bne	r2,zero,803a118 <udp4_sockbind+0xf4>
    {
      lhost = 0L;
 803a110:	e03ffc15 	stw	zero,-16(fp)
 803a114:	00001606 	br	803a170 <udp4_sockbind+0x14c>
    }
    else
    {
      lhost = sin->sin_addr.s_addr;
 803a118:	e0bffa17 	ldw	r2,-24(fp)
 803a11c:	10800117 	ldw	r2,4(r2)
 803a120:	e0bffc15 	stw	r2,-16(fp)
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a124:	008201b4 	movhi	r2,2054
 803a128:	10bd1b17 	ldw	r2,-2964(r2)
 803a12c:	e0bffb15 	stw	r2,-20(fp)
 803a130:	00000706 	br	803a150 <udp4_sockbind+0x12c>
        if (ifp->n_ipaddr == lhost)
 803a134:	e0bffb17 	ldw	r2,-20(fp)
 803a138:	10800a17 	ldw	r2,40(r2)
 803a13c:	e0fffc17 	ldw	r3,-16(fp)
 803a140:	18800626 	beq	r3,r2,803a15c <udp4_sockbind+0x138>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a144:	e0bffb17 	ldw	r2,-20(fp)
 803a148:	10800017 	ldw	r2,0(r2)
 803a14c:	e0bffb15 	stw	r2,-20(fp)
 803a150:	e0bffb17 	ldw	r2,-20(fp)
 803a154:	103ff71e 	bne	r2,zero,803a134 <udp4_sockbind+0x110>
 803a158:	00000106 	br	803a160 <udp4_sockbind+0x13c>
          break;
 803a15c:	0001883a 	nop
      if (ifp == NULL)
 803a160:	e0bffb17 	ldw	r2,-20(fp)
 803a164:	1000021e 	bne	r2,zero,803a170 <udp4_sockbind+0x14c>
        return(EADDRNOTAVAIL);
 803a168:	00801f44 	movi	r2,125
 803a16c:	00005c06 	br	803a2e0 <udp4_sockbind+0x2bc>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
 803a170:	e0bff717 	ldw	r2,-36(fp)
 803a174:	10800417 	ldw	r2,16(r2)
 803a178:	1080010c 	andi	r2,r2,4
 803a17c:	1000121e 	bne	r2,zero,803a1c8 <udp4_sockbind+0x1a4>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 803a180:	d0a09717 	ldw	r2,-32164(gp)
 803a184:	e0bfff15 	stw	r2,-4(fp)
 803a188:	00000d06 	br	803a1c0 <udp4_sockbind+0x19c>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
 803a18c:	e0bfff17 	ldw	r2,-4(fp)
 803a190:	1080018b 	ldhu	r2,6(r2)
 803a194:	e0fffe8b 	ldhu	r3,-6(fp)
 803a198:	10bfffcc 	andi	r2,r2,65535
 803a19c:	1880051e 	bne	r3,r2,803a1b4 <udp4_sockbind+0x190>
 803a1a0:	e0ffff17 	ldw	r3,-4(fp)
 803a1a4:	e0bff917 	ldw	r2,-28(fp)
 803a1a8:	18800226 	beq	r3,r2,803a1b4 <udp4_sockbind+0x190>
          return(EADDRINUSE);
 803a1ac:	00801c04 	movi	r2,112
 803a1b0:	00004b06 	br	803a2e0 <udp4_sockbind+0x2bc>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 803a1b4:	e0bfff17 	ldw	r2,-4(fp)
 803a1b8:	10800017 	ldw	r2,0(r2)
 803a1bc:	e0bfff15 	stw	r2,-4(fp)
 803a1c0:	e0bfff17 	ldw	r2,-4(fp)
 803a1c4:	103ff11e 	bne	r2,zero,803a18c <udp4_sockbind+0x168>
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
 803a1c8:	e0bff917 	ldw	r2,-28(fp)
 803a1cc:	e0fffe8b 	ldhu	r3,-6(fp)
 803a1d0:	10c0018d 	sth	r3,6(r2)
    udpconn->u_lhost = lhost;
 803a1d4:	e0bff917 	ldw	r2,-28(fp)
 803a1d8:	e0fffc17 	ldw	r3,-16(fp)
 803a1dc:	10c00315 	stw	r3,12(r2)
 803a1e0:	00003e06 	br	803a2dc <udp4_sockbind+0x2b8>
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
 803a1e4:	e0bffa17 	ldw	r2,-24(fp)
 803a1e8:	1080008b 	ldhu	r2,2(r2)
 803a1ec:	10bfffcc 	andi	r2,r2,65535
 803a1f0:	1004d23a 	srli	r2,r2,8
 803a1f4:	1007883a 	mov	r3,r2
 803a1f8:	e0bffa17 	ldw	r2,-24(fp)
 803a1fc:	1080008b 	ldhu	r2,2(r2)
 803a200:	10bfffcc 	andi	r2,r2,65535
 803a204:	1004923a 	slli	r2,r2,8
 803a208:	1884b03a 	or	r2,r3,r2
 803a20c:	e0bff88d 	sth	r2,-30(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 803a210:	e0bffa17 	ldw	r2,-24(fp)
 803a214:	10800117 	ldw	r2,4(r2)
 803a218:	1000021e 	bne	r2,zero,803a224 <udp4_sockbind+0x200>
      fhost = 0L;
 803a21c:	e03ffd15 	stw	zero,-12(fp)
 803a220:	00000306 	br	803a230 <udp4_sockbind+0x20c>
    else
      fhost = sin->sin_addr.s_addr;
 803a224:	e0bffa17 	ldw	r2,-24(fp)
 803a228:	10800117 	ldw	r2,4(r2)
 803a22c:	e0bffd15 	stw	r2,-12(fp)
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
 803a230:	e13ffd17 	ldw	r4,-12(fp)
 803a234:	803f9600 	call	803f960 <ip_mymach>
 803a238:	e0bffc15 	stw	r2,-16(fp)
    if (lhost == 0)
 803a23c:	e0bffc17 	ldw	r2,-16(fp)
 803a240:	1000021e 	bne	r2,zero,803a24c <udp4_sockbind+0x228>
      return(ENETUNREACH);
 803a244:	00801c84 	movi	r2,114
 803a248:	00002506 	br	803a2e0 <udp4_sockbind+0x2bc>
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
 803a24c:	e0bff917 	ldw	r2,-28(fp)
 803a250:	1080018b 	ldhu	r2,6(r2)
 803a254:	e0bffe8d 	sth	r2,-6(fp)
    if (lport == 0)
 803a258:	e0bffe8b 	ldhu	r2,-6(fp)
 803a25c:	1000021e 	bne	r2,zero,803a268 <udp4_sockbind+0x244>
      lport = udp_socket();
 803a260:	80441100 	call	8044110 <udp_socket>
 803a264:	e0bffe8d 	sth	r2,-6(fp)
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
 803a268:	e0bff917 	ldw	r2,-28(fp)
 803a26c:	e0fffc17 	ldw	r3,-16(fp)
 803a270:	10c00315 	stw	r3,12(r2)
    udpconn->u_lport = lport;
 803a274:	e0bff917 	ldw	r2,-28(fp)
 803a278:	e0fffe8b 	ldhu	r3,-6(fp)
 803a27c:	10c0018d 	sth	r3,6(r2)
    udpconn->u_fhost = fhost;
 803a280:	e0bff917 	ldw	r2,-28(fp)
 803a284:	e0fffd17 	ldw	r3,-12(fp)
 803a288:	10c00415 	stw	r3,16(r2)
    udpconn->u_fport = fport;
 803a28c:	e0bff917 	ldw	r2,-28(fp)
 803a290:	e0fff88b 	ldhu	r3,-30(fp)
 803a294:	10c0020d 	sth	r3,8(r2)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 803a298:	e0bff717 	ldw	r2,-36(fp)
 803a29c:	10c0088b 	ldhu	r3,34(r2)
 803a2a0:	00bffcc4 	movi	r2,-13
 803a2a4:	1884703a 	and	r2,r3,r2
 803a2a8:	1007883a 	mov	r3,r2
 803a2ac:	e0bff717 	ldw	r2,-36(fp)
 803a2b0:	10c0088d 	sth	r3,34(r2)
    so->so_state |= SS_ISCONNECTED;
 803a2b4:	e0bff717 	ldw	r2,-36(fp)
 803a2b8:	1080088b 	ldhu	r2,34(r2)
 803a2bc:	10800094 	ori	r2,r2,2
 803a2c0:	1007883a 	mov	r3,r2
 803a2c4:	e0bff717 	ldw	r2,-36(fp)
 803a2c8:	10c0088d 	sth	r3,34(r2)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 803a2cc:	e0bff717 	ldw	r2,-36(fp)
 803a2d0:	10800a04 	addi	r2,r2,40
 803a2d4:	1009883a 	mov	r4,r2
 803a2d8:	803383c0 	call	803383c <sbflush>
  }
  return 0;
 803a2dc:	0005883a 	mov	r2,zero
}
 803a2e0:	e037883a 	mov	sp,fp
 803a2e4:	dfc00117 	ldw	ra,4(sp)
 803a2e8:	df000017 	ldw	fp,0(sp)
 803a2ec:	dec00204 	addi	sp,sp,8
 803a2f0:	f800283a 	ret

0803a2f4 <udp4_socksend>:

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
 803a2f4:	defff304 	addi	sp,sp,-52
 803a2f8:	dfc00c15 	stw	ra,48(sp)
 803a2fc:	df000b15 	stw	fp,44(sp)
 803a300:	dc000a15 	stw	r16,40(sp)
 803a304:	df000b04 	addi	fp,sp,44
 803a308:	e13ff715 	stw	r4,-36(fp)
 803a30c:	e17ff615 	stw	r5,-40(fp)
 803a310:	e1bff515 	stw	r6,-44(fp)
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
 803a314:	e13ff717 	ldw	r4,-36(fp)
 803a318:	8039bf00 	call	8039bf0 <udp_lookup>
 803a31c:	e0bffb15 	stw	r2,-20(fp)
  if (!udpconn)
 803a320:	e0bffb17 	ldw	r2,-20(fp)
 803a324:	1000041e 	bne	r2,zero,803a338 <udp4_socksend+0x44>
  {
    m_free(m);
 803a328:	e13ff617 	ldw	r4,-40(fp)
 803a32c:	802d3300 	call	802d330 <m_free>
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
 803a330:	00801bc4 	movi	r2,111
 803a334:	0000c606 	br	803a650 <udp4_socksend+0x35c>
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
 803a338:	e0bff517 	ldw	r2,-44(fp)
 803a33c:	10000e1e 	bne	r2,zero,803a378 <udp4_socksend+0x84>
  { 
    if (so->so_state & SS_ISCONNECTED)
 803a340:	e0bff717 	ldw	r2,-36(fp)
 803a344:	1080088b 	ldhu	r2,34(r2)
 803a348:	10bfffcc 	andi	r2,r2,65535
 803a34c:	1080008c 	andi	r2,r2,2
 803a350:	10000726 	beq	r2,zero,803a370 <udp4_socksend+0x7c>
    {
      fport = udpconn->u_fport;
 803a354:	e0bffb17 	ldw	r2,-20(fp)
 803a358:	1080020b 	ldhu	r2,8(r2)
 803a35c:	e0bffe8d 	sth	r2,-6(fp)
      fhost = udpconn->u_fhost;
 803a360:	e0bffb17 	ldw	r2,-20(fp)
 803a364:	10800417 	ldw	r2,16(r2)
 803a368:	e0bffd15 	stw	r2,-12(fp)
 803a36c:	00002806 	br	803a410 <udp4_socksend+0x11c>
    }
    else
      return (EINVAL);
 803a370:	00800584 	movi	r2,22
 803a374:	0000b606 	br	803a650 <udp4_socksend+0x35c>
  }
  else if(nam->m_len != sizeof (*sin))
 803a378:	e0bff517 	ldw	r2,-44(fp)
 803a37c:	10800217 	ldw	r2,8(r2)
 803a380:	10800420 	cmpeqi	r2,r2,16
 803a384:	1000031e 	bne	r2,zero,803a394 <udp4_socksend+0xa0>
  {
    dtrap();
 803a388:	802c3fc0 	call	802c3fc <dtrap>
    return (EINVAL);
 803a38c:	00800584 	movi	r2,22
 803a390:	0000af06 	br	803a650 <udp4_socksend+0x35c>
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
 803a394:	e0bff517 	ldw	r2,-44(fp)
 803a398:	10800317 	ldw	r2,12(r2)
 803a39c:	e0bffa15 	stw	r2,-24(fp)
    fhost = sin->sin_addr.s_addr;
 803a3a0:	e0bffa17 	ldw	r2,-24(fp)
 803a3a4:	10800117 	ldw	r2,4(r2)
 803a3a8:	e0bffd15 	stw	r2,-12(fp)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
 803a3ac:	e0bffa17 	ldw	r2,-24(fp)
 803a3b0:	1080008b 	ldhu	r2,2(r2)
 803a3b4:	10bfffcc 	andi	r2,r2,65535
 803a3b8:	10000c26 	beq	r2,zero,803a3ec <udp4_socksend+0xf8>
      fport = ntohs(sin->sin_port);
 803a3bc:	e0bffa17 	ldw	r2,-24(fp)
 803a3c0:	1080008b 	ldhu	r2,2(r2)
 803a3c4:	10bfffcc 	andi	r2,r2,65535
 803a3c8:	1004d23a 	srli	r2,r2,8
 803a3cc:	1007883a 	mov	r3,r2
 803a3d0:	e0bffa17 	ldw	r2,-24(fp)
 803a3d4:	1080008b 	ldhu	r2,2(r2)
 803a3d8:	10bfffcc 	andi	r2,r2,65535
 803a3dc:	1004923a 	slli	r2,r2,8
 803a3e0:	1884b03a 	or	r2,r3,r2
 803a3e4:	e0bffe8d 	sth	r2,-6(fp)
 803a3e8:	00000906 	br	803a410 <udp4_socksend+0x11c>
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
 803a3ec:	e0bffb17 	ldw	r2,-20(fp)
 803a3f0:	1080020b 	ldhu	r2,8(r2)
 803a3f4:	10bfffcc 	andi	r2,r2,65535
 803a3f8:	1000021e 	bne	r2,zero,803a404 <udp4_socksend+0x110>
        return (EINVAL);
 803a3fc:	00800584 	movi	r2,22
 803a400:	00009306 	br	803a650 <udp4_socksend+0x35c>
      fport = udpconn->u_fport;
 803a404:	e0bffb17 	ldw	r2,-20(fp)
 803a408:	1080020b 	ldhu	r2,8(r2)
 803a40c:	e0bffe8d 	sth	r2,-6(fp)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
 803a410:	e0bff617 	ldw	r2,-40(fp)
 803a414:	14000217 	ldw	r16,8(r2)
 803a418:	804427c0 	call	804427c <udp_maxalloc>
 803a41c:	1400032e 	bgeu	r2,r16,803a42c <udp4_socksend+0x138>
  {
    dtrap(); /* should never happen */
 803a420:	802c3fc0 	call	802c3fc <dtrap>
    return EMSGSIZE;  /* try to recover */
 803a424:	00801e84 	movi	r2,122
 803a428:	00008906 	br	803a650 <udp4_socksend+0x35c>
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
 803a42c:	e0bff617 	ldw	r2,-40(fp)
 803a430:	10800217 	ldw	r2,8(r2)
 803a434:	000b883a 	mov	r5,zero
 803a438:	1009883a 	mov	r4,r2
 803a43c:	80441c00 	call	80441c0 <udp_alloc>
 803a440:	e0bff915 	stw	r2,-28(fp)
  if (!pkt)
 803a444:	e0bff917 	ldw	r2,-28(fp)
 803a448:	1000041e 	bne	r2,zero,803a45c <udp4_socksend+0x168>
  {
    m_free(m);
 803a44c:	e13ff617 	ldw	r4,-40(fp)
 803a450:	802d3300 	call	802d330 <m_free>
    return ENOBUFS;   /* report buffer shortages */
 803a454:	00801a44 	movi	r2,105
 803a458:	00007d06 	br	803a650 <udp4_socksend+0x35c>
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 803a45c:	e0bff917 	ldw	r2,-28(fp)
 803a460:	10c00317 	ldw	r3,12(r2)
 803a464:	e0bff617 	ldw	r2,-40(fp)
 803a468:	11000317 	ldw	r4,12(r2)
 803a46c:	e0bff617 	ldw	r2,-40(fp)
 803a470:	10800217 	ldw	r2,8(r2)
 803a474:	100d883a 	mov	r6,r2
 803a478:	200b883a 	mov	r5,r4
 803a47c:	1809883a 	mov	r4,r3
 803a480:	8002ea40 	call	8002ea4 <memcpy>
  pkt->nb_plen = m->m_len;
 803a484:	e0bff617 	ldw	r2,-40(fp)
 803a488:	10c00217 	ldw	r3,8(r2)
 803a48c:	e0bff917 	ldw	r2,-28(fp)
 803a490:	10c00415 	stw	r3,16(r2)
  /* finished with mbuf, free it now */
  m_free(m);
 803a494:	e13ff617 	ldw	r4,-40(fp)
 803a498:	802d3300 	call	802d330 <m_free>
  pkt->fhost = fhost;
 803a49c:	e0bff917 	ldw	r2,-28(fp)
 803a4a0:	e0fffd17 	ldw	r3,-12(fp)
 803a4a4:	10c00715 	stw	r3,28(r2)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
 803a4a8:	e0bffd17 	ldw	r2,-12(fp)
 803a4ac:	10bfffd8 	cmpnei	r2,r2,-1
 803a4b0:	1000471e 	bne	r2,zero,803a5d0 <udp4_socksend+0x2dc>
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
 803a4b4:	e0bffb17 	ldw	r2,-20(fp)
 803a4b8:	10800317 	ldw	r2,12(r2)
 803a4bc:	10000f26 	beq	r2,zero,803a4fc <udp4_socksend+0x208>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a4c0:	008201b4 	movhi	r2,2054
 803a4c4:	10bd1b17 	ldw	r2,-2964(r2)
 803a4c8:	e0bffc15 	stw	r2,-16(fp)
 803a4cc:	00000806 	br	803a4f0 <udp4_socksend+0x1fc>
        if (ifp->n_ipaddr == udpconn->u_lhost)
 803a4d0:	e0bffc17 	ldw	r2,-16(fp)
 803a4d4:	10c00a17 	ldw	r3,40(r2)
 803a4d8:	e0bffb17 	ldw	r2,-20(fp)
 803a4dc:	10800317 	ldw	r2,12(r2)
 803a4e0:	18801c26 	beq	r3,r2,803a554 <udp4_socksend+0x260>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a4e4:	e0bffc17 	ldw	r2,-16(fp)
 803a4e8:	10800017 	ldw	r2,0(r2)
 803a4ec:	e0bffc15 	stw	r2,-16(fp)
 803a4f0:	e0bffc17 	ldw	r2,-16(fp)
 803a4f4:	103ff61e 	bne	r2,zero,803a4d0 <udp4_socksend+0x1dc>
 803a4f8:	00001906 	br	803a560 <udp4_socksend+0x26c>
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a4fc:	008201b4 	movhi	r2,2054
 803a500:	10bd1b17 	ldw	r2,-2964(r2)
 803a504:	e0bffc15 	stw	r2,-16(fp)
 803a508:	00000f06 	br	803a548 <udp4_socksend+0x254>
        if ((ifp->n_flags & NF_BCAST) &&
 803a50c:	e0bffc17 	ldw	r2,-16(fp)
 803a510:	10802a17 	ldw	r2,168(r2)
 803a514:	1080004c 	andi	r2,r2,1
 803a518:	10000826 	beq	r2,zero,803a53c <udp4_socksend+0x248>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803a51c:	e0bffc17 	ldw	r2,-16(fp)
 803a520:	10802717 	ldw	r2,156(r2)
        if ((ifp->n_flags & NF_BCAST) &&
 803a524:	10000526 	beq	r2,zero,803a53c <udp4_socksend+0x248>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803a528:	e0bffc17 	ldw	r2,-16(fp)
 803a52c:	10802717 	ldw	r2,156(r2)
 803a530:	10800617 	ldw	r2,24(r2)
 803a534:	10800058 	cmpnei	r2,r2,1
 803a538:	10000826 	beq	r2,zero,803a55c <udp4_socksend+0x268>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a53c:	e0bffc17 	ldw	r2,-16(fp)
 803a540:	10800017 	ldw	r2,0(r2)
 803a544:	e0bffc15 	stw	r2,-16(fp)
 803a548:	e0bffc17 	ldw	r2,-16(fp)
 803a54c:	103fef1e 	bne	r2,zero,803a50c <udp4_socksend+0x218>
 803a550:	00000306 	br	803a560 <udp4_socksend+0x26c>
          break;
 803a554:	0001883a 	nop
 803a558:	00000106 	br	803a560 <udp4_socksend+0x26c>
           break;
 803a55c:	0001883a 	nop
    }
    if (ifp == NULL)
 803a560:	e0bffc17 	ldw	r2,-16(fp)
 803a564:	1000171e 	bne	r2,zero,803a5c4 <udp4_socksend+0x2d0>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a568:	008201b4 	movhi	r2,2054
 803a56c:	10bd1b17 	ldw	r2,-2964(r2)
 803a570:	e0bffc15 	stw	r2,-16(fp)
 803a574:	00000b06 	br	803a5a4 <udp4_socksend+0x2b0>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 803a578:	e0bffc17 	ldw	r2,-16(fp)
 803a57c:	10802717 	ldw	r2,156(r2)
 803a580:	10000526 	beq	r2,zero,803a598 <udp4_socksend+0x2a4>
 803a584:	e0bffc17 	ldw	r2,-16(fp)
 803a588:	10802717 	ldw	r2,156(r2)
 803a58c:	10800617 	ldw	r2,24(r2)
 803a590:	10800058 	cmpnei	r2,r2,1
 803a594:	10000626 	beq	r2,zero,803a5b0 <udp4_socksend+0x2bc>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803a598:	e0bffc17 	ldw	r2,-16(fp)
 803a59c:	10800017 	ldw	r2,0(r2)
 803a5a0:	e0bffc15 	stw	r2,-16(fp)
 803a5a4:	e0bffc17 	ldw	r2,-16(fp)
 803a5a8:	103ff31e 	bne	r2,zero,803a578 <udp4_socksend+0x284>
 803a5ac:	00000106 	br	803a5b4 <udp4_socksend+0x2c0>
          break;
 803a5b0:	0001883a 	nop
      if (ifp == NULL)
 803a5b4:	e0bffc17 	ldw	r2,-16(fp)
 803a5b8:	1000021e 	bne	r2,zero,803a5c4 <udp4_socksend+0x2d0>
        return(EADDRNOTAVAIL);
 803a5bc:	00801f44 	movi	r2,125
 803a5c0:	00002306 	br	803a650 <udp4_socksend+0x35c>
    }
    pkt->net = ifp;
 803a5c4:	e0bff917 	ldw	r2,-28(fp)
 803a5c8:	e0fffc17 	ldw	r3,-16(fp)
 803a5cc:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
 803a5d0:	e0bff717 	ldw	r2,-36(fp)
 803a5d4:	10800317 	ldw	r2,12(r2)
 803a5d8:	10000426 	beq	r2,zero,803a5ec <udp4_socksend+0x2f8>
     pkt->imo = so->inp_moptions;
 803a5dc:	e0bff717 	ldw	r2,-36(fp)
 803a5e0:	10c00317 	ldw	r3,12(r2)
 803a5e4:	e0bff917 	ldw	r2,-28(fp)
 803a5e8:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
 803a5ec:	e0bff717 	ldw	r2,-36(fp)
 803a5f0:	10801f17 	ldw	r2,124(r2)
 803a5f4:	10000426 	beq	r2,zero,803a608 <udp4_socksend+0x314>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
 803a5f8:	e0bff717 	ldw	r2,-36(fp)
 803a5fc:	10c01f17 	ldw	r3,124(r2)
 803a600:	e0bff917 	ldw	r2,-28(fp)
 803a604:	10c00c15 	stw	r3,48(r2)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
 803a608:	0009883a 	mov	r4,zero
 803a60c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
 803a610:	e0fffe8b 	ldhu	r3,-6(fp)
 803a614:	e0bffb17 	ldw	r2,-20(fp)
 803a618:	1080018b 	ldhu	r2,6(r2)
 803a61c:	10bfffcc 	andi	r2,r2,65535
 803a620:	e1bff917 	ldw	r6,-28(fp)
 803a624:	100b883a 	mov	r5,r2
 803a628:	1809883a 	mov	r4,r3
 803a62c:	8043d880 	call	8043d88 <udp_send>
 803a630:	e0bff815 	stw	r2,-32(fp)
  LOCK_NET_RESOURCE(NET_RESID);
 803a634:	0009883a 	mov	r4,zero
 803a638:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
  if (e < 0) 
 803a63c:	e0bff817 	ldw	r2,-32(fp)
 803a640:	1000020e 	bge	r2,zero,803a64c <udp4_socksend+0x358>
     return(e);
 803a644:	e0bff817 	ldw	r2,-32(fp)
 803a648:	00000106 	br	803a650 <udp4_socksend+0x35c>
  return 0;
 803a64c:	0005883a 	mov	r2,zero
}
 803a650:	e6ffff04 	addi	sp,fp,-4
 803a654:	dfc00217 	ldw	ra,8(sp)
 803a658:	df000117 	ldw	fp,4(sp)
 803a65c:	dc000017 	ldw	r16,0(sp)
 803a660:	dec00304 	addi	sp,sp,12
 803a664:	f800283a 	ret

0803a668 <udp4_sockaddr>:

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
 803a668:	defff904 	addi	sp,sp,-28
 803a66c:	dfc00615 	stw	ra,24(sp)
 803a670:	df000515 	stw	fp,20(sp)
 803a674:	df000504 	addi	fp,sp,20
 803a678:	e13ffd15 	stw	r4,-12(fp)
 803a67c:	e17ffc15 	stw	r5,-16(fp)
 803a680:	e1bffb15 	stw	r6,-20(fp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
 803a684:	e0bffc17 	ldw	r2,-16(fp)
 803a688:	10800317 	ldw	r2,12(r2)
 803a68c:	e0bfff15 	stw	r2,-4(fp)
  if (sin == NULL)
 803a690:	e0bfff17 	ldw	r2,-4(fp)
 803a694:	1000021e 	bne	r2,zero,803a6a0 <udp4_sockaddr+0x38>
     return(EINVAL);
 803a698:	00800584 	movi	r2,22
 803a69c:	00003706 	br	803a77c <udp4_sockaddr+0x114>
  udpconn = udp_lookup(so);
 803a6a0:	e13ffd17 	ldw	r4,-12(fp)
 803a6a4:	8039bf00 	call	8039bf0 <udp_lookup>
 803a6a8:	e0bffe15 	stw	r2,-8(fp)
  if (!udpconn)
 803a6ac:	e0bffe17 	ldw	r2,-8(fp)
 803a6b0:	1000021e 	bne	r2,zero,803a6bc <udp4_sockaddr+0x54>
     return(EINVAL);
 803a6b4:	00800584 	movi	r2,22
 803a6b8:	00003006 	br	803a77c <udp4_sockaddr+0x114>
  nam->m_len = sizeof(*sin);
 803a6bc:	e0bffc17 	ldw	r2,-16(fp)
 803a6c0:	00c00404 	movi	r3,16
 803a6c4:	10c00215 	stw	r3,8(r2)
  if (req == PRU_SOCKADDR)
 803a6c8:	e0bffb17 	ldw	r2,-20(fp)
 803a6cc:	108003d8 	cmpnei	r2,r2,15
 803a6d0:	1000151e 	bne	r2,zero,803a728 <udp4_sockaddr+0xc0>
  {
     sin->sin_family = AF_INET;
 803a6d4:	e0bfff17 	ldw	r2,-4(fp)
 803a6d8:	00c00084 	movi	r3,2
 803a6dc:	10c0000d 	sth	r3,0(r2)
     sin->sin_port = htons(udpconn->u_lport);
 803a6e0:	e0bffe17 	ldw	r2,-8(fp)
 803a6e4:	1080018b 	ldhu	r2,6(r2)
 803a6e8:	10bfffcc 	andi	r2,r2,65535
 803a6ec:	1004d23a 	srli	r2,r2,8
 803a6f0:	1007883a 	mov	r3,r2
 803a6f4:	e0bffe17 	ldw	r2,-8(fp)
 803a6f8:	1080018b 	ldhu	r2,6(r2)
 803a6fc:	10bfffcc 	andi	r2,r2,65535
 803a700:	1004923a 	slli	r2,r2,8
 803a704:	1884b03a 	or	r2,r3,r2
 803a708:	1007883a 	mov	r3,r2
 803a70c:	e0bfff17 	ldw	r2,-4(fp)
 803a710:	10c0008d 	sth	r3,2(r2)
     sin->sin_addr.s_addr = udpconn->u_lhost;
 803a714:	e0bffe17 	ldw	r2,-8(fp)
 803a718:	10c00317 	ldw	r3,12(r2)
 803a71c:	e0bfff17 	ldw	r2,-4(fp)
 803a720:	10c00115 	stw	r3,4(r2)
 803a724:	00001406 	br	803a778 <udp4_sockaddr+0x110>
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
 803a728:	e0bfff17 	ldw	r2,-4(fp)
 803a72c:	00c00084 	movi	r3,2
 803a730:	10c0000d 	sth	r3,0(r2)
    sin->sin_port = htons(udpconn->u_fport);
 803a734:	e0bffe17 	ldw	r2,-8(fp)
 803a738:	1080020b 	ldhu	r2,8(r2)
 803a73c:	10bfffcc 	andi	r2,r2,65535
 803a740:	1004d23a 	srli	r2,r2,8
 803a744:	1007883a 	mov	r3,r2
 803a748:	e0bffe17 	ldw	r2,-8(fp)
 803a74c:	1080020b 	ldhu	r2,8(r2)
 803a750:	10bfffcc 	andi	r2,r2,65535
 803a754:	1004923a 	slli	r2,r2,8
 803a758:	1884b03a 	or	r2,r3,r2
 803a75c:	1007883a 	mov	r3,r2
 803a760:	e0bfff17 	ldw	r2,-4(fp)
 803a764:	10c0008d 	sth	r3,2(r2)
    sin->sin_addr.s_addr = udpconn->u_fhost;
 803a768:	e0bffe17 	ldw	r2,-8(fp)
 803a76c:	10c00417 	ldw	r3,16(r2)
 803a770:	e0bfff17 	ldw	r2,-4(fp)
 803a774:	10c00115 	stw	r3,4(r2)
  }
  return 0;
 803a778:	0005883a 	mov	r2,zero
}
 803a77c:	e037883a 	mov	sp,fp
 803a780:	dfc00117 	ldw	ra,4(sp)
 803a784:	df000017 	ldw	fp,0(sp)
 803a788:	dec00204 	addi	sp,sp,8
 803a78c:	f800283a 	ret

0803a790 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 803a790:	defff504 	addi	sp,sp,-44
 803a794:	df000a15 	stw	fp,40(sp)
 803a798:	df000a04 	addi	fp,sp,40
 803a79c:	e13ff915 	stw	r4,-28(fp)
 803a7a0:	e17ff815 	stw	r5,-32(fp)
 803a7a4:	e1bff715 	stw	r6,-36(fp)
 803a7a8:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 803a7ac:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 803a7b0:	d0a0b317 	ldw	r2,-32052(gp)
  
  if (alt_ticks_per_second ())
 803a7b4:	10003e26 	beq	r2,zero,803a8b0 <alt_alarm_start+0x120>
  {
    if (alarm)
 803a7b8:	e0bff917 	ldw	r2,-28(fp)
 803a7bc:	10003a26 	beq	r2,zero,803a8a8 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 803a7c0:	e0bff917 	ldw	r2,-28(fp)
 803a7c4:	e0fff717 	ldw	r3,-36(fp)
 803a7c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 803a7cc:	e0bff917 	ldw	r2,-28(fp)
 803a7d0:	e0fff617 	ldw	r3,-40(fp)
 803a7d4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 803a7d8:	0005303a 	rdctl	r2,status
 803a7dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803a7e0:	e0fffd17 	ldw	r3,-12(fp)
 803a7e4:	00bfff84 	movi	r2,-2
 803a7e8:	1884703a 	and	r2,r3,r2
 803a7ec:	1001703a 	wrctl	status,r2
  return context;
 803a7f0:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 803a7f4:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 803a7f8:	d0a0b417 	ldw	r2,-32048(gp)
      
      current_nticks = alt_nticks();
 803a7fc:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 803a800:	e0fff817 	ldw	r3,-32(fp)
 803a804:	e0bfff17 	ldw	r2,-4(fp)
 803a808:	1885883a 	add	r2,r3,r2
 803a80c:	10c00044 	addi	r3,r2,1
 803a810:	e0bff917 	ldw	r2,-28(fp)
 803a814:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 803a818:	e0bff917 	ldw	r2,-28(fp)
 803a81c:	10c00217 	ldw	r3,8(r2)
 803a820:	e0bfff17 	ldw	r2,-4(fp)
 803a824:	1880042e 	bgeu	r3,r2,803a838 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 803a828:	e0bff917 	ldw	r2,-28(fp)
 803a82c:	00c00044 	movi	r3,1
 803a830:	10c00405 	stb	r3,16(r2)
 803a834:	00000206 	br	803a840 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 803a838:	e0bff917 	ldw	r2,-28(fp)
 803a83c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 803a840:	e0bff917 	ldw	r2,-28(fp)
 803a844:	d0e04704 	addi	r3,gp,-32484
 803a848:	e0fffb15 	stw	r3,-20(fp)
 803a84c:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 803a850:	e0bffa17 	ldw	r2,-24(fp)
 803a854:	e0fffb17 	ldw	r3,-20(fp)
 803a858:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803a85c:	e0bffb17 	ldw	r2,-20(fp)
 803a860:	10c00017 	ldw	r3,0(r2)
 803a864:	e0bffa17 	ldw	r2,-24(fp)
 803a868:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 803a86c:	e0bffb17 	ldw	r2,-20(fp)
 803a870:	10800017 	ldw	r2,0(r2)
 803a874:	e0fffa17 	ldw	r3,-24(fp)
 803a878:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803a87c:	e0bffb17 	ldw	r2,-20(fp)
 803a880:	e0fffa17 	ldw	r3,-24(fp)
 803a884:	10c00015 	stw	r3,0(r2)
}
 803a888:	0001883a 	nop
 803a88c:	e0bffe17 	ldw	r2,-8(fp)
 803a890:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803a894:	e0bffc17 	ldw	r2,-16(fp)
 803a898:	1001703a 	wrctl	status,r2
}
 803a89c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 803a8a0:	0005883a 	mov	r2,zero
 803a8a4:	00000306 	br	803a8b4 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 803a8a8:	00bffa84 	movi	r2,-22
 803a8ac:	00000106 	br	803a8b4 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 803a8b0:	00bfde84 	movi	r2,-134
  }
}
 803a8b4:	e037883a 	mov	sp,fp
 803a8b8:	df000017 	ldw	fp,0(sp)
 803a8bc:	dec00104 	addi	sp,sp,4
 803a8c0:	f800283a 	ret

0803a8c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 803a8c4:	defffa04 	addi	sp,sp,-24
 803a8c8:	dfc00515 	stw	ra,20(sp)
 803a8cc:	df000415 	stw	fp,16(sp)
 803a8d0:	df000404 	addi	fp,sp,16
 803a8d4:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 803a8d8:	008000c4 	movi	r2,3
 803a8dc:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 803a8e0:	e0fffe17 	ldw	r3,-8(fp)
 803a8e4:	008003f4 	movhi	r2,15
 803a8e8:	10909004 	addi	r2,r2,16960
 803a8ec:	1885383a 	mul	r2,r3,r2
 803a8f0:	100b883a 	mov	r5,r2
 803a8f4:	0100bef4 	movhi	r4,763
 803a8f8:	213c2004 	addi	r4,r4,-3968
 803a8fc:	800e2300 	call	800e230 <__udivsi3>
  big_loops = us / (INT_MAX/
 803a900:	100b883a 	mov	r5,r2
 803a904:	01200034 	movhi	r4,32768
 803a908:	213fffc4 	addi	r4,r4,-1
 803a90c:	800e2300 	call	800e230 <__udivsi3>
 803a910:	100b883a 	mov	r5,r2
 803a914:	e13ffc17 	ldw	r4,-16(fp)
 803a918:	800e2300 	call	800e230 <__udivsi3>
 803a91c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 803a920:	e0bffd17 	ldw	r2,-12(fp)
 803a924:	10002a26 	beq	r2,zero,803a9d0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 803a928:	e03fff15 	stw	zero,-4(fp)
 803a92c:	00001706 	br	803a98c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 803a930:	00a00034 	movhi	r2,32768
 803a934:	10bfffc4 	addi	r2,r2,-1
 803a938:	10bfffc4 	addi	r2,r2,-1
 803a93c:	103ffe1e 	bne	r2,zero,803a938 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 803a940:	e0fffe17 	ldw	r3,-8(fp)
 803a944:	008003f4 	movhi	r2,15
 803a948:	10909004 	addi	r2,r2,16960
 803a94c:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
 803a950:	100b883a 	mov	r5,r2
 803a954:	0100bef4 	movhi	r4,763
 803a958:	213c2004 	addi	r4,r4,-3968
 803a95c:	800e2300 	call	800e230 <__udivsi3>
 803a960:	100b883a 	mov	r5,r2
 803a964:	01200034 	movhi	r4,32768
 803a968:	213fffc4 	addi	r4,r4,-1
 803a96c:	800e2300 	call	800e230 <__udivsi3>
 803a970:	1007883a 	mov	r3,r2
 803a974:	e0bffc17 	ldw	r2,-16(fp)
 803a978:	10c5c83a 	sub	r2,r2,r3
 803a97c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 803a980:	e0bfff17 	ldw	r2,-4(fp)
 803a984:	10800044 	addi	r2,r2,1
 803a988:	e0bfff15 	stw	r2,-4(fp)
 803a98c:	e0ffff17 	ldw	r3,-4(fp)
 803a990:	e0bffd17 	ldw	r2,-12(fp)
 803a994:	18bfe616 	blt	r3,r2,803a930 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803a998:	e0fffe17 	ldw	r3,-8(fp)
 803a99c:	008003f4 	movhi	r2,15
 803a9a0:	10909004 	addi	r2,r2,16960
 803a9a4:	1885383a 	mul	r2,r3,r2
 803a9a8:	100b883a 	mov	r5,r2
 803a9ac:	0100bef4 	movhi	r4,763
 803a9b0:	213c2004 	addi	r4,r4,-3968
 803a9b4:	800e2300 	call	800e230 <__udivsi3>
 803a9b8:	1007883a 	mov	r3,r2
 803a9bc:	e0bffc17 	ldw	r2,-16(fp)
 803a9c0:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 803a9c4:	10bfffc4 	addi	r2,r2,-1
 803a9c8:	103ffe1e 	bne	r2,zero,803a9c4 <alt_busy_sleep+0x100>
 803a9cc:	00000d06 	br	803aa04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803a9d0:	e0fffe17 	ldw	r3,-8(fp)
 803a9d4:	008003f4 	movhi	r2,15
 803a9d8:	10909004 	addi	r2,r2,16960
 803a9dc:	1885383a 	mul	r2,r3,r2
 803a9e0:	100b883a 	mov	r5,r2
 803a9e4:	0100bef4 	movhi	r4,763
 803a9e8:	213c2004 	addi	r4,r4,-3968
 803a9ec:	800e2300 	call	800e230 <__udivsi3>
 803a9f0:	1007883a 	mov	r3,r2
 803a9f4:	e0bffc17 	ldw	r2,-16(fp)
 803a9f8:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 803a9fc:	10bfffc4 	addi	r2,r2,-1
 803aa00:	00bffe16 	blt	zero,r2,803a9fc <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 803aa04:	0005883a 	mov	r2,zero
}
 803aa08:	e037883a 	mov	sp,fp
 803aa0c:	dfc00117 	ldw	ra,4(sp)
 803aa10:	df000017 	ldw	fp,0(sp)
 803aa14:	dec00204 	addi	sp,sp,8
 803aa18:	f800283a 	ret

0803aa1c <alt_get_errno>:
{
 803aa1c:	defffe04 	addi	sp,sp,-8
 803aa20:	dfc00115 	stw	ra,4(sp)
 803aa24:	df000015 	stw	fp,0(sp)
 803aa28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803aa2c:	d0a04317 	ldw	r2,-32500(gp)
 803aa30:	10000326 	beq	r2,zero,803aa40 <alt_get_errno+0x24>
 803aa34:	d0a04317 	ldw	r2,-32500(gp)
 803aa38:	103ee83a 	callr	r2
 803aa3c:	00000106 	br	803aa44 <alt_get_errno+0x28>
 803aa40:	d0a05a04 	addi	r2,gp,-32408
}
 803aa44:	e037883a 	mov	sp,fp
 803aa48:	dfc00117 	ldw	ra,4(sp)
 803aa4c:	df000017 	ldw	fp,0(sp)
 803aa50:	dec00204 	addi	sp,sp,8
 803aa54:	f800283a 	ret

0803aa58 <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 803aa58:	defffb04 	addi	sp,sp,-20
 803aa5c:	dfc00415 	stw	ra,16(sp)
 803aa60:	df000315 	stw	fp,12(sp)
 803aa64:	df000304 	addi	fp,sp,12
 803aa68:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 803aa6c:	e0bffd17 	ldw	r2,-12(fp)
 803aa70:	10000616 	blt	r2,zero,803aa8c <alt_close+0x34>
 803aa74:	e0bffd17 	ldw	r2,-12(fp)
 803aa78:	10c00324 	muli	r3,r2,12
 803aa7c:	00820174 	movhi	r2,2053
 803aa80:	10981b04 	addi	r2,r2,24684
 803aa84:	1885883a 	add	r2,r3,r2
 803aa88:	00000106 	br	803aa90 <alt_close+0x38>
 803aa8c:	0005883a 	mov	r2,zero
 803aa90:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 803aa94:	e0bfff17 	ldw	r2,-4(fp)
 803aa98:	10001926 	beq	r2,zero,803ab00 <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 803aa9c:	e0bfff17 	ldw	r2,-4(fp)
 803aaa0:	10800017 	ldw	r2,0(r2)
 803aaa4:	10800417 	ldw	r2,16(r2)
 803aaa8:	10000626 	beq	r2,zero,803aac4 <alt_close+0x6c>
 803aaac:	e0bfff17 	ldw	r2,-4(fp)
 803aab0:	10800017 	ldw	r2,0(r2)
 803aab4:	10800417 	ldw	r2,16(r2)
 803aab8:	e13fff17 	ldw	r4,-4(fp)
 803aabc:	103ee83a 	callr	r2
 803aac0:	00000106 	br	803aac8 <alt_close+0x70>
 803aac4:	0005883a 	mov	r2,zero
 803aac8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 803aacc:	e13ffd17 	ldw	r4,-12(fp)
 803aad0:	803b8640 	call	803b864 <alt_release_fd>
    if (rval < 0)
 803aad4:	e0bffe17 	ldw	r2,-8(fp)
 803aad8:	1000070e 	bge	r2,zero,803aaf8 <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
 803aadc:	803aa1c0 	call	803aa1c <alt_get_errno>
 803aae0:	1007883a 	mov	r3,r2
 803aae4:	e0bffe17 	ldw	r2,-8(fp)
 803aae8:	0085c83a 	sub	r2,zero,r2
 803aaec:	18800015 	stw	r2,0(r3)
      return -1;
 803aaf0:	00bfffc4 	movi	r2,-1
 803aaf4:	00000706 	br	803ab14 <alt_close+0xbc>
    }
    return 0;
 803aaf8:	0005883a 	mov	r2,zero
 803aafc:	00000506 	br	803ab14 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 803ab00:	803aa1c0 	call	803aa1c <alt_get_errno>
 803ab04:	1007883a 	mov	r3,r2
 803ab08:	00801444 	movi	r2,81
 803ab0c:	18800015 	stw	r2,0(r3)
    return -1;
 803ab10:	00bfffc4 	movi	r2,-1
  }
}
 803ab14:	e037883a 	mov	sp,fp
 803ab18:	dfc00117 	ldw	ra,4(sp)
 803ab1c:	df000017 	ldw	fp,0(sp)
 803ab20:	dec00204 	addi	sp,sp,8
 803ab24:	f800283a 	ret

0803ab28 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 803ab28:	defffb04 	addi	sp,sp,-20
 803ab2c:	df000415 	stw	fp,16(sp)
 803ab30:	df000404 	addi	fp,sp,16
 803ab34:	e13ffd15 	stw	r4,-12(fp)
 803ab38:	e17ffc15 	stw	r5,-16(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 803ab3c:	e0fffd17 	ldw	r3,-12(fp)
 803ab40:	e0bffc17 	ldw	r2,-16(fp)
 803ab44:	1885883a 	add	r2,r3,r2
 803ab48:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 803ab4c:	e0bffd17 	ldw	r2,-12(fp)
 803ab50:	e0bfff15 	stw	r2,-4(fp)
 803ab54:	00000506 	br	803ab6c <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 803ab58:	e0bfff17 	ldw	r2,-4(fp)
 803ab5c:	1000001b 	flushda	0(r2)
  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 803ab60:	e0bfff17 	ldw	r2,-4(fp)
 803ab64:	10800804 	addi	r2,r2,32
 803ab68:	e0bfff15 	stw	r2,-4(fp)
 803ab6c:	e0ffff17 	ldw	r3,-4(fp)
 803ab70:	e0bffe17 	ldw	r2,-8(fp)
 803ab74:	18bff836 	bltu	r3,r2,803ab58 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 803ab78:	e0bffd17 	ldw	r2,-12(fp)
 803ab7c:	108007cc 	andi	r2,r2,31
 803ab80:	10000226 	beq	r2,zero,803ab8c <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 803ab84:	e0bfff17 	ldw	r2,-4(fp)
 803ab88:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 803ab8c:	0001883a 	nop
 803ab90:	e037883a 	mov	sp,fp
 803ab94:	df000017 	ldw	fp,0(sp)
 803ab98:	dec00104 	addi	sp,sp,4
 803ab9c:	f800283a 	ret

0803aba0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 803aba0:	defffc04 	addi	sp,sp,-16
 803aba4:	df000315 	stw	fp,12(sp)
 803aba8:	df000304 	addi	fp,sp,12
 803abac:	e13fff15 	stw	r4,-4(fp)
 803abb0:	e17ffe15 	stw	r5,-8(fp)
 803abb4:	e1bffd15 	stw	r6,-12(fp)
  return len;
 803abb8:	e0bffd17 	ldw	r2,-12(fp)
}
 803abbc:	e037883a 	mov	sp,fp
 803abc0:	df000017 	ldw	fp,0(sp)
 803abc4:	dec00104 	addi	sp,sp,4
 803abc8:	f800283a 	ret

0803abcc <alt_get_errno>:
{
 803abcc:	defffe04 	addi	sp,sp,-8
 803abd0:	dfc00115 	stw	ra,4(sp)
 803abd4:	df000015 	stw	fp,0(sp)
 803abd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803abdc:	d0a04317 	ldw	r2,-32500(gp)
 803abe0:	10000326 	beq	r2,zero,803abf0 <alt_get_errno+0x24>
 803abe4:	d0a04317 	ldw	r2,-32500(gp)
 803abe8:	103ee83a 	callr	r2
 803abec:	00000106 	br	803abf4 <alt_get_errno+0x28>
 803abf0:	d0a05a04 	addi	r2,gp,-32408
}
 803abf4:	e037883a 	mov	sp,fp
 803abf8:	dfc00117 	ldw	ra,4(sp)
 803abfc:	df000017 	ldw	fp,0(sp)
 803ac00:	dec00204 	addi	sp,sp,8
 803ac04:	f800283a 	ret

0803ac08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 803ac08:	defffa04 	addi	sp,sp,-24
 803ac0c:	dfc00515 	stw	ra,20(sp)
 803ac10:	df000415 	stw	fp,16(sp)
 803ac14:	df000404 	addi	fp,sp,16
 803ac18:	e13ffd15 	stw	r4,-12(fp)
 803ac1c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 803ac20:	e0bffd17 	ldw	r2,-12(fp)
 803ac24:	10000326 	beq	r2,zero,803ac34 <alt_dev_llist_insert+0x2c>
 803ac28:	e0bffd17 	ldw	r2,-12(fp)
 803ac2c:	10800217 	ldw	r2,8(r2)
 803ac30:	1000061e 	bne	r2,zero,803ac4c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 803ac34:	803abcc0 	call	803abcc <alt_get_errno>
 803ac38:	1007883a 	mov	r3,r2
 803ac3c:	00800584 	movi	r2,22
 803ac40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 803ac44:	00bffa84 	movi	r2,-22
 803ac48:	00001406 	br	803ac9c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 803ac4c:	e0bffd17 	ldw	r2,-12(fp)
 803ac50:	e0fffc17 	ldw	r3,-16(fp)
 803ac54:	e0ffff15 	stw	r3,-4(fp)
 803ac58:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 803ac5c:	e0bffe17 	ldw	r2,-8(fp)
 803ac60:	e0ffff17 	ldw	r3,-4(fp)
 803ac64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803ac68:	e0bfff17 	ldw	r2,-4(fp)
 803ac6c:	10c00017 	ldw	r3,0(r2)
 803ac70:	e0bffe17 	ldw	r2,-8(fp)
 803ac74:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 803ac78:	e0bfff17 	ldw	r2,-4(fp)
 803ac7c:	10800017 	ldw	r2,0(r2)
 803ac80:	e0fffe17 	ldw	r3,-8(fp)
 803ac84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803ac88:	e0bfff17 	ldw	r2,-4(fp)
 803ac8c:	e0fffe17 	ldw	r3,-8(fp)
 803ac90:	10c00015 	stw	r3,0(r2)
}
 803ac94:	0001883a 	nop

  return 0;  
 803ac98:	0005883a 	mov	r2,zero
}
 803ac9c:	e037883a 	mov	sp,fp
 803aca0:	dfc00117 	ldw	ra,4(sp)
 803aca4:	df000017 	ldw	fp,0(sp)
 803aca8:	dec00204 	addi	sp,sp,8
 803acac:	f800283a 	ret

0803acb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 803acb0:	defffd04 	addi	sp,sp,-12
 803acb4:	dfc00215 	stw	ra,8(sp)
 803acb8:	df000115 	stw	fp,4(sp)
 803acbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803acc0:	00820174 	movhi	r2,2053
 803acc4:	10b7bf04 	addi	r2,r2,-8452
 803acc8:	e0bfff15 	stw	r2,-4(fp)
 803accc:	00000606 	br	803ace8 <_do_ctors+0x38>
        (*ctor) (); 
 803acd0:	e0bfff17 	ldw	r2,-4(fp)
 803acd4:	10800017 	ldw	r2,0(r2)
 803acd8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803acdc:	e0bfff17 	ldw	r2,-4(fp)
 803ace0:	10bfff04 	addi	r2,r2,-4
 803ace4:	e0bfff15 	stw	r2,-4(fp)
 803ace8:	e0ffff17 	ldw	r3,-4(fp)
 803acec:	00820174 	movhi	r2,2053
 803acf0:	10b7c004 	addi	r2,r2,-8448
 803acf4:	18bff62e 	bgeu	r3,r2,803acd0 <_do_ctors+0x20>
}
 803acf8:	0001883a 	nop
 803acfc:	0001883a 	nop
 803ad00:	e037883a 	mov	sp,fp
 803ad04:	dfc00117 	ldw	ra,4(sp)
 803ad08:	df000017 	ldw	fp,0(sp)
 803ad0c:	dec00204 	addi	sp,sp,8
 803ad10:	f800283a 	ret

0803ad14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 803ad14:	defffd04 	addi	sp,sp,-12
 803ad18:	dfc00215 	stw	ra,8(sp)
 803ad1c:	df000115 	stw	fp,4(sp)
 803ad20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803ad24:	00820174 	movhi	r2,2053
 803ad28:	10b7bf04 	addi	r2,r2,-8452
 803ad2c:	e0bfff15 	stw	r2,-4(fp)
 803ad30:	00000606 	br	803ad4c <_do_dtors+0x38>
        (*dtor) (); 
 803ad34:	e0bfff17 	ldw	r2,-4(fp)
 803ad38:	10800017 	ldw	r2,0(r2)
 803ad3c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803ad40:	e0bfff17 	ldw	r2,-4(fp)
 803ad44:	10bfff04 	addi	r2,r2,-4
 803ad48:	e0bfff15 	stw	r2,-4(fp)
 803ad4c:	e0ffff17 	ldw	r3,-4(fp)
 803ad50:	00820174 	movhi	r2,2053
 803ad54:	10b7c004 	addi	r2,r2,-8448
 803ad58:	18bff62e 	bgeu	r3,r2,803ad34 <_do_dtors+0x20>
}
 803ad5c:	0001883a 	nop
 803ad60:	0001883a 	nop
 803ad64:	e037883a 	mov	sp,fp
 803ad68:	dfc00117 	ldw	ra,4(sp)
 803ad6c:	df000017 	ldw	fp,0(sp)
 803ad70:	dec00204 	addi	sp,sp,8
 803ad74:	f800283a 	ret

0803ad78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 803ad78:	defffa04 	addi	sp,sp,-24
 803ad7c:	dfc00515 	stw	ra,20(sp)
 803ad80:	df000415 	stw	fp,16(sp)
 803ad84:	df000404 	addi	fp,sp,16
 803ad88:	e13ffd15 	stw	r4,-12(fp)
 803ad8c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 803ad90:	e0bffc17 	ldw	r2,-16(fp)
 803ad94:	10800017 	ldw	r2,0(r2)
 803ad98:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 803ad9c:	e13ffd17 	ldw	r4,-12(fp)
 803ada0:	8003a1c0 	call	8003a1c <strlen>
 803ada4:	10800044 	addi	r2,r2,1
 803ada8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 803adac:	00000d06 	br	803ade4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 803adb0:	e0bfff17 	ldw	r2,-4(fp)
 803adb4:	10800217 	ldw	r2,8(r2)
 803adb8:	e0fffe17 	ldw	r3,-8(fp)
 803adbc:	180d883a 	mov	r6,r3
 803adc0:	e17ffd17 	ldw	r5,-12(fp)
 803adc4:	1009883a 	mov	r4,r2
 803adc8:	8002e2c0 	call	8002e2c <memcmp>
 803adcc:	1000021e 	bne	r2,zero,803add8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 803add0:	e0bfff17 	ldw	r2,-4(fp)
 803add4:	00000706 	br	803adf4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 803add8:	e0bfff17 	ldw	r2,-4(fp)
 803addc:	10800017 	ldw	r2,0(r2)
 803ade0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 803ade4:	e0ffff17 	ldw	r3,-4(fp)
 803ade8:	e0bffc17 	ldw	r2,-16(fp)
 803adec:	18bff01e 	bne	r3,r2,803adb0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 803adf0:	0005883a 	mov	r2,zero
}
 803adf4:	e037883a 	mov	sp,fp
 803adf8:	dfc00117 	ldw	ra,4(sp)
 803adfc:	df000017 	ldw	fp,0(sp)
 803ae00:	dec00204 	addi	sp,sp,8
 803ae04:	f800283a 	ret

0803ae08 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 803ae08:	defffc04 	addi	sp,sp,-16
 803ae0c:	dfc00315 	stw	ra,12(sp)
 803ae10:	df000215 	stw	fp,8(sp)
 803ae14:	df000204 	addi	fp,sp,8
 803ae18:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 803ae1c:	d1604404 	addi	r5,gp,-32496
 803ae20:	e13ffe17 	ldw	r4,-8(fp)
 803ae24:	803ad780 	call	803ad78 <alt_find_dev>
 803ae28:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
 803ae2c:	e0bfff17 	ldw	r2,-4(fp)
 803ae30:	10000926 	beq	r2,zero,803ae58 <alt_flash_open_dev+0x50>
 803ae34:	e0bfff17 	ldw	r2,-4(fp)
 803ae38:	10800317 	ldw	r2,12(r2)
 803ae3c:	10000626 	beq	r2,zero,803ae58 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 803ae40:	e0bfff17 	ldw	r2,-4(fp)
 803ae44:	10800317 	ldw	r2,12(r2)
 803ae48:	e17ffe17 	ldw	r5,-8(fp)
 803ae4c:	e13fff17 	ldw	r4,-4(fp)
 803ae50:	103ee83a 	callr	r2
 803ae54:	00000106 	br	803ae5c <alt_flash_open_dev+0x54>
  }

  return dev;
 803ae58:	e0bfff17 	ldw	r2,-4(fp)
}
 803ae5c:	e037883a 	mov	sp,fp
 803ae60:	dfc00117 	ldw	ra,4(sp)
 803ae64:	df000017 	ldw	fp,0(sp)
 803ae68:	dec00204 	addi	sp,sp,8
 803ae6c:	f800283a 	ret

0803ae70 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 803ae70:	defffd04 	addi	sp,sp,-12
 803ae74:	dfc00215 	stw	ra,8(sp)
 803ae78:	df000115 	stw	fp,4(sp)
 803ae7c:	df000104 	addi	fp,sp,4
 803ae80:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 803ae84:	e0bfff17 	ldw	r2,-4(fp)
 803ae88:	10000826 	beq	r2,zero,803aeac <alt_flash_close_dev+0x3c>
 803ae8c:	e0bfff17 	ldw	r2,-4(fp)
 803ae90:	10800417 	ldw	r2,16(r2)
 803ae94:	10000526 	beq	r2,zero,803aeac <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 803ae98:	e0bfff17 	ldw	r2,-4(fp)
 803ae9c:	10800417 	ldw	r2,16(r2)
 803aea0:	e13fff17 	ldw	r4,-4(fp)
 803aea4:	103ee83a 	callr	r2
  }
  return;
 803aea8:	0001883a 	nop
 803aeac:	0001883a 	nop
}
 803aeb0:	e037883a 	mov	sp,fp
 803aeb4:	dfc00117 	ldw	ra,4(sp)
 803aeb8:	df000017 	ldw	fp,0(sp)
 803aebc:	dec00204 	addi	sp,sp,8
 803aec0:	f800283a 	ret

0803aec4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803aec4:	defff904 	addi	sp,sp,-28
 803aec8:	dfc00615 	stw	ra,24(sp)
 803aecc:	df000515 	stw	fp,20(sp)
 803aed0:	df000504 	addi	fp,sp,20
 803aed4:	e13fff15 	stw	r4,-4(fp)
 803aed8:	e17ffe15 	stw	r5,-8(fp)
 803aedc:	e1bffd15 	stw	r6,-12(fp)
 803aee0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 803aee4:	e0800217 	ldw	r2,8(fp)
 803aee8:	d8800015 	stw	r2,0(sp)
 803aeec:	e1fffc17 	ldw	r7,-16(fp)
 803aef0:	e1bffd17 	ldw	r6,-12(fp)
 803aef4:	e17ffe17 	ldw	r5,-8(fp)
 803aef8:	e13fff17 	ldw	r4,-4(fp)
 803aefc:	803b0740 	call	803b074 <alt_iic_isr_register>
}  
 803af00:	e037883a 	mov	sp,fp
 803af04:	dfc00117 	ldw	ra,4(sp)
 803af08:	df000017 	ldw	fp,0(sp)
 803af0c:	dec00204 	addi	sp,sp,8
 803af10:	f800283a 	ret

0803af14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 803af14:	defff904 	addi	sp,sp,-28
 803af18:	df000615 	stw	fp,24(sp)
 803af1c:	df000604 	addi	fp,sp,24
 803af20:	e13ffb15 	stw	r4,-20(fp)
 803af24:	e17ffa15 	stw	r5,-24(fp)
 803af28:	e0bffa17 	ldw	r2,-24(fp)
 803af2c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 803af30:	0005303a 	rdctl	r2,status
 803af34:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803af38:	e0fffe17 	ldw	r3,-8(fp)
 803af3c:	00bfff84 	movi	r2,-2
 803af40:	1884703a 	and	r2,r3,r2
 803af44:	1001703a 	wrctl	status,r2
  return context;
 803af48:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 803af4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 803af50:	00c00044 	movi	r3,1
 803af54:	e0bfff17 	ldw	r2,-4(fp)
 803af58:	1884983a 	sll	r2,r3,r2
 803af5c:	1007883a 	mov	r3,r2
 803af60:	d0a0b217 	ldw	r2,-32056(gp)
 803af64:	1884b03a 	or	r2,r3,r2
 803af68:	d0a0b215 	stw	r2,-32056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803af6c:	d0a0b217 	ldw	r2,-32056(gp)
 803af70:	100170fa 	wrctl	ienable,r2
 803af74:	e0bffd17 	ldw	r2,-12(fp)
 803af78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803af7c:	e0bffc17 	ldw	r2,-16(fp)
 803af80:	1001703a 	wrctl	status,r2
}
 803af84:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 803af88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 803af8c:	e037883a 	mov	sp,fp
 803af90:	df000017 	ldw	fp,0(sp)
 803af94:	dec00104 	addi	sp,sp,4
 803af98:	f800283a 	ret

0803af9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 803af9c:	defff904 	addi	sp,sp,-28
 803afa0:	df000615 	stw	fp,24(sp)
 803afa4:	df000604 	addi	fp,sp,24
 803afa8:	e13ffb15 	stw	r4,-20(fp)
 803afac:	e17ffa15 	stw	r5,-24(fp)
 803afb0:	e0bffa17 	ldw	r2,-24(fp)
 803afb4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 803afb8:	0005303a 	rdctl	r2,status
 803afbc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803afc0:	e0fffe17 	ldw	r3,-8(fp)
 803afc4:	00bfff84 	movi	r2,-2
 803afc8:	1884703a 	and	r2,r3,r2
 803afcc:	1001703a 	wrctl	status,r2
  return context;
 803afd0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 803afd4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 803afd8:	00c00044 	movi	r3,1
 803afdc:	e0bfff17 	ldw	r2,-4(fp)
 803afe0:	1884983a 	sll	r2,r3,r2
 803afe4:	0084303a 	nor	r2,zero,r2
 803afe8:	1007883a 	mov	r3,r2
 803afec:	d0a0b217 	ldw	r2,-32056(gp)
 803aff0:	1884703a 	and	r2,r3,r2
 803aff4:	d0a0b215 	stw	r2,-32056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803aff8:	d0a0b217 	ldw	r2,-32056(gp)
 803affc:	100170fa 	wrctl	ienable,r2
 803b000:	e0bffd17 	ldw	r2,-12(fp)
 803b004:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 803b008:	e0bffc17 	ldw	r2,-16(fp)
 803b00c:	1001703a 	wrctl	status,r2
}
 803b010:	0001883a 	nop
  return 0;
 803b014:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 803b018:	e037883a 	mov	sp,fp
 803b01c:	df000017 	ldw	fp,0(sp)
 803b020:	dec00104 	addi	sp,sp,4
 803b024:	f800283a 	ret

0803b028 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 803b028:	defffc04 	addi	sp,sp,-16
 803b02c:	df000315 	stw	fp,12(sp)
 803b030:	df000304 	addi	fp,sp,12
 803b034:	e13ffe15 	stw	r4,-8(fp)
 803b038:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 803b03c:	000530fa 	rdctl	r2,ienable
 803b040:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 803b044:	00c00044 	movi	r3,1
 803b048:	e0bffd17 	ldw	r2,-12(fp)
 803b04c:	1884983a 	sll	r2,r3,r2
 803b050:	1007883a 	mov	r3,r2
 803b054:	e0bfff17 	ldw	r2,-4(fp)
 803b058:	1884703a 	and	r2,r3,r2
 803b05c:	1004c03a 	cmpne	r2,r2,zero
 803b060:	10803fcc 	andi	r2,r2,255
}
 803b064:	e037883a 	mov	sp,fp
 803b068:	df000017 	ldw	fp,0(sp)
 803b06c:	dec00104 	addi	sp,sp,4
 803b070:	f800283a 	ret

0803b074 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803b074:	defff504 	addi	sp,sp,-44
 803b078:	dfc00a15 	stw	ra,40(sp)
 803b07c:	df000915 	stw	fp,36(sp)
 803b080:	df000904 	addi	fp,sp,36
 803b084:	e13ffa15 	stw	r4,-24(fp)
 803b088:	e17ff915 	stw	r5,-28(fp)
 803b08c:	e1bff815 	stw	r6,-32(fp)
 803b090:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 803b094:	00bffa84 	movi	r2,-22
 803b098:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 803b09c:	e0bff917 	ldw	r2,-28(fp)
 803b0a0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 803b0a4:	e0bffe17 	ldw	r2,-8(fp)
 803b0a8:	10800808 	cmpgei	r2,r2,32
 803b0ac:	1000251e 	bne	r2,zero,803b144 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 803b0b0:	0005303a 	rdctl	r2,status
 803b0b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803b0b8:	e0fffc17 	ldw	r3,-16(fp)
 803b0bc:	00bfff84 	movi	r2,-2
 803b0c0:	1884703a 	and	r2,r3,r2
 803b0c4:	1001703a 	wrctl	status,r2
  return context;
 803b0c8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 803b0cc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 803b0d0:	e0bffe17 	ldw	r2,-8(fp)
 803b0d4:	100890fa 	slli	r4,r2,3
 803b0d8:	e0fff817 	ldw	r3,-32(fp)
 803b0dc:	008201b4 	movhi	r2,2054
 803b0e0:	2085883a 	add	r2,r4,r2
 803b0e4:	10fc8215 	stw	r3,-3576(r2)
    alt_irq[id].context = isr_context;
 803b0e8:	e0bffe17 	ldw	r2,-8(fp)
 803b0ec:	100890fa 	slli	r4,r2,3
 803b0f0:	e0fff717 	ldw	r3,-36(fp)
 803b0f4:	008201b4 	movhi	r2,2054
 803b0f8:	2085883a 	add	r2,r4,r2
 803b0fc:	10fc8315 	stw	r3,-3572(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 803b100:	e0bff817 	ldw	r2,-32(fp)
 803b104:	10000526 	beq	r2,zero,803b11c <alt_iic_isr_register+0xa8>
 803b108:	e0bffe17 	ldw	r2,-8(fp)
 803b10c:	100b883a 	mov	r5,r2
 803b110:	e13ffa17 	ldw	r4,-24(fp)
 803b114:	803af140 	call	803af14 <alt_ic_irq_enable>
 803b118:	00000406 	br	803b12c <alt_iic_isr_register+0xb8>
 803b11c:	e0bffe17 	ldw	r2,-8(fp)
 803b120:	100b883a 	mov	r5,r2
 803b124:	e13ffa17 	ldw	r4,-24(fp)
 803b128:	803af9c0 	call	803af9c <alt_ic_irq_disable>
 803b12c:	e0bfff15 	stw	r2,-4(fp)
 803b130:	e0bffd17 	ldw	r2,-12(fp)
 803b134:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 803b138:	e0bffb17 	ldw	r2,-20(fp)
 803b13c:	1001703a 	wrctl	status,r2
}
 803b140:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 803b144:	e0bfff17 	ldw	r2,-4(fp)
}
 803b148:	e037883a 	mov	sp,fp
 803b14c:	dfc00117 	ldw	ra,4(sp)
 803b150:	df000017 	ldw	fp,0(sp)
 803b154:	dec00204 	addi	sp,sp,8
 803b158:	f800283a 	ret

0803b15c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 803b15c:	defff904 	addi	sp,sp,-28
 803b160:	dfc00615 	stw	ra,24(sp)
 803b164:	df000515 	stw	fp,20(sp)
 803b168:	df000504 	addi	fp,sp,20
 803b16c:	e13ffe15 	stw	r4,-8(fp)
 803b170:	e17ffd15 	stw	r5,-12(fp)
 803b174:	e1bffc15 	stw	r6,-16(fp)
 803b178:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 803b17c:	e1bffb17 	ldw	r6,-20(fp)
 803b180:	e17ffc17 	ldw	r5,-16(fp)
 803b184:	e13ffd17 	ldw	r4,-12(fp)
 803b188:	803b37c0 	call	803b37c <open>
 803b18c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 803b190:	e0bfff17 	ldw	r2,-4(fp)
 803b194:	10001716 	blt	r2,zero,803b1f4 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
 803b198:	e0bfff17 	ldw	r2,-4(fp)
 803b19c:	10c00324 	muli	r3,r2,12
 803b1a0:	00820174 	movhi	r2,2053
 803b1a4:	1885883a 	add	r2,r3,r2
 803b1a8:	10d81b17 	ldw	r3,24684(r2)
 803b1ac:	e0bffe17 	ldw	r2,-8(fp)
 803b1b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 803b1b4:	e0bfff17 	ldw	r2,-4(fp)
 803b1b8:	10c00324 	muli	r3,r2,12
 803b1bc:	00820174 	movhi	r2,2053
 803b1c0:	1885883a 	add	r2,r3,r2
 803b1c4:	10d81c17 	ldw	r3,24688(r2)
 803b1c8:	e0bffe17 	ldw	r2,-8(fp)
 803b1cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 803b1d0:	e0bfff17 	ldw	r2,-4(fp)
 803b1d4:	10c00324 	muli	r3,r2,12
 803b1d8:	00820174 	movhi	r2,2053
 803b1dc:	1885883a 	add	r2,r3,r2
 803b1e0:	10d81d17 	ldw	r3,24692(r2)
 803b1e4:	e0bffe17 	ldw	r2,-8(fp)
 803b1e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 803b1ec:	e13fff17 	ldw	r4,-4(fp)
 803b1f0:	803b8640 	call	803b864 <alt_release_fd>
  }
} 
 803b1f4:	0001883a 	nop
 803b1f8:	e037883a 	mov	sp,fp
 803b1fc:	dfc00117 	ldw	ra,4(sp)
 803b200:	df000017 	ldw	fp,0(sp)
 803b204:	dec00204 	addi	sp,sp,8
 803b208:	f800283a 	ret

0803b20c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 803b20c:	defffb04 	addi	sp,sp,-20
 803b210:	dfc00415 	stw	ra,16(sp)
 803b214:	df000315 	stw	fp,12(sp)
 803b218:	df000304 	addi	fp,sp,12
 803b21c:	e13fff15 	stw	r4,-4(fp)
 803b220:	e17ffe15 	stw	r5,-8(fp)
 803b224:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 803b228:	01c07fc4 	movi	r7,511
 803b22c:	01800044 	movi	r6,1
 803b230:	e17fff17 	ldw	r5,-4(fp)
 803b234:	01020174 	movhi	r4,2053
 803b238:	21181e04 	addi	r4,r4,24696
 803b23c:	803b15c0 	call	803b15c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 803b240:	01c07fc4 	movi	r7,511
 803b244:	000d883a 	mov	r6,zero
 803b248:	e17ffe17 	ldw	r5,-8(fp)
 803b24c:	01020174 	movhi	r4,2053
 803b250:	21181b04 	addi	r4,r4,24684
 803b254:	803b15c0 	call	803b15c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 803b258:	01c07fc4 	movi	r7,511
 803b25c:	01800044 	movi	r6,1
 803b260:	e17ffd17 	ldw	r5,-12(fp)
 803b264:	01020174 	movhi	r4,2053
 803b268:	21182104 	addi	r4,r4,24708
 803b26c:	803b15c0 	call	803b15c <alt_open_fd>
}  
 803b270:	0001883a 	nop
 803b274:	e037883a 	mov	sp,fp
 803b278:	dfc00117 	ldw	ra,4(sp)
 803b27c:	df000017 	ldw	fp,0(sp)
 803b280:	dec00204 	addi	sp,sp,8
 803b284:	f800283a 	ret

0803b288 <alt_get_errno>:
{
 803b288:	defffe04 	addi	sp,sp,-8
 803b28c:	dfc00115 	stw	ra,4(sp)
 803b290:	df000015 	stw	fp,0(sp)
 803b294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803b298:	d0a04317 	ldw	r2,-32500(gp)
 803b29c:	10000326 	beq	r2,zero,803b2ac <alt_get_errno+0x24>
 803b2a0:	d0a04317 	ldw	r2,-32500(gp)
 803b2a4:	103ee83a 	callr	r2
 803b2a8:	00000106 	br	803b2b0 <alt_get_errno+0x28>
 803b2ac:	d0a05a04 	addi	r2,gp,-32408
}
 803b2b0:	e037883a 	mov	sp,fp
 803b2b4:	dfc00117 	ldw	ra,4(sp)
 803b2b8:	df000017 	ldw	fp,0(sp)
 803b2bc:	dec00204 	addi	sp,sp,8
 803b2c0:	f800283a 	ret

0803b2c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 803b2c4:	defffd04 	addi	sp,sp,-12
 803b2c8:	df000215 	stw	fp,8(sp)
 803b2cc:	df000204 	addi	fp,sp,8
 803b2d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 803b2d4:	e0bffe17 	ldw	r2,-8(fp)
 803b2d8:	10800217 	ldw	r2,8(r2)
 803b2dc:	10d00034 	orhi	r3,r2,16384
 803b2e0:	e0bffe17 	ldw	r2,-8(fp)
 803b2e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 803b2e8:	e03fff15 	stw	zero,-4(fp)
 803b2ec:	00001a06 	br	803b358 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 803b2f0:	e0bfff17 	ldw	r2,-4(fp)
 803b2f4:	10c00324 	muli	r3,r2,12
 803b2f8:	00820174 	movhi	r2,2053
 803b2fc:	1885883a 	add	r2,r3,r2
 803b300:	10d81b17 	ldw	r3,24684(r2)
 803b304:	e0bffe17 	ldw	r2,-8(fp)
 803b308:	10800017 	ldw	r2,0(r2)
 803b30c:	18800f1e 	bne	r3,r2,803b34c <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803b310:	e0bfff17 	ldw	r2,-4(fp)
 803b314:	10c00324 	muli	r3,r2,12
 803b318:	00820174 	movhi	r2,2053
 803b31c:	1885883a 	add	r2,r3,r2
 803b320:	10981d17 	ldw	r2,24692(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
 803b324:	1000090e 	bge	r2,zero,803b34c <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
 803b328:	e0bfff17 	ldw	r2,-4(fp)
 803b32c:	10c00324 	muli	r3,r2,12
 803b330:	00820174 	movhi	r2,2053
 803b334:	10981b04 	addi	r2,r2,24684
 803b338:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803b33c:	e0fffe17 	ldw	r3,-8(fp)
 803b340:	18800226 	beq	r3,r2,803b34c <alt_file_locked+0x88>
    {
      return -EACCES;
 803b344:	00bffcc4 	movi	r2,-13
 803b348:	00000806 	br	803b36c <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
 803b34c:	e0bfff17 	ldw	r2,-4(fp)
 803b350:	10800044 	addi	r2,r2,1
 803b354:	e0bfff15 	stw	r2,-4(fp)
 803b358:	d0a04217 	ldw	r2,-32504(gp)
 803b35c:	1007883a 	mov	r3,r2
 803b360:	e0bfff17 	ldw	r2,-4(fp)
 803b364:	18bfe22e 	bgeu	r3,r2,803b2f0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 803b368:	0005883a 	mov	r2,zero
}
 803b36c:	e037883a 	mov	sp,fp
 803b370:	df000017 	ldw	fp,0(sp)
 803b374:	dec00104 	addi	sp,sp,4
 803b378:	f800283a 	ret

0803b37c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 803b37c:	defff604 	addi	sp,sp,-40
 803b380:	dfc00915 	stw	ra,36(sp)
 803b384:	df000815 	stw	fp,32(sp)
 803b388:	df000804 	addi	fp,sp,32
 803b38c:	e13ffa15 	stw	r4,-24(fp)
 803b390:	e17ff915 	stw	r5,-28(fp)
 803b394:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 803b398:	00bfffc4 	movi	r2,-1
 803b39c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 803b3a0:	00bffb44 	movi	r2,-19
 803b3a4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 803b3a8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 803b3ac:	d1604004 	addi	r5,gp,-32512
 803b3b0:	e13ffa17 	ldw	r4,-24(fp)
 803b3b4:	803ad780 	call	803ad78 <alt_find_dev>
 803b3b8:	e0bfff15 	stw	r2,-4(fp)
 803b3bc:	e0bfff17 	ldw	r2,-4(fp)
 803b3c0:	1000051e 	bne	r2,zero,803b3d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 803b3c4:	e13ffa17 	ldw	r4,-24(fp)
 803b3c8:	8048d640 	call	8048d64 <alt_find_file>
 803b3cc:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 803b3d0:	00800044 	movi	r2,1
 803b3d4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 803b3d8:	e0bfff17 	ldw	r2,-4(fp)
 803b3dc:	10002926 	beq	r2,zero,803b484 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 803b3e0:	e13fff17 	ldw	r4,-4(fp)
 803b3e4:	8048e6c0 	call	8048e6c <alt_get_fd>
 803b3e8:	e0bffe15 	stw	r2,-8(fp)
 803b3ec:	e0bffe17 	ldw	r2,-8(fp)
 803b3f0:	1000030e 	bge	r2,zero,803b400 <open+0x84>
    {
      status = index;
 803b3f4:	e0bffe17 	ldw	r2,-8(fp)
 803b3f8:	e0bffd15 	stw	r2,-12(fp)
 803b3fc:	00002306 	br	803b48c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 803b400:	e0bffe17 	ldw	r2,-8(fp)
 803b404:	10c00324 	muli	r3,r2,12
 803b408:	00820174 	movhi	r2,2053
 803b40c:	10981b04 	addi	r2,r2,24684
 803b410:	1885883a 	add	r2,r3,r2
 803b414:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 803b418:	e0fff917 	ldw	r3,-28(fp)
 803b41c:	00900034 	movhi	r2,16384
 803b420:	10bfffc4 	addi	r2,r2,-1
 803b424:	1886703a 	and	r3,r3,r2
 803b428:	e0bffb17 	ldw	r2,-20(fp)
 803b42c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 803b430:	e0bffc17 	ldw	r2,-16(fp)
 803b434:	1000051e 	bne	r2,zero,803b44c <open+0xd0>
 803b438:	e13ffb17 	ldw	r4,-20(fp)
 803b43c:	803b2c40 	call	803b2c4 <alt_file_locked>
 803b440:	e0bffd15 	stw	r2,-12(fp)
 803b444:	e0bffd17 	ldw	r2,-12(fp)
 803b448:	10001016 	blt	r2,zero,803b48c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 803b44c:	e0bfff17 	ldw	r2,-4(fp)
 803b450:	10800317 	ldw	r2,12(r2)
 803b454:	10000826 	beq	r2,zero,803b478 <open+0xfc>
 803b458:	e0bfff17 	ldw	r2,-4(fp)
 803b45c:	10800317 	ldw	r2,12(r2)
 803b460:	e1fff817 	ldw	r7,-32(fp)
 803b464:	e1bff917 	ldw	r6,-28(fp)
 803b468:	e17ffa17 	ldw	r5,-24(fp)
 803b46c:	e13ffb17 	ldw	r4,-20(fp)
 803b470:	103ee83a 	callr	r2
 803b474:	00000106 	br	803b47c <open+0x100>
 803b478:	0005883a 	mov	r2,zero
 803b47c:	e0bffd15 	stw	r2,-12(fp)
 803b480:	00000206 	br	803b48c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 803b484:	00bffb44 	movi	r2,-19
 803b488:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 803b48c:	e0bffd17 	ldw	r2,-12(fp)
 803b490:	1000090e 	bge	r2,zero,803b4b8 <open+0x13c>
  {
    alt_release_fd (index);  
 803b494:	e13ffe17 	ldw	r4,-8(fp)
 803b498:	803b8640 	call	803b864 <alt_release_fd>
    ALT_ERRNO = -status;
 803b49c:	803b2880 	call	803b288 <alt_get_errno>
 803b4a0:	1007883a 	mov	r3,r2
 803b4a4:	e0bffd17 	ldw	r2,-12(fp)
 803b4a8:	0085c83a 	sub	r2,zero,r2
 803b4ac:	18800015 	stw	r2,0(r3)
    return -1;
 803b4b0:	00bfffc4 	movi	r2,-1
 803b4b4:	00000106 	br	803b4bc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 803b4b8:	e0bffe17 	ldw	r2,-8(fp)
}
 803b4bc:	e037883a 	mov	sp,fp
 803b4c0:	dfc00117 	ldw	ra,4(sp)
 803b4c4:	df000017 	ldw	fp,0(sp)
 803b4c8:	dec00204 	addi	sp,sp,8
 803b4cc:	f800283a 	ret

0803b4d0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 803b4d0:	defff204 	addi	sp,sp,-56
 803b4d4:	dfc00a15 	stw	ra,40(sp)
 803b4d8:	df000915 	stw	fp,36(sp)
 803b4dc:	df000904 	addi	fp,sp,36
 803b4e0:	e13ff715 	stw	r4,-36(fp)
 803b4e4:	e1400215 	stw	r5,8(fp)
 803b4e8:	e1800315 	stw	r6,12(fp)
 803b4ec:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 803b4f0:	e0800204 	addi	r2,fp,8
 803b4f4:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 803b4f8:	e0bff717 	ldw	r2,-36(fp)
 803b4fc:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
 803b500:	00006f06 	br	803b6c0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 803b504:	e0bffec7 	ldb	r2,-5(fp)
 803b508:	10800960 	cmpeqi	r2,r2,37
 803b50c:	1000041e 	bne	r2,zero,803b520 <alt_printf+0x50>
        {
            alt_putchar(c);
 803b510:	e0bffec7 	ldb	r2,-5(fp)
 803b514:	1009883a 	mov	r4,r2
 803b518:	803b6fc0 	call	803b6fc <alt_putchar>
 803b51c:	00006806 	br	803b6c0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 803b520:	e0bfff17 	ldw	r2,-4(fp)
 803b524:	10c00044 	addi	r3,r2,1
 803b528:	e0ffff15 	stw	r3,-4(fp)
 803b52c:	10800003 	ldbu	r2,0(r2)
 803b530:	e0bffec5 	stb	r2,-5(fp)
 803b534:	e0bffec7 	ldb	r2,-5(fp)
 803b538:	10006926 	beq	r2,zero,803b6e0 <alt_printf+0x210>
            {
                if (c == '%')
 803b53c:	e0bffec7 	ldb	r2,-5(fp)
 803b540:	10800958 	cmpnei	r2,r2,37
 803b544:	1000041e 	bne	r2,zero,803b558 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 803b548:	e0bffec7 	ldb	r2,-5(fp)
 803b54c:	1009883a 	mov	r4,r2
 803b550:	803b6fc0 	call	803b6fc <alt_putchar>
 803b554:	00005a06 	br	803b6c0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 803b558:	e0bffec7 	ldb	r2,-5(fp)
 803b55c:	108018d8 	cmpnei	r2,r2,99
 803b560:	1000081e 	bne	r2,zero,803b584 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 803b564:	e0bff817 	ldw	r2,-32(fp)
 803b568:	10c00104 	addi	r3,r2,4
 803b56c:	e0fff815 	stw	r3,-32(fp)
 803b570:	10800017 	ldw	r2,0(r2)
 803b574:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
 803b578:	e13ff917 	ldw	r4,-28(fp)
 803b57c:	803b6fc0 	call	803b6fc <alt_putchar>
 803b580:	00004f06 	br	803b6c0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 803b584:	e0bffec7 	ldb	r2,-5(fp)
 803b588:	10801e18 	cmpnei	r2,r2,120
 803b58c:	1000341e 	bne	r2,zero,803b660 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 803b590:	e0bff817 	ldw	r2,-32(fp)
 803b594:	10c00104 	addi	r3,r2,4
 803b598:	e0fff815 	stw	r3,-32(fp)
 803b59c:	10800017 	ldw	r2,0(r2)
 803b5a0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 803b5a4:	e0bffb17 	ldw	r2,-20(fp)
 803b5a8:	1000031e 	bne	r2,zero,803b5b8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 803b5ac:	01000c04 	movi	r4,48
 803b5b0:	803b6fc0 	call	803b6fc <alt_putchar>
                        continue;
 803b5b4:	00004206 	br	803b6c0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 803b5b8:	00800704 	movi	r2,28
 803b5bc:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 803b5c0:	00000306 	br	803b5d0 <alt_printf+0x100>
                        digit_shift -= 4;
 803b5c4:	e0bffd17 	ldw	r2,-12(fp)
 803b5c8:	10bfff04 	addi	r2,r2,-4
 803b5cc:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 803b5d0:	00c003c4 	movi	r3,15
 803b5d4:	e0bffd17 	ldw	r2,-12(fp)
 803b5d8:	1884983a 	sll	r2,r3,r2
 803b5dc:	1007883a 	mov	r3,r2
 803b5e0:	e0bffb17 	ldw	r2,-20(fp)
 803b5e4:	1884703a 	and	r2,r3,r2
 803b5e8:	103ff626 	beq	r2,zero,803b5c4 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 803b5ec:	00001906 	br	803b654 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 803b5f0:	00c003c4 	movi	r3,15
 803b5f4:	e0bffd17 	ldw	r2,-12(fp)
 803b5f8:	1884983a 	sll	r2,r3,r2
 803b5fc:	1007883a 	mov	r3,r2
 803b600:	e0bffb17 	ldw	r2,-20(fp)
 803b604:	1886703a 	and	r3,r3,r2
 803b608:	e0bffd17 	ldw	r2,-12(fp)
 803b60c:	1884d83a 	srl	r2,r3,r2
 803b610:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
 803b614:	e0bffa17 	ldw	r2,-24(fp)
 803b618:	108002a8 	cmpgeui	r2,r2,10
 803b61c:	1000041e 	bne	r2,zero,803b630 <alt_printf+0x160>
                            c = '0' + digit;
 803b620:	e0bffa17 	ldw	r2,-24(fp)
 803b624:	10800c04 	addi	r2,r2,48
 803b628:	e0bffec5 	stb	r2,-5(fp)
 803b62c:	00000306 	br	803b63c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 803b630:	e0bffa17 	ldw	r2,-24(fp)
 803b634:	108015c4 	addi	r2,r2,87
 803b638:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
 803b63c:	e0bffec7 	ldb	r2,-5(fp)
 803b640:	1009883a 	mov	r4,r2
 803b644:	803b6fc0 	call	803b6fc <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
 803b648:	e0bffd17 	ldw	r2,-12(fp)
 803b64c:	10bfff04 	addi	r2,r2,-4
 803b650:	e0bffd15 	stw	r2,-12(fp)
 803b654:	e0bffd17 	ldw	r2,-12(fp)
 803b658:	103fe50e 	bge	r2,zero,803b5f0 <alt_printf+0x120>
 803b65c:	00001806 	br	803b6c0 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
 803b660:	e0bffec7 	ldb	r2,-5(fp)
 803b664:	10801cd8 	cmpnei	r2,r2,115
 803b668:	1000151e 	bne	r2,zero,803b6c0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 803b66c:	e0bff817 	ldw	r2,-32(fp)
 803b670:	10c00104 	addi	r3,r2,4
 803b674:	e0fff815 	stw	r3,-32(fp)
 803b678:	10800017 	ldw	r2,0(r2)
 803b67c:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
 803b680:	00000906 	br	803b6a8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 803b684:	e0bffc17 	ldw	r2,-16(fp)
 803b688:	10c00044 	addi	r3,r2,1
 803b68c:	e0fffc15 	stw	r3,-16(fp)
 803b690:	10800003 	ldbu	r2,0(r2)
 803b694:	10803fcc 	andi	r2,r2,255
 803b698:	1080201c 	xori	r2,r2,128
 803b69c:	10bfe004 	addi	r2,r2,-128
 803b6a0:	1009883a 	mov	r4,r2
 803b6a4:	803b6fc0 	call	803b6fc <alt_putchar>
                    while(*s)
 803b6a8:	e0bffc17 	ldw	r2,-16(fp)
 803b6ac:	10800003 	ldbu	r2,0(r2)
 803b6b0:	10803fcc 	andi	r2,r2,255
 803b6b4:	1080201c 	xori	r2,r2,128
 803b6b8:	10bfe004 	addi	r2,r2,-128
 803b6bc:	103ff11e 	bne	r2,zero,803b684 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
 803b6c0:	e0bfff17 	ldw	r2,-4(fp)
 803b6c4:	10c00044 	addi	r3,r2,1
 803b6c8:	e0ffff15 	stw	r3,-4(fp)
 803b6cc:	10800003 	ldbu	r2,0(r2)
 803b6d0:	e0bffec5 	stb	r2,-5(fp)
 803b6d4:	e0bffec7 	ldb	r2,-5(fp)
 803b6d8:	103f8a1e 	bne	r2,zero,803b504 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 803b6dc:	00000106 	br	803b6e4 <alt_printf+0x214>
                break;
 803b6e0:	0001883a 	nop
}
 803b6e4:	0001883a 	nop
 803b6e8:	e037883a 	mov	sp,fp
 803b6ec:	dfc00117 	ldw	ra,4(sp)
 803b6f0:	df000017 	ldw	fp,0(sp)
 803b6f4:	dec00504 	addi	sp,sp,20
 803b6f8:	f800283a 	ret

0803b6fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 803b6fc:	defffd04 	addi	sp,sp,-12
 803b700:	dfc00215 	stw	ra,8(sp)
 803b704:	df000115 	stw	fp,4(sp)
 803b708:	df000104 	addi	fp,sp,4
 803b70c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 803b710:	e13fff17 	ldw	r4,-4(fp)
 803b714:	800329c0 	call	800329c <putchar>
#endif
#endif
}
 803b718:	e037883a 	mov	sp,fp
 803b71c:	dfc00117 	ldw	ra,4(sp)
 803b720:	df000017 	ldw	fp,0(sp)
 803b724:	dec00204 	addi	sp,sp,8
 803b728:	f800283a 	ret

0803b72c <alt_get_errno>:
{
 803b72c:	defffe04 	addi	sp,sp,-8
 803b730:	dfc00115 	stw	ra,4(sp)
 803b734:	df000015 	stw	fp,0(sp)
 803b738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803b73c:	d0a04317 	ldw	r2,-32500(gp)
 803b740:	10000326 	beq	r2,zero,803b750 <alt_get_errno+0x24>
 803b744:	d0a04317 	ldw	r2,-32500(gp)
 803b748:	103ee83a 	callr	r2
 803b74c:	00000106 	br	803b754 <alt_get_errno+0x28>
 803b750:	d0a05a04 	addi	r2,gp,-32408
}
 803b754:	e037883a 	mov	sp,fp
 803b758:	dfc00117 	ldw	ra,4(sp)
 803b75c:	df000017 	ldw	fp,0(sp)
 803b760:	dec00204 	addi	sp,sp,8
 803b764:	f800283a 	ret

0803b768 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 803b768:	defff904 	addi	sp,sp,-28
 803b76c:	dfc00615 	stw	ra,24(sp)
 803b770:	df000515 	stw	fp,20(sp)
 803b774:	df000504 	addi	fp,sp,20
 803b778:	e13ffd15 	stw	r4,-12(fp)
 803b77c:	e17ffc15 	stw	r5,-16(fp)
 803b780:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803b784:	e0bffd17 	ldw	r2,-12(fp)
 803b788:	10000616 	blt	r2,zero,803b7a4 <alt_read+0x3c>
 803b78c:	e0bffd17 	ldw	r2,-12(fp)
 803b790:	10c00324 	muli	r3,r2,12
 803b794:	00820174 	movhi	r2,2053
 803b798:	10981b04 	addi	r2,r2,24684
 803b79c:	1885883a 	add	r2,r3,r2
 803b7a0:	00000106 	br	803b7a8 <alt_read+0x40>
 803b7a4:	0005883a 	mov	r2,zero
 803b7a8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 803b7ac:	e0bfff17 	ldw	r2,-4(fp)
 803b7b0:	10002226 	beq	r2,zero,803b83c <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803b7b4:	e0bfff17 	ldw	r2,-4(fp)
 803b7b8:	10800217 	ldw	r2,8(r2)
 803b7bc:	108000cc 	andi	r2,r2,3
 803b7c0:	10800060 	cmpeqi	r2,r2,1
 803b7c4:	1000181e 	bne	r2,zero,803b828 <alt_read+0xc0>
        (fd->dev->read))
 803b7c8:	e0bfff17 	ldw	r2,-4(fp)
 803b7cc:	10800017 	ldw	r2,0(r2)
 803b7d0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803b7d4:	10001426 	beq	r2,zero,803b828 <alt_read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 803b7d8:	e0bfff17 	ldw	r2,-4(fp)
 803b7dc:	10800017 	ldw	r2,0(r2)
 803b7e0:	10800517 	ldw	r2,20(r2)
 803b7e4:	e0fffb17 	ldw	r3,-20(fp)
 803b7e8:	180d883a 	mov	r6,r3
 803b7ec:	e17ffc17 	ldw	r5,-16(fp)
 803b7f0:	e13fff17 	ldw	r4,-4(fp)
 803b7f4:	103ee83a 	callr	r2
 803b7f8:	e0bffe15 	stw	r2,-8(fp)
 803b7fc:	e0bffe17 	ldw	r2,-8(fp)
 803b800:	1000070e 	bge	r2,zero,803b820 <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
 803b804:	803b72c0 	call	803b72c <alt_get_errno>
 803b808:	1007883a 	mov	r3,r2
 803b80c:	e0bffe17 	ldw	r2,-8(fp)
 803b810:	0085c83a 	sub	r2,zero,r2
 803b814:	18800015 	stw	r2,0(r3)
          return -1;
 803b818:	00bfffc4 	movi	r2,-1
 803b81c:	00000c06 	br	803b850 <alt_read+0xe8>
        }
        return rval;
 803b820:	e0bffe17 	ldw	r2,-8(fp)
 803b824:	00000a06 	br	803b850 <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 803b828:	803b72c0 	call	803b72c <alt_get_errno>
 803b82c:	1007883a 	mov	r3,r2
 803b830:	00800344 	movi	r2,13
 803b834:	18800015 	stw	r2,0(r3)
 803b838:	00000406 	br	803b84c <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 803b83c:	803b72c0 	call	803b72c <alt_get_errno>
 803b840:	1007883a 	mov	r3,r2
 803b844:	00801444 	movi	r2,81
 803b848:	18800015 	stw	r2,0(r3)
  }
  return -1;
 803b84c:	00bfffc4 	movi	r2,-1
}
 803b850:	e037883a 	mov	sp,fp
 803b854:	dfc00117 	ldw	ra,4(sp)
 803b858:	df000017 	ldw	fp,0(sp)
 803b85c:	dec00204 	addi	sp,sp,8
 803b860:	f800283a 	ret

0803b864 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 803b864:	defffe04 	addi	sp,sp,-8
 803b868:	df000115 	stw	fp,4(sp)
 803b86c:	df000104 	addi	fp,sp,4
 803b870:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 803b874:	e0bfff17 	ldw	r2,-4(fp)
 803b878:	108000d0 	cmplti	r2,r2,3
 803b87c:	10000a1e 	bne	r2,zero,803b8a8 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
 803b880:	e0bfff17 	ldw	r2,-4(fp)
 803b884:	10c00324 	muli	r3,r2,12
 803b888:	00820174 	movhi	r2,2053
 803b88c:	1885883a 	add	r2,r3,r2
 803b890:	10181d15 	stw	zero,24692(r2)
    alt_fd_list[fd].dev      = 0;
 803b894:	e0bfff17 	ldw	r2,-4(fp)
 803b898:	10c00324 	muli	r3,r2,12
 803b89c:	00820174 	movhi	r2,2053
 803b8a0:	1885883a 	add	r2,r3,r2
 803b8a4:	10181b15 	stw	zero,24684(r2)
  }
}
 803b8a8:	0001883a 	nop
 803b8ac:	e037883a 	mov	sp,fp
 803b8b0:	df000017 	ldw	fp,0(sp)
 803b8b4:	dec00104 	addi	sp,sp,4
 803b8b8:	f800283a 	ret

0803b8bc <alt_remap_cached>:
 * Return a pointer that should be used to access the cached memory.
 */

void* 
alt_remap_cached(volatile void* ptr, alt_u32 len)
{
 803b8bc:	defffd04 	addi	sp,sp,-12
 803b8c0:	df000215 	stw	fp,8(sp)
 803b8c4:	df000204 	addi	fp,sp,8
 803b8c8:	e13fff15 	stw	r4,-4(fp)
 803b8cc:	e17ffe15 	stw	r5,-8(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  return (void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK);
 803b8d0:	e0ffff17 	ldw	r3,-4(fp)
 803b8d4:	00a00034 	movhi	r2,32768
 803b8d8:	10bfffc4 	addi	r2,r2,-1
 803b8dc:	1884703a 	and	r2,r3,r2
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  return (void*) ptr;
#endif /* No data cache */
}
 803b8e0:	e037883a 	mov	sp,fp
 803b8e4:	df000017 	ldw	fp,0(sp)
 803b8e8:	dec00104 	addi	sp,sp,4
 803b8ec:	f800283a 	ret

0803b8f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 803b8f0:	defffa04 	addi	sp,sp,-24
 803b8f4:	df000515 	stw	fp,20(sp)
 803b8f8:	df000504 	addi	fp,sp,20
 803b8fc:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 803b900:	0005303a 	rdctl	r2,status
 803b904:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803b908:	e0fffc17 	ldw	r3,-16(fp)
 803b90c:	00bfff84 	movi	r2,-2
 803b910:	1884703a 	and	r2,r3,r2
 803b914:	1001703a 	wrctl	status,r2
  return context;
 803b918:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 803b91c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 803b920:	e0bffb17 	ldw	r2,-20(fp)
 803b924:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 803b928:	e0bffd17 	ldw	r2,-12(fp)
 803b92c:	10800017 	ldw	r2,0(r2)
 803b930:	e0fffd17 	ldw	r3,-12(fp)
 803b934:	18c00117 	ldw	r3,4(r3)
 803b938:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 803b93c:	e0bffd17 	ldw	r2,-12(fp)
 803b940:	10800117 	ldw	r2,4(r2)
 803b944:	e0fffd17 	ldw	r3,-12(fp)
 803b948:	18c00017 	ldw	r3,0(r3)
 803b94c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 803b950:	e0bffd17 	ldw	r2,-12(fp)
 803b954:	e0fffd17 	ldw	r3,-12(fp)
 803b958:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 803b95c:	e0bffd17 	ldw	r2,-12(fp)
 803b960:	e0fffd17 	ldw	r3,-12(fp)
 803b964:	10c00015 	stw	r3,0(r2)
} 
 803b968:	0001883a 	nop
 803b96c:	e0bfff17 	ldw	r2,-4(fp)
 803b970:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 803b974:	e0bffe17 	ldw	r2,-8(fp)
 803b978:	1001703a 	wrctl	status,r2
}
 803b97c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 803b980:	0001883a 	nop
 803b984:	e037883a 	mov	sp,fp
 803b988:	df000017 	ldw	fp,0(sp)
 803b98c:	dec00104 	addi	sp,sp,4
 803b990:	f800283a 	ret

0803b994 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 803b994:	defffb04 	addi	sp,sp,-20
 803b998:	dfc00415 	stw	ra,16(sp)
 803b99c:	df000315 	stw	fp,12(sp)
 803b9a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 803b9a4:	d0a04717 	ldw	r2,-32484(gp)
 803b9a8:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 803b9ac:	d0a0b417 	ldw	r2,-32048(gp)
 803b9b0:	10800044 	addi	r2,r2,1
 803b9b4:	d0a0b415 	stw	r2,-32048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 803b9b8:	00002e06 	br	803ba74 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 803b9bc:	e0bfff17 	ldw	r2,-4(fp)
 803b9c0:	10800017 	ldw	r2,0(r2)
 803b9c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 803b9c8:	e0bfff17 	ldw	r2,-4(fp)
 803b9cc:	10800403 	ldbu	r2,16(r2)
 803b9d0:	10803fcc 	andi	r2,r2,255
 803b9d4:	10000426 	beq	r2,zero,803b9e8 <alt_tick+0x54>
 803b9d8:	d0a0b417 	ldw	r2,-32048(gp)
 803b9dc:	1000021e 	bne	r2,zero,803b9e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 803b9e0:	e0bfff17 	ldw	r2,-4(fp)
 803b9e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 803b9e8:	e0bfff17 	ldw	r2,-4(fp)
 803b9ec:	10800217 	ldw	r2,8(r2)
 803b9f0:	d0e0b417 	ldw	r3,-32048(gp)
 803b9f4:	18801d36 	bltu	r3,r2,803ba6c <alt_tick+0xd8>
 803b9f8:	e0bfff17 	ldw	r2,-4(fp)
 803b9fc:	10800403 	ldbu	r2,16(r2)
 803ba00:	10803fcc 	andi	r2,r2,255
 803ba04:	1000191e 	bne	r2,zero,803ba6c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 803ba08:	e0bfff17 	ldw	r2,-4(fp)
 803ba0c:	10800317 	ldw	r2,12(r2)
 803ba10:	e0ffff17 	ldw	r3,-4(fp)
 803ba14:	18c00517 	ldw	r3,20(r3)
 803ba18:	1809883a 	mov	r4,r3
 803ba1c:	103ee83a 	callr	r2
 803ba20:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 803ba24:	e0bffd17 	ldw	r2,-12(fp)
 803ba28:	1000031e 	bne	r2,zero,803ba38 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 803ba2c:	e13fff17 	ldw	r4,-4(fp)
 803ba30:	803b8f00 	call	803b8f0 <alt_alarm_stop>
 803ba34:	00000d06 	br	803ba6c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 803ba38:	e0bfff17 	ldw	r2,-4(fp)
 803ba3c:	10c00217 	ldw	r3,8(r2)
 803ba40:	e0bffd17 	ldw	r2,-12(fp)
 803ba44:	1887883a 	add	r3,r3,r2
 803ba48:	e0bfff17 	ldw	r2,-4(fp)
 803ba4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 803ba50:	e0bfff17 	ldw	r2,-4(fp)
 803ba54:	10c00217 	ldw	r3,8(r2)
 803ba58:	d0a0b417 	ldw	r2,-32048(gp)
 803ba5c:	1880032e 	bgeu	r3,r2,803ba6c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 803ba60:	e0bfff17 	ldw	r2,-4(fp)
 803ba64:	00c00044 	movi	r3,1
 803ba68:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 803ba6c:	e0bffe17 	ldw	r2,-8(fp)
 803ba70:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 803ba74:	e0ffff17 	ldw	r3,-4(fp)
 803ba78:	d0a04704 	addi	r2,gp,-32484
 803ba7c:	18bfcf1e 	bne	r3,r2,803b9bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 803ba80:	8011f400 	call	8011f40 <OSTimeTick>
}
 803ba84:	0001883a 	nop
 803ba88:	e037883a 	mov	sp,fp
 803ba8c:	dfc00117 	ldw	ra,4(sp)
 803ba90:	df000017 	ldw	fp,0(sp)
 803ba94:	dec00204 	addi	sp,sp,8
 803ba98:	f800283a 	ret

0803ba9c <alt_uncached_free>:
 * Free a block of uncached memory.
 */

void 
alt_uncached_free(volatile void* ptr)
{
 803ba9c:	defffd04 	addi	sp,sp,-12
 803baa0:	dfc00215 	stw	ra,8(sp)
 803baa4:	df000115 	stw	fp,4(sp)
 803baa8:	df000104 	addi	fp,sp,4
 803baac:	e13fff15 	stw	r4,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
 803bab0:	e0ffff17 	ldw	r3,-4(fp)
 803bab4:	00a00034 	movhi	r2,32768
 803bab8:	10bfffc4 	addi	r2,r2,-1
 803babc:	1884703a 	and	r2,r3,r2
 803bac0:	1009883a 	mov	r4,r2
 803bac4:	804a2e80 	call	804a2e8 <free>
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  free((void*)ptr);
#endif /* No data cache */
}
 803bac8:	0001883a 	nop
 803bacc:	e037883a 	mov	sp,fp
 803bad0:	dfc00117 	ldw	ra,4(sp)
 803bad4:	df000017 	ldw	fp,0(sp)
 803bad8:	dec00204 	addi	sp,sp,8
 803badc:	f800283a 	ret

0803bae0 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 803bae0:	defffa04 	addi	sp,sp,-24
 803bae4:	dfc00515 	stw	ra,20(sp)
 803bae8:	df000415 	stw	fp,16(sp)
 803baec:	df000404 	addi	fp,sp,16
 803baf0:	e13ffc15 	stw	r4,-16(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
 803baf4:	e0bffc17 	ldw	r2,-16(fp)
 803baf8:	108007c4 	addi	r2,r2,31
 803bafc:	1004d17a 	srli	r2,r2,5
 803bb00:	e0bfff15 	stw	r2,-4(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
 803bb04:	e0bfff17 	ldw	r2,-4(fp)
 803bb08:	1004917a 	slli	r2,r2,5
 803bb0c:	e0bffe15 	stw	r2,-8(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
 803bb10:	e17ffe17 	ldw	r5,-8(fp)
 803bb14:	01000804 	movi	r4,32
 803bb18:	804a12c0 	call	804a12c <memalign>
 803bb1c:	e0bffd15 	stw	r2,-12(fp)

  if (ptr == NULL) {
 803bb20:	e0bffd17 	ldw	r2,-12(fp)
 803bb24:	1000021e 	bne	r2,zero,803bb30 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
 803bb28:	0005883a 	mov	r2,zero
 803bb2c:	00000506 	br	803bb44 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
 803bb30:	e17ffe17 	ldw	r5,-8(fp)
 803bb34:	e13ffd17 	ldw	r4,-12(fp)
 803bb38:	803ab280 	call	803ab28 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
 803bb3c:	e0bffd17 	ldw	r2,-12(fp)
 803bb40:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
 803bb44:	e037883a 	mov	sp,fp
 803bb48:	dfc00117 	ldw	ra,4(sp)
 803bb4c:	df000017 	ldw	fp,0(sp)
 803bb50:	dec00204 	addi	sp,sp,8
 803bb54:	f800283a 	ret

0803bb58 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 803bb58:	defffa04 	addi	sp,sp,-24
 803bb5c:	dfc00515 	stw	ra,20(sp)
 803bb60:	df000415 	stw	fp,16(sp)
 803bb64:	dc000315 	stw	r16,12(sp)
 803bb68:	df000404 	addi	fp,sp,16
 803bb6c:	e13ffc15 	stw	r4,-16(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 803bb70:	d0a06643 	ldbu	r2,-32359(gp)
 803bb74:	10803fcc 	andi	r2,r2,255
 803bb78:	1000031e 	bne	r2,zero,803bb88 <usleep+0x30>
  {
    return alt_busy_sleep (us);
 803bb7c:	e13ffc17 	ldw	r4,-16(fp)
 803bb80:	803a8c40 	call	803a8c4 <alt_busy_sleep>
 803bb84:	00003306 	br	803bc54 <usleep+0xfc>
  return _alt_tick_rate;
 803bb88:	d0a0b317 	ldw	r2,-32052(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 803bb8c:	e0bffd15 	stw	r2,-12(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 803bb90:	e0bffc17 	ldw	r2,-16(fp)
 803bb94:	014003f4 	movhi	r5,15
 803bb98:	29509004 	addi	r5,r5,16960
 803bb9c:	1009883a 	mov	r4,r2
 803bba0:	800e2300 	call	800e230 <__udivsi3>
 803bba4:	1007883a 	mov	r3,r2
 803bba8:	e0bffd17 	ldw	r2,-12(fp)
 803bbac:	18a1383a 	mul	r16,r3,r2
 803bbb0:	e0bffc17 	ldw	r2,-16(fp)
 803bbb4:	014003f4 	movhi	r5,15
 803bbb8:	29509004 	addi	r5,r5,16960
 803bbbc:	1009883a 	mov	r4,r2
 803bbc0:	800e2940 	call	800e294 <__umodsi3>
 803bbc4:	1007883a 	mov	r3,r2
 803bbc8:	e0bffd17 	ldw	r2,-12(fp)
 803bbcc:	1885383a 	mul	r2,r3,r2
 803bbd0:	014003f4 	movhi	r5,15
 803bbd4:	29509004 	addi	r5,r5,16960
 803bbd8:	1009883a 	mov	r4,r2
 803bbdc:	800e2300 	call	800e230 <__udivsi3>
 803bbe0:	8085883a 	add	r2,r16,r2
 803bbe4:	e0bffe15 	stw	r2,-8(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 803bbe8:	00000706 	br	803bc08 <usleep+0xb0>
  {
    OSTimeDly(0xffff);
 803bbec:	013fffd4 	movui	r4,65535
 803bbf0:	80186cc0 	call	80186cc <OSTimeDly>
    ticks -= 0xffff;
 803bbf4:	e0fffe17 	ldw	r3,-8(fp)
 803bbf8:	00bffff4 	movhi	r2,65535
 803bbfc:	10800044 	addi	r2,r2,1
 803bc00:	1885883a 	add	r2,r3,r2
 803bc04:	e0bffe15 	stw	r2,-8(fp)
  while (ticks > 0xffff)
 803bc08:	e0bffe17 	ldw	r2,-8(fp)
 803bc0c:	00ffffd4 	movui	r3,65535
 803bc10:	18bff636 	bltu	r3,r2,803bbec <usleep+0x94>
  }

  OSTimeDly ((INT16U) (ticks));
 803bc14:	e0bffe17 	ldw	r2,-8(fp)
 803bc18:	10bfffcc 	andi	r2,r2,65535
 803bc1c:	1009883a 	mov	r4,r2
 803bc20:	80186cc0 	call	80186cc <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 803bc24:	e17ffd17 	ldw	r5,-12(fp)
 803bc28:	010003f4 	movhi	r4,15
 803bc2c:	21109004 	addi	r4,r4,16960
 803bc30:	800e2300 	call	800e230 <__udivsi3>
 803bc34:	1007883a 	mov	r3,r2
 803bc38:	e0bffc17 	ldw	r2,-16(fp)
 803bc3c:	180b883a 	mov	r5,r3
 803bc40:	1009883a 	mov	r4,r2
 803bc44:	800e2940 	call	800e294 <__umodsi3>
 803bc48:	1009883a 	mov	r4,r2
 803bc4c:	803a8c40 	call	803a8c4 <alt_busy_sleep>

  return 0;  
 803bc50:	0005883a 	mov	r2,zero
}
 803bc54:	e6ffff04 	addi	sp,fp,-4
 803bc58:	dfc00217 	ldw	ra,8(sp)
 803bc5c:	df000117 	ldw	fp,4(sp)
 803bc60:	dc000017 	ldw	r16,0(sp)
 803bc64:	dec00304 	addi	sp,sp,12
 803bc68:	f800283a 	ret

0803bc6c <alt_get_errno>:
{
 803bc6c:	defffe04 	addi	sp,sp,-8
 803bc70:	dfc00115 	stw	ra,4(sp)
 803bc74:	df000015 	stw	fp,0(sp)
 803bc78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803bc7c:	d0a04317 	ldw	r2,-32500(gp)
 803bc80:	10000326 	beq	r2,zero,803bc90 <alt_get_errno+0x24>
 803bc84:	d0a04317 	ldw	r2,-32500(gp)
 803bc88:	103ee83a 	callr	r2
 803bc8c:	00000106 	br	803bc94 <alt_get_errno+0x28>
 803bc90:	d0a05a04 	addi	r2,gp,-32408
}
 803bc94:	e037883a 	mov	sp,fp
 803bc98:	dfc00117 	ldw	ra,4(sp)
 803bc9c:	df000017 	ldw	fp,0(sp)
 803bca0:	dec00204 	addi	sp,sp,8
 803bca4:	f800283a 	ret

0803bca8 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 803bca8:	defff904 	addi	sp,sp,-28
 803bcac:	dfc00615 	stw	ra,24(sp)
 803bcb0:	df000515 	stw	fp,20(sp)
 803bcb4:	df000504 	addi	fp,sp,20
 803bcb8:	e13ffd15 	stw	r4,-12(fp)
 803bcbc:	e17ffc15 	stw	r5,-16(fp)
 803bcc0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803bcc4:	e0bffd17 	ldw	r2,-12(fp)
 803bcc8:	10000616 	blt	r2,zero,803bce4 <alt_write+0x3c>
 803bccc:	e0bffd17 	ldw	r2,-12(fp)
 803bcd0:	10c00324 	muli	r3,r2,12
 803bcd4:	00820174 	movhi	r2,2053
 803bcd8:	10981b04 	addi	r2,r2,24684
 803bcdc:	1885883a 	add	r2,r3,r2
 803bce0:	00000106 	br	803bce8 <alt_write+0x40>
 803bce4:	0005883a 	mov	r2,zero
 803bce8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 803bcec:	e0bfff17 	ldw	r2,-4(fp)
 803bcf0:	10002126 	beq	r2,zero,803bd78 <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 803bcf4:	e0bfff17 	ldw	r2,-4(fp)
 803bcf8:	10800217 	ldw	r2,8(r2)
 803bcfc:	108000cc 	andi	r2,r2,3
 803bd00:	10001826 	beq	r2,zero,803bd64 <alt_write+0xbc>
 803bd04:	e0bfff17 	ldw	r2,-4(fp)
 803bd08:	10800017 	ldw	r2,0(r2)
 803bd0c:	10800617 	ldw	r2,24(r2)
 803bd10:	10001426 	beq	r2,zero,803bd64 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 803bd14:	e0bfff17 	ldw	r2,-4(fp)
 803bd18:	10800017 	ldw	r2,0(r2)
 803bd1c:	10800617 	ldw	r2,24(r2)
 803bd20:	e0fffb17 	ldw	r3,-20(fp)
 803bd24:	180d883a 	mov	r6,r3
 803bd28:	e17ffc17 	ldw	r5,-16(fp)
 803bd2c:	e13fff17 	ldw	r4,-4(fp)
 803bd30:	103ee83a 	callr	r2
 803bd34:	e0bffe15 	stw	r2,-8(fp)
 803bd38:	e0bffe17 	ldw	r2,-8(fp)
 803bd3c:	1000070e 	bge	r2,zero,803bd5c <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
 803bd40:	803bc6c0 	call	803bc6c <alt_get_errno>
 803bd44:	1007883a 	mov	r3,r2
 803bd48:	e0bffe17 	ldw	r2,-8(fp)
 803bd4c:	0085c83a 	sub	r2,zero,r2
 803bd50:	18800015 	stw	r2,0(r3)
        return -1;
 803bd54:	00bfffc4 	movi	r2,-1
 803bd58:	00000c06 	br	803bd8c <alt_write+0xe4>
      }
      return rval;
 803bd5c:	e0bffe17 	ldw	r2,-8(fp)
 803bd60:	00000a06 	br	803bd8c <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 803bd64:	803bc6c0 	call	803bc6c <alt_get_errno>
 803bd68:	1007883a 	mov	r3,r2
 803bd6c:	00800344 	movi	r2,13
 803bd70:	18800015 	stw	r2,0(r3)
 803bd74:	00000406 	br	803bd88 <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 803bd78:	803bc6c0 	call	803bc6c <alt_get_errno>
 803bd7c:	1007883a 	mov	r3,r2
 803bd80:	00801444 	movi	r2,81
 803bd84:	18800015 	stw	r2,0(r3)
  }
  return -1;
 803bd88:	00bfffc4 	movi	r2,-1
}
 803bd8c:	e037883a 	mov	sp,fp
 803bd90:	dfc00117 	ldw	ra,4(sp)
 803bd94:	df000017 	ldw	fp,0(sp)
 803bd98:	dec00204 	addi	sp,sp,8
 803bd9c:	f800283a 	ret

0803bda0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 803bda0:	deffff04 	addi	sp,sp,-4
 803bda4:	df000015 	stw	fp,0(sp)
 803bda8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 803bdac:	000170fa 	wrctl	ienable,zero
}
 803bdb0:	0001883a 	nop
 803bdb4:	e037883a 	mov	sp,fp
 803bdb8:	df000017 	ldw	fp,0(sp)
 803bdbc:	dec00104 	addi	sp,sp,4
 803bdc0:	f800283a 	ret

0803bdc4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 803bdc4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 803bdc8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 803bdcc:	d1207517 	ldw	r4,-32300(gp)

      stw ra,  0(sp)
 803bdd0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 803bdd4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 803bdd8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 803bddc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 803bde0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 803bde4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 803bde8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 803bdec:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 803bdf0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 803bdf4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 803bdf8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 803bdfc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 803be00:	803c0280 	call	803c028 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 803be04:	d1207017 	ldw	r4,-32320(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 803be08:	d1606807 	ldb	r5,-32352(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 803be0c:	d1207515 	stw	r4,-32300(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 803be10:	d1606845 	stb	r5,-32351(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 803be14:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 803be18:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 803be1c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 803be20:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 803be24:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 803be28:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 803be2c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 803be30:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 803be34:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 803be38:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 803be3c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 803be40:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 803be44:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 803be48:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 803be4c:	f800283a 	ret

0803be50 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 803be50:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 803be54:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 803be58:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 803be5c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 803be60:	803c0280 	call	803c028 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 803be64:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 803be68:	d4a06645 	stb	r18,-32359(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 803be6c:	003fe506 	br	803be04 <OSCtxSw+0x40>

0803be70 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 803be70:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 803be74:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 803be78:	10800054 	ori	r2,r2,1
      wrctl status, r2
 803be7c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 803be80:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 803be84:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 803be88:	dec00204 	addi	sp,sp,8

      callr r2
 803be8c:	103ee83a 	callr	r2

      nop
 803be90:	0001883a 	nop

0803be94 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 803be94:	defff704 	addi	sp,sp,-36
 803be98:	dfc00815 	stw	ra,32(sp)
 803be9c:	df000715 	stw	fp,28(sp)
 803bea0:	df000704 	addi	fp,sp,28
 803bea4:	e13ffc15 	stw	r4,-16(fp)
 803bea8:	e17ffb15 	stw	r5,-20(fp)
 803beac:	e1bffa15 	stw	r6,-24(fp)
 803beb0:	3805883a 	mov	r2,r7
 803beb4:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 803beb8:	e0fffa17 	ldw	r3,-24(fp)
 803bebc:	00bfff04 	movi	r2,-4
 803bec0:	1884703a 	and	r2,r3,r2
 803bec4:	10bef704 	addi	r2,r2,-1060
 803bec8:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 803becc:	01810904 	movi	r6,1060
 803bed0:	000b883a 	mov	r5,zero
 803bed4:	e13fff17 	ldw	r4,-4(fp)
 803bed8:	8002fa40 	call	8002fa4 <memset>
 803bedc:	e0bfff17 	ldw	r2,-4(fp)
 803bee0:	10c0bb04 	addi	r3,r2,748
 803bee4:	e0bfff17 	ldw	r2,-4(fp)
 803bee8:	10c00115 	stw	r3,4(r2)
 803beec:	e0bfff17 	ldw	r2,-4(fp)
 803bef0:	10c0d504 	addi	r3,r2,852
 803bef4:	e0bfff17 	ldw	r2,-4(fp)
 803bef8:	10c00215 	stw	r3,8(r2)
 803befc:	e0bfff17 	ldw	r2,-4(fp)
 803bf00:	10c0ef04 	addi	r3,r2,956
 803bf04:	e0bfff17 	ldw	r2,-4(fp)
 803bf08:	10c00315 	stw	r3,12(r2)
 803bf0c:	e0bfff17 	ldw	r2,-4(fp)
 803bf10:	00c00044 	movi	r3,1
 803bf14:	10c02915 	stw	r3,164(r2)
 803bf18:	10002a15 	stw	zero,168(r2)
 803bf1c:	e0bfff17 	ldw	r2,-4(fp)
 803bf20:	00ccc384 	movi	r3,13070
 803bf24:	10c02b0d 	sth	r3,172(r2)
 803bf28:	e0bfff17 	ldw	r2,-4(fp)
 803bf2c:	00eaf344 	movi	r3,-21555
 803bf30:	10c02b8d 	sth	r3,174(r2)
 803bf34:	e0bfff17 	ldw	r2,-4(fp)
 803bf38:	00c48d04 	movi	r3,4660
 803bf3c:	10c02c0d 	sth	r3,176(r2)
 803bf40:	e0bfff17 	ldw	r2,-4(fp)
 803bf44:	00f99b44 	movi	r3,-6547
 803bf48:	10c02c8d 	sth	r3,178(r2)
 803bf4c:	e0bfff17 	ldw	r2,-4(fp)
 803bf50:	00f7bb04 	movi	r3,-8468
 803bf54:	10c02d0d 	sth	r3,180(r2)
 803bf58:	e0bfff17 	ldw	r2,-4(fp)
 803bf5c:	00c00144 	movi	r3,5
 803bf60:	10c02d8d 	sth	r3,182(r2)
 803bf64:	e0bfff17 	ldw	r2,-4(fp)
 803bf68:	00c002c4 	movi	r3,11
 803bf6c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 803bf70:	e0bfff17 	ldw	r2,-4(fp)
 803bf74:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 803bf78:	e0bffe17 	ldw	r2,-8(fp)
 803bf7c:	10bff304 	addi	r2,r2,-52
 803bf80:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 803bf84:	e0bffd17 	ldw	r2,-12(fp)
 803bf88:	10800c04 	addi	r2,r2,48
 803bf8c:	e0fffc17 	ldw	r3,-16(fp)
 803bf90:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 803bf94:	e0bffd17 	ldw	r2,-12(fp)
 803bf98:	10800b04 	addi	r2,r2,44
 803bf9c:	e0fffb17 	ldw	r3,-20(fp)
 803bfa0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 803bfa4:	e0bffd17 	ldw	r2,-12(fp)
 803bfa8:	10800a04 	addi	r2,r2,40
 803bfac:	e0ffff17 	ldw	r3,-4(fp)
 803bfb0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 803bfb4:	00820134 	movhi	r2,2052
 803bfb8:	10af9c04 	addi	r2,r2,-16784
 803bfbc:	10c00104 	addi	r3,r2,4
 803bfc0:	e0bffd17 	ldw	r2,-12(fp)
 803bfc4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 803bfc8:	e0bffd17 	ldw	r2,-12(fp)
}
 803bfcc:	e037883a 	mov	sp,fp
 803bfd0:	dfc00117 	ldw	ra,4(sp)
 803bfd4:	df000017 	ldw	fp,0(sp)
 803bfd8:	dec00204 	addi	sp,sp,8
 803bfdc:	f800283a 	ret

0803bfe0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 803bfe0:	defffe04 	addi	sp,sp,-8
 803bfe4:	df000115 	stw	fp,4(sp)
 803bfe8:	df000104 	addi	fp,sp,4
 803bfec:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 803bff0:	0001883a 	nop
 803bff4:	e037883a 	mov	sp,fp
 803bff8:	df000017 	ldw	fp,0(sp)
 803bffc:	dec00104 	addi	sp,sp,4
 803c000:	f800283a 	ret

0803c004 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 803c004:	defffe04 	addi	sp,sp,-8
 803c008:	df000115 	stw	fp,4(sp)
 803c00c:	df000104 	addi	fp,sp,4
 803c010:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 803c014:	0001883a 	nop
 803c018:	e037883a 	mov	sp,fp
 803c01c:	df000017 	ldw	fp,0(sp)
 803c020:	dec00104 	addi	sp,sp,4
 803c024:	f800283a 	ret

0803c028 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 803c028:	deffff04 	addi	sp,sp,-4
 803c02c:	df000015 	stw	fp,0(sp)
 803c030:	d839883a 	mov	fp,sp
}
 803c034:	0001883a 	nop
 803c038:	e037883a 	mov	sp,fp
 803c03c:	df000017 	ldw	fp,0(sp)
 803c040:	dec00104 	addi	sp,sp,4
 803c044:	f800283a 	ret

0803c048 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 803c048:	deffff04 	addi	sp,sp,-4
 803c04c:	df000015 	stw	fp,0(sp)
 803c050:	d839883a 	mov	fp,sp
}
 803c054:	0001883a 	nop
 803c058:	e037883a 	mov	sp,fp
 803c05c:	df000017 	ldw	fp,0(sp)
 803c060:	dec00104 	addi	sp,sp,4
 803c064:	f800283a 	ret

0803c068 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 803c068:	defffe04 	addi	sp,sp,-8
 803c06c:	dfc00115 	stw	ra,4(sp)
 803c070:	df000015 	stw	fp,0(sp)
 803c074:	d839883a 	mov	fp,sp
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
 803c078:	802c5600 	call	802c560 <cticks_hook>
#endif
}
 803c07c:	0001883a 	nop
 803c080:	e037883a 	mov	sp,fp
 803c084:	dfc00117 	ldw	ra,4(sp)
 803c088:	df000017 	ldw	fp,0(sp)
 803c08c:	dec00204 	addi	sp,sp,8
 803c090:	f800283a 	ret

0803c094 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 803c094:	deffff04 	addi	sp,sp,-4
 803c098:	df000015 	stw	fp,0(sp)
 803c09c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 803c0a0:	0001883a 	nop
 803c0a4:	e037883a 	mov	sp,fp
 803c0a8:	df000017 	ldw	fp,0(sp)
 803c0ac:	dec00104 	addi	sp,sp,4
 803c0b0:	f800283a 	ret

0803c0b4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 803c0b4:	deffff04 	addi	sp,sp,-4
 803c0b8:	df000015 	stw	fp,0(sp)
 803c0bc:	d839883a 	mov	fp,sp
}
 803c0c0:	0001883a 	nop
 803c0c4:	e037883a 	mov	sp,fp
 803c0c8:	df000017 	ldw	fp,0(sp)
 803c0cc:	dec00104 	addi	sp,sp,4
 803c0d0:	f800283a 	ret

0803c0d4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 803c0d4:	deffff04 	addi	sp,sp,-4
 803c0d8:	df000015 	stw	fp,0(sp)
 803c0dc:	d839883a 	mov	fp,sp
}
 803c0e0:	0001883a 	nop
 803c0e4:	e037883a 	mov	sp,fp
 803c0e8:	df000017 	ldw	fp,0(sp)
 803c0ec:	dec00104 	addi	sp,sp,4
 803c0f0:	f800283a 	ret

0803c0f4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 803c0f4:	defffe04 	addi	sp,sp,-8
 803c0f8:	df000115 	stw	fp,4(sp)
 803c0fc:	df000104 	addi	fp,sp,4
 803c100:	e13fff15 	stw	r4,-4(fp)
}
 803c104:	0001883a 	nop
 803c108:	e037883a 	mov	sp,fp
 803c10c:	df000017 	ldw	fp,0(sp)
 803c110:	dec00104 	addi	sp,sp,4
 803c114:	f800283a 	ret

0803c118 <netmain_init>:
 * RETURNS: 
 */

void 
netmain_init(void)
{
 803c118:	defffb04 	addi	sp,sp,-20
 803c11c:	dfc00415 	stw	ra,16(sp)
 803c120:	df000315 	stw	fp,12(sp)
 803c124:	dc000215 	stw	r16,8(sp)
 803c128:	df000304 	addi	fp,sp,12
   int   e = 0;
 803c12c:	e03ffe15 	stw	zero,-8(fp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
 803c130:	d0a04917 	ldw	r2,-32476(gp)
 803c134:	1009883a 	mov	r4,r2
 803c138:	80033800 	call	8003380 <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
 803c13c:	01020174 	movhi	r4,2053
 803c140:	210c6404 	addi	r4,r4,12688
 803c144:	80033800 	call	8003380 <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
 803c148:	802cccc0 	call	802cccc <pre_task_setup>
 803c14c:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803c150:	e0bffd17 	ldw	r2,-12(fp)
 803c154:	10000226 	beq	r2,zero,803c160 <netmain_init+0x48>
      panic(msg);
 803c158:	e13ffd17 	ldw	r4,-12(fp)
 803c15c:	8027fe00 	call	8027fe0 <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
 803c160:	8025d980 	call	8025d98 <ip_startup>
 803c164:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803c168:	e0bffd17 	ldw	r2,-12(fp)
 803c16c:	10000726 	beq	r2,zero,803c18c <netmain_init+0x74>
   {
      printf("inet startup error: %s\n", msg);
 803c170:	e17ffd17 	ldw	r5,-12(fp)
 803c174:	01020174 	movhi	r4,2053
 803c178:	210c7604 	addi	r4,r4,12760
 803c17c:	800325c0 	call	800325c <printf>
      panic("IP");
 803c180:	01020174 	movhi	r4,2053
 803c184:	210c7c04 	addi	r4,r4,12784
 803c188:	8027fe00 	call	8027fe0 <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
 803c18c:	8045dac0 	call	8045dac <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
 803c190:	80454000 	call	8045400 <u_mctest_init>

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
 803c194:	d0207e15 	stw	zero,-32264(gp)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 803c198:	008201b4 	movhi	r2,2054
 803c19c:	10bd1b17 	ldw	r2,-2964(r2)
 803c1a0:	14000104 	addi	r16,r2,4
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 803c1a4:	008201b4 	movhi	r2,2054
 803c1a8:	10bd1b17 	ldw	r2,-2964(r2)
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 803c1ac:	10800a17 	ldw	r2,40(r2)
 803c1b0:	1009883a 	mov	r4,r2
 803c1b4:	8027e240 	call	8027e24 <print_ipad>
 803c1b8:	100d883a 	mov	r6,r2
 803c1bc:	800b883a 	mov	r5,r16
 803c1c0:	01020174 	movhi	r4,2053
 803c1c4:	210c7d04 	addi	r4,r4,12788
 803c1c8:	800325c0 	call	800325c <printf>
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
 803c1cc:	802cd180 	call	802cd18 <post_task_setup>
 803c1d0:	e0bffd15 	stw	r2,-12(fp)
   if (msg)
 803c1d4:	e0bffd17 	ldw	r2,-12(fp)
 803c1d8:	10000226 	beq	r2,zero,803c1e4 <netmain_init+0xcc>
      panic(msg);
 803c1dc:	e13ffd17 	ldw	r4,-12(fp)
 803c1e0:	8027fe00 	call	8027fe0 <panic>
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
 803c1e4:	8045aa00 	call	8045aa0 <dhc_setup>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
 803c1e8:	0001883a 	nop
 803c1ec:	e6ffff04 	addi	sp,fp,-4
 803c1f0:	dfc00217 	ldw	ra,8(sp)
 803c1f4:	df000117 	ldw	fp,4(sp)
 803c1f8:	dc000017 	ldw	r16,0(sp)
 803c1fc:	dec00304 	addi	sp,sp,12
 803c200:	f800283a 	ret

0803c204 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
 803c204:	defffb04 	addi	sp,sp,-20
 803c208:	dfc00415 	stw	ra,16(sp)
 803c20c:	df000315 	stw	fp,12(sp)
 803c210:	dc000215 	stw	r16,8(sp)
 803c214:	df000304 	addi	fp,sp,12
 803c218:	e13ffe15 	stw	r4,-8(fp)
 803c21c:	e17ffd15 	stw	r5,-12(fp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
 803c220:	e0bffd17 	ldw	r2,-12(fp)
 803c224:	10800003 	ldbu	r2,0(r2)
 803c228:	10803fcc 	andi	r2,r2,255
 803c22c:	1080201c 	xori	r2,r2,128
 803c230:	10bfe004 	addi	r2,r2,-128
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
 803c234:	100690ba 	slli	r3,r2,2
 803c238:	00820174 	movhi	r2,2053
 803c23c:	1885883a 	add	r2,r3,r2
 803c240:	14187b17 	ldw	r16,25068(r2)
 803c244:	e0bffe17 	ldw	r2,-8(fp)
 803c248:	10800717 	ldw	r2,28(r2)
 803c24c:	1009883a 	mov	r4,r2
 803c250:	8027e240 	call	8027e24 <print_ipad>
 803c254:	100d883a 	mov	r6,r2
 803c258:	800b883a 	mov	r5,r16
 803c25c:	01020174 	movhi	r4,2053
 803c260:	210c8d04 	addi	r4,r4,12852
 803c264:	800325c0 	call	800325c <printf>
   dprintf(prompt);
 803c268:	d0a04a17 	ldw	r2,-32472(gp)
 803c26c:	1009883a 	mov	r4,r2
 803c270:	800325c0 	call	800325c <printf>
}
 803c274:	0001883a 	nop
 803c278:	e6ffff04 	addi	sp,fp,-4
 803c27c:	dfc00217 	ldw	ra,8(sp)
 803c280:	df000117 	ldw	fp,4(sp)
 803c284:	dc000017 	ldw	r16,0(sp)
 803c288:	dec00304 	addi	sp,sp,12
 803c28c:	f800283a 	ret

0803c290 <station_state>:
 * RETURNS: 
 */

int
station_state(void * pio)
{
 803c290:	defff904 	addi	sp,sp,-28
 803c294:	dfc00615 	stw	ra,24(sp)
 803c298:	df000515 	stw	fp,20(sp)
 803c29c:	dc000415 	stw	r16,16(sp)
 803c2a0:	df000504 	addi	fp,sp,20
 803c2a4:	e13ffc15 	stw	r4,-16(fp)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 803c2a8:	e03ffe15 	stw	zero,-8(fp)
 803c2ac:	008201b4 	movhi	r2,2054
 803c2b0:	10bd1b17 	ldw	r2,-2964(r2)
 803c2b4:	e0bffd15 	stw	r2,-12(fp)
 803c2b8:	00002506 	br	803c350 <station_state+0xc0>
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
 803c2bc:	e0bffd17 	ldw	r2,-12(fp)
 803c2c0:	14000104 	addi	r16,r2,4
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
 803c2c4:	e0bffd17 	ldw	r2,-12(fp)
 803c2c8:	10800a17 	ldw	r2,40(r2)
 803c2cc:	1009883a 	mov	r4,r2
 803c2d0:	8027e240 	call	8027e24 <print_ipad>
 803c2d4:	d8800015 	stw	r2,0(sp)
 803c2d8:	800f883a 	mov	r7,r16
 803c2dc:	e1bffe17 	ldw	r6,-8(fp)
 803c2e0:	01420174 	movhi	r5,2053
 803c2e4:	294c9604 	addi	r5,r5,12888
 803c2e8:	e13ffc17 	ldw	r4,-16(fp)
 803c2ec:	80281f80 	call	80281f8 <ns_printf>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
 803c2f0:	e0bffd17 	ldw	r2,-12(fp)
 803c2f4:	10800c17 	ldw	r2,48(r2)
 803c2f8:	1009883a 	mov	r4,r2
 803c2fc:	8027e240 	call	8027e24 <print_ipad>
 803c300:	100d883a 	mov	r6,r2
 803c304:	01420174 	movhi	r5,2053
 803c308:	294c9d04 	addi	r5,r5,12916
 803c30c:	e13ffc17 	ldw	r4,-16(fp)
 803c310:	80281f80 	call	80281f8 <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
 803c314:	e0bffd17 	ldw	r2,-12(fp)
 803c318:	10800d17 	ldw	r2,52(r2)
 803c31c:	1009883a 	mov	r4,r2
 803c320:	8027e240 	call	8027e24 <print_ipad>
 803c324:	100d883a 	mov	r6,r2
 803c328:	01420174 	movhi	r5,2053
 803c32c:	294ca004 	addi	r5,r5,12928
 803c330:	e13ffc17 	ldw	r4,-16(fp)
 803c334:	80281f80 	call	80281f8 <ns_printf>
   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 803c338:	e0bffd17 	ldw	r2,-12(fp)
 803c33c:	10800017 	ldw	r2,0(r2)
 803c340:	e0bffd15 	stw	r2,-12(fp)
 803c344:	e0bffe17 	ldw	r2,-8(fp)
 803c348:	10800044 	addi	r2,r2,1
 803c34c:	e0bffe15 	stw	r2,-8(fp)
 803c350:	e0bffd17 	ldw	r2,-12(fp)
 803c354:	103fd91e 	bne	r2,zero,803c2bc <station_state+0x2c>
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
 803c358:	d0a0a317 	ldw	r2,-32116(gp)
 803c35c:	100d883a 	mov	r6,r2
 803c360:	01420174 	movhi	r5,2053
 803c364:	294ca304 	addi	r5,r5,12940
 803c368:	e13ffc17 	ldw	r4,-16(fp)
 803c36c:	80281f80 	call	80281f8 <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
 803c370:	d0e04b17 	ldw	r3,-32468(gp)
 803c374:	d0a04b17 	ldw	r2,-32468(gp)
 803c378:	108002a4 	muli	r2,r2,10
 803c37c:	100f883a 	mov	r7,r2
 803c380:	180d883a 	mov	r6,r3
 803c384:	01420174 	movhi	r5,2053
 803c388:	294ca904 	addi	r5,r5,12964
 803c38c:	e13ffc17 	ldw	r4,-16(fp)
 803c390:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
 803c394:	d0a0b517 	ldw	r2,-32044(gp)
 803c398:	1009883a 	mov	r4,r2
 803c39c:	8027e240 	call	8027e24 <print_ipad>
 803c3a0:	100d883a 	mov	r6,r2
 803c3a4:	01420174 	movhi	r5,2053
 803c3a8:	294cb504 	addi	r5,r5,13012
 803c3ac:	e13ffc17 	ldw	r4,-16(fp)
 803c3b0:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
 803c3b4:	d0a04c17 	ldw	r2,-32464(gp)
 803c3b8:	100d883a 	mov	r6,r2
 803c3bc:	01420174 	movhi	r5,2053
 803c3c0:	294cbc04 	addi	r5,r5,13040
 803c3c4:	e13ffc17 	ldw	r4,-16(fp)
 803c3c8:	80281f80 	call	80281f8 <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
 803c3cc:	e13ffc17 	ldw	r4,-16(fp)
 803c3d0:	803c8b00 	call	803c8b0 <task_stats>

   return 0;
 803c3d4:	0005883a 	mov	r2,zero
}
 803c3d8:	e6ffff04 	addi	sp,fp,-4
 803c3dc:	dfc00217 	ldw	ra,8(sp)
 803c3e0:	df000117 	ldw	fp,4(sp)
 803c3e4:	dc000017 	ldw	r16,0(sp)
 803c3e8:	dec00304 	addi	sp,sp,12
 803c3ec:	f800283a 	ret

0803c3f0 <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
 803c3f0:	defffe04 	addi	sp,sp,-8
 803c3f4:	dfc00115 	stw	ra,4(sp)
 803c3f8:	df000015 	stw	fp,0(sp)
 803c3fc:	d839883a 	mov	fp,sp
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
 803c400:	d0a0a317 	ldw	r2,-32116(gp)
 803c404:	01401904 	movi	r5,100
 803c408:	1009883a 	mov	r4,r2
 803c40c:	800e2300 	call	800e230 <__udivsi3>
 803c410:	10801924 	muli	r2,r2,100
}
 803c414:	e037883a 	mov	sp,fp
 803c418:	dfc00117 	ldw	ra,4(sp)
 803c41c:	df000017 	ldw	fp,0(sp)
 803c420:	dec00204 	addi	sp,sp,8
 803c424:	f800283a 	ret

0803c428 <packet_check>:

static int inside_pktdemux = 0; 

void
packet_check(void)
{
 803c428:	defffe04 	addi	sp,sp,-8
 803c42c:	dfc00115 	stw	ra,4(sp)
 803c430:	df000015 	stw	fp,0(sp)
 803c434:	d839883a 	mov	fp,sp
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
 803c438:	d0a0b617 	ldw	r2,-32040(gp)
 803c43c:	1000081e 	bne	r2,zero,803c460 <packet_check+0x38>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   inside_pktdemux++;   /* set re-entrany flag */
 803c440:	d0a0b617 	ldw	r2,-32040(gp)
 803c444:	10800044 	addi	r2,r2,1
 803c448:	d0a0b615 	stw	r2,-32040(gp)
   pktdemux();          /* process low level packet input */
 803c44c:	80257d80 	call	80257d8 <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
 803c450:	d0a0b617 	ldw	r2,-32040(gp)
 803c454:	10bfffc4 	addi	r2,r2,-1
 803c458:	d0a0b615 	stw	r2,-32040(gp)
 803c45c:	00000106 	br	803c464 <packet_check+0x3c>
      return;           /* do not re-enter pktdemux(), packet will wait... */
 803c460:	0001883a 	nop
}
 803c464:	e037883a 	mov	sp,fp
 803c468:	dfc00117 	ldw	ra,4(sp)
 803c46c:	df000017 	ldw	fp,0(sp)
 803c470:	dec00204 	addi	sp,sp,8
 803c474:	f800283a 	ret

0803c478 <mcastlist>:
 * RETURNS: 
 */

int
mcastlist(struct in_multi * multi_ptr)
{
 803c478:	defffe04 	addi	sp,sp,-8
 803c47c:	df000115 	stw	fp,4(sp)
 803c480:	df000104 	addi	fp,sp,4
 803c484:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(multi_ptr);

   return 0;
 803c488:	0005883a 	mov	r2,zero
}
 803c48c:	e037883a 	mov	sp,fp
 803c490:	df000017 	ldw	fp,0(sp)
 803c494:	dec00104 	addi	sp,sp,4
 803c498:	f800283a 	ret

0803c49c <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
 803c49c:	defffd04 	addi	sp,sp,-12
 803c4a0:	dfc00215 	stw	ra,8(sp)
 803c4a4:	df000115 	stw	fp,4(sp)
 803c4a8:	df000104 	addi	fp,sp,4
#ifdef IP_V6
   ip6_addr host;
   int i;
#endif

int e = 0;
 803c4ac:	e03fff15 	stw	zero,-4(fp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
 803c4b0:	8048be00 	call	8048be0 <prep_vfs>
 803c4b4:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0)
 803c4b8:	e0bfff17 	ldw	r2,-4(fp)
 803c4bc:	10000626 	beq	r2,zero,803c4d8 <prep_modules+0x3c>
   {
      dprintf("VFS Module prep failed\n");
 803c4c0:	01020174 	movhi	r4,2053
 803c4c4:	210cc404 	addi	r4,r4,13072
 803c4c8:	80033800 	call	8003380 <puts>
      panic("prep_modules");
 803c4cc:	01020174 	movhi	r4,2053
 803c4d0:	210cca04 	addi	r4,r4,13096
 803c4d4:	8027fe00 	call	8027fe0 <panic>
   {
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
 803c4d8:	0005883a 	mov	r2,zero
}
 803c4dc:	e037883a 	mov	sp,fp
 803c4e0:	dfc00117 	ldw	ra,4(sp)
 803c4e4:	df000017 	ldw	fp,0(sp)
 803c4e8:	dec00204 	addi	sp,sp,8
 803c4ec:	f800283a 	ret

0803c4f0 <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
 803c4f0:	defffe04 	addi	sp,sp,-8
 803c4f4:	dfc00115 	stw	ra,4(sp)
 803c4f8:	df000015 	stw	fp,0(sp)
 803c4fc:	d839883a 	mov	fp,sp
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
 803c500:	d0e0c417 	ldw	r3,-31984(gp)
 803c504:	d0a0a317 	ldw	r2,-32116(gp)
 803c508:	1880012e 	bgeu	r3,r2,803c510 <inet_timer+0x20>
      ip_reasm_process_timer_tick ();
 803c50c:	80413e80 	call	80413e8 <ip_reasm_process_timer_tick>
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
 803c510:	802e78c0 	call	802e78c <tcp_tick>
#endif

#ifdef INICHE_TIMERS    /* interval timers? */
   check_interval_timers();
 803c514:	803c57c0 	call	803c57c <check_interval_timers>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
 803c518:	d0e08217 	ldw	r3,-32248(gp)
 803c51c:	d0a0a317 	ldw	r2,-32116(gp)
 803c520:	1880012e 	bgeu	r3,r2,803c528 <inet_timer+0x38>
      igmp_fasttimo();
 803c524:	80263080 	call	8026308 <igmp_fasttimo>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 803c528:	d0e0b717 	ldw	r3,-32036(gp)
 803c52c:	d0a0a317 	ldw	r2,-32116(gp)
 803c530:	18800436 	bltu	r3,r2,803c544 <inet_timer+0x54>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
 803c534:	d0a0a317 	ldw	r2,-32116(gp)
 803c538:	10c0fa04 	addi	r3,r2,1000
 803c53c:	d0a0b717 	ldw	r2,-32036(gp)
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 803c540:	1880082e 	bgeu	r3,r2,803c564 <inet_timer+0x74>
   {
      nextppp = cticks + TPS;
 803c544:	d0a0a317 	ldw	r2,-32116(gp)
 803c548:	10801904 	addi	r2,r2,100
 803c54c:	d0a0b715 	stw	r2,-32036(gp)

      if (port_1s_callout != NULL)
 803c550:	d0a0b817 	ldw	r2,-32032(gp)
 803c554:	10000226 	beq	r2,zero,803c560 <inet_timer+0x70>
         (*port_1s_callout)();
 803c558:	d0a0b817 	ldw	r2,-32032(gp)
 803c55c:	103ee83a 	callr	r2

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
 803c560:	802acd00 	call	802acd0 <dhc_second>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
 803c564:	0001883a 	nop
 803c568:	e037883a 	mov	sp,fp
 803c56c:	dfc00117 	ldw	ra,4(sp)
 803c570:	df000017 	ldw	fp,0(sp)
 803c574:	dec00204 	addi	sp,sp,8
 803c578:	f800283a 	ret

0803c57c <check_interval_timers>:

static int numtimers = 0;     /* number of active timers */

static void
check_interval_timers(void)
{
 803c57c:	defffc04 	addi	sp,sp,-16
 803c580:	dfc00315 	stw	ra,12(sp)
 803c584:	df000215 	stw	fp,8(sp)
 803c588:	df000204 	addi	fp,sp,8
   int   i;
   int   found = 0;  /* number of valid timers found */
 803c58c:	e03ffe15 	stw	zero,-8(fp)

   /* if no timers, just return */
   if (numtimers > 0)
 803c590:	d0a0b917 	ldw	r2,-32028(gp)
 803c594:	0080460e 	bge	zero,r2,803c6b0 <check_interval_timers+0x134>
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
 803c598:	e03fff15 	stw	zero,-4(fp)
 803c59c:	00003f06 	br	803c69c <check_interval_timers+0x120>
      {
         if (intimers[i].callback)   /* is this timer active? */
 803c5a0:	e0bfff17 	ldw	r2,-4(fp)
 803c5a4:	10c00524 	muli	r3,r2,20
 803c5a8:	008201b4 	movhi	r2,2054
 803c5ac:	1885883a 	add	r2,r3,r2
 803c5b0:	10bcc217 	ldw	r2,-3320(r2)
 803c5b4:	10003626 	beq	r2,zero,803c690 <check_interval_timers+0x114>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
 803c5b8:	e0bfff17 	ldw	r2,-4(fp)
 803c5bc:	10c00524 	muli	r3,r2,20
 803c5c0:	008201b4 	movhi	r2,2054
 803c5c4:	1885883a 	add	r2,r3,r2
 803c5c8:	10fcc517 	ldw	r3,-3308(r2)
 803c5cc:	d0a0a317 	ldw	r2,-32116(gp)
 803c5d0:	1880292e 	bgeu	r3,r2,803c678 <check_interval_timers+0xfc>
 803c5d4:	e0bfff17 	ldw	r2,-4(fp)
 803c5d8:	10c00524 	muli	r3,r2,20
 803c5dc:	008201b4 	movhi	r2,2054
 803c5e0:	1885883a 	add	r2,r3,r2
 803c5e4:	10bcc617 	ldw	r2,-3304(r2)
 803c5e8:	1000231e 	bne	r2,zero,803c678 <check_interval_timers+0xfc>
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
 803c5ec:	e0bfff17 	ldw	r2,-4(fp)
 803c5f0:	10c00524 	muli	r3,r2,20
 803c5f4:	008201b4 	movhi	r2,2054
 803c5f8:	1885883a 	add	r2,r3,r2
 803c5fc:	10fcc417 	ldw	r3,-3312(r2)
 803c600:	d0a0a317 	ldw	r2,-32116(gp)
 803c604:	1887883a 	add	r3,r3,r2
 803c608:	e0bfff17 	ldw	r2,-4(fp)
 803c60c:	11000524 	muli	r4,r2,20
 803c610:	008201b4 	movhi	r2,2054
 803c614:	2085883a 	add	r2,r4,r2
 803c618:	10fcc515 	stw	r3,-3308(r2)
               intimers[i].inuse = TRUE;
 803c61c:	e0bfff17 	ldw	r2,-4(fp)
 803c620:	11000524 	muli	r4,r2,20
 803c624:	00c00044 	movi	r3,1
 803c628:	008201b4 	movhi	r2,2054
 803c62c:	2085883a 	add	r2,r4,r2
 803c630:	10fcc615 	stw	r3,-3304(r2)
               intimers[i].callback(intimers[i].parm);      /* call user routine */
 803c634:	e0bfff17 	ldw	r2,-4(fp)
 803c638:	10c00524 	muli	r3,r2,20
 803c63c:	008201b4 	movhi	r2,2054
 803c640:	1885883a 	add	r2,r3,r2
 803c644:	10fcc217 	ldw	r3,-3320(r2)
 803c648:	e0bfff17 	ldw	r2,-4(fp)
 803c64c:	11000524 	muli	r4,r2,20
 803c650:	008201b4 	movhi	r2,2054
 803c654:	2085883a 	add	r2,r4,r2
 803c658:	10bcc317 	ldw	r2,-3316(r2)
 803c65c:	1009883a 	mov	r4,r2
 803c660:	183ee83a 	callr	r3
               intimers[i].inuse = FALSE;
 803c664:	e0bfff17 	ldw	r2,-4(fp)
 803c668:	10c00524 	muli	r3,r2,20
 803c66c:	008201b4 	movhi	r2,2054
 803c670:	1885883a 	add	r2,r3,r2
 803c674:	103cc615 	stw	zero,-3304(r2)
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
 803c678:	e0bffe17 	ldw	r2,-8(fp)
 803c67c:	10800044 	addi	r2,r2,1
 803c680:	e0bffe15 	stw	r2,-8(fp)
 803c684:	d0a0b917 	ldw	r2,-32028(gp)
 803c688:	e0fffe17 	ldw	r3,-8(fp)
 803c68c:	1880070e 	bge	r3,r2,803c6ac <check_interval_timers+0x130>
      for (i = 0; i < NUM_INTIMERS; i++)
 803c690:	e0bfff17 	ldw	r2,-4(fp)
 803c694:	10800044 	addi	r2,r2,1
 803c698:	e0bfff15 	stw	r2,-4(fp)
 803c69c:	e0bfff17 	ldw	r2,-4(fp)
 803c6a0:	10800150 	cmplti	r2,r2,5
 803c6a4:	103fbe1e 	bne	r2,zero,803c5a0 <check_interval_timers+0x24>
               break;
         }
      }
   }
}
 803c6a8:	00000106 	br	803c6b0 <check_interval_timers+0x134>
               break;
 803c6ac:	0001883a 	nop
}
 803c6b0:	0001883a 	nop
 803c6b4:	e037883a 	mov	sp,fp
 803c6b8:	dfc00117 	ldw	ra,4(sp)
 803c6bc:	df000017 	ldw	fp,0(sp)
 803c6c0:	dec00204 	addi	sp,sp,8
 803c6c4:	f800283a 	ret

0803c6c8 <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
 803c6c8:	defffa04 	addi	sp,sp,-24
 803c6cc:	dfc00515 	stw	ra,20(sp)
 803c6d0:	df000415 	stw	fp,16(sp)
 803c6d4:	df000404 	addi	fp,sp,16
 803c6d8:	e13ffe15 	stw	r4,-8(fp)
 803c6dc:	e17ffd15 	stw	r5,-12(fp)
 803c6e0:	e1bffc15 	stw	r6,-16(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 803c6e4:	e03fff15 	stw	zero,-4(fp)
 803c6e8:	00003906 	br	803c7d0 <in_timerset+0x108>
   {
      if(intimers[i].callback == NULL)
 803c6ec:	e0bfff17 	ldw	r2,-4(fp)
 803c6f0:	10c00524 	muli	r3,r2,20
 803c6f4:	008201b4 	movhi	r2,2054
 803c6f8:	1885883a 	add	r2,r3,r2
 803c6fc:	10bcc217 	ldw	r2,-3320(r2)
 803c700:	1000301e 	bne	r2,zero,803c7c4 <in_timerset+0xfc>
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
 803c704:	e0bfff17 	ldw	r2,-4(fp)
 803c708:	11000524 	muli	r4,r2,20
 803c70c:	e0fffe17 	ldw	r3,-8(fp)
 803c710:	008201b4 	movhi	r2,2054
 803c714:	2085883a 	add	r2,r4,r2
 803c718:	10fcc215 	stw	r3,-3320(r2)
         intimers[i].parm = parm;
 803c71c:	e0bfff17 	ldw	r2,-4(fp)
 803c720:	11000524 	muli	r4,r2,20
 803c724:	e0fffc17 	ldw	r3,-16(fp)
 803c728:	008201b4 	movhi	r2,2054
 803c72c:	2085883a 	add	r2,r4,r2
 803c730:	10fcc315 	stw	r3,-3316(r2)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
 803c734:	e0bffd17 	ldw	r2,-12(fp)
 803c738:	01400284 	movi	r5,10
 803c73c:	1009883a 	mov	r4,r2
 803c740:	800e13c0 	call	800e13c <__divsi3>
 803c744:	1009883a 	mov	r4,r2
 803c748:	e0bfff17 	ldw	r2,-4(fp)
 803c74c:	10c00524 	muli	r3,r2,20
 803c750:	008201b4 	movhi	r2,2054
 803c754:	1885883a 	add	r2,r3,r2
 803c758:	113cc415 	stw	r4,-3312(r2)
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
 803c75c:	e0bfff17 	ldw	r2,-4(fp)
 803c760:	10c00524 	muli	r3,r2,20
 803c764:	008201b4 	movhi	r2,2054
 803c768:	1885883a 	add	r2,r3,r2
 803c76c:	10fcc417 	ldw	r3,-3312(r2)
 803c770:	d0a0a317 	ldw	r2,-32116(gp)
 803c774:	1887883a 	add	r3,r3,r2
 803c778:	e0bfff17 	ldw	r2,-4(fp)
 803c77c:	11000524 	muli	r4,r2,20
 803c780:	008201b4 	movhi	r2,2054
 803c784:	2085883a 	add	r2,r4,r2
 803c788:	10fcc515 	stw	r3,-3308(r2)
		 intimers[i].inuse = FALSE;
 803c78c:	e0bfff17 	ldw	r2,-4(fp)
 803c790:	10c00524 	muli	r3,r2,20
 803c794:	008201b4 	movhi	r2,2054
 803c798:	1885883a 	add	r2,r3,r2
 803c79c:	103cc615 	stw	zero,-3304(r2)
         numtimers++;
 803c7a0:	d0a0b917 	ldw	r2,-32028(gp)
 803c7a4:	10800044 	addi	r2,r2,1
 803c7a8:	d0a0b915 	stw	r2,-32028(gp)
         return (long)&intimers[i];
 803c7ac:	e0bfff17 	ldw	r2,-4(fp)
 803c7b0:	10c00524 	muli	r3,r2,20
 803c7b4:	008201b4 	movhi	r2,2054
 803c7b8:	10bcc204 	addi	r2,r2,-3320
 803c7bc:	1885883a 	add	r2,r3,r2
 803c7c0:	00000706 	br	803c7e0 <in_timerset+0x118>
   for(i = 0; i < NUM_INTIMERS; i++)
 803c7c4:	e0bfff17 	ldw	r2,-4(fp)
 803c7c8:	10800044 	addi	r2,r2,1
 803c7cc:	e0bfff15 	stw	r2,-4(fp)
 803c7d0:	e0bfff17 	ldw	r2,-4(fp)
 803c7d4:	10800150 	cmplti	r2,r2,5
 803c7d8:	103fc41e 	bne	r2,zero,803c6ec <in_timerset+0x24>
      }
   }
   return 0;
 803c7dc:	0005883a 	mov	r2,zero
}
 803c7e0:	e037883a 	mov	sp,fp
 803c7e4:	dfc00117 	ldw	ra,4(sp)
 803c7e8:	df000017 	ldw	fp,0(sp)
 803c7ec:	dec00204 	addi	sp,sp,8
 803c7f0:	f800283a 	ret

0803c7f4 <in_timerkill>:
 */


int
in_timerkill(long timer)
{
 803c7f4:	defffc04 	addi	sp,sp,-16
 803c7f8:	dfc00315 	stw	ra,12(sp)
 803c7fc:	df000215 	stw	fp,8(sp)
 803c800:	df000204 	addi	fp,sp,8
 803c804:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 803c808:	e03fff15 	stw	zero,-4(fp)
 803c80c:	00001506 	br	803c864 <in_timerkill+0x70>
   {
      if(timer == (long)&intimers[i])
 803c810:	e0bfff17 	ldw	r2,-4(fp)
 803c814:	10c00524 	muli	r3,r2,20
 803c818:	008201b4 	movhi	r2,2054
 803c81c:	10bcc204 	addi	r2,r2,-3320
 803c820:	1885883a 	add	r2,r3,r2
 803c824:	1007883a 	mov	r3,r2
 803c828:	e0bffe17 	ldw	r2,-8(fp)
 803c82c:	10c00a1e 	bne	r2,r3,803c858 <in_timerkill+0x64>
      {
         intimers[i].callback = NULL;
 803c830:	e0bfff17 	ldw	r2,-4(fp)
 803c834:	10c00524 	muli	r3,r2,20
 803c838:	008201b4 	movhi	r2,2054
 803c83c:	1885883a 	add	r2,r3,r2
 803c840:	103cc215 	stw	zero,-3320(r2)
         numtimers--;
 803c844:	d0a0b917 	ldw	r2,-32028(gp)
 803c848:	10bfffc4 	addi	r2,r2,-1
 803c84c:	d0a0b915 	stw	r2,-32028(gp)
         return 0;      /* OK return */
 803c850:	0005883a 	mov	r2,zero
 803c854:	00000806 	br	803c878 <in_timerkill+0x84>
   for(i = 0; i < NUM_INTIMERS; i++)
 803c858:	e0bfff17 	ldw	r2,-4(fp)
 803c85c:	10800044 	addi	r2,r2,1
 803c860:	e0bfff15 	stw	r2,-4(fp)
 803c864:	e0bfff17 	ldw	r2,-4(fp)
 803c868:	10800150 	cmplti	r2,r2,5
 803c86c:	103fe81e 	bne	r2,zero,803c810 <in_timerkill+0x1c>
      }
   }
   dtrap();    /* timer to kill not found */
 803c870:	802c3fc0 	call	802c3fc <dtrap>
   return ENP_PARAM;
 803c874:	00bffd84 	movi	r2,-10
}
 803c878:	e037883a 	mov	sp,fp
 803c87c:	dfc00117 	ldw	ra,4(sp)
 803c880:	df000017 	ldw	fp,0(sp)
 803c884:	dec00204 	addi	sp,sp,8
 803c888:	f800283a 	ret

0803c88c <create_apptasks>:
#endif
/* per-application thread definitions */

int
create_apptasks(void)
{
 803c88c:	defffe04 	addi	sp,sp,-8
 803c890:	df000115 	stw	fp,4(sp)
 803c894:	df000104 	addi	fp,sp,4
int e = 0;
 803c898:	e03fff15 	stw	zero,-4(fp)
#endif
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
 803c89c:	e0bfff17 	ldw	r2,-4(fp)
}
 803c8a0:	e037883a 	mov	sp,fp
 803c8a4:	df000017 	ldw	fp,0(sp)
 803c8a8:	dec00104 	addi	sp,sp,4
 803c8ac:	f800283a 	ret

0803c8b0 <task_stats>:
 */


void
task_stats(void * pio)
{
 803c8b0:	defffd04 	addi	sp,sp,-12
 803c8b4:	dfc00215 	stw	ra,8(sp)
 803c8b8:	df000115 	stw	fp,4(sp)
 803c8bc:	df000104 	addi	fp,sp,4
 803c8c0:	e13fff15 	stw	r4,-4(fp)
   ns_printf(pio, "Task wakeups:");
 803c8c4:	01420174 	movhi	r5,2053
 803c8c8:	294cce04 	addi	r5,r5,13112
 803c8cc:	e13fff17 	ldw	r4,-4(fp)
 803c8d0:	80281f80 	call	80281f8 <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
 803c8d4:	d0a08517 	ldw	r2,-32236(gp)
 803c8d8:	100d883a 	mov	r6,r2
 803c8dc:	01420174 	movhi	r5,2053
 803c8e0:	294cd204 	addi	r5,r5,13128
 803c8e4:	e13fff17 	ldw	r4,-4(fp)
 803c8e8:	80281f80 	call	80281f8 <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
 803c8ec:	d0a08617 	ldw	r2,-32232(gp)
 803c8f0:	100d883a 	mov	r6,r2
 803c8f4:	01420174 	movhi	r5,2053
 803c8f8:	294cd604 	addi	r5,r5,13144
 803c8fc:	e13fff17 	ldw	r4,-4(fp)
 803c900:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
 803c904:	01420174 	movhi	r5,2053
 803c908:	294cda04 	addi	r5,r5,13160
 803c90c:	e13fff17 	ldw	r4,-4(fp)
 803c910:	80281f80 	call	80281f8 <ns_printf>
}
 803c914:	0001883a 	nop
 803c918:	e037883a 	mov	sp,fp
 803c91c:	dfc00117 	ldw	ra,4(sp)
 803c920:	df000017 	ldw	fp,0(sp)
 803c924:	dec00204 	addi	sp,sp,8
 803c928:	f800283a 	ret

0803c92c <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
 803c92c:	defff804 	addi	sp,sp,-32
 803c930:	dfc00515 	stw	ra,20(sp)
 803c934:	df000415 	stw	fp,16(sp)
 803c938:	df000404 	addi	fp,sp,16
 803c93c:	e13ffd15 	stw	r4,-12(fp)
 803c940:	e17ffc15 	stw	r5,-16(fp)
 803c944:	e1800215 	stw	r6,8(fp)
 803c948:	e1c00315 	stw	r7,12(fp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
 803c94c:	e0bffd17 	ldw	r2,-12(fp)
 803c950:	10800808 	cmpgei	r2,r2,32
 803c954:	10000c1e 	bne	r2,zero,803c988 <fcntl+0x5c>
  {
    va_start(argp, cmd);
 803c958:	e0800204 	addi	r2,fp,8
 803c95c:	e0bffe15 	stw	r2,-8(fp)
    flags = va_arg(argp, long);
 803c960:	e0bffe17 	ldw	r2,-8(fp)
 803c964:	10c00104 	addi	r3,r2,4
 803c968:	e0fffe15 	stw	r3,-8(fp)
 803c96c:	10800017 	ldw	r2,0(r2)
 803c970:	e0bfff15 	stw	r2,-4(fp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
 803c974:	e1bfff17 	ldw	r6,-4(fp)
 803c978:	e17ffc17 	ldw	r5,-16(fp)
 803c97c:	e13ffd17 	ldw	r4,-12(fp)
 803c980:	8048c400 	call	8048c40 <alt_fcntl>
 803c984:	00000c06 	br	803c9b8 <fcntl+0x8c>
  }
  else
  {
    va_start(argp, cmd);
 803c988:	e0800204 	addi	r2,fp,8
 803c98c:	e0bffe15 	stw	r2,-8(fp)
    flags = va_arg(argp, long);
 803c990:	e0bffe17 	ldw	r2,-8(fp)
 803c994:	10c00104 	addi	r3,r2,4
 803c998:	e0fffe15 	stw	r3,-8(fp)
 803c99c:	10800017 	ldw	r2,0(r2)
 803c9a0:	e0bfff15 	stw	r2,-4(fp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
 803c9a4:	e0bffc17 	ldw	r2,-16(fp)
 803c9a8:	e1bfff17 	ldw	r6,-4(fp)
 803c9ac:	100b883a 	mov	r5,r2
 803c9b0:	e13ffd17 	ldw	r4,-12(fp)
 803c9b4:	80276700 	call	8027670 <bsd_ioctl>
  }
}
 803c9b8:	e037883a 	mov	sp,fp
 803c9bc:	dfc00117 	ldw	ra,4(sp)
 803c9c0:	df000017 	ldw	fp,0(sp)
 803c9c4:	dec00404 	addi	sp,sp,16
 803c9c8:	f800283a 	ret

0803c9cc <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
 803c9cc:	defffe04 	addi	sp,sp,-8
 803c9d0:	dfc00115 	stw	ra,4(sp)
 803c9d4:	df000015 	stw	fp,0(sp)
 803c9d8:	d839883a 	mov	fp,sp
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 803c9dc:	01018204 	movi	r4,1544
 803c9e0:	803def40 	call	803def4 <reg_type>
 803c9e4:	10000526 	beq	r2,zero,803c9fc <etainit+0x30>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
 803c9e8:	01020174 	movhi	r4,2053
 803c9ec:	210cdb04 	addi	r4,r4,13164
 803c9f0:	80033800 	call	8003380 <puts>
#endif
      return (1);
 803c9f4:	00800044 	movi	r2,1
 803c9f8:	00000106 	br	803ca00 <etainit+0x34>
   }
   return (0);
 803c9fc:	0005883a 	mov	r2,zero
}
 803ca00:	e037883a 	mov	sp,fp
 803ca04:	dfc00117 	ldw	ra,4(sp)
 803ca08:	df000017 	ldw	fp,0(sp)
 803ca0c:	dec00204 	addi	sp,sp,8
 803ca10:	f800283a 	ret

0803ca14 <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 803ca14:	defff904 	addi	sp,sp,-28
 803ca18:	dfc00615 	stw	ra,24(sp)
 803ca1c:	df000515 	stw	fp,20(sp)
 803ca20:	df000504 	addi	fp,sp,20
 803ca24:	e13ffc15 	stw	r4,-16(fp)
 803ca28:	e17ffb15 	stw	r5,-20(fp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 803ca2c:	e0bffc17 	ldw	r2,-16(fp)
 803ca30:	10800617 	ldw	r2,24(r2)
 803ca34:	10802717 	ldw	r2,156(r2)
 803ca38:	e0bffe15 	stw	r2,-8(fp)
   int err;

   tp->lasttime = cticks;
 803ca3c:	d0e0a317 	ldw	r3,-32116(gp)
 803ca40:	e0bffb17 	ldw	r2,-20(fp)
 803ca44:	10c00615 	stw	r3,24(r2)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 803ca48:	e0bffc17 	ldw	r2,-16(fp)
 803ca4c:	10800317 	ldw	r2,12(r2)
 803ca50:	10fffc04 	addi	r3,r2,-16
 803ca54:	e0bffc17 	ldw	r2,-16(fp)
 803ca58:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen += ETHHDR_SIZE;
 803ca5c:	e0bffc17 	ldw	r2,-16(fp)
 803ca60:	10800417 	ldw	r2,16(r2)
 803ca64:	10c00404 	addi	r3,r2,16
 803ca68:	e0bffc17 	ldw	r2,-16(fp)
 803ca6c:	10c00415 	stw	r3,16(r2)
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
 803ca70:	e0bffc17 	ldw	r2,-16(fp)
 803ca74:	10800317 	ldw	r2,12(r2)
 803ca78:	10800084 	addi	r2,r2,2
 803ca7c:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
 803ca80:	e0bffc17 	ldw	r2,-16(fp)
 803ca84:	10800117 	ldw	r2,4(r2)
 803ca88:	e0fffd17 	ldw	r3,-12(fp)
 803ca8c:	1880032e 	bgeu	r3,r2,803ca9c <et_send+0x88>
      panic("et_send: prepend");
 803ca90:	01020174 	movhi	r4,2053
 803ca94:	210ce704 	addi	r4,r4,13212
 803ca98:	8027fe00 	call	8027fe0 <panic>

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
 803ca9c:	e0bffb17 	ldw	r2,-20(fp)
 803caa0:	10800104 	addi	r2,r2,4
 803caa4:	01800184 	movi	r6,6
 803caa8:	100b883a 	mov	r5,r2
 803caac:	e13ffd17 	ldw	r4,-12(fp)
 803cab0:	80096e80 	call	80096e8 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
 803cab4:	e0bffd17 	ldw	r2,-12(fp)
 803cab8:	10c00184 	addi	r3,r2,6
 803cabc:	e0bffe17 	ldw	r2,-8(fp)
 803cac0:	10800517 	ldw	r2,20(r2)
 803cac4:	01800184 	movi	r6,6
 803cac8:	100b883a 	mov	r5,r2
 803cacc:	1809883a 	mov	r4,r3
 803cad0:	80096e80 	call	80096e8 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
 803cad4:	e0bffb17 	ldw	r2,-20(fp)
 803cad8:	1080070b 	ldhu	r2,28(r2)
 803cadc:	10bfffcc 	andi	r2,r2,65535
 803cae0:	108000cc 	andi	r2,r2,3
 803cae4:	108000a0 	cmpeqi	r2,r2,2
 803cae8:	1000041e 	bne	r2,zero,803cafc <et_send+0xe8>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
 803caec:	e0bffd17 	ldw	r2,-12(fp)
 803caf0:	10800304 	addi	r2,r2,12
 803caf4:	00c00204 	movi	r3,8
 803caf8:	10c00005 	stb	r3,0(r2)
 803cafc:	e0bffd17 	ldw	r2,-12(fp)
 803cb00:	10800344 	addi	r2,r2,13
 803cb04:	10000005 	stb	zero,0(r2)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
 803cb08:	e0bffc17 	ldw	r2,-16(fp)
 803cb0c:	10800617 	ldw	r2,24(r2)
 803cb10:	10800417 	ldw	r2,16(r2)
 803cb14:	10000726 	beq	r2,zero,803cb34 <et_send+0x120>
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
 803cb18:	e0bffc17 	ldw	r2,-16(fp)
 803cb1c:	10800617 	ldw	r2,24(r2)
 803cb20:	10800417 	ldw	r2,16(r2)
 803cb24:	e13ffc17 	ldw	r4,-16(fp)
 803cb28:	103ee83a 	callr	r2
 803cb2c:	e0bfff15 	stw	r2,-4(fp)
 803cb30:	00001206 	br	803cb7c <et_send+0x168>
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 803cb34:	e0bffc17 	ldw	r2,-16(fp)
 803cb38:	10800617 	ldw	r2,24(r2)
 803cb3c:	10800317 	ldw	r2,12(r2)
 803cb40:	e0fffc17 	ldw	r3,-16(fp)
 803cb44:	19000617 	ldw	r4,24(r3)
 803cb48:	e0fffc17 	ldw	r3,-16(fp)
 803cb4c:	19400317 	ldw	r5,12(r3)
 803cb50:	e0fffc17 	ldw	r3,-16(fp)
 803cb54:	18c00417 	ldw	r3,16(r3)
 803cb58:	180d883a 	mov	r6,r3
 803cb5c:	103ee83a 	callr	r2
 803cb60:	e0bfff15 	stw	r2,-4(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803cb64:	01000084 	movi	r4,2
 803cb68:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 803cb6c:	e13ffc17 	ldw	r4,-16(fp)
 803cb70:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803cb74:	01000084 	movi	r4,2
 803cb78:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   }

   return (err);
 803cb7c:	e0bfff17 	ldw	r2,-4(fp)
}
 803cb80:	e037883a 	mov	sp,fp
 803cb84:	dfc00117 	ldw	ra,4(sp)
 803cb88:	df000017 	ldw	fp,0(sp)
 803cb8c:	dec00204 	addi	sp,sp,8
 803cb90:	f800283a 	ret

0803cb94 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 803cb94:	defffb04 	addi	sp,sp,-20
 803cb98:	dfc00415 	stw	ra,16(sp)
 803cb9c:	df000315 	stw	fp,12(sp)
 803cba0:	df000304 	addi	fp,sp,12
 803cba4:	e13ffd15 	stw	r4,-12(fp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
 803cba8:	e0bffd17 	ldw	r2,-12(fp)
 803cbac:	10800417 	ldw	r2,16(r2)
 803cbb0:	e0bfff15 	stw	r2,-4(fp)
   entry->pending = (PACKET)NULL;
 803cbb4:	e0bffd17 	ldw	r2,-12(fp)
 803cbb8:	10000415 	stw	zero,16(r2)

   LOCK_NET_RESOURCE(FREEQ_RESID);
 803cbbc:	01000084 	movi	r4,2
 803cbc0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
 803cbc4:	00000906 	br	803cbec <arp_free_pending+0x58>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
 803cbc8:	e0bfff17 	ldw	r2,-4(fp)
 803cbcc:	10800017 	ldw	r2,0(r2)
 803cbd0:	e0bffe15 	stw	r2,-8(fp)
      tmppkt->next = (PACKET)NULL;
 803cbd4:	e0bfff17 	ldw	r2,-4(fp)
 803cbd8:	10000015 	stw	zero,0(r2)
      pk_free(tmppkt);               /* free current packet */
 803cbdc:	e13fff17 	ldw	r4,-4(fp)
 803cbe0:	802bb980 	call	802bb98 <pk_free>
      tmppkt = nextpkt;              /* process the next packet */
 803cbe4:	e0bffe17 	ldw	r2,-8(fp)
 803cbe8:	e0bfff15 	stw	r2,-4(fp)
   while (tmppkt)
 803cbec:	e0bfff17 	ldw	r2,-4(fp)
 803cbf0:	103ff51e 	bne	r2,zero,803cbc8 <arp_free_pending+0x34>
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
 803cbf4:	e0bffd17 	ldw	r2,-12(fp)
 803cbf8:	10000015 	stw	zero,0(r2)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803cbfc:	01000084 	movi	r4,2
 803cc00:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
}
 803cc04:	0001883a 	nop
 803cc08:	e037883a 	mov	sp,fp
 803cc0c:	dfc00117 	ldw	ra,4(sp)
 803cc10:	df000017 	ldw	fp,0(sp)
 803cc14:	dec00204 	addi	sp,sp,8
 803cc18:	f800283a 	ret

0803cc1c <arp_send_pending>:
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
 803cc1c:	defffc04 	addi	sp,sp,-16
 803cc20:	dfc00315 	stw	ra,12(sp)
 803cc24:	df000215 	stw	fp,8(sp)
 803cc28:	df000204 	addi	fp,sp,8
 803cc2c:	e13ffe15 	stw	r4,-8(fp)
   PACKET tmppkt = entry->pending;
 803cc30:	e0bffe17 	ldw	r2,-8(fp)
 803cc34:	10800417 	ldw	r2,16(r2)
 803cc38:	e0bfff15 	stw	r2,-4(fp)

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 803cc3c:	00000906 	br	803cc64 <arp_send_pending+0x48>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
 803cc40:	e0bfff17 	ldw	r2,-4(fp)
 803cc44:	10c00017 	ldw	r3,0(r2)
 803cc48:	e0bffe17 	ldw	r2,-8(fp)
 803cc4c:	10c00415 	stw	r3,16(r2)
      tmppkt->next = (PACKET)NULL;
 803cc50:	e0bfff17 	ldw	r2,-4(fp)
 803cc54:	10000015 	stw	zero,0(r2)
      et_send(tmppkt, entry);          /* try send again */
 803cc58:	e17ffe17 	ldw	r5,-8(fp)
 803cc5c:	e13fff17 	ldw	r4,-4(fp)
 803cc60:	803ca140 	call	803ca14 <et_send>
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 803cc64:	e0bffe17 	ldw	r2,-8(fp)
 803cc68:	10800417 	ldw	r2,16(r2)
 803cc6c:	e0bfff15 	stw	r2,-4(fp)
 803cc70:	e0bfff17 	ldw	r2,-4(fp)
 803cc74:	103ff21e 	bne	r2,zero,803cc40 <arp_send_pending+0x24>
   }
}
 803cc78:	0001883a 	nop
 803cc7c:	0001883a 	nop
 803cc80:	e037883a 	mov	sp,fp
 803cc84:	dfc00117 	ldw	ra,4(sp)
 803cc88:	df000017 	ldw	fp,0(sp)
 803cc8c:	dec00204 	addi	sp,sp,8
 803cc90:	f800283a 	ret

0803cc94 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
 803cc94:	defff404 	addi	sp,sp,-48
 803cc98:	dfc00b15 	stw	ra,44(sp)
 803cc9c:	df000a15 	stw	fp,40(sp)
 803cca0:	df000a04 	addi	fp,sp,40
 803cca4:	e13ff715 	stw	r4,-36(fp)
 803cca8:	e17ff615 	stw	r5,-40(fp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
 803ccac:	e0bff717 	ldw	r2,-36(fp)
 803ccb0:	10800617 	ldw	r2,24(r2)
 803ccb4:	e0bfff15 	stw	r2,-4(fp)
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 803ccb8:	e0bff717 	ldw	r2,-36(fp)
 803ccbc:	10800617 	ldw	r2,24(r2)
 803ccc0:	10802717 	ldw	r2,156(r2)
 803ccc4:	e0bffe15 	stw	r2,-8(fp)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
 803ccc8:	e0bff617 	ldw	r2,-40(fp)
 803cccc:	10bfffe0 	cmpeqi	r2,r2,-1
 803ccd0:	1000191e 	bne	r2,zero,803cd38 <send_arp+0xa4>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask)))
 803ccd4:	e0bfff17 	ldw	r2,-4(fp)
 803ccd8:	10800c17 	ldw	r2,48(r2)
 803ccdc:	0086303a 	nor	r3,zero,r2
 803cce0:	e0bff617 	ldw	r2,-40(fp)
 803cce4:	1886703a 	and	r3,r3,r2
 803cce8:	e0bfff17 	ldw	r2,-4(fp)
 803ccec:	10800c17 	ldw	r2,48(r2)
 803ccf0:	0084303a 	nor	r2,zero,r2
   if ((dest_ip == 0xFFFFFFFF) ||  
 803ccf4:	18801026 	beq	r3,r2,803cd38 <send_arp+0xa4>
       || (IN_MULTICAST(ntohl(dest_ip)) ))
 803ccf8:	e0bff617 	ldw	r2,-40(fp)
 803ccfc:	1006d63a 	srli	r3,r2,24
 803cd00:	e0bff617 	ldw	r2,-40(fp)
 803cd04:	1004d23a 	srli	r2,r2,8
 803cd08:	10bfc00c 	andi	r2,r2,65280
 803cd0c:	1886b03a 	or	r3,r3,r2
 803cd10:	e0bff617 	ldw	r2,-40(fp)
 803cd14:	1004923a 	slli	r2,r2,8
 803cd18:	10803fec 	andhi	r2,r2,255
 803cd1c:	1886b03a 	or	r3,r3,r2
 803cd20:	e0bff617 	ldw	r2,-40(fp)
 803cd24:	1004963a 	slli	r2,r2,24
 803cd28:	1884b03a 	or	r2,r3,r2
 803cd2c:	10fc002c 	andhi	r3,r2,61440
 803cd30:	00b80034 	movhi	r2,57344
 803cd34:	1880391e 	bne	r3,r2,803ce1c <send_arp+0x188>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
 803cd38:	e0bff717 	ldw	r2,-36(fp)
 803cd3c:	10800617 	ldw	r2,24(r2)
 803cd40:	100b883a 	mov	r5,r2
 803cd44:	e13ff617 	ldw	r4,-40(fp)
 803cd48:	803d2540 	call	803d254 <make_arp_entry>
 803cd4c:	e0bffc15 	stw	r2,-16(fp)

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
 803cd50:	e0bffc17 	ldw	r2,-16(fp)
 803cd54:	10800104 	addi	r2,r2,4
 803cd58:	01800184 	movi	r6,6
 803cd5c:	01403fc4 	movi	r5,255
 803cd60:	1009883a 	mov	r4,r2
 803cd64:	8002fa40 	call	8002fa4 <memset>
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
 803cd68:	e0bff717 	ldw	r2,-36(fp)
 803cd6c:	10800617 	ldw	r2,24(r2)
 803cd70:	10802b17 	ldw	r2,172(r2)
 803cd74:	10002526 	beq	r2,zero,803ce0c <send_arp+0x178>
 803cd78:	e0bff617 	ldw	r2,-40(fp)
 803cd7c:	1006d63a 	srli	r3,r2,24
 803cd80:	e0bff617 	ldw	r2,-40(fp)
 803cd84:	1004d23a 	srli	r2,r2,8
 803cd88:	10bfc00c 	andi	r2,r2,65280
 803cd8c:	1886b03a 	or	r3,r3,r2
 803cd90:	e0bff617 	ldw	r2,-40(fp)
 803cd94:	1004923a 	slli	r2,r2,8
 803cd98:	10803fec 	andhi	r2,r2,255
 803cd9c:	1886b03a 	or	r3,r3,r2
 803cda0:	e0bff617 	ldw	r2,-40(fp)
 803cda4:	1004963a 	slli	r2,r2,24
 803cda8:	1884b03a 	or	r2,r3,r2
 803cdac:	10fc002c 	andhi	r3,r2,61440
 803cdb0:	00b80034 	movhi	r2,57344
 803cdb4:	1880151e 	bne	r3,r2,803ce0c <send_arp+0x178>
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
 803cdb8:	e0bff617 	ldw	r2,-40(fp)
 803cdbc:	e0bff815 	stw	r2,-32(fp)
         oldest->t_phy_addr[0] = 0x01;
 803cdc0:	e0bffc17 	ldw	r2,-16(fp)
 803cdc4:	00c00044 	movi	r3,1
 803cdc8:	10c00105 	stb	r3,4(r2)
         oldest->t_phy_addr[1] = 0x00;
 803cdcc:	e0bffc17 	ldw	r2,-16(fp)
 803cdd0:	10000145 	stb	zero,5(r2)
         oldest->t_phy_addr[2] = 0x5e;
 803cdd4:	e0bffc17 	ldw	r2,-16(fp)
 803cdd8:	00c01784 	movi	r3,94
 803cddc:	10c00185 	stb	r3,6(r2)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
 803cde0:	e0bff843 	ldbu	r2,-31(fp)
 803cde4:	10801fcc 	andi	r2,r2,127
 803cde8:	1007883a 	mov	r3,r2
 803cdec:	e0bffc17 	ldw	r2,-16(fp)
 803cdf0:	10c001c5 	stb	r3,7(r2)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
 803cdf4:	e0fff883 	ldbu	r3,-30(fp)
 803cdf8:	e0bffc17 	ldw	r2,-16(fp)
 803cdfc:	10c00205 	stb	r3,8(r2)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
 803ce00:	e0fff8c3 	ldbu	r3,-29(fp)
 803ce04:	e0bffc17 	ldw	r2,-16(fp)
 803ce08:	10c00245 	stb	r3,9(r2)
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
 803ce0c:	e17ffc17 	ldw	r5,-16(fp)
 803ce10:	e13ff717 	ldw	r4,-36(fp)
 803ce14:	803ca140 	call	803ca14 <et_send>
 803ce18:	0000ae06 	br	803d0d4 <send_arp+0x440>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 803ce1c:	e0bff717 	ldw	r2,-36(fp)
 803ce20:	10c00717 	ldw	r3,28(r2)
 803ce24:	e0bff717 	ldw	r2,-36(fp)
 803ce28:	10800617 	ldw	r2,24(r2)
 803ce2c:	10800a17 	ldw	r2,40(r2)
 803ce30:	18800d1e 	bne	r3,r2,803ce68 <send_arp+0x1d4>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
 803ce34:	e0bff717 	ldw	r2,-36(fp)
 803ce38:	10800717 	ldw	r2,28(r2)
 803ce3c:	10803fcc 	andi	r2,r2,255
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 803ce40:	10801fe0 	cmpeqi	r2,r2,127
 803ce44:	1000081e 	bne	r2,zero,803ce68 <send_arp+0x1d4>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803ce48:	01000084 	movi	r4,2
 803ce4c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 803ce50:	e13ff717 	ldw	r4,-36(fp)
 803ce54:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803ce58:	01000084 	movi	r4,2
 803ce5c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_NO_ROUTE;
 803ce60:	00bff7c4 	movi	r2,-33
 803ce64:	00009b06 	br	803d0d4 <send_arp+0x440>
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 803ce68:	01000084 	movi	r4,2
 803ce6c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 803ce70:	01000c04 	movi	r4,48
 803ce74:	802b8840 	call	802b884 <pk_alloc>
 803ce78:	e0bffd15 	stw	r2,-12(fp)
   if (!arppkt)
 803ce7c:	e0bffd17 	ldw	r2,-12(fp)
 803ce80:	1000061e 	bne	r2,zero,803ce9c <send_arp+0x208>
   {
      pk_free(pkt);
 803ce84:	e13ff717 	ldw	r4,-36(fp)
 803ce88:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803ce8c:	01000084 	movi	r4,2
 803ce90:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 803ce94:	00bffa84 	movi	r2,-22
 803ce98:	00008e06 	br	803d0d4 <send_arp+0x440>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803ce9c:	01000084 	movi	r4,2
 803cea0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 803cea4:	e0bffd17 	ldw	r2,-12(fp)
 803cea8:	10c00117 	ldw	r3,4(r2)
 803ceac:	e0bffd17 	ldw	r2,-12(fp)
 803ceb0:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 803ceb4:	e0bffd17 	ldw	r2,-12(fp)
 803ceb8:	00c00c04 	movi	r3,48
 803cebc:	10c00415 	stw	r3,16(r2)
   arppkt->net = pkt->net;
 803cec0:	e0bff717 	ldw	r2,-36(fp)
 803cec4:	10c00617 	ldw	r3,24(r2)
 803cec8:	e0bffd17 	ldw	r2,-12(fp)
 803cecc:	10c00615 	stw	r3,24(r2)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 803ced0:	e0bff717 	ldw	r2,-36(fp)
 803ced4:	10800617 	ldw	r2,24(r2)
 803ced8:	100b883a 	mov	r5,r2
 803cedc:	e13ff617 	ldw	r4,-40(fp)
 803cee0:	803d2540 	call	803d254 <make_arp_entry>
 803cee4:	e0bffc15 	stw	r2,-16(fp)

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
 803cee8:	e0bffc17 	ldw	r2,-16(fp)
 803ceec:	e0fff717 	ldw	r3,-36(fp)
 803cef0:	10c00415 	stw	r3,16(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 803cef4:	e0bffd17 	ldw	r2,-12(fp)
 803cef8:	10800117 	ldw	r2,4(r2)
 803cefc:	10800084 	addi	r2,r2,2
 803cf00:	e0bffb15 	stw	r2,-20(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 803cf04:	e0bffd17 	ldw	r2,-12(fp)
 803cf08:	10800117 	ldw	r2,4(r2)
 803cf0c:	10800404 	addi	r2,r2,16
 803cf10:	e0bffa15 	stw	r2,-24(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 803cf14:	e0bffa17 	ldw	r2,-24(fp)
 803cf18:	00c04004 	movi	r3,256
 803cf1c:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 803cf20:	e0bffa17 	ldw	r2,-24(fp)
 803cf24:	00c00204 	movi	r3,8
 803cf28:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
 803cf2c:	e0bffa17 	ldw	r2,-24(fp)
 803cf30:	00c00184 	movi	r3,6
 803cf34:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
 803cf38:	e0bffa17 	ldw	r2,-24(fp)
 803cf3c:	00c00104 	movi	r3,4
 803cf40:	10c00145 	stb	r3,5(r2)
   arphdr->ar_op = ARREQ;
 803cf44:	e0bffa17 	ldw	r2,-24(fp)
 803cf48:	00c04004 	movi	r3,256
 803cf4c:	10c0018d 	sth	r3,6(r2)
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
 803cf50:	e0bffa17 	ldw	r2,-24(fp)
 803cf54:	e0fff617 	ldw	r3,-40(fp)
 803cf58:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 803cf5c:	e0bff717 	ldw	r2,-36(fp)
 803cf60:	10800617 	ldw	r2,24(r2)
 803cf64:	10c00a17 	ldw	r3,40(r2)
 803cf68:	e0bffa17 	ldw	r2,-24(fp)
 803cf6c:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 803cf70:	e0bffa17 	ldw	r2,-24(fp)
 803cf74:	10c00204 	addi	r3,r2,8
 803cf78:	e0bffe17 	ldw	r2,-8(fp)
 803cf7c:	10800517 	ldw	r2,20(r2)
 803cf80:	01800184 	movi	r6,6
 803cf84:	100b883a 	mov	r5,r2
 803cf88:	1809883a 	mov	r4,r3
 803cf8c:	80096e80 	call	80096e8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 803cf90:	01800184 	movi	r6,6
 803cf94:	01403fc4 	movi	r5,255
 803cf98:	e13ffb17 	ldw	r4,-20(fp)
 803cf9c:	8002fa40 	call	8002fa4 <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 803cfa0:	e0bffb17 	ldw	r2,-20(fp)
 803cfa4:	10c00184 	addi	r3,r2,6
 803cfa8:	e0bffe17 	ldw	r2,-8(fp)
 803cfac:	10800517 	ldw	r2,20(r2)
 803cfb0:	01800184 	movi	r6,6
 803cfb4:	100b883a 	mov	r5,r2
 803cfb8:	1809883a 	mov	r4,r3
 803cfbc:	80096e80 	call	80096e8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 803cfc0:	e0bffb17 	ldw	r2,-20(fp)
 803cfc4:	10800304 	addi	r2,r2,12
 803cfc8:	00c00204 	movi	r3,8
 803cfcc:	10c00005 	stb	r3,0(r2)
 803cfd0:	e0bffb17 	ldw	r2,-20(fp)
 803cfd4:	10800344 	addi	r2,r2,13
 803cfd8:	00c00184 	movi	r3,6
 803cfdc:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 803cfe0:	e0bffa17 	ldw	r2,-24(fp)
 803cfe4:	e0bff915 	stw	r2,-28(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 803cfe8:	e0bff917 	ldw	r2,-28(fp)
 803cfec:	10c00204 	addi	r3,r2,8
 803cff0:	e0bffa17 	ldw	r2,-24(fp)
 803cff4:	10800204 	addi	r2,r2,8
 803cff8:	01800184 	movi	r6,6
 803cffc:	100b883a 	mov	r5,r2
 803d000:	1809883a 	mov	r4,r3
 803d004:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 803d008:	e0bff917 	ldw	r2,-28(fp)
 803d00c:	10c00384 	addi	r3,r2,14
 803d010:	e0bffa17 	ldw	r2,-24(fp)
 803d014:	10800404 	addi	r2,r2,16
 803d018:	01800104 	movi	r6,4
 803d01c:	100b883a 	mov	r5,r2
 803d020:	1809883a 	mov	r4,r3
 803d024:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 803d028:	e0bff917 	ldw	r2,-28(fp)
 803d02c:	10c00484 	addi	r3,r2,18
 803d030:	e0bffa17 	ldw	r2,-24(fp)
 803d034:	10800504 	addi	r2,r2,20
 803d038:	01800184 	movi	r6,6
 803d03c:	100b883a 	mov	r5,r2
 803d040:	1809883a 	mov	r4,r3
 803d044:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 803d048:	e0bff917 	ldw	r2,-28(fp)
 803d04c:	10c00604 	addi	r3,r2,24
 803d050:	e0bffa17 	ldw	r2,-24(fp)
 803d054:	10800704 	addi	r2,r2,28
 803d058:	01800104 	movi	r6,4
 803d05c:	100b883a 	mov	r5,r2
 803d060:	1809883a 	mov	r4,r3
 803d064:	80096e80 	call	80096e8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 803d068:	e0bfff17 	ldw	r2,-4(fp)
 803d06c:	10800417 	ldw	r2,16(r2)
 803d070:	10000526 	beq	r2,zero,803d088 <send_arp+0x3f4>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 803d074:	e0bfff17 	ldw	r2,-4(fp)
 803d078:	10800417 	ldw	r2,16(r2)
 803d07c:	e13ffd17 	ldw	r4,-12(fp)
 803d080:	103ee83a 	callr	r2
 803d084:	00000f06 	br	803d0c4 <send_arp+0x430>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 803d088:	e0bfff17 	ldw	r2,-4(fp)
 803d08c:	10800317 	ldw	r2,12(r2)
 803d090:	e0fffd17 	ldw	r3,-12(fp)
 803d094:	19000617 	ldw	r4,24(r3)
 803d098:	e0fffd17 	ldw	r3,-12(fp)
 803d09c:	18c00117 	ldw	r3,4(r3)
 803d0a0:	01800c04 	movi	r6,48
 803d0a4:	180b883a 	mov	r5,r3
 803d0a8:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803d0ac:	01000084 	movi	r4,2
 803d0b0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 803d0b4:	e13ffd17 	ldw	r4,-12(fp)
 803d0b8:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d0bc:	01000084 	movi	r4,2
 803d0c0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 803d0c4:	d0a0be17 	ldw	r2,-32008(gp)
 803d0c8:	10800044 	addi	r2,r2,1
 803d0cc:	d0a0be15 	stw	r2,-32008(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 803d0d0:	00800044 	movi	r2,1
}
 803d0d4:	e037883a 	mov	sp,fp
 803d0d8:	dfc00117 	ldw	ra,4(sp)
 803d0dc:	df000017 	ldw	fp,0(sp)
 803d0e0:	dec00204 	addi	sp,sp,8
 803d0e4:	f800283a 	ret

0803d0e8 <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 803d0e8:	defff804 	addi	sp,sp,-32
 803d0ec:	dfc00715 	stw	ra,28(sp)
 803d0f0:	df000615 	stw	fp,24(sp)
 803d0f4:	df000604 	addi	fp,sp,24
 803d0f8:	e13ffa15 	stw	r4,-24(fp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
 803d0fc:	e03ffe15 	stw	zero,-8(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
 803d100:	e03ffd15 	stw	zero,-12(fp)
   struct arptabent *empty  = (struct arptabent *)NULL;
 803d104:	e03ffc15 	stw	zero,-16(fp)
   unsigned long lticks = cticks;
 803d108:	d0a0a317 	ldw	r2,-32116(gp)
 803d10c:	e0bffb15 	stw	r2,-20(fp)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803d110:	008201b4 	movhi	r2,2054
 803d114:	10bcdb04 	addi	r2,r2,-3220
 803d118:	e0bfff15 	stw	r2,-4(fp)
 803d11c:	00003b06 	br	803d20c <find_oldest_arp+0x124>
   {
      /* age out old, pending entries */
      if (tp->pending)
 803d120:	e0bfff17 	ldw	r2,-4(fp)
 803d124:	10800417 	ldw	r2,16(r2)
 803d128:	10000b26 	beq	r2,zero,803d158 <find_oldest_arp+0x70>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
 803d12c:	e0bfff17 	ldw	r2,-4(fp)
 803d130:	10800517 	ldw	r2,20(r2)
 803d134:	e0fffb17 	ldw	r3,-20(fp)
 803d138:	1885c83a 	sub	r2,r3,r2
 803d13c:	10801970 	cmpltui	r2,r2,101
 803d140:	1000171e 	bne	r2,zero,803d1a0 <find_oldest_arp+0xb8>
         {
            arp_free_pending(tp);   /* free pending packets */
 803d144:	e13fff17 	ldw	r4,-4(fp)
 803d148:	803cb940 	call	803cb94 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 803d14c:	e0bfff17 	ldw	r2,-4(fp)
 803d150:	10000015 	stw	zero,0(r2)
 803d154:	00001206 	br	803d1a0 <find_oldest_arp+0xb8>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
 803d158:	e0bfff17 	ldw	r2,-4(fp)
 803d15c:	10800017 	ldw	r2,0(r2)
 803d160:	10000f26 	beq	r2,zero,803d1a0 <find_oldest_arp+0xb8>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
 803d164:	e0bfff17 	ldw	r2,-4(fp)
 803d168:	10800517 	ldw	r2,20(r2)
 803d16c:	e0fffb17 	ldw	r3,-20(fp)
 803d170:	1885c83a 	sub	r2,r3,r2
 803d174:	1007883a 	mov	r3,r2
 803d178:	d0a04d17 	ldw	r2,-32460(gp)
      else if ((tp->t_pro_addr != 0) &&
 803d17c:	18800816 	blt	r3,r2,803d1a0 <find_oldest_arp+0xb8>
               ((int)(lticks - tp->lasttime)   >= TPS))
 803d180:	e0bfff17 	ldw	r2,-4(fp)
 803d184:	10800617 	ldw	r2,24(r2)
 803d188:	e0fffb17 	ldw	r3,-20(fp)
 803d18c:	1885c83a 	sub	r2,r3,r2
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
 803d190:	10801910 	cmplti	r2,r2,100
 803d194:	1000021e 	bne	r2,zero,803d1a0 <find_oldest_arp+0xb8>
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
 803d198:	e0bfff17 	ldw	r2,-4(fp)
 803d19c:	10000015 	stw	zero,0(r2)
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
 803d1a0:	e0bfff17 	ldw	r2,-4(fp)
 803d1a4:	10800017 	ldw	r2,0(r2)
 803d1a8:	e0fffa17 	ldw	r3,-24(fp)
 803d1ac:	1880031e 	bne	r3,r2,803d1bc <find_oldest_arp+0xd4>
      {
         exact = tp;
 803d1b0:	e0bfff17 	ldw	r2,-4(fp)
 803d1b4:	e0bffe15 	stw	r2,-8(fp)
 803d1b8:	00001106 	br	803d200 <find_oldest_arp+0x118>
      }
      else if (tp->t_pro_addr != 0)
 803d1bc:	e0bfff17 	ldw	r2,-4(fp)
 803d1c0:	10800017 	ldw	r2,0(r2)
 803d1c4:	10000a26 	beq	r2,zero,803d1f0 <find_oldest_arp+0x108>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
 803d1c8:	e0bffd17 	ldw	r2,-12(fp)
 803d1cc:	10000526 	beq	r2,zero,803d1e4 <find_oldest_arp+0xfc>
 803d1d0:	e0bfff17 	ldw	r2,-4(fp)
 803d1d4:	10c00617 	ldw	r3,24(r2)
 803d1d8:	e0bffd17 	ldw	r2,-12(fp)
 803d1dc:	10800617 	ldw	r2,24(r2)
 803d1e0:	1880072e 	bgeu	r3,r2,803d200 <find_oldest_arp+0x118>
            oldest = tp;
 803d1e4:	e0bfff17 	ldw	r2,-4(fp)
 803d1e8:	e0bffd15 	stw	r2,-12(fp)
 803d1ec:	00000406 	br	803d200 <find_oldest_arp+0x118>
      }
      else if (!empty)
 803d1f0:	e0bffc17 	ldw	r2,-16(fp)
 803d1f4:	1000021e 	bne	r2,zero,803d200 <find_oldest_arp+0x118>
         empty = tp;          /* grab first empty slot */
 803d1f8:	e0bfff17 	ldw	r2,-4(fp)
 803d1fc:	e0bffc15 	stw	r2,-16(fp)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803d200:	e0bfff17 	ldw	r2,-4(fp)
 803d204:	10800804 	addi	r2,r2,32
 803d208:	e0bfff15 	stw	r2,-4(fp)
 803d20c:	e0ffff17 	ldw	r3,-4(fp)
 803d210:	008201b4 	movhi	r2,2054
 803d214:	10bd1b04 	addi	r2,r2,-2964
 803d218:	18bfc136 	bltu	r3,r2,803d120 <find_oldest_arp+0x38>
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
 803d21c:	e0bffe17 	ldw	r2,-8(fp)
 803d220:	1000061e 	bne	r2,zero,803d23c <find_oldest_arp+0x154>
 803d224:	e0bffc17 	ldw	r2,-16(fp)
 803d228:	10000226 	beq	r2,zero,803d234 <find_oldest_arp+0x14c>
 803d22c:	e0bffc17 	ldw	r2,-16(fp)
 803d230:	00000306 	br	803d240 <find_oldest_arp+0x158>
 803d234:	e0bffd17 	ldw	r2,-12(fp)
 803d238:	00000106 	br	803d240 <find_oldest_arp+0x158>
 803d23c:	e0bffe17 	ldw	r2,-8(fp)
}
 803d240:	e037883a 	mov	sp,fp
 803d244:	dfc00117 	ldw	ra,4(sp)
 803d248:	df000017 	ldw	fp,0(sp)
 803d24c:	dec00204 	addi	sp,sp,8
 803d250:	f800283a 	ret

0803d254 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 803d254:	defffa04 	addi	sp,sp,-24
 803d258:	dfc00515 	stw	ra,20(sp)
 803d25c:	df000415 	stw	fp,16(sp)
 803d260:	df000404 	addi	fp,sp,16
 803d264:	e13ffd15 	stw	r4,-12(fp)
 803d268:	e17ffc15 	stw	r5,-16(fp)
   struct arptabent *oldest;
   unsigned long lticks = cticks;
 803d26c:	d0a0a317 	ldw	r2,-32116(gp)
 803d270:	e0bfff15 	stw	r2,-4(fp)

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
 803d274:	e13ffd17 	ldw	r4,-12(fp)
 803d278:	803d0e80 	call	803d0e8 <find_oldest_arp>
 803d27c:	e0bffe15 	stw	r2,-8(fp)

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
 803d280:	e0bffe17 	ldw	r2,-8(fp)
 803d284:	10800417 	ldw	r2,16(r2)
 803d288:	10000626 	beq	r2,zero,803d2a4 <make_arp_entry+0x50>
 803d28c:	e0bffe17 	ldw	r2,-8(fp)
 803d290:	10800017 	ldw	r2,0(r2)
 803d294:	e0fffd17 	ldw	r3,-12(fp)
 803d298:	18800226 	beq	r3,r2,803d2a4 <make_arp_entry+0x50>
   {
      arp_free_pending(oldest);
 803d29c:	e13ffe17 	ldw	r4,-8(fp)
 803d2a0:	803cb940 	call	803cb94 <arp_free_pending>
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
 803d2a4:	e0bffe17 	ldw	r2,-8(fp)
 803d2a8:	e0fffd17 	ldw	r3,-12(fp)
 803d2ac:	10c00015 	stw	r3,0(r2)
   oldest->net = net;
 803d2b0:	e0bffe17 	ldw	r2,-8(fp)
 803d2b4:	e0fffc17 	ldw	r3,-16(fp)
 803d2b8:	10c00315 	stw	r3,12(r2)
   oldest->flags = 0;
 803d2bc:	e0bffe17 	ldw	r2,-8(fp)
 803d2c0:	1000070d 	sth	zero,28(r2)
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
 803d2c4:	e0bffe17 	ldw	r2,-8(fp)
 803d2c8:	10800104 	addi	r2,r2,4
 803d2cc:	01800184 	movi	r6,6
 803d2d0:	000b883a 	mov	r5,zero
 803d2d4:	1009883a 	mov	r4,r2
 803d2d8:	8002fa40 	call	8002fa4 <memset>
   oldest->createtime = oldest->lasttime = lticks;
 803d2dc:	e0bffe17 	ldw	r2,-8(fp)
 803d2e0:	e0ffff17 	ldw	r3,-4(fp)
 803d2e4:	10c00615 	stw	r3,24(r2)
 803d2e8:	e0bffe17 	ldw	r2,-8(fp)
 803d2ec:	10c00617 	ldw	r3,24(r2)
 803d2f0:	e0bffe17 	ldw	r2,-8(fp)
 803d2f4:	10c00515 	stw	r3,20(r2)

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
 803d2f8:	d0a0ba17 	ldw	r2,-32024(gp)
 803d2fc:	1000071e 	bne	r2,zero,803d31c <make_arp_entry+0xc8>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
 803d300:	000d883a 	mov	r6,zero
 803d304:	0149c404 	movi	r5,10000
 803d308:	01020134 	movhi	r4,2052
 803d30c:	21367c04 	addi	r4,r4,-9744
 803d310:	803c6c80 	call	803c6c8 <in_timerset>
 803d314:	d0a0ba15 	stw	r2,-32024(gp)
 803d318:	00000706 	br	803d338 <make_arp_entry+0xe4>
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
              ((struct intimer *)arp_timer)->interval + lticks;
 803d31c:	d0a0ba17 	ldw	r2,-32024(gp)
 803d320:	10c00217 	ldw	r3,8(r2)
      ((struct intimer *)arp_timer)->tmo =
 803d324:	d0a0ba17 	ldw	r2,-32024(gp)
 803d328:	1009883a 	mov	r4,r2
              ((struct intimer *)arp_timer)->interval + lticks;
 803d32c:	e0bfff17 	ldw	r2,-4(fp)
 803d330:	1885883a 	add	r2,r3,r2
      ((struct intimer *)arp_timer)->tmo =
 803d334:	20800315 	stw	r2,12(r4)
   }

   return oldest;
 803d338:	e0bffe17 	ldw	r2,-8(fp)
}
 803d33c:	e037883a 	mov	sp,fp
 803d340:	dfc00117 	ldw	ra,4(sp)
 803d344:	df000017 	ldw	fp,0(sp)
 803d348:	dec00204 	addi	sp,sp,8
 803d34c:	f800283a 	ret

0803d350 <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 803d350:	defff704 	addi	sp,sp,-36
 803d354:	dfc00815 	stw	ra,32(sp)
 803d358:	df000715 	stw	fp,28(sp)
 803d35c:	df000704 	addi	fp,sp,28
 803d360:	e13ff915 	stw	r4,-28(fp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 803d364:	01000084 	movi	r4,2
 803d368:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
 803d36c:	01000c04 	movi	r4,48
 803d370:	802b8840 	call	802b884 <pk_alloc>
 803d374:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d378:	01000084 	movi	r4,2
 803d37c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (!outpkt)
 803d380:	e0bfff17 	ldw	r2,-4(fp)
 803d384:	1000021e 	bne	r2,zero,803d390 <arpReply+0x40>
   {
      dtrap();
 803d388:	802c3fc0 	call	802c3fc <dtrap>
      return;
 803d38c:	00009b06 	br	803d5fc <arpReply+0x2ac>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
 803d390:	e0bff917 	ldw	r2,-28(fp)
 803d394:	10c00617 	ldw	r3,24(r2)
 803d398:	e0bfff17 	ldw	r2,-4(fp)
 803d39c:	10c00615 	stw	r3,24(r2)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 803d3a0:	e0bff917 	ldw	r2,-28(fp)
 803d3a4:	10800317 	ldw	r2,12(r2)
 803d3a8:	10bffc84 	addi	r2,r2,-14
 803d3ac:	e0bffe15 	stw	r2,-8(fp)
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
 803d3b0:	e0bfff17 	ldw	r2,-4(fp)
 803d3b4:	10800117 	ldw	r2,4(r2)
 803d3b8:	10800084 	addi	r2,r2,2
 803d3bc:	e0bffd15 	stw	r2,-12(fp)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 803d3c0:	e0bffd17 	ldw	r2,-12(fp)
 803d3c4:	10800304 	addi	r2,r2,12
 803d3c8:	00c00204 	movi	r3,8
 803d3cc:	10c00005 	stb	r3,0(r2)
 803d3d0:	e0bffd17 	ldw	r2,-12(fp)
 803d3d4:	10800344 	addi	r2,r2,13
 803d3d8:	00c00184 	movi	r3,6
 803d3dc:	10c00005 	stb	r3,0(r2)
      in = (struct arp_hdr *)(pkt->nb_prot);
 803d3e0:	e0bff917 	ldw	r2,-28(fp)
 803d3e4:	10800317 	ldw	r2,12(r2)
 803d3e8:	e0bffc15 	stw	r2,-16(fp)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
 803d3ec:	e0bfff17 	ldw	r2,-4(fp)
 803d3f0:	10800117 	ldw	r2,4(r2)
 803d3f4:	10800404 	addi	r2,r2,16
 803d3f8:	e0bffb15 	stw	r2,-20(fp)
      outpkt->nb_plen = arpsize;
 803d3fc:	e0bfff17 	ldw	r2,-4(fp)
 803d400:	00c00c04 	movi	r3,48
 803d404:	10c00415 	stw	r3,16(r2)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 803d408:	e0bffb17 	ldw	r2,-20(fp)
 803d40c:	00c04004 	movi	r3,256
 803d410:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
 803d414:	e0bffb17 	ldw	r2,-20(fp)
 803d418:	00c00204 	movi	r3,8
 803d41c:	10c0008d 	sth	r3,2(r2)
   out->ar_hln = 6;
 803d420:	e0bffb17 	ldw	r2,-20(fp)
 803d424:	00c00184 	movi	r3,6
 803d428:	10c00105 	stb	r3,4(r2)
   out->ar_pln = 4;
 803d42c:	e0bffb17 	ldw	r2,-20(fp)
 803d430:	00c00104 	movi	r3,4
 803d434:	10c00145 	stb	r3,5(r2)
   out->ar_op = ARREP;
 803d438:	e0bffb17 	ldw	r2,-20(fp)
 803d43c:	00c08004 	movi	r3,512
 803d440:	10c0018d 	sth	r3,6(r2)
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
 803d444:	e0bffc17 	ldw	r2,-16(fp)
 803d448:	10c00417 	ldw	r3,16(r2)
 803d44c:	e0bffb17 	ldw	r2,-20(fp)
 803d450:	10c00715 	stw	r3,28(r2)
   out->ar_spa = in->ar_tpa;
 803d454:	e0bffc17 	ldw	r2,-16(fp)
 803d458:	10c00717 	ldw	r3,28(r2)
 803d45c:	e0bffb17 	ldw	r2,-20(fp)
 803d460:	10c00415 	stw	r3,16(r2)
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 803d464:	e0bffb17 	ldw	r2,-20(fp)
 803d468:	10c00504 	addi	r3,r2,20
 803d46c:	e0bffc17 	ldw	r2,-16(fp)
 803d470:	10800204 	addi	r2,r2,8
 803d474:	01800184 	movi	r6,6
 803d478:	100b883a 	mov	r5,r2
 803d47c:	1809883a 	mov	r4,r3
 803d480:	80096e80 	call	80096e8 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
 803d484:	e0bffb17 	ldw	r2,-20(fp)
 803d488:	10c00204 	addi	r3,r2,8
 803d48c:	e0bfff17 	ldw	r2,-4(fp)
 803d490:	10800617 	ldw	r2,24(r2)
 803d494:	10802717 	ldw	r2,156(r2)
 803d498:	10800517 	ldw	r2,20(r2)
 803d49c:	01800184 	movi	r6,6
 803d4a0:	100b883a 	mov	r5,r2
 803d4a4:	1809883a 	mov	r4,r3
 803d4a8:	80096e80 	call	80096e8 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
 803d4ac:	e0bffe17 	ldw	r2,-8(fp)
 803d4b0:	10800184 	addi	r2,r2,6
 803d4b4:	01800184 	movi	r6,6
 803d4b8:	100b883a 	mov	r5,r2
 803d4bc:	e13ffd17 	ldw	r4,-12(fp)
 803d4c0:	80096e80 	call	80096e8 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
 803d4c4:	e0bffd17 	ldw	r2,-12(fp)
 803d4c8:	10c00184 	addi	r3,r2,6
 803d4cc:	e0bfff17 	ldw	r2,-4(fp)
 803d4d0:	10800617 	ldw	r2,24(r2)
 803d4d4:	10802717 	ldw	r2,156(r2)
 803d4d8:	10800517 	ldw	r2,20(r2)
 803d4dc:	01800184 	movi	r6,6
 803d4e0:	100b883a 	mov	r5,r2
 803d4e4:	1809883a 	mov	r4,r3
 803d4e8:	80096e80 	call	80096e8 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
 803d4ec:	e0bffb17 	ldw	r2,-20(fp)
 803d4f0:	e0bffa15 	stw	r2,-24(fp)
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
 803d4f4:	e0bffa17 	ldw	r2,-24(fp)
 803d4f8:	10c00204 	addi	r3,r2,8
 803d4fc:	e0bffb17 	ldw	r2,-20(fp)
 803d500:	10800204 	addi	r2,r2,8
 803d504:	01800184 	movi	r6,6
 803d508:	100b883a 	mov	r5,r2
 803d50c:	1809883a 	mov	r4,r3
 803d510:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
 803d514:	e0bffa17 	ldw	r2,-24(fp)
 803d518:	10c00384 	addi	r3,r2,14
 803d51c:	e0bffb17 	ldw	r2,-20(fp)
 803d520:	10800404 	addi	r2,r2,16
 803d524:	01800104 	movi	r6,4
 803d528:	100b883a 	mov	r5,r2
 803d52c:	1809883a 	mov	r4,r3
 803d530:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
 803d534:	e0bffa17 	ldw	r2,-24(fp)
 803d538:	10c00484 	addi	r3,r2,18
 803d53c:	e0bffb17 	ldw	r2,-20(fp)
 803d540:	10800504 	addi	r2,r2,20
 803d544:	01800184 	movi	r6,6
 803d548:	100b883a 	mov	r5,r2
 803d54c:	1809883a 	mov	r4,r3
 803d550:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
 803d554:	e0bffa17 	ldw	r2,-24(fp)
 803d558:	10c00604 	addi	r3,r2,24
 803d55c:	e0bffb17 	ldw	r2,-20(fp)
 803d560:	10800704 	addi	r2,r2,28
 803d564:	01800104 	movi	r6,4
 803d568:	100b883a 	mov	r5,r2
 803d56c:	1809883a 	mov	r4,r3
 803d570:	80096e80 	call	80096e8 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
 803d574:	e0bfff17 	ldw	r2,-4(fp)
 803d578:	10800617 	ldw	r2,24(r2)
 803d57c:	10800417 	ldw	r2,16(r2)
 803d580:	10000a26 	beq	r2,zero,803d5ac <arpReply+0x25c>
   {
      outpkt->nb_prot = outpkt->nb_buff;
 803d584:	e0bfff17 	ldw	r2,-4(fp)
 803d588:	10c00117 	ldw	r3,4(r2)
 803d58c:	e0bfff17 	ldw	r2,-4(fp)
 803d590:	10c00315 	stw	r3,12(r2)
      outpkt->net->pkt_send(outpkt);
 803d594:	e0bfff17 	ldw	r2,-4(fp)
 803d598:	10800617 	ldw	r2,24(r2)
 803d59c:	10800417 	ldw	r2,16(r2)
 803d5a0:	e13fff17 	ldw	r4,-4(fp)
 803d5a4:	103ee83a 	callr	r2
 803d5a8:	00001106 	br	803d5f0 <arpReply+0x2a0>
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
 803d5ac:	e0bfff17 	ldw	r2,-4(fp)
 803d5b0:	10800617 	ldw	r2,24(r2)
 803d5b4:	10800317 	ldw	r2,12(r2)
 803d5b8:	e0fff917 	ldw	r3,-28(fp)
 803d5bc:	19000617 	ldw	r4,24(r3)
 803d5c0:	e0ffff17 	ldw	r3,-4(fp)
 803d5c4:	19400117 	ldw	r5,4(r3)
 803d5c8:	e0ffff17 	ldw	r3,-4(fp)
 803d5cc:	18c00417 	ldw	r3,16(r3)
 803d5d0:	180d883a 	mov	r6,r3
 803d5d4:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803d5d8:	01000084 	movi	r4,2
 803d5dc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
 803d5e0:	e13fff17 	ldw	r4,-4(fp)
 803d5e4:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d5e8:	01000084 	movi	r4,2
 803d5ec:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
 803d5f0:	d0a0c017 	ldw	r2,-32000(gp)
 803d5f4:	10800044 	addi	r2,r2,1
 803d5f8:	d0a0c015 	stw	r2,-32000(gp)
}
 803d5fc:	e037883a 	mov	sp,fp
 803d600:	dfc00117 	ldw	ra,4(sp)
 803d604:	df000017 	ldw	fp,0(sp)
 803d608:	dec00204 	addi	sp,sp,8
 803d60c:	f800283a 	ret

0803d610 <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 803d610:	defff904 	addi	sp,sp,-28
 803d614:	dfc00615 	stw	ra,24(sp)
 803d618:	df000515 	stw	fp,20(sp)
 803d61c:	df000504 	addi	fp,sp,20
 803d620:	e13ffb15 	stw	r4,-20(fp)
   char *eth;
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 803d624:	e0bffb17 	ldw	r2,-20(fp)
 803d628:	10800317 	ldw	r2,12(r2)
 803d62c:	10bffc84 	addi	r2,r2,-14
 803d630:	e0bffe15 	stw	r2,-8(fp)
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
 803d634:	e0bffb17 	ldw	r2,-20(fp)
 803d638:	10800317 	ldw	r2,12(r2)
 803d63c:	e0bffd15 	stw	r2,-12(fp)
#endif   /* IEEE_802_3_ONLY */
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 803d640:	e0bffd17 	ldw	r2,-12(fp)
 803d644:	e0bffc15 	stw	r2,-16(fp)
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 803d648:	e0bffd17 	ldw	r2,-12(fp)
 803d64c:	10c00704 	addi	r3,r2,28
 803d650:	e0bffc17 	ldw	r2,-16(fp)
 803d654:	10800604 	addi	r2,r2,24
 803d658:	01800104 	movi	r6,4
 803d65c:	100b883a 	mov	r5,r2
 803d660:	1809883a 	mov	r4,r3
 803d664:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
 803d668:	e0bffd17 	ldw	r2,-12(fp)
 803d66c:	10c00504 	addi	r3,r2,20
 803d670:	e0bffc17 	ldw	r2,-16(fp)
 803d674:	10800484 	addi	r2,r2,18
 803d678:	01800184 	movi	r6,6
 803d67c:	100b883a 	mov	r5,r2
 803d680:	1809883a 	mov	r4,r3
 803d684:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
 803d688:	e0bffd17 	ldw	r2,-12(fp)
 803d68c:	10c00404 	addi	r3,r2,16
 803d690:	e0bffc17 	ldw	r2,-16(fp)
 803d694:	10800384 	addi	r2,r2,14
 803d698:	01800104 	movi	r6,4
 803d69c:	100b883a 	mov	r5,r2
 803d6a0:	1809883a 	mov	r4,r3
 803d6a4:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
 803d6a8:	e0bffd17 	ldw	r2,-12(fp)
 803d6ac:	10c00204 	addi	r3,r2,8
 803d6b0:	e0bffc17 	ldw	r2,-16(fp)
 803d6b4:	10800204 	addi	r2,r2,8
 803d6b8:	01800184 	movi	r6,6
 803d6bc:	100b883a 	mov	r5,r2
 803d6c0:	1809883a 	mov	r4,r3
 803d6c4:	80096e80 	call	80096e8 <memmove>
#endif
   USE_ARG(eth);

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 803d6c8:	e0bffd17 	ldw	r2,-12(fp)
 803d6cc:	10c00717 	ldw	r3,28(r2)
 803d6d0:	e0bffb17 	ldw	r2,-20(fp)
 803d6d4:	10800617 	ldw	r2,24(r2)
 803d6d8:	10800a17 	ldw	r2,40(r2)
 803d6dc:	18801c26 	beq	r3,r2,803d750 <arprcv+0x140>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
 803d6e0:	e0bffd17 	ldw	r2,-12(fp)
 803d6e4:	10800717 	ldw	r2,28(r2)
 803d6e8:	1006d63a 	srli	r3,r2,24
 803d6ec:	e0bffd17 	ldw	r2,-12(fp)
 803d6f0:	10800717 	ldw	r2,28(r2)
 803d6f4:	1004d23a 	srli	r2,r2,8
 803d6f8:	10bfc00c 	andi	r2,r2,65280
 803d6fc:	1886b03a 	or	r3,r3,r2
 803d700:	e0bffd17 	ldw	r2,-12(fp)
 803d704:	10800717 	ldw	r2,28(r2)
 803d708:	1004923a 	slli	r2,r2,8
 803d70c:	10803fec 	andhi	r2,r2,255
 803d710:	1886b03a 	or	r3,r3,r2
 803d714:	e0bffd17 	ldw	r2,-12(fp)
 803d718:	10800717 	ldw	r2,28(r2)
 803d71c:	1004963a 	slli	r2,r2,24
 803d720:	1884b03a 	or	r2,r3,r2
 803d724:	10fc002c 	andhi	r3,r2,61440
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 803d728:	00b80034 	movhi	r2,57344
 803d72c:	18800826 	beq	r3,r2,803d750 <arprcv+0x140>
#else
   if (arphdr->ar_tpa != pkt->net->n_ipaddr)
#endif /* IP_MULTICAST */
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803d730:	01000084 	movi	r4,2
 803d734:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
 803d738:	e13ffb17 	ldw	r4,-20(fp)
 803d73c:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d740:	01000084 	movi	r4,2
 803d744:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return (ENP_NOT_MINE);
 803d748:	00800084 	movi	r2,2
 803d74c:	00004406 	br	803d860 <arprcv+0x250>
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
 803d750:	e0bffd17 	ldw	r2,-12(fp)
 803d754:	1080018b 	ldhu	r2,6(r2)
 803d758:	10bfffcc 	andi	r2,r2,65535
 803d75c:	10804018 	cmpnei	r2,r2,256
 803d760:	10000d1e 	bne	r2,zero,803d798 <arprcv+0x188>
   {
      arpReqsIn++;   /* count these */
 803d764:	d0a0bd17 	ldw	r2,-32012(gp)
 803d768:	10800044 	addi	r2,r2,1
 803d76c:	d0a0bd15 	stw	r2,-32012(gp)
      arpReply(pkt); /* send arp reply */
 803d770:	e13ffb17 	ldw	r4,-20(fp)
 803d774:	803d3500 	call	803d350 <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
 803d778:	e0bffd17 	ldw	r2,-12(fp)
 803d77c:	10c00417 	ldw	r3,16(r2)
 803d780:	e0bffb17 	ldw	r2,-20(fp)
 803d784:	10800617 	ldw	r2,24(r2)
 803d788:	100b883a 	mov	r5,r2
 803d78c:	1809883a 	mov	r4,r3
 803d790:	803d2540 	call	803d254 <make_arp_entry>
 803d794:	00000306 	br	803d7a4 <arprcv+0x194>
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
 803d798:	d0a0bf17 	ldw	r2,-32004(gp)
 803d79c:	10800044 	addi	r2,r2,1
 803d7a0:	d0a0bf15 	stw	r2,-32004(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803d7a4:	008201b4 	movhi	r2,2054
 803d7a8:	10bcdb04 	addi	r2,r2,-3220
 803d7ac:	e0bfff15 	stw	r2,-4(fp)
 803d7b0:	00002006 	br	803d834 <arprcv+0x224>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 803d7b4:	e0bfff17 	ldw	r2,-4(fp)
 803d7b8:	10c00017 	ldw	r3,0(r2)
 803d7bc:	e0bffd17 	ldw	r2,-12(fp)
 803d7c0:	10800417 	ldw	r2,16(r2)
 803d7c4:	1880181e 	bne	r3,r2,803d828 <arprcv+0x218>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
 803d7c8:	e0bfff17 	ldw	r2,-4(fp)
 803d7cc:	10c00104 	addi	r3,r2,4
 803d7d0:	e0bffd17 	ldw	r2,-12(fp)
 803d7d4:	10800204 	addi	r2,r2,8
 803d7d8:	01800184 	movi	r6,6
 803d7dc:	100b883a 	mov	r5,r2
 803d7e0:	1809883a 	mov	r4,r3
 803d7e4:	80096e80 	call	80096e8 <memmove>
         tp->lasttime = cticks;
 803d7e8:	d0e0a317 	ldw	r3,-32116(gp)
 803d7ec:	e0bfff17 	ldw	r2,-4(fp)
 803d7f0:	10c00615 	stw	r3,24(r2)
         if (tp->pending)     /* packet waiting for this IP entry? */
 803d7f4:	e0bfff17 	ldw	r2,-4(fp)
 803d7f8:	10800417 	ldw	r2,16(r2)
 803d7fc:	10000226 	beq	r2,zero,803d808 <arprcv+0x1f8>
         {
            arp_send_pending(tp);
 803d800:	e13fff17 	ldw	r4,-4(fp)
 803d804:	803cc1c0 	call	803cc1c <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803d808:	01000084 	movi	r4,2
 803d80c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 803d810:	e13ffb17 	ldw	r4,-20(fp)
 803d814:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d818:	01000084 	movi	r4,2
 803d81c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

         return (0);
 803d820:	0005883a 	mov	r2,zero
 803d824:	00000e06 	br	803d860 <arprcv+0x250>
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803d828:	e0bfff17 	ldw	r2,-4(fp)
 803d82c:	10800804 	addi	r2,r2,32
 803d830:	e0bfff15 	stw	r2,-4(fp)
 803d834:	e0ffff17 	ldw	r3,-4(fp)
 803d838:	008201b4 	movhi	r2,2054
 803d83c:	10bd1b04 	addi	r2,r2,-2964
 803d840:	18bfdc36 	bltu	r3,r2,803d7b4 <arprcv+0x1a4>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 803d844:	01000084 	movi	r4,2
 803d848:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(pkt);
 803d84c:	e13ffb17 	ldw	r4,-20(fp)
 803d850:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d854:	01000084 	movi	r4,2
 803d858:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   return ENP_NOT_MINE;
 803d85c:	00800084 	movi	r2,2
}
 803d860:	e037883a 	mov	sp,fp
 803d864:	dfc00117 	ldw	ra,4(sp)
 803d868:	df000017 	ldw	fp,0(sp)
 803d86c:	dec00204 	addi	sp,sp,8
 803d870:	f800283a 	ret

0803d874 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
 803d874:	defff804 	addi	sp,sp,-32
 803d878:	dfc00715 	stw	ra,28(sp)
 803d87c:	df000615 	stw	fp,24(sp)
 803d880:	df000604 	addi	fp,sp,24
 803d884:	e13ffb15 	stw	r4,-20(fp)
 803d888:	e17ffa15 	stw	r5,-24(fp)
   struct arptabent *tp;
   unsigned long lticks = cticks;
 803d88c:	d0a0a317 	ldw	r2,-32116(gp)
 803d890:	e0bffc15 	stw	r2,-16(fp)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
 803d894:	e0bffa17 	ldw	r2,-24(fp)
 803d898:	1000081e 	bne	r2,zero,803d8bc <send_via_arp+0x48>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803d89c:	01000084 	movi	r4,2
 803d8a0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 803d8a4:	e13ffb17 	ldw	r4,-20(fp)
 803d8a8:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d8ac:	01000084 	movi	r4,2
 803d8b0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return SEND_DROPPED; 
 803d8b4:	00bffa84 	movi	r2,-22
 803d8b8:	00004806 	br	803d9dc <send_via_arp+0x168>
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
 803d8bc:	d0a0bc17 	ldw	r2,-32016(gp)
 803d8c0:	e0fffc17 	ldw	r3,-16(fp)
 803d8c4:	1885c83a 	sub	r2,r3,r2
 803d8c8:	10801970 	cmpltui	r2,r2,101
 803d8cc:	1000011e 	bne	r2,zero,803d8d4 <send_via_arp+0x60>
      arpcache = (struct arptabent *)NULL;
 803d8d0:	d020bb15 	stw	zero,-32020(gp)

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
 803d8d4:	d0a0bb17 	ldw	r2,-32020(gp)
 803d8d8:	10000726 	beq	r2,zero,803d8f8 <send_via_arp+0x84>
 803d8dc:	d0a0bb17 	ldw	r2,-32020(gp)
 803d8e0:	10800017 	ldw	r2,0(r2)
 803d8e4:	e0fffa17 	ldw	r3,-24(fp)
 803d8e8:	1880031e 	bne	r3,r2,803d8f8 <send_via_arp+0x84>
      tp = arpcache;
 803d8ec:	d0a0bb17 	ldw	r2,-32020(gp)
 803d8f0:	e0bfff15 	stw	r2,-4(fp)
 803d8f4:	00000306 	br	803d904 <send_via_arp+0x90>
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
 803d8f8:	e13ffa17 	ldw	r4,-24(fp)
 803d8fc:	803d0e80 	call	803d0e8 <find_oldest_arp>
 803d900:	e0bfff15 	stw	r2,-4(fp)
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
 803d904:	e0bfff17 	ldw	r2,-4(fp)
 803d908:	10800017 	ldw	r2,0(r2)
 803d90c:	e0fffa17 	ldw	r3,-24(fp)
 803d910:	18802d1e 	bne	r3,r2,803d9c8 <send_via_arp+0x154>
   {
      if (tp->pending)  /* arp already pending for this IP? */
 803d914:	e0bfff17 	ldw	r2,-4(fp)
 803d918:	10800417 	ldw	r2,16(r2)
 803d91c:	10002126 	beq	r2,zero,803d9a4 <send_via_arp+0x130>
      {
         if (lilfreeq.q_len < 2)
 803d920:	008201b4 	movhi	r2,2054
 803d924:	10bb3e17 	ldw	r2,-4872(r2)
 803d928:	10800088 	cmpgei	r2,r2,2
 803d92c:	1000091e 	bne	r2,zero,803d954 <send_via_arp+0xe0>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803d930:	01000084 	movi	r4,2
 803d934:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
 803d938:	e13ffb17 	ldw	r4,-20(fp)
 803d93c:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803d940:	01000084 	movi	r4,2
 803d944:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            err = SEND_DROPPED;    /* pkts already waiting for this IP entry */
 803d948:	00bffa84 	movi	r2,-22
 803d94c:	e0bffe15 	stw	r2,-8(fp)
 803d950:	00002106 	br	803d9d8 <send_via_arp+0x164>
         }
         else
         {
            PACKET tmppkt=tp->pending;
 803d954:	e0bfff17 	ldw	r2,-4(fp)
 803d958:	10800417 	ldw	r2,16(r2)
 803d95c:	e0bffd15 	stw	r2,-12(fp)

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
 803d960:	00000306 	br	803d970 <send_via_arp+0xfc>
               tmppkt = tmppkt->next;
 803d964:	e0bffd17 	ldw	r2,-12(fp)
 803d968:	10800017 	ldw	r2,0(r2)
 803d96c:	e0bffd15 	stw	r2,-12(fp)
            while (tmppkt->next)     /* traverse to the last packet */
 803d970:	e0bffd17 	ldw	r2,-12(fp)
 803d974:	10800017 	ldw	r2,0(r2)
 803d978:	103ffa1e 	bne	r2,zero,803d964 <send_via_arp+0xf0>
            tmppkt->next = pkt;      /* add new pkt to end of list */
 803d97c:	e0bffd17 	ldw	r2,-12(fp)
 803d980:	e0fffb17 	ldw	r3,-20(fp)
 803d984:	10c00015 	stw	r3,0(r2)
            if (pkt->next)
 803d988:	e0bffb17 	ldw	r2,-20(fp)
 803d98c:	10800017 	ldw	r2,0(r2)
 803d990:	10000126 	beq	r2,zero,803d998 <send_via_arp+0x124>
            {
               dtrap();              /* chain of pkts to be sent ??? */
 803d994:	802c3fc0 	call	802c3fc <dtrap>
            }
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
 803d998:	00800044 	movi	r2,1
 803d99c:	e0bffe15 	stw	r2,-8(fp)
 803d9a0:	00000d06 	br	803d9d8 <send_via_arp+0x164>
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
 803d9a4:	e0bfff17 	ldw	r2,-4(fp)
 803d9a8:	d0a0bb15 	stw	r2,-32020(gp)
         cachetime = lticks;  /* mark time we cached */
 803d9ac:	e0bffc17 	ldw	r2,-16(fp)
 803d9b0:	d0a0bc15 	stw	r2,-32016(gp)
         err = et_send(pkt, tp);
 803d9b4:	e17fff17 	ldw	r5,-4(fp)
 803d9b8:	e13ffb17 	ldw	r4,-20(fp)
 803d9bc:	803ca140 	call	803ca14 <et_send>
 803d9c0:	e0bffe15 	stw	r2,-8(fp)
 803d9c4:	00000406 	br	803d9d8 <send_via_arp+0x164>
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
 803d9c8:	e17ffa17 	ldw	r5,-24(fp)
 803d9cc:	e13ffb17 	ldw	r4,-20(fp)
 803d9d0:	803cc940 	call	803cc94 <send_arp>
 803d9d4:	e0bffe15 	stw	r2,-8(fp)

   return (err);
 803d9d8:	e0bffe17 	ldw	r2,-8(fp)
}
 803d9dc:	e037883a 	mov	sp,fp
 803d9e0:	dfc00117 	ldw	ra,4(sp)
 803d9e4:	df000017 	ldw	fp,0(sp)
 803d9e8:	dec00204 	addi	sp,sp,8
 803d9ec:	f800283a 	ret

0803d9f0 <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 803d9f0:	defffa04 	addi	sp,sp,-24
 803d9f4:	dfc00515 	stw	ra,20(sp)
 803d9f8:	df000415 	stw	fp,16(sp)
 803d9fc:	df000404 	addi	fp,sp,16
 803da00:	e13ffc15 	stw	r4,-16(fp)
   struct arptabent *tp;
   int arp_count = 0;
 803da04:	e03ffe15 	stw	zero,-8(fp)
   unsigned long lticks = cticks;
 803da08:	d0a0a317 	ldw	r2,-32116(gp)
 803da0c:	e0bffd15 	stw	r2,-12(fp)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803da10:	008201b4 	movhi	r2,2054
 803da14:	10bcdb04 	addi	r2,r2,-3220
 803da18:	e0bfff15 	stw	r2,-4(fp)
 803da1c:	00002706 	br	803dabc <cb_arpent_tmo+0xcc>
   {
      if (tp->t_pro_addr != 0)
 803da20:	e0bfff17 	ldw	r2,-4(fp)
 803da24:	10800017 	ldw	r2,0(r2)
 803da28:	10002126 	beq	r2,zero,803dab0 <cb_arpent_tmo+0xc0>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 803da2c:	e0bfff17 	ldw	r2,-4(fp)
 803da30:	10800417 	ldw	r2,16(r2)
 803da34:	10000b26 	beq	r2,zero,803da64 <cb_arpent_tmo+0x74>
 803da38:	e0bfff17 	ldw	r2,-4(fp)
 803da3c:	10800517 	ldw	r2,20(r2)
 803da40:	e0fffd17 	ldw	r3,-12(fp)
 803da44:	1885c83a 	sub	r2,r3,r2
 803da48:	10801970 	cmpltui	r2,r2,101
 803da4c:	1000051e 	bne	r2,zero,803da64 <cb_arpent_tmo+0x74>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
 803da50:	e13fff17 	ldw	r4,-4(fp)
 803da54:	803cb940 	call	803cb94 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 803da58:	e0bfff17 	ldw	r2,-4(fp)
 803da5c:	10000015 	stw	zero,0(r2)
 803da60:	00001306 	br	803dab0 <cb_arpent_tmo+0xc0>
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 803da64:	e0bfff17 	ldw	r2,-4(fp)
 803da68:	10800517 	ldw	r2,20(r2)
 803da6c:	e0fffd17 	ldw	r3,-12(fp)
 803da70:	1885c83a 	sub	r2,r3,r2
 803da74:	1007883a 	mov	r3,r2
 803da78:	d0a04d17 	ldw	r2,-32460(gp)
 803da7c:	18800916 	blt	r3,r2,803daa4 <cb_arpent_tmo+0xb4>
                  ((int)(lticks - tp->lasttime)   >= TPS))
 803da80:	e0bfff17 	ldw	r2,-4(fp)
 803da84:	10800617 	ldw	r2,24(r2)
 803da88:	e0fffd17 	ldw	r3,-12(fp)
 803da8c:	1885c83a 	sub	r2,r3,r2
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 803da90:	10801910 	cmplti	r2,r2,100
 803da94:	1000031e 	bne	r2,zero,803daa4 <cb_arpent_tmo+0xb4>
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 803da98:	e0bfff17 	ldw	r2,-4(fp)
 803da9c:	10000015 	stw	zero,0(r2)
 803daa0:	00000306 	br	803dab0 <cb_arpent_tmo+0xc0>
         }
         else
            arp_count++;
 803daa4:	e0bffe17 	ldw	r2,-8(fp)
 803daa8:	10800044 	addi	r2,r2,1
 803daac:	e0bffe15 	stw	r2,-8(fp)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 803dab0:	e0bfff17 	ldw	r2,-4(fp)
 803dab4:	10800804 	addi	r2,r2,32
 803dab8:	e0bfff15 	stw	r2,-4(fp)
 803dabc:	e0ffff17 	ldw	r3,-4(fp)
 803dac0:	008201b4 	movhi	r2,2054
 803dac4:	10bd1b04 	addi	r2,r2,-2964
 803dac8:	18bfd536 	bltu	r3,r2,803da20 <cb_arpent_tmo+0x30>
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
 803dacc:	e0bffe17 	ldw	r2,-8(fp)
 803dad0:	1000041e 	bne	r2,zero,803dae4 <cb_arpent_tmo+0xf4>
   {
      in_timerkill(arp_timer);
 803dad4:	d0a0ba17 	ldw	r2,-32024(gp)
 803dad8:	1009883a 	mov	r4,r2
 803dadc:	803c7f40 	call	803c7f4 <in_timerkill>
      arp_timer = 0;
 803dae0:	d020ba15 	stw	zero,-32024(gp)
   }
      
   USE_ARG(arg);
}
 803dae4:	0001883a 	nop
 803dae8:	e037883a 	mov	sp,fp
 803daec:	dfc00117 	ldw	ra,4(sp)
 803daf0:	df000017 	ldw	fp,0(sp)
 803daf4:	dec00204 	addi	sp,sp,8
 803daf8:	f800283a 	ret

0803dafc <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
 803dafc:	defff704 	addi	sp,sp,-36
 803db00:	dfc00815 	stw	ra,32(sp)
 803db04:	df000715 	stw	fp,28(sp)
 803db08:	df000704 	addi	fp,sp,28
 803db0c:	e13ffa15 	stw	r4,-24(fp)
 803db10:	e17ff915 	stw	r5,-28(fp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
 803db14:	e0bffa17 	ldw	r2,-24(fp)
 803db18:	10802717 	ldw	r2,156(r2)
 803db1c:	e0bfff15 	stw	r2,-4(fp)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 803db20:	01000084 	movi	r4,2
 803db24:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 803db28:	01000c04 	movi	r4,48
 803db2c:	802b8840 	call	802b884 <pk_alloc>
 803db30:	e0bffe15 	stw	r2,-8(fp)
   if (!arppkt)
 803db34:	e0bffe17 	ldw	r2,-8(fp)
 803db38:	1000041e 	bne	r2,zero,803db4c <grat_arp+0x50>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803db3c:	01000084 	movi	r4,2
 803db40:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 803db44:	00bffa84 	movi	r2,-22
 803db48:	00009506 	br	803dda0 <grat_arp+0x2a4>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803db4c:	01000084 	movi	r4,2
 803db50:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 803db54:	e0bffe17 	ldw	r2,-8(fp)
 803db58:	10c00117 	ldw	r3,4(r2)
 803db5c:	e0bffe17 	ldw	r2,-8(fp)
 803db60:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 803db64:	e0bffe17 	ldw	r2,-8(fp)
 803db68:	00c00c04 	movi	r3,48
 803db6c:	10c00415 	stw	r3,16(r2)
   arppkt->net = net;
 803db70:	e0bffe17 	ldw	r2,-8(fp)
 803db74:	e0fffa17 	ldw	r3,-24(fp)
 803db78:	10c00615 	stw	r3,24(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 803db7c:	e0bffe17 	ldw	r2,-8(fp)
 803db80:	10800117 	ldw	r2,4(r2)
 803db84:	10800084 	addi	r2,r2,2
 803db88:	e0bffd15 	stw	r2,-12(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 803db8c:	e0bffe17 	ldw	r2,-8(fp)
 803db90:	10800117 	ldw	r2,4(r2)
 803db94:	10800404 	addi	r2,r2,16
 803db98:	e0bffc15 	stw	r2,-16(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 803db9c:	e0bffc17 	ldw	r2,-16(fp)
 803dba0:	00c04004 	movi	r3,256
 803dba4:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 803dba8:	e0bffc17 	ldw	r2,-16(fp)
 803dbac:	00c00204 	movi	r3,8
 803dbb0:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
 803dbb4:	e0bffc17 	ldw	r2,-16(fp)
 803dbb8:	00c00184 	movi	r3,6
 803dbbc:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
 803dbc0:	e0bffc17 	ldw	r2,-16(fp)
 803dbc4:	00c00104 	movi	r3,4
 803dbc8:	10c00145 	stb	r3,5(r2)
   
   /* ARP req? */
   if (flag == 0)
 803dbcc:	e0bff917 	ldw	r2,-28(fp)
 803dbd0:	1000041e 	bne	r2,zero,803dbe4 <grat_arp+0xe8>
      /* yup */
      arphdr->ar_op = ARREQ;
 803dbd4:	e0bffc17 	ldw	r2,-16(fp)
 803dbd8:	00c04004 	movi	r3,256
 803dbdc:	10c0018d 	sth	r3,6(r2)
 803dbe0:	00000306 	br	803dbf0 <grat_arp+0xf4>
   else
     /* nope */
      arphdr->ar_op = ARREP;
 803dbe4:	e0bffc17 	ldw	r2,-16(fp)
 803dbe8:	00c08004 	movi	r3,512
 803dbec:	10c0018d 	sth	r3,6(r2)
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
 803dbf0:	e0bffa17 	ldw	r2,-24(fp)
 803dbf4:	10c00a17 	ldw	r3,40(r2)
 803dbf8:	e0bffc17 	ldw	r2,-16(fp)
 803dbfc:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
 803dc00:	e0bffa17 	ldw	r2,-24(fp)
 803dc04:	10c00a17 	ldw	r3,40(r2)
 803dc08:	e0bffc17 	ldw	r2,-16(fp)
 803dc0c:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 803dc10:	e0bffc17 	ldw	r2,-16(fp)
 803dc14:	10c00204 	addi	r3,r2,8
 803dc18:	e0bfff17 	ldw	r2,-4(fp)
 803dc1c:	10800517 	ldw	r2,20(r2)
 803dc20:	01800184 	movi	r6,6
 803dc24:	100b883a 	mov	r5,r2
 803dc28:	1809883a 	mov	r4,r3
 803dc2c:	80096e80 	call	80096e8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 803dc30:	01800184 	movi	r6,6
 803dc34:	01403fc4 	movi	r5,255
 803dc38:	e13ffd17 	ldw	r4,-12(fp)
 803dc3c:	8002fa40 	call	8002fa4 <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 803dc40:	e0bffd17 	ldw	r2,-12(fp)
 803dc44:	10c00184 	addi	r3,r2,6
 803dc48:	e0bfff17 	ldw	r2,-4(fp)
 803dc4c:	10800517 	ldw	r2,20(r2)
 803dc50:	01800184 	movi	r6,6
 803dc54:	100b883a 	mov	r5,r2
 803dc58:	1809883a 	mov	r4,r3
 803dc5c:	80096e80 	call	80096e8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 803dc60:	e0bffd17 	ldw	r2,-12(fp)
 803dc64:	10800304 	addi	r2,r2,12
 803dc68:	00c00204 	movi	r3,8
 803dc6c:	10c00005 	stb	r3,0(r2)
 803dc70:	e0bffd17 	ldw	r2,-12(fp)
 803dc74:	10800344 	addi	r2,r2,13
 803dc78:	00c00184 	movi	r3,6
 803dc7c:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 803dc80:	e0bffc17 	ldw	r2,-16(fp)
 803dc84:	e0bffb15 	stw	r2,-20(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 803dc88:	e0bffb17 	ldw	r2,-20(fp)
 803dc8c:	10c00204 	addi	r3,r2,8
 803dc90:	e0bffc17 	ldw	r2,-16(fp)
 803dc94:	10800204 	addi	r2,r2,8
 803dc98:	01800184 	movi	r6,6
 803dc9c:	100b883a 	mov	r5,r2
 803dca0:	1809883a 	mov	r4,r3
 803dca4:	80096e80 	call	80096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 803dca8:	e0bffb17 	ldw	r2,-20(fp)
 803dcac:	10c00384 	addi	r3,r2,14
 803dcb0:	e0bffc17 	ldw	r2,-16(fp)
 803dcb4:	10800404 	addi	r2,r2,16
 803dcb8:	01800104 	movi	r6,4
 803dcbc:	100b883a 	mov	r5,r2
 803dcc0:	1809883a 	mov	r4,r3
 803dcc4:	80096e80 	call	80096e8 <memmove>

   /* ARP req? */
   if (flag == 0)
 803dcc8:	e0bff917 	ldw	r2,-28(fp)
 803dccc:	1000091e 	bne	r2,zero,803dcf4 <grat_arp+0x1f8>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 803dcd0:	e0bffb17 	ldw	r2,-20(fp)
 803dcd4:	10c00484 	addi	r3,r2,18
 803dcd8:	e0bffc17 	ldw	r2,-16(fp)
 803dcdc:	10800504 	addi	r2,r2,20
 803dce0:	01800184 	movi	r6,6
 803dce4:	100b883a 	mov	r5,r2
 803dce8:	1809883a 	mov	r4,r3
 803dcec:	80096e80 	call	80096e8 <memmove>
 803dcf0:	00000806 	br	803dd14 <grat_arp+0x218>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
 803dcf4:	e0bffb17 	ldw	r2,-20(fp)
 803dcf8:	10c00484 	addi	r3,r2,18
 803dcfc:	e0bffc17 	ldw	r2,-16(fp)
 803dd00:	10800204 	addi	r2,r2,8
 803dd04:	01800184 	movi	r6,6
 803dd08:	100b883a 	mov	r5,r2
 803dd0c:	1809883a 	mov	r4,r3
 803dd10:	80096e80 	call	80096e8 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 803dd14:	e0bffb17 	ldw	r2,-20(fp)
 803dd18:	10c00604 	addi	r3,r2,24
 803dd1c:	e0bffc17 	ldw	r2,-16(fp)
 803dd20:	10800704 	addi	r2,r2,28
 803dd24:	01800104 	movi	r6,4
 803dd28:	100b883a 	mov	r5,r2
 803dd2c:	1809883a 	mov	r4,r3
 803dd30:	80096e80 	call	80096e8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 803dd34:	e0bffa17 	ldw	r2,-24(fp)
 803dd38:	10800417 	ldw	r2,16(r2)
 803dd3c:	10000526 	beq	r2,zero,803dd54 <grat_arp+0x258>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 803dd40:	e0bffa17 	ldw	r2,-24(fp)
 803dd44:	10800417 	ldw	r2,16(r2)
 803dd48:	e13ffe17 	ldw	r4,-8(fp)
 803dd4c:	103ee83a 	callr	r2
 803dd50:	00000f06 	br	803dd90 <grat_arp+0x294>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 803dd54:	e0bffa17 	ldw	r2,-24(fp)
 803dd58:	10800317 	ldw	r2,12(r2)
 803dd5c:	e0fffe17 	ldw	r3,-8(fp)
 803dd60:	19000617 	ldw	r4,24(r3)
 803dd64:	e0fffe17 	ldw	r3,-8(fp)
 803dd68:	18c00117 	ldw	r3,4(r3)
 803dd6c:	01800c04 	movi	r6,48
 803dd70:	180b883a 	mov	r5,r3
 803dd74:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803dd78:	01000084 	movi	r4,2
 803dd7c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 803dd80:	e13ffe17 	ldw	r4,-8(fp)
 803dd84:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803dd88:	01000084 	movi	r4,2
 803dd8c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 803dd90:	d0a0be17 	ldw	r2,-32008(gp)
 803dd94:	10800044 	addi	r2,r2,1
 803dd98:	d0a0be15 	stw	r2,-32008(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 803dd9c:	00800044 	movi	r2,1
}
 803dda0:	e037883a 	mov	sp,fp
 803dda4:	dfc00117 	ldw	ra,4(sp)
 803dda8:	df000017 	ldw	fp,0(sp)
 803ddac:	dec00204 	addi	sp,sp,8
 803ddb0:	f800283a 	ret

0803ddb4 <if_getbynum>:
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
 803ddb4:	defffc04 	addi	sp,sp,-16
 803ddb8:	dfc00315 	stw	ra,12(sp)
 803ddbc:	df000215 	stw	fp,8(sp)
 803ddc0:	df000204 	addi	fp,sp,8
 803ddc4:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803ddc8:	008201b4 	movhi	r2,2054
 803ddcc:	10bd1b17 	ldw	r2,-2964(r2)
 803ddd0:	e0bfff15 	stw	r2,-4(fp)
 803ddd4:	00000906 	br	803ddfc <if_getbynum+0x48>
   {
      if(ifnum-- == 0)
 803ddd8:	e0bffe17 	ldw	r2,-8(fp)
 803dddc:	10ffffc4 	addi	r3,r2,-1
 803dde0:	e0fffe15 	stw	r3,-8(fp)
 803dde4:	1000021e 	bne	r2,zero,803ddf0 <if_getbynum+0x3c>
         return ifp;
 803dde8:	e0bfff17 	ldw	r2,-4(fp)
 803ddec:	00000706 	br	803de0c <if_getbynum+0x58>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803ddf0:	e0bfff17 	ldw	r2,-4(fp)
 803ddf4:	10800017 	ldw	r2,0(r2)
 803ddf8:	e0bfff15 	stw	r2,-4(fp)
 803ddfc:	e0bfff17 	ldw	r2,-4(fp)
 803de00:	103ff51e 	bne	r2,zero,803ddd8 <if_getbynum+0x24>
   }
   dtrap();
 803de04:	802c3fc0 	call	802c3fc <dtrap>
   return NULL;   /* list is not long enough */
 803de08:	0005883a 	mov	r2,zero
}
 803de0c:	e037883a 	mov	sp,fp
 803de10:	dfc00117 	ldw	ra,4(sp)
 803de14:	df000017 	ldw	fp,0(sp)
 803de18:	dec00204 	addi	sp,sp,8
 803de1c:	f800283a 	ret

0803de20 <isbcast>:
 * RETURNS:  Returns TRUE if broadcast, else false. 
 */

int
isbcast(NET ifc, unsigned char * addr)
{
 803de20:	defffd04 	addi	sp,sp,-12
 803de24:	df000215 	stw	fp,8(sp)
 803de28:	df000204 	addi	fp,sp,8
 803de2c:	e13fff15 	stw	r4,-4(fp)
 803de30:	e17ffe15 	stw	r5,-8(fp)
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
 803de34:	e0bffe17 	ldw	r2,-8(fp)
 803de38:	108000cc 	andi	r2,r2,3
 803de3c:	10000e26 	beq	r2,zero,803de78 <isbcast+0x58>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
 803de40:	e0bffe17 	ldw	r2,-8(fp)
 803de44:	1080000b 	ldhu	r2,0(r2)
 803de48:	10ffffcc 	andi	r3,r2,65535
 803de4c:	00bfffd4 	movui	r2,65535
 803de50:	18800226 	beq	r3,r2,803de5c <isbcast+0x3c>
         return(FALSE);
 803de54:	0005883a 	mov	r2,zero
 803de58:	00002206 	br	803dee4 <isbcast+0xc4>
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
 803de5c:	e0bffe17 	ldw	r2,-8(fp)
 803de60:	10800084 	addi	r2,r2,2
 803de64:	10800017 	ldw	r2,0(r2)
 803de68:	10bfffe0 	cmpeqi	r2,r2,-1
 803de6c:	1000101e 	bne	r2,zero,803deb0 <isbcast+0x90>
         return FALSE;
 803de70:	0005883a 	mov	r2,zero
 803de74:	00001b06 	br	803dee4 <isbcast+0xc4>
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
 803de78:	e0bffe17 	ldw	r2,-8(fp)
 803de7c:	10800017 	ldw	r2,0(r2)
 803de80:	10bfffe0 	cmpeqi	r2,r2,-1
 803de84:	1000021e 	bne	r2,zero,803de90 <isbcast+0x70>
         return FALSE;
 803de88:	0005883a 	mov	r2,zero
 803de8c:	00001506 	br	803dee4 <isbcast+0xc4>

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
 803de90:	e0bffe17 	ldw	r2,-8(fp)
 803de94:	10800104 	addi	r2,r2,4
 803de98:	1080000b 	ldhu	r2,0(r2)
 803de9c:	10ffffcc 	andi	r3,r2,65535
 803dea0:	00bfffd4 	movui	r2,65535
 803dea4:	18800226 	beq	r3,r2,803deb0 <isbcast+0x90>
         return(FALSE);
 803dea8:	0005883a 	mov	r2,zero
 803deac:	00000d06 	br	803dee4 <isbcast+0xc4>
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 803deb0:	e0bfff17 	ldw	r2,-4(fp)
 803deb4:	10802717 	ldw	r2,156(r2)
 803deb8:	10800217 	ldw	r2,8(r2)
 803debc:	108005e0 	cmpeqi	r2,r2,23
 803dec0:	1000051e 	bne	r2,zero,803ded8 <isbcast+0xb8>
       (ifc->n_mib->ifType == SLIP))
 803dec4:	e0bfff17 	ldw	r2,-4(fp)
 803dec8:	10802717 	ldw	r2,156(r2)
 803decc:	10800217 	ldw	r2,8(r2)
   if ((ifc->n_mib->ifType == PPP) ||
 803ded0:	10800718 	cmpnei	r2,r2,28
 803ded4:	1000021e 	bne	r2,zero,803dee0 <isbcast+0xc0>
   {
      return FALSE;
 803ded8:	0005883a 	mov	r2,zero
 803dedc:	00000106 	br	803dee4 <isbcast+0xc4>
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
 803dee0:	00800044 	movi	r2,1
}
 803dee4:	e037883a 	mov	sp,fp
 803dee8:	df000017 	ldw	fp,0(sp)
 803deec:	dec00104 	addi	sp,sp,4
 803def0:	f800283a 	ret

0803def4 <reg_type>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
 803def4:	defffb04 	addi	sp,sp,-20
 803def8:	dfc00415 	stw	ra,16(sp)
 803defc:	df000315 	stw	fp,12(sp)
 803df00:	df000304 	addi	fp,sp,12
 803df04:	2005883a 	mov	r2,r4
 803df08:	e0bffd0d 	sth	r2,-12(fp)
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803df0c:	008201b4 	movhi	r2,2054
 803df10:	10bd1b17 	ldw	r2,-2964(r2)
 803df14:	e0bfff15 	stw	r2,-4(fp)
 803df18:	00001106 	br	803df60 <reg_type+0x6c>
   {
      if (ifp->n_reg_type)    /* make sure call exists */
 803df1c:	e0bfff17 	ldw	r2,-4(fp)
 803df20:	10800617 	ldw	r2,24(r2)
 803df24:	10000b26 	beq	r2,zero,803df54 <reg_type+0x60>
      {
         e = (ifp->n_reg_type)(type, ifp);
 803df28:	e0bfff17 	ldw	r2,-4(fp)
 803df2c:	10800617 	ldw	r2,24(r2)
 803df30:	e0fffd0b 	ldhu	r3,-12(fp)
 803df34:	e17fff17 	ldw	r5,-4(fp)
 803df38:	1809883a 	mov	r4,r3
 803df3c:	103ee83a 	callr	r2
 803df40:	e0bffe15 	stw	r2,-8(fp)
         if (e)
 803df44:	e0bffe17 	ldw	r2,-8(fp)
 803df48:	10000226 	beq	r2,zero,803df54 <reg_type+0x60>
            return e;   /* bails out if error */
 803df4c:	e0bffe17 	ldw	r2,-8(fp)
 803df50:	00000606 	br	803df6c <reg_type+0x78>
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 803df54:	e0bfff17 	ldw	r2,-4(fp)
 803df58:	10800017 	ldw	r2,0(r2)
 803df5c:	e0bfff15 	stw	r2,-4(fp)
 803df60:	e0bfff17 	ldw	r2,-4(fp)
 803df64:	103fed1e 	bne	r2,zero,803df1c <reg_type+0x28>
      }
   }
   return 0;   /* OK code */
 803df68:	0005883a 	mov	r2,zero
}
 803df6c:	e037883a 	mov	sp,fp
 803df70:	dfc00117 	ldw	ra,4(sp)
 803df74:	df000017 	ldw	fp,0(sp)
 803df78:	dec00204 	addi	sp,sp,8
 803df7c:	f800283a 	ret

0803df80 <if_killsocks>:
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
 803df80:	defffa04 	addi	sp,sp,-24
 803df84:	dfc00515 	stw	ra,20(sp)
 803df88:	df000415 	stw	fp,16(sp)
 803df8c:	df000404 	addi	fp,sp,16
 803df90:	e13ffc15 	stw	r4,-16(fp)
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
 803df94:	008201b4 	movhi	r2,2054
 803df98:	10bc1717 	ldw	r2,-4004(r2)
 803df9c:	e0bfff15 	stw	r2,-4(fp)
   while(so)
 803dfa0:	00001306 	br	803dff0 <if_killsocks+0x70>
   {
      if(so->so_pcb)
 803dfa4:	e0bfff17 	ldw	r2,-4(fp)
 803dfa8:	10800117 	ldw	r2,4(r2)
 803dfac:	10000526 	beq	r2,zero,803dfc4 <if_killsocks+0x44>
         so_ifp = so->so_pcb->ifp;
 803dfb0:	e0bfff17 	ldw	r2,-4(fp)
 803dfb4:	10800117 	ldw	r2,4(r2)
 803dfb8:	10800a17 	ldw	r2,40(r2)
 803dfbc:	e0bffe15 	stw	r2,-8(fp)
 803dfc0:	00000106 	br	803dfc8 <if_killsocks+0x48>
      else
         so_ifp = NULL;
 803dfc4:	e03ffe15 	stw	zero,-8(fp)
      next = (struct socket *)so->next;
 803dfc8:	e0bfff17 	ldw	r2,-4(fp)
 803dfcc:	10800017 	ldw	r2,0(r2)
 803dfd0:	e0bffd15 	stw	r2,-12(fp)
      if (so_ifp == ifp)
 803dfd4:	e0fffe17 	ldw	r3,-8(fp)
 803dfd8:	e0bffc17 	ldw	r2,-16(fp)
 803dfdc:	1880021e 	bne	r3,r2,803dfe8 <if_killsocks+0x68>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 803dfe0:	e13fff17 	ldw	r4,-4(fp)
 803dfe4:	8030e440 	call	8030e44 <soabort>
      }
      so = next;
 803dfe8:	e0bffd17 	ldw	r2,-12(fp)
 803dfec:	e0bfff15 	stw	r2,-4(fp)
   while(so)
 803dff0:	e0bfff17 	ldw	r2,-4(fp)
 803dff4:	103feb1e 	bne	r2,zero,803dfa4 <if_killsocks+0x24>
   }
}
 803dff8:	0001883a 	nop
 803dffc:	0001883a 	nop
 803e000:	e037883a 	mov	sp,fp
 803e004:	dfc00117 	ldw	ra,4(sp)
 803e008:	df000017 	ldw	fp,0(sp)
 803e00c:	dec00204 	addi	sp,sp,8
 803e010:	f800283a 	ret

0803e014 <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
 803e014:	defffe04 	addi	sp,sp,-8
 803e018:	dfc00115 	stw	ra,4(sp)
 803e01c:	df000015 	stw	fp,0(sp)
 803e020:	d839883a 	mov	fp,sp

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 803e024:	01000204 	movi	r4,8
 803e028:	803def40 	call	803def4 <reg_type>
 803e02c:	10000526 	beq	r2,zero,803e044 <ip_init+0x30>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
 803e030:	01020174 	movhi	r4,2053
 803e034:	210cec04 	addi	r4,r4,13232
 803e038:	80033800 	call	8003380 <puts>
#endif
      return(1);
 803e03c:	00800044 	movi	r2,1
 803e040:	00002506 	br	803e0d8 <ip_init+0xc4>
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 803e044:	01801404 	movi	r6,80
 803e048:	000b883a 	mov	r5,zero
 803e04c:	010201b4 	movhi	r4,2054
 803e050:	213d2004 	addi	r4,r4,-2944
 803e054:	8002fa40 	call	8002fa4 <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
 803e058:	00c00084 	movi	r3,2
 803e05c:	008201b4 	movhi	r2,2054
 803e060:	10fd2015 	stw	r3,-2944(r2)
   ip_mib.ipDefaultTTL = IP_TTL;
 803e064:	00c01004 	movi	r3,64
 803e068:	008201b4 	movhi	r2,2054
 803e06c:	10fd2115 	stw	r3,-2940(r2)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 803e070:	d0a04f17 	ldw	r2,-32452(gp)
 803e074:	10800f24 	muli	r2,r2,60
 803e078:	1009883a 	mov	r4,r2
 803e07c:	802cf5c0 	call	802cf5c <npalloc>
 803e080:	d0a0c115 	stw	r2,-31996(gp)
   if (!rt_mib)
 803e084:	d0a0c117 	ldw	r2,-31996(gp)
 803e088:	1000051e 	bne	r2,zero,803e0a0 <ip_init+0x8c>
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
 803e08c:	01020174 	movhi	r4,2053
 803e090:	210cf904 	addi	r4,r4,13284
 803e094:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
 803e098:	00bffb04 	movi	r2,-20
 803e09c:	00000e06 	br	803e0d8 <ip_init+0xc4>
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
 803e0a0:	d0e0c117 	ldw	r3,-31996(gp)
 803e0a4:	d0a04f17 	ldw	r2,-32452(gp)
 803e0a8:	10800f24 	muli	r2,r2,60
 803e0ac:	100d883a 	mov	r6,r2
 803e0b0:	000b883a 	mov	r5,zero
 803e0b4:	1809883a 	mov	r4,r3
 803e0b8:	8002fa40 	call	8002fa4 <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
 803e0bc:	00c00044 	movi	r3,1
 803e0c0:	008201b4 	movhi	r2,2054
 803e0c4:	10fd2015 	stw	r3,-2944(r2)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
 803e0c8:	00c01e04 	movi	r3,120
 803e0cc:	008201b4 	movhi	r2,2054
 803e0d0:	10fd2c15 	stw	r3,-2896(r2)
      return(1);
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
 803e0d4:	0005883a 	mov	r2,zero
}
 803e0d8:	e037883a 	mov	sp,fp
 803e0dc:	dfc00117 	ldw	ra,4(sp)
 803e0e0:	df000017 	ldw	fp,0(sp)
 803e0e4:	dec00204 	addi	sp,sp,8
 803e0e8:	f800283a 	ret

0803e0ec <ip_bldhead>:
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
 803e0ec:	defff804 	addi	sp,sp,-32
 803e0f0:	dfc00715 	stw	ra,28(sp)
 803e0f4:	df000615 	stw	fp,24(sp)
 803e0f8:	df000604 	addi	fp,sp,24
 803e0fc:	e13ffd15 	stw	r4,-12(fp)
 803e100:	e17ffc15 	stw	r5,-16(fp)
 803e104:	3005883a 	mov	r2,r6
 803e108:	3807883a 	mov	r3,r7
 803e10c:	e0bffb05 	stb	r2,-20(fp)
 803e110:	1805883a 	mov	r2,r3
 803e114:	e0bffa0d 	sth	r2,-24(fp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 803e118:	e0bffd17 	ldw	r2,-12(fp)
 803e11c:	10800317 	ldw	r2,12(r2)
 803e120:	10fffb04 	addi	r3,r2,-20
 803e124:	e0bffd17 	ldw	r2,-12(fp)
 803e128:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 803e12c:	e0bffd17 	ldw	r2,-12(fp)
 803e130:	10800417 	ldw	r2,16(r2)
 803e134:	10c00504 	addi	r3,r2,20
 803e138:	e0bffd17 	ldw	r2,-12(fp)
 803e13c:	10c00415 	stw	r3,16(r2)

   pip = (struct ip*)p->nb_prot;
 803e140:	e0bffd17 	ldw	r2,-12(fp)
 803e144:	10800317 	ldw	r2,12(r2)
 803e148:	e0bfff15 	stw	r2,-4(fp)

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 803e14c:	e0bfff17 	ldw	r2,-4(fp)
 803e150:	00c01144 	movi	r3,69
 803e154:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
 803e158:	e0bfff17 	ldw	r2,-4(fp)
 803e15c:	e0fffa0b 	ldhu	r3,-24(fp)
 803e160:	10c0018d 	sth	r3,6(r2)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 803e164:	e0bffc17 	ldw	r2,-16(fp)
 803e168:	10bfffcc 	andi	r2,r2,65535
 803e16c:	1004d23a 	srli	r2,r2,8
 803e170:	1007883a 	mov	r3,r2
 803e174:	e0bffc17 	ldw	r2,-16(fp)
 803e178:	10bfffcc 	andi	r2,r2,65535
 803e17c:	1004923a 	slli	r2,r2,8
 803e180:	1884b03a 	or	r2,r3,r2
 803e184:	1007883a 	mov	r3,r2
 803e188:	e0bfff17 	ldw	r2,-4(fp)
 803e18c:	10c0010d 	sth	r3,4(r2)
   pip->ip_len = htons((unshort)p->nb_plen);
 803e190:	e0bffd17 	ldw	r2,-12(fp)
 803e194:	10800417 	ldw	r2,16(r2)
 803e198:	10bfffcc 	andi	r2,r2,65535
 803e19c:	1004d23a 	srli	r2,r2,8
 803e1a0:	1007883a 	mov	r3,r2
 803e1a4:	e0bffd17 	ldw	r2,-12(fp)
 803e1a8:	10800417 	ldw	r2,16(r2)
 803e1ac:	10bfffcc 	andi	r2,r2,65535
 803e1b0:	1004923a 	slli	r2,r2,8
 803e1b4:	1884b03a 	or	r2,r3,r2
 803e1b8:	1007883a 	mov	r3,r2
 803e1bc:	e0bfff17 	ldw	r2,-4(fp)
 803e1c0:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
 803e1c4:	e0bfff17 	ldw	r2,-4(fp)
 803e1c8:	e0fffb03 	ldbu	r3,-20(fp)
 803e1cc:	10c00245 	stb	r3,9(r2)

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 803e1d0:	e0bffd17 	ldw	r2,-12(fp)
 803e1d4:	10800c17 	ldw	r2,48(r2)
 803e1d8:	e0bffe15 	stw	r2,-8(fp)
 803e1dc:	e0bffe17 	ldw	r2,-8(fp)
 803e1e0:	10001126 	beq	r2,zero,803e228 <ip_bldhead+0x13c>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 803e1e4:	e0bffe17 	ldw	r2,-8(fp)
 803e1e8:	10800043 	ldbu	r2,1(r2)
 803e1ec:	10803fcc 	andi	r2,r2,255
 803e1f0:	10000526 	beq	r2,zero,803e208 <ip_bldhead+0x11c>
         pip->ip_time = sopts->ip_ttl;
 803e1f4:	e0bffe17 	ldw	r2,-8(fp)
 803e1f8:	10c00043 	ldbu	r3,1(r2)
 803e1fc:	e0bfff17 	ldw	r2,-4(fp)
 803e200:	10c00205 	stb	r3,8(r2)
 803e204:	00000306 	br	803e214 <ip_bldhead+0x128>
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
 803e208:	e0bfff17 	ldw	r2,-4(fp)
 803e20c:	00c01004 	movi	r3,64
 803e210:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 803e214:	e0bffe17 	ldw	r2,-8(fp)
 803e218:	10c00003 	ldbu	r3,0(r2)
 803e21c:	e0bfff17 	ldw	r2,-4(fp)
 803e220:	10c00045 	stb	r3,1(r2)
 803e224:	00000506 	br	803e23c <ip_bldhead+0x150>
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
 803e228:	e0bfff17 	ldw	r2,-4(fp)
 803e22c:	00c01004 	movi	r3,64
 803e230:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 803e234:	e0bfff17 	ldw	r2,-4(fp)
 803e238:	10000045 	stb	zero,1(r2)
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
 803e23c:	e0bfff17 	ldw	r2,-4(fp)
 803e240:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 803e244:	01400284 	movi	r5,10
 803e248:	e13fff17 	ldw	r4,-4(fp)
 803e24c:	8027be00 	call	8027be0 <cksum>
 803e250:	0084303a 	nor	r2,zero,r2
 803e254:	1007883a 	mov	r3,r2
 803e258:	e0bfff17 	ldw	r2,-4(fp)
 803e25c:	10c0028d 	sth	r3,10(r2)
}
 803e260:	0001883a 	nop
 803e264:	e037883a 	mov	sp,fp
 803e268:	dfc00117 	ldw	ra,4(sp)
 803e26c:	df000017 	ldw	fp,0(sp)
 803e270:	dec00204 	addi	sp,sp,8
 803e274:	f800283a 	ret

0803e278 <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 803e278:	defff004 	addi	sp,sp,-64
 803e27c:	dfc00f15 	stw	ra,60(sp)
 803e280:	df000e15 	stw	fp,56(sp)
 803e284:	df000e04 	addi	fp,sp,56
 803e288:	e13ff515 	stw	r4,-44(fp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 803e28c:	e0bff517 	ldw	r2,-44(fp)
 803e290:	10800717 	ldw	r2,28(r2)
 803e294:	1006d63a 	srli	r3,r2,24
 803e298:	e0bff517 	ldw	r2,-44(fp)
 803e29c:	10800717 	ldw	r2,28(r2)
 803e2a0:	1004d23a 	srli	r2,r2,8
 803e2a4:	10bfc00c 	andi	r2,r2,65280
 803e2a8:	1886b03a 	or	r3,r3,r2
 803e2ac:	e0bff517 	ldw	r2,-44(fp)
 803e2b0:	10800717 	ldw	r2,28(r2)
 803e2b4:	1004923a 	slli	r2,r2,8
 803e2b8:	10803fec 	andhi	r2,r2,255
 803e2bc:	1886b03a 	or	r3,r3,r2
 803e2c0:	e0bff517 	ldw	r2,-44(fp)
 803e2c4:	10800717 	ldw	r2,28(r2)
 803e2c8:	1004963a 	slli	r2,r2,24
 803e2cc:	1884b03a 	or	r2,r3,r2
 803e2d0:	10fc002c 	andhi	r3,r2,61440
 803e2d4:	00b80034 	movhi	r2,57344
 803e2d8:	1880a21e 	bne	r3,r2,803e564 <ip_write_internal+0x2ec>
   {
      if (p->imo != NULL)
 803e2dc:	e0bff517 	ldw	r2,-44(fp)
 803e2e0:	10800b17 	ldw	r2,44(r2)
 803e2e4:	10001426 	beq	r2,zero,803e338 <ip_write_internal+0xc0>
         if (p->imo->imo_multicast_netp)
 803e2e8:	e0bff517 	ldw	r2,-44(fp)
 803e2ec:	10800b17 	ldw	r2,44(r2)
 803e2f0:	10800017 	ldw	r2,0(r2)
 803e2f4:	10000626 	beq	r2,zero,803e310 <ip_write_internal+0x98>
            p->net = p->imo->imo_multicast_netp;
 803e2f8:	e0bff517 	ldw	r2,-44(fp)
 803e2fc:	10800b17 	ldw	r2,44(r2)
 803e300:	10c00017 	ldw	r3,0(r2)
 803e304:	e0bff517 	ldw	r2,-44(fp)
 803e308:	10c00615 	stw	r3,24(r2)
 803e30c:	00002106 	br	803e394 <ip_write_internal+0x11c>
         else
            p->net = iproute(p->fhost, &firsthop);
 803e310:	e0bff517 	ldw	r2,-44(fp)
 803e314:	10800717 	ldw	r2,28(r2)
 803e318:	e0fff604 	addi	r3,fp,-40
 803e31c:	180b883a 	mov	r5,r3
 803e320:	1009883a 	mov	r4,r2
 803e324:	803fca80 	call	803fca8 <iproute>
 803e328:	1007883a 	mov	r3,r2
 803e32c:	e0bff517 	ldw	r2,-44(fp)
 803e330:	10c00615 	stw	r3,24(r2)
 803e334:	00001706 	br	803e394 <ip_write_internal+0x11c>
      else
      {
         for (i = 0; i < ifNumber; i++)
 803e338:	e03fff15 	stw	zero,-4(fp)
 803e33c:	00001206 	br	803e388 <ip_write_internal+0x110>
            if (nets[i]->n_mcastlist)
 803e340:	e0bfff17 	ldw	r2,-4(fp)
 803e344:	100690ba 	slli	r3,r2,2
 803e348:	008201b4 	movhi	r2,2054
 803e34c:	1885883a 	add	r2,r3,r2
 803e350:	10bada17 	ldw	r2,-5272(r2)
 803e354:	10802b17 	ldw	r2,172(r2)
 803e358:	10000826 	beq	r2,zero,803e37c <ip_write_internal+0x104>
            {
               p->net = nets[i];
 803e35c:	e0bfff17 	ldw	r2,-4(fp)
 803e360:	100690ba 	slli	r3,r2,2
 803e364:	008201b4 	movhi	r2,2054
 803e368:	1885883a 	add	r2,r3,r2
 803e36c:	10fada17 	ldw	r3,-5272(r2)
 803e370:	e0bff517 	ldw	r2,-44(fp)
 803e374:	10c00615 	stw	r3,24(r2)
               break;
 803e378:	00000606 	br	803e394 <ip_write_internal+0x11c>
         for (i = 0; i < ifNumber; i++)
 803e37c:	e0bfff17 	ldw	r2,-4(fp)
 803e380:	10800044 	addi	r2,r2,1
 803e384:	e0bfff15 	stw	r2,-4(fp)
 803e388:	d0a07f17 	ldw	r2,-32260(gp)
 803e38c:	e0ffff17 	ldw	r3,-4(fp)
 803e390:	18bfeb36 	bltu	r3,r2,803e340 <ip_write_internal+0xc8>
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
 803e394:	e0bff517 	ldw	r2,-44(fp)
 803e398:	10800617 	ldw	r2,24(r2)
 803e39c:	10000426 	beq	r2,zero,803e3b0 <ip_write_internal+0x138>
 803e3a0:	e0bff517 	ldw	r2,-44(fp)
 803e3a4:	10800617 	ldw	r2,24(r2)
 803e3a8:	10802b17 	ldw	r2,172(r2)
 803e3ac:	10002a1e 	bne	r2,zero,803e458 <ip_write_internal+0x1e0>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 803e3b0:	d0a07e17 	ldw	r2,-32264(gp)
 803e3b4:	1080840c 	andi	r2,r2,528
 803e3b8:	10001a26 	beq	r2,zero,803e424 <ip_write_internal+0x1ac>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e3bc:	e0bff517 	ldw	r2,-44(fp)
 803e3c0:	11400417 	ldw	r5,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e3c4:	e0bff517 	ldw	r2,-44(fp)
 803e3c8:	10800717 	ldw	r2,28(r2)
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e3cc:	11803fcc 	andi	r6,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e3d0:	e0bff517 	ldw	r2,-44(fp)
 803e3d4:	10800717 	ldw	r2,28(r2)
 803e3d8:	1004d23a 	srli	r2,r2,8
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e3dc:	10803fcc 	andi	r2,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e3e0:	e0fff517 	ldw	r3,-44(fp)
 803e3e4:	18c00717 	ldw	r3,28(r3)
 803e3e8:	1806d43a 	srli	r3,r3,16
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e3ec:	18c03fcc 	andi	r3,r3,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e3f0:	e13ff517 	ldw	r4,-44(fp)
 803e3f4:	21000717 	ldw	r4,28(r4)
 803e3f8:	2008d63a 	srli	r4,r4,24
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e3fc:	d9000215 	stw	r4,8(sp)
 803e400:	d8c00115 	stw	r3,4(sp)
 803e404:	d8800015 	stw	r2,0(sp)
 803e408:	300f883a 	mov	r7,r6
 803e40c:	280d883a 	mov	r6,r5
 803e410:	e17ff517 	ldw	r5,-44(fp)
 803e414:	01020174 	movhi	r4,2053
 803e418:	210d0304 	addi	r4,r4,13324
 803e41c:	800325c0 	call	800325c <printf>
            dtrap();
 803e420:	802c3fc0 	call	802c3fc <dtrap>
         }
#endif
         ip_mib.ipOutNoRoutes++;
 803e424:	008201b4 	movhi	r2,2054
 803e428:	10bd2b17 	ldw	r2,-2900(r2)
 803e42c:	10c00044 	addi	r3,r2,1
 803e430:	008201b4 	movhi	r2,2054
 803e434:	10fd2b15 	stw	r3,-2900(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803e438:	01000084 	movi	r4,2
 803e43c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 803e440:	e13ff517 	ldw	r4,-44(fp)
 803e444:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e448:	01000084 	movi	r4,2
 803e44c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 803e450:	00bff7c4 	movi	r2,-33
 803e454:	00014606 	br	803e970 <ip_write_internal+0x6f8>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
 803e458:	e0bff517 	ldw	r2,-44(fp)
 803e45c:	10c00717 	ldw	r3,28(r2)
 803e460:	e0bff517 	ldw	r2,-44(fp)
 803e464:	10800617 	ldw	r2,24(r2)
 803e468:	100b883a 	mov	r5,r2
 803e46c:	1809883a 	mov	r4,r3
 803e470:	80429ec0 	call	80429ec <lookup_mcast>
 803e474:	e0bffd15 	stw	r2,-12(fp)
      if ((inm != NULL) &&
 803e478:	e0bffd17 	ldw	r2,-12(fp)
 803e47c:	10001b26 	beq	r2,zero,803e4ec <ip_write_internal+0x274>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
 803e480:	e0bff517 	ldw	r2,-44(fp)
 803e484:	10800b17 	ldw	r2,44(r2)
      if ((inm != NULL) &&
 803e488:	10000526 	beq	r2,zero,803e4a0 <ip_write_internal+0x228>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
 803e48c:	e0bff517 	ldw	r2,-44(fp)
 803e490:	10800b17 	ldw	r2,44(r2)
 803e494:	10800143 	ldbu	r2,5(r2)
 803e498:	10803fcc 	andi	r2,r2,255
 803e49c:	10001326 	beq	r2,zero,803e4ec <ip_write_internal+0x274>
      {
         p->type = IPTP;
 803e4a0:	e0bff517 	ldw	r2,-44(fp)
 803e4a4:	00c00204 	movi	r3,8
 803e4a8:	10c0080d 	sth	r3,32(r2)
         pkt2 = ip_copypkt(p);
 803e4ac:	e13ff517 	ldw	r4,-44(fp)
 803e4b0:	803fe740 	call	803fe74 <ip_copypkt>
 803e4b4:	e0bffc15 	stw	r2,-16(fp)
         if (pkt2)
 803e4b8:	e0bffc17 	ldw	r2,-16(fp)
 803e4bc:	10000b26 	beq	r2,zero,803e4ec <ip_write_internal+0x274>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
 803e4c0:	01000044 	movi	r4,1
 803e4c4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
 803e4c8:	e17ffc17 	ldw	r5,-16(fp)
 803e4cc:	010201b4 	movhi	r4,2054
 803e4d0:	213a1504 	addi	r4,r4,-6060
 803e4d4:	802bde00 	call	802bde0 <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
 803e4d8:	01000044 	movi	r4,1
 803e4dc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
 803e4e0:	d0a0a617 	ldw	r2,-32104(gp)
 803e4e4:	1009883a 	mov	r4,r2
 803e4e8:	8016c4c0 	call	8016c4c <OSSemPost>
       * Also, multicasts addressed to the loopback interface
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
 803e4ec:	e0bff517 	ldw	r2,-44(fp)
 803e4f0:	10800317 	ldw	r2,12(r2)
 803e4f4:	e0bffb15 	stw	r2,-20(fp)
      if ((pip->ip_time == 0) || 
 803e4f8:	e0bffb17 	ldw	r2,-20(fp)
 803e4fc:	10800203 	ldbu	r2,8(r2)
 803e500:	10803fcc 	andi	r2,r2,255
 803e504:	10000b26 	beq	r2,zero,803e534 <ip_write_internal+0x2bc>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
 803e508:	e0bff517 	ldw	r2,-44(fp)
 803e50c:	10800717 	ldw	r2,28(r2)
 803e510:	10803fcc 	andi	r2,r2,255
      if ((pip->ip_time == 0) || 
 803e514:	10801fe0 	cmpeqi	r2,r2,127
 803e518:	1000061e 	bne	r2,zero,803e534 <ip_write_internal+0x2bc>
          (p->fhost == p->net->n_ipaddr))
 803e51c:	e0bff517 	ldw	r2,-44(fp)
 803e520:	10c00717 	ldw	r3,28(r2)
 803e524:	e0bff517 	ldw	r2,-44(fp)
 803e528:	10800617 	ldw	r2,24(r2)
 803e52c:	10800a17 	ldw	r2,40(r2)
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
 803e530:	1880081e 	bne	r3,r2,803e554 <ip_write_internal+0x2dc>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803e534:	01000084 	movi	r4,2
 803e538:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 803e53c:	e13ff517 	ldw	r4,-44(fp)
 803e540:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e544:	01000084 	movi	r4,2
 803e548:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return(SUCCESS);
 803e54c:	0005883a 	mov	r2,zero
 803e550:	00010706 	br	803e970 <ip_write_internal+0x6f8>
      }

      firsthop = p->fhost;
 803e554:	e0bff517 	ldw	r2,-44(fp)
 803e558:	10800717 	ldw	r2,28(r2)
 803e55c:	e0bff615 	stw	r2,-40(fp)

      goto sendit;
 803e560:	00003f06 	br	803e660 <ip_write_internal+0x3e8>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
 803e564:	e0bff517 	ldw	r2,-44(fp)
 803e568:	10800717 	ldw	r2,28(r2)
 803e56c:	10bfffd8 	cmpnei	r2,r2,-1
 803e570:	1000041e 	bne	r2,zero,803e584 <ip_write_internal+0x30c>
   {
      firsthop = p->fhost;
 803e574:	e0bff517 	ldw	r2,-44(fp)
 803e578:	10800717 	ldw	r2,28(r2)
 803e57c:	e0bff615 	stw	r2,-40(fp)
 803e580:	00003706 	br	803e660 <ip_write_internal+0x3e8>
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
 803e584:	e0bff517 	ldw	r2,-44(fp)
 803e588:	10800717 	ldw	r2,28(r2)
 803e58c:	e0fff604 	addi	r3,fp,-40
 803e590:	180b883a 	mov	r5,r3
 803e594:	1009883a 	mov	r4,r2
 803e598:	803fca80 	call	803fca8 <iproute>
 803e59c:	1007883a 	mov	r3,r2
 803e5a0:	e0bff517 	ldw	r2,-44(fp)
 803e5a4:	10c00615 	stw	r3,24(r2)
      if (p->net == NULL)
 803e5a8:	e0bff517 	ldw	r2,-44(fp)
 803e5ac:	10800617 	ldw	r2,24(r2)
 803e5b0:	10002a1e 	bne	r2,zero,803e65c <ip_write_internal+0x3e4>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 803e5b4:	d0a07e17 	ldw	r2,-32264(gp)
 803e5b8:	1080840c 	andi	r2,r2,528
 803e5bc:	10001a26 	beq	r2,zero,803e628 <ip_write_internal+0x3b0>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e5c0:	e0bff517 	ldw	r2,-44(fp)
 803e5c4:	11400417 	ldw	r5,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e5c8:	e0bff517 	ldw	r2,-44(fp)
 803e5cc:	10800717 	ldw	r2,28(r2)
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e5d0:	11803fcc 	andi	r6,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e5d4:	e0bff517 	ldw	r2,-44(fp)
 803e5d8:	10800717 	ldw	r2,28(r2)
 803e5dc:	1004d23a 	srli	r2,r2,8
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e5e0:	10803fcc 	andi	r2,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e5e4:	e0fff517 	ldw	r3,-44(fp)
 803e5e8:	18c00717 	ldw	r3,28(r3)
 803e5ec:	1806d43a 	srli	r3,r3,16
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e5f0:	18c03fcc 	andi	r3,r3,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
 803e5f4:	e13ff517 	ldw	r4,-44(fp)
 803e5f8:	21000717 	ldw	r4,28(r4)
 803e5fc:	2008d63a 	srli	r4,r4,24
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 803e600:	d9000215 	stw	r4,8(sp)
 803e604:	d8c00115 	stw	r3,4(sp)
 803e608:	d8800015 	stw	r2,0(sp)
 803e60c:	300f883a 	mov	r7,r6
 803e610:	280d883a 	mov	r6,r5
 803e614:	e17ff517 	ldw	r5,-44(fp)
 803e618:	01020174 	movhi	r4,2053
 803e61c:	210d0304 	addi	r4,r4,13324
 803e620:	800325c0 	call	800325c <printf>
            dtrap();
 803e624:	802c3fc0 	call	802c3fc <dtrap>
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
 803e628:	008201b4 	movhi	r2,2054
 803e62c:	10bd2b17 	ldw	r2,-2900(r2)
 803e630:	10c00044 	addi	r3,r2,1
 803e634:	008201b4 	movhi	r2,2054
 803e638:	10fd2b15 	stw	r3,-2900(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803e63c:	01000084 	movi	r4,2
 803e640:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 803e644:	e13ff517 	ldw	r4,-44(fp)
 803e648:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e64c:	01000084 	movi	r4,2
 803e650:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 803e654:	00bff7c4 	movi	r2,-33
 803e658:	0000c506 	br	803e970 <ip_write_internal+0x6f8>
      }
   }

#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
 803e65c:	0001883a 	nop
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 803e660:	d0a07e17 	ldw	r2,-32264(gp)
 803e664:	1080800c 	andi	r2,r2,512
 803e668:	10002926 	beq	r2,zero,803e710 <ip_write_internal+0x498>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 803e66c:	e0bff517 	ldw	r2,-44(fp)
 803e670:	11000417 	ldw	r4,16(r2)
       p->nb_plen, PUSH_IPADDR(p->fhost));
 803e674:	e0bff517 	ldw	r2,-44(fp)
 803e678:	10800717 	ldw	r2,28(r2)
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 803e67c:	11403fcc 	andi	r5,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 803e680:	e0bff517 	ldw	r2,-44(fp)
 803e684:	10800717 	ldw	r2,28(r2)
 803e688:	1004d23a 	srli	r2,r2,8
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 803e68c:	11803fcc 	andi	r6,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 803e690:	e0bff517 	ldw	r2,-44(fp)
 803e694:	10800717 	ldw	r2,28(r2)
 803e698:	1004d43a 	srli	r2,r2,16
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 803e69c:	10803fcc 	andi	r2,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
 803e6a0:	e0fff517 	ldw	r3,-44(fp)
 803e6a4:	18c00717 	ldw	r3,28(r3)
 803e6a8:	1806d63a 	srli	r3,r3,24
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 803e6ac:	d8c00115 	stw	r3,4(sp)
 803e6b0:	d8800015 	stw	r2,0(sp)
 803e6b4:	300f883a 	mov	r7,r6
 803e6b8:	280d883a 	mov	r6,r5
 803e6bc:	200b883a 	mov	r5,r4
 803e6c0:	01020174 	movhi	r4,2053
 803e6c4:	210d1304 	addi	r4,r4,13388
 803e6c8:	800325c0 	call	800325c <printf>
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
 803e6cc:	e0bff617 	ldw	r2,-40(fp)
 803e6d0:	10c03fcc 	andi	r3,r2,255
 803e6d4:	e0bff617 	ldw	r2,-40(fp)
 803e6d8:	1004d23a 	srli	r2,r2,8
 803e6dc:	11003fcc 	andi	r4,r2,255
 803e6e0:	e0bff617 	ldw	r2,-40(fp)
 803e6e4:	1004d43a 	srli	r2,r2,16
 803e6e8:	11403fcc 	andi	r5,r2,255
 803e6ec:	e0bff617 	ldw	r2,-40(fp)
 803e6f0:	1004d63a 	srli	r2,r2,24
 803e6f4:	d8800015 	stw	r2,0(sp)
 803e6f8:	280f883a 	mov	r7,r5
 803e6fc:	200d883a 	mov	r6,r4
 803e700:	180b883a 	mov	r5,r3
 803e704:	01020174 	movhi	r4,2053
 803e708:	210d1c04 	addi	r4,r4,13424
 803e70c:	800325c0 	call	800325c <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
 803e710:	e0bff517 	ldw	r2,-44(fp)
 803e714:	10800617 	ldw	r2,24(r2)
 803e718:	10c00a17 	ldw	r3,40(r2)
 803e71c:	e0bff517 	ldw	r2,-44(fp)
 803e720:	10800717 	ldw	r2,28(r2)
 803e724:	1880271e 	bne	r3,r2,803e7c4 <ip_write_internal+0x54c>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
 803e728:	e0bff517 	ldw	r2,-44(fp)
 803e72c:	10800717 	ldw	r2,28(r2)
 803e730:	10803fcc 	andi	r2,r2,255
   if ((p->net->n_ipaddr == p->fhost) &&
 803e734:	10801fe0 	cmpeqi	r2,r2,127
 803e738:	1000221e 	bne	r2,zero,803e7c4 <ip_write_internal+0x54c>
   {
      if (!(p->net->n_flags & NF_NBPROT))
 803e73c:	e0bff517 	ldw	r2,-44(fp)
 803e740:	10800617 	ldw	r2,24(r2)
 803e744:	10802a17 	ldw	r2,168(r2)
 803e748:	1080020c 	andi	r2,r2,8
 803e74c:	1000091e 	bne	r2,zero,803e774 <ip_write_internal+0x4fc>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
 803e750:	802c3fc0 	call	802c3fc <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803e754:	01000084 	movi	r4,2
 803e758:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 803e75c:	e13ff517 	ldw	r4,-44(fp)
 803e760:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e764:	01000084 	movi	r4,2
 803e768:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
 803e76c:	00bffd44 	movi	r2,-11
 803e770:	00007f06 	br	803e970 <ip_write_internal+0x6f8>
      }
      p->type = IPTP;
 803e774:	e0bff517 	ldw	r2,-44(fp)
 803e778:	00c00204 	movi	r3,8
 803e77c:	10c0080d 	sth	r3,32(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
 803e780:	0009883a 	mov	r4,zero
 803e784:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
 803e788:	01000044 	movi	r4,1
 803e78c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
 803e790:	e17ff517 	ldw	r5,-44(fp)
 803e794:	010201b4 	movhi	r4,2054
 803e798:	213a1504 	addi	r4,r4,-6060
 803e79c:	802bde00 	call	802bde0 <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 803e7a0:	01000044 	movi	r4,1
 803e7a4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
 803e7a8:	0009883a 	mov	r4,zero
 803e7ac:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
 803e7b0:	d0a0a617 	ldw	r2,-32104(gp)
 803e7b4:	1009883a 	mov	r4,r2
 803e7b8:	8016c4c0 	call	8016c4c <OSSemPost>

      return SUCCESS;
 803e7bc:	0005883a 	mov	r2,zero
 803e7c0:	00006b06 	br	803e970 <ip_write_internal+0x6f8>
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
 803e7c4:	e0bff517 	ldw	r2,-44(fp)
 803e7c8:	10800a17 	ldw	r2,40(r2)
 803e7cc:	1080040c 	andi	r2,r2,16
 803e7d0:	1005003a 	cmpeq	r2,r2,zero
 803e7d4:	e0bffac5 	stb	r2,-21(fp)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
 803e7d8:	802bc440 	call	802bc44 <pk_get_max_intrsafe_buf_len>
 803e7dc:	e0bff915 	stw	r2,-28(fp)
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
 803e7e0:	e0bffac3 	ldbu	r2,-21(fp)
 803e7e4:	1000091e 	bne	r2,zero,803e80c <ip_write_internal+0x594>
       limit = MIN(maxbuflen,p->net->n_mtu);
 803e7e8:	e0bff517 	ldw	r2,-44(fp)
 803e7ec:	10800617 	ldw	r2,24(r2)
 803e7f0:	10800917 	ldw	r2,36(r2)
 803e7f4:	1007883a 	mov	r3,r2
 803e7f8:	e0bff917 	ldw	r2,-28(fp)
 803e7fc:	1880012e 	bgeu	r3,r2,803e804 <ip_write_internal+0x58c>
 803e800:	1805883a 	mov	r2,r3
 803e804:	e0bffe15 	stw	r2,-8(fp)
 803e808:	00000406 	br	803e81c <ip_write_internal+0x5a4>
   else
       limit = p->net->n_mtu;
 803e80c:	e0bff517 	ldw	r2,-44(fp)
 803e810:	10800617 	ldw	r2,24(r2)
 803e814:	10800917 	ldw	r2,36(r2)
 803e818:	e0bffe15 	stw	r2,-8(fp)

   if ((p->nb_plen + p->net->n_lnh) > limit)
 803e81c:	e0bff517 	ldw	r2,-44(fp)
 803e820:	10800417 	ldw	r2,16(r2)
 803e824:	e0fff517 	ldw	r3,-44(fp)
 803e828:	18c00617 	ldw	r3,24(r3)
 803e82c:	18c00817 	ldw	r3,32(r3)
 803e830:	10c5883a 	add	r2,r2,r3
 803e834:	e0fffe17 	ldw	r3,-8(fp)
 803e838:	1880072e 	bgeu	r3,r2,803e858 <ip_write_internal+0x5e0>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
 803e83c:	e0bff617 	ldw	r2,-40(fp)
 803e840:	100b883a 	mov	r5,r2
 803e844:	e13ff517 	ldw	r4,-44(fp)
 803e848:	803f3c40 	call	803f3c4 <ip_fragment>
 803e84c:	e0bff715 	stw	r2,-36(fp)
      IN_PROFILER(PF_IP, PF_EXIT);
      return(err);
 803e850:	e0bff717 	ldw	r2,-36(fp)
 803e854:	00004606 	br	803e970 <ip_write_internal+0x6f8>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
 803e858:	e0bffac3 	ldbu	r2,-21(fp)
 803e85c:	1000401e 	bne	r2,zero,803e960 <ip_write_internal+0x6e8>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803e860:	01000084 	movi	r4,2
 803e864:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
 803e868:	e0bff517 	ldw	r2,-44(fp)
 803e86c:	10800417 	ldw	r2,16(r2)
 803e870:	e0fff517 	ldw	r3,-44(fp)
 803e874:	18c00617 	ldw	r3,24(r3)
 803e878:	18c00817 	ldw	r3,32(r3)
 803e87c:	10c5883a 	add	r2,r2,r3
 803e880:	1009883a 	mov	r4,r2
 803e884:	802b8840 	call	802b884 <pk_alloc>
 803e888:	e0bff815 	stw	r2,-32(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e88c:	01000084 	movi	r4,2
 803e890:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
 803e894:	e0bff817 	ldw	r2,-32(fp)
 803e898:	1000081e 	bne	r2,zero,803e8bc <ip_write_internal+0x644>
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803e89c:	01000084 	movi	r4,2
 803e8a0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 803e8a4:	e13ff517 	ldw	r4,-44(fp)
 803e8a8:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e8ac:	01000084 	movi	r4,2
 803e8b0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NOBUFFER;
 803e8b4:	00bffac4 	movi	r2,-21
 803e8b8:	00002d06 	br	803e970 <ip_write_internal+0x6f8>
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
 803e8bc:	e0bff817 	ldw	r2,-32(fp)
 803e8c0:	10800117 	ldw	r2,4(r2)
 803e8c4:	e0fff517 	ldw	r3,-44(fp)
 803e8c8:	18c00617 	ldw	r3,24(r3)
 803e8cc:	18c00817 	ldw	r3,32(r3)
 803e8d0:	10c7883a 	add	r3,r2,r3
 803e8d4:	e0bff817 	ldw	r2,-32(fp)
 803e8d8:	10c00315 	stw	r3,12(r2)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
 803e8dc:	e0bff817 	ldw	r2,-32(fp)
 803e8e0:	10c00317 	ldw	r3,12(r2)
 803e8e4:	e0bff517 	ldw	r2,-44(fp)
 803e8e8:	11000317 	ldw	r4,12(r2)
 803e8ec:	e0bff517 	ldw	r2,-44(fp)
 803e8f0:	10800417 	ldw	r2,16(r2)
 803e8f4:	100d883a 	mov	r6,r2
 803e8f8:	200b883a 	mov	r5,r4
 803e8fc:	1809883a 	mov	r4,r3
 803e900:	8002ea40 	call	8002ea4 <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
 803e904:	e0bff517 	ldw	r2,-44(fp)
 803e908:	10c00417 	ldw	r3,16(r2)
 803e90c:	e0bff817 	ldw	r2,-32(fp)
 803e910:	10c00415 	stw	r3,16(r2)
            newpkt->net = p->net;
 803e914:	e0bff517 	ldw	r2,-44(fp)
 803e918:	10c00617 	ldw	r3,24(r2)
 803e91c:	e0bff817 	ldw	r2,-32(fp)
 803e920:	10c00615 	stw	r3,24(r2)
            newpkt->fhost = p->fhost;
 803e924:	e0bff517 	ldw	r2,-44(fp)
 803e928:	10c00717 	ldw	r3,28(r2)
 803e92c:	e0bff817 	ldw	r2,-32(fp)
 803e930:	10c00715 	stw	r3,28(r2)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803e934:	01000084 	movi	r4,2
 803e938:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 803e93c:	e13ff517 	ldw	r4,-44(fp)
 803e940:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803e944:	01000084 	movi	r4,2
 803e948:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
 803e94c:	e0bff617 	ldw	r2,-40(fp)
 803e950:	100b883a 	mov	r5,r2
 803e954:	e13ff817 	ldw	r4,-32(fp)
 803e958:	8025c0c0 	call	8025c0c <ip2mac>
 803e95c:	00000406 	br	803e970 <ip_write_internal+0x6f8>
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
 803e960:	e0bff617 	ldw	r2,-40(fp)
 803e964:	100b883a 	mov	r5,r2
 803e968:	e13ff517 	ldw	r4,-44(fp)
 803e96c:	8025c0c0 	call	8025c0c <ip2mac>
      }
   }
}
 803e970:	e037883a 	mov	sp,fp
 803e974:	dfc00117 	ldw	ra,4(sp)
 803e978:	df000017 	ldw	fp,0(sp)
 803e97c:	dec00204 	addi	sp,sp,8
 803e980:	f800283a 	ret

0803e984 <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 803e984:	defff904 	addi	sp,sp,-28
 803e988:	dfc00615 	stw	ra,24(sp)
 803e98c:	df000515 	stw	fp,20(sp)
 803e990:	df000504 	addi	fp,sp,20
 803e994:	2005883a 	mov	r2,r4
 803e998:	e17ffb15 	stw	r5,-20(fp)
 803e99c:	e0bffc05 	stb	r2,-16(fp)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 803e9a0:	008201b4 	movhi	r2,2054
 803e9a4:	10bd2917 	ldw	r2,-2908(r2)
 803e9a8:	10c00044 	addi	r3,r2,1
 803e9ac:	008201b4 	movhi	r2,2054
 803e9b0:	10fd2915 	stw	r3,-2908(r2)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 803e9b4:	e0bffb17 	ldw	r2,-20(fp)
 803e9b8:	10800317 	ldw	r2,12(r2)
 803e9bc:	10fffb04 	addi	r3,r2,-20
 803e9c0:	e0bffb17 	ldw	r2,-20(fp)
 803e9c4:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 803e9c8:	e0bffb17 	ldw	r2,-20(fp)
 803e9cc:	10800417 	ldw	r2,16(r2)
 803e9d0:	10c00504 	addi	r3,r2,20
 803e9d4:	e0bffb17 	ldw	r2,-20(fp)
 803e9d8:	10c00415 	stw	r3,16(r2)
   pip = (struct ip*)(p->nb_prot);
 803e9dc:	e0bffb17 	ldw	r2,-20(fp)
 803e9e0:	10800317 	ldw	r2,12(r2)
 803e9e4:	e0bffe15 	stw	r2,-8(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 803e9e8:	e0bffe17 	ldw	r2,-8(fp)
 803e9ec:	00c01144 	movi	r3,69
 803e9f0:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
 803e9f4:	e0bffe17 	ldw	r2,-8(fp)
 803e9f8:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 803e9fc:	d0a04e17 	ldw	r2,-32456(gp)
 803ea00:	10bfffcc 	andi	r2,r2,65535
 803ea04:	1004d23a 	srli	r2,r2,8
 803ea08:	1007883a 	mov	r3,r2
 803ea0c:	d0a04e17 	ldw	r2,-32456(gp)
 803ea10:	10bfffcc 	andi	r2,r2,65535
 803ea14:	1004923a 	slli	r2,r2,8
 803ea18:	1884b03a 	or	r2,r3,r2
 803ea1c:	1007883a 	mov	r3,r2
 803ea20:	e0bffe17 	ldw	r2,-8(fp)
 803ea24:	10c0010d 	sth	r3,4(r2)
   uid++;
 803ea28:	d0a04e17 	ldw	r2,-32456(gp)
 803ea2c:	10800044 	addi	r2,r2,1
 803ea30:	d0a04e15 	stw	r2,-32456(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 803ea34:	e0bffb17 	ldw	r2,-20(fp)
 803ea38:	10800417 	ldw	r2,16(r2)
 803ea3c:	10bfffcc 	andi	r2,r2,65535
 803ea40:	1004d23a 	srli	r2,r2,8
 803ea44:	1007883a 	mov	r3,r2
 803ea48:	e0bffb17 	ldw	r2,-20(fp)
 803ea4c:	10800417 	ldw	r2,16(r2)
 803ea50:	10bfffcc 	andi	r2,r2,65535
 803ea54:	1004923a 	slli	r2,r2,8
 803ea58:	1884b03a 	or	r2,r3,r2
 803ea5c:	1007883a 	mov	r3,r2
 803ea60:	e0bffe17 	ldw	r2,-8(fp)
 803ea64:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 803ea68:	e0bffe17 	ldw	r2,-8(fp)
 803ea6c:	e0fffc03 	ldbu	r3,-16(fp)
 803ea70:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 803ea74:	e0bffe17 	ldw	r2,-8(fp)
 803ea78:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 803ea7c:	00801004 	movi	r2,64
 803ea80:	e0bfffc5 	stb	r2,-1(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 803ea84:	e0bffb17 	ldw	r2,-20(fp)
 803ea88:	10800717 	ldw	r2,28(r2)
 803ea8c:	1006d63a 	srli	r3,r2,24
 803ea90:	e0bffb17 	ldw	r2,-20(fp)
 803ea94:	10800717 	ldw	r2,28(r2)
 803ea98:	1004d23a 	srli	r2,r2,8
 803ea9c:	10bfc00c 	andi	r2,r2,65280
 803eaa0:	1886b03a 	or	r3,r3,r2
 803eaa4:	e0bffb17 	ldw	r2,-20(fp)
 803eaa8:	10800717 	ldw	r2,28(r2)
 803eaac:	1004923a 	slli	r2,r2,8
 803eab0:	10803fec 	andhi	r2,r2,255
 803eab4:	1886b03a 	or	r3,r3,r2
 803eab8:	e0bffb17 	ldw	r2,-20(fp)
 803eabc:	10800717 	ldw	r2,28(r2)
 803eac0:	1004963a 	slli	r2,r2,24
 803eac4:	1884b03a 	or	r2,r3,r2
 803eac8:	10fc002c 	andhi	r3,r2,61440
 803eacc:	00b80034 	movhi	r2,57344
 803ead0:	1880071e 	bne	r3,r2,803eaf0 <ip_write+0x16c>
 803ead4:	e0bffb17 	ldw	r2,-20(fp)
 803ead8:	10800b17 	ldw	r2,44(r2)
 803eadc:	10000426 	beq	r2,zero,803eaf0 <ip_write+0x16c>
      ttl = p->imo->imo_multicast_ttl;
 803eae0:	e0bffb17 	ldw	r2,-20(fp)
 803eae4:	10800b17 	ldw	r2,44(r2)
 803eae8:	10800103 	ldbu	r2,4(r2)
 803eaec:	e0bfffc5 	stb	r2,-1(fp)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 803eaf0:	e0bffb17 	ldw	r2,-20(fp)
 803eaf4:	10800c17 	ldw	r2,48(r2)
 803eaf8:	e0bffd15 	stw	r2,-12(fp)
 803eafc:	e0bffd17 	ldw	r2,-12(fp)
 803eb00:	10001126 	beq	r2,zero,803eb48 <ip_write+0x1c4>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 803eb04:	e0bffd17 	ldw	r2,-12(fp)
 803eb08:	10800043 	ldbu	r2,1(r2)
 803eb0c:	10803fcc 	andi	r2,r2,255
 803eb10:	10000526 	beq	r2,zero,803eb28 <ip_write+0x1a4>
         pip->ip_time = sopts->ip_ttl;
 803eb14:	e0bffd17 	ldw	r2,-12(fp)
 803eb18:	10c00043 	ldbu	r3,1(r2)
 803eb1c:	e0bffe17 	ldw	r2,-8(fp)
 803eb20:	10c00205 	stb	r3,8(r2)
 803eb24:	00000306 	br	803eb34 <ip_write+0x1b0>
	  else
         pip->ip_time = ttl;
 803eb28:	e0bffe17 	ldw	r2,-8(fp)
 803eb2c:	e0ffffc3 	ldbu	r3,-1(fp)
 803eb30:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 803eb34:	e0bffd17 	ldw	r2,-12(fp)
 803eb38:	10c00003 	ldbu	r3,0(r2)
 803eb3c:	e0bffe17 	ldw	r2,-8(fp)
 803eb40:	10c00045 	stb	r3,1(r2)
 803eb44:	00000506 	br	803eb5c <ip_write+0x1d8>
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
 803eb48:	e0bffe17 	ldw	r2,-8(fp)
 803eb4c:	e0ffffc3 	ldbu	r3,-1(fp)
 803eb50:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 803eb54:	e0bffe17 	ldw	r2,-8(fp)
 803eb58:	10000045 	stb	zero,1(r2)
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
 803eb5c:	01400284 	movi	r5,10
 803eb60:	e13ffe17 	ldw	r4,-8(fp)
 803eb64:	8027be00 	call	8027be0 <cksum>
 803eb68:	0084303a 	nor	r2,zero,r2
 803eb6c:	1007883a 	mov	r3,r2
 803eb70:	e0bffe17 	ldw	r2,-8(fp)
 803eb74:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 803eb78:	e13ffb17 	ldw	r4,-20(fp)
 803eb7c:	803e2780 	call	803e278 <ip_write_internal>
}
 803eb80:	e037883a 	mov	sp,fp
 803eb84:	dfc00117 	ldw	ra,4(sp)
 803eb88:	df000017 	ldw	fp,0(sp)
 803eb8c:	dec00204 	addi	sp,sp,8
 803eb90:	f800283a 	ret

0803eb94 <ip_write2>:
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 803eb94:	defff604 	addi	sp,sp,-40
 803eb98:	dfc00915 	stw	ra,36(sp)
 803eb9c:	df000815 	stw	fp,32(sp)
 803eba0:	df000804 	addi	fp,sp,32
 803eba4:	2005883a 	mov	r2,r4
 803eba8:	e17ff915 	stw	r5,-28(fp)
 803ebac:	e1bff815 	stw	r6,-32(fp)
 803ebb0:	e0bffa05 	stb	r2,-24(fp)
   struct ip * pip;
   u_char ttl;
   struct ip_socopts * sopts;
   u_char iphlen = sizeof (struct ip);
 803ebb4:	00800504 	movi	r2,20
 803ebb8:	e0bfff85 	stb	r2,-2(fp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 803ebbc:	008201b4 	movhi	r2,2054
 803ebc0:	10bd2917 	ldw	r2,-2908(r2)
 803ebc4:	10c00044 	addi	r3,r2,1
 803ebc8:	008201b4 	movhi	r2,2054
 803ebcc:	10fd2915 	stw	r3,-2908(r2)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 803ebd0:	e0bff817 	ldw	r2,-32(fp)
 803ebd4:	e0bffe15 	stw	r2,-8(fp)
 803ebd8:	00000d06 	br	803ec10 <ip_write2+0x7c>
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
 803ebdc:	e0bffe17 	ldw	r2,-8(fp)
 803ebe0:	10800003 	ldbu	r2,0(r2)
 803ebe4:	10803fcc 	andi	r2,r2,255
 803ebe8:	10800518 	cmpnei	r2,r2,20
 803ebec:	1000041e 	bne	r2,zero,803ec00 <ip_write2+0x6c>
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
 803ebf0:	e0bfff83 	ldbu	r2,-2(fp)
 803ebf4:	10800104 	addi	r2,r2,4
 803ebf8:	e0bfff85 	stb	r2,-2(fp)
            break;
 803ebfc:	00000106 	br	803ec04 <ip_write2+0x70>
         default:
            break;
 803ec00:	0001883a 	nop
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 803ec04:	e0bffe17 	ldw	r2,-8(fp)
 803ec08:	10800044 	addi	r2,r2,1
 803ec0c:	e0bffe15 	stw	r2,-8(fp)
 803ec10:	e0bffe17 	ldw	r2,-8(fp)
 803ec14:	10800003 	ldbu	r2,0(r2)
 803ec18:	10803fcc 	andi	r2,r2,255
 803ec1c:	103fef1e 	bne	r2,zero,803ebdc <ip_write2+0x48>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
 803ec20:	e0bfff83 	ldbu	r2,-2(fp)
 803ec24:	108000cc 	andi	r2,r2,3
 803ec28:	10000726 	beq	r2,zero,803ec48 <ip_write2+0xb4>
      iphlen_pad = 4 - (iphlen & 0x3);
 803ec2c:	e0bfff83 	ldbu	r2,-2(fp)
 803ec30:	108000cc 	andi	r2,r2,3
 803ec34:	1007883a 	mov	r3,r2
 803ec38:	00800104 	movi	r2,4
 803ec3c:	10c5c83a 	sub	r2,r2,r3
 803ec40:	e0bffdc5 	stb	r2,-9(fp)
 803ec44:	00000106 	br	803ec4c <ip_write2+0xb8>
   else iphlen_pad = 0; /* no header padding required */
 803ec48:	e03ffdc5 	stb	zero,-9(fp)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 803ec4c:	e0bff917 	ldw	r2,-28(fp)
 803ec50:	10c00317 	ldw	r3,12(r2)
 803ec54:	e13fff83 	ldbu	r4,-2(fp)
 803ec58:	e0bffdc3 	ldbu	r2,-9(fp)
 803ec5c:	2085883a 	add	r2,r4,r2
 803ec60:	0085c83a 	sub	r2,zero,r2
 803ec64:	1887883a 	add	r3,r3,r2
 803ec68:	e0bff917 	ldw	r2,-28(fp)
 803ec6c:	10c00315 	stw	r3,12(r2)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 803ec70:	e0bff917 	ldw	r2,-28(fp)
 803ec74:	10800417 	ldw	r2,16(r2)
 803ec78:	e13fff83 	ldbu	r4,-2(fp)
 803ec7c:	e0fffdc3 	ldbu	r3,-9(fp)
 803ec80:	20c7883a 	add	r3,r4,r3
 803ec84:	10c7883a 	add	r3,r2,r3
 803ec88:	e0bff917 	ldw	r2,-28(fp)
 803ec8c:	10c00415 	stw	r3,16(r2)
   pip = (struct ip *) (p->nb_prot);
 803ec90:	e0bff917 	ldw	r2,-28(fp)
 803ec94:	10800317 	ldw	r2,12(r2)
 803ec98:	e0bffc15 	stw	r2,-16(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
 803ec9c:	e0ffff83 	ldbu	r3,-2(fp)
 803eca0:	e0bffdc3 	ldbu	r2,-9(fp)
 803eca4:	1885883a 	add	r2,r3,r2
 803eca8:	1005d0ba 	srai	r2,r2,2
 803ecac:	10801014 	ori	r2,r2,64
 803ecb0:	1007883a 	mov	r3,r2
 803ecb4:	e0bffc17 	ldw	r2,-16(fp)
 803ecb8:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
 803ecbc:	e0bffc17 	ldw	r2,-16(fp)
 803ecc0:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 803ecc4:	d0a04e17 	ldw	r2,-32456(gp)
 803ecc8:	10bfffcc 	andi	r2,r2,65535
 803eccc:	1004d23a 	srli	r2,r2,8
 803ecd0:	1007883a 	mov	r3,r2
 803ecd4:	d0a04e17 	ldw	r2,-32456(gp)
 803ecd8:	10bfffcc 	andi	r2,r2,65535
 803ecdc:	1004923a 	slli	r2,r2,8
 803ece0:	1884b03a 	or	r2,r3,r2
 803ece4:	1007883a 	mov	r3,r2
 803ece8:	e0bffc17 	ldw	r2,-16(fp)
 803ecec:	10c0010d 	sth	r3,4(r2)
   uid++;
 803ecf0:	d0a04e17 	ldw	r2,-32456(gp)
 803ecf4:	10800044 	addi	r2,r2,1
 803ecf8:	d0a04e15 	stw	r2,-32456(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 803ecfc:	e0bff917 	ldw	r2,-28(fp)
 803ed00:	10800417 	ldw	r2,16(r2)
 803ed04:	10bfffcc 	andi	r2,r2,65535
 803ed08:	1004d23a 	srli	r2,r2,8
 803ed0c:	1007883a 	mov	r3,r2
 803ed10:	e0bff917 	ldw	r2,-28(fp)
 803ed14:	10800417 	ldw	r2,16(r2)
 803ed18:	10bfffcc 	andi	r2,r2,65535
 803ed1c:	1004923a 	slli	r2,r2,8
 803ed20:	1884b03a 	or	r2,r3,r2
 803ed24:	1007883a 	mov	r3,r2
 803ed28:	e0bffc17 	ldw	r2,-16(fp)
 803ed2c:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 803ed30:	e0bffc17 	ldw	r2,-16(fp)
 803ed34:	e0fffa03 	ldbu	r3,-24(fp)
 803ed38:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 803ed3c:	e0bffc17 	ldw	r2,-16(fp)
 803ed40:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 803ed44:	00801004 	movi	r2,64
 803ed48:	e0bfffc5 	stb	r2,-1(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 803ed4c:	e0bff917 	ldw	r2,-28(fp)
 803ed50:	10800717 	ldw	r2,28(r2)
 803ed54:	1006d63a 	srli	r3,r2,24
 803ed58:	e0bff917 	ldw	r2,-28(fp)
 803ed5c:	10800717 	ldw	r2,28(r2)
 803ed60:	1004d23a 	srli	r2,r2,8
 803ed64:	10bfc00c 	andi	r2,r2,65280
 803ed68:	1886b03a 	or	r3,r3,r2
 803ed6c:	e0bff917 	ldw	r2,-28(fp)
 803ed70:	10800717 	ldw	r2,28(r2)
 803ed74:	1004923a 	slli	r2,r2,8
 803ed78:	10803fec 	andhi	r2,r2,255
 803ed7c:	1886b03a 	or	r3,r3,r2
 803ed80:	e0bff917 	ldw	r2,-28(fp)
 803ed84:	10800717 	ldw	r2,28(r2)
 803ed88:	1004963a 	slli	r2,r2,24
 803ed8c:	1884b03a 	or	r2,r3,r2
 803ed90:	10fc002c 	andhi	r3,r2,61440
 803ed94:	00b80034 	movhi	r2,57344
 803ed98:	1880071e 	bne	r3,r2,803edb8 <ip_write2+0x224>
 803ed9c:	e0bff917 	ldw	r2,-28(fp)
 803eda0:	10800b17 	ldw	r2,44(r2)
 803eda4:	10000426 	beq	r2,zero,803edb8 <ip_write2+0x224>
      ttl = p->imo->imo_multicast_ttl;
 803eda8:	e0bff917 	ldw	r2,-28(fp)
 803edac:	10800b17 	ldw	r2,44(r2)
 803edb0:	10800103 	ldbu	r2,4(r2)
 803edb4:	e0bfffc5 	stb	r2,-1(fp)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 803edb8:	e0bff917 	ldw	r2,-28(fp)
 803edbc:	10800c17 	ldw	r2,48(r2)
 803edc0:	e0bffb15 	stw	r2,-20(fp)
 803edc4:	e0bffb17 	ldw	r2,-20(fp)
 803edc8:	10001126 	beq	r2,zero,803ee10 <ip_write2+0x27c>
   {
      if (sopts->ip_ttl)
 803edcc:	e0bffb17 	ldw	r2,-20(fp)
 803edd0:	10800043 	ldbu	r2,1(r2)
 803edd4:	10803fcc 	andi	r2,r2,255
 803edd8:	10000526 	beq	r2,zero,803edf0 <ip_write2+0x25c>
         pip->ip_time = sopts->ip_ttl;
 803eddc:	e0bffb17 	ldw	r2,-20(fp)
 803ede0:	10c00043 	ldbu	r3,1(r2)
 803ede4:	e0bffc17 	ldw	r2,-16(fp)
 803ede8:	10c00205 	stb	r3,8(r2)
 803edec:	00000306 	br	803edfc <ip_write2+0x268>
      else
         pip->ip_time = ttl;
 803edf0:	e0bffc17 	ldw	r2,-16(fp)
 803edf4:	e0ffffc3 	ldbu	r3,-1(fp)
 803edf8:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
 803edfc:	e0bffb17 	ldw	r2,-20(fp)
 803ee00:	10c00003 	ldbu	r3,0(r2)
 803ee04:	e0bffc17 	ldw	r2,-16(fp)
 803ee08:	10c00045 	stb	r3,1(r2)
 803ee0c:	00000506 	br	803ee24 <ip_write2+0x290>
   }
   else
   {
      pip->ip_time = ttl;
 803ee10:	e0bffc17 	ldw	r2,-16(fp)
 803ee14:	e0ffffc3 	ldbu	r3,-1(fp)
 803ee18:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 803ee1c:	e0bffc17 	ldw	r2,-16(fp)
 803ee20:	10000045 	stb	zero,1(r2)
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 803ee24:	e0bff917 	ldw	r2,-28(fp)
 803ee28:	10800317 	ldw	r2,12(r2)
 803ee2c:	10800504 	addi	r2,r2,20
 803ee30:	e0bffe15 	stw	r2,-8(fp)
 803ee34:	00001006 	br	803ee78 <ip_write2+0x2e4>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
 803ee38:	e0bff817 	ldw	r2,-32(fp)
 803ee3c:	10800003 	ldbu	r2,0(r2)
 803ee40:	10803fcc 	andi	r2,r2,255
 803ee44:	10800518 	cmpnei	r2,r2,20
 803ee48:	1000071e 	bne	r2,zero,803ee68 <ip_write2+0x2d4>
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
 803ee4c:	e0bffe17 	ldw	r2,-8(fp)
 803ee50:	00c12504 	movi	r3,1172
 803ee54:	10c00015 	stw	r3,0(r2)
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
 803ee58:	e0bffe17 	ldw	r2,-8(fp)
 803ee5c:	10800104 	addi	r2,r2,4
 803ee60:	e0bffe15 	stw	r2,-8(fp)
            break;
 803ee64:	00000106 	br	803ee6c <ip_write2+0x2d8>
         default:
            break;
 803ee68:	0001883a 	nop
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 803ee6c:	e0bff817 	ldw	r2,-32(fp)
 803ee70:	10800044 	addi	r2,r2,1
 803ee74:	e0bff815 	stw	r2,-32(fp)
 803ee78:	e0bff817 	ldw	r2,-32(fp)
 803ee7c:	10800003 	ldbu	r2,0(r2)
 803ee80:	10803fcc 	andi	r2,r2,255
 803ee84:	103fec1e 	bne	r2,zero,803ee38 <ip_write2+0x2a4>
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
 803ee88:	e03ffd85 	stb	zero,-10(fp)
 803ee8c:	00000706 	br	803eeac <ip_write2+0x318>
 803ee90:	e0bffd83 	ldbu	r2,-10(fp)
 803ee94:	e0fffe17 	ldw	r3,-8(fp)
 803ee98:	1885883a 	add	r2,r3,r2
 803ee9c:	10000005 	stb	zero,0(r2)
 803eea0:	e0bffd83 	ldbu	r2,-10(fp)
 803eea4:	10800044 	addi	r2,r2,1
 803eea8:	e0bffd85 	stb	r2,-10(fp)
 803eeac:	e0fffd83 	ldbu	r3,-10(fp)
 803eeb0:	e0bffdc3 	ldbu	r2,-9(fp)
 803eeb4:	18bff636 	bltu	r3,r2,803ee90 <ip_write2+0x2fc>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
 803eeb8:	e0ffff83 	ldbu	r3,-2(fp)
 803eebc:	e0bffdc3 	ldbu	r2,-9(fp)
 803eec0:	1885883a 	add	r2,r3,r2
 803eec4:	1006d7fa 	srli	r3,r2,31
 803eec8:	1885883a 	add	r2,r3,r2
 803eecc:	1005d07a 	srai	r2,r2,1
 803eed0:	100b883a 	mov	r5,r2
 803eed4:	e13ffc17 	ldw	r4,-16(fp)
 803eed8:	8027be00 	call	8027be0 <cksum>
 803eedc:	0084303a 	nor	r2,zero,r2
 803eee0:	1007883a 	mov	r3,r2
 803eee4:	e0bffc17 	ldw	r2,-16(fp)
 803eee8:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal (p));
 803eeec:	e13ff917 	ldw	r4,-28(fp)
 803eef0:	803e2780 	call	803e278 <ip_write_internal>
}
 803eef4:	e037883a 	mov	sp,fp
 803eef8:	dfc00117 	ldw	ra,4(sp)
 803eefc:	df000017 	ldw	fp,0(sp)
 803ef00:	dec00204 	addi	sp,sp,8
 803ef04:	f800283a 	ret

0803ef08 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 803ef08:	defffc04 	addi	sp,sp,-16
 803ef0c:	dfc00315 	stw	ra,12(sp)
 803ef10:	df000215 	stw	fp,8(sp)
 803ef14:	df000204 	addi	fp,sp,8
 803ef18:	e13ffe15 	stw	r4,-8(fp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 803ef1c:	008201b4 	movhi	r2,2054
 803ef20:	10bd2917 	ldw	r2,-2908(r2)
 803ef24:	10c00044 	addi	r3,r2,1
 803ef28:	008201b4 	movhi	r2,2054
 803ef2c:	10fd2915 	stw	r3,-2908(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
 803ef30:	e0bffe17 	ldw	r2,-8(fp)
 803ef34:	10800317 	ldw	r2,12(r2)
 803ef38:	e0bfff15 	stw	r2,-4(fp)
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
 803ef3c:	e0bfff17 	ldw	r2,-4(fp)
 803ef40:	1080010b 	ldhu	r2,4(r2)
 803ef44:	10bfffcc 	andi	r2,r2,65535
 803ef48:	10000e1e 	bne	r2,zero,803ef84 <ip_raw_write+0x7c>
   {
      pip->ip_id = htons((unshort)uid);
 803ef4c:	d0a04e17 	ldw	r2,-32456(gp)
 803ef50:	10bfffcc 	andi	r2,r2,65535
 803ef54:	1004d23a 	srli	r2,r2,8
 803ef58:	1007883a 	mov	r3,r2
 803ef5c:	d0a04e17 	ldw	r2,-32456(gp)
 803ef60:	10bfffcc 	andi	r2,r2,65535
 803ef64:	1004923a 	slli	r2,r2,8
 803ef68:	1884b03a 	or	r2,r3,r2
 803ef6c:	1007883a 	mov	r3,r2
 803ef70:	e0bfff17 	ldw	r2,-4(fp)
 803ef74:	10c0010d 	sth	r3,4(r2)
      uid++;
 803ef78:	d0a04e17 	ldw	r2,-32456(gp)
 803ef7c:	10800044 	addi	r2,r2,1
 803ef80:	d0a04e15 	stw	r2,-32456(gp)
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 803ef84:	e0bfff17 	ldw	r2,-4(fp)
 803ef88:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 803ef8c:	01400284 	movi	r5,10
 803ef90:	e13fff17 	ldw	r4,-4(fp)
 803ef94:	8027be00 	call	8027be0 <cksum>
 803ef98:	0084303a 	nor	r2,zero,r2
 803ef9c:	1007883a 	mov	r3,r2
 803efa0:	e0bfff17 	ldw	r2,-4(fp)
 803efa4:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 803efa8:	e13ffe17 	ldw	r4,-8(fp)
 803efac:	803e2780 	call	803e278 <ip_write_internal>
}
 803efb0:	e037883a 	mov	sp,fp
 803efb4:	dfc00117 	ldw	ra,4(sp)
 803efb8:	df000017 	ldw	fp,0(sp)
 803efbc:	dec00204 	addi	sp,sp,8
 803efc0:	f800283a 	ret

0803efc4 <ip_fragment_lc>:
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 803efc4:	defff104 	addi	sp,sp,-60
 803efc8:	dfc00e15 	stw	ra,56(sp)
 803efcc:	df000d15 	stw	fp,52(sp)
 803efd0:	df000d04 	addi	fp,sp,52
 803efd4:	e13ff415 	stw	r4,-48(fp)
 803efd8:	e17ff315 	stw	r5,-52(fp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 803efdc:	008201b4 	movhi	r2,2054
 803efe0:	10bd3017 	ldw	r2,-2880(r2)
 803efe4:	10c00044 	addi	r3,r2,1
 803efe8:	008201b4 	movhi	r2,2054
 803efec:	10fd3015 	stw	r3,-2880(r2)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
 803eff0:	e0bff417 	ldw	r2,-48(fp)
 803eff4:	10800317 	ldw	r2,12(r2)
 803eff8:	e0bffa15 	stw	r2,-24(fp)
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 803effc:	e0bffa17 	ldw	r2,-24(fp)
 803f000:	10800003 	ldbu	r2,0(r2)
 803f004:	10803fcc 	andi	r2,r2,255
 803f008:	100490ba 	slli	r2,r2,2
 803f00c:	10800f0c 	andi	r2,r2,60
 803f010:	e0bff915 	stw	r2,-28(fp)
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
 803f014:	e0bff417 	ldw	r2,-48(fp)
 803f018:	10800417 	ldw	r2,16(r2)
 803f01c:	1007883a 	mov	r3,r2
 803f020:	e0bff917 	ldw	r2,-28(fp)
 803f024:	1885c83a 	sub	r2,r3,r2
 803f028:	e0bffd15 	stw	r2,-12(fp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 803f02c:	e0bff417 	ldw	r2,-48(fp)
 803f030:	10800617 	ldw	r2,24(r2)
 803f034:	10c00917 	ldw	r3,36(r2)
 803f038:	e0bff417 	ldw	r2,-48(fp)
 803f03c:	10800617 	ldw	r2,24(r2)
 803f040:	11000817 	ldw	r4,32(r2)
 803f044:	e0bff917 	ldw	r2,-28(fp)
 803f048:	2085883a 	add	r2,r4,r2
 803f04c:	10800204 	addi	r2,r2,8
 803f050:	1885c83a 	sub	r2,r3,r2
 803f054:	e0bff815 	stw	r2,-32(fp)
   if (maxipsize < 64)  /* to small to use */
 803f058:	e0bff817 	ldw	r2,-32(fp)
 803f05c:	10801028 	cmpgeui	r2,r2,64
 803f060:	1000031e 	bne	r2,zero,803f070 <ip_fragment_lc+0xac>
   {
      dtrap();    /* probably bad programming */
 803f064:	802c3fc0 	call	802c3fc <dtrap>
      return ENP_LOGIC;
 803f068:	00bffd44 	movi	r2,-11
 803f06c:	0000d006 	br	803f3b0 <ip_fragment_lc+0x3ec>
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
 803f070:	e0bff417 	ldw	r2,-48(fp)
 803f074:	10800417 	ldw	r2,16(r2)
 803f078:	e17ff817 	ldw	r5,-32(fp)
 803f07c:	1009883a 	mov	r4,r2
 803f080:	800e2300 	call	800e230 <__udivsi3>
 803f084:	10800044 	addi	r2,r2,1
 803f088:	e0bff715 	stw	r2,-36(fp)
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
 803f08c:	e0bff417 	ldw	r2,-48(fp)
 803f090:	10c00417 	ldw	r3,16(r2)
 803f094:	e0bff717 	ldw	r2,-36(fp)
 803f098:	1885883a 	add	r2,r3,r2
 803f09c:	10bfffc4 	addi	r2,r2,-1
 803f0a0:	e17ff717 	ldw	r5,-36(fp)
 803f0a4:	1009883a 	mov	r4,r2
 803f0a8:	800e2300 	call	800e230 <__udivsi3>
 803f0ac:	10c001c4 	addi	r3,r2,7
 803f0b0:	00bffe04 	movi	r2,-8
 803f0b4:	1884703a 	and	r2,r3,r2
 803f0b8:	e0bff615 	stw	r2,-40(fp)
   foffset = 0;
 803f0bc:	e03fff15 	stw	zero,-4(fp)

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
 803f0c0:	e0bffa17 	ldw	r2,-24(fp)
 803f0c4:	1080018b 	ldhu	r2,6(r2)
 803f0c8:	10bfffcc 	andi	r2,r2,65535
 803f0cc:	1004d23a 	srli	r2,r2,8
 803f0d0:	1007883a 	mov	r3,r2
 803f0d4:	e0bffa17 	ldw	r2,-24(fp)
 803f0d8:	1080018b 	ldhu	r2,6(r2)
 803f0dc:	10bfffcc 	andi	r2,r2,65535
 803f0e0:	1004923a 	slli	r2,r2,8
 803f0e4:	1884b03a 	or	r2,r3,r2
 803f0e8:	e0bff58d 	sth	r2,-42(fp)
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
 803f0ec:	e0fff58b 	ldhu	r3,-42(fp)
 803f0f0:	00bffff4 	movhi	r2,65535
 803f0f4:	1087ffc4 	addi	r2,r2,8191
 803f0f8:	1884703a 	and	r2,r3,r2
 803f0fc:	10000826 	beq	r2,zero,803f120 <ip_fragment_lc+0x15c>
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
 803f100:	e0fff58b 	ldhu	r3,-42(fp)
 803f104:	00bffff4 	movhi	r2,65535
 803f108:	1087ffc4 	addi	r2,r2,8191
 803f10c:	1884703a 	and	r2,r3,r2
 803f110:	e0bfff15 	stw	r2,-4(fp)
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
 803f114:	e0bfff17 	ldw	r2,-4(fp)
 803f118:	100490fa 	slli	r2,r2,3
 803f11c:	e0bfff15 	stw	r2,-4(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
 803f120:	e0bff417 	ldw	r2,-48(fp)
 803f124:	e0bffc15 	stw	r2,-16(fp)
   e = 0;
 803f128:	e03ffb15 	stw	zero,-20(fp)
   while (left > 1)  /* more data left to send? */
 803f12c:	00009c06 	br	803f3a0 <ip_fragment_lc+0x3dc>
   {
      p = pkt2;  /* move next fragment up */
 803f130:	e0bffc17 	ldw	r2,-16(fp)
 803f134:	e0bff415 	stw	r2,-48(fp)
      pip = (struct ip *)(p->nb_prot);
 803f138:	e0bff417 	ldw	r2,-48(fp)
 803f13c:	10800317 	ldw	r2,12(r2)
 803f140:	e0bffa15 	stw	r2,-24(fp)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 803f144:	e0fff617 	ldw	r3,-40(fp)
 803f148:	e0bffd17 	ldw	r2,-12(fp)
 803f14c:	1880010e 	bge	r3,r2,803f154 <ip_fragment_lc+0x190>
 803f150:	1805883a 	mov	r2,r3
 803f154:	e0fff917 	ldw	r3,-28(fp)
 803f158:	10c5883a 	add	r2,r2,r3
 803f15c:	1007883a 	mov	r3,r2
 803f160:	e0bff417 	ldw	r2,-48(fp)
 803f164:	10c00415 	stw	r3,16(r2)
      left -= fragsize; /* decrement count of bytes left to send */
 803f168:	e0fffd17 	ldw	r3,-12(fp)
 803f16c:	e0bff617 	ldw	r2,-40(fp)
 803f170:	1885c83a 	sub	r2,r3,r2
 803f174:	e0bffd15 	stw	r2,-12(fp)

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
 803f178:	e0bff417 	ldw	r2,-48(fp)
 803f17c:	10800417 	ldw	r2,16(r2)
 803f180:	10bfffcc 	andi	r2,r2,65535
 803f184:	1004d23a 	srli	r2,r2,8
 803f188:	1007883a 	mov	r3,r2
 803f18c:	e0bff417 	ldw	r2,-48(fp)
 803f190:	10800417 	ldw	r2,16(r2)
 803f194:	10bfffcc 	andi	r2,r2,65535
 803f198:	1004923a 	slli	r2,r2,8
 803f19c:	1884b03a 	or	r2,r3,r2
 803f1a0:	1007883a 	mov	r3,r2
 803f1a4:	e0bffa17 	ldw	r2,-24(fp)
 803f1a8:	10c0008d 	sth	r3,2(r2)

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
 803f1ac:	e0bfff17 	ldw	r2,-4(fp)
 803f1b0:	1004d0fa 	srli	r2,r2,3
 803f1b4:	e0bffe8d 	sth	r2,-6(fp)
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 803f1b8:	e0bffd17 	ldw	r2,-12(fp)
 803f1bc:	10800090 	cmplti	r2,r2,2
 803f1c0:	1000021e 	bne	r2,zero,803f1cc <ip_fragment_lc+0x208>
 803f1c4:	00880004 	movi	r2,8192
 803f1c8:	00000106 	br	803f1d0 <ip_fragment_lc+0x20c>
 803f1cc:	0005883a 	mov	r2,zero
 803f1d0:	e0fffe8b 	ldhu	r3,-6(fp)
 803f1d4:	10c4b03a 	or	r2,r2,r3
 803f1d8:	e0bffe8d 	sth	r2,-6(fp)

      if ( tmp_fraginfo & IP_FLG_MF )             
 803f1dc:	e0bff58b 	ldhu	r2,-42(fp)
 803f1e0:	1088000c 	andi	r2,r2,8192
 803f1e4:	10000326 	beq	r2,zero,803f1f4 <ip_fragment_lc+0x230>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
 803f1e8:	e0bffe8b 	ldhu	r2,-6(fp)
 803f1ec:	10880014 	ori	r2,r2,8192
 803f1f0:	e0bffe8d 	sth	r2,-6(fp)
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
 803f1f4:	e0bffe8b 	ldhu	r2,-6(fp)
 803f1f8:	1004d23a 	srli	r2,r2,8
 803f1fc:	1007883a 	mov	r3,r2
 803f200:	e0bffe8b 	ldhu	r2,-6(fp)
 803f204:	1004923a 	slli	r2,r2,8
 803f208:	1884b03a 	or	r2,r3,r2
 803f20c:	1007883a 	mov	r3,r2
 803f210:	e0bffa17 	ldw	r2,-24(fp)
 803f214:	10c0018d 	sth	r3,6(r2)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
 803f218:	e0bffd17 	ldw	r2,-12(fp)
 803f21c:	10800090 	cmplti	r2,r2,2
 803f220:	10003c1e 	bne	r2,zero,803f314 <ip_fragment_lc+0x350>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803f224:	01000084 	movi	r4,2
 803f228:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
 803f22c:	e0fffd17 	ldw	r3,-12(fp)
 803f230:	e0bff917 	ldw	r2,-28(fp)
 803f234:	1887883a 	add	r3,r3,r2
 803f238:	d0a07c17 	ldw	r2,-32272(gp)
 803f23c:	1885883a 	add	r2,r3,r2
 803f240:	1009883a 	mov	r4,r2
 803f244:	802b8840 	call	802b884 <pk_alloc>
 803f248:	e0bffc15 	stw	r2,-16(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f24c:	01000084 	movi	r4,2
 803f250:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         if (!pkt2)
 803f254:	e0bffc17 	ldw	r2,-16(fp)
 803f258:	10000e1e 	bne	r2,zero,803f294 <ip_fragment_lc+0x2d0>
         {
            dtrap();
 803f25c:	802c3fc0 	call	802c3fc <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803f260:	01000084 	movi	r4,2
 803f264:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 803f268:	e13ff417 	ldw	r4,-48(fp)
 803f26c:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f270:	01000084 	movi	r4,2
 803f274:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 803f278:	008201b4 	movhi	r2,2054
 803f27c:	10bd3117 	ldw	r2,-2876(r2)
 803f280:	10c00044 	addi	r3,r2,1
 803f284:	008201b4 	movhi	r2,2054
 803f288:	10fd3115 	stw	r3,-2876(r2)
            return ENP_RESOURCE;
 803f28c:	00bffa84 	movi	r2,-22
 803f290:	00004706 	br	803f3b0 <ip_fragment_lc+0x3ec>
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
 803f294:	e0bff417 	ldw	r2,-48(fp)
 803f298:	10c00617 	ldw	r3,24(r2)
 803f29c:	e0bffc17 	ldw	r2,-16(fp)
 803f2a0:	10c00615 	stw	r3,24(r2)
         pkt2->fhost = p->fhost;
 803f2a4:	e0bff417 	ldw	r2,-48(fp)
 803f2a8:	10c00717 	ldw	r3,28(r2)
 803f2ac:	e0bffc17 	ldw	r2,-16(fp)
 803f2b0:	10c00715 	stw	r3,28(r2)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
 803f2b4:	e0bffc17 	ldw	r2,-16(fp)
 803f2b8:	10c00317 	ldw	r3,12(r2)
 803f2bc:	e0bff417 	ldw	r2,-48(fp)
 803f2c0:	10800317 	ldw	r2,12(r2)
 803f2c4:	e13ff917 	ldw	r4,-28(fp)
 803f2c8:	200d883a 	mov	r6,r4
 803f2cc:	100b883a 	mov	r5,r2
 803f2d0:	1809883a 	mov	r4,r3
 803f2d4:	8002ea40 	call	8002ea4 <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
 803f2d8:	e0bffc17 	ldw	r2,-16(fp)
 803f2dc:	10c00317 	ldw	r3,12(r2)
 803f2e0:	e0bff917 	ldw	r2,-28(fp)
 803f2e4:	188f883a 	add	r7,r3,r2
 803f2e8:	e0bff417 	ldw	r2,-48(fp)
 803f2ec:	10c00317 	ldw	r3,12(r2)
 803f2f0:	e13ff917 	ldw	r4,-28(fp)
 803f2f4:	e0bff617 	ldw	r2,-40(fp)
 803f2f8:	2085883a 	add	r2,r4,r2
 803f2fc:	1885883a 	add	r2,r3,r2
 803f300:	e0fffd17 	ldw	r3,-12(fp)
 803f304:	180d883a 	mov	r6,r3
 803f308:	100b883a 	mov	r5,r2
 803f30c:	3809883a 	mov	r4,r7
 803f310:	8002ea40 	call	8002ea4 <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
 803f314:	e0bffa17 	ldw	r2,-24(fp)
 803f318:	1000028d 	sth	zero,10(r2)
      pip->ip_chksum = ~cksum(pip, 10);
 803f31c:	01400284 	movi	r5,10
 803f320:	e13ffa17 	ldw	r4,-24(fp)
 803f324:	8027be00 	call	8027be0 <cksum>
 803f328:	0084303a 	nor	r2,zero,r2
 803f32c:	1007883a 	mov	r3,r2
 803f330:	e0bffa17 	ldw	r2,-24(fp)
 803f334:	10c0028d 	sth	r3,10(r2)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 803f338:	e17ff317 	ldw	r5,-52(fp)
 803f33c:	e13ff417 	ldw	r4,-48(fp)
 803f340:	8025c0c0 	call	8025c0c <ip2mac>
 803f344:	e0bffb15 	stw	r2,-20(fp)
      ip_mib.ipFragCreates++;
 803f348:	008201b4 	movhi	r2,2054
 803f34c:	10bd3217 	ldw	r2,-2872(r2)
 803f350:	10c00044 	addi	r3,r2,1
 803f354:	008201b4 	movhi	r2,2054
 803f358:	10fd3215 	stw	r3,-2872(r2)
      if (e < 0)
 803f35c:	e0bffb17 	ldw	r2,-20(fp)
 803f360:	10000b0e 	bge	r2,zero,803f390 <ip_fragment_lc+0x3cc>
      {
         if (left > 1) 
 803f364:	e0bffd17 	ldw	r2,-12(fp)
 803f368:	10800090 	cmplti	r2,r2,2
 803f36c:	1000061e 	bne	r2,zero,803f388 <ip_fragment_lc+0x3c4>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803f370:	01000084 	movi	r4,2
 803f374:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
 803f378:	e13ffc17 	ldw	r4,-16(fp)
 803f37c:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f380:	01000084 	movi	r4,2
 803f384:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         }
         return e;
 803f388:	e0bffb17 	ldw	r2,-20(fp)
 803f38c:	00000806 	br	803f3b0 <ip_fragment_lc+0x3ec>
      }
      foffset += fragsize;    /* offset for next fragment */
 803f390:	e0ffff17 	ldw	r3,-4(fp)
 803f394:	e0bff617 	ldw	r2,-40(fp)
 803f398:	1885883a 	add	r2,r3,r2
 803f39c:	e0bfff15 	stw	r2,-4(fp)
   while (left > 1)  /* more data left to send? */
 803f3a0:	e0bffd17 	ldw	r2,-12(fp)
 803f3a4:	10800088 	cmpgei	r2,r2,2
 803f3a8:	103f611e 	bne	r2,zero,803f130 <ip_fragment_lc+0x16c>
   }
   return e;
 803f3ac:	e0bffb17 	ldw	r2,-20(fp)
}
 803f3b0:	e037883a 	mov	sp,fp
 803f3b4:	dfc00117 	ldw	ra,4(sp)
 803f3b8:	df000017 	ldw	fp,0(sp)
 803f3bc:	dec00204 	addi	sp,sp,8
 803f3c0:	f800283a 	ret

0803f3c4 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 803f3c4:	defff004 	addi	sp,sp,-64
 803f3c8:	dfc00f15 	stw	ra,60(sp)
 803f3cc:	df000e15 	stw	fp,56(sp)
 803f3d0:	df000e04 	addi	fp,sp,56
 803f3d4:	e13ff415 	stw	r4,-48(fp)
 803f3d8:	e17ff315 	stw	r5,-52(fp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
 803f3dc:	e0bff417 	ldw	r2,-48(fp)
 803f3e0:	10800317 	ldw	r2,12(r2)
 803f3e4:	e0bffd15 	stw	r2,-12(fp)
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 803f3e8:	e0bffd17 	ldw	r2,-12(fp)
 803f3ec:	1080018b 	ldhu	r2,6(r2)
 803f3f0:	10bfffcc 	andi	r2,r2,65535
 803f3f4:	1004d23a 	srli	r2,r2,8
 803f3f8:	10bfffcc 	andi	r2,r2,65535
 803f3fc:	10c03fcc 	andi	r3,r2,255
 803f400:	e0bffd17 	ldw	r2,-12(fp)
 803f404:	1080018b 	ldhu	r2,6(r2)
 803f408:	10bfffcc 	andi	r2,r2,65535
 803f40c:	1004923a 	slli	r2,r2,8
 803f410:	10bfffcc 	andi	r2,r2,65535
 803f414:	1884b03a 	or	r2,r3,r2
 803f418:	1090000c 	andi	r2,r2,16384
 803f41c:	10001a26 	beq	r2,zero,803f488 <ip_fragment+0xc4>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803f420:	01000084 	movi	r4,2
 803f424:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 803f428:	e13ff417 	ldw	r4,-48(fp)
 803f42c:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f430:	01000084 	movi	r4,2
 803f434:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
 803f438:	008201b4 	movhi	r2,2054
 803f43c:	10bd3117 	ldw	r2,-2876(r2)
 803f440:	10c00044 	addi	r3,r2,1
 803f444:	008201b4 	movhi	r2,2054
 803f448:	10fd3115 	stw	r3,-2876(r2)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 803f44c:	e0bffd17 	ldw	r2,-12(fp)
 803f450:	10c00317 	ldw	r3,12(r2)
 803f454:	e0bff417 	ldw	r2,-48(fp)
 803f458:	10800617 	ldw	r2,24(r2)
 803f45c:	11000a17 	ldw	r4,40(r2)
 803f460:	e0bff417 	ldw	r2,-48(fp)
 803f464:	10800617 	ldw	r2,24(r2)
 803f468:	d8800015 	stw	r2,0(sp)
 803f46c:	01c00104 	movi	r7,4
 803f470:	e1bffd17 	ldw	r6,-12(fp)
 803f474:	200b883a 	mov	r5,r4
 803f478:	1809883a 	mov	r4,r3
 803f47c:	8049ab80 	call	8049ab8 <icmp_destun>
#endif   /* FULL_ICMP */
      return 0;
 803f480:	0005883a 	mov	r2,zero
 803f484:	00013106 	br	803f94c <ip_fragment+0x588>
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
 803f488:	802bc440 	call	802bc44 <pk_get_max_intrsafe_buf_len>
 803f48c:	e0bffc15 	stw	r2,-16(fp)

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
 803f490:	e0bff417 	ldw	r2,-48(fp)
 803f494:	10800617 	ldw	r2,24(r2)
 803f498:	10800917 	ldw	r2,36(r2)
 803f49c:	1007883a 	mov	r3,r2
 803f4a0:	e0bffc17 	ldw	r2,-16(fp)
 803f4a4:	10c0022e 	bgeu	r2,r3,803f4b0 <ip_fragment+0xec>
 803f4a8:	e0bffc17 	ldw	r2,-16(fp)
 803f4ac:	00000306 	br	803f4bc <ip_fragment+0xf8>
 803f4b0:	e0bff417 	ldw	r2,-48(fp)
 803f4b4:	10800617 	ldw	r2,24(r2)
 803f4b8:	10800917 	ldw	r2,36(r2)
 803f4bc:	e0bffb8d 	sth	r2,-18(fp)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
 803f4c0:	e0bffd17 	ldw	r2,-12(fp)
 803f4c4:	10800003 	ldbu	r2,0(r2)
 803f4c8:	10803fcc 	andi	r2,r2,255
 803f4cc:	100490ba 	slli	r2,r2,2
 803f4d0:	10800f0c 	andi	r2,r2,60
 803f4d4:	e0bffb45 	stb	r2,-19(fp)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
 803f4d8:	e0bff417 	ldw	r2,-48(fp)
 803f4dc:	10800617 	ldw	r2,24(r2)
 803f4e0:	10800817 	ldw	r2,32(r2)
 803f4e4:	e0bffb05 	stb	r2,-20(fp)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 803f4e8:	e0bffb43 	ldbu	r2,-19(fp)
 803f4ec:	e0fffb8b 	ldhu	r3,-18(fp)
 803f4f0:	1885c83a 	sub	r2,r3,r2
 803f4f4:	1007883a 	mov	r3,r2
 803f4f8:	e0bffb03 	ldbu	r2,-20(fp)
 803f4fc:	1885c83a 	sub	r2,r3,r2
 803f500:	e0bffa8d 	sth	r2,-22(fp)

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 803f504:	e0fffa8b 	ldhu	r3,-22(fp)
 803f508:	00bffe04 	movi	r2,-8
 803f50c:	1884703a 	and	r2,r3,r2
 803f510:	e0bffa8d 	sth	r2,-22(fp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 803f514:	e0bffd17 	ldw	r2,-12(fp)
 803f518:	1080008b 	ldhu	r2,2(r2)
 803f51c:	10bfffcc 	andi	r2,r2,65535
 803f520:	1004d23a 	srli	r2,r2,8
 803f524:	1007883a 	mov	r3,r2
 803f528:	e0bffd17 	ldw	r2,-12(fp)
 803f52c:	1080008b 	ldhu	r2,2(r2)
 803f530:	10bfffcc 	andi	r2,r2,65535
 803f534:	1004923a 	slli	r2,r2,8
 803f538:	1884b03a 	or	r2,r3,r2
 803f53c:	1007883a 	mov	r3,r2
 803f540:	e0bffb43 	ldbu	r2,-19(fp)
 803f544:	1885c83a 	sub	r2,r3,r2
 803f548:	e0bffa0d 	sth	r2,-24(fp)
   num_frags = (total_payload_len / useable_payload_len);
 803f54c:	e0bffa0b 	ldhu	r2,-24(fp)
 803f550:	e0fffa8b 	ldhu	r3,-22(fp)
 803f554:	180b883a 	mov	r5,r3
 803f558:	1009883a 	mov	r4,r2
 803f55c:	800e2300 	call	800e230 <__udivsi3>
 803f560:	e0bfff8d 	sth	r2,-2(fp)
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
 803f564:	e0bffa0b 	ldhu	r2,-24(fp)
 803f568:	e0fffa8b 	ldhu	r3,-22(fp)
 803f56c:	180b883a 	mov	r5,r3
 803f570:	1009883a 	mov	r4,r2
 803f574:	800e2940 	call	800e294 <__umodsi3>
 803f578:	e0bff98d 	sth	r2,-26(fp)
 803f57c:	e0bff98b 	ldhu	r2,-26(fp)
 803f580:	10000326 	beq	r2,zero,803f590 <ip_fragment+0x1cc>
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
 803f584:	e0bfff8b 	ldhu	r2,-2(fp)
 803f588:	10800044 	addi	r2,r2,1
 803f58c:	e0bfff8d 	sth	r2,-2(fp)
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
 803f590:	e0bfff8b 	ldhu	r2,-2(fp)
 803f594:	10800128 	cmpgeui	r2,r2,4
 803f598:	1000081e 	bne	r2,zero,803f5bc <ip_fragment+0x1f8>
 803f59c:	e0bff417 	ldw	r2,-48(fp)
 803f5a0:	10800a17 	ldw	r2,40(r2)
 803f5a4:	1080040c 	andi	r2,r2,16
 803f5a8:	1000041e 	bne	r2,zero,803f5bc <ip_fragment+0x1f8>
   {
      return (ip_fragment_lc (p, firsthop));
 803f5ac:	e17ff317 	ldw	r5,-52(fp)
 803f5b0:	e13ff417 	ldw	r4,-48(fp)
 803f5b4:	803efc40 	call	803efc4 <ip_fragment_lc>
 803f5b8:	0000e406 	br	803f94c <ip_fragment+0x588>
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 803f5bc:	e0bffd17 	ldw	r2,-12(fp)
 803f5c0:	1080018b 	ldhu	r2,6(r2)
 803f5c4:	10bfffcc 	andi	r2,r2,65535
 803f5c8:	1004d23a 	srli	r2,r2,8
 803f5cc:	10bfffcc 	andi	r2,r2,65535
 803f5d0:	10c03fcc 	andi	r3,r2,255
 803f5d4:	e0bffd17 	ldw	r2,-12(fp)
 803f5d8:	1080018b 	ldhu	r2,6(r2)
 803f5dc:	10bfffcc 	andi	r2,r2,65535
 803f5e0:	1004923a 	slli	r2,r2,8
 803f5e4:	10bfffcc 	andi	r2,r2,65535
 803f5e8:	1884b03a 	or	r2,r3,r2
 803f5ec:	100490fa 	slli	r2,r2,3
 803f5f0:	e0bff90d 	sth	r2,-28(fp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
 803f5f4:	e0bffd17 	ldw	r2,-12(fp)
 803f5f8:	1080018b 	ldhu	r2,6(r2)
 803f5fc:	10bfffcc 	andi	r2,r2,65535
 803f600:	1004d23a 	srli	r2,r2,8
 803f604:	1007883a 	mov	r3,r2
 803f608:	e0bffd17 	ldw	r2,-12(fp)
 803f60c:	1080018b 	ldhu	r2,6(r2)
 803f610:	10bfffcc 	andi	r2,r2,65535
 803f614:	1004923a 	slli	r2,r2,8
 803f618:	1884b03a 	or	r2,r3,r2
 803f61c:	1088000c 	andi	r2,r2,8192
 803f620:	e0bff88d 	sth	r2,-30(fp)
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 803f624:	e03fff0d 	sth	zero,-4(fp)
 803f628:	0000b906 	br	803f910 <ip_fragment+0x54c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 803f62c:	01000084 	movi	r4,2
 803f630:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
 803f634:	e0fffa8b 	ldhu	r3,-22(fp)
 803f638:	e0bffb43 	ldbu	r2,-19(fp)
 803f63c:	1887883a 	add	r3,r3,r2
 803f640:	e0bffb03 	ldbu	r2,-20(fp)
 803f644:	1885883a 	add	r2,r3,r2
 803f648:	1009883a 	mov	r4,r2
 803f64c:	802b8840 	call	802b884 <pk_alloc>
 803f650:	e0bff715 	stw	r2,-36(fp)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f654:	01000084 	movi	r4,2
 803f658:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
 803f65c:	e0bff717 	ldw	r2,-36(fp)
 803f660:	10000d1e 	bne	r2,zero,803f698 <ip_fragment+0x2d4>
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 803f664:	01000084 	movi	r4,2
 803f668:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 803f66c:	e13ff417 	ldw	r4,-48(fp)
 803f670:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f674:	01000084 	movi	r4,2
 803f678:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
 803f67c:	008201b4 	movhi	r2,2054
 803f680:	10bd3117 	ldw	r2,-2876(r2)
 803f684:	10c00044 	addi	r3,r2,1
 803f688:	008201b4 	movhi	r2,2054
 803f68c:	10fd3115 	stw	r3,-2876(r2)
         return ENP_NOBUFFER;
 803f690:	00bffac4 	movi	r2,-21
 803f694:	0000ad06 	br	803f94c <ip_fragment+0x588>
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
 803f698:	e0bff717 	ldw	r2,-36(fp)
 803f69c:	10c00117 	ldw	r3,4(r2)
 803f6a0:	e0bffb03 	ldbu	r2,-20(fp)
 803f6a4:	1887883a 	add	r3,r3,r2
 803f6a8:	e0bff417 	ldw	r2,-48(fp)
 803f6ac:	10800317 	ldw	r2,12(r2)
 803f6b0:	e13ffb43 	ldbu	r4,-19(fp)
 803f6b4:	200d883a 	mov	r6,r4
 803f6b8:	100b883a 	mov	r5,r2
 803f6bc:	1809883a 	mov	r4,r3
 803f6c0:	8002ea40 	call	8002ea4 <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
 803f6c4:	e0ffff0b 	ldhu	r3,-4(fp)
 803f6c8:	e0bfff8b 	ldhu	r2,-2(fp)
 803f6cc:	10bfffc4 	addi	r2,r2,-1
 803f6d0:	1880030e 	bge	r3,r2,803f6e0 <ip_fragment+0x31c>
         {
            amt_to_copy = useable_payload_len;
 803f6d4:	e0bffa8b 	ldhu	r2,-22(fp)
 803f6d8:	e0bffe8d 	sth	r2,-6(fp)
 803f6dc:	00000606 	br	803f6f8 <ip_fragment+0x334>
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
 803f6e0:	e0bff98b 	ldhu	r2,-26(fp)
 803f6e4:	1000021e 	bne	r2,zero,803f6f0 <ip_fragment+0x32c>
 803f6e8:	e0bffa8b 	ldhu	r2,-22(fp)
 803f6ec:	00000106 	br	803f6f4 <ip_fragment+0x330>
 803f6f0:	e0bff98b 	ldhu	r2,-26(fp)
 803f6f4:	e0bffe8d 	sth	r2,-6(fp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
 803f6f8:	e0bff717 	ldw	r2,-36(fp)
 803f6fc:	10c00117 	ldw	r3,4(r2)
 803f700:	e13ffb03 	ldbu	r4,-20(fp)
 803f704:	e0bffb43 	ldbu	r2,-19(fp)
 803f708:	2085883a 	add	r2,r4,r2
 803f70c:	188f883a 	add	r7,r3,r2
 803f710:	e0bff417 	ldw	r2,-48(fp)
 803f714:	10c00317 	ldw	r3,12(r2)
 803f718:	e0bffb43 	ldbu	r2,-19(fp)
 803f71c:	e17ffa8b 	ldhu	r5,-22(fp)
 803f720:	e13fff0b 	ldhu	r4,-4(fp)
 803f724:	2909383a 	mul	r4,r5,r4
 803f728:	1105883a 	add	r2,r2,r4
 803f72c:	1885883a 	add	r2,r3,r2
 803f730:	e0fffe8b 	ldhu	r3,-6(fp)
 803f734:	180d883a 	mov	r6,r3
 803f738:	100b883a 	mov	r5,r2
 803f73c:	3809883a 	mov	r4,r7
 803f740:	8002ea40 	call	8002ea4 <memcpy>

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 803f744:	e0bff717 	ldw	r2,-36(fp)
 803f748:	10c00117 	ldw	r3,4(r2)
 803f74c:	e0bffb03 	ldbu	r2,-20(fp)
 803f750:	1887883a 	add	r3,r3,r2
 803f754:	e0bff717 	ldw	r2,-36(fp)
 803f758:	10c00315 	stw	r3,12(r2)
         newpkt->nb_plen = iphlen + amt_to_copy;
 803f75c:	e0fffb43 	ldbu	r3,-19(fp)
 803f760:	e0bffe8b 	ldhu	r2,-6(fp)
 803f764:	1885883a 	add	r2,r3,r2
 803f768:	1007883a 	mov	r3,r2
 803f76c:	e0bff717 	ldw	r2,-36(fp)
 803f770:	10c00415 	stw	r3,16(r2)
         newpkt->net = p->net;
 803f774:	e0bff417 	ldw	r2,-48(fp)
 803f778:	10c00617 	ldw	r3,24(r2)
 803f77c:	e0bff717 	ldw	r2,-36(fp)
 803f780:	10c00615 	stw	r3,24(r2)
         newpkt->fhost = p->fhost;
 803f784:	e0bff417 	ldw	r2,-48(fp)
 803f788:	10c00717 	ldw	r3,28(r2)
 803f78c:	e0bff717 	ldw	r2,-36(fp)
 803f790:	10c00715 	stw	r3,28(r2)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
 803f794:	e0bff717 	ldw	r2,-36(fp)
 803f798:	00c20004 	movi	r3,2048
 803f79c:	10c0080d 	sth	r3,32(r2)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
 803f7a0:	e0bff717 	ldw	r2,-36(fp)
 803f7a4:	10800317 	ldw	r2,12(r2)
 803f7a8:	e0bff615 	stw	r2,-40(fp)
         newpip->ip_len = htons(newpkt->nb_plen);
 803f7ac:	e0bff717 	ldw	r2,-36(fp)
 803f7b0:	10800417 	ldw	r2,16(r2)
 803f7b4:	1004d23a 	srli	r2,r2,8
 803f7b8:	10803fcc 	andi	r2,r2,255
 803f7bc:	1007883a 	mov	r3,r2
 803f7c0:	e0bff717 	ldw	r2,-36(fp)
 803f7c4:	10800417 	ldw	r2,16(r2)
 803f7c8:	1004923a 	slli	r2,r2,8
 803f7cc:	1884b03a 	or	r2,r3,r2
 803f7d0:	1007883a 	mov	r3,r2
 803f7d4:	e0bff617 	ldw	r2,-40(fp)
 803f7d8:	10c0008d 	sth	r3,2(r2)
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 803f7dc:	e0fff90b 	ldhu	r3,-28(fp)
 803f7e0:	e13ffa8b 	ldhu	r4,-22(fp)
 803f7e4:	e0bfff0b 	ldhu	r2,-4(fp)
 803f7e8:	2085383a 	mul	r2,r4,r2
 803f7ec:	1885883a 	add	r2,r3,r2
 803f7f0:	1005d2fa 	srai	r2,r2,11
 803f7f4:	10803fcc 	andi	r2,r2,255
 803f7f8:	100b883a 	mov	r5,r2
 803f7fc:	e0fff90b 	ldhu	r3,-28(fp)
 803f800:	e13ffa8b 	ldhu	r4,-22(fp)
 803f804:	e0bfff0b 	ldhu	r2,-4(fp)
 803f808:	2085383a 	mul	r2,r4,r2
 803f80c:	1885883a 	add	r2,r3,r2
 803f810:	1005d0fa 	srai	r2,r2,3
 803f814:	1004923a 	slli	r2,r2,8
 803f818:	2884b03a 	or	r2,r5,r2
 803f81c:	1007883a 	mov	r3,r2
 803f820:	e0bff617 	ldw	r2,-40(fp)
 803f824:	10c0018d 	sth	r3,6(r2)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
 803f828:	e0ffff0b 	ldhu	r3,-4(fp)
 803f82c:	e0bfff8b 	ldhu	r2,-2(fp)
 803f830:	10bfffc4 	addi	r2,r2,-1
 803f834:	1880070e 	bge	r3,r2,803f854 <ip_fragment+0x490>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 803f838:	e0bff617 	ldw	r2,-40(fp)
 803f83c:	1080018b 	ldhu	r2,6(r2)
 803f840:	10800814 	ori	r2,r2,32
 803f844:	1007883a 	mov	r3,r2
 803f848:	e0bff617 	ldw	r2,-40(fp)
 803f84c:	10c0018d 	sth	r3,6(r2)
 803f850:	00000806 	br	803f874 <ip_fragment+0x4b0>
         }
         else
         {
            if (parent_mf)
 803f854:	e0bff88b 	ldhu	r2,-30(fp)
 803f858:	10000626 	beq	r2,zero,803f874 <ip_fragment+0x4b0>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 803f85c:	e0bff617 	ldw	r2,-40(fp)
 803f860:	1080018b 	ldhu	r2,6(r2)
 803f864:	10800814 	ori	r2,r2,32
 803f868:	1007883a 	mov	r3,r2
 803f86c:	e0bff617 	ldw	r2,-40(fp)
 803f870:	10c0018d 	sth	r3,6(r2)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
 803f874:	e0bff617 	ldw	r2,-40(fp)
 803f878:	1000028d 	sth	zero,10(r2)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 803f87c:	e0bffb43 	ldbu	r2,-19(fp)
 803f880:	1004d07a 	srli	r2,r2,1
 803f884:	10803fcc 	andi	r2,r2,255
 803f888:	100b883a 	mov	r5,r2
 803f88c:	e13ff617 	ldw	r4,-40(fp)
 803f890:	8027be00 	call	8027be0 <cksum>
 803f894:	0084303a 	nor	r2,zero,r2
 803f898:	1007883a 	mov	r3,r2
 803f89c:	e0bff617 	ldw	r2,-40(fp)
 803f8a0:	10c0028d 	sth	r3,10(r2)

         ip_mib.ipFragCreates++;
 803f8a4:	008201b4 	movhi	r2,2054
 803f8a8:	10bd3217 	ldw	r2,-2872(r2)
 803f8ac:	10c00044 	addi	r3,r2,1
 803f8b0:	008201b4 	movhi	r2,2054
 803f8b4:	10fd3215 	stw	r3,-2872(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 803f8b8:	e17ff317 	ldw	r5,-52(fp)
 803f8bc:	e13ff717 	ldw	r4,-36(fp)
 803f8c0:	8025c0c0 	call	8025c0c <ip2mac>
 803f8c4:	e0bff515 	stw	r2,-44(fp)
         if (e < 0)
 803f8c8:	e0bff517 	ldw	r2,-44(fp)
 803f8cc:	10000d0e 	bge	r2,zero,803f904 <ip_fragment+0x540>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 803f8d0:	01000084 	movi	r4,2
 803f8d4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 803f8d8:	e13ff417 	ldw	r4,-48(fp)
 803f8dc:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f8e0:	01000084 	movi	r4,2
 803f8e4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 803f8e8:	008201b4 	movhi	r2,2054
 803f8ec:	10bd3117 	ldw	r2,-2876(r2)
 803f8f0:	10c00044 	addi	r3,r2,1
 803f8f4:	008201b4 	movhi	r2,2054
 803f8f8:	10fd3115 	stw	r3,-2876(r2)
            return e;
 803f8fc:	e0bff517 	ldw	r2,-44(fp)
 803f900:	00001206 	br	803f94c <ip_fragment+0x588>
   for (i = 0; i < num_frags; ++i)
 803f904:	e0bfff0b 	ldhu	r2,-4(fp)
 803f908:	10800044 	addi	r2,r2,1
 803f90c:	e0bfff0d 	sth	r2,-4(fp)
 803f910:	e0ffff0b 	ldhu	r3,-4(fp)
 803f914:	e0bfff8b 	ldhu	r2,-2(fp)
 803f918:	18bf4436 	bltu	r3,r2,803f62c <ip_fragment+0x268>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 803f91c:	01000084 	movi	r4,2
 803f920:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 803f924:	e13ff417 	ldw	r4,-48(fp)
 803f928:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803f92c:	01000084 	movi	r4,2
 803f930:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 803f934:	008201b4 	movhi	r2,2054
 803f938:	10bd3017 	ldw	r2,-2880(r2)
 803f93c:	10c00044 	addi	r3,r2,1
 803f940:	008201b4 	movhi	r2,2054
 803f944:	10fd3015 	stw	r3,-2880(r2)

   return 0;
 803f948:	0005883a 	mov	r2,zero
}
 803f94c:	e037883a 	mov	sp,fp
 803f950:	dfc00117 	ldw	ra,4(sp)
 803f954:	df000017 	ldw	fp,0(sp)
 803f958:	dec00204 	addi	sp,sp,8
 803f95c:	f800283a 	ret

0803f960 <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
 803f960:	defffa04 	addi	sp,sp,-24
 803f964:	dfc00515 	stw	ra,20(sp)
 803f968:	df000415 	stw	fp,16(sp)
 803f96c:	df000404 	addi	fp,sp,16
 803f970:	e13ffd15 	stw	r4,-12(fp)

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
 803f974:	e0bffe04 	addi	r2,fp,-8
 803f978:	100b883a 	mov	r5,r2
 803f97c:	e13ffd17 	ldw	r4,-12(fp)
 803f980:	803fca80 	call	803fca8 <iproute>
 803f984:	e0bfff15 	stw	r2,-4(fp)
   if (tnet == 0)
 803f988:	e0bfff17 	ldw	r2,-4(fp)
 803f98c:	1000161e 	bne	r2,zero,803f9e8 <ip_mymach+0x88>
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 803f990:	d0a07e17 	ldw	r2,-32264(gp)
 803f994:	1080050c 	andi	r2,r2,20
 803f998:	10001126 	beq	r2,zero,803f9e0 <ip_mymach+0x80>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 803f99c:	e0bffd17 	ldw	r2,-12(fp)
 803f9a0:	10c03fcc 	andi	r3,r2,255
 803f9a4:	e0bffd17 	ldw	r2,-12(fp)
 803f9a8:	1004d23a 	srli	r2,r2,8
 803f9ac:	11003fcc 	andi	r4,r2,255
 803f9b0:	e0bffd17 	ldw	r2,-12(fp)
 803f9b4:	1004d43a 	srli	r2,r2,16
 803f9b8:	11403fcc 	andi	r5,r2,255
 803f9bc:	e0bffd17 	ldw	r2,-12(fp)
 803f9c0:	1004d63a 	srli	r2,r2,24
 803f9c4:	d8800015 	stw	r2,0(sp)
 803f9c8:	280f883a 	mov	r7,r5
 803f9cc:	200d883a 	mov	r6,r4
 803f9d0:	180b883a 	mov	r5,r3
 803f9d4:	01020174 	movhi	r4,2053
 803f9d8:	210d2104 	addi	r4,r4,13444
 803f9dc:	800325c0 	call	800325c <printf>
#endif   /* NPDEBUG */
      return 0L;
 803f9e0:	0005883a 	mov	r2,zero
 803f9e4:	00000206 	br	803f9f0 <ip_mymach+0x90>
   }
   return tnet->n_ipaddr;
 803f9e8:	e0bfff17 	ldw	r2,-4(fp)
 803f9ec:	10800a17 	ldw	r2,40(r2)
#endif /* MULTI_HOMED */
}
 803f9f0:	e037883a 	mov	sp,fp
 803f9f4:	dfc00117 	ldw	ra,4(sp)
 803f9f8:	df000017 	ldw	fp,0(sp)
 803f9fc:	dec00204 	addi	sp,sp,8
 803fa00:	f800283a 	ret

0803fa04 <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
 803fa04:	defff704 	addi	sp,sp,-36
 803fa08:	dfc00815 	stw	ra,32(sp)
 803fa0c:	df000715 	stw	fp,28(sp)
 803fa10:	df000704 	addi	fp,sp,28
 803fa14:	e13ffc15 	stw	r4,-16(fp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
 803fa18:	e0bffc17 	ldw	r2,-16(fp)
 803fa1c:	10800317 	ldw	r2,12(r2)
 803fa20:	e0bfff15 	stw	r2,-4(fp)
   osum = pip->ip_chksum;
 803fa24:	e0bfff17 	ldw	r2,-4(fp)
 803fa28:	1080028b 	ldhu	r2,10(r2)
 803fa2c:	e0bffe8d 	sth	r2,-6(fp)
   pip->ip_chksum = 0;
 803fa30:	e0bfff17 	ldw	r2,-4(fp)
 803fa34:	1000028d 	sth	zero,10(r2)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 803fa38:	e0bfff17 	ldw	r2,-4(fp)
 803fa3c:	10800003 	ldbu	r2,0(r2)
 803fa40:	10803fcc 	andi	r2,r2,255
 803fa44:	100490ba 	slli	r2,r2,2
 803fa48:	1005d07a 	srai	r2,r2,1
 803fa4c:	1080078c 	andi	r2,r2,30
 803fa50:	100b883a 	mov	r5,r2
 803fa54:	e13fff17 	ldw	r4,-4(fp)
 803fa58:	8027be00 	call	8027be0 <cksum>
 803fa5c:	0084303a 	nor	r2,zero,r2
 803fa60:	e0bffe0d 	sth	r2,-8(fp)

   if (osum != xsum)          /* trap here if checksum is wrong */
 803fa64:	e0fffe8b 	ldhu	r3,-6(fp)
 803fa68:	e0bffe0b 	ldhu	r2,-8(fp)
 803fa6c:	18800126 	beq	r3,r2,803fa74 <ip_dump+0x70>
   {
      dtrap();
 803fa70:	802c3fc0 	call	802c3fc <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
 803fa74:	01420174 	movhi	r5,2053
 803fa78:	294d2a04 	addi	r5,r5,13480
 803fa7c:	0009883a 	mov	r4,zero
 803fa80:	80281f80 	call	80281f8 <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
 803fa84:	e0bfff17 	ldw	r2,-4(fp)
 803fa88:	e0bffd15 	stw	r2,-12(fp)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 803fa8c:	e0bffd17 	ldw	r2,-12(fp)
 803fa90:	10800003 	ldbu	r2,0(r2)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 803fa94:	11403fcc 	andi	r5,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 803fa98:	e0bffd17 	ldw	r2,-12(fp)
 803fa9c:	10800044 	addi	r2,r2,1
 803faa0:	10800003 	ldbu	r2,0(r2)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 803faa4:	11803fcc 	andi	r6,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 803faa8:	e0bfff17 	ldw	r2,-4(fp)
 803faac:	1080008b 	ldhu	r2,2(r2)
 803fab0:	10bfffcc 	andi	r2,r2,65535
 803fab4:	1004d23a 	srli	r2,r2,8
 803fab8:	10bfffcc 	andi	r2,r2,65535
 803fabc:	10c03fcc 	andi	r3,r2,255
 803fac0:	e0bfff17 	ldw	r2,-4(fp)
 803fac4:	1080008b 	ldhu	r2,2(r2)
 803fac8:	10bfffcc 	andi	r2,r2,65535
 803facc:	1004923a 	slli	r2,r2,8
 803fad0:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 803fad4:	1884b03a 	or	r2,r3,r2
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
 803fad8:	e0ffff17 	ldw	r3,-4(fp)
 803fadc:	18c0010b 	ldhu	r3,4(r3)
 803fae0:	18ffffcc 	andi	r3,r3,65535
 803fae4:	1806d23a 	srli	r3,r3,8
 803fae8:	18ffffcc 	andi	r3,r3,65535
 803faec:	19003fcc 	andi	r4,r3,255
 803faf0:	e0ffff17 	ldw	r3,-4(fp)
 803faf4:	18c0010b 	ldhu	r3,4(r3)
 803faf8:	18ffffcc 	andi	r3,r3,65535
 803fafc:	1806923a 	slli	r3,r3,8
 803fb00:	18ffffcc 	andi	r3,r3,65535
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 803fb04:	20c6b03a 	or	r3,r4,r3
 803fb08:	d8c00115 	stw	r3,4(sp)
 803fb0c:	d8800015 	stw	r2,0(sp)
 803fb10:	300f883a 	mov	r7,r6
 803fb14:	280d883a 	mov	r6,r5
 803fb18:	01420174 	movhi	r5,2053
 803fb1c:	294d2f04 	addi	r5,r5,13500
 803fb20:	0009883a 	mov	r4,zero
 803fb24:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 803fb28:	e0bffd17 	ldw	r2,-12(fp)
 803fb2c:	10800184 	addi	r2,r2,6
 803fb30:	1080000b 	ldhu	r2,0(r2)
 803fb34:	10bfffcc 	andi	r2,r2,65535
 803fb38:	1004d23a 	srli	r2,r2,8
 803fb3c:	10bfffcc 	andi	r2,r2,65535
 803fb40:	10c03fcc 	andi	r3,r2,255
 803fb44:	e0bffd17 	ldw	r2,-12(fp)
 803fb48:	10800184 	addi	r2,r2,6
 803fb4c:	1080000b 	ldhu	r2,0(r2)
 803fb50:	10bfffcc 	andi	r2,r2,65535
 803fb54:	1004923a 	slli	r2,r2,8
 803fb58:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 803fb5c:	188cb03a 	or	r6,r3,r2
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 803fb60:	e0bfff17 	ldw	r2,-4(fp)
 803fb64:	10800203 	ldbu	r2,8(r2)
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 803fb68:	11c03fcc 	andi	r7,r2,255
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
 803fb6c:	e0bfff17 	ldw	r2,-4(fp)
 803fb70:	10800243 	ldbu	r2,9(r2)
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 803fb74:	10c03fcc 	andi	r3,r2,255
    htons(osum), (osum==xsum)?"ok":"bad");
 803fb78:	e0bffe8b 	ldhu	r2,-6(fp)
 803fb7c:	1004d23a 	srli	r2,r2,8
 803fb80:	10bfffcc 	andi	r2,r2,65535
 803fb84:	11003fcc 	andi	r4,r2,255
 803fb88:	e0bffe8b 	ldhu	r2,-6(fp)
 803fb8c:	1004923a 	slli	r2,r2,8
 803fb90:	10bfffcc 	andi	r2,r2,65535
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 803fb94:	2088b03a 	or	r4,r4,r2
 803fb98:	e17ffe8b 	ldhu	r5,-6(fp)
 803fb9c:	e0bffe0b 	ldhu	r2,-8(fp)
 803fba0:	2880031e 	bne	r5,r2,803fbb0 <ip_dump+0x1ac>
 803fba4:	00820174 	movhi	r2,2053
 803fba8:	108d3b04 	addi	r2,r2,13548
 803fbac:	00000206 	br	803fbb8 <ip_dump+0x1b4>
 803fbb0:	00820174 	movhi	r2,2053
 803fbb4:	108d3c04 	addi	r2,r2,13552
 803fbb8:	d8800215 	stw	r2,8(sp)
 803fbbc:	d9000115 	stw	r4,4(sp)
 803fbc0:	d8c00015 	stw	r3,0(sp)
 803fbc4:	01420174 	movhi	r5,2053
 803fbc8:	294d3d04 	addi	r5,r5,13556
 803fbcc:	0009883a 	mov	r4,zero
 803fbd0:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
 803fbd4:	e0bfff17 	ldw	r2,-4(fp)
 803fbd8:	10800317 	ldw	r2,12(r2)
 803fbdc:	11003fcc 	andi	r4,r2,255
 803fbe0:	e0bfff17 	ldw	r2,-4(fp)
 803fbe4:	10800317 	ldw	r2,12(r2)
 803fbe8:	1004d23a 	srli	r2,r2,8
 803fbec:	11403fcc 	andi	r5,r2,255
 803fbf0:	e0bfff17 	ldw	r2,-4(fp)
 803fbf4:	10800317 	ldw	r2,12(r2)
 803fbf8:	1004d43a 	srli	r2,r2,16
 803fbfc:	10803fcc 	andi	r2,r2,255
 803fc00:	e0ffff17 	ldw	r3,-4(fp)
 803fc04:	18c00317 	ldw	r3,12(r3)
 803fc08:	1806d63a 	srli	r3,r3,24
 803fc0c:	d8c00115 	stw	r3,4(sp)
 803fc10:	d8800015 	stw	r2,0(sp)
 803fc14:	280f883a 	mov	r7,r5
 803fc18:	200d883a 	mov	r6,r4
 803fc1c:	01420174 	movhi	r5,2053
 803fc20:	294d4d04 	addi	r5,r5,13620
 803fc24:	0009883a 	mov	r4,zero
 803fc28:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
 803fc2c:	e0bfff17 	ldw	r2,-4(fp)
 803fc30:	10800417 	ldw	r2,16(r2)
 803fc34:	11003fcc 	andi	r4,r2,255
 803fc38:	e0bfff17 	ldw	r2,-4(fp)
 803fc3c:	10800417 	ldw	r2,16(r2)
 803fc40:	1004d23a 	srli	r2,r2,8
 803fc44:	11403fcc 	andi	r5,r2,255
 803fc48:	e0bfff17 	ldw	r2,-4(fp)
 803fc4c:	10800417 	ldw	r2,16(r2)
 803fc50:	1004d43a 	srli	r2,r2,16
 803fc54:	10803fcc 	andi	r2,r2,255
 803fc58:	e0ffff17 	ldw	r3,-4(fp)
 803fc5c:	18c00417 	ldw	r3,16(r3)
 803fc60:	1806d63a 	srli	r3,r3,24
 803fc64:	d8c00115 	stw	r3,4(sp)
 803fc68:	d8800015 	stw	r2,0(sp)
 803fc6c:	280f883a 	mov	r7,r5
 803fc70:	200d883a 	mov	r6,r4
 803fc74:	01420174 	movhi	r5,2053
 803fc78:	294d5204 	addi	r5,r5,13640
 803fc7c:	0009883a 	mov	r4,zero
 803fc80:	80281f80 	call	80281f8 <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
 803fc84:	e0bfff17 	ldw	r2,-4(fp)
 803fc88:	e0fffe8b 	ldhu	r3,-6(fp)
 803fc8c:	10c0028d 	sth	r3,10(r2)
}
 803fc90:	0001883a 	nop
 803fc94:	e037883a 	mov	sp,fp
 803fc98:	dfc00117 	ldw	ra,4(sp)
 803fc9c:	df000017 	ldw	fp,0(sp)
 803fca0:	dec00204 	addi	sp,sp,8
 803fca4:	f800283a 	ret

0803fca8 <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
 803fca8:	defff804 	addi	sp,sp,-32
 803fcac:	dfc00715 	stw	ra,28(sp)
 803fcb0:	df000615 	stw	fp,24(sp)
 803fcb4:	df000604 	addi	fp,sp,24
 803fcb8:	e13ffc15 	stw	r4,-16(fp)
 803fcbc:	e17ffb15 	stw	r5,-20(fp)
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
 803fcc0:	e0bffc17 	ldw	r2,-16(fp)
 803fcc4:	1000021e 	bne	r2,zero,803fcd0 <iproute+0x28>
      return NULL;
 803fcc8:	0005883a 	mov	r2,zero
 803fccc:	00006406 	br	803fe60 <iproute+0x1b8>
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
 803fcd0:	d0a0c117 	ldw	r2,-31996(gp)
 803fcd4:	1000021e 	bne	r2,zero,803fce0 <iproute+0x38>
      return NULL;
 803fcd8:	0005883a 	mov	r2,zero
 803fcdc:	00006006 	br	803fe60 <iproute+0x1b8>
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
 803fce0:	d0a0cb17 	ldw	r2,-31956(gp)
 803fce4:	10000e26 	beq	r2,zero,803fd20 <iproute+0x78>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
 803fce8:	d0a0cb17 	ldw	r2,-31956(gp)
 803fcec:	10800017 	ldw	r2,0(r2)
 803fcf0:	e0fffc17 	ldw	r3,-16(fp)
 803fcf4:	18800a1e 	bne	r3,r2,803fd20 <iproute+0x78>
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
 803fcf8:	d0a0cb17 	ldw	r2,-31956(gp)
 803fcfc:	10c00617 	ldw	r3,24(r2)
 803fd00:	e0bffb17 	ldw	r2,-20(fp)
 803fd04:	10c00015 	stw	r3,0(r2)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
 803fd08:	d0a0cb17 	ldw	r2,-31956(gp)
 803fd0c:	d0e0a317 	ldw	r3,-32116(gp)
 803fd10:	10c00915 	stw	r3,36(r2)
         return(cachedRoute->ifp); /* net to send on */
 803fd14:	d0a0cb17 	ldw	r2,-31956(gp)
 803fd18:	10800e17 	ldw	r2,56(r2)
 803fd1c:	00005006 	br	803fe60 <iproute+0x1b8>
      }
   }

   rtp = rt_lookup(host);
 803fd20:	e13ffc17 	ldw	r4,-16(fp)
 803fd24:	80430100 	call	8043010 <rt_lookup>
 803fd28:	e0bffd15 	stw	r2,-12(fp)
   if(rtp)
 803fd2c:	e0bffd17 	ldw	r2,-12(fp)
 803fd30:	10000926 	beq	r2,zero,803fd58 <iproute+0xb0>
   {
      cachedRoute = rtp;
 803fd34:	e0bffd17 	ldw	r2,-12(fp)
 803fd38:	d0a0cb15 	stw	r2,-31956(gp)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
 803fd3c:	e0bffd17 	ldw	r2,-12(fp)
 803fd40:	10c00617 	ldw	r3,24(r2)
 803fd44:	e0bffb17 	ldw	r2,-20(fp)
 803fd48:	10c00015 	stw	r3,0(r2)
      return(rtp->ifp);             /* return pointer to net */
 803fd4c:	e0bffd17 	ldw	r2,-12(fp)
 803fd50:	10800e17 	ldw	r2,56(r2)
 803fd54:	00004206 	br	803fe60 <iproute+0x1b8>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
 803fd58:	008201b4 	movhi	r2,2054
 803fd5c:	10bd1b17 	ldw	r2,-2964(r2)
 803fd60:	e0bffe15 	stw	r2,-8(fp)
   i = 0;
 803fd64:	e03fff15 	stw	zero,-4(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 803fd68:	00002406 	br	803fdfc <iproute+0x154>
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 803fd6c:	e0bffe17 	ldw	r2,-8(fp)
 803fd70:	10800c17 	ldw	r2,48(r2)
 803fd74:	10001b26 	beq	r2,zero,803fde4 <iproute+0x13c>
         (ifp->n_ipaddr != 0) && 
 803fd78:	e0bffe17 	ldw	r2,-8(fp)
 803fd7c:	10800a17 	ldw	r2,40(r2)
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 803fd80:	10001826 	beq	r2,zero,803fde4 <iproute+0x13c>
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
 803fd84:	e0bffe17 	ldw	r2,-8(fp)
 803fd88:	10c00a17 	ldw	r3,40(r2)
 803fd8c:	e0bffc17 	ldw	r2,-16(fp)
 803fd90:	1886f03a 	xor	r3,r3,r2
 803fd94:	e0bffe17 	ldw	r2,-8(fp)
 803fd98:	10800c17 	ldw	r2,48(r2)
 803fd9c:	1884703a 	and	r2,r3,r2
         (ifp->n_ipaddr != 0) && 
 803fda0:	1000101e 	bne	r2,zero,803fde4 <iproute+0x13c>
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
 803fda4:	00800044 	movi	r2,1
 803fda8:	d8800015 	stw	r2,0(sp)
 803fdac:	e1ffff17 	ldw	r7,-4(fp)
 803fdb0:	e1bffc17 	ldw	r6,-16(fp)
 803fdb4:	017fffc4 	movi	r5,-1
 803fdb8:	e13ffc17 	ldw	r4,-16(fp)
 803fdbc:	80431640 	call	8043164 <add_route>
 803fdc0:	d0a0cb15 	stw	r2,-31956(gp)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
 803fdc4:	d0a0cb17 	ldw	r2,-31956(gp)
 803fdc8:	1000011e 	bne	r2,zero,803fdd0 <iproute+0x128>
            dtrap();
 803fdcc:	802c3fc0 	call	802c3fc <dtrap>
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
 803fdd0:	e0bffb17 	ldw	r2,-20(fp)
 803fdd4:	e0fffc17 	ldw	r3,-16(fp)
 803fdd8:	10c00015 	stw	r3,0(r2)
         return ifp;
 803fddc:	e0bffe17 	ldw	r2,-8(fp)
 803fde0:	00001f06 	br	803fe60 <iproute+0x1b8>
   for(; ifp; ifp = ifp->n_next, i++)
 803fde4:	e0bffe17 	ldw	r2,-8(fp)
 803fde8:	10800017 	ldw	r2,0(r2)
 803fdec:	e0bffe15 	stw	r2,-8(fp)
 803fdf0:	e0bfff17 	ldw	r2,-4(fp)
 803fdf4:	10800044 	addi	r2,r2,1
 803fdf8:	e0bfff15 	stw	r2,-4(fp)
 803fdfc:	e0bffe17 	ldw	r2,-8(fp)
 803fe00:	103fda1e 	bne	r2,zero,803fd6c <iproute+0xc4>
#endif   /* IP_LOOPBACK */

   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
 803fe04:	008201b4 	movhi	r2,2054
 803fe08:	10bd1b17 	ldw	r2,-2964(r2)
 803fe0c:	e0bffe15 	stw	r2,-8(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
 803fe10:	00000c06 	br	803fe44 <iproute+0x19c>
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 803fe14:	e0bffe17 	ldw	r2,-8(fp)
 803fe18:	10800d17 	ldw	r2,52(r2)
 803fe1c:	10000626 	beq	r2,zero,803fe38 <iproute+0x190>
      {
         *hop1 = ifp->n_defgw;
 803fe20:	e0bffe17 	ldw	r2,-8(fp)
 803fe24:	10c00d17 	ldw	r3,52(r2)
 803fe28:	e0bffb17 	ldw	r2,-20(fp)
 803fe2c:	10c00015 	stw	r3,0(r2)
         return ifp;
 803fe30:	e0bffe17 	ldw	r2,-8(fp)
 803fe34:	00000a06 	br	803fe60 <iproute+0x1b8>
   for(; ifp; ifp = ifp->n_next)
 803fe38:	e0bffe17 	ldw	r2,-8(fp)
 803fe3c:	10800017 	ldw	r2,0(r2)
 803fe40:	e0bffe15 	stw	r2,-8(fp)
 803fe44:	e0bffe17 	ldw	r2,-8(fp)
 803fe48:	103ff21e 	bne	r2,zero,803fe14 <iproute+0x16c>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
 803fe4c:	e0bffb17 	ldw	r2,-20(fp)
 803fe50:	e0fffc17 	ldw	r3,-16(fp)
 803fe54:	10c00015 	stw	r3,0(r2)
   return((NET)(netlist.q_head));
 803fe58:	008201b4 	movhi	r2,2054
 803fe5c:	10bd1b17 	ldw	r2,-2964(r2)
#endif   /* STRICT_SUBNETTING */
}
 803fe60:	e037883a 	mov	sp,fp
 803fe64:	dfc00117 	ldw	ra,4(sp)
 803fe68:	df000017 	ldw	fp,0(sp)
 803fe6c:	dec00204 	addi	sp,sp,8
 803fe70:	f800283a 	ret

0803fe74 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 803fe74:	defffb04 	addi	sp,sp,-20
 803fe78:	dfc00415 	stw	ra,16(sp)
 803fe7c:	df000315 	stw	fp,12(sp)
 803fe80:	df000304 	addi	fp,sp,12
 803fe84:	e13ffd15 	stw	r4,-12(fp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 803fe88:	e0bffd17 	ldw	r2,-12(fp)
 803fe8c:	10800417 	ldw	r2,16(r2)
 803fe90:	e0fffd17 	ldw	r3,-12(fp)
 803fe94:	19000317 	ldw	r4,12(r3)
 803fe98:	e0fffd17 	ldw	r3,-12(fp)
 803fe9c:	18c00117 	ldw	r3,4(r3)
 803fea0:	20c7c83a 	sub	r3,r4,r3
 803fea4:	10c5883a 	add	r2,r2,r3
 803fea8:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 803feac:	01000084 	movi	r4,2
 803feb0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
 803feb4:	e0bfff17 	ldw	r2,-4(fp)
 803feb8:	1009883a 	mov	r4,r2
 803febc:	802b8840 	call	802b884 <pk_alloc>
 803fec0:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 803fec4:	01000084 	movi	r4,2
 803fec8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (np == NULL)
 803fecc:	e0bffe17 	ldw	r2,-8(fp)
 803fed0:	1000061e 	bne	r2,zero,803feec <ip_copypkt+0x78>
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
 803fed4:	e17fff17 	ldw	r5,-4(fp)
 803fed8:	01020174 	movhi	r4,2053
 803fedc:	210d5704 	addi	r4,r4,13660
 803fee0:	800325c0 	call	800325c <printf>
#endif
      return NULL;
 803fee4:	0005883a 	mov	r2,zero
 803fee8:	00002806 	br	803ff8c <ip_copypkt+0x118>
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
 803feec:	e0bffe17 	ldw	r2,-8(fp)
 803fef0:	10c00117 	ldw	r3,4(r2)
 803fef4:	e0bffd17 	ldw	r2,-12(fp)
 803fef8:	10800117 	ldw	r2,4(r2)
 803fefc:	e13fff17 	ldw	r4,-4(fp)
 803ff00:	200d883a 	mov	r6,r4
 803ff04:	100b883a 	mov	r5,r2
 803ff08:	1809883a 	mov	r4,r3
 803ff0c:	8002ea40 	call	8002ea4 <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
 803ff10:	e0bffe17 	ldw	r2,-8(fp)
 803ff14:	10800117 	ldw	r2,4(r2)
 803ff18:	e0fffd17 	ldw	r3,-12(fp)
 803ff1c:	19000317 	ldw	r4,12(r3)
 803ff20:	e0fffd17 	ldw	r3,-12(fp)
 803ff24:	18c00117 	ldw	r3,4(r3)
 803ff28:	20c7c83a 	sub	r3,r4,r3
 803ff2c:	10c7883a 	add	r3,r2,r3
 803ff30:	e0bffe17 	ldw	r2,-8(fp)
 803ff34:	10c00315 	stw	r3,12(r2)
   np->nb_plen = p->nb_plen;
 803ff38:	e0bffd17 	ldw	r2,-12(fp)
 803ff3c:	10c00417 	ldw	r3,16(r2)
 803ff40:	e0bffe17 	ldw	r2,-8(fp)
 803ff44:	10c00415 	stw	r3,16(r2)
   np->net = p->net;
 803ff48:	e0bffd17 	ldw	r2,-12(fp)
 803ff4c:	10c00617 	ldw	r3,24(r2)
 803ff50:	e0bffe17 	ldw	r2,-8(fp)
 803ff54:	10c00615 	stw	r3,24(r2)
   np->fhost = p->fhost;
 803ff58:	e0bffd17 	ldw	r2,-12(fp)
 803ff5c:	10c00717 	ldw	r3,28(r2)
 803ff60:	e0bffe17 	ldw	r2,-8(fp)
 803ff64:	10c00715 	stw	r3,28(r2)
   np->type = p->type;
 803ff68:	e0bffd17 	ldw	r2,-12(fp)
 803ff6c:	10c0080b 	ldhu	r3,32(r2)
 803ff70:	e0bffe17 	ldw	r2,-8(fp)
 803ff74:	10c0080d 	sth	r3,32(r2)
   np->nb_tstamp = p->nb_tstamp;
 803ff78:	e0bffd17 	ldw	r2,-12(fp)
 803ff7c:	10c00517 	ldw	r3,20(r2)
 803ff80:	e0bffe17 	ldw	r2,-8(fp)
 803ff84:	10c00515 	stw	r3,20(r2)

   /* return pointer to the copy */
   return np;
 803ff88:	e0bffe17 	ldw	r2,-8(fp)
}
 803ff8c:	e037883a 	mov	sp,fp
 803ff90:	dfc00117 	ldw	ra,4(sp)
 803ff94:	df000017 	ldw	fp,0(sp)
 803ff98:	dec00204 	addi	sp,sp,8
 803ff9c:	f800283a 	ret

0803ffa0 <ip_reasm_match_frag_with_ire>:
packet being processed.  If no such entry is found, this function returns 
NULL.
*/

IREP ip_reasm_match_frag_with_ire (struct ip * pip)
{
 803ffa0:	defffa04 	addi	sp,sp,-24
 803ffa4:	df000515 	stw	fp,20(sp)
 803ffa8:	df000504 	addi	fp,sp,20
 803ffac:	e13ffb15 	stw	r4,-20(fp)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
 803ffb0:	e0bffb17 	ldw	r2,-20(fp)
 803ffb4:	10800317 	ldw	r2,12(r2)
 803ffb8:	e0bffe15 	stw	r2,-8(fp)
   dest = pip->ip_dest;
 803ffbc:	e0bffb17 	ldw	r2,-20(fp)
 803ffc0:	10800417 	ldw	r2,16(r2)
 803ffc4:	e0bffd15 	stw	r2,-12(fp)
   prot = pip->ip_prot;
 803ffc8:	e0bffb17 	ldw	r2,-20(fp)
 803ffcc:	10800243 	ldbu	r2,9(r2)
 803ffd0:	e0bffcc5 	stb	r2,-13(fp)
   id = pip->ip_id;
 803ffd4:	e0bffb17 	ldw	r2,-20(fp)
 803ffd8:	1080010b 	ldhu	r2,4(r2)
 803ffdc:	e0bffc0d 	sth	r2,-16(fp)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 803ffe0:	d0a0c317 	ldw	r2,-31988(gp)
 803ffe4:	e0bfff15 	stw	r2,-4(fp)
 803ffe8:	00001706 	br	8040048 <ip_reasm_match_frag_with_ire+0xa8>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 803ffec:	e0bfff17 	ldw	r2,-4(fp)
 803fff0:	10800117 	ldw	r2,4(r2)
 803fff4:	e0fffe17 	ldw	r3,-8(fp)
 803fff8:	1880101e 	bne	r3,r2,804003c <ip_reasm_match_frag_with_ire+0x9c>
 803fffc:	e0bfff17 	ldw	r2,-4(fp)
 8040000:	10800217 	ldw	r2,8(r2)
 8040004:	e0fffd17 	ldw	r3,-12(fp)
 8040008:	18800c1e 	bne	r3,r2,804003c <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
 804000c:	e0bfff17 	ldw	r2,-4(fp)
 8040010:	10800383 	ldbu	r2,14(r2)
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 8040014:	e0fffcc3 	ldbu	r3,-13(fp)
 8040018:	10803fcc 	andi	r2,r2,255
 804001c:	1880071e 	bne	r3,r2,804003c <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
 8040020:	e0bfff17 	ldw	r2,-4(fp)
 8040024:	1080030b 	ldhu	r2,12(r2)
 8040028:	e0fffc0b 	ldhu	r3,-16(fp)
 804002c:	10bfffcc 	andi	r2,r2,65535
 8040030:	1880021e 	bne	r3,r2,804003c <ip_reasm_match_frag_with_ire+0x9c>
         {
         return tmpp; /* we've found a match */
 8040034:	e0bfff17 	ldw	r2,-4(fp)
 8040038:	00000606 	br	8040054 <ip_reasm_match_frag_with_ire+0xb4>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 804003c:	e0bfff17 	ldw	r2,-4(fp)
 8040040:	10800017 	ldw	r2,0(r2)
 8040044:	e0bfff15 	stw	r2,-4(fp)
 8040048:	e0bfff17 	ldw	r2,-4(fp)
 804004c:	103fe71e 	bne	r2,zero,803ffec <ip_reasm_match_frag_with_ire+0x4c>
         }
      }

   /* no match found */
   return NULL;
 8040050:	0005883a 	mov	r2,zero
}
 8040054:	e037883a 	mov	sp,fp
 8040058:	df000017 	ldw	fp,0(sp)
 804005c:	dec00104 	addi	sp,sp,4
 8040060:	f800283a 	ret

08040064 <ip_reasm_determine_type_of_frag>:
OUTPUT: One of the various IP_FRAGTYPE values (IP_CP, IP_FF, IP_MF, 
or IP_LF)
*/

IP_FRAGTYPE ip_reasm_determine_type_of_frag (struct ip * pip)
{
 8040064:	defffc04 	addi	sp,sp,-16
 8040068:	df000315 	stw	fp,12(sp)
 804006c:	df000304 	addi	fp,sp,12
 8040070:	e13ffd15 	stw	r4,-12(fp)
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
 8040074:	e0bffd17 	ldw	r2,-12(fp)
 8040078:	1080018b 	ldhu	r2,6(r2)
 804007c:	10bfffcc 	andi	r2,r2,65535
 8040080:	1004d23a 	srli	r2,r2,8
 8040084:	10bfffcc 	andi	r2,r2,65535
 8040088:	10c03fcc 	andi	r3,r2,255
 804008c:	e0bffd17 	ldw	r2,-12(fp)
 8040090:	1080018b 	ldhu	r2,6(r2)
 8040094:	10bfffcc 	andi	r2,r2,65535
 8040098:	1004923a 	slli	r2,r2,8
 804009c:	10bfffcc 	andi	r2,r2,65535
 80400a0:	1884b03a 	or	r2,r3,r2
 80400a4:	1005d37a 	srai	r2,r2,13
 80400a8:	1080004c 	andi	r2,r2,1
 80400ac:	e0bffe8d 	sth	r2,-6(fp)
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
 80400b0:	e0bffd17 	ldw	r2,-12(fp)
 80400b4:	1080018b 	ldhu	r2,6(r2)
 80400b8:	10bfffcc 	andi	r2,r2,65535
 80400bc:	1004d23a 	srli	r2,r2,8
 80400c0:	1007883a 	mov	r3,r2
 80400c4:	e0bffd17 	ldw	r2,-12(fp)
 80400c8:	1080018b 	ldhu	r2,6(r2)
 80400cc:	10bfffcc 	andi	r2,r2,65535
 80400d0:	1004923a 	slli	r2,r2,8
 80400d4:	1884b03a 	or	r2,r3,r2
 80400d8:	1087ffcc 	andi	r2,r2,8191
 80400dc:	e0bffe0d 	sth	r2,-8(fp)

  if (mf == 0)
 80400e0:	e0bffe8b 	ldhu	r2,-6(fp)
 80400e4:	1000071e 	bne	r2,zero,8040104 <ip_reasm_determine_type_of_frag+0xa0>
     {
     if (foff == 0) {rc = IP_CP;}
 80400e8:	e0bffe0b 	ldhu	r2,-8(fp)
 80400ec:	1000021e 	bne	r2,zero,80400f8 <ip_reasm_determine_type_of_frag+0x94>
 80400f0:	e03fff15 	stw	zero,-4(fp)
 80400f4:	00000a06 	br	8040120 <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_LF;}
 80400f8:	00800144 	movi	r2,5
 80400fc:	e0bfff15 	stw	r2,-4(fp)
 8040100:	00000706 	br	8040120 <ip_reasm_determine_type_of_frag+0xbc>
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
 8040104:	e0bffe0b 	ldhu	r2,-8(fp)
 8040108:	1000031e 	bne	r2,zero,8040118 <ip_reasm_determine_type_of_frag+0xb4>
 804010c:	00800044 	movi	r2,1
 8040110:	e0bfff15 	stw	r2,-4(fp)
 8040114:	00000206 	br	8040120 <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_MF;}
 8040118:	008000c4 	movi	r2,3
 804011c:	e0bfff15 	stw	r2,-4(fp)
     }

  return rc;
 8040120:	e0bfff17 	ldw	r2,-4(fp)
}
 8040124:	e037883a 	mov	sp,fp
 8040128:	df000017 	ldw	fp,0(sp)
 804012c:	dec00104 	addi	sp,sp,4
 8040130:	f800283a 	ret

08040134 <ip_reasm_check_mem_useage>:
OUTPUT: ENP_RESOURCE, if the increment request can't be allowed; 
otherwise it returns IPREASM_OK.
*/

int ip_reasm_check_mem_useage (u_short increment)
{
 8040134:	defffe04 	addi	sp,sp,-8
 8040138:	df000115 	stw	fp,4(sp)
 804013c:	df000104 	addi	fp,sp,4
 8040140:	2005883a 	mov	r2,r4
 8040144:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 8040148:	d0a0c217 	ldw	r2,-31992(gp)
 804014c:	00c001b4 	movhi	r3,6
 8040150:	1880052e 	bgeu	r3,r2,8040168 <ip_reasm_check_mem_useage+0x34>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 8040154:	008201b4 	movhi	r2,2054
 8040158:	10bd3617 	ldw	r2,-2856(r2)
 804015c:	10c00044 	addi	r3,r2,1
 8040160:	008201b4 	movhi	r2,2054
 8040164:	10fd3615 	stw	r3,-2856(r2)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 8040168:	d0e0c217 	ldw	r3,-31992(gp)
 804016c:	008001b4 	movhi	r2,6
 8040170:	18800526 	beq	r3,r2,8040188 <ip_reasm_check_mem_useage+0x54>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
 8040174:	e0ffff0b 	ldhu	r3,-4(fp)
 8040178:	d0a0c217 	ldw	r2,-31992(gp)
 804017c:	1885883a 	add	r2,r3,r2
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 8040180:	00c001b4 	movhi	r3,6
 8040184:	1880072e 	bgeu	r3,r2,80401a4 <ip_reasm_check_mem_useage+0x70>
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
 8040188:	008201b4 	movhi	r2,2054
 804018c:	10bd3717 	ldw	r2,-2852(r2)
 8040190:	10c00044 	addi	r3,r2,1
 8040194:	008201b4 	movhi	r2,2054
 8040198:	10fd3715 	stw	r3,-2852(r2)
      return ENP_RESOURCE;
 804019c:	00bffa84 	movi	r2,-22
 80401a0:	00000106 	br	80401a8 <ip_reasm_check_mem_useage+0x74>
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
 80401a4:	0005883a 	mov	r2,zero
}
 80401a8:	e037883a 	mov	sp,fp
 80401ac:	df000017 	ldw	fp,0(sp)
 80401b0:	dec00104 	addi	sp,sp,4
 80401b4:	f800283a 	ret

080401b8 <ip_reasm_incr_mem_useage>:
system exceeding the maximum limit or if the system has already exceeded 
the prespecified limit for memory useage; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
 80401b8:	defffe04 	addi	sp,sp,-8
 80401bc:	df000115 	stw	fp,4(sp)
 80401c0:	df000104 	addi	fp,sp,4
 80401c4:	2005883a 	mov	r2,r4
 80401c8:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 80401cc:	d0a0c217 	ldw	r2,-31992(gp)
 80401d0:	00c001b4 	movhi	r3,6
 80401d4:	1880072e 	bgeu	r3,r2,80401f4 <ip_reasm_incr_mem_useage+0x3c>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 80401d8:	008201b4 	movhi	r2,2054
 80401dc:	10bd3617 	ldw	r2,-2856(r2)
 80401e0:	10c00044 	addi	r3,r2,1
 80401e4:	008201b4 	movhi	r2,2054
 80401e8:	10fd3615 	stw	r3,-2856(r2)
      return ENP_RESOURCE;
 80401ec:	00bffa84 	movi	r2,-22
 80401f0:	00001106 	br	8040238 <ip_reasm_incr_mem_useage+0x80>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 80401f4:	e0ffff0b 	ldhu	r3,-4(fp)
 80401f8:	d0a0c217 	ldw	r2,-31992(gp)
 80401fc:	1885883a 	add	r2,r3,r2
 8040200:	00c001b4 	movhi	r3,6
 8040204:	1880072e 	bgeu	r3,r2,8040224 <ip_reasm_incr_mem_useage+0x6c>
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
 8040208:	008201b4 	movhi	r2,2054
 804020c:	10bd3817 	ldw	r2,-2848(r2)
 8040210:	10c00044 	addi	r3,r2,1
 8040214:	008201b4 	movhi	r2,2054
 8040218:	10fd3815 	stw	r3,-2848(r2)
      return ENP_RESOURCE;
 804021c:	00bffa84 	movi	r2,-22
 8040220:	00000506 	br	8040238 <ip_reasm_incr_mem_useage+0x80>
   }

   ipr_curr_mem += increment;
 8040224:	e0ffff0b 	ldhu	r3,-4(fp)
 8040228:	d0a0c217 	ldw	r2,-31992(gp)
 804022c:	1885883a 	add	r2,r3,r2
 8040230:	d0a0c215 	stw	r2,-31992(gp)

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
 8040234:	0005883a 	mov	r2,zero
}
 8040238:	e037883a 	mov	sp,fp
 804023c:	df000017 	ldw	fp,0(sp)
 8040240:	dec00104 	addi	sp,sp,4
 8040244:	f800283a 	ret

08040248 <ip_reasm_decr_mem_useage>:
exceeded the prespecified limit for memory useage; otherwise, it returns 
IPREASM_OK.
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
 8040248:	defffe04 	addi	sp,sp,-8
 804024c:	df000115 	stw	fp,4(sp)
 8040250:	df000104 	addi	fp,sp,4
 8040254:	2005883a 	mov	r2,r4
 8040258:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 804025c:	d0a0c217 	ldw	r2,-31992(gp)
 8040260:	00c001b4 	movhi	r3,6
 8040264:	1880072e 	bgeu	r3,r2,8040284 <ip_reasm_decr_mem_useage+0x3c>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 8040268:	008201b4 	movhi	r2,2054
 804026c:	10bd3617 	ldw	r2,-2856(r2)
 8040270:	10c00044 	addi	r3,r2,1
 8040274:	008201b4 	movhi	r2,2054
 8040278:	10fd3615 	stw	r3,-2856(r2)
      return ENP_RESOURCE;
 804027c:	00bffa84 	movi	r2,-22
 8040280:	00000f06 	br	80402c0 <ip_reasm_decr_mem_useage+0x78>
   }
   if (ipr_curr_mem < decrement)
 8040284:	e0bfff0b 	ldhu	r2,-4(fp)
 8040288:	d0e0c217 	ldw	r3,-31992(gp)
 804028c:	1880072e 	bgeu	r3,r2,80402ac <ip_reasm_decr_mem_useage+0x64>
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 8040290:	008201b4 	movhi	r2,2054
 8040294:	10bd3917 	ldw	r2,-2844(r2)
 8040298:	10c00044 	addi	r3,r2,1
 804029c:	008201b4 	movhi	r2,2054
 80402a0:	10fd3915 	stw	r3,-2844(r2)
      return ENP_RESOURCE;
 80402a4:	00bffa84 	movi	r2,-22
 80402a8:	00000506 	br	80402c0 <ip_reasm_decr_mem_useage+0x78>
   }

   ipr_curr_mem -= decrement;
 80402ac:	d0e0c217 	ldw	r3,-31992(gp)
 80402b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80402b4:	1885c83a 	sub	r2,r3,r2
 80402b8:	d0a0c215 	stw	r2,-31992(gp)

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
 80402bc:	0005883a 	mov	r2,zero
}
 80402c0:	e037883a 	mov	sp,fp
 80402c4:	df000017 	ldw	fp,0(sp)
 80402c8:	dec00104 	addi	sp,sp,4
 80402cc:	f800283a 	ret

080402d0 <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 80402d0:	defff704 	addi	sp,sp,-36
 80402d4:	dfc00815 	stw	ra,32(sp)
 80402d8:	df000715 	stw	fp,28(sp)
 80402dc:	df000704 	addi	fp,sp,28
 80402e0:	e13ff915 	stw	r4,-28(fp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 80402e4:	e0bff917 	ldw	r2,-28(fp)
 80402e8:	10800217 	ldw	r2,8(r2)
 80402ec:	10802204 	addi	r2,r2,136
 80402f0:	10bfffcc 	andi	r2,r2,65535
 80402f4:	1009883a 	mov	r4,r2
 80402f8:	80401340 	call	8040134 <ip_reasm_check_mem_useage>
 80402fc:	e0bfff15 	stw	r2,-4(fp)
 8040300:	e0bfff17 	ldw	r2,-4(fp)
 8040304:	10000d26 	beq	r2,zero,804033c <ip_reasm_process_first_fragment+0x6c>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8040308:	01000084 	movi	r4,2
 804030c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free (p);
 8040310:	e13ff917 	ldw	r4,-28(fp)
 8040314:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040318:	01000084 	movi	r4,2
 804031c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 8040320:	008201b4 	movhi	r2,2054
 8040324:	10bd2f17 	ldw	r2,-2884(r2)
 8040328:	10c00044 	addi	r3,r2,1
 804032c:	008201b4 	movhi	r2,2054
 8040330:	10fd2f15 	stw	r3,-2884(r2)
      return rc;
 8040334:	e0bfff17 	ldw	r2,-4(fp)
 8040338:	00008a06 	br	8040564 <ip_reasm_process_first_fragment+0x294>
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
 804033c:	01002204 	movi	r4,136
 8040340:	802cf5c0 	call	802cf5c <npalloc>
 8040344:	e0bffe15 	stw	r2,-8(fp)
   if (irep == 0) 
 8040348:	e0bffe17 	ldw	r2,-8(fp)
 804034c:	10000d1e 	bne	r2,zero,8040384 <ip_reasm_process_first_fragment+0xb4>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8040350:	01000084 	movi	r4,2
 8040354:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free (p);
 8040358:	e13ff917 	ldw	r4,-28(fp)
 804035c:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040360:	01000084 	movi	r4,2
 8040364:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 8040368:	008201b4 	movhi	r2,2054
 804036c:	10bd2f17 	ldw	r2,-2884(r2)
 8040370:	10c00044 	addi	r3,r2,1
 8040374:	008201b4 	movhi	r2,2054
 8040378:	10fd2f15 	stw	r3,-2884(r2)
      return ENP_RESOURCE;
 804037c:	00bffa84 	movi	r2,-22
 8040380:	00007806 	br	8040564 <ip_reasm_process_first_fragment+0x294>
   }

   pip = ip_head(p);
 8040384:	e0bff917 	ldw	r2,-28(fp)
 8040388:	10800317 	ldw	r2,12(r2)
 804038c:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen(pip);
 8040390:	e0bffd17 	ldw	r2,-12(fp)
 8040394:	10800003 	ldbu	r2,0(r2)
 8040398:	10803fcc 	andi	r2,r2,255
 804039c:	100490ba 	slli	r2,r2,2
 80403a0:	10800f0c 	andi	r2,r2,60
 80403a4:	e0bffcc5 	stb	r2,-13(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 80403a8:	e13ffd17 	ldw	r4,-12(fp)
 80403ac:	80400640 	call	8040064 <ip_reasm_determine_type_of_frag>
 80403b0:	e0bffb15 	stw	r2,-20(fp)
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 80403b4:	e0bffd17 	ldw	r2,-12(fp)
 80403b8:	1080018b 	ldhu	r2,6(r2)
 80403bc:	10bfffcc 	andi	r2,r2,65535
 80403c0:	1004d23a 	srli	r2,r2,8
 80403c4:	10bfffcc 	andi	r2,r2,65535
 80403c8:	10c03fcc 	andi	r3,r2,255
 80403cc:	e0bffd17 	ldw	r2,-12(fp)
 80403d0:	1080018b 	ldhu	r2,6(r2)
 80403d4:	10bfffcc 	andi	r2,r2,65535
 80403d8:	1004923a 	slli	r2,r2,8
 80403dc:	10bfffcc 	andi	r2,r2,65535
 80403e0:	1884b03a 	or	r2,r3,r2
 80403e4:	100490fa 	slli	r2,r2,3
 80403e8:	e0bffa8d 	sth	r2,-22(fp)
   total_len = ntohs(pip->ip_len);
 80403ec:	e0bffd17 	ldw	r2,-12(fp)
 80403f0:	1080008b 	ldhu	r2,2(r2)
 80403f4:	10bfffcc 	andi	r2,r2,65535
 80403f8:	1004d23a 	srli	r2,r2,8
 80403fc:	1007883a 	mov	r3,r2
 8040400:	e0bffd17 	ldw	r2,-12(fp)
 8040404:	1080008b 	ldhu	r2,2(r2)
 8040408:	10bfffcc 	andi	r2,r2,65535
 804040c:	1004923a 	slli	r2,r2,8
 8040410:	1884b03a 	or	r2,r3,r2
 8040414:	e0bffa0d 	sth	r2,-24(fp)

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
 8040418:	e0bffd17 	ldw	r2,-12(fp)
 804041c:	10c00317 	ldw	r3,12(r2)
 8040420:	e0bffe17 	ldw	r2,-8(fp)
 8040424:	10c00115 	stw	r3,4(r2)
   irep->dest = pip->ip_dest;
 8040428:	e0bffd17 	ldw	r2,-12(fp)
 804042c:	10c00417 	ldw	r3,16(r2)
 8040430:	e0bffe17 	ldw	r2,-8(fp)
 8040434:	10c00215 	stw	r3,8(r2)
   irep->prot = pip->ip_prot;
 8040438:	e0bffd17 	ldw	r2,-12(fp)
 804043c:	10c00243 	ldbu	r3,9(r2)
 8040440:	e0bffe17 	ldw	r2,-8(fp)
 8040444:	10c00385 	stb	r3,14(r2)
   irep->id = pip->ip_id;
 8040448:	e0bffd17 	ldw	r2,-12(fp)
 804044c:	10c0010b 	ldhu	r3,4(r2)
 8040450:	e0bffe17 	ldw	r2,-8(fp)
 8040454:	10c0030d 	sth	r3,12(r2)
   if (ftype == IP_LF)
 8040458:	e0bffb17 	ldw	r2,-20(fp)
 804045c:	10800158 	cmpnei	r2,r2,5
 8040460:	10000a1e 	bne	r2,zero,804048c <ip_reasm_process_first_fragment+0x1bc>
      {
      irep->length = frag_offset + (total_len - iphlen);
 8040464:	e0bffcc3 	ldbu	r2,-13(fp)
 8040468:	e0fffa0b 	ldhu	r3,-24(fp)
 804046c:	1885c83a 	sub	r2,r3,r2
 8040470:	1007883a 	mov	r3,r2
 8040474:	e0bffa8b 	ldhu	r2,-22(fp)
 8040478:	10c5883a 	add	r2,r2,r3
 804047c:	1007883a 	mov	r3,r2
 8040480:	e0bffe17 	ldw	r2,-8(fp)
 8040484:	10c0040d 	sth	r3,16(r2)
 8040488:	00000a06 	br	80404b4 <ip_reasm_process_first_fragment+0x1e4>
      }
   else if (ftype == IP_FF)
 804048c:	e0bffb17 	ldw	r2,-20(fp)
 8040490:	10800058 	cmpnei	r2,r2,1
 8040494:	1000071e 	bne	r2,zero,80404b4 <ip_reasm_process_first_fragment+0x1e4>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
 8040498:	e0bff917 	ldw	r2,-28(fp)
 804049c:	10c00117 	ldw	r3,4(r2)
 80404a0:	e0bffe17 	ldw	r2,-8(fp)
 80404a4:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 80404a8:	e0bffe17 	ldw	r2,-8(fp)
 80404ac:	e0fffd17 	ldw	r3,-12(fp)
 80404b0:	10c02015 	stw	r3,128(r2)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
 80404b4:	e0bffcc3 	ldbu	r2,-13(fp)
 80404b8:	e0fffa0b 	ldhu	r3,-24(fp)
 80404bc:	1885c83a 	sub	r2,r3,r2
 80404c0:	1007883a 	mov	r3,r2
 80404c4:	e0bffe17 	ldw	r2,-8(fp)
 80404c8:	10c0048d 	sth	r3,18(r2)
   irep->age = 0;
 80404cc:	e0bffe17 	ldw	r2,-8(fp)
 80404d0:	10000515 	stw	zero,20(r2)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
 80404d4:	e0bffe17 	ldw	r2,-8(fp)
 80404d8:	10802103 	ldbu	r2,132(r2)
 80404dc:	10800054 	ori	r2,r2,1
 80404e0:	1007883a 	mov	r3,r2
 80404e4:	e0bffe17 	ldw	r2,-8(fp)
 80404e8:	10c02105 	stb	r3,132(r2)

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
 80404ec:	e0bffe17 	ldw	r2,-8(fp)
 80404f0:	e0fff917 	ldw	r3,-28(fp)
 80404f4:	10c00715 	stw	r3,28(r2)
   irep->rfq.frag_offset[0] = frag_offset;
 80404f8:	e0bffe17 	ldw	r2,-8(fp)
 80404fc:	e0fffa8b 	ldhu	r3,-22(fp)
 8040500:	10c0170d 	sth	r3,92(r2)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 8040504:	e0bff917 	ldw	r2,-28(fp)
 8040508:	10c00317 	ldw	r3,12(r2)
 804050c:	e0bffcc3 	ldbu	r2,-13(fp)
 8040510:	1887883a 	add	r3,r3,r2
 8040514:	e0bff917 	ldw	r2,-28(fp)
 8040518:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 804051c:	e0bff917 	ldw	r2,-28(fp)
 8040520:	10c00417 	ldw	r3,16(r2)
 8040524:	e0bffcc3 	ldbu	r2,-13(fp)
 8040528:	1887c83a 	sub	r3,r3,r2
 804052c:	e0bff917 	ldw	r2,-28(fp)
 8040530:	10c00415 	stw	r3,16(r2)

   /* insert at start of global IRE list */
   irep->next = h_ireq;
 8040534:	d0e0c317 	ldw	r3,-31988(gp)
 8040538:	e0bffe17 	ldw	r2,-8(fp)
 804053c:	10c00015 	stw	r3,0(r2)
   h_ireq = irep;
 8040540:	e0bffe17 	ldw	r2,-8(fp)
 8040544:	d0a0c315 	stw	r2,-31988(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 8040548:	e0bff917 	ldw	r2,-28(fp)
 804054c:	10800217 	ldw	r2,8(r2)
 8040550:	10802204 	addi	r2,r2,136
 8040554:	10bfffcc 	andi	r2,r2,65535
 8040558:	1009883a 	mov	r4,r2
 804055c:	80401b80 	call	80401b8 <ip_reasm_incr_mem_useage>

   return IPREASM_OK;
 8040560:	0005883a 	mov	r2,zero
}
 8040564:	e037883a 	mov	sp,fp
 8040568:	dfc00117 	ldw	ra,4(sp)
 804056c:	df000017 	ldw	fp,0(sp)
 8040570:	dec00204 	addi	sp,sp,8
 8040574:	f800283a 	ret

08040578 <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
 8040578:	defff904 	addi	sp,sp,-28
 804057c:	dfc00615 	stw	ra,24(sp)
 8040580:	df000515 	stw	fp,20(sp)
 8040584:	df000504 	addi	fp,sp,20
 8040588:	e13ffb15 	stw	r4,-20(fp)
   IREP irep;
   struct ip * pip;
   int rc1, rc2;

   pip = ip_head(p);
 804058c:	e0bffb17 	ldw	r2,-20(fp)
 8040590:	10800317 	ldw	r2,12(r2)
 8040594:	e0bfff15 	stw	r2,-4(fp)

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
 8040598:	e13fff17 	ldw	r4,-4(fp)
 804059c:	803ffa00 	call	803ffa0 <ip_reasm_match_frag_with_ire>
 80405a0:	e0bffe15 	stw	r2,-8(fp)

   if (!irep)
 80405a4:	e0bffe17 	ldw	r2,-8(fp)
 80405a8:	1000071e 	bne	r2,zero,80405c8 <ip_reassm+0x50>
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
 80405ac:	e13ffb17 	ldw	r4,-20(fp)
 80405b0:	80402d00 	call	80402d0 <ip_reasm_process_first_fragment>
 80405b4:	e0bffc15 	stw	r2,-16(fp)
 80405b8:	e0bffc17 	ldw	r2,-16(fp)
 80405bc:	10000a26 	beq	r2,zero,80405e8 <ip_reassm+0x70>
      {
         /* ip_reasm_process_first_fragment () will free the packet */
         return rc1;
 80405c0:	e0bffc17 	ldw	r2,-16(fp)
 80405c4:	00000906 	br	80405ec <ip_reassm+0x74>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 80405c8:	e17ffe17 	ldw	r5,-8(fp)
 80405cc:	e13ffb17 	ldw	r4,-20(fp)
 80405d0:	8040b540 	call	8040b54 <ip_reasm_process_subsequent_fragments>
 80405d4:	e0bffd15 	stw	r2,-12(fp)
 80405d8:	e0bffd17 	ldw	r2,-12(fp)
 80405dc:	10000226 	beq	r2,zero,80405e8 <ip_reassm+0x70>
      {
         /* ip_reasm_process_subsequent_fragments () has already deleted the IRE entry */
         return rc2;
 80405e0:	e0bffd17 	ldw	r2,-12(fp)
 80405e4:	00000106 	br	80405ec <ip_reassm+0x74>
      }
   }

   return IPREASM_OK;
 80405e8:	0005883a 	mov	r2,zero
}
 80405ec:	e037883a 	mov	sp,fp
 80405f0:	dfc00117 	ldw	ra,4(sp)
 80405f4:	df000017 	ldw	fp,0(sp)
 80405f8:	dec00204 	addi	sp,sp,8
 80405fc:	f800283a 	ret

08040600 <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
 8040600:	defff204 	addi	sp,sp,-56
 8040604:	dfc00d15 	stw	ra,52(sp)
 8040608:	df000c15 	stw	fp,48(sp)
 804060c:	df000c04 	addi	fp,sp,48
 8040610:	e13ff715 	stw	r4,-36(fp)
 8040614:	e17ff615 	stw	r5,-40(fp)
 8040618:	e1bff515 	stw	r6,-44(fp)
 804061c:	e1fff415 	stw	r7,-48(fp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 8040620:	e13ff617 	ldw	r4,-40(fp)
 8040624:	80410540 	call	8041054 <ip_reasm_find_ire>
 8040628:	10803fcc 	andi	r2,r2,255
 804062c:	10800060 	cmpeqi	r2,r2,1
 8040630:	10000d1e 	bne	r2,zero,8040668 <ip_reasm_compute_overlap+0x68>
      {
      ++ire_stats.bad_irep;
 8040634:	008201b4 	movhi	r2,2054
 8040638:	10bd3417 	ldw	r2,-2864(r2)
 804063c:	10c00044 	addi	r3,r2,1
 8040640:	008201b4 	movhi	r2,2054
 8040644:	10fd3415 	stw	r3,-2864(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8040648:	01000084 	movi	r4,2
 804064c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free (p);
 8040650:	e13ff717 	ldw	r4,-36(fp)
 8040654:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040658:	01000084 	movi	r4,2
 804065c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return IPREASM_DROP_FRAG_BAD_PARAM;
 8040660:	00800044 	movi	r2,1
 8040664:	00013606 	br	8040b40 <ip_reasm_compute_overlap+0x540>
      }

   jrip = ip_head(p);
 8040668:	e0bff717 	ldw	r2,-36(fp)
 804066c:	10800317 	ldw	r2,12(r2)
 8040670:	e0bffc15 	stw	r2,-16(fp)
   iphlen = ip_hlen (jrip);
 8040674:	e0bffc17 	ldw	r2,-16(fp)
 8040678:	10800003 	ldbu	r2,0(r2)
 804067c:	10803fcc 	andi	r2,r2,255
 8040680:	100490ba 	slli	r2,r2,2
 8040684:	10800f0c 	andi	r2,r2,60
 8040688:	e0bffbc5 	stb	r2,-17(fp)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 804068c:	e0bffc17 	ldw	r2,-16(fp)
 8040690:	1080018b 	ldhu	r2,6(r2)
 8040694:	10bfffcc 	andi	r2,r2,65535
 8040698:	1004d23a 	srli	r2,r2,8
 804069c:	10bfffcc 	andi	r2,r2,65535
 80406a0:	10c03fcc 	andi	r3,r2,255
 80406a4:	e0bffc17 	ldw	r2,-16(fp)
 80406a8:	1080018b 	ldhu	r2,6(r2)
 80406ac:	10bfffcc 	andi	r2,r2,65535
 80406b0:	1004923a 	slli	r2,r2,8
 80406b4:	10bfffcc 	andi	r2,r2,65535
 80406b8:	1884b03a 	or	r2,r3,r2
 80406bc:	100490fa 	slli	r2,r2,3
 80406c0:	e0bffe8d 	sth	r2,-6(fp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
 80406c4:	e0bffc17 	ldw	r2,-16(fp)
 80406c8:	1080008b 	ldhu	r2,2(r2)
 80406cc:	10bfffcc 	andi	r2,r2,65535
 80406d0:	1004d23a 	srli	r2,r2,8
 80406d4:	1007883a 	mov	r3,r2
 80406d8:	e0bffc17 	ldw	r2,-16(fp)
 80406dc:	1080008b 	ldhu	r2,2(r2)
 80406e0:	10bfffcc 	andi	r2,r2,65535
 80406e4:	1004923a 	slli	r2,r2,8
 80406e8:	1884b03a 	or	r2,r3,r2
 80406ec:	1007883a 	mov	r3,r2
 80406f0:	e0bffbc3 	ldbu	r2,-17(fp)
 80406f4:	1885c83a 	sub	r2,r3,r2
 80406f8:	1007883a 	mov	r3,r2
 80406fc:	e0bffe8b 	ldhu	r2,-6(fp)
 8040700:	10c5883a 	add	r2,r2,r3
 8040704:	10bfffc4 	addi	r2,r2,-1
 8040708:	e0bffe0d 	sth	r2,-8(fp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 804070c:	e0bff717 	ldw	r2,-36(fp)
 8040710:	10c00317 	ldw	r3,12(r2)
 8040714:	e0bffbc3 	ldbu	r2,-17(fp)
 8040718:	1887883a 	add	r3,r3,r2
 804071c:	e0bff717 	ldw	r2,-36(fp)
 8040720:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 8040724:	e0bff717 	ldw	r2,-36(fp)
 8040728:	10c00417 	ldw	r3,16(r2)
 804072c:	e0bffbc3 	ldbu	r2,-17(fp)
 8040730:	1887c83a 	sub	r3,r3,r2
 8040734:	e0bff717 	ldw	r2,-36(fp)
 8040738:	10c00415 	stw	r3,16(r2)

   *frag_offsetp = jrstart;
 804073c:	e0800217 	ldw	r2,8(fp)
 8040740:	e0fffe8b 	ldhu	r3,-6(fp)
 8040744:	10c0000d 	sth	r3,0(r2)
   *indexp = INVALID_FRAG_INDEX;
 8040748:	e0bff517 	ldw	r2,-44(fp)
 804074c:	00c00404 	movi	r3,16
 8040750:	10c0000d 	sth	r3,0(r2)
   *last_rfqpp = 0;
 8040754:	e0bff417 	ldw	r2,-48(fp)
 8040758:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
 804075c:	e0800317 	ldw	r2,12(fp)
 8040760:	10000005 	stb	zero,0(r2)

   rfqp = &(irep->rfq);
 8040764:	e0bff617 	ldw	r2,-40(fp)
 8040768:	10800604 	addi	r2,r2,24
 804076c:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 8040770:	0000ed06 	br	8040b28 <ip_reasm_compute_overlap+0x528>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8040774:	e03ffd8d 	sth	zero,-10(fp)
 8040778:	0000db06 	br	8040ae8 <ip_reasm_compute_overlap+0x4e8>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
 804077c:	e0bffd8b 	ldhu	r2,-10(fp)
 8040780:	e0ffff17 	ldw	r3,-4(fp)
 8040784:	10800044 	addi	r2,r2,1
 8040788:	100490ba 	slli	r2,r2,2
 804078c:	1885883a 	add	r2,r3,r2
 8040790:	10800017 	ldw	r2,0(r2)
 8040794:	e0bffa15 	stw	r2,-24(fp)
 8040798:	e0bffa17 	ldw	r2,-24(fp)
 804079c:	1000bf26 	beq	r2,zero,8040a9c <ip_reasm_compute_overlap+0x49c>
            {
            currstart = rfqp->frag_offset[i];
 80407a0:	e0bffd8b 	ldhu	r2,-10(fp)
 80407a4:	e0ffff17 	ldw	r3,-4(fp)
 80407a8:	10800884 	addi	r2,r2,34
 80407ac:	1085883a 	add	r2,r2,r2
 80407b0:	1885883a 	add	r2,r3,r2
 80407b4:	1080000b 	ldhu	r2,0(r2)
 80407b8:	e0bff98d 	sth	r2,-26(fp)
            currend = currstart + currpkt->nb_plen - 1;
 80407bc:	e0bffa17 	ldw	r2,-24(fp)
 80407c0:	10800417 	ldw	r2,16(r2)
 80407c4:	1007883a 	mov	r3,r2
 80407c8:	e0bff98b 	ldhu	r2,-26(fp)
 80407cc:	10c5883a 	add	r2,r2,r3
 80407d0:	10bfffc4 	addi	r2,r2,-1
 80407d4:	e0bff90d 	sth	r2,-28(fp)

            if (currstart < jrstart)
 80407d8:	e0fff98b 	ldhu	r3,-26(fp)
 80407dc:	e0bffe8b 	ldhu	r2,-6(fp)
 80407e0:	18802b2e 	bgeu	r3,r2,8040890 <ip_reasm_compute_overlap+0x290>
               {
               if (currend < jrend) /* cases A1 and A2 */
 80407e4:	e0fff90b 	ldhu	r3,-28(fp)
 80407e8:	e0bffe0b 	ldhu	r2,-8(fp)
 80407ec:	1880202e 	bgeu	r3,r2,8040870 <ip_reasm_compute_overlap+0x270>
                  {
                  if (currend < jrstart) /* A1 */
 80407f0:	e0fff90b 	ldhu	r3,-28(fp)
 80407f4:	e0bffe8b 	ldhu	r2,-6(fp)
 80407f8:	1880b836 	bltu	r3,r2,8040adc <ip_reasm_compute_overlap+0x4dc>
                     {
                     /* the just received fragment partially overlaps current 
                      * fragment on the latter's right; increment start 
                      * pointer and decrement length of just received fragment.
                      * Move on to the next fragment in the RFQ. */
                     drop_len = (currend - jrstart) + 1;
 80407fc:	e0fff90b 	ldhu	r3,-28(fp)
 8040800:	e0bffe8b 	ldhu	r2,-6(fp)
 8040804:	1885c83a 	sub	r2,r3,r2
 8040808:	10800044 	addi	r2,r2,1
 804080c:	e0bff88d 	sth	r2,-30(fp)
                     p->nb_prot += drop_len;
 8040810:	e0bff717 	ldw	r2,-36(fp)
 8040814:	10c00317 	ldw	r3,12(r2)
 8040818:	e0bff88b 	ldhu	r2,-30(fp)
 804081c:	1887883a 	add	r3,r3,r2
 8040820:	e0bff717 	ldw	r2,-36(fp)
 8040824:	10c00315 	stw	r3,12(r2)
                     p->nb_plen -= drop_len;
 8040828:	e0bff717 	ldw	r2,-36(fp)
 804082c:	10c00417 	ldw	r3,16(r2)
 8040830:	e0bff88b 	ldhu	r2,-30(fp)
 8040834:	1887c83a 	sub	r3,r3,r2
 8040838:	e0bff717 	ldw	r2,-36(fp)
 804083c:	10c00415 	stw	r3,16(r2)
                     jrstart += drop_len;
 8040840:	e0fffe8b 	ldhu	r3,-6(fp)
 8040844:	e0bff88b 	ldhu	r2,-30(fp)
 8040848:	1885883a 	add	r2,r3,r2
 804084c:	e0bffe8d 	sth	r2,-6(fp)
                     jrend = jrstart + p->nb_plen - 1;
 8040850:	e0bff717 	ldw	r2,-36(fp)
 8040854:	10800417 	ldw	r2,16(r2)
 8040858:	1007883a 	mov	r3,r2
 804085c:	e0bffe8b 	ldhu	r2,-6(fp)
 8040860:	10c5883a 	add	r2,r2,r3
 8040864:	10bfffc4 	addi	r2,r2,-1
 8040868:	e0bffe0d 	sth	r2,-8(fp)
 804086c:	00009b06 	br	8040adc <ip_reasm_compute_overlap+0x4dc>
               else
                  {
                  /* currend is greater than or equal to jrend (cases E1 and E2).
                   * The current fragment is a superset of the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 8040870:	01000084 	movi	r4,2
 8040874:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
                  pk_free (p);
 8040878:	e13ff717 	ldw	r4,-36(fp)
 804087c:	802bb980 	call	802bb98 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040880:	01000084 	movi	r4,2
 8040884:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 8040888:	0005883a 	mov	r2,zero
 804088c:	0000ac06 	br	8040b40 <ip_reasm_compute_overlap+0x540>
                  }
               }
            else if (currstart > jrstart)
 8040890:	e0bff98b 	ldhu	r2,-26(fp)
 8040894:	e0fffe8b 	ldhu	r3,-6(fp)
 8040898:	18804d2e 	bgeu	r3,r2,80409d0 <ip_reasm_compute_overlap+0x3d0>
               {
               if (currend > jrend) /* cases B1 and B2 */
 804089c:	e0bff90b 	ldhu	r2,-28(fp)
 80408a0:	e0fffe0b 	ldhu	r3,-8(fp)
 80408a4:	1880112e 	bgeu	r3,r2,80408ec <ip_reasm_compute_overlap+0x2ec>
                  {
                  if (currstart > jrend) /* B1 */
 80408a8:	e0bff98b 	ldhu	r2,-26(fp)
 80408ac:	e0fffe0b 	ldhu	r3,-8(fp)
 80408b0:	18808a36 	bltu	r3,r2,8040adc <ip_reasm_compute_overlap+0x4dc>
                     {
                     /* just received fragment partially overlaps current 
                      * fragment on the latter's left; decrement length of 
                      * just received fragment.  Move on to the next fragment 
                      * in the RFQ. */
                     p->nb_plen = currstart - jrstart;
 80408b4:	e0fff98b 	ldhu	r3,-26(fp)
 80408b8:	e0bffe8b 	ldhu	r2,-6(fp)
 80408bc:	1885c83a 	sub	r2,r3,r2
 80408c0:	1007883a 	mov	r3,r2
 80408c4:	e0bff717 	ldw	r2,-36(fp)
 80408c8:	10c00415 	stw	r3,16(r2)
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
 80408cc:	e0bff717 	ldw	r2,-36(fp)
 80408d0:	10800417 	ldw	r2,16(r2)
 80408d4:	1007883a 	mov	r3,r2
 80408d8:	e0bffe8b 	ldhu	r2,-6(fp)
 80408dc:	10c5883a 	add	r2,r2,r3
 80408e0:	10bfffc4 	addi	r2,r2,-1
 80408e4:	e0bffe0d 	sth	r2,-8(fp)
 80408e8:	00007c06 	br	8040adc <ip_reasm_compute_overlap+0x4dc>
                     }
                  }
               else if (currend == jrend) /* F1 */
 80408ec:	e0fff90b 	ldhu	r3,-28(fp)
 80408f0:	e0bffe0b 	ldhu	r2,-8(fp)
 80408f4:	18800e1e 	bne	r3,r2,8040930 <ip_reasm_compute_overlap+0x330>
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
 80408f8:	e0fff98b 	ldhu	r3,-26(fp)
 80408fc:	e0bffe8b 	ldhu	r2,-6(fp)
 8040900:	1885c83a 	sub	r2,r3,r2
 8040904:	1007883a 	mov	r3,r2
 8040908:	e0bff717 	ldw	r2,-36(fp)
 804090c:	10c00415 	stw	r3,16(r2)
                  jrend = jrstart + p->nb_plen - 1;
 8040910:	e0bff717 	ldw	r2,-36(fp)
 8040914:	10800417 	ldw	r2,16(r2)
 8040918:	1007883a 	mov	r3,r2
 804091c:	e0bffe8b 	ldhu	r2,-6(fp)
 8040920:	10c5883a 	add	r2,r2,r3
 8040924:	10bfffc4 	addi	r2,r2,-1
 8040928:	e0bffe0d 	sth	r2,-8(fp)
 804092c:	00006b06 	br	8040adc <ip_reasm_compute_overlap+0x4dc>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
 8040930:	e0bffa17 	ldw	r2,-24(fp)
 8040934:	10800217 	ldw	r2,8(r2)
 8040938:	10bfffcc 	andi	r2,r2,65535
 804093c:	1009883a 	mov	r4,r2
 8040940:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
 8040944:	e0bff617 	ldw	r2,-40(fp)
 8040948:	1080048b 	ldhu	r2,18(r2)
 804094c:	e0fffa17 	ldw	r3,-24(fp)
 8040950:	18c00417 	ldw	r3,16(r3)
 8040954:	10c5c83a 	sub	r2,r2,r3
 8040958:	1007883a 	mov	r3,r2
 804095c:	e0bff617 	ldw	r2,-40(fp)
 8040960:	10c0048d 	sth	r3,18(r2)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 8040964:	01000084 	movi	r4,2
 8040968:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
 804096c:	e13ffa17 	ldw	r4,-24(fp)
 8040970:	802bb980 	call	802bb98 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040974:	01000084 	movi	r4,2
 8040978:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
 804097c:	e0bffd8b 	ldhu	r2,-10(fp)
 8040980:	e0ffff17 	ldw	r3,-4(fp)
 8040984:	10800044 	addi	r2,r2,1
 8040988:	100490ba 	slli	r2,r2,2
 804098c:	1885883a 	add	r2,r3,r2
 8040990:	10000015 	stw	zero,0(r2)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
 8040994:	e0bff517 	ldw	r2,-44(fp)
 8040998:	1080000b 	ldhu	r2,0(r2)
 804099c:	10bfffcc 	andi	r2,r2,65535
 80409a0:	10800418 	cmpnei	r2,r2,16
 80409a4:	1000061e 	bne	r2,zero,80409c0 <ip_reasm_compute_overlap+0x3c0>
                     {
                     *indexp = i;
 80409a8:	e0bff517 	ldw	r2,-44(fp)
 80409ac:	e0fffd8b 	ldhu	r3,-10(fp)
 80409b0:	10c0000d 	sth	r3,0(r2)
                     *last_rfqpp = rfqp;
 80409b4:	e0bff417 	ldw	r2,-48(fp)
 80409b8:	e0ffff17 	ldw	r3,-4(fp)
 80409bc:	10c00015 	stw	r3,0(r2)
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
 80409c0:	e0800317 	ldw	r2,12(fp)
 80409c4:	00c00044 	movi	r3,1
 80409c8:	10c00005 	stb	r3,0(r2)
 80409cc:	00004306 	br	8040adc <ip_reasm_compute_overlap+0x4dc>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
 80409d0:	e0fff90b 	ldhu	r3,-28(fp)
 80409d4:	e0bffe0b 	ldhu	r2,-8(fp)
 80409d8:	1880081e 	bne	r3,r2,80409fc <ip_reasm_compute_overlap+0x3fc>
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 80409dc:	01000084 	movi	r4,2
 80409e0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
                  pk_free (p);
 80409e4:	e13ff717 	ldw	r4,-36(fp)
 80409e8:	802bb980 	call	802bb98 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 80409ec:	01000084 	movi	r4,2
 80409f0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 80409f4:	0005883a 	mov	r2,zero
 80409f8:	00005106 	br	8040b40 <ip_reasm_compute_overlap+0x540>
                  }
               else if (currend > jrend) /* case D1 */
 80409fc:	e0bff90b 	ldhu	r2,-28(fp)
 8040a00:	e0fffe0b 	ldhu	r3,-8(fp)
 8040a04:	1880082e 	bgeu	r3,r2,8040a28 <ip_reasm_compute_overlap+0x428>
                  {
                  /* current fragment is a superset of just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 8040a08:	01000084 	movi	r4,2
 8040a0c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
                  pk_free (p);
 8040a10:	e13ff717 	ldw	r4,-36(fp)
 8040a14:	802bb980 	call	802bb98 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040a18:	01000084 	movi	r4,2
 8040a1c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 8040a20:	0005883a 	mov	r2,zero
 8040a24:	00004606 	br	8040b40 <ip_reasm_compute_overlap+0x540>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
 8040a28:	e0fff90b 	ldhu	r3,-28(fp)
 8040a2c:	e0bffe8b 	ldhu	r2,-6(fp)
 8040a30:	1885c83a 	sub	r2,r3,r2
 8040a34:	10800044 	addi	r2,r2,1
 8040a38:	e0bff88d 	sth	r2,-30(fp)
                  p->nb_prot += drop_len;
 8040a3c:	e0bff717 	ldw	r2,-36(fp)
 8040a40:	10c00317 	ldw	r3,12(r2)
 8040a44:	e0bff88b 	ldhu	r2,-30(fp)
 8040a48:	1887883a 	add	r3,r3,r2
 8040a4c:	e0bff717 	ldw	r2,-36(fp)
 8040a50:	10c00315 	stw	r3,12(r2)
                  p->nb_plen -= drop_len;
 8040a54:	e0bff717 	ldw	r2,-36(fp)
 8040a58:	10c00417 	ldw	r3,16(r2)
 8040a5c:	e0bff88b 	ldhu	r2,-30(fp)
 8040a60:	1887c83a 	sub	r3,r3,r2
 8040a64:	e0bff717 	ldw	r2,-36(fp)
 8040a68:	10c00415 	stw	r3,16(r2)
                  jrstart += drop_len;
 8040a6c:	e0fffe8b 	ldhu	r3,-6(fp)
 8040a70:	e0bff88b 	ldhu	r2,-30(fp)
 8040a74:	1885883a 	add	r2,r3,r2
 8040a78:	e0bffe8d 	sth	r2,-6(fp)
                  jrend = jrstart + p->nb_plen - 1;
 8040a7c:	e0bff717 	ldw	r2,-36(fp)
 8040a80:	10800417 	ldw	r2,16(r2)
 8040a84:	1007883a 	mov	r3,r2
 8040a88:	e0bffe8b 	ldhu	r2,-6(fp)
 8040a8c:	10c5883a 	add	r2,r2,r3
 8040a90:	10bfffc4 	addi	r2,r2,-1
 8040a94:	e0bffe0d 	sth	r2,-8(fp)
 8040a98:	00001006 	br	8040adc <ip_reasm_compute_overlap+0x4dc>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
 8040a9c:	e0bff517 	ldw	r2,-44(fp)
 8040aa0:	1080000b 	ldhu	r2,0(r2)
 8040aa4:	10bfffcc 	andi	r2,r2,65535
 8040aa8:	10800418 	cmpnei	r2,r2,16
 8040aac:	1000061e 	bne	r2,zero,8040ac8 <ip_reasm_compute_overlap+0x4c8>
               {
               *indexp = i;
 8040ab0:	e0bff517 	ldw	r2,-44(fp)
 8040ab4:	e0fffd8b 	ldhu	r3,-10(fp)
 8040ab8:	10c0000d 	sth	r3,0(r2)
               *last_rfqpp = rfqp;               
 8040abc:	e0bff417 	ldw	r2,-48(fp)
 8040ac0:	e0ffff17 	ldw	r3,-4(fp)
 8040ac4:	10c00015 	stw	r3,0(r2)
               }
            if (irep->flags & IPR_RFQ_COMPACT)
 8040ac8:	e0bff617 	ldw	r2,-40(fp)
 8040acc:	10802103 	ldbu	r2,132(r2)
 8040ad0:	10803fcc 	andi	r2,r2,255
 8040ad4:	1080004c 	andi	r2,r2,1
 8040ad8:	1000071e 	bne	r2,zero,8040af8 <ip_reasm_compute_overlap+0x4f8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8040adc:	e0bffd8b 	ldhu	r2,-10(fp)
 8040ae0:	10800044 	addi	r2,r2,1
 8040ae4:	e0bffd8d 	sth	r2,-10(fp)
 8040ae8:	e0bffd8b 	ldhu	r2,-10(fp)
 8040aec:	10800430 	cmpltui	r2,r2,16
 8040af0:	103f221e 	bne	r2,zero,804077c <ip_reasm_compute_overlap+0x17c>
 8040af4:	00000106 	br	8040afc <ip_reasm_compute_overlap+0x4fc>
               {
               break;
 8040af8:	0001883a 	nop
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
 8040afc:	e0bff517 	ldw	r2,-44(fp)
 8040b00:	1080000b 	ldhu	r2,0(r2)
 8040b04:	10bfffcc 	andi	r2,r2,65535
 8040b08:	10800418 	cmpnei	r2,r2,16
 8040b0c:	1000031e 	bne	r2,zero,8040b1c <ip_reasm_compute_overlap+0x51c>
         {
         *last_rfqpp = rfqp;
 8040b10:	e0bff417 	ldw	r2,-48(fp)
 8040b14:	e0ffff17 	ldw	r3,-4(fp)
 8040b18:	10c00015 	stw	r3,0(r2)
         }
      rfqp = rfqp->next;
 8040b1c:	e0bfff17 	ldw	r2,-4(fp)
 8040b20:	10800017 	ldw	r2,0(r2)
 8040b24:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 8040b28:	e0bfff17 	ldw	r2,-4(fp)
 8040b2c:	103f111e 	bne	r2,zero,8040774 <ip_reasm_compute_overlap+0x174>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
 8040b30:	e0800217 	ldw	r2,8(fp)
 8040b34:	e0fffe8b 	ldhu	r3,-6(fp)
 8040b38:	10c0000d 	sth	r3,0(r2)

   return IPREASM_ACCEPT_FRAG;
 8040b3c:	00800084 	movi	r2,2
}
 8040b40:	e037883a 	mov	sp,fp
 8040b44:	dfc00117 	ldw	ra,4(sp)
 8040b48:	df000017 	ldw	fp,0(sp)
 8040b4c:	dec00204 	addi	sp,sp,8
 8040b50:	f800283a 	ret

08040b54 <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
 8040b54:	defff104 	addi	sp,sp,-60
 8040b58:	dfc00e15 	stw	ra,56(sp)
 8040b5c:	df000d15 	stw	fp,52(sp)
 8040b60:	df000d04 	addi	fp,sp,52
 8040b64:	e13ff615 	stw	r4,-40(fp)
 8040b68:	e17ff515 	stw	r5,-44(fp)
   PACKET reassy_pkt;
   struct ip * pip;
   RFQP new_rfqp = 0;
 8040b6c:	e03fff15 	stw	zero,-4(fp)
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 8040b70:	e13ff517 	ldw	r4,-44(fp)
 8040b74:	80410540 	call	8041054 <ip_reasm_find_ire>
 8040b78:	10803fcc 	andi	r2,r2,255
 8040b7c:	10800060 	cmpeqi	r2,r2,1
 8040b80:	1000121e 	bne	r2,zero,8040bcc <ip_reasm_process_subsequent_fragments+0x78>
      {
      ++ire_stats.bad_irep;
 8040b84:	008201b4 	movhi	r2,2054
 8040b88:	10bd3417 	ldw	r2,-2864(r2)
 8040b8c:	10c00044 	addi	r3,r2,1
 8040b90:	008201b4 	movhi	r2,2054
 8040b94:	10fd3415 	stw	r3,-2864(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8040b98:	01000084 	movi	r4,2
 8040b9c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free (p);
 8040ba0:	e13ff617 	ldw	r4,-40(fp)
 8040ba4:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040ba8:	01000084 	movi	r4,2
 8040bac:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 8040bb0:	008201b4 	movhi	r2,2054
 8040bb4:	10bd2f17 	ldw	r2,-2884(r2)
 8040bb8:	10c00044 	addi	r3,r2,1
 8040bbc:	008201b4 	movhi	r2,2054
 8040bc0:	10fd2f15 	stw	r3,-2884(r2)
      return ENP_PARAM;
 8040bc4:	00bffd84 	movi	r2,-10
 8040bc8:	00011d06 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
      }

   pip = ip_head(p);
 8040bcc:	e0bff617 	ldw	r2,-40(fp)
 8040bd0:	10800317 	ldw	r2,12(r2)
 8040bd4:	e0bffe15 	stw	r2,-8(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 8040bd8:	e13ffe17 	ldw	r4,-8(fp)
 8040bdc:	80400640 	call	8040064 <ip_reasm_determine_type_of_frag>
 8040be0:	e0bffd15 	stw	r2,-12(fp)
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
 8040be4:	e0bffd17 	ldw	r2,-12(fp)
 8040be8:	10800158 	cmpnei	r2,r2,5
 8040bec:	1000241e 	bne	r2,zero,8040c80 <ip_reasm_process_subsequent_fragments+0x12c>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
 8040bf0:	e0bffe17 	ldw	r2,-8(fp)
 8040bf4:	1080018b 	ldhu	r2,6(r2)
 8040bf8:	10bfffcc 	andi	r2,r2,65535
 8040bfc:	1004d23a 	srli	r2,r2,8
 8040c00:	10bfffcc 	andi	r2,r2,65535
 8040c04:	10c03fcc 	andi	r3,r2,255
 8040c08:	e0bffe17 	ldw	r2,-8(fp)
 8040c0c:	1080018b 	ldhu	r2,6(r2)
 8040c10:	10bfffcc 	andi	r2,r2,65535
 8040c14:	1004923a 	slli	r2,r2,8
 8040c18:	10bfffcc 	andi	r2,r2,65535
 8040c1c:	1884b03a 	or	r2,r3,r2
 8040c20:	100490fa 	slli	r2,r2,3
 8040c24:	1007883a 	mov	r3,r2
 8040c28:	e0bffe17 	ldw	r2,-8(fp)
 8040c2c:	1080008b 	ldhu	r2,2(r2)
 8040c30:	10bfffcc 	andi	r2,r2,65535
 8040c34:	1004d23a 	srli	r2,r2,8
 8040c38:	1009883a 	mov	r4,r2
 8040c3c:	e0bffe17 	ldw	r2,-8(fp)
 8040c40:	1080008b 	ldhu	r2,2(r2)
 8040c44:	10bfffcc 	andi	r2,r2,65535
 8040c48:	1004923a 	slli	r2,r2,8
 8040c4c:	2084b03a 	or	r2,r4,r2
 8040c50:	1009883a 	mov	r4,r2
 8040c54:	e0bffe17 	ldw	r2,-8(fp)
 8040c58:	10800003 	ldbu	r2,0(r2)
 8040c5c:	10803fcc 	andi	r2,r2,255
 8040c60:	100490ba 	slli	r2,r2,2
 8040c64:	10800f0c 	andi	r2,r2,60
 8040c68:	2085c83a 	sub	r2,r4,r2
 8040c6c:	1885883a 	add	r2,r3,r2
 8040c70:	1007883a 	mov	r3,r2
 8040c74:	e0bff517 	ldw	r2,-44(fp)
 8040c78:	10c0040d 	sth	r3,16(r2)
 8040c7c:	00000a06 	br	8040ca8 <ip_reasm_process_subsequent_fragments+0x154>
      }
   else if (ftype == IP_FF)
 8040c80:	e0bffd17 	ldw	r2,-12(fp)
 8040c84:	10800058 	cmpnei	r2,r2,1
 8040c88:	1000071e 	bne	r2,zero,8040ca8 <ip_reasm_process_subsequent_fragments+0x154>
      {
      irep->l2_hdr = p->nb_buff;
 8040c8c:	e0bff617 	ldw	r2,-40(fp)
 8040c90:	10c00117 	ldw	r3,4(r2)
 8040c94:	e0bff517 	ldw	r2,-44(fp)
 8040c98:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 8040c9c:	e0bff517 	ldw	r2,-44(fp)
 8040ca0:	e0fffe17 	ldw	r3,-8(fp)
 8040ca4:	10c02015 	stw	r3,128(r2)
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
 8040ca8:	e13ff804 	addi	r4,fp,-32
 8040cac:	e0fff984 	addi	r3,fp,-26
 8040cb0:	e0bff744 	addi	r2,fp,-35
 8040cb4:	d8800115 	stw	r2,4(sp)
 8040cb8:	e0bff784 	addi	r2,fp,-34
 8040cbc:	d8800015 	stw	r2,0(sp)
 8040cc0:	200f883a 	mov	r7,r4
 8040cc4:	180d883a 	mov	r6,r3
 8040cc8:	e17ff517 	ldw	r5,-44(fp)
 8040ccc:	e13ff617 	ldw	r4,-40(fp)
 8040cd0:	80406000 	call	8040600 <ip_reasm_compute_overlap>
 8040cd4:	e0bffc15 	stw	r2,-16(fp)
 8040cd8:	e0bffc17 	ldw	r2,-16(fp)
 8040cdc:	108000a0 	cmpeqi	r2,r2,2
 8040ce0:	1000111e 	bne	r2,zero,8040d28 <ip_reasm_process_subsequent_fragments+0x1d4>
      {
      switch (rc2)
 8040ce4:	e0bffc17 	ldw	r2,-16(fp)
 8040ce8:	108000a0 	cmpeqi	r2,r2,2
 8040cec:	10000d1e 	bne	r2,zero,8040d24 <ip_reasm_process_subsequent_fragments+0x1d0>
 8040cf0:	e0bffc17 	ldw	r2,-16(fp)
 8040cf4:	108000e8 	cmpgeui	r2,r2,3
 8040cf8:	10000b1e 	bne	r2,zero,8040d28 <ip_reasm_process_subsequent_fragments+0x1d4>
 8040cfc:	e0bffc17 	ldw	r2,-16(fp)
 8040d00:	10000426 	beq	r2,zero,8040d14 <ip_reasm_process_subsequent_fragments+0x1c0>
 8040d04:	e0bffc17 	ldw	r2,-16(fp)
 8040d08:	10800060 	cmpeqi	r2,r2,1
 8040d0c:	1000031e 	bne	r2,zero,8040d1c <ip_reasm_process_subsequent_fragments+0x1c8>
 8040d10:	00000506 	br	8040d28 <ip_reasm_process_subsequent_fragments+0x1d4>
         {
         case IPREASM_DROP_FRAG_DUPLICATE:
            /* this isn't really an error, since it indicates that the received 
             * fragment's information is a duplicate of what is present in the 
             * already queued fragments */
            return IPREASM_OK;
 8040d14:	0005883a 	mov	r2,zero
 8040d18:	0000c906 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
         case IPREASM_DROP_FRAG_BAD_PARAM:
            /* this is a real error */
            return ENP_PARAM;
 8040d1c:	00bffd84 	movi	r2,-10
 8040d20:	0000c706 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
          * Altera Niche Stack Nios port modification:
          * Handle IPREASM_ACCEPT_FRAG case (will never
          * get here per if() above) to remove build warning.
          */
         case IPREASM_ACCEPT_FRAG:
            while(0);
 8040d24:	0001883a 	nop
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
 8040d28:	e0bff617 	ldw	r2,-40(fp)
 8040d2c:	10800217 	ldw	r2,8(r2)
 8040d30:	10bfffcc 	andi	r2,r2,65535
 8040d34:	1009883a 	mov	r4,r2
 8040d38:	80401340 	call	8040134 <ip_reasm_check_mem_useage>
 8040d3c:	e0bffb15 	stw	r2,-20(fp)
 8040d40:	e0bffb17 	ldw	r2,-20(fp)
 8040d44:	10000f26 	beq	r2,zero,8040d84 <ip_reasm_process_subsequent_fragments+0x230>
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 8040d48:	01000084 	movi	r4,2
 8040d4c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free (p);
 8040d50:	e13ff617 	ldw	r4,-40(fp)
 8040d54:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040d58:	01000084 	movi	r4,2
 8040d5c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
 8040d60:	e13ff517 	ldw	r4,-44(fp)
 8040d64:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
 8040d68:	008201b4 	movhi	r2,2054
 8040d6c:	10bd2f17 	ldw	r2,-2884(r2)
 8040d70:	10c00044 	addi	r3,r2,1
 8040d74:	008201b4 	movhi	r2,2054
 8040d78:	10fd2f15 	stw	r3,-2884(r2)
      return rc;
 8040d7c:	e0bffb17 	ldw	r2,-20(fp)
 8040d80:	0000af06 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
 8040d84:	e0bff98b 	ldhu	r2,-26(fp)
 8040d88:	10bfffcc 	andi	r2,r2,65535
 8040d8c:	10800420 	cmpeqi	r2,r2,16
 8040d90:	1000111e 	bne	r2,zero,8040dd8 <ip_reasm_process_subsequent_fragments+0x284>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 8040d94:	e0fff817 	ldw	r3,-32(fp)
 8040d98:	e0bff98b 	ldhu	r2,-26(fp)
 8040d9c:	10bfffcc 	andi	r2,r2,65535
 8040da0:	10800044 	addi	r2,r2,1
 8040da4:	100490ba 	slli	r2,r2,2
 8040da8:	1885883a 	add	r2,r3,r2
 8040dac:	e0fff617 	ldw	r3,-40(fp)
 8040db0:	10c00015 	stw	r3,0(r2)
      rfqp->frag_offset[index] = frag_offset;
 8040db4:	e13ff817 	ldw	r4,-32(fp)
 8040db8:	e0bff98b 	ldhu	r2,-26(fp)
 8040dbc:	10bfffcc 	andi	r2,r2,65535
 8040dc0:	e0fff78b 	ldhu	r3,-34(fp)
 8040dc4:	10800884 	addi	r2,r2,34
 8040dc8:	1085883a 	add	r2,r2,r2
 8040dcc:	2085883a 	add	r2,r4,r2
 8040dd0:	10c0000d 	sth	r3,0(r2)
 8040dd4:	00003506 	br	8040eac <ip_reasm_process_subsequent_fragments+0x358>
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
 8040dd8:	e0bff617 	ldw	r2,-40(fp)
 8040ddc:	10800217 	ldw	r2,8(r2)
 8040de0:	10801904 	addi	r2,r2,100
 8040de4:	10bfffcc 	andi	r2,r2,65535
 8040de8:	1009883a 	mov	r4,r2
 8040dec:	80401340 	call	8040134 <ip_reasm_check_mem_useage>
 8040df0:	e0bffb15 	stw	r2,-20(fp)
 8040df4:	e0bffb17 	ldw	r2,-20(fp)
 8040df8:	10000f26 	beq	r2,zero,8040e38 <ip_reasm_process_subsequent_fragments+0x2e4>
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8040dfc:	01000084 	movi	r4,2
 8040e00:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free (p);
 8040e04:	e13ff617 	ldw	r4,-40(fp)
 8040e08:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040e0c:	01000084 	movi	r4,2
 8040e10:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 8040e14:	e13ff517 	ldw	r4,-44(fp)
 8040e18:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 8040e1c:	008201b4 	movhi	r2,2054
 8040e20:	10bd2f17 	ldw	r2,-2884(r2)
 8040e24:	10c00044 	addi	r3,r2,1
 8040e28:	008201b4 	movhi	r2,2054
 8040e2c:	10fd2f15 	stw	r3,-2884(r2)
         return rc;
 8040e30:	e0bffb17 	ldw	r2,-20(fp)
 8040e34:	00008206 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
 8040e38:	01001904 	movi	r4,100
 8040e3c:	802cf5c0 	call	802cf5c <npalloc>
 8040e40:	e0bfff15 	stw	r2,-4(fp)
      if (new_rfqp == 0)
 8040e44:	e0bfff17 	ldw	r2,-4(fp)
 8040e48:	10000f1e 	bne	r2,zero,8040e88 <ip_reasm_process_subsequent_fragments+0x334>
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8040e4c:	01000084 	movi	r4,2
 8040e50:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free (p);
 8040e54:	e13ff617 	ldw	r4,-40(fp)
 8040e58:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040e5c:	01000084 	movi	r4,2
 8040e60:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 8040e64:	e13ff517 	ldw	r4,-44(fp)
 8040e68:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 8040e6c:	008201b4 	movhi	r2,2054
 8040e70:	10bd2f17 	ldw	r2,-2884(r2)
 8040e74:	10c00044 	addi	r3,r2,1
 8040e78:	008201b4 	movhi	r2,2054
 8040e7c:	10fd2f15 	stw	r3,-2884(r2)
         return ENP_RESOURCE;
 8040e80:	00bffa84 	movi	r2,-22
 8040e84:	00006e06 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
         }
      else
         {
         new_rfqp->bufp[0] = p;
 8040e88:	e0bfff17 	ldw	r2,-4(fp)
 8040e8c:	e0fff617 	ldw	r3,-40(fp)
 8040e90:	10c00115 	stw	r3,4(r2)
         new_rfqp->frag_offset[0] = frag_offset;
 8040e94:	e0fff78b 	ldhu	r3,-34(fp)
 8040e98:	e0bfff17 	ldw	r2,-4(fp)
 8040e9c:	10c0110d 	sth	r3,68(r2)
         rfqp->next = new_rfqp;
 8040ea0:	e0bff817 	ldw	r2,-32(fp)
 8040ea4:	e0ffff17 	ldw	r3,-4(fp)
 8040ea8:	10c00015 	stw	r3,0(r2)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
 8040eac:	e0bff743 	ldbu	r2,-35(fp)
 8040eb0:	10803fcc 	andi	r2,r2,255
 8040eb4:	10001226 	beq	r2,zero,8040f00 <ip_reasm_process_subsequent_fragments+0x3ac>
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
 8040eb8:	e13ff517 	ldw	r4,-44(fp)
 8040ebc:	80416580 	call	8041658 <ip_reasm_mark_compact_rfq>
 8040ec0:	e0bffb15 	stw	r2,-20(fp)
 8040ec4:	e0bffb17 	ldw	r2,-20(fp)
 8040ec8:	10000d26 	beq	r2,zero,8040f00 <ip_reasm_process_subsequent_fragments+0x3ac>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
 8040ecc:	01000084 	movi	r4,2
 8040ed0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free (p);
 8040ed4:	e13ff617 	ldw	r4,-40(fp)
 8040ed8:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040edc:	01000084 	movi	r4,2
 8040ee0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
 8040ee4:	008201b4 	movhi	r2,2054
 8040ee8:	10bd2f17 	ldw	r2,-2884(r2)
 8040eec:	10c00044 	addi	r3,r2,1
 8040ef0:	008201b4 	movhi	r2,2054
 8040ef4:	10fd2f15 	stw	r3,-2884(r2)
            return rc;
 8040ef8:	e0bffb17 	ldw	r2,-20(fp)
 8040efc:	00005006 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
 8040f00:	e0bff517 	ldw	r2,-44(fp)
 8040f04:	1080048b 	ldhu	r2,18(r2)
 8040f08:	e0fff617 	ldw	r3,-40(fp)
 8040f0c:	18c00417 	ldw	r3,16(r3)
 8040f10:	10c5883a 	add	r2,r2,r3
 8040f14:	1007883a 	mov	r3,r2
 8040f18:	e0bff517 	ldw	r2,-44(fp)
 8040f1c:	10c0048d 	sth	r3,18(r2)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 8040f20:	e0bff617 	ldw	r2,-40(fp)
 8040f24:	10800217 	ldw	r2,8(r2)
 8040f28:	1007883a 	mov	r3,r2
 8040f2c:	e0bfff17 	ldw	r2,-4(fp)
 8040f30:	1000021e 	bne	r2,zero,8040f3c <ip_reasm_process_subsequent_fragments+0x3e8>
 8040f34:	0005883a 	mov	r2,zero
 8040f38:	00000106 	br	8040f40 <ip_reasm_process_subsequent_fragments+0x3ec>
 8040f3c:	00801904 	movi	r2,100
 8040f40:	10c5883a 	add	r2,r2,r3
 8040f44:	10bfffcc 	andi	r2,r2,65535
 8040f48:	1009883a 	mov	r4,r2
 8040f4c:	80401b80 	call	80401b8 <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
 8040f50:	e0bff517 	ldw	r2,-44(fp)
 8040f54:	1080040b 	ldhu	r2,16(r2)
 8040f58:	10bfffcc 	andi	r2,r2,65535
 8040f5c:	10003726 	beq	r2,zero,804103c <ip_reasm_process_subsequent_fragments+0x4e8>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
 8040f60:	e0bff517 	ldw	r2,-44(fp)
 8040f64:	10c0048b 	ldhu	r3,18(r2)
 8040f68:	e0bff517 	ldw	r2,-44(fp)
 8040f6c:	1080040b 	ldhu	r2,16(r2)
 8040f70:	18ffffcc 	andi	r3,r3,65535
 8040f74:	10bfffcc 	andi	r2,r2,65535
 8040f78:	1880301e 	bne	r3,r2,804103c <ip_reasm_process_subsequent_fragments+0x4e8>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
 8040f7c:	e0bff517 	ldw	r2,-44(fp)
 8040f80:	10802017 	ldw	r2,128(r2)
 8040f84:	e0bffe15 	stw	r2,-8(fp)
         LOCK_NET_RESOURCE (FREEQ_RESID);
 8040f88:	01000084 	movi	r4,2
 8040f8c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
 8040f90:	e0bff517 	ldw	r2,-44(fp)
 8040f94:	1080040b 	ldhu	r2,16(r2)
 8040f98:	10ffffcc 	andi	r3,r2,65535
 8040f9c:	e0bff517 	ldw	r2,-44(fp)
 8040fa0:	11002017 	ldw	r4,128(r2)
 8040fa4:	e0bff517 	ldw	r2,-44(fp)
 8040fa8:	10801f17 	ldw	r2,124(r2)
 8040fac:	2085c83a 	sub	r2,r4,r2
 8040fb0:	1887883a 	add	r3,r3,r2
 8040fb4:	e0bffe17 	ldw	r2,-8(fp)
 8040fb8:	10800003 	ldbu	r2,0(r2)
 8040fbc:	10803fcc 	andi	r2,r2,255
 8040fc0:	100490ba 	slli	r2,r2,2
 8040fc4:	10800f0c 	andi	r2,r2,60
 8040fc8:	1885883a 	add	r2,r3,r2
 8040fcc:	1009883a 	mov	r4,r2
 8040fd0:	802b8840 	call	802b884 <pk_alloc>
 8040fd4:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8040fd8:	01000084 	movi	r4,2
 8040fdc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
 8040fe0:	e0bffa17 	ldw	r2,-24(fp)
 8040fe4:	1000091e 	bne	r2,zero,804100c <ip_reasm_process_subsequent_fragments+0x4b8>
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
 8040fe8:	e13ff517 	ldw	r4,-44(fp)
 8040fec:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
 8040ff0:	008201b4 	movhi	r2,2054
 8040ff4:	10bd2f17 	ldw	r2,-2884(r2)
 8040ff8:	10c00044 	addi	r3,r2,1
 8040ffc:	008201b4 	movhi	r2,2054
 8041000:	10fd2f15 	stw	r3,-2884(r2)
            return ENP_NOBUFFER;
 8041004:	00bffac4 	movi	r2,-21
 8041008:	00000d06 	br	8041040 <ip_reasm_process_subsequent_fragments+0x4ec>
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
 804100c:	e17ff517 	ldw	r5,-44(fp)
 8041010:	e13ffa17 	ldw	r4,-24(fp)
 8041014:	80410ac0 	call	80410ac <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
 8041018:	e13ff517 	ldw	r4,-44(fp)
 804101c:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
 8041020:	008201b4 	movhi	r2,2054
 8041024:	10bd2e17 	ldw	r2,-2888(r2)
 8041028:	10c00044 	addi	r3,r2,1
 804102c:	008201b4 	movhi	r2,2054
 8041030:	10fd2e15 	stw	r3,-2888(r2)
            ip_demux (reassy_pkt);
 8041034:	e13ffa17 	ldw	r4,-24(fp)
 8041038:	80423e80 	call	80423e8 <ip_demux>
      {
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
 804103c:	0005883a 	mov	r2,zero
}
 8041040:	e037883a 	mov	sp,fp
 8041044:	dfc00117 	ldw	ra,4(sp)
 8041048:	df000017 	ldw	fp,0(sp)
 804104c:	dec00204 	addi	sp,sp,8
 8041050:	f800283a 	ret

08041054 <ip_reasm_find_ire>:
OUTPUT: This function returns a IPREASM_TRUE if the IRE exists in the master 
IRE list; otherwise, it returns a IPREASM_FALSE.
*/

u_char ip_reasm_find_ire (IREP irep)
{
 8041054:	defffd04 	addi	sp,sp,-12
 8041058:	df000215 	stw	fp,8(sp)
 804105c:	df000204 	addi	fp,sp,8
 8041060:	e13ffe15 	stw	r4,-8(fp)
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8041064:	d0a0c317 	ldw	r2,-31988(gp)
 8041068:	e0bfff15 	stw	r2,-4(fp)
 804106c:	00000806 	br	8041090 <ip_reasm_find_ire+0x3c>
      {
      if (tmpp == irep) 
 8041070:	e0ffff17 	ldw	r3,-4(fp)
 8041074:	e0bffe17 	ldw	r2,-8(fp)
 8041078:	1880021e 	bne	r3,r2,8041084 <ip_reasm_find_ire+0x30>
         {
         return IPREASM_TRUE;
 804107c:	00800044 	movi	r2,1
 8041080:	00000606 	br	804109c <ip_reasm_find_ire+0x48>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8041084:	e0bfff17 	ldw	r2,-4(fp)
 8041088:	10800017 	ldw	r2,0(r2)
 804108c:	e0bfff15 	stw	r2,-4(fp)
 8041090:	e0bfff17 	ldw	r2,-4(fp)
 8041094:	103ff61e 	bne	r2,zero,8041070 <ip_reasm_find_ire+0x1c>
         }
      }

   return IPREASM_FALSE;
 8041098:	0005883a 	mov	r2,zero
}
 804109c:	e037883a 	mov	sp,fp
 80410a0:	df000017 	ldw	fp,0(sp)
 80410a4:	dec00104 	addi	sp,sp,4
 80410a8:	f800283a 	ret

080410ac <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 80410ac:	defff504 	addi	sp,sp,-44
 80410b0:	dfc00a15 	stw	ra,40(sp)
 80410b4:	df000915 	stw	fp,36(sp)
 80410b8:	df000904 	addi	fp,sp,36
 80410bc:	e13ff815 	stw	r4,-32(fp)
 80410c0:	e17ff715 	stw	r5,-36(fp)
   RFQP rfqp;
   u_short i;
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;
 80410c4:	e03ffd15 	stw	zero,-12(fp)

   pip = (struct ip *) irep->l3_hdr;
 80410c8:	e0bff717 	ldw	r2,-36(fp)
 80410cc:	10802017 	ldw	r2,128(r2)
 80410d0:	e0bffc15 	stw	r2,-16(fp)
   iphlen = ip_hlen (pip);
 80410d4:	e0bffc17 	ldw	r2,-16(fp)
 80410d8:	10800003 	ldbu	r2,0(r2)
 80410dc:	10803fcc 	andi	r2,r2,255
 80410e0:	100490ba 	slli	r2,r2,2
 80410e4:	10800f0c 	andi	r2,r2,60
 80410e8:	e0bffbc5 	stb	r2,-17(fp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 80410ec:	e0bff717 	ldw	r2,-36(fp)
 80410f0:	10c02017 	ldw	r3,128(r2)
 80410f4:	e0bff717 	ldw	r2,-36(fp)
 80410f8:	10801f17 	ldw	r2,124(r2)
 80410fc:	1885c83a 	sub	r2,r3,r2
 8041100:	1007883a 	mov	r3,r2
 8041104:	e0bffbc3 	ldbu	r2,-17(fp)
 8041108:	10c5883a 	add	r2,r2,r3
 804110c:	e0bffb85 	stb	r2,-18(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
 8041110:	e0bff817 	ldw	r2,-32(fp)
 8041114:	10c00117 	ldw	r3,4(r2)
 8041118:	e0bff717 	ldw	r2,-36(fp)
 804111c:	10801f17 	ldw	r2,124(r2)
 8041120:	e13ffb83 	ldbu	r4,-18(fp)
 8041124:	200d883a 	mov	r6,r4
 8041128:	100b883a 	mov	r5,r2
 804112c:	1809883a 	mov	r4,r3
 8041130:	8002ea40 	call	8002ea4 <memcpy>

   rfqp = &(irep->rfq);
 8041134:	e0bff717 	ldw	r2,-36(fp)
 8041138:	10800604 	addi	r2,r2,24
 804113c:	e0bfff15 	stw	r2,-4(fp)
   writep = reassy_pkt->nb_buff + offset;
 8041140:	e0bff817 	ldw	r2,-32(fp)
 8041144:	10c00117 	ldw	r3,4(r2)
 8041148:	e0bffb83 	ldbu	r2,-18(fp)
 804114c:	1885883a 	add	r2,r3,r2
 8041150:	e0bffa15 	stw	r2,-24(fp)

   while (rfqp)
 8041154:	00004306 	br	8041264 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1b8>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8041158:	e03ffe8d 	sth	zero,-6(fp)
 804115c:	00003906 	br	8041244 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x198>
         {
         if ((p = rfqp->bufp [i]) != 0)
 8041160:	e0bffe8b 	ldhu	r2,-6(fp)
 8041164:	e0ffff17 	ldw	r3,-4(fp)
 8041168:	10800044 	addi	r2,r2,1
 804116c:	100490ba 	slli	r2,r2,2
 8041170:	1885883a 	add	r2,r3,r2
 8041174:	10800017 	ldw	r2,0(r2)
 8041178:	e0bff915 	stw	r2,-28(fp)
 804117c:	e0bff917 	ldw	r2,-28(fp)
 8041180:	10002826 	beq	r2,zero,8041224 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x178>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
 8041184:	e0bffe8b 	ldhu	r2,-6(fp)
 8041188:	e0ffff17 	ldw	r3,-4(fp)
 804118c:	10800884 	addi	r2,r2,34
 8041190:	1085883a 	add	r2,r2,r2
 8041194:	1885883a 	add	r2,r3,r2
 8041198:	1080000b 	ldhu	r2,0(r2)
 804119c:	10bfffcc 	andi	r2,r2,65535
 80411a0:	e0fffa17 	ldw	r3,-24(fp)
 80411a4:	1887883a 	add	r3,r3,r2
 80411a8:	e0bff917 	ldw	r2,-28(fp)
 80411ac:	11000317 	ldw	r4,12(r2)
 80411b0:	e0bff917 	ldw	r2,-28(fp)
 80411b4:	10800417 	ldw	r2,16(r2)
 80411b8:	100d883a 	mov	r6,r2
 80411bc:	200b883a 	mov	r5,r4
 80411c0:	1809883a 	mov	r4,r3
 80411c4:	8002ea40 	call	8002ea4 <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
 80411c8:	e0bffd17 	ldw	r2,-12(fp)
 80411cc:	1000031e 	bne	r2,zero,80411dc <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x130>
 80411d0:	e0bff917 	ldw	r2,-28(fp)
 80411d4:	e0bffd15 	stw	r2,-12(fp)
 80411d8:	00000b06 	br	8041208 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x15c>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
 80411dc:	e0bff917 	ldw	r2,-28(fp)
 80411e0:	10800217 	ldw	r2,8(r2)
 80411e4:	10bfffcc 	andi	r2,r2,65535
 80411e8:	1009883a 	mov	r4,r2
 80411ec:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
 80411f0:	01000084 	movi	r4,2
 80411f4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
               pk_free (p);
 80411f8:	e13ff917 	ldw	r4,-28(fp)
 80411fc:	802bb980 	call	802bb98 <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8041200:	01000084 	movi	r4,2
 8041204:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
 8041208:	e0bffe8b 	ldhu	r2,-6(fp)
 804120c:	e0ffff17 	ldw	r3,-4(fp)
 8041210:	10800044 	addi	r2,r2,1
 8041214:	100490ba 	slli	r2,r2,2
 8041218:	1885883a 	add	r2,r3,r2
 804121c:	10000015 	stw	zero,0(r2)
 8041220:	00000506 	br	8041238 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x18c>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 8041224:	e0bff717 	ldw	r2,-36(fp)
 8041228:	10802103 	ldbu	r2,132(r2)
 804122c:	10803fcc 	andi	r2,r2,255
 8041230:	1080004c 	andi	r2,r2,1
 8041234:	1000071e 	bne	r2,zero,8041254 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1a8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8041238:	e0bffe8b 	ldhu	r2,-6(fp)
 804123c:	10800044 	addi	r2,r2,1
 8041240:	e0bffe8d 	sth	r2,-6(fp)
 8041244:	e0bffe8b 	ldhu	r2,-6(fp)
 8041248:	10800430 	cmpltui	r2,r2,16
 804124c:	103fc41e 	bne	r2,zero,8041160 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xb4>
 8041250:	00000106 	br	8041258 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1ac>
               {
               break;
 8041254:	0001883a 	nop
               }
            }
          }

      rfqp = rfqp->next;
 8041258:	e0bfff17 	ldw	r2,-4(fp)
 804125c:	10800017 	ldw	r2,0(r2)
 8041260:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 8041264:	e0bfff17 	ldw	r2,-4(fp)
 8041268:	103fbb1e 	bne	r2,zero,8041158 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xac>
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 804126c:	e0bff817 	ldw	r2,-32(fp)
 8041270:	10800117 	ldw	r2,4(r2)
 8041274:	e0fff717 	ldw	r3,-36(fp)
 8041278:	19002017 	ldw	r4,128(r3)
 804127c:	e0fff717 	ldw	r3,-36(fp)
 8041280:	18c01f17 	ldw	r3,124(r3)
 8041284:	20c7c83a 	sub	r3,r4,r3
 8041288:	10c7883a 	add	r3,r2,r3
 804128c:	e0bff817 	ldw	r2,-32(fp)
 8041290:	10c00315 	stw	r3,12(r2)
   reassy_pkt->nb_plen = irep->length + iphlen;
 8041294:	e0bff717 	ldw	r2,-36(fp)
 8041298:	1080040b 	ldhu	r2,16(r2)
 804129c:	10ffffcc 	andi	r3,r2,65535
 80412a0:	e0bffbc3 	ldbu	r2,-17(fp)
 80412a4:	1885883a 	add	r2,r3,r2
 80412a8:	1007883a 	mov	r3,r2
 80412ac:	e0bff817 	ldw	r2,-32(fp)
 80412b0:	10c00415 	stw	r3,16(r2)
   reassy_pkt->nb_tstamp = cticks;
 80412b4:	d0a0a317 	ldw	r2,-32116(gp)
 80412b8:	1007883a 	mov	r3,r2
 80412bc:	e0bff817 	ldw	r2,-32(fp)
 80412c0:	10c00515 	stw	r3,20(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 80412c4:	e0bff817 	ldw	r2,-32(fp)
 80412c8:	10c00a17 	ldw	r3,40(r2)
 80412cc:	e0bffd17 	ldw	r2,-12(fp)
 80412d0:	10800a17 	ldw	r2,40(r2)
 80412d4:	108000cc 	andi	r2,r2,3
 80412d8:	1886b03a 	or	r3,r3,r2
 80412dc:	e0bff817 	ldw	r2,-32(fp)
 80412e0:	10c00a15 	stw	r3,40(r2)
   reassy_pkt->net = sav_pkt->net;
 80412e4:	e0bffd17 	ldw	r2,-12(fp)
 80412e8:	10c00617 	ldw	r3,24(r2)
 80412ec:	e0bff817 	ldw	r2,-32(fp)
 80412f0:	10c00615 	stw	r3,24(r2)
   reassy_pkt->type = sav_pkt->type;
 80412f4:	e0bffd17 	ldw	r2,-12(fp)
 80412f8:	10c0080b 	ldhu	r3,32(r2)
 80412fc:	e0bff817 	ldw	r2,-32(fp)
 8041300:	10c0080d 	sth	r3,32(r2)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
 8041304:	e0bffd17 	ldw	r2,-12(fp)
 8041308:	10800217 	ldw	r2,8(r2)
 804130c:	10bfffcc 	andi	r2,r2,65535
 8041310:	1009883a 	mov	r4,r2
 8041314:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
 8041318:	01000084 	movi	r4,2
 804131c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
 8041320:	e13ffd17 	ldw	r4,-12(fp)
 8041324:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 8041328:	01000084 	movi	r4,2
 804132c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
 8041330:	e0bff817 	ldw	r2,-32(fp)
 8041334:	10800317 	ldw	r2,12(r2)
 8041338:	e0bffc15 	stw	r2,-16(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
 804133c:	e0bff817 	ldw	r2,-32(fp)
 8041340:	10800417 	ldw	r2,16(r2)
 8041344:	1004d23a 	srli	r2,r2,8
 8041348:	10803fcc 	andi	r2,r2,255
 804134c:	1007883a 	mov	r3,r2
 8041350:	e0bff817 	ldw	r2,-32(fp)
 8041354:	10800417 	ldw	r2,16(r2)
 8041358:	1004923a 	slli	r2,r2,8
 804135c:	1884b03a 	or	r2,r3,r2
 8041360:	1007883a 	mov	r3,r2
 8041364:	e0bffc17 	ldw	r2,-16(fp)
 8041368:	10c0008d 	sth	r3,2(r2)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
 804136c:	e0bffc17 	ldw	r2,-16(fp)
 8041370:	10c0018b 	ldhu	r3,6(r2)
 8041374:	00bff7c4 	movi	r2,-33
 8041378:	1884703a 	and	r2,r3,r2
 804137c:	1007883a 	mov	r3,r2
 8041380:	e0bffc17 	ldw	r2,-16(fp)
 8041384:	10c0018d 	sth	r3,6(r2)
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 8041388:	e0bffc17 	ldw	r2,-16(fp)
 804138c:	1080018b 	ldhu	r2,6(r2)
 8041390:	1080380c 	andi	r2,r2,224
 8041394:	1007883a 	mov	r3,r2
 8041398:	e0bffc17 	ldw	r2,-16(fp)
 804139c:	10c0018d 	sth	r3,6(r2)
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
 80413a0:	e0bffc17 	ldw	r2,-16(fp)
 80413a4:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 80413a8:	e0bffbc3 	ldbu	r2,-17(fp)
 80413ac:	1004d07a 	srli	r2,r2,1
 80413b0:	10803fcc 	andi	r2,r2,255
 80413b4:	100b883a 	mov	r5,r2
 80413b8:	e13ffc17 	ldw	r4,-16(fp)
 80413bc:	8027be00 	call	8027be0 <cksum>
 80413c0:	0084303a 	nor	r2,zero,r2
 80413c4:	1007883a 	mov	r3,r2
 80413c8:	e0bffc17 	ldw	r2,-16(fp)
 80413cc:	10c0028d 	sth	r3,10(r2)

   return IPREASM_OK;
 80413d0:	0005883a 	mov	r2,zero
}
 80413d4:	e037883a 	mov	sp,fp
 80413d8:	dfc00117 	ldw	ra,4(sp)
 80413dc:	df000017 	ldw	fp,0(sp)
 80413e0:	dec00204 	addi	sp,sp,8
 80413e4:	f800283a 	ret

080413e8 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
 80413e8:	defffc04 	addi	sp,sp,-16
 80413ec:	dfc00315 	stw	ra,12(sp)
 80413f0:	df000215 	stw	fp,8(sp)
 80413f4:	df000204 	addi	fp,sp,8
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 80413f8:	0009883a 	mov	r4,zero
 80413fc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 8041400:	d0a0c317 	ldw	r2,-31988(gp)
 8041404:	e0bfff15 	stw	r2,-4(fp)
 8041408:	00001c06 	br	804147c <ip_reasm_process_timer_tick+0x94>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
 804140c:	e0bfff17 	ldw	r2,-4(fp)
 8041410:	10800017 	ldw	r2,0(r2)
 8041414:	e0bffe15 	stw	r2,-8(fp)
      ++tmpp->age;
 8041418:	e0bfff17 	ldw	r2,-4(fp)
 804141c:	10800517 	ldw	r2,20(r2)
 8041420:	10c00044 	addi	r3,r2,1
 8041424:	e0bfff17 	ldw	r2,-4(fp)
 8041428:	10c00515 	stw	r3,20(r2)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
 804142c:	e0bfff17 	ldw	r2,-4(fp)
 8041430:	10800517 	ldw	r2,20(r2)
 8041434:	10801e18 	cmpnei	r2,r2,120
 8041438:	10000e1e 	bne	r2,zero,8041474 <ip_reasm_process_timer_tick+0x8c>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
 804143c:	008201b4 	movhi	r2,2054
 8041440:	10bd3517 	ldw	r2,-2860(r2)
 8041444:	10c00044 	addi	r3,r2,1
 8041448:	008201b4 	movhi	r2,2054
 804144c:	10fd3515 	stw	r3,-2860(r2)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
 8041450:	e13fff17 	ldw	r4,-4(fp)
 8041454:	8041aa40 	call	8041aa4 <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
 8041458:	e13fff17 	ldw	r4,-4(fp)
 804145c:	80414b00 	call	80414b0 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 8041460:	008201b4 	movhi	r2,2054
 8041464:	10bd2f17 	ldw	r2,-2884(r2)
 8041468:	10c00044 	addi	r3,r2,1
 804146c:	008201b4 	movhi	r2,2054
 8041470:	10fd2f15 	stw	r3,-2884(r2)
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 8041474:	e0bffe17 	ldw	r2,-8(fp)
 8041478:	e0bfff15 	stw	r2,-4(fp)
 804147c:	e0bfff17 	ldw	r2,-4(fp)
 8041480:	103fe21e 	bne	r2,zero,804140c <ip_reasm_process_timer_tick+0x24>
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
 8041484:	d0a0a317 	ldw	r2,-32116(gp)
 8041488:	10801904 	addi	r2,r2,100
 804148c:	d0a0c415 	stw	r2,-31984(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 8041490:	0009883a 	mov	r4,zero
 8041494:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
 8041498:	0005883a 	mov	r2,zero
}
 804149c:	e037883a 	mov	sp,fp
 80414a0:	dfc00117 	ldw	ra,4(sp)
 80414a4:	df000017 	ldw	fp,0(sp)
 80414a8:	dec00204 	addi	sp,sp,8
 80414ac:	f800283a 	ret

080414b0 <ip_reasm_delete_ire>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
 80414b0:	defff604 	addi	sp,sp,-40
 80414b4:	dfc00915 	stw	ra,36(sp)
 80414b8:	df000815 	stw	fp,32(sp)
 80414bc:	df000804 	addi	fp,sp,32
 80414c0:	e13ff815 	stw	r4,-32(fp)
   RFQP rfqp, first_rfqp, prev_rfqp;
   u_short i;
   PACKET p;
   IREP tmpp;
   IREP prev_tmpp = 0;
 80414c4:	e03ffc15 	stw	zero,-16(fp)

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 80414c8:	d0a0c317 	ldw	r2,-31988(gp)
 80414cc:	e0bffd15 	stw	r2,-12(fp)
 80414d0:	00001406 	br	8041524 <ip_reasm_delete_ire+0x74>
      {
      if (tmpp == irep) 
 80414d4:	e0fffd17 	ldw	r3,-12(fp)
 80414d8:	e0bff817 	ldw	r2,-32(fp)
 80414dc:	18800c1e 	bne	r3,r2,8041510 <ip_reasm_delete_ire+0x60>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
 80414e0:	d0a0c317 	ldw	r2,-31988(gp)
 80414e4:	e0fffd17 	ldw	r3,-12(fp)
 80414e8:	1880041e 	bne	r3,r2,80414fc <ip_reasm_delete_ire+0x4c>
 80414ec:	e0bff817 	ldw	r2,-32(fp)
 80414f0:	10800017 	ldw	r2,0(r2)
 80414f4:	d0a0c315 	stw	r2,-31988(gp)
         else prev_tmpp->next = irep->next;
         break;
 80414f8:	00000c06 	br	804152c <ip_reasm_delete_ire+0x7c>
         else prev_tmpp->next = irep->next;
 80414fc:	e0bff817 	ldw	r2,-32(fp)
 8041500:	10c00017 	ldw	r3,0(r2)
 8041504:	e0bffc17 	ldw	r2,-16(fp)
 8041508:	10c00015 	stw	r3,0(r2)
         break;
 804150c:	00000706 	br	804152c <ip_reasm_delete_ire+0x7c>
         }
      prev_tmpp = tmpp;
 8041510:	e0bffd17 	ldw	r2,-12(fp)
 8041514:	e0bffc15 	stw	r2,-16(fp)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8041518:	e0bffd17 	ldw	r2,-12(fp)
 804151c:	10800017 	ldw	r2,0(r2)
 8041520:	e0bffd15 	stw	r2,-12(fp)
 8041524:	e0bffd17 	ldw	r2,-12(fp)
 8041528:	103fea1e 	bne	r2,zero,80414d4 <ip_reasm_delete_ire+0x24>
      }

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
 804152c:	e0bffd17 	ldw	r2,-12(fp)
 8041530:	1000071e 	bne	r2,zero,8041550 <ip_reasm_delete_ire+0xa0>
      {
      ++ire_stats.bad_irep;
 8041534:	008201b4 	movhi	r2,2054
 8041538:	10bd3417 	ldw	r2,-2864(r2)
 804153c:	10c00044 	addi	r3,r2,1
 8041540:	008201b4 	movhi	r2,2054
 8041544:	10fd3415 	stw	r3,-2864(r2)
      return ENP_PARAM;
 8041548:	00bffd84 	movi	r2,-10
 804154c:	00003d06 	br	8041644 <ip_reasm_delete_ire+0x194>
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
 8041550:	e0bff817 	ldw	r2,-32(fp)
 8041554:	10800604 	addi	r2,r2,24
 8041558:	e0bffb15 	stw	r2,-20(fp)
 804155c:	e0bffb17 	ldw	r2,-20(fp)
 8041560:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 8041564:	00003006 	br	8041628 <ip_reasm_delete_ire+0x178>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8041568:	e03ffe8d 	sth	zero,-6(fp)
 804156c:	00001d06 	br	80415e4 <ip_reasm_delete_ire+0x134>
         {
         if ((p = rfqp->bufp [i]) != 0)
 8041570:	e0bffe8b 	ldhu	r2,-6(fp)
 8041574:	e0ffff17 	ldw	r3,-4(fp)
 8041578:	10800044 	addi	r2,r2,1
 804157c:	100490ba 	slli	r2,r2,2
 8041580:	1885883a 	add	r2,r3,r2
 8041584:	10800017 	ldw	r2,0(r2)
 8041588:	e0bffa15 	stw	r2,-24(fp)
 804158c:	e0bffa17 	ldw	r2,-24(fp)
 8041590:	10000c26 	beq	r2,zero,80415c4 <ip_reasm_delete_ire+0x114>
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
 8041594:	e0bffa17 	ldw	r2,-24(fp)
 8041598:	10800217 	ldw	r2,8(r2)
 804159c:	10bfffcc 	andi	r2,r2,65535
 80415a0:	1009883a 	mov	r4,r2
 80415a4:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
 80415a8:	01000084 	movi	r4,2
 80415ac:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free (p);
 80415b0:	e13ffa17 	ldw	r4,-24(fp)
 80415b4:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
 80415b8:	01000084 	movi	r4,2
 80415bc:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
 80415c0:	00000506 	br	80415d8 <ip_reasm_delete_ire+0x128>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 80415c4:	e0bff817 	ldw	r2,-32(fp)
 80415c8:	10802103 	ldbu	r2,132(r2)
 80415cc:	10803fcc 	andi	r2,r2,255
 80415d0:	1080004c 	andi	r2,r2,1
 80415d4:	1000071e 	bne	r2,zero,80415f4 <ip_reasm_delete_ire+0x144>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 80415d8:	e0bffe8b 	ldhu	r2,-6(fp)
 80415dc:	10800044 	addi	r2,r2,1
 80415e0:	e0bffe8d 	sth	r2,-6(fp)
 80415e4:	e0bffe8b 	ldhu	r2,-6(fp)
 80415e8:	10800430 	cmpltui	r2,r2,16
 80415ec:	103fe01e 	bne	r2,zero,8041570 <ip_reasm_delete_ire+0xc0>
 80415f0:	00000106 	br	80415f8 <ip_reasm_delete_ire+0x148>
               {
               break;
 80415f4:	0001883a 	nop
               }
            }
          }

       prev_rfqp = rfqp;
 80415f8:	e0bfff17 	ldw	r2,-4(fp)
 80415fc:	e0bff915 	stw	r2,-28(fp)
       rfqp = rfqp->next;
 8041600:	e0bfff17 	ldw	r2,-4(fp)
 8041604:	10800017 	ldw	r2,0(r2)
 8041608:	e0bfff15 	stw	r2,-4(fp)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
 804160c:	e0fff917 	ldw	r3,-28(fp)
 8041610:	e0bffb17 	ldw	r2,-20(fp)
 8041614:	18800426 	beq	r3,r2,8041628 <ip_reasm_delete_ire+0x178>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
 8041618:	01001904 	movi	r4,100
 804161c:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
 8041620:	e13ff917 	ldw	r4,-28(fp)
 8041624:	802cf900 	call	802cf90 <npfree>
   while (rfqp)
 8041628:	e0bfff17 	ldw	r2,-4(fp)
 804162c:	103fce1e 	bne	r2,zero,8041568 <ip_reasm_delete_ire+0xb8>
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
 8041630:	01002204 	movi	r4,136
 8041634:	80402480 	call	8040248 <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
 8041638:	e13ff817 	ldw	r4,-32(fp)
 804163c:	802cf900 	call	802cf90 <npfree>

   return IPREASM_OK;
 8041640:	0005883a 	mov	r2,zero
}
 8041644:	e037883a 	mov	sp,fp
 8041648:	dfc00117 	ldw	ra,4(sp)
 804164c:	df000017 	ldw	fp,0(sp)
 8041650:	dec00204 	addi	sp,sp,8
 8041654:	f800283a 	ret

08041658 <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
 8041658:	defffb04 	addi	sp,sp,-20
 804165c:	dfc00415 	stw	ra,16(sp)
 8041660:	df000315 	stw	fp,12(sp)
 8041664:	df000304 	addi	fp,sp,12
 8041668:	e13ffd15 	stw	r4,-12(fp)
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
 804166c:	e03ffe45 	stb	zero,-7(fp)
   u_char compact = IPREASM_TRUE;
 8041670:	00800044 	movi	r2,1
 8041674:	e0bffe05 	stb	r2,-8(fp)

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 8041678:	e13ffd17 	ldw	r4,-12(fp)
 804167c:	80410540 	call	8041054 <ip_reasm_find_ire>
 8041680:	10803fcc 	andi	r2,r2,255
 8041684:	10800060 	cmpeqi	r2,r2,1
 8041688:	1000071e 	bne	r2,zero,80416a8 <ip_reasm_mark_compact_rfq+0x50>
   {
      ++ire_stats.bad_irep;
 804168c:	008201b4 	movhi	r2,2054
 8041690:	10bd3417 	ldw	r2,-2864(r2)
 8041694:	10c00044 	addi	r3,r2,1
 8041698:	008201b4 	movhi	r2,2054
 804169c:	10fd3415 	stw	r3,-2864(r2)
      return ENP_PARAM;
 80416a0:	00bffd84 	movi	r2,-10
 80416a4:	00003006 	br	8041768 <ip_reasm_mark_compact_rfq+0x110>
   }

   rfqp = &(irep->rfq);
 80416a8:	e0bffd17 	ldw	r2,-12(fp)
 80416ac:	10800604 	addi	r2,r2,24
 80416b0:	e0bfff15 	stw	r2,-4(fp)

   while (rfqp)
 80416b4:	00001906 	br	804171c <ip_reasm_mark_compact_rfq+0xc4>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 80416b8:	e03ffe8d 	sth	zero,-6(fp)
 80416bc:	00001106 	br	8041704 <ip_reasm_mark_compact_rfq+0xac>
         {
         if (rfqp->bufp [i] == 0)
 80416c0:	e0bffe8b 	ldhu	r2,-6(fp)
 80416c4:	e0ffff17 	ldw	r3,-4(fp)
 80416c8:	10800044 	addi	r2,r2,1
 80416cc:	100490ba 	slli	r2,r2,2
 80416d0:	1885883a 	add	r2,r3,r2
 80416d4:	10800017 	ldw	r2,0(r2)
 80416d8:	1000031e 	bne	r2,zero,80416e8 <ip_reasm_mark_compact_rfq+0x90>
            {            
            empty_slot_discovered = IPREASM_TRUE;
 80416dc:	00800044 	movi	r2,1
 80416e0:	e0bffe45 	stb	r2,-7(fp)
 80416e4:	00000406 	br	80416f8 <ip_reasm_mark_compact_rfq+0xa0>
            }
         else
            {
            if (empty_slot_discovered) 
 80416e8:	e0bffe43 	ldbu	r2,-7(fp)
 80416ec:	10000226 	beq	r2,zero,80416f8 <ip_reasm_mark_compact_rfq+0xa0>
               {
               compact = IPREASM_FALSE;
 80416f0:	e03ffe05 	stb	zero,-8(fp)
               break;
 80416f4:	00000606 	br	8041710 <ip_reasm_mark_compact_rfq+0xb8>
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 80416f8:	e0bffe8b 	ldhu	r2,-6(fp)
 80416fc:	10800044 	addi	r2,r2,1
 8041700:	e0bffe8d 	sth	r2,-6(fp)
 8041704:	e0bffe8b 	ldhu	r2,-6(fp)
 8041708:	10800430 	cmpltui	r2,r2,16
 804170c:	103fec1e 	bne	r2,zero,80416c0 <ip_reasm_mark_compact_rfq+0x68>
               }
            }
          }
       rfqp = rfqp->next;
 8041710:	e0bfff17 	ldw	r2,-4(fp)
 8041714:	10800017 	ldw	r2,0(r2)
 8041718:	e0bfff15 	stw	r2,-4(fp)
   while (rfqp)
 804171c:	e0bfff17 	ldw	r2,-4(fp)
 8041720:	103fe51e 	bne	r2,zero,80416b8 <ip_reasm_mark_compact_rfq+0x60>
      }

   if (compact) 
 8041724:	e0bffe03 	ldbu	r2,-8(fp)
 8041728:	10000726 	beq	r2,zero,8041748 <ip_reasm_mark_compact_rfq+0xf0>
      {
      irep->flags |= IPR_RFQ_COMPACT;
 804172c:	e0bffd17 	ldw	r2,-12(fp)
 8041730:	10802103 	ldbu	r2,132(r2)
 8041734:	10800054 	ori	r2,r2,1
 8041738:	1007883a 	mov	r3,r2
 804173c:	e0bffd17 	ldw	r2,-12(fp)
 8041740:	10c02105 	stb	r3,132(r2)
 8041744:	00000706 	br	8041764 <ip_reasm_mark_compact_rfq+0x10c>
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
 8041748:	e0bffd17 	ldw	r2,-12(fp)
 804174c:	10c02103 	ldbu	r3,132(r2)
 8041750:	00bfff84 	movi	r2,-2
 8041754:	1884703a 	and	r2,r3,r2
 8041758:	1007883a 	mov	r3,r2
 804175c:	e0bffd17 	ldw	r2,-12(fp)
 8041760:	10c02105 	stb	r3,132(r2)
      }

   return IPREASM_OK;
 8041764:	0005883a 	mov	r2,zero
}
 8041768:	e037883a 	mov	sp,fp
 804176c:	dfc00117 	ldw	ra,4(sp)
 8041770:	df000017 	ldw	fp,0(sp)
 8041774:	dec00204 	addi	sp,sp,8
 8041778:	f800283a 	ret

0804177c <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 804177c:	deffec04 	addi	sp,sp,-80
 8041780:	dfc01315 	stw	ra,76(sp)
 8041784:	df001215 	stw	fp,72(sp)
 8041788:	dc001115 	stw	r16,68(sp)
 804178c:	df001204 	addi	fp,sp,72
 8041790:	e13ff815 	stw	r4,-32(fp)
   unsigned long ticks_elapsed = cticks;
 8041794:	d0a0a317 	ldw	r2,-32116(gp)
 8041798:	e0bffa15 	stw	r2,-24(fp)
   u_short size_ire = sizeof(IRE);
 804179c:	00802204 	movi	r2,136
 80417a0:	e0bff98d 	sth	r2,-26(fp)
   u_short size_rfq = sizeof(RFQ);
 80417a4:	00801904 	movi	r2,100
 80417a8:	e0bff90d 	sth	r2,-28(fp)
   IREP tmpp;
   u_short count = 0;
 80417ac:	e03ffd8d 	sth	zero,-10(fp)
   RFQP rfqp;
   u_short frag_count = 0;
 80417b0:	e03ffb8d 	sth	zero,-18(fp)
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
 80417b4:	01420174 	movhi	r5,2053
 80417b8:	294d6304 	addi	r5,r5,13708
 80417bc:	e13ff817 	ldw	r4,-32(fp)
 80417c0:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
 80417c4:	d420c217 	ldw	r16,-31992(gp)
 80417c8:	e0bffa17 	ldw	r2,-24(fp)
 80417cc:	01401904 	movi	r5,100
 80417d0:	1009883a 	mov	r4,r2
 80417d4:	800e2300 	call	800e230 <__udivsi3>
 80417d8:	1009883a 	mov	r4,r2
 80417dc:	e0bff98b 	ldhu	r2,-26(fp)
 80417e0:	e0fff90b 	ldhu	r3,-28(fp)
 80417e4:	d8c00215 	stw	r3,8(sp)
 80417e8:	d8800115 	stw	r2,4(sp)
 80417ec:	d9000015 	stw	r4,0(sp)
 80417f0:	e1fffa17 	ldw	r7,-24(fp)
 80417f4:	800d883a 	mov	r6,r16
 80417f8:	01420174 	movhi	r5,2053
 80417fc:	294d6a04 	addi	r5,r5,13736
 8041800:	e13ff817 	ldw	r4,-32(fp)
 8041804:	80281f80 	call	80281f8 <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
 8041808:	008201b4 	movhi	r2,2054
 804180c:	11bd3517 	ldw	r6,-2860(r2)
 8041810:	008201b4 	movhi	r2,2054
 8041814:	11fd3417 	ldw	r7,-2864(r2)
 8041818:	008201b4 	movhi	r2,2054
 804181c:	10bd3617 	ldw	r2,-2856(r2)
 8041820:	00c201b4 	movhi	r3,2054
 8041824:	18fd3717 	ldw	r3,-2852(r3)
 8041828:	010201b4 	movhi	r4,2054
 804182c:	213d3817 	ldw	r4,-2848(r4)
 8041830:	014201b4 	movhi	r5,2054
 8041834:	297d3917 	ldw	r5,-2844(r5)
 8041838:	d9400315 	stw	r5,12(sp)
 804183c:	d9000215 	stw	r4,8(sp)
 8041840:	d8c00115 	stw	r3,4(sp)
 8041844:	d8800015 	stw	r2,0(sp)
 8041848:	01420174 	movhi	r5,2053
 804184c:	294d7a04 	addi	r5,r5,13800
 8041850:	e13ff817 	ldw	r4,-32(fp)
 8041854:	80281f80 	call	80281f8 <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
 8041858:	d0a0c317 	ldw	r2,-31988(gp)
 804185c:	100d883a 	mov	r6,r2
 8041860:	01420174 	movhi	r5,2053
 8041864:	294d8f04 	addi	r5,r5,13884
 8041868:	e13ff817 	ldw	r4,-32(fp)
 804186c:	80281f80 	call	80281f8 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8041870:	d0a0c317 	ldw	r2,-31988(gp)
 8041874:	e0bffe15 	stw	r2,-8(fp)
 8041878:	00007b06 	br	8041a68 <ipr_stats+0x2ec>
      {
      ++count;
 804187c:	e0bffd8b 	ldhu	r2,-10(fp)
 8041880:	10800044 	addi	r2,r2,1
 8041884:	e0bffd8d 	sth	r2,-10(fp)
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
 8041888:	e0bffe17 	ldw	r2,-8(fp)
 804188c:	10800604 	addi	r2,r2,24
 8041890:	e0bffc15 	stw	r2,-16(fp)
      while (rfqp)
 8041894:	00001d06 	br	804190c <ipr_stats+0x190>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 8041898:	e03ffb0d 	sth	zero,-20(fp)
 804189c:	00001306 	br	80418ec <ipr_stats+0x170>
            {
            if (rfqp->bufp [i] != 0)
 80418a0:	e0bffb0b 	ldhu	r2,-20(fp)
 80418a4:	e0fffc17 	ldw	r3,-16(fp)
 80418a8:	10800044 	addi	r2,r2,1
 80418ac:	100490ba 	slli	r2,r2,2
 80418b0:	1885883a 	add	r2,r3,r2
 80418b4:	10800017 	ldw	r2,0(r2)
 80418b8:	10000426 	beq	r2,zero,80418cc <ipr_stats+0x150>
               {
               ++frag_count;            
 80418bc:	e0bffb8b 	ldhu	r2,-18(fp)
 80418c0:	10800044 	addi	r2,r2,1
 80418c4:	e0bffb8d 	sth	r2,-18(fp)
 80418c8:	00000506 	br	80418e0 <ipr_stats+0x164>
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
 80418cc:	e0bffe17 	ldw	r2,-8(fp)
 80418d0:	10802103 	ldbu	r2,132(r2)
 80418d4:	10803fcc 	andi	r2,r2,255
 80418d8:	1080004c 	andi	r2,r2,1
 80418dc:	1000071e 	bne	r2,zero,80418fc <ipr_stats+0x180>
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 80418e0:	e0bffb0b 	ldhu	r2,-20(fp)
 80418e4:	10800044 	addi	r2,r2,1
 80418e8:	e0bffb0d 	sth	r2,-20(fp)
 80418ec:	e0bffb0b 	ldhu	r2,-20(fp)
 80418f0:	10800430 	cmpltui	r2,r2,16
 80418f4:	103fea1e 	bne	r2,zero,80418a0 <ipr_stats+0x124>
 80418f8:	00000106 	br	8041900 <ipr_stats+0x184>
                  {
                  break;
 80418fc:	0001883a 	nop
                  }
               }
            }
         rfqp = rfqp->next;
 8041900:	e0bffc17 	ldw	r2,-16(fp)
 8041904:	10800017 	ldw	r2,0(r2)
 8041908:	e0bffc15 	stw	r2,-16(fp)
      while (rfqp)
 804190c:	e0bffc17 	ldw	r2,-16(fp)
 8041910:	103fe11e 	bne	r2,zero,8041898 <ipr_stats+0x11c>
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
 8041914:	e33ffb8b 	ldhu	r12,-18(fp)
 8041918:	e0bffe17 	ldw	r2,-8(fp)
 804191c:	10800117 	ldw	r2,4(r2)
 8041920:	1006d63a 	srli	r3,r2,24
 8041924:	e0bffe17 	ldw	r2,-8(fp)
 8041928:	10800117 	ldw	r2,4(r2)
 804192c:	1004d23a 	srli	r2,r2,8
 8041930:	10bfc00c 	andi	r2,r2,65280
 8041934:	1886b03a 	or	r3,r3,r2
 8041938:	e0bffe17 	ldw	r2,-8(fp)
 804193c:	10800117 	ldw	r2,4(r2)
 8041940:	1004923a 	slli	r2,r2,8
 8041944:	10803fec 	andhi	r2,r2,255
 8041948:	1886b03a 	or	r3,r3,r2
 804194c:	e0bffe17 	ldw	r2,-8(fp)
 8041950:	10800117 	ldw	r2,4(r2)
 8041954:	1004963a 	slli	r2,r2,24
 8041958:	1884b03a 	or	r2,r3,r2
 804195c:	e0fffe17 	ldw	r3,-8(fp)
 8041960:	18c00217 	ldw	r3,8(r3)
 8041964:	1808d63a 	srli	r4,r3,24
 8041968:	e0fffe17 	ldw	r3,-8(fp)
 804196c:	18c00217 	ldw	r3,8(r3)
 8041970:	1806d23a 	srli	r3,r3,8
 8041974:	18ffc00c 	andi	r3,r3,65280
 8041978:	20c8b03a 	or	r4,r4,r3
 804197c:	e0fffe17 	ldw	r3,-8(fp)
 8041980:	18c00217 	ldw	r3,8(r3)
 8041984:	1806923a 	slli	r3,r3,8
 8041988:	18c03fec 	andhi	r3,r3,255
 804198c:	20c8b03a 	or	r4,r4,r3
 8041990:	e0fffe17 	ldw	r3,-8(fp)
 8041994:	18c00217 	ldw	r3,8(r3)
 8041998:	1806963a 	slli	r3,r3,24
 804199c:	20c6b03a 	or	r3,r4,r3
 80419a0:	e13ffe17 	ldw	r4,-8(fp)
 80419a4:	21000383 	ldbu	r4,14(r4)
 80419a8:	21003fcc 	andi	r4,r4,255
 80419ac:	e17ffe17 	ldw	r5,-8(fp)
 80419b0:	2940030b 	ldhu	r5,12(r5)
 80419b4:	297fffcc 	andi	r5,r5,65535
 80419b8:	280ad23a 	srli	r5,r5,8
 80419bc:	297fffcc 	andi	r5,r5,65535
 80419c0:	29803fcc 	andi	r6,r5,255
 80419c4:	e17ffe17 	ldw	r5,-8(fp)
 80419c8:	2940030b 	ldhu	r5,12(r5)
 80419cc:	297fffcc 	andi	r5,r5,65535
 80419d0:	280a923a 	slli	r5,r5,8
 80419d4:	297fffcc 	andi	r5,r5,65535
 80419d8:	314ab03a 	or	r5,r6,r5
 80419dc:	e1bffe17 	ldw	r6,-8(fp)
 80419e0:	3180040b 	ldhu	r6,16(r6)
 80419e4:	31bfffcc 	andi	r6,r6,65535
 80419e8:	e1fffe17 	ldw	r7,-8(fp)
 80419ec:	39c0048b 	ldhu	r7,18(r7)
 80419f0:	39ffffcc 	andi	r7,r7,65535
 80419f4:	e23ffe17 	ldw	r8,-8(fp)
 80419f8:	42000517 	ldw	r8,20(r8)
 80419fc:	e27ffe17 	ldw	r9,-8(fp)
 8041a00:	4a401f17 	ldw	r9,124(r9)
 8041a04:	e2bffe17 	ldw	r10,-8(fp)
 8041a08:	52802017 	ldw	r10,128(r10)
 8041a0c:	e2fffe17 	ldw	r11,-8(fp)
 8041a10:	5ac02103 	ldbu	r11,132(r11)
 8041a14:	5ac03fcc 	andi	r11,r11,255
 8041a18:	5ac0004c 	andi	r11,r11,1
 8041a1c:	dac00915 	stw	r11,36(sp)
 8041a20:	da800815 	stw	r10,32(sp)
 8041a24:	da400715 	stw	r9,28(sp)
 8041a28:	da000615 	stw	r8,24(sp)
 8041a2c:	d9c00515 	stw	r7,20(sp)
 8041a30:	d9800415 	stw	r6,16(sp)
 8041a34:	d9400315 	stw	r5,12(sp)
 8041a38:	d9000215 	stw	r4,8(sp)
 8041a3c:	d8c00115 	stw	r3,4(sp)
 8041a40:	d8800015 	stw	r2,0(sp)
 8041a44:	600f883a 	mov	r7,r12
 8041a48:	e1bffe17 	ldw	r6,-8(fp)
 8041a4c:	01420174 	movhi	r5,2053
 8041a50:	294d9504 	addi	r5,r5,13908
 8041a54:	e13ff817 	ldw	r4,-32(fp)
 8041a58:	80281f80 	call	80281f8 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 8041a5c:	e0bffe17 	ldw	r2,-8(fp)
 8041a60:	10800017 	ldw	r2,0(r2)
 8041a64:	e0bffe15 	stw	r2,-8(fp)
 8041a68:	e0bffe17 	ldw	r2,-8(fp)
 8041a6c:	103f831e 	bne	r2,zero,804187c <ipr_stats+0x100>
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
 8041a70:	e0bffd8b 	ldhu	r2,-10(fp)
 8041a74:	100d883a 	mov	r6,r2
 8041a78:	01420174 	movhi	r5,2053
 8041a7c:	294db004 	addi	r5,r5,14016
 8041a80:	e13ff817 	ldw	r4,-32(fp)
 8041a84:	80281f80 	call	80281f8 <ns_printf>

   return IPREASM_OK;
 8041a88:	0005883a 	mov	r2,zero
}
 8041a8c:	e6ffff04 	addi	sp,fp,-4
 8041a90:	dfc00217 	ldw	ra,8(sp)
 8041a94:	df000117 	ldw	fp,4(sp)
 8041a98:	dc000017 	ldw	r16,0(sp)
 8041a9c:	dec00304 	addi	sp,sp,12
 8041aa0:	f800283a 	ret

08041aa4 <ip_reasm_send_icmp_timex>:
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
 8041aa4:	defffc04 	addi	sp,sp,-16
 8041aa8:	dfc00315 	stw	ra,12(sp)
 8041aac:	df000215 	stw	fp,8(sp)
 8041ab0:	df000204 	addi	fp,sp,8
 8041ab4:	e13ffe15 	stw	r4,-8(fp)

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
 8041ab8:	e0bffe17 	ldw	r2,-8(fp)
 8041abc:	10801f17 	ldw	r2,124(r2)
 8041ac0:	10000626 	beq	r2,zero,8041adc <ip_reasm_send_icmp_timex+0x38>
      {
      pip = (struct ip *) irep->l3_hdr;
 8041ac4:	e0bffe17 	ldw	r2,-8(fp)
 8041ac8:	10802017 	ldw	r2,128(r2)
 8041acc:	e0bfff15 	stw	r2,-4(fp)
      icmp_timex (pip, TIMEX_REASSY_FAILED);
 8041ad0:	01400044 	movi	r5,1
 8041ad4:	e13fff17 	ldw	r4,-4(fp)
 8041ad8:	8049d8c0 	call	8049d8c <icmp_timex>
      }

   return IPREASM_OK;
 8041adc:	0005883a 	mov	r2,zero
}
 8041ae0:	e037883a 	mov	sp,fp
 8041ae4:	dfc00117 	ldw	ra,4(sp)
 8041ae8:	df000017 	ldw	fp,0(sp)
 8041aec:	dec00204 	addi	sp,sp,8
 8041af0:	f800283a 	ret

08041af4 <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 8041af4:	defff404 	addi	sp,sp,-48
 8041af8:	dfc00b15 	stw	ra,44(sp)
 8041afc:	df000a15 	stw	fp,40(sp)
 8041b00:	dc000915 	stw	r16,36(sp)
 8041b04:	df000a04 	addi	fp,sp,40
 8041b08:	e13ff615 	stw	r4,-40(fp)
   unsigned hdrlen;  /* length of IP header including options */
   unsigned len;     /* total length including IP header */
   unsigned short int num_pkts;
   PACKET * pktp;
   unsigned char i;
   int rcvrc = -1;
 8041b0c:	00bfffc4 	movi	r2,-1
 8041b10:	e0bffd15 	stw	r2,-12(fp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8041b14:	d0a07e17 	ldw	r2,-32264(gp)
 8041b18:	1081000c 	andi	r2,r2,1024
 8041b1c:	10000e26 	beq	r2,zero,8041b58 <ip_rcv+0x64>
 8041b20:	d0a07e17 	ldw	r2,-32264(gp)
 8041b24:	1080800c 	andi	r2,r2,512
 8041b28:	10000b26 	beq	r2,zero,8041b58 <ip_rcv+0x64>
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
         p->nb_plen, net_num(p->net));
 8041b2c:	e0bff617 	ldw	r2,-40(fp)
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 8041b30:	14000417 	ldw	r16,16(r2)
         p->nb_plen, net_num(p->net));
 8041b34:	e0bff617 	ldw	r2,-40(fp)
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 8041b38:	10800617 	ldw	r2,24(r2)
 8041b3c:	1009883a 	mov	r4,r2
 8041b40:	80261180 	call	8026118 <if_netnumber>
 8041b44:	100d883a 	mov	r6,r2
 8041b48:	800b883a 	mov	r5,r16
 8041b4c:	01020174 	movhi	r4,2053
 8041b50:	210db904 	addi	r4,r4,14052
 8041b54:	800325c0 	call	800325c <printf>
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   ip_mib.ipInReceives++;
 8041b58:	008201b4 	movhi	r2,2054
 8041b5c:	10bd2217 	ldw	r2,-2936(r2)
 8041b60:	10c00044 	addi	r3,r2,1
 8041b64:	008201b4 	movhi	r2,2054
 8041b68:	10fd2215 	stw	r3,-2936(r2)
   pip = ip_head(p);
 8041b6c:	e0bff617 	ldw	r2,-40(fp)
 8041b70:	10800317 	ldw	r2,12(r2)
 8041b74:	e0bffc15 	stw	r2,-16(fp)

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 8041b78:	e0bff617 	ldw	r2,-40(fp)
 8041b7c:	10800417 	ldw	r2,16(r2)
 8041b80:	e0fffc17 	ldw	r3,-16(fp)
 8041b84:	18c0008b 	ldhu	r3,2(r3)
 8041b88:	18ffffcc 	andi	r3,r3,65535
 8041b8c:	1806d23a 	srli	r3,r3,8
 8041b90:	18ffffcc 	andi	r3,r3,65535
 8041b94:	19003fcc 	andi	r4,r3,255
 8041b98:	e0fffc17 	ldw	r3,-16(fp)
 8041b9c:	18c0008b 	ldhu	r3,2(r3)
 8041ba0:	18ffffcc 	andi	r3,r3,65535
 8041ba4:	1806923a 	slli	r3,r3,8
 8041ba8:	18ffffcc 	andi	r3,r3,65535
 8041bac:	20c6b03a 	or	r3,r4,r3
 8041bb0:	10c01d2e 	bgeu	r2,r3,8041c28 <ip_rcv+0x134>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8041bb4:	d0a07e17 	ldw	r2,-32264(gp)
 8041bb8:	1081000c 	andi	r2,r2,1024
 8041bbc:	10000c26 	beq	r2,zero,8041bf0 <ip_rcv+0xfc>
 8041bc0:	d0a07e17 	ldw	r2,-32264(gp)
 8041bc4:	1080800c 	andi	r2,r2,512
 8041bc8:	10000926 	beq	r2,zero,8041bf0 <ip_rcv+0xfc>
      {
         dprintf("ip_rcv: bad pkt len\n");
 8041bcc:	01020174 	movhi	r4,2053
 8041bd0:	210dc204 	addi	r4,r4,14088
 8041bd4:	80033800 	call	8003380 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8041bd8:	d0a07e17 	ldw	r2,-32264(gp)
 8041bdc:	1080008c 	andi	r2,r2,2
 8041be0:	10000326 	beq	r2,zero,8041bf0 <ip_rcv+0xfc>
 8041be4:	e0bff617 	ldw	r2,-40(fp)
 8041be8:	1009883a 	mov	r4,r2
 8041bec:	803fa040 	call	803fa04 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 8041bf0:	008201b4 	movhi	r2,2054
 8041bf4:	10bd2317 	ldw	r2,-2932(r2)
 8041bf8:	10c00044 	addi	r3,r2,1
 8041bfc:	008201b4 	movhi	r2,2054
 8041c00:	10fd2315 	stw	r3,-2932(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041c04:	01000084 	movi	r4,2
 8041c08:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8041c0c:	e0bff617 	ldw	r2,-40(fp)
 8041c10:	1009883a 	mov	r4,r2
 8041c14:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041c18:	01000084 	movi	r4,2
 8041c1c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 8041c20:	00bff804 	movi	r2,-32
 8041c24:	00008206 	br	8041e30 <ip_rcv+0x33c>
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
 8041c28:	e0bffc17 	ldw	r2,-16(fp)
 8041c2c:	1080008b 	ldhu	r2,2(r2)
 8041c30:	10bfffcc 	andi	r2,r2,65535
 8041c34:	1004d23a 	srli	r2,r2,8
 8041c38:	10bfffcc 	andi	r2,r2,65535
 8041c3c:	10c03fcc 	andi	r3,r2,255
 8041c40:	e0bffc17 	ldw	r2,-16(fp)
 8041c44:	1080008b 	ldhu	r2,2(r2)
 8041c48:	10bfffcc 	andi	r2,r2,65535
 8041c4c:	1004923a 	slli	r2,r2,8
 8041c50:	10bfffcc 	andi	r2,r2,65535
 8041c54:	1884b03a 	or	r2,r3,r2
 8041c58:	e0bffb15 	stw	r2,-20(fp)
   p->nb_plen = len;       /* fix pkt len */
 8041c5c:	e0bff617 	ldw	r2,-40(fp)
 8041c60:	e0fffb17 	ldw	r3,-20(fp)
 8041c64:	10c00415 	stw	r3,16(r2)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
 8041c68:	e0bffc17 	ldw	r2,-16(fp)
 8041c6c:	10800003 	ldbu	r2,0(r2)
 8041c70:	10803fcc 	andi	r2,r2,255
 8041c74:	1004d13a 	srli	r2,r2,4
 8041c78:	10803fcc 	andi	r2,r2,255
 8041c7c:	10800120 	cmpeqi	r2,r2,4
 8041c80:	10001d1e 	bne	r2,zero,8041cf8 <ip_rcv+0x204>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8041c84:	d0a07e17 	ldw	r2,-32264(gp)
 8041c88:	1081000c 	andi	r2,r2,1024
 8041c8c:	10000c26 	beq	r2,zero,8041cc0 <ip_rcv+0x1cc>
 8041c90:	d0a07e17 	ldw	r2,-32264(gp)
 8041c94:	1080800c 	andi	r2,r2,512
 8041c98:	10000926 	beq	r2,zero,8041cc0 <ip_rcv+0x1cc>
      {
         dprintf("ip_rcv: bad version number\n");
 8041c9c:	01020174 	movhi	r4,2053
 8041ca0:	210dc704 	addi	r4,r4,14108
 8041ca4:	80033800 	call	8003380 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8041ca8:	d0a07e17 	ldw	r2,-32264(gp)
 8041cac:	1080008c 	andi	r2,r2,2
 8041cb0:	10000326 	beq	r2,zero,8041cc0 <ip_rcv+0x1cc>
 8041cb4:	e0bff617 	ldw	r2,-40(fp)
 8041cb8:	1009883a 	mov	r4,r2
 8041cbc:	803fa040 	call	803fa04 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 8041cc0:	008201b4 	movhi	r2,2054
 8041cc4:	10bd2317 	ldw	r2,-2932(r2)
 8041cc8:	10c00044 	addi	r3,r2,1
 8041ccc:	008201b4 	movhi	r2,2054
 8041cd0:	10fd2315 	stw	r3,-2932(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041cd4:	01000084 	movi	r4,2
 8041cd8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8041cdc:	e0bff617 	ldw	r2,-40(fp)
 8041ce0:	1009883a 	mov	r4,r2
 8041ce4:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041ce8:	01000084 	movi	r4,2
 8041cec:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 8041cf0:	00bff804 	movi	r2,-32
 8041cf4:	00004e06 	br	8041e30 <ip_rcv+0x33c>
   }

   csum = pip->ip_chksum;
 8041cf8:	e0bffc17 	ldw	r2,-16(fp)
 8041cfc:	1080028b 	ldhu	r2,10(r2)
 8041d00:	e0bffa8d 	sth	r2,-22(fp)
   pip->ip_chksum = 0;
 8041d04:	e0bffc17 	ldw	r2,-16(fp)
 8041d08:	1000028d 	sth	zero,10(r2)
   hdrlen = ip_hlen(pip);
 8041d0c:	e0bffc17 	ldw	r2,-16(fp)
 8041d10:	10800003 	ldbu	r2,0(r2)
 8041d14:	10803fcc 	andi	r2,r2,255
 8041d18:	100490ba 	slli	r2,r2,2
 8041d1c:	10800f0c 	andi	r2,r2,60
 8041d20:	e0bff915 	stw	r2,-28(fp)
   tempsum = ~cksum(pip, hdrlen >> 1);
 8041d24:	e0bff917 	ldw	r2,-28(fp)
 8041d28:	1004d07a 	srli	r2,r2,1
 8041d2c:	100b883a 	mov	r5,r2
 8041d30:	e13ffc17 	ldw	r4,-16(fp)
 8041d34:	8027be00 	call	8027be0 <cksum>
 8041d38:	0084303a 	nor	r2,zero,r2
 8041d3c:	e0bff88d 	sth	r2,-30(fp)

   if (csum != tempsum)
 8041d40:	e0fffa8b 	ldhu	r3,-22(fp)
 8041d44:	e0bff88b 	ldhu	r2,-30(fp)
 8041d48:	18802026 	beq	r3,r2,8041dcc <ip_rcv+0x2d8>
   {
      pip->ip_chksum = csum;
 8041d4c:	e0bffc17 	ldw	r2,-16(fp)
 8041d50:	e0fffa8b 	ldhu	r3,-22(fp)
 8041d54:	10c0028d 	sth	r3,10(r2)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8041d58:	d0a07e17 	ldw	r2,-32264(gp)
 8041d5c:	1081000c 	andi	r2,r2,1024
 8041d60:	10000c26 	beq	r2,zero,8041d94 <ip_rcv+0x2a0>
 8041d64:	d0a07e17 	ldw	r2,-32264(gp)
 8041d68:	1080800c 	andi	r2,r2,512
 8041d6c:	10000926 	beq	r2,zero,8041d94 <ip_rcv+0x2a0>
      {
         dprintf("ip_rcv: bad xsum\n");
 8041d70:	01020174 	movhi	r4,2053
 8041d74:	210dce04 	addi	r4,r4,14136
 8041d78:	80033800 	call	8003380 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 8041d7c:	d0a07e17 	ldw	r2,-32264(gp)
 8041d80:	1080008c 	andi	r2,r2,2
 8041d84:	10000326 	beq	r2,zero,8041d94 <ip_rcv+0x2a0>
 8041d88:	e0bff617 	ldw	r2,-40(fp)
 8041d8c:	1009883a 	mov	r4,r2
 8041d90:	803fa040 	call	803fa04 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 8041d94:	008201b4 	movhi	r2,2054
 8041d98:	10bd2317 	ldw	r2,-2932(r2)
 8041d9c:	10c00044 	addi	r3,r2,1
 8041da0:	008201b4 	movhi	r2,2054
 8041da4:	10fd2315 	stw	r3,-2932(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8041da8:	01000084 	movi	r4,2
 8041dac:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8041db0:	e0bff617 	ldw	r2,-40(fp)
 8041db4:	1009883a 	mov	r4,r2
 8041db8:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041dbc:	01000084 	movi	r4,2
 8041dc0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 8041dc4:	00bff804 	movi	r2,-32
 8041dc8:	00001906 	br	8041e30 <ip_rcv+0x33c>
   }

   pip->ip_chksum = csum;
 8041dcc:	e0bffc17 	ldw	r2,-16(fp)
 8041dd0:	e0fffa8b 	ldhu	r3,-22(fp)
 8041dd4:	10c0028d 	sth	r3,10(r2)
#endif

    /* start off by assuming that we will only process the "current" packet;
     * these values may get overwritten by the NAT module if it returns
     * more than one packet back to this function (ip_rcv ()) */
    num_pkts = 1;
 8041dd8:	00800044 	movi	r2,1
 8041ddc:	e0bff80d 	sth	r2,-32(fp)
    pktp = &p;
 8041de0:	e0bff604 	addi	r2,fp,-40
 8041de4:	e0bff715 	stw	r2,-36(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
 8041de8:	e03ffec5 	stb	zero,-5(fp)
 8041dec:	00000b06 	br	8041e1c <ip_rcv+0x328>
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
 8041df0:	e0bffec3 	ldbu	r2,-5(fp)
 8041df4:	100490ba 	slli	r2,r2,2
 8041df8:	e0fff717 	ldw	r3,-36(fp)
 8041dfc:	1885883a 	add	r2,r3,r2
 8041e00:	10800017 	ldw	r2,0(r2)
 8041e04:	1009883a 	mov	r4,r2
 8041e08:	8041e480 	call	8041e48 <ip_rcv_phase2>
 8041e0c:	e0bffd15 	stw	r2,-12(fp)
   for (i = 0; i < num_pkts; ++i)
 8041e10:	e0bffec3 	ldbu	r2,-5(fp)
 8041e14:	10800044 	addi	r2,r2,1
 8041e18:	e0bffec5 	stb	r2,-5(fp)
 8041e1c:	e0fffec3 	ldbu	r3,-5(fp)
 8041e20:	e0bff80b 	ldhu	r2,-32(fp)
 8041e24:	18ffffcc 	andi	r3,r3,65535
 8041e28:	18bff136 	bltu	r3,r2,8041df0 <ip_rcv+0x2fc>
   if (pktp != &p) nat_free (pktp);
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
 8041e2c:	e0bffd17 	ldw	r2,-12(fp)
}
 8041e30:	e6ffff04 	addi	sp,fp,-4
 8041e34:	dfc00217 	ldw	ra,8(sp)
 8041e38:	df000117 	ldw	fp,4(sp)
 8041e3c:	dc000017 	ldw	r16,0(sp)
 8041e40:	dec00304 	addi	sp,sp,12
 8041e44:	f800283a 	ret

08041e48 <ip_rcv_phase2>:


int ip_rcv_phase2 (PACKET p)
{
 8041e48:	defff504 	addi	sp,sp,-44
 8041e4c:	dfc00a15 	stw	ra,40(sp)
 8041e50:	df000915 	stw	fp,36(sp)
 8041e54:	df000904 	addi	fp,sp,36
 8041e58:	e13ff815 	stw	r4,-32(fp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
 8041e5c:	e0bff817 	ldw	r2,-32(fp)
 8041e60:	10800317 	ldw	r2,12(r2)
 8041e64:	e0bfff15 	stw	r2,-4(fp)
   nt = p->net;      /* which interface it came in on */
 8041e68:	e0bff817 	ldw	r2,-32(fp)
 8041e6c:	10800617 	ldw	r2,24(r2)
 8041e70:	e0bffe15 	stw	r2,-8(fp)

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 8041e74:	e0bfff17 	ldw	r2,-4(fp)
 8041e78:	10800417 	ldw	r2,16(r2)
 8041e7c:	1006d63a 	srli	r3,r2,24
 8041e80:	e0bfff17 	ldw	r2,-4(fp)
 8041e84:	10800417 	ldw	r2,16(r2)
 8041e88:	1004d23a 	srli	r2,r2,8
 8041e8c:	10bfc00c 	andi	r2,r2,65280
 8041e90:	1886b03a 	or	r3,r3,r2
 8041e94:	e0bfff17 	ldw	r2,-4(fp)
 8041e98:	10800417 	ldw	r2,16(r2)
 8041e9c:	1004923a 	slli	r2,r2,8
 8041ea0:	10803fec 	andhi	r2,r2,255
 8041ea4:	1886b03a 	or	r3,r3,r2
 8041ea8:	e0bfff17 	ldw	r2,-4(fp)
 8041eac:	10800417 	ldw	r2,16(r2)
 8041eb0:	1004963a 	slli	r2,r2,24
 8041eb4:	1884b03a 	or	r2,r3,r2
 8041eb8:	10fc002c 	andhi	r3,r2,61440
 8041ebc:	00b80034 	movhi	r2,57344
 8041ec0:	1880151e 	bne	r3,r2,8041f18 <ip_rcv_phase2+0xd0>
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
 8041ec4:	e0bfff17 	ldw	r2,-4(fp)
 8041ec8:	10800417 	ldw	r2,16(r2)
 8041ecc:	e17ffe17 	ldw	r5,-8(fp)
 8041ed0:	1009883a 	mov	r4,r2
 8041ed4:	80429ec0 	call	80429ec <lookup_mcast>
 8041ed8:	e0bffb15 	stw	r2,-20(fp)
      if (inm == NULL) 
 8041edc:	e0bffb17 	ldw	r2,-20(fp)
 8041ee0:	1000fb1e 	bne	r2,zero,80422d0 <ip_rcv_phase2+0x488>
      {
         ip_mib.ipOutNoRoutes++;
 8041ee4:	008201b4 	movhi	r2,2054
 8041ee8:	10bd2b17 	ldw	r2,-2900(r2)
 8041eec:	10c00044 	addi	r3,r2,1
 8041ef0:	008201b4 	movhi	r2,2054
 8041ef4:	10fd2b15 	stw	r3,-2900(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8041ef8:	01000084 	movi	r4,2
 8041efc:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 8041f00:	e13ff817 	ldw	r4,-32(fp)
 8041f04:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8041f08:	01000084 	movi	r4,2
 8041f0c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NOT_MINE);
 8041f10:	00800084 	movi	r2,2
 8041f14:	00012f06 	br	80423d4 <ip_rcv_phase2+0x58c>
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 8041f18:	e0bfff17 	ldw	r2,-4(fp)
 8041f1c:	10c00417 	ldw	r3,16(r2)
 8041f20:	e0bffe17 	ldw	r2,-8(fp)
 8041f24:	10800a17 	ldw	r2,40(r2)
 8041f28:	1880eb26 	beq	r3,r2,80422d8 <ip_rcv_phase2+0x490>
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8041f2c:	e0bfff17 	ldw	r2,-4(fp)
 8041f30:	10800417 	ldw	r2,16(r2)
   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 8041f34:	10bfffe0 	cmpeqi	r2,r2,-1
 8041f38:	1000e71e 	bne	r2,zero,80422d8 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
 8041f3c:	e0bfff17 	ldw	r2,-4(fp)
 8041f40:	10c00417 	ldw	r3,16(r2)
 8041f44:	e0bffe17 	ldw	r2,-8(fp)
 8041f48:	10800e17 	ldw	r2,56(r2)
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8041f4c:	1880e226 	beq	r3,r2,80422d8 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8041f50:	e0bfff17 	ldw	r2,-4(fp)
 8041f54:	10c00417 	ldw	r3,16(r2)
 8041f58:	e0bffe17 	ldw	r2,-8(fp)
 8041f5c:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
 8041f60:	1880dd26 	beq	r3,r2,80422d8 <ip_rcv_phase2+0x490>
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
 8041f64:	e0bfff17 	ldw	r2,-4(fp)
 8041f68:	10c00417 	ldw	r3,16(r2)
 8041f6c:	e0bffe17 	ldw	r2,-8(fp)
 8041f70:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8041f74:	1880d826 	beq	r3,r2,80422d8 <ip_rcv_phase2+0x490>
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
 8041f78:	e0bffe17 	ldw	r2,-8(fp)
 8041f7c:	10c00a17 	ldw	r3,40(r2)
 8041f80:	e0bffe17 	ldw	r2,-8(fp)
 8041f84:	10800c17 	ldw	r2,48(r2)
 8041f88:	0084303a 	nor	r2,zero,r2
 8041f8c:	1884703a 	and	r2,r3,r2
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
 8041f90:	1000d126 	beq	r2,zero,80422d8 <ip_rcv_phase2+0x490>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8041f94:	d0a07e17 	ldw	r2,-32264(gp)
 8041f98:	1081000c 	andi	r2,r2,1024
 8041f9c:	10001826 	beq	r2,zero,8042000 <ip_rcv_phase2+0x1b8>
 8041fa0:	d0a07e17 	ldw	r2,-32264(gp)
 8041fa4:	1080800c 	andi	r2,r2,512
 8041fa8:	10001526 	beq	r2,zero,8042000 <ip_rcv_phase2+0x1b8>
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
       PUSH_IPADDR(pip->ip_dest));
 8041fac:	e0bfff17 	ldw	r2,-4(fp)
 8041fb0:	10800417 	ldw	r2,16(r2)
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8041fb4:	10c03fcc 	andi	r3,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8041fb8:	e0bfff17 	ldw	r2,-4(fp)
 8041fbc:	10800417 	ldw	r2,16(r2)
 8041fc0:	1004d23a 	srli	r2,r2,8
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8041fc4:	11003fcc 	andi	r4,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8041fc8:	e0bfff17 	ldw	r2,-4(fp)
 8041fcc:	10800417 	ldw	r2,16(r2)
 8041fd0:	1004d43a 	srli	r2,r2,16
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8041fd4:	11403fcc 	andi	r5,r2,255
       PUSH_IPADDR(pip->ip_dest));
 8041fd8:	e0bfff17 	ldw	r2,-4(fp)
 8041fdc:	10800417 	ldw	r2,16(r2)
 8041fe0:	1004d63a 	srli	r2,r2,24
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 8041fe4:	d8800015 	stw	r2,0(sp)
 8041fe8:	280f883a 	mov	r7,r5
 8041fec:	200d883a 	mov	r6,r4
 8041ff0:	180b883a 	mov	r5,r3
 8041ff4:	01020174 	movhi	r4,2053
 8041ff8:	210dd304 	addi	r4,r4,14156
 8041ffc:	800325c0 	call	800325c <printf>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
 8042000:	008201b4 	movhi	r2,2054
 8042004:	10bd2017 	ldw	r2,-2944(r2)
 8042008:	10800098 	cmpnei	r2,r2,2
 804200c:	10000d1e 	bne	r2,zero,8042044 <ip_rcv_phase2+0x1fc>
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 8042010:	008201b4 	movhi	r2,2054
 8042014:	10bd2a17 	ldw	r2,-2904(r2)
 8042018:	10c00044 	addi	r3,r2,1
 804201c:	008201b4 	movhi	r2,2054
 8042020:	10fd2a15 	stw	r3,-2904(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 8042024:	01000084 	movi	r4,2
 8042028:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
         pk_free(p);
 804202c:	e13ff817 	ldw	r4,-32(fp)
 8042030:	802bb980 	call	802bb98 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042034:	01000084 	movi	r4,2
 8042038:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_NO_ROUTE;
 804203c:	00bff7c4 	movi	r2,-33
 8042040:	0000e406 	br	80423d4 <ip_rcv_phase2+0x58c>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
 8042044:	008201b4 	movhi	r2,2054
 8042048:	10bd2517 	ldw	r2,-2924(r2)
 804204c:	10c00044 	addi	r3,r2,1
 8042050:	008201b4 	movhi	r2,2054
 8042054:	10fd2515 	stw	r3,-2924(r2)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
 8042058:	e0bfff17 	ldw	r2,-4(fp)
 804205c:	10800203 	ldbu	r2,8(r2)
 8042060:	10803fcc 	andi	r2,r2,255
 8042064:	108000a8 	cmpgeui	r2,r2,2
 8042068:	10001a1e 	bne	r2,zero,80420d4 <ip_rcv_phase2+0x28c>
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 804206c:	008201b4 	movhi	r2,2054
 8042070:	10bd2a17 	ldw	r2,-2904(r2)
 8042074:	10c00044 	addi	r3,r2,1
 8042078:	008201b4 	movhi	r2,2054
 804207c:	10fd2a15 	stw	r3,-2904(r2)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
 8042080:	e0bfff17 	ldw	r2,-4(fp)
 8042084:	10c00317 	ldw	r3,12(r2)
 8042088:	e0bff817 	ldw	r2,-32(fp)
 804208c:	10800617 	ldw	r2,24(r2)
 8042090:	11000a17 	ldw	r4,40(r2)
 8042094:	e0bff817 	ldw	r2,-32(fp)
 8042098:	10800617 	ldw	r2,24(r2)
 804209c:	d8800015 	stw	r2,0(sp)
 80420a0:	01c2c004 	movi	r7,2816
 80420a4:	e1bfff17 	ldw	r6,-4(fp)
 80420a8:	200b883a 	mov	r5,r4
 80420ac:	1809883a 	mov	r4,r3
 80420b0:	8049ab80 	call	8049ab8 <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 80420b4:	01000084 	movi	r4,2
 80420b8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 80420bc:	e13ff817 	ldw	r4,-32(fp)
 80420c0:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80420c4:	01000084 	movi	r4,2
 80420c8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 80420cc:	00bff7c4 	movi	r2,-33
 80420d0:	0000c006 	br	80423d4 <ip_rcv_phase2+0x58c>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
 80420d4:	e0bfff17 	ldw	r2,-4(fp)
 80420d8:	10c00417 	ldw	r3,16(r2)
 80420dc:	e0bff817 	ldw	r2,-32(fp)
 80420e0:	10c00715 	stw	r3,28(r2)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
 80420e4:	e0bff817 	ldw	r2,-32(fp)
 80420e8:	10800717 	ldw	r2,28(r2)
 80420ec:	e0fff904 	addi	r3,fp,-28
 80420f0:	180b883a 	mov	r5,r3
 80420f4:	1009883a 	mov	r4,r2
 80420f8:	803fca80 	call	803fca8 <iproute>
 80420fc:	e0bffd15 	stw	r2,-12(fp)
 8042100:	e0bffd17 	ldw	r2,-12(fp)
 8042104:	10000d1e 	bne	r2,zero,804213c <ip_rcv_phase2+0x2f4>
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
 8042108:	008201b4 	movhi	r2,2054
 804210c:	10bd2b17 	ldw	r2,-2900(r2)
 8042110:	10c00044 	addi	r3,r2,1
 8042114:	008201b4 	movhi	r2,2054
 8042118:	10fd2b15 	stw	r3,-2900(r2)
            LOCK_NET_RESOURCE(FREEQ_RESID);
 804211c:	01000084 	movi	r4,2
 8042120:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
            pk_free(p);
 8042124:	e13ff817 	ldw	r4,-32(fp)
 8042128:	802bb980 	call	802bb98 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804212c:	01000084 	movi	r4,2
 8042130:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 8042134:	00bff7c4 	movi	r2,-33
 8042138:	0000a606 	br	80423d4 <ip_rcv_phase2+0x58c>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
 804213c:	e0bfff17 	ldw	r2,-4(fp)
 8042140:	10c00417 	ldw	r3,16(r2)
 8042144:	e0bffd17 	ldw	r2,-12(fp)
 8042148:	10800a17 	ldw	r2,40(r2)
 804214c:	18806426 	beq	r3,r2,80422e0 <ip_rcv_phase2+0x498>
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
 8042150:	e0bfff17 	ldw	r2,-4(fp)
 8042154:	10c00417 	ldw	r3,16(r2)
 8042158:	e0bffd17 	ldw	r2,-12(fp)
 804215c:	10800e17 	ldw	r2,56(r2)
 8042160:	18806126 	beq	r3,r2,80422e8 <ip_rcv_phase2+0x4a0>
            (pip->ip_dest == p->net->n_netbr))
 8042164:	e0bfff17 	ldw	r2,-4(fp)
 8042168:	10c00417 	ldw	r3,16(r2)
 804216c:	e0bff817 	ldw	r2,-32(fp)
 8042170:	10800617 	ldw	r2,24(r2)
 8042174:	10800e17 	ldw	r2,56(r2)
         if((pip->ip_dest == outnet->n_netbr) ||
 8042178:	18805b26 	beq	r3,r2,80422e8 <ip_rcv_phase2+0x4a0>
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
 804217c:	e0bff817 	ldw	r2,-32(fp)
 8042180:	e0fffd17 	ldw	r3,-12(fp)
 8042184:	10c00615 	stw	r3,24(r2)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
 8042188:	e0bff817 	ldw	r2,-32(fp)
 804218c:	10800417 	ldw	r2,16(r2)
 8042190:	e0fff817 	ldw	r3,-32(fp)
 8042194:	18c00617 	ldw	r3,24(r3)
 8042198:	18c00817 	ldw	r3,32(r3)
 804219c:	10c5883a 	add	r2,r2,r3
 80421a0:	e0fffd17 	ldw	r3,-12(fp)
 80421a4:	18c00917 	ldw	r3,36(r3)
 80421a8:	1880352e 	bgeu	r3,r2,8042280 <ip_rcv_phase2+0x438>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
 80421ac:	e0bfff17 	ldw	r2,-4(fp)
 80421b0:	1080018b 	ldhu	r2,6(r2)
 80421b4:	10bfffcc 	andi	r2,r2,65535
 80421b8:	1004d23a 	srli	r2,r2,8
 80421bc:	10bfffcc 	andi	r2,r2,65535
 80421c0:	10c03fcc 	andi	r3,r2,255
 80421c4:	e0bfff17 	ldw	r2,-4(fp)
 80421c8:	1080018b 	ldhu	r2,6(r2)
 80421cc:	10bfffcc 	andi	r2,r2,65535
 80421d0:	1004923a 	slli	r2,r2,8
 80421d4:	10bfffcc 	andi	r2,r2,65535
 80421d8:	1884b03a 	or	r2,r3,r2
 80421dc:	1090000c 	andi	r2,r2,16384
 80421e0:	10001a26 	beq	r2,zero,804224c <ip_rcv_phase2+0x404>
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 80421e4:	e0bfff17 	ldw	r2,-4(fp)
 80421e8:	10c00317 	ldw	r3,12(r2)
 80421ec:	e0bff817 	ldw	r2,-32(fp)
 80421f0:	10800617 	ldw	r2,24(r2)
 80421f4:	11000a17 	ldw	r4,40(r2)
 80421f8:	e0bff817 	ldw	r2,-32(fp)
 80421fc:	10800617 	ldw	r2,24(r2)
 8042200:	d8800015 	stw	r2,0(sp)
 8042204:	01c00104 	movi	r7,4
 8042208:	e1bfff17 	ldw	r6,-4(fp)
 804220c:	200b883a 	mov	r5,r4
 8042210:	1809883a 	mov	r4,r3
 8042214:	8049ab80 	call	8049ab8 <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
 8042218:	008201b4 	movhi	r2,2054
 804221c:	10bd3117 	ldw	r2,-2876(r2)
 8042220:	10c00044 	addi	r3,r2,1
 8042224:	008201b4 	movhi	r2,2054
 8042228:	10fd3115 	stw	r3,-2876(r2)
               LOCK_NET_RESOURCE(FREEQ_RESID);
 804222c:	01000084 	movi	r4,2
 8042230:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
               pk_free(p);
 8042234:	e13ff817 	ldw	r4,-32(fp)
 8042238:	802bb980 	call	802bb98 <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804223c:	01000084 	movi	r4,2
 8042240:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
 8042244:	00bffd44 	movi	r2,-11
 8042248:	00006206 	br	80423d4 <ip_rcv_phase2+0x58c>
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
 804224c:	e0bfff17 	ldw	r2,-4(fp)
 8042250:	10800203 	ldbu	r2,8(r2)
 8042254:	10bfffc4 	addi	r2,r2,-1
 8042258:	1007883a 	mov	r3,r2
 804225c:	e0bfff17 	ldw	r2,-4(fp)
 8042260:	10c00205 	stb	r3,8(r2)
            err = ip_fragment(p, firsthop);
 8042264:	e0bff917 	ldw	r2,-28(fp)
 8042268:	100b883a 	mov	r5,r2
 804226c:	e13ff817 	ldw	r4,-32(fp)
 8042270:	803f3c40 	call	803f3c4 <ip_fragment>
 8042274:	e0bffc15 	stw	r2,-16(fp)
            IN_PROFILER(PF_IP, PF_EXIT);
            return(err);
 8042278:	e0bffc17 	ldw	r2,-16(fp)
 804227c:	00005506 	br	80423d4 <ip_rcv_phase2+0x58c>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
 8042280:	e0bfff17 	ldw	r2,-4(fp)
 8042284:	10800203 	ldbu	r2,8(r2)
 8042288:	10bfffc4 	addi	r2,r2,-1
 804228c:	1007883a 	mov	r3,r2
 8042290:	e0bfff17 	ldw	r2,-4(fp)
 8042294:	10c00205 	stb	r3,8(r2)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
 8042298:	e0bfff17 	ldw	r2,-4(fp)
 804229c:	1000028d 	sth	zero,10(r2)
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 80422a0:	01400284 	movi	r5,10
 80422a4:	e13fff17 	ldw	r4,-4(fp)
 80422a8:	8027be00 	call	8027be0 <cksum>
 80422ac:	0084303a 	nor	r2,zero,r2
 80422b0:	1007883a 	mov	r3,r2
 80422b4:	e0bfff17 	ldw	r2,-4(fp)
 80422b8:	10c0028d 	sth	r3,10(r2)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
 80422bc:	e0bff917 	ldw	r2,-28(fp)
 80422c0:	100b883a 	mov	r5,r2
 80422c4:	e13ff817 	ldw	r4,-32(fp)
 80422c8:	8025c0c0 	call	8025c0c <ip2mac>
 80422cc:	00004106 	br	80423d4 <ip_rcv_phase2+0x58c>
         goto ours;
 80422d0:	0001883a 	nop
 80422d4:	00000506 	br	80422ec <ip_rcv_phase2+0x4a4>
      return(ENP_NOT_MINE);
#endif
   }

#if defined (IP_MULTICAST) || defined (IP_ROUTING)
ours:
 80422d8:	0001883a 	nop
 80422dc:	00000306 	br	80422ec <ip_rcv_phase2+0x4a4>
            goto ours;
 80422e0:	0001883a 	nop
 80422e4:	00000106 	br	80422ec <ip_rcv_phase2+0x4a4>
            goto ours;            
 80422e8:	0001883a 	nop
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
 80422ec:	e0bfff17 	ldw	r2,-4(fp)
 80422f0:	1080018b 	ldhu	r2,6(r2)
 80422f4:	10bfffcc 	andi	r2,r2,65535
 80422f8:	1004d23a 	srli	r2,r2,8
 80422fc:	1007883a 	mov	r3,r2
 8042300:	e0bfff17 	ldw	r2,-4(fp)
 8042304:	1080018b 	ldhu	r2,6(r2)
 8042308:	10bfffcc 	andi	r2,r2,65535
 804230c:	1004923a 	slli	r2,r2,8
 8042310:	1884b03a 	or	r2,r3,r2
 8042314:	e0bffa8d 	sth	r2,-22(fp)
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 8042318:	e0bffa8b 	ldhu	r2,-22(fp)
 804231c:	1088000c 	andi	r2,r2,8192
 8042320:	1000051e 	bne	r2,zero,8042338 <ip_rcv_phase2+0x4f0>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
 8042324:	e0fffa8b 	ldhu	r3,-22(fp)
 8042328:	00bffff4 	movhi	r2,65535
 804232c:	1087ffc4 	addi	r2,r2,8191
 8042330:	1884703a 	and	r2,r3,r2
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 8042334:	10002526 	beq	r2,zero,80423cc <ip_rcv_phase2+0x584>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8042338:	d0a07e17 	ldw	r2,-32264(gp)
 804233c:	1081000c 	andi	r2,r2,1024
 8042340:	10001a26 	beq	r2,zero,80423ac <ip_rcv_phase2+0x564>
 8042344:	d0a07e17 	ldw	r2,-32264(gp)
 8042348:	1080800c 	andi	r2,r2,512
 804234c:	10001726 	beq	r2,zero,80423ac <ip_rcv_phase2+0x564>
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
          PUSH_IPADDR(pip->ip_src));
 8042350:	e0bfff17 	ldw	r2,-4(fp)
 8042354:	10800317 	ldw	r2,12(r2)
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8042358:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(pip->ip_src));
 804235c:	e0bfff17 	ldw	r2,-4(fp)
 8042360:	10800317 	ldw	r2,12(r2)
 8042364:	1004d23a 	srli	r2,r2,8
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8042368:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(pip->ip_src));
 804236c:	e0bfff17 	ldw	r2,-4(fp)
 8042370:	10800317 	ldw	r2,12(r2)
 8042374:	1004d43a 	srli	r2,r2,16
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8042378:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(pip->ip_src));
 804237c:	e0bfff17 	ldw	r2,-4(fp)
 8042380:	10800317 	ldw	r2,12(r2)
 8042384:	1004d63a 	srli	r2,r2,24
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 8042388:	d8800015 	stw	r2,0(sp)
 804238c:	280f883a 	mov	r7,r5
 8042390:	200d883a 	mov	r6,r4
 8042394:	180b883a 	mov	r5,r3
 8042398:	01020174 	movhi	r4,2053
 804239c:	210ddf04 	addi	r4,r4,14204
 80423a0:	800325c0 	call	800325c <printf>
         ip_dump(p);
 80423a4:	e13ff817 	ldw	r4,-32(fp)
 80423a8:	803fa040 	call	803fa04 <ip_dump>
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
 80423ac:	008201b4 	movhi	r2,2054
 80423b0:	10bd2d17 	ldw	r2,-2892(r2)
 80423b4:	10c00044 	addi	r3,r2,1
 80423b8:	008201b4 	movhi	r2,2054
 80423bc:	10fd2d15 	stw	r3,-2892(r2)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
 80423c0:	e13ff817 	ldw	r4,-32(fp)
 80423c4:	80405780 	call	8040578 <ip_reassm>
 80423c8:	00000206 	br	80423d4 <ip_rcv_phase2+0x58c>
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
 80423cc:	e13ff817 	ldw	r4,-32(fp)
 80423d0:	80423e80 	call	80423e8 <ip_demux>
}
 80423d4:	e037883a 	mov	sp,fp
 80423d8:	dfc00117 	ldw	ra,4(sp)
 80423dc:	df000017 	ldw	fp,0(sp)
 80423e0:	dec00204 	addi	sp,sp,8
 80423e4:	f800283a 	ret

080423e8 <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 80423e8:	defff904 	addi	sp,sp,-28
 80423ec:	dfc00615 	stw	ra,24(sp)
 80423f0:	df000515 	stw	fp,20(sp)
 80423f4:	df000504 	addi	fp,sp,20
 80423f8:	e13ffd15 	stw	r4,-12(fp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
 80423fc:	e0bffd17 	ldw	r2,-12(fp)
 8042400:	10800317 	ldw	r2,12(r2)
 8042404:	e0bffe15 	stw	r2,-8(fp)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
 8042408:	e0bffe17 	ldw	r2,-8(fp)
 804240c:	10800003 	ldbu	r2,0(r2)
 8042410:	10803fcc 	andi	r2,r2,255
 8042414:	10801160 	cmpeqi	r2,r2,69
 8042418:	1000131e 	bne	r2,zero,8042468 <ip_demux+0x80>
   {
      if((pip->ip_ver_ihl < 0x45) ||
 804241c:	e0bffe17 	ldw	r2,-8(fp)
 8042420:	10800003 	ldbu	r2,0(r2)
 8042424:	10803fcc 	andi	r2,r2,255
 8042428:	10801170 	cmpltui	r2,r2,69
 804242c:	1000051e 	bne	r2,zero,8042444 <ip_demux+0x5c>
         (pip->ip_ver_ihl > 0x47))
 8042430:	e0bffe17 	ldw	r2,-8(fp)
 8042434:	10800003 	ldbu	r2,0(r2)
      if((pip->ip_ver_ihl < 0x45) ||
 8042438:	10803fcc 	andi	r2,r2,255
 804243c:	10801230 	cmpltui	r2,r2,72
 8042440:	1000091e 	bne	r2,zero,8042468 <ip_demux+0x80>
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
 8042444:	e0bffe17 	ldw	r2,-8(fp)
 8042448:	10800003 	ldbu	r2,0(r2)
 804244c:	10803fcc 	andi	r2,r2,255
 8042450:	100b883a 	mov	r5,r2
 8042454:	01020174 	movhi	r4,2053
 8042458:	210de804 	addi	r4,r4,14240
 804245c:	800325c0 	call	800325c <printf>
         return ENP_LOGIC;
 8042460:	00bffd44 	movi	r2,-11
 8042464:	0000c606 	br	8042780 <ip_demux+0x398>

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
 8042468:	e0bffe17 	ldw	r2,-8(fp)
 804246c:	10c00317 	ldw	r3,12(r2)
 8042470:	e0bffd17 	ldw	r2,-12(fp)
 8042474:	10c00715 	stw	r3,28(r2)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8042478:	d0a07e17 	ldw	r2,-32264(gp)
 804247c:	1081000c 	andi	r2,r2,1024
 8042480:	10002126 	beq	r2,zero,8042508 <ip_demux+0x120>
 8042484:	d0a07e17 	ldw	r2,-32264(gp)
 8042488:	1080800c 	andi	r2,r2,512
 804248c:	10001e26 	beq	r2,zero,8042508 <ip_demux+0x120>
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 8042490:	e0bffe17 	ldw	r2,-8(fp)
 8042494:	10800243 	ldbu	r2,9(r2)
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 8042498:	11003fcc 	andi	r4,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 804249c:	e0bffe17 	ldw	r2,-8(fp)
 80424a0:	10800317 	ldw	r2,12(r2)
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 80424a4:	11403fcc 	andi	r5,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 80424a8:	e0bffe17 	ldw	r2,-8(fp)
 80424ac:	10800317 	ldw	r2,12(r2)
 80424b0:	1004d23a 	srli	r2,r2,8
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 80424b4:	11803fcc 	andi	r6,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 80424b8:	e0bffe17 	ldw	r2,-8(fp)
 80424bc:	10800317 	ldw	r2,12(r2)
 80424c0:	1004d43a 	srli	r2,r2,16
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 80424c4:	10803fcc 	andi	r2,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
 80424c8:	e0fffe17 	ldw	r3,-8(fp)
 80424cc:	18c00317 	ldw	r3,12(r3)
 80424d0:	1806d63a 	srli	r3,r3,24
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 80424d4:	d8c00115 	stw	r3,4(sp)
 80424d8:	d8800015 	stw	r2,0(sp)
 80424dc:	300f883a 	mov	r7,r6
 80424e0:	280d883a 	mov	r6,r5
 80424e4:	200b883a 	mov	r5,r4
 80424e8:	01020174 	movhi	r4,2053
 80424ec:	210def04 	addi	r4,r4,14268
 80424f0:	800325c0 	call	800325c <printf>
      if (NDEBUG & DUMP) ip_dump(p);
 80424f4:	d0a07e17 	ldw	r2,-32264(gp)
 80424f8:	1080008c 	andi	r2,r2,2
 80424fc:	10000226 	beq	r2,zero,8042508 <ip_demux+0x120>
 8042500:	e13ffd17 	ldw	r4,-12(fp)
 8042504:	803fa040 	call	803fa04 <ip_dump>
   }
#endif

   switch (pip->ip_prot)
 8042508:	e0bffe17 	ldw	r2,-8(fp)
 804250c:	10800243 	ldbu	r2,9(r2)
 8042510:	10803fcc 	andi	r2,r2,255
 8042514:	10c00460 	cmpeqi	r3,r2,17
 8042518:	18000b1e 	bne	r3,zero,8042548 <ip_demux+0x160>
 804251c:	10c00488 	cmpgei	r3,r2,18
 8042520:	18002d1e 	bne	r3,zero,80425d8 <ip_demux+0x1f0>
 8042524:	10c001a0 	cmpeqi	r3,r2,6
 8042528:	1800221e 	bne	r3,zero,80425b4 <ip_demux+0x1cc>
 804252c:	10c001c8 	cmpgei	r3,r2,7
 8042530:	1800291e 	bne	r3,zero,80425d8 <ip_demux+0x1f0>
 8042534:	10c00060 	cmpeqi	r3,r2,1
 8042538:	18000c1e 	bne	r3,zero,804256c <ip_demux+0x184>
 804253c:	108000a0 	cmpeqi	r2,r2,2
 8042540:	1000131e 	bne	r2,zero,8042590 <ip_demux+0x1a8>
 8042544:	00002406 	br	80425d8 <ip_demux+0x1f0>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
 8042548:	008201b4 	movhi	r2,2054
 804254c:	10bd2817 	ldw	r2,-2912(r2)
 8042550:	10c00044 	addi	r3,r2,1
 8042554:	008201b4 	movhi	r2,2054
 8042558:	10fd2815 	stw	r3,-2912(r2)
      err = udpdemux(p);
 804255c:	e13ffd17 	ldw	r4,-12(fp)
 8042560:	804361c0 	call	804361c <udpdemux>
 8042564:	e0bfff15 	stw	r2,-4(fp)
      break;
 8042568:	00002406 	br	80425fc <ip_demux+0x214>
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
 804256c:	008201b4 	movhi	r2,2054
 8042570:	10bd2817 	ldw	r2,-2912(r2)
 8042574:	10c00044 	addi	r3,r2,1
 8042578:	008201b4 	movhi	r2,2054
 804257c:	10fd2815 	stw	r3,-2912(r2)
      err = icmprcv(p);
 8042580:	e13ffd17 	ldw	r4,-12(fp)
 8042584:	8048fdc0 	call	8048fdc <icmprcv>
 8042588:	e0bfff15 	stw	r2,-4(fp)
      break;
 804258c:	00001b06 	br	80425fc <ip_demux+0x214>
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
 8042590:	008201b4 	movhi	r2,2054
 8042594:	10bd2817 	ldw	r2,-2912(r2)
 8042598:	10c00044 	addi	r3,r2,1
 804259c:	008201b4 	movhi	r2,2054
 80425a0:	10fd2815 	stw	r3,-2912(r2)
      err = igmp_input(p);
 80425a4:	e13ffd17 	ldw	r4,-12(fp)
 80425a8:	80262380 	call	8026238 <igmp_input>
 80425ac:	e0bfff15 	stw	r2,-4(fp)
      break;
 80425b0:	00001206 	br	80425fc <ip_demux+0x214>
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
 80425b4:	008201b4 	movhi	r2,2054
 80425b8:	10bd2817 	ldw	r2,-2912(r2)
 80425bc:	10c00044 	addi	r3,r2,1
 80425c0:	008201b4 	movhi	r2,2054
 80425c4:	10fd2815 	stw	r3,-2912(r2)
      err = tcp_rcv(p);
 80425c8:	e13ffd17 	ldw	r4,-12(fp)
 80425cc:	802dbe00 	call	802dbe0 <tcp_rcv>
 80425d0:	e0bfff15 	stw	r2,-4(fp)
      break;
 80425d4:	00000906 	br	80425fc <ip_demux+0x214>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
 80425d8:	008201b4 	movhi	r2,2054
 80425dc:	10bd2817 	ldw	r2,-2912(r2)
 80425e0:	10c00044 	addi	r3,r2,1
 80425e4:	008201b4 	movhi	r2,2054
 80425e8:	10fd2815 	stw	r3,-2912(r2)
      err = ip_raw_input(p);
 80425ec:	e13ffd17 	ldw	r4,-12(fp)
 80425f0:	8042cb80 	call	8042cb8 <ip_raw_input>
 80425f4:	e0bfff15 	stw	r2,-4(fp)
      break;
 80425f8:	0001883a 	nop
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
 80425fc:	e0bfff17 	ldw	r2,-4(fp)
 8042600:	10bffda0 	cmpeqi	r2,r2,-10
 8042604:	1000021e 	bne	r2,zero,8042610 <ip_demux+0x228>
   {
      return err;
 8042608:	e0bfff17 	ldw	r2,-4(fp)
 804260c:	00005c06 	br	8042780 <ip_demux+0x398>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8042610:	e0bffe17 	ldw	r2,-8(fp)
 8042614:	10800417 	ldw	r2,16(r2)
 8042618:	10bfffe0 	cmpeqi	r2,r2,-1
 804261c:	10004c1e 	bne	r2,zero,8042750 <ip_demux+0x368>
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
 8042620:	e0bffe17 	ldw	r2,-8(fp)
 8042624:	10800417 	ldw	r2,16(r2)
 8042628:	1006d63a 	srli	r3,r2,24
 804262c:	e0bffe17 	ldw	r2,-8(fp)
 8042630:	10800417 	ldw	r2,16(r2)
 8042634:	1004d23a 	srli	r2,r2,8
 8042638:	10bfc00c 	andi	r2,r2,65280
 804263c:	1886b03a 	or	r3,r3,r2
 8042640:	e0bffe17 	ldw	r2,-8(fp)
 8042644:	10800417 	ldw	r2,16(r2)
 8042648:	1004923a 	slli	r2,r2,8
 804264c:	10803fec 	andhi	r2,r2,255
 8042650:	1886b03a 	or	r3,r3,r2
 8042654:	e0bffe17 	ldw	r2,-8(fp)
 8042658:	10800417 	ldw	r2,16(r2)
 804265c:	1004963a 	slli	r2,r2,24
 8042660:	1884b03a 	or	r2,r3,r2
 8042664:	10fc002c 	andhi	r3,r2,61440
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 8042668:	00b80034 	movhi	r2,57344
 804266c:	18803826 	beq	r3,r2,8042750 <ip_demux+0x368>
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
 8042670:	e0bffe17 	ldw	r2,-8(fp)
 8042674:	10c00417 	ldw	r3,16(r2)
 8042678:	e0bffd17 	ldw	r2,-12(fp)
 804267c:	10800617 	ldw	r2,24(r2)
 8042680:	10800e17 	ldw	r2,56(r2)
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
 8042684:	18803226 	beq	r3,r2,8042750 <ip_demux+0x368>
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
 8042688:	e0bffe17 	ldw	r2,-8(fp)
 804268c:	10c00417 	ldw	r3,16(r2)
 8042690:	e0bffd17 	ldw	r2,-12(fp)
 8042694:	10800617 	ldw	r2,24(r2)
 8042698:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
 804269c:	18802c26 	beq	r3,r2,8042750 <ip_demux+0x368>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
 80426a0:	e0bffe17 	ldw	r2,-8(fp)
 80426a4:	10c00417 	ldw	r3,16(r2)
 80426a8:	e0bffd17 	ldw	r2,-12(fp)
 80426ac:	10800617 	ldw	r2,24(r2)
 80426b0:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
 80426b4:	18802626 	beq	r3,r2,8042750 <ip_demux+0x368>
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
 80426b8:	e0bffd17 	ldw	r2,-12(fp)
 80426bc:	10800617 	ldw	r2,24(r2)
 80426c0:	10c00a17 	ldw	r3,40(r2)
 80426c4:	e0bffd17 	ldw	r2,-12(fp)
 80426c8:	10800617 	ldw	r2,24(r2)
 80426cc:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
 80426d0:	18801f26 	beq	r3,r2,8042750 <ip_demux+0x368>
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 80426d4:	d0a07e17 	ldw	r2,-32264(gp)
 80426d8:	1081000c 	andi	r2,r2,1024
 80426dc:	10000f26 	beq	r2,zero,804271c <ip_demux+0x334>
 80426e0:	d0a07e17 	ldw	r2,-32264(gp)
 80426e4:	1080800c 	andi	r2,r2,512
 80426e8:	10000c26 	beq	r2,zero,804271c <ip_demux+0x334>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
 80426ec:	e0bffe17 	ldw	r2,-8(fp)
 80426f0:	10800243 	ldbu	r2,9(r2)
 80426f4:	10803fcc 	andi	r2,r2,255
 80426f8:	100b883a 	mov	r5,r2
 80426fc:	01020174 	movhi	r4,2053
 8042700:	210df904 	addi	r4,r4,14308
 8042704:	800325c0 	call	800325c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 8042708:	d0a07e17 	ldw	r2,-32264(gp)
 804270c:	1080008c 	andi	r2,r2,2
 8042710:	10000226 	beq	r2,zero,804271c <ip_demux+0x334>
 8042714:	e13ffd17 	ldw	r4,-12(fp)
 8042718:	803fa040 	call	803fa04 <ip_dump>
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
 804271c:	e0bffe17 	ldw	r2,-8(fp)
 8042720:	10c00317 	ldw	r3,12(r2)
 8042724:	e0bffd17 	ldw	r2,-12(fp)
 8042728:	10800617 	ldw	r2,24(r2)
 804272c:	11000a17 	ldw	r4,40(r2)
 8042730:	e0bffd17 	ldw	r2,-12(fp)
 8042734:	10800617 	ldw	r2,24(r2)
 8042738:	d8800015 	stw	r2,0(sp)
 804273c:	01c00084 	movi	r7,2
 8042740:	e1bffe17 	ldw	r6,-8(fp)
 8042744:	200b883a 	mov	r5,r4
 8042748:	1809883a 	mov	r4,r3
 804274c:	8049ab80 	call	8049ab8 <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
 8042750:	008201b4 	movhi	r2,2054
 8042754:	10bd2617 	ldw	r2,-2920(r2)
 8042758:	10c00044 	addi	r3,r2,1
 804275c:	008201b4 	movhi	r2,2054
 8042760:	10fd2615 	stw	r3,-2920(r2)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8042764:	01000084 	movi	r4,2
 8042768:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 804276c:	e13ffd17 	ldw	r4,-12(fp)
 8042770:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042774:	01000084 	movi	r4,2
 8042778:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return ENP_NOT_MINE;
 804277c:	00800084 	movi	r2,2
}
 8042780:	e037883a 	mov	sp,fp
 8042784:	dfc00117 	ldw	ra,4(sp)
 8042788:	df000017 	ldw	fp,0(sp)
 804278c:	dec00204 	addi	sp,sp,8
 8042790:	f800283a 	ret

08042794 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
 8042794:	defff904 	addi	sp,sp,-28
 8042798:	dfc00615 	stw	ra,24(sp)
 804279c:	df000515 	stw	fp,20(sp)
 80427a0:	df000504 	addi	fp,sp,20
 80427a4:	e13ffd15 	stw	r4,-12(fp)
 80427a8:	e17ffc15 	stw	r5,-16(fp)
 80427ac:	e1bffb15 	stw	r6,-20(fp)
   struct in_multi *inm = (struct in_multi *)NULL;
 80427b0:	e03fff15 	stw	zero,-4(fp)
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
 80427b4:	e0bffd17 	ldw	r2,-12(fp)
 80427b8:	10000326 	beq	r2,zero,80427c8 <in_addmulti+0x34>
 80427bc:	e0bffd17 	ldw	r2,-12(fp)
 80427c0:	10800017 	ldw	r2,0(r2)
 80427c4:	1000021e 	bne	r2,zero,80427d0 <in_addmulti+0x3c>
      return ((struct in_multi *)NULL);  
 80427c8:	0005883a 	mov	r2,zero
 80427cc:	00003f06 	br	80428cc <in_addmulti+0x138>

   ENTER_CRIT_SECTION(netp);
 80427d0:	802c5bc0 	call	802c5bc <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
 80427d4:	e0bffb17 	ldw	r2,-20(fp)
 80427d8:	108001a0 	cmpeqi	r2,r2,6
 80427dc:	1000061e 	bne	r2,zero,80427f8 <in_addmulti+0x64>
      inm = lookup_mcast(*ap, netp);
 80427e0:	e0bffd17 	ldw	r2,-12(fp)
 80427e4:	10800017 	ldw	r2,0(r2)
 80427e8:	e17ffc17 	ldw	r5,-16(fp)
 80427ec:	1009883a 	mov	r4,r2
 80427f0:	80429ec0 	call	80429ec <lookup_mcast>
 80427f4:	e0bfff15 	stw	r2,-4(fp)
#endif

   if (inm != (struct in_multi *)NULL) 
 80427f8:	e0bfff17 	ldw	r2,-4(fp)
 80427fc:	10000626 	beq	r2,zero,8042818 <in_addmulti+0x84>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
 8042800:	e0bfff17 	ldw	r2,-4(fp)
 8042804:	10800217 	ldw	r2,8(r2)
 8042808:	10c00044 	addi	r3,r2,1
 804280c:	e0bfff17 	ldw	r2,-4(fp)
 8042810:	10c00215 	stw	r3,8(r2)
 8042814:	00002b06 	br	80428c4 <in_addmulti+0x130>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
 8042818:	01000604 	movi	r4,24
 804281c:	802cf5c0 	call	802cf5c <npalloc>
 8042820:	e0bfff15 	stw	r2,-4(fp)

      if (inm == (struct in_multi *)NULL) 
 8042824:	e0bfff17 	ldw	r2,-4(fp)
 8042828:	1000031e 	bne	r2,zero,8042838 <in_addmulti+0xa4>
      {
         EXIT_CRIT_SECTION(netp);
 804282c:	802c61c0 	call	802c61c <irq_Unmask>
         return ((struct in_multi *)NULL);
 8042830:	0005883a 	mov	r2,zero
 8042834:	00002506 	br	80428cc <in_addmulti+0x138>
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
 8042838:	e0bffb17 	ldw	r2,-20(fp)
 804283c:	108001a0 	cmpeqi	r2,r2,6
 8042840:	1000041e 	bne	r2,zero,8042854 <in_addmulti+0xc0>
         inm->inm_addr = *ap;
 8042844:	e0bffd17 	ldw	r2,-12(fp)
 8042848:	10c00017 	ldw	r3,0(r2)
 804284c:	e0bfff17 	ldw	r2,-4(fp)
 8042850:	10c00015 	stw	r3,0(r2)
#endif
      inm->inm_netp = netp;
 8042854:	e0bfff17 	ldw	r2,-4(fp)
 8042858:	e0fffc17 	ldw	r3,-16(fp)
 804285c:	10c00115 	stw	r3,4(r2)
      inm->inm_refcount = 1;
 8042860:	e0bfff17 	ldw	r2,-4(fp)
 8042864:	00c00044 	movi	r3,1
 8042868:	10c00215 	stw	r3,8(r2)
      inm->inm_next = netp->mc_list;
 804286c:	e0bffc17 	ldw	r2,-16(fp)
 8042870:	10c02c17 	ldw	r3,176(r2)
 8042874:	e0bfff17 	ldw	r2,-4(fp)
 8042878:	10c00515 	stw	r3,20(r2)
      netp->mc_list = inm;
 804287c:	e0bffc17 	ldw	r2,-16(fp)
 8042880:	e0ffff17 	ldw	r3,-4(fp)
 8042884:	10c02c15 	stw	r3,176(r2)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
 8042888:	e0bffc17 	ldw	r2,-16(fp)
 804288c:	10802b17 	ldw	r2,172(r2)
 8042890:	10000626 	beq	r2,zero,80428ac <in_addmulti+0x118>
         error = netp->n_mcastlist(inm);
 8042894:	e0bffc17 	ldw	r2,-16(fp)
 8042898:	10802b17 	ldw	r2,172(r2)
 804289c:	e13fff17 	ldw	r4,-4(fp)
 80428a0:	103ee83a 	callr	r2
 80428a4:	e0bffe15 	stw	r2,-8(fp)
 80428a8:	00000106 	br	80428b0 <in_addmulti+0x11c>
      else
         error = 0;
 80428ac:	e03ffe15 	stw	zero,-8(fp)
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
 80428b0:	e0bfff17 	ldw	r2,-4(fp)
 80428b4:	10800017 	ldw	r2,0(r2)
 80428b8:	10000226 	beq	r2,zero,80428c4 <in_addmulti+0x130>
 80428bc:	e13fff17 	ldw	r4,-4(fp)
 80428c0:	80266f00 	call	80266f0 <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
 80428c4:	802c61c0 	call	802c61c <irq_Unmask>
   USE_ARG(error);

   return (inm);
 80428c8:	e0bfff17 	ldw	r2,-4(fp)
}
 80428cc:	e037883a 	mov	sp,fp
 80428d0:	dfc00117 	ldw	ra,4(sp)
 80428d4:	df000017 	ldw	fp,0(sp)
 80428d8:	dec00204 	addi	sp,sp,8
 80428dc:	f800283a 	ret

080428e0 <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
 80428e0:	defffa04 	addi	sp,sp,-24
 80428e4:	dfc00515 	stw	ra,20(sp)
 80428e8:	df000415 	stw	fp,16(sp)
 80428ec:	df000404 	addi	fp,sp,16
 80428f0:	e13ffc15 	stw	r4,-16(fp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
 80428f4:	e0bffc17 	ldw	r2,-16(fp)
 80428f8:	10800117 	ldw	r2,4(r2)
 80428fc:	e0bffd15 	stw	r2,-12(fp)
   int error;

   ENTER_CRIT_SECTION(inm);
 8042900:	802c5bc0 	call	802c5bc <irq_Mask>
   if (--inm->inm_refcount == 0) 
 8042904:	e0bffc17 	ldw	r2,-16(fp)
 8042908:	10800217 	ldw	r2,8(r2)
 804290c:	10ffffc4 	addi	r3,r2,-1
 8042910:	e0bffc17 	ldw	r2,-16(fp)
 8042914:	10c00215 	stw	r3,8(r2)
 8042918:	e0bffc17 	ldw	r2,-16(fp)
 804291c:	10800217 	ldw	r2,8(r2)
 8042920:	10002b1e 	bne	r2,zero,80429d0 <in_delmulti+0xf0>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 8042924:	e0bffd17 	ldw	r2,-12(fp)
 8042928:	10802c17 	ldw	r2,176(r2)
 804292c:	e0bfff15 	stw	r2,-4(fp)
 8042930:	00001406 	br	8042984 <in_delmulti+0xa4>
      {
         if(p == inm)   /* inm is first in mc_list */
 8042934:	e0ffff17 	ldw	r3,-4(fp)
 8042938:	e0bffc17 	ldw	r2,-16(fp)
 804293c:	1880051e 	bne	r3,r2,8042954 <in_delmulti+0x74>
         {
            netp->mc_list = p->inm_next;  /* unlink */
 8042940:	e0bfff17 	ldw	r2,-4(fp)
 8042944:	10c00517 	ldw	r3,20(r2)
 8042948:	e0bffd17 	ldw	r2,-12(fp)
 804294c:	10c02c15 	stw	r3,176(r2)
            break;
 8042950:	00000e06 	br	804298c <in_delmulti+0xac>
         }
         else if(p->inm_next == inm)   /* inm is next */
 8042954:	e0bfff17 	ldw	r2,-4(fp)
 8042958:	10800517 	ldw	r2,20(r2)
 804295c:	e0fffc17 	ldw	r3,-16(fp)
 8042960:	1880051e 	bne	r3,r2,8042978 <in_delmulti+0x98>
         {
            p->inm_next = inm->inm_next;  /* unlink */
 8042964:	e0bffc17 	ldw	r2,-16(fp)
 8042968:	10c00517 	ldw	r3,20(r2)
 804296c:	e0bfff17 	ldw	r2,-4(fp)
 8042970:	10c00515 	stw	r3,20(r2)
            break;
 8042974:	00000506 	br	804298c <in_delmulti+0xac>
      for (p = netp->mc_list; p; p = p->inm_next)
 8042978:	e0bfff17 	ldw	r2,-4(fp)
 804297c:	10800517 	ldw	r2,20(r2)
 8042980:	e0bfff15 	stw	r2,-4(fp)
 8042984:	e0bfff17 	ldw	r2,-4(fp)
 8042988:	103fea1e 	bne	r2,zero,8042934 <in_delmulti+0x54>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 804298c:	e0bffd17 	ldw	r2,-12(fp)
 8042990:	10802b17 	ldw	r2,172(r2)
 8042994:	10000626 	beq	r2,zero,80429b0 <in_delmulti+0xd0>
         error = netp->n_mcastlist(inm);
 8042998:	e0bffd17 	ldw	r2,-12(fp)
 804299c:	10802b17 	ldw	r2,172(r2)
 80429a0:	e13ffc17 	ldw	r4,-16(fp)
 80429a4:	103ee83a 	callr	r2
 80429a8:	e0bffe15 	stw	r2,-8(fp)
 80429ac:	00000106 	br	80429b4 <in_delmulti+0xd4>
      else
         error = 0;
 80429b0:	e03ffe15 	stw	zero,-8(fp)
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
 80429b4:	e0bffc17 	ldw	r2,-16(fp)
 80429b8:	10800017 	ldw	r2,0(r2)
 80429bc:	10000226 	beq	r2,zero,80429c8 <in_delmulti+0xe8>
 80429c0:	e13ffc17 	ldw	r4,-16(fp)
 80429c4:	802691c0 	call	802691c <igmp_leavegroup>
#endif      

      IM_FREE(inm);
 80429c8:	e13ffc17 	ldw	r4,-16(fp)
 80429cc:	802cf900 	call	802cf90 <npfree>
   }

   EXIT_CRIT_SECTION(inm);
 80429d0:	802c61c0 	call	802c61c <irq_Unmask>
   USE_ARG(error);
}
 80429d4:	0001883a 	nop
 80429d8:	e037883a 	mov	sp,fp
 80429dc:	dfc00117 	ldw	ra,4(sp)
 80429e0:	df000017 	ldw	fp,0(sp)
 80429e4:	dec00204 	addi	sp,sp,8
 80429e8:	f800283a 	ret

080429ec <lookup_mcast>:
 * RETURNS: pointer to mcast addr structure, or NULL if not found.
 */

struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
 80429ec:	defffc04 	addi	sp,sp,-16
 80429f0:	df000315 	stw	fp,12(sp)
 80429f4:	df000304 	addi	fp,sp,12
 80429f8:	e13ffe15 	stw	r4,-8(fp)
 80429fc:	e17ffd15 	stw	r5,-12(fp)
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 8042a00:	e0bffd17 	ldw	r2,-12(fp)
 8042a04:	10802c17 	ldw	r2,176(r2)
 8042a08:	e0bfff15 	stw	r2,-4(fp)
 8042a0c:	00000906 	br	8042a34 <lookup_mcast+0x48>
   {
      if(imp->inm_addr == addr)
 8042a10:	e0bfff17 	ldw	r2,-4(fp)
 8042a14:	10800017 	ldw	r2,0(r2)
 8042a18:	e0fffe17 	ldw	r3,-8(fp)
 8042a1c:	1880021e 	bne	r3,r2,8042a28 <lookup_mcast+0x3c>
         return imp;
 8042a20:	e0bfff17 	ldw	r2,-4(fp)
 8042a24:	00000606 	br	8042a40 <lookup_mcast+0x54>
   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 8042a28:	e0bfff17 	ldw	r2,-4(fp)
 8042a2c:	10800517 	ldw	r2,20(r2)
 8042a30:	e0bfff15 	stw	r2,-4(fp)
 8042a34:	e0bfff17 	ldw	r2,-4(fp)
 8042a38:	103ff51e 	bne	r2,zero,8042a10 <lookup_mcast+0x24>
   }
   return NULL;   /* addr not found in mcast list */
 8042a3c:	0005883a 	mov	r2,zero
}
 8042a40:	e037883a 	mov	sp,fp
 8042a44:	df000017 	ldw	fp,0(sp)
 8042a48:	dec00104 	addi	sp,sp,4
 8042a4c:	f800283a 	ret

08042a50 <prep_ifaces>:
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
 8042a50:	defffd04 	addi	sp,sp,-12
 8042a54:	dfc00215 	stw	ra,8(sp)
 8042a58:	df000115 	stw	fp,4(sp)
 8042a5c:	df000104 	addi	fp,sp,4
 8042a60:	e13fff15 	stw	r4,-4(fp)
   if (port_prep)
 8042a64:	d0a0c517 	ldw	r2,-31980(gp)
 8042a68:	10000426 	beq	r2,zero,8042a7c <prep_ifaces+0x2c>
      ifaces_found = port_prep(ifaces_found);
 8042a6c:	d0a0c517 	ldw	r2,-31980(gp)
 8042a70:	e13fff17 	ldw	r4,-4(fp)
 8042a74:	103ee83a 	callr	r2
 8042a78:	e0bfff15 	stw	r2,-4(fp)

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
 8042a7c:	e0bfff17 	ldw	r2,-4(fp)
 8042a80:	d0a07f15 	stw	r2,-32260(gp)

   initmsg("prepped %u interface%s, initializing...\n", 
 8042a84:	e0bfff17 	ldw	r2,-4(fp)
 8042a88:	10800058 	cmpnei	r2,r2,1
 8042a8c:	1000031e 	bne	r2,zero,8042a9c <prep_ifaces+0x4c>
 8042a90:	00820174 	movhi	r2,2053
 8042a94:	108e0104 	addi	r2,r2,14340
 8042a98:	00000206 	br	8042aa4 <prep_ifaces+0x54>
 8042a9c:	00820174 	movhi	r2,2053
 8042aa0:	108e0204 	addi	r2,r2,14344
 8042aa4:	100d883a 	mov	r6,r2
 8042aa8:	e17fff17 	ldw	r5,-4(fp)
 8042aac:	01020174 	movhi	r4,2053
 8042ab0:	210e0304 	addi	r4,r4,14348
 8042ab4:	800325c0 	call	800325c <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
 8042ab8:	e0bfff17 	ldw	r2,-4(fp)
}
 8042abc:	e037883a 	mov	sp,fp
 8042ac0:	dfc00117 	ldw	ra,4(sp)
 8042ac4:	df000017 	ldw	fp,0(sp)
 8042ac8:	dec00204 	addi	sp,sp,8
 8042acc:	f800283a 	ret

08042ad0 <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
 8042ad0:	defffd04 	addi	sp,sp,-12
 8042ad4:	dfc00215 	stw	ra,8(sp)
 8042ad8:	df000115 	stw	fp,4(sp)
 8042adc:	df000104 	addi	fp,sp,4
 8042ae0:	e13fff15 	stw	r4,-4(fp)
   net_system_exit = TRUE; /* set flag for shutting down */
 8042ae4:	00800044 	movi	r2,1
 8042ae8:	d0a0c615 	stw	r2,-31976(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
 8042aec:	80260640 	call	8026064 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
 8042af0:	e13fff17 	ldw	r4,-4(fp)
 8042af4:	804a0f80 	call	804a0f8 <exit>

08042af8 <evtmap_setup>:
 * INPUT: None.
 * OUTPUT: None
 */
 
void evtmap_setup (void)
{
 8042af8:	deffff04 	addi	sp,sp,-4
 8042afc:	df000015 	stw	fp,0(sp)
 8042b00:	d839883a 	mov	fp,sp
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
 8042b04:	d020c905 	stb	zero,-31964(gp)
   so_evtmap_create = 0;
 8042b08:	d020c715 	stw	zero,-31972(gp)
   so_evtmap_delete = 0;
 8042b0c:	d020c815 	stw	zero,-31968(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
 8042b10:	0001883a 	nop
 8042b14:	e037883a 	mov	sp,fp
 8042b18:	df000017 	ldw	fp,0(sp)
 8042b1c:	dec00104 	addi	sp,sp,4
 8042b20:	f800283a 	ret

08042b24 <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
 8042b24:	defff904 	addi	sp,sp,-28
 8042b28:	dfc00615 	stw	ra,24(sp)
 8042b2c:	df000515 	stw	fp,20(sp)
 8042b30:	df000504 	addi	fp,sp,20
 8042b34:	2005883a 	mov	r2,r4
 8042b38:	e17ffd15 	stw	r5,-12(fp)
 8042b3c:	e1bffc15 	stw	r6,-16(fp)
 8042b40:	e1fffb15 	stw	r7,-20(fp)
 8042b44:	e0bffe05 	stb	r2,-8(fp)
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
 8042b48:	0009883a 	mov	r4,zero
 8042b4c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
 8042b50:	01000604 	movi	r4,24
 8042b54:	802cf5c0 	call	802cf5c <npalloc>
 8042b58:	e0bfff15 	stw	r2,-4(fp)
   if (ep == NULL)
 8042b5c:	e0bfff17 	ldw	r2,-4(fp)
 8042b60:	10000a1e 	bne	r2,zero,8042b8c <ip_raw_open+0x68>
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
 8042b64:	d0a07e17 	ldw	r2,-32264(gp)
 8042b68:	1080010c 	andi	r2,r2,4
 8042b6c:	10000326 	beq	r2,zero,8042b7c <ip_raw_open+0x58>
         dprintf("IP: Couldn't allocate ep storage.\n");
 8042b70:	01020174 	movhi	r4,2053
 8042b74:	210e0e04 	addi	r4,r4,14392
 8042b78:	80033800 	call	8003380 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 8042b7c:	0009883a 	mov	r4,zero
 8042b80:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ep;
 8042b84:	e0bfff17 	ldw	r2,-4(fp)
 8042b88:	00001706 	br	8042be8 <ip_raw_open+0xc4>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
 8042b8c:	e0bfff17 	ldw	r2,-4(fp)
 8042b90:	e0fffd17 	ldw	r3,-12(fp)
 8042b94:	10c00115 	stw	r3,4(r2)
   ep->ipr_faddr = faddr;
 8042b98:	e0bfff17 	ldw	r2,-4(fp)
 8042b9c:	e0fffc17 	ldw	r3,-16(fp)
 8042ba0:	10c00215 	stw	r3,8(r2)
   ep->ipr_prot = prot;
 8042ba4:	e0bfff17 	ldw	r2,-4(fp)
 8042ba8:	e0fffe03 	ldbu	r3,-8(fp)
 8042bac:	10c00505 	stb	r3,20(r2)
   ep->ipr_rcv = handler;
 8042bb0:	e0bfff17 	ldw	r2,-4(fp)
 8042bb4:	e0fffb17 	ldw	r3,-20(fp)
 8042bb8:	10c00315 	stw	r3,12(r2)
   ep->ipr_data = data;
 8042bbc:	e0bfff17 	ldw	r2,-4(fp)
 8042bc0:	e0c00217 	ldw	r3,8(fp)
 8042bc4:	10c00415 	stw	r3,16(r2)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
 8042bc8:	d0e0ca17 	ldw	r3,-31960(gp)
 8042bcc:	e0bfff17 	ldw	r2,-4(fp)
 8042bd0:	10c00015 	stw	r3,0(r2)
   ipraw_eps = ep;
 8042bd4:	e0bfff17 	ldw	r2,-4(fp)
 8042bd8:	d0a0ca15 	stw	r2,-31960(gp)

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
 8042bdc:	0009883a 	mov	r4,zero
 8042be0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return ep;
 8042be4:	e0bfff17 	ldw	r2,-4(fp)
}
 8042be8:	e037883a 	mov	sp,fp
 8042bec:	dfc00117 	ldw	ra,4(sp)
 8042bf0:	df000017 	ldw	fp,0(sp)
 8042bf4:	dec00204 	addi	sp,sp,8
 8042bf8:	f800283a 	ret

08042bfc <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
 8042bfc:	defffb04 	addi	sp,sp,-20
 8042c00:	dfc00415 	stw	ra,16(sp)
 8042c04:	df000315 	stw	fp,12(sp)
 8042c08:	df000304 	addi	fp,sp,12
 8042c0c:	e13ffd15 	stw	r4,-12(fp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
 8042c10:	0009883a 	mov	r4,zero
 8042c14:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 8042c18:	e03fff15 	stw	zero,-4(fp)
 8042c1c:	d0a0ca17 	ldw	r2,-31960(gp)
 8042c20:	e0bffe15 	stw	r2,-8(fp)
 8042c24:	00000806 	br	8042c48 <ip_raw_close+0x4c>
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
 8042c28:	e0fffe17 	ldw	r3,-8(fp)
 8042c2c:	e0bffd17 	ldw	r2,-12(fp)
 8042c30:	18800826 	beq	r3,r2,8042c54 <ip_raw_close+0x58>
         break;
      prev_ep = curr_ep;
 8042c34:	e0bffe17 	ldw	r2,-8(fp)
 8042c38:	e0bfff15 	stw	r2,-4(fp)
        curr_ep = curr_ep->ipr_next)
 8042c3c:	e0bffe17 	ldw	r2,-8(fp)
 8042c40:	10800017 	ldw	r2,0(r2)
 8042c44:	e0bffe15 	stw	r2,-8(fp)
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 8042c48:	e0bffe17 	ldw	r2,-8(fp)
 8042c4c:	103ff61e 	bne	r2,zero,8042c28 <ip_raw_close+0x2c>
 8042c50:	00000106 	br	8042c58 <ip_raw_close+0x5c>
         break;
 8042c54:	0001883a 	nop
   }

   /* if we didn't find it, we can't close it, so just return */
   if (curr_ep == NULL)
 8042c58:	e0bffe17 	ldw	r2,-8(fp)
 8042c5c:	1000041e 	bne	r2,zero,8042c70 <ip_raw_close+0x74>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
 8042c60:	802c3fc0 	call	802c3fc <dtrap>
#endif /* NPDEBUG */
      UNLOCK_NET_RESOURCE(NET_RESID);
 8042c64:	0009883a 	mov	r4,zero
 8042c68:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return;
 8042c6c:	00000d06 	br	8042ca4 <ip_raw_close+0xa8>
   }

   /* unlink it from the list */
   if (prev_ep)
 8042c70:	e0bfff17 	ldw	r2,-4(fp)
 8042c74:	10000426 	beq	r2,zero,8042c88 <ip_raw_close+0x8c>
      prev_ep = curr_ep->ipr_next;
 8042c78:	e0bffe17 	ldw	r2,-8(fp)
 8042c7c:	10800017 	ldw	r2,0(r2)
 8042c80:	e0bfff15 	stw	r2,-4(fp)
 8042c84:	00000306 	br	8042c94 <ip_raw_close+0x98>
   else
      ipraw_eps = curr_ep->ipr_next;
 8042c88:	e0bffe17 	ldw	r2,-8(fp)
 8042c8c:	10800017 	ldw	r2,0(r2)
 8042c90:	d0a0ca15 	stw	r2,-31960(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
 8042c94:	e13ffe17 	ldw	r4,-8(fp)
 8042c98:	802cf900 	call	802cf90 <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 8042c9c:	0009883a 	mov	r4,zero
 8042ca0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
}
 8042ca4:	e037883a 	mov	sp,fp
 8042ca8:	dfc00117 	ldw	ra,4(sp)
 8042cac:	df000017 	ldw	fp,0(sp)
 8042cb0:	dec00204 	addi	sp,sp,8
 8042cb4:	f800283a 	ret

08042cb8 <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
 8042cb8:	defff604 	addi	sp,sp,-40
 8042cbc:	dfc00915 	stw	ra,36(sp)
 8042cc0:	df000815 	stw	fp,32(sp)
 8042cc4:	df000804 	addi	fp,sp,32
 8042cc8:	e13ff815 	stw	r4,-32(fp)
   struct ip * pip;              /* the internet header */
   struct ipraw_ep * ep;
   struct ipraw_ep * next_ep;
   struct ipraw_ep * matched_ep = NULL;
 8042ccc:	e03ffe15 	stw	zero,-8(fp)
   int err;
   int delivered;

   /* start out expecting to not deliver the packet */
   delivered = 0;
 8042cd0:	e03ffc15 	stw	zero,-16(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
 8042cd4:	e0bff817 	ldw	r2,-32(fp)
 8042cd8:	10800317 	ldw	r2,12(r2)
 8042cdc:	e0bffb15 	stw	r2,-20(fp)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 8042ce0:	d0a0ca17 	ldw	r2,-31960(gp)
 8042ce4:	e0bfff15 	stw	r2,-4(fp)
 8042ce8:	00004c06 	br	8042e1c <ip_raw_input+0x164>
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
 8042cec:	e0bfff17 	ldw	r2,-4(fp)
 8042cf0:	10800017 	ldw	r2,0(r2)
 8042cf4:	e0bffa15 	stw	r2,-24(fp)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 8042cf8:	e0bfff17 	ldw	r2,-4(fp)
 8042cfc:	10800503 	ldbu	r2,20(r2)
 8042d00:	10803fcc 	andi	r2,r2,255
 8042d04:	10000726 	beq	r2,zero,8042d24 <ip_raw_input+0x6c>
 8042d08:	e0bfff17 	ldw	r2,-4(fp)
 8042d0c:	10c00503 	ldbu	r3,20(r2)
 8042d10:	e0bffb17 	ldw	r2,-20(fp)
 8042d14:	10800243 	ldbu	r2,9(r2)
 8042d18:	18c03fcc 	andi	r3,r3,255
 8042d1c:	10803fcc 	andi	r2,r2,255
 8042d20:	1880371e 	bne	r3,r2,8042e00 <ip_raw_input+0x148>
         continue;
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
 8042d24:	e0bfff17 	ldw	r2,-4(fp)
 8042d28:	10800117 	ldw	r2,4(r2)
 8042d2c:	10000526 	beq	r2,zero,8042d44 <ip_raw_input+0x8c>
 8042d30:	e0bfff17 	ldw	r2,-4(fp)
 8042d34:	10c00117 	ldw	r3,4(r2)
 8042d38:	e0bffb17 	ldw	r2,-20(fp)
 8042d3c:	10800417 	ldw	r2,16(r2)
 8042d40:	1880311e 	bne	r3,r2,8042e08 <ip_raw_input+0x150>
         continue;
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
 8042d44:	e0bfff17 	ldw	r2,-4(fp)
 8042d48:	10800217 	ldw	r2,8(r2)
 8042d4c:	10000526 	beq	r2,zero,8042d64 <ip_raw_input+0xac>
 8042d50:	e0bfff17 	ldw	r2,-4(fp)
 8042d54:	10c00217 	ldw	r3,8(r2)
 8042d58:	e0bffb17 	ldw	r2,-20(fp)
 8042d5c:	10800317 	ldw	r2,12(r2)
 8042d60:	18802b1e 	bne	r3,r2,8042e10 <ip_raw_input+0x158>
         continue;

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
 8042d64:	e0bfff17 	ldw	r2,-4(fp)
 8042d68:	10800317 	ldw	r2,12(r2)
 8042d6c:	10002926 	beq	r2,zero,8042e14 <ip_raw_input+0x15c>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 8042d70:	e0bffe17 	ldw	r2,-8(fp)
 8042d74:	10001f26 	beq	r2,zero,8042df4 <ip_raw_input+0x13c>
 8042d78:	e0bffe17 	ldw	r2,-8(fp)
 8042d7c:	10800317 	ldw	r2,12(r2)
 8042d80:	10001c26 	beq	r2,zero,8042df4 <ip_raw_input+0x13c>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
 8042d84:	e13ff817 	ldw	r4,-32(fp)
 8042d88:	803fe740 	call	803fe74 <ip_copypkt>
 8042d8c:	e0bff915 	stw	r2,-28(fp)
            if (p2)
 8042d90:	e0bff917 	ldw	r2,-28(fp)
 8042d94:	10001726 	beq	r2,zero,8042df4 <ip_raw_input+0x13c>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
 8042d98:	0009883a 	mov	r4,zero
 8042d9c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
 8042da0:	e0bffe17 	ldw	r2,-8(fp)
 8042da4:	10800317 	ldw	r2,12(r2)
 8042da8:	e0fffe17 	ldw	r3,-8(fp)
 8042dac:	18c00417 	ldw	r3,16(r3)
 8042db0:	180b883a 	mov	r5,r3
 8042db4:	e13ff917 	ldw	r4,-28(fp)
 8042db8:	103ee83a 	callr	r2
 8042dbc:	e0bffd15 	stw	r2,-12(fp)
               LOCK_NET_RESOURCE(NET_RESID);
 8042dc0:	0009883a 	mov	r4,zero
 8042dc4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
               if (err)
 8042dc8:	e0bffd17 	ldw	r2,-12(fp)
 8042dcc:	10000726 	beq	r2,zero,8042dec <ip_raw_input+0x134>
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
 8042dd0:	01000084 	movi	r4,2
 8042dd4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
                  pk_free(p2);
 8042dd8:	e13ff917 	ldw	r4,-28(fp)
 8042ddc:	802bb980 	call	802bb98 <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042de0:	01000084 	movi	r4,2
 8042de4:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
 8042de8:	00000206 	br	8042df4 <ip_raw_input+0x13c>
               }
               else
                  delivered = 1;
 8042dec:	00800044 	movi	r2,1
 8042df0:	e0bffc15 	stw	r2,-16(fp)
            }
         }
         matched_ep = ep;
 8042df4:	e0bfff17 	ldw	r2,-4(fp)
 8042df8:	e0bffe15 	stw	r2,-8(fp)
 8042dfc:	00000506 	br	8042e14 <ip_raw_input+0x15c>
         continue;
 8042e00:	0001883a 	nop
 8042e04:	00000306 	br	8042e14 <ip_raw_input+0x15c>
         continue;
 8042e08:	0001883a 	nop
 8042e0c:	00000106 	br	8042e14 <ip_raw_input+0x15c>
         continue;
 8042e10:	0001883a 	nop
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 8042e14:	e0bffa17 	ldw	r2,-24(fp)
 8042e18:	e0bfff15 	stw	r2,-4(fp)
 8042e1c:	e0bfff17 	ldw	r2,-4(fp)
 8042e20:	103fb21e 	bne	r2,zero,8042cec <ip_raw_input+0x34>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 8042e24:	e0bffe17 	ldw	r2,-8(fp)
 8042e28:	10001426 	beq	r2,zero,8042e7c <ip_raw_input+0x1c4>
 8042e2c:	e0bffe17 	ldw	r2,-8(fp)
 8042e30:	10800317 	ldw	r2,12(r2)
 8042e34:	10001126 	beq	r2,zero,8042e7c <ip_raw_input+0x1c4>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 8042e38:	0009883a 	mov	r4,zero
 8042e3c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
 8042e40:	e0bffe17 	ldw	r2,-8(fp)
 8042e44:	10800317 	ldw	r2,12(r2)
 8042e48:	e0fffe17 	ldw	r3,-8(fp)
 8042e4c:	18c00417 	ldw	r3,16(r3)
 8042e50:	180b883a 	mov	r5,r3
 8042e54:	e13ff817 	ldw	r4,-32(fp)
 8042e58:	103ee83a 	callr	r2
 8042e5c:	e0bffd15 	stw	r2,-12(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 8042e60:	0009883a 	mov	r4,zero
 8042e64:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      if (err == 0)
 8042e68:	e0bffd17 	ldw	r2,-12(fp)
 8042e6c:	10000a1e 	bne	r2,zero,8042e98 <ip_raw_input+0x1e0>
         delivered = 1;
 8042e70:	00800044 	movi	r2,1
 8042e74:	e0bffc15 	stw	r2,-16(fp)
      if (err == 0)
 8042e78:	00000706 	br	8042e98 <ip_raw_input+0x1e0>
   }
   else
   {
      err = ENP_PARAM;
 8042e7c:	00bffd84 	movi	r2,-10
 8042e80:	e0bffd15 	stw	r2,-12(fp)
      ip_mib.ipUnknownProtos++;
 8042e84:	008201b4 	movhi	r2,2054
 8042e88:	10bd2617 	ldw	r2,-2920(r2)
 8042e8c:	10c00044 	addi	r3,r2,1
 8042e90:	008201b4 	movhi	r2,2054
 8042e94:	10fd2615 	stw	r3,-2920(r2)
   }

   if (!delivered)
 8042e98:	e0bffc17 	ldw	r2,-16(fp)
 8042e9c:	1000051e 	bne	r2,zero,8042eb4 <ip_raw_input+0x1fc>
      ip_mib.ipInDelivers--;
 8042ea0:	008201b4 	movhi	r2,2054
 8042ea4:	10bd2817 	ldw	r2,-2912(r2)
 8042ea8:	10ffffc4 	addi	r3,r2,-1
 8042eac:	008201b4 	movhi	r2,2054
 8042eb0:	10fd2815 	stw	r3,-2912(r2)

   return err;
 8042eb4:	e0bffd17 	ldw	r2,-12(fp)
}
 8042eb8:	e037883a 	mov	sp,fp
 8042ebc:	dfc00117 	ldw	ra,4(sp)
 8042ec0:	df000017 	ldw	fp,0(sp)
 8042ec4:	dec00204 	addi	sp,sp,8
 8042ec8:	f800283a 	ret

08042ecc <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 8042ecc:	defffa04 	addi	sp,sp,-24
 8042ed0:	dfc00515 	stw	ra,20(sp)
 8042ed4:	df000415 	stw	fp,16(sp)
 8042ed8:	df000404 	addi	fp,sp,16
 8042edc:	e13ffd15 	stw	r4,-12(fp)
 8042ee0:	e17ffc15 	stw	r5,-16(fp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 8042ee4:	e0bffd17 	ldw	r2,-12(fp)
 8042ee8:	10c00044 	addi	r3,r2,1
 8042eec:	00bfff84 	movi	r2,-2
 8042ef0:	1884703a 	and	r2,r3,r2
 8042ef4:	e0bfff15 	stw	r2,-4(fp)
   if (!hdrincl)
 8042ef8:	e0bffc17 	ldw	r2,-16(fp)
 8042efc:	1000031e 	bne	r2,zero,8042f0c <ip_raw_alloc+0x40>
      len += IPHSIZ;
 8042f00:	e0bfff17 	ldw	r2,-4(fp)
 8042f04:	10800504 	addi	r2,r2,20
 8042f08:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8042f0c:	01000084 	movi	r4,2
 8042f10:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
 8042f14:	d0e07c17 	ldw	r3,-32272(gp)
 8042f18:	e0bfff17 	ldw	r2,-4(fp)
 8042f1c:	1885883a 	add	r2,r3,r2
 8042f20:	1009883a 	mov	r4,r2
 8042f24:	802b8840 	call	802b884 <pk_alloc>
 8042f28:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042f2c:	01000084 	movi	r4,2
 8042f30:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   if (p)
 8042f34:	e0bffe17 	ldw	r2,-8(fp)
 8042f38:	10000c26 	beq	r2,zero,8042f6c <ip_raw_alloc+0xa0>
   {
      if (!hdrincl)
 8042f3c:	e0bffc17 	ldw	r2,-16(fp)
 8042f40:	10000a1e 	bne	r2,zero,8042f6c <ip_raw_alloc+0xa0>
      {
         p->nb_prot += IPHSIZ;
 8042f44:	e0bffe17 	ldw	r2,-8(fp)
 8042f48:	10800317 	ldw	r2,12(r2)
 8042f4c:	10c00504 	addi	r3,r2,20
 8042f50:	e0bffe17 	ldw	r2,-8(fp)
 8042f54:	10c00315 	stw	r3,12(r2)
         p->nb_plen -= IPHSIZ;
 8042f58:	e0bffe17 	ldw	r2,-8(fp)
 8042f5c:	10800417 	ldw	r2,16(r2)
 8042f60:	10fffb04 	addi	r3,r2,-20
 8042f64:	e0bffe17 	ldw	r2,-8(fp)
 8042f68:	10c00415 	stw	r3,16(r2)
      }
   }
   return p;
 8042f6c:	e0bffe17 	ldw	r2,-8(fp)
}
 8042f70:	e037883a 	mov	sp,fp
 8042f74:	dfc00117 	ldw	ra,4(sp)
 8042f78:	df000017 	ldw	fp,0(sp)
 8042f7c:	dec00204 	addi	sp,sp,8
 8042f80:	f800283a 	ret

08042f84 <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 8042f84:	defffd04 	addi	sp,sp,-12
 8042f88:	dfc00215 	stw	ra,8(sp)
 8042f8c:	df000115 	stw	fp,4(sp)
 8042f90:	df000104 	addi	fp,sp,4
 8042f94:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8042f98:	01000084 	movi	r4,2
 8042f9c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 8042fa0:	e13fff17 	ldw	r4,-4(fp)
 8042fa4:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8042fa8:	01000084 	movi	r4,2
 8042fac:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
}
 8042fb0:	0001883a 	nop
 8042fb4:	e037883a 	mov	sp,fp
 8042fb8:	dfc00117 	ldw	ra,4(sp)
 8042fbc:	df000017 	ldw	fp,0(sp)
 8042fc0:	dec00204 	addi	sp,sp,8
 8042fc4:	f800283a 	ret

08042fc8 <ip_raw_maxalloc>:
 *          for 
 */

int
ip_raw_maxalloc(int hdrincl)
{
 8042fc8:	defffd04 	addi	sp,sp,-12
 8042fcc:	df000215 	stw	fp,8(sp)
 8042fd0:	df000204 	addi	fp,sp,8
 8042fd4:	e13ffe15 	stw	r4,-8(fp)
   int len;

   len = bigbufsiz - MaxLnh;
 8042fd8:	d0a03517 	ldw	r2,-32556(gp)
 8042fdc:	d0e07c17 	ldw	r3,-32272(gp)
 8042fe0:	10c5c83a 	sub	r2,r2,r3
 8042fe4:	e0bfff15 	stw	r2,-4(fp)
   if (!hdrincl)
 8042fe8:	e0bffe17 	ldw	r2,-8(fp)
 8042fec:	1000031e 	bne	r2,zero,8042ffc <ip_raw_maxalloc+0x34>
      len -= IPHSIZ;
 8042ff0:	e0bfff17 	ldw	r2,-4(fp)
 8042ff4:	10bffb04 	addi	r2,r2,-20
 8042ff8:	e0bfff15 	stw	r2,-4(fp)
   return len;
 8042ffc:	e0bfff17 	ldw	r2,-4(fp)
}
 8043000:	e037883a 	mov	sp,fp
 8043004:	df000017 	ldw	fp,0(sp)
 8043008:	dec00104 	addi	sp,sp,4
 804300c:	f800283a 	ret

08043010 <rt_lookup>:
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
 8043010:	defff804 	addi	sp,sp,-32
 8043014:	df000715 	stw	fp,28(sp)
 8043018:	df000704 	addi	fp,sp,28
 804301c:	e13ff915 	stw	r4,-28(fp)
   RTMIB    rtp;
   RTMIB    netmatch;
   unsigned char max_bits_matched = 0;
 8043020:	e03ffdc5 	stb	zero,-9(fp)
   unsigned char curr_bits_matched;
   ip_addr  entry_mask;
   unsigned long int bitcount_mask;
   unsigned long int extracted_bit;

   netmatch = NULL;
 8043024:	e03ffe15 	stw	zero,-8(fp)

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8043028:	d0a0c117 	ldw	r2,-31996(gp)
 804302c:	e0bfff15 	stw	r2,-4(fp)
 8043030:	00003a06 	br	804311c <rt_lookup+0x10c>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
 8043034:	e0bfff17 	ldw	r2,-4(fp)
 8043038:	10800617 	ldw	r2,24(r2)
 804303c:	10003326 	beq	r2,zero,804310c <rt_lookup+0xfc>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
 8043040:	e0bfff17 	ldw	r2,-4(fp)
 8043044:	10800a17 	ldw	r2,40(r2)
 8043048:	e0bffb15 	stw	r2,-20(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
 804304c:	e0bfff17 	ldw	r2,-4(fp)
 8043050:	10c00017 	ldw	r3,0(r2)
 8043054:	e0bff917 	ldw	r2,-28(fp)
 8043058:	1886f03a 	xor	r3,r3,r2
 804305c:	e0bffb17 	ldw	r2,-20(fp)
 8043060:	1884703a 	and	r2,r3,r2
 8043064:	10002a1e 	bne	r2,zero,8043110 <rt_lookup+0x100>
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 8043068:	e03ffd85 	stb	zero,-10(fp)
 804306c:	00a00034 	movhi	r2,32768
 8043070:	e0bffc15 	stw	r2,-16(fp)
 8043074:	00001806 	br	80430d8 <rt_lookup+0xc8>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
 8043078:	e0bffb17 	ldw	r2,-20(fp)
 804307c:	1006d63a 	srli	r3,r2,24
 8043080:	e0bffb17 	ldw	r2,-20(fp)
 8043084:	1004d23a 	srli	r2,r2,8
 8043088:	10bfc00c 	andi	r2,r2,65280
 804308c:	1886b03a 	or	r3,r3,r2
 8043090:	e0bffb17 	ldw	r2,-20(fp)
 8043094:	1004923a 	slli	r2,r2,8
 8043098:	10803fec 	andhi	r2,r2,255
 804309c:	1886b03a 	or	r3,r3,r2
 80430a0:	e0bffb17 	ldw	r2,-20(fp)
 80430a4:	1004963a 	slli	r2,r2,24
 80430a8:	1884b03a 	or	r2,r3,r2
 80430ac:	e0fffc17 	ldw	r3,-16(fp)
 80430b0:	1884703a 	and	r2,r3,r2
 80430b4:	e0bffa15 	stw	r2,-24(fp)
            if (extracted_bit) ++curr_bits_matched;
 80430b8:	e0bffa17 	ldw	r2,-24(fp)
 80430bc:	10000326 	beq	r2,zero,80430cc <rt_lookup+0xbc>
 80430c0:	e0bffd83 	ldbu	r2,-10(fp)
 80430c4:	10800044 	addi	r2,r2,1
 80430c8:	e0bffd85 	stb	r2,-10(fp)
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 80430cc:	e0bffc17 	ldw	r2,-16(fp)
 80430d0:	1004d07a 	srli	r2,r2,1
 80430d4:	e0bffc15 	stw	r2,-16(fp)
 80430d8:	e0bffc17 	ldw	r2,-16(fp)
 80430dc:	103fe61e 	bne	r2,zero,8043078 <rt_lookup+0x68>
         }
         if (curr_bits_matched > max_bits_matched)
 80430e0:	e0bffd83 	ldbu	r2,-10(fp)
 80430e4:	e0fffdc3 	ldbu	r3,-9(fp)
 80430e8:	1880092e 	bgeu	r3,r2,8043110 <rt_lookup+0x100>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
 80430ec:	e0bffd83 	ldbu	r2,-10(fp)
 80430f0:	e0bffdc5 	stb	r2,-9(fp)
            netmatch = rtp;
 80430f4:	e0bfff17 	ldw	r2,-4(fp)
 80430f8:	e0bffe15 	stw	r2,-8(fp)
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 80430fc:	e0bffdc3 	ldbu	r2,-9(fp)
 8043100:	10800818 	cmpnei	r2,r2,32
 8043104:	10000c26 	beq	r2,zero,8043138 <rt_lookup+0x128>
 8043108:	00000106 	br	8043110 <rt_lookup+0x100>
         continue;
 804310c:	0001883a 	nop
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8043110:	e0bfff17 	ldw	r2,-4(fp)
 8043114:	10800f04 	addi	r2,r2,60
 8043118:	e0bfff15 	stw	r2,-4(fp)
 804311c:	d0e0c117 	ldw	r3,-31996(gp)
 8043120:	d0a04f17 	ldw	r2,-32452(gp)
 8043124:	10800f24 	muli	r2,r2,60
 8043128:	1885883a 	add	r2,r3,r2
 804312c:	e0ffff17 	ldw	r3,-4(fp)
 8043130:	18bfc036 	bltu	r3,r2,8043034 <rt_lookup+0x24>
 8043134:	00000106 	br	804313c <rt_lookup+0x12c>
               break;
 8043138:	0001883a 	nop
         }
      }
   }

   if (netmatch)
 804313c:	e0bffe17 	ldw	r2,-8(fp)
 8043140:	10000326 	beq	r2,zero,8043150 <rt_lookup+0x140>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
 8043144:	d0e0a317 	ldw	r3,-32116(gp)
 8043148:	e0bffe17 	ldw	r2,-8(fp)
 804314c:	10c00915 	stw	r3,36(r2)

   return netmatch;
 8043150:	e0bffe17 	ldw	r2,-8(fp)
}
 8043154:	e037883a 	mov	sp,fp
 8043158:	df000017 	ldw	fp,0(sp)
 804315c:	dec00104 	addi	sp,sp,4
 8043160:	f800283a 	ret

08043164 <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
 8043164:	defff704 	addi	sp,sp,-36
 8043168:	dfc00815 	stw	ra,32(sp)
 804316c:	df000715 	stw	fp,28(sp)
 8043170:	df000704 	addi	fp,sp,28
 8043174:	e13ffc15 	stw	r4,-16(fp)
 8043178:	e17ffb15 	stw	r5,-20(fp)
 804317c:	e1bffa15 	stw	r6,-24(fp)
 8043180:	e1fff915 	stw	r7,-28(fp)
   RTMIB rtp;           /* scratch route table entrry pointer */
   RTMIB newrt;         /* best entry for new route */
   struct net * ifp;    /* interface (net) for nexthop */

   newrt = NULL;     /* may be replaced with empty or more expendable entry */
 8043184:	e03ffe15 	stw	zero,-8(fp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
 8043188:	e13ff917 	ldw	r4,-28(fp)
 804318c:	803ddb40 	call	803ddb4 <if_getbynum>
 8043190:	e0bffd15 	stw	r2,-12(fp)
   if(!ifp)
 8043194:	e0bffd17 	ldw	r2,-12(fp)
 8043198:	1000021e 	bne	r2,zero,80431a4 <add_route+0x40>
      return NULL;
 804319c:	0005883a 	mov	r2,zero
 80431a0:	0000d406 	br	80434f4 <add_route+0x390>

   if (rt_mib == NULL)
 80431a4:	d0a0c117 	ldw	r2,-31996(gp)
 80431a8:	1000021e 	bne	r2,zero,80431b4 <add_route+0x50>
      return NULL;
 80431ac:	0005883a 	mov	r2,zero
 80431b0:	0000d006 	br	80434f4 <add_route+0x390>

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
 80431b4:	e0bffc17 	ldw	r2,-16(fp)
 80431b8:	10000226 	beq	r2,zero,80431c4 <add_route+0x60>
 80431bc:	e0bffb17 	ldw	r2,-20(fp)
 80431c0:	1000221e 	bne	r2,zero,804324c <add_route+0xe8>
   {
      dtrap();    /* bad configuration? */
 80431c4:	802c3fc0 	call	802c3fc <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
	      htonl(dest), htonl(mask) );
 80431c8:	e0bffc17 	ldw	r2,-16(fp)
 80431cc:	1006d63a 	srli	r3,r2,24
 80431d0:	e0bffc17 	ldw	r2,-16(fp)
 80431d4:	1004d23a 	srli	r2,r2,8
 80431d8:	10bfc00c 	andi	r2,r2,65280
 80431dc:	1886b03a 	or	r3,r3,r2
 80431e0:	e0bffc17 	ldw	r2,-16(fp)
 80431e4:	1004923a 	slli	r2,r2,8
 80431e8:	10803fec 	andhi	r2,r2,255
 80431ec:	1886b03a 	or	r3,r3,r2
 80431f0:	e0bffc17 	ldw	r2,-16(fp)
 80431f4:	1004963a 	slli	r2,r2,24
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 80431f8:	1888b03a 	or	r4,r3,r2
	      htonl(dest), htonl(mask) );
 80431fc:	e0bffb17 	ldw	r2,-20(fp)
 8043200:	1006d63a 	srli	r3,r2,24
 8043204:	e0bffb17 	ldw	r2,-20(fp)
 8043208:	1004d23a 	srli	r2,r2,8
 804320c:	10bfc00c 	andi	r2,r2,65280
 8043210:	1886b03a 	or	r3,r3,r2
 8043214:	e0bffb17 	ldw	r2,-20(fp)
 8043218:	1004923a 	slli	r2,r2,8
 804321c:	10803fec 	andhi	r2,r2,255
 8043220:	1886b03a 	or	r3,r3,r2
 8043224:	e0bffb17 	ldw	r2,-20(fp)
 8043228:	1004963a 	slli	r2,r2,24
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 804322c:	1884b03a 	or	r2,r3,r2
 8043230:	100d883a 	mov	r6,r2
 8043234:	200b883a 	mov	r5,r4
 8043238:	01020174 	movhi	r4,2053
 804323c:	210e1704 	addi	r4,r4,14428
 8043240:	800325c0 	call	800325c <printf>
      return NULL;
 8043244:	0005883a 	mov	r2,zero
 8043248:	0000aa06 	br	80434f4 <add_route+0x390>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 804324c:	d0a0c117 	ldw	r2,-31996(gp)
 8043250:	e0bfff15 	stw	r2,-4(fp)
 8043254:	00006406 	br	80433e8 <add_route+0x284>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
 8043258:	e0bfff17 	ldw	r2,-4(fp)
 804325c:	10800017 	ldw	r2,0(r2)
 8043260:	e0fffc17 	ldw	r3,-16(fp)
 8043264:	1880151e 	bne	r3,r2,80432bc <add_route+0x158>
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
 8043268:	e0bfff17 	ldw	r2,-4(fp)
 804326c:	e0fffa17 	ldw	r3,-24(fp)
 8043270:	10c00615 	stw	r3,24(r2)
         rtp->ipRouteAge = cticks;           /* timestamp it */
 8043274:	d0e0a317 	ldw	r3,-32116(gp)
 8043278:	e0bfff17 	ldw	r2,-4(fp)
 804327c:	10c00915 	stw	r3,36(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
 8043280:	e0bff917 	ldw	r2,-28(fp)
 8043284:	10c00044 	addi	r3,r2,1
 8043288:	e0bfff17 	ldw	r2,-4(fp)
 804328c:	10c00115 	stw	r3,4(r2)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
 8043290:	e0bfff17 	ldw	r2,-4(fp)
 8043294:	e0c00217 	ldw	r3,8(fp)
 8043298:	10c00815 	stw	r3,32(r2)
         rtp->ipRouteMask = mask;
 804329c:	e0bfff17 	ldw	r2,-4(fp)
 80432a0:	e0fffb17 	ldw	r3,-20(fp)
 80432a4:	10c00a15 	stw	r3,40(r2)
         rtp->ifp = ifp;
 80432a8:	e0bfff17 	ldw	r2,-4(fp)
 80432ac:	e0fffd17 	ldw	r3,-12(fp)
 80432b0:	10c00e15 	stw	r3,56(r2)
         return(rtp);   /* just update and exit */
 80432b4:	e0bfff17 	ldw	r2,-4(fp)
 80432b8:	00008e06 	br	80434f4 <add_route+0x390>
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
 80432bc:	e0bffe17 	ldw	r2,-8(fp)
 80432c0:	10000326 	beq	r2,zero,80432d0 <add_route+0x16c>
 80432c4:	e0bffe17 	ldw	r2,-8(fp)
 80432c8:	10800817 	ldw	r2,32(r2)
 80432cc:	10004326 	beq	r2,zero,80433dc <add_route+0x278>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
 80432d0:	e0bfff17 	ldw	r2,-4(fp)
 80432d4:	10800617 	ldw	r2,24(r2)
 80432d8:	1000051e 	bne	r2,zero,80432f0 <add_route+0x18c>
         {
            newrt = rtp;   /* record empty route for use */
 80432dc:	e0bfff17 	ldw	r2,-4(fp)
 80432e0:	e0bffe15 	stw	r2,-8(fp)
            newrt->ipRouteProto = 0;
 80432e4:	e0bffe17 	ldw	r2,-8(fp)
 80432e8:	10000815 	stw	zero,32(r2)
            continue;
 80432ec:	00003b06 	br	80433dc <add_route+0x278>
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
 80432f0:	e0c00217 	ldw	r3,8(fp)
 80432f4:	00820174 	movhi	r2,2053
 80432f8:	1885883a 	add	r2,r3,r2
 80432fc:	11188103 	ldbu	r4,25092(r2)
 8043300:	e0bfff17 	ldw	r2,-4(fp)
 8043304:	10c00817 	ldw	r3,32(r2)
 8043308:	00820174 	movhi	r2,2053
 804330c:	1885883a 	add	r2,r3,r2
 8043310:	10988103 	ldbu	r2,25092(r2)
 8043314:	20c03fcc 	andi	r3,r4,255
 8043318:	10803fcc 	andi	r2,r2,255
 804331c:	18802f36 	bltu	r3,r2,80433dc <add_route+0x278>
         {
            if (!newrt)
 8043320:	e0bffe17 	ldw	r2,-8(fp)
 8043324:	1000031e 	bne	r2,zero,8043334 <add_route+0x1d0>
            {
               newrt = rtp;
 8043328:	e0bfff17 	ldw	r2,-4(fp)
 804332c:	e0bffe15 	stw	r2,-8(fp)
               continue;
 8043330:	00002a06 	br	80433dc <add_route+0x278>
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
 8043334:	e0bfff17 	ldw	r2,-4(fp)
 8043338:	10c00817 	ldw	r3,32(r2)
 804333c:	00820174 	movhi	r2,2053
 8043340:	1885883a 	add	r2,r3,r2
 8043344:	11188103 	ldbu	r4,25092(r2)
                rtp_priority[newrt->ipRouteProto])
 8043348:	e0bffe17 	ldw	r2,-8(fp)
 804334c:	10c00817 	ldw	r3,32(r2)
 8043350:	00820174 	movhi	r2,2053
 8043354:	1885883a 	add	r2,r3,r2
 8043358:	10988103 	ldbu	r2,25092(r2)
            if (rtp_priority[rtp->ipRouteProto] < 
 804335c:	20c03fcc 	andi	r3,r4,255
 8043360:	10803fcc 	andi	r2,r2,255
 8043364:	1880032e 	bgeu	r3,r2,8043374 <add_route+0x210>
            {
               newrt = rtp;   /* save lower priority entry for recycle */
 8043368:	e0bfff17 	ldw	r2,-4(fp)
 804336c:	e0bffe15 	stw	r2,-8(fp)
 8043370:	00001a06 	br	80433dc <add_route+0x278>
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
 8043374:	e0bfff17 	ldw	r2,-4(fp)
 8043378:	10c00817 	ldw	r3,32(r2)
 804337c:	00820174 	movhi	r2,2053
 8043380:	1885883a 	add	r2,r3,r2
 8043384:	11188103 	ldbu	r4,25092(r2)
                rtp_priority[newrt->ipRouteProto])
 8043388:	e0bffe17 	ldw	r2,-8(fp)
 804338c:	10c00817 	ldw	r3,32(r2)
 8043390:	00820174 	movhi	r2,2053
 8043394:	1885883a 	add	r2,r3,r2
 8043398:	10988103 	ldbu	r2,25092(r2)
            else if(rtp_priority[rtp->ipRouteProto] == 
 804339c:	20c03fcc 	andi	r3,r4,255
 80433a0:	10803fcc 	andi	r2,r2,255
 80433a4:	18800d1e 	bne	r3,r2,80433dc <add_route+0x278>
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
 80433a8:	e0bfff17 	ldw	r2,-4(fp)
 80433ac:	10c00917 	ldw	r3,36(r2)
 80433b0:	e0bffe17 	ldw	r2,-8(fp)
 80433b4:	10800917 	ldw	r2,36(r2)
 80433b8:	100b883a 	mov	r5,r2
 80433bc:	1809883a 	mov	r4,r3
 80433c0:	8025b7c0 	call	8025b7c <c_older>
 80433c4:	1007883a 	mov	r3,r2
 80433c8:	e0bfff17 	ldw	r2,-4(fp)
 80433cc:	10800917 	ldw	r2,36(r2)
 80433d0:	1880021e 	bne	r3,r2,80433dc <add_route+0x278>
                  newrt = rtp;   /* got an older one */
 80433d4:	e0bfff17 	ldw	r2,-4(fp)
 80433d8:	e0bffe15 	stw	r2,-8(fp)
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 80433dc:	e0bfff17 	ldw	r2,-4(fp)
 80433e0:	10800f04 	addi	r2,r2,60
 80433e4:	e0bfff15 	stw	r2,-4(fp)
 80433e8:	d0e0c117 	ldw	r3,-31996(gp)
 80433ec:	d0a04f17 	ldw	r2,-32452(gp)
 80433f0:	10800f24 	muli	r2,r2,60
 80433f4:	1885883a 	add	r2,r3,r2
 80433f8:	e0ffff17 	ldw	r3,-4(fp)
 80433fc:	18bf9636 	bltu	r3,r2,8043258 <add_route+0xf4>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
 8043400:	e0bffe17 	ldw	r2,-8(fp)
 8043404:	10002826 	beq	r2,zero,80434a8 <add_route+0x344>
      rtp = newrt;   /* create new entry in lowest priority slot */
 8043408:	e0bffe17 	ldw	r2,-8(fp)
 804340c:	e0bfff15 	stw	r2,-4(fp)
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
 8043410:	e0bfff17 	ldw	r2,-4(fp)
 8043414:	e0fffd17 	ldw	r3,-12(fp)
 8043418:	10c00e15 	stw	r3,56(r2)
   rtp->ipRouteDest = dest;
 804341c:	e0bfff17 	ldw	r2,-4(fp)
 8043420:	e0fffc17 	ldw	r3,-16(fp)
 8043424:	10c00015 	stw	r3,0(r2)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
 8043428:	e13ffd17 	ldw	r4,-12(fp)
 804342c:	80261180 	call	8026118 <if_netnumber>
 8043430:	10c00044 	addi	r3,r2,1
 8043434:	e0bfff17 	ldw	r2,-4(fp)
 8043438:	10c00115 	stw	r3,4(r2)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
 804343c:	008201b4 	movhi	r2,2054
 8043440:	10bd2117 	ldw	r2,-2940(r2)
 8043444:	1007883a 	mov	r3,r2
 8043448:	e0bfff17 	ldw	r2,-4(fp)
 804344c:	10c00215 	stw	r3,8(r2)
   rtp->ipRouteMetric2 = -1;
 8043450:	e0bfff17 	ldw	r2,-4(fp)
 8043454:	00ffffc4 	movi	r3,-1
 8043458:	10c00315 	stw	r3,12(r2)
   rtp->ipRouteMetric3 = -1;
 804345c:	e0bfff17 	ldw	r2,-4(fp)
 8043460:	00ffffc4 	movi	r3,-1
 8043464:	10c00415 	stw	r3,16(r2)
   rtp->ipRouteMetric4 = -1;
 8043468:	e0bfff17 	ldw	r2,-4(fp)
 804346c:	00ffffc4 	movi	r3,-1
 8043470:	10c00515 	stw	r3,20(r2)
   rtp->ipRouteNextHop = nexthop;
 8043474:	e0bfff17 	ldw	r2,-4(fp)
 8043478:	e0fffa17 	ldw	r3,-24(fp)
 804347c:	10c00615 	stw	r3,24(r2)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
 8043480:	e0bfff17 	ldw	r2,-4(fp)
 8043484:	e0c00217 	ldw	r3,8(fp)
 8043488:	10c00815 	stw	r3,32(r2)

   if ((dest & mask) == (nexthop & mask))
 804348c:	e0fffc17 	ldw	r3,-16(fp)
 8043490:	e0bffa17 	ldw	r2,-24(fp)
 8043494:	1886f03a 	xor	r3,r3,r2
 8043498:	e0bffb17 	ldw	r2,-20(fp)
 804349c:	1884703a 	and	r2,r3,r2
 80434a0:	1000071e 	bne	r2,zero,80434c0 <add_route+0x35c>
 80434a4:	00000206 	br	80434b0 <add_route+0x34c>
      return NULL;
 80434a8:	0005883a 	mov	r2,zero
 80434ac:	00001106 	br	80434f4 <add_route+0x390>
      rtp->ipRouteType = IPRT_DIRECT;
 80434b0:	e0bfff17 	ldw	r2,-4(fp)
 80434b4:	00c000c4 	movi	r3,3
 80434b8:	10c00715 	stw	r3,28(r2)
 80434bc:	00000306 	br	80434cc <add_route+0x368>
   else
      rtp->ipRouteType = IPRT_INDIRECT;
 80434c0:	e0bfff17 	ldw	r2,-4(fp)
 80434c4:	00c00104 	movi	r3,4
 80434c8:	10c00715 	stw	r3,28(r2)

   rtp->ipRouteAge = cticks;        /* timestamp it */
 80434cc:	d0e0a317 	ldw	r3,-32116(gp)
 80434d0:	e0bfff17 	ldw	r2,-4(fp)
 80434d4:	10c00915 	stw	r3,36(r2)
   rtp->ipRouteMask = mask;
 80434d8:	e0bfff17 	ldw	r2,-4(fp)
 80434dc:	e0fffb17 	ldw	r3,-20(fp)
 80434e0:	10c00a15 	stw	r3,40(r2)
   rtp->ipRouteMetric5 = -1;
 80434e4:	e0bfff17 	ldw	r2,-4(fp)
 80434e8:	00ffffc4 	movi	r3,-1
 80434ec:	10c00b15 	stw	r3,44(r2)
   return(rtp);
 80434f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80434f4:	e037883a 	mov	sp,fp
 80434f8:	dfc00117 	ldw	ra,4(sp)
 80434fc:	df000017 	ldw	fp,0(sp)
 8043500:	dec00204 	addi	sp,sp,8
 8043504:	f800283a 	ret

08043508 <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
 8043508:	defff804 	addi	sp,sp,-32
 804350c:	dfc00715 	stw	ra,28(sp)
 8043510:	df000615 	stw	fp,24(sp)
 8043514:	df000604 	addi	fp,sp,24
 8043518:	e13ffc15 	stw	r4,-16(fp)
 804351c:	e17ffb15 	stw	r5,-20(fp)
 8043520:	e1bffa15 	stw	r6,-24(fp)
   RTMIB rtp;
   int   retval   =  0;
 8043524:	e03ffe15 	stw	zero,-8(fp)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 8043528:	e0bffa17 	ldw	r2,-24(fp)
 804352c:	10bfffd8 	cmpnei	r2,r2,-1
 8043530:	1000021e 	bne	r2,zero,804353c <del_route+0x34>
      ifp = NULL;    /* wildcard */
 8043534:	e03ffd15 	stw	zero,-12(fp)
 8043538:	00000306 	br	8043548 <del_route+0x40>
   else
      ifp = if_getbynum(iface);
 804353c:	e13ffa17 	ldw	r4,-24(fp)
 8043540:	803ddb40 	call	803ddb4 <if_getbynum>
 8043544:	e0bffd15 	stw	r2,-12(fp)

   if (rt_mib == NULL)     /* Make sure we're up */
 8043548:	d0a0c117 	ldw	r2,-31996(gp)
 804354c:	1000021e 	bne	r2,zero,8043558 <del_route+0x50>
      return 0;
 8043550:	0005883a 	mov	r2,zero
 8043554:	00002c06 	br	8043608 <del_route+0x100>

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 8043558:	d0a0c117 	ldw	r2,-31996(gp)
 804355c:	e0bfff15 	stw	r2,-4(fp)
 8043560:	00002206 	br	80435ec <del_route+0xe4>
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
 8043564:	e0bfff17 	ldw	r2,-4(fp)
 8043568:	10800617 	ldw	r2,24(r2)
 804356c:	10001926 	beq	r2,zero,80435d4 <del_route+0xcc>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
 8043570:	e0bffd17 	ldw	r2,-12(fp)
 8043574:	10000426 	beq	r2,zero,8043588 <del_route+0x80>
 8043578:	e0bfff17 	ldw	r2,-4(fp)
 804357c:	10800e17 	ldw	r2,56(r2)
 8043580:	e0fffd17 	ldw	r3,-12(fp)
 8043584:	1880151e 	bne	r3,r2,80435dc <del_route+0xd4>
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 8043588:	e0bfff17 	ldw	r2,-4(fp)
 804358c:	10c00017 	ldw	r3,0(r2)
 8043590:	e0bffc17 	ldw	r2,-16(fp)
 8043594:	1886f03a 	xor	r3,r3,r2
 8043598:	e0bffb17 	ldw	r2,-20(fp)
 804359c:	1884703a 	and	r2,r3,r2
 80435a0:	1000071e 	bne	r2,zero,80435c0 <del_route+0xb8>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 80435a4:	01800f04 	movi	r6,60
 80435a8:	000b883a 	mov	r5,zero
 80435ac:	e13fff17 	ldw	r4,-4(fp)
 80435b0:	8002fa40 	call	8002fa4 <memset>
         retval++;
 80435b4:	e0bffe17 	ldw	r2,-8(fp)
 80435b8:	10800044 	addi	r2,r2,1
 80435bc:	e0bffe15 	stw	r2,-8(fp)
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
 80435c0:	d0a0cb17 	ldw	r2,-31956(gp)
 80435c4:	e0ffff17 	ldw	r3,-4(fp)
 80435c8:	1880051e 	bne	r3,r2,80435e0 <del_route+0xd8>
         cachedRoute = NULL;
 80435cc:	d020cb15 	stw	zero,-31956(gp)
 80435d0:	00000306 	br	80435e0 <del_route+0xd8>
         continue;
 80435d4:	0001883a 	nop
 80435d8:	00000106 	br	80435e0 <del_route+0xd8>
         continue;   /* interface didn't match */
 80435dc:	0001883a 	nop
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 80435e0:	e0bfff17 	ldw	r2,-4(fp)
 80435e4:	10800f04 	addi	r2,r2,60
 80435e8:	e0bfff15 	stw	r2,-4(fp)
 80435ec:	d0e0c117 	ldw	r3,-31996(gp)
 80435f0:	d0a04f17 	ldw	r2,-32452(gp)
 80435f4:	10800f24 	muli	r2,r2,60
 80435f8:	1885883a 	add	r2,r3,r2
 80435fc:	e0ffff17 	ldw	r3,-4(fp)
 8043600:	18bfd836 	bltu	r3,r2,8043564 <del_route+0x5c>
   }
   return retval;
 8043604:	e0bffe17 	ldw	r2,-8(fp)
}
 8043608:	e037883a 	mov	sp,fp
 804360c:	dfc00117 	ldw	ra,4(sp)
 8043610:	df000017 	ldw	fp,0(sp)
 8043614:	dec00204 	addi	sp,sp,8
 8043618:	f800283a 	ret

0804361c <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 804361c:	deffec04 	addi	sp,sp,-80
 8043620:	dfc01315 	stw	ra,76(sp)
 8043624:	df001215 	stw	fp,72(sp)
 8043628:	df001204 	addi	fp,sp,72
 804362c:	e13ff215 	stw	r4,-56(fp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
 8043630:	e0bff217 	ldw	r2,-56(fp)
 8043634:	10800317 	ldw	r2,12(r2)
 8043638:	e0bffb15 	stw	r2,-20(fp)
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
 804363c:	e0bffb17 	ldw	r2,-20(fp)
 8043640:	10800003 	ldbu	r2,0(r2)
 8043644:	10803fcc 	andi	r2,r2,255
 8043648:	100490ba 	slli	r2,r2,2
 804364c:	10800f0c 	andi	r2,r2,60
 8043650:	e0fffb17 	ldw	r3,-20(fp)
 8043654:	1885883a 	add	r2,r3,r2
 8043658:	e0bffa15 	stw	r2,-24(fp)
   plen = htons(pup->ud_len);
 804365c:	e0bffa17 	ldw	r2,-24(fp)
 8043660:	1080010b 	ldhu	r2,4(r2)
 8043664:	10bfffcc 	andi	r2,r2,65535
 8043668:	1004d23a 	srli	r2,r2,8
 804366c:	10bfffcc 	andi	r2,r2,65535
 8043670:	10c03fcc 	andi	r3,r2,255
 8043674:	e0bffa17 	ldw	r2,-24(fp)
 8043678:	1080010b 	ldhu	r2,4(r2)
 804367c:	10bfffcc 	andi	r2,r2,65535
 8043680:	1004923a 	slli	r2,r2,8
 8043684:	10bfffcc 	andi	r2,r2,65535
 8043688:	1884b03a 	or	r2,r3,r2
 804368c:	e0bff915 	stw	r2,-28(fp)

   if (plen > p->nb_plen)
 8043690:	e0bff217 	ldw	r2,-56(fp)
 8043694:	10c00417 	ldw	r3,16(r2)
 8043698:	e0bff917 	ldw	r2,-28(fp)
 804369c:	1880232e 	bgeu	r3,r2,804372c <udpdemux+0x110>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 80436a0:	d0a07e17 	ldw	r2,-32264(gp)
 80436a4:	1081000c 	andi	r2,r2,1024
 80436a8:	10001726 	beq	r2,zero,8043708 <udpdemux+0xec>
 80436ac:	d0a07e17 	ldw	r2,-32264(gp)
 80436b0:	1080400c 	andi	r2,r2,256
 80436b4:	10001426 	beq	r2,zero,8043708 <udpdemux+0xec>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 80436b8:	e0bff217 	ldw	r2,-56(fp)
 80436bc:	11000417 	ldw	r4,16(r2)
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
 80436c0:	e0bffa17 	ldw	r2,-24(fp)
 80436c4:	1080010b 	ldhu	r2,4(r2)
 80436c8:	10bfffcc 	andi	r2,r2,65535
 80436cc:	1004d23a 	srli	r2,r2,8
 80436d0:	10bfffcc 	andi	r2,r2,65535
 80436d4:	10c03fcc 	andi	r3,r2,255
 80436d8:	e0bffa17 	ldw	r2,-24(fp)
 80436dc:	1080010b 	ldhu	r2,4(r2)
 80436e0:	10bfffcc 	andi	r2,r2,65535
 80436e4:	1004923a 	slli	r2,r2,8
 80436e8:	10bfffcc 	andi	r2,r2,65535
 80436ec:	1884b03a 	or	r2,r3,r2
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 80436f0:	10800204 	addi	r2,r2,8
 80436f4:	100d883a 	mov	r6,r2
 80436f8:	200b883a 	mov	r5,r4
 80436fc:	01020174 	movhi	r4,2053
 8043700:	210e2504 	addi	r4,r4,14484
 8043704:	800325c0 	call	800325c <printf>
#endif
      udp_mib.udpInErrors++;
 8043708:	008201b4 	movhi	r2,2054
 804370c:	10bd3c17 	ldw	r2,-2832(r2)
 8043710:	10c00044 	addi	r3,r2,1
 8043714:	008201b4 	movhi	r2,2054
 8043718:	10fd3c15 	stw	r3,-2832(r2)
      udp_free(p);
 804371c:	e13ff217 	ldw	r4,-56(fp)
 8043720:	80442a00 	call	80442a0 <udp_free>
      return ENP_BAD_HEADER;
 8043724:	00bff804 	movi	r2,-32
 8043728:	00019206 	br	8043d74 <udpdemux+0x758>
   }

   osum = pup->ud_cksum;
 804372c:	e0bffa17 	ldw	r2,-24(fp)
 8043730:	1080018b 	ldhu	r2,6(r2)
 8043734:	e0bff88d 	sth	r2,-30(fp)
   /* did other guy use checksumming? */
   if (osum)
 8043738:	e0bff88b 	ldhu	r2,-30(fp)
 804373c:	10005626 	beq	r2,zero,8043898 <udpdemux+0x27c>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
 8043740:	e0bff917 	ldw	r2,-28(fp)
 8043744:	1080004c 	andi	r2,r2,1
 8043748:	10000426 	beq	r2,zero,804375c <udpdemux+0x140>
 804374c:	e0fffa17 	ldw	r3,-24(fp)
 8043750:	e0bff917 	ldw	r2,-28(fp)
 8043754:	1885883a 	add	r2,r3,r2
 8043758:	10000005 	stb	zero,0(r2)
         php.ph_src = p->fhost;
 804375c:	e0bff217 	ldw	r2,-56(fp)
 8043760:	10800717 	ldw	r2,28(r2)
 8043764:	e0bff315 	stw	r2,-52(fp)
      php.ph_dest = pip->ip_dest;
 8043768:	e0bffb17 	ldw	r2,-20(fp)
 804376c:	10800417 	ldw	r2,16(r2)
 8043770:	e0bff415 	stw	r2,-48(fp)
      php.ph_zero = 0;
 8043774:	e03ff505 	stb	zero,-44(fp)
      php.ph_prot = UDP_PROT;
 8043778:	00800444 	movi	r2,17
 804377c:	e0bff545 	stb	r2,-43(fp)
      php.ph_len  = pup->ud_len;
 8043780:	e0bffa17 	ldw	r2,-24(fp)
 8043784:	1080010b 	ldhu	r2,4(r2)
 8043788:	e0bff58d 	sth	r2,-42(fp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 804378c:	e0bff304 	addi	r2,fp,-52
 8043790:	01400184 	movi	r5,6
 8043794:	1009883a 	mov	r4,r2
 8043798:	8027be00 	call	8027be0 <cksum>
 804379c:	1007883a 	mov	r3,r2
 80437a0:	e0bffa17 	ldw	r2,-24(fp)
 80437a4:	10c0018d 	sth	r3,6(r2)
      xsum = ~cksum(pup, (plen+1)>>1);
 80437a8:	e0bff917 	ldw	r2,-28(fp)
 80437ac:	10800044 	addi	r2,r2,1
 80437b0:	1004d07a 	srli	r2,r2,1
 80437b4:	100b883a 	mov	r5,r2
 80437b8:	e13ffa17 	ldw	r4,-24(fp)
 80437bc:	8027be00 	call	8027be0 <cksum>
 80437c0:	0084303a 	nor	r2,zero,r2
 80437c4:	e0bffe8d 	sth	r2,-6(fp)
      if (!xsum)
 80437c8:	e0bffe8b 	ldhu	r2,-6(fp)
 80437cc:	1000021e 	bne	r2,zero,80437d8 <udpdemux+0x1bc>
         xsum = 0xffff;
 80437d0:	00bfffc4 	movi	r2,-1
 80437d4:	e0bffe8d 	sth	r2,-6(fp)
      pup->ud_cksum = osum;
 80437d8:	e0bffa17 	ldw	r2,-24(fp)
 80437dc:	e0fff88b 	ldhu	r3,-30(fp)
 80437e0:	10c0018d 	sth	r3,6(r2)
      if (xsum != osum)
 80437e4:	e0fffe8b 	ldhu	r3,-6(fp)
 80437e8:	e0bff88b 	ldhu	r2,-30(fp)
 80437ec:	18802a26 	beq	r3,r2,8043898 <udpdemux+0x27c>
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 80437f0:	d0a07e17 	ldw	r2,-32264(gp)
 80437f4:	1081000c 	andi	r2,r2,1024
 80437f8:	10001e26 	beq	r2,zero,8043874 <udpdemux+0x258>
 80437fc:	d0a07e17 	ldw	r2,-32264(gp)
 8043800:	1080400c 	andi	r2,r2,256
 8043804:	10001b26 	beq	r2,zero,8043874 <udpdemux+0x258>
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 8043808:	e17ff88b 	ldhu	r5,-30(fp)
 804380c:	e1bffe8b 	ldhu	r6,-6(fp)
                    osum, xsum, PUSH_IPADDR(p->fhost));
 8043810:	e0bff217 	ldw	r2,-56(fp)
 8043814:	10800717 	ldw	r2,28(r2)
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 8043818:	11c03fcc 	andi	r7,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 804381c:	e0bff217 	ldw	r2,-56(fp)
 8043820:	10800717 	ldw	r2,28(r2)
 8043824:	1004d23a 	srli	r2,r2,8
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 8043828:	10803fcc 	andi	r2,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 804382c:	e0fff217 	ldw	r3,-56(fp)
 8043830:	18c00717 	ldw	r3,28(r3)
 8043834:	1806d43a 	srli	r3,r3,16
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 8043838:	18c03fcc 	andi	r3,r3,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
 804383c:	e13ff217 	ldw	r4,-56(fp)
 8043840:	21000717 	ldw	r4,28(r4)
 8043844:	2008d63a 	srli	r4,r4,24
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 8043848:	d9000215 	stw	r4,8(sp)
 804384c:	d8c00115 	stw	r3,4(sp)
 8043850:	d8800015 	stw	r2,0(sp)
 8043854:	01020174 	movhi	r4,2053
 8043858:	210e2f04 	addi	r4,r4,14524
 804385c:	800325c0 	call	800325c <printf>
            if (NDEBUG & DUMP)
 8043860:	d0a07e17 	ldw	r2,-32264(gp)
 8043864:	1080008c 	andi	r2,r2,2
 8043868:	10000226 	beq	r2,zero,8043874 <udpdemux+0x258>
               ip_dump(p);
 804386c:	e13ff217 	ldw	r4,-56(fp)
 8043870:	803fa040 	call	803fa04 <ip_dump>
         }
#endif
         udp_mib.udpInErrors++;
 8043874:	008201b4 	movhi	r2,2054
 8043878:	10bd3c17 	ldw	r2,-2832(r2)
 804387c:	10c00044 	addi	r3,r2,1
 8043880:	008201b4 	movhi	r2,2054
 8043884:	10fd3c15 	stw	r3,-2832(r2)
         udp_free(p);
 8043888:	e13ff217 	ldw	r4,-56(fp)
 804388c:	80442a00 	call	80442a0 <udp_free>
         return ENP_BAD_HEADER;
 8043890:	00bff804 	movi	r2,-32
 8043894:	00013706 	br	8043d74 <udpdemux+0x758>
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8043898:	e13ffa17 	ldw	r4,-24(fp)
 804389c:	804401c0 	call	804401c <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
 80438a0:	e0bffb17 	ldw	r2,-20(fp)
 80438a4:	10800003 	ldbu	r2,0(r2)
 80438a8:	10803fcc 	andi	r2,r2,255
 80438ac:	100490ba 	slli	r2,r2,2
 80438b0:	10800f0c 	andi	r2,r2,60
 80438b4:	10800204 	addi	r2,r2,8
 80438b8:	e0bffd15 	stw	r2,-12(fp)
   p->nb_plen -= e;
 80438bc:	e0bff217 	ldw	r2,-56(fp)
 80438c0:	10c00417 	ldw	r3,16(r2)
 80438c4:	e0bffd17 	ldw	r2,-12(fp)
 80438c8:	1887c83a 	sub	r3,r3,r2
 80438cc:	e0bff217 	ldw	r2,-56(fp)
 80438d0:	10c00415 	stw	r3,16(r2)
   p->nb_prot += e;
 80438d4:	e0bff217 	ldw	r2,-56(fp)
 80438d8:	10c00317 	ldw	r3,12(r2)
 80438dc:	e0bffd17 	ldw	r2,-12(fp)
 80438e0:	1887883a 	add	r3,r3,r2
 80438e4:	e0bff217 	ldw	r2,-56(fp)
 80438e8:	10c00315 	stw	r3,12(r2)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 80438ec:	d0a07e17 	ldw	r2,-32264(gp)
 80438f0:	1081000c 	andi	r2,r2,1024
 80438f4:	10001f26 	beq	r2,zero,8043974 <udpdemux+0x358>
 80438f8:	d0a07e17 	ldw	r2,-32264(gp)
 80438fc:	1080400c 	andi	r2,r2,256
 8043900:	10001c26 	beq	r2,zero,8043974 <udpdemux+0x358>
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 8043904:	e0bff217 	ldw	r2,-56(fp)
 8043908:	10800717 	ldw	r2,28(r2)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 804390c:	11803fcc 	andi	r6,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 8043910:	e0bff217 	ldw	r2,-56(fp)
 8043914:	10800717 	ldw	r2,28(r2)
 8043918:	1004d23a 	srli	r2,r2,8
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 804391c:	11c03fcc 	andi	r7,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 8043920:	e0bff217 	ldw	r2,-56(fp)
 8043924:	10800717 	ldw	r2,28(r2)
 8043928:	1004d43a 	srli	r2,r2,16
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 804392c:	10803fcc 	andi	r2,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 8043930:	e0fff217 	ldw	r3,-56(fp)
 8043934:	18c00717 	ldw	r3,28(r3)
 8043938:	1806d63a 	srli	r3,r3,24
 804393c:	e13ffa17 	ldw	r4,-24(fp)
 8043940:	2100000b 	ldhu	r4,0(r4)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 8043944:	213fffcc 	andi	r4,r4,65535
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
 8043948:	e17ffa17 	ldw	r5,-24(fp)
 804394c:	2940008b 	ldhu	r5,2(r5)
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 8043950:	297fffcc 	andi	r5,r5,65535
 8043954:	d9400315 	stw	r5,12(sp)
 8043958:	d9000215 	stw	r4,8(sp)
 804395c:	d8c00115 	stw	r3,4(sp)
 8043960:	d8800015 	stw	r2,0(sp)
 8043964:	e17ff917 	ldw	r5,-28(fp)
 8043968:	01020174 	movhi	r4,2053
 804396c:	210e3d04 	addi	r4,r4,14580
 8043970:	800325c0 	call	800325c <printf>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 8043974:	d0a09717 	ldw	r2,-32164(gp)
 8043978:	e0bfff15 	stw	r2,-4(fp)
 804397c:	0000aa06 	br	8043c28 <udpdemux+0x60c>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
 8043980:	e0bfff17 	ldw	r2,-4(fp)
 8043984:	1080018b 	ldhu	r2,6(r2)
 8043988:	10bfffcc 	andi	r2,r2,65535
 804398c:	10000726 	beq	r2,zero,80439ac <udpdemux+0x390>
 8043990:	e0bfff17 	ldw	r2,-4(fp)
 8043994:	10c0018b 	ldhu	r3,6(r2)
 8043998:	e0bffa17 	ldw	r2,-24(fp)
 804399c:	1080008b 	ldhu	r2,2(r2)
 80439a0:	18ffffcc 	andi	r3,r3,65535
 80439a4:	10bfffcc 	andi	r2,r2,65535
 80439a8:	1880951e 	bne	r3,r2,8043c00 <udpdemux+0x5e4>
         continue;
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
 80439ac:	e0bfff17 	ldw	r2,-4(fp)
 80439b0:	1080020b 	ldhu	r2,8(r2)
 80439b4:	10bfffcc 	andi	r2,r2,65535
 80439b8:	10000726 	beq	r2,zero,80439d8 <udpdemux+0x3bc>
 80439bc:	e0bfff17 	ldw	r2,-4(fp)
 80439c0:	10c0020b 	ldhu	r3,8(r2)
 80439c4:	e0bffa17 	ldw	r2,-24(fp)
 80439c8:	1080000b 	ldhu	r2,0(r2)
 80439cc:	18ffffcc 	andi	r3,r3,65535
 80439d0:	10bfffcc 	andi	r2,r2,65535
 80439d4:	18808c1e 	bne	r3,r2,8043c08 <udpdemux+0x5ec>
         continue;
      if (con->u_fhost && (con->u_fhost != p->fhost))
 80439d8:	e0bfff17 	ldw	r2,-4(fp)
 80439dc:	10800417 	ldw	r2,16(r2)
 80439e0:	10000526 	beq	r2,zero,80439f8 <udpdemux+0x3dc>
 80439e4:	e0bfff17 	ldw	r2,-4(fp)
 80439e8:	10c00417 	ldw	r3,16(r2)
 80439ec:	e0bff217 	ldw	r2,-56(fp)
 80439f0:	10800717 	ldw	r2,28(r2)
 80439f4:	1880861e 	bne	r3,r2,8043c10 <udpdemux+0x5f4>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
 80439f8:	e0bffb17 	ldw	r2,-20(fp)
 80439fc:	10800417 	ldw	r2,16(r2)
 8043a00:	1006d63a 	srli	r3,r2,24
 8043a04:	e0bffb17 	ldw	r2,-20(fp)
 8043a08:	10800417 	ldw	r2,16(r2)
 8043a0c:	1004d23a 	srli	r2,r2,8
 8043a10:	10bfc00c 	andi	r2,r2,65280
 8043a14:	1886b03a 	or	r3,r3,r2
 8043a18:	e0bffb17 	ldw	r2,-20(fp)
 8043a1c:	10800417 	ldw	r2,16(r2)
 8043a20:	1004923a 	slli	r2,r2,8
 8043a24:	10803fec 	andhi	r2,r2,255
 8043a28:	1886b03a 	or	r3,r3,r2
 8043a2c:	e0bffb17 	ldw	r2,-20(fp)
 8043a30:	10800417 	ldw	r2,16(r2)
 8043a34:	1004963a 	slli	r2,r2,24
 8043a38:	1884b03a 	or	r2,r3,r2
 8043a3c:	10fc002c 	andhi	r3,r2,61440
 8043a40:	00b80034 	movhi	r2,57344
 8043a44:	18802d1e 	bne	r3,r2,8043afc <udpdemux+0x4e0>
      {
         struct socket *soptr = (struct socket *)con->u_data;
 8043a48:	e0bfff17 	ldw	r2,-4(fp)
 8043a4c:	10800617 	ldw	r2,24(r2)
 8043a50:	e0bff715 	stw	r2,-36(fp)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
 8043a54:	e0bfff17 	ldw	r2,-4(fp)
 8043a58:	10c00517 	ldw	r3,20(r2)
 8043a5c:	00820134 	movhi	r2,2052
 8043a60:	10a71304 	addi	r2,r2,-25524
 8043a64:	1880251e 	bne	r3,r2,8043afc <udpdemux+0x4e0>
 8043a68:	e0bff717 	ldw	r2,-36(fp)
 8043a6c:	10800317 	ldw	r2,12(r2)
 8043a70:	10002226 	beq	r2,zero,8043afc <udpdemux+0x4e0>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;
 8043a74:	e0bff717 	ldw	r2,-36(fp)
 8043a78:	10800317 	ldw	r2,12(r2)
 8043a7c:	e0bff615 	stw	r2,-40(fp)

            for (i = 0; i < imo->imo_num_memberships; ++i)
 8043a80:	e03ffc8d 	sth	zero,-14(fp)
 8043a84:	00001706 	br	8043ae4 <udpdemux+0x4c8>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 8043a88:	e0bffc8b 	ldhu	r2,-14(fp)
 8043a8c:	e0fff617 	ldw	r3,-40(fp)
 8043a90:	10800084 	addi	r2,r2,2
 8043a94:	100490ba 	slli	r2,r2,2
 8043a98:	1885883a 	add	r2,r3,r2
 8043a9c:	10800017 	ldw	r2,0(r2)
 8043aa0:	10c00117 	ldw	r3,4(r2)
 8043aa4:	e0bff217 	ldw	r2,-56(fp)
 8043aa8:	10800617 	ldw	r2,24(r2)
 8043aac:	18800a1e 	bne	r3,r2,8043ad8 <udpdemux+0x4bc>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
 8043ab0:	e0bffc8b 	ldhu	r2,-14(fp)
 8043ab4:	e0fff617 	ldw	r3,-40(fp)
 8043ab8:	10800084 	addi	r2,r2,2
 8043abc:	100490ba 	slli	r2,r2,2
 8043ac0:	1885883a 	add	r2,r3,r2
 8043ac4:	10800017 	ldw	r2,0(r2)
 8043ac8:	10c00017 	ldw	r3,0(r2)
 8043acc:	e0bffb17 	ldw	r2,-20(fp)
 8043ad0:	10800417 	ldw	r2,16(r2)
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 8043ad4:	18800b26 	beq	r3,r2,8043b04 <udpdemux+0x4e8>
            for (i = 0; i < imo->imo_num_memberships; ++i)
 8043ad8:	e0bffc8b 	ldhu	r2,-14(fp)
 8043adc:	10800044 	addi	r2,r2,1
 8043ae0:	e0bffc8d 	sth	r2,-14(fp)
 8043ae4:	e0bff617 	ldw	r2,-40(fp)
 8043ae8:	1080018b 	ldhu	r2,6(r2)
 8043aec:	e0fffc8b 	ldhu	r3,-14(fp)
 8043af0:	10bfffcc 	andi	r2,r2,65535
 8043af4:	18bfe436 	bltu	r3,r2,8043a88 <udpdemux+0x46c>
               {
                  goto found;
               }
            }
            continue;
 8043af8:	00004806 	br	8043c1c <udpdemux+0x600>
         }
      }
      found:
 8043afc:	0001883a 	nop
 8043b00:	00000106 	br	8043b08 <udpdemux+0x4ec>
                  goto found;
 8043b04:	0001883a 	nop
#endif /* INCLUDE_TCP */

      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
 8043b08:	e0bffb17 	ldw	r2,-20(fp)
 8043b0c:	10800417 	ldw	r2,16(r2)
 8043b10:	1006d63a 	srli	r3,r2,24
 8043b14:	e0bffb17 	ldw	r2,-20(fp)
 8043b18:	10800417 	ldw	r2,16(r2)
 8043b1c:	1004d23a 	srli	r2,r2,8
 8043b20:	10bfc00c 	andi	r2,r2,65280
 8043b24:	1886b03a 	or	r3,r3,r2
 8043b28:	e0bffb17 	ldw	r2,-20(fp)
 8043b2c:	10800417 	ldw	r2,16(r2)
 8043b30:	1004923a 	slli	r2,r2,8
 8043b34:	10803fec 	andhi	r2,r2,255
 8043b38:	1886b03a 	or	r3,r3,r2
 8043b3c:	e0bffb17 	ldw	r2,-20(fp)
 8043b40:	10800417 	ldw	r2,16(r2)
 8043b44:	1004963a 	slli	r2,r2,24
 8043b48:	1884b03a 	or	r2,r3,r2
 8043b4c:	10fc002c 	andhi	r3,r2,61440
 8043b50:	00b80034 	movhi	r2,57344
 8043b54:	18800826 	beq	r3,r2,8043b78 <udpdemux+0x55c>
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
 8043b58:	e0bfff17 	ldw	r2,-4(fp)
 8043b5c:	10800317 	ldw	r2,12(r2)
 8043b60:	10000526 	beq	r2,zero,8043b78 <udpdemux+0x55c>
 8043b64:	e0bfff17 	ldw	r2,-4(fp)
 8043b68:	10c00317 	ldw	r3,12(r2)
 8043b6c:	e0bffb17 	ldw	r2,-20(fp)
 8043b70:	10800417 	ldw	r2,16(r2)
 8043b74:	1880281e 	bne	r3,r2,8043c18 <udpdemux+0x5fc>
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
 8043b78:	008201b4 	movhi	r2,2054
 8043b7c:	10bd3a17 	ldw	r2,-2840(r2)
 8043b80:	10c00044 	addi	r3,r2,1
 8043b84:	008201b4 	movhi	r2,2054
 8043b88:	10fd3a15 	stw	r3,-2840(r2)
      if (con->u_rcv)         /* if upcall address is set... */
 8043b8c:	e0bfff17 	ldw	r2,-4(fp)
 8043b90:	10800517 	ldw	r2,20(r2)
 8043b94:	10000d26 	beq	r2,zero,8043bcc <udpdemux+0x5b0>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 8043b98:	0009883a 	mov	r4,zero
 8043b9c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
 8043ba0:	e0bfff17 	ldw	r2,-4(fp)
 8043ba4:	10800517 	ldw	r2,20(r2)
 8043ba8:	e0ffff17 	ldw	r3,-4(fp)
 8043bac:	18c00617 	ldw	r3,24(r3)
 8043bb0:	180b883a 	mov	r5,r3
 8043bb4:	e13ff217 	ldw	r4,-56(fp)
 8043bb8:	103ee83a 	callr	r2
 8043bbc:	e0bffd15 	stw	r2,-12(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 8043bc0:	0009883a 	mov	r4,zero
 8043bc4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
 8043bc8:	00000206 	br	8043bd4 <udpdemux+0x5b8>
      }
      else
         e = ENP_LOGIC;
 8043bcc:	00bffd44 	movi	r2,-11
 8043bd0:	e0bffd15 	stw	r2,-12(fp)

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
 8043bd4:	e0bffd17 	ldw	r2,-12(fp)
 8043bd8:	10000726 	beq	r2,zero,8043bf8 <udpdemux+0x5dc>
      {
         udp_mib.udpInErrors++;
 8043bdc:	008201b4 	movhi	r2,2054
 8043be0:	10bd3c17 	ldw	r2,-2832(r2)
 8043be4:	10c00044 	addi	r3,r2,1
 8043be8:	008201b4 	movhi	r2,2054
 8043bec:	10fd3c15 	stw	r3,-2832(r2)
         udp_free(p);
 8043bf0:	e13ff217 	ldw	r4,-56(fp)
 8043bf4:	80442a00 	call	80442a0 <udp_free>
      }

      return(e);
 8043bf8:	e0bffd17 	ldw	r2,-12(fp)
 8043bfc:	00005d06 	br	8043d74 <udpdemux+0x758>
         continue;
 8043c00:	0001883a 	nop
 8043c04:	00000506 	br	8043c1c <udpdemux+0x600>
         continue;
 8043c08:	0001883a 	nop
 8043c0c:	00000306 	br	8043c1c <udpdemux+0x600>
         continue;
 8043c10:	0001883a 	nop
 8043c14:	00000106 	br	8043c1c <udpdemux+0x600>
            continue;
 8043c18:	0001883a 	nop
   for (con = firstudp; con; con = con->u_next)
 8043c1c:	e0bfff17 	ldw	r2,-4(fp)
 8043c20:	10800017 	ldw	r2,0(r2)
 8043c24:	e0bfff15 	stw	r2,-4(fp)
 8043c28:	e0bfff17 	ldw	r2,-4(fp)
 8043c2c:	103f541e 	bne	r2,zero,8043980 <udpdemux+0x364>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 8043c30:	e0bffb17 	ldw	r2,-20(fp)
 8043c34:	10800417 	ldw	r2,16(r2)
 8043c38:	10bfffe0 	cmpeqi	r2,r2,-1
 8043c3c:	1000121e 	bne	r2,zero,8043c88 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
 8043c40:	e0bffb17 	ldw	r2,-20(fp)
 8043c44:	10c00417 	ldw	r3,16(r2)
 8043c48:	e0bff217 	ldw	r2,-56(fp)
 8043c4c:	10800617 	ldw	r2,24(r2)
 8043c50:	10800e17 	ldw	r2,56(r2)
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 8043c54:	18800c26 	beq	r3,r2,8043c88 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
 8043c58:	e0bffb17 	ldw	r2,-20(fp)
 8043c5c:	10c00417 	ldw	r3,16(r2)
 8043c60:	e0bff217 	ldw	r2,-56(fp)
 8043c64:	10800617 	ldw	r2,24(r2)
 8043c68:	10800f17 	ldw	r2,60(r2)
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
 8043c6c:	18800626 	beq	r3,r2,8043c88 <udpdemux+0x66c>
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
 8043c70:	e0bffb17 	ldw	r2,-20(fp)
 8043c74:	10c00417 	ldw	r3,16(r2)
 8043c78:	e0bff217 	ldw	r2,-56(fp)
 8043c7c:	10800617 	ldw	r2,24(r2)
 8043c80:	10801017 	ldw	r2,64(r2)
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
 8043c84:	1880121e 	bne	r3,r2,8043cd0 <udpdemux+0x6b4>
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 8043c88:	d0a07e17 	ldw	r2,-32264(gp)
 8043c8c:	1081000c 	andi	r2,r2,1024
 8043c90:	10000626 	beq	r2,zero,8043cac <udpdemux+0x690>
 8043c94:	d0a07e17 	ldw	r2,-32264(gp)
 8043c98:	1080400c 	andi	r2,r2,256
 8043c9c:	10000326 	beq	r2,zero,8043cac <udpdemux+0x690>
         dprintf("UDP: ignoring ip broadcast\n");
 8043ca0:	01020174 	movhi	r4,2053
 8043ca4:	210e4704 	addi	r4,r4,14620
 8043ca8:	80033800 	call	8003380 <puts>
#endif
      udp_mib.udpInErrors++;
 8043cac:	008201b4 	movhi	r2,2054
 8043cb0:	10bd3c17 	ldw	r2,-2832(r2)
 8043cb4:	10c00044 	addi	r3,r2,1
 8043cb8:	008201b4 	movhi	r2,2054
 8043cbc:	10fd3c15 	stw	r3,-2832(r2)
      udp_free(p);
 8043cc0:	e13ff217 	ldw	r4,-56(fp)
 8043cc4:	80442a00 	call	80442a0 <udp_free>
      return ENP_NOT_MINE;
 8043cc8:	00800084 	movi	r2,2
 8043ccc:	00002906 	br	8043d74 <udpdemux+0x758>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 8043cd0:	d0a07e17 	ldw	r2,-32264(gp)
 8043cd4:	1081000c 	andi	r2,r2,1024
 8043cd8:	10000f26 	beq	r2,zero,8043d18 <udpdemux+0x6fc>
 8043cdc:	d0a07e17 	ldw	r2,-32264(gp)
 8043ce0:	1080400c 	andi	r2,r2,256
 8043ce4:	10000c26 	beq	r2,zero,8043d18 <udpdemux+0x6fc>
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
 8043ce8:	e0bffa17 	ldw	r2,-24(fp)
 8043cec:	1080008b 	ldhu	r2,2(r2)
 8043cf0:	10bfffcc 	andi	r2,r2,65535
 8043cf4:	100b883a 	mov	r5,r2
 8043cf8:	01020174 	movhi	r4,2053
 8043cfc:	210e4e04 	addi	r4,r4,14648
 8043d00:	800325c0 	call	800325c <printf>
      if (NDEBUG & DUMP) 
 8043d04:	d0a07e17 	ldw	r2,-32264(gp)
 8043d08:	1080008c 	andi	r2,r2,2
 8043d0c:	10000226 	beq	r2,zero,8043d18 <udpdemux+0x6fc>
         ip_dump(p);
 8043d10:	e13ff217 	ldw	r4,-56(fp)
 8043d14:	803fa040 	call	803fa04 <ip_dump>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8043d18:	e13ffa17 	ldw	r4,-24(fp)
 8043d1c:	804401c0 	call	804401c <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
 8043d20:	e0bff217 	ldw	r2,-56(fp)
 8043d24:	10c00717 	ldw	r3,28(r2)
 8043d28:	e0bff217 	ldw	r2,-56(fp)
 8043d2c:	10800617 	ldw	r2,24(r2)
 8043d30:	11000a17 	ldw	r4,40(r2)
 8043d34:	e0bff217 	ldw	r2,-56(fp)
 8043d38:	10800617 	ldw	r2,24(r2)
 8043d3c:	d8800015 	stw	r2,0(sp)
 8043d40:	01c000c4 	movi	r7,3
 8043d44:	e1bffb17 	ldw	r6,-20(fp)
 8043d48:	200b883a 	mov	r5,r4
 8043d4c:	1809883a 	mov	r4,r3
 8043d50:	8049ab80 	call	8049ab8 <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
 8043d54:	008201b4 	movhi	r2,2054
 8043d58:	10bd3b17 	ldw	r2,-2836(r2)
 8043d5c:	10c00044 	addi	r3,r2,1
 8043d60:	008201b4 	movhi	r2,2054
 8043d64:	10fd3b15 	stw	r3,-2836(r2)
   udp_free(p);
 8043d68:	e13ff217 	ldw	r4,-56(fp)
 8043d6c:	80442a00 	call	80442a0 <udp_free>
   return ENP_NOT_MINE;
 8043d70:	00800084 	movi	r2,2
}
 8043d74:	e037883a 	mov	sp,fp
 8043d78:	dfc00117 	ldw	ra,4(sp)
 8043d7c:	df000017 	ldw	fp,0(sp)
 8043d80:	dec00204 	addi	sp,sp,8
 8043d84:	f800283a 	ret

08043d88 <udp_send>:
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
 8043d88:	deffef04 	addi	sp,sp,-68
 8043d8c:	dfc01015 	stw	ra,64(sp)
 8043d90:	df000f15 	stw	fp,60(sp)
 8043d94:	df000f04 	addi	fp,sp,60
 8043d98:	2005883a 	mov	r2,r4
 8043d9c:	2807883a 	mov	r3,r5
 8043da0:	e1bff515 	stw	r6,-44(fp)
 8043da4:	e0bff70d 	sth	r2,-36(fp)
 8043da8:	1805883a 	mov	r2,r3
 8043dac:	e0bff60d 	sth	r2,-40(fp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 8043db0:	d0a07e17 	ldw	r2,-32264(gp)
 8043db4:	1080410c 	andi	r2,r2,260
 8043db8:	10001a26 	beq	r2,zero,8043e24 <udp_send+0x9c>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8043dbc:	e0bff517 	ldw	r2,-44(fp)
 8043dc0:	12000417 	ldw	r8,16(r2)
 8043dc4:	e1bff60b 	ldhu	r6,-40(fp)
    PUSH_IPADDR(p->fhost), fport);
 8043dc8:	e0bff517 	ldw	r2,-44(fp)
 8043dcc:	10800717 	ldw	r2,28(r2)
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8043dd0:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(p->fhost), fport);
 8043dd4:	e0bff517 	ldw	r2,-44(fp)
 8043dd8:	10800717 	ldw	r2,28(r2)
 8043ddc:	1004d23a 	srli	r2,r2,8
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8043de0:	10803fcc 	andi	r2,r2,255
    PUSH_IPADDR(p->fhost), fport);
 8043de4:	e0fff517 	ldw	r3,-44(fp)
 8043de8:	18c00717 	ldw	r3,28(r3)
 8043dec:	1806d43a 	srli	r3,r3,16
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8043df0:	18c03fcc 	andi	r3,r3,255
    PUSH_IPADDR(p->fhost), fport);
 8043df4:	e13ff517 	ldw	r4,-44(fp)
 8043df8:	21000717 	ldw	r4,28(r4)
 8043dfc:	2008d63a 	srli	r4,r4,24
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 8043e00:	e17ff70b 	ldhu	r5,-36(fp)
 8043e04:	d9400315 	stw	r5,12(sp)
 8043e08:	d9000215 	stw	r4,8(sp)
 8043e0c:	d8c00115 	stw	r3,4(sp)
 8043e10:	d8800015 	stw	r2,0(sp)
 8043e14:	400b883a 	mov	r5,r8
 8043e18:	01020174 	movhi	r4,2053
 8043e1c:	210e5504 	addi	r4,r4,14676
 8043e20:	800325c0 	call	800325c <printf>
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 8043e24:	0009883a 	mov	r4,zero
 8043e28:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 8043e2c:	e0bff517 	ldw	r2,-44(fp)
 8043e30:	10800317 	ldw	r2,12(r2)
 8043e34:	10fffe04 	addi	r3,r2,-8
 8043e38:	e0bff517 	ldw	r2,-44(fp)
 8043e3c:	10c00315 	stw	r3,12(r2)
   pup = (struct udp*)p->nb_prot;
 8043e40:	e0bff517 	ldw	r2,-44(fp)
 8043e44:	10800317 	ldw	r2,12(r2)
 8043e48:	e0bffe15 	stw	r2,-8(fp)
   udplen = p->nb_plen + sizeof(struct udp);
 8043e4c:	e0bff517 	ldw	r2,-44(fp)
 8043e50:	10800417 	ldw	r2,16(r2)
 8043e54:	10800204 	addi	r2,r2,8
 8043e58:	e0bffd15 	stw	r2,-12(fp)
   p->nb_plen = udplen;
 8043e5c:	e0fffd17 	ldw	r3,-12(fp)
 8043e60:	e0bff517 	ldw	r2,-44(fp)
 8043e64:	10c00415 	stw	r3,16(r2)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 8043e68:	e0bffd17 	ldw	r2,-12(fp)
 8043e6c:	1080004c 	andi	r2,r2,1
 8043e70:	10000426 	beq	r2,zero,8043e84 <udp_send+0xfc>
 8043e74:	e0bffd17 	ldw	r2,-12(fp)
 8043e78:	e0fffe17 	ldw	r3,-8(fp)
 8043e7c:	1885883a 	add	r2,r3,r2
 8043e80:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
 8043e84:	e0bffd17 	ldw	r2,-12(fp)
 8043e88:	1007883a 	mov	r3,r2
 8043e8c:	e0bffe17 	ldw	r2,-8(fp)
 8043e90:	10c0010d 	sth	r3,4(r2)
   pup->ud_srcp = lport;
 8043e94:	e0bffe17 	ldw	r2,-8(fp)
 8043e98:	e0fff60b 	ldhu	r3,-40(fp)
 8043e9c:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = fport;
 8043ea0:	e0bffe17 	ldw	r2,-8(fp)
 8043ea4:	e0fff70b 	ldhu	r3,-36(fp)
 8043ea8:	10c0008d 	sth	r3,2(r2)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 8043eac:	e13ffe17 	ldw	r4,-8(fp)
 8043eb0:	804401c0 	call	804401c <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
 8043eb4:	e0bff517 	ldw	r2,-44(fp)
 8043eb8:	10800717 	ldw	r2,28(r2)
 8043ebc:	10bfffd8 	cmpnei	r2,r2,-1
 8043ec0:	10000f1e 	bne	r2,zero,8043f00 <udp_send+0x178>
   {
      if (!p->net)
 8043ec4:	e0bff517 	ldw	r2,-44(fp)
 8043ec8:	10800617 	ldw	r2,24(r2)
 8043ecc:	1000071e 	bne	r2,zero,8043eec <udp_send+0x164>
      {
         dtrap();    /* programmer forgot to select iface */
 8043ed0:	802c3fc0 	call	802c3fc <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
 8043ed4:	e13ff517 	ldw	r4,-44(fp)
 8043ed8:	80442a00 	call	80442a0 <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
 8043edc:	0009883a 	mov	r4,zero
 8043ee0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
         return ENP_NO_IFACE;
 8043ee4:	00bff784 	movi	r2,-34
 8043ee8:	00004706 	br	8044008 <udp_send+0x280>
      }
      src_ip = p->net->n_ipaddr;
 8043eec:	e0bff517 	ldw	r2,-44(fp)
 8043ef0:	10800617 	ldw	r2,24(r2)
 8043ef4:	10800a17 	ldw	r2,40(r2)
 8043ef8:	e0bfff15 	stw	r2,-4(fp)
 8043efc:	00000506 	br	8043f14 <udp_send+0x18c>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
 8043f00:	e0bff517 	ldw	r2,-44(fp)
 8043f04:	10800717 	ldw	r2,28(r2)
 8043f08:	1009883a 	mov	r4,r2
 8043f0c:	803f9600 	call	803f960 <ip_mymach>
 8043f10:	e0bfff15 	stw	r2,-4(fp)
   php.ph_src = src_ip;
 8043f14:	e0bfff17 	ldw	r2,-4(fp)
 8043f18:	e0bff815 	stw	r2,-32(fp)
   php.ph_dest = p->fhost;
 8043f1c:	e0bff517 	ldw	r2,-44(fp)
 8043f20:	10800717 	ldw	r2,28(r2)
 8043f24:	e0bff915 	stw	r2,-28(fp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
 8043f28:	e03ffa05 	stb	zero,-24(fp)
   php.ph_prot = UDP_PROT;
 8043f2c:	00800444 	movi	r2,17
 8043f30:	e0bffa45 	stb	r2,-23(fp)
   php.ph_len = pup->ud_len;
 8043f34:	e0bffe17 	ldw	r2,-8(fp)
 8043f38:	1080010b 	ldhu	r2,4(r2)
 8043f3c:	e0bffa8d 	sth	r2,-22(fp)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 8043f40:	e0bff804 	addi	r2,fp,-32
 8043f44:	01400184 	movi	r5,6
 8043f48:	1009883a 	mov	r4,r2
 8043f4c:	8027be00 	call	8027be0 <cksum>
 8043f50:	1007883a 	mov	r3,r2
 8043f54:	e0bffe17 	ldw	r2,-8(fp)
 8043f58:	10c0018d 	sth	r3,6(r2)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 8043f5c:	e0bffd17 	ldw	r2,-12(fp)
 8043f60:	10800044 	addi	r2,r2,1
 8043f64:	1005d07a 	srai	r2,r2,1
 8043f68:	100b883a 	mov	r5,r2
 8043f6c:	e13ffe17 	ldw	r4,-8(fp)
 8043f70:	8027be00 	call	8027be0 <cksum>
 8043f74:	0084303a 	nor	r2,zero,r2
 8043f78:	1007883a 	mov	r3,r2
 8043f7c:	e0bffe17 	ldw	r2,-8(fp)
 8043f80:	10c0018d 	sth	r3,6(r2)
   if (pup->ud_cksum == 0)
 8043f84:	e0bffe17 	ldw	r2,-8(fp)
 8043f88:	1080018b 	ldhu	r2,6(r2)
 8043f8c:	10bfffcc 	andi	r2,r2,65535
 8043f90:	1000031e 	bne	r2,zero,8043fa0 <udp_send+0x218>
      pup->ud_cksum = 0xffff;
 8043f94:	e0bffe17 	ldw	r2,-8(fp)
 8043f98:	00ffffc4 	movi	r3,-1
 8043f9c:	10c0018d 	sth	r3,6(r2)
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
 8043fa0:	e0bff517 	ldw	r2,-44(fp)
 8043fa4:	10800317 	ldw	r2,12(r2)
 8043fa8:	10bffb04 	addi	r2,r2,-20
 8043fac:	e0bffc15 	stw	r2,-16(fp)
   pip->ip_src = src_ip;
 8043fb0:	e0bffc17 	ldw	r2,-16(fp)
 8043fb4:	e0ffff17 	ldw	r3,-4(fp)
 8043fb8:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = p->fhost;
 8043fbc:	e0bff517 	ldw	r2,-44(fp)
 8043fc0:	10c00717 	ldw	r3,28(r2)
 8043fc4:	e0bffc17 	ldw	r2,-16(fp)
 8043fc8:	10c00415 	stw	r3,16(r2)

   udp_mib.udpOutDatagrams++;
 8043fcc:	008201b4 	movhi	r2,2054
 8043fd0:	10bd3d17 	ldw	r2,-2828(r2)
 8043fd4:	10c00044 	addi	r3,r2,1
 8043fd8:	008201b4 	movhi	r2,2054
 8043fdc:	10fd3d15 	stw	r3,-2828(r2)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
 8043fe0:	e0fffd17 	ldw	r3,-12(fp)
 8043fe4:	e0bff517 	ldw	r2,-44(fp)
 8043fe8:	10c00415 	stw	r3,16(r2)
   e = ip_write(UDP_PROT, p);
 8043fec:	e17ff517 	ldw	r5,-44(fp)
 8043ff0:	01000444 	movi	r4,17
 8043ff4:	803e9840 	call	803e984 <ip_write>
 8043ff8:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 8043ffc:	0009883a 	mov	r4,zero
 8044000:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   return e;
 8044004:	e0bffb17 	ldw	r2,-20(fp)
}
 8044008:	e037883a 	mov	sp,fp
 804400c:	dfc00117 	ldw	ra,4(sp)
 8044010:	df000017 	ldw	fp,0(sp)
 8044014:	dec00204 	addi	sp,sp,8
 8044018:	f800283a 	ret

0804401c <udpswap>:
 */

#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{
 804401c:	defffe04 	addi	sp,sp,-8
 8044020:	df000115 	stw	fp,4(sp)
 8044024:	df000104 	addi	fp,sp,4
 8044028:	e13fff15 	stw	r4,-4(fp)

   pup->ud_srcp = htons(pup->ud_srcp);
 804402c:	e0bfff17 	ldw	r2,-4(fp)
 8044030:	1080000b 	ldhu	r2,0(r2)
 8044034:	10bfffcc 	andi	r2,r2,65535
 8044038:	1004d23a 	srli	r2,r2,8
 804403c:	1007883a 	mov	r3,r2
 8044040:	e0bfff17 	ldw	r2,-4(fp)
 8044044:	1080000b 	ldhu	r2,0(r2)
 8044048:	10bfffcc 	andi	r2,r2,65535
 804404c:	1004923a 	slli	r2,r2,8
 8044050:	1884b03a 	or	r2,r3,r2
 8044054:	1007883a 	mov	r3,r2
 8044058:	e0bfff17 	ldw	r2,-4(fp)
 804405c:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = htons(pup->ud_dstp);
 8044060:	e0bfff17 	ldw	r2,-4(fp)
 8044064:	1080008b 	ldhu	r2,2(r2)
 8044068:	10bfffcc 	andi	r2,r2,65535
 804406c:	1004d23a 	srli	r2,r2,8
 8044070:	1007883a 	mov	r3,r2
 8044074:	e0bfff17 	ldw	r2,-4(fp)
 8044078:	1080008b 	ldhu	r2,2(r2)
 804407c:	10bfffcc 	andi	r2,r2,65535
 8044080:	1004923a 	slli	r2,r2,8
 8044084:	1884b03a 	or	r2,r3,r2
 8044088:	1007883a 	mov	r3,r2
 804408c:	e0bfff17 	ldw	r2,-4(fp)
 8044090:	10c0008d 	sth	r3,2(r2)
   pup->ud_len = htons(pup->ud_len);
 8044094:	e0bfff17 	ldw	r2,-4(fp)
 8044098:	1080010b 	ldhu	r2,4(r2)
 804409c:	10bfffcc 	andi	r2,r2,65535
 80440a0:	1004d23a 	srli	r2,r2,8
 80440a4:	1007883a 	mov	r3,r2
 80440a8:	e0bfff17 	ldw	r2,-4(fp)
 80440ac:	1080010b 	ldhu	r2,4(r2)
 80440b0:	10bfffcc 	andi	r2,r2,65535
 80440b4:	1004923a 	slli	r2,r2,8
 80440b8:	1884b03a 	or	r2,r3,r2
 80440bc:	1007883a 	mov	r3,r2
 80440c0:	e0bfff17 	ldw	r2,-4(fp)
 80440c4:	10c0010d 	sth	r3,4(r2)
   pup->ud_cksum = htons(pup->ud_cksum);
 80440c8:	e0bfff17 	ldw	r2,-4(fp)
 80440cc:	1080018b 	ldhu	r2,6(r2)
 80440d0:	10bfffcc 	andi	r2,r2,65535
 80440d4:	1004d23a 	srli	r2,r2,8
 80440d8:	1007883a 	mov	r3,r2
 80440dc:	e0bfff17 	ldw	r2,-4(fp)
 80440e0:	1080018b 	ldhu	r2,6(r2)
 80440e4:	10bfffcc 	andi	r2,r2,65535
 80440e8:	1004923a 	slli	r2,r2,8
 80440ec:	1884b03a 	or	r2,r3,r2
 80440f0:	1007883a 	mov	r3,r2
 80440f4:	e0bfff17 	ldw	r2,-4(fp)
 80440f8:	10c0018d 	sth	r3,6(r2)
}
 80440fc:	0001883a 	nop
 8044100:	e037883a 	mov	sp,fp
 8044104:	df000017 	ldw	fp,0(sp)
 8044108:	dec00104 	addi	sp,sp,4
 804410c:	f800283a 	ret

08044110 <udp_socket>:
#define  MINSOCKET   1200
static unshort usocket = 0;   /* next socket to grab */

unshort
udp_socket(void)
{
 8044110:	defffe04 	addi	sp,sp,-8
 8044114:	df000115 	stw	fp,4(sp)
 8044118:	df000104 	addi	fp,sp,4
   UDPCONN tmp;

   if (usocket < MINSOCKET)
 804411c:	d0a0cc0b 	ldhu	r2,-31952(gp)
 8044120:	10bfffcc 	andi	r2,r2,65535
 8044124:	10812c28 	cmpgeui	r2,r2,1200
 8044128:	10000a1e 	bne	r2,zero,8044154 <udp_socket+0x44>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
 804412c:	d0a0a317 	ldw	r2,-32116(gp)
 8044130:	109fffcc 	andi	r2,r2,32767
 8044134:	d0a0cc0d 	sth	r2,-31952(gp)
      if (usocket < MINSOCKET)
 8044138:	d0a0cc0b 	ldhu	r2,-31952(gp)
 804413c:	10bfffcc 	andi	r2,r2,65535
 8044140:	10812c28 	cmpgeui	r2,r2,1200
 8044144:	1000031e 	bne	r2,zero,8044154 <udp_socket+0x44>
         usocket += MINSOCKET;
 8044148:	d0a0cc0b 	ldhu	r2,-31952(gp)
 804414c:	10812c04 	addi	r2,r2,1200
 8044150:	d0a0cc0d 	sth	r2,-31952(gp)
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8044154:	d0a09717 	ldw	r2,-32164(gp)
 8044158:	e0bfff15 	stw	r2,-4(fp)
 804415c:	00000f06 	br	804419c <udp_socket+0x8c>
   {
      if (tmp->u_lport == usocket)
 8044160:	e0bfff17 	ldw	r2,-4(fp)
 8044164:	10c0018b 	ldhu	r3,6(r2)
 8044168:	d0a0cc0b 	ldhu	r2,-31952(gp)
 804416c:	18ffffcc 	andi	r3,r3,65535
 8044170:	10bfffcc 	andi	r2,r2,65535
 8044174:	1880061e 	bne	r3,r2,8044190 <udp_socket+0x80>
      {
         usocket++;     /* bump socket number */
 8044178:	d0a0cc0b 	ldhu	r2,-31952(gp)
 804417c:	10800044 	addi	r2,r2,1
 8044180:	d0a0cc0d 	sth	r2,-31952(gp)
         tmp = firstudp;   /* restart scan */
 8044184:	d0a09717 	ldw	r2,-32164(gp)
 8044188:	e0bfff15 	stw	r2,-4(fp)
         continue;
 804418c:	0001883a 	nop
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 8044190:	e0bfff17 	ldw	r2,-4(fp)
 8044194:	10800017 	ldw	r2,0(r2)
 8044198:	e0bfff15 	stw	r2,-4(fp)
 804419c:	e0bfff17 	ldw	r2,-4(fp)
 80441a0:	103fef1e 	bne	r2,zero,8044160 <udp_socket+0x50>
      }
   }
   return usocket++;
 80441a4:	d0a0cc0b 	ldhu	r2,-31952(gp)
 80441a8:	10c00044 	addi	r3,r2,1
 80441ac:	d0e0cc0d 	sth	r3,-31952(gp)
}
 80441b0:	e037883a 	mov	sp,fp
 80441b4:	df000017 	ldw	fp,0(sp)
 80441b8:	dec00104 	addi	sp,sp,4
 80441bc:	f800283a 	ret

080441c0 <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
 80441c0:	defffa04 	addi	sp,sp,-24
 80441c4:	dfc00515 	stw	ra,20(sp)
 80441c8:	df000415 	stw	fp,16(sp)
 80441cc:	df000404 	addi	fp,sp,16
 80441d0:	e13ffd15 	stw	r4,-12(fp)
 80441d4:	e17ffc15 	stw	r5,-16(fp)
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
 80441d8:	e0bffd17 	ldw	r2,-12(fp)
 80441dc:	10800244 	addi	r2,r2,9
 80441e0:	1007883a 	mov	r3,r2
 80441e4:	00bfff84 	movi	r2,-2
 80441e8:	1884703a 	and	r2,r3,r2
 80441ec:	e0bfff15 	stw	r2,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80441f0:	01000084 	movi	r4,2
 80441f4:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
 80441f8:	e0bfff17 	ldw	r2,-4(fp)
 80441fc:	10c00904 	addi	r3,r2,36
 8044200:	e0bffc17 	ldw	r2,-16(fp)
 8044204:	1885883a 	add	r2,r3,r2
 8044208:	1009883a 	mov	r4,r2
 804420c:	802b8840 	call	802b884 <pk_alloc>
 8044210:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8044214:	01000084 	movi	r4,2
 8044218:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
 804421c:	e0bffe17 	ldw	r2,-8(fp)
 8044220:	10001026 	beq	r2,zero,8044264 <udp_alloc+0xa4>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
 8044224:	e0bffc17 	ldw	r2,-16(fp)
 8044228:	1005d0ba 	srai	r2,r2,2
 804422c:	10800704 	addi	r2,r2,28
 8044230:	e0bfff15 	stw	r2,-4(fp)
      p->nb_prot += len;
 8044234:	e0bffe17 	ldw	r2,-8(fp)
 8044238:	10c00317 	ldw	r3,12(r2)
 804423c:	e0bfff17 	ldw	r2,-4(fp)
 8044240:	1887883a 	add	r3,r3,r2
 8044244:	e0bffe17 	ldw	r2,-8(fp)
 8044248:	10c00315 	stw	r3,12(r2)
      p->nb_plen -= len;
 804424c:	e0bffe17 	ldw	r2,-8(fp)
 8044250:	10c00417 	ldw	r3,16(r2)
 8044254:	e0bfff17 	ldw	r2,-4(fp)
 8044258:	1887c83a 	sub	r3,r3,r2
 804425c:	e0bffe17 	ldw	r2,-8(fp)
 8044260:	10c00415 	stw	r3,16(r2)
   }

   return (p);
 8044264:	e0bffe17 	ldw	r2,-8(fp)
}
 8044268:	e037883a 	mov	sp,fp
 804426c:	dfc00117 	ldw	ra,4(sp)
 8044270:	df000017 	ldw	fp,0(sp)
 8044274:	dec00204 	addi	sp,sp,8
 8044278:	f800283a 	ret

0804427c <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
 804427c:	deffff04 	addi	sp,sp,-4
 8044280:	df000015 	stw	fp,0(sp)
 8044284:	d839883a 	mov	fp,sp
    * created is ((2^16 - 1) - (size of IP and UDP headers)) */
   return (0xFFFF - (sizeof (struct ip) + sizeof (struct udp)));
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
 8044288:	d0a03517 	ldw	r2,-32556(gp)
 804428c:	10bff704 	addi	r2,r2,-36
#endif
}
 8044290:	e037883a 	mov	sp,fp
 8044294:	df000017 	ldw	fp,0(sp)
 8044298:	dec00104 	addi	sp,sp,4
 804429c:	f800283a 	ret

080442a0 <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 80442a0:	defffd04 	addi	sp,sp,-12
 80442a4:	dfc00215 	stw	ra,8(sp)
 80442a8:	df000115 	stw	fp,4(sp)
 80442ac:	df000104 	addi	fp,sp,4
 80442b0:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 80442b4:	01000084 	movi	r4,2
 80442b8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 80442bc:	e13fff17 	ldw	r4,-4(fp)
 80442c0:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80442c4:	01000084 	movi	r4,2
 80442c8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
}
 80442cc:	0001883a 	nop
 80442d0:	e037883a 	mov	sp,fp
 80442d4:	dfc00117 	ldw	ra,4(sp)
 80442d8:	df000017 	ldw	fp,0(sp)
 80442dc:	dec00204 	addi	sp,sp,8
 80442e0:	f800283a 	ret

080442e4 <igmpv1_input>:
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
 80442e4:	defff804 	addi	sp,sp,-32
 80442e8:	dfc00715 	stw	ra,28(sp)
 80442ec:	df000615 	stw	fp,24(sp)
 80442f0:	df000604 	addi	fp,sp,24
 80442f4:	e13ffa15 	stw	r4,-24(fp)
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
 80442f8:	e0bffa17 	ldw	r2,-24(fp)
 80442fc:	10800617 	ldw	r2,24(r2)
 8044300:	e0bffd15 	stw	r2,-12(fp)
   int rc;
         
   pip = ip_head (p);
 8044304:	e0bffa17 	ldw	r2,-24(fp)
 8044308:	10800317 	ldw	r2,12(r2)
 804430c:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
 8044310:	e0bffc17 	ldw	r2,-16(fp)
 8044314:	10800003 	ldbu	r2,0(r2)
 8044318:	10803fcc 	andi	r2,r2,255
 804431c:	100490ba 	slli	r2,r2,2
 8044320:	10800f0c 	andi	r2,r2,60
 8044324:	e0fffc17 	ldw	r3,-16(fp)
 8044328:	1885883a 	add	r2,r3,r2
 804432c:	e0bffb15 	stw	r2,-20(fp)

   switch (igmp->igmp_type) 
 8044330:	e0bffb17 	ldw	r2,-20(fp)
 8044334:	10800003 	ldbu	r2,0(r2)
 8044338:	10803fcc 	andi	r2,r2,255
 804433c:	10c00460 	cmpeqi	r3,r2,17
 8044340:	1800031e 	bne	r3,zero,8044350 <igmpv1_input+0x6c>
 8044344:	108004a0 	cmpeqi	r2,r2,18
 8044348:	1000501e 	bne	r2,zero,804448c <igmpv1_input+0x1a8>
 804434c:	00006b06 	br	80444fc <igmpv1_input+0x218>
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
 8044350:	008201b4 	movhi	r2,2054
 8044354:	10badf17 	ldw	r2,-5252(r2)
 8044358:	10c00044 	addi	r3,r2,1
 804435c:	008201b4 	movhi	r2,2054
 8044360:	10fadf15 	stw	r3,-5252(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8044364:	e0bffd17 	ldw	r2,-12(fp)
 8044368:	10802c17 	ldw	r2,176(r2)
 804436c:	e0bfff15 	stw	r2,-4(fp)
 8044370:	00004206 	br	804447c <igmpv1_input+0x198>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
 8044374:	e0bfff17 	ldw	r2,-4(fp)
 8044378:	10800017 	ldw	r2,0(r2)
 804437c:	10003b26 	beq	r2,zero,804446c <igmpv1_input+0x188>
            continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 8044380:	e0bfff17 	ldw	r2,-4(fp)
 8044384:	10c00017 	ldw	r3,0(r2)
 8044388:	d0a08317 	ldw	r2,-32244(gp)
 804438c:	18803826 	beq	r3,r2,8044470 <igmpv1_input+0x18c>
         {
            if (inm->inm_timer == 0)
 8044390:	e0bfff17 	ldw	r2,-4(fp)
 8044394:	10800317 	ldw	r2,12(r2)
 8044398:	1000351e 	bne	r2,zero,8044470 <igmpv1_input+0x18c>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 804439c:	008201b4 	movhi	r2,2054
 80443a0:	10fd2217 	ldw	r3,-2936(r2)
 80443a4:	008201b4 	movhi	r2,2054
 80443a8:	10bada17 	ldw	r2,-5272(r2)
 80443ac:	10800a17 	ldw	r2,40(r2)
 80443b0:	1008d63a 	srli	r4,r2,24
 80443b4:	008201b4 	movhi	r2,2054
 80443b8:	10bada17 	ldw	r2,-5272(r2)
 80443bc:	10800a17 	ldw	r2,40(r2)
 80443c0:	1004d23a 	srli	r2,r2,8
 80443c4:	10bfc00c 	andi	r2,r2,65280
 80443c8:	2088b03a 	or	r4,r4,r2
 80443cc:	008201b4 	movhi	r2,2054
 80443d0:	10bada17 	ldw	r2,-5272(r2)
 80443d4:	10800a17 	ldw	r2,40(r2)
 80443d8:	1004923a 	slli	r2,r2,8
 80443dc:	10803fec 	andhi	r2,r2,255
 80443e0:	2088b03a 	or	r4,r4,r2
 80443e4:	008201b4 	movhi	r2,2054
 80443e8:	10bada17 	ldw	r2,-5272(r2)
 80443ec:	10800a17 	ldw	r2,40(r2)
 80443f0:	1004963a 	slli	r2,r2,24
 80443f4:	2084b03a 	or	r2,r4,r2
 80443f8:	1887883a 	add	r3,r3,r2
 80443fc:	e0bfff17 	ldw	r2,-4(fp)
 8044400:	10800017 	ldw	r2,0(r2)
 8044404:	1008d63a 	srli	r4,r2,24
 8044408:	e0bfff17 	ldw	r2,-4(fp)
 804440c:	10800017 	ldw	r2,0(r2)
 8044410:	1004d23a 	srli	r2,r2,8
 8044414:	10bfc00c 	andi	r2,r2,65280
 8044418:	2088b03a 	or	r4,r4,r2
 804441c:	e0bfff17 	ldw	r2,-4(fp)
 8044420:	10800017 	ldw	r2,0(r2)
 8044424:	1004923a 	slli	r2,r2,8
 8044428:	10803fec 	andhi	r2,r2,255
 804442c:	2088b03a 	or	r4,r4,r2
 8044430:	e0bfff17 	ldw	r2,-4(fp)
 8044434:	10800017 	ldw	r2,0(r2)
 8044438:	1004963a 	slli	r2,r2,24
 804443c:	2084b03a 	or	r2,r4,r2
 8044440:	1885883a 	add	r2,r3,r2
 8044444:	01400c84 	movi	r5,50
 8044448:	1009883a 	mov	r4,r2
 804444c:	800e2940 	call	800e294 <__umodsi3>
 8044450:	10c00044 	addi	r3,r2,1
 8044454:	e0bfff17 	ldw	r2,-4(fp)
 8044458:	10c00315 	stw	r3,12(r2)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
 804445c:	d0a08117 	ldw	r2,-32252(gp)
 8044460:	10800044 	addi	r2,r2,1
 8044464:	d0a08115 	stw	r2,-32252(gp)
 8044468:	00000106 	br	8044470 <igmpv1_input+0x18c>
            continue;
 804446c:	0001883a 	nop
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8044470:	e0bfff17 	ldw	r2,-4(fp)
 8044474:	10800517 	ldw	r2,20(r2)
 8044478:	e0bfff15 	stw	r2,-4(fp)
 804447c:	e0bfff17 	ldw	r2,-4(fp)
 8044480:	103fbc1e 	bne	r2,zero,8044374 <igmpv1_input+0x90>
            }   
         }
      }
      rc = IGMP_OK;
 8044484:	e03ffe15 	stw	zero,-8(fp)
      break;
 8044488:	00002406 	br	804451c <igmpv1_input+0x238>

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
 804448c:	008201b4 	movhi	r2,2054
 8044490:	10bae017 	ldw	r2,-5248(r2)
 8044494:	10c00044 	addi	r3,r2,1
 8044498:	008201b4 	movhi	r2,2054
 804449c:	10fae015 	stw	r3,-5248(r2)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
 80444a0:	e0bffb17 	ldw	r2,-20(fp)
 80444a4:	10800117 	ldw	r2,4(r2)
 80444a8:	e17ffd17 	ldw	r5,-12(fp)
 80444ac:	1009883a 	mov	r4,r2
 80444b0:	80429ec0 	call	80429ec <lookup_mcast>
 80444b4:	e0bfff15 	stw	r2,-4(fp)
      if (inm != NULL) 
 80444b8:	e0bfff17 	ldw	r2,-4(fp)
 80444bc:	10000d26 	beq	r2,zero,80444f4 <igmpv1_input+0x210>
      {
         if (inm->inm_timer > 0)
 80444c0:	e0bfff17 	ldw	r2,-4(fp)
 80444c4:	10800317 	ldw	r2,12(r2)
 80444c8:	10000a26 	beq	r2,zero,80444f4 <igmpv1_input+0x210>
         {
            inm->inm_timer = 0;
 80444cc:	e0bfff17 	ldw	r2,-4(fp)
 80444d0:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 80444d4:	d0a08117 	ldw	r2,-32252(gp)
 80444d8:	10bfffc4 	addi	r2,r2,-1
 80444dc:	d0a08115 	stw	r2,-32252(gp)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 80444e0:	008201b4 	movhi	r2,2054
 80444e4:	10bae117 	ldw	r2,-5244(r2)
 80444e8:	10c00044 	addi	r3,r2,1
 80444ec:	008201b4 	movhi	r2,2054
 80444f0:	10fae115 	stw	r3,-5244(r2)
         }
      }
      rc = IGMP_OK;
 80444f4:	e03ffe15 	stw	zero,-8(fp)
      break;
 80444f8:	00000806 	br	804451c <igmpv1_input+0x238>
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
 80444fc:	008201b4 	movhi	r2,2054
 8044500:	10baee17 	ldw	r2,-5192(r2)
 8044504:	10c00044 	addi	r3,r2,1
 8044508:	008201b4 	movhi	r2,2054
 804450c:	10faee15 	stw	r3,-5192(r2)
      rc = IGMP_ERR;
 8044510:	00bfffc4 	movi	r2,-1
 8044514:	e0bffe15 	stw	r2,-8(fp)
      break;   
 8044518:	0001883a 	nop
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 804451c:	01000084 	movi	r4,2
 8044520:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 8044524:	e13ffa17 	ldw	r4,-24(fp)
 8044528:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804452c:	01000084 	movi	r4,2
 8044530:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      
   return rc;
 8044534:	e0bffe17 	ldw	r2,-8(fp)
}
 8044538:	e037883a 	mov	sp,fp
 804453c:	dfc00117 	ldw	ra,4(sp)
 8044540:	df000017 	ldw	fp,0(sp)
 8044544:	dec00204 	addi	sp,sp,8
 8044548:	f800283a 	ret

0804454c <igmpv2_input>:
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
 804454c:	defff904 	addi	sp,sp,-28
 8044550:	dfc00615 	stw	ra,24(sp)
 8044554:	df000515 	stw	fp,20(sp)
 8044558:	df000504 	addi	fp,sp,20
 804455c:	e13ffb15 	stw	r4,-20(fp)
   struct igmp * igmp;
   struct ip * pip;
   u_char type;
   int rc;

   pip = ip_head (p);    
 8044560:	e0bffb17 	ldw	r2,-20(fp)
 8044564:	10800317 	ldw	r2,12(r2)
 8044568:	e0bffe15 	stw	r2,-8(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 804456c:	e0bffe17 	ldw	r2,-8(fp)
 8044570:	10800003 	ldbu	r2,0(r2)
 8044574:	10803fcc 	andi	r2,r2,255
 8044578:	100490ba 	slli	r2,r2,2
 804457c:	10800f0c 	andi	r2,r2,60
 8044580:	e0fffe17 	ldw	r3,-8(fp)
 8044584:	1885883a 	add	r2,r3,r2
 8044588:	e0bffd15 	stw	r2,-12(fp)
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;
 804458c:	e0bffd17 	ldw	r2,-12(fp)
 8044590:	10800003 	ldbu	r2,0(r2)
 8044594:	e0bffcc5 	stb	r2,-13(fp)

   switch (type) 
 8044598:	e0bffcc3 	ldbu	r2,-13(fp)
 804459c:	10c005e0 	cmpeqi	r3,r2,23
 80445a0:	1800131e 	bne	r3,zero,80445f0 <igmpv2_input+0xa4>
 80445a4:	10c00608 	cmpgei	r3,r2,24
 80445a8:	1800181e 	bne	r3,zero,804460c <igmpv2_input+0xc0>
 80445ac:	10c005a0 	cmpeqi	r3,r2,22
 80445b0:	18000b1e 	bne	r3,zero,80445e0 <igmpv2_input+0x94>
 80445b4:	10c005c8 	cmpgei	r3,r2,23
 80445b8:	1800141e 	bne	r3,zero,804460c <igmpv2_input+0xc0>
 80445bc:	10c00460 	cmpeqi	r3,r2,17
 80445c0:	1800031e 	bne	r3,zero,80445d0 <igmpv2_input+0x84>
 80445c4:	108004a0 	cmpeqi	r2,r2,18
 80445c8:	1000051e 	bne	r2,zero,80445e0 <igmpv2_input+0x94>
 80445cc:	00000f06 	br	804460c <igmpv2_input+0xc0>
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
 80445d0:	e13ffb17 	ldw	r4,-20(fp)
 80445d4:	80447700 	call	8044770 <igmpv2_process_query>
 80445d8:	e0bfff15 	stw	r2,-4(fp)
         break;
 80445dc:	00001306 	br	804462c <igmpv2_input+0xe0>

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
 80445e0:	e13ffb17 	ldw	r4,-20(fp)
 80445e4:	804465c0 	call	804465c <igmpv2_process_report>
 80445e8:	e0bfff15 	stw	r2,-4(fp)
         break;
 80445ec:	00000f06 	br	804462c <igmpv2_input+0xe0>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
 80445f0:	008201b4 	movhi	r2,2054
 80445f4:	10bae717 	ldw	r2,-5220(r2)
 80445f8:	10c00044 	addi	r3,r2,1
 80445fc:	008201b4 	movhi	r2,2054
 8044600:	10fae715 	stw	r3,-5220(r2)
         rc = IGMP_OK;
 8044604:	e03fff15 	stw	zero,-4(fp)
         break;               
 8044608:	00000806 	br	804462c <igmpv2_input+0xe0>

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
 804460c:	008201b4 	movhi	r2,2054
 8044610:	10baf317 	ldw	r2,-5172(r2)
 8044614:	10c00044 	addi	r3,r2,1
 8044618:	008201b4 	movhi	r2,2054
 804461c:	10faf315 	stw	r3,-5172(r2)
         rc = IGMP_ERR;         
 8044620:	00bfffc4 	movi	r2,-1
 8044624:	e0bfff15 	stw	r2,-4(fp)
         break;
 8044628:	0001883a 	nop
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 804462c:	01000084 	movi	r4,2
 8044630:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   pk_free(p);
 8044634:	e13ffb17 	ldw	r4,-20(fp)
 8044638:	802bb980 	call	802bb98 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 804463c:	01000084 	movi	r4,2
 8044640:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
   
   return rc;
 8044644:	e0bfff17 	ldw	r2,-4(fp)
}
 8044648:	e037883a 	mov	sp,fp
 804464c:	dfc00117 	ldw	ra,4(sp)
 8044650:	df000017 	ldw	fp,0(sp)
 8044654:	dec00204 	addi	sp,sp,8
 8044658:	f800283a 	ret

0804465c <igmpv2_process_report>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
 804465c:	defff904 	addi	sp,sp,-28
 8044660:	dfc00615 	stw	ra,24(sp)
 8044664:	df000515 	stw	fp,20(sp)
 8044668:	df000504 	addi	fp,sp,20
 804466c:	e13ffb15 	stw	r4,-20(fp)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
 8044670:	e0bffb17 	ldw	r2,-20(fp)
 8044674:	10800617 	ldw	r2,24(r2)
 8044678:	e0bfff15 	stw	r2,-4(fp)
   pip = ip_head (p);
 804467c:	e0bffb17 	ldw	r2,-20(fp)
 8044680:	10800317 	ldw	r2,12(r2)
 8044684:	e0bffe15 	stw	r2,-8(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 8044688:	e0bffe17 	ldw	r2,-8(fp)
 804468c:	10800003 	ldbu	r2,0(r2)
 8044690:	10803fcc 	andi	r2,r2,255
 8044694:	100490ba 	slli	r2,r2,2
 8044698:	10800f0c 	andi	r2,r2,60
 804469c:	e0fffe17 	ldw	r3,-8(fp)
 80446a0:	1885883a 	add	r2,r3,r2
 80446a4:	e0bffd15 	stw	r2,-12(fp)
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
 80446a8:	e0bffd17 	ldw	r2,-12(fp)
 80446ac:	10800117 	ldw	r2,4(r2)
 80446b0:	e17fff17 	ldw	r5,-4(fp)
 80446b4:	1009883a 	mov	r4,r2
 80446b8:	80429ec0 	call	80429ec <lookup_mcast>
 80446bc:	e0bffc15 	stw	r2,-16(fp)
   if (inm != NULL) 
 80446c0:	e0bffc17 	ldw	r2,-16(fp)
 80446c4:	10001f26 	beq	r2,zero,8044744 <igmpv2_process_report+0xe8>
   {
      if (inm->inm_timer != 0)
 80446c8:	e0bffc17 	ldw	r2,-16(fp)
 80446cc:	10800317 	ldw	r2,12(r2)
 80446d0:	10001626 	beq	r2,zero,804472c <igmpv2_process_report+0xd0>
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
 80446d4:	e0bfff17 	ldw	r2,-4(fp)
 80446d8:	10802d03 	ldbu	r2,180(r2)
 80446dc:	10803fcc 	andi	r2,r2,255
 80446e0:	10000526 	beq	r2,zero,80446f8 <igmpv2_process_report+0x9c>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
 80446e4:	e0bffd17 	ldw	r2,-12(fp)
 80446e8:	10800003 	ldbu	r2,0(r2)
         if (!(netp->igmpv1_rtr_present && 
 80446ec:	10803fcc 	andi	r2,r2,255
 80446f0:	108005a0 	cmpeqi	r2,r2,22
 80446f4:	1000181e 	bne	r2,zero,8044758 <igmpv2_process_report+0xfc>
         {
            /* cancel timer */
            inm->inm_timer = 0;
 80446f8:	e0bffc17 	ldw	r2,-16(fp)
 80446fc:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 8044700:	d0a08117 	ldw	r2,-32252(gp)
 8044704:	10bfffc4 	addi	r2,r2,-1
 8044708:	d0a08115 	stw	r2,-32252(gp)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
 804470c:	e0bffc17 	ldw	r2,-16(fp)
 8044710:	10000405 	stb	zero,16(r2)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
 8044714:	008201b4 	movhi	r2,2054
 8044718:	10bae517 	ldw	r2,-5228(r2)
 804471c:	10c00044 	addi	r3,r2,1
 8044720:	008201b4 	movhi	r2,2054
 8044724:	10fae515 	stw	r3,-5228(r2)
 8044728:	00000b06 	br	8044758 <igmpv2_process_report+0xfc>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
 804472c:	008201b4 	movhi	r2,2054
 8044730:	10bae617 	ldw	r2,-5224(r2)
 8044734:	10c00044 	addi	r3,r2,1
 8044738:	008201b4 	movhi	r2,2054
 804473c:	10fae615 	stw	r3,-5224(r2)
 8044740:	00000506 	br	8044758 <igmpv2_process_report+0xfc>
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
 8044744:	008201b4 	movhi	r2,2054
 8044748:	10baf117 	ldw	r2,-5180(r2)
 804474c:	10c00044 	addi	r3,r2,1
 8044750:	008201b4 	movhi	r2,2054
 8044754:	10faf115 	stw	r3,-5180(r2)
   }
   
   return IGMP_OK;   
 8044758:	0005883a 	mov	r2,zero
}
 804475c:	e037883a 	mov	sp,fp
 8044760:	dfc00117 	ldw	ra,4(sp)
 8044764:	df000017 	ldw	fp,0(sp)
 8044768:	dec00204 	addi	sp,sp,8
 804476c:	f800283a 	ret

08044770 <igmpv2_process_query>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
 8044770:	defff804 	addi	sp,sp,-32
 8044774:	dfc00715 	stw	ra,28(sp)
 8044778:	df000615 	stw	fp,24(sp)
 804477c:	df000604 	addi	fp,sp,24
 8044780:	e13ffa15 	stw	r4,-24(fp)
   NET netp;
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;

   netp = p->net;
 8044784:	e0bffa17 	ldw	r2,-24(fp)
 8044788:	10800617 	ldw	r2,24(r2)
 804478c:	e0bffd15 	stw	r2,-12(fp)
   pip = ip_head (p);
 8044790:	e0bffa17 	ldw	r2,-24(fp)
 8044794:	10800317 	ldw	r2,12(r2)
 8044798:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
 804479c:	e0bffc17 	ldw	r2,-16(fp)
 80447a0:	10800003 	ldbu	r2,0(r2)
 80447a4:	10803fcc 	andi	r2,r2,255
 80447a8:	100490ba 	slli	r2,r2,2
 80447ac:	10800f0c 	andi	r2,r2,60
 80447b0:	e0fffc17 	ldw	r3,-16(fp)
 80447b4:	1885883a 	add	r2,r3,r2
 80447b8:	e0bffb15 	stw	r2,-20(fp)

   if (igmp->igmp_code == 0)
 80447bc:	e0bffb17 	ldw	r2,-20(fp)
 80447c0:	10800043 	ldbu	r2,1(r2)
 80447c4:	10803fcc 	andi	r2,r2,255
 80447c8:	1000101e 	bne	r2,zero,804480c <igmpv2_process_query+0x9c>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
 80447cc:	e0bffd17 	ldw	r2,-12(fp)
 80447d0:	00c00044 	movi	r3,1
 80447d4:	10c02d05 	stb	r3,180(r2)
      netp->igmpv1_query_rcvd_time = cticks;      
 80447d8:	d0e0a317 	ldw	r3,-32116(gp)
 80447dc:	e0bffd17 	ldw	r2,-12(fp)
 80447e0:	10c02e15 	stw	r3,184(r2)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
 80447e4:	008201b4 	movhi	r2,2054
 80447e8:	10bae217 	ldw	r2,-5240(r2)
 80447ec:	10c00044 	addi	r3,r2,1
 80447f0:	008201b4 	movhi	r2,2054
 80447f4:	10fae215 	stw	r3,-5240(r2)
      /* set maximum time to respond to the equivalent of 10 
       * seconds worth of "ticks" (the timeout routine is
       * intended to be invoked PR_FASTHZ (5) times a second,
       * so each tick is equal to 200 ms) */
      max_resp_time = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;
 80447f8:	00800c84 	movi	r2,50
 80447fc:	e0bfff8d 	sth	r2,-2(fp)
      process_all = IGMP_TRUE;
 8044800:	00800044 	movi	r2,1
 8044804:	e0bfff45 	stb	r2,-3(fp)
 8044808:	00001806 	br	804486c <igmpv2_process_query+0xfc>
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
 804480c:	e0bffb17 	ldw	r2,-20(fp)
 8044810:	10800117 	ldw	r2,4(r2)
 8044814:	1000081e 	bne	r2,zero,8044838 <igmpv2_process_query+0xc8>
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
 8044818:	008201b4 	movhi	r2,2054
 804481c:	10bae317 	ldw	r2,-5236(r2)
 8044820:	10c00044 	addi	r3,r2,1
 8044824:	008201b4 	movhi	r2,2054
 8044828:	10fae315 	stw	r3,-5236(r2)
         process_all = IGMP_TRUE;
 804482c:	00800044 	movi	r2,1
 8044830:	e0bfff45 	stb	r2,-3(fp)
 8044834:	00000606 	br	8044850 <igmpv2_process_query+0xe0>
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
 8044838:	008201b4 	movhi	r2,2054
 804483c:	10bae417 	ldw	r2,-5232(r2)
 8044840:	10c00044 	addi	r3,r2,1
 8044844:	008201b4 	movhi	r2,2054
 8044848:	10fae415 	stw	r3,-5232(r2)
         process_all = IGMP_FALSE;
 804484c:	e03fff45 	stb	zero,-3(fp)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
 8044850:	e0bffb17 	ldw	r2,-20(fp)
 8044854:	10800043 	ldbu	r2,1(r2)
 8044858:	10803fcc 	andi	r2,r2,255
 804485c:	1006d7fa 	srli	r3,r2,31
 8044860:	1885883a 	add	r2,r3,r2
 8044864:	1005d07a 	srai	r2,r2,1
 8044868:	e0bfff8d 	sth	r2,-2(fp)
   
   /* process all entries in a link's multicast address linked
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
 804486c:	e0bfff43 	ldbu	r2,-3(fp)
 8044870:	10001726 	beq	r2,zero,80448d0 <igmpv2_process_query+0x160>
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 8044874:	e0bffd17 	ldw	r2,-12(fp)
 8044878:	10802c17 	ldw	r2,176(r2)
 804487c:	e0bffe15 	stw	r2,-8(fp)
 8044880:	00001006 	br	80448c4 <igmpv2_process_query+0x154>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
 8044884:	e0bffe17 	ldw	r2,-8(fp)
 8044888:	10800017 	ldw	r2,0(r2)
 804488c:	10000926 	beq	r2,zero,80448b4 <igmpv2_process_query+0x144>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 8044890:	e0bffe17 	ldw	r2,-8(fp)
 8044894:	10c00017 	ldw	r3,0(r2)
 8044898:	d0a08317 	ldw	r2,-32244(gp)
 804489c:	18800626 	beq	r3,r2,80448b8 <igmpv2_process_query+0x148>
            igmpv2_chk_set_timer (inm, max_resp_time);
 80448a0:	e0bfff8b 	ldhu	r2,-2(fp)
 80448a4:	100b883a 	mov	r5,r2
 80448a8:	e13ffe17 	ldw	r4,-8(fp)
 80448ac:	80449300 	call	8044930 <igmpv2_chk_set_timer>
 80448b0:	00000106 	br	80448b8 <igmpv2_process_query+0x148>
         if (!(inm->inm_addr)) continue;
 80448b4:	0001883a 	nop
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 80448b8:	e0bffe17 	ldw	r2,-8(fp)
 80448bc:	10800517 	ldw	r2,20(r2)
 80448c0:	e0bffe15 	stw	r2,-8(fp)
 80448c4:	e0bffe17 	ldw	r2,-8(fp)
 80448c8:	103fee1e 	bne	r2,zero,8044884 <igmpv2_process_query+0x114>
 80448cc:	00001206 	br	8044918 <igmpv2_process_query+0x1a8>
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 80448d0:	e0bffb17 	ldw	r2,-20(fp)
 80448d4:	10800117 	ldw	r2,4(r2)
 80448d8:	e17ffd17 	ldw	r5,-12(fp)
 80448dc:	1009883a 	mov	r4,r2
 80448e0:	80429ec0 	call	80429ec <lookup_mcast>
 80448e4:	e0bffe15 	stw	r2,-8(fp)
      if (inm != NULL)
 80448e8:	e0bffe17 	ldw	r2,-8(fp)
 80448ec:	10000526 	beq	r2,zero,8044904 <igmpv2_process_query+0x194>
         igmpv2_chk_set_timer (inm, max_resp_time);
 80448f0:	e0bfff8b 	ldhu	r2,-2(fp)
 80448f4:	100b883a 	mov	r5,r2
 80448f8:	e13ffe17 	ldw	r4,-8(fp)
 80448fc:	80449300 	call	8044930 <igmpv2_chk_set_timer>
 8044900:	00000506 	br	8044918 <igmpv2_process_query+0x1a8>
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
 8044904:	008201b4 	movhi	r2,2054
 8044908:	10baf017 	ldw	r2,-5184(r2)
 804490c:	10c00044 	addi	r3,r2,1
 8044910:	008201b4 	movhi	r2,2054
 8044914:	10faf015 	stw	r3,-5184(r2)
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
 8044918:	0005883a 	mov	r2,zero
}
 804491c:	e037883a 	mov	sp,fp
 8044920:	dfc00117 	ldw	ra,4(sp)
 8044924:	df000017 	ldw	fp,0(sp)
 8044928:	dec00204 	addi	sp,sp,8
 804492c:	f800283a 	ret

08044930 <igmpv2_chk_set_timer>:
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
 8044930:	defffc04 	addi	sp,sp,-16
 8044934:	dfc00315 	stw	ra,12(sp)
 8044938:	df000215 	stw	fp,8(sp)
 804493c:	df000204 	addi	fp,sp,8
 8044940:	e13fff15 	stw	r4,-4(fp)
 8044944:	2805883a 	mov	r2,r5
 8044948:	e0bffe0d 	sth	r2,-8(fp)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
 804494c:	e0bfff17 	ldw	r2,-4(fp)
 8044950:	10800317 	ldw	r2,12(r2)
 8044954:	e0fffe0b 	ldhu	r3,-8(fp)
 8044958:	18800336 	bltu	r3,r2,8044968 <igmpv2_chk_set_timer+0x38>
       (inm->inm_timer == 0))
 804495c:	e0bfff17 	ldw	r2,-4(fp)
 8044960:	10800317 	ldw	r2,12(r2)
   if ((inm->inm_timer > max_resp_time) ||
 8044964:	1000381e 	bne	r2,zero,8044a48 <igmpv2_chk_set_timer+0x118>
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 8044968:	e0bfff17 	ldw	r2,-4(fp)
 804496c:	10800317 	ldw	r2,12(r2)
 8044970:	1000031e 	bne	r2,zero,8044980 <igmpv2_chk_set_timer+0x50>
 8044974:	d0a08117 	ldw	r2,-32252(gp)
 8044978:	10800044 	addi	r2,r2,1
 804497c:	d0a08115 	stw	r2,-32252(gp)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
 8044980:	008201b4 	movhi	r2,2054
 8044984:	10fd2217 	ldw	r3,-2936(r2)
 8044988:	008201b4 	movhi	r2,2054
 804498c:	10bada17 	ldw	r2,-5272(r2)
 8044990:	10800a17 	ldw	r2,40(r2)
 8044994:	1008d63a 	srli	r4,r2,24
 8044998:	008201b4 	movhi	r2,2054
 804499c:	10bada17 	ldw	r2,-5272(r2)
 80449a0:	10800a17 	ldw	r2,40(r2)
 80449a4:	1004d23a 	srli	r2,r2,8
 80449a8:	10bfc00c 	andi	r2,r2,65280
 80449ac:	2088b03a 	or	r4,r4,r2
 80449b0:	008201b4 	movhi	r2,2054
 80449b4:	10bada17 	ldw	r2,-5272(r2)
 80449b8:	10800a17 	ldw	r2,40(r2)
 80449bc:	1004923a 	slli	r2,r2,8
 80449c0:	10803fec 	andhi	r2,r2,255
 80449c4:	2088b03a 	or	r4,r4,r2
 80449c8:	008201b4 	movhi	r2,2054
 80449cc:	10bada17 	ldw	r2,-5272(r2)
 80449d0:	10800a17 	ldw	r2,40(r2)
 80449d4:	1004963a 	slli	r2,r2,24
 80449d8:	2084b03a 	or	r2,r4,r2
 80449dc:	1887883a 	add	r3,r3,r2
 80449e0:	e0bfff17 	ldw	r2,-4(fp)
 80449e4:	10800017 	ldw	r2,0(r2)
 80449e8:	1008d63a 	srli	r4,r2,24
 80449ec:	e0bfff17 	ldw	r2,-4(fp)
 80449f0:	10800017 	ldw	r2,0(r2)
 80449f4:	1004d23a 	srli	r2,r2,8
 80449f8:	10bfc00c 	andi	r2,r2,65280
 80449fc:	2088b03a 	or	r4,r4,r2
 8044a00:	e0bfff17 	ldw	r2,-4(fp)
 8044a04:	10800017 	ldw	r2,0(r2)
 8044a08:	1004923a 	slli	r2,r2,8
 8044a0c:	10803fec 	andhi	r2,r2,255
 8044a10:	2088b03a 	or	r4,r4,r2
 8044a14:	e0bfff17 	ldw	r2,-4(fp)
 8044a18:	10800017 	ldw	r2,0(r2)
 8044a1c:	1004963a 	slli	r2,r2,24
 8044a20:	2084b03a 	or	r2,r4,r2
 8044a24:	1885883a 	add	r2,r3,r2
 8044a28:	e0fffe0b 	ldhu	r3,-8(fp)
 8044a2c:	180b883a 	mov	r5,r3
 8044a30:	1009883a 	mov	r4,r2
 8044a34:	800e2940 	call	800e294 <__umodsi3>
 8044a38:	10c00044 	addi	r3,r2,1
 8044a3c:	e0bfff17 	ldw	r2,-4(fp)
 8044a40:	10c00315 	stw	r3,12(r2)
   }

   return;
 8044a44:	0001883a 	nop
 8044a48:	0001883a 	nop
}
 8044a4c:	e037883a 	mov	sp,fp
 8044a50:	dfc00117 	ldw	ra,4(sp)
 8044a54:	df000017 	ldw	fp,0(sp)
 8044a58:	dec00204 	addi	sp,sp,8
 8044a5c:	f800283a 	ret

08044a60 <igmpv2_chk4_rtr_alert_opt>:
 *         the IP Router Alert option in the received
 *         packet, and IGMP_FALSE otherwise.
 */

u_char igmpv2_chk4_rtr_alert_opt (struct ip * pip)
{
 8044a60:	defffb04 	addi	sp,sp,-20
 8044a64:	df000415 	stw	fp,16(sp)
 8044a68:	df000404 	addi	fp,sp,16
 8044a6c:	e13ffc15 	stw	r4,-16(fp)
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
 8044a70:	e0bffc17 	ldw	r2,-16(fp)
 8044a74:	10800003 	ldbu	r2,0(r2)
 8044a78:	100490ba 	slli	r2,r2,2
 8044a7c:	10800f0c 	andi	r2,r2,60
 8044a80:	10bffb04 	addi	r2,r2,-20
 8044a84:	e0bffec5 	stb	r2,-5(fp)

   if (total_optlen > 0)
 8044a88:	e0bffec3 	ldbu	r2,-5(fp)
 8044a8c:	10004126 	beq	r2,zero,8044b94 <igmpv2_chk4_rtr_alert_opt+0x134>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
 8044a90:	e0bffc17 	ldw	r2,-16(fp)
 8044a94:	10800504 	addi	r2,r2,20
 8044a98:	e0bfff15 	stw	r2,-4(fp)
  
      while (total_optlen > 0)
 8044a9c:	00003b06 	br	8044b8c <igmpv2_chk4_rtr_alert_opt+0x12c>
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
 8044aa0:	e0bfff17 	ldw	r2,-4(fp)
 8044aa4:	10800003 	ldbu	r2,0(r2)
 8044aa8:	108007cc 	andi	r2,r2,31
 8044aac:	e0bffe45 	stb	r2,-7(fp)
         switch (optval)
 8044ab0:	e0bffe43 	ldbu	r2,-7(fp)
 8044ab4:	10c00520 	cmpeqi	r3,r2,20
 8044ab8:	18000d1e 	bne	r3,zero,8044af0 <igmpv2_chk4_rtr_alert_opt+0x90>
 8044abc:	10c00548 	cmpgei	r3,r2,21
 8044ac0:	1800241e 	bne	r3,zero,8044b54 <igmpv2_chk4_rtr_alert_opt+0xf4>
 8044ac4:	10000326 	beq	r2,zero,8044ad4 <igmpv2_chk4_rtr_alert_opt+0x74>
 8044ac8:	10800060 	cmpeqi	r2,r2,1
 8044acc:	1000051e 	bne	r2,zero,8044ae4 <igmpv2_chk4_rtr_alert_opt+0x84>
 8044ad0:	00002006 	br	8044b54 <igmpv2_chk4_rtr_alert_opt+0xf4>
         {
            case EOL_OPT:
               /* we've encountered the End of Option List option, 
                * and so setting optlen isn't necessary */
               optlen = 1;
 8044ad4:	00800044 	movi	r2,1
 8044ad8:	e0bffe85 	stb	r2,-6(fp)
               /* we're done - we couldn't locate the IP Router Alert 
                * option in this IP header */
               return IGMP_FALSE;
 8044adc:	0005883a 	mov	r2,zero
 8044ae0:	00002d06 	br	8044b98 <igmpv2_chk4_rtr_alert_opt+0x138>
         
            case NOOP_OPT:
               /* skip past the one byte of the No Operation option */
               optlen = 1;
 8044ae4:	00800044 	movi	r2,1
 8044ae8:	e0bffe85 	stb	r2,-6(fp)
               break;
 8044aec:	00001f06 	br	8044b6c <igmpv2_chk4_rtr_alert_opt+0x10c>
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
 8044af0:	e0bfff17 	ldw	r2,-4(fp)
 8044af4:	e0bffd15 	stw	r2,-12(fp)
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
 8044af8:	e0bffd17 	ldw	r2,-12(fp)
 8044afc:	10800017 	ldw	r2,0(r2)
 8044b00:	1006d63a 	srli	r3,r2,24
 8044b04:	e0bffd17 	ldw	r2,-12(fp)
 8044b08:	10800017 	ldw	r2,0(r2)
 8044b0c:	1004d23a 	srli	r2,r2,8
 8044b10:	10bfc00c 	andi	r2,r2,65280
 8044b14:	1886b03a 	or	r3,r3,r2
 8044b18:	e0bffd17 	ldw	r2,-12(fp)
 8044b1c:	10800017 	ldw	r2,0(r2)
 8044b20:	1004923a 	slli	r2,r2,8
 8044b24:	10803fec 	andhi	r2,r2,255
 8044b28:	1886b03a 	or	r3,r3,r2
 8044b2c:	e0bffd17 	ldw	r2,-12(fp)
 8044b30:	10800017 	ldw	r2,0(r2)
 8044b34:	1004963a 	slli	r2,r2,24
 8044b38:	1886b03a 	or	r3,r3,r2
 8044b3c:	00a50134 	movhi	r2,37892
 8044b40:	1880021e 	bne	r3,r2,8044b4c <igmpv2_chk4_rtr_alert_opt+0xec>
                  /* found the option, return success */
                  return IGMP_TRUE;
 8044b44:	00800044 	movi	r2,1
 8044b48:	00001306 	br	8044b98 <igmpv2_chk4_rtr_alert_opt+0x138>
               else return IGMP_FALSE;
 8044b4c:	0005883a 	mov	r2,zero
 8044b50:	00001106 	br	8044b98 <igmpv2_chk4_rtr_alert_opt+0x138>
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
 8044b54:	e0bfff17 	ldw	r2,-4(fp)
 8044b58:	10800044 	addi	r2,r2,1
 8044b5c:	10800003 	ldbu	r2,0(r2)
 8044b60:	10800084 	addi	r2,r2,2
 8044b64:	e0bffe85 	stb	r2,-6(fp)
               break;
 8044b68:	0001883a 	nop
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
 8044b6c:	e0bffe83 	ldbu	r2,-6(fp)
 8044b70:	e0ffff17 	ldw	r3,-4(fp)
 8044b74:	1885883a 	add	r2,r3,r2
 8044b78:	e0bfff15 	stw	r2,-4(fp)
         total_optlen -= optlen;
 8044b7c:	e0fffec3 	ldbu	r3,-5(fp)
 8044b80:	e0bffe83 	ldbu	r2,-6(fp)
 8044b84:	1885c83a 	sub	r2,r3,r2
 8044b88:	e0bffec5 	stb	r2,-5(fp)
      while (total_optlen > 0)
 8044b8c:	e0bffec3 	ldbu	r2,-5(fp)
 8044b90:	103fc31e 	bne	r2,zero,8044aa0 <igmpv2_chk4_rtr_alert_opt+0x40>
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
 8044b94:	0005883a 	mov	r2,zero
}
 8044b98:	e037883a 	mov	sp,fp
 8044b9c:	df000017 	ldw	fp,0(sp)
 8044ba0:	dec00104 	addi	sp,sp,4
 8044ba4:	f800283a 	ret

08044ba8 <IPADDR_TO_NETP>:
 * RETURNS: 
 */

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
 8044ba8:	defffc04 	addi	sp,sp,-16
 8044bac:	df000315 	stw	fp,12(sp)
 8044bb0:	df000304 	addi	fp,sp,12
 8044bb4:	e13ffe15 	stw	r4,-8(fp)
 8044bb8:	e17ffd15 	stw	r5,-12(fp)
   u_short  idx   =  0;
 8044bbc:	e03fff8d 	sth	zero,-2(fp)
   *netp = nets[idx];
 8044bc0:	e0bfff8b 	ldhu	r2,-2(fp)
 8044bc4:	100690ba 	slli	r3,r2,2
 8044bc8:	008201b4 	movhi	r2,2054
 8044bcc:	1885883a 	add	r2,r3,r2
 8044bd0:	10fada17 	ldw	r3,-5272(r2)
 8044bd4:	e0bffd17 	ldw	r2,-12(fp)
 8044bd8:	10c00015 	stw	r3,0(r2)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
 8044bdc:	e0bffe17 	ldw	r2,-8(fp)
 8044be0:	1000281e 	bne	r2,zero,8044c84 <IPADDR_TO_NETP+0xdc>
   {
      for (idx = 0; idx < ifNumber; idx++)
 8044be4:	e03fff8d 	sth	zero,-2(fp)
 8044be8:	00001206 	br	8044c34 <IPADDR_TO_NETP+0x8c>
      {
         if (nets[idx]->n_mcastlist)
 8044bec:	e0bfff8b 	ldhu	r2,-2(fp)
 8044bf0:	100690ba 	slli	r3,r2,2
 8044bf4:	008201b4 	movhi	r2,2054
 8044bf8:	1885883a 	add	r2,r3,r2
 8044bfc:	10bada17 	ldw	r2,-5272(r2)
 8044c00:	10802b17 	ldw	r2,172(r2)
 8044c04:	10000826 	beq	r2,zero,8044c28 <IPADDR_TO_NETP+0x80>
         {
            *netp = nets[idx];
 8044c08:	e0bfff8b 	ldhu	r2,-2(fp)
 8044c0c:	100690ba 	slli	r3,r2,2
 8044c10:	008201b4 	movhi	r2,2054
 8044c14:	1885883a 	add	r2,r3,r2
 8044c18:	10fada17 	ldw	r3,-5272(r2)
 8044c1c:	e0bffd17 	ldw	r2,-12(fp)
 8044c20:	10c00015 	stw	r3,0(r2)
            break;
 8044c24:	00002006 	br	8044ca8 <IPADDR_TO_NETP+0x100>
      for (idx = 0; idx < ifNumber; idx++)
 8044c28:	e0bfff8b 	ldhu	r2,-2(fp)
 8044c2c:	10800044 	addi	r2,r2,1
 8044c30:	e0bfff8d 	sth	r2,-2(fp)
 8044c34:	e0ffff8b 	ldhu	r3,-2(fp)
 8044c38:	d0a07f17 	ldw	r2,-32260(gp)
 8044c3c:	18bfeb36 	bltu	r3,r2,8044bec <IPADDR_TO_NETP+0x44>
         }
         else
            *netp = nets[idx];
      }
   }
}
 8044c40:	00001906 	br	8044ca8 <IPADDR_TO_NETP+0x100>
         idx++;
 8044c44:	e0bfff8b 	ldhu	r2,-2(fp)
 8044c48:	10800044 	addi	r2,r2,1
 8044c4c:	e0bfff8d 	sth	r2,-2(fp)
         if (idx >= ifNumber)
 8044c50:	e0ffff8b 	ldhu	r3,-2(fp)
 8044c54:	d0a07f17 	ldw	r2,-32260(gp)
 8044c58:	18800336 	bltu	r3,r2,8044c68 <IPADDR_TO_NETP+0xc0>
            *netp = NULL;
 8044c5c:	e0bffd17 	ldw	r2,-12(fp)
 8044c60:	10000015 	stw	zero,0(r2)
            break;
 8044c64:	00001006 	br	8044ca8 <IPADDR_TO_NETP+0x100>
            *netp = nets[idx];
 8044c68:	e0bfff8b 	ldhu	r2,-2(fp)
 8044c6c:	100690ba 	slli	r3,r2,2
 8044c70:	008201b4 	movhi	r2,2054
 8044c74:	1885883a 	add	r2,r3,r2
 8044c78:	10fada17 	ldw	r3,-5272(r2)
 8044c7c:	e0bffd17 	ldw	r2,-12(fp)
 8044c80:	10c00015 	stw	r3,0(r2)
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 8044c84:	e0bffd17 	ldw	r2,-12(fp)
 8044c88:	10800017 	ldw	r2,0(r2)
 8044c8c:	10000626 	beq	r2,zero,8044ca8 <IPADDR_TO_NETP+0x100>
 8044c90:	e0bffd17 	ldw	r2,-12(fp)
 8044c94:	10800017 	ldw	r2,0(r2)
 8044c98:	10800a17 	ldw	r2,40(r2)
 8044c9c:	e0fffe17 	ldw	r3,-8(fp)
 8044ca0:	18bfe81e 	bne	r3,r2,8044c44 <IPADDR_TO_NETP+0x9c>
}
 8044ca4:	00000006 	br	8044ca8 <IPADDR_TO_NETP+0x100>
 8044ca8:	0001883a 	nop
 8044cac:	e037883a 	mov	sp,fp
 8044cb0:	df000017 	ldw	fp,0(sp)
 8044cb4:	dec00104 	addi	sp,sp,4
 8044cb8:	f800283a 	ret

08044cbc <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
 8044cbc:	defff304 	addi	sp,sp,-52
 8044cc0:	dfc00c15 	stw	ra,48(sp)
 8044cc4:	df000b15 	stw	fp,44(sp)
 8044cc8:	dc000a15 	stw	r16,40(sp)
 8044ccc:	df000b04 	addi	fp,sp,44
 8044cd0:	e13ff715 	stw	r4,-36(fp)
 8044cd4:	e17ff615 	stw	r5,-40(fp)
 8044cd8:	e1bff515 	stw	r6,-44(fp)
   int   error =  0;
 8044cdc:	e03ffe15 	stw	zero,-8(fp)
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
 8044ce0:	e03ff815 	stw	zero,-32(fp)
   struct ip_moptions * imo   =  so->inp_moptions;
 8044ce4:	e0bff617 	ldw	r2,-40(fp)
 8044ce8:	10800317 	ldw	r2,12(r2)
 8044cec:	e0bffc15 	stw	r2,-16(fp)
   struct ip_moptions **imop  =  &so->inp_moptions;
 8044cf0:	e0bff617 	ldw	r2,-40(fp)
 8044cf4:	10800304 	addi	r2,r2,12
 8044cf8:	e0bffb15 	stw	r2,-20(fp)
   ip_addr addr;


   if (imo == NULL) 
 8044cfc:	e0bffc17 	ldw	r2,-16(fp)
 8044d00:	1000141e 	bne	r2,zero,8044d54 <ip_setmoptions+0x98>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
 8044d04:	01001604 	movi	r4,88
 8044d08:	802cf5c0 	call	802cf5c <npalloc>
 8044d0c:	e0bffc15 	stw	r2,-16(fp)

      if (imo == NULL)
 8044d10:	e0bffc17 	ldw	r2,-16(fp)
 8044d14:	1000021e 	bne	r2,zero,8044d20 <ip_setmoptions+0x64>
         return (ENOBUFS);
 8044d18:	00801a44 	movi	r2,105
 8044d1c:	00014906 	br	8045244 <ip_setmoptions+0x588>
      *imop = imo;
 8044d20:	e0bffb17 	ldw	r2,-20(fp)
 8044d24:	e0fffc17 	ldw	r3,-16(fp)
 8044d28:	10c00015 	stw	r3,0(r2)
      imo->imo_multicast_netp = NULL;
 8044d2c:	e0bffc17 	ldw	r2,-16(fp)
 8044d30:	10000015 	stw	zero,0(r2)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
 8044d34:	e0bffc17 	ldw	r2,-16(fp)
 8044d38:	00c00044 	movi	r3,1
 8044d3c:	10c00105 	stb	r3,4(r2)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
 8044d40:	e0bffc17 	ldw	r2,-16(fp)
 8044d44:	00c00044 	movi	r3,1
 8044d48:	10c00145 	stb	r3,5(r2)
      imo->imo_num_memberships = 0;
 8044d4c:	e0bffc17 	ldw	r2,-16(fp)
 8044d50:	1000018d 	sth	zero,6(r2)
 8044d54:	e0bff717 	ldw	r2,-36(fp)
 8044d58:	10bffdc4 	addi	r2,r2,-9
 8044d5c:	10c00168 	cmpgeui	r3,r2,5
 8044d60:	18011c1e 	bne	r3,zero,80451d4 <ip_setmoptions+0x518>
 8044d64:	100690ba 	slli	r3,r2,2
 8044d68:	00820134 	movhi	r2,2052
 8044d6c:	1885883a 	add	r2,r3,r2
 8044d70:	10935e17 	ldw	r2,19832(r2)
 8044d74:	1000683a 	jmp	r2
 8044d78:	08044d8c 	andi	zero,at,4406
 8044d7c:	08044df4 	orhi	zero,at,4407
 8044d80:	08044e08 	cmpgei	zero,at,4408
 8044d84:	08044e3c 	xorhi	zero,at,4408
 8044d88:	08045000 	call	804500 <OSCtxSw_SWITCH_PC+0x8044c0>

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
 8044d8c:	e0bff517 	ldw	r2,-44(fp)
 8044d90:	10800017 	ldw	r2,0(r2)
 8044d94:	e0bff915 	stw	r2,-28(fp)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
 8044d98:	e0bff917 	ldw	r2,-28(fp)
 8044d9c:	1000031e 	bne	r2,zero,8044dac <ip_setmoptions+0xf0>
      {
         imo->imo_multicast_netp = NULL;
 8044da0:	e0bffc17 	ldw	r2,-16(fp)
 8044da4:	10000015 	stw	zero,0(r2)
         break;
 8044da8:	00010e06 	br	80451e4 <ip_setmoptions+0x528>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
 8044dac:	e0bff804 	addi	r2,fp,-32
 8044db0:	100b883a 	mov	r5,r2
 8044db4:	e13ff917 	ldw	r4,-28(fp)
 8044db8:	8044ba80 	call	8044ba8 <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
 8044dbc:	e0bff817 	ldw	r2,-32(fp)
 8044dc0:	10000326 	beq	r2,zero,8044dd0 <ip_setmoptions+0x114>
 8044dc4:	e0bff817 	ldw	r2,-32(fp)
 8044dc8:	10802b17 	ldw	r2,172(r2)
 8044dcc:	1000031e 	bne	r2,zero,8044ddc <ip_setmoptions+0x120>
      {
         error = EADDRNOTAVAIL;
 8044dd0:	00801f44 	movi	r2,125
 8044dd4:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044dd8:	00010206 	br	80451e4 <ip_setmoptions+0x528>
      }
      if (addr != AADDR) 
 8044ddc:	e0bff917 	ldw	r2,-28(fp)
 8044de0:	1000ff26 	beq	r2,zero,80451e0 <ip_setmoptions+0x524>
         imo->imo_multicast_netp = netp;
 8044de4:	e0fff817 	ldw	r3,-32(fp)
 8044de8:	e0bffc17 	ldw	r2,-16(fp)
 8044dec:	10c00015 	stw	r3,0(r2)
      break;
 8044df0:	0000fb06 	br	80451e0 <ip_setmoptions+0x524>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
 8044df4:	e0bff517 	ldw	r2,-44(fp)
 8044df8:	10c00003 	ldbu	r3,0(r2)
 8044dfc:	e0bffc17 	ldw	r2,-16(fp)
 8044e00:	10c00105 	stb	r3,4(r2)
      break;
 8044e04:	0000f706 	br	80451e4 <ip_setmoptions+0x528>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
 8044e08:	e0bff517 	ldw	r2,-44(fp)
 8044e0c:	10800003 	ldbu	r2,0(r2)
 8044e10:	10803fcc 	andi	r2,r2,255
 8044e14:	108000b0 	cmpltui	r2,r2,2
 8044e18:	1000031e 	bne	r2,zero,8044e28 <ip_setmoptions+0x16c>
      {
         error = EINVAL;
 8044e1c:	00800584 	movi	r2,22
 8044e20:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044e24:	0000ef06 	br	80451e4 <ip_setmoptions+0x528>
      }
      imo->imo_multicast_loop = *(u_char *)(val);
 8044e28:	e0bff517 	ldw	r2,-44(fp)
 8044e2c:	10c00003 	ldbu	r3,0(r2)
 8044e30:	e0bffc17 	ldw	r2,-16(fp)
 8044e34:	10c00145 	stb	r3,5(r2)
      break;
 8044e38:	0000ea06 	br	80451e4 <ip_setmoptions+0x528>
   case IP_ADD_MEMBERSHIP:
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 8044e3c:	e0bff517 	ldw	r2,-44(fp)
 8044e40:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 8044e44:	e0bffa17 	ldw	r2,-24(fp)
 8044e48:	10800017 	ldw	r2,0(r2)
 8044e4c:	1006d63a 	srli	r3,r2,24
 8044e50:	e0bffa17 	ldw	r2,-24(fp)
 8044e54:	10800017 	ldw	r2,0(r2)
 8044e58:	1004d23a 	srli	r2,r2,8
 8044e5c:	10bfc00c 	andi	r2,r2,65280
 8044e60:	1886b03a 	or	r3,r3,r2
 8044e64:	e0bffa17 	ldw	r2,-24(fp)
 8044e68:	10800017 	ldw	r2,0(r2)
 8044e6c:	1004923a 	slli	r2,r2,8
 8044e70:	10803fec 	andhi	r2,r2,255
 8044e74:	1886b03a 	or	r3,r3,r2
 8044e78:	e0bffa17 	ldw	r2,-24(fp)
 8044e7c:	10800017 	ldw	r2,0(r2)
 8044e80:	1004963a 	slli	r2,r2,24
 8044e84:	1884b03a 	or	r2,r3,r2
 8044e88:	10fc002c 	andhi	r3,r2,61440
 8044e8c:	00b80034 	movhi	r2,57344
 8044e90:	18800326 	beq	r3,r2,8044ea0 <ip_setmoptions+0x1e4>
      {
         error = EINVAL;
 8044e94:	00800584 	movi	r2,22
 8044e98:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044e9c:	0000d106 	br	80451e4 <ip_setmoptions+0x528>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 8044ea0:	e0bffa17 	ldw	r2,-24(fp)
 8044ea4:	10800117 	ldw	r2,4(r2)
 8044ea8:	e0fff804 	addi	r3,fp,-32
 8044eac:	180b883a 	mov	r5,r3
 8044eb0:	1009883a 	mov	r4,r2
 8044eb4:	8044ba80 	call	8044ba8 <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
 8044eb8:	e0bff817 	ldw	r2,-32(fp)
 8044ebc:	10000326 	beq	r2,zero,8044ecc <ip_setmoptions+0x210>
 8044ec0:	e0bff817 	ldw	r2,-32(fp)
 8044ec4:	10802b17 	ldw	r2,172(r2)
 8044ec8:	1000031e 	bne	r2,zero,8044ed8 <ip_setmoptions+0x21c>
      {
         error = EADDRNOTAVAIL;
 8044ecc:	00801f44 	movi	r2,125
 8044ed0:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044ed4:	0000c306 	br	80451e4 <ip_setmoptions+0x528>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8044ed8:	e03ffd8d 	sth	zero,-10(fp)
 8044edc:	00001606 	br	8044f38 <ip_setmoptions+0x27c>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
 8044ee0:	e0bffd8b 	ldhu	r2,-10(fp)
 8044ee4:	e0fffc17 	ldw	r3,-16(fp)
 8044ee8:	10800084 	addi	r2,r2,2
 8044eec:	100490ba 	slli	r2,r2,2
 8044ef0:	1885883a 	add	r2,r3,r2
 8044ef4:	10800017 	ldw	r2,0(r2)
 8044ef8:	10c00117 	ldw	r3,4(r2)
 8044efc:	e0bff817 	ldw	r2,-32(fp)
 8044f00:	18800a1e 	bne	r3,r2,8044f2c <ip_setmoptions+0x270>
             imo->imo_membership[i]->inm_addr
 8044f04:	e0bffd8b 	ldhu	r2,-10(fp)
 8044f08:	e0fffc17 	ldw	r3,-16(fp)
 8044f0c:	10800084 	addi	r2,r2,2
 8044f10:	100490ba 	slli	r2,r2,2
 8044f14:	1885883a 	add	r2,r3,r2
 8044f18:	10800017 	ldw	r2,0(r2)
 8044f1c:	10c00017 	ldw	r3,0(r2)
             == mreq->imr_multiaddr)
 8044f20:	e0bffa17 	ldw	r2,-24(fp)
 8044f24:	10800017 	ldw	r2,0(r2)
         if (imo->imo_membership[i]->inm_netp == netp &&
 8044f28:	18800926 	beq	r3,r2,8044f50 <ip_setmoptions+0x294>
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8044f2c:	e0bffd8b 	ldhu	r2,-10(fp)
 8044f30:	10800044 	addi	r2,r2,1
 8044f34:	e0bffd8d 	sth	r2,-10(fp)
 8044f38:	e0bffc17 	ldw	r2,-16(fp)
 8044f3c:	1080018b 	ldhu	r2,6(r2)
 8044f40:	e0fffd8b 	ldhu	r3,-10(fp)
 8044f44:	10bfffcc 	andi	r2,r2,65535
 8044f48:	18bfe536 	bltu	r3,r2,8044ee0 <ip_setmoptions+0x224>
 8044f4c:	00000106 	br	8044f54 <ip_setmoptions+0x298>
         {
            break;
 8044f50:	0001883a 	nop
         }
      }
      if (i < imo->imo_num_memberships) 
 8044f54:	e0bffc17 	ldw	r2,-16(fp)
 8044f58:	1080018b 	ldhu	r2,6(r2)
 8044f5c:	e0fffd8b 	ldhu	r3,-10(fp)
 8044f60:	10bfffcc 	andi	r2,r2,65535
 8044f64:	1880032e 	bgeu	r3,r2,8044f74 <ip_setmoptions+0x2b8>
      {
         error = EADDRINUSE;
 8044f68:	00801c04 	movi	r2,112
 8044f6c:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044f70:	00009c06 	br	80451e4 <ip_setmoptions+0x528>
      }
      if (i == IP_MAX_MEMBERSHIPS) 
 8044f74:	e0bffd8b 	ldhu	r2,-10(fp)
 8044f78:	10800518 	cmpnei	r2,r2,20
 8044f7c:	1000031e 	bne	r2,zero,8044f8c <ip_setmoptions+0x2d0>
      {
         error = ETOOMANYREFS;
 8044f80:	00802044 	movi	r2,129
 8044f84:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044f88:	00009606 	br	80451e4 <ip_setmoptions+0x528>
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
 8044f8c:	e0bffa17 	ldw	r2,-24(fp)
 8044f90:	e0fff817 	ldw	r3,-32(fp)
      if ((imo->imo_membership[i] =
 8044f94:	e43ffd8b 	ldhu	r16,-10(fp)
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
 8044f98:	01800104 	movi	r6,4
 8044f9c:	180b883a 	mov	r5,r3
 8044fa0:	1009883a 	mov	r4,r2
 8044fa4:	80427940 	call	8042794 <in_addmulti>
 8044fa8:	1009883a 	mov	r4,r2
      if ((imo->imo_membership[i] =
 8044fac:	e0fffc17 	ldw	r3,-16(fp)
 8044fb0:	80800084 	addi	r2,r16,2
 8044fb4:	100490ba 	slli	r2,r2,2
 8044fb8:	1885883a 	add	r2,r3,r2
 8044fbc:	11000015 	stw	r4,0(r2)
 8044fc0:	e0fffc17 	ldw	r3,-16(fp)
 8044fc4:	80800084 	addi	r2,r16,2
 8044fc8:	100490ba 	slli	r2,r2,2
 8044fcc:	1885883a 	add	r2,r3,r2
 8044fd0:	10800017 	ldw	r2,0(r2)
 8044fd4:	1000031e 	bne	r2,zero,8044fe4 <ip_setmoptions+0x328>
      {
         error = ENOBUFS;
 8044fd8:	00801a44 	movi	r2,105
 8044fdc:	e0bffe15 	stw	r2,-8(fp)
         break;
 8044fe0:	00008006 	br	80451e4 <ip_setmoptions+0x528>
      }
      ++imo->imo_num_memberships;
 8044fe4:	e0bffc17 	ldw	r2,-16(fp)
 8044fe8:	1080018b 	ldhu	r2,6(r2)
 8044fec:	10800044 	addi	r2,r2,1
 8044ff0:	1007883a 	mov	r3,r2
 8044ff4:	e0bffc17 	ldw	r2,-16(fp)
 8044ff8:	10c0018d 	sth	r3,6(r2)
      break;
 8044ffc:	00007906 	br	80451e4 <ip_setmoptions+0x528>
   case IP_DROP_MEMBERSHIP:
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 8045000:	e0bff517 	ldw	r2,-44(fp)
 8045004:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 8045008:	e0bffa17 	ldw	r2,-24(fp)
 804500c:	10800017 	ldw	r2,0(r2)
 8045010:	1006d63a 	srli	r3,r2,24
 8045014:	e0bffa17 	ldw	r2,-24(fp)
 8045018:	10800017 	ldw	r2,0(r2)
 804501c:	1004d23a 	srli	r2,r2,8
 8045020:	10bfc00c 	andi	r2,r2,65280
 8045024:	1886b03a 	or	r3,r3,r2
 8045028:	e0bffa17 	ldw	r2,-24(fp)
 804502c:	10800017 	ldw	r2,0(r2)
 8045030:	1004923a 	slli	r2,r2,8
 8045034:	10803fec 	andhi	r2,r2,255
 8045038:	1886b03a 	or	r3,r3,r2
 804503c:	e0bffa17 	ldw	r2,-24(fp)
 8045040:	10800017 	ldw	r2,0(r2)
 8045044:	1004963a 	slli	r2,r2,24
 8045048:	1884b03a 	or	r2,r3,r2
 804504c:	10fc002c 	andhi	r3,r2,61440
 8045050:	00b80034 	movhi	r2,57344
 8045054:	18800326 	beq	r3,r2,8045064 <ip_setmoptions+0x3a8>
      {
         error = EINVAL;
 8045058:	00800584 	movi	r2,22
 804505c:	e0bffe15 	stw	r2,-8(fp)
         break;
 8045060:	00006006 	br	80451e4 <ip_setmoptions+0x528>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 8045064:	e0bffa17 	ldw	r2,-24(fp)
 8045068:	10800117 	ldw	r2,4(r2)
 804506c:	e0fff804 	addi	r3,fp,-32
 8045070:	180b883a 	mov	r5,r3
 8045074:	1009883a 	mov	r4,r2
 8045078:	8044ba80 	call	8044ba8 <IPADDR_TO_NETP>
      if (netp == NULL) 
 804507c:	e0bff817 	ldw	r2,-32(fp)
 8045080:	1000031e 	bne	r2,zero,8045090 <ip_setmoptions+0x3d4>
      {
         error = EADDRNOTAVAIL;
 8045084:	00801f44 	movi	r2,125
 8045088:	e0bffe15 	stw	r2,-8(fp)
         break;
 804508c:	00005506 	br	80451e4 <ip_setmoptions+0x528>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 8045090:	e03ffd8d 	sth	zero,-10(fp)
 8045094:	00001806 	br	80450f8 <ip_setmoptions+0x43c>
      {
         if ((netp == NULL ||
 8045098:	e0bff817 	ldw	r2,-32(fp)
 804509c:	10000926 	beq	r2,zero,80450c4 <ip_setmoptions+0x408>
             imo->imo_membership[i]->inm_netp == netp) &&
 80450a0:	e0bffd8b 	ldhu	r2,-10(fp)
 80450a4:	e0fffc17 	ldw	r3,-16(fp)
 80450a8:	10800084 	addi	r2,r2,2
 80450ac:	100490ba 	slli	r2,r2,2
 80450b0:	1885883a 	add	r2,r3,r2
 80450b4:	10800017 	ldw	r2,0(r2)
 80450b8:	10c00117 	ldw	r3,4(r2)
 80450bc:	e0bff817 	ldw	r2,-32(fp)
         if ((netp == NULL ||
 80450c0:	18800a1e 	bne	r3,r2,80450ec <ip_setmoptions+0x430>
             imo->imo_membership[i]->inm_addr ==
 80450c4:	e0bffd8b 	ldhu	r2,-10(fp)
 80450c8:	e0fffc17 	ldw	r3,-16(fp)
 80450cc:	10800084 	addi	r2,r2,2
 80450d0:	100490ba 	slli	r2,r2,2
 80450d4:	1885883a 	add	r2,r3,r2
 80450d8:	10800017 	ldw	r2,0(r2)
 80450dc:	10c00017 	ldw	r3,0(r2)
             mreq->imr_multiaddr)
 80450e0:	e0bffa17 	ldw	r2,-24(fp)
 80450e4:	10800017 	ldw	r2,0(r2)
             imo->imo_membership[i]->inm_netp == netp) &&
 80450e8:	18800926 	beq	r3,r2,8045110 <ip_setmoptions+0x454>
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 80450ec:	e0bffd8b 	ldhu	r2,-10(fp)
 80450f0:	10800044 	addi	r2,r2,1
 80450f4:	e0bffd8d 	sth	r2,-10(fp)
 80450f8:	e0bffc17 	ldw	r2,-16(fp)
 80450fc:	1080018b 	ldhu	r2,6(r2)
 8045100:	e0fffd8b 	ldhu	r3,-10(fp)
 8045104:	10bfffcc 	andi	r2,r2,65535
 8045108:	18bfe336 	bltu	r3,r2,8045098 <ip_setmoptions+0x3dc>
 804510c:	00000106 	br	8045114 <ip_setmoptions+0x458>
         {
            break;
 8045110:	0001883a 	nop
         }
      }
      if (i == imo->imo_num_memberships) 
 8045114:	e0bffc17 	ldw	r2,-16(fp)
 8045118:	1080018b 	ldhu	r2,6(r2)
 804511c:	e0fffd8b 	ldhu	r3,-10(fp)
 8045120:	10bfffcc 	andi	r2,r2,65535
 8045124:	1880031e 	bne	r3,r2,8045134 <ip_setmoptions+0x478>
      {
         error = EADDRNOTAVAIL;
 8045128:	00801f44 	movi	r2,125
 804512c:	e0bffe15 	stw	r2,-8(fp)
         break;
 8045130:	00002c06 	br	80451e4 <ip_setmoptions+0x528>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
 8045134:	e0bffd8b 	ldhu	r2,-10(fp)
 8045138:	e0fffc17 	ldw	r3,-16(fp)
 804513c:	10800084 	addi	r2,r2,2
 8045140:	100490ba 	slli	r2,r2,2
 8045144:	1885883a 	add	r2,r3,r2
 8045148:	10800017 	ldw	r2,0(r2)
 804514c:	1009883a 	mov	r4,r2
 8045150:	80428e00 	call	80428e0 <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 8045154:	e0bffd8b 	ldhu	r2,-10(fp)
 8045158:	10800044 	addi	r2,r2,1
 804515c:	e0bffd8d 	sth	r2,-10(fp)
 8045160:	00001006 	br	80451a4 <ip_setmoptions+0x4e8>
         imo->imo_membership[i-1] = imo->imo_membership[i];
 8045164:	e0fffd8b 	ldhu	r3,-10(fp)
 8045168:	e0bffd8b 	ldhu	r2,-10(fp)
 804516c:	10bfffc4 	addi	r2,r2,-1
 8045170:	e13ffc17 	ldw	r4,-16(fp)
 8045174:	18c00084 	addi	r3,r3,2
 8045178:	180690ba 	slli	r3,r3,2
 804517c:	20c7883a 	add	r3,r4,r3
 8045180:	18c00017 	ldw	r3,0(r3)
 8045184:	e13ffc17 	ldw	r4,-16(fp)
 8045188:	10800084 	addi	r2,r2,2
 804518c:	100490ba 	slli	r2,r2,2
 8045190:	2085883a 	add	r2,r4,r2
 8045194:	10c00015 	stw	r3,0(r2)
      for (++i; i < imo->imo_num_memberships; ++i)
 8045198:	e0bffd8b 	ldhu	r2,-10(fp)
 804519c:	10800044 	addi	r2,r2,1
 80451a0:	e0bffd8d 	sth	r2,-10(fp)
 80451a4:	e0bffc17 	ldw	r2,-16(fp)
 80451a8:	1080018b 	ldhu	r2,6(r2)
 80451ac:	e0fffd8b 	ldhu	r3,-10(fp)
 80451b0:	10bfffcc 	andi	r2,r2,65535
 80451b4:	18bfeb36 	bltu	r3,r2,8045164 <ip_setmoptions+0x4a8>
      --imo->imo_num_memberships;
 80451b8:	e0bffc17 	ldw	r2,-16(fp)
 80451bc:	1080018b 	ldhu	r2,6(r2)
 80451c0:	10bfffc4 	addi	r2,r2,-1
 80451c4:	1007883a 	mov	r3,r2
 80451c8:	e0bffc17 	ldw	r2,-16(fp)
 80451cc:	10c0018d 	sth	r3,6(r2)
      break;
 80451d0:	00000406 	br	80451e4 <ip_setmoptions+0x528>

      default:
      error = EOPNOTSUPP;
 80451d4:	008017c4 	movi	r2,95
 80451d8:	e0bffe15 	stw	r2,-8(fp)
      break;
 80451dc:	00000106 	br	80451e4 <ip_setmoptions+0x528>
      break;
 80451e0:	0001883a 	nop
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
 80451e4:	e0bffc17 	ldw	r2,-16(fp)
 80451e8:	10800017 	ldw	r2,0(r2)
 80451ec:	1000141e 	bne	r2,zero,8045240 <ip_setmoptions+0x584>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
 80451f0:	e0bffc17 	ldw	r2,-16(fp)
 80451f4:	10800103 	ldbu	r2,4(r2)
   if (imo->imo_multicast_netp == NULL &&
 80451f8:	10803fcc 	andi	r2,r2,255
 80451fc:	10800058 	cmpnei	r2,r2,1
 8045200:	10000f1e 	bne	r2,zero,8045240 <ip_setmoptions+0x584>
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
 8045204:	e0bffc17 	ldw	r2,-16(fp)
 8045208:	10800143 	ldbu	r2,5(r2)
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
 804520c:	10803fcc 	andi	r2,r2,255
 8045210:	10800058 	cmpnei	r2,r2,1
 8045214:	10000a1e 	bne	r2,zero,8045240 <ip_setmoptions+0x584>
       imo->imo_num_memberships == 0) 
 8045218:	e0bffc17 	ldw	r2,-16(fp)
 804521c:	1080018b 	ldhu	r2,6(r2)
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
 8045220:	10bfffcc 	andi	r2,r2,65535
 8045224:	1000061e 	bne	r2,zero,8045240 <ip_setmoptions+0x584>
   {
      IM_FREE(*imop);
 8045228:	e0bffb17 	ldw	r2,-20(fp)
 804522c:	10800017 	ldw	r2,0(r2)
 8045230:	1009883a 	mov	r4,r2
 8045234:	802cf900 	call	802cf90 <npfree>
      *imop = NULL;
 8045238:	e0bffb17 	ldw	r2,-20(fp)
 804523c:	10000015 	stw	zero,0(r2)
   }
   return (error);
 8045240:	e0bffe17 	ldw	r2,-8(fp)
}
 8045244:	e6ffff04 	addi	sp,fp,-4
 8045248:	dfc00217 	ldw	ra,8(sp)
 804524c:	df000117 	ldw	fp,4(sp)
 8045250:	dc000017 	ldw	r16,0(sp)
 8045254:	dec00304 	addi	sp,sp,12
 8045258:	f800283a 	ret

0804525c <ip_getmoptions>:
 * RETURNS: 
 */

int
ip_getmoptions(int optname, struct socket * so, void * val)
{
 804525c:	defff804 	addi	sp,sp,-32
 8045260:	df000715 	stw	fp,28(sp)
 8045264:	df000704 	addi	fp,sp,28
 8045268:	e13ffb15 	stw	r4,-20(fp)
 804526c:	e17ffa15 	stw	r5,-24(fp)
 8045270:	e1bff915 	stw	r6,-28(fp)
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
 8045274:	e0bffa17 	ldw	r2,-24(fp)
 8045278:	10800317 	ldw	r2,12(r2)
 804527c:	e0bfff15 	stw	r2,-4(fp)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 8045280:	e0bffb17 	ldw	r2,-20(fp)
 8045284:	108002e0 	cmpeqi	r2,r2,11
 8045288:	1000291e 	bne	r2,zero,8045330 <ip_getmoptions+0xd4>
 804528c:	e0bffb17 	ldw	r2,-20(fp)
 8045290:	10800308 	cmpgei	r2,r2,12
 8045294:	1000341e 	bne	r2,zero,8045368 <ip_getmoptions+0x10c>
 8045298:	e0bffb17 	ldw	r2,-20(fp)
 804529c:	10800260 	cmpeqi	r2,r2,9
 80452a0:	1000041e 	bne	r2,zero,80452b4 <ip_getmoptions+0x58>
 80452a4:	e0bffb17 	ldw	r2,-20(fp)
 80452a8:	108002a0 	cmpeqi	r2,r2,10
 80452ac:	1000121e 	bne	r2,zero,80452f8 <ip_getmoptions+0x9c>
 80452b0:	00002d06 	br	8045368 <ip_getmoptions+0x10c>
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
 80452b4:	e0bff917 	ldw	r2,-28(fp)
 80452b8:	e0bffc15 	stw	r2,-16(fp)
      if (imo == NULL || imo->imo_multicast_netp == NULL)
 80452bc:	e0bfff17 	ldw	r2,-4(fp)
 80452c0:	10000326 	beq	r2,zero,80452d0 <ip_getmoptions+0x74>
 80452c4:	e0bfff17 	ldw	r2,-4(fp)
 80452c8:	10800017 	ldw	r2,0(r2)
 80452cc:	1000031e 	bne	r2,zero,80452dc <ip_getmoptions+0x80>
         *addr = AADDR;
 80452d0:	e0bffc17 	ldw	r2,-16(fp)
 80452d4:	10000015 	stw	zero,0(r2)
 80452d8:	00000506 	br	80452f0 <ip_getmoptions+0x94>
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
 80452dc:	e0bfff17 	ldw	r2,-4(fp)
 80452e0:	10800017 	ldw	r2,0(r2)
 80452e4:	10c00a17 	ldw	r3,40(r2)
 80452e8:	e0bffc17 	ldw	r2,-16(fp)
 80452ec:	10c00015 	stw	r3,0(r2)
      return (0);
 80452f0:	0005883a 	mov	r2,zero
 80452f4:	00001d06 	br	804536c <ip_getmoptions+0x110>

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
 80452f8:	e0bff917 	ldw	r2,-28(fp)
 80452fc:	e0bffd15 	stw	r2,-12(fp)
      if (imo == NULL)
 8045300:	e0bfff17 	ldw	r2,-4(fp)
 8045304:	1000041e 	bne	r2,zero,8045318 <ip_getmoptions+0xbc>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
 8045308:	e0bffd17 	ldw	r2,-12(fp)
 804530c:	00c00044 	movi	r3,1
 8045310:	10c00005 	stb	r3,0(r2)
 8045314:	00000406 	br	8045328 <ip_getmoptions+0xcc>
      else
         *ttl = imo->imo_multicast_ttl;
 8045318:	e0bfff17 	ldw	r2,-4(fp)
 804531c:	10c00103 	ldbu	r3,4(r2)
 8045320:	e0bffd17 	ldw	r2,-12(fp)
 8045324:	10c00005 	stb	r3,0(r2)
      return (0);
 8045328:	0005883a 	mov	r2,zero
 804532c:	00000f06 	br	804536c <ip_getmoptions+0x110>

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
 8045330:	e0bff917 	ldw	r2,-28(fp)
 8045334:	e0bffe15 	stw	r2,-8(fp)
      if (imo == NULL)
 8045338:	e0bfff17 	ldw	r2,-4(fp)
 804533c:	1000041e 	bne	r2,zero,8045350 <ip_getmoptions+0xf4>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
 8045340:	e0bffe17 	ldw	r2,-8(fp)
 8045344:	00c00044 	movi	r3,1
 8045348:	10c00005 	stb	r3,0(r2)
 804534c:	00000406 	br	8045360 <ip_getmoptions+0x104>
      else
         *loop = imo->imo_multicast_loop;
 8045350:	e0bfff17 	ldw	r2,-4(fp)
 8045354:	10c00143 	ldbu	r3,5(r2)
 8045358:	e0bffe17 	ldw	r2,-8(fp)
 804535c:	10c00005 	stb	r3,0(r2)
      return (0);
 8045360:	0005883a 	mov	r2,zero
 8045364:	00000106 	br	804536c <ip_getmoptions+0x110>

      default:
      return (EOPNOTSUPP);
 8045368:	008017c4 	movi	r2,95
   }
}
 804536c:	e037883a 	mov	sp,fp
 8045370:	df000017 	ldw	fp,0(sp)
 8045374:	dec00104 	addi	sp,sp,4
 8045378:	f800283a 	ret

0804537c <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
 804537c:	defffc04 	addi	sp,sp,-16
 8045380:	dfc00315 	stw	ra,12(sp)
 8045384:	df000215 	stw	fp,8(sp)
 8045388:	df000204 	addi	fp,sp,8
 804538c:	e13ffe15 	stw	r4,-8(fp)
   u_short  i;

   if (imo != NULL) 
 8045390:	e0bffe17 	ldw	r2,-8(fp)
 8045394:	10001426 	beq	r2,zero,80453e8 <ip_freemoptions+0x6c>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 8045398:	e03fff8d 	sth	zero,-2(fp)
 804539c:	00000b06 	br	80453cc <ip_freemoptions+0x50>
         in_delmulti(imo->imo_membership[i]);
 80453a0:	e0bfff8b 	ldhu	r2,-2(fp)
 80453a4:	e0fffe17 	ldw	r3,-8(fp)
 80453a8:	10800084 	addi	r2,r2,2
 80453ac:	100490ba 	slli	r2,r2,2
 80453b0:	1885883a 	add	r2,r3,r2
 80453b4:	10800017 	ldw	r2,0(r2)
 80453b8:	1009883a 	mov	r4,r2
 80453bc:	80428e00 	call	80428e0 <in_delmulti>
      for (i = 0; i < imo->imo_num_memberships; ++i)
 80453c0:	e0bfff8b 	ldhu	r2,-2(fp)
 80453c4:	10800044 	addi	r2,r2,1
 80453c8:	e0bfff8d 	sth	r2,-2(fp)
 80453cc:	e0bffe17 	ldw	r2,-8(fp)
 80453d0:	1080018b 	ldhu	r2,6(r2)
 80453d4:	e0ffff8b 	ldhu	r3,-2(fp)
 80453d8:	10bfffcc 	andi	r2,r2,65535
 80453dc:	18bff036 	bltu	r3,r2,80453a0 <ip_freemoptions+0x24>
      npfree(imo);
 80453e0:	e13ffe17 	ldw	r4,-8(fp)
 80453e4:	802cf900 	call	802cf90 <npfree>
   }
}
 80453e8:	0001883a 	nop
 80453ec:	e037883a 	mov	sp,fp
 80453f0:	dfc00117 	ldw	ra,4(sp)
 80453f4:	df000017 	ldw	fp,0(sp)
 80453f8:	dec00204 	addi	sp,sp,8
 80453fc:	f800283a 	ret

08045400 <u_mctest_init>:
 *
 * RETURNS: 
 */

void u_mctest_init()
{
 8045400:	defffe04 	addi	sp,sp,-8
 8045404:	dfc00115 	stw	ra,4(sp)
 8045408:	df000015 	stw	fp,0(sp)
 804540c:	d839883a 	mov	fp,sp
   printf("mctest init called\n");
 8045410:	01020174 	movhi	r4,2053
 8045414:	210e5f04 	addi	r4,r4,14716
 8045418:	80033800 	call	8003380 <puts>
// altera changes end (cadler@altera.com)
   install_menu(u_mctest_menu);
// altera changes begin (cadler@altera.com)
#endif //IN_MENUS
// altera changes end (cadler@altera.com)
}
 804541c:	0001883a 	nop
 8045420:	e037883a 	mov	sp,fp
 8045424:	dfc00117 	ldw	ra,4(sp)
 8045428:	df000017 	ldw	fp,0(sp)
 804542c:	dec00204 	addi	sp,sp,8
 8045430:	f800283a 	ret

08045434 <u_mctest_run>:
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 8045434:	defede04 	addi	sp,sp,-1160
 8045438:	dfc12115 	stw	ra,1156(sp)
 804543c:	df012015 	stw	fp,1152(sp)
 8045440:	df012004 	addi	fp,sp,1152
 8045444:	e13ee215 	stw	r4,-1144(fp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 8045448:	e0fee884 	addi	r3,fp,-1118
 804544c:	00820174 	movhi	r2,2053
 8045450:	108f0b04 	addi	r2,r2,15404
 8045454:	01000784 	movi	r4,30
 8045458:	200d883a 	mov	r6,r4
 804545c:	100b883a 	mov	r5,r2
 8045460:	1809883a 	mov	r4,r3
 8045464:	8002ea40 	call	8002ea4 <memcpy>
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 8045468:	000d883a 	mov	r6,zero
 804546c:	01400084 	movi	r5,2
 8045470:	01000084 	movi	r4,2
 8045474:	802f1ac0 	call	802f1ac <t_socket>
 8045478:	e0bffe15 	stw	r2,-8(fp)

   if (s == INVALID_SOCKET) 
 804547c:	e0bffe17 	ldw	r2,-8(fp)
 8045480:	10bfffd8 	cmpnei	r2,r2,-1
 8045484:	1000091e 	bne	r2,zero,80454ac <u_mctest_run+0x78>
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
 8045488:	e13ffe17 	ldw	r4,-8(fp)
 804548c:	80307040 	call	8030704 <t_errno>
 8045490:	100d883a 	mov	r6,r2
 8045494:	01420174 	movhi	r5,2053
 8045498:	294e6404 	addi	r5,r5,14736
 804549c:	e13ee217 	ldw	r4,-1144(fp)
 80454a0:	80281f80 	call	80281f8 <ns_printf>
      exit(1);
 80454a4:	01000044 	movi	r4,1
 80454a8:	804a0f80 	call	804a0f8 <exit>
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
 80454ac:	00800044 	movi	r2,1
 80454b0:	e0bee715 	stw	r2,-1124(fp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 80454b4:	e0fee704 	addi	r3,fp,-1124
 80454b8:	00800104 	movi	r2,4
 80454bc:	d8800015 	stw	r2,0(sp)
 80454c0:	180f883a 	mov	r7,r3
 80454c4:	01800104 	movi	r6,4
 80454c8:	017fffc4 	movi	r5,-1
 80454cc:	e13ffe17 	ldw	r4,-8(fp)
 80454d0:	802fb880 	call	802fb88 <t_setsockopt>
 80454d4:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 80454d8:	e0bffd17 	ldw	r2,-12(fp)
 80454dc:	10bfffd8 	cmpnei	r2,r2,-1
 80454e0:	1000071e 	bne	r2,zero,8045500 <u_mctest_run+0xcc>
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
 80454e4:	e13ffe17 	ldw	r4,-8(fp)
 80454e8:	80307040 	call	8030704 <t_errno>
 80454ec:	100d883a 	mov	r6,r2
 80454f0:	01420174 	movhi	r5,2053
 80454f4:	294e6b04 	addi	r5,r5,14764
 80454f8:	e13ee217 	ldw	r4,-1144(fp)
 80454fc:	80281f80 	call	80281f8 <ns_printf>
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
 8045500:	00800084 	movi	r2,2
 8045504:	e0bff80d 	sth	r2,-32(fp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
 8045508:	e03ff915 	stw	zero,-28(fp)
   stLocal.sin_port =   htons(TEST_PORT);
 804550c:	00a00344 	movi	r2,-32755
 8045510:	e0bff88d 	sth	r2,-30(fp)
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
 8045514:	e0bff804 	addi	r2,fp,-32
 8045518:	01800404 	movi	r6,16
 804551c:	100b883a 	mov	r5,r2
 8045520:	e13ffe17 	ldw	r4,-8(fp)
 8045524:	802f22c0 	call	802f22c <t_bind>
 8045528:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 804552c:	e0bffd17 	ldw	r2,-12(fp)
 8045530:	10bfffd8 	cmpnei	r2,r2,-1
 8045534:	1000061e 	bne	r2,zero,8045550 <u_mctest_run+0x11c>
   {
      printf ("t_bind() failed, Err: %d\n",
 8045538:	e13ffe17 	ldw	r4,-8(fp)
 804553c:	80307040 	call	8030704 <t_errno>
 8045540:	100b883a 	mov	r5,r2
 8045544:	01020174 	movhi	r4,2053
 8045548:	210e7704 	addi	r4,r4,14812
 804554c:	800325c0 	call	800325c <printf>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
 8045550:	01820174 	movhi	r6,2053
 8045554:	318e7e04 	addi	r6,r6,14840
 8045558:	01420174 	movhi	r5,2053
 804555c:	294e8104 	addi	r5,r5,14852
 8045560:	e13ee217 	ldw	r4,-1144(fp)
 8045564:	80281f80 	call	80281f8 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 8045568:	01020174 	movhi	r4,2053
 804556c:	210e7e04 	addi	r4,r4,14840
 8045570:	804644c0 	call	804644c <inet_addr>
 8045574:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 8045578:	008201b4 	movhi	r2,2054
 804557c:	10ba2417 	ldw	r2,-6000(r2)
 8045580:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 8045584:	e0fee504 	addi	r3,fp,-1132
 8045588:	00800204 	movi	r2,8
 804558c:	d8800015 	stw	r2,0(sp)
 8045590:	180f883a 	mov	r7,r3
 8045594:	01800304 	movi	r6,12
 8045598:	000b883a 	mov	r5,zero
 804559c:	e13ffe17 	ldw	r4,-8(fp)
 80455a0:	802fb880 	call	802fb88 <t_setsockopt>
 80455a4:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 80455a8:	e0bffd17 	ldw	r2,-12(fp)
 80455ac:	10bfffd8 	cmpnei	r2,r2,-1
 80455b0:	1000071e 	bne	r2,zero,80455d0 <u_mctest_run+0x19c>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 80455b4:	e13ffe17 	ldw	r4,-8(fp)
 80455b8:	80307040 	call	8030704 <t_errno>
 80455bc:	100d883a 	mov	r6,r2
 80455c0:	01420174 	movhi	r5,2053
 80455c4:	294e8904 	addi	r5,r5,14884
 80455c8:	e13ee217 	ldw	r4,-1144(fp)
 80455cc:	80281f80 	call	80281f8 <ns_printf>
                     t_errno(s));
   } 
   tk_yield();
 80455d0:	8028b500 	call	8028b50 <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
 80455d4:	01820174 	movhi	r6,2053
 80455d8:	318e9604 	addi	r6,r6,14936
 80455dc:	01420174 	movhi	r5,2053
 80455e0:	294e8104 	addi	r5,r5,14852
 80455e4:	e13ee217 	ldw	r4,-1144(fp)
 80455e8:	80281f80 	call	80281f8 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
 80455ec:	01020174 	movhi	r4,2053
 80455f0:	210e9604 	addi	r4,r4,14936
 80455f4:	804644c0 	call	804644c <inet_addr>
 80455f8:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 80455fc:	008201b4 	movhi	r2,2054
 8045600:	10ba2417 	ldw	r2,-6000(r2)
 8045604:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 8045608:	e0fee504 	addi	r3,fp,-1132
 804560c:	00800204 	movi	r2,8
 8045610:	d8800015 	stw	r2,0(sp)
 8045614:	180f883a 	mov	r7,r3
 8045618:	01800304 	movi	r6,12
 804561c:	000b883a 	mov	r5,zero
 8045620:	e13ffe17 	ldw	r4,-8(fp)
 8045624:	802fb880 	call	802fb88 <t_setsockopt>
 8045628:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 804562c:	e0bffd17 	ldw	r2,-12(fp)
 8045630:	10bfffd8 	cmpnei	r2,r2,-1
 8045634:	1000071e 	bne	r2,zero,8045654 <u_mctest_run+0x220>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 8045638:	e13ffe17 	ldw	r4,-8(fp)
 804563c:	80307040 	call	8030704 <t_errno>
 8045640:	100d883a 	mov	r6,r2
 8045644:	01420174 	movhi	r5,2053
 8045648:	294e8904 	addi	r5,r5,14884
 804564c:	e13ee217 	ldw	r4,-1144(fp)
 8045650:	80281f80 	call	80281f8 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 8045654:	8028b500 	call	8028b50 <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
 8045658:	01820174 	movhi	r6,2053
 804565c:	318e9904 	addi	r6,r6,14948
 8045660:	01420174 	movhi	r5,2053
 8045664:	294e8104 	addi	r5,r5,14852
 8045668:	e13ee217 	ldw	r4,-1144(fp)
 804566c:	80281f80 	call	80281f8 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
 8045670:	01020174 	movhi	r4,2053
 8045674:	210e9904 	addi	r4,r4,14948
 8045678:	804644c0 	call	804644c <inet_addr>
 804567c:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 8045680:	008201b4 	movhi	r2,2054
 8045684:	10ba2417 	ldw	r2,-6000(r2)
 8045688:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 804568c:	e0fee504 	addi	r3,fp,-1132
 8045690:	00800204 	movi	r2,8
 8045694:	d8800015 	stw	r2,0(sp)
 8045698:	180f883a 	mov	r7,r3
 804569c:	01800304 	movi	r6,12
 80456a0:	000b883a 	mov	r5,zero
 80456a4:	e13ffe17 	ldw	r4,-8(fp)
 80456a8:	802fb880 	call	802fb88 <t_setsockopt>
 80456ac:	e0bffd15 	stw	r2,-12(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 80456b0:	e0bffd17 	ldw	r2,-12(fp)
 80456b4:	10bfffd8 	cmpnei	r2,r2,-1
 80456b8:	1000071e 	bne	r2,zero,80456d8 <u_mctest_run+0x2a4>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 80456bc:	e13ffe17 	ldw	r4,-8(fp)
 80456c0:	80307040 	call	8030704 <t_errno>
 80456c4:	100d883a 	mov	r6,r2
 80456c8:	01420174 	movhi	r5,2053
 80456cc:	294e8904 	addi	r5,r5,14884
 80456d0:	e13ee217 	ldw	r4,-1144(fp)
 80456d4:	80281f80 	call	80281f8 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 80456d8:	8028b500 	call	8028b50 <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
 80456dc:	00800084 	movi	r2,2
 80456e0:	e0bee4c5 	stb	r2,-1133(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
 80456e4:	e0fee4c4 	addi	r3,fp,-1133
 80456e8:	00800044 	movi	r2,1
 80456ec:	d8800015 	stw	r2,0(sp)
 80456f0:	180f883a 	mov	r7,r3
 80456f4:	01800284 	movi	r6,10
 80456f8:	000b883a 	mov	r5,zero
 80456fc:	e13ffe17 	ldw	r4,-8(fp)
 8045700:	802fb880 	call	802fb88 <t_setsockopt>
 8045704:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 8045708:	e0bffd17 	ldw	r2,-12(fp)
 804570c:	10bfffd8 	cmpnei	r2,r2,-1
 8045710:	1000071e 	bne	r2,zero,8045730 <u_mctest_run+0x2fc>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
 8045714:	e13ffe17 	ldw	r4,-8(fp)
 8045718:	80307040 	call	8030704 <t_errno>
 804571c:	100d883a 	mov	r6,r2
 8045720:	01420174 	movhi	r5,2053
 8045724:	294e9c04 	addi	r5,r5,14960
 8045728:	e13ee217 	ldw	r4,-1144(fp)
 804572c:	80281f80 	call	80281f8 <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
 8045730:	00800044 	movi	r2,1
 8045734:	e0bee4c5 	stb	r2,-1133(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 8045738:	e0fee4c4 	addi	r3,fp,-1133
 804573c:	00800044 	movi	r2,1
 8045740:	d8800015 	stw	r2,0(sp)
 8045744:	180f883a 	mov	r7,r3
 8045748:	018002c4 	movi	r6,11
 804574c:	000b883a 	mov	r5,zero
 8045750:	e13ffe17 	ldw	r4,-8(fp)
 8045754:	802fb880 	call	802fb88 <t_setsockopt>
 8045758:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 804575c:	e0bffd17 	ldw	r2,-12(fp)
 8045760:	10bfffd8 	cmpnei	r2,r2,-1
 8045764:	1000071e 	bne	r2,zero,8045784 <u_mctest_run+0x350>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
 8045768:	e13ffe17 	ldw	r4,-8(fp)
 804576c:	80307040 	call	8030704 <t_errno>
 8045770:	100d883a 	mov	r6,r2
 8045774:	01420174 	movhi	r5,2053
 8045778:	294ea904 	addi	r5,r5,15012
 804577c:	e13ee217 	ldw	r4,-1144(fp)
 8045780:	80281f80 	call	80281f8 <ns_printf>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
 8045784:	00800084 	movi	r2,2
 8045788:	e0bff40d 	sth	r2,-48(fp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 804578c:	01020174 	movhi	r4,2053
 8045790:	210e9604 	addi	r4,r4,14936
 8045794:	804644c0 	call	804644c <inet_addr>
 8045798:	e0bff515 	stw	r2,-44(fp)
   stTo.sin_port =        htons(TEST_PORT);
 804579c:	00a00344 	movi	r2,-32755
 80457a0:	e0bff48d 	sth	r2,-46(fp)
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
 80457a4:	01820174 	movhi	r6,2053
 80457a8:	318e9604 	addi	r6,r6,14936
 80457ac:	01420174 	movhi	r5,2053
 80457b0:	294eb604 	addi	r5,r5,15064
 80457b4:	e13ee217 	ldw	r4,-1144(fp)
 80457b8:	80281f80 	call	80281f8 <ns_printf>
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
 80457bc:	e03fff15 	stw	zero,-4(fp)
 80457c0:	00008606 	br	80459dc <u_mctest_run+0x5a8>
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
 80457c4:	d0a05017 	ldw	r2,-32448(gp)
 80457c8:	10c00044 	addi	r3,r2,1
 80457cc:	d0e05015 	stw	r3,-32448(gp)
 80457d0:	e0fee884 	addi	r3,fp,-1118
 80457d4:	18c00404 	addi	r3,r3,16
 80457d8:	100d883a 	mov	r6,r2
 80457dc:	01420174 	movhi	r5,2053
 80457e0:	294ec504 	addi	r5,r5,15124
 80457e4:	1809883a 	mov	r4,r3
 80457e8:	804a34c0 	call	804a34c <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
 80457ec:	e0fee884 	addi	r3,fp,-1118
 80457f0:	00800404 	movi	r2,16
 80457f4:	d8800115 	stw	r2,4(sp)
 80457f8:	e0bff404 	addi	r2,fp,-48
 80457fc:	d8800015 	stw	r2,0(sp)
 8045800:	000f883a 	mov	r7,zero
 8045804:	01800784 	movi	r6,30
 8045808:	180b883a 	mov	r5,r3
 804580c:	e13ffe17 	ldw	r4,-8(fp)
 8045810:	80300e80 	call	80300e8 <t_sendto>
 8045814:	e0bffd15 	stw	r2,-12(fp)
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
 8045818:	e0bffd17 	ldw	r2,-12(fp)
 804581c:	1000080e 	bge	r2,zero,8045840 <u_mctest_run+0x40c>
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
 8045820:	e13ffe17 	ldw	r4,-8(fp)
 8045824:	80307040 	call	8030704 <t_errno>
 8045828:	100d883a 	mov	r6,r2
 804582c:	01420174 	movhi	r5,2053
 8045830:	294ec604 	addi	r5,r5,15128
 8045834:	e13ee217 	ldw	r4,-1144(fp)
 8045838:	80281f80 	call	80281f8 <ns_printf>
         /*     exit(1); */
         goto exitloop;
 804583c:	00006b06 	br	80459ec <u_mctest_run+0x5b8>
      }

      /* make the socket non-blocking */
      iTmp = 1;
 8045840:	00800044 	movi	r2,1
 8045844:	e0bee715 	stw	r2,-1124(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
 8045848:	e0fee704 	addi	r3,fp,-1124
 804584c:	00800104 	movi	r2,4
 8045850:	d8800015 	stw	r2,0(sp)
 8045854:	180f883a 	mov	r7,r3
 8045858:	01840584 	movi	r6,4118
 804585c:	017fffc4 	movi	r5,-1
 8045860:	e13ffe17 	ldw	r4,-8(fp)
 8045864:	802fb880 	call	802fb88 <t_setsockopt>
 8045868:	e0bffd15 	stw	r2,-12(fp)
      if (iRet == SOCKET_ERROR) 
 804586c:	e0bffd17 	ldw	r2,-12(fp)
 8045870:	10bfffd8 	cmpnei	r2,r2,-1
 8045874:	1000071e 	bne	r2,zero,8045894 <u_mctest_run+0x460>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
 8045878:	e13ffe17 	ldw	r4,-8(fp)
 804587c:	80307040 	call	8030704 <t_errno>
 8045880:	100d883a 	mov	r6,r2
 8045884:	01420174 	movhi	r5,2053
 8045888:	294ece04 	addi	r5,r5,15160
 804588c:	e13ee217 	ldw	r4,-1144(fp)
 8045890:	80281f80 	call	80281f8 <ns_printf>
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
 8045894:	d0a0a317 	ldw	r2,-32116(gp)
 8045898:	10807d04 	addi	r2,r2,500
 804589c:	e0bffc15 	stw	r2,-16(fp)

      while (cticks < endtime)
 80458a0:	00003406 	br	8045974 <u_mctest_run+0x540>
      {
         int sa_size = sizeof(struct sockaddr_in);
 80458a4:	00800404 	movi	r2,16
 80458a8:	e0bee315 	stw	r2,-1140(fp)
         tk_yield();
 80458ac:	8028b500 	call	8028b50 <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
 80458b0:	e0fef004 	addi	r3,fp,-1088
 80458b4:	e0bee304 	addi	r2,fp,-1140
 80458b8:	d8800115 	stw	r2,4(sp)
 80458bc:	e0bff004 	addi	r2,fp,-64
 80458c0:	d8800015 	stw	r2,0(sp)
 80458c4:	000f883a 	mov	r7,zero
 80458c8:	01810004 	movi	r6,1024
 80458cc:	180b883a 	mov	r5,r3
 80458d0:	e13ffe17 	ldw	r4,-8(fp)
 80458d4:	802ffac0 	call	802ffac <t_recvfrom>
 80458d8:	e0bffd15 	stw	r2,-12(fp)
         if (iRet < 0) 
 80458dc:	e0bffd17 	ldw	r2,-12(fp)
 80458e0:	10000c0e 	bge	r2,zero,8045914 <u_mctest_run+0x4e0>
         {
            if (t_errno(s) != EWOULDBLOCK)
 80458e4:	e13ffe17 	ldw	r4,-8(fp)
 80458e8:	80307040 	call	8030704 <t_errno>
 80458ec:	108002e0 	cmpeqi	r2,r2,11
 80458f0:	1000081e 	bne	r2,zero,8045914 <u_mctest_run+0x4e0>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
 80458f4:	e13ffe17 	ldw	r4,-8(fp)
 80458f8:	80307040 	call	8030704 <t_errno>
 80458fc:	100d883a 	mov	r6,r2
 8045900:	01420174 	movhi	r5,2053
 8045904:	294eda04 	addi	r5,r5,15208
 8045908:	e13ee217 	ldw	r4,-1144(fp)
 804590c:	80281f80 	call	80281f8 <ns_printf>
 8045910:	00003606 	br	80459ec <u_mctest_run+0x5b8>
               /*     exit(1); */
               goto exitloop;
            }
         }
         if (iRet > 0)
 8045914:	e0bffd17 	ldw	r2,-12(fp)
 8045918:	0080160e 	bge	zero,r2,8045974 <u_mctest_run+0x540>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
 804591c:	e0bff117 	ldw	r2,-60(fp)
 8045920:	1009883a 	mov	r4,r2
 8045924:	8027e240 	call	8027e24 <print_ipad>
 8045928:	1009883a 	mov	r4,r2
             print_ipad(stFrom.sin_addr.s_addr),
             ntohs(stFrom.sin_port), achIn);
 804592c:	e0bff08b 	ldhu	r2,-62(fp)
 8045930:	10bfffcc 	andi	r2,r2,65535
 8045934:	1004d23a 	srli	r2,r2,8
 8045938:	10bfffcc 	andi	r2,r2,65535
 804593c:	10c03fcc 	andi	r3,r2,255
 8045940:	e0bff08b 	ldhu	r2,-62(fp)
 8045944:	10bfffcc 	andi	r2,r2,65535
 8045948:	1004923a 	slli	r2,r2,8
 804594c:	10bfffcc 	andi	r2,r2,65535
            ns_printf(pio,"From host:%s port:%d, %s\n",
 8045950:	1886b03a 	or	r3,r3,r2
 8045954:	e0bef004 	addi	r2,fp,-1088
 8045958:	d8800015 	stw	r2,0(sp)
 804595c:	180f883a 	mov	r7,r3
 8045960:	200d883a 	mov	r6,r4
 8045964:	01420174 	movhi	r5,2053
 8045968:	294ee204 	addi	r5,r5,15240
 804596c:	e13ee217 	ldw	r4,-1144(fp)
 8045970:	80281f80 	call	80281f8 <ns_printf>
      while (cticks < endtime)
 8045974:	d0e0a317 	ldw	r3,-32116(gp)
 8045978:	e0bffc17 	ldw	r2,-16(fp)
 804597c:	18bfc936 	bltu	r3,r2,80458a4 <u_mctest_run+0x470>
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
 8045980:	e03ee4c5 	stb	zero,-1133(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
 8045984:	e0fee4c4 	addi	r3,fp,-1133
 8045988:	00800044 	movi	r2,1
 804598c:	d8800015 	stw	r2,0(sp)
 8045990:	180f883a 	mov	r7,r3
 8045994:	01840584 	movi	r6,4118
 8045998:	017fffc4 	movi	r5,-1
 804599c:	e13ffe17 	ldw	r4,-8(fp)
 80459a0:	802fb880 	call	802fb88 <t_setsockopt>
 80459a4:	e0bffd15 	stw	r2,-12(fp)
      if (iRet == SOCKET_ERROR) 
 80459a8:	e0bffd17 	ldw	r2,-12(fp)
 80459ac:	10bfffd8 	cmpnei	r2,r2,-1
 80459b0:	1000071e 	bne	r2,zero,80459d0 <u_mctest_run+0x59c>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
 80459b4:	e13ffe17 	ldw	r4,-8(fp)
 80459b8:	80307040 	call	8030704 <t_errno>
 80459bc:	100d883a 	mov	r6,r2
 80459c0:	01420174 	movhi	r5,2053
 80459c4:	294ee904 	addi	r5,r5,15268
 80459c8:	e13ee217 	ldw	r4,-1144(fp)
 80459cc:	80281f80 	call	80281f8 <ns_printf>
   for (i = 0; i < LOOPMAX; i++)
 80459d0:	e0bfff17 	ldw	r2,-4(fp)
 80459d4:	10800044 	addi	r2,r2,1
 80459d8:	e0bfff15 	stw	r2,-4(fp)
 80459dc:	e0bfff17 	ldw	r2,-4(fp)
 80459e0:	108000d0 	cmplti	r2,r2,3
 80459e4:	103f771e 	bne	r2,zero,80457c4 <u_mctest_run+0x390>
                        t_errno(s));
      }
   }   /* end for(;;) */

exitloop:
 80459e8:	0001883a 	nop
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 80459ec:	01020174 	movhi	r4,2053
 80459f0:	210e7e04 	addi	r4,r4,14840
 80459f4:	804644c0 	call	804644c <inet_addr>
 80459f8:	e0bee515 	stw	r2,-1132(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 80459fc:	008201b4 	movhi	r2,2054
 8045a00:	10ba2417 	ldw	r2,-6000(r2)
 8045a04:	e0bee615 	stw	r2,-1128(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 8045a08:	e0fee504 	addi	r3,fp,-1132
 8045a0c:	00800204 	movi	r2,8
 8045a10:	d8800015 	stw	r2,0(sp)
 8045a14:	180f883a 	mov	r7,r3
 8045a18:	01800344 	movi	r6,13
 8045a1c:	000b883a 	mov	r5,zero
 8045a20:	e13ffe17 	ldw	r4,-8(fp)
 8045a24:	802fb880 	call	802fb88 <t_setsockopt>
 8045a28:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 8045a2c:	e0bffd17 	ldw	r2,-12(fp)
 8045a30:	10bfffd8 	cmpnei	r2,r2,-1
 8045a34:	1000071e 	bne	r2,zero,8045a54 <u_mctest_run+0x620>
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
 8045a38:	e13ffe17 	ldw	r4,-8(fp)
 8045a3c:	80307040 	call	8030704 <t_errno>
 8045a40:	100d883a 	mov	r6,r2
 8045a44:	01420174 	movhi	r5,2053
 8045a48:	294ef504 	addi	r5,r5,15316
 8045a4c:	e13ee217 	ldw	r4,-1144(fp)
 8045a50:	80281f80 	call	80281f8 <ns_printf>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
 8045a54:	e13ffe17 	ldw	r4,-8(fp)
 8045a58:	80305b80 	call	80305b8 <t_socketclose>
 8045a5c:	e0bffd15 	stw	r2,-12(fp)
   if (iRet == SOCKET_ERROR) 
 8045a60:	e0bffd17 	ldw	r2,-12(fp)
 8045a64:	10bfffd8 	cmpnei	r2,r2,-1
 8045a68:	1000071e 	bne	r2,zero,8045a88 <u_mctest_run+0x654>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
 8045a6c:	e13ffe17 	ldw	r4,-8(fp)
 8045a70:	80307040 	call	8030704 <t_errno>
 8045a74:	100d883a 	mov	r6,r2
 8045a78:	01420174 	movhi	r5,2053
 8045a7c:	294f0204 	addi	r5,r5,15368
 8045a80:	e13ee217 	ldw	r4,-1144(fp)
 8045a84:	80281f80 	call	80281f8 <ns_printf>
   }

   return(0);
 8045a88:	0005883a 	mov	r2,zero
}  /* end main() */  
 8045a8c:	e037883a 	mov	sp,fp
 8045a90:	dfc00117 	ldw	ra,4(sp)
 8045a94:	df000017 	ldw	fp,0(sp)
 8045a98:	dec00204 	addi	sp,sp,8
 8045a9c:	f800283a 	ret

08045aa0 <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
 8045aa0:	defff604 	addi	sp,sp,-40
 8045aa4:	dfc00915 	stw	ra,36(sp)
 8045aa8:	df000815 	stw	fp,32(sp)
 8045aac:	df000804 	addi	fp,sp,32
   int      iface;
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */
 8045ab0:	e03ffe15 	stw	zero,-8(fp)

   e = dhc_init();
 8045ab4:	8028e000 	call	8028e00 <dhc_init>
 8045ab8:	e0bffd15 	stw	r2,-12(fp)

   if (e)
 8045abc:	e0bffd17 	ldw	r2,-12(fp)
 8045ac0:	10000526 	beq	r2,zero,8045ad8 <dhc_setup+0x38>
   {
      printf("Error starting DHCP client code.\n");
 8045ac4:	01020174 	movhi	r4,2053
 8045ac8:	210f1304 	addi	r4,r4,15436
 8045acc:	80033800 	call	8003380 <puts>
      netexit(1);
 8045ad0:	01000044 	movi	r4,1
 8045ad4:	8042ad00 	call	8042ad0 <netexit>
   }

   dhcp_started = cticks;  /* init timeout */
 8045ad8:	d0a0a317 	ldw	r2,-32116(gp)
 8045adc:	e0bffc15 	stw	r2,-16(fp)

   for (iface = 0; iface < STATIC_NETS; iface++)
 8045ae0:	e03fff15 	stw	zero,-4(fp)
 8045ae4:	00004206 	br	8045bf0 <dhc_setup+0x150>
   {
      if (!nets[iface])
 8045ae8:	e0bfff17 	ldw	r2,-4(fp)
 8045aec:	100690ba 	slli	r3,r2,2
 8045af0:	008201b4 	movhi	r2,2054
 8045af4:	1885883a 	add	r2,r3,r2
 8045af8:	10bada17 	ldw	r2,-5272(r2)
 8045afc:	10003626 	beq	r2,zero,8045bd8 <dhc_setup+0x138>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
 8045b00:	e0bfff17 	ldw	r2,-4(fp)
 8045b04:	100690ba 	slli	r3,r2,2
 8045b08:	008201b4 	movhi	r2,2054
 8045b0c:	1885883a 	add	r2,r3,r2
 8045b10:	10bada17 	ldw	r2,-5272(r2)
 8045b14:	10802a17 	ldw	r2,168(r2)
 8045b18:	1080400c 	andi	r2,r2,256
 8045b1c:	10003026 	beq	r2,zero,8045be0 <dhc_setup+0x140>
         continue;

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
 8045b20:	e0bfff17 	ldw	r2,-4(fp)
 8045b24:	10c00f24 	muli	r3,r2,60
 8045b28:	008201b4 	movhi	r2,2054
 8045b2c:	1885883a 	add	r2,r3,r2
 8045b30:	10bb0e17 	ldw	r2,-5064(r2)
 8045b34:	1000041e 	bne	r2,zero,8045b48 <dhc_setup+0xa8>
      {
         dhc_set_callback(iface, dhc_main_ipset);
 8045b38:	01420134 	movhi	r5,2052
 8045b3c:	29572e04 	addi	r5,r5,23736
 8045b40:	e13fff17 	ldw	r4,-4(fp)
 8045b44:	8028ea40 	call	8028ea4 <dhc_set_callback>
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
 8045b48:	e0bfff17 	ldw	r2,-4(fp)
 8045b4c:	100690ba 	slli	r3,r2,2
 8045b50:	008201b4 	movhi	r2,2054
 8045b54:	1885883a 	add	r2,r3,r2
 8045b58:	10bada17 	ldw	r2,-5272(r2)
 8045b5c:	10c00a17 	ldw	r3,40(r2)
 8045b60:	e0bfff17 	ldw	r2,-4(fp)
 8045b64:	100490ba 	slli	r2,r2,2
 8045b68:	e085883a 	add	r2,fp,r2
 8045b6c:	10fff815 	stw	r3,-32(r2)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
 8045b70:	e0bfff17 	ldw	r2,-4(fp)
 8045b74:	100490ba 	slli	r2,r2,2
 8045b78:	e085883a 	add	r2,fp,r2
 8045b7c:	10bff817 	ldw	r2,-32(r2)
 8045b80:	1000041e 	bne	r2,zero,8045b94 <dhc_setup+0xf4>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
 8045b84:	01400044 	movi	r5,1
 8045b88:	e13fff17 	ldw	r4,-4(fp)
 8045b8c:	802b36c0 	call	802b36c <dhc_state_init>
 8045b90:	00000306 	br	8045ba0 <dhc_setup+0x100>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
 8045b94:	000b883a 	mov	r5,zero
 8045b98:	e13fff17 	ldw	r4,-4(fp)
 8045b9c:	802b36c0 	call	802b36c <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
 8045ba0:	802acd00 	call	802acd0 <dhc_second>
 8045ba4:	e0bffd15 	stw	r2,-12(fp)
      if (e)
 8045ba8:	e0bffd17 	ldw	r2,-12(fp)
 8045bac:	10000626 	beq	r2,zero,8045bc8 <dhc_setup+0x128>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
 8045bb0:	e17fff17 	ldw	r5,-4(fp)
 8045bb4:	01020174 	movhi	r4,2053
 8045bb8:	210f1c04 	addi	r4,r4,15472
 8045bbc:	800325c0 	call	800325c <printf>
         netexit(1);
 8045bc0:	01000044 	movi	r4,1
 8045bc4:	8042ad00 	call	8042ad0 <netexit>
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
 8045bc8:	e0bffe17 	ldw	r2,-8(fp)
 8045bcc:	10800044 	addi	r2,r2,1
 8045bd0:	e0bffe15 	stw	r2,-8(fp)
 8045bd4:	00000306 	br	8045be4 <dhc_setup+0x144>
         continue; /* no valid iface for this network */
 8045bd8:	0001883a 	nop
 8045bdc:	00000106 	br	8045be4 <dhc_setup+0x144>
         continue;
 8045be0:	0001883a 	nop
   for (iface = 0; iface < STATIC_NETS; iface++)
 8045be4:	e0bfff17 	ldw	r2,-4(fp)
 8045be8:	10800044 	addi	r2,r2,1
 8045bec:	e0bfff15 	stw	r2,-4(fp)
 8045bf0:	e0bfff17 	ldw	r2,-4(fp)
 8045bf4:	10800110 	cmplti	r2,r2,4
 8045bf8:	103fbb1e 	bne	r2,zero,8045ae8 <dhc_setup+0x48>
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
 8045bfc:	e0bffe17 	ldw	r2,-8(fp)
 8045c00:	10002726 	beq	r2,zero,8045ca0 <dhc_setup+0x200>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 8045c04:	00000206 	br	8045c10 <dhc_setup+0x170>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
 8045c08:	8028b500 	call	8028b50 <tk_yield>
      pktdemux();
 8045c0c:	80257d80 	call	80257d8 <pktdemux>
   while (((cticks - dhcp_started) < (130*TPS)) &&
 8045c10:	d0e0a317 	ldw	r3,-32116(gp)
 8045c14:	e0bffc17 	ldw	r2,-16(fp)
 8045c18:	1885c83a 	sub	r2,r3,r2
 8045c1c:	108cb228 	cmpgeui	r2,r2,13000
 8045c20:	1000021e 	bne	r2,zero,8045c2c <dhc_setup+0x18c>
      (dhc_alldone() == FALSE))
 8045c24:	802b3c40 	call	802b3c4 <dhc_alldone>
   while (((cticks - dhcp_started) < (130*TPS)) &&
 8045c28:	103ff726 	beq	r2,zero,8045c08 <dhc_setup+0x168>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
 8045c2c:	802b3c40 	call	802b3c4 <dhc_alldone>
 8045c30:	10001c1e 	bne	r2,zero,8045ca4 <dhc_setup+0x204>
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 8045c34:	01020174 	movhi	r4,2053
 8045c38:	210f2604 	addi	r4,r4,15512
 8045c3c:	80033800 	call	8003380 <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 8045c40:	e03fff15 	stw	zero,-4(fp)
 8045c44:	00001206 	br	8045c90 <dhc_setup+0x1f0>
      {
         if (dhc_ifacedone(iface) == FALSE)
 8045c48:	e13fff17 	ldw	r4,-4(fp)
 8045c4c:	802b4440 	call	802b444 <dhc_ifacedone>
 8045c50:	10000c1e 	bne	r2,zero,8045c84 <dhc_setup+0x1e4>
         {
            dhc_halt(iface);
 8045c54:	e13fff17 	ldw	r4,-4(fp)
 8045c58:	802b1900 	call	802b190 <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
 8045c5c:	e0bfff17 	ldw	r2,-4(fp)
 8045c60:	100690ba 	slli	r3,r2,2
 8045c64:	008201b4 	movhi	r2,2054
 8045c68:	1885883a 	add	r2,r3,r2
 8045c6c:	10bada17 	ldw	r2,-5272(r2)
 8045c70:	e0ffff17 	ldw	r3,-4(fp)
 8045c74:	180690ba 	slli	r3,r3,2
 8045c78:	e0c7883a 	add	r3,fp,r3
 8045c7c:	18fff817 	ldw	r3,-32(r3)
 8045c80:	10c00a15 	stw	r3,40(r2)
      for (iface = 0; iface < STATIC_NETS; iface++)
 8045c84:	e0bfff17 	ldw	r2,-4(fp)
 8045c88:	10800044 	addi	r2,r2,1
 8045c8c:	e0bfff15 	stw	r2,-4(fp)
 8045c90:	e0bfff17 	ldw	r2,-4(fp)
 8045c94:	10800110 	cmplti	r2,r2,4
 8045c98:	103feb1e 	bne	r2,zero,8045c48 <dhc_setup+0x1a8>
 8045c9c:	00000106 	br	8045ca4 <dhc_setup+0x204>
      return;
 8045ca0:	0001883a 	nop
         }
      }
   }
}
 8045ca4:	e037883a 	mov	sp,fp
 8045ca8:	dfc00117 	ldw	ra,4(sp)
 8045cac:	df000017 	ldw	fp,0(sp)
 8045cb0:	dec00204 	addi	sp,sp,8
 8045cb4:	f800283a 	ret

08045cb8 <dhc_main_ipset>:
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 8045cb8:	defffc04 	addi	sp,sp,-16
 8045cbc:	dfc00315 	stw	ra,12(sp)
 8045cc0:	df000215 	stw	fp,8(sp)
 8045cc4:	df000204 	addi	fp,sp,8
 8045cc8:	e13fff15 	stw	r4,-4(fp)
 8045ccc:	e17ffe15 	stw	r5,-8(fp)
   if ( state == DHCS_BOUND )
 8045cd0:	e0bffe17 	ldw	r2,-8(fp)
 8045cd4:	10800198 	cmpnei	r2,r2,6
 8045cd8:	10002e1e 	bne	r2,zero,8045d94 <dhc_main_ipset+0xdc>
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
              nets[iface]->name);
 8045cdc:	e0bfff17 	ldw	r2,-4(fp)
 8045ce0:	100690ba 	slli	r3,r2,2
 8045ce4:	008201b4 	movhi	r2,2054
 8045ce8:	1885883a 	add	r2,r3,r2
 8045cec:	10bada17 	ldw	r2,-5272(r2)
 8045cf0:	10800104 	addi	r2,r2,4
      printf("Acquired IP address via DHCP client for interface: %s\n",
 8045cf4:	100b883a 	mov	r5,r2
 8045cf8:	01020174 	movhi	r4,2053
 8045cfc:	210f3404 	addi	r4,r4,15568
 8045d00:	800325c0 	call	800325c <printf>

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
 8045d04:	e0bfff17 	ldw	r2,-4(fp)
 8045d08:	100690ba 	slli	r3,r2,2
 8045d0c:	008201b4 	movhi	r2,2054
 8045d10:	1885883a 	add	r2,r3,r2
 8045d14:	10bada17 	ldw	r2,-5272(r2)
 8045d18:	10800a17 	ldw	r2,40(r2)
 8045d1c:	1009883a 	mov	r4,r2
 8045d20:	8027e240 	call	8027e24 <print_ipad>
 8045d24:	100b883a 	mov	r5,r2
 8045d28:	01020174 	movhi	r4,2053
 8045d2c:	210f4204 	addi	r4,r4,15624
 8045d30:	800325c0 	call	800325c <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
 8045d34:	e0bfff17 	ldw	r2,-4(fp)
 8045d38:	100690ba 	slli	r3,r2,2
 8045d3c:	008201b4 	movhi	r2,2054
 8045d40:	1885883a 	add	r2,r3,r2
 8045d44:	10bada17 	ldw	r2,-5272(r2)
 8045d48:	10800c17 	ldw	r2,48(r2)
 8045d4c:	1009883a 	mov	r4,r2
 8045d50:	8027e240 	call	8027e24 <print_ipad>
 8045d54:	100b883a 	mov	r5,r2
 8045d58:	01020174 	movhi	r4,2053
 8045d5c:	210f4704 	addi	r4,r4,15644
 8045d60:	800325c0 	call	800325c <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
 8045d64:	e0bfff17 	ldw	r2,-4(fp)
 8045d68:	100690ba 	slli	r3,r2,2
 8045d6c:	008201b4 	movhi	r2,2054
 8045d70:	1885883a 	add	r2,r3,r2
 8045d74:	10bada17 	ldw	r2,-5272(r2)
 8045d78:	10800d17 	ldw	r2,52(r2)
 8045d7c:	1009883a 	mov	r4,r2
 8045d80:	8027e240 	call	8027e24 <print_ipad>
 8045d84:	100b883a 	mov	r5,r2
 8045d88:	01020174 	movhi	r4,2053
 8045d8c:	210f4c04 	addi	r4,r4,15664
 8045d90:	800325c0 	call	800325c <printf>
   }
   return 0;
 8045d94:	0005883a 	mov	r2,zero
}
 8045d98:	e037883a 	mov	sp,fp
 8045d9c:	dfc00117 	ldw	ra,4(sp)
 8045da0:	df000017 	ldw	fp,0(sp)
 8045da4:	dec00204 	addi	sp,sp,8
 8045da8:	f800283a 	ret

08045dac <init_memdev>:
 * RETURNS: 
 */

int
init_memdev(void)
{
 8045dac:	deffff04 	addi	sp,sp,-4
 8045db0:	df000015 	stw	fp,0(sp)
 8045db4:	d839883a 	mov	fp,sp
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 8045db8:	d0e0cf17 	ldw	r3,-31940(gp)
 8045dbc:	00820174 	movhi	r2,2053
 8045dc0:	10d88415 	stw	r3,25104(r2)
   vfsystems = &mdio;
 8045dc4:	00820174 	movhi	r2,2053
 8045dc8:	10988404 	addi	r2,r2,25104
 8045dcc:	d0a0cf15 	stw	r2,-31940(gp)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 8045dd0:	d0e0d117 	ldw	r3,-31932(gp)
 8045dd4:	00820174 	movhi	r2,2053
 8045dd8:	10d88d15 	stw	r3,25140(r2)
   vfsfiles = &mdlist[3];
 8045ddc:	00820174 	movhi	r2,2053
 8045de0:	1098ae04 	addi	r2,r2,25272
 8045de4:	d0a0d115 	stw	r2,-31932(gp)

   return 0;
 8045de8:	0005883a 	mov	r2,zero
}
 8045dec:	e037883a 	mov	sp,fp
 8045df0:	df000017 	ldw	fp,0(sp)
 8045df4:	dec00104 	addi	sp,sp,4
 8045df8:	f800283a 	ret

08045dfc <md_fopen>:
 * RETURNS: 
 */

VFILE* 
md_fopen(char * name, char * mode)
{
 8045dfc:	defffd04 	addi	sp,sp,-12
 8045e00:	df000215 	stw	fp,8(sp)
 8045e04:	df000204 	addi	fp,sp,8
 8045e08:	e13fff15 	stw	r4,-4(fp)
 8045e0c:	e17ffe15 	stw	r5,-8(fp)
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
 8045e10:	0005883a 	mov	r2,zero
}
 8045e14:	e037883a 	mov	sp,fp
 8045e18:	df000017 	ldw	fp,0(sp)
 8045e1c:	dec00104 	addi	sp,sp,4
 8045e20:	f800283a 	ret

08045e24 <md_fclose>:
 * RETURNS: 
 */

void   
md_fclose(VFILE * vfd)
{
 8045e24:	defffe04 	addi	sp,sp,-8
 8045e28:	df000115 	stw	fp,4(sp)
 8045e2c:	df000104 	addi	fp,sp,4
 8045e30:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);
}
 8045e34:	0001883a 	nop
 8045e38:	e037883a 	mov	sp,fp
 8045e3c:	df000017 	ldw	fp,0(sp)
 8045e40:	dec00104 	addi	sp,sp,4
 8045e44:	f800283a 	ret

08045e48 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8045e48:	defff704 	addi	sp,sp,-36
 8045e4c:	dfc00815 	stw	ra,32(sp)
 8045e50:	df000715 	stw	fp,28(sp)
 8045e54:	df000704 	addi	fp,sp,28
 8045e58:	e13ffc15 	stw	r4,-16(fp)
 8045e5c:	e17ffb15 	stw	r5,-20(fp)
 8045e60:	e1bffa15 	stw	r6,-24(fp)
 8045e64:	e1fff915 	stw	r7,-28(fp)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
 8045e68:	00800834 	movhi	r2,32
 8045e6c:	e0bffe15 	stw	r2,-8(fp)
   if(vfd && vfd->file)
 8045e70:	e0bff917 	ldw	r2,-28(fp)
 8045e74:	10000726 	beq	r2,zero,8045e94 <md_fread+0x4c>
 8045e78:	e0bff917 	ldw	r2,-28(fp)
 8045e7c:	10800117 	ldw	r2,4(r2)
 8045e80:	10000426 	beq	r2,zero,8045e94 <md_fread+0x4c>
   {
      file_size = vfd->file->real_size; 
 8045e84:	e0bff917 	ldw	r2,-28(fp)
 8045e88:	10800117 	ldw	r2,4(r2)
 8045e8c:	10800717 	ldw	r2,28(r2)
 8045e90:	e0bffe15 	stw	r2,-8(fp)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
 8045e94:	e0bff917 	ldw	r2,-28(fp)
 8045e98:	10c00217 	ldw	r3,8(r2)
 8045e9c:	e0bff917 	ldw	r2,-28(fp)
 8045ea0:	10800117 	ldw	r2,4(r2)
 8045ea4:	10800617 	ldw	r2,24(r2)
 8045ea8:	1885c83a 	sub	r2,r3,r2
 8045eac:	e0bffd15 	stw	r2,-12(fp)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
 8045eb0:	e0fffa17 	ldw	r3,-24(fp)
 8045eb4:	e0bffb17 	ldw	r2,-20(fp)
 8045eb8:	1885383a 	mul	r2,r3,r2
 8045ebc:	e0bfff15 	stw	r2,-4(fp)

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
 8045ec0:	e0fffd17 	ldw	r3,-12(fp)
 8045ec4:	e0bfff17 	ldw	r2,-4(fp)
 8045ec8:	1885883a 	add	r2,r3,r2
 8045ecc:	e0fffe17 	ldw	r3,-8(fp)
 8045ed0:	1880042e 	bgeu	r3,r2,8045ee4 <md_fread+0x9c>
      bcount = ((u_long)file_size - location);
 8045ed4:	e0fffe17 	ldw	r3,-8(fp)
 8045ed8:	e0bffd17 	ldw	r2,-12(fp)
 8045edc:	1885c83a 	sub	r2,r3,r2
 8045ee0:	e0bfff15 	stw	r2,-4(fp)

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
 8045ee4:	e0fffd17 	ldw	r3,-12(fp)
 8045ee8:	e0bffe17 	ldw	r2,-8(fp)
 8045eec:	1880052e 	bgeu	r3,r2,8045f04 <md_fread+0xbc>
      (bcount  & 0xFFFF0000) ||
 8045ef0:	e0bfff17 	ldw	r2,-4(fp)
 8045ef4:	10bfffec 	andhi	r2,r2,65535
   if((location >= file_size) ||
 8045ef8:	1000021e 	bne	r2,zero,8045f04 <md_fread+0xbc>
      (bcount  & 0xFFFF0000) ||
 8045efc:	e0bfff17 	ldw	r2,-4(fp)
 8045f00:	1000021e 	bne	r2,zero,8045f0c <md_fread+0xc4>
      (bcount == 0))
   {
      return 0;
 8045f04:	0005883a 	mov	r2,zero
 8045f08:	00002006 	br	8045f8c <md_fread+0x144>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
 8045f0c:	e0bff917 	ldw	r2,-28(fp)
 8045f10:	10800117 	ldw	r2,4(r2)
 8045f14:	1080058b 	ldhu	r2,22(r2)
 8045f18:	10bfffcc 	andi	r2,r2,65535
 8045f1c:	10a0001c 	xori	r2,r2,32768
 8045f20:	10a00004 	addi	r2,r2,-32768
 8045f24:	10001016 	blt	r2,zero,8045f68 <md_fread+0x120>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 8045f28:	e0bff917 	ldw	r2,-28(fp)
 8045f2c:	10800117 	ldw	r2,4(r2)
 8045f30:	10800103 	ldbu	r2,4(r2)
 8045f34:	10803fcc 	andi	r2,r2,255
 8045f38:	1080201c 	xori	r2,r2,128
 8045f3c:	10bfe004 	addi	r2,r2,-128
 8045f40:	10801b58 	cmpnei	r2,r2,109
 8045f44:	1000081e 	bne	r2,zero,8045f68 <md_fread+0x120>
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
 8045f48:	e0bff917 	ldw	r2,-28(fp)
 8045f4c:	10c00217 	ldw	r3,8(r2)
 8045f50:	00800834 	movhi	r2,32
 8045f54:	1885883a 	add	r2,r3,r2
 8045f58:	e1bfff17 	ldw	r6,-4(fp)
 8045f5c:	100b883a 	mov	r5,r2
 8045f60:	e13ffc17 	ldw	r4,-16(fp)
 8045f64:	8002ea40 	call	8002ea4 <memcpy>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
 8045f68:	e0bff917 	ldw	r2,-28(fp)
 8045f6c:	10c00217 	ldw	r3,8(r2)
 8045f70:	e0bfff17 	ldw	r2,-4(fp)
 8045f74:	1887883a 	add	r3,r3,r2
 8045f78:	e0bff917 	ldw	r2,-28(fp)
 8045f7c:	10c00215 	stw	r3,8(r2)
#endif
   
   return ((int)bcount/size);
 8045f80:	e17ffb17 	ldw	r5,-20(fp)
 8045f84:	e13fff17 	ldw	r4,-4(fp)
 8045f88:	800e2300 	call	800e230 <__udivsi3>
}
 8045f8c:	e037883a 	mov	sp,fp
 8045f90:	dfc00117 	ldw	ra,4(sp)
 8045f94:	df000017 	ldw	fp,0(sp)
 8045f98:	dec00204 	addi	sp,sp,8
 8045f9c:	f800283a 	ret

08045fa0 <md_fwrite>:
 * RETURNS: 
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8045fa0:	defffb04 	addi	sp,sp,-20
 8045fa4:	df000415 	stw	fp,16(sp)
 8045fa8:	df000404 	addi	fp,sp,16
 8045fac:	e13fff15 	stw	r4,-4(fp)
 8045fb0:	e17ffe15 	stw	r5,-8(fp)
 8045fb4:	e1bffd15 	stw	r6,-12(fp)
 8045fb8:	e1fffc15 	stw	r7,-16(fp)
   if (vfd->file->name[0] == 'm')   /* memory device */
 8045fbc:	e0bffc17 	ldw	r2,-16(fp)
 8045fc0:	10800117 	ldw	r2,4(r2)
 8045fc4:	10800103 	ldbu	r2,4(r2)
 8045fc8:	10803fcc 	andi	r2,r2,255
 8045fcc:	1080201c 	xori	r2,r2,128
 8045fd0:	10bfe004 	addi	r2,r2,-128
 8045fd4:	10801b58 	cmpnei	r2,r2,109
 8045fd8:	1000021e 	bne	r2,zero,8045fe4 <md_fwrite+0x44>
      return 0;   /* not writable device */
 8045fdc:	0005883a 	mov	r2,zero
 8045fe0:	00000906 	br	8046008 <md_fwrite+0x68>

   vfd->cmploc += (items * size);   /* adjust location */
 8045fe4:	e0bffc17 	ldw	r2,-16(fp)
 8045fe8:	10c00217 	ldw	r3,8(r2)
 8045fec:	e13ffd17 	ldw	r4,-12(fp)
 8045ff0:	e0bffe17 	ldw	r2,-8(fp)
 8045ff4:	2085383a 	mul	r2,r4,r2
 8045ff8:	1887883a 	add	r3,r3,r2
 8045ffc:	e0bffc17 	ldw	r2,-16(fp)
 8046000:	10c00215 	stw	r3,8(r2)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
 8046004:	e0bffd17 	ldw	r2,-12(fp)
}
 8046008:	e037883a 	mov	sp,fp
 804600c:	df000017 	ldw	fp,0(sp)
 8046010:	dec00104 	addi	sp,sp,4
 8046014:	f800283a 	ret

08046018 <md_fseek>:
 * RETURNS: 
 */

int
md_fseek(VFILE * vfd, long offset, int mode)
{
 8046018:	defffc04 	addi	sp,sp,-16
 804601c:	df000315 	stw	fp,12(sp)
 8046020:	df000304 	addi	fp,sp,12
 8046024:	e13fff15 	stw	r4,-4(fp)
 8046028:	e17ffe15 	stw	r5,-8(fp)
 804602c:	e1bffd15 	stw	r6,-12(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
 8046030:	0005883a 	mov	r2,zero
}
 8046034:	e037883a 	mov	sp,fp
 8046038:	df000017 	ldw	fp,0(sp)
 804603c:	dec00104 	addi	sp,sp,4
 8046040:	f800283a 	ret

08046044 <md_ftell>:
 * RETURNS: 
 */

long   
md_ftell(VFILE * vfd)
{
 8046044:	defffe04 	addi	sp,sp,-8
 8046048:	df000115 	stw	fp,4(sp)
 804604c:	df000104 	addi	fp,sp,4
 8046050:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
 8046054:	00800834 	movhi	r2,32
}
 8046058:	e037883a 	mov	sp,fp
 804605c:	df000017 	ldw	fp,0(sp)
 8046060:	dec00104 	addi	sp,sp,4
 8046064:	f800283a 	ret

08046068 <md_fgetc>:
 * RETURNS: 
 */

int    
md_fgetc(VFILE * vfd)
{
 8046068:	defffc04 	addi	sp,sp,-16
 804606c:	df000315 	stw	fp,12(sp)
 8046070:	df000304 	addi	fp,sp,12
 8046074:	e13ffd15 	stw	r4,-12(fp)
   unsigned location;   /* current offset infile */
   int   retval   =  0;
 8046078:	e03fff15 	stw	zero,-4(fp)

   location = vfd->cmploc - vfd->file->data;
 804607c:	e0bffd17 	ldw	r2,-12(fp)
 8046080:	10c00217 	ldw	r3,8(r2)
 8046084:	e0bffd17 	ldw	r2,-12(fp)
 8046088:	10800117 	ldw	r2,4(r2)
 804608c:	10800617 	ldw	r2,24(r2)
 8046090:	1885c83a 	sub	r2,r3,r2
 8046094:	e0bffe15 	stw	r2,-8(fp)
   if (location >= vfd->file->real_size)     /* at end of file? */
 8046098:	e0bffd17 	ldw	r2,-12(fp)
 804609c:	10800117 	ldw	r2,4(r2)
 80460a0:	10800717 	ldw	r2,28(r2)
 80460a4:	e0fffe17 	ldw	r3,-8(fp)
 80460a8:	18800236 	bltu	r3,r2,80460b4 <md_fgetc+0x4c>
      return EOF;
 80460ac:	00bfffc4 	movi	r2,-1
 80460b0:	00001a06 	br	804611c <md_fgetc+0xb4>

   if (!(vfd->file->flags & VF_NODATA))
 80460b4:	e0bffd17 	ldw	r2,-12(fp)
 80460b8:	10800117 	ldw	r2,4(r2)
 80460bc:	1080058b 	ldhu	r2,22(r2)
 80460c0:	10bfffcc 	andi	r2,r2,65535
 80460c4:	10a0001c 	xori	r2,r2,32768
 80460c8:	10a00004 	addi	r2,r2,-32768
 80460cc:	10000d16 	blt	r2,zero,8046104 <md_fgetc+0x9c>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 80460d0:	e0bffd17 	ldw	r2,-12(fp)
 80460d4:	10800117 	ldw	r2,4(r2)
 80460d8:	10800103 	ldbu	r2,4(r2)
 80460dc:	10803fcc 	andi	r2,r2,255
 80460e0:	1080201c 	xori	r2,r2,128
 80460e4:	10bfe004 	addi	r2,r2,-128
 80460e8:	10801b58 	cmpnei	r2,r2,109
 80460ec:	1000051e 	bne	r2,zero,8046104 <md_fgetc+0x9c>
         retval = (int)(*vfd->cmploc) & 0xFF ;
 80460f0:	e0bffd17 	ldw	r2,-12(fp)
 80460f4:	10800217 	ldw	r2,8(r2)
 80460f8:	10800003 	ldbu	r2,0(r2)
 80460fc:	10803fcc 	andi	r2,r2,255
 8046100:	e0bfff15 	stw	r2,-4(fp)
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
 8046104:	e0bffd17 	ldw	r2,-12(fp)
 8046108:	10800217 	ldw	r2,8(r2)
 804610c:	10c00044 	addi	r3,r2,1
 8046110:	e0bffd17 	ldw	r2,-12(fp)
 8046114:	10c00215 	stw	r3,8(r2)
   return retval;
 8046118:	e0bfff17 	ldw	r2,-4(fp)
}
 804611c:	e037883a 	mov	sp,fp
 8046120:	df000017 	ldw	fp,0(sp)
 8046124:	dec00104 	addi	sp,sp,4
 8046128:	f800283a 	ret

0804612c <md_unlink>:
 * RETURNS: 
 */

int    
md_unlink(char * filename)
{
 804612c:	defffe04 	addi	sp,sp,-8
 8046130:	df000115 	stw	fp,4(sp)
 8046134:	df000104 	addi	fp,sp,4
 8046138:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
 804613c:	0005883a 	mov	r2,zero
}
 8046140:	e037883a 	mov	sp,fp
 8046144:	df000017 	ldw	fp,0(sp)
 8046148:	dec00104 	addi	sp,sp,4
 804614c:	f800283a 	ret

08046150 <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 8046150:	defff604 	addi	sp,sp,-40
 8046154:	dfc00915 	stw	ra,36(sp)
 8046158:	df000815 	stw	fp,32(sp)
 804615c:	df000804 	addi	fp,sp,32
 8046160:	e13ffa15 	stw	r4,-24(fp)
 8046164:	e17ff915 	stw	r5,-28(fp)
 8046168:	e1bff815 	stw	r6,-32(fp)
   char *   cp;
   int   dots  =  0; /* periods imbedded in input string */
 804616c:	e03ffe15 	stw	zero,-8(fp)
   union   
   {
      u_char   c[4];
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";
 8046170:	00820174 	movhi	r2,2053
 8046174:	108f5104 	addi	r2,r2,15684
 8046178:	e0bffd15 	stw	r2,-12(fp)

   cp = stringin;
 804617c:	e0bff817 	ldw	r2,-32(fp)
 8046180:	e0bfff15 	stw	r2,-4(fp)
   while (*cp)
 8046184:	00002506 	br	804621c <parse_ipad+0xcc>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 8046188:	e0bfff17 	ldw	r2,-4(fp)
 804618c:	10800003 	ldbu	r2,0(r2)
 8046190:	10803fcc 	andi	r2,r2,255
 8046194:	1080201c 	xori	r2,r2,128
 8046198:	10bfe004 	addi	r2,r2,-128
 804619c:	10800e88 	cmpgei	r2,r2,58
 80461a0:	10000e1e 	bne	r2,zero,80461dc <parse_ipad+0x8c>
 80461a4:	e0bfff17 	ldw	r2,-4(fp)
 80461a8:	10800003 	ldbu	r2,0(r2)
 80461ac:	10803fcc 	andi	r2,r2,255
 80461b0:	1080201c 	xori	r2,r2,128
 80461b4:	10bfe004 	addi	r2,r2,-128
 80461b8:	10800b90 	cmplti	r2,r2,46
 80461bc:	1000071e 	bne	r2,zero,80461dc <parse_ipad+0x8c>
 80461c0:	e0bfff17 	ldw	r2,-4(fp)
 80461c4:	10800003 	ldbu	r2,0(r2)
 80461c8:	10803fcc 	andi	r2,r2,255
 80461cc:	1080201c 	xori	r2,r2,128
 80461d0:	10bfe004 	addi	r2,r2,-128
 80461d4:	10800bd8 	cmpnei	r2,r2,47
 80461d8:	1000031e 	bne	r2,zero,80461e8 <parse_ipad+0x98>
         return("all chars must be digits (0-9) or dots (.)");
 80461dc:	00820174 	movhi	r2,2053
 80461e0:	108f5a04 	addi	r2,r2,15720
 80461e4:	00009406 	br	8046438 <parse_ipad+0x2e8>
      if (*cp == '.')dots++;
 80461e8:	e0bfff17 	ldw	r2,-4(fp)
 80461ec:	10800003 	ldbu	r2,0(r2)
 80461f0:	10803fcc 	andi	r2,r2,255
 80461f4:	1080201c 	xori	r2,r2,128
 80461f8:	10bfe004 	addi	r2,r2,-128
 80461fc:	10800b98 	cmpnei	r2,r2,46
 8046200:	1000031e 	bne	r2,zero,8046210 <parse_ipad+0xc0>
 8046204:	e0bffe17 	ldw	r2,-8(fp)
 8046208:	10800044 	addi	r2,r2,1
 804620c:	e0bffe15 	stw	r2,-8(fp)
         cp++;
 8046210:	e0bfff17 	ldw	r2,-4(fp)
 8046214:	10800044 	addi	r2,r2,1
 8046218:	e0bfff15 	stw	r2,-4(fp)
   while (*cp)
 804621c:	e0bfff17 	ldw	r2,-4(fp)
 8046220:	10800003 	ldbu	r2,0(r2)
 8046224:	10803fcc 	andi	r2,r2,255
 8046228:	1080201c 	xori	r2,r2,128
 804622c:	10bfe004 	addi	r2,r2,-128
 8046230:	103fd51e 	bne	r2,zero,8046188 <parse_ipad+0x38>
   }

   if ( dots < 1 || dots > 3 )
 8046234:	e0bffe17 	ldw	r2,-8(fp)
 8046238:	0080030e 	bge	zero,r2,8046248 <parse_ipad+0xf8>
 804623c:	e0bffe17 	ldw	r2,-8(fp)
 8046240:	10800110 	cmplti	r2,r2,4
 8046244:	1000031e 	bne	r2,zero,8046254 <parse_ipad+0x104>
      return("string must contain 1 - 3 dots (.)");
 8046248:	00820174 	movhi	r2,2053
 804624c:	108f6504 	addi	r2,r2,15764
 8046250:	00007906 	br	8046438 <parse_ipad+0x2e8>

   cp = stringin;
 8046254:	e0bff817 	ldw	r2,-32(fp)
 8046258:	e0bfff15 	stw	r2,-4(fp)
   if ((number = atoi(cp)) > 255)   /* set net number */
 804625c:	e13fff17 	ldw	r4,-4(fp)
 8046260:	804a0e00 	call	804a0e0 <atoi>
 8046264:	e0bffc15 	stw	r2,-16(fp)
 8046268:	e0bffc17 	ldw	r2,-16(fp)
 804626c:	10804010 	cmplti	r2,r2,256
 8046270:	1000021e 	bne	r2,zero,804627c <parse_ipad+0x12c>
      return(toobig);
 8046274:	e0bffd17 	ldw	r2,-12(fp)
 8046278:	00006f06 	br	8046438 <parse_ipad+0x2e8>

   retval.c[0] = (u_char)number;
 804627c:	e0bffc17 	ldw	r2,-16(fp)
 8046280:	e0bffb05 	stb	r2,-20(fp)

   while (*cp != '.')cp++; /* find dot (end of number) */
 8046284:	00000306 	br	8046294 <parse_ipad+0x144>
 8046288:	e0bfff17 	ldw	r2,-4(fp)
 804628c:	10800044 	addi	r2,r2,1
 8046290:	e0bfff15 	stw	r2,-4(fp)
 8046294:	e0bfff17 	ldw	r2,-4(fp)
 8046298:	10800003 	ldbu	r2,0(r2)
 804629c:	10803fcc 	andi	r2,r2,255
 80462a0:	1080201c 	xori	r2,r2,128
 80462a4:	10bfe004 	addi	r2,r2,-128
 80462a8:	10800b98 	cmpnei	r2,r2,46
 80462ac:	103ff61e 	bne	r2,zero,8046288 <parse_ipad+0x138>
      cp++;             /* point past dot */
 80462b0:	e0bfff17 	ldw	r2,-4(fp)
 80462b4:	10800044 	addi	r2,r2,1
 80462b8:	e0bfff15 	stw	r2,-4(fp)

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 80462bc:	e0bffe17 	ldw	r2,-8(fp)
 80462c0:	10800060 	cmpeqi	r2,r2,1
 80462c4:	1000031e 	bne	r2,zero,80462d4 <parse_ipad+0x184>
 80462c8:	e0bffe17 	ldw	r2,-8(fp)
 80462cc:	10800098 	cmpnei	r2,r2,2
 80462d0:	1000021e 	bne	r2,zero,80462dc <parse_ipad+0x18c>
 80462d4:	e03ffb45 	stb	zero,-19(fp)
 80462d8:	00001806 	br	804633c <parse_ipad+0x1ec>
      else
   {
      number = atoi(cp);
 80462dc:	e13fff17 	ldw	r4,-4(fp)
 80462e0:	804a0e00 	call	804a0e0 <atoi>
 80462e4:	e0bffc15 	stw	r2,-16(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 80462e8:	00000306 	br	80462f8 <parse_ipad+0x1a8>
 80462ec:	e0bfff17 	ldw	r2,-4(fp)
 80462f0:	10800044 	addi	r2,r2,1
 80462f4:	e0bfff15 	stw	r2,-4(fp)
 80462f8:	e0bfff17 	ldw	r2,-4(fp)
 80462fc:	10800003 	ldbu	r2,0(r2)
 8046300:	10803fcc 	andi	r2,r2,255
 8046304:	1080201c 	xori	r2,r2,128
 8046308:	10bfe004 	addi	r2,r2,-128
 804630c:	10800b98 	cmpnei	r2,r2,46
 8046310:	103ff61e 	bne	r2,zero,80462ec <parse_ipad+0x19c>
         cp++;             /* point past dot */
 8046314:	e0bfff17 	ldw	r2,-4(fp)
 8046318:	10800044 	addi	r2,r2,1
 804631c:	e0bfff15 	stw	r2,-4(fp)
      if (number > 255) return(toobig);
 8046320:	e0bffc17 	ldw	r2,-16(fp)
 8046324:	10804010 	cmplti	r2,r2,256
 8046328:	1000021e 	bne	r2,zero,8046334 <parse_ipad+0x1e4>
 804632c:	e0bffd17 	ldw	r2,-12(fp)
 8046330:	00004106 	br	8046438 <parse_ipad+0x2e8>
         retval.c[1] = (u_char)number;
 8046334:	e0bffc17 	ldw	r2,-16(fp)
 8046338:	e0bffb45 	stb	r2,-19(fp)
   }

   if (dots == 1) retval.c[2] = 0;
 804633c:	e0bffe17 	ldw	r2,-8(fp)
 8046340:	10800058 	cmpnei	r2,r2,1
 8046344:	1000021e 	bne	r2,zero,8046350 <parse_ipad+0x200>
 8046348:	e03ffb85 	stb	zero,-18(fp)
 804634c:	00001806 	br	80463b0 <parse_ipad+0x260>
      else
   {
      number = atoi(cp);
 8046350:	e13fff17 	ldw	r4,-4(fp)
 8046354:	804a0e00 	call	804a0e0 <atoi>
 8046358:	e0bffc15 	stw	r2,-16(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 804635c:	00000306 	br	804636c <parse_ipad+0x21c>
 8046360:	e0bfff17 	ldw	r2,-4(fp)
 8046364:	10800044 	addi	r2,r2,1
 8046368:	e0bfff15 	stw	r2,-4(fp)
 804636c:	e0bfff17 	ldw	r2,-4(fp)
 8046370:	10800003 	ldbu	r2,0(r2)
 8046374:	10803fcc 	andi	r2,r2,255
 8046378:	1080201c 	xori	r2,r2,128
 804637c:	10bfe004 	addi	r2,r2,-128
 8046380:	10800b98 	cmpnei	r2,r2,46
 8046384:	103ff61e 	bne	r2,zero,8046360 <parse_ipad+0x210>
         cp++;             /* point past dot */
 8046388:	e0bfff17 	ldw	r2,-4(fp)
 804638c:	10800044 	addi	r2,r2,1
 8046390:	e0bfff15 	stw	r2,-4(fp)
      if (number > 255) return(toobig);
 8046394:	e0bffc17 	ldw	r2,-16(fp)
 8046398:	10804010 	cmplti	r2,r2,256
 804639c:	1000021e 	bne	r2,zero,80463a8 <parse_ipad+0x258>
 80463a0:	e0bffd17 	ldw	r2,-12(fp)
 80463a4:	00002406 	br	8046438 <parse_ipad+0x2e8>
         retval.c[2] = (u_char)number;
 80463a8:	e0bffc17 	ldw	r2,-16(fp)
 80463ac:	e0bffb85 	stb	r2,-18(fp)
   }

   if ((number = atoi(cp)) > 255)
 80463b0:	e13fff17 	ldw	r4,-4(fp)
 80463b4:	804a0e00 	call	804a0e0 <atoi>
 80463b8:	e0bffc15 	stw	r2,-16(fp)
 80463bc:	e0bffc17 	ldw	r2,-16(fp)
 80463c0:	10804010 	cmplti	r2,r2,256
 80463c4:	1000021e 	bne	r2,zero,80463d0 <parse_ipad+0x280>
      return(toobig);
 80463c8:	e0bffd17 	ldw	r2,-12(fp)
 80463cc:	00001a06 	br	8046438 <parse_ipad+0x2e8>
   retval.c[3] = (u_char)number;
 80463d0:	e0bffc17 	ldw	r2,-16(fp)
 80463d4:	e0bffbc5 	stb	r2,-17(fp)

   if (retval.c[0] < 128) *sbits = 8;
 80463d8:	e0bffb03 	ldbu	r2,-20(fp)
 80463dc:	10803fcc 	andi	r2,r2,255
 80463e0:	1080201c 	xori	r2,r2,128
 80463e4:	10bfe004 	addi	r2,r2,-128
 80463e8:	10000416 	blt	r2,zero,80463fc <parse_ipad+0x2ac>
 80463ec:	e0bff917 	ldw	r2,-28(fp)
 80463f0:	00c00204 	movi	r3,8
 80463f4:	10c00015 	stw	r3,0(r2)
 80463f8:	00000b06 	br	8046428 <parse_ipad+0x2d8>
      else if(retval.c[0] < 192) *sbits = 16;
 80463fc:	e0bffb03 	ldbu	r2,-20(fp)
 8046400:	10803fcc 	andi	r2,r2,255
 8046404:	10803028 	cmpgeui	r2,r2,192
 8046408:	1000041e 	bne	r2,zero,804641c <parse_ipad+0x2cc>
 804640c:	e0bff917 	ldw	r2,-28(fp)
 8046410:	00c00404 	movi	r3,16
 8046414:	10c00015 	stw	r3,0(r2)
 8046418:	00000306 	br	8046428 <parse_ipad+0x2d8>
      else *sbits = 24;
 804641c:	e0bff917 	ldw	r2,-28(fp)
 8046420:	00c00604 	movi	r3,24
 8046424:	10c00015 	stw	r3,0(r2)

      *ipout = retval.l;      /* everything went OK, return number */
 8046428:	e0fffb17 	ldw	r3,-20(fp)
 804642c:	e0bffa17 	ldw	r2,-24(fp)
 8046430:	10c00015 	stw	r3,0(r2)
   return(NULL);        /* return OK code (no error string) */
 8046434:	0005883a 	mov	r2,zero
}
 8046438:	e037883a 	mov	sp,fp
 804643c:	dfc00117 	ldw	ra,4(sp)
 8046440:	df000017 	ldw	fp,0(sp)
 8046444:	dec00204 	addi	sp,sp,8
 8046448:	f800283a 	ret

0804644c <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
 804644c:	defffb04 	addi	sp,sp,-20
 8046450:	dfc00415 	stw	ra,16(sp)
 8046454:	df000315 	stw	fp,12(sp)
 8046458:	df000304 	addi	fp,sp,12
 804645c:	e13ffd15 	stw	r4,-12(fp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
 8046460:	e17ffd17 	ldw	r5,-12(fp)
 8046464:	01020174 	movhi	r4,2053
 8046468:	211abe04 	addi	r4,r4,27384
 804646c:	804a50c0 	call	804a50c <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
 8046470:	e0fffe04 	addi	r3,fp,-8
 8046474:	e0bfff04 	addi	r2,fp,-4
 8046478:	01820174 	movhi	r6,2053
 804647c:	319abe04 	addi	r6,r6,27384
 8046480:	180b883a 	mov	r5,r3
 8046484:	1009883a 	mov	r4,r2
 8046488:	80461500 	call	8046150 <parse_ipad>
 804648c:	1000021e 	bne	r2,zero,8046498 <inet_addr+0x4c>
   {
      return ipaddr ;
 8046490:	e0bfff17 	ldw	r2,-4(fp)
 8046494:	00000106 	br	804649c <inet_addr+0x50>
   }
   else
   {
      return (u_long)NULL ;
 8046498:	0005883a 	mov	r2,zero
   }
}
 804649c:	e037883a 	mov	sp,fp
 80464a0:	dfc00117 	ldw	ra,4(sp)
 80464a4:	df000017 	ldw	fp,0(sp)
 80464a8:	dec00204 	addi	sp,sp,8
 80464ac:	f800283a 	ret

080464b0 <hextoa>:
 * RETURNS: character 0-9 or A-F
 */

char
hextoa(int val)
{
 80464b0:	defffe04 	addi	sp,sp,-8
 80464b4:	df000115 	stw	fp,4(sp)
 80464b8:	df000104 	addi	fp,sp,4
 80464bc:	e13fff15 	stw	r4,-4(fp)
   val &= 0x0f;
 80464c0:	e0bfff17 	ldw	r2,-4(fp)
 80464c4:	108003cc 	andi	r2,r2,15
 80464c8:	e0bfff15 	stw	r2,-4(fp)
   if(val < 10)
 80464cc:	e0bfff17 	ldw	r2,-4(fp)
 80464d0:	10800288 	cmpgei	r2,r2,10
 80464d4:	1000031e 	bne	r2,zero,80464e4 <hextoa+0x34>
      return (char)(val + '0');
 80464d8:	e0bfff17 	ldw	r2,-4(fp)
 80464dc:	10800c04 	addi	r2,r2,48
 80464e0:	00000206 	br	80464ec <hextoa+0x3c>
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
 80464e4:	e0bfff17 	ldw	r2,-4(fp)
 80464e8:	10800dc4 	addi	r2,r2,55
}
 80464ec:	e037883a 	mov	sp,fp
 80464f0:	df000017 	ldw	fp,0(sp)
 80464f4:	dec00104 	addi	sp,sp,4
 80464f8:	f800283a 	ret

080464fc <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 80464fc:	defff804 	addi	sp,sp,-32
 8046500:	dfc00715 	stw	ra,28(sp)
 8046504:	df000615 	stw	fp,24(sp)
 8046508:	df000604 	addi	fp,sp,24
 804650c:	e13ffc15 	stw	r4,-16(fp)
 8046510:	e17ffb15 	stw	r5,-20(fp)
 8046514:	e1bffa15 	stw	r6,-24(fp)
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 8046518:	e0bffc17 	ldw	r2,-16(fp)
 804651c:	10800098 	cmpnei	r2,r2,2
 8046520:	1000151e 	bne	r2,zero,8046578 <inet_pton+0x7c>
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
 8046524:	e0fffd04 	addi	r3,fp,-12
 8046528:	e0bffe04 	addi	r2,fp,-8
 804652c:	e1bffb17 	ldw	r6,-20(fp)
 8046530:	180b883a 	mov	r5,r3
 8046534:	1009883a 	mov	r4,r2
 8046538:	80461500 	call	8046150 <parse_ipad>
 804653c:	e0bfff15 	stw	r2,-4(fp)
      if(err == NULL)
 8046540:	e0bfff17 	ldw	r2,-4(fp)
 8046544:	1000071e 	bne	r2,zero,8046564 <inet_pton+0x68>
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
 8046548:	e0bffe04 	addi	r2,fp,-8
 804654c:	01800104 	movi	r6,4
 8046550:	100b883a 	mov	r5,r2
 8046554:	e13ffa17 	ldw	r4,-24(fp)
 8046558:	8002ea40 	call	8002ea4 <memcpy>
         return 0;
 804655c:	0005883a 	mov	r2,zero
 8046560:	00000606 	br	804657c <inet_pton+0x80>
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
 8046564:	00820174 	movhi	r2,2053
 8046568:	108f6f04 	addi	r2,r2,15804
 804656c:	d0a05215 	stw	r2,-32440(gp)
         return 1;
 8046570:	00800044 	movi	r2,1
 8046574:	00000106 	br	804657c <inet_pton+0x80>
      pton_error = "too short - missing colon?";
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
 8046578:	0005883a 	mov	r2,zero
}
 804657c:	e037883a 	mov	sp,fp
 8046580:	dfc00117 	ldw	ra,4(sp)
 8046584:	df000017 	ldw	fp,0(sp)
 8046588:	dec00204 	addi	sp,sp,8
 804658c:	f800283a 	ret

08046590 <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
 8046590:	defff804 	addi	sp,sp,-32
 8046594:	dfc00715 	stw	ra,28(sp)
 8046598:	df000615 	stw	fp,24(sp)
 804659c:	df000604 	addi	fp,sp,24
 80465a0:	e13ffd15 	stw	r4,-12(fp)
 80465a4:	e17ffc15 	stw	r5,-16(fp)
 80465a8:	e1bffb15 	stw	r6,-20(fp)
 80465ac:	e1fffa15 	stw	r7,-24(fp)
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
 80465b0:	e0bffd17 	ldw	r2,-12(fp)
 80465b4:	10800098 	cmpnei	r2,r2,2
 80465b8:	1000101e 	bne	r2,zero,80465fc <inet_ntop+0x6c>
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
 80465bc:	e0bffc17 	ldw	r2,-16(fp)
 80465c0:	10800017 	ldw	r2,0(r2)
 80465c4:	e0bfff15 	stw	r2,-4(fp)
      cp = print_ipad(ip4addr);
 80465c8:	e13fff17 	ldw	r4,-4(fp)
 80465cc:	8027e240 	call	8027e24 <print_ipad>
 80465d0:	e0bffe15 	stw	r2,-8(fp)
      if (strlen(cp) < size)
 80465d4:	e13ffe17 	ldw	r4,-8(fp)
 80465d8:	8003a1c0 	call	8003a1c <strlen>
 80465dc:	1007883a 	mov	r3,r2
 80465e0:	e0bffa17 	ldw	r2,-24(fp)
 80465e4:	1880052e 	bgeu	r3,r2,80465fc <inet_ntop+0x6c>
      {
         strcpy(str, cp);
 80465e8:	e17ffe17 	ldw	r5,-8(fp)
 80465ec:	e13ffb17 	ldw	r4,-20(fp)
 80465f0:	804a50c0 	call	804a50c <strcpy>
         return (str);
 80465f4:	e0bffb17 	ldw	r2,-20(fp)
 80465f8:	00000106 	br	8046600 <inet_ntop+0x70>
         return (str);
      }
   }
#endif

   return ((const char *)NULL);
 80465fc:	0005883a 	mov	r2,zero
}
 8046600:	e037883a 	mov	sp,fp
 8046604:	dfc00117 	ldw	ra,4(sp)
 8046608:	df000017 	ldw	fp,0(sp)
 804660c:	dec00204 	addi	sp,sp,8
 8046610:	f800283a 	ret

08046614 <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
 8046614:	defffc04 	addi	sp,sp,-16
 8046618:	dfc00315 	stw	ra,12(sp)
 804661c:	df000215 	stw	fp,8(sp)
 8046620:	df000204 	addi	fp,sp,8
 8046624:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr->sa_family == AF_INET)
 8046628:	e0bffe17 	ldw	r2,-8(fp)
 804662c:	1080000b 	ldhu	r2,0(r2)
 8046630:	10bfffcc 	andi	r2,r2,65535
 8046634:	10800098 	cmpnei	r2,r2,2
 8046638:	1000071e 	bne	r2,zero,8046658 <print46_addr+0x44>
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
 804663c:	e0bffe17 	ldw	r2,-8(fp)
 8046640:	e0bfff15 	stw	r2,-4(fp)
      return print_ipad(addr->sin_addr.s_addr);
 8046644:	e0bfff17 	ldw	r2,-4(fp)
 8046648:	10800117 	ldw	r2,4(r2)
 804664c:	1009883a 	mov	r4,r2
 8046650:	8027e240 	call	8027e24 <print_ipad>
 8046654:	00000106 	br	804665c <print46_addr+0x48>
      static char namebuf[46];  /* max len of IPv6 addr */
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
 8046658:	0005883a 	mov	r2,zero
}
 804665c:	e037883a 	mov	sp,fp
 8046660:	dfc00117 	ldw	ra,4(sp)
 8046664:	df000017 	ldw	fp,0(sp)
 8046668:	dec00204 	addi	sp,sp,8
 804666c:	f800283a 	ret

08046670 <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 8046670:	defffb04 	addi	sp,sp,-20
 8046674:	dfc00415 	stw	ra,16(sp)
 8046678:	df000315 	stw	fp,12(sp)
 804667c:	df000304 	addi	fp,sp,12
 8046680:	e13ffe15 	stw	r4,-8(fp)
 8046684:	e17ffd15 	stw	r5,-12(fp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
 8046688:	e0bffd17 	ldw	r2,-12(fp)
 804668c:	00c00084 	movi	r3,2
 8046690:	10c0000d 	sth	r3,0(r2)

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
 8046694:	e0bffe17 	ldw	r2,-8(fp)
 8046698:	10800044 	addi	r2,r2,1
 804669c:	10800003 	ldbu	r2,0(r2)
 80466a0:	10803fcc 	andi	r2,r2,255
 80466a4:	1080201c 	xori	r2,r2,128
 80466a8:	10bfe004 	addi	r2,r2,-128
 80466ac:	10800ba0 	cmpeqi	r2,r2,46
 80466b0:	1000101e 	bne	r2,zero,80466f4 <inet46_addr+0x84>
 80466b4:	e0bffe17 	ldw	r2,-8(fp)
 80466b8:	10800084 	addi	r2,r2,2
 80466bc:	10800003 	ldbu	r2,0(r2)
 80466c0:	10803fcc 	andi	r2,r2,255
 80466c4:	1080201c 	xori	r2,r2,128
 80466c8:	10bfe004 	addi	r2,r2,-128
 80466cc:	10800ba0 	cmpeqi	r2,r2,46
 80466d0:	1000081e 	bne	r2,zero,80466f4 <inet46_addr+0x84>
 80466d4:	e0bffe17 	ldw	r2,-8(fp)
 80466d8:	108000c4 	addi	r2,r2,3
 80466dc:	10800003 	ldbu	r2,0(r2)
 80466e0:	10803fcc 	andi	r2,r2,255
 80466e4:	1080201c 	xori	r2,r2,128
 80466e8:	10bfe004 	addi	r2,r2,-128
 80466ec:	10800b98 	cmpnei	r2,r2,46
 80466f0:	10000a1e 	bne	r2,zero,804671c <inet46_addr+0xac>
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
 80466f4:	e0bffd17 	ldw	r2,-12(fp)
 80466f8:	e0bfff15 	stw	r2,-4(fp)
      addr->sin_addr.s_addr = inet_addr(str);
 80466fc:	e13ffe17 	ldw	r4,-8(fp)
 8046700:	804644c0 	call	804644c <inet_addr>
 8046704:	1007883a 	mov	r3,r2
 8046708:	e0bfff17 	ldw	r2,-4(fp)
 804670c:	10c00115 	stw	r3,4(r2)
      addr->sin_family = AF_INET;
 8046710:	e0bfff17 	ldw	r2,-4(fp)
 8046714:	00c00084 	movi	r3,2
 8046718:	10c0000d 	sth	r3,0(r2)
      inet_pton(AF_INET6, str, &addr->sin6_addr);
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
 804671c:	0005883a 	mov	r2,zero
}
 8046720:	e037883a 	mov	sp,fp
 8046724:	dfc00117 	ldw	ra,4(sp)
 8046728:	df000017 	ldw	fp,0(sp)
 804672c:	dec00204 	addi	sp,sp,8
 8046730:	f800283a 	ret

08046734 <inet_setport>:
 *
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
 8046734:	defffc04 	addi	sp,sp,-16
 8046738:	df000315 	stw	fp,12(sp)
 804673c:	df000304 	addi	fp,sp,12
 8046740:	e13ffe15 	stw	r4,-8(fp)
 8046744:	e17ffd15 	stw	r5,-12(fp)
   if (addr->sa_family == AF_INET)
 8046748:	e0bffe17 	ldw	r2,-8(fp)
 804674c:	1080000b 	ldhu	r2,0(r2)
 8046750:	10bfffcc 	andi	r2,r2,65535
 8046754:	10800098 	cmpnei	r2,r2,2
 8046758:	10000c1e 	bne	r2,zero,804678c <inet_setport+0x58>
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
 804675c:	e0bffe17 	ldw	r2,-8(fp)
 8046760:	e0bfff15 	stw	r2,-4(fp)
      si->sin_port = htons(port);  
 8046764:	e0bffd17 	ldw	r2,-12(fp)
 8046768:	1005d23a 	srai	r2,r2,8
 804676c:	10803fcc 	andi	r2,r2,255
 8046770:	1007883a 	mov	r3,r2
 8046774:	e0bffd17 	ldw	r2,-12(fp)
 8046778:	1004923a 	slli	r2,r2,8
 804677c:	1884b03a 	or	r2,r3,r2
 8046780:	1007883a 	mov	r3,r2
 8046784:	e0bfff17 	ldw	r2,-4(fp)
 8046788:	10c0008d 	sth	r3,2(r2)
      struct sockaddr_in6 *si = (struct sockaddr_in6 *)addr;
      si->sin6_port = htons(port);
   }
#endif

}
 804678c:	0001883a 	nop
 8046790:	e037883a 	mov	sp,fp
 8046794:	df000017 	ldw	fp,0(sp)
 8046798:	dec00104 	addi	sp,sp,4
 804679c:	f800283a 	ret

080467a0 <convert_ip>:
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
 80467a0:	defff904 	addi	sp,sp,-28
 80467a4:	df000615 	stw	fp,24(sp)
 80467a8:	df000604 	addi	fp,sp,24
 80467ac:	e13ffa15 	stw	r4,-24(fp)
   const char *cp = p;
 80467b0:	e0bffa17 	ldw	r2,-24(fp)
 80467b4:	e0bfff15 	stw	r2,-4(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
 80467b8:	e0bffb04 	addi	r2,fp,-20
 80467bc:	e0bffc15 	stw	r2,-16(fp)
   int n = 0;
 80467c0:	e03ffe15 	stw	zero,-8(fp)
   unsigned short v = 0;
 80467c4:	e03ffd8d 	sth	zero,-10(fp)
   dw = 0;
 80467c8:	e03ffb15 	stw	zero,-20(fp)
   while(*cp)
 80467cc:	00003106 	br	8046894 <convert_ip+0xf4>
   {
      if( *cp == '.')
 80467d0:	e0bfff17 	ldw	r2,-4(fp)
 80467d4:	10800003 	ldbu	r2,0(r2)
 80467d8:	10803fcc 	andi	r2,r2,255
 80467dc:	1080201c 	xori	r2,r2,128
 80467e0:	10bfe004 	addi	r2,r2,-128
 80467e4:	10800b98 	cmpnei	r2,r2,46
 80467e8:	10000e1e 	bne	r2,zero,8046824 <convert_ip+0x84>
      {
         lpb[n] = (unsigned char) v;
 80467ec:	e0bffe17 	ldw	r2,-8(fp)
 80467f0:	e0fffc17 	ldw	r3,-16(fp)
 80467f4:	1885883a 	add	r2,r3,r2
 80467f8:	e0fffd8b 	ldhu	r3,-10(fp)
 80467fc:	10c00005 	stb	r3,0(r2)
         v = 0;
 8046800:	e03ffd8d 	sth	zero,-10(fp)
         n++;
 8046804:	e0bffe17 	ldw	r2,-8(fp)
 8046808:	10800044 	addi	r2,r2,1
 804680c:	e0bffe15 	stw	r2,-8(fp)
         if(n > 3)
 8046810:	e0bffe17 	ldw	r2,-8(fp)
 8046814:	10800110 	cmplti	r2,r2,4
 8046818:	10001b1e 	bne	r2,zero,8046888 <convert_ip+0xe8>
         {
            return dw;
 804681c:	e0bffb17 	ldw	r2,-20(fp)
 8046820:	00002806 	br	80468c4 <convert_ip+0x124>
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
 8046824:	e0bfff17 	ldw	r2,-4(fp)
 8046828:	10800003 	ldbu	r2,0(r2)
 804682c:	10803fcc 	andi	r2,r2,255
 8046830:	1080201c 	xori	r2,r2,128
 8046834:	10bfe004 	addi	r2,r2,-128
 8046838:	10800c10 	cmplti	r2,r2,48
 804683c:	1000121e 	bne	r2,zero,8046888 <convert_ip+0xe8>
 8046840:	e0bfff17 	ldw	r2,-4(fp)
 8046844:	10800003 	ldbu	r2,0(r2)
 8046848:	10803fcc 	andi	r2,r2,255
 804684c:	1080201c 	xori	r2,r2,128
 8046850:	10bfe004 	addi	r2,r2,-128
 8046854:	10800e88 	cmpgei	r2,r2,58
 8046858:	10000b1e 	bne	r2,zero,8046888 <convert_ip+0xe8>
      {
         v = (v * 10) + (*cp - '0');
 804685c:	e0bffd8b 	ldhu	r2,-10(fp)
 8046860:	108002a4 	muli	r2,r2,10
 8046864:	1007883a 	mov	r3,r2
 8046868:	e0bfff17 	ldw	r2,-4(fp)
 804686c:	10800003 	ldbu	r2,0(r2)
 8046870:	10803fcc 	andi	r2,r2,255
 8046874:	1080201c 	xori	r2,r2,128
 8046878:	10bfe004 	addi	r2,r2,-128
 804687c:	1885883a 	add	r2,r3,r2
 8046880:	10bff404 	addi	r2,r2,-48
 8046884:	e0bffd8d 	sth	r2,-10(fp)
      }
      cp++;
 8046888:	e0bfff17 	ldw	r2,-4(fp)
 804688c:	10800044 	addi	r2,r2,1
 8046890:	e0bfff15 	stw	r2,-4(fp)
   while(*cp)
 8046894:	e0bfff17 	ldw	r2,-4(fp)
 8046898:	10800003 	ldbu	r2,0(r2)
 804689c:	10803fcc 	andi	r2,r2,255
 80468a0:	1080201c 	xori	r2,r2,128
 80468a4:	10bfe004 	addi	r2,r2,-128
 80468a8:	103fc91e 	bne	r2,zero,80467d0 <convert_ip+0x30>
   }
   lpb[n] = (unsigned char) v;
 80468ac:	e0bffe17 	ldw	r2,-8(fp)
 80468b0:	e0fffc17 	ldw	r3,-16(fp)
 80468b4:	1885883a 	add	r2,r3,r2
 80468b8:	e0fffd8b 	ldhu	r3,-10(fp)
 80468bc:	10c00005 	stb	r3,0(r2)
   return dw;
 80468c0:	e0bffb17 	ldw	r2,-20(fp)
}  /* convert_ip() */
 80468c4:	e037883a 	mov	sp,fp
 80468c8:	df000017 	ldw	fp,0(sp)
 80468cc:	dec00104 	addi	sp,sp,4
 80468d0:	f800283a 	ret

080468d4 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 80468d4:	defff704 	addi	sp,sp,-36
 80468d8:	dfc00815 	stw	ra,32(sp)
 80468dc:	df000715 	stw	fp,28(sp)
 80468e0:	df000704 	addi	fp,sp,28
 80468e4:	e13ff915 	stw	r4,-28(fp)
   unshort  oldsum;
   unshort  newsum;
   struct tcphdr * tp;

#ifdef MUTE_WARNS    /* stifle compiler warnings */
   tcpdata = (char *)NULL;
 80468e8:	e03ffe15 	stw	zero,-8(fp)
#endif   /* MUTE_WARNS */

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;
 80468ec:	e03ffdc5 	stb	zero,-9(fp)

   iphlen = (unshort)ip_hlen(pip);
 80468f0:	e0bff917 	ldw	r2,-28(fp)
 80468f4:	10800003 	ldbu	r2,0(r2)
 80468f8:	10803fcc 	andi	r2,r2,255
 80468fc:	100490ba 	slli	r2,r2,2
 8046900:	10800f0c 	andi	r2,r2,60
 8046904:	e0bffc8d 	sth	r2,-14(fp)
   tcplen = htons(pip->ip_len) - iphlen;
 8046908:	e0bff917 	ldw	r2,-28(fp)
 804690c:	1080008b 	ldhu	r2,2(r2)
 8046910:	10bfffcc 	andi	r2,r2,65535
 8046914:	1004d23a 	srli	r2,r2,8
 8046918:	1007883a 	mov	r3,r2
 804691c:	e0bff917 	ldw	r2,-28(fp)
 8046920:	1080008b 	ldhu	r2,2(r2)
 8046924:	10bfffcc 	andi	r2,r2,65535
 8046928:	1004923a 	slli	r2,r2,8
 804692c:	1884b03a 	or	r2,r3,r2
 8046930:	1007883a 	mov	r3,r2
 8046934:	e0bffc8b 	ldhu	r2,-14(fp)
 8046938:	1885c83a 	sub	r2,r3,r2
 804693c:	e0bfff8d 	sth	r2,-2(fp)

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
 8046940:	e0bff917 	ldw	r2,-28(fp)
 8046944:	10800003 	ldbu	r2,0(r2)
 8046948:	10803fcc 	andi	r2,r2,255
 804694c:	100490ba 	slli	r2,r2,2
 8046950:	10800f0c 	andi	r2,r2,60
 8046954:	e0fff917 	ldw	r3,-28(fp)
 8046958:	1885883a 	add	r2,r3,r2
 804695c:	e0bffb15 	stw	r2,-20(fp)
   oldsum = tp->th_sum;       /* Save passed checksum */
 8046960:	e0bffb17 	ldw	r2,-20(fp)
 8046964:	1080040b 	ldhu	r2,16(r2)
 8046968:	e0bffa8d 	sth	r2,-22(fp)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 804696c:	e0bfff8b 	ldhu	r2,-2(fp)
 8046970:	10800184 	addi	r2,r2,6
 8046974:	1005d23a 	srai	r2,r2,8
 8046978:	10803fcc 	andi	r2,r2,255
 804697c:	1007883a 	mov	r3,r2
 8046980:	e0bfff8b 	ldhu	r2,-2(fp)
 8046984:	10800184 	addi	r2,r2,6
 8046988:	1004923a 	slli	r2,r2,8
 804698c:	1884b03a 	or	r2,r3,r2
 8046990:	1007883a 	mov	r3,r2
 8046994:	e0bffb17 	ldw	r2,-20(fp)
 8046998:	10c0040d 	sth	r3,16(r2)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
 804699c:	e0bfff8b 	ldhu	r2,-2(fp)
 80469a0:	1080004c 	andi	r2,r2,1
 80469a4:	10000e26 	beq	r2,zero,80469e0 <tcp_cksum+0x10c>
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
 80469a8:	e0fffc8b 	ldhu	r3,-14(fp)
 80469ac:	e0bfff8b 	ldhu	r2,-2(fp)
 80469b0:	1885883a 	add	r2,r3,r2
 80469b4:	e0fff917 	ldw	r3,-28(fp)
 80469b8:	1885883a 	add	r2,r3,r2
 80469bc:	e0bffe15 	stw	r2,-8(fp)
      oddchar = *tcpdata;
 80469c0:	e0bffe17 	ldw	r2,-8(fp)
 80469c4:	10800003 	ldbu	r2,0(r2)
 80469c8:	e0bffdc5 	stb	r2,-9(fp)
      *tcpdata = '\0';        /* zero out pad byte */
 80469cc:	e0bffe17 	ldw	r2,-8(fp)
 80469d0:	10000005 	stb	zero,0(r2)
      tcplen++;               /* bump length to pass to cksum() */
 80469d4:	e0bfff8b 	ldhu	r2,-2(fp)
 80469d8:	10800044 	addi	r2,r2,1
 80469dc:	e0bfff8d 	sth	r2,-2(fp)

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
 80469e0:	e0bffb17 	ldw	r2,-20(fp)
 80469e4:	10fffe04 	addi	r3,r2,-8
 80469e8:	e0bfff8b 	ldhu	r2,-2(fp)
 80469ec:	10800204 	addi	r2,r2,8
 80469f0:	1005d07a 	srai	r2,r2,1
 80469f4:	100b883a 	mov	r5,r2
 80469f8:	1809883a 	mov	r4,r3
 80469fc:	8027be00 	call	8027be0 <cksum>
 8046a00:	0084303a 	nor	r2,zero,r2
 8046a04:	e0bffd0d 	sth	r2,-12(fp)

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
 8046a08:	e0fffd0b 	ldhu	r3,-12(fp)
 8046a0c:	e0bffa8b 	ldhu	r2,-22(fp)
 8046a10:	18800726 	beq	r3,r2,8046a30 <tcp_cksum+0x15c>
 8046a14:	e0fffa8b 	ldhu	r3,-22(fp)
 8046a18:	00bfffd4 	movui	r2,65535
 8046a1c:	1880041e 	bne	r3,r2,8046a30 <tcp_cksum+0x15c>
 8046a20:	e0bffd0b 	ldhu	r2,-12(fp)
 8046a24:	1000021e 	bne	r2,zero,8046a30 <tcp_cksum+0x15c>
      newsum = 0xffff;
 8046a28:	00bfffc4 	movi	r2,-1
 8046a2c:	e0bffd0d 	sth	r2,-12(fp)

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
 8046a30:	e0bffb17 	ldw	r2,-20(fp)
 8046a34:	e0fffa8b 	ldhu	r3,-22(fp)
 8046a38:	10c0040d 	sth	r3,16(r2)
   if (oddchar)
 8046a3c:	e0bffdc7 	ldb	r2,-9(fp)
 8046a40:	10000326 	beq	r2,zero,8046a50 <tcp_cksum+0x17c>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
 8046a44:	e0bffe17 	ldw	r2,-8(fp)
 8046a48:	e0fffdc3 	ldbu	r3,-9(fp)
 8046a4c:	10c00005 	stb	r3,0(r2)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
 8046a50:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8046a54:	e037883a 	mov	sp,fp
 8046a58:	dfc00117 	ldw	ra,4(sp)
 8046a5c:	df000017 	ldw	fp,0(sp)
 8046a60:	dec00204 	addi	sp,sp,8
 8046a64:	f800283a 	ret

08046a68 <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
 8046a68:	defffb04 	addi	sp,sp,-20
 8046a6c:	dfc00415 	stw	ra,16(sp)
 8046a70:	df000315 	stw	fp,12(sp)
 8046a74:	df000304 	addi	fp,sp,12
 8046a78:	e13ffe15 	stw	r4,-8(fp)
 8046a7c:	e17ffd15 	stw	r5,-12(fp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
 8046a80:	01000b04 	movi	r4,44
 8046a84:	802cf5c0 	call	802cf5c <npalloc>
 8046a88:	e0bfff15 	stw	r2,-4(fp)
   if (inp == 0)
 8046a8c:	e0bfff17 	ldw	r2,-4(fp)
 8046a90:	1000021e 	bne	r2,zero,8046a9c <in_pcballoc+0x34>
      return ENOMEM;
 8046a94:	00800304 	movi	r2,12
 8046a98:	00001006 	br	8046adc <in_pcballoc+0x74>
   inp->inp_head = head;
 8046a9c:	e0bfff17 	ldw	r2,-4(fp)
 8046aa0:	e0fffd17 	ldw	r3,-12(fp)
 8046aa4:	10c00215 	stw	r3,8(r2)
   inp->inp_socket = so;
 8046aa8:	e0bfff17 	ldw	r2,-4(fp)
 8046aac:	e0fffe17 	ldw	r3,-8(fp)
 8046ab0:	10c00815 	stw	r3,32(r2)

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
 8046ab4:	e0bfff17 	ldw	r2,-4(fp)
 8046ab8:	00c08004 	movi	r3,512
 8046abc:	10c00615 	stw	r3,24(r2)
   insque(inp, head);
 8046ac0:	e17ffd17 	ldw	r5,-12(fp)
 8046ac4:	e13fff17 	ldw	r4,-4(fp)
 8046ac8:	802da700 	call	802da70 <insque>
   so->so_pcb = inp;
 8046acc:	e0bffe17 	ldw	r2,-8(fp)
 8046ad0:	e0ffff17 	ldw	r3,-4(fp)
 8046ad4:	10c00115 	stw	r3,4(r2)
   return 0;
 8046ad8:	0005883a 	mov	r2,zero
}
 8046adc:	e037883a 	mov	sp,fp
 8046ae0:	dfc00117 	ldw	ra,4(sp)
 8046ae4:	df000017 	ldw	fp,0(sp)
 8046ae8:	dec00204 	addi	sp,sp,8
 8046aec:	f800283a 	ret

08046af0 <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
 8046af0:	defffc04 	addi	sp,sp,-16
 8046af4:	dfc00315 	stw	ra,12(sp)
 8046af8:	df000215 	stw	fp,8(sp)
 8046afc:	df000204 	addi	fp,sp,8
 8046b00:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so =  inp->inp_socket;
 8046b04:	e0bffe17 	ldw	r2,-8(fp)
 8046b08:	10800817 	ldw	r2,32(r2)
 8046b0c:	e0bfff15 	stw	r2,-4(fp)

   so->so_pcb = 0;
 8046b10:	e0bfff17 	ldw	r2,-4(fp)
 8046b14:	10000115 	stw	zero,4(r2)
   sofree(so);
 8046b18:	e13fff17 	ldw	r4,-4(fp)
 8046b1c:	8030a6c0 	call	8030a6c <sofree>
   remque(inp);
 8046b20:	e13ffe17 	ldw	r4,-8(fp)
 8046b24:	802da000 	call	802da00 <remque>
   INP_FREE (inp);
 8046b28:	e13ffe17 	ldw	r4,-8(fp)
 8046b2c:	802cf900 	call	802cf90 <npfree>
}
 8046b30:	0001883a 	nop
 8046b34:	e037883a 	mov	sp,fp
 8046b38:	dfc00117 	ldw	ra,4(sp)
 8046b3c:	df000017 	ldw	fp,0(sp)
 8046b40:	dec00204 	addi	sp,sp,8
 8046b44:	f800283a 	ret

08046b48 <in_pcbbind>:

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 8046b48:	defff504 	addi	sp,sp,-44
 8046b4c:	dfc00a15 	stw	ra,40(sp)
 8046b50:	df000915 	stw	fp,36(sp)
 8046b54:	df000904 	addi	fp,sp,36
 8046b58:	e13ffa15 	stw	r4,-24(fp)
 8046b5c:	e17ff915 	stw	r5,-28(fp)
   struct socket *   so =  inp->inp_socket;
 8046b60:	e0bffa17 	ldw	r2,-24(fp)
 8046b64:	10800817 	ldw	r2,32(r2)
 8046b68:	e0bffd15 	stw	r2,-12(fp)
   struct inpcb * head  =  inp->inp_head;
 8046b6c:	e0bffa17 	ldw	r2,-24(fp)
 8046b70:	10800217 	ldw	r2,8(r2)
 8046b74:	e0bffc15 	stw	r2,-16(fp)
   struct sockaddr_in * sin;
   u_short  lport =  0;
 8046b78:	e03fff8d 	sth	zero,-2(fp)


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
 8046b7c:	e0bffa17 	ldw	r2,-24(fp)
 8046b80:	1080078b 	ldhu	r2,30(r2)
 8046b84:	10bfffcc 	andi	r2,r2,65535
 8046b88:	1000031e 	bne	r2,zero,8046b98 <in_pcbbind+0x50>
 8046b8c:	e0bffa17 	ldw	r2,-24(fp)
 8046b90:	10800417 	ldw	r2,16(r2)
 8046b94:	10000226 	beq	r2,zero,8046ba0 <in_pcbbind+0x58>
      return (EINVAL);
 8046b98:	00800584 	movi	r2,22
 8046b9c:	00006906 	br	8046d44 <in_pcbbind+0x1fc>
   if (nam == 0)
 8046ba0:	e0bff917 	ldw	r2,-28(fp)
 8046ba4:	10003926 	beq	r2,zero,8046c8c <in_pcbbind+0x144>
      goto noname;
   sin = mtod(nam, struct sockaddr_in *);
 8046ba8:	e0bff917 	ldw	r2,-28(fp)
 8046bac:	10800317 	ldw	r2,12(r2)
 8046bb0:	e0bffb15 	stw	r2,-20(fp)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
 8046bb4:	e0bffb17 	ldw	r2,-20(fp)
 8046bb8:	10800117 	ldw	r2,4(r2)
 8046bbc:	10000a26 	beq	r2,zero,8046be8 <in_pcbbind+0xa0>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
 8046bc0:	e0bffb17 	ldw	r2,-20(fp)
 8046bc4:	10800117 	ldw	r2,4(r2)
 8046bc8:	1009883a 	mov	r4,r2
 8046bcc:	803f9600 	call	803f960 <ip_mymach>
 8046bd0:	1007883a 	mov	r3,r2
 8046bd4:	e0bffb17 	ldw	r2,-20(fp)
 8046bd8:	10800117 	ldw	r2,4(r2)
 8046bdc:	18800226 	beq	r3,r2,8046be8 <in_pcbbind+0xa0>
      return (EADDRNOTAVAIL);
 8046be0:	00801f44 	movi	r2,125
 8046be4:	00005706 	br	8046d44 <in_pcbbind+0x1fc>
   }
   lport = sin->sin_port;
 8046be8:	e0bffb17 	ldw	r2,-20(fp)
 8046bec:	1080008b 	ldhu	r2,2(r2)
 8046bf0:	e0bfff8d 	sth	r2,-2(fp)
   if (lport) 
 8046bf4:	e0bfff8b 	ldhu	r2,-2(fp)
 8046bf8:	10001f26 	beq	r2,zero,8046c78 <in_pcbbind+0x130>
   {
      int   wild  =  0;
 8046bfc:	e03ffe15 	stw	zero,-8(fp)

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 8046c00:	e0bffd17 	ldw	r2,-12(fp)
 8046c04:	10800417 	ldw	r2,16(r2)
 8046c08:	1080010c 	andi	r2,r2,4
 8046c0c:	10000c1e 	bne	r2,zero,8046c40 <in_pcbbind+0xf8>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
 8046c10:	e0bffd17 	ldw	r2,-12(fp)
 8046c14:	10800217 	ldw	r2,8(r2)
 8046c18:	1080010b 	ldhu	r2,4(r2)
 8046c1c:	10bfffcc 	andi	r2,r2,65535
 8046c20:	1080010c 	andi	r2,r2,4
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 8046c24:	10000426 	beq	r2,zero,8046c38 <in_pcbbind+0xf0>
          (so->so_options & SO_ACCEPTCONN) == 0))
 8046c28:	e0bffd17 	ldw	r2,-12(fp)
 8046c2c:	10800417 	ldw	r2,16(r2)
 8046c30:	1080008c 	andi	r2,r2,2
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
 8046c34:	1000021e 	bne	r2,zero,8046c40 <in_pcbbind+0xf8>
      {
         wild = INPLOOKUP_WILDCARD;
 8046c38:	00800044 	movi	r2,1
 8046c3c:	e0bffe15 	stw	r2,-8(fp)
      }
      if (in_pcblookup(head,
 8046c40:	e0bffb17 	ldw	r2,-20(fp)
 8046c44:	11000117 	ldw	r4,4(r2)
 8046c48:	e0bfff8b 	ldhu	r2,-2(fp)
 8046c4c:	e0fffe17 	ldw	r3,-8(fp)
 8046c50:	d8c00115 	stw	r3,4(sp)
 8046c54:	d8800015 	stw	r2,0(sp)
 8046c58:	200f883a 	mov	r7,r4
 8046c5c:	000d883a 	mov	r6,zero
 8046c60:	000b883a 	mov	r5,zero
 8046c64:	e13ffc17 	ldw	r4,-16(fp)
 8046c68:	804709c0 	call	804709c <in_pcblookup>
 8046c6c:	10000226 	beq	r2,zero,8046c78 <in_pcbbind+0x130>
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
 8046c70:	00801c04 	movi	r2,112
 8046c74:	00003306 	br	8046d44 <in_pcbbind+0x1fc>
      }
   }
   inp->inp_laddr = sin->sin_addr;
 8046c78:	e0bffa17 	ldw	r2,-24(fp)
 8046c7c:	e0fffb17 	ldw	r3,-20(fp)
 8046c80:	18c00117 	ldw	r3,4(r3)
 8046c84:	10c00415 	stw	r3,16(r2)
 8046c88:	00000106 	br	8046c90 <in_pcbbind+0x148>
      goto noname;
 8046c8c:	0001883a 	nop
noname:
   if (lport == 0)
 8046c90:	e0bfff8b 	ldhu	r2,-2(fp)
 8046c94:	1000271e 	bne	r2,zero,8046d34 <in_pcbbind+0x1ec>
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 8046c98:	e0bffc17 	ldw	r2,-16(fp)
 8046c9c:	1080078b 	ldhu	r2,30(r2)
 8046ca0:	10c00044 	addi	r3,r2,1
 8046ca4:	1809883a 	mov	r4,r3
 8046ca8:	e0fffc17 	ldw	r3,-16(fp)
 8046cac:	1900078d 	sth	r4,30(r3)
 8046cb0:	10bfffcc 	andi	r2,r2,65535
 8046cb4:	10810030 	cmpltui	r2,r2,1024
 8046cb8:	1000051e 	bne	r2,zero,8046cd0 <in_pcbbind+0x188>
             head->inp_lport > IPPORT_USERRESERVED)
 8046cbc:	e0bffc17 	ldw	r2,-16(fp)
 8046cc0:	1080078b 	ldhu	r2,30(r2)
         if (head->inp_lport++ < IPPORT_RESERVED ||
 8046cc4:	10bfffcc 	andi	r2,r2,65535
 8046cc8:	1084e270 	cmpltui	r2,r2,5001
 8046ccc:	1000031e 	bne	r2,zero,8046cdc <in_pcbbind+0x194>
         {
            head->inp_lport = IPPORT_RESERVED;
 8046cd0:	e0bffc17 	ldw	r2,-16(fp)
 8046cd4:	00c10004 	movi	r3,1024
 8046cd8:	10c0078d 	sth	r3,30(r2)
         }
         lport = htons(head->inp_lport);
 8046cdc:	e0bffc17 	ldw	r2,-16(fp)
 8046ce0:	1080078b 	ldhu	r2,30(r2)
 8046ce4:	10bfffcc 	andi	r2,r2,65535
 8046ce8:	1004d23a 	srli	r2,r2,8
 8046cec:	1007883a 	mov	r3,r2
 8046cf0:	e0bffc17 	ldw	r2,-16(fp)
 8046cf4:	1080078b 	ldhu	r2,30(r2)
 8046cf8:	10bfffcc 	andi	r2,r2,65535
 8046cfc:	1004923a 	slli	r2,r2,8
 8046d00:	1884b03a 	or	r2,r3,r2
 8046d04:	e0bfff8d 	sth	r2,-2(fp)
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 8046d08:	e0bffa17 	ldw	r2,-24(fp)
 8046d0c:	10c00417 	ldw	r3,16(r2)
 8046d10:	e0bfff8b 	ldhu	r2,-2(fp)
 8046d14:	d8000115 	stw	zero,4(sp)
 8046d18:	d8800015 	stw	r2,0(sp)
 8046d1c:	180f883a 	mov	r7,r3
 8046d20:	000d883a 	mov	r6,zero
 8046d24:	000b883a 	mov	r5,zero
 8046d28:	e13ffc17 	ldw	r4,-16(fp)
 8046d2c:	804709c0 	call	804709c <in_pcblookup>
 8046d30:	103fd91e 	bne	r2,zero,8046c98 <in_pcbbind+0x150>
   }
   inp->inp_lport = lport;
 8046d34:	e0bffa17 	ldw	r2,-24(fp)
 8046d38:	e0ffff8b 	ldhu	r3,-2(fp)
 8046d3c:	10c0078d 	sth	r3,30(r2)
   return (0);
 8046d40:	0005883a 	mov	r2,zero
}
 8046d44:	e037883a 	mov	sp,fp
 8046d48:	dfc00117 	ldw	ra,4(sp)
 8046d4c:	df000017 	ldw	fp,0(sp)
 8046d50:	dec00204 	addi	sp,sp,8
 8046d54:	f800283a 	ret

08046d58 <in_pcbconnect>:
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
 8046d58:	defff604 	addi	sp,sp,-40
 8046d5c:	dfc00915 	stw	ra,36(sp)
 8046d60:	df000815 	stw	fp,32(sp)
 8046d64:	df000804 	addi	fp,sp,32
 8046d68:	e13ffb15 	stw	r4,-20(fp)
 8046d6c:	e17ffa15 	stw	r5,-24(fp)
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 8046d70:	e0bffa17 	ldw	r2,-24(fp)
 8046d74:	10800317 	ldw	r2,12(r2)
 8046d78:	e0bffe15 	stw	r2,-8(fp)

   if (nam->m_len < sizeof (*sin))
 8046d7c:	e0bffa17 	ldw	r2,-24(fp)
 8046d80:	10800217 	ldw	r2,8(r2)
 8046d84:	10800428 	cmpgeui	r2,r2,16
 8046d88:	1000021e 	bne	r2,zero,8046d94 <in_pcbconnect+0x3c>
      return (EINVAL);
 8046d8c:	00800584 	movi	r2,22
 8046d90:	00006406 	br	8046f24 <in_pcbconnect+0x1cc>
   if (sin->sin_family != AF_INET)
 8046d94:	e0bffe17 	ldw	r2,-8(fp)
 8046d98:	1080000b 	ldhu	r2,0(r2)
 8046d9c:	10bfffcc 	andi	r2,r2,65535
 8046da0:	10a0001c 	xori	r2,r2,32768
 8046da4:	10a00004 	addi	r2,r2,-32768
 8046da8:	108000a0 	cmpeqi	r2,r2,2
 8046dac:	1000021e 	bne	r2,zero,8046db8 <in_pcbconnect+0x60>
      return (EAFNOSUPPORT);
 8046db0:	00801a84 	movi	r2,106
 8046db4:	00005b06 	br	8046f24 <in_pcbconnect+0x1cc>
   if (sin->sin_port == 0)
 8046db8:	e0bffe17 	ldw	r2,-8(fp)
 8046dbc:	1080008b 	ldhu	r2,2(r2)
 8046dc0:	10bfffcc 	andi	r2,r2,65535
 8046dc4:	1000021e 	bne	r2,zero,8046dd0 <in_pcbconnect+0x78>
      return (EADDRNOTAVAIL);
 8046dc8:	00801f44 	movi	r2,125
 8046dcc:	00005506 	br	8046f24 <in_pcbconnect+0x1cc>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
 8046dd0:	e0bffe17 	ldw	r2,-8(fp)
 8046dd4:	10800117 	ldw	r2,4(r2)
 8046dd8:	10000d1e 	bne	r2,zero,8046e10 <in_pcbconnect+0xb8>
   {
      if (inp && inp->ifp)
 8046ddc:	e0bffb17 	ldw	r2,-20(fp)
 8046de0:	10000926 	beq	r2,zero,8046e08 <in_pcbconnect+0xb0>
 8046de4:	e0bffb17 	ldw	r2,-20(fp)
 8046de8:	10800a17 	ldw	r2,40(r2)
 8046dec:	10000626 	beq	r2,zero,8046e08 <in_pcbconnect+0xb0>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
 8046df0:	e0bffb17 	ldw	r2,-20(fp)
 8046df4:	10800a17 	ldw	r2,40(r2)
 8046df8:	10c00a17 	ldw	r3,40(r2)
 8046dfc:	e0bffe17 	ldw	r2,-8(fp)
 8046e00:	10c00115 	stw	r3,4(r2)
 8046e04:	00000806 	br	8046e28 <in_pcbconnect+0xd0>
      else
         return (EADDRNOTAVAIL);
 8046e08:	00801f44 	movi	r2,125
 8046e0c:	00004506 	br	8046f24 <in_pcbconnect+0x1cc>
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
 8046e10:	e0bffe17 	ldw	r2,-8(fp)
 8046e14:	10800117 	ldw	r2,4(r2)
 8046e18:	10bfffd8 	cmpnei	r2,r2,-1
 8046e1c:	1000021e 	bne	r2,zero,8046e28 <in_pcbconnect+0xd0>
      return (EADDRNOTAVAIL);
 8046e20:	00801f44 	movi	r2,125
 8046e24:	00003f06 	br	8046f24 <in_pcbconnect+0x1cc>


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 8046e28:	e0bffb17 	ldw	r2,-20(fp)
 8046e2c:	10800417 	ldw	r2,16(r2)
 8046e30:	10000f1e 	bne	r2,zero,8046e70 <in_pcbconnect+0x118>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
 8046e34:	e0bffe17 	ldw	r2,-8(fp)
 8046e38:	10800117 	ldw	r2,4(r2)
 8046e3c:	e0fffc04 	addi	r3,fp,-16
 8046e40:	180b883a 	mov	r5,r3
 8046e44:	1009883a 	mov	r4,r2
 8046e48:	803fca80 	call	803fca8 <iproute>
 8046e4c:	e0bffd15 	stw	r2,-12(fp)
      if (!npnet)
 8046e50:	e0bffd17 	ldw	r2,-12(fp)
 8046e54:	1000021e 	bne	r2,zero,8046e60 <in_pcbconnect+0x108>
         return EADDRNOTAVAIL;
 8046e58:	00801f44 	movi	r2,125
 8046e5c:	00003106 	br	8046f24 <in_pcbconnect+0x1cc>
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
 8046e60:	e0bffd17 	ldw	r2,-12(fp)
 8046e64:	10800a17 	ldw	r2,40(r2)
 8046e68:	e0bfff15 	stw	r2,-4(fp)
 8046e6c:	00000306 	br	8046e7c <in_pcbconnect+0x124>
#else    /* not netport MULTI_HOMED, use 0th (only) iface */
      ifaddr = nets[0]->n_ipaddr;
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */
 8046e70:	e0bffb17 	ldw	r2,-20(fp)
 8046e74:	10800417 	ldw	r2,16(r2)
 8046e78:	e0bfff15 	stw	r2,-4(fp)

   if (in_pcblookup(inp->inp_head,
 8046e7c:	e0bffb17 	ldw	r2,-20(fp)
 8046e80:	10c00217 	ldw	r3,8(r2)
 8046e84:	e0bffe17 	ldw	r2,-8(fp)
 8046e88:	11000117 	ldw	r4,4(r2)
       sin->sin_addr.s_addr,
       sin->sin_port,
 8046e8c:	e0bffe17 	ldw	r2,-8(fp)
 8046e90:	1080008b 	ldhu	r2,2(r2)
   if (in_pcblookup(inp->inp_head,
 8046e94:	117fffcc 	andi	r5,r2,65535
       ifaddr,
       inp->inp_lport,
 8046e98:	e0bffb17 	ldw	r2,-20(fp)
 8046e9c:	1080078b 	ldhu	r2,30(r2)
   if (in_pcblookup(inp->inp_head,
 8046ea0:	10bfffcc 	andi	r2,r2,65535
 8046ea4:	d8000115 	stw	zero,4(sp)
 8046ea8:	d8800015 	stw	r2,0(sp)
 8046eac:	e1ffff17 	ldw	r7,-4(fp)
 8046eb0:	280d883a 	mov	r6,r5
 8046eb4:	200b883a 	mov	r5,r4
 8046eb8:	1809883a 	mov	r4,r3
 8046ebc:	804709c0 	call	804709c <in_pcblookup>
 8046ec0:	10000226 	beq	r2,zero,8046ecc <in_pcbconnect+0x174>
       0))
   {
      return (EADDRINUSE);
 8046ec4:	00801c04 	movi	r2,112
 8046ec8:	00001606 	br	8046f24 <in_pcbconnect+0x1cc>
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 8046ecc:	e0bffb17 	ldw	r2,-20(fp)
 8046ed0:	10800417 	ldw	r2,16(r2)
 8046ed4:	10000a1e 	bne	r2,zero,8046f00 <in_pcbconnect+0x1a8>
   {
      if (inp->inp_lport == 0)
 8046ed8:	e0bffb17 	ldw	r2,-20(fp)
 8046edc:	1080078b 	ldhu	r2,30(r2)
 8046ee0:	10bfffcc 	andi	r2,r2,65535
 8046ee4:	1000031e 	bne	r2,zero,8046ef4 <in_pcbconnect+0x19c>
         (void)in_pcbbind(inp, (struct mbuf *)0);
 8046ee8:	000b883a 	mov	r5,zero
 8046eec:	e13ffb17 	ldw	r4,-20(fp)
 8046ef0:	8046b480 	call	8046b48 <in_pcbbind>
      inp->inp_laddr.s_addr = ifaddr;
 8046ef4:	e0bffb17 	ldw	r2,-20(fp)
 8046ef8:	e0ffff17 	ldw	r3,-4(fp)
 8046efc:	10c00415 	stw	r3,16(r2)
   }
   inp->inp_faddr = sin->sin_addr;
 8046f00:	e0bffb17 	ldw	r2,-20(fp)
 8046f04:	e0fffe17 	ldw	r3,-8(fp)
 8046f08:	18c00117 	ldw	r3,4(r3)
 8046f0c:	10c00315 	stw	r3,12(r2)
   inp->inp_fport = sin->sin_port;
 8046f10:	e0bffe17 	ldw	r2,-8(fp)
 8046f14:	10c0008b 	ldhu	r3,2(r2)
 8046f18:	e0bffb17 	ldw	r2,-20(fp)
 8046f1c:	10c0070d 	sth	r3,28(r2)
   return 0;
 8046f20:	0005883a 	mov	r2,zero
}
 8046f24:	e037883a 	mov	sp,fp
 8046f28:	dfc00117 	ldw	ra,4(sp)
 8046f2c:	df000017 	ldw	fp,0(sp)
 8046f30:	dec00204 	addi	sp,sp,8
 8046f34:	f800283a 	ret

08046f38 <in_pcbdisconnect>:
 * RETURNS: 
 */

void
in_pcbdisconnect(struct inpcb * inp)
{
 8046f38:	defffd04 	addi	sp,sp,-12
 8046f3c:	dfc00215 	stw	ra,8(sp)
 8046f40:	df000115 	stw	fp,4(sp)
 8046f44:	df000104 	addi	fp,sp,4
 8046f48:	e13fff15 	stw	r4,-4(fp)

   inp->inp_faddr.s_addr = INADDR_ANY;
 8046f4c:	e0bfff17 	ldw	r2,-4(fp)
 8046f50:	10000315 	stw	zero,12(r2)
   inp->inp_fport = 0;
 8046f54:	e0bfff17 	ldw	r2,-4(fp)
 8046f58:	1000070d 	sth	zero,28(r2)
   if (inp->inp_socket->so_state & SS_NOFDREF)
 8046f5c:	e0bfff17 	ldw	r2,-4(fp)
 8046f60:	10800817 	ldw	r2,32(r2)
 8046f64:	1080088b 	ldhu	r2,34(r2)
 8046f68:	10bfffcc 	andi	r2,r2,65535
 8046f6c:	1080004c 	andi	r2,r2,1
 8046f70:	10000226 	beq	r2,zero,8046f7c <in_pcbdisconnect+0x44>
      in_pcbdetach (inp);
 8046f74:	e13fff17 	ldw	r4,-4(fp)
 8046f78:	8046af00 	call	8046af0 <in_pcbdetach>
}
 8046f7c:	0001883a 	nop
 8046f80:	e037883a 	mov	sp,fp
 8046f84:	dfc00117 	ldw	ra,4(sp)
 8046f88:	df000017 	ldw	fp,0(sp)
 8046f8c:	dec00204 	addi	sp,sp,8
 8046f90:	f800283a 	ret

08046f94 <in_setsockaddr>:
 */

void
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
 8046f94:	defffb04 	addi	sp,sp,-20
 8046f98:	dfc00415 	stw	ra,16(sp)
 8046f9c:	df000315 	stw	fp,12(sp)
 8046fa0:	df000304 	addi	fp,sp,12
 8046fa4:	e13ffe15 	stw	r4,-8(fp)
 8046fa8:	e17ffd15 	stw	r5,-12(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 8046fac:	e0bffd17 	ldw	r2,-12(fp)
 8046fb0:	00c00404 	movi	r3,16
 8046fb4:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
 8046fb8:	e0bffd17 	ldw	r2,-12(fp)
 8046fbc:	10800317 	ldw	r2,12(r2)
 8046fc0:	e0bfff15 	stw	r2,-4(fp)
   MEMSET(sin, 0, sizeof (*sin));
 8046fc4:	01800404 	movi	r6,16
 8046fc8:	000b883a 	mov	r5,zero
 8046fcc:	e13fff17 	ldw	r4,-4(fp)
 8046fd0:	8002fa40 	call	8002fa4 <memset>
   sin->sin_family = AF_INET;
 8046fd4:	e0bfff17 	ldw	r2,-4(fp)
 8046fd8:	00c00084 	movi	r3,2
 8046fdc:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_lport;
 8046fe0:	e0bffe17 	ldw	r2,-8(fp)
 8046fe4:	10c0078b 	ldhu	r3,30(r2)
 8046fe8:	e0bfff17 	ldw	r2,-4(fp)
 8046fec:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_laddr;
 8046ff0:	e0bfff17 	ldw	r2,-4(fp)
 8046ff4:	e0fffe17 	ldw	r3,-8(fp)
 8046ff8:	18c00417 	ldw	r3,16(r3)
 8046ffc:	10c00115 	stw	r3,4(r2)
}
 8047000:	0001883a 	nop
 8047004:	e037883a 	mov	sp,fp
 8047008:	dfc00117 	ldw	ra,4(sp)
 804700c:	df000017 	ldw	fp,0(sp)
 8047010:	dec00204 	addi	sp,sp,8
 8047014:	f800283a 	ret

08047018 <in_setpeeraddr>:

void
in_setpeeraddr(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 8047018:	defffb04 	addi	sp,sp,-20
 804701c:	dfc00415 	stw	ra,16(sp)
 8047020:	df000315 	stw	fp,12(sp)
 8047024:	df000304 	addi	fp,sp,12
 8047028:	e13ffe15 	stw	r4,-8(fp)
 804702c:	e17ffd15 	stw	r5,-12(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 8047030:	e0bffd17 	ldw	r2,-12(fp)
 8047034:	00c00404 	movi	r3,16
 8047038:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
 804703c:	e0bffd17 	ldw	r2,-12(fp)
 8047040:	10800317 	ldw	r2,12(r2)
 8047044:	e0bfff15 	stw	r2,-4(fp)
   MEMSET(sin, 0, sizeof (*sin));
 8047048:	01800404 	movi	r6,16
 804704c:	000b883a 	mov	r5,zero
 8047050:	e13fff17 	ldw	r4,-4(fp)
 8047054:	8002fa40 	call	8002fa4 <memset>
   sin->sin_family = AF_INET;
 8047058:	e0bfff17 	ldw	r2,-4(fp)
 804705c:	00c00084 	movi	r3,2
 8047060:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_fport;
 8047064:	e0bffe17 	ldw	r2,-8(fp)
 8047068:	10c0070b 	ldhu	r3,28(r2)
 804706c:	e0bfff17 	ldw	r2,-4(fp)
 8047070:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_faddr;
 8047074:	e0bfff17 	ldw	r2,-4(fp)
 8047078:	e0fffe17 	ldw	r3,-8(fp)
 804707c:	18c00317 	ldw	r3,12(r3)
 8047080:	10c00115 	stw	r3,4(r2)
}
 8047084:	0001883a 	nop
 8047088:	e037883a 	mov	sp,fp
 804708c:	dfc00117 	ldw	ra,4(sp)
 8047090:	df000017 	ldw	fp,0(sp)
 8047094:	dec00204 	addi	sp,sp,8
 8047098:	f800283a 	ret

0804709c <in_pcblookup>:
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
 804709c:	defff504 	addi	sp,sp,-44
 80470a0:	df000a15 	stw	fp,40(sp)
 80470a4:	df000a04 	addi	fp,sp,40
 80470a8:	e13ffa15 	stw	r4,-24(fp)
 80470ac:	e17ff915 	stw	r5,-28(fp)
 80470b0:	3007883a 	mov	r3,r6
 80470b4:	e1fff715 	stw	r7,-36(fp)
 80470b8:	e0800117 	ldw	r2,4(fp)
 80470bc:	e0fff80d 	sth	r3,-32(fp)
 80470c0:	e0bff60d 	sth	r2,-40(fp)
   struct inpcb * inp, *   match =  0;
 80470c4:	e03ffe15 	stw	zero,-8(fp)
   unshort  fport =  xfport; 
 80470c8:	e0bff80b 	ldhu	r2,-32(fp)
 80470cc:	e0bffb8d 	sth	r2,-18(fp)
   unshort  lport =  xlport;
 80470d0:	e0bff60b 	ldhu	r2,-40(fp)
 80470d4:	e0bffb0d 	sth	r2,-20(fp)
   int   matchwild   =  3;
 80470d8:	008000c4 	movi	r2,3
 80470dc:	e0bffd15 	stw	r2,-12(fp)
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 80470e0:	e0bffa17 	ldw	r2,-24(fp)
 80470e4:	10800017 	ldw	r2,0(r2)
 80470e8:	e0bfff15 	stw	r2,-4(fp)
 80470ec:	00004f06 	br	804722c <in_pcblookup+0x190>
   {
      if (inp->inp_lport != lport)
 80470f0:	e0bfff17 	ldw	r2,-4(fp)
 80470f4:	1080078b 	ldhu	r2,30(r2)
 80470f8:	e0fffb0b 	ldhu	r3,-20(fp)
 80470fc:	10bfffcc 	andi	r2,r2,65535
 8047100:	1880401e 	bne	r3,r2,8047204 <in_pcblookup+0x168>
         continue;

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
 8047104:	e0bfff17 	ldw	r2,-4(fp)
 8047108:	10800817 	ldw	r2,32(r2)
 804710c:	10800517 	ldw	r2,20(r2)
 8047110:	108000a0 	cmpeqi	r2,r2,2
 8047114:	10003d26 	beq	r2,zero,804720c <in_pcblookup+0x170>
         continue;

      wildcard = 0;
 8047118:	e03ffc15 	stw	zero,-16(fp)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
 804711c:	e0bfff17 	ldw	r2,-4(fp)
 8047120:	10800417 	ldw	r2,16(r2)
 8047124:	10000b26 	beq	r2,zero,8047154 <in_pcblookup+0xb8>
      {
         if (laddr == INADDR_ANY)
 8047128:	e0bff717 	ldw	r2,-36(fp)
 804712c:	1000041e 	bne	r2,zero,8047140 <in_pcblookup+0xa4>
            wildcard++;
 8047130:	e0bffc17 	ldw	r2,-16(fp)
 8047134:	10800044 	addi	r2,r2,1
 8047138:	e0bffc15 	stw	r2,-16(fp)
 804713c:	00000a06 	br	8047168 <in_pcblookup+0xcc>
         else if (inp->inp_laddr.s_addr != laddr)
 8047140:	e0bfff17 	ldw	r2,-4(fp)
 8047144:	10800417 	ldw	r2,16(r2)
 8047148:	e0fff717 	ldw	r3,-36(fp)
 804714c:	18800626 	beq	r3,r2,8047168 <in_pcblookup+0xcc>
            continue;
 8047150:	00003306 	br	8047220 <in_pcblookup+0x184>
      }
      else 
      {
         if (laddr != INADDR_ANY)
 8047154:	e0bff717 	ldw	r2,-36(fp)
 8047158:	10000326 	beq	r2,zero,8047168 <in_pcblookup+0xcc>
            wildcard++;
 804715c:	e0bffc17 	ldw	r2,-16(fp)
 8047160:	10800044 	addi	r2,r2,1
 8047164:	e0bffc15 	stw	r2,-16(fp)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 8047168:	e0bfff17 	ldw	r2,-4(fp)
 804716c:	10800317 	ldw	r2,12(r2)
 8047170:	10001026 	beq	r2,zero,80471b4 <in_pcblookup+0x118>
      {
         if (faddr == INADDR_ANY)
 8047174:	e0bff917 	ldw	r2,-28(fp)
 8047178:	1000041e 	bne	r2,zero,804718c <in_pcblookup+0xf0>
            wildcard++;
 804717c:	e0bffc17 	ldw	r2,-16(fp)
 8047180:	10800044 	addi	r2,r2,1
 8047184:	e0bffc15 	stw	r2,-16(fp)
 8047188:	00000f06 	br	80471c8 <in_pcblookup+0x12c>
         else if (inp->inp_faddr.s_addr != faddr ||
 804718c:	e0bfff17 	ldw	r2,-4(fp)
 8047190:	10800317 	ldw	r2,12(r2)
 8047194:	e0fff917 	ldw	r3,-28(fp)
 8047198:	18801e1e 	bne	r3,r2,8047214 <in_pcblookup+0x178>
             inp->inp_fport != fport)
 804719c:	e0bfff17 	ldw	r2,-4(fp)
 80471a0:	1080070b 	ldhu	r2,28(r2)
         else if (inp->inp_faddr.s_addr != faddr ||
 80471a4:	e0fffb8b 	ldhu	r3,-18(fp)
 80471a8:	10bfffcc 	andi	r2,r2,65535
 80471ac:	18800626 	beq	r3,r2,80471c8 <in_pcblookup+0x12c>
         {
            continue;
 80471b0:	00001806 	br	8047214 <in_pcblookup+0x178>
         }
      } else 
      {
         if (faddr != INADDR_ANY)
 80471b4:	e0bff917 	ldw	r2,-28(fp)
 80471b8:	10000326 	beq	r2,zero,80471c8 <in_pcblookup+0x12c>
            wildcard++;
 80471bc:	e0bffc17 	ldw	r2,-16(fp)
 80471c0:	10800044 	addi	r2,r2,1
 80471c4:	e0bffc15 	stw	r2,-16(fp)
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 80471c8:	e0bffc17 	ldw	r2,-16(fp)
 80471cc:	10000326 	beq	r2,zero,80471dc <in_pcblookup+0x140>
 80471d0:	e0800217 	ldw	r2,8(fp)
 80471d4:	1080004c 	andi	r2,r2,1
 80471d8:	10001026 	beq	r2,zero,804721c <in_pcblookup+0x180>
         continue;
      if (wildcard < matchwild) 
 80471dc:	e0fffc17 	ldw	r3,-16(fp)
 80471e0:	e0bffd17 	ldw	r2,-12(fp)
 80471e4:	18800e0e 	bge	r3,r2,8047220 <in_pcblookup+0x184>
      {
         match = inp;
 80471e8:	e0bfff17 	ldw	r2,-4(fp)
 80471ec:	e0bffe15 	stw	r2,-8(fp)
         matchwild = wildcard;
 80471f0:	e0bffc17 	ldw	r2,-16(fp)
 80471f4:	e0bffd15 	stw	r2,-12(fp)
         if (matchwild == 0)
 80471f8:	e0bffd17 	ldw	r2,-12(fp)
 80471fc:	10000f26 	beq	r2,zero,804723c <in_pcblookup+0x1a0>
 8047200:	00000706 	br	8047220 <in_pcblookup+0x184>
         continue;
 8047204:	0001883a 	nop
 8047208:	00000506 	br	8047220 <in_pcblookup+0x184>
         continue;
 804720c:	0001883a 	nop
 8047210:	00000306 	br	8047220 <in_pcblookup+0x184>
            continue;
 8047214:	0001883a 	nop
 8047218:	00000106 	br	8047220 <in_pcblookup+0x184>
         continue;
 804721c:	0001883a 	nop
   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 8047220:	e0bfff17 	ldw	r2,-4(fp)
 8047224:	10800017 	ldw	r2,0(r2)
 8047228:	e0bfff15 	stw	r2,-4(fp)
 804722c:	e0ffff17 	ldw	r3,-4(fp)
 8047230:	e0bffa17 	ldw	r2,-24(fp)
 8047234:	18bfae1e 	bne	r3,r2,80470f0 <in_pcblookup+0x54>
 8047238:	00000106 	br	8047240 <in_pcblookup+0x1a4>
            break;
 804723c:	0001883a 	nop
      }
   }
   if (match == NULL)
 8047240:	e0bffe17 	ldw	r2,-8(fp)
 8047244:	1000021e 	bne	r2,zero,8047250 <in_pcblookup+0x1b4>
      return match;
 8047248:	e0bffe17 	ldw	r2,-8(fp)
 804724c:	00002406 	br	80472e0 <in_pcblookup+0x244>

   if (head->inp_next == match)  /* got cache hit? */
 8047250:	e0bffa17 	ldw	r2,-24(fp)
 8047254:	10800017 	ldw	r2,0(r2)
 8047258:	e0fffe17 	ldw	r3,-8(fp)
 804725c:	1880041e 	bne	r3,r2,8047270 <in_pcblookup+0x1d4>
   {
      inpcb_cachehits++;
 8047260:	d0a0cd17 	ldw	r2,-31948(gp)
 8047264:	10800044 	addi	r2,r2,1
 8047268:	d0a0cd15 	stw	r2,-31948(gp)
 804726c:	00001b06 	br	80472dc <in_pcblookup+0x240>
   }
   else
   {
      inpcb_cachemiss++;
 8047270:	d0a0ce17 	ldw	r2,-31944(gp)
 8047274:	10800044 	addi	r2,r2,1
 8047278:	d0a0ce15 	stw	r2,-31944(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
 804727c:	e0bffe17 	ldw	r2,-8(fp)
 8047280:	10800017 	ldw	r2,0(r2)
 8047284:	e0fffe17 	ldw	r3,-8(fp)
 8047288:	18c00117 	ldw	r3,4(r3)
 804728c:	10c00115 	stw	r3,4(r2)
      match->inp_prev->inp_next = match->inp_next;
 8047290:	e0bffe17 	ldw	r2,-8(fp)
 8047294:	10800117 	ldw	r2,4(r2)
 8047298:	e0fffe17 	ldw	r3,-8(fp)
 804729c:	18c00017 	ldw	r3,0(r3)
 80472a0:	10c00015 	stw	r3,0(r2)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
 80472a4:	e0bffa17 	ldw	r2,-24(fp)
 80472a8:	10c00017 	ldw	r3,0(r2)
 80472ac:	e0bffe17 	ldw	r2,-8(fp)
 80472b0:	10c00015 	stw	r3,0(r2)
      head->inp_next = match;
 80472b4:	e0bffa17 	ldw	r2,-24(fp)
 80472b8:	e0fffe17 	ldw	r3,-8(fp)
 80472bc:	10c00015 	stw	r3,0(r2)
      match->inp_prev = head;
 80472c0:	e0bffe17 	ldw	r2,-8(fp)
 80472c4:	e0fffa17 	ldw	r3,-24(fp)
 80472c8:	10c00115 	stw	r3,4(r2)
      match->inp_next->inp_prev = match;
 80472cc:	e0bffe17 	ldw	r2,-8(fp)
 80472d0:	10800017 	ldw	r2,0(r2)
 80472d4:	e0fffe17 	ldw	r3,-8(fp)
 80472d8:	10c00115 	stw	r3,4(r2)
   }
   return (match);
 80472dc:	e0bffe17 	ldw	r2,-8(fp)
}
 80472e0:	e037883a 	mov	sp,fp
 80472e4:	df000017 	ldw	fp,0(sp)
 80472e8:	dec00104 	addi	sp,sp,4
 80472ec:	f800283a 	ret

080472f0 <set_vfopen_error>:
 *
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
 80472f0:	defffe04 	addi	sp,sp,-8
 80472f4:	df000115 	stw	fp,4(sp)
 80472f8:	df000104 	addi	fp,sp,4
 80472fc:	e13fff15 	stw	r4,-4(fp)
   vfopen_error = error;
 8047300:	e0bfff17 	ldw	r2,-4(fp)
 8047304:	d0a0d215 	stw	r2,-31928(gp)
}
 8047308:	0001883a 	nop
 804730c:	e037883a 	mov	sp,fp
 8047310:	df000017 	ldw	fp,0(sp)
 8047314:	dec00104 	addi	sp,sp,4
 8047318:	f800283a 	ret

0804731c <get_vfopen_error>:
 *
 * RETURNS: 
 */

int get_vfopen_error()
{
 804731c:	deffff04 	addi	sp,sp,-4
 8047320:	df000015 	stw	fp,0(sp)
 8047324:	d839883a 	mov	fp,sp
   return vfopen_error;
 8047328:	d0a0d217 	ldw	r2,-31928(gp)
}
 804732c:	e037883a 	mov	sp,fp
 8047330:	df000017 	ldw	fp,0(sp)
 8047334:	dec00104 	addi	sp,sp,4
 8047338:	f800283a 	ret

0804733c <vf_alloc_and_link_vop>:
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
 804733c:	defffd04 	addi	sp,sp,-12
 8047340:	dfc00215 	stw	ra,8(sp)
 8047344:	df000115 	stw	fp,4(sp)
 8047348:	df000104 	addi	fp,sp,4
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 804734c:	d0a0d417 	ldw	r2,-31920(gp)
 8047350:	10803ff0 	cmpltui	r2,r2,255
 8047354:	1000021e 	bne	r2,zero,8047360 <vf_alloc_and_link_vop+0x24>
   {
#ifdef VFS_VERBOSE
      dprintf("vfs_open_files too big (%ld) in vf_alloc_and_link_vop()\n",
       vfs_open_files);
#endif   /* VFS_VERBOSE */
      return NULL;
 8047358:	0005883a 	mov	r2,zero
 804735c:	00000e06 	br	8047398 <vf_alloc_and_link_vop+0x5c>
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
 8047360:	01000504 	movi	r4,20
 8047364:	802cf5c0 	call	802cf5c <npalloc>
 8047368:	e0bfff15 	stw	r2,-4(fp)

   /* if the allocation succeeded */
   if (vop)
 804736c:	e0bfff17 	ldw	r2,-4(fp)
 8047370:	10000826 	beq	r2,zero,8047394 <vf_alloc_and_link_vop+0x58>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
 8047374:	d0e0d017 	ldw	r3,-31936(gp)
 8047378:	e0bfff17 	ldw	r2,-4(fp)
 804737c:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
 8047380:	e0bfff17 	ldw	r2,-4(fp)
 8047384:	d0a0d015 	stw	r2,-31936(gp)
      /* increment the count of open files */
      vfs_open_files++;
 8047388:	d0a0d417 	ldw	r2,-31920(gp)
 804738c:	10800044 	addi	r2,r2,1
 8047390:	d0a0d415 	stw	r2,-31920(gp)
#ifdef VFS_VERBOSE
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
 8047394:	e0bfff17 	ldw	r2,-4(fp)
}
 8047398:	e037883a 	mov	sp,fp
 804739c:	dfc00117 	ldw	ra,4(sp)
 80473a0:	df000017 	ldw	fp,0(sp)
 80473a4:	dec00204 	addi	sp,sp,8
 80473a8:	f800283a 	ret

080473ac <vf_alloc_buffer>:
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
 80473ac:	defff904 	addi	sp,sp,-28
 80473b0:	dfc00615 	stw	ra,24(sp)
 80473b4:	df000515 	stw	fp,20(sp)
 80473b8:	df000504 	addi	fp,sp,20
 80473bc:	e13ffb15 	stw	r4,-20(fp)
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 80473c0:	d0e0d517 	ldw	r3,-31916(gp)
 80473c4:	e0bffb17 	ldw	r2,-20(fp)
 80473c8:	1885883a 	add	r2,r3,r2
 80473cc:	00ffffd4 	movui	r3,65535
 80473d0:	1880022e 	bgeu	r3,r2,80473dc <vf_alloc_buffer+0x30>
      return NULL;
 80473d4:	0005883a 	mov	r2,zero
 80473d8:	00002106 	br	8047460 <vf_alloc_buffer+0xb4>
    * any bigger than what will fit in an unsigned int 
    */
#ifdef MUTE_WARNS
   /* the idiotic hoops you got to jump through to suppress compiler
      warnings */
   long_size   =  sizeof(unsigned   long);
 80473dc:	00800104 	movi	r2,4
 80473e0:	e0bfff15 	stw	r2,-4(fp)
   int_size = sizeof(unsigned int);
 80473e4:	00800104 	movi	r2,4
 80473e8:	e0bffe15 	stw	r2,-8(fp)
   if (long_size > int_size)
 80473ec:	e0bfff17 	ldw	r2,-4(fp)
 80473f0:	e0fffe17 	ldw	r3,-8(fp)
 80473f4:	1880102e 	bgeu	r3,r2,8047438 <vf_alloc_buffer+0x8c>
       * most systems where this "if" expression will evaluate to 
       * true (2 byte ints, 4 byte longs). if any of those upper bits 
       * are on in your requested size, you otta luck.
       */
#ifdef MUTE_WARNS
      switch (int_size)
 80473f8:	e0bffe17 	ldw	r2,-8(fp)
 80473fc:	10800098 	cmpnei	r2,r2,2
 8047400:	1000081e 	bne	r2,zero,8047424 <vf_alloc_buffer+0x78>
#else
      switch (sizeof(unsigned int))
#endif   /* MUTE_WARNS */
      {
      case 2 :
         mem_mask = 0xffff0000;
 8047404:	00bffff4 	movhi	r2,65535
 8047408:	e0bffd15 	stw	r2,-12(fp)
         break;
 804740c:	0001883a 	nop
         default :
            dtrap();    /* you have a weird compiler */
         return NULL;
      }

      if (size & mem_mask)
 8047410:	e0fffb17 	ldw	r3,-20(fp)
 8047414:	e0bffd17 	ldw	r2,-12(fp)
 8047418:	1884703a 	and	r2,r3,r2
 804741c:	10000626 	beq	r2,zero,8047438 <vf_alloc_buffer+0x8c>
 8047420:	00000306 	br	8047430 <vf_alloc_buffer+0x84>
            dtrap();    /* you have a weird compiler */
 8047424:	802c3fc0 	call	802c3fc <dtrap>
         return NULL;
 8047428:	0005883a 	mov	r2,zero
 804742c:	00000c06 	br	8047460 <vf_alloc_buffer+0xb4>
         return NULL;
 8047430:	0005883a 	mov	r2,zero
 8047434:	00000a06 	br	8047460 <vf_alloc_buffer+0xb4>
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
 8047438:	e13ffb17 	ldw	r4,-20(fp)
 804743c:	802cf5c0 	call	802cf5c <npalloc>
 8047440:	e0bffc15 	stw	r2,-16(fp)

   /* if the allocation succeeded */
   if (buffer)
 8047444:	e0bffc17 	ldw	r2,-16(fp)
 8047448:	10000426 	beq	r2,zero,804745c <vf_alloc_buffer+0xb0>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
 804744c:	d0e0d517 	ldw	r3,-31916(gp)
 8047450:	e0bffb17 	ldw	r2,-20(fp)
 8047454:	1885883a 	add	r2,r3,r2
 8047458:	d0a0d515 	stw	r2,-31916(gp)
   }

   return buffer;
 804745c:	e0bffc17 	ldw	r2,-16(fp)
}
 8047460:	e037883a 	mov	sp,fp
 8047464:	dfc00117 	ldw	ra,4(sp)
 8047468:	df000017 	ldw	fp,0(sp)
 804746c:	dec00204 	addi	sp,sp,8
 8047470:	f800283a 	ret

08047474 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
 8047474:	defffc04 	addi	sp,sp,-16
 8047478:	dfc00315 	stw	ra,12(sp)
 804747c:	df000215 	stw	fp,8(sp)
 8047480:	df000204 	addi	fp,sp,8
 8047484:	e13fff15 	stw	r4,-4(fp)
 8047488:	e17ffe15 	stw	r5,-8(fp)
   /* free the buffer */
   if (buffer)
 804748c:	e0bfff17 	ldw	r2,-4(fp)
 8047490:	10000226 	beq	r2,zero,804749c <vf_free_buffer+0x28>
      npfree(buffer);
 8047494:	e13fff17 	ldw	r4,-4(fp)
 8047498:	802cf900 	call	802cf90 <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
 804749c:	d0e0d517 	ldw	r3,-31916(gp)
 80474a0:	e0bffe17 	ldw	r2,-8(fp)
 80474a4:	1885c83a 	sub	r2,r3,r2
 80474a8:	d0a0d515 	stw	r2,-31916(gp)
}
 80474ac:	0001883a 	nop
 80474b0:	e037883a 	mov	sp,fp
 80474b4:	dfc00117 	ldw	ra,4(sp)
 80474b8:	df000017 	ldw	fp,0(sp)
 80474bc:	dec00204 	addi	sp,sp,8
 80474c0:	f800283a 	ret

080474c4 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
 80474c4:	defff904 	addi	sp,sp,-28
 80474c8:	dfc00615 	stw	ra,24(sp)
 80474cc:	df000515 	stw	fp,20(sp)
 80474d0:	df000504 	addi	fp,sp,20
 80474d4:	e13ffc15 	stw	r4,-16(fp)
 80474d8:	e17ffb15 	stw	r5,-20(fp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
 80474dc:	0009883a 	mov	r4,zero
 80474e0:	80472f00 	call	80472f0 <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
 80474e4:	01400fc4 	movi	r5,63
 80474e8:	e13ffc17 	ldw	r4,-16(fp)
 80474ec:	804a3b00 	call	804a3b0 <strchr>
 80474f0:	10000326 	beq	r2,zero,8047500 <vfopen_locked+0x3c>
   {
      dtrap();
 80474f4:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 80474f8:	0005883a 	mov	r2,zero
 80474fc:	0000ba06 	br	80477e8 <vfopen_locked+0x324>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
 8047500:	e13ffc17 	ldw	r4,-16(fp)
 8047504:	80487540 	call	8048754 <vfslookup_locked>
 8047508:	e0bffe15 	stw	r2,-8(fp)

   /* if the file exists */
   if (vfp)
 804750c:	e0bffe17 	ldw	r2,-8(fp)
 8047510:	10004a26 	beq	r2,zero,804763c <vfopen_locked+0x178>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
 8047514:	e0bffb17 	ldw	r2,-20(fp)
 8047518:	10800003 	ldbu	r2,0(r2)
 804751c:	10803fcc 	andi	r2,r2,255
 8047520:	1080201c 	xori	r2,r2,128
 8047524:	10bfe004 	addi	r2,r2,-128
 8047528:	10801dd8 	cmpnei	r2,r2,119
 804752c:	1000091e 	bne	r2,zero,8047554 <vfopen_locked+0x90>
 8047530:	e0bffe17 	ldw	r2,-8(fp)
 8047534:	1080058b 	ldhu	r2,22(r2)
 8047538:	10bfffcc 	andi	r2,r2,65535
 804753c:	1080080c 	andi	r2,r2,32
 8047540:	1000041e 	bne	r2,zero,8047554 <vfopen_locked+0x90>
      {
         set_vfopen_error(ENP_FILEIO);
 8047544:	013ff984 	movi	r4,-26
 8047548:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("mode w with no VF_WRITE\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804754c:	0005883a 	mov	r2,zero
 8047550:	0000a506 	br	80477e8 <vfopen_locked+0x324>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 8047554:	804733c0 	call	804733c <vf_alloc_and_link_vop>
 8047558:	e0bffd15 	stw	r2,-12(fp)

      /* check for failure */
      if (!vop)
 804755c:	e0bffd17 	ldw	r2,-12(fp)
 8047560:	1000041e 	bne	r2,zero,8047574 <vfopen_locked+0xb0>
      {
         set_vfopen_error(ENP_NOMEM);
 8047564:	013ffb04 	movi	r4,-20
 8047568:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 1\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804756c:	0005883a 	mov	r2,zero
 8047570:	00009d06 	br	80477e8 <vfopen_locked+0x324>
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
 8047574:	e0bffd17 	ldw	r2,-12(fp)
 8047578:	e0fffe17 	ldw	r3,-8(fp)
 804757c:	10c00115 	stw	r3,4(r2)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
 8047580:	e0bffe17 	ldw	r2,-8(fp)
 8047584:	10c00617 	ldw	r3,24(r2)
 8047588:	e0bffd17 	ldw	r2,-12(fp)
 804758c:	10c00215 	stw	r3,8(r2)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
 8047590:	e0bffb17 	ldw	r2,-20(fp)
 8047594:	10800003 	ldbu	r2,0(r2)
 8047598:	10803fcc 	andi	r2,r2,255
 804759c:	1080201c 	xori	r2,r2,128
 80475a0:	10bfe004 	addi	r2,r2,-128
 80475a4:	10801858 	cmpnei	r2,r2,97
 80475a8:	10000a1e 	bne	r2,zero,80475d4 <vfopen_locked+0x110>
      {
         if (vfp->data)
 80475ac:	e0bffe17 	ldw	r2,-8(fp)
 80475b0:	10800617 	ldw	r2,24(r2)
 80475b4:	10000726 	beq	r2,zero,80475d4 <vfopen_locked+0x110>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
 80475b8:	e0bffe17 	ldw	r2,-8(fp)
 80475bc:	10c00617 	ldw	r3,24(r2)
 80475c0:	e0bffe17 	ldw	r2,-8(fp)
 80475c4:	10800817 	ldw	r2,32(r2)
 80475c8:	1887883a 	add	r3,r3,r2
 80475cc:	e0bffd17 	ldw	r2,-12(fp)
 80475d0:	10c00215 	stw	r3,8(r2)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
 80475d4:	e0bffb17 	ldw	r2,-20(fp)
 80475d8:	10800003 	ldbu	r2,0(r2)
 80475dc:	10803fcc 	andi	r2,r2,255
 80475e0:	1080201c 	xori	r2,r2,128
 80475e4:	10bfe004 	addi	r2,r2,-128
 80475e8:	10801dd8 	cmpnei	r2,r2,119
 80475ec:	1000111e 	bne	r2,zero,8047634 <vfopen_locked+0x170>
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
 80475f0:	e0bffe17 	ldw	r2,-8(fp)
 80475f4:	10000715 	stw	zero,28(r2)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
 80475f8:	e0bffe17 	ldw	r2,-8(fp)
 80475fc:	10000815 	stw	zero,32(r2)
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
 8047600:	e0bffe17 	ldw	r2,-8(fp)
 8047604:	1080058b 	ldhu	r2,22(r2)
 8047608:	10808014 	ori	r2,r2,512
 804760c:	1007883a 	mov	r3,r2
 8047610:	e0bffe17 	ldw	r2,-8(fp)
 8047614:	10c0058d 	sth	r3,22(r2)

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
 8047618:	e0bffe17 	ldw	r2,-8(fp)
 804761c:	10c0058b 	ldhu	r3,22(r2)
 8047620:	00bfff84 	movi	r2,-2
 8047624:	1884703a 	and	r2,r3,r2
 8047628:	1007883a 	mov	r3,r2
 804762c:	e0bffe17 	ldw	r2,-8(fp)
 8047630:	10c0058d 	sth	r3,22(r2)
      }

#endif   /* HT_RWVFS */

      return vop;
 8047634:	e0bffd17 	ldw	r2,-12(fp)
 8047638:	00006b06 	br	80477e8 <vfopen_locked+0x324>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 804763c:	e0bffb17 	ldw	r2,-20(fp)
 8047640:	10800003 	ldbu	r2,0(r2)
 8047644:	10803fcc 	andi	r2,r2,255
 8047648:	1080201c 	xori	r2,r2,128
 804764c:	10bfe004 	addi	r2,r2,-128
 8047650:	10801ca0 	cmpeqi	r2,r2,114
 8047654:	1000121e 	bne	r2,zero,80476a0 <vfopen_locked+0x1dc>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
 8047658:	d0a0cf17 	ldw	r2,-31940(gp)
 804765c:	e0bfff15 	stw	r2,-4(fp)
 8047660:	00000d06 	br	8047698 <vfopen_locked+0x1d4>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
 8047664:	e0bfff17 	ldw	r2,-4(fp)
 8047668:	10800117 	ldw	r2,4(r2)
 804766c:	e17ffb17 	ldw	r5,-20(fp)
 8047670:	e13ffc17 	ldw	r4,-16(fp)
 8047674:	103ee83a 	callr	r2
 8047678:	e0bffd15 	stw	r2,-12(fp)
 804767c:	e0bffd17 	ldw	r2,-12(fp)
 8047680:	10000226 	beq	r2,zero,804768c <vfopen_locked+0x1c8>
         {
            return vop;
 8047684:	e0bffd17 	ldw	r2,-12(fp)
 8047688:	00005706 	br	80477e8 <vfopen_locked+0x324>
      for (vfs = vfsystems; vfs; vfs = vfs->next)
 804768c:	e0bfff17 	ldw	r2,-4(fp)
 8047690:	10800017 	ldw	r2,0(r2)
 8047694:	e0bfff15 	stw	r2,-4(fp)
 8047698:	e0bfff17 	ldw	r2,-4(fp)
 804769c:	103ff11e 	bne	r2,zero,8047664 <vfopen_locked+0x1a0>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 80476a0:	e0bffb17 	ldw	r2,-20(fp)
 80476a4:	10800003 	ldbu	r2,0(r2)
 80476a8:	10803fcc 	andi	r2,r2,255
 80476ac:	1080201c 	xori	r2,r2,128
 80476b0:	10bfe004 	addi	r2,r2,-128
 80476b4:	10801ca0 	cmpeqi	r2,r2,114
 80476b8:	1000481e 	bne	r2,zero,80477dc <vfopen_locked+0x318>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
 80476bc:	d0a0d617 	ldw	r2,-31912(gp)
 80476c0:	10803ff0 	cmpltui	r2,r2,255
 80476c4:	1000041e 	bne	r2,zero,80476d8 <vfopen_locked+0x214>
      {
         set_vfopen_error(ENP_NOMEM);
 80476c8:	013ffb04 	movi	r4,-20
 80476cc:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_total_dyna_files too big in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 80476d0:	0005883a 	mov	r2,zero
 80476d4:	00004406 	br	80477e8 <vfopen_locked+0x324>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
 80476d8:	e13ffc17 	ldw	r4,-16(fp)
 80476dc:	8003a1c0 	call	8003a1c <strlen>
 80476e0:	10800470 	cmpltui	r2,r2,17
 80476e4:	1000041e 	bne	r2,zero,80476f8 <vfopen_locked+0x234>
      {
         set_vfopen_error(ENP_PARAM);
 80476e8:	013ffd84 	movi	r4,-10
 80476ec:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("file name too long in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 80476f0:	0005883a 	mov	r2,zero
 80476f4:	00003c06 	br	80477e8 <vfopen_locked+0x324>
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
 80476f8:	01000b04 	movi	r4,44
 80476fc:	802cf5c0 	call	802cf5c <npalloc>
 8047700:	e0bffe15 	stw	r2,-8(fp)

      /* check for memory allocation failure */
      if (!vfp)
 8047704:	e0bffe17 	ldw	r2,-8(fp)
 8047708:	1000041e 	bne	r2,zero,804771c <vfopen_locked+0x258>
      {
         set_vfopen_error(ENP_NOMEM);
 804770c:	013ffb04 	movi	r4,-20
 8047710:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("VFS_VFS_FILE_ALLOC() failed in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 8047714:	0005883a 	mov	r2,zero
 8047718:	00003306 	br	80477e8 <vfopen_locked+0x324>
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 804771c:	804733c0 	call	804733c <vf_alloc_and_link_vop>
 8047720:	e0bffd15 	stw	r2,-12(fp)

      /* check for memory allocation failure */
      if (!vop)
 8047724:	e0bffd17 	ldw	r2,-12(fp)
 8047728:	1000061e 	bne	r2,zero,8047744 <vfopen_locked+0x280>
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
 804772c:	e13ffe17 	ldw	r4,-8(fp)
 8047730:	802cf900 	call	802cf90 <npfree>
         set_vfopen_error(ENP_NOMEM);
 8047734:	013ffb04 	movi	r4,-20
 8047738:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 2\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 804773c:	0005883a 	mov	r2,zero
 8047740:	00002906 	br	80477e8 <vfopen_locked+0x324>
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
 8047744:	d0e0d117 	ldw	r3,-31932(gp)
 8047748:	e0bffe17 	ldw	r2,-8(fp)
 804774c:	10c00015 	stw	r3,0(r2)
      vfsfiles = vfp;
 8047750:	e0bffe17 	ldw	r2,-8(fp)
 8047754:	d0a0d115 	stw	r2,-31932(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;
 8047758:	d0a0d617 	ldw	r2,-31912(gp)
 804775c:	10800044 	addi	r2,r2,1
 8047760:	d0a0d615 	stw	r2,-31912(gp)

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
 8047764:	e0bffc17 	ldw	r2,-16(fp)
 8047768:	10800003 	ldbu	r2,0(r2)
 804776c:	10803fcc 	andi	r2,r2,255
 8047770:	1080201c 	xori	r2,r2,128
 8047774:	10bfe004 	addi	r2,r2,-128
 8047778:	10800be0 	cmpeqi	r2,r2,47
 804777c:	1000071e 	bne	r2,zero,804779c <vfopen_locked+0x2d8>
 8047780:	e0bffc17 	ldw	r2,-16(fp)
 8047784:	10800003 	ldbu	r2,0(r2)
 8047788:	10803fcc 	andi	r2,r2,255
 804778c:	1080201c 	xori	r2,r2,128
 8047790:	10bfe004 	addi	r2,r2,-128
 8047794:	10801718 	cmpnei	r2,r2,92
 8047798:	1000031e 	bne	r2,zero,80477a8 <vfopen_locked+0x2e4>
         name++;
 804779c:	e0bffc17 	ldw	r2,-16(fp)
 80477a0:	10800044 	addi	r2,r2,1
 80477a4:	e0bffc15 	stw	r2,-16(fp)

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
 80477a8:	e0bffe17 	ldw	r2,-8(fp)
 80477ac:	10800104 	addi	r2,r2,4
 80477b0:	e17ffc17 	ldw	r5,-16(fp)
 80477b4:	1009883a 	mov	r4,r2
 80477b8:	804a50c0 	call	804a50c <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
 80477bc:	e0bffe17 	ldw	r2,-8(fp)
 80477c0:	00c0d804 	movi	r3,864
 80477c4:	10c0058d 	sth	r3,22(r2)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
 80477c8:	e0bffd17 	ldw	r2,-12(fp)
 80477cc:	e0fffe17 	ldw	r3,-8(fp)
 80477d0:	10c00115 	stw	r3,4(r2)
      /* the cmploc and tag fields of the vop retain their NULLs from 
       * npalloc(). cmploc contains NULL because there is no data 
       * buffer to point to yet. tag contains NULL because no 
       * decompression operation has started yet
       */
      return vop;
 80477d4:	e0bffd17 	ldw	r2,-12(fp)
 80477d8:	00000306 	br	80477e8 <vfopen_locked+0x324>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
 80477dc:	013ff9c4 	movi	r4,-25
 80477e0:	80472f00 	call	80472f0 <set_vfopen_error>
#ifdef VFS_VERBOSE
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;
 80477e4:	0005883a 	mov	r2,zero

#endif   /* HT_LOCALFS */
}
 80477e8:	e037883a 	mov	sp,fp
 80477ec:	dfc00117 	ldw	ra,4(sp)
 80477f0:	df000017 	ldw	fp,0(sp)
 80477f4:	dec00204 	addi	sp,sp,8
 80477f8:	f800283a 	ret

080477fc <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 80477fc:	defffb04 	addi	sp,sp,-20
 8047800:	dfc00415 	stw	ra,16(sp)
 8047804:	df000315 	stw	fp,12(sp)
 8047808:	df000304 	addi	fp,sp,12
 804780c:	e13ffe15 	stw	r4,-8(fp)
 8047810:	e17ffd15 	stw	r5,-12(fp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 8047814:	01000144 	movi	r4,5
 8047818:	802c9e40 	call	802c9e4 <wait_app_sem>

   vfd = vfopen_locked(name,mode);
 804781c:	e17ffd17 	ldw	r5,-12(fp)
 8047820:	e13ffe17 	ldw	r4,-8(fp)
 8047824:	80474c40 	call	80474c4 <vfopen_locked>
 8047828:	e0bfff15 	stw	r2,-4(fp)

   vfs_unlock();
 804782c:	01000144 	movi	r4,5
 8047830:	802ca980 	call	802ca98 <post_app_sem>

   return vfd;
 8047834:	e0bfff17 	ldw	r2,-4(fp)
}
 8047838:	e037883a 	mov	sp,fp
 804783c:	dfc00117 	ldw	ra,4(sp)
 8047840:	df000017 	ldw	fp,0(sp)
 8047844:	dec00204 	addi	sp,sp,8
 8047848:	f800283a 	ret

0804784c <vfclose_locked>:
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
 804784c:	defff804 	addi	sp,sp,-32
 8047850:	dfc00715 	stw	ra,28(sp)
 8047854:	df000615 	stw	fp,24(sp)
 8047858:	df000604 	addi	fp,sp,24
 804785c:	e13ffa15 	stw	r4,-24(fp)
   VFILE * vtmp;
   VFILE * vlast;

   vlast = NULL;
 8047860:	e03ffe15 	stw	zero,-8(fp)

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
 8047864:	d0a0d017 	ldw	r2,-31936(gp)
 8047868:	e0bfff15 	stw	r2,-4(fp)
   while (vtmp)
 804786c:	00000806 	br	8047890 <vfclose_locked+0x44>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 8047870:	e0fffa17 	ldw	r3,-24(fp)
 8047874:	e0bfff17 	ldw	r2,-4(fp)
 8047878:	18800826 	beq	r3,r2,804789c <vfclose_locked+0x50>
         break;

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
 804787c:	e0bfff17 	ldw	r2,-4(fp)
 8047880:	e0bffe15 	stw	r2,-8(fp)
      vtmp = vtmp->next;
 8047884:	e0bfff17 	ldw	r2,-4(fp)
 8047888:	10800017 	ldw	r2,0(r2)
 804788c:	e0bfff15 	stw	r2,-4(fp)
   while (vtmp)
 8047890:	e0bfff17 	ldw	r2,-4(fp)
 8047894:	103ff61e 	bne	r2,zero,8047870 <vfclose_locked+0x24>
 8047898:	00000106 	br	80478a0 <vfclose_locked+0x54>
         break;
 804789c:	0001883a 	nop
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
 80478a0:	e0fffa17 	ldw	r3,-24(fp)
 80478a4:	e0bfff17 	ldw	r2,-4(fp)
 80478a8:	1880501e 	bne	r3,r2,80479ec <vfclose_locked+0x1a0>

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
 80478ac:	e0bffa17 	ldw	r2,-24(fp)
 80478b0:	10800117 	ldw	r2,4(r2)
 80478b4:	e0bffd15 	stw	r2,-12(fp)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
 80478b8:	e0bffd17 	ldw	r2,-12(fp)
 80478bc:	10003826 	beq	r2,zero,80479a0 <vfclose_locked+0x154>
         break;
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 80478c0:	e0bffd17 	ldw	r2,-12(fp)
 80478c4:	10800a17 	ldw	r2,40(r2)
 80478c8:	10000826 	beq	r2,zero,80478ec <vfclose_locked+0xa0>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);
 80478cc:	e0bffd17 	ldw	r2,-12(fp)
 80478d0:	10800a17 	ldw	r2,40(r2)
 80478d4:	e0bffb15 	stw	r2,-20(fp)

         vfs->r_fclose(vfd);
 80478d8:	e0bffb17 	ldw	r2,-20(fp)
 80478dc:	10800217 	ldw	r2,8(r2)
 80478e0:	e13ffa17 	ldw	r4,-24(fp)
 80478e4:	103ee83a 	callr	r2
         break;   /* break to list deletion code after end of phoney loop */
 80478e8:	00003006 	br	80479ac <vfclose_locked+0x160>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
 80478ec:	e0bffd17 	ldw	r2,-12(fp)
 80478f0:	1080058b 	ldhu	r2,22(r2)
 80478f4:	10bfffcc 	andi	r2,r2,65535
 80478f8:	1080200c 	andi	r2,r2,128
 80478fc:	10002a26 	beq	r2,zero,80479a8 <vfclose_locked+0x15c>
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
 8047900:	e0bffd17 	ldw	r2,-12(fp)
 8047904:	10c00917 	ldw	r3,36(r2)
 8047908:	e0bffd17 	ldw	r2,-12(fp)
 804790c:	10800817 	ldw	r2,32(r2)
 8047910:	1885c83a 	sub	r2,r3,r2
      if ((vfp->flags & VF_DYNAMICDATA) &&
 8047914:	10804030 	cmpltui	r2,r2,256
 8047918:	1000231e 	bne	r2,zero,80479a8 <vfclose_locked+0x15c>
          vfp->data) /* this last test is a sanity check */
 804791c:	e0bffd17 	ldw	r2,-12(fp)
 8047920:	10800617 	ldw	r2,24(r2)
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
 8047924:	10002026 	beq	r2,zero,80479a8 <vfclose_locked+0x15c>
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
 8047928:	e0bffd17 	ldw	r2,-12(fp)
 804792c:	10800817 	ldw	r2,32(r2)
 8047930:	1009883a 	mov	r4,r2
 8047934:	80473ac0 	call	80473ac <vf_alloc_buffer>
 8047938:	e0bffc15 	stw	r2,-16(fp)

         /* if the allocation worked */
         if (new_buffer)
 804793c:	e0bffc17 	ldw	r2,-16(fp)
 8047940:	10001926 	beq	r2,zero,80479a8 <vfclose_locked+0x15c>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 8047944:	e0bffd17 	ldw	r2,-12(fp)
 8047948:	10c00617 	ldw	r3,24(r2)
 804794c:	e0bffd17 	ldw	r2,-12(fp)
 8047950:	10800817 	ldw	r2,32(r2)
 8047954:	100d883a 	mov	r6,r2
 8047958:	180b883a 	mov	r5,r3
 804795c:	e13ffc17 	ldw	r4,-16(fp)
 8047960:	8002ea40 	call	8002ea4 <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
 8047964:	e0bffd17 	ldw	r2,-12(fp)
 8047968:	10c00617 	ldw	r3,24(r2)
 804796c:	e0bffd17 	ldw	r2,-12(fp)
 8047970:	10800917 	ldw	r2,36(r2)
 8047974:	100b883a 	mov	r5,r2
 8047978:	1809883a 	mov	r4,r3
 804797c:	80474740 	call	8047474 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
 8047980:	e0bffd17 	ldw	r2,-12(fp)
 8047984:	e0fffc17 	ldw	r3,-16(fp)
 8047988:	10c00615 	stw	r3,24(r2)
            vfp->buf_size = vfp->comp_size;
 804798c:	e0bffd17 	ldw	r2,-12(fp)
 8047990:	10c00817 	ldw	r3,32(r2)
 8047994:	e0bffd17 	ldw	r2,-12(fp)
 8047998:	10c00915 	stw	r3,36(r2)
#endif   /* VFS_AUTO_SYNC */

#endif   /* HT_RWVFS */

      /* break to list deletion code below */
      break;
 804799c:	00000206 	br	80479a8 <vfclose_locked+0x15c>
         break;
 80479a0:	0001883a 	nop
 80479a4:	00000106 	br	80479ac <vfclose_locked+0x160>
      break;
 80479a8:	0001883a 	nop

   }

   if (vlast)  /* unlink from list of open files */
 80479ac:	e0bffe17 	ldw	r2,-8(fp)
 80479b0:	10000526 	beq	r2,zero,80479c8 <vfclose_locked+0x17c>
      vlast->next = vtmp->next;
 80479b4:	e0bfff17 	ldw	r2,-4(fp)
 80479b8:	10c00017 	ldw	r3,0(r2)
 80479bc:	e0bffe17 	ldw	r2,-8(fp)
 80479c0:	10c00015 	stw	r3,0(r2)
 80479c4:	00000306 	br	80479d4 <vfclose_locked+0x188>
   else
      vfiles = vtmp->next;
 80479c8:	e0bfff17 	ldw	r2,-4(fp)
 80479cc:	10800017 	ldw	r2,0(r2)
 80479d0:	d0a0d015 	stw	r2,-31936(gp)

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
 80479d4:	e13fff17 	ldw	r4,-4(fp)
 80479d8:	802cf900 	call	802cf90 <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
 80479dc:	d0a0d417 	ldw	r2,-31920(gp)
 80479e0:	10bfffc4 	addi	r2,r2,-1
 80479e4:	d0a0d415 	stw	r2,-31920(gp)
   return;
 80479e8:	00000106 	br	80479f0 <vfclose_locked+0x1a4>
      return;
 80479ec:	0001883a 	nop
}
 80479f0:	e037883a 	mov	sp,fp
 80479f4:	dfc00117 	ldw	ra,4(sp)
 80479f8:	df000017 	ldw	fp,0(sp)
 80479fc:	dec00204 	addi	sp,sp,8
 8047a00:	f800283a 	ret

08047a04 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 8047a04:	defffd04 	addi	sp,sp,-12
 8047a08:	dfc00215 	stw	ra,8(sp)
 8047a0c:	df000115 	stw	fp,4(sp)
 8047a10:	df000104 	addi	fp,sp,4
 8047a14:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 8047a18:	01000144 	movi	r4,5
 8047a1c:	802c9e40 	call	802c9e4 <wait_app_sem>

   vfclose_locked(vfd);
 8047a20:	e13fff17 	ldw	r4,-4(fp)
 8047a24:	804784c0 	call	804784c <vfclose_locked>

   vfs_unlock();
 8047a28:	01000144 	movi	r4,5
 8047a2c:	802ca980 	call	802ca98 <post_app_sem>
}
 8047a30:	0001883a 	nop
 8047a34:	e037883a 	mov	sp,fp
 8047a38:	dfc00117 	ldw	ra,4(sp)
 8047a3c:	df000017 	ldw	fp,0(sp)
 8047a40:	dec00204 	addi	sp,sp,8
 8047a44:	f800283a 	ret

08047a48 <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
 8047a48:	defffd04 	addi	sp,sp,-12
 8047a4c:	dfc00215 	stw	ra,8(sp)
 8047a50:	df000115 	stw	fp,4(sp)
 8047a54:	df000104 	addi	fp,sp,4
 8047a58:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 8047a5c:	01000144 	movi	r4,5
 8047a60:	802c9e40 	call	802c9e4 <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
 8047a64:	01020174 	movhi	r4,2053
 8047a68:	210f7604 	addi	r4,r4,15832
 8047a6c:	80033800 	call	8003380 <puts>

   vfs_unlock();
 8047a70:	01000144 	movi	r4,5
 8047a74:	802ca980 	call	802ca98 <post_app_sem>
   return(0);
 8047a78:	0005883a 	mov	r2,zero
}
 8047a7c:	e037883a 	mov	sp,fp
 8047a80:	dfc00117 	ldw	ra,4(sp)
 8047a84:	df000017 	ldw	fp,0(sp)
 8047a88:	dec00204 	addi	sp,sp,8
 8047a8c:	f800283a 	ret

08047a90 <vfgets>:

char * vfgets(char * s, int lim, VFILE * fp) 
{
 8047a90:	defff904 	addi	sp,sp,-28
 8047a94:	dfc00615 	stw	ra,24(sp)
 8047a98:	df000515 	stw	fp,20(sp)
 8047a9c:	df000504 	addi	fp,sp,20
 8047aa0:	e13ffd15 	stw	r4,-12(fp)
 8047aa4:	e17ffc15 	stw	r5,-16(fp)
 8047aa8:	e1bffb15 	stw	r6,-20(fp)
   int   c   = EOF;
 8047aac:	00bfffc4 	movi	r2,-1
 8047ab0:	e0bfff15 	stw	r2,-4(fp)
   char* ret = s;
 8047ab4:	e0bffd17 	ldw	r2,-12(fp)
 8047ab8:	e0bffe15 	stw	r2,-8(fp)

   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 8047abc:	00000b06 	br	8047aec <vfgets+0x5c>
      if (( *ret ++ = c) == '\n')
 8047ac0:	e0bffe17 	ldw	r2,-8(fp)
 8047ac4:	10c00044 	addi	r3,r2,1
 8047ac8:	e0fffe15 	stw	r3,-8(fp)
 8047acc:	e0ffff17 	ldw	r3,-4(fp)
 8047ad0:	10c00005 	stb	r3,0(r2)
 8047ad4:	10800003 	ldbu	r2,0(r2)
 8047ad8:	10803fcc 	andi	r2,r2,255
 8047adc:	1080201c 	xori	r2,r2,128
 8047ae0:	10bfe004 	addi	r2,r2,-128
 8047ae4:	10800298 	cmpnei	r2,r2,10
 8047ae8:	10000c26 	beq	r2,zero,8047b1c <vfgets+0x8c>
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 8047aec:	e0bffc17 	ldw	r2,-16(fp)
 8047af0:	10bfffc4 	addi	r2,r2,-1
 8047af4:	e0bffc15 	stw	r2,-16(fp)
 8047af8:	e0bffc17 	ldw	r2,-16(fp)
 8047afc:	0080080e 	bge	zero,r2,8047b20 <vfgets+0x90>
 8047b00:	e13ffb17 	ldw	r4,-20(fp)
 8047b04:	804870c0 	call	804870c <vgetc>
 8047b08:	e0bfff15 	stw	r2,-4(fp)
 8047b0c:	e0bfff17 	ldw	r2,-4(fp)
 8047b10:	10bfffd8 	cmpnei	r2,r2,-1
 8047b14:	103fea1e 	bne	r2,zero,8047ac0 <vfgets+0x30>
 8047b18:	00000106 	br	8047b20 <vfgets+0x90>
         break;
 8047b1c:	0001883a 	nop
   *ret = '\0';
 8047b20:	e0bffe17 	ldw	r2,-8(fp)
 8047b24:	10000005 	stb	zero,0(r2)
   return ( c == EOF && ret == s) ? NULL : s;
 8047b28:	e0bfff17 	ldw	r2,-4(fp)
 8047b2c:	10bfffd8 	cmpnei	r2,r2,-1
 8047b30:	1000031e 	bne	r2,zero,8047b40 <vfgets+0xb0>
 8047b34:	e0fffe17 	ldw	r3,-8(fp)
 8047b38:	e0bffd17 	ldw	r2,-12(fp)
 8047b3c:	18800226 	beq	r3,r2,8047b48 <vfgets+0xb8>
 8047b40:	e0bffd17 	ldw	r2,-12(fp)
 8047b44:	00000106 	br	8047b4c <vfgets+0xbc>
 8047b48:	0005883a 	mov	r2,zero
}
 8047b4c:	e037883a 	mov	sp,fp
 8047b50:	dfc00117 	ldw	ra,4(sp)
 8047b54:	df000017 	ldw	fp,0(sp)
 8047b58:	dec00204 	addi	sp,sp,8
 8047b5c:	f800283a 	ret

08047b60 <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
 8047b60:	defffc04 	addi	sp,sp,-16
 8047b64:	dfc00315 	stw	ra,12(sp)
 8047b68:	df000215 	stw	fp,8(sp)
 8047b6c:	df000204 	addi	fp,sp,8
 8047b70:	e13ffe15 	stw	r4,-8(fp)
   int c = 0;
 8047b74:	e03fff15 	stw	zero,-4(fp)

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
 8047b78:	e13ffe17 	ldw	r4,-8(fp)
 8047b7c:	804870c0 	call	804870c <vgetc>
 8047b80:	e0bfff15 	stw	r2,-4(fp)
 8047b84:	e0bfff17 	ldw	r2,-4(fp)
 8047b88:	10bfffd8 	cmpnei	r2,r2,-1
 8047b8c:	1000021e 	bne	r2,zero,8047b98 <vfeof+0x38>
   {
      return 1;
 8047b90:	00800044 	movi	r2,1
 8047b94:	00000106 	br	8047b9c <vfeof+0x3c>
   }   
   return 0;
 8047b98:	0005883a 	mov	r2,zero
}
 8047b9c:	e037883a 	mov	sp,fp
 8047ba0:	dfc00117 	ldw	ra,4(sp)
 8047ba4:	df000017 	ldw	fp,0(sp)
 8047ba8:	dec00204 	addi	sp,sp,8
 8047bac:	f800283a 	ret

08047bb0 <vunlink_flag_open_files>:
 *
 * RETURNS: 
 */

void vunlink_flag_open_files(struct vfs_file * vfp)
{
 8047bb0:	defffd04 	addi	sp,sp,-12
 8047bb4:	df000215 	stw	fp,8(sp)
 8047bb8:	df000204 	addi	fp,sp,8
 8047bbc:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 8047bc0:	d0a0d017 	ldw	r2,-31936(gp)
 8047bc4:	e0bfff15 	stw	r2,-4(fp)
 8047bc8:	00000906 	br	8047bf0 <vunlink_flag_open_files+0x40>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
 8047bcc:	e0bfff17 	ldw	r2,-4(fp)
 8047bd0:	10800117 	ldw	r2,4(r2)
 8047bd4:	e0fffe17 	ldw	r3,-8(fp)
 8047bd8:	1880021e 	bne	r3,r2,8047be4 <vunlink_flag_open_files+0x34>
         vtmp->file = NULL;
 8047bdc:	e0bfff17 	ldw	r2,-4(fp)
 8047be0:	10000115 	stw	zero,4(r2)
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 8047be4:	e0bfff17 	ldw	r2,-4(fp)
 8047be8:	10800017 	ldw	r2,0(r2)
 8047bec:	e0bfff15 	stw	r2,-4(fp)
 8047bf0:	e0bfff17 	ldw	r2,-4(fp)
 8047bf4:	103ff51e 	bne	r2,zero,8047bcc <vunlink_flag_open_files+0x1c>
   }
}
 8047bf8:	0001883a 	nop
 8047bfc:	0001883a 	nop
 8047c00:	e037883a 	mov	sp,fp
 8047c04:	df000017 	ldw	fp,0(sp)
 8047c08:	dec00104 	addi	sp,sp,4
 8047c0c:	f800283a 	ret

08047c10 <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
 8047c10:	defff604 	addi	sp,sp,-40
 8047c14:	dfc00915 	stw	ra,36(sp)
 8047c18:	df000815 	stw	fp,32(sp)
 8047c1c:	df000804 	addi	fp,sp,32
 8047c20:	e13ff815 	stw	r4,-32(fp)
   struct vfs_file * vfp;
   int   rc =  0;
 8047c24:	e03fff15 	stw	zero,-4(fp)
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name)+1);
 8047c28:	e13ff817 	ldw	r4,-32(fp)
 8047c2c:	8003a1c0 	call	8003a1c <strlen>
 8047c30:	10800044 	addi	r2,r2,1
 8047c34:	1009883a 	mov	r4,r2
 8047c38:	804a2d80 	call	804a2d8 <malloc>
 8047c3c:	e0bffc15 	stw	r2,-16(fp)
   strcpy(name, const_name);
 8047c40:	e17ff817 	ldw	r5,-32(fp)
 8047c44:	e13ffc17 	ldw	r4,-16(fp)
 8047c48:	804a50c0 	call	804a50c <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 8047c4c:	01000144 	movi	r4,5
 8047c50:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
 8047c54:	e13ffc17 	ldw	r4,-16(fp)
 8047c58:	80487540 	call	8048754 <vfslookup_locked>
 8047c5c:	e0bffb15 	stw	r2,-20(fp)
 8047c60:	e0bffb17 	ldw	r2,-20(fp)
 8047c64:	1000061e 	bne	r2,zero,8047c80 <vunlink+0x70>
   {
      vfs_unlock();
 8047c68:	01000144 	movi	r4,5
 8047c6c:	802ca980 	call	802ca98 <post_app_sem>
#ifdef HT_LOCALFS
      /* default to call on local system */
      return remove(name);
#else
      /* no local file system, so return error condition */
      free(name);
 8047c70:	e13ffc17 	ldw	r4,-16(fp)
 8047c74:	804a2e80 	call	804a2e8 <free>
      return -1;
 8047c78:	00bfffc4 	movi	r2,-1
 8047c7c:	00005f06 	br	8047dfc <vunlink+0x1ec>
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
 8047c80:	e0bffb17 	ldw	r2,-20(fp)
 8047c84:	10800017 	ldw	r2,0(r2)
 8047c88:	e0bffa15 	stw	r2,-24(fp)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
 8047c8c:	e03ffd15 	stw	zero,-12(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 8047c90:	d0a0d117 	ldw	r2,-31932(gp)
 8047c94:	e0bffe15 	stw	r2,-8(fp)
 8047c98:	00000806 	br	8047cbc <vunlink+0xac>
   {
      if (vtmp == vfp)
 8047c9c:	e0fffe17 	ldw	r3,-8(fp)
 8047ca0:	e0bffb17 	ldw	r2,-20(fp)
 8047ca4:	18800826 	beq	r3,r2,8047cc8 <vunlink+0xb8>
         break;
      vflast = vtmp;
 8047ca8:	e0bffe17 	ldw	r2,-8(fp)
 8047cac:	e0bffd15 	stw	r2,-12(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 8047cb0:	e0bffe17 	ldw	r2,-8(fp)
 8047cb4:	10800017 	ldw	r2,0(r2)
 8047cb8:	e0bffe15 	stw	r2,-8(fp)
 8047cbc:	e0bffe17 	ldw	r2,-8(fp)
 8047cc0:	103ff61e 	bne	r2,zero,8047c9c <vunlink+0x8c>
 8047cc4:	00000106 	br	8047ccc <vunlink+0xbc>
         break;
 8047cc8:	0001883a 	nop
   }

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
 8047ccc:	e0bffe17 	ldw	r2,-8(fp)
 8047cd0:	1000071e 	bne	r2,zero,8047cf0 <vunlink+0xe0>
   {
      dtrap();
 8047cd4:	802c3fc0 	call	802c3fc <dtrap>
      vfs_unlock();
 8047cd8:	01000144 	movi	r4,5
 8047cdc:	802ca980 	call	802ca98 <post_app_sem>
      free(name);
 8047ce0:	e13ffc17 	ldw	r4,-16(fp)
 8047ce4:	804a2e80 	call	804a2e8 <free>
      return -1;
 8047ce8:	00bfffc4 	movi	r2,-1
 8047cec:	00004306 	br	8047dfc <vunlink+0x1ec>
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 8047cf0:	e0bffb17 	ldw	r2,-20(fp)
 8047cf4:	10800a17 	ldw	r2,40(r2)
 8047cf8:	10000926 	beq	r2,zero,8047d20 <vunlink+0x110>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);
 8047cfc:	e0bffb17 	ldw	r2,-20(fp)
 8047d00:	10800a17 	ldw	r2,40(r2)
 8047d04:	e0bff915 	stw	r2,-28(fp)

         rc = vfs->r_unlink(name);
 8047d08:	e0bff917 	ldw	r2,-28(fp)
 8047d0c:	10800817 	ldw	r2,32(r2)
 8047d10:	e13ffc17 	ldw	r4,-16(fp)
 8047d14:	103ee83a 	callr	r2
 8047d18:	e0bfff15 	stw	r2,-4(fp)
         break;   /* break to list deletion code after end of phoney loop */
 8047d1c:	00002606 	br	8047db8 <vunlink+0x1a8>
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
 8047d20:	e0bffb17 	ldw	r2,-20(fp)
 8047d24:	1080058b 	ldhu	r2,22(r2)
 8047d28:	10bfffcc 	andi	r2,r2,65535
 8047d2c:	1080080c 	andi	r2,r2,32
 8047d30:	1000061e 	bne	r2,zero,8047d4c <vunlink+0x13c>
      {
         vfs_unlock();
 8047d34:	01000144 	movi	r4,5
 8047d38:	802ca980 	call	802ca98 <post_app_sem>
         free(name);
 8047d3c:	e13ffc17 	ldw	r4,-16(fp)
 8047d40:	804a2e80 	call	804a2e8 <free>
         return -1;
 8047d44:	00bfffc4 	movi	r2,-1
 8047d48:	00002c06 	br	8047dfc <vunlink+0x1ec>
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
 8047d4c:	e0bffb17 	ldw	r2,-20(fp)
 8047d50:	1080058b 	ldhu	r2,22(r2)
 8047d54:	10bfffcc 	andi	r2,r2,65535
 8047d58:	1080200c 	andi	r2,r2,128
 8047d5c:	10000a26 	beq	r2,zero,8047d88 <vunlink+0x178>
 8047d60:	e0bffb17 	ldw	r2,-20(fp)
 8047d64:	10800617 	ldw	r2,24(r2)
 8047d68:	10000726 	beq	r2,zero,8047d88 <vunlink+0x178>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
 8047d6c:	e0bffb17 	ldw	r2,-20(fp)
 8047d70:	10c00617 	ldw	r3,24(r2)
 8047d74:	e0bffb17 	ldw	r2,-20(fp)
 8047d78:	10800917 	ldw	r2,36(r2)
 8047d7c:	100b883a 	mov	r5,r2
 8047d80:	1809883a 	mov	r4,r3
 8047d84:	80474740 	call	8047474 <vf_free_buffer>
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
 8047d88:	e0bffb17 	ldw	r2,-20(fp)
 8047d8c:	1080058b 	ldhu	r2,22(r2)
 8047d90:	10bfffcc 	andi	r2,r2,65535
 8047d94:	1080100c 	andi	r2,r2,64
 8047d98:	10000526 	beq	r2,zero,8047db0 <vunlink+0x1a0>
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
 8047d9c:	d0a0d617 	ldw	r2,-31912(gp)
 8047da0:	10bfffc4 	addi	r2,r2,-1
 8047da4:	d0a0d615 	stw	r2,-31912(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
 8047da8:	e13ffb17 	ldw	r4,-20(fp)
 8047dac:	802cf900 	call	802cf90 <npfree>
         the vfs_file has been deleted from the list */
#ifdef VFS_AUTO_SYNC
      do_sync = 1;
#endif
      /* we were successful at our unlink */
      rc = 0;
 8047db0:	e03fff15 	stw	zero,-4(fp)

      break;
 8047db4:	0001883a 	nop
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
 8047db8:	e0bffd17 	ldw	r2,-12(fp)
 8047dbc:	10000426 	beq	r2,zero,8047dd0 <vunlink+0x1c0>
      vflast->next = vfnext;
 8047dc0:	e0bffd17 	ldw	r2,-12(fp)
 8047dc4:	e0fffa17 	ldw	r3,-24(fp)
 8047dc8:	10c00015 	stw	r3,0(r2)
 8047dcc:	00000206 	br	8047dd8 <vunlink+0x1c8>
   else
      vfsfiles = vfnext;
 8047dd0:	e0bffa17 	ldw	r2,-24(fp)
 8047dd4:	d0a0d115 	stw	r2,-31932(gp)

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
 8047dd8:	e13ffb17 	ldw	r4,-20(fp)
 8047ddc:	8047bb00 	call	8047bb0 <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
 8047de0:	00800044 	movi	r2,1
 8047de4:	d0a0d315 	stw	r2,-31924(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
 8047de8:	01000144 	movi	r4,5
 8047dec:	802ca980 	call	802ca98 <post_app_sem>
   free(name);
 8047df0:	e13ffc17 	ldw	r4,-16(fp)
 8047df4:	804a2e80 	call	804a2e8 <free>
   return rc;
 8047df8:	e0bfff17 	ldw	r2,-4(fp)
}
 8047dfc:	e037883a 	mov	sp,fp
 8047e00:	dfc00117 	ldw	ra,4(sp)
 8047e04:	df000017 	ldw	fp,0(sp)
 8047e08:	dec00204 	addi	sp,sp,8
 8047e0c:	f800283a 	ret

08047e10 <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8047e10:	defff604 	addi	sp,sp,-40
 8047e14:	dfc00915 	stw	ra,36(sp)
 8047e18:	df000815 	stw	fp,32(sp)
 8047e1c:	df000804 	addi	fp,sp,32
 8047e20:	e13ffb15 	stw	r4,-20(fp)
 8047e24:	e17ffa15 	stw	r5,-24(fp)
 8047e28:	e1bff915 	stw	r6,-28(fp)
 8047e2c:	e1fff815 	stw	r7,-32(fp)
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 8047e30:	01000144 	movi	r4,5
 8047e34:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
 8047e38:	e13ff817 	ldw	r4,-32(fp)
 8047e3c:	8048a8c0 	call	8048a8c <isvfile_locked>
 8047e40:	10004d26 	beq	r2,zero,8047f78 <vfread+0x168>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
 8047e44:	e0bff817 	ldw	r2,-32(fp)
 8047e48:	10800117 	ldw	r2,4(r2)
 8047e4c:	1000041e 	bne	r2,zero,8047e60 <vfread+0x50>
      {
         vfs_unlock();
 8047e50:	01000144 	movi	r4,5
 8047e54:	802ca980 	call	802ca98 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 8047e58:	0005883a 	mov	r2,zero
 8047e5c:	00004906 	br	8047f84 <vfread+0x174>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
 8047e60:	e0bff817 	ldw	r2,-32(fp)
 8047e64:	10800117 	ldw	r2,4(r2)
 8047e68:	10800a17 	ldw	r2,40(r2)
 8047e6c:	10001026 	beq	r2,zero,8047eb0 <vfread+0xa0>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 8047e70:	e0bff817 	ldw	r2,-32(fp)
 8047e74:	10800117 	ldw	r2,4(r2)
 8047e78:	10800a17 	ldw	r2,40(r2)
 8047e7c:	e0bffd15 	stw	r2,-12(fp)
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
 8047e80:	e0bffd17 	ldw	r2,-12(fp)
 8047e84:	10800317 	ldw	r2,12(r2)
 8047e88:	e1fff817 	ldw	r7,-32(fp)
 8047e8c:	e1bff917 	ldw	r6,-28(fp)
 8047e90:	e17ffa17 	ldw	r5,-24(fp)
 8047e94:	e13ffb17 	ldw	r4,-20(fp)
 8047e98:	103ee83a 	callr	r2
 8047e9c:	e0bffc15 	stw	r2,-16(fp)
         vfs_unlock();
 8047ea0:	01000144 	movi	r4,5
 8047ea4:	802ca980 	call	802ca98 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return rc;
 8047ea8:	e0bffc17 	ldw	r2,-16(fp)
 8047eac:	00003506 	br	8047f84 <vfread+0x174>
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
 8047eb0:	e0bff817 	ldw	r2,-32(fp)
 8047eb4:	10800117 	ldw	r2,4(r2)
 8047eb8:	10800617 	ldw	r2,24(r2)
 8047ebc:	1000041e 	bne	r2,zero,8047ed0 <vfread+0xc0>
      {
         vfs_unlock();
 8047ec0:	01000144 	movi	r4,5
 8047ec4:	802ca980 	call	802ca98 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 8047ec8:	0005883a 	mov	r2,zero
 8047ecc:	00002d06 	br	8047f84 <vfread+0x174>
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
 8047ed0:	e0fff917 	ldw	r3,-28(fp)
 8047ed4:	e0bffa17 	ldw	r2,-24(fp)
 8047ed8:	1885383a 	mul	r2,r3,r2
 8047edc:	e0bfff15 	stw	r2,-4(fp)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
 8047ee0:	e0bff817 	ldw	r2,-32(fp)
 8047ee4:	10c00217 	ldw	r3,8(r2)
 8047ee8:	e0bff817 	ldw	r2,-32(fp)
 8047eec:	10800117 	ldw	r2,4(r2)
 8047ef0:	10800617 	ldw	r2,24(r2)
 8047ef4:	1885c83a 	sub	r2,r3,r2
 8047ef8:	e0bffe15 	stw	r2,-8(fp)

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
 8047efc:	e0fffe17 	ldw	r3,-8(fp)
 8047f00:	e0bfff17 	ldw	r2,-4(fp)
 8047f04:	1885883a 	add	r2,r3,r2
 8047f08:	e0fff817 	ldw	r3,-32(fp)
 8047f0c:	18c00117 	ldw	r3,4(r3)
 8047f10:	18c00817 	ldw	r3,32(r3)
 8047f14:	1880062e 	bgeu	r3,r2,8047f30 <vfread+0x120>
            bcount = (unsigned)(vfd->file->comp_size - location);
 8047f18:	e0bff817 	ldw	r2,-32(fp)
 8047f1c:	10800117 	ldw	r2,4(r2)
 8047f20:	10c00817 	ldw	r3,32(r2)
 8047f24:	e0bffe17 	ldw	r2,-8(fp)
 8047f28:	1885c83a 	sub	r2,r3,r2
 8047f2c:	e0bfff15 	stw	r2,-4(fp)
         MEMCPY(buf, vfd->cmploc, bcount);
 8047f30:	e0bff817 	ldw	r2,-32(fp)
 8047f34:	10800217 	ldw	r2,8(r2)
 8047f38:	e1bfff17 	ldw	r6,-4(fp)
 8047f3c:	100b883a 	mov	r5,r2
 8047f40:	e13ffb17 	ldw	r4,-20(fp)
 8047f44:	8002ea40 	call	8002ea4 <memcpy>
         vfd->cmploc += bcount;
 8047f48:	e0bff817 	ldw	r2,-32(fp)
 8047f4c:	10c00217 	ldw	r3,8(r2)
 8047f50:	e0bfff17 	ldw	r2,-4(fp)
 8047f54:	1887883a 	add	r3,r3,r2
 8047f58:	e0bff817 	ldw	r2,-32(fp)
 8047f5c:	10c00215 	stw	r3,8(r2)
      }
      vfs_unlock();
 8047f60:	01000144 	movi	r4,5
 8047f64:	802ca980 	call	802ca98 <post_app_sem>
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
 8047f68:	e17ffa17 	ldw	r5,-24(fp)
 8047f6c:	e13fff17 	ldw	r4,-4(fp)
 8047f70:	800e2300 	call	800e230 <__udivsi3>
 8047f74:	00000306 	br	8047f84 <vfread+0x174>
   }

   vfs_unlock();
 8047f78:	01000144 	movi	r4,5
 8047f7c:	802ca980 	call	802ca98 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
 8047f80:	0005883a 	mov	r2,zero
#endif   /* HT_LOCALFS */
}
 8047f84:	e037883a 	mov	sp,fp
 8047f88:	dfc00117 	ldw	ra,4(sp)
 8047f8c:	df000017 	ldw	fp,0(sp)
 8047f90:	dec00204 	addi	sp,sp,8
 8047f94:	f800283a 	ret

08047f98 <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8047f98:	defff204 	addi	sp,sp,-56
 8047f9c:	dfc00d15 	stw	ra,52(sp)
 8047fa0:	df000c15 	stw	fp,48(sp)
 8047fa4:	df000c04 	addi	fp,sp,48
 8047fa8:	e13ff715 	stw	r4,-36(fp)
 8047fac:	e17ff615 	stw	r5,-40(fp)
 8047fb0:	e1bff515 	stw	r6,-44(fp)
 8047fb4:	e1fff415 	stw	r7,-48(fp)
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 8047fb8:	e13ff417 	ldw	r4,-48(fp)
 8047fbc:	8048a8c0 	call	8048a8c <isvfile_locked>
 8047fc0:	1000021e 	bne	r2,zero,8047fcc <vfwrite_locked+0x34>
   {
#ifdef HT_LOCALFS
      /* default to call on local system */
      return(fwrite(buf, size, items, (FILE*)vfd));
#else
      return EBADF;
 8047fc4:	00800244 	movi	r2,9
 8047fc8:	0000d906 	br	8048330 <vfwrite_locked+0x398>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
 8047fcc:	e0bff417 	ldw	r2,-48(fp)
 8047fd0:	10800117 	ldw	r2,4(r2)
 8047fd4:	10800a17 	ldw	r2,40(r2)
 8047fd8:	10000e26 	beq	r2,zero,8048014 <vfwrite_locked+0x7c>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 8047fdc:	e0bff417 	ldw	r2,-48(fp)
 8047fe0:	10800117 	ldw	r2,4(r2)
 8047fe4:	10800a17 	ldw	r2,40(r2)
 8047fe8:	e0bff915 	stw	r2,-28(fp)
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
 8047fec:	e0bff917 	ldw	r2,-28(fp)
 8047ff0:	10800417 	ldw	r2,16(r2)
 8047ff4:	e1fff417 	ldw	r7,-48(fp)
 8047ff8:	e1bff517 	ldw	r6,-44(fp)
 8047ffc:	e17ff617 	ldw	r5,-40(fp)
 8048000:	e13ff717 	ldw	r4,-36(fp)
 8048004:	103ee83a 	callr	r2
 8048008:	e0bff815 	stw	r2,-32(fp)
      return rc;
 804800c:	e0bff817 	ldw	r2,-32(fp)
 8048010:	0000c706 	br	8048330 <vfwrite_locked+0x398>

#else    /* HT_RWVFS */

   /* the caller is trying to write to a file that's been deleted,
      so he writes 0 data */
   if (vfd->file == NULL)
 8048014:	e0bff417 	ldw	r2,-48(fp)
 8048018:	10800117 	ldw	r2,4(r2)
 804801c:	1000021e 	bne	r2,zero,8048028 <vfwrite_locked+0x90>
   {
      return 0;
 8048020:	0005883a 	mov	r2,zero
 8048024:	0000c206 	br	8048330 <vfwrite_locked+0x398>
   }

   vfp = vfd->file;
 8048028:	e0bff417 	ldw	r2,-48(fp)
 804802c:	10800117 	ldw	r2,4(r2)
 8048030:	e0bfff15 	stw	r2,-4(fp)

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
 8048034:	e0bfff17 	ldw	r2,-4(fp)
 8048038:	1080058b 	ldhu	r2,22(r2)
 804803c:	10bfffcc 	andi	r2,r2,65535
 8048040:	1080080c 	andi	r2,r2,32
 8048044:	1000051e 	bne	r2,zero,804805c <vfwrite_locked+0xc4>
   {
      vfd->error = ENP_FILEIO;
 8048048:	e0bff417 	ldw	r2,-48(fp)
 804804c:	00fff984 	movi	r3,-26
 8048050:	10c00415 	stw	r3,16(r2)
      return 0;
 8048054:	0005883a 	mov	r2,zero
 8048058:	0000b506 	br	8048330 <vfwrite_locked+0x398>
   }

   /* compute number of bytes to write */
   bcount = size * items;
 804805c:	e0fff617 	ldw	r3,-40(fp)
 8048060:	e0bff517 	ldw	r2,-44(fp)
 8048064:	1885383a 	mul	r2,r3,r2
 8048068:	e0bffe15 	stw	r2,-8(fp)

   /* get rid of this degenerate case up front */
   if (bcount == 0)
 804806c:	e0bffe17 	ldw	r2,-8(fp)
 8048070:	1000021e 	bne	r2,zero,804807c <vfwrite_locked+0xe4>
   {
      return 0;
 8048074:	0005883a 	mov	r2,zero
 8048078:	0000ad06 	br	8048330 <vfwrite_locked+0x398>
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
 804807c:	e0bfff17 	ldw	r2,-4(fp)
 8048080:	10800617 	ldw	r2,24(r2)
 8048084:	10003d1e 	bne	r2,zero,804817c <vfwrite_locked+0x1e4>
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
 8048088:	e0bffe17 	ldw	r2,-8(fp)
 804808c:	10bfffc4 	addi	r2,r2,-1
 8048090:	1004d37a 	srli	r2,r2,13
 8048094:	10800044 	addi	r2,r2,1
 8048098:	1004937a 	slli	r2,r2,13
 804809c:	e0bffa15 	stw	r2,-24(fp)

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
 80480a0:	e13ffa17 	ldw	r4,-24(fp)
 80480a4:	80473ac0 	call	80473ac <vf_alloc_buffer>
 80480a8:	1007883a 	mov	r3,r2
 80480ac:	e0bfff17 	ldw	r2,-4(fp)
 80480b0:	10c00615 	stw	r3,24(r2)

      /* if the allocation failed */
      if (!(vfp->data))
 80480b4:	e0bfff17 	ldw	r2,-4(fp)
 80480b8:	10800617 	ldw	r2,24(r2)
 80480bc:	1000051e 	bne	r2,zero,80480d4 <vfwrite_locked+0x13c>
      {
         vfd->error = ENP_NOMEM;
 80480c0:	e0bff417 	ldw	r2,-48(fp)
 80480c4:	00fffb04 	movi	r3,-20
 80480c8:	10c00415 	stw	r3,16(r2)
         return 0;
 80480cc:	0005883a 	mov	r2,zero
 80480d0:	00009706 	br	8048330 <vfwrite_locked+0x398>
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
 80480d4:	e0bfff17 	ldw	r2,-4(fp)
 80480d8:	e0fffa17 	ldw	r3,-24(fp)
 80480dc:	10c00915 	stw	r3,36(r2)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
 80480e0:	e0bfff17 	ldw	r2,-4(fp)
 80480e4:	e0fffe17 	ldw	r3,-8(fp)
 80480e8:	10c00715 	stw	r3,28(r2)
      vfp->comp_size = bcount;
 80480ec:	e0bfff17 	ldw	r2,-4(fp)
 80480f0:	e0fffe17 	ldw	r3,-8(fp)
 80480f4:	10c00815 	stw	r3,32(r2)

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
 80480f8:	e0bfff17 	ldw	r2,-4(fp)
 80480fc:	10c00617 	ldw	r3,24(r2)
 8048100:	e0bffe17 	ldw	r2,-8(fp)
 8048104:	1887883a 	add	r3,r3,r2
 8048108:	e0bff417 	ldw	r2,-48(fp)
 804810c:	10c00215 	stw	r3,8(r2)

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
 8048110:	e0bfff17 	ldw	r2,-4(fp)
 8048114:	10c0058b 	ldhu	r3,22(r2)
 8048118:	00bfff84 	movi	r2,-2
 804811c:	1884703a 	and	r2,r3,r2
 8048120:	1007883a 	mov	r3,r2
 8048124:	e0bfff17 	ldw	r2,-4(fp)
 8048128:	10c0058d 	sth	r3,22(r2)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;
 804812c:	e0bfff17 	ldw	r2,-4(fp)
 8048130:	1080058b 	ldhu	r2,22(r2)
 8048134:	10808014 	ori	r2,r2,512
 8048138:	1007883a 	mov	r3,r2
 804813c:	e0bfff17 	ldw	r2,-4(fp)
 8048140:	10c0058d 	sth	r3,22(r2)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 8048144:	e0bfff17 	ldw	r2,-4(fp)
 8048148:	1080058b 	ldhu	r2,22(r2)
 804814c:	10802014 	ori	r2,r2,128
 8048150:	1007883a 	mov	r3,r2
 8048154:	e0bfff17 	ldw	r2,-4(fp)
 8048158:	10c0058d 	sth	r3,22(r2)

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
 804815c:	e0bfff17 	ldw	r2,-4(fp)
 8048160:	10800617 	ldw	r2,24(r2)
 8048164:	e1bffe17 	ldw	r6,-8(fp)
 8048168:	e17ff717 	ldw	r5,-36(fp)
 804816c:	1009883a 	mov	r4,r2
 8048170:	8002ea40 	call	8002ea4 <memcpy>

      /* return the number of "items" written */
      return items;
 8048174:	e0bff517 	ldw	r2,-44(fp)
 8048178:	00006d06 	br	8048330 <vfwrite_locked+0x398>
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
 804817c:	e0bff417 	ldw	r2,-48(fp)
 8048180:	10c00217 	ldw	r3,8(r2)
 8048184:	e0bfff17 	ldw	r2,-4(fp)
 8048188:	10800617 	ldw	r2,24(r2)
 804818c:	1885c83a 	sub	r2,r3,r2
 8048190:	e0bffd15 	stw	r2,-12(fp)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
 8048194:	e0fffd17 	ldw	r3,-12(fp)
 8048198:	e0bffe17 	ldw	r2,-8(fp)
 804819c:	1885883a 	add	r2,r3,r2
 80481a0:	e0ffff17 	ldw	r3,-4(fp)
 80481a4:	18c00917 	ldw	r3,36(r3)
 80481a8:	1880382e 	bgeu	r3,r2,804828c <vfwrite_locked+0x2f4>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
 80481ac:	e0fffd17 	ldw	r3,-12(fp)
 80481b0:	e0bffe17 	ldw	r2,-8(fp)
 80481b4:	1885883a 	add	r2,r3,r2
 80481b8:	10bfffc4 	addi	r2,r2,-1
 80481bc:	1004d37a 	srli	r2,r2,13
 80481c0:	10800044 	addi	r2,r2,1
 80481c4:	1004937a 	slli	r2,r2,13
 80481c8:	e0bffc15 	stw	r2,-16(fp)
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
 80481cc:	e13ffc17 	ldw	r4,-16(fp)
 80481d0:	80473ac0 	call	80473ac <vf_alloc_buffer>
 80481d4:	e0bffb15 	stw	r2,-20(fp)

      /* check for allocation failure */
      if (!new_buffer)
 80481d8:	e0bffb17 	ldw	r2,-20(fp)
 80481dc:	1000051e 	bne	r2,zero,80481f4 <vfwrite_locked+0x25c>
      {
         vfd->error = ENP_NOMEM;
 80481e0:	e0bff417 	ldw	r2,-48(fp)
 80481e4:	00fffb04 	movi	r3,-20
 80481e8:	10c00415 	stw	r3,16(r2)
         return 0;
 80481ec:	0005883a 	mov	r2,zero
 80481f0:	00004f06 	br	8048330 <vfwrite_locked+0x398>
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 80481f4:	e0bfff17 	ldw	r2,-4(fp)
 80481f8:	10c00617 	ldw	r3,24(r2)
 80481fc:	e0bfff17 	ldw	r2,-4(fp)
 8048200:	10800817 	ldw	r2,32(r2)
 8048204:	100d883a 	mov	r6,r2
 8048208:	180b883a 	mov	r5,r3
 804820c:	e13ffb17 	ldw	r4,-20(fp)
 8048210:	8002ea40 	call	8002ea4 <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
 8048214:	e0bfff17 	ldw	r2,-4(fp)
 8048218:	1080058b 	ldhu	r2,22(r2)
 804821c:	10bfffcc 	andi	r2,r2,65535
 8048220:	1080200c 	andi	r2,r2,128
 8048224:	10000726 	beq	r2,zero,8048244 <vfwrite_locked+0x2ac>
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
 8048228:	e0bfff17 	ldw	r2,-4(fp)
 804822c:	10c00617 	ldw	r3,24(r2)
 8048230:	e0bfff17 	ldw	r2,-4(fp)
 8048234:	10800917 	ldw	r2,36(r2)
 8048238:	100b883a 	mov	r5,r2
 804823c:	1809883a 	mov	r4,r3
 8048240:	80474740 	call	8047474 <vf_free_buffer>
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
 8048244:	e0bfff17 	ldw	r2,-4(fp)
 8048248:	e0fffb17 	ldw	r3,-20(fp)
 804824c:	10c00615 	stw	r3,24(r2)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
 8048250:	e0bfff17 	ldw	r2,-4(fp)
 8048254:	e0fffc17 	ldw	r3,-16(fp)
 8048258:	10c00915 	stw	r3,36(r2)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 804825c:	e0bfff17 	ldw	r2,-4(fp)
 8048260:	1080058b 	ldhu	r2,22(r2)
 8048264:	10802014 	ori	r2,r2,128
 8048268:	1007883a 	mov	r3,r2
 804826c:	e0bfff17 	ldw	r2,-4(fp)
 8048270:	10c0058d 	sth	r3,22(r2)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
 8048274:	e0bfff17 	ldw	r2,-4(fp)
 8048278:	10c00617 	ldw	r3,24(r2)
 804827c:	e0bffd17 	ldw	r2,-12(fp)
 8048280:	1887883a 	add	r3,r3,r2
 8048284:	e0bff417 	ldw	r2,-48(fp)
 8048288:	10c00215 	stw	r3,8(r2)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
 804828c:	e0bff417 	ldw	r2,-48(fp)
 8048290:	10800217 	ldw	r2,8(r2)
 8048294:	e1bffe17 	ldw	r6,-8(fp)
 8048298:	e17ff717 	ldw	r5,-36(fp)
 804829c:	1009883a 	mov	r4,r2
 80482a0:	8002ea40 	call	8002ea4 <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
 80482a4:	e0bff417 	ldw	r2,-48(fp)
 80482a8:	10c00217 	ldw	r3,8(r2)
 80482ac:	e0bffe17 	ldw	r2,-8(fp)
 80482b0:	1887883a 	add	r3,r3,r2
 80482b4:	e0bff417 	ldw	r2,-48(fp)
 80482b8:	10c00215 	stw	r3,8(r2)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
 80482bc:	e0fffd17 	ldw	r3,-12(fp)
 80482c0:	e0bffe17 	ldw	r2,-8(fp)
 80482c4:	1885883a 	add	r2,r3,r2
 80482c8:	e0ffff17 	ldw	r3,-4(fp)
 80482cc:	18c00817 	ldw	r3,32(r3)
 80482d0:	1880052e 	bgeu	r3,r2,80482e8 <vfwrite_locked+0x350>
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
 80482d4:	e0fffd17 	ldw	r3,-12(fp)
 80482d8:	e0bffe17 	ldw	r2,-8(fp)
 80482dc:	1887883a 	add	r3,r3,r2
 80482e0:	e0bfff17 	ldw	r2,-4(fp)
 80482e4:	10c00815 	stw	r3,32(r2)
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
 80482e8:	e0bfff17 	ldw	r2,-4(fp)
 80482ec:	10c00817 	ldw	r3,32(r2)
 80482f0:	e0bfff17 	ldw	r2,-4(fp)
 80482f4:	10c00715 	stw	r3,28(r2)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
 80482f8:	e0bfff17 	ldw	r2,-4(fp)
 80482fc:	10c0058b 	ldhu	r3,22(r2)
 8048300:	00bfff84 	movi	r2,-2
 8048304:	1884703a 	and	r2,r3,r2
 8048308:	1007883a 	mov	r3,r2
 804830c:	e0bfff17 	ldw	r2,-4(fp)
 8048310:	10c0058d 	sth	r3,22(r2)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 8048314:	e0bfff17 	ldw	r2,-4(fp)
 8048318:	1080058b 	ldhu	r2,22(r2)
 804831c:	10808014 	ori	r2,r2,512
 8048320:	1007883a 	mov	r3,r2
 8048324:	e0bfff17 	ldw	r2,-4(fp)
 8048328:	10c0058d 	sth	r3,22(r2)

   /* return the number of "items" written */
   return items;
 804832c:	e0bff517 	ldw	r2,-44(fp)

#endif   /* HT_RWVFS */
}
 8048330:	e037883a 	mov	sp,fp
 8048334:	dfc00117 	ldw	ra,4(sp)
 8048338:	df000017 	ldw	fp,0(sp)
 804833c:	dec00204 	addi	sp,sp,8
 8048340:	f800283a 	ret

08048344 <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 8048344:	defff904 	addi	sp,sp,-28
 8048348:	dfc00615 	stw	ra,24(sp)
 804834c:	df000515 	stw	fp,20(sp)
 8048350:	df000504 	addi	fp,sp,20
 8048354:	e13ffe15 	stw	r4,-8(fp)
 8048358:	e17ffd15 	stw	r5,-12(fp)
 804835c:	e1bffc15 	stw	r6,-16(fp)
 8048360:	e1fffb15 	stw	r7,-20(fp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 8048364:	01000144 	movi	r4,5
 8048368:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
 804836c:	e1fffb17 	ldw	r7,-20(fp)
 8048370:	e1bffc17 	ldw	r6,-16(fp)
 8048374:	e17ffd17 	ldw	r5,-12(fp)
 8048378:	e13ffe17 	ldw	r4,-8(fp)
 804837c:	8047f980 	call	8047f98 <vfwrite_locked>
 8048380:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 8048384:	01000144 	movi	r4,5
 8048388:	802ca980 	call	802ca98 <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
 804838c:	e0bfff17 	ldw	r2,-4(fp)
}
 8048390:	e037883a 	mov	sp,fp
 8048394:	dfc00117 	ldw	ra,4(sp)
 8048398:	df000017 	ldw	fp,0(sp)
 804839c:	dec00204 	addi	sp,sp,8
 80483a0:	f800283a 	ret

080483a4 <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
 80483a4:	defff904 	addi	sp,sp,-28
 80483a8:	dfc00615 	stw	ra,24(sp)
 80483ac:	df000515 	stw	fp,20(sp)
 80483b0:	df000504 	addi	fp,sp,20
 80483b4:	e13ffd15 	stw	r4,-12(fp)
 80483b8:	e17ffc15 	stw	r5,-16(fp)
 80483bc:	e1bffb15 	stw	r6,-20(fp)
   /* lock the VFS */
   vfs_lock();
 80483c0:	01000144 	movi	r4,5
 80483c4:	802c9e40 	call	802c9e4 <wait_app_sem>

   if (isvfile_locked(vfd))
 80483c8:	e13ffd17 	ldw	r4,-12(fp)
 80483cc:	8048a8c0 	call	8048a8c <isvfile_locked>
 80483d0:	10004526 	beq	r2,zero,80484e8 <vfseek+0x144>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
 80483d4:	e0bffd17 	ldw	r2,-12(fp)
 80483d8:	10800117 	ldw	r2,4(r2)
 80483dc:	1000041e 	bne	r2,zero,80483f0 <vfseek+0x4c>
      {
         vfs_unlock();
 80483e0:	01000144 	movi	r4,5
 80483e4:	802ca980 	call	802ca98 <post_app_sem>
         return -1;
 80483e8:	00bfffc4 	movi	r2,-1
 80483ec:	00004106 	br	80484f4 <vfseek+0x150>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 80483f0:	e0bffd17 	ldw	r2,-12(fp)
 80483f4:	10800117 	ldw	r2,4(r2)
 80483f8:	10800a17 	ldw	r2,40(r2)
 80483fc:	10000f26 	beq	r2,zero,804843c <vfseek+0x98>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
 8048400:	e0bffd17 	ldw	r2,-12(fp)
 8048404:	10800117 	ldw	r2,4(r2)
 8048408:	10800a17 	ldw	r2,40(r2)
 804840c:	e0bfff15 	stw	r2,-4(fp)
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
 8048410:	e0bfff17 	ldw	r2,-4(fp)
 8048414:	10800517 	ldw	r2,20(r2)
 8048418:	e1bffb17 	ldw	r6,-20(fp)
 804841c:	e17ffc17 	ldw	r5,-16(fp)
 8048420:	e13ffd17 	ldw	r4,-12(fp)
 8048424:	103ee83a 	callr	r2
 8048428:	e0bffe15 	stw	r2,-8(fp)
         vfs_unlock();
 804842c:	01000144 	movi	r4,5
 8048430:	802ca980 	call	802ca98 <post_app_sem>
         return rc;
 8048434:	e0bffe17 	ldw	r2,-8(fp)
 8048438:	00002e06 	br	80484f4 <vfseek+0x150>
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
 804843c:	e0bffb17 	ldw	r2,-20(fp)
 8048440:	108000a0 	cmpeqi	r2,r2,2
 8048444:	1000181e 	bne	r2,zero,80484a8 <vfseek+0x104>
 8048448:	e0bffb17 	ldw	r2,-20(fp)
 804844c:	108000c8 	cmpgei	r2,r2,3
 8048450:	1000211e 	bne	r2,zero,80484d8 <vfseek+0x134>
 8048454:	e0bffb17 	ldw	r2,-20(fp)
 8048458:	10000426 	beq	r2,zero,804846c <vfseek+0xc8>
 804845c:	e0bffb17 	ldw	r2,-20(fp)
 8048460:	10800060 	cmpeqi	r2,r2,1
 8048464:	1000091e 	bne	r2,zero,804848c <vfseek+0xe8>
 8048468:	00001b06 	br	80484d8 <vfseek+0x134>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
 804846c:	e0bffd17 	ldw	r2,-12(fp)
 8048470:	10800117 	ldw	r2,4(r2)
 8048474:	10c00617 	ldw	r3,24(r2)
 8048478:	e0bffc17 	ldw	r2,-16(fp)
 804847c:	1887883a 	add	r3,r3,r2
 8048480:	e0bffd17 	ldw	r2,-12(fp)
 8048484:	10c00215 	stw	r3,8(r2)
         break;
 8048488:	00001306 	br	80484d8 <vfseek+0x134>
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
 804848c:	e0bffd17 	ldw	r2,-12(fp)
 8048490:	10c00217 	ldw	r3,8(r2)
 8048494:	e0bffc17 	ldw	r2,-16(fp)
 8048498:	1887883a 	add	r3,r3,r2
 804849c:	e0bffd17 	ldw	r2,-12(fp)
 80484a0:	10c00215 	stw	r3,8(r2)
         break;
 80484a4:	00000c06 	br	80484d8 <vfseek+0x134>
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
 80484a8:	e0bffd17 	ldw	r2,-12(fp)
 80484ac:	10800117 	ldw	r2,4(r2)
 80484b0:	10c00617 	ldw	r3,24(r2)
 80484b4:	e0bffd17 	ldw	r2,-12(fp)
 80484b8:	10800117 	ldw	r2,4(r2)
 80484bc:	11000817 	ldw	r4,32(r2)
 80484c0:	e0bffc17 	ldw	r2,-16(fp)
 80484c4:	2085883a 	add	r2,r4,r2
 80484c8:	1887883a 	add	r3,r3,r2
 80484cc:	e0bffd17 	ldw	r2,-12(fp)
 80484d0:	10c00215 	stw	r3,8(r2)
         break;
 80484d4:	0001883a 	nop
      }
      vfs_unlock();
 80484d8:	01000144 	movi	r4,5
 80484dc:	802ca980 	call	802ca98 <post_app_sem>
      return(0);
 80484e0:	0005883a 	mov	r2,zero
 80484e4:	00000306 	br	80484f4 <vfseek+0x150>
   }

   vfs_unlock();
 80484e8:	01000144 	movi	r4,5
 80484ec:	802ca980 	call	802ca98 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
 80484f0:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 80484f4:	e037883a 	mov	sp,fp
 80484f8:	dfc00117 	ldw	ra,4(sp)
 80484fc:	df000017 	ldw	fp,0(sp)
 8048500:	dec00204 	addi	sp,sp,8
 8048504:	f800283a 	ret

08048508 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
 8048508:	defffb04 	addi	sp,sp,-20
 804850c:	dfc00415 	stw	ra,16(sp)
 8048510:	df000315 	stw	fp,12(sp)
 8048514:	df000304 	addi	fp,sp,12
 8048518:	e13ffd15 	stw	r4,-12(fp)
   /* lock the VFS */
   vfs_lock();
 804851c:	01000144 	movi	r4,5
 8048520:	802c9e40 	call	802c9e4 <wait_app_sem>

   if (isvfile_locked(vfd))
 8048524:	e13ffd17 	ldw	r4,-12(fp)
 8048528:	8048a8c0 	call	8048a8c <isvfile_locked>
 804852c:	10003126 	beq	r2,zero,80485f4 <vftell+0xec>
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
 8048530:	e0bffd17 	ldw	r2,-12(fp)
 8048534:	10800117 	ldw	r2,4(r2)
 8048538:	1000041e 	bne	r2,zero,804854c <vftell+0x44>
      {
         vfs_unlock();
 804853c:	01000144 	movi	r4,5
 8048540:	802ca980 	call	802ca98 <post_app_sem>
         return -1;
 8048544:	00bfffc4 	movi	r2,-1
 8048548:	00002d06 	br	8048600 <vftell+0xf8>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 804854c:	e0bffd17 	ldw	r2,-12(fp)
 8048550:	10800117 	ldw	r2,4(r2)
 8048554:	10800a17 	ldw	r2,40(r2)
 8048558:	10000d26 	beq	r2,zero,8048590 <vftell+0x88>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 804855c:	e0bffd17 	ldw	r2,-12(fp)
 8048560:	10800117 	ldw	r2,4(r2)
 8048564:	10800a17 	ldw	r2,40(r2)
 8048568:	e0bfff15 	stw	r2,-4(fp)
         long  rc;

         rc = vfp->r_ftell(vfd);
 804856c:	e0bfff17 	ldw	r2,-4(fp)
 8048570:	10800617 	ldw	r2,24(r2)
 8048574:	e13ffd17 	ldw	r4,-12(fp)
 8048578:	103ee83a 	callr	r2
 804857c:	e0bffe15 	stw	r2,-8(fp)
         vfs_unlock();
 8048580:	01000144 	movi	r4,5
 8048584:	802ca980 	call	802ca98 <post_app_sem>
         return rc;
 8048588:	e0bffe17 	ldw	r2,-8(fp)
 804858c:	00001c06 	br	8048600 <vftell+0xf8>
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
 8048590:	e0bffd17 	ldw	r2,-12(fp)
 8048594:	10c00217 	ldw	r3,8(r2)
 8048598:	e0bffd17 	ldw	r2,-12(fp)
 804859c:	10800117 	ldw	r2,4(r2)
 80485a0:	11000617 	ldw	r4,24(r2)
 80485a4:	e0bffd17 	ldw	r2,-12(fp)
 80485a8:	10800117 	ldw	r2,4(r2)
 80485ac:	10800817 	ldw	r2,32(r2)
 80485b0:	2085883a 	add	r2,r4,r2
 80485b4:	1880061e 	bne	r3,r2,80485d0 <vftell+0xc8>
      {
         vfs_unlock();
 80485b8:	01000144 	movi	r4,5
 80485bc:	802ca980 	call	802ca98 <post_app_sem>

         return vfd->file->comp_size;
 80485c0:	e0bffd17 	ldw	r2,-12(fp)
 80485c4:	10800117 	ldw	r2,4(r2)
 80485c8:	10800817 	ldw	r2,32(r2)
 80485cc:	00000c06 	br	8048600 <vftell+0xf8>
      }
      else
      {
         vfs_unlock();
 80485d0:	01000144 	movi	r4,5
 80485d4:	802ca980 	call	802ca98 <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
 80485d8:	e0bffd17 	ldw	r2,-12(fp)
 80485dc:	10c00217 	ldw	r3,8(r2)
 80485e0:	e0bffd17 	ldw	r2,-12(fp)
 80485e4:	10800117 	ldw	r2,4(r2)
 80485e8:	10800617 	ldw	r2,24(r2)
 80485ec:	1885c83a 	sub	r2,r3,r2
 80485f0:	00000306 	br	8048600 <vftell+0xf8>
      }
   }

   vfs_unlock();
 80485f4:	01000144 	movi	r4,5
 80485f8:	802ca980 	call	802ca98 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
 80485fc:	00800244 	movi	r2,9
#endif   /* HT_LOCALFS */
}
 8048600:	e037883a 	mov	sp,fp
 8048604:	dfc00117 	ldw	ra,4(sp)
 8048608:	df000017 	ldw	fp,0(sp)
 804860c:	dec00204 	addi	sp,sp,8
 8048610:	f800283a 	ret

08048614 <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
 8048614:	defffb04 	addi	sp,sp,-20
 8048618:	dfc00415 	stw	ra,16(sp)
 804861c:	df000315 	stw	fp,12(sp)
 8048620:	df000304 	addi	fp,sp,12
 8048624:	e13ffd15 	stw	r4,-12(fp)
   int   chr;

   if (isvfile_locked(vfd))
 8048628:	e13ffd17 	ldw	r4,-12(fp)
 804862c:	8048a8c0 	call	8048a8c <isvfile_locked>
 8048630:	10002f26 	beq	r2,zero,80486f0 <vgetc_locked+0xdc>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
 8048634:	e0bffd17 	ldw	r2,-12(fp)
 8048638:	10800117 	ldw	r2,4(r2)
 804863c:	1000021e 	bne	r2,zero,8048648 <vgetc_locked+0x34>
      {
         return EOF;
 8048640:	00bfffc4 	movi	r2,-1
 8048644:	00002c06 	br	80486f8 <vgetc_locked+0xe4>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 8048648:	e0bffd17 	ldw	r2,-12(fp)
 804864c:	10800117 	ldw	r2,4(r2)
 8048650:	10800a17 	ldw	r2,40(r2)
 8048654:	10000926 	beq	r2,zero,804867c <vgetc_locked+0x68>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 8048658:	e0bffd17 	ldw	r2,-12(fp)
 804865c:	10800117 	ldw	r2,4(r2)
 8048660:	10800a17 	ldw	r2,40(r2)
 8048664:	e0bffe15 	stw	r2,-8(fp)
         return (vfp->r_fgetc(vfd));
 8048668:	e0bffe17 	ldw	r2,-8(fp)
 804866c:	10800717 	ldw	r2,28(r2)
 8048670:	e13ffd17 	ldw	r4,-12(fp)
 8048674:	103ee83a 	callr	r2
 8048678:	00001f06 	br	80486f8 <vgetc_locked+0xe4>
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
 804867c:	e0bffd17 	ldw	r2,-12(fp)
 8048680:	10800117 	ldw	r2,4(r2)
 8048684:	10800617 	ldw	r2,24(r2)
 8048688:	1000021e 	bne	r2,zero,8048694 <vgetc_locked+0x80>
         return EOF;
 804868c:	00bfffc4 	movi	r2,-1
 8048690:	00001906 	br	80486f8 <vgetc_locked+0xe4>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
 8048694:	e0bffd17 	ldw	r2,-12(fp)
 8048698:	10c00217 	ldw	r3,8(r2)
 804869c:	e0bffd17 	ldw	r2,-12(fp)
 80486a0:	10800117 	ldw	r2,4(r2)
 80486a4:	11000617 	ldw	r4,24(r2)
 80486a8:	e0bffd17 	ldw	r2,-12(fp)
 80486ac:	10800117 	ldw	r2,4(r2)
 80486b0:	10800817 	ldw	r2,32(r2)
 80486b4:	2085883a 	add	r2,r4,r2
 80486b8:	18800336 	bltu	r3,r2,80486c8 <vgetc_locked+0xb4>
            chr = EOF;
 80486bc:	00bfffc4 	movi	r2,-1
 80486c0:	e0bfff15 	stw	r2,-4(fp)
 80486c4:	00000806 	br	80486e8 <vgetc_locked+0xd4>
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
 80486c8:	e0bffd17 	ldw	r2,-12(fp)
 80486cc:	10800217 	ldw	r2,8(r2)
 80486d0:	11000044 	addi	r4,r2,1
 80486d4:	e0fffd17 	ldw	r3,-12(fp)
 80486d8:	19000215 	stw	r4,8(r3)
 80486dc:	10800003 	ldbu	r2,0(r2)
 80486e0:	10803fcc 	andi	r2,r2,255
 80486e4:	e0bfff15 	stw	r2,-4(fp)
#ifdef HTML_COMPRESSION
      }  /* need to close brace form if...else; */
#endif   /* HTML_COMPRESSION */

      return chr;
 80486e8:	e0bfff17 	ldw	r2,-4(fp)
 80486ec:	00000206 	br	80486f8 <vgetc_locked+0xe4>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
 80486f0:	802c3fc0 	call	802c3fc <dtrap>
   return EOF;
 80486f4:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 80486f8:	e037883a 	mov	sp,fp
 80486fc:	dfc00117 	ldw	ra,4(sp)
 8048700:	df000017 	ldw	fp,0(sp)
 8048704:	dec00204 	addi	sp,sp,8
 8048708:	f800283a 	ret

0804870c <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 804870c:	defffc04 	addi	sp,sp,-16
 8048710:	dfc00315 	stw	ra,12(sp)
 8048714:	df000215 	stw	fp,8(sp)
 8048718:	df000204 	addi	fp,sp,8
 804871c:	e13ffe15 	stw	r4,-8(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 8048720:	01000144 	movi	r4,5
 8048724:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
 8048728:	e13ffe17 	ldw	r4,-8(fp)
 804872c:	80486140 	call	8048614 <vgetc_locked>
 8048730:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 8048734:	01000144 	movi	r4,5
 8048738:	802ca980 	call	802ca98 <post_app_sem>
   return rc;
 804873c:	e0bfff17 	ldw	r2,-4(fp)
}
 8048740:	e037883a 	mov	sp,fp
 8048744:	dfc00117 	ldw	ra,4(sp)
 8048748:	df000017 	ldw	fp,0(sp)
 804874c:	dec00204 	addi	sp,sp,8
 8048750:	f800283a 	ret

08048754 <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
 8048754:	defffb04 	addi	sp,sp,-20
 8048758:	dfc00415 	stw	ra,16(sp)
 804875c:	df000315 	stw	fp,12(sp)
 8048760:	df000304 	addi	fp,sp,12
 8048764:	e13ffd15 	stw	r4,-12(fp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
 8048768:	e0bffd17 	ldw	r2,-12(fp)
 804876c:	10800003 	ldbu	r2,0(r2)
 8048770:	10803fcc 	andi	r2,r2,255
 8048774:	1080201c 	xori	r2,r2,128
 8048778:	10bfe004 	addi	r2,r2,-128
 804877c:	10800be0 	cmpeqi	r2,r2,47
 8048780:	1000071e 	bne	r2,zero,80487a0 <vfslookup_locked+0x4c>
 8048784:	e0bffd17 	ldw	r2,-12(fp)
 8048788:	10800003 	ldbu	r2,0(r2)
 804878c:	10803fcc 	andi	r2,r2,255
 8048790:	1080201c 	xori	r2,r2,128
 8048794:	10bfe004 	addi	r2,r2,-128
 8048798:	10801718 	cmpnei	r2,r2,92
 804879c:	1000191e 	bne	r2,zero,8048804 <vfslookup_locked+0xb0>
   {
      cp = strippath(name);
 80487a0:	e13ffd17 	ldw	r4,-12(fp)
 80487a4:	80488c00 	call	80488c0 <strippath>
 80487a8:	e0bffe15 	stw	r2,-8(fp)

      if (!cp) /* strippath coundn't match our path */
 80487ac:	e0bffe17 	ldw	r2,-8(fp)
 80487b0:	1000121e 	bne	r2,zero,80487fc <vfslookup_locked+0xa8>
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
 80487b4:	e0bffd17 	ldw	r2,-12(fp)
 80487b8:	10800003 	ldbu	r2,0(r2)
 80487bc:	10803fcc 	andi	r2,r2,255
 80487c0:	1080201c 	xori	r2,r2,128
 80487c4:	10bfe004 	addi	r2,r2,-128
 80487c8:	10800be0 	cmpeqi	r2,r2,47
 80487cc:	1000071e 	bne	r2,zero,80487ec <vfslookup_locked+0x98>
 80487d0:	e0bffd17 	ldw	r2,-12(fp)
 80487d4:	10800003 	ldbu	r2,0(r2)
 80487d8:	10803fcc 	andi	r2,r2,255
 80487dc:	1080201c 	xori	r2,r2,128
 80487e0:	10bfe004 	addi	r2,r2,-128
 80487e4:	10801718 	cmpnei	r2,r2,92
 80487e8:	1000061e 	bne	r2,zero,8048804 <vfslookup_locked+0xb0>
            name++;
 80487ec:	e0bffd17 	ldw	r2,-12(fp)
 80487f0:	10800044 	addi	r2,r2,1
 80487f4:	e0bffd15 	stw	r2,-12(fp)
 80487f8:	00000206 	br	8048804 <vfslookup_locked+0xb0>
      }
      else
         name = cp ;
 80487fc:	e0bffe17 	ldw	r2,-8(fp)
 8048800:	e0bffd15 	stw	r2,-12(fp)
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
 8048804:	01400fc4 	movi	r5,63
 8048808:	e13ffd17 	ldw	r4,-12(fp)
 804880c:	804a3b00 	call	804a3b0 <strchr>
 8048810:	10000326 	beq	r2,zero,8048820 <vfslookup_locked+0xcc>
   {
      dtrap(); /* is this still allowed? */
 8048814:	802c3fc0 	call	802c3fc <dtrap>
      return NULL;
 8048818:	0005883a 	mov	r2,zero
 804881c:	00001106 	br	8048864 <vfslookup_locked+0x110>
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 8048820:	d0a0d117 	ldw	r2,-31932(gp)
 8048824:	e0bfff15 	stw	r2,-4(fp)
 8048828:	00000b06 	br	8048858 <vfslookup_locked+0x104>
   {
      if (strcmp(name, vp->name) == 0)
 804882c:	e0bfff17 	ldw	r2,-4(fp)
 8048830:	10800104 	addi	r2,r2,4
 8048834:	100b883a 	mov	r5,r2
 8048838:	e13ffd17 	ldw	r4,-12(fp)
 804883c:	800d15c0 	call	800d15c <strcmp>
 8048840:	1000021e 	bne	r2,zero,804884c <vfslookup_locked+0xf8>
         return vp;
 8048844:	e0bfff17 	ldw	r2,-4(fp)
 8048848:	00000606 	br	8048864 <vfslookup_locked+0x110>
   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 804884c:	e0bfff17 	ldw	r2,-4(fp)
 8048850:	10800017 	ldw	r2,0(r2)
 8048854:	e0bfff15 	stw	r2,-4(fp)
 8048858:	e0bfff17 	ldw	r2,-4(fp)
 804885c:	103ff31e 	bne	r2,zero,804882c <vfslookup_locked+0xd8>
   }

   return NULL;   /* fall to here if not found in for loop */
 8048860:	0005883a 	mov	r2,zero
}
 8048864:	e037883a 	mov	sp,fp
 8048868:	dfc00117 	ldw	ra,4(sp)
 804886c:	df000017 	ldw	fp,0(sp)
 8048870:	dec00204 	addi	sp,sp,8
 8048874:	f800283a 	ret

08048878 <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 8048878:	defffc04 	addi	sp,sp,-16
 804887c:	dfc00315 	stw	ra,12(sp)
 8048880:	df000215 	stw	fp,8(sp)
 8048884:	df000204 	addi	fp,sp,8
 8048888:	e13ffe15 	stw	r4,-8(fp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 804888c:	01000144 	movi	r4,5
 8048890:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
 8048894:	e13ffe17 	ldw	r4,-8(fp)
 8048898:	80487540 	call	8048754 <vfslookup_locked>
 804889c:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 80488a0:	01000144 	movi	r4,5
 80488a4:	802ca980 	call	802ca98 <post_app_sem>
   return vp;
 80488a8:	e0bfff17 	ldw	r2,-4(fp)
}
 80488ac:	e037883a 	mov	sp,fp
 80488b0:	dfc00117 	ldw	ra,4(sp)
 80488b4:	df000017 	ldw	fp,0(sp)
 80488b8:	dec00204 	addi	sp,sp,8
 80488bc:	f800283a 	ret

080488c0 <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
 80488c0:	defff904 	addi	sp,sp,-28
 80488c4:	dfc00615 	stw	ra,24(sp)
 80488c8:	df000515 	stw	fp,20(sp)
 80488cc:	df000504 	addi	fp,sp,20
 80488d0:	e13ffb15 	stw	r4,-20(fp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
 80488d4:	e13ffb17 	ldw	r4,-20(fp)
 80488d8:	802817c0 	call	802817c <uslash>
 80488dc:	e0bffe15 	stw	r2,-8(fp)
   path = http_root_path; /* The servers root path, at least one UNIX slash */
 80488e0:	d0a05317 	ldw	r2,-32436(gp)
 80488e4:	e0bfff15 	stw	r2,-4(fp)
   while (*path && *ntmp)
 80488e8:	00003a06 	br	80489d4 <strippath+0x114>
   {
      while (*path == '/') path++;   /* strip leading slash */
 80488ec:	e0bfff17 	ldw	r2,-4(fp)
 80488f0:	10800044 	addi	r2,r2,1
 80488f4:	e0bfff15 	stw	r2,-4(fp)
 80488f8:	e0bfff17 	ldw	r2,-4(fp)
 80488fc:	10800003 	ldbu	r2,0(r2)
 8048900:	10803fcc 	andi	r2,r2,255
 8048904:	1080201c 	xori	r2,r2,128
 8048908:	10bfe004 	addi	r2,r2,-128
 804890c:	10800be0 	cmpeqi	r2,r2,47
 8048910:	103ff61e 	bne	r2,zero,80488ec <strippath+0x2c>
         if (*path == 0)
 8048914:	e0bfff17 	ldw	r2,-4(fp)
 8048918:	10800003 	ldbu	r2,0(r2)
 804891c:	10803fcc 	andi	r2,r2,255
 8048920:	1080201c 	xori	r2,r2,128
 8048924:	10bfe004 	addi	r2,r2,-128
 8048928:	10003726 	beq	r2,zero,8048a08 <strippath+0x148>
         break;
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
 804892c:	01400bc4 	movi	r5,47
 8048930:	e13fff17 	ldw	r4,-4(fp)
 8048934:	804a3b00 	call	804a3b0 <strchr>
 8048938:	e0bffc15 	stw	r2,-16(fp)
      if (ptmp)
 804893c:	e0bffc17 	ldw	r2,-16(fp)
 8048940:	10000526 	beq	r2,zero,8048958 <strippath+0x98>
         dirlen = ptmp - path;
 8048944:	e0fffc17 	ldw	r3,-16(fp)
 8048948:	e0bfff17 	ldw	r2,-4(fp)
 804894c:	1885c83a 	sub	r2,r3,r2
 8048950:	e0bffd15 	stw	r2,-12(fp)
 8048954:	00000706 	br	8048974 <strippath+0xb4>
      else
         dirlen = strlen(path);
 8048958:	e13fff17 	ldw	r4,-4(fp)
 804895c:	8003a1c0 	call	8003a1c <strlen>
 8048960:	e0bffd15 	stw	r2,-12(fp)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
 8048964:	00000306 	br	8048974 <strippath+0xb4>
 8048968:	e0bffe17 	ldw	r2,-8(fp)
 804896c:	10800044 	addi	r2,r2,1
 8048970:	e0bffe15 	stw	r2,-8(fp)
 8048974:	e0bffe17 	ldw	r2,-8(fp)
 8048978:	10800003 	ldbu	r2,0(r2)
 804897c:	10803fcc 	andi	r2,r2,255
 8048980:	1080201c 	xori	r2,r2,128
 8048984:	10bfe004 	addi	r2,r2,-128
 8048988:	10800be0 	cmpeqi	r2,r2,47
 804898c:	103ff61e 	bne	r2,zero,8048968 <strippath+0xa8>
         if (strncmp(ntmp, path, dirlen) == 0)
 8048990:	e0bffd17 	ldw	r2,-12(fp)
 8048994:	100d883a 	mov	r6,r2
 8048998:	e17fff17 	ldw	r5,-4(fp)
 804899c:	e13ffe17 	ldw	r4,-8(fp)
 80489a0:	804a5980 	call	804a598 <strncmp>
 80489a4:	1000091e 	bne	r2,zero,80489cc <strippath+0x10c>
      {
         path += dirlen;
 80489a8:	e0bffd17 	ldw	r2,-12(fp)
 80489ac:	e0ffff17 	ldw	r3,-4(fp)
 80489b0:	1885883a 	add	r2,r3,r2
 80489b4:	e0bfff15 	stw	r2,-4(fp)
         ntmp += dirlen;
 80489b8:	e0bffd17 	ldw	r2,-12(fp)
 80489bc:	e0fffe17 	ldw	r3,-8(fp)
 80489c0:	1885883a 	add	r2,r3,r2
 80489c4:	e0bffe15 	stw	r2,-8(fp)
 80489c8:	00000206 	br	80489d4 <strippath+0x114>
      }
      else
         return NULL;   /* didn't match */
 80489cc:	0005883a 	mov	r2,zero
 80489d0:	00002906 	br	8048a78 <strippath+0x1b8>
   while (*path && *ntmp)
 80489d4:	e0bfff17 	ldw	r2,-4(fp)
 80489d8:	10800003 	ldbu	r2,0(r2)
 80489dc:	10803fcc 	andi	r2,r2,255
 80489e0:	1080201c 	xori	r2,r2,128
 80489e4:	10bfe004 	addi	r2,r2,-128
 80489e8:	10000826 	beq	r2,zero,8048a0c <strippath+0x14c>
 80489ec:	e0bffe17 	ldw	r2,-8(fp)
 80489f0:	10800003 	ldbu	r2,0(r2)
 80489f4:	10803fcc 	andi	r2,r2,255
 80489f8:	1080201c 	xori	r2,r2,128
 80489fc:	10bfe004 	addi	r2,r2,-128
 8048a00:	103fbd1e 	bne	r2,zero,80488f8 <strippath+0x38>
 8048a04:	00000106 	br	8048a0c <strippath+0x14c>
         break;
 8048a08:	0001883a 	nop
   }
   if (*path == '\0')
 8048a0c:	e0bfff17 	ldw	r2,-4(fp)
 8048a10:	10800003 	ldbu	r2,0(r2)
 8048a14:	10803fcc 	andi	r2,r2,255
 8048a18:	1080201c 	xori	r2,r2,128
 8048a1c:	10bfe004 	addi	r2,r2,-128
 8048a20:	1000141e 	bne	r2,zero,8048a74 <strippath+0x1b4>
   {
      while (*ntmp == '\\' || *ntmp == '/')
 8048a24:	00000306 	br	8048a34 <strippath+0x174>
         ntmp++;
 8048a28:	e0bffe17 	ldw	r2,-8(fp)
 8048a2c:	10800044 	addi	r2,r2,1
 8048a30:	e0bffe15 	stw	r2,-8(fp)
      while (*ntmp == '\\' || *ntmp == '/')
 8048a34:	e0bffe17 	ldw	r2,-8(fp)
 8048a38:	10800003 	ldbu	r2,0(r2)
 8048a3c:	10803fcc 	andi	r2,r2,255
 8048a40:	1080201c 	xori	r2,r2,128
 8048a44:	10bfe004 	addi	r2,r2,-128
 8048a48:	10801720 	cmpeqi	r2,r2,92
 8048a4c:	103ff61e 	bne	r2,zero,8048a28 <strippath+0x168>
 8048a50:	e0bffe17 	ldw	r2,-8(fp)
 8048a54:	10800003 	ldbu	r2,0(r2)
 8048a58:	10803fcc 	andi	r2,r2,255
 8048a5c:	1080201c 	xori	r2,r2,128
 8048a60:	10bfe004 	addi	r2,r2,-128
 8048a64:	10800be0 	cmpeqi	r2,r2,47
 8048a68:	103fef1e 	bne	r2,zero,8048a28 <strippath+0x168>
      return ntmp;
 8048a6c:	e0bffe17 	ldw	r2,-8(fp)
 8048a70:	00000106 	br	8048a78 <strippath+0x1b8>
   }
   else
      return NULL;
 8048a74:	0005883a 	mov	r2,zero
}
 8048a78:	e037883a 	mov	sp,fp
 8048a7c:	dfc00117 	ldw	ra,4(sp)
 8048a80:	df000017 	ldw	fp,0(sp)
 8048a84:	dec00204 	addi	sp,sp,8
 8048a88:	f800283a 	ret

08048a8c <isvfile_locked>:
 * RETURNS: 
 */

int
isvfile_locked(VFILE * vfp)
{
 8048a8c:	defffd04 	addi	sp,sp,-12
 8048a90:	df000215 	stw	fp,8(sp)
 8048a94:	df000204 	addi	fp,sp,8
 8048a98:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 8048a9c:	d0a0d017 	ldw	r2,-31936(gp)
 8048aa0:	e0bfff15 	stw	r2,-4(fp)
 8048aa4:	00000806 	br	8048ac8 <isvfile_locked+0x3c>
      if (vtmp == vfp)
 8048aa8:	e0ffff17 	ldw	r3,-4(fp)
 8048aac:	e0bffe17 	ldw	r2,-8(fp)
 8048ab0:	1880021e 	bne	r3,r2,8048abc <isvfile_locked+0x30>
      return TRUE;
 8048ab4:	00800044 	movi	r2,1
 8048ab8:	00000606 	br	8048ad4 <isvfile_locked+0x48>
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 8048abc:	e0bfff17 	ldw	r2,-4(fp)
 8048ac0:	10800017 	ldw	r2,0(r2)
 8048ac4:	e0bfff15 	stw	r2,-4(fp)
 8048ac8:	e0bfff17 	ldw	r2,-4(fp)
 8048acc:	103ff61e 	bne	r2,zero,8048aa8 <isvfile_locked+0x1c>

   return FALSE;  /* passed pointer not found in list */
 8048ad0:	0005883a 	mov	r2,zero
}
 8048ad4:	e037883a 	mov	sp,fp
 8048ad8:	df000017 	ldw	fp,0(sp)
 8048adc:	dec00104 	addi	sp,sp,4
 8048ae0:	f800283a 	ret

08048ae4 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 8048ae4:	defffc04 	addi	sp,sp,-16
 8048ae8:	dfc00315 	stw	ra,12(sp)
 8048aec:	df000215 	stw	fp,8(sp)
 8048af0:	df000204 	addi	fp,sp,8
 8048af4:	e13ffe15 	stw	r4,-8(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 8048af8:	01000144 	movi	r4,5
 8048afc:	802c9e40 	call	802c9e4 <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
 8048b00:	e13ffe17 	ldw	r4,-8(fp)
 8048b04:	8048a8c0 	call	8048a8c <isvfile_locked>
 8048b08:	e0bfff15 	stw	r2,-4(fp)

   /* unlock the VFS */
   vfs_unlock();
 8048b0c:	01000144 	movi	r4,5
 8048b10:	802ca980 	call	802ca98 <post_app_sem>
   return rc;
 8048b14:	e0bfff17 	ldw	r2,-4(fp)
}
 8048b18:	e037883a 	mov	sp,fp
 8048b1c:	dfc00117 	ldw	ra,4(sp)
 8048b20:	df000017 	ldw	fp,0(sp)
 8048b24:	dec00204 	addi	sp,sp,8
 8048b28:	f800283a 	ret

08048b2c <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
 8048b2c:	defffd04 	addi	sp,sp,-12
 8048b30:	dfc00215 	stw	ra,8(sp)
 8048b34:	df000115 	stw	fp,4(sp)
 8048b38:	df000104 	addi	fp,sp,4
 8048b3c:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
 8048b40:	01000144 	movi	r4,5
 8048b44:	802c9e40 	call	802c9e4 <wait_app_sem>

   if (isvfile_locked(vfd))
 8048b48:	e13fff17 	ldw	r4,-4(fp)
 8048b4c:	8048a8c0 	call	8048a8c <isvfile_locked>
 8048b50:	10000526 	beq	r2,zero,8048b68 <vferror+0x3c>
   {
      vfs_unlock();
 8048b54:	01000144 	movi	r4,5
 8048b58:	802ca980 	call	802ca98 <post_app_sem>

      return vfd->error;
 8048b5c:	e0bfff17 	ldw	r2,-4(fp)
 8048b60:	10800417 	ldw	r2,16(r2)
 8048b64:	00000306 	br	8048b74 <vferror+0x48>
   }

   vfs_unlock();
 8048b68:	01000144 	movi	r4,5
 8048b6c:	802ca980 	call	802ca98 <post_app_sem>

#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
 8048b70:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
 8048b74:	e037883a 	mov	sp,fp
 8048b78:	dfc00117 	ldw	ra,4(sp)
 8048b7c:	df000017 	ldw	fp,0(sp)
 8048b80:	dec00204 	addi	sp,sp,8
 8048b84:	f800283a 	ret

08048b88 <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
 8048b88:	defffd04 	addi	sp,sp,-12
 8048b8c:	dfc00215 	stw	ra,8(sp)
 8048b90:	df000115 	stw	fp,4(sp)
 8048b94:	df000104 	addi	fp,sp,4
 8048b98:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
 8048b9c:	01000144 	movi	r4,5
 8048ba0:	802c9e40 	call	802c9e4 <wait_app_sem>

   if (isvfile_locked(vfd))
 8048ba4:	e13fff17 	ldw	r4,-4(fp)
 8048ba8:	8048a8c0 	call	8048a8c <isvfile_locked>
 8048bac:	10000526 	beq	r2,zero,8048bc4 <vclearerr+0x3c>
   {
      vfs_unlock();
 8048bb0:	01000144 	movi	r4,5
 8048bb4:	802ca980 	call	802ca98 <post_app_sem>

      vfd->error = 0;
 8048bb8:	e0bfff17 	ldw	r2,-4(fp)
 8048bbc:	10000415 	stw	zero,16(r2)
      return;
 8048bc0:	00000206 	br	8048bcc <vclearerr+0x44>
   }

   vfs_unlock();
 8048bc4:	01000144 	movi	r4,5
 8048bc8:	802ca980 	call	802ca98 <post_app_sem>

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
 8048bcc:	e037883a 	mov	sp,fp
 8048bd0:	dfc00117 	ldw	ra,4(sp)
 8048bd4:	df000017 	ldw	fp,0(sp)
 8048bd8:	dec00204 	addi	sp,sp,8
 8048bdc:	f800283a 	ret

08048be0 <prep_vfs>:
 * PARAMS: NONE
 *
 * RETURNS: Error Code or 0 for OK
 */
int prep_vfs(void)
{
 8048be0:	defffe04 	addi	sp,sp,-8
 8048be4:	df000115 	stw	fp,4(sp)
 8048be8:	df000104 	addi	fp,sp,4
int e = 0;
 8048bec:	e03fff15 	stw	zero,-4(fp)
   {
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
 8048bf0:	e0bfff17 	ldw	r2,-4(fp)
}
 8048bf4:	e037883a 	mov	sp,fp
 8048bf8:	df000017 	ldw	fp,0(sp)
 8048bfc:	dec00104 	addi	sp,sp,4
 8048c00:	f800283a 	ret

08048c04 <alt_get_errno>:
{
 8048c04:	defffe04 	addi	sp,sp,-8
 8048c08:	dfc00115 	stw	ra,4(sp)
 8048c0c:	df000015 	stw	fp,0(sp)
 8048c10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8048c14:	d0a04317 	ldw	r2,-32500(gp)
 8048c18:	10000326 	beq	r2,zero,8048c28 <alt_get_errno+0x24>
 8048c1c:	d0a04317 	ldw	r2,-32500(gp)
 8048c20:	103ee83a 	callr	r2
 8048c24:	00000106 	br	8048c2c <alt_get_errno+0x28>
 8048c28:	d0a05a04 	addi	r2,gp,-32408
}
 8048c2c:	e037883a 	mov	sp,fp
 8048c30:	dfc00117 	ldw	ra,4(sp)
 8048c34:	df000017 	ldw	fp,0(sp)
 8048c38:	dec00204 	addi	sp,sp,8
 8048c3c:	f800283a 	ret

08048c40 <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 8048c40:	defff704 	addi	sp,sp,-36
 8048c44:	dfc00615 	stw	ra,24(sp)
 8048c48:	df000515 	stw	fp,20(sp)
 8048c4c:	df000504 	addi	fp,sp,20
 8048c50:	e13ffc15 	stw	r4,-16(fp)
 8048c54:	e17ffb15 	stw	r5,-20(fp)
 8048c58:	e1800215 	stw	r6,8(fp)
 8048c5c:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8048c60:	e0bffc17 	ldw	r2,-16(fp)
 8048c64:	10000616 	blt	r2,zero,8048c80 <alt_fcntl+0x40>
 8048c68:	e0bffc17 	ldw	r2,-16(fp)
 8048c6c:	10c00324 	muli	r3,r2,12
 8048c70:	00820174 	movhi	r2,2053
 8048c74:	10981b04 	addi	r2,r2,24684
 8048c78:	1885883a 	add	r2,r3,r2
 8048c7c:	00000106 	br	8048c84 <alt_fcntl+0x44>
 8048c80:	0005883a 	mov	r2,zero
 8048c84:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8048c88:	e0bfff17 	ldw	r2,-4(fp)
 8048c8c:	10002b26 	beq	r2,zero,8048d3c <alt_fcntl+0xfc>
  {
    switch (cmd)
 8048c90:	e0bffb17 	ldw	r2,-20(fp)
 8048c94:	108000e0 	cmpeqi	r2,r2,3
 8048c98:	1000041e 	bne	r2,zero,8048cac <alt_fcntl+0x6c>
 8048c9c:	e0bffb17 	ldw	r2,-20(fp)
 8048ca0:	10800120 	cmpeqi	r2,r2,4
 8048ca4:	1000071e 	bne	r2,zero,8048cc4 <alt_fcntl+0x84>
 8048ca8:	00001e06 	br	8048d24 <alt_fcntl+0xe4>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 8048cac:	e0bfff17 	ldw	r2,-4(fp)
 8048cb0:	10c00217 	ldw	r3,8(r2)
 8048cb4:	00900034 	movhi	r2,16384
 8048cb8:	10bfffc4 	addi	r2,r2,-1
 8048cbc:	1884703a 	and	r2,r3,r2
 8048cc0:	00002306 	br	8048d50 <alt_fcntl+0x110>
    case F_SETFL:
      va_start(argp, cmd);
 8048cc4:	e0800204 	addi	r2,fp,8
 8048cc8:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
 8048ccc:	e0bffd17 	ldw	r2,-12(fp)
 8048cd0:	10c00104 	addi	r3,r2,4
 8048cd4:	e0fffd15 	stw	r3,-12(fp)
 8048cd8:	10800017 	ldw	r2,0(r2)
 8048cdc:	e0bffe15 	stw	r2,-8(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 8048ce0:	e0bfff17 	ldw	r2,-4(fp)
 8048ce4:	10c00217 	ldw	r3,8(r2)
 8048ce8:	00affdc4 	movi	r2,-16393
 8048cec:	1886703a 	and	r3,r3,r2
 8048cf0:	e0bfff17 	ldw	r2,-4(fp)
 8048cf4:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 8048cf8:	e0bfff17 	ldw	r2,-4(fp)
 8048cfc:	10800217 	ldw	r2,8(r2)
 8048d00:	1007883a 	mov	r3,r2
 8048d04:	e0bffe17 	ldw	r2,-8(fp)
 8048d08:	1090020c 	andi	r2,r2,16392
 8048d0c:	1884b03a 	or	r2,r3,r2
 8048d10:	1007883a 	mov	r3,r2
 8048d14:	e0bfff17 	ldw	r2,-4(fp)
 8048d18:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
 8048d1c:	0005883a 	mov	r2,zero
 8048d20:	00000b06 	br	8048d50 <alt_fcntl+0x110>
    default:
      ALT_ERRNO = EINVAL;
 8048d24:	8048c040 	call	8048c04 <alt_get_errno>
 8048d28:	1007883a 	mov	r3,r2
 8048d2c:	00800584 	movi	r2,22
 8048d30:	18800015 	stw	r2,0(r3)
      return -1;
 8048d34:	00bfffc4 	movi	r2,-1
 8048d38:	00000506 	br	8048d50 <alt_fcntl+0x110>
    }
  }

  ALT_ERRNO = EBADFD;
 8048d3c:	8048c040 	call	8048c04 <alt_get_errno>
 8048d40:	1007883a 	mov	r3,r2
 8048d44:	00801444 	movi	r2,81
 8048d48:	18800015 	stw	r2,0(r3)
  return -1;
 8048d4c:	00bfffc4 	movi	r2,-1
}
 8048d50:	e037883a 	mov	sp,fp
 8048d54:	dfc00117 	ldw	ra,4(sp)
 8048d58:	df000017 	ldw	fp,0(sp)
 8048d5c:	dec00404 	addi	sp,sp,16
 8048d60:	f800283a 	ret

08048d64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8048d64:	defffb04 	addi	sp,sp,-20
 8048d68:	dfc00415 	stw	ra,16(sp)
 8048d6c:	df000315 	stw	fp,12(sp)
 8048d70:	df000304 	addi	fp,sp,12
 8048d74:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8048d78:	d0a03e17 	ldw	r2,-32520(gp)
 8048d7c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8048d80:	00003106 	br	8048e48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8048d84:	e0bfff17 	ldw	r2,-4(fp)
 8048d88:	10800217 	ldw	r2,8(r2)
 8048d8c:	1009883a 	mov	r4,r2
 8048d90:	8003a1c0 	call	8003a1c <strlen>
 8048d94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8048d98:	e0bfff17 	ldw	r2,-4(fp)
 8048d9c:	10c00217 	ldw	r3,8(r2)
 8048da0:	e0bffe17 	ldw	r2,-8(fp)
 8048da4:	10bfffc4 	addi	r2,r2,-1
 8048da8:	1885883a 	add	r2,r3,r2
 8048dac:	10800003 	ldbu	r2,0(r2)
 8048db0:	10803fcc 	andi	r2,r2,255
 8048db4:	1080201c 	xori	r2,r2,128
 8048db8:	10bfe004 	addi	r2,r2,-128
 8048dbc:	10800bd8 	cmpnei	r2,r2,47
 8048dc0:	1000031e 	bne	r2,zero,8048dd0 <alt_find_file+0x6c>
    {
      len -= 1;
 8048dc4:	e0bffe17 	ldw	r2,-8(fp)
 8048dc8:	10bfffc4 	addi	r2,r2,-1
 8048dcc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8048dd0:	e0bffe17 	ldw	r2,-8(fp)
 8048dd4:	e0fffd17 	ldw	r3,-12(fp)
 8048dd8:	1885883a 	add	r2,r3,r2
 8048ddc:	10800003 	ldbu	r2,0(r2)
 8048de0:	10803fcc 	andi	r2,r2,255
 8048de4:	1080201c 	xori	r2,r2,128
 8048de8:	10bfe004 	addi	r2,r2,-128
 8048dec:	10800be0 	cmpeqi	r2,r2,47
 8048df0:	1000081e 	bne	r2,zero,8048e14 <alt_find_file+0xb0>
 8048df4:	e0bffe17 	ldw	r2,-8(fp)
 8048df8:	e0fffd17 	ldw	r3,-12(fp)
 8048dfc:	1885883a 	add	r2,r3,r2
 8048e00:	10800003 	ldbu	r2,0(r2)
 8048e04:	10803fcc 	andi	r2,r2,255
 8048e08:	1080201c 	xori	r2,r2,128
 8048e0c:	10bfe004 	addi	r2,r2,-128
 8048e10:	10000a1e 	bne	r2,zero,8048e3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8048e14:	e0bfff17 	ldw	r2,-4(fp)
 8048e18:	10800217 	ldw	r2,8(r2)
 8048e1c:	e0fffe17 	ldw	r3,-8(fp)
 8048e20:	180d883a 	mov	r6,r3
 8048e24:	e17ffd17 	ldw	r5,-12(fp)
 8048e28:	1009883a 	mov	r4,r2
 8048e2c:	8002e2c0 	call	8002e2c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8048e30:	1000021e 	bne	r2,zero,8048e3c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8048e34:	e0bfff17 	ldw	r2,-4(fp)
 8048e38:	00000706 	br	8048e58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8048e3c:	e0bfff17 	ldw	r2,-4(fp)
 8048e40:	10800017 	ldw	r2,0(r2)
 8048e44:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8048e48:	e0ffff17 	ldw	r3,-4(fp)
 8048e4c:	d0a03e04 	addi	r2,gp,-32520
 8048e50:	18bfcc1e 	bne	r3,r2,8048d84 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8048e54:	0005883a 	mov	r2,zero
}
 8048e58:	e037883a 	mov	sp,fp
 8048e5c:	dfc00117 	ldw	ra,4(sp)
 8048e60:	df000017 	ldw	fp,0(sp)
 8048e64:	dec00204 	addi	sp,sp,8
 8048e68:	f800283a 	ret

08048e6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8048e6c:	defff904 	addi	sp,sp,-28
 8048e70:	dfc00615 	stw	ra,24(sp)
 8048e74:	df000515 	stw	fp,20(sp)
 8048e78:	df000504 	addi	fp,sp,20
 8048e7c:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
 8048e80:	00bffa04 	movi	r2,-24
 8048e84:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 8048e88:	d0a0b117 	ldw	r2,-32060(gp)
 8048e8c:	e0bffd15 	stw	r2,-12(fp)
 8048e90:	e03ffc8d 	sth	zero,-14(fp)
  OSSemPend (sem, timeout, &err);
 8048e94:	e0bffc8b 	ldhu	r2,-14(fp)
 8048e98:	e0fffc44 	addi	r3,fp,-15
 8048e9c:	180d883a 	mov	r6,r3
 8048ea0:	100b883a 	mov	r5,r2
 8048ea4:	e13ffd17 	ldw	r4,-12(fp)
 8048ea8:	80168c40 	call	80168c4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8048eac:	e03fff15 	stw	zero,-4(fp)
 8048eb0:	00001706 	br	8048f10 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 8048eb4:	e0bfff17 	ldw	r2,-4(fp)
 8048eb8:	10c00324 	muli	r3,r2,12
 8048ebc:	00820174 	movhi	r2,2053
 8048ec0:	1885883a 	add	r2,r3,r2
 8048ec4:	10981b17 	ldw	r2,24684(r2)
 8048ec8:	10000e1e 	bne	r2,zero,8048f04 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 8048ecc:	e0bfff17 	ldw	r2,-4(fp)
 8048ed0:	11000324 	muli	r4,r2,12
 8048ed4:	e0fffb17 	ldw	r3,-20(fp)
 8048ed8:	00820174 	movhi	r2,2053
 8048edc:	2085883a 	add	r2,r4,r2
 8048ee0:	10d81b15 	stw	r3,24684(r2)
      if (i > alt_max_fd)
 8048ee4:	d0e04217 	ldw	r3,-32504(gp)
 8048ee8:	e0bfff17 	ldw	r2,-4(fp)
 8048eec:	1880020e 	bge	r3,r2,8048ef8 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 8048ef0:	e0bfff17 	ldw	r2,-4(fp)
 8048ef4:	d0a04215 	stw	r2,-32504(gp)
      }
      rc = i;
 8048ef8:	e0bfff17 	ldw	r2,-4(fp)
 8048efc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8048f00:	00000706 	br	8048f20 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8048f04:	e0bfff17 	ldw	r2,-4(fp)
 8048f08:	10800044 	addi	r2,r2,1
 8048f0c:	e0bfff15 	stw	r2,-4(fp)
 8048f10:	e0bfff17 	ldw	r2,-4(fp)
 8048f14:	10800810 	cmplti	r2,r2,32
 8048f18:	103fe61e 	bne	r2,zero,8048eb4 <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
 8048f1c:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 8048f20:	d0a0b117 	ldw	r2,-32060(gp)
 8048f24:	1009883a 	mov	r4,r2
 8048f28:	8016c4c0 	call	8016c4c <OSSemPost>

  return rc;
 8048f2c:	e0bffe17 	ldw	r2,-8(fp)
}
 8048f30:	e037883a 	mov	sp,fp
 8048f34:	dfc00117 	ldw	ra,4(sp)
 8048f38:	df000017 	ldw	fp,0(sp)
 8048f3c:	dec00204 	addi	sp,sp,8
 8048f40:	f800283a 	ret

08048f44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8048f44:	defffe04 	addi	sp,sp,-8
 8048f48:	df000115 	stw	fp,4(sp)
 8048f4c:	df000104 	addi	fp,sp,4
 8048f50:	e13fff15 	stw	r4,-4(fp)
 8048f54:	e0bfff17 	ldw	r2,-4(fp)
 8048f58:	10bffe84 	addi	r2,r2,-6
 8048f5c:	10c00428 	cmpgeui	r3,r2,16
 8048f60:	1800191e 	bne	r3,zero,8048fc8 <alt_exception_cause_generated_bad_addr+0x84>
 8048f64:	100690ba 	slli	r3,r2,2
 8048f68:	00820174 	movhi	r2,2053
 8048f6c:	1885883a 	add	r2,r3,r2
 8048f70:	10a3de17 	ldw	r2,-28808(r2)
 8048f74:	1000683a 	jmp	r2
 8048f78:	08048fb8 	rdprs	zero,at,4670
 8048f7c:	08048fb8 	rdprs	zero,at,4670
 8048f80:	08048fc8 	cmpgei	zero,at,4671
 8048f84:	08048fc8 	cmpgei	zero,at,4671
 8048f88:	08048fc8 	cmpgei	zero,at,4671
 8048f8c:	08048fb8 	rdprs	zero,at,4670
 8048f90:	08048fc0 	call	8048fc <OSCtxSw_SWITCH_PC+0x8048bc>
 8048f94:	08048fc8 	cmpgei	zero,at,4671
 8048f98:	08048fb8 	rdprs	zero,at,4670
 8048f9c:	08048fb8 	rdprs	zero,at,4670
 8048fa0:	08048fc8 	cmpgei	zero,at,4671
 8048fa4:	08048fb8 	rdprs	zero,at,4670
 8048fa8:	08048fc0 	call	8048fc <OSCtxSw_SWITCH_PC+0x8048bc>
 8048fac:	08048fc8 	cmpgei	zero,at,4671
 8048fb0:	08048fc8 	cmpgei	zero,at,4671
 8048fb4:	08048fb8 	rdprs	zero,at,4670
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8048fb8:	00800044 	movi	r2,1
 8048fbc:	00000306 	br	8048fcc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8048fc0:	0005883a 	mov	r2,zero
 8048fc4:	00000106 	br	8048fcc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 8048fc8:	0005883a 	mov	r2,zero
  }
}
 8048fcc:	e037883a 	mov	sp,fp
 8048fd0:	df000017 	ldw	fp,0(sp)
 8048fd4:	dec00104 	addi	sp,sp,4
 8048fd8:	f800283a 	ret

08048fdc <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 8048fdc:	deffef04 	addi	sp,sp,-68
 8048fe0:	dfc01015 	stw	ra,64(sp)
 8048fe4:	df000f15 	stw	fp,60(sp)
 8048fe8:	dc400e15 	stw	r17,56(sp)
 8048fec:	dc000d15 	stw	r16,52(sp)
 8048ff0:	df000f04 	addi	fp,sp,60
 8048ff4:	e13ff315 	stw	r4,-52(fp)
   unsigned short xsum;
#ifdef FULL_ICMP
   struct redirect * rd;
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
 8048ff8:	e03ffdc5 	stb	zero,-9(fp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
 8048ffc:	008201b4 	movhi	r2,2054
 8049000:	10bd3e17 	ldw	r2,-2824(r2)
 8049004:	10c00044 	addi	r3,r2,1
 8049008:	008201b4 	movhi	r2,2054
 804900c:	10fd3e15 	stw	r3,-2824(r2)

   pip = ip_head(p);                      /* find IP header */
 8049010:	e0bff317 	ldw	r2,-52(fp)
 8049014:	10800317 	ldw	r2,12(r2)
 8049018:	e0bffc15 	stw	r2,-16(fp)
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
 804901c:	e0bff317 	ldw	r2,-52(fp)
 8049020:	10c00417 	ldw	r3,16(r2)
 8049024:	e0bffc17 	ldw	r2,-16(fp)
 8049028:	10800003 	ldbu	r2,0(r2)
 804902c:	10803fcc 	andi	r2,r2,255
 8049030:	100490ba 	slli	r2,r2,2
 8049034:	10800f0c 	andi	r2,r2,60
 8049038:	1885c83a 	sub	r2,r3,r2
 804903c:	e0bffb15 	stw	r2,-20(fp)
   host = p->fhost;                       /* filled in by IP layer */
 8049040:	e0bff317 	ldw	r2,-52(fp)
 8049044:	10800717 	ldw	r2,28(r2)
 8049048:	e0bffa15 	stw	r2,-24(fp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 804904c:	d0a07e17 	ldw	r2,-32264(gp)
 8049050:	1081000c 	andi	r2,r2,1024
 8049054:	10001526 	beq	r2,zero,80490ac <icmprcv+0xd0>
 8049058:	d0a07e17 	ldw	r2,-32264(gp)
 804905c:	1080800c 	andi	r2,r2,512
 8049060:	10001226 	beq	r2,zero,80490ac <icmprcv+0xd0>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
 8049064:	e0bffa17 	ldw	r2,-24(fp)
 8049068:	11003fcc 	andi	r4,r2,255
 804906c:	e0bffa17 	ldw	r2,-24(fp)
 8049070:	1004d23a 	srli	r2,r2,8
 8049074:	11403fcc 	andi	r5,r2,255
 8049078:	e0bffa17 	ldw	r2,-24(fp)
 804907c:	1004d43a 	srli	r2,r2,16
 8049080:	10803fcc 	andi	r2,r2,255
 8049084:	e0fffa17 	ldw	r3,-24(fp)
 8049088:	1806d63a 	srli	r3,r3,24
 804908c:	d8c00115 	stw	r3,4(sp)
 8049090:	d8800015 	stw	r2,0(sp)
 8049094:	280f883a 	mov	r7,r5
 8049098:	200d883a 	mov	r6,r4
 804909c:	e17ffb17 	ldw	r5,-20(fp)
 80490a0:	01020174 	movhi	r4,2053
 80490a4:	210f8304 	addi	r4,r4,15884
 80490a8:	800325c0 	call	800325c <printf>
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
 80490ac:	e0bffc17 	ldw	r2,-16(fp)
 80490b0:	10800003 	ldbu	r2,0(r2)
 80490b4:	10803fcc 	andi	r2,r2,255
 80490b8:	100490ba 	slli	r2,r2,2
 80490bc:	10800f0c 	andi	r2,r2,60
 80490c0:	e0fffc17 	ldw	r3,-16(fp)
 80490c4:	1885883a 	add	r2,r3,r2
 80490c8:	e0bff915 	stw	r2,-28(fp)

   osum = e->pchksum;
 80490cc:	e0bff917 	ldw	r2,-28(fp)
 80490d0:	1080008b 	ldhu	r2,2(r2)
 80490d4:	e0bff88d 	sth	r2,-30(fp)
   e->pchksum = 0;
 80490d8:	e0bff917 	ldw	r2,-28(fp)
 80490dc:	1000008d 	sth	zero,2(r2)

   if (len&1)
 80490e0:	e0bffb17 	ldw	r2,-20(fp)
 80490e4:	1080004c 	andi	r2,r2,1
 80490e8:	10000926 	beq	r2,zero,8049110 <icmprcv+0x134>
   {
      sav_ch = *(((char *) e) + len);
 80490ec:	e0fff917 	ldw	r3,-28(fp)
 80490f0:	e0bffb17 	ldw	r2,-20(fp)
 80490f4:	1885883a 	add	r2,r3,r2
 80490f8:	10800003 	ldbu	r2,0(r2)
 80490fc:	e0bffdc5 	stb	r2,-9(fp)
      ((char *)e)[len] = 0;
 8049100:	e0fff917 	ldw	r3,-28(fp)
 8049104:	e0bffb17 	ldw	r2,-20(fp)
 8049108:	1885883a 	add	r2,r3,r2
 804910c:	10000005 	stb	zero,0(r2)
   }

   xsum = ~cksum(e, (len+1)>>1);
 8049110:	e0bffb17 	ldw	r2,-20(fp)
 8049114:	10800044 	addi	r2,r2,1
 8049118:	1004d07a 	srli	r2,r2,1
 804911c:	100b883a 	mov	r5,r2
 8049120:	e13ff917 	ldw	r4,-28(fp)
 8049124:	8027be00 	call	8027be0 <cksum>
 8049128:	0084303a 	nor	r2,zero,r2
 804912c:	e0bff80d 	sth	r2,-32(fp)
   if (len&1) *(((char *) e) + len) = sav_ch;
 8049130:	e0bffb17 	ldw	r2,-20(fp)
 8049134:	1080004c 	andi	r2,r2,1
 8049138:	10000526 	beq	r2,zero,8049150 <icmprcv+0x174>
 804913c:	e0fff917 	ldw	r3,-28(fp)
 8049140:	e0bffb17 	ldw	r2,-20(fp)
 8049144:	1885883a 	add	r2,r3,r2
 8049148:	e0fffdc3 	ldbu	r3,-9(fp)
 804914c:	10c00005 	stb	r3,0(r2)
   if (xsum != osum)
 8049150:	e0fff80b 	ldhu	r3,-32(fp)
 8049154:	e0bff88b 	ldhu	r2,-30(fp)
 8049158:	18802226 	beq	r3,r2,80491e4 <icmprcv+0x208>
   {
      e->pchksum = osum;
 804915c:	e0bff917 	ldw	r2,-28(fp)
 8049160:	e0fff88b 	ldhu	r3,-30(fp)
 8049164:	10c0008d 	sth	r3,2(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8049168:	d0a07e17 	ldw	r2,-32264(gp)
 804916c:	1081000c 	andi	r2,r2,1024
 8049170:	10000f26 	beq	r2,zero,80491b0 <icmprcv+0x1d4>
 8049174:	d0a07e17 	ldw	r2,-32264(gp)
 8049178:	1080800c 	andi	r2,r2,512
 804917c:	10000c26 	beq	r2,zero,80491b0 <icmprcv+0x1d4>
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
 8049180:	e0bff88b 	ldhu	r2,-30(fp)
 8049184:	e0fff80b 	ldhu	r3,-32(fp)
 8049188:	180d883a 	mov	r6,r3
 804918c:	100b883a 	mov	r5,r2
 8049190:	01020174 	movhi	r4,2053
 8049194:	210f8b04 	addi	r4,r4,15916
 8049198:	800325c0 	call	800325c <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
 804919c:	d0a07e17 	ldw	r2,-32264(gp)
 80491a0:	1080008c 	andi	r2,r2,2
 80491a4:	10000226 	beq	r2,zero,80491b0 <icmprcv+0x1d4>
 80491a8:	e13ff317 	ldw	r4,-52(fp)
 80491ac:	803fa040 	call	803fa04 <ip_dump>
      }
#endif
      icmp_mib.icmpInErrors++;
 80491b0:	008201b4 	movhi	r2,2054
 80491b4:	10bd3f17 	ldw	r2,-2820(r2)
 80491b8:	10c00044 	addi	r3,r2,1
 80491bc:	008201b4 	movhi	r2,2054
 80491c0:	10fd3f15 	stw	r3,-2820(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80491c4:	01000084 	movi	r4,2
 80491c8:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 80491cc:	e13ff317 	ldw	r4,-52(fp)
 80491d0:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80491d4:	01000084 	movi	r4,2
 80491d8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 80491dc:	00bff804 	movi	r2,-32
 80491e0:	00022e06 	br	8049a9c <icmprcv+0xac0>
   }

   e->pchksum = osum;
 80491e4:	e0bff917 	ldw	r2,-28(fp)
 80491e8:	e0fff88b 	ldhu	r3,-30(fp)
 80491ec:	10c0008d 	sth	r3,2(r2)

   switch (e->ptype) 
 80491f0:	e0bff917 	ldw	r2,-28(fp)
 80491f4:	10800003 	ldbu	r2,0(r2)
 80491f8:	10803fcc 	andi	r2,r2,255
 80491fc:	1080201c 	xori	r2,r2,128
 8049200:	10bfe004 	addi	r2,r2,-128
 8049204:	10c00428 	cmpgeui	r3,r2,16
 8049208:	18020a1e 	bne	r3,zero,8049a34 <icmprcv+0xa58>
 804920c:	100690ba 	slli	r3,r2,2
 8049210:	00820174 	movhi	r2,2053
 8049214:	1885883a 	add	r2,r3,r2
 8049218:	10a48817 	ldw	r2,-28128(r2)
 804921c:	1000683a 	jmp	r2
 8049220:	080494b8 	rdprs	zero,at,4690
 8049224:	08049a34 	orhi	zero,at,4712
 8049228:	08049a34 	orhi	zero,at,4712
 804922c:	080494d8 	cmpnei	zero,at,4691
 8049230:	080495cc 	andi	zero,at,4695
 8049234:	08049660 	cmpeqi	zero,at,4697
 8049238:	08049a34 	orhi	zero,at,4712
 804923c:	08049a34 	orhi	zero,at,4712
 8049240:	08049260 	cmpeqi	zero,at,4681
 8049244:	08049a34 	orhi	zero,at,4712
 8049248:	08049a34 	orhi	zero,at,4712
 804924c:	0804978c 	andi	zero,at,4702
 8049250:	0804988c 	andi	zero,at,4706
 8049254:	080498e8 	cmpgeui	zero,at,4707
 8049258:	08049a34 	orhi	zero,at,4712
 804925c:	08049a00 	call	8049a0 <OSCtxSw_SWITCH_PC+0x804960>
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 8049260:	008201b4 	movhi	r2,2054
 8049264:	10bd4517 	ldw	r2,-2796(r2)
 8049268:	10c00044 	addi	r3,r2,1
 804926c:	008201b4 	movhi	r2,2054
 8049270:	10fd4515 	stw	r3,-2796(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 8049274:	d0a07e17 	ldw	r2,-32264(gp)
 8049278:	1081000c 	andi	r2,r2,1024
 804927c:	10001426 	beq	r2,zero,80492d0 <icmprcv+0x2f4>
 8049280:	d0a07e17 	ldw	r2,-32264(gp)
 8049284:	1080800c 	andi	r2,r2,512
 8049288:	10001126 	beq	r2,zero,80492d0 <icmprcv+0x2f4>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 804928c:	e0bffa17 	ldw	r2,-24(fp)
 8049290:	10c03fcc 	andi	r3,r2,255
 8049294:	e0bffa17 	ldw	r2,-24(fp)
 8049298:	1004d23a 	srli	r2,r2,8
 804929c:	11003fcc 	andi	r4,r2,255
 80492a0:	e0bffa17 	ldw	r2,-24(fp)
 80492a4:	1004d43a 	srli	r2,r2,16
 80492a8:	11403fcc 	andi	r5,r2,255
 80492ac:	e0bffa17 	ldw	r2,-24(fp)
 80492b0:	1004d63a 	srli	r2,r2,24
 80492b4:	d8800015 	stw	r2,0(sp)
 80492b8:	280f883a 	mov	r7,r5
 80492bc:	200d883a 	mov	r6,r4
 80492c0:	180b883a 	mov	r5,r3
 80492c4:	01020174 	movhi	r4,2053
 80492c8:	210f9604 	addi	r4,r4,15960
 80492cc:	800325c0 	call	800325c <printf>
#endif
      e->ptype = ECHOREP;
 80492d0:	e0bff917 	ldw	r2,-28(fp)
 80492d4:	10000005 	stb	zero,0(r2)
      e->pchksum = 0;
 80492d8:	e0bff917 	ldw	r2,-28(fp)
 80492dc:	1000008d 	sth	zero,2(r2)
      if (len&1)  /* pad odd length packets for checksum routine */
 80492e0:	e0bffb17 	ldw	r2,-20(fp)
 80492e4:	1080004c 	andi	r2,r2,1
 80492e8:	10000926 	beq	r2,zero,8049310 <icmprcv+0x334>
      {
         sav_ch = *(((char *) e) + len);
 80492ec:	e0fff917 	ldw	r3,-28(fp)
 80492f0:	e0bffb17 	ldw	r2,-20(fp)
 80492f4:	1885883a 	add	r2,r3,r2
 80492f8:	10800003 	ldbu	r2,0(r2)
 80492fc:	e0bffdc5 	stb	r2,-9(fp)
         ((char *)e)[len] = 0;
 8049300:	e0fff917 	ldw	r3,-28(fp)
 8049304:	e0bffb17 	ldw	r2,-20(fp)
 8049308:	1885883a 	add	r2,r3,r2
 804930c:	10000005 	stb	zero,0(r2)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 8049310:	e0bffb17 	ldw	r2,-20(fp)
 8049314:	10800044 	addi	r2,r2,1
 8049318:	1004d07a 	srli	r2,r2,1
 804931c:	100b883a 	mov	r5,r2
 8049320:	e13ff917 	ldw	r4,-28(fp)
 8049324:	8027be00 	call	8027be0 <cksum>
 8049328:	0084303a 	nor	r2,zero,r2
 804932c:	1007883a 	mov	r3,r2
 8049330:	e0bff917 	ldw	r2,-28(fp)
 8049334:	10c0008d 	sth	r3,2(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
 8049338:	e0bffb17 	ldw	r2,-20(fp)
 804933c:	1080004c 	andi	r2,r2,1
 8049340:	10000526 	beq	r2,zero,8049358 <icmprcv+0x37c>
 8049344:	e0fff917 	ldw	r3,-28(fp)
 8049348:	e0bffb17 	ldw	r2,-20(fp)
 804934c:	1885883a 	add	r2,r3,r2
 8049350:	e0fffdc3 	ldbu	r3,-9(fp)
 8049354:	10c00005 	stb	r3,0(r2)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
 8049358:	e0bffc17 	ldw	r2,-16(fp)
 804935c:	10800417 	ldw	r2,16(r2)
 8049360:	10bfffe0 	cmpeqi	r2,r2,-1
 8049364:	10001f1e 	bne	r2,zero,80493e4 <icmprcv+0x408>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
 8049368:	e0bffc17 	ldw	r2,-16(fp)
 804936c:	10800417 	ldw	r2,16(r2)
 8049370:	1006d63a 	srli	r3,r2,24
 8049374:	e0bffc17 	ldw	r2,-16(fp)
 8049378:	10800417 	ldw	r2,16(r2)
 804937c:	1004d23a 	srli	r2,r2,8
 8049380:	10bfc00c 	andi	r2,r2,65280
 8049384:	1886b03a 	or	r3,r3,r2
 8049388:	e0bffc17 	ldw	r2,-16(fp)
 804938c:	10800417 	ldw	r2,16(r2)
 8049390:	1004923a 	slli	r2,r2,8
 8049394:	10803fec 	andhi	r2,r2,255
 8049398:	1886b03a 	or	r3,r3,r2
 804939c:	e0bffc17 	ldw	r2,-16(fp)
 80493a0:	10800417 	ldw	r2,16(r2)
 80493a4:	1004963a 	slli	r2,r2,24
 80493a8:	1884b03a 	or	r2,r3,r2
 80493ac:	10fc002c 	andhi	r3,r2,61440
      if ((pip->ip_dest == 0xffffffff) || 
 80493b0:	00b80034 	movhi	r2,57344
 80493b4:	18800b26 	beq	r3,r2,80493e4 <icmprcv+0x408>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
 80493b8:	e0bffc17 	ldw	r2,-16(fp)
 80493bc:	10c00417 	ldw	r3,16(r2)
 80493c0:	e0bff317 	ldw	r2,-52(fp)
 80493c4:	10800617 	ldw	r2,24(r2)
 80493c8:	11000a17 	ldw	r4,40(r2)
 80493cc:	e0bff317 	ldw	r2,-52(fp)
 80493d0:	10800617 	ldw	r2,24(r2)
 80493d4:	10800c17 	ldw	r2,48(r2)
 80493d8:	0084303a 	nor	r2,zero,r2
 80493dc:	2084b03a 	or	r2,r4,r2
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
 80493e0:	1880061e 	bne	r3,r2,80493fc <icmprcv+0x420>
      {
         pip->ip_src = p->net->n_ipaddr;
 80493e4:	e0bff317 	ldw	r2,-52(fp)
 80493e8:	10800617 	ldw	r2,24(r2)
 80493ec:	10c00a17 	ldw	r3,40(r2)
 80493f0:	e0bffc17 	ldw	r2,-16(fp)
 80493f4:	10c00315 	stw	r3,12(r2)
 80493f8:	00000406 	br	804940c <icmprcv+0x430>
      }
      else pip->ip_src = pip->ip_dest;
 80493fc:	e0bffc17 	ldw	r2,-16(fp)
 8049400:	10c00417 	ldw	r3,16(r2)
 8049404:	e0bffc17 	ldw	r2,-16(fp)
 8049408:	10c00315 	stw	r3,12(r2)

      pip->ip_dest = host;
 804940c:	e0bffc17 	ldw	r2,-16(fp)
 8049410:	e0fffa17 	ldw	r3,-24(fp)
 8049414:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutEchoReps++;
 8049418:	008201b4 	movhi	r2,2054
 804941c:	10bd5317 	ldw	r2,-2740(r2)
 8049420:	10c00044 	addi	r3,r2,1
 8049424:	008201b4 	movhi	r2,2054
 8049428:	10fd5315 	stw	r3,-2740(r2)
      icmp_mib.icmpOutMsgs++;
 804942c:	008201b4 	movhi	r2,2054
 8049430:	10bd4b17 	ldw	r2,-2772(r2)
 8049434:	10c00044 	addi	r3,r2,1
 8049438:	008201b4 	movhi	r2,2054
 804943c:	10fd4b15 	stw	r3,-2772(r2)
      p->fhost = host;
 8049440:	e0bff317 	ldw	r2,-52(fp)
 8049444:	e0fffa17 	ldw	r3,-24(fp)
 8049448:	10c00715 	stw	r3,28(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 804944c:	e0bff317 	ldw	r2,-52(fp)
 8049450:	10c00317 	ldw	r3,12(r2)
 8049454:	e0bffc17 	ldw	r2,-16(fp)
 8049458:	10800003 	ldbu	r2,0(r2)
 804945c:	10803fcc 	andi	r2,r2,255
 8049460:	100490ba 	slli	r2,r2,2
 8049464:	10800f0c 	andi	r2,r2,60
 8049468:	1887883a 	add	r3,r3,r2
 804946c:	e0bff317 	ldw	r2,-52(fp)
 8049470:	10c00315 	stw	r3,12(r2)
      p->nb_plen = len;
 8049474:	e0bff317 	ldw	r2,-52(fp)
 8049478:	e0fffb17 	ldw	r3,-20(fp)
 804947c:	10c00415 	stw	r3,16(r2)

      i = ip_write(ICMP_PROT, p);
 8049480:	e17ff317 	ldw	r5,-52(fp)
 8049484:	01000044 	movi	r4,1
 8049488:	803e9840 	call	803e984 <ip_write>
 804948c:	e0bff715 	stw	r2,-36(fp)
      if (i < 0)
 8049490:	e0bff717 	ldw	r2,-36(fp)
 8049494:	1000060e 	bge	r2,zero,80494b0 <icmprcv+0x4d4>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
 8049498:	d0a07e17 	ldw	r2,-32264(gp)
 804949c:	1081000c 	andi	r2,r2,1024
 80494a0:	10000326 	beq	r2,zero,80494b0 <icmprcv+0x4d4>
            dprintf("icmp: reply failed\n");
 80494a4:	01020174 	movhi	r4,2053
 80494a8:	210f9f04 	addi	r4,r4,15996
 80494ac:	80033800 	call	8003380 <puts>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
 80494b0:	0005883a 	mov	r2,zero
 80494b4:	00017906 	br	8049a9c <icmprcv+0xac0>
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
 80494b8:	008201b4 	movhi	r2,2054
 80494bc:	10bd4617 	ldw	r2,-2792(r2)
 80494c0:	10c00044 	addi	r3,r2,1
 80494c4:	008201b4 	movhi	r2,2054
 80494c8:	10fd4615 	stw	r3,-2792(r2)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
 80494cc:	e13ff317 	ldw	r4,-52(fp)
 80494d0:	8042cb80 	call	8042cb8 <ip_raw_input>
 80494d4:	00017106 	br	8049a9c <icmprcv+0xac0>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 80494d8:	008201b4 	movhi	r2,2054
 80494dc:	10bd4017 	ldw	r2,-2816(r2)
 80494e0:	10c00044 	addi	r3,r2,1
 80494e4:	008201b4 	movhi	r2,2054
 80494e8:	10fd4015 	stw	r3,-2816(r2)
      pdp = (struct destun *)e;
 80494ec:	e0bff917 	ldw	r2,-28(fp)
 80494f0:	e0bff415 	stw	r2,-48(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 80494f4:	d0a07e17 	ldw	r2,-32264(gp)
 80494f8:	1081000c 	andi	r2,r2,1024
 80494fc:	10002f26 	beq	r2,zero,80495bc <icmprcv+0x5e0>
      {
         dprintf("ICMP: got dest unreachable type ");
 8049500:	01020174 	movhi	r4,2053
 8049504:	210fa404 	addi	r4,r4,16016
 8049508:	800325c0 	call	800325c <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 804950c:	e0bff417 	ldw	r2,-48(fp)
 8049510:	10800043 	ldbu	r2,1(r2)
 8049514:	11003fcc 	andi	r4,r2,255
 8049518:	2100201c 	xori	r4,r4,128
 804951c:	213fe004 	addi	r4,r4,-128
          PUSH_IPADDR(pdp->dip.ip_dest));
 8049520:	e0bff417 	ldw	r2,-48(fp)
 8049524:	10800617 	ldw	r2,24(r2)
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 8049528:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804952c:	e0bff417 	ldw	r2,-48(fp)
 8049530:	10800617 	ldw	r2,24(r2)
 8049534:	1004d23a 	srli	r2,r2,8
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 8049538:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804953c:	e0bff417 	ldw	r2,-48(fp)
 8049540:	10800617 	ldw	r2,24(r2)
 8049544:	1004d43a 	srli	r2,r2,16
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 8049548:	10803fcc 	andi	r2,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
 804954c:	e0fff417 	ldw	r3,-48(fp)
 8049550:	18c00617 	ldw	r3,24(r3)
 8049554:	1806d63a 	srli	r3,r3,24
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 8049558:	d8c00115 	stw	r3,4(sp)
 804955c:	d8800015 	stw	r2,0(sp)
 8049560:	300f883a 	mov	r7,r6
 8049564:	280d883a 	mov	r6,r5
 8049568:	200b883a 	mov	r5,r4
 804956c:	01020174 	movhi	r4,2053
 8049570:	210fad04 	addi	r4,r4,16052
 8049574:	800325c0 	call	800325c <printf>
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 8049578:	e0bffa17 	ldw	r2,-24(fp)
 804957c:	10c03fcc 	andi	r3,r2,255
 8049580:	e0bffa17 	ldw	r2,-24(fp)
 8049584:	1004d23a 	srli	r2,r2,8
 8049588:	11003fcc 	andi	r4,r2,255
 804958c:	e0bffa17 	ldw	r2,-24(fp)
 8049590:	1004d43a 	srli	r2,r2,16
 8049594:	11403fcc 	andi	r5,r2,255
 8049598:	e0bffa17 	ldw	r2,-24(fp)
 804959c:	1004d63a 	srli	r2,r2,24
 80495a0:	d8800015 	stw	r2,0(sp)
 80495a4:	280f883a 	mov	r7,r5
 80495a8:	200d883a 	mov	r6,r4
 80495ac:	180b883a 	mov	r5,r3
 80495b0:	01020174 	movhi	r4,2053
 80495b4:	210fb204 	addi	r4,r4,16072
 80495b8:	800325c0 	call	800325c <printf>
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
 80495bc:	e17ff417 	ldw	r5,-48(fp)
 80495c0:	e13ff317 	ldw	r4,-52(fp)
 80495c4:	804a0780 	call	804a078 <icmp_du>
      break;
 80495c8:	00013306 	br	8049a98 <icmprcv+0xabc>
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
 80495cc:	008201b4 	movhi	r2,2054
 80495d0:	10bd4317 	ldw	r2,-2804(r2)
 80495d4:	10c00044 	addi	r3,r2,1
 80495d8:	008201b4 	movhi	r2,2054
 80495dc:	10fd4315 	stw	r3,-2804(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 80495e0:	d0a07e17 	ldw	r2,-32264(gp)
 80495e4:	1081000c 	andi	r2,r2,1024
 80495e8:	10001626 	beq	r2,zero,8049644 <icmprcv+0x668>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 80495ec:	e0bffa17 	ldw	r2,-24(fp)
 80495f0:	10c03fcc 	andi	r3,r2,255
 80495f4:	e0bffa17 	ldw	r2,-24(fp)
 80495f8:	1004d23a 	srli	r2,r2,8
 80495fc:	11003fcc 	andi	r4,r2,255
 8049600:	e0bffa17 	ldw	r2,-24(fp)
 8049604:	1004d43a 	srli	r2,r2,16
 8049608:	11403fcc 	andi	r5,r2,255
 804960c:	e0bffa17 	ldw	r2,-24(fp)
 8049610:	1004d63a 	srli	r2,r2,24
 8049614:	d8800015 	stw	r2,0(sp)
 8049618:	280f883a 	mov	r7,r5
 804961c:	200d883a 	mov	r6,r4
 8049620:	180b883a 	mov	r5,r3
 8049624:	01020174 	movhi	r4,2053
 8049628:	210fb704 	addi	r4,r4,16092
 804962c:	800325c0 	call	800325c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 8049630:	d0a07e17 	ldw	r2,-32264(gp)
 8049634:	1080008c 	andi	r2,r2,2
 8049638:	10000226 	beq	r2,zero,8049644 <icmprcv+0x668>
 804963c:	e13ff317 	ldw	r4,-52(fp)
 8049640:	803fa040 	call	803fa04 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8049644:	01000084 	movi	r4,2
 8049648:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 804964c:	e13ff317 	ldw	r4,-52(fp)
 8049650:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049654:	01000084 	movi	r4,2
 8049658:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      break;
 804965c:	00010e06 	br	8049a98 <icmprcv+0xabc>
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 8049660:	008201b4 	movhi	r2,2054
 8049664:	10bd4417 	ldw	r2,-2800(r2)
 8049668:	10c00044 	addi	r3,r2,1
 804966c:	008201b4 	movhi	r2,2054
 8049670:	10fd4415 	stw	r3,-2800(r2)
      rd = (struct redirect *)e;
 8049674:	e0bff917 	ldw	r2,-28(fp)
 8049678:	e0bff515 	stw	r2,-44(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 804967c:	d0a07e17 	ldw	r2,-32264(gp)
 8049680:	1081000c 	andi	r2,r2,1024
 8049684:	10002a26 	beq	r2,zero,8049730 <icmprcv+0x754>
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
          PUSH_IPADDR(rd->rdip.ip_dest));
 8049688:	e0bff517 	ldw	r2,-44(fp)
 804968c:	10800617 	ldw	r2,24(r2)
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 8049690:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 8049694:	e0bff517 	ldw	r2,-44(fp)
 8049698:	10800617 	ldw	r2,24(r2)
 804969c:	1004d23a 	srli	r2,r2,8
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 80496a0:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 80496a4:	e0bff517 	ldw	r2,-44(fp)
 80496a8:	10800617 	ldw	r2,24(r2)
 80496ac:	1004d43a 	srli	r2,r2,16
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 80496b0:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
 80496b4:	e0bff517 	ldw	r2,-44(fp)
 80496b8:	10800617 	ldw	r2,24(r2)
 80496bc:	1004d63a 	srli	r2,r2,24
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 80496c0:	d8800015 	stw	r2,0(sp)
 80496c4:	280f883a 	mov	r7,r5
 80496c8:	200d883a 	mov	r6,r4
 80496cc:	180b883a 	mov	r5,r3
 80496d0:	01020174 	movhi	r4,2053
 80496d4:	210fc104 	addi	r4,r4,16132
 80496d8:	800325c0 	call	800325c <printf>
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
 80496dc:	e0bff517 	ldw	r2,-44(fp)
 80496e0:	10800117 	ldw	r2,4(r2)
 80496e4:	10c03fcc 	andi	r3,r2,255
 80496e8:	e0bff517 	ldw	r2,-44(fp)
 80496ec:	10800117 	ldw	r2,4(r2)
 80496f0:	1004d23a 	srli	r2,r2,8
 80496f4:	11003fcc 	andi	r4,r2,255
 80496f8:	e0bff517 	ldw	r2,-44(fp)
 80496fc:	10800117 	ldw	r2,4(r2)
 8049700:	1004d43a 	srli	r2,r2,16
 8049704:	11403fcc 	andi	r5,r2,255
 8049708:	e0bff517 	ldw	r2,-44(fp)
 804970c:	10800117 	ldw	r2,4(r2)
 8049710:	1004d63a 	srli	r2,r2,24
 8049714:	d8800015 	stw	r2,0(sp)
 8049718:	280f883a 	mov	r7,r5
 804971c:	200d883a 	mov	r6,r4
 8049720:	180b883a 	mov	r5,r3
 8049724:	01020174 	movhi	r4,2053
 8049728:	210fcb04 	addi	r4,r4,16172
 804972c:	800325c0 	call	800325c <printf>
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
 8049730:	e0bff517 	ldw	r2,-44(fp)
 8049734:	14000617 	ldw	r16,24(r2)
 8049738:	e0bff517 	ldw	r2,-44(fp)
 804973c:	14400117 	ldw	r17,4(r2)
 8049740:	e0bff317 	ldw	r2,-52(fp)
 8049744:	10800617 	ldw	r2,24(r2)
 8049748:	1009883a 	mov	r4,r2
 804974c:	80261180 	call	8026118 <if_netnumber>
 8049750:	1007883a 	mov	r3,r2
 8049754:	00800104 	movi	r2,4
 8049758:	d8800015 	stw	r2,0(sp)
 804975c:	180f883a 	mov	r7,r3
 8049760:	880d883a 	mov	r6,r17
 8049764:	017fffc4 	movi	r5,-1
 8049768:	8009883a 	mov	r4,r16
 804976c:	80431640 	call	8043164 <add_route>
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8049770:	01000084 	movi	r4,2
 8049774:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8049778:	e13ff317 	ldw	r4,-52(fp)
 804977c:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049780:	01000084 	movi	r4,2
 8049784:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      break;
 8049788:	0000c306 	br	8049a98 <icmprcv+0xabc>
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 804978c:	008201b4 	movhi	r2,2054
 8049790:	10bd4117 	ldw	r2,-2812(r2)
 8049794:	10c00044 	addi	r3,r2,1
 8049798:	008201b4 	movhi	r2,2054
 804979c:	10fd4115 	stw	r3,-2812(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 80497a0:	d0a07e17 	ldw	r2,-32264(gp)
 80497a4:	1081000c 	andi	r2,r2,1024
 80497a8:	10003126 	beq	r2,zero,8049870 <icmprcv+0x894>
      {
         struct timex * pt =  (struct  timex *)e;
 80497ac:	e0bff917 	ldw	r2,-28(fp)
 80497b0:	e0bff615 	stw	r2,-40(fp)

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
          PUSH_IPADDR(p->fhost));
 80497b4:	e0bff317 	ldw	r2,-52(fp)
 80497b8:	10800717 	ldw	r2,28(r2)
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 80497bc:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(p->fhost));
 80497c0:	e0bff317 	ldw	r2,-52(fp)
 80497c4:	10800717 	ldw	r2,28(r2)
 80497c8:	1004d23a 	srli	r2,r2,8
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 80497cc:	11003fcc 	andi	r4,r2,255
          PUSH_IPADDR(p->fhost));
 80497d0:	e0bff317 	ldw	r2,-52(fp)
 80497d4:	10800717 	ldw	r2,28(r2)
 80497d8:	1004d43a 	srli	r2,r2,16
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 80497dc:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(p->fhost));
 80497e0:	e0bff317 	ldw	r2,-52(fp)
 80497e4:	10800717 	ldw	r2,28(r2)
 80497e8:	1004d63a 	srli	r2,r2,24
         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 80497ec:	d8800015 	stw	r2,0(sp)
 80497f0:	280f883a 	mov	r7,r5
 80497f4:	200d883a 	mov	r6,r4
 80497f8:	180b883a 	mov	r5,r3
 80497fc:	01020174 	movhi	r4,2053
 8049800:	210fcf04 	addi	r4,r4,16188
 8049804:	800325c0 	call	800325c <printf>
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
 8049808:	e0bff617 	ldw	r2,-40(fp)
 804980c:	10800617 	ldw	r2,24(r2)
 8049810:	10c03fcc 	andi	r3,r2,255
 8049814:	e0bff617 	ldw	r2,-40(fp)
 8049818:	10800617 	ldw	r2,24(r2)
 804981c:	1004d23a 	srli	r2,r2,8
 8049820:	11003fcc 	andi	r4,r2,255
 8049824:	e0bff617 	ldw	r2,-40(fp)
 8049828:	10800617 	ldw	r2,24(r2)
 804982c:	1004d43a 	srli	r2,r2,16
 8049830:	11403fcc 	andi	r5,r2,255
 8049834:	e0bff617 	ldw	r2,-40(fp)
 8049838:	10800617 	ldw	r2,24(r2)
 804983c:	1004d63a 	srli	r2,r2,24
 8049840:	d8800015 	stw	r2,0(sp)
 8049844:	280f883a 	mov	r7,r5
 8049848:	200d883a 	mov	r6,r4
 804984c:	180b883a 	mov	r5,r3
 8049850:	01020174 	movhi	r4,2053
 8049854:	210fd804 	addi	r4,r4,16224
 8049858:	800325c0 	call	800325c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 804985c:	d0a07e17 	ldw	r2,-32264(gp)
 8049860:	1080008c 	andi	r2,r2,2
 8049864:	10000226 	beq	r2,zero,8049870 <icmprcv+0x894>
 8049868:	e13ff317 	ldw	r4,-52(fp)
 804986c:	803fa040 	call	803fa04 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8049870:	01000084 	movi	r4,2
 8049874:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8049878:	e13ff317 	ldw	r4,-52(fp)
 804987c:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049880:	01000084 	movi	r4,2
 8049884:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      break;
 8049888:	00008306 	br	8049a98 <icmprcv+0xabc>
   case PARAM:
      icmp_mib.icmpInParmProbs++;
 804988c:	008201b4 	movhi	r2,2054
 8049890:	10bd4217 	ldw	r2,-2808(r2)
 8049894:	10c00044 	addi	r3,r2,1
 8049898:	008201b4 	movhi	r2,2054
 804989c:	10fd4215 	stw	r3,-2808(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 80498a0:	d0a07e17 	ldw	r2,-32264(gp)
 80498a4:	1081000c 	andi	r2,r2,1024
 80498a8:	10000326 	beq	r2,zero,80498b8 <icmprcv+0x8dc>
         dprintf("ICMP: got param problem message\n");
 80498ac:	01020174 	movhi	r4,2053
 80498b0:	210fdd04 	addi	r4,r4,16244
 80498b4:	80033800 	call	8003380 <puts>
      if (NDEBUG & DUMP)
 80498b8:	d0a07e17 	ldw	r2,-32264(gp)
 80498bc:	1080008c 	andi	r2,r2,2
 80498c0:	10000226 	beq	r2,zero,80498cc <icmprcv+0x8f0>
      {
         ip_dump(p);
 80498c4:	e13ff317 	ldw	r4,-52(fp)
 80498c8:	803fa040 	call	803fa04 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 80498cc:	01000084 	movi	r4,2
 80498d0:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 80498d4:	e13ff317 	ldw	r4,-52(fp)
 80498d8:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 80498dc:	01000084 	movi	r4,2
 80498e0:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      break;
 80498e4:	00006c06 	br	8049a98 <icmprcv+0xabc>
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 80498e8:	008201b4 	movhi	r2,2054
 80498ec:	10bd4717 	ldw	r2,-2788(r2)
 80498f0:	10c00044 	addi	r3,r2,1
 80498f4:	008201b4 	movhi	r2,2054
 80498f8:	10fd4715 	stw	r3,-2788(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 80498fc:	d0a07e17 	ldw	r2,-32264(gp)
 8049900:	1081000c 	andi	r2,r2,1024
 8049904:	10000326 	beq	r2,zero,8049914 <icmprcv+0x938>
         dprintf("ICMP: got timestamp request\n");
 8049908:	01020174 	movhi	r4,2053
 804990c:	210fe504 	addi	r4,r4,16276
 8049910:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
 8049914:	e0bff917 	ldw	r2,-28(fp)
 8049918:	00c00384 	movi	r3,14
 804991c:	10c00005 	stb	r3,0(r2)
      e->pchksum = 0;
 8049920:	e0bff917 	ldw	r2,-28(fp)
 8049924:	1000008d 	sth	zero,2(r2)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 8049928:	01400284 	movi	r5,10
 804992c:	e13ff917 	ldw	r4,-28(fp)
 8049930:	8027be00 	call	8027be0 <cksum>
 8049934:	0084303a 	nor	r2,zero,r2
 8049938:	1007883a 	mov	r3,r2
 804993c:	e0bff917 	ldw	r2,-28(fp)
 8049940:	10c0008d 	sth	r3,2(r2)
      pip->ip_src = pip->ip_dest;
 8049944:	e0bffc17 	ldw	r2,-16(fp)
 8049948:	10c00417 	ldw	r3,16(r2)
 804994c:	e0bffc17 	ldw	r2,-16(fp)
 8049950:	10c00315 	stw	r3,12(r2)
      pip->ip_dest = host;
 8049954:	e0bffc17 	ldw	r2,-16(fp)
 8049958:	e0fffa17 	ldw	r3,-24(fp)
 804995c:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutMsgs++;
 8049960:	008201b4 	movhi	r2,2054
 8049964:	10bd4b17 	ldw	r2,-2772(r2)
 8049968:	10c00044 	addi	r3,r2,1
 804996c:	008201b4 	movhi	r2,2054
 8049970:	10fd4b15 	stw	r3,-2772(r2)
      icmp_mib.icmpOutTimestampReps++;
 8049974:	008201b4 	movhi	r2,2054
 8049978:	10bd5517 	ldw	r2,-2732(r2)
 804997c:	10c00044 	addi	r3,r2,1
 8049980:	008201b4 	movhi	r2,2054
 8049984:	10fd5515 	stw	r3,-2732(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 8049988:	e0bff317 	ldw	r2,-52(fp)
 804998c:	10c00317 	ldw	r3,12(r2)
 8049990:	e0bffc17 	ldw	r2,-16(fp)
 8049994:	10800003 	ldbu	r2,0(r2)
 8049998:	10803fcc 	andi	r2,r2,255
 804999c:	100490ba 	slli	r2,r2,2
 80499a0:	10800f0c 	andi	r2,r2,60
 80499a4:	1887883a 	add	r3,r3,r2
 80499a8:	e0bff317 	ldw	r2,-52(fp)
 80499ac:	10c00315 	stw	r3,12(r2)
      p->nb_plen = sizeof(struct tstamp);
 80499b0:	e0bff317 	ldw	r2,-52(fp)
 80499b4:	00c00504 	movi	r3,20
 80499b8:	10c00415 	stw	r3,16(r2)
      p->fhost = host;
 80499bc:	e0bff317 	ldw	r2,-52(fp)
 80499c0:	e0fffa17 	ldw	r3,-24(fp)
 80499c4:	10c00715 	stw	r3,28(r2)
      i = ip_write(ICMP_PROT, p);
 80499c8:	e17ff317 	ldw	r5,-52(fp)
 80499cc:	01000044 	movi	r4,1
 80499d0:	803e9840 	call	803e984 <ip_write>
 80499d4:	e0bff715 	stw	r2,-36(fp)
      if (i < 0)
 80499d8:	e0bff717 	ldw	r2,-36(fp)
 80499dc:	1000060e 	bge	r2,zero,80499f8 <icmprcv+0xa1c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
 80499e0:	d0a07e17 	ldw	r2,-32264(gp)
 80499e4:	1081000c 	andi	r2,r2,1024
 80499e8:	10000326 	beq	r2,zero,80499f8 <icmprcv+0xa1c>
            dprintf("icmp: can't send timestamp reply\n");
 80499ec:	01020174 	movhi	r4,2053
 80499f0:	210fec04 	addi	r4,r4,16304
 80499f4:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
 80499f8:	0005883a 	mov	r2,zero
 80499fc:	00002706 	br	8049a9c <icmprcv+0xac0>
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 8049a00:	d0a07e17 	ldw	r2,-32264(gp)
 8049a04:	1081000c 	andi	r2,r2,1024
 8049a08:	10000326 	beq	r2,zero,8049a18 <icmprcv+0xa3c>
         dprintf("icmp: got info request\n");
 8049a0c:	01020174 	movhi	r4,2053
 8049a10:	210ff504 	addi	r4,r4,16340
 8049a14:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8049a18:	01000084 	movi	r4,2
 8049a1c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8049a20:	e13ff317 	ldw	r4,-52(fp)
 8049a24:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049a28:	01000084 	movi	r4,2
 8049a2c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      break;
 8049a30:	00001906 	br	8049a98 <icmprcv+0xabc>
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 8049a34:	d0a07e17 	ldw	r2,-32264(gp)
 8049a38:	1081000c 	andi	r2,r2,1024
 8049a3c:	10000e26 	beq	r2,zero,8049a78 <icmprcv+0xa9c>
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
 8049a40:	e0bff917 	ldw	r2,-28(fp)
 8049a44:	10800003 	ldbu	r2,0(r2)
 8049a48:	10803fcc 	andi	r2,r2,255
 8049a4c:	1080201c 	xori	r2,r2,128
 8049a50:	10bfe004 	addi	r2,r2,-128
 8049a54:	100b883a 	mov	r5,r2
 8049a58:	01020174 	movhi	r4,2053
 8049a5c:	210ffb04 	addi	r4,r4,16364
 8049a60:	800325c0 	call	800325c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 8049a64:	d0a07e17 	ldw	r2,-32264(gp)
 8049a68:	1080008c 	andi	r2,r2,2
 8049a6c:	10000226 	beq	r2,zero,8049a78 <icmprcv+0xa9c>
 8049a70:	e13ff317 	ldw	r4,-52(fp)
 8049a74:	803fa040 	call	803fa04 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 8049a78:	01000084 	movi	r4,2
 8049a7c:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
      pk_free(p);
 8049a80:	e13ff317 	ldw	r4,-52(fp)
 8049a84:	802bb980 	call	802bb98 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049a88:	01000084 	movi	r4,2
 8049a8c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>
      return ENP_NOT_MINE;
 8049a90:	00800084 	movi	r2,2
 8049a94:	00000106 	br	8049a9c <icmprcv+0xac0>
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
 8049a98:	00800084 	movi	r2,2
#endif   /* FULL_ICMP */
}
 8049a9c:	e6fffe04 	addi	sp,fp,-8
 8049aa0:	dfc00317 	ldw	ra,12(sp)
 8049aa4:	df000217 	ldw	fp,8(sp)
 8049aa8:	dc400117 	ldw	r17,4(sp)
 8049aac:	dc000017 	ldw	r16,0(sp)
 8049ab0:	dec00404 	addi	sp,sp,16
 8049ab4:	f800283a 	ret

08049ab8 <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 8049ab8:	defff404 	addi	sp,sp,-48
 8049abc:	dfc00b15 	stw	ra,44(sp)
 8049ac0:	df000a15 	stw	fp,40(sp)
 8049ac4:	df000a04 	addi	fp,sp,40
 8049ac8:	e13ffb15 	stw	r4,-20(fp)
 8049acc:	e17ffa15 	stw	r5,-24(fp)
 8049ad0:	e1bff915 	stw	r6,-28(fp)
 8049ad4:	e1fff815 	stw	r7,-32(fp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 8049ad8:	d0a07e17 	ldw	r2,-32264(gp)
 8049adc:	1080040c 	andi	r2,r2,16
 8049ae0:	10001826 	beq	r2,zero,8049b44 <icmp_destun+0x8c>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 8049ae4:	e0bff817 	ldw	r2,-32(fp)
 8049ae8:	10803fcc 	andi	r2,r2,255
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 8049aec:	100690ba 	slli	r3,r2,2
 8049af0:	00820174 	movhi	r2,2053
 8049af4:	1885883a 	add	r2,r3,r2
 8049af8:	1118d917 	ldw	r4,25444(r2)
 8049afc:	e0bffb17 	ldw	r2,-20(fp)
 8049b00:	11403fcc 	andi	r5,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 8049b04:	e0bffb17 	ldw	r2,-20(fp)
 8049b08:	1004d23a 	srli	r2,r2,8
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 8049b0c:	11803fcc 	andi	r6,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 8049b10:	e0bffb17 	ldw	r2,-20(fp)
 8049b14:	1004d43a 	srli	r2,r2,16
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 8049b18:	10803fcc 	andi	r2,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
 8049b1c:	e0fffb17 	ldw	r3,-20(fp)
 8049b20:	1806d63a 	srli	r3,r3,24
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 8049b24:	d8c00115 	stw	r3,4(sp)
 8049b28:	d8800015 	stw	r2,0(sp)
 8049b2c:	300f883a 	mov	r7,r6
 8049b30:	280d883a 	mov	r6,r5
 8049b34:	200b883a 	mov	r5,r4
 8049b38:	01020174 	movhi	r4,2053
 8049b3c:	21101504 	addi	r4,r4,16468
 8049b40:	800325c0 	call	800325c <printf>
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
 8049b44:	01000084 	movi	r4,2
 8049b48:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
 8049b4c:	01008504 	movi	r4,532
 8049b50:	802b8840 	call	802b884 <pk_alloc>
 8049b54:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049b58:	01000084 	movi	r4,2
 8049b5c:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 8049b60:	e0bfff17 	ldw	r2,-4(fp)
 8049b64:	10000c1e 	bne	r2,zero,8049b98 <icmp_destun+0xe0>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 8049b68:	d0a07e17 	ldw	r2,-32264(gp)
 8049b6c:	1080800c 	andi	r2,r2,512
 8049b70:	10000326 	beq	r2,zero,8049b80 <icmp_destun+0xc8>
         dprintf("icmp: can't alloc pkt\n");
 8049b74:	01020174 	movhi	r4,2053
 8049b78:	21102204 	addi	r4,r4,16520
 8049b7c:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 8049b80:	008201b4 	movhi	r2,2054
 8049b84:	10bd4c17 	ldw	r2,-2768(r2)
 8049b88:	10c00044 	addi	r3,r2,1
 8049b8c:	008201b4 	movhi	r2,2054
 8049b90:	10fd4c15 	stw	r3,-2768(r2)
      return;
 8049b94:	00007806 	br	8049d78 <icmp_destun+0x2c0>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 8049b98:	e0bfff17 	ldw	r2,-4(fp)
 8049b9c:	10800317 	ldw	r2,12(r2)
 8049ba0:	e0bffe15 	stw	r2,-8(fp)
   pip->ip_src = src_addr;
 8049ba4:	e0bffe17 	ldw	r2,-8(fp)
 8049ba8:	e0fffa17 	ldw	r3,-24(fp)
 8049bac:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = host;
 8049bb0:	e0bffe17 	ldw	r2,-8(fp)
 8049bb4:	e0fffb17 	ldw	r3,-20(fp)
 8049bb8:	10c00415 	stw	r3,16(r2)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
 8049bbc:	e0bfff17 	ldw	r2,-4(fp)
 8049bc0:	10800317 	ldw	r2,12(r2)
 8049bc4:	10c00504 	addi	r3,r2,20
 8049bc8:	e0bfff17 	ldw	r2,-4(fp)
 8049bcc:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= sizeof(struct ip);
 8049bd0:	e0bfff17 	ldw	r2,-4(fp)
 8049bd4:	10800417 	ldw	r2,16(r2)
 8049bd8:	10fffb04 	addi	r3,r2,-20
 8049bdc:	e0bfff17 	ldw	r2,-4(fp)
 8049be0:	10c00415 	stw	r3,16(r2)
   p->net = net;     /* Put in the interface that this packet came in on */
 8049be4:	e0bfff17 	ldw	r2,-4(fp)
 8049be8:	e0c00217 	ldw	r3,8(fp)
 8049bec:	10c00615 	stw	r3,24(r2)

   d = (struct destun *)p->nb_prot;
 8049bf0:	e0bfff17 	ldw	r2,-4(fp)
 8049bf4:	10800317 	ldw	r2,12(r2)
 8049bf8:	e0bffd15 	stw	r2,-12(fp)

   if (typecode & 0xFF00)               /* if the type was sent */
 8049bfc:	e0bff817 	ldw	r2,-32(fp)
 8049c00:	10bfc00c 	andi	r2,r2,65280
 8049c04:	10000626 	beq	r2,zero,8049c20 <icmp_destun+0x168>
      d->dtype = (char)(typecode >>8);  /* then use it */
 8049c08:	e0bff817 	ldw	r2,-32(fp)
 8049c0c:	1004d23a 	srli	r2,r2,8
 8049c10:	1007883a 	mov	r3,r2
 8049c14:	e0bffd17 	ldw	r2,-12(fp)
 8049c18:	10c00005 	stb	r3,0(r2)
 8049c1c:	00000306 	br	8049c2c <icmp_destun+0x174>
   else                                 /* else use default */
      d->dtype = DESTIN;
 8049c20:	e0bffd17 	ldw	r2,-12(fp)
 8049c24:	00c000c4 	movi	r3,3
 8049c28:	10c00005 	stb	r3,0(r2)
   d->dcode = (char)(typecode & 0xFF);
 8049c2c:	e0bff817 	ldw	r2,-32(fp)
 8049c30:	1007883a 	mov	r3,r2
 8049c34:	e0bffd17 	ldw	r2,-12(fp)
 8049c38:	10c00045 	stb	r3,1(r2)
   d->dno1 = d->dno2 = 0;
 8049c3c:	e0bffd17 	ldw	r2,-12(fp)
 8049c40:	1000018d 	sth	zero,6(r2)
 8049c44:	e0bffd17 	ldw	r2,-12(fp)
 8049c48:	10c0018b 	ldhu	r3,6(r2)
 8049c4c:	e0bffd17 	ldw	r2,-12(fp)
 8049c50:	10c0010d 	sth	r3,4(r2)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 8049c54:	e0bff817 	ldw	r2,-32(fp)
 8049c58:	10803fcc 	andi	r2,r2,255
 8049c5c:	10800118 	cmpnei	r2,r2,4
 8049c60:	1000121e 	bne	r2,zero,8049cac <icmp_destun+0x1f4>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
 8049c64:	e0800217 	ldw	r2,8(fp)
 8049c68:	10c00917 	ldw	r3,36(r2)
 8049c6c:	e0800217 	ldw	r2,8(fp)
 8049c70:	10800817 	ldw	r2,32(r2)
 8049c74:	1885c83a 	sub	r2,r3,r2
 8049c78:	1005d23a 	srai	r2,r2,8
 8049c7c:	10803fcc 	andi	r2,r2,255
 8049c80:	1009883a 	mov	r4,r2
 8049c84:	e0800217 	ldw	r2,8(fp)
 8049c88:	10c00917 	ldw	r3,36(r2)
 8049c8c:	e0800217 	ldw	r2,8(fp)
 8049c90:	10800817 	ldw	r2,32(r2)
 8049c94:	1885c83a 	sub	r2,r3,r2
 8049c98:	1004923a 	slli	r2,r2,8
 8049c9c:	2084b03a 	or	r2,r4,r2
 8049ca0:	1007883a 	mov	r3,r2
 8049ca4:	e0bffd17 	ldw	r2,-12(fp)
 8049ca8:	10c0018d 	sth	r3,6(r2)
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 8049cac:	e0bffd17 	ldw	r2,-12(fp)
 8049cb0:	10800204 	addi	r2,r2,8
 8049cb4:	01800704 	movi	r6,28
 8049cb8:	e17ff917 	ldw	r5,-28(fp)
 8049cbc:	1009883a 	mov	r4,r2
 8049cc0:	8002ea40 	call	8002ea4 <memcpy>

   d->dchksum = 0;
 8049cc4:	e0bffd17 	ldw	r2,-12(fp)
 8049cc8:	1000008d 	sth	zero,2(r2)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 8049ccc:	01400484 	movi	r5,18
 8049cd0:	e13ffd17 	ldw	r4,-12(fp)
 8049cd4:	8027be00 	call	8027be0 <cksum>
 8049cd8:	0084303a 	nor	r2,zero,r2
 8049cdc:	1007883a 	mov	r3,r2
 8049ce0:	e0bffd17 	ldw	r2,-12(fp)
 8049ce4:	10c0008d 	sth	r3,2(r2)

   p->nb_plen =  sizeof(struct destun);
 8049ce8:	e0bfff17 	ldw	r2,-4(fp)
 8049cec:	00c00904 	movi	r3,36
 8049cf0:	10c00415 	stw	r3,16(r2)
   p->fhost = host;
 8049cf4:	e0bfff17 	ldw	r2,-4(fp)
 8049cf8:	e0fffb17 	ldw	r3,-20(fp)
 8049cfc:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
 8049d00:	e17fff17 	ldw	r5,-4(fp)
 8049d04:	01000044 	movi	r4,1
 8049d08:	803e9840 	call	803e984 <ip_write>
 8049d0c:	e0bffc15 	stw	r2,-16(fp)
   if (i < 0)
 8049d10:	e0bffc17 	ldw	r2,-16(fp)
 8049d14:	10000c0e 	bge	r2,zero,8049d48 <icmp_destun+0x290>
   {
      icmp_mib.icmpOutErrors++;
 8049d18:	008201b4 	movhi	r2,2054
 8049d1c:	10bd4c17 	ldw	r2,-2768(r2)
 8049d20:	10c00044 	addi	r3,r2,1
 8049d24:	008201b4 	movhi	r2,2054
 8049d28:	10fd4c15 	stw	r3,-2768(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 8049d2c:	d0a07e17 	ldw	r2,-32264(gp)
 8049d30:	1080860c 	andi	r2,r2,536
 8049d34:	10000f26 	beq	r2,zero,8049d74 <icmp_destun+0x2bc>
         dprintf("ICMP: Can't send dest unreachable\n");
 8049d38:	01020174 	movhi	r4,2053
 8049d3c:	21102804 	addi	r4,r4,16544
 8049d40:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG  */
      return;
 8049d44:	00000b06 	br	8049d74 <icmp_destun+0x2bc>
   }
   icmp_mib.icmpOutMsgs++;
 8049d48:	008201b4 	movhi	r2,2054
 8049d4c:	10bd4b17 	ldw	r2,-2772(r2)
 8049d50:	10c00044 	addi	r3,r2,1
 8049d54:	008201b4 	movhi	r2,2054
 8049d58:	10fd4b15 	stw	r3,-2772(r2)
   icmp_mib.icmpOutDestUnreachs++;
 8049d5c:	008201b4 	movhi	r2,2054
 8049d60:	10bd4d17 	ldw	r2,-2764(r2)
 8049d64:	10c00044 	addi	r3,r2,1
 8049d68:	008201b4 	movhi	r2,2054
 8049d6c:	10fd4d15 	stw	r3,-2764(r2)
   return;
 8049d70:	00000106 	br	8049d78 <icmp_destun+0x2c0>
      return;
 8049d74:	0001883a 	nop
}
 8049d78:	e037883a 	mov	sp,fp
 8049d7c:	dfc00117 	ldw	ra,4(sp)
 8049d80:	df000017 	ldw	fp,0(sp)
 8049d84:	dec00204 	addi	sp,sp,8
 8049d88:	f800283a 	ret

08049d8c <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 8049d8c:	defff504 	addi	sp,sp,-44
 8049d90:	dfc00a15 	stw	ra,40(sp)
 8049d94:	df000915 	stw	fp,36(sp)
 8049d98:	df000904 	addi	fp,sp,36
 8049d9c:	e13ffa15 	stw	r4,-24(fp)
 8049da0:	2805883a 	mov	r2,r5
 8049da4:	e0bff905 	stb	r2,-28(fp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 8049da8:	d0a07e17 	ldw	r2,-32264(gp)
 8049dac:	1080040c 	andi	r2,r2,16
 8049db0:	10003026 	beq	r2,zero,8049e74 <icmp_timex+0xe8>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 8049db4:	e17ff907 	ldb	r5,-28(fp)
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 8049db8:	e0bffa17 	ldw	r2,-24(fp)
 8049dbc:	10800317 	ldw	r2,12(r2)
 8049dc0:	1004d23a 	srli	r2,r2,8
 8049dc4:	10c03fcc 	andi	r3,r2,255
 8049dc8:	e0bffa17 	ldw	r2,-24(fp)
 8049dcc:	10800317 	ldw	r2,12(r2)
 8049dd0:	1004923a 	slli	r2,r2,8
 8049dd4:	10bfffcc 	andi	r2,r2,65535
 8049dd8:	1884b03a 	or	r2,r3,r2
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 8049ddc:	11803fcc 	andi	r6,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 8049de0:	e0bffa17 	ldw	r2,-24(fp)
 8049de4:	10800317 	ldw	r2,12(r2)
 8049de8:	1004d23a 	srli	r2,r2,8
 8049dec:	10c03fcc 	andi	r3,r2,255
 8049df0:	e0bffa17 	ldw	r2,-24(fp)
 8049df4:	10800317 	ldw	r2,12(r2)
 8049df8:	1004923a 	slli	r2,r2,8
 8049dfc:	10bfffcc 	andi	r2,r2,65535
 8049e00:	1884b03a 	or	r2,r3,r2
 8049e04:	1004d23a 	srli	r2,r2,8
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 8049e08:	11c03fcc 	andi	r7,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 8049e0c:	e0bffa17 	ldw	r2,-24(fp)
 8049e10:	10800317 	ldw	r2,12(r2)
 8049e14:	1004d23a 	srli	r2,r2,8
 8049e18:	10c03fcc 	andi	r3,r2,255
 8049e1c:	e0bffa17 	ldw	r2,-24(fp)
 8049e20:	10800317 	ldw	r2,12(r2)
 8049e24:	1004923a 	slli	r2,r2,8
 8049e28:	10bfffcc 	andi	r2,r2,65535
 8049e2c:	1884b03a 	or	r2,r3,r2
 8049e30:	1004d43a 	srli	r2,r2,16
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 8049e34:	10803fcc 	andi	r2,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
 8049e38:	e0fffa17 	ldw	r3,-24(fp)
 8049e3c:	18c00317 	ldw	r3,12(r3)
 8049e40:	1806d23a 	srli	r3,r3,8
 8049e44:	19003fcc 	andi	r4,r3,255
 8049e48:	e0fffa17 	ldw	r3,-24(fp)
 8049e4c:	18c00317 	ldw	r3,12(r3)
 8049e50:	1806923a 	slli	r3,r3,8
 8049e54:	18ffffcc 	andi	r3,r3,65535
 8049e58:	20c6b03a 	or	r3,r4,r3
 8049e5c:	1806d63a 	srli	r3,r3,24
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 8049e60:	d8c00115 	stw	r3,4(sp)
 8049e64:	d8800015 	stw	r2,0(sp)
 8049e68:	01020174 	movhi	r4,2053
 8049e6c:	21103104 	addi	r4,r4,16580
 8049e70:	800325c0 	call	800325c <printf>
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 8049e74:	e0bffa17 	ldw	r2,-24(fp)
 8049e78:	10800003 	ldbu	r2,0(r2)
 8049e7c:	10803fcc 	andi	r2,r2,255
 8049e80:	100490ba 	slli	r2,r2,2
 8049e84:	10800f0c 	andi	r2,r2,60
 8049e88:	10800404 	addi	r2,r2,16
 8049e8c:	e0bfffc5 	stb	r2,-1(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 8049e90:	01000084 	movi	r4,2
 8049e94:	802c6640 	call	802c664 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 8049e98:	e0bfffc3 	ldbu	r2,-1(fp)
 8049e9c:	d0e07c17 	ldw	r3,-32272(gp)
 8049ea0:	10c5883a 	add	r2,r2,r3
 8049ea4:	10800504 	addi	r2,r2,20
 8049ea8:	1009883a 	mov	r4,r2
 8049eac:	802b8840 	call	802b884 <pk_alloc>
 8049eb0:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 8049eb4:	01000084 	movi	r4,2
 8049eb8:	802c7200 	call	802c720 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 8049ebc:	e0bffe17 	ldw	r2,-8(fp)
 8049ec0:	10000c1e 	bne	r2,zero,8049ef4 <icmp_timex+0x168>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 8049ec4:	d0a07e17 	ldw	r2,-32264(gp)
 8049ec8:	1080800c 	andi	r2,r2,512
 8049ecc:	10000326 	beq	r2,zero,8049edc <icmp_timex+0x150>
         dprintf("icmp: can't alloc pkt\n");
 8049ed0:	01020174 	movhi	r4,2053
 8049ed4:	21102204 	addi	r4,r4,16520
 8049ed8:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 8049edc:	008201b4 	movhi	r2,2054
 8049ee0:	10bd4c17 	ldw	r2,-2768(r2)
 8049ee4:	10c00044 	addi	r3,r2,1
 8049ee8:	008201b4 	movhi	r2,2054
 8049eec:	10fd4c15 	stw	r3,-2768(r2)
      return;
 8049ef0:	00005c06 	br	804a064 <icmp_timex+0x2d8>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 8049ef4:	e0bffe17 	ldw	r2,-8(fp)
 8049ef8:	10800317 	ldw	r2,12(r2)
 8049efc:	e0bffd15 	stw	r2,-12(fp)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
 8049f00:	e0bffa17 	ldw	r2,-24(fp)
 8049f04:	10c00417 	ldw	r3,16(r2)
 8049f08:	e0bffd17 	ldw	r2,-12(fp)
 8049f0c:	10c00315 	stw	r3,12(r2)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
 8049f10:	e0bffa17 	ldw	r2,-24(fp)
 8049f14:	10c00317 	ldw	r3,12(r2)
 8049f18:	e0bffd17 	ldw	r2,-12(fp)
 8049f1c:	10c00415 	stw	r3,16(r2)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
 8049f20:	e0bffe17 	ldw	r2,-8(fp)
 8049f24:	10800317 	ldw	r2,12(r2)
 8049f28:	10c00504 	addi	r3,r2,20
 8049f2c:	e0bffe17 	ldw	r2,-8(fp)
 8049f30:	10c00315 	stw	r3,12(r2)

   tx = (struct timex *) p->nb_prot;
 8049f34:	e0bffe17 	ldw	r2,-8(fp)
 8049f38:	10800317 	ldw	r2,12(r2)
 8049f3c:	e0bffc15 	stw	r2,-16(fp)

   tx->ttype = TIMEX;
 8049f40:	e0bffc17 	ldw	r2,-16(fp)
 8049f44:	00c002c4 	movi	r3,11
 8049f48:	10c00005 	stb	r3,0(r2)
   tx->tcode = code;
 8049f4c:	e0bffc17 	ldw	r2,-16(fp)
 8049f50:	e0fff903 	ldbu	r3,-28(fp)
 8049f54:	10c00045 	stb	r3,1(r2)
   tx->tno1 = tx->tno2 = 0;
 8049f58:	e0bffc17 	ldw	r2,-16(fp)
 8049f5c:	1000018d 	sth	zero,6(r2)
 8049f60:	e0bffc17 	ldw	r2,-16(fp)
 8049f64:	10c0018b 	ldhu	r3,6(r2)
 8049f68:	e0bffc17 	ldw	r2,-16(fp)
 8049f6c:	10c0010d 	sth	r3,4(r2)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
 8049f70:	e0bffc17 	ldw	r2,-16(fp)
 8049f74:	10c00204 	addi	r3,r2,8
 8049f78:	e0bffa17 	ldw	r2,-24(fp)
 8049f7c:	10800003 	ldbu	r2,0(r2)
 8049f80:	10803fcc 	andi	r2,r2,255
 8049f84:	100490ba 	slli	r2,r2,2
 8049f88:	10800f0c 	andi	r2,r2,60
 8049f8c:	10800204 	addi	r2,r2,8
 8049f90:	100d883a 	mov	r6,r2
 8049f94:	e17ffa17 	ldw	r5,-24(fp)
 8049f98:	1809883a 	mov	r4,r3
 8049f9c:	8002ea40 	call	8002ea4 <memcpy>

   tx->tchksum = 0;
 8049fa0:	e0bffc17 	ldw	r2,-16(fp)
 8049fa4:	1000008d 	sth	zero,2(r2)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 8049fa8:	e0bfffc3 	ldbu	r2,-1(fp)
 8049fac:	1004d07a 	srli	r2,r2,1
 8049fb0:	10803fcc 	andi	r2,r2,255
 8049fb4:	100b883a 	mov	r5,r2
 8049fb8:	e13ffc17 	ldw	r4,-16(fp)
 8049fbc:	8027be00 	call	8027be0 <cksum>
 8049fc0:	0084303a 	nor	r2,zero,r2
 8049fc4:	1007883a 	mov	r3,r2
 8049fc8:	e0bffc17 	ldw	r2,-16(fp)
 8049fcc:	10c0008d 	sth	r3,2(r2)

   p->nb_plen = icmp_pkt_len;
 8049fd0:	e0ffffc3 	ldbu	r3,-1(fp)
 8049fd4:	e0bffe17 	ldw	r2,-8(fp)
 8049fd8:	10c00415 	stw	r3,16(r2)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
 8049fdc:	e0bffd17 	ldw	r2,-12(fp)
 8049fe0:	10c00417 	ldw	r3,16(r2)
 8049fe4:	e0bffe17 	ldw	r2,-8(fp)
 8049fe8:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
 8049fec:	e17ffe17 	ldw	r5,-8(fp)
 8049ff0:	01000044 	movi	r4,1
 8049ff4:	803e9840 	call	803e984 <ip_write>
 8049ff8:	e0bffb15 	stw	r2,-20(fp)
   if (i < 0)
 8049ffc:	e0bffb17 	ldw	r2,-20(fp)
 804a000:	10000c0e 	bge	r2,zero,804a034 <icmp_timex+0x2a8>
   {
      icmp_mib.icmpOutErrors++;
 804a004:	008201b4 	movhi	r2,2054
 804a008:	10bd4c17 	ldw	r2,-2768(r2)
 804a00c:	10c00044 	addi	r3,r2,1
 804a010:	008201b4 	movhi	r2,2054
 804a014:	10fd4c15 	stw	r3,-2768(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 804a018:	d0a07e17 	ldw	r2,-32264(gp)
 804a01c:	1080860c 	andi	r2,r2,536
 804a020:	10000f26 	beq	r2,zero,804a060 <icmp_timex+0x2d4>
         dprintf("ICMP: Can't send Time Exceeded\n");
 804a024:	01020174 	movhi	r4,2053
 804a028:	21104104 	addi	r4,r4,16644
 804a02c:	80033800 	call	8003380 <puts>
#endif   /* NPDEBUG  */
      return;
 804a030:	00000b06 	br	804a060 <icmp_timex+0x2d4>
   }
   icmp_mib.icmpOutMsgs++;
 804a034:	008201b4 	movhi	r2,2054
 804a038:	10bd4b17 	ldw	r2,-2772(r2)
 804a03c:	10c00044 	addi	r3,r2,1
 804a040:	008201b4 	movhi	r2,2054
 804a044:	10fd4b15 	stw	r3,-2772(r2)
   icmp_mib.icmpOutTimeExcds++;
 804a048:	008201b4 	movhi	r2,2054
 804a04c:	10bd4e17 	ldw	r2,-2760(r2)
 804a050:	10c00044 	addi	r3,r2,1
 804a054:	008201b4 	movhi	r2,2054
 804a058:	10fd4e15 	stw	r3,-2760(r2)
   return;
 804a05c:	00000106 	br	804a064 <icmp_timex+0x2d8>
      return;
 804a060:	0001883a 	nop
}
 804a064:	e037883a 	mov	sp,fp
 804a068:	dfc00117 	ldw	ra,4(sp)
 804a06c:	df000017 	ldw	fp,0(sp)
 804a070:	dec00204 	addi	sp,sp,8
 804a074:	f800283a 	ret

0804a078 <icmp_du>:
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
 804a078:	defffc04 	addi	sp,sp,-16
 804a07c:	dfc00315 	stw	ra,12(sp)
 804a080:	df000215 	stw	fp,8(sp)
 804a084:	df000204 	addi	fp,sp,8
 804a088:	e13fff15 	stw	r4,-4(fp)
 804a08c:	e17ffe15 	stw	r5,-8(fp)
   /* see if user app wants notification first */
   if (icmpdu_hook)
 804a090:	d0a0d817 	ldw	r2,-31904(gp)
 804a094:	10000426 	beq	r2,zero,804a0a8 <icmp_du+0x30>
      icmpdu_hook(p, pdp);
 804a098:	d0a0d817 	ldw	r2,-31904(gp)
 804a09c:	e17ffe17 	ldw	r5,-8(fp)
 804a0a0:	e13fff17 	ldw	r4,-4(fp)
 804a0a4:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
 804a0a8:	e17ffe17 	ldw	r5,-8(fp)
 804a0ac:	e13fff17 	ldw	r4,-4(fp)
 804a0b0:	802e4440 	call	802e444 <so_icmpdu>
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
 804a0b4:	0001883a 	nop
 804a0b8:	e037883a 	mov	sp,fp
 804a0bc:	dfc00117 	ldw	ra,4(sp)
 804a0c0:	df000017 	ldw	fp,0(sp)
 804a0c4:	dec00204 	addi	sp,sp,8
 804a0c8:	f800283a 	ret

0804a0cc <atexit>:
 804a0cc:	200b883a 	mov	r5,r4
 804a0d0:	000f883a 	mov	r7,zero
 804a0d4:	000d883a 	mov	r6,zero
 804a0d8:	0009883a 	mov	r4,zero
 804a0dc:	804caa81 	jmpi	804caa8 <__register_exitproc>

0804a0e0 <atoi>:
 804a0e0:	01800284 	movi	r6,10
 804a0e4:	000b883a 	mov	r5,zero
 804a0e8:	804a9581 	jmpi	804a958 <strtol>

0804a0ec <_atoi_r>:
 804a0ec:	01c00284 	movi	r7,10
 804a0f0:	000d883a 	mov	r6,zero
 804a0f4:	804a9381 	jmpi	804a938 <_strtol_r>

0804a0f8 <exit>:
 804a0f8:	defffe04 	addi	sp,sp,-8
 804a0fc:	000b883a 	mov	r5,zero
 804a100:	dc000015 	stw	r16,0(sp)
 804a104:	dfc00115 	stw	ra,4(sp)
 804a108:	2021883a 	mov	r16,r4
 804a10c:	804cb380 	call	804cb38 <__call_exitprocs>
 804a110:	00820174 	movhi	r2,2053
 804a114:	1118df17 	ldw	r4,25468(r2)
 804a118:	20800f17 	ldw	r2,60(r4)
 804a11c:	10000126 	beq	r2,zero,804a124 <exit+0x2c>
 804a120:	103ee83a 	callr	r2
 804a124:	8009883a 	mov	r4,r16
 804a128:	80109400 	call	8010940 <_exit>

0804a12c <memalign>:
 804a12c:	00c20174 	movhi	r3,2053
 804a130:	2005883a 	mov	r2,r4
 804a134:	1918e017 	ldw	r4,25472(r3)
 804a138:	280d883a 	mov	r6,r5
 804a13c:	100b883a 	mov	r5,r2
 804a140:	804a1441 	jmpi	804a144 <_memalign_r>

0804a144 <_memalign_r>:
 804a144:	28800268 	cmpgeui	r2,r5,9
 804a148:	10005226 	beq	r2,zero,804a294 <_memalign_r+0x150>
 804a14c:	defffa04 	addi	sp,sp,-24
 804a150:	dc800215 	stw	r18,8(sp)
 804a154:	348002c4 	addi	r18,r6,11
 804a158:	dcc00315 	stw	r19,12(sp)
 804a15c:	dc000015 	stw	r16,0(sp)
 804a160:	dfc00515 	stw	ra,20(sp)
 804a164:	dd000415 	stw	r20,16(sp)
 804a168:	dc400115 	stw	r17,4(sp)
 804a16c:	908005f0 	cmpltui	r2,r18,23
 804a170:	2821883a 	mov	r16,r5
 804a174:	2027883a 	mov	r19,r4
 804a178:	1000381e 	bne	r2,zero,804a25c <_memalign_r+0x118>
 804a17c:	00bffe04 	movi	r2,-8
 804a180:	90a4703a 	and	r18,r18,r2
 804a184:	90003716 	blt	r18,zero,804a264 <_memalign_r+0x120>
 804a188:	91803636 	bltu	r18,r6,804a264 <_memalign_r+0x120>
 804a18c:	80800428 	cmpgeui	r2,r16,16
 804a190:	1000011e 	bne	r2,zero,804a198 <_memalign_r+0x54>
 804a194:	04000404 	movi	r16,16
 804a198:	81400404 	addi	r5,r16,16
 804a19c:	2c8b883a 	add	r5,r5,r18
 804a1a0:	9809883a 	mov	r4,r19
 804a1a4:	8008e340 	call	8008e34 <_malloc_r>
 804a1a8:	1023883a 	mov	r17,r2
 804a1ac:	10003026 	beq	r2,zero,804a270 <_memalign_r+0x12c>
 804a1b0:	9809883a 	mov	r4,r19
 804a1b4:	80110740 	call	8011074 <__malloc_lock>
 804a1b8:	800b883a 	mov	r5,r16
 804a1bc:	8809883a 	mov	r4,r17
 804a1c0:	800e2940 	call	800e294 <__umodsi3>
 804a1c4:	8d3ffe04 	addi	r20,r17,-8
 804a1c8:	10001b26 	beq	r2,zero,804a238 <_memalign_r+0xf4>
 804a1cc:	80bfffc4 	addi	r2,r16,-1
 804a1d0:	0407c83a 	sub	r3,zero,r16
 804a1d4:	8885883a 	add	r2,r17,r2
 804a1d8:	10c4703a 	and	r2,r2,r3
 804a1dc:	10bffe04 	addi	r2,r2,-8
 804a1e0:	1507c83a 	sub	r3,r2,r20
 804a1e4:	19000408 	cmpgei	r4,r3,16
 804a1e8:	20002c26 	beq	r4,zero,804a29c <_memalign_r+0x158>
 804a1ec:	1029883a 	mov	r20,r2
 804a1f0:	88bfff17 	ldw	r2,-4(r17)
 804a1f4:	013fff04 	movi	r4,-4
 804a1f8:	880b883a 	mov	r5,r17
 804a1fc:	1104703a 	and	r2,r2,r4
 804a200:	10c5c83a 	sub	r2,r2,r3
 804a204:	11000054 	ori	r4,r2,1
 804a208:	a1000115 	stw	r4,4(r20)
 804a20c:	a085883a 	add	r2,r20,r2
 804a210:	11800117 	ldw	r6,4(r2)
 804a214:	9809883a 	mov	r4,r19
 804a218:	31800054 	ori	r6,r6,1
 804a21c:	11800115 	stw	r6,4(r2)
 804a220:	88bfff17 	ldw	r2,-4(r17)
 804a224:	1080004c 	andi	r2,r2,1
 804a228:	10c4b03a 	or	r2,r2,r3
 804a22c:	88bfff15 	stw	r2,-4(r17)
 804a230:	80082380 	call	8008238 <_free_r>
 804a234:	a4400204 	addi	r17,r20,8
 804a238:	a0800117 	ldw	r2,4(r20)
 804a23c:	00ffff04 	movi	r3,-4
 804a240:	10c4703a 	and	r2,r2,r3
 804a244:	1485c83a 	sub	r2,r2,r18
 804a248:	10c00410 	cmplti	r3,r2,16
 804a24c:	18001726 	beq	r3,zero,804a2ac <_memalign_r+0x168>
 804a250:	9809883a 	mov	r4,r19
 804a254:	801119c0 	call	801119c <__malloc_unlock>
 804a258:	00000506 	br	804a270 <_memalign_r+0x12c>
 804a25c:	04800404 	movi	r18,16
 804a260:	91bfca2e 	bgeu	r18,r6,804a18c <_memalign_r+0x48>
 804a264:	00800304 	movi	r2,12
 804a268:	98800015 	stw	r2,0(r19)
 804a26c:	0023883a 	mov	r17,zero
 804a270:	8805883a 	mov	r2,r17
 804a274:	dfc00517 	ldw	ra,20(sp)
 804a278:	dd000417 	ldw	r20,16(sp)
 804a27c:	dcc00317 	ldw	r19,12(sp)
 804a280:	dc800217 	ldw	r18,8(sp)
 804a284:	dc400117 	ldw	r17,4(sp)
 804a288:	dc000017 	ldw	r16,0(sp)
 804a28c:	dec00604 	addi	sp,sp,24
 804a290:	f800283a 	ret
 804a294:	300b883a 	mov	r5,r6
 804a298:	8008e341 	jmpi	8008e34 <_malloc_r>
 804a29c:	1421883a 	add	r16,r2,r16
 804a2a0:	8507c83a 	sub	r3,r16,r20
 804a2a4:	8029883a 	mov	r20,r16
 804a2a8:	003fd106 	br	804a1f0 <_memalign_r+0xac>
 804a2ac:	a48b883a 	add	r5,r20,r18
 804a2b0:	10800054 	ori	r2,r2,1
 804a2b4:	28800115 	stw	r2,4(r5)
 804a2b8:	a0800117 	ldw	r2,4(r20)
 804a2bc:	29400204 	addi	r5,r5,8
 804a2c0:	9809883a 	mov	r4,r19
 804a2c4:	1080004c 	andi	r2,r2,1
 804a2c8:	14a4b03a 	or	r18,r2,r18
 804a2cc:	a4800115 	stw	r18,4(r20)
 804a2d0:	80082380 	call	8008238 <_free_r>
 804a2d4:	003fde06 	br	804a250 <_memalign_r+0x10c>

0804a2d8 <malloc>:
 804a2d8:	00820174 	movhi	r2,2053
 804a2dc:	200b883a 	mov	r5,r4
 804a2e0:	1118e017 	ldw	r4,25472(r2)
 804a2e4:	8008e341 	jmpi	8008e34 <_malloc_r>

0804a2e8 <free>:
 804a2e8:	00820174 	movhi	r2,2053
 804a2ec:	200b883a 	mov	r5,r4
 804a2f0:	1118e017 	ldw	r4,25472(r2)
 804a2f4:	80082381 	jmpi	8008238 <_free_r>

0804a2f8 <_sprintf_r>:
 804a2f8:	deffe404 	addi	sp,sp,-112
 804a2fc:	2807883a 	mov	r3,r5
 804a300:	dfc01a15 	stw	ra,104(sp)
 804a304:	d9c01b15 	stw	r7,108(sp)
 804a308:	00a00034 	movhi	r2,32768
 804a30c:	023ffff4 	movhi	r8,65535
 804a310:	10bfffc4 	addi	r2,r2,-1
 804a314:	42008204 	addi	r8,r8,520
 804a318:	d9c01b04 	addi	r7,sp,108
 804a31c:	d80b883a 	mov	r5,sp
 804a320:	d8c00015 	stw	r3,0(sp)
 804a324:	d8c00415 	stw	r3,16(sp)
 804a328:	d8800515 	stw	r2,20(sp)
 804a32c:	d8800215 	stw	r2,8(sp)
 804a330:	da000315 	stw	r8,12(sp)
 804a334:	804a9740 	call	804a974 <___svfprintf_internal_r>
 804a338:	d8c00017 	ldw	r3,0(sp)
 804a33c:	18000005 	stb	zero,0(r3)
 804a340:	dfc01a17 	ldw	ra,104(sp)
 804a344:	dec01c04 	addi	sp,sp,112
 804a348:	f800283a 	ret

0804a34c <sprintf>:
 804a34c:	deffe304 	addi	sp,sp,-116
 804a350:	2007883a 	mov	r3,r4
 804a354:	dfc01a15 	stw	ra,104(sp)
 804a358:	d9801b15 	stw	r6,108(sp)
 804a35c:	d9c01c15 	stw	r7,112(sp)
 804a360:	00820174 	movhi	r2,2053
 804a364:	1118e017 	ldw	r4,25472(r2)
 804a368:	023ffff4 	movhi	r8,65535
 804a36c:	00a00034 	movhi	r2,32768
 804a370:	10bfffc4 	addi	r2,r2,-1
 804a374:	42008204 	addi	r8,r8,520
 804a378:	280d883a 	mov	r6,r5
 804a37c:	d9c01b04 	addi	r7,sp,108
 804a380:	d80b883a 	mov	r5,sp
 804a384:	d8c00015 	stw	r3,0(sp)
 804a388:	d8c00415 	stw	r3,16(sp)
 804a38c:	d8800515 	stw	r2,20(sp)
 804a390:	d8800215 	stw	r2,8(sp)
 804a394:	da000315 	stw	r8,12(sp)
 804a398:	804a9740 	call	804a974 <___svfprintf_internal_r>
 804a39c:	d8c00017 	ldw	r3,0(sp)
 804a3a0:	18000005 	stb	zero,0(r3)
 804a3a4:	dfc01a17 	ldw	ra,104(sp)
 804a3a8:	dec01d04 	addi	sp,sp,116
 804a3ac:	f800283a 	ret

0804a3b0 <strchr>:
 804a3b0:	28803fcc 	andi	r2,r5,255
 804a3b4:	2811883a 	mov	r8,r5
 804a3b8:	218000cc 	andi	r6,r4,3
 804a3bc:	10003226 	beq	r2,zero,804a488 <strchr+0xd8>
 804a3c0:	1007883a 	mov	r3,r2
 804a3c4:	30002d1e 	bne	r6,zero,804a47c <strchr+0xcc>
 804a3c8:	29403fcc 	andi	r5,r5,255
 804a3cc:	2804923a 	slli	r2,r5,8
 804a3d0:	20c00017 	ldw	r3,0(r4)
 804a3d4:	01ffbff4 	movhi	r7,65279
 804a3d8:	288ab03a 	or	r5,r5,r2
 804a3dc:	2814943a 	slli	r10,r5,16
 804a3e0:	39ffbfc4 	addi	r7,r7,-257
 804a3e4:	00c4303a 	nor	r2,zero,r3
 804a3e8:	5154b03a 	or	r10,r10,r5
 804a3ec:	50caf03a 	xor	r5,r10,r3
 804a3f0:	29cd883a 	add	r6,r5,r7
 804a3f4:	19c7883a 	add	r3,r3,r7
 804a3f8:	014a303a 	nor	r5,zero,r5
 804a3fc:	10c4703a 	and	r2,r2,r3
 804a400:	314a703a 	and	r5,r6,r5
 804a404:	02602074 	movhi	r9,32897
 804a408:	1144b03a 	or	r2,r2,r5
 804a40c:	4a602004 	addi	r9,r9,-32640
 804a410:	1244703a 	and	r2,r2,r9
 804a414:	10000c1e 	bne	r2,zero,804a448 <strchr+0x98>
 804a418:	20c00117 	ldw	r3,4(r4)
 804a41c:	21000104 	addi	r4,r4,4
 804a420:	1a8af03a 	xor	r5,r3,r10
 804a424:	19c5883a 	add	r2,r3,r7
 804a428:	29cd883a 	add	r6,r5,r7
 804a42c:	00c6303a 	nor	r3,zero,r3
 804a430:	014a303a 	nor	r5,zero,r5
 804a434:	10c4703a 	and	r2,r2,r3
 804a438:	314a703a 	and	r5,r6,r5
 804a43c:	1144b03a 	or	r2,r2,r5
 804a440:	1244703a 	and	r2,r2,r9
 804a444:	103ff426 	beq	r2,zero,804a418 <strchr+0x68>
 804a448:	20800003 	ldbu	r2,0(r4)
 804a44c:	40c03fcc 	andi	r3,r8,255
 804a450:	10002d26 	beq	r2,zero,804a508 <strchr+0x158>
 804a454:	18802326 	beq	r3,r2,804a4e4 <strchr+0x134>
 804a458:	20800043 	ldbu	r2,1(r4)
 804a45c:	21000044 	addi	r4,r4,1
 804a460:	103ffc1e 	bne	r2,zero,804a454 <strchr+0xa4>
 804a464:	0005883a 	mov	r2,zero
 804a468:	f800283a 	ret
 804a46c:	10c01d26 	beq	r2,r3,804a4e4 <strchr+0x134>
 804a470:	21000044 	addi	r4,r4,1
 804a474:	208000cc 	andi	r2,r4,3
 804a478:	103fd326 	beq	r2,zero,804a3c8 <strchr+0x18>
 804a47c:	20800003 	ldbu	r2,0(r4)
 804a480:	103ffa1e 	bne	r2,zero,804a46c <strchr+0xbc>
 804a484:	003ff706 	br	804a464 <strchr+0xb4>
 804a488:	30001b1e 	bne	r6,zero,804a4f8 <strchr+0x148>
 804a48c:	20c00017 	ldw	r3,0(r4)
 804a490:	01bfbff4 	movhi	r6,65279
 804a494:	31bfbfc4 	addi	r6,r6,-257
 804a498:	1985883a 	add	r2,r3,r6
 804a49c:	01602074 	movhi	r5,32897
 804a4a0:	00c6303a 	nor	r3,zero,r3
 804a4a4:	10c4703a 	and	r2,r2,r3
 804a4a8:	29602004 	addi	r5,r5,-32640
 804a4ac:	1144703a 	and	r2,r2,r5
 804a4b0:	1000071e 	bne	r2,zero,804a4d0 <strchr+0x120>
 804a4b4:	20c00117 	ldw	r3,4(r4)
 804a4b8:	21000104 	addi	r4,r4,4
 804a4bc:	1985883a 	add	r2,r3,r6
 804a4c0:	00c6303a 	nor	r3,zero,r3
 804a4c4:	10c4703a 	and	r2,r2,r3
 804a4c8:	1144703a 	and	r2,r2,r5
 804a4cc:	103ff926 	beq	r2,zero,804a4b4 <strchr+0x104>
 804a4d0:	20800003 	ldbu	r2,0(r4)
 804a4d4:	10000326 	beq	r2,zero,804a4e4 <strchr+0x134>
 804a4d8:	20800043 	ldbu	r2,1(r4)
 804a4dc:	21000044 	addi	r4,r4,1
 804a4e0:	103ffd1e 	bne	r2,zero,804a4d8 <strchr+0x128>
 804a4e4:	2005883a 	mov	r2,r4
 804a4e8:	f800283a 	ret
 804a4ec:	21000044 	addi	r4,r4,1
 804a4f0:	208000cc 	andi	r2,r4,3
 804a4f4:	103fe526 	beq	r2,zero,804a48c <strchr+0xdc>
 804a4f8:	20800003 	ldbu	r2,0(r4)
 804a4fc:	103ffb1e 	bne	r2,zero,804a4ec <strchr+0x13c>
 804a500:	2005883a 	mov	r2,r4
 804a504:	f800283a 	ret
 804a508:	f800283a 	ret

0804a50c <strcpy>:
 804a50c:	2906b03a 	or	r3,r5,r4
 804a510:	18c000cc 	andi	r3,r3,3
 804a514:	2005883a 	mov	r2,r4
 804a518:	1800151e 	bne	r3,zero,804a570 <strcpy+0x64>
 804a51c:	29c00017 	ldw	r7,0(r5)
 804a520:	02bfbff4 	movhi	r10,65279
 804a524:	52bfbfc4 	addi	r10,r10,-257
 804a528:	3a87883a 	add	r3,r7,r10
 804a52c:	01c8303a 	nor	r4,zero,r7
 804a530:	02602074 	movhi	r9,32897
 804a534:	1906703a 	and	r3,r3,r4
 804a538:	4a602004 	addi	r9,r9,-32640
 804a53c:	1a46703a 	and	r3,r3,r9
 804a540:	18000b1e 	bne	r3,zero,804a570 <strcpy+0x64>
 804a544:	1007883a 	mov	r3,r2
 804a548:	19c00015 	stw	r7,0(r3)
 804a54c:	29c00117 	ldw	r7,4(r5)
 804a550:	29400104 	addi	r5,r5,4
 804a554:	18c00104 	addi	r3,r3,4
 804a558:	3a8d883a 	add	r6,r7,r10
 804a55c:	01d0303a 	nor	r8,zero,r7
 804a560:	320c703a 	and	r6,r6,r8
 804a564:	324c703a 	and	r6,r6,r9
 804a568:	303ff726 	beq	r6,zero,804a548 <strcpy+0x3c>
 804a56c:	00000106 	br	804a574 <strcpy+0x68>
 804a570:	1007883a 	mov	r3,r2
 804a574:	29800003 	ldbu	r6,0(r5)
 804a578:	18c00044 	addi	r3,r3,1
 804a57c:	29400044 	addi	r5,r5,1
 804a580:	31c03fcc 	andi	r7,r6,255
 804a584:	39c0201c 	xori	r7,r7,128
 804a588:	39ffe004 	addi	r7,r7,-128
 804a58c:	19bfffc5 	stb	r6,-1(r3)
 804a590:	383ff81e 	bne	r7,zero,804a574 <strcpy+0x68>
 804a594:	f800283a 	ret

0804a598 <strncmp>:
 804a598:	30002926 	beq	r6,zero,804a640 <strncmp+0xa8>
 804a59c:	2144b03a 	or	r2,r4,r5
 804a5a0:	108000cc 	andi	r2,r2,3
 804a5a4:	1000151e 	bne	r2,zero,804a5fc <strncmp+0x64>
 804a5a8:	30800128 	cmpgeui	r2,r6,4
 804a5ac:	10001326 	beq	r2,zero,804a5fc <strncmp+0x64>
 804a5b0:	02bfbff4 	movhi	r10,65279
 804a5b4:	02602074 	movhi	r9,32897
 804a5b8:	52bfbfc4 	addi	r10,r10,-257
 804a5bc:	4a602004 	addi	r9,r9,-32640
 804a5c0:	00000706 	br	804a5e0 <strncmp+0x48>
 804a5c4:	31bfff04 	addi	r6,r6,-4
 804a5c8:	30c00130 	cmpltui	r3,r6,4
 804a5cc:	30001c26 	beq	r6,zero,804a640 <strncmp+0xa8>
 804a5d0:	10001b1e 	bne	r2,zero,804a640 <strncmp+0xa8>
 804a5d4:	21000104 	addi	r4,r4,4
 804a5d8:	29400104 	addi	r5,r5,4
 804a5dc:	1800071e 	bne	r3,zero,804a5fc <strncmp+0x64>
 804a5e0:	20c00017 	ldw	r3,0(r4)
 804a5e4:	29c00017 	ldw	r7,0(r5)
 804a5e8:	1a85883a 	add	r2,r3,r10
 804a5ec:	00d0303a 	nor	r8,zero,r3
 804a5f0:	1204703a 	and	r2,r2,r8
 804a5f4:	1244703a 	and	r2,r2,r9
 804a5f8:	19fff226 	beq	r3,r7,804a5c4 <strncmp+0x2c>
 804a5fc:	21c00007 	ldb	r7,0(r4)
 804a600:	28800007 	ldb	r2,0(r5)
 804a604:	3880101e 	bne	r7,r2,804a648 <strncmp+0xb0>
 804a608:	30800060 	cmpeqi	r2,r6,1
 804a60c:	10000c1e 	bne	r2,zero,804a640 <strncmp+0xa8>
 804a610:	2807883a 	mov	r3,r5
 804a614:	00000406 	br	804a628 <strncmp+0x90>
 804a618:	21c00007 	ldb	r7,0(r4)
 804a61c:	1a000007 	ldb	r8,0(r3)
 804a620:	3a000a1e 	bne	r7,r8,804a64c <strncmp+0xb4>
 804a624:	10000626 	beq	r2,zero,804a640 <strncmp+0xa8>
 804a628:	18c00044 	addi	r3,r3,1
 804a62c:	00c4303a 	nor	r2,zero,r3
 804a630:	1185883a 	add	r2,r2,r6
 804a634:	21000044 	addi	r4,r4,1
 804a638:	2885883a 	add	r2,r5,r2
 804a63c:	383ff61e 	bne	r7,zero,804a618 <strncmp+0x80>
 804a640:	0005883a 	mov	r2,zero
 804a644:	f800283a 	ret
 804a648:	2807883a 	mov	r3,r5
 804a64c:	20800003 	ldbu	r2,0(r4)
 804a650:	18c00003 	ldbu	r3,0(r3)
 804a654:	10c5c83a 	sub	r2,r2,r3
 804a658:	f800283a 	ret

0804a65c <strncpy>:
 804a65c:	2906b03a 	or	r3,r5,r4
 804a660:	18c000cc 	andi	r3,r3,3
 804a664:	2005883a 	mov	r2,r4
 804a668:	1800021e 	bne	r3,zero,804a674 <strncpy+0x18>
 804a66c:	30c00128 	cmpgeui	r3,r6,4
 804a670:	18000f1e 	bne	r3,zero,804a6b0 <strncpy+0x54>
 804a674:	1011883a 	mov	r8,r2
 804a678:	00000906 	br	804a6a0 <strncpy+0x44>
 804a67c:	29ffffc3 	ldbu	r7,-1(r5)
 804a680:	327fffc4 	addi	r9,r6,-1
 804a684:	19ffffc5 	stb	r7,-1(r3)
 804a688:	39c03fcc 	andi	r7,r7,255
 804a68c:	39c0201c 	xori	r7,r7,128
 804a690:	39ffe004 	addi	r7,r7,-128
 804a694:	38001826 	beq	r7,zero,804a6f8 <strncpy+0x9c>
 804a698:	1811883a 	mov	r8,r3
 804a69c:	480d883a 	mov	r6,r9
 804a6a0:	29400044 	addi	r5,r5,1
 804a6a4:	40c00044 	addi	r3,r8,1
 804a6a8:	303ff41e 	bne	r6,zero,804a67c <strncpy+0x20>
 804a6ac:	f800283a 	ret
 804a6b0:	02bfbff4 	movhi	r10,65279
 804a6b4:	02602074 	movhi	r9,32897
 804a6b8:	2011883a 	mov	r8,r4
 804a6bc:	52bfbfc4 	addi	r10,r10,-257
 804a6c0:	4a602004 	addi	r9,r9,-32640
 804a6c4:	29c00017 	ldw	r7,0(r5)
 804a6c8:	3a87883a 	add	r3,r7,r10
 804a6cc:	01c8303a 	nor	r4,zero,r7
 804a6d0:	1906703a 	and	r3,r3,r4
 804a6d4:	1a46703a 	and	r3,r3,r9
 804a6d8:	183ff11e 	bne	r3,zero,804a6a0 <strncpy+0x44>
 804a6dc:	31bfff04 	addi	r6,r6,-4
 804a6e0:	41c00015 	stw	r7,0(r8)
 804a6e4:	30c00130 	cmpltui	r3,r6,4
 804a6e8:	42000104 	addi	r8,r8,4
 804a6ec:	29400104 	addi	r5,r5,4
 804a6f0:	183ff426 	beq	r3,zero,804a6c4 <strncpy+0x68>
 804a6f4:	003fea06 	br	804a6a0 <strncpy+0x44>
 804a6f8:	418d883a 	add	r6,r8,r6
 804a6fc:	48000426 	beq	r9,zero,804a710 <strncpy+0xb4>
 804a700:	18c00044 	addi	r3,r3,1
 804a704:	183fffc5 	stb	zero,-1(r3)
 804a708:	19bffd1e 	bne	r3,r6,804a700 <strncpy+0xa4>
 804a70c:	f800283a 	ret
 804a710:	f800283a 	ret

0804a714 <_strtol_l.isra.0>:
 804a714:	defff504 	addi	sp,sp,-44
 804a718:	dd800715 	stw	r22,28(sp)
 804a71c:	dd400615 	stw	r21,24(sp)
 804a720:	dd000515 	stw	r20,20(sp)
 804a724:	dc000115 	stw	r16,4(sp)
 804a728:	dfc00a15 	stw	ra,40(sp)
 804a72c:	df000915 	stw	fp,36(sp)
 804a730:	ddc00815 	stw	r23,32(sp)
 804a734:	dcc00415 	stw	r19,16(sp)
 804a738:	dc800315 	stw	r18,12(sp)
 804a73c:	dc400215 	stw	r17,8(sp)
 804a740:	2829883a 	mov	r20,r5
 804a744:	d9000015 	stw	r4,0(sp)
 804a748:	302d883a 	mov	r22,r6
 804a74c:	382b883a 	mov	r21,r7
 804a750:	2821883a 	mov	r16,r5
 804a754:	80c00003 	ldbu	r3,0(r16)
 804a758:	00820174 	movhi	r2,2053
 804a75c:	8009883a 	mov	r4,r16
 804a760:	1885883a 	add	r2,r3,r2
 804a764:	10bbfa43 	ldbu	r2,-4119(r2)
 804a768:	84000044 	addi	r16,r16,1
 804a76c:	1080020c 	andi	r2,r2,8
 804a770:	103ff81e 	bne	r2,zero,804a754 <_strtol_l.isra.0+0x40>
 804a774:	18800b58 	cmpnei	r2,r3,45
 804a778:	10005226 	beq	r2,zero,804a8c4 <_strtol_l.isra.0+0x1b0>
 804a77c:	18800ae0 	cmpeqi	r2,r3,43
 804a780:	05e00034 	movhi	r23,32768
 804a784:	1000231e 	bne	r2,zero,804a814 <_strtol_l.isra.0+0x100>
 804a788:	1823883a 	mov	r17,r3
 804a78c:	bdffffc4 	addi	r23,r23,-1
 804a790:	0027883a 	mov	r19,zero
 804a794:	a8002426 	beq	r21,zero,804a828 <_strtol_l.isra.0+0x114>
 804a798:	a8800420 	cmpeqi	r2,r21,16
 804a79c:	10004e1e 	bne	r2,zero,804a8d8 <_strtol_l.isra.0+0x1c4>
 804a7a0:	a825883a 	mov	r18,r21
 804a7a4:	900b883a 	mov	r5,r18
 804a7a8:	b809883a 	mov	r4,r23
 804a7ac:	800e2940 	call	800e294 <__umodsi3>
 804a7b0:	900b883a 	mov	r5,r18
 804a7b4:	b809883a 	mov	r4,r23
 804a7b8:	1039883a 	mov	fp,r2
 804a7bc:	800e2300 	call	800e230 <__udivsi3>
 804a7c0:	100d883a 	mov	r6,r2
 804a7c4:	0013883a 	mov	r9,zero
 804a7c8:	0005883a 	mov	r2,zero
 804a7cc:	88fff404 	addi	r3,r17,-48
 804a7d0:	1a0002a8 	cmpgeui	r8,r3,10
 804a7d4:	40000426 	beq	r8,zero,804a7e8 <_strtol_l.isra.0+0xd4>
 804a7d8:	88ffefc4 	addi	r3,r17,-65
 804a7dc:	18c006a8 	cmpgeui	r3,r3,26
 804a7e0:	1800191e 	bne	r3,zero,804a848 <_strtol_l.isra.0+0x134>
 804a7e4:	88fff244 	addi	r3,r17,-55
 804a7e8:	1d401c0e 	bge	r3,r21,804a85c <_strtol_l.isra.0+0x148>
 804a7ec:	4a3fffe0 	cmpeqi	r8,r9,-1
 804a7f0:	4000051e 	bne	r8,zero,804a808 <_strtol_l.isra.0+0xf4>
 804a7f4:	30801236 	bltu	r6,r2,804a840 <_strtol_l.isra.0+0x12c>
 804a7f8:	30801026 	beq	r6,r2,804a83c <_strtol_l.isra.0+0x128>
 804a7fc:	1485383a 	mul	r2,r2,r18
 804a800:	02400044 	movi	r9,1
 804a804:	1885883a 	add	r2,r3,r2
 804a808:	84000044 	addi	r16,r16,1
 804a80c:	847fffc3 	ldbu	r17,-1(r16)
 804a810:	003fee06 	br	804a7cc <_strtol_l.isra.0+0xb8>
 804a814:	84400003 	ldbu	r17,0(r16)
 804a818:	bdffffc4 	addi	r23,r23,-1
 804a81c:	24000084 	addi	r16,r4,2
 804a820:	0027883a 	mov	r19,zero
 804a824:	a83fdc1e 	bne	r21,zero,804a798 <_strtol_l.isra.0+0x84>
 804a828:	88800c20 	cmpeqi	r2,r17,48
 804a82c:	1000371e 	bne	r2,zero,804a90c <_strtol_l.isra.0+0x1f8>
 804a830:	04800284 	movi	r18,10
 804a834:	05400284 	movi	r21,10
 804a838:	003fda06 	br	804a7a4 <_strtol_l.isra.0+0x90>
 804a83c:	e0ffef0e 	bge	fp,r3,804a7fc <_strtol_l.isra.0+0xe8>
 804a840:	027fffc4 	movi	r9,-1
 804a844:	003ff006 	br	804a808 <_strtol_l.isra.0+0xf4>
 804a848:	88ffe7c4 	addi	r3,r17,-97
 804a84c:	18c006a8 	cmpgeui	r3,r3,26
 804a850:	1800021e 	bne	r3,zero,804a85c <_strtol_l.isra.0+0x148>
 804a854:	88ffea44 	addi	r3,r17,-87
 804a858:	1d7fe416 	blt	r3,r21,804a7ec <_strtol_l.isra.0+0xd8>
 804a85c:	48ffffd8 	cmpnei	r3,r9,-1
 804a860:	18001126 	beq	r3,zero,804a8a8 <_strtol_l.isra.0+0x194>
 804a864:	98000126 	beq	r19,zero,804a86c <_strtol_l.isra.0+0x158>
 804a868:	0085c83a 	sub	r2,zero,r2
 804a86c:	b0000226 	beq	r22,zero,804a878 <_strtol_l.isra.0+0x164>
 804a870:	48002f1e 	bne	r9,zero,804a930 <_strtol_l.isra.0+0x21c>
 804a874:	b5000015 	stw	r20,0(r22)
 804a878:	dfc00a17 	ldw	ra,40(sp)
 804a87c:	df000917 	ldw	fp,36(sp)
 804a880:	ddc00817 	ldw	r23,32(sp)
 804a884:	dd800717 	ldw	r22,28(sp)
 804a888:	dd400617 	ldw	r21,24(sp)
 804a88c:	dd000517 	ldw	r20,20(sp)
 804a890:	dcc00417 	ldw	r19,16(sp)
 804a894:	dc800317 	ldw	r18,12(sp)
 804a898:	dc400217 	ldw	r17,8(sp)
 804a89c:	dc000117 	ldw	r16,4(sp)
 804a8a0:	dec00b04 	addi	sp,sp,44
 804a8a4:	f800283a 	ret
 804a8a8:	d8c00017 	ldw	r3,0(sp)
 804a8ac:	00800884 	movi	r2,34
 804a8b0:	18800015 	stw	r2,0(r3)
 804a8b4:	b0001c26 	beq	r22,zero,804a928 <_strtol_l.isra.0+0x214>
 804a8b8:	853fffc4 	addi	r20,r16,-1
 804a8bc:	b805883a 	mov	r2,r23
 804a8c0:	003fec06 	br	804a874 <_strtol_l.isra.0+0x160>
 804a8c4:	84400003 	ldbu	r17,0(r16)
 804a8c8:	05e00034 	movhi	r23,32768
 804a8cc:	24000084 	addi	r16,r4,2
 804a8d0:	04c00044 	movi	r19,1
 804a8d4:	003faf06 	br	804a794 <_strtol_l.isra.0+0x80>
 804a8d8:	88800c18 	cmpnei	r2,r17,48
 804a8dc:	1000041e 	bne	r2,zero,804a8f0 <_strtol_l.isra.0+0x1dc>
 804a8e0:	80800003 	ldbu	r2,0(r16)
 804a8e4:	108037cc 	andi	r2,r2,223
 804a8e8:	10801620 	cmpeqi	r2,r2,88
 804a8ec:	1000021e 	bne	r2,zero,804a8f8 <_strtol_l.isra.0+0x1e4>
 804a8f0:	04800404 	movi	r18,16
 804a8f4:	003fab06 	br	804a7a4 <_strtol_l.isra.0+0x90>
 804a8f8:	84400043 	ldbu	r17,1(r16)
 804a8fc:	04800404 	movi	r18,16
 804a900:	84000084 	addi	r16,r16,2
 804a904:	05400404 	movi	r21,16
 804a908:	003fa606 	br	804a7a4 <_strtol_l.isra.0+0x90>
 804a90c:	80800003 	ldbu	r2,0(r16)
 804a910:	108037cc 	andi	r2,r2,223
 804a914:	10801620 	cmpeqi	r2,r2,88
 804a918:	103ff71e 	bne	r2,zero,804a8f8 <_strtol_l.isra.0+0x1e4>
 804a91c:	04800204 	movi	r18,8
 804a920:	05400204 	movi	r21,8
 804a924:	003f9f06 	br	804a7a4 <_strtol_l.isra.0+0x90>
 804a928:	b805883a 	mov	r2,r23
 804a92c:	003fd206 	br	804a878 <_strtol_l.isra.0+0x164>
 804a930:	102f883a 	mov	r23,r2
 804a934:	003fe006 	br	804a8b8 <_strtol_l.isra.0+0x1a4>

0804a938 <_strtol_r>:
 804a938:	804a7141 	jmpi	804a714 <_strtol_l.isra.0>

0804a93c <strtol_l>:
 804a93c:	00c20174 	movhi	r3,2053
 804a940:	2005883a 	mov	r2,r4
 804a944:	1918e017 	ldw	r4,25472(r3)
 804a948:	300f883a 	mov	r7,r6
 804a94c:	280d883a 	mov	r6,r5
 804a950:	100b883a 	mov	r5,r2
 804a954:	804a7141 	jmpi	804a714 <_strtol_l.isra.0>

0804a958 <strtol>:
 804a958:	00c20174 	movhi	r3,2053
 804a95c:	2005883a 	mov	r2,r4
 804a960:	1918e017 	ldw	r4,25472(r3)
 804a964:	300f883a 	mov	r7,r6
 804a968:	280d883a 	mov	r6,r5
 804a96c:	100b883a 	mov	r5,r2
 804a970:	804a7141 	jmpi	804a714 <_strtol_l.isra.0>

0804a974 <___svfprintf_internal_r>:
 804a974:	deffbf04 	addi	sp,sp,-260
 804a978:	dfc04015 	stw	ra,256(sp)
 804a97c:	dd803d15 	stw	r22,244(sp)
 804a980:	dcc03a15 	stw	r19,232(sp)
 804a984:	dc803915 	stw	r18,228(sp)
 804a988:	2027883a 	mov	r19,r4
 804a98c:	2825883a 	mov	r18,r5
 804a990:	302d883a 	mov	r22,r6
 804a994:	d9c00615 	stw	r7,24(sp)
 804a998:	df003f15 	stw	fp,252(sp)
 804a99c:	ddc03e15 	stw	r23,248(sp)
 804a9a0:	dd403c15 	stw	r21,240(sp)
 804a9a4:	dd003b15 	stw	r20,236(sp)
 804a9a8:	dc403815 	stw	r17,224(sp)
 804a9ac:	dc003715 	stw	r16,220(sp)
 804a9b0:	8008c440 	call	8008c44 <_localeconv_r>
 804a9b4:	10800017 	ldw	r2,0(r2)
 804a9b8:	1009883a 	mov	r4,r2
 804a9bc:	d8800d15 	stw	r2,52(sp)
 804a9c0:	8003a1c0 	call	8003a1c <strlen>
 804a9c4:	90c0030b 	ldhu	r3,12(r18)
 804a9c8:	d8800c15 	stw	r2,48(sp)
 804a9cc:	18c0200c 	andi	r3,r3,128
 804a9d0:	18000226 	beq	r3,zero,804a9dc <___svfprintf_internal_r+0x68>
 804a9d4:	90800417 	ldw	r2,16(r18)
 804a9d8:	10055c26 	beq	r2,zero,804bf4c <___svfprintf_internal_r+0x15d8>
 804a9dc:	d8802704 	addi	r2,sp,156
 804a9e0:	b02f883a 	mov	r23,r22
 804a9e4:	d8801a15 	stw	r2,104(sp)
 804a9e8:	d8001c15 	stw	zero,112(sp)
 804a9ec:	d8001b15 	stw	zero,108(sp)
 804a9f0:	d8000815 	stw	zero,32(sp)
 804a9f4:	d8000915 	stw	zero,36(sp)
 804a9f8:	d8000a15 	stw	zero,40(sp)
 804a9fc:	d8000b15 	stw	zero,44(sp)
 804aa00:	d8001015 	stw	zero,64(sp)
 804aa04:	d8000515 	stw	zero,20(sp)
 804aa08:	102d883a 	mov	r22,r2
 804aa0c:	b8800007 	ldb	r2,0(r23)
 804aa10:	1000d526 	beq	r2,zero,804ad68 <___svfprintf_internal_r+0x3f4>
 804aa14:	b821883a 	mov	r16,r23
 804aa18:	00000306 	br	804aa28 <___svfprintf_internal_r+0xb4>
 804aa1c:	80800047 	ldb	r2,1(r16)
 804aa20:	84000044 	addi	r16,r16,1
 804aa24:	10010626 	beq	r2,zero,804ae40 <___svfprintf_internal_r+0x4cc>
 804aa28:	10800958 	cmpnei	r2,r2,37
 804aa2c:	103ffb1e 	bne	r2,zero,804aa1c <___svfprintf_internal_r+0xa8>
 804aa30:	85e3c83a 	sub	r17,r16,r23
 804aa34:	85c1041e 	bne	r16,r23,804ae48 <___svfprintf_internal_r+0x4d4>
 804aa38:	80800003 	ldbu	r2,0(r16)
 804aa3c:	10803fcc 	andi	r2,r2,255
 804aa40:	1080201c 	xori	r2,r2,128
 804aa44:	10bfe004 	addi	r2,r2,-128
 804aa48:	1000c726 	beq	r2,zero,804ad68 <___svfprintf_internal_r+0x3f4>
 804aa4c:	82c00047 	ldb	r11,1(r16)
 804aa50:	85c00044 	addi	r23,r16,1
 804aa54:	d8001345 	stb	zero,77(sp)
 804aa58:	0009883a 	mov	r4,zero
 804aa5c:	000b883a 	mov	r5,zero
 804aa60:	023fffc4 	movi	r8,-1
 804aa64:	0021883a 	mov	r16,zero
 804aa68:	0019883a 	mov	r12,zero
 804aa6c:	bdc00044 	addi	r23,r23,1
 804aa70:	5839883a 	mov	fp,r11
 804aa74:	e0bff804 	addi	r2,fp,-32
 804aa78:	10c01668 	cmpgeui	r3,r2,89
 804aa7c:	18006a1e 	bne	r3,zero,804ac28 <___svfprintf_internal_r+0x2b4>
 804aa80:	100490ba 	slli	r2,r2,2
 804aa84:	00c20174 	movhi	r3,2053
 804aa88:	10c7883a 	add	r3,r2,r3
 804aa8c:	18aaa517 	ldw	r2,-21868(r3)
 804aa90:	1000683a 	jmp	r2
 804aa94:	0804b374 	orhi	zero,at,4813
 804aa98:	0804ac28 	cmpgeui	zero,at,4784
 804aa9c:	0804ac28 	cmpgeui	zero,at,4784
 804aaa0:	0804b368 	cmpgeui	zero,at,4813
 804aaa4:	0804ac28 	cmpgeui	zero,at,4784
 804aaa8:	0804ac28 	cmpgeui	zero,at,4784
 804aaac:	0804ac28 	cmpgeui	zero,at,4784
 804aab0:	0804ac28 	cmpgeui	zero,at,4784
 804aab4:	0804ac28 	cmpgeui	zero,at,4784
 804aab8:	0804ac28 	cmpgeui	zero,at,4784
 804aabc:	0804b340 	call	804b34 <OSCtxSw_SWITCH_PC+0x804af4>
 804aac0:	0804b330 	cmpltui	zero,at,4812
 804aac4:	0804ac28 	cmpgeui	zero,at,4784
 804aac8:	0804b318 	cmpnei	zero,at,4812
 804aacc:	0804b2d4 	ori	zero,at,4811
 804aad0:	0804ac28 	cmpgeui	zero,at,4784
 804aad4:	0804b2c8 	cmpgei	zero,at,4811
 804aad8:	0804abf8 	rdprs	zero,at,4783
 804aadc:	0804abf8 	rdprs	zero,at,4783
 804aae0:	0804abf8 	rdprs	zero,at,4783
 804aae4:	0804abf8 	rdprs	zero,at,4783
 804aae8:	0804abf8 	rdprs	zero,at,4783
 804aaec:	0804abf8 	rdprs	zero,at,4783
 804aaf0:	0804abf8 	rdprs	zero,at,4783
 804aaf4:	0804abf8 	rdprs	zero,at,4783
 804aaf8:	0804abf8 	rdprs	zero,at,4783
 804aafc:	0804ac28 	cmpgeui	zero,at,4784
 804ab00:	0804ac28 	cmpgeui	zero,at,4784
 804ab04:	0804ac28 	cmpgeui	zero,at,4784
 804ab08:	0804ac28 	cmpgeui	zero,at,4784
 804ab0c:	0804ac28 	cmpgeui	zero,at,4784
 804ab10:	0804ac28 	cmpgeui	zero,at,4784
 804ab14:	0804ac28 	cmpgeui	zero,at,4784
 804ab18:	0804ac28 	cmpgeui	zero,at,4784
 804ab1c:	0804ac28 	cmpgeui	zero,at,4784
 804ab20:	0804ac28 	cmpgeui	zero,at,4784
 804ab24:	0804b1bc 	xorhi	zero,at,4806
 804ab28:	0804aea4 	muli	zero,at,4794
 804ab2c:	0804ac28 	cmpgeui	zero,at,4784
 804ab30:	0804aea4 	muli	zero,at,4794
 804ab34:	0804ac28 	cmpgeui	zero,at,4784
 804ab38:	0804ac28 	cmpgeui	zero,at,4784
 804ab3c:	0804ac28 	cmpgeui	zero,at,4784
 804ab40:	0804ac28 	cmpgeui	zero,at,4784
 804ab44:	0804b1b0 	cmpltui	zero,at,4806
 804ab48:	0804ac28 	cmpgeui	zero,at,4784
 804ab4c:	0804ac28 	cmpgeui	zero,at,4784
 804ab50:	0804add8 	cmpnei	zero,at,4791
 804ab54:	0804ac28 	cmpgeui	zero,at,4784
 804ab58:	0804ac28 	cmpgeui	zero,at,4784
 804ab5c:	0804ac28 	cmpgeui	zero,at,4784
 804ab60:	0804ac28 	cmpgeui	zero,at,4784
 804ab64:	0804ac28 	cmpgeui	zero,at,4784
 804ab68:	0804adb0 	cmpltui	zero,at,4790
 804ab6c:	0804ac28 	cmpgeui	zero,at,4784
 804ab70:	0804ac28 	cmpgeui	zero,at,4784
 804ab74:	0804b468 	cmpgeui	zero,at,4817
 804ab78:	0804ac28 	cmpgeui	zero,at,4784
 804ab7c:	0804ac28 	cmpgeui	zero,at,4784
 804ab80:	0804ac28 	cmpgeui	zero,at,4784
 804ab84:	0804ac28 	cmpgeui	zero,at,4784
 804ab88:	0804ac28 	cmpgeui	zero,at,4784
 804ab8c:	0804ac28 	cmpgeui	zero,at,4784
 804ab90:	0804ac28 	cmpgeui	zero,at,4784
 804ab94:	0804ac28 	cmpgeui	zero,at,4784
 804ab98:	0804ac28 	cmpgeui	zero,at,4784
 804ab9c:	0804ac28 	cmpgeui	zero,at,4784
 804aba0:	0804b440 	call	804b44 <OSCtxSw_SWITCH_PC+0x804b04>
 804aba4:	0804b0a8 	cmpgeui	zero,at,4802
 804aba8:	0804aea4 	muli	zero,at,4794
 804abac:	0804aea4 	muli	zero,at,4794
 804abb0:	0804aea4 	muli	zero,at,4794
 804abb4:	0804b108 	cmpgei	zero,at,4804
 804abb8:	0804b0a8 	cmpgeui	zero,at,4802
 804abbc:	0804ac28 	cmpgeui	zero,at,4784
 804abc0:	0804ac28 	cmpgeui	zero,at,4784
 804abc4:	0804b19c 	xori	zero,at,4806
 804abc8:	0804ac28 	cmpgeui	zero,at,4784
 804abcc:	0804b160 	cmpeqi	zero,at,4805
 804abd0:	0804addc 	xori	zero,at,4791
 804abd4:	0804b120 	cmpeqi	zero,at,4804
 804abd8:	0804b114 	ori	zero,at,4804
 804abdc:	0804ac28 	cmpgeui	zero,at,4784
 804abe0:	0804b3e8 	cmpgeui	zero,at,4815
 804abe4:	0804ac28 	cmpgeui	zero,at,4784
 804abe8:	0804adb4 	orhi	zero,at,4790
 804abec:	0804ac28 	cmpgeui	zero,at,4784
 804abf0:	0804ac28 	cmpgeui	zero,at,4784
 804abf4:	0804b3a0 	cmpeqi	zero,at,4814
 804abf8:	0021883a 	mov	r16,zero
 804abfc:	e0bff404 	addi	r2,fp,-48
 804ac00:	bf000007 	ldb	fp,0(r23)
 804ac04:	840002a4 	muli	r16,r16,10
 804ac08:	bdc00044 	addi	r23,r23,1
 804ac0c:	1421883a 	add	r16,r2,r16
 804ac10:	e0bff404 	addi	r2,fp,-48
 804ac14:	10c002b0 	cmpltui	r3,r2,10
 804ac18:	183ff91e 	bne	r3,zero,804ac00 <___svfprintf_internal_r+0x28c>
 804ac1c:	e0bff804 	addi	r2,fp,-32
 804ac20:	10c01668 	cmpgeui	r3,r2,89
 804ac24:	183f9626 	beq	r3,zero,804aa80 <___svfprintf_internal_r+0x10c>
 804ac28:	21003fcc 	andi	r4,r4,255
 804ac2c:	2006981e 	bne	r4,zero,804c690 <___svfprintf_internal_r+0x1d1c>
 804ac30:	e0004d26 	beq	fp,zero,804ad68 <___svfprintf_internal_r+0x3f4>
 804ac34:	df001d05 	stb	fp,116(sp)
 804ac38:	d8001345 	stb	zero,77(sp)
 804ac3c:	05000044 	movi	r20,1
 804ac40:	05400044 	movi	r21,1
 804ac44:	dc401d04 	addi	r17,sp,116
 804ac48:	db000415 	stw	r12,16(sp)
 804ac4c:	0011883a 	mov	r8,zero
 804ac50:	d8000715 	stw	zero,28(sp)
 804ac54:	d8800417 	ldw	r2,16(sp)
 804ac58:	1380008c 	andi	r14,r2,2
 804ac5c:	70000126 	beq	r14,zero,804ac64 <___svfprintf_internal_r+0x2f0>
 804ac60:	a5000084 	addi	r20,r20,2
 804ac64:	d8800417 	ldw	r2,16(sp)
 804ac68:	d8c01c17 	ldw	r3,112(sp)
 804ac6c:	1340210c 	andi	r13,r2,132
 804ac70:	6800021e 	bne	r13,zero,804ac7c <___svfprintf_internal_r+0x308>
 804ac74:	850fc83a 	sub	r7,r16,r20
 804ac78:	01c32d16 	blt	zero,r7,804b930 <___svfprintf_internal_r+0xfbc>
 804ac7c:	d8801347 	ldb	r2,77(sp)
 804ac80:	10000c26 	beq	r2,zero,804acb4 <___svfprintf_internal_r+0x340>
 804ac84:	d8801b17 	ldw	r2,108(sp)
 804ac88:	d9001344 	addi	r4,sp,77
 804ac8c:	18c00044 	addi	r3,r3,1
 804ac90:	10800044 	addi	r2,r2,1
 804ac94:	b1000015 	stw	r4,0(r22)
 804ac98:	01000044 	movi	r4,1
 804ac9c:	d8801b15 	stw	r2,108(sp)
 804aca0:	b1000115 	stw	r4,4(r22)
 804aca4:	d8c01c15 	stw	r3,112(sp)
 804aca8:	10800208 	cmpgei	r2,r2,8
 804acac:	1003611e 	bne	r2,zero,804ba34 <___svfprintf_internal_r+0x10c0>
 804acb0:	b5800204 	addi	r22,r22,8
 804acb4:	70000c26 	beq	r14,zero,804ace8 <___svfprintf_internal_r+0x374>
 804acb8:	d8801b17 	ldw	r2,108(sp)
 804acbc:	d9001384 	addi	r4,sp,78
 804acc0:	18c00084 	addi	r3,r3,2
 804acc4:	10800044 	addi	r2,r2,1
 804acc8:	b1000015 	stw	r4,0(r22)
 804accc:	01000084 	movi	r4,2
 804acd0:	d8801b15 	stw	r2,108(sp)
 804acd4:	b1000115 	stw	r4,4(r22)
 804acd8:	d8c01c15 	stw	r3,112(sp)
 804acdc:	10800208 	cmpgei	r2,r2,8
 804ace0:	1003621e 	bne	r2,zero,804ba6c <___svfprintf_internal_r+0x10f8>
 804ace4:	b5800204 	addi	r22,r22,8
 804ace8:	6b402018 	cmpnei	r13,r13,128
 804acec:	68023926 	beq	r13,zero,804b5d4 <___svfprintf_internal_r+0xc60>
 804acf0:	4551c83a 	sub	r8,r8,r21
 804acf4:	02027116 	blt	zero,r8,804b6bc <___svfprintf_internal_r+0xd48>
 804acf8:	d8800417 	ldw	r2,16(sp)
 804acfc:	1080400c 	andi	r2,r2,256
 804ad00:	1001eb1e 	bne	r2,zero,804b4b0 <___svfprintf_internal_r+0xb3c>
 804ad04:	d8801b17 	ldw	r2,108(sp)
 804ad08:	1d47883a 	add	r3,r3,r21
 804ad0c:	b4400015 	stw	r17,0(r22)
 804ad10:	10800044 	addi	r2,r2,1
 804ad14:	b5400115 	stw	r21,4(r22)
 804ad18:	d8801b15 	stw	r2,108(sp)
 804ad1c:	d8c01c15 	stw	r3,112(sp)
 804ad20:	10800208 	cmpgei	r2,r2,8
 804ad24:	1002ee1e 	bne	r2,zero,804b8e0 <___svfprintf_internal_r+0xf6c>
 804ad28:	b5800204 	addi	r22,r22,8
 804ad2c:	d8800417 	ldw	r2,16(sp)
 804ad30:	1440010c 	andi	r17,r2,4
 804ad34:	88000226 	beq	r17,zero,804ad40 <___svfprintf_internal_r+0x3cc>
 804ad38:	8523c83a 	sub	r17,r16,r20
 804ad3c:	0440ab16 	blt	zero,r17,804afec <___svfprintf_internal_r+0x678>
 804ad40:	8500010e 	bge	r16,r20,804ad48 <___svfprintf_internal_r+0x3d4>
 804ad44:	a021883a 	mov	r16,r20
 804ad48:	d8800517 	ldw	r2,20(sp)
 804ad4c:	1405883a 	add	r2,r2,r16
 804ad50:	d8800515 	stw	r2,20(sp)
 804ad54:	1802a01e 	bne	r3,zero,804b7d8 <___svfprintf_internal_r+0xe64>
 804ad58:	b8800007 	ldb	r2,0(r23)
 804ad5c:	d8001b15 	stw	zero,108(sp)
 804ad60:	dd802704 	addi	r22,sp,156
 804ad64:	103f2b1e 	bne	r2,zero,804aa14 <___svfprintf_internal_r+0xa0>
 804ad68:	d8801c17 	ldw	r2,112(sp)
 804ad6c:	10064a1e 	bne	r2,zero,804c698 <___svfprintf_internal_r+0x1d24>
 804ad70:	9080030b 	ldhu	r2,12(r18)
 804ad74:	1080100c 	andi	r2,r2,64
 804ad78:	1006eb1e 	bne	r2,zero,804c928 <___svfprintf_internal_r+0x1fb4>
 804ad7c:	d8800517 	ldw	r2,20(sp)
 804ad80:	dfc04017 	ldw	ra,256(sp)
 804ad84:	df003f17 	ldw	fp,252(sp)
 804ad88:	ddc03e17 	ldw	r23,248(sp)
 804ad8c:	dd803d17 	ldw	r22,244(sp)
 804ad90:	dd403c17 	ldw	r21,240(sp)
 804ad94:	dd003b17 	ldw	r20,236(sp)
 804ad98:	dcc03a17 	ldw	r19,232(sp)
 804ad9c:	dc803917 	ldw	r18,228(sp)
 804ada0:	dc403817 	ldw	r17,224(sp)
 804ada4:	dc003717 	ldw	r16,220(sp)
 804ada8:	dec04104 	addi	sp,sp,260
 804adac:	f800283a 	ret
 804adb0:	63000414 	ori	r12,r12,16
 804adb4:	6080080c 	andi	r2,r12,32
 804adb8:	10008026 	beq	r2,zero,804afbc <___svfprintf_internal_r+0x648>
 804adbc:	d8c00617 	ldw	r3,24(sp)
 804adc0:	00800044 	movi	r2,1
 804adc4:	1d000017 	ldw	r20,0(r3)
 804adc8:	1d400117 	ldw	r21,4(r3)
 804adcc:	18c00204 	addi	r3,r3,8
 804add0:	d8c00615 	stw	r3,24(sp)
 804add4:	00000906 	br	804adfc <___svfprintf_internal_r+0x488>
 804add8:	63000414 	ori	r12,r12,16
 804addc:	6080080c 	andi	r2,r12,32
 804ade0:	10006a26 	beq	r2,zero,804af8c <___svfprintf_internal_r+0x618>
 804ade4:	d8c00617 	ldw	r3,24(sp)
 804ade8:	0005883a 	mov	r2,zero
 804adec:	1d000017 	ldw	r20,0(r3)
 804adf0:	1d400117 	ldw	r21,4(r3)
 804adf4:	18c00204 	addi	r3,r3,8
 804adf8:	d8c00615 	stw	r3,24(sp)
 804adfc:	d8001345 	stb	zero,77(sp)
 804ae00:	40ffffe0 	cmpeqi	r3,r8,-1
 804ae04:	001b883a 	mov	r13,zero
 804ae08:	1801071e 	bne	r3,zero,804b228 <___svfprintf_internal_r+0x8b4>
 804ae0c:	047fdfc4 	movi	r17,-129
 804ae10:	6448703a 	and	r4,r12,r17
 804ae14:	a546b03a 	or	r3,r20,r21
 804ae18:	d9000415 	stw	r4,16(sp)
 804ae1c:	1802b81e 	bne	r3,zero,804b900 <___svfprintf_internal_r+0xf8c>
 804ae20:	4002571e 	bne	r8,zero,804b780 <___svfprintf_internal_r+0xe0c>
 804ae24:	1000b41e 	bne	r2,zero,804b0f8 <___svfprintf_internal_r+0x784>
 804ae28:	6540004c 	andi	r21,r12,1
 804ae2c:	a803bb26 	beq	r21,zero,804bd1c <___svfprintf_internal_r+0x13a8>
 804ae30:	00800c04 	movi	r2,48
 804ae34:	d88026c5 	stb	r2,155(sp)
 804ae38:	dc4026c4 	addi	r17,sp,155
 804ae3c:	00011806 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804ae40:	85e3c83a 	sub	r17,r16,r23
 804ae44:	85ffc826 	beq	r16,r23,804ad68 <___svfprintf_internal_r+0x3f4>
 804ae48:	d8c01c17 	ldw	r3,112(sp)
 804ae4c:	d8801b17 	ldw	r2,108(sp)
 804ae50:	b5c00015 	stw	r23,0(r22)
 804ae54:	1c47883a 	add	r3,r3,r17
 804ae58:	10800044 	addi	r2,r2,1
 804ae5c:	d8801b15 	stw	r2,108(sp)
 804ae60:	b4400115 	stw	r17,4(r22)
 804ae64:	d8c01c15 	stw	r3,112(sp)
 804ae68:	10800208 	cmpgei	r2,r2,8
 804ae6c:	1000061e 	bne	r2,zero,804ae88 <___svfprintf_internal_r+0x514>
 804ae70:	b5800204 	addi	r22,r22,8
 804ae74:	d8c00517 	ldw	r3,20(sp)
 804ae78:	80800003 	ldbu	r2,0(r16)
 804ae7c:	1c47883a 	add	r3,r3,r17
 804ae80:	d8c00515 	stw	r3,20(sp)
 804ae84:	003eed06 	br	804aa3c <___svfprintf_internal_r+0xc8>
 804ae88:	d9801a04 	addi	r6,sp,104
 804ae8c:	900b883a 	mov	r5,r18
 804ae90:	9809883a 	mov	r4,r19
 804ae94:	804cc580 	call	804cc58 <__ssprint_r>
 804ae98:	103fb51e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804ae9c:	dd802704 	addi	r22,sp,156
 804aea0:	003ff406 	br	804ae74 <___svfprintf_internal_r+0x500>
 804aea4:	21003fcc 	andi	r4,r4,255
 804aea8:	2006611e 	bne	r4,zero,804c830 <___svfprintf_internal_r+0x1ebc>
 804aeac:	d8c00617 	ldw	r3,24(sp)
 804aeb0:	6080020c 	andi	r2,r12,8
 804aeb4:	19000204 	addi	r4,r3,8
 804aeb8:	d9000e15 	stw	r4,56(sp)
 804aebc:	1003a326 	beq	r2,zero,804bd4c <___svfprintf_internal_r+0x13d8>
 804aec0:	18800017 	ldw	r2,0(r3)
 804aec4:	d8800915 	stw	r2,36(sp)
 804aec8:	18800117 	ldw	r2,4(r3)
 804aecc:	d8800a15 	stw	r2,40(sp)
 804aed0:	dd400a17 	ldw	r21,40(sp)
 804aed4:	dd000917 	ldw	r20,36(sp)
 804aed8:	00a00034 	movhi	r2,32768
 804aedc:	10bfffc4 	addi	r2,r2,-1
 804aee0:	a8a2703a 	and	r17,r21,r2
 804aee4:	01dffc34 	movhi	r7,32752
 804aee8:	01bfffc4 	movi	r6,-1
 804aeec:	39ffffc4 	addi	r7,r7,-1
 804aef0:	a009883a 	mov	r4,r20
 804aef4:	880b883a 	mov	r5,r17
 804aef8:	da000615 	stw	r8,24(sp)
 804aefc:	db000415 	stw	r12,16(sp)
 804af00:	80106cc0 	call	80106cc <__unorddf2>
 804af04:	db000417 	ldw	r12,16(sp)
 804af08:	da000617 	ldw	r8,24(sp)
 804af0c:	10045f1e 	bne	r2,zero,804c08c <___svfprintf_internal_r+0x1718>
 804af10:	01dffc34 	movhi	r7,32752
 804af14:	01bfffc4 	movi	r6,-1
 804af18:	39ffffc4 	addi	r7,r7,-1
 804af1c:	a009883a 	mov	r4,r20
 804af20:	880b883a 	mov	r5,r17
 804af24:	800f6380 	call	800f638 <__ledf2>
 804af28:	db000417 	ldw	r12,16(sp)
 804af2c:	da000617 	ldw	r8,24(sp)
 804af30:	0084560e 	bge	zero,r2,804c08c <___svfprintf_internal_r+0x1718>
 804af34:	000d883a 	mov	r6,zero
 804af38:	000f883a 	mov	r7,zero
 804af3c:	a009883a 	mov	r4,r20
 804af40:	a80b883a 	mov	r5,r21
 804af44:	800f6380 	call	800f638 <__ledf2>
 804af48:	db000417 	ldw	r12,16(sp)
 804af4c:	1005b216 	blt	r2,zero,804c618 <___svfprintf_internal_r+0x1ca4>
 804af50:	db401343 	ldbu	r13,77(sp)
 804af54:	e0801210 	cmplti	r2,fp,72
 804af58:	10055d1e 	bne	r2,zero,804c4d0 <___svfprintf_internal_r+0x1b5c>
 804af5c:	04420174 	movhi	r17,2053
 804af60:	8c7e5e04 	addi	r17,r17,-1672
 804af64:	00bfdfc4 	movi	r2,-129
 804af68:	6084703a 	and	r2,r12,r2
 804af6c:	d8800415 	stw	r2,16(sp)
 804af70:	d8800e17 	ldw	r2,56(sp)
 804af74:	050000c4 	movi	r20,3
 804af78:	054000c4 	movi	r21,3
 804af7c:	d8800615 	stw	r2,24(sp)
 804af80:	0011883a 	mov	r8,zero
 804af84:	d8000715 	stw	zero,28(sp)
 804af88:	0000c906 	br	804b2b0 <___svfprintf_internal_r+0x93c>
 804af8c:	d9000617 	ldw	r4,24(sp)
 804af90:	6080040c 	andi	r2,r12,16
 804af94:	20c00104 	addi	r3,r4,4
 804af98:	1003671e 	bne	r2,zero,804bd38 <___svfprintf_internal_r+0x13c4>
 804af9c:	6080100c 	andi	r2,r12,64
 804afa0:	10054526 	beq	r2,zero,804c4b8 <___svfprintf_internal_r+0x1b44>
 804afa4:	d8800617 	ldw	r2,24(sp)
 804afa8:	002b883a 	mov	r21,zero
 804afac:	d8c00615 	stw	r3,24(sp)
 804afb0:	1500000b 	ldhu	r20,0(r2)
 804afb4:	0005883a 	mov	r2,zero
 804afb8:	003f9006 	br	804adfc <___svfprintf_internal_r+0x488>
 804afbc:	d9000617 	ldw	r4,24(sp)
 804afc0:	6080040c 	andi	r2,r12,16
 804afc4:	20c00104 	addi	r3,r4,4
 804afc8:	1003561e 	bne	r2,zero,804bd24 <___svfprintf_internal_r+0x13b0>
 804afcc:	6080100c 	andi	r2,r12,64
 804afd0:	1004f326 	beq	r2,zero,804c3a0 <___svfprintf_internal_r+0x1a2c>
 804afd4:	d8800617 	ldw	r2,24(sp)
 804afd8:	002b883a 	mov	r21,zero
 804afdc:	d8c00615 	stw	r3,24(sp)
 804afe0:	1500000b 	ldhu	r20,0(r2)
 804afe4:	00800044 	movi	r2,1
 804afe8:	003f8406 	br	804adfc <___svfprintf_internal_r+0x488>
 804afec:	03020174 	movhi	r12,2053
 804aff0:	89000450 	cmplti	r4,r17,17
 804aff4:	d8801b17 	ldw	r2,108(sp)
 804aff8:	63104d04 	addi	r12,r12,16692
 804affc:	20001b1e 	bne	r4,zero,804b06c <___svfprintf_internal_r+0x6f8>
 804b000:	05400404 	movi	r21,16
 804b004:	6039883a 	mov	fp,r12
 804b008:	00000406 	br	804b01c <___svfprintf_internal_r+0x6a8>
 804b00c:	8c7ffc04 	addi	r17,r17,-16
 804b010:	89000448 	cmpgei	r4,r17,17
 804b014:	b5800204 	addi	r22,r22,8
 804b018:	20001326 	beq	r4,zero,804b068 <___svfprintf_internal_r+0x6f4>
 804b01c:	10800044 	addi	r2,r2,1
 804b020:	18c00404 	addi	r3,r3,16
 804b024:	b7000015 	stw	fp,0(r22)
 804b028:	b5400115 	stw	r21,4(r22)
 804b02c:	d8c01c15 	stw	r3,112(sp)
 804b030:	d8801b15 	stw	r2,108(sp)
 804b034:	11000208 	cmpgei	r4,r2,8
 804b038:	203ff426 	beq	r4,zero,804b00c <___svfprintf_internal_r+0x698>
 804b03c:	d9801a04 	addi	r6,sp,104
 804b040:	900b883a 	mov	r5,r18
 804b044:	9809883a 	mov	r4,r19
 804b048:	804cc580 	call	804cc58 <__ssprint_r>
 804b04c:	103f481e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b050:	8c7ffc04 	addi	r17,r17,-16
 804b054:	89000448 	cmpgei	r4,r17,17
 804b058:	d8c01c17 	ldw	r3,112(sp)
 804b05c:	d8801b17 	ldw	r2,108(sp)
 804b060:	dd802704 	addi	r22,sp,156
 804b064:	203fed1e 	bne	r4,zero,804b01c <___svfprintf_internal_r+0x6a8>
 804b068:	e019883a 	mov	r12,fp
 804b06c:	10800044 	addi	r2,r2,1
 804b070:	1c47883a 	add	r3,r3,r17
 804b074:	d8801b15 	stw	r2,108(sp)
 804b078:	b3000015 	stw	r12,0(r22)
 804b07c:	b4400115 	stw	r17,4(r22)
 804b080:	d8c01c15 	stw	r3,112(sp)
 804b084:	10800210 	cmplti	r2,r2,8
 804b088:	103f2d1e 	bne	r2,zero,804ad40 <___svfprintf_internal_r+0x3cc>
 804b08c:	d9801a04 	addi	r6,sp,104
 804b090:	900b883a 	mov	r5,r18
 804b094:	9809883a 	mov	r4,r19
 804b098:	804cc580 	call	804cc58 <__ssprint_r>
 804b09c:	103f341e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b0a0:	d8c01c17 	ldw	r3,112(sp)
 804b0a4:	003f2606 	br	804ad40 <___svfprintf_internal_r+0x3cc>
 804b0a8:	21003fcc 	andi	r4,r4,255
 804b0ac:	2005ea1e 	bne	r4,zero,804c858 <___svfprintf_internal_r+0x1ee4>
 804b0b0:	6080080c 	andi	r2,r12,32
 804b0b4:	10004626 	beq	r2,zero,804b1d0 <___svfprintf_internal_r+0x85c>
 804b0b8:	d8c00617 	ldw	r3,24(sp)
 804b0bc:	18800117 	ldw	r2,4(r3)
 804b0c0:	1d000017 	ldw	r20,0(r3)
 804b0c4:	18c00204 	addi	r3,r3,8
 804b0c8:	d8c00615 	stw	r3,24(sp)
 804b0cc:	102b883a 	mov	r21,r2
 804b0d0:	10004b16 	blt	r2,zero,804b200 <___svfprintf_internal_r+0x88c>
 804b0d4:	40bfffd8 	cmpnei	r2,r8,-1
 804b0d8:	10043f26 	beq	r2,zero,804c1d8 <___svfprintf_internal_r+0x1864>
 804b0dc:	047fdfc4 	movi	r17,-129
 804b0e0:	6446703a 	and	r3,r12,r17
 804b0e4:	a544b03a 	or	r2,r20,r21
 804b0e8:	d8c00415 	stw	r3,16(sp)
 804b0ec:	db401343 	ldbu	r13,77(sp)
 804b0f0:	1003411e 	bne	r2,zero,804bdf8 <___svfprintf_internal_r+0x1484>
 804b0f4:	4005801e 	bne	r8,zero,804c6f8 <___svfprintf_internal_r+0x1d84>
 804b0f8:	0011883a 	mov	r8,zero
 804b0fc:	002b883a 	mov	r21,zero
 804b100:	dc402704 	addi	r17,sp,156
 804b104:	00006606 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804b108:	bac00007 	ldb	r11,0(r23)
 804b10c:	63001014 	ori	r12,r12,64
 804b110:	003e5606 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b114:	bac00007 	ldb	r11,0(r23)
 804b118:	63000814 	ori	r12,r12,32
 804b11c:	003e5306 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b120:	d8c00617 	ldw	r3,24(sp)
 804b124:	00800c04 	movi	r2,48
 804b128:	d8801385 	stb	r2,78(sp)
 804b12c:	00801e04 	movi	r2,120
 804b130:	01020174 	movhi	r4,2053
 804b134:	d88013c5 	stb	r2,79(sp)
 804b138:	18800104 	addi	r2,r3,4
 804b13c:	d8800615 	stw	r2,24(sp)
 804b140:	20be6604 	addi	r2,r4,-1640
 804b144:	d8800b15 	stw	r2,44(sp)
 804b148:	1d000017 	ldw	r20,0(r3)
 804b14c:	002b883a 	mov	r21,zero
 804b150:	63000094 	ori	r12,r12,2
 804b154:	00800084 	movi	r2,2
 804b158:	07001e04 	movi	fp,120
 804b15c:	003f2706 	br	804adfc <___svfprintf_internal_r+0x488>
 804b160:	21003fcc 	andi	r4,r4,255
 804b164:	2005b41e 	bne	r4,zero,804c838 <___svfprintf_internal_r+0x1ec4>
 804b168:	d9000617 	ldw	r4,24(sp)
 804b16c:	6080080c 	andi	r2,r12,32
 804b170:	20c00017 	ldw	r3,0(r4)
 804b174:	21000104 	addi	r4,r4,4
 804b178:	d9000615 	stw	r4,24(sp)
 804b17c:	1002f91e 	bne	r2,zero,804bd64 <___svfprintf_internal_r+0x13f0>
 804b180:	6080040c 	andi	r2,r12,16
 804b184:	10037a1e 	bne	r2,zero,804bf70 <___svfprintf_internal_r+0x15fc>
 804b188:	6300100c 	andi	r12,r12,64
 804b18c:	60037826 	beq	r12,zero,804bf70 <___svfprintf_internal_r+0x15fc>
 804b190:	d8800517 	ldw	r2,20(sp)
 804b194:	1880000d 	sth	r2,0(r3)
 804b198:	003e1c06 	br	804aa0c <___svfprintf_internal_r+0x98>
 804b19c:	bac00007 	ldb	r11,0(r23)
 804b1a0:	58801b18 	cmpnei	r2,r11,108
 804b1a4:	10042d26 	beq	r2,zero,804c25c <___svfprintf_internal_r+0x18e8>
 804b1a8:	63000414 	ori	r12,r12,16
 804b1ac:	003e2f06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b1b0:	bac00007 	ldb	r11,0(r23)
 804b1b4:	63000214 	ori	r12,r12,8
 804b1b8:	003e2c06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b1bc:	21003fcc 	andi	r4,r4,255
 804b1c0:	2005a31e 	bne	r4,zero,804c850 <___svfprintf_internal_r+0x1edc>
 804b1c4:	63000414 	ori	r12,r12,16
 804b1c8:	6080080c 	andi	r2,r12,32
 804b1cc:	103fba1e 	bne	r2,zero,804b0b8 <___svfprintf_internal_r+0x744>
 804b1d0:	d9000617 	ldw	r4,24(sp)
 804b1d4:	6080040c 	andi	r2,r12,16
 804b1d8:	20c00104 	addi	r3,r4,4
 804b1dc:	1002f01e 	bne	r2,zero,804bda0 <___svfprintf_internal_r+0x142c>
 804b1e0:	6080100c 	andi	r2,r12,64
 804b1e4:	10046826 	beq	r2,zero,804c388 <___svfprintf_internal_r+0x1a14>
 804b1e8:	d8800617 	ldw	r2,24(sp)
 804b1ec:	d8c00615 	stw	r3,24(sp)
 804b1f0:	1500000f 	ldh	r20,0(r2)
 804b1f4:	a02bd7fa 	srai	r21,r20,31
 804b1f8:	a805883a 	mov	r2,r21
 804b1fc:	103fb50e 	bge	r2,zero,804b0d4 <___svfprintf_internal_r+0x760>
 804b200:	a004c03a 	cmpne	r2,r20,zero
 804b204:	056bc83a 	sub	r21,zero,r21
 804b208:	a8abc83a 	sub	r21,r21,r2
 804b20c:	00800b44 	movi	r2,45
 804b210:	d8801345 	stb	r2,77(sp)
 804b214:	40ffffe0 	cmpeqi	r3,r8,-1
 804b218:	0529c83a 	sub	r20,zero,r20
 804b21c:	03400b44 	movi	r13,45
 804b220:	00800044 	movi	r2,1
 804b224:	183ef926 	beq	r3,zero,804ae0c <___svfprintf_internal_r+0x498>
 804b228:	10c00060 	cmpeqi	r3,r2,1
 804b22c:	1801b71e 	bne	r3,zero,804b90c <___svfprintf_internal_r+0xf98>
 804b230:	108000a0 	cmpeqi	r2,r2,2
 804b234:	1001571e 	bne	r2,zero,804b794 <___svfprintf_internal_r+0xe20>
 804b238:	dc402704 	addi	r17,sp,156
 804b23c:	a004d0fa 	srli	r2,r20,3
 804b240:	a806977a 	slli	r3,r21,29
 804b244:	a82ad0fa 	srli	r21,r21,3
 804b248:	a50001cc 	andi	r20,r20,7
 804b24c:	a1000c04 	addi	r4,r20,48
 804b250:	18a8b03a 	or	r20,r3,r2
 804b254:	893fffc5 	stb	r4,-1(r17)
 804b258:	a544b03a 	or	r2,r20,r21
 804b25c:	880b883a 	mov	r5,r17
 804b260:	8c7fffc4 	addi	r17,r17,-1
 804b264:	103ff51e 	bne	r2,zero,804b23c <___svfprintf_internal_r+0x8c8>
 804b268:	6080004c 	andi	r2,r12,1
 804b26c:	10015626 	beq	r2,zero,804b7c8 <___svfprintf_internal_r+0xe54>
 804b270:	21003fcc 	andi	r4,r4,255
 804b274:	2100201c 	xori	r4,r4,128
 804b278:	213fe004 	addi	r4,r4,-128
 804b27c:	20800c18 	cmpnei	r2,r4,48
 804b280:	10015126 	beq	r2,zero,804b7c8 <___svfprintf_internal_r+0xe54>
 804b284:	00800c04 	movi	r2,48
 804b288:	297fff84 	addi	r5,r5,-2
 804b28c:	88bfffc5 	stb	r2,-1(r17)
 804b290:	d8802704 	addi	r2,sp,156
 804b294:	116bc83a 	sub	r21,r2,r5
 804b298:	db000415 	stw	r12,16(sp)
 804b29c:	2823883a 	mov	r17,r5
 804b2a0:	4029883a 	mov	r20,r8
 804b2a4:	4540010e 	bge	r8,r21,804b2ac <___svfprintf_internal_r+0x938>
 804b2a8:	a829883a 	mov	r20,r21
 804b2ac:	d8000715 	stw	zero,28(sp)
 804b2b0:	6b403fcc 	andi	r13,r13,255
 804b2b4:	6b40201c 	xori	r13,r13,128
 804b2b8:	6b7fe004 	addi	r13,r13,-128
 804b2bc:	683e6526 	beq	r13,zero,804ac54 <___svfprintf_internal_r+0x2e0>
 804b2c0:	a5000044 	addi	r20,r20,1
 804b2c4:	003e6306 	br	804ac54 <___svfprintf_internal_r+0x2e0>
 804b2c8:	bac00007 	ldb	r11,0(r23)
 804b2cc:	63002014 	ori	r12,r12,128
 804b2d0:	003de606 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b2d4:	bf000007 	ldb	fp,0(r23)
 804b2d8:	b8c00044 	addi	r3,r23,1
 804b2dc:	e0800aa0 	cmpeqi	r2,fp,42
 804b2e0:	1005b71e 	bne	r2,zero,804c9c0 <___svfprintf_internal_r+0x204c>
 804b2e4:	e0bff404 	addi	r2,fp,-48
 804b2e8:	118002b0 	cmpltui	r6,r2,10
 804b2ec:	182f883a 	mov	r23,r3
 804b2f0:	0011883a 	mov	r8,zero
 804b2f4:	303ddf26 	beq	r6,zero,804aa74 <___svfprintf_internal_r+0x100>
 804b2f8:	bf000007 	ldb	fp,0(r23)
 804b2fc:	420002a4 	muli	r8,r8,10
 804b300:	bdc00044 	addi	r23,r23,1
 804b304:	4091883a 	add	r8,r8,r2
 804b308:	e0bff404 	addi	r2,fp,-48
 804b30c:	10c002b0 	cmpltui	r3,r2,10
 804b310:	183ff91e 	bne	r3,zero,804b2f8 <___svfprintf_internal_r+0x984>
 804b314:	003dd706 	br	804aa74 <___svfprintf_internal_r+0x100>
 804b318:	bf000003 	ldbu	fp,0(r23)
 804b31c:	e2c03fcc 	andi	r11,fp,255
 804b320:	5ac0201c 	xori	r11,r11,128
 804b324:	63000114 	ori	r12,r12,4
 804b328:	5affe004 	addi	r11,r11,-128
 804b32c:	003dcf06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b330:	bac00007 	ldb	r11,0(r23)
 804b334:	01000044 	movi	r4,1
 804b338:	01400ac4 	movi	r5,43
 804b33c:	003dcb06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b340:	d8800617 	ldw	r2,24(sp)
 804b344:	bf000003 	ldbu	fp,0(r23)
 804b348:	14000017 	ldw	r16,0(r2)
 804b34c:	10800104 	addi	r2,r2,4
 804b350:	80029816 	blt	r16,zero,804bdb4 <___svfprintf_internal_r+0x1440>
 804b354:	d8800615 	stw	r2,24(sp)
 804b358:	e2c03fcc 	andi	r11,fp,255
 804b35c:	5ac0201c 	xori	r11,r11,128
 804b360:	5affe004 	addi	r11,r11,-128
 804b364:	003dc106 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b368:	bac00007 	ldb	r11,0(r23)
 804b36c:	63000054 	ori	r12,r12,1
 804b370:	003dbe06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b374:	28803fcc 	andi	r2,r5,255
 804b378:	1080201c 	xori	r2,r2,128
 804b37c:	10bfe004 	addi	r2,r2,-128
 804b380:	bf000003 	ldbu	fp,0(r23)
 804b384:	103ff41e 	bne	r2,zero,804b358 <___svfprintf_internal_r+0x9e4>
 804b388:	e2c03fcc 	andi	r11,fp,255
 804b38c:	5ac0201c 	xori	r11,r11,128
 804b390:	01000044 	movi	r4,1
 804b394:	01400804 	movi	r5,32
 804b398:	5affe004 	addi	r11,r11,-128
 804b39c:	003db306 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804b3a0:	21003fcc 	andi	r4,r4,255
 804b3a4:	2005281e 	bne	r4,zero,804c848 <___svfprintf_internal_r+0x1ed4>
 804b3a8:	00820174 	movhi	r2,2053
 804b3ac:	10be6604 	addi	r2,r2,-1640
 804b3b0:	d8800b15 	stw	r2,44(sp)
 804b3b4:	6080080c 	andi	r2,r12,32
 804b3b8:	10003226 	beq	r2,zero,804b484 <___svfprintf_internal_r+0xb10>
 804b3bc:	d8800617 	ldw	r2,24(sp)
 804b3c0:	15000017 	ldw	r20,0(r2)
 804b3c4:	15400117 	ldw	r21,4(r2)
 804b3c8:	10800204 	addi	r2,r2,8
 804b3cc:	d8800615 	stw	r2,24(sp)
 804b3d0:	6080004c 	andi	r2,r12,1
 804b3d4:	10000226 	beq	r2,zero,804b3e0 <___svfprintf_internal_r+0xa6c>
 804b3d8:	a544b03a 	or	r2,r20,r21
 804b3dc:	1002661e 	bne	r2,zero,804bd78 <___svfprintf_internal_r+0x1404>
 804b3e0:	00800084 	movi	r2,2
 804b3e4:	003e8506 	br	804adfc <___svfprintf_internal_r+0x488>
 804b3e8:	d8800617 	ldw	r2,24(sp)
 804b3ec:	d8001345 	stb	zero,77(sp)
 804b3f0:	14400017 	ldw	r17,0(r2)
 804b3f4:	10c00104 	addi	r3,r2,4
 804b3f8:	88039f26 	beq	r17,zero,804c278 <___svfprintf_internal_r+0x1904>
 804b3fc:	40bfffe0 	cmpeqi	r2,r8,-1
 804b400:	1002ac1e 	bne	r2,zero,804beb4 <___svfprintf_internal_r+0x1540>
 804b404:	400d883a 	mov	r6,r8
 804b408:	000b883a 	mov	r5,zero
 804b40c:	8809883a 	mov	r4,r17
 804b410:	d8c00715 	stw	r3,28(sp)
 804b414:	db000615 	stw	r12,24(sp)
 804b418:	da000415 	stw	r8,16(sp)
 804b41c:	80096140 	call	8009614 <memchr>
 804b420:	da000417 	ldw	r8,16(sp)
 804b424:	db000617 	ldw	r12,24(sp)
 804b428:	d8c00717 	ldw	r3,28(sp)
 804b42c:	1004f026 	beq	r2,zero,804c7f0 <___svfprintf_internal_r+0x1e7c>
 804b430:	146bc83a 	sub	r21,r2,r17
 804b434:	a829883a 	mov	r20,r21
 804b438:	d8c00615 	stw	r3,24(sp)
 804b43c:	003e0206 	br	804ac48 <___svfprintf_internal_r+0x2d4>
 804b440:	d8c00617 	ldw	r3,24(sp)
 804b444:	d8001345 	stb	zero,77(sp)
 804b448:	05000044 	movi	r20,1
 804b44c:	18800017 	ldw	r2,0(r3)
 804b450:	18c00104 	addi	r3,r3,4
 804b454:	d8c00615 	stw	r3,24(sp)
 804b458:	d8801d05 	stb	r2,116(sp)
 804b45c:	05400044 	movi	r21,1
 804b460:	dc401d04 	addi	r17,sp,116
 804b464:	003df806 	br	804ac48 <___svfprintf_internal_r+0x2d4>
 804b468:	21003fcc 	andi	r4,r4,255
 804b46c:	2004f41e 	bne	r4,zero,804c840 <___svfprintf_internal_r+0x1ecc>
 804b470:	00820174 	movhi	r2,2053
 804b474:	10be6104 	addi	r2,r2,-1660
 804b478:	d8800b15 	stw	r2,44(sp)
 804b47c:	6080080c 	andi	r2,r12,32
 804b480:	103fce1e 	bne	r2,zero,804b3bc <___svfprintf_internal_r+0xa48>
 804b484:	d9000617 	ldw	r4,24(sp)
 804b488:	6080040c 	andi	r2,r12,16
 804b48c:	20c00104 	addi	r3,r4,4
 804b490:	10023f1e 	bne	r2,zero,804bd90 <___svfprintf_internal_r+0x141c>
 804b494:	6080100c 	andi	r2,r12,64
 804b498:	10040226 	beq	r2,zero,804c4a4 <___svfprintf_internal_r+0x1b30>
 804b49c:	d8800617 	ldw	r2,24(sp)
 804b4a0:	002b883a 	mov	r21,zero
 804b4a4:	d8c00615 	stw	r3,24(sp)
 804b4a8:	1500000b 	ldhu	r20,0(r2)
 804b4ac:	003fc806 	br	804b3d0 <___svfprintf_internal_r+0xa5c>
 804b4b0:	e2c01990 	cmplti	r11,fp,102
 804b4b4:	5800ce1e 	bne	r11,zero,804b7f0 <___svfprintf_internal_r+0xe7c>
 804b4b8:	d9000917 	ldw	r4,36(sp)
 804b4bc:	d9400a17 	ldw	r5,40(sp)
 804b4c0:	000d883a 	mov	r6,zero
 804b4c4:	000f883a 	mov	r7,zero
 804b4c8:	d8c00e15 	stw	r3,56(sp)
 804b4cc:	800f4c80 	call	800f4c8 <__eqdf2>
 804b4d0:	d8c00e17 	ldw	r3,56(sp)
 804b4d4:	1001711e 	bne	r2,zero,804ba9c <___svfprintf_internal_r+0x1128>
 804b4d8:	d8801b17 	ldw	r2,108(sp)
 804b4dc:	01020174 	movhi	r4,2053
 804b4e0:	213e6d04 	addi	r4,r4,-1612
 804b4e4:	10800044 	addi	r2,r2,1
 804b4e8:	18c00044 	addi	r3,r3,1
 804b4ec:	b1000015 	stw	r4,0(r22)
 804b4f0:	01000044 	movi	r4,1
 804b4f4:	d8801b15 	stw	r2,108(sp)
 804b4f8:	b1000115 	stw	r4,4(r22)
 804b4fc:	d8c01c15 	stw	r3,112(sp)
 804b500:	10800208 	cmpgei	r2,r2,8
 804b504:	10033b1e 	bne	r2,zero,804c1f4 <___svfprintf_internal_r+0x1880>
 804b508:	b5800204 	addi	r22,r22,8
 804b50c:	d8801417 	ldw	r2,80(sp)
 804b510:	d9000817 	ldw	r4,32(sp)
 804b514:	11000316 	blt	r2,r4,804b524 <___svfprintf_internal_r+0xbb0>
 804b518:	d8800417 	ldw	r2,16(sp)
 804b51c:	1080004c 	andi	r2,r2,1
 804b520:	103e0226 	beq	r2,zero,804ad2c <___svfprintf_internal_r+0x3b8>
 804b524:	d8800d17 	ldw	r2,52(sp)
 804b528:	d9000c17 	ldw	r4,48(sp)
 804b52c:	b0800015 	stw	r2,0(r22)
 804b530:	d8801b17 	ldw	r2,108(sp)
 804b534:	1907883a 	add	r3,r3,r4
 804b538:	b1000115 	stw	r4,4(r22)
 804b53c:	10800044 	addi	r2,r2,1
 804b540:	d8801b15 	stw	r2,108(sp)
 804b544:	d8c01c15 	stw	r3,112(sp)
 804b548:	10800208 	cmpgei	r2,r2,8
 804b54c:	10033b1e 	bne	r2,zero,804c23c <___svfprintf_internal_r+0x18c8>
 804b550:	b5800204 	addi	r22,r22,8
 804b554:	d8800817 	ldw	r2,32(sp)
 804b558:	157fffc4 	addi	r21,r2,-1
 804b55c:	057df30e 	bge	zero,r21,804ad2c <___svfprintf_internal_r+0x3b8>
 804b560:	01c20174 	movhi	r7,2053
 804b564:	a9000450 	cmplti	r4,r21,17
 804b568:	d8801b17 	ldw	r2,108(sp)
 804b56c:	39d04904 	addi	r7,r7,16676
 804b570:	20031c1e 	bne	r4,zero,804c1e4 <___svfprintf_internal_r+0x1870>
 804b574:	07000404 	movi	fp,16
 804b578:	3823883a 	mov	r17,r7
 804b57c:	00000406 	br	804b590 <___svfprintf_internal_r+0xc1c>
 804b580:	b5800204 	addi	r22,r22,8
 804b584:	ad7ffc04 	addi	r21,r21,-16
 804b588:	a9000448 	cmpgei	r4,r21,17
 804b58c:	20031426 	beq	r4,zero,804c1e0 <___svfprintf_internal_r+0x186c>
 804b590:	10800044 	addi	r2,r2,1
 804b594:	18c00404 	addi	r3,r3,16
 804b598:	b4400015 	stw	r17,0(r22)
 804b59c:	b7000115 	stw	fp,4(r22)
 804b5a0:	d8c01c15 	stw	r3,112(sp)
 804b5a4:	d8801b15 	stw	r2,108(sp)
 804b5a8:	11000208 	cmpgei	r4,r2,8
 804b5ac:	203ff426 	beq	r4,zero,804b580 <___svfprintf_internal_r+0xc0c>
 804b5b0:	d9801a04 	addi	r6,sp,104
 804b5b4:	900b883a 	mov	r5,r18
 804b5b8:	9809883a 	mov	r4,r19
 804b5bc:	804cc580 	call	804cc58 <__ssprint_r>
 804b5c0:	103deb1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b5c4:	d8c01c17 	ldw	r3,112(sp)
 804b5c8:	d8801b17 	ldw	r2,108(sp)
 804b5cc:	dd802704 	addi	r22,sp,156
 804b5d0:	003fec06 	br	804b584 <___svfprintf_internal_r+0xc10>
 804b5d4:	8519c83a 	sub	r12,r16,r20
 804b5d8:	033dc50e 	bge	zero,r12,804acf0 <___svfprintf_internal_r+0x37c>
 804b5dc:	01c20174 	movhi	r7,2053
 804b5e0:	61000450 	cmplti	r4,r12,17
 804b5e4:	d8801b17 	ldw	r2,108(sp)
 804b5e8:	39d04904 	addi	r7,r7,16676
 804b5ec:	2000281e 	bne	r4,zero,804b690 <___svfprintf_internal_r+0xd1c>
 804b5f0:	dc400e15 	stw	r17,56(sp)
 804b5f4:	dc000f15 	stw	r16,60(sp)
 804b5f8:	b009883a 	mov	r4,r22
 804b5fc:	03400404 	movi	r13,16
 804b600:	a02d883a 	mov	r22,r20
 804b604:	6021883a 	mov	r16,r12
 804b608:	4029883a 	mov	r20,r8
 804b60c:	3823883a 	mov	r17,r7
 804b610:	00000406 	br	804b624 <___svfprintf_internal_r+0xcb0>
 804b614:	843ffc04 	addi	r16,r16,-16
 804b618:	81400448 	cmpgei	r5,r16,17
 804b61c:	21000204 	addi	r4,r4,8
 804b620:	28001426 	beq	r5,zero,804b674 <___svfprintf_internal_r+0xd00>
 804b624:	10800044 	addi	r2,r2,1
 804b628:	18c00404 	addi	r3,r3,16
 804b62c:	24400015 	stw	r17,0(r4)
 804b630:	23400115 	stw	r13,4(r4)
 804b634:	d8c01c15 	stw	r3,112(sp)
 804b638:	d8801b15 	stw	r2,108(sp)
 804b63c:	11400208 	cmpgei	r5,r2,8
 804b640:	283ff426 	beq	r5,zero,804b614 <___svfprintf_internal_r+0xca0>
 804b644:	d9801a04 	addi	r6,sp,104
 804b648:	900b883a 	mov	r5,r18
 804b64c:	9809883a 	mov	r4,r19
 804b650:	804cc580 	call	804cc58 <__ssprint_r>
 804b654:	103dc61e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b658:	843ffc04 	addi	r16,r16,-16
 804b65c:	81400448 	cmpgei	r5,r16,17
 804b660:	d8c01c17 	ldw	r3,112(sp)
 804b664:	d8801b17 	ldw	r2,108(sp)
 804b668:	d9002704 	addi	r4,sp,156
 804b66c:	03400404 	movi	r13,16
 804b670:	283fec1e 	bne	r5,zero,804b624 <___svfprintf_internal_r+0xcb0>
 804b674:	8019883a 	mov	r12,r16
 804b678:	880f883a 	mov	r7,r17
 804b67c:	dc000f17 	ldw	r16,60(sp)
 804b680:	dc400e17 	ldw	r17,56(sp)
 804b684:	a011883a 	mov	r8,r20
 804b688:	b029883a 	mov	r20,r22
 804b68c:	202d883a 	mov	r22,r4
 804b690:	10800044 	addi	r2,r2,1
 804b694:	1b07883a 	add	r3,r3,r12
 804b698:	d8801b15 	stw	r2,108(sp)
 804b69c:	b1c00015 	stw	r7,0(r22)
 804b6a0:	b3000115 	stw	r12,4(r22)
 804b6a4:	d8c01c15 	stw	r3,112(sp)
 804b6a8:	10800208 	cmpgei	r2,r2,8
 804b6ac:	1002d91e 	bne	r2,zero,804c214 <___svfprintf_internal_r+0x18a0>
 804b6b0:	4551c83a 	sub	r8,r8,r21
 804b6b4:	b5800204 	addi	r22,r22,8
 804b6b8:	023d8f0e 	bge	zero,r8,804acf8 <___svfprintf_internal_r+0x384>
 804b6bc:	01c20174 	movhi	r7,2053
 804b6c0:	41000450 	cmplti	r4,r8,17
 804b6c4:	d8801b17 	ldw	r2,108(sp)
 804b6c8:	39d04904 	addi	r7,r7,16676
 804b6cc:	2000221e 	bne	r4,zero,804b758 <___svfprintf_internal_r+0xde4>
 804b6d0:	dc400e15 	stw	r17,56(sp)
 804b6d4:	dc000f15 	stw	r16,60(sp)
 804b6d8:	03000404 	movi	r12,16
 804b6dc:	4021883a 	mov	r16,r8
 804b6e0:	3823883a 	mov	r17,r7
 804b6e4:	00000406 	br	804b6f8 <___svfprintf_internal_r+0xd84>
 804b6e8:	843ffc04 	addi	r16,r16,-16
 804b6ec:	81000448 	cmpgei	r4,r16,17
 804b6f0:	b5800204 	addi	r22,r22,8
 804b6f4:	20001426 	beq	r4,zero,804b748 <___svfprintf_internal_r+0xdd4>
 804b6f8:	10800044 	addi	r2,r2,1
 804b6fc:	18c00404 	addi	r3,r3,16
 804b700:	b4400015 	stw	r17,0(r22)
 804b704:	b3000115 	stw	r12,4(r22)
 804b708:	d8c01c15 	stw	r3,112(sp)
 804b70c:	d8801b15 	stw	r2,108(sp)
 804b710:	11000208 	cmpgei	r4,r2,8
 804b714:	203ff426 	beq	r4,zero,804b6e8 <___svfprintf_internal_r+0xd74>
 804b718:	d9801a04 	addi	r6,sp,104
 804b71c:	900b883a 	mov	r5,r18
 804b720:	9809883a 	mov	r4,r19
 804b724:	804cc580 	call	804cc58 <__ssprint_r>
 804b728:	103d911e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b72c:	843ffc04 	addi	r16,r16,-16
 804b730:	81000448 	cmpgei	r4,r16,17
 804b734:	d8c01c17 	ldw	r3,112(sp)
 804b738:	d8801b17 	ldw	r2,108(sp)
 804b73c:	dd802704 	addi	r22,sp,156
 804b740:	03000404 	movi	r12,16
 804b744:	203fec1e 	bne	r4,zero,804b6f8 <___svfprintf_internal_r+0xd84>
 804b748:	8011883a 	mov	r8,r16
 804b74c:	880f883a 	mov	r7,r17
 804b750:	dc000f17 	ldw	r16,60(sp)
 804b754:	dc400e17 	ldw	r17,56(sp)
 804b758:	10800044 	addi	r2,r2,1
 804b75c:	1a07883a 	add	r3,r3,r8
 804b760:	d8801b15 	stw	r2,108(sp)
 804b764:	b1c00015 	stw	r7,0(r22)
 804b768:	b2000115 	stw	r8,4(r22)
 804b76c:	d8c01c15 	stw	r3,112(sp)
 804b770:	10800208 	cmpgei	r2,r2,8
 804b774:	10014f1e 	bne	r2,zero,804bcb4 <___svfprintf_internal_r+0x1340>
 804b778:	b5800204 	addi	r22,r22,8
 804b77c:	003d5e06 	br	804acf8 <___svfprintf_internal_r+0x384>
 804b780:	10c00060 	cmpeqi	r3,r2,1
 804b784:	1803dc1e 	bne	r3,zero,804c6f8 <___svfprintf_internal_r+0x1d84>
 804b788:	108000a0 	cmpeqi	r2,r2,2
 804b78c:	db000417 	ldw	r12,16(sp)
 804b790:	103ea926 	beq	r2,zero,804b238 <___svfprintf_internal_r+0x8c4>
 804b794:	d9000b17 	ldw	r4,44(sp)
 804b798:	dc402704 	addi	r17,sp,156
 804b79c:	a08003cc 	andi	r2,r20,15
 804b7a0:	a806973a 	slli	r3,r21,28
 804b7a4:	a028d13a 	srli	r20,r20,4
 804b7a8:	2085883a 	add	r2,r4,r2
 804b7ac:	10800003 	ldbu	r2,0(r2)
 804b7b0:	a82ad13a 	srli	r21,r21,4
 804b7b4:	1d28b03a 	or	r20,r3,r20
 804b7b8:	88bfffc5 	stb	r2,-1(r17)
 804b7bc:	a544b03a 	or	r2,r20,r21
 804b7c0:	8c7fffc4 	addi	r17,r17,-1
 804b7c4:	103ff51e 	bne	r2,zero,804b79c <___svfprintf_internal_r+0xe28>
 804b7c8:	d8802704 	addi	r2,sp,156
 804b7cc:	146bc83a 	sub	r21,r2,r17
 804b7d0:	db000415 	stw	r12,16(sp)
 804b7d4:	003eb206 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804b7d8:	d9801a04 	addi	r6,sp,104
 804b7dc:	900b883a 	mov	r5,r18
 804b7e0:	9809883a 	mov	r4,r19
 804b7e4:	804cc580 	call	804cc58 <__ssprint_r>
 804b7e8:	103d5b26 	beq	r2,zero,804ad58 <___svfprintf_internal_r+0x3e4>
 804b7ec:	003d6006 	br	804ad70 <___svfprintf_internal_r+0x3fc>
 804b7f0:	d8800817 	ldw	r2,32(sp)
 804b7f4:	da001b17 	ldw	r8,108(sp)
 804b7f8:	18c00044 	addi	r3,r3,1
 804b7fc:	10800088 	cmpgei	r2,r2,2
 804b800:	45400044 	addi	r21,r8,1
 804b804:	b7000204 	addi	fp,r22,8
 804b808:	1000fd26 	beq	r2,zero,804bc00 <___svfprintf_internal_r+0x128c>
 804b80c:	00800044 	movi	r2,1
 804b810:	b0800115 	stw	r2,4(r22)
 804b814:	b4400015 	stw	r17,0(r22)
 804b818:	d8c01c15 	stw	r3,112(sp)
 804b81c:	dd401b15 	stw	r21,108(sp)
 804b820:	a8800210 	cmplti	r2,r21,8
 804b824:	10012b26 	beq	r2,zero,804bcd4 <___svfprintf_internal_r+0x1360>
 804b828:	d8800c17 	ldw	r2,48(sp)
 804b82c:	d9000d17 	ldw	r4,52(sp)
 804b830:	ad400044 	addi	r21,r21,1
 804b834:	1887883a 	add	r3,r3,r2
 804b838:	e0800115 	stw	r2,4(fp)
 804b83c:	e1000015 	stw	r4,0(fp)
 804b840:	d8c01c15 	stw	r3,112(sp)
 804b844:	dd401b15 	stw	r21,108(sp)
 804b848:	a8800208 	cmpgei	r2,r21,8
 804b84c:	10012a1e 	bne	r2,zero,804bcf8 <___svfprintf_internal_r+0x1384>
 804b850:	e7000204 	addi	fp,fp,8
 804b854:	d9000917 	ldw	r4,36(sp)
 804b858:	d9400a17 	ldw	r5,40(sp)
 804b85c:	aa000044 	addi	r8,r21,1
 804b860:	000d883a 	mov	r6,zero
 804b864:	000f883a 	mov	r7,zero
 804b868:	d8c00e15 	stw	r3,56(sp)
 804b86c:	da000715 	stw	r8,28(sp)
 804b870:	800f4c80 	call	800f4c8 <__eqdf2>
 804b874:	d8c00817 	ldw	r3,32(sp)
 804b878:	da000717 	ldw	r8,28(sp)
 804b87c:	e5800204 	addi	r22,fp,8
 804b880:	1affffc4 	addi	r11,r3,-1
 804b884:	d8c00e17 	ldw	r3,56(sp)
 804b888:	1000ea26 	beq	r2,zero,804bc34 <___svfprintf_internal_r+0x12c0>
 804b88c:	8a400044 	addi	r9,r17,1
 804b890:	1ac7883a 	add	r3,r3,r11
 804b894:	da001b15 	stw	r8,108(sp)
 804b898:	e2400015 	stw	r9,0(fp)
 804b89c:	e2c00115 	stw	r11,4(fp)
 804b8a0:	d8c01c15 	stw	r3,112(sp)
 804b8a4:	42000208 	cmpgei	r8,r8,8
 804b8a8:	4001b41e 	bne	r8,zero,804bf7c <___svfprintf_internal_r+0x1608>
 804b8ac:	e0800404 	addi	r2,fp,16
 804b8b0:	aa000084 	addi	r8,r21,2
 804b8b4:	b039883a 	mov	fp,r22
 804b8b8:	102d883a 	mov	r22,r2
 804b8bc:	d9001017 	ldw	r4,64(sp)
 804b8c0:	d8801644 	addi	r2,sp,89
 804b8c4:	da001b15 	stw	r8,108(sp)
 804b8c8:	20c7883a 	add	r3,r4,r3
 804b8cc:	e0800015 	stw	r2,0(fp)
 804b8d0:	e1000115 	stw	r4,4(fp)
 804b8d4:	d8c01c15 	stw	r3,112(sp)
 804b8d8:	42000210 	cmplti	r8,r8,8
 804b8dc:	403d131e 	bne	r8,zero,804ad2c <___svfprintf_internal_r+0x3b8>
 804b8e0:	d9801a04 	addi	r6,sp,104
 804b8e4:	900b883a 	mov	r5,r18
 804b8e8:	9809883a 	mov	r4,r19
 804b8ec:	804cc580 	call	804cc58 <__ssprint_r>
 804b8f0:	103d1f1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804b8f4:	d8c01c17 	ldw	r3,112(sp)
 804b8f8:	dd802704 	addi	r22,sp,156
 804b8fc:	003d0b06 	br	804ad2c <___svfprintf_internal_r+0x3b8>
 804b900:	10c00060 	cmpeqi	r3,r2,1
 804b904:	db000417 	ldw	r12,16(sp)
 804b908:	183e4926 	beq	r3,zero,804b230 <___svfprintf_internal_r+0x8bc>
 804b90c:	a8013c1e 	bne	r21,zero,804be00 <___svfprintf_internal_r+0x148c>
 804b910:	a08002a8 	cmpgeui	r2,r20,10
 804b914:	10013a1e 	bne	r2,zero,804be00 <___svfprintf_internal_r+0x148c>
 804b918:	a5000c04 	addi	r20,r20,48
 804b91c:	dd0026c5 	stb	r20,155(sp)
 804b920:	db000415 	stw	r12,16(sp)
 804b924:	05400044 	movi	r21,1
 804b928:	dc4026c4 	addi	r17,sp,155
 804b92c:	003e5c06 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804b930:	03020174 	movhi	r12,2053
 804b934:	39000450 	cmplti	r4,r7,17
 804b938:	d8801b17 	ldw	r2,108(sp)
 804b93c:	63104d04 	addi	r12,r12,16692
 804b940:	2000321e 	bne	r4,zero,804ba0c <___svfprintf_internal_r+0x1098>
 804b944:	dc401115 	stw	r17,68(sp)
 804b948:	b009883a 	mov	r4,r22
 804b94c:	9023883a 	mov	r17,r18
 804b950:	a82d883a 	mov	r22,r21
 804b954:	ddc01215 	stw	r23,72(sp)
 804b958:	03c00404 	movi	r15,16
 804b95c:	a02f883a 	mov	r23,r20
 804b960:	db800e15 	stw	r14,56(sp)
 804b964:	8029883a 	mov	r20,r16
 804b968:	db400f15 	stw	r13,60(sp)
 804b96c:	402b883a 	mov	r21,r8
 804b970:	3821883a 	mov	r16,r7
 804b974:	6025883a 	mov	r18,r12
 804b978:	00000406 	br	804b98c <___svfprintf_internal_r+0x1018>
 804b97c:	843ffc04 	addi	r16,r16,-16
 804b980:	81800448 	cmpgei	r6,r16,17
 804b984:	21000204 	addi	r4,r4,8
 804b988:	30001426 	beq	r6,zero,804b9dc <___svfprintf_internal_r+0x1068>
 804b98c:	10800044 	addi	r2,r2,1
 804b990:	18c00404 	addi	r3,r3,16
 804b994:	24800015 	stw	r18,0(r4)
 804b998:	23c00115 	stw	r15,4(r4)
 804b99c:	d8c01c15 	stw	r3,112(sp)
 804b9a0:	d8801b15 	stw	r2,108(sp)
 804b9a4:	11800208 	cmpgei	r6,r2,8
 804b9a8:	303ff426 	beq	r6,zero,804b97c <___svfprintf_internal_r+0x1008>
 804b9ac:	d9801a04 	addi	r6,sp,104
 804b9b0:	880b883a 	mov	r5,r17
 804b9b4:	9809883a 	mov	r4,r19
 804b9b8:	804cc580 	call	804cc58 <__ssprint_r>
 804b9bc:	1001b11e 	bne	r2,zero,804c084 <___svfprintf_internal_r+0x1710>
 804b9c0:	843ffc04 	addi	r16,r16,-16
 804b9c4:	81800448 	cmpgei	r6,r16,17
 804b9c8:	d8c01c17 	ldw	r3,112(sp)
 804b9cc:	d8801b17 	ldw	r2,108(sp)
 804b9d0:	d9002704 	addi	r4,sp,156
 804b9d4:	03c00404 	movi	r15,16
 804b9d8:	303fec1e 	bne	r6,zero,804b98c <___svfprintf_internal_r+0x1018>
 804b9dc:	800f883a 	mov	r7,r16
 804b9e0:	9019883a 	mov	r12,r18
 804b9e4:	a021883a 	mov	r16,r20
 804b9e8:	8825883a 	mov	r18,r17
 804b9ec:	b829883a 	mov	r20,r23
 804b9f0:	db800e17 	ldw	r14,56(sp)
 804b9f4:	db400f17 	ldw	r13,60(sp)
 804b9f8:	ddc01217 	ldw	r23,72(sp)
 804b9fc:	dc401117 	ldw	r17,68(sp)
 804ba00:	a811883a 	mov	r8,r21
 804ba04:	b02b883a 	mov	r21,r22
 804ba08:	202d883a 	mov	r22,r4
 804ba0c:	10800044 	addi	r2,r2,1
 804ba10:	19c7883a 	add	r3,r3,r7
 804ba14:	d8801b15 	stw	r2,108(sp)
 804ba18:	b3000015 	stw	r12,0(r22)
 804ba1c:	b1c00115 	stw	r7,4(r22)
 804ba20:	d8c01c15 	stw	r3,112(sp)
 804ba24:	10800208 	cmpgei	r2,r2,8
 804ba28:	10015f1e 	bne	r2,zero,804bfa8 <___svfprintf_internal_r+0x1634>
 804ba2c:	b5800204 	addi	r22,r22,8
 804ba30:	003c9206 	br	804ac7c <___svfprintf_internal_r+0x308>
 804ba34:	d9801a04 	addi	r6,sp,104
 804ba38:	900b883a 	mov	r5,r18
 804ba3c:	9809883a 	mov	r4,r19
 804ba40:	da001115 	stw	r8,68(sp)
 804ba44:	db400f15 	stw	r13,60(sp)
 804ba48:	db800e15 	stw	r14,56(sp)
 804ba4c:	804cc580 	call	804cc58 <__ssprint_r>
 804ba50:	103cc71e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804ba54:	d8c01c17 	ldw	r3,112(sp)
 804ba58:	da001117 	ldw	r8,68(sp)
 804ba5c:	db400f17 	ldw	r13,60(sp)
 804ba60:	db800e17 	ldw	r14,56(sp)
 804ba64:	dd802704 	addi	r22,sp,156
 804ba68:	003c9206 	br	804acb4 <___svfprintf_internal_r+0x340>
 804ba6c:	d9801a04 	addi	r6,sp,104
 804ba70:	900b883a 	mov	r5,r18
 804ba74:	9809883a 	mov	r4,r19
 804ba78:	da000f15 	stw	r8,60(sp)
 804ba7c:	db400e15 	stw	r13,56(sp)
 804ba80:	804cc580 	call	804cc58 <__ssprint_r>
 804ba84:	103cba1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804ba88:	d8c01c17 	ldw	r3,112(sp)
 804ba8c:	da000f17 	ldw	r8,60(sp)
 804ba90:	db400e17 	ldw	r13,56(sp)
 804ba94:	dd802704 	addi	r22,sp,156
 804ba98:	003c9306 	br	804ace8 <___svfprintf_internal_r+0x374>
 804ba9c:	d9401417 	ldw	r5,80(sp)
 804baa0:	01414f0e 	bge	zero,r5,804bfe0 <___svfprintf_internal_r+0x166c>
 804baa4:	d8800717 	ldw	r2,28(sp)
 804baa8:	d9000817 	ldw	r4,32(sp)
 804baac:	102b883a 	mov	r21,r2
 804bab0:	2080c316 	blt	r4,r2,804bdc0 <___svfprintf_internal_r+0x144c>
 804bab4:	05400a0e 	bge	zero,r21,804bae0 <___svfprintf_internal_r+0x116c>
 804bab8:	d8801b17 	ldw	r2,108(sp)
 804babc:	1d47883a 	add	r3,r3,r21
 804bac0:	b4400015 	stw	r17,0(r22)
 804bac4:	10800044 	addi	r2,r2,1
 804bac8:	d8801b15 	stw	r2,108(sp)
 804bacc:	b5400115 	stw	r21,4(r22)
 804bad0:	d8c01c15 	stw	r3,112(sp)
 804bad4:	10800208 	cmpgei	r2,r2,8
 804bad8:	10032f1e 	bne	r2,zero,804c798 <___svfprintf_internal_r+0x1e24>
 804badc:	b5800204 	addi	r22,r22,8
 804bae0:	a800ef16 	blt	r21,zero,804bea0 <___svfprintf_internal_r+0x152c>
 804bae4:	d8800717 	ldw	r2,28(sp)
 804bae8:	156bc83a 	sub	r21,r2,r21
 804baec:	0540f916 	blt	zero,r21,804bed4 <___svfprintf_internal_r+0x1560>
 804baf0:	dd401417 	ldw	r21,80(sp)
 804baf4:	d8800817 	ldw	r2,32(sp)
 804baf8:	a880b40e 	bge	r21,r2,804bdcc <___svfprintf_internal_r+0x1458>
 804bafc:	d8800d17 	ldw	r2,52(sp)
 804bb00:	d9000c17 	ldw	r4,48(sp)
 804bb04:	b0800015 	stw	r2,0(r22)
 804bb08:	d8801b17 	ldw	r2,108(sp)
 804bb0c:	1907883a 	add	r3,r3,r4
 804bb10:	b1000115 	stw	r4,4(r22)
 804bb14:	10800044 	addi	r2,r2,1
 804bb18:	d8801b15 	stw	r2,108(sp)
 804bb1c:	d8c01c15 	stw	r3,112(sp)
 804bb20:	10800208 	cmpgei	r2,r2,8
 804bb24:	1002cd1e 	bne	r2,zero,804c65c <___svfprintf_internal_r+0x1ce8>
 804bb28:	b5800204 	addi	r22,r22,8
 804bb2c:	d9000817 	ldw	r4,32(sp)
 804bb30:	d9400717 	ldw	r5,28(sp)
 804bb34:	2545c83a 	sub	r2,r4,r21
 804bb38:	2149c83a 	sub	r4,r4,r5
 804bb3c:	102b883a 	mov	r21,r2
 804bb40:	2080010e 	bge	r4,r2,804bb48 <___svfprintf_internal_r+0x11d4>
 804bb44:	202b883a 	mov	r21,r4
 804bb48:	05400c0e 	bge	zero,r21,804bb7c <___svfprintf_internal_r+0x1208>
 804bb4c:	d9000717 	ldw	r4,28(sp)
 804bb50:	1d47883a 	add	r3,r3,r21
 804bb54:	b5400115 	stw	r21,4(r22)
 804bb58:	8913883a 	add	r9,r17,r4
 804bb5c:	d9001b17 	ldw	r4,108(sp)
 804bb60:	b2400015 	stw	r9,0(r22)
 804bb64:	d8c01c15 	stw	r3,112(sp)
 804bb68:	21000044 	addi	r4,r4,1
 804bb6c:	d9001b15 	stw	r4,108(sp)
 804bb70:	21000208 	cmpgei	r4,r4,8
 804bb74:	2003111e 	bne	r4,zero,804c7bc <___svfprintf_internal_r+0x1e48>
 804bb78:	b5800204 	addi	r22,r22,8
 804bb7c:	a800010e 	bge	r21,zero,804bb84 <___svfprintf_internal_r+0x1210>
 804bb80:	002b883a 	mov	r21,zero
 804bb84:	156bc83a 	sub	r21,r2,r21
 804bb88:	057c680e 	bge	zero,r21,804ad2c <___svfprintf_internal_r+0x3b8>
 804bb8c:	01c20174 	movhi	r7,2053
 804bb90:	a9000450 	cmplti	r4,r21,17
 804bb94:	d8801b17 	ldw	r2,108(sp)
 804bb98:	39d04904 	addi	r7,r7,16676
 804bb9c:	2001911e 	bne	r4,zero,804c1e4 <___svfprintf_internal_r+0x1870>
 804bba0:	07000404 	movi	fp,16
 804bba4:	3823883a 	mov	r17,r7
 804bba8:	00000406 	br	804bbbc <___svfprintf_internal_r+0x1248>
 804bbac:	b5800204 	addi	r22,r22,8
 804bbb0:	ad7ffc04 	addi	r21,r21,-16
 804bbb4:	a9000448 	cmpgei	r4,r21,17
 804bbb8:	20018926 	beq	r4,zero,804c1e0 <___svfprintf_internal_r+0x186c>
 804bbbc:	10800044 	addi	r2,r2,1
 804bbc0:	18c00404 	addi	r3,r3,16
 804bbc4:	b4400015 	stw	r17,0(r22)
 804bbc8:	b7000115 	stw	fp,4(r22)
 804bbcc:	d8c01c15 	stw	r3,112(sp)
 804bbd0:	d8801b15 	stw	r2,108(sp)
 804bbd4:	11000208 	cmpgei	r4,r2,8
 804bbd8:	203ff426 	beq	r4,zero,804bbac <___svfprintf_internal_r+0x1238>
 804bbdc:	d9801a04 	addi	r6,sp,104
 804bbe0:	900b883a 	mov	r5,r18
 804bbe4:	9809883a 	mov	r4,r19
 804bbe8:	804cc580 	call	804cc58 <__ssprint_r>
 804bbec:	103c601e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bbf0:	d8c01c17 	ldw	r3,112(sp)
 804bbf4:	d8801b17 	ldw	r2,108(sp)
 804bbf8:	dd802704 	addi	r22,sp,156
 804bbfc:	003fec06 	br	804bbb0 <___svfprintf_internal_r+0x123c>
 804bc00:	d8800417 	ldw	r2,16(sp)
 804bc04:	1080004c 	andi	r2,r2,1
 804bc08:	103f001e 	bne	r2,zero,804b80c <___svfprintf_internal_r+0xe98>
 804bc0c:	00800044 	movi	r2,1
 804bc10:	dd401b15 	stw	r21,108(sp)
 804bc14:	b4400015 	stw	r17,0(r22)
 804bc18:	b0800115 	stw	r2,4(r22)
 804bc1c:	d8c01c15 	stw	r3,112(sp)
 804bc20:	ad400208 	cmpgei	r21,r21,8
 804bc24:	a800d51e 	bne	r21,zero,804bf7c <___svfprintf_internal_r+0x1608>
 804bc28:	42000084 	addi	r8,r8,2
 804bc2c:	b5800404 	addi	r22,r22,16
 804bc30:	003f2206 	br	804b8bc <___svfprintf_internal_r+0xf48>
 804bc34:	02ff210e 	bge	zero,r11,804b8bc <___svfprintf_internal_r+0xf48>
 804bc38:	58800450 	cmplti	r2,r11,17
 804bc3c:	01c20174 	movhi	r7,2053
 804bc40:	10035c1e 	bne	r2,zero,804c9b4 <___svfprintf_internal_r+0x2040>
 804bc44:	39d04904 	addi	r7,r7,16676
 804bc48:	dc000715 	stw	r16,28(sp)
 804bc4c:	05800404 	movi	r22,16
 804bc50:	5823883a 	mov	r17,r11
 804bc54:	3821883a 	mov	r16,r7
 804bc58:	402b883a 	mov	r21,r8
 804bc5c:	00000506 	br	804bc74 <___svfprintf_internal_r+0x1300>
 804bc60:	e7000204 	addi	fp,fp,8
 804bc64:	8c7ffc04 	addi	r17,r17,-16
 804bc68:	88800448 	cmpgei	r2,r17,17
 804bc6c:	1001b626 	beq	r2,zero,804c348 <___svfprintf_internal_r+0x19d4>
 804bc70:	ad400044 	addi	r21,r21,1
 804bc74:	18c00404 	addi	r3,r3,16
 804bc78:	e4000015 	stw	r16,0(fp)
 804bc7c:	e5800115 	stw	r22,4(fp)
 804bc80:	d8c01c15 	stw	r3,112(sp)
 804bc84:	dd401b15 	stw	r21,108(sp)
 804bc88:	a8800208 	cmpgei	r2,r21,8
 804bc8c:	103ff426 	beq	r2,zero,804bc60 <___svfprintf_internal_r+0x12ec>
 804bc90:	d9801a04 	addi	r6,sp,104
 804bc94:	900b883a 	mov	r5,r18
 804bc98:	9809883a 	mov	r4,r19
 804bc9c:	804cc580 	call	804cc58 <__ssprint_r>
 804bca0:	103c331e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bca4:	dd401b17 	ldw	r21,108(sp)
 804bca8:	d8c01c17 	ldw	r3,112(sp)
 804bcac:	df002704 	addi	fp,sp,156
 804bcb0:	003fec06 	br	804bc64 <___svfprintf_internal_r+0x12f0>
 804bcb4:	d9801a04 	addi	r6,sp,104
 804bcb8:	900b883a 	mov	r5,r18
 804bcbc:	9809883a 	mov	r4,r19
 804bcc0:	804cc580 	call	804cc58 <__ssprint_r>
 804bcc4:	103c2a1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bcc8:	d8c01c17 	ldw	r3,112(sp)
 804bccc:	dd802704 	addi	r22,sp,156
 804bcd0:	003c0906 	br	804acf8 <___svfprintf_internal_r+0x384>
 804bcd4:	d9801a04 	addi	r6,sp,104
 804bcd8:	900b883a 	mov	r5,r18
 804bcdc:	9809883a 	mov	r4,r19
 804bce0:	804cc580 	call	804cc58 <__ssprint_r>
 804bce4:	103c221e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bce8:	d8c01c17 	ldw	r3,112(sp)
 804bcec:	dd401b17 	ldw	r21,108(sp)
 804bcf0:	df002704 	addi	fp,sp,156
 804bcf4:	003ecc06 	br	804b828 <___svfprintf_internal_r+0xeb4>
 804bcf8:	d9801a04 	addi	r6,sp,104
 804bcfc:	900b883a 	mov	r5,r18
 804bd00:	9809883a 	mov	r4,r19
 804bd04:	804cc580 	call	804cc58 <__ssprint_r>
 804bd08:	103c191e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bd0c:	d8c01c17 	ldw	r3,112(sp)
 804bd10:	dd401b17 	ldw	r21,108(sp)
 804bd14:	df002704 	addi	fp,sp,156
 804bd18:	003ece06 	br	804b854 <___svfprintf_internal_r+0xee0>
 804bd1c:	dc402704 	addi	r17,sp,156
 804bd20:	003d5f06 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804bd24:	25000017 	ldw	r20,0(r4)
 804bd28:	002b883a 	mov	r21,zero
 804bd2c:	d8c00615 	stw	r3,24(sp)
 804bd30:	00800044 	movi	r2,1
 804bd34:	003c3106 	br	804adfc <___svfprintf_internal_r+0x488>
 804bd38:	25000017 	ldw	r20,0(r4)
 804bd3c:	002b883a 	mov	r21,zero
 804bd40:	d8c00615 	stw	r3,24(sp)
 804bd44:	0005883a 	mov	r2,zero
 804bd48:	003c2c06 	br	804adfc <___svfprintf_internal_r+0x488>
 804bd4c:	d8800617 	ldw	r2,24(sp)
 804bd50:	10c00017 	ldw	r3,0(r2)
 804bd54:	10800117 	ldw	r2,4(r2)
 804bd58:	d8c00915 	stw	r3,36(sp)
 804bd5c:	d8800a15 	stw	r2,40(sp)
 804bd60:	003c5b06 	br	804aed0 <___svfprintf_internal_r+0x55c>
 804bd64:	d9000517 	ldw	r4,20(sp)
 804bd68:	2005d7fa 	srai	r2,r4,31
 804bd6c:	19000015 	stw	r4,0(r3)
 804bd70:	18800115 	stw	r2,4(r3)
 804bd74:	003b2506 	br	804aa0c <___svfprintf_internal_r+0x98>
 804bd78:	00800c04 	movi	r2,48
 804bd7c:	d8801385 	stb	r2,78(sp)
 804bd80:	df0013c5 	stb	fp,79(sp)
 804bd84:	63000094 	ori	r12,r12,2
 804bd88:	00800084 	movi	r2,2
 804bd8c:	003c1b06 	br	804adfc <___svfprintf_internal_r+0x488>
 804bd90:	25000017 	ldw	r20,0(r4)
 804bd94:	002b883a 	mov	r21,zero
 804bd98:	d8c00615 	stw	r3,24(sp)
 804bd9c:	003d8c06 	br	804b3d0 <___svfprintf_internal_r+0xa5c>
 804bda0:	25000017 	ldw	r20,0(r4)
 804bda4:	d8c00615 	stw	r3,24(sp)
 804bda8:	a02bd7fa 	srai	r21,r20,31
 804bdac:	a805883a 	mov	r2,r21
 804bdb0:	003cc706 	br	804b0d0 <___svfprintf_internal_r+0x75c>
 804bdb4:	0421c83a 	sub	r16,zero,r16
 804bdb8:	d8800615 	stw	r2,24(sp)
 804bdbc:	003d5706 	br	804b31c <___svfprintf_internal_r+0x9a8>
 804bdc0:	202b883a 	mov	r21,r4
 804bdc4:	057f3c16 	blt	zero,r21,804bab8 <___svfprintf_internal_r+0x1144>
 804bdc8:	003f4506 	br	804bae0 <___svfprintf_internal_r+0x116c>
 804bdcc:	d8800417 	ldw	r2,16(sp)
 804bdd0:	1080004c 	andi	r2,r2,1
 804bdd4:	103f491e 	bne	r2,zero,804bafc <___svfprintf_internal_r+0x1188>
 804bdd8:	d9000817 	ldw	r4,32(sp)
 804bddc:	d9400717 	ldw	r5,28(sp)
 804bde0:	2545c83a 	sub	r2,r4,r21
 804bde4:	2179c83a 	sub	fp,r4,r5
 804bde8:	102b883a 	mov	r21,r2
 804bdec:	e0bf630e 	bge	fp,r2,804bb7c <___svfprintf_internal_r+0x1208>
 804bdf0:	e02b883a 	mov	r21,fp
 804bdf4:	003f6106 	br	804bb7c <___svfprintf_internal_r+0x1208>
 804bdf8:	db000417 	ldw	r12,16(sp)
 804bdfc:	a83ec426 	beq	r21,zero,804b910 <___svfprintf_internal_r+0xf9c>
 804be00:	dc402704 	addi	r17,sp,156
 804be04:	a805883a 	mov	r2,r21
 804be08:	dc000715 	stw	r16,28(sp)
 804be0c:	902b883a 	mov	r21,r18
 804be10:	8821883a 	mov	r16,r17
 804be14:	db000415 	stw	r12,16(sp)
 804be18:	a023883a 	mov	r17,r20
 804be1c:	da000e15 	stw	r8,56(sp)
 804be20:	9829883a 	mov	r20,r19
 804be24:	1025883a 	mov	r18,r2
 804be28:	6827883a 	mov	r19,r13
 804be2c:	8809883a 	mov	r4,r17
 804be30:	900b883a 	mov	r5,r18
 804be34:	01800284 	movi	r6,10
 804be38:	000f883a 	mov	r7,zero
 804be3c:	800dc080 	call	800dc08 <__umoddi3>
 804be40:	10800c04 	addi	r2,r2,48
 804be44:	8809883a 	mov	r4,r17
 804be48:	900b883a 	mov	r5,r18
 804be4c:	01800284 	movi	r6,10
 804be50:	000f883a 	mov	r7,zero
 804be54:	80bfffc5 	stb	r2,-1(r16)
 804be58:	800d6780 	call	800d678 <__udivdi3>
 804be5c:	900d883a 	mov	r6,r18
 804be60:	880f883a 	mov	r7,r17
 804be64:	843fffc4 	addi	r16,r16,-1
 804be68:	1023883a 	mov	r17,r2
 804be6c:	1825883a 	mov	r18,r3
 804be70:	303fee1e 	bne	r6,zero,804be2c <___svfprintf_internal_r+0x14b8>
 804be74:	39c002a8 	cmpgeui	r7,r7,10
 804be78:	383fec1e 	bne	r7,zero,804be2c <___svfprintf_internal_r+0x14b8>
 804be7c:	8023883a 	mov	r17,r16
 804be80:	d8802704 	addi	r2,sp,156
 804be84:	981b883a 	mov	r13,r19
 804be88:	a825883a 	mov	r18,r21
 804be8c:	dc000717 	ldw	r16,28(sp)
 804be90:	da000e17 	ldw	r8,56(sp)
 804be94:	a027883a 	mov	r19,r20
 804be98:	146bc83a 	sub	r21,r2,r17
 804be9c:	003d0006 	br	804b2a0 <___svfprintf_internal_r+0x92c>
 804bea0:	d8800717 	ldw	r2,28(sp)
 804bea4:	002b883a 	mov	r21,zero
 804bea8:	156bc83a 	sub	r21,r2,r21
 804beac:	057f100e 	bge	zero,r21,804baf0 <___svfprintf_internal_r+0x117c>
 804beb0:	00000806 	br	804bed4 <___svfprintf_internal_r+0x1560>
 804beb4:	8809883a 	mov	r4,r17
 804beb8:	db000415 	stw	r12,16(sp)
 804bebc:	d8c00615 	stw	r3,24(sp)
 804bec0:	8003a1c0 	call	8003a1c <strlen>
 804bec4:	db000417 	ldw	r12,16(sp)
 804bec8:	102b883a 	mov	r21,r2
 804becc:	1029883a 	mov	r20,r2
 804bed0:	003b5d06 	br	804ac48 <___svfprintf_internal_r+0x2d4>
 804bed4:	01c20174 	movhi	r7,2053
 804bed8:	a9000450 	cmplti	r4,r21,17
 804bedc:	d8801b17 	ldw	r2,108(sp)
 804bee0:	39d04904 	addi	r7,r7,16676
 804bee4:	2001c21e 	bne	r4,zero,804c5f0 <___svfprintf_internal_r+0x1c7c>
 804bee8:	dc000e15 	stw	r16,56(sp)
 804beec:	07000404 	movi	fp,16
 804bef0:	3821883a 	mov	r16,r7
 804bef4:	00000406 	br	804bf08 <___svfprintf_internal_r+0x1594>
 804bef8:	b5800204 	addi	r22,r22,8
 804befc:	ad7ffc04 	addi	r21,r21,-16
 804bf00:	a9000448 	cmpgei	r4,r21,17
 804bf04:	2001b826 	beq	r4,zero,804c5e8 <___svfprintf_internal_r+0x1c74>
 804bf08:	10800044 	addi	r2,r2,1
 804bf0c:	18c00404 	addi	r3,r3,16
 804bf10:	b4000015 	stw	r16,0(r22)
 804bf14:	b7000115 	stw	fp,4(r22)
 804bf18:	d8c01c15 	stw	r3,112(sp)
 804bf1c:	d8801b15 	stw	r2,108(sp)
 804bf20:	11000208 	cmpgei	r4,r2,8
 804bf24:	203ff426 	beq	r4,zero,804bef8 <___svfprintf_internal_r+0x1584>
 804bf28:	d9801a04 	addi	r6,sp,104
 804bf2c:	900b883a 	mov	r5,r18
 804bf30:	9809883a 	mov	r4,r19
 804bf34:	804cc580 	call	804cc58 <__ssprint_r>
 804bf38:	103b8d1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bf3c:	d8c01c17 	ldw	r3,112(sp)
 804bf40:	d8801b17 	ldw	r2,108(sp)
 804bf44:	dd802704 	addi	r22,sp,156
 804bf48:	003fec06 	br	804befc <___svfprintf_internal_r+0x1588>
 804bf4c:	01401004 	movi	r5,64
 804bf50:	9809883a 	mov	r4,r19
 804bf54:	8008e340 	call	8008e34 <_malloc_r>
 804bf58:	90800015 	stw	r2,0(r18)
 804bf5c:	90800415 	stw	r2,16(r18)
 804bf60:	1002a626 	beq	r2,zero,804c9fc <___svfprintf_internal_r+0x2088>
 804bf64:	00801004 	movi	r2,64
 804bf68:	90800515 	stw	r2,20(r18)
 804bf6c:	003a9b06 	br	804a9dc <___svfprintf_internal_r+0x68>
 804bf70:	d8800517 	ldw	r2,20(sp)
 804bf74:	18800015 	stw	r2,0(r3)
 804bf78:	003aa406 	br	804aa0c <___svfprintf_internal_r+0x98>
 804bf7c:	d9801a04 	addi	r6,sp,104
 804bf80:	900b883a 	mov	r5,r18
 804bf84:	9809883a 	mov	r4,r19
 804bf88:	804cc580 	call	804cc58 <__ssprint_r>
 804bf8c:	103b781e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bf90:	da001b17 	ldw	r8,108(sp)
 804bf94:	d8c01c17 	ldw	r3,112(sp)
 804bf98:	dd802904 	addi	r22,sp,164
 804bf9c:	42000044 	addi	r8,r8,1
 804bfa0:	df002704 	addi	fp,sp,156
 804bfa4:	003e4506 	br	804b8bc <___svfprintf_internal_r+0xf48>
 804bfa8:	d9801a04 	addi	r6,sp,104
 804bfac:	900b883a 	mov	r5,r18
 804bfb0:	9809883a 	mov	r4,r19
 804bfb4:	da001115 	stw	r8,68(sp)
 804bfb8:	db400f15 	stw	r13,60(sp)
 804bfbc:	db800e15 	stw	r14,56(sp)
 804bfc0:	804cc580 	call	804cc58 <__ssprint_r>
 804bfc4:	103b6a1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804bfc8:	d8c01c17 	ldw	r3,112(sp)
 804bfcc:	da001117 	ldw	r8,68(sp)
 804bfd0:	db400f17 	ldw	r13,60(sp)
 804bfd4:	db800e17 	ldw	r14,56(sp)
 804bfd8:	dd802704 	addi	r22,sp,156
 804bfdc:	003b2706 	br	804ac7c <___svfprintf_internal_r+0x308>
 804bfe0:	d8801b17 	ldw	r2,108(sp)
 804bfe4:	01020174 	movhi	r4,2053
 804bfe8:	213e6d04 	addi	r4,r4,-1612
 804bfec:	10800044 	addi	r2,r2,1
 804bff0:	18c00044 	addi	r3,r3,1
 804bff4:	b1000015 	stw	r4,0(r22)
 804bff8:	01000044 	movi	r4,1
 804bffc:	d8801b15 	stw	r2,108(sp)
 804c000:	b1000115 	stw	r4,4(r22)
 804c004:	d8c01c15 	stw	r3,112(sp)
 804c008:	10800208 	cmpgei	r2,r2,8
 804c00c:	10018a1e 	bne	r2,zero,804c638 <___svfprintf_internal_r+0x1cc4>
 804c010:	b5800204 	addi	r22,r22,8
 804c014:	2800a01e 	bne	r5,zero,804c298 <___svfprintf_internal_r+0x1924>
 804c018:	d8800417 	ldw	r2,16(sp)
 804c01c:	d9000817 	ldw	r4,32(sp)
 804c020:	1080004c 	andi	r2,r2,1
 804c024:	1104b03a 	or	r2,r2,r4
 804c028:	103b4026 	beq	r2,zero,804ad2c <___svfprintf_internal_r+0x3b8>
 804c02c:	d8800d17 	ldw	r2,52(sp)
 804c030:	d9000c17 	ldw	r4,48(sp)
 804c034:	b0800015 	stw	r2,0(r22)
 804c038:	d8801b17 	ldw	r2,108(sp)
 804c03c:	20c7883a 	add	r3,r4,r3
 804c040:	b1000115 	stw	r4,4(r22)
 804c044:	10800044 	addi	r2,r2,1
 804c048:	d8c01c15 	stw	r3,112(sp)
 804c04c:	d8801b15 	stw	r2,108(sp)
 804c050:	11000208 	cmpgei	r4,r2,8
 804c054:	2001951e 	bne	r4,zero,804c6ac <___svfprintf_internal_r+0x1d38>
 804c058:	b5800204 	addi	r22,r22,8
 804c05c:	d9000817 	ldw	r4,32(sp)
 804c060:	10800044 	addi	r2,r2,1
 804c064:	d8801b15 	stw	r2,108(sp)
 804c068:	20c7883a 	add	r3,r4,r3
 804c06c:	b4400015 	stw	r17,0(r22)
 804c070:	b1000115 	stw	r4,4(r22)
 804c074:	d8c01c15 	stw	r3,112(sp)
 804c078:	10800208 	cmpgei	r2,r2,8
 804c07c:	103b2a26 	beq	r2,zero,804ad28 <___svfprintf_internal_r+0x3b4>
 804c080:	003e1706 	br	804b8e0 <___svfprintf_internal_r+0xf6c>
 804c084:	8825883a 	mov	r18,r17
 804c088:	003b3906 	br	804ad70 <___svfprintf_internal_r+0x3fc>
 804c08c:	d9000917 	ldw	r4,36(sp)
 804c090:	d9400a17 	ldw	r5,40(sp)
 804c094:	da000615 	stw	r8,24(sp)
 804c098:	200d883a 	mov	r6,r4
 804c09c:	280f883a 	mov	r7,r5
 804c0a0:	db000415 	stw	r12,16(sp)
 804c0a4:	80106cc0 	call	80106cc <__unorddf2>
 804c0a8:	db000417 	ldw	r12,16(sp)
 804c0ac:	da000617 	ldw	r8,24(sp)
 804c0b0:	1002271e 	bne	r2,zero,804c950 <___svfprintf_internal_r+0x1fdc>
 804c0b4:	057ff7c4 	movi	r21,-33
 804c0b8:	40bfffe0 	cmpeqi	r2,r8,-1
 804c0bc:	e56a703a 	and	r21,fp,r21
 804c0c0:	1001c91e 	bne	r2,zero,804c7e8 <___svfprintf_internal_r+0x1e74>
 804c0c4:	a88011d8 	cmpnei	r2,r21,71
 804c0c8:	10004026 	beq	r2,zero,804c1cc <___svfprintf_internal_r+0x1858>
 804c0cc:	60804014 	ori	r2,r12,256
 804c0d0:	d8800415 	stw	r2,16(sp)
 804c0d4:	d8800a17 	ldw	r2,40(sp)
 804c0d8:	10015316 	blt	r2,zero,804c628 <___svfprintf_internal_r+0x1cb4>
 804c0dc:	dd000a17 	ldw	r20,40(sp)
 804c0e0:	d8000605 	stb	zero,24(sp)
 804c0e4:	e08019a0 	cmpeqi	r2,fp,102
 804c0e8:	d8800f15 	stw	r2,60(sp)
 804c0ec:	1000b21e 	bne	r2,zero,804c3b8 <___svfprintf_internal_r+0x1a44>
 804c0f0:	e08011a0 	cmpeqi	r2,fp,70
 804c0f4:	1000b01e 	bne	r2,zero,804c3b8 <___svfprintf_internal_r+0x1a44>
 804c0f8:	a8801158 	cmpnei	r2,r21,69
 804c0fc:	10018526 	beq	r2,zero,804c714 <___svfprintf_internal_r+0x1da0>
 804c100:	d8801804 	addi	r2,sp,96
 804c104:	d8800315 	stw	r2,12(sp)
 804c108:	d9400917 	ldw	r5,36(sp)
 804c10c:	d8801504 	addi	r2,sp,84
 804c110:	d8800215 	stw	r2,8(sp)
 804c114:	d8801404 	addi	r2,sp,80
 804c118:	da000015 	stw	r8,0(sp)
 804c11c:	9809883a 	mov	r4,r19
 804c120:	d8800115 	stw	r2,4(sp)
 804c124:	01c00084 	movi	r7,2
 804c128:	a00d883a 	mov	r6,r20
 804c12c:	db000815 	stw	r12,32(sp)
 804c130:	da000715 	stw	r8,28(sp)
 804c134:	80063740 	call	8006374 <_dtoa_r>
 804c138:	da000717 	ldw	r8,28(sp)
 804c13c:	e10019d8 	cmpnei	r4,fp,103
 804c140:	db000817 	ldw	r12,32(sp)
 804c144:	1023883a 	mov	r17,r2
 804c148:	4007883a 	mov	r3,r8
 804c14c:	2001851e 	bne	r4,zero,804c764 <___svfprintf_internal_r+0x1df0>
 804c150:	6080004c 	andi	r2,r12,1
 804c154:	1001851e 	bne	r2,zero,804c76c <___svfprintf_internal_r+0x1df8>
 804c158:	d8801417 	ldw	r2,80(sp)
 804c15c:	ad4011e0 	cmpeqi	r21,r21,71
 804c160:	d8800715 	stw	r2,28(sp)
 804c164:	d8801817 	ldw	r2,96(sp)
 804c168:	1445c83a 	sub	r2,r2,r17
 804c16c:	d8800815 	stw	r2,32(sp)
 804c170:	a800db26 	beq	r21,zero,804c4e0 <___svfprintf_internal_r+0x1b6c>
 804c174:	d8c00717 	ldw	r3,28(sp)
 804c178:	18bfff50 	cmplti	r2,r3,-3
 804c17c:	1000d71e 	bne	r2,zero,804c4dc <___svfprintf_internal_r+0x1b68>
 804c180:	40c0d616 	blt	r8,r3,804c4dc <___svfprintf_internal_r+0x1b68>
 804c184:	d8800717 	ldw	r2,28(sp)
 804c188:	d8c00817 	ldw	r3,32(sp)
 804c18c:	10c19c16 	blt	r2,r3,804c800 <___svfprintf_internal_r+0x1e8c>
 804c190:	6300004c 	andi	r12,r12,1
 804c194:	6001dd1e 	bne	r12,zero,804c90c <___svfprintf_internal_r+0x1f98>
 804c198:	1029883a 	mov	r20,r2
 804c19c:	1000010e 	bge	r2,zero,804c1a4 <___svfprintf_internal_r+0x1830>
 804c1a0:	0029883a 	mov	r20,zero
 804c1a4:	dd400717 	ldw	r21,28(sp)
 804c1a8:	070019c4 	movi	fp,103
 804c1ac:	d8800607 	ldb	r2,24(sp)
 804c1b0:	10017426 	beq	r2,zero,804c784 <___svfprintf_internal_r+0x1e10>
 804c1b4:	00800b44 	movi	r2,45
 804c1b8:	d8801345 	stb	r2,77(sp)
 804c1bc:	d8800e17 	ldw	r2,56(sp)
 804c1c0:	0011883a 	mov	r8,zero
 804c1c4:	d8800615 	stw	r2,24(sp)
 804c1c8:	003c3d06 	br	804b2c0 <___svfprintf_internal_r+0x94c>
 804c1cc:	403fbf1e 	bne	r8,zero,804c0cc <___svfprintf_internal_r+0x1758>
 804c1d0:	02000044 	movi	r8,1
 804c1d4:	003fbd06 	br	804c0cc <___svfprintf_internal_r+0x1758>
 804c1d8:	db401343 	ldbu	r13,77(sp)
 804c1dc:	003dcb06 	br	804b90c <___svfprintf_internal_r+0xf98>
 804c1e0:	880f883a 	mov	r7,r17
 804c1e4:	10800044 	addi	r2,r2,1
 804c1e8:	1d47883a 	add	r3,r3,r21
 804c1ec:	b1c00015 	stw	r7,0(r22)
 804c1f0:	003ac806 	br	804ad14 <___svfprintf_internal_r+0x3a0>
 804c1f4:	d9801a04 	addi	r6,sp,104
 804c1f8:	900b883a 	mov	r5,r18
 804c1fc:	9809883a 	mov	r4,r19
 804c200:	804cc580 	call	804cc58 <__ssprint_r>
 804c204:	103ada1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c208:	d8c01c17 	ldw	r3,112(sp)
 804c20c:	dd802704 	addi	r22,sp,156
 804c210:	003cbe06 	br	804b50c <___svfprintf_internal_r+0xb98>
 804c214:	d9801a04 	addi	r6,sp,104
 804c218:	900b883a 	mov	r5,r18
 804c21c:	9809883a 	mov	r4,r19
 804c220:	da000e15 	stw	r8,56(sp)
 804c224:	804cc580 	call	804cc58 <__ssprint_r>
 804c228:	103ad11e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c22c:	d8c01c17 	ldw	r3,112(sp)
 804c230:	da000e17 	ldw	r8,56(sp)
 804c234:	dd802704 	addi	r22,sp,156
 804c238:	003aad06 	br	804acf0 <___svfprintf_internal_r+0x37c>
 804c23c:	d9801a04 	addi	r6,sp,104
 804c240:	900b883a 	mov	r5,r18
 804c244:	9809883a 	mov	r4,r19
 804c248:	804cc580 	call	804cc58 <__ssprint_r>
 804c24c:	103ac81e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c250:	d8c01c17 	ldw	r3,112(sp)
 804c254:	dd802704 	addi	r22,sp,156
 804c258:	003cbe06 	br	804b554 <___svfprintf_internal_r+0xbe0>
 804c25c:	bf000043 	ldbu	fp,1(r23)
 804c260:	63000814 	ori	r12,r12,32
 804c264:	bdc00044 	addi	r23,r23,1
 804c268:	e2c03fcc 	andi	r11,fp,255
 804c26c:	5ac0201c 	xori	r11,r11,128
 804c270:	5affe004 	addi	r11,r11,-128
 804c274:	0039fd06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804c278:	408001f0 	cmpltui	r2,r8,7
 804c27c:	402b883a 	mov	r21,r8
 804c280:	10010126 	beq	r2,zero,804c688 <___svfprintf_internal_r+0x1d14>
 804c284:	04420174 	movhi	r17,2053
 804c288:	a829883a 	mov	r20,r21
 804c28c:	d8c00615 	stw	r3,24(sp)
 804c290:	8c7e6b04 	addi	r17,r17,-1620
 804c294:	003a6c06 	br	804ac48 <___svfprintf_internal_r+0x2d4>
 804c298:	d8800d17 	ldw	r2,52(sp)
 804c29c:	d9000c17 	ldw	r4,48(sp)
 804c2a0:	b0800015 	stw	r2,0(r22)
 804c2a4:	d8801b17 	ldw	r2,108(sp)
 804c2a8:	20c7883a 	add	r3,r4,r3
 804c2ac:	b1000115 	stw	r4,4(r22)
 804c2b0:	10800044 	addi	r2,r2,1
 804c2b4:	d8c01c15 	stw	r3,112(sp)
 804c2b8:	d8801b15 	stw	r2,108(sp)
 804c2bc:	11000208 	cmpgei	r4,r2,8
 804c2c0:	2000fa1e 	bne	r4,zero,804c6ac <___svfprintf_internal_r+0x1d38>
 804c2c4:	b5800204 	addi	r22,r22,8
 804c2c8:	283f640e 	bge	r5,zero,804c05c <___svfprintf_internal_r+0x16e8>
 804c2cc:	01c20174 	movhi	r7,2053
 804c2d0:	293ffc08 	cmpgei	r4,r5,-16
 804c2d4:	39d04904 	addi	r7,r7,16676
 804c2d8:	0179c83a 	sub	fp,zero,r5
 804c2dc:	2001631e 	bne	r4,zero,804c86c <___svfprintf_internal_r+0x1ef8>
 804c2e0:	dc000715 	stw	r16,28(sp)
 804c2e4:	05400404 	movi	r21,16
 804c2e8:	9021883a 	mov	r16,r18
 804c2ec:	3825883a 	mov	r18,r7
 804c2f0:	00000406 	br	804c304 <___svfprintf_internal_r+0x1990>
 804c2f4:	b5800204 	addi	r22,r22,8
 804c2f8:	e73ffc04 	addi	fp,fp,-16
 804c2fc:	e1800448 	cmpgei	r6,fp,17
 804c300:	30015726 	beq	r6,zero,804c860 <___svfprintf_internal_r+0x1eec>
 804c304:	10800044 	addi	r2,r2,1
 804c308:	18c00404 	addi	r3,r3,16
 804c30c:	b4800015 	stw	r18,0(r22)
 804c310:	b5400115 	stw	r21,4(r22)
 804c314:	d8c01c15 	stw	r3,112(sp)
 804c318:	d8801b15 	stw	r2,108(sp)
 804c31c:	11800208 	cmpgei	r6,r2,8
 804c320:	303ff426 	beq	r6,zero,804c2f4 <___svfprintf_internal_r+0x1980>
 804c324:	d9801a04 	addi	r6,sp,104
 804c328:	800b883a 	mov	r5,r16
 804c32c:	9809883a 	mov	r4,r19
 804c330:	804cc580 	call	804cc58 <__ssprint_r>
 804c334:	1001961e 	bne	r2,zero,804c990 <___svfprintf_internal_r+0x201c>
 804c338:	d8c01c17 	ldw	r3,112(sp)
 804c33c:	d8801b17 	ldw	r2,108(sp)
 804c340:	dd802704 	addi	r22,sp,156
 804c344:	003fec06 	br	804c2f8 <___svfprintf_internal_r+0x1984>
 804c348:	800f883a 	mov	r7,r16
 804c34c:	dc000717 	ldw	r16,28(sp)
 804c350:	8817883a 	mov	r11,r17
 804c354:	aa000044 	addi	r8,r21,1
 804c358:	e0800204 	addi	r2,fp,8
 804c35c:	1ac7883a 	add	r3,r3,r11
 804c360:	e1c00015 	stw	r7,0(fp)
 804c364:	e2c00115 	stw	r11,4(fp)
 804c368:	d8c01c15 	stw	r3,112(sp)
 804c36c:	da001b15 	stw	r8,108(sp)
 804c370:	41000208 	cmpgei	r4,r8,8
 804c374:	203f011e 	bne	r4,zero,804bf7c <___svfprintf_internal_r+0x1608>
 804c378:	42000044 	addi	r8,r8,1
 804c37c:	15800204 	addi	r22,r2,8
 804c380:	1039883a 	mov	fp,r2
 804c384:	003d4d06 	br	804b8bc <___svfprintf_internal_r+0xf48>
 804c388:	d8800617 	ldw	r2,24(sp)
 804c38c:	d8c00615 	stw	r3,24(sp)
 804c390:	15000017 	ldw	r20,0(r2)
 804c394:	a02bd7fa 	srai	r21,r20,31
 804c398:	a805883a 	mov	r2,r21
 804c39c:	003b4c06 	br	804b0d0 <___svfprintf_internal_r+0x75c>
 804c3a0:	d8800617 	ldw	r2,24(sp)
 804c3a4:	002b883a 	mov	r21,zero
 804c3a8:	d8c00615 	stw	r3,24(sp)
 804c3ac:	15000017 	ldw	r20,0(r2)
 804c3b0:	00800044 	movi	r2,1
 804c3b4:	003a9106 	br	804adfc <___svfprintf_internal_r+0x488>
 804c3b8:	d8801804 	addi	r2,sp,96
 804c3bc:	d8800315 	stw	r2,12(sp)
 804c3c0:	d9400917 	ldw	r5,36(sp)
 804c3c4:	d8801504 	addi	r2,sp,84
 804c3c8:	d8800215 	stw	r2,8(sp)
 804c3cc:	d8801404 	addi	r2,sp,80
 804c3d0:	da000015 	stw	r8,0(sp)
 804c3d4:	d8800115 	stw	r2,4(sp)
 804c3d8:	01c000c4 	movi	r7,3
 804c3dc:	a00d883a 	mov	r6,r20
 804c3e0:	9809883a 	mov	r4,r19
 804c3e4:	db000815 	stw	r12,32(sp)
 804c3e8:	da000715 	stw	r8,28(sp)
 804c3ec:	80063740 	call	8006374 <_dtoa_r>
 804c3f0:	da000717 	ldw	r8,28(sp)
 804c3f4:	1023883a 	mov	r17,r2
 804c3f8:	db000817 	ldw	r12,32(sp)
 804c3fc:	1207883a 	add	r3,r2,r8
 804c400:	88800007 	ldb	r2,0(r17)
 804c404:	10800c20 	cmpeqi	r2,r2,48
 804c408:	1001291e 	bne	r2,zero,804c8b0 <___svfprintf_internal_r+0x1f3c>
 804c40c:	d8801417 	ldw	r2,80(sp)
 804c410:	1893883a 	add	r9,r3,r2
 804c414:	d9000917 	ldw	r4,36(sp)
 804c418:	000d883a 	mov	r6,zero
 804c41c:	000f883a 	mov	r7,zero
 804c420:	a00b883a 	mov	r5,r20
 804c424:	da401115 	stw	r9,68(sp)
 804c428:	da000815 	stw	r8,32(sp)
 804c42c:	db000715 	stw	r12,28(sp)
 804c430:	800f4c80 	call	800f4c8 <__eqdf2>
 804c434:	db000717 	ldw	r12,28(sp)
 804c438:	da000817 	ldw	r8,32(sp)
 804c43c:	da401117 	ldw	r9,68(sp)
 804c440:	10008f26 	beq	r2,zero,804c680 <___svfprintf_internal_r+0x1d0c>
 804c444:	d8801817 	ldw	r2,96(sp)
 804c448:	1240062e 	bgeu	r2,r9,804c464 <___svfprintf_internal_r+0x1af0>
 804c44c:	01000c04 	movi	r4,48
 804c450:	10c00044 	addi	r3,r2,1
 804c454:	d8c01815 	stw	r3,96(sp)
 804c458:	11000005 	stb	r4,0(r2)
 804c45c:	d8801817 	ldw	r2,96(sp)
 804c460:	127ffb36 	bltu	r2,r9,804c450 <___svfprintf_internal_r+0x1adc>
 804c464:	d8c01417 	ldw	r3,80(sp)
 804c468:	1445c83a 	sub	r2,r2,r17
 804c46c:	ad4011d8 	cmpnei	r21,r21,71
 804c470:	d8c00715 	stw	r3,28(sp)
 804c474:	d8800815 	stw	r2,32(sp)
 804c478:	a83f3e26 	beq	r21,zero,804c174 <___svfprintf_internal_r+0x1800>
 804c47c:	d8800f17 	ldw	r2,60(sp)
 804c480:	10001726 	beq	r2,zero,804c4e0 <___svfprintf_internal_r+0x1b6c>
 804c484:	d8c00717 	ldw	r3,28(sp)
 804c488:	6080004c 	andi	r2,r12,1
 804c48c:	1204b03a 	or	r2,r2,r8
 804c490:	00c0b80e 	bge	zero,r3,804c774 <___svfprintf_internal_r+0x1e00>
 804c494:	1001361e 	bne	r2,zero,804c970 <___svfprintf_internal_r+0x1ffc>
 804c498:	dd400717 	ldw	r21,28(sp)
 804c49c:	a829883a 	mov	r20,r21
 804c4a0:	003f4206 	br	804c1ac <___svfprintf_internal_r+0x1838>
 804c4a4:	d8800617 	ldw	r2,24(sp)
 804c4a8:	002b883a 	mov	r21,zero
 804c4ac:	d8c00615 	stw	r3,24(sp)
 804c4b0:	15000017 	ldw	r20,0(r2)
 804c4b4:	003bc606 	br	804b3d0 <___svfprintf_internal_r+0xa5c>
 804c4b8:	d8800617 	ldw	r2,24(sp)
 804c4bc:	002b883a 	mov	r21,zero
 804c4c0:	d8c00615 	stw	r3,24(sp)
 804c4c4:	15000017 	ldw	r20,0(r2)
 804c4c8:	0005883a 	mov	r2,zero
 804c4cc:	003a4b06 	br	804adfc <___svfprintf_internal_r+0x488>
 804c4d0:	04420174 	movhi	r17,2053
 804c4d4:	8c7e5d04 	addi	r17,r17,-1676
 804c4d8:	003aa206 	br	804af64 <___svfprintf_internal_r+0x5f0>
 804c4dc:	e73fff84 	addi	fp,fp,-2
 804c4e0:	d8800717 	ldw	r2,28(sp)
 804c4e4:	df001645 	stb	fp,89(sp)
 804c4e8:	157fffc4 	addi	r21,r2,-1
 804c4ec:	dd401415 	stw	r21,80(sp)
 804c4f0:	a8008316 	blt	r21,zero,804c700 <___svfprintf_internal_r+0x1d8c>
 804c4f4:	00800ac4 	movi	r2,43
 804c4f8:	d8801685 	stb	r2,90(sp)
 804c4fc:	a8800290 	cmplti	r2,r21,10
 804c500:	1000fb1e 	bne	r2,zero,804c8f0 <___svfprintf_internal_r+0x1f7c>
 804c504:	d98019c4 	addi	r6,sp,103
 804c508:	9029883a 	mov	r20,r18
 804c50c:	dc400715 	stw	r17,28(sp)
 804c510:	8025883a 	mov	r18,r16
 804c514:	db000f15 	stw	r12,60(sp)
 804c518:	3021883a 	mov	r16,r6
 804c51c:	a809883a 	mov	r4,r21
 804c520:	01400284 	movi	r5,10
 804c524:	800e1bc0 	call	800e1bc <__modsi3>
 804c528:	10800c04 	addi	r2,r2,48
 804c52c:	a809883a 	mov	r4,r21
 804c530:	80bfffc5 	stb	r2,-1(r16)
 804c534:	01400284 	movi	r5,10
 804c538:	800e13c0 	call	800e13c <__divsi3>
 804c53c:	a9001908 	cmpgei	r4,r21,100
 804c540:	8023883a 	mov	r17,r16
 804c544:	102b883a 	mov	r21,r2
 804c548:	843fffc4 	addi	r16,r16,-1
 804c54c:	203ff31e 	bne	r4,zero,804c51c <___svfprintf_internal_r+0x1ba8>
 804c550:	800d883a 	mov	r6,r16
 804c554:	11000c04 	addi	r4,r2,48
 804c558:	9021883a 	mov	r16,r18
 804c55c:	a025883a 	mov	r18,r20
 804c560:	8829883a 	mov	r20,r17
 804c564:	a0bfff84 	addi	r2,r20,-2
 804c568:	313fffc5 	stb	r4,-1(r6)
 804c56c:	d8c019c4 	addi	r3,sp,103
 804c570:	db000f17 	ldw	r12,60(sp)
 804c574:	dc400717 	ldw	r17,28(sp)
 804c578:	10c11d2e 	bgeu	r2,r3,804c9f0 <___svfprintf_internal_r+0x207c>
 804c57c:	d8c016c4 	addi	r3,sp,91
 804c580:	00000106 	br	804c588 <___svfprintf_internal_r+0x1c14>
 804c584:	11000003 	ldbu	r4,0(r2)
 804c588:	19000005 	stb	r4,0(r3)
 804c58c:	10800044 	addi	r2,r2,1
 804c590:	d90019c4 	addi	r4,sp,103
 804c594:	18c00044 	addi	r3,r3,1
 804c598:	113ffa1e 	bne	r2,r4,804c584 <___svfprintf_internal_r+0x1c10>
 804c59c:	d8801a44 	addi	r2,sp,105
 804c5a0:	d8c016c4 	addi	r3,sp,91
 804c5a4:	1505c83a 	sub	r2,r2,r20
 804c5a8:	1885883a 	add	r2,r3,r2
 804c5ac:	d8c01644 	addi	r3,sp,89
 804c5b0:	10c5c83a 	sub	r2,r2,r3
 804c5b4:	d8801015 	stw	r2,64(sp)
 804c5b8:	d8c00817 	ldw	r3,32(sp)
 804c5bc:	d9001017 	ldw	r4,64(sp)
 804c5c0:	18800088 	cmpgei	r2,r3,2
 804c5c4:	20eb883a 	add	r21,r4,r3
 804c5c8:	1000da26 	beq	r2,zero,804c934 <___svfprintf_internal_r+0x1fc0>
 804c5cc:	d8800c17 	ldw	r2,48(sp)
 804c5d0:	a8ab883a 	add	r21,r21,r2
 804c5d4:	a829883a 	mov	r20,r21
 804c5d8:	a800010e 	bge	r21,zero,804c5e0 <___svfprintf_internal_r+0x1c6c>
 804c5dc:	0029883a 	mov	r20,zero
 804c5e0:	d8000715 	stw	zero,28(sp)
 804c5e4:	003ef106 	br	804c1ac <___svfprintf_internal_r+0x1838>
 804c5e8:	800f883a 	mov	r7,r16
 804c5ec:	dc000e17 	ldw	r16,56(sp)
 804c5f0:	10800044 	addi	r2,r2,1
 804c5f4:	1d47883a 	add	r3,r3,r21
 804c5f8:	d8801b15 	stw	r2,108(sp)
 804c5fc:	b1c00015 	stw	r7,0(r22)
 804c600:	b5400115 	stw	r21,4(r22)
 804c604:	d8c01c15 	stw	r3,112(sp)
 804c608:	10800208 	cmpgei	r2,r2,8
 804c60c:	1000321e 	bne	r2,zero,804c6d8 <___svfprintf_internal_r+0x1d64>
 804c610:	b5800204 	addi	r22,r22,8
 804c614:	003d3606 	br	804baf0 <___svfprintf_internal_r+0x117c>
 804c618:	00800b44 	movi	r2,45
 804c61c:	d8801345 	stb	r2,77(sp)
 804c620:	03400b44 	movi	r13,45
 804c624:	003a4b06 	br	804af54 <___svfprintf_internal_r+0x5e0>
 804c628:	1520003c 	xorhi	r20,r2,32768
 804c62c:	00800b44 	movi	r2,45
 804c630:	d8800605 	stb	r2,24(sp)
 804c634:	003eab06 	br	804c0e4 <___svfprintf_internal_r+0x1770>
 804c638:	d9801a04 	addi	r6,sp,104
 804c63c:	900b883a 	mov	r5,r18
 804c640:	9809883a 	mov	r4,r19
 804c644:	804cc580 	call	804cc58 <__ssprint_r>
 804c648:	1039c91e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c64c:	d9401417 	ldw	r5,80(sp)
 804c650:	d8c01c17 	ldw	r3,112(sp)
 804c654:	dd802704 	addi	r22,sp,156
 804c658:	003e6e06 	br	804c014 <___svfprintf_internal_r+0x16a0>
 804c65c:	d9801a04 	addi	r6,sp,104
 804c660:	900b883a 	mov	r5,r18
 804c664:	9809883a 	mov	r4,r19
 804c668:	804cc580 	call	804cc58 <__ssprint_r>
 804c66c:	1039c01e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c670:	dd401417 	ldw	r21,80(sp)
 804c674:	d8c01c17 	ldw	r3,112(sp)
 804c678:	dd802704 	addi	r22,sp,156
 804c67c:	003d2b06 	br	804bb2c <___svfprintf_internal_r+0x11b8>
 804c680:	4805883a 	mov	r2,r9
 804c684:	003f7706 	br	804c464 <___svfprintf_internal_r+0x1af0>
 804c688:	05400184 	movi	r21,6
 804c68c:	003efd06 	br	804c284 <___svfprintf_internal_r+0x1910>
 804c690:	d9401345 	stb	r5,77(sp)
 804c694:	00396606 	br	804ac30 <___svfprintf_internal_r+0x2bc>
 804c698:	d9801a04 	addi	r6,sp,104
 804c69c:	900b883a 	mov	r5,r18
 804c6a0:	9809883a 	mov	r4,r19
 804c6a4:	804cc580 	call	804cc58 <__ssprint_r>
 804c6a8:	0039b106 	br	804ad70 <___svfprintf_internal_r+0x3fc>
 804c6ac:	d9801a04 	addi	r6,sp,104
 804c6b0:	900b883a 	mov	r5,r18
 804c6b4:	9809883a 	mov	r4,r19
 804c6b8:	804cc580 	call	804cc58 <__ssprint_r>
 804c6bc:	1039ac1e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c6c0:	d9401417 	ldw	r5,80(sp)
 804c6c4:	d8c01c17 	ldw	r3,112(sp)
 804c6c8:	d8801b17 	ldw	r2,108(sp)
 804c6cc:	dd802704 	addi	r22,sp,156
 804c6d0:	283e620e 	bge	r5,zero,804c05c <___svfprintf_internal_r+0x16e8>
 804c6d4:	003efd06 	br	804c2cc <___svfprintf_internal_r+0x1958>
 804c6d8:	d9801a04 	addi	r6,sp,104
 804c6dc:	900b883a 	mov	r5,r18
 804c6e0:	9809883a 	mov	r4,r19
 804c6e4:	804cc580 	call	804cc58 <__ssprint_r>
 804c6e8:	1039a11e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c6ec:	d8c01c17 	ldw	r3,112(sp)
 804c6f0:	dd802704 	addi	r22,sp,156
 804c6f4:	003cfe06 	br	804baf0 <___svfprintf_internal_r+0x117c>
 804c6f8:	db000417 	ldw	r12,16(sp)
 804c6fc:	003c8606 	br	804b918 <___svfprintf_internal_r+0xfa4>
 804c700:	05400044 	movi	r21,1
 804c704:	a8abc83a 	sub	r21,r21,r2
 804c708:	00800b44 	movi	r2,45
 804c70c:	d8801685 	stb	r2,90(sp)
 804c710:	003f7a06 	br	804c4fc <___svfprintf_internal_r+0x1b88>
 804c714:	d8801804 	addi	r2,sp,96
 804c718:	d8800315 	stw	r2,12(sp)
 804c71c:	d9400917 	ldw	r5,36(sp)
 804c720:	d8801504 	addi	r2,sp,84
 804c724:	40c00044 	addi	r3,r8,1
 804c728:	d8800215 	stw	r2,8(sp)
 804c72c:	d8801404 	addi	r2,sp,80
 804c730:	d8c00015 	stw	r3,0(sp)
 804c734:	d8800115 	stw	r2,4(sp)
 804c738:	01c00084 	movi	r7,2
 804c73c:	a00d883a 	mov	r6,r20
 804c740:	9809883a 	mov	r4,r19
 804c744:	db001115 	stw	r12,68(sp)
 804c748:	da000815 	stw	r8,32(sp)
 804c74c:	d8c00715 	stw	r3,28(sp)
 804c750:	80063740 	call	8006374 <_dtoa_r>
 804c754:	d8c00717 	ldw	r3,28(sp)
 804c758:	da000817 	ldw	r8,32(sp)
 804c75c:	db001117 	ldw	r12,68(sp)
 804c760:	1023883a 	mov	r17,r2
 804c764:	e08011d8 	cmpnei	r2,fp,71
 804c768:	103e7926 	beq	r2,zero,804c150 <___svfprintf_internal_r+0x17dc>
 804c76c:	88d3883a 	add	r9,r17,r3
 804c770:	003f2806 	br	804c414 <___svfprintf_internal_r+0x1aa0>
 804c774:	1000821e 	bne	r2,zero,804c980 <___svfprintf_internal_r+0x200c>
 804c778:	05000044 	movi	r20,1
 804c77c:	05400044 	movi	r21,1
 804c780:	003e8a06 	br	804c1ac <___svfprintf_internal_r+0x1838>
 804c784:	d8800e17 	ldw	r2,56(sp)
 804c788:	db401343 	ldbu	r13,77(sp)
 804c78c:	0011883a 	mov	r8,zero
 804c790:	d8800615 	stw	r2,24(sp)
 804c794:	003ac606 	br	804b2b0 <___svfprintf_internal_r+0x93c>
 804c798:	d9801a04 	addi	r6,sp,104
 804c79c:	900b883a 	mov	r5,r18
 804c7a0:	9809883a 	mov	r4,r19
 804c7a4:	804cc580 	call	804cc58 <__ssprint_r>
 804c7a8:	1039711e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c7ac:	d8c01c17 	ldw	r3,112(sp)
 804c7b0:	dd802704 	addi	r22,sp,156
 804c7b4:	a83ccb0e 	bge	r21,zero,804bae4 <___svfprintf_internal_r+0x1170>
 804c7b8:	003db906 	br	804bea0 <___svfprintf_internal_r+0x152c>
 804c7bc:	d9801a04 	addi	r6,sp,104
 804c7c0:	900b883a 	mov	r5,r18
 804c7c4:	9809883a 	mov	r4,r19
 804c7c8:	804cc580 	call	804cc58 <__ssprint_r>
 804c7cc:	1039681e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c7d0:	d8801417 	ldw	r2,80(sp)
 804c7d4:	d9000817 	ldw	r4,32(sp)
 804c7d8:	d8c01c17 	ldw	r3,112(sp)
 804c7dc:	dd802704 	addi	r22,sp,156
 804c7e0:	2085c83a 	sub	r2,r4,r2
 804c7e4:	003ce506 	br	804bb7c <___svfprintf_internal_r+0x1208>
 804c7e8:	02000184 	movi	r8,6
 804c7ec:	003e3706 	br	804c0cc <___svfprintf_internal_r+0x1758>
 804c7f0:	4029883a 	mov	r20,r8
 804c7f4:	d8c00615 	stw	r3,24(sp)
 804c7f8:	402b883a 	mov	r21,r8
 804c7fc:	00391206 	br	804ac48 <___svfprintf_internal_r+0x2d4>
 804c800:	d8800817 	ldw	r2,32(sp)
 804c804:	d8c00c17 	ldw	r3,48(sp)
 804c808:	10eb883a 	add	r21,r2,r3
 804c80c:	d8800717 	ldw	r2,28(sp)
 804c810:	00800316 	blt	zero,r2,804c820 <___svfprintf_internal_r+0x1eac>
 804c814:	d8800717 	ldw	r2,28(sp)
 804c818:	a8abc83a 	sub	r21,r21,r2
 804c81c:	ad400044 	addi	r21,r21,1
 804c820:	a829883a 	mov	r20,r21
 804c824:	a8003e16 	blt	r21,zero,804c920 <___svfprintf_internal_r+0x1fac>
 804c828:	070019c4 	movi	fp,103
 804c82c:	003e5f06 	br	804c1ac <___svfprintf_internal_r+0x1838>
 804c830:	d9401345 	stb	r5,77(sp)
 804c834:	00399d06 	br	804aeac <___svfprintf_internal_r+0x538>
 804c838:	d9401345 	stb	r5,77(sp)
 804c83c:	003a4a06 	br	804b168 <___svfprintf_internal_r+0x7f4>
 804c840:	d9401345 	stb	r5,77(sp)
 804c844:	003b0a06 	br	804b470 <___svfprintf_internal_r+0xafc>
 804c848:	d9401345 	stb	r5,77(sp)
 804c84c:	003ad606 	br	804b3a8 <___svfprintf_internal_r+0xa34>
 804c850:	d9401345 	stb	r5,77(sp)
 804c854:	003a5b06 	br	804b1c4 <___svfprintf_internal_r+0x850>
 804c858:	d9401345 	stb	r5,77(sp)
 804c85c:	003a1406 	br	804b0b0 <___svfprintf_internal_r+0x73c>
 804c860:	900f883a 	mov	r7,r18
 804c864:	8025883a 	mov	r18,r16
 804c868:	dc000717 	ldw	r16,28(sp)
 804c86c:	10800044 	addi	r2,r2,1
 804c870:	1f07883a 	add	r3,r3,fp
 804c874:	b1c00015 	stw	r7,0(r22)
 804c878:	b7000115 	stw	fp,4(r22)
 804c87c:	d8c01c15 	stw	r3,112(sp)
 804c880:	d8801b15 	stw	r2,108(sp)
 804c884:	11000208 	cmpgei	r4,r2,8
 804c888:	203df326 	beq	r4,zero,804c058 <___svfprintf_internal_r+0x16e4>
 804c88c:	d9801a04 	addi	r6,sp,104
 804c890:	900b883a 	mov	r5,r18
 804c894:	9809883a 	mov	r4,r19
 804c898:	804cc580 	call	804cc58 <__ssprint_r>
 804c89c:	1039341e 	bne	r2,zero,804ad70 <___svfprintf_internal_r+0x3fc>
 804c8a0:	d8c01c17 	ldw	r3,112(sp)
 804c8a4:	d8801b17 	ldw	r2,108(sp)
 804c8a8:	dd802704 	addi	r22,sp,156
 804c8ac:	003deb06 	br	804c05c <___svfprintf_internal_r+0x16e8>
 804c8b0:	d9000917 	ldw	r4,36(sp)
 804c8b4:	000d883a 	mov	r6,zero
 804c8b8:	000f883a 	mov	r7,zero
 804c8bc:	a00b883a 	mov	r5,r20
 804c8c0:	d8c01115 	stw	r3,68(sp)
 804c8c4:	da000815 	stw	r8,32(sp)
 804c8c8:	db000715 	stw	r12,28(sp)
 804c8cc:	800f4c80 	call	800f4c8 <__eqdf2>
 804c8d0:	db000717 	ldw	r12,28(sp)
 804c8d4:	da000817 	ldw	r8,32(sp)
 804c8d8:	d8c01117 	ldw	r3,68(sp)
 804c8dc:	103ecb26 	beq	r2,zero,804c40c <___svfprintf_internal_r+0x1a98>
 804c8e0:	00800044 	movi	r2,1
 804c8e4:	1205c83a 	sub	r2,r2,r8
 804c8e8:	d8801415 	stw	r2,80(sp)
 804c8ec:	003ec806 	br	804c410 <___svfprintf_internal_r+0x1a9c>
 804c8f0:	00800c04 	movi	r2,48
 804c8f4:	ad400c04 	addi	r21,r21,48
 804c8f8:	d88016c5 	stb	r2,91(sp)
 804c8fc:	00800104 	movi	r2,4
 804c900:	dd401705 	stb	r21,92(sp)
 804c904:	d8801015 	stw	r2,64(sp)
 804c908:	003f2b06 	br	804c5b8 <___svfprintf_internal_r+0x1c44>
 804c90c:	d8800717 	ldw	r2,28(sp)
 804c910:	d8c00c17 	ldw	r3,48(sp)
 804c914:	10eb883a 	add	r21,r2,r3
 804c918:	a829883a 	mov	r20,r21
 804c91c:	a83fc20e 	bge	r21,zero,804c828 <___svfprintf_internal_r+0x1eb4>
 804c920:	0029883a 	mov	r20,zero
 804c924:	003fc006 	br	804c828 <___svfprintf_internal_r+0x1eb4>
 804c928:	00bfffc4 	movi	r2,-1
 804c92c:	d8800515 	stw	r2,20(sp)
 804c930:	00391206 	br	804ad7c <___svfprintf_internal_r+0x408>
 804c934:	6080004c 	andi	r2,r12,1
 804c938:	d8800715 	stw	r2,28(sp)
 804c93c:	103f231e 	bne	r2,zero,804c5cc <___svfprintf_internal_r+0x1c58>
 804c940:	a829883a 	mov	r20,r21
 804c944:	a83e190e 	bge	r21,zero,804c1ac <___svfprintf_internal_r+0x1838>
 804c948:	0029883a 	mov	r20,zero
 804c94c:	003e1706 	br	804c1ac <___svfprintf_internal_r+0x1838>
 804c950:	d8800a17 	ldw	r2,40(sp)
 804c954:	10001316 	blt	r2,zero,804c9a4 <___svfprintf_internal_r+0x2030>
 804c958:	db401343 	ldbu	r13,77(sp)
 804c95c:	e0801210 	cmplti	r2,fp,72
 804c960:	10000d1e 	bne	r2,zero,804c998 <___svfprintf_internal_r+0x2024>
 804c964:	04420174 	movhi	r17,2053
 804c968:	8c7e6004 	addi	r17,r17,-1664
 804c96c:	00397d06 	br	804af64 <___svfprintf_internal_r+0x5f0>
 804c970:	d8800c17 	ldw	r2,48(sp)
 804c974:	18ab883a 	add	r21,r3,r2
 804c978:	aa2b883a 	add	r21,r21,r8
 804c97c:	003ff006 	br	804c940 <___svfprintf_internal_r+0x1fcc>
 804c980:	d8800c17 	ldw	r2,48(sp)
 804c984:	15400044 	addi	r21,r2,1
 804c988:	aa2b883a 	add	r21,r21,r8
 804c98c:	003fec06 	br	804c940 <___svfprintf_internal_r+0x1fcc>
 804c990:	8025883a 	mov	r18,r16
 804c994:	0038f606 	br	804ad70 <___svfprintf_internal_r+0x3fc>
 804c998:	04420174 	movhi	r17,2053
 804c99c:	8c7e5f04 	addi	r17,r17,-1668
 804c9a0:	00397006 	br	804af64 <___svfprintf_internal_r+0x5f0>
 804c9a4:	00800b44 	movi	r2,45
 804c9a8:	d8801345 	stb	r2,77(sp)
 804c9ac:	03400b44 	movi	r13,45
 804c9b0:	003fea06 	br	804c95c <___svfprintf_internal_r+0x1fe8>
 804c9b4:	b005883a 	mov	r2,r22
 804c9b8:	39d04904 	addi	r7,r7,16676
 804c9bc:	003e6706 	br	804c35c <___svfprintf_internal_r+0x19e8>
 804c9c0:	d8800617 	ldw	r2,24(sp)
 804c9c4:	12000017 	ldw	r8,0(r2)
 804c9c8:	10800104 	addi	r2,r2,4
 804c9cc:	4000010e 	bge	r8,zero,804c9d4 <___svfprintf_internal_r+0x2060>
 804c9d0:	023fffc4 	movi	r8,-1
 804c9d4:	bf000043 	ldbu	fp,1(r23)
 804c9d8:	d8800615 	stw	r2,24(sp)
 804c9dc:	182f883a 	mov	r23,r3
 804c9e0:	e2c03fcc 	andi	r11,fp,255
 804c9e4:	5ac0201c 	xori	r11,r11,128
 804c9e8:	5affe004 	addi	r11,r11,-128
 804c9ec:	00381f06 	br	804aa6c <___svfprintf_internal_r+0xf8>
 804c9f0:	00800084 	movi	r2,2
 804c9f4:	d8801015 	stw	r2,64(sp)
 804c9f8:	003eef06 	br	804c5b8 <___svfprintf_internal_r+0x1c44>
 804c9fc:	00800304 	movi	r2,12
 804ca00:	98800015 	stw	r2,0(r19)
 804ca04:	00bfffc4 	movi	r2,-1
 804ca08:	d8800515 	stw	r2,20(sp)
 804ca0c:	0038db06 	br	804ad7c <___svfprintf_internal_r+0x408>

0804ca10 <vprintf>:
 804ca10:	00820174 	movhi	r2,2053
 804ca14:	1098e017 	ldw	r2,25472(r2)
 804ca18:	280f883a 	mov	r7,r5
 804ca1c:	200d883a 	mov	r6,r4
 804ca20:	11400217 	ldw	r5,8(r2)
 804ca24:	1009883a 	mov	r4,r2
 804ca28:	804defc1 	jmpi	804defc <_vfprintf_r>

0804ca2c <_vprintf_r>:
 804ca2c:	2805883a 	mov	r2,r5
 804ca30:	21400217 	ldw	r5,8(r4)
 804ca34:	300f883a 	mov	r7,r6
 804ca38:	100d883a 	mov	r6,r2
 804ca3c:	804defc1 	jmpi	804defc <_vfprintf_r>

0804ca40 <_vsprintf_r>:
 804ca40:	deffe504 	addi	sp,sp,-108
 804ca44:	00a00034 	movhi	r2,32768
 804ca48:	023ffff4 	movhi	r8,65535
 804ca4c:	2807883a 	mov	r3,r5
 804ca50:	10bfffc4 	addi	r2,r2,-1
 804ca54:	42008204 	addi	r8,r8,520
 804ca58:	d80b883a 	mov	r5,sp
 804ca5c:	dfc01a15 	stw	ra,104(sp)
 804ca60:	d8c00015 	stw	r3,0(sp)
 804ca64:	d8c00415 	stw	r3,16(sp)
 804ca68:	d8800515 	stw	r2,20(sp)
 804ca6c:	d8800215 	stw	r2,8(sp)
 804ca70:	da000315 	stw	r8,12(sp)
 804ca74:	804a9740 	call	804a974 <___svfprintf_internal_r>
 804ca78:	d8c00017 	ldw	r3,0(sp)
 804ca7c:	18000005 	stb	zero,0(r3)
 804ca80:	dfc01a17 	ldw	ra,104(sp)
 804ca84:	dec01b04 	addi	sp,sp,108
 804ca88:	f800283a 	ret

0804ca8c <vsprintf>:
 804ca8c:	00c20174 	movhi	r3,2053
 804ca90:	2005883a 	mov	r2,r4
 804ca94:	1918e017 	ldw	r4,25472(r3)
 804ca98:	300f883a 	mov	r7,r6
 804ca9c:	280d883a 	mov	r6,r5
 804caa0:	100b883a 	mov	r5,r2
 804caa4:	804ca401 	jmpi	804ca40 <_vsprintf_r>

0804caa8 <__register_exitproc>:
 804caa8:	00820174 	movhi	r2,2053
 804caac:	10d8df17 	ldw	r3,25468(r2)
 804cab0:	18805217 	ldw	r2,328(r3)
 804cab4:	10001726 	beq	r2,zero,804cb14 <__register_exitproc+0x6c>
 804cab8:	10c00117 	ldw	r3,4(r2)
 804cabc:	1a000808 	cmpgei	r8,r3,32
 804cac0:	40001b1e 	bne	r8,zero,804cb30 <__register_exitproc+0x88>
 804cac4:	20000b26 	beq	r4,zero,804caf4 <__register_exitproc+0x4c>
 804cac8:	181090ba 	slli	r8,r3,2
 804cacc:	02400044 	movi	r9,1
 804cad0:	48d2983a 	sll	r9,r9,r3
 804cad4:	1211883a 	add	r8,r2,r8
 804cad8:	41802215 	stw	r6,136(r8)
 804cadc:	11806217 	ldw	r6,392(r2)
 804cae0:	21000098 	cmpnei	r4,r4,2
 804cae4:	324cb03a 	or	r6,r6,r9
 804cae8:	11806215 	stw	r6,392(r2)
 804caec:	41c04215 	stw	r7,264(r8)
 804caf0:	20000b26 	beq	r4,zero,804cb20 <__register_exitproc+0x78>
 804caf4:	19000084 	addi	r4,r3,2
 804caf8:	200890ba 	slli	r4,r4,2
 804cafc:	18c00044 	addi	r3,r3,1
 804cb00:	10c00115 	stw	r3,4(r2)
 804cb04:	1105883a 	add	r2,r2,r4
 804cb08:	11400015 	stw	r5,0(r2)
 804cb0c:	0005883a 	mov	r2,zero
 804cb10:	f800283a 	ret
 804cb14:	18805304 	addi	r2,r3,332
 804cb18:	18805215 	stw	r2,328(r3)
 804cb1c:	003fe606 	br	804cab8 <__register_exitproc+0x10>
 804cb20:	11006317 	ldw	r4,396(r2)
 804cb24:	2252b03a 	or	r9,r4,r9
 804cb28:	12406315 	stw	r9,396(r2)
 804cb2c:	003ff106 	br	804caf4 <__register_exitproc+0x4c>
 804cb30:	00bfffc4 	movi	r2,-1
 804cb34:	f800283a 	ret

0804cb38 <__call_exitprocs>:
 804cb38:	defff704 	addi	sp,sp,-36
 804cb3c:	00820174 	movhi	r2,2053
 804cb40:	dcc00315 	stw	r19,12(sp)
 804cb44:	14d8df17 	ldw	r19,25468(r2)
 804cb48:	dc800215 	stw	r18,8(sp)
 804cb4c:	dfc00815 	stw	ra,32(sp)
 804cb50:	9c805217 	ldw	r18,328(r19)
 804cb54:	ddc00715 	stw	r23,28(sp)
 804cb58:	dd800615 	stw	r22,24(sp)
 804cb5c:	dd400515 	stw	r21,20(sp)
 804cb60:	dd000415 	stw	r20,16(sp)
 804cb64:	dc400115 	stw	r17,4(sp)
 804cb68:	dc000015 	stw	r16,0(sp)
 804cb6c:	90001026 	beq	r18,zero,804cbb0 <__call_exitprocs+0x78>
 804cb70:	202b883a 	mov	r21,r4
 804cb74:	282d883a 	mov	r22,r5
 804cb78:	05000044 	movi	r20,1
 804cb7c:	94000117 	ldw	r16,4(r18)
 804cb80:	847fffc4 	addi	r17,r16,-1
 804cb84:	88000a16 	blt	r17,zero,804cbb0 <__call_exitprocs+0x78>
 804cb88:	84000044 	addi	r16,r16,1
 804cb8c:	802090ba 	slli	r16,r16,2
 804cb90:	9421883a 	add	r16,r18,r16
 804cb94:	b0001126 	beq	r22,zero,804cbdc <__call_exitprocs+0xa4>
 804cb98:	80804017 	ldw	r2,256(r16)
 804cb9c:	15800f26 	beq	r2,r22,804cbdc <__call_exitprocs+0xa4>
 804cba0:	8c7fffc4 	addi	r17,r17,-1
 804cba4:	88bfffd8 	cmpnei	r2,r17,-1
 804cba8:	843fff04 	addi	r16,r16,-4
 804cbac:	103ff91e 	bne	r2,zero,804cb94 <__call_exitprocs+0x5c>
 804cbb0:	dfc00817 	ldw	ra,32(sp)
 804cbb4:	ddc00717 	ldw	r23,28(sp)
 804cbb8:	dd800617 	ldw	r22,24(sp)
 804cbbc:	dd400517 	ldw	r21,20(sp)
 804cbc0:	dd000417 	ldw	r20,16(sp)
 804cbc4:	dcc00317 	ldw	r19,12(sp)
 804cbc8:	dc800217 	ldw	r18,8(sp)
 804cbcc:	dc400117 	ldw	r17,4(sp)
 804cbd0:	dc000017 	ldw	r16,0(sp)
 804cbd4:	dec00904 	addi	sp,sp,36
 804cbd8:	f800283a 	ret
 804cbdc:	90800117 	ldw	r2,4(r18)
 804cbe0:	81800017 	ldw	r6,0(r16)
 804cbe4:	10bfffc4 	addi	r2,r2,-1
 804cbe8:	14401726 	beq	r2,r17,804cc48 <__call_exitprocs+0x110>
 804cbec:	80000015 	stw	zero,0(r16)
 804cbf0:	303feb26 	beq	r6,zero,804cba0 <__call_exitprocs+0x68>
 804cbf4:	a446983a 	sll	r3,r20,r17
 804cbf8:	90806217 	ldw	r2,392(r18)
 804cbfc:	95c00117 	ldw	r23,4(r18)
 804cc00:	1884703a 	and	r2,r3,r2
 804cc04:	1000081e 	bne	r2,zero,804cc28 <__call_exitprocs+0xf0>
 804cc08:	303ee83a 	callr	r6
 804cc0c:	90c00117 	ldw	r3,4(r18)
 804cc10:	98805217 	ldw	r2,328(r19)
 804cc14:	1dc0011e 	bne	r3,r23,804cc1c <__call_exitprocs+0xe4>
 804cc18:	90bfe126 	beq	r18,r2,804cba0 <__call_exitprocs+0x68>
 804cc1c:	103fe426 	beq	r2,zero,804cbb0 <__call_exitprocs+0x78>
 804cc20:	1025883a 	mov	r18,r2
 804cc24:	003fd506 	br	804cb7c <__call_exitprocs+0x44>
 804cc28:	90806317 	ldw	r2,396(r18)
 804cc2c:	81002017 	ldw	r4,128(r16)
 804cc30:	1886703a 	and	r3,r3,r2
 804cc34:	1800061e 	bne	r3,zero,804cc50 <__call_exitprocs+0x118>
 804cc38:	200b883a 	mov	r5,r4
 804cc3c:	a809883a 	mov	r4,r21
 804cc40:	303ee83a 	callr	r6
 804cc44:	003ff106 	br	804cc0c <__call_exitprocs+0xd4>
 804cc48:	94400115 	stw	r17,4(r18)
 804cc4c:	003fe806 	br	804cbf0 <__call_exitprocs+0xb8>
 804cc50:	303ee83a 	callr	r6
 804cc54:	003fed06 	br	804cc0c <__call_exitprocs+0xd4>

0804cc58 <__ssprint_r>:
 804cc58:	30800217 	ldw	r2,8(r6)
 804cc5c:	defff604 	addi	sp,sp,-40
 804cc60:	dcc00315 	stw	r19,12(sp)
 804cc64:	dfc00915 	stw	ra,36(sp)
 804cc68:	df000815 	stw	fp,32(sp)
 804cc6c:	ddc00715 	stw	r23,28(sp)
 804cc70:	dd800615 	stw	r22,24(sp)
 804cc74:	dd400515 	stw	r21,20(sp)
 804cc78:	dd000415 	stw	r20,16(sp)
 804cc7c:	dc800215 	stw	r18,8(sp)
 804cc80:	dc400115 	stw	r17,4(sp)
 804cc84:	dc000015 	stw	r16,0(sp)
 804cc88:	3027883a 	mov	r19,r6
 804cc8c:	10005426 	beq	r2,zero,804cde0 <__ssprint_r+0x188>
 804cc90:	2029883a 	mov	r20,r4
 804cc94:	35800017 	ldw	r22,0(r6)
 804cc98:	29000017 	ldw	r4,0(r5)
 804cc9c:	2c400217 	ldw	r17,8(r5)
 804cca0:	2821883a 	mov	r16,r5
 804cca4:	057edfc4 	movi	r21,-1153
 804cca8:	00003406 	br	804cd7c <__ssprint_r+0x124>
 804ccac:	8080030b 	ldhu	r2,12(r16)
 804ccb0:	10c1200c 	andi	r3,r2,1152
 804ccb4:	18002426 	beq	r3,zero,804cd48 <__ssprint_r+0xf0>
 804ccb8:	81800517 	ldw	r6,20(r16)
 804ccbc:	81400417 	ldw	r5,16(r16)
 804ccc0:	90c00044 	addi	r3,r18,1
 804ccc4:	318000e4 	muli	r6,r6,3
 804ccc8:	216fc83a 	sub	r23,r4,r5
 804cccc:	1dc7883a 	add	r3,r3,r23
 804ccd0:	3022d7fa 	srli	r17,r6,31
 804ccd4:	89a3883a 	add	r17,r17,r6
 804ccd8:	8823d07a 	srai	r17,r17,1
 804ccdc:	880d883a 	mov	r6,r17
 804cce0:	88c0022e 	bgeu	r17,r3,804ccec <__ssprint_r+0x94>
 804cce4:	1823883a 	mov	r17,r3
 804cce8:	180d883a 	mov	r6,r3
 804ccec:	1081000c 	andi	r2,r2,1024
 804ccf0:	10002b26 	beq	r2,zero,804cda0 <__ssprint_r+0x148>
 804ccf4:	300b883a 	mov	r5,r6
 804ccf8:	a009883a 	mov	r4,r20
 804ccfc:	8008e340 	call	8008e34 <_malloc_r>
 804cd00:	10002e26 	beq	r2,zero,804cdbc <__ssprint_r+0x164>
 804cd04:	81400417 	ldw	r5,16(r16)
 804cd08:	b80d883a 	mov	r6,r23
 804cd0c:	1009883a 	mov	r4,r2
 804cd10:	8002ea40 	call	8002ea4 <memcpy>
 804cd14:	1007883a 	mov	r3,r2
 804cd18:	8080030b 	ldhu	r2,12(r16)
 804cd1c:	1544703a 	and	r2,r2,r21
 804cd20:	10802014 	ori	r2,r2,128
 804cd24:	8080030d 	sth	r2,12(r16)
 804cd28:	1dc9883a 	add	r4,r3,r23
 804cd2c:	8defc83a 	sub	r23,r17,r23
 804cd30:	84400515 	stw	r17,20(r16)
 804cd34:	85c00215 	stw	r23,8(r16)
 804cd38:	80c00415 	stw	r3,16(r16)
 804cd3c:	81000015 	stw	r4,0(r16)
 804cd40:	9023883a 	mov	r17,r18
 804cd44:	902f883a 	mov	r23,r18
 804cd48:	b80d883a 	mov	r6,r23
 804cd4c:	e00b883a 	mov	r5,fp
 804cd50:	80096e80 	call	80096e8 <memmove>
 804cd54:	80c00217 	ldw	r3,8(r16)
 804cd58:	81000017 	ldw	r4,0(r16)
 804cd5c:	98800217 	ldw	r2,8(r19)
 804cd60:	1c63c83a 	sub	r17,r3,r17
 804cd64:	25c9883a 	add	r4,r4,r23
 804cd68:	84400215 	stw	r17,8(r16)
 804cd6c:	81000015 	stw	r4,0(r16)
 804cd70:	14a5c83a 	sub	r18,r2,r18
 804cd74:	9c800215 	stw	r18,8(r19)
 804cd78:	90001926 	beq	r18,zero,804cde0 <__ssprint_r+0x188>
 804cd7c:	b4800117 	ldw	r18,4(r22)
 804cd80:	b7000017 	ldw	fp,0(r22)
 804cd84:	882f883a 	mov	r23,r17
 804cd88:	b5800204 	addi	r22,r22,8
 804cd8c:	903ffb26 	beq	r18,zero,804cd7c <__ssprint_r+0x124>
 804cd90:	947fc62e 	bgeu	r18,r17,804ccac <__ssprint_r+0x54>
 804cd94:	9023883a 	mov	r17,r18
 804cd98:	902f883a 	mov	r23,r18
 804cd9c:	003fea06 	br	804cd48 <__ssprint_r+0xf0>
 804cda0:	a009883a 	mov	r4,r20
 804cda4:	800aa5c0 	call	800aa5c <_realloc_r>
 804cda8:	1007883a 	mov	r3,r2
 804cdac:	103fde1e 	bne	r2,zero,804cd28 <__ssprint_r+0xd0>
 804cdb0:	81400417 	ldw	r5,16(r16)
 804cdb4:	a009883a 	mov	r4,r20
 804cdb8:	80082380 	call	8008238 <_free_r>
 804cdbc:	80c0030b 	ldhu	r3,12(r16)
 804cdc0:	00800304 	movi	r2,12
 804cdc4:	a0800015 	stw	r2,0(r20)
 804cdc8:	18c01014 	ori	r3,r3,64
 804cdcc:	80c0030d 	sth	r3,12(r16)
 804cdd0:	00bfffc4 	movi	r2,-1
 804cdd4:	98000215 	stw	zero,8(r19)
 804cdd8:	98000115 	stw	zero,4(r19)
 804cddc:	00000206 	br	804cde8 <__ssprint_r+0x190>
 804cde0:	98000115 	stw	zero,4(r19)
 804cde4:	0005883a 	mov	r2,zero
 804cde8:	dfc00917 	ldw	ra,36(sp)
 804cdec:	df000817 	ldw	fp,32(sp)
 804cdf0:	ddc00717 	ldw	r23,28(sp)
 804cdf4:	dd800617 	ldw	r22,24(sp)
 804cdf8:	dd400517 	ldw	r21,20(sp)
 804cdfc:	dd000417 	ldw	r20,16(sp)
 804ce00:	dcc00317 	ldw	r19,12(sp)
 804ce04:	dc800217 	ldw	r18,8(sp)
 804ce08:	dc400117 	ldw	r17,4(sp)
 804ce0c:	dc000017 	ldw	r16,0(sp)
 804ce10:	dec00a04 	addi	sp,sp,40
 804ce14:	f800283a 	ret

0804ce18 <___svfiprintf_internal_r>:
 804ce18:	2880030b 	ldhu	r2,12(r5)
 804ce1c:	deffd004 	addi	sp,sp,-192
 804ce20:	df002e15 	stw	fp,184(sp)
 804ce24:	dd402b15 	stw	r21,172(sp)
 804ce28:	dd002a15 	stw	r20,168(sp)
 804ce2c:	dfc02f15 	stw	ra,188(sp)
 804ce30:	ddc02d15 	stw	r23,180(sp)
 804ce34:	dd802c15 	stw	r22,176(sp)
 804ce38:	dcc02915 	stw	r19,164(sp)
 804ce3c:	dc802815 	stw	r18,160(sp)
 804ce40:	dc402715 	stw	r17,156(sp)
 804ce44:	dc002615 	stw	r16,152(sp)
 804ce48:	1080200c 	andi	r2,r2,128
 804ce4c:	d9c00315 	stw	r7,12(sp)
 804ce50:	2829883a 	mov	r20,r5
 804ce54:	202b883a 	mov	r21,r4
 804ce58:	3039883a 	mov	fp,r6
 804ce5c:	10000226 	beq	r2,zero,804ce68 <___svfiprintf_internal_r+0x50>
 804ce60:	28800417 	ldw	r2,16(r5)
 804ce64:	10039f26 	beq	r2,zero,804dce4 <___svfiprintf_internal_r+0xecc>
 804ce68:	dc801604 	addi	r18,sp,88
 804ce6c:	dc800915 	stw	r18,36(sp)
 804ce70:	d8000b15 	stw	zero,44(sp)
 804ce74:	d8000a15 	stw	zero,40(sp)
 804ce78:	9011883a 	mov	r8,r18
 804ce7c:	d8000415 	stw	zero,16(sp)
 804ce80:	d8000015 	stw	zero,0(sp)
 804ce84:	e0800007 	ldb	r2,0(fp)
 804ce88:	1000f226 	beq	r2,zero,804d254 <___svfiprintf_internal_r+0x43c>
 804ce8c:	e021883a 	mov	r16,fp
 804ce90:	00000306 	br	804cea0 <___svfiprintf_internal_r+0x88>
 804ce94:	80800047 	ldb	r2,1(r16)
 804ce98:	84000044 	addi	r16,r16,1
 804ce9c:	10010926 	beq	r2,zero,804d2c4 <___svfiprintf_internal_r+0x4ac>
 804cea0:	10800958 	cmpnei	r2,r2,37
 804cea4:	103ffb1e 	bne	r2,zero,804ce94 <___svfiprintf_internal_r+0x7c>
 804cea8:	8723c83a 	sub	r17,r16,fp
 804ceac:	8701071e 	bne	r16,fp,804d2cc <___svfiprintf_internal_r+0x4b4>
 804ceb0:	80800003 	ldbu	r2,0(r16)
 804ceb4:	10803fcc 	andi	r2,r2,255
 804ceb8:	1080201c 	xori	r2,r2,128
 804cebc:	10bfe004 	addi	r2,r2,-128
 804cec0:	1000e426 	beq	r2,zero,804d254 <___svfiprintf_internal_r+0x43c>
 804cec4:	80800047 	ldb	r2,1(r16)
 804cec8:	87000044 	addi	fp,r16,1
 804cecc:	d8000845 	stb	zero,33(sp)
 804ced0:	000b883a 	mov	r5,zero
 804ced4:	000d883a 	mov	r6,zero
 804ced8:	027fffc4 	movi	r9,-1
 804cedc:	0021883a 	mov	r16,zero
 804cee0:	0019883a 	mov	r12,zero
 804cee4:	e7000044 	addi	fp,fp,1
 804cee8:	10fff804 	addi	r3,r2,-32
 804ceec:	19001668 	cmpgeui	r4,r3,89
 804cef0:	20006a1e 	bne	r4,zero,804d09c <___svfiprintf_internal_r+0x284>
 804cef4:	180690ba 	slli	r3,r3,2
 804cef8:	01020174 	movhi	r4,2053
 804cefc:	1909883a 	add	r4,r3,r4
 804cf00:	20f3c217 	ldw	r3,-12536(r4)
 804cf04:	1800683a 	jmp	r3
 804cf08:	0804d724 	muli	zero,at,4956
 804cf0c:	0804d09c 	xori	zero,at,4930
 804cf10:	0804d09c 	xori	zero,at,4930
 804cf14:	0804d718 	cmpnei	zero,at,4956
 804cf18:	0804d09c 	xori	zero,at,4930
 804cf1c:	0804d09c 	xori	zero,at,4930
 804cf20:	0804d09c 	xori	zero,at,4930
 804cf24:	0804d09c 	xori	zero,at,4930
 804cf28:	0804d09c 	xori	zero,at,4930
 804cf2c:	0804d09c 	xori	zero,at,4930
 804cf30:	0804d6f0 	cmpltui	zero,at,4955
 804cf34:	0804d6e0 	cmpeqi	zero,at,4955
 804cf38:	0804d09c 	xori	zero,at,4930
 804cf3c:	0804d6c8 	cmpgei	zero,at,4955
 804cf40:	0804d684 	addi	zero,at,4954
 804cf44:	0804d09c 	xori	zero,at,4930
 804cf48:	0804d678 	rdprs	zero,at,4953
 804cf4c:	0804d06c 	andhi	zero,at,4929
 804cf50:	0804d06c 	andhi	zero,at,4929
 804cf54:	0804d06c 	andhi	zero,at,4929
 804cf58:	0804d06c 	andhi	zero,at,4929
 804cf5c:	0804d06c 	andhi	zero,at,4929
 804cf60:	0804d06c 	andhi	zero,at,4929
 804cf64:	0804d06c 	andhi	zero,at,4929
 804cf68:	0804d06c 	andhi	zero,at,4929
 804cf6c:	0804d06c 	andhi	zero,at,4929
 804cf70:	0804d09c 	xori	zero,at,4930
 804cf74:	0804d09c 	xori	zero,at,4930
 804cf78:	0804d09c 	xori	zero,at,4930
 804cf7c:	0804d09c 	xori	zero,at,4930
 804cf80:	0804d09c 	xori	zero,at,4930
 804cf84:	0804d09c 	xori	zero,at,4930
 804cf88:	0804d09c 	xori	zero,at,4930
 804cf8c:	0804d09c 	xori	zero,at,4930
 804cf90:	0804d09c 	xori	zero,at,4930
 804cf94:	0804d09c 	xori	zero,at,4930
 804cf98:	0804d594 	ori	zero,at,4950
 804cf9c:	0804d09c 	xori	zero,at,4930
 804cfa0:	0804d09c 	xori	zero,at,4930
 804cfa4:	0804d09c 	xori	zero,at,4930
 804cfa8:	0804d09c 	xori	zero,at,4930
 804cfac:	0804d09c 	xori	zero,at,4930
 804cfb0:	0804d09c 	xori	zero,at,4930
 804cfb4:	0804d09c 	xori	zero,at,4930
 804cfb8:	0804d09c 	xori	zero,at,4930
 804cfbc:	0804d09c 	xori	zero,at,4930
 804cfc0:	0804d09c 	xori	zero,at,4930
 804cfc4:	0804d29c 	xori	zero,at,4938
 804cfc8:	0804d09c 	xori	zero,at,4930
 804cfcc:	0804d09c 	xori	zero,at,4930
 804cfd0:	0804d09c 	xori	zero,at,4930
 804cfd4:	0804d09c 	xori	zero,at,4930
 804cfd8:	0804d09c 	xori	zero,at,4930
 804cfdc:	0804d0c8 	cmpgei	zero,at,4931
 804cfe0:	0804d09c 	xori	zero,at,4930
 804cfe4:	0804d09c 	xori	zero,at,4930
 804cfe8:	0804d54c 	andi	zero,at,4949
 804cfec:	0804d09c 	xori	zero,at,4930
 804cff0:	0804d09c 	xori	zero,at,4930
 804cff4:	0804d09c 	xori	zero,at,4930
 804cff8:	0804d09c 	xori	zero,at,4930
 804cffc:	0804d09c 	xori	zero,at,4930
 804d000:	0804d09c 	xori	zero,at,4930
 804d004:	0804d09c 	xori	zero,at,4930
 804d008:	0804d09c 	xori	zero,at,4930
 804d00c:	0804d09c 	xori	zero,at,4930
 804d010:	0804d09c 	xori	zero,at,4930
 804d014:	0804d524 	muli	zero,at,4948
 804d018:	0804d444 	addi	zero,at,4945
 804d01c:	0804d09c 	xori	zero,at,4930
 804d020:	0804d09c 	xori	zero,at,4930
 804d024:	0804d09c 	xori	zero,at,4930
 804d028:	0804d4c8 	cmpgei	zero,at,4947
 804d02c:	0804d444 	addi	zero,at,4945
 804d030:	0804d09c 	xori	zero,at,4930
 804d034:	0804d09c 	xori	zero,at,4930
 804d038:	0804d510 	cmplti	zero,at,4948
 804d03c:	0804d09c 	xori	zero,at,4930
 804d040:	0804d4d4 	ori	zero,at,4947
 804d044:	0804d2a0 	cmpeqi	zero,at,4938
 804d048:	0804d7fc 	xorhi	zero,at,4959
 804d04c:	0804d7f0 	cmpltui	zero,at,4959
 804d050:	0804d09c 	xori	zero,at,4930
 804d054:	0804d798 	cmpnei	zero,at,4958
 804d058:	0804d09c 	xori	zero,at,4930
 804d05c:	0804d0cc 	andi	zero,at,4931
 804d060:	0804d09c 	xori	zero,at,4930
 804d064:	0804d09c 	xori	zero,at,4930
 804d068:	0804d750 	cmplti	zero,at,4957
 804d06c:	0021883a 	mov	r16,zero
 804d070:	10fff404 	addi	r3,r2,-48
 804d074:	e0800007 	ldb	r2,0(fp)
 804d078:	840002a4 	muli	r16,r16,10
 804d07c:	e7000044 	addi	fp,fp,1
 804d080:	1c21883a 	add	r16,r3,r16
 804d084:	10fff404 	addi	r3,r2,-48
 804d088:	190002b0 	cmpltui	r4,r3,10
 804d08c:	203ff91e 	bne	r4,zero,804d074 <___svfiprintf_internal_r+0x25c>
 804d090:	10fff804 	addi	r3,r2,-32
 804d094:	19001668 	cmpgeui	r4,r3,89
 804d098:	203f9626 	beq	r4,zero,804cef4 <___svfiprintf_internal_r+0xdc>
 804d09c:	29403fcc 	andi	r5,r5,255
 804d0a0:	2803691e 	bne	r5,zero,804de48 <___svfiprintf_internal_r+0x1030>
 804d0a4:	10006b26 	beq	r2,zero,804d254 <___svfiprintf_internal_r+0x43c>
 804d0a8:	d8800c05 	stb	r2,48(sp)
 804d0ac:	d8000845 	stb	zero,33(sp)
 804d0b0:	04c00044 	movi	r19,1
 804d0b4:	05800044 	movi	r22,1
 804d0b8:	ddc00c04 	addi	r23,sp,48
 804d0bc:	6023883a 	mov	r17,r12
 804d0c0:	0013883a 	mov	r9,zero
 804d0c4:	00002006 	br	804d148 <___svfiprintf_internal_r+0x330>
 804d0c8:	63000414 	ori	r12,r12,16
 804d0cc:	6080080c 	andi	r2,r12,32
 804d0d0:	1000a126 	beq	r2,zero,804d358 <___svfiprintf_internal_r+0x540>
 804d0d4:	d8c00317 	ldw	r3,12(sp)
 804d0d8:	00800044 	movi	r2,1
 804d0dc:	1cc00017 	ldw	r19,0(r3)
 804d0e0:	1d800117 	ldw	r22,4(r3)
 804d0e4:	18c00204 	addi	r3,r3,8
 804d0e8:	d8c00315 	stw	r3,12(sp)
 804d0ec:	d8000845 	stb	zero,33(sp)
 804d0f0:	48ffffe0 	cmpeqi	r3,r9,-1
 804d0f4:	001b883a 	mov	r13,zero
 804d0f8:	1801411e 	bne	r3,zero,804d600 <___svfiprintf_internal_r+0x7e8>
 804d0fc:	047fdfc4 	movi	r17,-129
 804d100:	9d86b03a 	or	r3,r19,r22
 804d104:	6462703a 	and	r17,r12,r17
 804d108:	1802691e 	bne	r3,zero,804dab0 <___svfiprintf_internal_r+0xc98>
 804d10c:	4803131e 	bne	r9,zero,804dd5c <___svfiprintf_internal_r+0xf44>
 804d110:	1002c61e 	bne	r2,zero,804dc2c <___svfiprintf_internal_r+0xe14>
 804d114:	6580004c 	andi	r22,r12,1
 804d118:	b002c726 	beq	r22,zero,804dc38 <___svfiprintf_internal_r+0xe20>
 804d11c:	00800c04 	movi	r2,48
 804d120:	d88015c5 	stb	r2,87(sp)
 804d124:	ddc015c4 	addi	r23,sp,87
 804d128:	4827883a 	mov	r19,r9
 804d12c:	4d80010e 	bge	r9,r22,804d134 <___svfiprintf_internal_r+0x31c>
 804d130:	b027883a 	mov	r19,r22
 804d134:	6b403fcc 	andi	r13,r13,255
 804d138:	6b40201c 	xori	r13,r13,128
 804d13c:	6b7fe004 	addi	r13,r13,-128
 804d140:	68000126 	beq	r13,zero,804d148 <___svfiprintf_internal_r+0x330>
 804d144:	9cc00044 	addi	r19,r19,1
 804d148:	8b40008c 	andi	r13,r17,2
 804d14c:	68000126 	beq	r13,zero,804d154 <___svfiprintf_internal_r+0x33c>
 804d150:	9cc00084 	addi	r19,r19,2
 804d154:	8b00210c 	andi	r12,r17,132
 804d158:	d8800b17 	ldw	r2,44(sp)
 804d15c:	d9000a17 	ldw	r4,40(sp)
 804d160:	6000021e 	bne	r12,zero,804d16c <___svfiprintf_internal_r+0x354>
 804d164:	84c7c83a 	sub	r3,r16,r19
 804d168:	00c25316 	blt	zero,r3,804dab8 <___svfiprintf_internal_r+0xca0>
 804d16c:	d9800847 	ldb	r6,33(sp)
 804d170:	21400044 	addi	r5,r4,1
 804d174:	40c00204 	addi	r3,r8,8
 804d178:	30000f26 	beq	r6,zero,804d1b8 <___svfiprintf_internal_r+0x3a0>
 804d17c:	d9800844 	addi	r6,sp,33
 804d180:	10800044 	addi	r2,r2,1
 804d184:	41800015 	stw	r6,0(r8)
 804d188:	01800044 	movi	r6,1
 804d18c:	41800115 	stw	r6,4(r8)
 804d190:	d8800b15 	stw	r2,44(sp)
 804d194:	d9400a15 	stw	r5,40(sp)
 804d198:	29800208 	cmpgei	r6,r5,8
 804d19c:	3002781e 	bne	r6,zero,804db80 <___svfiprintf_internal_r+0xd68>
 804d1a0:	21c00084 	addi	r7,r4,2
 804d1a4:	41800404 	addi	r6,r8,16
 804d1a8:	2809883a 	mov	r4,r5
 804d1ac:	1811883a 	mov	r8,r3
 804d1b0:	380b883a 	mov	r5,r7
 804d1b4:	3007883a 	mov	r3,r6
 804d1b8:	68000d26 	beq	r13,zero,804d1f0 <___svfiprintf_internal_r+0x3d8>
 804d1bc:	d9000884 	addi	r4,sp,34
 804d1c0:	10800084 	addi	r2,r2,2
 804d1c4:	41000015 	stw	r4,0(r8)
 804d1c8:	01000084 	movi	r4,2
 804d1cc:	41000115 	stw	r4,4(r8)
 804d1d0:	d8800b15 	stw	r2,44(sp)
 804d1d4:	d9400a15 	stw	r5,40(sp)
 804d1d8:	29000208 	cmpgei	r4,r5,8
 804d1dc:	2002791e 	bne	r4,zero,804dbc4 <___svfiprintf_internal_r+0xdac>
 804d1e0:	2809883a 	mov	r4,r5
 804d1e4:	1811883a 	mov	r8,r3
 804d1e8:	29400044 	addi	r5,r5,1
 804d1ec:	18c00204 	addi	r3,r3,8
 804d1f0:	63002018 	cmpnei	r12,r12,128
 804d1f4:	6001bd26 	beq	r12,zero,804d8ec <___svfiprintf_internal_r+0xad4>
 804d1f8:	4d93c83a 	sub	r9,r9,r22
 804d1fc:	0241ef16 	blt	zero,r9,804d9bc <___svfiprintf_internal_r+0xba4>
 804d200:	b085883a 	add	r2,r22,r2
 804d204:	45c00015 	stw	r23,0(r8)
 804d208:	45800115 	stw	r22,4(r8)
 804d20c:	d8800b15 	stw	r2,44(sp)
 804d210:	d9400a15 	stw	r5,40(sp)
 804d214:	29000210 	cmplti	r4,r5,8
 804d218:	20021726 	beq	r4,zero,804da78 <___svfiprintf_internal_r+0xc60>
 804d21c:	8c40010c 	andi	r17,r17,4
 804d220:	88000226 	beq	r17,zero,804d22c <___svfiprintf_internal_r+0x414>
 804d224:	84e3c83a 	sub	r17,r16,r19
 804d228:	04405716 	blt	zero,r17,804d388 <___svfiprintf_internal_r+0x570>
 804d22c:	84c0010e 	bge	r16,r19,804d234 <___svfiprintf_internal_r+0x41c>
 804d230:	9821883a 	mov	r16,r19
 804d234:	d8c00017 	ldw	r3,0(sp)
 804d238:	1c07883a 	add	r3,r3,r16
 804d23c:	d8c00015 	stw	r3,0(sp)
 804d240:	1002151e 	bne	r2,zero,804da98 <___svfiprintf_internal_r+0xc80>
 804d244:	e0800007 	ldb	r2,0(fp)
 804d248:	d8000a15 	stw	zero,40(sp)
 804d24c:	9011883a 	mov	r8,r18
 804d250:	103f0e1e 	bne	r2,zero,804ce8c <___svfiprintf_internal_r+0x74>
 804d254:	d8800b17 	ldw	r2,44(sp)
 804d258:	1002fd1e 	bne	r2,zero,804de50 <___svfiprintf_internal_r+0x1038>
 804d25c:	a080030b 	ldhu	r2,12(r20)
 804d260:	1080100c 	andi	r2,r2,64
 804d264:	1003111e 	bne	r2,zero,804deac <___svfiprintf_internal_r+0x1094>
 804d268:	d8800017 	ldw	r2,0(sp)
 804d26c:	dfc02f17 	ldw	ra,188(sp)
 804d270:	df002e17 	ldw	fp,184(sp)
 804d274:	ddc02d17 	ldw	r23,180(sp)
 804d278:	dd802c17 	ldw	r22,176(sp)
 804d27c:	dd402b17 	ldw	r21,172(sp)
 804d280:	dd002a17 	ldw	r20,168(sp)
 804d284:	dcc02917 	ldw	r19,164(sp)
 804d288:	dc802817 	ldw	r18,160(sp)
 804d28c:	dc402717 	ldw	r17,156(sp)
 804d290:	dc002617 	ldw	r16,152(sp)
 804d294:	dec03004 	addi	sp,sp,192
 804d298:	f800283a 	ret
 804d29c:	63000414 	ori	r12,r12,16
 804d2a0:	6080080c 	andi	r2,r12,32
 804d2a4:	10002026 	beq	r2,zero,804d328 <___svfiprintf_internal_r+0x510>
 804d2a8:	d8c00317 	ldw	r3,12(sp)
 804d2ac:	0005883a 	mov	r2,zero
 804d2b0:	1cc00017 	ldw	r19,0(r3)
 804d2b4:	1d800117 	ldw	r22,4(r3)
 804d2b8:	18c00204 	addi	r3,r3,8
 804d2bc:	d8c00315 	stw	r3,12(sp)
 804d2c0:	003f8a06 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804d2c4:	8723c83a 	sub	r17,r16,fp
 804d2c8:	873fe226 	beq	r16,fp,804d254 <___svfiprintf_internal_r+0x43c>
 804d2cc:	d8c00b17 	ldw	r3,44(sp)
 804d2d0:	d8800a17 	ldw	r2,40(sp)
 804d2d4:	47000015 	stw	fp,0(r8)
 804d2d8:	1c47883a 	add	r3,r3,r17
 804d2dc:	10800044 	addi	r2,r2,1
 804d2e0:	d8800a15 	stw	r2,40(sp)
 804d2e4:	44400115 	stw	r17,4(r8)
 804d2e8:	d8c00b15 	stw	r3,44(sp)
 804d2ec:	10800208 	cmpgei	r2,r2,8
 804d2f0:	1000061e 	bne	r2,zero,804d30c <___svfiprintf_internal_r+0x4f4>
 804d2f4:	42000204 	addi	r8,r8,8
 804d2f8:	d8c00017 	ldw	r3,0(sp)
 804d2fc:	80800003 	ldbu	r2,0(r16)
 804d300:	1c47883a 	add	r3,r3,r17
 804d304:	d8c00015 	stw	r3,0(sp)
 804d308:	003eea06 	br	804ceb4 <___svfiprintf_internal_r+0x9c>
 804d30c:	d9800904 	addi	r6,sp,36
 804d310:	a00b883a 	mov	r5,r20
 804d314:	a809883a 	mov	r4,r21
 804d318:	804cc580 	call	804cc58 <__ssprint_r>
 804d31c:	103fcf1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804d320:	9011883a 	mov	r8,r18
 804d324:	003ff406 	br	804d2f8 <___svfiprintf_internal_r+0x4e0>
 804d328:	d9000317 	ldw	r4,12(sp)
 804d32c:	6080040c 	andi	r2,r12,16
 804d330:	20c00104 	addi	r3,r4,4
 804d334:	1002531e 	bne	r2,zero,804dc84 <___svfiprintf_internal_r+0xe6c>
 804d338:	6080100c 	andi	r2,r12,64
 804d33c:	1002b926 	beq	r2,zero,804de24 <___svfiprintf_internal_r+0x100c>
 804d340:	d8800317 	ldw	r2,12(sp)
 804d344:	002d883a 	mov	r22,zero
 804d348:	d8c00315 	stw	r3,12(sp)
 804d34c:	14c0000b 	ldhu	r19,0(r2)
 804d350:	0005883a 	mov	r2,zero
 804d354:	003f6506 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804d358:	d9000317 	ldw	r4,12(sp)
 804d35c:	6080040c 	andi	r2,r12,16
 804d360:	20c00104 	addi	r3,r4,4
 804d364:	1002421e 	bne	r2,zero,804dc70 <___svfiprintf_internal_r+0xe58>
 804d368:	6080100c 	andi	r2,r12,64
 804d36c:	10029c26 	beq	r2,zero,804dde0 <___svfiprintf_internal_r+0xfc8>
 804d370:	d8800317 	ldw	r2,12(sp)
 804d374:	002d883a 	mov	r22,zero
 804d378:	d8c00315 	stw	r3,12(sp)
 804d37c:	14c0000b 	ldhu	r19,0(r2)
 804d380:	00800044 	movi	r2,1
 804d384:	003f5906 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804d388:	01c20174 	movhi	r7,2053
 804d38c:	89400450 	cmplti	r5,r17,17
 804d390:	d9000a17 	ldw	r4,40(sp)
 804d394:	39d05504 	addi	r7,r7,16724
 804d398:	05800404 	movi	r22,16
 804d39c:	28000526 	beq	r5,zero,804d3b4 <___svfiprintf_internal_r+0x59c>
 804d3a0:	00001906 	br	804d408 <___svfiprintf_internal_r+0x5f0>
 804d3a4:	8c7ffc04 	addi	r17,r17,-16
 804d3a8:	89400448 	cmpgei	r5,r17,17
 804d3ac:	18c00204 	addi	r3,r3,8
 804d3b0:	28001526 	beq	r5,zero,804d408 <___svfiprintf_internal_r+0x5f0>
 804d3b4:	21000044 	addi	r4,r4,1
 804d3b8:	10800404 	addi	r2,r2,16
 804d3bc:	19c00015 	stw	r7,0(r3)
 804d3c0:	1d800115 	stw	r22,4(r3)
 804d3c4:	d8800b15 	stw	r2,44(sp)
 804d3c8:	d9000a15 	stw	r4,40(sp)
 804d3cc:	21400208 	cmpgei	r5,r4,8
 804d3d0:	283ff426 	beq	r5,zero,804d3a4 <___svfiprintf_internal_r+0x58c>
 804d3d4:	d9800904 	addi	r6,sp,36
 804d3d8:	a00b883a 	mov	r5,r20
 804d3dc:	a809883a 	mov	r4,r21
 804d3e0:	d9c00115 	stw	r7,4(sp)
 804d3e4:	804cc580 	call	804cc58 <__ssprint_r>
 804d3e8:	103f9c1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804d3ec:	8c7ffc04 	addi	r17,r17,-16
 804d3f0:	89400448 	cmpgei	r5,r17,17
 804d3f4:	d8800b17 	ldw	r2,44(sp)
 804d3f8:	d9000a17 	ldw	r4,40(sp)
 804d3fc:	d9c00117 	ldw	r7,4(sp)
 804d400:	9007883a 	mov	r3,r18
 804d404:	283feb1e 	bne	r5,zero,804d3b4 <___svfiprintf_internal_r+0x59c>
 804d408:	21000044 	addi	r4,r4,1
 804d40c:	1445883a 	add	r2,r2,r17
 804d410:	d9000a15 	stw	r4,40(sp)
 804d414:	19c00015 	stw	r7,0(r3)
 804d418:	1c400115 	stw	r17,4(r3)
 804d41c:	d8800b15 	stw	r2,44(sp)
 804d420:	21000210 	cmplti	r4,r4,8
 804d424:	203f811e 	bne	r4,zero,804d22c <___svfiprintf_internal_r+0x414>
 804d428:	d9800904 	addi	r6,sp,36
 804d42c:	a00b883a 	mov	r5,r20
 804d430:	a809883a 	mov	r4,r21
 804d434:	804cc580 	call	804cc58 <__ssprint_r>
 804d438:	103f881e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804d43c:	d8800b17 	ldw	r2,44(sp)
 804d440:	003f7a06 	br	804d22c <___svfiprintf_internal_r+0x414>
 804d444:	29403fcc 	andi	r5,r5,255
 804d448:	2802901e 	bne	r5,zero,804de8c <___svfiprintf_internal_r+0x1074>
 804d44c:	6080080c 	andi	r2,r12,32
 804d450:	10005526 	beq	r2,zero,804d5a8 <___svfiprintf_internal_r+0x790>
 804d454:	d8c00317 	ldw	r3,12(sp)
 804d458:	18800117 	ldw	r2,4(r3)
 804d45c:	1cc00017 	ldw	r19,0(r3)
 804d460:	18c00204 	addi	r3,r3,8
 804d464:	d8c00315 	stw	r3,12(sp)
 804d468:	102d883a 	mov	r22,r2
 804d46c:	10005a16 	blt	r2,zero,804d5d8 <___svfiprintf_internal_r+0x7c0>
 804d470:	48bfffd8 	cmpnei	r2,r9,-1
 804d474:	10000a26 	beq	r2,zero,804d4a0 <___svfiprintf_internal_r+0x688>
 804d478:	00ffdfc4 	movi	r3,-129
 804d47c:	9d84b03a 	or	r2,r19,r22
 804d480:	db400843 	ldbu	r13,33(sp)
 804d484:	60d8703a 	and	r12,r12,r3
 804d488:	1000061e 	bne	r2,zero,804d4a4 <___svfiprintf_internal_r+0x68c>
 804d48c:	4800081e 	bne	r9,zero,804d4b0 <___svfiprintf_internal_r+0x698>
 804d490:	002d883a 	mov	r22,zero
 804d494:	6023883a 	mov	r17,r12
 804d498:	902f883a 	mov	r23,r18
 804d49c:	003f2206 	br	804d128 <___svfiprintf_internal_r+0x310>
 804d4a0:	db400843 	ldbu	r13,33(sp)
 804d4a4:	b000e41e 	bne	r22,zero,804d838 <___svfiprintf_internal_r+0xa20>
 804d4a8:	988002a8 	cmpgeui	r2,r19,10
 804d4ac:	1000e21e 	bne	r2,zero,804d838 <___svfiprintf_internal_r+0xa20>
 804d4b0:	9cc00c04 	addi	r19,r19,48
 804d4b4:	dcc015c5 	stb	r19,87(sp)
 804d4b8:	6023883a 	mov	r17,r12
 804d4bc:	05800044 	movi	r22,1
 804d4c0:	ddc015c4 	addi	r23,sp,87
 804d4c4:	003f1806 	br	804d128 <___svfiprintf_internal_r+0x310>
 804d4c8:	e0800007 	ldb	r2,0(fp)
 804d4cc:	63001014 	ori	r12,r12,64
 804d4d0:	003e8406 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d4d4:	29403fcc 	andi	r5,r5,255
 804d4d8:	2802681e 	bne	r5,zero,804de7c <___svfiprintf_internal_r+0x1064>
 804d4dc:	d9000317 	ldw	r4,12(sp)
 804d4e0:	6080080c 	andi	r2,r12,32
 804d4e4:	20c00017 	ldw	r3,0(r4)
 804d4e8:	25c00104 	addi	r23,r4,4
 804d4ec:	1001da1e 	bne	r2,zero,804dc58 <___svfiprintf_internal_r+0xe40>
 804d4f0:	6080040c 	andi	r2,r12,16
 804d4f4:	1002031e 	bne	r2,zero,804dd04 <___svfiprintf_internal_r+0xeec>
 804d4f8:	6300100c 	andi	r12,r12,64
 804d4fc:	60020126 	beq	r12,zero,804dd04 <___svfiprintf_internal_r+0xeec>
 804d500:	d8800017 	ldw	r2,0(sp)
 804d504:	ddc00315 	stw	r23,12(sp)
 804d508:	1880000d 	sth	r2,0(r3)
 804d50c:	003e5d06 	br	804ce84 <___svfiprintf_internal_r+0x6c>
 804d510:	e0800007 	ldb	r2,0(fp)
 804d514:	10c01b18 	cmpnei	r3,r2,108
 804d518:	18022126 	beq	r3,zero,804dda0 <___svfiprintf_internal_r+0xf88>
 804d51c:	63000414 	ori	r12,r12,16
 804d520:	003e7006 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d524:	d8c00317 	ldw	r3,12(sp)
 804d528:	d8000845 	stb	zero,33(sp)
 804d52c:	04c00044 	movi	r19,1
 804d530:	18800017 	ldw	r2,0(r3)
 804d534:	18c00104 	addi	r3,r3,4
 804d538:	d8c00315 	stw	r3,12(sp)
 804d53c:	d8800c05 	stb	r2,48(sp)
 804d540:	05800044 	movi	r22,1
 804d544:	ddc00c04 	addi	r23,sp,48
 804d548:	003edc06 	br	804d0bc <___svfiprintf_internal_r+0x2a4>
 804d54c:	29403fcc 	andi	r5,r5,255
 804d550:	28024c1e 	bne	r5,zero,804de84 <___svfiprintf_internal_r+0x106c>
 804d554:	00c20174 	movhi	r3,2053
 804d558:	18fe6104 	addi	r3,r3,-1660
 804d55c:	d8c00415 	stw	r3,16(sp)
 804d560:	60c0080c 	andi	r3,r12,32
 804d564:	18008126 	beq	r3,zero,804d76c <___svfiprintf_internal_r+0x954>
 804d568:	d8c00317 	ldw	r3,12(sp)
 804d56c:	1cc00017 	ldw	r19,0(r3)
 804d570:	1d800117 	ldw	r22,4(r3)
 804d574:	18c00204 	addi	r3,r3,8
 804d578:	d8c00315 	stw	r3,12(sp)
 804d57c:	60c0004c 	andi	r3,r12,1
 804d580:	18000226 	beq	r3,zero,804d58c <___svfiprintf_internal_r+0x774>
 804d584:	9d86b03a 	or	r3,r19,r22
 804d588:	1801ad1e 	bne	r3,zero,804dc40 <___svfiprintf_internal_r+0xe28>
 804d58c:	00800084 	movi	r2,2
 804d590:	003ed606 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804d594:	29403fcc 	andi	r5,r5,255
 804d598:	28023e1e 	bne	r5,zero,804de94 <___svfiprintf_internal_r+0x107c>
 804d59c:	63000414 	ori	r12,r12,16
 804d5a0:	6080080c 	andi	r2,r12,32
 804d5a4:	103fab1e 	bne	r2,zero,804d454 <___svfiprintf_internal_r+0x63c>
 804d5a8:	d9000317 	ldw	r4,12(sp)
 804d5ac:	6080040c 	andi	r2,r12,16
 804d5b0:	20c00104 	addi	r3,r4,4
 804d5b4:	1001bc1e 	bne	r2,zero,804dca8 <___svfiprintf_internal_r+0xe90>
 804d5b8:	6080100c 	andi	r2,r12,64
 804d5bc:	10021326 	beq	r2,zero,804de0c <___svfiprintf_internal_r+0xff4>
 804d5c0:	d8800317 	ldw	r2,12(sp)
 804d5c4:	d8c00315 	stw	r3,12(sp)
 804d5c8:	14c0000f 	ldh	r19,0(r2)
 804d5cc:	982dd7fa 	srai	r22,r19,31
 804d5d0:	b005883a 	mov	r2,r22
 804d5d4:	103fa60e 	bge	r2,zero,804d470 <___svfiprintf_internal_r+0x658>
 804d5d8:	9804c03a 	cmpne	r2,r19,zero
 804d5dc:	05adc83a 	sub	r22,zero,r22
 804d5e0:	b0adc83a 	sub	r22,r22,r2
 804d5e4:	00800b44 	movi	r2,45
 804d5e8:	d8800845 	stb	r2,33(sp)
 804d5ec:	48ffffe0 	cmpeqi	r3,r9,-1
 804d5f0:	04e7c83a 	sub	r19,zero,r19
 804d5f4:	03400b44 	movi	r13,45
 804d5f8:	00800044 	movi	r2,1
 804d5fc:	183ebf26 	beq	r3,zero,804d0fc <___svfiprintf_internal_r+0x2e4>
 804d600:	10c00060 	cmpeqi	r3,r2,1
 804d604:	183fa71e 	bne	r3,zero,804d4a4 <___svfiprintf_internal_r+0x68c>
 804d608:	108000a0 	cmpeqi	r2,r2,2
 804d60c:	902f883a 	mov	r23,r18
 804d610:	1000a91e 	bne	r2,zero,804d8b8 <___svfiprintf_internal_r+0xaa0>
 804d614:	b006977a 	slli	r3,r22,29
 804d618:	9804d0fa 	srli	r2,r19,3
 804d61c:	b02cd0fa 	srli	r22,r22,3
 804d620:	990001cc 	andi	r4,r19,7
 804d624:	21000c04 	addi	r4,r4,48
 804d628:	18a6b03a 	or	r19,r3,r2
 804d62c:	b93fffc5 	stb	r4,-1(r23)
 804d630:	9d84b03a 	or	r2,r19,r22
 804d634:	b80b883a 	mov	r5,r23
 804d638:	bdffffc4 	addi	r23,r23,-1
 804d63c:	103ff51e 	bne	r2,zero,804d614 <___svfiprintf_internal_r+0x7fc>
 804d640:	6080004c 	andi	r2,r12,1
 804d644:	10009926 	beq	r2,zero,804d8ac <___svfiprintf_internal_r+0xa94>
 804d648:	21003fcc 	andi	r4,r4,255
 804d64c:	2100201c 	xori	r4,r4,128
 804d650:	213fe004 	addi	r4,r4,-128
 804d654:	20800c18 	cmpnei	r2,r4,48
 804d658:	10009426 	beq	r2,zero,804d8ac <___svfiprintf_internal_r+0xa94>
 804d65c:	297fff84 	addi	r5,r5,-2
 804d660:	00800c04 	movi	r2,48
 804d664:	b8bfffc5 	stb	r2,-1(r23)
 804d668:	916dc83a 	sub	r22,r18,r5
 804d66c:	6023883a 	mov	r17,r12
 804d670:	282f883a 	mov	r23,r5
 804d674:	003eac06 	br	804d128 <___svfiprintf_internal_r+0x310>
 804d678:	e0800007 	ldb	r2,0(fp)
 804d67c:	63002014 	ori	r12,r12,128
 804d680:	003e1806 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d684:	e0800007 	ldb	r2,0(fp)
 804d688:	e1000044 	addi	r4,fp,1
 804d68c:	10c00aa0 	cmpeqi	r3,r2,42
 804d690:	1802091e 	bne	r3,zero,804deb8 <___svfiprintf_internal_r+0x10a0>
 804d694:	10fff404 	addi	r3,r2,-48
 804d698:	19c002b0 	cmpltui	r7,r3,10
 804d69c:	2039883a 	mov	fp,r4
 804d6a0:	0013883a 	mov	r9,zero
 804d6a4:	383e1026 	beq	r7,zero,804cee8 <___svfiprintf_internal_r+0xd0>
 804d6a8:	e0800007 	ldb	r2,0(fp)
 804d6ac:	4a4002a4 	muli	r9,r9,10
 804d6b0:	e7000044 	addi	fp,fp,1
 804d6b4:	48d3883a 	add	r9,r9,r3
 804d6b8:	10fff404 	addi	r3,r2,-48
 804d6bc:	190002b0 	cmpltui	r4,r3,10
 804d6c0:	203ff91e 	bne	r4,zero,804d6a8 <___svfiprintf_internal_r+0x890>
 804d6c4:	003e0806 	br	804cee8 <___svfiprintf_internal_r+0xd0>
 804d6c8:	e0800003 	ldbu	r2,0(fp)
 804d6cc:	10803fcc 	andi	r2,r2,255
 804d6d0:	1080201c 	xori	r2,r2,128
 804d6d4:	63000114 	ori	r12,r12,4
 804d6d8:	10bfe004 	addi	r2,r2,-128
 804d6dc:	003e0106 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d6e0:	e0800007 	ldb	r2,0(fp)
 804d6e4:	01400044 	movi	r5,1
 804d6e8:	01800ac4 	movi	r6,43
 804d6ec:	003dfd06 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d6f0:	d8c00317 	ldw	r3,12(sp)
 804d6f4:	e0800003 	ldbu	r2,0(fp)
 804d6f8:	1c000017 	ldw	r16,0(r3)
 804d6fc:	1dc00104 	addi	r23,r3,4
 804d700:	80019316 	blt	r16,zero,804dd50 <___svfiprintf_internal_r+0xf38>
 804d704:	ddc00315 	stw	r23,12(sp)
 804d708:	10803fcc 	andi	r2,r2,255
 804d70c:	1080201c 	xori	r2,r2,128
 804d710:	10bfe004 	addi	r2,r2,-128
 804d714:	003df306 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d718:	e0800007 	ldb	r2,0(fp)
 804d71c:	63000054 	ori	r12,r12,1
 804d720:	003df006 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d724:	30c03fcc 	andi	r3,r6,255
 804d728:	18c0201c 	xori	r3,r3,128
 804d72c:	18ffe004 	addi	r3,r3,-128
 804d730:	e0800003 	ldbu	r2,0(fp)
 804d734:	183ff41e 	bne	r3,zero,804d708 <___svfiprintf_internal_r+0x8f0>
 804d738:	10803fcc 	andi	r2,r2,255
 804d73c:	1080201c 	xori	r2,r2,128
 804d740:	01400044 	movi	r5,1
 804d744:	01800804 	movi	r6,32
 804d748:	10bfe004 	addi	r2,r2,-128
 804d74c:	003de506 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d750:	29403fcc 	andi	r5,r5,255
 804d754:	2801c71e 	bne	r5,zero,804de74 <___svfiprintf_internal_r+0x105c>
 804d758:	00c20174 	movhi	r3,2053
 804d75c:	18fe6604 	addi	r3,r3,-1640
 804d760:	d8c00415 	stw	r3,16(sp)
 804d764:	60c0080c 	andi	r3,r12,32
 804d768:	183f7f1e 	bne	r3,zero,804d568 <___svfiprintf_internal_r+0x750>
 804d76c:	d9400317 	ldw	r5,12(sp)
 804d770:	60c0040c 	andi	r3,r12,16
 804d774:	29000104 	addi	r4,r5,4
 804d778:	1801471e 	bne	r3,zero,804dc98 <___svfiprintf_internal_r+0xe80>
 804d77c:	60c0100c 	andi	r3,r12,64
 804d780:	18019d26 	beq	r3,zero,804ddf8 <___svfiprintf_internal_r+0xfe0>
 804d784:	d8c00317 	ldw	r3,12(sp)
 804d788:	002d883a 	mov	r22,zero
 804d78c:	d9000315 	stw	r4,12(sp)
 804d790:	1cc0000b 	ldhu	r19,0(r3)
 804d794:	003f7906 	br	804d57c <___svfiprintf_internal_r+0x764>
 804d798:	d8800317 	ldw	r2,12(sp)
 804d79c:	d8000845 	stb	zero,33(sp)
 804d7a0:	15c00017 	ldw	r23,0(r2)
 804d7a4:	14400104 	addi	r17,r2,4
 804d7a8:	b8018426 	beq	r23,zero,804ddbc <___svfiprintf_internal_r+0xfa4>
 804d7ac:	48bfffe0 	cmpeqi	r2,r9,-1
 804d7b0:	1001421e 	bne	r2,zero,804dcbc <___svfiprintf_internal_r+0xea4>
 804d7b4:	480d883a 	mov	r6,r9
 804d7b8:	000b883a 	mov	r5,zero
 804d7bc:	b809883a 	mov	r4,r23
 804d7c0:	da000315 	stw	r8,12(sp)
 804d7c4:	db000215 	stw	r12,8(sp)
 804d7c8:	da400115 	stw	r9,4(sp)
 804d7cc:	80096140 	call	8009614 <memchr>
 804d7d0:	da400117 	ldw	r9,4(sp)
 804d7d4:	db000217 	ldw	r12,8(sp)
 804d7d8:	da000317 	ldw	r8,12(sp)
 804d7dc:	1001a126 	beq	r2,zero,804de64 <___svfiprintf_internal_r+0x104c>
 804d7e0:	15edc83a 	sub	r22,r2,r23
 804d7e4:	b027883a 	mov	r19,r22
 804d7e8:	dc400315 	stw	r17,12(sp)
 804d7ec:	003e3306 	br	804d0bc <___svfiprintf_internal_r+0x2a4>
 804d7f0:	e0800007 	ldb	r2,0(fp)
 804d7f4:	63000814 	ori	r12,r12,32
 804d7f8:	003dba06 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804d7fc:	d8c00317 	ldw	r3,12(sp)
 804d800:	00800c04 	movi	r2,48
 804d804:	d8800885 	stb	r2,34(sp)
 804d808:	00801e04 	movi	r2,120
 804d80c:	01020174 	movhi	r4,2053
 804d810:	d88008c5 	stb	r2,35(sp)
 804d814:	18800104 	addi	r2,r3,4
 804d818:	d8800315 	stw	r2,12(sp)
 804d81c:	20be6604 	addi	r2,r4,-1640
 804d820:	d8800415 	stw	r2,16(sp)
 804d824:	1cc00017 	ldw	r19,0(r3)
 804d828:	002d883a 	mov	r22,zero
 804d82c:	63000094 	ori	r12,r12,2
 804d830:	00800084 	movi	r2,2
 804d834:	003e2d06 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804d838:	902f883a 	mov	r23,r18
 804d83c:	9809883a 	mov	r4,r19
 804d840:	b00b883a 	mov	r5,r22
 804d844:	01800284 	movi	r6,10
 804d848:	000f883a 	mov	r7,zero
 804d84c:	db400615 	stw	r13,24(sp)
 804d850:	da000515 	stw	r8,20(sp)
 804d854:	da400215 	stw	r9,8(sp)
 804d858:	db000115 	stw	r12,4(sp)
 804d85c:	800dc080 	call	800dc08 <__umoddi3>
 804d860:	10800c04 	addi	r2,r2,48
 804d864:	9809883a 	mov	r4,r19
 804d868:	b00b883a 	mov	r5,r22
 804d86c:	b8bfffc5 	stb	r2,-1(r23)
 804d870:	01800284 	movi	r6,10
 804d874:	000f883a 	mov	r7,zero
 804d878:	800d6780 	call	800d678 <__udivdi3>
 804d87c:	b009883a 	mov	r4,r22
 804d880:	980b883a 	mov	r5,r19
 804d884:	db000117 	ldw	r12,4(sp)
 804d888:	da400217 	ldw	r9,8(sp)
 804d88c:	da000517 	ldw	r8,20(sp)
 804d890:	db400617 	ldw	r13,24(sp)
 804d894:	bdffffc4 	addi	r23,r23,-1
 804d898:	1027883a 	mov	r19,r2
 804d89c:	182d883a 	mov	r22,r3
 804d8a0:	203fe61e 	bne	r4,zero,804d83c <___svfiprintf_internal_r+0xa24>
 804d8a4:	294002a8 	cmpgeui	r5,r5,10
 804d8a8:	283fe41e 	bne	r5,zero,804d83c <___svfiprintf_internal_r+0xa24>
 804d8ac:	95edc83a 	sub	r22,r18,r23
 804d8b0:	6023883a 	mov	r17,r12
 804d8b4:	003e1c06 	br	804d128 <___svfiprintf_internal_r+0x310>
 804d8b8:	d9000417 	ldw	r4,16(sp)
 804d8bc:	988003cc 	andi	r2,r19,15
 804d8c0:	b006973a 	slli	r3,r22,28
 804d8c4:	9826d13a 	srli	r19,r19,4
 804d8c8:	2085883a 	add	r2,r4,r2
 804d8cc:	10800003 	ldbu	r2,0(r2)
 804d8d0:	b02cd13a 	srli	r22,r22,4
 804d8d4:	1ce6b03a 	or	r19,r3,r19
 804d8d8:	b8bfffc5 	stb	r2,-1(r23)
 804d8dc:	9d84b03a 	or	r2,r19,r22
 804d8e0:	bdffffc4 	addi	r23,r23,-1
 804d8e4:	103ff41e 	bne	r2,zero,804d8b8 <___svfiprintf_internal_r+0xaa0>
 804d8e8:	003ff006 	br	804d8ac <___svfiprintf_internal_r+0xa94>
 804d8ec:	84d9c83a 	sub	r12,r16,r19
 804d8f0:	033e410e 	bge	zero,r12,804d1f8 <___svfiprintf_internal_r+0x3e0>
 804d8f4:	61800450 	cmplti	r6,r12,17
 804d8f8:	01c20174 	movhi	r7,2053
 804d8fc:	3001671e 	bne	r6,zero,804de9c <___svfiprintf_internal_r+0x1084>
 804d900:	39d05104 	addi	r7,r7,16708
 804d904:	03400404 	movi	r13,16
 804d908:	00000406 	br	804d91c <___svfiprintf_internal_r+0xb04>
 804d90c:	633ffc04 	addi	r12,r12,-16
 804d910:	60c00448 	cmpgei	r3,r12,17
 804d914:	42000204 	addi	r8,r8,8
 804d918:	18001a26 	beq	r3,zero,804d984 <___svfiprintf_internal_r+0xb6c>
 804d91c:	21000044 	addi	r4,r4,1
 804d920:	10800404 	addi	r2,r2,16
 804d924:	41c00015 	stw	r7,0(r8)
 804d928:	43400115 	stw	r13,4(r8)
 804d92c:	d8800b15 	stw	r2,44(sp)
 804d930:	d9000a15 	stw	r4,40(sp)
 804d934:	20c00208 	cmpgei	r3,r4,8
 804d938:	183ff426 	beq	r3,zero,804d90c <___svfiprintf_internal_r+0xaf4>
 804d93c:	d9800904 	addi	r6,sp,36
 804d940:	a00b883a 	mov	r5,r20
 804d944:	a809883a 	mov	r4,r21
 804d948:	d9c00515 	stw	r7,20(sp)
 804d94c:	da400215 	stw	r9,8(sp)
 804d950:	db000115 	stw	r12,4(sp)
 804d954:	804cc580 	call	804cc58 <__ssprint_r>
 804d958:	103e401e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804d95c:	db000117 	ldw	r12,4(sp)
 804d960:	d8800b17 	ldw	r2,44(sp)
 804d964:	d9000a17 	ldw	r4,40(sp)
 804d968:	633ffc04 	addi	r12,r12,-16
 804d96c:	60c00448 	cmpgei	r3,r12,17
 804d970:	d9c00517 	ldw	r7,20(sp)
 804d974:	da400217 	ldw	r9,8(sp)
 804d978:	9011883a 	mov	r8,r18
 804d97c:	03400404 	movi	r13,16
 804d980:	183fe61e 	bne	r3,zero,804d91c <___svfiprintf_internal_r+0xb04>
 804d984:	21000044 	addi	r4,r4,1
 804d988:	41800204 	addi	r6,r8,8
 804d98c:	1305883a 	add	r2,r2,r12
 804d990:	41c00015 	stw	r7,0(r8)
 804d994:	43000115 	stw	r12,4(r8)
 804d998:	d8800b15 	stw	r2,44(sp)
 804d99c:	d9000a15 	stw	r4,40(sp)
 804d9a0:	20c00208 	cmpgei	r3,r4,8
 804d9a4:	1800f11e 	bne	r3,zero,804dd6c <___svfiprintf_internal_r+0xf54>
 804d9a8:	4d93c83a 	sub	r9,r9,r22
 804d9ac:	21400044 	addi	r5,r4,1
 804d9b0:	30c00204 	addi	r3,r6,8
 804d9b4:	3011883a 	mov	r8,r6
 804d9b8:	027e110e 	bge	zero,r9,804d200 <___svfiprintf_internal_r+0x3e8>
 804d9bc:	49800450 	cmplti	r6,r9,17
 804d9c0:	01c20174 	movhi	r7,2053
 804d9c4:	30011d1e 	bne	r6,zero,804de3c <___svfiprintf_internal_r+0x1024>
 804d9c8:	39d05104 	addi	r7,r7,16708
 804d9cc:	03000404 	movi	r12,16
 804d9d0:	00000406 	br	804d9e4 <___svfiprintf_internal_r+0xbcc>
 804d9d4:	4a7ffc04 	addi	r9,r9,-16
 804d9d8:	48c00448 	cmpgei	r3,r9,17
 804d9dc:	42000204 	addi	r8,r8,8
 804d9e0:	18001826 	beq	r3,zero,804da44 <___svfiprintf_internal_r+0xc2c>
 804d9e4:	21000044 	addi	r4,r4,1
 804d9e8:	10800404 	addi	r2,r2,16
 804d9ec:	41c00015 	stw	r7,0(r8)
 804d9f0:	43000115 	stw	r12,4(r8)
 804d9f4:	d8800b15 	stw	r2,44(sp)
 804d9f8:	d9000a15 	stw	r4,40(sp)
 804d9fc:	20c00208 	cmpgei	r3,r4,8
 804da00:	183ff426 	beq	r3,zero,804d9d4 <___svfiprintf_internal_r+0xbbc>
 804da04:	d9800904 	addi	r6,sp,36
 804da08:	a00b883a 	mov	r5,r20
 804da0c:	a809883a 	mov	r4,r21
 804da10:	d9c00215 	stw	r7,8(sp)
 804da14:	da400115 	stw	r9,4(sp)
 804da18:	804cc580 	call	804cc58 <__ssprint_r>
 804da1c:	103e0f1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804da20:	da400117 	ldw	r9,4(sp)
 804da24:	d8800b17 	ldw	r2,44(sp)
 804da28:	d9000a17 	ldw	r4,40(sp)
 804da2c:	4a7ffc04 	addi	r9,r9,-16
 804da30:	48c00448 	cmpgei	r3,r9,17
 804da34:	d9c00217 	ldw	r7,8(sp)
 804da38:	9011883a 	mov	r8,r18
 804da3c:	03000404 	movi	r12,16
 804da40:	183fe81e 	bne	r3,zero,804d9e4 <___svfiprintf_internal_r+0xbcc>
 804da44:	21400044 	addi	r5,r4,1
 804da48:	41000204 	addi	r4,r8,8
 804da4c:	1245883a 	add	r2,r2,r9
 804da50:	41c00015 	stw	r7,0(r8)
 804da54:	42400115 	stw	r9,4(r8)
 804da58:	d8800b15 	stw	r2,44(sp)
 804da5c:	d9400a15 	stw	r5,40(sp)
 804da60:	28c00208 	cmpgei	r3,r5,8
 804da64:	1800661e 	bne	r3,zero,804dc00 <___svfiprintf_internal_r+0xde8>
 804da68:	29400044 	addi	r5,r5,1
 804da6c:	20c00204 	addi	r3,r4,8
 804da70:	2011883a 	mov	r8,r4
 804da74:	003de206 	br	804d200 <___svfiprintf_internal_r+0x3e8>
 804da78:	d9800904 	addi	r6,sp,36
 804da7c:	a00b883a 	mov	r5,r20
 804da80:	a809883a 	mov	r4,r21
 804da84:	804cc580 	call	804cc58 <__ssprint_r>
 804da88:	103df41e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804da8c:	d8800b17 	ldw	r2,44(sp)
 804da90:	9007883a 	mov	r3,r18
 804da94:	003de106 	br	804d21c <___svfiprintf_internal_r+0x404>
 804da98:	d9800904 	addi	r6,sp,36
 804da9c:	a00b883a 	mov	r5,r20
 804daa0:	a809883a 	mov	r4,r21
 804daa4:	804cc580 	call	804cc58 <__ssprint_r>
 804daa8:	103de626 	beq	r2,zero,804d244 <___svfiprintf_internal_r+0x42c>
 804daac:	003deb06 	br	804d25c <___svfiprintf_internal_r+0x444>
 804dab0:	8819883a 	mov	r12,r17
 804dab4:	003ed206 	br	804d600 <___svfiprintf_internal_r+0x7e8>
 804dab8:	01c20174 	movhi	r7,2053
 804dabc:	19400450 	cmplti	r5,r3,17
 804dac0:	39d05504 	addi	r7,r7,16724
 804dac4:	03800404 	movi	r14,16
 804dac8:	28000526 	beq	r5,zero,804dae0 <___svfiprintf_internal_r+0xcc8>
 804dacc:	00002206 	br	804db58 <___svfiprintf_internal_r+0xd40>
 804dad0:	18fffc04 	addi	r3,r3,-16
 804dad4:	19400448 	cmpgei	r5,r3,17
 804dad8:	42000204 	addi	r8,r8,8
 804dadc:	28001e26 	beq	r5,zero,804db58 <___svfiprintf_internal_r+0xd40>
 804dae0:	21000044 	addi	r4,r4,1
 804dae4:	10800404 	addi	r2,r2,16
 804dae8:	41c00015 	stw	r7,0(r8)
 804daec:	43800115 	stw	r14,4(r8)
 804daf0:	d8800b15 	stw	r2,44(sp)
 804daf4:	d9000a15 	stw	r4,40(sp)
 804daf8:	21400208 	cmpgei	r5,r4,8
 804dafc:	283ff426 	beq	r5,zero,804dad0 <___svfiprintf_internal_r+0xcb8>
 804db00:	d9800904 	addi	r6,sp,36
 804db04:	a00b883a 	mov	r5,r20
 804db08:	a809883a 	mov	r4,r21
 804db0c:	d9c00715 	stw	r7,28(sp)
 804db10:	d8c00615 	stw	r3,24(sp)
 804db14:	da400515 	stw	r9,20(sp)
 804db18:	db000215 	stw	r12,8(sp)
 804db1c:	db400115 	stw	r13,4(sp)
 804db20:	804cc580 	call	804cc58 <__ssprint_r>
 804db24:	103dcd1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804db28:	d8c00617 	ldw	r3,24(sp)
 804db2c:	d8800b17 	ldw	r2,44(sp)
 804db30:	d9000a17 	ldw	r4,40(sp)
 804db34:	18fffc04 	addi	r3,r3,-16
 804db38:	19400448 	cmpgei	r5,r3,17
 804db3c:	d9c00717 	ldw	r7,28(sp)
 804db40:	da400517 	ldw	r9,20(sp)
 804db44:	db000217 	ldw	r12,8(sp)
 804db48:	db400117 	ldw	r13,4(sp)
 804db4c:	9011883a 	mov	r8,r18
 804db50:	03800404 	movi	r14,16
 804db54:	283fe21e 	bne	r5,zero,804dae0 <___svfiprintf_internal_r+0xcc8>
 804db58:	21000044 	addi	r4,r4,1
 804db5c:	10c5883a 	add	r2,r2,r3
 804db60:	40c00115 	stw	r3,4(r8)
 804db64:	41c00015 	stw	r7,0(r8)
 804db68:	d8800b15 	stw	r2,44(sp)
 804db6c:	d9000a15 	stw	r4,40(sp)
 804db70:	20c00208 	cmpgei	r3,r4,8
 804db74:	1800671e 	bne	r3,zero,804dd14 <___svfiprintf_internal_r+0xefc>
 804db78:	42000204 	addi	r8,r8,8
 804db7c:	003d7b06 	br	804d16c <___svfiprintf_internal_r+0x354>
 804db80:	d9800904 	addi	r6,sp,36
 804db84:	a00b883a 	mov	r5,r20
 804db88:	a809883a 	mov	r4,r21
 804db8c:	da400515 	stw	r9,20(sp)
 804db90:	db000215 	stw	r12,8(sp)
 804db94:	db400115 	stw	r13,4(sp)
 804db98:	804cc580 	call	804cc58 <__ssprint_r>
 804db9c:	103daf1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804dba0:	d9000a17 	ldw	r4,40(sp)
 804dba4:	d8800b17 	ldw	r2,44(sp)
 804dba8:	da400517 	ldw	r9,20(sp)
 804dbac:	db000217 	ldw	r12,8(sp)
 804dbb0:	db400117 	ldw	r13,4(sp)
 804dbb4:	d8c01804 	addi	r3,sp,96
 804dbb8:	21400044 	addi	r5,r4,1
 804dbbc:	9011883a 	mov	r8,r18
 804dbc0:	003d7d06 	br	804d1b8 <___svfiprintf_internal_r+0x3a0>
 804dbc4:	d9800904 	addi	r6,sp,36
 804dbc8:	a00b883a 	mov	r5,r20
 804dbcc:	a809883a 	mov	r4,r21
 804dbd0:	da400215 	stw	r9,8(sp)
 804dbd4:	db000115 	stw	r12,4(sp)
 804dbd8:	804cc580 	call	804cc58 <__ssprint_r>
 804dbdc:	103d9f1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804dbe0:	d9000a17 	ldw	r4,40(sp)
 804dbe4:	d8800b17 	ldw	r2,44(sp)
 804dbe8:	da400217 	ldw	r9,8(sp)
 804dbec:	db000117 	ldw	r12,4(sp)
 804dbf0:	d8c01804 	addi	r3,sp,96
 804dbf4:	21400044 	addi	r5,r4,1
 804dbf8:	9011883a 	mov	r8,r18
 804dbfc:	003d7c06 	br	804d1f0 <___svfiprintf_internal_r+0x3d8>
 804dc00:	d9800904 	addi	r6,sp,36
 804dc04:	a00b883a 	mov	r5,r20
 804dc08:	a809883a 	mov	r4,r21
 804dc0c:	804cc580 	call	804cc58 <__ssprint_r>
 804dc10:	103d921e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804dc14:	d9000a17 	ldw	r4,40(sp)
 804dc18:	d8800b17 	ldw	r2,44(sp)
 804dc1c:	d8c01804 	addi	r3,sp,96
 804dc20:	21400044 	addi	r5,r4,1
 804dc24:	9011883a 	mov	r8,r18
 804dc28:	003d7506 	br	804d200 <___svfiprintf_internal_r+0x3e8>
 804dc2c:	002d883a 	mov	r22,zero
 804dc30:	902f883a 	mov	r23,r18
 804dc34:	003d3c06 	br	804d128 <___svfiprintf_internal_r+0x310>
 804dc38:	902f883a 	mov	r23,r18
 804dc3c:	003d3a06 	br	804d128 <___svfiprintf_internal_r+0x310>
 804dc40:	00c00c04 	movi	r3,48
 804dc44:	d88008c5 	stb	r2,35(sp)
 804dc48:	d8c00885 	stb	r3,34(sp)
 804dc4c:	63000094 	ori	r12,r12,2
 804dc50:	00800084 	movi	r2,2
 804dc54:	003d2506 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804dc58:	d9000017 	ldw	r4,0(sp)
 804dc5c:	ddc00315 	stw	r23,12(sp)
 804dc60:	2005d7fa 	srai	r2,r4,31
 804dc64:	19000015 	stw	r4,0(r3)
 804dc68:	18800115 	stw	r2,4(r3)
 804dc6c:	003c8506 	br	804ce84 <___svfiprintf_internal_r+0x6c>
 804dc70:	24c00017 	ldw	r19,0(r4)
 804dc74:	002d883a 	mov	r22,zero
 804dc78:	d8c00315 	stw	r3,12(sp)
 804dc7c:	00800044 	movi	r2,1
 804dc80:	003d1a06 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804dc84:	24c00017 	ldw	r19,0(r4)
 804dc88:	002d883a 	mov	r22,zero
 804dc8c:	d8c00315 	stw	r3,12(sp)
 804dc90:	0005883a 	mov	r2,zero
 804dc94:	003d1506 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804dc98:	2cc00017 	ldw	r19,0(r5)
 804dc9c:	002d883a 	mov	r22,zero
 804dca0:	d9000315 	stw	r4,12(sp)
 804dca4:	003e3506 	br	804d57c <___svfiprintf_internal_r+0x764>
 804dca8:	24c00017 	ldw	r19,0(r4)
 804dcac:	d8c00315 	stw	r3,12(sp)
 804dcb0:	982dd7fa 	srai	r22,r19,31
 804dcb4:	b005883a 	mov	r2,r22
 804dcb8:	003dec06 	br	804d46c <___svfiprintf_internal_r+0x654>
 804dcbc:	b809883a 	mov	r4,r23
 804dcc0:	da000215 	stw	r8,8(sp)
 804dcc4:	db000115 	stw	r12,4(sp)
 804dcc8:	8003a1c0 	call	8003a1c <strlen>
 804dccc:	db000117 	ldw	r12,4(sp)
 804dcd0:	da000217 	ldw	r8,8(sp)
 804dcd4:	102d883a 	mov	r22,r2
 804dcd8:	1027883a 	mov	r19,r2
 804dcdc:	dc400315 	stw	r17,12(sp)
 804dce0:	003cf606 	br	804d0bc <___svfiprintf_internal_r+0x2a4>
 804dce4:	01401004 	movi	r5,64
 804dce8:	8008e340 	call	8008e34 <_malloc_r>
 804dcec:	a0800015 	stw	r2,0(r20)
 804dcf0:	a0800415 	stw	r2,16(r20)
 804dcf4:	10007c26 	beq	r2,zero,804dee8 <___svfiprintf_internal_r+0x10d0>
 804dcf8:	00801004 	movi	r2,64
 804dcfc:	a0800515 	stw	r2,20(r20)
 804dd00:	003c5906 	br	804ce68 <___svfiprintf_internal_r+0x50>
 804dd04:	d8800017 	ldw	r2,0(sp)
 804dd08:	18800015 	stw	r2,0(r3)
 804dd0c:	ddc00315 	stw	r23,12(sp)
 804dd10:	003c5c06 	br	804ce84 <___svfiprintf_internal_r+0x6c>
 804dd14:	d9800904 	addi	r6,sp,36
 804dd18:	a00b883a 	mov	r5,r20
 804dd1c:	a809883a 	mov	r4,r21
 804dd20:	da400515 	stw	r9,20(sp)
 804dd24:	db000215 	stw	r12,8(sp)
 804dd28:	db400115 	stw	r13,4(sp)
 804dd2c:	804cc580 	call	804cc58 <__ssprint_r>
 804dd30:	103d4a1e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804dd34:	d8800b17 	ldw	r2,44(sp)
 804dd38:	d9000a17 	ldw	r4,40(sp)
 804dd3c:	da400517 	ldw	r9,20(sp)
 804dd40:	db000217 	ldw	r12,8(sp)
 804dd44:	db400117 	ldw	r13,4(sp)
 804dd48:	9011883a 	mov	r8,r18
 804dd4c:	003d0706 	br	804d16c <___svfiprintf_internal_r+0x354>
 804dd50:	0421c83a 	sub	r16,zero,r16
 804dd54:	ddc00315 	stw	r23,12(sp)
 804dd58:	003e5c06 	br	804d6cc <___svfiprintf_internal_r+0x8b4>
 804dd5c:	10c00060 	cmpeqi	r3,r2,1
 804dd60:	8819883a 	mov	r12,r17
 804dd64:	183e2826 	beq	r3,zero,804d608 <___svfiprintf_internal_r+0x7f0>
 804dd68:	003dd106 	br	804d4b0 <___svfiprintf_internal_r+0x698>
 804dd6c:	d9800904 	addi	r6,sp,36
 804dd70:	a00b883a 	mov	r5,r20
 804dd74:	a809883a 	mov	r4,r21
 804dd78:	da400115 	stw	r9,4(sp)
 804dd7c:	804cc580 	call	804cc58 <__ssprint_r>
 804dd80:	103d361e 	bne	r2,zero,804d25c <___svfiprintf_internal_r+0x444>
 804dd84:	d9000a17 	ldw	r4,40(sp)
 804dd88:	d8800b17 	ldw	r2,44(sp)
 804dd8c:	da400117 	ldw	r9,4(sp)
 804dd90:	d8c01804 	addi	r3,sp,96
 804dd94:	21400044 	addi	r5,r4,1
 804dd98:	9011883a 	mov	r8,r18
 804dd9c:	003d1606 	br	804d1f8 <___svfiprintf_internal_r+0x3e0>
 804dda0:	e0800043 	ldbu	r2,1(fp)
 804dda4:	63000814 	ori	r12,r12,32
 804dda8:	e7000044 	addi	fp,fp,1
 804ddac:	10803fcc 	andi	r2,r2,255
 804ddb0:	1080201c 	xori	r2,r2,128
 804ddb4:	10bfe004 	addi	r2,r2,-128
 804ddb8:	003c4a06 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804ddbc:	488001f0 	cmpltui	r2,r9,7
 804ddc0:	482d883a 	mov	r22,r9
 804ddc4:	1000011e 	bne	r2,zero,804ddcc <___svfiprintf_internal_r+0xfb4>
 804ddc8:	05800184 	movi	r22,6
 804ddcc:	05c20174 	movhi	r23,2053
 804ddd0:	b027883a 	mov	r19,r22
 804ddd4:	dc400315 	stw	r17,12(sp)
 804ddd8:	bdfe6b04 	addi	r23,r23,-1620
 804dddc:	003cb706 	br	804d0bc <___svfiprintf_internal_r+0x2a4>
 804dde0:	d8800317 	ldw	r2,12(sp)
 804dde4:	002d883a 	mov	r22,zero
 804dde8:	d8c00315 	stw	r3,12(sp)
 804ddec:	14c00017 	ldw	r19,0(r2)
 804ddf0:	00800044 	movi	r2,1
 804ddf4:	003cbd06 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804ddf8:	d8c00317 	ldw	r3,12(sp)
 804ddfc:	002d883a 	mov	r22,zero
 804de00:	d9000315 	stw	r4,12(sp)
 804de04:	1cc00017 	ldw	r19,0(r3)
 804de08:	003ddc06 	br	804d57c <___svfiprintf_internal_r+0x764>
 804de0c:	d8800317 	ldw	r2,12(sp)
 804de10:	d8c00315 	stw	r3,12(sp)
 804de14:	14c00017 	ldw	r19,0(r2)
 804de18:	982dd7fa 	srai	r22,r19,31
 804de1c:	b005883a 	mov	r2,r22
 804de20:	003d9206 	br	804d46c <___svfiprintf_internal_r+0x654>
 804de24:	d8800317 	ldw	r2,12(sp)
 804de28:	002d883a 	mov	r22,zero
 804de2c:	d8c00315 	stw	r3,12(sp)
 804de30:	14c00017 	ldw	r19,0(r2)
 804de34:	0005883a 	mov	r2,zero
 804de38:	003cac06 	br	804d0ec <___svfiprintf_internal_r+0x2d4>
 804de3c:	1809883a 	mov	r4,r3
 804de40:	39d05104 	addi	r7,r7,16708
 804de44:	003f0106 	br	804da4c <___svfiprintf_internal_r+0xc34>
 804de48:	d9800845 	stb	r6,33(sp)
 804de4c:	003c9506 	br	804d0a4 <___svfiprintf_internal_r+0x28c>
 804de50:	d9800904 	addi	r6,sp,36
 804de54:	a00b883a 	mov	r5,r20
 804de58:	a809883a 	mov	r4,r21
 804de5c:	804cc580 	call	804cc58 <__ssprint_r>
 804de60:	003cfe06 	br	804d25c <___svfiprintf_internal_r+0x444>
 804de64:	4827883a 	mov	r19,r9
 804de68:	dc400315 	stw	r17,12(sp)
 804de6c:	482d883a 	mov	r22,r9
 804de70:	003c9206 	br	804d0bc <___svfiprintf_internal_r+0x2a4>
 804de74:	d9800845 	stb	r6,33(sp)
 804de78:	003e3706 	br	804d758 <___svfiprintf_internal_r+0x940>
 804de7c:	d9800845 	stb	r6,33(sp)
 804de80:	003d9606 	br	804d4dc <___svfiprintf_internal_r+0x6c4>
 804de84:	d9800845 	stb	r6,33(sp)
 804de88:	003db206 	br	804d554 <___svfiprintf_internal_r+0x73c>
 804de8c:	d9800845 	stb	r6,33(sp)
 804de90:	003d6e06 	br	804d44c <___svfiprintf_internal_r+0x634>
 804de94:	d9800845 	stb	r6,33(sp)
 804de98:	003dc006 	br	804d59c <___svfiprintf_internal_r+0x784>
 804de9c:	180d883a 	mov	r6,r3
 804dea0:	2809883a 	mov	r4,r5
 804dea4:	39d05104 	addi	r7,r7,16708
 804dea8:	003eb806 	br	804d98c <___svfiprintf_internal_r+0xb74>
 804deac:	00bfffc4 	movi	r2,-1
 804deb0:	d8800015 	stw	r2,0(sp)
 804deb4:	003cec06 	br	804d268 <___svfiprintf_internal_r+0x450>
 804deb8:	d8800317 	ldw	r2,12(sp)
 804debc:	12400017 	ldw	r9,0(r2)
 804dec0:	15c00104 	addi	r23,r2,4
 804dec4:	4800010e 	bge	r9,zero,804decc <___svfiprintf_internal_r+0x10b4>
 804dec8:	027fffc4 	movi	r9,-1
 804decc:	e0800043 	ldbu	r2,1(fp)
 804ded0:	ddc00315 	stw	r23,12(sp)
 804ded4:	2039883a 	mov	fp,r4
 804ded8:	10803fcc 	andi	r2,r2,255
 804dedc:	1080201c 	xori	r2,r2,128
 804dee0:	10bfe004 	addi	r2,r2,-128
 804dee4:	003bff06 	br	804cee4 <___svfiprintf_internal_r+0xcc>
 804dee8:	00800304 	movi	r2,12
 804deec:	a8800015 	stw	r2,0(r21)
 804def0:	00bfffc4 	movi	r2,-1
 804def4:	d8800015 	stw	r2,0(sp)
 804def8:	003cdb06 	br	804d268 <___svfiprintf_internal_r+0x450>

0804defc <_vfprintf_r>:
 804defc:	8003e001 	jmpi	8003e00 <___vfprintf_internal_r>
